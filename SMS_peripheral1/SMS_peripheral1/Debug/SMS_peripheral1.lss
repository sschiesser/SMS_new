
SMS_peripheral1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000108c4  10008000  10008000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000074  100188c4  100188c4  000188c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00002ef8  10018938  10018938  00018938  2**2
                  ALLOC
  3 .stack        00000800  1001b830  1001b830  00018938  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00018938  2**0
                  CONTENTS, READONLY
  5 .comment      000000b4  00000000  00000000  00018960  2**0
                  CONTENTS, READONLY
  6 .debug_info   0004b447  00000000  00000000  00018a14  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005331  00000000  00000000  00063e5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000a2ae  00000000  00000000  0006918c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000b80  00000000  00000000  0007343a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000b40  00000000  00000000  00073fba  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0000c34a  00000000  00000000  00074afa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000160a2  00000000  00000000  00080e44  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    001418ec  00000000  00000000  00096ee6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002d08  00000000  00000000  001d87d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

10008000 <app_entry>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void app_entry(void)
{
10008000:	b510      	push	{r4, lr}

    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
10008002:	4b18      	ldr	r3, [pc, #96]	; (10008064 <app_entry+0x64>)
10008004:	4a18      	ldr	r2, [pc, #96]	; (10008068 <app_entry+0x68>)
10008006:	429a      	cmp	r2, r3
10008008:	d003      	beq.n	10008012 <app_entry+0x12>
        for (; pDest < &_erelocate;) {
1000800a:	4b18      	ldr	r3, [pc, #96]	; (1000806c <app_entry+0x6c>)
1000800c:	4a15      	ldr	r2, [pc, #84]	; (10008064 <app_entry+0x64>)
1000800e:	429a      	cmp	r2, r3
10008010:	d304      	bcc.n	1000801c <app_entry+0x1c>
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008012:	4b17      	ldr	r3, [pc, #92]	; (10008070 <app_entry+0x70>)
10008014:	4a17      	ldr	r2, [pc, #92]	; (10008074 <app_entry+0x74>)
10008016:	429a      	cmp	r2, r3
10008018:	d310      	bcc.n	1000803c <app_entry+0x3c>
1000801a:	e01e      	b.n	1000805a <app_entry+0x5a>
1000801c:	4b16      	ldr	r3, [pc, #88]	; (10008078 <app_entry+0x78>)
1000801e:	4a13      	ldr	r2, [pc, #76]	; (1000806c <app_entry+0x6c>)
10008020:	3203      	adds	r2, #3
10008022:	1ad2      	subs	r2, r2, r3
10008024:	0892      	lsrs	r2, r2, #2
10008026:	3201      	adds	r2, #1
10008028:	0092      	lsls	r2, r2, #2
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
1000802a:	2300      	movs	r3, #0
            *pDest++ = *pSrc++;
1000802c:	480d      	ldr	r0, [pc, #52]	; (10008064 <app_entry+0x64>)
1000802e:	490e      	ldr	r1, [pc, #56]	; (10008068 <app_entry+0x68>)
10008030:	58cc      	ldr	r4, [r1, r3]
10008032:	50c4      	str	r4, [r0, r3]
10008034:	3304      	adds	r3, #4
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
10008036:	4293      	cmp	r3, r2
10008038:	d1fa      	bne.n	10008030 <app_entry+0x30>
1000803a:	e7ea      	b.n	10008012 <app_entry+0x12>
1000803c:	4b0f      	ldr	r3, [pc, #60]	; (1000807c <app_entry+0x7c>)
1000803e:	490c      	ldr	r1, [pc, #48]	; (10008070 <app_entry+0x70>)
10008040:	3103      	adds	r1, #3
10008042:	1ac9      	subs	r1, r1, r3
10008044:	0889      	lsrs	r1, r1, #2
10008046:	3101      	adds	r1, #1
10008048:	0089      	lsls	r1, r1, #2
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
1000804a:	2300      	movs	r3, #0
        *pDest++ = 0;
1000804c:	4c09      	ldr	r4, [pc, #36]	; (10008074 <app_entry+0x74>)
1000804e:	2000      	movs	r0, #0
10008050:	191a      	adds	r2, r3, r4
10008052:	6010      	str	r0, [r2, #0]
10008054:	3304      	adds	r3, #4
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008056:	428b      	cmp	r3, r1
10008058:	d1fa      	bne.n	10008050 <app_entry+0x50>
        *pDest++ = 0;
    }

    /* Initialize the C library */
    __libc_init_array();
1000805a:	4b09      	ldr	r3, [pc, #36]	; (10008080 <app_entry+0x80>)
1000805c:	4798      	blx	r3

    /* Branch to main function */
    main();
1000805e:	4b09      	ldr	r3, [pc, #36]	; (10008084 <app_entry+0x84>)
10008060:	4798      	blx	r3

    /* return to BLE OS*/
    return;
}
10008062:	bd10      	pop	{r4, pc}
10008064:	100188c4 	.word	0x100188c4
10008068:	100188c4 	.word	0x100188c4
1000806c:	10018938 	.word	0x10018938
10008070:	1001b830 	.word	0x1001b830
10008074:	10018938 	.word	0x10018938
10008078:	100188c8 	.word	0x100188c8
1000807c:	1001893c 	.word	0x1001893c
10008080:	10016549 	.word	0x10016549
10008084:	1000ead9 	.word	0x1000ead9

10008088 <__do_global_dtors_aux>:
10008088:	b510      	push	{r4, lr}
1000808a:	4c06      	ldr	r4, [pc, #24]	; (100080a4 <__do_global_dtors_aux+0x1c>)
1000808c:	7823      	ldrb	r3, [r4, #0]
1000808e:	2b00      	cmp	r3, #0
10008090:	d107      	bne.n	100080a2 <__do_global_dtors_aux+0x1a>
10008092:	4b05      	ldr	r3, [pc, #20]	; (100080a8 <__do_global_dtors_aux+0x20>)
10008094:	2b00      	cmp	r3, #0
10008096:	d002      	beq.n	1000809e <__do_global_dtors_aux+0x16>
10008098:	4804      	ldr	r0, [pc, #16]	; (100080ac <__do_global_dtors_aux+0x24>)
1000809a:	e000      	b.n	1000809e <__do_global_dtors_aux+0x16>
1000809c:	bf00      	nop
1000809e:	2301      	movs	r3, #1
100080a0:	7023      	strb	r3, [r4, #0]
100080a2:	bd10      	pop	{r4, pc}
100080a4:	10018938 	.word	0x10018938
100080a8:	00000000 	.word	0x00000000
100080ac:	100188c4 	.word	0x100188c4

100080b0 <frame_dummy>:
100080b0:	4b08      	ldr	r3, [pc, #32]	; (100080d4 <frame_dummy+0x24>)
100080b2:	b510      	push	{r4, lr}
100080b4:	2b00      	cmp	r3, #0
100080b6:	d003      	beq.n	100080c0 <frame_dummy+0x10>
100080b8:	4907      	ldr	r1, [pc, #28]	; (100080d8 <frame_dummy+0x28>)
100080ba:	4808      	ldr	r0, [pc, #32]	; (100080dc <frame_dummy+0x2c>)
100080bc:	e000      	b.n	100080c0 <frame_dummy+0x10>
100080be:	bf00      	nop
100080c0:	4807      	ldr	r0, [pc, #28]	; (100080e0 <frame_dummy+0x30>)
100080c2:	6803      	ldr	r3, [r0, #0]
100080c4:	2b00      	cmp	r3, #0
100080c6:	d100      	bne.n	100080ca <frame_dummy+0x1a>
100080c8:	bd10      	pop	{r4, pc}
100080ca:	4b06      	ldr	r3, [pc, #24]	; (100080e4 <frame_dummy+0x34>)
100080cc:	2b00      	cmp	r3, #0
100080ce:	d0fb      	beq.n	100080c8 <frame_dummy+0x18>
100080d0:	4798      	blx	r3
100080d2:	e7f9      	b.n	100080c8 <frame_dummy+0x18>
100080d4:	00000000 	.word	0x00000000
100080d8:	1001893c 	.word	0x1001893c
100080dc:	100188c4 	.word	0x100188c4
100080e0:	100188c4 	.word	0x100188c4
100080e4:	00000000 	.word	0x00000000

100080e8 <aon_sleep_timer_get_config_defaults>:
 * \param[out]  config  Pointer to a AON Sleep Timer module configuration structure to set
 */
void aon_sleep_timer_get_config_defaults(struct aon_sleep_timer_config *config)
{
	/* Default configuration values */
	config->wakeup = AON_SLEEP_TIMER_WAKEUP_ARM;
100080e8:	2301      	movs	r3, #1
100080ea:	7003      	strb	r3, [r0, #0]
	config->mode = AON_SLEEP_TIMER_SINGLE_MODE;
100080ec:	7043      	strb	r3, [r0, #1]
	config->counter = 32000;
100080ee:	23fa      	movs	r3, #250	; 0xfa
100080f0:	01db      	lsls	r3, r3, #7
100080f2:	6043      	str	r3, [r0, #4]
}
100080f4:	4770      	bx	lr
100080f6:	46c0      	nop			; (mov r8, r8)

100080f8 <aon_sleep_timer_disable>:
 */
void aon_sleep_timer_disable(void)
{
	uint32_t regval;

	AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = 0;
100080f8:	4b06      	ldr	r3, [pc, #24]	; (10008114 <aon_sleep_timer_disable+0x1c>)
100080fa:	2200      	movs	r2, #0
100080fc:	605a      	str	r2, [r3, #4]
	regval = AON_SLEEP_TIMER0->CONTROL.reg;
100080fe:	681a      	ldr	r2, [r3, #0]
	regval &= ~AON_SLEEP_TIMER_CONTROL_RELOAD_ENABLE;
	regval &= ~AON_SLEEP_TIMER_CONTROL_SINGLE_COUNT_ENABLE;
10008100:	2103      	movs	r1, #3
10008102:	438a      	bics	r2, r1
	AON_SLEEP_TIMER0->CONTROL.reg = regval;
10008104:	601a      	str	r2, [r3, #0]

	while (AON_SLEEP_TIMER0->CONTROL.reg & (1 << 14)) {
10008106:	0019      	movs	r1, r3
10008108:	2280      	movs	r2, #128	; 0x80
1000810a:	01d2      	lsls	r2, r2, #7
1000810c:	680b      	ldr	r3, [r1, #0]
1000810e:	4213      	tst	r3, r2
10008110:	d1fc      	bne.n	1000810c <aon_sleep_timer_disable+0x14>
	}
}
10008112:	4770      	bx	lr
10008114:	4000d000 	.word	0x4000d000

10008118 <aon_sleep_timer_clear_interrup>:
 * This flag will be cleared automatically once the IRQ
 * has been seen on the sleep clock.
 */
void aon_sleep_timer_clear_interrup(void)
{
	AON_SLEEP_TIMER0->CONTROL.reg |= AON_SLEEP_TIMER_CONTROL_IRQ_CLEAR;
10008118:	4a02      	ldr	r2, [pc, #8]	; (10008124 <aon_sleep_timer_clear_interrup+0xc>)
1000811a:	6811      	ldr	r1, [r2, #0]
1000811c:	2310      	movs	r3, #16
1000811e:	430b      	orrs	r3, r1
10008120:	6013      	str	r3, [r2, #0]
}
10008122:	4770      	bx	lr
10008124:	4000d000 	.word	0x4000d000

10008128 <aon_sleep_timer_isr_handler>:
 *
 * Timer ISR handler.
 *
 */
static void aon_sleep_timer_isr_handler(void)
{
10008128:	b510      	push	{r4, lr}
	aon_sleep_timer_clear_interrup();
1000812a:	4b04      	ldr	r3, [pc, #16]	; (1000813c <aon_sleep_timer_isr_handler+0x14>)
1000812c:	4798      	blx	r3

	if (aon_sleep_timer_callback) {
1000812e:	4b04      	ldr	r3, [pc, #16]	; (10008140 <aon_sleep_timer_isr_handler+0x18>)
10008130:	681b      	ldr	r3, [r3, #0]
10008132:	2b00      	cmp	r3, #0
10008134:	d000      	beq.n	10008138 <aon_sleep_timer_isr_handler+0x10>
		aon_sleep_timer_callback();
10008136:	4798      	blx	r3
	}
}
10008138:	bd10      	pop	{r4, pc}
1000813a:	46c0      	nop			; (mov r8, r8)
1000813c:	10008119 	.word	0x10008119
10008140:	10018954 	.word	0x10018954

10008144 <aon_sleep_timer_register_callback>:
 *
 * \param[in]     callback_func Pointer to callback function
 */
void aon_sleep_timer_register_callback(aon_sleep_timer_callback_t fun)
{
	aon_sleep_timer_callback = fun;
10008144:	4b01      	ldr	r3, [pc, #4]	; (1000814c <aon_sleep_timer_register_callback+0x8>)
10008146:	6018      	str	r0, [r3, #0]
}
10008148:	4770      	bx	lr
1000814a:	46c0      	nop			; (mov r8, r8)
1000814c:	10018954 	.word	0x10018954

10008150 <aon_sleep_timer_unregister_callback>:
 * Unregisters and disable a callback function implemented by the user.
 *
 */
void aon_sleep_timer_unregister_callback(void)
{
	aon_sleep_timer_callback = NULL;
10008150:	2200      	movs	r2, #0
10008152:	4b01      	ldr	r3, [pc, #4]	; (10008158 <aon_sleep_timer_unregister_callback+0x8>)
10008154:	601a      	str	r2, [r3, #0]
}
10008156:	4770      	bx	lr
10008158:	10018954 	.word	0x10018954

1000815c <aon_sleep_timer_init>:
 *
 * \param[in]     config       Pointer to the AON Sleep Timer configuration options struct
 *
 */
void aon_sleep_timer_init(const struct aon_sleep_timer_config *config)
{
1000815c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000815e:	b083      	sub	sp, #12
	uint32_t aon_st_ctrl = 0;

	AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg = AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_RESETVALUE;
10008160:	2200      	movs	r2, #0
10008162:	4b29      	ldr	r3, [pc, #164]	; (10008208 <aon_sleep_timer_init+0xac>)
10008164:	731a      	strb	r2, [r3, #12]
	if (config->wakeup == AON_SLEEP_TIMER_WAKEUP_ARM_BLE) {
10008166:	7803      	ldrb	r3, [r0, #0]
10008168:	2b02      	cmp	r3, #2
1000816a:	d105      	bne.n	10008178 <aon_sleep_timer_init+0x1c>
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
1000816c:	4a26      	ldr	r2, [pc, #152]	; (10008208 <aon_sleep_timer_init+0xac>)
1000816e:	7b11      	ldrb	r1, [r2, #12]
10008170:	3301      	adds	r3, #1
10008172:	430b      	orrs	r3, r1
10008174:	7313      	strb	r3, [r2, #12]
10008176:	e005      	b.n	10008184 <aon_sleep_timer_init+0x28>
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE |
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_BLE_ENABLE;
	} else if (config->wakeup == AON_SLEEP_TIMER_WAKEUP_ARM) {
10008178:	2b01      	cmp	r3, #1
1000817a:	d103      	bne.n	10008184 <aon_sleep_timer_init+0x28>
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
1000817c:	4a22      	ldr	r2, [pc, #136]	; (10008208 <aon_sleep_timer_init+0xac>)
1000817e:	7b11      	ldrb	r1, [r2, #12]
10008180:	430b      	orrs	r3, r1
10008182:	7313      	strb	r3, [r2, #12]
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
10008184:	4b21      	ldr	r3, [pc, #132]	; (1000820c <aon_sleep_timer_init+0xb0>)
10008186:	681a      	ldr	r2, [r3, #0]
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
10008188:	0053      	lsls	r3, r2, #1
1000818a:	d01f      	beq.n	100081cc <aon_sleep_timer_init+0x70>
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
1000818c:	4d1f      	ldr	r5, [pc, #124]	; (1000820c <aon_sleep_timer_init+0xb0>)
1000818e:	2700      	movs	r7, #0

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;

	for (i = 0; i < cycles*100; i++) {
10008190:	262c      	movs	r6, #44	; 0x2c
10008192:	36ff      	adds	r6, #255	; 0xff
10008194:	2180      	movs	r1, #128	; 0x80
10008196:	01c9      	lsls	r1, r1, #7
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
10008198:	602f      	str	r7, [r5, #0]

static aon_sleep_timer_callback_t aon_sleep_timer_callback = NULL;

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;
1000819a:	9701      	str	r7, [sp, #4]

	for (i = 0; i < cycles*100; i++) {
1000819c:	9701      	str	r7, [sp, #4]
1000819e:	9b01      	ldr	r3, [sp, #4]
100081a0:	42b3      	cmp	r3, r6
100081a2:	d806      	bhi.n	100081b2 <aon_sleep_timer_init+0x56>
		asm volatile ("nop");
100081a4:	46c0      	nop			; (mov r8, r8)

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;

	for (i = 0; i < cycles*100; i++) {
100081a6:	9b01      	ldr	r3, [sp, #4]
100081a8:	3301      	adds	r3, #1
100081aa:	9301      	str	r3, [sp, #4]
100081ac:	9b01      	ldr	r3, [sp, #4]
100081ae:	42b3      	cmp	r3, r6
100081b0:	d9f8      	bls.n	100081a4 <aon_sleep_timer_init+0x48>
100081b2:	7844      	ldrb	r4, [r0, #1]
100081b4:	000b      	movs	r3, r1
100081b6:	2c00      	cmp	r4, #0
100081b8:	d103      	bne.n	100081c2 <aon_sleep_timer_init+0x66>
100081ba:	2380      	movs	r3, #128	; 0x80
100081bc:	009b      	lsls	r3, r3, #2
100081be:	e000      	b.n	100081c2 <aon_sleep_timer_init+0x66>
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
		delay_cycle(3);
		while (aon_st_ctrl & ((config->mode == AON_SLEEP_TIMER_RELOAD_MODE) ?
				(1 << 9) : (1 << 14))) {
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
100081c0:	682a      	ldr	r2, [r5, #0]

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
		delay_cycle(3);
		while (aon_st_ctrl & ((config->mode == AON_SLEEP_TIMER_RELOAD_MODE) ?
100081c2:	4213      	tst	r3, r2
100081c4:	d1fc      	bne.n	100081c0 <aon_sleep_timer_init+0x64>
				(1 << 9) : (1 << 14))) {
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
		}
		aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
100081c6:	682a      	ldr	r2, [r5, #0]
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
100081c8:	0053      	lsls	r3, r2, #1
100081ca:	d1e5      	bne.n	10008198 <aon_sleep_timer_init+0x3c>
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
		}
		aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	}

	if (config->mode == AON_SLEEP_TIMER_RELOAD_MODE) {
100081cc:	7843      	ldrb	r3, [r0, #1]
100081ce:	2b00      	cmp	r3, #0
100081d0:	d105      	bne.n	100081de <aon_sleep_timer_init+0x82>
		/* Reload counter will start here */
		AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = config->counter;
100081d2:	4b0e      	ldr	r3, [pc, #56]	; (1000820c <aon_sleep_timer_init+0xb0>)
100081d4:	6842      	ldr	r2, [r0, #4]
100081d6:	605a      	str	r2, [r3, #4]
		AON_SLEEP_TIMER0->CONTROL.reg = AON_SLEEP_TIMER_CONTROL_RELOAD_ENABLE;
100081d8:	2201      	movs	r2, #1
100081da:	601a      	str	r2, [r3, #0]
100081dc:	e004      	b.n	100081e8 <aon_sleep_timer_init+0x8c>
	} else {
		/* Single counter will start here */
		AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = config->counter;
100081de:	4b0b      	ldr	r3, [pc, #44]	; (1000820c <aon_sleep_timer_init+0xb0>)
100081e0:	6842      	ldr	r2, [r0, #4]
100081e2:	605a      	str	r2, [r3, #4]
		AON_SLEEP_TIMER0->CONTROL.reg = AON_SLEEP_TIMER_CONTROL_SINGLE_COUNT_ENABLE;
100081e4:	2202      	movs	r2, #2
100081e6:	601a      	str	r2, [r3, #0]
	}

	if (config->mode == AON_SLEEP_TIMER_SINGLE_MODE) {
100081e8:	7843      	ldrb	r3, [r0, #1]
100081ea:	2b01      	cmp	r3, #1
100081ec:	d106      	bne.n	100081fc <aon_sleep_timer_init+0xa0>
		while ((AON_SLEEP_TIMER0->CONTROL.reg &
100081ee:	4907      	ldr	r1, [pc, #28]	; (1000820c <aon_sleep_timer_init+0xb0>)
100081f0:	22e0      	movs	r2, #224	; 0xe0
100081f2:	01d2      	lsls	r2, r2, #7
100081f4:	680b      	ldr	r3, [r1, #0]
100081f6:	4013      	ands	r3, r2
100081f8:	4293      	cmp	r3, r2
100081fa:	d1fb      	bne.n	100081f4 <aon_sleep_timer_init+0x98>
				AON_SLEEP_TIMER_CONTROL_SLP_TIMER_SINGLE_COUNT_ENABLE_DLY_Msk)
				!= AON_SLEEP_TIMER_CONTROL_SLP_TIMER_SINGLE_COUNT_ENABLE_DLY_Msk) {
		}
	}

	system_register_isr(RAM_ISR_TABLE_AON_SLEEP_TIMER_INDEX, (uint32_t)aon_sleep_timer_isr_handler);
100081fc:	4904      	ldr	r1, [pc, #16]	; (10008210 <aon_sleep_timer_init+0xb4>)
100081fe:	202b      	movs	r0, #43	; 0x2b
10008200:	4b04      	ldr	r3, [pc, #16]	; (10008214 <aon_sleep_timer_init+0xb8>)
10008202:	4798      	blx	r3
}
10008204:	b003      	add	sp, #12
10008206:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008208:	4000e000 	.word	0x4000e000
1000820c:	4000d000 	.word	0x4000d000
10008210:	10008129 	.word	0x10008129
10008214:	1000c859 	.word	0x1000c859

10008218 <_i2c_master_read_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
10008218:	b5f0      	push	{r4, r5, r6, r7, lr}
1000821a:	4657      	mov	r7, sl
1000821c:	464e      	mov	r6, r9
1000821e:	4645      	mov	r5, r8
10008220:	b4e0      	push	{r5, r6, r7}
10008222:	b082      	sub	sp, #8
	Assert(config);
	
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
	uint16_t length = packet->data_length;
10008224:	884d      	ldrh	r5, [r1, #2]

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
10008226:	2317      	movs	r3, #23
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
	uint16_t length = packet->data_length;

	if (length == 0) {
10008228:	2d00      	cmp	r5, #0
1000822a:	d033      	beq.n	10008294 <_i2c_master_read_packet+0x7c>
	Assert(module->hw);
	Assert(config);
	
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
1000822c:	6803      	ldr	r3, [r0, #0]
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2c *const i2c_module)
{
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
1000822e:	2428      	movs	r4, #40	; 0x28
10008230:	5d1a      	ldrb	r2, [r3, r4]
10008232:	07d2      	lsls	r2, r2, #31
10008234:	d4fc      	bmi.n	10008230 <_i2c_master_read_packet+0x18>
	}

	i2c_wait_for_idle(i2c_module);

	/* Flush the FIFO */
	i2c_module->I2C_FLUSH.reg = 1;
10008236:	2201      	movs	r2, #1
10008238:	2434      	movs	r4, #52	; 0x34
1000823a:	551a      	strb	r2, [r3, r4]

	/* Enable I2C on bus (start condition). */
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
1000823c:	3c14      	subs	r4, #20
1000823e:	551a      	strb	r2, [r3, r4]
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
10008240:	880a      	ldrh	r2, [r1, #0]
10008242:	0052      	lsls	r2, r2, #1
10008244:	2402      	movs	r4, #2
10008246:	34ff      	adds	r4, #255	; 0xff
10008248:	4322      	orrs	r2, r4
1000824a:	b292      	uxth	r2, r2
1000824c:	801a      	strh	r2, [r3, #0]
			(packet->address << 1) | I2C_TRANSFER_READ;

	/* Now check whether the core has sent the data out and free the bus. */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
1000824e:	3cf1      	subs	r4, #241	; 0xf1
		status = i2c_module->TRANSMIT_STATUS.reg;
10008250:	7a1a      	ldrb	r2, [r3, #8]
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
			(packet->address << 1) | I2C_TRANSFER_READ;

	/* Now check whether the core has sent the data out and free the bus. */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
10008252:	4222      	tst	r2, r4
10008254:	d0fc      	beq.n	10008250 <_i2c_master_read_packet+0x38>
10008256:	2200      	movs	r2, #0
		status = i2c_module->TRANSMIT_STATUS.reg;
	}

	do {
		/* Send stop condition. */
		if ((!module->no_stop) && (counter == (length - 1))) {
10008258:	1e6c      	subs	r4, r5, #1
1000825a:	46a4      	mov	ip, r4
			i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
1000825c:	2420      	movs	r4, #32
1000825e:	46a1      	mov	r9, r4
10008260:	2400      	movs	r4, #0
10008262:	46a0      	mov	r8, r4
		}

		status = i2c_module->RECEIVE_STATUS.reg;
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
10008264:	2601      	movs	r6, #1
		status = i2c_module->TRANSMIT_STATUS.reg;
	}

	do {
		/* Send stop condition. */
		if ((!module->no_stop) && (counter == (length - 1))) {
10008266:	7944      	ldrb	r4, [r0, #5]
10008268:	2c00      	cmp	r4, #0
1000826a:	d104      	bne.n	10008276 <_i2c_master_read_packet+0x5e>
1000826c:	4562      	cmp	r2, ip
1000826e:	d102      	bne.n	10008276 <_i2c_master_read_packet+0x5e>
			i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
10008270:	464c      	mov	r4, r9
10008272:	4647      	mov	r7, r8
10008274:	551f      	strb	r7, [r3, r4]
		}

		status = i2c_module->RECEIVE_STATUS.reg;
10008276:	7b1c      	ldrb	r4, [r3, #12]
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
10008278:	4234      	tst	r4, r6
1000827a:	d008      	beq.n	1000828e <_i2c_master_read_packet+0x76>
			packet->data[counter++] = i2c_module->RECEIVE_DATA.reg;
1000827c:	1c54      	adds	r4, r2, #1
1000827e:	46a2      	mov	sl, r4
10008280:	791f      	ldrb	r7, [r3, #4]
10008282:	684c      	ldr	r4, [r1, #4]
10008284:	54a7      	strb	r7, [r4, r2]
10008286:	4652      	mov	r2, sl
10008288:	466c      	mov	r4, sp
1000828a:	80e2      	strh	r2, [r4, #6]
1000828c:	88e2      	ldrh	r2, [r4, #6]
	} while (counter < length);
1000828e:	42aa      	cmp	r2, r5
10008290:	d3e9      	bcc.n	10008266 <_i2c_master_read_packet+0x4e>

	return STATUS_OK;
10008292:	2300      	movs	r3, #0
}
10008294:	0018      	movs	r0, r3
10008296:	b002      	add	sp, #8
10008298:	bc1c      	pop	{r2, r3, r4}
1000829a:	4690      	mov	r8, r2
1000829c:	4699      	mov	r9, r3
1000829e:	46a2      	mov	sl, r4
100082a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100082a2:	46c0      	nop			; (mov r8, r8)

100082a4 <_i2c_master_write_packet>:
 * \retval STATUS_OK                    The packet was write successfully
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
100082a4:	b5f0      	push	{r4, r5, r6, r7, lr}
100082a6:	4684      	mov	ip, r0
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);
	
	I2c *const i2c_module = (module->hw);
100082a8:	6802      	ldr	r2, [r0, #0]
	uint16_t counter = 0;
	uint32_t status  = 0;

	uint16_t length = packet->data_length;
100082aa:	884e      	ldrh	r6, [r1, #2]
100082ac:	2428      	movs	r4, #40	; 0x28
100082ae:	5d13      	ldrb	r3, [r2, r4]
100082b0:	07db      	lsls	r3, r3, #31
100082b2:	d4fc      	bmi.n	100082ae <_i2c_master_write_packet+0xa>

	i2c_wait_for_idle(i2c_module);

	/* Flush the FIFO */
	i2c_module->I2C_FLUSH.reg = 1;
100082b4:	2301      	movs	r3, #1
100082b6:	2434      	movs	r4, #52	; 0x34
100082b8:	5513      	strb	r3, [r2, r4]

	/* Enable I2C on bus (start condition) */
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
100082ba:	3c14      	subs	r4, #20
100082bc:	5513      	strb	r3, [r2, r4]

	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
100082be:	880b      	ldrh	r3, [r1, #0]
100082c0:	005b      	lsls	r3, r3, #1
100082c2:	34e0      	adds	r4, #224	; 0xe0
100082c4:	4323      	orrs	r3, r4
100082c6:	b29b      	uxth	r3, r3
100082c8:	8013      	strh	r3, [r2, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);
	
	I2c *const i2c_module = (module->hw);
	uint16_t counter = 0;
100082ca:	2400      	movs	r4, #0
	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
			((packet->address) << 1) | I2C_TRANSFER_WRITE;
	do {
		status = i2c_module->TRANSMIT_STATUS.reg;
		if (status & I2C_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_Msk) {
100082cc:	2501      	movs	r5, #1

	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
			((packet->address) << 1) | I2C_TRANSFER_WRITE;
	do {
		status = i2c_module->TRANSMIT_STATUS.reg;
100082ce:	7a13      	ldrb	r3, [r2, #8]
100082d0:	b2db      	uxtb	r3, r3
		if (status & I2C_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_Msk) {
100082d2:	421d      	tst	r5, r3
100082d4:	d004      	beq.n	100082e0 <_i2c_master_write_packet+0x3c>
			i2c_module->TRANSMIT_DATA.reg = packet->data[counter++];
100082d6:	1c67      	adds	r7, r4, #1
100082d8:	6848      	ldr	r0, [r1, #4]
100082da:	5d04      	ldrb	r4, [r0, r4]
100082dc:	8014      	strh	r4, [r2, #0]
100082de:	b2bc      	uxth	r4, r7
		}
	} while (counter < length); 
100082e0:	42b4      	cmp	r4, r6
100082e2:	d3f4      	bcc.n	100082ce <_i2c_master_write_packet+0x2a>

	/* Now check whether the core has sent the data out and free the bus */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
100082e4:	06db      	lsls	r3, r3, #27
100082e6:	d403      	bmi.n	100082f0 <_i2c_master_write_packet+0x4c>
100082e8:	2110      	movs	r1, #16
			status = i2c_module->TRANSMIT_STATUS.reg;
100082ea:	7a13      	ldrb	r3, [r2, #8]
			i2c_module->TRANSMIT_DATA.reg = packet->data[counter++];
		}
	} while (counter < length); 

	/* Now check whether the core has sent the data out and free the bus */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
100082ec:	420b      	tst	r3, r1
100082ee:	d0fc      	beq.n	100082ea <_i2c_master_write_packet+0x46>
			status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition */
	if (!module->no_stop) {
100082f0:	4663      	mov	r3, ip
100082f2:	795b      	ldrb	r3, [r3, #5]
100082f4:	2b00      	cmp	r3, #0
100082f6:	d102      	bne.n	100082fe <_i2c_master_write_packet+0x5a>
		i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
100082f8:	2100      	movs	r1, #0
100082fa:	3320      	adds	r3, #32
100082fc:	54d1      	strb	r1, [r2, r3]
	}

	return STATUS_OK;
}
100082fe:	2000      	movs	r0, #0
10008300:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008302:	46c0      	nop			; (mov r8, r8)

10008304 <i2c_master_get_config_defaults>:
		struct i2c_master_config *const config)
{
	/* Sanity check */
	Assert(config);
	
	config->clock_source    = I2C_CLK_INPUT_3;
10008304:	2303      	movs	r3, #3
10008306:	7003      	strb	r3, [r0, #0]
	config->clock_divider   = 0x10;
10008308:	330d      	adds	r3, #13
1000830a:	8043      	strh	r3, [r0, #2]
	config->pin_number_pad0 = PIN_LP_GPIO_8;
1000830c:	3b08      	subs	r3, #8
1000830e:	6043      	str	r3, [r0, #4]
	config->pin_number_pad1 = PIN_LP_GPIO_9;
10008310:	3301      	adds	r3, #1
10008312:	60c3      	str	r3, [r0, #12]
	config->pinmux_sel_pad0 = MUX_LP_GPIO_8_I2C0_SDA;
10008314:	3b07      	subs	r3, #7
10008316:	6083      	str	r3, [r0, #8]
	config->pinmux_sel_pad1 = MUX_LP_GPIO_9_I2C0_SCL;
10008318:	6103      	str	r3, [r0, #16]
}
1000831a:	4770      	bx	lr

1000831c <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		I2c *const hw,
		const struct i2c_master_config *const config)
{
1000831c:	b570      	push	{r4, r5, r6, lr}
1000831e:	0004      	movs	r4, r0
10008320:	0015      	movs	r5, r2
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);
	
	module->hw = hw;
10008322:	6001      	str	r1, [r0, #0]

	/* Sanity check arguments. */
	if ((module == NULL) || (config == NULL))
10008324:	2800      	cmp	r0, #0
10008326:	d026      	beq.n	10008376 <i2c_master_init+0x5a>
10008328:	2a00      	cmp	r2, #0
1000832a:	d026      	beq.n	1000837a <i2c_master_init+0x5e>
1000832c:	2228      	movs	r2, #40	; 0x28
1000832e:	5c8b      	ldrb	r3, [r1, r2]
10008330:	07db      	lsls	r3, r3, #31
10008332:	d4fc      	bmi.n	1000832e <i2c_master_init+0x12>
 *
 */
static inline void i2c_disable(I2c *const i2c_module)
{
	i2c_wait_for_idle(i2c_module);
	i2c_module->I2C_MODULE_ENABLE.reg = 0;
10008334:	2300      	movs	r3, #0
10008336:	750b      	strb	r3, [r1, #20]
		return STATUS_ERR_INVALID_ARG;

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
10008338:	6823      	ldr	r3, [r4, #0]
1000833a:	4a11      	ldr	r2, [pc, #68]	; (10008380 <i2c_master_init+0x64>)
1000833c:	4293      	cmp	r3, r2
1000833e:	d103      	bne.n	10008348 <i2c_master_init+0x2c>
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
10008340:	2003      	movs	r0, #3
10008342:	4b10      	ldr	r3, [pc, #64]	; (10008384 <i2c_master_init+0x68>)
10008344:	4798      	blx	r3
10008346:	e006      	b.n	10008356 <i2c_master_init+0x3a>
	} else if (module->hw == I2C1) {
		system_peripheral_reset(PERIPHERAL_I2C1_CORE);
	} else {
		return STATUS_ERR_INVALID_ARG;
10008348:	2017      	movs	r0, #23
		return STATUS_ERR_INVALID_ARG;

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
	} else if (module->hw == I2C1) {
1000834a:	4a0f      	ldr	r2, [pc, #60]	; (10008388 <i2c_master_init+0x6c>)
1000834c:	4293      	cmp	r3, r2
1000834e:	d115      	bne.n	1000837c <i2c_master_init+0x60>
		system_peripheral_reset(PERIPHERAL_I2C1_CORE);
10008350:	3002      	adds	r0, #2
10008352:	4b0c      	ldr	r3, [pc, #48]	; (10008384 <i2c_master_init+0x68>)
10008354:	4798      	blx	r3
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);

	I2c *const i2c_module = (module->hw);
10008356:	6824      	ldr	r4, [r4, #0]

	/* Set the pinmux for this i2c module. */
	gpio_pinmux_cofiguration(config->pin_number_pad0, (uint16_t)(config->pinmux_sel_pad0));
10008358:	8929      	ldrh	r1, [r5, #8]
1000835a:	7928      	ldrb	r0, [r5, #4]
1000835c:	4e0b      	ldr	r6, [pc, #44]	; (1000838c <i2c_master_init+0x70>)
1000835e:	47b0      	blx	r6
	gpio_pinmux_cofiguration(config->pin_number_pad1, (uint16_t)(config->pinmux_sel_pad1));
10008360:	8a29      	ldrh	r1, [r5, #16]
10008362:	7b28      	ldrb	r0, [r5, #12]
10008364:	47b0      	blx	r6
	/* Set clock. */
	i2c_module->CLOCK_SOURCE_SELECT.reg = config->clock_source;
10008366:	782b      	ldrb	r3, [r5, #0]
10008368:	7423      	strb	r3, [r4, #16]
	i2c_module->I2C_CLK_DIVIDER.reg = I2C_CLK_DIVIDER_I2C_DIVIDE_RATIO(config->clock_divider);
1000836a:	886b      	ldrh	r3, [r5, #2]
1000836c:	8323      	strh	r3, [r4, #24]
	/* Enable master mode. */
	i2c_module->I2C_MASTER_MODE.reg = I2C_MASTER_MODE_MASTER_ENABLE_1;
1000836e:	2301      	movs	r3, #1
10008370:	7723      	strb	r3, [r4, #28]
#endif

	/* Set config and return status. */
	_i2c_master_set_config(module, config);

	return STATUS_OK;
10008372:	2000      	movs	r0, #0
10008374:	e002      	b.n	1000837c <i2c_master_init+0x60>
	
	module->hw = hw;

	/* Sanity check arguments. */
	if ((module == NULL) || (config == NULL))
		return STATUS_ERR_INVALID_ARG;
10008376:	2017      	movs	r0, #23
10008378:	e000      	b.n	1000837c <i2c_master_init+0x60>
1000837a:	2017      	movs	r0, #23

	/* Set config and return status. */
	_i2c_master_set_config(module, config);

	return STATUS_OK;
}
1000837c:	bd70      	pop	{r4, r5, r6, pc}
1000837e:	46c0      	nop			; (mov r8, r8)
10008380:	40003000 	.word	0x40003000
10008384:	1000c3f1 	.word	0x1000c3f1
10008388:	40003400 	.word	0x40003400
1000838c:	1000b979 	.word	0x1000b979

10008390 <i2c_master_read_packet_wait>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
10008390:	b510      	push	{r4, lr}
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
10008392:	2800      	cmp	r0, #0
10008394:	d008      	beq.n	100083a8 <i2c_master_read_packet_wait+0x18>
		return STATUS_ERR_INVALID_ARG;
10008396:	2317      	movs	r3, #23
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
10008398:	2900      	cmp	r1, #0
1000839a:	d006      	beq.n	100083aa <i2c_master_read_packet_wait+0x1a>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
1000839c:	2300      	movs	r3, #0
1000839e:	7143      	strb	r3, [r0, #5]

	return _i2c_master_read_packet(module, packet);
100083a0:	4b03      	ldr	r3, [pc, #12]	; (100083b0 <i2c_master_read_packet_wait+0x20>)
100083a2:	4798      	blx	r3
100083a4:	0003      	movs	r3, r0
100083a6:	e000      	b.n	100083aa <i2c_master_read_packet_wait+0x1a>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
		return STATUS_ERR_INVALID_ARG;
100083a8:	2317      	movs	r3, #23
#endif

	module->no_stop = false;

	return _i2c_master_read_packet(module, packet);
}
100083aa:	0018      	movs	r0, r3
100083ac:	bd10      	pop	{r4, pc}
100083ae:	46c0      	nop			; (mov r8, r8)
100083b0:	10008219 	.word	0x10008219

100083b4 <i2c_master_write_packet_wait>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
100083b4:	b510      	push	{r4, lr}
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
100083b6:	2800      	cmp	r0, #0
100083b8:	d008      	beq.n	100083cc <i2c_master_write_packet_wait+0x18>
		return STATUS_ERR_INVALID_ARG;
100083ba:	2317      	movs	r3, #23
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
100083bc:	2900      	cmp	r1, #0
100083be:	d006      	beq.n	100083ce <i2c_master_write_packet_wait+0x1a>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
100083c0:	2300      	movs	r3, #0
100083c2:	7143      	strb	r3, [r0, #5]

	return _i2c_master_write_packet(module, packet);
100083c4:	4b03      	ldr	r3, [pc, #12]	; (100083d4 <i2c_master_write_packet_wait+0x20>)
100083c6:	4798      	blx	r3
100083c8:	0003      	movs	r3, r0
100083ca:	e000      	b.n	100083ce <i2c_master_write_packet_wait+0x1a>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
100083cc:	2317      	movs	r3, #23
#endif

	module->no_stop = false;

	return _i2c_master_write_packet(module, packet);
}
100083ce:	0018      	movs	r0, r3
100083d0:	bd10      	pop	{r4, pc}
100083d2:	46c0      	nop			; (mov r8, r8)
100083d4:	100082a5 	.word	0x100082a5

100083d8 <i2c_master_write_packet_wait_no_stop>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
100083d8:	b510      	push	{r4, lr}
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
100083da:	2800      	cmp	r0, #0
100083dc:	d008      	beq.n	100083f0 <i2c_master_write_packet_wait_no_stop+0x18>
		return STATUS_ERR_INVALID_ARG;
100083de:	2317      	movs	r3, #23
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
100083e0:	2900      	cmp	r1, #0
100083e2:	d006      	beq.n	100083f2 <i2c_master_write_packet_wait_no_stop+0x1a>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = true;
100083e4:	3b16      	subs	r3, #22
100083e6:	7143      	strb	r3, [r0, #5]

	return _i2c_master_write_packet(module, packet);
100083e8:	4b03      	ldr	r3, [pc, #12]	; (100083f8 <i2c_master_write_packet_wait_no_stop+0x20>)
100083ea:	4798      	blx	r3
100083ec:	0003      	movs	r3, r0
100083ee:	e000      	b.n	100083f2 <i2c_master_write_packet_wait_no_stop+0x1a>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
100083f0:	2317      	movs	r3, #23
#endif

	module->no_stop = true;

	return _i2c_master_write_packet(module, packet);
}
100083f2:	0018      	movs	r0, r3
100083f4:	bd10      	pop	{r4, pc}
100083f6:	46c0      	nop			; (mov r8, r8)
100083f8:	100082a5 	.word	0x100082a5

100083fc <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
100083fc:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
100083fe:	4a06      	ldr	r2, [pc, #24]	; (10008418 <_sbrk+0x1c>)
10008400:	6812      	ldr	r2, [r2, #0]
10008402:	2a00      	cmp	r2, #0
10008404:	d102      	bne.n	1000840c <_sbrk+0x10>
		heap = (unsigned char *)&_end;
10008406:	4905      	ldr	r1, [pc, #20]	; (1000841c <_sbrk+0x20>)
10008408:	4a03      	ldr	r2, [pc, #12]	; (10008418 <_sbrk+0x1c>)
1000840a:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
1000840c:	4a02      	ldr	r2, [pc, #8]	; (10008418 <_sbrk+0x1c>)
1000840e:	6810      	ldr	r0, [r2, #0]

	heap += incr;
10008410:	18c3      	adds	r3, r0, r3
10008412:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
10008414:	4770      	bx	lr
10008416:	46c0      	nop			; (mov r8, r8)
10008418:	10018958 	.word	0x10018958
1000841c:	1001c030 	.word	0x1001c030

10008420 <_close>:
}

extern int _close(int file)
{
	return -1;
}
10008420:	2001      	movs	r0, #1
10008422:	4240      	negs	r0, r0
10008424:	4770      	bx	lr
10008426:	46c0      	nop			; (mov r8, r8)

10008428 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
10008428:	2380      	movs	r3, #128	; 0x80
1000842a:	019b      	lsls	r3, r3, #6
1000842c:	604b      	str	r3, [r1, #4]

	return 0;
}
1000842e:	2000      	movs	r0, #0
10008430:	4770      	bx	lr
10008432:	46c0      	nop			; (mov r8, r8)

10008434 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
10008434:	2001      	movs	r0, #1
10008436:	4770      	bx	lr

10008438 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
10008438:	2000      	movs	r0, #0
1000843a:	4770      	bx	lr

1000843c <madgwick_quaternion_update>:
// which fuses acceleration, rotation rate, and magnetic moments to produce a quaternion-based estimate of absolute
// device orientation -- which can be converted to yaw, pitch, and roll. Useful for stabilizing quadcopters, etc.
// The performance of the orientation filter is at least as good as conventional Kalman-based filtering algorithms
// but is much less computationally intensive---it can be performed on a 3.3 V Pro Mini operating at 8 MHz!
void madgwick_quaternion_update(float ax, float ay, float az, float gx, float gy, float gz, float mx, float my, float mz)
{
1000843c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000843e:	465f      	mov	r7, fp
10008440:	4656      	mov	r6, sl
10008442:	464d      	mov	r5, r9
10008444:	4644      	mov	r4, r8
10008446:	b4f0      	push	{r4, r5, r6, r7}
10008448:	b0a1      	sub	sp, #132	; 0x84
1000844a:	1c0e      	adds	r6, r1, #0
1000844c:	9204      	str	r2, [sp, #16]
1000844e:	930e      	str	r3, [sp, #56]	; 0x38
	float _2q1my;
	float _2q1mz;
	float _2q2mx;
	float _4bx;
	float _4bz;
	float _2q1 = 2.0 * q1;
10008450:	4bfd      	ldr	r3, [pc, #1012]	; (10008848 <madgwick_quaternion_update+0x40c>)
10008452:	6819      	ldr	r1, [r3, #0]
10008454:	9107      	str	r1, [sp, #28]
	float _2q2 = 2.0 * q2;
10008456:	4bfd      	ldr	r3, [pc, #1012]	; (1000884c <madgwick_quaternion_update+0x410>)
10008458:	6819      	ldr	r1, [r3, #0]
1000845a:	9106      	str	r1, [sp, #24]
	float _2q3 = 2.0 * q3;
1000845c:	4bfc      	ldr	r3, [pc, #1008]	; (10008850 <madgwick_quaternion_update+0x414>)
1000845e:	6819      	ldr	r1, [r3, #0]
10008460:	9102      	str	r1, [sp, #8]
	float _2q4 = 2.0 * q4;
10008462:	4bfc      	ldr	r3, [pc, #1008]	; (10008854 <madgwick_quaternion_update+0x418>)
10008464:	6819      	ldr	r1, [r3, #0]
10008466:	9105      	str	r1, [sp, #20]
	float q3q3 = q3 * q3;
	float q3q4 = q3 * q4;
	float q4q4 = q4 * q4;

	// Normalize accelerometer measurement
	norm = sqrtf(ax * ax + ay * ay + az * az);
10008468:	4cfb      	ldr	r4, [pc, #1004]	; (10008858 <madgwick_quaternion_update+0x41c>)
1000846a:	1c01      	adds	r1, r0, #0
1000846c:	9008      	str	r0, [sp, #32]
1000846e:	47a0      	blx	r4
10008470:	1c05      	adds	r5, r0, #0
10008472:	1c31      	adds	r1, r6, #0
10008474:	9609      	str	r6, [sp, #36]	; 0x24
10008476:	1c30      	adds	r0, r6, #0
10008478:	47a0      	blx	r4
1000847a:	1c06      	adds	r6, r0, #0
1000847c:	4ff7      	ldr	r7, [pc, #988]	; (1000885c <madgwick_quaternion_update+0x420>)
1000847e:	1c01      	adds	r1, r0, #0
10008480:	1c28      	adds	r0, r5, #0
10008482:	47b8      	blx	r7
10008484:	900a      	str	r0, [sp, #40]	; 0x28
10008486:	9b04      	ldr	r3, [sp, #16]
10008488:	1c19      	adds	r1, r3, #0
1000848a:	1c18      	adds	r0, r3, #0
1000848c:	47a0      	blx	r4
1000848e:	900b      	str	r0, [sp, #44]	; 0x2c
10008490:	1c31      	adds	r1, r6, #0
10008492:	1c28      	adds	r0, r5, #0
10008494:	47b8      	blx	r7
10008496:	1c05      	adds	r5, r0, #0
10008498:	990b      	ldr	r1, [sp, #44]	; 0x2c
1000849a:	1c28      	adds	r0, r5, #0
1000849c:	47b8      	blx	r7
1000849e:	4bf0      	ldr	r3, [pc, #960]	; (10008860 <madgwick_quaternion_update+0x424>)
100084a0:	4798      	blx	r3
100084a2:	1c04      	adds	r4, r0, #0
	if (norm == 0.0) return; // handle NaN
100084a4:	2100      	movs	r1, #0
100084a6:	4bef      	ldr	r3, [pc, #956]	; (10008864 <madgwick_quaternion_update+0x428>)
100084a8:	4798      	blx	r3
100084aa:	2800      	cmp	r0, #0
100084ac:	d001      	beq.n	100084b2 <madgwick_quaternion_update+0x76>
100084ae:	f000 fc16 	bl	10008cde <madgwick_quaternion_update+0x8a2>
	ax *= norm;
	ay *= norm;
	az *= norm;

	// Normalize magnetometer measurement
	norm = sqrtf(mx * mx + my * my + mz * mz);
100084b2:	4ee9      	ldr	r6, [pc, #932]	; (10008858 <madgwick_quaternion_update+0x41c>)
100084b4:	992c      	ldr	r1, [sp, #176]	; 0xb0
100084b6:	1c08      	adds	r0, r1, #0
100084b8:	47b0      	blx	r6
100084ba:	1c05      	adds	r5, r0, #0
100084bc:	992d      	ldr	r1, [sp, #180]	; 0xb4
100084be:	1c08      	adds	r0, r1, #0
100084c0:	47b0      	blx	r6
100084c2:	4fe6      	ldr	r7, [pc, #920]	; (1000885c <madgwick_quaternion_update+0x420>)
100084c4:	900a      	str	r0, [sp, #40]	; 0x28
100084c6:	1c01      	adds	r1, r0, #0
100084c8:	1c28      	adds	r0, r5, #0
100084ca:	47b8      	blx	r7
100084cc:	900b      	str	r0, [sp, #44]	; 0x2c
100084ce:	992e      	ldr	r1, [sp, #184]	; 0xb8
100084d0:	1c08      	adds	r0, r1, #0
100084d2:	47b0      	blx	r6
100084d4:	900c      	str	r0, [sp, #48]	; 0x30
100084d6:	990a      	ldr	r1, [sp, #40]	; 0x28
100084d8:	1c28      	adds	r0, r5, #0
100084da:	47b8      	blx	r7
100084dc:	1c05      	adds	r5, r0, #0
100084de:	990c      	ldr	r1, [sp, #48]	; 0x30
100084e0:	1c28      	adds	r0, r5, #0
100084e2:	47b8      	blx	r7
100084e4:	4bde      	ldr	r3, [pc, #888]	; (10008860 <madgwick_quaternion_update+0x424>)
100084e6:	4798      	blx	r3
100084e8:	900a      	str	r0, [sp, #40]	; 0x28
	if (norm == 0.0f) return; // handle NaN
100084ea:	2100      	movs	r1, #0
100084ec:	4bdd      	ldr	r3, [pc, #884]	; (10008864 <madgwick_quaternion_update+0x428>)
100084ee:	4798      	blx	r3
100084f0:	2800      	cmp	r0, #0
100084f2:	d000      	beq.n	100084f6 <madgwick_quaternion_update+0xba>
100084f4:	e3f3      	b.n	10008cde <madgwick_quaternion_update+0x8a2>
	float _2q1my;
	float _2q1mz;
	float _2q2mx;
	float _4bx;
	float _4bz;
	float _2q1 = 2.0 * q1;
100084f6:	4ed9      	ldr	r6, [pc, #868]	; (1000885c <madgwick_quaternion_update+0x420>)
100084f8:	9b07      	ldr	r3, [sp, #28]
100084fa:	1c19      	adds	r1, r3, #0
100084fc:	1c18      	adds	r0, r3, #0
100084fe:	47b0      	blx	r6
10008500:	9010      	str	r0, [sp, #64]	; 0x40
	float _2q2 = 2.0 * q2;
10008502:	9a06      	ldr	r2, [sp, #24]
10008504:	1c11      	adds	r1, r2, #0
10008506:	1c10      	adds	r0, r2, #0
10008508:	47b0      	blx	r6
1000850a:	9012      	str	r0, [sp, #72]	; 0x48
	float _2q3 = 2.0 * q3;
1000850c:	9b02      	ldr	r3, [sp, #8]
1000850e:	1c19      	adds	r1, r3, #0
10008510:	1c18      	adds	r0, r3, #0
10008512:	47b0      	blx	r6
10008514:	9013      	str	r0, [sp, #76]	; 0x4c
	float _2q4 = 2.0 * q4;
10008516:	9d05      	ldr	r5, [sp, #20]
10008518:	1c29      	adds	r1, r5, #0
1000851a:	1c28      	adds	r0, r5, #0
1000851c:	47b0      	blx	r6
1000851e:	901b      	str	r0, [sp, #108]	; 0x6c
	float _2q1q3 = 2.0f * q1 * q3;
	float _2q3q4 = 2.0f * q3 * q4;
	float q1q1 = q1 * q1;
10008520:	4fcd      	ldr	r7, [pc, #820]	; (10008858 <madgwick_quaternion_update+0x41c>)
10008522:	9b07      	ldr	r3, [sp, #28]
10008524:	1c19      	adds	r1, r3, #0
10008526:	1c18      	adds	r0, r3, #0
10008528:	47b8      	blx	r7
1000852a:	9017      	str	r0, [sp, #92]	; 0x5c
	float q1q2 = q1 * q2;
1000852c:	9906      	ldr	r1, [sp, #24]
1000852e:	9807      	ldr	r0, [sp, #28]
10008530:	47b8      	blx	r7
10008532:	9019      	str	r0, [sp, #100]	; 0x64
	float q1q3 = q1 * q3;
10008534:	9902      	ldr	r1, [sp, #8]
10008536:	9807      	ldr	r0, [sp, #28]
10008538:	47b8      	blx	r7
1000853a:	901c      	str	r0, [sp, #112]	; 0x70
	float q1q4 = q1 * q4;
	float q2q2 = q2 * q2;
1000853c:	9a06      	ldr	r2, [sp, #24]
1000853e:	1c11      	adds	r1, r2, #0
10008540:	1c10      	adds	r0, r2, #0
10008542:	47b8      	blx	r7
10008544:	9014      	str	r0, [sp, #80]	; 0x50
	float q2q3 = q2 * q3;
	float q2q4 = q2 * q4;
10008546:	1c29      	adds	r1, r5, #0
10008548:	9806      	ldr	r0, [sp, #24]
1000854a:	47b8      	blx	r7
1000854c:	9015      	str	r0, [sp, #84]	; 0x54
	float q3q3 = q3 * q3;
1000854e:	9b02      	ldr	r3, [sp, #8]
10008550:	1c19      	adds	r1, r3, #0
10008552:	1c18      	adds	r0, r3, #0
10008554:	47b8      	blx	r7
10008556:	9011      	str	r0, [sp, #68]	; 0x44
	float q3q4 = q3 * q4;
	float q4q4 = q4 * q4;
10008558:	1c29      	adds	r1, r5, #0
1000855a:	9505      	str	r5, [sp, #20]
1000855c:	1c28      	adds	r0, r5, #0
1000855e:	47b8      	blx	r7
10008560:	9016      	str	r0, [sp, #88]	; 0x58

	// Normalize accelerometer measurement
	norm = sqrtf(ax * ax + ay * ay + az * az);
	if (norm == 0.0) return; // handle NaN
	norm = 1.0f/norm;
10008562:	4dc1      	ldr	r5, [pc, #772]	; (10008868 <madgwick_quaternion_update+0x42c>)
10008564:	1c21      	adds	r1, r4, #0
10008566:	20fe      	movs	r0, #254	; 0xfe
10008568:	0580      	lsls	r0, r0, #22
1000856a:	47a8      	blx	r5
1000856c:	901a      	str	r0, [sp, #104]	; 0x68
	az *= norm;

	// Normalize magnetometer measurement
	norm = sqrtf(mx * mx + my * my + mz * mz);
	if (norm == 0.0f) return; // handle NaN
	norm = 1.0f/norm;
1000856e:	990a      	ldr	r1, [sp, #40]	; 0x28
10008570:	20fe      	movs	r0, #254	; 0xfe
10008572:	0580      	lsls	r0, r0, #22
10008574:	47a8      	blx	r5
10008576:	1c04      	adds	r4, r0, #0
	mx *= norm;
10008578:	1c01      	adds	r1, r0, #0
1000857a:	982c      	ldr	r0, [sp, #176]	; 0xb0
1000857c:	47b8      	blx	r7
1000857e:	900b      	str	r0, [sp, #44]	; 0x2c
	my *= norm;
10008580:	1c21      	adds	r1, r4, #0
10008582:	982d      	ldr	r0, [sp, #180]	; 0xb4
10008584:	47b8      	blx	r7
10008586:	1c05      	adds	r5, r0, #0
	mz *= norm;
10008588:	1c21      	adds	r1, r4, #0
1000858a:	982e      	ldr	r0, [sp, #184]	; 0xb8
1000858c:	47b8      	blx	r7
1000858e:	1c04      	adds	r4, r0, #0

	// Reference direction of Earth's magnetic field
	_2q1mx = 2.0f * q1 * mx;
10008590:	990b      	ldr	r1, [sp, #44]	; 0x2c
10008592:	9810      	ldr	r0, [sp, #64]	; 0x40
10008594:	47b8      	blx	r7
10008596:	9018      	str	r0, [sp, #96]	; 0x60
	_2q1my = 2.0f * q1 * my;
10008598:	950c      	str	r5, [sp, #48]	; 0x30
1000859a:	1c29      	adds	r1, r5, #0
1000859c:	9d10      	ldr	r5, [sp, #64]	; 0x40
1000859e:	1c28      	adds	r0, r5, #0
100085a0:	47b8      	blx	r7
100085a2:	901d      	str	r0, [sp, #116]	; 0x74
	_2q1mz = 2.0f * q1 * mz;
100085a4:	940f      	str	r4, [sp, #60]	; 0x3c
100085a6:	1c21      	adds	r1, r4, #0
100085a8:	9510      	str	r5, [sp, #64]	; 0x40
100085aa:	1c28      	adds	r0, r5, #0
100085ac:	47b8      	blx	r7
100085ae:	901e      	str	r0, [sp, #120]	; 0x78
	_2q2mx = 2.0f * q2 * mx;
100085b0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
100085b2:	1c21      	adds	r1, r4, #0
100085b4:	9812      	ldr	r0, [sp, #72]	; 0x48
100085b6:	47b8      	blx	r7
100085b8:	901f      	str	r0, [sp, #124]	; 0x7c
	hx = mx * q1q1 - _2q1my * q4 + _2q1mz * q3 + mx * q2q2 + _2q2 * my * q3 + _2q2 * mz * q4 - mx * q3q3 - mx * q4q4;
100085ba:	940b      	str	r4, [sp, #44]	; 0x2c
100085bc:	1c21      	adds	r1, r4, #0
100085be:	9817      	ldr	r0, [sp, #92]	; 0x5c
100085c0:	47b8      	blx	r7
100085c2:	1c04      	adds	r4, r0, #0
100085c4:	991d      	ldr	r1, [sp, #116]	; 0x74
100085c6:	9805      	ldr	r0, [sp, #20]
100085c8:	47b8      	blx	r7
100085ca:	1c01      	adds	r1, r0, #0
100085cc:	4da7      	ldr	r5, [pc, #668]	; (1000886c <madgwick_quaternion_update+0x430>)
100085ce:	1c20      	adds	r0, r4, #0
100085d0:	47a8      	blx	r5
100085d2:	1c04      	adds	r4, r0, #0
100085d4:	991e      	ldr	r1, [sp, #120]	; 0x78
100085d6:	9802      	ldr	r0, [sp, #8]
100085d8:	47b8      	blx	r7
100085da:	1c01      	adds	r1, r0, #0
100085dc:	1c20      	adds	r0, r4, #0
100085de:	47b0      	blx	r6
100085e0:	1c04      	adds	r4, r0, #0
100085e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
100085e4:	9814      	ldr	r0, [sp, #80]	; 0x50
100085e6:	47b8      	blx	r7
100085e8:	1c01      	adds	r1, r0, #0
100085ea:	1c20      	adds	r0, r4, #0
100085ec:	47b0      	blx	r6
100085ee:	1c04      	adds	r4, r0, #0
100085f0:	990c      	ldr	r1, [sp, #48]	; 0x30
100085f2:	9812      	ldr	r0, [sp, #72]	; 0x48
100085f4:	47b8      	blx	r7
100085f6:	9902      	ldr	r1, [sp, #8]
100085f8:	47b8      	blx	r7
100085fa:	1c01      	adds	r1, r0, #0
100085fc:	1c20      	adds	r0, r4, #0
100085fe:	47b0      	blx	r6
10008600:	1c04      	adds	r4, r0, #0
10008602:	990f      	ldr	r1, [sp, #60]	; 0x3c
10008604:	9812      	ldr	r0, [sp, #72]	; 0x48
10008606:	47b8      	blx	r7
10008608:	9905      	ldr	r1, [sp, #20]
1000860a:	47b8      	blx	r7
1000860c:	1c01      	adds	r1, r0, #0
1000860e:	1c20      	adds	r0, r4, #0
10008610:	47b0      	blx	r6
10008612:	1c04      	adds	r4, r0, #0
10008614:	990b      	ldr	r1, [sp, #44]	; 0x2c
10008616:	9811      	ldr	r0, [sp, #68]	; 0x44
10008618:	47b8      	blx	r7
1000861a:	1c01      	adds	r1, r0, #0
1000861c:	1c20      	adds	r0, r4, #0
1000861e:	47a8      	blx	r5
10008620:	1c04      	adds	r4, r0, #0
10008622:	990b      	ldr	r1, [sp, #44]	; 0x2c
10008624:	9816      	ldr	r0, [sp, #88]	; 0x58
10008626:	47b8      	blx	r7
10008628:	1c01      	adds	r1, r0, #0
1000862a:	1c20      	adds	r0, r4, #0
1000862c:	47a8      	blx	r5
1000862e:	900a      	str	r0, [sp, #40]	; 0x28
	hy = _2q1mx * q4 + my * q1q1 - _2q1mz * q2 + _2q2mx * q3 - my * q2q2 + my * q3q3 + _2q3 * mz * q4 - my * q4q4;
10008630:	9918      	ldr	r1, [sp, #96]	; 0x60
10008632:	9805      	ldr	r0, [sp, #20]
10008634:	47b8      	blx	r7
10008636:	1c04      	adds	r4, r0, #0
10008638:	990c      	ldr	r1, [sp, #48]	; 0x30
1000863a:	9817      	ldr	r0, [sp, #92]	; 0x5c
1000863c:	47b8      	blx	r7
1000863e:	1c01      	adds	r1, r0, #0
10008640:	1c20      	adds	r0, r4, #0
10008642:	47b0      	blx	r6
10008644:	1c04      	adds	r4, r0, #0
10008646:	991e      	ldr	r1, [sp, #120]	; 0x78
10008648:	9806      	ldr	r0, [sp, #24]
1000864a:	47b8      	blx	r7
1000864c:	1c01      	adds	r1, r0, #0
1000864e:	1c20      	adds	r0, r4, #0
10008650:	47a8      	blx	r5
10008652:	1c04      	adds	r4, r0, #0
10008654:	991f      	ldr	r1, [sp, #124]	; 0x7c
10008656:	9802      	ldr	r0, [sp, #8]
10008658:	47b8      	blx	r7
1000865a:	1c01      	adds	r1, r0, #0
1000865c:	1c20      	adds	r0, r4, #0
1000865e:	47b0      	blx	r6
10008660:	1c04      	adds	r4, r0, #0
10008662:	990c      	ldr	r1, [sp, #48]	; 0x30
10008664:	9814      	ldr	r0, [sp, #80]	; 0x50
10008666:	47b8      	blx	r7
10008668:	1c01      	adds	r1, r0, #0
1000866a:	1c20      	adds	r0, r4, #0
1000866c:	47a8      	blx	r5
1000866e:	1c04      	adds	r4, r0, #0
10008670:	990c      	ldr	r1, [sp, #48]	; 0x30
10008672:	9811      	ldr	r0, [sp, #68]	; 0x44
10008674:	47b8      	blx	r7
10008676:	1c01      	adds	r1, r0, #0
10008678:	1c20      	adds	r0, r4, #0
1000867a:	47b0      	blx	r6
1000867c:	1c04      	adds	r4, r0, #0
1000867e:	990f      	ldr	r1, [sp, #60]	; 0x3c
10008680:	9813      	ldr	r0, [sp, #76]	; 0x4c
10008682:	47b8      	blx	r7
10008684:	9905      	ldr	r1, [sp, #20]
10008686:	47b8      	blx	r7
10008688:	1c01      	adds	r1, r0, #0
1000868a:	1c20      	adds	r0, r4, #0
1000868c:	47b0      	blx	r6
1000868e:	1c04      	adds	r4, r0, #0
10008690:	990c      	ldr	r1, [sp, #48]	; 0x30
10008692:	9816      	ldr	r0, [sp, #88]	; 0x58
10008694:	47b8      	blx	r7
10008696:	1c01      	adds	r1, r0, #0
10008698:	1c20      	adds	r0, r4, #0
1000869a:	47a8      	blx	r5
1000869c:	1c04      	adds	r4, r0, #0
	_2bx = sqrtf(hx * hx + hy * hy);
1000869e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
100086a0:	1c11      	adds	r1, r2, #0
100086a2:	1c10      	adds	r0, r2, #0
100086a4:	47b8      	blx	r7
100086a6:	901e      	str	r0, [sp, #120]	; 0x78
100086a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
100086aa:	1c11      	adds	r1, r2, #0
100086ac:	1c10      	adds	r0, r2, #0
100086ae:	47b8      	blx	r7
100086b0:	900a      	str	r0, [sp, #40]	; 0x28
100086b2:	1c21      	adds	r1, r4, #0
100086b4:	1c20      	adds	r0, r4, #0
100086b6:	47b8      	blx	r7
100086b8:	1c01      	adds	r1, r0, #0
100086ba:	980a      	ldr	r0, [sp, #40]	; 0x28
100086bc:	47b0      	blx	r6
100086be:	4b68      	ldr	r3, [pc, #416]	; (10008860 <madgwick_quaternion_update+0x424>)
100086c0:	4798      	blx	r3
100086c2:	900a      	str	r0, [sp, #40]	; 0x28
	_2bz = -_2q1mx * q3 + _2q1my * q2 + mz * q1q1 + _2q2mx * q4 - mz * q2q2 + _2q3 * my * q4 - mz * q3q3 + mz * q4q4;
100086c4:	9c18      	ldr	r4, [sp, #96]	; 0x60
100086c6:	46a0      	mov	r8, r4
100086c8:	2480      	movs	r4, #128	; 0x80
100086ca:	0624      	lsls	r4, r4, #24
100086cc:	46a4      	mov	ip, r4
100086ce:	44e0      	add	r8, ip
100086d0:	4640      	mov	r0, r8
100086d2:	9902      	ldr	r1, [sp, #8]
100086d4:	47b8      	blx	r7
100086d6:	1c04      	adds	r4, r0, #0
100086d8:	991d      	ldr	r1, [sp, #116]	; 0x74
100086da:	9806      	ldr	r0, [sp, #24]
100086dc:	47b8      	blx	r7
100086de:	1c01      	adds	r1, r0, #0
100086e0:	1c20      	adds	r0, r4, #0
100086e2:	47b0      	blx	r6
100086e4:	1c04      	adds	r4, r0, #0
100086e6:	990f      	ldr	r1, [sp, #60]	; 0x3c
100086e8:	9817      	ldr	r0, [sp, #92]	; 0x5c
100086ea:	47b8      	blx	r7
100086ec:	1c01      	adds	r1, r0, #0
100086ee:	1c20      	adds	r0, r4, #0
100086f0:	47b0      	blx	r6
100086f2:	1c04      	adds	r4, r0, #0
100086f4:	991f      	ldr	r1, [sp, #124]	; 0x7c
100086f6:	9805      	ldr	r0, [sp, #20]
100086f8:	47b8      	blx	r7
100086fa:	1c01      	adds	r1, r0, #0
100086fc:	1c20      	adds	r0, r4, #0
100086fe:	47b0      	blx	r6
10008700:	1c04      	adds	r4, r0, #0
10008702:	990f      	ldr	r1, [sp, #60]	; 0x3c
10008704:	9814      	ldr	r0, [sp, #80]	; 0x50
10008706:	47b8      	blx	r7
10008708:	1c01      	adds	r1, r0, #0
1000870a:	1c20      	adds	r0, r4, #0
1000870c:	47a8      	blx	r5
1000870e:	1c04      	adds	r4, r0, #0
10008710:	990c      	ldr	r1, [sp, #48]	; 0x30
10008712:	9813      	ldr	r0, [sp, #76]	; 0x4c
10008714:	47b8      	blx	r7
10008716:	9905      	ldr	r1, [sp, #20]
10008718:	47b8      	blx	r7
1000871a:	1c01      	adds	r1, r0, #0
1000871c:	1c20      	adds	r0, r4, #0
1000871e:	47b0      	blx	r6
10008720:	1c04      	adds	r4, r0, #0
10008722:	990f      	ldr	r1, [sp, #60]	; 0x3c
10008724:	9811      	ldr	r0, [sp, #68]	; 0x44
10008726:	47b8      	blx	r7
10008728:	1c01      	adds	r1, r0, #0
1000872a:	1c20      	adds	r0, r4, #0
1000872c:	47a8      	blx	r5
1000872e:	1c04      	adds	r4, r0, #0
10008730:	990f      	ldr	r1, [sp, #60]	; 0x3c
10008732:	9816      	ldr	r0, [sp, #88]	; 0x58
10008734:	47b8      	blx	r7
10008736:	1c01      	adds	r1, r0, #0
10008738:	1c20      	adds	r0, r4, #0
1000873a:	47b0      	blx	r6
1000873c:	1c04      	adds	r4, r0, #0
	_4bx = 2.0f * _2bx;
	_4bz = 2.0f * _2bz;
1000873e:	1c01      	adds	r1, r0, #0
10008740:	47b0      	blx	r6
10008742:	901d      	str	r0, [sp, #116]	; 0x74

	// Gradient decent algorithm corrective step
	s1 = -_2q3 * (2.0f * q2q4 - _2q1q3 - ax) + _2q2 * (2.0f * q1q2 + _2q3q4 - ay) - _2bz * q3 * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (-_2bx * q4 + _2bz * q2) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + _2bx * q3 * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
10008744:	9b15      	ldr	r3, [sp, #84]	; 0x54
10008746:	1c19      	adds	r1, r3, #0
10008748:	1c18      	adds	r0, r3, #0
1000874a:	47b0      	blx	r6
1000874c:	9017      	str	r0, [sp, #92]	; 0x5c
1000874e:	9902      	ldr	r1, [sp, #8]
10008750:	9810      	ldr	r0, [sp, #64]	; 0x40
10008752:	47b8      	blx	r7
10008754:	1c01      	adds	r1, r0, #0
10008756:	9817      	ldr	r0, [sp, #92]	; 0x5c
10008758:	47a8      	blx	r5
1000875a:	9017      	str	r0, [sp, #92]	; 0x5c
1000875c:	991a      	ldr	r1, [sp, #104]	; 0x68
1000875e:	9808      	ldr	r0, [sp, #32]
10008760:	47b8      	blx	r7
10008762:	1c01      	adds	r1, r0, #0
10008764:	9817      	ldr	r0, [sp, #92]	; 0x5c
10008766:	47a8      	blx	r5
10008768:	9017      	str	r0, [sp, #92]	; 0x5c
1000876a:	9905      	ldr	r1, [sp, #20]
1000876c:	9813      	ldr	r0, [sp, #76]	; 0x4c
1000876e:	47b8      	blx	r7
10008770:	9008      	str	r0, [sp, #32]
10008772:	9a19      	ldr	r2, [sp, #100]	; 0x64
10008774:	1c11      	adds	r1, r2, #0
10008776:	1c10      	adds	r0, r2, #0
10008778:	47b0      	blx	r6
1000877a:	1c01      	adds	r1, r0, #0
1000877c:	9808      	ldr	r0, [sp, #32]
1000877e:	47b0      	blx	r6
10008780:	9008      	str	r0, [sp, #32]
10008782:	991a      	ldr	r1, [sp, #104]	; 0x68
10008784:	9809      	ldr	r0, [sp, #36]	; 0x24
10008786:	47b8      	blx	r7
10008788:	1c01      	adds	r1, r0, #0
1000878a:	9808      	ldr	r0, [sp, #32]
1000878c:	47a8      	blx	r5
1000878e:	9018      	str	r0, [sp, #96]	; 0x60
10008790:	1c21      	adds	r1, r4, #0
10008792:	9802      	ldr	r0, [sp, #8]
10008794:	47b8      	blx	r7
10008796:	901e      	str	r0, [sp, #120]	; 0x78
10008798:	9911      	ldr	r1, [sp, #68]	; 0x44
1000879a:	20fc      	movs	r0, #252	; 0xfc
1000879c:	0580      	lsls	r0, r0, #22
1000879e:	47a8      	blx	r5
100087a0:	9916      	ldr	r1, [sp, #88]	; 0x58
100087a2:	47a8      	blx	r5
100087a4:	990a      	ldr	r1, [sp, #40]	; 0x28
100087a6:	47b8      	blx	r7
100087a8:	9008      	str	r0, [sp, #32]
100087aa:	991c      	ldr	r1, [sp, #112]	; 0x70
100087ac:	9815      	ldr	r0, [sp, #84]	; 0x54
100087ae:	47a8      	blx	r5
100087b0:	1c21      	adds	r1, r4, #0
100087b2:	47b8      	blx	r7
100087b4:	1c01      	adds	r1, r0, #0
100087b6:	9808      	ldr	r0, [sp, #32]
100087b8:	47b0      	blx	r6
100087ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
100087bc:	47a8      	blx	r5
100087be:	900b      	str	r0, [sp, #44]	; 0x2c
100087c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
100087c2:	2280      	movs	r2, #128	; 0x80
100087c4:	0612      	lsls	r2, r2, #24
100087c6:	4694      	mov	ip, r2
100087c8:	4463      	add	r3, ip
100087ca:	9316      	str	r3, [sp, #88]	; 0x58
100087cc:	1c21      	adds	r1, r4, #0
100087ce:	9806      	ldr	r0, [sp, #24]
100087d0:	47b8      	blx	r7
100087d2:	901f      	str	r0, [sp, #124]	; 0x7c
100087d4:	9902      	ldr	r1, [sp, #8]
100087d6:	9806      	ldr	r0, [sp, #24]
100087d8:	47b8      	blx	r7
100087da:	9008      	str	r0, [sp, #32]
100087dc:	9905      	ldr	r1, [sp, #20]
100087de:	9807      	ldr	r0, [sp, #28]
100087e0:	47b8      	blx	r7
100087e2:	1c01      	adds	r1, r0, #0
100087e4:	9808      	ldr	r0, [sp, #32]
100087e6:	47a8      	blx	r5
100087e8:	990a      	ldr	r1, [sp, #40]	; 0x28
100087ea:	47b8      	blx	r7
100087ec:	9008      	str	r0, [sp, #32]
100087ee:	9905      	ldr	r1, [sp, #20]
100087f0:	9802      	ldr	r0, [sp, #8]
100087f2:	47b8      	blx	r7
100087f4:	9919      	ldr	r1, [sp, #100]	; 0x64
100087f6:	47b0      	blx	r6
100087f8:	1c21      	adds	r1, r4, #0
100087fa:	47b8      	blx	r7
100087fc:	1c01      	adds	r1, r0, #0
100087fe:	9808      	ldr	r0, [sp, #32]
10008800:	47b0      	blx	r6
10008802:	990c      	ldr	r1, [sp, #48]	; 0x30
10008804:	47a8      	blx	r5
10008806:	900c      	str	r0, [sp, #48]	; 0x30
10008808:	990a      	ldr	r1, [sp, #40]	; 0x28
1000880a:	9802      	ldr	r0, [sp, #8]
1000880c:	47b8      	blx	r7
1000880e:	9009      	str	r0, [sp, #36]	; 0x24
10008810:	9914      	ldr	r1, [sp, #80]	; 0x50
10008812:	20fc      	movs	r0, #252	; 0xfc
10008814:	0580      	lsls	r0, r0, #22
10008816:	47a8      	blx	r5
10008818:	9911      	ldr	r1, [sp, #68]	; 0x44
1000881a:	47a8      	blx	r5
1000881c:	1c21      	adds	r1, r4, #0
1000881e:	47b8      	blx	r7
10008820:	9008      	str	r0, [sp, #32]
10008822:	9915      	ldr	r1, [sp, #84]	; 0x54
10008824:	981c      	ldr	r0, [sp, #112]	; 0x70
10008826:	47b0      	blx	r6
10008828:	990a      	ldr	r1, [sp, #40]	; 0x28
1000882a:	47b8      	blx	r7
1000882c:	1c01      	adds	r1, r0, #0
1000882e:	9808      	ldr	r0, [sp, #32]
10008830:	47b0      	blx	r6
10008832:	990f      	ldr	r1, [sp, #60]	; 0x3c
10008834:	47a8      	blx	r5
10008836:	900f      	str	r0, [sp, #60]	; 0x3c
10008838:	9913      	ldr	r1, [sp, #76]	; 0x4c
1000883a:	2380      	movs	r3, #128	; 0x80
1000883c:	061b      	lsls	r3, r3, #24
1000883e:	469c      	mov	ip, r3
10008840:	4461      	add	r1, ip
10008842:	0008      	movs	r0, r1
10008844:	9917      	ldr	r1, [sp, #92]	; 0x5c
10008846:	e013      	b.n	10008870 <madgwick_quaternion_update+0x434>
10008848:	100188c4 	.word	0x100188c4
1000884c:	1001895c 	.word	0x1001895c
10008850:	10018960 	.word	0x10018960
10008854:	10018964 	.word	0x10018964
10008858:	100140b1 	.word	0x100140b1
1000885c:	10013a31 	.word	0x10013a31
10008860:	10012565 	.word	0x10012565
10008864:	10013911 	.word	0x10013911
10008868:	10013d1d 	.word	0x10013d1d
1000886c:	100142d9 	.word	0x100142d9
10008870:	47b8      	blx	r7
10008872:	9008      	str	r0, [sp, #32]
10008874:	9918      	ldr	r1, [sp, #96]	; 0x60
10008876:	9812      	ldr	r0, [sp, #72]	; 0x48
10008878:	47b8      	blx	r7
1000887a:	1c01      	adds	r1, r0, #0
1000887c:	9808      	ldr	r0, [sp, #32]
1000887e:	47b0      	blx	r6
10008880:	9008      	str	r0, [sp, #32]
10008882:	990b      	ldr	r1, [sp, #44]	; 0x2c
10008884:	981e      	ldr	r0, [sp, #120]	; 0x78
10008886:	47b8      	blx	r7
10008888:	1c01      	adds	r1, r0, #0
1000888a:	9808      	ldr	r0, [sp, #32]
1000888c:	47a8      	blx	r5
1000888e:	9008      	str	r0, [sp, #32]
10008890:	9916      	ldr	r1, [sp, #88]	; 0x58
10008892:	9805      	ldr	r0, [sp, #20]
10008894:	47b8      	blx	r7
10008896:	991f      	ldr	r1, [sp, #124]	; 0x7c
10008898:	47b0      	blx	r6
1000889a:	990c      	ldr	r1, [sp, #48]	; 0x30
1000889c:	47b8      	blx	r7
1000889e:	1c01      	adds	r1, r0, #0
100088a0:	9808      	ldr	r0, [sp, #32]
100088a2:	47b0      	blx	r6
100088a4:	9008      	str	r0, [sp, #32]
100088a6:	990f      	ldr	r1, [sp, #60]	; 0x3c
100088a8:	9809      	ldr	r0, [sp, #36]	; 0x24
100088aa:	47b8      	blx	r7
100088ac:	1c01      	adds	r1, r0, #0
100088ae:	9808      	ldr	r0, [sp, #32]
100088b0:	47b0      	blx	r6
100088b2:	9008      	str	r0, [sp, #32]
	s2 = _2q4 * (2.0f * q2q4 - _2q1q3 - ax) + _2q1 * (2.0f * q1q2 + _2q3q4 - ay) - 4.0f * q2 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az) + _2bz * q4 * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (_2bx * q3 + _2bz * q1) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + (_2bx * q4 - _4bz * q2) * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
100088b4:	9a14      	ldr	r2, [sp, #80]	; 0x50
100088b6:	1c11      	adds	r1, r2, #0
100088b8:	1c10      	adds	r0, r2, #0
100088ba:	47b0      	blx	r6
100088bc:	1c01      	adds	r1, r0, #0
100088be:	20fe      	movs	r0, #254	; 0xfe
100088c0:	0580      	lsls	r0, r0, #22
100088c2:	47a8      	blx	r5
100088c4:	9014      	str	r0, [sp, #80]	; 0x50
100088c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
100088c8:	1c19      	adds	r1, r3, #0
100088ca:	1c18      	adds	r0, r3, #0
100088cc:	47b0      	blx	r6
100088ce:	1c01      	adds	r1, r0, #0
100088d0:	9814      	ldr	r0, [sp, #80]	; 0x50
100088d2:	47a8      	blx	r5
100088d4:	9011      	str	r0, [sp, #68]	; 0x44
100088d6:	991a      	ldr	r1, [sp, #104]	; 0x68
100088d8:	9804      	ldr	r0, [sp, #16]
100088da:	47b8      	blx	r7
100088dc:	1c01      	adds	r1, r0, #0
100088de:	9811      	ldr	r0, [sp, #68]	; 0x44
100088e0:	47a8      	blx	r5
100088e2:	9011      	str	r0, [sp, #68]	; 0x44
100088e4:	1c21      	adds	r1, r4, #0
100088e6:	9805      	ldr	r0, [sp, #20]
100088e8:	47b8      	blx	r7
100088ea:	9014      	str	r0, [sp, #80]	; 0x50
100088ec:	1c21      	adds	r1, r4, #0
100088ee:	9807      	ldr	r0, [sp, #28]
100088f0:	47b8      	blx	r7
100088f2:	9015      	str	r0, [sp, #84]	; 0x54
100088f4:	9917      	ldr	r1, [sp, #92]	; 0x5c
100088f6:	981b      	ldr	r0, [sp, #108]	; 0x6c
100088f8:	47b8      	blx	r7
100088fa:	1c04      	adds	r4, r0, #0
100088fc:	9918      	ldr	r1, [sp, #96]	; 0x60
100088fe:	9810      	ldr	r0, [sp, #64]	; 0x40
10008900:	47b8      	blx	r7
10008902:	1c01      	adds	r1, r0, #0
10008904:	1c20      	adds	r0, r4, #0
10008906:	47b0      	blx	r6
10008908:	1c04      	adds	r4, r0, #0
1000890a:	2181      	movs	r1, #129	; 0x81
1000890c:	05c9      	lsls	r1, r1, #23
1000890e:	9806      	ldr	r0, [sp, #24]
10008910:	47b8      	blx	r7
10008912:	9911      	ldr	r1, [sp, #68]	; 0x44
10008914:	47b8      	blx	r7
10008916:	1c01      	adds	r1, r0, #0
10008918:	1c20      	adds	r0, r4, #0
1000891a:	47a8      	blx	r5
1000891c:	1c04      	adds	r4, r0, #0
1000891e:	9914      	ldr	r1, [sp, #80]	; 0x50
10008920:	980b      	ldr	r0, [sp, #44]	; 0x2c
10008922:	47b8      	blx	r7
10008924:	1c01      	adds	r1, r0, #0
10008926:	1c20      	adds	r0, r4, #0
10008928:	47b0      	blx	r6
1000892a:	1c04      	adds	r4, r0, #0
1000892c:	9915      	ldr	r1, [sp, #84]	; 0x54
1000892e:	9809      	ldr	r0, [sp, #36]	; 0x24
10008930:	47b0      	blx	r6
10008932:	990c      	ldr	r1, [sp, #48]	; 0x30
10008934:	47b8      	blx	r7
10008936:	1c01      	adds	r1, r0, #0
10008938:	1c20      	adds	r0, r4, #0
1000893a:	47b0      	blx	r6
1000893c:	1c04      	adds	r4, r0, #0
1000893e:	990a      	ldr	r1, [sp, #40]	; 0x28
10008940:	9805      	ldr	r0, [sp, #20]
10008942:	47b8      	blx	r7
10008944:	9004      	str	r0, [sp, #16]
10008946:	991d      	ldr	r1, [sp, #116]	; 0x74
10008948:	9806      	ldr	r0, [sp, #24]
1000894a:	47b8      	blx	r7
1000894c:	1c01      	adds	r1, r0, #0
1000894e:	9804      	ldr	r0, [sp, #16]
10008950:	47a8      	blx	r5
10008952:	990f      	ldr	r1, [sp, #60]	; 0x3c
10008954:	47b8      	blx	r7
10008956:	1c01      	adds	r1, r0, #0
10008958:	1c20      	adds	r0, r4, #0
1000895a:	47b0      	blx	r6
1000895c:	9004      	str	r0, [sp, #16]
	s3 = -_2q1 * (2.0f * q2q4 - _2q1q3 - ax) + _2q4 * (2.0f * q1q2 + _2q3q4 - ay) - 4.0f * q3 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az) + (-_4bx * q3 - _2bz * q1) * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (_2bx * q2 + _2bz * q4) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + (_2bx * q1 - _4bz * q3) * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
1000895e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
10008960:	1c11      	adds	r1, r2, #0
10008962:	1c10      	adds	r0, r2, #0
10008964:	47b0      	blx	r6
10008966:	2380      	movs	r3, #128	; 0x80
10008968:	061b      	lsls	r3, r3, #24
1000896a:	18c4      	adds	r4, r0, r3
1000896c:	990a      	ldr	r1, [sp, #40]	; 0x28
1000896e:	9806      	ldr	r0, [sp, #24]
10008970:	47b8      	blx	r7
10008972:	9019      	str	r0, [sp, #100]	; 0x64
10008974:	9b10      	ldr	r3, [sp, #64]	; 0x40
10008976:	2280      	movs	r2, #128	; 0x80
10008978:	0612      	lsls	r2, r2, #24
1000897a:	4694      	mov	ip, r2
1000897c:	4463      	add	r3, ip
1000897e:	0018      	movs	r0, r3
10008980:	9917      	ldr	r1, [sp, #92]	; 0x5c
10008982:	47b8      	blx	r7
10008984:	9009      	str	r0, [sp, #36]	; 0x24
10008986:	9918      	ldr	r1, [sp, #96]	; 0x60
10008988:	981b      	ldr	r0, [sp, #108]	; 0x6c
1000898a:	47b8      	blx	r7
1000898c:	1c01      	adds	r1, r0, #0
1000898e:	9809      	ldr	r0, [sp, #36]	; 0x24
10008990:	47b0      	blx	r6
10008992:	9009      	str	r0, [sp, #36]	; 0x24
10008994:	2181      	movs	r1, #129	; 0x81
10008996:	05c9      	lsls	r1, r1, #23
10008998:	9802      	ldr	r0, [sp, #8]
1000899a:	47b8      	blx	r7
1000899c:	9911      	ldr	r1, [sp, #68]	; 0x44
1000899e:	47b8      	blx	r7
100089a0:	1c01      	adds	r1, r0, #0
100089a2:	9809      	ldr	r0, [sp, #36]	; 0x24
100089a4:	47a8      	blx	r5
100089a6:	9009      	str	r0, [sp, #36]	; 0x24
100089a8:	1c21      	adds	r1, r4, #0
100089aa:	9802      	ldr	r0, [sp, #8]
100089ac:	47b8      	blx	r7
100089ae:	9915      	ldr	r1, [sp, #84]	; 0x54
100089b0:	47a8      	blx	r5
100089b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
100089b4:	47b8      	blx	r7
100089b6:	1c01      	adds	r1, r0, #0
100089b8:	9809      	ldr	r0, [sp, #36]	; 0x24
100089ba:	47b0      	blx	r6
100089bc:	9009      	str	r0, [sp, #36]	; 0x24
100089be:	9919      	ldr	r1, [sp, #100]	; 0x64
100089c0:	9814      	ldr	r0, [sp, #80]	; 0x50
100089c2:	47b0      	blx	r6
100089c4:	990c      	ldr	r1, [sp, #48]	; 0x30
100089c6:	47b8      	blx	r7
100089c8:	1c01      	adds	r1, r0, #0
100089ca:	9809      	ldr	r0, [sp, #36]	; 0x24
100089cc:	47b0      	blx	r6
100089ce:	9009      	str	r0, [sp, #36]	; 0x24
100089d0:	990a      	ldr	r1, [sp, #40]	; 0x28
100089d2:	9807      	ldr	r0, [sp, #28]
100089d4:	47b8      	blx	r7
100089d6:	900a      	str	r0, [sp, #40]	; 0x28
100089d8:	991d      	ldr	r1, [sp, #116]	; 0x74
100089da:	9802      	ldr	r0, [sp, #8]
100089dc:	47b8      	blx	r7
100089de:	1c01      	adds	r1, r0, #0
100089e0:	980a      	ldr	r0, [sp, #40]	; 0x28
100089e2:	47a8      	blx	r5
100089e4:	990f      	ldr	r1, [sp, #60]	; 0x3c
100089e6:	47b8      	blx	r7
100089e8:	1c01      	adds	r1, r0, #0
100089ea:	9809      	ldr	r0, [sp, #36]	; 0x24
100089ec:	47b0      	blx	r6
100089ee:	9009      	str	r0, [sp, #36]	; 0x24
	s4 = _2q2 * (2.0f * q2q4 - _2q1q3 - ax) + _2q3 * (2.0f * q1q2 + _2q3q4 - ay) + (-_4bx * q4 + _2bz * q2) * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (-_2bx * q1 + _2bz * q3) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + _2bx * q2 * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
100089f0:	9917      	ldr	r1, [sp, #92]	; 0x5c
100089f2:	9812      	ldr	r0, [sp, #72]	; 0x48
100089f4:	47b8      	blx	r7
100089f6:	1c05      	adds	r5, r0, #0
100089f8:	9918      	ldr	r1, [sp, #96]	; 0x60
100089fa:	9813      	ldr	r0, [sp, #76]	; 0x4c
100089fc:	47b8      	blx	r7
100089fe:	1c01      	adds	r1, r0, #0
10008a00:	1c28      	adds	r0, r5, #0
10008a02:	47b0      	blx	r6
10008a04:	1c05      	adds	r5, r0, #0
10008a06:	1c21      	adds	r1, r4, #0
10008a08:	9805      	ldr	r0, [sp, #20]
10008a0a:	47b8      	blx	r7
10008a0c:	991f      	ldr	r1, [sp, #124]	; 0x7c
10008a0e:	47b0      	blx	r6
10008a10:	990b      	ldr	r1, [sp, #44]	; 0x2c
10008a12:	47b8      	blx	r7
10008a14:	1c01      	adds	r1, r0, #0
10008a16:	1c28      	adds	r0, r5, #0
10008a18:	47b0      	blx	r6
10008a1a:	1c04      	adds	r4, r0, #0
10008a1c:	9916      	ldr	r1, [sp, #88]	; 0x58
10008a1e:	9807      	ldr	r0, [sp, #28]
10008a20:	47b8      	blx	r7
10008a22:	991e      	ldr	r1, [sp, #120]	; 0x78
10008a24:	47b0      	blx	r6
10008a26:	990c      	ldr	r1, [sp, #48]	; 0x30
10008a28:	47b8      	blx	r7
10008a2a:	1c01      	adds	r1, r0, #0
10008a2c:	1c20      	adds	r0, r4, #0
10008a2e:	47b0      	blx	r6
10008a30:	1c04      	adds	r4, r0, #0
10008a32:	9919      	ldr	r1, [sp, #100]	; 0x64
10008a34:	980f      	ldr	r0, [sp, #60]	; 0x3c
10008a36:	47b8      	blx	r7
10008a38:	1c01      	adds	r1, r0, #0
10008a3a:	1c20      	adds	r0, r4, #0
10008a3c:	47b0      	blx	r6
10008a3e:	900a      	str	r0, [sp, #40]	; 0x28
	norm = sqrtf(s1 * s1 + s2 * s2 + s3 * s3 + s4 * s4);    // normalize step magnitude
10008a40:	9c08      	ldr	r4, [sp, #32]
10008a42:	1c21      	adds	r1, r4, #0
10008a44:	1c20      	adds	r0, r4, #0
10008a46:	47b8      	blx	r7
10008a48:	1c04      	adds	r4, r0, #0
10008a4a:	9d04      	ldr	r5, [sp, #16]
10008a4c:	1c29      	adds	r1, r5, #0
10008a4e:	1c28      	adds	r0, r5, #0
10008a50:	47b8      	blx	r7
10008a52:	1c05      	adds	r5, r0, #0
10008a54:	1c01      	adds	r1, r0, #0
10008a56:	1c20      	adds	r0, r4, #0
10008a58:	47b0      	blx	r6
10008a5a:	900b      	str	r0, [sp, #44]	; 0x2c
10008a5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
10008a5e:	1c11      	adds	r1, r2, #0
10008a60:	1c10      	adds	r0, r2, #0
10008a62:	47b8      	blx	r7
10008a64:	1c01      	adds	r1, r0, #0
10008a66:	980b      	ldr	r0, [sp, #44]	; 0x2c
10008a68:	47b0      	blx	r6
10008a6a:	900b      	str	r0, [sp, #44]	; 0x2c
10008a6c:	1c29      	adds	r1, r5, #0
10008a6e:	1c20      	adds	r0, r4, #0
10008a70:	47b0      	blx	r6
10008a72:	1c05      	adds	r5, r0, #0
10008a74:	4e9d      	ldr	r6, [pc, #628]	; (10008cec <madgwick_quaternion_update+0x8b0>)
10008a76:	9a09      	ldr	r2, [sp, #36]	; 0x24
10008a78:	1c11      	adds	r1, r2, #0
10008a7a:	1c10      	adds	r0, r2, #0
10008a7c:	47b0      	blx	r6
10008a7e:	1c01      	adds	r1, r0, #0
10008a80:	4c9b      	ldr	r4, [pc, #620]	; (10008cf0 <madgwick_quaternion_update+0x8b4>)
10008a82:	1c28      	adds	r0, r5, #0
10008a84:	47a0      	blx	r4
10008a86:	1c05      	adds	r5, r0, #0
10008a88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10008a8a:	1c19      	adds	r1, r3, #0
10008a8c:	1c18      	adds	r0, r3, #0
10008a8e:	47b0      	blx	r6
10008a90:	1c01      	adds	r1, r0, #0
10008a92:	1c28      	adds	r0, r5, #0
10008a94:	47a0      	blx	r4
10008a96:	4997      	ldr	r1, [pc, #604]	; (10008cf4 <madgwick_quaternion_update+0x8b8>)
10008a98:	4788      	blx	r1
10008a9a:	1c01      	adds	r1, r0, #0
	norm = 1.0f/norm;
10008a9c:	4d96      	ldr	r5, [pc, #600]	; (10008cf8 <madgwick_quaternion_update+0x8bc>)
10008a9e:	46a8      	mov	r8, r5
10008aa0:	20fe      	movs	r0, #254	; 0xfe
10008aa2:	0580      	lsls	r0, r0, #22
10008aa4:	47a8      	blx	r5
10008aa6:	1c07      	adds	r7, r0, #0
	qDot2 = 0.5f * (q1 * gx + q3 * gz - q4 * gy) - BETA * s2;
	qDot3 = 0.5f * (q1 * gy - q2 * gz + q4 * gx) - BETA * s3;
	qDot4 = 0.5f * (q1 * gz + q2 * gy - q3 * gx) - BETA * s4;

	// Integrate to yield quaternion
	q1 += qDot1 * deltat;
10008aa8:	9906      	ldr	r1, [sp, #24]
10008aaa:	2580      	movs	r5, #128	; 0x80
10008aac:	062d      	lsls	r5, r5, #24
10008aae:	46ac      	mov	ip, r5
10008ab0:	4461      	add	r1, ip
10008ab2:	0008      	movs	r0, r1
10008ab4:	990e      	ldr	r1, [sp, #56]	; 0x38
10008ab6:	47b0      	blx	r6
10008ab8:	1c05      	adds	r5, r0, #0
10008aba:	992a      	ldr	r1, [sp, #168]	; 0xa8
10008abc:	9802      	ldr	r0, [sp, #8]
10008abe:	47b0      	blx	r6
10008ac0:	1c01      	adds	r1, r0, #0
10008ac2:	4b8e      	ldr	r3, [pc, #568]	; (10008cfc <madgwick_quaternion_update+0x8c0>)
10008ac4:	4699      	mov	r9, r3
10008ac6:	1c28      	adds	r0, r5, #0
10008ac8:	4798      	blx	r3
10008aca:	1c05      	adds	r5, r0, #0
10008acc:	992b      	ldr	r1, [sp, #172]	; 0xac
10008ace:	9805      	ldr	r0, [sp, #20]
10008ad0:	47b0      	blx	r6
10008ad2:	1c01      	adds	r1, r0, #0
10008ad4:	1c28      	adds	r0, r5, #0
10008ad6:	47c8      	blx	r9
10008ad8:	21fc      	movs	r1, #252	; 0xfc
10008ada:	0589      	lsls	r1, r1, #22
10008adc:	47b0      	blx	r6
10008ade:	4d88      	ldr	r5, [pc, #544]	; (10008d00 <madgwick_quaternion_update+0x8c4>)
10008ae0:	47a8      	blx	r5
10008ae2:	900c      	str	r0, [sp, #48]	; 0x30
10008ae4:	910d      	str	r1, [sp, #52]	; 0x34
10008ae6:	970b      	str	r7, [sp, #44]	; 0x2c
10008ae8:	1c39      	adds	r1, r7, #0
10008aea:	9808      	ldr	r0, [sp, #32]
10008aec:	47b0      	blx	r6
10008aee:	47a8      	blx	r5
10008af0:	4b84      	ldr	r3, [pc, #528]	; (10008d04 <madgwick_quaternion_update+0x8c8>)
10008af2:	469a      	mov	sl, r3
10008af4:	4a84      	ldr	r2, [pc, #528]	; (10008d08 <madgwick_quaternion_update+0x8cc>)
10008af6:	4b85      	ldr	r3, [pc, #532]	; (10008d0c <madgwick_quaternion_update+0x8d0>)
10008af8:	47d0      	blx	sl
10008afa:	0002      	movs	r2, r0
10008afc:	000b      	movs	r3, r1
10008afe:	4984      	ldr	r1, [pc, #528]	; (10008d10 <madgwick_quaternion_update+0x8d4>)
10008b00:	468b      	mov	fp, r1
10008b02:	980c      	ldr	r0, [sp, #48]	; 0x30
10008b04:	990d      	ldr	r1, [sp, #52]	; 0x34
10008b06:	47d8      	blx	fp
10008b08:	4b82      	ldr	r3, [pc, #520]	; (10008d14 <madgwick_quaternion_update+0x8d8>)
10008b0a:	4798      	blx	r3
10008b0c:	4982      	ldr	r1, [pc, #520]	; (10008d18 <madgwick_quaternion_update+0x8dc>)
10008b0e:	47b0      	blx	r6
10008b10:	9f07      	ldr	r7, [sp, #28]
10008b12:	1c39      	adds	r1, r7, #0
10008b14:	47a0      	blx	r4
10008b16:	4b81      	ldr	r3, [pc, #516]	; (10008d1c <madgwick_quaternion_update+0x8e0>)
10008b18:	9008      	str	r0, [sp, #32]
10008b1a:	6018      	str	r0, [r3, #0]
	q2 += qDot2 * deltat;
10008b1c:	990e      	ldr	r1, [sp, #56]	; 0x38
10008b1e:	9707      	str	r7, [sp, #28]
10008b20:	1c38      	adds	r0, r7, #0
10008b22:	47b0      	blx	r6
10008b24:	1c07      	adds	r7, r0, #0
10008b26:	992b      	ldr	r1, [sp, #172]	; 0xac
10008b28:	9802      	ldr	r0, [sp, #8]
10008b2a:	47b0      	blx	r6
10008b2c:	1c01      	adds	r1, r0, #0
10008b2e:	1c38      	adds	r0, r7, #0
10008b30:	47a0      	blx	r4
10008b32:	1c07      	adds	r7, r0, #0
10008b34:	992a      	ldr	r1, [sp, #168]	; 0xa8
10008b36:	9805      	ldr	r0, [sp, #20]
10008b38:	47b0      	blx	r6
10008b3a:	1c01      	adds	r1, r0, #0
10008b3c:	1c38      	adds	r0, r7, #0
10008b3e:	47c8      	blx	r9
10008b40:	21fc      	movs	r1, #252	; 0xfc
10008b42:	0589      	lsls	r1, r1, #22
10008b44:	47b0      	blx	r6
10008b46:	47a8      	blx	r5
10008b48:	900c      	str	r0, [sp, #48]	; 0x30
10008b4a:	910d      	str	r1, [sp, #52]	; 0x34
10008b4c:	990b      	ldr	r1, [sp, #44]	; 0x2c
10008b4e:	9804      	ldr	r0, [sp, #16]
10008b50:	47b0      	blx	r6
10008b52:	47a8      	blx	r5
10008b54:	4a6c      	ldr	r2, [pc, #432]	; (10008d08 <madgwick_quaternion_update+0x8cc>)
10008b56:	4b6d      	ldr	r3, [pc, #436]	; (10008d0c <madgwick_quaternion_update+0x8d0>)
10008b58:	47d0      	blx	sl
10008b5a:	0002      	movs	r2, r0
10008b5c:	000b      	movs	r3, r1
10008b5e:	980c      	ldr	r0, [sp, #48]	; 0x30
10008b60:	990d      	ldr	r1, [sp, #52]	; 0x34
10008b62:	47d8      	blx	fp
10008b64:	4b6b      	ldr	r3, [pc, #428]	; (10008d14 <madgwick_quaternion_update+0x8d8>)
10008b66:	4798      	blx	r3
10008b68:	496b      	ldr	r1, [pc, #428]	; (10008d18 <madgwick_quaternion_update+0x8dc>)
10008b6a:	47b0      	blx	r6
10008b6c:	9906      	ldr	r1, [sp, #24]
10008b6e:	47a0      	blx	r4
10008b70:	4b6b      	ldr	r3, [pc, #428]	; (10008d20 <madgwick_quaternion_update+0x8e4>)
10008b72:	9004      	str	r0, [sp, #16]
10008b74:	6018      	str	r0, [r3, #0]
	q3 += qDot3 * deltat;
10008b76:	992a      	ldr	r1, [sp, #168]	; 0xa8
10008b78:	9807      	ldr	r0, [sp, #28]
10008b7a:	47b0      	blx	r6
10008b7c:	1c07      	adds	r7, r0, #0
10008b7e:	992b      	ldr	r1, [sp, #172]	; 0xac
10008b80:	9806      	ldr	r0, [sp, #24]
10008b82:	47b0      	blx	r6
10008b84:	1c01      	adds	r1, r0, #0
10008b86:	1c38      	adds	r0, r7, #0
10008b88:	47c8      	blx	r9
10008b8a:	1c07      	adds	r7, r0, #0
10008b8c:	990e      	ldr	r1, [sp, #56]	; 0x38
10008b8e:	9805      	ldr	r0, [sp, #20]
10008b90:	47b0      	blx	r6
10008b92:	1c01      	adds	r1, r0, #0
10008b94:	1c38      	adds	r0, r7, #0
10008b96:	47a0      	blx	r4
10008b98:	21fc      	movs	r1, #252	; 0xfc
10008b9a:	0589      	lsls	r1, r1, #22
10008b9c:	47b0      	blx	r6
10008b9e:	47a8      	blx	r5
10008ba0:	900c      	str	r0, [sp, #48]	; 0x30
10008ba2:	910d      	str	r1, [sp, #52]	; 0x34
10008ba4:	990b      	ldr	r1, [sp, #44]	; 0x2c
10008ba6:	9809      	ldr	r0, [sp, #36]	; 0x24
10008ba8:	47b0      	blx	r6
10008baa:	47a8      	blx	r5
10008bac:	4a56      	ldr	r2, [pc, #344]	; (10008d08 <madgwick_quaternion_update+0x8cc>)
10008bae:	4b57      	ldr	r3, [pc, #348]	; (10008d0c <madgwick_quaternion_update+0x8d0>)
10008bb0:	47d0      	blx	sl
10008bb2:	0002      	movs	r2, r0
10008bb4:	000b      	movs	r3, r1
10008bb6:	980c      	ldr	r0, [sp, #48]	; 0x30
10008bb8:	990d      	ldr	r1, [sp, #52]	; 0x34
10008bba:	47d8      	blx	fp
10008bbc:	4f55      	ldr	r7, [pc, #340]	; (10008d14 <madgwick_quaternion_update+0x8d8>)
10008bbe:	47b8      	blx	r7
10008bc0:	4955      	ldr	r1, [pc, #340]	; (10008d18 <madgwick_quaternion_update+0x8dc>)
10008bc2:	47b0      	blx	r6
10008bc4:	9902      	ldr	r1, [sp, #8]
10008bc6:	47a0      	blx	r4
10008bc8:	4b56      	ldr	r3, [pc, #344]	; (10008d24 <madgwick_quaternion_update+0x8e8>)
10008bca:	9009      	str	r0, [sp, #36]	; 0x24
10008bcc:	6018      	str	r0, [r3, #0]
	q4 += qDot4 * deltat;
10008bce:	992b      	ldr	r1, [sp, #172]	; 0xac
10008bd0:	9807      	ldr	r0, [sp, #28]
10008bd2:	47b0      	blx	r6
10008bd4:	1c07      	adds	r7, r0, #0
10008bd6:	992a      	ldr	r1, [sp, #168]	; 0xa8
10008bd8:	9806      	ldr	r0, [sp, #24]
10008bda:	47b0      	blx	r6
10008bdc:	1c01      	adds	r1, r0, #0
10008bde:	1c38      	adds	r0, r7, #0
10008be0:	47a0      	blx	r4
10008be2:	1c07      	adds	r7, r0, #0
10008be4:	990e      	ldr	r1, [sp, #56]	; 0x38
10008be6:	9802      	ldr	r0, [sp, #8]
10008be8:	47b0      	blx	r6
10008bea:	1c01      	adds	r1, r0, #0
10008bec:	1c38      	adds	r0, r7, #0
10008bee:	47c8      	blx	r9
10008bf0:	21fc      	movs	r1, #252	; 0xfc
10008bf2:	0589      	lsls	r1, r1, #22
10008bf4:	47b0      	blx	r6
10008bf6:	47a8      	blx	r5
10008bf8:	9002      	str	r0, [sp, #8]
10008bfa:	9103      	str	r1, [sp, #12]
10008bfc:	990b      	ldr	r1, [sp, #44]	; 0x2c
10008bfe:	980a      	ldr	r0, [sp, #40]	; 0x28
10008c00:	47b0      	blx	r6
10008c02:	47a8      	blx	r5
10008c04:	4a40      	ldr	r2, [pc, #256]	; (10008d08 <madgwick_quaternion_update+0x8cc>)
10008c06:	4b41      	ldr	r3, [pc, #260]	; (10008d0c <madgwick_quaternion_update+0x8d0>)
10008c08:	47d0      	blx	sl
10008c0a:	0002      	movs	r2, r0
10008c0c:	000b      	movs	r3, r1
10008c0e:	9802      	ldr	r0, [sp, #8]
10008c10:	9903      	ldr	r1, [sp, #12]
10008c12:	47d8      	blx	fp
10008c14:	4d3f      	ldr	r5, [pc, #252]	; (10008d14 <madgwick_quaternion_update+0x8d8>)
10008c16:	47a8      	blx	r5
10008c18:	493f      	ldr	r1, [pc, #252]	; (10008d18 <madgwick_quaternion_update+0x8dc>)
10008c1a:	47b0      	blx	r6
10008c1c:	9905      	ldr	r1, [sp, #20]
10008c1e:	47a0      	blx	r4
10008c20:	4b41      	ldr	r3, [pc, #260]	; (10008d28 <madgwick_quaternion_update+0x8ec>)
10008c22:	9002      	str	r0, [sp, #8]
10008c24:	6018      	str	r0, [r3, #0]
	norm = sqrtf(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);    // normalize quaternion
10008c26:	9a08      	ldr	r2, [sp, #32]
10008c28:	1c11      	adds	r1, r2, #0
10008c2a:	1c10      	adds	r0, r2, #0
10008c2c:	47b0      	blx	r6
10008c2e:	1c07      	adds	r7, r0, #0
10008c30:	9b04      	ldr	r3, [sp, #16]
10008c32:	1c19      	adds	r1, r3, #0
10008c34:	1c18      	adds	r0, r3, #0
10008c36:	47b0      	blx	r6
10008c38:	9005      	str	r0, [sp, #20]
10008c3a:	1c01      	adds	r1, r0, #0
10008c3c:	1c38      	adds	r0, r7, #0
10008c3e:	47a0      	blx	r4
10008c40:	1c05      	adds	r5, r0, #0
10008c42:	9809      	ldr	r0, [sp, #36]	; 0x24
10008c44:	1c01      	adds	r1, r0, #0
10008c46:	47b0      	blx	r6
10008c48:	9006      	str	r0, [sp, #24]
10008c4a:	1c01      	adds	r1, r0, #0
10008c4c:	1c28      	adds	r0, r5, #0
10008c4e:	47a0      	blx	r4
10008c50:	9007      	str	r0, [sp, #28]
10008c52:	9d02      	ldr	r5, [sp, #8]
10008c54:	1c29      	adds	r1, r5, #0
10008c56:	1c28      	adds	r0, r5, #0
10008c58:	47b0      	blx	r6
10008c5a:	1c05      	adds	r5, r0, #0
10008c5c:	9905      	ldr	r1, [sp, #20]
10008c5e:	1c38      	adds	r0, r7, #0
10008c60:	47a0      	blx	r4
10008c62:	1c07      	adds	r7, r0, #0
10008c64:	9906      	ldr	r1, [sp, #24]
10008c66:	1c38      	adds	r0, r7, #0
10008c68:	47a0      	blx	r4
10008c6a:	1c07      	adds	r7, r0, #0
10008c6c:	1c29      	adds	r1, r5, #0
10008c6e:	1c38      	adds	r0, r7, #0
10008c70:	47a0      	blx	r4
10008c72:	4920      	ldr	r1, [pc, #128]	; (10008cf4 <madgwick_quaternion_update+0x8b8>)
10008c74:	4788      	blx	r1
10008c76:	1c01      	adds	r1, r0, #0
	norm = 1.0f/norm;
10008c78:	20fe      	movs	r0, #254	; 0xfe
10008c7a:	0580      	lsls	r0, r0, #22
10008c7c:	47c0      	blx	r8
10008c7e:	1c05      	adds	r5, r0, #0
	imu_device.output.q[0] = q1 * norm;
10008c80:	4f2a      	ldr	r7, [pc, #168]	; (10008d2c <madgwick_quaternion_update+0x8f0>)
10008c82:	1c01      	adds	r1, r0, #0
10008c84:	9808      	ldr	r0, [sp, #32]
10008c86:	47b0      	blx	r6
10008c88:	6678      	str	r0, [r7, #100]	; 0x64
	imu_device.output.q[1] = q2 * norm;
10008c8a:	1c29      	adds	r1, r5, #0
10008c8c:	9804      	ldr	r0, [sp, #16]
10008c8e:	47b0      	blx	r6
10008c90:	66b8      	str	r0, [r7, #104]	; 0x68
	imu_device.output.q[2] = q3 * norm;
10008c92:	1c29      	adds	r1, r5, #0
10008c94:	9809      	ldr	r0, [sp, #36]	; 0x24
10008c96:	47b0      	blx	r6
10008c98:	66f8      	str	r0, [r7, #108]	; 0x6c
	imu_device.output.q[3] = q4 * norm;
10008c9a:	1c29      	adds	r1, r5, #0
10008c9c:	9802      	ldr	r0, [sp, #8]
10008c9e:	47b0      	blx	r6
10008ca0:	6738      	str	r0, [r7, #112]	; 0x70
	DBG_LOG("Quaternions (x 10000): q1 %ld, q2 %ld, q3 %ld, q4 %ld", (uint32_t)(imu_device.output.q[0]*10000), (uint32_t)(imu_device.output.q[1] * 10000), (uint32_t)(imu_device.output.q[2] * 10000), (uint32_t)(imu_device.output.q[3] * 10000));
10008ca2:	4823      	ldr	r0, [pc, #140]	; (10008d30 <madgwick_quaternion_update+0x8f4>)
10008ca4:	4b23      	ldr	r3, [pc, #140]	; (10008d34 <madgwick_quaternion_update+0x8f8>)
10008ca6:	4798      	blx	r3
10008ca8:	4923      	ldr	r1, [pc, #140]	; (10008d38 <madgwick_quaternion_update+0x8fc>)
10008caa:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
10008cac:	47b0      	blx	r6
10008cae:	4c23      	ldr	r4, [pc, #140]	; (10008d3c <madgwick_quaternion_update+0x900>)
10008cb0:	47a0      	blx	r4
10008cb2:	9002      	str	r0, [sp, #8]
10008cb4:	4920      	ldr	r1, [pc, #128]	; (10008d38 <madgwick_quaternion_update+0x8fc>)
10008cb6:	6eb8      	ldr	r0, [r7, #104]	; 0x68
10008cb8:	47b0      	blx	r6
10008cba:	47a0      	blx	r4
10008cbc:	0005      	movs	r5, r0
10008cbe:	491e      	ldr	r1, [pc, #120]	; (10008d38 <madgwick_quaternion_update+0x8fc>)
10008cc0:	6e78      	ldr	r0, [r7, #100]	; 0x64
10008cc2:	47b0      	blx	r6
10008cc4:	47a0      	blx	r4
10008cc6:	9004      	str	r0, [sp, #16]
10008cc8:	491b      	ldr	r1, [pc, #108]	; (10008d38 <madgwick_quaternion_update+0x8fc>)
10008cca:	6f38      	ldr	r0, [r7, #112]	; 0x70
10008ccc:	47b0      	blx	r6
10008cce:	47a0      	blx	r4
10008cd0:	9000      	str	r0, [sp, #0]
10008cd2:	9b02      	ldr	r3, [sp, #8]
10008cd4:	002a      	movs	r2, r5
10008cd6:	9904      	ldr	r1, [sp, #16]
10008cd8:	4819      	ldr	r0, [pc, #100]	; (10008d40 <madgwick_quaternion_update+0x904>)
10008cda:	4c1a      	ldr	r4, [pc, #104]	; (10008d44 <madgwick_quaternion_update+0x908>)
10008cdc:	47a0      	blx	r4
}
10008cde:	b021      	add	sp, #132	; 0x84
10008ce0:	bc3c      	pop	{r2, r3, r4, r5}
10008ce2:	4690      	mov	r8, r2
10008ce4:	4699      	mov	r9, r3
10008ce6:	46a2      	mov	sl, r4
10008ce8:	46ab      	mov	fp, r5
10008cea:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008cec:	100140b1 	.word	0x100140b1
10008cf0:	10013a31 	.word	0x10013a31
10008cf4:	10012565 	.word	0x10012565
10008cf8:	10013d1d 	.word	0x10013d1d
10008cfc:	100142d9 	.word	0x100142d9
10008d00:	10016341 	.word	0x10016341
10008d04:	10015605 	.word	0x10015605
10008d08:	a79ed7ed 	.word	0xa79ed7ed
10008d0c:	3fe358e1 	.word	0x3fe358e1
10008d10:	10015af9 	.word	0x10015af9
10008d14:	100163e9 	.word	0x100163e9
10008d18:	3c343958 	.word	0x3c343958
10008d1c:	100188c4 	.word	0x100188c4
10008d20:	1001895c 	.word	0x1001895c
10008d24:	10018960 	.word	0x10018960
10008d28:	10018964 	.word	0x10018964
10008d2c:	1001a550 	.word	0x1001a550
10008d30:	10017780 	.word	0x10017780
10008d34:	10016841 	.word	0x10016841
10008d38:	461c4000 	.word	0x461c4000
10008d3c:	100139c5 	.word	0x100139c5
10008d40:	10017784 	.word	0x10017784
10008d44:	10016721 	.word	0x10016721

10008d48 <ahrs_calculation>:
	//mpu_device.output.roll  = atan2(2.0f * (q[0] * q[1] + q[2] * q[3]), q[0] * q[0] - q[1] * q[1] - q[2] * q[2] + q[3] * q[3]);
	//mpu_device.output.pitch *= 180.0f / PI;
	//mpu_device.output.yaw   *= 180.0f / PI;
	//mpu_device.output.yaw   -= 2.25; // Declination at Zurich, Switzerland is 2 degrees 14 minutes  on 2017-02-06
	//mpu_device.output.roll  *= 180.0f / PI;
10008d48:	4770      	bx	lr
10008d4a:	46c0      	nop			; (mov r8, r8)

10008d4c <sms_ble_pair_request_fn>:

/* AT_BLE_PAIR_REQUEST (#10) */
at_ble_status_t sms_ble_pair_request_fn(void *params)
{
    at_ble_pair_request_t *request = (at_ble_pair_request_t *)params;
    DBG_LOG_DEV("[sms_ble_pair_request_fn]\tPairing request... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_instance.current_state, timer1_current_mode, timer2_current_mode);
10008d4c:	4b03      	ldr	r3, [pc, #12]	; (10008d5c <sms_ble_pair_request_fn+0x10>)
10008d4e:	781b      	ldrb	r3, [r3, #0]
10008d50:	4b03      	ldr	r3, [pc, #12]	; (10008d60 <sms_ble_pair_request_fn+0x14>)
10008d52:	781b      	ldrb	r3, [r3, #0]
10008d54:	4b03      	ldr	r3, [pc, #12]	; (10008d64 <sms_ble_pair_request_fn+0x18>)
10008d56:	781b      	ldrb	r3, [r3, #0]
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- peer features: 0x%02x", request->handle, request->peer_features);
    return AT_BLE_SUCCESS;
}
10008d58:	2000      	movs	r0, #0
10008d5a:	4770      	bx	lr
10008d5c:	1001a414 	.word	0x1001a414
10008d60:	1001a408 	.word	0x1001a408
10008d64:	1001a537 	.word	0x1001a537

10008d68 <sms_ble_notification_confirmed_fn>:

/* AT_BLE_NOTIFICATION_CONFIRMED (#29) */
at_ble_status_t sms_ble_notification_confirmed_fn(void *params)
{
10008d68:	b510      	push	{r4, lr}
	//DBG_LOG_CONT(" done!");
    //gpio_pin_set_output_level(dbg_pin, DBG_PIN_HIGH);
    
    at_ble_cmd_complete_event_t *notification_status = (at_ble_cmd_complete_event_t *)params;
	ble_instance.sending_queue--;
10008d6a:	4c0d      	ldr	r4, [pc, #52]	; (10008da0 <sms_ble_notification_confirmed_fn+0x38>)
10008d6c:	7863      	ldrb	r3, [r4, #1]
10008d6e:	3b01      	subs	r3, #1
10008d70:	b2db      	uxtb	r3, r3
10008d72:	7063      	strb	r3, [r4, #1]
	//DBG_LOG("T/O: OFF");
	sms_ble_timeout = BLE_TIMEOUT_OFF;
10008d74:	2201      	movs	r2, #1
10008d76:	4252      	negs	r2, r2
10008d78:	4b0a      	ldr	r3, [pc, #40]	; (10008da4 <sms_ble_notification_confirmed_fn+0x3c>)
10008d7a:	601a      	str	r2, [r3, #0]
    //button_instance.current_state = sms_button_get_state();
    //DBG_LOG_DEV("[sms_ble_notification_confirmed_fn]\tNotification sent... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- operation: 0x%02x\r\n- status: 0x%02x", notification_status->conn_handle, notification_status->operation, notification_status->status);
    sms_dualtimer_stop(DUALTIMER_TIMER2);
10008d7c:	2001      	movs	r0, #1
10008d7e:	4b0a      	ldr	r3, [pc, #40]	; (10008da8 <sms_ble_notification_confirmed_fn+0x40>)
10008d80:	4798      	blx	r3
    timer2_current_mode = TIMER2_MODE_NONE;
10008d82:	2200      	movs	r2, #0
10008d84:	4b09      	ldr	r3, [pc, #36]	; (10008dac <sms_ble_notification_confirmed_fn+0x44>)
10008d86:	701a      	strb	r2, [r3, #0]
    ble_instance.current_state = BLE_STATE_PAIRED;
10008d88:	2322      	movs	r3, #34	; 0x22
10008d8a:	7023      	strb	r3, [r4, #0]
    //DBG_LOG_CONT_DEV(" done!");

    //gpio_pin_set_output_level(dbg_pin, DBG_PIN_LOW);
    
    //DBG_LOG_DEV("Timer1 current mode: %d", timer1_current_mode);
    if(timer1_current_mode == TIMER1_MODE_NONE) {
10008d8c:	4b08      	ldr	r3, [pc, #32]	; (10008db0 <sms_ble_notification_confirmed_fn+0x48>)
10008d8e:	781b      	ldrb	r3, [r3, #0]
10008d90:	2b00      	cmp	r3, #0
10008d92:	d102      	bne.n	10008d9a <sms_ble_notification_confirmed_fn+0x32>
        ulp_ready = true;
10008d94:	3201      	adds	r2, #1
10008d96:	4b07      	ldr	r3, [pc, #28]	; (10008db4 <sms_ble_notification_confirmed_fn+0x4c>)
10008d98:	701a      	strb	r2, [r3, #0]
    }
    return AT_BLE_SUCCESS;
}
10008d9a:	2000      	movs	r0, #0
10008d9c:	bd10      	pop	{r4, pc}
10008d9e:	46c0      	nop			; (mov r8, r8)
10008da0:	1001a414 	.word	0x1001a414
10008da4:	1001a40c 	.word	0x1001a40c
10008da8:	1000ac81 	.word	0x1000ac81
10008dac:	1001a537 	.word	0x1001a537
10008db0:	1001a408 	.word	0x1001a408
10008db4:	1001a411 	.word	0x1001a411

10008db8 <sms_ble_indication_confirmed_fn>:

/* AT_BLE_INDICATION_CONFIRMED (#30) */
at_ble_status_t sms_ble_indication_confirmed_fn(void *params)
{
10008db8:	b510      	push	{r4, lr}
    
    at_ble_indication_confirmed_t *indication_status = (at_ble_indication_confirmed_t *)params;
    //button_instance.current_state = sms_button_get_state();
    //DBG_LOG_DEV("[sms_ble_indication_confirmed]\tIndication confirmed... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- char handle: 0x%04x\r\n- status: 0x%02x", indication_status->conn_handle, indication_status->char_handle, indication_status->status);
    sms_dualtimer_stop(DUALTIMER_TIMER2);
10008dba:	2001      	movs	r0, #1
10008dbc:	4b08      	ldr	r3, [pc, #32]	; (10008de0 <sms_ble_indication_confirmed_fn+0x28>)
10008dbe:	4798      	blx	r3
    timer2_current_mode = TIMER2_MODE_NONE;
10008dc0:	2200      	movs	r2, #0
10008dc2:	4b08      	ldr	r3, [pc, #32]	; (10008de4 <sms_ble_indication_confirmed_fn+0x2c>)
10008dc4:	701a      	strb	r2, [r3, #0]
    ble_instance.current_state = BLE_STATE_PAIRED;
10008dc6:	3222      	adds	r2, #34	; 0x22
10008dc8:	4b07      	ldr	r3, [pc, #28]	; (10008de8 <sms_ble_indication_confirmed_fn+0x30>)
10008dca:	701a      	strb	r2, [r3, #0]
    //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
    //sms_sensors_toggle_interrupt(SMS_EXTINT_ENABLE);
    
    //gpio_pin_set_output_level(dbg_pin, DBG_PIN_LOW);
    
    if(timer1_current_mode == TIMER1_MODE_NONE) {
10008dcc:	4b07      	ldr	r3, [pc, #28]	; (10008dec <sms_ble_indication_confirmed_fn+0x34>)
10008dce:	781b      	ldrb	r3, [r3, #0]
10008dd0:	2b00      	cmp	r3, #0
10008dd2:	d102      	bne.n	10008dda <sms_ble_indication_confirmed_fn+0x22>
        ulp_ready = true;
10008dd4:	3a21      	subs	r2, #33	; 0x21
10008dd6:	4b06      	ldr	r3, [pc, #24]	; (10008df0 <sms_ble_indication_confirmed_fn+0x38>)
10008dd8:	701a      	strb	r2, [r3, #0]
    }        
    return AT_BLE_SUCCESS;
}
10008dda:	2000      	movs	r0, #0
10008ddc:	bd10      	pop	{r4, pc}
10008dde:	46c0      	nop			; (mov r8, r8)
10008de0:	1000ac81 	.word	0x1000ac81
10008de4:	1001a537 	.word	0x1001a537
10008de8:	1001a414 	.word	0x1001a414
10008dec:	1001a408 	.word	0x1001a408
10008df0:	1001a411 	.word	0x1001a411

10008df4 <sms_ble_init_variables>:


/* Own functions */
void sms_ble_init_variables(void)
{
    ble_instance.current_state = BLE_STATE_POWEROFF;
10008df4:	2300      	movs	r3, #0
10008df6:	4a02      	ldr	r2, [pc, #8]	; (10008e00 <sms_ble_init_variables+0xc>)
10008df8:	7013      	strb	r3, [r2, #0]
    sms_ble_send_cnt = 0;
10008dfa:	4a02      	ldr	r2, [pc, #8]	; (10008e04 <sms_ble_init_variables+0x10>)
10008dfc:	8013      	strh	r3, [r2, #0]
}
10008dfe:	4770      	bx	lr
10008e00:	1001a414 	.word	0x1001a414
10008e04:	1001a630 	.word	0x1001a630

10008e08 <sms_ble_startup>:

void sms_ble_startup(void)
{
10008e08:	b510      	push	{r4, lr}
	//sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
	timer2_current_mode = TIMER2_MODE_LED_STARTUP;
10008e0a:	2202      	movs	r2, #2
10008e0c:	4b02      	ldr	r3, [pc, #8]	; (10008e18 <sms_ble_startup+0x10>)
10008e0e:	701a      	strb	r2, [r3, #0]
	sms_led_blink_start(SMS_LED_0_PIN);
10008e10:	2016      	movs	r0, #22
10008e12:	4b02      	ldr	r3, [pc, #8]	; (10008e1c <sms_ble_startup+0x14>)
10008e14:	4798      	blx	r3
}
10008e16:	bd10      	pop	{r4, pc}
10008e18:	1001a537 	.word	0x1001a537
10008e1c:	1000a739 	.word	0x1000a739

10008e20 <sms_ble_power_down>:

void sms_ble_power_down(void)
{
10008e20:	b510      	push	{r4, lr}
	sms_monitor_get_states("[sms_ble_power_down]");
10008e22:	481b      	ldr	r0, [pc, #108]	; (10008e90 <sms_ble_power_down+0x70>)
10008e24:	4b1b      	ldr	r3, [pc, #108]	; (10008e94 <sms_ble_power_down+0x74>)
10008e26:	4798      	blx	r3
	if(ble_instance.current_state == BLE_STATE_POWEROFF) {
10008e28:	4b1b      	ldr	r3, [pc, #108]	; (10008e98 <sms_ble_power_down+0x78>)
10008e2a:	781b      	ldrb	r3, [r3, #0]
10008e2c:	2b00      	cmp	r3, #0
10008e2e:	d105      	bne.n	10008e3c <sms_ble_power_down+0x1c>
		/* If already power off state, then go back sleeping */
		//sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
		ulp_ready = true;
10008e30:	2201      	movs	r2, #1
10008e32:	4b1a      	ldr	r3, [pc, #104]	; (10008e9c <sms_ble_power_down+0x7c>)
10008e34:	701a      	strb	r2, [r3, #0]
		release_sleep_lock();
10008e36:	4b1a      	ldr	r3, [pc, #104]	; (10008ea0 <sms_ble_power_down+0x80>)
10008e38:	4798      	blx	r3
10008e3a:	e028      	b.n	10008e8e <sms_ble_power_down+0x6e>
	}
	else {
		/* Disable button interrupts */
		//sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
		/* Disconnect if necessary from BLE network */
		switch(ble_instance.current_state) {
10008e3c:	4b16      	ldr	r3, [pc, #88]	; (10008e98 <sms_ble_power_down+0x78>)
10008e3e:	781b      	ldrb	r3, [r3, #0]
10008e40:	b2db      	uxtb	r3, r3
10008e42:	2b21      	cmp	r3, #33	; 0x21
10008e44:	d015      	beq.n	10008e72 <sms_ble_power_down+0x52>
10008e46:	d802      	bhi.n	10008e4e <sms_ble_power_down+0x2e>
10008e48:	2b20      	cmp	r3, #32
10008e4a:	d003      	beq.n	10008e54 <sms_ble_power_down+0x34>
10008e4c:	e016      	b.n	10008e7c <sms_ble_power_down+0x5c>
10008e4e:	2b23      	cmp	r3, #35	; 0x23
10008e50:	d908      	bls.n	10008e64 <sms_ble_power_down+0x44>
10008e52:	e013      	b.n	10008e7c <sms_ble_power_down+0x5c>
			case BLE_STATE_ADVERTISING:
			DBG_LOG_DEV("[sms_ble_power_down]\tStopping command received during advertisement. Stopping... ");
			if(at_ble_adv_stop() != AT_BLE_SUCCESS) {
10008e54:	4b13      	ldr	r3, [pc, #76]	; (10008ea4 <sms_ble_power_down+0x84>)
10008e56:	4798      	blx	r3
10008e58:	2800      	cmp	r0, #0
10008e5a:	d10f      	bne.n	10008e7c <sms_ble_power_down+0x5c>
				DBG_LOG_CONT_DEV("failed!!!");
				//#pragma TBD: manage adv_stop failure
			}
			else {
				DBG_LOG_CONT_DEV("done!");
				ble_instance.current_state = BLE_STATE_DISCONNECTED;
10008e5c:	2211      	movs	r2, #17
10008e5e:	4b0e      	ldr	r3, [pc, #56]	; (10008e98 <sms_ble_power_down+0x78>)
10008e60:	701a      	strb	r2, [r3, #0]
10008e62:	e00b      	b.n	10008e7c <sms_ble_power_down+0x5c>
			case BLE_STATE_PAIRED:
			DBG_LOG_DEV("[sms_ble_power_down]\t\tDevice paired... disabling interrupts & switching down sensors");
			
			case BLE_STATE_INDICATING:
			DBG_LOG_DEV("[sms_ble_power_down]\t\tCurrently indicating");
			pressure_device.state = PRESSURE_STATE_OFF;
10008e64:	2100      	movs	r1, #0
10008e66:	232b      	movs	r3, #43	; 0x2b
10008e68:	4a0f      	ldr	r2, [pc, #60]	; (10008ea8 <sms_ble_power_down+0x88>)
10008e6a:	54d1      	strb	r1, [r2, r3]
			sms_sensors_interrupt_toggle(false, false);
10008e6c:	2000      	movs	r0, #0
10008e6e:	4b0f      	ldr	r3, [pc, #60]	; (10008eac <sms_ble_power_down+0x8c>)
10008e70:	4798      	blx	r3
			//#pragma TBD: switch-off sensors to save current
			//sms_sensors_switch(false);
			
			case BLE_STATE_CONNECTED:
			DBG_LOG_DEV("[sms_ble_power_down]\t\tDevice connected... disconnecting");
			at_ble_disconnect(sms_connection_handle, AT_BLE_TERMINATED_BY_USER);
10008e72:	4b0f      	ldr	r3, [pc, #60]	; (10008eb0 <sms_ble_power_down+0x90>)
10008e74:	8818      	ldrh	r0, [r3, #0]
10008e76:	2113      	movs	r1, #19
10008e78:	4b0e      	ldr	r3, [pc, #56]	; (10008eb4 <sms_ble_power_down+0x94>)
10008e7a:	4798      	blx	r3
			
			default:
			break;
		}
		
		ble_instance.current_state = BLE_STATE_DISCONNECTED;
10008e7c:	2211      	movs	r2, #17
10008e7e:	4b06      	ldr	r3, [pc, #24]	; (10008e98 <sms_ble_power_down+0x78>)
10008e80:	701a      	strb	r2, [r3, #0]
		timer2_current_mode = TIMER2_MODE_LED_SHUTDOWN;
10008e82:	3a0e      	subs	r2, #14
10008e84:	4b0c      	ldr	r3, [pc, #48]	; (10008eb8 <sms_ble_power_down+0x98>)
10008e86:	701a      	strb	r2, [r3, #0]
		sms_led_blink_start(SMS_LED_0_PIN);
10008e88:	2016      	movs	r0, #22
10008e8a:	4b0c      	ldr	r3, [pc, #48]	; (10008ebc <sms_ble_power_down+0x9c>)
10008e8c:	4798      	blx	r3
	}
}
10008e8e:	bd10      	pop	{r4, pc}
10008e90:	100177bc 	.word	0x100177bc
10008e94:	100096b9 	.word	0x100096b9
10008e98:	1001a414 	.word	0x1001a414
10008e9c:	1001a411 	.word	0x1001a411
10008ea0:	1000e87d 	.word	0x1000e87d
10008ea4:	1000fb1d 	.word	0x1000fb1d
10008ea8:	1001a49c 	.word	0x1001a49c
10008eac:	1000a9b9 	.word	0x1000a9b9
10008eb0:	1001a416 	.word	0x1001a416
10008eb4:	1000fb49 	.word	0x1000fb49
10008eb8:	1001a537 	.word	0x1001a537
10008ebc:	1000a739 	.word	0x1000a739

10008ec0 <sms_ble_adv_report_fn>:
//#include <stdio.h>
#include "sms_ble.h"

/* AT_BLE_ADV_REPORT (#3) */
at_ble_status_t sms_ble_adv_report_fn(void *params)
{
10008ec0:	b510      	push	{r4, lr}
    at_ble_adv_report_t *adv_report = (at_ble_adv_report_t *)params;
    ble_instance.current_state = BLE_STATE_DISCONNECTED;
10008ec2:	2211      	movs	r2, #17
10008ec4:	4b02      	ldr	r3, [pc, #8]	; (10008ed0 <sms_ble_adv_report_fn+0x10>)
10008ec6:	701a      	strb	r2, [r3, #0]
    DBG_LOG_DEV("[sms_ble_adv_report_fn]\tAdvertisement timeout...");
    //DBG_LOG_DEV("- status: 0x%02x", adv_report->status);
    sms_ble_power_down();
10008ec8:	4b02      	ldr	r3, [pc, #8]	; (10008ed4 <sms_ble_adv_report_fn+0x14>)
10008eca:	4798      	blx	r3
    return AT_BLE_SUCCESS;
}
10008ecc:	2000      	movs	r0, #0
10008ece:	bd10      	pop	{r4, pc}
10008ed0:	1001a414 	.word	0x1001a414
10008ed4:	10008e21 	.word	0x10008e21

10008ed8 <sms_ble_connected_fn>:

/* AT_BLE_CONNECTED (#5) */
at_ble_status_t sms_ble_connected_fn(void *params)
{
10008ed8:	b510      	push	{r4, lr}
    if(ble_instance.current_state == BLE_STATE_ADVERTISING) {
10008eda:	4b09      	ldr	r3, [pc, #36]	; (10008f00 <sms_ble_connected_fn+0x28>)
10008edc:	781b      	ldrb	r3, [r3, #0]
10008ede:	2b20      	cmp	r3, #32
10008ee0:	d10a      	bne.n	10008ef8 <sms_ble_connected_fn+0x20>
        at_ble_connected_t *connected = (at_ble_connected_t *)params;
        sms_ble_conn_handle = connected->handle;
10008ee2:	8902      	ldrh	r2, [r0, #8]
10008ee4:	4b07      	ldr	r3, [pc, #28]	; (10008f04 <sms_ble_connected_fn+0x2c>)
10008ee6:	801a      	strh	r2, [r3, #0]
        ble_instance.current_state = BLE_STATE_CONNECTED;
10008ee8:	2221      	movs	r2, #33	; 0x21
10008eea:	4b05      	ldr	r3, [pc, #20]	; (10008f00 <sms_ble_connected_fn+0x28>)
10008eec:	701a      	strb	r2, [r3, #0]
        //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- conn interval: %d\r\n- conn latency: %d\r\n- supervision timeout: %d\r\n- peer address: 0x", connected->handle, connected->conn_params.con_interval, connected->conn_params.con_latency, connected->conn_params.sup_to);
        //for(uint8_t i = 0; i < AT_BLE_ADDR_LEN; i++) {
            //DBG_LOG_CONT_DEV("%02x",connected->peer_addr.addr[AT_BLE_ADDR_LEN - (i+1)]);
        //}
		//DBG_LOG("T/O: 5000 ms");
		sms_ble_timeout = BLE_TIMEOUT_PAIR;
10008eee:	32d4      	adds	r2, #212	; 0xd4
10008ef0:	32ff      	adds	r2, #255	; 0xff
10008ef2:	4b05      	ldr	r3, [pc, #20]	; (10008f08 <sms_ble_connected_fn+0x30>)
10008ef4:	601a      	str	r2, [r3, #0]
10008ef6:	e001      	b.n	10008efc <sms_ble_connected_fn+0x24>
    }
    else {
        sms_ble_power_down();
10008ef8:	4b04      	ldr	r3, [pc, #16]	; (10008f0c <sms_ble_connected_fn+0x34>)
10008efa:	4798      	blx	r3
    }    
    return AT_BLE_SUCCESS;
}
10008efc:	2000      	movs	r0, #0
10008efe:	bd10      	pop	{r4, pc}
10008f00:	1001a414 	.word	0x1001a414
10008f04:	1001a52a 	.word	0x1001a52a
10008f08:	1001a40c 	.word	0x1001a40c
10008f0c:	10008e21 	.word	0x10008e21

10008f10 <sms_ble_paired_fn>:
    return AT_BLE_SUCCESS;
}

/* AT_BLE_PAIR_DONE (#9) */
at_ble_status_t sms_ble_paired_fn(void *params)
{
10008f10:	b510      	push	{r4, lr}
    if(ble_instance.current_state == BLE_STATE_CONNECTED) {
10008f12:	4b0b      	ldr	r3, [pc, #44]	; (10008f40 <sms_ble_paired_fn+0x30>)
10008f14:	781b      	ldrb	r3, [r3, #0]
10008f16:	2b21      	cmp	r3, #33	; 0x21
10008f18:	d10e      	bne.n	10008f38 <sms_ble_paired_fn+0x28>
        ble_instance.current_state = BLE_STATE_PAIRED;
10008f1a:	2222      	movs	r2, #34	; 0x22
10008f1c:	4b08      	ldr	r3, [pc, #32]	; (10008f40 <sms_ble_paired_fn+0x30>)
10008f1e:	701a      	strb	r2, [r3, #0]
        at_ble_pair_done_t *pair_status = (at_ble_pair_done_t *)params;
        sms_monitor_get_states("[sms_ble_paired_fn]");
10008f20:	4808      	ldr	r0, [pc, #32]	; (10008f44 <sms_ble_paired_fn+0x34>)
10008f22:	4b09      	ldr	r3, [pc, #36]	; (10008f48 <sms_ble_paired_fn+0x38>)
10008f24:	4798      	blx	r3
        //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- authorization: 0x%02x\r\n- status: 0x%02x", pair_status->handle, pair_status->auth, pair_status->status);
        sms_sensors_switch(true, true); // ! Release sleep lock & enable buttons interrupt after reset done!
10008f26:	2101      	movs	r1, #1
10008f28:	2001      	movs	r0, #1
10008f2a:	4b08      	ldr	r3, [pc, #32]	; (10008f4c <sms_ble_paired_fn+0x3c>)
10008f2c:	4798      	blx	r3
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
		//DBG_LOG("T/O: OFF");
		sms_ble_timeout = BLE_TIMEOUT_OFF;
10008f2e:	2201      	movs	r2, #1
10008f30:	4252      	negs	r2, r2
10008f32:	4b07      	ldr	r3, [pc, #28]	; (10008f50 <sms_ble_paired_fn+0x40>)
10008f34:	601a      	str	r2, [r3, #0]
10008f36:	e001      	b.n	10008f3c <sms_ble_paired_fn+0x2c>
    }
    else {
        sms_ble_power_down();
10008f38:	4b06      	ldr	r3, [pc, #24]	; (10008f54 <sms_ble_paired_fn+0x44>)
10008f3a:	4798      	blx	r3
    }        
    return AT_BLE_SUCCESS;
}
10008f3c:	2000      	movs	r0, #0
10008f3e:	bd10      	pop	{r4, pc}
10008f40:	1001a414 	.word	0x1001a414
10008f44:	100177d4 	.word	0x100177d4
10008f48:	100096b9 	.word	0x100096b9
10008f4c:	1000aa41 	.word	0x1000aa41
10008f50:	1001a40c 	.word	0x1001a40c
10008f54:	10008e21 	.word	0x10008e21

10008f58 <sms_ble_advertise>:
		sms_led_blink_start(SMS_LED_0_PIN);
	}
}

at_ble_status_t sms_ble_advertise(void)
{
10008f58:	b510      	push	{r4, lr}
10008f5a:	b084      	sub	sp, #16
	at_ble_status_t status = AT_BLE_FAILURE;
	ble_instance.current_state = BLE_STATE_ADVERTISING;
10008f5c:	2220      	movs	r2, #32
10008f5e:	4b14      	ldr	r3, [pc, #80]	; (10008fb0 <sms_ble_advertise+0x58>)
10008f60:	701a      	strb	r2, [r3, #0]

	/* Set the advertisement data */
	if((status = ble_advertisement_data_set()) != AT_BLE_SUCCESS) {
10008f62:	4b14      	ldr	r3, [pc, #80]	; (10008fb4 <sms_ble_advertise+0x5c>)
10008f64:	4798      	blx	r3
10008f66:	1e04      	subs	r4, r0, #0
10008f68:	d007      	beq.n	10008f7a <sms_ble_advertise+0x22>
		DBG_LOG("[sms_ble_advertise]\tAdvertisement data set failed!");
10008f6a:	4813      	ldr	r0, [pc, #76]	; (10008fb8 <sms_ble_advertise+0x60>)
10008f6c:	4b13      	ldr	r3, [pc, #76]	; (10008fbc <sms_ble_advertise+0x64>)
10008f6e:	4798      	blx	r3
10008f70:	4813      	ldr	r0, [pc, #76]	; (10008fc0 <sms_ble_advertise+0x68>)
10008f72:	4b14      	ldr	r3, [pc, #80]	; (10008fc4 <sms_ble_advertise+0x6c>)
10008f74:	4798      	blx	r3
		return status;
10008f76:	0020      	movs	r0, r4
10008f78:	e018      	b.n	10008fac <sms_ble_advertise+0x54>
	}

	/* Start of advertisement */
	if((status = at_ble_adv_start(AT_BLE_ADV_TYPE_UNDIRECTED, AT_BLE_ADV_GEN_DISCOVERABLE, NULL, AT_BLE_ADV_FP_ANY, APP_FAST_ADV, APP_ADV_TIMEOUT, 0)) == AT_BLE_SUCCESS)
10008f7a:	2300      	movs	r3, #0
10008f7c:	9302      	str	r3, [sp, #8]
10008f7e:	4b12      	ldr	r3, [pc, #72]	; (10008fc8 <sms_ble_advertise+0x70>)
10008f80:	9301      	str	r3, [sp, #4]
10008f82:	23c8      	movs	r3, #200	; 0xc8
10008f84:	00db      	lsls	r3, r3, #3
10008f86:	9300      	str	r3, [sp, #0]
10008f88:	2300      	movs	r3, #0
10008f8a:	2200      	movs	r2, #0
10008f8c:	2101      	movs	r1, #1
10008f8e:	2000      	movs	r0, #0
10008f90:	4c0e      	ldr	r4, [pc, #56]	; (10008fcc <sms_ble_advertise+0x74>)
10008f92:	47a0      	blx	r4
10008f94:	0004      	movs	r4, r0
	{
		DBG_LOG_DEV("[sms_ble_advertise]\t\tBLE Started Advertisement");
		return AT_BLE_SUCCESS;
10008f96:	2000      	movs	r0, #0
		DBG_LOG("[sms_ble_advertise]\tAdvertisement data set failed!");
		return status;
	}

	/* Start of advertisement */
	if((status = at_ble_adv_start(AT_BLE_ADV_TYPE_UNDIRECTED, AT_BLE_ADV_GEN_DISCOVERABLE, NULL, AT_BLE_ADV_FP_ANY, APP_FAST_ADV, APP_ADV_TIMEOUT, 0)) == AT_BLE_SUCCESS)
10008f98:	2c00      	cmp	r4, #0
10008f9a:	d007      	beq.n	10008fac <sms_ble_advertise+0x54>
	{
		DBG_LOG_DEV("[sms_ble_advertise]\t\tBLE Started Advertisement");
		return AT_BLE_SUCCESS;
	}
	else {
		DBG_LOG("[sms_service_advertise]\tBLE Advertisement start failed: reason 0x%x", status);
10008f9c:	4806      	ldr	r0, [pc, #24]	; (10008fb8 <sms_ble_advertise+0x60>)
10008f9e:	4b07      	ldr	r3, [pc, #28]	; (10008fbc <sms_ble_advertise+0x64>)
10008fa0:	4798      	blx	r3
10008fa2:	0021      	movs	r1, r4
10008fa4:	480a      	ldr	r0, [pc, #40]	; (10008fd0 <sms_ble_advertise+0x78>)
10008fa6:	4b07      	ldr	r3, [pc, #28]	; (10008fc4 <sms_ble_advertise+0x6c>)
10008fa8:	4798      	blx	r3
	}
	return AT_BLE_FAILURE;
10008faa:	20e2      	movs	r0, #226	; 0xe2
}
10008fac:	b004      	add	sp, #16
10008fae:	bd10      	pop	{r4, pc}
10008fb0:	1001a414 	.word	0x1001a414
10008fb4:	1000dee1 	.word	0x1000dee1
10008fb8:	10017780 	.word	0x10017780
10008fbc:	10016841 	.word	0x10016841
10008fc0:	100177e8 	.word	0x100177e8
10008fc4:	10016721 	.word	0x10016721
10008fc8:	0000028f 	.word	0x0000028f
10008fcc:	1000f9e1 	.word	0x1000f9e1
10008fd0:	1001781c 	.word	0x1001781c

10008fd4 <sms_ble_disconnected_fn>:
    return AT_BLE_SUCCESS;
}

/* AT_BLE_DISCONNECTED (#6) */
at_ble_status_t sms_ble_disconnected_fn(void *params)
{
10008fd4:	b510      	push	{r4, lr}
10008fd6:	0004      	movs	r4, r0
    at_ble_disconnected_t *disconnect = (at_ble_disconnected_t *)params;
    if(ble_instance.current_state == BLE_STATE_PAIRED) {
10008fd8:	4b16      	ldr	r3, [pc, #88]	; (10009034 <sms_ble_disconnected_fn+0x60>)
10008fda:	781b      	ldrb	r3, [r3, #0]
10008fdc:	2b22      	cmp	r3, #34	; 0x22
10008fde:	d10a      	bne.n	10008ff6 <sms_ble_disconnected_fn+0x22>
        pressure_device.state = PRESSURE_STATE_OFF;
10008fe0:	2100      	movs	r1, #0
10008fe2:	3309      	adds	r3, #9
10008fe4:	4a14      	ldr	r2, [pc, #80]	; (10009038 <sms_ble_disconnected_fn+0x64>)
10008fe6:	54d1      	strb	r1, [r2, r3]
        sms_sensors_interrupt_toggle(false, false);
10008fe8:	2000      	movs	r0, #0
10008fea:	4b14      	ldr	r3, [pc, #80]	; (1000903c <sms_ble_disconnected_fn+0x68>)
10008fec:	4798      	blx	r3
        sms_sensors_switch(false, false);
10008fee:	2100      	movs	r1, #0
10008ff0:	2000      	movs	r0, #0
10008ff2:	4b13      	ldr	r3, [pc, #76]	; (10009040 <sms_ble_disconnected_fn+0x6c>)
10008ff4:	4798      	blx	r3
    }
    ble_instance.current_state = BLE_STATE_DISCONNECTED;
10008ff6:	4b0f      	ldr	r3, [pc, #60]	; (10009034 <sms_ble_disconnected_fn+0x60>)
10008ff8:	2211      	movs	r2, #17
10008ffa:	701a      	strb	r2, [r3, #0]
    DBG_LOG_DEV("[sms_ble_disconnected_fn]\tPeer disconnected... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_instance.current_state, timer1_current_mode, timer2_current_mode);
10008ffc:	781b      	ldrb	r3, [r3, #0]
10008ffe:	4b11      	ldr	r3, [pc, #68]	; (10009044 <sms_ble_disconnected_fn+0x70>)
10009000:	781b      	ldrb	r3, [r3, #0]
10009002:	4b11      	ldr	r3, [pc, #68]	; (10009048 <sms_ble_disconnected_fn+0x74>)
10009004:	781b      	ldrb	r3, [r3, #0]
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- reason: 0x%02x", disconnect->handle, disconnect->reason);
    switch(disconnect->reason) {
10009006:	78a3      	ldrb	r3, [r4, #2]
10009008:	2b1a      	cmp	r3, #26
1000900a:	d00b      	beq.n	10009024 <sms_ble_disconnected_fn+0x50>
1000900c:	b2da      	uxtb	r2, r3
1000900e:	2a1a      	cmp	r2, #26
10009010:	d804      	bhi.n	1000901c <sms_ble_disconnected_fn+0x48>
10009012:	2b05      	cmp	r3, #5
10009014:	d006      	beq.n	10009024 <sms_ble_disconnected_fn+0x50>
10009016:	2b08      	cmp	r3, #8
10009018:	d107      	bne.n	1000902a <sms_ble_disconnected_fn+0x56>
1000901a:	e003      	b.n	10009024 <sms_ble_disconnected_fn+0x50>
1000901c:	2b29      	cmp	r3, #41	; 0x29
1000901e:	d001      	beq.n	10009024 <sms_ble_disconnected_fn+0x50>
10009020:	2b3b      	cmp	r3, #59	; 0x3b
10009022:	d102      	bne.n	1000902a <sms_ble_disconnected_fn+0x56>
        case AT_BLE_AUTH_FAILURE: //0x05
        case AT_BLE_SUPERVISION_TIMEOUT: //0x08
        case AT_BLE_UNSUPPORTED_REMOTE_FEATURE: // 0x1A
        case AT_BLE_PAIRING_WITH_UNIT_KEY_NOT_SUP: // 0x29
        case AT_BLE_UNACCEPTABLE_INTERVAL: // 0x3B
        sms_ble_advertise();
10009024:	4b09      	ldr	r3, [pc, #36]	; (1000904c <sms_ble_disconnected_fn+0x78>)
10009026:	4798      	blx	r3
        break;
10009028:	e001      	b.n	1000902e <sms_ble_disconnected_fn+0x5a>
        case AT_BLE_TERMINATED_BY_USER: // 0x13
        case AT_BLE_REMOTE_DEV_TERM_LOW_RESOURCES: //0x14
        case AT_BLE_REMOTE_DEV_POWER_OFF: //0x15
        case AT_BLE_CON_TERM_BY_LOCAL_HOST: //0x16
        default:
        sms_ble_power_down();
1000902a:	4b09      	ldr	r3, [pc, #36]	; (10009050 <sms_ble_disconnected_fn+0x7c>)
1000902c:	4798      	blx	r3
        break;
    }
    
    return AT_BLE_SUCCESS;
}
1000902e:	2000      	movs	r0, #0
10009030:	bd10      	pop	{r4, pc}
10009032:	46c0      	nop			; (mov r8, r8)
10009034:	1001a414 	.word	0x1001a414
10009038:	1001a49c 	.word	0x1001a49c
1000903c:	1000a9b9 	.word	0x1000a9b9
10009040:	1000aa41 	.word	0x1000aa41
10009044:	1001a408 	.word	0x1001a408
10009048:	1001a537 	.word	0x1001a537
1000904c:	10008f59 	.word	0x10008f59
10009050:	10008e21 	.word	0x10008e21

10009054 <sms_ble_send_characteristic>:
	}
	return AT_BLE_FAILURE;
}

at_ble_status_t sms_ble_send_characteristic(enum sms_ble_char_type ch)
{
10009054:	b570      	push	{r4, r5, r6, lr}
10009056:	b084      	sub	sp, #16
    uint8_t send_val[BLE_CHAR_SIZE_MAX];
	uint32_t calc_val;
    //ble_current_state = BLE_STATE_INDICATING;

    
    switch(ch) {
10009058:	2801      	cmp	r0, #1
1000905a:	d02e      	beq.n	100090ba <sms_ble_send_characteristic+0x66>
1000905c:	2800      	cmp	r0, #0
1000905e:	d002      	beq.n	10009066 <sms_ble_send_characteristic+0x12>
10009060:	2802      	cmp	r0, #2
10009062:	d040      	beq.n	100090e6 <sms_ble_send_characteristic+0x92>
10009064:	e07a      	b.n	1000915c <sms_ble_send_characteristic+0x108>
        case BLE_CHAR_BTN:
		send_val[0] = 0x00;
10009066:	2300      	movs	r3, #0
10009068:	466a      	mov	r2, sp
1000906a:	7013      	strb	r3, [r2, #0]
		if(button_instance.btn0.new_char) {
1000906c:	4b4d      	ldr	r3, [pc, #308]	; (100091a4 <sms_ble_send_characteristic+0x150>)
1000906e:	791b      	ldrb	r3, [r3, #4]
10009070:	2b00      	cmp	r3, #0
10009072:	d00a      	beq.n	1000908a <sms_ble_send_characteristic+0x36>
			button_instance.btn0.char_value = ((button_instance.btn0.char_value >= 0x7f) ? 0 : (button_instance.btn0.char_value + 1));
10009074:	4b4b      	ldr	r3, [pc, #300]	; (100091a4 <sms_ble_send_characteristic+0x150>)
10009076:	795a      	ldrb	r2, [r3, #5]
10009078:	2300      	movs	r3, #0
1000907a:	2a7e      	cmp	r2, #126	; 0x7e
1000907c:	d801      	bhi.n	10009082 <sms_ble_send_characteristic+0x2e>
1000907e:	3201      	adds	r2, #1
10009080:	b2d3      	uxtb	r3, r2
10009082:	4a48      	ldr	r2, [pc, #288]	; (100091a4 <sms_ble_send_characteristic+0x150>)
10009084:	7153      	strb	r3, [r2, #5]
			send_val[0] |= button_instance.btn0.char_value;
10009086:	466a      	mov	r2, sp
10009088:	7013      	strb	r3, [r2, #0]
		}
		if(button_instance.btn1.new_char) {
1000908a:	4b46      	ldr	r3, [pc, #280]	; (100091a4 <sms_ble_send_characteristic+0x150>)
1000908c:	7a9b      	ldrb	r3, [r3, #10]
1000908e:	2b00      	cmp	r3, #0
10009090:	d00f      	beq.n	100090b2 <sms_ble_send_characteristic+0x5e>
	        button_instance.btn1.char_value = ((button_instance.btn1.char_value >= 0xff) ? 0 : (button_instance.btn1.char_value + 1));
10009092:	4b44      	ldr	r3, [pc, #272]	; (100091a4 <sms_ble_send_characteristic+0x150>)
10009094:	7adb      	ldrb	r3, [r3, #11]
10009096:	2bff      	cmp	r3, #255	; 0xff
10009098:	d002      	beq.n	100090a0 <sms_ble_send_characteristic+0x4c>
1000909a:	3301      	adds	r3, #1
1000909c:	b2db      	uxtb	r3, r3
1000909e:	e000      	b.n	100090a2 <sms_ble_send_characteristic+0x4e>
100090a0:	2300      	movs	r3, #0
100090a2:	4a40      	ldr	r2, [pc, #256]	; (100091a4 <sms_ble_send_characteristic+0x150>)
100090a4:	72d3      	strb	r3, [r2, #11]
			send_val[0] |= button_instance.btn1.char_value + 0x80;
100090a6:	3b80      	subs	r3, #128	; 0x80
100090a8:	466a      	mov	r2, sp
100090aa:	7812      	ldrb	r2, [r2, #0]
100090ac:	4313      	orrs	r3, r2
100090ae:	466a      	mov	r2, sp
100090b0:	7013      	strb	r3, [r2, #0]
		}
        val_handle = button_instance.service_handler.serv_chars.char_val_handle;
100090b2:	4b3c      	ldr	r3, [pc, #240]	; (100091a4 <sms_ble_send_characteristic+0x150>)
100090b4:	8c9d      	ldrh	r5, [r3, #36]	; 0x24
        length = BLE_CHAR_SIZE_BUTTON;
100090b6:	2201      	movs	r2, #1
        break;
100090b8:	e052      	b.n	10009160 <sms_ble_send_characteristic+0x10c>
                
        case BLE_CHAR_PRESS:
        send_val[0] = (uint8_t)((pressure_device.hal.temperature >>24) & 0xff);
100090ba:	4a3b      	ldr	r2, [pc, #236]	; (100091a8 <sms_ble_send_characteristic+0x154>)
100090bc:	6a13      	ldr	r3, [r2, #32]
100090be:	1619      	asrs	r1, r3, #24
100090c0:	4668      	mov	r0, sp
100090c2:	7001      	strb	r1, [r0, #0]
        send_val[1] = (uint8_t)((pressure_device.hal.temperature >> 16) & 0xff);
100090c4:	1419      	asrs	r1, r3, #16
100090c6:	7041      	strb	r1, [r0, #1]
        send_val[2] = (uint8_t)((pressure_device.hal.temperature >> 8) & 0xff);
100090c8:	1219      	asrs	r1, r3, #8
100090ca:	7081      	strb	r1, [r0, #2]
        send_val[3] = (uint8_t)((pressure_device.hal.temperature) & 0xff);
100090cc:	70c3      	strb	r3, [r0, #3]
        send_val[4] = (uint8_t)((pressure_device.hal.pressure >> 24) & 0xff);
100090ce:	69d3      	ldr	r3, [r2, #28]
100090d0:	1619      	asrs	r1, r3, #24
100090d2:	7101      	strb	r1, [r0, #4]
        send_val[5] = (uint8_t)((pressure_device.hal.pressure >> 16) & 0xff);
100090d4:	1419      	asrs	r1, r3, #16
100090d6:	7141      	strb	r1, [r0, #5]
        send_val[6] = (uint8_t)((pressure_device.hal.pressure >> 8) & 0xff);
100090d8:	1219      	asrs	r1, r3, #8
100090da:	7181      	strb	r1, [r0, #6]
        send_val[7] = (uint8_t)((pressure_device.hal.pressure) & 0xff);
100090dc:	71c3      	strb	r3, [r0, #7]
        val_handle = pressure_device.service_handler.serv_chars.char_val_handle;
100090de:	2340      	movs	r3, #64	; 0x40
100090e0:	5ad5      	ldrh	r5, [r2, r3]
        length = BLE_CHAR_SIZE_PRESSURE;
100090e2:	2208      	movs	r2, #8
        break;
100090e4:	e03c      	b.n	10009160 <sms_ble_send_characteristic+0x10c>
        
        case BLE_CHAR_MPU:
		calc_val = (uint32_t)(imu_device.output.q[0] * 1000000);
100090e6:	4c31      	ldr	r4, [pc, #196]	; (100091ac <sms_ble_send_characteristic+0x158>)
100090e8:	4e31      	ldr	r6, [pc, #196]	; (100091b0 <sms_ble_send_characteristic+0x15c>)
100090ea:	4932      	ldr	r1, [pc, #200]	; (100091b4 <sms_ble_send_characteristic+0x160>)
100090ec:	6e60      	ldr	r0, [r4, #100]	; 0x64
100090ee:	47b0      	blx	r6
100090f0:	4d31      	ldr	r5, [pc, #196]	; (100091b8 <sms_ble_send_characteristic+0x164>)
100090f2:	47a8      	blx	r5
		//DBG_LOG("q1: %ld ", calc_val);
        send_val[0] = (uint8_t)(calc_val & 0xff);
100090f4:	466b      	mov	r3, sp
100090f6:	7018      	strb	r0, [r3, #0]
        send_val[1] = (uint8_t)((calc_val >> 8) & 0xff);
100090f8:	0a03      	lsrs	r3, r0, #8
100090fa:	466a      	mov	r2, sp
100090fc:	7053      	strb	r3, [r2, #1]
        send_val[2] = (uint8_t)((calc_val >> 16) & 0xff);
100090fe:	0c03      	lsrs	r3, r0, #16
10009100:	7093      	strb	r3, [r2, #2]
        send_val[3] = (uint8_t)((calc_val >> 24) & 0xff);
10009102:	0e00      	lsrs	r0, r0, #24
10009104:	70d0      	strb	r0, [r2, #3]
		calc_val = (uint32_t)(imu_device.output.q[1] * 1000000);
10009106:	492b      	ldr	r1, [pc, #172]	; (100091b4 <sms_ble_send_characteristic+0x160>)
10009108:	6ea0      	ldr	r0, [r4, #104]	; 0x68
1000910a:	47b0      	blx	r6
1000910c:	47a8      	blx	r5
		//DBG_LOG_CONT("q2: %ld ", calc_val);
        send_val[4] = (uint8_t)(calc_val & 0xff);
1000910e:	466b      	mov	r3, sp
10009110:	7118      	strb	r0, [r3, #4]
        send_val[5] = (uint8_t)((calc_val >> 8) & 0xff);
10009112:	0a03      	lsrs	r3, r0, #8
10009114:	466a      	mov	r2, sp
10009116:	7153      	strb	r3, [r2, #5]
        send_val[6] = (uint8_t)((calc_val >> 16) & 0xff);
10009118:	0c03      	lsrs	r3, r0, #16
1000911a:	7193      	strb	r3, [r2, #6]
        send_val[7] = (uint8_t)((calc_val >> 24) & 0xff);
1000911c:	0e00      	lsrs	r0, r0, #24
1000911e:	71d0      	strb	r0, [r2, #7]
		calc_val = (uint32_t)(imu_device.output.q[2] * 1000000);
10009120:	4924      	ldr	r1, [pc, #144]	; (100091b4 <sms_ble_send_characteristic+0x160>)
10009122:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
10009124:	47b0      	blx	r6
10009126:	47a8      	blx	r5
		//DBG_LOG_CONT("q3: %ld ", calc_val);
		send_val[8] = (uint8_t)(calc_val & 0xff);
10009128:	466b      	mov	r3, sp
1000912a:	7218      	strb	r0, [r3, #8]
		send_val[9] = (uint8_t)((calc_val >> 8) & 0xff);
1000912c:	0a03      	lsrs	r3, r0, #8
1000912e:	466a      	mov	r2, sp
10009130:	7253      	strb	r3, [r2, #9]
		send_val[10] = (uint8_t)((calc_val >> 16) & 0xff);
10009132:	0c03      	lsrs	r3, r0, #16
10009134:	7293      	strb	r3, [r2, #10]
		send_val[11] = (uint8_t)((calc_val >> 24) & 0xff);
10009136:	0e00      	lsrs	r0, r0, #24
10009138:	72d0      	strb	r0, [r2, #11]
		calc_val = (uint32_t)(imu_device.output.q[3] * 1000000);
1000913a:	491e      	ldr	r1, [pc, #120]	; (100091b4 <sms_ble_send_characteristic+0x160>)
1000913c:	6f20      	ldr	r0, [r4, #112]	; 0x70
1000913e:	47b0      	blx	r6
10009140:	47a8      	blx	r5
		//DBG_LOG_CONT("q4: %ld ", calc_val);
		send_val[12] = (uint8_t)(calc_val & 0xff);
10009142:	466b      	mov	r3, sp
10009144:	7318      	strb	r0, [r3, #12]
		send_val[13] = (uint8_t)((calc_val >> 8) & 0xff);
10009146:	0a03      	lsrs	r3, r0, #8
10009148:	466a      	mov	r2, sp
1000914a:	7353      	strb	r3, [r2, #13]
		send_val[14] = (uint8_t)((calc_val >> 16) & 0xff);
1000914c:	0c03      	lsrs	r3, r0, #16
1000914e:	7393      	strb	r3, [r2, #14]
		send_val[15] = (uint8_t)((calc_val >> 24) & 0xff);
10009150:	0e00      	lsrs	r0, r0, #24
10009152:	73d0      	strb	r0, [r2, #15]
        val_handle = imu_device.service_handler.serv_chars.char_val_handle;
10009154:	2398      	movs	r3, #152	; 0x98
10009156:	5ae5      	ldrh	r5, [r4, r3]
        length = BLE_CHAR_SIZE_MPU;
10009158:	2210      	movs	r2, #16
        //else {
            //for(uint8_t i = 0; i < 2; i++) {
                //send_val[18+i] = 0;
            //}
        //}
        break;
1000915a:	e001      	b.n	10009160 <sms_ble_send_characteristic+0x10c>

at_ble_status_t sms_ble_send_characteristic(enum sms_ble_char_type ch)
{
    at_ble_status_t status = AT_BLE_SUCCESS;
    at_ble_handle_t val_handle = 0;
    uint8_t length = 0;
1000915c:	2200      	movs	r2, #0
}

at_ble_status_t sms_ble_send_characteristic(enum sms_ble_char_type ch)
{
    at_ble_status_t status = AT_BLE_SUCCESS;
    at_ble_handle_t val_handle = 0;
1000915e:	2500      	movs	r5, #0
    
    //DBG_LOG("Sending: ");
    //for(int i = 0; i < length; i += 4) {
        //DBG_LOG_CONT("0x%02x%02x%02x%02x ", send_val[i], send_val[i+1], send_val[i+2], send_val[i+3]);
    //}
    status = at_ble_characteristic_value_set(val_handle, send_val, (length * sizeof(uint8_t)));
10009160:	b292      	uxth	r2, r2
10009162:	4669      	mov	r1, sp
10009164:	0028      	movs	r0, r5
10009166:	4b15      	ldr	r3, [pc, #84]	; (100091bc <sms_ble_send_characteristic+0x168>)
10009168:	4798      	blx	r3
1000916a:	1e04      	subs	r4, r0, #0
    if(status == AT_BLE_SUCCESS) {
1000916c:	d116      	bne.n	1000919c <sms_ble_send_characteristic+0x148>
//#   if SMS_SENDING_WITH_ACK == true
        //sms_ble_ind_retry = 0;
        //status = at_ble_indication_send(sms_connection_handle, val_handle);
//#   else
        status = at_ble_notification_send(sms_connection_handle, val_handle);
1000916e:	4b14      	ldr	r3, [pc, #80]	; (100091c0 <sms_ble_send_characteristic+0x16c>)
10009170:	8818      	ldrh	r0, [r3, #0]
10009172:	0029      	movs	r1, r5
10009174:	4b13      	ldr	r3, [pc, #76]	; (100091c4 <sms_ble_send_characteristic+0x170>)
10009176:	4798      	blx	r3
10009178:	1e04      	subs	r4, r0, #0
		if(status == AT_BLE_SUCCESS) {
1000917a:	d10c      	bne.n	10009196 <sms_ble_send_characteristic+0x142>
			ble_instance.sending_queue++;
1000917c:	4a12      	ldr	r2, [pc, #72]	; (100091c8 <sms_ble_send_characteristic+0x174>)
1000917e:	7853      	ldrb	r3, [r2, #1]
10009180:	3301      	adds	r3, #1
10009182:	b2db      	uxtb	r3, r3
10009184:	7053      	strb	r3, [r2, #1]
			sms_ble_send_cnt++;
10009186:	4a11      	ldr	r2, [pc, #68]	; (100091cc <sms_ble_send_characteristic+0x178>)
10009188:	8813      	ldrh	r3, [r2, #0]
1000918a:	3301      	adds	r3, #1
1000918c:	8013      	strh	r3, [r2, #0]
			//DBG_LOG_CONT(" %d GONE? ", sms_ble_send_cnt);
			//DBG_LOG("T/O: 20ms");
			sms_ble_timeout = BLE_TIMEOUT_NOTIFY;
1000918e:	2202      	movs	r2, #2
10009190:	4b0f      	ldr	r3, [pc, #60]	; (100091d0 <sms_ble_send_characteristic+0x17c>)
10009192:	601a      	str	r2, [r3, #0]
10009194:	e002      	b.n	1000919c <sms_ble_send_characteristic+0x148>
		}
		else {
			DBG_LOG_CONT("NOTIFICATION ERROR!!");
10009196:	480f      	ldr	r0, [pc, #60]	; (100091d4 <sms_ble_send_characteristic+0x180>)
10009198:	4b0f      	ldr	r3, [pc, #60]	; (100091d8 <sms_ble_send_characteristic+0x184>)
1000919a:	4798      	blx	r3
    }
	else {
		DBG_LOG_DEV(" NOT set? ");
	}
    return status;
}
1000919c:	0020      	movs	r0, r4
1000919e:	b004      	add	sp, #16
100091a0:	bd70      	pop	{r4, r5, r6, pc}
100091a2:	46c0      	nop			; (mov r8, r8)
100091a4:	1001a418 	.word	0x1001a418
100091a8:	1001a49c 	.word	0x1001a49c
100091ac:	1001a550 	.word	0x1001a550
100091b0:	100140b1 	.word	0x100140b1
100091b4:	49742400 	.word	0x49742400
100091b8:	100139c5 	.word	0x100139c5
100091bc:	100102c5 	.word	0x100102c5
100091c0:	1001a416 	.word	0x1001a416
100091c4:	10010465 	.word	0x10010465
100091c8:	1001a414 	.word	0x1001a414
100091cc:	1001a630 	.word	0x1001a630
100091d0:	1001a40c 	.word	0x1001a40c
100091d4:	10017860 	.word	0x10017860
100091d8:	10016721 	.word	0x10016721

100091dc <sms_ble_primary_service_define>:

at_ble_status_t sms_ble_primary_service_define(gatt_service_handler_t *service)
{
100091dc:	b510      	push	{r4, lr}
100091de:	b082      	sub	sp, #8
    //DBG_LOG_DEV("[sms_ble_primary_service_define]\n\r  defining primary service\r\n- uuid: 0x%02x\r\n- handle: 0x%02x\r\n- char uuid: 0x%02x%02x\r\n- char init value: %d", (unsigned int)service->serv_uuid.uuid, service->serv_handle, service->serv_chars.uuid.uuid[1], service->serv_chars.uuid.uuid[0], service->serv_chars.value_init_len);
    return(at_ble_primary_service_define(&service->serv_uuid, &service->serv_handle, NULL, 0, &service->serv_chars, 1));
100091e0:	0001      	movs	r1, r0
100091e2:	3112      	adds	r1, #18
100091e4:	2301      	movs	r3, #1
100091e6:	9301      	str	r3, [sp, #4]
100091e8:	0003      	movs	r3, r0
100091ea:	3314      	adds	r3, #20
100091ec:	9300      	str	r3, [sp, #0]
100091ee:	2300      	movs	r3, #0
100091f0:	2200      	movs	r2, #0
100091f2:	4c02      	ldr	r4, [pc, #8]	; (100091fc <sms_ble_primary_service_define+0x20>)
100091f4:	47a0      	blx	r4
}
100091f6:	b002      	add	sp, #8
100091f8:	bd10      	pop	{r4, pc}
100091fa:	46c0      	nop			; (mov r8, r8)
100091fc:	100102a5 	.word	0x100102a5

10009200 <sms_ble_service_init>:

void sms_ble_service_init(enum sms_ble_serv_type type, gatt_service_handler_t *service, uint8_t *value)
{
10009200:	b5f0      	push	{r4, r5, r6, r7, lr}
10009202:	464f      	mov	r7, r9
10009204:	4646      	mov	r6, r8
10009206:	b4c0      	push	{r6, r7}
10009208:	b083      	sub	sp, #12
1000920a:	4694      	mov	ip, r2
    at_ble_handle_t handle = 0;
    uint8_t uuid[16] = {0};
    uint8_t char_size = 0;
    switch(type) {
1000920c:	2801      	cmp	r0, #1
1000920e:	d010      	beq.n	10009232 <sms_ble_service_init+0x32>
10009210:	2800      	cmp	r0, #0
10009212:	d002      	beq.n	1000921a <sms_ble_service_init+0x1a>
10009214:	2802      	cmp	r0, #2
10009216:	d019      	beq.n	1000924c <sms_ble_service_init+0x4c>
10009218:	e025      	b.n	10009266 <sms_ble_service_init+0x66>
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 8) & 0xFF);
1000921a:	23bb      	movs	r3, #187	; 0xbb
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 16) & 0xFF);
1000921c:	2450      	movs	r4, #80	; 0x50
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
1000921e:	2553      	movs	r5, #83	; 0x53
        case BLE_SERV_BUTTON:
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
10009220:	26be      	movs	r6, #190	; 0xbe
    switch(type) {
        case BLE_SERV_BUTTON:
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
10009222:	275a      	movs	r7, #90	; 0x5a
    uint8_t char_size = 0;
    switch(type) {
        case BLE_SERV_BUTTON:
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
10009224:	2057      	movs	r0, #87	; 0x57
    uint8_t uuid[16] = {0};
    uint8_t char_size = 0;
    switch(type) {
        case BLE_SERV_BUTTON:
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
10009226:	221c      	movs	r2, #28
10009228:	4690      	mov	r8, r2
        uuid[11] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3) & 0xFF);
        uuid[12] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 24) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4) & 0xFF);
        char_size = 1;
1000922a:	3a1b      	subs	r2, #27
1000922c:	9201      	str	r2, [sp, #4]
    at_ble_handle_t handle = 0;
    uint8_t uuid[16] = {0};
    uint8_t char_size = 0;
    switch(type) {
        case BLE_SERV_BUTTON:
        handle = 1;
1000922e:	4691      	mov	r9, r2
10009230:	e023      	b.n	1000927a <sms_ble_service_init+0x7a>
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 8) & 0xFF);
10009232:	23ee      	movs	r3, #238	; 0xee
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 16) & 0xFF);
10009234:	2450      	movs	r4, #80	; 0x50
        handle = 2;
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 24) & 0xFF);
10009236:	2553      	movs	r5, #83	; 0x53
        case BLE_SERV_PRESSURE:
        handle = 2;
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
10009238:	26be      	movs	r6, #190	; 0xbe
        
        case BLE_SERV_PRESSURE:
        handle = 2;
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
1000923a:	275a      	movs	r7, #90	; 0x5a
        break;
        
        case BLE_SERV_PRESSURE:
        handle = 2;
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
1000923c:	2057      	movs	r0, #87	; 0x57
        char_size = 1;
        break;
        
        case BLE_SERV_PRESSURE:
        handle = 2;
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
1000923e:	221c      	movs	r2, #28
10009240:	4690      	mov	r8, r2
        uuid[11] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3) & 0xFF);
        uuid[12] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 24) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4) & 0xFF);
        char_size = 8;
10009242:	3a14      	subs	r2, #20
10009244:	9201      	str	r2, [sp, #4]
        uuid[15] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4) & 0xFF);
        char_size = 1;
        break;
        
        case BLE_SERV_PRESSURE:
        handle = 2;
10009246:	3a06      	subs	r2, #6
10009248:	4691      	mov	r9, r2
        uuid[12] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 24) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4) & 0xFF);
        char_size = 8;
        break;
1000924a:	e016      	b.n	1000927a <sms_ble_service_init+0x7a>
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 8) & 0xFF);
1000924c:	2311      	movs	r3, #17
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 16) & 0xFF);
1000924e:	2450      	movs	r4, #80	; 0x50
        handle = 3;
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 24) & 0xFF);
10009250:	2553      	movs	r5, #83	; 0x53
        case BLE_SERV_MPU:
        handle = 3;
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1) & 0xFF);
10009252:	26be      	movs	r6, #190	; 0xbe
        
        case BLE_SERV_MPU:
        handle = 3;
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
10009254:	275a      	movs	r7, #90	; 0x5a
        break;
        
        case BLE_SERV_MPU:
        handle = 3;
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
10009256:	2057      	movs	r0, #87	; 0x57
        char_size = 8;
        break;
        
        case BLE_SERV_MPU:
        handle = 3;
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
10009258:	221c      	movs	r2, #28
1000925a:	4690      	mov	r8, r2
        uuid[11] = (uint8_t) ((SMS_MPU_SERVICE_UUID_3) & 0xFF);
        uuid[12] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 24) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4) & 0xFF);
        char_size = 20;
1000925c:	3a08      	subs	r2, #8
1000925e:	9201      	str	r2, [sp, #4]
        uuid[15] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4) & 0xFF);
        char_size = 8;
        break;
        
        case BLE_SERV_MPU:
        handle = 3;
10009260:	3a11      	subs	r2, #17
10009262:	4691      	mov	r9, r2
        uuid[12] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 24) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4) & 0xFF);
        char_size = 20;
        break;
10009264:	e009      	b.n	1000927a <sms_ble_service_init+0x7a>
}

void sms_ble_service_init(enum sms_ble_serv_type type, gatt_service_handler_t *service, uint8_t *value)
{
    at_ble_handle_t handle = 0;
    uint8_t uuid[16] = {0};
10009266:	2300      	movs	r3, #0
10009268:	2400      	movs	r4, #0
1000926a:	2500      	movs	r5, #0
1000926c:	2600      	movs	r6, #0
1000926e:	2700      	movs	r7, #0
10009270:	2000      	movs	r0, #0
10009272:	2200      	movs	r2, #0
10009274:	4690      	mov	r8, r2
    uint8_t char_size = 0;
10009276:	9201      	str	r2, [sp, #4]
    return(at_ble_primary_service_define(&service->serv_uuid, &service->serv_handle, NULL, 0, &service->serv_chars, 1));
}

void sms_ble_service_init(enum sms_ble_serv_type type, gatt_service_handler_t *service, uint8_t *value)
{
    at_ble_handle_t handle = 0;
10009278:	4691      	mov	r9, r2
        
        default:
        break;
    }
    //SMS button service characteristic
    service->serv_handle = handle;
1000927a:	464a      	mov	r2, r9
1000927c:	824a      	strh	r2, [r1, #18]
    service->serv_uuid.type = AT_BLE_UUID_128;
1000927e:	2202      	movs	r2, #2
10009280:	700a      	strb	r2, [r1, #0]
    service->serv_uuid.uuid[0] = uuid[0];
10009282:	4642      	mov	r2, r8
10009284:	704a      	strb	r2, [r1, #1]
    service->serv_uuid.uuid[1] = uuid[1];
10009286:	7088      	strb	r0, [r1, #2]
    service->serv_uuid.uuid[2] = uuid[2];
10009288:	70cf      	strb	r7, [r1, #3]
    service->serv_uuid.uuid[3] = uuid[3];
1000928a:	710e      	strb	r6, [r1, #4]
    service->serv_uuid.uuid[4] = uuid[4];
1000928c:	714d      	strb	r5, [r1, #5]
    service->serv_uuid.uuid[5] = uuid[5];
1000928e:	718c      	strb	r4, [r1, #6]
    service->serv_uuid.uuid[6] = uuid[6];
10009290:	71cb      	strb	r3, [r1, #7]
    service->serv_uuid.uuid[7] = uuid[7];
10009292:	720b      	strb	r3, [r1, #8]
    service->serv_uuid.uuid[8] = uuid[8];
10009294:	2300      	movs	r3, #0
10009296:	724b      	strb	r3, [r1, #9]
    service->serv_uuid.uuid[9] = uuid[9];
10009298:	728b      	strb	r3, [r1, #10]
    service->serv_uuid.uuid[10] = uuid[10];
1000929a:	72cb      	strb	r3, [r1, #11]
    service->serv_uuid.uuid[11] = uuid[11];
1000929c:	730b      	strb	r3, [r1, #12]
    service->serv_uuid.uuid[12] = uuid[12];
1000929e:	734b      	strb	r3, [r1, #13]
    service->serv_uuid.uuid[13] = uuid[13];
100092a0:	738b      	strb	r3, [r1, #14]
    service->serv_uuid.uuid[14] = uuid[14];
100092a2:	73cb      	strb	r3, [r1, #15]
    service->serv_uuid.uuid[15] = uuid[15];
100092a4:	740b      	strb	r3, [r1, #16]
    
    #   if SMS_SENDING_WITH_ACK == true
    service->serv_chars.properties = (AT_BLE_CHAR_READ | AT_BLE_CHAR_INDICATE); // properties
    #   else
    service->serv_chars.properties = (AT_BLE_CHAR_READ | AT_BLE_CHAR_NOTIFY); // properties
100092a6:	2412      	movs	r4, #18
100092a8:	850c      	strh	r4, [r1, #40]	; 0x28
    #   endif
    service->serv_chars.init_value = value; // value
100092aa:	4662      	mov	r2, ip
100092ac:	62ca      	str	r2, [r1, #44]	; 0x2c
    service->serv_chars.value_init_len = char_size * sizeof(uint8_t);
100092ae:	466a      	mov	r2, sp
100092b0:	8892      	ldrh	r2, [r2, #4]
100092b2:	860a      	strh	r2, [r1, #48]	; 0x30
    service->serv_chars.value_max_len = char_size * sizeof(uint8_t);
100092b4:	864a      	strh	r2, [r1, #50]	; 0x32
    service->serv_chars.value_permissions = (AT_BLE_ATTR_READABLE_NO_AUTHN_NO_AUTHR | AT_BLE_ATTR_WRITABLE_NO_AUTHN_NO_AUTHR); // permissions
100092b6:	2011      	movs	r0, #17
100092b8:	2234      	movs	r2, #52	; 0x34
100092ba:	5488      	strb	r0, [r1, r2]
    service->serv_chars.user_desc = NULL; //user defined name
100092bc:	638b      	str	r3, [r1, #56]	; 0x38
    service->serv_chars.user_desc_len = 0;
100092be:	2200      	movs	r2, #0
100092c0:	878b      	strh	r3, [r1, #60]	; 0x3c
    service->serv_chars.user_desc_max_len = 0;
100092c2:	87cb      	strh	r3, [r1, #62]	; 0x3e
    service->serv_chars.user_desc_permissions = AT_BLE_ATTR_NO_PERMISSIONS; // user description permissions
100092c4:	3033      	adds	r0, #51	; 0x33
100092c6:	540a      	strb	r2, [r1, r0]
    service->serv_chars.client_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS; // client config permissions
100092c8:	3001      	adds	r0, #1
100092ca:	540a      	strb	r2, [r1, r0]
    service->serv_chars.server_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS; // server config permissions
100092cc:	3001      	adds	r0, #1
100092ce:	540a      	strb	r2, [r1, r0]
    service->serv_chars.user_desc_handle = 0; // user description handles
100092d0:	2248      	movs	r2, #72	; 0x48
100092d2:	528b      	strh	r3, [r1, r2]
    service->serv_chars.client_config_handle = 0; // client config handles
100092d4:	3202      	adds	r2, #2
100092d6:	528b      	strh	r3, [r1, r2]
    service->serv_chars.server_config_handle = 0; // server config handles
100092d8:	3202      	adds	r2, #2
100092da:	528b      	strh	r3, [r1, r2]
    
    service->serv_chars.presentation_format = NULL; //presentation format
100092dc:	640b      	str	r3, [r1, #64]	; 0x40
100092de:	b003      	add	sp, #12
100092e0:	bc0c      	pop	{r2, r3}
100092e2:	4690      	mov	r8, r2
100092e4:	4699      	mov	r9, r3
100092e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

100092e8 <sms_button_bt0_callback>:
        gpio_disable_callback(button_instance.btn1.gpio_pin);
    }
}
/* Callbacks --> sending interrupt message to platform */
void sms_button_bt0_callback(void)
{
100092e8:	b510      	push	{r4, lr}
    button_instance.btn0.new_int = true;
100092ea:	4b05      	ldr	r3, [pc, #20]	; (10009300 <sms_button_bt0_callback+0x18>)
100092ec:	2201      	movs	r2, #1
100092ee:	70da      	strb	r2, [r3, #3]
    send_plf_int_msg_ind(button_instance.btn0.gpio_pin, GPIO_CALLBACK_RISING, NULL, 0);
100092f0:	7858      	ldrb	r0, [r3, #1]
100092f2:	2300      	movs	r3, #0
100092f4:	2200      	movs	r2, #0
100092f6:	2102      	movs	r1, #2
100092f8:	4c02      	ldr	r4, [pc, #8]	; (10009304 <sms_button_bt0_callback+0x1c>)
100092fa:	47a0      	blx	r4
}
100092fc:	bd10      	pop	{r4, pc}
100092fe:	46c0      	nop			; (mov r8, r8)
10009300:	1001a418 	.word	0x1001a418
10009304:	1000e5b1 	.word	0x1000e5b1

10009308 <sms_button_bt1_callback>:
void sms_button_bt1_callback(void)
{
10009308:	b510      	push	{r4, lr}
	button_instance.btn1.new_int = true;
1000930a:	4b05      	ldr	r3, [pc, #20]	; (10009320 <sms_button_bt1_callback+0x18>)
1000930c:	2201      	movs	r2, #1
1000930e:	725a      	strb	r2, [r3, #9]
    send_plf_int_msg_ind(button_instance.btn1.gpio_pin, GPIO_CALLBACK_RISING, NULL, 0);
10009310:	79d8      	ldrb	r0, [r3, #7]
10009312:	2300      	movs	r3, #0
10009314:	2200      	movs	r2, #0
10009316:	2102      	movs	r1, #2
10009318:	4c02      	ldr	r4, [pc, #8]	; (10009324 <sms_button_bt1_callback+0x1c>)
1000931a:	47a0      	blx	r4
}
1000931c:	bd10      	pop	{r4, pc}
1000931e:	46c0      	nop			; (mov r8, r8)
10009320:	1001a418 	.word	0x1001a418
10009324:	1000e5b1 	.word	0x1000e5b1

10009328 <sms_button_init_variables>:
}

/* Initialize all button-related variables */
void sms_button_init_variables(void)
{
	button_instance.current_state = BUTTON_STATE_NONE;
10009328:	4b08      	ldr	r3, [pc, #32]	; (1000934c <sms_button_init_variables+0x24>)
1000932a:	2200      	movs	r2, #0
1000932c:	735a      	strb	r2, [r3, #13]
	button_instance.btn0.id = SMS_BTN_0;
1000932e:	701a      	strb	r2, [r3, #0]
	button_instance.btn0.gpio_pin = SMS_BTN_0_PIN;
10009330:	211f      	movs	r1, #31
10009332:	7059      	strb	r1, [r3, #1]
	button_instance.btn0.int_enabled = true;
10009334:	391e      	subs	r1, #30
10009336:	7099      	strb	r1, [r3, #2]
	button_instance.btn0.new_int = false;
10009338:	70da      	strb	r2, [r3, #3]
	button_instance.btn0.char_value = 0;
1000933a:	715a      	strb	r2, [r3, #5]
	button_instance.btn1.id = SMS_BTN_1;
1000933c:	7199      	strb	r1, [r3, #6]
	button_instance.btn1.gpio_pin = SMS_BTN_1_PIN;
1000933e:	201d      	movs	r0, #29
10009340:	71d8      	strb	r0, [r3, #7]
	button_instance.btn1.int_enabled = true;
10009342:	7219      	strb	r1, [r3, #8]
	button_instance.btn1.new_int = false;
10009344:	725a      	strb	r2, [r3, #9]
	button_instance.btn1.char_value = 0;
10009346:	72da      	strb	r2, [r3, #11]
}
10009348:	4770      	bx	lr
1000934a:	46c0      	nop			; (mov r8, r8)
1000934c:	1001a418 	.word	0x1001a418

10009350 <sms_button_gpio_init>:

/* Initialize gpio for button inputs */
void sms_button_gpio_init(void)
{
10009350:	b5f0      	push	{r4, r5, r6, r7, lr}
10009352:	4657      	mov	r7, sl
10009354:	464e      	mov	r6, r9
10009356:	4645      	mov	r5, r8
10009358:	b4e0      	push	{r5, r6, r7}
1000935a:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;

    /* Button0 @ PIN_AO_GPIO_0 */
    gpio_get_config_defaults(&config_gpio_pin);
1000935c:	ac01      	add	r4, sp, #4
1000935e:	0020      	movs	r0, r4
10009360:	4b1d      	ldr	r3, [pc, #116]	; (100093d8 <sms_button_gpio_init+0x88>)
10009362:	469a      	mov	sl, r3
10009364:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
10009366:	2300      	movs	r3, #0
10009368:	4699      	mov	r9, r3
1000936a:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
1000936c:	2302      	movs	r3, #2
1000936e:	4698      	mov	r8, r3
10009370:	7063      	strb	r3, [r4, #1]
    config_gpio_pin.aon_wakeup = true;
10009372:	2701      	movs	r7, #1
10009374:	70e7      	strb	r7, [r4, #3]
    if(gpio_pin_set_config(button_instance.btn0.gpio_pin, &config_gpio_pin) != STATUS_OK) {
10009376:	4e19      	ldr	r6, [pc, #100]	; (100093dc <sms_button_gpio_init+0x8c>)
10009378:	7870      	ldrb	r0, [r6, #1]
1000937a:	0021      	movs	r1, r4
1000937c:	4d18      	ldr	r5, [pc, #96]	; (100093e0 <sms_button_gpio_init+0x90>)
1000937e:	47a8      	blx	r5
        DBG_LOG_DEV("[sms_button_configure]\tproblem while setting up button0");
    }
    
    /* Button1 @ PIN_AO_GPIO_2 */
    gpio_get_config_defaults(&config_gpio_pin);
10009380:	0020      	movs	r0, r4
10009382:	47d0      	blx	sl
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
10009384:	464b      	mov	r3, r9
10009386:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
10009388:	4643      	mov	r3, r8
1000938a:	7063      	strb	r3, [r4, #1]
    config_gpio_pin.aon_wakeup = true;
1000938c:	70e7      	strb	r7, [r4, #3]
    if(gpio_pin_set_config(button_instance.btn1.gpio_pin, &config_gpio_pin) != STATUS_OK) {
1000938e:	79f0      	ldrb	r0, [r6, #7]
10009390:	0021      	movs	r1, r4
10009392:	47a8      	blx	r5
10009394:	2800      	cmp	r0, #0
10009396:	d005      	beq.n	100093a4 <sms_button_gpio_init+0x54>
        DBG_LOG("[sms_button_configure]\tProblem while setting up button1");
10009398:	4812      	ldr	r0, [pc, #72]	; (100093e4 <sms_button_gpio_init+0x94>)
1000939a:	4b13      	ldr	r3, [pc, #76]	; (100093e8 <sms_button_gpio_init+0x98>)
1000939c:	4798      	blx	r3
1000939e:	4813      	ldr	r0, [pc, #76]	; (100093ec <sms_button_gpio_init+0x9c>)
100093a0:	4b13      	ldr	r3, [pc, #76]	; (100093f0 <sms_button_gpio_init+0xa0>)
100093a2:	4798      	blx	r3
    }

    /* Button 0 on SAMB11 XPLAINED */
    gpio_get_config_defaults(&config_gpio_pin);
100093a4:	ac01      	add	r4, sp, #4
100093a6:	0020      	movs	r0, r4
100093a8:	4b0b      	ldr	r3, [pc, #44]	; (100093d8 <sms_button_gpio_init+0x88>)
100093aa:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
100093ac:	2300      	movs	r3, #0
100093ae:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_NONE;
100093b0:	7063      	strb	r3, [r4, #1]
    if(gpio_pin_set_config(BUTTON_0_PIN, &config_gpio_pin) != STATUS_OK) {
100093b2:	0021      	movs	r1, r4
100093b4:	2017      	movs	r0, #23
100093b6:	4b0a      	ldr	r3, [pc, #40]	; (100093e0 <sms_button_gpio_init+0x90>)
100093b8:	4798      	blx	r3
100093ba:	2800      	cmp	r0, #0
100093bc:	d005      	beq.n	100093ca <sms_button_gpio_init+0x7a>
        DBG_LOG("[sms_button_configure]\tProblem while setting up XPLAINED user button");
100093be:	4809      	ldr	r0, [pc, #36]	; (100093e4 <sms_button_gpio_init+0x94>)
100093c0:	4b09      	ldr	r3, [pc, #36]	; (100093e8 <sms_button_gpio_init+0x98>)
100093c2:	4798      	blx	r3
100093c4:	480b      	ldr	r0, [pc, #44]	; (100093f4 <sms_button_gpio_init+0xa4>)
100093c6:	4b0a      	ldr	r3, [pc, #40]	; (100093f0 <sms_button_gpio_init+0xa0>)
100093c8:	4798      	blx	r3
    }
}
100093ca:	b002      	add	sp, #8
100093cc:	bc1c      	pop	{r2, r3, r4}
100093ce:	4690      	mov	r8, r2
100093d0:	4699      	mov	r9, r3
100093d2:	46a2      	mov	sl, r4
100093d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100093d6:	46c0      	nop			; (mov r8, r8)
100093d8:	1000b685 	.word	0x1000b685
100093dc:	1001a418 	.word	0x1001a418
100093e0:	1000b695 	.word	0x1000b695
100093e4:	10017780 	.word	0x10017780
100093e8:	10016841 	.word	0x10016841
100093ec:	100178ec 	.word	0x100178ec
100093f0:	10016721 	.word	0x10016721
100093f4:	10017924 	.word	0x10017924

100093f8 <sms_button_register_callbacks>:

/* Register button input callbacks */
void sms_button_register_callbacks(void)
{
100093f8:	b570      	push	{r4, r5, r6, lr}
    /* Button0 callback */
    gpio_register_callback(button_instance.btn0.gpio_pin, sms_button_bt0_callback, GPIO_CALLBACK_RISING);
100093fa:	4d05      	ldr	r5, [pc, #20]	; (10009410 <sms_button_register_callbacks+0x18>)
100093fc:	7868      	ldrb	r0, [r5, #1]
100093fe:	2202      	movs	r2, #2
10009400:	4904      	ldr	r1, [pc, #16]	; (10009414 <sms_button_register_callbacks+0x1c>)
10009402:	4c05      	ldr	r4, [pc, #20]	; (10009418 <sms_button_register_callbacks+0x20>)
10009404:	47a0      	blx	r4
    //gpio_enable_callback(SMS_BTN_0_PIN);
    
    /* Button1 callback */
    gpio_register_callback(button_instance.btn1.gpio_pin, sms_button_bt1_callback, GPIO_CALLBACK_RISING);
10009406:	79e8      	ldrb	r0, [r5, #7]
10009408:	2202      	movs	r2, #2
1000940a:	4904      	ldr	r1, [pc, #16]	; (1000941c <sms_button_register_callbacks+0x24>)
1000940c:	47a0      	blx	r4
    //gpio_enable_callback(SMS_BTN_1_PIN);
    
    /* User button callback */
}
1000940e:	bd70      	pop	{r4, r5, r6, pc}
10009410:	1001a418 	.word	0x1001a418
10009414:	100092e9 	.word	0x100092e9
10009418:	1000bac5 	.word	0x1000bac5
1000941c:	10009309 	.word	0x10009309

10009420 <sms_button_get_state>:

/* Get current buttons state */
enum sms_button_state sms_button_get_state(void)
{
10009420:	b570      	push	{r4, r5, r6, lr}
    bool b0 = gpio_pin_get_input_level(SMS_BTN_0_PIN);
10009422:	201f      	movs	r0, #31
10009424:	4c08      	ldr	r4, [pc, #32]	; (10009448 <sms_button_get_state+0x28>)
10009426:	47a0      	blx	r4
10009428:	0005      	movs	r5, r0
    bool b1 = gpio_pin_get_input_level(SMS_BTN_1_PIN);
1000942a:	201d      	movs	r0, #29
1000942c:	47a0      	blx	r4
    DBG_LOG_DEV("[sms_button_get_state]\t\tButton state: %d %d", b1, b0);
    if(b0 && b1) return BUTTON_STATE_BOTH;
1000942e:	2d00      	cmp	r5, #0
10009430:	d004      	beq.n	1000943c <sms_button_get_state+0x1c>
10009432:	2303      	movs	r3, #3
10009434:	2800      	cmp	r0, #0
10009436:	d104      	bne.n	10009442 <sms_button_get_state+0x22>
    else if(b0 && !b1) return BUTTON_STATE_B0;
10009438:	3b02      	subs	r3, #2
1000943a:	e002      	b.n	10009442 <sms_button_get_state+0x22>
    else if(!b0 && b1) return BUTTON_STATE_B1;
    else return BUTTON_STATE_NONE;
1000943c:	1e43      	subs	r3, r0, #1
1000943e:	4198      	sbcs	r0, r3
10009440:	0043      	lsls	r3, r0, #1
}
10009442:	0018      	movs	r0, r3
10009444:	bd70      	pop	{r4, r5, r6, pc}
10009446:	46c0      	nop			; (mov r8, r8)
10009448:	1000b84d 	.word	0x1000b84d

1000944c <sms_button_fn>:

/************************************************************************/
/* Callback functions --> doing things                                  */
/************************************************************************/
int sms_button_fn(enum sms_btn_ids btn)
{
1000944c:	b570      	push	{r4, r5, r6, lr}
1000944e:	0005      	movs	r5, r0
    button_instance.previous_state = button_instance.current_state;
10009450:	4c47      	ldr	r4, [pc, #284]	; (10009570 <sms_button_fn+0x124>)
10009452:	7b63      	ldrb	r3, [r4, #13]
10009454:	7323      	strb	r3, [r4, #12]
    button_instance.current_state = sms_button_get_state();
10009456:	4b47      	ldr	r3, [pc, #284]	; (10009574 <sms_button_fn+0x128>)
10009458:	4798      	blx	r3
1000945a:	7360      	strb	r0, [r4, #13]
    
    if(btn == SMS_BTN_0) sms_monitor_get_states("[sms_button_fn]-0");
1000945c:	2d00      	cmp	r5, #0
1000945e:	d103      	bne.n	10009468 <sms_button_fn+0x1c>
10009460:	4845      	ldr	r0, [pc, #276]	; (10009578 <sms_button_fn+0x12c>)
10009462:	4b46      	ldr	r3, [pc, #280]	; (1000957c <sms_button_fn+0x130>)
10009464:	4798      	blx	r3
10009466:	e004      	b.n	10009472 <sms_button_fn+0x26>
    else if(btn == SMS_BTN_1) sms_monitor_get_states("[sms_button_fn]-1");
10009468:	2d01      	cmp	r5, #1
1000946a:	d175      	bne.n	10009558 <sms_button_fn+0x10c>
1000946c:	4844      	ldr	r0, [pc, #272]	; (10009580 <sms_button_fn+0x134>)
1000946e:	4b43      	ldr	r3, [pc, #268]	; (1000957c <sms_button_fn+0x130>)
10009470:	4798      	blx	r3
    else return -1;
    
    switch(button_instance.current_state) {
10009472:	4b3f      	ldr	r3, [pc, #252]	; (10009570 <sms_button_fn+0x124>)
10009474:	7b5b      	ldrb	r3, [r3, #13]
10009476:	2b01      	cmp	r3, #1
10009478:	d006      	beq.n	10009488 <sms_button_fn+0x3c>
1000947a:	2b00      	cmp	r3, #0
1000947c:	d067      	beq.n	1000954e <sms_button_fn+0x102>
1000947e:	2b02      	cmp	r3, #2
10009480:	d024      	beq.n	100094cc <sms_button_fn+0x80>
10009482:	2b03      	cmp	r3, #3
10009484:	d043      	beq.n	1000950e <sms_button_fn+0xc2>
10009486:	e06a      	b.n	1000955e <sms_button_fn+0x112>
        // --- current state ---
        case BUTTON_STATE_B0:
        switch(ble_instance.current_state) {
10009488:	4b3e      	ldr	r3, [pc, #248]	; (10009584 <sms_button_fn+0x138>)
1000948a:	781b      	ldrb	r3, [r3, #0]
1000948c:	b2db      	uxtb	r3, r3
1000948e:	2b00      	cmp	r3, #0
10009490:	d003      	beq.n	1000949a <sms_button_fn+0x4e>
10009492:	3b22      	subs	r3, #34	; 0x22
10009494:	2b01      	cmp	r3, #1
10009496:	d864      	bhi.n	10009562 <sms_button_fn+0x116>
10009498:	e00e      	b.n	100094b8 <sms_button_fn+0x6c>
            case BLE_STATE_POWEROFF:
            timer1_current_mode = TIMER1_MODE_STARTUP;
1000949a:	2201      	movs	r2, #1
1000949c:	4b3a      	ldr	r3, [pc, #232]	; (10009588 <sms_button_fn+0x13c>)
1000949e:	701a      	strb	r2, [r3, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
100094a0:	2300      	movs	r3, #0
100094a2:	4a3a      	ldr	r2, [pc, #232]	; (1000958c <sms_button_fn+0x140>)
100094a4:	7013      	strb	r3, [r2, #0]
            sms_btn_cnt = 0;
100094a6:	4a3a      	ldr	r2, [pc, #232]	; (10009590 <sms_button_fn+0x144>)
100094a8:	7013      	strb	r3, [r2, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
100094aa:	2200      	movs	r2, #0
100094ac:	21fa      	movs	r1, #250	; 0xfa
100094ae:	2001      	movs	r0, #1
100094b0:	4b38      	ldr	r3, [pc, #224]	; (10009594 <sms_button_fn+0x148>)
100094b2:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
100094b4:	2000      	movs	r0, #0
            timer1_current_mode = TIMER1_MODE_STARTUP;
            timer2_current_mode = TIMER2_MODE_NONE;
            sms_btn_cnt = 0;
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
            break;
100094b6:	e059      	b.n	1000956c <sms_button_fn+0x120>
            case BLE_STATE_INDICATING:
            //if(pressure_device.state == PRESSURE_STATE_STDBY) {
                //DBG_LOG_DEV("[sms_button_fn]\t\tStarting sensors (B0)");
                //sms_sensors_interrupt_toggle(false, true);
            //}
            timer1_current_mode = TIMER1_MODE_NONE;
100094b8:	2300      	movs	r3, #0
100094ba:	4a33      	ldr	r2, [pc, #204]	; (10009588 <sms_button_fn+0x13c>)
100094bc:	7013      	strb	r3, [r2, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
100094be:	4a33      	ldr	r2, [pc, #204]	; (1000958c <sms_button_fn+0x140>)
100094c0:	7013      	strb	r3, [r2, #0]
			sms_ble_send_characteristic(BLE_CHAR_BTN);
100094c2:	2000      	movs	r0, #0
100094c4:	4b34      	ldr	r3, [pc, #208]	; (10009598 <sms_button_fn+0x14c>)
100094c6:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
100094c8:	2000      	movs	r0, #0
                //sms_sensors_interrupt_toggle(false, true);
            //}
            timer1_current_mode = TIMER1_MODE_NONE;
            timer2_current_mode = TIMER2_MODE_NONE;
			sms_ble_send_characteristic(BLE_CHAR_BTN);
            break;
100094ca:	e04f      	b.n	1000956c <sms_button_fn+0x120>
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        break;
        
        // --- current state ---
        case BUTTON_STATE_B1:
        switch(ble_instance.current_state) {
100094cc:	4b2d      	ldr	r3, [pc, #180]	; (10009584 <sms_button_fn+0x138>)
100094ce:	781b      	ldrb	r3, [r3, #0]
100094d0:	b2db      	uxtb	r3, r3
100094d2:	2b00      	cmp	r3, #0
100094d4:	d002      	beq.n	100094dc <sms_button_fn+0x90>
100094d6:	2b22      	cmp	r3, #34	; 0x22
100094d8:	d00f      	beq.n	100094fa <sms_button_fn+0xae>
100094da:	e045      	b.n	10009568 <sms_button_fn+0x11c>
            case BLE_STATE_POWEROFF:
            timer1_current_mode = TIMER1_MODE_STARTUP;
100094dc:	2201      	movs	r2, #1
100094de:	4b2a      	ldr	r3, [pc, #168]	; (10009588 <sms_button_fn+0x13c>)
100094e0:	701a      	strb	r2, [r3, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
100094e2:	2300      	movs	r3, #0
100094e4:	4a29      	ldr	r2, [pc, #164]	; (1000958c <sms_button_fn+0x140>)
100094e6:	7013      	strb	r3, [r2, #0]
            sms_btn_cnt = 0;
100094e8:	4a29      	ldr	r2, [pc, #164]	; (10009590 <sms_button_fn+0x144>)
100094ea:	7013      	strb	r3, [r2, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
100094ec:	2200      	movs	r2, #0
100094ee:	21fa      	movs	r1, #250	; 0xfa
100094f0:	2001      	movs	r0, #1
100094f2:	4b28      	ldr	r3, [pc, #160]	; (10009594 <sms_button_fn+0x148>)
100094f4:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
100094f6:	2000      	movs	r0, #0
            timer1_current_mode = TIMER1_MODE_STARTUP;
            timer2_current_mode = TIMER2_MODE_NONE;
            sms_btn_cnt = 0;
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
            break;
100094f8:	e038      	b.n	1000956c <sms_button_fn+0x120>
            case BLE_STATE_PAIRED:
            //if(pressure_device.state == PRESSURE_STATE_STDBY) {
                //DBG_LOG_DEV("[sms_button_fn]\t\tStarting sensors (B1)");
                //sms_sensors_interrupt_toggle(false, true);
            //}
            timer1_current_mode = TIMER1_MODE_NONE;
100094fa:	2300      	movs	r3, #0
100094fc:	4a22      	ldr	r2, [pc, #136]	; (10009588 <sms_button_fn+0x13c>)
100094fe:	7013      	strb	r3, [r2, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
10009500:	4a22      	ldr	r2, [pc, #136]	; (1000958c <sms_button_fn+0x140>)
10009502:	7013      	strb	r3, [r2, #0]
            //sms_ble_ind_retry = 0;
            sms_ble_send_characteristic(BLE_CHAR_BTN);
10009504:	2000      	movs	r0, #0
10009506:	4b24      	ldr	r3, [pc, #144]	; (10009598 <sms_button_fn+0x14c>)
10009508:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000950a:	2000      	movs	r0, #0
            //}
            timer1_current_mode = TIMER1_MODE_NONE;
            timer2_current_mode = TIMER2_MODE_NONE;
            //sms_ble_ind_retry = 0;
            sms_ble_send_characteristic(BLE_CHAR_BTN);
            break;
1000950c:	e02e      	b.n	1000956c <sms_button_fn+0x120>
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        break;
        
        // --- current state ---
        case BUTTON_STATE_BOTH:
        if(ble_instance.current_state == BLE_STATE_POWEROFF) {
1000950e:	4b1d      	ldr	r3, [pc, #116]	; (10009584 <sms_button_fn+0x138>)
10009510:	781b      	ldrb	r3, [r3, #0]
10009512:	2b00      	cmp	r3, #0
10009514:	d108      	bne.n	10009528 <sms_button_fn+0xdc>
            timer1_current_mode = TIMER1_MODE_NONE;
10009516:	4a1c      	ldr	r2, [pc, #112]	; (10009588 <sms_button_fn+0x13c>)
10009518:	7013      	strb	r3, [r2, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
1000951a:	4a1c      	ldr	r2, [pc, #112]	; (1000958c <sms_button_fn+0x140>)
1000951c:	7013      	strb	r3, [r2, #0]
            ulp_ready = true;
1000951e:	2201      	movs	r2, #1
10009520:	4b1e      	ldr	r3, [pc, #120]	; (1000959c <sms_button_fn+0x150>)
10009522:	701a      	strb	r2, [r3, #0]
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
10009524:	2000      	movs	r0, #0
10009526:	e021      	b.n	1000956c <sms_button_fn+0x120>
                //pressure_device.state = PRESSURE_STATE_STDBY;
            //}
            //else {
                //pressure_device.state = PRESSURE_STATE_OFF;
            //}
            sms_sensors_interrupt_toggle(false, false);
10009528:	2100      	movs	r1, #0
1000952a:	2000      	movs	r0, #0
1000952c:	4b1c      	ldr	r3, [pc, #112]	; (100095a0 <sms_button_fn+0x154>)
1000952e:	4798      	blx	r3
            timer1_current_mode = TIMER1_MODE_SHUTDOWN;
10009530:	2202      	movs	r2, #2
10009532:	4b15      	ldr	r3, [pc, #84]	; (10009588 <sms_button_fn+0x13c>)
10009534:	701a      	strb	r2, [r3, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
10009536:	2300      	movs	r3, #0
10009538:	4a14      	ldr	r2, [pc, #80]	; (1000958c <sms_button_fn+0x140>)
1000953a:	7013      	strb	r3, [r2, #0]
            sms_btn_cnt = 0;
1000953c:	4a14      	ldr	r2, [pc, #80]	; (10009590 <sms_button_fn+0x144>)
1000953e:	7013      	strb	r3, [r2, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_SHTDWN_MS, DUALTIMER_TIMER1);
10009540:	2200      	movs	r2, #0
10009542:	21fa      	movs	r1, #250	; 0xfa
10009544:	2001      	movs	r0, #1
10009546:	4b13      	ldr	r3, [pc, #76]	; (10009594 <sms_button_fn+0x148>)
10009548:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000954a:	2000      	movs	r0, #0
1000954c:	e00e      	b.n	1000956c <sms_button_fn+0x120>
        }
        break;
        
        // --- current state ---
        case BUTTON_STATE_NONE:
        ulp_ready = true;
1000954e:	2201      	movs	r2, #1
10009550:	4b12      	ldr	r3, [pc, #72]	; (1000959c <sms_button_fn+0x150>)
10009552:	701a      	strb	r2, [r3, #0]
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
10009554:	2000      	movs	r0, #0
        // --- current state ---
        case BUTTON_STATE_NONE:
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
10009556:	e009      	b.n	1000956c <sms_button_fn+0x120>
    button_instance.previous_state = button_instance.current_state;
    button_instance.current_state = sms_button_get_state();
    
    if(btn == SMS_BTN_0) sms_monitor_get_states("[sms_button_fn]-0");
    else if(btn == SMS_BTN_1) sms_monitor_get_states("[sms_button_fn]-1");
    else return -1;
10009558:	2001      	movs	r0, #1
1000955a:	4240      	negs	r0, r0
1000955c:	e006      	b.n	1000956c <sms_button_fn+0x120>
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000955e:	2000      	movs	r0, #0
10009560:	e004      	b.n	1000956c <sms_button_fn+0x120>
            case BLE_STATE_DISCONNECTED:
            case BLE_STATE_ADVERTISING:
            case BLE_STATE_CONNECTED:
            default:
            DBG_LOG_DEV("[sms_button_fn]\t\t\tNot used states...");
            return -1;
10009562:	2001      	movs	r0, #1
10009564:	4240      	negs	r0, r0
10009566:	e001      	b.n	1000956c <sms_button_fn+0x120>
            sms_ble_send_characteristic(BLE_CHAR_BTN);
            break;
            
            case BLE_STATE_INDICATING:
            DBG_LOG_DEV("[sms_button_fn]\tStill indicating...");
            return -1;
10009568:	2001      	movs	r0, #1
1000956a:	4240      	negs	r0, r0
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
}
1000956c:	bd70      	pop	{r4, r5, r6, pc}
1000956e:	46c0      	nop			; (mov r8, r8)
10009570:	1001a418 	.word	0x1001a418
10009574:	10009421 	.word	0x10009421
10009578:	1001796c 	.word	0x1001796c
1000957c:	100096b9 	.word	0x100096b9
10009580:	10017980 	.word	0x10017980
10009584:	1001a414 	.word	0x1001a414
10009588:	1001a408 	.word	0x1001a408
1000958c:	1001a537 	.word	0x1001a537
10009590:	1001a632 	.word	0x1001a632
10009594:	1000ac21 	.word	0x1000ac21
10009598:	10009055 	.word	0x10009055
1000959c:	1001a411 	.word	0x1001a411
100095a0:	1000a9b9 	.word	0x1000a9b9

100095a4 <sms_button_toggle_callback>:
    else return BUTTON_STATE_NONE;
}

/* En- or disable button interrupts */
void sms_button_toggle_callback(enum sms_btn_int_tog tog0, enum sms_btn_int_tog tog1)
{
100095a4:	b510      	push	{r4, lr}
100095a6:	000c      	movs	r4, r1
    if(tog0 == SMS_BTN_INT_ENABLE) {
100095a8:	2800      	cmp	r0, #0
100095aa:	d104      	bne.n	100095b6 <sms_button_toggle_callback+0x12>
        gpio_enable_callback(button_instance.btn0.gpio_pin);
100095ac:	4b0c      	ldr	r3, [pc, #48]	; (100095e0 <sms_button_toggle_callback+0x3c>)
100095ae:	7858      	ldrb	r0, [r3, #1]
100095b0:	4b0c      	ldr	r3, [pc, #48]	; (100095e4 <sms_button_toggle_callback+0x40>)
100095b2:	4798      	blx	r3
100095b4:	e005      	b.n	100095c2 <sms_button_toggle_callback+0x1e>
    }
    else if(tog0 == SMS_BTN_INT_DISABLE) {
100095b6:	2801      	cmp	r0, #1
100095b8:	d103      	bne.n	100095c2 <sms_button_toggle_callback+0x1e>
        gpio_disable_callback(button_instance.btn0.gpio_pin);
100095ba:	4b09      	ldr	r3, [pc, #36]	; (100095e0 <sms_button_toggle_callback+0x3c>)
100095bc:	7858      	ldrb	r0, [r3, #1]
100095be:	4b0a      	ldr	r3, [pc, #40]	; (100095e8 <sms_button_toggle_callback+0x44>)
100095c0:	4798      	blx	r3
    }
    
    if(tog1 == SMS_BTN_INT_ENABLE) {
100095c2:	2c00      	cmp	r4, #0
100095c4:	d104      	bne.n	100095d0 <sms_button_toggle_callback+0x2c>
        gpio_enable_callback(button_instance.btn1.gpio_pin);
100095c6:	4b06      	ldr	r3, [pc, #24]	; (100095e0 <sms_button_toggle_callback+0x3c>)
100095c8:	79d8      	ldrb	r0, [r3, #7]
100095ca:	4b06      	ldr	r3, [pc, #24]	; (100095e4 <sms_button_toggle_callback+0x40>)
100095cc:	4798      	blx	r3
100095ce:	e005      	b.n	100095dc <sms_button_toggle_callback+0x38>
    }
    else if(tog1 == SMS_BTN_INT_DISABLE) {
100095d0:	2c01      	cmp	r4, #1
100095d2:	d103      	bne.n	100095dc <sms_button_toggle_callback+0x38>
        gpio_disable_callback(button_instance.btn1.gpio_pin);
100095d4:	4b02      	ldr	r3, [pc, #8]	; (100095e0 <sms_button_toggle_callback+0x3c>)
100095d6:	79d8      	ldrb	r0, [r3, #7]
100095d8:	4b03      	ldr	r3, [pc, #12]	; (100095e8 <sms_button_toggle_callback+0x44>)
100095da:	4798      	blx	r3
    }
}
100095dc:	bd10      	pop	{r4, pc}
100095de:	46c0      	nop			; (mov r8, r8)
100095e0:	1001a418 	.word	0x1001a418
100095e4:	1000bb95 	.word	0x1000bb95
100095e8:	1000bbf1 	.word	0x1000bbf1

100095ec <sms_button_define_services>:
    send_plf_int_msg_ind(button_instance.btn1.gpio_pin, GPIO_CALLBACK_RISING, NULL, 0);
}

/* Define BLE service for buttons */
void sms_button_define_services(void)
{
100095ec:	b510      	push	{r4, lr}
100095ee:	b082      	sub	sp, #8
    at_ble_status_t status;
    uint8_t init_value = 0;
100095f0:	466b      	mov	r3, sp
100095f2:	1dda      	adds	r2, r3, #7
100095f4:	2300      	movs	r3, #0
100095f6:	7013      	strb	r3, [r2, #0]
    sms_ble_service_init(BLE_SERV_BUTTON, &button_instance.service_handler, &init_value);
100095f8:	4c09      	ldr	r4, [pc, #36]	; (10009620 <sms_button_define_services+0x34>)
100095fa:	0021      	movs	r1, r4
100095fc:	2000      	movs	r0, #0
100095fe:	4b09      	ldr	r3, [pc, #36]	; (10009624 <sms_button_define_services+0x38>)
10009600:	4798      	blx	r3
    if((status = sms_ble_primary_service_define(&button_instance.service_handler)) != AT_BLE_SUCCESS) {
10009602:	0020      	movs	r0, r4
10009604:	4b08      	ldr	r3, [pc, #32]	; (10009628 <sms_button_define_services+0x3c>)
10009606:	4798      	blx	r3
10009608:	1e04      	subs	r4, r0, #0
1000960a:	d006      	beq.n	1000961a <sms_button_define_services+0x2e>
        DBG_LOG("[sms_button_define_services]\tServices defining failed, reason 0x%x", status);
1000960c:	4807      	ldr	r0, [pc, #28]	; (1000962c <sms_button_define_services+0x40>)
1000960e:	4b08      	ldr	r3, [pc, #32]	; (10009630 <sms_button_define_services+0x44>)
10009610:	4798      	blx	r3
10009612:	0021      	movs	r1, r4
10009614:	4807      	ldr	r0, [pc, #28]	; (10009634 <sms_button_define_services+0x48>)
10009616:	4b08      	ldr	r3, [pc, #32]	; (10009638 <sms_button_define_services+0x4c>)
10009618:	4798      	blx	r3
    }
    else {
        DBG_LOG_DEV("[sms_button_define_services]\tServices defined, SMS button handle: %d", button_instance.service_handler.serv_handle);
    }
1000961a:	b002      	add	sp, #8
1000961c:	bd10      	pop	{r4, pc}
1000961e:	46c0      	nop			; (mov r8, r8)
10009620:	1001a428 	.word	0x1001a428
10009624:	10009201 	.word	0x10009201
10009628:	100091dd 	.word	0x100091dd
1000962c:	10017780 	.word	0x10017780
10009630:	10016841 	.word	0x10016841
10009634:	10017994 	.word	0x10017994
10009638:	10016721 	.word	0x10016721

1000963c <sms_monitor_configure_gpio>:

#include "sms_common.h"

/* General functions */
void sms_monitor_configure_gpio(void)
{
1000963c:	b510      	push	{r4, lr}
1000963e:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;
    gpio_get_config_defaults(&config_gpio_pin);
10009640:	ac01      	add	r4, sp, #4
10009642:	0020      	movs	r0, r4
10009644:	4b15      	ldr	r3, [pc, #84]	; (1000969c <sms_monitor_configure_gpio+0x60>)
10009646:	4798      	blx	r3
    config_gpio_pin.direction  = GPIO_PIN_DIR_OUTPUT;
10009648:	2301      	movs	r3, #1
1000964a:	7023      	strb	r3, [r4, #0]
    if(gpio_pin_set_config(DBG_PIN_1, &config_gpio_pin) != STATUS_OK) {
1000964c:	0021      	movs	r1, r4
1000964e:	200e      	movs	r0, #14
10009650:	4b13      	ldr	r3, [pc, #76]	; (100096a0 <sms_monitor_configure_gpio+0x64>)
10009652:	4798      	blx	r3
10009654:	2800      	cmp	r0, #0
10009656:	d005      	beq.n	10009664 <sms_monitor_configure_gpio+0x28>
        DBG_LOG("Problem while setting gpio pin");
10009658:	4812      	ldr	r0, [pc, #72]	; (100096a4 <sms_monitor_configure_gpio+0x68>)
1000965a:	4b13      	ldr	r3, [pc, #76]	; (100096a8 <sms_monitor_configure_gpio+0x6c>)
1000965c:	4798      	blx	r3
1000965e:	4813      	ldr	r0, [pc, #76]	; (100096ac <sms_monitor_configure_gpio+0x70>)
10009660:	4b13      	ldr	r3, [pc, #76]	; (100096b0 <sms_monitor_configure_gpio+0x74>)
10009662:	4798      	blx	r3
    }
    gpio_pin_set_output_level(DBG_PIN_1, DBG_PIN_LOW);
10009664:	2100      	movs	r1, #0
10009666:	200e      	movs	r0, #14
10009668:	4b12      	ldr	r3, [pc, #72]	; (100096b4 <sms_monitor_configure_gpio+0x78>)
1000966a:	4798      	blx	r3
	
	gpio_get_config_defaults(&config_gpio_pin);
1000966c:	ac01      	add	r4, sp, #4
1000966e:	0020      	movs	r0, r4
10009670:	4b0a      	ldr	r3, [pc, #40]	; (1000969c <sms_monitor_configure_gpio+0x60>)
10009672:	4798      	blx	r3
	config_gpio_pin.direction = GPIO_PIN_DIR_OUTPUT;
10009674:	2301      	movs	r3, #1
10009676:	7023      	strb	r3, [r4, #0]
	if(gpio_pin_set_config(DBG_PIN_2, &config_gpio_pin) != STATUS_OK) {
10009678:	0021      	movs	r1, r4
1000967a:	200f      	movs	r0, #15
1000967c:	4b08      	ldr	r3, [pc, #32]	; (100096a0 <sms_monitor_configure_gpio+0x64>)
1000967e:	4798      	blx	r3
10009680:	2800      	cmp	r0, #0
10009682:	d005      	beq.n	10009690 <sms_monitor_configure_gpio+0x54>
		DBG_LOG("Problem while setting gpio pin");
10009684:	4807      	ldr	r0, [pc, #28]	; (100096a4 <sms_monitor_configure_gpio+0x68>)
10009686:	4b08      	ldr	r3, [pc, #32]	; (100096a8 <sms_monitor_configure_gpio+0x6c>)
10009688:	4798      	blx	r3
1000968a:	4808      	ldr	r0, [pc, #32]	; (100096ac <sms_monitor_configure_gpio+0x70>)
1000968c:	4b08      	ldr	r3, [pc, #32]	; (100096b0 <sms_monitor_configure_gpio+0x74>)
1000968e:	4798      	blx	r3
	}
	gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_LOW);
10009690:	2100      	movs	r1, #0
10009692:	200f      	movs	r0, #15
10009694:	4b07      	ldr	r3, [pc, #28]	; (100096b4 <sms_monitor_configure_gpio+0x78>)
10009696:	4798      	blx	r3
}
10009698:	b002      	add	sp, #8
1000969a:	bd10      	pop	{r4, pc}
1000969c:	1000b685 	.word	0x1000b685
100096a0:	1000b695 	.word	0x1000b695
100096a4:	10017780 	.word	0x10017780
100096a8:	10016841 	.word	0x10016841
100096ac:	100179d8 	.word	0x100179d8
100096b0:	10016721 	.word	0x10016721
100096b4:	1000b8ed 	.word	0x1000b8ed

100096b8 <sms_monitor_get_states>:

void sms_monitor_get_states(const char *label)
{
    DBG_LOG_DEV("%s...\t\tB-prev %d, B-cur %d, BLE 0x%02x, T1 %d, T2 %d, SMS %d", label, button_instance.previous_state, button_instance.current_state, ble_instance.current_state, timer1_current_mode, timer2_current_mode, sms_working_mode);
100096b8:	4b04      	ldr	r3, [pc, #16]	; (100096cc <sms_monitor_get_states+0x14>)
100096ba:	781b      	ldrb	r3, [r3, #0]
100096bc:	4b04      	ldr	r3, [pc, #16]	; (100096d0 <sms_monitor_get_states+0x18>)
100096be:	781b      	ldrb	r3, [r3, #0]
100096c0:	4b04      	ldr	r3, [pc, #16]	; (100096d4 <sms_monitor_get_states+0x1c>)
100096c2:	781b      	ldrb	r3, [r3, #0]
100096c4:	4b04      	ldr	r3, [pc, #16]	; (100096d8 <sms_monitor_get_states+0x20>)
100096c6:	781b      	ldrb	r3, [r3, #0]
}
100096c8:	4770      	bx	lr
100096ca:	46c0      	nop			; (mov r8, r8)
100096cc:	1001a414 	.word	0x1001a414
100096d0:	1001a408 	.word	0x1001a408
100096d4:	1001a537 	.word	0x1001a537
100096d8:	1001a410 	.word	0x1001a410

100096dc <sms_i2c_master_configure>:
#include <stdlib.h>
#include "sms_i2c.h"


void sms_i2c_master_configure(void)
{
100096dc:	b530      	push	{r4, r5, lr}
100096de:	b087      	sub	sp, #28
    i2c_wpacket.data = malloc(I2C_DATA_LENGTH * sizeof(uint8_t));
100096e0:	2010      	movs	r0, #16
100096e2:	4c14      	ldr	r4, [pc, #80]	; (10009734 <sms_i2c_master_configure+0x58>)
100096e4:	47a0      	blx	r4
100096e6:	4b14      	ldr	r3, [pc, #80]	; (10009738 <sms_i2c_master_configure+0x5c>)
100096e8:	6058      	str	r0, [r3, #4]
    i2c_rpacket.data = malloc(I2C_DATA_LENGTH * sizeof(uint8_t));
100096ea:	2010      	movs	r0, #16
100096ec:	47a0      	blx	r4
100096ee:	4b13      	ldr	r3, [pc, #76]	; (1000973c <sms_i2c_master_configure+0x60>)
100096f0:	6058      	str	r0, [r3, #4]

    struct i2c_master_config config_i2c_master;
    i2c_master_get_config_defaults(&config_i2c_master);
100096f2:	ac01      	add	r4, sp, #4
100096f4:	0020      	movs	r0, r4
100096f6:	4b12      	ldr	r3, [pc, #72]	; (10009740 <sms_i2c_master_configure+0x64>)
100096f8:	4798      	blx	r3
    config_i2c_master.clock_source = SMS_I2C_MASTER_CLK_SRC;
100096fa:	2303      	movs	r3, #3
100096fc:	7023      	strb	r3, [r4, #0]
    config_i2c_master.clock_divider = SMS_I2C_MASTER_CLK_DIV;
100096fe:	331b      	adds	r3, #27
10009700:	8063      	strh	r3, [r4, #2]
    config_i2c_master.pin_number_pad0 = SMS_I2C_MASTER_PIN_SDA;
10009702:	3b16      	subs	r3, #22
10009704:	6063      	str	r3, [r4, #4]
    config_i2c_master.pin_number_pad1 = SMS_I2C_MASTER_PIN_SCL;
10009706:	3301      	adds	r3, #1
10009708:	60e3      	str	r3, [r4, #12]
    config_i2c_master.pinmux_sel_pad0 = SMS_I2C_MASTER_MUX_SDA;
1000970a:	3b07      	subs	r3, #7
1000970c:	60a3      	str	r3, [r4, #8]
    config_i2c_master.pinmux_sel_pad1 = SMS_I2C_MASTER_MUX_SCL;
1000970e:	6123      	str	r3, [r4, #16]
    while(i2c_master_init(&i2c_master_instance, SMS_I2C_MASTER_PORT, &config_i2c_master) != STATUS_OK);
10009710:	4d0c      	ldr	r5, [pc, #48]	; (10009744 <sms_i2c_master_configure+0x68>)
10009712:	4c0d      	ldr	r4, [pc, #52]	; (10009748 <sms_i2c_master_configure+0x6c>)
10009714:	aa01      	add	r2, sp, #4
10009716:	490d      	ldr	r1, [pc, #52]	; (1000974c <sms_i2c_master_configure+0x70>)
10009718:	0028      	movs	r0, r5
1000971a:	47a0      	blx	r4
1000971c:	2800      	cmp	r0, #0
1000971e:	d1f9      	bne.n	10009714 <sms_i2c_master_configure+0x38>

    i2c_enable(i2c_master_instance.hw);
10009720:	4b08      	ldr	r3, [pc, #32]	; (10009744 <sms_i2c_master_configure+0x68>)
10009722:	681a      	ldr	r2, [r3, #0]
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2c *const i2c_module)
{
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
10009724:	2128      	movs	r1, #40	; 0x28
10009726:	5c53      	ldrb	r3, [r2, r1]
10009728:	07db      	lsls	r3, r3, #31
1000972a:	d4fc      	bmi.n	10009726 <sms_i2c_master_configure+0x4a>
static inline void i2c_enable(I2c *const i2c_module)
{
	/* Wait for module to sync. */
	i2c_wait_for_idle(i2c_module);
	/* Enable module. */
	i2c_module->I2C_MODULE_ENABLE.reg = (1 << I2C_MODULE_ENABLE_ENABLE_Pos);
1000972c:	2301      	movs	r3, #1
1000972e:	7513      	strb	r3, [r2, #20]
}
10009730:	b007      	add	sp, #28
10009732:	bd30      	pop	{r4, r5, pc}
10009734:	10016595 	.word	0x10016595
10009738:	1001a53c 	.word	0x1001a53c
1000973c:	1001a520 	.word	0x1001a520
10009740:	10008305 	.word	0x10008305
10009744:	1001a52c 	.word	0x1001a52c
10009748:	1000831d 	.word	0x1000831d
1000974c:	40003000 	.word	0x40003000

10009750 <sms_i2c_master_write>:

int sms_i2c_master_write(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t const *data)
{
10009750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    //DBG_LOG_DEV("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
10009752:	4c12      	ldr	r4, [pc, #72]	; (1000979c <sms_i2c_master_write+0x4c>)
10009754:	8020      	strh	r0, [r4, #0]
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
10009756:	1c50      	adds	r0, r2, #1
10009758:	b2c0      	uxtb	r0, r0
1000975a:	8060      	strh	r0, [r4, #2]
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
1000975c:	6860      	ldr	r0, [r4, #4]
1000975e:	7001      	strb	r1, [r0, #0]
    for(uint8_t i = 0; i < data_len; i++) {
10009760:	2a00      	cmp	r2, #0
10009762:	d00e      	beq.n	10009782 <sms_i2c_master_write+0x32>
10009764:	2000      	movs	r0, #0
10009766:	1c41      	adds	r1, r0, #1
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
10009768:	5c18      	ldrb	r0, [r3, r0]
1000976a:	6865      	ldr	r5, [r4, #4]
1000976c:	5468      	strb	r0, [r5, r1]
1000976e:	0008      	movs	r0, r1
    //DBG_LOG_DEV("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    for(uint8_t i = 0; i < data_len; i++) {
10009770:	b2c9      	uxtb	r1, r1
10009772:	428a      	cmp	r2, r1
10009774:	d8f7      	bhi.n	10009766 <sms_i2c_master_write+0x16>
10009776:	e004      	b.n	10009782 <sms_i2c_master_write+0x32>
10009778:	3c01      	subs	r4, #1
1000977a:	b2a4      	uxth	r4, r4
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
        //DBG_LOG_CONT_DEV("0x%02x ", i2c_wpacket.data[i+1]);
    }
    while (i2c_master_write_packet_wait(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
        /* Increment timeout counter and check if timed out. */
        if (timeout++ >= I2C_TIMEOUT) {
1000977c:	2c00      	cmp	r4, #0
1000977e:	d104      	bne.n	1000978a <sms_i2c_master_write+0x3a>
10009780:	e009      	b.n	10009796 <sms_i2c_master_write+0x46>
    //DBG_LOG_DEV("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    for(uint8_t i = 0; i < data_len; i++) {
10009782:	4c07      	ldr	r4, [pc, #28]	; (100097a0 <sms_i2c_master_write+0x50>)
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
        //DBG_LOG_CONT_DEV("0x%02x ", i2c_wpacket.data[i+1]);
    }
    while (i2c_master_write_packet_wait(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
10009784:	4e05      	ldr	r6, [pc, #20]	; (1000979c <sms_i2c_master_write+0x4c>)
10009786:	4d07      	ldr	r5, [pc, #28]	; (100097a4 <sms_i2c_master_write+0x54>)
10009788:	4f07      	ldr	r7, [pc, #28]	; (100097a8 <sms_i2c_master_write+0x58>)
1000978a:	0031      	movs	r1, r6
1000978c:	0028      	movs	r0, r5
1000978e:	47b8      	blx	r7
10009790:	2800      	cmp	r0, #0
10009792:	d1f1      	bne.n	10009778 <sms_i2c_master_write+0x28>
10009794:	e001      	b.n	1000979a <sms_i2c_master_write+0x4a>
        /* Increment timeout counter and check if timed out. */
        if (timeout++ >= I2C_TIMEOUT) {
            return -1;
10009796:	2001      	movs	r0, #1
10009798:	4240      	negs	r0, r0
        }
    }
    return 0;
}
1000979a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000979c:	1001a53c 	.word	0x1001a53c
100097a0:	000003e9 	.word	0x000003e9
100097a4:	1001a52c 	.word	0x1001a52c
100097a8:	100083b5 	.word	0x100083b5

100097ac <sms_i2c_master_read>:

int sms_i2c_master_read(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t *data)
{
100097ac:	b5f0      	push	{r4, r5, r6, r7, lr}
100097ae:	4647      	mov	r7, r8
100097b0:	b480      	push	{r7}
100097b2:	0017      	movs	r7, r2
100097b4:	4698      	mov	r8, r3
    //DBG_LOG("i2c reading from 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout;
    i2c_wpacket.address = (uint8_t)slave_addr;
100097b6:	b280      	uxth	r0, r0
100097b8:	4b1d      	ldr	r3, [pc, #116]	; (10009830 <sms_i2c_master_read+0x84>)
100097ba:	8018      	strh	r0, [r3, #0]
    i2c_wpacket.data_length = 1;
100097bc:	2201      	movs	r2, #1
100097be:	805a      	strh	r2, [r3, #2]
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
100097c0:	685b      	ldr	r3, [r3, #4]
100097c2:	7019      	strb	r1, [r3, #0]
    i2c_rpacket.address = (uint8_t)slave_addr;
100097c4:	4b1b      	ldr	r3, [pc, #108]	; (10009834 <sms_i2c_master_read+0x88>)
100097c6:	8018      	strh	r0, [r3, #0]
    i2c_rpacket.data_length = (uint8_t)data_len;
100097c8:	805f      	strh	r7, [r3, #2]
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
100097ca:	4c1b      	ldr	r4, [pc, #108]	; (10009838 <sms_i2c_master_read+0x8c>)
100097cc:	4e18      	ldr	r6, [pc, #96]	; (10009830 <sms_i2c_master_read+0x84>)
100097ce:	4d1b      	ldr	r5, [pc, #108]	; (1000983c <sms_i2c_master_read+0x90>)
100097d0:	e003      	b.n	100097da <sms_i2c_master_read+0x2e>
100097d2:	3c01      	subs	r4, #1
100097d4:	b2a4      	uxth	r4, r4
		//DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
100097d6:	2c00      	cmp	r4, #0
100097d8:	d01f      	beq.n	1000981a <sms_i2c_master_read+0x6e>
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    i2c_rpacket.address = (uint8_t)slave_addr;
    i2c_rpacket.data_length = (uint8_t)data_len;
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
100097da:	0031      	movs	r1, r6
100097dc:	4818      	ldr	r0, [pc, #96]	; (10009840 <sms_i2c_master_read+0x94>)
100097de:	47a8      	blx	r5
100097e0:	2800      	cmp	r0, #0
100097e2:	d1f6      	bne.n	100097d2 <sms_i2c_master_read+0x26>
100097e4:	4e14      	ldr	r6, [pc, #80]	; (10009838 <sms_i2c_master_read+0x8c>)
            return -1;
        }
    }
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
100097e6:	4d13      	ldr	r5, [pc, #76]	; (10009834 <sms_i2c_master_read+0x88>)
100097e8:	4c16      	ldr	r4, [pc, #88]	; (10009844 <sms_i2c_master_read+0x98>)
100097ea:	e003      	b.n	100097f4 <sms_i2c_master_read+0x48>
100097ec:	3e01      	subs	r6, #1
100097ee:	b2b6      	uxth	r6, r6
		//DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
100097f0:	2e00      	cmp	r6, #0
100097f2:	d015      	beq.n	10009820 <sms_i2c_master_read+0x74>
            return -1;
        }
    }
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
100097f4:	0029      	movs	r1, r5
100097f6:	4812      	ldr	r0, [pc, #72]	; (10009840 <sms_i2c_master_read+0x94>)
100097f8:	47a0      	blx	r4
100097fa:	2800      	cmp	r0, #0
100097fc:	d1f6      	bne.n	100097ec <sms_i2c_master_read+0x40>
		//DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
        }
    }
    for(uint8_t i = 0; i < data_len; i++) {
100097fe:	2f00      	cmp	r7, #0
10009800:	d011      	beq.n	10009826 <sms_i2c_master_read+0x7a>
10009802:	2300      	movs	r3, #0
        data[i] = i2c_rpacket.data[i];
10009804:	490b      	ldr	r1, [pc, #44]	; (10009834 <sms_i2c_master_read+0x88>)
10009806:	684a      	ldr	r2, [r1, #4]
10009808:	5cd2      	ldrb	r2, [r2, r3]
1000980a:	4640      	mov	r0, r8
1000980c:	54c2      	strb	r2, [r0, r3]
1000980e:	3301      	adds	r3, #1
		//DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
        }
    }
    for(uint8_t i = 0; i < data_len; i++) {
10009810:	b2da      	uxtb	r2, r3
10009812:	4297      	cmp	r7, r2
10009814:	d8f7      	bhi.n	10009806 <sms_i2c_master_read+0x5a>
        data[i] = i2c_rpacket.data[i];
        //DBG_LOG_CONT(" 0x%02x ", data[i]);
    }
    return 0;
10009816:	2000      	movs	r0, #0
10009818:	e006      	b.n	10009828 <sms_i2c_master_read+0x7c>
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
		//DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
1000981a:	2001      	movs	r0, #1
1000981c:	4240      	negs	r0, r0
1000981e:	e003      	b.n	10009828 <sms_i2c_master_read+0x7c>
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
		//DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
10009820:	2001      	movs	r0, #1
10009822:	4240      	negs	r0, r0
10009824:	e000      	b.n	10009828 <sms_i2c_master_read+0x7c>
    }
    for(uint8_t i = 0; i < data_len; i++) {
        data[i] = i2c_rpacket.data[i];
        //DBG_LOG_CONT(" 0x%02x ", data[i]);
    }
    return 0;
10009826:	2000      	movs	r0, #0
10009828:	bc04      	pop	{r2}
1000982a:	4690      	mov	r8, r2
1000982c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000982e:	46c0      	nop			; (mov r8, r8)
10009830:	1001a53c 	.word	0x1001a53c
10009834:	1001a520 	.word	0x1001a520
10009838:	000003e9 	.word	0x000003e9
1000983c:	100083d9 	.word	0x100083d9
10009840:	1001a52c 	.word	0x1001a52c
10009844:	10008391 	.word	0x10008391

10009848 <sms_imu_interrupt_callback>:
	gpio_disable_callback(SMS_MPU_DRDY_PIN);
	imu_device.interrupt.enabled = false;
}
/* IMU DRDY callback function */
void sms_imu_interrupt_callback(void)
{
10009848:	b510      	push	{r4, lr}
	if(imu_device.interrupt.enabled) {
1000984a:	2380      	movs	r3, #128	; 0x80
1000984c:	4a06      	ldr	r2, [pc, #24]	; (10009868 <sms_imu_interrupt_callback+0x20>)
1000984e:	5cd3      	ldrb	r3, [r2, r3]
10009850:	2b00      	cmp	r3, #0
10009852:	d008      	beq.n	10009866 <sms_imu_interrupt_callback+0x1e>
		imu_device.interrupt.new_gyro = true;
10009854:	2101      	movs	r1, #1
10009856:	2381      	movs	r3, #129	; 0x81
10009858:	54d1      	strb	r1, [r2, r3]
		send_plf_int_msg_ind(SMS_MPU_DRDY_PIN, GPIO_CALLBACK_RISING, NULL, 0);
1000985a:	2300      	movs	r3, #0
1000985c:	2200      	movs	r2, #0
1000985e:	3101      	adds	r1, #1
10009860:	201e      	movs	r0, #30
10009862:	4c02      	ldr	r4, [pc, #8]	; (1000986c <sms_imu_interrupt_callback+0x24>)
10009864:	47a0      	blx	r4
	}
}
10009866:	bd10      	pop	{r4, pc}
10009868:	1001a550 	.word	0x1001a550
1000986c:	1000e5b1 	.word	0x1000e5b1

10009870 <sms_imu_configure_gpio>:
#include "mpu9250.h"

/* Board setup functions... */
/* GPIO settings */
void sms_imu_configure_gpio(void)
{
10009870:	b510      	push	{r4, lr}
10009872:	b082      	sub	sp, #8
	struct gpio_config config_gpio_pin;

	/* Data ready interrupt from IMU */
	gpio_get_config_defaults(&config_gpio_pin);
10009874:	ac01      	add	r4, sp, #4
10009876:	0020      	movs	r0, r4
10009878:	4b0a      	ldr	r3, [pc, #40]	; (100098a4 <sms_imu_configure_gpio+0x34>)
1000987a:	4798      	blx	r3
	config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
1000987c:	2300      	movs	r3, #0
1000987e:	7023      	strb	r3, [r4, #0]
	config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
10009880:	3302      	adds	r3, #2
10009882:	7063      	strb	r3, [r4, #1]
	config_gpio_pin.aon_wakeup = true;
10009884:	3b01      	subs	r3, #1
10009886:	70e3      	strb	r3, [r4, #3]
	if(gpio_pin_set_config(SMS_MPU_DRDY_PIN, &config_gpio_pin) != STATUS_OK) {
10009888:	0021      	movs	r1, r4
1000988a:	201e      	movs	r0, #30
1000988c:	4b06      	ldr	r3, [pc, #24]	; (100098a8 <sms_imu_configure_gpio+0x38>)
1000988e:	4798      	blx	r3
10009890:	2800      	cmp	r0, #0
10009892:	d005      	beq.n	100098a0 <sms_imu_configure_gpio+0x30>
		DBG_LOG("[sms_imu_configure_gpio]\tProblem while setting up IMU DRDY pin");
10009894:	4805      	ldr	r0, [pc, #20]	; (100098ac <sms_imu_configure_gpio+0x3c>)
10009896:	4b06      	ldr	r3, [pc, #24]	; (100098b0 <sms_imu_configure_gpio+0x40>)
10009898:	4798      	blx	r3
1000989a:	4806      	ldr	r0, [pc, #24]	; (100098b4 <sms_imu_configure_gpio+0x44>)
1000989c:	4b06      	ldr	r3, [pc, #24]	; (100098b8 <sms_imu_configure_gpio+0x48>)
1000989e:	4798      	blx	r3
	//config_gpio_pin.direction = GPIO_PIN_DIR_OUTPUT;
	//if(!gpio_pin_set_config(SMS_MPU_VCC_PIN, &config_gpio_pin) != STATUS_OK) {
	//DBG_LOG("[sms_imu_configure_gpio]\tProblem while setting up MPU VCC pin");
	//}
	//gpio_pin_set_output_level(SMS_MPU_VCC_PIN, true);
}
100098a0:	b002      	add	sp, #8
100098a2:	bd10      	pop	{r4, pc}
100098a4:	1000b685 	.word	0x1000b685
100098a8:	1000b695 	.word	0x1000b695
100098ac:	10017780 	.word	0x10017780
100098b0:	10016841 	.word	0x10016841
100098b4:	100179f8 	.word	0x100179f8
100098b8:	10016721 	.word	0x10016721

100098bc <sms_imu_register_callbacks>:
/* Register IMU DRDY interrupt callback */
void sms_imu_register_callbacks(void)
{
100098bc:	b510      	push	{r4, lr}
	/* MPU-9250 interrupt callback */
	gpio_register_callback(SMS_MPU_DRDY_PIN, sms_imu_interrupt_callback, GPIO_CALLBACK_RISING);
100098be:	2202      	movs	r2, #2
100098c0:	4902      	ldr	r1, [pc, #8]	; (100098cc <sms_imu_register_callbacks+0x10>)
100098c2:	201e      	movs	r0, #30
100098c4:	4b02      	ldr	r3, [pc, #8]	; (100098d0 <sms_imu_register_callbacks+0x14>)
100098c6:	4798      	blx	r3
}
100098c8:	bd10      	pop	{r4, pc}
100098ca:	46c0      	nop			; (mov r8, r8)
100098cc:	10009849 	.word	0x10009849
100098d0:	1000bac5 	.word	0x1000bac5

100098d4 <sms_imu_enable_callback>:
{
	gpio_unregister_callback(SMS_MPU_DRDY_PIN, GPIO_CALLBACK_RISING);
}
/* Enable IMU DRDY interrupt callback */
void sms_imu_enable_callback(void)
{
100098d4:	b510      	push	{r4, lr}
	gpio_enable_callback(SMS_MPU_DRDY_PIN);
100098d6:	201e      	movs	r0, #30
100098d8:	4b03      	ldr	r3, [pc, #12]	; (100098e8 <sms_imu_enable_callback+0x14>)
100098da:	4798      	blx	r3
	imu_device.interrupt.enabled = true;
100098dc:	2101      	movs	r1, #1
100098de:	2380      	movs	r3, #128	; 0x80
100098e0:	4a02      	ldr	r2, [pc, #8]	; (100098ec <sms_imu_enable_callback+0x18>)
100098e2:	54d1      	strb	r1, [r2, r3]
}
100098e4:	bd10      	pop	{r4, pc}
100098e6:	46c0      	nop			; (mov r8, r8)
100098e8:	1000bb95 	.word	0x1000bb95
100098ec:	1001a550 	.word	0x1001a550

100098f0 <sms_imu_disable_callback>:
/* Disable IMU DRDY interrupt callback */
void sms_imu_disable_callback(void)
{
100098f0:	b510      	push	{r4, lr}
	gpio_disable_callback(SMS_MPU_DRDY_PIN);
100098f2:	201e      	movs	r0, #30
100098f4:	4b03      	ldr	r3, [pc, #12]	; (10009904 <sms_imu_disable_callback+0x14>)
100098f6:	4798      	blx	r3
	imu_device.interrupt.enabled = false;
100098f8:	2100      	movs	r1, #0
100098fa:	2380      	movs	r3, #128	; 0x80
100098fc:	4a02      	ldr	r2, [pc, #8]	; (10009908 <sms_imu_disable_callback+0x18>)
100098fe:	54d1      	strb	r1, [r2, r3]
}
10009900:	bd10      	pop	{r4, pc}
10009902:	46c0      	nop			; (mov r8, r8)
10009904:	1000bbf1 	.word	0x1000bbf1
10009908:	1001a550 	.word	0x1001a550

1000990c <sms_imu_define_services>:
	}

}
/* BLE service definition */
void sms_imu_define_services(void)
{
1000990c:	b510      	push	{r4, lr}
1000990e:	b082      	sub	sp, #8
	at_ble_status_t status;
	uint8_t init_value = 0;
10009910:	466b      	mov	r3, sp
10009912:	1dda      	adds	r2, r3, #7
10009914:	2300      	movs	r3, #0
10009916:	7013      	strb	r3, [r2, #0]
	sms_ble_service_init(BLE_SERV_MPU, &imu_device.service_handler, &init_value);
10009918:	4c09      	ldr	r4, [pc, #36]	; (10009940 <sms_imu_define_services+0x34>)
1000991a:	0021      	movs	r1, r4
1000991c:	2002      	movs	r0, #2
1000991e:	4b09      	ldr	r3, [pc, #36]	; (10009944 <sms_imu_define_services+0x38>)
10009920:	4798      	blx	r3
	if((status = sms_ble_primary_service_define(&imu_device.service_handler)) != AT_BLE_SUCCESS) {
10009922:	0020      	movs	r0, r4
10009924:	4b08      	ldr	r3, [pc, #32]	; (10009948 <sms_imu_define_services+0x3c>)
10009926:	4798      	blx	r3
10009928:	1e04      	subs	r4, r0, #0
1000992a:	d006      	beq.n	1000993a <sms_imu_define_services+0x2e>
		DBG_LOG("[sms_mpu_define_services]\tServices defining failed, reason 0x%x", status);
1000992c:	4807      	ldr	r0, [pc, #28]	; (1000994c <sms_imu_define_services+0x40>)
1000992e:	4b08      	ldr	r3, [pc, #32]	; (10009950 <sms_imu_define_services+0x44>)
10009930:	4798      	blx	r3
10009932:	0021      	movs	r1, r4
10009934:	4807      	ldr	r0, [pc, #28]	; (10009954 <sms_imu_define_services+0x48>)
10009936:	4b08      	ldr	r3, [pc, #32]	; (10009958 <sms_imu_define_services+0x4c>)
10009938:	4798      	blx	r3
	}
	else {
		DBG_LOG_DEV("[sms_mpu_define_services]\tServices defined, SMS MPU handle: %d", imu_device.service_handler.serv_handle);
	}
}
1000993a:	b002      	add	sp, #8
1000993c:	bd10      	pop	{r4, pc}
1000993e:	46c0      	nop			; (mov r8, r8)
10009940:	1001a5d4 	.word	0x1001a5d4
10009944:	10009201 	.word	0x10009201
10009948:	100091dd 	.word	0x100091dd
1000994c:	10017780 	.word	0x10017780
10009950:	10016841 	.word	0x10016841
10009954:	10017a38 	.word	0x10017a38
10009958:	10016721 	.word	0x10016721

1000995c <read_accel_data>:
	}
	return 0;
}
/* Read accel data */
void read_accel_data(int16_t *destination)
{
1000995c:	b530      	push	{r4, r5, lr}
1000995e:	b083      	sub	sp, #12
10009960:	0004      	movs	r4, r0
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
10009962:	466b      	mov	r3, sp
10009964:	2206      	movs	r2, #6
10009966:	213b      	movs	r1, #59	; 0x3b
10009968:	2069      	movs	r0, #105	; 0x69
1000996a:	4d0c      	ldr	r5, [pc, #48]	; (1000999c <read_accel_data+0x40>)
1000996c:	47a8      	blx	r5
/* Read accel data */
void read_accel_data(int16_t *destination)
{
	uint8_t rawData[6];  // x/y/z accel register data stored here
	readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 6, &rawData[0]);  // Read the six raw data registers into data array
	destination[0] = ((int16_t)rawData[0] << 8) | rawData[1] ;  // Turn the MSB and LSB into a signed 16-bit value
1000996e:	466b      	mov	r3, sp
10009970:	781b      	ldrb	r3, [r3, #0]
10009972:	021b      	lsls	r3, r3, #8
10009974:	466a      	mov	r2, sp
10009976:	7852      	ldrb	r2, [r2, #1]
10009978:	4313      	orrs	r3, r2
1000997a:	8023      	strh	r3, [r4, #0]
	destination[1] = ((int16_t)rawData[2] << 8) | rawData[3] ;
1000997c:	466b      	mov	r3, sp
1000997e:	789b      	ldrb	r3, [r3, #2]
10009980:	021b      	lsls	r3, r3, #8
10009982:	466a      	mov	r2, sp
10009984:	78d2      	ldrb	r2, [r2, #3]
10009986:	4313      	orrs	r3, r2
10009988:	8063      	strh	r3, [r4, #2]
	destination[2] = ((int16_t)rawData[4] << 8) | rawData[5] ;
1000998a:	466b      	mov	r3, sp
1000998c:	791b      	ldrb	r3, [r3, #4]
1000998e:	021b      	lsls	r3, r3, #8
10009990:	466a      	mov	r2, sp
10009992:	7952      	ldrb	r2, [r2, #5]
10009994:	4313      	orrs	r3, r2
10009996:	80a3      	strh	r3, [r4, #4]
}
10009998:	b003      	add	sp, #12
1000999a:	bd30      	pop	{r4, r5, pc}
1000999c:	100097ad 	.word	0x100097ad

100099a0 <read_gyro_data>:
/* Read gyro data */
void read_gyro_data(int16_t *destination)
{
100099a0:	b530      	push	{r4, r5, lr}
100099a2:	b083      	sub	sp, #12
100099a4:	0004      	movs	r4, r0
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
100099a6:	466b      	mov	r3, sp
100099a8:	2206      	movs	r2, #6
100099aa:	2143      	movs	r1, #67	; 0x43
100099ac:	2069      	movs	r0, #105	; 0x69
100099ae:	4d0c      	ldr	r5, [pc, #48]	; (100099e0 <read_gyro_data+0x40>)
100099b0:	47a8      	blx	r5
/* Read gyro data */
void read_gyro_data(int16_t *destination)
{
	uint8_t rawData[6];  // x/y/z gyro register data stored here
	readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, &rawData[0]);  // Read the six raw data registers sequentially into data array
	destination[0] = ((int16_t)rawData[0] << 8) | rawData[1] ;  // Turn the MSB and LSB into a signed 16-bit value
100099b2:	466b      	mov	r3, sp
100099b4:	781b      	ldrb	r3, [r3, #0]
100099b6:	021b      	lsls	r3, r3, #8
100099b8:	466a      	mov	r2, sp
100099ba:	7852      	ldrb	r2, [r2, #1]
100099bc:	4313      	orrs	r3, r2
100099be:	8023      	strh	r3, [r4, #0]
	destination[1] = ((int16_t)rawData[2] << 8) | rawData[3] ;
100099c0:	466b      	mov	r3, sp
100099c2:	789b      	ldrb	r3, [r3, #2]
100099c4:	021b      	lsls	r3, r3, #8
100099c6:	466a      	mov	r2, sp
100099c8:	78d2      	ldrb	r2, [r2, #3]
100099ca:	4313      	orrs	r3, r2
100099cc:	8063      	strh	r3, [r4, #2]
	destination[2] = ((int16_t)rawData[4] << 8) | rawData[5] ;
100099ce:	466b      	mov	r3, sp
100099d0:	791b      	ldrb	r3, [r3, #4]
100099d2:	021b      	lsls	r3, r3, #8
100099d4:	466a      	mov	r2, sp
100099d6:	7952      	ldrb	r2, [r2, #5]
100099d8:	4313      	orrs	r3, r2
100099da:	80a3      	strh	r3, [r4, #4]
}
100099dc:	b003      	add	sp, #12
100099de:	bd30      	pop	{r4, r5, pc}
100099e0:	100097ad 	.word	0x100097ad

100099e4 <get_Mres>:
float get_Mres(uint8_t m_scale)
{
	float retVal = 0;
	// Possible magnetometer scales (and their register bit settings) are:
	// 14 bit resolution (0) and 16 bit resolution (1)
	switch(m_scale) {
100099e4:	2800      	cmp	r0, #0
100099e6:	d002      	beq.n	100099ee <get_Mres+0xa>
100099e8:	2801      	cmp	r0, #1
100099ea:	d002      	beq.n	100099f2 <get_Mres+0xe>
100099ec:	e003      	b.n	100099f6 <get_Mres+0x12>
		case MFS_14BITS:
		retVal = 10.0 * 4912.0 / 8190.0;
100099ee:	4803      	ldr	r0, [pc, #12]	; (100099fc <get_Mres+0x18>)
100099f0:	e002      	b.n	100099f8 <get_Mres+0x14>
		break;
		
		case MFS_16BITS:
		retVal = 10.0 * 4912.0 / 32760.0;
100099f2:	4803      	ldr	r0, [pc, #12]	; (10009a00 <get_Mres+0x1c>)
		break;
100099f4:	e000      	b.n	100099f8 <get_Mres+0x14>


/* Utility functions */
float get_Mres(uint8_t m_scale)
{
	float retVal = 0;
100099f6:	2000      	movs	r0, #0
		
		default:
		break;
	}
	return retVal;
}
100099f8:	4770      	bx	lr
100099fa:	46c0      	nop			; (mov r8, r8)
100099fc:	40bfebff 	.word	0x40bfebff
10009a00:	3fbfebff 	.word	0x3fbfebff

10009a04 <get_Gres>:
{
	float retVal = 0;
	// Possible gyro scales (and their register bit settings) are:
	// 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS  (11).
	// Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
	switch(g_scale) {
10009a04:	2801      	cmp	r0, #1
10009a06:	d008      	beq.n	10009a1a <get_Gres+0x16>
10009a08:	2800      	cmp	r0, #0
10009a0a:	d004      	beq.n	10009a16 <get_Gres+0x12>
10009a0c:	2802      	cmp	r0, #2
10009a0e:	d006      	beq.n	10009a1e <get_Gres+0x1a>
10009a10:	2803      	cmp	r0, #3
10009a12:	d006      	beq.n	10009a22 <get_Gres+0x1e>
10009a14:	e007      	b.n	10009a26 <get_Gres+0x22>
		case GFS_250DPS:
		retVal = 250.0 / 32768.0;
10009a16:	4805      	ldr	r0, [pc, #20]	; (10009a2c <get_Gres+0x28>)
10009a18:	e006      	b.n	10009a28 <get_Gres+0x24>
		break;
		
		case GFS_500DPS:
		retVal = 500.0 / 32768.0;
10009a1a:	4805      	ldr	r0, [pc, #20]	; (10009a30 <get_Gres+0x2c>)
		break;
10009a1c:	e004      	b.n	10009a28 <get_Gres+0x24>
		
		case GFS_1000DPS:
		retVal = 1000.0 / 32768.0;
10009a1e:	4805      	ldr	r0, [pc, #20]	; (10009a34 <get_Gres+0x30>)
		break;
10009a20:	e002      	b.n	10009a28 <get_Gres+0x24>
		
		case GFS_2000DPS:
		retVal = 2000.0 / 32768.0;
10009a22:	4805      	ldr	r0, [pc, #20]	; (10009a38 <get_Gres+0x34>)
		break;
10009a24:	e000      	b.n	10009a28 <get_Gres+0x24>
	}
	return retVal;
}
float get_Gres(uint8_t g_scale)
{
	float retVal = 0;
10009a26:	2000      	movs	r0, #0
		
		default:
		break;
	}
	return retVal;
}
10009a28:	4770      	bx	lr
10009a2a:	46c0      	nop			; (mov r8, r8)
10009a2c:	3bfa0000 	.word	0x3bfa0000
10009a30:	3c7a0000 	.word	0x3c7a0000
10009a34:	3cfa0000 	.word	0x3cfa0000
10009a38:	3d7a0000 	.word	0x3d7a0000

10009a3c <get_Ares>:
float get_Ares(uint8_t a_scale)
{
	float retVal = 0.0;
	switch(a_scale) {
10009a3c:	2801      	cmp	r0, #1
10009a3e:	d009      	beq.n	10009a54 <get_Ares+0x18>
10009a40:	2800      	cmp	r0, #0
10009a42:	d004      	beq.n	10009a4e <get_Ares+0x12>
10009a44:	2802      	cmp	r0, #2
10009a46:	d008      	beq.n	10009a5a <get_Ares+0x1e>
10009a48:	2803      	cmp	r0, #3
10009a4a:	d009      	beq.n	10009a60 <get_Ares+0x24>
10009a4c:	e00b      	b.n	10009a66 <get_Ares+0x2a>
		// Possible accelerometer scales (and their register bit settings) are:
		// 2 Gs (00), 4 Gs (01), 8 Gs (10), and 16 Gs  (11).
		// Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
		case AFS_2G:
		retVal = 2.0/32768.0;
10009a4e:	20e2      	movs	r0, #226	; 0xe2
10009a50:	0580      	lsls	r0, r0, #22
10009a52:	e009      	b.n	10009a68 <get_Ares+0x2c>
		break;
		case AFS_4G:
		retVal = 4.0/32768.0;
10009a54:	20e4      	movs	r0, #228	; 0xe4
10009a56:	0580      	lsls	r0, r0, #22
		break;
10009a58:	e006      	b.n	10009a68 <get_Ares+0x2c>
		case AFS_8G:
		retVal = 8.0/32768.0;
10009a5a:	20e6      	movs	r0, #230	; 0xe6
10009a5c:	0580      	lsls	r0, r0, #22
		break;
10009a5e:	e003      	b.n	10009a68 <get_Ares+0x2c>
		case AFS_16G:
		retVal = 16.0/32768.0;
10009a60:	20e8      	movs	r0, #232	; 0xe8
10009a62:	0580      	lsls	r0, r0, #22
		break;
10009a64:	e000      	b.n	10009a68 <get_Ares+0x2c>
	}
	return retVal;
}
float get_Ares(uint8_t a_scale)
{
	float retVal = 0.0;
10009a66:	2000      	movs	r0, #0
		case AFS_16G:
		retVal = 16.0/32768.0;
		break;
	}
	return retVal;
}
10009a68:	4770      	bx	lr
10009a6a:	46c0      	nop			; (mov r8, r8)

10009a6c <writeByte>:


/* I2C abstractions to simplify the code */
void writeByte(uint8_t address, uint8_t subAddress, uint8_t data)
{
10009a6c:	b510      	push	{r4, lr}
10009a6e:	b082      	sub	sp, #8
10009a70:	466b      	mov	r3, sp
10009a72:	3307      	adds	r3, #7
10009a74:	701a      	strb	r2, [r3, #0]
	sms_i2c_master_write(address, subAddress, 1, &data);
10009a76:	2201      	movs	r2, #1
10009a78:	4c01      	ldr	r4, [pc, #4]	; (10009a80 <writeByte+0x14>)
10009a7a:	47a0      	blx	r4
}
10009a7c:	b002      	add	sp, #8
10009a7e:	bd10      	pop	{r4, pc}
10009a80:	10009751 	.word	0x10009751

10009a84 <sms_imu_mpu_calibrate>:
	}
	return retVal;
}
/* Calculate biases for gyro and accel and write them into MPU registers */
void sms_imu_mpu_calibrate(float *dest1, float *dest2)
{
10009a84:	b5f0      	push	{r4, r5, r6, r7, lr}
10009a86:	465f      	mov	r7, fp
10009a88:	4656      	mov	r6, sl
10009a8a:	464d      	mov	r5, r9
10009a8c:	4644      	mov	r4, r8
10009a8e:	b4f0      	push	{r4, r5, r6, r7}
10009a90:	b08f      	sub	sp, #60	; 0x3c
10009a92:	9003      	str	r0, [sp, #12]
10009a94:	9105      	str	r1, [sp, #20]
	uint16_t ii, packet_count, fifo_count;
	int32_t gyro_bias[3]  = {0, 0, 0};
	int32_t accel_bias[3] = {0, 0, 0};
	
	// reset device
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
10009a96:	2280      	movs	r2, #128	; 0x80
10009a98:	216b      	movs	r1, #107	; 0x6b
10009a9a:	2069      	movs	r0, #105	; 0x69
10009a9c:	4ccd      	ldr	r4, [pc, #820]	; (10009dd4 <sms_imu_mpu_calibrate+0x350>)
10009a9e:	47a0      	blx	r4
	delay_ms(100);
10009aa0:	2064      	movs	r0, #100	; 0x64
10009aa2:	4dcd      	ldr	r5, [pc, #820]	; (10009dd8 <sms_imu_mpu_calibrate+0x354>)
10009aa4:	47a8      	blx	r5
	
	// get stable time source; Auto select clock source to be PLL gyroscope reference if ready
	// else use the internal oscillator, bits 2:0 = 001
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);
10009aa6:	2201      	movs	r2, #1
10009aa8:	216b      	movs	r1, #107	; 0x6b
10009aaa:	2069      	movs	r0, #105	; 0x69
10009aac:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, PWR_MGMT_2, 0x00);
10009aae:	2200      	movs	r2, #0
10009ab0:	216c      	movs	r1, #108	; 0x6c
10009ab2:	2069      	movs	r0, #105	; 0x69
10009ab4:	47a0      	blx	r4
	delay_ms(200);
10009ab6:	20c8      	movs	r0, #200	; 0xc8
10009ab8:	47a8      	blx	r5

	// Configure device for bias calculation
	writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x00);   // Disable all interrupts
10009aba:	2200      	movs	r2, #0
10009abc:	2138      	movs	r1, #56	; 0x38
10009abe:	2069      	movs	r0, #105	; 0x69
10009ac0:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);      // Disable FIFO
10009ac2:	2200      	movs	r2, #0
10009ac4:	2123      	movs	r1, #35	; 0x23
10009ac6:	2069      	movs	r0, #105	; 0x69
10009ac8:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x00);   // Turn on internal clock source
10009aca:	2200      	movs	r2, #0
10009acc:	216b      	movs	r1, #107	; 0x6b
10009ace:	2069      	movs	r0, #105	; 0x69
10009ad0:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, I2C_MST_CTRL, 0x00); // Disable I2C master
10009ad2:	2200      	movs	r2, #0
10009ad4:	2124      	movs	r1, #36	; 0x24
10009ad6:	2069      	movs	r0, #105	; 0x69
10009ad8:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, USER_CTRL, 0x00);    // Disable FIFO and I2C master modes
10009ada:	2200      	movs	r2, #0
10009adc:	216a      	movs	r1, #106	; 0x6a
10009ade:	2069      	movs	r0, #105	; 0x69
10009ae0:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, USER_CTRL, 0x0C);    // Reset FIFO and DMP
10009ae2:	220c      	movs	r2, #12
10009ae4:	216a      	movs	r1, #106	; 0x6a
10009ae6:	2069      	movs	r0, #105	; 0x69
10009ae8:	47a0      	blx	r4
	delay_ms(15);
10009aea:	200f      	movs	r0, #15
10009aec:	47a8      	blx	r5
	
	// Configure MPU9250 gyro and accelerometer for bias calculation
	writeByte(MPU9250_ADDRESS, CONFIG, 0x01);      // Set low-pass filter to 188 Hz
10009aee:	2201      	movs	r2, #1
10009af0:	211a      	movs	r1, #26
10009af2:	2069      	movs	r0, #105	; 0x69
10009af4:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x00);  // Set sample rate to 1 kHz
10009af6:	2200      	movs	r2, #0
10009af8:	2119      	movs	r1, #25
10009afa:	2069      	movs	r0, #105	; 0x69
10009afc:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, GYRO_CONFIG, 0x00);  // Set gyro full-scale to 250 degrees per second, maximum sensitivity
10009afe:	2200      	movs	r2, #0
10009b00:	211b      	movs	r1, #27
10009b02:	2069      	movs	r0, #105	; 0x69
10009b04:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0x00); // Set accelerometer full-scale to 2 g, maximum sensitivity
10009b06:	2200      	movs	r2, #0
10009b08:	211c      	movs	r1, #28
10009b0a:	2069      	movs	r0, #105	; 0x69
10009b0c:	47a0      	blx	r4
	
	uint16_t  gyrosensitivity  = 131;   // = 131 LSB/degrees/sec
	uint16_t  accelsensitivity = 16384;  // = 16384 LSB/g

	// Configure FIFO to capture accelerometer and gyro data for bias calculation
	writeByte(MPU9250_ADDRESS, USER_CTRL, 0x40);   // Enable FIFO
10009b0e:	2240      	movs	r2, #64	; 0x40
10009b10:	216a      	movs	r1, #106	; 0x6a
10009b12:	2069      	movs	r0, #105	; 0x69
10009b14:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO  (max size 512 bytes in MPU-9150)
10009b16:	2278      	movs	r2, #120	; 0x78
10009b18:	2123      	movs	r1, #35	; 0x23
10009b1a:	2069      	movs	r0, #105	; 0x69
10009b1c:	47a0      	blx	r4
	delay_ms(40); // accumulate 40 samples in 40 milliseconds = 480 bytes
10009b1e:	2028      	movs	r0, #40	; 0x28
10009b20:	47a8      	blx	r5

	// At end of sample accumulation, turn off FIFO sensor read
	writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
10009b22:	2200      	movs	r2, #0
10009b24:	2123      	movs	r1, #35	; 0x23
10009b26:	2069      	movs	r0, #105	; 0x69
10009b28:	47a0      	blx	r4
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
10009b2a:	ac0b      	add	r4, sp, #44	; 0x2c
10009b2c:	0023      	movs	r3, r4
10009b2e:	2202      	movs	r2, #2
10009b30:	2172      	movs	r1, #114	; 0x72
10009b32:	2069      	movs	r0, #105	; 0x69
10009b34:	4da9      	ldr	r5, [pc, #676]	; (10009ddc <sms_imu_mpu_calibrate+0x358>)
10009b36:	47a8      	blx	r5

	// At end of sample accumulation, turn off FIFO sensor read
	writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
	readBytes(MPU9250_ADDRESS, FIFO_COUNTH, 2, data); // read FIFO sample count
	fifo_count = ((uint16_t)data[0] << 8) | data[1];
	packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
10009b38:	7820      	ldrb	r0, [r4, #0]
10009b3a:	0200      	lsls	r0, r0, #8
10009b3c:	7863      	ldrb	r3, [r4, #1]
10009b3e:	4318      	orrs	r0, r3
10009b40:	210c      	movs	r1, #12
10009b42:	4ba7      	ldr	r3, [pc, #668]	; (10009de0 <sms_imu_mpu_calibrate+0x35c>)
10009b44:	4798      	blx	r3
10009b46:	b283      	uxth	r3, r0
10009b48:	9302      	str	r3, [sp, #8]
	
	for (ii = 0; ii < packet_count; ii++) {
10009b4a:	2b00      	cmp	r3, #0
10009b4c:	d042      	beq.n	10009bd4 <sms_imu_mpu_calibrate+0x150>
10009b4e:	2300      	movs	r3, #0
10009b50:	4698      	mov	r8, r3
10009b52:	2700      	movs	r7, #0
10009b54:	469b      	mov	fp, r3
10009b56:	469a      	mov	sl, r3
10009b58:	4699      	mov	r9, r3
10009b5a:	2500      	movs	r5, #0
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
10009b5c:	ac0b      	add	r4, sp, #44	; 0x2c
10009b5e:	9301      	str	r3, [sp, #4]
10009b60:	0023      	movs	r3, r4
10009b62:	220c      	movs	r2, #12
10009b64:	2174      	movs	r1, #116	; 0x74
10009b66:	2069      	movs	r0, #105	; 0x69
10009b68:	4e9c      	ldr	r6, [pc, #624]	; (10009ddc <sms_imu_mpu_calibrate+0x358>)
10009b6a:	47b0      	blx	r6
		accel_temp[2] = (int16_t) (((int16_t)data[4] << 8) | data[5]  ) ;
		gyro_temp[0]  = (int16_t) (((int16_t)data[6] << 8) | data[7]  ) ;
		gyro_temp[1]  = (int16_t) (((int16_t)data[8] << 8) | data[9]  ) ;
		gyro_temp[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]) ;
		
		accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
10009b6c:	7823      	ldrb	r3, [r4, #0]
10009b6e:	021b      	lsls	r3, r3, #8
10009b70:	7862      	ldrb	r2, [r4, #1]
10009b72:	4313      	orrs	r3, r2
10009b74:	b21b      	sxth	r3, r3
10009b76:	9a01      	ldr	r2, [sp, #4]
10009b78:	4694      	mov	ip, r2
10009b7a:	449c      	add	ip, r3
10009b7c:	4663      	mov	r3, ip
10009b7e:	9301      	str	r3, [sp, #4]
		accel_bias[1] += (int32_t) accel_temp[1];
10009b80:	78a3      	ldrb	r3, [r4, #2]
10009b82:	021b      	lsls	r3, r3, #8
10009b84:	78e2      	ldrb	r2, [r4, #3]
10009b86:	4313      	orrs	r3, r2
10009b88:	b21b      	sxth	r3, r3
10009b8a:	18ff      	adds	r7, r7, r3
		accel_bias[2] += (int32_t) accel_temp[2];
10009b8c:	7923      	ldrb	r3, [r4, #4]
10009b8e:	021b      	lsls	r3, r3, #8
10009b90:	7962      	ldrb	r2, [r4, #5]
10009b92:	4313      	orrs	r3, r2
10009b94:	b21b      	sxth	r3, r3
10009b96:	4499      	add	r9, r3
		gyro_bias[0]  += (int32_t) gyro_temp[0];
10009b98:	79a3      	ldrb	r3, [r4, #6]
10009b9a:	021b      	lsls	r3, r3, #8
10009b9c:	79e2      	ldrb	r2, [r4, #7]
10009b9e:	4313      	orrs	r3, r2
10009ba0:	b21b      	sxth	r3, r3
10009ba2:	4498      	add	r8, r3
		gyro_bias[1]  += (int32_t) gyro_temp[1];
10009ba4:	7a23      	ldrb	r3, [r4, #8]
10009ba6:	021b      	lsls	r3, r3, #8
10009ba8:	7a62      	ldrb	r2, [r4, #9]
10009baa:	4313      	orrs	r3, r2
10009bac:	b21b      	sxth	r3, r3
10009bae:	449a      	add	sl, r3
		gyro_bias[2]  += (int32_t) gyro_temp[2];
10009bb0:	7aa3      	ldrb	r3, [r4, #10]
10009bb2:	021b      	lsls	r3, r3, #8
10009bb4:	7ae2      	ldrb	r2, [r4, #11]
10009bb6:	4313      	orrs	r3, r2
10009bb8:	b21b      	sxth	r3, r3
10009bba:	449b      	add	fp, r3
	writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
	readBytes(MPU9250_ADDRESS, FIFO_COUNTH, 2, data); // read FIFO sample count
	fifo_count = ((uint16_t)data[0] << 8) | data[1];
	packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
	
	for (ii = 0; ii < packet_count; ii++) {
10009bbc:	3501      	adds	r5, #1
10009bbe:	b2ad      	uxth	r5, r5
10009bc0:	9b02      	ldr	r3, [sp, #8]
10009bc2:	42ab      	cmp	r3, r5
10009bc4:	d1cc      	bne.n	10009b60 <sms_imu_mpu_calibrate+0xdc>
10009bc6:	4653      	mov	r3, sl
10009bc8:	46ba      	mov	sl, r7
10009bca:	465a      	mov	r2, fp
10009bcc:	46e3      	mov	fp, ip
10009bce:	0016      	movs	r6, r2
10009bd0:	001f      	movs	r7, r3
10009bd2:	e006      	b.n	10009be2 <sms_imu_mpu_calibrate+0x15e>
/* Calculate biases for gyro and accel and write them into MPU registers */
void sms_imu_mpu_calibrate(float *dest1, float *dest2)
{
	uint8_t data[12]; // data array to hold accelerometer and gyro x, y, z, data
	uint16_t ii, packet_count, fifo_count;
	int32_t gyro_bias[3]  = {0, 0, 0};
10009bd4:	2300      	movs	r3, #0
10009bd6:	4698      	mov	r8, r3
10009bd8:	2700      	movs	r7, #0
10009bda:	2600      	movs	r6, #0
	int32_t accel_bias[3] = {0, 0, 0};
10009bdc:	469b      	mov	fp, r3
10009bde:	469a      	mov	sl, r3
10009be0:	4699      	mov	r9, r3
		gyro_bias[0]  += (int32_t) gyro_temp[0];
		gyro_bias[1]  += (int32_t) gyro_temp[1];
		gyro_bias[2]  += (int32_t) gyro_temp[2];
		
	}
	accel_bias[0] /= (int32_t) packet_count; // Normalize sums to get average count biases
10009be2:	4c80      	ldr	r4, [pc, #512]	; (10009de4 <sms_imu_mpu_calibrate+0x360>)
10009be4:	9902      	ldr	r1, [sp, #8]
10009be6:	4658      	mov	r0, fp
10009be8:	47a0      	blx	r4
10009bea:	0005      	movs	r5, r0
	accel_bias[1] /= (int32_t) packet_count;
10009bec:	9b02      	ldr	r3, [sp, #8]
10009bee:	469b      	mov	fp, r3
10009bf0:	0019      	movs	r1, r3
10009bf2:	4650      	mov	r0, sl
10009bf4:	47a0      	blx	r4
10009bf6:	4682      	mov	sl, r0
	accel_bias[2] /= (int32_t) packet_count;
10009bf8:	4659      	mov	r1, fp
10009bfa:	4648      	mov	r0, r9
10009bfc:	47a0      	blx	r4
10009bfe:	4681      	mov	r9, r0
	gyro_bias[0]  /= (int32_t) packet_count;
10009c00:	4659      	mov	r1, fp
10009c02:	4640      	mov	r0, r8
10009c04:	47a0      	blx	r4
10009c06:	9001      	str	r0, [sp, #4]
	gyro_bias[1]  /= (int32_t) packet_count;
10009c08:	4659      	mov	r1, fp
10009c0a:	0038      	movs	r0, r7
10009c0c:	47a0      	blx	r4
10009c0e:	9002      	str	r0, [sp, #8]
	gyro_bias[2]  /= (int32_t) packet_count;
10009c10:	4659      	mov	r1, fp
10009c12:	0030      	movs	r0, r6
10009c14:	47a0      	blx	r4
10009c16:	9004      	str	r0, [sp, #16]
	
	if(accel_bias[2] > 0L) {
10009c18:	464b      	mov	r3, r9
10009c1a:	2b00      	cmp	r3, #0
10009c1c:	dd03      	ble.n	10009c26 <sms_imu_mpu_calibrate+0x1a2>
		accel_bias[2] -= (int32_t) accelsensitivity;
10009c1e:	4b72      	ldr	r3, [pc, #456]	; (10009de8 <sms_imu_mpu_calibrate+0x364>)
10009c20:	469c      	mov	ip, r3
10009c22:	44e1      	add	r9, ip
10009c24:	e003      	b.n	10009c2e <sms_imu_mpu_calibrate+0x1aa>
	}  // Remove gravity from the z-axis accelerometer bias calculation
	else {
		accel_bias[2] += (int32_t) accelsensitivity;
10009c26:	2380      	movs	r3, #128	; 0x80
10009c28:	01db      	lsls	r3, r3, #7
10009c2a:	469c      	mov	ip, r3
10009c2c:	44e1      	add	r9, ip
	}
	
	// Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
	data[0] = (-gyro_bias[0]/4  >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
10009c2e:	9b01      	ldr	r3, [sp, #4]
10009c30:	4259      	negs	r1, r3
10009c32:	17ca      	asrs	r2, r1, #31
10009c34:	2303      	movs	r3, #3
10009c36:	401a      	ands	r2, r3
10009c38:	1852      	adds	r2, r2, r1
10009c3a:	1091      	asrs	r1, r2, #2
10009c3c:	1292      	asrs	r2, r2, #10
10009c3e:	b2d2      	uxtb	r2, r2
10009c40:	ac0b      	add	r4, sp, #44	; 0x2c
10009c42:	7022      	strb	r2, [r4, #0]
	data[1] = (-gyro_bias[0]/4)       & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
10009c44:	7061      	strb	r1, [r4, #1]
	data[2] = (-gyro_bias[1]/4  >> 8) & 0xFF;
10009c46:	9902      	ldr	r1, [sp, #8]
10009c48:	4248      	negs	r0, r1
10009c4a:	17c1      	asrs	r1, r0, #31
10009c4c:	4019      	ands	r1, r3
10009c4e:	1809      	adds	r1, r1, r0
10009c50:	1088      	asrs	r0, r1, #2
10009c52:	1289      	asrs	r1, r1, #10
10009c54:	70a1      	strb	r1, [r4, #2]
	data[3] = (-gyro_bias[1]/4)       & 0xFF;
10009c56:	70e0      	strb	r0, [r4, #3]
	data[4] = (-gyro_bias[2]/4  >> 8) & 0xFF;
10009c58:	9e04      	ldr	r6, [sp, #16]
10009c5a:	4271      	negs	r1, r6
10009c5c:	17c8      	asrs	r0, r1, #31
10009c5e:	4003      	ands	r3, r0
10009c60:	185b      	adds	r3, r3, r1
10009c62:	1099      	asrs	r1, r3, #2
10009c64:	129b      	asrs	r3, r3, #10
10009c66:	7123      	strb	r3, [r4, #4]
	data[5] = (-gyro_bias[2]/4)       & 0xFF;
10009c68:	7161      	strb	r1, [r4, #5]
	
	// Push gyro biases to hardware registers
	writeByte(MPU9250_ADDRESS, XG_OFFSET_H, data[0]);
10009c6a:	2113      	movs	r1, #19
10009c6c:	2069      	movs	r0, #105	; 0x69
10009c6e:	4e59      	ldr	r6, [pc, #356]	; (10009dd4 <sms_imu_mpu_calibrate+0x350>)
10009c70:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, XG_OFFSET_L, data[1]);
10009c72:	7862      	ldrb	r2, [r4, #1]
10009c74:	2114      	movs	r1, #20
10009c76:	2069      	movs	r0, #105	; 0x69
10009c78:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, YG_OFFSET_H, data[2]);
10009c7a:	78a2      	ldrb	r2, [r4, #2]
10009c7c:	2115      	movs	r1, #21
10009c7e:	2069      	movs	r0, #105	; 0x69
10009c80:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, YG_OFFSET_L, data[3]);
10009c82:	78e2      	ldrb	r2, [r4, #3]
10009c84:	2116      	movs	r1, #22
10009c86:	2069      	movs	r0, #105	; 0x69
10009c88:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, ZG_OFFSET_H, data[4]);
10009c8a:	7922      	ldrb	r2, [r4, #4]
10009c8c:	2117      	movs	r1, #23
10009c8e:	2069      	movs	r0, #105	; 0x69
10009c90:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, ZG_OFFSET_L, data[5]);
10009c92:	7962      	ldrb	r2, [r4, #5]
10009c94:	2118      	movs	r1, #24
10009c96:	2069      	movs	r0, #105	; 0x69
10009c98:	47b0      	blx	r6
	
	// Output scaled gyro biases for display in the main program
	dest1[0] = (float)((float)gyro_bias[0]/(float)gyrosensitivity);
10009c9a:	4f54      	ldr	r7, [pc, #336]	; (10009dec <sms_imu_mpu_calibrate+0x368>)
10009c9c:	9801      	ldr	r0, [sp, #4]
10009c9e:	47b8      	blx	r7
10009ca0:	4e53      	ldr	r6, [pc, #332]	; (10009df0 <sms_imu_mpu_calibrate+0x36c>)
10009ca2:	4954      	ldr	r1, [pc, #336]	; (10009df4 <sms_imu_mpu_calibrate+0x370>)
10009ca4:	47b0      	blx	r6
10009ca6:	9b03      	ldr	r3, [sp, #12]
10009ca8:	6018      	str	r0, [r3, #0]
	dest1[1] = (float)((float)gyro_bias[1]/(float)gyrosensitivity);
10009caa:	9802      	ldr	r0, [sp, #8]
10009cac:	47b8      	blx	r7
10009cae:	4951      	ldr	r1, [pc, #324]	; (10009df4 <sms_imu_mpu_calibrate+0x370>)
10009cb0:	47b0      	blx	r6
10009cb2:	9b03      	ldr	r3, [sp, #12]
10009cb4:	6058      	str	r0, [r3, #4]
	dest1[2] = (float)((float)gyro_bias[2]/(float)gyrosensitivity);
10009cb6:	9804      	ldr	r0, [sp, #16]
10009cb8:	47b8      	blx	r7
10009cba:	494e      	ldr	r1, [pc, #312]	; (10009df4 <sms_imu_mpu_calibrate+0x370>)
10009cbc:	47b0      	blx	r6
10009cbe:	9b03      	ldr	r3, [sp, #12]
10009cc0:	6098      	str	r0, [r3, #8]
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
10009cc2:	0023      	movs	r3, r4
10009cc4:	2202      	movs	r2, #2
10009cc6:	2177      	movs	r1, #119	; 0x77
10009cc8:	2069      	movs	r0, #105	; 0x69
10009cca:	4e44      	ldr	r6, [pc, #272]	; (10009ddc <sms_imu_mpu_calibrate+0x358>)
10009ccc:	46b0      	mov	r8, r6
10009cce:	47b0      	blx	r6
	// compensation calculations. Accelerometer bias registers expect bias input as 2048 LSB per g, so that
	// the accelerometer biases calculated above must be divided by 8.

	int32_t accel_bias_reg[3] = {0, 0, 0}; // A place to hold the factory accelerometer trim biases
	readBytes(MPU9250_ADDRESS, XA_OFFSET_H, 2, data); // Read factory accelerometer trim values
	accel_bias_reg[0] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
10009cd0:	7827      	ldrb	r7, [r4, #0]
10009cd2:	023f      	lsls	r7, r7, #8
10009cd4:	7863      	ldrb	r3, [r4, #1]
10009cd6:	431f      	orrs	r7, r3
10009cd8:	9708      	str	r7, [sp, #32]
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
10009cda:	0023      	movs	r3, r4
10009cdc:	2202      	movs	r2, #2
10009cde:	217a      	movs	r1, #122	; 0x7a
10009ce0:	2069      	movs	r0, #105	; 0x69
10009ce2:	47b0      	blx	r6

	int32_t accel_bias_reg[3] = {0, 0, 0}; // A place to hold the factory accelerometer trim biases
	readBytes(MPU9250_ADDRESS, XA_OFFSET_H, 2, data); // Read factory accelerometer trim values
	accel_bias_reg[0] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
	readBytes(MPU9250_ADDRESS, YA_OFFSET_H, 2, data);
	accel_bias_reg[1] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
10009ce4:	7826      	ldrb	r6, [r4, #0]
10009ce6:	0236      	lsls	r6, r6, #8
10009ce8:	7863      	ldrb	r3, [r4, #1]
10009cea:	431e      	orrs	r6, r3
10009cec:	9609      	str	r6, [sp, #36]	; 0x24
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
10009cee:	0023      	movs	r3, r4
10009cf0:	2202      	movs	r2, #2
10009cf2:	217d      	movs	r1, #125	; 0x7d
10009cf4:	2069      	movs	r0, #105	; 0x69
10009cf6:	47c0      	blx	r8
	readBytes(MPU9250_ADDRESS, XA_OFFSET_H, 2, data); // Read factory accelerometer trim values
	accel_bias_reg[0] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
	readBytes(MPU9250_ADDRESS, YA_OFFSET_H, 2, data);
	accel_bias_reg[1] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
	readBytes(MPU9250_ADDRESS, ZA_OFFSET_H, 2, data);
	accel_bias_reg[2] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
10009cf8:	7823      	ldrb	r3, [r4, #0]
10009cfa:	021b      	lsls	r3, r3, #8
10009cfc:	7861      	ldrb	r1, [r4, #1]
10009cfe:	4319      	orrs	r1, r3
10009d00:	910a      	str	r1, [sp, #40]	; 0x28
	
	uint32_t mask = 1uL; // Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
	uint8_t mask_bit[3] = {0, 0, 0}; // Define array to hold mask bit for each accelerometer bias axis
10009d02:	ab07      	add	r3, sp, #28
10009d04:	2200      	movs	r2, #0
10009d06:	701a      	strb	r2, [r3, #0]
10009d08:	705a      	strb	r2, [r3, #1]
10009d0a:	709a      	strb	r2, [r3, #2]
10009d0c:	2300      	movs	r3, #0
	
	for(ii = 0; ii < 3; ii++) {
		if((accel_bias_reg[ii] & mask)) mask_bit[ii] = 0x01; // If temperature compensation bit is set, record that fact in mask_bit
10009d0e:	2401      	movs	r4, #1
10009d10:	009a      	lsls	r2, r3, #2
10009d12:	a808      	add	r0, sp, #32
10009d14:	5812      	ldr	r2, [r2, r0]
10009d16:	4222      	tst	r2, r4
10009d18:	d001      	beq.n	10009d1e <sms_imu_mpu_calibrate+0x29a>
10009d1a:	aa07      	add	r2, sp, #28
10009d1c:	549c      	strb	r4, [r3, r2]
10009d1e:	3301      	adds	r3, #1
	accel_bias_reg[2] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
	
	uint32_t mask = 1uL; // Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
	uint8_t mask_bit[3] = {0, 0, 0}; // Define array to hold mask bit for each accelerometer bias axis
	
	for(ii = 0; ii < 3; ii++) {
10009d20:	2b03      	cmp	r3, #3
10009d22:	d1f5      	bne.n	10009d10 <sms_imu_mpu_calibrate+0x28c>
		if((accel_bias_reg[ii] & mask)) mask_bit[ii] = 0x01; // If temperature compensation bit is set, record that fact in mask_bit
	}
	
	// Construct total accelerometer bias, including calculated average accelerometer bias from above
	accel_bias_reg[0] -= (accel_bias[0]/8); // Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
10009d24:	17ea      	asrs	r2, r5, #31
10009d26:	3304      	adds	r3, #4
10009d28:	401a      	ands	r2, r3
10009d2a:	1952      	adds	r2, r2, r5
10009d2c:	10d2      	asrs	r2, r2, #3
10009d2e:	1abf      	subs	r7, r7, r2
	accel_bias_reg[1] -= (accel_bias[1]/8);
10009d30:	4652      	mov	r2, sl
10009d32:	17d0      	asrs	r0, r2, #31
10009d34:	4018      	ands	r0, r3
10009d36:	4450      	add	r0, sl
10009d38:	10c0      	asrs	r0, r0, #3
10009d3a:	1a36      	subs	r6, r6, r0
	accel_bias_reg[2] -= (accel_bias[2]/8);
10009d3c:	464a      	mov	r2, r9
10009d3e:	17d2      	asrs	r2, r2, #31
10009d40:	4013      	ands	r3, r2
10009d42:	444b      	add	r3, r9
10009d44:	10da      	asrs	r2, r3, #3
10009d46:	1a8b      	subs	r3, r1, r2
	
	data[0] = (accel_bias_reg[0] >> 8) & 0xFF;
10009d48:	123a      	asrs	r2, r7, #8
10009d4a:	b2d2      	uxtb	r2, r2
10009d4c:	ac0b      	add	r4, sp, #44	; 0x2c
10009d4e:	7022      	strb	r2, [r4, #0]
	data[1] = (accel_bias_reg[0])      & 0xFF;
	data[1] = data[1] | mask_bit[0]; // preserve temperature compensation bit when writing back to accelerometer bias registers
10009d50:	a907      	add	r1, sp, #28
10009d52:	7808      	ldrb	r0, [r1, #0]
10009d54:	4307      	orrs	r7, r0
10009d56:	7067      	strb	r7, [r4, #1]
	data[2] = (accel_bias_reg[1] >> 8) & 0xFF;
10009d58:	1230      	asrs	r0, r6, #8
10009d5a:	70a0      	strb	r0, [r4, #2]
	data[3] = (accel_bias_reg[1])      & 0xFF;
	data[3] = data[3] | mask_bit[1]; // preserve temperature compensation bit when writing back to accelerometer bias registers
10009d5c:	7848      	ldrb	r0, [r1, #1]
10009d5e:	4306      	orrs	r6, r0
10009d60:	70e6      	strb	r6, [r4, #3]
	data[4] = (accel_bias_reg[2] >> 8) & 0xFF;
10009d62:	1218      	asrs	r0, r3, #8
10009d64:	7120      	strb	r0, [r4, #4]
	data[5] = (accel_bias_reg[2])      & 0xFF;
	data[5] = data[5] | mask_bit[2]; // preserve temperature compensation bit when writing back to accelerometer bias registers
10009d66:	7889      	ldrb	r1, [r1, #2]
10009d68:	430b      	orrs	r3, r1
10009d6a:	7163      	strb	r3, [r4, #5]
	
	// Apparently this is not working for the acceleration biases in the MPU-9250
	// Are we handling the temperature correction bit properly?
	// Push accelerometer biases to hardware registers
	writeByte(MPU9250_ADDRESS, XA_OFFSET_H, data[0]);
10009d6c:	2177      	movs	r1, #119	; 0x77
10009d6e:	2069      	movs	r0, #105	; 0x69
10009d70:	4e18      	ldr	r6, [pc, #96]	; (10009dd4 <sms_imu_mpu_calibrate+0x350>)
10009d72:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, XA_OFFSET_L, data[1]);
10009d74:	7862      	ldrb	r2, [r4, #1]
10009d76:	2178      	movs	r1, #120	; 0x78
10009d78:	2069      	movs	r0, #105	; 0x69
10009d7a:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, YA_OFFSET_H, data[2]);
10009d7c:	78a2      	ldrb	r2, [r4, #2]
10009d7e:	217a      	movs	r1, #122	; 0x7a
10009d80:	2069      	movs	r0, #105	; 0x69
10009d82:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, YA_OFFSET_L, data[3]);
10009d84:	78e2      	ldrb	r2, [r4, #3]
10009d86:	217b      	movs	r1, #123	; 0x7b
10009d88:	2069      	movs	r0, #105	; 0x69
10009d8a:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, ZA_OFFSET_H, data[4]);
10009d8c:	7922      	ldrb	r2, [r4, #4]
10009d8e:	217d      	movs	r1, #125	; 0x7d
10009d90:	2069      	movs	r0, #105	; 0x69
10009d92:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, ZA_OFFSET_L, data[5]);
10009d94:	7962      	ldrb	r2, [r4, #5]
10009d96:	217e      	movs	r1, #126	; 0x7e
10009d98:	2069      	movs	r0, #105	; 0x69
10009d9a:	47b0      	blx	r6

	// Output scaled accelerometer biases for display in the main program
	dest2[0] = (float)accel_bias[0]/(float)accelsensitivity;
10009d9c:	4e13      	ldr	r6, [pc, #76]	; (10009dec <sms_imu_mpu_calibrate+0x368>)
10009d9e:	0028      	movs	r0, r5
10009da0:	47b0      	blx	r6
10009da2:	4c15      	ldr	r4, [pc, #84]	; (10009df8 <sms_imu_mpu_calibrate+0x374>)
10009da4:	21e2      	movs	r1, #226	; 0xe2
10009da6:	0589      	lsls	r1, r1, #22
10009da8:	47a0      	blx	r4
10009daa:	9d05      	ldr	r5, [sp, #20]
10009dac:	6028      	str	r0, [r5, #0]
	dest2[1] = (float)accel_bias[1]/(float)accelsensitivity;
10009dae:	4650      	mov	r0, sl
10009db0:	47b0      	blx	r6
10009db2:	21e2      	movs	r1, #226	; 0xe2
10009db4:	0589      	lsls	r1, r1, #22
10009db6:	47a0      	blx	r4
10009db8:	6068      	str	r0, [r5, #4]
	dest2[2] = (float)accel_bias[2]/(float)accelsensitivity;
10009dba:	4648      	mov	r0, r9
10009dbc:	47b0      	blx	r6
10009dbe:	21e2      	movs	r1, #226	; 0xe2
10009dc0:	0589      	lsls	r1, r1, #22
10009dc2:	47a0      	blx	r4
10009dc4:	60a8      	str	r0, [r5, #8]
	//uint32_t p2 = dest1[2] * 10000;
	//uint32_t p3 = dest2[0] * 10000;
	//uint32_t p4 = dest2[1] * 10000;
	//uint32_t p5 = dest2[2] * 10000;
	//DBG_LOG("destX: %ld %ld %ld / %ld %ld %ld", p0, p1, p2, p3, p4, p5);
}
10009dc6:	b00f      	add	sp, #60	; 0x3c
10009dc8:	bc3c      	pop	{r2, r3, r4, r5}
10009dca:	4690      	mov	r8, r2
10009dcc:	4699      	mov	r9, r3
10009dce:	46a2      	mov	sl, r4
10009dd0:	46ab      	mov	fp, r5
10009dd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009dd4:	10009a6d 	.word	0x10009a6d
10009dd8:	1000aff1 	.word	0x1000aff1
10009ddc:	100097ad 	.word	0x100097ad
10009de0:	10013591 	.word	0x10013591
10009de4:	100136a5 	.word	0x100136a5
10009de8:	ffffc000 	.word	0xffffc000
10009dec:	10014659 	.word	0x10014659
10009df0:	10013d1d 	.word	0x10013d1d
10009df4:	43030000 	.word	0x43030000
10009df8:	100140b1 	.word	0x100140b1

10009dfc <sms_imu_comp_initialize>:
	writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x01);  // Enable data ready (bit 0) interrupt
	delay_ms(100);
}
/* Compass */
void sms_imu_comp_initialize(float *destination)
{
10009dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
10009dfe:	465f      	mov	r7, fp
10009e00:	4656      	mov	r6, sl
10009e02:	464d      	mov	r5, r9
10009e04:	4644      	mov	r4, r8
10009e06:	b4f0      	push	{r4, r5, r6, r7}
10009e08:	b083      	sub	sp, #12
10009e0a:	4680      	mov	r8, r0
	imu_device.config.m_scale = MFS_16BITS;	// Choose either 14-bit or 16-bit magnetometer resolution
10009e0c:	4c36      	ldr	r4, [pc, #216]	; (10009ee8 <sms_imu_comp_initialize+0xec>)
10009e0e:	2301      	movs	r3, #1
10009e10:	70a3      	strb	r3, [r4, #2]
	imu_device.config.m_mode = MODE_CONT1;	// CONT1 (2) for 8 Hz, CONT2 (6) for 100 Hz continuous magnetometer data read
10009e12:	3301      	adds	r3, #1
10009e14:	70e3      	strb	r3, [r4, #3]

	/* !!! SET MAGNETOMETER BIAS VALUES !!! SHOULD BE CALCULATED AUTOMATICALLY !!! */
	imu_device.config.mag_bias[0] = 470.0;
10009e16:	4b35      	ldr	r3, [pc, #212]	; (10009eec <sms_imu_comp_initialize+0xf0>)
10009e18:	6363      	str	r3, [r4, #52]	; 0x34
	imu_device.config.mag_bias[1] = 120.0;
10009e1a:	4b35      	ldr	r3, [pc, #212]	; (10009ef0 <sms_imu_comp_initialize+0xf4>)
10009e1c:	63a3      	str	r3, [r4, #56]	; 0x38
	imu_device.config.mag_bias[2] = 125.0;
10009e1e:	4b35      	ldr	r3, [pc, #212]	; (10009ef4 <sms_imu_comp_initialize+0xf8>)
10009e20:	63e3      	str	r3, [r4, #60]	; 0x3c
	/* !!! SET MAGNETOMETER BIAS VALUES !!! SHOULD BE CALCULATED AUTOMATICALLY !!! */

	// First extract the factory calibration for each magnetometer axis
	uint8_t data[3];  // x/y/z gyro calibration data stored here
	writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
10009e22:	2200      	movs	r2, #0
10009e24:	210a      	movs	r1, #10
10009e26:	200c      	movs	r0, #12
10009e28:	4e33      	ldr	r6, [pc, #204]	; (10009ef8 <sms_imu_comp_initialize+0xfc>)
10009e2a:	47b0      	blx	r6
	delay_ms(10);
10009e2c:	200a      	movs	r0, #10
10009e2e:	4b33      	ldr	r3, [pc, #204]	; (10009efc <sms_imu_comp_initialize+0x100>)
10009e30:	4798      	blx	r3
	writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x0F); // Enter Fuse ROM access mode
10009e32:	220f      	movs	r2, #15
10009e34:	210a      	movs	r1, #10
10009e36:	200c      	movs	r0, #12
10009e38:	47b0      	blx	r6
	delay_ms(10);
10009e3a:	200a      	movs	r0, #10
10009e3c:	4b2f      	ldr	r3, [pc, #188]	; (10009efc <sms_imu_comp_initialize+0x100>)
10009e3e:	4798      	blx	r3
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
10009e40:	af01      	add	r7, sp, #4
10009e42:	003b      	movs	r3, r7
10009e44:	2203      	movs	r2, #3
10009e46:	2110      	movs	r1, #16
10009e48:	200c      	movs	r0, #12
10009e4a:	4d2d      	ldr	r5, [pc, #180]	; (10009f00 <sms_imu_comp_initialize+0x104>)
10009e4c:	47a8      	blx	r5
	writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
	delay_ms(10);
	writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x0F); // Enter Fuse ROM access mode
	delay_ms(10);
	readBytes(AK8963_ADDRESS, AK8963_ASAX, 3, data);  // Read the x-, y-, and z-axis calibration values
	destination[0] =  (float)(data[0] - 128)/256. + 1.;   // Return x-axis sensitivity adjustment values, etc.
10009e4e:	7838      	ldrb	r0, [r7, #0]
10009e50:	3880      	subs	r0, #128	; 0x80
10009e52:	4b2c      	ldr	r3, [pc, #176]	; (10009f04 <sms_imu_comp_initialize+0x108>)
10009e54:	469b      	mov	fp, r3
10009e56:	4798      	blx	r3
10009e58:	4b2b      	ldr	r3, [pc, #172]	; (10009f08 <sms_imu_comp_initialize+0x10c>)
10009e5a:	469a      	mov	sl, r3
10009e5c:	4798      	blx	r3
10009e5e:	2200      	movs	r2, #0
10009e60:	4b2a      	ldr	r3, [pc, #168]	; (10009f0c <sms_imu_comp_initialize+0x110>)
10009e62:	4d2b      	ldr	r5, [pc, #172]	; (10009f10 <sms_imu_comp_initialize+0x114>)
10009e64:	47a8      	blx	r5
10009e66:	2200      	movs	r2, #0
10009e68:	4b2a      	ldr	r3, [pc, #168]	; (10009f14 <sms_imu_comp_initialize+0x118>)
10009e6a:	4d2b      	ldr	r5, [pc, #172]	; (10009f18 <sms_imu_comp_initialize+0x11c>)
10009e6c:	47a8      	blx	r5
10009e6e:	4b2b      	ldr	r3, [pc, #172]	; (10009f1c <sms_imu_comp_initialize+0x120>)
10009e70:	4699      	mov	r9, r3
10009e72:	4798      	blx	r3
10009e74:	4643      	mov	r3, r8
10009e76:	6018      	str	r0, [r3, #0]
	destination[1] =  (float)(data[1] - 128)/256. + 1.;
10009e78:	7878      	ldrb	r0, [r7, #1]
10009e7a:	3880      	subs	r0, #128	; 0x80
10009e7c:	47d8      	blx	fp
10009e7e:	47d0      	blx	sl
10009e80:	2200      	movs	r2, #0
10009e82:	4b22      	ldr	r3, [pc, #136]	; (10009f0c <sms_imu_comp_initialize+0x110>)
10009e84:	4d22      	ldr	r5, [pc, #136]	; (10009f10 <sms_imu_comp_initialize+0x114>)
10009e86:	47a8      	blx	r5
10009e88:	2200      	movs	r2, #0
10009e8a:	4b22      	ldr	r3, [pc, #136]	; (10009f14 <sms_imu_comp_initialize+0x118>)
10009e8c:	4d22      	ldr	r5, [pc, #136]	; (10009f18 <sms_imu_comp_initialize+0x11c>)
10009e8e:	47a8      	blx	r5
10009e90:	47c8      	blx	r9
10009e92:	4643      	mov	r3, r8
10009e94:	6058      	str	r0, [r3, #4]
	destination[2] =  (float)(data[2] - 128)/256. + 1.;
10009e96:	78b8      	ldrb	r0, [r7, #2]
10009e98:	3880      	subs	r0, #128	; 0x80
10009e9a:	47d8      	blx	fp
10009e9c:	47d0      	blx	sl
10009e9e:	2200      	movs	r2, #0
10009ea0:	4b1a      	ldr	r3, [pc, #104]	; (10009f0c <sms_imu_comp_initialize+0x110>)
10009ea2:	4d1b      	ldr	r5, [pc, #108]	; (10009f10 <sms_imu_comp_initialize+0x114>)
10009ea4:	47a8      	blx	r5
10009ea6:	2200      	movs	r2, #0
10009ea8:	4b1a      	ldr	r3, [pc, #104]	; (10009f14 <sms_imu_comp_initialize+0x118>)
10009eaa:	4d1b      	ldr	r5, [pc, #108]	; (10009f18 <sms_imu_comp_initialize+0x11c>)
10009eac:	47a8      	blx	r5
10009eae:	47c8      	blx	r9
10009eb0:	4643      	mov	r3, r8
10009eb2:	6098      	str	r0, [r3, #8]
	writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
10009eb4:	2200      	movs	r2, #0
10009eb6:	210a      	movs	r1, #10
10009eb8:	200c      	movs	r0, #12
10009eba:	47b0      	blx	r6
	delay_ms(10);
10009ebc:	200a      	movs	r0, #10
10009ebe:	4b0f      	ldr	r3, [pc, #60]	; (10009efc <sms_imu_comp_initialize+0x100>)
10009ec0:	4798      	blx	r3
	// Configure the magnetometer for continuous read and highest resolution
	// set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
	// and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
	writeByte(AK8963_ADDRESS, AK8963_CNTL, imu_device.config.m_scale << 4 | imu_device.config.m_mode); // Set magnetometer data resolution and sample ODR
10009ec2:	78a2      	ldrb	r2, [r4, #2]
10009ec4:	0112      	lsls	r2, r2, #4
10009ec6:	78e3      	ldrb	r3, [r4, #3]
10009ec8:	431a      	orrs	r2, r3
10009eca:	b2d2      	uxtb	r2, r2
10009ecc:	210a      	movs	r1, #10
10009ece:	200c      	movs	r0, #12
10009ed0:	47b0      	blx	r6
	delay_ms(10);
10009ed2:	200a      	movs	r0, #10
10009ed4:	4b09      	ldr	r3, [pc, #36]	; (10009efc <sms_imu_comp_initialize+0x100>)
10009ed6:	4798      	blx	r3
}
10009ed8:	b003      	add	sp, #12
10009eda:	bc3c      	pop	{r2, r3, r4, r5}
10009edc:	4690      	mov	r8, r2
10009ede:	4699      	mov	r9, r3
10009ee0:	46a2      	mov	sl, r4
10009ee2:	46ab      	mov	fp, r5
10009ee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009ee6:	46c0      	nop			; (mov r8, r8)
10009ee8:	1001a550 	.word	0x1001a550
10009eec:	43eb0000 	.word	0x43eb0000
10009ef0:	42f00000 	.word	0x42f00000
10009ef4:	42fa0000 	.word	0x42fa0000
10009ef8:	10009a6d 	.word	0x10009a6d
10009efc:	1000aff1 	.word	0x1000aff1
10009f00:	100097ad 	.word	0x100097ad
10009f04:	10014659 	.word	0x10014659
10009f08:	10016341 	.word	0x10016341
10009f0c:	3f700000 	.word	0x3f700000
10009f10:	10015605 	.word	0x10015605
10009f14:	3ff00000 	.word	0x3ff00000
10009f18:	10014765 	.word	0x10014765
10009f1c:	100163e9 	.word	0x100163e9

10009f20 <readByte>:
void writeByte(uint8_t address, uint8_t subAddress, uint8_t data)
{
	sms_i2c_master_write(address, subAddress, 1, &data);
}
uint8_t readByte(uint8_t address, uint8_t subAddress)
{
10009f20:	b530      	push	{r4, r5, lr}
10009f22:	b083      	sub	sp, #12
	uint8_t data[1];
	sms_i2c_master_read(address, subAddress, 1, data);
10009f24:	ac01      	add	r4, sp, #4
10009f26:	0023      	movs	r3, r4
10009f28:	2201      	movs	r2, #1
10009f2a:	4d02      	ldr	r5, [pc, #8]	; (10009f34 <readByte+0x14>)
10009f2c:	47a8      	blx	r5
	return data[0];
10009f2e:	7820      	ldrb	r0, [r4, #0]
}
10009f30:	b003      	add	sp, #12
10009f32:	bd30      	pop	{r4, r5, pc}
10009f34:	100097ad 	.word	0x100097ad

10009f38 <sms_imu_comp_check>:
	}
	return retVal;
}
/* Check if the compass responds */
int sms_imu_comp_check(void)
{
10009f38:	b510      	push	{r4, lr}
	int retVal = -1;
	uint8_t d = readByte(AK8963_ADDRESS, AK8963_WHO_AM_I);
10009f3a:	2100      	movs	r1, #0
10009f3c:	200c      	movs	r0, #12
10009f3e:	4b03      	ldr	r3, [pc, #12]	; (10009f4c <sms_imu_comp_check+0x14>)
10009f40:	4798      	blx	r3
	if(d == 0x48) {
		//DBG_LOG("[sms_mpu_comp_check]\t\tAK8963 is online...");
		retVal = 0;
	}
	return retVal;
10009f42:	3848      	subs	r0, #72	; 0x48
10009f44:	1e43      	subs	r3, r0, #1
10009f46:	4198      	sbcs	r0, r3
10009f48:	4240      	negs	r0, r0
}
10009f4a:	bd10      	pop	{r4, pc}
10009f4c:	10009f21 	.word	0x10009f21

10009f50 <sms_imu_mpu_initialize>:


/* Initialization functions... */
/* MPU */
void sms_imu_mpu_initialize(void)
{
10009f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	imu_device.config.a_scale = AFS_2G;
10009f52:	4f25      	ldr	r7, [pc, #148]	; (10009fe8 <sms_imu_mpu_initialize+0x98>)
10009f54:	2300      	movs	r3, #0
10009f56:	703b      	strb	r3, [r7, #0]
	imu_device.config.g_scale = GFS_250DPS;
10009f58:	707b      	strb	r3, [r7, #1]
	imu_device.config.ahrs = false;
10009f5a:	224c      	movs	r2, #76	; 0x4c
10009f5c:	54bb      	strb	r3, [r7, r2]

	// wake up device
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x00); // Clear sleep mode bit (6), enable all sensors
10009f5e:	2200      	movs	r2, #0
10009f60:	216b      	movs	r1, #107	; 0x6b
10009f62:	2069      	movs	r0, #105	; 0x69
10009f64:	4c21      	ldr	r4, [pc, #132]	; (10009fec <sms_imu_mpu_initialize+0x9c>)
10009f66:	47a0      	blx	r4
	delay_ms(100); // Wait for all registers to reset
10009f68:	2064      	movs	r0, #100	; 0x64
10009f6a:	4d21      	ldr	r5, [pc, #132]	; (10009ff0 <sms_imu_mpu_initialize+0xa0>)
10009f6c:	47a8      	blx	r5

	// get stable time source
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);  // Auto select clock source to be PLL gyroscope reference if ready else
10009f6e:	2201      	movs	r2, #1
10009f70:	216b      	movs	r1, #107	; 0x6b
10009f72:	2069      	movs	r0, #105	; 0x69
10009f74:	47a0      	blx	r4
	delay_ms(200);
10009f76:	20c8      	movs	r0, #200	; 0xc8
10009f78:	47a8      	blx	r5
	// minimum delay time for this setting is 5.9 ms, which means sensor fusion update rates cannot
	// be higher than 1 / 0.0059 = 170 Hz
	// DLPF_CFG = bits 2:0 = 011; this limits the sample rate to 1000 Hz for both
	// With the MPU9250, it is possible to get gyro sample rates of 32 kHz (!), 8 kHz, or 1 kHz
	// writeByte(MPU9250_ADDRESS, CONFIG, 0x03);
	writeByte(MPU9250_ADDRESS, CONFIG, 0x03);		// gyro bandwidth = 10 Hz, delay = 17.85 ms -> max rate = 56 Hz
10009f7a:	2203      	movs	r2, #3
10009f7c:	211a      	movs	r1, #26
10009f7e:	2069      	movs	r0, #105	; 0x69
10009f80:	47a0      	blx	r4

	// Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
	writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x0A);  	// Use a 90 Hz rate; a rate consistent with the filter update rate
10009f82:	220a      	movs	r2, #10
10009f84:	2119      	movs	r1, #25
10009f86:	2069      	movs	r0, #105	; 0x69
10009f88:	47a0      	blx	r4
	// // determined inset in CONFIG above
	//writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x63);  	// Use a 10 Hz rate; a rate consistent with the filter update rate
	
	// Set gyroscope full scale range
	// Range selects FS_SEL and AFS_SEL are 0 - 3, so 2-bit values are left-shifted into positions 4:3
	uint8_t c = readByte(MPU9250_ADDRESS, GYRO_CONFIG); // get current GYRO_CONFIG register value
10009f8a:	211b      	movs	r1, #27
10009f8c:	2069      	movs	r0, #105	; 0x69
10009f8e:	4e19      	ldr	r6, [pc, #100]	; (10009ff4 <sms_imu_mpu_initialize+0xa4>)
10009f90:	47b0      	blx	r6
	// c = c & ~0xE0; // Clear self-test bits [7:5]
	c = c & ~0x02; // Clear Fchoice bits [1:0]
	c = c & ~0x18; // Clear AFS bits [4:3]
	c = c | (imu_device.config.g_scale << 3); // Set full scale range for the gyro
10009f92:	787a      	ldrb	r2, [r7, #1]
10009f94:	00d2      	lsls	r2, r2, #3
10009f96:	231a      	movs	r3, #26
10009f98:	4398      	bics	r0, r3
10009f9a:	4302      	orrs	r2, r0
	// c =| 0x00; // Set Fchoice for the gyro to 11 by writing its inverse to bits 1:0 of GYRO_CONFIG
	writeByte(MPU9250_ADDRESS, GYRO_CONFIG, c ); // Write new GYRO_CONFIG value to register
10009f9c:	b2d2      	uxtb	r2, r2
10009f9e:	211b      	movs	r1, #27
10009fa0:	2069      	movs	r0, #105	; 0x69
10009fa2:	47a0      	blx	r4
	
	// Set accelerometer full-scale range configuration
	c = readByte(MPU9250_ADDRESS, ACCEL_CONFIG); // get current ACCEL_CONFIG register value
10009fa4:	211c      	movs	r1, #28
10009fa6:	2069      	movs	r0, #105	; 0x69
10009fa8:	47b0      	blx	r6
	// c = c & ~0xE0; // Clear self-test bits [7:5]
	c = c & ~0x18;  // Clear AFS bits [4:3]
	c = c | (imu_device.config.a_scale << 3); // Set full scale range for the accelerometer
10009faa:	783a      	ldrb	r2, [r7, #0]
10009fac:	00d2      	lsls	r2, r2, #3
10009fae:	2318      	movs	r3, #24
10009fb0:	4398      	bics	r0, r3
10009fb2:	4302      	orrs	r2, r0
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, c); // Write new ACCEL_CONFIG register value
10009fb4:	b2d2      	uxtb	r2, r2
10009fb6:	211c      	movs	r1, #28
10009fb8:	2069      	movs	r0, #105	; 0x69
10009fba:	47a0      	blx	r4

	// Set accelerometer sample rate configuration
	// It is possible to get a 4 kHz sample rate from the accelerometer by choosing 1 for
	// accel_fchoice_b bit [3]; in this case the bandwidth is 1.13 kHz
	c = readByte(MPU9250_ADDRESS, ACCEL_CONFIG2); // get current ACCEL_CONFIG2 register value
10009fbc:	211d      	movs	r1, #29
10009fbe:	2069      	movs	r0, #105	; 0x69
10009fc0:	47b0      	blx	r6
	c = c & ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
10009fc2:	23f0      	movs	r3, #240	; 0xf0
10009fc4:	0002      	movs	r2, r0
10009fc6:	401a      	ands	r2, r3
	// c = c | 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
	c = c | 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz, delay 11.8 ms
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, c); // Write new ACCEL_CONFIG2 register value
10009fc8:	3bed      	subs	r3, #237	; 0xed
10009fca:	431a      	orrs	r2, r3
10009fcc:	211d      	movs	r1, #29
10009fce:	2069      	movs	r0, #105	; 0x69
10009fd0:	47a0      	blx	r4
	// Configure Interrupts and Bypass Enable
	// Set interrupt pin active high, push-pull, send 50 us interrupt pulses,
	// clear on ANY read, and enable I2C_BYPASS_EN so additional chips
	// can join the I2C bus and all can be controlled by the Arduino as master
	//writeByte(MPU9250_ADDRESS, INT_PIN_CFG, 0x22);
	writeByte(MPU9250_ADDRESS, INT_PIN_CFG, 0x12);
10009fd2:	2212      	movs	r2, #18
10009fd4:	2137      	movs	r1, #55	; 0x37
10009fd6:	2069      	movs	r0, #105	; 0x69
10009fd8:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x01);  // Enable data ready (bit 0) interrupt
10009fda:	2201      	movs	r2, #1
10009fdc:	2138      	movs	r1, #56	; 0x38
10009fde:	2069      	movs	r0, #105	; 0x69
10009fe0:	47a0      	blx	r4
	delay_ms(100);
10009fe2:	2064      	movs	r0, #100	; 0x64
10009fe4:	47a8      	blx	r5
}
10009fe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10009fe8:	1001a550 	.word	0x1001a550
10009fec:	10009a6d 	.word	0x10009a6d
10009ff0:	1000aff1 	.word	0x1000aff1
10009ff4:	10009f21 	.word	0x10009f21

10009ff8 <sms_imu_selftest>:
	//uint32_t p5 = dest2[2] * 10000;
	//DBG_LOG("destX: %ld %ld %ld / %ld %ld %ld", p0, p1, p2, p3, p4, p5);
}
/* Self-test */
void sms_imu_selftest(float *destination)
{
10009ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
10009ffa:	465f      	mov	r7, fp
10009ffc:	4656      	mov	r6, sl
10009ffe:	464d      	mov	r5, r9
1000a000:	4644      	mov	r4, r8
1000a002:	b4f0      	push	{r4, r5, r6, r7}
1000a004:	b09d      	sub	sp, #116	; 0x74
1000a006:	9003      	str	r0, [sp, #12]
	uint8_t raw_data[6] = {0};
1000a008:	2206      	movs	r2, #6
1000a00a:	2100      	movs	r1, #0
1000a00c:	a81a      	add	r0, sp, #104	; 0x68
1000a00e:	4ce0      	ldr	r4, [pc, #896]	; (1000a390 <sms_imu_selftest+0x398>)
1000a010:	47a0      	blx	r4
	uint8_t stest[6];
	int32_t g_avg[3] = {0}, a_avg[3] = {0}, a_stavg[3] = {0}, g_stavg[3] = {0};
1000a012:	220c      	movs	r2, #12
1000a014:	2100      	movs	r1, #0
1000a016:	a817      	add	r0, sp, #92	; 0x5c
1000a018:	47a0      	blx	r4
1000a01a:	220c      	movs	r2, #12
1000a01c:	2100      	movs	r1, #0
1000a01e:	a814      	add	r0, sp, #80	; 0x50
1000a020:	47a0      	blx	r4
1000a022:	220c      	movs	r2, #12
1000a024:	2100      	movs	r1, #0
1000a026:	a811      	add	r0, sp, #68	; 0x44
1000a028:	47a0      	blx	r4
1000a02a:	220c      	movs	r2, #12
1000a02c:	2100      	movs	r1, #0
1000a02e:	a80e      	add	r0, sp, #56	; 0x38
1000a030:	47a0      	blx	r4
	float factory_trim[6];
	uint8_t fs = 0;
	
	writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x00);	// Set gyro sample rate to 1 kHz
1000a032:	2200      	movs	r2, #0
1000a034:	2119      	movs	r1, #25
1000a036:	2069      	movs	r0, #105	; 0x69
1000a038:	4cd6      	ldr	r4, [pc, #856]	; (1000a394 <sms_imu_selftest+0x39c>)
1000a03a:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, CONFIG, 0x02);		// Set gyro sample rate to 1 kHz and DLPF to 92 Hz
1000a03c:	2202      	movs	r2, #2
1000a03e:	211a      	movs	r1, #26
1000a040:	2069      	movs	r0, #105	; 0x69
1000a042:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, GYRO_CONFIG, fs<<3);	// Set full scale range for the gyro to 250 dps
1000a044:	2200      	movs	r2, #0
1000a046:	211b      	movs	r1, #27
1000a048:	2069      	movs	r0, #105	; 0x69
1000a04a:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, 0x02);	// Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
1000a04c:	2202      	movs	r2, #2
1000a04e:	211d      	movs	r1, #29
1000a050:	2069      	movs	r0, #105	; 0x69
1000a052:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, fs<<3);	// Set full scale range for the accelerometer to 2 g
1000a054:	2200      	movs	r2, #0
1000a056:	211c      	movs	r1, #28
1000a058:	2069      	movs	r0, #105	; 0x69
1000a05a:	47a0      	blx	r4
1000a05c:	25c8      	movs	r5, #200	; 0xc8
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
1000a05e:	ac1a      	add	r4, sp, #104	; 0x68
1000a060:	4ecd      	ldr	r6, [pc, #820]	; (1000a398 <sms_imu_selftest+0x3a0>)
1000a062:	0023      	movs	r3, r4
1000a064:	2206      	movs	r2, #6
1000a066:	213b      	movs	r1, #59	; 0x3b
1000a068:	2069      	movs	r0, #105	; 0x69
1000a06a:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, 0x02);	// Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, fs<<3);	// Set full scale range for the accelerometer to 2 g
	
	for(uint8_t i = 0; i < 200; i++) { // get average current values of gyro and accelerometer
		readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 6, raw_data);
		a_avg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]);
1000a06c:	7823      	ldrb	r3, [r4, #0]
1000a06e:	021b      	lsls	r3, r3, #8
1000a070:	7862      	ldrb	r2, [r4, #1]
1000a072:	4313      	orrs	r3, r2
1000a074:	b21b      	sxth	r3, r3
1000a076:	9a14      	ldr	r2, [sp, #80]	; 0x50
1000a078:	4694      	mov	ip, r2
1000a07a:	4463      	add	r3, ip
1000a07c:	9314      	str	r3, [sp, #80]	; 0x50
		a_avg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]);
1000a07e:	78a3      	ldrb	r3, [r4, #2]
1000a080:	021b      	lsls	r3, r3, #8
1000a082:	78e2      	ldrb	r2, [r4, #3]
1000a084:	4313      	orrs	r3, r2
1000a086:	b21b      	sxth	r3, r3
1000a088:	9a15      	ldr	r2, [sp, #84]	; 0x54
1000a08a:	9200      	str	r2, [sp, #0]
1000a08c:	4694      	mov	ip, r2
1000a08e:	4463      	add	r3, ip
1000a090:	9315      	str	r3, [sp, #84]	; 0x54
		a_avg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]);
1000a092:	7923      	ldrb	r3, [r4, #4]
1000a094:	021b      	lsls	r3, r3, #8
1000a096:	7962      	ldrb	r2, [r4, #5]
1000a098:	4313      	orrs	r3, r2
1000a09a:	b21b      	sxth	r3, r3
1000a09c:	9a16      	ldr	r2, [sp, #88]	; 0x58
1000a09e:	9200      	str	r2, [sp, #0]
1000a0a0:	4694      	mov	ip, r2
1000a0a2:	4463      	add	r3, ip
1000a0a4:	9316      	str	r3, [sp, #88]	; 0x58
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
1000a0a6:	0023      	movs	r3, r4
1000a0a8:	2206      	movs	r2, #6
1000a0aa:	2143      	movs	r1, #67	; 0x43
1000a0ac:	2069      	movs	r0, #105	; 0x69
1000a0ae:	47b0      	blx	r6
		a_avg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]);
		a_avg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]);
		a_avg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]);
		
		readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, raw_data);
		g_avg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]);
1000a0b0:	7823      	ldrb	r3, [r4, #0]
1000a0b2:	021b      	lsls	r3, r3, #8
1000a0b4:	7862      	ldrb	r2, [r4, #1]
1000a0b6:	4313      	orrs	r3, r2
1000a0b8:	b21b      	sxth	r3, r3
1000a0ba:	9a17      	ldr	r2, [sp, #92]	; 0x5c
1000a0bc:	4694      	mov	ip, r2
1000a0be:	4463      	add	r3, ip
1000a0c0:	9317      	str	r3, [sp, #92]	; 0x5c
		g_avg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]);
1000a0c2:	78a3      	ldrb	r3, [r4, #2]
1000a0c4:	021b      	lsls	r3, r3, #8
1000a0c6:	78e2      	ldrb	r2, [r4, #3]
1000a0c8:	4313      	orrs	r3, r2
1000a0ca:	b21b      	sxth	r3, r3
1000a0cc:	9a18      	ldr	r2, [sp, #96]	; 0x60
1000a0ce:	9200      	str	r2, [sp, #0]
1000a0d0:	4694      	mov	ip, r2
1000a0d2:	4463      	add	r3, ip
1000a0d4:	9318      	str	r3, [sp, #96]	; 0x60
		g_avg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]);
1000a0d6:	7923      	ldrb	r3, [r4, #4]
1000a0d8:	021b      	lsls	r3, r3, #8
1000a0da:	7962      	ldrb	r2, [r4, #5]
1000a0dc:	4313      	orrs	r3, r2
1000a0de:	b21b      	sxth	r3, r3
1000a0e0:	9a19      	ldr	r2, [sp, #100]	; 0x64
1000a0e2:	9200      	str	r2, [sp, #0]
1000a0e4:	4694      	mov	ip, r2
1000a0e6:	4463      	add	r3, ip
1000a0e8:	9319      	str	r3, [sp, #100]	; 0x64
1000a0ea:	3d01      	subs	r5, #1
1000a0ec:	b2ed      	uxtb	r5, r5
	writeByte(MPU9250_ADDRESS, CONFIG, 0x02);		// Set gyro sample rate to 1 kHz and DLPF to 92 Hz
	writeByte(MPU9250_ADDRESS, GYRO_CONFIG, fs<<3);	// Set full scale range for the gyro to 250 dps
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, 0x02);	// Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, fs<<3);	// Set full scale range for the accelerometer to 2 g
	
	for(uint8_t i = 0; i < 200; i++) { // get average current values of gyro and accelerometer
1000a0ee:	2d00      	cmp	r5, #0
1000a0f0:	d1b7      	bne.n	1000a062 <sms_imu_selftest+0x6a>
1000a0f2:	2400      	movs	r4, #0
		g_avg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]);
		g_avg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]);
		g_avg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]);
	}
	for(uint8_t i = 0; i < 3; i++) { // get average of 200 values and store as average current readings
		a_avg[i] /= 200;
1000a0f4:	4ea9      	ldr	r6, [pc, #676]	; (1000a39c <sms_imu_selftest+0x3a4>)
1000a0f6:	ad14      	add	r5, sp, #80	; 0x50
1000a0f8:	21c8      	movs	r1, #200	; 0xc8
1000a0fa:	5960      	ldr	r0, [r4, r5]
1000a0fc:	47b0      	blx	r6
1000a0fe:	5160      	str	r0, [r4, r5]
		g_avg[i] /= 200;
1000a100:	ad17      	add	r5, sp, #92	; 0x5c
1000a102:	21c8      	movs	r1, #200	; 0xc8
1000a104:	5960      	ldr	r0, [r4, r5]
1000a106:	47b0      	blx	r6
1000a108:	5160      	str	r0, [r4, r5]
1000a10a:	3404      	adds	r4, #4
		readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, raw_data);
		g_avg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]);
		g_avg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]);
		g_avg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]);
	}
	for(uint8_t i = 0; i < 3; i++) { // get average of 200 values and store as average current readings
1000a10c:	2c0c      	cmp	r4, #12
1000a10e:	d1f2      	bne.n	1000a0f6 <sms_imu_selftest+0xfe>
		a_avg[i] /= 200;
		g_avg[i] /= 200;
	}
	
	// Configure the accelerometer for self-test
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set accelerometer range to +/- 2 g
1000a110:	22e0      	movs	r2, #224	; 0xe0
1000a112:	211c      	movs	r1, #28
1000a114:	2069      	movs	r0, #105	; 0x69
1000a116:	4c9f      	ldr	r4, [pc, #636]	; (1000a394 <sms_imu_selftest+0x39c>)
1000a118:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set (MPU9250_ADDRESS, GYRO_CONFIG,  0xE0); // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
1000a11a:	22e0      	movs	r2, #224	; 0xe0
1000a11c:	211c      	movs	r1, #28
1000a11e:	2069      	movs	r0, #105	; 0x69
1000a120:	47a0      	blx	r4
	delay_ms(25);  // Delay a while to let the device stabilize
1000a122:	2019      	movs	r0, #25
1000a124:	4b9e      	ldr	r3, [pc, #632]	; (1000a3a0 <sms_imu_selftest+0x3a8>)
1000a126:	4798      	blx	r3
1000a128:	25c8      	movs	r5, #200	; 0xc8
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
1000a12a:	ac1a      	add	r4, sp, #104	; 0x68
1000a12c:	4e9a      	ldr	r6, [pc, #616]	; (1000a398 <sms_imu_selftest+0x3a0>)
1000a12e:	0023      	movs	r3, r4
1000a130:	2206      	movs	r2, #6
1000a132:	213b      	movs	r1, #59	; 0x3b
1000a134:	2069      	movs	r0, #105	; 0x69
1000a136:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set (MPU9250_ADDRESS, GYRO_CONFIG,  0xE0); // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
	delay_ms(25);  // Delay a while to let the device stabilize
	
	for(uint8_t i = 0; i < 200; i++) {  // get average self-test values of gyro and accelerometer
		readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 6, raw_data);  // Read the six raw data registers into data array
		a_stavg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
1000a138:	7823      	ldrb	r3, [r4, #0]
1000a13a:	021b      	lsls	r3, r3, #8
1000a13c:	7862      	ldrb	r2, [r4, #1]
1000a13e:	4313      	orrs	r3, r2
1000a140:	b21b      	sxth	r3, r3
1000a142:	9a11      	ldr	r2, [sp, #68]	; 0x44
1000a144:	4694      	mov	ip, r2
1000a146:	4463      	add	r3, ip
1000a148:	9311      	str	r3, [sp, #68]	; 0x44
		a_stavg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]) ;
1000a14a:	78a3      	ldrb	r3, [r4, #2]
1000a14c:	021b      	lsls	r3, r3, #8
1000a14e:	78e2      	ldrb	r2, [r4, #3]
1000a150:	4313      	orrs	r3, r2
1000a152:	b21b      	sxth	r3, r3
1000a154:	9a12      	ldr	r2, [sp, #72]	; 0x48
1000a156:	9200      	str	r2, [sp, #0]
1000a158:	4694      	mov	ip, r2
1000a15a:	4463      	add	r3, ip
1000a15c:	9312      	str	r3, [sp, #72]	; 0x48
		a_stavg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]) ;
1000a15e:	7923      	ldrb	r3, [r4, #4]
1000a160:	021b      	lsls	r3, r3, #8
1000a162:	7962      	ldrb	r2, [r4, #5]
1000a164:	4313      	orrs	r3, r2
1000a166:	b21b      	sxth	r3, r3
1000a168:	9a13      	ldr	r2, [sp, #76]	; 0x4c
1000a16a:	9200      	str	r2, [sp, #0]
1000a16c:	4694      	mov	ip, r2
1000a16e:	4463      	add	r3, ip
1000a170:	9313      	str	r3, [sp, #76]	; 0x4c
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
1000a172:	0023      	movs	r3, r4
1000a174:	2206      	movs	r2, #6
1000a176:	2143      	movs	r1, #67	; 0x43
1000a178:	2069      	movs	r0, #105	; 0x69
1000a17a:	47b0      	blx	r6
		a_stavg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
		a_stavg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]) ;
		a_stavg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]) ;
		
		readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, raw_data);  // Read the six raw data registers sequentially into data array
		g_stavg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
1000a17c:	7823      	ldrb	r3, [r4, #0]
1000a17e:	021b      	lsls	r3, r3, #8
1000a180:	7862      	ldrb	r2, [r4, #1]
1000a182:	4313      	orrs	r3, r2
1000a184:	b21b      	sxth	r3, r3
1000a186:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1000a188:	4694      	mov	ip, r2
1000a18a:	4463      	add	r3, ip
1000a18c:	930e      	str	r3, [sp, #56]	; 0x38
		g_stavg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]) ;
1000a18e:	78a3      	ldrb	r3, [r4, #2]
1000a190:	021b      	lsls	r3, r3, #8
1000a192:	78e2      	ldrb	r2, [r4, #3]
1000a194:	4313      	orrs	r3, r2
1000a196:	b21b      	sxth	r3, r3
1000a198:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
1000a19a:	9200      	str	r2, [sp, #0]
1000a19c:	4694      	mov	ip, r2
1000a19e:	4463      	add	r3, ip
1000a1a0:	930f      	str	r3, [sp, #60]	; 0x3c
		g_stavg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]) ;
1000a1a2:	7923      	ldrb	r3, [r4, #4]
1000a1a4:	021b      	lsls	r3, r3, #8
1000a1a6:	7962      	ldrb	r2, [r4, #5]
1000a1a8:	4313      	orrs	r3, r2
1000a1aa:	b21b      	sxth	r3, r3
1000a1ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
1000a1ae:	9200      	str	r2, [sp, #0]
1000a1b0:	4694      	mov	ip, r2
1000a1b2:	4463      	add	r3, ip
1000a1b4:	9310      	str	r3, [sp, #64]	; 0x40
1000a1b6:	3d01      	subs	r5, #1
1000a1b8:	b2ed      	uxtb	r5, r5
	// Configure the accelerometer for self-test
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set accelerometer range to +/- 2 g
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set (MPU9250_ADDRESS, GYRO_CONFIG,  0xE0); // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
	delay_ms(25);  // Delay a while to let the device stabilize
	
	for(uint8_t i = 0; i < 200; i++) {  // get average self-test values of gyro and accelerometer
1000a1ba:	2d00      	cmp	r5, #0
1000a1bc:	d1b7      	bne.n	1000a12e <sms_imu_selftest+0x136>
1000a1be:	2400      	movs	r4, #0
		g_stavg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
		g_stavg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]) ;
		g_stavg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]) ;
	}
	for(uint8_t i = 0; i < 3; i++) { // get average of 200 values and store as average self-test readings
		a_stavg[i] /= 200;
1000a1c0:	4e76      	ldr	r6, [pc, #472]	; (1000a39c <sms_imu_selftest+0x3a4>)
1000a1c2:	ad11      	add	r5, sp, #68	; 0x44
1000a1c4:	21c8      	movs	r1, #200	; 0xc8
1000a1c6:	5960      	ldr	r0, [r4, r5]
1000a1c8:	47b0      	blx	r6
1000a1ca:	5160      	str	r0, [r4, r5]
		g_stavg[i] /= 200;
1000a1cc:	ad0e      	add	r5, sp, #56	; 0x38
1000a1ce:	21c8      	movs	r1, #200	; 0xc8
1000a1d0:	5960      	ldr	r0, [r4, r5]
1000a1d2:	47b0      	blx	r6
1000a1d4:	5160      	str	r0, [r4, r5]
1000a1d6:	3404      	adds	r4, #4
		readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, raw_data);  // Read the six raw data registers sequentially into data array
		g_stavg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
		g_stavg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]) ;
		g_stavg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]) ;
	}
	for(uint8_t i = 0; i < 3; i++) { // get average of 200 values and store as average self-test readings
1000a1d8:	2c0c      	cmp	r4, #12
1000a1da:	d1f2      	bne.n	1000a1c2 <sms_imu_selftest+0x1ca>
		a_stavg[i] /= 200;
		g_stavg[i] /= 200;
	}

	// Configure the gyro and accelerometer for normal operation
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0x00);
1000a1dc:	2200      	movs	r2, #0
1000a1de:	211c      	movs	r1, #28
1000a1e0:	2069      	movs	r0, #105	; 0x69
1000a1e2:	4c6c      	ldr	r4, [pc, #432]	; (1000a394 <sms_imu_selftest+0x39c>)
1000a1e4:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, GYRO_CONFIG,  0x00);
1000a1e6:	2200      	movs	r2, #0
1000a1e8:	211b      	movs	r1, #27
1000a1ea:	2069      	movs	r0, #105	; 0x69
1000a1ec:	47a0      	blx	r4
	delay_ms(25);  // Delay a while to let the device stabilize
1000a1ee:	2019      	movs	r0, #25
1000a1f0:	4b6b      	ldr	r3, [pc, #428]	; (1000a3a0 <sms_imu_selftest+0x3a8>)
1000a1f2:	4798      	blx	r3

	// Retrieve accelerometer and gyro factory Self-Test Code from USR_Reg
	stest[0] = readByte(MPU9250_ADDRESS, SELF_TEST_X_ACCEL); // X-axis accel self-test results
1000a1f4:	210d      	movs	r1, #13
1000a1f6:	2069      	movs	r0, #105	; 0x69
1000a1f8:	4d6a      	ldr	r5, [pc, #424]	; (1000a3a4 <sms_imu_selftest+0x3ac>)
1000a1fa:	47a8      	blx	r5
1000a1fc:	0004      	movs	r4, r0
	stest[1] = readByte(MPU9250_ADDRESS, SELF_TEST_Y_ACCEL); // Y-axis accel self-test results
1000a1fe:	210e      	movs	r1, #14
1000a200:	2069      	movs	r0, #105	; 0x69
1000a202:	47a8      	blx	r5
1000a204:	9000      	str	r0, [sp, #0]
	stest[2] = readByte(MPU9250_ADDRESS, SELF_TEST_Z_ACCEL); // Z-axis accel self-test results
1000a206:	210f      	movs	r1, #15
1000a208:	2069      	movs	r0, #105	; 0x69
1000a20a:	47a8      	blx	r5
1000a20c:	9004      	str	r0, [sp, #16]
	stest[3] = readByte(MPU9250_ADDRESS, SELF_TEST_X_GYRO);  // X-axis gyro self-test results
1000a20e:	2100      	movs	r1, #0
1000a210:	2069      	movs	r0, #105	; 0x69
1000a212:	47a8      	blx	r5
1000a214:	9005      	str	r0, [sp, #20]
	stest[4] = readByte(MPU9250_ADDRESS, SELF_TEST_Y_GYRO);  // Y-axis gyro self-test results
1000a216:	2101      	movs	r1, #1
1000a218:	2069      	movs	r0, #105	; 0x69
1000a21a:	47a8      	blx	r5
1000a21c:	9006      	str	r0, [sp, #24]
	stest[5] = readByte(MPU9250_ADDRESS, SELF_TEST_Z_GYRO);  // Z-axis gyro self-test results
1000a21e:	2102      	movs	r1, #2
1000a220:	2069      	movs	r0, #105	; 0x69
1000a222:	47a8      	blx	r5
1000a224:	9007      	str	r0, [sp, #28]

	// Retrieve factory self-test value from self-test code reads
	factory_trim[0] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[0] - 1.0) )); // FT[Xa] factory trim calculation
1000a226:	4b60      	ldr	r3, [pc, #384]	; (1000a3a8 <sms_imu_selftest+0x3b0>)
1000a228:	469a      	mov	sl, r3
1000a22a:	0020      	movs	r0, r4
1000a22c:	4798      	blx	r3
1000a22e:	4b5f      	ldr	r3, [pc, #380]	; (1000a3ac <sms_imu_selftest+0x3b4>)
1000a230:	4699      	mov	r9, r3
1000a232:	4798      	blx	r3
1000a234:	4e5e      	ldr	r6, [pc, #376]	; (1000a3b0 <sms_imu_selftest+0x3b8>)
1000a236:	2200      	movs	r2, #0
1000a238:	4b5e      	ldr	r3, [pc, #376]	; (1000a3b4 <sms_imu_selftest+0x3bc>)
1000a23a:	47b0      	blx	r6
1000a23c:	0002      	movs	r2, r0
1000a23e:	000b      	movs	r3, r1
1000a240:	485d      	ldr	r0, [pc, #372]	; (1000a3b8 <sms_imu_selftest+0x3c0>)
1000a242:	495e      	ldr	r1, [pc, #376]	; (1000a3bc <sms_imu_selftest+0x3c4>)
1000a244:	4f5e      	ldr	r7, [pc, #376]	; (1000a3c0 <sms_imu_selftest+0x3c8>)
1000a246:	47b8      	blx	r7
1000a248:	4d5e      	ldr	r5, [pc, #376]	; (1000a3c4 <sms_imu_selftest+0x3cc>)
1000a24a:	2200      	movs	r2, #0
1000a24c:	4b5e      	ldr	r3, [pc, #376]	; (1000a3c8 <sms_imu_selftest+0x3d0>)
1000a24e:	47a8      	blx	r5
1000a250:	4c5e      	ldr	r4, [pc, #376]	; (1000a3cc <sms_imu_selftest+0x3d4>)
1000a252:	47a0      	blx	r4
1000a254:	9008      	str	r0, [sp, #32]
	factory_trim[1] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[1] - 1.0) )); // FT[Ya] factory trim calculation
1000a256:	9800      	ldr	r0, [sp, #0]
1000a258:	47d0      	blx	sl
1000a25a:	47c8      	blx	r9
1000a25c:	2200      	movs	r2, #0
1000a25e:	4b55      	ldr	r3, [pc, #340]	; (1000a3b4 <sms_imu_selftest+0x3bc>)
1000a260:	47b0      	blx	r6
1000a262:	0002      	movs	r2, r0
1000a264:	000b      	movs	r3, r1
1000a266:	4854      	ldr	r0, [pc, #336]	; (1000a3b8 <sms_imu_selftest+0x3c0>)
1000a268:	4954      	ldr	r1, [pc, #336]	; (1000a3bc <sms_imu_selftest+0x3c4>)
1000a26a:	47b8      	blx	r7
1000a26c:	2200      	movs	r2, #0
1000a26e:	4b56      	ldr	r3, [pc, #344]	; (1000a3c8 <sms_imu_selftest+0x3d0>)
1000a270:	47a8      	blx	r5
1000a272:	47a0      	blx	r4
1000a274:	9009      	str	r0, [sp, #36]	; 0x24
	factory_trim[2] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[2] - 1.0) )); // FT[Za] factory trim calculation
1000a276:	9804      	ldr	r0, [sp, #16]
1000a278:	47d0      	blx	sl
1000a27a:	47c8      	blx	r9
1000a27c:	2200      	movs	r2, #0
1000a27e:	4b4d      	ldr	r3, [pc, #308]	; (1000a3b4 <sms_imu_selftest+0x3bc>)
1000a280:	47b0      	blx	r6
1000a282:	0002      	movs	r2, r0
1000a284:	000b      	movs	r3, r1
1000a286:	484c      	ldr	r0, [pc, #304]	; (1000a3b8 <sms_imu_selftest+0x3c0>)
1000a288:	494c      	ldr	r1, [pc, #304]	; (1000a3bc <sms_imu_selftest+0x3c4>)
1000a28a:	47b8      	blx	r7
1000a28c:	2200      	movs	r2, #0
1000a28e:	4b4e      	ldr	r3, [pc, #312]	; (1000a3c8 <sms_imu_selftest+0x3d0>)
1000a290:	47a8      	blx	r5
1000a292:	47a0      	blx	r4
1000a294:	900a      	str	r0, [sp, #40]	; 0x28
	factory_trim[3] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[3] - 1.0) )); // FT[Xg] factory trim calculation
1000a296:	9805      	ldr	r0, [sp, #20]
1000a298:	47d0      	blx	sl
1000a29a:	47c8      	blx	r9
1000a29c:	2200      	movs	r2, #0
1000a29e:	4b45      	ldr	r3, [pc, #276]	; (1000a3b4 <sms_imu_selftest+0x3bc>)
1000a2a0:	47b0      	blx	r6
1000a2a2:	0002      	movs	r2, r0
1000a2a4:	000b      	movs	r3, r1
1000a2a6:	4844      	ldr	r0, [pc, #272]	; (1000a3b8 <sms_imu_selftest+0x3c0>)
1000a2a8:	4944      	ldr	r1, [pc, #272]	; (1000a3bc <sms_imu_selftest+0x3c4>)
1000a2aa:	47b8      	blx	r7
1000a2ac:	2200      	movs	r2, #0
1000a2ae:	4b46      	ldr	r3, [pc, #280]	; (1000a3c8 <sms_imu_selftest+0x3d0>)
1000a2b0:	47a8      	blx	r5
1000a2b2:	47a0      	blx	r4
1000a2b4:	900b      	str	r0, [sp, #44]	; 0x2c
	factory_trim[4] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[4] - 1.0) )); // FT[Yg] factory trim calculation
1000a2b6:	9806      	ldr	r0, [sp, #24]
1000a2b8:	47d0      	blx	sl
1000a2ba:	47c8      	blx	r9
1000a2bc:	2200      	movs	r2, #0
1000a2be:	4b3d      	ldr	r3, [pc, #244]	; (1000a3b4 <sms_imu_selftest+0x3bc>)
1000a2c0:	47b0      	blx	r6
1000a2c2:	0002      	movs	r2, r0
1000a2c4:	000b      	movs	r3, r1
1000a2c6:	483c      	ldr	r0, [pc, #240]	; (1000a3b8 <sms_imu_selftest+0x3c0>)
1000a2c8:	493c      	ldr	r1, [pc, #240]	; (1000a3bc <sms_imu_selftest+0x3c4>)
1000a2ca:	47b8      	blx	r7
1000a2cc:	2200      	movs	r2, #0
1000a2ce:	4b3e      	ldr	r3, [pc, #248]	; (1000a3c8 <sms_imu_selftest+0x3d0>)
1000a2d0:	47a8      	blx	r5
1000a2d2:	47a0      	blx	r4
1000a2d4:	900c      	str	r0, [sp, #48]	; 0x30
	factory_trim[5] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[5] - 1.0) )); // FT[Zg] factory trim calculation
1000a2d6:	9807      	ldr	r0, [sp, #28]
1000a2d8:	47d0      	blx	sl
1000a2da:	47c8      	blx	r9
1000a2dc:	2200      	movs	r2, #0
1000a2de:	4b35      	ldr	r3, [pc, #212]	; (1000a3b4 <sms_imu_selftest+0x3bc>)
1000a2e0:	47b0      	blx	r6
1000a2e2:	0002      	movs	r2, r0
1000a2e4:	000b      	movs	r3, r1
1000a2e6:	4834      	ldr	r0, [pc, #208]	; (1000a3b8 <sms_imu_selftest+0x3c0>)
1000a2e8:	4934      	ldr	r1, [pc, #208]	; (1000a3bc <sms_imu_selftest+0x3c4>)
1000a2ea:	47b8      	blx	r7
1000a2ec:	2200      	movs	r2, #0
1000a2ee:	4b36      	ldr	r3, [pc, #216]	; (1000a3c8 <sms_imu_selftest+0x3d0>)
1000a2f0:	47a8      	blx	r5
1000a2f2:	47a0      	blx	r4
1000a2f4:	900d      	str	r0, [sp, #52]	; 0x34
1000a2f6:	2400      	movs	r4, #0
	
	// Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
	// To get percent, must multiply by 100
	for (int i = 0; i < 3; i++) {
		destination[i]   = 100.0*((float)(a_stavg[i] - a_avg[i]))/factory_trim[i] - 100.;   // Report percent differences
1000a2f8:	4b35      	ldr	r3, [pc, #212]	; (1000a3d0 <sms_imu_selftest+0x3d8>)
1000a2fa:	4699      	mov	r9, r3
1000a2fc:	4d2b      	ldr	r5, [pc, #172]	; (1000a3ac <sms_imu_selftest+0x3b4>)
1000a2fe:	4b31      	ldr	r3, [pc, #196]	; (1000a3c4 <sms_imu_selftest+0x3cc>)
1000a300:	4698      	mov	r8, r3
1000a302:	4b34      	ldr	r3, [pc, #208]	; (1000a3d4 <sms_imu_selftest+0x3dc>)
1000a304:	469a      	mov	sl, r3
1000a306:	4f2a      	ldr	r7, [pc, #168]	; (1000a3b0 <sms_imu_selftest+0x3b8>)
1000a308:	4e30      	ldr	r6, [pc, #192]	; (1000a3cc <sms_imu_selftest+0x3d4>)
1000a30a:	ab11      	add	r3, sp, #68	; 0x44
1000a30c:	58e3      	ldr	r3, [r4, r3]
1000a30e:	aa14      	add	r2, sp, #80	; 0x50
1000a310:	58a0      	ldr	r0, [r4, r2]
1000a312:	1a18      	subs	r0, r3, r0
1000a314:	47c8      	blx	r9
1000a316:	47a8      	blx	r5
1000a318:	2200      	movs	r2, #0
1000a31a:	4b2f      	ldr	r3, [pc, #188]	; (1000a3d8 <sms_imu_selftest+0x3e0>)
1000a31c:	47c0      	blx	r8
1000a31e:	9000      	str	r0, [sp, #0]
1000a320:	9101      	str	r1, [sp, #4]
1000a322:	ab08      	add	r3, sp, #32
1000a324:	58e0      	ldr	r0, [r4, r3]
1000a326:	47a8      	blx	r5
1000a328:	0002      	movs	r2, r0
1000a32a:	000b      	movs	r3, r1
1000a32c:	9800      	ldr	r0, [sp, #0]
1000a32e:	9901      	ldr	r1, [sp, #4]
1000a330:	47d0      	blx	sl
1000a332:	2200      	movs	r2, #0
1000a334:	4b28      	ldr	r3, [pc, #160]	; (1000a3d8 <sms_imu_selftest+0x3e0>)
1000a336:	47b8      	blx	r7
1000a338:	47b0      	blx	r6
1000a33a:	9b03      	ldr	r3, [sp, #12]
1000a33c:	5118      	str	r0, [r3, r4]
		destination[i+3] = 100.0*((float)(g_stavg[i] - g_avg[i]))/factory_trim[i+3] - 100.; // Report percent differences
1000a33e:	469b      	mov	fp, r3
1000a340:	44a3      	add	fp, r4
1000a342:	ab0e      	add	r3, sp, #56	; 0x38
1000a344:	58e3      	ldr	r3, [r4, r3]
1000a346:	aa17      	add	r2, sp, #92	; 0x5c
1000a348:	58a0      	ldr	r0, [r4, r2]
1000a34a:	1a18      	subs	r0, r3, r0
1000a34c:	47c8      	blx	r9
1000a34e:	47a8      	blx	r5
1000a350:	2200      	movs	r2, #0
1000a352:	4b21      	ldr	r3, [pc, #132]	; (1000a3d8 <sms_imu_selftest+0x3e0>)
1000a354:	47c0      	blx	r8
1000a356:	9000      	str	r0, [sp, #0]
1000a358:	9101      	str	r1, [sp, #4]
1000a35a:	0023      	movs	r3, r4
1000a35c:	aa08      	add	r2, sp, #32
1000a35e:	4694      	mov	ip, r2
1000a360:	4463      	add	r3, ip
1000a362:	68d8      	ldr	r0, [r3, #12]
1000a364:	47a8      	blx	r5
1000a366:	0002      	movs	r2, r0
1000a368:	000b      	movs	r3, r1
1000a36a:	9800      	ldr	r0, [sp, #0]
1000a36c:	9901      	ldr	r1, [sp, #4]
1000a36e:	47d0      	blx	sl
1000a370:	2200      	movs	r2, #0
1000a372:	4b19      	ldr	r3, [pc, #100]	; (1000a3d8 <sms_imu_selftest+0x3e0>)
1000a374:	47b8      	blx	r7
1000a376:	47b0      	blx	r6
1000a378:	465b      	mov	r3, fp
1000a37a:	60d8      	str	r0, [r3, #12]
1000a37c:	3404      	adds	r4, #4
	factory_trim[4] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[4] - 1.0) )); // FT[Yg] factory trim calculation
	factory_trim[5] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[5] - 1.0) )); // FT[Zg] factory trim calculation
	
	// Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
	// To get percent, must multiply by 100
	for (int i = 0; i < 3; i++) {
1000a37e:	2c0c      	cmp	r4, #12
1000a380:	d1c3      	bne.n	1000a30a <sms_imu_selftest+0x312>
		destination[i]   = 100.0*((float)(a_stavg[i] - a_avg[i]))/factory_trim[i] - 100.;   // Report percent differences
		destination[i+3] = 100.0*((float)(g_stavg[i] - g_avg[i]))/factory_trim[i+3] - 100.; // Report percent differences
	}

}
1000a382:	b01d      	add	sp, #116	; 0x74
1000a384:	bc3c      	pop	{r2, r3, r4, r5}
1000a386:	4690      	mov	r8, r2
1000a388:	4699      	mov	r9, r3
1000a38a:	46a2      	mov	sl, r4
1000a38c:	46ab      	mov	fp, r5
1000a38e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a390:	100165d9 	.word	0x100165d9
1000a394:	10009a6d 	.word	0x10009a6d
1000a398:	100097ad 	.word	0x100097ad
1000a39c:	100136a5 	.word	0x100136a5
1000a3a0:	1000aff1 	.word	0x1000aff1
1000a3a4:	10009f21 	.word	0x10009f21
1000a3a8:	100146e9 	.word	0x100146e9
1000a3ac:	10016341 	.word	0x10016341
1000a3b0:	10015af9 	.word	0x10015af9
1000a3b4:	3ff00000 	.word	0x3ff00000
1000a3b8:	c28f5c29 	.word	0xc28f5c29
1000a3bc:	3ff028f5 	.word	0x3ff028f5
1000a3c0:	100121ed 	.word	0x100121ed
1000a3c4:	10015605 	.word	0x10015605
1000a3c8:	40a47800 	.word	0x40a47800
1000a3cc:	100163e9 	.word	0x100163e9
1000a3d0:	10014659 	.word	0x10014659
1000a3d4:	10014dbd 	.word	0x10014dbd
1000a3d8:	40590000 	.word	0x40590000

1000a3dc <sms_imu_mpu_check>:
	return 0;
}

/* Sensor setup functions... */
/* Check if MPU responds and make a self test */
int sms_imu_mpu_check(void) {
1000a3dc:	b510      	push	{r4, lr}
	int retVal = -1;
	uint8_t c = readByte(MPU9250_ADDRESS, WHO_AM_I_MPU9250);
1000a3de:	2175      	movs	r1, #117	; 0x75
1000a3e0:	2069      	movs	r0, #105	; 0x69
1000a3e2:	4b06      	ldr	r3, [pc, #24]	; (1000a3fc <sms_imu_mpu_check+0x20>)
1000a3e4:	4798      	blx	r3
	if(c == 0x71) {
1000a3e6:	2871      	cmp	r0, #113	; 0x71
1000a3e8:	d104      	bne.n	1000a3f4 <sms_imu_mpu_check+0x18>
		//DBG_LOG("[sms_mpu_check]\t\tMPU-9250 is online...");
		sms_imu_selftest(imu_device.config.self_test);
1000a3ea:	4805      	ldr	r0, [pc, #20]	; (1000a400 <sms_imu_mpu_check+0x24>)
1000a3ec:	4b05      	ldr	r3, [pc, #20]	; (1000a404 <sms_imu_mpu_check+0x28>)
1000a3ee:	4798      	blx	r3
		//DBG_LOG("[sms_mpu_check]\t\tMPU-9250 self-test passed");
		retVal = 0;
1000a3f0:	2000      	movs	r0, #0
1000a3f2:	e001      	b.n	1000a3f8 <sms_imu_mpu_check+0x1c>
}

/* Sensor setup functions... */
/* Check if MPU responds and make a self test */
int sms_imu_mpu_check(void) {
	int retVal = -1;
1000a3f4:	2001      	movs	r0, #1
1000a3f6:	4240      	negs	r0, r0
		sms_imu_selftest(imu_device.config.self_test);
		//DBG_LOG("[sms_mpu_check]\t\tMPU-9250 self-test passed");
		retVal = 0;
	}
	return retVal;
}
1000a3f8:	bd10      	pop	{r4, pc}
1000a3fa:	46c0      	nop			; (mov r8, r8)
1000a3fc:	10009f21 	.word	0x10009f21
1000a400:	1001a554 	.word	0x1001a554
1000a404:	10009ff9 	.word	0x10009ff9

1000a408 <sms_imu_startup>:
		send_plf_int_msg_ind(SMS_MPU_DRDY_PIN, GPIO_CALLBACK_RISING, NULL, 0);
	}
}
/* Startup function */
int sms_imu_startup(void)
{
1000a408:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a40a:	b087      	sub	sp, #28
	/* MPU */
	if(sms_imu_mpu_check()) return -1;
1000a40c:	4b22      	ldr	r3, [pc, #136]	; (1000a498 <sms_imu_startup+0x90>)
1000a40e:	4798      	blx	r3
1000a410:	2800      	cmp	r0, #0
1000a412:	d139      	bne.n	1000a488 <sms_imu_startup+0x80>
	sms_imu_mpu_calibrate(imu_device.config.gyro_bias, imu_device.config.accel_bias);
1000a414:	4c21      	ldr	r4, [pc, #132]	; (1000a49c <sms_imu_startup+0x94>)
1000a416:	0020      	movs	r0, r4
1000a418:	380c      	subs	r0, #12
1000a41a:	0021      	movs	r1, r4
1000a41c:	4b20      	ldr	r3, [pc, #128]	; (1000a4a0 <sms_imu_startup+0x98>)
1000a41e:	4798      	blx	r3
	DBG_LOG("MPU calibrated... bias values: %ld %ld %ld / %ld %ld %ld", (uint32_t)(imu_device.config.gyro_bias[0] * 10000), (uint32_t)(imu_device.config.gyro_bias[1] * 10000), (uint32_t)(imu_device.config.gyro_bias[2] * 10000), (uint32_t)(imu_device.config.accel_bias[0] * 10000), (uint32_t)(imu_device.config.accel_bias[1] * 10000), (uint32_t)(imu_device.config.accel_bias[2] * 10000));
1000a420:	4820      	ldr	r0, [pc, #128]	; (1000a4a4 <sms_imu_startup+0x9c>)
1000a422:	4b21      	ldr	r3, [pc, #132]	; (1000a4a8 <sms_imu_startup+0xa0>)
1000a424:	4798      	blx	r3
1000a426:	3c28      	subs	r4, #40	; 0x28
1000a428:	4e20      	ldr	r6, [pc, #128]	; (1000a4ac <sms_imu_startup+0xa4>)
1000a42a:	4921      	ldr	r1, [pc, #132]	; (1000a4b0 <sms_imu_startup+0xa8>)
1000a42c:	6a60      	ldr	r0, [r4, #36]	; 0x24
1000a42e:	47b0      	blx	r6
1000a430:	4d20      	ldr	r5, [pc, #128]	; (1000a4b4 <sms_imu_startup+0xac>)
1000a432:	47a8      	blx	r5
1000a434:	0007      	movs	r7, r0
1000a436:	491e      	ldr	r1, [pc, #120]	; (1000a4b0 <sms_imu_startup+0xa8>)
1000a438:	6a20      	ldr	r0, [r4, #32]
1000a43a:	47b0      	blx	r6
1000a43c:	47a8      	blx	r5
1000a43e:	9004      	str	r0, [sp, #16]
1000a440:	491b      	ldr	r1, [pc, #108]	; (1000a4b0 <sms_imu_startup+0xa8>)
1000a442:	69e0      	ldr	r0, [r4, #28]
1000a444:	47b0      	blx	r6
1000a446:	47a8      	blx	r5
1000a448:	9005      	str	r0, [sp, #20]
1000a44a:	4919      	ldr	r1, [pc, #100]	; (1000a4b0 <sms_imu_startup+0xa8>)
1000a44c:	6b20      	ldr	r0, [r4, #48]	; 0x30
1000a44e:	47b0      	blx	r6
1000a450:	47a8      	blx	r5
1000a452:	9002      	str	r0, [sp, #8]
1000a454:	4916      	ldr	r1, [pc, #88]	; (1000a4b0 <sms_imu_startup+0xa8>)
1000a456:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
1000a458:	47b0      	blx	r6
1000a45a:	47a8      	blx	r5
1000a45c:	9001      	str	r0, [sp, #4]
1000a45e:	4914      	ldr	r1, [pc, #80]	; (1000a4b0 <sms_imu_startup+0xa8>)
1000a460:	6aa0      	ldr	r0, [r4, #40]	; 0x28
1000a462:	47b0      	blx	r6
1000a464:	47a8      	blx	r5
1000a466:	9000      	str	r0, [sp, #0]
1000a468:	003b      	movs	r3, r7
1000a46a:	9a04      	ldr	r2, [sp, #16]
1000a46c:	9905      	ldr	r1, [sp, #20]
1000a46e:	4812      	ldr	r0, [pc, #72]	; (1000a4b8 <sms_imu_startup+0xb0>)
1000a470:	4c12      	ldr	r4, [pc, #72]	; (1000a4bc <sms_imu_startup+0xb4>)
1000a472:	47a0      	blx	r4
	sms_imu_mpu_initialize();
1000a474:	4b12      	ldr	r3, [pc, #72]	; (1000a4c0 <sms_imu_startup+0xb8>)
1000a476:	4798      	blx	r3
	
	/* Compass */
	if(sms_imu_comp_check()) return -1;
1000a478:	4b12      	ldr	r3, [pc, #72]	; (1000a4c4 <sms_imu_startup+0xbc>)
1000a47a:	4798      	blx	r3
1000a47c:	1e04      	subs	r4, r0, #0
1000a47e:	d106      	bne.n	1000a48e <sms_imu_startup+0x86>
	sms_imu_comp_initialize(imu_device.config.mag_calibration);
1000a480:	4811      	ldr	r0, [pc, #68]	; (1000a4c8 <sms_imu_startup+0xc0>)
1000a482:	4b12      	ldr	r3, [pc, #72]	; (1000a4cc <sms_imu_startup+0xc4>)
1000a484:	4798      	blx	r3
	//DBG_LOG("Compass initialized... calibration values: %ld %ld %ld", (uint32_t)(mpu_device.config.mag_calibration[0] * 10000), (uint32_t)(mpu_device.config.mag_calibration[1] * 10000), (uint32_t)(mpu_device.config.mag_calibration[2] * 10000));
	
	return 0;
1000a486:	e004      	b.n	1000a492 <sms_imu_startup+0x8a>
}
/* Startup function */
int sms_imu_startup(void)
{
	/* MPU */
	if(sms_imu_mpu_check()) return -1;
1000a488:	2401      	movs	r4, #1
1000a48a:	4264      	negs	r4, r4
1000a48c:	e001      	b.n	1000a492 <sms_imu_startup+0x8a>
	sms_imu_mpu_calibrate(imu_device.config.gyro_bias, imu_device.config.accel_bias);
	DBG_LOG("MPU calibrated... bias values: %ld %ld %ld / %ld %ld %ld", (uint32_t)(imu_device.config.gyro_bias[0] * 10000), (uint32_t)(imu_device.config.gyro_bias[1] * 10000), (uint32_t)(imu_device.config.gyro_bias[2] * 10000), (uint32_t)(imu_device.config.accel_bias[0] * 10000), (uint32_t)(imu_device.config.accel_bias[1] * 10000), (uint32_t)(imu_device.config.accel_bias[2] * 10000));
	sms_imu_mpu_initialize();
	
	/* Compass */
	if(sms_imu_comp_check()) return -1;
1000a48e:	2401      	movs	r4, #1
1000a490:	4264      	negs	r4, r4
	sms_imu_comp_initialize(imu_device.config.mag_calibration);
	//DBG_LOG("Compass initialized... calibration values: %ld %ld %ld", (uint32_t)(mpu_device.config.mag_calibration[0] * 10000), (uint32_t)(mpu_device.config.mag_calibration[1] * 10000), (uint32_t)(mpu_device.config.mag_calibration[2] * 10000));
	
	return 0;
}
1000a492:	0020      	movs	r0, r4
1000a494:	b007      	add	sp, #28
1000a496:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a498:	1000a3dd 	.word	0x1000a3dd
1000a49c:	1001a578 	.word	0x1001a578
1000a4a0:	10009a85 	.word	0x10009a85
1000a4a4:	10017780 	.word	0x10017780
1000a4a8:	10016841 	.word	0x10016841
1000a4ac:	100140b1 	.word	0x100140b1
1000a4b0:	461c4000 	.word	0x461c4000
1000a4b4:	100139c5 	.word	0x100139c5
1000a4b8:	10017a78 	.word	0x10017a78
1000a4bc:	10016721 	.word	0x10016721
1000a4c0:	10009f51 	.word	0x10009f51
1000a4c4:	10009f39 	.word	0x10009f39
1000a4c8:	1001a590 	.word	0x1001a590
1000a4cc:	10009dfd 	.word	0x10009dfd

1000a4d0 <read_comp_data>:
	destination[1] = ((int16_t)rawData[2] << 8) | rawData[3] ;
	destination[2] = ((int16_t)rawData[4] << 8) | rawData[5] ;
}
/* Read compass data */
void read_comp_data(int16_t *destination)
{
1000a4d0:	b530      	push	{r4, r5, lr}
1000a4d2:	b083      	sub	sp, #12
1000a4d4:	0004      	movs	r4, r0
	uint8_t rawData[7];  // x/y/z gyro register data, ST2 register stored here, must read ST2 at end of data acquisition
	if(readByte(AK8963_ADDRESS, AK8963_ST1) & 0x01) { // wait for magnetometer data ready bit to be set
1000a4d6:	2102      	movs	r1, #2
1000a4d8:	200c      	movs	r0, #12
1000a4da:	4b12      	ldr	r3, [pc, #72]	; (1000a524 <read_comp_data+0x54>)
1000a4dc:	4798      	blx	r3
1000a4de:	07c3      	lsls	r3, r0, #31
1000a4e0:	d51e      	bpl.n	1000a520 <read_comp_data+0x50>
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
1000a4e2:	466b      	mov	r3, sp
1000a4e4:	2207      	movs	r2, #7
1000a4e6:	2103      	movs	r1, #3
1000a4e8:	200c      	movs	r0, #12
1000a4ea:	4d0f      	ldr	r5, [pc, #60]	; (1000a528 <read_comp_data+0x58>)
1000a4ec:	47a8      	blx	r5
{
	uint8_t rawData[7];  // x/y/z gyro register data, ST2 register stored here, must read ST2 at end of data acquisition
	if(readByte(AK8963_ADDRESS, AK8963_ST1) & 0x01) { // wait for magnetometer data ready bit to be set
		readBytes(AK8963_ADDRESS, AK8963_XOUT_L, 7, &rawData[0]);  // Read the six raw data and ST2 registers sequentially into data array
		uint8_t c = rawData[6]; // End data read by reading ST2 register
		if(!(c & 0x08)) { // Check if magnetic sensor overflow set, if not then report data
1000a4ee:	466b      	mov	r3, sp
1000a4f0:	799b      	ldrb	r3, [r3, #6]
1000a4f2:	071b      	lsls	r3, r3, #28
1000a4f4:	d414      	bmi.n	1000a520 <read_comp_data+0x50>
			destination[0] = ((int16_t)rawData[1] << 8) | rawData[0] ;  // Turn the MSB and LSB into a signed 16-bit value
1000a4f6:	466b      	mov	r3, sp
1000a4f8:	785b      	ldrb	r3, [r3, #1]
1000a4fa:	021b      	lsls	r3, r3, #8
1000a4fc:	466a      	mov	r2, sp
1000a4fe:	7812      	ldrb	r2, [r2, #0]
1000a500:	4313      	orrs	r3, r2
1000a502:	8023      	strh	r3, [r4, #0]
			destination[1] = ((int16_t)rawData[3] << 8) | rawData[2] ;  // Data stored as little Endian
1000a504:	466b      	mov	r3, sp
1000a506:	78db      	ldrb	r3, [r3, #3]
1000a508:	021b      	lsls	r3, r3, #8
1000a50a:	466a      	mov	r2, sp
1000a50c:	7892      	ldrb	r2, [r2, #2]
1000a50e:	4313      	orrs	r3, r2
1000a510:	8063      	strh	r3, [r4, #2]
			destination[2] = ((int16_t)rawData[5] << 8) | rawData[4] ;
1000a512:	466b      	mov	r3, sp
1000a514:	795b      	ldrb	r3, [r3, #5]
1000a516:	021b      	lsls	r3, r3, #8
1000a518:	466a      	mov	r2, sp
1000a51a:	7912      	ldrb	r2, [r2, #4]
1000a51c:	4313      	orrs	r3, r2
1000a51e:	80a3      	strh	r3, [r4, #4]
		}
	}
}
1000a520:	b003      	add	sp, #12
1000a522:	bd30      	pop	{r4, r5, pc}
1000a524:	10009f21 	.word	0x10009f21
1000a528:	100097ad 	.word	0x100097ad

1000a52c <sms_imu_poll_data>:


/* Data reading functions... */
/* Poll */
int sms_imu_poll_data(void)
{
1000a52c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a52e:	465f      	mov	r7, fp
1000a530:	4656      	mov	r6, sl
1000a532:	464d      	mov	r5, r9
1000a534:	4644      	mov	r4, r8
1000a536:	b4f0      	push	{r4, r5, r6, r7}
1000a538:	b08f      	sub	sp, #60	; 0x3c
	read_accel_data(imu_device.output.raw_accel);
1000a53a:	4c4d      	ldr	r4, [pc, #308]	; (1000a670 <sms_imu_poll_data+0x144>)
1000a53c:	0020      	movs	r0, r4
1000a53e:	4b4d      	ldr	r3, [pc, #308]	; (1000a674 <sms_imu_poll_data+0x148>)
1000a540:	4798      	blx	r3
	float a_res = get_Ares(imu_device.config.a_scale);
1000a542:	3c56      	subs	r4, #86	; 0x56
1000a544:	7820      	ldrb	r0, [r4, #0]
1000a546:	4b4c      	ldr	r3, [pc, #304]	; (1000a678 <sms_imu_poll_data+0x14c>)
1000a548:	4798      	blx	r3
1000a54a:	1c06      	adds	r6, r0, #0
	float ax = ((float)imu_device.output.raw_accel[0]) * a_res;
1000a54c:	2356      	movs	r3, #86	; 0x56
1000a54e:	5ee0      	ldrsh	r0, [r4, r3]
1000a550:	4f4a      	ldr	r7, [pc, #296]	; (1000a67c <sms_imu_poll_data+0x150>)
1000a552:	47b8      	blx	r7
1000a554:	4d4a      	ldr	r5, [pc, #296]	; (1000a680 <sms_imu_poll_data+0x154>)
1000a556:	1c31      	adds	r1, r6, #0
1000a558:	47a8      	blx	r5
1000a55a:	9008      	str	r0, [sp, #32]
	float ay = ((float)imu_device.output.raw_accel[1]) * a_res;
1000a55c:	2358      	movs	r3, #88	; 0x58
1000a55e:	5ee0      	ldrsh	r0, [r4, r3]
1000a560:	47b8      	blx	r7
1000a562:	1c31      	adds	r1, r6, #0
1000a564:	47a8      	blx	r5
1000a566:	9009      	str	r0, [sp, #36]	; 0x24
	float az = ((float)imu_device.output.raw_accel[2]) * a_res;
1000a568:	235a      	movs	r3, #90	; 0x5a
1000a56a:	5ee0      	ldrsh	r0, [r4, r3]
1000a56c:	47b8      	blx	r7
1000a56e:	1c31      	adds	r1, r6, #0
1000a570:	47a8      	blx	r5
1000a572:	900a      	str	r0, [sp, #40]	; 0x28
	
	read_gyro_data(imu_device.output.raw_gyro);
1000a574:	0023      	movs	r3, r4
1000a576:	3350      	adds	r3, #80	; 0x50
1000a578:	0018      	movs	r0, r3
1000a57a:	4b42      	ldr	r3, [pc, #264]	; (1000a684 <sms_imu_poll_data+0x158>)
1000a57c:	4798      	blx	r3
	float g_res = get_Gres(imu_device.config.g_scale);
1000a57e:	7860      	ldrb	r0, [r4, #1]
1000a580:	4b41      	ldr	r3, [pc, #260]	; (1000a688 <sms_imu_poll_data+0x15c>)
1000a582:	4798      	blx	r3
1000a584:	1c06      	adds	r6, r0, #0
	float gx = ((float)imu_device.output.raw_gyro[0]) * g_res;
1000a586:	2350      	movs	r3, #80	; 0x50
1000a588:	5ee0      	ldrsh	r0, [r4, r3]
1000a58a:	47b8      	blx	r7
1000a58c:	1c31      	adds	r1, r6, #0
1000a58e:	47a8      	blx	r5
1000a590:	900b      	str	r0, [sp, #44]	; 0x2c
	float gy = ((float)imu_device.output.raw_gyro[1]) * g_res;
1000a592:	2352      	movs	r3, #82	; 0x52
1000a594:	5ee0      	ldrsh	r0, [r4, r3]
1000a596:	47b8      	blx	r7
1000a598:	1c31      	adds	r1, r6, #0
1000a59a:	47a8      	blx	r5
1000a59c:	900c      	str	r0, [sp, #48]	; 0x30
	float gz = ((float)imu_device.output.raw_gyro[2]) * g_res;
1000a59e:	2354      	movs	r3, #84	; 0x54
1000a5a0:	5ee0      	ldrsh	r0, [r4, r3]
1000a5a2:	47b8      	blx	r7
1000a5a4:	1c31      	adds	r1, r6, #0
1000a5a6:	47a8      	blx	r5
1000a5a8:	900d      	str	r0, [sp, #52]	; 0x34
	
	read_comp_data(imu_device.output.raw_compass);
1000a5aa:	0023      	movs	r3, r4
1000a5ac:	335c      	adds	r3, #92	; 0x5c
1000a5ae:	0018      	movs	r0, r3
1000a5b0:	4b36      	ldr	r3, [pc, #216]	; (1000a68c <sms_imu_poll_data+0x160>)
1000a5b2:	4798      	blx	r3
	float m_res = get_Mres(imu_device.config.m_scale);
1000a5b4:	78a0      	ldrb	r0, [r4, #2]
1000a5b6:	4b36      	ldr	r3, [pc, #216]	; (1000a690 <sms_imu_poll_data+0x164>)
1000a5b8:	4798      	blx	r3
1000a5ba:	9007      	str	r0, [sp, #28]
	float mx = ( ((float)imu_device.output.raw_compass[0]) * m_res * imu_device.config.mag_calibration[0] ) - imu_device.config.mag_bias[0];
	float my = ( ((float)imu_device.output.raw_compass[1]) * m_res * imu_device.config.mag_calibration[1] ) - imu_device.config.mag_bias[1];
	float mz = ( ((float)imu_device.output.raw_compass[2]) * m_res * imu_device.config.mag_calibration[2] ) - imu_device.config.mag_bias[2];
	
	//mahony_quaternion_update(ax, ay, az, gx*PI/180.0, gy*PI/180.0, gz*PI/180.0, my, mx, mz);
	madgwick_quaternion_update(ax, ay, az, gx*PI/180.0, gy*PI/180.0, gz*PI/180.0, my, mx, mz);
1000a5bc:	4b35      	ldr	r3, [pc, #212]	; (1000a694 <sms_imu_poll_data+0x168>)
1000a5be:	469a      	mov	sl, r3
1000a5c0:	980b      	ldr	r0, [sp, #44]	; 0x2c
1000a5c2:	4798      	blx	r3
1000a5c4:	4b34      	ldr	r3, [pc, #208]	; (1000a698 <sms_imu_poll_data+0x16c>)
1000a5c6:	4699      	mov	r9, r3
1000a5c8:	4a34      	ldr	r2, [pc, #208]	; (1000a69c <sms_imu_poll_data+0x170>)
1000a5ca:	4b35      	ldr	r3, [pc, #212]	; (1000a6a0 <sms_imu_poll_data+0x174>)
1000a5cc:	47c8      	blx	r9
1000a5ce:	4b35      	ldr	r3, [pc, #212]	; (1000a6a4 <sms_imu_poll_data+0x178>)
1000a5d0:	4698      	mov	r8, r3
1000a5d2:	2200      	movs	r2, #0
1000a5d4:	4b34      	ldr	r3, [pc, #208]	; (1000a6a8 <sms_imu_poll_data+0x17c>)
1000a5d6:	47c0      	blx	r8
1000a5d8:	4e34      	ldr	r6, [pc, #208]	; (1000a6ac <sms_imu_poll_data+0x180>)
1000a5da:	47b0      	blx	r6
1000a5dc:	900b      	str	r0, [sp, #44]	; 0x2c
	
	read_comp_data(imu_device.output.raw_compass);
	float m_res = get_Mres(imu_device.config.m_scale);
	float mx = ( ((float)imu_device.output.raw_compass[0]) * m_res * imu_device.config.mag_calibration[0] ) - imu_device.config.mag_bias[0];
	float my = ( ((float)imu_device.output.raw_compass[1]) * m_res * imu_device.config.mag_calibration[1] ) - imu_device.config.mag_bias[1];
	float mz = ( ((float)imu_device.output.raw_compass[2]) * m_res * imu_device.config.mag_calibration[2] ) - imu_device.config.mag_bias[2];
1000a5de:	2360      	movs	r3, #96	; 0x60
	
	//mahony_quaternion_update(ax, ay, az, gx*PI/180.0, gy*PI/180.0, gz*PI/180.0, my, mx, mz);
	madgwick_quaternion_update(ax, ay, az, gx*PI/180.0, gy*PI/180.0, gz*PI/180.0, my, mx, mz);
1000a5e0:	5ee0      	ldrsh	r0, [r4, r3]
1000a5e2:	47b8      	blx	r7
1000a5e4:	9907      	ldr	r1, [sp, #28]
1000a5e6:	47a8      	blx	r5
1000a5e8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
1000a5ea:	47a8      	blx	r5
1000a5ec:	4b30      	ldr	r3, [pc, #192]	; (1000a6b0 <sms_imu_poll_data+0x184>)
1000a5ee:	469b      	mov	fp, r3
1000a5f0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
1000a5f2:	4798      	blx	r3
1000a5f4:	9004      	str	r0, [sp, #16]
	float gy = ((float)imu_device.output.raw_gyro[1]) * g_res;
	float gz = ((float)imu_device.output.raw_gyro[2]) * g_res;
	
	read_comp_data(imu_device.output.raw_compass);
	float m_res = get_Mres(imu_device.config.m_scale);
	float mx = ( ((float)imu_device.output.raw_compass[0]) * m_res * imu_device.config.mag_calibration[0] ) - imu_device.config.mag_bias[0];
1000a5f6:	235c      	movs	r3, #92	; 0x5c
	float my = ( ((float)imu_device.output.raw_compass[1]) * m_res * imu_device.config.mag_calibration[1] ) - imu_device.config.mag_bias[1];
	float mz = ( ((float)imu_device.output.raw_compass[2]) * m_res * imu_device.config.mag_calibration[2] ) - imu_device.config.mag_bias[2];
	
	//mahony_quaternion_update(ax, ay, az, gx*PI/180.0, gy*PI/180.0, gz*PI/180.0, my, mx, mz);
	madgwick_quaternion_update(ax, ay, az, gx*PI/180.0, gy*PI/180.0, gz*PI/180.0, my, mx, mz);
1000a5f8:	5ee0      	ldrsh	r0, [r4, r3]
1000a5fa:	47b8      	blx	r7
1000a5fc:	9907      	ldr	r1, [sp, #28]
1000a5fe:	47a8      	blx	r5
1000a600:	6c21      	ldr	r1, [r4, #64]	; 0x40
1000a602:	47a8      	blx	r5
1000a604:	6b61      	ldr	r1, [r4, #52]	; 0x34
1000a606:	47d8      	blx	fp
1000a608:	9003      	str	r0, [sp, #12]
	float gz = ((float)imu_device.output.raw_gyro[2]) * g_res;
	
	read_comp_data(imu_device.output.raw_compass);
	float m_res = get_Mres(imu_device.config.m_scale);
	float mx = ( ((float)imu_device.output.raw_compass[0]) * m_res * imu_device.config.mag_calibration[0] ) - imu_device.config.mag_bias[0];
	float my = ( ((float)imu_device.output.raw_compass[1]) * m_res * imu_device.config.mag_calibration[1] ) - imu_device.config.mag_bias[1];
1000a60a:	235e      	movs	r3, #94	; 0x5e
	float mz = ( ((float)imu_device.output.raw_compass[2]) * m_res * imu_device.config.mag_calibration[2] ) - imu_device.config.mag_bias[2];
	
	//mahony_quaternion_update(ax, ay, az, gx*PI/180.0, gy*PI/180.0, gz*PI/180.0, my, mx, mz);
	madgwick_quaternion_update(ax, ay, az, gx*PI/180.0, gy*PI/180.0, gz*PI/180.0, my, mx, mz);
1000a60c:	5ee0      	ldrsh	r0, [r4, r3]
1000a60e:	47b8      	blx	r7
1000a610:	9907      	ldr	r1, [sp, #28]
1000a612:	47a8      	blx	r5
1000a614:	6c61      	ldr	r1, [r4, #68]	; 0x44
1000a616:	47a8      	blx	r5
1000a618:	6ba1      	ldr	r1, [r4, #56]	; 0x38
1000a61a:	47d8      	blx	fp
1000a61c:	9002      	str	r0, [sp, #8]
1000a61e:	980d      	ldr	r0, [sp, #52]	; 0x34
1000a620:	47d0      	blx	sl
1000a622:	4a1e      	ldr	r2, [pc, #120]	; (1000a69c <sms_imu_poll_data+0x170>)
1000a624:	4b1e      	ldr	r3, [pc, #120]	; (1000a6a0 <sms_imu_poll_data+0x174>)
1000a626:	47c8      	blx	r9
1000a628:	2200      	movs	r2, #0
1000a62a:	4b1f      	ldr	r3, [pc, #124]	; (1000a6a8 <sms_imu_poll_data+0x17c>)
1000a62c:	47c0      	blx	r8
1000a62e:	47b0      	blx	r6
1000a630:	9001      	str	r0, [sp, #4]
1000a632:	980c      	ldr	r0, [sp, #48]	; 0x30
1000a634:	47d0      	blx	sl
1000a636:	4a19      	ldr	r2, [pc, #100]	; (1000a69c <sms_imu_poll_data+0x170>)
1000a638:	4b19      	ldr	r3, [pc, #100]	; (1000a6a0 <sms_imu_poll_data+0x174>)
1000a63a:	47c8      	blx	r9
1000a63c:	2200      	movs	r2, #0
1000a63e:	4b1a      	ldr	r3, [pc, #104]	; (1000a6a8 <sms_imu_poll_data+0x17c>)
1000a640:	47c0      	blx	r8
1000a642:	47b0      	blx	r6
1000a644:	9000      	str	r0, [sp, #0]
1000a646:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1000a648:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1000a64a:	9909      	ldr	r1, [sp, #36]	; 0x24
1000a64c:	9808      	ldr	r0, [sp, #32]
1000a64e:	4d19      	ldr	r5, [pc, #100]	; (1000a6b4 <sms_imu_poll_data+0x188>)
1000a650:	47a8      	blx	r5
	
	if(imu_device.config.ahrs) {
1000a652:	234c      	movs	r3, #76	; 0x4c
1000a654:	5ce3      	ldrb	r3, [r4, r3]
1000a656:	2b00      	cmp	r3, #0
1000a658:	d002      	beq.n	1000a660 <sms_imu_poll_data+0x134>
		ahrs_calculation(imu_device.output.q);
1000a65a:	4817      	ldr	r0, [pc, #92]	; (1000a6b8 <sms_imu_poll_data+0x18c>)
1000a65c:	4b17      	ldr	r3, [pc, #92]	; (1000a6bc <sms_imu_poll_data+0x190>)
1000a65e:	4798      	blx	r3
	}
	return 0;
}
1000a660:	2000      	movs	r0, #0
1000a662:	b00f      	add	sp, #60	; 0x3c
1000a664:	bc3c      	pop	{r2, r3, r4, r5}
1000a666:	4690      	mov	r8, r2
1000a668:	4699      	mov	r9, r3
1000a66a:	46a2      	mov	sl, r4
1000a66c:	46ab      	mov	fp, r5
1000a66e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a670:	1001a5a6 	.word	0x1001a5a6
1000a674:	1000995d 	.word	0x1000995d
1000a678:	10009a3d 	.word	0x10009a3d
1000a67c:	10014659 	.word	0x10014659
1000a680:	100140b1 	.word	0x100140b1
1000a684:	100099a1 	.word	0x100099a1
1000a688:	10009a05 	.word	0x10009a05
1000a68c:	1000a4d1 	.word	0x1000a4d1
1000a690:	100099e5 	.word	0x100099e5
1000a694:	10016341 	.word	0x10016341
1000a698:	10015605 	.word	0x10015605
1000a69c:	54442d28 	.word	0x54442d28
1000a6a0:	400921fb 	.word	0x400921fb
1000a6a4:	10014dbd 	.word	0x10014dbd
1000a6a8:	40668000 	.word	0x40668000
1000a6ac:	100163e9 	.word	0x100163e9
1000a6b0:	100142d9 	.word	0x100142d9
1000a6b4:	1000843d 	.word	0x1000843d
1000a6b8:	1001a5b4 	.word	0x1001a5b4
1000a6bc:	10008d49 	.word	0x10008d49

1000a6c0 <sms_led_switch_on>:
    sms_led_switch_off(SMS_LED_0_PIN);
}


void sms_led_switch_on(enum sms_leds led)
{
1000a6c0:	b510      	push	{r4, lr}
    gpio_pin_set_output_level(led, SMS_LED_ACTIVE);
1000a6c2:	2100      	movs	r1, #0
1000a6c4:	4b01      	ldr	r3, [pc, #4]	; (1000a6cc <sms_led_switch_on+0xc>)
1000a6c6:	4798      	blx	r3
}
1000a6c8:	bd10      	pop	{r4, pc}
1000a6ca:	46c0      	nop			; (mov r8, r8)
1000a6cc:	1000b8ed 	.word	0x1000b8ed

1000a6d0 <sms_led_switch_off>:


void sms_led_switch_off(enum sms_leds led)
{
1000a6d0:	b510      	push	{r4, lr}
    gpio_pin_set_output_level(led, SMS_LED_INACTIVE);
1000a6d2:	2101      	movs	r1, #1
1000a6d4:	4b01      	ldr	r3, [pc, #4]	; (1000a6dc <sms_led_switch_off+0xc>)
1000a6d6:	4798      	blx	r3
}
1000a6d8:	bd10      	pop	{r4, pc}
1000a6da:	46c0      	nop			; (mov r8, r8)
1000a6dc:	1000b8ed 	.word	0x1000b8ed

1000a6e0 <sms_led_gpio_init>:
 */ 

#include "sms_led.h"

void sms_led_gpio_init(void)
{
1000a6e0:	b510      	push	{r4, lr}
1000a6e2:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;

    /* LED0 @ GPIO_LP_GPIO_22 */
    gpio_get_config_defaults(&config_gpio_pin);
1000a6e4:	ac01      	add	r4, sp, #4
1000a6e6:	0020      	movs	r0, r4
1000a6e8:	4b06      	ldr	r3, [pc, #24]	; (1000a704 <sms_led_gpio_init+0x24>)
1000a6ea:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_OUTPUT;
1000a6ec:	2301      	movs	r3, #1
1000a6ee:	7023      	strb	r3, [r4, #0]
    if(gpio_pin_set_config(SMS_LED_0_PIN, &config_gpio_pin) != STATUS_OK) {
1000a6f0:	0021      	movs	r1, r4
1000a6f2:	2016      	movs	r0, #22
1000a6f4:	4b04      	ldr	r3, [pc, #16]	; (1000a708 <sms_led_gpio_init+0x28>)
1000a6f6:	4798      	blx	r3
        DBG_LOG_DEV("[sms_led_gpio_init]\tproblem while setting up led0");
    }
    sms_led_switch_off(SMS_LED_0_PIN);
1000a6f8:	2016      	movs	r0, #22
1000a6fa:	4b04      	ldr	r3, [pc, #16]	; (1000a70c <sms_led_gpio_init+0x2c>)
1000a6fc:	4798      	blx	r3
}
1000a6fe:	b002      	add	sp, #8
1000a700:	bd10      	pop	{r4, pc}
1000a702:	46c0      	nop			; (mov r8, r8)
1000a704:	1000b685 	.word	0x1000b685
1000a708:	1000b695 	.word	0x1000b695
1000a70c:	1000a6d1 	.word	0x1000a6d1

1000a710 <sms_led_toggle>:
    gpio_pin_set_output_level(led, SMS_LED_INACTIVE);
}


void sms_led_toggle(enum sms_leds led)
{
1000a710:	b510      	push	{r4, lr}
1000a712:	0004      	movs	r4, r0
}


bool sms_led_get_state(enum sms_leds led)
{
    return gpio_pin_get_output_level(led);
1000a714:	4b05      	ldr	r3, [pc, #20]	; (1000a72c <sms_led_toggle+0x1c>)
1000a716:	4798      	blx	r3


void sms_led_toggle(enum sms_leds led)
{
    bool state = sms_led_get_state(led);
    if(state == SMS_LED_ACTIVE) sms_led_switch_off(led);
1000a718:	2800      	cmp	r0, #0
1000a71a:	d103      	bne.n	1000a724 <sms_led_toggle+0x14>
1000a71c:	0020      	movs	r0, r4
1000a71e:	4b04      	ldr	r3, [pc, #16]	; (1000a730 <sms_led_toggle+0x20>)
1000a720:	4798      	blx	r3
1000a722:	e002      	b.n	1000a72a <sms_led_toggle+0x1a>
    else sms_led_switch_on(led);
1000a724:	0020      	movs	r0, r4
1000a726:	4b03      	ldr	r3, [pc, #12]	; (1000a734 <sms_led_toggle+0x24>)
1000a728:	4798      	blx	r3
}
1000a72a:	bd10      	pop	{r4, pc}
1000a72c:	1000b89d 	.word	0x1000b89d
1000a730:	1000a6d1 	.word	0x1000a6d1
1000a734:	1000a6c1 	.word	0x1000a6c1

1000a738 <sms_led_blink_start>:
    return gpio_pin_get_output_level(led);
}


void sms_led_blink_start(enum sms_leds led)
{
1000a738:	b510      	push	{r4, lr}
    sms_led_switch_on(led);
1000a73a:	4b0c      	ldr	r3, [pc, #48]	; (1000a76c <sms_led_blink_start+0x34>)
1000a73c:	4798      	blx	r3
    sms_led_blink_cnt = 0;
1000a73e:	2200      	movs	r2, #0
1000a740:	4b0b      	ldr	r3, [pc, #44]	; (1000a770 <sms_led_blink_start+0x38>)
1000a742:	701a      	strb	r2, [r3, #0]
    uint32_t delay = 0;
    switch(timer2_current_mode) {
1000a744:	4b0b      	ldr	r3, [pc, #44]	; (1000a774 <sms_led_blink_start+0x3c>)
1000a746:	781b      	ldrb	r3, [r3, #0]
1000a748:	b2db      	uxtb	r3, r3
1000a74a:	2b02      	cmp	r3, #2
1000a74c:	d002      	beq.n	1000a754 <sms_led_blink_start+0x1c>
1000a74e:	2b03      	cmp	r3, #3
1000a750:	d002      	beq.n	1000a758 <sms_led_blink_start+0x20>
1000a752:	e004      	b.n	1000a75e <sms_led_blink_start+0x26>
        case TIMER2_MODE_LED_STARTUP:
        delay = SMS_BLINK_STARTUP_MS;
1000a754:	2164      	movs	r1, #100	; 0x64
1000a756:	e003      	b.n	1000a760 <sms_led_blink_start+0x28>
        break;
        
        case TIMER2_MODE_LED_SHUTDOWN:
        delay = SMS_BLINK_SHTDWN_MS;
1000a758:	21c8      	movs	r1, #200	; 0xc8
1000a75a:	0049      	lsls	r1, r1, #1
        break;
1000a75c:	e000      	b.n	1000a760 <sms_led_blink_start+0x28>

void sms_led_blink_start(enum sms_leds led)
{
    sms_led_switch_on(led);
    sms_led_blink_cnt = 0;
    uint32_t delay = 0;
1000a75e:	2100      	movs	r1, #0
        
        default:
        break;
    }

    sms_dualtimer_start(TIMER_UNIT_MS, delay, DUALTIMER_TIMER2);
1000a760:	2201      	movs	r2, #1
1000a762:	2001      	movs	r0, #1
1000a764:	4b04      	ldr	r3, [pc, #16]	; (1000a778 <sms_led_blink_start+0x40>)
1000a766:	4798      	blx	r3
}
1000a768:	bd10      	pop	{r4, pc}
1000a76a:	46c0      	nop			; (mov r8, r8)
1000a76c:	1000a6c1 	.word	0x1000a6c1
1000a770:	1001a638 	.word	0x1001a638
1000a774:	1001a537 	.word	0x1001a537
1000a778:	1000ac21 	.word	0x1000ac21

1000a77c <sms_pressure_init_variables>:

#include "sms_pressure.h"

void sms_pressure_init_variables(void)
{
	pressure_device.hal.current_state = MS58_STATE_NONE;
1000a77c:	4b06      	ldr	r3, [pc, #24]	; (1000a798 <sms_pressure_init_variables+0x1c>)
1000a77e:	2200      	movs	r2, #0
1000a780:	2125      	movs	r1, #37	; 0x25
1000a782:	545a      	strb	r2, [r3, r1]
	pressure_device.state = PRESSURE_STATE_OFF;
1000a784:	3106      	adds	r1, #6
1000a786:	545a      	strb	r2, [r3, r1]
	pressure_device.rts = false;
1000a788:	3901      	subs	r1, #1
1000a78a:	545a      	strb	r2, [r3, r1]
	pressure_device.int_enabled = false;
1000a78c:	3902      	subs	r1, #2
1000a78e:	545a      	strb	r2, [r3, r1]
	pressure_device.new_int = false;
1000a790:	3101      	adds	r1, #1
1000a792:	545a      	strb	r2, [r3, r1]
}
1000a794:	4770      	bx	lr
1000a796:	46c0      	nop			; (mov r8, r8)
1000a798:	1001a49c 	.word	0x1001a49c

1000a79c <sms_pressure_ms58_reset>:
    }
    return STATUS_ERR_IO;
}

void sms_pressure_ms58_reset(void)
{
1000a79c:	b510      	push	{r4, lr}
1000a79e:	b082      	sub	sp, #8
    //DBG_LOG_DEV("[sms_pressure_ms58_reset]\twriting reset command");
    spi_wdata[0] = MS58_RESET;
1000a7a0:	4a05      	ldr	r2, [pc, #20]	; (1000a7b8 <sms_pressure_ms58_reset+0x1c>)
1000a7a2:	231e      	movs	r3, #30
1000a7a4:	7013      	strb	r3, [r2, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 1);
1000a7a6:	3b1d      	subs	r3, #29
1000a7a8:	9300      	str	r3, [sp, #0]
1000a7aa:	4b04      	ldr	r3, [pc, #16]	; (1000a7bc <sms_pressure_ms58_reset+0x20>)
1000a7ac:	4904      	ldr	r1, [pc, #16]	; (1000a7c0 <sms_pressure_ms58_reset+0x24>)
1000a7ae:	4805      	ldr	r0, [pc, #20]	; (1000a7c4 <sms_pressure_ms58_reset+0x28>)
1000a7b0:	4c05      	ldr	r4, [pc, #20]	; (1000a7c8 <sms_pressure_ms58_reset+0x2c>)
1000a7b2:	47a0      	blx	r4
}
1000a7b4:	b002      	add	sp, #8
1000a7b6:	bd10      	pop	{r4, pc}
1000a7b8:	1001a48c 	.word	0x1001a48c
1000a7bc:	1001a478 	.word	0x1001a478
1000a7c0:	1001a538 	.word	0x1001a538
1000a7c4:	1001a544 	.word	0x1001a544
1000a7c8:	1000aaf1 	.word	0x1000aaf1

1000a7cc <sms_pressure_ms58_read_prom>:
		//if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
	}
}

enum status_code sms_pressure_ms58_read_prom(void)
{
1000a7cc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a7ce:	4657      	mov	r7, sl
1000a7d0:	b480      	push	{r7}
1000a7d2:	b082      	sub	sp, #8
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] reading bytes... ");
    spi_wdata[0] = MS58_PROM_READ_1;
1000a7d4:	4d37      	ldr	r5, [pc, #220]	; (1000a8b4 <sms_pressure_ms58_read_prom+0xe8>)
1000a7d6:	23a2      	movs	r3, #162	; 0xa2
1000a7d8:	702b      	strb	r3, [r5, #0]
    spi_wdata[1] = 0x00;
1000a7da:	2300      	movs	r3, #0
1000a7dc:	706b      	strb	r3, [r5, #1]
    spi_wdata[2] = 0x00;
1000a7de:	70ab      	strb	r3, [r5, #2]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000a7e0:	4c35      	ldr	r4, [pc, #212]	; (1000a8b8 <sms_pressure_ms58_read_prom+0xec>)
1000a7e2:	3303      	adds	r3, #3
1000a7e4:	469a      	mov	sl, r3
1000a7e6:	9300      	str	r3, [sp, #0]
1000a7e8:	0023      	movs	r3, r4
1000a7ea:	002a      	movs	r2, r5
1000a7ec:	4933      	ldr	r1, [pc, #204]	; (1000a8bc <sms_pressure_ms58_read_prom+0xf0>)
1000a7ee:	4834      	ldr	r0, [pc, #208]	; (1000a8c0 <sms_pressure_ms58_read_prom+0xf4>)
1000a7f0:	4f34      	ldr	r7, [pc, #208]	; (1000a8c4 <sms_pressure_ms58_read_prom+0xf8>)
1000a7f2:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[1] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000a7f4:	4e34      	ldr	r6, [pc, #208]	; (1000a8c8 <sms_pressure_ms58_read_prom+0xfc>)
1000a7f6:	7863      	ldrb	r3, [r4, #1]
1000a7f8:	021b      	lsls	r3, r3, #8
1000a7fa:	78a2      	ldrb	r2, [r4, #2]
1000a7fc:	4313      	orrs	r3, r2
1000a7fe:	80f3      	strh	r3, [r6, #6]

    spi_wdata[0] = MS58_PROM_READ_2;
1000a800:	23a4      	movs	r3, #164	; 0xa4
1000a802:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000a804:	4653      	mov	r3, sl
1000a806:	9300      	str	r3, [sp, #0]
1000a808:	0023      	movs	r3, r4
1000a80a:	002a      	movs	r2, r5
1000a80c:	492b      	ldr	r1, [pc, #172]	; (1000a8bc <sms_pressure_ms58_read_prom+0xf0>)
1000a80e:	482c      	ldr	r0, [pc, #176]	; (1000a8c0 <sms_pressure_ms58_read_prom+0xf4>)
1000a810:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[2] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000a812:	7863      	ldrb	r3, [r4, #1]
1000a814:	021b      	lsls	r3, r3, #8
1000a816:	78a2      	ldrb	r2, [r4, #2]
1000a818:	4313      	orrs	r3, r2
1000a81a:	8133      	strh	r3, [r6, #8]

    spi_wdata[0] = MS58_PROM_READ_3;
1000a81c:	23a6      	movs	r3, #166	; 0xa6
1000a81e:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000a820:	4653      	mov	r3, sl
1000a822:	9300      	str	r3, [sp, #0]
1000a824:	0023      	movs	r3, r4
1000a826:	002a      	movs	r2, r5
1000a828:	4924      	ldr	r1, [pc, #144]	; (1000a8bc <sms_pressure_ms58_read_prom+0xf0>)
1000a82a:	4825      	ldr	r0, [pc, #148]	; (1000a8c0 <sms_pressure_ms58_read_prom+0xf4>)
1000a82c:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[3] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000a82e:	7863      	ldrb	r3, [r4, #1]
1000a830:	021b      	lsls	r3, r3, #8
1000a832:	78a2      	ldrb	r2, [r4, #2]
1000a834:	4313      	orrs	r3, r2
1000a836:	8173      	strh	r3, [r6, #10]

    spi_wdata[0] = MS58_PROM_READ_4;
1000a838:	23a8      	movs	r3, #168	; 0xa8
1000a83a:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000a83c:	4653      	mov	r3, sl
1000a83e:	9300      	str	r3, [sp, #0]
1000a840:	0023      	movs	r3, r4
1000a842:	002a      	movs	r2, r5
1000a844:	491d      	ldr	r1, [pc, #116]	; (1000a8bc <sms_pressure_ms58_read_prom+0xf0>)
1000a846:	481e      	ldr	r0, [pc, #120]	; (1000a8c0 <sms_pressure_ms58_read_prom+0xf4>)
1000a848:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[4] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000a84a:	7863      	ldrb	r3, [r4, #1]
1000a84c:	021b      	lsls	r3, r3, #8
1000a84e:	78a2      	ldrb	r2, [r4, #2]
1000a850:	4313      	orrs	r3, r2
1000a852:	81b3      	strh	r3, [r6, #12]

    spi_wdata[0] = MS58_PROM_READ_5;
1000a854:	23aa      	movs	r3, #170	; 0xaa
1000a856:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000a858:	4653      	mov	r3, sl
1000a85a:	9300      	str	r3, [sp, #0]
1000a85c:	0023      	movs	r3, r4
1000a85e:	002a      	movs	r2, r5
1000a860:	4916      	ldr	r1, [pc, #88]	; (1000a8bc <sms_pressure_ms58_read_prom+0xf0>)
1000a862:	4817      	ldr	r0, [pc, #92]	; (1000a8c0 <sms_pressure_ms58_read_prom+0xf4>)
1000a864:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[5] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000a866:	7863      	ldrb	r3, [r4, #1]
1000a868:	021b      	lsls	r3, r3, #8
1000a86a:	78a2      	ldrb	r2, [r4, #2]
1000a86c:	4313      	orrs	r3, r2
1000a86e:	81f3      	strh	r3, [r6, #14]

    spi_wdata[0] = MS58_PROM_READ_6;
1000a870:	23ac      	movs	r3, #172	; 0xac
1000a872:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000a874:	4653      	mov	r3, sl
1000a876:	9300      	str	r3, [sp, #0]
1000a878:	0023      	movs	r3, r4
1000a87a:	002a      	movs	r2, r5
1000a87c:	490f      	ldr	r1, [pc, #60]	; (1000a8bc <sms_pressure_ms58_read_prom+0xf0>)
1000a87e:	4810      	ldr	r0, [pc, #64]	; (1000a8c0 <sms_pressure_ms58_read_prom+0xf4>)
1000a880:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[6] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000a882:	7863      	ldrb	r3, [r4, #1]
1000a884:	021b      	lsls	r3, r3, #8
1000a886:	78a2      	ldrb	r2, [r4, #2]
1000a888:	4313      	orrs	r3, r2
1000a88a:	8233      	strh	r3, [r6, #16]

    spi_wdata[0] = MS58_PROM_READ_7;
1000a88c:	23ae      	movs	r3, #174	; 0xae
1000a88e:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000a890:	4653      	mov	r3, sl
1000a892:	9300      	str	r3, [sp, #0]
1000a894:	0023      	movs	r3, r4
1000a896:	002a      	movs	r2, r5
1000a898:	4908      	ldr	r1, [pc, #32]	; (1000a8bc <sms_pressure_ms58_read_prom+0xf0>)
1000a89a:	4809      	ldr	r0, [pc, #36]	; (1000a8c0 <sms_pressure_ms58_read_prom+0xf4>)
1000a89c:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[7] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000a89e:	7863      	ldrb	r3, [r4, #1]
1000a8a0:	021b      	lsls	r3, r3, #8
1000a8a2:	78a2      	ldrb	r2, [r4, #2]
1000a8a4:	4313      	orrs	r3, r2
1000a8a6:	8273      	strh	r3, [r6, #18]
    //for(uint8_t i = 1; i < MS58_PROM_VALUES_MAX; i++) {
        //DBG_LOG_DEV("  C%d -> %d", (i+1), ms58_device.prom_values[i]);
    //}

    return STATUS_OK;
}
1000a8a8:	2000      	movs	r0, #0
1000a8aa:	b002      	add	sp, #8
1000a8ac:	bc04      	pop	{r2}
1000a8ae:	4692      	mov	sl, r2
1000a8b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a8b2:	46c0      	nop			; (mov r8, r8)
1000a8b4:	1001a48c 	.word	0x1001a48c
1000a8b8:	1001a478 	.word	0x1001a478
1000a8bc:	1001a538 	.word	0x1001a538
1000a8c0:	1001a544 	.word	0x1001a544
1000a8c4:	1000aaf1 	.word	0x1000aaf1
1000a8c8:	1001a49c 	.word	0x1001a49c

1000a8cc <sms_pressure_init>:
    
    ulp_ready = true;
}

enum status_code sms_pressure_init(void)
{
1000a8cc:	b510      	push	{r4, lr}
    /* Read the PROM values */
    if(sms_pressure_ms58_read_prom() == STATUS_OK) {
1000a8ce:	4b0a      	ldr	r3, [pc, #40]	; (1000a8f8 <sms_pressure_init+0x2c>)
1000a8d0:	4798      	blx	r3
1000a8d2:	2800      	cmp	r0, #0
1000a8d4:	d10d      	bne.n	1000a8f2 <sms_pressure_init+0x26>
        pressure_device.hal.init_ok = true;
1000a8d6:	4b09      	ldr	r3, [pc, #36]	; (1000a8fc <sms_pressure_init+0x30>)
1000a8d8:	2201      	movs	r2, #1
1000a8da:	705a      	strb	r2, [r3, #1]
        pressure_device.hal.current_state = MS58_STATE_READY;
1000a8dc:	2402      	movs	r4, #2
1000a8de:	2125      	movs	r1, #37	; 0x25
1000a8e0:	545c      	strb	r4, [r3, r1]
		pressure_device.int_enabled = true;
1000a8e2:	3103      	adds	r1, #3
1000a8e4:	545a      	strb	r2, [r3, r1]
		pressure_device.new_int = false;
1000a8e6:	2200      	movs	r2, #0
1000a8e8:	3101      	adds	r1, #1
1000a8ea:	545a      	strb	r2, [r3, r1]
		pressure_device.rts = false;
1000a8ec:	3101      	adds	r1, #1
1000a8ee:	545a      	strb	r2, [r3, r1]
        return STATUS_OK;
1000a8f0:	e000      	b.n	1000a8f4 <sms_pressure_init+0x28>
    }
    return STATUS_ERR_IO;
1000a8f2:	2010      	movs	r0, #16
}
1000a8f4:	bd10      	pop	{r4, pc}
1000a8f6:	46c0      	nop			; (mov r8, r8)
1000a8f8:	1000a7cd 	.word	0x1000a7cd
1000a8fc:	1001a49c 	.word	0x1001a49c

1000a900 <sms_pressure_startup>:
    /* Disable power supply by default */
    gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, false);
}

void sms_pressure_startup(void)
{
1000a900:	b510      	push	{r4, lr}
    DBG_LOG_DEV("[sms_pressure_startup]\t\tStarting pressure sensor");
    //gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, true); // switch on MS58 pressure sensor
    /* Disable buttons for reset time (~3 ms) to avoid conflict with dualtimer1 */
    sms_button_toggle_callback(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
1000a902:	2101      	movs	r1, #1
1000a904:	2001      	movs	r0, #1
1000a906:	4b10      	ldr	r3, [pc, #64]	; (1000a948 <sms_pressure_startup+0x48>)
1000a908:	4798      	blx	r3
    pressure_device.hal.current_state = MS58_STATE_RESETTING;
1000a90a:	2101      	movs	r1, #1
1000a90c:	2325      	movs	r3, #37	; 0x25
1000a90e:	4a0f      	ldr	r2, [pc, #60]	; (1000a94c <sms_pressure_startup+0x4c>)
1000a910:	54d1      	strb	r1, [r2, r3]
    /* Write the reset command to MS58 */
    sms_pressure_ms58_reset();
1000a912:	4b0f      	ldr	r3, [pc, #60]	; (1000a950 <sms_pressure_startup+0x50>)
1000a914:	4798      	blx	r3
    delay_ms(3);
1000a916:	2003      	movs	r0, #3
1000a918:	4b0e      	ldr	r3, [pc, #56]	; (1000a954 <sms_pressure_startup+0x54>)
1000a91a:	4798      	blx	r3
    if(sms_pressure_init() != STATUS_OK) {
1000a91c:	4b0e      	ldr	r3, [pc, #56]	; (1000a958 <sms_pressure_startup+0x58>)
1000a91e:	4798      	blx	r3
1000a920:	2800      	cmp	r0, #0
1000a922:	d000      	beq.n	1000a926 <sms_pressure_startup+0x26>
1000a924:	e7fe      	b.n	1000a924 <sms_pressure_startup+0x24>
        DBG_LOG_DEV("[sms_pressure_startup]\t\t\tFailed to initialize pressure device");
        pressure_device.hal.init_ok = false;
        while(1){};
    }
    pressure_device.hal.current_state = MS58_STATE_READY;
1000a926:	4b09      	ldr	r3, [pc, #36]	; (1000a94c <sms_pressure_startup+0x4c>)
1000a928:	2102      	movs	r1, #2
1000a92a:	2225      	movs	r2, #37	; 0x25
1000a92c:	5499      	strb	r1, [r3, r2]
    pressure_device.hal.init_ok = true;
1000a92e:	2401      	movs	r4, #1
1000a930:	705c      	strb	r4, [r3, #1]
    sms_working_mode = SMS_MODE_COMPLETE;
1000a932:	3a1e      	subs	r2, #30
1000a934:	4b09      	ldr	r3, [pc, #36]	; (1000a95c <sms_pressure_startup+0x5c>)
1000a936:	701a      	strb	r2, [r3, #0]
    sms_sensors_interrupt_toggle(true, true);
1000a938:	3901      	subs	r1, #1
1000a93a:	2001      	movs	r0, #1
1000a93c:	4b08      	ldr	r3, [pc, #32]	; (1000a960 <sms_pressure_startup+0x60>)
1000a93e:	4798      	blx	r3
    
    ulp_ready = true;
1000a940:	4b08      	ldr	r3, [pc, #32]	; (1000a964 <sms_pressure_startup+0x64>)
1000a942:	701c      	strb	r4, [r3, #0]
}
1000a944:	bd10      	pop	{r4, pc}
1000a946:	46c0      	nop			; (mov r8, r8)
1000a948:	100095a5 	.word	0x100095a5
1000a94c:	1001a49c 	.word	0x1001a49c
1000a950:	1000a79d 	.word	0x1000a79d
1000a954:	1000aff1 	.word	0x1000aff1
1000a958:	1000a8cd 	.word	0x1000a8cd
1000a95c:	1001a410 	.word	0x1001a410
1000a960:	1000a9b9 	.word	0x1000a9b9
1000a964:	1001a411 	.word	0x1001a411

1000a968 <sms_pressure_define_services>:

    DBG_LOG_DEV("[sms_pressure_ms58_calculate] temperature = %ld  pressure = %ld", pressure_device.hal.temperature, pressure_device.hal.pressure);
}

void sms_pressure_define_services(void)
{
1000a968:	b510      	push	{r4, lr}
1000a96a:	b082      	sub	sp, #8
    at_ble_status_t status;
    uint8_t init_value = 0;
1000a96c:	466b      	mov	r3, sp
1000a96e:	1dda      	adds	r2, r3, #7
1000a970:	2300      	movs	r3, #0
1000a972:	7013      	strb	r3, [r2, #0]
    sms_ble_service_init(BLE_SERV_PRESSURE, &pressure_device.service_handler, &init_value);
1000a974:	4c09      	ldr	r4, [pc, #36]	; (1000a99c <sms_pressure_define_services+0x34>)
1000a976:	0021      	movs	r1, r4
1000a978:	2001      	movs	r0, #1
1000a97a:	4b09      	ldr	r3, [pc, #36]	; (1000a9a0 <sms_pressure_define_services+0x38>)
1000a97c:	4798      	blx	r3
    if((status = sms_ble_primary_service_define(&pressure_device.service_handler)) != AT_BLE_SUCCESS) {
1000a97e:	0020      	movs	r0, r4
1000a980:	4b08      	ldr	r3, [pc, #32]	; (1000a9a4 <sms_pressure_define_services+0x3c>)
1000a982:	4798      	blx	r3
1000a984:	1e04      	subs	r4, r0, #0
1000a986:	d006      	beq.n	1000a996 <sms_pressure_define_services+0x2e>
        DBG_LOG("[sms_pressure_define_services]\tServices defining failed, reason 0x%x", status);
1000a988:	4807      	ldr	r0, [pc, #28]	; (1000a9a8 <sms_pressure_define_services+0x40>)
1000a98a:	4b08      	ldr	r3, [pc, #32]	; (1000a9ac <sms_pressure_define_services+0x44>)
1000a98c:	4798      	blx	r3
1000a98e:	0021      	movs	r1, r4
1000a990:	4807      	ldr	r0, [pc, #28]	; (1000a9b0 <sms_pressure_define_services+0x48>)
1000a992:	4b08      	ldr	r3, [pc, #32]	; (1000a9b4 <sms_pressure_define_services+0x4c>)
1000a994:	4798      	blx	r3
    }
    else {
        DBG_LOG_DEV("[sms_pressure_define_services]\tServices defined, SMS pressure handle: %d", pressure_device.service_handler.serv_handle);
    }
1000a996:	b002      	add	sp, #8
1000a998:	bd10      	pop	{r4, pc}
1000a99a:	46c0      	nop			; (mov r8, r8)
1000a99c:	1001a4c8 	.word	0x1001a4c8
1000a9a0:	10009201 	.word	0x10009201
1000a9a4:	100091dd 	.word	0x100091dd
1000a9a8:	10017780 	.word	0x10017780
1000a9ac:	10016841 	.word	0x10016841
1000a9b0:	10017ab4 	.word	0x10017ab4
1000a9b4:	10016721 	.word	0x10016721

1000a9b8 <sms_sensors_interrupt_toggle>:
 */ 

#include "sms_peripheral1.h"

/* Sensors-related functions */
void sms_sensors_interrupt_toggle(bool mpu_int, bool press_int) {
1000a9b8:	b510      	push	{r4, lr}
1000a9ba:	000c      	movs	r4, r1
    /* IMU --> IMU_DRDY */
    if(mpu_int) {
1000a9bc:	2800      	cmp	r0, #0
1000a9be:	d006      	beq.n	1000a9ce <sms_sensors_interrupt_toggle+0x16>
        imu_device.state = IMU_STATE_ON;
1000a9c0:	2102      	movs	r1, #2
1000a9c2:	2383      	movs	r3, #131	; 0x83
1000a9c4:	4a14      	ldr	r2, [pc, #80]	; (1000aa18 <sms_sensors_interrupt_toggle+0x60>)
1000a9c6:	54d1      	strb	r1, [r2, r3]
        sms_imu_enable_callback();
1000a9c8:	4b14      	ldr	r3, [pc, #80]	; (1000aa1c <sms_sensors_interrupt_toggle+0x64>)
1000a9ca:	4798      	blx	r3
1000a9cc:	e005      	b.n	1000a9da <sms_sensors_interrupt_toggle+0x22>
    }
    else {
        imu_device.state = IMU_STATE_OFF;
1000a9ce:	2100      	movs	r1, #0
1000a9d0:	2383      	movs	r3, #131	; 0x83
1000a9d2:	4a11      	ldr	r2, [pc, #68]	; (1000aa18 <sms_sensors_interrupt_toggle+0x60>)
1000a9d4:	54d1      	strb	r1, [r2, r3]
        sms_imu_disable_callback();
1000a9d6:	4b12      	ldr	r3, [pc, #72]	; (1000aa20 <sms_sensors_interrupt_toggle+0x68>)
1000a9d8:	4798      	blx	r3
     * Note: Since there is no direct mechanism to simply enable and disable
     *       the AON sleep timer interruption, we have to initialize it each
     *       time (and it starts running) and register the corresponding
     *       callback (and it enables the interrupt)
     */
    if(press_int) {
1000a9da:	2c00      	cmp	r4, #0
1000a9dc:	d010      	beq.n	1000aa00 <sms_sensors_interrupt_toggle+0x48>
        pressure_device.hal.current_state = MS58_STATE_CONV_PRESSURE;
1000a9de:	4b11      	ldr	r3, [pc, #68]	; (1000aa24 <sms_sensors_interrupt_toggle+0x6c>)
1000a9e0:	2103      	movs	r1, #3
1000a9e2:	2225      	movs	r2, #37	; 0x25
1000a9e4:	5499      	strb	r1, [r3, r2]
        pressure_device.state = PRESSURE_STATE_ON;
1000a9e6:	3901      	subs	r1, #1
1000a9e8:	3206      	adds	r2, #6
1000a9ea:	5499      	strb	r1, [r3, r2]
        sms_timer_aon_init(SMS_PRESSURE_CONVERT_MS, AON_SLEEP_TIMER_RELOAD_MODE);
1000a9ec:	2100      	movs	r1, #0
1000a9ee:	480e      	ldr	r0, [pc, #56]	; (1000aa28 <sms_sensors_interrupt_toggle+0x70>)
1000a9f0:	4b0e      	ldr	r3, [pc, #56]	; (1000aa2c <sms_sensors_interrupt_toggle+0x74>)
1000a9f2:	4798      	blx	r3
        sms_timer_aon_register_callback();
1000a9f4:	4b0e      	ldr	r3, [pc, #56]	; (1000aa30 <sms_sensors_interrupt_toggle+0x78>)
1000a9f6:	4798      	blx	r3
        sensors_active = true;
1000a9f8:	2201      	movs	r2, #1
1000a9fa:	4b0e      	ldr	r3, [pc, #56]	; (1000aa34 <sms_sensors_interrupt_toggle+0x7c>)
1000a9fc:	701a      	strb	r2, [r3, #0]
1000a9fe:	e00a      	b.n	1000aa16 <sms_sensors_interrupt_toggle+0x5e>
    }
    else {
        pressure_device.hal.current_state = MS58_STATE_READY;
1000aa00:	2102      	movs	r1, #2
1000aa02:	2325      	movs	r3, #37	; 0x25
1000aa04:	4a07      	ldr	r2, [pc, #28]	; (1000aa24 <sms_sensors_interrupt_toggle+0x6c>)
1000aa06:	54d1      	strb	r1, [r2, r3]
        sms_timer_aon_disable();
1000aa08:	4b0b      	ldr	r3, [pc, #44]	; (1000aa38 <sms_sensors_interrupt_toggle+0x80>)
1000aa0a:	4798      	blx	r3
        sms_timer_aon_unregister_callback();
1000aa0c:	4b0b      	ldr	r3, [pc, #44]	; (1000aa3c <sms_sensors_interrupt_toggle+0x84>)
1000aa0e:	4798      	blx	r3
        sensors_active = false;
1000aa10:	2200      	movs	r2, #0
1000aa12:	4b08      	ldr	r3, [pc, #32]	; (1000aa34 <sms_sensors_interrupt_toggle+0x7c>)
1000aa14:	701a      	strb	r2, [r3, #0]
    }
}
1000aa16:	bd10      	pop	{r4, pc}
1000aa18:	1001a550 	.word	0x1001a550
1000aa1c:	100098d5 	.word	0x100098d5
1000aa20:	100098f1 	.word	0x100098f1
1000aa24:	1001a49c 	.word	0x1001a49c
1000aa28:	000003d5 	.word	0x000003d5
1000aa2c:	1000ab55 	.word	0x1000ab55
1000aa30:	1000ab89 	.word	0x1000ab89
1000aa34:	1001a528 	.word	0x1001a528
1000aa38:	1000ab7d 	.word	0x1000ab7d
1000aa3c:	1000aba9 	.word	0x1000aba9

1000aa40 <sms_sensors_switch>:
    

void sms_sensors_switch(bool mpu_en, bool press_en)
{
1000aa40:	b510      	push	{r4, lr}
1000aa42:	000c      	movs	r4, r1
    /* IMU */
    if(mpu_en) {
1000aa44:	2800      	cmp	r0, #0
1000aa46:	d103      	bne.n	1000aa50 <sms_sensors_switch+0x10>
            //mpu_device.hal.init_ok = true;
            //sms_sensors_interrupt_toggle(true, false);
        //}
    }
    else {
        gpio_pin_set_output_level(SMS_MPU_VCC_PIN, false);
1000aa48:	2100      	movs	r1, #0
1000aa4a:	3006      	adds	r0, #6
1000aa4c:	4b07      	ldr	r3, [pc, #28]	; (1000aa6c <sms_sensors_switch+0x2c>)
1000aa4e:	4798      	blx	r3
    }
    
    /* Pressure */
    if(press_en) {                
1000aa50:	2c00      	cmp	r4, #0
1000aa52:	d006      	beq.n	1000aa62 <sms_sensors_switch+0x22>
        pressure_device.hal.current_state = MS58_STATE_RESETTING;
1000aa54:	2101      	movs	r1, #1
1000aa56:	2325      	movs	r3, #37	; 0x25
1000aa58:	4a05      	ldr	r2, [pc, #20]	; (1000aa70 <sms_sensors_switch+0x30>)
1000aa5a:	54d1      	strb	r1, [r2, r3]
        //pressure_device.hal.reset_done = false;
        //pressure_device.hal.init_ok = false;
        sms_pressure_startup();
1000aa5c:	4b05      	ldr	r3, [pc, #20]	; (1000aa74 <sms_sensors_switch+0x34>)
1000aa5e:	4798      	blx	r3
1000aa60:	e003      	b.n	1000aa6a <sms_sensors_switch+0x2a>
    }
    else {
        gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, false);
1000aa62:	2100      	movs	r1, #0
1000aa64:	2007      	movs	r0, #7
1000aa66:	4b01      	ldr	r3, [pc, #4]	; (1000aa6c <sms_sensors_switch+0x2c>)
1000aa68:	4798      	blx	r3
    }
}
1000aa6a:	bd10      	pop	{r4, pc}
1000aa6c:	1000b8ed 	.word	0x1000b8ed
1000aa70:	1001a49c 	.word	0x1001a49c
1000aa74:	1000a901 	.word	0x1000a901

1000aa78 <sms_spi_master_configure>:
 *   + mode 3 on SPI0 @ 1 MHz for MPU-9250 IMU
 * - assign SS pin for each slave device
 * - enable SPI
 */ 
void sms_spi_master_configure(void)
{
1000aa78:	b530      	push	{r4, r5, lr}
1000aa7a:	b08d      	sub	sp, #52	; 0x34
    //DBG_LOG_DEV("[spi_master_configure]\tconfiguring SPI masters and attaching slaves...");

    /* Initialize ms58 spi slave device */
    struct spi_config spi_master_config;
    struct spi_slave_inst_config spi_slave_ms58_config;
    spi_slave_inst_get_config_defaults(&spi_slave_ms58_config);
1000aa7c:	ac01      	add	r4, sp, #4
1000aa7e:	0020      	movs	r0, r4
1000aa80:	4b13      	ldr	r3, [pc, #76]	; (1000aad0 <sms_spi_master_configure+0x58>)
1000aa82:	4798      	blx	r3
    spi_slave_ms58_config.ss_pin = SMS_PRESSURE_SPI_SS_PIN;
1000aa84:	2310      	movs	r3, #16
1000aa86:	7023      	strb	r3, [r4, #0]
    spi_attach_slave(&spi_slave_ms58_instance, &spi_slave_ms58_config);
1000aa88:	0021      	movs	r1, r4
1000aa8a:	4812      	ldr	r0, [pc, #72]	; (1000aad4 <sms_spi_master_configure+0x5c>)
1000aa8c:	4b12      	ldr	r3, [pc, #72]	; (1000aad8 <sms_spi_master_configure+0x60>)
1000aa8e:	4798      	blx	r3
    

    /* Initialize SPI1 master for ms58 */
    spi_get_config_defaults(&spi_master_config);
1000aa90:	ac02      	add	r4, sp, #8
1000aa92:	0020      	movs	r0, r4
1000aa94:	4b11      	ldr	r3, [pc, #68]	; (1000aadc <sms_spi_master_configure+0x64>)
1000aa96:	4798      	blx	r3
    spi_master_config.clock_divider = SPI_MASTER_MS58_CLOCK_DIV;
1000aa98:	2368      	movs	r3, #104	; 0x68
1000aa9a:	7123      	strb	r3, [r4, #4]
    spi_master_config.transfer_mode = SPI_MASTER_MS58_MODE;
1000aa9c:	2300      	movs	r3, #0
1000aa9e:	70a3      	strb	r3, [r4, #2]
    spi_master_config.pin_number_pad[0] = SPI_MASTER_MS58_PIN_SCK;
1000aaa0:	3311      	adds	r3, #17
1000aaa2:	60a3      	str	r3, [r4, #8]
    spi_master_config.pinmux_sel_pad[0] = SPI_MASTER_MS58_MUX_SCK;
1000aaa4:	3b0d      	subs	r3, #13
1000aaa6:	61a3      	str	r3, [r4, #24]
    spi_master_config.pin_number_pad[1] = SPI_MASTER_MS58_PIN_MOSI;
1000aaa8:	2213      	movs	r2, #19
1000aaaa:	60e2      	str	r2, [r4, #12]
    spi_master_config.pinmux_sel_pad[1] = SPI_MASTER_MS58_MUX_MOSI;
1000aaac:	61e3      	str	r3, [r4, #28]
    spi_master_config.pin_number_pad[2] = SPI_MASTER_MS58_PIN_SSN;
1000aaae:	3a14      	subs	r2, #20
1000aab0:	6122      	str	r2, [r4, #16]
    spi_master_config.pinmux_sel_pad[2] = SPI_MASTER_MS58_MUX_SSN;
1000aab2:	6222      	str	r2, [r4, #32]
    spi_master_config.pin_number_pad[3] = SPI_MASTER_MS58_MISO;
1000aab4:	3213      	adds	r2, #19
1000aab6:	6162      	str	r2, [r4, #20]
    spi_master_config.pinmux_sel_pad[3] = SPI_MASTER_MS58_MUX_MISO;
1000aab8:	6263      	str	r3, [r4, #36]	; 0x24
    spi_init(&spi_master_ms58_instance, SPI_MASTER_MS58_PORT, &spi_master_config);
1000aaba:	4d09      	ldr	r5, [pc, #36]	; (1000aae0 <sms_spi_master_configure+0x68>)
1000aabc:	0022      	movs	r2, r4
1000aabe:	4909      	ldr	r1, [pc, #36]	; (1000aae4 <sms_spi_master_configure+0x6c>)
1000aac0:	0028      	movs	r0, r5
1000aac2:	4b09      	ldr	r3, [pc, #36]	; (1000aae8 <sms_spi_master_configure+0x70>)
1000aac4:	4798      	blx	r3
    spi_enable(&spi_master_ms58_instance);
1000aac6:	0028      	movs	r0, r5
1000aac8:	4b08      	ldr	r3, [pc, #32]	; (1000aaec <sms_spi_master_configure+0x74>)
1000aaca:	4798      	blx	r3
}
1000aacc:	b00d      	add	sp, #52	; 0x34
1000aace:	bd30      	pop	{r4, r5, pc}
1000aad0:	1000b01d 	.word	0x1000b01d
1000aad4:	1001a538 	.word	0x1001a538
1000aad8:	1000b055 	.word	0x1000b055
1000aadc:	1000b029 	.word	0x1000b029
1000aae0:	1001a544 	.word	0x1001a544
1000aae4:	40007000 	.word	0x40007000
1000aae8:	1000b125 	.word	0x1000b125
1000aaec:	1000b095 	.word	0x1000b095

1000aaf0 <sms_spi_master_transceive>:
/* SPI transceive function:
 * - enable selected slave
 * - start transceive blocking job
 * - when job returned, disable selected slave
 */
enum status_code sms_spi_master_transceive(struct spi_module *const module, struct spi_slave_inst *const slave, uint8_t *tx_data, uint8_t *rx_data, uint16_t len) {
1000aaf0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000aaf2:	b083      	sub	sp, #12
1000aaf4:	0004      	movs	r4, r0
1000aaf6:	000d      	movs	r5, r1
1000aaf8:	9200      	str	r2, [sp, #0]
1000aafa:	9301      	str	r3, [sp, #4]
1000aafc:	ab08      	add	r3, sp, #32
1000aafe:	881e      	ldrh	r6, [r3, #0]
    enum status_code retVal;
    /* Enable slave */
    //DBG_LOG_CONT_DEV(" selecting slave...");
    spi_select_slave(module, slave, true);
1000ab00:	2201      	movs	r2, #1
1000ab02:	4f08      	ldr	r7, [pc, #32]	; (1000ab24 <sms_spi_master_transceive+0x34>)
1000ab04:	47b8      	blx	r7
    /* Write SPI data */
    //DBG_LOG_CONT_DEV(" writing data...");
    retVal = spi_transceive_buffer_wait(module, tx_data, rx_data, len);
1000ab06:	0033      	movs	r3, r6
1000ab08:	9a01      	ldr	r2, [sp, #4]
1000ab0a:	9900      	ldr	r1, [sp, #0]
1000ab0c:	0020      	movs	r0, r4
1000ab0e:	4e06      	ldr	r6, [pc, #24]	; (1000ab28 <sms_spi_master_transceive+0x38>)
1000ab10:	47b0      	blx	r6
1000ab12:	0006      	movs	r6, r0
    /* Disable slave */
    //DBG_LOG_CONT_DEV(" de-selecting slave...");
    spi_select_slave(module, slave, false);
1000ab14:	2200      	movs	r2, #0
1000ab16:	0029      	movs	r1, r5
1000ab18:	0020      	movs	r0, r4
1000ab1a:	47b8      	blx	r7
    //DBG_LOG_CONT_DEV(" done!");
    return retVal;
}
1000ab1c:	0030      	movs	r0, r6
1000ab1e:	b003      	add	sp, #12
1000ab20:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ab22:	46c0      	nop			; (mov r8, r8)
1000ab24:	1000b30d 	.word	0x1000b30d
1000ab28:	1000b289 	.word	0x1000b289

1000ab2c <sms_timer_aon_callback>:

#include "sms_timer.h"

/* AON SLEEP TIMER */
void sms_timer_aon_callback(void)
{
1000ab2c:	b510      	push	{r4, lr}
    if(pressure_device.int_enabled) {
1000ab2e:	2328      	movs	r3, #40	; 0x28
1000ab30:	4a06      	ldr	r2, [pc, #24]	; (1000ab4c <sms_timer_aon_callback+0x20>)
1000ab32:	5cd3      	ldrb	r3, [r2, r3]
1000ab34:	2b00      	cmp	r3, #0
1000ab36:	d008      	beq.n	1000ab4a <sms_timer_aon_callback+0x1e>
		pressure_device.new_int = true;
1000ab38:	2101      	movs	r1, #1
1000ab3a:	2329      	movs	r3, #41	; 0x29
1000ab3c:	54d1      	strb	r1, [r2, r3]
	    send_plf_int_msg_ind(AON_SLEEP_TIMER_EXPIRY_CALLBACK, AON_TIMER_EXPIRED, NULL, 0);
1000ab3e:	2300      	movs	r3, #0
1000ab40:	2200      	movs	r2, #0
1000ab42:	3102      	adds	r1, #2
1000ab44:	2042      	movs	r0, #66	; 0x42
1000ab46:	4c02      	ldr	r4, [pc, #8]	; (1000ab50 <sms_timer_aon_callback+0x24>)
1000ab48:	47a0      	blx	r4
	}
}
1000ab4a:	bd10      	pop	{r4, pc}
1000ab4c:	1001a49c 	.word	0x1001a49c
1000ab50:	1000e5b1 	.word	0x1000e5b1

1000ab54 <sms_timer_aon_init>:

void sms_timer_aon_init(uint32_t cnt, enum aon_sleep_timer_mode cnt_mode)
{
1000ab54:	b530      	push	{r4, r5, lr}
1000ab56:	b083      	sub	sp, #12
1000ab58:	0004      	movs	r4, r0
1000ab5a:	000d      	movs	r5, r1
    struct aon_sleep_timer_config config_aon_sleep_timer;
    aon_sleep_timer_get_config_defaults(&config_aon_sleep_timer);
1000ab5c:	4668      	mov	r0, sp
1000ab5e:	4b05      	ldr	r3, [pc, #20]	; (1000ab74 <sms_timer_aon_init+0x20>)
1000ab60:	4798      	blx	r3
    config_aon_sleep_timer.mode = cnt_mode;
1000ab62:	466b      	mov	r3, sp
1000ab64:	705d      	strb	r5, [r3, #1]
    config_aon_sleep_timer.counter = cnt;
1000ab66:	9401      	str	r4, [sp, #4]
    aon_sleep_timer_init(&config_aon_sleep_timer);
1000ab68:	4668      	mov	r0, sp
1000ab6a:	4b03      	ldr	r3, [pc, #12]	; (1000ab78 <sms_timer_aon_init+0x24>)
1000ab6c:	4798      	blx	r3
}
1000ab6e:	b003      	add	sp, #12
1000ab70:	bd30      	pop	{r4, r5, pc}
1000ab72:	46c0      	nop			; (mov r8, r8)
1000ab74:	100080e9 	.word	0x100080e9
1000ab78:	1000815d 	.word	0x1000815d

1000ab7c <sms_timer_aon_disable>:

void sms_timer_aon_disable(void)
{
1000ab7c:	b510      	push	{r4, lr}
    aon_sleep_timer_disable();
1000ab7e:	4b01      	ldr	r3, [pc, #4]	; (1000ab84 <sms_timer_aon_disable+0x8>)
1000ab80:	4798      	blx	r3
}
1000ab82:	bd10      	pop	{r4, pc}
1000ab84:	100080f9 	.word	0x100080f9

1000ab88 <sms_timer_aon_register_callback>:

void sms_timer_aon_register_callback(void)
{
1000ab88:	b510      	push	{r4, lr}
    aon_sleep_timer_register_callback(sms_timer_aon_callback);
1000ab8a:	4804      	ldr	r0, [pc, #16]	; (1000ab9c <sms_timer_aon_register_callback+0x14>)
1000ab8c:	4b04      	ldr	r3, [pc, #16]	; (1000aba0 <sms_timer_aon_register_callback+0x18>)
1000ab8e:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000ab90:	2280      	movs	r2, #128	; 0x80
1000ab92:	0512      	lsls	r2, r2, #20
1000ab94:	4b03      	ldr	r3, [pc, #12]	; (1000aba4 <sms_timer_aon_register_callback+0x1c>)
1000ab96:	601a      	str	r2, [r3, #0]
    NVIC_EnableIRQ(AON_SLEEP_TIMER0_IRQn);
}
1000ab98:	bd10      	pop	{r4, pc}
1000ab9a:	46c0      	nop			; (mov r8, r8)
1000ab9c:	1000ab2d 	.word	0x1000ab2d
1000aba0:	10008145 	.word	0x10008145
1000aba4:	e000e100 	.word	0xe000e100

1000aba8 <sms_timer_aon_unregister_callback>:

void sms_timer_aon_unregister_callback(void)
{
1000aba8:	b510      	push	{r4, lr}
    aon_sleep_timer_unregister_callback();
1000abaa:	4b04      	ldr	r3, [pc, #16]	; (1000abbc <sms_timer_aon_unregister_callback+0x14>)
1000abac:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000abae:	2180      	movs	r1, #128	; 0x80
1000abb0:	0509      	lsls	r1, r1, #20
1000abb2:	2380      	movs	r3, #128	; 0x80
1000abb4:	4a02      	ldr	r2, [pc, #8]	; (1000abc0 <sms_timer_aon_unregister_callback+0x18>)
1000abb6:	50d1      	str	r1, [r2, r3]
    NVIC_DisableIRQ(AON_SLEEP_TIMER0_IRQn);
}
1000abb8:	bd10      	pop	{r4, pc}
1000abba:	46c0      	nop			; (mov r8, r8)
1000abbc:	10008151 	.word	0x10008151
1000abc0:	e000e100 	.word	0xe000e100

1000abc4 <sms_dualtimer_init>:
    count = (uint32_t *)0;
}

/* DUALTIMER */
void sms_dualtimer_init(void)
{
1000abc4:	b510      	push	{r4, lr}
1000abc6:	b088      	sub	sp, #32
    struct dualtimer_config config_dualtimer;
    dualtimer_get_config_defaults(&config_dualtimer);
1000abc8:	ac01      	add	r4, sp, #4
1000abca:	0020      	movs	r0, r4
1000abcc:	4b09      	ldr	r3, [pc, #36]	; (1000abf4 <sms_dualtimer_init+0x30>)
1000abce:	4798      	blx	r3

    config_dualtimer.timer1.load_value = SMS_DUALTIMER_LOAD_S;
1000abd0:	4b09      	ldr	r3, [pc, #36]	; (1000abf8 <sms_dualtimer_init+0x34>)
1000abd2:	60a3      	str	r3, [r4, #8]
    config_dualtimer.timer1.counter_mode = DUALTIMER_ONE_SHOT_MODE;
1000abd4:	2300      	movs	r3, #0
1000abd6:	7063      	strb	r3, [r4, #1]
    config_dualtimer.timer2.load_value = SMS_DUALTIMER_LOAD_MS;
1000abd8:	4a08      	ldr	r2, [pc, #32]	; (1000abfc <sms_dualtimer_init+0x38>)
1000abda:	6162      	str	r2, [r4, #20]
    config_dualtimer.timer2.counter_mode = DUALTIMER_ONE_SHOT_MODE;
1000abdc:	7363      	strb	r3, [r4, #13]

    dualtimer_init(&config_dualtimer);
1000abde:	0020      	movs	r0, r4
1000abe0:	4b07      	ldr	r3, [pc, #28]	; (1000ac00 <sms_dualtimer_init+0x3c>)
1000abe2:	4798      	blx	r3
    dualtimer_disable(DUALTIMER_TIMER1);
1000abe4:	2000      	movs	r0, #0
1000abe6:	4c07      	ldr	r4, [pc, #28]	; (1000ac04 <sms_dualtimer_init+0x40>)
1000abe8:	47a0      	blx	r4
    dualtimer_disable(DUALTIMER_TIMER2);
1000abea:	2001      	movs	r0, #1
1000abec:	47a0      	blx	r4
}
1000abee:	b008      	add	sp, #32
1000abf0:	bd10      	pop	{r4, pc}
1000abf2:	46c0      	nop			; (mov r8, r8)
1000abf4:	1000b371 	.word	0x1000b371
1000abf8:	018cba80 	.word	0x018cba80
1000abfc:	00006590 	.word	0x00006590
1000ac00:	1000b419 	.word	0x1000b419
1000ac04:	1000b3f5 	.word	0x1000b3f5

1000ac08 <sms_dualtimer_register_callback>:

void sms_dualtimer_register_callback(enum dualtimer_timer tmr, sms_dualtimer_callback_t cb_handler)
{
1000ac08:	b510      	push	{r4, lr}
1000ac0a:	0004      	movs	r4, r0
    dualtimer_register_callback(tmr, cb_handler);
1000ac0c:	4b02      	ldr	r3, [pc, #8]	; (1000ac18 <sms_dualtimer_register_callback+0x10>)
1000ac0e:	4798      	blx	r3
    NVIC_EnableIRQ(DUALTIMER0_IRQn);
}

void sms_dualtimer_stop(enum dualtimer_timer tmr)
{
    dualtimer_disable(tmr);
1000ac10:	0020      	movs	r0, r4
1000ac12:	4b02      	ldr	r3, [pc, #8]	; (1000ac1c <sms_dualtimer_register_callback+0x14>)
1000ac14:	4798      	blx	r3

void sms_dualtimer_register_callback(enum dualtimer_timer tmr, sms_dualtimer_callback_t cb_handler)
{
    dualtimer_register_callback(tmr, cb_handler);
    sms_dualtimer_stop(tmr);
}
1000ac16:	bd10      	pop	{r4, pc}
1000ac18:	1000b51d 	.word	0x1000b51d
1000ac1c:	1000b3f5 	.word	0x1000b3f5

1000ac20 <sms_dualtimer_start>:

void sms_dualtimer_start(timer_unit_type_t unit, uint32_t delay, enum dualtimer_timer tmr)
{
1000ac20:	b510      	push	{r4, lr}
1000ac22:	0014      	movs	r4, r2
    uint32_t timer_load = 1;
    switch(unit) {
1000ac24:	2801      	cmp	r0, #1
1000ac26:	d006      	beq.n	1000ac36 <sms_dualtimer_start+0x16>
1000ac28:	2800      	cmp	r0, #0
1000ac2a:	d002      	beq.n	1000ac32 <sms_dualtimer_start+0x12>
1000ac2c:	2802      	cmp	r0, #2
1000ac2e:	d004      	beq.n	1000ac3a <sms_dualtimer_start+0x1a>
1000ac30:	e005      	b.n	1000ac3e <sms_dualtimer_start+0x1e>
        case TIMER_UNIT_US:
        timer_load = SMS_DUALTIMER_LOAD_US;
1000ac32:	221a      	movs	r2, #26
1000ac34:	e004      	b.n	1000ac40 <sms_dualtimer_start+0x20>
        break;
        
        case TIMER_UNIT_MS:
        timer_load = SMS_DUALTIMER_LOAD_MS;
1000ac36:	4a0c      	ldr	r2, [pc, #48]	; (1000ac68 <sms_dualtimer_start+0x48>)
        break;
1000ac38:	e002      	b.n	1000ac40 <sms_dualtimer_start+0x20>
        
        case TIMER_UNIT_S:
        timer_load = SMS_DUALTIMER_LOAD_S;
1000ac3a:	4a0c      	ldr	r2, [pc, #48]	; (1000ac6c <sms_dualtimer_start+0x4c>)
        break;
1000ac3c:	e000      	b.n	1000ac40 <sms_dualtimer_start+0x20>
    sms_dualtimer_stop(tmr);
}

void sms_dualtimer_start(timer_unit_type_t unit, uint32_t delay, enum dualtimer_timer tmr)
{
    uint32_t timer_load = 1;
1000ac3e:	2201      	movs	r2, #1
        
        default:
        break;
    }
    
    if(delay <= 0) {
1000ac40:	2900      	cmp	r1, #0
1000ac42:	d101      	bne.n	1000ac48 <sms_dualtimer_start+0x28>
        //DBG_LOG("[sms_dualtimer_start]\tWarning! Delay value < 0... setting to 1000");
        delay = 1000;
1000ac44:	21fa      	movs	r1, #250	; 0xfa
1000ac46:	0089      	lsls	r1, r1, #2
    }
    
    ulp_ready = false;
1000ac48:	2000      	movs	r0, #0
1000ac4a:	4b09      	ldr	r3, [pc, #36]	; (1000ac70 <sms_dualtimer_start+0x50>)
1000ac4c:	7018      	strb	r0, [r3, #0]
    //DBG_LOG_DEV("[sms_dualtimer_start]\t\tStarting timer%d... load: %ld, delay: %ld", (tmr+1), timer_load, delay);
    dualtimer_set_counter(tmr, DUALTIMER_SET_CURRUNT_REG, timer_load * delay);
1000ac4e:	434a      	muls	r2, r1
1000ac50:	2100      	movs	r1, #0
1000ac52:	0020      	movs	r0, r4
1000ac54:	4b07      	ldr	r3, [pc, #28]	; (1000ac74 <sms_dualtimer_start+0x54>)
1000ac56:	4798      	blx	r3
    dualtimer_enable(tmr);
1000ac58:	0020      	movs	r0, r4
1000ac5a:	4b07      	ldr	r3, [pc, #28]	; (1000ac78 <sms_dualtimer_start+0x58>)
1000ac5c:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000ac5e:	2280      	movs	r2, #128	; 0x80
1000ac60:	01d2      	lsls	r2, r2, #7
1000ac62:	4b06      	ldr	r3, [pc, #24]	; (1000ac7c <sms_dualtimer_start+0x5c>)
1000ac64:	601a      	str	r2, [r3, #0]
    NVIC_EnableIRQ(DUALTIMER0_IRQn);
}
1000ac66:	bd10      	pop	{r4, pc}
1000ac68:	00006590 	.word	0x00006590
1000ac6c:	018cba80 	.word	0x018cba80
1000ac70:	1001a411 	.word	0x1001a411
1000ac74:	1000b3a9 	.word	0x1000b3a9
1000ac78:	1000b3d1 	.word	0x1000b3d1
1000ac7c:	e000e100 	.word	0xe000e100

1000ac80 <sms_dualtimer_stop>:

void sms_dualtimer_stop(enum dualtimer_timer tmr)
{
1000ac80:	b510      	push	{r4, lr}
    dualtimer_disable(tmr);
1000ac82:	4b01      	ldr	r3, [pc, #4]	; (1000ac88 <sms_dualtimer_stop+0x8>)
1000ac84:	4798      	blx	r3
}
1000ac86:	bd10      	pop	{r4, pc}
1000ac88:	1000b3f5 	.word	0x1000b3f5

1000ac8c <sms_dualtimer1_cb>:

void sms_dualtimer1_cb(void)
{
1000ac8c:	b510      	push	{r4, lr}
    timer1_instance.new_int = true;
1000ac8e:	2201      	movs	r2, #1
1000ac90:	4b04      	ldr	r3, [pc, #16]	; (1000aca4 <sms_dualtimer1_cb+0x18>)
1000ac92:	709a      	strb	r2, [r3, #2]
    send_plf_int_msg_ind(DUALTIMER_TIMER1_CALLBACK, TIMER_EXPIRED_CALLBACK_TYPE_DETECT, NULL, 0);
1000ac94:	2300      	movs	r3, #0
1000ac96:	2200      	movs	r2, #0
1000ac98:	2101      	movs	r1, #1
1000ac9a:	2040      	movs	r0, #64	; 0x40
1000ac9c:	4c02      	ldr	r4, [pc, #8]	; (1000aca8 <sms_dualtimer1_cb+0x1c>)
1000ac9e:	47a0      	blx	r4
}
1000aca0:	bd10      	pop	{r4, pc}
1000aca2:	46c0      	nop			; (mov r8, r8)
1000aca4:	1001a488 	.word	0x1001a488
1000aca8:	1000e5b1 	.word	0x1000e5b1

1000acac <sms_dualtimer1_fn>:
    send_plf_int_msg_ind(DUALTIMER_TIMER2_CALLBACK, TIMER_EXPIRED_CALLBACK_TYPE_DETECT, NULL, 0);
}


void sms_dualtimer1_fn(void)
{
1000acac:	b510      	push	{r4, lr}
    //sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
    switch(timer1_current_mode) {
1000acae:	4b79      	ldr	r3, [pc, #484]	; (1000ae94 <sms_dualtimer1_fn+0x1e8>)
1000acb0:	781b      	ldrb	r3, [r3, #0]
1000acb2:	b2db      	uxtb	r3, r3
1000acb4:	2b01      	cmp	r3, #1
1000acb6:	d003      	beq.n	1000acc0 <sms_dualtimer1_fn+0x14>
1000acb8:	2b02      	cmp	r3, #2
1000acba:	d100      	bne.n	1000acbe <sms_dualtimer1_fn+0x12>
1000acbc:	e0ae      	b.n	1000ae1c <sms_dualtimer1_fn+0x170>
1000acbe:	e0e1      	b.n	1000ae84 <sms_dualtimer1_fn+0x1d8>
        /* Timer1 mode = STARTUP */
        case TIMER1_MODE_STARTUP:
        {
            timer1_current_mode = TIMER1_MODE_NONE;
1000acc0:	2200      	movs	r2, #0
1000acc2:	4b74      	ldr	r3, [pc, #464]	; (1000ae94 <sms_dualtimer1_fn+0x1e8>)
1000acc4:	701a      	strb	r2, [r3, #0]
            button_instance.previous_state = button_instance.current_state;
1000acc6:	4c74      	ldr	r4, [pc, #464]	; (1000ae98 <sms_dualtimer1_fn+0x1ec>)
1000acc8:	7b63      	ldrb	r3, [r4, #13]
1000acca:	7323      	strb	r3, [r4, #12]
            button_instance.current_state = sms_button_get_state();
1000accc:	4b73      	ldr	r3, [pc, #460]	; (1000ae9c <sms_dualtimer1_fn+0x1f0>)
1000acce:	4798      	blx	r3
1000acd0:	7360      	strb	r0, [r4, #13]
            sms_monitor_get_states("[sms_dualtimer1_fn]");
1000acd2:	4873      	ldr	r0, [pc, #460]	; (1000aea0 <sms_dualtimer1_fn+0x1f4>)
1000acd4:	4b73      	ldr	r3, [pc, #460]	; (1000aea4 <sms_dualtimer1_fn+0x1f8>)
1000acd6:	4798      	blx	r3
            
            switch(button_instance.previous_state) {
1000acd8:	7b23      	ldrb	r3, [r4, #12]
1000acda:	2b01      	cmp	r3, #1
1000acdc:	d002      	beq.n	1000ace4 <sms_dualtimer1_fn+0x38>
1000acde:	2b02      	cmp	r3, #2
1000ace0:	d04c      	beq.n	1000ad7c <sms_dualtimer1_fn+0xd0>
1000ace2:	e093      	b.n	1000ae0c <sms_dualtimer1_fn+0x160>
                // --- Timer1 mode = STARTUP: switch prev_state ---
                case BUTTON_STATE_B0:
                switch(button_instance.current_state) {
1000ace4:	4b6c      	ldr	r3, [pc, #432]	; (1000ae98 <sms_dualtimer1_fn+0x1ec>)
1000ace6:	7b5b      	ldrb	r3, [r3, #13]
1000ace8:	2b01      	cmp	r3, #1
1000acea:	d002      	beq.n	1000acf2 <sms_dualtimer1_fn+0x46>
1000acec:	2b02      	cmp	r3, #2
1000acee:	d023      	beq.n	1000ad38 <sms_dualtimer1_fn+0x8c>
1000acf0:	e03b      	b.n	1000ad6a <sms_dualtimer1_fn+0xbe>
                    // --- prev_state = b0: switch current_state ---
                    case BUTTON_STATE_B0:
                    if(ble_instance.current_state == BLE_STATE_POWEROFF) {
1000acf2:	4b6d      	ldr	r3, [pc, #436]	; (1000aea8 <sms_dualtimer1_fn+0x1fc>)
1000acf4:	781b      	ldrb	r3, [r3, #0]
1000acf6:	2b00      	cmp	r3, #0
1000acf8:	d115      	bne.n	1000ad26 <sms_dualtimer1_fn+0x7a>
                        sms_btn_cnt++;
1000acfa:	4a6c      	ldr	r2, [pc, #432]	; (1000aeac <sms_dualtimer1_fn+0x200>)
1000acfc:	7813      	ldrb	r3, [r2, #0]
1000acfe:	3301      	adds	r3, #1
1000ad00:	b2db      	uxtb	r3, r3
1000ad02:	7013      	strb	r3, [r2, #0]
                        if(sms_btn_cnt >= SMS_BTN_STARTUP_CNT) {
1000ad04:	2b0f      	cmp	r3, #15
1000ad06:	d905      	bls.n	1000ad14 <sms_dualtimer1_fn+0x68>
                            timer1_current_mode = TIMER1_MODE_NONE;
1000ad08:	2200      	movs	r2, #0
1000ad0a:	4b62      	ldr	r3, [pc, #392]	; (1000ae94 <sms_dualtimer1_fn+0x1e8>)
1000ad0c:	701a      	strb	r2, [r3, #0]
                            sms_ble_startup();
1000ad0e:	4b68      	ldr	r3, [pc, #416]	; (1000aeb0 <sms_dualtimer1_fn+0x204>)
1000ad10:	4798      	blx	r3
1000ad12:	e0be      	b.n	1000ae92 <sms_dualtimer1_fn+0x1e6>
                        }
                        else {
                            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                            timer1_current_mode = TIMER1_MODE_STARTUP;
1000ad14:	2201      	movs	r2, #1
1000ad16:	4b5f      	ldr	r3, [pc, #380]	; (1000ae94 <sms_dualtimer1_fn+0x1e8>)
1000ad18:	701a      	strb	r2, [r3, #0]
                            //ulp_ready = false;
                            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
1000ad1a:	2200      	movs	r2, #0
1000ad1c:	21fa      	movs	r1, #250	; 0xfa
1000ad1e:	2001      	movs	r0, #1
1000ad20:	4b64      	ldr	r3, [pc, #400]	; (1000aeb4 <sms_dualtimer1_fn+0x208>)
1000ad22:	4798      	blx	r3
1000ad24:	e0b5      	b.n	1000ae92 <sms_dualtimer1_fn+0x1e6>
                        }
                    }
                    else {
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        if(timer2_current_mode == TIMER2_MODE_NONE) {
1000ad26:	4b64      	ldr	r3, [pc, #400]	; (1000aeb8 <sms_dualtimer1_fn+0x20c>)
1000ad28:	781b      	ldrb	r3, [r3, #0]
1000ad2a:	2b00      	cmp	r3, #0
1000ad2c:	d000      	beq.n	1000ad30 <sms_dualtimer1_fn+0x84>
1000ad2e:	e0b0      	b.n	1000ae92 <sms_dualtimer1_fn+0x1e6>
                            //release_sleep_lock();
                            ulp_ready = true;
1000ad30:	2201      	movs	r2, #1
1000ad32:	4b62      	ldr	r3, [pc, #392]	; (1000aebc <sms_dualtimer1_fn+0x210>)
1000ad34:	701a      	strb	r2, [r3, #0]
1000ad36:	e0ac      	b.n	1000ae92 <sms_dualtimer1_fn+0x1e6>
                    }
                    break;
                    
                    // --- prev_state = b0: switch current_state ---
                    case BUTTON_STATE_B1:
                    if(ble_instance.current_state == BLE_STATE_POWEROFF) {
1000ad38:	4b5b      	ldr	r3, [pc, #364]	; (1000aea8 <sms_dualtimer1_fn+0x1fc>)
1000ad3a:	781b      	ldrb	r3, [r3, #0]
1000ad3c:	2b00      	cmp	r3, #0
1000ad3e:	d10b      	bne.n	1000ad58 <sms_dualtimer1_fn+0xac>
                        sms_btn_cnt = 0;
1000ad40:	2200      	movs	r2, #0
1000ad42:	4b5a      	ldr	r3, [pc, #360]	; (1000aeac <sms_dualtimer1_fn+0x200>)
1000ad44:	701a      	strb	r2, [r3, #0]
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        timer1_current_mode = TIMER1_MODE_STARTUP;
1000ad46:	3201      	adds	r2, #1
1000ad48:	4b52      	ldr	r3, [pc, #328]	; (1000ae94 <sms_dualtimer1_fn+0x1e8>)
1000ad4a:	701a      	strb	r2, [r3, #0]
                        //ulp_ready = false;
                        sms_dualtimer_start(TIMER_UNIT_MS, SMS_BLINK_STARTUP_MS, DUALTIMER_TIMER1);
1000ad4c:	2200      	movs	r2, #0
1000ad4e:	2164      	movs	r1, #100	; 0x64
1000ad50:	2001      	movs	r0, #1
1000ad52:	4b58      	ldr	r3, [pc, #352]	; (1000aeb4 <sms_dualtimer1_fn+0x208>)
1000ad54:	4798      	blx	r3
1000ad56:	e09c      	b.n	1000ae92 <sms_dualtimer1_fn+0x1e6>
                    }
                    else {
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        if(timer2_current_mode == TIMER2_MODE_NONE) {
1000ad58:	4b57      	ldr	r3, [pc, #348]	; (1000aeb8 <sms_dualtimer1_fn+0x20c>)
1000ad5a:	781b      	ldrb	r3, [r3, #0]
1000ad5c:	2b00      	cmp	r3, #0
1000ad5e:	d000      	beq.n	1000ad62 <sms_dualtimer1_fn+0xb6>
1000ad60:	e097      	b.n	1000ae92 <sms_dualtimer1_fn+0x1e6>
                            //release_sleep_lock();
                            ulp_ready = true;
1000ad62:	2201      	movs	r2, #1
1000ad64:	4b55      	ldr	r3, [pc, #340]	; (1000aebc <sms_dualtimer1_fn+0x210>)
1000ad66:	701a      	strb	r2, [r3, #0]
1000ad68:	e093      	b.n	1000ae92 <sms_dualtimer1_fn+0x1e6>
                    // --- prev_state = b0: switch current_state ---
                    case BUTTON_STATE_BOTH:
                    case BUTTON_STATE_NONE:
                    default:
                    //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                    if(timer2_current_mode == TIMER2_MODE_NONE) {
1000ad6a:	4b53      	ldr	r3, [pc, #332]	; (1000aeb8 <sms_dualtimer1_fn+0x20c>)
1000ad6c:	781b      	ldrb	r3, [r3, #0]
1000ad6e:	2b00      	cmp	r3, #0
1000ad70:	d000      	beq.n	1000ad74 <sms_dualtimer1_fn+0xc8>
1000ad72:	e08e      	b.n	1000ae92 <sms_dualtimer1_fn+0x1e6>
                        //release_sleep_lock();
                        ulp_ready = true;
1000ad74:	2201      	movs	r2, #1
1000ad76:	4b51      	ldr	r3, [pc, #324]	; (1000aebc <sms_dualtimer1_fn+0x210>)
1000ad78:	701a      	strb	r2, [r3, #0]
1000ad7a:	e08a      	b.n	1000ae92 <sms_dualtimer1_fn+0x1e6>
                }
                break;
                
                // --- Timer1 mode = STARTUP: switch prev_state ---
                case BUTTON_STATE_B1:
                switch(button_instance.current_state) {
1000ad7c:	4b46      	ldr	r3, [pc, #280]	; (1000ae98 <sms_dualtimer1_fn+0x1ec>)
1000ad7e:	7b5b      	ldrb	r3, [r3, #13]
1000ad80:	2b01      	cmp	r3, #1
1000ad82:	d023      	beq.n	1000adcc <sms_dualtimer1_fn+0x120>
1000ad84:	2b02      	cmp	r3, #2
1000ad86:	d139      	bne.n	1000adfc <sms_dualtimer1_fn+0x150>
                    // --- prev_state = b1: switch current_state ---
                    case BUTTON_STATE_B1:
                    if(ble_instance.current_state == BLE_STATE_POWEROFF) {
1000ad88:	4b47      	ldr	r3, [pc, #284]	; (1000aea8 <sms_dualtimer1_fn+0x1fc>)
1000ad8a:	781b      	ldrb	r3, [r3, #0]
1000ad8c:	2b00      	cmp	r3, #0
1000ad8e:	d115      	bne.n	1000adbc <sms_dualtimer1_fn+0x110>
                        sms_btn_cnt++;
1000ad90:	4a46      	ldr	r2, [pc, #280]	; (1000aeac <sms_dualtimer1_fn+0x200>)
1000ad92:	7813      	ldrb	r3, [r2, #0]
1000ad94:	3301      	adds	r3, #1
1000ad96:	b2db      	uxtb	r3, r3
1000ad98:	7013      	strb	r3, [r2, #0]
                        if(sms_btn_cnt >= SMS_BTN_STARTUP_CNT) {
1000ad9a:	2b0f      	cmp	r3, #15
1000ad9c:	d905      	bls.n	1000adaa <sms_dualtimer1_fn+0xfe>
                            timer1_current_mode = TIMER1_MODE_NONE;
1000ad9e:	2200      	movs	r2, #0
1000ada0:	4b3c      	ldr	r3, [pc, #240]	; (1000ae94 <sms_dualtimer1_fn+0x1e8>)
1000ada2:	701a      	strb	r2, [r3, #0]
                            sms_ble_startup();
1000ada4:	4b42      	ldr	r3, [pc, #264]	; (1000aeb0 <sms_dualtimer1_fn+0x204>)
1000ada6:	4798      	blx	r3
1000ada8:	e073      	b.n	1000ae92 <sms_dualtimer1_fn+0x1e6>
                        }
                        else {
                            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                            timer1_current_mode = TIMER1_MODE_STARTUP;
1000adaa:	2201      	movs	r2, #1
1000adac:	4b39      	ldr	r3, [pc, #228]	; (1000ae94 <sms_dualtimer1_fn+0x1e8>)
1000adae:	701a      	strb	r2, [r3, #0]
                            //ulp_ready = false;
                            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
1000adb0:	2200      	movs	r2, #0
1000adb2:	21fa      	movs	r1, #250	; 0xfa
1000adb4:	2001      	movs	r0, #1
1000adb6:	4b3f      	ldr	r3, [pc, #252]	; (1000aeb4 <sms_dualtimer1_fn+0x208>)
1000adb8:	4798      	blx	r3
1000adba:	e06a      	b.n	1000ae92 <sms_dualtimer1_fn+0x1e6>
                        }
                    }
                    else {
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        if(timer2_current_mode == TIMER2_MODE_NONE) {
1000adbc:	4b3e      	ldr	r3, [pc, #248]	; (1000aeb8 <sms_dualtimer1_fn+0x20c>)
1000adbe:	781b      	ldrb	r3, [r3, #0]
1000adc0:	2b00      	cmp	r3, #0
1000adc2:	d166      	bne.n	1000ae92 <sms_dualtimer1_fn+0x1e6>
                            //release_sleep_lock();
                            ulp_ready = true;
1000adc4:	2201      	movs	r2, #1
1000adc6:	4b3d      	ldr	r3, [pc, #244]	; (1000aebc <sms_dualtimer1_fn+0x210>)
1000adc8:	701a      	strb	r2, [r3, #0]
1000adca:	e062      	b.n	1000ae92 <sms_dualtimer1_fn+0x1e6>
                    }
                    break;
                    
                    // --- prev_state = b1: switch current_state ---
                    case BUTTON_STATE_B0:
                    if(ble_instance.current_state == BLE_STATE_POWEROFF) {
1000adcc:	4b36      	ldr	r3, [pc, #216]	; (1000aea8 <sms_dualtimer1_fn+0x1fc>)
1000adce:	781b      	ldrb	r3, [r3, #0]
1000add0:	2b00      	cmp	r3, #0
1000add2:	d10b      	bne.n	1000adec <sms_dualtimer1_fn+0x140>
                        sms_btn_cnt = 0;
1000add4:	2200      	movs	r2, #0
1000add6:	4b35      	ldr	r3, [pc, #212]	; (1000aeac <sms_dualtimer1_fn+0x200>)
1000add8:	701a      	strb	r2, [r3, #0]
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        timer1_current_mode = TIMER1_MODE_STARTUP;
1000adda:	3201      	adds	r2, #1
1000addc:	4b2d      	ldr	r3, [pc, #180]	; (1000ae94 <sms_dualtimer1_fn+0x1e8>)
1000adde:	701a      	strb	r2, [r3, #0]
                        //ulp_ready = false;
                        sms_dualtimer_start(TIMER_UNIT_MS, SMS_BLINK_STARTUP_MS, DUALTIMER_TIMER1);
1000ade0:	2200      	movs	r2, #0
1000ade2:	2164      	movs	r1, #100	; 0x64
1000ade4:	2001      	movs	r0, #1
1000ade6:	4b33      	ldr	r3, [pc, #204]	; (1000aeb4 <sms_dualtimer1_fn+0x208>)
1000ade8:	4798      	blx	r3
1000adea:	e052      	b.n	1000ae92 <sms_dualtimer1_fn+0x1e6>
                    }
                    else {
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        if(timer2_current_mode == TIMER2_MODE_NONE) {
1000adec:	4b32      	ldr	r3, [pc, #200]	; (1000aeb8 <sms_dualtimer1_fn+0x20c>)
1000adee:	781b      	ldrb	r3, [r3, #0]
1000adf0:	2b00      	cmp	r3, #0
1000adf2:	d14e      	bne.n	1000ae92 <sms_dualtimer1_fn+0x1e6>
                            //release_sleep_lock();
                            ulp_ready = true;
1000adf4:	2201      	movs	r2, #1
1000adf6:	4b31      	ldr	r3, [pc, #196]	; (1000aebc <sms_dualtimer1_fn+0x210>)
1000adf8:	701a      	strb	r2, [r3, #0]
1000adfa:	e04a      	b.n	1000ae92 <sms_dualtimer1_fn+0x1e6>
                    // --- prev_state = b1: switch current_state ---
                    case BUTTON_STATE_NONE:
                    case BUTTON_STATE_BOTH:
                    default:
                    //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                    if(timer2_current_mode == TIMER2_MODE_NONE) {
1000adfc:	4b2e      	ldr	r3, [pc, #184]	; (1000aeb8 <sms_dualtimer1_fn+0x20c>)
1000adfe:	781b      	ldrb	r3, [r3, #0]
1000ae00:	2b00      	cmp	r3, #0
1000ae02:	d146      	bne.n	1000ae92 <sms_dualtimer1_fn+0x1e6>
                        //release_sleep_lock();
                        ulp_ready = true;
1000ae04:	2201      	movs	r2, #1
1000ae06:	4b2d      	ldr	r3, [pc, #180]	; (1000aebc <sms_dualtimer1_fn+0x210>)
1000ae08:	701a      	strb	r2, [r3, #0]
1000ae0a:	e042      	b.n	1000ae92 <sms_dualtimer1_fn+0x1e6>
                case BUTTON_STATE_NONE:
                case BUTTON_STATE_BOTH:
                default:
                {
                    //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                    if(timer2_current_mode == TIMER2_MODE_NONE) {
1000ae0c:	4b2a      	ldr	r3, [pc, #168]	; (1000aeb8 <sms_dualtimer1_fn+0x20c>)
1000ae0e:	781b      	ldrb	r3, [r3, #0]
1000ae10:	2b00      	cmp	r3, #0
1000ae12:	d13e      	bne.n	1000ae92 <sms_dualtimer1_fn+0x1e6>
                        //release_sleep_lock();
                        ulp_ready = true;
1000ae14:	2201      	movs	r2, #1
1000ae16:	4b29      	ldr	r3, [pc, #164]	; (1000aebc <sms_dualtimer1_fn+0x210>)
1000ae18:	701a      	strb	r2, [r3, #0]
1000ae1a:	e03a      	b.n	1000ae92 <sms_dualtimer1_fn+0x1e6>
        
        /* Timer1 mode = SHUTDOWN */
        case TIMER1_MODE_SHUTDOWN:
        {
            //timer1_current_mode = TIMER1_MODE_NONE;
            button_instance.previous_state = button_instance.current_state;
1000ae1c:	4c1e      	ldr	r4, [pc, #120]	; (1000ae98 <sms_dualtimer1_fn+0x1ec>)
1000ae1e:	7b63      	ldrb	r3, [r4, #13]
1000ae20:	7323      	strb	r3, [r4, #12]
            button_instance.current_state = sms_button_get_state();
1000ae22:	4b1e      	ldr	r3, [pc, #120]	; (1000ae9c <sms_dualtimer1_fn+0x1f0>)
1000ae24:	4798      	blx	r3
1000ae26:	7360      	strb	r0, [r4, #13]
            sms_monitor_get_states("[sms_dualtimer1_fn]");
1000ae28:	481d      	ldr	r0, [pc, #116]	; (1000aea0 <sms_dualtimer1_fn+0x1f4>)
1000ae2a:	4b1e      	ldr	r3, [pc, #120]	; (1000aea4 <sms_dualtimer1_fn+0x1f8>)
1000ae2c:	4798      	blx	r3
            
            if((button_instance.previous_state == BUTTON_STATE_BOTH) && (button_instance.current_state == BUTTON_STATE_BOTH)) {
1000ae2e:	89a2      	ldrh	r2, [r4, #12]
1000ae30:	4b23      	ldr	r3, [pc, #140]	; (1000aec0 <sms_dualtimer1_fn+0x214>)
1000ae32:	429a      	cmp	r2, r3
1000ae34:	d112      	bne.n	1000ae5c <sms_dualtimer1_fn+0x1b0>
                sms_btn_cnt++;
1000ae36:	4a1d      	ldr	r2, [pc, #116]	; (1000aeac <sms_dualtimer1_fn+0x200>)
1000ae38:	7813      	ldrb	r3, [r2, #0]
1000ae3a:	3301      	adds	r3, #1
1000ae3c:	b2db      	uxtb	r3, r3
1000ae3e:	7013      	strb	r3, [r2, #0]
                if(sms_btn_cnt >= SMS_BTN_SHTDWN_CNT) {
1000ae40:	2b09      	cmp	r3, #9
1000ae42:	d902      	bls.n	1000ae4a <sms_dualtimer1_fn+0x19e>
                    sms_ble_power_down();
1000ae44:	4b1f      	ldr	r3, [pc, #124]	; (1000aec4 <sms_dualtimer1_fn+0x218>)
1000ae46:	4798      	blx	r3
1000ae48:	e023      	b.n	1000ae92 <sms_dualtimer1_fn+0x1e6>
                }
                else {
                    //sms_sensors_toggle_interrupt(SMS_EXTINT_DISABLE);
                    timer1_current_mode = TIMER1_MODE_SHUTDOWN;
1000ae4a:	2202      	movs	r2, #2
1000ae4c:	4b11      	ldr	r3, [pc, #68]	; (1000ae94 <sms_dualtimer1_fn+0x1e8>)
1000ae4e:	701a      	strb	r2, [r3, #0]
                    sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_SHTDWN_MS, DUALTIMER_TIMER1);
1000ae50:	2200      	movs	r2, #0
1000ae52:	21fa      	movs	r1, #250	; 0xfa
1000ae54:	2001      	movs	r0, #1
1000ae56:	4b17      	ldr	r3, [pc, #92]	; (1000aeb4 <sms_dualtimer1_fn+0x208>)
1000ae58:	4798      	blx	r3
1000ae5a:	e01a      	b.n	1000ae92 <sms_dualtimer1_fn+0x1e6>
                }
            }
            else {
                if(pressure_device.state == PRESSURE_STATE_STDBY) {
1000ae5c:	232b      	movs	r3, #43	; 0x2b
1000ae5e:	4a1a      	ldr	r2, [pc, #104]	; (1000aec8 <sms_dualtimer1_fn+0x21c>)
1000ae60:	5cd3      	ldrb	r3, [r2, r3]
1000ae62:	2b01      	cmp	r3, #1
1000ae64:	d103      	bne.n	1000ae6e <sms_dualtimer1_fn+0x1c2>
                    DBG_LOG_DEV("[sms_dualtimer1_fn]\t\tStarting sensors (shutting down)...");
                    sms_sensors_interrupt_toggle(false, true);
1000ae66:	2101      	movs	r1, #1
1000ae68:	2000      	movs	r0, #0
1000ae6a:	4b18      	ldr	r3, [pc, #96]	; (1000aecc <sms_dualtimer1_fn+0x220>)
1000ae6c:	4798      	blx	r3
                }                    
                timer1_current_mode = TIMER1_MODE_NONE;
1000ae6e:	2200      	movs	r2, #0
1000ae70:	4b08      	ldr	r3, [pc, #32]	; (1000ae94 <sms_dualtimer1_fn+0x1e8>)
1000ae72:	701a      	strb	r2, [r3, #0]
                if(timer2_current_mode == TIMER2_MODE_NONE) {
1000ae74:	4b10      	ldr	r3, [pc, #64]	; (1000aeb8 <sms_dualtimer1_fn+0x20c>)
1000ae76:	781b      	ldrb	r3, [r3, #0]
1000ae78:	2b00      	cmp	r3, #0
1000ae7a:	d10a      	bne.n	1000ae92 <sms_dualtimer1_fn+0x1e6>
                    ulp_ready = true;
1000ae7c:	3201      	adds	r2, #1
1000ae7e:	4b0f      	ldr	r3, [pc, #60]	; (1000aebc <sms_dualtimer1_fn+0x210>)
1000ae80:	701a      	strb	r2, [r3, #0]
1000ae82:	e006      	b.n	1000ae92 <sms_dualtimer1_fn+0x1e6>
        }
        
        case TIMER1_MODE_NONE:
        default:
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
        if(timer2_current_mode == TIMER2_MODE_NONE) {
1000ae84:	4b0c      	ldr	r3, [pc, #48]	; (1000aeb8 <sms_dualtimer1_fn+0x20c>)
1000ae86:	781b      	ldrb	r3, [r3, #0]
1000ae88:	2b00      	cmp	r3, #0
1000ae8a:	d102      	bne.n	1000ae92 <sms_dualtimer1_fn+0x1e6>
            //release_sleep_lock();
            ulp_ready = true;
1000ae8c:	2201      	movs	r2, #1
1000ae8e:	4b0b      	ldr	r3, [pc, #44]	; (1000aebc <sms_dualtimer1_fn+0x210>)
1000ae90:	701a      	strb	r2, [r3, #0]
        }            
        break;
    } // switch(timer1_current_mode)
}
1000ae92:	bd10      	pop	{r4, pc}
1000ae94:	1001a408 	.word	0x1001a408
1000ae98:	1001a418 	.word	0x1001a418
1000ae9c:	10009421 	.word	0x10009421
1000aea0:	10017afc 	.word	0x10017afc
1000aea4:	100096b9 	.word	0x100096b9
1000aea8:	1001a414 	.word	0x1001a414
1000aeac:	1001a632 	.word	0x1001a632
1000aeb0:	10008e09 	.word	0x10008e09
1000aeb4:	1000ac21 	.word	0x1000ac21
1000aeb8:	1001a537 	.word	0x1001a537
1000aebc:	1001a411 	.word	0x1001a411
1000aec0:	00000303 	.word	0x00000303
1000aec4:	10008e21 	.word	0x10008e21
1000aec8:	1001a49c 	.word	0x1001a49c
1000aecc:	1000a9b9 	.word	0x1000a9b9

1000aed0 <sms_dualtimer2_fn>:

void sms_dualtimer2_fn(void)
{
1000aed0:	b510      	push	{r4, lr}
    //sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
    sms_monitor_get_states("[sms_dualtimer2_fn]");
1000aed2:	483a      	ldr	r0, [pc, #232]	; (1000afbc <sms_dualtimer2_fn+0xec>)
1000aed4:	4b3a      	ldr	r3, [pc, #232]	; (1000afc0 <sms_dualtimer2_fn+0xf0>)
1000aed6:	4798      	blx	r3
    switch(timer2_current_mode) {
1000aed8:	4b3a      	ldr	r3, [pc, #232]	; (1000afc4 <sms_dualtimer2_fn+0xf4>)
1000aeda:	781b      	ldrb	r3, [r3, #0]
1000aedc:	b2db      	uxtb	r3, r3
1000aede:	2b02      	cmp	r3, #2
1000aee0:	d028      	beq.n	1000af34 <sms_dualtimer2_fn+0x64>
1000aee2:	2b03      	cmp	r3, #3
1000aee4:	d047      	beq.n	1000af76 <sms_dualtimer2_fn+0xa6>
1000aee6:	2b01      	cmp	r3, #1
1000aee8:	d166      	bne.n	1000afb8 <sms_dualtimer2_fn+0xe8>
        case TIMER2_MODE_INDICATION_TOUT:
        timer2_current_mode = TIMER2_MODE_NONE;
1000aeea:	2200      	movs	r2, #0
1000aeec:	4b35      	ldr	r3, [pc, #212]	; (1000afc4 <sms_dualtimer2_fn+0xf4>)
1000aeee:	701a      	strb	r2, [r3, #0]
        if(ble_instance.current_state == BLE_STATE_PAIRED) {
1000aef0:	4b35      	ldr	r3, [pc, #212]	; (1000afc8 <sms_dualtimer2_fn+0xf8>)
1000aef2:	781b      	ldrb	r3, [r3, #0]
1000aef4:	2b22      	cmp	r3, #34	; 0x22
1000aef6:	d107      	bne.n	1000af08 <sms_dualtimer2_fn+0x38>
            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
            if(timer1_current_mode == TIMER1_MODE_NONE) {
1000aef8:	4b34      	ldr	r3, [pc, #208]	; (1000afcc <sms_dualtimer2_fn+0xfc>)
1000aefa:	781b      	ldrb	r3, [r3, #0]
1000aefc:	2b00      	cmp	r3, #0
1000aefe:	d15b      	bne.n	1000afb8 <sms_dualtimer2_fn+0xe8>
                //release_sleep_lock();
                ulp_ready = true;
1000af00:	3201      	adds	r2, #1
1000af02:	4b33      	ldr	r3, [pc, #204]	; (1000afd0 <sms_dualtimer2_fn+0x100>)
1000af04:	701a      	strb	r2, [r3, #0]
1000af06:	e057      	b.n	1000afb8 <sms_dualtimer2_fn+0xe8>
            }                
        }
        else {
            sms_ble_ind_retry++;
1000af08:	4a32      	ldr	r2, [pc, #200]	; (1000afd4 <sms_dualtimer2_fn+0x104>)
1000af0a:	7813      	ldrb	r3, [r2, #0]
1000af0c:	3301      	adds	r3, #1
1000af0e:	b2db      	uxtb	r3, r3
1000af10:	7013      	strb	r3, [r2, #0]
            if(sms_ble_ind_retry >= BLE_INDICATION_RETRY_MAX) {
1000af12:	2b00      	cmp	r3, #0
1000af14:	d006      	beq.n	1000af24 <sms_dualtimer2_fn+0x54>
                DBG_LOG_CONT_DEV(" ...giving up!");
                //DBG_LOG_DEV("[sms_dualtimer2_fn]\tTimer1 mode: %d", timer1_current_mode);
                timer2_current_mode = TIMER2_MODE_NONE;
1000af16:	2200      	movs	r2, #0
1000af18:	4b2a      	ldr	r3, [pc, #168]	; (1000afc4 <sms_dualtimer2_fn+0xf4>)
1000af1a:	701a      	strb	r2, [r3, #0]
                ble_instance.current_state = BLE_STATE_PAIRED;
1000af1c:	3222      	adds	r2, #34	; 0x22
1000af1e:	4b2a      	ldr	r3, [pc, #168]	; (1000afc8 <sms_dualtimer2_fn+0xf8>)
1000af20:	701a      	strb	r2, [r3, #0]
1000af22:	e049      	b.n	1000afb8 <sms_dualtimer2_fn+0xe8>
                //if(timer1_current_mode == TIMER1_MODE_NONE) release_sleep_lock();
            }
            else {
                DBG_LOG_CONT_DEV(" ...waiting... counter: %d", sms_ble_ind_retry);
                //sms_ble_send_characteristic(BLE_CHAR_PRESSURE);
                timer2_current_mode = TIMER2_MODE_INDICATION_TOUT;
1000af24:	2201      	movs	r2, #1
1000af26:	4b27      	ldr	r3, [pc, #156]	; (1000afc4 <sms_dualtimer2_fn+0xf4>)
1000af28:	701a      	strb	r2, [r3, #0]
                //ulp_ready = false;
                sms_dualtimer_start(TIMER_UNIT_MS, BLE_INDICATION_TOUT_MS, DUALTIMER_TIMER2);
1000af2a:	2164      	movs	r1, #100	; 0x64
1000af2c:	2001      	movs	r0, #1
1000af2e:	4b2a      	ldr	r3, [pc, #168]	; (1000afd8 <sms_dualtimer2_fn+0x108>)
1000af30:	4798      	blx	r3
1000af32:	e041      	b.n	1000afb8 <sms_dualtimer2_fn+0xe8>
        }
        break;
        
        case TIMER2_MODE_LED_STARTUP:
        DBG_LOG_DEV("[sms_dualtimer2_fn]\t\tBlinking startup...");
        timer2_current_mode = TIMER2_MODE_NONE;
1000af34:	2200      	movs	r2, #0
1000af36:	4b23      	ldr	r3, [pc, #140]	; (1000afc4 <sms_dualtimer2_fn+0xf4>)
1000af38:	701a      	strb	r2, [r3, #0]
        sms_led_blink_cnt++;
1000af3a:	4a28      	ldr	r2, [pc, #160]	; (1000afdc <sms_dualtimer2_fn+0x10c>)
1000af3c:	7813      	ldrb	r3, [r2, #0]
1000af3e:	3301      	adds	r3, #1
1000af40:	b2db      	uxtb	r3, r3
1000af42:	7013      	strb	r3, [r2, #0]
        if(sms_led_blink_cnt >= SMS_BLINK_STARTUP_CNT) {
1000af44:	7813      	ldrb	r3, [r2, #0]
1000af46:	b2db      	uxtb	r3, r3
1000af48:	2b07      	cmp	r3, #7
1000af4a:	d908      	bls.n	1000af5e <sms_dualtimer2_fn+0x8e>
            sms_led_switch_off(SMS_LED_0_PIN);
1000af4c:	2016      	movs	r0, #22
1000af4e:	4b24      	ldr	r3, [pc, #144]	; (1000afe0 <sms_dualtimer2_fn+0x110>)
1000af50:	4798      	blx	r3
            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
            /* Blinking done... starting ble advertisement */
            //DBG_LOG_DEV("[sms_dualtimer2_fn]\tSMS awake... starting advertisement");
            sms_ble_advertise();
1000af52:	4b24      	ldr	r3, [pc, #144]	; (1000afe4 <sms_dualtimer2_fn+0x114>)
1000af54:	4798      	blx	r3
            ulp_ready = true;
1000af56:	2201      	movs	r2, #1
1000af58:	4b1d      	ldr	r3, [pc, #116]	; (1000afd0 <sms_dualtimer2_fn+0x100>)
1000af5a:	701a      	strb	r2, [r3, #0]
1000af5c:	e02c      	b.n	1000afb8 <sms_dualtimer2_fn+0xe8>
        }
        else {
            //DBG_LOG_DEV("[sms_dualtimer2_fn]\tBlinking up... cnt = %d", sms_led_blink_cnt);
            sms_led_toggle(SMS_LED_0_PIN);
1000af5e:	2016      	movs	r0, #22
1000af60:	4b21      	ldr	r3, [pc, #132]	; (1000afe8 <sms_dualtimer2_fn+0x118>)
1000af62:	4798      	blx	r3
            timer2_current_mode = TIMER2_MODE_LED_STARTUP;
1000af64:	2202      	movs	r2, #2
1000af66:	4b17      	ldr	r3, [pc, #92]	; (1000afc4 <sms_dualtimer2_fn+0xf4>)
1000af68:	701a      	strb	r2, [r3, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BLINK_STARTUP_MS, DUALTIMER_TIMER2);
1000af6a:	3a01      	subs	r2, #1
1000af6c:	2164      	movs	r1, #100	; 0x64
1000af6e:	2001      	movs	r0, #1
1000af70:	4b19      	ldr	r3, [pc, #100]	; (1000afd8 <sms_dualtimer2_fn+0x108>)
1000af72:	4798      	blx	r3
1000af74:	e020      	b.n	1000afb8 <sms_dualtimer2_fn+0xe8>
        }
        break;
        
        case TIMER2_MODE_LED_SHUTDOWN:
        DBG_LOG_DEV("[sms_dualtimer2_fn]\t\tBlinking shutdown...");
        timer2_current_mode = TIMER2_MODE_NONE;
1000af76:	2200      	movs	r2, #0
1000af78:	4b12      	ldr	r3, [pc, #72]	; (1000afc4 <sms_dualtimer2_fn+0xf4>)
1000af7a:	701a      	strb	r2, [r3, #0]
        sms_led_blink_cnt++;
1000af7c:	4a17      	ldr	r2, [pc, #92]	; (1000afdc <sms_dualtimer2_fn+0x10c>)
1000af7e:	7813      	ldrb	r3, [r2, #0]
1000af80:	3301      	adds	r3, #1
1000af82:	b2db      	uxtb	r3, r3
1000af84:	7013      	strb	r3, [r2, #0]
        if(sms_led_blink_cnt >= SMS_BLINK_SHTDWN_CNT) {
1000af86:	7813      	ldrb	r3, [r2, #0]
1000af88:	b2db      	uxtb	r3, r3
1000af8a:	2b03      	cmp	r3, #3
1000af8c:	d908      	bls.n	1000afa0 <sms_dualtimer2_fn+0xd0>
            sms_led_switch_off(SMS_LED_0_PIN);
1000af8e:	2016      	movs	r0, #22
1000af90:	4b13      	ldr	r3, [pc, #76]	; (1000afe0 <sms_dualtimer2_fn+0x110>)
1000af92:	4798      	blx	r3
            DBG_LOG_DEV("[sms_dualtimer2_fn]\t\tPowering off...");
            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
            sms_init_variables();
1000af94:	4b15      	ldr	r3, [pc, #84]	; (1000afec <sms_dualtimer2_fn+0x11c>)
1000af96:	4798      	blx	r3
            ulp_ready = true;
1000af98:	2201      	movs	r2, #1
1000af9a:	4b0d      	ldr	r3, [pc, #52]	; (1000afd0 <sms_dualtimer2_fn+0x100>)
1000af9c:	701a      	strb	r2, [r3, #0]
1000af9e:	e00b      	b.n	1000afb8 <sms_dualtimer2_fn+0xe8>
            //release_sleep_lock();
        }
        else {
            //DBG_LOG_DEV("[sms_dualtimer2_fn]\tBLinking off... cnt = %d", sms_led_blink_cnt);
            sms_led_toggle(SMS_LED_0_PIN);
1000afa0:	2016      	movs	r0, #22
1000afa2:	4b11      	ldr	r3, [pc, #68]	; (1000afe8 <sms_dualtimer2_fn+0x118>)
1000afa4:	4798      	blx	r3
            timer2_current_mode = TIMER2_MODE_LED_SHUTDOWN;
1000afa6:	2203      	movs	r2, #3
1000afa8:	4b06      	ldr	r3, [pc, #24]	; (1000afc4 <sms_dualtimer2_fn+0xf4>)
1000afaa:	701a      	strb	r2, [r3, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BLINK_SHTDWN_MS, DUALTIMER_TIMER2);
1000afac:	3a02      	subs	r2, #2
1000afae:	21c8      	movs	r1, #200	; 0xc8
1000afb0:	0049      	lsls	r1, r1, #1
1000afb2:	2001      	movs	r0, #1
1000afb4:	4b08      	ldr	r3, [pc, #32]	; (1000afd8 <sms_dualtimer2_fn+0x108>)
1000afb6:	4798      	blx	r3
        case TIMER2_MODE_LED_CONNECTION_LOST:
        case TIMER2_MODE_NONE:
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
        break;
    }
}
1000afb8:	bd10      	pop	{r4, pc}
1000afba:	46c0      	nop			; (mov r8, r8)
1000afbc:	10017b10 	.word	0x10017b10
1000afc0:	100096b9 	.word	0x100096b9
1000afc4:	1001a537 	.word	0x1001a537
1000afc8:	1001a414 	.word	0x1001a414
1000afcc:	1001a408 	.word	0x1001a408
1000afd0:	1001a411 	.word	0x1001a411
1000afd4:	1001a529 	.word	0x1001a529
1000afd8:	1000ac21 	.word	0x1000ac21
1000afdc:	1001a638 	.word	0x1001a638
1000afe0:	1000a6d1 	.word	0x1000a6d1
1000afe4:	10008f59 	.word	0x10008f59
1000afe8:	1000a711 	.word	0x1000a711
1000afec:	1000ea8d 	.word	0x1000ea8d

1000aff0 <delay_ms>:

void delay_ms(uint32_t delay) {
1000aff0:	b510      	push	{r4, lr}
1000aff2:	0001      	movs	r1, r0
	sms_dualtimer_start(TIMER_UNIT_MS, delay, DUALTIMER_TIMER2);
1000aff4:	2201      	movs	r2, #1
1000aff6:	2001      	movs	r0, #1
1000aff8:	4b05      	ldr	r3, [pc, #20]	; (1000b010 <delay_ms+0x20>)
1000affa:	4798      	blx	r3
	while(dualtimer_get_value(DUALTIMER_TIMER2)) {
1000affc:	4c05      	ldr	r4, [pc, #20]	; (1000b014 <delay_ms+0x24>)
1000affe:	2001      	movs	r0, #1
1000b000:	47a0      	blx	r4
1000b002:	2800      	cmp	r0, #0
1000b004:	d1fb      	bne.n	1000affe <delay_ms+0xe>
    NVIC_EnableIRQ(DUALTIMER0_IRQn);
}

void sms_dualtimer_stop(enum dualtimer_timer tmr)
{
    dualtimer_disable(tmr);
1000b006:	3001      	adds	r0, #1
1000b008:	4b03      	ldr	r3, [pc, #12]	; (1000b018 <delay_ms+0x28>)
1000b00a:	4798      	blx	r3
void delay_ms(uint32_t delay) {
	sms_dualtimer_start(TIMER_UNIT_MS, delay, DUALTIMER_TIMER2);
	while(dualtimer_get_value(DUALTIMER_TIMER2)) {
	}
	sms_dualtimer_stop(DUALTIMER_TIMER2);
1000b00c:	bd10      	pop	{r4, pc}
1000b00e:	46c0      	nop			; (mov r8, r8)
1000b010:	1000ac21 	.word	0x1000ac21
1000b014:	1000b395 	.word	0x1000b395
1000b018:	1000b3f5 	.word	0x1000b3f5

1000b01c <spi_slave_inst_get_config_defaults>:
void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
	Assert(config);

	config->ss_pin          = PIN_LP_GPIO_12;
1000b01c:	230c      	movs	r3, #12
1000b01e:	7003      	strb	r3, [r0, #0]
	config->address_enabled = false;
1000b020:	2300      	movs	r3, #0
1000b022:	7043      	strb	r3, [r0, #1]
	config->address         = 0;
1000b024:	7083      	strb	r3, [r0, #2]
}
1000b026:	4770      	bx	lr

1000b028 <spi_get_config_defaults>:
void spi_get_config_defaults(
		struct spi_config *const config)
{
	Assert(config);

	config->mode             = SPI_MODE_MASTER;
1000b028:	2301      	movs	r3, #1
1000b02a:	7003      	strb	r3, [r0, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
1000b02c:	2300      	movs	r3, #0
1000b02e:	7043      	strb	r3, [r0, #1]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
1000b030:	7083      	strb	r3, [r0, #2]
	config->clock_source     = SPI_CLK_INPUT_0;
1000b032:	70c3      	strb	r3, [r0, #3]
	config->clock_divider    = 129;
1000b034:	3381      	adds	r3, #129	; 0x81
1000b036:	7103      	strb	r3, [r0, #4]

	config->pin_number_pad[0] = PIN_LP_GPIO_10;
1000b038:	3b77      	subs	r3, #119	; 0x77
1000b03a:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_11;
1000b03c:	3301      	adds	r3, #1
1000b03e:	60c3      	str	r3, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_12;
1000b040:	3301      	adds	r3, #1
1000b042:	6103      	str	r3, [r0, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_13;
1000b044:	3301      	adds	r3, #1
1000b046:	6143      	str	r3, [r0, #20]

	config->pinmux_sel_pad[0] = MUX_LP_GPIO_10_SPI0_SCK;
1000b048:	3b0b      	subs	r3, #11
1000b04a:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_11_SPI0_MOSI;
1000b04c:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_12_SPI0_SSN;
1000b04e:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_13_SPI0_MISO;
1000b050:	6243      	str	r3, [r0, #36]	; 0x24
};
1000b052:	4770      	bx	lr

1000b054 <spi_attach_slave>:
 *
 */
void spi_attach_slave(
		struct spi_slave_inst *const slave,
		struct spi_slave_inst_config *const config)
{
1000b054:	b530      	push	{r4, r5, lr}
1000b056:	b083      	sub	sp, #12
1000b058:	0004      	movs	r4, r0
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
1000b05a:	780b      	ldrb	r3, [r1, #0]
1000b05c:	7003      	strb	r3, [r0, #0]
	slave->address_enabled = config->address_enabled;
1000b05e:	784b      	ldrb	r3, [r1, #1]
1000b060:	7043      	strb	r3, [r0, #1]
	slave->address         = config->address;
1000b062:	788b      	ldrb	r3, [r1, #2]
1000b064:	7083      	strb	r3, [r0, #2]

	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);
1000b066:	ad01      	add	r5, sp, #4
1000b068:	0028      	movs	r0, r5
1000b06a:	4b07      	ldr	r3, [pc, #28]	; (1000b088 <spi_attach_slave+0x34>)
1000b06c:	4798      	blx	r3
	config_gpio.direction = GPIO_PIN_DIR_OUTPUT;
1000b06e:	2301      	movs	r3, #1
1000b070:	702b      	strb	r3, [r5, #0]
	gpio_pin_set_config(slave->ss_pin, &config_gpio);
1000b072:	7820      	ldrb	r0, [r4, #0]
1000b074:	0029      	movs	r1, r5
1000b076:	4b05      	ldr	r3, [pc, #20]	; (1000b08c <spi_attach_slave+0x38>)
1000b078:	4798      	blx	r3

	gpio_pin_set_output_level(slave->ss_pin, true);
1000b07a:	7820      	ldrb	r0, [r4, #0]
1000b07c:	2101      	movs	r1, #1
1000b07e:	4b04      	ldr	r3, [pc, #16]	; (1000b090 <spi_attach_slave+0x3c>)
1000b080:	4798      	blx	r3
}
1000b082:	b003      	add	sp, #12
1000b084:	bd30      	pop	{r4, r5, pc}
1000b086:	46c0      	nop			; (mov r8, r8)
1000b088:	1000b685 	.word	0x1000b685
1000b08c:	1000b695 	.word	0x1000b695
1000b090:	1000b8ed 	.word	0x1000b8ed

1000b094 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void spi_enable(struct spi_module *const module)
{
	Spi *const spi_module = (module->hw);
1000b094:	6803      	ldr	r3, [r0, #0]
		NVIC_EnableIRQ(SPI1_TX_IRQn);
	}
#endif

	/* Enable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = SPI_MODULE_ENABLE_ENABLE;
1000b096:	2201      	movs	r2, #1
1000b098:	761a      	strb	r2, [r3, #24]
}
1000b09a:	4770      	bx	lr

1000b09c <spi_disable>:
 * This function will disable the SPI module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void spi_disable(struct spi_module *const module)
{
1000b09c:	b510      	push	{r4, lr}
		NVIC_DisableIRQ(SPI1_TX_IRQn);
	}
#  endif

	/* Disable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
1000b09e:	2300      	movs	r3, #0
1000b0a0:	6802      	ldr	r2, [r0, #0]
1000b0a2:	7613      	strb	r3, [r2, #24]
 */
static void _spi_clock_disable(struct spi_module *const module)
{
	Assert(module);

	Spi *const spi_module = (module->hw);
1000b0a4:	6803      	ldr	r3, [r0, #0]

	if (spi_module == (void *)SPI0) {
1000b0a6:	4a0d      	ldr	r2, [pc, #52]	; (1000b0dc <spi_disable+0x40>)
1000b0a8:	4293      	cmp	r3, r2
1000b0aa:	d109      	bne.n	1000b0c0 <spi_disable+0x24>
		system_clock_peripheral_disable(PERIPHERAL_SPI0_SCK_CLK);
1000b0ac:	2041      	movs	r0, #65	; 0x41
1000b0ae:	4c0c      	ldr	r4, [pc, #48]	; (1000b0e0 <spi_disable+0x44>)
1000b0b0:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_SCK_PHASE);
1000b0b2:	2026      	movs	r0, #38	; 0x26
1000b0b4:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_IF);
1000b0b6:	2038      	movs	r0, #56	; 0x38
1000b0b8:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_CORE);
1000b0ba:	2001      	movs	r0, #1
1000b0bc:	47a0      	blx	r4
1000b0be:	e00b      	b.n	1000b0d8 <spi_disable+0x3c>
	} else if (spi_module == (void *)SPI1) {
1000b0c0:	4a08      	ldr	r2, [pc, #32]	; (1000b0e4 <spi_disable+0x48>)
1000b0c2:	4293      	cmp	r3, r2
1000b0c4:	d108      	bne.n	1000b0d8 <spi_disable+0x3c>
		system_clock_peripheral_disable(PERIPHERAL_SPI1_SCK_CLK);
1000b0c6:	2042      	movs	r0, #66	; 0x42
1000b0c8:	4c05      	ldr	r4, [pc, #20]	; (1000b0e0 <spi_disable+0x44>)
1000b0ca:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_SCK_PHASE);
1000b0cc:	2027      	movs	r0, #39	; 0x27
1000b0ce:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_IF);
1000b0d0:	2039      	movs	r0, #57	; 0x39
1000b0d2:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_CORE);
1000b0d4:	2002      	movs	r0, #2
1000b0d6:	47a0      	blx	r4
#  endif

	/* Disable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
	_spi_clock_disable(module);
}
1000b0d8:	bd10      	pop	{r4, pc}
1000b0da:	46c0      	nop			; (mov r8, r8)
1000b0dc:	40006000 	.word	0x40006000
1000b0e0:	1000c085 	.word	0x1000c085
1000b0e4:	40007000 	.word	0x40007000

1000b0e8 <spi_reset>:
 * disable it.
 *
 * \param[in,out] module Pointer to the software instance struct
 */
void spi_reset(struct spi_module *const module)
{
1000b0e8:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Spi *const spi_module = (module->hw);
1000b0ea:	6804      	ldr	r4, [r0, #0]

	/* Disable the module */
	spi_disable(module);
1000b0ec:	4b09      	ldr	r3, [pc, #36]	; (1000b114 <spi_reset+0x2c>)
1000b0ee:	4798      	blx	r3

	/* Software reset the module */
	if(spi_module == (void *)SPI0) {
1000b0f0:	4b09      	ldr	r3, [pc, #36]	; (1000b118 <spi_reset+0x30>)
1000b0f2:	429c      	cmp	r4, r3
1000b0f4:	d105      	bne.n	1000b102 <spi_reset+0x1a>
		system_peripheral_reset(PERIPHERAL_SPI0_CORE);
1000b0f6:	2001      	movs	r0, #1
1000b0f8:	4c08      	ldr	r4, [pc, #32]	; (1000b11c <spi_reset+0x34>)
1000b0fa:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_SPI0_IF);
1000b0fc:	2038      	movs	r0, #56	; 0x38
1000b0fe:	47a0      	blx	r4
1000b100:	e007      	b.n	1000b112 <spi_reset+0x2a>
	} else if (spi_module == (void *)SPI1) {
1000b102:	4b07      	ldr	r3, [pc, #28]	; (1000b120 <spi_reset+0x38>)
1000b104:	429c      	cmp	r4, r3
1000b106:	d104      	bne.n	1000b112 <spi_reset+0x2a>
		system_peripheral_reset(PERIPHERAL_SPI1_CORE);
1000b108:	2002      	movs	r0, #2
1000b10a:	4c04      	ldr	r4, [pc, #16]	; (1000b11c <spi_reset+0x34>)
1000b10c:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_SPI1_IF);
1000b10e:	2039      	movs	r0, #57	; 0x39
1000b110:	47a0      	blx	r4
	}
}
1000b112:	bd10      	pop	{r4, pc}
1000b114:	1000b09d 	.word	0x1000b09d
1000b118:	40006000 	.word	0x40006000
1000b11c:	1000c3f1 	.word	0x1000c3f1
1000b120:	40007000 	.word	0x40007000

1000b124 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Spi *const hw,
		const struct spi_config *const config)
{
1000b124:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b126:	465f      	mov	r7, fp
1000b128:	4646      	mov	r6, r8
1000b12a:	b4c0      	push	{r6, r7}
1000b12c:	b083      	sub	sp, #12
1000b12e:	0006      	movs	r6, r0
1000b130:	4688      	mov	r8, r1
1000b132:	0015      	movs	r5, r2
	Assert(config);

	uint8_t idx;

	/* Initialize device instance */
	module->hw = hw;
1000b134:	6031      	str	r1, [r6, #0]

	Spi *const spi_module = (module->hw);

	/* Check if module is enabled. */
	if (spi_module->SPI_MODULE_ENABLE.reg & SPI_MODULE_ENABLE_MASK) {
1000b136:	7e0b      	ldrb	r3, [r1, #24]
1000b138:	07db      	lsls	r3, r3, #31
1000b13a:	d501      	bpl.n	1000b140 <spi_init+0x1c>
		spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
1000b13c:	2300      	movs	r3, #0
1000b13e:	760b      	strb	r3, [r1, #24]
	}

	spi_reset(module);
1000b140:	0030      	movs	r0, r6
1000b142:	4b4a      	ldr	r3, [pc, #296]	; (1000b26c <spi_init+0x148>)
1000b144:	4798      	blx	r3
 */
static void _spi_clock_enable(struct spi_module *const module)
{
	Assert(module);

	Spi *const spi_module = (module->hw);
1000b146:	6833      	ldr	r3, [r6, #0]

	if (spi_module == (void *)SPI0) {
1000b148:	4a49      	ldr	r2, [pc, #292]	; (1000b270 <spi_init+0x14c>)
1000b14a:	4293      	cmp	r3, r2
1000b14c:	d109      	bne.n	1000b162 <spi_init+0x3e>
		system_clock_peripheral_enable(PERIPHERAL_SPI0_SCK_CLK);
1000b14e:	2041      	movs	r0, #65	; 0x41
1000b150:	4c48      	ldr	r4, [pc, #288]	; (1000b274 <spi_init+0x150>)
1000b152:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_SCK_PHASE);
1000b154:	2026      	movs	r0, #38	; 0x26
1000b156:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_IF);
1000b158:	2038      	movs	r0, #56	; 0x38
1000b15a:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_CORE);
1000b15c:	2001      	movs	r0, #1
1000b15e:	47a0      	blx	r4
1000b160:	e00b      	b.n	1000b17a <spi_init+0x56>
	} else if (spi_module == (void *)SPI1) {
1000b162:	4a45      	ldr	r2, [pc, #276]	; (1000b278 <spi_init+0x154>)
1000b164:	4293      	cmp	r3, r2
1000b166:	d108      	bne.n	1000b17a <spi_init+0x56>
		system_clock_peripheral_enable(PERIPHERAL_SPI1_SCK_CLK);
1000b168:	2042      	movs	r0, #66	; 0x42
1000b16a:	4c42      	ldr	r4, [pc, #264]	; (1000b274 <spi_init+0x150>)
1000b16c:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_SCK_PHASE);
1000b16e:	2027      	movs	r0, #39	; 0x27
1000b170:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_IF);
1000b172:	2039      	movs	r0, #57	; 0x39
1000b174:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_CORE);
1000b176:	2002      	movs	r0, #2
1000b178:	47a0      	blx	r4
	}
#endif

	//Program the pinmux.
	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);
1000b17a:	a801      	add	r0, sp, #4
1000b17c:	4b3f      	ldr	r3, [pc, #252]	; (1000b27c <spi_init+0x158>)
1000b17e:	4798      	blx	r3
1000b180:	002c      	movs	r4, r5
1000b182:	3408      	adds	r4, #8
1000b184:	2318      	movs	r3, #24
1000b186:	469b      	mov	fp, r3
1000b188:	44ab      	add	fp, r5
1000b18a:	0027      	movs	r7, r4

	/* Set the pinmux for this spi module. */
	for(idx = 0; idx < 4; idx++) {
		if (config->pin_number_pad[idx] != PINMUX_UNUSED) {
1000b18c:	6820      	ldr	r0, [r4, #0]
1000b18e:	1c43      	adds	r3, r0, #1
1000b190:	d011      	beq.n	1000b1b6 <spi_init+0x92>
			if (config->mode == SPI_MODE_MASTER) {
1000b192:	782b      	ldrb	r3, [r5, #0]
1000b194:	2b01      	cmp	r3, #1
1000b196:	d102      	bne.n	1000b19e <spi_init+0x7a>
				config_gpio.direction = GPIO_PIN_DIR_OUTPUT;
1000b198:	466a      	mov	r2, sp
1000b19a:	7113      	strb	r3, [r2, #4]
1000b19c:	e003      	b.n	1000b1a6 <spi_init+0x82>
			} else if (config->mode == SPI_MODE_SLAVE) {
1000b19e:	2b00      	cmp	r3, #0
1000b1a0:	d101      	bne.n	1000b1a6 <spi_init+0x82>
				config_gpio.direction = GPIO_PIN_DIR_INPUT;
1000b1a2:	466a      	mov	r2, sp
1000b1a4:	7113      	strb	r3, [r2, #4]
			}
			gpio_pin_set_config(config->pin_number_pad[idx], &config_gpio);
1000b1a6:	b2c0      	uxtb	r0, r0
1000b1a8:	a901      	add	r1, sp, #4
1000b1aa:	4b35      	ldr	r3, [pc, #212]	; (1000b280 <spi_init+0x15c>)
1000b1ac:	4798      	blx	r3
			gpio_pinmux_cofiguration(config->pin_number_pad[idx], \
1000b1ae:	8a39      	ldrh	r1, [r7, #16]
1000b1b0:	7838      	ldrb	r0, [r7, #0]
1000b1b2:	4b34      	ldr	r3, [pc, #208]	; (1000b284 <spi_init+0x160>)
1000b1b4:	4798      	blx	r3
1000b1b6:	3404      	adds	r4, #4
	//Program the pinmux.
	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);

	/* Set the pinmux for this spi module. */
	for(idx = 0; idx < 4; idx++) {
1000b1b8:	455c      	cmp	r4, fp
1000b1ba:	d1e6      	bne.n	1000b18a <spi_init+0x66>
						(uint16_t)(config->pinmux_sel_pad[idx]));
		}
	}

	/* Set up the input clock for the module */
	spi_module->CLOCK_SOURCE_SELECT.reg = config->clock_source;
1000b1bc:	78eb      	ldrb	r3, [r5, #3]
1000b1be:	4642      	mov	r2, r8
1000b1c0:	7413      	strb	r3, [r2, #16]

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
1000b1c2:	782b      	ldrb	r3, [r5, #0]
1000b1c4:	2b01      	cmp	r3, #1
1000b1c6:	d100      	bne.n	1000b1ca <spi_init+0xa6>
		/* Set the mode in SPI master mode */
		spi_module->SPI_MASTER_MODE.reg = SPI_MODE_MASTER;
1000b1c8:	7713      	strb	r3, [r2, #28]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
1000b1ca:	782b      	ldrb	r3, [r5, #0]
1000b1cc:	2b00      	cmp	r3, #0
1000b1ce:	d101      	bne.n	1000b1d4 <spi_init+0xb0>
		/* Set the mode in SPI slave mode */
		spi_module->SPI_MASTER_MODE.reg = SPI_MODE_SLAVE;
1000b1d0:	4642      	mov	r2, r8
1000b1d2:	7713      	strb	r3, [r2, #28]
		const struct spi_config *const config)
{
	Assert(module);
	Assert(config);

	Spi *const spi_module = (module->hw);
1000b1d4:	6833      	ldr	r3, [r6, #0]

	module->mode  = config->mode;
1000b1d6:	782a      	ldrb	r2, [r5, #0]
1000b1d8:	7172      	strb	r2, [r6, #5]

#if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
1000b1da:	782a      	ldrb	r2, [r5, #0]
1000b1dc:	2a01      	cmp	r2, #1
1000b1de:	d101      	bne.n	1000b1e4 <spi_init+0xc0>
		spi_module->SPI_CLK_DIVIDER.reg = config->clock_divider;
1000b1e0:	792a      	ldrb	r2, [r5, #4]
1000b1e2:	829a      	strh	r2, [r3, #20]
	}
#endif

	/* Set data order */
	if (config->data_order == SPI_DATA_ORDER_LSB) {
1000b1e4:	786a      	ldrb	r2, [r5, #1]
1000b1e6:	2a04      	cmp	r2, #4
1000b1e8:	d104      	bne.n	1000b1f4 <spi_init+0xd0>
		spi_module->SPI_CONFIGURATION.bit.LSB_FIRST_ENABLE = 0x1;
1000b1ea:	2124      	movs	r1, #36	; 0x24
1000b1ec:	5c58      	ldrb	r0, [r3, r1]
1000b1ee:	4302      	orrs	r2, r0
1000b1f0:	545a      	strb	r2, [r3, r1]
1000b1f2:	e004      	b.n	1000b1fe <spi_init+0xda>
	} else {
		spi_module->SPI_CONFIGURATION.bit.LSB_FIRST_ENABLE = 0x0;
1000b1f4:	2124      	movs	r1, #36	; 0x24
1000b1f6:	5c5a      	ldrb	r2, [r3, r1]
1000b1f8:	2004      	movs	r0, #4
1000b1fa:	4382      	bics	r2, r0
1000b1fc:	545a      	strb	r2, [r3, r1]
	}

	/* Set clock polarity and clock phase */
	switch(config->transfer_mode)
1000b1fe:	78aa      	ldrb	r2, [r5, #2]
1000b200:	2a01      	cmp	r2, #1
1000b202:	d01a      	beq.n	1000b23a <spi_init+0x116>
1000b204:	2a00      	cmp	r2, #0
1000b206:	d004      	beq.n	1000b212 <spi_init+0xee>
1000b208:	2a02      	cmp	r2, #2
1000b20a:	d00c      	beq.n	1000b226 <spi_init+0x102>
1000b20c:	2a03      	cmp	r2, #3
1000b20e:	d01e      	beq.n	1000b24e <spi_init+0x12a>
1000b210:	e026      	b.n	1000b260 <spi_init+0x13c>
	{
		case SPI_TRANSFER_MODE_0:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x0;
1000b212:	2224      	movs	r2, #36	; 0x24
1000b214:	5c99      	ldrb	r1, [r3, r2]
1000b216:	2002      	movs	r0, #2
1000b218:	4381      	bics	r1, r0
1000b21a:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x0;
1000b21c:	5c99      	ldrb	r1, [r3, r2]
1000b21e:	3801      	subs	r0, #1
1000b220:	4381      	bics	r1, r0
1000b222:	5499      	strb	r1, [r3, r2]
1000b224:	e01c      	b.n	1000b260 <spi_init+0x13c>
			break;
		case SPI_TRANSFER_MODE_1:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x1;
1000b226:	2224      	movs	r2, #36	; 0x24
1000b228:	5c98      	ldrb	r0, [r3, r2]
1000b22a:	2102      	movs	r1, #2
1000b22c:	4301      	orrs	r1, r0
1000b22e:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x0;
1000b230:	5c99      	ldrb	r1, [r3, r2]
1000b232:	2001      	movs	r0, #1
1000b234:	4381      	bics	r1, r0
1000b236:	5499      	strb	r1, [r3, r2]
1000b238:	e012      	b.n	1000b260 <spi_init+0x13c>
			break;
		case SPI_TRANSFER_MODE_2:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x0;
1000b23a:	2224      	movs	r2, #36	; 0x24
1000b23c:	5c99      	ldrb	r1, [r3, r2]
1000b23e:	2002      	movs	r0, #2
1000b240:	4381      	bics	r1, r0
1000b242:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x1;
1000b244:	5c98      	ldrb	r0, [r3, r2]
1000b246:	2101      	movs	r1, #1
1000b248:	4301      	orrs	r1, r0
1000b24a:	5499      	strb	r1, [r3, r2]
1000b24c:	e008      	b.n	1000b260 <spi_init+0x13c>
			break;
		case SPI_TRANSFER_MODE_3:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x1;
1000b24e:	2224      	movs	r2, #36	; 0x24
1000b250:	5c98      	ldrb	r0, [r3, r2]
1000b252:	2102      	movs	r1, #2
1000b254:	4301      	orrs	r1, r0
1000b256:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x1;
1000b258:	5c98      	ldrb	r0, [r3, r2]
1000b25a:	2101      	movs	r1, #1
1000b25c:	4301      	orrs	r1, r0
1000b25e:	5499      	strb	r1, [r3, r2]
	module->locked                     = 0;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
1000b260:	2000      	movs	r0, #0
1000b262:	b003      	add	sp, #12
1000b264:	bc0c      	pop	{r2, r3}
1000b266:	4690      	mov	r8, r2
1000b268:	469b      	mov	fp, r3
1000b26a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b26c:	1000b0e9 	.word	0x1000b0e9
1000b270:	40006000 	.word	0x40006000
1000b274:	1000bd29 	.word	0x1000bd29
1000b278:	40007000 	.word	0x40007000
1000b27c:	1000b685 	.word	0x1000b685
1000b280:	1000b695 	.word	0x1000b695
1000b284:	1000b979 	.word	0x1000b979

1000b288 <spi_transceive_buffer_wait>:
enum status_code spi_transceive_buffer_wait(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
1000b288:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b28a:	b083      	sub	sp, #12
	Spi *spi_module = module->hw;
1000b28c:	6804      	ldr	r4, [r0, #0]
	uint8_t dummy = 0;
1000b28e:	2600      	movs	r6, #0
1000b290:	466d      	mov	r5, sp
1000b292:	71ee      	strb	r6, [r5, #7]
1000b294:	3507      	adds	r5, #7
	uint8_t skip_mosi = 0;
	uint8_t skip_miso = 0;
	uint8_t status;
	uint16_t transfer_len = 0;

	if(spi_module == 0) {
1000b296:	2c00      	cmp	r4, #0
1000b298:	d034      	beq.n	1000b304 <spi_transceive_buffer_wait+0x7c>
		return STATUS_ERR_NOT_INITIALIZED;
	}
	if(!tx_data) {
1000b29a:	2900      	cmp	r1, #0
1000b29c:	d104      	bne.n	1000b2a8 <spi_transceive_buffer_wait+0x20>
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
1000b29e:	0029      	movs	r1, r5
1000b2a0:	7980      	ldrb	r0, [r0, #6]
1000b2a2:	7028      	strb	r0, [r5, #0]
		skip_mosi = 1;
1000b2a4:	2701      	movs	r7, #1
1000b2a6:	e00b      	b.n	1000b2c0 <spi_transceive_buffer_wait+0x38>
	} else if(!rx_data) {
1000b2a8:	2a00      	cmp	r2, #0
1000b2aa:	d005      	beq.n	1000b2b8 <spi_transceive_buffer_wait+0x30>
		rx_data = &dummy;
		skip_miso = 1;
	} else if(length == 0) {
		return STATUS_ERR_INVALID_ARG;
1000b2ac:	2017      	movs	r0, #23
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
		skip_miso = 1;
	} else if(length == 0) {
1000b2ae:	2b00      	cmp	r3, #0
1000b2b0:	d029      	beq.n	1000b306 <spi_transceive_buffer_wait+0x7e>
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
	uint8_t skip_miso = 0;
1000b2b2:	2600      	movs	r6, #0
		uint8_t *rx_data,
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
1000b2b4:	2700      	movs	r7, #0
1000b2b6:	e003      	b.n	1000b2c0 <spi_transceive_buffer_wait+0x38>
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
		skip_miso = 1;
1000b2b8:	2601      	movs	r6, #1
		uint8_t *rx_data,
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
1000b2ba:	2700      	movs	r7, #0
	if(!tx_data) {
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
1000b2bc:	466a      	mov	r2, sp
1000b2be:	3207      	adds	r2, #7
 */
static bool _spi_is_active(Spi *const spi_module)
{
	Assert(spi_module);

	return spi_module->SPI_BUS_STATUS.bit.SPI_ACTIVE;
1000b2c0:	2528      	movs	r5, #40	; 0x28
1000b2c2:	5d60      	ldrb	r0, [r4, r5]
	}

	/* Check for Idle */
	do {
		status = _spi_is_active(spi_module);
	}while(status);
1000b2c4:	07c0      	lsls	r0, r0, #31
1000b2c6:	d4fc      	bmi.n	1000b2c2 <spi_transceive_buffer_wait+0x3a>

	/* Clear all status registers */
	spi_module->RECEIVE_STATUS.reg;
1000b2c8:	7b20      	ldrb	r0, [r4, #12]
	spi_module->TRANSMIT_STATUS.reg;
1000b2ca:	7a20      	ldrb	r0, [r4, #8]

	/* Start transfer */
	while(transfer_len < length) {
1000b2cc:	2b00      	cmp	r3, #0
1000b2ce:	d014      	beq.n	1000b2fa <spi_transceive_buffer_wait+0x72>
1000b2d0:	2500      	movs	r5, #0
		/* Read data shifted from MISO */
		while(!_spi_is_ready_to_read(spi_module));
		*rx_data = spi_module->RECEIVE_DATA.reg;
		transfer_len++;
		if (!skip_mosi) {
			tx_data++;
1000b2d2:	4278      	negs	r0, r7
1000b2d4:	4147      	adcs	r7, r0
		}
		if (!skip_miso) {
			rx_data++;
1000b2d6:	4270      	negs	r0, r6
1000b2d8:	4146      	adcs	r6, r0
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->TRANSMIT_STATUS.bit.TX_FIFO_NOT_FULL);
1000b2da:	7a20      	ldrb	r0, [r4, #8]
	spi_module->TRANSMIT_STATUS.reg;

	/* Start transfer */
	while(transfer_len < length) {
		/* Write data to MOSI */
		while(!_spi_is_ready_to_write(spi_module));
1000b2dc:	07c0      	lsls	r0, r0, #31
1000b2de:	d5fc      	bpl.n	1000b2da <spi_transceive_buffer_wait+0x52>
		spi_module->TRANSMIT_DATA.reg = *tx_data;
1000b2e0:	7808      	ldrb	r0, [r1, #0]
1000b2e2:	7020      	strb	r0, [r4, #0]
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->RECEIVE_STATUS.bit.RX_FIFO_NOT_EMPTY);
1000b2e4:	7b20      	ldrb	r0, [r4, #12]
	while(transfer_len < length) {
		/* Write data to MOSI */
		while(!_spi_is_ready_to_write(spi_module));
		spi_module->TRANSMIT_DATA.reg = *tx_data;
		/* Read data shifted from MISO */
		while(!_spi_is_ready_to_read(spi_module));
1000b2e6:	07c0      	lsls	r0, r0, #31
1000b2e8:	d5fc      	bpl.n	1000b2e4 <spi_transceive_buffer_wait+0x5c>
		*rx_data = spi_module->RECEIVE_DATA.reg;
1000b2ea:	7920      	ldrb	r0, [r4, #4]
1000b2ec:	7010      	strb	r0, [r2, #0]
		transfer_len++;
1000b2ee:	3501      	adds	r5, #1
1000b2f0:	b2ad      	uxth	r5, r5
		if (!skip_mosi) {
			tx_data++;
1000b2f2:	19c9      	adds	r1, r1, r7
		}
		if (!skip_miso) {
			rx_data++;
1000b2f4:	1992      	adds	r2, r2, r6
	/* Clear all status registers */
	spi_module->RECEIVE_STATUS.reg;
	spi_module->TRANSMIT_STATUS.reg;

	/* Start transfer */
	while(transfer_len < length) {
1000b2f6:	42ab      	cmp	r3, r5
1000b2f8:	d1ef      	bne.n	1000b2da <spi_transceive_buffer_wait+0x52>
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->TRANSMIT_STATUS.bit.TX_FIFO_EMPTY);
1000b2fa:	7a23      	ldrb	r3, [r4, #8]
		}
	}
	/* check TXFIFO is empty */
	do {
		status = _spi_is_write_complete(spi_module);
	}while(!status);
1000b2fc:	06db      	lsls	r3, r3, #27
1000b2fe:	d5fc      	bpl.n	1000b2fa <spi_transceive_buffer_wait+0x72>

	return STATUS_OK;
1000b300:	2000      	movs	r0, #0
1000b302:	e000      	b.n	1000b306 <spi_transceive_buffer_wait+0x7e>
	uint8_t skip_miso = 0;
	uint8_t status;
	uint16_t transfer_len = 0;

	if(spi_module == 0) {
		return STATUS_ERR_NOT_INITIALIZED;
1000b304:	201f      	movs	r0, #31
		status = _spi_is_write_complete(spi_module);
	}while(!status);

	return STATUS_OK;

}
1000b306:	b003      	add	sp, #12
1000b308:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b30a:	46c0      	nop			; (mov r8, r8)

1000b30c <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		bool select)
{
1000b30c:	b510      	push	{r4, lr}
	uint8_t gpio_num = slave->ss_pin;
1000b30e:	7808      	ldrb	r0, [r1, #0]
	if(select) {
1000b310:	2a00      	cmp	r2, #0
1000b312:	d003      	beq.n	1000b31c <spi_select_slave+0x10>
		/* ASSERT Slave select pin */
		gpio_pin_set_output_level(gpio_num, false);
1000b314:	2100      	movs	r1, #0
1000b316:	4b04      	ldr	r3, [pc, #16]	; (1000b328 <spi_select_slave+0x1c>)
1000b318:	4798      	blx	r3
1000b31a:	e002      	b.n	1000b322 <spi_select_slave+0x16>
	} else {
		/* DEASSERT Slave select pin */
		gpio_pin_set_output_level(gpio_num, true);
1000b31c:	2101      	movs	r1, #1
1000b31e:	4b02      	ldr	r3, [pc, #8]	; (1000b328 <spi_select_slave+0x1c>)
1000b320:	4798      	blx	r3
	}

	return STATUS_OK;
}
1000b322:	2000      	movs	r0, #0
1000b324:	bd10      	pop	{r4, pc}
1000b326:	46c0      	nop			; (mov r8, r8)
1000b328:	1000b8ed 	.word	0x1000b8ed

1000b32c <dualtimer_isr_handler>:
 *
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
1000b32c:	b510      	push	{r4, lr}
 * \retval The interrupt status of timer1/timer2
 */
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
1000b32e:	4b0d      	ldr	r3, [pc, #52]	; (1000b364 <dualtimer_isr_handler+0x38>)
1000b330:	7d1b      	ldrb	r3, [r3, #20]
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
1000b332:	2b00      	cmp	r3, #0
1000b334:	d007      	beq.n	1000b346 <dualtimer_isr_handler+0x1a>
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
1000b336:	2201      	movs	r2, #1
1000b338:	4b0a      	ldr	r3, [pc, #40]	; (1000b364 <dualtimer_isr_handler+0x38>)
1000b33a:	731a      	strb	r2, [r3, #12]
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
1000b33c:	4b0a      	ldr	r3, [pc, #40]	; (1000b368 <dualtimer_isr_handler+0x3c>)
1000b33e:	681b      	ldr	r3, [r3, #0]
1000b340:	2b00      	cmp	r3, #0
1000b342:	d000      	beq.n	1000b346 <dualtimer_isr_handler+0x1a>
			dualtimer_callback_timer1();
1000b344:	4798      	blx	r3
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
	} else {
		return DUALTIMER0->TIMER2MIS.reg;
1000b346:	2334      	movs	r3, #52	; 0x34
1000b348:	4a06      	ldr	r2, [pc, #24]	; (1000b364 <dualtimer_isr_handler+0x38>)
1000b34a:	5cd3      	ldrb	r3, [r2, r3]
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
1000b34c:	2b00      	cmp	r3, #0
1000b34e:	d007      	beq.n	1000b360 <dualtimer_isr_handler+0x34>
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
	} else {
		DUALTIMER0->TIMER2INTCLR.reg = 1;
1000b350:	2101      	movs	r1, #1
1000b352:	232c      	movs	r3, #44	; 0x2c
1000b354:	54d1      	strb	r1, [r2, r3]
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER2);
		if (dualtimer_callback_timer2)
1000b356:	4b05      	ldr	r3, [pc, #20]	; (1000b36c <dualtimer_isr_handler+0x40>)
1000b358:	681b      	ldr	r3, [r3, #0]
1000b35a:	2b00      	cmp	r3, #0
1000b35c:	d000      	beq.n	1000b360 <dualtimer_isr_handler+0x34>
			dualtimer_callback_timer2();
1000b35e:	4798      	blx	r3
	}
}
1000b360:	bd10      	pop	{r4, pc}
1000b362:	46c0      	nop			; (mov r8, r8)
1000b364:	40001000 	.word	0x40001000
1000b368:	10018968 	.word	0x10018968
1000b36c:	1001896c 	.word	0x1001896c

1000b370 <dualtimer_get_config_defaults>:
 *
 * \param[out]  config  Pointer to a DUALTIMER module configuration structure to set
 */
void dualtimer_get_config_defaults(struct dualtimer_config *config)
{
	config->timer1.timer_enable = true;
1000b370:	2301      	movs	r3, #1
1000b372:	7003      	strb	r3, [r0, #0]
	config->timer2.timer_enable = true;
1000b374:	7303      	strb	r3, [r0, #12]

	config->timer1.counter_mode = DUALTIMER_PERIODIC_MODE;
1000b376:	2202      	movs	r2, #2
1000b378:	7042      	strb	r2, [r0, #1]
	config->timer2.counter_mode = DUALTIMER_PERIODIC_MODE;
1000b37a:	7342      	strb	r2, [r0, #13]

	config->timer1.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
1000b37c:	7083      	strb	r3, [r0, #2]
	config->timer2.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
1000b37e:	7383      	strb	r3, [r0, #14]

	config->timer1.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
1000b380:	2200      	movs	r2, #0
1000b382:	70c2      	strb	r2, [r0, #3]
	config->timer2.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
1000b384:	73c2      	strb	r2, [r0, #15]

	config->timer1.interrup_enable = true;
1000b386:	7103      	strb	r3, [r0, #4]
	config->timer2.interrup_enable = true;
1000b388:	7403      	strb	r3, [r0, #16]

	config->timer1.load_value = 0;
1000b38a:	6082      	str	r2, [r0, #8]
	config->timer2.load_value = 0;
1000b38c:	6142      	str	r2, [r0, #20]

	config->clock_source = DUALTIMER_CLK_INPUT_0;
1000b38e:	7602      	strb	r2, [r0, #24]
}
1000b390:	4770      	bx	lr
1000b392:	46c0      	nop			; (mov r8, r8)

1000b394 <dualtimer_get_value>:
 *
 * \retval Timer1/Timer2 current value
 */
uint32_t dualtimer_get_value(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
1000b394:	2800      	cmp	r0, #0
1000b396:	d102      	bne.n	1000b39e <dualtimer_get_value+0xa>
		return DUALTIMER0->TIMER1VALUE.reg;
1000b398:	4b02      	ldr	r3, [pc, #8]	; (1000b3a4 <dualtimer_get_value+0x10>)
1000b39a:	6858      	ldr	r0, [r3, #4]
1000b39c:	e001      	b.n	1000b3a2 <dualtimer_get_value+0xe>
	} else {
		return DUALTIMER0->TIMER2VALUE.reg;
1000b39e:	4b01      	ldr	r3, [pc, #4]	; (1000b3a4 <dualtimer_get_value+0x10>)
1000b3a0:	6a58      	ldr	r0, [r3, #36]	; 0x24
	}
}
1000b3a2:	4770      	bx	lr
1000b3a4:	40001000 	.word	0x40001000

1000b3a8 <dualtimer_set_counter>:
 * \param[in]     value        Load value
 */
void dualtimer_set_counter(enum dualtimer_timer timer,
		enum dualtimer_set_register cur_bg, uint32_t value)
{
	if (timer == DUALTIMER_TIMER1) {
1000b3a8:	2800      	cmp	r0, #0
1000b3aa:	d107      	bne.n	1000b3bc <dualtimer_set_counter+0x14>
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
1000b3ac:	2900      	cmp	r1, #0
1000b3ae:	d102      	bne.n	1000b3b6 <dualtimer_set_counter+0xe>
			DUALTIMER0->TIMER1LOAD.reg = value;
1000b3b0:	4b06      	ldr	r3, [pc, #24]	; (1000b3cc <dualtimer_set_counter+0x24>)
1000b3b2:	601a      	str	r2, [r3, #0]
1000b3b4:	e009      	b.n	1000b3ca <dualtimer_set_counter+0x22>
		} else {
			DUALTIMER0->TIMER1BGLOAD.reg = value;
1000b3b6:	4b05      	ldr	r3, [pc, #20]	; (1000b3cc <dualtimer_set_counter+0x24>)
1000b3b8:	619a      	str	r2, [r3, #24]
1000b3ba:	e006      	b.n	1000b3ca <dualtimer_set_counter+0x22>
		}
	} else {
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
1000b3bc:	2900      	cmp	r1, #0
1000b3be:	d102      	bne.n	1000b3c6 <dualtimer_set_counter+0x1e>
			DUALTIMER0->TIMER2LOAD.reg = value;
1000b3c0:	4b02      	ldr	r3, [pc, #8]	; (1000b3cc <dualtimer_set_counter+0x24>)
1000b3c2:	621a      	str	r2, [r3, #32]
1000b3c4:	e001      	b.n	1000b3ca <dualtimer_set_counter+0x22>
			} else {
			DUALTIMER0->TIMER2BGLOAD.reg = value;
1000b3c6:	4b01      	ldr	r3, [pc, #4]	; (1000b3cc <dualtimer_set_counter+0x24>)
1000b3c8:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
}
1000b3ca:	4770      	bx	lr
1000b3cc:	40001000 	.word	0x40001000

1000b3d0 <dualtimer_enable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_enable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
1000b3d0:	2800      	cmp	r0, #0
1000b3d2:	d105      	bne.n	1000b3e0 <dualtimer_enable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg |= DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
1000b3d4:	4a06      	ldr	r2, [pc, #24]	; (1000b3f0 <dualtimer_enable+0x20>)
1000b3d6:	7a11      	ldrb	r1, [r2, #8]
1000b3d8:	2380      	movs	r3, #128	; 0x80
1000b3da:	430b      	orrs	r3, r1
1000b3dc:	7213      	strb	r3, [r2, #8]
1000b3de:	e005      	b.n	1000b3ec <dualtimer_enable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg |= DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
1000b3e0:	4903      	ldr	r1, [pc, #12]	; (1000b3f0 <dualtimer_enable+0x20>)
1000b3e2:	2228      	movs	r2, #40	; 0x28
1000b3e4:	5c88      	ldrb	r0, [r1, r2]
1000b3e6:	2380      	movs	r3, #128	; 0x80
1000b3e8:	4303      	orrs	r3, r0
1000b3ea:	548b      	strb	r3, [r1, r2]
	}
}
1000b3ec:	4770      	bx	lr
1000b3ee:	46c0      	nop			; (mov r8, r8)
1000b3f0:	40001000 	.word	0x40001000

1000b3f4 <dualtimer_disable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_disable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
1000b3f4:	2800      	cmp	r0, #0
1000b3f6:	d105      	bne.n	1000b404 <dualtimer_disable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg &= ~DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
1000b3f8:	4a06      	ldr	r2, [pc, #24]	; (1000b414 <dualtimer_disable+0x20>)
1000b3fa:	7a11      	ldrb	r1, [r2, #8]
1000b3fc:	237f      	movs	r3, #127	; 0x7f
1000b3fe:	400b      	ands	r3, r1
1000b400:	7213      	strb	r3, [r2, #8]
1000b402:	e005      	b.n	1000b410 <dualtimer_disable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg &= ~DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
1000b404:	4903      	ldr	r1, [pc, #12]	; (1000b414 <dualtimer_disable+0x20>)
1000b406:	2228      	movs	r2, #40	; 0x28
1000b408:	5c88      	ldrb	r0, [r1, r2]
1000b40a:	237f      	movs	r3, #127	; 0x7f
1000b40c:	4003      	ands	r3, r0
1000b40e:	548b      	strb	r3, [r1, r2]
	}
}
1000b410:	4770      	bx	lr
1000b412:	46c0      	nop			; (mov r8, r8)
1000b414:	40001000 	.word	0x40001000

1000b418 <dualtimer_init>:
 * \param[in]     config       Pointer to the Dualtimer configuration options struct
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
1000b418:	b570      	push	{r4, r5, r6, lr}
1000b41a:	0004      	movs	r4, r0
	uint8_t regval = 0;

	/* Global reset */
	system_peripheral_reset(PERIPHERAL_DUALT_TIMER);
1000b41c:	2004      	movs	r0, #4
1000b41e:	4b39      	ldr	r3, [pc, #228]	; (1000b504 <dualtimer_init+0xec>)
1000b420:	4798      	blx	r3

	/* Common config */
	if (config->timer1.timer_enable || config->timer2.timer_enable) {
1000b422:	7823      	ldrb	r3, [r4, #0]
1000b424:	2b00      	cmp	r3, #0
1000b426:	d102      	bne.n	1000b42e <dualtimer_init+0x16>
1000b428:	7b23      	ldrb	r3, [r4, #12]
1000b42a:	2b00      	cmp	r3, #0
1000b42c:	d065      	beq.n	1000b4fa <dualtimer_init+0xe2>
		LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |=
1000b42e:	4936      	ldr	r1, [pc, #216]	; (1000b508 <dualtimer_init+0xf0>)
1000b430:	68ca      	ldr	r2, [r1, #12]
1000b432:	2320      	movs	r3, #32
1000b434:	4313      	orrs	r3, r2
1000b436:	60cb      	str	r3, [r1, #12]
		LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
1000b438:	7e22      	ldrb	r2, [r4, #24]
1000b43a:	698b      	ldr	r3, [r1, #24]
1000b43c:	2003      	movs	r0, #3
1000b43e:	4002      	ands	r2, r0
1000b440:	0112      	lsls	r2, r2, #4
1000b442:	302d      	adds	r0, #45	; 0x2d
1000b444:	4383      	bics	r3, r0
1000b446:	4313      	orrs	r3, r2
1000b448:	618b      	str	r3, [r1, #24]
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
1000b44a:	7823      	ldrb	r3, [r4, #0]
1000b44c:	2b00      	cmp	r3, #0
1000b44e:	d026      	beq.n	1000b49e <dualtimer_init+0x86>
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000b450:	7863      	ldrb	r3, [r4, #1]
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
1000b452:	2101      	movs	r1, #1
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000b454:	2b00      	cmp	r3, #0
1000b456:	d003      	beq.n	1000b460 <dualtimer_init+0x48>
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer1.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_0;
		} else if (config->timer1.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_1;
1000b458:	3b02      	subs	r3, #2
1000b45a:	425d      	negs	r5, r3
1000b45c:	415d      	adcs	r5, r3
1000b45e:	01a9      	lsls	r1, r5, #6
		}
		regval |= (DUALTIMER_TIMER1CONTROL_TIMER_SIZE &
1000b460:	78a2      	ldrb	r2, [r4, #2]
1000b462:	0052      	lsls	r2, r2, #1
1000b464:	2502      	movs	r5, #2
1000b466:	402a      	ands	r2, r5
1000b468:	78e3      	ldrb	r3, [r4, #3]
1000b46a:	009b      	lsls	r3, r3, #2
1000b46c:	350a      	adds	r5, #10
1000b46e:	402b      	ands	r3, r5
1000b470:	431a      	orrs	r2, r3
1000b472:	0015      	movs	r5, r2
1000b474:	430d      	orrs	r5, r1
				((config->timer1.counter_size) << DUALTIMER_TIMER1CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER1CONTROL_TIMERPRE(config->timer1.clock_prescaler);
		if (config->timer1.interrup_enable) {
1000b476:	7923      	ldrb	r3, [r4, #4]
1000b478:	2b00      	cmp	r3, #0
1000b47a:	d001      	beq.n	1000b480 <dualtimer_init+0x68>
			regval |= DUALTIMER_TIMER1CONTROL_INTERRUPT_ENABLE;
1000b47c:	2320      	movs	r3, #32
1000b47e:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER1LOAD.reg = config->timer1.load_value;
1000b480:	4b22      	ldr	r3, [pc, #136]	; (1000b50c <dualtimer_init+0xf4>)
1000b482:	68a2      	ldr	r2, [r4, #8]
1000b484:	601a      	str	r2, [r3, #0]
		DUALTIMER0->TIMER1CONTROL.reg = regval;
1000b486:	721d      	strb	r5, [r3, #8]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
1000b488:	491f      	ldr	r1, [pc, #124]	; (1000b508 <dualtimer_init+0xf0>)
1000b48a:	22c4      	movs	r2, #196	; 0xc4
1000b48c:	0052      	lsls	r2, r2, #1
1000b48e:	5c88      	ldrb	r0, [r1, r2]
1000b490:	2301      	movs	r3, #1
1000b492:	4303      	orrs	r3, r0
1000b494:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER1);
1000b496:	2000      	movs	r0, #0
1000b498:	4b1d      	ldr	r3, [pc, #116]	; (1000b510 <dualtimer_init+0xf8>)
1000b49a:	4798      	blx	r3
1000b49c:	e000      	b.n	1000b4a0 <dualtimer_init+0x88>
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
	uint8_t regval = 0;
1000b49e:	2500      	movs	r5, #0
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
		dualtimer_enable(DUALTIMER_TIMER1);
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
1000b4a0:	7b23      	ldrb	r3, [r4, #12]
1000b4a2:	2b00      	cmp	r3, #0
1000b4a4:	d029      	beq.n	1000b4fa <dualtimer_init+0xe2>
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000b4a6:	7b63      	ldrb	r3, [r4, #13]
1000b4a8:	2b00      	cmp	r3, #0
1000b4aa:	d005      	beq.n	1000b4b8 <dualtimer_init+0xa0>
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
1000b4ac:	2b01      	cmp	r3, #1
1000b4ae:	d005      	beq.n	1000b4bc <dualtimer_init+0xa4>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
1000b4b0:	2b02      	cmp	r3, #2
1000b4b2:	d104      	bne.n	1000b4be <dualtimer_init+0xa6>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
1000b4b4:	2540      	movs	r5, #64	; 0x40
1000b4b6:	e002      	b.n	1000b4be <dualtimer_init+0xa6>
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
1000b4b8:	2501      	movs	r5, #1
1000b4ba:	e000      	b.n	1000b4be <dualtimer_init+0xa6>
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
1000b4bc:	2500      	movs	r5, #0
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
		}
		regval |= (DUALTIMER_TIMER2CONTROL_TIMER_SIZE &
1000b4be:	7ba3      	ldrb	r3, [r4, #14]
1000b4c0:	005b      	lsls	r3, r3, #1
1000b4c2:	2102      	movs	r1, #2
1000b4c4:	4019      	ands	r1, r3
1000b4c6:	7be2      	ldrb	r2, [r4, #15]
1000b4c8:	0092      	lsls	r2, r2, #2
1000b4ca:	230c      	movs	r3, #12
1000b4cc:	4013      	ands	r3, r2
1000b4ce:	430b      	orrs	r3, r1
1000b4d0:	431d      	orrs	r5, r3
				((config->timer2.counter_size) << DUALTIMER_TIMER2CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER2CONTROL_TIMERPRE(config->timer2.clock_prescaler);
		if (config->timer2.interrup_enable) {
1000b4d2:	7c23      	ldrb	r3, [r4, #16]
1000b4d4:	2b00      	cmp	r3, #0
1000b4d6:	d001      	beq.n	1000b4dc <dualtimer_init+0xc4>
			regval |= DUALTIMER_TIMER2CONTROL_INTERRUPT_ENABLE;
1000b4d8:	2320      	movs	r3, #32
1000b4da:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER2LOAD.reg = config->timer2.load_value;
1000b4dc:	6962      	ldr	r2, [r4, #20]
1000b4de:	4b0b      	ldr	r3, [pc, #44]	; (1000b50c <dualtimer_init+0xf4>)
1000b4e0:	621a      	str	r2, [r3, #32]
		DUALTIMER0->TIMER2CONTROL.reg = regval;
1000b4e2:	2228      	movs	r2, #40	; 0x28
1000b4e4:	549d      	strb	r5, [r3, r2]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_2_ENABLE;
1000b4e6:	4908      	ldr	r1, [pc, #32]	; (1000b508 <dualtimer_init+0xf0>)
1000b4e8:	3261      	adds	r2, #97	; 0x61
1000b4ea:	32ff      	adds	r2, #255	; 0xff
1000b4ec:	5c88      	ldrb	r0, [r1, r2]
1000b4ee:	2302      	movs	r3, #2
1000b4f0:	4303      	orrs	r3, r0
1000b4f2:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER2);
1000b4f4:	2001      	movs	r0, #1
1000b4f6:	4b06      	ldr	r3, [pc, #24]	; (1000b510 <dualtimer_init+0xf8>)
1000b4f8:	4798      	blx	r3
	}

	system_register_isr(RAM_ISR_TABLE_DUALTIMER_INDEX, (uint32_t)dualtimer_isr_handler);
1000b4fa:	4906      	ldr	r1, [pc, #24]	; (1000b514 <dualtimer_init+0xfc>)
1000b4fc:	201e      	movs	r0, #30
1000b4fe:	4b06      	ldr	r3, [pc, #24]	; (1000b518 <dualtimer_init+0x100>)
1000b500:	4798      	blx	r3
}
1000b502:	bd70      	pop	{r4, r5, r6, pc}
1000b504:	1000c3f1 	.word	0x1000c3f1
1000b508:	4000b000 	.word	0x4000b000
1000b50c:	40001000 	.word	0x40001000
1000b510:	1000b3d1 	.word	0x1000b3d1
1000b514:	1000b32d 	.word	0x1000b32d
1000b518:	1000c859 	.word	0x1000c859

1000b51c <dualtimer_register_callback>:
 *
 * \param[in]     callback_func Pointer to callback function
 */
void dualtimer_register_callback(enum dualtimer_timer timer, dualtimer_callback_t fun)
{
	if (timer == DUALTIMER_TIMER1) {
1000b51c:	2800      	cmp	r0, #0
1000b51e:	d102      	bne.n	1000b526 <dualtimer_register_callback+0xa>
		dualtimer_callback_timer1 = fun;
1000b520:	4b02      	ldr	r3, [pc, #8]	; (1000b52c <dualtimer_register_callback+0x10>)
1000b522:	6019      	str	r1, [r3, #0]
1000b524:	e001      	b.n	1000b52a <dualtimer_register_callback+0xe>
	} else {
		dualtimer_callback_timer2 = fun;
1000b526:	4b02      	ldr	r3, [pc, #8]	; (1000b530 <dualtimer_register_callback+0x14>)
1000b528:	6019      	str	r1, [r3, #0]
	}
}
1000b52a:	4770      	bx	lr
1000b52c:	10018968 	.word	0x10018968
1000b530:	1001896c 	.word	0x1001896c

1000b534 <gpio_port0_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port0_isr_handler(void)
{
1000b534:	b570      	push	{r4, r5, r6, lr}
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;
1000b536:	4b16      	ldr	r3, [pc, #88]	; (1000b590 <gpio_port0_isr_handler+0x5c>)
1000b538:	681d      	ldr	r5, [r3, #0]
1000b53a:	8f29      	ldrh	r1, [r5, #56]	; 0x38
1000b53c:	b289      	uxth	r1, r1

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
1000b53e:	07cb      	lsls	r3, r1, #31
1000b540:	d407      	bmi.n	1000b552 <gpio_port0_isr_handler+0x1e>
1000b542:	2301      	movs	r3, #1
1000b544:	2401      	movs	r4, #1
1000b546:	0018      	movs	r0, r3
1000b548:	0022      	movs	r2, r4
1000b54a:	409a      	lsls	r2, r3
1000b54c:	4211      	tst	r1, r2
1000b54e:	d014      	beq.n	1000b57a <gpio_port0_isr_handler+0x46>
1000b550:	e001      	b.n	1000b556 <gpio_port0_isr_handler+0x22>
1000b552:	2201      	movs	r2, #1
1000b554:	2000      	movs	r0, #0
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
1000b556:	b292      	uxth	r2, r2
1000b558:	872a      	strh	r2, [r5, #56]	; 0x38
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
1000b55a:	2346      	movs	r3, #70	; 0x46
1000b55c:	4a0c      	ldr	r2, [pc, #48]	; (1000b590 <gpio_port0_isr_handler+0x5c>)
1000b55e:	5ad3      	ldrh	r3, [r2, r3]
1000b560:	4103      	asrs	r3, r0
1000b562:	07db      	lsls	r3, r3, #31
1000b564:	d50c      	bpl.n	1000b580 <gpio_port0_isr_handler+0x4c>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
1000b566:	2344      	movs	r3, #68	; 0x44

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
1000b568:	5ad3      	ldrh	r3, [r2, r3]
1000b56a:	4103      	asrs	r3, r0
1000b56c:	07db      	lsls	r3, r3, #31
1000b56e:	d507      	bpl.n	1000b580 <gpio_port0_isr_handler+0x4c>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
                _gpio_instances[0].callback[i]();
1000b570:	0080      	lsls	r0, r0, #2
1000b572:	1810      	adds	r0, r2, r0
1000b574:	6843      	ldr	r3, [r0, #4]
1000b576:	4798      	blx	r3
1000b578:	e002      	b.n	1000b580 <gpio_port0_isr_handler+0x4c>
1000b57a:	3301      	adds	r3, #1
 */
static void gpio_port0_isr_handler(void)
{
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
1000b57c:	2b10      	cmp	r3, #16
1000b57e:	d1e2      	bne.n	1000b546 <gpio_port0_isr_handler+0x12>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000b580:	2180      	movs	r1, #128	; 0x80
1000b582:	0409      	lsls	r1, r1, #16
1000b584:	23c0      	movs	r3, #192	; 0xc0
1000b586:	005b      	lsls	r3, r3, #1
1000b588:	4a02      	ldr	r2, [pc, #8]	; (1000b594 <gpio_port0_isr_handler+0x60>)
1000b58a:	50d1      	str	r1, [r2, r3]
                _gpio_instances[0].callback[i]();
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO0_IRQn);
}
1000b58c:	bd70      	pop	{r4, r5, r6, pc}
1000b58e:	46c0      	nop			; (mov r8, r8)
1000b590:	1001a63c 	.word	0x1001a63c
1000b594:	e000e100 	.word	0xe000e100

1000b598 <gpio_port1_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port1_isr_handler(void)
{
1000b598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;
1000b59a:	4b18      	ldr	r3, [pc, #96]	; (1000b5fc <gpio_port1_isr_handler+0x64>)
1000b59c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
1000b59e:	8f1e      	ldrh	r6, [r3, #56]	; 0x38
1000b5a0:	b2b6      	uxth	r6, r6
1000b5a2:	0037      	movs	r7, r6
1000b5a4:	2400      	movs	r4, #0

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
1000b5a6:	0b76      	lsrs	r6, r6, #13
1000b5a8:	0376      	lsls	r6, r6, #13
			aon_handle_ext_wakeup_isr();
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
1000b5aa:	4d14      	ldr	r5, [pc, #80]	; (1000b5fc <gpio_port1_isr_handler+0x64>)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
1000b5ac:	2e00      	cmp	r6, #0
1000b5ae:	d001      	beq.n	1000b5b4 <gpio_port1_isr_handler+0x1c>
			aon_handle_ext_wakeup_isr();
1000b5b0:	4b13      	ldr	r3, [pc, #76]	; (1000b600 <gpio_port1_isr_handler+0x68>)
1000b5b2:	4798      	blx	r3
		}

		if (flag & (1 << i)) {
1000b5b4:	0022      	movs	r2, r4
1000b5b6:	2301      	movs	r3, #1
1000b5b8:	40a3      	lsls	r3, r4
1000b5ba:	421f      	tst	r7, r3
1000b5bc:	d013      	beq.n	1000b5e6 <gpio_port1_isr_handler+0x4e>
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
1000b5be:	b29b      	uxth	r3, r3
1000b5c0:	6ca9      	ldr	r1, [r5, #72]	; 0x48
1000b5c2:	870b      	strh	r3, [r1, #56]	; 0x38
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
1000b5c4:	238e      	movs	r3, #142	; 0x8e
1000b5c6:	5aeb      	ldrh	r3, [r5, r3]
1000b5c8:	4123      	asrs	r3, r4
1000b5ca:	07db      	lsls	r3, r3, #31
1000b5cc:	d50b      	bpl.n	1000b5e6 <gpio_port1_isr_handler+0x4e>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
1000b5ce:	238c      	movs	r3, #140	; 0x8c
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
1000b5d0:	490a      	ldr	r1, [pc, #40]	; (1000b5fc <gpio_port1_isr_handler+0x64>)
1000b5d2:	5acb      	ldrh	r3, [r1, r3]
1000b5d4:	4123      	asrs	r3, r4
1000b5d6:	07db      	lsls	r3, r3, #31
1000b5d8:	d505      	bpl.n	1000b5e6 <gpio_port1_isr_handler+0x4e>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
				_gpio_instances[1].callback[i]();
1000b5da:	3212      	adds	r2, #18
1000b5dc:	0092      	lsls	r2, r2, #2
1000b5de:	188a      	adds	r2, r1, r2
1000b5e0:	6853      	ldr	r3, [r2, #4]
1000b5e2:	4798      	blx	r3
				break;
1000b5e4:	e002      	b.n	1000b5ec <gpio_port1_isr_handler+0x54>
1000b5e6:	3401      	adds	r4, #1
 */
static void gpio_port1_isr_handler(void)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
1000b5e8:	2c10      	cmp	r4, #16
1000b5ea:	d1df      	bne.n	1000b5ac <gpio_port1_isr_handler+0x14>
1000b5ec:	2180      	movs	r1, #128	; 0x80
1000b5ee:	0449      	lsls	r1, r1, #17
1000b5f0:	23c0      	movs	r3, #192	; 0xc0
1000b5f2:	005b      	lsls	r3, r3, #1
1000b5f4:	4a03      	ldr	r2, [pc, #12]	; (1000b604 <gpio_port1_isr_handler+0x6c>)
1000b5f6:	50d1      	str	r1, [r2, r3]
				break;
			}
		}
	}
	NVIC_ClearPendingIRQ(GPIO1_IRQn);
}
1000b5f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000b5fa:	46c0      	nop			; (mov r8, r8)
1000b5fc:	1001a63c 	.word	0x1001a63c
1000b600:	0001bc51 	.word	0x0001bc51
1000b604:	e000e100 	.word	0xe000e100

1000b608 <gpio_port2_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port2_isr_handler(void)
{
1000b608:	b510      	push	{r4, lr}
	uint32_t flag = _gpio_instances[2].hw->INTSTATUSCLEAR.reg;
1000b60a:	2390      	movs	r3, #144	; 0x90
1000b60c:	4a1b      	ldr	r2, [pc, #108]	; (1000b67c <gpio_port2_isr_handler+0x74>)
1000b60e:	58d2      	ldr	r2, [r2, r3]
1000b610:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000b612:	b29b      	uxth	r3, r3

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
1000b614:	04d9      	lsls	r1, r3, #19
1000b616:	d414      	bmi.n	1000b642 <gpio_port2_isr_handler+0x3a>
1000b618:	0499      	lsls	r1, r3, #18
1000b61a:	d40a      	bmi.n	1000b632 <gpio_port2_isr_handler+0x2a>
1000b61c:	0459      	lsls	r1, r3, #17
1000b61e:	d40c      	bmi.n	1000b63a <gpio_port2_isr_handler+0x32>
1000b620:	0bdb      	lsrs	r3, r3, #15
1000b622:	03db      	lsls	r3, r3, #15
1000b624:	b29b      	uxth	r3, r3
1000b626:	2b00      	cmp	r3, #0
1000b628:	d020      	beq.n	1000b66c <gpio_port2_isr_handler+0x64>
1000b62a:	2380      	movs	r3, #128	; 0x80
1000b62c:	021b      	lsls	r3, r3, #8
1000b62e:	210f      	movs	r1, #15
1000b630:	e00a      	b.n	1000b648 <gpio_port2_isr_handler+0x40>
1000b632:	2380      	movs	r3, #128	; 0x80
1000b634:	019b      	lsls	r3, r3, #6
1000b636:	210d      	movs	r1, #13
1000b638:	e006      	b.n	1000b648 <gpio_port2_isr_handler+0x40>
1000b63a:	2380      	movs	r3, #128	; 0x80
1000b63c:	01db      	lsls	r3, r3, #7
1000b63e:	210e      	movs	r1, #14
1000b640:	e002      	b.n	1000b648 <gpio_port2_isr_handler+0x40>
1000b642:	2380      	movs	r3, #128	; 0x80
1000b644:	015b      	lsls	r3, r3, #5
1000b646:	210c      	movs	r1, #12
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
1000b648:	b29b      	uxth	r3, r3
1000b64a:	8713      	strh	r3, [r2, #56]	; 0x38
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
1000b64c:	23d6      	movs	r3, #214	; 0xd6
1000b64e:	4a0b      	ldr	r2, [pc, #44]	; (1000b67c <gpio_port2_isr_handler+0x74>)
1000b650:	5ad3      	ldrh	r3, [r2, r3]
1000b652:	410b      	asrs	r3, r1
1000b654:	07db      	lsls	r3, r3, #31
1000b656:	d509      	bpl.n	1000b66c <gpio_port2_isr_handler+0x64>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
1000b658:	23d4      	movs	r3, #212	; 0xd4

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
1000b65a:	5ad3      	ldrh	r3, [r2, r3]
1000b65c:	410b      	asrs	r3, r1
1000b65e:	07db      	lsls	r3, r3, #31
1000b660:	d504      	bpl.n	1000b66c <gpio_port2_isr_handler+0x64>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
                _gpio_instances[2].callback[i]();
1000b662:	3124      	adds	r1, #36	; 0x24
1000b664:	0089      	lsls	r1, r1, #2
1000b666:	1851      	adds	r1, r2, r1
1000b668:	684b      	ldr	r3, [r1, #4]
1000b66a:	4798      	blx	r3
1000b66c:	2180      	movs	r1, #128	; 0x80
1000b66e:	0489      	lsls	r1, r1, #18
1000b670:	23c0      	movs	r3, #192	; 0xc0
1000b672:	005b      	lsls	r3, r3, #1
1000b674:	4a02      	ldr	r2, [pc, #8]	; (1000b680 <gpio_port2_isr_handler+0x78>)
1000b676:	50d1      	str	r1, [r2, r3]
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO2_IRQn);
}
1000b678:	bd10      	pop	{r4, pc}
1000b67a:	46c0      	nop			; (mov r8, r8)
1000b67c:	1001a63c 	.word	0x1001a63c
1000b680:	e000e100 	.word	0xe000e100

1000b684 <gpio_get_config_defaults>:
 *  \param[out] config  Configuration structure to initialize to default values.
 */
void gpio_get_config_defaults(struct gpio_config *const config)
{
	/* Default configuration values */
	config->direction  = GPIO_PIN_DIR_INPUT;
1000b684:	2300      	movs	r3, #0
1000b686:	7003      	strb	r3, [r0, #0]
	config->input_pull = GPIO_PIN_PULL_UP;
1000b688:	2201      	movs	r2, #1
1000b68a:	7042      	strb	r2, [r0, #1]
	config->powersave  = false;
1000b68c:	7083      	strb	r3, [r0, #2]
	config->aon_wakeup = false;
1000b68e:	70c3      	strb	r3, [r0, #3]
}
1000b690:	4770      	bx	lr
1000b692:	46c0      	nop			; (mov r8, r8)

1000b694 <gpio_pin_set_config>:
 *  \retval STATUS_RESOURCE_NOT_AVAILABLE   Requested gpio is already in use.
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
1000b694:	b570      	push	{r4, r5, r6, lr}
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
1000b696:	2317      	movs	r3, #23
	enum status_code status = STATUS_OK;

	/* Following GPIO's should never be modified by user.
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
1000b698:	2801      	cmp	r0, #1
1000b69a:	d800      	bhi.n	1000b69e <gpio_pin_set_config+0xa>
1000b69c:	e0c8      	b.n	1000b830 <gpio_pin_set_config+0x19c>
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
	} else {
		if (gpio_pin <= 7) {
1000b69e:	2807      	cmp	r0, #7
1000b6a0:	d809      	bhi.n	1000b6b6 <gpio_pin_set_config+0x22>
			LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000b6a2:	4d64      	ldr	r5, [pc, #400]	; (1000b834 <gpio_pin_set_config+0x1a0>)
1000b6a4:	6c6a      	ldr	r2, [r5, #68]	; 0x44
1000b6a6:	3b10      	subs	r3, #16
1000b6a8:	4003      	ands	r3, r0
1000b6aa:	009b      	lsls	r3, r3, #2
1000b6ac:	2407      	movs	r4, #7
1000b6ae:	409c      	lsls	r4, r3
1000b6b0:	43a2      	bics	r2, r4
1000b6b2:	646a      	str	r2, [r5, #68]	; 0x44
1000b6b4:	e029      	b.n	1000b70a <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 15) {
1000b6b6:	280f      	cmp	r0, #15
1000b6b8:	d809      	bhi.n	1000b6ce <gpio_pin_set_config+0x3a>
			LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000b6ba:	4d5e      	ldr	r5, [pc, #376]	; (1000b834 <gpio_pin_set_config+0x1a0>)
1000b6bc:	6caa      	ldr	r2, [r5, #72]	; 0x48
1000b6be:	2307      	movs	r3, #7
1000b6c0:	4003      	ands	r3, r0
1000b6c2:	009b      	lsls	r3, r3, #2
1000b6c4:	2407      	movs	r4, #7
1000b6c6:	409c      	lsls	r4, r3
1000b6c8:	43a2      	bics	r2, r4
1000b6ca:	64aa      	str	r2, [r5, #72]	; 0x48
1000b6cc:	e01d      	b.n	1000b70a <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 23) {
1000b6ce:	2817      	cmp	r0, #23
1000b6d0:	d809      	bhi.n	1000b6e6 <gpio_pin_set_config+0x52>
			LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000b6d2:	4d58      	ldr	r5, [pc, #352]	; (1000b834 <gpio_pin_set_config+0x1a0>)
1000b6d4:	6cea      	ldr	r2, [r5, #76]	; 0x4c
1000b6d6:	2307      	movs	r3, #7
1000b6d8:	4003      	ands	r3, r0
1000b6da:	009b      	lsls	r3, r3, #2
1000b6dc:	2407      	movs	r4, #7
1000b6de:	409c      	lsls	r4, r3
1000b6e0:	43a2      	bics	r2, r4
1000b6e2:	64ea      	str	r2, [r5, #76]	; 0x4c
1000b6e4:	e011      	b.n	1000b70a <gpio_pin_set_config+0x76>
		} else if (44 <= gpio_pin  && gpio_pin < 48) {
1000b6e6:	0003      	movs	r3, r0
1000b6e8:	3b2c      	subs	r3, #44	; 0x2c
1000b6ea:	2b03      	cmp	r3, #3
1000b6ec:	d80d      	bhi.n	1000b70a <gpio_pin_set_config+0x76>
			/* Set GPIO_MSx as digital mode */
			AON_GP_REGS0->MS_GPIO_MODE.vec.ANALOG_ENABLE_ &= ~(1 << (gpio_pin - PIN_GPIO_MS4));
1000b6ee:	4d52      	ldr	r5, [pc, #328]	; (1000b838 <gpio_pin_set_config+0x1a4>)
1000b6f0:	2482      	movs	r4, #130	; 0x82
1000b6f2:	00e4      	lsls	r4, r4, #3
1000b6f4:	5d2a      	ldrb	r2, [r5, r4]
1000b6f6:	0712      	lsls	r2, r2, #28
1000b6f8:	2601      	movs	r6, #1
1000b6fa:	409e      	lsls	r6, r3
1000b6fc:	0f12      	lsrs	r2, r2, #28
1000b6fe:	5d2b      	ldrb	r3, [r5, r4]
1000b700:	43b2      	bics	r2, r6
1000b702:	260f      	movs	r6, #15
1000b704:	43b3      	bics	r3, r6
1000b706:	4313      	orrs	r3, r2
1000b708:	552b      	strb	r3, [r5, r4]
		}
	
		if ((gpio_pin == PIN_AO_GPIO_0) || (gpio_pin == PIN_AO_GPIO_1) ||
1000b70a:	0003      	movs	r3, r0
1000b70c:	3b1d      	subs	r3, #29
1000b70e:	2b02      	cmp	r3, #2
1000b710:	d829      	bhi.n	1000b766 <gpio_pin_set_config+0xd2>
				(gpio_pin == PIN_AO_GPIO_2)) {
			/* Active Low, Always On Pull Enable Control */
			if (config->input_pull == GPIO_PIN_PULL_UP) {
1000b712:	784b      	ldrb	r3, [r1, #1]
1000b714:	2b01      	cmp	r3, #1
1000b716:	d108      	bne.n	1000b72a <gpio_pin_set_config+0x96>
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
1000b718:	4d47      	ldr	r5, [pc, #284]	; (1000b838 <gpio_pin_set_config+0x1a4>)
1000b71a:	7d2b      	ldrb	r3, [r5, #20]
1000b71c:	241f      	movs	r4, #31
1000b71e:	1a24      	subs	r4, r4, r0
1000b720:	2201      	movs	r2, #1
1000b722:	40a2      	lsls	r2, r4
1000b724:	4393      	bics	r3, r2
1000b726:	752b      	strb	r3, [r5, #20]
1000b728:	e008      	b.n	1000b73c <gpio_pin_set_config+0xa8>
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
1000b72a:	4c43      	ldr	r4, [pc, #268]	; (1000b838 <gpio_pin_set_config+0x1a4>)
1000b72c:	7d25      	ldrb	r5, [r4, #20]
1000b72e:	221f      	movs	r2, #31
1000b730:	1a12      	subs	r2, r2, r0
1000b732:	2301      	movs	r3, #1
1000b734:	4093      	lsls	r3, r2
1000b736:	432b      	orrs	r3, r5
1000b738:	b2db      	uxtb	r3, r3
1000b73a:	7523      	strb	r3, [r4, #20]
			}
			if (config->aon_wakeup) {
1000b73c:	78ca      	ldrb	r2, [r1, #3]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000b73e:	2300      	movs	r3, #0
			if (config->input_pull == GPIO_PIN_PULL_UP) {
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
			}
			if (config->aon_wakeup) {
1000b740:	2a00      	cmp	r2, #0
1000b742:	d075      	beq.n	1000b830 <gpio_pin_set_config+0x19c>
				/* Enable AON_GPIO_x to be a wakeup MCU from sleep mode */
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
1000b744:	493c      	ldr	r1, [pc, #240]	; (1000b838 <gpio_pin_set_config+0x1a4>)
1000b746:	880c      	ldrh	r4, [r1, #0]
1000b748:	221f      	movs	r2, #31
1000b74a:	1a10      	subs	r0, r2, r0
1000b74c:	0080      	lsls	r0, r0, #2
1000b74e:	3301      	adds	r3, #1
1000b750:	4083      	lsls	r3, r0
1000b752:	4323      	orrs	r3, r4
1000b754:	b29b      	uxth	r3, r3
1000b756:	800b      	strh	r3, [r1, #0]
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
1000b758:	4a38      	ldr	r2, [pc, #224]	; (1000b83c <gpio_pin_set_config+0x1a8>)
1000b75a:	7811      	ldrb	r1, [r2, #0]
1000b75c:	2302      	movs	r3, #2
1000b75e:	430b      	orrs	r3, r1
1000b760:	7013      	strb	r3, [r2, #0]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000b762:	2300      	movs	r3, #0
1000b764:	e064      	b.n	1000b830 <gpio_pin_set_config+0x19c>
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
1000b766:	780a      	ldrb	r2, [r1, #0]
1000b768:	2a00      	cmp	r2, #0
1000b76a:	d140      	bne.n	1000b7ee <gpio_pin_set_config+0x15a>
				if(gpio_pin < 16) {
1000b76c:	280f      	cmp	r0, #15
1000b76e:	d808      	bhi.n	1000b782 <gpio_pin_set_config+0xee>
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
1000b770:	2301      	movs	r3, #1
1000b772:	4083      	lsls	r3, r0
1000b774:	b29b      	uxth	r3, r3
1000b776:	4a32      	ldr	r2, [pc, #200]	; (1000b840 <gpio_pin_set_config+0x1ac>)
1000b778:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000b77a:	2300      	movs	r3, #0
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
1000b77c:	281f      	cmp	r0, #31
1000b77e:	d857      	bhi.n	1000b830 <gpio_pin_set_config+0x19c>
1000b780:	e012      	b.n	1000b7a8 <gpio_pin_set_config+0x114>
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
				if(gpio_pin < 16) {
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32){
1000b782:	281f      	cmp	r0, #31
1000b784:	d807      	bhi.n	1000b796 <gpio_pin_set_config+0x102>
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000b786:	220f      	movs	r2, #15
1000b788:	4002      	ands	r2, r0
1000b78a:	2301      	movs	r3, #1
1000b78c:	4093      	lsls	r3, r2
1000b78e:	b29b      	uxth	r3, r3
1000b790:	4a2c      	ldr	r2, [pc, #176]	; (1000b844 <gpio_pin_set_config+0x1b0>)
1000b792:	8293      	strh	r3, [r2, #20]
1000b794:	e008      	b.n	1000b7a8 <gpio_pin_set_config+0x114>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000b796:	230f      	movs	r3, #15
1000b798:	4018      	ands	r0, r3
1000b79a:	3b0e      	subs	r3, #14
1000b79c:	4083      	lsls	r3, r0
1000b79e:	b29b      	uxth	r3, r3
1000b7a0:	4a29      	ldr	r2, [pc, #164]	; (1000b848 <gpio_pin_set_config+0x1b4>)
1000b7a2:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000b7a4:	2300      	movs	r3, #0
1000b7a6:	e043      	b.n	1000b830 <gpio_pin_set_config+0x19c>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
1000b7a8:	784b      	ldrb	r3, [r1, #1]
1000b7aa:	2b01      	cmp	r3, #1
1000b7ac:	d00c      	beq.n	1000b7c8 <gpio_pin_set_config+0x134>
1000b7ae:	2b00      	cmp	r3, #0
1000b7b0:	d002      	beq.n	1000b7b8 <gpio_pin_set_config+0x124>
1000b7b2:	2b02      	cmp	r3, #2
1000b7b4:	d010      	beq.n	1000b7d8 <gpio_pin_set_config+0x144>
1000b7b6:	e03a      	b.n	1000b82e <gpio_pin_set_config+0x19a>
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
1000b7b8:	491e      	ldr	r1, [pc, #120]	; (1000b834 <gpio_pin_set_config+0x1a0>)
1000b7ba:	6d0a      	ldr	r2, [r1, #80]	; 0x50
1000b7bc:	2301      	movs	r3, #1
1000b7be:	4083      	lsls	r3, r0
1000b7c0:	4313      	orrs	r3, r2
1000b7c2:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000b7c4:	2300      	movs	r3, #0
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
1000b7c6:	e033      	b.n	1000b830 <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000b7c8:	491a      	ldr	r1, [pc, #104]	; (1000b834 <gpio_pin_set_config+0x1a0>)
1000b7ca:	6d0b      	ldr	r3, [r1, #80]	; 0x50
1000b7cc:	2201      	movs	r2, #1
1000b7ce:	4082      	lsls	r2, r0
1000b7d0:	4393      	bics	r3, r2
1000b7d2:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000b7d4:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
1000b7d6:	e02b      	b.n	1000b830 <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
1000b7d8:	4b16      	ldr	r3, [pc, #88]	; (1000b834 <gpio_pin_set_config+0x1a0>)
1000b7da:	6d59      	ldr	r1, [r3, #84]	; 0x54
1000b7dc:	2201      	movs	r2, #1
1000b7de:	4082      	lsls	r2, r0
1000b7e0:	4311      	orrs	r1, r2
1000b7e2:	6559      	str	r1, [r3, #84]	; 0x54
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000b7e4:	6d19      	ldr	r1, [r3, #80]	; 0x50
1000b7e6:	4391      	bics	r1, r2
1000b7e8:	6519      	str	r1, [r3, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000b7ea:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
1000b7ec:	e020      	b.n	1000b830 <gpio_pin_set_config+0x19c>
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000b7ee:	2300      	movs	r3, #0
						default:
							status = STATUS_ERR_INVALID_ARG;
							break;
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
1000b7f0:	2a01      	cmp	r2, #1
1000b7f2:	d11d      	bne.n	1000b830 <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
1000b7f4:	280f      	cmp	r0, #15
1000b7f6:	d806      	bhi.n	1000b806 <gpio_pin_set_config+0x172>
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
1000b7f8:	3301      	adds	r3, #1
1000b7fa:	4083      	lsls	r3, r0
1000b7fc:	b29b      	uxth	r3, r3
1000b7fe:	4a10      	ldr	r2, [pc, #64]	; (1000b840 <gpio_pin_set_config+0x1ac>)
1000b800:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000b802:	2300      	movs	r3, #0
1000b804:	e014      	b.n	1000b830 <gpio_pin_set_config+0x19c>
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
1000b806:	281f      	cmp	r0, #31
1000b808:	d808      	bhi.n	1000b81c <gpio_pin_set_config+0x188>
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
1000b80a:	230f      	movs	r3, #15
1000b80c:	4018      	ands	r0, r3
1000b80e:	3b0e      	subs	r3, #14
1000b810:	4083      	lsls	r3, r0
1000b812:	b29b      	uxth	r3, r3
1000b814:	4a0b      	ldr	r2, [pc, #44]	; (1000b844 <gpio_pin_set_config+0x1b0>)
1000b816:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000b818:	2300      	movs	r3, #0
1000b81a:	e009      	b.n	1000b830 <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENSET.reg = (1 << (gpio_pin % 16));
1000b81c:	230f      	movs	r3, #15
1000b81e:	4018      	ands	r0, r3
1000b820:	3b0e      	subs	r3, #14
1000b822:	4083      	lsls	r3, r0
1000b824:	b29b      	uxth	r3, r3
1000b826:	4a08      	ldr	r2, [pc, #32]	; (1000b848 <gpio_pin_set_config+0x1b4>)
1000b828:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000b82a:	2300      	movs	r3, #0
1000b82c:	e000      	b.n	1000b830 <gpio_pin_set_config+0x19c>
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
						default:
							status = STATUS_ERR_INVALID_ARG;
1000b82e:	2317      	movs	r3, #23
				}
			}
		}
	}
	return status;
}
1000b830:	0018      	movs	r0, r3
1000b832:	bd70      	pop	{r4, r5, r6, pc}
1000b834:	4000b000 	.word	0x4000b000
1000b838:	4000f000 	.word	0x4000f000
1000b83c:	4000e000 	.word	0x4000e000
1000b840:	40010000 	.word	0x40010000
1000b844:	40011000 	.word	0x40011000
1000b848:	40013000 	.word	0x40013000

1000b84c <gpio_pin_get_input_level>:
 */
bool gpio_pin_get_input_level(const uint8_t gpio_pin)
{
	uint32_t regval = 0;

	if (gpio_pin < 16) {
1000b84c:	280f      	cmp	r0, #15
1000b84e:	d806      	bhi.n	1000b85e <gpio_pin_get_input_level+0x12>
		regval = GPIO0->DATA.reg;
1000b850:	4b0f      	ldr	r3, [pc, #60]	; (1000b890 <gpio_pin_get_input_level+0x44>)
1000b852:	8819      	ldrh	r1, [r3, #0]
		regval &= (1 << gpio_pin);
1000b854:	2301      	movs	r3, #1
1000b856:	4083      	lsls	r3, r0
1000b858:	0018      	movs	r0, r3
1000b85a:	4008      	ands	r0, r1
1000b85c:	e014      	b.n	1000b888 <gpio_pin_get_input_level+0x3c>
	} else if (gpio_pin < 32) {
1000b85e:	281f      	cmp	r0, #31
1000b860:	d809      	bhi.n	1000b876 <gpio_pin_get_input_level+0x2a>
		regval = GPIO1->DATA.reg;
1000b862:	4b0c      	ldr	r3, [pc, #48]	; (1000b894 <gpio_pin_get_input_level+0x48>)
1000b864:	8819      	ldrh	r1, [r3, #0]
		regval &= (1 << (gpio_pin % 16));
1000b866:	230f      	movs	r3, #15
1000b868:	4003      	ands	r3, r0
1000b86a:	001a      	movs	r2, r3
1000b86c:	2301      	movs	r3, #1
1000b86e:	4093      	lsls	r3, r2
1000b870:	0018      	movs	r0, r3
1000b872:	4008      	ands	r0, r1
1000b874:	e008      	b.n	1000b888 <gpio_pin_get_input_level+0x3c>
	} else {
		regval = GPIO2->DATA.reg;
1000b876:	4b08      	ldr	r3, [pc, #32]	; (1000b898 <gpio_pin_get_input_level+0x4c>)
1000b878:	8819      	ldrh	r1, [r3, #0]
		regval &= (1 << (gpio_pin % 16));
1000b87a:	230f      	movs	r3, #15
1000b87c:	4003      	ands	r3, r0
1000b87e:	001a      	movs	r2, r3
1000b880:	2301      	movs	r3, #1
1000b882:	4093      	lsls	r3, r2
1000b884:	0018      	movs	r0, r3
1000b886:	4008      	ands	r0, r1
	}

	return regval;
1000b888:	1e43      	subs	r3, r0, #1
1000b88a:	4198      	sbcs	r0, r3
1000b88c:	b2c0      	uxtb	r0, r0
}
1000b88e:	4770      	bx	lr
1000b890:	40010000 	.word	0x40010000
1000b894:	40011000 	.word	0x40011000
1000b898:	40013000 	.word	0x40013000

1000b89c <gpio_pin_get_output_level>:
 */
bool gpio_pin_get_output_level(const uint8_t gpio_pin)
{
	uint32_t regval = 0;

	if (gpio_pin < 16) {
1000b89c:	280f      	cmp	r0, #15
1000b89e:	d806      	bhi.n	1000b8ae <gpio_pin_get_output_level+0x12>
		regval = GPIO0->DATAOUT.reg;
1000b8a0:	4b0f      	ldr	r3, [pc, #60]	; (1000b8e0 <gpio_pin_get_output_level+0x44>)
1000b8a2:	8899      	ldrh	r1, [r3, #4]
		regval &= (1 << gpio_pin);
1000b8a4:	2301      	movs	r3, #1
1000b8a6:	4083      	lsls	r3, r0
1000b8a8:	0018      	movs	r0, r3
1000b8aa:	4008      	ands	r0, r1
1000b8ac:	e014      	b.n	1000b8d8 <gpio_pin_get_output_level+0x3c>
	} else if (gpio_pin < 32) {
1000b8ae:	281f      	cmp	r0, #31
1000b8b0:	d809      	bhi.n	1000b8c6 <gpio_pin_get_output_level+0x2a>
		regval = GPIO1->DATAOUT.reg;
1000b8b2:	4b0c      	ldr	r3, [pc, #48]	; (1000b8e4 <gpio_pin_get_output_level+0x48>)
1000b8b4:	8899      	ldrh	r1, [r3, #4]
		regval &= (1 << (gpio_pin % 16));
1000b8b6:	230f      	movs	r3, #15
1000b8b8:	4003      	ands	r3, r0
1000b8ba:	001a      	movs	r2, r3
1000b8bc:	2301      	movs	r3, #1
1000b8be:	4093      	lsls	r3, r2
1000b8c0:	0018      	movs	r0, r3
1000b8c2:	4008      	ands	r0, r1
1000b8c4:	e008      	b.n	1000b8d8 <gpio_pin_get_output_level+0x3c>
	} else {
		regval = GPIO2->DATAOUT.reg;
1000b8c6:	4b08      	ldr	r3, [pc, #32]	; (1000b8e8 <gpio_pin_get_output_level+0x4c>)
1000b8c8:	8899      	ldrh	r1, [r3, #4]
		regval &= (1 << (gpio_pin % 16));
1000b8ca:	230f      	movs	r3, #15
1000b8cc:	4003      	ands	r3, r0
1000b8ce:	001a      	movs	r2, r3
1000b8d0:	2301      	movs	r3, #1
1000b8d2:	4093      	lsls	r3, r2
1000b8d4:	0018      	movs	r0, r3
1000b8d6:	4008      	ands	r0, r1
	}

	return regval;
1000b8d8:	1e43      	subs	r3, r0, #1
1000b8da:	4198      	sbcs	r0, r3
1000b8dc:	b2c0      	uxtb	r0, r0
}
1000b8de:	4770      	bx	lr
1000b8e0:	40010000 	.word	0x40010000
1000b8e4:	40011000 	.word	0x40011000
1000b8e8:	40013000 	.word	0x40013000

1000b8ec <gpio_pin_set_output_level>:
 *
 *  \param[in] gpio_pin  Index of the GPIO pin to write to.
 *  \param[in] level     Logical level to set the given pin to.
 */
void gpio_pin_set_output_level(const uint8_t gpio_pin, const bool level)
{
1000b8ec:	b510      	push	{r4, lr}
	if (gpio_pin < 16) {
1000b8ee:	280f      	cmp	r0, #15
1000b8f0:	d810      	bhi.n	1000b914 <gpio_pin_set_output_level+0x28>
		if(level) {
1000b8f2:	2900      	cmp	r1, #0
1000b8f4:	d007      	beq.n	1000b906 <gpio_pin_set_output_level+0x1a>
			GPIO0->DATAOUT.reg |= (1 << gpio_pin);
1000b8f6:	4a1d      	ldr	r2, [pc, #116]	; (1000b96c <gpio_pin_set_output_level+0x80>)
1000b8f8:	8891      	ldrh	r1, [r2, #4]
1000b8fa:	2301      	movs	r3, #1
1000b8fc:	4083      	lsls	r3, r0
1000b8fe:	430b      	orrs	r3, r1
1000b900:	b29b      	uxth	r3, r3
1000b902:	8093      	strh	r3, [r2, #4]
1000b904:	e031      	b.n	1000b96a <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO0->DATAOUT.reg &= ~(1 << gpio_pin);
1000b906:	4919      	ldr	r1, [pc, #100]	; (1000b96c <gpio_pin_set_output_level+0x80>)
1000b908:	888b      	ldrh	r3, [r1, #4]
1000b90a:	2201      	movs	r2, #1
1000b90c:	4082      	lsls	r2, r0
1000b90e:	4393      	bics	r3, r2
1000b910:	808b      	strh	r3, [r1, #4]
1000b912:	e02a      	b.n	1000b96a <gpio_pin_set_output_level+0x7e>
		}
	} else if (gpio_pin < 32) {
1000b914:	281f      	cmp	r0, #31
1000b916:	d814      	bhi.n	1000b942 <gpio_pin_set_output_level+0x56>
		if(level) {
1000b918:	2900      	cmp	r1, #0
1000b91a:	d009      	beq.n	1000b930 <gpio_pin_set_output_level+0x44>
			GPIO1->DATAOUT.reg |= (1 << (gpio_pin % 16));
1000b91c:	4914      	ldr	r1, [pc, #80]	; (1000b970 <gpio_pin_set_output_level+0x84>)
1000b91e:	888c      	ldrh	r4, [r1, #4]
1000b920:	220f      	movs	r2, #15
1000b922:	4010      	ands	r0, r2
1000b924:	2301      	movs	r3, #1
1000b926:	4083      	lsls	r3, r0
1000b928:	4323      	orrs	r3, r4
1000b92a:	b29b      	uxth	r3, r3
1000b92c:	808b      	strh	r3, [r1, #4]
1000b92e:	e01c      	b.n	1000b96a <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO1->DATAOUT.reg &= ~(1 << (gpio_pin % 16));
1000b930:	490f      	ldr	r1, [pc, #60]	; (1000b970 <gpio_pin_set_output_level+0x84>)
1000b932:	888b      	ldrh	r3, [r1, #4]
1000b934:	220f      	movs	r2, #15
1000b936:	4010      	ands	r0, r2
1000b938:	3a0e      	subs	r2, #14
1000b93a:	4082      	lsls	r2, r0
1000b93c:	4393      	bics	r3, r2
1000b93e:	808b      	strh	r3, [r1, #4]
1000b940:	e013      	b.n	1000b96a <gpio_pin_set_output_level+0x7e>
		}
	} else {
		if(level) {
1000b942:	2900      	cmp	r1, #0
1000b944:	d009      	beq.n	1000b95a <gpio_pin_set_output_level+0x6e>
			GPIO2->DATAOUT.reg |= (1 << (gpio_pin % 16));
1000b946:	490b      	ldr	r1, [pc, #44]	; (1000b974 <gpio_pin_set_output_level+0x88>)
1000b948:	888c      	ldrh	r4, [r1, #4]
1000b94a:	220f      	movs	r2, #15
1000b94c:	4010      	ands	r0, r2
1000b94e:	2301      	movs	r3, #1
1000b950:	4083      	lsls	r3, r0
1000b952:	4323      	orrs	r3, r4
1000b954:	b29b      	uxth	r3, r3
1000b956:	808b      	strh	r3, [r1, #4]
1000b958:	e007      	b.n	1000b96a <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO2->DATAOUT.reg &= ~(1 << (gpio_pin % 16));
1000b95a:	4906      	ldr	r1, [pc, #24]	; (1000b974 <gpio_pin_set_output_level+0x88>)
1000b95c:	888b      	ldrh	r3, [r1, #4]
1000b95e:	220f      	movs	r2, #15
1000b960:	4010      	ands	r0, r2
1000b962:	3a0e      	subs	r2, #14
1000b964:	4082      	lsls	r2, r0
1000b966:	4393      	bics	r3, r2
1000b968:	808b      	strh	r3, [r1, #4]
		}
	}
}
1000b96a:	bd10      	pop	{r4, pc}
1000b96c:	40010000 	.word	0x40010000
1000b970:	40011000 	.word	0x40011000
1000b974:	40013000 	.word	0x40013000

1000b978 <gpio_pinmux_cofiguration>:
 *
 *  \param[in] gpio_pin   Index of the GPIO pin to toggle.
 *  \param[in] pinmux_sel PINMUX selection.
 */
void gpio_pinmux_cofiguration(const uint8_t gpio_pin, uint16_t pinmux_sel)
{
1000b978:	b570      	push	{r4, r5, r6, lr}
	uint8_t megamux_sel = (pinmux_sel >> 8) & 0xFF;
1000b97a:	0a0d      	lsrs	r5, r1, #8

	pinmux_sel &= 0xFF;
1000b97c:	23ff      	movs	r3, #255	; 0xff
1000b97e:	4019      	ands	r1, r3

	if (gpio_pin <= 7) {
1000b980:	2807      	cmp	r0, #7
1000b982:	d833      	bhi.n	1000b9ec <gpio_pinmux_cofiguration+0x74>
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000b984:	4a4e      	ldr	r2, [pc, #312]	; (1000bac0 <gpio_pinmux_cofiguration+0x148>)
1000b986:	6c54      	ldr	r4, [r2, #68]	; 0x44
1000b988:	3bf8      	subs	r3, #248	; 0xf8
1000b98a:	4003      	ands	r3, r0
1000b98c:	009b      	lsls	r3, r3, #2
1000b98e:	2607      	movs	r6, #7
1000b990:	409e      	lsls	r6, r3
1000b992:	43b4      	bics	r4, r6
1000b994:	6454      	str	r4, [r2, #68]	; 0x44
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000b996:	6c54      	ldr	r4, [r2, #68]	; 0x44
1000b998:	000e      	movs	r6, r1
1000b99a:	409e      	lsls	r6, r3
1000b99c:	0033      	movs	r3, r6
1000b99e:	4323      	orrs	r3, r4
1000b9a0:	6453      	str	r3, [r2, #68]	; 0x44
		if (pinmux_sel == 0x01) {
1000b9a2:	2901      	cmp	r1, #1
1000b9a4:	d000      	beq.n	1000b9a8 <gpio_pinmux_cofiguration+0x30>
1000b9a6:	e08a      	b.n	1000babe <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 3) {
1000b9a8:	2803      	cmp	r0, #3
1000b9aa:	d80f      	bhi.n	1000b9cc <gpio_pinmux_cofiguration+0x54>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000b9ac:	0011      	movs	r1, r2
1000b9ae:	22d0      	movs	r2, #208	; 0xd0
1000b9b0:	0052      	lsls	r2, r2, #1
1000b9b2:	588c      	ldr	r4, [r1, r2]
1000b9b4:	2303      	movs	r3, #3
1000b9b6:	4018      	ands	r0, r3
1000b9b8:	00c0      	lsls	r0, r0, #3
1000b9ba:	333c      	adds	r3, #60	; 0x3c
1000b9bc:	4083      	lsls	r3, r0
1000b9be:	439c      	bics	r4, r3
1000b9c0:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000b9c2:	588b      	ldr	r3, [r1, r2]
1000b9c4:	4085      	lsls	r5, r0
1000b9c6:	431d      	orrs	r5, r3
1000b9c8:	508d      	str	r5, [r1, r2]
1000b9ca:	e078      	b.n	1000babe <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 7) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000b9cc:	493c      	ldr	r1, [pc, #240]	; (1000bac0 <gpio_pinmux_cofiguration+0x148>)
1000b9ce:	22d2      	movs	r2, #210	; 0xd2
1000b9d0:	0052      	lsls	r2, r2, #1
1000b9d2:	588c      	ldr	r4, [r1, r2]
1000b9d4:	2303      	movs	r3, #3
1000b9d6:	4018      	ands	r0, r3
1000b9d8:	00c0      	lsls	r0, r0, #3
1000b9da:	333c      	adds	r3, #60	; 0x3c
1000b9dc:	4083      	lsls	r3, r0
1000b9de:	439c      	bics	r4, r3
1000b9e0:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000b9e2:	588b      	ldr	r3, [r1, r2]
1000b9e4:	4085      	lsls	r5, r0
1000b9e6:	431d      	orrs	r5, r3
1000b9e8:	508d      	str	r5, [r1, r2]
1000b9ea:	e068      	b.n	1000babe <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 15) {
1000b9ec:	280f      	cmp	r0, #15
1000b9ee:	d832      	bhi.n	1000ba56 <gpio_pinmux_cofiguration+0xde>
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000b9f0:	4a33      	ldr	r2, [pc, #204]	; (1000bac0 <gpio_pinmux_cofiguration+0x148>)
1000b9f2:	6c94      	ldr	r4, [r2, #72]	; 0x48
1000b9f4:	2307      	movs	r3, #7
1000b9f6:	4003      	ands	r3, r0
1000b9f8:	009b      	lsls	r3, r3, #2
1000b9fa:	2607      	movs	r6, #7
1000b9fc:	409e      	lsls	r6, r3
1000b9fe:	43b4      	bics	r4, r6
1000ba00:	6494      	str	r4, [r2, #72]	; 0x48
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000ba02:	6c94      	ldr	r4, [r2, #72]	; 0x48
1000ba04:	000e      	movs	r6, r1
1000ba06:	409e      	lsls	r6, r3
1000ba08:	0033      	movs	r3, r6
1000ba0a:	4323      	orrs	r3, r4
1000ba0c:	6493      	str	r3, [r2, #72]	; 0x48
		if (pinmux_sel == 0x01) {
1000ba0e:	2901      	cmp	r1, #1
1000ba10:	d155      	bne.n	1000babe <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 11) {
1000ba12:	280b      	cmp	r0, #11
1000ba14:	d80f      	bhi.n	1000ba36 <gpio_pinmux_cofiguration+0xbe>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000ba16:	0011      	movs	r1, r2
1000ba18:	22d4      	movs	r2, #212	; 0xd4
1000ba1a:	0052      	lsls	r2, r2, #1
1000ba1c:	588c      	ldr	r4, [r1, r2]
1000ba1e:	2303      	movs	r3, #3
1000ba20:	4018      	ands	r0, r3
1000ba22:	00c0      	lsls	r0, r0, #3
1000ba24:	333c      	adds	r3, #60	; 0x3c
1000ba26:	4083      	lsls	r3, r0
1000ba28:	439c      	bics	r4, r3
1000ba2a:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000ba2c:	588b      	ldr	r3, [r1, r2]
1000ba2e:	4085      	lsls	r5, r0
1000ba30:	431d      	orrs	r5, r3
1000ba32:	508d      	str	r5, [r1, r2]
1000ba34:	e043      	b.n	1000babe <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 15) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000ba36:	4922      	ldr	r1, [pc, #136]	; (1000bac0 <gpio_pinmux_cofiguration+0x148>)
1000ba38:	22d6      	movs	r2, #214	; 0xd6
1000ba3a:	0052      	lsls	r2, r2, #1
1000ba3c:	588c      	ldr	r4, [r1, r2]
1000ba3e:	2303      	movs	r3, #3
1000ba40:	4018      	ands	r0, r3
1000ba42:	00c0      	lsls	r0, r0, #3
1000ba44:	333c      	adds	r3, #60	; 0x3c
1000ba46:	4083      	lsls	r3, r0
1000ba48:	439c      	bics	r4, r3
1000ba4a:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000ba4c:	588b      	ldr	r3, [r1, r2]
1000ba4e:	4085      	lsls	r5, r0
1000ba50:	431d      	orrs	r5, r3
1000ba52:	508d      	str	r5, [r1, r2]
1000ba54:	e033      	b.n	1000babe <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 23) {
1000ba56:	2817      	cmp	r0, #23
1000ba58:	d831      	bhi.n	1000babe <gpio_pinmux_cofiguration+0x146>
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000ba5a:	4a19      	ldr	r2, [pc, #100]	; (1000bac0 <gpio_pinmux_cofiguration+0x148>)
1000ba5c:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
1000ba5e:	2307      	movs	r3, #7
1000ba60:	4003      	ands	r3, r0
1000ba62:	009b      	lsls	r3, r3, #2
1000ba64:	2607      	movs	r6, #7
1000ba66:	409e      	lsls	r6, r3
1000ba68:	43b4      	bics	r4, r6
1000ba6a:	64d4      	str	r4, [r2, #76]	; 0x4c
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000ba6c:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
1000ba6e:	000e      	movs	r6, r1
1000ba70:	409e      	lsls	r6, r3
1000ba72:	0033      	movs	r3, r6
1000ba74:	4323      	orrs	r3, r4
1000ba76:	64d3      	str	r3, [r2, #76]	; 0x4c
		if (pinmux_sel == 0x01) {
1000ba78:	2901      	cmp	r1, #1
1000ba7a:	d120      	bne.n	1000babe <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 19) {
1000ba7c:	2813      	cmp	r0, #19
1000ba7e:	d80f      	bhi.n	1000baa0 <gpio_pinmux_cofiguration+0x128>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000ba80:	0011      	movs	r1, r2
1000ba82:	22d8      	movs	r2, #216	; 0xd8
1000ba84:	0052      	lsls	r2, r2, #1
1000ba86:	588c      	ldr	r4, [r1, r2]
1000ba88:	2303      	movs	r3, #3
1000ba8a:	4018      	ands	r0, r3
1000ba8c:	00c0      	lsls	r0, r0, #3
1000ba8e:	333c      	adds	r3, #60	; 0x3c
1000ba90:	4083      	lsls	r3, r0
1000ba92:	439c      	bics	r4, r3
1000ba94:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000ba96:	588b      	ldr	r3, [r1, r2]
1000ba98:	4085      	lsls	r5, r0
1000ba9a:	431d      	orrs	r5, r3
1000ba9c:	508d      	str	r5, [r1, r2]
1000ba9e:	e00e      	b.n	1000babe <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 23) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000baa0:	4a07      	ldr	r2, [pc, #28]	; (1000bac0 <gpio_pinmux_cofiguration+0x148>)
1000baa2:	23da      	movs	r3, #218	; 0xda
1000baa4:	005b      	lsls	r3, r3, #1
1000baa6:	58d1      	ldr	r1, [r2, r3]
1000baa8:	2403      	movs	r4, #3
1000baaa:	4020      	ands	r0, r4
1000baac:	00c0      	lsls	r0, r0, #3
1000baae:	343c      	adds	r4, #60	; 0x3c
1000bab0:	4084      	lsls	r4, r0
1000bab2:	43a1      	bics	r1, r4
1000bab4:	50d1      	str	r1, [r2, r3]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000bab6:	58d1      	ldr	r1, [r2, r3]
1000bab8:	4085      	lsls	r5, r0
1000baba:	430d      	orrs	r5, r1
1000babc:	50d5      	str	r5, [r2, r3]
			}
		}
	}
}
1000babe:	bd70      	pop	{r4, r5, r6, pc}
1000bac0:	4000b000 	.word	0x4000b000

1000bac4 <gpio_register_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 *
 */
void gpio_register_callback(uint8_t gpio_pin, gpio_callback_t callback_func,
				enum gpio_callback callback_type)
{
1000bac4:	b5f0      	push	{r4, r5, r6, r7, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
		gpio_port = 0;
1000bac6:	2300      	movs	r3, #0
	Assert(callback_func);
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000bac8:	280f      	cmp	r0, #15
1000baca:	d904      	bls.n	1000bad6 <gpio_register_callback+0x12>
		gpio_port = 0;
	} else if (gpio_pin < 32) {
		gpio_port = 1;
	} else {
		gpio_port = 2;
1000bacc:	241f      	movs	r4, #31
1000bace:	4284      	cmp	r4, r0
1000bad0:	415b      	adcs	r3, r3
1000bad2:	3c1d      	subs	r4, #29
1000bad4:	1ae3      	subs	r3, r4, r3
	}
	switch (callback_type) {
1000bad6:	2a01      	cmp	r2, #1
1000bad8:	d016      	beq.n	1000bb08 <gpio_register_callback+0x44>
1000bada:	2a00      	cmp	r2, #0
1000badc:	d004      	beq.n	1000bae8 <gpio_register_callback+0x24>
1000bade:	2a02      	cmp	r2, #2
1000bae0:	d022      	beq.n	1000bb28 <gpio_register_callback+0x64>
1000bae2:	2a03      	cmp	r2, #3
1000bae4:	d030      	beq.n	1000bb48 <gpio_register_callback+0x84>
1000bae6:	e03e      	b.n	1000bb66 <gpio_register_callback+0xa2>
	case GPIO_CALLBACK_LOW:
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
1000bae8:	4e29      	ldr	r6, [pc, #164]	; (1000bb90 <gpio_register_callback+0xcc>)
1000baea:	00dc      	lsls	r4, r3, #3
1000baec:	18e2      	adds	r2, r4, r3
1000baee:	00d2      	lsls	r2, r2, #3
1000baf0:	5997      	ldr	r7, [r2, r6]
1000baf2:	250f      	movs	r5, #15
1000baf4:	4005      	ands	r5, r0
1000baf6:	2201      	movs	r2, #1
1000baf8:	40aa      	lsls	r2, r5
1000bafa:	b292      	uxth	r2, r2
1000bafc:	85ba      	strh	r2, [r7, #44]	; 0x2c
		_gpio_instances[gpio_port].hw->INTPOLCLR.reg = 1 << (gpio_pin % 16);
1000bafe:	18e4      	adds	r4, r4, r3
1000bb00:	00e4      	lsls	r4, r4, #3
1000bb02:	59a4      	ldr	r4, [r4, r6]
1000bb04:	86a2      	strh	r2, [r4, #52]	; 0x34
		break;
1000bb06:	e02e      	b.n	1000bb66 <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_HIGH:
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
1000bb08:	4e21      	ldr	r6, [pc, #132]	; (1000bb90 <gpio_register_callback+0xcc>)
1000bb0a:	00dc      	lsls	r4, r3, #3
1000bb0c:	18e2      	adds	r2, r4, r3
1000bb0e:	00d2      	lsls	r2, r2, #3
1000bb10:	5997      	ldr	r7, [r2, r6]
1000bb12:	250f      	movs	r5, #15
1000bb14:	4005      	ands	r5, r0
1000bb16:	2201      	movs	r2, #1
1000bb18:	40aa      	lsls	r2, r5
1000bb1a:	b292      	uxth	r2, r2
1000bb1c:	85ba      	strh	r2, [r7, #44]	; 0x2c
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
1000bb1e:	18e4      	adds	r4, r4, r3
1000bb20:	00e4      	lsls	r4, r4, #3
1000bb22:	59a4      	ldr	r4, [r4, r6]
1000bb24:	8622      	strh	r2, [r4, #48]	; 0x30
		break;
1000bb26:	e01e      	b.n	1000bb66 <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_RISING:
		_gpio_instances[gpio_port].hw->INTTYPESET.reg = 1 << (gpio_pin % 16);
1000bb28:	4e19      	ldr	r6, [pc, #100]	; (1000bb90 <gpio_register_callback+0xcc>)
1000bb2a:	00dc      	lsls	r4, r3, #3
1000bb2c:	18e2      	adds	r2, r4, r3
1000bb2e:	00d2      	lsls	r2, r2, #3
1000bb30:	5997      	ldr	r7, [r2, r6]
1000bb32:	250f      	movs	r5, #15
1000bb34:	4005      	ands	r5, r0
1000bb36:	2201      	movs	r2, #1
1000bb38:	40aa      	lsls	r2, r5
1000bb3a:	b292      	uxth	r2, r2
1000bb3c:	853a      	strh	r2, [r7, #40]	; 0x28
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
1000bb3e:	18e4      	adds	r4, r4, r3
1000bb40:	00e4      	lsls	r4, r4, #3
1000bb42:	59a4      	ldr	r4, [r4, r6]
1000bb44:	8622      	strh	r2, [r4, #48]	; 0x30
		break;
1000bb46:	e00e      	b.n	1000bb66 <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_FALLING:
		_gpio_instances[gpio_port].hw->INTTYPESET.reg = 1 << (gpio_pin % 16);
1000bb48:	4e11      	ldr	r6, [pc, #68]	; (1000bb90 <gpio_register_callback+0xcc>)
1000bb4a:	00dc      	lsls	r4, r3, #3
1000bb4c:	18e2      	adds	r2, r4, r3
1000bb4e:	00d2      	lsls	r2, r2, #3
1000bb50:	5997      	ldr	r7, [r2, r6]
1000bb52:	250f      	movs	r5, #15
1000bb54:	4005      	ands	r5, r0
1000bb56:	2201      	movs	r2, #1
1000bb58:	40aa      	lsls	r2, r5
1000bb5a:	b292      	uxth	r2, r2
1000bb5c:	853a      	strh	r2, [r7, #40]	; 0x28
		_gpio_instances[gpio_port].hw->INTPOLCLR.reg = (1 << (gpio_pin % 16));
1000bb5e:	18e4      	adds	r4, r4, r3
1000bb60:	00e4      	lsls	r4, r4, #3
1000bb62:	59a4      	ldr	r4, [r4, r6]
1000bb64:	86a2      	strh	r2, [r4, #52]	; 0x34

	case GPIO_CALLBACK_N:
		break;
	}
	/* Register callback function */
	_gpio_instances[gpio_port].callback[gpio_pin % 16] = callback_func;
1000bb66:	220f      	movs	r2, #15
1000bb68:	4010      	ands	r0, r2
1000bb6a:	4c09      	ldr	r4, [pc, #36]	; (1000bb90 <gpio_register_callback+0xcc>)
1000bb6c:	00dd      	lsls	r5, r3, #3
1000bb6e:	18ea      	adds	r2, r5, r3
1000bb70:	0052      	lsls	r2, r2, #1
1000bb72:	1812      	adds	r2, r2, r0
1000bb74:	0092      	lsls	r2, r2, #2
1000bb76:	18a2      	adds	r2, r4, r2
1000bb78:	6051      	str	r1, [r2, #4]
	/* Set the bit corresponding to the gpio pin */
	_gpio_instances[gpio_port].callback_reg_mask |= (1 << (gpio_pin % 16));
1000bb7a:	18ea      	adds	r2, r5, r3
1000bb7c:	00d2      	lsls	r2, r2, #3
1000bb7e:	18a2      	adds	r2, r4, r2
1000bb80:	3244      	adds	r2, #68	; 0x44
1000bb82:	2101      	movs	r1, #1
1000bb84:	4081      	lsls	r1, r0
1000bb86:	8813      	ldrh	r3, [r2, #0]
1000bb88:	430b      	orrs	r3, r1
1000bb8a:	8013      	strh	r3, [r2, #0]
}
1000bb8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000bb8e:	46c0      	nop			; (mov r8, r8)
1000bb90:	1001a63c 	.word	0x1001a63c

1000bb94 <gpio_enable_callback>:
 * conditions for the callback type are met.
 *
 * \param[in]  gpio_pin   GPIO pin
 */
void gpio_enable_callback(uint8_t gpio_pin)
{
1000bb94:	b530      	push	{r4, r5, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000bb96:	280f      	cmp	r0, #15
1000bb98:	d805      	bhi.n	1000bba6 <gpio_enable_callback+0x12>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000bb9a:	2280      	movs	r2, #128	; 0x80
1000bb9c:	0412      	lsls	r2, r2, #16
1000bb9e:	4b12      	ldr	r3, [pc, #72]	; (1000bbe8 <gpio_enable_callback+0x54>)
1000bba0:	601a      	str	r2, [r3, #0]
		gpio_port = 0;
1000bba2:	2200      	movs	r2, #0
1000bba4:	e00c      	b.n	1000bbc0 <gpio_enable_callback+0x2c>
		NVIC_EnableIRQ(GPIO0_IRQn);
	} else if (gpio_pin < 32) {
1000bba6:	281f      	cmp	r0, #31
1000bba8:	d805      	bhi.n	1000bbb6 <gpio_enable_callback+0x22>
1000bbaa:	2280      	movs	r2, #128	; 0x80
1000bbac:	0452      	lsls	r2, r2, #17
1000bbae:	4b0e      	ldr	r3, [pc, #56]	; (1000bbe8 <gpio_enable_callback+0x54>)
1000bbb0:	601a      	str	r2, [r3, #0]
		gpio_port = 1;
1000bbb2:	2201      	movs	r2, #1
1000bbb4:	e004      	b.n	1000bbc0 <gpio_enable_callback+0x2c>
1000bbb6:	2280      	movs	r2, #128	; 0x80
1000bbb8:	0492      	lsls	r2, r2, #18
1000bbba:	4b0b      	ldr	r3, [pc, #44]	; (1000bbe8 <gpio_enable_callback+0x54>)
1000bbbc:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(GPIO1_IRQn);
	} else {
		gpio_port = 2;
1000bbbe:	2202      	movs	r2, #2
		NVIC_EnableIRQ(GPIO2_IRQn);
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask |= (1 << (gpio_pin % 16));
1000bbc0:	230f      	movs	r3, #15
1000bbc2:	4018      	ands	r0, r3
1000bbc4:	2101      	movs	r1, #1
1000bbc6:	4081      	lsls	r1, r0
1000bbc8:	4c08      	ldr	r4, [pc, #32]	; (1000bbec <gpio_enable_callback+0x58>)
1000bbca:	00d5      	lsls	r5, r2, #3
1000bbcc:	18ab      	adds	r3, r5, r2
1000bbce:	00db      	lsls	r3, r3, #3
1000bbd0:	18e3      	adds	r3, r4, r3
1000bbd2:	3346      	adds	r3, #70	; 0x46
1000bbd4:	8818      	ldrh	r0, [r3, #0]
1000bbd6:	4308      	orrs	r0, r1
1000bbd8:	8018      	strh	r0, [r3, #0]
	_gpio_instances[gpio_port].hw->INTENSET.reg = (1 << (gpio_pin % 16));
1000bbda:	18aa      	adds	r2, r5, r2
1000bbdc:	00d2      	lsls	r2, r2, #3
1000bbde:	5913      	ldr	r3, [r2, r4]
1000bbe0:	b289      	uxth	r1, r1
1000bbe2:	8419      	strh	r1, [r3, #32]
}
1000bbe4:	bd30      	pop	{r4, r5, pc}
1000bbe6:	46c0      	nop			; (mov r8, r8)
1000bbe8:	e000e100 	.word	0xe000e100
1000bbec:	1001a63c 	.word	0x1001a63c

1000bbf0 <gpio_disable_callback>:
 * The callback function will not be called from the interrupt handler.
 *
 * \param[in]  gpio_pin   GPIO pin
 */
void gpio_disable_callback(uint8_t gpio_pin)
{
1000bbf0:	b530      	push	{r4, r5, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
		gpio_port = 0;
1000bbf2:	2300      	movs	r3, #0
{
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000bbf4:	280f      	cmp	r0, #15
1000bbf6:	d904      	bls.n	1000bc02 <gpio_disable_callback+0x12>
		gpio_port = 0;
	} else if (gpio_pin < 32) {
		gpio_port = 1;
	} else {
		gpio_port = 2;
1000bbf8:	221f      	movs	r2, #31
1000bbfa:	4282      	cmp	r2, r0
1000bbfc:	415b      	adcs	r3, r3
1000bbfe:	3a1d      	subs	r2, #29
1000bc00:	1ad3      	subs	r3, r2, r3
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask &= ~(1 << (gpio_pin % 16));
1000bc02:	220f      	movs	r2, #15
1000bc04:	4010      	ands	r0, r2
1000bc06:	2101      	movs	r1, #1
1000bc08:	4081      	lsls	r1, r0
1000bc0a:	4c07      	ldr	r4, [pc, #28]	; (1000bc28 <gpio_disable_callback+0x38>)
1000bc0c:	00dd      	lsls	r5, r3, #3
1000bc0e:	18ea      	adds	r2, r5, r3
1000bc10:	00d2      	lsls	r2, r2, #3
1000bc12:	18a2      	adds	r2, r4, r2
1000bc14:	3246      	adds	r2, #70	; 0x46
1000bc16:	8810      	ldrh	r0, [r2, #0]
1000bc18:	4388      	bics	r0, r1
1000bc1a:	8010      	strh	r0, [r2, #0]
	_gpio_instances[gpio_port].hw->INTENCLR.reg = (1 << (gpio_pin % 16));
1000bc1c:	18eb      	adds	r3, r5, r3
1000bc1e:	00db      	lsls	r3, r3, #3
1000bc20:	591b      	ldr	r3, [r3, r4]
1000bc22:	b289      	uxth	r1, r1
1000bc24:	8499      	strh	r1, [r3, #36]	; 0x24
}
1000bc26:	bd30      	pop	{r4, r5, pc}
1000bc28:	1001a63c 	.word	0x1001a63c

1000bc2c <gpio_init>:
 *
 * This function will init GPIO callback.
 *
 */
void gpio_init(void)
{
1000bc2c:	b510      	push	{r4, lr}
1000bc2e:	4a11      	ldr	r2, [pc, #68]	; (1000bc74 <gpio_init+0x48>)
1000bc30:	0010      	movs	r0, r2
1000bc32:	30d8      	adds	r0, #216	; 0xd8
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
			_gpio_instances[i].callback[j] = NULL;
1000bc34:	2100      	movs	r1, #0
1000bc36:	e007      	b.n	1000bc48 <gpio_init+0x1c>
1000bc38:	c302      	stmia	r3!, {r1}
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
1000bc3a:	4293      	cmp	r3, r2
1000bc3c:	d1fc      	bne.n	1000bc38 <gpio_init+0xc>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
1000bc3e:	8051      	strh	r1, [r2, #2]
		_gpio_instances[i].callback_reg_mask = 0;
1000bc40:	8011      	strh	r1, [r2, #0]
1000bc42:	3248      	adds	r2, #72	; 0x48
 */
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
1000bc44:	4282      	cmp	r2, r0
1000bc46:	d002      	beq.n	1000bc4e <gpio_init+0x22>
1000bc48:	0013      	movs	r3, r2
1000bc4a:	3b40      	subs	r3, #64	; 0x40
1000bc4c:	e7f4      	b.n	1000bc38 <gpio_init+0xc>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
		_gpio_instances[i].callback_reg_mask = 0;
	}
	_gpio_instances[0].hw = (void *)GPIO0;
1000bc4e:	4b0a      	ldr	r3, [pc, #40]	; (1000bc78 <gpio_init+0x4c>)
1000bc50:	4a0a      	ldr	r2, [pc, #40]	; (1000bc7c <gpio_init+0x50>)
1000bc52:	601a      	str	r2, [r3, #0]
	_gpio_instances[1].hw = (void *)GPIO1;
1000bc54:	4a0a      	ldr	r2, [pc, #40]	; (1000bc80 <gpio_init+0x54>)
1000bc56:	649a      	str	r2, [r3, #72]	; 0x48
	_gpio_instances[2].hw = (void *)GPIO2;
1000bc58:	490a      	ldr	r1, [pc, #40]	; (1000bc84 <gpio_init+0x58>)
1000bc5a:	2290      	movs	r2, #144	; 0x90
1000bc5c:	5099      	str	r1, [r3, r2]
	system_register_isr(RAM_ISR_TABLE_PORT0_COMB_INDEX, (uint32_t)gpio_port0_isr_handler);
1000bc5e:	490a      	ldr	r1, [pc, #40]	; (1000bc88 <gpio_init+0x5c>)
1000bc60:	2027      	movs	r0, #39	; 0x27
1000bc62:	4c0a      	ldr	r4, [pc, #40]	; (1000bc8c <gpio_init+0x60>)
1000bc64:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT1_COMB_INDEX, (uint32_t)gpio_port1_isr_handler);
1000bc66:	490a      	ldr	r1, [pc, #40]	; (1000bc90 <gpio_init+0x64>)
1000bc68:	2028      	movs	r0, #40	; 0x28
1000bc6a:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT2_COMB_INDEX, (uint32_t)gpio_port2_isr_handler);
1000bc6c:	4909      	ldr	r1, [pc, #36]	; (1000bc94 <gpio_init+0x68>)
1000bc6e:	2029      	movs	r0, #41	; 0x29
1000bc70:	47a0      	blx	r4
}
1000bc72:	bd10      	pop	{r4, pc}
1000bc74:	1001a680 	.word	0x1001a680
1000bc78:	1001a63c 	.word	0x1001a63c
1000bc7c:	40010000 	.word	0x40010000
1000bc80:	40011000 	.word	0x40011000
1000bc84:	40013000 	.word	0x40013000
1000bc88:	1000b535 	.word	0x1000b535
1000bc8c:	1000c859 	.word	0x1000c859
1000bc90:	1000b599 	.word	0x1000b599
1000bc94:	1000b609 	.word	0x1000b609

1000bc98 <system_clock_config>:
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_config(enum system_clock_resource resoure, \
				enum system_clock_freq freq)
{
	switch (resoure) {
1000bc98:	2801      	cmp	r0, #1
1000bc9a:	d00d      	beq.n	1000bcb8 <system_clock_config+0x20>
1000bc9c:	2800      	cmp	r0, #0
1000bc9e:	d002      	beq.n	1000bca6 <system_clock_config+0xe>
1000bca0:	2802      	cmp	r0, #2
1000bca2:	d01c      	beq.n	1000bcde <system_clock_config+0x46>
1000bca4:	e02e      	b.n	1000bd04 <system_clock_config+0x6c>
		case CLOCK_RESOURCE_XO_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000bca6:	4a18      	ldr	r2, [pc, #96]	; (1000bd08 <system_clock_config+0x70>)
1000bca8:	6990      	ldr	r0, [r2, #24]
1000bcaa:	230c      	movs	r3, #12
1000bcac:	4303      	orrs	r3, r0
1000bcae:	6193      	str	r3, [r2, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			system_clock_value = 26000000;
1000bcb0:	4a16      	ldr	r2, [pc, #88]	; (1000bd0c <system_clock_config+0x74>)
1000bcb2:	4b17      	ldr	r3, [pc, #92]	; (1000bd10 <system_clock_config+0x78>)
1000bcb4:	601a      	str	r2, [r3, #0]
			break;
1000bcb6:	e01a      	b.n	1000bcee <system_clock_config+0x56>

		case CLOCK_RESOURCE_LP_2_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000bcb8:	4b13      	ldr	r3, [pc, #76]	; (1000bd08 <system_clock_config+0x70>)
1000bcba:	6998      	ldr	r0, [r3, #24]
1000bcbc:	2208      	movs	r2, #8
1000bcbe:	4302      	orrs	r2, r0
1000bcc0:	619a      	str	r2, [r3, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000bcc2:	699a      	ldr	r2, [r3, #24]
1000bcc4:	2004      	movs	r0, #4
1000bcc6:	4382      	bics	r2, r0
1000bcc8:	619a      	str	r2, [r3, #24]
					~LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK;
			AON_GP_REGS0->AON_PMU_CTRL.reg |= \
1000bcca:	4a12      	ldr	r2, [pc, #72]	; (1000bd14 <system_clock_config+0x7c>)
1000bccc:	6853      	ldr	r3, [r2, #4]
1000bcce:	2080      	movs	r0, #128	; 0x80
1000bcd0:	0300      	lsls	r0, r0, #12
1000bcd2:	4303      	orrs	r3, r0
1000bcd4:	6053      	str	r3, [r2, #4]
					AON_GP_REGS_AON_PMU_CTRL_PMU_2MHZ_CLK_EN;
			system_clock_value = 2000000;
1000bcd6:	4a10      	ldr	r2, [pc, #64]	; (1000bd18 <system_clock_config+0x80>)
1000bcd8:	4b0d      	ldr	r3, [pc, #52]	; (1000bd10 <system_clock_config+0x78>)
1000bcda:	601a      	str	r2, [r3, #0]
			break;
1000bcdc:	e007      	b.n	1000bcee <system_clock_config+0x56>

		case CLOCK_RESOURCE_RC_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000bcde:	4a0a      	ldr	r2, [pc, #40]	; (1000bd08 <system_clock_config+0x70>)
1000bce0:	6993      	ldr	r3, [r2, #24]
1000bce2:	200c      	movs	r0, #12
1000bce4:	4383      	bics	r3, r0
1000bce6:	6193      	str	r3, [r2, #24]
					~(LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
1000bce8:	4a08      	ldr	r2, [pc, #32]	; (1000bd0c <system_clock_config+0x74>)
1000bcea:	4b09      	ldr	r3, [pc, #36]	; (1000bd10 <system_clock_config+0x78>)
1000bcec:	601a      	str	r2, [r3, #0]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000bcee:	4b06      	ldr	r3, [pc, #24]	; (1000bd08 <system_clock_config+0x70>)
1000bcf0:	699a      	ldr	r2, [r3, #24]
1000bcf2:	2003      	movs	r0, #3
1000bcf4:	4382      	bics	r2, r0
1000bcf6:	619a      	str	r2, [r3, #24]
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000bcf8:	699a      	ldr	r2, [r3, #24]
1000bcfa:	4001      	ands	r1, r0
1000bcfc:	4311      	orrs	r1, r2
1000bcfe:	6199      	str	r1, [r3, #24]
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
1000bd00:	2000      	movs	r0, #0
1000bd02:	e000      	b.n	1000bd06 <system_clock_config+0x6e>
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
			break;

		default:
			return STATUS_ERR_INVALID_ARG;
1000bd04:	2017      	movs	r0, #23
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
}
1000bd06:	4770      	bx	lr
1000bd08:	4000b000 	.word	0x4000b000
1000bd0c:	018cba80 	.word	0x018cba80
1000bd10:	1001a714 	.word	0x1001a714
1000bd14:	4000f000 	.word	0x4000f000
1000bd18:	001e8480 	.word	0x001e8480

1000bd1c <system_clock_get_value>:
 *
 * \return system clock value.
 */
uint32_t system_clock_get_value(void)
{
	return system_clock_value;
1000bd1c:	4b01      	ldr	r3, [pc, #4]	; (1000bd24 <system_clock_get_value+0x8>)
1000bd1e:	6818      	ldr	r0, [r3, #0]
}
1000bd20:	4770      	bx	lr
1000bd22:	46c0      	nop			; (mov r8, r8)
1000bd24:	1001a714 	.word	0x1001a714

1000bd28 <system_clock_peripheral_enable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_enable(enum system_peripheral peripheral)
{
1000bd28:	b500      	push	{lr}
	switch (peripheral) {
1000bd2a:	2835      	cmp	r0, #53	; 0x35
1000bd2c:	d900      	bls.n	1000bd30 <system_clock_peripheral_enable+0x8>
1000bd2e:	e1a2      	b.n	1000c076 <system_clock_peripheral_enable+0x34e>
1000bd30:	0080      	lsls	r0, r0, #2
1000bd32:	4bd2      	ldr	r3, [pc, #840]	; (1000c07c <system_clock_peripheral_enable+0x354>)
1000bd34:	581b      	ldr	r3, [r3, r0]
1000bd36:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bd38:	4ad1      	ldr	r2, [pc, #836]	; (1000c080 <system_clock_peripheral_enable+0x358>)
1000bd3a:	68d1      	ldr	r1, [r2, #12]
1000bd3c:	2302      	movs	r3, #2
1000bd3e:	430b      	orrs	r3, r1
1000bd40:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bd42:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;
1000bd44:	e198      	b.n	1000c078 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bd46:	4ace      	ldr	r2, [pc, #824]	; (1000c080 <system_clock_peripheral_enable+0x358>)
1000bd48:	68d1      	ldr	r1, [r2, #12]
1000bd4a:	2304      	movs	r3, #4
1000bd4c:	430b      	orrs	r3, r1
1000bd4e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bd50:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;
1000bd52:	e191      	b.n	1000c078 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bd54:	4aca      	ldr	r2, [pc, #808]	; (1000c080 <system_clock_peripheral_enable+0x358>)
1000bd56:	68d1      	ldr	r1, [r2, #12]
1000bd58:	2308      	movs	r3, #8
1000bd5a:	430b      	orrs	r3, r1
1000bd5c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bd5e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;
1000bd60:	e18a      	b.n	1000c078 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bd62:	4ac7      	ldr	r2, [pc, #796]	; (1000c080 <system_clock_peripheral_enable+0x358>)
1000bd64:	68d1      	ldr	r1, [r2, #12]
1000bd66:	2310      	movs	r3, #16
1000bd68:	430b      	orrs	r3, r1
1000bd6a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bd6c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;
1000bd6e:	e183      	b.n	1000c078 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bd70:	4ac3      	ldr	r2, [pc, #780]	; (1000c080 <system_clock_peripheral_enable+0x358>)
1000bd72:	68d1      	ldr	r1, [r2, #12]
1000bd74:	2320      	movs	r3, #32
1000bd76:	430b      	orrs	r3, r1
1000bd78:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bd7a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;
1000bd7c:	e17c      	b.n	1000c078 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bd7e:	4ac0      	ldr	r2, [pc, #768]	; (1000c080 <system_clock_peripheral_enable+0x358>)
1000bd80:	68d1      	ldr	r1, [r2, #12]
1000bd82:	2380      	movs	r3, #128	; 0x80
1000bd84:	430b      	orrs	r3, r1
1000bd86:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bd88:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
1000bd8a:	e175      	b.n	1000c078 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bd8c:	4abc      	ldr	r2, [pc, #752]	; (1000c080 <system_clock_peripheral_enable+0x358>)
1000bd8e:	68d3      	ldr	r3, [r2, #12]
1000bd90:	2180      	movs	r1, #128	; 0x80
1000bd92:	0049      	lsls	r1, r1, #1
1000bd94:	430b      	orrs	r3, r1
1000bd96:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bd98:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN;
		break;
1000bd9a:	e16d      	b.n	1000c078 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bd9c:	4ab8      	ldr	r2, [pc, #736]	; (1000c080 <system_clock_peripheral_enable+0x358>)
1000bd9e:	68d3      	ldr	r3, [r2, #12]
1000bda0:	2180      	movs	r1, #128	; 0x80
1000bda2:	0109      	lsls	r1, r1, #4
1000bda4:	430b      	orrs	r3, r1
1000bda6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bda8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN;
		break;
1000bdaa:	e165      	b.n	1000c078 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bdac:	4ab4      	ldr	r2, [pc, #720]	; (1000c080 <system_clock_peripheral_enable+0x358>)
1000bdae:	68d3      	ldr	r3, [r2, #12]
1000bdb0:	2180      	movs	r1, #128	; 0x80
1000bdb2:	0149      	lsls	r1, r1, #5
1000bdb4:	430b      	orrs	r3, r1
1000bdb6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bdb8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN;
		break;
1000bdba:	e15d      	b.n	1000c078 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bdbc:	4ab0      	ldr	r2, [pc, #704]	; (1000c080 <system_clock_peripheral_enable+0x358>)
1000bdbe:	68d3      	ldr	r3, [r2, #12]
1000bdc0:	2180      	movs	r1, #128	; 0x80
1000bdc2:	0189      	lsls	r1, r1, #6
1000bdc4:	430b      	orrs	r3, r1
1000bdc6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bdc8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN;
		break;
1000bdca:	e155      	b.n	1000c078 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bdcc:	4aac      	ldr	r2, [pc, #688]	; (1000c080 <system_clock_peripheral_enable+0x358>)
1000bdce:	68d3      	ldr	r3, [r2, #12]
1000bdd0:	2180      	movs	r1, #128	; 0x80
1000bdd2:	01c9      	lsls	r1, r1, #7
1000bdd4:	430b      	orrs	r3, r1
1000bdd6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bdd8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN;
		break;
1000bdda:	e14d      	b.n	1000c078 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bddc:	4aa8      	ldr	r2, [pc, #672]	; (1000c080 <system_clock_peripheral_enable+0x358>)
1000bdde:	68d3      	ldr	r3, [r2, #12]
1000bde0:	2180      	movs	r1, #128	; 0x80
1000bde2:	0209      	lsls	r1, r1, #8
1000bde4:	430b      	orrs	r3, r1
1000bde6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bde8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN;
		break;
1000bdea:	e145      	b.n	1000c078 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bdec:	4aa4      	ldr	r2, [pc, #656]	; (1000c080 <system_clock_peripheral_enable+0x358>)
1000bdee:	68d3      	ldr	r3, [r2, #12]
1000bdf0:	2180      	movs	r1, #128	; 0x80
1000bdf2:	0249      	lsls	r1, r1, #9
1000bdf4:	430b      	orrs	r3, r1
1000bdf6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bdf8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN;
		break;
1000bdfa:	e13d      	b.n	1000c078 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bdfc:	4aa0      	ldr	r2, [pc, #640]	; (1000c080 <system_clock_peripheral_enable+0x358>)
1000bdfe:	68d3      	ldr	r3, [r2, #12]
1000be00:	2180      	movs	r1, #128	; 0x80
1000be02:	0289      	lsls	r1, r1, #10
1000be04:	430b      	orrs	r3, r1
1000be06:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000be08:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
1000be0a:	e135      	b.n	1000c078 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000be0c:	4a9c      	ldr	r2, [pc, #624]	; (1000c080 <system_clock_peripheral_enable+0x358>)
1000be0e:	68d3      	ldr	r3, [r2, #12]
1000be10:	2180      	movs	r1, #128	; 0x80
1000be12:	02c9      	lsls	r1, r1, #11
1000be14:	430b      	orrs	r3, r1
1000be16:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000be18:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
1000be1a:	e12d      	b.n	1000c078 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000be1c:	4a98      	ldr	r2, [pc, #608]	; (1000c080 <system_clock_peripheral_enable+0x358>)
1000be1e:	68d3      	ldr	r3, [r2, #12]
1000be20:	2180      	movs	r1, #128	; 0x80
1000be22:	0309      	lsls	r1, r1, #12
1000be24:	430b      	orrs	r3, r1
1000be26:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000be28:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
1000be2a:	e125      	b.n	1000c078 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000be2c:	4a94      	ldr	r2, [pc, #592]	; (1000c080 <system_clock_peripheral_enable+0x358>)
1000be2e:	68d3      	ldr	r3, [r2, #12]
1000be30:	2180      	movs	r1, #128	; 0x80
1000be32:	0349      	lsls	r1, r1, #13
1000be34:	430b      	orrs	r3, r1
1000be36:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000be38:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
1000be3a:	e11d      	b.n	1000c078 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000be3c:	4a90      	ldr	r2, [pc, #576]	; (1000c080 <system_clock_peripheral_enable+0x358>)
1000be3e:	68d3      	ldr	r3, [r2, #12]
1000be40:	2180      	movs	r1, #128	; 0x80
1000be42:	0389      	lsls	r1, r1, #14
1000be44:	430b      	orrs	r3, r1
1000be46:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000be48:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
1000be4a:	e115      	b.n	1000c078 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000be4c:	4a8c      	ldr	r2, [pc, #560]	; (1000c080 <system_clock_peripheral_enable+0x358>)
1000be4e:	68d3      	ldr	r3, [r2, #12]
1000be50:	2180      	movs	r1, #128	; 0x80
1000be52:	03c9      	lsls	r1, r1, #15
1000be54:	430b      	orrs	r3, r1
1000be56:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000be58:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
1000be5a:	e10d      	b.n	1000c078 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000be5c:	4a88      	ldr	r2, [pc, #544]	; (1000c080 <system_clock_peripheral_enable+0x358>)
1000be5e:	68d3      	ldr	r3, [r2, #12]
1000be60:	2180      	movs	r1, #128	; 0x80
1000be62:	0409      	lsls	r1, r1, #16
1000be64:	430b      	orrs	r3, r1
1000be66:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000be68:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
1000be6a:	e105      	b.n	1000c078 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000be6c:	4a84      	ldr	r2, [pc, #528]	; (1000c080 <system_clock_peripheral_enable+0x358>)
1000be6e:	68d3      	ldr	r3, [r2, #12]
1000be70:	2180      	movs	r1, #128	; 0x80
1000be72:	0449      	lsls	r1, r1, #17
1000be74:	430b      	orrs	r3, r1
1000be76:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000be78:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
1000be7a:	e0fd      	b.n	1000c078 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000be7c:	4a80      	ldr	r2, [pc, #512]	; (1000c080 <system_clock_peripheral_enable+0x358>)
1000be7e:	68d3      	ldr	r3, [r2, #12]
1000be80:	2180      	movs	r1, #128	; 0x80
1000be82:	0489      	lsls	r1, r1, #18
1000be84:	430b      	orrs	r3, r1
1000be86:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000be88:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
1000be8a:	e0f5      	b.n	1000c078 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000be8c:	4a7c      	ldr	r2, [pc, #496]	; (1000c080 <system_clock_peripheral_enable+0x358>)
1000be8e:	68d3      	ldr	r3, [r2, #12]
1000be90:	2180      	movs	r1, #128	; 0x80
1000be92:	04c9      	lsls	r1, r1, #19
1000be94:	430b      	orrs	r3, r1
1000be96:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000be98:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN;
		break;
1000be9a:	e0ed      	b.n	1000c078 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000be9c:	4a78      	ldr	r2, [pc, #480]	; (1000c080 <system_clock_peripheral_enable+0x358>)
1000be9e:	68d3      	ldr	r3, [r2, #12]
1000bea0:	2180      	movs	r1, #128	; 0x80
1000bea2:	0509      	lsls	r1, r1, #20
1000bea4:	430b      	orrs	r3, r1
1000bea6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bea8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN;
		break;
1000beaa:	e0e5      	b.n	1000c078 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000beac:	4a74      	ldr	r2, [pc, #464]	; (1000c080 <system_clock_peripheral_enable+0x358>)
1000beae:	68d3      	ldr	r3, [r2, #12]
1000beb0:	2180      	movs	r1, #128	; 0x80
1000beb2:	0549      	lsls	r1, r1, #21
1000beb4:	430b      	orrs	r3, r1
1000beb6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000beb8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN;
		break;
1000beba:	e0dd      	b.n	1000c078 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bebc:	4a70      	ldr	r2, [pc, #448]	; (1000c080 <system_clock_peripheral_enable+0x358>)
1000bebe:	68d3      	ldr	r3, [r2, #12]
1000bec0:	2180      	movs	r1, #128	; 0x80
1000bec2:	0589      	lsls	r1, r1, #22
1000bec4:	430b      	orrs	r3, r1
1000bec6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bec8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN;
		break;
1000beca:	e0d5      	b.n	1000c078 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000becc:	4a6c      	ldr	r2, [pc, #432]	; (1000c080 <system_clock_peripheral_enable+0x358>)
1000bece:	68d3      	ldr	r3, [r2, #12]
1000bed0:	2180      	movs	r1, #128	; 0x80
1000bed2:	05c9      	lsls	r1, r1, #23
1000bed4:	430b      	orrs	r3, r1
1000bed6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bed8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
1000beda:	e0cd      	b.n	1000c078 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bedc:	4a68      	ldr	r2, [pc, #416]	; (1000c080 <system_clock_peripheral_enable+0x358>)
1000bede:	6911      	ldr	r1, [r2, #16]
1000bee0:	2301      	movs	r3, #1
1000bee2:	430b      	orrs	r3, r1
1000bee4:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bee6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;
1000bee8:	e0c6      	b.n	1000c078 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000beea:	4a65      	ldr	r2, [pc, #404]	; (1000c080 <system_clock_peripheral_enable+0x358>)
1000beec:	6911      	ldr	r1, [r2, #16]
1000beee:	2302      	movs	r3, #2
1000bef0:	430b      	orrs	r3, r1
1000bef2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bef4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;
1000bef6:	e0bf      	b.n	1000c078 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bef8:	4a61      	ldr	r2, [pc, #388]	; (1000c080 <system_clock_peripheral_enable+0x358>)
1000befa:	6911      	ldr	r1, [r2, #16]
1000befc:	2304      	movs	r3, #4
1000befe:	430b      	orrs	r3, r1
1000bf00:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bf02:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;
1000bf04:	e0b8      	b.n	1000c078 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bf06:	4a5e      	ldr	r2, [pc, #376]	; (1000c080 <system_clock_peripheral_enable+0x358>)
1000bf08:	6911      	ldr	r1, [r2, #16]
1000bf0a:	2308      	movs	r3, #8
1000bf0c:	430b      	orrs	r3, r1
1000bf0e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bf10:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;
1000bf12:	e0b1      	b.n	1000c078 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bf14:	4a5a      	ldr	r2, [pc, #360]	; (1000c080 <system_clock_peripheral_enable+0x358>)
1000bf16:	6911      	ldr	r1, [r2, #16]
1000bf18:	2310      	movs	r3, #16
1000bf1a:	430b      	orrs	r3, r1
1000bf1c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bf1e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;
1000bf20:	e0aa      	b.n	1000c078 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bf22:	4a57      	ldr	r2, [pc, #348]	; (1000c080 <system_clock_peripheral_enable+0x358>)
1000bf24:	6911      	ldr	r1, [r2, #16]
1000bf26:	2320      	movs	r3, #32
1000bf28:	430b      	orrs	r3, r1
1000bf2a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bf2c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;
1000bf2e:	e0a3      	b.n	1000c078 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bf30:	4a53      	ldr	r2, [pc, #332]	; (1000c080 <system_clock_peripheral_enable+0x358>)
1000bf32:	6911      	ldr	r1, [r2, #16]
1000bf34:	2340      	movs	r3, #64	; 0x40
1000bf36:	430b      	orrs	r3, r1
1000bf38:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bf3a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;
1000bf3c:	e09c      	b.n	1000c078 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bf3e:	4a50      	ldr	r2, [pc, #320]	; (1000c080 <system_clock_peripheral_enable+0x358>)
1000bf40:	6911      	ldr	r1, [r2, #16]
1000bf42:	2380      	movs	r3, #128	; 0x80
1000bf44:	430b      	orrs	r3, r1
1000bf46:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bf48:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN;
		break;
1000bf4a:	e095      	b.n	1000c078 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bf4c:	4a4c      	ldr	r2, [pc, #304]	; (1000c080 <system_clock_peripheral_enable+0x358>)
1000bf4e:	6913      	ldr	r3, [r2, #16]
1000bf50:	2180      	movs	r1, #128	; 0x80
1000bf52:	0049      	lsls	r1, r1, #1
1000bf54:	430b      	orrs	r3, r1
1000bf56:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bf58:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN;
		break;
1000bf5a:	e08d      	b.n	1000c078 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bf5c:	4a48      	ldr	r2, [pc, #288]	; (1000c080 <system_clock_peripheral_enable+0x358>)
1000bf5e:	6913      	ldr	r3, [r2, #16]
1000bf60:	2180      	movs	r1, #128	; 0x80
1000bf62:	0089      	lsls	r1, r1, #2
1000bf64:	430b      	orrs	r3, r1
1000bf66:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bf68:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN;
		break;
1000bf6a:	e085      	b.n	1000c078 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bf6c:	4a44      	ldr	r2, [pc, #272]	; (1000c080 <system_clock_peripheral_enable+0x358>)
1000bf6e:	6913      	ldr	r3, [r2, #16]
1000bf70:	2180      	movs	r1, #128	; 0x80
1000bf72:	00c9      	lsls	r1, r1, #3
1000bf74:	430b      	orrs	r3, r1
1000bf76:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bf78:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
1000bf7a:	e07d      	b.n	1000c078 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bf7c:	4a40      	ldr	r2, [pc, #256]	; (1000c080 <system_clock_peripheral_enable+0x358>)
1000bf7e:	6913      	ldr	r3, [r2, #16]
1000bf80:	2180      	movs	r1, #128	; 0x80
1000bf82:	0109      	lsls	r1, r1, #4
1000bf84:	430b      	orrs	r3, r1
1000bf86:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bf88:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
1000bf8a:	e075      	b.n	1000c078 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bf8c:	4a3c      	ldr	r2, [pc, #240]	; (1000c080 <system_clock_peripheral_enable+0x358>)
1000bf8e:	6913      	ldr	r3, [r2, #16]
1000bf90:	2180      	movs	r1, #128	; 0x80
1000bf92:	0149      	lsls	r1, r1, #5
1000bf94:	430b      	orrs	r3, r1
1000bf96:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bf98:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
1000bf9a:	e06d      	b.n	1000c078 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bf9c:	4a38      	ldr	r2, [pc, #224]	; (1000c080 <system_clock_peripheral_enable+0x358>)
1000bf9e:	6913      	ldr	r3, [r2, #16]
1000bfa0:	2180      	movs	r1, #128	; 0x80
1000bfa2:	0189      	lsls	r1, r1, #6
1000bfa4:	430b      	orrs	r3, r1
1000bfa6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bfa8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
1000bfaa:	e065      	b.n	1000c078 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bfac:	4a34      	ldr	r2, [pc, #208]	; (1000c080 <system_clock_peripheral_enable+0x358>)
1000bfae:	6913      	ldr	r3, [r2, #16]
1000bfb0:	2180      	movs	r1, #128	; 0x80
1000bfb2:	01c9      	lsls	r1, r1, #7
1000bfb4:	430b      	orrs	r3, r1
1000bfb6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bfb8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN;
		break;
1000bfba:	e05d      	b.n	1000c078 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bfbc:	4a30      	ldr	r2, [pc, #192]	; (1000c080 <system_clock_peripheral_enable+0x358>)
1000bfbe:	6913      	ldr	r3, [r2, #16]
1000bfc0:	2180      	movs	r1, #128	; 0x80
1000bfc2:	0209      	lsls	r1, r1, #8
1000bfc4:	430b      	orrs	r3, r1
1000bfc6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bfc8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
1000bfca:	e055      	b.n	1000c078 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bfcc:	4a2c      	ldr	r2, [pc, #176]	; (1000c080 <system_clock_peripheral_enable+0x358>)
1000bfce:	6913      	ldr	r3, [r2, #16]
1000bfd0:	2180      	movs	r1, #128	; 0x80
1000bfd2:	0249      	lsls	r1, r1, #9
1000bfd4:	430b      	orrs	r3, r1
1000bfd6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bfd8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
1000bfda:	e04d      	b.n	1000c078 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bfdc:	4a28      	ldr	r2, [pc, #160]	; (1000c080 <system_clock_peripheral_enable+0x358>)
1000bfde:	6913      	ldr	r3, [r2, #16]
1000bfe0:	2180      	movs	r1, #128	; 0x80
1000bfe2:	0289      	lsls	r1, r1, #10
1000bfe4:	430b      	orrs	r3, r1
1000bfe6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bfe8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
1000bfea:	e045      	b.n	1000c078 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bfec:	4a24      	ldr	r2, [pc, #144]	; (1000c080 <system_clock_peripheral_enable+0x358>)
1000bfee:	6913      	ldr	r3, [r2, #16]
1000bff0:	2180      	movs	r1, #128	; 0x80
1000bff2:	02c9      	lsls	r1, r1, #11
1000bff4:	430b      	orrs	r3, r1
1000bff6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bff8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
1000bffa:	e03d      	b.n	1000c078 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bffc:	4a20      	ldr	r2, [pc, #128]	; (1000c080 <system_clock_peripheral_enable+0x358>)
1000bffe:	6913      	ldr	r3, [r2, #16]
1000c000:	2180      	movs	r1, #128	; 0x80
1000c002:	0309      	lsls	r1, r1, #12
1000c004:	430b      	orrs	r3, r1
1000c006:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c008:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
1000c00a:	e035      	b.n	1000c078 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c00c:	4a1c      	ldr	r2, [pc, #112]	; (1000c080 <system_clock_peripheral_enable+0x358>)
1000c00e:	6913      	ldr	r3, [r2, #16]
1000c010:	2180      	movs	r1, #128	; 0x80
1000c012:	0349      	lsls	r1, r1, #13
1000c014:	430b      	orrs	r3, r1
1000c016:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c018:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
1000c01a:	e02d      	b.n	1000c078 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c01c:	4a18      	ldr	r2, [pc, #96]	; (1000c080 <system_clock_peripheral_enable+0x358>)
1000c01e:	6913      	ldr	r3, [r2, #16]
1000c020:	2180      	movs	r1, #128	; 0x80
1000c022:	0389      	lsls	r1, r1, #14
1000c024:	430b      	orrs	r3, r1
1000c026:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c028:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
1000c02a:	e025      	b.n	1000c078 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c02c:	4a14      	ldr	r2, [pc, #80]	; (1000c080 <system_clock_peripheral_enable+0x358>)
1000c02e:	6913      	ldr	r3, [r2, #16]
1000c030:	2180      	movs	r1, #128	; 0x80
1000c032:	03c9      	lsls	r1, r1, #15
1000c034:	430b      	orrs	r3, r1
1000c036:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c038:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
1000c03a:	e01d      	b.n	1000c078 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c03c:	4a10      	ldr	r2, [pc, #64]	; (1000c080 <system_clock_peripheral_enable+0x358>)
1000c03e:	6913      	ldr	r3, [r2, #16]
1000c040:	2180      	movs	r1, #128	; 0x80
1000c042:	0409      	lsls	r1, r1, #16
1000c044:	430b      	orrs	r3, r1
1000c046:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c048:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
1000c04a:	e015      	b.n	1000c078 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000c04c:	4a0c      	ldr	r2, [pc, #48]	; (1000c080 <system_clock_peripheral_enable+0x358>)
1000c04e:	7d11      	ldrb	r1, [r2, #20]
1000c050:	2301      	movs	r3, #1
1000c052:	430b      	orrs	r3, r1
1000c054:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c056:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;
1000c058:	e00e      	b.n	1000c078 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000c05a:	4a09      	ldr	r2, [pc, #36]	; (1000c080 <system_clock_peripheral_enable+0x358>)
1000c05c:	7d11      	ldrb	r1, [r2, #20]
1000c05e:	2302      	movs	r3, #2
1000c060:	430b      	orrs	r3, r1
1000c062:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c064:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;
1000c066:	e007      	b.n	1000c078 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000c068:	4a05      	ldr	r2, [pc, #20]	; (1000c080 <system_clock_peripheral_enable+0x358>)
1000c06a:	7d11      	ldrb	r1, [r2, #20]
1000c06c:	2304      	movs	r3, #4
1000c06e:	430b      	orrs	r3, r1
1000c070:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c072:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_PERIPH_REGS_CLK_EN;
		break;
1000c074:	e000      	b.n	1000c078 <system_clock_peripheral_enable+0x350>

		default:
			return STATUS_ERR_INVALID_ARG;
1000c076:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000c078:	bd00      	pop	{pc}
1000c07a:	46c0      	nop			; (mov r8, r8)
1000c07c:	10017b24 	.word	0x10017b24
1000c080:	4000b000 	.word	0x4000b000

1000c084 <system_clock_peripheral_disable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_disable(enum system_peripheral peripheral)
{
1000c084:	b500      	push	{lr}
	switch (peripheral) {
1000c086:	2835      	cmp	r0, #53	; 0x35
1000c088:	d900      	bls.n	1000c08c <system_clock_peripheral_disable+0x8>
1000c08a:	e17d      	b.n	1000c388 <system_clock_peripheral_disable+0x304>
1000c08c:	0080      	lsls	r0, r0, #2
1000c08e:	4bbf      	ldr	r3, [pc, #764]	; (1000c38c <system_clock_peripheral_disable+0x308>)
1000c090:	581b      	ldr	r3, [r3, r0]
1000c092:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c094:	4abe      	ldr	r2, [pc, #760]	; (1000c390 <system_clock_peripheral_disable+0x30c>)
1000c096:	68d3      	ldr	r3, [r2, #12]
1000c098:	2102      	movs	r1, #2
1000c09a:	438b      	bics	r3, r1
1000c09c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c09e:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;
1000c0a0:	e173      	b.n	1000c38a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c0a2:	4abb      	ldr	r2, [pc, #748]	; (1000c390 <system_clock_peripheral_disable+0x30c>)
1000c0a4:	68d3      	ldr	r3, [r2, #12]
1000c0a6:	2104      	movs	r1, #4
1000c0a8:	438b      	bics	r3, r1
1000c0aa:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c0ac:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;
1000c0ae:	e16c      	b.n	1000c38a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c0b0:	4ab7      	ldr	r2, [pc, #732]	; (1000c390 <system_clock_peripheral_disable+0x30c>)
1000c0b2:	68d3      	ldr	r3, [r2, #12]
1000c0b4:	2108      	movs	r1, #8
1000c0b6:	438b      	bics	r3, r1
1000c0b8:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c0ba:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;
1000c0bc:	e165      	b.n	1000c38a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c0be:	4ab4      	ldr	r2, [pc, #720]	; (1000c390 <system_clock_peripheral_disable+0x30c>)
1000c0c0:	68d3      	ldr	r3, [r2, #12]
1000c0c2:	2110      	movs	r1, #16
1000c0c4:	438b      	bics	r3, r1
1000c0c6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c0c8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;
1000c0ca:	e15e      	b.n	1000c38a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c0cc:	4ab0      	ldr	r2, [pc, #704]	; (1000c390 <system_clock_peripheral_disable+0x30c>)
1000c0ce:	68d3      	ldr	r3, [r2, #12]
1000c0d0:	2120      	movs	r1, #32
1000c0d2:	438b      	bics	r3, r1
1000c0d4:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c0d6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;
1000c0d8:	e157      	b.n	1000c38a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c0da:	4aad      	ldr	r2, [pc, #692]	; (1000c390 <system_clock_peripheral_disable+0x30c>)
1000c0dc:	68d3      	ldr	r3, [r2, #12]
1000c0de:	2180      	movs	r1, #128	; 0x80
1000c0e0:	438b      	bics	r3, r1
1000c0e2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c0e4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
1000c0e6:	e150      	b.n	1000c38a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c0e8:	4aa9      	ldr	r2, [pc, #676]	; (1000c390 <system_clock_peripheral_disable+0x30c>)
1000c0ea:	68d1      	ldr	r1, [r2, #12]
1000c0ec:	4ba9      	ldr	r3, [pc, #676]	; (1000c394 <system_clock_peripheral_disable+0x310>)
1000c0ee:	400b      	ands	r3, r1
1000c0f0:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c0f2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN;
		break;
1000c0f4:	e149      	b.n	1000c38a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c0f6:	4aa6      	ldr	r2, [pc, #664]	; (1000c390 <system_clock_peripheral_disable+0x30c>)
1000c0f8:	68d1      	ldr	r1, [r2, #12]
1000c0fa:	4ba7      	ldr	r3, [pc, #668]	; (1000c398 <system_clock_peripheral_disable+0x314>)
1000c0fc:	400b      	ands	r3, r1
1000c0fe:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c100:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN;
		break;
1000c102:	e142      	b.n	1000c38a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c104:	4aa2      	ldr	r2, [pc, #648]	; (1000c390 <system_clock_peripheral_disable+0x30c>)
1000c106:	68d1      	ldr	r1, [r2, #12]
1000c108:	4ba4      	ldr	r3, [pc, #656]	; (1000c39c <system_clock_peripheral_disable+0x318>)
1000c10a:	400b      	ands	r3, r1
1000c10c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c10e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN;
		break;
1000c110:	e13b      	b.n	1000c38a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c112:	4a9f      	ldr	r2, [pc, #636]	; (1000c390 <system_clock_peripheral_disable+0x30c>)
1000c114:	68d1      	ldr	r1, [r2, #12]
1000c116:	4ba2      	ldr	r3, [pc, #648]	; (1000c3a0 <system_clock_peripheral_disable+0x31c>)
1000c118:	400b      	ands	r3, r1
1000c11a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c11c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN;
		break;
1000c11e:	e134      	b.n	1000c38a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c120:	4a9b      	ldr	r2, [pc, #620]	; (1000c390 <system_clock_peripheral_disable+0x30c>)
1000c122:	68d1      	ldr	r1, [r2, #12]
1000c124:	4b9f      	ldr	r3, [pc, #636]	; (1000c3a4 <system_clock_peripheral_disable+0x320>)
1000c126:	400b      	ands	r3, r1
1000c128:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c12a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN;
		break;
1000c12c:	e12d      	b.n	1000c38a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c12e:	4a98      	ldr	r2, [pc, #608]	; (1000c390 <system_clock_peripheral_disable+0x30c>)
1000c130:	68d1      	ldr	r1, [r2, #12]
1000c132:	4b9d      	ldr	r3, [pc, #628]	; (1000c3a8 <system_clock_peripheral_disable+0x324>)
1000c134:	400b      	ands	r3, r1
1000c136:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c138:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN;
		break;
1000c13a:	e126      	b.n	1000c38a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c13c:	4a94      	ldr	r2, [pc, #592]	; (1000c390 <system_clock_peripheral_disable+0x30c>)
1000c13e:	68d1      	ldr	r1, [r2, #12]
1000c140:	4b9a      	ldr	r3, [pc, #616]	; (1000c3ac <system_clock_peripheral_disable+0x328>)
1000c142:	400b      	ands	r3, r1
1000c144:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c146:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN;
		break;
1000c148:	e11f      	b.n	1000c38a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c14a:	4a91      	ldr	r2, [pc, #580]	; (1000c390 <system_clock_peripheral_disable+0x30c>)
1000c14c:	68d1      	ldr	r1, [r2, #12]
1000c14e:	4b98      	ldr	r3, [pc, #608]	; (1000c3b0 <system_clock_peripheral_disable+0x32c>)
1000c150:	400b      	ands	r3, r1
1000c152:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c154:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
1000c156:	e118      	b.n	1000c38a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c158:	4a8d      	ldr	r2, [pc, #564]	; (1000c390 <system_clock_peripheral_disable+0x30c>)
1000c15a:	68d1      	ldr	r1, [r2, #12]
1000c15c:	4b95      	ldr	r3, [pc, #596]	; (1000c3b4 <system_clock_peripheral_disable+0x330>)
1000c15e:	400b      	ands	r3, r1
1000c160:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c162:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
1000c164:	e111      	b.n	1000c38a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c166:	4a8a      	ldr	r2, [pc, #552]	; (1000c390 <system_clock_peripheral_disable+0x30c>)
1000c168:	68d1      	ldr	r1, [r2, #12]
1000c16a:	4b93      	ldr	r3, [pc, #588]	; (1000c3b8 <system_clock_peripheral_disable+0x334>)
1000c16c:	400b      	ands	r3, r1
1000c16e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c170:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
1000c172:	e10a      	b.n	1000c38a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c174:	4a86      	ldr	r2, [pc, #536]	; (1000c390 <system_clock_peripheral_disable+0x30c>)
1000c176:	68d1      	ldr	r1, [r2, #12]
1000c178:	4b90      	ldr	r3, [pc, #576]	; (1000c3bc <system_clock_peripheral_disable+0x338>)
1000c17a:	400b      	ands	r3, r1
1000c17c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c17e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
1000c180:	e103      	b.n	1000c38a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c182:	4a83      	ldr	r2, [pc, #524]	; (1000c390 <system_clock_peripheral_disable+0x30c>)
1000c184:	68d1      	ldr	r1, [r2, #12]
1000c186:	4b8e      	ldr	r3, [pc, #568]	; (1000c3c0 <system_clock_peripheral_disable+0x33c>)
1000c188:	400b      	ands	r3, r1
1000c18a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c18c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
1000c18e:	e0fc      	b.n	1000c38a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c190:	4a7f      	ldr	r2, [pc, #508]	; (1000c390 <system_clock_peripheral_disable+0x30c>)
1000c192:	68d1      	ldr	r1, [r2, #12]
1000c194:	4b8b      	ldr	r3, [pc, #556]	; (1000c3c4 <system_clock_peripheral_disable+0x340>)
1000c196:	400b      	ands	r3, r1
1000c198:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c19a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
1000c19c:	e0f5      	b.n	1000c38a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c19e:	4a7c      	ldr	r2, [pc, #496]	; (1000c390 <system_clock_peripheral_disable+0x30c>)
1000c1a0:	68d1      	ldr	r1, [r2, #12]
1000c1a2:	4b89      	ldr	r3, [pc, #548]	; (1000c3c8 <system_clock_peripheral_disable+0x344>)
1000c1a4:	400b      	ands	r3, r1
1000c1a6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c1a8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
1000c1aa:	e0ee      	b.n	1000c38a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c1ac:	4a78      	ldr	r2, [pc, #480]	; (1000c390 <system_clock_peripheral_disable+0x30c>)
1000c1ae:	68d1      	ldr	r1, [r2, #12]
1000c1b0:	4b86      	ldr	r3, [pc, #536]	; (1000c3cc <system_clock_peripheral_disable+0x348>)
1000c1b2:	400b      	ands	r3, r1
1000c1b4:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c1b6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
1000c1b8:	e0e7      	b.n	1000c38a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c1ba:	4a75      	ldr	r2, [pc, #468]	; (1000c390 <system_clock_peripheral_disable+0x30c>)
1000c1bc:	68d1      	ldr	r1, [r2, #12]
1000c1be:	4b84      	ldr	r3, [pc, #528]	; (1000c3d0 <system_clock_peripheral_disable+0x34c>)
1000c1c0:	400b      	ands	r3, r1
1000c1c2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c1c4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
1000c1c6:	e0e0      	b.n	1000c38a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c1c8:	4a71      	ldr	r2, [pc, #452]	; (1000c390 <system_clock_peripheral_disable+0x30c>)
1000c1ca:	68d1      	ldr	r1, [r2, #12]
1000c1cc:	4b81      	ldr	r3, [pc, #516]	; (1000c3d4 <system_clock_peripheral_disable+0x350>)
1000c1ce:	400b      	ands	r3, r1
1000c1d0:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c1d2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN;
		break;
1000c1d4:	e0d9      	b.n	1000c38a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c1d6:	4a6e      	ldr	r2, [pc, #440]	; (1000c390 <system_clock_peripheral_disable+0x30c>)
1000c1d8:	68d1      	ldr	r1, [r2, #12]
1000c1da:	4b7f      	ldr	r3, [pc, #508]	; (1000c3d8 <system_clock_peripheral_disable+0x354>)
1000c1dc:	400b      	ands	r3, r1
1000c1de:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c1e0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN;
		break;
1000c1e2:	e0d2      	b.n	1000c38a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c1e4:	4a6a      	ldr	r2, [pc, #424]	; (1000c390 <system_clock_peripheral_disable+0x30c>)
1000c1e6:	68d1      	ldr	r1, [r2, #12]
1000c1e8:	4b7c      	ldr	r3, [pc, #496]	; (1000c3dc <system_clock_peripheral_disable+0x358>)
1000c1ea:	400b      	ands	r3, r1
1000c1ec:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c1ee:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN;
		break;
1000c1f0:	e0cb      	b.n	1000c38a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c1f2:	4a67      	ldr	r2, [pc, #412]	; (1000c390 <system_clock_peripheral_disable+0x30c>)
1000c1f4:	68d1      	ldr	r1, [r2, #12]
1000c1f6:	4b7a      	ldr	r3, [pc, #488]	; (1000c3e0 <system_clock_peripheral_disable+0x35c>)
1000c1f8:	400b      	ands	r3, r1
1000c1fa:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c1fc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN;
		break;
1000c1fe:	e0c4      	b.n	1000c38a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c200:	4a63      	ldr	r2, [pc, #396]	; (1000c390 <system_clock_peripheral_disable+0x30c>)
1000c202:	68d1      	ldr	r1, [r2, #12]
1000c204:	4b77      	ldr	r3, [pc, #476]	; (1000c3e4 <system_clock_peripheral_disable+0x360>)
1000c206:	400b      	ands	r3, r1
1000c208:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c20a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
1000c20c:	e0bd      	b.n	1000c38a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c20e:	4a60      	ldr	r2, [pc, #384]	; (1000c390 <system_clock_peripheral_disable+0x30c>)
1000c210:	6913      	ldr	r3, [r2, #16]
1000c212:	2101      	movs	r1, #1
1000c214:	438b      	bics	r3, r1
1000c216:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c218:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;
1000c21a:	e0b6      	b.n	1000c38a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c21c:	4a5c      	ldr	r2, [pc, #368]	; (1000c390 <system_clock_peripheral_disable+0x30c>)
1000c21e:	6913      	ldr	r3, [r2, #16]
1000c220:	2102      	movs	r1, #2
1000c222:	438b      	bics	r3, r1
1000c224:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c226:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;
1000c228:	e0af      	b.n	1000c38a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c22a:	4a59      	ldr	r2, [pc, #356]	; (1000c390 <system_clock_peripheral_disable+0x30c>)
1000c22c:	6913      	ldr	r3, [r2, #16]
1000c22e:	2104      	movs	r1, #4
1000c230:	438b      	bics	r3, r1
1000c232:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c234:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;
1000c236:	e0a8      	b.n	1000c38a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c238:	4a55      	ldr	r2, [pc, #340]	; (1000c390 <system_clock_peripheral_disable+0x30c>)
1000c23a:	6913      	ldr	r3, [r2, #16]
1000c23c:	2108      	movs	r1, #8
1000c23e:	438b      	bics	r3, r1
1000c240:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c242:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;
1000c244:	e0a1      	b.n	1000c38a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c246:	4a52      	ldr	r2, [pc, #328]	; (1000c390 <system_clock_peripheral_disable+0x30c>)
1000c248:	6913      	ldr	r3, [r2, #16]
1000c24a:	2110      	movs	r1, #16
1000c24c:	438b      	bics	r3, r1
1000c24e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c250:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;
1000c252:	e09a      	b.n	1000c38a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c254:	4a4e      	ldr	r2, [pc, #312]	; (1000c390 <system_clock_peripheral_disable+0x30c>)
1000c256:	6913      	ldr	r3, [r2, #16]
1000c258:	2120      	movs	r1, #32
1000c25a:	438b      	bics	r3, r1
1000c25c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c25e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;
1000c260:	e093      	b.n	1000c38a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c262:	4a4b      	ldr	r2, [pc, #300]	; (1000c390 <system_clock_peripheral_disable+0x30c>)
1000c264:	6913      	ldr	r3, [r2, #16]
1000c266:	2140      	movs	r1, #64	; 0x40
1000c268:	438b      	bics	r3, r1
1000c26a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c26c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;
1000c26e:	e08c      	b.n	1000c38a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c270:	4a47      	ldr	r2, [pc, #284]	; (1000c390 <system_clock_peripheral_disable+0x30c>)
1000c272:	6913      	ldr	r3, [r2, #16]
1000c274:	2180      	movs	r1, #128	; 0x80
1000c276:	438b      	bics	r3, r1
1000c278:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c27a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN;
		break;
1000c27c:	e085      	b.n	1000c38a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c27e:	4a44      	ldr	r2, [pc, #272]	; (1000c390 <system_clock_peripheral_disable+0x30c>)
1000c280:	6911      	ldr	r1, [r2, #16]
1000c282:	4b44      	ldr	r3, [pc, #272]	; (1000c394 <system_clock_peripheral_disable+0x310>)
1000c284:	400b      	ands	r3, r1
1000c286:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c288:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN;
		break;
1000c28a:	e07e      	b.n	1000c38a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c28c:	4a40      	ldr	r2, [pc, #256]	; (1000c390 <system_clock_peripheral_disable+0x30c>)
1000c28e:	6911      	ldr	r1, [r2, #16]
1000c290:	4b55      	ldr	r3, [pc, #340]	; (1000c3e8 <system_clock_peripheral_disable+0x364>)
1000c292:	400b      	ands	r3, r1
1000c294:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c296:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN;
		break;
1000c298:	e077      	b.n	1000c38a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c29a:	4a3d      	ldr	r2, [pc, #244]	; (1000c390 <system_clock_peripheral_disable+0x30c>)
1000c29c:	6911      	ldr	r1, [r2, #16]
1000c29e:	4b53      	ldr	r3, [pc, #332]	; (1000c3ec <system_clock_peripheral_disable+0x368>)
1000c2a0:	400b      	ands	r3, r1
1000c2a2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c2a4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
1000c2a6:	e070      	b.n	1000c38a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c2a8:	4a39      	ldr	r2, [pc, #228]	; (1000c390 <system_clock_peripheral_disable+0x30c>)
1000c2aa:	6911      	ldr	r1, [r2, #16]
1000c2ac:	4b3a      	ldr	r3, [pc, #232]	; (1000c398 <system_clock_peripheral_disable+0x314>)
1000c2ae:	400b      	ands	r3, r1
1000c2b0:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c2b2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
1000c2b4:	e069      	b.n	1000c38a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c2b6:	4a36      	ldr	r2, [pc, #216]	; (1000c390 <system_clock_peripheral_disable+0x30c>)
1000c2b8:	6911      	ldr	r1, [r2, #16]
1000c2ba:	4b38      	ldr	r3, [pc, #224]	; (1000c39c <system_clock_peripheral_disable+0x318>)
1000c2bc:	400b      	ands	r3, r1
1000c2be:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c2c0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
1000c2c2:	e062      	b.n	1000c38a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c2c4:	4a32      	ldr	r2, [pc, #200]	; (1000c390 <system_clock_peripheral_disable+0x30c>)
1000c2c6:	6911      	ldr	r1, [r2, #16]
1000c2c8:	4b35      	ldr	r3, [pc, #212]	; (1000c3a0 <system_clock_peripheral_disable+0x31c>)
1000c2ca:	400b      	ands	r3, r1
1000c2cc:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c2ce:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
1000c2d0:	e05b      	b.n	1000c38a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c2d2:	4a2f      	ldr	r2, [pc, #188]	; (1000c390 <system_clock_peripheral_disable+0x30c>)
1000c2d4:	6911      	ldr	r1, [r2, #16]
1000c2d6:	4b33      	ldr	r3, [pc, #204]	; (1000c3a4 <system_clock_peripheral_disable+0x320>)
1000c2d8:	400b      	ands	r3, r1
1000c2da:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c2dc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN;
		break;
1000c2de:	e054      	b.n	1000c38a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c2e0:	4a2b      	ldr	r2, [pc, #172]	; (1000c390 <system_clock_peripheral_disable+0x30c>)
1000c2e2:	6911      	ldr	r1, [r2, #16]
1000c2e4:	4b30      	ldr	r3, [pc, #192]	; (1000c3a8 <system_clock_peripheral_disable+0x324>)
1000c2e6:	400b      	ands	r3, r1
1000c2e8:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c2ea:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
1000c2ec:	e04d      	b.n	1000c38a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c2ee:	4a28      	ldr	r2, [pc, #160]	; (1000c390 <system_clock_peripheral_disable+0x30c>)
1000c2f0:	6911      	ldr	r1, [r2, #16]
1000c2f2:	4b2e      	ldr	r3, [pc, #184]	; (1000c3ac <system_clock_peripheral_disable+0x328>)
1000c2f4:	400b      	ands	r3, r1
1000c2f6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c2f8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
1000c2fa:	e046      	b.n	1000c38a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c2fc:	4a24      	ldr	r2, [pc, #144]	; (1000c390 <system_clock_peripheral_disable+0x30c>)
1000c2fe:	6911      	ldr	r1, [r2, #16]
1000c300:	4b2b      	ldr	r3, [pc, #172]	; (1000c3b0 <system_clock_peripheral_disable+0x32c>)
1000c302:	400b      	ands	r3, r1
1000c304:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c306:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
1000c308:	e03f      	b.n	1000c38a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c30a:	4a21      	ldr	r2, [pc, #132]	; (1000c390 <system_clock_peripheral_disable+0x30c>)
1000c30c:	6911      	ldr	r1, [r2, #16]
1000c30e:	4b29      	ldr	r3, [pc, #164]	; (1000c3b4 <system_clock_peripheral_disable+0x330>)
1000c310:	400b      	ands	r3, r1
1000c312:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c314:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
1000c316:	e038      	b.n	1000c38a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c318:	4a1d      	ldr	r2, [pc, #116]	; (1000c390 <system_clock_peripheral_disable+0x30c>)
1000c31a:	6911      	ldr	r1, [r2, #16]
1000c31c:	4b26      	ldr	r3, [pc, #152]	; (1000c3b8 <system_clock_peripheral_disable+0x334>)
1000c31e:	400b      	ands	r3, r1
1000c320:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c322:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
1000c324:	e031      	b.n	1000c38a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c326:	4a1a      	ldr	r2, [pc, #104]	; (1000c390 <system_clock_peripheral_disable+0x30c>)
1000c328:	6911      	ldr	r1, [r2, #16]
1000c32a:	4b24      	ldr	r3, [pc, #144]	; (1000c3bc <system_clock_peripheral_disable+0x338>)
1000c32c:	400b      	ands	r3, r1
1000c32e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c330:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
1000c332:	e02a      	b.n	1000c38a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c334:	4a16      	ldr	r2, [pc, #88]	; (1000c390 <system_clock_peripheral_disable+0x30c>)
1000c336:	6911      	ldr	r1, [r2, #16]
1000c338:	4b21      	ldr	r3, [pc, #132]	; (1000c3c0 <system_clock_peripheral_disable+0x33c>)
1000c33a:	400b      	ands	r3, r1
1000c33c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c33e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
1000c340:	e023      	b.n	1000c38a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c342:	4a13      	ldr	r2, [pc, #76]	; (1000c390 <system_clock_peripheral_disable+0x30c>)
1000c344:	6911      	ldr	r1, [r2, #16]
1000c346:	4b1f      	ldr	r3, [pc, #124]	; (1000c3c4 <system_clock_peripheral_disable+0x340>)
1000c348:	400b      	ands	r3, r1
1000c34a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c34c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
1000c34e:	e01c      	b.n	1000c38a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c350:	4a0f      	ldr	r2, [pc, #60]	; (1000c390 <system_clock_peripheral_disable+0x30c>)
1000c352:	6911      	ldr	r1, [r2, #16]
1000c354:	4b1c      	ldr	r3, [pc, #112]	; (1000c3c8 <system_clock_peripheral_disable+0x344>)
1000c356:	400b      	ands	r3, r1
1000c358:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c35a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
1000c35c:	e015      	b.n	1000c38a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
1000c35e:	4a0c      	ldr	r2, [pc, #48]	; (1000c390 <system_clock_peripheral_disable+0x30c>)
1000c360:	7d13      	ldrb	r3, [r2, #20]
1000c362:	2101      	movs	r1, #1
1000c364:	438b      	bics	r3, r1
1000c366:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c368:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;
1000c36a:	e00e      	b.n	1000c38a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
1000c36c:	4a08      	ldr	r2, [pc, #32]	; (1000c390 <system_clock_peripheral_disable+0x30c>)
1000c36e:	7d13      	ldrb	r3, [r2, #20]
1000c370:	2102      	movs	r1, #2
1000c372:	438b      	bics	r3, r1
1000c374:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c376:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;
1000c378:	e007      	b.n	1000c38a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
1000c37a:	4a05      	ldr	r2, [pc, #20]	; (1000c390 <system_clock_peripheral_disable+0x30c>)
1000c37c:	7d13      	ldrb	r3, [r2, #20]
1000c37e:	2104      	movs	r1, #4
1000c380:	438b      	bics	r3, r1
1000c382:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c384:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_PERIPH_REGS_CLK_EN;
		break;
1000c386:	e000      	b.n	1000c38a <system_clock_peripheral_disable+0x306>

		default:
			return STATUS_ERR_INVALID_ARG;
1000c388:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000c38a:	bd00      	pop	{pc}
1000c38c:	10017bfc 	.word	0x10017bfc
1000c390:	4000b000 	.word	0x4000b000
1000c394:	fffffeff 	.word	0xfffffeff
1000c398:	fffff7ff 	.word	0xfffff7ff
1000c39c:	ffffefff 	.word	0xffffefff
1000c3a0:	ffffdfff 	.word	0xffffdfff
1000c3a4:	ffffbfff 	.word	0xffffbfff
1000c3a8:	ffff7fff 	.word	0xffff7fff
1000c3ac:	fffeffff 	.word	0xfffeffff
1000c3b0:	fffdffff 	.word	0xfffdffff
1000c3b4:	fffbffff 	.word	0xfffbffff
1000c3b8:	fff7ffff 	.word	0xfff7ffff
1000c3bc:	ffefffff 	.word	0xffefffff
1000c3c0:	ffdfffff 	.word	0xffdfffff
1000c3c4:	ffbfffff 	.word	0xffbfffff
1000c3c8:	ff7fffff 	.word	0xff7fffff
1000c3cc:	feffffff 	.word	0xfeffffff
1000c3d0:	fdffffff 	.word	0xfdffffff
1000c3d4:	fbffffff 	.word	0xfbffffff
1000c3d8:	f7ffffff 	.word	0xf7ffffff
1000c3dc:	efffffff 	.word	0xefffffff
1000c3e0:	dfffffff 	.word	0xdfffffff
1000c3e4:	bfffffff 	.word	0xbfffffff
1000c3e8:	fffffdff 	.word	0xfffffdff
1000c3ec:	fffffbff 	.word	0xfffffbff

1000c3f0 <system_peripheral_reset>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_peripheral_reset(enum system_peripheral peripheral)
{
1000c3f0:	b500      	push	{lr}
	switch (peripheral) {
1000c3f2:	2843      	cmp	r0, #67	; 0x43
1000c3f4:	d900      	bls.n	1000c3f8 <system_peripheral_reset+0x8>
1000c3f6:	e223      	b.n	1000c840 <system_peripheral_reset+0x450>
1000c3f8:	0080      	lsls	r0, r0, #2
1000c3fa:	4be0      	ldr	r3, [pc, #896]	; (1000c77c <system_peripheral_reset+0x38c>)
1000c3fc:	581b      	ldr	r3, [r3, r0]
1000c3fe:	469f      	mov	pc, r3
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c400:	4bdf      	ldr	r3, [pc, #892]	; (1000c780 <system_peripheral_reset+0x390>)
1000c402:	6859      	ldr	r1, [r3, #4]
1000c404:	2202      	movs	r2, #2
1000c406:	4391      	bics	r1, r2
1000c408:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c40a:	6859      	ldr	r1, [r3, #4]
1000c40c:	430a      	orrs	r2, r1
1000c40e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c410:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
		break;
1000c412:	e216      	b.n	1000c842 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c414:	4bda      	ldr	r3, [pc, #872]	; (1000c780 <system_peripheral_reset+0x390>)
1000c416:	6859      	ldr	r1, [r3, #4]
1000c418:	2204      	movs	r2, #4
1000c41a:	4391      	bics	r1, r2
1000c41c:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c41e:	6859      	ldr	r1, [r3, #4]
1000c420:	430a      	orrs	r2, r1
1000c422:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c424:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
		break;
1000c426:	e20c      	b.n	1000c842 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c428:	4bd5      	ldr	r3, [pc, #852]	; (1000c780 <system_peripheral_reset+0x390>)
1000c42a:	6859      	ldr	r1, [r3, #4]
1000c42c:	2208      	movs	r2, #8
1000c42e:	4391      	bics	r1, r2
1000c430:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c432:	6859      	ldr	r1, [r3, #4]
1000c434:	430a      	orrs	r2, r1
1000c436:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c438:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
		break;
1000c43a:	e202      	b.n	1000c842 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c43c:	4bd0      	ldr	r3, [pc, #832]	; (1000c780 <system_peripheral_reset+0x390>)
1000c43e:	6859      	ldr	r1, [r3, #4]
1000c440:	2210      	movs	r2, #16
1000c442:	4391      	bics	r1, r2
1000c444:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c446:	6859      	ldr	r1, [r3, #4]
1000c448:	430a      	orrs	r2, r1
1000c44a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c44c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
		break;
1000c44e:	e1f8      	b.n	1000c842 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c450:	4bcb      	ldr	r3, [pc, #812]	; (1000c780 <system_peripheral_reset+0x390>)
1000c452:	6859      	ldr	r1, [r3, #4]
1000c454:	2220      	movs	r2, #32
1000c456:	4391      	bics	r1, r2
1000c458:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c45a:	6859      	ldr	r1, [r3, #4]
1000c45c:	430a      	orrs	r2, r1
1000c45e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c460:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
		break;
1000c462:	e1ee      	b.n	1000c842 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c464:	4bc6      	ldr	r3, [pc, #792]	; (1000c780 <system_peripheral_reset+0x390>)
1000c466:	6859      	ldr	r1, [r3, #4]
1000c468:	2240      	movs	r2, #64	; 0x40
1000c46a:	4391      	bics	r1, r2
1000c46c:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c46e:	6859      	ldr	r1, [r3, #4]
1000c470:	430a      	orrs	r2, r1
1000c472:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c474:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
		break;
1000c476:	e1e4      	b.n	1000c842 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c478:	4bc1      	ldr	r3, [pc, #772]	; (1000c780 <system_peripheral_reset+0x390>)
1000c47a:	6859      	ldr	r1, [r3, #4]
1000c47c:	2280      	movs	r2, #128	; 0x80
1000c47e:	4391      	bics	r1, r2
1000c480:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c482:	6859      	ldr	r1, [r3, #4]
1000c484:	430a      	orrs	r2, r1
1000c486:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c488:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
		break;
1000c48a:	e1da      	b.n	1000c842 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c48c:	4bbc      	ldr	r3, [pc, #752]	; (1000c780 <system_peripheral_reset+0x390>)
1000c48e:	6859      	ldr	r1, [r3, #4]
1000c490:	4abc      	ldr	r2, [pc, #752]	; (1000c784 <system_peripheral_reset+0x394>)
1000c492:	400a      	ands	r2, r1
1000c494:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c496:	685a      	ldr	r2, [r3, #4]
1000c498:	2180      	movs	r1, #128	; 0x80
1000c49a:	0049      	lsls	r1, r1, #1
1000c49c:	430a      	orrs	r2, r1
1000c49e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c4a0:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
		break;
1000c4a2:	e1ce      	b.n	1000c842 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c4a4:	4bb6      	ldr	r3, [pc, #728]	; (1000c780 <system_peripheral_reset+0x390>)
1000c4a6:	6859      	ldr	r1, [r3, #4]
1000c4a8:	4ab7      	ldr	r2, [pc, #732]	; (1000c788 <system_peripheral_reset+0x398>)
1000c4aa:	400a      	ands	r2, r1
1000c4ac:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c4ae:	685a      	ldr	r2, [r3, #4]
1000c4b0:	2180      	movs	r1, #128	; 0x80
1000c4b2:	0089      	lsls	r1, r1, #2
1000c4b4:	430a      	orrs	r2, r1
1000c4b6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c4b8:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
		break;
1000c4ba:	e1c2      	b.n	1000c842 <system_peripheral_reset+0x452>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c4bc:	4bb0      	ldr	r3, [pc, #704]	; (1000c780 <system_peripheral_reset+0x390>)
1000c4be:	6859      	ldr	r1, [r3, #4]
1000c4c0:	4ab2      	ldr	r2, [pc, #712]	; (1000c78c <system_peripheral_reset+0x39c>)
1000c4c2:	400a      	ands	r2, r1
1000c4c4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c4c6:	685a      	ldr	r2, [r3, #4]
1000c4c8:	2180      	movs	r1, #128	; 0x80
1000c4ca:	00c9      	lsls	r1, r1, #3
1000c4cc:	430a      	orrs	r2, r1
1000c4ce:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c4d0:	2000      	movs	r0, #0
		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
		break;
1000c4d2:	e1b6      	b.n	1000c842 <system_peripheral_reset+0x452>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c4d4:	4baa      	ldr	r3, [pc, #680]	; (1000c780 <system_peripheral_reset+0x390>)
1000c4d6:	6859      	ldr	r1, [r3, #4]
1000c4d8:	4aad      	ldr	r2, [pc, #692]	; (1000c790 <system_peripheral_reset+0x3a0>)
1000c4da:	400a      	ands	r2, r1
1000c4dc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c4de:	685a      	ldr	r2, [r3, #4]
1000c4e0:	2180      	movs	r1, #128	; 0x80
1000c4e2:	0109      	lsls	r1, r1, #4
1000c4e4:	430a      	orrs	r2, r1
1000c4e6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c4e8:	2000      	movs	r0, #0
		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
		break;
1000c4ea:	e1aa      	b.n	1000c842 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c4ec:	4ba4      	ldr	r3, [pc, #656]	; (1000c780 <system_peripheral_reset+0x390>)
1000c4ee:	6859      	ldr	r1, [r3, #4]
1000c4f0:	4aa8      	ldr	r2, [pc, #672]	; (1000c794 <system_peripheral_reset+0x3a4>)
1000c4f2:	400a      	ands	r2, r1
1000c4f4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c4f6:	685a      	ldr	r2, [r3, #4]
1000c4f8:	2180      	movs	r1, #128	; 0x80
1000c4fa:	0149      	lsls	r1, r1, #5
1000c4fc:	430a      	orrs	r2, r1
1000c4fe:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c500:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
		break;
1000c502:	e19e      	b.n	1000c842 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c504:	4b9e      	ldr	r3, [pc, #632]	; (1000c780 <system_peripheral_reset+0x390>)
1000c506:	6859      	ldr	r1, [r3, #4]
1000c508:	4aa3      	ldr	r2, [pc, #652]	; (1000c798 <system_peripheral_reset+0x3a8>)
1000c50a:	400a      	ands	r2, r1
1000c50c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c50e:	685a      	ldr	r2, [r3, #4]
1000c510:	2180      	movs	r1, #128	; 0x80
1000c512:	0189      	lsls	r1, r1, #6
1000c514:	430a      	orrs	r2, r1
1000c516:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c518:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
		break;
1000c51a:	e192      	b.n	1000c842 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c51c:	4b98      	ldr	r3, [pc, #608]	; (1000c780 <system_peripheral_reset+0x390>)
1000c51e:	6859      	ldr	r1, [r3, #4]
1000c520:	4a9e      	ldr	r2, [pc, #632]	; (1000c79c <system_peripheral_reset+0x3ac>)
1000c522:	400a      	ands	r2, r1
1000c524:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c526:	685a      	ldr	r2, [r3, #4]
1000c528:	2180      	movs	r1, #128	; 0x80
1000c52a:	01c9      	lsls	r1, r1, #7
1000c52c:	430a      	orrs	r2, r1
1000c52e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c530:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
		break;
1000c532:	e186      	b.n	1000c842 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c534:	4b92      	ldr	r3, [pc, #584]	; (1000c780 <system_peripheral_reset+0x390>)
1000c536:	6859      	ldr	r1, [r3, #4]
1000c538:	4a99      	ldr	r2, [pc, #612]	; (1000c7a0 <system_peripheral_reset+0x3b0>)
1000c53a:	400a      	ands	r2, r1
1000c53c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c53e:	685a      	ldr	r2, [r3, #4]
1000c540:	2180      	movs	r1, #128	; 0x80
1000c542:	0209      	lsls	r1, r1, #8
1000c544:	430a      	orrs	r2, r1
1000c546:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c548:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
		break;
1000c54a:	e17a      	b.n	1000c842 <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c54c:	4b8c      	ldr	r3, [pc, #560]	; (1000c780 <system_peripheral_reset+0x390>)
1000c54e:	6859      	ldr	r1, [r3, #4]
1000c550:	4a94      	ldr	r2, [pc, #592]	; (1000c7a4 <system_peripheral_reset+0x3b4>)
1000c552:	400a      	ands	r2, r1
1000c554:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c556:	685a      	ldr	r2, [r3, #4]
1000c558:	2180      	movs	r1, #128	; 0x80
1000c55a:	0249      	lsls	r1, r1, #9
1000c55c:	430a      	orrs	r2, r1
1000c55e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c560:	2000      	movs	r0, #0
		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
		break;
1000c562:	e16e      	b.n	1000c842 <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c564:	4b86      	ldr	r3, [pc, #536]	; (1000c780 <system_peripheral_reset+0x390>)
1000c566:	6859      	ldr	r1, [r3, #4]
1000c568:	4a8f      	ldr	r2, [pc, #572]	; (1000c7a8 <system_peripheral_reset+0x3b8>)
1000c56a:	400a      	ands	r2, r1
1000c56c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c56e:	685a      	ldr	r2, [r3, #4]
1000c570:	2180      	movs	r1, #128	; 0x80
1000c572:	0289      	lsls	r1, r1, #10
1000c574:	430a      	orrs	r2, r1
1000c576:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c578:	2000      	movs	r0, #0
		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
		break;
1000c57a:	e162      	b.n	1000c842 <system_peripheral_reset+0x452>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c57c:	4b80      	ldr	r3, [pc, #512]	; (1000c780 <system_peripheral_reset+0x390>)
1000c57e:	6859      	ldr	r1, [r3, #4]
1000c580:	4a8a      	ldr	r2, [pc, #552]	; (1000c7ac <system_peripheral_reset+0x3bc>)
1000c582:	400a      	ands	r2, r1
1000c584:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c586:	685a      	ldr	r2, [r3, #4]
1000c588:	2180      	movs	r1, #128	; 0x80
1000c58a:	02c9      	lsls	r1, r1, #11
1000c58c:	430a      	orrs	r2, r1
1000c58e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c590:	2000      	movs	r0, #0
		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
		break;
1000c592:	e156      	b.n	1000c842 <system_peripheral_reset+0x452>

		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c594:	4b7a      	ldr	r3, [pc, #488]	; (1000c780 <system_peripheral_reset+0x390>)
1000c596:	6859      	ldr	r1, [r3, #4]
1000c598:	4a85      	ldr	r2, [pc, #532]	; (1000c7b0 <system_peripheral_reset+0x3c0>)
1000c59a:	400a      	ands	r2, r1
1000c59c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c59e:	685a      	ldr	r2, [r3, #4]
1000c5a0:	2180      	movs	r1, #128	; 0x80
1000c5a2:	0309      	lsls	r1, r1, #12
1000c5a4:	430a      	orrs	r2, r1
1000c5a6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c5a8:	2000      	movs	r0, #0
		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
		break;
1000c5aa:	e14a      	b.n	1000c842 <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c5ac:	4b74      	ldr	r3, [pc, #464]	; (1000c780 <system_peripheral_reset+0x390>)
1000c5ae:	6859      	ldr	r1, [r3, #4]
1000c5b0:	4a80      	ldr	r2, [pc, #512]	; (1000c7b4 <system_peripheral_reset+0x3c4>)
1000c5b2:	400a      	ands	r2, r1
1000c5b4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c5b6:	685a      	ldr	r2, [r3, #4]
1000c5b8:	2180      	movs	r1, #128	; 0x80
1000c5ba:	0349      	lsls	r1, r1, #13
1000c5bc:	430a      	orrs	r2, r1
1000c5be:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c5c0:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
		break;
1000c5c2:	e13e      	b.n	1000c842 <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c5c4:	4b6e      	ldr	r3, [pc, #440]	; (1000c780 <system_peripheral_reset+0x390>)
1000c5c6:	6859      	ldr	r1, [r3, #4]
1000c5c8:	4a7b      	ldr	r2, [pc, #492]	; (1000c7b8 <system_peripheral_reset+0x3c8>)
1000c5ca:	400a      	ands	r2, r1
1000c5cc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c5ce:	685a      	ldr	r2, [r3, #4]
1000c5d0:	2180      	movs	r1, #128	; 0x80
1000c5d2:	0389      	lsls	r1, r1, #14
1000c5d4:	430a      	orrs	r2, r1
1000c5d6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c5d8:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
		break;
1000c5da:	e132      	b.n	1000c842 <system_peripheral_reset+0x452>

		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c5dc:	4b68      	ldr	r3, [pc, #416]	; (1000c780 <system_peripheral_reset+0x390>)
1000c5de:	6859      	ldr	r1, [r3, #4]
1000c5e0:	4a76      	ldr	r2, [pc, #472]	; (1000c7bc <system_peripheral_reset+0x3cc>)
1000c5e2:	400a      	ands	r2, r1
1000c5e4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c5e6:	685a      	ldr	r2, [r3, #4]
1000c5e8:	2180      	movs	r1, #128	; 0x80
1000c5ea:	03c9      	lsls	r1, r1, #15
1000c5ec:	430a      	orrs	r2, r1
1000c5ee:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c5f0:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
		break;
1000c5f2:	e126      	b.n	1000c842 <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c5f4:	4b62      	ldr	r3, [pc, #392]	; (1000c780 <system_peripheral_reset+0x390>)
1000c5f6:	6859      	ldr	r1, [r3, #4]
1000c5f8:	4a71      	ldr	r2, [pc, #452]	; (1000c7c0 <system_peripheral_reset+0x3d0>)
1000c5fa:	400a      	ands	r2, r1
1000c5fc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c5fe:	685a      	ldr	r2, [r3, #4]
1000c600:	2180      	movs	r1, #128	; 0x80
1000c602:	0409      	lsls	r1, r1, #16
1000c604:	430a      	orrs	r2, r1
1000c606:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c608:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
		break;
1000c60a:	e11a      	b.n	1000c842 <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c60c:	4b5c      	ldr	r3, [pc, #368]	; (1000c780 <system_peripheral_reset+0x390>)
1000c60e:	6859      	ldr	r1, [r3, #4]
1000c610:	4a6c      	ldr	r2, [pc, #432]	; (1000c7c4 <system_peripheral_reset+0x3d4>)
1000c612:	400a      	ands	r2, r1
1000c614:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c616:	685a      	ldr	r2, [r3, #4]
1000c618:	2180      	movs	r1, #128	; 0x80
1000c61a:	0449      	lsls	r1, r1, #17
1000c61c:	430a      	orrs	r2, r1
1000c61e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c620:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
		break;
1000c622:	e10e      	b.n	1000c842 <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c624:	4b56      	ldr	r3, [pc, #344]	; (1000c780 <system_peripheral_reset+0x390>)
1000c626:	6859      	ldr	r1, [r3, #4]
1000c628:	4a67      	ldr	r2, [pc, #412]	; (1000c7c8 <system_peripheral_reset+0x3d8>)
1000c62a:	400a      	ands	r2, r1
1000c62c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c62e:	685a      	ldr	r2, [r3, #4]
1000c630:	2180      	movs	r1, #128	; 0x80
1000c632:	0489      	lsls	r1, r1, #18
1000c634:	430a      	orrs	r2, r1
1000c636:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c638:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
		break;
1000c63a:	e102      	b.n	1000c842 <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c63c:	4b50      	ldr	r3, [pc, #320]	; (1000c780 <system_peripheral_reset+0x390>)
1000c63e:	6859      	ldr	r1, [r3, #4]
1000c640:	4a62      	ldr	r2, [pc, #392]	; (1000c7cc <system_peripheral_reset+0x3dc>)
1000c642:	400a      	ands	r2, r1
1000c644:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c646:	685a      	ldr	r2, [r3, #4]
1000c648:	2180      	movs	r1, #128	; 0x80
1000c64a:	04c9      	lsls	r1, r1, #19
1000c64c:	430a      	orrs	r2, r1
1000c64e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c650:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
		break;
1000c652:	e0f6      	b.n	1000c842 <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c654:	4b4a      	ldr	r3, [pc, #296]	; (1000c780 <system_peripheral_reset+0x390>)
1000c656:	6859      	ldr	r1, [r3, #4]
1000c658:	4a5d      	ldr	r2, [pc, #372]	; (1000c7d0 <system_peripheral_reset+0x3e0>)
1000c65a:	400a      	ands	r2, r1
1000c65c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c65e:	685a      	ldr	r2, [r3, #4]
1000c660:	2180      	movs	r1, #128	; 0x80
1000c662:	0509      	lsls	r1, r1, #20
1000c664:	430a      	orrs	r2, r1
1000c666:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c668:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
		break;
1000c66a:	e0ea      	b.n	1000c842 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c66c:	4b44      	ldr	r3, [pc, #272]	; (1000c780 <system_peripheral_reset+0x390>)
1000c66e:	6859      	ldr	r1, [r3, #4]
1000c670:	4a58      	ldr	r2, [pc, #352]	; (1000c7d4 <system_peripheral_reset+0x3e4>)
1000c672:	400a      	ands	r2, r1
1000c674:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c676:	685a      	ldr	r2, [r3, #4]
1000c678:	2180      	movs	r1, #128	; 0x80
1000c67a:	0549      	lsls	r1, r1, #21
1000c67c:	430a      	orrs	r2, r1
1000c67e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c680:	2000      	movs	r0, #0
		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
		break;
1000c682:	e0de      	b.n	1000c842 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c684:	4b3e      	ldr	r3, [pc, #248]	; (1000c780 <system_peripheral_reset+0x390>)
1000c686:	6859      	ldr	r1, [r3, #4]
1000c688:	4a53      	ldr	r2, [pc, #332]	; (1000c7d8 <system_peripheral_reset+0x3e8>)
1000c68a:	400a      	ands	r2, r1
1000c68c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c68e:	685a      	ldr	r2, [r3, #4]
1000c690:	2180      	movs	r1, #128	; 0x80
1000c692:	0589      	lsls	r1, r1, #22
1000c694:	430a      	orrs	r2, r1
1000c696:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c698:	2000      	movs	r0, #0
		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
		break;
1000c69a:	e0d2      	b.n	1000c842 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c69c:	4b38      	ldr	r3, [pc, #224]	; (1000c780 <system_peripheral_reset+0x390>)
1000c69e:	6859      	ldr	r1, [r3, #4]
1000c6a0:	4a4e      	ldr	r2, [pc, #312]	; (1000c7dc <system_peripheral_reset+0x3ec>)
1000c6a2:	400a      	ands	r2, r1
1000c6a4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c6a6:	685a      	ldr	r2, [r3, #4]
1000c6a8:	2180      	movs	r1, #128	; 0x80
1000c6aa:	05c9      	lsls	r1, r1, #23
1000c6ac:	430a      	orrs	r2, r1
1000c6ae:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c6b0:	2000      	movs	r0, #0
		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
		break;
1000c6b2:	e0c6      	b.n	1000c842 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c6b4:	4a32      	ldr	r2, [pc, #200]	; (1000c780 <system_peripheral_reset+0x390>)
1000c6b6:	6853      	ldr	r3, [r2, #4]
1000c6b8:	005b      	lsls	r3, r3, #1
1000c6ba:	085b      	lsrs	r3, r3, #1
1000c6bc:	6053      	str	r3, [r2, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c6be:	6853      	ldr	r3, [r2, #4]
1000c6c0:	2180      	movs	r1, #128	; 0x80
1000c6c2:	0609      	lsls	r1, r1, #24
1000c6c4:	430b      	orrs	r3, r1
1000c6c6:	6053      	str	r3, [r2, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c6c8:	2000      	movs	r0, #0
		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
		break;
1000c6ca:	e0ba      	b.n	1000c842 <system_peripheral_reset+0x452>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c6cc:	4b2c      	ldr	r3, [pc, #176]	; (1000c780 <system_peripheral_reset+0x390>)
1000c6ce:	891a      	ldrh	r2, [r3, #8]
1000c6d0:	2101      	movs	r1, #1
1000c6d2:	438a      	bics	r2, r1
1000c6d4:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c6d6:	8919      	ldrh	r1, [r3, #8]
1000c6d8:	2201      	movs	r2, #1
1000c6da:	430a      	orrs	r2, r1
1000c6dc:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c6de:	2000      	movs	r0, #0
		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
		break;
1000c6e0:	e0af      	b.n	1000c842 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c6e2:	4b27      	ldr	r3, [pc, #156]	; (1000c780 <system_peripheral_reset+0x390>)
1000c6e4:	891a      	ldrh	r2, [r3, #8]
1000c6e6:	2102      	movs	r1, #2
1000c6e8:	438a      	bics	r2, r1
1000c6ea:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c6ec:	8919      	ldrh	r1, [r3, #8]
1000c6ee:	2202      	movs	r2, #2
1000c6f0:	430a      	orrs	r2, r1
1000c6f2:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c6f4:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
		break;
1000c6f6:	e0a4      	b.n	1000c842 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c6f8:	4b21      	ldr	r3, [pc, #132]	; (1000c780 <system_peripheral_reset+0x390>)
1000c6fa:	891a      	ldrh	r2, [r3, #8]
1000c6fc:	2104      	movs	r1, #4
1000c6fe:	438a      	bics	r2, r1
1000c700:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c702:	8919      	ldrh	r1, [r3, #8]
1000c704:	2204      	movs	r2, #4
1000c706:	430a      	orrs	r2, r1
1000c708:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c70a:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
		break;
1000c70c:	e099      	b.n	1000c842 <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c70e:	4b1c      	ldr	r3, [pc, #112]	; (1000c780 <system_peripheral_reset+0x390>)
1000c710:	891a      	ldrh	r2, [r3, #8]
1000c712:	2108      	movs	r1, #8
1000c714:	438a      	bics	r2, r1
1000c716:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c718:	8919      	ldrh	r1, [r3, #8]
1000c71a:	2208      	movs	r2, #8
1000c71c:	430a      	orrs	r2, r1
1000c71e:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c720:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
		break;
1000c722:	e08e      	b.n	1000c842 <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c724:	4b16      	ldr	r3, [pc, #88]	; (1000c780 <system_peripheral_reset+0x390>)
1000c726:	891a      	ldrh	r2, [r3, #8]
1000c728:	2110      	movs	r1, #16
1000c72a:	438a      	bics	r2, r1
1000c72c:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c72e:	8919      	ldrh	r1, [r3, #8]
1000c730:	2210      	movs	r2, #16
1000c732:	430a      	orrs	r2, r1
1000c734:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c736:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
		break;
1000c738:	e083      	b.n	1000c842 <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c73a:	4b11      	ldr	r3, [pc, #68]	; (1000c780 <system_peripheral_reset+0x390>)
1000c73c:	891a      	ldrh	r2, [r3, #8]
1000c73e:	2120      	movs	r1, #32
1000c740:	438a      	bics	r2, r1
1000c742:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c744:	8919      	ldrh	r1, [r3, #8]
1000c746:	2220      	movs	r2, #32
1000c748:	430a      	orrs	r2, r1
1000c74a:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c74c:	2000      	movs	r0, #0
		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
		break;
1000c74e:	e078      	b.n	1000c842 <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c750:	4b0b      	ldr	r3, [pc, #44]	; (1000c780 <system_peripheral_reset+0x390>)
1000c752:	891a      	ldrh	r2, [r3, #8]
1000c754:	2140      	movs	r1, #64	; 0x40
1000c756:	438a      	bics	r2, r1
1000c758:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c75a:	8919      	ldrh	r1, [r3, #8]
1000c75c:	2240      	movs	r2, #64	; 0x40
1000c75e:	430a      	orrs	r2, r1
1000c760:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c762:	2000      	movs	r0, #0
		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
		break;
1000c764:	e06d      	b.n	1000c842 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c766:	4b06      	ldr	r3, [pc, #24]	; (1000c780 <system_peripheral_reset+0x390>)
1000c768:	891a      	ldrh	r2, [r3, #8]
1000c76a:	2180      	movs	r1, #128	; 0x80
1000c76c:	438a      	bics	r2, r1
1000c76e:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c770:	8919      	ldrh	r1, [r3, #8]
1000c772:	2280      	movs	r2, #128	; 0x80
1000c774:	430a      	orrs	r2, r1
1000c776:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c778:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
		break;
1000c77a:	e062      	b.n	1000c842 <system_peripheral_reset+0x452>
1000c77c:	10017cd4 	.word	0x10017cd4
1000c780:	4000b000 	.word	0x4000b000
1000c784:	fffffeff 	.word	0xfffffeff
1000c788:	fffffdff 	.word	0xfffffdff
1000c78c:	fffffbff 	.word	0xfffffbff
1000c790:	fffff7ff 	.word	0xfffff7ff
1000c794:	ffffefff 	.word	0xffffefff
1000c798:	ffffdfff 	.word	0xffffdfff
1000c79c:	ffffbfff 	.word	0xffffbfff
1000c7a0:	ffff7fff 	.word	0xffff7fff
1000c7a4:	fffeffff 	.word	0xfffeffff
1000c7a8:	fffdffff 	.word	0xfffdffff
1000c7ac:	fffbffff 	.word	0xfffbffff
1000c7b0:	fff7ffff 	.word	0xfff7ffff
1000c7b4:	ffefffff 	.word	0xffefffff
1000c7b8:	ffdfffff 	.word	0xffdfffff
1000c7bc:	ffbfffff 	.word	0xffbfffff
1000c7c0:	ff7fffff 	.word	0xff7fffff
1000c7c4:	feffffff 	.word	0xfeffffff
1000c7c8:	fdffffff 	.word	0xfdffffff
1000c7cc:	fbffffff 	.word	0xfbffffff
1000c7d0:	f7ffffff 	.word	0xf7ffffff
1000c7d4:	efffffff 	.word	0xefffffff
1000c7d8:	dfffffff 	.word	0xdfffffff
1000c7dc:	bfffffff 	.word	0xbfffffff

		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c7e0:	4b18      	ldr	r3, [pc, #96]	; (1000c844 <system_peripheral_reset+0x454>)
1000c7e2:	8919      	ldrh	r1, [r3, #8]
1000c7e4:	4a18      	ldr	r2, [pc, #96]	; (1000c848 <system_peripheral_reset+0x458>)
1000c7e6:	400a      	ands	r2, r1
1000c7e8:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c7ea:	8919      	ldrh	r1, [r3, #8]
1000c7ec:	2280      	movs	r2, #128	; 0x80
1000c7ee:	0052      	lsls	r2, r2, #1
1000c7f0:	430a      	orrs	r2, r1
1000c7f2:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c7f4:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
		break;
1000c7f6:	e024      	b.n	1000c842 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c7f8:	4b12      	ldr	r3, [pc, #72]	; (1000c844 <system_peripheral_reset+0x454>)
1000c7fa:	8919      	ldrh	r1, [r3, #8]
1000c7fc:	4a13      	ldr	r2, [pc, #76]	; (1000c84c <system_peripheral_reset+0x45c>)
1000c7fe:	400a      	ands	r2, r1
1000c800:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c802:	8919      	ldrh	r1, [r3, #8]
1000c804:	2280      	movs	r2, #128	; 0x80
1000c806:	0092      	lsls	r2, r2, #2
1000c808:	430a      	orrs	r2, r1
1000c80a:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c80c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
		break;
1000c80e:	e018      	b.n	1000c842 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c810:	4b0c      	ldr	r3, [pc, #48]	; (1000c844 <system_peripheral_reset+0x454>)
1000c812:	8919      	ldrh	r1, [r3, #8]
1000c814:	4a0e      	ldr	r2, [pc, #56]	; (1000c850 <system_peripheral_reset+0x460>)
1000c816:	400a      	ands	r2, r1
1000c818:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c81a:	8919      	ldrh	r1, [r3, #8]
1000c81c:	2280      	movs	r2, #128	; 0x80
1000c81e:	00d2      	lsls	r2, r2, #3
1000c820:	430a      	orrs	r2, r1
1000c822:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c824:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
		break;
1000c826:	e00c      	b.n	1000c842 <system_peripheral_reset+0x452>

		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c828:	4b06      	ldr	r3, [pc, #24]	; (1000c844 <system_peripheral_reset+0x454>)
1000c82a:	8919      	ldrh	r1, [r3, #8]
1000c82c:	4a09      	ldr	r2, [pc, #36]	; (1000c854 <system_peripheral_reset+0x464>)
1000c82e:	400a      	ands	r2, r1
1000c830:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c832:	8919      	ldrh	r1, [r3, #8]
1000c834:	2280      	movs	r2, #128	; 0x80
1000c836:	0112      	lsls	r2, r2, #4
1000c838:	430a      	orrs	r2, r1
1000c83a:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c83c:	2000      	movs	r0, #0
		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
		break;
1000c83e:	e000      	b.n	1000c842 <system_peripheral_reset+0x452>

		default:
			return STATUS_ERR_INVALID_ARG;
1000c840:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000c842:	bd00      	pop	{pc}
1000c844:	4000b000 	.word	0x4000b000
1000c848:	fffffeff 	.word	0xfffffeff
1000c84c:	fffffdff 	.word	0xfffffdff
1000c850:	fffffbff 	.word	0xfffffbff
1000c854:	fffff7ff 	.word	0xfffff7ff

1000c858 <system_register_isr>:
void system_register_isr(enum ram_isr_table_index isr_index,
		uint32_t isr_address)
{
	uint32_t *temp;
	temp = (uint32_t *)(isr_index * 4 + ISR_RAM_MAP_START_ADDRESS);
	*temp = isr_address;
1000c858:	2380      	movs	r3, #128	; 0x80
1000c85a:	04db      	lsls	r3, r3, #19
1000c85c:	469c      	mov	ip, r3
1000c85e:	4460      	add	r0, ip
1000c860:	0080      	lsls	r0, r0, #2
1000c862:	6001      	str	r1, [r0, #0]
}
1000c864:	4770      	bx	lr
1000c866:	46c0      	nop			; (mov r8, r8)

1000c868 <uart_rx0_isr_handler>:
	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
}

static void uart_rx0_isr_handler(void)
{
1000c868:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
1000c86a:	4b20      	ldr	r3, [pc, #128]	; (1000c8ec <uart_rx0_isr_handler+0x84>)
1000c86c:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000c86e:	6823      	ldr	r3, [r4, #0]
1000c870:	7d1d      	ldrb	r5, [r3, #20]
1000c872:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000c874:	066a      	lsls	r2, r5, #25
1000c876:	d513      	bpl.n	1000c8a0 <uart_rx0_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000c878:	211e      	movs	r1, #30
1000c87a:	2222      	movs	r2, #34	; 0x22
1000c87c:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000c87e:	7e1a      	ldrb	r2, [r3, #24]
1000c880:	3123      	adds	r1, #35	; 0x23
1000c882:	438a      	bics	r2, r1
1000c884:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000c886:	2321      	movs	r3, #33	; 0x21
1000c888:	5ce3      	ldrb	r3, [r4, r3]
1000c88a:	071b      	lsls	r3, r3, #28
1000c88c:	d506      	bpl.n	1000c89c <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000c88e:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000c890:	5ce3      	ldrb	r3, [r4, r3]
1000c892:	071b      	lsls	r3, r3, #28
1000c894:	d502      	bpl.n	1000c89c <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000c896:	0020      	movs	r0, r4
1000c898:	6923      	ldr	r3, [r4, #16]
1000c89a:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000c89c:	6823      	ldr	r3, [r4, #0]
1000c89e:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000c8a0:	07eb      	lsls	r3, r5, #31
1000c8a2:	d522      	bpl.n	1000c8ea <uart_rx0_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000c8a4:	6823      	ldr	r3, [r4, #0]
1000c8a6:	7c1b      	ldrb	r3, [r3, #16]
1000c8a8:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000c8aa:	6962      	ldr	r2, [r4, #20]
1000c8ac:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000c8ae:	6963      	ldr	r3, [r4, #20]
1000c8b0:	3301      	adds	r3, #1
1000c8b2:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000c8b4:	8ba3      	ldrh	r3, [r4, #28]
1000c8b6:	3b01      	subs	r3, #1
1000c8b8:	b29b      	uxth	r3, r3
1000c8ba:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
1000c8bc:	8ba3      	ldrh	r3, [r4, #28]
1000c8be:	b29b      	uxth	r3, r3
1000c8c0:	2b00      	cmp	r3, #0
1000c8c2:	d112      	bne.n	1000c8ea <uart_rx0_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000c8c4:	3321      	adds	r3, #33	; 0x21
1000c8c6:	5ce3      	ldrb	r3, [r4, r3]
1000c8c8:	075b      	lsls	r3, r3, #29
1000c8ca:	d50e      	bpl.n	1000c8ea <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000c8cc:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000c8ce:	5ce3      	ldrb	r3, [r4, r3]
1000c8d0:	075b      	lsls	r3, r3, #29
1000c8d2:	d50a      	bpl.n	1000c8ea <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000c8d4:	2200      	movs	r2, #0
1000c8d6:	2322      	movs	r3, #34	; 0x22
1000c8d8:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000c8da:	6822      	ldr	r2, [r4, #0]
1000c8dc:	7e13      	ldrb	r3, [r2, #24]
1000c8de:	2101      	movs	r1, #1
1000c8e0:	438b      	bics	r3, r1
1000c8e2:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000c8e4:	68e3      	ldr	r3, [r4, #12]
1000c8e6:	0020      	movs	r0, r4
1000c8e8:	4798      	blx	r3
			}
		}
	}
}
1000c8ea:	bd70      	pop	{r4, r5, r6, pc}
1000c8ec:	1001a718 	.word	0x1001a718

1000c8f0 <uart_tx0_isr_handler>:

static void uart_tx0_isr_handler(void)
{
1000c8f0:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
1000c8f2:	4b21      	ldr	r3, [pc, #132]	; (1000c978 <uart_tx0_isr_handler+0x88>)
1000c8f4:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000c8f6:	6823      	ldr	r3, [r4, #0]
1000c8f8:	791d      	ldrb	r5, [r3, #4]
1000c8fa:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000c8fc:	07ea      	lsls	r2, r5, #31
1000c8fe:	d517      	bpl.n	1000c930 <uart_tx0_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000c900:	69a2      	ldr	r2, [r4, #24]
1000c902:	7811      	ldrb	r1, [r2, #0]
1000c904:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000c906:	3201      	adds	r2, #1
1000c908:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000c90a:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000c90c:	8be3      	ldrh	r3, [r4, #30]
1000c90e:	3b01      	subs	r3, #1
1000c910:	b29b      	uxth	r3, r3
1000c912:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[0];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
1000c914:	8be3      	ldrh	r3, [r4, #30]
1000c916:	b29b      	uxth	r3, r3
1000c918:	2b00      	cmp	r3, #0
1000c91a:	d109      	bne.n	1000c930 <uart_tx0_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
1000c91c:	6822      	ldr	r2, [r4, #0]
1000c91e:	7a13      	ldrb	r3, [r2, #8]
1000c920:	2101      	movs	r1, #1
1000c922:	438b      	bics	r3, r1
1000c924:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000c926:	6822      	ldr	r2, [r4, #0]
1000c928:	7a11      	ldrb	r1, [r2, #8]
1000c92a:	2310      	movs	r3, #16
1000c92c:	430b      	orrs	r3, r1
1000c92e:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000c930:	06eb      	lsls	r3, r5, #27
1000c932:	d512      	bpl.n	1000c95a <uart_tx0_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000c934:	2321      	movs	r3, #33	; 0x21
1000c936:	5ce3      	ldrb	r3, [r4, r3]
1000c938:	07db      	lsls	r3, r3, #31
1000c93a:	d50e      	bpl.n	1000c95a <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000c93c:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000c93e:	5ce3      	ldrb	r3, [r4, r3]
1000c940:	07db      	lsls	r3, r3, #31
1000c942:	d50a      	bpl.n	1000c95a <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000c944:	2200      	movs	r2, #0
1000c946:	2322      	movs	r3, #34	; 0x22
1000c948:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000c94a:	6822      	ldr	r2, [r4, #0]
1000c94c:	7a13      	ldrb	r3, [r2, #8]
1000c94e:	2110      	movs	r1, #16
1000c950:	438b      	bics	r3, r1
1000c952:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000c954:	0020      	movs	r0, r4
1000c956:	6863      	ldr	r3, [r4, #4]
1000c958:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000c95a:	06ab      	lsls	r3, r5, #26
1000c95c:	d50a      	bpl.n	1000c974 <uart_tx0_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000c95e:	2321      	movs	r3, #33	; 0x21
1000c960:	5ce3      	ldrb	r3, [r4, r3]
1000c962:	079b      	lsls	r3, r3, #30
1000c964:	d506      	bpl.n	1000c974 <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
1000c966:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000c968:	5ce3      	ldrb	r3, [r4, r3]
1000c96a:	079b      	lsls	r3, r3, #30
1000c96c:	d502      	bpl.n	1000c974 <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000c96e:	68a3      	ldr	r3, [r4, #8]
1000c970:	0020      	movs	r0, r4
1000c972:	4798      	blx	r3
		}

	}
}
1000c974:	bd70      	pop	{r4, r5, r6, pc}
1000c976:	46c0      	nop			; (mov r8, r8)
1000c978:	1001a718 	.word	0x1001a718

1000c97c <uart_rx1_isr_handler>:

static void uart_rx1_isr_handler(void)
{
1000c97c:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
1000c97e:	4b20      	ldr	r3, [pc, #128]	; (1000ca00 <uart_rx1_isr_handler+0x84>)
1000c980:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000c982:	6823      	ldr	r3, [r4, #0]
1000c984:	7d1d      	ldrb	r5, [r3, #20]
1000c986:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000c988:	066a      	lsls	r2, r5, #25
1000c98a:	d513      	bpl.n	1000c9b4 <uart_rx1_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000c98c:	211e      	movs	r1, #30
1000c98e:	2222      	movs	r2, #34	; 0x22
1000c990:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000c992:	7e1a      	ldrb	r2, [r3, #24]
1000c994:	3123      	adds	r1, #35	; 0x23
1000c996:	438a      	bics	r2, r1
1000c998:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000c99a:	2321      	movs	r3, #33	; 0x21
1000c99c:	5ce3      	ldrb	r3, [r4, r3]
1000c99e:	071b      	lsls	r3, r3, #28
1000c9a0:	d506      	bpl.n	1000c9b0 <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000c9a2:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000c9a4:	5ce3      	ldrb	r3, [r4, r3]
1000c9a6:	071b      	lsls	r3, r3, #28
1000c9a8:	d502      	bpl.n	1000c9b0 <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000c9aa:	0020      	movs	r0, r4
1000c9ac:	6923      	ldr	r3, [r4, #16]
1000c9ae:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000c9b0:	6823      	ldr	r3, [r4, #0]
1000c9b2:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000c9b4:	07eb      	lsls	r3, r5, #31
1000c9b6:	d522      	bpl.n	1000c9fe <uart_rx1_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000c9b8:	6823      	ldr	r3, [r4, #0]
1000c9ba:	7c1b      	ldrb	r3, [r3, #16]
1000c9bc:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000c9be:	6962      	ldr	r2, [r4, #20]
1000c9c0:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000c9c2:	6963      	ldr	r3, [r4, #20]
1000c9c4:	3301      	adds	r3, #1
1000c9c6:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000c9c8:	8ba3      	ldrh	r3, [r4, #28]
1000c9ca:	3b01      	subs	r3, #1
1000c9cc:	b29b      	uxth	r3, r3
1000c9ce:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
1000c9d0:	8ba3      	ldrh	r3, [r4, #28]
1000c9d2:	b29b      	uxth	r3, r3
1000c9d4:	2b00      	cmp	r3, #0
1000c9d6:	d112      	bne.n	1000c9fe <uart_rx1_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000c9d8:	3321      	adds	r3, #33	; 0x21
1000c9da:	5ce3      	ldrb	r3, [r4, r3]
1000c9dc:	075b      	lsls	r3, r3, #29
1000c9de:	d50e      	bpl.n	1000c9fe <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000c9e0:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000c9e2:	5ce3      	ldrb	r3, [r4, r3]
1000c9e4:	075b      	lsls	r3, r3, #29
1000c9e6:	d50a      	bpl.n	1000c9fe <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000c9e8:	2200      	movs	r2, #0
1000c9ea:	2322      	movs	r3, #34	; 0x22
1000c9ec:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000c9ee:	6822      	ldr	r2, [r4, #0]
1000c9f0:	7e13      	ldrb	r3, [r2, #24]
1000c9f2:	2101      	movs	r1, #1
1000c9f4:	438b      	bics	r3, r1
1000c9f6:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000c9f8:	68e3      	ldr	r3, [r4, #12]
1000c9fa:	0020      	movs	r0, r4
1000c9fc:	4798      	blx	r3
			}
		}
	}
}
1000c9fe:	bd70      	pop	{r4, r5, r6, pc}
1000ca00:	1001a718 	.word	0x1001a718

1000ca04 <uart_tx1_isr_handler>:

static void uart_tx1_isr_handler(void)
{
1000ca04:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
1000ca06:	4b21      	ldr	r3, [pc, #132]	; (1000ca8c <uart_tx1_isr_handler+0x88>)
1000ca08:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000ca0a:	6823      	ldr	r3, [r4, #0]
1000ca0c:	791d      	ldrb	r5, [r3, #4]
1000ca0e:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000ca10:	07ea      	lsls	r2, r5, #31
1000ca12:	d517      	bpl.n	1000ca44 <uart_tx1_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000ca14:	69a2      	ldr	r2, [r4, #24]
1000ca16:	7811      	ldrb	r1, [r2, #0]
1000ca18:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000ca1a:	3201      	adds	r2, #1
1000ca1c:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000ca1e:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000ca20:	8be3      	ldrh	r3, [r4, #30]
1000ca22:	3b01      	subs	r3, #1
1000ca24:	b29b      	uxth	r3, r3
1000ca26:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[1];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
1000ca28:	8be3      	ldrh	r3, [r4, #30]
1000ca2a:	b29b      	uxth	r3, r3
1000ca2c:	2b00      	cmp	r3, #0
1000ca2e:	d109      	bne.n	1000ca44 <uart_tx1_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
1000ca30:	6822      	ldr	r2, [r4, #0]
1000ca32:	7a13      	ldrb	r3, [r2, #8]
1000ca34:	2101      	movs	r1, #1
1000ca36:	438b      	bics	r3, r1
1000ca38:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000ca3a:	6822      	ldr	r2, [r4, #0]
1000ca3c:	7a11      	ldrb	r1, [r2, #8]
1000ca3e:	2310      	movs	r3, #16
1000ca40:	430b      	orrs	r3, r1
1000ca42:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000ca44:	06eb      	lsls	r3, r5, #27
1000ca46:	d512      	bpl.n	1000ca6e <uart_tx1_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000ca48:	2321      	movs	r3, #33	; 0x21
1000ca4a:	5ce3      	ldrb	r3, [r4, r3]
1000ca4c:	07db      	lsls	r3, r3, #31
1000ca4e:	d50e      	bpl.n	1000ca6e <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000ca50:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000ca52:	5ce3      	ldrb	r3, [r4, r3]
1000ca54:	07db      	lsls	r3, r3, #31
1000ca56:	d50a      	bpl.n	1000ca6e <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000ca58:	2200      	movs	r2, #0
1000ca5a:	2322      	movs	r3, #34	; 0x22
1000ca5c:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000ca5e:	6822      	ldr	r2, [r4, #0]
1000ca60:	7a13      	ldrb	r3, [r2, #8]
1000ca62:	2110      	movs	r1, #16
1000ca64:	438b      	bics	r3, r1
1000ca66:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000ca68:	0020      	movs	r0, r4
1000ca6a:	6863      	ldr	r3, [r4, #4]
1000ca6c:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000ca6e:	06ab      	lsls	r3, r5, #26
1000ca70:	d50a      	bpl.n	1000ca88 <uart_tx1_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000ca72:	2321      	movs	r3, #33	; 0x21
1000ca74:	5ce3      	ldrb	r3, [r4, r3]
1000ca76:	079b      	lsls	r3, r3, #30
1000ca78:	d506      	bpl.n	1000ca88 <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
1000ca7a:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000ca7c:	5ce3      	ldrb	r3, [r4, r3]
1000ca7e:	079b      	lsls	r3, r3, #30
1000ca80:	d502      	bpl.n	1000ca88 <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000ca82:	68a3      	ldr	r3, [r4, #8]
1000ca84:	0020      	movs	r0, r4
1000ca86:	4798      	blx	r3
		}

	}
}
1000ca88:	bd70      	pop	{r4, r5, r6, pc}
1000ca8a:	46c0      	nop			; (mov r8, r8)
1000ca8c:	1001a718 	.word	0x1001a718

1000ca90 <uart_get_config_defaults>:
 * \param[out] config  Pointer to configuration structure to be initiated
 */
void uart_get_config_defaults(
		struct uart_config *const config)
{
	config->baud_rate = 115200;
1000ca90:	23e1      	movs	r3, #225	; 0xe1
1000ca92:	025b      	lsls	r3, r3, #9
1000ca94:	6003      	str	r3, [r0, #0]
	config->data_bits = UART_8_BITS;
1000ca96:	2300      	movs	r3, #0
1000ca98:	7103      	strb	r3, [r0, #4]
	config->stop_bits = UART_1_STOP_BIT;
1000ca9a:	7143      	strb	r3, [r0, #5]
	config->parity = UART_NO_PARITY;
1000ca9c:	7183      	strb	r3, [r0, #6]
	config->flow_control = false;
1000ca9e:	71c3      	strb	r3, [r0, #7]

	config->pin_number_pad[0] = PIN_LP_GPIO_2;
1000caa0:	3302      	adds	r3, #2
1000caa2:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_3;
1000caa4:	2203      	movs	r2, #3
1000caa6:	60c2      	str	r2, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_4;
1000caa8:	3201      	adds	r2, #1
1000caaa:	6102      	str	r2, [r0, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_5;
1000caac:	3201      	adds	r2, #1
1000caae:	6142      	str	r2, [r0, #20]

	config->pinmux_sel_pad[0] = MUX_LP_GPIO_2_UART0_RXD;
1000cab0:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_3_UART0_TXD;
1000cab2:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_4_UART0_CTS;
1000cab4:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_5_UART0_RTS;
1000cab6:	6243      	str	r3, [r0, #36]	; 0x24
}
1000cab8:	4770      	bx	lr
1000caba:	46c0      	nop			; (mov r8, r8)

1000cabc <uart_init>:
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000cabc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000cabe:	464f      	mov	r7, r9
1000cac0:	4646      	mov	r6, r8
1000cac2:	b4c0      	push	{r6, r7}
1000cac4:	0005      	movs	r5, r0
1000cac6:	0017      	movs	r7, r2

	uint8_t config_temp = 0;
	uint8_t i,index;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
1000cac8:	6001      	str	r1, [r0, #0]

	for (i = 0; i < UART_CALLBACK_N; i++) {
		module->callback[i] = NULL;
1000caca:	2300      	movs	r3, #0
1000cacc:	6043      	str	r3, [r0, #4]
1000cace:	6083      	str	r3, [r0, #8]
1000cad0:	60c3      	str	r3, [r0, #12]
1000cad2:	6103      	str	r3, [r0, #16]
	}
	module->rx_buffer_ptr = NULL;
1000cad4:	6143      	str	r3, [r0, #20]
	module->tx_buffer_ptr = NULL;
1000cad6:	6183      	str	r3, [r0, #24]
	module->remaining_rx_buffer_length = 0;
1000cad8:	2200      	movs	r2, #0
1000cada:	8383      	strh	r3, [r0, #28]
	module->remaining_tx_buffer_length = 0;
1000cadc:	83c3      	strh	r3, [r0, #30]
	module->callback_reg_mask = 0;
1000cade:	3320      	adds	r3, #32
1000cae0:	54c2      	strb	r2, [r0, r3]
	module->callback_enable_mask = 0;
1000cae2:	3301      	adds	r3, #1
1000cae4:	54c2      	strb	r2, [r0, r3]
	module->status = STATUS_OK;
1000cae6:	3301      	adds	r3, #1
1000cae8:	54c2      	strb	r2, [r0, r3]

	if (hw == UART0) {
1000caea:	4b55      	ldr	r3, [pc, #340]	; (1000cc40 <uart_init+0x184>)
1000caec:	4299      	cmp	r1, r3
1000caee:	d118      	bne.n	1000cb22 <uart_init+0x66>
		system_peripheral_reset(PERIPHERAL_UART0_CORE);
1000caf0:	2009      	movs	r0, #9
1000caf2:	4c54      	ldr	r4, [pc, #336]	; (1000cc44 <uart_init+0x188>)
1000caf4:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART0_IF);
1000caf6:	200a      	movs	r0, #10
1000caf8:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_CORE);
1000cafa:	2009      	movs	r0, #9
1000cafc:	4c52      	ldr	r4, [pc, #328]	; (1000cc48 <uart_init+0x18c>)
1000cafe:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_IF);
1000cb00:	200a      	movs	r0, #10
1000cb02:	47a0      	blx	r4
		_uart_instances[0] = module;
1000cb04:	4b51      	ldr	r3, [pc, #324]	; (1000cc4c <uart_init+0x190>)
1000cb06:	601d      	str	r5, [r3, #0]
		system_register_isr(RAM_ISR_TABLE_UARTRX0_INDEX, (uint32_t)uart_rx0_isr_handler);
1000cb08:	4951      	ldr	r1, [pc, #324]	; (1000cc50 <uart_init+0x194>)
1000cb0a:	2010      	movs	r0, #16
1000cb0c:	4c51      	ldr	r4, [pc, #324]	; (1000cc54 <uart_init+0x198>)
1000cb0e:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX0_INDEX, (uint32_t)uart_tx0_isr_handler);
1000cb10:	4951      	ldr	r1, [pc, #324]	; (1000cc58 <uart_init+0x19c>)
1000cb12:	2011      	movs	r0, #17
1000cb14:	47a0      	blx	r4
1000cb16:	4b51      	ldr	r3, [pc, #324]	; (1000cc5c <uart_init+0x1a0>)
1000cb18:	2201      	movs	r2, #1
1000cb1a:	601a      	str	r2, [r3, #0]
1000cb1c:	3201      	adds	r2, #1
1000cb1e:	601a      	str	r2, [r3, #0]
1000cb20:	e01a      	b.n	1000cb58 <uart_init+0x9c>
		NVIC_EnableIRQ(UART0_RX_IRQn);
		NVIC_EnableIRQ(UART0_TX_IRQn);
	} else if (hw == UART1) {
1000cb22:	4b4f      	ldr	r3, [pc, #316]	; (1000cc60 <uart_init+0x1a4>)
1000cb24:	4299      	cmp	r1, r3
1000cb26:	d117      	bne.n	1000cb58 <uart_init+0x9c>
		system_peripheral_reset(PERIPHERAL_UART1_CORE);
1000cb28:	200b      	movs	r0, #11
1000cb2a:	4c46      	ldr	r4, [pc, #280]	; (1000cc44 <uart_init+0x188>)
1000cb2c:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART1_IF);
1000cb2e:	200c      	movs	r0, #12
1000cb30:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_CORE);
1000cb32:	200b      	movs	r0, #11
1000cb34:	4c44      	ldr	r4, [pc, #272]	; (1000cc48 <uart_init+0x18c>)
1000cb36:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_IF);
1000cb38:	200c      	movs	r0, #12
1000cb3a:	47a0      	blx	r4
		_uart_instances[1] = module;
1000cb3c:	4b43      	ldr	r3, [pc, #268]	; (1000cc4c <uart_init+0x190>)
1000cb3e:	605d      	str	r5, [r3, #4]
		system_register_isr(RAM_ISR_TABLE_UARTRX1_INDEX, (uint32_t)uart_rx1_isr_handler);
1000cb40:	4948      	ldr	r1, [pc, #288]	; (1000cc64 <uart_init+0x1a8>)
1000cb42:	2012      	movs	r0, #18
1000cb44:	4c43      	ldr	r4, [pc, #268]	; (1000cc54 <uart_init+0x198>)
1000cb46:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX1_INDEX, (uint32_t)uart_tx1_isr_handler);
1000cb48:	4947      	ldr	r1, [pc, #284]	; (1000cc68 <uart_init+0x1ac>)
1000cb4a:	2013      	movs	r0, #19
1000cb4c:	47a0      	blx	r4
1000cb4e:	4b43      	ldr	r3, [pc, #268]	; (1000cc5c <uart_init+0x1a0>)
1000cb50:	2204      	movs	r2, #4
1000cb52:	601a      	str	r2, [r3, #0]
1000cb54:	3204      	adds	r2, #4
1000cb56:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000cb58:	79fb      	ldrb	r3, [r7, #7]
		index = 4;
1000cb5a:	2204      	movs	r2, #4
1000cb5c:	4690      	mov	r8, r2
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000cb5e:	2b00      	cmp	r3, #0
1000cb60:	d152      	bne.n	1000cc08 <uart_init+0x14c>
		index = 4;
	} else {
		index = 2;
1000cb62:	3302      	adds	r3, #2
1000cb64:	4698      	mov	r8, r3
1000cb66:	e04f      	b.n	1000cc08 <uart_init+0x14c>
#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000cb68:	8a31      	ldrh	r1, [r6, #16]
1000cb6a:	ce01      	ldmia	r6!, {r0}
1000cb6c:	b2c0      	uxtb	r0, r0
1000cb6e:	47c8      	blx	r9

#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
1000cb70:	3401      	adds	r4, #1
1000cb72:	b2e4      	uxtb	r4, r4
1000cb74:	4544      	cmp	r4, r8
1000cb76:	d3f7      	bcc.n	1000cb68 <uart_init+0xac>
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000cb78:	682b      	ldr	r3, [r5, #0]
1000cb7a:	7d1a      	ldrb	r2, [r3, #20]
1000cb7c:	07d2      	lsls	r2, r2, #31
1000cb7e:	d504      	bpl.n	1000cb8a <uart_init+0xce>
1000cb80:	2101      	movs	r1, #1
		i = module->hw->RECEIVE_DATA.reg;
1000cb82:	7c1a      	ldrb	r2, [r3, #16]
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000cb84:	7d1a      	ldrb	r2, [r3, #20]
1000cb86:	420a      	tst	r2, r1
1000cb88:	d1fb      	bne.n	1000cb82 <uart_init+0xc6>
		i = module->hw->RECEIVE_DATA.reg;
	}
	
	/* reset configuration register */
	module->hw->UART_CONFIGURATION.reg = 0;
1000cb8a:	2100      	movs	r1, #0
1000cb8c:	2220      	movs	r2, #32
1000cb8e:	5499      	strb	r1, [r3, r2]

	/* program the uart configuration. */
	if(config->flow_control) {
1000cb90:	79fb      	ldrb	r3, [r7, #7]
		config_temp |= UART_CONFIGURATION_CTS_ENABLE_1;
1000cb92:	1e59      	subs	r1, r3, #1
1000cb94:	418b      	sbcs	r3, r1
1000cb96:	0159      	lsls	r1, r3, #5
	}
	config_temp |= config->data_bits;
	config_temp |= config->stop_bits;
1000cb98:	793b      	ldrb	r3, [r7, #4]
1000cb9a:	797a      	ldrb	r2, [r7, #5]
1000cb9c:	4313      	orrs	r3, r2
1000cb9e:	430b      	orrs	r3, r1
	switch(config->parity) {
1000cba0:	79ba      	ldrb	r2, [r7, #6]
1000cba2:	2a02      	cmp	r2, #2
1000cba4:	d00d      	beq.n	1000cbc2 <uart_init+0x106>
1000cba6:	b2d1      	uxtb	r1, r2
1000cba8:	2902      	cmp	r1, #2
1000cbaa:	d802      	bhi.n	1000cbb2 <uart_init+0xf6>
1000cbac:	2a01      	cmp	r2, #1
1000cbae:	d005      	beq.n	1000cbbc <uart_init+0x100>
1000cbb0:	e00f      	b.n	1000cbd2 <uart_init+0x116>
1000cbb2:	2a03      	cmp	r2, #3
1000cbb4:	d008      	beq.n	1000cbc8 <uart_init+0x10c>
1000cbb6:	2a04      	cmp	r2, #4
1000cbb8:	d009      	beq.n	1000cbce <uart_init+0x112>
1000cbba:	e00a      	b.n	1000cbd2 <uart_init+0x116>
		case UART_NO_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_0;
			break;

		case UART_EVEN_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
1000cbbc:	2202      	movs	r2, #2
1000cbbe:	4313      	orrs	r3, r2
			config_temp |= UART_CONFIGURATION_PARITY_MODE_0;
			break;
1000cbc0:	e007      	b.n	1000cbd2 <uart_init+0x116>

		case UART_ODD_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_1;
1000cbc2:	2206      	movs	r2, #6
1000cbc4:	4313      	orrs	r3, r2
			break;
1000cbc6:	e004      	b.n	1000cbd2 <uart_init+0x116>

		case UART_SPACE_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_2;
1000cbc8:	220a      	movs	r2, #10
1000cbca:	4313      	orrs	r3, r2
			break;
1000cbcc:	e001      	b.n	1000cbd2 <uart_init+0x116>

		case UART_MARK_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_3;
1000cbce:	220e      	movs	r2, #14
1000cbd0:	4313      	orrs	r3, r2
			break;

		default:
			break;
	}	
	module->hw->UART_CONFIGURATION.reg = config_temp;
1000cbd2:	2220      	movs	r2, #32
1000cbd4:	6829      	ldr	r1, [r5, #0]
1000cbd6:	548b      	strb	r3, [r1, r2]

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);
1000cbd8:	683e      	ldr	r6, [r7, #0]
	uint16_t integerpart = 0;
	uint8_t fractionalpart = 0;
	uint32_t diff;
	uint8_t i = 0;

	clock = system_clock_get_value();
1000cbda:	4b24      	ldr	r3, [pc, #144]	; (1000cc6c <uart_init+0x1b0>)
1000cbdc:	4798      	blx	r3
1000cbde:	0004      	movs	r4, r0
	integerpart = clock / baud_rate;
1000cbe0:	0031      	movs	r1, r6
1000cbe2:	4b23      	ldr	r3, [pc, #140]	; (1000cc70 <uart_init+0x1b4>)
1000cbe4:	4798      	blx	r3
1000cbe6:	b282      	uxth	r2, r0
	diff = clock - (baud_rate * integerpart);
1000cbe8:	0400      	lsls	r0, r0, #16
1000cbea:	0c00      	lsrs	r0, r0, #16
1000cbec:	4370      	muls	r0, r6
1000cbee:	1a20      	subs	r0, r4, r0
	i = 0;
	while(diff > (baud_rate / 16)) {
1000cbf0:	0931      	lsrs	r1, r6, #4
1000cbf2:	4288      	cmp	r0, r1
1000cbf4:	d906      	bls.n	1000cc04 <uart_init+0x148>
1000cbf6:	2300      	movs	r3, #0
		i++;
1000cbf8:	3301      	adds	r3, #1
1000cbfa:	b2db      	uxtb	r3, r3
		diff -= (baud_rate / 16);
1000cbfc:	1a40      	subs	r0, r0, r1

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
	while(diff > (baud_rate / 16)) {
1000cbfe:	4288      	cmp	r0, r1
1000cc00:	d8fa      	bhi.n	1000cbf8 <uart_init+0x13c>
1000cc02:	e007      	b.n	1000cc14 <uart_init+0x158>
	uint8_t i = 0;

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
1000cc04:	2300      	movs	r3, #0
1000cc06:	e005      	b.n	1000cc14 <uart_init+0x158>
1000cc08:	003e      	movs	r6, r7
1000cc0a:	3608      	adds	r6, #8
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000cc0c:	2400      	movs	r4, #0
#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000cc0e:	4b19      	ldr	r3, [pc, #100]	; (1000cc74 <uart_init+0x1b8>)
1000cc10:	4699      	mov	r9, r3
1000cc12:	e7a9      	b.n	1000cb68 <uart_init+0xac>
		i++;
		diff -= (baud_rate / 16);
	}
	fractionalpart = (i + 1) / 2;

	module->hw->UART_CLOCK_SOURCE.reg = UART_CLOCK_SOURCE_CLOCK_SELECT_0;
1000cc14:	2100      	movs	r1, #0
1000cc16:	2028      	movs	r0, #40	; 0x28
1000cc18:	682c      	ldr	r4, [r5, #0]
1000cc1a:	5421      	strb	r1, [r4, r0]
	module->hw->UART_BAUD_RATE.reg =
1000cc1c:	3301      	adds	r3, #1
1000cc1e:	071b      	lsls	r3, r3, #28
1000cc20:	0f5b      	lsrs	r3, r3, #29
1000cc22:	00d2      	lsls	r2, r2, #3
1000cc24:	4313      	orrs	r3, r2
1000cc26:	b29b      	uxth	r3, r3
1000cc28:	682a      	ldr	r2, [r5, #0]
1000cc2a:	8493      	strh	r3, [r2, #36]	; 0x24
	module->hw->UART_CONFIGURATION.reg = config_temp;

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);

	module->hw->RX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at read time
1000cc2c:	682b      	ldr	r3, [r5, #0]
1000cc2e:	7619      	strb	r1, [r3, #24]
	module->hw->TX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at write time
1000cc30:	682b      	ldr	r3, [r5, #0]
1000cc32:	7219      	strb	r1, [r3, #8]
	
	return STATUS_OK;
}
1000cc34:	2000      	movs	r0, #0
1000cc36:	bc0c      	pop	{r2, r3}
1000cc38:	4690      	mov	r8, r2
1000cc3a:	4699      	mov	r9, r3
1000cc3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000cc3e:	46c0      	nop			; (mov r8, r8)
1000cc40:	40004000 	.word	0x40004000
1000cc44:	1000c3f1 	.word	0x1000c3f1
1000cc48:	1000bd29 	.word	0x1000bd29
1000cc4c:	1001a718 	.word	0x1001a718
1000cc50:	1000c869 	.word	0x1000c869
1000cc54:	1000c859 	.word	0x1000c859
1000cc58:	1000c8f1 	.word	0x1000c8f1
1000cc5c:	e000e100 	.word	0xe000e100
1000cc60:	40005000 	.word	0x40005000
1000cc64:	1000c97d 	.word	0x1000c97d
1000cc68:	1000ca05 	.word	0x1000ca05
1000cc6c:	1000bd1d 	.word	0x1000bd1d
1000cc70:	10013591 	.word	0x10013591
1000cc74:	1000b979 	.word	0x1000b979

1000cc78 <uart_write_wait>:
* \retval STATUS_OK         If the operation was completed
*/
enum status_code uart_write_wait(struct uart_module *const module,
		const uint8_t tx_data)
{
	while (!(module->hw->TRANSMIT_STATUS.reg & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL));
1000cc78:	6802      	ldr	r2, [r0, #0]
1000cc7a:	2001      	movs	r0, #1
1000cc7c:	7913      	ldrb	r3, [r2, #4]
1000cc7e:	4203      	tst	r3, r0
1000cc80:	d0fc      	beq.n	1000cc7c <uart_write_wait+0x4>

	module->hw->TRANSMIT_DATA.reg = tx_data;
1000cc82:	7011      	strb	r1, [r2, #0]
	
	return STATUS_OK;
}
1000cc84:	2000      	movs	r0, #0
1000cc86:	4770      	bx	lr

1000cc88 <uart_read_wait>:
* \retval STATUS_OK                If the operation was completed
*/
enum status_code uart_read_wait(struct uart_module *const module,
		uint8_t *const rx_data)
{
	while (!(module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY));
1000cc88:	6802      	ldr	r2, [r0, #0]
1000cc8a:	2001      	movs	r0, #1
1000cc8c:	7d13      	ldrb	r3, [r2, #20]
1000cc8e:	4203      	tst	r3, r0
1000cc90:	d0fc      	beq.n	1000cc8c <uart_read_wait+0x4>

	*rx_data = module->hw->RECEIVE_DATA.reg;
1000cc92:	7c13      	ldrb	r3, [r2, #16]
1000cc94:	700b      	strb	r3, [r1, #0]
	
	return STATUS_OK;
}
1000cc96:	2000      	movs	r0, #0
1000cc98:	4770      	bx	lr
1000cc9a:	46c0      	nop			; (mov r8, r8)

1000cc9c <uart_read_buffer_job>:
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
1000cc9c:	2317      	movs	r3, #23
{
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
1000cc9e:	2a00      	cmp	r2, #0
1000cca0:	d00d      	beq.n	1000ccbe <uart_read_buffer_job+0x22>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check if the UART is busy transmitting or slave waiting for TXC*/
	if (module->status == STATUS_BUSY) {
1000cca2:	330b      	adds	r3, #11
1000cca4:	5cc3      	ldrb	r3, [r0, r3]
1000cca6:	b2db      	uxtb	r3, r3
1000cca8:	2b05      	cmp	r3, #5
1000ccaa:	d008      	beq.n	1000ccbe <uart_read_buffer_job+0x22>
	Assert(module);
	Assert(rx_data);

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
1000ccac:	8382      	strh	r2, [r0, #28]
	module->rx_buffer_ptr = rx_data;
1000ccae:	6141      	str	r1, [r0, #20]
	module->status = STATUS_BUSY;
1000ccb0:	2205      	movs	r2, #5
1000ccb2:	2322      	movs	r3, #34	; 0x22
1000ccb4:	54c2      	strb	r2, [r0, r3]

	module->hw->RX_INTERRUPT_MASK.reg = UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK;
1000ccb6:	6803      	ldr	r3, [r0, #0]
1000ccb8:	3a04      	subs	r2, #4
1000ccba:	761a      	strb	r2, [r3, #24]
		return STATUS_BUSY;
	}

	/* Issue internal read */
	_uart_read_buffer(module, rx_data, length);
	return STATUS_OK;
1000ccbc:	2300      	movs	r3, #0
}
1000ccbe:	0018      	movs	r0, r3
1000ccc0:	4770      	bx	lr
1000ccc2:	46c0      	nop			; (mov r8, r8)

1000ccc4 <uart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
1000ccc4:	0093      	lsls	r3, r2, #2
1000ccc6:	18c3      	adds	r3, r0, r3
1000ccc8:	6059      	str	r1, [r3, #4]
	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
1000ccca:	2120      	movs	r1, #32
1000cccc:	2301      	movs	r3, #1
1000ccce:	4093      	lsls	r3, r2
1000ccd0:	5c42      	ldrb	r2, [r0, r1]
1000ccd2:	4313      	orrs	r3, r2
1000ccd4:	5443      	strb	r3, [r0, r1]
}
1000ccd6:	4770      	bx	lr

1000ccd8 <uart_enable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_enable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000ccd8:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
1000ccda:	2221      	movs	r2, #33	; 0x21
1000ccdc:	2301      	movs	r3, #1
1000ccde:	408b      	lsls	r3, r1
1000cce0:	5c84      	ldrb	r4, [r0, r2]
1000cce2:	4323      	orrs	r3, r4
1000cce4:	5483      	strb	r3, [r0, r2]

	if (callback_type == UART_CTS_ACTIVE) {
1000cce6:	2901      	cmp	r1, #1
1000cce8:	d104      	bne.n	1000ccf4 <uart_enable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg |= UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000ccea:	6802      	ldr	r2, [r0, #0]
1000ccec:	7a11      	ldrb	r1, [r2, #8]
1000ccee:	2320      	movs	r3, #32
1000ccf0:	430b      	orrs	r3, r1
1000ccf2:	7213      	strb	r3, [r2, #8]
	}
}
1000ccf4:	bd10      	pop	{r4, pc}
1000ccf6:	46c0      	nop			; (mov r8, r8)

1000ccf8 <uart_disable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_disable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000ccf8:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
1000ccfa:	2201      	movs	r2, #1
1000ccfc:	408a      	lsls	r2, r1
1000ccfe:	2421      	movs	r4, #33	; 0x21
1000cd00:	5d03      	ldrb	r3, [r0, r4]
1000cd02:	4393      	bics	r3, r2
1000cd04:	5503      	strb	r3, [r0, r4]

	if (callback_type == UART_CTS_ACTIVE) {
1000cd06:	2901      	cmp	r1, #1
1000cd08:	d104      	bne.n	1000cd14 <uart_disable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg &= ~UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000cd0a:	6802      	ldr	r2, [r0, #0]
1000cd0c:	7a13      	ldrb	r3, [r2, #8]
1000cd0e:	311f      	adds	r1, #31
1000cd10:	438b      	bics	r3, r1
1000cd12:	7213      	strb	r3, [r2, #8]
	}

}
1000cd14:	bd10      	pop	{r4, pc}
1000cd16:	46c0      	nop			; (mov r8, r8)

1000cd18 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
1000cd18:	b5f0      	push	{r4, r5, r6, r7, lr}
1000cd1a:	4647      	mov	r7, r8
1000cd1c:	b480      	push	{r7}
1000cd1e:	000c      	movs	r4, r1
1000cd20:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
1000cd22:	2800      	cmp	r0, #0
1000cd24:	d10d      	bne.n	1000cd42 <_read+0x2a>
		return -1;
	}

	for (; len > 0; --len) {
1000cd26:	2a00      	cmp	r2, #0
1000cd28:	dd0e      	ble.n	1000cd48 <_read+0x30>
1000cd2a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
1000cd2c:	4e08      	ldr	r6, [pc, #32]	; (1000cd50 <_read+0x38>)
1000cd2e:	4d09      	ldr	r5, [pc, #36]	; (1000cd54 <_read+0x3c>)
1000cd30:	6830      	ldr	r0, [r6, #0]
1000cd32:	0021      	movs	r1, r4
1000cd34:	682b      	ldr	r3, [r5, #0]
1000cd36:	4798      	blx	r3
		ptr++;
1000cd38:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
1000cd3a:	42a7      	cmp	r7, r4
1000cd3c:	d1f8      	bne.n	1000cd30 <_read+0x18>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
1000cd3e:	4640      	mov	r0, r8
1000cd40:	e003      	b.n	1000cd4a <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
1000cd42:	2001      	movs	r0, #1
1000cd44:	4240      	negs	r0, r0
1000cd46:	e000      	b.n	1000cd4a <_read+0x32>
	}

	for (; len > 0; --len) {
1000cd48:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
1000cd4a:	bc04      	pop	{r2}
1000cd4c:	4690      	mov	r8, r2
1000cd4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000cd50:	1001a728 	.word	0x1001a728
1000cd54:	1001a720 	.word	0x1001a720

1000cd58 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
1000cd58:	b5f0      	push	{r4, r5, r6, r7, lr}
1000cd5a:	4647      	mov	r7, r8
1000cd5c:	b480      	push	{r7}
1000cd5e:	000e      	movs	r6, r1
1000cd60:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
1000cd62:	3801      	subs	r0, #1
1000cd64:	2802      	cmp	r0, #2
1000cd66:	d811      	bhi.n	1000cd8c <_write+0x34>
		return -1;
	}

	for (; len != 0; --len) {
1000cd68:	2a00      	cmp	r2, #0
1000cd6a:	d012      	beq.n	1000cd92 <_write+0x3a>
1000cd6c:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
1000cd6e:	4b0c      	ldr	r3, [pc, #48]	; (1000cda0 <_write+0x48>)
1000cd70:	4698      	mov	r8, r3
1000cd72:	4f0c      	ldr	r7, [pc, #48]	; (1000cda4 <_write+0x4c>)
1000cd74:	4643      	mov	r3, r8
1000cd76:	6818      	ldr	r0, [r3, #0]
1000cd78:	5d31      	ldrb	r1, [r6, r4]
1000cd7a:	683b      	ldr	r3, [r7, #0]
1000cd7c:	4798      	blx	r3
1000cd7e:	2800      	cmp	r0, #0
1000cd80:	db09      	blt.n	1000cd96 <_write+0x3e>
			return -1;
		}
		++nChars;
1000cd82:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
1000cd84:	42a5      	cmp	r5, r4
1000cd86:	d1f5      	bne.n	1000cd74 <_write+0x1c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
1000cd88:	0020      	movs	r0, r4
1000cd8a:	e006      	b.n	1000cd9a <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
1000cd8c:	2001      	movs	r0, #1
1000cd8e:	4240      	negs	r0, r0
1000cd90:	e003      	b.n	1000cd9a <_write+0x42>
	}

	for (; len != 0; --len) {
1000cd92:	2000      	movs	r0, #0
1000cd94:	e001      	b.n	1000cd9a <_write+0x42>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
1000cd96:	2001      	movs	r0, #1
1000cd98:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
1000cd9a:	bc04      	pop	{r2}
1000cd9c:	4690      	mov	r8, r2
1000cd9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000cda0:	1001a728 	.word	0x1001a728
1000cda4:	1001a724 	.word	0x1001a724

1000cda8 <ble_undefined_event_handler>:
at_ble_status_t ble_undefined_event_handler(void *params)
{
	DBG_LOG_DEV("Undefined Event Received");
    ALL_UNUSED(params);
	return AT_BLE_SUCCESS;
}
1000cda8:	2000      	movs	r0, #0
1000cdaa:	4770      	bx	lr

1000cdac <ble_mtu_changed_indication_handler>:
	mtu_changed_ind = (at_ble_mtu_changed_ind_t *)params;
	DBG_LOG_DEV("BLE-MTU Changed, Connection Handle: %d, New Value: %d", 
										mtu_changed_ind->conhdl, 
										mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
}
1000cdac:	2000      	movs	r0, #0
1000cdae:	4770      	bx	lr

1000cdb0 <ble_characteristic_write_cmd_complete_handler>:

at_ble_status_t ble_characteristic_write_cmd_complete_handler(void *params)
{
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
1000cdb0:	78c0      	ldrb	r0, [r0, #3]
1000cdb2:	2800      	cmp	r0, #0
1000cdb4:	d000      	beq.n	1000cdb8 <ble_characteristic_write_cmd_complete_handler+0x8>
	{
		DBG_LOG_DEV("Char Write Cmd Failed, Connection Handle:%d, Operation:%d",
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
1000cdb6:	20e2      	movs	r0, #226	; 0xe2
}
1000cdb8:	4770      	bx	lr
1000cdba:	46c0      	nop			; (mov r8, r8)

1000cdbc <ble_conn_param_update>:
	at_ble_conn_param_update_done_t * conn_param_update;
	conn_param_update = (at_ble_conn_param_update_done_t *)params;
	DBG_LOG_DEV("AT_BLE_CONN_PARAM_UPDATE ");
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}
1000cdbc:	2000      	movs	r0, #0
1000cdbe:	4770      	bx	lr

1000cdc0 <ble_scan_report_handler>:
	}
}

/** @brief function handles scan report */
at_ble_status_t ble_scan_report_handler(void *params)
{
1000cdc0:	b510      	push	{r4, lr}
	at_ble_scan_report_t *scan_report;
	scan_report = (at_ble_scan_report_t *)params;
	if (scan_report->status == AT_BLE_SUCCESS)
1000cdc2:	7800      	ldrb	r0, [r0, #0]
1000cdc4:	2800      	cmp	r0, #0
1000cdc6:	d006      	beq.n	1000cdd6 <ble_scan_report_handler+0x16>
		/* All scan data should be handled */
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Scanning  failed");
1000cdc8:	4803      	ldr	r0, [pc, #12]	; (1000cdd8 <ble_scan_report_handler+0x18>)
1000cdca:	4b04      	ldr	r3, [pc, #16]	; (1000cddc <ble_scan_report_handler+0x1c>)
1000cdcc:	4798      	blx	r3
1000cdce:	4804      	ldr	r0, [pc, #16]	; (1000cde0 <ble_scan_report_handler+0x20>)
1000cdd0:	4b04      	ldr	r3, [pc, #16]	; (1000cde4 <ble_scan_report_handler+0x24>)
1000cdd2:	4798      	blx	r3
	}
	return AT_BLE_FAILURE;
1000cdd4:	20e2      	movs	r0, #226	; 0xe2
}
1000cdd6:	bd10      	pop	{r4, pc}
1000cdd8:	10017780 	.word	0x10017780
1000cddc:	10016841 	.word	0x10016841
1000cde0:	10017f48 	.word	0x10017f48
1000cde4:	10016721 	.word	0x10016721

1000cde8 <ble_adv_report_handler>:

/** @brief function handles advertising report */
at_ble_status_t ble_adv_report_handler(void *params)
{
1000cde8:	b510      	push	{r4, lr}
    at_ble_adv_report_t *adv_report;
    adv_report = (at_ble_adv_report_t *)params;
    if(adv_report->status == AT_BLE_SUCCESS)
1000cdea:	7800      	ldrb	r0, [r0, #0]
1000cdec:	2800      	cmp	r0, #0
1000cdee:	d006      	beq.n	1000cdfe <ble_adv_report_handler+0x16>
    {
        return AT_BLE_SUCCESS;
    }
    else 
    {
        DBG_LOG("Advertising failed");
1000cdf0:	4803      	ldr	r0, [pc, #12]	; (1000ce00 <ble_adv_report_handler+0x18>)
1000cdf2:	4b04      	ldr	r3, [pc, #16]	; (1000ce04 <ble_adv_report_handler+0x1c>)
1000cdf4:	4798      	blx	r3
1000cdf6:	4804      	ldr	r0, [pc, #16]	; (1000ce08 <ble_adv_report_handler+0x20>)
1000cdf8:	4b04      	ldr	r3, [pc, #16]	; (1000ce0c <ble_adv_report_handler+0x24>)
1000cdfa:	4798      	blx	r3
    }
    return AT_BLE_FAILURE;
1000cdfc:	20e2      	movs	r0, #226	; 0xe2
}
1000cdfe:	bd10      	pop	{r4, pc}
1000ce00:	10017780 	.word	0x10017780
1000ce04:	10016841 	.word	0x10016841
1000ce08:	10017f5c 	.word	0x10017f5c
1000ce0c:	10016721 	.word	0x10016721

1000ce10 <ble_mtu_changed_cmd_complete_handler>:
										mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_mtu_changed_cmd_complete_handler(void *params)
{
1000ce10:	b510      	push	{r4, lr}
1000ce12:	0004      	movs	r4, r0
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
1000ce14:	78c0      	ldrb	r0, [r0, #3]
1000ce16:	2800      	cmp	r0, #0
1000ce18:	d008      	beq.n	1000ce2c <ble_mtu_changed_cmd_complete_handler+0x1c>
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("MTU Change Failed, Connection Handle:%d, Operation:%d",
1000ce1a:	4805      	ldr	r0, [pc, #20]	; (1000ce30 <ble_mtu_changed_cmd_complete_handler+0x20>)
1000ce1c:	4b05      	ldr	r3, [pc, #20]	; (1000ce34 <ble_mtu_changed_cmd_complete_handler+0x24>)
1000ce1e:	4798      	blx	r3
1000ce20:	78a2      	ldrb	r2, [r4, #2]
1000ce22:	8821      	ldrh	r1, [r4, #0]
1000ce24:	4804      	ldr	r0, [pc, #16]	; (1000ce38 <ble_mtu_changed_cmd_complete_handler+0x28>)
1000ce26:	4b05      	ldr	r3, [pc, #20]	; (1000ce3c <ble_mtu_changed_cmd_complete_handler+0x2c>)
1000ce28:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
1000ce2a:	20e2      	movs	r0, #226	; 0xe2
}
1000ce2c:	bd10      	pop	{r4, pc}
1000ce2e:	46c0      	nop			; (mov r8, r8)
1000ce30:	10017780 	.word	0x10017780
1000ce34:	10016841 	.word	0x10016841
1000ce38:	10017f70 	.word	0x10017f70
1000ce3c:	10016721 	.word	0x10016721

1000ce40 <ble_disconnected_state_handler>:
	return AT_BLE_FAILURE;
}

/** @brief function handles disconnection event received from stack */
at_ble_status_t ble_disconnected_state_handler(void *params)
{
1000ce40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000ce42:	0004      	movs	r4, r0
1000ce44:	4b19      	ldr	r3, [pc, #100]	; (1000ceac <ble_disconnected_state_handler+0x6c>)
1000ce46:	229b      	movs	r2, #155	; 0x9b
1000ce48:	0092      	lsls	r2, r2, #2
1000ce4a:	189d      	adds	r5, r3, r2
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
1000ce4c:	2701      	movs	r7, #1
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000ce4e:	2600      	movs	r6, #0
1000ce50:	0018      	movs	r0, r3
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
1000ce52:	001a      	movs	r2, r3
1000ce54:	3a56      	subs	r2, #86	; 0x56
1000ce56:	8811      	ldrh	r1, [r2, #0]
1000ce58:	8822      	ldrh	r2, [r4, #0]
1000ce5a:	4291      	cmp	r1, r2
1000ce5c:	d119      	bne.n	1000ce92 <ble_disconnected_state_handler+0x52>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
1000ce5e:	781a      	ldrb	r2, [r3, #0]
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
1000ce60:	2a05      	cmp	r2, #5
1000ce62:	d001      	beq.n	1000ce68 <ble_disconnected_state_handler+0x28>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
1000ce64:	2a08      	cmp	r2, #8
1000ce66:	d101      	bne.n	1000ce6c <ble_disconnected_state_handler+0x2c>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
1000ce68:	7007      	strb	r7, [r0, #0]
1000ce6a:	e012      	b.n	1000ce92 <ble_disconnected_state_handler+0x52>
		}		
		else if(ble_dev_info[idx].conn_info.handle == disconnect->handle)
		{
			switch (ble_dev_info[idx].conn_state)
1000ce6c:	2a07      	cmp	r2, #7
1000ce6e:	d80f      	bhi.n	1000ce90 <ble_disconnected_state_handler+0x50>
1000ce70:	0092      	lsls	r2, r2, #2
1000ce72:	490f      	ldr	r1, [pc, #60]	; (1000ceb0 <ble_disconnected_state_handler+0x70>)
1000ce74:	588a      	ldr	r2, [r1, r2]
1000ce76:	4697      	mov	pc, r2
				case BLE_DEVICE_PAIRING_FAILED:
				case BLE_DEVICE_ENCRYPTION_STATE:
				case BLE_DEVICE_ENCRYPTION_FAILED:
				{
					/* Device is not paired so remove the device information */
					ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000ce78:	701e      	strb	r6, [r3, #0]
					if (ble_device_count > 0)
1000ce7a:	4a0e      	ldr	r2, [pc, #56]	; (1000ceb4 <ble_disconnected_state_handler+0x74>)
1000ce7c:	7812      	ldrb	r2, [r2, #0]
1000ce7e:	2a00      	cmp	r2, #0
1000ce80:	d007      	beq.n	1000ce92 <ble_disconnected_state_handler+0x52>
					{
						ble_device_count--;
1000ce82:	4a0c      	ldr	r2, [pc, #48]	; (1000ceb4 <ble_disconnected_state_handler+0x74>)
1000ce84:	7812      	ldrb	r2, [r2, #0]
1000ce86:	3a01      	subs	r2, #1
1000ce88:	b2d2      	uxtb	r2, r2
1000ce8a:	490a      	ldr	r1, [pc, #40]	; (1000ceb4 <ble_disconnected_state_handler+0x74>)
1000ce8c:	700a      	strb	r2, [r1, #0]
1000ce8e:	e000      	b.n	1000ce92 <ble_disconnected_state_handler+0x52>
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000ce90:	7006      	strb	r6, [r0, #0]
1000ce92:	337c      	adds	r3, #124	; 0x7c
{
	at_ble_disconnected_t *disconnect;
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000ce94:	42ab      	cmp	r3, r5
1000ce96:	d1db      	bne.n	1000ce50 <ble_disconnected_state_handler+0x10>
				break;				
			}
		} 
	}
	
	DBG_LOG("Device disconnected Reason:0x%02x Handle=0x%x", disconnect->reason, disconnect->handle);
1000ce98:	4807      	ldr	r0, [pc, #28]	; (1000ceb8 <ble_disconnected_state_handler+0x78>)
1000ce9a:	4b08      	ldr	r3, [pc, #32]	; (1000cebc <ble_disconnected_state_handler+0x7c>)
1000ce9c:	4798      	blx	r3
1000ce9e:	8822      	ldrh	r2, [r4, #0]
1000cea0:	78a1      	ldrb	r1, [r4, #2]
1000cea2:	4807      	ldr	r0, [pc, #28]	; (1000cec0 <ble_disconnected_state_handler+0x80>)
1000cea4:	4b07      	ldr	r3, [pc, #28]	; (1000cec4 <ble_disconnected_state_handler+0x84>)
1000cea6:	4798      	blx	r3
	return AT_BLE_SUCCESS;
}
1000cea8:	2000      	movs	r0, #0
1000ceaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000ceac:	1001a7a2 	.word	0x1001a7a2
1000ceb0:	10017de4 	.word	0x10017de4
1000ceb4:	1001a9b0 	.word	0x1001a9b0
1000ceb8:	10017780 	.word	0x10017780
1000cebc:	10016841 	.word	0x10016841
1000cec0:	10017fa8 	.word	0x10017fa8
1000cec4:	10016721 	.word	0x10016721

1000cec8 <ble_encryption_status_change_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption status change */
at_ble_status_t ble_encryption_status_change_handler(void *params)
{
1000cec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000ceca:	0006      	movs	r6, r0
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
1000cecc:	8801      	ldrh	r1, [r0, #0]
1000cece:	4b28      	ldr	r3, [pc, #160]	; (1000cf70 <ble_encryption_status_change_handler+0xa8>)
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000ced0:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
1000ced2:	891a      	ldrh	r2, [r3, #8]
1000ced4:	428a      	cmp	r2, r1
1000ced6:	d104      	bne.n	1000cee2 <ble_encryption_status_change_handler+0x1a>
1000ced8:	001a      	movs	r2, r3
1000ceda:	325e      	adds	r2, #94	; 0x5e
1000cedc:	7812      	ldrb	r2, [r2, #0]
1000cede:	2a06      	cmp	r2, #6
1000cee0:	d02e      	beq.n	1000cf40 <ble_encryption_status_change_handler+0x78>
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000cee2:	3401      	adds	r4, #1
1000cee4:	b2e4      	uxtb	r4, r4
1000cee6:	337c      	adds	r3, #124	; 0x7c
1000cee8:	2c05      	cmp	r4, #5
1000ceea:	d1f2      	bne.n	1000ced2 <ble_encryption_status_change_handler+0xa>
1000ceec:	e039      	b.n	1000cf62 <ble_encryption_status_change_handler+0x9a>
			return AT_BLE_FAILURE;
		}
	}
	else
	{
		ble_dev_info[idx].bond_info.status = enc_status->status;
1000ceee:	4920      	ldr	r1, [pc, #128]	; (1000cf70 <ble_encryption_status_change_handler+0xa8>)
1000cef0:	0163      	lsls	r3, r4, #5
1000cef2:	1b1a      	subs	r2, r3, r4
1000cef4:	0092      	lsls	r2, r2, #2
1000cef6:	188a      	adds	r2, r1, r2
1000cef8:	7615      	strb	r5, [r2, #24]
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
1000cefa:	0014      	movs	r4, r2
1000cefc:	345e      	adds	r4, #94	; 0x5e
1000cefe:	2307      	movs	r3, #7
1000cf00:	7023      	strb	r3, [r4, #0]
		DBG_LOG("Encryption failed");
1000cf02:	481c      	ldr	r0, [pc, #112]	; (1000cf74 <ble_encryption_status_change_handler+0xac>)
1000cf04:	4b1c      	ldr	r3, [pc, #112]	; (1000cf78 <ble_encryption_status_change_handler+0xb0>)
1000cf06:	4798      	blx	r3
1000cf08:	481c      	ldr	r0, [pc, #112]	; (1000cf7c <ble_encryption_status_change_handler+0xb4>)
1000cf0a:	4b1d      	ldr	r3, [pc, #116]	; (1000cf80 <ble_encryption_status_change_handler+0xb8>)
1000cf0c:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000cf0e:	25e2      	movs	r5, #226	; 0xe2
1000cf10:	e02b      	b.n	1000cf6a <ble_encryption_status_change_handler+0xa2>
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Encryption completed successfully");
1000cf12:	4818      	ldr	r0, [pc, #96]	; (1000cf74 <ble_encryption_status_change_handler+0xac>)
1000cf14:	4b18      	ldr	r3, [pc, #96]	; (1000cf78 <ble_encryption_status_change_handler+0xb0>)
1000cf16:	4798      	blx	r3
1000cf18:	481a      	ldr	r0, [pc, #104]	; (1000cf84 <ble_encryption_status_change_handler+0xbc>)
1000cf1a:	4b19      	ldr	r3, [pc, #100]	; (1000cf80 <ble_encryption_status_change_handler+0xb8>)
1000cf1c:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_COMPLETED;
1000cf1e:	4914      	ldr	r1, [pc, #80]	; (1000cf70 <ble_encryption_status_change_handler+0xa8>)
1000cf20:	0163      	lsls	r3, r4, #5
1000cf22:	1b1a      	subs	r2, r3, r4
1000cf24:	0092      	lsls	r2, r2, #2
1000cf26:	188a      	adds	r2, r1, r2
1000cf28:	0010      	movs	r0, r2
1000cf2a:	305e      	adds	r0, #94	; 0x5e
1000cf2c:	2708      	movs	r7, #8
1000cf2e:	7007      	strb	r7, [r0, #0]
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
1000cf30:	78f0      	ldrb	r0, [r6, #3]
1000cf32:	7510      	strb	r0, [r2, #20]
			ble_dev_info[idx].bond_info.status = enc_status->status;
1000cf34:	78b2      	ldrb	r2, [r6, #2]
1000cf36:	1b1c      	subs	r4, r3, r4
1000cf38:	00a4      	lsls	r4, r4, #2
1000cf3a:	190c      	adds	r4, r1, r4
1000cf3c:	7622      	strb	r2, [r4, #24]
		ble_dev_info[idx].bond_info.status = enc_status->status;
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
1000cf3e:	e014      	b.n	1000cf6a <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
1000cf40:	78b5      	ldrb	r5, [r6, #2]
1000cf42:	2d00      	cmp	r5, #0
1000cf44:	d0e5      	beq.n	1000cf12 <ble_encryption_status_change_handler+0x4a>
1000cf46:	e7d2      	b.n	1000ceee <ble_encryption_status_change_handler+0x26>
	{
		DBG_LOG("Encryption completed successfully");
1000cf48:	4e0a      	ldr	r6, [pc, #40]	; (1000cf74 <ble_encryption_status_change_handler+0xac>)
1000cf4a:	0030      	movs	r0, r6
1000cf4c:	4d0a      	ldr	r5, [pc, #40]	; (1000cf78 <ble_encryption_status_change_handler+0xb0>)
1000cf4e:	47a8      	blx	r5
1000cf50:	480c      	ldr	r0, [pc, #48]	; (1000cf84 <ble_encryption_status_change_handler+0xbc>)
1000cf52:	4c0b      	ldr	r4, [pc, #44]	; (1000cf80 <ble_encryption_status_change_handler+0xb8>)
1000cf54:	47a0      	blx	r4
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
			ble_dev_info[idx].bond_info.status = enc_status->status;
		}
		else
		{
			DBG_LOG("BLE Device not found encryption info");
1000cf56:	0030      	movs	r0, r6
1000cf58:	47a8      	blx	r5
1000cf5a:	480b      	ldr	r0, [pc, #44]	; (1000cf88 <ble_encryption_status_change_handler+0xc0>)
1000cf5c:	47a0      	blx	r4
			return AT_BLE_FAILURE;
1000cf5e:	25e2      	movs	r5, #226	; 0xe2
1000cf60:	e003      	b.n	1000cf6a <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
1000cf62:	78b5      	ldrb	r5, [r6, #2]
1000cf64:	2d00      	cmp	r5, #0
1000cf66:	d1c2      	bne.n	1000ceee <ble_encryption_status_change_handler+0x26>
1000cf68:	e7ee      	b.n	1000cf48 <ble_encryption_status_change_handler+0x80>
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
}
1000cf6a:	0028      	movs	r0, r5
1000cf6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000cf6e:	46c0      	nop			; (mov r8, r8)
1000cf70:	1001a744 	.word	0x1001a744
1000cf74:	10017780 	.word	0x10017780
1000cf78:	10016841 	.word	0x10016841
1000cf7c:	10017fd8 	.word	0x10017fd8
1000cf80:	10016721 	.word	0x10016721
1000cf84:	10017fec 	.word	0x10017fec
1000cf88:	10018010 	.word	0x10018010

1000cf8c <ble_scan_info_handler>:
	return found;
}
#endif
/** @brief function handling scaned information */
at_ble_status_t ble_scan_info_handler(void *params)
{
1000cf8c:	b510      	push	{r4, lr}
1000cf8e:	0001      	movs	r1, r0
	at_ble_scan_info_t *scan_param;
	scan_param = (at_ble_scan_info_t *)params;
	if(scan_response_count < MAX_SCAN_DEVICE)
1000cf90:	4b15      	ldr	r3, [pc, #84]	; (1000cfe8 <ble_scan_info_handler+0x5c>)
1000cf92:	781b      	ldrb	r3, [r3, #0]
1000cf94:	b2db      	uxtb	r3, r3
1000cf96:	2b13      	cmp	r3, #19
1000cf98:	d812      	bhi.n	1000cfc0 <ble_scan_info_handler+0x34>
	{
		memcpy((uint8_t *)&scan_info[scan_response_count], scan_param, sizeof(at_ble_scan_info_t));
1000cf9a:	4c13      	ldr	r4, [pc, #76]	; (1000cfe8 <ble_scan_info_handler+0x5c>)
1000cf9c:	7823      	ldrb	r3, [r4, #0]
1000cf9e:	b2db      	uxtb	r3, r3
1000cfa0:	0098      	lsls	r0, r3, #2
1000cfa2:	18c0      	adds	r0, r0, r3
1000cfa4:	00c0      	lsls	r0, r0, #3
1000cfa6:	18c3      	adds	r3, r0, r3
1000cfa8:	4810      	ldr	r0, [pc, #64]	; (1000cfec <ble_scan_info_handler+0x60>)
1000cfaa:	1818      	adds	r0, r3, r0
1000cfac:	2229      	movs	r2, #41	; 0x29
1000cfae:	4b10      	ldr	r3, [pc, #64]	; (1000cff0 <ble_scan_info_handler+0x64>)
1000cfb0:	4798      	blx	r3
		DBG_LOG_DEV("Info:Device found address [%d]  0x%02X%02X%02X%02X%02X%02X ",
1000cfb2:	7823      	ldrb	r3, [r4, #0]
		scan_param->dev_addr.addr[4],
		scan_param->dev_addr.addr[3],
		scan_param->dev_addr.addr[2],
		scan_param->dev_addr.addr[1],
		scan_param->dev_addr.addr[0]);
		scan_response_count++;
1000cfb4:	7823      	ldrb	r3, [r4, #0]
1000cfb6:	3301      	adds	r3, #1
1000cfb8:	b2db      	uxtb	r3, r3
1000cfba:	7023      	strb	r3, [r4, #0]
		return AT_BLE_SUCCESS;
1000cfbc:	2300      	movs	r3, #0
1000cfbe:	e011      	b.n	1000cfe4 <ble_scan_info_handler+0x58>
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
1000cfc0:	480c      	ldr	r0, [pc, #48]	; (1000cff4 <ble_scan_info_handler+0x68>)
1000cfc2:	4b0d      	ldr	r3, [pc, #52]	; (1000cff8 <ble_scan_info_handler+0x6c>)
1000cfc4:	4798      	blx	r3
1000cfc6:	480d      	ldr	r0, [pc, #52]	; (1000cffc <ble_scan_info_handler+0x70>)
1000cfc8:	4b0d      	ldr	r3, [pc, #52]	; (1000d000 <ble_scan_info_handler+0x74>)
1000cfca:	4798      	blx	r3
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
1000cfcc:	4b0d      	ldr	r3, [pc, #52]	; (1000d004 <ble_scan_info_handler+0x78>)
1000cfce:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
1000cfd0:	23e2      	movs	r3, #226	; 0xe2
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
1000cfd2:	2800      	cmp	r0, #0
1000cfd4:	d006      	beq.n	1000cfe4 <ble_scan_info_handler+0x58>
		{
			DBG_LOG("Failed to stop scanning");
1000cfd6:	4807      	ldr	r0, [pc, #28]	; (1000cff4 <ble_scan_info_handler+0x68>)
1000cfd8:	4b07      	ldr	r3, [pc, #28]	; (1000cff8 <ble_scan_info_handler+0x6c>)
1000cfda:	4798      	blx	r3
1000cfdc:	480a      	ldr	r0, [pc, #40]	; (1000d008 <ble_scan_info_handler+0x7c>)
1000cfde:	4b08      	ldr	r3, [pc, #32]	; (1000d000 <ble_scan_info_handler+0x74>)
1000cfe0:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
1000cfe2:	23e2      	movs	r3, #226	; 0xe2
	}
}
1000cfe4:	0018      	movs	r0, r3
1000cfe6:	bd10      	pop	{r4, pc}
1000cfe8:	10019254 	.word	0x10019254
1000cfec:	1001aa28 	.word	0x1001aa28
1000cff0:	100165c7 	.word	0x100165c7
1000cff4:	10017780 	.word	0x10017780
1000cff8:	10016841 	.word	0x10016841
1000cffc:	10018038 	.word	0x10018038
1000d000:	10016721 	.word	0x10016721
1000d004:	1000fb29 	.word	0x1000fb29
1000d008:	10018070 	.word	0x10018070

1000d00c <ble_pair_done_handler>:
	return AT_BLE_SUCCESS;	
}

/** @brief function handles pair done event */
at_ble_status_t ble_pair_done_handler(void *params)
{
1000d00c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000d00e:	464f      	mov	r7, r9
1000d010:	4646      	mov	r6, r8
1000d012:	b4c0      	push	{r6, r7}
1000d014:	0005      	movs	r5, r0
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1000d016:	8841      	ldrh	r1, [r0, #2]
1000d018:	4b3a      	ldr	r3, [pc, #232]	; (1000d104 <ble_pair_done_handler+0xf8>)
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d01a:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1000d01c:	891a      	ldrh	r2, [r3, #8]
1000d01e:	428a      	cmp	r2, r1
1000d020:	d104      	bne.n	1000d02c <ble_pair_done_handler+0x20>
1000d022:	001a      	movs	r2, r3
1000d024:	325e      	adds	r2, #94	; 0x5e
1000d026:	7812      	ldrb	r2, [r2, #0]
1000d028:	2a03      	cmp	r2, #3
1000d02a:	d062      	beq.n	1000d0f2 <ble_pair_done_handler+0xe6>
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d02c:	3401      	adds	r4, #1
1000d02e:	b2e4      	uxtb	r4, r4
1000d030:	337c      	adds	r3, #124	; 0x7c
1000d032:	2c05      	cmp	r4, #5
1000d034:	d1f2      	bne.n	1000d01c <ble_pair_done_handler+0x10>
1000d036:	e02b      	b.n	1000d090 <ble_pair_done_handler+0x84>
			return AT_BLE_FAILURE;
		}		
	}
	else
	{
		if(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE && ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) {
1000d038:	0163      	lsls	r3, r4, #5
1000d03a:	1b1c      	subs	r4, r3, r4
1000d03c:	00a4      	lsls	r4, r4, #2
1000d03e:	4b31      	ldr	r3, [pc, #196]	; (1000d104 <ble_pair_done_handler+0xf8>)
1000d040:	191c      	adds	r4, r3, r4
1000d042:	345e      	adds	r4, #94	; 0x5e
1000d044:	7823      	ldrb	r3, [r4, #0]
1000d046:	2b01      	cmp	r3, #1
1000d048:	d913      	bls.n	1000d072 <ble_pair_done_handler+0x66>
			DBG_LOG("Pairing failed...Disconnecting");
1000d04a:	482f      	ldr	r0, [pc, #188]	; (1000d108 <ble_pair_done_handler+0xfc>)
1000d04c:	4b2f      	ldr	r3, [pc, #188]	; (1000d10c <ble_pair_done_handler+0x100>)
1000d04e:	4798      	blx	r3
1000d050:	482f      	ldr	r0, [pc, #188]	; (1000d110 <ble_pair_done_handler+0x104>)
1000d052:	4b30      	ldr	r3, [pc, #192]	; (1000d114 <ble_pair_done_handler+0x108>)
1000d054:	4798      	blx	r3
			if(!(at_ble_disconnect(pairing_params->handle, AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS))
1000d056:	8868      	ldrh	r0, [r5, #2]
1000d058:	2113      	movs	r1, #19
1000d05a:	4b2f      	ldr	r3, [pc, #188]	; (1000d118 <ble_pair_done_handler+0x10c>)
1000d05c:	4798      	blx	r3
1000d05e:	1e06      	subs	r6, r0, #0
1000d060:	d04b      	beq.n	1000d0fa <ble_pair_done_handler+0xee>
			{
				DBG_LOG("Disconnect Request Failed");
1000d062:	4829      	ldr	r0, [pc, #164]	; (1000d108 <ble_pair_done_handler+0xfc>)
1000d064:	4b29      	ldr	r3, [pc, #164]	; (1000d10c <ble_pair_done_handler+0x100>)
1000d066:	4798      	blx	r3
1000d068:	482c      	ldr	r0, [pc, #176]	; (1000d11c <ble_pair_done_handler+0x110>)
1000d06a:	4b2a      	ldr	r3, [pc, #168]	; (1000d114 <ble_pair_done_handler+0x108>)
1000d06c:	4798      	blx	r3
				return AT_BLE_FAILURE;
1000d06e:	26e2      	movs	r6, #226	; 0xe2
1000d070:	e043      	b.n	1000d0fa <ble_pair_done_handler+0xee>
			}
		}
	}
	return AT_BLE_SUCCESS;
1000d072:	2600      	movs	r6, #0
1000d074:	e041      	b.n	1000d0fa <ble_pair_done_handler+0xee>
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Pairing procedure completed successfully");
1000d076:	4e24      	ldr	r6, [pc, #144]	; (1000d108 <ble_pair_done_handler+0xfc>)
1000d078:	0030      	movs	r0, r6
1000d07a:	4d24      	ldr	r5, [pc, #144]	; (1000d10c <ble_pair_done_handler+0x100>)
1000d07c:	47a8      	blx	r5
1000d07e:	4828      	ldr	r0, [pc, #160]	; (1000d120 <ble_pair_done_handler+0x114>)
1000d080:	4c24      	ldr	r4, [pc, #144]	; (1000d114 <ble_pair_done_handler+0x108>)
1000d082:	47a0      	blx	r4
				
			}
		}
		else
		{
			DBG_LOG("BLE Device not found to store the pairing info");
1000d084:	0030      	movs	r0, r6
1000d086:	47a8      	blx	r5
1000d088:	4826      	ldr	r0, [pc, #152]	; (1000d124 <ble_pair_done_handler+0x118>)
1000d08a:	47a0      	blx	r4
			return AT_BLE_FAILURE;
1000d08c:	26e2      	movs	r6, #226	; 0xe2
1000d08e:	e034      	b.n	1000d0fa <ble_pair_done_handler+0xee>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
1000d090:	792b      	ldrb	r3, [r5, #4]
1000d092:	2b00      	cmp	r3, #0
1000d094:	d1d0      	bne.n	1000d038 <ble_pair_done_handler+0x2c>
1000d096:	e7ee      	b.n	1000d076 <ble_pair_done_handler+0x6a>
	{
		DBG_LOG("Pairing procedure completed successfully");
1000d098:	481b      	ldr	r0, [pc, #108]	; (1000d108 <ble_pair_done_handler+0xfc>)
1000d09a:	4b1c      	ldr	r3, [pc, #112]	; (1000d10c <ble_pair_done_handler+0x100>)
1000d09c:	4798      	blx	r3
1000d09e:	4820      	ldr	r0, [pc, #128]	; (1000d120 <ble_pair_done_handler+0x114>)
1000d0a0:	4b1c      	ldr	r3, [pc, #112]	; (1000d114 <ble_pair_done_handler+0x108>)
1000d0a2:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].bond_info.auth = pairing_params->auth;
1000d0a4:	782a      	ldrb	r2, [r5, #0]
1000d0a6:	4b17      	ldr	r3, [pc, #92]	; (1000d104 <ble_pair_done_handler+0xf8>)
1000d0a8:	4699      	mov	r9, r3
1000d0aa:	0167      	lsls	r7, r4, #5
1000d0ac:	1b3b      	subs	r3, r7, r4
1000d0ae:	009b      	lsls	r3, r3, #2
1000d0b0:	444b      	add	r3, r9
1000d0b2:	751a      	strb	r2, [r3, #20]
			ble_dev_info[idx].bond_info.status = pairing_params->status;
1000d0b4:	792a      	ldrb	r2, [r5, #4]
1000d0b6:	761a      	strb	r2, [r3, #24]
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRED;
1000d0b8:	335e      	adds	r3, #94	; 0x5e
1000d0ba:	2205      	movs	r2, #5
1000d0bc:	701a      	strb	r2, [r3, #0]
			
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
1000d0be:	1b38      	subs	r0, r7, r4
1000d0c0:	0080      	lsls	r0, r0, #2
1000d0c2:	4448      	add	r0, r9
1000d0c4:	3036      	adds	r0, #54	; 0x36
1000d0c6:	0029      	movs	r1, r5
1000d0c8:	3122      	adds	r1, #34	; 0x22
1000d0ca:	320b      	adds	r2, #11
1000d0cc:	4b16      	ldr	r3, [pc, #88]	; (1000d128 <ble_pair_done_handler+0x11c>)
1000d0ce:	4698      	mov	r8, r3
1000d0d0:	4798      	blx	r3
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
1000d0d2:	1b38      	subs	r0, r7, r4
1000d0d4:	0080      	lsls	r0, r0, #2
1000d0d6:	4448      	add	r0, r9
1000d0d8:	3046      	adds	r0, #70	; 0x46
1000d0da:	0029      	movs	r1, r5
1000d0dc:	3132      	adds	r1, #50	; 0x32
1000d0de:	2217      	movs	r2, #23
1000d0e0:	47c0      	blx	r8
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
1000d0e2:	1b38      	subs	r0, r7, r4
1000d0e4:	0080      	lsls	r0, r0, #2
1000d0e6:	4448      	add	r0, r9
1000d0e8:	301a      	adds	r0, #26
1000d0ea:	1da9      	adds	r1, r5, #6
1000d0ec:	221c      	movs	r2, #28
1000d0ee:	47c0      	blx	r8
1000d0f0:	e003      	b.n	1000d0fa <ble_pair_done_handler+0xee>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
1000d0f2:	792e      	ldrb	r6, [r5, #4]
1000d0f4:	2e00      	cmp	r6, #0
1000d0f6:	d0cf      	beq.n	1000d098 <ble_pair_done_handler+0x8c>
1000d0f8:	e79e      	b.n	1000d038 <ble_pair_done_handler+0x2c>
				return AT_BLE_FAILURE;
			}
		}
	}
	return AT_BLE_SUCCESS;
}
1000d0fa:	0030      	movs	r0, r6
1000d0fc:	bc0c      	pop	{r2, r3}
1000d0fe:	4690      	mov	r8, r2
1000d100:	4699      	mov	r9, r3
1000d102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000d104:	1001a744 	.word	0x1001a744
1000d108:	10017780 	.word	0x10017780
1000d10c:	10016841 	.word	0x10016841
1000d110:	10018088 	.word	0x10018088
1000d114:	10016721 	.word	0x10016721
1000d118:	1000fb49 	.word	0x1000fb49
1000d11c:	100180a8 	.word	0x100180a8
1000d120:	100180c4 	.word	0x100180c4
1000d124:	100180f0 	.word	0x100180f0
1000d128:	100165c7 	.word	0x100165c7

1000d12c <ble_conn_param_update_req>:
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_conn_param_update_req(void *params)
{
1000d12c:	b510      	push	{r4, lr}
	at_ble_conn_param_update_request_t * conn_param_req;
	conn_param_req = (at_ble_conn_param_update_request_t *)params;
	at_ble_conn_update_reply(conn_param_req->handle, true, 1, 120);
1000d12e:	8800      	ldrh	r0, [r0, #0]
1000d130:	2378      	movs	r3, #120	; 0x78
1000d132:	2201      	movs	r2, #1
1000d134:	2101      	movs	r1, #1
1000d136:	4c02      	ldr	r4, [pc, #8]	; (1000d140 <ble_conn_param_update_req+0x14>)
1000d138:	47a0      	blx	r4
	return AT_BLE_SUCCESS;
}
1000d13a:	2000      	movs	r0, #0
1000d13c:	bd10      	pop	{r4, pc}
1000d13e:	46c0      	nop			; (mov r8, r8)
1000d140:	1000fb69 	.word	0x1000fb69

1000d144 <ble_slave_security_request_handler>:

at_ble_status_t ble_slave_security_request_handler(void* params)
{
1000d144:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d146:	4657      	mov	r7, sl
1000d148:	464e      	mov	r6, r9
1000d14a:	4645      	mov	r5, r8
1000d14c:	b4e0      	push	{r5, r6, r7}
1000d14e:	b084      	sub	sp, #16
1000d150:	0004      	movs	r4, r0
	uint8_t i = 0, idx;
	at_ble_slave_sec_request_t* slave_sec_req;
	bool device_found = false;
	
	slave_sec_req = (at_ble_slave_sec_request_t*)params;	
	memset(&features, 0x00, sizeof(at_ble_pair_features_t));
1000d152:	2209      	movs	r2, #9
1000d154:	2100      	movs	r1, #0
1000d156:	a801      	add	r0, sp, #4
1000d158:	4b6a      	ldr	r3, [pc, #424]	; (1000d304 <ble_slave_security_request_handler+0x1c0>)
1000d15a:	4798      	blx	r3
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000d15c:	8825      	ldrh	r5, [r4, #0]
1000d15e:	496a      	ldr	r1, [pc, #424]	; (1000d308 <ble_slave_security_request_handler+0x1c4>)
1000d160:	000a      	movs	r2, r1
1000d162:	2300      	movs	r3, #0
1000d164:	8910      	ldrh	r0, [r2, #8]
1000d166:	42a8      	cmp	r0, r5
1000d168:	d116      	bne.n	1000d198 <ble_slave_security_request_handler+0x54>
1000d16a:	0010      	movs	r0, r2
1000d16c:	305e      	adds	r0, #94	; 0x5e
1000d16e:	7800      	ldrb	r0, [r0, #0]
1000d170:	2802      	cmp	r0, #2
1000d172:	d111      	bne.n	1000d198 <ble_slave_security_request_handler+0x54>
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000d174:	4864      	ldr	r0, [pc, #400]	; (1000d308 <ble_slave_security_request_handler+0x1c4>)
1000d176:	015a      	lsls	r2, r3, #5
1000d178:	1ad6      	subs	r6, r2, r3
1000d17a:	00b6      	lsls	r6, r6, #2
1000d17c:	1986      	adds	r6, r0, r6
1000d17e:	365e      	adds	r6, #94	; 0x5e
1000d180:	2206      	movs	r2, #6
1000d182:	7032      	strb	r2, [r6, #0]
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
1000d184:	32f9      	adds	r2, #249	; 0xf9
1000d186:	4013      	ands	r3, r2
1000d188:	015a      	lsls	r2, r3, #5
1000d18a:	1ad2      	subs	r2, r2, r3
1000d18c:	0092      	lsls	r2, r2, #2
1000d18e:	1882      	adds	r2, r0, r2
1000d190:	7d12      	ldrb	r2, [r2, #20]
1000d192:	07d0      	lsls	r0, r2, #31
1000d194:	d405      	bmi.n	1000d1a2 <ble_slave_security_request_handler+0x5e>
1000d196:	e01b      	b.n	1000d1d0 <ble_slave_security_request_handler+0x8c>
1000d198:	3301      	adds	r3, #1
1000d19a:	327c      	adds	r2, #124	; 0x7c
		//at_ble_disconnect(slave_sec_req->handle, AT_BLE_AUTH_FAILURE);		
		//return AT_BLE_FAILURE;
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d19c:	2b05      	cmp	r3, #5
1000d19e:	d1e1      	bne.n	1000d164 <ble_slave_security_request_handler+0x20>
1000d1a0:	e01e      	b.n	1000d1e0 <ble_slave_security_request_handler+0x9c>
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
1000d1a2:	78e0      	ldrb	r0, [r4, #3]
1000d1a4:	2800      	cmp	r0, #0
1000d1a6:	d013      	beq.n	1000d1d0 <ble_slave_security_request_handler+0x8c>
		{
			if(at_ble_encryption_start(slave_sec_req->handle, &ble_dev_info[idx].bond_info.peer_ltk, ble_dev_info[idx].bond_info.auth) == AT_BLE_SUCCESS)
1000d1a8:	0159      	lsls	r1, r3, #5
1000d1aa:	1ac9      	subs	r1, r1, r3
1000d1ac:	008b      	lsls	r3, r1, #2
1000d1ae:	4956      	ldr	r1, [pc, #344]	; (1000d308 <ble_slave_security_request_handler+0x1c4>)
1000d1b0:	18c9      	adds	r1, r1, r3
1000d1b2:	311a      	adds	r1, #26
1000d1b4:	8820      	ldrh	r0, [r4, #0]
1000d1b6:	4b55      	ldr	r3, [pc, #340]	; (1000d30c <ble_slave_security_request_handler+0x1c8>)
1000d1b8:	4798      	blx	r3
1000d1ba:	2800      	cmp	r0, #0
1000d1bc:	d100      	bne.n	1000d1c0 <ble_slave_security_request_handler+0x7c>
1000d1be:	e09b      	b.n	1000d2f8 <ble_slave_security_request_handler+0x1b4>
			{
				return  AT_BLE_SUCCESS;
			}
			else
			{
				DBG_LOG("Encryption Not started");
1000d1c0:	4853      	ldr	r0, [pc, #332]	; (1000d310 <ble_slave_security_request_handler+0x1cc>)
1000d1c2:	4b54      	ldr	r3, [pc, #336]	; (1000d314 <ble_slave_security_request_handler+0x1d0>)
1000d1c4:	4798      	blx	r3
1000d1c6:	4854      	ldr	r0, [pc, #336]	; (1000d318 <ble_slave_security_request_handler+0x1d4>)
1000d1c8:	4b54      	ldr	r3, [pc, #336]	; (1000d31c <ble_slave_security_request_handler+0x1d8>)
1000d1ca:	4798      	blx	r3
				return AT_BLE_FAILURE;
1000d1cc:	20e2      	movs	r0, #226	; 0xe2
1000d1ce:	e093      	b.n	1000d2f8 <ble_slave_security_request_handler+0x1b4>
			}			
		}
		else
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000d1d0:	015a      	lsls	r2, r3, #5
1000d1d2:	1ad3      	subs	r3, r2, r3
1000d1d4:	009b      	lsls	r3, r3, #2
1000d1d6:	4a4c      	ldr	r2, [pc, #304]	; (1000d308 <ble_slave_security_request_handler+0x1c4>)
1000d1d8:	18d3      	adds	r3, r2, r3
1000d1da:	335e      	adds	r3, #94	; 0x5e
1000d1dc:	2202      	movs	r2, #2
1000d1de:	701a      	strb	r2, [r3, #0]
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000d1e0:	8825      	ldrh	r5, [r4, #0]
1000d1e2:	2200      	movs	r2, #0
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d1e4:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000d1e6:	0016      	movs	r6, r2
1000d1e8:	8908      	ldrh	r0, [r1, #8]
1000d1ea:	42a8      	cmp	r0, r5
1000d1ec:	d10d      	bne.n	1000d20a <ble_slave_security_request_handler+0xc6>
1000d1ee:	0008      	movs	r0, r1
1000d1f0:	305e      	adds	r0, #94	; 0x5e
1000d1f2:	7800      	ldrb	r0, [r0, #0]
1000d1f4:	2802      	cmp	r0, #2
1000d1f6:	d108      	bne.n	1000d20a <ble_slave_security_request_handler+0xc6>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000d1f8:	0152      	lsls	r2, r2, #5
1000d1fa:	1b92      	subs	r2, r2, r6
1000d1fc:	0096      	lsls	r6, r2, #2
1000d1fe:	4a42      	ldr	r2, [pc, #264]	; (1000d308 <ble_slave_security_request_handler+0x1c4>)
1000d200:	1992      	adds	r2, r2, r6
1000d202:	325e      	adds	r2, #94	; 0x5e
1000d204:	2103      	movs	r1, #3
1000d206:	7011      	strb	r1, [r2, #0]
			break;
1000d208:	e005      	b.n	1000d216 <ble_slave_security_request_handler+0xd2>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d20a:	3301      	adds	r3, #1
1000d20c:	b2db      	uxtb	r3, r3
1000d20e:	3201      	adds	r2, #1
1000d210:	317c      	adds	r1, #124	; 0x7c
1000d212:	2b05      	cmp	r3, #5
1000d214:	d1e7      	bne.n	1000d1e6 <ble_slave_security_request_handler+0xa2>
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
	features.bond = slave_sec_req->bond;
1000d216:	aa01      	add	r2, sp, #4
1000d218:	78e1      	ldrb	r1, [r4, #3]
1000d21a:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = true;
1000d21c:	2101      	movs	r1, #1
1000d21e:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = AT_BLE_IO_CAP_KB_DISPLAY;
1000d220:	3103      	adds	r1, #3
1000d222:	7011      	strb	r1, [r2, #0]

	features.oob_avaiable = false;
			
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000d224:	001f      	movs	r7, r3
1000d226:	015a      	lsls	r2, r3, #5
1000d228:	1ad2      	subs	r2, r2, r3
1000d22a:	0092      	lsls	r2, r2, #2
1000d22c:	4936      	ldr	r1, [pc, #216]	; (1000d308 <ble_slave_security_request_handler+0x1c4>)
1000d22e:	5c52      	ldrb	r2, [r2, r1]
1000d230:	2a02      	cmp	r2, #2
1000d232:	d104      	bne.n	1000d23e <ble_slave_security_request_handler+0xfa>
	{
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000d234:	aa01      	add	r2, sp, #4
1000d236:	2103      	movs	r1, #3
1000d238:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000d23a:	71d1      	strb	r1, [r2, #7]
1000d23c:	e003      	b.n	1000d246 <ble_slave_security_request_handler+0x102>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000d23e:	aa01      	add	r2, sp, #4
1000d240:	2101      	movs	r1, #1
1000d242:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000d244:	71d1      	strb	r1, [r2, #7]
	}
	features.max_key_size = 16;
1000d246:	aa01      	add	r2, sp, #4
1000d248:	2110      	movs	r1, #16
1000d24a:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
1000d24c:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000d24e:	017a      	lsls	r2, r7, #5
1000d250:	1bd2      	subs	r2, r2, r7
1000d252:	0092      	lsls	r2, r2, #2
1000d254:	492c      	ldr	r1, [pc, #176]	; (1000d308 <ble_slave_security_request_handler+0x1c4>)
1000d256:	188a      	adds	r2, r1, r2
1000d258:	7e12      	ldrb	r2, [r2, #24]
1000d25a:	2a40      	cmp	r2, #64	; 0x40
1000d25c:	d134      	bne.n	1000d2c8 <ble_slave_security_request_handler+0x184>
1000d25e:	015a      	lsls	r2, r3, #5
1000d260:	1ad3      	subs	r3, r2, r3
1000d262:	009b      	lsls	r3, r3, #2
1000d264:	469a      	mov	sl, r3
1000d266:	001e      	movs	r6, r3
1000d268:	3660      	adds	r6, #96	; 0x60
1000d26a:	1876      	adds	r6, r6, r1
1000d26c:	4655      	mov	r5, sl
1000d26e:	3568      	adds	r5, #104	; 0x68
1000d270:	186d      	adds	r5, r5, r1
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000d272:	4b2b      	ldr	r3, [pc, #172]	; (1000d320 <ble_slave_security_request_handler+0x1dc>)
1000d274:	4699      	mov	r9, r3
1000d276:	230f      	movs	r3, #15
1000d278:	4698      	mov	r8, r3
1000d27a:	47c8      	blx	r9
1000d27c:	4643      	mov	r3, r8
1000d27e:	4018      	ands	r0, r3
1000d280:	7030      	strb	r0, [r6, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000d282:	47c8      	blx	r9
1000d284:	4643      	mov	r3, r8
1000d286:	4018      	ands	r0, r3
1000d288:	74b0      	strb	r0, [r6, #18]
1000d28a:	3601      	adds	r6, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000d28c:	42ae      	cmp	r6, r5
1000d28e:	d1f4      	bne.n	1000d27a <ble_slave_security_request_handler+0x136>
1000d290:	4656      	mov	r6, sl
1000d292:	3670      	adds	r6, #112	; 0x70
1000d294:	4a1c      	ldr	r2, [pc, #112]	; (1000d308 <ble_slave_security_request_handler+0x1c4>)
1000d296:	18b6      	adds	r6, r6, r2
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000d298:	4b21      	ldr	r3, [pc, #132]	; (1000d320 <ble_slave_security_request_handler+0x1dc>)
1000d29a:	4699      	mov	r9, r3
1000d29c:	230f      	movs	r3, #15
1000d29e:	4698      	mov	r8, r3
1000d2a0:	47c8      	blx	r9
1000d2a2:	4643      	mov	r3, r8
1000d2a4:	4018      	ands	r0, r3
1000d2a6:	7028      	strb	r0, [r5, #0]
1000d2a8:	3501      	adds	r5, #1
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000d2aa:	42b5      	cmp	r5, r6
1000d2ac:	d1f8      	bne.n	1000d2a0 <ble_slave_security_request_handler+0x15c>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000d2ae:	4b1c      	ldr	r3, [pc, #112]	; (1000d320 <ble_slave_security_request_handler+0x1dc>)
1000d2b0:	4798      	blx	r3
1000d2b2:	017b      	lsls	r3, r7, #5
1000d2b4:	1bdb      	subs	r3, r3, r7
1000d2b6:	009b      	lsls	r3, r3, #2
1000d2b8:	4a13      	ldr	r2, [pc, #76]	; (1000d308 <ble_slave_security_request_handler+0x1c4>)
1000d2ba:	18d3      	adds	r3, r2, r3
1000d2bc:	001a      	movs	r2, r3
1000d2be:	3270      	adds	r2, #112	; 0x70
1000d2c0:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000d2c2:	337a      	adds	r3, #122	; 0x7a
1000d2c4:	2210      	movs	r2, #16
1000d2c6:	701a      	strb	r2, [r3, #0]
	{
		/* Bonding information already exists */
		
	}

	if(at_ble_authenticate(slave_sec_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000d2c8:	017a      	lsls	r2, r7, #5
1000d2ca:	1bd7      	subs	r7, r2, r7
1000d2cc:	00bf      	lsls	r7, r7, #2
1000d2ce:	3760      	adds	r7, #96	; 0x60
1000d2d0:	4a0d      	ldr	r2, [pc, #52]	; (1000d308 <ble_slave_security_request_handler+0x1c4>)
1000d2d2:	18ba      	adds	r2, r7, r2
1000d2d4:	8820      	ldrh	r0, [r4, #0]
1000d2d6:	2300      	movs	r3, #0
1000d2d8:	a901      	add	r1, sp, #4
1000d2da:	4c12      	ldr	r4, [pc, #72]	; (1000d324 <ble_slave_security_request_handler+0x1e0>)
1000d2dc:	47a0      	blx	r4
1000d2de:	2800      	cmp	r0, #0
1000d2e0:	d00a      	beq.n	1000d2f8 <ble_slave_security_request_handler+0x1b4>
	{
		features.bond = false;
1000d2e2:	ab01      	add	r3, sp, #4
1000d2e4:	2200      	movs	r2, #0
1000d2e6:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000d2e8:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Slave Security Req - Authentication Failed");
1000d2ea:	4809      	ldr	r0, [pc, #36]	; (1000d310 <ble_slave_security_request_handler+0x1cc>)
1000d2ec:	4b09      	ldr	r3, [pc, #36]	; (1000d314 <ble_slave_security_request_handler+0x1d0>)
1000d2ee:	4798      	blx	r3
1000d2f0:	480d      	ldr	r0, [pc, #52]	; (1000d328 <ble_slave_security_request_handler+0x1e4>)
1000d2f2:	4b0a      	ldr	r3, [pc, #40]	; (1000d31c <ble_slave_security_request_handler+0x1d8>)
1000d2f4:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000d2f6:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000d2f8:	b004      	add	sp, #16
1000d2fa:	bc1c      	pop	{r2, r3, r4}
1000d2fc:	4690      	mov	r8, r2
1000d2fe:	4699      	mov	r9, r3
1000d300:	46a2      	mov	sl, r4
1000d302:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d304:	100165d9 	.word	0x100165d9
1000d308:	1001a744 	.word	0x1001a744
1000d30c:	1001072d 	.word	0x1001072d
1000d310:	10017780 	.word	0x10017780
1000d314:	10016841 	.word	0x10016841
1000d318:	10018120 	.word	0x10018120
1000d31c:	10016721 	.word	0x10016721
1000d320:	10016855 	.word	0x10016855
1000d324:	10010541 	.word	0x10010541
1000d328:	10018138 	.word	0x10018138

1000d32c <ble_pair_request_handler>:

/** @brief function handles pair request */
at_ble_status_t ble_pair_request_handler(void *params)
{
1000d32c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d32e:	465f      	mov	r7, fp
1000d330:	4656      	mov	r6, sl
1000d332:	464d      	mov	r5, r9
1000d334:	4644      	mov	r4, r8
1000d336:	b4f0      	push	{r4, r5, r6, r7}
1000d338:	b085      	sub	sp, #20
1000d33a:	4683      	mov	fp, r0
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000d33c:	8804      	ldrh	r4, [r0, #0]
1000d33e:	4a48      	ldr	r2, [pc, #288]	; (1000d460 <ble_pair_request_handler+0x134>)
1000d340:	2100      	movs	r1, #0
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d342:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000d344:	8910      	ldrh	r0, [r2, #8]
1000d346:	42a0      	cmp	r0, r4
1000d348:	d10d      	bne.n	1000d366 <ble_pair_request_handler+0x3a>
1000d34a:	0010      	movs	r0, r2
1000d34c:	305e      	adds	r0, #94	; 0x5e
1000d34e:	7800      	ldrb	r0, [r0, #0]
1000d350:	2802      	cmp	r0, #2
1000d352:	d108      	bne.n	1000d366 <ble_pair_request_handler+0x3a>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000d354:	014a      	lsls	r2, r1, #5
1000d356:	1a52      	subs	r2, r2, r1
1000d358:	0095      	lsls	r5, r2, #2
1000d35a:	4a41      	ldr	r2, [pc, #260]	; (1000d460 <ble_pair_request_handler+0x134>)
1000d35c:	1952      	adds	r2, r2, r5
1000d35e:	325e      	adds	r2, #94	; 0x5e
1000d360:	2103      	movs	r1, #3
1000d362:	7011      	strb	r1, [r2, #0]
			break;
1000d364:	e005      	b.n	1000d372 <ble_pair_request_handler+0x46>
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d366:	3301      	adds	r3, #1
1000d368:	b2db      	uxtb	r3, r3
1000d36a:	3101      	adds	r1, #1
1000d36c:	327c      	adds	r2, #124	; 0x7c
1000d36e:	2b05      	cmp	r3, #5
1000d370:	d1e8      	bne.n	1000d344 <ble_pair_request_handler+0x18>
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
1000d372:	aa01      	add	r2, sp, #4
1000d374:	2100      	movs	r1, #0
1000d376:	7211      	strb	r1, [r2, #8]
	features.bond = BLE_BOND_REQ;
1000d378:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = BLE_MITM_REQ;
1000d37a:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = BLE_IO_CAPABALITIES;
1000d37c:	2003      	movs	r0, #3
1000d37e:	7010      	strb	r0, [r2, #0]
	features.oob_avaiable = BLE_OOB_REQ;
1000d380:	70d1      	strb	r1, [r2, #3]
	
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000d382:	001f      	movs	r7, r3
1000d384:	015a      	lsls	r2, r3, #5
1000d386:	1ad2      	subs	r2, r2, r3
1000d388:	0092      	lsls	r2, r2, #2
1000d38a:	4935      	ldr	r1, [pc, #212]	; (1000d460 <ble_pair_request_handler+0x134>)
1000d38c:	5c52      	ldrb	r2, [r2, r1]
1000d38e:	2a02      	cmp	r2, #2
1000d390:	d104      	bne.n	1000d39c <ble_pair_request_handler+0x70>
	{
		/* Distribution of IRK is required */
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000d392:	aa01      	add	r2, sp, #4
1000d394:	2103      	movs	r1, #3
1000d396:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000d398:	71d1      	strb	r1, [r2, #7]
1000d39a:	e003      	b.n	1000d3a4 <ble_pair_request_handler+0x78>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000d39c:	aa01      	add	r2, sp, #4
1000d39e:	2101      	movs	r1, #1
1000d3a0:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000d3a2:	71d1      	strb	r1, [r2, #7]
	}
			
	features.max_key_size = 16;
1000d3a4:	aa01      	add	r2, sp, #4
1000d3a6:	2110      	movs	r1, #16
1000d3a8:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
1000d3aa:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000d3ac:	017a      	lsls	r2, r7, #5
1000d3ae:	1bd2      	subs	r2, r2, r7
1000d3b0:	0092      	lsls	r2, r2, #2
1000d3b2:	492b      	ldr	r1, [pc, #172]	; (1000d460 <ble_pair_request_handler+0x134>)
1000d3b4:	188a      	adds	r2, r1, r2
1000d3b6:	7e12      	ldrb	r2, [r2, #24]
1000d3b8:	2a40      	cmp	r2, #64	; 0x40
1000d3ba:	d131      	bne.n	1000d420 <ble_pair_request_handler+0xf4>
1000d3bc:	015a      	lsls	r2, r3, #5
1000d3be:	1ad3      	subs	r3, r2, r3
1000d3c0:	009b      	lsls	r3, r3, #2
1000d3c2:	469a      	mov	sl, r3
1000d3c4:	001d      	movs	r5, r3
1000d3c6:	3560      	adds	r5, #96	; 0x60
1000d3c8:	186d      	adds	r5, r5, r1
1000d3ca:	4654      	mov	r4, sl
1000d3cc:	3468      	adds	r4, #104	; 0x68
1000d3ce:	1864      	adds	r4, r4, r1
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000d3d0:	4b24      	ldr	r3, [pc, #144]	; (1000d464 <ble_pair_request_handler+0x138>)
1000d3d2:	4699      	mov	r9, r3
1000d3d4:	260f      	movs	r6, #15
1000d3d6:	47c8      	blx	r9
1000d3d8:	4030      	ands	r0, r6
1000d3da:	7028      	strb	r0, [r5, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000d3dc:	47c8      	blx	r9
1000d3de:	4030      	ands	r0, r6
1000d3e0:	74a8      	strb	r0, [r5, #18]
1000d3e2:	3501      	adds	r5, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000d3e4:	42a5      	cmp	r5, r4
1000d3e6:	d1f6      	bne.n	1000d3d6 <ble_pair_request_handler+0xaa>
1000d3e8:	4655      	mov	r5, sl
1000d3ea:	3570      	adds	r5, #112	; 0x70
1000d3ec:	4a1c      	ldr	r2, [pc, #112]	; (1000d460 <ble_pair_request_handler+0x134>)
1000d3ee:	18ad      	adds	r5, r5, r2
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000d3f0:	4b1c      	ldr	r3, [pc, #112]	; (1000d464 <ble_pair_request_handler+0x138>)
1000d3f2:	4699      	mov	r9, r3
1000d3f4:	230f      	movs	r3, #15
1000d3f6:	4698      	mov	r8, r3
1000d3f8:	47c8      	blx	r9
1000d3fa:	4643      	mov	r3, r8
1000d3fc:	4018      	ands	r0, r3
1000d3fe:	7020      	strb	r0, [r4, #0]
1000d400:	3401      	adds	r4, #1
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000d402:	42ac      	cmp	r4, r5
1000d404:	d1f8      	bne.n	1000d3f8 <ble_pair_request_handler+0xcc>
		for (i = 0; i < 16; i++)
		{
			DBG_LOG_CONT_DEV("0x%02X ", ble_dev_info[idx].host_ltk.key[i]);
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000d406:	4b17      	ldr	r3, [pc, #92]	; (1000d464 <ble_pair_request_handler+0x138>)
1000d408:	4798      	blx	r3
1000d40a:	017b      	lsls	r3, r7, #5
1000d40c:	1bdb      	subs	r3, r3, r7
1000d40e:	009b      	lsls	r3, r3, #2
1000d410:	4a13      	ldr	r2, [pc, #76]	; (1000d460 <ble_pair_request_handler+0x134>)
1000d412:	18d3      	adds	r3, r2, r3
1000d414:	001a      	movs	r2, r3
1000d416:	3270      	adds	r2, #112	; 0x70
1000d418:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000d41a:	337a      	adds	r3, #122	; 0x7a
1000d41c:	2210      	movs	r2, #16
1000d41e:	701a      	strb	r2, [r3, #0]
	}

	/* Send pairing response */
	DBG_LOG_DEV("Sending pairing response");

	if(at_ble_authenticate(pair_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000d420:	017a      	lsls	r2, r7, #5
1000d422:	1bd7      	subs	r7, r2, r7
1000d424:	00bf      	lsls	r7, r7, #2
1000d426:	3760      	adds	r7, #96	; 0x60
1000d428:	4a0d      	ldr	r2, [pc, #52]	; (1000d460 <ble_pair_request_handler+0x134>)
1000d42a:	18ba      	adds	r2, r7, r2
1000d42c:	465b      	mov	r3, fp
1000d42e:	8818      	ldrh	r0, [r3, #0]
1000d430:	2300      	movs	r3, #0
1000d432:	a901      	add	r1, sp, #4
1000d434:	4c0c      	ldr	r4, [pc, #48]	; (1000d468 <ble_pair_request_handler+0x13c>)
1000d436:	47a0      	blx	r4
1000d438:	2800      	cmp	r0, #0
1000d43a:	d00a      	beq.n	1000d452 <ble_pair_request_handler+0x126>
	{
		features.bond = false;
1000d43c:	ab01      	add	r3, sp, #4
1000d43e:	2200      	movs	r2, #0
1000d440:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000d442:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Pair Request - Authentication Failed");
1000d444:	4809      	ldr	r0, [pc, #36]	; (1000d46c <ble_pair_request_handler+0x140>)
1000d446:	4b0a      	ldr	r3, [pc, #40]	; (1000d470 <ble_pair_request_handler+0x144>)
1000d448:	4798      	blx	r3
1000d44a:	480a      	ldr	r0, [pc, #40]	; (1000d474 <ble_pair_request_handler+0x148>)
1000d44c:	4b0a      	ldr	r3, [pc, #40]	; (1000d478 <ble_pair_request_handler+0x14c>)
1000d44e:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000d450:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000d452:	b005      	add	sp, #20
1000d454:	bc3c      	pop	{r2, r3, r4, r5}
1000d456:	4690      	mov	r8, r2
1000d458:	4699      	mov	r9, r3
1000d45a:	46a2      	mov	sl, r4
1000d45c:	46ab      	mov	fp, r5
1000d45e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d460:	1001a744 	.word	0x1001a744
1000d464:	10016855 	.word	0x10016855
1000d468:	10010541 	.word	0x10010541
1000d46c:	10017780 	.word	0x10017780
1000d470:	10016841 	.word	0x10016841
1000d474:	10018164 	.word	0x10018164
1000d478:	10016721 	.word	0x10016721

1000d47c <ble_pair_key_request_handler>:

/** @brief function handles pair key request */
at_ble_status_t ble_pair_key_request_handler (void *params)
{
1000d47c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d47e:	b085      	sub	sp, #20
1000d480:	0005      	movs	r5, r0
	at_ble_pair_key_request_t *pair_key;
	pair_key = (at_ble_pair_key_request_t *)params;
	/* Passkey has fixed value in this example MSB */
	uint8_t passkey[6]={'1','2','3','4','5','6'};
1000d482:	2206      	movs	r2, #6
1000d484:	493d      	ldr	r1, [pc, #244]	; (1000d57c <ble_pair_key_request_handler+0x100>)
1000d486:	a802      	add	r0, sp, #8
1000d488:	4e3d      	ldr	r6, [pc, #244]	; (1000d580 <ble_pair_key_request_handler+0x104>)
1000d48a:	47b0      	blx	r6
	uint8_t idx = 0;
        uint8_t pin;
        
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
1000d48c:	ac01      	add	r4, sp, #4
1000d48e:	2204      	movs	r2, #4
1000d490:	0029      	movs	r1, r5
1000d492:	0020      	movs	r0, r4
1000d494:	47b0      	blx	r6
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
1000d496:	78e3      	ldrb	r3, [r4, #3]
1000d498:	2b00      	cmp	r3, #0
1000d49a:	d162      	bne.n	1000d562 <ble_pair_key_request_handler+0xe6>
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000d49c:	4839      	ldr	r0, [pc, #228]	; (1000d584 <ble_pair_key_request_handler+0x108>)
1000d49e:	4b3a      	ldr	r3, [pc, #232]	; (1000d588 <ble_pair_key_request_handler+0x10c>)
1000d4a0:	4798      	blx	r3
1000d4a2:	483a      	ldr	r0, [pc, #232]	; (1000d58c <ble_pair_key_request_handler+0x110>)
1000d4a4:	4b3a      	ldr	r3, [pc, #232]	; (1000d590 <ble_pair_key_request_handler+0x114>)
1000d4a6:	4798      	blx	r3
1000d4a8:	2600      	movs	r6, #0
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000d4aa:	4c3a      	ldr	r4, [pc, #232]	; (1000d594 <ble_pair_key_request_handler+0x118>)
				return AT_BLE_FAILURE;
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
			  passkey[idx++] = pin;
			  DBG_LOG_CONT("%c", pin);
1000d4ac:	27ff      	movs	r7, #255	; 0xff
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000d4ae:	201e      	movs	r0, #30
1000d4b0:	47a0      	blx	r4
1000d4b2:	b2c3      	uxtb	r3, r0

			if (!pin) {
1000d4b4:	2b00      	cmp	r3, #0
1000d4b6:	d11a      	bne.n	1000d4ee <ble_pair_key_request_handler+0x72>
			DBG_LOG("Pin Timeout");
1000d4b8:	4f32      	ldr	r7, [pc, #200]	; (1000d584 <ble_pair_key_request_handler+0x108>)
1000d4ba:	0038      	movs	r0, r7
1000d4bc:	4e32      	ldr	r6, [pc, #200]	; (1000d588 <ble_pair_key_request_handler+0x10c>)
1000d4be:	47b0      	blx	r6
1000d4c0:	4835      	ldr	r0, [pc, #212]	; (1000d598 <ble_pair_key_request_handler+0x11c>)
1000d4c2:	4c33      	ldr	r4, [pc, #204]	; (1000d590 <ble_pair_key_request_handler+0x114>)
1000d4c4:	47a0      	blx	r4
				DBG_LOG("Disconnecting ...");
1000d4c6:	0038      	movs	r0, r7
1000d4c8:	47b0      	blx	r6
1000d4ca:	4834      	ldr	r0, [pc, #208]	; (1000d59c <ble_pair_key_request_handler+0x120>)
1000d4cc:	47a0      	blx	r4
				if (!(at_ble_disconnect(pair_key->handle,
1000d4ce:	8828      	ldrh	r0, [r5, #0]
1000d4d0:	2113      	movs	r1, #19
1000d4d2:	4b33      	ldr	r3, [pc, #204]	; (1000d5a0 <ble_pair_key_request_handler+0x124>)
1000d4d4:	4798      	blx	r3
1000d4d6:	0003      	movs	r3, r0
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
				}
				return AT_BLE_FAILURE;
1000d4d8:	20e2      	movs	r0, #226	; 0xe2
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);

			if (!pin) {
			DBG_LOG("Pin Timeout");
				DBG_LOG("Disconnecting ...");
				if (!(at_ble_disconnect(pair_key->handle,
1000d4da:	2b00      	cmp	r3, #0
1000d4dc:	d04c      	beq.n	1000d578 <ble_pair_key_request_handler+0xfc>
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
1000d4de:	4829      	ldr	r0, [pc, #164]	; (1000d584 <ble_pair_key_request_handler+0x108>)
1000d4e0:	4b29      	ldr	r3, [pc, #164]	; (1000d588 <ble_pair_key_request_handler+0x10c>)
1000d4e2:	4798      	blx	r3
1000d4e4:	482f      	ldr	r0, [pc, #188]	; (1000d5a4 <ble_pair_key_request_handler+0x128>)
1000d4e6:	4b2a      	ldr	r3, [pc, #168]	; (1000d590 <ble_pair_key_request_handler+0x114>)
1000d4e8:	4798      	blx	r3
				}
				return AT_BLE_FAILURE;
1000d4ea:	20e2      	movs	r0, #226	; 0xe2
1000d4ec:	e044      	b.n	1000d578 <ble_pair_key_request_handler+0xfc>
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
1000d4ee:	001a      	movs	r2, r3
1000d4f0:	3a30      	subs	r2, #48	; 0x30
1000d4f2:	2a09      	cmp	r2, #9
1000d4f4:	d8db      	bhi.n	1000d4ae <ble_pair_key_request_handler+0x32>
			  passkey[idx++] = pin;
1000d4f6:	aa02      	add	r2, sp, #8
1000d4f8:	54b3      	strb	r3, [r6, r2]
			  DBG_LOG_CONT("%c", pin);
1000d4fa:	4038      	ands	r0, r7
1000d4fc:	4b2a      	ldr	r3, [pc, #168]	; (1000d5a8 <ble_pair_key_request_handler+0x12c>)
1000d4fe:	4798      	blx	r3
1000d500:	3601      	adds	r6, #1
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
1000d502:	2e06      	cmp	r6, #6
1000d504:	d026      	beq.n	1000d554 <ble_pair_key_request_handler+0xd8>
1000d506:	e7d2      	b.n	1000d4ae <ble_pair_key_request_handler+0x32>
          {
            DBG_LOG("Entered Pass-code:");
          }
          else
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
1000d508:	481e      	ldr	r0, [pc, #120]	; (1000d584 <ble_pair_key_request_handler+0x108>)
1000d50a:	4b1f      	ldr	r3, [pc, #124]	; (1000d588 <ble_pair_key_request_handler+0x10c>)
1000d50c:	4798      	blx	r3
1000d50e:	4827      	ldr	r0, [pc, #156]	; (1000d5ac <ble_pair_key_request_handler+0x130>)
1000d510:	4b1f      	ldr	r3, [pc, #124]	; (1000d590 <ble_pair_key_request_handler+0x114>)
1000d512:	4798      	blx	r3
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000d514:	2400      	movs	r4, #0
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
1000d516:	4e24      	ldr	r6, [pc, #144]	; (1000d5a8 <ble_pair_key_request_handler+0x12c>)
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
1000d518:	ab02      	add	r3, sp, #8
                  DBG_LOG_CONT("%c",passkey[idx]);
1000d51a:	5ce0      	ldrb	r0, [r4, r3]
1000d51c:	47b0      	blx	r6
1000d51e:	3401      	adds	r4, #1
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
1000d520:	2c06      	cmp	r4, #6
1000d522:	d1f9      	bne.n	1000d518 <ble_pair_key_request_handler+0x9c>
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
          }		
          
          if(!((at_ble_pair_key_reply(pair_key->handle, pair_key_request.type, passkey)) == AT_BLE_SUCCESS))
1000d524:	ab01      	add	r3, sp, #4
1000d526:	7899      	ldrb	r1, [r3, #2]
1000d528:	8828      	ldrh	r0, [r5, #0]
1000d52a:	aa02      	add	r2, sp, #8
1000d52c:	4b20      	ldr	r3, [pc, #128]	; (1000d5b0 <ble_pair_key_request_handler+0x134>)
1000d52e:	4798      	blx	r3
1000d530:	2800      	cmp	r0, #0
1000d532:	d021      	beq.n	1000d578 <ble_pair_key_request_handler+0xfc>
          {
                  DBG_LOG("Pair-key reply failed");
1000d534:	4813      	ldr	r0, [pc, #76]	; (1000d584 <ble_pair_key_request_handler+0x108>)
1000d536:	4b14      	ldr	r3, [pc, #80]	; (1000d588 <ble_pair_key_request_handler+0x10c>)
1000d538:	4798      	blx	r3
1000d53a:	481e      	ldr	r0, [pc, #120]	; (1000d5b4 <ble_pair_key_request_handler+0x138>)
1000d53c:	4b14      	ldr	r3, [pc, #80]	; (1000d590 <ble_pair_key_request_handler+0x114>)
1000d53e:	4798      	blx	r3
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000d540:	2000      	movs	r0, #0
1000d542:	e019      	b.n	1000d578 <ble_pair_key_request_handler+0xfc>
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
1000d544:	480f      	ldr	r0, [pc, #60]	; (1000d584 <ble_pair_key_request_handler+0x108>)
1000d546:	4b10      	ldr	r3, [pc, #64]	; (1000d588 <ble_pair_key_request_handler+0x10c>)
1000d548:	4798      	blx	r3
1000d54a:	481b      	ldr	r0, [pc, #108]	; (1000d5b8 <ble_pair_key_request_handler+0x13c>)
1000d54c:	4b10      	ldr	r3, [pc, #64]	; (1000d590 <ble_pair_key_request_handler+0x114>)
1000d54e:	4798      	blx	r3
		}
	}
	return AT_BLE_SUCCESS;	
1000d550:	2000      	movs	r0, #0
1000d552:	e011      	b.n	1000d578 <ble_pair_key_request_handler+0xfc>
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
	   (pair_key_request.type == AT_BLE_PAIR_PASSKEY)) || (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY))
	{
          if(pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY)
          {
            DBG_LOG("Entered Pass-code:");
1000d554:	480b      	ldr	r0, [pc, #44]	; (1000d584 <ble_pair_key_request_handler+0x108>)
1000d556:	4b0c      	ldr	r3, [pc, #48]	; (1000d588 <ble_pair_key_request_handler+0x10c>)
1000d558:	4798      	blx	r3
1000d55a:	4818      	ldr	r0, [pc, #96]	; (1000d5bc <ble_pair_key_request_handler+0x140>)
1000d55c:	4b0c      	ldr	r3, [pc, #48]	; (1000d590 <ble_pair_key_request_handler+0x114>)
1000d55e:	4798      	blx	r3
1000d560:	e7d8      	b.n	1000d514 <ble_pair_key_request_handler+0x98>
			} 
	  }
	}	
	
	/* Display passkey */
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
1000d562:	ab01      	add	r3, sp, #4
1000d564:	885a      	ldrh	r2, [r3, #2]
1000d566:	2380      	movs	r3, #128	; 0x80
1000d568:	005b      	lsls	r3, r3, #1
1000d56a:	429a      	cmp	r2, r3
1000d56c:	d0cc      	beq.n	1000d508 <ble_pair_key_request_handler+0x8c>
                  DBG_LOG("Pair-key reply failed");
          }
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
1000d56e:	ab01      	add	r3, sp, #4
1000d570:	789b      	ldrb	r3, [r3, #2]
1000d572:	2b01      	cmp	r3, #1
1000d574:	d0e6      	beq.n	1000d544 <ble_pair_key_request_handler+0xc8>
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000d576:	2000      	movs	r0, #0
}
1000d578:	b005      	add	sp, #20
1000d57a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d57c:	10017f10 	.word	0x10017f10
1000d580:	100165c7 	.word	0x100165c7
1000d584:	10017780 	.word	0x10017780
1000d588:	10016841 	.word	0x10016841
1000d58c:	1001818c 	.word	0x1001818c
1000d590:	10016721 	.word	0x10016721
1000d594:	1000e105 	.word	0x1000e105
1000d598:	100181b4 	.word	0x100181b4
1000d59c:	100181c0 	.word	0x100181c0
1000d5a0:	1000fb49 	.word	0x1000fb49
1000d5a4:	100180a8 	.word	0x100180a8
1000d5a8:	10016755 	.word	0x10016755
1000d5ac:	100181d4 	.word	0x100181d4
1000d5b0:	10010671 	.word	0x10010671
1000d5b4:	1001820c 	.word	0x1001820c
1000d5b8:	10018224 	.word	0x10018224
1000d5bc:	10018240 	.word	0x10018240

1000d5c0 <ble_encryption_request_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption requests */
at_ble_status_t ble_encryption_request_handler(void *params)
{
1000d5c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000d5c2:	0006      	movs	r6, r0
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000d5c4:	8805      	ldrh	r5, [r0, #0]
1000d5c6:	4b2f      	ldr	r3, [pc, #188]	; (1000d684 <ble_encryption_request_handler+0xc4>)
1000d5c8:	2200      	movs	r2, #0
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d5ca:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000d5cc:	0010      	movs	r0, r2
1000d5ce:	8919      	ldrh	r1, [r3, #8]
1000d5d0:	42a9      	cmp	r1, r5
1000d5d2:	d116      	bne.n	1000d602 <ble_encryption_request_handler+0x42>
1000d5d4:	0019      	movs	r1, r3
1000d5d6:	315e      	adds	r1, #94	; 0x5e
1000d5d8:	7809      	ldrb	r1, [r1, #0]
1000d5da:	2901      	cmp	r1, #1
1000d5dc:	d911      	bls.n	1000d602 <ble_encryption_request_handler+0x42>
		(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE))
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000d5de:	4929      	ldr	r1, [pc, #164]	; (1000d684 <ble_encryption_request_handler+0xc4>)
1000d5e0:	0152      	lsls	r2, r2, #5
1000d5e2:	1a10      	subs	r0, r2, r0
1000d5e4:	0080      	lsls	r0, r0, #2
1000d5e6:	1808      	adds	r0, r1, r0
1000d5e8:	305e      	adds	r0, #94	; 0x5e
1000d5ea:	2306      	movs	r3, #6
1000d5ec:	7003      	strb	r3, [r0, #0]
	{
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
		DBG_LOG_DEV("The index is %d",idx);
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
1000d5ee:	0162      	lsls	r2, r4, #5
1000d5f0:	1b13      	subs	r3, r2, r4
1000d5f2:	009b      	lsls	r3, r3, #2
1000d5f4:	18cb      	adds	r3, r1, r3
1000d5f6:	3370      	adds	r3, #112	; 0x70
1000d5f8:	881a      	ldrh	r2, [r3, #0]
1000d5fa:	8873      	ldrh	r3, [r6, #2]
1000d5fc:	429a      	cmp	r2, r3
1000d5fe:	d113      	bne.n	1000d628 <ble_encryption_request_handler+0x68>
1000d600:	e006      	b.n	1000d610 <ble_encryption_request_handler+0x50>
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d602:	3401      	adds	r4, #1
1000d604:	b2e4      	uxtb	r4, r4
1000d606:	3201      	adds	r2, #1
1000d608:	337c      	adds	r3, #124	; 0x7c
1000d60a:	2c05      	cmp	r4, #5
1000d60c:	d1de      	bne.n	1000d5cc <ble_encryption_request_handler+0xc>
1000d60e:	e00b      	b.n	1000d628 <ble_encryption_request_handler+0x68>
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
		DBG_LOG_DEV("The index is %d",idx);
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
		&& !memcmp(&enc_req->nb[0],&ble_dev_info[idx].host_ltk.nb[0],8))
1000d610:	0161      	lsls	r1, r4, #5
1000d612:	1b09      	subs	r1, r1, r4
1000d614:	0089      	lsls	r1, r1, #2
1000d616:	4b1b      	ldr	r3, [pc, #108]	; (1000d684 <ble_encryption_request_handler+0xc4>)
1000d618:	1859      	adds	r1, r3, r1
1000d61a:	3172      	adds	r1, #114	; 0x72
1000d61c:	1d30      	adds	r0, r6, #4
1000d61e:	2208      	movs	r2, #8
1000d620:	4b19      	ldr	r3, [pc, #100]	; (1000d688 <ble_encryption_request_handler+0xc8>)
1000d622:	4798      	blx	r3
			DBG_LOG_DEV("ENC-Req: Key Found");
		}
	}
	
	
    if(key_found == false)
1000d624:	2800      	cmp	r0, #0
1000d626:	d015      	beq.n	1000d654 <ble_encryption_request_handler+0x94>
    {
	    DBG_LOG("Pairing information of peer device is not available.");
1000d628:	4f18      	ldr	r7, [pc, #96]	; (1000d68c <ble_encryption_request_handler+0xcc>)
1000d62a:	0038      	movs	r0, r7
1000d62c:	4e18      	ldr	r6, [pc, #96]	; (1000d690 <ble_encryption_request_handler+0xd0>)
1000d62e:	47b0      	blx	r6
1000d630:	4818      	ldr	r0, [pc, #96]	; (1000d694 <ble_encryption_request_handler+0xd4>)
1000d632:	4d19      	ldr	r5, [pc, #100]	; (1000d698 <ble_encryption_request_handler+0xd8>)
1000d634:	47a8      	blx	r5
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
1000d636:	0038      	movs	r0, r7
1000d638:	47b0      	blx	r6
1000d63a:	4818      	ldr	r0, [pc, #96]	; (1000d69c <ble_encryption_request_handler+0xdc>)
1000d63c:	47a8      	blx	r5
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
1000d63e:	0163      	lsls	r3, r4, #5
1000d640:	1b1c      	subs	r4, r3, r4
1000d642:	00a4      	lsls	r4, r4, #2
1000d644:	4b0f      	ldr	r3, [pc, #60]	; (1000d684 <ble_encryption_request_handler+0xc4>)
1000d646:	191c      	adds	r4, r3, r4
1000d648:	8920      	ldrh	r0, [r4, #8]
1000d64a:	2105      	movs	r1, #5
1000d64c:	4b14      	ldr	r3, [pc, #80]	; (1000d6a0 <ble_encryption_request_handler+0xe0>)
1000d64e:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000d650:	20e2      	movs	r0, #226	; 0xe2
1000d652:	e016      	b.n	1000d682 <ble_encryption_request_handler+0xc2>
    }

	if(!(at_ble_encryption_request_reply(enc_req->handle, ble_dev_info[idx].bond_info.auth, key_found, &ble_dev_info[idx].host_ltk) == AT_BLE_SUCCESS))
1000d654:	0162      	lsls	r2, r4, #5
1000d656:	1b13      	subs	r3, r2, r4
1000d658:	009b      	lsls	r3, r3, #2
1000d65a:	3360      	adds	r3, #96	; 0x60
1000d65c:	4909      	ldr	r1, [pc, #36]	; (1000d684 <ble_encryption_request_handler+0xc4>)
1000d65e:	185b      	adds	r3, r3, r1
1000d660:	1b14      	subs	r4, r2, r4
1000d662:	00a4      	lsls	r4, r4, #2
1000d664:	190c      	adds	r4, r1, r4
1000d666:	7d21      	ldrb	r1, [r4, #20]
1000d668:	8830      	ldrh	r0, [r6, #0]
1000d66a:	2201      	movs	r2, #1
1000d66c:	4c0d      	ldr	r4, [pc, #52]	; (1000d6a4 <ble_encryption_request_handler+0xe4>)
1000d66e:	47a0      	blx	r4
1000d670:	2800      	cmp	r0, #0
1000d672:	d006      	beq.n	1000d682 <ble_encryption_request_handler+0xc2>
	{
		DBG_LOG("Encryption Request Reply Failed");
1000d674:	4805      	ldr	r0, [pc, #20]	; (1000d68c <ble_encryption_request_handler+0xcc>)
1000d676:	4b06      	ldr	r3, [pc, #24]	; (1000d690 <ble_encryption_request_handler+0xd0>)
1000d678:	4798      	blx	r3
1000d67a:	480b      	ldr	r0, [pc, #44]	; (1000d6a8 <ble_encryption_request_handler+0xe8>)
1000d67c:	4b06      	ldr	r3, [pc, #24]	; (1000d698 <ble_encryption_request_handler+0xd8>)
1000d67e:	4798      	blx	r3
	}
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
	}
	return AT_BLE_SUCCESS;
1000d680:	2000      	movs	r0, #0
}
1000d682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000d684:	1001a744 	.word	0x1001a744
1000d688:	100165a9 	.word	0x100165a9
1000d68c:	10017780 	.word	0x10017780
1000d690:	10016841 	.word	0x10016841
1000d694:	10018254 	.word	0x10018254
1000d698:	10016721 	.word	0x10016721
1000d69c:	1001828c 	.word	0x1001828c
1000d6a0:	1000fb49 	.word	0x1000fb49
1000d6a4:	100107a5 	.word	0x100107a5
1000d6a8:	100182e4 	.word	0x100182e4

1000d6ac <ble_mgr_events_callback_handler>:
}

bool ble_mgr_events_callback_handler(ble_mgr_event_cb_t event_cb_type, 
									ble_mgr_event_t event_type,
									const ble_event_callback_t *ble_event_handler)
{
1000d6ac:	b530      	push	{r4, r5, lr}
	uint8_t idx;
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
1000d6ae:	2a00      	cmp	r2, #0
1000d6b0:	d047      	beq.n	1000d742 <ble_mgr_events_callback_handler+0x96>
	{
		switch(event_type)
1000d6b2:	2906      	cmp	r1, #6
1000d6b4:	d847      	bhi.n	1000d746 <ble_mgr_events_callback_handler+0x9a>
1000d6b6:	0089      	lsls	r1, r1, #2
1000d6b8:	4b28      	ldr	r3, [pc, #160]	; (1000d75c <ble_mgr_events_callback_handler+0xb0>)
1000d6ba:	585b      	ldr	r3, [r3, r1]
1000d6bc:	469f      	mov	pc, r3
			}
			break;
			
			case BLE_GATT_SERVER_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_server_event_cb;
1000d6be:	4b28      	ldr	r3, [pc, #160]	; (1000d760 <ble_mgr_events_callback_handler+0xb4>)
				max_event_handler = MAX_GATT_SERVER_SUBSCRIBERS;
1000d6c0:	2405      	movs	r4, #5
1000d6c2:	e00a      	b.n	1000d6da <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_GATT_HTPT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_htpt_event_cb;
1000d6c4:	4b27      	ldr	r3, [pc, #156]	; (1000d764 <ble_mgr_events_callback_handler+0xb8>)
				max_event_handler = MAX_HTPT_EVENT_SUBSCRIBERS;
1000d6c6:	2401      	movs	r4, #1
			}
			break;
1000d6c8:	e007      	b.n	1000d6da <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_DTM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_dtm_event_cb;
1000d6ca:	4b27      	ldr	r3, [pc, #156]	; (1000d768 <ble_mgr_events_callback_handler+0xbc>)
				max_event_handler = MAX_DTM_EVENT_SUBSCRIBERS;
1000d6cc:	2405      	movs	r4, #5
			}
			break;
1000d6ce:	e004      	b.n	1000d6da <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_CUSTOM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_custom_event_cb;
1000d6d0:	4b26      	ldr	r3, [pc, #152]	; (1000d76c <ble_mgr_events_callback_handler+0xc0>)
				max_event_handler = MAX_CUSTOM_EVENT_SUBSCRIBERS;
1000d6d2:	2401      	movs	r4, #1
			}
			break;
1000d6d4:	e001      	b.n	1000d6da <ble_mgr_events_callback_handler+0x2e>
	{
		switch(event_type)
		{
			case BLE_GAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gap_event_cb;
1000d6d6:	4b26      	ldr	r3, [pc, #152]	; (1000d770 <ble_mgr_events_callback_handler+0xc4>)
				max_event_handler = MAX_GAP_EVENT_SUBSCRIBERS;
1000d6d8:	2405      	movs	r4, #5
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
1000d6da:	2800      	cmp	r0, #0
1000d6dc:	d116      	bne.n	1000d70c <ble_mgr_events_callback_handler+0x60>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000d6de:	6819      	ldr	r1, [r3, #0]
1000d6e0:	2900      	cmp	r1, #0
1000d6e2:	d10b      	bne.n	1000d6fc <ble_mgr_events_callback_handler+0x50>
1000d6e4:	e006      	b.n	1000d6f4 <ble_mgr_events_callback_handler+0x48>
1000d6e6:	001d      	movs	r5, r3
1000d6e8:	3304      	adds	r3, #4
1000d6ea:	1f18      	subs	r0, r3, #4
1000d6ec:	6800      	ldr	r0, [r0, #0]
1000d6ee:	2800      	cmp	r0, #0
1000d6f0:	d106      	bne.n	1000d700 <ble_mgr_events_callback_handler+0x54>
1000d6f2:	e000      	b.n	1000d6f6 <ble_mgr_events_callback_handler+0x4a>
1000d6f4:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = ble_event_handler;
1000d6f6:	602a      	str	r2, [r5, #0]
						status = true; //Successfully registered to table
1000d6f8:	2101      	movs	r1, #1
						break;
1000d6fa:	e02c      	b.n	1000d756 <ble_mgr_events_callback_handler+0xaa>
1000d6fc:	3304      	adds	r3, #4
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000d6fe:	2100      	movs	r1, #0
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000d700:	3101      	adds	r1, #1
1000d702:	b2c9      	uxtb	r1, r1
1000d704:	42a1      	cmp	r1, r4
1000d706:	d3ee      	bcc.n	1000d6e6 <ble_mgr_events_callback_handler+0x3a>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000d708:	2100      	movs	r1, #0
1000d70a:	e024      	b.n	1000d756 <ble_mgr_events_callback_handler+0xaa>
1000d70c:	2100      	movs	r1, #0
						status = true; //Successfully registered to table
						break;
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
1000d70e:	2801      	cmp	r0, #1
1000d710:	d121      	bne.n	1000d756 <ble_mgr_events_callback_handler+0xaa>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000d712:	6819      	ldr	r1, [r3, #0]
1000d714:	428a      	cmp	r2, r1
1000d716:	d10c      	bne.n	1000d732 <ble_mgr_events_callback_handler+0x86>
1000d718:	e006      	b.n	1000d728 <ble_mgr_events_callback_handler+0x7c>
1000d71a:	001d      	movs	r5, r3
1000d71c:	3304      	adds	r3, #4
1000d71e:	1f18      	subs	r0, r3, #4
1000d720:	6800      	ldr	r0, [r0, #0]
1000d722:	4282      	cmp	r2, r0
1000d724:	d107      	bne.n	1000d736 <ble_mgr_events_callback_handler+0x8a>
1000d726:	e000      	b.n	1000d72a <ble_mgr_events_callback_handler+0x7e>
1000d728:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = NULL;
1000d72a:	2300      	movs	r3, #0
1000d72c:	602b      	str	r3, [r5, #0]
						status = true;//Successfully unregistered from table
1000d72e:	2101      	movs	r1, #1
						break;
1000d730:	e011      	b.n	1000d756 <ble_mgr_events_callback_handler+0xaa>
1000d732:	3304      	adds	r3, #4
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000d734:	2100      	movs	r1, #0
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000d736:	3101      	adds	r1, #1
1000d738:	b2c9      	uxtb	r1, r1
1000d73a:	42a1      	cmp	r1, r4
1000d73c:	d3ed      	bcc.n	1000d71a <ble_mgr_events_callback_handler+0x6e>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000d73e:	2100      	movs	r1, #0
1000d740:	e009      	b.n	1000d756 <ble_mgr_events_callback_handler+0xaa>
			}			
		}
	}
	else
	{
		status = false; //Invalid parameter
1000d742:	2100      	movs	r1, #0
1000d744:	e007      	b.n	1000d756 <ble_mgr_events_callback_handler+0xaa>
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
	{
		switch(event_type)
1000d746:	2100      	movs	r1, #0
1000d748:	e005      	b.n	1000d756 <ble_mgr_events_callback_handler+0xaa>
			}
			break;
			
			case BLE_GATT_CLIENT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_client_event_cb;
1000d74a:	4b0a      	ldr	r3, [pc, #40]	; (1000d774 <ble_mgr_events_callback_handler+0xc8>)
				max_event_handler = MAX_GATT_CLIENT_SUBSCRIBERS;
1000d74c:	2405      	movs	r4, #5
1000d74e:	e7c4      	b.n	1000d6da <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_L2CAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_l2cap_event_cb;
1000d750:	4b09      	ldr	r3, [pc, #36]	; (1000d778 <ble_mgr_events_callback_handler+0xcc>)
				max_event_handler = MAX_L2CAP_EVENT_SUBSCRIBERS;
1000d752:	2401      	movs	r4, #1
1000d754:	e7c1      	b.n	1000d6da <ble_mgr_events_callback_handler+0x2e>
	else
	{
		status = false; //Invalid parameter
	}
	return status;
}
1000d756:	0008      	movs	r0, r1
1000d758:	bd30      	pop	{r4, r5, pc}
1000d75a:	46c0      	nop			; (mov r8, r8)
1000d75c:	10017e04 	.word	0x10017e04
1000d760:	1001a730 	.word	0x1001a730
1000d764:	1001a72c 	.word	0x1001a72c
1000d768:	1001a9b4 	.word	0x1001a9b4
1000d76c:	1001af68 	.word	0x1001af68
1000d770:	1001a9c8 	.word	0x1001a9c8
1000d774:	1001a9dc 	.word	0x1001a9dc
1000d778:	1001aa24 	.word	0x1001aa24

1000d77c <ble_device_init>:
volatile uint32_t 	event_params_memory[1024] 	= {0};


/** @brief BLE device initialization */
void ble_device_init(at_ble_addr_t *addr)
{
1000d77c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d77e:	465f      	mov	r7, fp
1000d780:	4656      	mov	r6, sl
1000d782:	464d      	mov	r5, r9
1000d784:	4644      	mov	r4, r8
1000d786:	b4f0      	push	{r4, r5, r6, r7}
1000d788:	b08d      	sub	sp, #52	; 0x34
1000d78a:	0006      	movs	r6, r0
static bool ble_scan_duplication_check(at_ble_scan_info_t * info);
#endif

static void init_global_var(void)
{
	ble_user_event_cb = 0;
1000d78c:	2400      	movs	r4, #0
1000d78e:	4b72      	ldr	r3, [pc, #456]	; (1000d958 <ble_device_init+0x1dc>)
1000d790:	601c      	str	r4, [r3, #0]
	
	memset(&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000d792:	2207      	movs	r2, #7
1000d794:	2100      	movs	r1, #0
1000d796:	4871      	ldr	r0, [pc, #452]	; (1000d95c <ble_device_init+0x1e0>)
1000d798:	4d71      	ldr	r5, [pc, #452]	; (1000d960 <ble_device_init+0x1e4>)
1000d79a:	47a8      	blx	r5
	memset(&connected_state_info, 0, sizeof(at_ble_connected_t));
1000d79c:	2212      	movs	r2, #18
1000d79e:	2100      	movs	r1, #0
1000d7a0:	4870      	ldr	r0, [pc, #448]	; (1000d964 <ble_device_init+0x1e8>)
1000d7a2:	47a8      	blx	r5
		
#if defined ATT_DB_MEMORY
	memset(att_db_data, 0, sizeof(uint32_t) * BLE_ATT_DB_MEMORY_SIZE/4);
1000d7a4:	4a70      	ldr	r2, [pc, #448]	; (1000d968 <ble_device_init+0x1ec>)
1000d7a6:	2100      	movs	r1, #0
1000d7a8:	4870      	ldr	r0, [pc, #448]	; (1000d96c <ble_device_init+0x1f0>)
1000d7aa:	47a8      	blx	r5
#endif

	scan_response_count = 0;
1000d7ac:	4b70      	ldr	r3, [pc, #448]	; (1000d970 <ble_device_init+0x1f4>)
1000d7ae:	701c      	strb	r4, [r3, #0]
	memset(scan_info, 0, sizeof(scan_info));
1000d7b0:	22cd      	movs	r2, #205	; 0xcd
1000d7b2:	0092      	lsls	r2, r2, #2
1000d7b4:	2100      	movs	r1, #0
1000d7b6:	486f      	ldr	r0, [pc, #444]	; (1000d974 <ble_device_init+0x1f8>)
1000d7b8:	47a8      	blx	r5

	event = AT_BLE_UNDEFINED_EVENT;
1000d7ba:	4b6f      	ldr	r3, [pc, #444]	; (1000d978 <ble_device_init+0x1fc>)
1000d7bc:	701c      	strb	r4, [r3, #0]
	memset(ble_event_params, 0, BLE_EVENT_PARAM_MAX_SIZE);
1000d7be:	2283      	movs	r2, #131	; 0x83
1000d7c0:	0092      	lsls	r2, r2, #2
1000d7c2:	2100      	movs	r1, #0
1000d7c4:	486d      	ldr	r0, [pc, #436]	; (1000d97c <ble_device_init+0x200>)
1000d7c6:	47a8      	blx	r5
{
	uint8_t idx;	
	char *dev_name = NULL;
	init_global_var();

	memset((uint8_t *)event_pool_memory, 0, sizeof(event_pool_memory));
1000d7c8:	4b6d      	ldr	r3, [pc, #436]	; (1000d980 <ble_device_init+0x204>)
1000d7ca:	469b      	mov	fp, r3
1000d7cc:	2380      	movs	r3, #128	; 0x80
1000d7ce:	00db      	lsls	r3, r3, #3
1000d7d0:	469a      	mov	sl, r3
1000d7d2:	001a      	movs	r2, r3
1000d7d4:	2100      	movs	r1, #0
1000d7d6:	4658      	mov	r0, fp
1000d7d8:	47a8      	blx	r5
	memset((uint8_t *)event_params_memory, 0, sizeof(event_params_memory));
1000d7da:	4b6a      	ldr	r3, [pc, #424]	; (1000d984 <ble_device_init+0x208>)
1000d7dc:	4699      	mov	r9, r3
1000d7de:	2380      	movs	r3, #128	; 0x80
1000d7e0:	015b      	lsls	r3, r3, #5
1000d7e2:	4698      	mov	r8, r3
1000d7e4:	001a      	movs	r2, r3
1000d7e6:	2100      	movs	r1, #0
1000d7e8:	4648      	mov	r0, r9
1000d7ea:	47a8      	blx	r5

	memset(&pf_cfg, 0, sizeof(pf_cfg));
1000d7ec:	4f66      	ldr	r7, [pc, #408]	; (1000d988 <ble_device_init+0x20c>)
1000d7ee:	221c      	movs	r2, #28
1000d7f0:	2100      	movs	r1, #0
1000d7f2:	0038      	movs	r0, r7
1000d7f4:	47a8      	blx	r5

	pf_cfg.event_mem_pool.memStartAdd        = (uint8_t *)event_pool_memory;
1000d7f6:	465b      	mov	r3, fp
1000d7f8:	60bb      	str	r3, [r7, #8]
	pf_cfg.event_mem_pool.memSize            = sizeof(event_pool_memory);
1000d7fa:	4653      	mov	r3, sl
1000d7fc:	60fb      	str	r3, [r7, #12]
	pf_cfg.event_params_mem_pool.memStartAdd = (uint8_t *)event_params_memory;
1000d7fe:	464b      	mov	r3, r9
1000d800:	613b      	str	r3, [r7, #16]
	pf_cfg.event_params_mem_pool.memSize     = sizeof(event_params_memory);
1000d802:	4643      	mov	r3, r8
1000d804:	617b      	str	r3, [r7, #20]

	/* Initialize the BLE Event callbacks */
	for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gap_event_cb[idx] = NULL;
1000d806:	4b61      	ldr	r3, [pc, #388]	; (1000d98c <ble_device_init+0x210>)
1000d808:	601c      	str	r4, [r3, #0]
1000d80a:	605c      	str	r4, [r3, #4]
1000d80c:	609c      	str	r4, [r3, #8]
1000d80e:	60dc      	str	r4, [r3, #12]
1000d810:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_client_event_cb[idx] = NULL;
1000d812:	4b5f      	ldr	r3, [pc, #380]	; (1000d990 <ble_device_init+0x214>)
1000d814:	601c      	str	r4, [r3, #0]
1000d816:	605c      	str	r4, [r3, #4]
1000d818:	609c      	str	r4, [r3, #8]
1000d81a:	60dc      	str	r4, [r3, #12]
1000d81c:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_server_event_cb[idx] = NULL;
1000d81e:	4b5d      	ldr	r3, [pc, #372]	; (1000d994 <ble_device_init+0x218>)
1000d820:	601c      	str	r4, [r3, #0]
1000d822:	605c      	str	r4, [r3, #4]
1000d824:	609c      	str	r4, [r3, #8]
1000d826:	60dc      	str	r4, [r3, #12]
1000d828:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_l2cap_event_cb[idx] = NULL;
1000d82a:	4b5b      	ldr	r3, [pc, #364]	; (1000d998 <ble_device_init+0x21c>)
1000d82c:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_htpt_event_cb[idx] = NULL;
1000d82e:	4b5b      	ldr	r3, [pc, #364]	; (1000d99c <ble_device_init+0x220>)
1000d830:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_dtm_event_cb[idx] = NULL;
1000d832:	4b5b      	ldr	r3, [pc, #364]	; (1000d9a0 <ble_device_init+0x224>)
1000d834:	601c      	str	r4, [r3, #0]
1000d836:	605c      	str	r4, [r3, #4]
1000d838:	609c      	str	r4, [r3, #8]
1000d83a:	60dc      	str	r4, [r3, #12]
1000d83c:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_custom_event_cb[idx] = NULL;
1000d83e:	4b59      	ldr	r3, [pc, #356]	; (1000d9a4 <ble_device_init+0x228>)
1000d840:	601c      	str	r4, [r3, #0]
1000d842:	4c59      	ldr	r4, [pc, #356]	; (1000d9a8 <ble_device_init+0x22c>)
1000d844:	239b      	movs	r3, #155	; 0x9b
1000d846:	009b      	lsls	r3, r3, #2
1000d848:	4698      	mov	r8, r3
1000d84a:	44a0      	add	r8, r4
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000d84c:	4f44      	ldr	r7, [pc, #272]	; (1000d960 <ble_device_init+0x1e4>)
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000d84e:	2540      	movs	r5, #64	; 0x40
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000d850:	227c      	movs	r2, #124	; 0x7c
1000d852:	2100      	movs	r1, #0
1000d854:	0020      	movs	r0, r4
1000d856:	47b8      	blx	r7
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000d858:	0023      	movs	r3, r4
1000d85a:	335e      	adds	r3, #94	; 0x5e
1000d85c:	2200      	movs	r2, #0
1000d85e:	701a      	strb	r2, [r3, #0]
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000d860:	7625      	strb	r5, [r4, #24]
1000d862:	347c      	adds	r4, #124	; 0x7c
	{
		ble_mgr_custom_event_cb[idx] = NULL;
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d864:	45a0      	cmp	r8, r4
1000d866:	d1f3      	bne.n	1000d850 <ble_device_init+0xd4>
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
    }
	/* Need to reset the count to 0 for storing it only in SRAM */
	ble_device_count = 0; 
1000d868:	4b50      	ldr	r3, [pc, #320]	; (1000d9ac <ble_device_init+0x230>)
1000d86a:	701a      	strb	r2, [r3, #0]
	
	
#if defined ATT_DB_MEMORY
	pf_cfg.memPool.memSize = BLE_ATT_DB_MEMORY_SIZE;
1000d86c:	4846      	ldr	r0, [pc, #280]	; (1000d988 <ble_device_init+0x20c>)
1000d86e:	4b3e      	ldr	r3, [pc, #248]	; (1000d968 <ble_device_init+0x1ec>)
1000d870:	6043      	str	r3, [r0, #4]
	pf_cfg.memPool.memStartAdd = (uint8_t *)att_db_data;
1000d872:	4b3e      	ldr	r3, [pc, #248]	; (1000d96c <ble_device_init+0x1f0>)
1000d874:	6003      	str	r3, [r0, #0]
{
	/* Initialize the platform */
	DBG_LOG_DEV("[ble_init]\t\t\tInitializing SAMB11");
	
	/* Init BLE device */
	if(at_ble_init(args) != AT_BLE_SUCCESS)
1000d876:	4b4e      	ldr	r3, [pc, #312]	; (1000d9b0 <ble_device_init+0x234>)
1000d878:	4798      	blx	r3
1000d87a:	2800      	cmp	r0, #0
1000d87c:	d00b      	beq.n	1000d896 <ble_device_init+0x11a>
	{
		DBG_LOG("[ble_init]\t\tSAMB11 Initialization failed");
1000d87e:	4e4d      	ldr	r6, [pc, #308]	; (1000d9b4 <ble_device_init+0x238>)
1000d880:	0030      	movs	r0, r6
1000d882:	4d4d      	ldr	r5, [pc, #308]	; (1000d9b8 <ble_device_init+0x23c>)
1000d884:	47a8      	blx	r5
1000d886:	484d      	ldr	r0, [pc, #308]	; (1000d9bc <ble_device_init+0x240>)
1000d888:	4c4d      	ldr	r4, [pc, #308]	; (1000d9c0 <ble_device_init+0x244>)
1000d88a:	47a0      	blx	r4
		DBG_LOG("[ble_init]\t\tPlease check the power and connection / hardware connector");	
1000d88c:	0030      	movs	r0, r6
1000d88e:	47a8      	blx	r5
1000d890:	484c      	ldr	r0, [pc, #304]	; (1000d9c4 <ble_device_init+0x248>)
1000d892:	47a0      	blx	r4
1000d894:	e7fe      	b.n	1000d894 <ble_device_init+0x118>
#endif
	
	ble_init(&pf_cfg);

	/* Register it in first index of callback handler */
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, 
1000d896:	4a4c      	ldr	r2, [pc, #304]	; (1000d9c8 <ble_device_init+0x24c>)
1000d898:	2100      	movs	r1, #0
1000d89a:	2000      	movs	r0, #0
1000d89c:	4c4b      	ldr	r4, [pc, #300]	; (1000d9cc <ble_device_init+0x250>)
1000d89e:	47a0      	blx	r4
									BLE_GAP_EVENT_TYPE, 
									ble_mgr_gap_handle);
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
1000d8a0:	4a4b      	ldr	r2, [pc, #300]	; (1000d9d0 <ble_device_init+0x254>)
1000d8a2:	2102      	movs	r1, #2
1000d8a4:	2000      	movs	r0, #0
1000d8a6:	47a0      	blx	r4
{
	if ((name == NULL) || (name_len < 1))
	{
		return AT_BLE_INVALID_PARAM;
	}
	return at_ble_device_name_set(name, name_len);
1000d8a8:	2109      	movs	r1, #9
1000d8aa:	484a      	ldr	r0, [pc, #296]	; (1000d9d4 <ble_device_init+0x258>)
1000d8ac:	4b4a      	ldr	r3, [pc, #296]	; (1000d9d8 <ble_device_init+0x25c>)
1000d8ae:	4798      	blx	r3
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
									BLE_GATT_SERVER_EVENT_TYPE,
									ble_mgr_gatt_server_handle);
									
	dev_name = (char *)BLE_DEVICE_NAME;
	if (ble_set_device_name((uint8_t *)dev_name, strlen(dev_name)) != AT_BLE_SUCCESS)
1000d8b0:	2800      	cmp	r0, #0
1000d8b2:	d005      	beq.n	1000d8c0 <ble_device_init+0x144>
	{
		DBG_LOG("Device name set failed");
1000d8b4:	483f      	ldr	r0, [pc, #252]	; (1000d9b4 <ble_device_init+0x238>)
1000d8b6:	4b40      	ldr	r3, [pc, #256]	; (1000d9b8 <ble_device_init+0x23c>)
1000d8b8:	4798      	blx	r3
1000d8ba:	4848      	ldr	r0, [pc, #288]	; (1000d9dc <ble_device_init+0x260>)
1000d8bc:	4b40      	ldr	r3, [pc, #256]	; (1000d9c0 <ble_device_init+0x244>)
1000d8be:	4798      	blx	r3

/* Set BLE Address and device configuration, If address is NULL then it will use BD public address */
static void ble_set_dev_config(at_ble_addr_t *addr)
{
	at_ble_dev_config_t stDevConfig;
	at_ble_addr_t address = {AT_BLE_ADDRESS_PUBLIC, {0xAB, 0xCD, 0xEF, 0xAB, 0xCD, 0xEF}};
1000d8c0:	2207      	movs	r2, #7
1000d8c2:	4947      	ldr	r1, [pc, #284]	; (1000d9e0 <ble_device_init+0x264>)
1000d8c4:	3108      	adds	r1, #8
1000d8c6:	4668      	mov	r0, sp
1000d8c8:	4b46      	ldr	r3, [pc, #280]	; (1000d9e4 <ble_device_init+0x268>)
1000d8ca:	4798      	blx	r3
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
1000d8cc:	2226      	movs	r2, #38	; 0x26
1000d8ce:	2100      	movs	r1, #0
1000d8d0:	a802      	add	r0, sp, #8
1000d8d2:	4b23      	ldr	r3, [pc, #140]	; (1000d960 <ble_device_init+0x1e4>)
1000d8d4:	4798      	blx	r3
	
	if (addr == NULL)
1000d8d6:	2e00      	cmp	r6, #0
1000d8d8:	d10c      	bne.n	1000d8f4 <ble_device_init+0x178>
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000d8da:	4668      	mov	r0, sp
1000d8dc:	4b42      	ldr	r3, [pc, #264]	; (1000d9e8 <ble_device_init+0x26c>)
1000d8de:	4798      	blx	r3
		{
			DBG_LOG("[ble_set_dev_config]\t\tBD address get failed");
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000d8e0:	466e      	mov	r6, sp
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
	
	if (addr == NULL)
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000d8e2:	2800      	cmp	r0, #0
1000d8e4:	d006      	beq.n	1000d8f4 <ble_device_init+0x178>
		{
			DBG_LOG("[ble_set_dev_config]\t\tBD address get failed");
1000d8e6:	4833      	ldr	r0, [pc, #204]	; (1000d9b4 <ble_device_init+0x238>)
1000d8e8:	4b33      	ldr	r3, [pc, #204]	; (1000d9b8 <ble_device_init+0x23c>)
1000d8ea:	4798      	blx	r3
1000d8ec:	483f      	ldr	r0, [pc, #252]	; (1000d9ec <ble_device_init+0x270>)
1000d8ee:	4b34      	ldr	r3, [pc, #208]	; (1000d9c0 <ble_device_init+0x244>)
1000d8f0:	4798      	blx	r3
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000d8f2:	466e      	mov	r6, sp
	addr->addr[1],
	addr->addr[0], addr->type);
	
	/* Set device configuration */
	/* Device role */
	stDevConfig.role = (at_ble_dev_role_t)BLE_DEVICE_ROLE;
1000d8f4:	ac02      	add	r4, sp, #8
1000d8f6:	230a      	movs	r3, #10
1000d8f8:	7023      	strb	r3, [r4, #0]
	/* device renew duration */
	stDevConfig.renew_dur = AT_RENEW_DUR_VAL_MIN;
1000d8fa:	4b3d      	ldr	r3, [pc, #244]	; (1000d9f0 <ble_device_init+0x274>)
1000d8fc:	8063      	strh	r3, [r4, #2]
	/* device address type */
	memcpy((uint8_t *)&stDevConfig.address, (uint8_t *)addr, sizeof(at_ble_addr_t));
1000d8fe:	2207      	movs	r2, #7
1000d900:	0031      	movs	r1, r6
1000d902:	a803      	add	r0, sp, #12
1000d904:	4b37      	ldr	r3, [pc, #220]	; (1000d9e4 <ble_device_init+0x268>)
1000d906:	4798      	blx	r3
	/* Attributes */
	stDevConfig.att_cfg.b2NamePerm = AT_BLE_WRITE_DISABLE;
1000d908:	2300      	movs	r3, #0
1000d90a:	76e3      	strb	r3, [r4, #27]
	stDevConfig.att_cfg.b2AppearancePerm = AT_BLE_WRITE_DISABLE;
1000d90c:	7723      	strb	r3, [r4, #28]
	stDevConfig.att_cfg.b1EnableSpcs = 0;
1000d90e:	7763      	strb	r3, [r4, #29]
	stDevConfig.att_cfg.b1EnableServiceChanged = 0;
1000d910:	77a3      	strb	r3, [r4, #30]
	stDevConfig.att_cfg.b2Rfu = AT_BLE_WRITE_DISABLE;
1000d912:	77e3      	strb	r3, [r4, #31]
	/* Handles */
	stDevConfig.gap_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000d914:	8423      	strh	r3, [r4, #32]
	stDevConfig.gatt_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000d916:	8463      	strh	r3, [r4, #34]	; 0x22
	/* MTU */
	stDevConfig.max_mtu = AT_MTU_VAL_RECOMMENDED;
1000d918:	2380      	movs	r3, #128	; 0x80
1000d91a:	009b      	lsls	r3, r3, #2
1000d91c:	84a3      	strh	r3, [r4, #36]	; 0x24
	
	if(at_ble_set_dev_config(&stDevConfig) != AT_BLE_SUCCESS)
1000d91e:	0020      	movs	r0, r4
1000d920:	4b34      	ldr	r3, [pc, #208]	; (1000d9f4 <ble_device_init+0x278>)
1000d922:	4798      	blx	r3
1000d924:	2800      	cmp	r0, #0
1000d926:	d005      	beq.n	1000d934 <ble_device_init+0x1b8>
	{
		DBG_LOG("[ble_set_dev_config]\tSet BLE Device configuration failed");
1000d928:	4822      	ldr	r0, [pc, #136]	; (1000d9b4 <ble_device_init+0x238>)
1000d92a:	4b23      	ldr	r3, [pc, #140]	; (1000d9b8 <ble_device_init+0x23c>)
1000d92c:	4798      	blx	r3
1000d92e:	4832      	ldr	r0, [pc, #200]	; (1000d9f8 <ble_device_init+0x27c>)
1000d930:	4b23      	ldr	r3, [pc, #140]	; (1000d9c0 <ble_device_init+0x244>)
1000d932:	4798      	blx	r3
	}
	
	if (at_ble_addr_set(addr) != AT_BLE_SUCCESS)
1000d934:	0030      	movs	r0, r6
1000d936:	4b31      	ldr	r3, [pc, #196]	; (1000d9fc <ble_device_init+0x280>)
1000d938:	4798      	blx	r3
1000d93a:	2800      	cmp	r0, #0
1000d93c:	d005      	beq.n	1000d94a <ble_device_init+0x1ce>
	{
		DBG_LOG("[ble_set_dev_config]\tSet BLE Device Address failed");
1000d93e:	481d      	ldr	r0, [pc, #116]	; (1000d9b4 <ble_device_init+0x238>)
1000d940:	4b1d      	ldr	r3, [pc, #116]	; (1000d9b8 <ble_device_init+0x23c>)
1000d942:	4798      	blx	r3
1000d944:	482e      	ldr	r0, [pc, #184]	; (1000da00 <ble_device_init+0x284>)
1000d946:	4b1e      	ldr	r3, [pc, #120]	; (1000d9c0 <ble_device_init+0x244>)
1000d948:	4798      	blx	r3
	{
		DBG_LOG("Device name set failed");
	}
	
	ble_set_dev_config(addr);	
}
1000d94a:	b00d      	add	sp, #52	; 0x34
1000d94c:	bc3c      	pop	{r2, r3, r4, r5}
1000d94e:	4690      	mov	r8, r2
1000d950:	4699      	mov	r9, r3
1000d952:	46a2      	mov	sl, r4
1000d954:	46ab      	mov	fp, r5
1000d956:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d958:	10019250 	.word	0x10019250
1000d95c:	10019258 	.word	0x10019258
1000d960:	100165d9 	.word	0x100165d9
1000d964:	1001a9f0 	.word	0x1001a9f0
1000d968:	000004e2 	.word	0x000004e2
1000d96c:	10018d70 	.word	0x10018d70
1000d970:	10019254 	.word	0x10019254
1000d974:	1001aa28 	.word	0x1001aa28
1000d978:	1001aa20 	.word	0x1001aa20
1000d97c:	1001ad5c 	.word	0x1001ad5c
1000d980:	10018970 	.word	0x10018970
1000d984:	10019260 	.word	0x10019260
1000d988:	1001aa04 	.word	0x1001aa04
1000d98c:	1001a9c8 	.word	0x1001a9c8
1000d990:	1001a9dc 	.word	0x1001a9dc
1000d994:	1001a730 	.word	0x1001a730
1000d998:	1001aa24 	.word	0x1001aa24
1000d99c:	1001a72c 	.word	0x1001a72c
1000d9a0:	1001a9b4 	.word	0x1001a9b4
1000d9a4:	1001af68 	.word	0x1001af68
1000d9a8:	1001a744 	.word	0x1001a744
1000d9ac:	1001a9b0 	.word	0x1001a9b0
1000d9b0:	1000f755 	.word	0x1000f755
1000d9b4:	10017780 	.word	0x10017780
1000d9b8:	10016841 	.word	0x10016841
1000d9bc:	10018304 	.word	0x10018304
1000d9c0:	10016721 	.word	0x10016721
1000d9c4:	10018330 	.word	0x10018330
1000d9c8:	10018584 	.word	0x10018584
1000d9cc:	1000d6ad 	.word	0x1000d6ad
1000d9d0:	10017f20 	.word	0x10017f20
1000d9d4:	10018378 	.word	0x10018378
1000d9d8:	1000f66d 	.word	0x1000f66d
1000d9dc:	10018384 	.word	0x10018384
1000d9e0:	10017f10 	.word	0x10017f10
1000d9e4:	100165c7 	.word	0x100165c7
1000d9e8:	1000f6a1 	.word	0x1000f6a1
1000d9ec:	1001839c 	.word	0x1001839c
1000d9f0:	00003a98 	.word	0x00003a98
1000d9f4:	1000f6c5 	.word	0x1000f6c5
1000d9f8:	100183c8 	.word	0x100183c8
1000d9fc:	1000f909 	.word	0x1000f909
1000da00:	10018404 	.word	0x10018404

1000da04 <ble_send_slave_sec_request>:
	return AT_BLE_FAILURE;
}

/** @brief function to send slave security request */
at_ble_status_t ble_send_slave_sec_request(at_ble_handle_t conn_handle)
{
1000da04:	b510      	push	{r4, lr}
	#if BLE_PAIR_ENABLE
		if (at_ble_send_slave_sec_request(conn_handle, BLE_MITM_REQ, BLE_BOND_REQ) == AT_BLE_SUCCESS)
1000da06:	2200      	movs	r2, #0
1000da08:	2100      	movs	r1, #0
1000da0a:	4b06      	ldr	r3, [pc, #24]	; (1000da24 <ble_send_slave_sec_request+0x20>)
1000da0c:	4798      	blx	r3
1000da0e:	2800      	cmp	r0, #0
1000da10:	d006      	beq.n	1000da20 <ble_send_slave_sec_request+0x1c>
			DBG_LOG_DEV("Slave security request successful");
			return AT_BLE_SUCCESS;
		}
		else
		{
			DBG_LOG("Slave security request failed");
1000da12:	4805      	ldr	r0, [pc, #20]	; (1000da28 <ble_send_slave_sec_request+0x24>)
1000da14:	4b05      	ldr	r3, [pc, #20]	; (1000da2c <ble_send_slave_sec_request+0x28>)
1000da16:	4798      	blx	r3
1000da18:	4805      	ldr	r0, [pc, #20]	; (1000da30 <ble_send_slave_sec_request+0x2c>)
1000da1a:	4b06      	ldr	r3, [pc, #24]	; (1000da34 <ble_send_slave_sec_request+0x30>)
1000da1c:	4798      	blx	r3
		}
	#endif
	return AT_BLE_FAILURE;
1000da1e:	20e2      	movs	r0, #226	; 0xe2
}
1000da20:	bd10      	pop	{r4, pc}
1000da22:	46c0      	nop			; (mov r8, r8)
1000da24:	100106ed 	.word	0x100106ed
1000da28:	10017780 	.word	0x10017780
1000da2c:	10016841 	.word	0x10016841
1000da30:	10018454 	.word	0x10018454
1000da34:	10016721 	.word	0x10016721

1000da38 <ble_connected_state_handler>:
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000da38:	b5f0      	push	{r4, r5, r6, r7, lr}
1000da3a:	465f      	mov	r7, fp
1000da3c:	464e      	mov	r6, r9
1000da3e:	4645      	mov	r5, r8
1000da40:	b4e0      	push	{r5, r6, r7}
1000da42:	b09a      	sub	sp, #104	; 0x68
1000da44:	0005      	movs	r5, r0
	at_ble_connected_t *conn_params;
	uint8_t idx = 0;
	conn_params = (at_ble_connected_t *)params;
	bool peripheral_device_added = false;
	
	if (conn_params->conn_status == AT_BLE_SUCCESS)
1000da46:	7a86      	ldrb	r6, [r0, #10]
1000da48:	2e00      	cmp	r6, #0
1000da4a:	d000      	beq.n	1000da4e <ble_connected_state_handler+0x16>
1000da4c:	e0c6      	b.n	1000dbdc <ble_connected_state_handler+0x1a4>
	{
		DBG_LOG("Connected to peer device with address 0x%02x%02x%02x%02x%02x%02x",
1000da4e:	4875      	ldr	r0, [pc, #468]	; (1000dc24 <ble_connected_state_handler+0x1ec>)
1000da50:	4f75      	ldr	r7, [pc, #468]	; (1000dc28 <ble_connected_state_handler+0x1f0>)
1000da52:	47b8      	blx	r7
1000da54:	792b      	ldrb	r3, [r5, #4]
1000da56:	796a      	ldrb	r2, [r5, #5]
1000da58:	79a9      	ldrb	r1, [r5, #6]
1000da5a:	7868      	ldrb	r0, [r5, #1]
1000da5c:	9002      	str	r0, [sp, #8]
1000da5e:	78a8      	ldrb	r0, [r5, #2]
1000da60:	9001      	str	r0, [sp, #4]
1000da62:	78e8      	ldrb	r0, [r5, #3]
1000da64:	9000      	str	r0, [sp, #0]
1000da66:	4871      	ldr	r0, [pc, #452]	; (1000dc2c <ble_connected_state_handler+0x1f4>)
1000da68:	4c71      	ldr	r4, [pc, #452]	; (1000dc30 <ble_connected_state_handler+0x1f8>)
1000da6a:	47a0      	blx	r4
		conn_params->peer_addr.addr[3],
		conn_params->peer_addr.addr[2],
		conn_params->peer_addr.addr[1],
		conn_params->peer_addr.addr[0]);
		
		DBG_LOG("Connection Handle %d", conn_params->handle);
1000da6c:	486d      	ldr	r0, [pc, #436]	; (1000dc24 <ble_connected_state_handler+0x1ec>)
1000da6e:	47b8      	blx	r7
1000da70:	8929      	ldrh	r1, [r5, #8]
1000da72:	4870      	ldr	r0, [pc, #448]	; (1000dc34 <ble_connected_state_handler+0x1fc>)
1000da74:	47a0      	blx	r4
		
		memcpy((uint8_t *)&connected_state_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));	
1000da76:	2212      	movs	r2, #18
1000da78:	0029      	movs	r1, r5
1000da7a:	486f      	ldr	r0, [pc, #444]	; (1000dc38 <ble_connected_state_handler+0x200>)
1000da7c:	4b6f      	ldr	r3, [pc, #444]	; (1000dc3c <ble_connected_state_handler+0x204>)
1000da7e:	4798      	blx	r3
		if(memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000da80:	9504      	str	r5, [sp, #16]
1000da82:	2207      	movs	r2, #7
1000da84:	0029      	movs	r1, r5
1000da86:	486e      	ldr	r0, [pc, #440]	; (1000dc40 <ble_connected_state_handler+0x208>)
1000da88:	4b6e      	ldr	r3, [pc, #440]	; (1000dc44 <ble_connected_state_handler+0x20c>)
1000da8a:	4798      	blx	r3
1000da8c:	2800      	cmp	r0, #0
1000da8e:	d100      	bne.n	1000da92 <ble_connected_state_handler+0x5a>
1000da90:	e0ad      	b.n	1000dbee <ble_connected_state_handler+0x1b6>
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
1000da92:	782b      	ldrb	r3, [r5, #0]
1000da94:	2b02      	cmp	r3, #2
1000da96:	d000      	beq.n	1000da9a <ble_connected_state_handler+0x62>
1000da98:	e0a9      	b.n	1000dbee <ble_connected_state_handler+0x1b6>
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
1000da9a:	2250      	movs	r2, #80	; 0x50
1000da9c:	2100      	movs	r1, #0
1000da9e:	a806      	add	r0, sp, #24
1000daa0:	4b69      	ldr	r3, [pc, #420]	; (1000dc48 <ble_connected_state_handler+0x210>)
1000daa2:	4798      	blx	r3
1000daa4:	4f69      	ldr	r7, [pc, #420]	; (1000dc4c <ble_connected_state_handler+0x214>)
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
1000daa6:	2300      	movs	r3, #0
1000daa8:	e00b      	b.n	1000dac2 <ble_connected_state_handler+0x8a>
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000daaa:	1c59      	adds	r1, r3, #1
1000daac:	7814      	ldrb	r4, [r2, #0]
1000daae:	a806      	add	r0, sp, #24
1000dab0:	54c4      	strb	r4, [r0, r3]
1000dab2:	3201      	adds	r2, #1
1000dab4:	b28b      	uxth	r3, r1
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
1000dab6:	42b3      	cmp	r3, r6
1000dab8:	d1f7      	bne.n	1000daaa <ble_connected_state_handler+0x72>
1000daba:	377c      	adds	r7, #124	; 0x7c
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000dabc:	1e33      	subs	r3, r6, #0
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
1000dabe:	2b50      	cmp	r3, #80	; 0x50
1000dac0:	d004      	beq.n	1000dacc <ble_connected_state_handler+0x94>
1000dac2:	001e      	movs	r6, r3
1000dac4:	3610      	adds	r6, #16
1000dac6:	b2b6      	uxth	r6, r6
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000dac8:	003a      	movs	r2, r7
1000daca:	e7ee      	b.n	1000daaa <ble_connected_state_handler+0x72>
					}
					
				}
				if (nb_keys)
				{
					if(at_ble_random_address_resolve(BLE_MAX_DEVICE_CONNECTED, &conn_params->peer_addr, irk_key) == AT_BLE_SUCCESS)
1000dacc:	aa06      	add	r2, sp, #24
1000dace:	0029      	movs	r1, r5
1000dad0:	2005      	movs	r0, #5
1000dad2:	4b5f      	ldr	r3, [pc, #380]	; (1000dc50 <ble_connected_state_handler+0x218>)
1000dad4:	4798      	blx	r3
1000dad6:	1e06      	subs	r6, r0, #0
1000dad8:	d100      	bne.n	1000dadc <ble_connected_state_handler+0xa4>
1000dada:	e09c      	b.n	1000dc16 <ble_connected_state_handler+0x1de>
						DBG_LOG_DEV("Resolving Random address success**");
						return AT_BLE_SUCCESS;
					}
					else
					{
						DBG_LOG("Resolving Random address failed**");
1000dadc:	4851      	ldr	r0, [pc, #324]	; (1000dc24 <ble_connected_state_handler+0x1ec>)
1000dade:	4b52      	ldr	r3, [pc, #328]	; (1000dc28 <ble_connected_state_handler+0x1f0>)
1000dae0:	4798      	blx	r3
1000dae2:	485c      	ldr	r0, [pc, #368]	; (1000dc54 <ble_connected_state_handler+0x21c>)
1000dae4:	4b52      	ldr	r3, [pc, #328]	; (1000dc30 <ble_connected_state_handler+0x1f8>)
1000dae6:	4798      	blx	r3
						return AT_BLE_FAILURE;
1000dae8:	26e2      	movs	r6, #226	; 0xe2
1000daea:	e094      	b.n	1000dc16 <ble_connected_state_handler+0x1de>
1000daec:	b2e7      	uxtb	r7, r4
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000daee:	9405      	str	r4, [sp, #20]
1000daf0:	2207      	movs	r2, #7
1000daf2:	9904      	ldr	r1, [sp, #16]
1000daf4:	4648      	mov	r0, r9
1000daf6:	47d8      	blx	fp
1000daf8:	2800      	cmp	r0, #0
1000dafa:	d109      	bne.n	1000db10 <ble_connected_state_handler+0xd8>
				{
					ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000dafc:	9a05      	ldr	r2, [sp, #20]
1000dafe:	0153      	lsls	r3, r2, #5
1000db00:	1a9b      	subs	r3, r3, r2
1000db02:	009a      	lsls	r2, r3, #2
1000db04:	4b54      	ldr	r3, [pc, #336]	; (1000dc58 <ble_connected_state_handler+0x220>)
1000db06:	189b      	adds	r3, r3, r2
1000db08:	335e      	adds	r3, #94	; 0x5e
1000db0a:	2202      	movs	r2, #2
1000db0c:	701a      	strb	r2, [r3, #0]
1000db0e:	e02b      	b.n	1000db68 <ble_connected_state_handler+0x130>
1000db10:	3401      	adds	r4, #1
1000db12:	237c      	movs	r3, #124	; 0x7c
1000db14:	469c      	mov	ip, r3
1000db16:	44e1      	add	r9, ip
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000db18:	2c05      	cmp	r4, #5
1000db1a:	d1e7      	bne.n	1000daec <ble_connected_state_handler+0xb4>
1000db1c:	e072      	b.n	1000dc04 <ble_connected_state_handler+0x1cc>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000db1e:	001c      	movs	r4, r3
1000db20:	7811      	ldrb	r1, [r2, #0]
1000db22:	2900      	cmp	r1, #0
1000db24:	d11a      	bne.n	1000db5c <ble_connected_state_handler+0x124>
1000db26:	e001      	b.n	1000db2c <ble_connected_state_handler+0xf4>
1000db28:	2400      	movs	r4, #0
1000db2a:	2700      	movs	r7, #0
					{
						/* @Todo Need to Handle Random Address */
						memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));
1000db2c:	0163      	lsls	r3, r4, #5
1000db2e:	4699      	mov	r9, r3
1000db30:	1b18      	subs	r0, r3, r4
1000db32:	0080      	lsls	r0, r0, #2
1000db34:	4b48      	ldr	r3, [pc, #288]	; (1000dc58 <ble_connected_state_handler+0x220>)
1000db36:	4698      	mov	r8, r3
1000db38:	4440      	add	r0, r8
1000db3a:	2212      	movs	r2, #18
1000db3c:	0029      	movs	r1, r5
1000db3e:	4b3f      	ldr	r3, [pc, #252]	; (1000dc3c <ble_connected_state_handler+0x204>)
1000db40:	4798      	blx	r3
						ble_device_count++;
1000db42:	4a46      	ldr	r2, [pc, #280]	; (1000dc5c <ble_connected_state_handler+0x224>)
1000db44:	7813      	ldrb	r3, [r2, #0]
1000db46:	3301      	adds	r3, #1
1000db48:	b2db      	uxtb	r3, r3
1000db4a:	7013      	strb	r3, [r2, #0]
						ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000db4c:	464b      	mov	r3, r9
1000db4e:	1b1b      	subs	r3, r3, r4
1000db50:	009b      	lsls	r3, r3, #2
1000db52:	4443      	add	r3, r8
1000db54:	335e      	adds	r3, #94	; 0x5e
1000db56:	2202      	movs	r2, #2
1000db58:	701a      	strb	r2, [r3, #0]
						break;
1000db5a:	e005      	b.n	1000db68 <ble_connected_state_handler+0x130>
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000db5c:	1c79      	adds	r1, r7, #1
1000db5e:	b2cf      	uxtb	r7, r1
1000db60:	3301      	adds	r3, #1
1000db62:	327c      	adds	r2, #124	; 0x7c
1000db64:	2f05      	cmp	r7, #5
1000db66:	d1da      	bne.n	1000db1e <ble_connected_state_handler+0xe6>
						break;
					}
				}
			}
			
			if(!memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000db68:	2207      	movs	r2, #7
1000db6a:	0029      	movs	r1, r5
1000db6c:	4834      	ldr	r0, [pc, #208]	; (1000dc40 <ble_connected_state_handler+0x208>)
1000db6e:	4b35      	ldr	r3, [pc, #212]	; (1000dc44 <ble_connected_state_handler+0x20c>)
1000db70:	4798      	blx	r3
1000db72:	2800      	cmp	r0, #0
1000db74:	d10c      	bne.n	1000db90 <ble_connected_state_handler+0x158>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
1000db76:	017b      	lsls	r3, r7, #5
1000db78:	1bdb      	subs	r3, r3, r7
1000db7a:	009b      	lsls	r3, r3, #2
1000db7c:	4a36      	ldr	r2, [pc, #216]	; (1000dc58 <ble_connected_state_handler+0x220>)
1000db7e:	18d3      	adds	r3, r2, r3
1000db80:	2205      	movs	r2, #5
1000db82:	749a      	strb	r2, [r3, #18]
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000db84:	3202      	adds	r2, #2
1000db86:	2100      	movs	r1, #0
1000db88:	482d      	ldr	r0, [pc, #180]	; (1000dc40 <ble_connected_state_handler+0x208>)
1000db8a:	4b2f      	ldr	r3, [pc, #188]	; (1000dc48 <ble_connected_state_handler+0x210>)
1000db8c:	4798      	blx	r3
1000db8e:	e042      	b.n	1000dc16 <ble_connected_state_handler+0x1de>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
			}
			else
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000db90:	4b31      	ldr	r3, [pc, #196]	; (1000dc58 <ble_connected_state_handler+0x220>)
1000db92:	4698      	mov	r8, r3
1000db94:	017c      	lsls	r4, r7, #5
1000db96:	1be3      	subs	r3, r4, r7
1000db98:	009b      	lsls	r3, r3, #2
1000db9a:	4443      	add	r3, r8
1000db9c:	220a      	movs	r2, #10
1000db9e:	749a      	strb	r2, [r3, #18]
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000dba0:	3a03      	subs	r2, #3
1000dba2:	2100      	movs	r1, #0
1000dba4:	4826      	ldr	r0, [pc, #152]	; (1000dc40 <ble_connected_state_handler+0x208>)
1000dba6:	4b28      	ldr	r3, [pc, #160]	; (1000dc48 <ble_connected_state_handler+0x210>)
1000dba8:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
		}		
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000dbaa:	1be4      	subs	r4, r4, r7
1000dbac:	00a4      	lsls	r4, r4, #2
1000dbae:	4444      	add	r4, r8
1000dbb0:	7ca3      	ldrb	r3, [r4, #18]
1000dbb2:	2b0a      	cmp	r3, #10
1000dbb4:	d12f      	bne.n	1000dc16 <ble_connected_state_handler+0x1de>
1000dbb6:	e00d      	b.n	1000dbd4 <ble_connected_state_handler+0x19c>
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
					
		}
		else
		{
			DBG_LOG("Max number of connection reached: %d ===>Disconnecting...", ble_device_count);
1000dbb8:	481a      	ldr	r0, [pc, #104]	; (1000dc24 <ble_connected_state_handler+0x1ec>)
1000dbba:	4b1b      	ldr	r3, [pc, #108]	; (1000dc28 <ble_connected_state_handler+0x1f0>)
1000dbbc:	4798      	blx	r3
1000dbbe:	4b27      	ldr	r3, [pc, #156]	; (1000dc5c <ble_connected_state_handler+0x224>)
1000dbc0:	7819      	ldrb	r1, [r3, #0]
1000dbc2:	b2c9      	uxtb	r1, r1
1000dbc4:	4826      	ldr	r0, [pc, #152]	; (1000dc60 <ble_connected_state_handler+0x228>)
1000dbc6:	4b1a      	ldr	r3, [pc, #104]	; (1000dc30 <ble_connected_state_handler+0x1f8>)
1000dbc8:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
1000dbca:	8928      	ldrh	r0, [r5, #8]
1000dbcc:	2113      	movs	r1, #19
1000dbce:	4b25      	ldr	r3, [pc, #148]	; (1000dc64 <ble_connected_state_handler+0x22c>)
1000dbd0:	4798      	blx	r3
1000dbd2:	e020      	b.n	1000dc16 <ble_connected_state_handler+0x1de>
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
        {
	 		ble_send_slave_sec_request(conn_params->handle);
1000dbd4:	8928      	ldrh	r0, [r5, #8]
1000dbd6:	4b24      	ldr	r3, [pc, #144]	; (1000dc68 <ble_connected_state_handler+0x230>)
1000dbd8:	4798      	blx	r3
1000dbda:	e01c      	b.n	1000dc16 <ble_connected_state_handler+0x1de>
        }
#endif
	} 
	else
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
1000dbdc:	4811      	ldr	r0, [pc, #68]	; (1000dc24 <ble_connected_state_handler+0x1ec>)
1000dbde:	4b12      	ldr	r3, [pc, #72]	; (1000dc28 <ble_connected_state_handler+0x1f0>)
1000dbe0:	4798      	blx	r3
1000dbe2:	7aa9      	ldrb	r1, [r5, #10]
1000dbe4:	4821      	ldr	r0, [pc, #132]	; (1000dc6c <ble_connected_state_handler+0x234>)
1000dbe6:	4b12      	ldr	r3, [pc, #72]	; (1000dc30 <ble_connected_state_handler+0x1f8>)
1000dbe8:	4798      	blx	r3
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
1000dbea:	2600      	movs	r6, #0
1000dbec:	e013      	b.n	1000dc16 <ble_connected_state_handler+0x1de>
					DBG_LOG_DEV("New Connection");
				}				
			}
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
1000dbee:	4b1b      	ldr	r3, [pc, #108]	; (1000dc5c <ble_connected_state_handler+0x224>)
1000dbf0:	781b      	ldrb	r3, [r3, #0]
1000dbf2:	b2db      	uxtb	r3, r3
1000dbf4:	2b04      	cmp	r3, #4
1000dbf6:	d8df      	bhi.n	1000dbb8 <ble_connected_state_handler+0x180>
1000dbf8:	4b17      	ldr	r3, [pc, #92]	; (1000dc58 <ble_connected_state_handler+0x220>)
1000dbfa:	4699      	mov	r9, r3
1000dbfc:	2400      	movs	r4, #0
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000dbfe:	4b11      	ldr	r3, [pc, #68]	; (1000dc44 <ble_connected_state_handler+0x20c>)
1000dc00:	469b      	mov	fp, r3
1000dc02:	e773      	b.n	1000daec <ble_connected_state_handler+0xb4>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000dc04:	235e      	movs	r3, #94	; 0x5e
1000dc06:	4a14      	ldr	r2, [pc, #80]	; (1000dc58 <ble_connected_state_handler+0x220>)
1000dc08:	5cd3      	ldrb	r3, [r2, r3]
1000dc0a:	2b00      	cmp	r3, #0
1000dc0c:	d08c      	beq.n	1000db28 <ble_connected_state_handler+0xf0>
1000dc0e:	4a18      	ldr	r2, [pc, #96]	; (1000dc70 <ble_connected_state_handler+0x238>)
1000dc10:	2301      	movs	r3, #1
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000dc12:	2701      	movs	r7, #1
1000dc14:	e783      	b.n	1000db1e <ble_connected_state_handler+0xe6>
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
}
1000dc16:	0030      	movs	r0, r6
1000dc18:	b01a      	add	sp, #104	; 0x68
1000dc1a:	bc1c      	pop	{r2, r3, r4}
1000dc1c:	4690      	mov	r8, r2
1000dc1e:	4699      	mov	r9, r3
1000dc20:	46a3      	mov	fp, r4
1000dc22:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000dc24:	10017780 	.word	0x10017780
1000dc28:	10016841 	.word	0x10016841
1000dc2c:	10018474 	.word	0x10018474
1000dc30:	10016721 	.word	0x10016721
1000dc34:	100184b8 	.word	0x100184b8
1000dc38:	1001a9f0 	.word	0x1001a9f0
1000dc3c:	100165c7 	.word	0x100165c7
1000dc40:	10019258 	.word	0x10019258
1000dc44:	100165a9 	.word	0x100165a9
1000dc48:	100165d9 	.word	0x100165d9
1000dc4c:	1001a78a 	.word	0x1001a78a
1000dc50:	1000fb75 	.word	0x1000fb75
1000dc54:	100184d0 	.word	0x100184d0
1000dc58:	1001a744 	.word	0x1001a744
1000dc5c:	1001a9b0 	.word	0x1001a9b0
1000dc60:	100184f4 	.word	0x100184f4
1000dc64:	1000fb49 	.word	0x1000fb49
1000dc68:	1000da05 	.word	0x1000da05
1000dc6c:	10018530 	.word	0x10018530
1000dc70:	1001a81e 	.word	0x1001a81e

1000dc74 <ble_resolv_rand_addr_handler>:

at_ble_status_t ble_resolv_rand_addr_handler(void *params)
{
1000dc74:	b5f0      	push	{r4, r5, r6, r7, lr}
1000dc76:	4647      	mov	r7, r8
1000dc78:	b480      	push	{r7}
	uint8_t idx;	
	bool device_found = false;
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
1000dc7a:	7803      	ldrb	r3, [r0, #0]
1000dc7c:	2b00      	cmp	r3, #0
1000dc7e:	d141      	bne.n	1000dd04 <ble_resolv_rand_addr_handler+0x90>
1000dc80:	4d2f      	ldr	r5, [pc, #188]	; (1000dd40 <ble_resolv_rand_addr_handler+0xcc>)
1000dc82:	2400      	movs	r4, #0
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			/* Check the Resolved Address */
			if (!memcmp((uint8_t *)ble_resolv_rand_addr_status->irk, (uint8_t *)ble_dev_info[idx].bond_info.peer_irk.key, AT_BLE_MAX_KEY_LEN))
1000dc84:	1c46      	adds	r6, r0, #1
1000dc86:	4f2f      	ldr	r7, [pc, #188]	; (1000dd44 <ble_resolv_rand_addr_handler+0xd0>)
1000dc88:	2210      	movs	r2, #16
1000dc8a:	0029      	movs	r1, r5
1000dc8c:	0030      	movs	r0, r6
1000dc8e:	47b8      	blx	r7
1000dc90:	2800      	cmp	r0, #0
1000dc92:	d03f      	beq.n	1000dd14 <ble_resolv_rand_addr_handler+0xa0>
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000dc94:	3401      	adds	r4, #1
1000dc96:	b2e4      	uxtb	r4, r4
1000dc98:	357c      	adds	r5, #124	; 0x7c
1000dc9a:	2c05      	cmp	r4, #5
1000dc9c:	d1f4      	bne.n	1000dc88 <ble_resolv_rand_addr_handler+0x14>
1000dc9e:	e031      	b.n	1000dd04 <ble_resolv_rand_addr_handler+0x90>
1000dca0:	b2dd      	uxtb	r5, r3
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000dca2:	001c      	movs	r4, r3
1000dca4:	7811      	ldrb	r1, [r2, #0]
1000dca6:	2900      	cmp	r1, #0
1000dca8:	d122      	bne.n	1000dcf0 <ble_resolv_rand_addr_handler+0x7c>
1000dcaa:	e001      	b.n	1000dcb0 <ble_resolv_rand_addr_handler+0x3c>
1000dcac:	2400      	movs	r4, #0
1000dcae:	2500      	movs	r5, #0
			{
				memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000dcb0:	4b25      	ldr	r3, [pc, #148]	; (1000dd48 <ble_resolv_rand_addr_handler+0xd4>)
1000dcb2:	4698      	mov	r8, r3
1000dcb4:	0166      	lsls	r6, r4, #5
1000dcb6:	1b37      	subs	r7, r6, r4
1000dcb8:	00bf      	lsls	r7, r7, #2
1000dcba:	4447      	add	r7, r8
1000dcbc:	2212      	movs	r2, #18
1000dcbe:	4923      	ldr	r1, [pc, #140]	; (1000dd4c <ble_resolv_rand_addr_handler+0xd8>)
1000dcc0:	0038      	movs	r0, r7
1000dcc2:	4b23      	ldr	r3, [pc, #140]	; (1000dd50 <ble_resolv_rand_addr_handler+0xdc>)
1000dcc4:	4798      	blx	r3
				ble_device_count++;
1000dcc6:	4a23      	ldr	r2, [pc, #140]	; (1000dd54 <ble_resolv_rand_addr_handler+0xe0>)
1000dcc8:	7813      	ldrb	r3, [r2, #0]
1000dcca:	3301      	adds	r3, #1
1000dccc:	b2db      	uxtb	r3, r3
1000dcce:	7013      	strb	r3, [r2, #0]
				ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000dcd0:	375e      	adds	r7, #94	; 0x5e
1000dcd2:	2302      	movs	r3, #2
1000dcd4:	703b      	strb	r3, [r7, #0]
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000dcd6:	1b34      	subs	r4, r6, r4
1000dcd8:	00a4      	lsls	r4, r4, #2
1000dcda:	4444      	add	r4, r8
1000dcdc:	3308      	adds	r3, #8
1000dcde:	74a3      	strb	r3, [r4, #18]
			}
		}
	}
	DBG_LOG_DEV("Device idx:%d",idx);
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000dce0:	016b      	lsls	r3, r5, #5
1000dce2:	1b5d      	subs	r5, r3, r5
1000dce4:	00ad      	lsls	r5, r5, #2
1000dce6:	4445      	add	r5, r8
1000dce8:	7cab      	ldrb	r3, [r5, #18]
1000dcea:	2b0a      	cmp	r3, #10
1000dcec:	d123      	bne.n	1000dd36 <ble_resolv_rand_addr_handler+0xc2>
1000dcee:	e004      	b.n	1000dcfa <ble_resolv_rand_addr_handler+0x86>
1000dcf0:	3301      	adds	r3, #1
1000dcf2:	327c      	adds	r2, #124	; 0x7c
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000dcf4:	2b05      	cmp	r3, #5
1000dcf6:	d1d3      	bne.n	1000dca0 <ble_resolv_rand_addr_handler+0x2c>
1000dcf8:	e01d      	b.n	1000dd36 <ble_resolv_rand_addr_handler+0xc2>
	}
	DBG_LOG_DEV("Device idx:%d",idx);
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
	{
		ble_send_slave_sec_request(connected_state_info.handle);
1000dcfa:	4b14      	ldr	r3, [pc, #80]	; (1000dd4c <ble_resolv_rand_addr_handler+0xd8>)
1000dcfc:	8918      	ldrh	r0, [r3, #8]
1000dcfe:	4b16      	ldr	r3, [pc, #88]	; (1000dd58 <ble_resolv_rand_addr_handler+0xe4>)
1000dd00:	4798      	blx	r3
	}
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
1000dd02:	e018      	b.n	1000dd36 <ble_resolv_rand_addr_handler+0xc2>
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000dd04:	235e      	movs	r3, #94	; 0x5e
1000dd06:	4a10      	ldr	r2, [pc, #64]	; (1000dd48 <ble_resolv_rand_addr_handler+0xd4>)
1000dd08:	5cd3      	ldrb	r3, [r2, r3]
1000dd0a:	2b00      	cmp	r3, #0
1000dd0c:	d0ce      	beq.n	1000dcac <ble_resolv_rand_addr_handler+0x38>
1000dd0e:	4a13      	ldr	r2, [pc, #76]	; (1000dd5c <ble_resolv_rand_addr_handler+0xe8>)
1000dd10:	2301      	movs	r3, #1
1000dd12:	e7c5      	b.n	1000dca0 <ble_resolv_rand_addr_handler+0x2c>
	}
	
	if (device_found)
	{
		DBG_LOG_DEV("##########Device Found");
		ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000dd14:	480c      	ldr	r0, [pc, #48]	; (1000dd48 <ble_resolv_rand_addr_handler+0xd4>)
1000dd16:	0163      	lsls	r3, r4, #5
1000dd18:	1b1a      	subs	r2, r3, r4
1000dd1a:	0092      	lsls	r2, r2, #2
1000dd1c:	1882      	adds	r2, r0, r2
1000dd1e:	0011      	movs	r1, r2
1000dd20:	315e      	adds	r1, #94	; 0x5e
1000dd22:	2502      	movs	r5, #2
1000dd24:	700d      	strb	r5, [r1, #0]
		ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000dd26:	210a      	movs	r1, #10
1000dd28:	7491      	strb	r1, [r2, #18]
		memcpy((uint8_t *)&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000dd2a:	0010      	movs	r0, r2
1000dd2c:	2212      	movs	r2, #18
1000dd2e:	4907      	ldr	r1, [pc, #28]	; (1000dd4c <ble_resolv_rand_addr_handler+0xd8>)
1000dd30:	4b07      	ldr	r3, [pc, #28]	; (1000dd50 <ble_resolv_rand_addr_handler+0xdc>)
1000dd32:	4798      	blx	r3
1000dd34:	e7e1      	b.n	1000dcfa <ble_resolv_rand_addr_handler+0x86>
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
	
}
1000dd36:	2000      	movs	r0, #0
1000dd38:	bc04      	pop	{r2}
1000dd3a:	4690      	mov	r8, r2
1000dd3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000dd3e:	46c0      	nop			; (mov r8, r8)
1000dd40:	1001a78a 	.word	0x1001a78a
1000dd44:	100165a9 	.word	0x100165a9
1000dd48:	1001a744 	.word	0x1001a744
1000dd4c:	1001a9f0 	.word	0x1001a9f0
1000dd50:	100165c7 	.word	0x100165c7
1000dd54:	1001a9b0 	.word	0x1001a9b0
1000dd58:	1000da05 	.word	0x1000da05
1000dd5c:	1001a81e 	.word	0x1001a81e

1000dd60 <ble_event_manager>:
	}
	return AT_BLE_SUCCESS;
}

void ble_event_manager(at_ble_events_t events, void *event_params)
{
1000dd60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000dd62:	000d      	movs	r5, r1
	DBG_LOG_DEV("\r\nBLE-Event:%d", events);
	switch(events)
1000dd64:	283b      	cmp	r0, #59	; 0x3b
1000dd66:	d872      	bhi.n	1000de4e <ble_event_manager+0xee>
1000dd68:	0083      	lsls	r3, r0, #2
1000dd6a:	4a3c      	ldr	r2, [pc, #240]	; (1000de5c <ble_event_manager+0xfc>)
1000dd6c:	58d3      	ldr	r3, [r2, r3]
1000dd6e:	469f      	mov	pc, r3
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000dd70:	0084      	lsls	r4, r0, #2
1000dd72:	2600      	movs	r6, #0
		}
		#endif			
		
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
1000dd74:	4f3a      	ldr	r7, [pc, #232]	; (1000de60 <ble_event_manager+0x100>)
1000dd76:	59bb      	ldr	r3, [r7, r6]
1000dd78:	2b00      	cmp	r3, #0
1000dd7a:	d004      	beq.n	1000dd86 <ble_event_manager+0x26>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000dd7c:	591b      	ldr	r3, [r3, r4]
1000dd7e:	2b00      	cmp	r3, #0
1000dd80:	d001      	beq.n	1000dd86 <ble_event_manager+0x26>
				{
					event_cb_fn[events](event_params);		
1000dd82:	0028      	movs	r0, r5
1000dd84:	4798      	blx	r3
1000dd86:	3604      	adds	r6, #4
			if( ble_scan_duplication_check((at_ble_scan_info_t*)event_params) )
				return;
		}
		#endif			
		
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
1000dd88:	2e14      	cmp	r6, #20
1000dd8a:	d1f4      	bne.n	1000dd76 <ble_event_manager+0x16>
1000dd8c:	e065      	b.n	1000de5a <ble_event_manager+0xfa>
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000dd8e:	3813      	subs	r0, #19
1000dd90:	b2c4      	uxtb	r4, r0
1000dd92:	00a4      	lsls	r4, r4, #2
1000dd94:	2600      	movs	r6, #0
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
1000dd96:	4f33      	ldr	r7, [pc, #204]	; (1000de64 <ble_event_manager+0x104>)
1000dd98:	59bb      	ldr	r3, [r7, r6]
1000dd9a:	2b00      	cmp	r3, #0
1000dd9c:	d004      	beq.n	1000dda8 <ble_event_manager+0x48>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000dd9e:	591b      	ldr	r3, [r3, r4]
1000dda0:	2b00      	cmp	r3, #0
1000dda2:	d001      	beq.n	1000dda8 <ble_event_manager+0x48>
				{
					event_cb_fn[events](event_params);
1000dda4:	0028      	movs	r0, r5
1000dda6:	4798      	blx	r3
1000dda8:	3604      	adds	r6, #4
	case AT_BLE_NOTIFICATION_RECIEVED:
	case AT_BLE_INDICATION_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
1000ddaa:	2e14      	cmp	r6, #20
1000ddac:	d1f4      	bne.n	1000dd98 <ble_event_manager+0x38>
1000ddae:	e054      	b.n	1000de5a <ble_event_manager+0xfa>
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000ddb0:	381d      	subs	r0, #29
1000ddb2:	b2c4      	uxtb	r4, r0
1000ddb4:	00a4      	lsls	r4, r4, #2
1000ddb6:	2600      	movs	r6, #0
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
1000ddb8:	4f2b      	ldr	r7, [pc, #172]	; (1000de68 <ble_event_manager+0x108>)
1000ddba:	59bb      	ldr	r3, [r7, r6]
1000ddbc:	2b00      	cmp	r3, #0
1000ddbe:	d004      	beq.n	1000ddca <ble_event_manager+0x6a>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000ddc0:	591b      	ldr	r3, [r3, r4]
1000ddc2:	2b00      	cmp	r3, #0
1000ddc4:	d001      	beq.n	1000ddca <ble_event_manager+0x6a>
				{
					event_cb_fn[events](event_params);
1000ddc6:	0028      	movs	r0, r5
1000ddc8:	4798      	blx	r3
1000ddca:	3604      	adds	r6, #4
	case AT_BLE_READ_AUTHORIZE_REQUEST:
	{
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
1000ddcc:	2e14      	cmp	r6, #20
1000ddce:	d1f4      	bne.n	1000ddba <ble_event_manager+0x5a>
1000ddd0:	e043      	b.n	1000de5a <ble_event_manager+0xfa>
	case AT_BLE_LECB_ADD_CREDIT_IND:
	case AT_BLE_LECB_SEND_RESP:
	case AT_BLE_LECB_DATA_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_READ_AUTHORIZE_REQUEST + 1);
1000ddd2:	3827      	subs	r0, #39	; 0x27
1000ddd4:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_l2cap_event_cb[idx] != NULL)
1000ddd6:	4b25      	ldr	r3, [pc, #148]	; (1000de6c <ble_event_manager+0x10c>)
1000ddd8:	681b      	ldr	r3, [r3, #0]
1000ddda:	2b00      	cmp	r3, #0
1000dddc:	d03d      	beq.n	1000de5a <ble_event_manager+0xfa>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_l2cap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000ddde:	0080      	lsls	r0, r0, #2
1000dde0:	58c3      	ldr	r3, [r0, r3]
1000dde2:	2b00      	cmp	r3, #0
1000dde4:	d039      	beq.n	1000de5a <ble_event_manager+0xfa>
				{
					event_cb_fn[events](event_params);
1000dde6:	0008      	movs	r0, r1
1000dde8:	4798      	blx	r3
1000ddea:	e036      	b.n	1000de5a <ble_event_manager+0xfa>
	case AT_BLE_HTPT_ENABLE_RSP:
	case AT_BLE_HTPT_MEAS_INTV_UPD_RSP:
	case AT_BLE_HTPT_MEAS_INTV_CHG_REQ:
	{
		uint8_t idx;
		events -= (AT_BLE_LECB_DATA_RECIEVED + 1);
1000ddec:	382d      	subs	r0, #45	; 0x2d
1000ddee:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_htpt_event_cb[idx] != NULL)
1000ddf0:	4b1f      	ldr	r3, [pc, #124]	; (1000de70 <ble_event_manager+0x110>)
1000ddf2:	681b      	ldr	r3, [r3, #0]
1000ddf4:	2b00      	cmp	r3, #0
1000ddf6:	d030      	beq.n	1000de5a <ble_event_manager+0xfa>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_htpt_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000ddf8:	0080      	lsls	r0, r0, #2
1000ddfa:	58c3      	ldr	r3, [r0, r3]
1000ddfc:	2b00      	cmp	r3, #0
1000ddfe:	d02c      	beq.n	1000de5a <ble_event_manager+0xfa>
				{
					event_cb_fn[events](event_params);
1000de00:	0008      	movs	r0, r1
1000de02:	4798      	blx	r3
1000de04:	e029      	b.n	1000de5a <ble_event_manager+0xfa>
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000de06:	3836      	subs	r0, #54	; 0x36
1000de08:	b2c4      	uxtb	r4, r0
1000de0a:	00a4      	lsls	r4, r4, #2
1000de0c:	2600      	movs	r6, #0
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
1000de0e:	4f19      	ldr	r7, [pc, #100]	; (1000de74 <ble_event_manager+0x114>)
1000de10:	59bb      	ldr	r3, [r7, r6]
1000de12:	2b00      	cmp	r3, #0
1000de14:	d004      	beq.n	1000de20 <ble_event_manager+0xc0>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000de16:	591b      	ldr	r3, [r3, r4]
1000de18:	2b00      	cmp	r3, #0
1000de1a:	d001      	beq.n	1000de20 <ble_event_manager+0xc0>
				{
					event_cb_fn[events](event_params);
1000de1c:	0028      	movs	r0, r5
1000de1e:	4798      	blx	r3
1000de20:	3604      	adds	r6, #4
	case AT_BLE_LE_TEST_STATUS:
	case AT_BLE_LE_PACKET_REPORT:
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
1000de22:	2e14      	cmp	r6, #20
1000de24:	d1f4      	bne.n	1000de10 <ble_event_manager+0xb0>
1000de26:	e018      	b.n	1000de5a <ble_event_manager+0xfa>
	case AT_BLE_CUSTOM_EVENT:
	case AT_BLE_DEVICE_READY:
	case AT_BLE_EVENT_MAX:
	{
		uint8_t idx;
		events -= (AT_BLE_LE_PACKET_REPORT + 1);
1000de28:	3838      	subs	r0, #56	; 0x38
1000de2a:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_custom_event_cb[idx] != NULL)
1000de2c:	4b12      	ldr	r3, [pc, #72]	; (1000de78 <ble_event_manager+0x118>)
1000de2e:	681b      	ldr	r3, [r3, #0]
1000de30:	2b00      	cmp	r3, #0
1000de32:	d012      	beq.n	1000de5a <ble_event_manager+0xfa>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_custom_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000de34:	0080      	lsls	r0, r0, #2
1000de36:	58c3      	ldr	r3, [r0, r3]
1000de38:	2b00      	cmp	r3, #0
1000de3a:	d00e      	beq.n	1000de5a <ble_event_manager+0xfa>
				{
					event_cb_fn[events](event_params);
1000de3c:	0008      	movs	r0, r1
1000de3e:	4798      	blx	r3
1000de40:	e00b      	b.n	1000de5a <ble_event_manager+0xfa>
	}
	break;

	case AT_PLATFORM_EVENT:
	{
		if (ble_user_event_cb) {
1000de42:	4b0e      	ldr	r3, [pc, #56]	; (1000de7c <ble_event_manager+0x11c>)
1000de44:	681b      	ldr	r3, [r3, #0]
1000de46:	2b00      	cmp	r3, #0
1000de48:	d007      	beq.n	1000de5a <ble_event_manager+0xfa>
			ble_user_event_cb();
1000de4a:	4798      	blx	r3
1000de4c:	e005      	b.n	1000de5a <ble_event_manager+0xfa>
	break;

	default:
	{
		DBG_LOG_DEV("BLE-Manager:Unknown Event=0x%X", events);
		DBG_LOG("\r\n");
1000de4e:	4d0c      	ldr	r5, [pc, #48]	; (1000de80 <ble_event_manager+0x120>)
1000de50:	0028      	movs	r0, r5
1000de52:	4c0c      	ldr	r4, [pc, #48]	; (1000de84 <ble_event_manager+0x124>)
1000de54:	47a0      	blx	r4
1000de56:	0028      	movs	r0, r5
1000de58:	47a0      	blx	r4
	}
	break;		
	}
}
1000de5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000de5c:	10017e20 	.word	0x10017e20
1000de60:	1001a9c8 	.word	0x1001a9c8
1000de64:	1001a9dc 	.word	0x1001a9dc
1000de68:	1001a730 	.word	0x1001a730
1000de6c:	1001aa24 	.word	0x1001aa24
1000de70:	1001a72c 	.word	0x1001a72c
1000de74:	1001a9b4 	.word	0x1001a9b4
1000de78:	1001af68 	.word	0x1001af68
1000de7c:	10019250 	.word	0x10019250
1000de80:	10017780 	.word	0x10017780
1000de84:	10016841 	.word	0x10016841

1000de88 <ble_event_task>:
	return ulp_status;
}

/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
1000de88:	b570      	push	{r4, r5, r6, lr}
1000de8a:	0004      	movs	r4, r0
	return status;
}

ble_ulp_mode_t ble_get_ulp_status(void)
{
	return ulp_status;
1000de8c:	4b0d      	ldr	r3, [pc, #52]	; (1000dec4 <ble_event_task+0x3c>)
1000de8e:	781b      	ldrb	r3, [r3, #0]
/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
	at_ble_status_t status;
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
1000de90:	2b01      	cmp	r3, #1
1000de92:	d101      	bne.n	1000de98 <ble_event_task+0x10>
	{
		release_sleep_lock();
1000de94:	4b0c      	ldr	r3, [pc, #48]	; (1000dec8 <ble_event_task+0x40>)
1000de96:	4798      	blx	r3
	}	
	status = at_ble_event_get(&event, ble_event_params, timeout);
1000de98:	0022      	movs	r2, r4
1000de9a:	490c      	ldr	r1, [pc, #48]	; (1000decc <ble_event_task+0x44>)
1000de9c:	480c      	ldr	r0, [pc, #48]	; (1000ded0 <ble_event_task+0x48>)
1000de9e:	4b0d      	ldr	r3, [pc, #52]	; (1000ded4 <ble_event_task+0x4c>)
1000dea0:	4798      	blx	r3
1000dea2:	0004      	movs	r4, r0
1000dea4:	0005      	movs	r5, r0
	return status;
}

ble_ulp_mode_t ble_get_ulp_status(void)
{
	return ulp_status;
1000dea6:	4b07      	ldr	r3, [pc, #28]	; (1000dec4 <ble_event_task+0x3c>)
1000dea8:	781b      	ldrb	r3, [r3, #0]
	{
		release_sleep_lock();
	}	
	status = at_ble_event_get(&event, ble_event_params, timeout);
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
1000deaa:	2b01      	cmp	r3, #1
1000deac:	d101      	bne.n	1000deb2 <ble_event_task+0x2a>
	{
		acquire_sleep_lock();
1000deae:	4b0a      	ldr	r3, [pc, #40]	; (1000ded8 <ble_event_task+0x50>)
1000deb0:	4798      	blx	r3
	}
	
    if (status == AT_BLE_SUCCESS) 
1000deb2:	2d00      	cmp	r5, #0
1000deb4:	d104      	bne.n	1000dec0 <ble_event_task+0x38>
    {		
            ble_event_manager(event, ble_event_params);
1000deb6:	4b06      	ldr	r3, [pc, #24]	; (1000ded0 <ble_event_task+0x48>)
1000deb8:	7818      	ldrb	r0, [r3, #0]
1000deba:	4904      	ldr	r1, [pc, #16]	; (1000decc <ble_event_task+0x44>)
1000debc:	4b07      	ldr	r3, [pc, #28]	; (1000dedc <ble_event_task+0x54>)
1000debe:	4798      	blx	r3
    }
    
    return status;
}
1000dec0:	0020      	movs	r0, r4
1000dec2:	bd70      	pop	{r4, r5, r6, pc}
1000dec4:	1001925f 	.word	0x1001925f
1000dec8:	1000e87d 	.word	0x1000e87d
1000decc:	1001ad5c 	.word	0x1001ad5c
1000ded0:	1001aa20 	.word	0x1001aa20
1000ded4:	1000eefd 	.word	0x1000eefd
1000ded8:	1000e855 	.word	0x1000e855
1000dedc:	1000dd61 	.word	0x1000dd61

1000dee0 <ble_advertisement_data_set>:
	}
}

/* Advertisement Data will be set based on the advertisement configuration */
at_ble_status_t ble_advertisement_data_set(void)
{
1000dee0:	b510      	push	{r4, lr}
1000dee2:	b090      	sub	sp, #64	; 0x40
		uint8_t length_field_ind;
		uint8_t adv_element_len;
		adv_buf[adv_data_element.len] = adv_data_element.len;
		length_field_ind = adv_data_element.len;
		adv_data_element.len++;
		adv_buf[adv_data_element.len++] = COMPLETE_LIST_16BIT_SERV_UUIDS;
1000dee4:	ac08      	add	r4, sp, #32
1000dee6:	2203      	movs	r2, #3
1000dee8:	7062      	strb	r2, [r4, #1]
		MREPEAT(SERVICE_UUID16_MAX_NUM, _CONF_SERVICE_16BIT_UUID, &adv_data_element);
1000deea:	2302      	movs	r3, #2
1000deec:	70a3      	strb	r3, [r4, #2]
1000deee:	3316      	adds	r3, #22
1000def0:	70e3      	strb	r3, [r4, #3]
1000def2:	7122      	strb	r2, [r4, #4]
1000def4:	7163      	strb	r3, [r4, #5]
1000def6:	3201      	adds	r2, #1
1000def8:	71a2      	strb	r2, [r4, #6]
1000defa:	71e3      	strb	r3, [r4, #7]
1000defc:	320b      	adds	r2, #11
1000defe:	7222      	strb	r2, [r4, #8]
1000df00:	7263      	strb	r3, [r4, #9]
		adv_element_len = adv_data_element.len - (length_field_ind + ADV_ELEMENT_SIZE);
		if(adv_element_len) 
		{			
			adv_buf[length_field_ind] = adv_element_len+ADV_TYPE_SIZE;
1000df02:	3b0f      	subs	r3, #15
1000df04:	7023      	strb	r3, [r4, #0]
	#endif
	
	#if (BLE_GAP_ADV_COMPLETE_LOCAL_NAME_ENABLE && !BLE_GAP_ADV_SHORTENED_LOCAL_NAME_ENABLE)
	#if (BLE_GAP_ADV_COMPLETE_LOCAL_NAME_SCN_RSP_ENABLE != SCAN_RESPONSE_ONLY_ENABLE)
	if((adv_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_TYPE_FLAG_SIZE + ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH))) {
		adv_buf[adv_data_element.len++] = BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH + ADV_TYPE_SIZE;
1000df06:	3a05      	subs	r2, #5
1000df08:	72a2      	strb	r2, [r4, #10]
		adv_buf[adv_data_element.len++] = COMPLETE_LOCAL_NAME;
1000df0a:	72e3      	strb	r3, [r4, #11]
		memcpy(&adv_buf[adv_data_element.len], BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME, BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH);
1000df0c:	aa0b      	add	r2, sp, #44	; 0x2c
1000df0e:	4b10      	ldr	r3, [pc, #64]	; (1000df50 <ble_advertisement_data_set+0x70>)
1000df10:	cb03      	ldmia	r3!, {r0, r1}
1000df12:	c203      	stmia	r2!, {r0, r1}
1000df14:	781b      	ldrb	r3, [r3, #0]
1000df16:	7013      	strb	r3, [r2, #0]
    DBG_LOG_DEV("[ble_manager]\t\tManufacturer specific data NOT enabled");
	if(false){}
	#endif
	#if ((BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_SCN_RSP_ENABLE == SCAN_RESPONSE_ENABLE) || (BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_SCN_RSP_ENABLE == SCAN_RESPONSE_ONLY_ENABLE))
	else if((scan_resp_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE))) {
		scn_resp[scan_resp_data_element.len++] = BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE + ADV_TYPE_SIZE;
1000df18:	2307      	movs	r3, #7
1000df1a:	466a      	mov	r2, sp
1000df1c:	7013      	strb	r3, [r2, #0]
		scn_resp[scan_resp_data_element.len++] = MANUFACTURER_SPECIFIC_DATA;
1000df1e:	33f8      	adds	r3, #248	; 0xf8
1000df20:	7053      	strb	r3, [r2, #1]
		memcpy(&scn_resp[scan_resp_data_element.len], BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA, BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE);
1000df22:	2206      	movs	r2, #6
1000df24:	490b      	ldr	r1, [pc, #44]	; (1000df54 <ble_advertisement_data_set+0x74>)
1000df26:	466b      	mov	r3, sp
1000df28:	1c98      	adds	r0, r3, #2
1000df2a:	4b0b      	ldr	r3, [pc, #44]	; (1000df58 <ble_advertisement_data_set+0x78>)
1000df2c:	4798      	blx	r3
		DBG_LOG_ADV("Failed to add Manufacturer specific data");
		return AT_BLE_GAP_INVALID_PARAM;
	}
	#endif
	
	if (at_ble_adv_data_set(adv_buf, adv_data_element.len, scn_resp,
1000df2e:	2308      	movs	r3, #8
1000df30:	466a      	mov	r2, sp
1000df32:	2115      	movs	r1, #21
1000df34:	0020      	movs	r0, r4
1000df36:	4c09      	ldr	r4, [pc, #36]	; (1000df5c <ble_advertisement_data_set+0x7c>)
1000df38:	47a0      	blx	r4
1000df3a:	2800      	cmp	r0, #0
1000df3c:	d005      	beq.n	1000df4a <ble_advertisement_data_set+0x6a>
	scan_resp_data_element.len) != AT_BLE_SUCCESS) {
		DBG_LOG("BLE Advertisement data set failed");
1000df3e:	4808      	ldr	r0, [pc, #32]	; (1000df60 <ble_advertisement_data_set+0x80>)
1000df40:	4b08      	ldr	r3, [pc, #32]	; (1000df64 <ble_advertisement_data_set+0x84>)
1000df42:	4798      	blx	r3
1000df44:	4808      	ldr	r0, [pc, #32]	; (1000df68 <ble_advertisement_data_set+0x88>)
1000df46:	4b09      	ldr	r3, [pc, #36]	; (1000df6c <ble_advertisement_data_set+0x8c>)
1000df48:	4798      	blx	r3
            //DBG_LOG_ADV("- 0x%02x(%c) ", adv_buf[i], adv_buf[i]);
        //}
		//DBG_LOG_ADV("BLE Advertisement data set success");
		return AT_BLE_SUCCESS;
    }
}
1000df4a:	2000      	movs	r0, #0
1000df4c:	b010      	add	sp, #64	; 0x40
1000df4e:	bd10      	pop	{r4, pc}
1000df50:	10018378 	.word	0x10018378
1000df54:	10018558 	.word	0x10018558
1000df58:	100165c7 	.word	0x100165c7
1000df5c:	1000f95d 	.word	0x1000f95d
1000df60:	10017780 	.word	0x10017780
1000df64:	10016841 	.word	0x10016841
1000df68:	10018560 	.word	0x10018560
1000df6c:	10016721 	.word	0x10016721

1000df70 <uart_read_complete_callback>:

void _time_start(unsigned int sec);
unsigned int _time_done(void);

static void uart_read_complete_callback(struct uart_module *const module)
{
1000df70:	b510      	push	{r4, lr}
	if(read_status == UART_READ_WAITING) {
1000df72:	4b0e      	ldr	r3, [pc, #56]	; (1000dfac <uart_read_complete_callback+0x3c>)
1000df74:	781b      	ldrb	r3, [r3, #0]
1000df76:	2b01      	cmp	r3, #1
1000df78:	d10b      	bne.n	1000df92 <uart_read_complete_callback+0x22>
		read_status = UART_READ_DONE;
1000df7a:	2202      	movs	r2, #2
1000df7c:	4b0b      	ldr	r3, [pc, #44]	; (1000dfac <uart_read_complete_callback+0x3c>)
1000df7e:	701a      	strb	r2, [r3, #0]
		
		if(user_callback_func == NULL)
1000df80:	4b0b      	ldr	r3, [pc, #44]	; (1000dfb0 <uart_read_complete_callback+0x40>)
1000df82:	681b      	ldr	r3, [r3, #0]
1000df84:	2b00      	cmp	r3, #0
1000df86:	d110      	bne.n	1000dfaa <uart_read_complete_callback+0x3a>
			uart_disable_callback(&uart_instance, UART_RX_COMPLETE);
1000df88:	2102      	movs	r1, #2
1000df8a:	480a      	ldr	r0, [pc, #40]	; (1000dfb4 <uart_read_complete_callback+0x44>)
1000df8c:	4b0a      	ldr	r3, [pc, #40]	; (1000dfb8 <uart_read_complete_callback+0x48>)
1000df8e:	4798      	blx	r3
1000df90:	e00b      	b.n	1000dfaa <uart_read_complete_callback+0x3a>
	}
	else if(user_callback_func != NULL) {
1000df92:	4b07      	ldr	r3, [pc, #28]	; (1000dfb0 <uart_read_complete_callback+0x40>)
1000df94:	681b      	ldr	r3, [r3, #0]
1000df96:	2b00      	cmp	r3, #0
1000df98:	d007      	beq.n	1000dfaa <uart_read_complete_callback+0x3a>
		user_callback_func(string_input[0]);
1000df9a:	4c08      	ldr	r4, [pc, #32]	; (1000dfbc <uart_read_complete_callback+0x4c>)
1000df9c:	7820      	ldrb	r0, [r4, #0]
1000df9e:	4798      	blx	r3
		uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000dfa0:	2201      	movs	r2, #1
1000dfa2:	0021      	movs	r1, r4
1000dfa4:	4803      	ldr	r0, [pc, #12]	; (1000dfb4 <uart_read_complete_callback+0x44>)
1000dfa6:	4b06      	ldr	r3, [pc, #24]	; (1000dfc0 <uart_read_complete_callback+0x50>)
1000dfa8:	4798      	blx	r3
	}
	else {
		//Nothing to do.
	}
}
1000dfaa:	bd10      	pop	{r4, pc}
1000dfac:	1001a264 	.word	0x1001a264
1000dfb0:	1001a26c 	.word	0x1001a26c
1000dfb4:	1001af6c 	.word	0x1001af6c
1000dfb8:	1000ccf9 	.word	0x1000ccf9
1000dfbc:	1001a268 	.word	0x1001a268
1000dfc0:	1000cc9d 	.word	0x1000cc9d

1000dfc4 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct uart_module *const module,
		uint8_t *c)
{
1000dfc4:	b570      	push	{r4, r5, r6, lr}
1000dfc6:	0006      	movs	r6, r0
1000dfc8:	000d      	movs	r5, r1
	while(STATUS_OK != uart_read_wait(module, c));
1000dfca:	4c03      	ldr	r4, [pc, #12]	; (1000dfd8 <usart_serial_getchar+0x14>)
1000dfcc:	0029      	movs	r1, r5
1000dfce:	0030      	movs	r0, r6
1000dfd0:	47a0      	blx	r4
1000dfd2:	2800      	cmp	r0, #0
1000dfd4:	d1fa      	bne.n	1000dfcc <usart_serial_getchar+0x8>
}
1000dfd6:	bd70      	pop	{r4, r5, r6, pc}
1000dfd8:	1000cc89 	.word	0x1000cc89

1000dfdc <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct uart_module *const module,
		uint8_t c)
{
1000dfdc:	b570      	push	{r4, r5, r6, lr}
1000dfde:	0006      	movs	r6, r0
1000dfe0:	000d      	movs	r5, r1
	while(STATUS_OK !=uart_write_wait(module, c));
1000dfe2:	4c03      	ldr	r4, [pc, #12]	; (1000dff0 <usart_serial_putchar+0x14>)
1000dfe4:	0029      	movs	r1, r5
1000dfe6:	0030      	movs	r0, r6
1000dfe8:	47a0      	blx	r4
1000dfea:	2800      	cmp	r0, #0
1000dfec:	d1fa      	bne.n	1000dfe4 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
1000dfee:	bd70      	pop	{r4, r5, r6, pc}
1000dff0:	1000cc79 	.word	0x1000cc79

1000dff4 <serial_console_init>:

void serial_console_init(void)
{
1000dff4:	b570      	push	{r4, r5, r6, lr}
	system_clock_config(CLOCK_RESOURCE_XO_26_MHZ, CLOCK_FREQ_26_MHZ);
1000dff6:	2100      	movs	r1, #0
1000dff8:	2000      	movs	r0, #0
1000dffa:	4b19      	ldr	r3, [pc, #100]	; (1000e060 <serial_console_init+0x6c>)
1000dffc:	4798      	blx	r3

	uart_get_config_defaults(&config_uart);
1000dffe:	4c19      	ldr	r4, [pc, #100]	; (1000e064 <serial_console_init+0x70>)
1000e000:	0020      	movs	r0, r4
1000e002:	4b19      	ldr	r3, [pc, #100]	; (1000e068 <serial_console_init+0x74>)
1000e004:	4798      	blx	r3

	config_uart.baud_rate = CONF_STDIO_BAUDRATE;
1000e006:	23e1      	movs	r3, #225	; 0xe1
1000e008:	025b      	lsls	r3, r3, #9
1000e00a:	6023      	str	r3, [r4, #0]
	config_uart.pin_number_pad[0] = EDBG_CDC_PIN_PAD0;
1000e00c:	2302      	movs	r3, #2
1000e00e:	60a3      	str	r3, [r4, #8]
	config_uart.pin_number_pad[1] = EDBG_CDC_PIN_PAD1;
1000e010:	2203      	movs	r2, #3
1000e012:	60e2      	str	r2, [r4, #12]
	config_uart.pin_number_pad[2] = EDBG_CDC_PIN_PAD2;
1000e014:	3201      	adds	r2, #1
1000e016:	6122      	str	r2, [r4, #16]
	config_uart.pin_number_pad[3] = EDBG_CDC_PIN_PAD3;
1000e018:	3201      	adds	r2, #1
1000e01a:	6162      	str	r2, [r4, #20]
	
	config_uart.pinmux_sel_pad[0] = EDBG_CDC_MUX_PAD0;
1000e01c:	61a3      	str	r3, [r4, #24]
	config_uart.pinmux_sel_pad[1] = EDBG_CDC_MUX_PAD1;
1000e01e:	61e3      	str	r3, [r4, #28]
	config_uart.pinmux_sel_pad[2] = EDBG_CDC_MUX_PAD2;
1000e020:	6223      	str	r3, [r4, #32]
	config_uart.pinmux_sel_pad[3] = EDBG_CDC_MUX_PAD3;
1000e022:	6263      	str	r3, [r4, #36]	; 0x24
static inline void stdio_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	stdio_base = (void *)module;
1000e024:	4d11      	ldr	r5, [pc, #68]	; (1000e06c <serial_console_init+0x78>)
1000e026:	4b12      	ldr	r3, [pc, #72]	; (1000e070 <serial_console_init+0x7c>)
1000e028:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
1000e02a:	4a12      	ldr	r2, [pc, #72]	; (1000e074 <serial_console_init+0x80>)
1000e02c:	4b12      	ldr	r3, [pc, #72]	; (1000e078 <serial_console_init+0x84>)
1000e02e:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
1000e030:	4a12      	ldr	r2, [pc, #72]	; (1000e07c <serial_console_init+0x88>)
1000e032:	4b13      	ldr	r3, [pc, #76]	; (1000e080 <serial_console_init+0x8c>)
1000e034:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	if (uart_init(module, hw, config) == STATUS_OK) {
1000e036:	0022      	movs	r2, r4
1000e038:	4912      	ldr	r1, [pc, #72]	; (1000e084 <serial_console_init+0x90>)
1000e03a:	0028      	movs	r0, r5
1000e03c:	4b12      	ldr	r3, [pc, #72]	; (1000e088 <serial_console_init+0x94>)
1000e03e:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
1000e040:	4e12      	ldr	r6, [pc, #72]	; (1000e08c <serial_console_init+0x98>)
1000e042:	6833      	ldr	r3, [r6, #0]
1000e044:	6898      	ldr	r0, [r3, #8]
1000e046:	2100      	movs	r1, #0
1000e048:	4c11      	ldr	r4, [pc, #68]	; (1000e090 <serial_console_init+0x9c>)
1000e04a:	47a0      	blx	r4
	setbuf(stdin, NULL);
1000e04c:	6833      	ldr	r3, [r6, #0]
1000e04e:	6858      	ldr	r0, [r3, #4]
1000e050:	2100      	movs	r1, #0
1000e052:	47a0      	blx	r4

	stdio_serial_init(&uart_instance, CONF_STDIO_USART_MODULE, &config_uart);
	
	uart_register_callback(&uart_instance, uart_read_complete_callback, UART_RX_COMPLETE);
1000e054:	2202      	movs	r2, #2
1000e056:	490f      	ldr	r1, [pc, #60]	; (1000e094 <serial_console_init+0xa0>)
1000e058:	0028      	movs	r0, r5
1000e05a:	4b0f      	ldr	r3, [pc, #60]	; (1000e098 <serial_console_init+0xa4>)
1000e05c:	4798      	blx	r3
}
1000e05e:	bd70      	pop	{r4, r5, r6, pc}
1000e060:	1000bc99 	.word	0x1000bc99
1000e064:	1001af90 	.word	0x1001af90
1000e068:	1000ca91 	.word	0x1000ca91
1000e06c:	1001af6c 	.word	0x1001af6c
1000e070:	1001a728 	.word	0x1001a728
1000e074:	1000dfdd 	.word	0x1000dfdd
1000e078:	1001a724 	.word	0x1001a724
1000e07c:	1000dfc5 	.word	0x1000dfc5
1000e080:	1001a720 	.word	0x1001a720
1000e084:	40004000 	.word	0x40004000
1000e088:	1000cabd 	.word	0x1000cabd
1000e08c:	10018934 	.word	0x10018934
1000e090:	100168f1 	.word	0x100168f1
1000e094:	1000df71 	.word	0x1000df71
1000e098:	1000ccc5 	.word	0x1000ccc5

1000e09c <_time_start>:

void _time_start(unsigned int sec)
{
1000e09c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e09e:	b083      	sub	sp, #12
1000e0a0:	0005      	movs	r5, r0
	system_clock_get_value();
1000e0a2:	4c0d      	ldr	r4, [pc, #52]	; (1000e0d8 <_time_start+0x3c>)
1000e0a4:	47a0      	blx	r4
	unsigned int main_clk = system_clock_get_value();
1000e0a6:	47a0      	blx	r4

	tick = (((double)(main_clk)) * ((double)0.0000493)) * (sec * 1000);
1000e0a8:	4f0c      	ldr	r7, [pc, #48]	; (1000e0dc <_time_start+0x40>)
1000e0aa:	47b8      	blx	r7
1000e0ac:	4e0c      	ldr	r6, [pc, #48]	; (1000e0e0 <_time_start+0x44>)
1000e0ae:	4a0d      	ldr	r2, [pc, #52]	; (1000e0e4 <_time_start+0x48>)
1000e0b0:	4b0d      	ldr	r3, [pc, #52]	; (1000e0e8 <_time_start+0x4c>)
1000e0b2:	47b0      	blx	r6
1000e0b4:	9000      	str	r0, [sp, #0]
1000e0b6:	9101      	str	r1, [sp, #4]
1000e0b8:	20fa      	movs	r0, #250	; 0xfa
1000e0ba:	0080      	lsls	r0, r0, #2
1000e0bc:	4368      	muls	r0, r5
1000e0be:	47b8      	blx	r7
1000e0c0:	0002      	movs	r2, r0
1000e0c2:	000b      	movs	r3, r1
1000e0c4:	9800      	ldr	r0, [sp, #0]
1000e0c6:	9901      	ldr	r1, [sp, #4]
1000e0c8:	47b0      	blx	r6
1000e0ca:	4b08      	ldr	r3, [pc, #32]	; (1000e0ec <_time_start+0x50>)
1000e0cc:	4798      	blx	r3
1000e0ce:	4b08      	ldr	r3, [pc, #32]	; (1000e0f0 <_time_start+0x54>)
1000e0d0:	6018      	str	r0, [r3, #0]
}
1000e0d2:	b003      	add	sp, #12
1000e0d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e0d6:	46c0      	nop			; (mov r8, r8)
1000e0d8:	1000bd1d 	.word	0x1000bd1d
1000e0dc:	100162d1 	.word	0x100162d1
1000e0e0:	10015605 	.word	0x10015605
1000e0e4:	19feaec7 	.word	0x19feaec7
1000e0e8:	3f09d8ef 	.word	0x3f09d8ef
1000e0ec:	100139f5 	.word	0x100139f5
1000e0f0:	1001a260 	.word	0x1001a260

1000e0f4 <_time_done>:

unsigned int _time_done()
{
	return --tick;
1000e0f4:	4b02      	ldr	r3, [pc, #8]	; (1000e100 <_time_done+0xc>)
1000e0f6:	681a      	ldr	r2, [r3, #0]
1000e0f8:	1e50      	subs	r0, r2, #1
1000e0fa:	6018      	str	r0, [r3, #0]
}
1000e0fc:	4770      	bx	lr
1000e0fe:	46c0      	nop			; (mov r8, r8)
1000e100:	1001a260 	.word	0x1001a260

1000e104 <getchar_b11_timeout>:

int getchar_b11_timeout(unsigned int sec)
{
1000e104:	b570      	push	{r4, r5, r6, lr}
1000e106:	0004      	movs	r4, r0
	read_status = UART_READ_WAITING;
1000e108:	2201      	movs	r2, #1
1000e10a:	4b11      	ldr	r3, [pc, #68]	; (1000e150 <getchar_b11_timeout+0x4c>)
1000e10c:	701a      	strb	r2, [r3, #0]
	
	if(user_callback_func == NULL)
1000e10e:	4b11      	ldr	r3, [pc, #68]	; (1000e154 <getchar_b11_timeout+0x50>)
1000e110:	681b      	ldr	r3, [r3, #0]
1000e112:	2b00      	cmp	r3, #0
1000e114:	d103      	bne.n	1000e11e <getchar_b11_timeout+0x1a>
		uart_enable_callback(&uart_instance, UART_RX_COMPLETE);
1000e116:	2102      	movs	r1, #2
1000e118:	480f      	ldr	r0, [pc, #60]	; (1000e158 <getchar_b11_timeout+0x54>)
1000e11a:	4b10      	ldr	r3, [pc, #64]	; (1000e15c <getchar_b11_timeout+0x58>)
1000e11c:	4798      	blx	r3

	_time_start(sec);
1000e11e:	0020      	movs	r0, r4
1000e120:	4b0f      	ldr	r3, [pc, #60]	; (1000e160 <getchar_b11_timeout+0x5c>)
1000e122:	4798      	blx	r3
	
	string_input[0] = 0;
1000e124:	490f      	ldr	r1, [pc, #60]	; (1000e164 <getchar_b11_timeout+0x60>)
1000e126:	2300      	movs	r3, #0
1000e128:	700b      	strb	r3, [r1, #0]
	uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000e12a:	2201      	movs	r2, #1
1000e12c:	480a      	ldr	r0, [pc, #40]	; (1000e158 <getchar_b11_timeout+0x54>)
1000e12e:	4b0e      	ldr	r3, [pc, #56]	; (1000e168 <getchar_b11_timeout+0x64>)
1000e130:	4798      	blx	r3
	
	while (read_status != UART_READ_DONE && _time_done() > 0 );
1000e132:	4c07      	ldr	r4, [pc, #28]	; (1000e150 <getchar_b11_timeout+0x4c>)
1000e134:	4d0d      	ldr	r5, [pc, #52]	; (1000e16c <getchar_b11_timeout+0x68>)
1000e136:	7823      	ldrb	r3, [r4, #0]
1000e138:	2b02      	cmp	r3, #2
1000e13a:	d002      	beq.n	1000e142 <getchar_b11_timeout+0x3e>
1000e13c:	47a8      	blx	r5
1000e13e:	2800      	cmp	r0, #0
1000e140:	d1f9      	bne.n	1000e136 <getchar_b11_timeout+0x32>
	
	read_status = UART_READ_NONE;
1000e142:	2200      	movs	r2, #0
1000e144:	4b02      	ldr	r3, [pc, #8]	; (1000e150 <getchar_b11_timeout+0x4c>)
1000e146:	701a      	strb	r2, [r3, #0]

	return string_input[0];
1000e148:	4b06      	ldr	r3, [pc, #24]	; (1000e164 <getchar_b11_timeout+0x60>)
1000e14a:	7818      	ldrb	r0, [r3, #0]
}
1000e14c:	bd70      	pop	{r4, r5, r6, pc}
1000e14e:	46c0      	nop			; (mov r8, r8)
1000e150:	1001a264 	.word	0x1001a264
1000e154:	1001a26c 	.word	0x1001a26c
1000e158:	1001af6c 	.word	0x1001af6c
1000e15c:	1000ccd9 	.word	0x1000ccd9
1000e160:	1000e09d 	.word	0x1000e09d
1000e164:	1001a268 	.word	0x1001a268
1000e168:	1000cc9d 	.word	0x1000cc9d
1000e16c:	1000e0f5 	.word	0x1000e0f5

1000e170 <platform_event_free>:
void platform_event_free(struct platform_event* event);
//struct str_watched_event watched_event;

void platform_event_free(struct platform_event* event)
{
	event->next = platform_event_free_list;
1000e170:	4b02      	ldr	r3, [pc, #8]	; (1000e17c <platform_event_free+0xc>)
1000e172:	681a      	ldr	r2, [r3, #0]
1000e174:	6002      	str	r2, [r0, #0]
	platform_event_free_list = event;
1000e176:	6018      	str	r0, [r3, #0]
}
1000e178:	4770      	bx	lr
1000e17a:	46c0      	nop			; (mov r8, r8)
1000e17c:	1001a274 	.word	0x1001a274

1000e180 <platform_event_post>:

void platform_event_post(uint16_t event_type, void * data, uint16_t data_len)
{
1000e180:	b530      	push	{r4, r5, lr}
	// get a free event object
	struct platform_event* evt = platform_event_free_list;
1000e182:	4b0b      	ldr	r3, [pc, #44]	; (1000e1b0 <platform_event_post+0x30>)
1000e184:	681c      	ldr	r4, [r3, #0]
	if(evt != NULL)
1000e186:	2c00      	cmp	r4, #0
1000e188:	d011      	beq.n	1000e1ae <platform_event_post+0x2e>
	{
		platform_event_free_list = evt->next;
1000e18a:	6825      	ldr	r5, [r4, #0]
1000e18c:	601d      	str	r5, [r3, #0]
		
		evt->next = NULL;
1000e18e:	2300      	movs	r3, #0
1000e190:	6023      	str	r3, [r4, #0]
		evt->data = data;
1000e192:	60a1      	str	r1, [r4, #8]
		evt->data_len = data_len;
1000e194:	80e2      	strh	r2, [r4, #6]
		evt->event_type = event_type;
1000e196:	80a0      	strh	r0, [r4, #4]

		if(platform_event_pending_list == NULL)
1000e198:	4b06      	ldr	r3, [pc, #24]	; (1000e1b4 <platform_event_post+0x34>)
1000e19a:	681a      	ldr	r2, [r3, #0]
1000e19c:	2a00      	cmp	r2, #0
1000e19e:	d102      	bne.n	1000e1a6 <platform_event_post+0x26>
		{
			platform_event_pending_list = evt;
1000e1a0:	601c      	str	r4, [r3, #0]
1000e1a2:	e004      	b.n	1000e1ae <platform_event_post+0x2e>
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
			{
				cur = cur->next;
1000e1a4:	001a      	movs	r2, r3
			platform_event_pending_list = evt;
		}
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
1000e1a6:	6813      	ldr	r3, [r2, #0]
1000e1a8:	2b00      	cmp	r3, #0
1000e1aa:	d1fb      	bne.n	1000e1a4 <platform_event_post+0x24>
			{
				cur = cur->next;
			}
			cur->next = evt;
1000e1ac:	6014      	str	r4, [r2, #0]
		}
		
		//platform_event_signal();
	}
	
}
1000e1ae:	bd30      	pop	{r4, r5, pc}
1000e1b0:	1001a274 	.word	0x1001a274
1000e1b4:	1001a270 	.word	0x1001a270

1000e1b8 <platform_event_init>:
	return status;
	
}

void platform_event_init()
{
1000e1b8:	b570      	push	{r4, r5, r6, lr}
	uint32_t i;
	platform_event_free_list = NULL;
1000e1ba:	2300      	movs	r3, #0
1000e1bc:	4a06      	ldr	r2, [pc, #24]	; (1000e1d8 <platform_event_init+0x20>)
1000e1be:	6013      	str	r3, [r2, #0]
	platform_event_pending_list = NULL;
1000e1c0:	4a06      	ldr	r2, [pc, #24]	; (1000e1dc <platform_event_init+0x24>)
1000e1c2:	6013      	str	r3, [r2, #0]
1000e1c4:	4c06      	ldr	r4, [pc, #24]	; (1000e1e0 <platform_event_init+0x28>)
1000e1c6:	0026      	movs	r6, r4
1000e1c8:	3678      	adds	r6, #120	; 0x78
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
	{
		platform_event_free(&platform_event_pool[i]);
1000e1ca:	4d06      	ldr	r5, [pc, #24]	; (1000e1e4 <platform_event_init+0x2c>)
1000e1cc:	0020      	movs	r0, r4
1000e1ce:	47a8      	blx	r5
1000e1d0:	340c      	adds	r4, #12
{
	uint32_t i;
	platform_event_free_list = NULL;
	platform_event_pending_list = NULL;
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
1000e1d2:	42b4      	cmp	r4, r6
1000e1d4:	d1fa      	bne.n	1000e1cc <platform_event_init+0x14>
	{
		platform_event_free(&platform_event_pool[i]);
	}
}
1000e1d6:	bd70      	pop	{r4, r5, r6, pc}
1000e1d8:	1001a274 	.word	0x1001a274
1000e1dc:	1001a270 	.word	0x1001a270
1000e1e0:	1001a278 	.word	0x1001a278
1000e1e4:	1000e171 	.word	0x1000e171

1000e1e8 <at_ke_msg_send>:
	}
	return status;
}

static void at_ke_msg_send(void const * param_ptr)
{
1000e1e8:	b570      	push	{r4, r5, r6, lr}
1000e1ea:	0004      	movs	r4, r0
	struct ke_msg *kemsg;
	uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
1000e1ec:	4b13      	ldr	r3, [pc, #76]	; (1000e23c <at_ke_msg_send+0x54>)
1000e1ee:	681d      	ldr	r5, [r3, #0]
	ke_msg_send(param_ptr);
1000e1f0:	4b13      	ldr	r3, [pc, #76]	; (1000e240 <at_ke_msg_send+0x58>)
1000e1f2:	681b      	ldr	r3, [r3, #0]
1000e1f4:	4798      	blx	r3
	kemsg = ke_param2msg(param_ptr);

	if((kemsg != NULL) && (kemsg->dest_id != TASK_INTERNAL_APP)) {
1000e1f6:	2c0c      	cmp	r4, #12
1000e1f8:	d01f      	beq.n	1000e23a <at_ke_msg_send+0x52>
1000e1fa:	3c0c      	subs	r4, #12
1000e1fc:	88e3      	ldrh	r3, [r4, #6]
1000e1fe:	2b05      	cmp	r3, #5
1000e200:	d01b      	beq.n	1000e23a <at_ke_msg_send+0x52>
		if(osc_en == 0)
1000e202:	07eb      	lsls	r3, r5, #31
1000e204:	d414      	bmi.n	1000e230 <at_ke_msg_send+0x48>
		{
			/* BLE Core is off, issue a wakeup request*/
			/* First, make sure PD4 is powered up and out of reset */
			pwr_enable_arm_wakeup(1<<1);
1000e206:	4b0f      	ldr	r3, [pc, #60]	; (1000e244 <at_ke_msg_send+0x5c>)
1000e208:	681b      	ldr	r3, [r3, #0]
1000e20a:	2002      	movs	r0, #2
1000e20c:	4798      	blx	r3
			pwr_arm_wakeup_req();
1000e20e:	4b0e      	ldr	r3, [pc, #56]	; (1000e248 <at_ke_msg_send+0x60>)
1000e210:	681b      	ldr	r3, [r3, #0]
1000e212:	4798      	blx	r3
			while (pwr_wait_BLE_out_of_reset(3));
1000e214:	4c0d      	ldr	r4, [pc, #52]	; (1000e24c <at_ke_msg_send+0x64>)
1000e216:	2003      	movs	r0, #3
1000e218:	6823      	ldr	r3, [r4, #0]
1000e21a:	4798      	blx	r3
1000e21c:	2800      	cmp	r0, #0
1000e21e:	d1fa      	bne.n	1000e216 <at_ke_msg_send+0x2e>
			pwr_disable_arm_wakeup(1<<1);
1000e220:	4b0b      	ldr	r3, [pc, #44]	; (1000e250 <at_ke_msg_send+0x68>)
1000e222:	681b      	ldr	r3, [r3, #0]
1000e224:	3002      	adds	r0, #2
1000e226:	4798      	blx	r3
			REG_PL_WR(0x4000B020, 1);
1000e228:	2201      	movs	r2, #1
1000e22a:	4b0a      	ldr	r3, [pc, #40]	; (1000e254 <at_ke_msg_send+0x6c>)
1000e22c:	601a      	str	r2, [r3, #0]
1000e22e:	e004      	b.n	1000e23a <at_ke_msg_send+0x52>
#endif	//CHIPVERSION_B0
		}
		else
		{
			/*  */
			os_sem_up(gstrFwSem);
1000e230:	4b09      	ldr	r3, [pc, #36]	; (1000e258 <at_ke_msg_send+0x70>)
1000e232:	6818      	ldr	r0, [r3, #0]
1000e234:	4b09      	ldr	r3, [pc, #36]	; (1000e25c <at_ke_msg_send+0x74>)
1000e236:	681b      	ldr	r3, [r3, #0]
1000e238:	4798      	blx	r3
		}
	}
}
1000e23a:	bd70      	pop	{r4, r5, r6, pc}
1000e23c:	4000b1ec 	.word	0x4000b1ec
1000e240:	1001a320 	.word	0x1001a320
1000e244:	1001a318 	.word	0x1001a318
1000e248:	1001a32c 	.word	0x1001a32c
1000e24c:	1001a300 	.word	0x1001a300
1000e250:	1001a308 	.word	0x1001a308
1000e254:	4000b020 	.word	0x4000b020
1000e258:	1001a30c 	.word	0x1001a30c
1000e25c:	1001a2fc 	.word	0x1001a2fc

1000e260 <samb11_plf_resume_callback>:
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
	return status;
}

void samb11_plf_resume_callback(void)
{
1000e260:	b510      	push	{r4, lr}
	//spi_flash_turn_off();
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,default_samb11_clock_init[0]);
1000e262:	4b06      	ldr	r3, [pc, #24]	; (1000e27c <samb11_plf_resume_callback+0x1c>)
1000e264:	4a06      	ldr	r2, [pc, #24]	; (1000e280 <samb11_plf_resume_callback+0x20>)
1000e266:	6819      	ldr	r1, [r3, #0]
1000e268:	6011      	str	r1, [r2, #0]
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,default_samb11_clock_init[1]);
1000e26a:	685a      	ldr	r2, [r3, #4]
1000e26c:	4b05      	ldr	r3, [pc, #20]	; (1000e284 <samb11_plf_resume_callback+0x24>)
1000e26e:	601a      	str	r2, [r3, #0]
	if(samb11_app_resume_cb != NULL)
1000e270:	4b05      	ldr	r3, [pc, #20]	; (1000e288 <samb11_plf_resume_callback+0x28>)
1000e272:	681b      	ldr	r3, [r3, #0]
1000e274:	2b00      	cmp	r3, #0
1000e276:	d000      	beq.n	1000e27a <samb11_plf_resume_callback+0x1a>
	{
		samb11_app_resume_cb();
1000e278:	4798      	blx	r3
	}
}
1000e27a:	bd10      	pop	{r4, pc}
1000e27c:	1001afb8 	.word	0x1001afb8
1000e280:	4000b00c 	.word	0x4000b00c
1000e284:	4000b010 	.word	0x4000b010
1000e288:	1001b294 	.word	0x1001b294

1000e28c <init_port_list>:
port port_list[LPGPIO_MAX];
uint32_t default_samb11_clock_init[2];
void samb11_plf_resume_callback(void);

void init_port_list(void)
{
1000e28c:	b570      	push	{r4, r5, r6, lr}
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
1000e28e:	2232      	movs	r2, #50	; 0x32
1000e290:	2100      	movs	r1, #0
1000e292:	480d      	ldr	r0, [pc, #52]	; (1000e2c8 <init_port_list+0x3c>)
1000e294:	4b0d      	ldr	r3, [pc, #52]	; (1000e2cc <init_port_list+0x40>)
1000e296:	4798      	blx	r3
1000e298:	2100      	movs	r1, #0
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000e29a:	480b      	ldr	r0, [pc, #44]	; (1000e2c8 <init_port_list+0x3c>)
		port_list[i].bit.available = 1;
1000e29c:	2501      	movs	r5, #1
		port_list[i].bit.configured = 0;
1000e29e:	2402      	movs	r4, #2
void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000e2a0:	004a      	lsls	r2, r1, #1
1000e2a2:	5411      	strb	r1, [r2, r0]
		port_list[i].bit.available = 1;
1000e2a4:	1882      	adds	r2, r0, r2
1000e2a6:	7853      	ldrb	r3, [r2, #1]
1000e2a8:	432b      	orrs	r3, r5
		port_list[i].bit.configured = 0;
1000e2aa:	b2db      	uxtb	r3, r3
1000e2ac:	43a3      	bics	r3, r4
1000e2ae:	7053      	strb	r3, [r2, #1]
1000e2b0:	3101      	adds	r1, #1

void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
1000e2b2:	2919      	cmp	r1, #25
1000e2b4:	d1f4      	bne.n	1000e2a0 <init_port_list+0x14>
		port_list[i].bit.gpio_num = i;
		port_list[i].bit.available = 1;
		port_list[i].bit.configured = 0;
	}
	//Set the GPIO for SWD is not available
	port_list[0].bit.available = 0;
1000e2b6:	4b04      	ldr	r3, [pc, #16]	; (1000e2c8 <init_port_list+0x3c>)
1000e2b8:	785a      	ldrb	r2, [r3, #1]
1000e2ba:	3918      	subs	r1, #24
1000e2bc:	438a      	bics	r2, r1
1000e2be:	705a      	strb	r2, [r3, #1]
	port_list[1].bit.available = 0;
1000e2c0:	78da      	ldrb	r2, [r3, #3]
1000e2c2:	438a      	bics	r2, r1
1000e2c4:	70da      	strb	r2, [r3, #3]
	//GPIO 14 is used for Coex and controlled by Firmware
	//port_list[14].bit.available = 0;
}
1000e2c6:	bd70      	pop	{r4, r5, r6, pc}
1000e2c8:	1001afd4 	.word	0x1001afd4
1000e2cc:	100165d9 	.word	0x100165d9

1000e2d0 <init_clock>:

void init_clock(void)
{
	uint32_t regval;
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0);
1000e2d0:	4a06      	ldr	r2, [pc, #24]	; (1000e2ec <init_clock+0x1c>)
1000e2d2:	6811      	ldr	r1, [r2, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_1_CLK_EN);
	//disable UART core & interface clocks
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_IF_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN);
1000e2d4:	4b06      	ldr	r3, [pc, #24]	; (1000e2f0 <init_clock+0x20>)
1000e2d6:	400b      	ands	r3, r1
	//disable I2C core 1 clocks
	//regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C1_CORE_CLK_EN);		//do not disable I2C because I2C driver in ASF will not enable.
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,regval);
1000e2d8:	6013      	str	r3, [r2, #0]
	default_samb11_clock_init[0] = regval;
1000e2da:	4a06      	ldr	r2, [pc, #24]	; (1000e2f4 <init_clock+0x24>)
1000e2dc:	6013      	str	r3, [r2, #0]
	
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1);
1000e2de:	4906      	ldr	r1, [pc, #24]	; (1000e2f8 <init_clock+0x28>)
1000e2e0:	6808      	ldr	r0, [r1, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_4_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_5_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_6_CLK_EN);
	//disable SPI SCK Phase int clock 
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN);
1000e2e2:	4b06      	ldr	r3, [pc, #24]	; (1000e2fc <init_clock+0x2c>)
1000e2e4:	4003      	ands	r3, r0
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,regval);
1000e2e6:	600b      	str	r3, [r1, #0]
	default_samb11_clock_init[1] = regval;
1000e2e8:	6053      	str	r3, [r2, #4]
	//ARM debugger
	
	//store default values
}
1000e2ea:	4770      	bx	lr
1000e2ec:	4000b00c 	.word	0x4000b00c
1000e2f0:	fffe0fd3 	.word	0xfffe0fd3
1000e2f4:	1001afb8 	.word	0x1001afb8
1000e2f8:	4000b010 	.word	0x4000b010
1000e2fc:	ffffe7c0 	.word	0xffffe7c0

1000e300 <platform_driver_init>:

plf_drv_status platform_driver_init()
{
1000e300:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e302:	4657      	mov	r7, sl
1000e304:	464e      	mov	r6, r9
1000e306:	4645      	mov	r5, r8
1000e308:	b4e0      	push	{r5, r6, r7}
	plf_drv_status status = STATUS_NOT_INITIALIZED;
	if((platform_initialized == 0) || (platform_initialized != 1)) {
1000e30a:	4b4f      	ldr	r3, [pc, #316]	; (1000e448 <platform_driver_init+0x148>)
1000e30c:	781b      	ldrb	r3, [r3, #0]
1000e30e:	2b00      	cmp	r3, #0
1000e310:	d004      	beq.n	1000e31c <platform_driver_init+0x1c>
1000e312:	4b4d      	ldr	r3, [pc, #308]	; (1000e448 <platform_driver_init+0x148>)
1000e314:	781b      	ldrb	r3, [r3, #0]
1000e316:	2b01      	cmp	r3, #1
1000e318:	d100      	bne.n	1000e31c <platform_driver_init+0x1c>
1000e31a:	e08c      	b.n	1000e436 <platform_driver_init+0x136>
		init_port_list();
1000e31c:	4b4b      	ldr	r3, [pc, #300]	; (1000e44c <platform_driver_init+0x14c>)
1000e31e:	4798      	blx	r3
		init_clock();
1000e320:	4b4b      	ldr	r3, [pc, #300]	; (1000e450 <platform_driver_init+0x150>)
1000e322:	4798      	blx	r3
		// Initialize the ble stack message handler to NULL
		ble_stack_message_handler = NULL;
1000e324:	2300      	movs	r3, #0
1000e326:	4698      	mov	r8, r3
1000e328:	4b4a      	ldr	r3, [pc, #296]	; (1000e454 <platform_driver_init+0x154>)
1000e32a:	4642      	mov	r2, r8
1000e32c:	601a      	str	r2, [r3, #0]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000e32e:	4c4a      	ldr	r4, [pc, #296]	; (1000e458 <platform_driver_init+0x158>)
1000e330:	2380      	movs	r3, #128	; 0x80
1000e332:	2280      	movs	r2, #128	; 0x80
1000e334:	0412      	lsls	r2, r2, #16
1000e336:	4692      	mov	sl, r2
1000e338:	50e2      	str	r2, [r4, r3]
1000e33a:	2280      	movs	r2, #128	; 0x80
1000e33c:	0452      	lsls	r2, r2, #17
1000e33e:	4691      	mov	r9, r2
1000e340:	50e2      	str	r2, [r4, r3]
#ifdef CHIPVERSION_B0
		NVIC_DisableIRQ(GPIO0_IRQn);
		NVIC_DisableIRQ(GPIO1_IRQn);
		/* NVIC_DisableIRQ(PORT0_COMB_IRQn); */
		/* NVIC_DisableIRQ(PORT1_COMB_IRQn); */
		platform_register_isr = (uint8_t (*)(uint8_t ,void *))0x000007d7;
1000e342:	4d46      	ldr	r5, [pc, #280]	; (1000e45c <platform_driver_init+0x15c>)
1000e344:	4b46      	ldr	r3, [pc, #280]	; (1000e460 <platform_driver_init+0x160>)
1000e346:	602b      	str	r3, [r5, #0]
		platform_unregister_isr = (uint8_t (*)(uint8_t ))0x000007bd;
1000e348:	4b46      	ldr	r3, [pc, #280]	; (1000e464 <platform_driver_init+0x164>)
1000e34a:	4a47      	ldr	r2, [pc, #284]	; (1000e468 <platform_driver_init+0x168>)
1000e34c:	6013      	str	r3, [r2, #0]
		handle_ext_wakeup_isr = (void (*)(void))0x1bc51;
1000e34e:	4947      	ldr	r1, [pc, #284]	; (1000e46c <platform_driver_init+0x16c>)
1000e350:	4a47      	ldr	r2, [pc, #284]	; (1000e470 <platform_driver_init+0x170>)
1000e352:	6011      	str	r1, [r2, #0]
		gapm_get_task_from_id = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400bc));
1000e354:	4a47      	ldr	r2, [pc, #284]	; (1000e474 <platform_driver_init+0x174>)
1000e356:	6811      	ldr	r1, [r2, #0]
1000e358:	4a47      	ldr	r2, [pc, #284]	; (1000e478 <platform_driver_init+0x178>)
1000e35a:	6011      	str	r1, [r2, #0]
		gapm_get_id_from_task = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400b8));
1000e35c:	4a47      	ldr	r2, [pc, #284]	; (1000e47c <platform_driver_init+0x17c>)
1000e35e:	6811      	ldr	r1, [r2, #0]
1000e360:	4a47      	ldr	r2, [pc, #284]	; (1000e480 <platform_driver_init+0x180>)
1000e362:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_set = (void (*)(uint16_t))0x0001b99f;
1000e364:	4947      	ldr	r1, [pc, #284]	; (1000e484 <platform_driver_init+0x184>)
1000e366:	4a48      	ldr	r2, [pc, #288]	; (1000e488 <platform_driver_init+0x188>)
1000e368:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_clear = (void (*)(uint16_t))0x0001b9db;
1000e36a:	4948      	ldr	r1, [pc, #288]	; (1000e48c <platform_driver_init+0x18c>)
1000e36c:	4a48      	ldr	r2, [pc, #288]	; (1000e490 <platform_driver_init+0x190>)
1000e36e:	6011      	str	r1, [r2, #0]
		apps_resume_cb = (uint32_t *)0x1004003c;
1000e370:	4f48      	ldr	r7, [pc, #288]	; (1000e494 <platform_driver_init+0x194>)
1000e372:	4a49      	ldr	r2, [pc, #292]	; (1000e498 <platform_driver_init+0x198>)
1000e374:	603a      	str	r2, [r7, #0]
		actualfreq = (uint32_t *)0x10041FC0; /* set to NULL for now as clock calibration is disabled for the time being */  /*(uint32_t *)0x10006bd8;*/
1000e376:	4949      	ldr	r1, [pc, #292]	; (1000e49c <platform_driver_init+0x19c>)
1000e378:	4a49      	ldr	r2, [pc, #292]	; (1000e4a0 <platform_driver_init+0x1a0>)
1000e37a:	6011      	str	r1, [r2, #0]
		updateuartbr_fp = (void (*)())0x10041FC4;
1000e37c:	4949      	ldr	r1, [pc, #292]	; (1000e4a4 <platform_driver_init+0x1a4>)
1000e37e:	4a4a      	ldr	r2, [pc, #296]	; (1000e4a8 <platform_driver_init+0x1a8>)
1000e380:	6011      	str	r1, [r2, #0]
		wakeup_source_active_cb = (uint32_t *)0x10041FD4;
1000e382:	4e4a      	ldr	r6, [pc, #296]	; (1000e4ac <platform_driver_init+0x1ac>)
1000e384:	4a4a      	ldr	r2, [pc, #296]	; (1000e4b0 <platform_driver_init+0x1b0>)
1000e386:	6032      	str	r2, [r6, #0]
		wakeup_event_pending = (uint32_t *)0x10041FD8;
1000e388:	494a      	ldr	r1, [pc, #296]	; (1000e4b4 <platform_driver_init+0x1b4>)
1000e38a:	4a4b      	ldr	r2, [pc, #300]	; (1000e4b8 <platform_driver_init+0x1b8>)
1000e38c:	6011      	str	r1, [r2, #0]
		/* power APIs */
		pwr_enable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cbe9;
1000e38e:	494b      	ldr	r1, [pc, #300]	; (1000e4bc <platform_driver_init+0x1bc>)
1000e390:	4a4b      	ldr	r2, [pc, #300]	; (1000e4c0 <platform_driver_init+0x1c0>)
1000e392:	6011      	str	r1, [r2, #0]
		pwr_disable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cd8f;
1000e394:	494b      	ldr	r1, [pc, #300]	; (1000e4c4 <platform_driver_init+0x1c4>)
1000e396:	4a4c      	ldr	r2, [pc, #304]	; (1000e4c8 <platform_driver_init+0x1c8>)
1000e398:	6011      	str	r1, [r2, #0]
		pwr_arm_wakeup_req = (int (*)(void))0x0001cea3;
1000e39a:	494c      	ldr	r1, [pc, #304]	; (1000e4cc <platform_driver_init+0x1cc>)
1000e39c:	4a4c      	ldr	r2, [pc, #304]	; (1000e4d0 <platform_driver_init+0x1d0>)
1000e39e:	6011      	str	r1, [r2, #0]
		pwr_wait_BLE_out_of_reset = (int (*)(uint32_t threshold))0x0001cbcf;
1000e3a0:	494c      	ldr	r1, [pc, #304]	; (1000e4d4 <platform_driver_init+0x1d4>)
1000e3a2:	4a4d      	ldr	r2, [pc, #308]	; (1000e4d8 <platform_driver_init+0x1d8>)
1000e3a4:	6011      	str	r1, [r2, #0]
		NVIC_DisableIRQ(PORT1_ALL_IRQn);
		platform_register_isr = register_isr;
		platform_unregister_isr = unregister_isr;
		handle_ext_wakeup_isr = (void (*)(void))0x14085;
#endif
		platform_unregister_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX);
1000e3a6:	2028      	movs	r0, #40	; 0x28
1000e3a8:	4798      	blx	r3
		platform_register_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX,(void*)PORT1_COMB_Handler);
1000e3aa:	494c      	ldr	r1, [pc, #304]	; (1000e4dc <platform_driver_init+0x1dc>)
1000e3ac:	2028      	movs	r0, #40	; 0x28
1000e3ae:	682b      	ldr	r3, [r5, #0]
1000e3b0:	4798      	blx	r3
		platform_register_isr(GPIO0_COMBINED_VECTOR_TABLE_INDEX,(void*)gpio0_combined_isr_handler);
1000e3b2:	682b      	ldr	r3, [r5, #0]
1000e3b4:	494a      	ldr	r1, [pc, #296]	; (1000e4e0 <platform_driver_init+0x1e0>)
1000e3b6:	2027      	movs	r0, #39	; 0x27
1000e3b8:	4798      	blx	r3
		//gstrFwSem               = (void *)0x100004e4;
		//NMI_MsgQueueRecv = (int (*)(void *, void ** )) 0x00017f67;
		//InternalAppMsgQHandle = (void *)0x10001158;
		//ke_free = (void (*)(void *)) 0x00015e3d;
#elif CHIPVERSION_B0
		ke_msg_send 	= (void (*)(void const *))(*((unsigned int *)0x100400e4));
1000e3ba:	4b4a      	ldr	r3, [pc, #296]	; (1000e4e4 <platform_driver_init+0x1e4>)
1000e3bc:	681a      	ldr	r2, [r3, #0]
1000e3be:	4b4a      	ldr	r3, [pc, #296]	; (1000e4e8 <platform_driver_init+0x1e8>)
1000e3c0:	601a      	str	r2, [r3, #0]
		ke_msg_alloc 	= (void* (*)(ke_msg_id_t const id, ke_task_id_t const dest_id,
1000e3c2:	4a4a      	ldr	r2, [pc, #296]	; (1000e4ec <platform_driver_init+0x1ec>)
1000e3c4:	4b4a      	ldr	r3, [pc, #296]	; (1000e4f0 <platform_driver_init+0x1f0>)
1000e3c6:	601a      	str	r2, [r3, #0]
										ke_task_id_t const src_id, uint16_t const param_len) )0x00019fe9;
		os_sem_up 		= (int (*)(void*))0x0001dbdd;
1000e3c8:	4a4a      	ldr	r2, [pc, #296]	; (1000e4f4 <platform_driver_init+0x1f4>)
1000e3ca:	4b4b      	ldr	r3, [pc, #300]	; (1000e4f8 <platform_driver_init+0x1f8>)
1000e3cc:	601a      	str	r2, [r3, #0]
		os_sem_down		= (int (*)(void*))0x0001dc5b;
1000e3ce:	4a4b      	ldr	r2, [pc, #300]	; (1000e4fc <platform_driver_init+0x1fc>)
1000e3d0:	4b4b      	ldr	r3, [pc, #300]	; (1000e500 <platform_driver_init+0x200>)
1000e3d2:	601a      	str	r2, [r3, #0]
		gstrFwSem 		= (void*)0x100405ec;
1000e3d4:	4a4b      	ldr	r2, [pc, #300]	; (1000e504 <platform_driver_init+0x204>)
1000e3d6:	4b4c      	ldr	r3, [pc, #304]	; (1000e508 <platform_driver_init+0x208>)
1000e3d8:	601a      	str	r2, [r3, #0]
		NMI_MsgQueueRecv = (int(*)(void*, void ** ))0x0001d5e3;
1000e3da:	4a4c      	ldr	r2, [pc, #304]	; (1000e50c <platform_driver_init+0x20c>)
1000e3dc:	4b4c      	ldr	r3, [pc, #304]	; (1000e510 <platform_driver_init+0x210>)
1000e3de:	601a      	str	r2, [r3, #0]
		InternalAppMsgQHandle = (void*)0x10040c20;
1000e3e0:	4a4c      	ldr	r2, [pc, #304]	; (1000e514 <platform_driver_init+0x214>)
1000e3e2:	4b4d      	ldr	r3, [pc, #308]	; (1000e518 <platform_driver_init+0x218>)
1000e3e4:	601a      	str	r2, [r3, #0]
		ke_free = (void(*)(void*))0x00019f09;
1000e3e6:	4a4d      	ldr	r2, [pc, #308]	; (1000e51c <platform_driver_init+0x21c>)
1000e3e8:	4b4d      	ldr	r3, [pc, #308]	; (1000e520 <platform_driver_init+0x220>)
1000e3ea:	601a      	str	r2, [r3, #0]
#endif
		memset(rx_buffer,0,sizeof(rx_buffer));
1000e3ec:	22a0      	movs	r2, #160	; 0xa0
1000e3ee:	0092      	lsls	r2, r2, #2
1000e3f0:	2100      	movs	r1, #0
1000e3f2:	484c      	ldr	r0, [pc, #304]	; (1000e524 <platform_driver_init+0x224>)
1000e3f4:	4b4c      	ldr	r3, [pc, #304]	; (1000e528 <platform_driver_init+0x228>)
1000e3f6:	4798      	blx	r3
		plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000e3f8:	2280      	movs	r2, #128	; 0x80
1000e3fa:	0092      	lsls	r2, r2, #2
1000e3fc:	4b4b      	ldr	r3, [pc, #300]	; (1000e52c <platform_driver_init+0x22c>)
1000e3fe:	801a      	strh	r2, [r3, #0]
		platform_event_init();
1000e400:	4b4b      	ldr	r3, [pc, #300]	; (1000e530 <platform_driver_init+0x230>)
1000e402:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000e404:	4653      	mov	r3, sl
1000e406:	6023      	str	r3, [r4, #0]
1000e408:	464b      	mov	r3, r9
1000e40a:	6023      	str	r3, [r4, #0]
		
#ifndef CHIPVERSION_B0		
		// spi_flash clock fix.
		spi_flash_clock_init();
#endif
		samb11_app_resume_cb = NULL;
1000e40c:	4b49      	ldr	r3, [pc, #292]	; (1000e534 <platform_driver_init+0x234>)
1000e40e:	4642      	mov	r2, r8
1000e410:	601a      	str	r2, [r3, #0]
		*apps_resume_cb = (uint32_t)((resume_callback)samb11_plf_resume_callback);
1000e412:	683b      	ldr	r3, [r7, #0]
1000e414:	4a48      	ldr	r2, [pc, #288]	; (1000e538 <platform_driver_init+0x238>)
1000e416:	601a      	str	r2, [r3, #0]
		*wakeup_source_active_cb = (uint32_t)((wakeup_source_active_callback)wakeup_active_event_callback);
1000e418:	6833      	ldr	r3, [r6, #0]
1000e41a:	4a48      	ldr	r2, [pc, #288]	; (1000e53c <platform_driver_init+0x23c>)
1000e41c:	601a      	str	r2, [r3, #0]
		wakeup_int_unregister_callback(0);
1000e41e:	2000      	movs	r0, #0
1000e420:	4c47      	ldr	r4, [pc, #284]	; (1000e540 <platform_driver_init+0x240>)
1000e422:	47a0      	blx	r4
		wakeup_int_unregister_callback(1);
1000e424:	2001      	movs	r0, #1
1000e426:	47a0      	blx	r4
		wakeup_int_unregister_callback(2);
1000e428:	2002      	movs	r0, #2
1000e42a:	47a0      	blx	r4
		platform_initialized = 1;
1000e42c:	2201      	movs	r2, #1
1000e42e:	4b06      	ldr	r3, [pc, #24]	; (1000e448 <platform_driver_init+0x148>)
1000e430:	701a      	strb	r2, [r3, #0]
		status = STATUS_SUCCESS;
1000e432:	2000      	movs	r0, #0
1000e434:	e003      	b.n	1000e43e <platform_driver_init+0x13e>
	}
	else {
		platform_initialized = 1;
1000e436:	2201      	movs	r2, #1
1000e438:	4b03      	ldr	r3, [pc, #12]	; (1000e448 <platform_driver_init+0x148>)
1000e43a:	701a      	strb	r2, [r3, #0]
		status = STATUS_ALREADY_INITIALIZED;
1000e43c:	2001      	movs	r0, #1
	}
	return status;
}
1000e43e:	bc1c      	pop	{r2, r3, r4}
1000e440:	4690      	mov	r8, r2
1000e442:	4699      	mov	r9, r3
1000e444:	46a2      	mov	sl, r4
1000e446:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e448:	1001a304 	.word	0x1001a304
1000e44c:	1000e28d 	.word	0x1000e28d
1000e450:	1000e2d1 	.word	0x1000e2d1
1000e454:	1001a324 	.word	0x1001a324
1000e458:	e000e100 	.word	0xe000e100
1000e45c:	1001b288 	.word	0x1001b288
1000e460:	000007d7 	.word	0x000007d7
1000e464:	000007bd 	.word	0x000007bd
1000e468:	1001afc4 	.word	0x1001afc4
1000e46c:	0001bc51 	.word	0x0001bc51
1000e470:	1001b28c 	.word	0x1001b28c
1000e474:	100400bc 	.word	0x100400bc
1000e478:	1001a2f8 	.word	0x1001a2f8
1000e47c:	100400b8 	.word	0x100400b8
1000e480:	1001a2f4 	.word	0x1001a2f4
1000e484:	0001b99f 	.word	0x0001b99f
1000e488:	1001afc0 	.word	0x1001afc0
1000e48c:	0001b9db 	.word	0x0001b9db
1000e490:	1001afcc 	.word	0x1001afcc
1000e494:	1001b29c 	.word	0x1001b29c
1000e498:	1004003c 	.word	0x1004003c
1000e49c:	10041fc0 	.word	0x10041fc0
1000e4a0:	1001afd0 	.word	0x1001afd0
1000e4a4:	10041fc4 	.word	0x10041fc4
1000e4a8:	1001b298 	.word	0x1001b298
1000e4ac:	1001b290 	.word	0x1001b290
1000e4b0:	10041fd4 	.word	0x10041fd4
1000e4b4:	10041fd8 	.word	0x10041fd8
1000e4b8:	1001afc8 	.word	0x1001afc8
1000e4bc:	0001cbe9 	.word	0x0001cbe9
1000e4c0:	1001a318 	.word	0x1001a318
1000e4c4:	0001cd8f 	.word	0x0001cd8f
1000e4c8:	1001a308 	.word	0x1001a308
1000e4cc:	0001cea3 	.word	0x0001cea3
1000e4d0:	1001a32c 	.word	0x1001a32c
1000e4d4:	0001cbcf 	.word	0x0001cbcf
1000e4d8:	1001a300 	.word	0x1001a300
1000e4dc:	1000e989 	.word	0x1000e989
1000e4e0:	1000e91d 	.word	0x1000e91d
1000e4e4:	100400e4 	.word	0x100400e4
1000e4e8:	1001a320 	.word	0x1001a320
1000e4ec:	00019fe9 	.word	0x00019fe9
1000e4f0:	1001a330 	.word	0x1001a330
1000e4f4:	0001dbdd 	.word	0x0001dbdd
1000e4f8:	1001a2fc 	.word	0x1001a2fc
1000e4fc:	0001dc5b 	.word	0x0001dc5b
1000e500:	1001a310 	.word	0x1001a310
1000e504:	100405ec 	.word	0x100405ec
1000e508:	1001a30c 	.word	0x1001a30c
1000e50c:	0001d5e3 	.word	0x0001d5e3
1000e510:	1001a31c 	.word	0x1001a31c
1000e514:	10040c20 	.word	0x10040c20
1000e518:	1001a334 	.word	0x1001a334
1000e51c:	00019f09 	.word	0x00019f09
1000e520:	1001a2f0 	.word	0x1001a2f0
1000e524:	1001b008 	.word	0x1001b008
1000e528:	100165d9 	.word	0x100165d9
1000e52c:	1001b2a0 	.word	0x1001b2a0
1000e530:	1000e1b9 	.word	0x1000e1b9
1000e534:	1001b294 	.word	0x1001b294
1000e538:	1000e261 	.word	0x1000e261
1000e53c:	1000e9e5 	.word	0x1000e9e5
1000e540:	1000e9cd 	.word	0x1000e9cd

1000e544 <platform_register_ble_msg_handler>:


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000e544:	4b04      	ldr	r3, [pc, #16]	; (1000e558 <platform_register_ble_msg_handler+0x14>)
1000e546:	781a      	ldrb	r2, [r3, #0]
		ble_stack_message_handler = fp;
		status = STATUS_SUCCESS;
	}
	else {
		status = STATUS_NOT_INITIALIZED;
1000e548:	2305      	movs	r3, #5


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000e54a:	2a01      	cmp	r2, #1
1000e54c:	d102      	bne.n	1000e554 <platform_register_ble_msg_handler+0x10>
		ble_stack_message_handler = fp;
1000e54e:	4b03      	ldr	r3, [pc, #12]	; (1000e55c <platform_register_ble_msg_handler+0x18>)
1000e550:	6018      	str	r0, [r3, #0]
		status = STATUS_SUCCESS;
1000e552:	2300      	movs	r3, #0
	}
	else {
		status = STATUS_NOT_INITIALIZED;
	}
	return status;
}
1000e554:	0018      	movs	r0, r3
1000e556:	4770      	bx	lr
1000e558:	1001a304 	.word	0x1001a304
1000e55c:	1001a324 	.word	0x1001a324

1000e560 <platform_interface_send>:


//Sends a message through RW kernel messaging API
//struct ke_msg * p_msg;
void platform_interface_send(uint8_t* data, uint32_t len)
{
1000e560:	b570      	push	{r4, r5, r6, lr}
1000e562:	0004      	movs	r4, r0
	void* params;
	
	#if (CHIPVERSION_B0)
	ke_task_id_t dest_id;
	dest_id = p_msg_hdr->dest_id;
	if(gapm_get_task_from_id != NULL)
1000e564:	4b0e      	ldr	r3, [pc, #56]	; (1000e5a0 <platform_interface_send+0x40>)
1000e566:	681b      	ldr	r3, [r3, #0]
1000e568:	2b00      	cmp	r3, #0
1000e56a:	d002      	beq.n	1000e572 <platform_interface_send+0x12>
		p_msg_hdr->dest_id = gapm_get_task_from_id(dest_id);
1000e56c:	8840      	ldrh	r0, [r0, #2]
1000e56e:	4798      	blx	r3
1000e570:	8060      	strh	r0, [r4, #2]
	#endif	//CHIPVERSION_B0
	// Allocate the kernel message
	params = ke_msg_alloc(p_msg_hdr->id, p_msg_hdr->dest_id, p_msg_hdr->src_id, p_msg_hdr->param_len);
1000e572:	88e3      	ldrh	r3, [r4, #6]
1000e574:	88a2      	ldrh	r2, [r4, #4]
1000e576:	8861      	ldrh	r1, [r4, #2]
1000e578:	8820      	ldrh	r0, [r4, #0]
1000e57a:	4d0a      	ldr	r5, [pc, #40]	; (1000e5a4 <platform_interface_send+0x44>)
1000e57c:	682d      	ldr	r5, [r5, #0]
1000e57e:	47a8      	blx	r5
1000e580:	0005      	movs	r5, r0
											
	//no params
	if (p_msg_hdr->param_len == 0)
1000e582:	88e2      	ldrh	r2, [r4, #6]
1000e584:	2a00      	cmp	r2, #0
1000e586:	d102      	bne.n	1000e58e <platform_interface_send+0x2e>
	{
		// Send message directly
		at_ke_msg_send(params);
1000e588:	4b07      	ldr	r3, [pc, #28]	; (1000e5a8 <platform_interface_send+0x48>)
1000e58a:	4798      	blx	r3
1000e58c:	e006      	b.n	1000e59c <platform_interface_send+0x3c>
	}
	else
	{
		//copy params
		memcpy(params,&(data[KE_MSG_HDR_LENGTH]),p_msg_hdr->param_len);
1000e58e:	0021      	movs	r1, r4
1000e590:	3108      	adds	r1, #8
1000e592:	4b06      	ldr	r3, [pc, #24]	; (1000e5ac <platform_interface_send+0x4c>)
1000e594:	4798      	blx	r3
		// Send the kernel message
		at_ke_msg_send(params);
1000e596:	0028      	movs	r0, r5
1000e598:	4b03      	ldr	r3, [pc, #12]	; (1000e5a8 <platform_interface_send+0x48>)
1000e59a:	4798      	blx	r3
	}
}
1000e59c:	bd70      	pop	{r4, r5, r6, pc}
1000e59e:	46c0      	nop			; (mov r8, r8)
1000e5a0:	1001a2f8 	.word	0x1001a2f8
1000e5a4:	1001a330 	.word	0x1001a330
1000e5a8:	1000e1e9 	.word	0x1000e1e9
1000e5ac:	100165c7 	.word	0x100165c7

1000e5b0 <send_plf_int_msg_ind>:

void send_plf_int_msg_ind(uint8_t intr_index, uint8_t callback_id, void *data, uint16_t data_len)
{
1000e5b0:	b570      	push	{r4, r5, r6, lr}
1000e5b2:	0015      	movs	r5, r2
1000e5b4:	001c      	movs	r4, r3
	void* params;
//#if (CHIPVERSION_A4)	
	//os_sem_up(gstrFwSem);
//#endif
	// Allocate the kernel message
	params = ke_msg_alloc(PERIPHERAL_INTERRUPT_EVENT, TASK_INTERNAL_APP, BUILD_INTR_SRCID(callback_id,intr_index), data_len);
1000e5b6:	020a      	lsls	r2, r1, #8
1000e5b8:	4302      	orrs	r2, r0
1000e5ba:	4b0a      	ldr	r3, [pc, #40]	; (1000e5e4 <send_plf_int_msg_ind+0x34>)
1000e5bc:	681e      	ldr	r6, [r3, #0]
1000e5be:	0023      	movs	r3, r4
1000e5c0:	2105      	movs	r1, #5
1000e5c2:	20a0      	movs	r0, #160	; 0xa0
1000e5c4:	00c0      	lsls	r0, r0, #3
1000e5c6:	47b0      	blx	r6
1000e5c8:	1e06      	subs	r6, r0, #0
											
	//no params
	if(params != NULL) {
1000e5ca:	d00a      	beq.n	1000e5e2 <send_plf_int_msg_ind+0x32>
		if((data_len != 0) && (NULL != data))
1000e5cc:	2c00      	cmp	r4, #0
1000e5ce:	d005      	beq.n	1000e5dc <send_plf_int_msg_ind+0x2c>
1000e5d0:	2d00      	cmp	r5, #0
1000e5d2:	d003      	beq.n	1000e5dc <send_plf_int_msg_ind+0x2c>
		{
			//copy params
			memcpy(params, data, data_len);
1000e5d4:	0022      	movs	r2, r4
1000e5d6:	0029      	movs	r1, r5
1000e5d8:	4b03      	ldr	r3, [pc, #12]	; (1000e5e8 <send_plf_int_msg_ind+0x38>)
1000e5da:	4798      	blx	r3
		}
		// Send the kernel message
		at_ke_msg_send(params);
1000e5dc:	0030      	movs	r0, r6
1000e5de:	4b03      	ldr	r3, [pc, #12]	; (1000e5ec <send_plf_int_msg_ind+0x3c>)
1000e5e0:	4798      	blx	r3
	}
}
1000e5e2:	bd70      	pop	{r4, r5, r6, pc}
1000e5e4:	1001a330 	.word	0x1001a330
1000e5e8:	100165c7 	.word	0x100165c7
1000e5ec:	1000e1e9 	.word	0x1000e1e9

1000e5f0 <platform_event_wait>:
//Waits on InternalAppMsgQHandle Queue
// This function won't busy wait if nothing on queue but will down the semaphore and go to a blocking state
// The OS then will move control to other higher priority tasks and will only return if these tasks finish processing AND the queue has received 
//a msg
plf_drv_status platform_event_wait(uint32_t timeout)
{
1000e5f0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e5f2:	465f      	mov	r7, fp
1000e5f4:	4656      	mov	r6, sl
1000e5f6:	464d      	mov	r5, r9
1000e5f8:	4644      	mov	r4, r8
1000e5fa:	b4f0      	push	{r4, r5, r6, r7}
1000e5fc:	b087      	sub	sp, #28
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000e5fe:	1e44      	subs	r4, r0, #1
plf_drv_status platform_event_wait(uint32_t timeout)
{
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
1000e600:	2300      	movs	r3, #0
1000e602:	4699      	mov	r9, r3
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000e604:	1ce3      	adds	r3, r4, #3
1000e606:	d81c      	bhi.n	1000e642 <platform_event_wait+0x52>
	return num_of_freed;
}

static void platform_start_event_timeout(uint32_t timeout)
{
	uint8_t msg[8+5] = {0};
1000e608:	220d      	movs	r2, #13
1000e60a:	2100      	movs	r1, #0
1000e60c:	a802      	add	r0, sp, #8
1000e60e:	4b82      	ldr	r3, [pc, #520]	; (1000e818 <platform_event_wait+0x228>)
1000e610:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000e612:	2333      	movs	r3, #51	; 0x33
1000e614:	aa02      	add	r2, sp, #8
1000e616:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000e618:	3b30      	subs	r3, #48	; 0x30
1000e61a:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000e61c:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000e61e:	3302      	adds	r3, #2
1000e620:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000e622:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (((5)>>8) & 0x00FF );
	
	msg[u16TxLen++] = (uint8_t)((timeout) & 0x00FF );
1000e624:	7214      	strb	r4, [r2, #8]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 8) & 0x00FF) ;
1000e626:	0a23      	lsrs	r3, r4, #8
1000e628:	7253      	strb	r3, [r2, #9]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 16) & 0x00FF);
1000e62a:	0c23      	lsrs	r3, r4, #16
1000e62c:	7293      	strb	r3, [r2, #10]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 24) & 0x00FF);
1000e62e:	0e24      	lsrs	r4, r4, #24
1000e630:	72d4      	strb	r4, [r2, #11]
	
	msg[u16TxLen++] = ((1) & 0x00FF );
1000e632:	2301      	movs	r3, #1
1000e634:	7313      	strb	r3, [r2, #12]
	
	platform_interface_send(msg, u16TxLen);
1000e636:	210d      	movs	r1, #13
1000e638:	0010      	movs	r0, r2
1000e63a:	4b78      	ldr	r3, [pc, #480]	; (1000e81c <platform_event_wait+0x22c>)
1000e63c:	4798      	blx	r3
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
	{			
		platform_start_event_timeout(timeout-1);
		bEventTimeoutFlag = 1;
1000e63e:	2301      	movs	r3, #1
1000e640:	4699      	mov	r9, r3
1000e642:	2400      	movs	r4, #0
1000e644:	2500      	movs	r5, #0
	}

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
1000e646:	4f76      	ldr	r7, [pc, #472]	; (1000e820 <platform_event_wait+0x230>)
1000e648:	4e76      	ldr	r6, [pc, #472]	; (1000e824 <platform_event_wait+0x234>)
1000e64a:	4977      	ldr	r1, [pc, #476]	; (1000e828 <platform_event_wait+0x238>)
1000e64c:	6838      	ldr	r0, [r7, #0]
1000e64e:	6833      	ldr	r3, [r6, #0]
1000e650:	4798      	blx	r3
1000e652:	2800      	cmp	r0, #0
1000e654:	d000      	beq.n	1000e658 <platform_event_wait+0x68>
1000e656:	e088      	b.n	1000e76a <platform_event_wait+0x17a>
		{
			uint16_t msg_id = rcv_msg->id;
1000e658:	4b73      	ldr	r3, [pc, #460]	; (1000e828 <platform_event_wait+0x238>)
1000e65a:	681c      	ldr	r4, [r3, #0]
1000e65c:	88a3      	ldrh	r3, [r4, #4]
1000e65e:	469a      	mov	sl, r3
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000e660:	23cd      	movs	r3, #205	; 0xcd
1000e662:	009b      	lsls	r3, r3, #2
1000e664:	459a      	cmp	sl, r3
1000e666:	d100      	bne.n	1000e66a <platform_event_wait+0x7a>
1000e668:	e0c7      	b.n	1000e7fa <platform_event_wait+0x20a>

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
1000e66a:	8923      	ldrh	r3, [r4, #8]
1000e66c:	469b      	mov	fp, r3
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
1000e66e:	8963      	ldrh	r3, [r4, #10]
1000e670:	4698      	mov	r8, r3
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000e672:	464b      	mov	r3, r9
1000e674:	2b00      	cmp	r3, #0
1000e676:	d011      	beq.n	1000e69c <platform_event_wait+0xac>
	platform_interface_send(msg, u16TxLen);
}

static void platform_stop_event_timeout(void)
{
	uint8_t msg[8+5] = {0};
1000e678:	220d      	movs	r2, #13
1000e67a:	2100      	movs	r1, #0
1000e67c:	a802      	add	r0, sp, #8
1000e67e:	4b66      	ldr	r3, [pc, #408]	; (1000e818 <platform_event_wait+0x228>)
1000e680:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000e682:	2333      	movs	r3, #51	; 0x33
1000e684:	aa02      	add	r2, sp, #8
1000e686:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000e688:	3b30      	subs	r3, #48	; 0x30
1000e68a:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000e68c:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000e68e:	3302      	adds	r3, #2
1000e690:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000e692:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (uint8_t)(( (0) >> 16) & 0x00FF);
	msg[u16TxLen++] = (uint8_t)(( (0) >> 24) & 0x00FF);
	
	msg[u16TxLen++] = ((0) & 0x00FF );
	
	platform_interface_send(msg, u16TxLen);
1000e694:	210d      	movs	r1, #13
1000e696:	0010      	movs	r0, r2
1000e698:	4b60      	ldr	r3, [pc, #384]	; (1000e81c <platform_event_wait+0x22c>)
1000e69a:	4798      	blx	r3
			{
				//Stop timer if it is still running
				platform_stop_event_timeout();
			}
				
			if(msg_id == PERIPHERAL_INTERRUPT_EVENT)
1000e69c:	23a0      	movs	r3, #160	; 0xa0
1000e69e:	00db      	lsls	r3, r3, #3
1000e6a0:	459a      	cmp	sl, r3
1000e6a2:	d121      	bne.n	1000e6e8 <platform_event_wait+0xf8>
			{
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
1000e6a4:	4b61      	ldr	r3, [pc, #388]	; (1000e82c <platform_event_wait+0x23c>)
1000e6a6:	881b      	ldrh	r3, [r3, #0]
1000e6a8:	4443      	add	r3, r8
1000e6aa:	22a0      	movs	r2, #160	; 0xa0
1000e6ac:	0092      	lsls	r2, r2, #2
1000e6ae:	4293      	cmp	r3, r2
1000e6b0:	dd02      	ble.n	1000e6b8 <platform_event_wait+0xc8>
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000e6b2:	3a80      	subs	r2, #128	; 0x80
1000e6b4:	4b5d      	ldr	r3, [pc, #372]	; (1000e82c <platform_event_wait+0x23c>)
1000e6b6:	801a      	strh	r2, [r3, #0]
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
1000e6b8:	4b5c      	ldr	r3, [pc, #368]	; (1000e82c <platform_event_wait+0x23c>)
1000e6ba:	469a      	mov	sl, r3
1000e6bc:	881d      	ldrh	r5, [r3, #0]
1000e6be:	4b5c      	ldr	r3, [pc, #368]	; (1000e830 <platform_event_wait+0x240>)
1000e6c0:	18ed      	adds	r5, r5, r3
1000e6c2:	0021      	movs	r1, r4
1000e6c4:	310c      	adds	r1, #12
1000e6c6:	4642      	mov	r2, r8
1000e6c8:	0028      	movs	r0, r5
1000e6ca:	4b5a      	ldr	r3, [pc, #360]	; (1000e834 <platform_event_wait+0x244>)
1000e6cc:	4798      	blx	r3
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
1000e6ce:	4642      	mov	r2, r8
1000e6d0:	0029      	movs	r1, r5
1000e6d2:	4658      	mov	r0, fp
1000e6d4:	4b58      	ldr	r3, [pc, #352]	; (1000e838 <platform_event_wait+0x248>)
1000e6d6:	4798      	blx	r3
				plf_event_buff_index += len;
1000e6d8:	4653      	mov	r3, sl
1000e6da:	881b      	ldrh	r3, [r3, #0]
1000e6dc:	4443      	add	r3, r8
1000e6de:	4652      	mov	r2, sl
1000e6e0:	8013      	strh	r3, [r2, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000e6e2:	2400      	movs	r4, #0
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
				plf_event_buff_index += len;
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
1000e6e4:	2502      	movs	r5, #2
1000e6e6:	e03a      	b.n	1000e75e <platform_event_wait+0x16e>
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000e6e8:	4b54      	ldr	r3, [pc, #336]	; (1000e83c <platform_event_wait+0x24c>)
1000e6ea:	681b      	ldr	r3, [r3, #0]
1000e6ec:	2b00      	cmp	r3, #0
1000e6ee:	d032      	beq.n	1000e756 <platform_event_wait+0x166>
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
1000e6f0:	4b4d      	ldr	r3, [pc, #308]	; (1000e828 <platform_event_wait+0x238>)
1000e6f2:	681a      	ldr	r2, [r3, #0]
1000e6f4:	8893      	ldrh	r3, [r2, #4]
1000e6f6:	21cd      	movs	r1, #205	; 0xcd
1000e6f8:	0089      	lsls	r1, r1, #2
1000e6fa:	428b      	cmp	r3, r1
1000e6fc:	d104      	bne.n	1000e708 <platform_event_wait+0x118>
					{
						if(bEventTimeoutFlag)
1000e6fe:	464b      	mov	r3, r9
						{
							status = STATUS_TIMEOUT;	
						}
						else
						{
							bLoopAgain = 1;
1000e700:	2401      	movs	r4, #1
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
1000e702:	2b00      	cmp	r3, #0
1000e704:	d02b      	beq.n	1000e75e <platform_event_wait+0x16e>
1000e706:	e028      	b.n	1000e75a <platform_event_wait+0x16a>
							bLoopAgain = 1;
						}
					}
					else
					{
						ke_msg_hdr = (struct ke_msghdr *)((void *)(rx_buffer+BLE_EVENT_BUFFER_START_INDEX));
1000e708:	4c4d      	ldr	r4, [pc, #308]	; (1000e840 <platform_event_wait+0x250>)
1000e70a:	4d49      	ldr	r5, [pc, #292]	; (1000e830 <platform_event_wait+0x240>)
1000e70c:	6025      	str	r5, [r4, #0]
						ke_msg_hdr->id = rcv_msg->id;
1000e70e:	702b      	strb	r3, [r5, #0]
1000e710:	0a1b      	lsrs	r3, r3, #8
1000e712:	706b      	strb	r3, [r5, #1]
//#if (CHIPVERSION_A3 || CHIPVERSION_A4)
					//ke_msg_hdr->src_id = rcv_msg->src_id;
//#else
					ke_msg_hdr->src_id = gapm_get_id_from_task(rcv_msg->src_id);
1000e714:	8910      	ldrh	r0, [r2, #8]
1000e716:	4b4b      	ldr	r3, [pc, #300]	; (1000e844 <platform_event_wait+0x254>)
1000e718:	681b      	ldr	r3, [r3, #0]
1000e71a:	4798      	blx	r3
1000e71c:	7128      	strb	r0, [r5, #4]
1000e71e:	0a00      	lsrs	r0, r0, #8
1000e720:	7168      	strb	r0, [r5, #5]
//#endif  /* (CHIPVERSION_A3 || CHIPVERSION_A4) */
						ke_msg_hdr->dest_id = rcv_msg->dest_id;
1000e722:	6820      	ldr	r0, [r4, #0]
1000e724:	4b40      	ldr	r3, [pc, #256]	; (1000e828 <platform_event_wait+0x238>)
1000e726:	681a      	ldr	r2, [r3, #0]
1000e728:	88d2      	ldrh	r2, [r2, #6]
1000e72a:	8042      	strh	r2, [r0, #2]
						ke_msg_hdr->param_len = rcv_msg->param_len;
1000e72c:	681d      	ldr	r5, [r3, #0]
1000e72e:	896b      	ldrh	r3, [r5, #10]
1000e730:	80c3      	strh	r3, [r0, #6]
						ke_msg_hdr++;
1000e732:	3008      	adds	r0, #8
1000e734:	6020      	str	r0, [r4, #0]
						if(rcv_msg->param_len > 0) {
1000e736:	896a      	ldrh	r2, [r5, #10]
1000e738:	2a00      	cmp	r2, #0
1000e73a:	d003      	beq.n	1000e744 <platform_event_wait+0x154>
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
1000e73c:	0029      	movs	r1, r5
1000e73e:	310c      	adds	r1, #12
1000e740:	4b3c      	ldr	r3, [pc, #240]	; (1000e834 <platform_event_wait+0x244>)
1000e742:	4798      	blx	r3
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
1000e744:	8969      	ldrh	r1, [r5, #10]
1000e746:	3108      	adds	r1, #8
1000e748:	4b3c      	ldr	r3, [pc, #240]	; (1000e83c <platform_event_wait+0x24c>)
1000e74a:	681b      	ldr	r3, [r3, #0]
1000e74c:	4838      	ldr	r0, [pc, #224]	; (1000e830 <platform_event_wait+0x240>)
1000e74e:	4798      	blx	r3
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000e750:	2400      	movs	r4, #0
						ke_msg_hdr++;
						if(rcv_msg->param_len > 0) {
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
1000e752:	2503      	movs	r5, #3
1000e754:	e003      	b.n	1000e75e <platform_event_wait+0x16e>
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000e756:	2400      	movs	r4, #0
1000e758:	e001      	b.n	1000e75e <platform_event_wait+0x16e>
1000e75a:	2400      	movs	r4, #0
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
						{
							status = STATUS_TIMEOUT;	
1000e75c:	25d0      	movs	r5, #208	; 0xd0
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
					}
				}
			}
			ke_free(rcv_msg);
1000e75e:	4b32      	ldr	r3, [pc, #200]	; (1000e828 <platform_event_wait+0x238>)
1000e760:	6818      	ldr	r0, [r3, #0]
1000e762:	4b39      	ldr	r3, [pc, #228]	; (1000e848 <platform_event_wait+0x258>)
1000e764:	681b      	ldr	r3, [r3, #0]
1000e766:	4798      	blx	r3
1000e768:	e000      	b.n	1000e76c <platform_event_wait+0x17c>
		}
		else
		{
			status = STATUS_FAILURE;
1000e76a:	2507      	movs	r5, #7
		}
	}while(bLoopAgain);
1000e76c:	2c00      	cmp	r4, #0
1000e76e:	d000      	beq.n	1000e772 <platform_event_wait+0x182>
1000e770:	e76b      	b.n	1000e64a <platform_event_wait+0x5a>
	
	if(bEventTimeoutFlag)
1000e772:	464b      	mov	r3, r9
1000e774:	2b00      	cmp	r3, #0
1000e776:	d046      	beq.n	1000e806 <platform_event_wait+0x216>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
1000e778:	4b29      	ldr	r3, [pc, #164]	; (1000e820 <platform_event_wait+0x230>)
1000e77a:	681e      	ldr	r6, [r3, #0]
#endif 
static int NMI_MsgQueueDestroyOnKeID(NMI_MsgQueueHandle* pHandle, ke_msg_id_t u16KeMsgId)
{
	int num_of_freed=0;
	Message * current , *prev = NULL;
	if((NULL == pHandle) && (NULL == pHandle->pstrMessageList))
1000e77c:	2e00      	cmp	r6, #0
1000e77e:	d104      	bne.n	1000e78a <platform_event_wait+0x19a>
1000e780:	2300      	movs	r3, #0
1000e782:	6a1c      	ldr	r4, [r3, #32]
1000e784:	2c00      	cmp	r4, #0
1000e786:	d131      	bne.n	1000e7ec <platform_event_wait+0x1fc>
1000e788:	e03d      	b.n	1000e806 <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
1000e78a:	6a34      	ldr	r4, [r6, #32]
	os_sem_down(&pHandle->strCriticalSection);
1000e78c:	2314      	movs	r3, #20
1000e78e:	469c      	mov	ip, r3
1000e790:	44b4      	add	ip, r6
1000e792:	4663      	mov	r3, ip
1000e794:	4660      	mov	r0, ip
1000e796:	9300      	str	r3, [sp, #0]
1000e798:	4b2c      	ldr	r3, [pc, #176]	; (1000e84c <platform_event_wait+0x25c>)
1000e79a:	681b      	ldr	r3, [r3, #0]
1000e79c:	4798      	blx	r3
	while(NULL != current)
1000e79e:	2c00      	cmp	r4, #0
1000e7a0:	d01f      	beq.n	1000e7e2 <platform_event_wait+0x1f2>
			}
			ke_free(rcv_msg);
		}
		else
		{
			status = STATUS_FAILURE;
1000e7a2:	2700      	movs	r7, #0

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000e7a4:	23cd      	movs	r3, #205	; 0xcd
1000e7a6:	009b      	lsls	r3, r3, #2
1000e7a8:	4698      	mov	r8, r3
		{
			num_of_freed++;
			if(NULL != prev)
			{
				prev->pstrNext = current->pstrNext;
				ke_free(current);
1000e7aa:	4b27      	ldr	r3, [pc, #156]	; (1000e848 <platform_event_wait+0x258>)
1000e7ac:	469a      	mov	sl, r3
1000e7ae:	0020      	movs	r0, r4

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000e7b0:	6803      	ldr	r3, [r0, #0]
1000e7b2:	889b      	ldrh	r3, [r3, #4]
1000e7b4:	4543      	cmp	r3, r8
1000e7b6:	d110      	bne.n	1000e7da <platform_event_wait+0x1ea>
		{
			num_of_freed++;
			if(NULL != prev)
1000e7b8:	2f00      	cmp	r7, #0
1000e7ba:	d006      	beq.n	1000e7ca <platform_event_wait+0x1da>
			{
				prev->pstrNext = current->pstrNext;
1000e7bc:	6883      	ldr	r3, [r0, #8]
1000e7be:	60bb      	str	r3, [r7, #8]
				ke_free(current);
1000e7c0:	4653      	mov	r3, sl
1000e7c2:	681b      	ldr	r3, [r3, #0]
1000e7c4:	4798      	blx	r3
				current = prev->pstrNext;
1000e7c6:	68b8      	ldr	r0, [r7, #8]
1000e7c8:	e009      	b.n	1000e7de <platform_event_wait+0x1ee>
			}
			else
			{
				pHandle->pstrMessageList = current->pstrNext;
1000e7ca:	6883      	ldr	r3, [r0, #8]
1000e7cc:	6233      	str	r3, [r6, #32]
				ke_free(current);
1000e7ce:	4b1e      	ldr	r3, [pc, #120]	; (1000e848 <platform_event_wait+0x258>)
1000e7d0:	681b      	ldr	r3, [r3, #0]
1000e7d2:	9301      	str	r3, [sp, #4]
1000e7d4:	4798      	blx	r3
				current = pHandle->pstrMessageList;
1000e7d6:	6a30      	ldr	r0, [r6, #32]
1000e7d8:	e001      	b.n	1000e7de <platform_event_wait+0x1ee>
			}
		}
		else
		{
			prev = current;
			current = current ->pstrNext;
1000e7da:	0007      	movs	r7, r0
1000e7dc:	6880      	ldr	r0, [r0, #8]
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
1000e7de:	2800      	cmp	r0, #0
1000e7e0:	d1e6      	bne.n	1000e7b0 <platform_event_wait+0x1c0>
		{
			prev = current;
			current = current ->pstrNext;
		}
	}
	os_sem_up(&pHandle->strCriticalSection);
1000e7e2:	4b1b      	ldr	r3, [pc, #108]	; (1000e850 <platform_event_wait+0x260>)
1000e7e4:	681b      	ldr	r3, [r3, #0]
1000e7e6:	9800      	ldr	r0, [sp, #0]
1000e7e8:	4798      	blx	r3
	if(bEventTimeoutFlag)
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
1000e7ea:	e00c      	b.n	1000e806 <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
1000e7ec:	2314      	movs	r3, #20
1000e7ee:	9300      	str	r3, [sp, #0]
1000e7f0:	4b16      	ldr	r3, [pc, #88]	; (1000e84c <platform_event_wait+0x25c>)
1000e7f2:	681b      	ldr	r3, [r3, #0]
1000e7f4:	2014      	movs	r0, #20
1000e7f6:	4798      	blx	r3
1000e7f8:	e7d3      	b.n	1000e7a2 <platform_event_wait+0x1b2>
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000e7fa:	4b10      	ldr	r3, [pc, #64]	; (1000e83c <platform_event_wait+0x24c>)
1000e7fc:	681b      	ldr	r3, [r3, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000e7fe:	2400      	movs	r4, #0
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000e800:	2b00      	cmp	r3, #0
1000e802:	d0ac      	beq.n	1000e75e <platform_event_wait+0x16e>
1000e804:	e77b      	b.n	1000e6fe <platform_event_wait+0x10e>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
}
1000e806:	0028      	movs	r0, r5
1000e808:	b007      	add	sp, #28
1000e80a:	bc3c      	pop	{r2, r3, r4, r5}
1000e80c:	4690      	mov	r8, r2
1000e80e:	4699      	mov	r9, r3
1000e810:	46a2      	mov	sl, r4
1000e812:	46ab      	mov	fp, r5
1000e814:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e816:	46c0      	nop			; (mov r8, r8)
1000e818:	100165d9 	.word	0x100165d9
1000e81c:	1000e561 	.word	0x1000e561
1000e820:	1001a334 	.word	0x1001a334
1000e824:	1001a31c 	.word	0x1001a31c
1000e828:	1001a328 	.word	0x1001a328
1000e82c:	1001b2a0 	.word	0x1001b2a0
1000e830:	1001b008 	.word	0x1001b008
1000e834:	100165c7 	.word	0x100165c7
1000e838:	1000e181 	.word	0x1000e181
1000e83c:	1001a324 	.word	0x1001a324
1000e840:	1001a314 	.word	0x1001a314
1000e844:	1001a2f4 	.word	0x1001a2f4
1000e848:	1001a2f0 	.word	0x1001a2f0
1000e84c:	1001a310 	.word	0x1001a310
1000e850:	1001a2fc 	.word	0x1001a2fc

1000e854 <acquire_sleep_lock>:

plf_drv_status acquire_sleep_lock()
{
1000e854:	b510      	push	{r4, lr}
    //DBG_LOG_DEV("[acquire_sleep_lock]\tDisabling ULP");
	plf_drv_status status = STATUS_RESOURCE_BUSY;
	//uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
	
	rwip_prevent_sleep_set(APP_PREVENT_SLEEP);
1000e856:	4b03      	ldr	r3, [pc, #12]	; (1000e864 <acquire_sleep_lock+0x10>)
1000e858:	681b      	ldr	r3, [r3, #0]
1000e85a:	2080      	movs	r0, #128	; 0x80
1000e85c:	0200      	lsls	r0, r0, #8
1000e85e:	4798      	blx	r3
		/*  */
		os_sem_up(gstrFwSem);
	}
#endif	//0
	return status;
}
1000e860:	2008      	movs	r0, #8
1000e862:	bd10      	pop	{r4, pc}
1000e864:	1001afc0 	.word	0x1001afc0

1000e868 <release_message_lock>:

plf_drv_status release_message_lock()
{
1000e868:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000e86a:	4b03      	ldr	r3, [pc, #12]	; (1000e878 <release_message_lock+0x10>)
1000e86c:	681b      	ldr	r3, [r3, #0]
1000e86e:	2080      	movs	r0, #128	; 0x80
1000e870:	01c0      	lsls	r0, r0, #7
1000e872:	4798      	blx	r3
	return status;
}
1000e874:	2000      	movs	r0, #0
1000e876:	bd10      	pop	{r4, pc}
1000e878:	1001afcc 	.word	0x1001afcc

1000e87c <release_sleep_lock>:

plf_drv_status release_sleep_lock()
{
1000e87c:	b510      	push	{r4, lr}
    //DBG_LOG_DEV("[release_sleep_lock]\tEnabling ULP");
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000e87e:	4c05      	ldr	r4, [pc, #20]	; (1000e894 <release_sleep_lock+0x18>)
1000e880:	2080      	movs	r0, #128	; 0x80
1000e882:	01c0      	lsls	r0, r0, #7
1000e884:	6823      	ldr	r3, [r4, #0]
1000e886:	4798      	blx	r3
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
1000e888:	6823      	ldr	r3, [r4, #0]
1000e88a:	2080      	movs	r0, #128	; 0x80
1000e88c:	0200      	lsls	r0, r0, #8
1000e88e:	4798      	blx	r3
	return status;
}
1000e890:	2000      	movs	r0, #0
1000e892:	bd10      	pop	{r4, pc}
1000e894:	1001afcc 	.word	0x1001afcc

1000e898 <register_resume_callback>:
}

plf_drv_status register_resume_callback(resume_callback cb)
{
	plf_drv_status status = STATUS_SUCCESS;
	if(cb == NULL)
1000e898:	2800      	cmp	r0, #0
1000e89a:	d003      	beq.n	1000e8a4 <register_resume_callback+0xc>
	{
		status = STATUS_INVALID_ARGUMENT;
	}
	else 
	{
		samb11_app_resume_cb = cb;
1000e89c:	4b02      	ldr	r3, [pc, #8]	; (1000e8a8 <register_resume_callback+0x10>)
1000e89e:	6018      	str	r0, [r3, #0]
	}
}

plf_drv_status register_resume_callback(resume_callback cb)
{
	plf_drv_status status = STATUS_SUCCESS;
1000e8a0:	2000      	movs	r0, #0
1000e8a2:	e000      	b.n	1000e8a6 <register_resume_callback+0xe>
	if(cb == NULL)
	{
		status = STATUS_INVALID_ARGUMENT;
1000e8a4:	2009      	movs	r0, #9
	{
		samb11_app_resume_cb = cb;
		//*apps_resume_cb = (uint32_t)cb;
	}
	return status;
}
1000e8a6:	4770      	bx	lr
1000e8a8:	1001b294 	.word	0x1001b294

1000e8ac <gpio1_combined_isr_handler>:

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source);
void wakeup_active_event_callback(uint32_t wakeup_source);

void gpio1_combined_isr_handler(void)
{
1000e8ac:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio1 = LPGPIO_16;
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
1000e8ae:	4a18      	ldr	r2, [pc, #96]	; (1000e910 <gpio1_combined_isr_handler+0x64>)
1000e8b0:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000e8b2:	b29b      	uxth	r3, r3
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000e8b4:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000e8b6:	2180      	movs	r1, #128	; 0x80
1000e8b8:	0209      	lsls	r1, r1, #8
1000e8ba:	4301      	orrs	r1, r0
1000e8bc:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000e8be:	0010      	movs	r0, r2
1000e8c0:	4d14      	ldr	r5, [pc, #80]	; (1000e914 <gpio1_combined_isr_handler+0x68>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000e8c2:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000e8c4:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000e8c6:	05db      	lsls	r3, r3, #23
1000e8c8:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000e8ca:	d011      	beq.n	1000e8f0 <gpio1_combined_isr_handler+0x44>
			port_gpio1 = (intstatus & ~(intstatus - 1));
1000e8cc:	b2db      	uxtb	r3, r3
1000e8ce:	4259      	negs	r1, r3
1000e8d0:	400b      	ands	r3, r1
			while (!(port_gpio1 == 1)) {
1000e8d2:	2b01      	cmp	r3, #1
1000e8d4:	d006      	beq.n	1000e8e4 <gpio1_combined_isr_handler+0x38>
1000e8d6:	0011      	movs	r1, r2
				port_gpio1 = port_gpio1 >> 1;
1000e8d8:	085b      	lsrs	r3, r3, #1
				index++;
1000e8da:	3101      	adds	r1, #1
1000e8dc:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio1 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio1 == 1)) {
1000e8de:	2b01      	cmp	r3, #1
1000e8e0:	d1fa      	bne.n	1000e8d8 <gpio1_combined_isr_handler+0x2c>
1000e8e2:	e000      	b.n	1000e8e6 <gpio1_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000e8e4:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000e8e6:	0023      	movs	r3, r4
1000e8e8:	408b      	lsls	r3, r1
1000e8ea:	b29b      	uxth	r3, r3
1000e8ec:	8703      	strh	r3, [r0, #56]	; 0x38
1000e8ee:	e003      	b.n	1000e8f8 <gpio1_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000e8f0:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000e8f2:	432b      	orrs	r3, r5
1000e8f4:	b29b      	uxth	r3, r3
1000e8f6:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO1->INTSTATUSCLEAR.reg;
1000e8f8:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000e8fa:	05db      	lsls	r3, r3, #23
1000e8fc:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000e8fe:	d1e2      	bne.n	1000e8c6 <gpio1_combined_isr_handler+0x1a>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000e900:	2180      	movs	r1, #128	; 0x80
1000e902:	0049      	lsls	r1, r1, #1
1000e904:	3381      	adds	r3, #129	; 0x81
1000e906:	33ff      	adds	r3, #255	; 0xff
1000e908:	4a03      	ldr	r2, [pc, #12]	; (1000e918 <gpio1_combined_isr_handler+0x6c>)
1000e90a:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(8);
}
1000e90c:	bd30      	pop	{r4, r5, pc}
1000e90e:	46c0      	nop			; (mov r8, r8)
1000e910:	40011000 	.word	0x40011000
1000e914:	ffff8000 	.word	0xffff8000
1000e918:	e000e100 	.word	0xe000e100

1000e91c <gpio0_combined_isr_handler>:

void gpio0_combined_isr_handler(void)
{
1000e91c:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio0 = LPGPIO_0;
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
1000e91e:	4a17      	ldr	r2, [pc, #92]	; (1000e97c <gpio0_combined_isr_handler+0x60>)
1000e920:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000e922:	b29b      	uxth	r3, r3
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000e924:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000e926:	2180      	movs	r1, #128	; 0x80
1000e928:	0209      	lsls	r1, r1, #8
1000e92a:	4301      	orrs	r1, r0
1000e92c:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000e92e:	0010      	movs	r0, r2
1000e930:	4d13      	ldr	r5, [pc, #76]	; (1000e980 <gpio0_combined_isr_handler+0x64>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000e932:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000e934:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000e936:	05db      	lsls	r3, r3, #23
1000e938:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000e93a:	d011      	beq.n	1000e960 <gpio0_combined_isr_handler+0x44>
			port_gpio0 = (intstatus & ~(intstatus - 1));
1000e93c:	b2db      	uxtb	r3, r3
1000e93e:	4259      	negs	r1, r3
1000e940:	400b      	ands	r3, r1
			while (!(port_gpio0 == 1)) {
1000e942:	2b01      	cmp	r3, #1
1000e944:	d006      	beq.n	1000e954 <gpio0_combined_isr_handler+0x38>
1000e946:	0011      	movs	r1, r2
				port_gpio0 = port_gpio0 >> 1;
1000e948:	085b      	lsrs	r3, r3, #1
				index++;
1000e94a:	3101      	adds	r1, #1
1000e94c:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio0 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio0 == 1)) {
1000e94e:	2b01      	cmp	r3, #1
1000e950:	d1fa      	bne.n	1000e948 <gpio0_combined_isr_handler+0x2c>
1000e952:	e000      	b.n	1000e956 <gpio0_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000e954:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000e956:	0023      	movs	r3, r4
1000e958:	408b      	lsls	r3, r1
1000e95a:	b29b      	uxth	r3, r3
1000e95c:	8703      	strh	r3, [r0, #56]	; 0x38
1000e95e:	e003      	b.n	1000e968 <gpio0_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000e960:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000e962:	432b      	orrs	r3, r5
1000e964:	b29b      	uxth	r3, r3
1000e966:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO0->INTSTATUSCLEAR.reg;
1000e968:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000e96a:	05db      	lsls	r3, r3, #23
1000e96c:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000e96e:	d1e2      	bne.n	1000e936 <gpio0_combined_isr_handler+0x1a>
1000e970:	2180      	movs	r1, #128	; 0x80
1000e972:	3381      	adds	r3, #129	; 0x81
1000e974:	33ff      	adds	r3, #255	; 0xff
1000e976:	4a03      	ldr	r2, [pc, #12]	; (1000e984 <gpio0_combined_isr_handler+0x68>)
1000e978:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(7);
}
1000e97a:	bd30      	pop	{r4, r5, pc}
1000e97c:	40010000 	.word	0x40010000
1000e980:	ffff8000 	.word	0xffff8000
1000e984:	e000e100 	.word	0xe000e100

1000e988 <PORT1_COMB_Handler>:

#ifdef CHIPVERSION_B0
void PORT1_COMB_Handler(void)
{
1000e988:	b510      	push	{r4, lr}
	/* if(CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13))) { */
	if (GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13))) {
1000e98a:	4b0c      	ldr	r3, [pc, #48]	; (1000e9bc <PORT1_COMB_Handler+0x34>)
1000e98c:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
1000e98e:	0b5b      	lsrs	r3, r3, #13
1000e990:	d010      	beq.n	1000e9b4 <PORT1_COMB_Handler+0x2c>
		handle_ext_wakeup_isr();
1000e992:	4b0b      	ldr	r3, [pc, #44]	; (1000e9c0 <PORT1_COMB_Handler+0x38>)
1000e994:	681b      	ldr	r3, [r3, #0]
1000e996:	4798      	blx	r3

		/* clear specific int pin status that caused the Interrupt */
		/* CMSDK_GPIO1->INTCLEAR |= CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13)); */
		GPIO1->INTSTATUSCLEAR.reg |= GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13));
1000e998:	4a08      	ldr	r2, [pc, #32]	; (1000e9bc <PORT1_COMB_Handler+0x34>)
1000e99a:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000e99c:	8f11      	ldrh	r1, [r2, #56]	; 0x38
1000e99e:	0b5b      	lsrs	r3, r3, #13
1000e9a0:	035b      	lsls	r3, r3, #13
1000e9a2:	430b      	orrs	r3, r1
1000e9a4:	8713      	strh	r3, [r2, #56]	; 0x38
1000e9a6:	2180      	movs	r1, #128	; 0x80
1000e9a8:	0049      	lsls	r1, r1, #1
1000e9aa:	23c0      	movs	r3, #192	; 0xc0
1000e9ac:	005b      	lsls	r3, r3, #1
1000e9ae:	4a05      	ldr	r2, [pc, #20]	; (1000e9c4 <PORT1_COMB_Handler+0x3c>)
1000e9b0:	50d1      	str	r1, [r2, r3]
1000e9b2:	e001      	b.n	1000e9b8 <PORT1_COMB_Handler+0x30>
		/* NVIC_ClearPendingIRQ(PORT1_COMB_IRQn); */
		NVIC_ClearPendingIRQ(8);
	} else {
		gpio1_combined_isr_handler();
1000e9b4:	4b04      	ldr	r3, [pc, #16]	; (1000e9c8 <PORT1_COMB_Handler+0x40>)
1000e9b6:	4798      	blx	r3
	}
}
1000e9b8:	bd10      	pop	{r4, pc}
1000e9ba:	46c0      	nop			; (mov r8, r8)
1000e9bc:	40011000 	.word	0x40011000
1000e9c0:	1001b28c 	.word	0x1001b28c
1000e9c4:	e000e100 	.word	0xe000e100
1000e9c8:	1000e8ad 	.word	0x1000e8ad

1000e9cc <wakeup_int_unregister_callback>:
	{
		wakeup_source_callback[wakeup_source] = 0;
	}
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
1000e9cc:	2303      	movs	r3, #3
#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
	if(	(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_0) || 
1000e9ce:	2802      	cmp	r0, #2
1000e9d0:	d804      	bhi.n	1000e9dc <wakeup_int_unregister_callback+0x10>
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_1) || 
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_2) ) 
	{
		wakeup_source_callback[wakeup_source] = 0;
1000e9d2:	0080      	lsls	r0, r0, #2
1000e9d4:	2200      	movs	r2, #0
1000e9d6:	4b02      	ldr	r3, [pc, #8]	; (1000e9e0 <wakeup_int_unregister_callback+0x14>)
1000e9d8:	50c2      	str	r2, [r0, r3]

#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
1000e9da:	2300      	movs	r3, #0
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
	}
	return status;
}
1000e9dc:	0018      	movs	r0, r3
1000e9de:	4770      	bx	lr
1000e9e0:	1001b2a4 	.word	0x1001b2a4

1000e9e4 <wakeup_active_event_callback>:

void wakeup_active_event_callback(uint32_t wakeup_source)
{
1000e9e4:	b510      	push	{r4, lr}
1000e9e6:	0004      	movs	r4, r0
	portint_callback_t callback;
	uint32_t *pu32WakeSource = (uint32_t *)wakeup_source;
	if((*pu32WakeSource & 0xFF) == 1)
1000e9e8:	7803      	ldrb	r3, [r0, #0]
1000e9ea:	2b01      	cmp	r3, #1
1000e9ec:	d108      	bne.n	1000ea00 <wakeup_active_event_callback+0x1c>
	{
		if(wakeup_source_callback[0] != NULL) {
1000e9ee:	4b11      	ldr	r3, [pc, #68]	; (1000ea34 <wakeup_active_event_callback+0x50>)
1000e9f0:	681b      	ldr	r3, [r3, #0]
1000e9f2:	2b00      	cmp	r3, #0
1000e9f4:	d000      	beq.n	1000e9f8 <wakeup_active_event_callback+0x14>
			callback = wakeup_source_callback[0];
			callback();
1000e9f6:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF);
1000e9f8:	23ff      	movs	r3, #255	; 0xff
1000e9fa:	6822      	ldr	r2, [r4, #0]
1000e9fc:	439a      	bics	r2, r3
1000e9fe:	6022      	str	r2, [r4, #0]
	}
	if(((*pu32WakeSource >> 8) & 0xFF) == 1)
1000ea00:	7863      	ldrb	r3, [r4, #1]
1000ea02:	2b01      	cmp	r3, #1
1000ea04:	d108      	bne.n	1000ea18 <wakeup_active_event_callback+0x34>
	{
		if(wakeup_source_callback[1] != NULL) {
1000ea06:	4b0b      	ldr	r3, [pc, #44]	; (1000ea34 <wakeup_active_event_callback+0x50>)
1000ea08:	685b      	ldr	r3, [r3, #4]
1000ea0a:	2b00      	cmp	r3, #0
1000ea0c:	d000      	beq.n	1000ea10 <wakeup_active_event_callback+0x2c>
			callback = wakeup_source_callback[1];
			callback();
1000ea0e:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 8);
1000ea10:	4b09      	ldr	r3, [pc, #36]	; (1000ea38 <wakeup_active_event_callback+0x54>)
1000ea12:	6822      	ldr	r2, [r4, #0]
1000ea14:	4013      	ands	r3, r2
1000ea16:	6023      	str	r3, [r4, #0]
	}
	if(((*pu32WakeSource >> 16) & 0xFF) == 1)
1000ea18:	78a3      	ldrb	r3, [r4, #2]
1000ea1a:	2b01      	cmp	r3, #1
1000ea1c:	d108      	bne.n	1000ea30 <wakeup_active_event_callback+0x4c>
	{
		if(wakeup_source_callback[2] != NULL) {
1000ea1e:	4b05      	ldr	r3, [pc, #20]	; (1000ea34 <wakeup_active_event_callback+0x50>)
1000ea20:	689b      	ldr	r3, [r3, #8]
1000ea22:	2b00      	cmp	r3, #0
1000ea24:	d000      	beq.n	1000ea28 <wakeup_active_event_callback+0x44>
			callback = wakeup_source_callback[2];
			callback();
1000ea26:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 16);
1000ea28:	4b04      	ldr	r3, [pc, #16]	; (1000ea3c <wakeup_active_event_callback+0x58>)
1000ea2a:	6822      	ldr	r2, [r4, #0]
1000ea2c:	4013      	ands	r3, r2
1000ea2e:	6023      	str	r3, [r4, #0]
	}
}
1000ea30:	bd10      	pop	{r4, pc}
1000ea32:	46c0      	nop			; (mov r8, r8)
1000ea34:	1001b2a4 	.word	0x1001b2a4
1000ea38:	ffff00ff 	.word	0xffff00ff
1000ea3c:	ff00ffff 	.word	0xff00ffff

1000ea40 <resume_cb>:
	sms_pressure_init_variables();
}


static void resume_cb(void)
{
1000ea40:	b510      	push	{r4, lr}
	init_port_list(); // re-initialize all ports
1000ea42:	4b09      	ldr	r3, [pc, #36]	; (1000ea68 <resume_cb+0x28>)
1000ea44:	4798      	blx	r3
	serial_console_init(); // GPIO (UART) for the console
1000ea46:	4b09      	ldr	r3, [pc, #36]	; (1000ea6c <resume_cb+0x2c>)
1000ea48:	4798      	blx	r3
	sms_dualtimer_init();
1000ea4a:	4b09      	ldr	r3, [pc, #36]	; (1000ea70 <resume_cb+0x30>)
1000ea4c:	4798      	blx	r3
	sms_button_gpio_init(); // GPIO (AO_0 & AO_1) for the buttons
1000ea4e:	4b09      	ldr	r3, [pc, #36]	; (1000ea74 <resume_cb+0x34>)
1000ea50:	4798      	blx	r3
	sms_led_gpio_init();
1000ea52:	4b09      	ldr	r3, [pc, #36]	; (1000ea78 <resume_cb+0x38>)
1000ea54:	4798      	blx	r3
	sms_spi_master_configure();
1000ea56:	4b09      	ldr	r3, [pc, #36]	; (1000ea7c <resume_cb+0x3c>)
1000ea58:	4798      	blx	r3
	sms_i2c_master_configure();
1000ea5a:	4b09      	ldr	r3, [pc, #36]	; (1000ea80 <resume_cb+0x40>)
1000ea5c:	4798      	blx	r3
	sms_imu_configure_gpio();
1000ea5e:	4b09      	ldr	r3, [pc, #36]	; (1000ea84 <resume_cb+0x44>)
1000ea60:	4798      	blx	r3
	sms_monitor_configure_gpio();
1000ea62:	4b09      	ldr	r3, [pc, #36]	; (1000ea88 <resume_cb+0x48>)
1000ea64:	4798      	blx	r3
	//gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, true);
}
1000ea66:	bd10      	pop	{r4, pc}
1000ea68:	1000e28d 	.word	0x1000e28d
1000ea6c:	1000dff5 	.word	0x1000dff5
1000ea70:	1000abc5 	.word	0x1000abc5
1000ea74:	10009351 	.word	0x10009351
1000ea78:	1000a6e1 	.word	0x1000a6e1
1000ea7c:	1000aa79 	.word	0x1000aa79
1000ea80:	100096dd 	.word	0x100096dd
1000ea84:	10009871 	.word	0x10009871
1000ea88:	1000963d 	.word	0x1000963d

1000ea8c <sms_init_variables>:
*/
/*- Includes ---------------------------------------------------------------*/
#include "sms_peripheral1.h"

void sms_init_variables(void)
{
1000ea8c:	b510      	push	{r4, lr}
	timer1_current_mode = TIMER1_MODE_NONE;
1000ea8e:	2300      	movs	r3, #0
1000ea90:	4a09      	ldr	r2, [pc, #36]	; (1000eab8 <sms_init_variables+0x2c>)
1000ea92:	7013      	strb	r3, [r2, #0]
	timer2_current_mode = TIMER2_MODE_NONE;
1000ea94:	4a09      	ldr	r2, [pc, #36]	; (1000eabc <sms_init_variables+0x30>)
1000ea96:	7013      	strb	r3, [r2, #0]
	sms_working_mode = SMS_MODE_BUTTON_SOLO;
1000ea98:	2101      	movs	r1, #1
1000ea9a:	4a09      	ldr	r2, [pc, #36]	; (1000eac0 <sms_init_variables+0x34>)
1000ea9c:	7011      	strb	r1, [r2, #0]
	ulp_ready = false;
1000ea9e:	4a09      	ldr	r2, [pc, #36]	; (1000eac4 <sms_init_variables+0x38>)
1000eaa0:	7013      	strb	r3, [r2, #0]
	sms_ble_timeout = BLE_TIMEOUT_OFF;
1000eaa2:	2201      	movs	r2, #1
1000eaa4:	4252      	negs	r2, r2
1000eaa6:	4b08      	ldr	r3, [pc, #32]	; (1000eac8 <sms_init_variables+0x3c>)
1000eaa8:	601a      	str	r2, [r3, #0]
	
	sms_ble_init_variables();
1000eaaa:	4b08      	ldr	r3, [pc, #32]	; (1000eacc <sms_init_variables+0x40>)
1000eaac:	4798      	blx	r3
	sms_button_init_variables();
1000eaae:	4b08      	ldr	r3, [pc, #32]	; (1000ead0 <sms_init_variables+0x44>)
1000eab0:	4798      	blx	r3
	sms_pressure_init_variables();
1000eab2:	4b08      	ldr	r3, [pc, #32]	; (1000ead4 <sms_init_variables+0x48>)
1000eab4:	4798      	blx	r3
}
1000eab6:	bd10      	pop	{r4, pc}
1000eab8:	1001a408 	.word	0x1001a408
1000eabc:	1001a537 	.word	0x1001a537
1000eac0:	1001a410 	.word	0x1001a410
1000eac4:	1001a411 	.word	0x1001a411
1000eac8:	1001a40c 	.word	0x1001a40c
1000eacc:	10008df5 	.word	0x10008df5
1000ead0:	10009329 	.word	0x10009329
1000ead4:	1000a77d 	.word	0x1000a77d

1000ead8 <main>:
//sms_current_interrupt.int_on = true;
//}


int main(void)
{
1000ead8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Define current BLE state
	* ------------------------ */
	ble_instance.current_state = BLE_STATE_STARTING;
1000eada:	2210      	movs	r2, #16
1000eadc:	4b89      	ldr	r3, [pc, #548]	; (1000ed04 <main+0x22c>)
1000eade:	701a      	strb	r2, [r3, #0]
	
	/* Initialize platform
	* ------------------- */
	platform_driver_init();
1000eae0:	4b89      	ldr	r3, [pc, #548]	; (1000ed08 <main+0x230>)
1000eae2:	4798      	blx	r3
	gpio_init(); // GPIO
1000eae4:	4b89      	ldr	r3, [pc, #548]	; (1000ed0c <main+0x234>)
1000eae6:	4798      	blx	r3
	serial_console_init(); // serial console for debugging
1000eae8:	4b89      	ldr	r3, [pc, #548]	; (1000ed10 <main+0x238>)
1000eaea:	4798      	blx	r3
	
	/* Disable ULP
	* ----------- */
	acquire_sleep_lock();
1000eaec:	4b89      	ldr	r3, [pc, #548]	; (1000ed14 <main+0x23c>)
1000eaee:	4798      	blx	r3
	

	/* Initialize SMS flags
	* -------------------- */
	sms_init_variables();
1000eaf0:	4b89      	ldr	r3, [pc, #548]	; (1000ed18 <main+0x240>)
1000eaf2:	4798      	blx	r3
	
	
	/* Initialize hardware components
	* ------------------------------ */
	// Dualtimer
	sms_dualtimer_init();
1000eaf4:	4b89      	ldr	r3, [pc, #548]	; (1000ed1c <main+0x244>)
1000eaf6:	4798      	blx	r3
	
	// Buttons
	sms_button_gpio_init();
1000eaf8:	4b89      	ldr	r3, [pc, #548]	; (1000ed20 <main+0x248>)
1000eafa:	4798      	blx	r3
	
	// LED
	sms_led_gpio_init();
1000eafc:	4b89      	ldr	r3, [pc, #548]	; (1000ed24 <main+0x24c>)
1000eafe:	4798      	blx	r3
	
	// I2C
	sms_i2c_master_configure();
1000eb00:	4b89      	ldr	r3, [pc, #548]	; (1000ed28 <main+0x250>)
1000eb02:	4798      	blx	r3
	
	// SPI
	sms_spi_master_configure();
1000eb04:	4b89      	ldr	r3, [pc, #548]	; (1000ed2c <main+0x254>)
1000eb06:	4798      	blx	r3
	
	// MPU
	sms_imu_configure_gpio();
1000eb08:	4b89      	ldr	r3, [pc, #548]	; (1000ed30 <main+0x258>)
1000eb0a:	4798      	blx	r3
	
	// monitoring...
	sms_monitor_configure_gpio();
1000eb0c:	4b89      	ldr	r3, [pc, #548]	; (1000ed34 <main+0x25c>)
1000eb0e:	4798      	blx	r3
	
	/* Initialize the BLE module
	* ------------------------- */
	ble_device_init(NULL); // initialize the BLE chip and set the device address
1000eb10:	2000      	movs	r0, #0
1000eb12:	4b89      	ldr	r3, [pc, #548]	; (1000ed38 <main+0x260>)
1000eb14:	4798      	blx	r3
	
	
	/* Define BLE services
	* ------------------- */
	sms_button_define_services();
1000eb16:	4b89      	ldr	r3, [pc, #548]	; (1000ed3c <main+0x264>)
1000eb18:	4798      	blx	r3
	sms_pressure_define_services();
1000eb1a:	4b89      	ldr	r3, [pc, #548]	; (1000ed40 <main+0x268>)
1000eb1c:	4798      	blx	r3
	sms_imu_define_services();
1000eb1e:	4b89      	ldr	r3, [pc, #548]	; (1000ed44 <main+0x26c>)
1000eb20:	4798      	blx	r3
	
	
	/* Register callbacks
	* ------------------ */
	// Recovering from ULP
	register_resume_callback(resume_cb); // register resume callback
1000eb22:	4889      	ldr	r0, [pc, #548]	; (1000ed48 <main+0x270>)
1000eb24:	4b89      	ldr	r3, [pc, #548]	; (1000ed4c <main+0x274>)
1000eb26:	4798      	blx	r3

	// Dualtimer (AON timer enables on registration... so do it later)
	sms_dualtimer_register_callback(DUALTIMER_TIMER1, sms_dualtimer1_cb); // button pressing timer
1000eb28:	4989      	ldr	r1, [pc, #548]	; (1000ed50 <main+0x278>)
1000eb2a:	2000      	movs	r0, #0
1000eb2c:	4b89      	ldr	r3, [pc, #548]	; (1000ed54 <main+0x27c>)
1000eb2e:	4798      	blx	r3
	// DUALTIMER_TIMER2 used for blocking delay!! So don't register callback!!

	// Buttons
	sms_button_register_callbacks();
1000eb30:	4b89      	ldr	r3, [pc, #548]	; (1000ed58 <main+0x280>)
1000eb32:	4798      	blx	r3
	
	// MPU
	sms_imu_register_callbacks();
1000eb34:	4b89      	ldr	r3, [pc, #548]	; (1000ed5c <main+0x284>)
1000eb36:	4798      	blx	r3

	// BLE
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, BLE_GAP_EVENT_TYPE, sms_ble_gap_cb);
1000eb38:	4a89      	ldr	r2, [pc, #548]	; (1000ed60 <main+0x288>)
1000eb3a:	2100      	movs	r1, #0
1000eb3c:	2000      	movs	r0, #0
1000eb3e:	4c89      	ldr	r4, [pc, #548]	; (1000ed64 <main+0x28c>)
1000eb40:	47a0      	blx	r4
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, BLE_GATT_SERVER_EVENT_TYPE, sms_ble_gatt_server_cb);
1000eb42:	4a89      	ldr	r2, [pc, #548]	; (1000ed68 <main+0x290>)
1000eb44:	2102      	movs	r1, #2
1000eb46:	2000      	movs	r0, #0
1000eb48:	47a0      	blx	r4


	/* Enable buttons interrupts
	* ------------------------- */
	sms_button_toggle_callback(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
1000eb4a:	2100      	movs	r1, #0
1000eb4c:	2000      	movs	r0, #0
1000eb4e:	4b87      	ldr	r3, [pc, #540]	; (1000ed6c <main+0x294>)
1000eb50:	4798      	blx	r3

	if(sms_imu_startup()) {
1000eb52:	4b87      	ldr	r3, [pc, #540]	; (1000ed70 <main+0x298>)
1000eb54:	4798      	blx	r3
1000eb56:	2800      	cmp	r0, #0
1000eb58:	d005      	beq.n	1000eb66 <main+0x8e>
		DBG_LOG("Cannot start IMU");
1000eb5a:	4886      	ldr	r0, [pc, #536]	; (1000ed74 <main+0x29c>)
1000eb5c:	4b86      	ldr	r3, [pc, #536]	; (1000ed78 <main+0x2a0>)
1000eb5e:	4798      	blx	r3
1000eb60:	4886      	ldr	r0, [pc, #536]	; (1000ed7c <main+0x2a4>)
1000eb62:	4b87      	ldr	r3, [pc, #540]	; (1000ed80 <main+0x2a8>)
1000eb64:	4798      	blx	r3
		//DBG_LOG("Compass not here...");
	//}
	//sms_imu_comp_initialize(imu_device.config.mag_calibration);
	////DBG_LOG("Compass initialized... calibration values: %ld %ld %ld", (uint32_t)(mpu_device.config.mag_calibration[0] * 10000), (uint32_t)(mpu_device.config.mag_calibration[1] * 10000), (uint32_t)(mpu_device.config.mag_calibration[2] * 10000));
	
	sms_button_toggle_callback(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
1000eb66:	2101      	movs	r1, #1
1000eb68:	2001      	movs	r0, #1
1000eb6a:	4b80      	ldr	r3, [pc, #512]	; (1000ed6c <main+0x294>)
1000eb6c:	4798      	blx	r3
	sms_sensors_interrupt_toggle(true, false);
1000eb6e:	2100      	movs	r1, #0
1000eb70:	2001      	movs	r0, #1
1000eb72:	4b84      	ldr	r3, [pc, #528]	; (1000ed84 <main+0x2ac>)
1000eb74:	4798      	blx	r3
	at_ble_status_t ble_status;
	static uint32_t cnt = 0;
	while(true)
	{
		/* BLE Event task */
		ble_status = ble_event_task(sms_ble_timeout);
1000eb76:	4e84      	ldr	r6, [pc, #528]	; (1000ed88 <main+0x2b0>)
1000eb78:	4c84      	ldr	r4, [pc, #528]	; (1000ed8c <main+0x2b4>)
		}
		else if(ble_status == AT_BLE_TIMEOUT) {
			DBG_LOG("Event get timeout");
		}
		else {
			DBG_LOG("BLE error occurred");
1000eb7a:	4d7e      	ldr	r5, [pc, #504]	; (1000ed74 <main+0x29c>)
	at_ble_status_t ble_status;
	static uint32_t cnt = 0;
	while(true)
	{
		/* BLE Event task */
		ble_status = ble_event_task(sms_ble_timeout);
1000eb7c:	6830      	ldr	r0, [r6, #0]
1000eb7e:	47a0      	blx	r4
		
		if(ble_status == AT_BLE_SUCCESS) {
1000eb80:	2800      	cmp	r0, #0
1000eb82:	d000      	beq.n	1000eb86 <main+0xae>
1000eb84:	e0a4      	b.n	1000ecd0 <main+0x1f8>
			/* Sensor interrupt region */
			if(button_instance.btn0.new_int) {
1000eb86:	4b82      	ldr	r3, [pc, #520]	; (1000ed90 <main+0x2b8>)
1000eb88:	78db      	ldrb	r3, [r3, #3]
1000eb8a:	2b00      	cmp	r3, #0
1000eb8c:	d00b      	beq.n	1000eba6 <main+0xce>
				DBG_LOG("Btn0 int... ");
1000eb8e:	4879      	ldr	r0, [pc, #484]	; (1000ed74 <main+0x29c>)
1000eb90:	4b79      	ldr	r3, [pc, #484]	; (1000ed78 <main+0x2a0>)
1000eb92:	4798      	blx	r3
1000eb94:	487f      	ldr	r0, [pc, #508]	; (1000ed94 <main+0x2bc>)
1000eb96:	4b7a      	ldr	r3, [pc, #488]	; (1000ed80 <main+0x2a8>)
1000eb98:	4798      	blx	r3
				if(sms_button_fn(SMS_BTN_0) < 0) {
1000eb9a:	2000      	movs	r0, #0
1000eb9c:	4b7e      	ldr	r3, [pc, #504]	; (1000ed98 <main+0x2c0>)
1000eb9e:	4798      	blx	r3
					DBG_LOG_DEV("Error in sms_button_fn()");
				}
				// here
				button_instance.btn0.new_int = false;
1000eba0:	2200      	movs	r2, #0
1000eba2:	4b7b      	ldr	r3, [pc, #492]	; (1000ed90 <main+0x2b8>)
1000eba4:	70da      	strb	r2, [r3, #3]
			}
			if(button_instance.btn1.new_int) {
1000eba6:	4b7a      	ldr	r3, [pc, #488]	; (1000ed90 <main+0x2b8>)
1000eba8:	7a5b      	ldrb	r3, [r3, #9]
1000ebaa:	2b00      	cmp	r3, #0
1000ebac:	d00b      	beq.n	1000ebc6 <main+0xee>
				DBG_LOG("Btn1 int... ");
1000ebae:	4871      	ldr	r0, [pc, #452]	; (1000ed74 <main+0x29c>)
1000ebb0:	4b71      	ldr	r3, [pc, #452]	; (1000ed78 <main+0x2a0>)
1000ebb2:	4798      	blx	r3
1000ebb4:	4879      	ldr	r0, [pc, #484]	; (1000ed9c <main+0x2c4>)
1000ebb6:	4b72      	ldr	r3, [pc, #456]	; (1000ed80 <main+0x2a8>)
1000ebb8:	4798      	blx	r3
				if(sms_button_fn(SMS_BTN_1) < 0) {
1000ebba:	2001      	movs	r0, #1
1000ebbc:	4b76      	ldr	r3, [pc, #472]	; (1000ed98 <main+0x2c0>)
1000ebbe:	4798      	blx	r3
					DBG_LOG_DEV("Error in sms_button_fn()");
				}
				// here
				button_instance.btn1.new_int = false;
1000ebc0:	2200      	movs	r2, #0
1000ebc2:	4b73      	ldr	r3, [pc, #460]	; (1000ed90 <main+0x2b8>)
1000ebc4:	725a      	strb	r2, [r3, #9]
			}
			if(imu_device.interrupt.new_gyro) {
1000ebc6:	2381      	movs	r3, #129	; 0x81
1000ebc8:	4a75      	ldr	r2, [pc, #468]	; (1000eda0 <main+0x2c8>)
1000ebca:	5cd3      	ldrb	r3, [r2, r3]
1000ebcc:	2b00      	cmp	r3, #0
1000ebce:	d00f      	beq.n	1000ebf0 <main+0x118>
				gpio_pin_set_output_level(DBG_PIN_1, DBG_PIN_HIGH);
1000ebd0:	2101      	movs	r1, #1
1000ebd2:	200e      	movs	r0, #14
1000ebd4:	4f73      	ldr	r7, [pc, #460]	; (1000eda4 <main+0x2cc>)
1000ebd6:	47b8      	blx	r7
				//DBG_LOG("MPU int (%ld)... ", cnt++);
				sms_imu_poll_data();
1000ebd8:	4b73      	ldr	r3, [pc, #460]	; (1000eda8 <main+0x2d0>)
1000ebda:	4798      	blx	r3
				imu_device.interrupt.new_gyro = false;
1000ebdc:	4b70      	ldr	r3, [pc, #448]	; (1000eda0 <main+0x2c8>)
1000ebde:	2100      	movs	r1, #0
1000ebe0:	2281      	movs	r2, #129	; 0x81
1000ebe2:	5499      	strb	r1, [r3, r2]
				imu_device.interrupt.rts = true;
1000ebe4:	3101      	adds	r1, #1
1000ebe6:	3201      	adds	r2, #1
1000ebe8:	5499      	strb	r1, [r3, r2]
				gpio_pin_set_output_level(DBG_PIN_1, DBG_PIN_LOW);
1000ebea:	2100      	movs	r1, #0
1000ebec:	200e      	movs	r0, #14
1000ebee:	47b8      	blx	r7
				//DBG_LOG_CONT_DEV("done");
			}
			if(pressure_device.new_int) {
1000ebf0:	2329      	movs	r3, #41	; 0x29
1000ebf2:	4a6e      	ldr	r2, [pc, #440]	; (1000edac <main+0x2d4>)
1000ebf4:	5cd3      	ldrb	r3, [r2, r3]
1000ebf6:	2b00      	cmp	r3, #0
1000ebf8:	d002      	beq.n	1000ec00 <main+0x128>
				//DBG_LOG("Press int (%d)... ", ble_instance.sending_queue);
				//gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_HIGH);
				//sms_pressure_poll_data();
				pressure_device.new_int = false;
1000ebfa:	2100      	movs	r1, #0
1000ebfc:	2329      	movs	r3, #41	; 0x29
1000ebfe:	54d1      	strb	r1, [r2, r3]
				//gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_LOW);
				//DBG_LOG_CONT_DEV("done");
			}
			
			/* Timer interrupt region */
			if(timer1_instance.new_int) {
1000ec00:	4b6b      	ldr	r3, [pc, #428]	; (1000edb0 <main+0x2d8>)
1000ec02:	789b      	ldrb	r3, [r3, #2]
1000ec04:	2b00      	cmp	r3, #0
1000ec06:	d00d      	beq.n	1000ec24 <main+0x14c>
				DBG_LOG("Timer1 int... ");
1000ec08:	485a      	ldr	r0, [pc, #360]	; (1000ed74 <main+0x29c>)
1000ec0a:	4b5b      	ldr	r3, [pc, #364]	; (1000ed78 <main+0x2a0>)
1000ec0c:	4798      	blx	r3
1000ec0e:	4869      	ldr	r0, [pc, #420]	; (1000edb4 <main+0x2dc>)
1000ec10:	4b5b      	ldr	r3, [pc, #364]	; (1000ed80 <main+0x2a8>)
1000ec12:	4798      	blx	r3
				sms_dualtimer_stop(DUALTIMER_TIMER1);
1000ec14:	2000      	movs	r0, #0
1000ec16:	4b68      	ldr	r3, [pc, #416]	; (1000edb8 <main+0x2e0>)
1000ec18:	4798      	blx	r3
				sms_dualtimer1_fn();
1000ec1a:	4b68      	ldr	r3, [pc, #416]	; (1000edbc <main+0x2e4>)
1000ec1c:	4798      	blx	r3
				timer1_instance.new_int = false;
1000ec1e:	2200      	movs	r2, #0
1000ec20:	4b63      	ldr	r3, [pc, #396]	; (1000edb0 <main+0x2d8>)
1000ec22:	709a      	strb	r2, [r3, #2]
			}
			if(timer2_instance.new_int) {
1000ec24:	4b66      	ldr	r3, [pc, #408]	; (1000edc0 <main+0x2e8>)
1000ec26:	789b      	ldrb	r3, [r3, #2]
1000ec28:	2b00      	cmp	r3, #0
1000ec2a:	d00d      	beq.n	1000ec48 <main+0x170>
				DBG_LOG("Timer2 int... ");
1000ec2c:	4851      	ldr	r0, [pc, #324]	; (1000ed74 <main+0x29c>)
1000ec2e:	4b52      	ldr	r3, [pc, #328]	; (1000ed78 <main+0x2a0>)
1000ec30:	4798      	blx	r3
1000ec32:	4864      	ldr	r0, [pc, #400]	; (1000edc4 <main+0x2ec>)
1000ec34:	4b52      	ldr	r3, [pc, #328]	; (1000ed80 <main+0x2a8>)
1000ec36:	4798      	blx	r3
				sms_dualtimer_stop(DUALTIMER_TIMER2);
1000ec38:	2001      	movs	r0, #1
1000ec3a:	4b5f      	ldr	r3, [pc, #380]	; (1000edb8 <main+0x2e0>)
1000ec3c:	4798      	blx	r3
				sms_dualtimer2_fn();
1000ec3e:	4b62      	ldr	r3, [pc, #392]	; (1000edc8 <main+0x2f0>)
1000ec40:	4798      	blx	r3
				timer2_instance.new_int = false;
1000ec42:	2200      	movs	r2, #0
1000ec44:	4b5e      	ldr	r3, [pc, #376]	; (1000edc0 <main+0x2e8>)
1000ec46:	709a      	strb	r2, [r3, #2]
			}
			
			/* Sending region */
			if(imu_device.interrupt.rts) {
1000ec48:	2382      	movs	r3, #130	; 0x82
1000ec4a:	4a55      	ldr	r2, [pc, #340]	; (1000eda0 <main+0x2c8>)
1000ec4c:	5cd3      	ldrb	r3, [r2, r3]
1000ec4e:	2b00      	cmp	r3, #0
1000ec50:	d015      	beq.n	1000ec7e <main+0x1a6>
				//DBG_LOG("MPU sending (%d/%d)... ", pressure_device.new_int, ble_instance.sending_queue);
				gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_HIGH);
1000ec52:	2101      	movs	r1, #1
1000ec54:	200f      	movs	r0, #15
1000ec56:	4b53      	ldr	r3, [pc, #332]	; (1000eda4 <main+0x2cc>)
1000ec58:	4798      	blx	r3
				if(ble_instance.sending_queue == 0) {
1000ec5a:	4b2a      	ldr	r3, [pc, #168]	; (1000ed04 <main+0x22c>)
1000ec5c:	785b      	ldrb	r3, [r3, #1]
1000ec5e:	2b00      	cmp	r3, #0
1000ec60:	d103      	bne.n	1000ec6a <main+0x192>
					sms_ble_send_characteristic(BLE_CHAR_MPU);
1000ec62:	2002      	movs	r0, #2
1000ec64:	4b59      	ldr	r3, [pc, #356]	; (1000edcc <main+0x2f4>)
1000ec66:	4798      	blx	r3
1000ec68:	e002      	b.n	1000ec70 <main+0x198>
				}
				else {
					DBG_LOG_CONT("flushing!");
1000ec6a:	4859      	ldr	r0, [pc, #356]	; (1000edd0 <main+0x2f8>)
1000ec6c:	4b44      	ldr	r3, [pc, #272]	; (1000ed80 <main+0x2a8>)
1000ec6e:	4798      	blx	r3
				}
				imu_device.interrupt.rts = false;
1000ec70:	2100      	movs	r1, #0
1000ec72:	2382      	movs	r3, #130	; 0x82
1000ec74:	4a4a      	ldr	r2, [pc, #296]	; (1000eda0 <main+0x2c8>)
1000ec76:	54d1      	strb	r1, [r2, r3]
				gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_LOW);
1000ec78:	200f      	movs	r0, #15
1000ec7a:	4b4a      	ldr	r3, [pc, #296]	; (1000eda4 <main+0x2cc>)
1000ec7c:	4798      	blx	r3
			}
			if(pressure_device.rts) {
1000ec7e:	232a      	movs	r3, #42	; 0x2a
1000ec80:	4a4a      	ldr	r2, [pc, #296]	; (1000edac <main+0x2d4>)
1000ec82:	5cd3      	ldrb	r3, [r2, r3]
1000ec84:	2b00      	cmp	r3, #0
1000ec86:	d100      	bne.n	1000ec8a <main+0x1b2>
1000ec88:	e778      	b.n	1000eb7c <main+0xa4>
				DBG_LOG("Press sending (%d/%d)... ", imu_device.interrupt.new_gyro, ble_instance.sending_queue);
1000ec8a:	483a      	ldr	r0, [pc, #232]	; (1000ed74 <main+0x29c>)
1000ec8c:	4b3a      	ldr	r3, [pc, #232]	; (1000ed78 <main+0x2a0>)
1000ec8e:	4798      	blx	r3
1000ec90:	2381      	movs	r3, #129	; 0x81
1000ec92:	4a43      	ldr	r2, [pc, #268]	; (1000eda0 <main+0x2c8>)
1000ec94:	5cd1      	ldrb	r1, [r2, r3]
1000ec96:	b2c9      	uxtb	r1, r1
1000ec98:	4f1a      	ldr	r7, [pc, #104]	; (1000ed04 <main+0x22c>)
1000ec9a:	787a      	ldrb	r2, [r7, #1]
1000ec9c:	b2d2      	uxtb	r2, r2
1000ec9e:	484d      	ldr	r0, [pc, #308]	; (1000edd4 <main+0x2fc>)
1000eca0:	4b37      	ldr	r3, [pc, #220]	; (1000ed80 <main+0x2a8>)
1000eca2:	4798      	blx	r3
				gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_HIGH);
1000eca4:	2101      	movs	r1, #1
1000eca6:	200f      	movs	r0, #15
1000eca8:	4b3e      	ldr	r3, [pc, #248]	; (1000eda4 <main+0x2cc>)
1000ecaa:	4798      	blx	r3
				if(ble_instance.sending_queue == 0) {
1000ecac:	787b      	ldrb	r3, [r7, #1]
1000ecae:	2b00      	cmp	r3, #0
1000ecb0:	d103      	bne.n	1000ecba <main+0x1e2>
					sms_ble_send_characteristic(BLE_CHAR_PRESS);
1000ecb2:	2001      	movs	r0, #1
1000ecb4:	4b45      	ldr	r3, [pc, #276]	; (1000edcc <main+0x2f4>)
1000ecb6:	4798      	blx	r3
1000ecb8:	e002      	b.n	1000ecc0 <main+0x1e8>
				}
				else {
					DBG_LOG_CONT("flushing!");
1000ecba:	4845      	ldr	r0, [pc, #276]	; (1000edd0 <main+0x2f8>)
1000ecbc:	4b30      	ldr	r3, [pc, #192]	; (1000ed80 <main+0x2a8>)
1000ecbe:	4798      	blx	r3
				}
				pressure_device.rts = false;
1000ecc0:	2100      	movs	r1, #0
1000ecc2:	232a      	movs	r3, #42	; 0x2a
1000ecc4:	4a39      	ldr	r2, [pc, #228]	; (1000edac <main+0x2d4>)
1000ecc6:	54d1      	strb	r1, [r2, r3]
				gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_LOW);
1000ecc8:	200f      	movs	r0, #15
1000ecca:	4b36      	ldr	r3, [pc, #216]	; (1000eda4 <main+0x2cc>)
1000eccc:	4798      	blx	r3
1000ecce:	e755      	b.n	1000eb7c <main+0xa4>
			}
		}
		else if(ble_status == AT_BLE_GAP_TIMEOUT) {
1000ecd0:	2845      	cmp	r0, #69	; 0x45
1000ecd2:	d106      	bne.n	1000ece2 <main+0x20a>
			DBG_LOG("GAP timeout");
1000ecd4:	4827      	ldr	r0, [pc, #156]	; (1000ed74 <main+0x29c>)
1000ecd6:	4b28      	ldr	r3, [pc, #160]	; (1000ed78 <main+0x2a0>)
1000ecd8:	4798      	blx	r3
1000ecda:	483f      	ldr	r0, [pc, #252]	; (1000edd8 <main+0x300>)
1000ecdc:	4b28      	ldr	r3, [pc, #160]	; (1000ed80 <main+0x2a8>)
1000ecde:	4798      	blx	r3
1000ece0:	e74c      	b.n	1000eb7c <main+0xa4>
		}
		else if(ble_status == AT_BLE_TIMEOUT) {
1000ece2:	28d0      	cmp	r0, #208	; 0xd0
1000ece4:	d106      	bne.n	1000ecf4 <main+0x21c>
			DBG_LOG("Event get timeout");
1000ece6:	4823      	ldr	r0, [pc, #140]	; (1000ed74 <main+0x29c>)
1000ece8:	4b23      	ldr	r3, [pc, #140]	; (1000ed78 <main+0x2a0>)
1000ecea:	4798      	blx	r3
1000ecec:	483b      	ldr	r0, [pc, #236]	; (1000eddc <main+0x304>)
1000ecee:	4b24      	ldr	r3, [pc, #144]	; (1000ed80 <main+0x2a8>)
1000ecf0:	4798      	blx	r3
1000ecf2:	e743      	b.n	1000eb7c <main+0xa4>
		}
		else {
			DBG_LOG("BLE error occurred");
1000ecf4:	0028      	movs	r0, r5
1000ecf6:	4b20      	ldr	r3, [pc, #128]	; (1000ed78 <main+0x2a0>)
1000ecf8:	4798      	blx	r3
1000ecfa:	4839      	ldr	r0, [pc, #228]	; (1000ede0 <main+0x308>)
1000ecfc:	4b20      	ldr	r3, [pc, #128]	; (1000ed80 <main+0x2a8>)
1000ecfe:	4798      	blx	r3
1000ed00:	e73c      	b.n	1000eb7c <main+0xa4>
1000ed02:	46c0      	nop			; (mov r8, r8)
1000ed04:	1001a414 	.word	0x1001a414
1000ed08:	1000e301 	.word	0x1000e301
1000ed0c:	1000bc2d 	.word	0x1000bc2d
1000ed10:	1000dff5 	.word	0x1000dff5
1000ed14:	1000e855 	.word	0x1000e855
1000ed18:	1000ea8d 	.word	0x1000ea8d
1000ed1c:	1000abc5 	.word	0x1000abc5
1000ed20:	10009351 	.word	0x10009351
1000ed24:	1000a6e1 	.word	0x1000a6e1
1000ed28:	100096dd 	.word	0x100096dd
1000ed2c:	1000aa79 	.word	0x1000aa79
1000ed30:	10009871 	.word	0x10009871
1000ed34:	1000963d 	.word	0x1000963d
1000ed38:	1000d77d 	.word	0x1000d77d
1000ed3c:	100095ed 	.word	0x100095ed
1000ed40:	1000a969 	.word	0x1000a969
1000ed44:	1000990d 	.word	0x1000990d
1000ed48:	1000ea41 	.word	0x1000ea41
1000ed4c:	1000e899 	.word	0x1000e899
1000ed50:	1000ac8d 	.word	0x1000ac8d
1000ed54:	1000ac09 	.word	0x1000ac09
1000ed58:	100093f9 	.word	0x100093f9
1000ed5c:	100098bd 	.word	0x100098bd
1000ed60:	10017878 	.word	0x10017878
1000ed64:	1000d6ad 	.word	0x1000d6ad
1000ed68:	100178c4 	.word	0x100178c4
1000ed6c:	100095a5 	.word	0x100095a5
1000ed70:	1000a409 	.word	0x1000a409
1000ed74:	10017780 	.word	0x10017780
1000ed78:	10016841 	.word	0x10016841
1000ed7c:	100185d0 	.word	0x100185d0
1000ed80:	10016721 	.word	0x10016721
1000ed84:	1000a9b9 	.word	0x1000a9b9
1000ed88:	1001a40c 	.word	0x1001a40c
1000ed8c:	1000de89 	.word	0x1000de89
1000ed90:	1001a418 	.word	0x1001a418
1000ed94:	100185e4 	.word	0x100185e4
1000ed98:	1000944d 	.word	0x1000944d
1000ed9c:	100185f4 	.word	0x100185f4
1000eda0:	1001a550 	.word	0x1001a550
1000eda4:	1000b8ed 	.word	0x1000b8ed
1000eda8:	1000a52d 	.word	0x1000a52d
1000edac:	1001a49c 	.word	0x1001a49c
1000edb0:	1001a488 	.word	0x1001a488
1000edb4:	10018604 	.word	0x10018604
1000edb8:	1000ac81 	.word	0x1000ac81
1000edbc:	1000acad 	.word	0x1000acad
1000edc0:	1001a534 	.word	0x1001a534
1000edc4:	10018614 	.word	0x10018614
1000edc8:	1000aed1 	.word	0x1000aed1
1000edcc:	10009055 	.word	0x10009055
1000edd0:	10018624 	.word	0x10018624
1000edd4:	10018630 	.word	0x10018630
1000edd8:	1001864c 	.word	0x1001864c
1000eddc:	10018658 	.word	0x10018658
1000ede0:	1001866c 	.word	0x1001866c

1000ede4 <internal_event_post>:
1000ede4:	b570      	push	{r4, r5, r6, lr}
1000ede6:	4d12      	ldr	r5, [pc, #72]	; (1000ee30 <internal_event_post+0x4c>)
1000ede8:	682c      	ldr	r4, [r5, #0]
1000edea:	2c00      	cmp	r4, #0
1000edec:	d014      	beq.n	1000ee18 <internal_event_post+0x34>
1000edee:	6826      	ldr	r6, [r4, #0]
1000edf0:	60e2      	str	r2, [r4, #12]
1000edf2:	602e      	str	r6, [r5, #0]
1000edf4:	2500      	movs	r5, #0
1000edf6:	4a0f      	ldr	r2, [pc, #60]	; (1000ee34 <internal_event_post+0x50>)
1000edf8:	8123      	strh	r3, [r4, #8]
1000edfa:	6813      	ldr	r3, [r2, #0]
1000edfc:	6025      	str	r5, [r4, #0]
1000edfe:	80a0      	strh	r0, [r4, #4]
1000ee00:	80e1      	strh	r1, [r4, #6]
1000ee02:	42ab      	cmp	r3, r5
1000ee04:	d101      	bne.n	1000ee0a <internal_event_post+0x26>
1000ee06:	6014      	str	r4, [r2, #0]
1000ee08:	e011      	b.n	1000ee2e <internal_event_post+0x4a>
1000ee0a:	681a      	ldr	r2, [r3, #0]
1000ee0c:	2a00      	cmp	r2, #0
1000ee0e:	d001      	beq.n	1000ee14 <internal_event_post+0x30>
1000ee10:	1c13      	adds	r3, r2, #0
1000ee12:	e7fa      	b.n	1000ee0a <internal_event_post+0x26>
1000ee14:	601c      	str	r4, [r3, #0]
1000ee16:	e00a      	b.n	1000ee2e <internal_event_post+0x4a>
1000ee18:	b2c4      	uxtb	r4, r0
1000ee1a:	2c00      	cmp	r4, #0
1000ee1c:	d107      	bne.n	1000ee2e <internal_event_post+0x4a>
1000ee1e:	4c06      	ldr	r4, [pc, #24]	; (1000ee38 <internal_event_post+0x54>)
1000ee20:	60e2      	str	r2, [r4, #12]
1000ee22:	2201      	movs	r2, #1
1000ee24:	8123      	strh	r3, [r4, #8]
1000ee26:	4b05      	ldr	r3, [pc, #20]	; (1000ee3c <internal_event_post+0x58>)
1000ee28:	80a0      	strh	r0, [r4, #4]
1000ee2a:	80e1      	strh	r1, [r4, #6]
1000ee2c:	701a      	strb	r2, [r3, #0]
1000ee2e:	bd70      	pop	{r4, r5, r6, pc}
1000ee30:	1001a350 	.word	0x1001a350
1000ee34:	1001a34c 	.word	0x1001a34c
1000ee38:	1001a338 	.word	0x1001a338
1000ee3c:	1001a348 	.word	0x1001a348

1000ee40 <internal_event_init>:
1000ee40:	b510      	push	{r4, lr}
1000ee42:	4b08      	ldr	r3, [pc, #32]	; (1000ee64 <internal_event_init+0x24>)
1000ee44:	0900      	lsrs	r0, r0, #4
1000ee46:	0100      	lsls	r0, r0, #4
1000ee48:	681a      	ldr	r2, [r3, #0]
1000ee4a:	1808      	adds	r0, r1, r0
1000ee4c:	4281      	cmp	r1, r0
1000ee4e:	d003      	beq.n	1000ee58 <internal_event_init+0x18>
1000ee50:	600a      	str	r2, [r1, #0]
1000ee52:	1c0a      	adds	r2, r1, #0
1000ee54:	3110      	adds	r1, #16
1000ee56:	e7f9      	b.n	1000ee4c <internal_event_init+0xc>
1000ee58:	601a      	str	r2, [r3, #0]
1000ee5a:	2200      	movs	r2, #0
1000ee5c:	4b02      	ldr	r3, [pc, #8]	; (1000ee68 <internal_event_init+0x28>)
1000ee5e:	601a      	str	r2, [r3, #0]
1000ee60:	bd10      	pop	{r4, pc}
1000ee62:	46c0      	nop			; (mov r8, r8)
1000ee64:	1001a350 	.word	0x1001a350
1000ee68:	1001a34c 	.word	0x1001a34c

1000ee6c <special_events_handler>:
1000ee6c:	b538      	push	{r3, r4, r5, lr}
1000ee6e:	4c1b      	ldr	r4, [pc, #108]	; (1000eedc <special_events_handler+0x70>)
1000ee70:	1c03      	adds	r3, r0, #0
1000ee72:	8825      	ldrh	r5, [r4, #0]
1000ee74:	1c08      	adds	r0, r1, #0
1000ee76:	1c21      	adds	r1, r4, #0
1000ee78:	429d      	cmp	r5, r3
1000ee7a:	d107      	bne.n	1000ee8c <special_events_handler+0x20>
1000ee7c:	88a5      	ldrh	r5, [r4, #4]
1000ee7e:	4285      	cmp	r5, r0
1000ee80:	d104      	bne.n	1000ee8c <special_events_handler+0x20>
1000ee82:	2301      	movs	r3, #1
1000ee84:	425b      	negs	r3, r3
1000ee86:	8023      	strh	r3, [r4, #0]
1000ee88:	60a2      	str	r2, [r4, #8]
1000ee8a:	e009      	b.n	1000eea0 <special_events_handler+0x34>
1000ee8c:	884c      	ldrh	r4, [r1, #2]
1000ee8e:	429c      	cmp	r4, r3
1000ee90:	d10a      	bne.n	1000eea8 <special_events_handler+0x3c>
1000ee92:	888c      	ldrh	r4, [r1, #4]
1000ee94:	4284      	cmp	r4, r0
1000ee96:	d107      	bne.n	1000eea8 <special_events_handler+0x3c>
1000ee98:	2301      	movs	r3, #1
1000ee9a:	425b      	negs	r3, r3
1000ee9c:	804b      	strh	r3, [r1, #2]
1000ee9e:	608a      	str	r2, [r1, #8]
1000eea0:	4b0f      	ldr	r3, [pc, #60]	; (1000eee0 <special_events_handler+0x74>)
1000eea2:	4798      	blx	r3
1000eea4:	2001      	movs	r0, #1
1000eea6:	e017      	b.n	1000eed8 <special_events_handler+0x6c>
1000eea8:	490e      	ldr	r1, [pc, #56]	; (1000eee4 <special_events_handler+0x78>)
1000eeaa:	428b      	cmp	r3, r1
1000eeac:	d00e      	beq.n	1000eecc <special_events_handler+0x60>
1000eeae:	490e      	ldr	r1, [pc, #56]	; (1000eee8 <special_events_handler+0x7c>)
1000eeb0:	428b      	cmp	r3, r1
1000eeb2:	d007      	beq.n	1000eec4 <special_events_handler+0x58>
1000eeb4:	490d      	ldr	r1, [pc, #52]	; (1000eeec <special_events_handler+0x80>)
1000eeb6:	2000      	movs	r0, #0
1000eeb8:	428b      	cmp	r3, r1
1000eeba:	d10d      	bne.n	1000eed8 <special_events_handler+0x6c>
1000eebc:	1c10      	adds	r0, r2, #0
1000eebe:	4b0c      	ldr	r3, [pc, #48]	; (1000eef0 <special_events_handler+0x84>)
1000eec0:	4798      	blx	r3
1000eec2:	e7ef      	b.n	1000eea4 <special_events_handler+0x38>
1000eec4:	1c11      	adds	r1, r2, #0
1000eec6:	4b0b      	ldr	r3, [pc, #44]	; (1000eef4 <special_events_handler+0x88>)
1000eec8:	2200      	movs	r2, #0
1000eeca:	e002      	b.n	1000eed2 <special_events_handler+0x66>
1000eecc:	1c11      	adds	r1, r2, #0
1000eece:	2200      	movs	r2, #0
1000eed0:	4b09      	ldr	r3, [pc, #36]	; (1000eef8 <special_events_handler+0x8c>)
1000eed2:	4798      	blx	r3
1000eed4:	4243      	negs	r3, r0
1000eed6:	4158      	adcs	r0, r3
1000eed8:	bd38      	pop	{r3, r4, r5, pc}
1000eeda:	46c0      	nop			; (mov r8, r8)
1000eedc:	1001b2b0 	.word	0x1001b2b0
1000eee0:	100108c9 	.word	0x100108c9
1000eee4:	00000e13 	.word	0x00000e13
1000eee8:	00000e15 	.word	0x00000e15
1000eeec:	00000e01 	.word	0x00000e01
1000eef0:	10010c39 	.word	0x10010c39
1000eef4:	10010df9 	.word	0x10010df9
1000eef8:	10010ed1 	.word	0x10010ed1

1000eefc <at_ble_event_get>:
1000eefc:	2300      	movs	r3, #0
1000eefe:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ef00:	b087      	sub	sp, #28
1000ef02:	9204      	str	r2, [sp, #16]
1000ef04:	7003      	strb	r3, [r0, #0]
1000ef06:	9b04      	ldr	r3, [sp, #16]
1000ef08:	9003      	str	r0, [sp, #12]
1000ef0a:	3b01      	subs	r3, #1
1000ef0c:	1c0d      	adds	r5, r1, #0
1000ef0e:	9305      	str	r3, [sp, #20]
1000ef10:	3303      	adds	r3, #3
1000ef12:	d802      	bhi.n	1000ef1a <at_ble_event_get+0x1e>
1000ef14:	9804      	ldr	r0, [sp, #16]
1000ef16:	4bae      	ldr	r3, [pc, #696]	; (1000f1d0 <at_ble_event_get+0x2d4>)
1000ef18:	4798      	blx	r3
1000ef1a:	9b05      	ldr	r3, [sp, #20]
1000ef1c:	4cad      	ldr	r4, [pc, #692]	; (1000f1d4 <at_ble_event_get+0x2d8>)
1000ef1e:	3303      	adds	r3, #3
1000ef20:	d902      	bls.n	1000ef28 <at_ble_event_get+0x2c>
1000ef22:	2300      	movs	r3, #0
1000ef24:	9302      	str	r3, [sp, #8]
1000ef26:	e015      	b.n	1000ef54 <at_ble_event_get+0x58>
1000ef28:	2300      	movs	r3, #0
1000ef2a:	9302      	str	r3, [sp, #8]
1000ef2c:	6823      	ldr	r3, [r4, #0]
1000ef2e:	2b00      	cmp	r3, #0
1000ef30:	d113      	bne.n	1000ef5a <at_ble_event_get+0x5e>
1000ef32:	9b02      	ldr	r3, [sp, #8]
1000ef34:	2bd0      	cmp	r3, #208	; 0xd0
1000ef36:	d100      	bne.n	1000ef3a <at_ble_event_get+0x3e>
1000ef38:	e2da      	b.n	1000f4f0 <at_ble_event_get+0x5f4>
1000ef3a:	9804      	ldr	r0, [sp, #16]
1000ef3c:	4ba6      	ldr	r3, [pc, #664]	; (1000f1d8 <at_ble_event_get+0x2dc>)
1000ef3e:	4798      	blx	r3
1000ef40:	9002      	str	r0, [sp, #8]
1000ef42:	2802      	cmp	r0, #2
1000ef44:	d1f2      	bne.n	1000ef2c <at_ble_event_get+0x30>
1000ef46:	e03f      	b.n	1000efc8 <at_ble_event_get+0xcc>
1000ef48:	9804      	ldr	r0, [sp, #16]
1000ef4a:	4ba3      	ldr	r3, [pc, #652]	; (1000f1d8 <at_ble_event_get+0x2dc>)
1000ef4c:	4798      	blx	r3
1000ef4e:	9002      	str	r0, [sp, #8]
1000ef50:	2802      	cmp	r0, #2
1000ef52:	d039      	beq.n	1000efc8 <at_ble_event_get+0xcc>
1000ef54:	6823      	ldr	r3, [r4, #0]
1000ef56:	2b00      	cmp	r3, #0
1000ef58:	d0f6      	beq.n	1000ef48 <at_ble_event_get+0x4c>
1000ef5a:	9b02      	ldr	r3, [sp, #8]
1000ef5c:	2bd0      	cmp	r3, #208	; 0xd0
1000ef5e:	d100      	bne.n	1000ef62 <at_ble_event_get+0x66>
1000ef60:	e2c6      	b.n	1000f4f0 <at_ble_event_get+0x5f4>
1000ef62:	9b02      	ldr	r3, [sp, #8]
1000ef64:	3b03      	subs	r3, #3
1000ef66:	1e5a      	subs	r2, r3, #1
1000ef68:	4193      	sbcs	r3, r2
1000ef6a:	9a02      	ldr	r2, [sp, #8]
1000ef6c:	425b      	negs	r3, r3
1000ef6e:	401a      	ands	r2, r3
1000ef70:	6823      	ldr	r3, [r4, #0]
1000ef72:	9202      	str	r2, [sp, #8]
1000ef74:	2b00      	cmp	r3, #0
1000ef76:	d100      	bne.n	1000ef7a <at_ble_event_get+0x7e>
1000ef78:	e2c2      	b.n	1000f500 <at_ble_event_get+0x604>
1000ef7a:	681a      	ldr	r2, [r3, #0]
1000ef7c:	68de      	ldr	r6, [r3, #12]
1000ef7e:	6022      	str	r2, [r4, #0]
1000ef80:	88da      	ldrh	r2, [r3, #6]
1000ef82:	9201      	str	r2, [sp, #4]
1000ef84:	4a95      	ldr	r2, [pc, #596]	; (1000f1dc <at_ble_event_get+0x2e0>)
1000ef86:	889c      	ldrh	r4, [r3, #4]
1000ef88:	6811      	ldr	r1, [r2, #0]
1000ef8a:	6013      	str	r3, [r2, #0]
1000ef8c:	6019      	str	r1, [r3, #0]
1000ef8e:	4b94      	ldr	r3, [pc, #592]	; (1000f1e0 <at_ble_event_get+0x2e4>)
1000ef90:	781b      	ldrb	r3, [r3, #0]
1000ef92:	2b01      	cmp	r3, #1
1000ef94:	d10f      	bne.n	1000efb6 <at_ble_event_get+0xba>
1000ef96:	4b93      	ldr	r3, [pc, #588]	; (1000f1e4 <at_ble_event_get+0x2e8>)
1000ef98:	4a92      	ldr	r2, [pc, #584]	; (1000f1e4 <at_ble_event_get+0x2e8>)
1000ef9a:	8898      	ldrh	r0, [r3, #4]
1000ef9c:	88d9      	ldrh	r1, [r3, #6]
1000ef9e:	68d2      	ldr	r2, [r2, #12]
1000efa0:	891b      	ldrh	r3, [r3, #8]
1000efa2:	4f91      	ldr	r7, [pc, #580]	; (1000f1e8 <at_ble_event_get+0x2ec>)
1000efa4:	47b8      	blx	r7
1000efa6:	2210      	movs	r2, #16
1000efa8:	4b90      	ldr	r3, [pc, #576]	; (1000f1ec <at_ble_event_get+0x2f0>)
1000efaa:	488e      	ldr	r0, [pc, #568]	; (1000f1e4 <at_ble_event_get+0x2e8>)
1000efac:	2100      	movs	r1, #0
1000efae:	4798      	blx	r3
1000efb0:	2300      	movs	r3, #0
1000efb2:	4a8b      	ldr	r2, [pc, #556]	; (1000f1e0 <at_ble_event_get+0x2e4>)
1000efb4:	7013      	strb	r3, [r2, #0]
1000efb6:	9b02      	ldr	r3, [sp, #8]
1000efb8:	2b00      	cmp	r3, #0
1000efba:	d114      	bne.n	1000efe6 <at_ble_event_get+0xea>
1000efbc:	4b8c      	ldr	r3, [pc, #560]	; (1000f1f0 <at_ble_event_get+0x2f4>)
1000efbe:	429c      	cmp	r4, r3
1000efc0:	d009      	beq.n	1000efd6 <at_ble_event_get+0xda>
1000efc2:	4b8c      	ldr	r3, [pc, #560]	; (1000f1f4 <at_ble_event_get+0x2f8>)
1000efc4:	429c      	cmp	r4, r3
1000efc6:	d127      	bne.n	1000f018 <at_ble_event_get+0x11c>
1000efc8:	233a      	movs	r3, #58	; 0x3a
1000efca:	9a03      	ldr	r2, [sp, #12]
1000efcc:	7013      	strb	r3, [r2, #0]
1000efce:	2300      	movs	r3, #0
1000efd0:	9302      	str	r3, [sp, #8]
1000efd2:	1c1d      	adds	r5, r3, #0
1000efd4:	e007      	b.n	1000efe6 <at_ble_event_get+0xea>
1000efd6:	9b01      	ldr	r3, [sp, #4]
1000efd8:	42a3      	cmp	r3, r4
1000efda:	d000      	beq.n	1000efde <at_ble_event_get+0xe2>
1000efdc:	e28a      	b.n	1000f4f4 <at_ble_event_get+0x5f8>
1000efde:	2338      	movs	r3, #56	; 0x38
1000efe0:	9a03      	ldr	r2, [sp, #12]
1000efe2:	7013      	strb	r3, [r2, #0]
1000efe4:	602e      	str	r6, [r5, #0]
1000efe6:	9b03      	ldr	r3, [sp, #12]
1000efe8:	781b      	ldrb	r3, [r3, #0]
1000efea:	2b3b      	cmp	r3, #59	; 0x3b
1000efec:	d101      	bne.n	1000eff2 <at_ble_event_get+0xf6>
1000efee:	4b82      	ldr	r3, [pc, #520]	; (1000f1f8 <at_ble_event_get+0x2fc>)
1000eff0:	4798      	blx	r3
1000eff2:	9b03      	ldr	r3, [sp, #12]
1000eff4:	781b      	ldrb	r3, [r3, #0]
1000eff6:	2b3b      	cmp	r3, #59	; 0x3b
1000eff8:	d003      	beq.n	1000f002 <at_ble_event_get+0x106>
1000effa:	9b05      	ldr	r3, [sp, #20]
1000effc:	3303      	adds	r3, #3
1000effe:	d904      	bls.n	1000f00a <at_ble_event_get+0x10e>
1000f000:	e283      	b.n	1000f50a <at_ble_event_get+0x60e>
1000f002:	9b02      	ldr	r3, [sp, #8]
1000f004:	2b00      	cmp	r3, #0
1000f006:	d088      	beq.n	1000ef1a <at_ble_event_get+0x1e>
1000f008:	e7f7      	b.n	1000effa <at_ble_event_get+0xfe>
1000f00a:	9b02      	ldr	r3, [sp, #8]
1000f00c:	2bd0      	cmp	r3, #208	; 0xd0
1000f00e:	d100      	bne.n	1000f012 <at_ble_event_get+0x116>
1000f010:	e27b      	b.n	1000f50a <at_ble_event_get+0x60e>
1000f012:	4b7a      	ldr	r3, [pc, #488]	; (1000f1fc <at_ble_event_get+0x300>)
1000f014:	4798      	blx	r3
1000f016:	e278      	b.n	1000f50a <at_ble_event_get+0x60e>
1000f018:	9b01      	ldr	r3, [sp, #4]
1000f01a:	2bbb      	cmp	r3, #187	; 0xbb
1000f01c:	d125      	bne.n	1000f06a <at_ble_event_get+0x16e>
1000f01e:	2cbb      	cmp	r4, #187	; 0xbb
1000f020:	d123      	bne.n	1000f06a <at_ble_event_get+0x16e>
1000f022:	466b      	mov	r3, sp
1000f024:	891b      	ldrh	r3, [r3, #8]
1000f026:	80ab      	strh	r3, [r5, #4]
1000f028:	78b3      	ldrb	r3, [r6, #2]
1000f02a:	7872      	ldrb	r2, [r6, #1]
1000f02c:	78f0      	ldrb	r0, [r6, #3]
1000f02e:	021b      	lsls	r3, r3, #8
1000f030:	4313      	orrs	r3, r2
1000f032:	7971      	ldrb	r1, [r6, #5]
1000f034:	7932      	ldrb	r2, [r6, #4]
1000f036:	70a8      	strb	r0, [r5, #2]
1000f038:	4871      	ldr	r0, [pc, #452]	; (1000f200 <at_ble_event_get+0x304>)
1000f03a:	802b      	strh	r3, [r5, #0]
1000f03c:	4283      	cmp	r3, r0
1000f03e:	d806      	bhi.n	1000f04e <at_ble_event_get+0x152>
1000f040:	4a70      	ldr	r2, [pc, #448]	; (1000f204 <at_ble_event_get+0x308>)
1000f042:	4293      	cmp	r3, r2
1000f044:	d20b      	bcs.n	1000f05e <at_ble_event_get+0x162>
1000f046:	4a70      	ldr	r2, [pc, #448]	; (1000f208 <at_ble_event_get+0x30c>)
1000f048:	4293      	cmp	r3, r2
1000f04a:	d008      	beq.n	1000f05e <at_ble_event_get+0x162>
1000f04c:	e009      	b.n	1000f062 <at_ble_event_get+0x166>
1000f04e:	486f      	ldr	r0, [pc, #444]	; (1000f20c <at_ble_event_get+0x310>)
1000f050:	4283      	cmp	r3, r0
1000f052:	d106      	bne.n	1000f062 <at_ble_event_get+0x166>
1000f054:	020b      	lsls	r3, r1, #8
1000f056:	4313      	orrs	r3, r2
1000f058:	80ab      	strh	r3, [r5, #4]
1000f05a:	2337      	movs	r3, #55	; 0x37
1000f05c:	e002      	b.n	1000f064 <at_ble_event_get+0x168>
1000f05e:	2336      	movs	r3, #54	; 0x36
1000f060:	e000      	b.n	1000f064 <at_ble_event_get+0x168>
1000f062:	2300      	movs	r3, #0
1000f064:	9a03      	ldr	r2, [sp, #12]
1000f066:	7013      	strb	r3, [r2, #0]
1000f068:	e7bd      	b.n	1000efe6 <at_ble_event_get+0xea>
1000f06a:	4b69      	ldr	r3, [pc, #420]	; (1000f210 <at_ble_event_get+0x314>)
1000f06c:	429c      	cmp	r4, r3
1000f06e:	d100      	bne.n	1000f072 <at_ble_event_get+0x176>
1000f070:	e144      	b.n	1000f2fc <at_ble_event_get+0x400>
1000f072:	d865      	bhi.n	1000f140 <at_ble_event_get+0x244>
1000f074:	4b67      	ldr	r3, [pc, #412]	; (1000f214 <at_ble_event_get+0x318>)
1000f076:	429c      	cmp	r4, r3
1000f078:	d100      	bne.n	1000f07c <at_ble_event_get+0x180>
1000f07a:	e1d5      	b.n	1000f428 <at_ble_event_get+0x52c>
1000f07c:	d82f      	bhi.n	1000f0de <at_ble_event_get+0x1e2>
1000f07e:	4b66      	ldr	r3, [pc, #408]	; (1000f218 <at_ble_event_get+0x31c>)
1000f080:	429c      	cmp	r4, r3
1000f082:	d100      	bne.n	1000f086 <at_ble_event_get+0x18a>
1000f084:	e1e0      	b.n	1000f448 <at_ble_event_get+0x54c>
1000f086:	d813      	bhi.n	1000f0b0 <at_ble_event_get+0x1b4>
1000f088:	4b64      	ldr	r3, [pc, #400]	; (1000f21c <at_ble_event_get+0x320>)
1000f08a:	429c      	cmp	r4, r3
1000f08c:	d100      	bne.n	1000f090 <at_ble_event_get+0x194>
1000f08e:	e1a3      	b.n	1000f3d8 <at_ble_event_get+0x4dc>
1000f090:	d804      	bhi.n	1000f09c <at_ble_event_get+0x1a0>
1000f092:	2638      	movs	r6, #56	; 0x38
1000f094:	42b4      	cmp	r4, r6
1000f096:	d100      	bne.n	1000f09a <at_ble_event_get+0x19e>
1000f098:	e225      	b.n	1000f4e6 <at_ble_event_get+0x5ea>
1000f09a:	e117      	b.n	1000f2cc <at_ble_event_get+0x3d0>
1000f09c:	4b60      	ldr	r3, [pc, #384]	; (1000f220 <at_ble_event_get+0x324>)
1000f09e:	429c      	cmp	r4, r3
1000f0a0:	d100      	bne.n	1000f0a4 <at_ble_event_get+0x1a8>
1000f0a2:	e19f      	b.n	1000f3e4 <at_ble_event_get+0x4e8>
1000f0a4:	33fe      	adds	r3, #254	; 0xfe
1000f0a6:	33ff      	adds	r3, #255	; 0xff
1000f0a8:	429c      	cmp	r4, r3
1000f0aa:	d100      	bne.n	1000f0ae <at_ble_event_get+0x1b2>
1000f0ac:	e1d3      	b.n	1000f456 <at_ble_event_get+0x55a>
1000f0ae:	e10d      	b.n	1000f2cc <at_ble_event_get+0x3d0>
1000f0b0:	4b5c      	ldr	r3, [pc, #368]	; (1000f224 <at_ble_event_get+0x328>)
1000f0b2:	429c      	cmp	r4, r3
1000f0b4:	d100      	bne.n	1000f0b8 <at_ble_event_get+0x1bc>
1000f0b6:	e1a9      	b.n	1000f40c <at_ble_event_get+0x510>
1000f0b8:	d808      	bhi.n	1000f0cc <at_ble_event_get+0x1d0>
1000f0ba:	4b5b      	ldr	r3, [pc, #364]	; (1000f228 <at_ble_event_get+0x32c>)
1000f0bc:	429c      	cmp	r4, r3
1000f0be:	d100      	bne.n	1000f0c2 <at_ble_event_get+0x1c6>
1000f0c0:	e196      	b.n	1000f3f0 <at_ble_event_get+0x4f4>
1000f0c2:	4b5a      	ldr	r3, [pc, #360]	; (1000f22c <at_ble_event_get+0x330>)
1000f0c4:	429c      	cmp	r4, r3
1000f0c6:	d100      	bne.n	1000f0ca <at_ble_event_get+0x1ce>
1000f0c8:	e199      	b.n	1000f3fe <at_ble_event_get+0x502>
1000f0ca:	e0ff      	b.n	1000f2cc <at_ble_event_get+0x3d0>
1000f0cc:	4b58      	ldr	r3, [pc, #352]	; (1000f230 <at_ble_event_get+0x334>)
1000f0ce:	429c      	cmp	r4, r3
1000f0d0:	d100      	bne.n	1000f0d4 <at_ble_event_get+0x1d8>
1000f0d2:	e1a2      	b.n	1000f41a <at_ble_event_get+0x51e>
1000f0d4:	4b57      	ldr	r3, [pc, #348]	; (1000f234 <at_ble_event_get+0x338>)
1000f0d6:	429c      	cmp	r4, r3
1000f0d8:	d100      	bne.n	1000f0dc <at_ble_event_get+0x1e0>
1000f0da:	e1d4      	b.n	1000f486 <at_ble_event_get+0x58a>
1000f0dc:	e0f6      	b.n	1000f2cc <at_ble_event_get+0x3d0>
1000f0de:	4b56      	ldr	r3, [pc, #344]	; (1000f238 <at_ble_event_get+0x33c>)
1000f0e0:	429c      	cmp	r4, r3
1000f0e2:	d100      	bne.n	1000f0e6 <at_ble_event_get+0x1ea>
1000f0e4:	e1c8      	b.n	1000f478 <at_ble_event_get+0x57c>
1000f0e6:	d812      	bhi.n	1000f10e <at_ble_event_get+0x212>
1000f0e8:	4b54      	ldr	r3, [pc, #336]	; (1000f23c <at_ble_event_get+0x340>)
1000f0ea:	429c      	cmp	r4, r3
1000f0ec:	d100      	bne.n	1000f0f0 <at_ble_event_get+0x1f4>
1000f0ee:	e1d1      	b.n	1000f494 <at_ble_event_get+0x598>
1000f0f0:	d804      	bhi.n	1000f0fc <at_ble_event_get+0x200>
1000f0f2:	4b53      	ldr	r3, [pc, #332]	; (1000f240 <at_ble_event_get+0x344>)
1000f0f4:	429c      	cmp	r4, r3
1000f0f6:	d100      	bne.n	1000f0fa <at_ble_event_get+0x1fe>
1000f0f8:	e19b      	b.n	1000f432 <at_ble_event_get+0x536>
1000f0fa:	e0e7      	b.n	1000f2cc <at_ble_event_get+0x3d0>
1000f0fc:	4b51      	ldr	r3, [pc, #324]	; (1000f244 <at_ble_event_get+0x348>)
1000f0fe:	429c      	cmp	r4, r3
1000f100:	d100      	bne.n	1000f104 <at_ble_event_get+0x208>
1000f102:	e1ad      	b.n	1000f460 <at_ble_event_get+0x564>
1000f104:	4b50      	ldr	r3, [pc, #320]	; (1000f248 <at_ble_event_get+0x34c>)
1000f106:	429c      	cmp	r4, r3
1000f108:	d100      	bne.n	1000f10c <at_ble_event_get+0x210>
1000f10a:	e1b0      	b.n	1000f46e <at_ble_event_get+0x572>
1000f10c:	e0de      	b.n	1000f2cc <at_ble_event_get+0x3d0>
1000f10e:	4b4f      	ldr	r3, [pc, #316]	; (1000f24c <at_ble_event_get+0x350>)
1000f110:	429c      	cmp	r4, r3
1000f112:	d100      	bne.n	1000f116 <at_ble_event_get+0x21a>
1000f114:	e0e0      	b.n	1000f2d8 <at_ble_event_get+0x3dc>
1000f116:	d809      	bhi.n	1000f12c <at_ble_event_get+0x230>
1000f118:	3b08      	subs	r3, #8
1000f11a:	429c      	cmp	r4, r3
1000f11c:	d100      	bne.n	1000f120 <at_ble_event_get+0x224>
1000f11e:	e0d7      	b.n	1000f2d0 <at_ble_event_get+0x3d4>
1000f120:	4b4b      	ldr	r3, [pc, #300]	; (1000f250 <at_ble_event_get+0x354>)
1000f122:	2639      	movs	r6, #57	; 0x39
1000f124:	429c      	cmp	r4, r3
1000f126:	d100      	bne.n	1000f12a <at_ble_event_get+0x22e>
1000f128:	e1dd      	b.n	1000f4e6 <at_ble_event_get+0x5ea>
1000f12a:	e0cf      	b.n	1000f2cc <at_ble_event_get+0x3d0>
1000f12c:	23d1      	movs	r3, #209	; 0xd1
1000f12e:	011b      	lsls	r3, r3, #4
1000f130:	429c      	cmp	r4, r3
1000f132:	d100      	bne.n	1000f136 <at_ble_event_get+0x23a>
1000f134:	e0d6      	b.n	1000f2e4 <at_ble_event_get+0x3e8>
1000f136:	4b47      	ldr	r3, [pc, #284]	; (1000f254 <at_ble_event_get+0x358>)
1000f138:	429c      	cmp	r4, r3
1000f13a:	d100      	bne.n	1000f13e <at_ble_event_get+0x242>
1000f13c:	e0d8      	b.n	1000f2f0 <at_ble_event_get+0x3f4>
1000f13e:	e0c5      	b.n	1000f2cc <at_ble_event_get+0x3d0>
1000f140:	4b45      	ldr	r3, [pc, #276]	; (1000f258 <at_ble_event_get+0x35c>)
1000f142:	429c      	cmp	r4, r3
1000f144:	d100      	bne.n	1000f148 <at_ble_event_get+0x24c>
1000f146:	e117      	b.n	1000f378 <at_ble_event_get+0x47c>
1000f148:	d82e      	bhi.n	1000f1a8 <at_ble_event_get+0x2ac>
1000f14a:	4b44      	ldr	r3, [pc, #272]	; (1000f25c <at_ble_event_get+0x360>)
1000f14c:	429c      	cmp	r4, r3
1000f14e:	d100      	bne.n	1000f152 <at_ble_event_get+0x256>
1000f150:	e13d      	b.n	1000f3ce <at_ble_event_get+0x4d2>
1000f152:	d812      	bhi.n	1000f17a <at_ble_event_get+0x27e>
1000f154:	4b42      	ldr	r3, [pc, #264]	; (1000f260 <at_ble_event_get+0x364>)
1000f156:	429c      	cmp	r4, r3
1000f158:	d100      	bne.n	1000f15c <at_ble_event_get+0x260>
1000f15a:	e0e8      	b.n	1000f32e <at_ble_event_get+0x432>
1000f15c:	d804      	bhi.n	1000f168 <at_ble_event_get+0x26c>
1000f15e:	3b03      	subs	r3, #3
1000f160:	429c      	cmp	r4, r3
1000f162:	d100      	bne.n	1000f166 <at_ble_event_get+0x26a>
1000f164:	e0d0      	b.n	1000f308 <at_ble_event_get+0x40c>
1000f166:	e0b1      	b.n	1000f2cc <at_ble_event_get+0x3d0>
1000f168:	4b3e      	ldr	r3, [pc, #248]	; (1000f264 <at_ble_event_get+0x368>)
1000f16a:	429c      	cmp	r4, r3
1000f16c:	d100      	bne.n	1000f170 <at_ble_event_get+0x274>
1000f16e:	e0d0      	b.n	1000f312 <at_ble_event_get+0x416>
1000f170:	4b3d      	ldr	r3, [pc, #244]	; (1000f268 <at_ble_event_get+0x36c>)
1000f172:	429c      	cmp	r4, r3
1000f174:	d100      	bne.n	1000f178 <at_ble_event_get+0x27c>
1000f176:	e0f9      	b.n	1000f36c <at_ble_event_get+0x470>
1000f178:	e0a8      	b.n	1000f2cc <at_ble_event_get+0x3d0>
1000f17a:	4b3c      	ldr	r3, [pc, #240]	; (1000f26c <at_ble_event_get+0x370>)
1000f17c:	429c      	cmp	r4, r3
1000f17e:	d100      	bne.n	1000f182 <at_ble_event_get+0x286>
1000f180:	e0db      	b.n	1000f33a <at_ble_event_get+0x43e>
1000f182:	d808      	bhi.n	1000f196 <at_ble_event_get+0x29a>
1000f184:	4b3a      	ldr	r3, [pc, #232]	; (1000f270 <at_ble_event_get+0x374>)
1000f186:	429c      	cmp	r4, r3
1000f188:	d100      	bne.n	1000f18c <at_ble_event_get+0x290>
1000f18a:	e11b      	b.n	1000f3c4 <at_ble_event_get+0x4c8>
1000f18c:	4b39      	ldr	r3, [pc, #228]	; (1000f274 <at_ble_event_get+0x378>)
1000f18e:	429c      	cmp	r4, r3
1000f190:	d100      	bne.n	1000f194 <at_ble_event_get+0x298>
1000f192:	e0d8      	b.n	1000f346 <at_ble_event_get+0x44a>
1000f194:	e09a      	b.n	1000f2cc <at_ble_event_get+0x3d0>
1000f196:	4b38      	ldr	r3, [pc, #224]	; (1000f278 <at_ble_event_get+0x37c>)
1000f198:	429c      	cmp	r4, r3
1000f19a:	d100      	bne.n	1000f19e <at_ble_event_get+0x2a2>
1000f19c:	e0d8      	b.n	1000f350 <at_ble_event_get+0x454>
1000f19e:	4b37      	ldr	r3, [pc, #220]	; (1000f27c <at_ble_event_get+0x380>)
1000f1a0:	429c      	cmp	r4, r3
1000f1a2:	d100      	bne.n	1000f1a6 <at_ble_event_get+0x2aa>
1000f1a4:	e0db      	b.n	1000f35e <at_ble_event_get+0x462>
1000f1a6:	e091      	b.n	1000f2cc <at_ble_event_get+0x3d0>
1000f1a8:	4b35      	ldr	r3, [pc, #212]	; (1000f280 <at_ble_event_get+0x384>)
1000f1aa:	429c      	cmp	r4, r3
1000f1ac:	d100      	bne.n	1000f1b0 <at_ble_event_get+0x2b4>
1000f1ae:	e0f7      	b.n	1000f3a0 <at_ble_event_get+0x4a4>
1000f1b0:	d876      	bhi.n	1000f2a0 <at_ble_event_get+0x3a4>
1000f1b2:	4b34      	ldr	r3, [pc, #208]	; (1000f284 <at_ble_event_get+0x388>)
1000f1b4:	429c      	cmp	r4, r3
1000f1b6:	d100      	bne.n	1000f1ba <at_ble_event_get+0x2be>
1000f1b8:	e0f8      	b.n	1000f3ac <at_ble_event_get+0x4b0>
1000f1ba:	d869      	bhi.n	1000f290 <at_ble_event_get+0x394>
1000f1bc:	4b32      	ldr	r3, [pc, #200]	; (1000f288 <at_ble_event_get+0x38c>)
1000f1be:	429c      	cmp	r4, r3
1000f1c0:	d100      	bne.n	1000f1c4 <at_ble_event_get+0x2c8>
1000f1c2:	e0e0      	b.n	1000f386 <at_ble_event_get+0x48a>
1000f1c4:	4b31      	ldr	r3, [pc, #196]	; (1000f28c <at_ble_event_get+0x390>)
1000f1c6:	429c      	cmp	r4, r3
1000f1c8:	d100      	bne.n	1000f1cc <at_ble_event_get+0x2d0>
1000f1ca:	e0a9      	b.n	1000f320 <at_ble_event_get+0x424>
1000f1cc:	e07e      	b.n	1000f2cc <at_ble_event_get+0x3d0>
1000f1ce:	46c0      	nop			; (mov r8, r8)
1000f1d0:	10010901 	.word	0x10010901
1000f1d4:	1001a34c 	.word	0x1001a34c
1000f1d8:	1000e5f1 	.word	0x1000e5f1
1000f1dc:	1001a350 	.word	0x1001a350
1000f1e0:	1001a348 	.word	0x1001a348
1000f1e4:	1001a338 	.word	0x1001a338
1000f1e8:	1000ede5 	.word	0x1000ede5
1000f1ec:	100165d9 	.word	0x100165d9
1000f1f0:	0000ffff 	.word	0x0000ffff
1000f1f4:	0000fffe 	.word	0x0000fffe
1000f1f8:	1000e869 	.word	0x1000e869
1000f1fc:	10010903 	.word	0x10010903
1000f200:	0000201e 	.word	0x0000201e
1000f204:	0000201d 	.word	0x0000201d
1000f208:	00000c03 	.word	0x00000c03
1000f20c:	0000201f 	.word	0x0000201f
1000f210:	00000d1c 	.word	0x00000d1c
1000f214:	00000c0c 	.word	0x00000c0c
1000f218:	00000c02 	.word	0x00000c02
1000f21c:	00000a02 	.word	0x00000a02
1000f220:	00000a03 	.word	0x00000a03
1000f224:	00000c06 	.word	0x00000c06
1000f228:	00000c04 	.word	0x00000c04
1000f22c:	00000c05 	.word	0x00000c05
1000f230:	00000c07 	.word	0x00000c07
1000f234:	00000c09 	.word	0x00000c09
1000f238:	00000c17 	.word	0x00000c17
1000f23c:	00000c12 	.word	0x00000c12
1000f240:	00000c0d 	.word	0x00000c0d
1000f244:	00000c13 	.word	0x00000c13
1000f248:	00000c15 	.word	0x00000c15
1000f24c:	00000d08 	.word	0x00000d08
1000f250:	00000d01 	.word	0x00000d01
1000f254:	00000d15 	.word	0x00000d15
1000f258:	00000e1b 	.word	0x00000e1b
1000f25c:	00000e0f 	.word	0x00000e0f
1000f260:	00000e03 	.word	0x00000e03
1000f264:	00000e06 	.word	0x00000e06
1000f268:	00000e0a 	.word	0x00000e0a
1000f26c:	00000e15 	.word	0x00000e15
1000f270:	00000e11 	.word	0x00000e11
1000f274:	00000e13 	.word	0x00000e13
1000f278:	00000e17 	.word	0x00000e17
1000f27c:	00000e19 	.word	0x00000e19
1000f280:	00000e27 	.word	0x00000e27
1000f284:	00000e21 	.word	0x00000e21
1000f288:	00000e1c 	.word	0x00000e1c
1000f28c:	00000e1d 	.word	0x00000e1d
1000f290:	4b9f      	ldr	r3, [pc, #636]	; (1000f510 <at_ble_event_get+0x614>)
1000f292:	429c      	cmp	r4, r3
1000f294:	d07e      	beq.n	1000f394 <at_ble_event_get+0x498>
1000f296:	4b9f      	ldr	r3, [pc, #636]	; (1000f514 <at_ble_event_get+0x618>)
1000f298:	429c      	cmp	r4, r3
1000f29a:	d100      	bne.n	1000f29e <at_ble_event_get+0x3a2>
1000f29c:	e08c      	b.n	1000f3b8 <at_ble_event_get+0x4bc>
1000f29e:	e015      	b.n	1000f2cc <at_ble_event_get+0x3d0>
1000f2a0:	4b9d      	ldr	r3, [pc, #628]	; (1000f518 <at_ble_event_get+0x61c>)
1000f2a2:	429c      	cmp	r4, r3
1000f2a4:	d100      	bne.n	1000f2a8 <at_ble_event_get+0x3ac>
1000f2a6:	e10a      	b.n	1000f4be <at_ble_event_get+0x5c2>
1000f2a8:	d808      	bhi.n	1000f2bc <at_ble_event_get+0x3c0>
1000f2aa:	4b9c      	ldr	r3, [pc, #624]	; (1000f51c <at_ble_event_get+0x620>)
1000f2ac:	429c      	cmp	r4, r3
1000f2ae:	d100      	bne.n	1000f2b2 <at_ble_event_get+0x3b6>
1000f2b0:	e0f7      	b.n	1000f4a2 <at_ble_event_get+0x5a6>
1000f2b2:	4b9b      	ldr	r3, [pc, #620]	; (1000f520 <at_ble_event_get+0x624>)
1000f2b4:	429c      	cmp	r4, r3
1000f2b6:	d100      	bne.n	1000f2ba <at_ble_event_get+0x3be>
1000f2b8:	e0fa      	b.n	1000f4b0 <at_ble_event_get+0x5b4>
1000f2ba:	e007      	b.n	1000f2cc <at_ble_event_get+0x3d0>
1000f2bc:	4b99      	ldr	r3, [pc, #612]	; (1000f524 <at_ble_event_get+0x628>)
1000f2be:	429c      	cmp	r4, r3
1000f2c0:	d100      	bne.n	1000f2c4 <at_ble_event_get+0x3c8>
1000f2c2:	e103      	b.n	1000f4cc <at_ble_event_get+0x5d0>
1000f2c4:	4b98      	ldr	r3, [pc, #608]	; (1000f528 <at_ble_event_get+0x62c>)
1000f2c6:	429c      	cmp	r4, r3
1000f2c8:	d100      	bne.n	1000f2cc <at_ble_event_get+0x3d0>
1000f2ca:	e106      	b.n	1000f4da <at_ble_event_get+0x5de>
1000f2cc:	2600      	movs	r6, #0
1000f2ce:	e10a      	b.n	1000f4e6 <at_ble_event_get+0x5ea>
1000f2d0:	1c30      	adds	r0, r6, #0
1000f2d2:	1c29      	adds	r1, r5, #0
1000f2d4:	4b95      	ldr	r3, [pc, #596]	; (1000f52c <at_ble_event_get+0x630>)
1000f2d6:	e014      	b.n	1000f302 <at_ble_event_get+0x406>
1000f2d8:	1c30      	adds	r0, r6, #0
1000f2da:	1c29      	adds	r1, r5, #0
1000f2dc:	4b94      	ldr	r3, [pc, #592]	; (1000f530 <at_ble_event_get+0x634>)
1000f2de:	4798      	blx	r3
1000f2e0:	2604      	movs	r6, #4
1000f2e2:	e100      	b.n	1000f4e6 <at_ble_event_get+0x5ea>
1000f2e4:	1c30      	adds	r0, r6, #0
1000f2e6:	1c29      	adds	r1, r5, #0
1000f2e8:	4b92      	ldr	r3, [pc, #584]	; (1000f534 <at_ble_event_get+0x638>)
1000f2ea:	4798      	blx	r3
1000f2ec:	2601      	movs	r6, #1
1000f2ee:	e0fa      	b.n	1000f4e6 <at_ble_event_get+0x5ea>
1000f2f0:	1c30      	adds	r0, r6, #0
1000f2f2:	1c29      	adds	r1, r5, #0
1000f2f4:	4b90      	ldr	r3, [pc, #576]	; (1000f538 <at_ble_event_get+0x63c>)
1000f2f6:	4798      	blx	r3
1000f2f8:	260f      	movs	r6, #15
1000f2fa:	e0f4      	b.n	1000f4e6 <at_ble_event_get+0x5ea>
1000f2fc:	1c30      	adds	r0, r6, #0
1000f2fe:	1c29      	adds	r1, r5, #0
1000f300:	4b8e      	ldr	r3, [pc, #568]	; (1000f53c <at_ble_event_get+0x640>)
1000f302:	4798      	blx	r3
1000f304:	1c06      	adds	r6, r0, #0
1000f306:	e0ee      	b.n	1000f4e6 <at_ble_event_get+0x5ea>
1000f308:	9801      	ldr	r0, [sp, #4]
1000f30a:	1c31      	adds	r1, r6, #0
1000f30c:	1c2a      	adds	r2, r5, #0
1000f30e:	4b8c      	ldr	r3, [pc, #560]	; (1000f540 <at_ble_event_get+0x644>)
1000f310:	e017      	b.n	1000f342 <at_ble_event_get+0x446>
1000f312:	1c31      	adds	r1, r6, #0
1000f314:	9801      	ldr	r0, [sp, #4]
1000f316:	1c2a      	adds	r2, r5, #0
1000f318:	4b8a      	ldr	r3, [pc, #552]	; (1000f544 <at_ble_event_get+0x648>)
1000f31a:	4798      	blx	r3
1000f31c:	2611      	movs	r6, #17
1000f31e:	e0e2      	b.n	1000f4e6 <at_ble_event_get+0x5ea>
1000f320:	1c31      	adds	r1, r6, #0
1000f322:	9801      	ldr	r0, [sp, #4]
1000f324:	1c2a      	adds	r2, r5, #0
1000f326:	4b88      	ldr	r3, [pc, #544]	; (1000f548 <at_ble_event_get+0x64c>)
1000f328:	4798      	blx	r3
1000f32a:	2612      	movs	r6, #18
1000f32c:	e0db      	b.n	1000f4e6 <at_ble_event_get+0x5ea>
1000f32e:	1c30      	adds	r0, r6, #0
1000f330:	1c29      	adds	r1, r5, #0
1000f332:	4b86      	ldr	r3, [pc, #536]	; (1000f54c <at_ble_event_get+0x650>)
1000f334:	4798      	blx	r3
1000f336:	2606      	movs	r6, #6
1000f338:	e0d5      	b.n	1000f4e6 <at_ble_event_get+0x5ea>
1000f33a:	1c31      	adds	r1, r6, #0
1000f33c:	1c2a      	adds	r2, r5, #0
1000f33e:	9801      	ldr	r0, [sp, #4]
1000f340:	4b83      	ldr	r3, [pc, #524]	; (1000f550 <at_ble_event_get+0x654>)
1000f342:	4798      	blx	r3
1000f344:	e7de      	b.n	1000f304 <at_ble_event_get+0x408>
1000f346:	9801      	ldr	r0, [sp, #4]
1000f348:	1c31      	adds	r1, r6, #0
1000f34a:	1c2a      	adds	r2, r5, #0
1000f34c:	4b81      	ldr	r3, [pc, #516]	; (1000f554 <at_ble_event_get+0x658>)
1000f34e:	e7f8      	b.n	1000f342 <at_ble_event_get+0x446>
1000f350:	1c31      	adds	r1, r6, #0
1000f352:	9801      	ldr	r0, [sp, #4]
1000f354:	1c2a      	adds	r2, r5, #0
1000f356:	4b80      	ldr	r3, [pc, #512]	; (1000f558 <at_ble_event_get+0x65c>)
1000f358:	4798      	blx	r3
1000f35a:	260d      	movs	r6, #13
1000f35c:	e0c3      	b.n	1000f4e6 <at_ble_event_get+0x5ea>
1000f35e:	1c31      	adds	r1, r6, #0
1000f360:	9801      	ldr	r0, [sp, #4]
1000f362:	1c2a      	adds	r2, r5, #0
1000f364:	4b7d      	ldr	r3, [pc, #500]	; (1000f55c <at_ble_event_get+0x660>)
1000f366:	4798      	blx	r3
1000f368:	260e      	movs	r6, #14
1000f36a:	e0bc      	b.n	1000f4e6 <at_ble_event_get+0x5ea>
1000f36c:	9801      	ldr	r0, [sp, #4]
1000f36e:	1c31      	adds	r1, r6, #0
1000f370:	1c2a      	adds	r2, r5, #0
1000f372:	4b7b      	ldr	r3, [pc, #492]	; (1000f560 <at_ble_event_get+0x664>)
1000f374:	4798      	blx	r3
1000f376:	e084      	b.n	1000f482 <at_ble_event_get+0x586>
1000f378:	1c31      	adds	r1, r6, #0
1000f37a:	9801      	ldr	r0, [sp, #4]
1000f37c:	1c2a      	adds	r2, r5, #0
1000f37e:	4b79      	ldr	r3, [pc, #484]	; (1000f564 <at_ble_event_get+0x668>)
1000f380:	4798      	blx	r3
1000f382:	260b      	movs	r6, #11
1000f384:	e0af      	b.n	1000f4e6 <at_ble_event_get+0x5ea>
1000f386:	1c31      	adds	r1, r6, #0
1000f388:	9801      	ldr	r0, [sp, #4]
1000f38a:	1c2a      	adds	r2, r5, #0
1000f38c:	4b76      	ldr	r3, [pc, #472]	; (1000f568 <at_ble_event_get+0x66c>)
1000f38e:	4798      	blx	r3
1000f390:	2610      	movs	r6, #16
1000f392:	e0a8      	b.n	1000f4e6 <at_ble_event_get+0x5ea>
1000f394:	1c30      	adds	r0, r6, #0
1000f396:	1c29      	adds	r1, r5, #0
1000f398:	4b74      	ldr	r3, [pc, #464]	; (1000f56c <at_ble_event_get+0x670>)
1000f39a:	4798      	blx	r3
1000f39c:	2628      	movs	r6, #40	; 0x28
1000f39e:	e0a2      	b.n	1000f4e6 <at_ble_event_get+0x5ea>
1000f3a0:	1c30      	adds	r0, r6, #0
1000f3a2:	1c29      	adds	r1, r5, #0
1000f3a4:	4b72      	ldr	r3, [pc, #456]	; (1000f570 <at_ble_event_get+0x674>)
1000f3a6:	4798      	blx	r3
1000f3a8:	2629      	movs	r6, #41	; 0x29
1000f3aa:	e09c      	b.n	1000f4e6 <at_ble_event_get+0x5ea>
1000f3ac:	1c30      	adds	r0, r6, #0
1000f3ae:	1c29      	adds	r1, r5, #0
1000f3b0:	4b70      	ldr	r3, [pc, #448]	; (1000f574 <at_ble_event_get+0x678>)
1000f3b2:	4798      	blx	r3
1000f3b4:	2627      	movs	r6, #39	; 0x27
1000f3b6:	e096      	b.n	1000f4e6 <at_ble_event_get+0x5ea>
1000f3b8:	1c30      	adds	r0, r6, #0
1000f3ba:	1c29      	adds	r1, r5, #0
1000f3bc:	4b6e      	ldr	r3, [pc, #440]	; (1000f578 <at_ble_event_get+0x67c>)
1000f3be:	4798      	blx	r3
1000f3c0:	262a      	movs	r6, #42	; 0x2a
1000f3c2:	e090      	b.n	1000f4e6 <at_ble_event_get+0x5ea>
1000f3c4:	9801      	ldr	r0, [sp, #4]
1000f3c6:	1c31      	adds	r1, r6, #0
1000f3c8:	1c2a      	adds	r2, r5, #0
1000f3ca:	4b6c      	ldr	r3, [pc, #432]	; (1000f57c <at_ble_event_get+0x680>)
1000f3cc:	e7b9      	b.n	1000f342 <at_ble_event_get+0x446>
1000f3ce:	9801      	ldr	r0, [sp, #4]
1000f3d0:	1c31      	adds	r1, r6, #0
1000f3d2:	1c2a      	adds	r2, r5, #0
1000f3d4:	4b6a      	ldr	r3, [pc, #424]	; (1000f580 <at_ble_event_get+0x684>)
1000f3d6:	e7b4      	b.n	1000f342 <at_ble_event_get+0x446>
1000f3d8:	1c30      	adds	r0, r6, #0
1000f3da:	1c29      	adds	r1, r5, #0
1000f3dc:	4b69      	ldr	r3, [pc, #420]	; (1000f584 <at_ble_event_get+0x688>)
1000f3de:	4798      	blx	r3
1000f3e0:	262b      	movs	r6, #43	; 0x2b
1000f3e2:	e080      	b.n	1000f4e6 <at_ble_event_get+0x5ea>
1000f3e4:	1c30      	adds	r0, r6, #0
1000f3e6:	1c29      	adds	r1, r5, #0
1000f3e8:	4b67      	ldr	r3, [pc, #412]	; (1000f588 <at_ble_event_get+0x68c>)
1000f3ea:	4798      	blx	r3
1000f3ec:	262c      	movs	r6, #44	; 0x2c
1000f3ee:	e07a      	b.n	1000f4e6 <at_ble_event_get+0x5ea>
1000f3f0:	1c31      	adds	r1, r6, #0
1000f3f2:	9801      	ldr	r0, [sp, #4]
1000f3f4:	1c2a      	adds	r2, r5, #0
1000f3f6:	4b65      	ldr	r3, [pc, #404]	; (1000f58c <at_ble_event_get+0x690>)
1000f3f8:	4798      	blx	r3
1000f3fa:	2613      	movs	r6, #19
1000f3fc:	e073      	b.n	1000f4e6 <at_ble_event_get+0x5ea>
1000f3fe:	1c31      	adds	r1, r6, #0
1000f400:	9801      	ldr	r0, [sp, #4]
1000f402:	1c2a      	adds	r2, r5, #0
1000f404:	4b62      	ldr	r3, [pc, #392]	; (1000f590 <at_ble_event_get+0x694>)
1000f406:	4798      	blx	r3
1000f408:	2614      	movs	r6, #20
1000f40a:	e06c      	b.n	1000f4e6 <at_ble_event_get+0x5ea>
1000f40c:	1c31      	adds	r1, r6, #0
1000f40e:	9801      	ldr	r0, [sp, #4]
1000f410:	1c2a      	adds	r2, r5, #0
1000f412:	4b60      	ldr	r3, [pc, #384]	; (1000f594 <at_ble_event_get+0x698>)
1000f414:	4798      	blx	r3
1000f416:	2615      	movs	r6, #21
1000f418:	e065      	b.n	1000f4e6 <at_ble_event_get+0x5ea>
1000f41a:	1c31      	adds	r1, r6, #0
1000f41c:	9801      	ldr	r0, [sp, #4]
1000f41e:	1c2a      	adds	r2, r5, #0
1000f420:	4b5d      	ldr	r3, [pc, #372]	; (1000f598 <at_ble_event_get+0x69c>)
1000f422:	4798      	blx	r3
1000f424:	2616      	movs	r6, #22
1000f426:	e05e      	b.n	1000f4e6 <at_ble_event_get+0x5ea>
1000f428:	9801      	ldr	r0, [sp, #4]
1000f42a:	1c31      	adds	r1, r6, #0
1000f42c:	1c2a      	adds	r2, r5, #0
1000f42e:	4b5b      	ldr	r3, [pc, #364]	; (1000f59c <at_ble_event_get+0x6a0>)
1000f430:	e787      	b.n	1000f342 <at_ble_event_get+0x446>
1000f432:	1c31      	adds	r1, r6, #0
1000f434:	9801      	ldr	r0, [sp, #4]
1000f436:	1c2a      	adds	r2, r5, #0
1000f438:	4b58      	ldr	r3, [pc, #352]	; (1000f59c <at_ble_event_get+0x6a0>)
1000f43a:	4798      	blx	r3
1000f43c:	88a9      	ldrh	r1, [r5, #4]
1000f43e:	1c06      	adds	r6, r0, #0
1000f440:	4b57      	ldr	r3, [pc, #348]	; (1000f5a0 <at_ble_event_get+0x6a4>)
1000f442:	8828      	ldrh	r0, [r5, #0]
1000f444:	4798      	blx	r3
1000f446:	e04e      	b.n	1000f4e6 <at_ble_event_get+0x5ea>
1000f448:	1c31      	adds	r1, r6, #0
1000f44a:	9801      	ldr	r0, [sp, #4]
1000f44c:	1c2a      	adds	r2, r5, #0
1000f44e:	4b55      	ldr	r3, [pc, #340]	; (1000f5a4 <at_ble_event_get+0x6a8>)
1000f450:	4798      	blx	r3
1000f452:	2623      	movs	r6, #35	; 0x23
1000f454:	e047      	b.n	1000f4e6 <at_ble_event_get+0x5ea>
1000f456:	9801      	ldr	r0, [sp, #4]
1000f458:	1c31      	adds	r1, r6, #0
1000f45a:	1c2a      	adds	r2, r5, #0
1000f45c:	4b52      	ldr	r3, [pc, #328]	; (1000f5a8 <at_ble_event_get+0x6ac>)
1000f45e:	e770      	b.n	1000f342 <at_ble_event_get+0x446>
1000f460:	9b01      	ldr	r3, [sp, #4]
1000f462:	1c30      	adds	r0, r6, #0
1000f464:	0a1f      	lsrs	r7, r3, #8
1000f466:	802f      	strh	r7, [r5, #0]
1000f468:	1c29      	adds	r1, r5, #0
1000f46a:	4b50      	ldr	r3, [pc, #320]	; (1000f5ac <at_ble_event_get+0x6b0>)
1000f46c:	e749      	b.n	1000f302 <at_ble_event_get+0x406>
1000f46e:	9801      	ldr	r0, [sp, #4]
1000f470:	1c31      	adds	r1, r6, #0
1000f472:	1c2a      	adds	r2, r5, #0
1000f474:	4b4e      	ldr	r3, [pc, #312]	; (1000f5b0 <at_ble_event_get+0x6b4>)
1000f476:	e764      	b.n	1000f342 <at_ble_event_get+0x446>
1000f478:	1c30      	adds	r0, r6, #0
1000f47a:	1c29      	adds	r1, r5, #0
1000f47c:	9a01      	ldr	r2, [sp, #4]
1000f47e:	4b4d      	ldr	r3, [pc, #308]	; (1000f5b4 <at_ble_event_get+0x6b8>)
1000f480:	4798      	blx	r3
1000f482:	263b      	movs	r6, #59	; 0x3b
1000f484:	e02f      	b.n	1000f4e6 <at_ble_event_get+0x5ea>
1000f486:	1c31      	adds	r1, r6, #0
1000f488:	9801      	ldr	r0, [sp, #4]
1000f48a:	1c2a      	adds	r2, r5, #0
1000f48c:	4b4a      	ldr	r3, [pc, #296]	; (1000f5b8 <at_ble_event_get+0x6bc>)
1000f48e:	4798      	blx	r3
1000f490:	2618      	movs	r6, #24
1000f492:	e028      	b.n	1000f4e6 <at_ble_event_get+0x5ea>
1000f494:	1c31      	adds	r1, r6, #0
1000f496:	9801      	ldr	r0, [sp, #4]
1000f498:	1c2a      	adds	r2, r5, #0
1000f49a:	4b48      	ldr	r3, [pc, #288]	; (1000f5bc <at_ble_event_get+0x6c0>)
1000f49c:	4798      	blx	r3
1000f49e:	2620      	movs	r6, #32
1000f4a0:	e021      	b.n	1000f4e6 <at_ble_event_get+0x5ea>
1000f4a2:	1c31      	adds	r1, r6, #0
1000f4a4:	9801      	ldr	r0, [sp, #4]
1000f4a6:	1c2a      	adds	r2, r5, #0
1000f4a8:	4b45      	ldr	r3, [pc, #276]	; (1000f5c0 <at_ble_event_get+0x6c4>)
1000f4aa:	4798      	blx	r3
1000f4ac:	2633      	movs	r6, #51	; 0x33
1000f4ae:	e01a      	b.n	1000f4e6 <at_ble_event_get+0x5ea>
1000f4b0:	1c31      	adds	r1, r6, #0
1000f4b2:	9801      	ldr	r0, [sp, #4]
1000f4b4:	1c2a      	adds	r2, r5, #0
1000f4b6:	4b43      	ldr	r3, [pc, #268]	; (1000f5c4 <at_ble_event_get+0x6c8>)
1000f4b8:	4798      	blx	r3
1000f4ba:	2630      	movs	r6, #48	; 0x30
1000f4bc:	e013      	b.n	1000f4e6 <at_ble_event_get+0x5ea>
1000f4be:	1c31      	adds	r1, r6, #0
1000f4c0:	9801      	ldr	r0, [sp, #4]
1000f4c2:	1c2a      	adds	r2, r5, #0
1000f4c4:	4b40      	ldr	r3, [pc, #256]	; (1000f5c8 <at_ble_event_get+0x6cc>)
1000f4c6:	4798      	blx	r3
1000f4c8:	2634      	movs	r6, #52	; 0x34
1000f4ca:	e00c      	b.n	1000f4e6 <at_ble_event_get+0x5ea>
1000f4cc:	1c31      	adds	r1, r6, #0
1000f4ce:	9801      	ldr	r0, [sp, #4]
1000f4d0:	1c2a      	adds	r2, r5, #0
1000f4d2:	4b3e      	ldr	r3, [pc, #248]	; (1000f5cc <at_ble_event_get+0x6d0>)
1000f4d4:	4798      	blx	r3
1000f4d6:	2635      	movs	r6, #53	; 0x35
1000f4d8:	e005      	b.n	1000f4e6 <at_ble_event_get+0x5ea>
1000f4da:	1c31      	adds	r1, r6, #0
1000f4dc:	9801      	ldr	r0, [sp, #4]
1000f4de:	1c2a      	adds	r2, r5, #0
1000f4e0:	4b3b      	ldr	r3, [pc, #236]	; (1000f5d0 <at_ble_event_get+0x6d4>)
1000f4e2:	4798      	blx	r3
1000f4e4:	2632      	movs	r6, #50	; 0x32
1000f4e6:	9b03      	ldr	r3, [sp, #12]
1000f4e8:	701e      	strb	r6, [r3, #0]
1000f4ea:	2300      	movs	r3, #0
1000f4ec:	9302      	str	r3, [sp, #8]
1000f4ee:	e57a      	b.n	1000efe6 <at_ble_event_get+0xea>
1000f4f0:	23d0      	movs	r3, #208	; 0xd0
1000f4f2:	e7fb      	b.n	1000f4ec <at_ble_event_get+0x5f0>
1000f4f4:	9b01      	ldr	r3, [sp, #4]
1000f4f6:	9e02      	ldr	r6, [sp, #8]
1000f4f8:	2bbb      	cmp	r3, #187	; 0xbb
1000f4fa:	d000      	beq.n	1000f4fe <at_ble_event_get+0x602>
1000f4fc:	e6e6      	b.n	1000f2cc <at_ble_event_get+0x3d0>
1000f4fe:	e7f2      	b.n	1000f4e6 <at_ble_event_get+0x5ea>
1000f500:	9b02      	ldr	r3, [sp, #8]
1000f502:	2b00      	cmp	r3, #0
1000f504:	d000      	beq.n	1000f508 <at_ble_event_get+0x60c>
1000f506:	e56e      	b.n	1000efe6 <at_ble_event_get+0xea>
1000f508:	e6e0      	b.n	1000f2cc <at_ble_event_get+0x3d0>
1000f50a:	9802      	ldr	r0, [sp, #8]
1000f50c:	b007      	add	sp, #28
1000f50e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f510:	00000e22 	.word	0x00000e22
1000f514:	00000e25 	.word	0x00000e25
1000f518:	00001b05 	.word	0x00001b05
1000f51c:	00001b01 	.word	0x00001b01
1000f520:	00001b03 	.word	0x00001b03
1000f524:	00001b06 	.word	0x00001b06
1000f528:	00001b08 	.word	0x00001b08
1000f52c:	1001172d 	.word	0x1001172d
1000f530:	10011711 	.word	0x10011711
1000f534:	100119ad 	.word	0x100119ad
1000f538:	10011a9d 	.word	0x10011a9d
1000f53c:	10011ac1 	.word	0x10011ac1
1000f540:	10010aa5 	.word	0x10010aa5
1000f544:	10011325 	.word	0x10011325
1000f548:	100113a1 	.word	0x100113a1
1000f54c:	10010d5d 	.word	0x10010d5d
1000f550:	10010df9 	.word	0x10010df9
1000f554:	10010ed1 	.word	0x10010ed1
1000f558:	10011159 	.word	0x10011159
1000f55c:	100111f9 	.word	0x100111f9
1000f560:	100112b1 	.word	0x100112b1
1000f564:	100112d9 	.word	0x100112d9
1000f568:	100112ef 	.word	0x100112ef
1000f56c:	100113b9 	.word	0x100113b9
1000f570:	100113e7 	.word	0x100113e7
1000f574:	100113fd 	.word	0x100113fd
1000f578:	10011427 	.word	0x10011427
1000f57c:	10011255 	.word	0x10011255
1000f580:	1001127f 	.word	0x1001127f
1000f584:	100104e5 	.word	0x100104e5
1000f588:	10010511 	.word	0x10010511
1000f58c:	10011ce1 	.word	0x10011ce1
1000f590:	10011d1d 	.word	0x10011d1d
1000f594:	10011d65 	.word	0x10011d65
1000f598:	10011da9 	.word	0x10011da9
1000f59c:	10011ddd 	.word	0x10011ddd
1000f5a0:	10011ca1 	.word	0x10011ca1
1000f5a4:	10011ea9 	.word	0x10011ea9
1000f5a8:	10011e31 	.word	0x10011e31
1000f5ac:	100103c9 	.word	0x100103c9
1000f5b0:	10010435 	.word	0x10010435
1000f5b4:	100103f9 	.word	0x100103f9
1000f5b8:	10011eb9 	.word	0x10011eb9
1000f5bc:	10011ef9 	.word	0x10011ef9
1000f5c0:	100121c1 	.word	0x100121c1
1000f5c4:	100121cb 	.word	0x100121cb
1000f5c8:	100121d1 	.word	0x100121d1
1000f5cc:	100121d7 	.word	0x100121d7
1000f5d0:	100121e3 	.word	0x100121e3

1000f5d4 <internal_event_flush>:
1000f5d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f5d6:	490e      	ldr	r1, [pc, #56]	; (1000f610 <internal_event_flush+0x3c>)
1000f5d8:	2400      	movs	r4, #0
1000f5da:	680b      	ldr	r3, [r1, #0]
1000f5dc:	1c0f      	adds	r7, r1, #0
1000f5de:	1c1e      	adds	r6, r3, #0
1000f5e0:	4a0c      	ldr	r2, [pc, #48]	; (1000f614 <internal_event_flush+0x40>)
1000f5e2:	6815      	ldr	r5, [r2, #0]
1000f5e4:	9201      	str	r2, [sp, #4]
1000f5e6:	2b00      	cmp	r3, #0
1000f5e8:	d00e      	beq.n	1000f608 <internal_event_flush+0x34>
1000f5ea:	889a      	ldrh	r2, [r3, #4]
1000f5ec:	6819      	ldr	r1, [r3, #0]
1000f5ee:	4282      	cmp	r2, r0
1000f5f0:	d107      	bne.n	1000f602 <internal_event_flush+0x2e>
1000f5f2:	2c00      	cmp	r4, #0
1000f5f4:	d001      	beq.n	1000f5fa <internal_event_flush+0x26>
1000f5f6:	6021      	str	r1, [r4, #0]
1000f5f8:	e000      	b.n	1000f5fc <internal_event_flush+0x28>
1000f5fa:	1c0e      	adds	r6, r1, #0
1000f5fc:	601d      	str	r5, [r3, #0]
1000f5fe:	1c1d      	adds	r5, r3, #0
1000f600:	1c23      	adds	r3, r4, #0
1000f602:	1c1c      	adds	r4, r3, #0
1000f604:	1c0b      	adds	r3, r1, #0
1000f606:	e7ee      	b.n	1000f5e6 <internal_event_flush+0x12>
1000f608:	9b01      	ldr	r3, [sp, #4]
1000f60a:	603e      	str	r6, [r7, #0]
1000f60c:	601d      	str	r5, [r3, #0]
1000f60e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000f610:	1001a34c 	.word	0x1001a34c
1000f614:	1001a350 	.word	0x1001a350

1000f618 <internal_conn_flush>:
1000f618:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f61a:	4a12      	ldr	r2, [pc, #72]	; (1000f664 <internal_conn_flush+0x4c>)
1000f61c:	9000      	str	r0, [sp, #0]
1000f61e:	6813      	ldr	r3, [r2, #0]
1000f620:	4811      	ldr	r0, [pc, #68]	; (1000f668 <internal_conn_flush+0x50>)
1000f622:	1c1f      	adds	r7, r3, #0
1000f624:	2100      	movs	r1, #0
1000f626:	4684      	mov	ip, r0
1000f628:	6804      	ldr	r4, [r0, #0]
1000f62a:	9201      	str	r2, [sp, #4]
1000f62c:	2b00      	cmp	r3, #0
1000f62e:	d014      	beq.n	1000f65a <internal_conn_flush+0x42>
1000f630:	88d8      	ldrh	r0, [r3, #6]
1000f632:	9a00      	ldr	r2, [sp, #0]
1000f634:	681d      	ldr	r5, [r3, #0]
1000f636:	0a06      	lsrs	r6, r0, #8
1000f638:	4296      	cmp	r6, r2
1000f63a:	d10b      	bne.n	1000f654 <internal_conn_flush+0x3c>
1000f63c:	26fd      	movs	r6, #253	; 0xfd
1000f63e:	4006      	ands	r6, r0
1000f640:	2e0c      	cmp	r6, #12
1000f642:	d107      	bne.n	1000f654 <internal_conn_flush+0x3c>
1000f644:	2900      	cmp	r1, #0
1000f646:	d001      	beq.n	1000f64c <internal_conn_flush+0x34>
1000f648:	600d      	str	r5, [r1, #0]
1000f64a:	e000      	b.n	1000f64e <internal_conn_flush+0x36>
1000f64c:	1c2f      	adds	r7, r5, #0
1000f64e:	601c      	str	r4, [r3, #0]
1000f650:	1c1c      	adds	r4, r3, #0
1000f652:	1c0b      	adds	r3, r1, #0
1000f654:	1c19      	adds	r1, r3, #0
1000f656:	1c2b      	adds	r3, r5, #0
1000f658:	e7e8      	b.n	1000f62c <internal_conn_flush+0x14>
1000f65a:	9b01      	ldr	r3, [sp, #4]
1000f65c:	601f      	str	r7, [r3, #0]
1000f65e:	4663      	mov	r3, ip
1000f660:	601c      	str	r4, [r3, #0]
1000f662:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000f664:	1001a34c 	.word	0x1001a34c
1000f668:	1001a350 	.word	0x1001a350

1000f66c <at_ble_device_name_set>:
1000f66c:	b530      	push	{r4, r5, lr}
1000f66e:	23cf      	movs	r3, #207	; 0xcf
1000f670:	2800      	cmp	r0, #0
1000f672:	d010      	beq.n	1000f696 <at_ble_device_name_set+0x2a>
1000f674:	1e4a      	subs	r2, r1, #1
1000f676:	2a1f      	cmp	r2, #31
1000f678:	d80d      	bhi.n	1000f696 <at_ble_device_name_set+0x2a>
1000f67a:	4a08      	ldr	r2, [pc, #32]	; (1000f69c <at_ble_device_name_set+0x30>)
1000f67c:	1c13      	adds	r3, r2, #0
1000f67e:	33aa      	adds	r3, #170	; 0xaa
1000f680:	8019      	strh	r1, [r3, #0]
1000f682:	2300      	movs	r3, #0
1000f684:	1c1c      	adds	r4, r3, #0
1000f686:	5cc5      	ldrb	r5, [r0, r3]
1000f688:	34ac      	adds	r4, #172	; 0xac
1000f68a:	3301      	adds	r3, #1
1000f68c:	5515      	strb	r5, [r2, r4]
1000f68e:	b2dc      	uxtb	r4, r3
1000f690:	428c      	cmp	r4, r1
1000f692:	d3f7      	bcc.n	1000f684 <at_ble_device_name_set+0x18>
1000f694:	2300      	movs	r3, #0
1000f696:	1c18      	adds	r0, r3, #0
1000f698:	bd30      	pop	{r4, r5, pc}
1000f69a:	46c0      	nop			; (mov r8, r8)
1000f69c:	1001b34e 	.word	0x1001b34e

1000f6a0 <at_ble_addr_get>:
1000f6a0:	b510      	push	{r4, lr}
1000f6a2:	1c04      	adds	r4, r0, #0
1000f6a4:	20cf      	movs	r0, #207	; 0xcf
1000f6a6:	2c00      	cmp	r4, #0
1000f6a8:	d006      	beq.n	1000f6b8 <at_ble_addr_get+0x18>
1000f6aa:	4b04      	ldr	r3, [pc, #16]	; (1000f6bc <at_ble_addr_get+0x1c>)
1000f6ac:	38ce      	subs	r0, #206	; 0xce
1000f6ae:	1c21      	adds	r1, r4, #0
1000f6b0:	4798      	blx	r3
1000f6b2:	4b03      	ldr	r3, [pc, #12]	; (1000f6c0 <at_ble_addr_get+0x20>)
1000f6b4:	791b      	ldrb	r3, [r3, #4]
1000f6b6:	7023      	strb	r3, [r4, #0]
1000f6b8:	bd10      	pop	{r4, pc}
1000f6ba:	46c0      	nop			; (mov r8, r8)
1000f6bc:	100115c1 	.word	0x100115c1
1000f6c0:	1001b34e 	.word	0x1001b34e

1000f6c4 <at_ble_set_dev_config>:
1000f6c4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f6c6:	7906      	ldrb	r6, [r0, #4]
1000f6c8:	b089      	sub	sp, #36	; 0x24
1000f6ca:	25cf      	movs	r5, #207	; 0xcf
1000f6cc:	2e03      	cmp	r6, #3
1000f6ce:	d838      	bhi.n	1000f742 <at_ble_set_dev_config+0x7e>
1000f6d0:	7803      	ldrb	r3, [r0, #0]
1000f6d2:	3511      	adds	r5, #17
1000f6d4:	2b0f      	cmp	r3, #15
1000f6d6:	d834      	bhi.n	1000f742 <at_ble_set_dev_config+0x7e>
1000f6d8:	2380      	movs	r3, #128	; 0x80
1000f6da:	8c87      	ldrh	r7, [r0, #36]	; 0x24
1000f6dc:	3d11      	subs	r5, #17
1000f6de:	009b      	lsls	r3, r3, #2
1000f6e0:	429f      	cmp	r7, r3
1000f6e2:	d82e      	bhi.n	1000f742 <at_ble_set_dev_config+0x7e>
1000f6e4:	7fc5      	ldrb	r5, [r0, #31]
1000f6e6:	7f83      	ldrb	r3, [r0, #30]
1000f6e8:	01ad      	lsls	r5, r5, #6
1000f6ea:	015b      	lsls	r3, r3, #5
1000f6ec:	431d      	orrs	r5, r3
1000f6ee:	7ec3      	ldrb	r3, [r0, #27]
1000f6f0:	431d      	orrs	r5, r3
1000f6f2:	7f43      	ldrb	r3, [r0, #29]
1000f6f4:	011b      	lsls	r3, r3, #4
1000f6f6:	431d      	orrs	r5, r3
1000f6f8:	7f03      	ldrb	r3, [r0, #28]
1000f6fa:	009b      	lsls	r3, r3, #2
1000f6fc:	431d      	orrs	r5, r3
1000f6fe:	4b12      	ldr	r3, [pc, #72]	; (1000f748 <at_ble_set_dev_config+0x84>)
1000f700:	b2ed      	uxtb	r5, r5
1000f702:	711e      	strb	r6, [r3, #4]
1000f704:	7903      	ldrb	r3, [r0, #4]
1000f706:	3b02      	subs	r3, #2
1000f708:	2b01      	cmp	r3, #1
1000f70a:	d801      	bhi.n	1000f710 <at_ble_set_dev_config+0x4c>
1000f70c:	2302      	movs	r3, #2
1000f70e:	7103      	strb	r3, [r0, #4]
1000f710:	1c04      	adds	r4, r0, #0
1000f712:	1c23      	adds	r3, r4, #0
1000f714:	330b      	adds	r3, #11
1000f716:	8861      	ldrh	r1, [r4, #2]
1000f718:	9307      	str	r3, [sp, #28]
1000f71a:	7923      	ldrb	r3, [r4, #4]
1000f71c:	7800      	ldrb	r0, [r0, #0]
1000f71e:	9300      	str	r3, [sp, #0]
1000f720:	9501      	str	r5, [sp, #4]
1000f722:	8c25      	ldrh	r5, [r4, #32]
1000f724:	1d62      	adds	r2, r4, #5
1000f726:	9502      	str	r5, [sp, #8]
1000f728:	8c65      	ldrh	r5, [r4, #34]	; 0x22
1000f72a:	9b07      	ldr	r3, [sp, #28]
1000f72c:	9503      	str	r5, [sp, #12]
1000f72e:	9704      	str	r7, [sp, #16]
1000f730:	4d06      	ldr	r5, [pc, #24]	; (1000f74c <at_ble_set_dev_config+0x88>)
1000f732:	47a8      	blx	r5
1000f734:	7126      	strb	r6, [r4, #4]
1000f736:	1c05      	adds	r5, r0, #0
1000f738:	1c21      	adds	r1, r4, #0
1000f73a:	4803      	ldr	r0, [pc, #12]	; (1000f748 <at_ble_set_dev_config+0x84>)
1000f73c:	2226      	movs	r2, #38	; 0x26
1000f73e:	4b04      	ldr	r3, [pc, #16]	; (1000f750 <at_ble_set_dev_config+0x8c>)
1000f740:	4798      	blx	r3
1000f742:	1c28      	adds	r0, r5, #0
1000f744:	b009      	add	sp, #36	; 0x24
1000f746:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f748:	1001b34e 	.word	0x1001b34e
1000f74c:	100114b9 	.word	0x100114b9
1000f750:	100165c7 	.word	0x100165c7

1000f754 <at_ble_init>:
1000f754:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f756:	b087      	sub	sp, #28
1000f758:	af03      	add	r7, sp, #12
1000f75a:	4954      	ldr	r1, [pc, #336]	; (1000f8ac <at_ble_init+0x158>)
1000f75c:	220b      	movs	r2, #11
1000f75e:	4b54      	ldr	r3, [pc, #336]	; (1000f8b0 <at_ble_init+0x15c>)
1000f760:	1c04      	adds	r4, r0, #0
1000f762:	1c38      	adds	r0, r7, #0
1000f764:	4798      	blx	r3
1000f766:	2205      	movs	r2, #5
1000f768:	4b52      	ldr	r3, [pc, #328]	; (1000f8b4 <at_ble_init+0x160>)
1000f76a:	2640      	movs	r6, #64	; 0x40
1000f76c:	801a      	strh	r2, [r3, #0]
1000f76e:	2300      	movs	r3, #0
1000f770:	4a51      	ldr	r2, [pc, #324]	; (1000f8b8 <at_ble_init+0x164>)
1000f772:	6013      	str	r3, [r2, #0]
1000f774:	4a51      	ldr	r2, [pc, #324]	; (1000f8bc <at_ble_init+0x168>)
1000f776:	7013      	strb	r3, [r2, #0]
1000f778:	4a51      	ldr	r2, [pc, #324]	; (1000f8c0 <at_ble_init+0x16c>)
1000f77a:	7013      	strb	r3, [r2, #0]
1000f77c:	4b51      	ldr	r3, [pc, #324]	; (1000f8c4 <at_ble_init+0x170>)
1000f77e:	4798      	blx	r3
1000f780:	4b51      	ldr	r3, [pc, #324]	; (1000f8c8 <at_ble_init+0x174>)
1000f782:	4798      	blx	r3
1000f784:	4b51      	ldr	r3, [pc, #324]	; (1000f8cc <at_ble_init+0x178>)
1000f786:	4798      	blx	r3
1000f788:	4b51      	ldr	r3, [pc, #324]	; (1000f8d0 <at_ble_init+0x17c>)
1000f78a:	4798      	blx	r3
1000f78c:	2c00      	cmp	r4, #0
1000f78e:	d100      	bne.n	1000f792 <at_ble_init+0x3e>
1000f790:	e089      	b.n	1000f8a6 <at_ble_init+0x152>
1000f792:	68a3      	ldr	r3, [r4, #8]
1000f794:	2b00      	cmp	r3, #0
1000f796:	d100      	bne.n	1000f79a <at_ble_init+0x46>
1000f798:	e085      	b.n	1000f8a6 <at_ble_init+0x152>
1000f79a:	6923      	ldr	r3, [r4, #16]
1000f79c:	2b00      	cmp	r3, #0
1000f79e:	d100      	bne.n	1000f7a2 <at_ble_init+0x4e>
1000f7a0:	e081      	b.n	1000f8a6 <at_ble_init+0x152>
1000f7a2:	6820      	ldr	r0, [r4, #0]
1000f7a4:	2800      	cmp	r0, #0
1000f7a6:	d102      	bne.n	1000f7ae <at_ble_init+0x5a>
1000f7a8:	6863      	ldr	r3, [r4, #4]
1000f7aa:	2b00      	cmp	r3, #0
1000f7ac:	d17b      	bne.n	1000f8a6 <at_ble_init+0x152>
1000f7ae:	4b49      	ldr	r3, [pc, #292]	; (1000f8d4 <at_ble_init+0x180>)
1000f7b0:	6861      	ldr	r1, [r4, #4]
1000f7b2:	4798      	blx	r3
1000f7b4:	4b48      	ldr	r3, [pc, #288]	; (1000f8d8 <at_ble_init+0x184>)
1000f7b6:	4798      	blx	r3
1000f7b8:	2801      	cmp	r0, #1
1000f7ba:	d901      	bls.n	1000f7c0 <at_ble_init+0x6c>
1000f7bc:	26e2      	movs	r6, #226	; 0xe2
1000f7be:	e072      	b.n	1000f8a6 <at_ble_init+0x152>
1000f7c0:	4846      	ldr	r0, [pc, #280]	; (1000f8dc <at_ble_init+0x188>)
1000f7c2:	4b47      	ldr	r3, [pc, #284]	; (1000f8e0 <at_ble_init+0x18c>)
1000f7c4:	4798      	blx	r3
1000f7c6:	2800      	cmp	r0, #0
1000f7c8:	d1f8      	bne.n	1000f7bc <at_ble_init+0x68>
1000f7ca:	1c20      	adds	r0, r4, #0
1000f7cc:	4b45      	ldr	r3, [pc, #276]	; (1000f8e4 <at_ble_init+0x190>)
1000f7ce:	4798      	blx	r3
1000f7d0:	68e0      	ldr	r0, [r4, #12]
1000f7d2:	68a1      	ldr	r1, [r4, #8]
1000f7d4:	4b44      	ldr	r3, [pc, #272]	; (1000f8e8 <at_ble_init+0x194>)
1000f7d6:	4798      	blx	r3
1000f7d8:	466b      	mov	r3, sp
1000f7da:	2201      	movs	r2, #1
1000f7dc:	1cdc      	adds	r4, r3, #3
1000f7de:	1c20      	adds	r0, r4, #0
1000f7e0:	a901      	add	r1, sp, #4
1000f7e2:	4252      	negs	r2, r2
1000f7e4:	4b41      	ldr	r3, [pc, #260]	; (1000f8ec <at_ble_init+0x198>)
1000f7e6:	4798      	blx	r3
1000f7e8:	2800      	cmp	r0, #0
1000f7ea:	d102      	bne.n	1000f7f2 <at_ble_init+0x9e>
1000f7ec:	7823      	ldrb	r3, [r4, #0]
1000f7ee:	2b39      	cmp	r3, #57	; 0x39
1000f7f0:	d1f2      	bne.n	1000f7d8 <at_ble_init+0x84>
1000f7f2:	4b3f      	ldr	r3, [pc, #252]	; (1000f8f0 <at_ble_init+0x19c>)
1000f7f4:	4798      	blx	r3
1000f7f6:	1e06      	subs	r6, r0, #0
1000f7f8:	d155      	bne.n	1000f8a6 <at_ble_init+0x152>
1000f7fa:	1c03      	adds	r3, r0, #0
1000f7fc:	2101      	movs	r1, #1
1000f7fe:	4a3d      	ldr	r2, [pc, #244]	; (1000f8f4 <at_ble_init+0x1a0>)
1000f800:	4249      	negs	r1, r1
1000f802:	189a      	adds	r2, r3, r2
1000f804:	3312      	adds	r3, #18
1000f806:	8151      	strh	r1, [r2, #10]
1000f808:	2b90      	cmp	r3, #144	; 0x90
1000f80a:	d1f7      	bne.n	1000f7fc <at_ble_init+0xa8>
1000f80c:	4c3a      	ldr	r4, [pc, #232]	; (1000f8f8 <at_ble_init+0x1a4>)
1000f80e:	3b81      	subs	r3, #129	; 0x81
1000f810:	7023      	strb	r3, [r4, #0]
1000f812:	4b3a      	ldr	r3, [pc, #232]	; (1000f8fc <at_ble_init+0x1a8>)
1000f814:	4a3a      	ldr	r2, [pc, #232]	; (1000f900 <at_ble_init+0x1ac>)
1000f816:	8063      	strh	r3, [r4, #2]
1000f818:	2300      	movs	r3, #0
1000f81a:	7123      	strb	r3, [r4, #4]
1000f81c:	3301      	adds	r3, #1
1000f81e:	1e58      	subs	r0, r3, #1
1000f820:	0119      	lsls	r1, r3, #4
1000f822:	4301      	orrs	r1, r0
1000f824:	3302      	adds	r3, #2
1000f826:	7011      	strb	r1, [r2, #0]
1000f828:	3201      	adds	r2, #1
1000f82a:	2b21      	cmp	r3, #33	; 0x21
1000f82c:	d1f7      	bne.n	1000f81e <at_ble_init+0xca>
1000f82e:	33e0      	adds	r3, #224	; 0xe0
1000f830:	33ff      	adds	r3, #255	; 0xff
1000f832:	84a3      	strh	r3, [r4, #36]	; 0x24
1000f834:	1c23      	adds	r3, r4, #0
1000f836:	2500      	movs	r5, #0
1000f838:	3373      	adds	r3, #115	; 0x73
1000f83a:	701d      	strb	r5, [r3, #0]
1000f83c:	1c23      	adds	r3, r4, #0
1000f83e:	3372      	adds	r3, #114	; 0x72
1000f840:	701d      	strb	r5, [r3, #0]
1000f842:	1c23      	adds	r3, r4, #0
1000f844:	3376      	adds	r3, #118	; 0x76
1000f846:	701d      	strb	r5, [r3, #0]
1000f848:	1c23      	adds	r3, r4, #0
1000f84a:	33cc      	adds	r3, #204	; 0xcc
1000f84c:	801d      	strh	r5, [r3, #0]
1000f84e:	1c22      	adds	r2, r4, #0
1000f850:	23a0      	movs	r3, #160	; 0xa0
1000f852:	32d0      	adds	r2, #208	; 0xd0
1000f854:	005b      	lsls	r3, r3, #1
1000f856:	8013      	strh	r3, [r2, #0]
1000f858:	1c22      	adds	r2, r4, #0
1000f85a:	32ce      	adds	r2, #206	; 0xce
1000f85c:	8013      	strh	r3, [r2, #0]
1000f85e:	1c23      	adds	r3, r4, #0
1000f860:	33d2      	adds	r3, #210	; 0xd2
1000f862:	801d      	strh	r5, [r3, #0]
1000f864:	22fa      	movs	r2, #250	; 0xfa
1000f866:	1c23      	adds	r3, r4, #0
1000f868:	0052      	lsls	r2, r2, #1
1000f86a:	33d4      	adds	r3, #212	; 0xd4
1000f86c:	801a      	strh	r2, [r3, #0]
1000f86e:	1c23      	adds	r3, r4, #0
1000f870:	33d6      	adds	r3, #214	; 0xd6
1000f872:	701d      	strb	r5, [r3, #0]
1000f874:	1c20      	adds	r0, r4, #0
1000f876:	4b23      	ldr	r3, [pc, #140]	; (1000f904 <at_ble_init+0x1b0>)
1000f878:	76e5      	strb	r5, [r4, #27]
1000f87a:	7725      	strb	r5, [r4, #28]
1000f87c:	7765      	strb	r5, [r4, #29]
1000f87e:	77a5      	strb	r5, [r4, #30]
1000f880:	77e5      	strb	r5, [r4, #31]
1000f882:	8425      	strh	r5, [r4, #32]
1000f884:	8465      	strh	r5, [r4, #34]	; 0x22
1000f886:	4798      	blx	r3
1000f888:	1c23      	adds	r3, r4, #0
1000f88a:	2207      	movs	r2, #7
1000f88c:	3374      	adds	r3, #116	; 0x74
1000f88e:	701a      	strb	r2, [r3, #0]
1000f890:	1c23      	adds	r3, r4, #0
1000f892:	3204      	adds	r2, #4
1000f894:	33aa      	adds	r3, #170	; 0xaa
1000f896:	801a      	strh	r2, [r3, #0]
1000f898:	1c2b      	adds	r3, r5, #0
1000f89a:	5d7a      	ldrb	r2, [r7, r5]
1000f89c:	33ac      	adds	r3, #172	; 0xac
1000f89e:	3501      	adds	r5, #1
1000f8a0:	54e2      	strb	r2, [r4, r3]
1000f8a2:	2d0b      	cmp	r5, #11
1000f8a4:	d1f8      	bne.n	1000f898 <at_ble_init+0x144>
1000f8a6:	1c30      	adds	r0, r6, #0
1000f8a8:	b007      	add	sp, #28
1000f8aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f8ac:	1001867f 	.word	0x1001867f
1000f8b0:	100165c7 	.word	0x100165c7
1000f8b4:	1001b2bc 	.word	0x1001b2bc
1000f8b8:	1001a3fc 	.word	0x1001a3fc
1000f8bc:	1001a35c 	.word	0x1001a35c
1000f8c0:	100188c8 	.word	0x100188c8
1000f8c4:	10011f09 	.word	0x10011f09
1000f8c8:	1000fbc5 	.word	0x1000fbc5
1000f8cc:	10010225 	.word	0x10010225
1000f8d0:	100104d9 	.word	0x100104d9
1000f8d4:	10010261 	.word	0x10010261
1000f8d8:	1000e301 	.word	0x1000e301
1000f8dc:	100107d9 	.word	0x100107d9
1000f8e0:	1000e545 	.word	0x1000e545
1000f8e4:	10010881 	.word	0x10010881
1000f8e8:	1000ee41 	.word	0x1000ee41
1000f8ec:	1000eefd 	.word	0x1000eefd
1000f8f0:	10011449 	.word	0x10011449
1000f8f4:	1001b2be 	.word	0x1001b2be
1000f8f8:	1001b34e 	.word	0x1001b34e
1000f8fc:	00003a98 	.word	0x00003a98
1000f900:	1001b359 	.word	0x1001b359
1000f904:	1000f6c5 	.word	0x1000f6c5

1000f908 <at_ble_addr_set>:
1000f908:	b538      	push	{r3, r4, r5, lr}
1000f90a:	1c45      	adds	r5, r0, #1
1000f90c:	1c03      	adds	r3, r0, #0
1000f90e:	20cf      	movs	r0, #207	; 0xcf
1000f910:	2d00      	cmp	r5, #0
1000f912:	d018      	beq.n	1000f946 <at_ble_addr_set+0x3e>
1000f914:	781a      	ldrb	r2, [r3, #0]
1000f916:	2a03      	cmp	r2, #3
1000f918:	d815      	bhi.n	1000f946 <at_ble_addr_set+0x3e>
1000f91a:	2a01      	cmp	r2, #1
1000f91c:	d102      	bne.n	1000f924 <at_ble_addr_set+0x1c>
1000f91e:	785a      	ldrb	r2, [r3, #1]
1000f920:	2a00      	cmp	r2, #0
1000f922:	d010      	beq.n	1000f946 <at_ble_addr_set+0x3e>
1000f924:	1c1c      	adds	r4, r3, #0
1000f926:	1c29      	adds	r1, r5, #0
1000f928:	2206      	movs	r2, #6
1000f92a:	4b07      	ldr	r3, [pc, #28]	; (1000f948 <at_ble_addr_set+0x40>)
1000f92c:	4807      	ldr	r0, [pc, #28]	; (1000f94c <at_ble_addr_set+0x44>)
1000f92e:	4798      	blx	r3
1000f930:	7823      	ldrb	r3, [r4, #0]
1000f932:	4807      	ldr	r0, [pc, #28]	; (1000f950 <at_ble_addr_set+0x48>)
1000f934:	7103      	strb	r3, [r0, #4]
1000f936:	4b07      	ldr	r3, [pc, #28]	; (1000f954 <at_ble_addr_set+0x4c>)
1000f938:	4798      	blx	r3
1000f93a:	7823      	ldrb	r3, [r4, #0]
1000f93c:	2b00      	cmp	r3, #0
1000f93e:	d102      	bne.n	1000f946 <at_ble_addr_set+0x3e>
1000f940:	1c28      	adds	r0, r5, #0
1000f942:	4b05      	ldr	r3, [pc, #20]	; (1000f958 <at_ble_addr_set+0x50>)
1000f944:	4798      	blx	r3
1000f946:	bd38      	pop	{r3, r4, r5, pc}
1000f948:	100165c7 	.word	0x100165c7
1000f94c:	1001b353 	.word	0x1001b353
1000f950:	1001b34e 	.word	0x1001b34e
1000f954:	1000f6c5 	.word	0x1000f6c5
1000f958:	10010905 	.word	0x10010905

1000f95c <at_ble_adv_data_set>:
1000f95c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000f95e:	4684      	mov	ip, r0
1000f960:	1c0f      	adds	r7, r1, #0
1000f962:	1c16      	adds	r6, r2, #0
1000f964:	1c1c      	adds	r4, r3, #0
1000f966:	2800      	cmp	r0, #0
1000f968:	d102      	bne.n	1000f970 <at_ble_adv_data_set+0x14>
1000f96a:	20e2      	movs	r0, #226	; 0xe2
1000f96c:	2a00      	cmp	r2, #0
1000f96e:	d02b      	beq.n	1000f9c8 <at_ble_adv_data_set+0x6c>
1000f970:	20cf      	movs	r0, #207	; 0xcf
1000f972:	2f1f      	cmp	r7, #31
1000f974:	d828      	bhi.n	1000f9c8 <at_ble_adv_data_set+0x6c>
1000f976:	2c1f      	cmp	r4, #31
1000f978:	d826      	bhi.n	1000f9c8 <at_ble_adv_data_set+0x6c>
1000f97a:	4663      	mov	r3, ip
1000f97c:	2b00      	cmp	r3, #0
1000f97e:	d00e      	beq.n	1000f99e <at_ble_adv_data_set+0x42>
1000f980:	4812      	ldr	r0, [pc, #72]	; (1000f9cc <at_ble_adv_data_set+0x70>)
1000f982:	4d13      	ldr	r5, [pc, #76]	; (1000f9d0 <at_ble_adv_data_set+0x74>)
1000f984:	2f00      	cmp	r7, #0
1000f986:	d104      	bne.n	1000f992 <at_ble_adv_data_set+0x36>
1000f988:	1c39      	adds	r1, r7, #0
1000f98a:	221f      	movs	r2, #31
1000f98c:	4b11      	ldr	r3, [pc, #68]	; (1000f9d4 <at_ble_adv_data_set+0x78>)
1000f98e:	4798      	blx	r3
1000f990:	e003      	b.n	1000f99a <at_ble_adv_data_set+0x3e>
1000f992:	4661      	mov	r1, ip
1000f994:	1c3a      	adds	r2, r7, #0
1000f996:	4b10      	ldr	r3, [pc, #64]	; (1000f9d8 <at_ble_adv_data_set+0x7c>)
1000f998:	4798      	blx	r3
1000f99a:	3572      	adds	r5, #114	; 0x72
1000f99c:	702f      	strb	r7, [r5, #0]
1000f99e:	1e30      	subs	r0, r6, #0
1000f9a0:	d012      	beq.n	1000f9c8 <at_ble_adv_data_set+0x6c>
1000f9a2:	4d0b      	ldr	r5, [pc, #44]	; (1000f9d0 <at_ble_adv_data_set+0x74>)
1000f9a4:	480d      	ldr	r0, [pc, #52]	; (1000f9dc <at_ble_adv_data_set+0x80>)
1000f9a6:	2c00      	cmp	r4, #0
1000f9a8:	d107      	bne.n	1000f9ba <at_ble_adv_data_set+0x5e>
1000f9aa:	1c21      	adds	r1, r4, #0
1000f9ac:	221f      	movs	r2, #31
1000f9ae:	4b09      	ldr	r3, [pc, #36]	; (1000f9d4 <at_ble_adv_data_set+0x78>)
1000f9b0:	3573      	adds	r5, #115	; 0x73
1000f9b2:	4798      	blx	r3
1000f9b4:	702c      	strb	r4, [r5, #0]
1000f9b6:	1c20      	adds	r0, r4, #0
1000f9b8:	e006      	b.n	1000f9c8 <at_ble_adv_data_set+0x6c>
1000f9ba:	1c31      	adds	r1, r6, #0
1000f9bc:	1c22      	adds	r2, r4, #0
1000f9be:	4b06      	ldr	r3, [pc, #24]	; (1000f9d8 <at_ble_adv_data_set+0x7c>)
1000f9c0:	4798      	blx	r3
1000f9c2:	2000      	movs	r0, #0
1000f9c4:	3573      	adds	r5, #115	; 0x73
1000f9c6:	702c      	strb	r4, [r5, #0]
1000f9c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000f9ca:	46c0      	nop			; (mov r8, r8)
1000f9cc:	1001b382 	.word	0x1001b382
1000f9d0:	1001b34e 	.word	0x1001b34e
1000f9d4:	100165d9 	.word	0x100165d9
1000f9d8:	100165c7 	.word	0x100165c7
1000f9dc:	1001b3a1 	.word	0x1001b3a1

1000f9e0 <at_ble_adv_start>:
1000f9e0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f9e2:	b091      	sub	sp, #68	; 0x44
1000f9e4:	1c1f      	adds	r7, r3, #0
1000f9e6:	ab16      	add	r3, sp, #88	; 0x58
1000f9e8:	881d      	ldrh	r5, [r3, #0]
1000f9ea:	ab17      	add	r3, sp, #92	; 0x5c
1000f9ec:	881b      	ldrh	r3, [r3, #0]
1000f9ee:	910d      	str	r1, [sp, #52]	; 0x34
1000f9f0:	930e      	str	r3, [sp, #56]	; 0x38
1000f9f2:	ab18      	add	r3, sp, #96	; 0x60
1000f9f4:	781b      	ldrb	r3, [r3, #0]
1000f9f6:	1c04      	adds	r4, r0, #0
1000f9f8:	930f      	str	r3, [sp, #60]	; 0x3c
1000f9fa:	4b42      	ldr	r3, [pc, #264]	; (1000fb04 <at_ble_adv_start+0x124>)
1000f9fc:	1c16      	adds	r6, r2, #0
1000f9fe:	3373      	adds	r3, #115	; 0x73
1000fa00:	781b      	ldrb	r3, [r3, #0]
1000fa02:	20cf      	movs	r0, #207	; 0xcf
1000fa04:	930c      	str	r3, [sp, #48]	; 0x30
1000fa06:	2c01      	cmp	r4, #1
1000fa08:	d103      	bne.n	1000fa12 <at_ble_adv_start+0x32>
1000fa0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1000fa0c:	2b00      	cmp	r3, #0
1000fa0e:	d176      	bne.n	1000fafe <at_ble_adv_start+0x11e>
1000fa10:	e024      	b.n	1000fa5c <at_ble_adv_start+0x7c>
1000fa12:	2c04      	cmp	r4, #4
1000fa14:	d873      	bhi.n	1000fafe <at_ble_adv_start+0x11e>
1000fa16:	2380      	movs	r3, #128	; 0x80
1000fa18:	01db      	lsls	r3, r3, #7
1000fa1a:	429d      	cmp	r5, r3
1000fa1c:	d86f      	bhi.n	1000fafe <at_ble_adv_start+0x11e>
1000fa1e:	2c00      	cmp	r4, #0
1000fa20:	d102      	bne.n	1000fa28 <at_ble_adv_start+0x48>
1000fa22:	2d1f      	cmp	r5, #31
1000fa24:	d96b      	bls.n	1000fafe <at_ble_adv_start+0x11e>
1000fa26:	e003      	b.n	1000fa30 <at_ble_adv_start+0x50>
1000fa28:	2d9f      	cmp	r5, #159	; 0x9f
1000fa2a:	d801      	bhi.n	1000fa30 <at_ble_adv_start+0x50>
1000fa2c:	2c01      	cmp	r4, #1
1000fa2e:	d166      	bne.n	1000fafe <at_ble_adv_start+0x11e>
1000fa30:	2f00      	cmp	r7, #0
1000fa32:	d009      	beq.n	1000fa48 <at_ble_adv_start+0x68>
1000fa34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000fa36:	20cf      	movs	r0, #207	; 0xcf
1000fa38:	3b01      	subs	r3, #1
1000fa3a:	2b01      	cmp	r3, #1
1000fa3c:	d95f      	bls.n	1000fafe <at_ble_adv_start+0x11e>
1000fa3e:	2c01      	cmp	r4, #1
1000fa40:	d102      	bne.n	1000fa48 <at_ble_adv_start+0x68>
1000fa42:	2d00      	cmp	r5, #0
1000fa44:	d100      	bne.n	1000fa48 <at_ble_adv_start+0x68>
1000fa46:	3520      	adds	r5, #32
1000fa48:	4b2f      	ldr	r3, [pc, #188]	; (1000fb08 <at_ble_adv_start+0x128>)
1000fa4a:	4798      	blx	r3
1000fa4c:	1c01      	adds	r1, r0, #0
1000fa4e:	2e00      	cmp	r6, #0
1000fa50:	d043      	beq.n	1000fada <at_ble_adv_start+0xfa>
1000fa52:	7833      	ldrb	r3, [r6, #0]
1000fa54:	1e60      	subs	r0, r4, #1
1000fa56:	2b00      	cmp	r3, #0
1000fa58:	d109      	bne.n	1000fa6e <at_ble_adv_start+0x8e>
1000fa5a:	e03b      	b.n	1000fad4 <at_ble_adv_start+0xf4>
1000fa5c:	2380      	movs	r3, #128	; 0x80
1000fa5e:	01db      	lsls	r3, r3, #7
1000fa60:	429d      	cmp	r5, r3
1000fa62:	d84c      	bhi.n	1000fafe <at_ble_adv_start+0x11e>
1000fa64:	2e00      	cmp	r6, #0
1000fa66:	d04a      	beq.n	1000fafe <at_ble_adv_start+0x11e>
1000fa68:	2f00      	cmp	r7, #0
1000fa6a:	d1e3      	bne.n	1000fa34 <at_ble_adv_start+0x54>
1000fa6c:	e02b      	b.n	1000fac6 <at_ble_adv_start+0xe6>
1000fa6e:	2301      	movs	r3, #1
1000fa70:	2803      	cmp	r0, #3
1000fa72:	d93a      	bls.n	1000faea <at_ble_adv_start+0x10a>
1000fa74:	200d      	movs	r0, #13
1000fa76:	1c72      	adds	r2, r6, #1
1000fa78:	e002      	b.n	1000fa80 <at_ble_adv_start+0xa0>
1000fa7a:	200e      	movs	r0, #14
1000fa7c:	1e32      	subs	r2, r6, #0
1000fa7e:	d1fa      	bne.n	1000fa76 <at_ble_adv_start+0x96>
1000fa80:	4c20      	ldr	r4, [pc, #128]	; (1000fb04 <at_ble_adv_start+0x124>)
1000fa82:	3474      	adds	r4, #116	; 0x74
1000fa84:	7826      	ldrb	r6, [r4, #0]
1000fa86:	2407      	movs	r4, #7
1000fa88:	2e00      	cmp	r6, #0
1000fa8a:	d000      	beq.n	1000fa8e <at_ble_adv_start+0xae>
1000fa8c:	1c34      	adds	r4, r6, #0
1000fa8e:	9200      	str	r2, [sp, #0]
1000fa90:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1000fa92:	9403      	str	r4, [sp, #12]
1000fa94:	9204      	str	r2, [sp, #16]
1000fa96:	4a1b      	ldr	r2, [pc, #108]	; (1000fb04 <at_ble_adv_start+0x124>)
1000fa98:	9501      	str	r5, [sp, #4]
1000fa9a:	9502      	str	r5, [sp, #8]
1000fa9c:	9705      	str	r7, [sp, #20]
1000fa9e:	3272      	adds	r2, #114	; 0x72
1000faa0:	7812      	ldrb	r2, [r2, #0]
1000faa2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
1000faa4:	9206      	str	r2, [sp, #24]
1000faa6:	4a19      	ldr	r2, [pc, #100]	; (1000fb0c <at_ble_adv_start+0x12c>)
1000faa8:	9207      	str	r2, [sp, #28]
1000faaa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1000faac:	9208      	str	r2, [sp, #32]
1000faae:	4a18      	ldr	r2, [pc, #96]	; (1000fb10 <at_ble_adv_start+0x130>)
1000fab0:	9209      	str	r2, [sp, #36]	; 0x24
1000fab2:	2264      	movs	r2, #100	; 0x64
1000fab4:	4362      	muls	r2, r4
1000fab6:	b292      	uxth	r2, r2
1000fab8:	920a      	str	r2, [sp, #40]	; 0x28
1000faba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
1000fabc:	4c15      	ldr	r4, [pc, #84]	; (1000fb14 <at_ble_adv_start+0x134>)
1000fabe:	920b      	str	r2, [sp, #44]	; 0x2c
1000fac0:	4a15      	ldr	r2, [pc, #84]	; (1000fb18 <at_ble_adv_start+0x138>)
1000fac2:	47a0      	blx	r4
1000fac4:	e01b      	b.n	1000fafe <at_ble_adv_start+0x11e>
1000fac6:	2d00      	cmp	r5, #0
1000fac8:	d1be      	bne.n	1000fa48 <at_ble_adv_start+0x68>
1000faca:	4b0f      	ldr	r3, [pc, #60]	; (1000fb08 <at_ble_adv_start+0x128>)
1000facc:	4798      	blx	r3
1000face:	2520      	movs	r5, #32
1000fad0:	1c01      	adds	r1, r0, #0
1000fad2:	e7be      	b.n	1000fa52 <at_ble_adv_start+0x72>
1000fad4:	2803      	cmp	r0, #3
1000fad6:	d8cd      	bhi.n	1000fa74 <at_ble_adv_start+0x94>
1000fad8:	e006      	b.n	1000fae8 <at_ble_adv_start+0x108>
1000fada:	1e60      	subs	r0, r4, #1
1000fadc:	2803      	cmp	r0, #3
1000fade:	d903      	bls.n	1000fae8 <at_ble_adv_start+0x108>
1000fae0:	1c33      	adds	r3, r6, #0
1000fae2:	200d      	movs	r0, #13
1000fae4:	1c32      	adds	r2, r6, #0
1000fae6:	e7cb      	b.n	1000fa80 <at_ble_adv_start+0xa0>
1000fae8:	2300      	movs	r3, #0
1000faea:	f003 fd3d 	bl	10013568 <__gnu_thumb1_case_sqi>
1000faee:	06c6      	.short	0x06c6
1000faf0:	0204      	.short	0x0204
1000faf2:	200f      	movs	r0, #15
1000faf4:	e7c2      	b.n	1000fa7c <at_ble_adv_start+0x9c>
1000faf6:	2200      	movs	r2, #0
1000faf8:	920c      	str	r2, [sp, #48]	; 0x30
1000fafa:	200c      	movs	r0, #12
1000fafc:	e7be      	b.n	1000fa7c <at_ble_adv_start+0x9c>
1000fafe:	b011      	add	sp, #68	; 0x44
1000fb00:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000fb02:	46c0      	nop			; (mov r8, r8)
1000fb04:	1001b34e 	.word	0x1001b34e
1000fb08:	10011995 	.word	0x10011995
1000fb0c:	1001b382 	.word	0x1001b382
1000fb10:	1001b3a1 	.word	0x1001b3a1
1000fb14:	10011875 	.word	0x10011875
1000fb18:	00003a98 	.word	0x00003a98

1000fb1c <at_ble_adv_stop>:
1000fb1c:	b508      	push	{r3, lr}
1000fb1e:	4b01      	ldr	r3, [pc, #4]	; (1000fb24 <at_ble_adv_stop+0x8>)
1000fb20:	4798      	blx	r3
1000fb22:	bd08      	pop	{r3, pc}
1000fb24:	100116a1 	.word	0x100116a1

1000fb28 <at_ble_scan_stop>:
1000fb28:	b510      	push	{r4, lr}
1000fb2a:	4b05      	ldr	r3, [pc, #20]	; (1000fb40 <at_ble_scan_stop+0x18>)
1000fb2c:	4798      	blx	r3
1000fb2e:	1e04      	subs	r4, r0, #0
1000fb30:	d103      	bne.n	1000fb3a <at_ble_scan_stop+0x12>
1000fb32:	20d1      	movs	r0, #209	; 0xd1
1000fb34:	4b03      	ldr	r3, [pc, #12]	; (1000fb44 <at_ble_scan_stop+0x1c>)
1000fb36:	0100      	lsls	r0, r0, #4
1000fb38:	4798      	blx	r3
1000fb3a:	1c20      	adds	r0, r4, #0
1000fb3c:	bd10      	pop	{r4, pc}
1000fb3e:	46c0      	nop			; (mov r8, r8)
1000fb40:	100116a1 	.word	0x100116a1
1000fb44:	1000f5d5 	.word	0x1000f5d5

1000fb48 <at_ble_disconnect>:
1000fb48:	b538      	push	{r3, r4, r5, lr}
1000fb4a:	1c04      	adds	r4, r0, #0
1000fb4c:	4b04      	ldr	r3, [pc, #16]	; (1000fb60 <at_ble_disconnect+0x18>)
1000fb4e:	1c08      	adds	r0, r1, #0
1000fb50:	1c21      	adds	r1, r4, #0
1000fb52:	4798      	blx	r3
1000fb54:	1c05      	adds	r5, r0, #0
1000fb56:	4b03      	ldr	r3, [pc, #12]	; (1000fb64 <at_ble_disconnect+0x1c>)
1000fb58:	1c20      	adds	r0, r4, #0
1000fb5a:	4798      	blx	r3
1000fb5c:	1c28      	adds	r0, r5, #0
1000fb5e:	bd38      	pop	{r3, r4, r5, pc}
1000fb60:	10010d19 	.word	0x10010d19
1000fb64:	1000f619 	.word	0x1000f619

1000fb68 <at_ble_conn_update_reply>:
1000fb68:	b510      	push	{r4, lr}
1000fb6a:	4c01      	ldr	r4, [pc, #4]	; (1000fb70 <at_ble_conn_update_reply+0x8>)
1000fb6c:	47a0      	blx	r4
1000fb6e:	bd10      	pop	{r4, pc}
1000fb70:	10011209 	.word	0x10011209

1000fb74 <at_ble_random_address_resolve>:
1000fb74:	b510      	push	{r4, lr}
1000fb76:	23cf      	movs	r3, #207	; 0xcf
1000fb78:	2800      	cmp	r0, #0
1000fb7a:	d00a      	beq.n	1000fb92 <at_ble_random_address_resolve+0x1e>
1000fb7c:	2900      	cmp	r1, #0
1000fb7e:	d008      	beq.n	1000fb92 <at_ble_random_address_resolve+0x1e>
1000fb80:	2a00      	cmp	r2, #0
1000fb82:	d006      	beq.n	1000fb92 <at_ble_random_address_resolve+0x1e>
1000fb84:	780c      	ldrb	r4, [r1, #0]
1000fb86:	2c02      	cmp	r4, #2
1000fb88:	d103      	bne.n	1000fb92 <at_ble_random_address_resolve+0x1e>
1000fb8a:	4b03      	ldr	r3, [pc, #12]	; (1000fb98 <at_ble_random_address_resolve+0x24>)
1000fb8c:	3101      	adds	r1, #1
1000fb8e:	4798      	blx	r3
1000fb90:	2300      	movs	r3, #0
1000fb92:	1c18      	adds	r0, r3, #0
1000fb94:	bd10      	pop	{r4, pc}
1000fb96:	46c0      	nop			; (mov r8, r8)
1000fb98:	10011a35 	.word	0x10011a35

1000fb9c <at_ble_uuid_type2len>:
1000fb9c:	23cf      	movs	r3, #207	; 0xcf
1000fb9e:	2802      	cmp	r0, #2
1000fba0:	d801      	bhi.n	1000fba6 <at_ble_uuid_type2len+0xa>
1000fba2:	4b02      	ldr	r3, [pc, #8]	; (1000fbac <at_ble_uuid_type2len+0x10>)
1000fba4:	5c1b      	ldrb	r3, [r3, r0]
1000fba6:	1c18      	adds	r0, r3, #0
1000fba8:	4770      	bx	lr
1000fbaa:	46c0      	nop			; (mov r8, r8)
1000fbac:	1001868a 	.word	0x1001868a

1000fbb0 <at_ble_uuid_len2type>:
1000fbb0:	1e83      	subs	r3, r0, #2
1000fbb2:	b2db      	uxtb	r3, r3
1000fbb4:	2003      	movs	r0, #3
1000fbb6:	2b0e      	cmp	r3, #14
1000fbb8:	d801      	bhi.n	1000fbbe <at_ble_uuid_len2type+0xe>
1000fbba:	4a01      	ldr	r2, [pc, #4]	; (1000fbc0 <at_ble_uuid_len2type+0x10>)
1000fbbc:	5cd0      	ldrb	r0, [r2, r3]
1000fbbe:	4770      	bx	lr
1000fbc0:	1001868d 	.word	0x1001868d

1000fbc4 <init_gatt_client_module>:
1000fbc4:	2200      	movs	r2, #0
1000fbc6:	4b01      	ldr	r3, [pc, #4]	; (1000fbcc <init_gatt_client_module+0x8>)
1000fbc8:	801a      	strh	r2, [r3, #0]
1000fbca:	4770      	bx	lr
1000fbcc:	1001a354 	.word	0x1001a354

1000fbd0 <db_searchATT>:
1000fbd0:	b570      	push	{r4, r5, r6, lr}
1000fbd2:	1c05      	adds	r5, r0, #0
1000fbd4:	2400      	movs	r4, #0
1000fbd6:	4b0c      	ldr	r3, [pc, #48]	; (1000fc08 <db_searchATT+0x38>)
1000fbd8:	6819      	ldr	r1, [r3, #0]
1000fbda:	4b0c      	ldr	r3, [pc, #48]	; (1000fc0c <db_searchATT+0x3c>)
1000fbdc:	681e      	ldr	r6, [r3, #0]
1000fbde:	428c      	cmp	r4, r1
1000fbe0:	dc10      	bgt.n	1000fc04 <db_searchATT+0x34>
1000fbe2:	200c      	movs	r0, #12
1000fbe4:	1863      	adds	r3, r4, r1
1000fbe6:	0fda      	lsrs	r2, r3, #31
1000fbe8:	18d3      	adds	r3, r2, r3
1000fbea:	1c02      	adds	r2, r0, #0
1000fbec:	105b      	asrs	r3, r3, #1
1000fbee:	435a      	muls	r2, r3
1000fbf0:	18b0      	adds	r0, r6, r2
1000fbf2:	8802      	ldrh	r2, [r0, #0]
1000fbf4:	42aa      	cmp	r2, r5
1000fbf6:	d201      	bcs.n	1000fbfc <db_searchATT+0x2c>
1000fbf8:	1e59      	subs	r1, r3, #1
1000fbfa:	e7f0      	b.n	1000fbde <db_searchATT+0xe>
1000fbfc:	42aa      	cmp	r2, r5
1000fbfe:	d902      	bls.n	1000fc06 <db_searchATT+0x36>
1000fc00:	1c5c      	adds	r4, r3, #1
1000fc02:	e7ec      	b.n	1000fbde <db_searchATT+0xe>
1000fc04:	2000      	movs	r0, #0
1000fc06:	bd70      	pop	{r4, r5, r6, pc}
1000fc08:	1001a368 	.word	0x1001a368
1000fc0c:	1001a360 	.word	0x1001a360

1000fc10 <att_permissions>:
1000fc10:	b530      	push	{r4, r5, lr}
1000fc12:	2403      	movs	r4, #3
1000fc14:	1c05      	adds	r5, r0, #0
1000fc16:	2301      	movs	r3, #1
1000fc18:	4025      	ands	r5, r4
1000fc1a:	42a5      	cmp	r5, r4
1000fc1c:	d009      	beq.n	1000fc32 <att_permissions+0x22>
1000fc1e:	1c23      	adds	r3, r4, #0
1000fc20:	1924      	adds	r4, r4, r4
1000fc22:	4220      	tst	r0, r4
1000fc24:	d105      	bne.n	1000fc32 <att_permissions+0x22>
1000fc26:	3b02      	subs	r3, #2
1000fc28:	4218      	tst	r0, r3
1000fc2a:	d102      	bne.n	1000fc32 <att_permissions+0x22>
1000fc2c:	1e4b      	subs	r3, r1, #1
1000fc2e:	4199      	sbcs	r1, r3
1000fc30:	b28b      	uxth	r3, r1
1000fc32:	2130      	movs	r1, #48	; 0x30
1000fc34:	4001      	ands	r1, r0
1000fc36:	2930      	cmp	r1, #48	; 0x30
1000fc38:	d007      	beq.n	1000fc4a <att_permissions+0x3a>
1000fc3a:	0641      	lsls	r1, r0, #25
1000fc3c:	d401      	bmi.n	1000fc42 <att_permissions+0x32>
1000fc3e:	0681      	lsls	r1, r0, #26
1000fc40:	d501      	bpl.n	1000fc46 <att_permissions+0x36>
1000fc42:	4807      	ldr	r0, [pc, #28]	; (1000fc60 <att_permissions+0x50>)
1000fc44:	e009      	b.n	1000fc5a <att_permissions+0x4a>
1000fc46:	06c1      	lsls	r1, r0, #27
1000fc48:	d501      	bpl.n	1000fc4e <att_permissions+0x3e>
1000fc4a:	4806      	ldr	r0, [pc, #24]	; (1000fc64 <att_permissions+0x54>)
1000fc4c:	e005      	b.n	1000fc5a <att_permissions+0x4a>
1000fc4e:	2a00      	cmp	r2, #0
1000fc50:	d001      	beq.n	1000fc56 <att_permissions+0x46>
1000fc52:	2204      	movs	r2, #4
1000fc54:	4313      	orrs	r3, r2
1000fc56:	2080      	movs	r0, #128	; 0x80
1000fc58:	0180      	lsls	r0, r0, #6
1000fc5a:	4318      	orrs	r0, r3
1000fc5c:	bd30      	pop	{r4, r5, pc}
1000fc5e:	46c0      	nop			; (mov r8, r8)
1000fc60:	0000200c 	.word	0x0000200c
1000fc64:	00002004 	.word	0x00002004

1000fc68 <char_permissions>:
1000fc68:	b530      	push	{r4, r5, lr}
1000fc6a:	2300      	movs	r3, #0
1000fc6c:	0784      	lsls	r4, r0, #30
1000fc6e:	d503      	bpl.n	1000fc78 <char_permissions+0x10>
1000fc70:	3301      	adds	r3, #1
1000fc72:	4219      	tst	r1, r3
1000fc74:	d100      	bne.n	1000fc78 <char_permissions+0x10>
1000fc76:	3302      	adds	r3, #2
1000fc78:	0704      	lsls	r4, r0, #28
1000fc7a:	d508      	bpl.n	1000fc8e <char_permissions+0x26>
1000fc7c:	06cc      	lsls	r4, r1, #27
1000fc7e:	d501      	bpl.n	1000fc84 <char_permissions+0x1c>
1000fc80:	2404      	movs	r4, #4
1000fc82:	e000      	b.n	1000fc86 <char_permissions+0x1e>
1000fc84:	240c      	movs	r4, #12
1000fc86:	4323      	orrs	r3, r4
1000fc88:	2480      	movs	r4, #128	; 0x80
1000fc8a:	01a4      	lsls	r4, r4, #6
1000fc8c:	4323      	orrs	r3, r4
1000fc8e:	0684      	lsls	r4, r0, #26
1000fc90:	d506      	bpl.n	1000fca0 <char_permissions+0x38>
1000fc92:	2406      	movs	r4, #6
1000fc94:	4221      	tst	r1, r4
1000fc96:	d101      	bne.n	1000fc9c <char_permissions+0x34>
1000fc98:	340a      	adds	r4, #10
1000fc9a:	e000      	b.n	1000fc9e <char_permissions+0x36>
1000fc9c:	2430      	movs	r4, #48	; 0x30
1000fc9e:	4323      	orrs	r3, r4
1000fca0:	06c4      	lsls	r4, r0, #27
1000fca2:	d506      	bpl.n	1000fcb2 <char_permissions+0x4a>
1000fca4:	2406      	movs	r4, #6
1000fca6:	4221      	tst	r1, r4
1000fca8:	d101      	bne.n	1000fcae <char_permissions+0x46>
1000fcaa:	343a      	adds	r4, #58	; 0x3a
1000fcac:	e000      	b.n	1000fcb0 <char_permissions+0x48>
1000fcae:	24c0      	movs	r4, #192	; 0xc0
1000fcb0:	4323      	orrs	r3, r4
1000fcb2:	2480      	movs	r4, #128	; 0x80
1000fcb4:	0064      	lsls	r4, r4, #1
1000fcb6:	4220      	tst	r0, r4
1000fcb8:	d000      	beq.n	1000fcbc <char_permissions+0x54>
1000fcba:	4323      	orrs	r3, r4
1000fcbc:	07c4      	lsls	r4, r0, #31
1000fcbe:	d502      	bpl.n	1000fcc6 <char_permissions+0x5e>
1000fcc0:	2480      	movs	r4, #128	; 0x80
1000fcc2:	00a4      	lsls	r4, r4, #2
1000fcc4:	4323      	orrs	r3, r4
1000fcc6:	2404      	movs	r4, #4
1000fcc8:	4220      	tst	r0, r4
1000fcca:	d006      	beq.n	1000fcda <char_permissions+0x72>
1000fccc:	06cd      	lsls	r5, r1, #27
1000fcce:	d400      	bmi.n	1000fcd2 <char_permissions+0x6a>
1000fcd0:	240c      	movs	r4, #12
1000fcd2:	4323      	orrs	r3, r4
1000fcd4:	2480      	movs	r4, #128	; 0x80
1000fcd6:	0124      	lsls	r4, r4, #4
1000fcd8:	4323      	orrs	r3, r4
1000fcda:	0644      	lsls	r4, r0, #25
1000fcdc:	d501      	bpl.n	1000fce2 <char_permissions+0x7a>
1000fcde:	4c08      	ldr	r4, [pc, #32]	; (1000fd00 <char_permissions+0x98>)
1000fce0:	4323      	orrs	r3, r4
1000fce2:	0600      	lsls	r0, r0, #24
1000fce4:	d507      	bpl.n	1000fcf6 <char_permissions+0x8e>
1000fce6:	2004      	movs	r0, #4
1000fce8:	06c9      	lsls	r1, r1, #27
1000fcea:	d400      	bmi.n	1000fcee <char_permissions+0x86>
1000fcec:	200c      	movs	r0, #12
1000fcee:	4303      	orrs	r3, r0
1000fcf0:	2084      	movs	r0, #132	; 0x84
1000fcf2:	0180      	lsls	r0, r0, #6
1000fcf4:	4303      	orrs	r3, r0
1000fcf6:	0390      	lsls	r0, r2, #14
1000fcf8:	4303      	orrs	r3, r0
1000fcfa:	b298      	uxth	r0, r3
1000fcfc:	bd30      	pop	{r4, r5, pc}
1000fcfe:	46c0      	nop			; (mov r8, r8)
1000fd00:	00001004 	.word	0x00001004

1000fd04 <presentation_format_define>:
1000fd04:	b507      	push	{r0, r1, r2, lr}
1000fd06:	466a      	mov	r2, sp
1000fd08:	780b      	ldrb	r3, [r1, #0]
1000fd0a:	7013      	strb	r3, [r2, #0]
1000fd0c:	784b      	ldrb	r3, [r1, #1]
1000fd0e:	7053      	strb	r3, [r2, #1]
1000fd10:	884b      	ldrh	r3, [r1, #2]
1000fd12:	7093      	strb	r3, [r2, #2]
1000fd14:	0a1b      	lsrs	r3, r3, #8
1000fd16:	70d3      	strb	r3, [r2, #3]
1000fd18:	790b      	ldrb	r3, [r1, #4]
1000fd1a:	7113      	strb	r3, [r2, #4]
1000fd1c:	88cb      	ldrh	r3, [r1, #6]
1000fd1e:	2107      	movs	r1, #7
1000fd20:	7153      	strb	r3, [r2, #5]
1000fd22:	0a1b      	lsrs	r3, r3, #8
1000fd24:	7193      	strb	r3, [r2, #6]
1000fd26:	4b01      	ldr	r3, [pc, #4]	; (1000fd2c <presentation_format_define+0x28>)
1000fd28:	4798      	blx	r3
1000fd2a:	bd0e      	pop	{r1, r2, r3, pc}
1000fd2c:	10012099 	.word	0x10012099

1000fd30 <db_addATT>:
1000fd30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000fd32:	4c29      	ldr	r4, [pc, #164]	; (1000fdd8 <db_addATT+0xa8>)
1000fd34:	1c1d      	adds	r5, r3, #0
1000fd36:	6823      	ldr	r3, [r4, #0]
1000fd38:	9001      	str	r0, [sp, #4]
1000fd3a:	26d3      	movs	r6, #211	; 0xd3
1000fd3c:	2b00      	cmp	r3, #0
1000fd3e:	d048      	beq.n	1000fdd2 <db_addATT+0xa2>
1000fd40:	1c1e      	adds	r6, r3, #0
1000fd42:	3e0c      	subs	r6, #12
1000fd44:	6026      	str	r6, [r4, #0]
1000fd46:	2900      	cmp	r1, #0
1000fd48:	d005      	beq.n	1000fd56 <db_addATT+0x26>
1000fd4a:	4f24      	ldr	r7, [pc, #144]	; (1000fddc <db_addATT+0xac>)
1000fd4c:	46bc      	mov	ip, r7
1000fd4e:	4660      	mov	r0, ip
1000fd50:	683f      	ldr	r7, [r7, #0]
1000fd52:	18bf      	adds	r7, r7, r2
1000fd54:	6007      	str	r7, [r0, #0]
1000fd56:	4821      	ldr	r0, [pc, #132]	; (1000fddc <db_addATT+0xac>)
1000fd58:	6807      	ldr	r7, [r0, #0]
1000fd5a:	4684      	mov	ip, r0
1000fd5c:	42be      	cmp	r6, r7
1000fd5e:	d932      	bls.n	1000fdc6 <db_addATT+0x96>
1000fd60:	4668      	mov	r0, sp
1000fd62:	8880      	ldrh	r0, [r0, #4]
1000fd64:	3b0c      	subs	r3, #12
1000fd66:	8018      	strh	r0, [r3, #0]
1000fd68:	6823      	ldr	r3, [r4, #0]
1000fd6a:	2900      	cmp	r1, #0
1000fd6c:	d009      	beq.n	1000fd82 <db_addATT+0x52>
1000fd6e:	2a00      	cmp	r2, #0
1000fd70:	d007      	beq.n	1000fd82 <db_addATT+0x52>
1000fd72:	4660      	mov	r0, ip
1000fd74:	6800      	ldr	r0, [r0, #0]
1000fd76:	809a      	strh	r2, [r3, #4]
1000fd78:	1a80      	subs	r0, r0, r2
1000fd7a:	6098      	str	r0, [r3, #8]
1000fd7c:	4b18      	ldr	r3, [pc, #96]	; (1000fde0 <db_addATT+0xb0>)
1000fd7e:	4798      	blx	r3
1000fd80:	e002      	b.n	1000fd88 <db_addATT+0x58>
1000fd82:	2100      	movs	r1, #0
1000fd84:	809a      	strh	r2, [r3, #4]
1000fd86:	6099      	str	r1, [r3, #8]
1000fd88:	2300      	movs	r3, #0
1000fd8a:	6822      	ldr	r2, [r4, #0]
1000fd8c:	7093      	strb	r3, [r2, #2]
1000fd8e:	3303      	adds	r3, #3
1000fd90:	402b      	ands	r3, r5
1000fd92:	2b03      	cmp	r3, #3
1000fd94:	d001      	beq.n	1000fd9a <db_addATT+0x6a>
1000fd96:	076b      	lsls	r3, r5, #29
1000fd98:	d504      	bpl.n	1000fda4 <db_addATT+0x74>
1000fd9a:	2101      	movs	r1, #1
1000fd9c:	6822      	ldr	r2, [r4, #0]
1000fd9e:	7893      	ldrb	r3, [r2, #2]
1000fda0:	430b      	orrs	r3, r1
1000fda2:	7093      	strb	r3, [r2, #2]
1000fda4:	2330      	movs	r3, #48	; 0x30
1000fda6:	402b      	ands	r3, r5
1000fda8:	2b30      	cmp	r3, #48	; 0x30
1000fdaa:	d001      	beq.n	1000fdb0 <db_addATT+0x80>
1000fdac:	066b      	lsls	r3, r5, #25
1000fdae:	d504      	bpl.n	1000fdba <db_addATT+0x8a>
1000fdb0:	2102      	movs	r1, #2
1000fdb2:	6822      	ldr	r2, [r4, #0]
1000fdb4:	7893      	ldrb	r3, [r2, #2]
1000fdb6:	430b      	orrs	r3, r1
1000fdb8:	7093      	strb	r3, [r2, #2]
1000fdba:	4a0a      	ldr	r2, [pc, #40]	; (1000fde4 <db_addATT+0xb4>)
1000fdbc:	2600      	movs	r6, #0
1000fdbe:	6813      	ldr	r3, [r2, #0]
1000fdc0:	3301      	adds	r3, #1
1000fdc2:	6013      	str	r3, [r2, #0]
1000fdc4:	e005      	b.n	1000fdd2 <db_addATT+0xa2>
1000fdc6:	6023      	str	r3, [r4, #0]
1000fdc8:	2611      	movs	r6, #17
1000fdca:	2900      	cmp	r1, #0
1000fdcc:	d001      	beq.n	1000fdd2 <db_addATT+0xa2>
1000fdce:	1aba      	subs	r2, r7, r2
1000fdd0:	6002      	str	r2, [r0, #0]
1000fdd2:	1c30      	adds	r0, r6, #0
1000fdd4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000fdd6:	46c0      	nop			; (mov r8, r8)
1000fdd8:	1001a360 	.word	0x1001a360
1000fddc:	1001a364 	.word	0x1001a364
1000fde0:	100165c7 	.word	0x100165c7
1000fde4:	1001a368 	.word	0x1001a368

1000fde8 <user_description_define>:
1000fde8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000fdea:	1c05      	adds	r5, r0, #0
1000fdec:	20cf      	movs	r0, #207	; 0xcf
1000fdee:	2a00      	cmp	r2, #0
1000fdf0:	d01c      	beq.n	1000fe2c <user_description_define+0x44>
1000fdf2:	1c14      	adds	r4, r2, #0
1000fdf4:	2203      	movs	r2, #3
1000fdf6:	1c1e      	adds	r6, r3, #0
1000fdf8:	400a      	ands	r2, r1
1000fdfa:	1c0b      	adds	r3, r1, #0
1000fdfc:	3a03      	subs	r2, #3
1000fdfe:	4251      	negs	r1, r2
1000fe00:	4151      	adcs	r1, r2
1000fe02:	075a      	lsls	r2, r3, #29
1000fe04:	0fd2      	lsrs	r2, r2, #31
1000fe06:	430a      	orrs	r2, r1
1000fe08:	03d2      	lsls	r2, r2, #15
1000fe0a:	4f09      	ldr	r7, [pc, #36]	; (1000fe30 <user_description_define+0x48>)
1000fe0c:	1c28      	adds	r0, r5, #0
1000fe0e:	2a00      	cmp	r2, #0
1000fe10:	d003      	beq.n	1000fe1a <user_description_define+0x32>
1000fe12:	1c21      	adds	r1, r4, #0
1000fe14:	1c32      	adds	r2, r6, #0
1000fe16:	47b8      	blx	r7
1000fe18:	e008      	b.n	1000fe2c <user_description_define+0x44>
1000fe1a:	1c11      	adds	r1, r2, #0
1000fe1c:	47b8      	blx	r7
1000fe1e:	2800      	cmp	r0, #0
1000fe20:	d104      	bne.n	1000fe2c <user_description_define+0x44>
1000fe22:	1c28      	adds	r0, r5, #0
1000fe24:	1c31      	adds	r1, r6, #0
1000fe26:	1c22      	adds	r2, r4, #0
1000fe28:	4b02      	ldr	r3, [pc, #8]	; (1000fe34 <user_description_define+0x4c>)
1000fe2a:	4798      	blx	r3
1000fe2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000fe2e:	46c0      	nop			; (mov r8, r8)
1000fe30:	1000fd31 	.word	0x1000fd31
1000fe34:	10012099 	.word	0x10012099

1000fe38 <at_ble_read_authorize_reply.part.1>:
1000fe38:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000fe3a:	4b09      	ldr	r3, [pc, #36]	; (1000fe60 <at_ble_read_authorize_reply.part.1+0x28>)
1000fe3c:	1c05      	adds	r5, r0, #0
1000fe3e:	1c08      	adds	r0, r1, #0
1000fe40:	1c0c      	adds	r4, r1, #0
1000fe42:	4798      	blx	r3
1000fe44:	2800      	cmp	r0, #0
1000fe46:	d009      	beq.n	1000fe5c <at_ble_read_authorize_reply.part.1+0x24>
1000fe48:	6882      	ldr	r2, [r0, #8]
1000fe4a:	2a00      	cmp	r2, #0
1000fe4c:	d006      	beq.n	1000fe5c <at_ble_read_authorize_reply.part.1+0x24>
1000fe4e:	8883      	ldrh	r3, [r0, #4]
1000fe50:	1c29      	adds	r1, r5, #0
1000fe52:	9200      	str	r2, [sp, #0]
1000fe54:	1c20      	adds	r0, r4, #0
1000fe56:	2200      	movs	r2, #0
1000fe58:	4c02      	ldr	r4, [pc, #8]	; (1000fe64 <at_ble_read_authorize_reply.part.1+0x2c>)
1000fe5a:	47a0      	blx	r4
1000fe5c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000fe5e:	46c0      	nop			; (mov r8, r8)
1000fe60:	1000fbd1 	.word	0x1000fbd1
1000fe64:	10011b31 	.word	0x10011b31

1000fe68 <internal_at_ble_service_define>:
1000fe68:	b5f0      	push	{r4, r5, r6, r7, lr}
1000fe6a:	b08b      	sub	sp, #44	; 0x2c
1000fe6c:	9306      	str	r3, [sp, #24]
1000fe6e:	ab10      	add	r3, sp, #64	; 0x40
1000fe70:	9202      	str	r2, [sp, #8]
1000fe72:	cb04      	ldmia	r3!, {r2}
1000fe74:	1c05      	adds	r5, r0, #0
1000fe76:	881b      	ldrh	r3, [r3, #0]
1000fe78:	9105      	str	r1, [sp, #20]
1000fe7a:	9303      	str	r3, [sp, #12]
1000fe7c:	ab12      	add	r3, sp, #72	; 0x48
1000fe7e:	781b      	ldrb	r3, [r3, #0]
1000fe80:	20cf      	movs	r0, #207	; 0xcf
1000fe82:	9304      	str	r3, [sp, #16]
1000fe84:	2d00      	cmp	r5, #0
1000fe86:	d100      	bne.n	1000fe8a <internal_at_ble_service_define+0x22>
1000fe88:	e1ca      	b.n	10010220 <internal_at_ble_service_define+0x3b8>
1000fe8a:	2900      	cmp	r1, #0
1000fe8c:	d100      	bne.n	1000fe90 <internal_at_ble_service_define+0x28>
1000fe8e:	e1c7      	b.n	10010220 <internal_at_ble_service_define+0x3b8>
1000fe90:	2a00      	cmp	r2, #0
1000fe92:	d100      	bne.n	1000fe96 <internal_at_ble_service_define+0x2e>
1000fe94:	e1c4      	b.n	10010220 <internal_at_ble_service_define+0x3b8>
1000fe96:	9b03      	ldr	r3, [sp, #12]
1000fe98:	2b00      	cmp	r3, #0
1000fe9a:	d100      	bne.n	1000fe9e <internal_at_ble_service_define+0x36>
1000fe9c:	e1c0      	b.n	10010220 <internal_at_ble_service_define+0x3b8>
1000fe9e:	4bc9      	ldr	r3, [pc, #804]	; (100101c4 <internal_at_ble_service_define+0x35c>)
1000fea0:	3004      	adds	r0, #4
1000fea2:	681e      	ldr	r6, [r3, #0]
1000fea4:	2e00      	cmp	r6, #0
1000fea6:	d100      	bne.n	1000feaa <internal_at_ble_service_define+0x42>
1000fea8:	e1ba      	b.n	10010220 <internal_at_ble_service_define+0x3b8>
1000feaa:	2400      	movs	r4, #0
1000feac:	4bc6      	ldr	r3, [pc, #792]	; (100101c8 <internal_at_ble_service_define+0x360>)
1000feae:	8034      	strh	r4, [r6, #0]
1000feb0:	881b      	ldrh	r3, [r3, #0]
1000feb2:	1db7      	adds	r7, r6, #6
1000feb4:	1c21      	adds	r1, r4, #0
1000feb6:	2210      	movs	r2, #16
1000feb8:	8073      	strh	r3, [r6, #2]
1000feba:	1c38      	adds	r0, r7, #0
1000febc:	4bc3      	ldr	r3, [pc, #780]	; (100101cc <internal_at_ble_service_define+0x364>)
1000febe:	4798      	blx	r3
1000fec0:	7828      	ldrb	r0, [r5, #0]
1000fec2:	4bc3      	ldr	r3, [pc, #780]	; (100101d0 <internal_at_ble_service_define+0x368>)
1000fec4:	4798      	blx	r3
1000fec6:	1c69      	adds	r1, r5, #1
1000fec8:	1c02      	adds	r2, r0, #0
1000feca:	4bc2      	ldr	r3, [pc, #776]	; (100101d4 <internal_at_ble_service_define+0x36c>)
1000fecc:	1c38      	adds	r0, r7, #0
1000fece:	4798      	blx	r3
1000fed0:	2204      	movs	r2, #4
1000fed2:	782b      	ldrb	r3, [r5, #0]
1000fed4:	9d02      	ldr	r5, [sp, #8]
1000fed6:	011b      	lsls	r3, r3, #4
1000fed8:	4313      	orrs	r3, r2
1000feda:	9a04      	ldr	r2, [sp, #16]
1000fedc:	7174      	strb	r4, [r6, #5]
1000fede:	0192      	lsls	r2, r2, #6
1000fee0:	4313      	orrs	r3, r2
1000fee2:	7133      	strb	r3, [r6, #4]
1000fee4:	2316      	movs	r3, #22
1000fee6:	9a06      	ldr	r2, [sp, #24]
1000fee8:	3512      	adds	r5, #18
1000feea:	4353      	muls	r3, r2
1000feec:	9a02      	ldr	r2, [sp, #8]
1000feee:	3312      	adds	r3, #18
1000fef0:	18d7      	adds	r7, r2, r3
1000fef2:	42bd      	cmp	r5, r7
1000fef4:	d00f      	beq.n	1000ff16 <internal_at_ble_service_define+0xae>
1000fef6:	4bb8      	ldr	r3, [pc, #736]	; (100101d8 <internal_at_ble_service_define+0x370>)
1000fef8:	8829      	ldrh	r1, [r5, #0]
1000fefa:	9300      	str	r3, [sp, #0]
1000fefc:	230e      	movs	r3, #14
1000fefe:	aa06      	add	r2, sp, #24
1000ff00:	189b      	adds	r3, r3, r2
1000ff02:	9301      	str	r3, [sp, #4]
1000ff04:	4cb5      	ldr	r4, [pc, #724]	; (100101dc <internal_at_ble_service_define+0x374>)
1000ff06:	1c30      	adds	r0, r6, #0
1000ff08:	2201      	movs	r2, #1
1000ff0a:	2302      	movs	r3, #2
1000ff0c:	47a0      	blx	r4
1000ff0e:	3516      	adds	r5, #22
1000ff10:	1e04      	subs	r4, r0, #0
1000ff12:	d0ee      	beq.n	1000fef2 <internal_at_ble_service_define+0x8a>
1000ff14:	e183      	b.n	1001021e <internal_at_ble_service_define+0x3b6>
1000ff16:	9f10      	ldr	r7, [sp, #64]	; 0x40
1000ff18:	2300      	movs	r3, #0
1000ff1a:	3714      	adds	r7, #20
1000ff1c:	1c3d      	adds	r5, r7, #0
1000ff1e:	9302      	str	r3, [sp, #8]
1000ff20:	9b02      	ldr	r3, [sp, #8]
1000ff22:	9a03      	ldr	r2, [sp, #12]
1000ff24:	4293      	cmp	r3, r2
1000ff26:	db00      	blt.n	1000ff2a <internal_at_ble_service_define+0xc2>
1000ff28:	e0bf      	b.n	100100aa <internal_at_ble_service_define+0x242>
1000ff2a:	4bad      	ldr	r3, [pc, #692]	; (100101e0 <internal_at_ble_service_define+0x378>)
1000ff2c:	aa06      	add	r2, sp, #24
1000ff2e:	9300      	str	r3, [sp, #0]
1000ff30:	230e      	movs	r3, #14
1000ff32:	189b      	adds	r3, r3, r2
1000ff34:	9301      	str	r3, [sp, #4]
1000ff36:	4ca9      	ldr	r4, [pc, #676]	; (100101dc <internal_at_ble_service_define+0x374>)
1000ff38:	1c30      	adds	r0, r6, #0
1000ff3a:	2104      	movs	r1, #4
1000ff3c:	2201      	movs	r2, #1
1000ff3e:	2302      	movs	r3, #2
1000ff40:	47a0      	blx	r4
1000ff42:	1e04      	subs	r4, r0, #0
1000ff44:	d000      	beq.n	1000ff48 <internal_at_ble_service_define+0xe0>
1000ff46:	e16a      	b.n	1001021e <internal_at_ble_service_define+0x3b6>
1000ff48:	1c2b      	adds	r3, r5, #0
1000ff4a:	3b12      	subs	r3, #18
1000ff4c:	7b2c      	ldrb	r4, [r5, #12]
1000ff4e:	781b      	ldrb	r3, [r3, #0]
1000ff50:	1c21      	adds	r1, r4, #0
1000ff52:	1c1a      	adds	r2, r3, #0
1000ff54:	9304      	str	r3, [sp, #16]
1000ff56:	8828      	ldrh	r0, [r5, #0]
1000ff58:	4ba2      	ldr	r3, [pc, #648]	; (100101e4 <internal_at_ble_service_define+0x37c>)
1000ff5a:	4798      	blx	r3
1000ff5c:	2303      	movs	r3, #3
1000ff5e:	4023      	ands	r3, r4
1000ff60:	3b03      	subs	r3, #3
1000ff62:	4259      	negs	r1, r3
1000ff64:	4159      	adcs	r1, r3
1000ff66:	2301      	movs	r3, #1
1000ff68:	08a4      	lsrs	r4, r4, #2
1000ff6a:	401c      	ands	r4, r3
1000ff6c:	430c      	orrs	r4, r1
1000ff6e:	896b      	ldrh	r3, [r5, #10]
1000ff70:	03e4      	lsls	r4, r4, #15
1000ff72:	431c      	orrs	r4, r3
1000ff74:	9007      	str	r0, [sp, #28]
1000ff76:	4b96      	ldr	r3, [pc, #600]	; (100101d0 <internal_at_ble_service_define+0x368>)
1000ff78:	9804      	ldr	r0, [sp, #16]
1000ff7a:	4798      	blx	r3
1000ff7c:	1c2a      	adds	r2, r5, #0
1000ff7e:	3a11      	subs	r2, #17
1000ff80:	9200      	str	r2, [sp, #0]
1000ff82:	3a03      	subs	r2, #3
1000ff84:	1c03      	adds	r3, r0, #0
1000ff86:	9201      	str	r2, [sp, #4]
1000ff88:	1c21      	adds	r1, r4, #0
1000ff8a:	1c30      	adds	r0, r6, #0
1000ff8c:	4c93      	ldr	r4, [pc, #588]	; (100101dc <internal_at_ble_service_define+0x374>)
1000ff8e:	9a07      	ldr	r2, [sp, #28]
1000ff90:	47a0      	blx	r4
1000ff92:	1e04      	subs	r4, r0, #0
1000ff94:	d000      	beq.n	1000ff98 <internal_at_ble_service_define+0x130>
1000ff96:	e142      	b.n	1001021e <internal_at_ble_service_define+0x3b6>
1000ff98:	22c0      	movs	r2, #192	; 0xc0
1000ff9a:	882b      	ldrh	r3, [r5, #0]
1000ff9c:	0052      	lsls	r2, r2, #1
1000ff9e:	4213      	tst	r3, r2
1000ffa0:	d104      	bne.n	1000ffac <internal_at_ble_service_define+0x144>
1000ffa2:	8aab      	ldrh	r3, [r5, #20]
1000ffa4:	9304      	str	r3, [sp, #16]
1000ffa6:	2b00      	cmp	r3, #0
1000ffa8:	d116      	bne.n	1000ffd8 <internal_at_ble_service_define+0x170>
1000ffaa:	e03a      	b.n	10010022 <internal_at_ble_service_define+0x1ba>
1000ffac:	2201      	movs	r2, #1
1000ffae:	09d9      	lsrs	r1, r3, #7
1000ffb0:	4011      	ands	r1, r2
1000ffb2:	05db      	lsls	r3, r3, #23
1000ffb4:	d501      	bpl.n	1000ffba <internal_at_ble_service_define+0x152>
1000ffb6:	2302      	movs	r3, #2
1000ffb8:	4319      	orrs	r1, r3
1000ffba:	4b8b      	ldr	r3, [pc, #556]	; (100101e8 <internal_at_ble_service_define+0x380>)
1000ffbc:	aa06      	add	r2, sp, #24
1000ffbe:	9300      	str	r3, [sp, #0]
1000ffc0:	230e      	movs	r3, #14
1000ffc2:	189b      	adds	r3, r3, r2
1000ffc4:	9301      	str	r3, [sp, #4]
1000ffc6:	4c85      	ldr	r4, [pc, #532]	; (100101dc <internal_at_ble_service_define+0x374>)
1000ffc8:	0209      	lsls	r1, r1, #8
1000ffca:	1c30      	adds	r0, r6, #0
1000ffcc:	2201      	movs	r2, #1
1000ffce:	2302      	movs	r3, #2
1000ffd0:	47a0      	blx	r4
1000ffd2:	1e04      	subs	r4, r0, #0
1000ffd4:	d0e5      	beq.n	1000ffa2 <internal_at_ble_service_define+0x13a>
1000ffd6:	e122      	b.n	1001021e <internal_at_ble_service_define+0x3b6>
1000ffd8:	2380      	movs	r3, #128	; 0x80
1000ffda:	882a      	ldrh	r2, [r5, #0]
1000ffdc:	7f2c      	ldrb	r4, [r5, #28]
1000ffde:	005b      	lsls	r3, r3, #1
1000ffe0:	401a      	ands	r2, r3
1000ffe2:	1c20      	adds	r0, r4, #0
1000ffe4:	2101      	movs	r1, #1
1000ffe6:	2a00      	cmp	r2, #0
1000ffe8:	d000      	beq.n	1000ffec <internal_at_ble_service_define+0x184>
1000ffea:	1c0a      	adds	r2, r1, #0
1000ffec:	4b7f      	ldr	r3, [pc, #508]	; (100101ec <internal_at_ble_service_define+0x384>)
1000ffee:	4798      	blx	r3
1000fff0:	2203      	movs	r2, #3
1000fff2:	4022      	ands	r2, r4
1000fff4:	3a03      	subs	r2, #3
1000fff6:	4251      	negs	r1, r2
1000fff8:	4151      	adcs	r1, r2
1000fffa:	4b7d      	ldr	r3, [pc, #500]	; (100101f0 <internal_at_ble_service_define+0x388>)
1000fffc:	1c0a      	adds	r2, r1, #0
1000fffe:	9300      	str	r3, [sp, #0]
10010000:	1c2b      	adds	r3, r5, #0
10010002:	0764      	lsls	r4, r4, #29
10010004:	0fe4      	lsrs	r4, r4, #31
10010006:	4322      	orrs	r2, r4
10010008:	03d2      	lsls	r2, r2, #15
1001000a:	4310      	orrs	r0, r2
1001000c:	3320      	adds	r3, #32
1001000e:	b282      	uxth	r2, r0
10010010:	9301      	str	r3, [sp, #4]
10010012:	4c72      	ldr	r4, [pc, #456]	; (100101dc <internal_at_ble_service_define+0x374>)
10010014:	1c30      	adds	r0, r6, #0
10010016:	9904      	ldr	r1, [sp, #16]
10010018:	2302      	movs	r3, #2
1001001a:	47a0      	blx	r4
1001001c:	1e04      	subs	r4, r0, #0
1001001e:	d000      	beq.n	10010022 <internal_at_ble_service_define+0x1ba>
10010020:	e0fd      	b.n	1001021e <internal_at_ble_service_define+0x3b6>
10010022:	2101      	movs	r1, #1
10010024:	882b      	ldrh	r3, [r5, #0]
10010026:	420b      	tst	r3, r1
10010028:	d011      	beq.n	1001004e <internal_at_ble_service_define+0x1e6>
1001002a:	7fa8      	ldrb	r0, [r5, #30]
1001002c:	4b6f      	ldr	r3, [pc, #444]	; (100101ec <internal_at_ble_service_define+0x384>)
1001002e:	2200      	movs	r2, #0
10010030:	4798      	blx	r3
10010032:	4b70      	ldr	r3, [pc, #448]	; (100101f4 <internal_at_ble_service_define+0x38c>)
10010034:	1c02      	adds	r2, r0, #0
10010036:	9300      	str	r3, [sp, #0]
10010038:	1c2b      	adds	r3, r5, #0
1001003a:	3324      	adds	r3, #36	; 0x24
1001003c:	9301      	str	r3, [sp, #4]
1001003e:	4c67      	ldr	r4, [pc, #412]	; (100101dc <internal_at_ble_service_define+0x374>)
10010040:	1c30      	adds	r0, r6, #0
10010042:	496d      	ldr	r1, [pc, #436]	; (100101f8 <internal_at_ble_service_define+0x390>)
10010044:	2302      	movs	r3, #2
10010046:	47a0      	blx	r4
10010048:	1e04      	subs	r4, r0, #0
1001004a:	d000      	beq.n	1001004e <internal_at_ble_service_define+0x1e6>
1001004c:	e0e7      	b.n	1001021e <internal_at_ble_service_define+0x3b6>
1001004e:	2330      	movs	r3, #48	; 0x30
10010050:	882a      	ldrh	r2, [r5, #0]
10010052:	421a      	tst	r2, r3
10010054:	d012      	beq.n	1001007c <internal_at_ble_service_define+0x214>
10010056:	2101      	movs	r1, #1
10010058:	7f68      	ldrb	r0, [r5, #29]
1001005a:	1c0a      	adds	r2, r1, #0
1001005c:	4b63      	ldr	r3, [pc, #396]	; (100101ec <internal_at_ble_service_define+0x384>)
1001005e:	4798      	blx	r3
10010060:	4b66      	ldr	r3, [pc, #408]	; (100101fc <internal_at_ble_service_define+0x394>)
10010062:	1c02      	adds	r2, r0, #0
10010064:	9300      	str	r3, [sp, #0]
10010066:	1c2b      	adds	r3, r5, #0
10010068:	3322      	adds	r3, #34	; 0x22
1001006a:	9301      	str	r3, [sp, #4]
1001006c:	4c5b      	ldr	r4, [pc, #364]	; (100101dc <internal_at_ble_service_define+0x374>)
1001006e:	1c30      	adds	r0, r6, #0
10010070:	4961      	ldr	r1, [pc, #388]	; (100101f8 <internal_at_ble_service_define+0x390>)
10010072:	2302      	movs	r3, #2
10010074:	47a0      	blx	r4
10010076:	1e04      	subs	r4, r0, #0
10010078:	d000      	beq.n	1001007c <internal_at_ble_service_define+0x214>
1001007a:	e0d0      	b.n	1001021e <internal_at_ble_service_define+0x3b6>
1001007c:	69ab      	ldr	r3, [r5, #24]
1001007e:	2b00      	cmp	r3, #0
10010080:	d00e      	beq.n	100100a0 <internal_at_ble_service_define+0x238>
10010082:	4b5f      	ldr	r3, [pc, #380]	; (10010200 <internal_at_ble_service_define+0x398>)
10010084:	aa06      	add	r2, sp, #24
10010086:	9300      	str	r3, [sp, #0]
10010088:	230e      	movs	r3, #14
1001008a:	189b      	adds	r3, r3, r2
1001008c:	9301      	str	r3, [sp, #4]
1001008e:	4c53      	ldr	r4, [pc, #332]	; (100101dc <internal_at_ble_service_define+0x374>)
10010090:	1c30      	adds	r0, r6, #0
10010092:	2107      	movs	r1, #7
10010094:	2201      	movs	r2, #1
10010096:	2302      	movs	r3, #2
10010098:	47a0      	blx	r4
1001009a:	1e04      	subs	r4, r0, #0
1001009c:	d000      	beq.n	100100a0 <internal_at_ble_service_define+0x238>
1001009e:	e0be      	b.n	1001021e <internal_at_ble_service_define+0x3b6>
100100a0:	9b02      	ldr	r3, [sp, #8]
100100a2:	353c      	adds	r5, #60	; 0x3c
100100a4:	3301      	adds	r3, #1
100100a6:	9302      	str	r3, [sp, #8]
100100a8:	e73a      	b.n	1000ff20 <internal_at_ble_service_define+0xb8>
100100aa:	1c30      	adds	r0, r6, #0
100100ac:	4b55      	ldr	r3, [pc, #340]	; (10010204 <internal_at_ble_service_define+0x39c>)
100100ae:	4798      	blx	r3
100100b0:	1e04      	subs	r4, r0, #0
100100b2:	d000      	beq.n	100100b6 <internal_at_ble_service_define+0x24e>
100100b4:	e0b3      	b.n	1001021e <internal_at_ble_service_define+0x3b6>
100100b6:	8833      	ldrh	r3, [r6, #0]
100100b8:	9a05      	ldr	r2, [sp, #20]
100100ba:	8013      	strh	r3, [r2, #0]
100100bc:	8836      	ldrh	r6, [r6, #0]
100100be:	9b06      	ldr	r3, [sp, #24]
100100c0:	9a03      	ldr	r2, [sp, #12]
100100c2:	18f6      	adds	r6, r6, r3
100100c4:	b2b3      	uxth	r3, r6
100100c6:	9302      	str	r3, [sp, #8]
100100c8:	233c      	movs	r3, #60	; 0x3c
100100ca:	4353      	muls	r3, r2
100100cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
100100ce:	3314      	adds	r3, #20
100100d0:	18d3      	adds	r3, r2, r3
100100d2:	9304      	str	r3, [sp, #16]
100100d4:	9b04      	ldr	r3, [sp, #16]
100100d6:	429f      	cmp	r7, r3
100100d8:	d100      	bne.n	100100dc <internal_at_ble_service_define+0x274>
100100da:	e0a0      	b.n	1001021e <internal_at_ble_service_define+0x3b6>
100100dc:	9b02      	ldr	r3, [sp, #8]
100100de:	1c9d      	adds	r5, r3, #2
100100e0:	1c3b      	adds	r3, r7, #0
100100e2:	b2ad      	uxth	r5, r5
100100e4:	3b14      	subs	r3, #20
100100e6:	801d      	strh	r5, [r3, #0]
100100e8:	9303      	str	r3, [sp, #12]
100100ea:	893b      	ldrh	r3, [r7, #8]
100100ec:	2b00      	cmp	r3, #0
100100ee:	d108      	bne.n	10010102 <internal_at_ble_service_define+0x29a>
100100f0:	23c0      	movs	r3, #192	; 0xc0
100100f2:	883a      	ldrh	r2, [r7, #0]
100100f4:	005b      	lsls	r3, r3, #1
100100f6:	421a      	tst	r2, r3
100100f8:	d026      	beq.n	10010148 <internal_at_ble_service_define+0x2e0>
100100fa:	9e02      	ldr	r6, [sp, #8]
100100fc:	3603      	adds	r6, #3
100100fe:	b2b5      	uxth	r5, r6
10010100:	e022      	b.n	10010148 <internal_at_ble_service_define+0x2e0>
10010102:	2103      	movs	r1, #3
10010104:	7b3b      	ldrb	r3, [r7, #12]
10010106:	4019      	ands	r1, r3
10010108:	3903      	subs	r1, #3
1001010a:	424a      	negs	r2, r1
1001010c:	414a      	adcs	r2, r1
1001010e:	0759      	lsls	r1, r3, #29
10010110:	0fc9      	lsrs	r1, r1, #31
10010112:	4311      	orrs	r1, r2
10010114:	03c9      	lsls	r1, r1, #15
10010116:	897a      	ldrh	r2, [r7, #10]
10010118:	2900      	cmp	r1, #0
1001011a:	d007      	beq.n	1001012c <internal_at_ble_service_define+0x2c4>
1001011c:	6879      	ldr	r1, [r7, #4]
1001011e:	2900      	cmp	r1, #0
10010120:	d100      	bne.n	10010124 <internal_at_ble_service_define+0x2bc>
10010122:	4939      	ldr	r1, [pc, #228]	; (10010208 <internal_at_ble_service_define+0x3a0>)
10010124:	1c28      	adds	r0, r5, #0
10010126:	4e39      	ldr	r6, [pc, #228]	; (1001020c <internal_at_ble_service_define+0x3a4>)
10010128:	47b0      	blx	r6
1001012a:	e00a      	b.n	10010142 <internal_at_ble_service_define+0x2da>
1001012c:	1c28      	adds	r0, r5, #0
1001012e:	4e37      	ldr	r6, [pc, #220]	; (1001020c <internal_at_ble_service_define+0x3a4>)
10010130:	47b0      	blx	r6
10010132:	2800      	cmp	r0, #0
10010134:	d172      	bne.n	1001021c <internal_at_ble_service_define+0x3b4>
10010136:	9b03      	ldr	r3, [sp, #12]
10010138:	8939      	ldrh	r1, [r7, #8]
1001013a:	8818      	ldrh	r0, [r3, #0]
1001013c:	687a      	ldr	r2, [r7, #4]
1001013e:	4b34      	ldr	r3, [pc, #208]	; (10010210 <internal_at_ble_service_define+0x3a8>)
10010140:	4798      	blx	r3
10010142:	2800      	cmp	r0, #0
10010144:	d0d4      	beq.n	100100f0 <internal_at_ble_service_define+0x288>
10010146:	e069      	b.n	1001021c <internal_at_ble_service_define+0x3b4>
10010148:	8abb      	ldrh	r3, [r7, #20]
1001014a:	2b00      	cmp	r3, #0
1001014c:	d00a      	beq.n	10010164 <internal_at_ble_service_define+0x2fc>
1001014e:	3501      	adds	r5, #1
10010150:	b2ad      	uxth	r5, r5
10010152:	843d      	strh	r5, [r7, #32]
10010154:	7f39      	ldrb	r1, [r7, #28]
10010156:	8afb      	ldrh	r3, [r7, #22]
10010158:	1c28      	adds	r0, r5, #0
1001015a:	693a      	ldr	r2, [r7, #16]
1001015c:	4e2d      	ldr	r6, [pc, #180]	; (10010214 <internal_at_ble_service_define+0x3ac>)
1001015e:	47b0      	blx	r6
10010160:	2800      	cmp	r0, #0
10010162:	d15b      	bne.n	1001021c <internal_at_ble_service_define+0x3b4>
10010164:	883b      	ldrh	r3, [r7, #0]
10010166:	07db      	lsls	r3, r3, #31
10010168:	d50d      	bpl.n	10010186 <internal_at_ble_service_define+0x31e>
1001016a:	2200      	movs	r2, #0
1001016c:	3501      	adds	r5, #1
1001016e:	b2ad      	uxth	r5, r5
10010170:	a909      	add	r1, sp, #36	; 0x24
10010172:	84bd      	strh	r5, [r7, #36]	; 0x24
10010174:	7fbb      	ldrb	r3, [r7, #30]
10010176:	1c28      	adds	r0, r5, #0
10010178:	700a      	strb	r2, [r1, #0]
1001017a:	704a      	strb	r2, [r1, #1]
1001017c:	4e23      	ldr	r6, [pc, #140]	; (1001020c <internal_at_ble_service_define+0x3a4>)
1001017e:	3202      	adds	r2, #2
10010180:	47b0      	blx	r6
10010182:	2800      	cmp	r0, #0
10010184:	d14a      	bne.n	1001021c <internal_at_ble_service_define+0x3b4>
10010186:	2330      	movs	r3, #48	; 0x30
10010188:	883a      	ldrh	r2, [r7, #0]
1001018a:	421a      	tst	r2, r3
1001018c:	d00d      	beq.n	100101aa <internal_at_ble_service_define+0x342>
1001018e:	2200      	movs	r2, #0
10010190:	3501      	adds	r5, #1
10010192:	b2ad      	uxth	r5, r5
10010194:	a909      	add	r1, sp, #36	; 0x24
10010196:	847d      	strh	r5, [r7, #34]	; 0x22
10010198:	7f7b      	ldrb	r3, [r7, #29]
1001019a:	1c28      	adds	r0, r5, #0
1001019c:	700a      	strb	r2, [r1, #0]
1001019e:	704a      	strb	r2, [r1, #1]
100101a0:	4e1a      	ldr	r6, [pc, #104]	; (1001020c <internal_at_ble_service_define+0x3a4>)
100101a2:	3202      	adds	r2, #2
100101a4:	47b0      	blx	r6
100101a6:	2800      	cmp	r0, #0
100101a8:	d138      	bne.n	1001021c <internal_at_ble_service_define+0x3b4>
100101aa:	69b9      	ldr	r1, [r7, #24]
100101ac:	2900      	cmp	r1, #0
100101ae:	d006      	beq.n	100101be <internal_at_ble_service_define+0x356>
100101b0:	3501      	adds	r5, #1
100101b2:	b2ad      	uxth	r5, r5
100101b4:	1c28      	adds	r0, r5, #0
100101b6:	4b18      	ldr	r3, [pc, #96]	; (10010218 <internal_at_ble_service_define+0x3b0>)
100101b8:	4798      	blx	r3
100101ba:	2800      	cmp	r0, #0
100101bc:	d12e      	bne.n	1001021c <internal_at_ble_service_define+0x3b4>
100101be:	373c      	adds	r7, #60	; 0x3c
100101c0:	9502      	str	r5, [sp, #8]
100101c2:	e787      	b.n	100100d4 <internal_at_ble_service_define+0x26c>
100101c4:	1001a370 	.word	0x1001a370
100101c8:	1001b2bc 	.word	0x1001b2bc
100101cc:	100165d9 	.word	0x100165d9
100101d0:	1000fb9d 	.word	0x1000fb9d
100101d4:	100165c7 	.word	0x100165c7
100101d8:	100186a6 	.word	0x100186a6
100101dc:	10012029 	.word	0x10012029
100101e0:	100186a8 	.word	0x100186a8
100101e4:	1000fc69 	.word	0x1000fc69
100101e8:	100186a4 	.word	0x100186a4
100101ec:	1000fc11 	.word	0x1000fc11
100101f0:	100186a0 	.word	0x100186a0
100101f4:	100186a2 	.word	0x100186a2
100101f8:	00008002 	.word	0x00008002
100101fc:	1001869c 	.word	0x1001869c
10010200:	1001869e 	.word	0x1001869e
10010204:	10011f1d 	.word	0x10011f1d
10010208:	1001a35c 	.word	0x1001a35c
1001020c:	1000fd31 	.word	0x1000fd31
10010210:	10012099 	.word	0x10012099
10010214:	1000fde9 	.word	0x1000fde9
10010218:	1000fd05 	.word	0x1000fd05
1001021c:	1c04      	adds	r4, r0, #0
1001021e:	1c20      	adds	r0, r4, #0
10010220:	b00b      	add	sp, #44	; 0x2c
10010222:	bdf0      	pop	{r4, r5, r6, r7, pc}

10010224 <initi_gatt_server_module>:
10010224:	2300      	movs	r3, #0
10010226:	4a07      	ldr	r2, [pc, #28]	; (10010244 <initi_gatt_server_module+0x20>)
10010228:	7013      	strb	r3, [r2, #0]
1001022a:	4a07      	ldr	r2, [pc, #28]	; (10010248 <initi_gatt_server_module+0x24>)
1001022c:	6013      	str	r3, [r2, #0]
1001022e:	4a07      	ldr	r2, [pc, #28]	; (1001024c <initi_gatt_server_module+0x28>)
10010230:	6013      	str	r3, [r2, #0]
10010232:	4a07      	ldr	r2, [pc, #28]	; (10010250 <initi_gatt_server_module+0x2c>)
10010234:	6013      	str	r3, [r2, #0]
10010236:	4a07      	ldr	r2, [pc, #28]	; (10010254 <initi_gatt_server_module+0x30>)
10010238:	6013      	str	r3, [r2, #0]
1001023a:	4a07      	ldr	r2, [pc, #28]	; (10010258 <initi_gatt_server_module+0x34>)
1001023c:	6013      	str	r3, [r2, #0]
1001023e:	4a07      	ldr	r2, [pc, #28]	; (1001025c <initi_gatt_server_module+0x38>)
10010240:	6013      	str	r3, [r2, #0]
10010242:	4770      	bx	lr
10010244:	1001a35c 	.word	0x1001a35c
10010248:	1001a36c 	.word	0x1001a36c
1001024c:	1001a368 	.word	0x1001a368
10010250:	1001a358 	.word	0x1001a358
10010254:	1001a364 	.word	0x1001a364
10010258:	1001a360 	.word	0x1001a360
1001025c:	1001a370 	.word	0x1001a370

10010260 <db_init>:
10010260:	4b0a      	ldr	r3, [pc, #40]	; (1001028c <db_init+0x2c>)
10010262:	4a0b      	ldr	r2, [pc, #44]	; (10010290 <db_init+0x30>)
10010264:	6018      	str	r0, [r3, #0]
10010266:	084b      	lsrs	r3, r1, #1
10010268:	6013      	str	r3, [r2, #0]
1001026a:	4a0a      	ldr	r2, [pc, #40]	; (10010294 <db_init+0x34>)
1001026c:	18c3      	adds	r3, r0, r3
1001026e:	6013      	str	r3, [r2, #0]
10010270:	4a09      	ldr	r2, [pc, #36]	; (10010298 <db_init+0x38>)
10010272:	1841      	adds	r1, r0, r1
10010274:	6013      	str	r3, [r2, #0]
10010276:	2303      	movs	r3, #3
10010278:	2200      	movs	r2, #0
1001027a:	3103      	adds	r1, #3
1001027c:	4399      	bics	r1, r3
1001027e:	4b07      	ldr	r3, [pc, #28]	; (1001029c <db_init+0x3c>)
10010280:	3904      	subs	r1, #4
10010282:	6019      	str	r1, [r3, #0]
10010284:	4b06      	ldr	r3, [pc, #24]	; (100102a0 <db_init+0x40>)
10010286:	601a      	str	r2, [r3, #0]
10010288:	4770      	bx	lr
1001028a:	46c0      	nop			; (mov r8, r8)
1001028c:	1001a370 	.word	0x1001a370
10010290:	1001a36c 	.word	0x1001a36c
10010294:	1001a358 	.word	0x1001a358
10010298:	1001a364 	.word	0x1001a364
1001029c:	1001a360 	.word	0x1001a360
100102a0:	1001a368 	.word	0x1001a368

100102a4 <at_ble_primary_service_define>:
100102a4:	b530      	push	{r4, r5, lr}
100102a6:	b085      	sub	sp, #20
100102a8:	ac08      	add	r4, sp, #32
100102aa:	cc20      	ldmia	r4!, {r5}
100102ac:	8824      	ldrh	r4, [r4, #0]
100102ae:	9500      	str	r5, [sp, #0]
100102b0:	9401      	str	r4, [sp, #4]
100102b2:	2401      	movs	r4, #1
100102b4:	9402      	str	r4, [sp, #8]
100102b6:	4c02      	ldr	r4, [pc, #8]	; (100102c0 <at_ble_primary_service_define+0x1c>)
100102b8:	47a0      	blx	r4
100102ba:	b005      	add	sp, #20
100102bc:	bd30      	pop	{r4, r5, pc}
100102be:	46c0      	nop			; (mov r8, r8)
100102c0:	1000fe69 	.word	0x1000fe69

100102c4 <at_ble_characteristic_value_set>:
100102c4:	b570      	push	{r4, r5, r6, lr}
100102c6:	4b0b      	ldr	r3, [pc, #44]	; (100102f4 <at_ble_characteristic_value_set+0x30>)
100102c8:	1c06      	adds	r6, r0, #0
100102ca:	1c0c      	adds	r4, r1, #0
100102cc:	1c15      	adds	r5, r2, #0
100102ce:	4798      	blx	r3
100102d0:	2800      	cmp	r0, #0
100102d2:	d008      	beq.n	100102e6 <at_ble_characteristic_value_set+0x22>
100102d4:	6880      	ldr	r0, [r0, #8]
100102d6:	2800      	cmp	r0, #0
100102d8:	d005      	beq.n	100102e6 <at_ble_characteristic_value_set+0x22>
100102da:	1c21      	adds	r1, r4, #0
100102dc:	1c2a      	adds	r2, r5, #0
100102de:	4b06      	ldr	r3, [pc, #24]	; (100102f8 <at_ble_characteristic_value_set+0x34>)
100102e0:	4798      	blx	r3
100102e2:	2000      	movs	r0, #0
100102e4:	e004      	b.n	100102f0 <at_ble_characteristic_value_set+0x2c>
100102e6:	1c30      	adds	r0, r6, #0
100102e8:	1c29      	adds	r1, r5, #0
100102ea:	1c22      	adds	r2, r4, #0
100102ec:	4b03      	ldr	r3, [pc, #12]	; (100102fc <at_ble_characteristic_value_set+0x38>)
100102ee:	4798      	blx	r3
100102f0:	bd70      	pop	{r4, r5, r6, pc}
100102f2:	46c0      	nop			; (mov r8, r8)
100102f4:	1000fbd1 	.word	0x1000fbd1
100102f8:	100165c7 	.word	0x100165c7
100102fc:	10012099 	.word	0x10012099

10010300 <at_ble_characteristic_value_get>:
10010300:	b570      	push	{r4, r5, r6, lr}
10010302:	4b0c      	ldr	r3, [pc, #48]	; (10010334 <at_ble_characteristic_value_get+0x34>)
10010304:	1c06      	adds	r6, r0, #0
10010306:	1c0c      	adds	r4, r1, #0
10010308:	1c15      	adds	r5, r2, #0
1001030a:	4798      	blx	r3
1001030c:	2800      	cmp	r0, #0
1001030e:	d00b      	beq.n	10010328 <at_ble_characteristic_value_get+0x28>
10010310:	6883      	ldr	r3, [r0, #8]
10010312:	2b00      	cmp	r3, #0
10010314:	d008      	beq.n	10010328 <at_ble_characteristic_value_get+0x28>
10010316:	8883      	ldrh	r3, [r0, #4]
10010318:	802b      	strh	r3, [r5, #0]
1001031a:	8882      	ldrh	r2, [r0, #4]
1001031c:	6881      	ldr	r1, [r0, #8]
1001031e:	4b06      	ldr	r3, [pc, #24]	; (10010338 <at_ble_characteristic_value_get+0x38>)
10010320:	1c20      	adds	r0, r4, #0
10010322:	4798      	blx	r3
10010324:	2000      	movs	r0, #0
10010326:	e004      	b.n	10010332 <at_ble_characteristic_value_get+0x32>
10010328:	1c30      	adds	r0, r6, #0
1001032a:	1c29      	adds	r1, r5, #0
1001032c:	1c22      	adds	r2, r4, #0
1001032e:	4b03      	ldr	r3, [pc, #12]	; (1001033c <at_ble_characteristic_value_get+0x3c>)
10010330:	4798      	blx	r3
10010332:	bd70      	pop	{r4, r5, r6, pc}
10010334:	1000fbd1 	.word	0x1000fbd1
10010338:	100165c7 	.word	0x100165c7
1001033c:	10012125 	.word	0x10012125

10010340 <at_ble_write_authorize_reply>:
10010340:	b5f0      	push	{r4, r5, r6, r7, lr}
10010342:	b085      	sub	sp, #20
10010344:	1c04      	adds	r4, r0, #0
10010346:	9101      	str	r1, [sp, #4]
10010348:	2900      	cmp	r1, #0
1001034a:	d128      	bne.n	1001039e <at_ble_write_authorize_reply+0x5e>
1001034c:	8843      	ldrh	r3, [r0, #2]
1001034e:	1c27      	adds	r7, r4, #0
10010350:	9300      	str	r3, [sp, #0]
10010352:	1c18      	adds	r0, r3, #0
10010354:	4b16      	ldr	r3, [pc, #88]	; (100103b0 <at_ble_write_authorize_reply+0x70>)
10010356:	4798      	blx	r3
10010358:	3708      	adds	r7, #8
1001035a:	2800      	cmp	r0, #0
1001035c:	d009      	beq.n	10010372 <at_ble_write_authorize_reply+0x32>
1001035e:	6880      	ldr	r0, [r0, #8]
10010360:	2800      	cmp	r0, #0
10010362:	d006      	beq.n	10010372 <at_ble_write_authorize_reply+0x32>
10010364:	88a3      	ldrh	r3, [r4, #4]
10010366:	88e2      	ldrh	r2, [r4, #6]
10010368:	18c0      	adds	r0, r0, r3
1001036a:	1c39      	adds	r1, r7, #0
1001036c:	4b11      	ldr	r3, [pc, #68]	; (100103b4 <at_ble_write_authorize_reply+0x74>)
1001036e:	4798      	blx	r3
10010370:	e015      	b.n	1001039e <at_ble_write_authorize_reply+0x5e>
10010372:	ab02      	add	r3, sp, #8
10010374:	1d9e      	adds	r6, r3, #6
10010376:	2300      	movs	r3, #0
10010378:	4d0f      	ldr	r5, [pc, #60]	; (100103b8 <at_ble_write_authorize_reply+0x78>)
1001037a:	8033      	strh	r3, [r6, #0]
1001037c:	6829      	ldr	r1, [r5, #0]
1001037e:	1c32      	adds	r2, r6, #0
10010380:	4b0e      	ldr	r3, [pc, #56]	; (100103bc <at_ble_write_authorize_reply+0x7c>)
10010382:	9800      	ldr	r0, [sp, #0]
10010384:	4798      	blx	r3
10010386:	682b      	ldr	r3, [r5, #0]
10010388:	88a0      	ldrh	r0, [r4, #4]
1001038a:	88e2      	ldrh	r2, [r4, #6]
1001038c:	1818      	adds	r0, r3, r0
1001038e:	1c39      	adds	r1, r7, #0
10010390:	4b08      	ldr	r3, [pc, #32]	; (100103b4 <at_ble_write_authorize_reply+0x74>)
10010392:	4798      	blx	r3
10010394:	8860      	ldrh	r0, [r4, #2]
10010396:	8832      	ldrh	r2, [r6, #0]
10010398:	6829      	ldr	r1, [r5, #0]
1001039a:	4b09      	ldr	r3, [pc, #36]	; (100103c0 <at_ble_write_authorize_reply+0x80>)
1001039c:	4798      	blx	r3
1001039e:	8860      	ldrh	r0, [r4, #2]
100103a0:	8821      	ldrh	r1, [r4, #0]
100103a2:	9a01      	ldr	r2, [sp, #4]
100103a4:	4b07      	ldr	r3, [pc, #28]	; (100103c4 <at_ble_write_authorize_reply+0x84>)
100103a6:	4798      	blx	r3
100103a8:	2000      	movs	r0, #0
100103aa:	b005      	add	sp, #20
100103ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
100103ae:	46c0      	nop			; (mov r8, r8)
100103b0:	1000fbd1 	.word	0x1000fbd1
100103b4:	100165c7 	.word	0x100165c7
100103b8:	100188cc 	.word	0x100188cc
100103bc:	10010301 	.word	0x10010301
100103c0:	100102c5 	.word	0x100102c5
100103c4:	10011b9d 	.word	0x10011b9d

100103c8 <gatts_handle_read_req>:
100103c8:	b538      	push	{r3, r4, r5, lr}
100103ca:	1c0c      	adds	r4, r1, #0
100103cc:	4b07      	ldr	r3, [pc, #28]	; (100103ec <gatts_handle_read_req+0x24>)
100103ce:	4798      	blx	r3
100103d0:	8865      	ldrh	r5, [r4, #2]
100103d2:	4b07      	ldr	r3, [pc, #28]	; (100103f0 <gatts_handle_read_req+0x28>)
100103d4:	1c28      	adds	r0, r5, #0
100103d6:	4798      	blx	r3
100103d8:	7883      	ldrb	r3, [r0, #2]
100103da:	2026      	movs	r0, #38	; 0x26
100103dc:	07db      	lsls	r3, r3, #31
100103de:	d404      	bmi.n	100103ea <gatts_handle_read_req+0x22>
100103e0:	8820      	ldrh	r0, [r4, #0]
100103e2:	1c29      	adds	r1, r5, #0
100103e4:	4b03      	ldr	r3, [pc, #12]	; (100103f4 <gatts_handle_read_req+0x2c>)
100103e6:	4798      	blx	r3
100103e8:	203b      	movs	r0, #59	; 0x3b
100103ea:	bd38      	pop	{r3, r4, r5, pc}
100103ec:	10011ae1 	.word	0x10011ae1
100103f0:	1000fbd1 	.word	0x1000fbd1
100103f4:	1000fe39 	.word	0x1000fe39

100103f8 <gatts_handle_att_info_req>:
100103f8:	b538      	push	{r3, r4, r5, lr}
100103fa:	1c0d      	adds	r5, r1, #0
100103fc:	4b0a      	ldr	r3, [pc, #40]	; (10010428 <gatts_handle_att_info_req+0x30>)
100103fe:	1c14      	adds	r4, r2, #0
10010400:	4798      	blx	r3
10010402:	882d      	ldrh	r5, [r5, #0]
10010404:	4b09      	ldr	r3, [pc, #36]	; (1001042c <gatts_handle_att_info_req+0x34>)
10010406:	1c28      	adds	r0, r5, #0
10010408:	4798      	blx	r3
1001040a:	0a22      	lsrs	r2, r4, #8
1001040c:	1c03      	adds	r3, r0, #0
1001040e:	4c08      	ldr	r4, [pc, #32]	; (10010430 <gatts_handle_att_info_req+0x38>)
10010410:	b291      	uxth	r1, r2
10010412:	2800      	cmp	r0, #0
10010414:	d003      	beq.n	1001041e <gatts_handle_att_info_req+0x26>
10010416:	8882      	ldrh	r2, [r0, #4]
10010418:	2300      	movs	r3, #0
1001041a:	1c28      	adds	r0, r5, #0
1001041c:	e001      	b.n	10010422 <gatts_handle_att_info_req+0x2a>
1001041e:	1c28      	adds	r0, r5, #0
10010420:	2201      	movs	r2, #1
10010422:	47a0      	blx	r4
10010424:	203b      	movs	r0, #59	; 0x3b
10010426:	bd38      	pop	{r3, r4, r5, pc}
10010428:	10011b25 	.word	0x10011b25
1001042c:	1000fbd1 	.word	0x1000fbd1
10010430:	10011be1 	.word	0x10011be1

10010434 <gatts_handle_write_req>:
10010434:	b510      	push	{r4, lr}
10010436:	1c14      	adds	r4, r2, #0
10010438:	4b07      	ldr	r3, [pc, #28]	; (10010458 <gatts_handle_write_req+0x24>)
1001043a:	4798      	blx	r3
1001043c:	4b07      	ldr	r3, [pc, #28]	; (1001045c <gatts_handle_write_req+0x28>)
1001043e:	8860      	ldrh	r0, [r4, #2]
10010440:	4798      	blx	r3
10010442:	2302      	movs	r3, #2
10010444:	7881      	ldrb	r1, [r0, #2]
10010446:	2022      	movs	r0, #34	; 0x22
10010448:	4019      	ands	r1, r3
1001044a:	d103      	bne.n	10010454 <gatts_handle_write_req+0x20>
1001044c:	1c20      	adds	r0, r4, #0
1001044e:	4b04      	ldr	r3, [pc, #16]	; (10010460 <gatts_handle_write_req+0x2c>)
10010450:	4798      	blx	r3
10010452:	201f      	movs	r0, #31
10010454:	bd10      	pop	{r4, pc}
10010456:	46c0      	nop			; (mov r8, r8)
10010458:	10011aed 	.word	0x10011aed
1001045c:	1000fbd1 	.word	0x1000fbd1
10010460:	10010341 	.word	0x10010341

10010464 <at_ble_notification_send>:
10010464:	b5f0      	push	{r4, r5, r6, r7, lr}
10010466:	4d17      	ldr	r5, [pc, #92]	; (100104c4 <at_ble_notification_send+0x60>)
10010468:	4c17      	ldr	r4, [pc, #92]	; (100104c8 <at_ble_notification_send+0x64>)
1001046a:	682a      	ldr	r2, [r5, #0]
1001046c:	44a5      	add	sp, r4
1001046e:	23d2      	movs	r3, #210	; 0xd2
10010470:	2a04      	cmp	r2, #4
10010472:	d822      	bhi.n	100104ba <at_ble_notification_send+0x56>
10010474:	1c06      	adds	r6, r0, #0
10010476:	4b15      	ldr	r3, [pc, #84]	; (100104cc <at_ble_notification_send+0x68>)
10010478:	1c08      	adds	r0, r1, #0
1001047a:	1c0c      	adds	r4, r1, #0
1001047c:	4798      	blx	r3
1001047e:	2800      	cmp	r0, #0
10010480:	d008      	beq.n	10010494 <at_ble_notification_send+0x30>
10010482:	6883      	ldr	r3, [r0, #8]
10010484:	2b00      	cmp	r3, #0
10010486:	d005      	beq.n	10010494 <at_ble_notification_send+0x30>
10010488:	8882      	ldrh	r2, [r0, #4]
1001048a:	1c21      	adds	r1, r4, #0
1001048c:	9200      	str	r2, [sp, #0]
1001048e:	2012      	movs	r0, #18
10010490:	1c32      	adds	r2, r6, #0
10010492:	e00c      	b.n	100104ae <at_ble_notification_send+0x4a>
10010494:	270e      	movs	r7, #14
10010496:	446f      	add	r7, sp
10010498:	1c39      	adds	r1, r7, #0
1001049a:	aa04      	add	r2, sp, #16
1001049c:	4b0c      	ldr	r3, [pc, #48]	; (100104d0 <at_ble_notification_send+0x6c>)
1001049e:	1c20      	adds	r0, r4, #0
100104a0:	4798      	blx	r3
100104a2:	2012      	movs	r0, #18
100104a4:	1c21      	adds	r1, r4, #0
100104a6:	1c32      	adds	r2, r6, #0
100104a8:	883b      	ldrh	r3, [r7, #0]
100104aa:	9300      	str	r3, [sp, #0]
100104ac:	ab04      	add	r3, sp, #16
100104ae:	4c09      	ldr	r4, [pc, #36]	; (100104d4 <at_ble_notification_send+0x70>)
100104b0:	47a0      	blx	r4
100104b2:	682b      	ldr	r3, [r5, #0]
100104b4:	3301      	adds	r3, #1
100104b6:	602b      	str	r3, [r5, #0]
100104b8:	2300      	movs	r3, #0
100104ba:	1c18      	adds	r0, r3, #0
100104bc:	2385      	movs	r3, #133	; 0x85
100104be:	009b      	lsls	r3, r3, #2
100104c0:	449d      	add	sp, r3
100104c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
100104c4:	1001a3fc 	.word	0x1001a3fc
100104c8:	fffffdec 	.word	0xfffffdec
100104cc:	1000fbd1 	.word	0x1000fbd1
100104d0:	10012125 	.word	0x10012125
100104d4:	10011c29 	.word	0x10011c29

100104d8 <init_l2cc_task_module>:
100104d8:	220a      	movs	r2, #10
100104da:	4b01      	ldr	r3, [pc, #4]	; (100104e0 <init_l2cc_task_module+0x8>)
100104dc:	701a      	strb	r2, [r3, #0]
100104de:	4770      	bx	lr
100104e0:	100188c8 	.word	0x100188c8

100104e4 <l2cc_data_send_rsp_handler>:
100104e4:	b510      	push	{r4, lr}
100104e6:	7802      	ldrb	r2, [r0, #0]
100104e8:	700a      	strb	r2, [r1, #0]
100104ea:	7883      	ldrb	r3, [r0, #2]
100104ec:	7844      	ldrb	r4, [r0, #1]
100104ee:	021b      	lsls	r3, r3, #8
100104f0:	4323      	orrs	r3, r4
100104f2:	804b      	strh	r3, [r1, #2]
100104f4:	7903      	ldrb	r3, [r0, #4]
100104f6:	78c0      	ldrb	r0, [r0, #3]
100104f8:	021b      	lsls	r3, r3, #8
100104fa:	4303      	orrs	r3, r0
100104fc:	808b      	strh	r3, [r1, #4]
100104fe:	2a00      	cmp	r2, #0
10010500:	d103      	bne.n	1001050a <l2cc_data_send_rsp_handler+0x26>
10010502:	4a02      	ldr	r2, [pc, #8]	; (1001050c <l2cc_data_send_rsp_handler+0x28>)
10010504:	7813      	ldrb	r3, [r2, #0]
10010506:	3301      	adds	r3, #1
10010508:	7013      	strb	r3, [r2, #0]
1001050a:	bd10      	pop	{r4, pc}
1001050c:	100188c8 	.word	0x100188c8

10010510 <l2cc_data_received_handler>:
10010510:	b508      	push	{r3, lr}
10010512:	1c03      	adds	r3, r0, #0
10010514:	7842      	ldrb	r2, [r0, #1]
10010516:	7800      	ldrb	r0, [r0, #0]
10010518:	0212      	lsls	r2, r2, #8
1001051a:	4302      	orrs	r2, r0
1001051c:	800a      	strh	r2, [r1, #0]
1001051e:	78da      	ldrb	r2, [r3, #3]
10010520:	7898      	ldrb	r0, [r3, #2]
10010522:	0212      	lsls	r2, r2, #8
10010524:	4302      	orrs	r2, r0
10010526:	804a      	strh	r2, [r1, #2]
10010528:	795a      	ldrb	r2, [r3, #5]
1001052a:	7918      	ldrb	r0, [r3, #4]
1001052c:	0212      	lsls	r2, r2, #8
1001052e:	4302      	orrs	r2, r0
10010530:	808a      	strh	r2, [r1, #4]
10010532:	1d88      	adds	r0, r1, #6
10010534:	1d99      	adds	r1, r3, #6
10010536:	4b01      	ldr	r3, [pc, #4]	; (1001053c <l2cc_data_received_handler+0x2c>)
10010538:	4798      	blx	r3
1001053a:	bd08      	pop	{r3, pc}
1001053c:	100165c7 	.word	0x100165c7

10010540 <at_ble_authenticate>:
10010540:	b5f0      	push	{r4, r5, r6, r7, lr}
10010542:	1c0c      	adds	r4, r1, #0
10010544:	211f      	movs	r1, #31
10010546:	b08b      	sub	sp, #44	; 0x2c
10010548:	9307      	str	r3, [sp, #28]
1001054a:	ab02      	add	r3, sp, #8
1001054c:	18c9      	adds	r1, r1, r3
1001054e:	230f      	movs	r3, #15
10010550:	700b      	strb	r3, [r1, #0]
10010552:	4b40      	ldr	r3, [pc, #256]	; (10010654 <at_ble_authenticate+0x114>)
10010554:	1c05      	adds	r5, r0, #0
10010556:	1c16      	adds	r6, r2, #0
10010558:	4798      	blx	r3
1001055a:	1c07      	adds	r7, r0, #0
1001055c:	2001      	movs	r0, #1
1001055e:	2f07      	cmp	r7, #7
10010560:	d875      	bhi.n	1001064e <at_ble_authenticate+0x10e>
10010562:	2c00      	cmp	r4, #0
10010564:	d113      	bne.n	1001058e <at_ble_authenticate+0x4e>
10010566:	2312      	movs	r3, #18
10010568:	435f      	muls	r7, r3
1001056a:	4b3b      	ldr	r3, [pc, #236]	; (10010658 <at_ble_authenticate+0x118>)
1001056c:	5cfb      	ldrb	r3, [r7, r3]
1001056e:	4283      	cmp	r3, r0
10010570:	d001      	beq.n	10010576 <at_ble_authenticate+0x36>
10010572:	20cf      	movs	r0, #207	; 0xcf
10010574:	e06b      	b.n	1001064e <at_ble_authenticate+0x10e>
10010576:	9504      	str	r5, [sp, #16]
10010578:	9400      	str	r4, [sp, #0]
1001057a:	9401      	str	r4, [sp, #4]
1001057c:	9402      	str	r4, [sp, #8]
1001057e:	9403      	str	r4, [sp, #12]
10010580:	1c20      	adds	r0, r4, #0
10010582:	1c21      	adds	r1, r4, #0
10010584:	1c22      	adds	r2, r4, #0
10010586:	1c23      	adds	r3, r4, #0
10010588:	4d34      	ldr	r5, [pc, #208]	; (1001065c <at_ble_authenticate+0x11c>)
1001058a:	47a8      	blx	r5
1001058c:	e05e      	b.n	1001064c <at_ble_authenticate+0x10c>
1001058e:	7922      	ldrb	r2, [r4, #4]
10010590:	2a06      	cmp	r2, #6
10010592:	d9ee      	bls.n	10010572 <at_ble_authenticate+0x32>
10010594:	7963      	ldrb	r3, [r4, #5]
10010596:	2b10      	cmp	r3, #16
10010598:	d8eb      	bhi.n	10010572 <at_ble_authenticate+0x32>
1001059a:	429a      	cmp	r2, r3
1001059c:	d8e9      	bhi.n	10010572 <at_ble_authenticate+0x32>
1001059e:	7a23      	ldrb	r3, [r4, #8]
100105a0:	2b04      	cmp	r3, #4
100105a2:	d8e6      	bhi.n	10010572 <at_ble_authenticate+0x32>
100105a4:	79a3      	ldrb	r3, [r4, #6]
100105a6:	2b07      	cmp	r3, #7
100105a8:	d8e3      	bhi.n	10010572 <at_ble_authenticate+0x32>
100105aa:	79e3      	ldrb	r3, [r4, #7]
100105ac:	2b07      	cmp	r3, #7
100105ae:	d8e0      	bhi.n	10010572 <at_ble_authenticate+0x32>
100105b0:	78a3      	ldrb	r3, [r4, #2]
100105b2:	2b00      	cmp	r3, #0
100105b4:	d006      	beq.n	100105c4 <at_ble_authenticate+0x84>
100105b6:	2e00      	cmp	r6, #0
100105b8:	d0db      	beq.n	10010572 <at_ble_authenticate+0x32>
100105ba:	4829      	ldr	r0, [pc, #164]	; (10010660 <at_ble_authenticate+0x120>)
100105bc:	1c31      	adds	r1, r6, #0
100105be:	221c      	movs	r2, #28
100105c0:	4b28      	ldr	r3, [pc, #160]	; (10010664 <at_ble_authenticate+0x124>)
100105c2:	4798      	blx	r3
100105c4:	9b07      	ldr	r3, [sp, #28]
100105c6:	2b00      	cmp	r3, #0
100105c8:	d005      	beq.n	100105d6 <at_ble_authenticate+0x96>
100105ca:	4827      	ldr	r0, [pc, #156]	; (10010668 <at_ble_authenticate+0x128>)
100105cc:	1c19      	adds	r1, r3, #0
100105ce:	309a      	adds	r0, #154	; 0x9a
100105d0:	2210      	movs	r2, #16
100105d2:	4b24      	ldr	r3, [pc, #144]	; (10010664 <at_ble_authenticate+0x124>)
100105d4:	4798      	blx	r3
100105d6:	7863      	ldrb	r3, [r4, #1]
100105d8:	78a2      	ldrb	r2, [r4, #2]
100105da:	009b      	lsls	r3, r3, #2
100105dc:	4313      	orrs	r3, r2
100105de:	2212      	movs	r2, #18
100105e0:	4357      	muls	r7, r2
100105e2:	4a1d      	ldr	r2, [pc, #116]	; (10010658 <at_ble_authenticate+0x118>)
100105e4:	b2db      	uxtb	r3, r3
100105e6:	5cba      	ldrb	r2, [r7, r2]
100105e8:	2a00      	cmp	r2, #0
100105ea:	d116      	bne.n	1001061a <at_ble_authenticate+0xda>
100105ec:	79a0      	ldrb	r0, [r4, #6]
100105ee:	0742      	lsls	r2, r0, #29
100105f0:	d502      	bpl.n	100105f8 <at_ble_authenticate+0xb8>
100105f2:	9a07      	ldr	r2, [sp, #28]
100105f4:	2a00      	cmp	r2, #0
100105f6:	d0bc      	beq.n	10010572 <at_ble_authenticate+0x32>
100105f8:	07c2      	lsls	r2, r0, #31
100105fa:	d501      	bpl.n	10010600 <at_ble_authenticate+0xc0>
100105fc:	2e00      	cmp	r6, #0
100105fe:	d0b8      	beq.n	10010572 <at_ble_authenticate+0x32>
10010600:	7966      	ldrb	r6, [r4, #5]
10010602:	7821      	ldrb	r1, [r4, #0]
10010604:	78e2      	ldrb	r2, [r4, #3]
10010606:	9600      	str	r6, [sp, #0]
10010608:	9001      	str	r0, [sp, #4]
1001060a:	79e0      	ldrb	r0, [r4, #7]
1001060c:	9002      	str	r0, [sp, #8]
1001060e:	7a20      	ldrb	r0, [r4, #8]
10010610:	4c16      	ldr	r4, [pc, #88]	; (1001066c <at_ble_authenticate+0x12c>)
10010612:	9003      	str	r0, [sp, #12]
10010614:	1c28      	adds	r0, r5, #0
10010616:	47a0      	blx	r4
10010618:	e018      	b.n	1001064c <at_ble_authenticate+0x10c>
1001061a:	2a01      	cmp	r2, #1
1001061c:	d1a9      	bne.n	10010572 <at_ble_authenticate+0x32>
1001061e:	79e0      	ldrb	r0, [r4, #7]
10010620:	0742      	lsls	r2, r0, #29
10010622:	d502      	bpl.n	1001062a <at_ble_authenticate+0xea>
10010624:	9a07      	ldr	r2, [sp, #28]
10010626:	2a00      	cmp	r2, #0
10010628:	d0a3      	beq.n	10010572 <at_ble_authenticate+0x32>
1001062a:	07c2      	lsls	r2, r0, #31
1001062c:	d501      	bpl.n	10010632 <at_ble_authenticate+0xf2>
1001062e:	2e00      	cmp	r6, #0
10010630:	d09f      	beq.n	10010572 <at_ble_authenticate+0x32>
10010632:	7966      	ldrb	r6, [r4, #5]
10010634:	7821      	ldrb	r1, [r4, #0]
10010636:	78e2      	ldrb	r2, [r4, #3]
10010638:	9600      	str	r6, [sp, #0]
1001063a:	79a6      	ldrb	r6, [r4, #6]
1001063c:	9002      	str	r0, [sp, #8]
1001063e:	9601      	str	r6, [sp, #4]
10010640:	7a20      	ldrb	r0, [r4, #8]
10010642:	9504      	str	r5, [sp, #16]
10010644:	9003      	str	r0, [sp, #12]
10010646:	4c05      	ldr	r4, [pc, #20]	; (1001065c <at_ble_authenticate+0x11c>)
10010648:	2001      	movs	r0, #1
1001064a:	47a0      	blx	r4
1001064c:	2000      	movs	r0, #0
1001064e:	b00b      	add	sp, #44	; 0x2c
10010650:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010652:	46c0      	nop			; (mov r8, r8)
10010654:	10010a41 	.word	0x10010a41
10010658:	1001b2be 	.word	0x1001b2be
1001065c:	10010fb1 	.word	0x10010fb1
10010660:	1001b3cc 	.word	0x1001b3cc
10010664:	100165c7 	.word	0x100165c7
10010668:	1001b34e 	.word	0x1001b34e
1001066c:	10010d91 	.word	0x10010d91

10010670 <at_ble_pair_key_reply>:
10010670:	b5f0      	push	{r4, r5, r6, r7, lr}
10010672:	b085      	sub	sp, #20
10010674:	1c05      	adds	r5, r0, #0
10010676:	1c0c      	adds	r4, r1, #0
10010678:	1c16      	adds	r6, r2, #0
1001067a:	2100      	movs	r1, #0
1001067c:	4668      	mov	r0, sp
1001067e:	2210      	movs	r2, #16
10010680:	4b18      	ldr	r3, [pc, #96]	; (100106e4 <at_ble_pair_key_reply+0x74>)
10010682:	4798      	blx	r3
10010684:	2101      	movs	r1, #1
10010686:	2e00      	cmp	r6, #0
10010688:	d101      	bne.n	1001068e <at_ble_pair_key_reply+0x1e>
1001068a:	1c31      	adds	r1, r6, #0
1001068c:	466e      	mov	r6, sp
1001068e:	2c00      	cmp	r4, #0
10010690:	d116      	bne.n	100106c0 <at_ble_pair_key_reply+0x50>
10010692:	2701      	movs	r7, #1
10010694:	1c23      	adds	r3, r4, #0
10010696:	1d70      	adds	r0, r6, #5
10010698:	3e01      	subs	r6, #1
1001069a:	7802      	ldrb	r2, [r0, #0]
1001069c:	3801      	subs	r0, #1
1001069e:	3a30      	subs	r2, #48	; 0x30
100106a0:	437a      	muls	r2, r7
100106a2:	189b      	adds	r3, r3, r2
100106a4:	220a      	movs	r2, #10
100106a6:	4357      	muls	r7, r2
100106a8:	42b0      	cmp	r0, r6
100106aa:	d1f6      	bne.n	1001069a <at_ble_pair_key_reply+0x2a>
100106ac:	466a      	mov	r2, sp
100106ae:	4668      	mov	r0, sp
100106b0:	7013      	strb	r3, [r2, #0]
100106b2:	0a1a      	lsrs	r2, r3, #8
100106b4:	7042      	strb	r2, [r0, #1]
100106b6:	0c1a      	lsrs	r2, r3, #16
100106b8:	0e1b      	lsrs	r3, r3, #24
100106ba:	7082      	strb	r2, [r0, #2]
100106bc:	70c3      	strb	r3, [r0, #3]
100106be:	e009      	b.n	100106d4 <at_ble_pair_key_reply+0x64>
100106c0:	20cf      	movs	r0, #207	; 0xcf
100106c2:	2c01      	cmp	r4, #1
100106c4:	d10c      	bne.n	100106e0 <at_ble_pair_key_reply+0x70>
100106c6:	2300      	movs	r3, #0
100106c8:	4668      	mov	r0, sp
100106ca:	5cf2      	ldrb	r2, [r6, r3]
100106cc:	54c2      	strb	r2, [r0, r3]
100106ce:	3301      	adds	r3, #1
100106d0:	2b10      	cmp	r3, #16
100106d2:	d1f9      	bne.n	100106c8 <at_ble_pair_key_reply+0x58>
100106d4:	2004      	movs	r0, #4
100106d6:	466a      	mov	r2, sp
100106d8:	1c2b      	adds	r3, r5, #0
100106da:	4c03      	ldr	r4, [pc, #12]	; (100106e8 <at_ble_pair_key_reply+0x78>)
100106dc:	47a0      	blx	r4
100106de:	2000      	movs	r0, #0
100106e0:	b005      	add	sp, #20
100106e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
100106e4:	100165d9 	.word	0x100165d9
100106e8:	1001102d 	.word	0x1001102d

100106ec <at_ble_send_slave_sec_request>:
100106ec:	b570      	push	{r4, r5, r6, lr}
100106ee:	4b0c      	ldr	r3, [pc, #48]	; (10010720 <at_ble_send_slave_sec_request+0x34>)
100106f0:	1c0e      	adds	r6, r1, #0
100106f2:	2100      	movs	r1, #0
100106f4:	1c05      	adds	r5, r0, #0
100106f6:	1c14      	adds	r4, r2, #0
100106f8:	4798      	blx	r3
100106fa:	2301      	movs	r3, #1
100106fc:	2807      	cmp	r0, #7
100106fe:	d80d      	bhi.n	1001071c <at_ble_send_slave_sec_request+0x30>
10010700:	3311      	adds	r3, #17
10010702:	4358      	muls	r0, r3
10010704:	4b07      	ldr	r3, [pc, #28]	; (10010724 <at_ble_send_slave_sec_request+0x38>)
10010706:	5cc2      	ldrb	r2, [r0, r3]
10010708:	23e0      	movs	r3, #224	; 0xe0
1001070a:	2a01      	cmp	r2, #1
1001070c:	d106      	bne.n	1001071c <at_ble_send_slave_sec_request+0x30>
1001070e:	00b1      	lsls	r1, r6, #2
10010710:	430c      	orrs	r4, r1
10010712:	4b05      	ldr	r3, [pc, #20]	; (10010728 <at_ble_send_slave_sec_request+0x3c>)
10010714:	b2e1      	uxtb	r1, r4
10010716:	1c28      	adds	r0, r5, #0
10010718:	4798      	blx	r3
1001071a:	2300      	movs	r3, #0
1001071c:	1c18      	adds	r0, r3, #0
1001071e:	bd70      	pop	{r4, r5, r6, pc}
10010720:	10010a41 	.word	0x10010a41
10010724:	1001b2be 	.word	0x1001b2be
10010728:	1001107d 	.word	0x1001107d

1001072c <at_ble_encryption_start>:
1001072c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001072e:	23cf      	movs	r3, #207	; 0xcf
10010730:	2900      	cmp	r1, #0
10010732:	d02b      	beq.n	1001078c <at_ble_encryption_start+0x60>
10010734:	2a05      	cmp	r2, #5
10010736:	d829      	bhi.n	1001078c <at_ble_encryption_start+0x60>
10010738:	2701      	movs	r7, #1
1001073a:	1c3d      	adds	r5, r7, #0
1001073c:	2433      	movs	r4, #51	; 0x33
1001073e:	4095      	lsls	r5, r2
10010740:	4225      	tst	r5, r4
10010742:	d023      	beq.n	1001078c <at_ble_encryption_start+0x60>
10010744:	7e8c      	ldrb	r4, [r1, #26]
10010746:	3c07      	subs	r4, #7
10010748:	2c09      	cmp	r4, #9
1001074a:	d81f      	bhi.n	1001078c <at_ble_encryption_start+0x60>
1001074c:	4b10      	ldr	r3, [pc, #64]	; (10010790 <at_ble_encryption_start+0x64>)
1001074e:	1c0c      	adds	r4, r1, #0
10010750:	2100      	movs	r1, #0
10010752:	1c15      	adds	r5, r2, #0
10010754:	1c06      	adds	r6, r0, #0
10010756:	4798      	blx	r3
10010758:	1c3b      	adds	r3, r7, #0
1001075a:	2807      	cmp	r0, #7
1001075c:	d816      	bhi.n	1001078c <at_ble_encryption_start+0x60>
1001075e:	2312      	movs	r3, #18
10010760:	4358      	muls	r0, r3
10010762:	4b0c      	ldr	r3, [pc, #48]	; (10010794 <at_ble_encryption_start+0x68>)
10010764:	5cc7      	ldrb	r7, [r0, r3]
10010766:	23e0      	movs	r3, #224	; 0xe0
10010768:	2f00      	cmp	r7, #0
1001076a:	d10f      	bne.n	1001078c <at_ble_encryption_start+0x60>
1001076c:	1c21      	adds	r1, r4, #0
1001076e:	221c      	movs	r2, #28
10010770:	4b09      	ldr	r3, [pc, #36]	; (10010798 <at_ble_encryption_start+0x6c>)
10010772:	480a      	ldr	r0, [pc, #40]	; (1001079c <at_ble_encryption_start+0x70>)
10010774:	4798      	blx	r3
10010776:	1c23      	adds	r3, r4, #0
10010778:	7ea1      	ldrb	r1, [r4, #26]
1001077a:	8a22      	ldrh	r2, [r4, #16]
1001077c:	3312      	adds	r3, #18
1001077e:	9100      	str	r1, [sp, #0]
10010780:	9501      	str	r5, [sp, #4]
10010782:	1c21      	adds	r1, r4, #0
10010784:	1c30      	adds	r0, r6, #0
10010786:	4c06      	ldr	r4, [pc, #24]	; (100107a0 <at_ble_encryption_start+0x74>)
10010788:	47a0      	blx	r4
1001078a:	1c3b      	adds	r3, r7, #0
1001078c:	1c18      	adds	r0, r3, #0
1001078e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10010790:	10010a41 	.word	0x10010a41
10010794:	1001b2be 	.word	0x1001b2be
10010798:	100165c7 	.word	0x100165c7
1001079c:	1001b3cc 	.word	0x1001b3cc
100107a0:	100110bd 	.word	0x100110bd

100107a4 <at_ble_encryption_request_reply>:
100107a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
100107a6:	24cf      	movs	r4, #207	; 0xcf
100107a8:	2b00      	cmp	r3, #0
100107aa:	d011      	beq.n	100107d0 <at_ble_encryption_request_reply+0x2c>
100107ac:	2a00      	cmp	r2, #0
100107ae:	d00a      	beq.n	100107c6 <at_ble_encryption_request_reply+0x22>
100107b0:	2905      	cmp	r1, #5
100107b2:	d80d      	bhi.n	100107d0 <at_ble_encryption_request_reply+0x2c>
100107b4:	2501      	movs	r5, #1
100107b6:	2633      	movs	r6, #51	; 0x33
100107b8:	408d      	lsls	r5, r1
100107ba:	4235      	tst	r5, r6
100107bc:	d008      	beq.n	100107d0 <at_ble_encryption_request_reply+0x2c>
100107be:	7e9d      	ldrb	r5, [r3, #26]
100107c0:	3d07      	subs	r5, #7
100107c2:	2d09      	cmp	r5, #9
100107c4:	d804      	bhi.n	100107d0 <at_ble_encryption_request_reply+0x2c>
100107c6:	7e9c      	ldrb	r4, [r3, #26]
100107c8:	9400      	str	r4, [sp, #0]
100107ca:	4c02      	ldr	r4, [pc, #8]	; (100107d4 <at_ble_encryption_request_reply+0x30>)
100107cc:	47a0      	blx	r4
100107ce:	2400      	movs	r4, #0
100107d0:	1c20      	adds	r0, r4, #0
100107d2:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
100107d4:	10011179 	.word	0x10011179

100107d8 <rx_callback>:
100107d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100107da:	8883      	ldrh	r3, [r0, #4]
100107dc:	1c01      	adds	r1, r0, #0
100107de:	9301      	str	r3, [sp, #4]
100107e0:	88c5      	ldrh	r5, [r0, #6]
100107e2:	8806      	ldrh	r6, [r0, #0]
100107e4:	2d00      	cmp	r5, #0
100107e6:	d10f      	bne.n	10010808 <rx_callback+0x30>
100107e8:	1c19      	adds	r1, r3, #0
100107ea:	1c30      	adds	r0, r6, #0
100107ec:	4b19      	ldr	r3, [pc, #100]	; (10010854 <rx_callback+0x7c>)
100107ee:	1c2a      	adds	r2, r5, #0
100107f0:	4798      	blx	r3
100107f2:	1e03      	subs	r3, r0, #0
100107f4:	d105      	bne.n	10010802 <rx_callback+0x2a>
100107f6:	1c30      	adds	r0, r6, #0
100107f8:	9901      	ldr	r1, [sp, #4]
100107fa:	1c1a      	adds	r2, r3, #0
100107fc:	4c16      	ldr	r4, [pc, #88]	; (10010858 <rx_callback+0x80>)
100107fe:	47a0      	blx	r4
10010800:	e027      	b.n	10010852 <rx_callback+0x7a>
10010802:	4b16      	ldr	r3, [pc, #88]	; (1001085c <rx_callback+0x84>)
10010804:	4798      	blx	r3
10010806:	e024      	b.n	10010852 <rx_callback+0x7a>
10010808:	4c15      	ldr	r4, [pc, #84]	; (10010860 <rx_callback+0x88>)
1001080a:	4a16      	ldr	r2, [pc, #88]	; (10010864 <rx_callback+0x8c>)
1001080c:	6823      	ldr	r3, [r4, #0]
1001080e:	6812      	ldr	r2, [r2, #0]
10010810:	18eb      	adds	r3, r5, r3
10010812:	4293      	cmp	r3, r2
10010814:	d901      	bls.n	1001081a <rx_callback+0x42>
10010816:	2300      	movs	r3, #0
10010818:	6023      	str	r3, [r4, #0]
1001081a:	4f13      	ldr	r7, [pc, #76]	; (10010868 <rx_callback+0x90>)
1001081c:	6822      	ldr	r2, [r4, #0]
1001081e:	683b      	ldr	r3, [r7, #0]
10010820:	3108      	adds	r1, #8
10010822:	1898      	adds	r0, r3, r2
10010824:	1c2a      	adds	r2, r5, #0
10010826:	4b11      	ldr	r3, [pc, #68]	; (1001086c <rx_callback+0x94>)
10010828:	4798      	blx	r3
1001082a:	683b      	ldr	r3, [r7, #0]
1001082c:	6822      	ldr	r2, [r4, #0]
1001082e:	1c30      	adds	r0, r6, #0
10010830:	189a      	adds	r2, r3, r2
10010832:	9901      	ldr	r1, [sp, #4]
10010834:	4b07      	ldr	r3, [pc, #28]	; (10010854 <rx_callback+0x7c>)
10010836:	4798      	blx	r3
10010838:	2800      	cmp	r0, #0
1001083a:	d1e2      	bne.n	10010802 <rx_callback+0x2a>
1001083c:	6823      	ldr	r3, [r4, #0]
1001083e:	683a      	ldr	r2, [r7, #0]
10010840:	1c30      	adds	r0, r6, #0
10010842:	18d2      	adds	r2, r2, r3
10010844:	9901      	ldr	r1, [sp, #4]
10010846:	1c2b      	adds	r3, r5, #0
10010848:	4e03      	ldr	r6, [pc, #12]	; (10010858 <rx_callback+0x80>)
1001084a:	47b0      	blx	r6
1001084c:	6823      	ldr	r3, [r4, #0]
1001084e:	18ed      	adds	r5, r5, r3
10010850:	6025      	str	r5, [r4, #0]
10010852:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10010854:	1000ee6d 	.word	0x1000ee6d
10010858:	1000ede5 	.word	0x1000ede5
1001085c:	1000e869 	.word	0x1000e869
10010860:	1001b428 	.word	0x1001b428
10010864:	1001a378 	.word	0x1001a378
10010868:	1001a374 	.word	0x1001a374
1001086c:	100165c7 	.word	0x100165c7

10010870 <interface_send>:
10010870:	b508      	push	{r3, lr}
10010872:	4b02      	ldr	r3, [pc, #8]	; (1001087c <interface_send+0xc>)
10010874:	4798      	blx	r3
10010876:	2000      	movs	r0, #0
10010878:	bd08      	pop	{r3, pc}
1001087a:	46c0      	nop			; (mov r8, r8)
1001087c:	1000e561 	.word	0x1000e561

10010880 <interface_init>:
10010880:	2280      	movs	r2, #128	; 0x80
10010882:	b510      	push	{r4, lr}
10010884:	2100      	movs	r1, #0
10010886:	1c04      	adds	r4, r0, #0
10010888:	0092      	lsls	r2, r2, #2
1001088a:	4b08      	ldr	r3, [pc, #32]	; (100108ac <interface_init+0x2c>)
1001088c:	4808      	ldr	r0, [pc, #32]	; (100108b0 <interface_init+0x30>)
1001088e:	4798      	blx	r3
10010890:	2200      	movs	r2, #0
10010892:	4b08      	ldr	r3, [pc, #32]	; (100108b4 <interface_init+0x34>)
10010894:	601a      	str	r2, [r3, #0]
10010896:	4a08      	ldr	r2, [pc, #32]	; (100108b8 <interface_init+0x38>)
10010898:	4b08      	ldr	r3, [pc, #32]	; (100108bc <interface_init+0x3c>)
1001089a:	601a      	str	r2, [r3, #0]
1001089c:	4b08      	ldr	r3, [pc, #32]	; (100108c0 <interface_init+0x40>)
1001089e:	6922      	ldr	r2, [r4, #16]
100108a0:	601a      	str	r2, [r3, #0]
100108a2:	6962      	ldr	r2, [r4, #20]
100108a4:	4b07      	ldr	r3, [pc, #28]	; (100108c4 <interface_init+0x44>)
100108a6:	601a      	str	r2, [r3, #0]
100108a8:	bd10      	pop	{r4, pc}
100108aa:	46c0      	nop			; (mov r8, r8)
100108ac:	100165d9 	.word	0x100165d9
100108b0:	1001b62c 	.word	0x1001b62c
100108b4:	1001b428 	.word	0x1001b428
100108b8:	1001b42c 	.word	0x1001b42c
100108bc:	100188cc 	.word	0x100188cc
100108c0:	1001a374 	.word	0x1001a374
100108c4:	1001a378 	.word	0x1001a378

100108c8 <platform_cmd_cmpl_signal>:
100108c8:	2201      	movs	r2, #1
100108ca:	4b01      	ldr	r3, [pc, #4]	; (100108d0 <platform_cmd_cmpl_signal+0x8>)
100108cc:	601a      	str	r2, [r3, #0]
100108ce:	4770      	bx	lr
100108d0:	1001a37c 	.word	0x1001a37c

100108d4 <platform_cmd_cmpl_wait>:
100108d4:	b510      	push	{r4, lr}
100108d6:	1c04      	adds	r4, r0, #0
100108d8:	4b07      	ldr	r3, [pc, #28]	; (100108f8 <platform_cmd_cmpl_wait+0x24>)
100108da:	681a      	ldr	r2, [r3, #0]
100108dc:	2a01      	cmp	r2, #1
100108de:	d003      	beq.n	100108e8 <platform_cmd_cmpl_wait+0x14>
100108e0:	4b06      	ldr	r3, [pc, #24]	; (100108fc <platform_cmd_cmpl_wait+0x28>)
100108e2:	2000      	movs	r0, #0
100108e4:	4798      	blx	r3
100108e6:	e7f7      	b.n	100108d8 <platform_cmd_cmpl_wait+0x4>
100108e8:	6819      	ldr	r1, [r3, #0]
100108ea:	2901      	cmp	r1, #1
100108ec:	d102      	bne.n	100108f4 <platform_cmd_cmpl_wait+0x20>
100108ee:	2200      	movs	r2, #0
100108f0:	601a      	str	r2, [r3, #0]
100108f2:	e000      	b.n	100108f6 <platform_cmd_cmpl_wait+0x22>
100108f4:	7022      	strb	r2, [r4, #0]
100108f6:	bd10      	pop	{r4, pc}
100108f8:	1001a37c 	.word	0x1001a37c
100108fc:	1000e5f1 	.word	0x1000e5f1

10010900 <start_timer>:
10010900:	4770      	bx	lr

10010902 <stop_timer>:
10010902:	4770      	bx	lr

10010904 <dbg_le_set_bd_addr_req_handler>:
10010904:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010906:	466b      	mov	r3, sp
10010908:	1dde      	adds	r6, r3, #7
1001090a:	2300      	movs	r3, #0
1001090c:	7033      	strb	r3, [r6, #0]
1001090e:	230f      	movs	r3, #15
10010910:	4c13      	ldr	r4, [pc, #76]	; (10010960 <dbg_le_set_bd_addr_req_handler+0x5c>)
10010912:	2703      	movs	r7, #3
10010914:	7023      	strb	r3, [r4, #0]
10010916:	2300      	movs	r3, #0
10010918:	70e3      	strb	r3, [r4, #3]
1001091a:	4b12      	ldr	r3, [pc, #72]	; (10010964 <dbg_le_set_bd_addr_req_handler+0x60>)
1001091c:	1c01      	adds	r1, r0, #0
1001091e:	881a      	ldrh	r2, [r3, #0]
10010920:	881b      	ldrh	r3, [r3, #0]
10010922:	7122      	strb	r2, [r4, #4]
10010924:	0a1b      	lsrs	r3, r3, #8
10010926:	2206      	movs	r2, #6
10010928:	7163      	strb	r3, [r4, #5]
1001092a:	480f      	ldr	r0, [pc, #60]	; (10010968 <dbg_le_set_bd_addr_req_handler+0x64>)
1001092c:	4b0f      	ldr	r3, [pc, #60]	; (1001096c <dbg_le_set_bd_addr_req_handler+0x68>)
1001092e:	7067      	strb	r7, [r4, #1]
10010930:	70a7      	strb	r7, [r4, #2]
10010932:	4798      	blx	r3
10010934:	4d0e      	ldr	r5, [pc, #56]	; (10010970 <dbg_le_set_bd_addr_req_handler+0x6c>)
10010936:	4b0f      	ldr	r3, [pc, #60]	; (10010974 <dbg_le_set_bd_addr_req_handler+0x70>)
10010938:	210e      	movs	r1, #14
1001093a:	802b      	strh	r3, [r5, #0]
1001093c:	2306      	movs	r3, #6
1001093e:	71a3      	strb	r3, [r4, #6]
10010940:	2300      	movs	r3, #0
10010942:	1c20      	adds	r0, r4, #0
10010944:	71e3      	strb	r3, [r4, #7]
10010946:	4b0c      	ldr	r3, [pc, #48]	; (10010978 <dbg_le_set_bd_addr_req_handler+0x74>)
10010948:	80af      	strh	r7, [r5, #4]
1001094a:	4798      	blx	r3
1001094c:	1c30      	adds	r0, r6, #0
1001094e:	4b0b      	ldr	r3, [pc, #44]	; (1001097c <dbg_le_set_bd_addr_req_handler+0x78>)
10010950:	4798      	blx	r3
10010952:	7833      	ldrb	r3, [r6, #0]
10010954:	20e2      	movs	r0, #226	; 0xe2
10010956:	2b00      	cmp	r3, #0
10010958:	d101      	bne.n	1001095e <dbg_le_set_bd_addr_req_handler+0x5a>
1001095a:	68ab      	ldr	r3, [r5, #8]
1001095c:	7818      	ldrb	r0, [r3, #0]
1001095e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10010960:	1001b62c 	.word	0x1001b62c
10010964:	1001b2bc 	.word	0x1001b2bc
10010968:	1001b634 	.word	0x1001b634
1001096c:	100165c7 	.word	0x100165c7
10010970:	1001b2b0 	.word	0x1001b2b0
10010974:	00000329 	.word	0x00000329
10010978:	10010871 	.word	0x10010871
1001097c:	100108d5 	.word	0x100108d5

10010980 <gapc_get_dev_info_cfm.constprop.1>:
10010980:	b538      	push	{r3, r4, r5, lr}
10010982:	230b      	movs	r3, #11
10010984:	4c27      	ldr	r4, [pc, #156]	; (10010a24 <gapc_get_dev_info_cfm.constprop.1+0xa4>)
10010986:	7023      	strb	r3, [r4, #0]
10010988:	3303      	adds	r3, #3
1001098a:	7063      	strb	r3, [r4, #1]
1001098c:	3329      	adds	r3, #41	; 0x29
1001098e:	70a3      	strb	r3, [r4, #2]
10010990:	4b25      	ldr	r3, [pc, #148]	; (10010a28 <gapc_get_dev_info_cfm.constprop.1+0xa8>)
10010992:	70e1      	strb	r1, [r4, #3]
10010994:	881a      	ldrh	r2, [r3, #0]
10010996:	881b      	ldrh	r3, [r3, #0]
10010998:	7122      	strb	r2, [r4, #4]
1001099a:	0a1b      	lsrs	r3, r3, #8
1001099c:	7163      	strb	r3, [r4, #5]
1001099e:	2300      	movs	r3, #0
100109a0:	7220      	strb	r0, [r4, #8]
100109a2:	7263      	strb	r3, [r4, #9]
100109a4:	2801      	cmp	r0, #1
100109a6:	d02b      	beq.n	10010a00 <gapc_get_dev_info_cfm.constprop.1+0x80>
100109a8:	4298      	cmp	r0, r3
100109aa:	d01b      	beq.n	100109e4 <gapc_get_dev_info_cfm.constprop.1+0x64>
100109ac:	2802      	cmp	r0, #2
100109ae:	d12f      	bne.n	10010a10 <gapc_get_dev_info_cfm.constprop.1+0x90>
100109b0:	4b1e      	ldr	r3, [pc, #120]	; (10010a2c <gapc_get_dev_info_cfm.constprop.1+0xac>)
100109b2:	2112      	movs	r1, #18
100109b4:	1c1a      	adds	r2, r3, #0
100109b6:	32ce      	adds	r2, #206	; 0xce
100109b8:	8812      	ldrh	r2, [r2, #0]
100109ba:	72a2      	strb	r2, [r4, #10]
100109bc:	0a12      	lsrs	r2, r2, #8
100109be:	72e2      	strb	r2, [r4, #11]
100109c0:	1c1a      	adds	r2, r3, #0
100109c2:	32d0      	adds	r2, #208	; 0xd0
100109c4:	8812      	ldrh	r2, [r2, #0]
100109c6:	7322      	strb	r2, [r4, #12]
100109c8:	0a12      	lsrs	r2, r2, #8
100109ca:	7362      	strb	r2, [r4, #13]
100109cc:	1c1a      	adds	r2, r3, #0
100109ce:	32d2      	adds	r2, #210	; 0xd2
100109d0:	8812      	ldrh	r2, [r2, #0]
100109d2:	33d4      	adds	r3, #212	; 0xd4
100109d4:	73a2      	strb	r2, [r4, #14]
100109d6:	0a12      	lsrs	r2, r2, #8
100109d8:	73e2      	strb	r2, [r4, #15]
100109da:	881b      	ldrh	r3, [r3, #0]
100109dc:	7423      	strb	r3, [r4, #16]
100109de:	0a1b      	lsrs	r3, r3, #8
100109e0:	7463      	strb	r3, [r4, #17]
100109e2:	e016      	b.n	10010a12 <gapc_get_dev_info_cfm.constprop.1+0x92>
100109e4:	4b11      	ldr	r3, [pc, #68]	; (10010a2c <gapc_get_dev_info_cfm.constprop.1+0xac>)
100109e6:	4912      	ldr	r1, [pc, #72]	; (10010a30 <gapc_get_dev_info_cfm.constprop.1+0xb0>)
100109e8:	33aa      	adds	r3, #170	; 0xaa
100109ea:	881d      	ldrh	r5, [r3, #0]
100109ec:	4811      	ldr	r0, [pc, #68]	; (10010a34 <gapc_get_dev_info_cfm.constprop.1+0xb4>)
100109ee:	0a2b      	lsrs	r3, r5, #8
100109f0:	72a5      	strb	r5, [r4, #10]
100109f2:	72e3      	strb	r3, [r4, #11]
100109f4:	1c2a      	adds	r2, r5, #0
100109f6:	4b10      	ldr	r3, [pc, #64]	; (10010a38 <gapc_get_dev_info_cfm.constprop.1+0xb8>)
100109f8:	350c      	adds	r5, #12
100109fa:	4798      	blx	r3
100109fc:	b2a9      	uxth	r1, r5
100109fe:	e008      	b.n	10010a12 <gapc_get_dev_info_cfm.constprop.1+0x92>
10010a00:	4b0a      	ldr	r3, [pc, #40]	; (10010a2c <gapc_get_dev_info_cfm.constprop.1+0xac>)
10010a02:	210c      	movs	r1, #12
10010a04:	33cc      	adds	r3, #204	; 0xcc
10010a06:	881b      	ldrh	r3, [r3, #0]
10010a08:	72a3      	strb	r3, [r4, #10]
10010a0a:	0a1b      	lsrs	r3, r3, #8
10010a0c:	72e3      	strb	r3, [r4, #11]
10010a0e:	e000      	b.n	10010a12 <gapc_get_dev_info_cfm.constprop.1+0x92>
10010a10:	210a      	movs	r1, #10
10010a12:	1c0b      	adds	r3, r1, #0
10010a14:	3b08      	subs	r3, #8
10010a16:	71a3      	strb	r3, [r4, #6]
10010a18:	121b      	asrs	r3, r3, #8
10010a1a:	71e3      	strb	r3, [r4, #7]
10010a1c:	1c20      	adds	r0, r4, #0
10010a1e:	4b07      	ldr	r3, [pc, #28]	; (10010a3c <gapc_get_dev_info_cfm.constprop.1+0xbc>)
10010a20:	4798      	blx	r3
10010a22:	bd38      	pop	{r3, r4, r5, pc}
10010a24:	1001b62c 	.word	0x1001b62c
10010a28:	1001b2bc 	.word	0x1001b2bc
10010a2c:	1001b34e 	.word	0x1001b34e
10010a30:	1001b3fa 	.word	0x1001b3fa
10010a34:	1001b638 	.word	0x1001b638
10010a38:	100165c7 	.word	0x100165c7
10010a3c:	10010871 	.word	0x10010871

10010a40 <check_ConnData_idx_role>:
10010a40:	4b0c      	ldr	r3, [pc, #48]	; (10010a74 <check_ConnData_idx_role+0x34>)
10010a42:	b570      	push	{r4, r5, r6, lr}
10010a44:	1c04      	adds	r4, r0, #0
10010a46:	2008      	movs	r0, #8
10010a48:	429c      	cmp	r4, r3
10010a4a:	d011      	beq.n	10010a70 <check_ConnData_idx_role+0x30>
10010a4c:	2300      	movs	r3, #0
10010a4e:	2212      	movs	r2, #18
10010a50:	435a      	muls	r2, r3
10010a52:	4d09      	ldr	r5, [pc, #36]	; (10010a78 <check_ConnData_idx_role+0x38>)
10010a54:	b2d8      	uxtb	r0, r3
10010a56:	1956      	adds	r6, r2, r5
10010a58:	8976      	ldrh	r6, [r6, #10]
10010a5a:	42a6      	cmp	r6, r4
10010a5c:	d104      	bne.n	10010a68 <check_ConnData_idx_role+0x28>
10010a5e:	2900      	cmp	r1, #0
10010a60:	d006      	beq.n	10010a70 <check_ConnData_idx_role+0x30>
10010a62:	5d53      	ldrb	r3, [r2, r5]
10010a64:	700b      	strb	r3, [r1, #0]
10010a66:	e003      	b.n	10010a70 <check_ConnData_idx_role+0x30>
10010a68:	3301      	adds	r3, #1
10010a6a:	2b08      	cmp	r3, #8
10010a6c:	d1ef      	bne.n	10010a4e <check_ConnData_idx_role+0xe>
10010a6e:	1c18      	adds	r0, r3, #0
10010a70:	bd70      	pop	{r4, r5, r6, pc}
10010a72:	46c0      	nop			; (mov r8, r8)
10010a74:	0000ffff 	.word	0x0000ffff
10010a78:	1001b2be 	.word	0x1001b2be

10010a7c <check_ConnData_emptyEntry>:
10010a7c:	2300      	movs	r3, #0
10010a7e:	2212      	movs	r2, #18
10010a80:	435a      	muls	r2, r3
10010a82:	4906      	ldr	r1, [pc, #24]	; (10010a9c <check_ConnData_emptyEntry+0x20>)
10010a84:	b2d8      	uxtb	r0, r3
10010a86:	1852      	adds	r2, r2, r1
10010a88:	8951      	ldrh	r1, [r2, #10]
10010a8a:	4a05      	ldr	r2, [pc, #20]	; (10010aa0 <check_ConnData_emptyEntry+0x24>)
10010a8c:	4291      	cmp	r1, r2
10010a8e:	d003      	beq.n	10010a98 <check_ConnData_emptyEntry+0x1c>
10010a90:	3301      	adds	r3, #1
10010a92:	2b08      	cmp	r3, #8
10010a94:	d1f3      	bne.n	10010a7e <check_ConnData_emptyEntry+0x2>
10010a96:	1c18      	adds	r0, r3, #0
10010a98:	4770      	bx	lr
10010a9a:	46c0      	nop			; (mov r8, r8)
10010a9c:	1001b2be 	.word	0x1001b2be
10010aa0:	0000ffff 	.word	0x0000ffff

10010aa4 <gapc_cmp_evt>:
10010aa4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010aa6:	780b      	ldrb	r3, [r1, #0]
10010aa8:	1c05      	adds	r5, r0, #0
10010aaa:	1e58      	subs	r0, r3, #1
10010aac:	784e      	ldrb	r6, [r1, #1]
10010aae:	280f      	cmp	r0, #15
10010ab0:	d85a      	bhi.n	10010b68 <gapc_cmp_evt+0xc4>
10010ab2:	1c14      	adds	r4, r2, #0
10010ab4:	f002 fd62 	bl	1001357c <__gnu_thumb1_case_uqi>
10010ab8:	5858440a 	.word	0x5858440a
10010abc:	4b584444 	.word	0x4b584444
10010ac0:	0825122d 	.word	0x0825122d
10010ac4:	3e395858 	.word	0x3e395858
10010ac8:	203b      	movs	r0, #59	; 0x3b
10010aca:	e04e      	b.n	10010b6a <gapc_cmp_evt+0xc6>
10010acc:	203b      	movs	r0, #59	; 0x3b
10010ace:	2e00      	cmp	r6, #0
10010ad0:	d04b      	beq.n	10010b6a <gapc_cmp_evt+0xc6>
10010ad2:	0a2d      	lsrs	r5, r5, #8
10010ad4:	8015      	strh	r5, [r2, #0]
10010ad6:	7096      	strb	r6, [r2, #2]
10010ad8:	3835      	subs	r0, #53	; 0x35
10010ada:	e046      	b.n	10010b6a <gapc_cmp_evt+0xc6>
10010adc:	466b      	mov	r3, sp
10010ade:	1ddf      	adds	r7, r3, #7
10010ae0:	2301      	movs	r3, #1
10010ae2:	0a2d      	lsrs	r5, r5, #8
10010ae4:	703b      	strb	r3, [r7, #0]
10010ae6:	1c28      	adds	r0, r5, #0
10010ae8:	1c39      	adds	r1, r7, #0
10010aea:	4b20      	ldr	r3, [pc, #128]	; (10010b6c <gapc_cmp_evt+0xc8>)
10010aec:	4798      	blx	r3
10010aee:	2807      	cmp	r0, #7
10010af0:	d803      	bhi.n	10010afa <gapc_cmp_evt+0x56>
10010af2:	783b      	ldrb	r3, [r7, #0]
10010af4:	203b      	movs	r0, #59	; 0x3b
10010af6:	2b00      	cmp	r3, #0
10010af8:	d037      	beq.n	10010b6a <gapc_cmp_evt+0xc6>
10010afa:	8065      	strh	r5, [r4, #2]
10010afc:	7126      	strb	r6, [r4, #4]
10010afe:	2009      	movs	r0, #9
10010b00:	e033      	b.n	10010b6a <gapc_cmp_evt+0xc6>
10010b02:	203b      	movs	r0, #59	; 0x3b
10010b04:	2e00      	cmp	r6, #0
10010b06:	d030      	beq.n	10010b6a <gapc_cmp_evt+0xc6>
10010b08:	0a2d      	lsrs	r5, r5, #8
10010b0a:	8015      	strh	r5, [r2, #0]
10010b0c:	7096      	strb	r6, [r2, #2]
10010b0e:	382d      	subs	r0, #45	; 0x2d
10010b10:	e02b      	b.n	10010b6a <gapc_cmp_evt+0xc6>
10010b12:	203b      	movs	r0, #59	; 0x3b
10010b14:	2e00      	cmp	r6, #0
10010b16:	d028      	beq.n	10010b6a <gapc_cmp_evt+0xc6>
10010b18:	2300      	movs	r3, #0
10010b1a:	0a2d      	lsrs	r5, r5, #8
10010b1c:	8015      	strh	r5, [r2, #0]
10010b1e:	7096      	strb	r6, [r2, #2]
10010b20:	8093      	strh	r3, [r2, #4]
10010b22:	80d3      	strh	r3, [r2, #6]
10010b24:	8113      	strh	r3, [r2, #8]
10010b26:	3834      	subs	r0, #52	; 0x34
10010b28:	e01f      	b.n	10010b6a <gapc_cmp_evt+0xc6>
10010b2a:	203b      	movs	r0, #59	; 0x3b
10010b2c:	2e00      	cmp	r6, #0
10010b2e:	d01c      	beq.n	10010b6a <gapc_cmp_evt+0xc6>
10010b30:	7216      	strb	r6, [r2, #8]
10010b32:	e003      	b.n	10010b3c <gapc_cmp_evt+0x98>
10010b34:	203b      	movs	r0, #59	; 0x3b
10010b36:	2e00      	cmp	r6, #0
10010b38:	d017      	beq.n	10010b6a <gapc_cmp_evt+0xc6>
10010b3a:	7116      	strb	r6, [r2, #4]
10010b3c:	3812      	subs	r0, #18
10010b3e:	e014      	b.n	10010b6a <gapc_cmp_evt+0xc6>
10010b40:	203b      	movs	r0, #59	; 0x3b
10010b42:	2e00      	cmp	r6, #0
10010b44:	d011      	beq.n	10010b6a <gapc_cmp_evt+0xc6>
10010b46:	7093      	strb	r3, [r2, #2]
10010b48:	70d6      	strb	r6, [r2, #3]
10010b4a:	382a      	subs	r0, #42	; 0x2a
10010b4c:	e00d      	b.n	10010b6a <gapc_cmp_evt+0xc6>
10010b4e:	203b      	movs	r0, #59	; 0x3b
10010b50:	2e00      	cmp	r6, #0
10010b52:	d00a      	beq.n	10010b6a <gapc_cmp_evt+0xc6>
10010b54:	0a2d      	lsrs	r5, r5, #8
10010b56:	7016      	strb	r6, [r2, #0]
10010b58:	8055      	strh	r5, [r2, #2]
10010b5a:	1d10      	adds	r0, r2, #4
10010b5c:	2100      	movs	r1, #0
10010b5e:	2205      	movs	r2, #5
10010b60:	4b03      	ldr	r3, [pc, #12]	; (10010b70 <gapc_cmp_evt+0xcc>)
10010b62:	4798      	blx	r3
10010b64:	2012      	movs	r0, #18
10010b66:	e000      	b.n	10010b6a <gapc_cmp_evt+0xc6>
10010b68:	2000      	movs	r0, #0
10010b6a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10010b6c:	10010a41 	.word	0x10010a41
10010b70:	100165d9 	.word	0x100165d9

10010b74 <gapc_connection_cfm_handler>:
10010b74:	b5f0      	push	{r4, r5, r6, r7, lr}
10010b76:	b085      	sub	sp, #20
10010b78:	1c1d      	adds	r5, r3, #0
10010b7a:	ab0a      	add	r3, sp, #40	; 0x28
10010b7c:	781b      	ldrb	r3, [r3, #0]
10010b7e:	9201      	str	r2, [sp, #4]
10010b80:	9302      	str	r3, [sp, #8]
10010b82:	ab0b      	add	r3, sp, #44	; 0x2c
10010b84:	781b      	ldrb	r3, [r3, #0]
10010b86:	1c07      	adds	r7, r0, #0
10010b88:	9303      	str	r3, [sp, #12]
10010b8a:	ab0c      	add	r3, sp, #48	; 0x30
10010b8c:	881a      	ldrh	r2, [r3, #0]
10010b8e:	2302      	movs	r3, #2
10010b90:	1c0e      	adds	r6, r1, #0
10010b92:	4c23      	ldr	r4, [pc, #140]	; (10010c20 <gapc_connection_cfm_handler+0xac>)
10010b94:	1c39      	adds	r1, r7, #0
10010b96:	7023      	strb	r3, [r4, #0]
10010b98:	330c      	adds	r3, #12
10010b9a:	7063      	strb	r3, [r4, #1]
10010b9c:	70a3      	strb	r3, [r4, #2]
10010b9e:	4b21      	ldr	r3, [pc, #132]	; (10010c24 <gapc_connection_cfm_handler+0xb0>)
10010ba0:	70e2      	strb	r2, [r4, #3]
10010ba2:	881a      	ldrh	r2, [r3, #0]
10010ba4:	881b      	ldrh	r3, [r3, #0]
10010ba6:	7122      	strb	r2, [r4, #4]
10010ba8:	0a1b      	lsrs	r3, r3, #8
10010baa:	4f1f      	ldr	r7, [pc, #124]	; (10010c28 <gapc_connection_cfm_handler+0xb4>)
10010bac:	2210      	movs	r2, #16
10010bae:	481f      	ldr	r0, [pc, #124]	; (10010c2c <gapc_connection_cfm_handler+0xb8>)
10010bb0:	7163      	strb	r3, [r4, #5]
10010bb2:	47b8      	blx	r7
10010bb4:	0a33      	lsrs	r3, r6, #8
10010bb6:	7626      	strb	r6, [r4, #24]
10010bb8:	7663      	strb	r3, [r4, #25]
10010bba:	9901      	ldr	r1, [sp, #4]
10010bbc:	0c33      	lsrs	r3, r6, #16
10010bbe:	2210      	movs	r2, #16
10010bc0:	0e36      	lsrs	r6, r6, #24
10010bc2:	481b      	ldr	r0, [pc, #108]	; (10010c30 <gapc_connection_cfm_handler+0xbc>)
10010bc4:	76a3      	strb	r3, [r4, #26]
10010bc6:	76e6      	strb	r6, [r4, #27]
10010bc8:	47b8      	blx	r7
10010bca:	1c23      	adds	r3, r4, #0
10010bcc:	332c      	adds	r3, #44	; 0x2c
10010bce:	701d      	strb	r5, [r3, #0]
10010bd0:	1c23      	adds	r3, r4, #0
10010bd2:	0a2a      	lsrs	r2, r5, #8
10010bd4:	332d      	adds	r3, #45	; 0x2d
10010bd6:	701a      	strb	r2, [r3, #0]
10010bd8:	1c23      	adds	r3, r4, #0
10010bda:	0c2a      	lsrs	r2, r5, #16
10010bdc:	332e      	adds	r3, #46	; 0x2e
10010bde:	701a      	strb	r2, [r3, #0]
10010be0:	1c23      	adds	r3, r4, #0
10010be2:	0e2d      	lsrs	r5, r5, #24
10010be4:	332f      	adds	r3, #47	; 0x2f
10010be6:	466a      	mov	r2, sp
10010be8:	701d      	strb	r5, [r3, #0]
10010bea:	1c23      	adds	r3, r4, #0
10010bec:	7a12      	ldrb	r2, [r2, #8]
10010bee:	3330      	adds	r3, #48	; 0x30
10010bf0:	701a      	strb	r2, [r3, #0]
10010bf2:	1c23      	adds	r3, r4, #0
10010bf4:	2500      	movs	r5, #0
10010bf6:	3331      	adds	r3, #49	; 0x31
10010bf8:	466a      	mov	r2, sp
10010bfa:	701d      	strb	r5, [r3, #0]
10010bfc:	1c23      	adds	r3, r4, #0
10010bfe:	7b12      	ldrb	r2, [r2, #12]
10010c00:	3332      	adds	r3, #50	; 0x32
10010c02:	701a      	strb	r2, [r3, #0]
10010c04:	1c23      	adds	r3, r4, #0
10010c06:	3333      	adds	r3, #51	; 0x33
10010c08:	701d      	strb	r5, [r3, #0]
10010c0a:	232c      	movs	r3, #44	; 0x2c
10010c0c:	1c20      	adds	r0, r4, #0
10010c0e:	71a3      	strb	r3, [r4, #6]
10010c10:	2134      	movs	r1, #52	; 0x34
10010c12:	4b08      	ldr	r3, [pc, #32]	; (10010c34 <gapc_connection_cfm_handler+0xc0>)
10010c14:	71e5      	strb	r5, [r4, #7]
10010c16:	4798      	blx	r3
10010c18:	1c28      	adds	r0, r5, #0
10010c1a:	b005      	add	sp, #20
10010c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010c1e:	46c0      	nop			; (mov r8, r8)
10010c20:	1001b62c 	.word	0x1001b62c
10010c24:	1001b2bc 	.word	0x1001b2bc
10010c28:	100165c7 	.word	0x100165c7
10010c2c:	1001b634 	.word	0x1001b634
10010c30:	1001b648 	.word	0x1001b648
10010c34:	10010871 	.word	0x10010871

10010c38 <gapc_con_req_ind>:
10010c38:	b5f0      	push	{r4, r5, r6, r7, lr}
10010c3a:	7845      	ldrb	r5, [r0, #1]
10010c3c:	7803      	ldrb	r3, [r0, #0]
10010c3e:	4c30      	ldr	r4, [pc, #192]	; (10010d00 <gapc_con_req_ind+0xc8>)
10010c40:	022d      	lsls	r5, r5, #8
10010c42:	431d      	orrs	r5, r3
10010c44:	85a5      	strh	r5, [r4, #44]	; 0x2c
10010c46:	78c3      	ldrb	r3, [r0, #3]
10010c48:	7882      	ldrb	r2, [r0, #2]
10010c4a:	b08b      	sub	sp, #44	; 0x2c
10010c4c:	021b      	lsls	r3, r3, #8
10010c4e:	431a      	orrs	r2, r3
10010c50:	466b      	mov	r3, sp
10010c52:	9205      	str	r2, [sp, #20]
10010c54:	8a9b      	ldrh	r3, [r3, #20]
10010c56:	2120      	movs	r1, #32
10010c58:	85e3      	strh	r3, [r4, #46]	; 0x2e
10010c5a:	7943      	ldrb	r3, [r0, #5]
10010c5c:	7902      	ldrb	r2, [r0, #4]
10010c5e:	021b      	lsls	r3, r3, #8
10010c60:	431a      	orrs	r2, r3
10010c62:	466b      	mov	r3, sp
10010c64:	9206      	str	r2, [sp, #24]
10010c66:	8b1b      	ldrh	r3, [r3, #24]
10010c68:	1c06      	adds	r6, r0, #0
10010c6a:	8623      	strh	r3, [r4, #48]	; 0x30
10010c6c:	79c3      	ldrb	r3, [r0, #7]
10010c6e:	7982      	ldrb	r2, [r0, #6]
10010c70:	021b      	lsls	r3, r3, #8
10010c72:	431a      	orrs	r2, r3
10010c74:	466b      	mov	r3, sp
10010c76:	9207      	str	r2, [sp, #28]
10010c78:	466a      	mov	r2, sp
10010c7a:	8b9b      	ldrh	r3, [r3, #28]
10010c7c:	1852      	adds	r2, r2, r1
10010c7e:	8663      	strh	r3, [r4, #50]	; 0x32
10010c80:	7a43      	ldrb	r3, [r0, #9]
10010c82:	1c01      	adds	r1, r0, #0
10010c84:	9308      	str	r3, [sp, #32]
10010c86:	1c23      	adds	r3, r4, #0
10010c88:	7812      	ldrb	r2, [r2, #0]
10010c8a:	3377      	adds	r3, #119	; 0x77
10010c8c:	3478      	adds	r4, #120	; 0x78
10010c8e:	701a      	strb	r2, [r3, #0]
10010c90:	310a      	adds	r1, #10
10010c92:	2206      	movs	r2, #6
10010c94:	4b1b      	ldr	r3, [pc, #108]	; (10010d04 <gapc_con_req_ind+0xcc>)
10010c96:	1c20      	adds	r0, r4, #0
10010c98:	4798      	blx	r3
10010c9a:	7c33      	ldrb	r3, [r6, #16]
10010c9c:	9309      	str	r3, [sp, #36]	; 0x24
10010c9e:	4b1a      	ldr	r3, [pc, #104]	; (10010d08 <gapc_con_req_ind+0xd0>)
10010ca0:	4798      	blx	r3
10010ca2:	4e1a      	ldr	r6, [pc, #104]	; (10010d0c <gapc_con_req_ind+0xd4>)
10010ca4:	1e07      	subs	r7, r0, #0
10010ca6:	2f07      	cmp	r7, #7
10010ca8:	d81b      	bhi.n	10010ce2 <gapc_con_req_ind+0xaa>
10010caa:	2312      	movs	r3, #18
10010cac:	4343      	muls	r3, r0
10010cae:	18f0      	adds	r0, r6, r3
10010cb0:	8145      	strh	r5, [r0, #10]
10010cb2:	4669      	mov	r1, sp
10010cb4:	2524      	movs	r5, #36	; 0x24
10010cb6:	1949      	adds	r1, r1, r5
10010cb8:	7809      	ldrb	r1, [r1, #0]
10010cba:	2206      	movs	r2, #6
10010cbc:	54f1      	strb	r1, [r6, r3]
10010cbe:	2120      	movs	r1, #32
10010cc0:	466b      	mov	r3, sp
10010cc2:	185b      	adds	r3, r3, r1
10010cc4:	781b      	ldrb	r3, [r3, #0]
10010cc6:	1c21      	adds	r1, r4, #0
10010cc8:	7043      	strb	r3, [r0, #1]
10010cca:	466b      	mov	r3, sp
10010ccc:	8a9b      	ldrh	r3, [r3, #20]
10010cce:	3002      	adds	r0, #2
10010cd0:	8143      	strh	r3, [r0, #10]
10010cd2:	466b      	mov	r3, sp
10010cd4:	8b1b      	ldrh	r3, [r3, #24]
10010cd6:	8183      	strh	r3, [r0, #12]
10010cd8:	466b      	mov	r3, sp
10010cda:	8b9b      	ldrh	r3, [r3, #28]
10010cdc:	81c3      	strh	r3, [r0, #14]
10010cde:	4b09      	ldr	r3, [pc, #36]	; (10010d04 <gapc_con_req_ind+0xcc>)
10010ce0:	4798      	blx	r3
10010ce2:	2112      	movs	r1, #18
10010ce4:	2300      	movs	r3, #0
10010ce6:	434f      	muls	r7, r1
10010ce8:	9300      	str	r3, [sp, #0]
10010cea:	9301      	str	r3, [sp, #4]
10010cec:	19f6      	adds	r6, r6, r7
10010cee:	8971      	ldrh	r1, [r6, #10]
10010cf0:	4a07      	ldr	r2, [pc, #28]	; (10010d10 <gapc_con_req_ind+0xd8>)
10010cf2:	9102      	str	r1, [sp, #8]
10010cf4:	1c10      	adds	r0, r2, #0
10010cf6:	1c19      	adds	r1, r3, #0
10010cf8:	4c06      	ldr	r4, [pc, #24]	; (10010d14 <gapc_con_req_ind+0xdc>)
10010cfa:	47a0      	blx	r4
10010cfc:	b00b      	add	sp, #44	; 0x2c
10010cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010d00:	1001b34e 	.word	0x1001b34e
10010d04:	100165c7 	.word	0x100165c7
10010d08:	10010a7d 	.word	0x10010a7d
10010d0c:	1001b2be 	.word	0x1001b2be
10010d10:	1001a380 	.word	0x1001a380
10010d14:	10010b75 	.word	0x10010b75

10010d18 <gapc_disconnect_cmd_handler>:
10010d18:	2204      	movs	r2, #4
10010d1a:	b510      	push	{r4, lr}
10010d1c:	4b0c      	ldr	r3, [pc, #48]	; (10010d50 <gapc_disconnect_cmd_handler+0x38>)
10010d1e:	2400      	movs	r4, #0
10010d20:	701a      	strb	r2, [r3, #0]
10010d22:	320a      	adds	r2, #10
10010d24:	705a      	strb	r2, [r3, #1]
10010d26:	709a      	strb	r2, [r3, #2]
10010d28:	4a0a      	ldr	r2, [pc, #40]	; (10010d54 <gapc_disconnect_cmd_handler+0x3c>)
10010d2a:	70d9      	strb	r1, [r3, #3]
10010d2c:	8811      	ldrh	r1, [r2, #0]
10010d2e:	8812      	ldrh	r2, [r2, #0]
10010d30:	7119      	strb	r1, [r3, #4]
10010d32:	0a12      	lsrs	r2, r2, #8
10010d34:	715a      	strb	r2, [r3, #5]
10010d36:	2201      	movs	r2, #1
10010d38:	721a      	strb	r2, [r3, #8]
10010d3a:	1892      	adds	r2, r2, r2
10010d3c:	7258      	strb	r0, [r3, #9]
10010d3e:	719a      	strb	r2, [r3, #6]
10010d40:	71dc      	strb	r4, [r3, #7]
10010d42:	1c18      	adds	r0, r3, #0
10010d44:	210a      	movs	r1, #10
10010d46:	4b04      	ldr	r3, [pc, #16]	; (10010d58 <gapc_disconnect_cmd_handler+0x40>)
10010d48:	4798      	blx	r3
10010d4a:	1c20      	adds	r0, r4, #0
10010d4c:	bd10      	pop	{r4, pc}
10010d4e:	46c0      	nop			; (mov r8, r8)
10010d50:	1001b62c 	.word	0x1001b62c
10010d54:	1001b2bc 	.word	0x1001b2bc
10010d58:	10010871 	.word	0x10010871

10010d5c <gapc_disconnect_ind>:
10010d5c:	1c02      	adds	r2, r0, #0
10010d5e:	b508      	push	{r3, lr}
10010d60:	7843      	ldrb	r3, [r0, #1]
10010d62:	7800      	ldrb	r0, [r0, #0]
10010d64:	021b      	lsls	r3, r3, #8
10010d66:	4318      	orrs	r0, r3
10010d68:	8008      	strh	r0, [r1, #0]
10010d6a:	7893      	ldrb	r3, [r2, #2]
10010d6c:	708b      	strb	r3, [r1, #2]
10010d6e:	2100      	movs	r1, #0
10010d70:	4b05      	ldr	r3, [pc, #20]	; (10010d88 <gapc_disconnect_ind+0x2c>)
10010d72:	4798      	blx	r3
10010d74:	2807      	cmp	r0, #7
10010d76:	d806      	bhi.n	10010d86 <gapc_disconnect_ind+0x2a>
10010d78:	2312      	movs	r3, #18
10010d7a:	4358      	muls	r0, r3
10010d7c:	4b03      	ldr	r3, [pc, #12]	; (10010d8c <gapc_disconnect_ind+0x30>)
10010d7e:	1818      	adds	r0, r3, r0
10010d80:	2301      	movs	r3, #1
10010d82:	425b      	negs	r3, r3
10010d84:	8143      	strh	r3, [r0, #10]
10010d86:	bd08      	pop	{r3, pc}
10010d88:	10010a41 	.word	0x10010a41
10010d8c:	1001b2be 	.word	0x1001b2be

10010d90 <gapc_bond_cmd_handler>:
10010d90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010d92:	9300      	str	r3, [sp, #0]
10010d94:	2312      	movs	r3, #18
10010d96:	1c04      	adds	r4, r0, #0
10010d98:	a808      	add	r0, sp, #32
10010d9a:	7807      	ldrb	r7, [r0, #0]
10010d9c:	a809      	add	r0, sp, #36	; 0x24
10010d9e:	7806      	ldrb	r6, [r0, #0]
10010da0:	a80a      	add	r0, sp, #40	; 0x28
10010da2:	7805      	ldrb	r5, [r0, #0]
10010da4:	a80b      	add	r0, sp, #44	; 0x2c
10010da6:	7800      	ldrb	r0, [r0, #0]
10010da8:	9001      	str	r0, [sp, #4]
10010daa:	4810      	ldr	r0, [pc, #64]	; (10010dec <gapc_bond_cmd_handler+0x5c>)
10010dac:	7003      	strb	r3, [r0, #0]
10010dae:	230e      	movs	r3, #14
10010db0:	70c4      	strb	r4, [r0, #3]
10010db2:	4c0f      	ldr	r4, [pc, #60]	; (10010df0 <gapc_bond_cmd_handler+0x60>)
10010db4:	7043      	strb	r3, [r0, #1]
10010db6:	7083      	strb	r3, [r0, #2]
10010db8:	8823      	ldrh	r3, [r4, #0]
10010dba:	8824      	ldrh	r4, [r4, #0]
10010dbc:	7103      	strb	r3, [r0, #4]
10010dbe:	466b      	mov	r3, sp
10010dc0:	781b      	ldrb	r3, [r3, #0]
10010dc2:	0a24      	lsrs	r4, r4, #8
10010dc4:	72c3      	strb	r3, [r0, #11]
10010dc6:	466b      	mov	r3, sp
10010dc8:	791b      	ldrb	r3, [r3, #4]
10010dca:	7144      	strb	r4, [r0, #5]
10010dcc:	73c3      	strb	r3, [r0, #15]
10010dce:	2308      	movs	r3, #8
10010dd0:	7183      	strb	r3, [r0, #6]
10010dd2:	2300      	movs	r3, #0
10010dd4:	240a      	movs	r4, #10
10010dd6:	7241      	strb	r1, [r0, #9]
10010dd8:	71c3      	strb	r3, [r0, #7]
10010dda:	2110      	movs	r1, #16
10010ddc:	4b05      	ldr	r3, [pc, #20]	; (10010df4 <gapc_bond_cmd_handler+0x64>)
10010dde:	7307      	strb	r7, [r0, #12]
10010de0:	7346      	strb	r6, [r0, #13]
10010de2:	7385      	strb	r5, [r0, #14]
10010de4:	7204      	strb	r4, [r0, #8]
10010de6:	7282      	strb	r2, [r0, #10]
10010de8:	4798      	blx	r3
10010dea:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10010dec:	1001b62c 	.word	0x1001b62c
10010df0:	1001b2bc 	.word	0x1001b2bc
10010df4:	10010871 	.word	0x10010871

10010df8 <gapc_bond_ind>:
10010df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10010dfa:	780e      	ldrb	r6, [r1, #0]
10010dfc:	1c03      	adds	r3, r0, #0
10010dfe:	1eb0      	subs	r0, r6, #2
10010e00:	2805      	cmp	r0, #5
10010e02:	d85d      	bhi.n	10010ec0 <gapc_bond_ind+0xc8>
10010e04:	1c15      	adds	r5, r2, #0
10010e06:	1c0c      	adds	r4, r1, #0
10010e08:	f002 fbb8 	bl	1001357c <__gnu_thumb1_case_uqi>
10010e0c:	2f5a030d 	.word	0x2f5a030d
10010e10:	4740      	.short	0x4740
10010e12:	2009      	movs	r0, #9
10010e14:	2a00      	cmp	r2, #0
10010e16:	d054      	beq.n	10010ec2 <gapc_bond_ind+0xca>
10010e18:	0a1b      	lsrs	r3, r3, #8
10010e1a:	8053      	strh	r3, [r2, #2]
10010e1c:	788b      	ldrb	r3, [r1, #2]
10010e1e:	4829      	ldr	r0, [pc, #164]	; (10010ec4 <gapc_bond_ind+0xcc>)
10010e20:	7113      	strb	r3, [r2, #4]
10010e22:	2100      	movs	r1, #0
10010e24:	e01c      	b.n	10010e60 <gapc_bond_ind+0x68>
10010e26:	2009      	movs	r0, #9
10010e28:	2a00      	cmp	r2, #0
10010e2a:	d04a      	beq.n	10010ec2 <gapc_bond_ind+0xca>
10010e2c:	4c25      	ldr	r4, [pc, #148]	; (10010ec4 <gapc_bond_ind+0xcc>)
10010e2e:	0a1b      	lsrs	r3, r3, #8
10010e30:	8053      	strh	r3, [r2, #2]
10010e32:	788b      	ldrb	r3, [r1, #2]
10010e34:	2700      	movs	r7, #0
10010e36:	1c10      	adds	r0, r2, #0
10010e38:	1c21      	adds	r1, r4, #0
10010e3a:	7013      	strb	r3, [r2, #0]
10010e3c:	4e22      	ldr	r6, [pc, #136]	; (10010ec8 <gapc_bond_ind+0xd0>)
10010e3e:	7117      	strb	r7, [r2, #4]
10010e40:	312e      	adds	r1, #46	; 0x2e
10010e42:	2217      	movs	r2, #23
10010e44:	3032      	adds	r0, #50	; 0x32
10010e46:	47b0      	blx	r6
10010e48:	1c28      	adds	r0, r5, #0
10010e4a:	1c21      	adds	r1, r4, #0
10010e4c:	2210      	movs	r2, #16
10010e4e:	311e      	adds	r1, #30
10010e50:	3022      	adds	r0, #34	; 0x22
10010e52:	47b0      	blx	r6
10010e54:	1ca1      	adds	r1, r4, #2
10010e56:	1da8      	adds	r0, r5, #6
10010e58:	221c      	movs	r2, #28
10010e5a:	47b0      	blx	r6
10010e5c:	1c20      	adds	r0, r4, #0
10010e5e:	1c39      	adds	r1, r7, #0
10010e60:	2246      	movs	r2, #70	; 0x46
10010e62:	4b1a      	ldr	r3, [pc, #104]	; (10010ecc <gapc_bond_ind+0xd4>)
10010e64:	4798      	blx	r3
10010e66:	2009      	movs	r0, #9
10010e68:	e02b      	b.n	10010ec2 <gapc_bond_ind+0xca>
10010e6a:	4d16      	ldr	r5, [pc, #88]	; (10010ec4 <gapc_bond_ind+0xcc>)
10010e6c:	3102      	adds	r1, #2
10010e6e:	1c28      	adds	r0, r5, #0
10010e70:	2210      	movs	r2, #16
10010e72:	4e15      	ldr	r6, [pc, #84]	; (10010ec8 <gapc_bond_ind+0xd0>)
10010e74:	302e      	adds	r0, #46	; 0x2e
10010e76:	47b0      	blx	r6
10010e78:	1c28      	adds	r0, r5, #0
10010e7a:	1c21      	adds	r1, r4, #0
10010e7c:	303f      	adds	r0, #63	; 0x3f
10010e7e:	3112      	adds	r1, #18
10010e80:	2206      	movs	r2, #6
10010e82:	47b0      	blx	r6
10010e84:	7e23      	ldrb	r3, [r4, #24]
10010e86:	353e      	adds	r5, #62	; 0x3e
10010e88:	702b      	strb	r3, [r5, #0]
10010e8a:	e019      	b.n	10010ec0 <gapc_bond_ind+0xc8>
10010e8c:	480d      	ldr	r0, [pc, #52]	; (10010ec4 <gapc_bond_ind+0xcc>)
10010e8e:	3102      	adds	r1, #2
10010e90:	2210      	movs	r2, #16
10010e92:	4b0d      	ldr	r3, [pc, #52]	; (10010ec8 <gapc_bond_ind+0xd0>)
10010e94:	301e      	adds	r0, #30
10010e96:	4798      	blx	r3
10010e98:	e012      	b.n	10010ec0 <gapc_bond_ind+0xc8>
10010e9a:	4d0a      	ldr	r5, [pc, #40]	; (10010ec4 <gapc_bond_ind+0xcc>)
10010e9c:	3102      	adds	r1, #2
10010e9e:	2210      	movs	r2, #16
10010ea0:	4e09      	ldr	r6, [pc, #36]	; (10010ec8 <gapc_bond_ind+0xd0>)
10010ea2:	1ca8      	adds	r0, r5, #2
10010ea4:	47b0      	blx	r6
10010ea6:	1c28      	adds	r0, r5, #0
10010ea8:	1c21      	adds	r1, r4, #0
10010eaa:	7ce3      	ldrb	r3, [r4, #19]
10010eac:	7ca2      	ldrb	r2, [r4, #18]
10010eae:	021b      	lsls	r3, r3, #8
10010eb0:	4313      	orrs	r3, r2
10010eb2:	3014      	adds	r0, #20
10010eb4:	3114      	adds	r1, #20
10010eb6:	2208      	movs	r2, #8
10010eb8:	826b      	strh	r3, [r5, #18]
10010eba:	47b0      	blx	r6
10010ebc:	7f23      	ldrb	r3, [r4, #28]
10010ebe:	772b      	strb	r3, [r5, #28]
10010ec0:	2000      	movs	r0, #0
10010ec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10010ec4:	1001a3b0 	.word	0x1001a3b0
10010ec8:	100165c7 	.word	0x100165c7
10010ecc:	100165d9 	.word	0x100165d9

10010ed0 <gapc_bond_req_ind>:
10010ed0:	b570      	push	{r4, r5, r6, lr}
10010ed2:	780c      	ldrb	r4, [r1, #0]
10010ed4:	1c03      	adds	r3, r0, #0
10010ed6:	7849      	ldrb	r1, [r1, #1]
10010ed8:	2c07      	cmp	r4, #7
10010eda:	d85c      	bhi.n	10010f96 <gapc_bond_req_ind+0xc6>
10010edc:	1c20      	adds	r0, r4, #0
10010ede:	f002 fb4d 	bl	1001357c <__gnu_thumb1_case_uqi>
10010ee2:	5a04      	.short	0x5a04
10010ee4:	5a0b5a5a 	.word	0x5a0b5a5a
10010ee8:	1f1f      	.short	0x1f1f
10010eea:	200a      	movs	r0, #10
10010eec:	2a00      	cmp	r2, #0
10010eee:	d053      	beq.n	10010f98 <gapc_bond_req_ind+0xc8>
10010ef0:	0a1b      	lsrs	r3, r3, #8
10010ef2:	8013      	strh	r3, [r2, #0]
10010ef4:	7091      	strb	r1, [r2, #2]
10010ef6:	e04f      	b.n	10010f98 <gapc_bond_req_ind+0xc8>
10010ef8:	2a00      	cmp	r2, #0
10010efa:	d00b      	beq.n	10010f14 <gapc_bond_req_ind+0x44>
10010efc:	0a1b      	lsrs	r3, r3, #8
10010efe:	8013      	strh	r3, [r2, #0]
10010f00:	2900      	cmp	r1, #0
10010f02:	d102      	bne.n	10010f0a <gapc_bond_req_ind+0x3a>
10010f04:	2301      	movs	r3, #1
10010f06:	7093      	strb	r3, [r2, #2]
10010f08:	e004      	b.n	10010f14 <gapc_bond_req_ind+0x44>
10010f0a:	2300      	movs	r3, #0
10010f0c:	7093      	strb	r3, [r2, #2]
10010f0e:	2902      	cmp	r1, #2
10010f10:	d102      	bne.n	10010f18 <gapc_bond_req_ind+0x48>
10010f12:	70d3      	strb	r3, [r2, #3]
10010f14:	200c      	movs	r0, #12
10010f16:	e03f      	b.n	10010f98 <gapc_bond_req_ind+0xc8>
10010f18:	2901      	cmp	r1, #1
10010f1a:	d1fb      	bne.n	10010f14 <gapc_bond_req_ind+0x44>
10010f1c:	70d1      	strb	r1, [r2, #3]
10010f1e:	e7f9      	b.n	10010f14 <gapc_bond_req_ind+0x44>
10010f20:	2214      	movs	r2, #20
10010f22:	481e      	ldr	r0, [pc, #120]	; (10010f9c <gapc_bond_req_ind+0xcc>)
10010f24:	0a1b      	lsrs	r3, r3, #8
10010f26:	70c3      	strb	r3, [r0, #3]
10010f28:	4b1d      	ldr	r3, [pc, #116]	; (10010fa0 <gapc_bond_req_ind+0xd0>)
10010f2a:	7002      	strb	r2, [r0, #0]
10010f2c:	3a06      	subs	r2, #6
10010f2e:	7042      	strb	r2, [r0, #1]
10010f30:	7082      	strb	r2, [r0, #2]
10010f32:	881a      	ldrh	r2, [r3, #0]
10010f34:	881b      	ldrh	r3, [r3, #0]
10010f36:	4e1b      	ldr	r6, [pc, #108]	; (10010fa4 <gapc_bond_req_ind+0xd4>)
10010f38:	0a1b      	lsrs	r3, r3, #8
10010f3a:	7143      	strb	r3, [r0, #5]
10010f3c:	2301      	movs	r3, #1
10010f3e:	7102      	strb	r2, [r0, #4]
10010f40:	7204      	strb	r4, [r0, #8]
10010f42:	7243      	strb	r3, [r0, #9]
10010f44:	1c05      	adds	r5, r0, #0
10010f46:	1c31      	adds	r1, r6, #0
10010f48:	300a      	adds	r0, #10
10010f4a:	2c07      	cmp	r4, #7
10010f4c:	d116      	bne.n	10010f7c <gapc_bond_req_ind+0xac>
10010f4e:	317e      	adds	r1, #126	; 0x7e
10010f50:	2210      	movs	r2, #16
10010f52:	4c15      	ldr	r4, [pc, #84]	; (10010fa8 <gapc_bond_req_ind+0xd8>)
10010f54:	47a0      	blx	r4
10010f56:	1c33      	adds	r3, r6, #0
10010f58:	1c31      	adds	r1, r6, #0
10010f5a:	1c28      	adds	r0, r5, #0
10010f5c:	338e      	adds	r3, #142	; 0x8e
10010f5e:	881b      	ldrh	r3, [r3, #0]
10010f60:	3190      	adds	r1, #144	; 0x90
10010f62:	76ab      	strb	r3, [r5, #26]
10010f64:	2208      	movs	r2, #8
10010f66:	0a1b      	lsrs	r3, r3, #8
10010f68:	301c      	adds	r0, #28
10010f6a:	76eb      	strb	r3, [r5, #27]
10010f6c:	47a0      	blx	r4
10010f6e:	1c31      	adds	r1, r6, #0
10010f70:	3198      	adds	r1, #152	; 0x98
10010f72:	780a      	ldrb	r2, [r1, #0]
10010f74:	1d6b      	adds	r3, r5, #5
10010f76:	77da      	strb	r2, [r3, #31]
10010f78:	2125      	movs	r1, #37	; 0x25
10010f7a:	e004      	b.n	10010f86 <gapc_bond_req_ind+0xb6>
10010f7c:	319a      	adds	r1, #154	; 0x9a
10010f7e:	2210      	movs	r2, #16
10010f80:	4b09      	ldr	r3, [pc, #36]	; (10010fa8 <gapc_bond_req_ind+0xd8>)
10010f82:	4798      	blx	r3
10010f84:	211a      	movs	r1, #26
10010f86:	1c0b      	adds	r3, r1, #0
10010f88:	2400      	movs	r4, #0
10010f8a:	3b08      	subs	r3, #8
10010f8c:	71ab      	strb	r3, [r5, #6]
10010f8e:	1c28      	adds	r0, r5, #0
10010f90:	4b06      	ldr	r3, [pc, #24]	; (10010fac <gapc_bond_req_ind+0xdc>)
10010f92:	71ec      	strb	r4, [r5, #7]
10010f94:	4798      	blx	r3
10010f96:	2000      	movs	r0, #0
10010f98:	bd70      	pop	{r4, r5, r6, pc}
10010f9a:	46c0      	nop			; (mov r8, r8)
10010f9c:	1001b62c 	.word	0x1001b62c
10010fa0:	1001b2bc 	.word	0x1001b2bc
10010fa4:	1001b34e 	.word	0x1001b34e
10010fa8:	100165c7 	.word	0x100165c7
10010fac:	10010871 	.word	0x10010871

10010fb0 <gapc_bond_cfm_handler_pair_resp>:
10010fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
10010fb2:	b085      	sub	sp, #20
10010fb4:	1c07      	adds	r7, r0, #0
10010fb6:	a80a      	add	r0, sp, #40	; 0x28
10010fb8:	7806      	ldrb	r6, [r0, #0]
10010fba:	a80b      	add	r0, sp, #44	; 0x2c
10010fbc:	7805      	ldrb	r5, [r0, #0]
10010fbe:	a80c      	add	r0, sp, #48	; 0x30
10010fc0:	7800      	ldrb	r0, [r0, #0]
10010fc2:	2414      	movs	r4, #20
10010fc4:	9002      	str	r0, [sp, #8]
10010fc6:	a80d      	add	r0, sp, #52	; 0x34
10010fc8:	7800      	ldrb	r0, [r0, #0]
10010fca:	9301      	str	r3, [sp, #4]
10010fcc:	9003      	str	r0, [sp, #12]
10010fce:	a80e      	add	r0, sp, #56	; 0x38
10010fd0:	8800      	ldrh	r0, [r0, #0]
10010fd2:	4684      	mov	ip, r0
10010fd4:	4812      	ldr	r0, [pc, #72]	; (10011020 <gapc_bond_cfm_handler_pair_resp+0x70>)
10010fd6:	7004      	strb	r4, [r0, #0]
10010fd8:	3c06      	subs	r4, #6
10010fda:	7044      	strb	r4, [r0, #1]
10010fdc:	7084      	strb	r4, [r0, #2]
10010fde:	4664      	mov	r4, ip
10010fe0:	70c4      	strb	r4, [r0, #3]
10010fe2:	4c10      	ldr	r4, [pc, #64]	; (10011024 <gapc_bond_cfm_handler_pair_resp+0x74>)
10010fe4:	7247      	strb	r7, [r0, #9]
10010fe6:	8823      	ldrh	r3, [r4, #0]
10010fe8:	8824      	ldrh	r4, [r4, #0]
10010fea:	7103      	strb	r3, [r0, #4]
10010fec:	466b      	mov	r3, sp
10010fee:	791b      	ldrb	r3, [r3, #4]
10010ff0:	0a24      	lsrs	r4, r4, #8
10010ff2:	7303      	strb	r3, [r0, #12]
10010ff4:	466b      	mov	r3, sp
10010ff6:	7a1b      	ldrb	r3, [r3, #8]
10010ff8:	7144      	strb	r4, [r0, #5]
10010ffa:	73c3      	strb	r3, [r0, #15]
10010ffc:	466b      	mov	r3, sp
10010ffe:	7b1b      	ldrb	r3, [r3, #12]
10011000:	2401      	movs	r4, #1
10011002:	7403      	strb	r3, [r0, #16]
10011004:	2309      	movs	r3, #9
10011006:	7183      	strb	r3, [r0, #6]
10011008:	2300      	movs	r3, #0
1001100a:	7204      	strb	r4, [r0, #8]
1001100c:	7281      	strb	r1, [r0, #10]
1001100e:	72c2      	strb	r2, [r0, #11]
10011010:	7346      	strb	r6, [r0, #13]
10011012:	7385      	strb	r5, [r0, #14]
10011014:	71c3      	strb	r3, [r0, #7]
10011016:	2111      	movs	r1, #17
10011018:	4b03      	ldr	r3, [pc, #12]	; (10011028 <gapc_bond_cfm_handler_pair_resp+0x78>)
1001101a:	4798      	blx	r3
1001101c:	b005      	add	sp, #20
1001101e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011020:	1001b62c 	.word	0x1001b62c
10011024:	1001b2bc 	.word	0x1001b2bc
10011028:	10010871 	.word	0x10010871

1001102c <gapc_bond_cfm_handler_key_exch>:
1001102c:	b538      	push	{r3, r4, r5, lr}
1001102e:	2514      	movs	r5, #20
10011030:	4c0d      	ldr	r4, [pc, #52]	; (10011068 <gapc_bond_cfm_handler_key_exch+0x3c>)
10011032:	70e3      	strb	r3, [r4, #3]
10011034:	4b0d      	ldr	r3, [pc, #52]	; (1001106c <gapc_bond_cfm_handler_key_exch+0x40>)
10011036:	7025      	strb	r5, [r4, #0]
10011038:	3d06      	subs	r5, #6
1001103a:	7065      	strb	r5, [r4, #1]
1001103c:	70a5      	strb	r5, [r4, #2]
1001103e:	881d      	ldrh	r5, [r3, #0]
10011040:	881b      	ldrh	r3, [r3, #0]
10011042:	7220      	strb	r0, [r4, #8]
10011044:	0a1b      	lsrs	r3, r3, #8
10011046:	7163      	strb	r3, [r4, #5]
10011048:	7261      	strb	r1, [r4, #9]
1001104a:	4b09      	ldr	r3, [pc, #36]	; (10011070 <gapc_bond_cfm_handler_key_exch+0x44>)
1001104c:	1c11      	adds	r1, r2, #0
1001104e:	4809      	ldr	r0, [pc, #36]	; (10011074 <gapc_bond_cfm_handler_key_exch+0x48>)
10011050:	2210      	movs	r2, #16
10011052:	7125      	strb	r5, [r4, #4]
10011054:	4798      	blx	r3
10011056:	2312      	movs	r3, #18
10011058:	71a3      	strb	r3, [r4, #6]
1001105a:	2300      	movs	r3, #0
1001105c:	1c20      	adds	r0, r4, #0
1001105e:	71e3      	strb	r3, [r4, #7]
10011060:	211a      	movs	r1, #26
10011062:	4b05      	ldr	r3, [pc, #20]	; (10011078 <gapc_bond_cfm_handler_key_exch+0x4c>)
10011064:	4798      	blx	r3
10011066:	bd38      	pop	{r3, r4, r5, pc}
10011068:	1001b62c 	.word	0x1001b62c
1001106c:	1001b2bc 	.word	0x1001b2bc
10011070:	100165c7 	.word	0x100165c7
10011074:	1001b636 	.word	0x1001b636
10011078:	10010871 	.word	0x10010871

1001107c <gapc_security_cmd_handler>:
1001107c:	221a      	movs	r2, #26
1001107e:	b508      	push	{r3, lr}
10011080:	4b0b      	ldr	r3, [pc, #44]	; (100110b0 <gapc_security_cmd_handler+0x34>)
10011082:	701a      	strb	r2, [r3, #0]
10011084:	3a0c      	subs	r2, #12
10011086:	705a      	strb	r2, [r3, #1]
10011088:	709a      	strb	r2, [r3, #2]
1001108a:	4a0a      	ldr	r2, [pc, #40]	; (100110b4 <gapc_security_cmd_handler+0x38>)
1001108c:	70d8      	strb	r0, [r3, #3]
1001108e:	8810      	ldrh	r0, [r2, #0]
10011090:	8812      	ldrh	r2, [r2, #0]
10011092:	7118      	strb	r0, [r3, #4]
10011094:	0a12      	lsrs	r2, r2, #8
10011096:	715a      	strb	r2, [r3, #5]
10011098:	220c      	movs	r2, #12
1001109a:	721a      	strb	r2, [r3, #8]
1001109c:	3a0a      	subs	r2, #10
1001109e:	719a      	strb	r2, [r3, #6]
100110a0:	2200      	movs	r2, #0
100110a2:	7259      	strb	r1, [r3, #9]
100110a4:	71da      	strb	r2, [r3, #7]
100110a6:	1c18      	adds	r0, r3, #0
100110a8:	210a      	movs	r1, #10
100110aa:	4b03      	ldr	r3, [pc, #12]	; (100110b8 <gapc_security_cmd_handler+0x3c>)
100110ac:	4798      	blx	r3
100110ae:	bd08      	pop	{r3, pc}
100110b0:	1001b62c 	.word	0x1001b62c
100110b4:	1001b2bc 	.word	0x1001b2bc
100110b8:	10010871 	.word	0x10010871

100110bc <gapc_encrypt_cmd_handler>:
100110bc:	b5f0      	push	{r4, r5, r6, r7, lr}
100110be:	2500      	movs	r5, #0
100110c0:	b089      	sub	sp, #36	; 0x24
100110c2:	9306      	str	r3, [sp, #24]
100110c4:	ab0e      	add	r3, sp, #56	; 0x38
100110c6:	781b      	ldrb	r3, [r3, #0]
100110c8:	1c17      	adds	r7, r2, #0
100110ca:	9307      	str	r3, [sp, #28]
100110cc:	ab0f      	add	r3, sp, #60	; 0x3c
100110ce:	781b      	ldrb	r3, [r3, #0]
100110d0:	4a19      	ldr	r2, [pc, #100]	; (10011138 <gapc_encrypt_cmd_handler+0x7c>)
100110d2:	1c06      	adds	r6, r0, #0
100110d4:	9105      	str	r1, [sp, #20]
100110d6:	9300      	str	r3, [sp, #0]
100110d8:	9002      	str	r0, [sp, #8]
100110da:	1c29      	adds	r1, r5, #0
100110dc:	1c2b      	adds	r3, r5, #0
100110de:	9501      	str	r5, [sp, #4]
100110e0:	1c10      	adds	r0, r2, #0
100110e2:	4c16      	ldr	r4, [pc, #88]	; (1001113c <gapc_encrypt_cmd_handler+0x80>)
100110e4:	47a0      	blx	r4
100110e6:	2316      	movs	r3, #22
100110e8:	4c15      	ldr	r4, [pc, #84]	; (10011140 <gapc_encrypt_cmd_handler+0x84>)
100110ea:	9905      	ldr	r1, [sp, #20]
100110ec:	7023      	strb	r3, [r4, #0]
100110ee:	3b08      	subs	r3, #8
100110f0:	7063      	strb	r3, [r4, #1]
100110f2:	70a3      	strb	r3, [r4, #2]
100110f4:	4b13      	ldr	r3, [pc, #76]	; (10011144 <gapc_encrypt_cmd_handler+0x88>)
100110f6:	70e6      	strb	r6, [r4, #3]
100110f8:	881a      	ldrh	r2, [r3, #0]
100110fa:	881b      	ldrh	r3, [r3, #0]
100110fc:	7122      	strb	r2, [r4, #4]
100110fe:	0a1b      	lsrs	r3, r3, #8
10011100:	7163      	strb	r3, [r4, #5]
10011102:	230b      	movs	r3, #11
10011104:	4e10      	ldr	r6, [pc, #64]	; (10011148 <gapc_encrypt_cmd_handler+0x8c>)
10011106:	2210      	movs	r2, #16
10011108:	4810      	ldr	r0, [pc, #64]	; (1001114c <gapc_encrypt_cmd_handler+0x90>)
1001110a:	7223      	strb	r3, [r4, #8]
1001110c:	7265      	strb	r5, [r4, #9]
1001110e:	47b0      	blx	r6
10011110:	0a3b      	lsrs	r3, r7, #8
10011112:	9906      	ldr	r1, [sp, #24]
10011114:	2208      	movs	r2, #8
10011116:	480e      	ldr	r0, [pc, #56]	; (10011150 <gapc_encrypt_cmd_handler+0x94>)
10011118:	76e3      	strb	r3, [r4, #27]
1001111a:	76a7      	strb	r7, [r4, #26]
1001111c:	47b0      	blx	r6
1001111e:	466a      	mov	r2, sp
10011120:	7f12      	ldrb	r2, [r2, #28]
10011122:	1d63      	adds	r3, r4, #5
10011124:	77da      	strb	r2, [r3, #31]
10011126:	231d      	movs	r3, #29
10011128:	1c20      	adds	r0, r4, #0
1001112a:	71a3      	strb	r3, [r4, #6]
1001112c:	2125      	movs	r1, #37	; 0x25
1001112e:	4b09      	ldr	r3, [pc, #36]	; (10011154 <gapc_encrypt_cmd_handler+0x98>)
10011130:	71e5      	strb	r5, [r4, #7]
10011132:	4798      	blx	r3
10011134:	b009      	add	sp, #36	; 0x24
10011136:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011138:	1001a390 	.word	0x1001a390
1001113c:	10010b75 	.word	0x10010b75
10011140:	1001b62c 	.word	0x1001b62c
10011144:	1001b2bc 	.word	0x1001b2bc
10011148:	100165c7 	.word	0x100165c7
1001114c:	1001b636 	.word	0x1001b636
10011150:	1001b648 	.word	0x1001b648
10011154:	10010871 	.word	0x10010871

10011158 <gapc_encrypt_req_ind>:
10011158:	b508      	push	{r3, lr}
1001115a:	0a00      	lsrs	r0, r0, #8
1001115c:	8010      	strh	r0, [r2, #0]
1001115e:	784b      	ldrb	r3, [r1, #1]
10011160:	7808      	ldrb	r0, [r1, #0]
10011162:	021b      	lsls	r3, r3, #8
10011164:	4303      	orrs	r3, r0
10011166:	8053      	strh	r3, [r2, #2]
10011168:	1d10      	adds	r0, r2, #4
1001116a:	3102      	adds	r1, #2
1001116c:	2208      	movs	r2, #8
1001116e:	4b01      	ldr	r3, [pc, #4]	; (10011174 <gapc_encrypt_req_ind+0x1c>)
10011170:	4798      	blx	r3
10011172:	bd08      	pop	{r3, pc}
10011174:	100165c7 	.word	0x100165c7

10011178 <gapc_encrypt_cfm_handler>:
10011178:	b5f0      	push	{r4, r5, r6, r7, lr}
1001117a:	2500      	movs	r5, #0
1001117c:	b087      	sub	sp, #28
1001117e:	9304      	str	r3, [sp, #16]
10011180:	ab0c      	add	r3, sp, #48	; 0x30
10011182:	781b      	ldrb	r3, [r3, #0]
10011184:	1c17      	adds	r7, r2, #0
10011186:	4a15      	ldr	r2, [pc, #84]	; (100111dc <gapc_encrypt_cfm_handler+0x64>)
10011188:	1c06      	adds	r6, r0, #0
1001118a:	9305      	str	r3, [sp, #20]
1001118c:	9100      	str	r1, [sp, #0]
1001118e:	9002      	str	r0, [sp, #8]
10011190:	1c29      	adds	r1, r5, #0
10011192:	1c2b      	adds	r3, r5, #0
10011194:	9501      	str	r5, [sp, #4]
10011196:	1c10      	adds	r0, r2, #0
10011198:	4c11      	ldr	r4, [pc, #68]	; (100111e0 <gapc_encrypt_cfm_handler+0x68>)
1001119a:	47a0      	blx	r4
1001119c:	2318      	movs	r3, #24
1001119e:	4c11      	ldr	r4, [pc, #68]	; (100111e4 <gapc_encrypt_cfm_handler+0x6c>)
100111a0:	9904      	ldr	r1, [sp, #16]
100111a2:	7023      	strb	r3, [r4, #0]
100111a4:	3b0a      	subs	r3, #10
100111a6:	7063      	strb	r3, [r4, #1]
100111a8:	70a3      	strb	r3, [r4, #2]
100111aa:	4b0f      	ldr	r3, [pc, #60]	; (100111e8 <gapc_encrypt_cfm_handler+0x70>)
100111ac:	480f      	ldr	r0, [pc, #60]	; (100111ec <gapc_encrypt_cfm_handler+0x74>)
100111ae:	881a      	ldrh	r2, [r3, #0]
100111b0:	881b      	ldrh	r3, [r3, #0]
100111b2:	7122      	strb	r2, [r4, #4]
100111b4:	0a1b      	lsrs	r3, r3, #8
100111b6:	7163      	strb	r3, [r4, #5]
100111b8:	2210      	movs	r2, #16
100111ba:	4b0d      	ldr	r3, [pc, #52]	; (100111f0 <gapc_encrypt_cfm_handler+0x78>)
100111bc:	70e6      	strb	r6, [r4, #3]
100111be:	7227      	strb	r7, [r4, #8]
100111c0:	4798      	blx	r3
100111c2:	466b      	mov	r3, sp
100111c4:	7d1b      	ldrb	r3, [r3, #20]
100111c6:	1c20      	adds	r0, r4, #0
100111c8:	7663      	strb	r3, [r4, #25]
100111ca:	2312      	movs	r3, #18
100111cc:	211a      	movs	r1, #26
100111ce:	71a3      	strb	r3, [r4, #6]
100111d0:	4b08      	ldr	r3, [pc, #32]	; (100111f4 <gapc_encrypt_cfm_handler+0x7c>)
100111d2:	71e5      	strb	r5, [r4, #7]
100111d4:	4798      	blx	r3
100111d6:	b007      	add	sp, #28
100111d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100111da:	46c0      	nop			; (mov r8, r8)
100111dc:	1001a3a0 	.word	0x1001a3a0
100111e0:	10010b75 	.word	0x10010b75
100111e4:	1001b62c 	.word	0x1001b62c
100111e8:	1001b2bc 	.word	0x1001b2bc
100111ec:	1001b635 	.word	0x1001b635
100111f0:	100165c7 	.word	0x100165c7
100111f4:	10010871 	.word	0x10010871

100111f8 <gapc_encrypt_ind>:
100111f8:	780b      	ldrb	r3, [r1, #0]
100111fa:	0a00      	lsrs	r0, r0, #8
100111fc:	70d3      	strb	r3, [r2, #3]
100111fe:	2300      	movs	r3, #0
10011200:	8010      	strh	r0, [r2, #0]
10011202:	7093      	strb	r3, [r2, #2]
10011204:	4770      	bx	lr
	...

10011208 <gapc_param_update_cfm_handler>:
10011208:	b538      	push	{r3, r4, r5, lr}
1001120a:	2410      	movs	r4, #16
1001120c:	1c05      	adds	r5, r0, #0
1001120e:	480e      	ldr	r0, [pc, #56]	; (10011248 <gapc_param_update_cfm_handler+0x40>)
10011210:	7004      	strb	r4, [r0, #0]
10011212:	3c02      	subs	r4, #2
10011214:	7044      	strb	r4, [r0, #1]
10011216:	7084      	strb	r4, [r0, #2]
10011218:	4c0c      	ldr	r4, [pc, #48]	; (1001124c <gapc_param_update_cfm_handler+0x44>)
1001121a:	70c5      	strb	r5, [r0, #3]
1001121c:	8825      	ldrh	r5, [r4, #0]
1001121e:	8824      	ldrh	r4, [r4, #0]
10011220:	72c3      	strb	r3, [r0, #11]
10011222:	0a1b      	lsrs	r3, r3, #8
10011224:	0a24      	lsrs	r4, r4, #8
10011226:	7303      	strb	r3, [r0, #12]
10011228:	2305      	movs	r3, #5
1001122a:	7144      	strb	r4, [r0, #5]
1001122c:	2400      	movs	r4, #0
1001122e:	7201      	strb	r1, [r0, #8]
10011230:	7242      	strb	r2, [r0, #9]
10011232:	7183      	strb	r3, [r0, #6]
10011234:	0a12      	lsrs	r2, r2, #8
10011236:	210d      	movs	r1, #13
10011238:	4b05      	ldr	r3, [pc, #20]	; (10011250 <gapc_param_update_cfm_handler+0x48>)
1001123a:	7105      	strb	r5, [r0, #4]
1001123c:	7282      	strb	r2, [r0, #10]
1001123e:	71c4      	strb	r4, [r0, #7]
10011240:	4798      	blx	r3
10011242:	1c20      	adds	r0, r4, #0
10011244:	bd38      	pop	{r3, r4, r5, pc}
10011246:	46c0      	nop			; (mov r8, r8)
10011248:	1001b62c 	.word	0x1001b62c
1001124c:	1001b2bc 	.word	0x1001b2bc
10011250:	10010871 	.word	0x10010871

10011254 <gapc_param_updated_ind>:
10011254:	2300      	movs	r3, #0
10011256:	0a00      	lsrs	r0, r0, #8
10011258:	8010      	strh	r0, [r2, #0]
1001125a:	7093      	strb	r3, [r2, #2]
1001125c:	784b      	ldrb	r3, [r1, #1]
1001125e:	7808      	ldrb	r0, [r1, #0]
10011260:	021b      	lsls	r3, r3, #8
10011262:	4303      	orrs	r3, r0
10011264:	8093      	strh	r3, [r2, #4]
10011266:	78cb      	ldrb	r3, [r1, #3]
10011268:	7888      	ldrb	r0, [r1, #2]
1001126a:	021b      	lsls	r3, r3, #8
1001126c:	4303      	orrs	r3, r0
1001126e:	80d3      	strh	r3, [r2, #6]
10011270:	794b      	ldrb	r3, [r1, #5]
10011272:	7909      	ldrb	r1, [r1, #4]
10011274:	021b      	lsls	r3, r3, #8
10011276:	430b      	orrs	r3, r1
10011278:	2007      	movs	r0, #7
1001127a:	8113      	strh	r3, [r2, #8]
1001127c:	4770      	bx	lr

1001127e <gapc_param_updated_req_ind>:
1001127e:	0a00      	lsrs	r0, r0, #8
10011280:	8010      	strh	r0, [r2, #0]
10011282:	784b      	ldrb	r3, [r1, #1]
10011284:	7808      	ldrb	r0, [r1, #0]
10011286:	021b      	lsls	r3, r3, #8
10011288:	4303      	orrs	r3, r0
1001128a:	8053      	strh	r3, [r2, #2]
1001128c:	78cb      	ldrb	r3, [r1, #3]
1001128e:	7888      	ldrb	r0, [r1, #2]
10011290:	021b      	lsls	r3, r3, #8
10011292:	4303      	orrs	r3, r0
10011294:	8093      	strh	r3, [r2, #4]
10011296:	794b      	ldrb	r3, [r1, #5]
10011298:	7908      	ldrb	r0, [r1, #4]
1001129a:	021b      	lsls	r3, r3, #8
1001129c:	4303      	orrs	r3, r0
1001129e:	80d3      	strh	r3, [r2, #6]
100112a0:	79cb      	ldrb	r3, [r1, #7]
100112a2:	7989      	ldrb	r1, [r1, #6]
100112a4:	021b      	lsls	r3, r3, #8
100112a6:	430b      	orrs	r3, r1
100112a8:	2008      	movs	r0, #8
100112aa:	8113      	strh	r3, [r2, #8]
100112ac:	4770      	bx	lr
	...

100112b0 <gapc_dev_info_req_ind_handler>:
100112b0:	b508      	push	{r3, lr}
100112b2:	1c0b      	adds	r3, r1, #0
100112b4:	0a01      	lsrs	r1, r0, #8
100112b6:	8011      	strh	r1, [r2, #0]
100112b8:	7818      	ldrb	r0, [r3, #0]
100112ba:	7090      	strb	r0, [r2, #2]
100112bc:	2800      	cmp	r0, #0
100112be:	d104      	bne.n	100112ca <gapc_dev_info_req_ind_handler+0x1a>
100112c0:	4b03      	ldr	r3, [pc, #12]	; (100112d0 <gapc_dev_info_req_ind_handler+0x20>)
100112c2:	33aa      	adds	r3, #170	; 0xaa
100112c4:	881b      	ldrh	r3, [r3, #0]
100112c6:	2b00      	cmp	r3, #0
100112c8:	d001      	beq.n	100112ce <gapc_dev_info_req_ind_handler+0x1e>
100112ca:	4b02      	ldr	r3, [pc, #8]	; (100112d4 <gapc_dev_info_req_ind_handler+0x24>)
100112cc:	4798      	blx	r3
100112ce:	bd08      	pop	{r3, pc}
100112d0:	1001b34e 	.word	0x1001b34e
100112d4:	10010981 	.word	0x10010981

100112d8 <gapc_sec_req_ind>:
100112d8:	0a00      	lsrs	r0, r0, #8
100112da:	8010      	strh	r0, [r2, #0]
100112dc:	7809      	ldrb	r1, [r1, #0]
100112de:	2301      	movs	r3, #1
100112e0:	1c08      	adds	r0, r1, #0
100112e2:	0889      	lsrs	r1, r1, #2
100112e4:	4018      	ands	r0, r3
100112e6:	400b      	ands	r3, r1
100112e8:	70d0      	strb	r0, [r2, #3]
100112ea:	7113      	strb	r3, [r2, #4]
100112ec:	4770      	bx	lr

100112ee <gapc_sign_counter_ind_handler>:
100112ee:	0a00      	lsrs	r0, r0, #8
100112f0:	8010      	strh	r0, [r2, #0]
100112f2:	784b      	ldrb	r3, [r1, #1]
100112f4:	0218      	lsls	r0, r3, #8
100112f6:	788b      	ldrb	r3, [r1, #2]
100112f8:	041b      	lsls	r3, r3, #16
100112fa:	4303      	orrs	r3, r0
100112fc:	7808      	ldrb	r0, [r1, #0]
100112fe:	4303      	orrs	r3, r0
10011300:	78c8      	ldrb	r0, [r1, #3]
10011302:	0600      	lsls	r0, r0, #24
10011304:	4303      	orrs	r3, r0
10011306:	6053      	str	r3, [r2, #4]
10011308:	794b      	ldrb	r3, [r1, #5]
1001130a:	0218      	lsls	r0, r3, #8
1001130c:	798b      	ldrb	r3, [r1, #6]
1001130e:	041b      	lsls	r3, r3, #16
10011310:	4303      	orrs	r3, r0
10011312:	7908      	ldrb	r0, [r1, #4]
10011314:	79c9      	ldrb	r1, [r1, #7]
10011316:	4303      	orrs	r3, r0
10011318:	0609      	lsls	r1, r1, #24
1001131a:	430b      	orrs	r3, r1
1001131c:	2000      	movs	r0, #0
1001131e:	6093      	str	r3, [r2, #8]
10011320:	4770      	bx	lr
	...

10011324 <gapc_peer_att_info_ind_handler>:
10011324:	b510      	push	{r4, lr}
10011326:	0a00      	lsrs	r0, r0, #8
10011328:	8010      	strh	r0, [r2, #0]
1001132a:	7808      	ldrb	r0, [r1, #0]
1001132c:	7090      	strb	r0, [r2, #2]
1001132e:	788b      	ldrb	r3, [r1, #2]
10011330:	784c      	ldrb	r4, [r1, #1]
10011332:	021b      	lsls	r3, r3, #8
10011334:	4323      	orrs	r3, r4
10011336:	8093      	strh	r3, [r2, #4]
10011338:	2801      	cmp	r0, #1
1001133a:	d027      	beq.n	1001138c <gapc_peer_att_info_ind_handler+0x68>
1001133c:	2800      	cmp	r0, #0
1001133e:	d017      	beq.n	10011370 <gapc_peer_att_info_ind_handler+0x4c>
10011340:	2802      	cmp	r0, #2
10011342:	d12a      	bne.n	1001139a <gapc_peer_att_info_ind_handler+0x76>
10011344:	790b      	ldrb	r3, [r1, #4]
10011346:	78c8      	ldrb	r0, [r1, #3]
10011348:	021b      	lsls	r3, r3, #8
1001134a:	4303      	orrs	r3, r0
1001134c:	8113      	strh	r3, [r2, #8]
1001134e:	798b      	ldrb	r3, [r1, #6]
10011350:	7948      	ldrb	r0, [r1, #5]
10011352:	021b      	lsls	r3, r3, #8
10011354:	4303      	orrs	r3, r0
10011356:	80d3      	strh	r3, [r2, #6]
10011358:	7a0b      	ldrb	r3, [r1, #8]
1001135a:	79c8      	ldrb	r0, [r1, #7]
1001135c:	021b      	lsls	r3, r3, #8
1001135e:	4303      	orrs	r3, r0
10011360:	8193      	strh	r3, [r2, #12]
10011362:	7a8b      	ldrb	r3, [r1, #10]
10011364:	7a49      	ldrb	r1, [r1, #9]
10011366:	021b      	lsls	r3, r3, #8
10011368:	430b      	orrs	r3, r1
1001136a:	8153      	strh	r3, [r2, #10]
1001136c:	2306      	movs	r3, #6
1001136e:	e013      	b.n	10011398 <gapc_peer_att_info_ind_handler+0x74>
10011370:	1c14      	adds	r4, r2, #0
10011372:	1c20      	adds	r0, r4, #0
10011374:	790a      	ldrb	r2, [r1, #4]
10011376:	78cb      	ldrb	r3, [r1, #3]
10011378:	0212      	lsls	r2, r2, #8
1001137a:	431a      	orrs	r2, r3
1001137c:	80e2      	strh	r2, [r4, #6]
1001137e:	4b07      	ldr	r3, [pc, #28]	; (1001139c <gapc_peer_att_info_ind_handler+0x78>)
10011380:	3008      	adds	r0, #8
10011382:	3105      	adds	r1, #5
10011384:	4798      	blx	r3
10011386:	2302      	movs	r3, #2
10011388:	70a3      	strb	r3, [r4, #2]
1001138a:	e006      	b.n	1001139a <gapc_peer_att_info_ind_handler+0x76>
1001138c:	790b      	ldrb	r3, [r1, #4]
1001138e:	78c9      	ldrb	r1, [r1, #3]
10011390:	021b      	lsls	r3, r3, #8
10011392:	430b      	orrs	r3, r1
10011394:	80d3      	strh	r3, [r2, #6]
10011396:	2305      	movs	r3, #5
10011398:	7093      	strb	r3, [r2, #2]
1001139a:	bd10      	pop	{r4, pc}
1001139c:	100165c7 	.word	0x100165c7

100113a0 <gapc_con_channel_map_ind_handler>:
100113a0:	b508      	push	{r3, lr}
100113a2:	2300      	movs	r3, #0
100113a4:	0a00      	lsrs	r0, r0, #8
100113a6:	7013      	strb	r3, [r2, #0]
100113a8:	8050      	strh	r0, [r2, #2]
100113aa:	4b02      	ldr	r3, [pc, #8]	; (100113b4 <gapc_con_channel_map_ind_handler+0x14>)
100113ac:	1d10      	adds	r0, r2, #4
100113ae:	2205      	movs	r2, #5
100113b0:	4798      	blx	r3
100113b2:	bd08      	pop	{r3, pc}
100113b4:	100165c7 	.word	0x100165c7

100113b8 <gapc_lecb_connected>:
100113b8:	7843      	ldrb	r3, [r0, #1]
100113ba:	7802      	ldrb	r2, [r0, #0]
100113bc:	021b      	lsls	r3, r3, #8
100113be:	4313      	orrs	r3, r2
100113c0:	800b      	strh	r3, [r1, #0]
100113c2:	78c3      	ldrb	r3, [r0, #3]
100113c4:	7882      	ldrb	r2, [r0, #2]
100113c6:	021b      	lsls	r3, r3, #8
100113c8:	4313      	orrs	r3, r2
100113ca:	804b      	strh	r3, [r1, #2]
100113cc:	7943      	ldrb	r3, [r0, #5]
100113ce:	7902      	ldrb	r2, [r0, #4]
100113d0:	021b      	lsls	r3, r3, #8
100113d2:	4313      	orrs	r3, r2
100113d4:	808b      	strh	r3, [r1, #4]
100113d6:	79c3      	ldrb	r3, [r0, #7]
100113d8:	7982      	ldrb	r2, [r0, #6]
100113da:	021b      	lsls	r3, r3, #8
100113dc:	4313      	orrs	r3, r2
100113de:	80cb      	strh	r3, [r1, #6]
100113e0:	2300      	movs	r3, #0
100113e2:	720b      	strb	r3, [r1, #8]
100113e4:	4770      	bx	lr

100113e6 <gapc_lecb_disconnected>:
100113e6:	7843      	ldrb	r3, [r0, #1]
100113e8:	7802      	ldrb	r2, [r0, #0]
100113ea:	021b      	lsls	r3, r3, #8
100113ec:	4313      	orrs	r3, r2
100113ee:	800b      	strh	r3, [r1, #0]
100113f0:	78c3      	ldrb	r3, [r0, #3]
100113f2:	7882      	ldrb	r2, [r0, #2]
100113f4:	021b      	lsls	r3, r3, #8
100113f6:	4313      	orrs	r3, r2
100113f8:	804b      	strh	r3, [r1, #2]
100113fa:	4770      	bx	lr

100113fc <gapc_lecb_connect_req_ind>:
100113fc:	7843      	ldrb	r3, [r0, #1]
100113fe:	7802      	ldrb	r2, [r0, #0]
10011400:	021b      	lsls	r3, r3, #8
10011402:	4313      	orrs	r3, r2
10011404:	800b      	strh	r3, [r1, #0]
10011406:	78c3      	ldrb	r3, [r0, #3]
10011408:	7882      	ldrb	r2, [r0, #2]
1001140a:	021b      	lsls	r3, r3, #8
1001140c:	4313      	orrs	r3, r2
1001140e:	804b      	strh	r3, [r1, #2]
10011410:	7943      	ldrb	r3, [r0, #5]
10011412:	7902      	ldrb	r2, [r0, #4]
10011414:	021b      	lsls	r3, r3, #8
10011416:	4313      	orrs	r3, r2
10011418:	808b      	strh	r3, [r1, #4]
1001141a:	79c3      	ldrb	r3, [r0, #7]
1001141c:	7982      	ldrb	r2, [r0, #6]
1001141e:	021b      	lsls	r3, r3, #8
10011420:	4313      	orrs	r3, r2
10011422:	80cb      	strh	r3, [r1, #6]
10011424:	4770      	bx	lr

10011426 <gapc_lecb_add_credit_resp_handler>:
10011426:	7843      	ldrb	r3, [r0, #1]
10011428:	7802      	ldrb	r2, [r0, #0]
1001142a:	021b      	lsls	r3, r3, #8
1001142c:	4313      	orrs	r3, r2
1001142e:	800b      	strh	r3, [r1, #0]
10011430:	78c3      	ldrb	r3, [r0, #3]
10011432:	7882      	ldrb	r2, [r0, #2]
10011434:	021b      	lsls	r3, r3, #8
10011436:	4313      	orrs	r3, r2
10011438:	804b      	strh	r3, [r1, #2]
1001143a:	7943      	ldrb	r3, [r0, #5]
1001143c:	7902      	ldrb	r2, [r0, #4]
1001143e:	021b      	lsls	r3, r3, #8
10011440:	4313      	orrs	r3, r2
10011442:	808b      	strh	r3, [r1, #4]
10011444:	4770      	bx	lr
	...

10011448 <gapm_reset_req_handler>:
10011448:	b573      	push	{r0, r1, r4, r5, r6, lr}
1001144a:	466b      	mov	r3, sp
1001144c:	4915      	ldr	r1, [pc, #84]	; (100114a4 <gapm_reset_req_handler+0x5c>)
1001144e:	4816      	ldr	r0, [pc, #88]	; (100114a8 <gapm_reset_req_handler+0x60>)
10011450:	880c      	ldrh	r4, [r1, #0]
10011452:	8809      	ldrh	r1, [r1, #0]
10011454:	1ddd      	adds	r5, r3, #7
10011456:	0a09      	lsrs	r1, r1, #8
10011458:	2300      	movs	r3, #0
1001145a:	2202      	movs	r2, #2
1001145c:	7141      	strb	r1, [r0, #5]
1001145e:	26d0      	movs	r6, #208	; 0xd0
10011460:	2101      	movs	r1, #1
10011462:	7104      	strb	r4, [r0, #4]
10011464:	4c11      	ldr	r4, [pc, #68]	; (100114ac <gapm_reset_req_handler+0x64>)
10011466:	702b      	strb	r3, [r5, #0]
10011468:	7002      	strb	r2, [r0, #0]
1001146a:	70c3      	strb	r3, [r0, #3]
1001146c:	320b      	adds	r2, #11
1001146e:	7201      	strb	r1, [r0, #8]
10011470:	7181      	strb	r1, [r0, #6]
10011472:	71c3      	strb	r3, [r0, #7]
10011474:	3108      	adds	r1, #8
10011476:	4b0e      	ldr	r3, [pc, #56]	; (100114b0 <gapm_reset_req_handler+0x68>)
10011478:	0136      	lsls	r6, r6, #4
1001147a:	7042      	strb	r2, [r0, #1]
1001147c:	7082      	strb	r2, [r0, #2]
1001147e:	80a2      	strh	r2, [r4, #4]
10011480:	8026      	strh	r6, [r4, #0]
10011482:	4798      	blx	r3
10011484:	1c28      	adds	r0, r5, #0
10011486:	4b0b      	ldr	r3, [pc, #44]	; (100114b4 <gapm_reset_req_handler+0x6c>)
10011488:	4798      	blx	r3
1001148a:	782b      	ldrb	r3, [r5, #0]
1001148c:	20e2      	movs	r0, #226	; 0xe2
1001148e:	2b00      	cmp	r3, #0
10011490:	d106      	bne.n	100114a0 <gapm_reset_req_handler+0x58>
10011492:	68a3      	ldr	r3, [r4, #8]
10011494:	20e2      	movs	r0, #226	; 0xe2
10011496:	781a      	ldrb	r2, [r3, #0]
10011498:	785b      	ldrb	r3, [r3, #1]
1001149a:	2a01      	cmp	r2, #1
1001149c:	d100      	bne.n	100114a0 <gapm_reset_req_handler+0x58>
1001149e:	1c18      	adds	r0, r3, #0
100114a0:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
100114a2:	46c0      	nop			; (mov r8, r8)
100114a4:	1001b2bc 	.word	0x1001b2bc
100114a8:	1001b62c 	.word	0x1001b62c
100114ac:	1001b2b0 	.word	0x1001b2b0
100114b0:	10010871 	.word	0x10010871
100114b4:	100108d5 	.word	0x100108d5

100114b8 <gapm_set_dev_config_cmd_handler>:
100114b8:	b5f0      	push	{r4, r5, r6, r7, lr}
100114ba:	b089      	sub	sp, #36	; 0x24
100114bc:	9303      	str	r3, [sp, #12]
100114be:	ab0e      	add	r3, sp, #56	; 0x38
100114c0:	781b      	ldrb	r3, [r3, #0]
100114c2:	4c37      	ldr	r4, [pc, #220]	; (100115a0 <gapm_set_dev_config_cmd_handler+0xe8>)
100114c4:	9304      	str	r3, [sp, #16]
100114c6:	ab0f      	add	r3, sp, #60	; 0x3c
100114c8:	781b      	ldrb	r3, [r3, #0]
100114ca:	270d      	movs	r7, #13
100114cc:	9305      	str	r3, [sp, #20]
100114ce:	ab10      	add	r3, sp, #64	; 0x40
100114d0:	881b      	ldrh	r3, [r3, #0]
100114d2:	72a1      	strb	r1, [r4, #10]
100114d4:	9300      	str	r3, [sp, #0]
100114d6:	ab11      	add	r3, sp, #68	; 0x44
100114d8:	881b      	ldrh	r3, [r3, #0]
100114da:	0a09      	lsrs	r1, r1, #8
100114dc:	9301      	str	r3, [sp, #4]
100114de:	ab12      	add	r3, sp, #72	; 0x48
100114e0:	881b      	ldrh	r3, [r3, #0]
100114e2:	7260      	strb	r0, [r4, #9]
100114e4:	9302      	str	r3, [sp, #8]
100114e6:	ab06      	add	r3, sp, #24
100114e8:	1dde      	adds	r6, r3, #7
100114ea:	2300      	movs	r3, #0
100114ec:	7033      	strb	r3, [r6, #0]
100114ee:	2304      	movs	r3, #4
100114f0:	7023      	strb	r3, [r4, #0]
100114f2:	2300      	movs	r3, #0
100114f4:	70e3      	strb	r3, [r4, #3]
100114f6:	4b2b      	ldr	r3, [pc, #172]	; (100115a4 <gapm_set_dev_config_cmd_handler+0xec>)
100114f8:	72e1      	strb	r1, [r4, #11]
100114fa:	881d      	ldrh	r5, [r3, #0]
100114fc:	881b      	ldrh	r3, [r3, #0]
100114fe:	1c11      	adds	r1, r2, #0
10011500:	0a1b      	lsrs	r3, r3, #8
10011502:	7163      	strb	r3, [r4, #5]
10011504:	2303      	movs	r3, #3
10011506:	7125      	strb	r5, [r4, #4]
10011508:	2206      	movs	r2, #6
1001150a:	4d27      	ldr	r5, [pc, #156]	; (100115a8 <gapm_set_dev_config_cmd_handler+0xf0>)
1001150c:	4827      	ldr	r0, [pc, #156]	; (100115ac <gapm_set_dev_config_cmd_handler+0xf4>)
1001150e:	7223      	strb	r3, [r4, #8]
10011510:	7067      	strb	r7, [r4, #1]
10011512:	70a7      	strb	r7, [r4, #2]
10011514:	47a8      	blx	r5
10011516:	9903      	ldr	r1, [sp, #12]
10011518:	2210      	movs	r2, #16
1001151a:	4825      	ldr	r0, [pc, #148]	; (100115b0 <gapm_set_dev_config_cmd_handler+0xf8>)
1001151c:	47a8      	blx	r5
1001151e:	466a      	mov	r2, sp
10011520:	7c12      	ldrb	r2, [r2, #16]
10011522:	1ce3      	adds	r3, r4, #3
10011524:	77da      	strb	r2, [r3, #31]
10011526:	466a      	mov	r2, sp
10011528:	7d12      	ldrb	r2, [r2, #20]
1001152a:	1d23      	adds	r3, r4, #4
1001152c:	77da      	strb	r2, [r3, #31]
1001152e:	466a      	mov	r2, sp
10011530:	7812      	ldrb	r2, [r2, #0]
10011532:	1d63      	adds	r3, r4, #5
10011534:	77da      	strb	r2, [r3, #31]
10011536:	9b00      	ldr	r3, [sp, #0]
10011538:	1da2      	adds	r2, r4, #6
1001153a:	0a1b      	lsrs	r3, r3, #8
1001153c:	77d3      	strb	r3, [r2, #31]
1001153e:	466a      	mov	r2, sp
10011540:	7912      	ldrb	r2, [r2, #4]
10011542:	1de3      	adds	r3, r4, #7
10011544:	77da      	strb	r2, [r3, #31]
10011546:	1c22      	adds	r2, r4, #0
10011548:	9b01      	ldr	r3, [sp, #4]
1001154a:	3208      	adds	r2, #8
1001154c:	0a1b      	lsrs	r3, r3, #8
1001154e:	77d3      	strb	r3, [r2, #31]
10011550:	466a      	mov	r2, sp
10011552:	1c23      	adds	r3, r4, #0
10011554:	7a12      	ldrb	r2, [r2, #8]
10011556:	3328      	adds	r3, #40	; 0x28
10011558:	701a      	strb	r2, [r3, #0]
1001155a:	1c22      	adds	r2, r4, #0
1001155c:	9b02      	ldr	r3, [sp, #8]
1001155e:	3229      	adds	r2, #41	; 0x29
10011560:	0a1b      	lsrs	r3, r3, #8
10011562:	7013      	strb	r3, [r2, #0]
10011564:	23d0      	movs	r3, #208	; 0xd0
10011566:	4d13      	ldr	r5, [pc, #76]	; (100115b4 <gapm_set_dev_config_cmd_handler+0xfc>)
10011568:	011b      	lsls	r3, r3, #4
1001156a:	802b      	strh	r3, [r5, #0]
1001156c:	2322      	movs	r3, #34	; 0x22
1001156e:	71a3      	strb	r3, [r4, #6]
10011570:	2300      	movs	r3, #0
10011572:	212a      	movs	r1, #42	; 0x2a
10011574:	71e3      	strb	r3, [r4, #7]
10011576:	1c20      	adds	r0, r4, #0
10011578:	4b0f      	ldr	r3, [pc, #60]	; (100115b8 <gapm_set_dev_config_cmd_handler+0x100>)
1001157a:	80af      	strh	r7, [r5, #4]
1001157c:	4798      	blx	r3
1001157e:	1c30      	adds	r0, r6, #0
10011580:	4b0e      	ldr	r3, [pc, #56]	; (100115bc <gapm_set_dev_config_cmd_handler+0x104>)
10011582:	4798      	blx	r3
10011584:	7833      	ldrb	r3, [r6, #0]
10011586:	20e2      	movs	r0, #226	; 0xe2
10011588:	2b00      	cmp	r3, #0
1001158a:	d106      	bne.n	1001159a <gapm_set_dev_config_cmd_handler+0xe2>
1001158c:	68ab      	ldr	r3, [r5, #8]
1001158e:	20e2      	movs	r0, #226	; 0xe2
10011590:	781a      	ldrb	r2, [r3, #0]
10011592:	785b      	ldrb	r3, [r3, #1]
10011594:	2a03      	cmp	r2, #3
10011596:	d100      	bne.n	1001159a <gapm_set_dev_config_cmd_handler+0xe2>
10011598:	1c18      	adds	r0, r3, #0
1001159a:	b009      	add	sp, #36	; 0x24
1001159c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001159e:	46c0      	nop			; (mov r8, r8)
100115a0:	1001b62c 	.word	0x1001b62c
100115a4:	1001b2bc 	.word	0x1001b2bc
100115a8:	100165c7 	.word	0x100165c7
100115ac:	1001b638 	.word	0x1001b638
100115b0:	1001b63e 	.word	0x1001b63e
100115b4:	1001b2b0 	.word	0x1001b2b0
100115b8:	10010871 	.word	0x10010871
100115bc:	100108d5 	.word	0x100108d5

100115c0 <gapm_get_dev_config_cmd_handler>:
100115c0:	4684      	mov	ip, r0
100115c2:	4663      	mov	r3, ip
100115c4:	b5f0      	push	{r4, r5, r6, r7, lr}
100115c6:	b085      	sub	sp, #20
100115c8:	9100      	str	r1, [sp, #0]
100115ca:	20cf      	movs	r0, #207	; 0xcf
100115cc:	2b01      	cmp	r3, #1
100115ce:	d854      	bhi.n	1001167a <gapm_get_dev_config_cmd_handler+0xba>
100115d0:	2900      	cmp	r1, #0
100115d2:	d052      	beq.n	1001167a <gapm_get_dev_config_cmd_handler+0xba>
100115d4:	2200      	movs	r2, #0
100115d6:	492a      	ldr	r1, [pc, #168]	; (10011680 <gapm_get_dev_config_cmd_handler+0xc0>)
100115d8:	ab02      	add	r3, sp, #8
100115da:	880c      	ldrh	r4, [r1, #0]
100115dc:	8809      	ldrh	r1, [r1, #0]
100115de:	1d9f      	adds	r7, r3, #6
100115e0:	719a      	strb	r2, [r3, #6]
100115e2:	4b28      	ldr	r3, [pc, #160]	; (10011684 <gapm_get_dev_config_cmd_handler+0xc4>)
100115e4:	0a09      	lsrs	r1, r1, #8
100115e6:	250d      	movs	r5, #13
100115e8:	2606      	movs	r6, #6
100115ea:	7159      	strb	r1, [r3, #5]
100115ec:	4661      	mov	r1, ip
100115ee:	701e      	strb	r6, [r3, #0]
100115f0:	705d      	strb	r5, [r3, #1]
100115f2:	709d      	strb	r5, [r3, #2]
100115f4:	70da      	strb	r2, [r3, #3]
100115f6:	711c      	strb	r4, [r3, #4]
100115f8:	2901      	cmp	r1, #1
100115fa:	d13e      	bne.n	1001167a <gapm_get_dev_config_cmd_handler+0xba>
100115fc:	21d0      	movs	r1, #208	; 0xd0
100115fe:	4c22      	ldr	r4, [pc, #136]	; (10011688 <gapm_get_dev_config_cmd_handler+0xc8>)
10011600:	0109      	lsls	r1, r1, #4
10011602:	8061      	strh	r1, [r4, #2]
10011604:	4921      	ldr	r1, [pc, #132]	; (1001168c <gapm_get_dev_config_cmd_handler+0xcc>)
10011606:	71da      	strb	r2, [r3, #7]
10011608:	8021      	strh	r1, [r4, #0]
1001160a:	4661      	mov	r1, ip
1001160c:	721e      	strb	r6, [r3, #8]
1001160e:	7199      	strb	r1, [r3, #6]
10011610:	1c18      	adds	r0, r3, #0
10011612:	2109      	movs	r1, #9
10011614:	4b1e      	ldr	r3, [pc, #120]	; (10011690 <gapm_get_dev_config_cmd_handler+0xd0>)
10011616:	80a5      	strh	r5, [r4, #4]
10011618:	4798      	blx	r3
1001161a:	1c38      	adds	r0, r7, #0
1001161c:	4b1d      	ldr	r3, [pc, #116]	; (10011694 <gapm_get_dev_config_cmd_handler+0xd4>)
1001161e:	4798      	blx	r3
10011620:	783b      	ldrb	r3, [r7, #0]
10011622:	20e2      	movs	r0, #226	; 0xe2
10011624:	9301      	str	r3, [sp, #4]
10011626:	2b00      	cmp	r3, #0
10011628:	d127      	bne.n	1001167a <gapm_get_dev_config_cmd_handler+0xba>
1001162a:	8821      	ldrh	r1, [r4, #0]
1001162c:	4a1a      	ldr	r2, [pc, #104]	; (10011698 <gapm_get_dev_config_cmd_handler+0xd8>)
1001162e:	68a7      	ldr	r7, [r4, #8]
10011630:	3b01      	subs	r3, #1
10011632:	4291      	cmp	r1, r2
10011634:	d001      	beq.n	1001163a <gapm_get_dev_config_cmd_handler+0x7a>
10011636:	8023      	strh	r3, [r4, #0]
10011638:	e01a      	b.n	10011670 <gapm_get_dev_config_cmd_handler+0xb0>
1001163a:	8063      	strh	r3, [r4, #2]
1001163c:	9b00      	ldr	r3, [sp, #0]
1001163e:	1c39      	adds	r1, r7, #0
10011640:	1c58      	adds	r0, r3, #1
10011642:	1c32      	adds	r2, r6, #0
10011644:	4b15      	ldr	r3, [pc, #84]	; (1001169c <gapm_get_dev_config_cmd_handler+0xdc>)
10011646:	4798      	blx	r3
10011648:	79bb      	ldrb	r3, [r7, #6]
1001164a:	9a00      	ldr	r2, [sp, #0]
1001164c:	7013      	strb	r3, [r2, #0]
1001164e:	23d0      	movs	r3, #208	; 0xd0
10011650:	011b      	lsls	r3, r3, #4
10011652:	8023      	strh	r3, [r4, #0]
10011654:	ab02      	add	r3, sp, #8
10011656:	80a5      	strh	r5, [r4, #4]
10011658:	1ddd      	adds	r5, r3, #7
1001165a:	466b      	mov	r3, sp
1001165c:	791b      	ldrb	r3, [r3, #4]
1001165e:	1c28      	adds	r0, r5, #0
10011660:	702b      	strb	r3, [r5, #0]
10011662:	4b0c      	ldr	r3, [pc, #48]	; (10011694 <gapm_get_dev_config_cmd_handler+0xd4>)
10011664:	4798      	blx	r3
10011666:	782b      	ldrb	r3, [r5, #0]
10011668:	20d0      	movs	r0, #208	; 0xd0
1001166a:	2b00      	cmp	r3, #0
1001166c:	d105      	bne.n	1001167a <gapm_get_dev_config_cmd_handler+0xba>
1001166e:	68a7      	ldr	r7, [r4, #8]
10011670:	783b      	ldrb	r3, [r7, #0]
10011672:	7878      	ldrb	r0, [r7, #1]
10011674:	2b06      	cmp	r3, #6
10011676:	d000      	beq.n	1001167a <gapm_get_dev_config_cmd_handler+0xba>
10011678:	20e2      	movs	r0, #226	; 0xe2
1001167a:	b005      	add	sp, #20
1001167c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001167e:	46c0      	nop			; (mov r8, r8)
10011680:	1001b2bc 	.word	0x1001b2bc
10011684:	1001b62c 	.word	0x1001b62c
10011688:	1001b2b0 	.word	0x1001b2b0
1001168c:	00000d08 	.word	0x00000d08
10011690:	10010871 	.word	0x10010871
10011694:	100108d5 	.word	0x100108d5
10011698:	0000ffff 	.word	0x0000ffff
1001169c:	100165c7 	.word	0x100165c7

100116a0 <gapm_cancel_cmd_handler>:
100116a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
100116a2:	4916      	ldr	r1, [pc, #88]	; (100116fc <gapm_cancel_cmd_handler+0x5c>)
100116a4:	4816      	ldr	r0, [pc, #88]	; (10011700 <gapm_cancel_cmd_handler+0x60>)
100116a6:	880c      	ldrh	r4, [r1, #0]
100116a8:	8809      	ldrh	r1, [r1, #0]
100116aa:	466b      	mov	r3, sp
100116ac:	0a09      	lsrs	r1, r1, #8
100116ae:	7141      	strb	r1, [r0, #5]
100116b0:	2102      	movs	r1, #2
100116b2:	2203      	movs	r2, #3
100116b4:	7201      	strb	r1, [r0, #8]
100116b6:	21d0      	movs	r1, #208	; 0xd0
100116b8:	1ddd      	adds	r5, r3, #7
100116ba:	2300      	movs	r3, #0
100116bc:	7104      	strb	r4, [r0, #4]
100116be:	4c11      	ldr	r4, [pc, #68]	; (10011704 <gapm_cancel_cmd_handler+0x64>)
100116c0:	7002      	strb	r2, [r0, #0]
100116c2:	0109      	lsls	r1, r1, #4
100116c4:	320a      	adds	r2, #10
100116c6:	702b      	strb	r3, [r5, #0]
100116c8:	7042      	strb	r2, [r0, #1]
100116ca:	7082      	strb	r2, [r0, #2]
100116cc:	70c3      	strb	r3, [r0, #3]
100116ce:	8021      	strh	r1, [r4, #0]
100116d0:	80a2      	strh	r2, [r4, #4]
100116d2:	71c3      	strb	r3, [r0, #7]
100116d4:	3a0c      	subs	r2, #12
100116d6:	2109      	movs	r1, #9
100116d8:	4b0b      	ldr	r3, [pc, #44]	; (10011708 <gapm_cancel_cmd_handler+0x68>)
100116da:	7182      	strb	r2, [r0, #6]
100116dc:	4798      	blx	r3
100116de:	1c28      	adds	r0, r5, #0
100116e0:	4b0a      	ldr	r3, [pc, #40]	; (1001170c <gapm_cancel_cmd_handler+0x6c>)
100116e2:	4798      	blx	r3
100116e4:	7828      	ldrb	r0, [r5, #0]
100116e6:	2800      	cmp	r0, #0
100116e8:	d001      	beq.n	100116ee <gapm_cancel_cmd_handler+0x4e>
100116ea:	20e2      	movs	r0, #226	; 0xe2
100116ec:	e004      	b.n	100116f8 <gapm_cancel_cmd_handler+0x58>
100116ee:	68a3      	ldr	r3, [r4, #8]
100116f0:	785b      	ldrb	r3, [r3, #1]
100116f2:	2b44      	cmp	r3, #68	; 0x44
100116f4:	d000      	beq.n	100116f8 <gapm_cancel_cmd_handler+0x58>
100116f6:	1c18      	adds	r0, r3, #0
100116f8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
100116fa:	46c0      	nop			; (mov r8, r8)
100116fc:	1001b2bc 	.word	0x1001b2bc
10011700:	1001b62c 	.word	0x1001b62c
10011704:	1001b2b0 	.word	0x1001b2b0
10011708:	10010871 	.word	0x10010871
1001170c:	100108d5 	.word	0x100108d5

10011710 <gapm_dev_bdaddr_ind_handler>:
10011710:	b538      	push	{r3, r4, r5, lr}
10011712:	1c05      	adds	r5, r0, #0
10011714:	1c0c      	adds	r4, r1, #0
10011716:	1c48      	adds	r0, r1, #1
10011718:	2206      	movs	r2, #6
1001171a:	1c29      	adds	r1, r5, #0
1001171c:	4b02      	ldr	r3, [pc, #8]	; (10011728 <gapm_dev_bdaddr_ind_handler+0x18>)
1001171e:	4798      	blx	r3
10011720:	79ab      	ldrb	r3, [r5, #6]
10011722:	2000      	movs	r0, #0
10011724:	7023      	strb	r3, [r4, #0]
10011726:	bd38      	pop	{r3, r4, r5, pc}
10011728:	100165c7 	.word	0x100165c7

1001172c <gapm_cmp_evt>:
1001172c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001172e:	7803      	ldrb	r3, [r0, #0]
10011730:	7845      	ldrb	r5, [r0, #1]
10011732:	3b0c      	subs	r3, #12
10011734:	1e18      	subs	r0, r3, #0
10011736:	280b      	cmp	r0, #11
10011738:	d900      	bls.n	1001173c <gapm_cmp_evt+0x10>
1001173a:	e08d      	b.n	10011858 <gapm_cmp_evt+0x12c>
1001173c:	1c0c      	adds	r4, r1, #0
1001173e:	f001 ff1d 	bl	1001357c <__gnu_thumb1_case_uqi>
10011742:	1952      	.short	0x1952
10011744:	068b1919 	.word	0x068b1919
10011748:	8b595906 	.word	0x8b595906
1001174c:	0d8b      	.short	0x0d8b
1001174e:	2300      	movs	r3, #0
10011750:	2d45      	cmp	r5, #69	; 0x45
10011752:	d000      	beq.n	10011756 <gapm_cmp_evt+0x2a>
10011754:	1c2b      	adds	r3, r5, #0
10011756:	7023      	strb	r3, [r4, #0]
10011758:	2002      	movs	r0, #2
1001175a:	e07e      	b.n	1001185a <gapm_cmp_evt+0x12e>
1001175c:	203b      	movs	r0, #59	; 0x3b
1001175e:	2d00      	cmp	r5, #0
10011760:	d100      	bne.n	10011764 <gapm_cmp_evt+0x38>
10011762:	e07a      	b.n	1001185a <gapm_cmp_evt+0x12e>
10011764:	700d      	strb	r5, [r1, #0]
10011766:	1c48      	adds	r0, r1, #1
10011768:	2210      	movs	r2, #16
1001176a:	2100      	movs	r1, #0
1001176c:	4b3b      	ldr	r3, [pc, #236]	; (1001185c <gapm_cmp_evt+0x130>)
1001176e:	4798      	blx	r3
10011770:	200f      	movs	r0, #15
10011772:	e072      	b.n	1001185a <gapm_cmp_evt+0x12e>
10011774:	2d00      	cmp	r5, #0
10011776:	d134      	bne.n	100117e2 <gapm_cmp_evt+0xb6>
10011778:	4b39      	ldr	r3, [pc, #228]	; (10011860 <gapm_cmp_evt+0x134>)
1001177a:	4798      	blx	r3
1001177c:	1e43      	subs	r3, r0, #1
1001177e:	b2db      	uxtb	r3, r3
10011780:	1c28      	adds	r0, r5, #0
10011782:	2b06      	cmp	r3, #6
10011784:	d869      	bhi.n	1001185a <gapm_cmp_evt+0x12e>
10011786:	466b      	mov	r3, sp
10011788:	4e36      	ldr	r6, [pc, #216]	; (10011864 <gapm_cmp_evt+0x138>)
1001178a:	1dd9      	adds	r1, r3, #7
1001178c:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
1001178e:	4b36      	ldr	r3, [pc, #216]	; (10011868 <gapm_cmp_evt+0x13c>)
10011790:	4798      	blx	r3
10011792:	2312      	movs	r3, #18
10011794:	4358      	muls	r0, r3
10011796:	4935      	ldr	r1, [pc, #212]	; (1001186c <gapm_cmp_evt+0x140>)
10011798:	1809      	adds	r1, r1, r0
1001179a:	1c0b      	adds	r3, r1, #0
1001179c:	894a      	ldrh	r2, [r1, #10]
1001179e:	3308      	adds	r3, #8
100117a0:	8122      	strh	r2, [r4, #8]
100117a2:	784f      	ldrb	r7, [r1, #1]
100117a4:	72a5      	strb	r5, [r4, #10]
100117a6:	7027      	strb	r7, [r4, #0]
100117a8:	898a      	ldrh	r2, [r1, #12]
100117aa:	1c60      	adds	r0, r4, #1
100117ac:	81a2      	strh	r2, [r4, #12]
100117ae:	88db      	ldrh	r3, [r3, #6]
100117b0:	3102      	adds	r1, #2
100117b2:	81e3      	strh	r3, [r4, #14]
100117b4:	89cb      	ldrh	r3, [r1, #14]
100117b6:	2206      	movs	r2, #6
100117b8:	8223      	strh	r3, [r4, #16]
100117ba:	4b2d      	ldr	r3, [pc, #180]	; (10011870 <gapm_cmp_evt+0x144>)
100117bc:	4798      	blx	r3
100117be:	2f00      	cmp	r7, #0
100117c0:	d00a      	beq.n	100117d8 <gapm_cmp_evt+0xac>
100117c2:	79a3      	ldrb	r3, [r4, #6]
100117c4:	223f      	movs	r2, #63	; 0x3f
100117c6:	1c19      	adds	r1, r3, #0
100117c8:	3501      	adds	r5, #1
100117ca:	4391      	bics	r1, r2
100117cc:	29c0      	cmp	r1, #192	; 0xc0
100117ce:	d003      	beq.n	100117d8 <gapm_cmp_evt+0xac>
100117d0:	065b      	lsls	r3, r3, #25
100117d2:	0fdb      	lsrs	r3, r3, #31
100117d4:	3502      	adds	r5, #2
100117d6:	1aed      	subs	r5, r5, r3
100117d8:	2301      	movs	r3, #1
100117da:	425b      	negs	r3, r3
100117dc:	7025      	strb	r5, [r4, #0]
100117de:	85b3      	strh	r3, [r6, #44]	; 0x2c
100117e0:	e038      	b.n	10011854 <gapm_cmp_evt+0x128>
100117e2:	700d      	strb	r5, [r1, #0]
100117e4:	e004      	b.n	100117f0 <gapm_cmp_evt+0xc4>
100117e6:	2300      	movs	r3, #0
100117e8:	2d45      	cmp	r5, #69	; 0x45
100117ea:	d000      	beq.n	100117ee <gapm_cmp_evt+0xc2>
100117ec:	1c2b      	adds	r3, r5, #0
100117ee:	7023      	strb	r3, [r4, #0]
100117f0:	2003      	movs	r0, #3
100117f2:	e032      	b.n	1001185a <gapm_cmp_evt+0x12e>
100117f4:	4e1b      	ldr	r6, [pc, #108]	; (10011864 <gapm_cmp_evt+0x138>)
100117f6:	2100      	movs	r1, #0
100117f8:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
100117fa:	4b1b      	ldr	r3, [pc, #108]	; (10011868 <gapm_cmp_evt+0x13c>)
100117fc:	4798      	blx	r3
100117fe:	2807      	cmp	r0, #7
10011800:	d818      	bhi.n	10011834 <gapm_cmp_evt+0x108>
10011802:	2301      	movs	r3, #1
10011804:	425b      	negs	r3, r3
10011806:	85b3      	strh	r3, [r6, #44]	; 0x2c
10011808:	3313      	adds	r3, #19
1001180a:	4358      	muls	r0, r3
1001180c:	4917      	ldr	r1, [pc, #92]	; (1001186c <gapm_cmp_evt+0x140>)
1001180e:	1809      	adds	r1, r1, r0
10011810:	1c0b      	adds	r3, r1, #0
10011812:	894a      	ldrh	r2, [r1, #10]
10011814:	3308      	adds	r3, #8
10011816:	8122      	strh	r2, [r4, #8]
10011818:	784a      	ldrb	r2, [r1, #1]
1001181a:	72a5      	strb	r5, [r4, #10]
1001181c:	7022      	strb	r2, [r4, #0]
1001181e:	898a      	ldrh	r2, [r1, #12]
10011820:	1c60      	adds	r0, r4, #1
10011822:	81a2      	strh	r2, [r4, #12]
10011824:	88db      	ldrh	r3, [r3, #6]
10011826:	3102      	adds	r1, #2
10011828:	81e3      	strh	r3, [r4, #14]
1001182a:	89cb      	ldrh	r3, [r1, #14]
1001182c:	2206      	movs	r2, #6
1001182e:	8223      	strh	r3, [r4, #16]
10011830:	4b0f      	ldr	r3, [pc, #60]	; (10011870 <gapm_cmp_evt+0x144>)
10011832:	4798      	blx	r3
10011834:	2200      	movs	r2, #0
10011836:	7823      	ldrb	r3, [r4, #0]
10011838:	4293      	cmp	r3, r2
1001183a:	d00a      	beq.n	10011852 <gapm_cmp_evt+0x126>
1001183c:	79a3      	ldrb	r3, [r4, #6]
1001183e:	323f      	adds	r2, #63	; 0x3f
10011840:	1c19      	adds	r1, r3, #0
10011842:	4391      	bics	r1, r2
10011844:	3a3e      	subs	r2, #62	; 0x3e
10011846:	29c0      	cmp	r1, #192	; 0xc0
10011848:	d003      	beq.n	10011852 <gapm_cmp_evt+0x126>
1001184a:	065b      	lsls	r3, r3, #25
1001184c:	0fdb      	lsrs	r3, r3, #31
1001184e:	3202      	adds	r2, #2
10011850:	1ad2      	subs	r2, r2, r3
10011852:	7022      	strb	r2, [r4, #0]
10011854:	2005      	movs	r0, #5
10011856:	e000      	b.n	1001185a <gapm_cmp_evt+0x12e>
10011858:	2000      	movs	r0, #0
1001185a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1001185c:	100165d9 	.word	0x100165d9
10011860:	10010a7d 	.word	0x10010a7d
10011864:	1001b34e 	.word	0x1001b34e
10011868:	10010a41 	.word	0x10010a41
1001186c:	1001b2be 	.word	0x1001b2be
10011870:	100165c7 	.word	0x100165c7

10011874 <gapm_start_adv_cmd_handler>:
10011874:	b5f0      	push	{r4, r5, r6, r7, lr}
10011876:	b089      	sub	sp, #36	; 0x24
10011878:	9303      	str	r3, [sp, #12]
1001187a:	ab0e      	add	r3, sp, #56	; 0x38
1001187c:	9102      	str	r1, [sp, #8]
1001187e:	cb02      	ldmia	r3!, {r1}
10011880:	aa08      	add	r2, sp, #32
10011882:	881b      	ldrh	r3, [r3, #0]
10011884:	4e3c      	ldr	r6, [pc, #240]	; (10011978 <gapm_start_adv_cmd_handler+0x104>)
10011886:	9300      	str	r3, [sp, #0]
10011888:	ab10      	add	r3, sp, #64	; 0x40
1001188a:	881b      	ldrh	r3, [r3, #0]
1001188c:	240d      	movs	r4, #13
1001188e:	469c      	mov	ip, r3
10011890:	ab11      	add	r3, sp, #68	; 0x44
10011892:	781b      	ldrb	r3, [r3, #0]
10011894:	9304      	str	r3, [sp, #16]
10011896:	ab12      	add	r3, sp, #72	; 0x48
10011898:	781b      	ldrb	r3, [r3, #0]
1001189a:	9305      	str	r3, [sp, #20]
1001189c:	ab13      	add	r3, sp, #76	; 0x4c
1001189e:	781b      	ldrb	r3, [r3, #0]
100118a0:	9306      	str	r3, [sp, #24]
100118a2:	ab14      	add	r3, sp, #80	; 0x50
100118a4:	781b      	ldrb	r3, [r3, #0]
100118a6:	9301      	str	r3, [sp, #4]
100118a8:	2319      	movs	r3, #25
100118aa:	189b      	adds	r3, r3, r2
100118ac:	7fdd      	ldrb	r5, [r3, #31]
100118ae:	ab18      	add	r3, sp, #96	; 0x60
100118b0:	881f      	ldrh	r7, [r3, #0]
100118b2:	ab19      	add	r3, sp, #100	; 0x64
100118b4:	781b      	ldrb	r3, [r3, #0]
100118b6:	8832      	ldrh	r2, [r6, #0]
100118b8:	9307      	str	r3, [sp, #28]
100118ba:	4b30      	ldr	r3, [pc, #192]	; (1001197c <gapm_start_adv_cmd_handler+0x108>)
100118bc:	8836      	ldrh	r6, [r6, #0]
100118be:	711a      	strb	r2, [r3, #4]
100118c0:	466a      	mov	r2, sp
100118c2:	7a12      	ldrb	r2, [r2, #8]
100118c4:	701c      	strb	r4, [r3, #0]
100118c6:	705c      	strb	r4, [r3, #1]
100118c8:	709c      	strb	r4, [r3, #2]
100118ca:	725a      	strb	r2, [r3, #9]
100118cc:	2400      	movs	r4, #0
100118ce:	466a      	mov	r2, sp
100118d0:	0a36      	lsrs	r6, r6, #8
100118d2:	70dc      	strb	r4, [r3, #3]
100118d4:	7218      	strb	r0, [r3, #8]
100118d6:	729c      	strb	r4, [r3, #10]
100118d8:	715e      	strb	r6, [r3, #5]
100118da:	72dc      	strb	r4, [r3, #11]
100118dc:	7812      	ldrb	r2, [r2, #0]
100118de:	380e      	subs	r0, #14
100118e0:	731a      	strb	r2, [r3, #12]
100118e2:	9a00      	ldr	r2, [sp, #0]
100118e4:	0a14      	lsrs	r4, r2, #8
100118e6:	4662      	mov	r2, ip
100118e8:	739a      	strb	r2, [r3, #14]
100118ea:	4662      	mov	r2, ip
100118ec:	735c      	strb	r4, [r3, #13]
100118ee:	0a14      	lsrs	r4, r2, #8
100118f0:	466a      	mov	r2, sp
100118f2:	7c12      	ldrb	r2, [r2, #16]
100118f4:	73dc      	strb	r4, [r3, #15]
100118f6:	741a      	strb	r2, [r3, #16]
100118f8:	1c1c      	adds	r4, r3, #0
100118fa:	2801      	cmp	r0, #1
100118fc:	d809      	bhi.n	10011912 <gapm_start_adv_cmd_handler+0x9e>
100118fe:	2900      	cmp	r1, #0
10011900:	d003      	beq.n	1001190a <gapm_start_adv_cmd_handler+0x96>
10011902:	481f      	ldr	r0, [pc, #124]	; (10011980 <gapm_start_adv_cmd_handler+0x10c>)
10011904:	2206      	movs	r2, #6
10011906:	4b1f      	ldr	r3, [pc, #124]	; (10011984 <gapm_start_adv_cmd_handler+0x110>)
10011908:	4798      	blx	r3
1001190a:	466b      	mov	r3, sp
1001190c:	7b1b      	ldrb	r3, [r3, #12]
1001190e:	75e3      	strb	r3, [r4, #23]
10011910:	e014      	b.n	1001193c <gapm_start_adv_cmd_handler+0xc8>
10011912:	466b      	mov	r3, sp
10011914:	7d1b      	ldrb	r3, [r3, #20]
10011916:	9915      	ldr	r1, [sp, #84]	; 0x54
10011918:	7463      	strb	r3, [r4, #17]
1001191a:	466b      	mov	r3, sp
1001191c:	7e1b      	ldrb	r3, [r3, #24]
1001191e:	9a01      	ldr	r2, [sp, #4]
10011920:	74a3      	strb	r3, [r4, #18]
10011922:	466b      	mov	r3, sp
10011924:	791b      	ldrb	r3, [r3, #4]
10011926:	4818      	ldr	r0, [pc, #96]	; (10011988 <gapm_start_adv_cmd_handler+0x114>)
10011928:	4e16      	ldr	r6, [pc, #88]	; (10011984 <gapm_start_adv_cmd_handler+0x110>)
1001192a:	74e3      	strb	r3, [r4, #19]
1001192c:	47b0      	blx	r6
1001192e:	1c23      	adds	r3, r4, #0
10011930:	4816      	ldr	r0, [pc, #88]	; (1001198c <gapm_start_adv_cmd_handler+0x118>)
10011932:	3330      	adds	r3, #48	; 0x30
10011934:	9917      	ldr	r1, [sp, #92]	; 0x5c
10011936:	1c2a      	adds	r2, r5, #0
10011938:	701d      	strb	r5, [r3, #0]
1001193a:	47b0      	blx	r6
1001193c:	1c22      	adds	r2, r4, #0
1001193e:	23a5      	movs	r3, #165	; 0xa5
10011940:	3250      	adds	r2, #80	; 0x50
10011942:	7013      	strb	r3, [r2, #0]
10011944:	1c22      	adds	r2, r4, #0
10011946:	3251      	adds	r2, #81	; 0x51
10011948:	7013      	strb	r3, [r2, #0]
1001194a:	1c23      	adds	r3, r4, #0
1001194c:	1c22      	adds	r2, r4, #0
1001194e:	3352      	adds	r3, #82	; 0x52
10011950:	701f      	strb	r7, [r3, #0]
10011952:	3253      	adds	r2, #83	; 0x53
10011954:	0a3b      	lsrs	r3, r7, #8
10011956:	7013      	strb	r3, [r2, #0]
10011958:	466a      	mov	r2, sp
1001195a:	1c23      	adds	r3, r4, #0
1001195c:	7f12      	ldrb	r2, [r2, #28]
1001195e:	3354      	adds	r3, #84	; 0x54
10011960:	701a      	strb	r2, [r3, #0]
10011962:	234d      	movs	r3, #77	; 0x4d
10011964:	2500      	movs	r5, #0
10011966:	71a3      	strb	r3, [r4, #6]
10011968:	1c20      	adds	r0, r4, #0
1001196a:	2155      	movs	r1, #85	; 0x55
1001196c:	4b08      	ldr	r3, [pc, #32]	; (10011990 <gapm_start_adv_cmd_handler+0x11c>)
1001196e:	71e5      	strb	r5, [r4, #7]
10011970:	4798      	blx	r3
10011972:	1c28      	adds	r0, r5, #0
10011974:	b009      	add	sp, #36	; 0x24
10011976:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011978:	1001b2bc 	.word	0x1001b2bc
1001197c:	1001b62c 	.word	0x1001b62c
10011980:	1001b63d 	.word	0x1001b63d
10011984:	100165c7 	.word	0x100165c7
10011988:	1001b640 	.word	0x1001b640
1001198c:	1001b65d 	.word	0x1001b65d
10011990:	10010871 	.word	0x10010871

10011994 <get_gap_local_addr_type>:
10011994:	4b04      	ldr	r3, [pc, #16]	; (100119a8 <get_gap_local_addr_type+0x14>)
10011996:	2001      	movs	r0, #1
10011998:	791b      	ldrb	r3, [r3, #4]
1001199a:	2b02      	cmp	r3, #2
1001199c:	d003      	beq.n	100119a6 <get_gap_local_addr_type+0x12>
1001199e:	3b03      	subs	r3, #3
100119a0:	4258      	negs	r0, r3
100119a2:	4158      	adcs	r0, r3
100119a4:	0040      	lsls	r0, r0, #1
100119a6:	4770      	bx	lr
100119a8:	1001b34e 	.word	0x1001b34e

100119ac <gapm_adv_report_evt_handler>:
100119ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100119ae:	7843      	ldrb	r3, [r0, #1]
100119b0:	1c05      	adds	r5, r0, #0
100119b2:	9301      	str	r3, [sp, #4]
100119b4:	466b      	mov	r3, sp
100119b6:	1c0c      	adds	r4, r1, #0
100119b8:	791b      	ldrb	r3, [r3, #4]
100119ba:	7806      	ldrb	r6, [r0, #0]
100119bc:	2206      	movs	r2, #6
100119be:	704b      	strb	r3, [r1, #1]
100119c0:	1c88      	adds	r0, r1, #2
100119c2:	4f1b      	ldr	r7, [pc, #108]	; (10011a30 <gapm_adv_report_evt_handler+0x84>)
100119c4:	1ca9      	adds	r1, r5, #2
100119c6:	47b8      	blx	r7
100119c8:	1c20      	adds	r0, r4, #0
100119ca:	1c29      	adds	r1, r5, #0
100119cc:	7a2a      	ldrb	r2, [r5, #8]
100119ce:	3008      	adds	r0, #8
100119d0:	77c2      	strb	r2, [r0, #31]
100119d2:	3109      	adds	r1, #9
100119d4:	3528      	adds	r5, #40	; 0x28
100119d6:	47b8      	blx	r7
100119d8:	782b      	ldrb	r3, [r5, #0]
100119da:	b25a      	sxtb	r2, r3
100119dc:	2a00      	cmp	r2, #0
100119de:	da01      	bge.n	100119e4 <gapm_adv_report_evt_handler+0x38>
100119e0:	3301      	adds	r3, #1
100119e2:	b2db      	uxtb	r3, r3
100119e4:	1c22      	adds	r2, r4, #0
100119e6:	3228      	adds	r2, #40	; 0x28
100119e8:	7013      	strb	r3, [r2, #0]
100119ea:	2200      	movs	r2, #0
100119ec:	9b01      	ldr	r3, [sp, #4]
100119ee:	4293      	cmp	r3, r2
100119f0:	d00a      	beq.n	10011a08 <gapm_adv_report_evt_handler+0x5c>
100119f2:	79e3      	ldrb	r3, [r4, #7]
100119f4:	323f      	adds	r2, #63	; 0x3f
100119f6:	1c19      	adds	r1, r3, #0
100119f8:	4391      	bics	r1, r2
100119fa:	3a3e      	subs	r2, #62	; 0x3e
100119fc:	29c0      	cmp	r1, #192	; 0xc0
100119fe:	d003      	beq.n	10011a08 <gapm_adv_report_evt_handler+0x5c>
10011a00:	065b      	lsls	r3, r3, #25
10011a02:	0fdb      	lsrs	r3, r3, #31
10011a04:	3202      	adds	r2, #2
10011a06:	1ad2      	subs	r2, r2, r3
10011a08:	7062      	strb	r2, [r4, #1]
10011a0a:	2e04      	cmp	r6, #4
10011a0c:	d80f      	bhi.n	10011a2e <gapm_adv_report_evt_handler+0x82>
10011a0e:	1c30      	adds	r0, r6, #0
10011a10:	f001 fdb4 	bl	1001357c <__gnu_thumb1_case_uqi>
10011a14:	09070503 	.word	0x09070503
10011a18:	0b          	.byte	0x0b
10011a19:	00          	.byte	0x00
10011a1a:	2300      	movs	r3, #0
10011a1c:	e006      	b.n	10011a2c <gapm_adv_report_evt_handler+0x80>
10011a1e:	2301      	movs	r3, #1
10011a20:	e004      	b.n	10011a2c <gapm_adv_report_evt_handler+0x80>
10011a22:	2302      	movs	r3, #2
10011a24:	e002      	b.n	10011a2c <gapm_adv_report_evt_handler+0x80>
10011a26:	2303      	movs	r3, #3
10011a28:	e000      	b.n	10011a2c <gapm_adv_report_evt_handler+0x80>
10011a2a:	2305      	movs	r3, #5
10011a2c:	7023      	strb	r3, [r4, #0]
10011a2e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10011a30:	100165c7 	.word	0x100165c7

10011a34 <gapm_resolv_addr_cmd_handler>:
10011a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10011a36:	2314      	movs	r3, #20
10011a38:	4c12      	ldr	r4, [pc, #72]	; (10011a84 <gapm_resolv_addr_cmd_handler+0x50>)
10011a3a:	1c17      	adds	r7, r2, #0
10011a3c:	7023      	strb	r3, [r4, #0]
10011a3e:	3b07      	subs	r3, #7
10011a40:	7063      	strb	r3, [r4, #1]
10011a42:	70a3      	strb	r3, [r4, #2]
10011a44:	2300      	movs	r3, #0
10011a46:	70e3      	strb	r3, [r4, #3]
10011a48:	4b0f      	ldr	r3, [pc, #60]	; (10011a88 <gapm_resolv_addr_cmd_handler+0x54>)
10011a4a:	1c05      	adds	r5, r0, #0
10011a4c:	881a      	ldrh	r2, [r3, #0]
10011a4e:	881b      	ldrh	r3, [r3, #0]
10011a50:	4e0e      	ldr	r6, [pc, #56]	; (10011a8c <gapm_resolv_addr_cmd_handler+0x58>)
10011a52:	0a1b      	lsrs	r3, r3, #8
10011a54:	7163      	strb	r3, [r4, #5]
10011a56:	2317      	movs	r3, #23
10011a58:	012d      	lsls	r5, r5, #4
10011a5a:	7122      	strb	r2, [r4, #4]
10011a5c:	7260      	strb	r0, [r4, #9]
10011a5e:	2206      	movs	r2, #6
10011a60:	480b      	ldr	r0, [pc, #44]	; (10011a90 <gapm_resolv_addr_cmd_handler+0x5c>)
10011a62:	7223      	strb	r3, [r4, #8]
10011a64:	47b0      	blx	r6
10011a66:	1c39      	adds	r1, r7, #0
10011a68:	1c2a      	adds	r2, r5, #0
10011a6a:	480a      	ldr	r0, [pc, #40]	; (10011a94 <gapm_resolv_addr_cmd_handler+0x60>)
10011a6c:	47b0      	blx	r6
10011a6e:	1c29      	adds	r1, r5, #0
10011a70:	3110      	adds	r1, #16
10011a72:	1c0b      	adds	r3, r1, #0
10011a74:	3b08      	subs	r3, #8
10011a76:	71a3      	strb	r3, [r4, #6]
10011a78:	121b      	asrs	r3, r3, #8
10011a7a:	71e3      	strb	r3, [r4, #7]
10011a7c:	1c20      	adds	r0, r4, #0
10011a7e:	4b06      	ldr	r3, [pc, #24]	; (10011a98 <gapm_resolv_addr_cmd_handler+0x64>)
10011a80:	4798      	blx	r3
10011a82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10011a84:	1001b62c 	.word	0x1001b62c
10011a88:	1001b2bc 	.word	0x1001b2bc
10011a8c:	100165c7 	.word	0x100165c7
10011a90:	1001b636 	.word	0x1001b636
10011a94:	1001b63c 	.word	0x1001b63c
10011a98:	10010871 	.word	0x10010871

10011a9c <gapm_addr_solved_ind_handler>:
10011a9c:	b570      	push	{r4, r5, r6, lr}
10011a9e:	1c04      	adds	r4, r0, #0
10011aa0:	1c08      	adds	r0, r1, #0
10011aa2:	1c0d      	adds	r5, r1, #0
10011aa4:	4e05      	ldr	r6, [pc, #20]	; (10011abc <gapm_addr_solved_ind_handler+0x20>)
10011aa6:	1c21      	adds	r1, r4, #0
10011aa8:	2206      	movs	r2, #6
10011aaa:	3011      	adds	r0, #17
10011aac:	47b0      	blx	r6
10011aae:	1c68      	adds	r0, r5, #1
10011ab0:	1da1      	adds	r1, r4, #6
10011ab2:	2210      	movs	r2, #16
10011ab4:	47b0      	blx	r6
10011ab6:	2300      	movs	r3, #0
10011ab8:	702b      	strb	r3, [r5, #0]
10011aba:	bd70      	pop	{r4, r5, r6, pc}
10011abc:	100165c7 	.word	0x100165c7

10011ac0 <gapm_profile_added_ind_handler>:
10011ac0:	b510      	push	{r4, lr}
10011ac2:	7843      	ldrb	r3, [r0, #1]
10011ac4:	7902      	ldrb	r2, [r0, #4]
10011ac6:	7944      	ldrb	r4, [r0, #5]
10011ac8:	7800      	ldrb	r0, [r0, #0]
10011aca:	021b      	lsls	r3, r3, #8
10011acc:	4303      	orrs	r3, r0
10011ace:	2b1b      	cmp	r3, #27
10011ad0:	d104      	bne.n	10011adc <gapm_profile_added_ind_handler+0x1c>
10011ad2:	2300      	movs	r3, #0
10011ad4:	700b      	strb	r3, [r1, #0]
10011ad6:	0223      	lsls	r3, r4, #8
10011ad8:	4313      	orrs	r3, r2
10011ada:	804b      	strh	r3, [r1, #2]
10011adc:	203b      	movs	r0, #59	; 0x3b
10011ade:	bd10      	pop	{r4, pc}

10011ae0 <gattc_read_req_ind_parser>:
10011ae0:	7843      	ldrb	r3, [r0, #1]
10011ae2:	7802      	ldrb	r2, [r0, #0]
10011ae4:	021b      	lsls	r3, r3, #8
10011ae6:	4313      	orrs	r3, r2
10011ae8:	804b      	strh	r3, [r1, #2]
10011aea:	4770      	bx	lr

10011aec <gattc_write_req_ind_parser>:
10011aec:	b508      	push	{r3, lr}
10011aee:	1c13      	adds	r3, r2, #0
10011af0:	0a00      	lsrs	r0, r0, #8
10011af2:	8010      	strh	r0, [r2, #0]
10011af4:	784a      	ldrb	r2, [r1, #1]
10011af6:	7808      	ldrb	r0, [r1, #0]
10011af8:	0212      	lsls	r2, r2, #8
10011afa:	4302      	orrs	r2, r0
10011afc:	805a      	strh	r2, [r3, #2]
10011afe:	78ca      	ldrb	r2, [r1, #3]
10011b00:	7888      	ldrb	r0, [r1, #2]
10011b02:	0212      	lsls	r2, r2, #8
10011b04:	4302      	orrs	r2, r0
10011b06:	809a      	strh	r2, [r3, #4]
10011b08:	794a      	ldrb	r2, [r1, #5]
10011b0a:	7908      	ldrb	r0, [r1, #4]
10011b0c:	0212      	lsls	r2, r2, #8
10011b0e:	4302      	orrs	r2, r0
10011b10:	80da      	strh	r2, [r3, #6]
10011b12:	3308      	adds	r3, #8
10011b14:	1c18      	adds	r0, r3, #0
10011b16:	3106      	adds	r1, #6
10011b18:	4b01      	ldr	r3, [pc, #4]	; (10011b20 <gattc_write_req_ind_parser+0x34>)
10011b1a:	4798      	blx	r3
10011b1c:	bd08      	pop	{r3, pc}
10011b1e:	46c0      	nop			; (mov r8, r8)
10011b20:	100165c7 	.word	0x100165c7

10011b24 <gattc_att_info_req_parser>:
10011b24:	7843      	ldrb	r3, [r0, #1]
10011b26:	7802      	ldrb	r2, [r0, #0]
10011b28:	021b      	lsls	r3, r3, #8
10011b2a:	4313      	orrs	r3, r2
10011b2c:	800b      	strh	r3, [r1, #0]
10011b2e:	4770      	bx	lr

10011b30 <gattc_read_cfm>:
10011b30:	b538      	push	{r3, r4, r5, lr}
10011b32:	2514      	movs	r5, #20
10011b34:	1c1c      	adds	r4, r3, #0
10011b36:	4b14      	ldr	r3, [pc, #80]	; (10011b88 <gattc_read_cfm+0x58>)
10011b38:	70d9      	strb	r1, [r3, #3]
10011b3a:	4914      	ldr	r1, [pc, #80]	; (10011b8c <gattc_read_cfm+0x5c>)
10011b3c:	701d      	strb	r5, [r3, #0]
10011b3e:	3d08      	subs	r5, #8
10011b40:	705d      	strb	r5, [r3, #1]
10011b42:	709d      	strb	r5, [r3, #2]
10011b44:	880d      	ldrh	r5, [r1, #0]
10011b46:	8809      	ldrh	r1, [r1, #0]
10011b48:	7218      	strb	r0, [r3, #8]
10011b4a:	0a09      	lsrs	r1, r1, #8
10011b4c:	7159      	strb	r1, [r3, #5]
10011b4e:	0a00      	lsrs	r0, r0, #8
10011b50:	0a21      	lsrs	r1, r4, #8
10011b52:	711d      	strb	r5, [r3, #4]
10011b54:	7258      	strb	r0, [r3, #9]
10011b56:	729c      	strb	r4, [r3, #10]
10011b58:	72d9      	strb	r1, [r3, #11]
10011b5a:	731a      	strb	r2, [r3, #12]
10011b5c:	1c1d      	adds	r5, r3, #0
10011b5e:	2c00      	cmp	r4, #0
10011b60:	d007      	beq.n	10011b72 <gattc_read_cfm+0x42>
10011b62:	9904      	ldr	r1, [sp, #16]
10011b64:	1c22      	adds	r2, r4, #0
10011b66:	480a      	ldr	r0, [pc, #40]	; (10011b90 <gattc_read_cfm+0x60>)
10011b68:	4b0a      	ldr	r3, [pc, #40]	; (10011b94 <gattc_read_cfm+0x64>)
10011b6a:	340d      	adds	r4, #13
10011b6c:	4798      	blx	r3
10011b6e:	b2a1      	uxth	r1, r4
10011b70:	e001      	b.n	10011b76 <gattc_read_cfm+0x46>
10011b72:	210e      	movs	r1, #14
10011b74:	735c      	strb	r4, [r3, #13]
10011b76:	1c0b      	adds	r3, r1, #0
10011b78:	3b08      	subs	r3, #8
10011b7a:	71ab      	strb	r3, [r5, #6]
10011b7c:	121b      	asrs	r3, r3, #8
10011b7e:	71eb      	strb	r3, [r5, #7]
10011b80:	1c28      	adds	r0, r5, #0
10011b82:	4b05      	ldr	r3, [pc, #20]	; (10011b98 <gattc_read_cfm+0x68>)
10011b84:	4798      	blx	r3
10011b86:	bd38      	pop	{r3, r4, r5, pc}
10011b88:	1001b62c 	.word	0x1001b62c
10011b8c:	1001b2bc 	.word	0x1001b2bc
10011b90:	1001b639 	.word	0x1001b639
10011b94:	100165c7 	.word	0x100165c7
10011b98:	10010871 	.word	0x10010871

10011b9c <gattc_write_cfm>:
10011b9c:	4b0d      	ldr	r3, [pc, #52]	; (10011bd4 <gattc_write_cfm+0x38>)
10011b9e:	b510      	push	{r4, lr}
10011ba0:	729a      	strb	r2, [r3, #10]
10011ba2:	2203      	movs	r2, #3
10011ba4:	2416      	movs	r4, #22
10011ba6:	719a      	strb	r2, [r3, #6]
10011ba8:	2200      	movs	r2, #0
10011baa:	70d9      	strb	r1, [r3, #3]
10011bac:	490a      	ldr	r1, [pc, #40]	; (10011bd8 <gattc_write_cfm+0x3c>)
10011bae:	701c      	strb	r4, [r3, #0]
10011bb0:	3c0a      	subs	r4, #10
10011bb2:	705c      	strb	r4, [r3, #1]
10011bb4:	709c      	strb	r4, [r3, #2]
10011bb6:	880c      	ldrh	r4, [r1, #0]
10011bb8:	8809      	ldrh	r1, [r1, #0]
10011bba:	7218      	strb	r0, [r3, #8]
10011bbc:	0a09      	lsrs	r1, r1, #8
10011bbe:	0a00      	lsrs	r0, r0, #8
10011bc0:	711c      	strb	r4, [r3, #4]
10011bc2:	7159      	strb	r1, [r3, #5]
10011bc4:	7258      	strb	r0, [r3, #9]
10011bc6:	71da      	strb	r2, [r3, #7]
10011bc8:	1c18      	adds	r0, r3, #0
10011bca:	210b      	movs	r1, #11
10011bcc:	4b03      	ldr	r3, [pc, #12]	; (10011bdc <gattc_write_cfm+0x40>)
10011bce:	4798      	blx	r3
10011bd0:	bd10      	pop	{r4, pc}
10011bd2:	46c0      	nop			; (mov r8, r8)
10011bd4:	1001b62c 	.word	0x1001b62c
10011bd8:	1001b2bc 	.word	0x1001b2bc
10011bdc:	10010871 	.word	0x10010871

10011be0 <gattc_att_info_cfm>:
10011be0:	b538      	push	{r3, r4, r5, lr}
10011be2:	4c0e      	ldr	r4, [pc, #56]	; (10011c1c <gattc_att_info_cfm+0x3c>)
10011be4:	2518      	movs	r5, #24
10011be6:	7323      	strb	r3, [r4, #12]
10011be8:	2305      	movs	r3, #5
10011bea:	71a3      	strb	r3, [r4, #6]
10011bec:	2300      	movs	r3, #0
10011bee:	70e1      	strb	r1, [r4, #3]
10011bf0:	490b      	ldr	r1, [pc, #44]	; (10011c20 <gattc_att_info_cfm+0x40>)
10011bf2:	7025      	strb	r5, [r4, #0]
10011bf4:	3d0c      	subs	r5, #12
10011bf6:	7065      	strb	r5, [r4, #1]
10011bf8:	70a5      	strb	r5, [r4, #2]
10011bfa:	880d      	ldrh	r5, [r1, #0]
10011bfc:	8809      	ldrh	r1, [r1, #0]
10011bfe:	7220      	strb	r0, [r4, #8]
10011c00:	0a09      	lsrs	r1, r1, #8
10011c02:	0a00      	lsrs	r0, r0, #8
10011c04:	7161      	strb	r1, [r4, #5]
10011c06:	7260      	strb	r0, [r4, #9]
10011c08:	72a2      	strb	r2, [r4, #10]
10011c0a:	71e3      	strb	r3, [r4, #7]
10011c0c:	0a12      	lsrs	r2, r2, #8
10011c0e:	1c20      	adds	r0, r4, #0
10011c10:	210d      	movs	r1, #13
10011c12:	4b04      	ldr	r3, [pc, #16]	; (10011c24 <gattc_att_info_cfm+0x44>)
10011c14:	7125      	strb	r5, [r4, #4]
10011c16:	72e2      	strb	r2, [r4, #11]
10011c18:	4798      	blx	r3
10011c1a:	bd38      	pop	{r3, r4, r5, pc}
10011c1c:	1001b62c 	.word	0x1001b62c
10011c20:	1001b2bc 	.word	0x1001b2bc
10011c24:	10010871 	.word	0x10010871

10011c28 <gattc_send_evt_cmd_handler>:
10011c28:	b570      	push	{r4, r5, r6, lr}
10011c2a:	2610      	movs	r6, #16
10011c2c:	ac04      	add	r4, sp, #16
10011c2e:	8825      	ldrh	r5, [r4, #0]
10011c30:	4c15      	ldr	r4, [pc, #84]	; (10011c88 <gattc_send_evt_cmd_handler+0x60>)
10011c32:	70e2      	strb	r2, [r4, #3]
10011c34:	4a15      	ldr	r2, [pc, #84]	; (10011c8c <gattc_send_evt_cmd_handler+0x64>)
10011c36:	7026      	strb	r6, [r4, #0]
10011c38:	3e04      	subs	r6, #4
10011c3a:	7066      	strb	r6, [r4, #1]
10011c3c:	70a6      	strb	r6, [r4, #2]
10011c3e:	8816      	ldrh	r6, [r2, #0]
10011c40:	8812      	ldrh	r2, [r2, #0]
10011c42:	7220      	strb	r0, [r4, #8]
10011c44:	0a12      	lsrs	r2, r2, #8
10011c46:	7162      	strb	r2, [r4, #5]
10011c48:	4a11      	ldr	r2, [pc, #68]	; (10011c90 <gattc_send_evt_cmd_handler+0x68>)
10011c4a:	7321      	strb	r1, [r4, #12]
10011c4c:	8812      	ldrh	r2, [r2, #0]
10011c4e:	73a5      	strb	r5, [r4, #14]
10011c50:	3201      	adds	r2, #1
10011c52:	7262      	strb	r2, [r4, #9]
10011c54:	1212      	asrs	r2, r2, #8
10011c56:	72a2      	strb	r2, [r4, #10]
10011c58:	2200      	movs	r2, #0
10011c5a:	72e2      	strb	r2, [r4, #11]
10011c5c:	0a0a      	lsrs	r2, r1, #8
10011c5e:	7362      	strb	r2, [r4, #13]
10011c60:	0a2a      	lsrs	r2, r5, #8
10011c62:	73e2      	strb	r2, [r4, #15]
10011c64:	1c19      	adds	r1, r3, #0
10011c66:	1c2a      	adds	r2, r5, #0
10011c68:	4b0a      	ldr	r3, [pc, #40]	; (10011c94 <gattc_send_evt_cmd_handler+0x6c>)
10011c6a:	3510      	adds	r5, #16
10011c6c:	480a      	ldr	r0, [pc, #40]	; (10011c98 <gattc_send_evt_cmd_handler+0x70>)
10011c6e:	7126      	strb	r6, [r4, #4]
10011c70:	4798      	blx	r3
10011c72:	b2a9      	uxth	r1, r5
10011c74:	1c0b      	adds	r3, r1, #0
10011c76:	3b08      	subs	r3, #8
10011c78:	71a3      	strb	r3, [r4, #6]
10011c7a:	121b      	asrs	r3, r3, #8
10011c7c:	71e3      	strb	r3, [r4, #7]
10011c7e:	1c20      	adds	r0, r4, #0
10011c80:	4b06      	ldr	r3, [pc, #24]	; (10011c9c <gattc_send_evt_cmd_handler+0x74>)
10011c82:	4798      	blx	r3
10011c84:	bd70      	pop	{r4, r5, r6, pc}
10011c86:	46c0      	nop			; (mov r8, r8)
10011c88:	1001b62c 	.word	0x1001b62c
10011c8c:	1001b2bc 	.word	0x1001b2bc
10011c90:	1001a3f8 	.word	0x1001a3f8
10011c94:	100165c7 	.word	0x100165c7
10011c98:	1001b63c 	.word	0x1001b63c
10011c9c:	10010871 	.word	0x10010871

10011ca0 <gattc_event_cfm_handler>:
10011ca0:	220e      	movs	r2, #14
10011ca2:	b508      	push	{r3, lr}
10011ca4:	4b0b      	ldr	r3, [pc, #44]	; (10011cd4 <gattc_event_cfm_handler+0x34>)
10011ca6:	701a      	strb	r2, [r3, #0]
10011ca8:	3a02      	subs	r2, #2
10011caa:	705a      	strb	r2, [r3, #1]
10011cac:	709a      	strb	r2, [r3, #2]
10011cae:	4a0a      	ldr	r2, [pc, #40]	; (10011cd8 <gattc_event_cfm_handler+0x38>)
10011cb0:	70d8      	strb	r0, [r3, #3]
10011cb2:	8810      	ldrh	r0, [r2, #0]
10011cb4:	8812      	ldrh	r2, [r2, #0]
10011cb6:	7219      	strb	r1, [r3, #8]
10011cb8:	0a12      	lsrs	r2, r2, #8
10011cba:	715a      	strb	r2, [r3, #5]
10011cbc:	2202      	movs	r2, #2
10011cbe:	719a      	strb	r2, [r3, #6]
10011cc0:	2200      	movs	r2, #0
10011cc2:	0a09      	lsrs	r1, r1, #8
10011cc4:	7118      	strb	r0, [r3, #4]
10011cc6:	7259      	strb	r1, [r3, #9]
10011cc8:	71da      	strb	r2, [r3, #7]
10011cca:	1c18      	adds	r0, r3, #0
10011ccc:	210a      	movs	r1, #10
10011cce:	4b03      	ldr	r3, [pc, #12]	; (10011cdc <gattc_event_cfm_handler+0x3c>)
10011cd0:	4798      	blx	r3
10011cd2:	bd08      	pop	{r3, pc}
10011cd4:	1001b62c 	.word	0x1001b62c
10011cd8:	1001b2bc 	.word	0x1001b2bc
10011cdc:	10010871 	.word	0x10010871

10011ce0 <gattc_disc_svc_ind_parser>:
10011ce0:	b570      	push	{r4, r5, r6, lr}
10011ce2:	1c15      	adds	r5, r2, #0
10011ce4:	0a00      	lsrs	r0, r0, #8
10011ce6:	8010      	strh	r0, [r2, #0]
10011ce8:	784b      	ldrb	r3, [r1, #1]
10011cea:	780a      	ldrb	r2, [r1, #0]
10011cec:	021b      	lsls	r3, r3, #8
10011cee:	4313      	orrs	r3, r2
10011cf0:	806b      	strh	r3, [r5, #2]
10011cf2:	78cb      	ldrb	r3, [r1, #3]
10011cf4:	788a      	ldrb	r2, [r1, #2]
10011cf6:	021b      	lsls	r3, r3, #8
10011cf8:	4313      	orrs	r3, r2
10011cfa:	80ab      	strh	r3, [r5, #4]
10011cfc:	790e      	ldrb	r6, [r1, #4]
10011cfe:	4b05      	ldr	r3, [pc, #20]	; (10011d14 <gattc_disc_svc_ind_parser+0x34>)
10011d00:	1c30      	adds	r0, r6, #0
10011d02:	1c0c      	adds	r4, r1, #0
10011d04:	4798      	blx	r3
10011d06:	1c32      	adds	r2, r6, #0
10011d08:	71a8      	strb	r0, [r5, #6]
10011d0a:	1d61      	adds	r1, r4, #5
10011d0c:	1de8      	adds	r0, r5, #7
10011d0e:	4b02      	ldr	r3, [pc, #8]	; (10011d18 <gattc_disc_svc_ind_parser+0x38>)
10011d10:	4798      	blx	r3
10011d12:	bd70      	pop	{r4, r5, r6, pc}
10011d14:	1000fbb1 	.word	0x1000fbb1
10011d18:	100165c7 	.word	0x100165c7

10011d1c <gattc_disc_svc_incl_ind_parser>:
10011d1c:	b570      	push	{r4, r5, r6, lr}
10011d1e:	1c15      	adds	r5, r2, #0
10011d20:	0a00      	lsrs	r0, r0, #8
10011d22:	8010      	strh	r0, [r2, #0]
10011d24:	784b      	ldrb	r3, [r1, #1]
10011d26:	780a      	ldrb	r2, [r1, #0]
10011d28:	021b      	lsls	r3, r3, #8
10011d2a:	4313      	orrs	r3, r2
10011d2c:	806b      	strh	r3, [r5, #2]
10011d2e:	78cb      	ldrb	r3, [r1, #3]
10011d30:	788a      	ldrb	r2, [r1, #2]
10011d32:	021b      	lsls	r3, r3, #8
10011d34:	4313      	orrs	r3, r2
10011d36:	80ab      	strh	r3, [r5, #4]
10011d38:	794b      	ldrb	r3, [r1, #5]
10011d3a:	790a      	ldrb	r2, [r1, #4]
10011d3c:	021b      	lsls	r3, r3, #8
10011d3e:	4313      	orrs	r3, r2
10011d40:	80eb      	strh	r3, [r5, #6]
10011d42:	798e      	ldrb	r6, [r1, #6]
10011d44:	4b05      	ldr	r3, [pc, #20]	; (10011d5c <gattc_disc_svc_incl_ind_parser+0x40>)
10011d46:	1c30      	adds	r0, r6, #0
10011d48:	1c0c      	adds	r4, r1, #0
10011d4a:	4798      	blx	r3
10011d4c:	7228      	strb	r0, [r5, #8]
10011d4e:	1c28      	adds	r0, r5, #0
10011d50:	1c32      	adds	r2, r6, #0
10011d52:	1de1      	adds	r1, r4, #7
10011d54:	4b02      	ldr	r3, [pc, #8]	; (10011d60 <gattc_disc_svc_incl_ind_parser+0x44>)
10011d56:	3009      	adds	r0, #9
10011d58:	4798      	blx	r3
10011d5a:	bd70      	pop	{r4, r5, r6, pc}
10011d5c:	1000fbb1 	.word	0x1000fbb1
10011d60:	100165c7 	.word	0x100165c7

10011d64 <gattc_disc_char_ind_parser>:
10011d64:	b570      	push	{r4, r5, r6, lr}
10011d66:	1c15      	adds	r5, r2, #0
10011d68:	0a00      	lsrs	r0, r0, #8
10011d6a:	8010      	strh	r0, [r2, #0]
10011d6c:	784b      	ldrb	r3, [r1, #1]
10011d6e:	780a      	ldrb	r2, [r1, #0]
10011d70:	021b      	lsls	r3, r3, #8
10011d72:	4313      	orrs	r3, r2
10011d74:	806b      	strh	r3, [r5, #2]
10011d76:	78cb      	ldrb	r3, [r1, #3]
10011d78:	788a      	ldrb	r2, [r1, #2]
10011d7a:	021b      	lsls	r3, r3, #8
10011d7c:	4313      	orrs	r3, r2
10011d7e:	80ab      	strh	r3, [r5, #4]
10011d80:	790b      	ldrb	r3, [r1, #4]
10011d82:	1c0c      	adds	r4, r1, #0
10011d84:	71ab      	strb	r3, [r5, #6]
10011d86:	794e      	ldrb	r6, [r1, #5]
10011d88:	4b05      	ldr	r3, [pc, #20]	; (10011da0 <gattc_disc_char_ind_parser+0x3c>)
10011d8a:	1c30      	adds	r0, r6, #0
10011d8c:	4798      	blx	r3
10011d8e:	71e8      	strb	r0, [r5, #7]
10011d90:	1c28      	adds	r0, r5, #0
10011d92:	1c32      	adds	r2, r6, #0
10011d94:	1da1      	adds	r1, r4, #6
10011d96:	4b03      	ldr	r3, [pc, #12]	; (10011da4 <gattc_disc_char_ind_parser+0x40>)
10011d98:	3008      	adds	r0, #8
10011d9a:	4798      	blx	r3
10011d9c:	bd70      	pop	{r4, r5, r6, pc}
10011d9e:	46c0      	nop			; (mov r8, r8)
10011da0:	1000fbb1 	.word	0x1000fbb1
10011da4:	100165c7 	.word	0x100165c7

10011da8 <gattc_disc_char_desc_ind_parser>:
10011da8:	b570      	push	{r4, r5, r6, lr}
10011daa:	1c15      	adds	r5, r2, #0
10011dac:	0a00      	lsrs	r0, r0, #8
10011dae:	8010      	strh	r0, [r2, #0]
10011db0:	784b      	ldrb	r3, [r1, #1]
10011db2:	780a      	ldrb	r2, [r1, #0]
10011db4:	021b      	lsls	r3, r3, #8
10011db6:	4313      	orrs	r3, r2
10011db8:	806b      	strh	r3, [r5, #2]
10011dba:	788e      	ldrb	r6, [r1, #2]
10011dbc:	4b05      	ldr	r3, [pc, #20]	; (10011dd4 <gattc_disc_char_desc_ind_parser+0x2c>)
10011dbe:	1c30      	adds	r0, r6, #0
10011dc0:	1c0c      	adds	r4, r1, #0
10011dc2:	4798      	blx	r3
10011dc4:	1c32      	adds	r2, r6, #0
10011dc6:	7128      	strb	r0, [r5, #4]
10011dc8:	1ce1      	adds	r1, r4, #3
10011dca:	1d68      	adds	r0, r5, #5
10011dcc:	4b02      	ldr	r3, [pc, #8]	; (10011dd8 <gattc_disc_char_desc_ind_parser+0x30>)
10011dce:	4798      	blx	r3
10011dd0:	bd70      	pop	{r4, r5, r6, pc}
10011dd2:	46c0      	nop			; (mov r8, r8)
10011dd4:	1000fbb1 	.word	0x1000fbb1
10011dd8:	100165c7 	.word	0x100165c7

10011ddc <gattc_event_ind_and_notification_parser>:
10011ddc:	b510      	push	{r4, lr}
10011dde:	780c      	ldrb	r4, [r1, #0]
10011de0:	1c13      	adds	r3, r2, #0
10011de2:	2c12      	cmp	r4, #18
10011de4:	d10e      	bne.n	10011e04 <gattc_event_ind_and_notification_parser+0x28>
10011de6:	0a00      	lsrs	r0, r0, #8
10011de8:	8010      	strh	r0, [r2, #0]
10011dea:	788a      	ldrb	r2, [r1, #2]
10011dec:	709a      	strb	r2, [r3, #2]
10011dee:	7948      	ldrb	r0, [r1, #5]
10011df0:	790c      	ldrb	r4, [r1, #4]
10011df2:	0200      	lsls	r0, r0, #8
10011df4:	4320      	orrs	r0, r4
10011df6:	8098      	strh	r0, [r3, #4]
10011df8:	3106      	adds	r1, #6
10011dfa:	1d98      	adds	r0, r3, #6
10011dfc:	4b0b      	ldr	r3, [pc, #44]	; (10011e2c <gattc_event_ind_and_notification_parser+0x50>)
10011dfe:	4798      	blx	r3
10011e00:	221b      	movs	r2, #27
10011e02:	e010      	b.n	10011e26 <gattc_event_ind_and_notification_parser+0x4a>
10011e04:	2200      	movs	r2, #0
10011e06:	2c13      	cmp	r4, #19
10011e08:	d10d      	bne.n	10011e26 <gattc_event_ind_and_notification_parser+0x4a>
10011e0a:	0a00      	lsrs	r0, r0, #8
10011e0c:	8018      	strh	r0, [r3, #0]
10011e0e:	788a      	ldrb	r2, [r1, #2]
10011e10:	709a      	strb	r2, [r3, #2]
10011e12:	7908      	ldrb	r0, [r1, #4]
10011e14:	78cc      	ldrb	r4, [r1, #3]
10011e16:	0200      	lsls	r0, r0, #8
10011e18:	4320      	orrs	r0, r4
10011e1a:	8098      	strh	r0, [r3, #4]
10011e1c:	3106      	adds	r1, #6
10011e1e:	1d98      	adds	r0, r3, #6
10011e20:	4b02      	ldr	r3, [pc, #8]	; (10011e2c <gattc_event_ind_and_notification_parser+0x50>)
10011e22:	4798      	blx	r3
10011e24:	221c      	movs	r2, #28
10011e26:	1c10      	adds	r0, r2, #0
10011e28:	bd10      	pop	{r4, pc}
10011e2a:	46c0      	nop			; (mov r8, r8)
10011e2c:	100165c7 	.word	0x100165c7

10011e30 <gattc_complete_evt_handler>:
10011e30:	b500      	push	{lr}
10011e32:	0a00      	lsrs	r0, r0, #8
10011e34:	8010      	strh	r0, [r2, #0]
10011e36:	7808      	ldrb	r0, [r1, #0]
10011e38:	7090      	strb	r0, [r2, #2]
10011e3a:	784b      	ldrb	r3, [r1, #1]
10011e3c:	3801      	subs	r0, #1
10011e3e:	70d3      	strb	r3, [r2, #3]
10011e40:	2813      	cmp	r0, #19
10011e42:	d82c      	bhi.n	10011e9e <gattc_complete_evt_handler+0x6e>
10011e44:	f001 fb9a 	bl	1001357c <__gnu_thumb1_case_uqi>
10011e48:	0a0a0a0c 	.word	0x0a0a0a0c
10011e4c:	210a0a0a 	.word	0x210a0a0a
10011e50:	111f2121 	.word	0x111f2121
10011e54:	2b111111 	.word	0x2b111111
10011e58:	2919132b 	.word	0x2919132b
10011e5c:	2017      	movs	r0, #23
10011e5e:	e01f      	b.n	10011ea0 <gattc_complete_evt_handler+0x70>
10011e60:	2024      	movs	r0, #36	; 0x24
10011e62:	2b00      	cmp	r3, #0
10011e64:	d11c      	bne.n	10011ea0 <gattc_complete_evt_handler+0x70>
10011e66:	3017      	adds	r0, #23
10011e68:	e01a      	b.n	10011ea0 <gattc_complete_evt_handler+0x70>
10011e6a:	2025      	movs	r0, #37	; 0x25
10011e6c:	e018      	b.n	10011ea0 <gattc_complete_evt_handler+0x70>
10011e6e:	4a0d      	ldr	r2, [pc, #52]	; (10011ea4 <gattc_complete_evt_handler+0x74>)
10011e70:	201d      	movs	r0, #29
10011e72:	6813      	ldr	r3, [r2, #0]
10011e74:	3b01      	subs	r3, #1
10011e76:	6013      	str	r3, [r2, #0]
10011e78:	e012      	b.n	10011ea0 <gattc_complete_evt_handler+0x70>
10011e7a:	4a0a      	ldr	r2, [pc, #40]	; (10011ea4 <gattc_complete_evt_handler+0x74>)
10011e7c:	201e      	movs	r0, #30
10011e7e:	6813      	ldr	r3, [r2, #0]
10011e80:	3b01      	subs	r3, #1
10011e82:	6013      	str	r3, [r2, #0]
10011e84:	e00c      	b.n	10011ea0 <gattc_complete_evt_handler+0x70>
10011e86:	2019      	movs	r0, #25
10011e88:	e00a      	b.n	10011ea0 <gattc_complete_evt_handler+0x70>
10011e8a:	203b      	movs	r0, #59	; 0x3b
10011e8c:	2b00      	cmp	r3, #0
10011e8e:	d007      	beq.n	10011ea0 <gattc_complete_evt_handler+0x70>
10011e90:	2182      	movs	r1, #130	; 0x82
10011e92:	0089      	lsls	r1, r1, #2
10011e94:	5453      	strb	r3, [r2, r1]
10011e96:	3823      	subs	r0, #35	; 0x23
10011e98:	e002      	b.n	10011ea0 <gattc_complete_evt_handler+0x70>
10011e9a:	2021      	movs	r0, #33	; 0x21
10011e9c:	e000      	b.n	10011ea0 <gattc_complete_evt_handler+0x70>
10011e9e:	2000      	movs	r0, #0
10011ea0:	bd00      	pop	{pc}
10011ea2:	46c0      	nop			; (mov r8, r8)
10011ea4:	1001a3fc 	.word	0x1001a3fc

10011ea8 <gattc_event_mtu_changed_ind_parser>:
10011ea8:	0a00      	lsrs	r0, r0, #8
10011eaa:	8010      	strh	r0, [r2, #0]
10011eac:	784b      	ldrb	r3, [r1, #1]
10011eae:	7809      	ldrb	r1, [r1, #0]
10011eb0:	021b      	lsls	r3, r3, #8
10011eb2:	430b      	orrs	r3, r1
10011eb4:	8053      	strh	r3, [r2, #2]
10011eb6:	4770      	bx	lr

10011eb8 <gattc_read_ind_parser>:
10011eb8:	0a00      	lsrs	r0, r0, #8
10011eba:	b508      	push	{r3, lr}
10011ebc:	8010      	strh	r0, [r2, #0]
10011ebe:	1c13      	adds	r3, r2, #0
10011ec0:	2282      	movs	r2, #130	; 0x82
10011ec2:	2000      	movs	r0, #0
10011ec4:	0092      	lsls	r2, r2, #2
10011ec6:	5498      	strb	r0, [r3, r2]
10011ec8:	784a      	ldrb	r2, [r1, #1]
10011eca:	7808      	ldrb	r0, [r1, #0]
10011ecc:	0212      	lsls	r2, r2, #8
10011ece:	4302      	orrs	r2, r0
10011ed0:	805a      	strh	r2, [r3, #2]
10011ed2:	78ca      	ldrb	r2, [r1, #3]
10011ed4:	7888      	ldrb	r0, [r1, #2]
10011ed6:	0212      	lsls	r2, r2, #8
10011ed8:	4302      	orrs	r2, r0
10011eda:	80da      	strh	r2, [r3, #6]
10011edc:	794a      	ldrb	r2, [r1, #5]
10011ede:	7908      	ldrb	r0, [r1, #4]
10011ee0:	0212      	lsls	r2, r2, #8
10011ee2:	4302      	orrs	r2, r0
10011ee4:	809a      	strh	r2, [r3, #4]
10011ee6:	3308      	adds	r3, #8
10011ee8:	1c18      	adds	r0, r3, #0
10011eea:	3106      	adds	r1, #6
10011eec:	4b01      	ldr	r3, [pc, #4]	; (10011ef4 <gattc_read_ind_parser+0x3c>)
10011eee:	4798      	blx	r3
10011ef0:	bd08      	pop	{r3, pc}
10011ef2:	46c0      	nop			; (mov r8, r8)
10011ef4:	100165c7 	.word	0x100165c7

10011ef8 <gattc_svc_changed_cfg_ind_parser>:
10011ef8:	0a00      	lsrs	r0, r0, #8
10011efa:	8010      	strh	r0, [r2, #0]
10011efc:	784b      	ldrb	r3, [r1, #1]
10011efe:	7809      	ldrb	r1, [r1, #0]
10011f00:	021b      	lsls	r3, r3, #8
10011f02:	430b      	orrs	r3, r1
10011f04:	8053      	strh	r3, [r2, #2]
10011f06:	4770      	bx	lr

10011f08 <init_gattc_task_module>:
10011f08:	2300      	movs	r3, #0
10011f0a:	4a02      	ldr	r2, [pc, #8]	; (10011f14 <init_gattc_task_module+0xc>)
10011f0c:	8013      	strh	r3, [r2, #0]
10011f0e:	4a02      	ldr	r2, [pc, #8]	; (10011f18 <init_gattc_task_module+0x10>)
10011f10:	8013      	strh	r3, [r2, #0]
10011f12:	4770      	bx	lr
10011f14:	1001a3f6 	.word	0x1001a3f6
10011f18:	1001a3f8 	.word	0x1001a3f8

10011f1c <gattm_add_svc_req_handler>:
10011f1c:	2200      	movs	r2, #0
10011f1e:	210b      	movs	r1, #11
10011f20:	b5f0      	push	{r4, r5, r6, r7, lr}
10011f22:	1c04      	adds	r4, r0, #0
10011f24:	7943      	ldrb	r3, [r0, #5]
10011f26:	b085      	sub	sp, #20
10011f28:	9301      	str	r3, [sp, #4]
10011f2a:	ab02      	add	r3, sp, #8
10011f2c:	71da      	strb	r2, [r3, #7]
10011f2e:	4b37      	ldr	r3, [pc, #220]	; (1001200c <gattm_add_svc_req_handler+0xf0>)
10011f30:	7059      	strb	r1, [r3, #1]
10011f32:	7099      	strb	r1, [r3, #2]
10011f34:	4936      	ldr	r1, [pc, #216]	; (10012010 <gattm_add_svc_req_handler+0xf4>)
10011f36:	701a      	strb	r2, [r3, #0]
10011f38:	8808      	ldrh	r0, [r1, #0]
10011f3a:	8809      	ldrh	r1, [r1, #0]
10011f3c:	70da      	strb	r2, [r3, #3]
10011f3e:	0a09      	lsrs	r1, r1, #8
10011f40:	7118      	strb	r0, [r3, #4]
10011f42:	7159      	strb	r1, [r3, #5]
10011f44:	8821      	ldrh	r1, [r4, #0]
10011f46:	7219      	strb	r1, [r3, #8]
10011f48:	8821      	ldrh	r1, [r4, #0]
10011f4a:	0a09      	lsrs	r1, r1, #8
10011f4c:	7259      	strb	r1, [r3, #9]
10011f4e:	8861      	ldrh	r1, [r4, #2]
10011f50:	7299      	strb	r1, [r3, #10]
10011f52:	8861      	ldrh	r1, [r4, #2]
10011f54:	0a09      	lsrs	r1, r1, #8
10011f56:	72d9      	strb	r1, [r3, #11]
10011f58:	7921      	ldrb	r1, [r4, #4]
10011f5a:	7319      	strb	r1, [r3, #12]
10011f5c:	4669      	mov	r1, sp
10011f5e:	7909      	ldrb	r1, [r1, #4]
10011f60:	7359      	strb	r1, [r3, #13]
10011f62:	18a1      	adds	r1, r4, r2
10011f64:	7988      	ldrb	r0, [r1, #6]
10011f66:	1899      	adds	r1, r3, r2
10011f68:	3201      	adds	r2, #1
10011f6a:	7388      	strb	r0, [r1, #14]
10011f6c:	2a10      	cmp	r2, #16
10011f6e:	d1f8      	bne.n	10011f62 <gattm_add_svc_req_handler+0x46>
10011f70:	1c27      	adds	r7, r4, #0
10011f72:	2300      	movs	r3, #0
10011f74:	251e      	movs	r5, #30
10011f76:	3716      	adds	r7, #22
10011f78:	9300      	str	r3, [sp, #0]
10011f7a:	9b00      	ldr	r3, [sp, #0]
10011f7c:	9a01      	ldr	r2, [sp, #4]
10011f7e:	4e23      	ldr	r6, [pc, #140]	; (1001200c <gattm_add_svc_req_handler+0xf0>)
10011f80:	4293      	cmp	r3, r2
10011f82:	da21      	bge.n	10011fc8 <gattm_add_svc_req_handler+0xac>
10011f84:	1c39      	adds	r1, r7, #0
10011f86:	1970      	adds	r0, r6, r5
10011f88:	2210      	movs	r2, #16
10011f8a:	4b22      	ldr	r3, [pc, #136]	; (10012014 <gattm_add_svc_req_handler+0xf8>)
10011f8c:	4798      	blx	r3
10011f8e:	1c2b      	adds	r3, r5, #0
10011f90:	8a3a      	ldrh	r2, [r7, #16]
10011f92:	3310      	adds	r3, #16
10011f94:	b29b      	uxth	r3, r3
10011f96:	54f2      	strb	r2, [r6, r3]
10011f98:	1c2b      	adds	r3, r5, #0
10011f9a:	8a3a      	ldrh	r2, [r7, #16]
10011f9c:	3311      	adds	r3, #17
10011f9e:	b29b      	uxth	r3, r3
10011fa0:	0a12      	lsrs	r2, r2, #8
10011fa2:	54f2      	strb	r2, [r6, r3]
10011fa4:	1c2a      	adds	r2, r5, #0
10011fa6:	1c2b      	adds	r3, r5, #0
10011fa8:	8a79      	ldrh	r1, [r7, #18]
10011faa:	3212      	adds	r2, #18
10011fac:	b292      	uxth	r2, r2
10011fae:	54b1      	strb	r1, [r6, r2]
10011fb0:	8a7a      	ldrh	r2, [r7, #18]
10011fb2:	3313      	adds	r3, #19
10011fb4:	b29b      	uxth	r3, r3
10011fb6:	0a12      	lsrs	r2, r2, #8
10011fb8:	54f2      	strb	r2, [r6, r3]
10011fba:	9b00      	ldr	r3, [sp, #0]
10011fbc:	3514      	adds	r5, #20
10011fbe:	3301      	adds	r3, #1
10011fc0:	b2ad      	uxth	r5, r5
10011fc2:	9300      	str	r3, [sp, #0]
10011fc4:	3714      	adds	r7, #20
10011fc6:	e7d8      	b.n	10011f7a <gattm_add_svc_req_handler+0x5e>
10011fc8:	2114      	movs	r1, #20
10011fca:	4d13      	ldr	r5, [pc, #76]	; (10012018 <gattm_add_svc_req_handler+0xfc>)
10011fcc:	4b13      	ldr	r3, [pc, #76]	; (1001201c <gattm_add_svc_req_handler+0x100>)
10011fce:	4351      	muls	r1, r2
10011fd0:	802b      	strh	r3, [r5, #0]
10011fd2:	230b      	movs	r3, #11
10011fd4:	311e      	adds	r1, #30
10011fd6:	80ab      	strh	r3, [r5, #4]
10011fd8:	1c0b      	adds	r3, r1, #0
10011fda:	3b08      	subs	r3, #8
10011fdc:	71b3      	strb	r3, [r6, #6]
10011fde:	121b      	asrs	r3, r3, #8
10011fe0:	71f3      	strb	r3, [r6, #7]
10011fe2:	1c30      	adds	r0, r6, #0
10011fe4:	4b0e      	ldr	r3, [pc, #56]	; (10012020 <gattm_add_svc_req_handler+0x104>)
10011fe6:	4798      	blx	r3
10011fe8:	ab02      	add	r3, sp, #8
10011fea:	1dde      	adds	r6, r3, #7
10011fec:	1c30      	adds	r0, r6, #0
10011fee:	4b0d      	ldr	r3, [pc, #52]	; (10012024 <gattm_add_svc_req_handler+0x108>)
10011ff0:	4798      	blx	r3
10011ff2:	7833      	ldrb	r3, [r6, #0]
10011ff4:	20e2      	movs	r0, #226	; 0xe2
10011ff6:	2b00      	cmp	r3, #0
10011ff8:	d106      	bne.n	10012008 <gattm_add_svc_req_handler+0xec>
10011ffa:	68aa      	ldr	r2, [r5, #8]
10011ffc:	7853      	ldrb	r3, [r2, #1]
10011ffe:	7811      	ldrb	r1, [r2, #0]
10012000:	021b      	lsls	r3, r3, #8
10012002:	430b      	orrs	r3, r1
10012004:	8023      	strh	r3, [r4, #0]
10012006:	7890      	ldrb	r0, [r2, #2]
10012008:	b005      	add	sp, #20
1001200a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001200c:	1001b62c 	.word	0x1001b62c
10012010:	1001b2bc 	.word	0x1001b2bc
10012014:	100165c7 	.word	0x100165c7
10012018:	1001b2b0 	.word	0x1001b2b0
1001201c:	00000b01 	.word	0x00000b01
10012020:	10010871 	.word	0x10010871
10012024:	100108d5 	.word	0x100108d5

10012028 <gattm_add_attribute_req_handler>:
10012028:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001202a:	1c1f      	adds	r7, r3, #0
1001202c:	4b16      	ldr	r3, [pc, #88]	; (10012088 <gattm_add_attribute_req_handler+0x60>)
1001202e:	9100      	str	r1, [sp, #0]
10012030:	9201      	str	r2, [sp, #4]
10012032:	1c05      	adds	r5, r0, #0
10012034:	7946      	ldrb	r6, [r0, #5]
10012036:	6818      	ldr	r0, [r3, #0]
10012038:	2114      	movs	r1, #20
1001203a:	4b14      	ldr	r3, [pc, #80]	; (1001208c <gattm_add_attribute_req_handler+0x64>)
1001203c:	382a      	subs	r0, #42	; 0x2a
1001203e:	4798      	blx	r3
10012040:	2311      	movs	r3, #17
10012042:	4286      	cmp	r6, r0
10012044:	d21e      	bcs.n	10012084 <gattm_add_attribute_req_handler+0x5c>
10012046:	2414      	movs	r4, #20
10012048:	4366      	muls	r6, r4
1001204a:	19a8      	adds	r0, r5, r6
1001204c:	2100      	movs	r1, #0
1001204e:	2210      	movs	r2, #16
10012050:	4b0f      	ldr	r3, [pc, #60]	; (10012090 <gattm_add_attribute_req_handler+0x68>)
10012052:	3016      	adds	r0, #22
10012054:	4798      	blx	r3
10012056:	7968      	ldrb	r0, [r5, #5]
10012058:	1c3a      	adds	r2, r7, #0
1001205a:	4360      	muls	r0, r4
1001205c:	1828      	adds	r0, r5, r0
1001205e:	4b0d      	ldr	r3, [pc, #52]	; (10012094 <gattm_add_attribute_req_handler+0x6c>)
10012060:	3016      	adds	r0, #22
10012062:	9908      	ldr	r1, [sp, #32]
10012064:	4798      	blx	r3
10012066:	466a      	mov	r2, sp
10012068:	796b      	ldrb	r3, [r5, #5]
1001206a:	8812      	ldrh	r2, [r2, #0]
1001206c:	435c      	muls	r4, r3
1001206e:	192c      	adds	r4, r5, r4
10012070:	8522      	strh	r2, [r4, #40]	; 0x28
10012072:	466a      	mov	r2, sp
10012074:	8892      	ldrh	r2, [r2, #4]
10012076:	84e2      	strh	r2, [r4, #38]	; 0x26
10012078:	9a09      	ldr	r2, [sp, #36]	; 0x24
1001207a:	8013      	strh	r3, [r2, #0]
1001207c:	796b      	ldrb	r3, [r5, #5]
1001207e:	3301      	adds	r3, #1
10012080:	716b      	strb	r3, [r5, #5]
10012082:	2300      	movs	r3, #0
10012084:	1c18      	adds	r0, r3, #0
10012086:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10012088:	1001a36c 	.word	0x1001a36c
1001208c:	10013591 	.word	0x10013591
10012090:	100165d9 	.word	0x100165d9
10012094:	100165c7 	.word	0x100165c7

10012098 <gattm_att_set_value_req_handler>:
10012098:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001209a:	466b      	mov	r3, sp
1001209c:	1dde      	adds	r6, r3, #7
1001209e:	2300      	movs	r3, #0
100120a0:	1c0d      	adds	r5, r1, #0
100120a2:	210c      	movs	r1, #12
100120a4:	270b      	movs	r7, #11
100120a6:	4c17      	ldr	r4, [pc, #92]	; (10012104 <gattm_att_set_value_req_handler+0x6c>)
100120a8:	7033      	strb	r3, [r6, #0]
100120aa:	70e3      	strb	r3, [r4, #3]
100120ac:	4b16      	ldr	r3, [pc, #88]	; (10012108 <gattm_att_set_value_req_handler+0x70>)
100120ae:	7021      	strb	r1, [r4, #0]
100120b0:	8819      	ldrh	r1, [r3, #0]
100120b2:	881b      	ldrh	r3, [r3, #0]
100120b4:	7220      	strb	r0, [r4, #8]
100120b6:	0a1b      	lsrs	r3, r3, #8
100120b8:	7163      	strb	r3, [r4, #5]
100120ba:	0a00      	lsrs	r0, r0, #8
100120bc:	0a2b      	lsrs	r3, r5, #8
100120be:	7121      	strb	r1, [r4, #4]
100120c0:	7260      	strb	r0, [r4, #9]
100120c2:	1c11      	adds	r1, r2, #0
100120c4:	72a5      	strb	r5, [r4, #10]
100120c6:	1c2a      	adds	r2, r5, #0
100120c8:	72e3      	strb	r3, [r4, #11]
100120ca:	350c      	adds	r5, #12
100120cc:	4b0f      	ldr	r3, [pc, #60]	; (1001210c <gattm_att_set_value_req_handler+0x74>)
100120ce:	4810      	ldr	r0, [pc, #64]	; (10012110 <gattm_att_set_value_req_handler+0x78>)
100120d0:	7067      	strb	r7, [r4, #1]
100120d2:	70a7      	strb	r7, [r4, #2]
100120d4:	4798      	blx	r3
100120d6:	b2a9      	uxth	r1, r5
100120d8:	4b0e      	ldr	r3, [pc, #56]	; (10012114 <gattm_att_set_value_req_handler+0x7c>)
100120da:	4d0f      	ldr	r5, [pc, #60]	; (10012118 <gattm_att_set_value_req_handler+0x80>)
100120dc:	1c20      	adds	r0, r4, #0
100120de:	802b      	strh	r3, [r5, #0]
100120e0:	1c0b      	adds	r3, r1, #0
100120e2:	3b08      	subs	r3, #8
100120e4:	71a3      	strb	r3, [r4, #6]
100120e6:	121b      	asrs	r3, r3, #8
100120e8:	71e3      	strb	r3, [r4, #7]
100120ea:	4b0c      	ldr	r3, [pc, #48]	; (1001211c <gattm_att_set_value_req_handler+0x84>)
100120ec:	80af      	strh	r7, [r5, #4]
100120ee:	4798      	blx	r3
100120f0:	1c30      	adds	r0, r6, #0
100120f2:	4b0b      	ldr	r3, [pc, #44]	; (10012120 <gattm_att_set_value_req_handler+0x88>)
100120f4:	4798      	blx	r3
100120f6:	7833      	ldrb	r3, [r6, #0]
100120f8:	20e2      	movs	r0, #226	; 0xe2
100120fa:	2b00      	cmp	r3, #0
100120fc:	d101      	bne.n	10012102 <gattm_att_set_value_req_handler+0x6a>
100120fe:	68ab      	ldr	r3, [r5, #8]
10012100:	7898      	ldrb	r0, [r3, #2]
10012102:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10012104:	1001b62c 	.word	0x1001b62c
10012108:	1001b2bc 	.word	0x1001b2bc
1001210c:	100165c7 	.word	0x100165c7
10012110:	1001b638 	.word	0x1001b638
10012114:	00000b0d 	.word	0x00000b0d
10012118:	1001b2b0 	.word	0x1001b2b0
1001211c:	10010871 	.word	0x10010871
10012120:	100108d5 	.word	0x100108d5

10012124 <gattm_att_get_value_req_handler>:
10012124:	b5f0      	push	{r4, r5, r6, r7, lr}
10012126:	b085      	sub	sp, #20
10012128:	9201      	str	r2, [sp, #4]
1001212a:	220a      	movs	r2, #10
1001212c:	1c04      	adds	r4, r0, #0
1001212e:	481d      	ldr	r0, [pc, #116]	; (100121a4 <gattm_att_get_value_req_handler+0x80>)
10012130:	ab02      	add	r3, sp, #8
10012132:	1dde      	adds	r6, r3, #7
10012134:	7002      	strb	r2, [r0, #0]
10012136:	2300      	movs	r3, #0
10012138:	220b      	movs	r2, #11
1001213a:	4d1b      	ldr	r5, [pc, #108]	; (100121a8 <gattm_att_get_value_req_handler+0x84>)
1001213c:	1c0f      	adds	r7, r1, #0
1001213e:	8829      	ldrh	r1, [r5, #0]
10012140:	882d      	ldrh	r5, [r5, #0]
10012142:	7101      	strb	r1, [r0, #4]
10012144:	0a2d      	lsrs	r5, r5, #8
10012146:	7145      	strb	r5, [r0, #5]
10012148:	0a25      	lsrs	r5, r4, #8
1001214a:	7245      	strb	r5, [r0, #9]
1001214c:	4917      	ldr	r1, [pc, #92]	; (100121ac <gattm_att_get_value_req_handler+0x88>)
1001214e:	4d18      	ldr	r5, [pc, #96]	; (100121b0 <gattm_att_get_value_req_handler+0x8c>)
10012150:	7033      	strb	r3, [r6, #0]
10012152:	7042      	strb	r2, [r0, #1]
10012154:	7082      	strb	r2, [r0, #2]
10012156:	70c3      	strb	r3, [r0, #3]
10012158:	8029      	strh	r1, [r5, #0]
1001215a:	80aa      	strh	r2, [r5, #4]
1001215c:	71c3      	strb	r3, [r0, #7]
1001215e:	3a09      	subs	r2, #9
10012160:	210a      	movs	r1, #10
10012162:	4b14      	ldr	r3, [pc, #80]	; (100121b4 <gattm_att_get_value_req_handler+0x90>)
10012164:	7182      	strb	r2, [r0, #6]
10012166:	7204      	strb	r4, [r0, #8]
10012168:	4798      	blx	r3
1001216a:	1c30      	adds	r0, r6, #0
1001216c:	4b12      	ldr	r3, [pc, #72]	; (100121b8 <gattm_att_get_value_req_handler+0x94>)
1001216e:	4798      	blx	r3
10012170:	7833      	ldrb	r3, [r6, #0]
10012172:	20e2      	movs	r0, #226	; 0xe2
10012174:	2b00      	cmp	r3, #0
10012176:	d112      	bne.n	1001219e <gattm_att_get_value_req_handler+0x7a>
10012178:	68a9      	ldr	r1, [r5, #8]
1001217a:	9801      	ldr	r0, [sp, #4]
1001217c:	784d      	ldrb	r5, [r1, #1]
1001217e:	780b      	ldrb	r3, [r1, #0]
10012180:	78ca      	ldrb	r2, [r1, #3]
10012182:	022d      	lsls	r5, r5, #8
10012184:	431d      	orrs	r5, r3
10012186:	788b      	ldrb	r3, [r1, #2]
10012188:	0212      	lsls	r2, r2, #8
1001218a:	431a      	orrs	r2, r3
1001218c:	803a      	strh	r2, [r7, #0]
1001218e:	790e      	ldrb	r6, [r1, #4]
10012190:	4b0a      	ldr	r3, [pc, #40]	; (100121bc <gattm_att_get_value_req_handler+0x98>)
10012192:	3105      	adds	r1, #5
10012194:	4798      	blx	r3
10012196:	20e2      	movs	r0, #226	; 0xe2
10012198:	42ac      	cmp	r4, r5
1001219a:	d100      	bne.n	1001219e <gattm_att_get_value_req_handler+0x7a>
1001219c:	1c30      	adds	r0, r6, #0
1001219e:	b005      	add	sp, #20
100121a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100121a2:	46c0      	nop			; (mov r8, r8)
100121a4:	1001b62c 	.word	0x1001b62c
100121a8:	1001b2bc 	.word	0x1001b2bc
100121ac:	00000b0b 	.word	0x00000b0b
100121b0:	1001b2b0 	.word	0x1001b2b0
100121b4:	10010871 	.word	0x10010871
100121b8:	100108d5 	.word	0x100108d5
100121bc:	100165c7 	.word	0x100165c7

100121c0 <htpt_enable_rsp_handler>:
100121c0:	780b      	ldrb	r3, [r1, #0]
100121c2:	7013      	strb	r3, [r2, #0]
100121c4:	784b      	ldrb	r3, [r1, #1]
100121c6:	7053      	strb	r3, [r2, #1]
100121c8:	4770      	bx	lr

100121ca <htpt_temp_send_rsp_handler>:
100121ca:	780b      	ldrb	r3, [r1, #0]
100121cc:	7013      	strb	r3, [r2, #0]
100121ce:	4770      	bx	lr

100121d0 <htpt_meas_intv_upd_rsp_handler>:
100121d0:	780b      	ldrb	r3, [r1, #0]
100121d2:	7013      	strb	r3, [r2, #0]
100121d4:	4770      	bx	lr

100121d6 <htpt_meas_intv_chg_req_ind_handler>:
100121d6:	78cb      	ldrb	r3, [r1, #3]
100121d8:	7889      	ldrb	r1, [r1, #2]
100121da:	021b      	lsls	r3, r3, #8
100121dc:	430b      	orrs	r3, r1
100121de:	8013      	strh	r3, [r2, #0]
100121e0:	4770      	bx	lr

100121e2 <htpt_cfg_indntf_ind_handler>:
100121e2:	780b      	ldrb	r3, [r1, #0]
100121e4:	7013      	strb	r3, [r2, #0]
100121e6:	784b      	ldrb	r3, [r1, #1]
100121e8:	7053      	strb	r3, [r2, #1]
100121ea:	4770      	bx	lr

100121ec <pow>:
100121ec:	b5f0      	push	{r4, r5, r6, r7, lr}
100121ee:	465f      	mov	r7, fp
100121f0:	464d      	mov	r5, r9
100121f2:	4656      	mov	r6, sl
100121f4:	4644      	mov	r4, r8
100121f6:	b4f0      	push	{r4, r5, r6, r7}
100121f8:	b091      	sub	sp, #68	; 0x44
100121fa:	001f      	movs	r7, r3
100121fc:	0004      	movs	r4, r0
100121fe:	000d      	movs	r5, r1
10012200:	0016      	movs	r6, r2
10012202:	f000 fa01 	bl	10012608 <__ieee754_pow>
10012206:	4bcf      	ldr	r3, [pc, #828]	; (10012544 <pow+0x358>)
10012208:	9002      	str	r0, [sp, #8]
1001220a:	9103      	str	r1, [sp, #12]
1001220c:	469b      	mov	fp, r3
1001220e:	781b      	ldrb	r3, [r3, #0]
10012210:	b25b      	sxtb	r3, r3
10012212:	4699      	mov	r9, r3
10012214:	3301      	adds	r3, #1
10012216:	d04f      	beq.n	100122b8 <pow+0xcc>
10012218:	0032      	movs	r2, r6
1001221a:	003b      	movs	r3, r7
1001221c:	0030      	movs	r0, r6
1001221e:	0039      	movs	r1, r7
10012220:	f003 ffbe 	bl	100161a0 <__aeabi_dcmpun>
10012224:	9000      	str	r0, [sp, #0]
10012226:	2800      	cmp	r0, #0
10012228:	d146      	bne.n	100122b8 <pow+0xcc>
1001222a:	0022      	movs	r2, r4
1001222c:	002b      	movs	r3, r5
1001222e:	0020      	movs	r0, r4
10012230:	0029      	movs	r1, r5
10012232:	f003 ffb5 	bl	100161a0 <__aeabi_dcmpun>
10012236:	2200      	movs	r2, #0
10012238:	4682      	mov	sl, r0
1001223a:	2800      	cmp	r0, #0
1001223c:	d134      	bne.n	100122a8 <pow+0xbc>
1001223e:	2300      	movs	r3, #0
10012240:	0020      	movs	r0, r4
10012242:	0029      	movs	r1, r5
10012244:	f001 fb2a 	bl	1001389c <__aeabi_dcmpeq>
10012248:	2800      	cmp	r0, #0
1001224a:	d03a      	beq.n	100122c2 <pow+0xd6>
1001224c:	2200      	movs	r2, #0
1001224e:	2300      	movs	r3, #0
10012250:	0030      	movs	r0, r6
10012252:	0039      	movs	r1, r7
10012254:	f001 fb22 	bl	1001389c <__aeabi_dcmpeq>
10012258:	9005      	str	r0, [sp, #20]
1001225a:	2800      	cmp	r0, #0
1001225c:	d100      	bne.n	10012260 <pow+0x74>
1001225e:	e074      	b.n	1001234a <pow+0x15e>
10012260:	ab06      	add	r3, sp, #24
10012262:	4698      	mov	r8, r3
10012264:	2301      	movs	r3, #1
10012266:	4642      	mov	r2, r8
10012268:	9306      	str	r3, [sp, #24]
1001226a:	4bb7      	ldr	r3, [pc, #732]	; (10012548 <pow+0x35c>)
1001226c:	6053      	str	r3, [r2, #4]
1001226e:	4643      	mov	r3, r8
10012270:	4652      	mov	r2, sl
10012272:	609c      	str	r4, [r3, #8]
10012274:	60dd      	str	r5, [r3, #12]
10012276:	621a      	str	r2, [r3, #32]
10012278:	611e      	str	r6, [r3, #16]
1001227a:	615f      	str	r7, [r3, #20]
1001227c:	4642      	mov	r2, r8
1001227e:	2300      	movs	r3, #0
10012280:	2400      	movs	r4, #0
10012282:	6193      	str	r3, [r2, #24]
10012284:	61d4      	str	r4, [r2, #28]
10012286:	464b      	mov	r3, r9
10012288:	2b00      	cmp	r3, #0
1001228a:	d100      	bne.n	1001228e <pow+0xa2>
1001228c:	e094      	b.n	100123b8 <pow+0x1cc>
1001228e:	2300      	movs	r3, #0
10012290:	4cae      	ldr	r4, [pc, #696]	; (1001254c <pow+0x360>)
10012292:	9300      	str	r3, [sp, #0]
10012294:	9401      	str	r4, [sp, #4]
10012296:	9800      	ldr	r0, [sp, #0]
10012298:	9901      	ldr	r1, [sp, #4]
1001229a:	b011      	add	sp, #68	; 0x44
1001229c:	bc3c      	pop	{r2, r3, r4, r5}
1001229e:	4690      	mov	r8, r2
100122a0:	4699      	mov	r9, r3
100122a2:	46a2      	mov	sl, r4
100122a4:	46ab      	mov	fp, r5
100122a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
100122a8:	2300      	movs	r3, #0
100122aa:	0030      	movs	r0, r6
100122ac:	0039      	movs	r1, r7
100122ae:	f001 faf5 	bl	1001389c <__aeabi_dcmpeq>
100122b2:	2800      	cmp	r0, #0
100122b4:	d000      	beq.n	100122b8 <pow+0xcc>
100122b6:	e0eb      	b.n	10012490 <pow+0x2a4>
100122b8:	9b02      	ldr	r3, [sp, #8]
100122ba:	9c03      	ldr	r4, [sp, #12]
100122bc:	9300      	str	r3, [sp, #0]
100122be:	9401      	str	r4, [sp, #4]
100122c0:	e7e9      	b.n	10012296 <pow+0xaa>
100122c2:	9802      	ldr	r0, [sp, #8]
100122c4:	9903      	ldr	r1, [sp, #12]
100122c6:	f001 f82b 	bl	10013320 <finite>
100122ca:	4681      	mov	r9, r0
100122cc:	2800      	cmp	r0, #0
100122ce:	d100      	bne.n	100122d2 <pow+0xe6>
100122d0:	e086      	b.n	100123e0 <pow+0x1f4>
100122d2:	9802      	ldr	r0, [sp, #8]
100122d4:	9903      	ldr	r1, [sp, #12]
100122d6:	2200      	movs	r2, #0
100122d8:	2300      	movs	r3, #0
100122da:	f001 fadf 	bl	1001389c <__aeabi_dcmpeq>
100122de:	2800      	cmp	r0, #0
100122e0:	d0ea      	beq.n	100122b8 <pow+0xcc>
100122e2:	0020      	movs	r0, r4
100122e4:	0029      	movs	r1, r5
100122e6:	f001 f81b 	bl	10013320 <finite>
100122ea:	9a02      	ldr	r2, [sp, #8]
100122ec:	9b03      	ldr	r3, [sp, #12]
100122ee:	9200      	str	r2, [sp, #0]
100122f0:	9301      	str	r3, [sp, #4]
100122f2:	2800      	cmp	r0, #0
100122f4:	d0cf      	beq.n	10012296 <pow+0xaa>
100122f6:	0030      	movs	r0, r6
100122f8:	0039      	movs	r1, r7
100122fa:	f001 f811 	bl	10013320 <finite>
100122fe:	9a02      	ldr	r2, [sp, #8]
10012300:	9b03      	ldr	r3, [sp, #12]
10012302:	9200      	str	r2, [sp, #0]
10012304:	9301      	str	r3, [sp, #4]
10012306:	2800      	cmp	r0, #0
10012308:	d0c5      	beq.n	10012296 <pow+0xaa>
1001230a:	ab06      	add	r3, sp, #24
1001230c:	4698      	mov	r8, r3
1001230e:	2304      	movs	r3, #4
10012310:	4642      	mov	r2, r8
10012312:	9306      	str	r3, [sp, #24]
10012314:	4b8c      	ldr	r3, [pc, #560]	; (10012548 <pow+0x35c>)
10012316:	6094      	str	r4, [r2, #8]
10012318:	60d5      	str	r5, [r2, #12]
1001231a:	6053      	str	r3, [r2, #4]
1001231c:	2300      	movs	r3, #0
1001231e:	2400      	movs	r4, #0
10012320:	6213      	str	r3, [r2, #32]
10012322:	2300      	movs	r3, #0
10012324:	6193      	str	r3, [r2, #24]
10012326:	61d4      	str	r4, [r2, #28]
10012328:	465b      	mov	r3, fp
1001232a:	781b      	ldrb	r3, [r3, #0]
1001232c:	6116      	str	r6, [r2, #16]
1001232e:	6157      	str	r7, [r2, #20]
10012330:	b25b      	sxtb	r3, r3
10012332:	2b02      	cmp	r3, #2
10012334:	d004      	beq.n	10012340 <pow+0x154>
10012336:	4640      	mov	r0, r8
10012338:	f000 fffc 	bl	10013334 <matherr>
1001233c:	2800      	cmp	r0, #0
1001233e:	d140      	bne.n	100123c2 <pow+0x1d6>
10012340:	f004 f8fc 	bl	1001653c <__errno>
10012344:	2322      	movs	r3, #34	; 0x22
10012346:	6003      	str	r3, [r0, #0]
10012348:	e03b      	b.n	100123c2 <pow+0x1d6>
1001234a:	0030      	movs	r0, r6
1001234c:	0039      	movs	r1, r7
1001234e:	f000 ffe7 	bl	10013320 <finite>
10012352:	9a02      	ldr	r2, [sp, #8]
10012354:	9b03      	ldr	r3, [sp, #12]
10012356:	9200      	str	r2, [sp, #0]
10012358:	9301      	str	r3, [sp, #4]
1001235a:	2800      	cmp	r0, #0
1001235c:	d09b      	beq.n	10012296 <pow+0xaa>
1001235e:	2200      	movs	r2, #0
10012360:	2300      	movs	r3, #0
10012362:	0030      	movs	r0, r6
10012364:	0039      	movs	r1, r7
10012366:	f001 fa9f 	bl	100138a8 <__aeabi_dcmplt>
1001236a:	2800      	cmp	r0, #0
1001236c:	d100      	bne.n	10012370 <pow+0x184>
1001236e:	e792      	b.n	10012296 <pow+0xaa>
10012370:	ab06      	add	r3, sp, #24
10012372:	4698      	mov	r8, r3
10012374:	2301      	movs	r3, #1
10012376:	4642      	mov	r2, r8
10012378:	9306      	str	r3, [sp, #24]
1001237a:	4b73      	ldr	r3, [pc, #460]	; (10012548 <pow+0x35c>)
1001237c:	6053      	str	r3, [r2, #4]
1001237e:	4643      	mov	r3, r8
10012380:	9a05      	ldr	r2, [sp, #20]
10012382:	609c      	str	r4, [r3, #8]
10012384:	60dd      	str	r5, [r3, #12]
10012386:	621a      	str	r2, [r3, #32]
10012388:	611e      	str	r6, [r3, #16]
1001238a:	615f      	str	r7, [r3, #20]
1001238c:	465b      	mov	r3, fp
1001238e:	781b      	ldrb	r3, [r3, #0]
10012390:	b25b      	sxtb	r3, r3
10012392:	2b00      	cmp	r3, #0
10012394:	d00b      	beq.n	100123ae <pow+0x1c2>
10012396:	2000      	movs	r0, #0
10012398:	4642      	mov	r2, r8
1001239a:	496d      	ldr	r1, [pc, #436]	; (10012550 <pow+0x364>)
1001239c:	6190      	str	r0, [r2, #24]
1001239e:	61d1      	str	r1, [r2, #28]
100123a0:	2b02      	cmp	r3, #2
100123a2:	d109      	bne.n	100123b8 <pow+0x1cc>
100123a4:	f004 f8ca 	bl	1001653c <__errno>
100123a8:	2321      	movs	r3, #33	; 0x21
100123aa:	6003      	str	r3, [r0, #0]
100123ac:	e009      	b.n	100123c2 <pow+0x1d6>
100123ae:	4642      	mov	r2, r8
100123b0:	2300      	movs	r3, #0
100123b2:	2400      	movs	r4, #0
100123b4:	6193      	str	r3, [r2, #24]
100123b6:	61d4      	str	r4, [r2, #28]
100123b8:	4640      	mov	r0, r8
100123ba:	f000 ffbb 	bl	10013334 <matherr>
100123be:	2800      	cmp	r0, #0
100123c0:	d0f0      	beq.n	100123a4 <pow+0x1b8>
100123c2:	4643      	mov	r3, r8
100123c4:	6a1b      	ldr	r3, [r3, #32]
100123c6:	2b00      	cmp	r3, #0
100123c8:	d004      	beq.n	100123d4 <pow+0x1e8>
100123ca:	f004 f8b7 	bl	1001653c <__errno>
100123ce:	4643      	mov	r3, r8
100123d0:	6a1b      	ldr	r3, [r3, #32]
100123d2:	6003      	str	r3, [r0, #0]
100123d4:	4643      	mov	r3, r8
100123d6:	69dc      	ldr	r4, [r3, #28]
100123d8:	699b      	ldr	r3, [r3, #24]
100123da:	9300      	str	r3, [sp, #0]
100123dc:	9401      	str	r4, [sp, #4]
100123de:	e75a      	b.n	10012296 <pow+0xaa>
100123e0:	0020      	movs	r0, r4
100123e2:	0029      	movs	r1, r5
100123e4:	f000 ff9c 	bl	10013320 <finite>
100123e8:	2800      	cmp	r0, #0
100123ea:	d100      	bne.n	100123ee <pow+0x202>
100123ec:	e771      	b.n	100122d2 <pow+0xe6>
100123ee:	0030      	movs	r0, r6
100123f0:	0039      	movs	r1, r7
100123f2:	f000 ff95 	bl	10013320 <finite>
100123f6:	2800      	cmp	r0, #0
100123f8:	d100      	bne.n	100123fc <pow+0x210>
100123fa:	e76a      	b.n	100122d2 <pow+0xe6>
100123fc:	9802      	ldr	r0, [sp, #8]
100123fe:	9903      	ldr	r1, [sp, #12]
10012400:	000b      	movs	r3, r1
10012402:	0002      	movs	r2, r0
10012404:	f003 fecc 	bl	100161a0 <__aeabi_dcmpun>
10012408:	ab06      	add	r3, sp, #24
1001240a:	4698      	mov	r8, r3
1001240c:	2800      	cmp	r0, #0
1001240e:	d17a      	bne.n	10012506 <pow+0x31a>
10012410:	2303      	movs	r3, #3
10012412:	4642      	mov	r2, r8
10012414:	9306      	str	r3, [sp, #24]
10012416:	4b4c      	ldr	r3, [pc, #304]	; (10012548 <pow+0x35c>)
10012418:	6210      	str	r0, [r2, #32]
1001241a:	6053      	str	r3, [r2, #4]
1001241c:	465b      	mov	r3, fp
1001241e:	781b      	ldrb	r3, [r3, #0]
10012420:	6094      	str	r4, [r2, #8]
10012422:	60d5      	str	r5, [r2, #12]
10012424:	b25b      	sxtb	r3, r3
10012426:	6116      	str	r6, [r2, #16]
10012428:	6157      	str	r7, [r2, #20]
1001242a:	4699      	mov	r9, r3
1001242c:	2b00      	cmp	r3, #0
1001242e:	d148      	bne.n	100124c2 <pow+0x2d6>
10012430:	22e0      	movs	r2, #224	; 0xe0
10012432:	4641      	mov	r1, r8
10012434:	4b47      	ldr	r3, [pc, #284]	; (10012554 <pow+0x368>)
10012436:	0612      	lsls	r2, r2, #24
10012438:	618a      	str	r2, [r1, #24]
1001243a:	61cb      	str	r3, [r1, #28]
1001243c:	0020      	movs	r0, r4
1001243e:	2200      	movs	r2, #0
10012440:	2300      	movs	r3, #0
10012442:	0029      	movs	r1, r5
10012444:	f001 fa30 	bl	100138a8 <__aeabi_dcmplt>
10012448:	2800      	cmp	r0, #0
1001244a:	d100      	bne.n	1001244e <pow+0x262>
1001244c:	e773      	b.n	10012336 <pow+0x14a>
1001244e:	2200      	movs	r2, #0
10012450:	4b41      	ldr	r3, [pc, #260]	; (10012558 <pow+0x36c>)
10012452:	0030      	movs	r0, r6
10012454:	0039      	movs	r1, r7
10012456:	f003 f8d5 	bl	10015604 <__aeabi_dmul>
1001245a:	0004      	movs	r4, r0
1001245c:	000d      	movs	r5, r1
1001245e:	f000 ff71 	bl	10013344 <rint>
10012462:	0002      	movs	r2, r0
10012464:	000b      	movs	r3, r1
10012466:	0020      	movs	r0, r4
10012468:	0029      	movs	r1, r5
1001246a:	f001 fa17 	bl	1001389c <__aeabi_dcmpeq>
1001246e:	2800      	cmp	r0, #0
10012470:	d105      	bne.n	1001247e <pow+0x292>
10012472:	22e0      	movs	r2, #224	; 0xe0
10012474:	4b39      	ldr	r3, [pc, #228]	; (1001255c <pow+0x370>)
10012476:	0612      	lsls	r2, r2, #24
10012478:	4641      	mov	r1, r8
1001247a:	618a      	str	r2, [r1, #24]
1001247c:	61cb      	str	r3, [r1, #28]
1001247e:	465b      	mov	r3, fp
10012480:	781b      	ldrb	r3, [r3, #0]
10012482:	b25b      	sxtb	r3, r3
10012484:	4699      	mov	r9, r3
10012486:	464b      	mov	r3, r9
10012488:	2b02      	cmp	r3, #2
1001248a:	d000      	beq.n	1001248e <pow+0x2a2>
1001248c:	e753      	b.n	10012336 <pow+0x14a>
1001248e:	e757      	b.n	10012340 <pow+0x154>
10012490:	ab06      	add	r3, sp, #24
10012492:	4698      	mov	r8, r3
10012494:	2301      	movs	r3, #1
10012496:	4642      	mov	r2, r8
10012498:	9306      	str	r3, [sp, #24]
1001249a:	4b2b      	ldr	r3, [pc, #172]	; (10012548 <pow+0x35c>)
1001249c:	6053      	str	r3, [r2, #4]
1001249e:	4643      	mov	r3, r8
100124a0:	609c      	str	r4, [r3, #8]
100124a2:	60dd      	str	r5, [r3, #12]
100124a4:	2400      	movs	r4, #0
100124a6:	9a00      	ldr	r2, [sp, #0]
100124a8:	4d28      	ldr	r5, [pc, #160]	; (1001254c <pow+0x360>)
100124aa:	621a      	str	r2, [r3, #32]
100124ac:	611e      	str	r6, [r3, #16]
100124ae:	615f      	str	r7, [r3, #20]
100124b0:	619c      	str	r4, [r3, #24]
100124b2:	61dd      	str	r5, [r3, #28]
100124b4:	464b      	mov	r3, r9
100124b6:	9400      	str	r4, [sp, #0]
100124b8:	9501      	str	r5, [sp, #4]
100124ba:	2b02      	cmp	r3, #2
100124bc:	d000      	beq.n	100124c0 <pow+0x2d4>
100124be:	e77b      	b.n	100123b8 <pow+0x1cc>
100124c0:	e6e9      	b.n	10012296 <pow+0xaa>
100124c2:	2200      	movs	r2, #0
100124c4:	4641      	mov	r1, r8
100124c6:	4b26      	ldr	r3, [pc, #152]	; (10012560 <pow+0x374>)
100124c8:	0020      	movs	r0, r4
100124ca:	618a      	str	r2, [r1, #24]
100124cc:	61cb      	str	r3, [r1, #28]
100124ce:	2200      	movs	r2, #0
100124d0:	2300      	movs	r3, #0
100124d2:	0029      	movs	r1, r5
100124d4:	f001 f9e8 	bl	100138a8 <__aeabi_dcmplt>
100124d8:	2800      	cmp	r0, #0
100124da:	d0d4      	beq.n	10012486 <pow+0x29a>
100124dc:	2200      	movs	r2, #0
100124de:	4b1e      	ldr	r3, [pc, #120]	; (10012558 <pow+0x36c>)
100124e0:	0030      	movs	r0, r6
100124e2:	0039      	movs	r1, r7
100124e4:	f003 f88e 	bl	10015604 <__aeabi_dmul>
100124e8:	0004      	movs	r4, r0
100124ea:	000d      	movs	r5, r1
100124ec:	f000 ff2a 	bl	10013344 <rint>
100124f0:	0002      	movs	r2, r0
100124f2:	000b      	movs	r3, r1
100124f4:	0020      	movs	r0, r4
100124f6:	0029      	movs	r1, r5
100124f8:	f001 f9d0 	bl	1001389c <__aeabi_dcmpeq>
100124fc:	2800      	cmp	r0, #0
100124fe:	d1be      	bne.n	1001247e <pow+0x292>
10012500:	2200      	movs	r2, #0
10012502:	4b13      	ldr	r3, [pc, #76]	; (10012550 <pow+0x364>)
10012504:	e7b8      	b.n	10012478 <pow+0x28c>
10012506:	2301      	movs	r3, #1
10012508:	4642      	mov	r2, r8
1001250a:	9306      	str	r3, [sp, #24]
1001250c:	4b0e      	ldr	r3, [pc, #56]	; (10012548 <pow+0x35c>)
1001250e:	6053      	str	r3, [r2, #4]
10012510:	4643      	mov	r3, r8
10012512:	464a      	mov	r2, r9
10012514:	609c      	str	r4, [r3, #8]
10012516:	60dd      	str	r5, [r3, #12]
10012518:	621a      	str	r2, [r3, #32]
1001251a:	611e      	str	r6, [r3, #16]
1001251c:	615f      	str	r7, [r3, #20]
1001251e:	2400      	movs	r4, #0
10012520:	465b      	mov	r3, fp
10012522:	571c      	ldrsb	r4, [r3, r4]
10012524:	2c00      	cmp	r4, #0
10012526:	d100      	bne.n	1001252a <pow+0x33e>
10012528:	e741      	b.n	100123ae <pow+0x1c2>
1001252a:	2300      	movs	r3, #0
1001252c:	2200      	movs	r2, #0
1001252e:	0019      	movs	r1, r3
10012530:	0010      	movs	r0, r2
10012532:	f002 fc43 	bl	10014dbc <__aeabi_ddiv>
10012536:	4643      	mov	r3, r8
10012538:	6198      	str	r0, [r3, #24]
1001253a:	61d9      	str	r1, [r3, #28]
1001253c:	2c02      	cmp	r4, #2
1001253e:	d100      	bne.n	10012542 <pow+0x356>
10012540:	e730      	b.n	100123a4 <pow+0x1b8>
10012542:	e739      	b.n	100123b8 <pow+0x1cc>
10012544:	100188d0 	.word	0x100188d0
10012548:	100186ac 	.word	0x100186ac
1001254c:	3ff00000 	.word	0x3ff00000
10012550:	fff00000 	.word	0xfff00000
10012554:	47efffff 	.word	0x47efffff
10012558:	3fe00000 	.word	0x3fe00000
1001255c:	c7efffff 	.word	0xc7efffff
10012560:	7ff00000 	.word	0x7ff00000

10012564 <sqrtf>:
10012564:	b5f0      	push	{r4, r5, r6, r7, lr}
10012566:	2600      	movs	r6, #0
10012568:	b08d      	sub	sp, #52	; 0x34
1001256a:	1c04      	adds	r4, r0, #0
1001256c:	f000 fe78 	bl	10013260 <__ieee754_sqrtf>
10012570:	4b23      	ldr	r3, [pc, #140]	; (10012600 <sqrtf+0x9c>)
10012572:	1c05      	adds	r5, r0, #0
10012574:	579e      	ldrsb	r6, [r3, r6]
10012576:	1c73      	adds	r3, r6, #1
10012578:	d00b      	beq.n	10012592 <sqrtf+0x2e>
1001257a:	1c21      	adds	r1, r4, #0
1001257c:	1c20      	adds	r0, r4, #0
1001257e:	f002 f831 	bl	100145e4 <__aeabi_fcmpun>
10012582:	1e07      	subs	r7, r0, #0
10012584:	d105      	bne.n	10012592 <sqrtf+0x2e>
10012586:	2100      	movs	r1, #0
10012588:	1c20      	adds	r0, r4, #0
1001258a:	f001 f9c7 	bl	1001391c <__aeabi_fcmplt>
1001258e:	2800      	cmp	r0, #0
10012590:	d102      	bne.n	10012598 <sqrtf+0x34>
10012592:	1c28      	adds	r0, r5, #0
10012594:	b00d      	add	sp, #52	; 0x34
10012596:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012598:	2301      	movs	r3, #1
1001259a:	9302      	str	r3, [sp, #8]
1001259c:	4b19      	ldr	r3, [pc, #100]	; (10012604 <sqrtf+0xa0>)
1001259e:	1c20      	adds	r0, r4, #0
100125a0:	9303      	str	r3, [sp, #12]
100125a2:	970a      	str	r7, [sp, #40]	; 0x28
100125a4:	f003 fecc 	bl	10016340 <__aeabi_f2d>
100125a8:	2200      	movs	r2, #0
100125aa:	9006      	str	r0, [sp, #24]
100125ac:	9107      	str	r1, [sp, #28]
100125ae:	9004      	str	r0, [sp, #16]
100125b0:	9105      	str	r1, [sp, #20]
100125b2:	2300      	movs	r3, #0
100125b4:	2e00      	cmp	r6, #0
100125b6:	d014      	beq.n	100125e2 <sqrtf+0x7e>
100125b8:	0010      	movs	r0, r2
100125ba:	0019      	movs	r1, r3
100125bc:	f002 fbfe 	bl	10014dbc <__aeabi_ddiv>
100125c0:	9008      	str	r0, [sp, #32]
100125c2:	9109      	str	r1, [sp, #36]	; 0x24
100125c4:	2e02      	cmp	r6, #2
100125c6:	d10e      	bne.n	100125e6 <sqrtf+0x82>
100125c8:	f003 ffb8 	bl	1001653c <__errno>
100125cc:	2321      	movs	r3, #33	; 0x21
100125ce:	6003      	str	r3, [r0, #0]
100125d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
100125d2:	9301      	str	r3, [sp, #4]
100125d4:	2b00      	cmp	r3, #0
100125d6:	d10c      	bne.n	100125f2 <sqrtf+0x8e>
100125d8:	9808      	ldr	r0, [sp, #32]
100125da:	9909      	ldr	r1, [sp, #36]	; 0x24
100125dc:	f003 ff04 	bl	100163e8 <__aeabi_d2f>
100125e0:	e7d8      	b.n	10012594 <sqrtf+0x30>
100125e2:	9208      	str	r2, [sp, #32]
100125e4:	9309      	str	r3, [sp, #36]	; 0x24
100125e6:	a802      	add	r0, sp, #8
100125e8:	f000 fea4 	bl	10013334 <matherr>
100125ec:	2800      	cmp	r0, #0
100125ee:	d1ef      	bne.n	100125d0 <sqrtf+0x6c>
100125f0:	e7ea      	b.n	100125c8 <sqrtf+0x64>
100125f2:	f003 ffa3 	bl	1001653c <__errno>
100125f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
100125f8:	9301      	str	r3, [sp, #4]
100125fa:	6003      	str	r3, [r0, #0]
100125fc:	e7ec      	b.n	100125d8 <sqrtf+0x74>
100125fe:	46c0      	nop			; (mov r8, r8)
10012600:	100188d0 	.word	0x100188d0
10012604:	100186b0 	.word	0x100186b0

10012608 <__ieee754_pow>:
10012608:	b5f0      	push	{r4, r5, r6, r7, lr}
1001260a:	4656      	mov	r6, sl
1001260c:	464d      	mov	r5, r9
1001260e:	4644      	mov	r4, r8
10012610:	465f      	mov	r7, fp
10012612:	b4f0      	push	{r4, r5, r6, r7}
10012614:	001c      	movs	r4, r3
10012616:	0013      	movs	r3, r2
10012618:	0067      	lsls	r7, r4, #1
1001261a:	b091      	sub	sp, #68	; 0x44
1001261c:	087f      	lsrs	r7, r7, #1
1001261e:	9300      	str	r3, [sp, #0]
10012620:	9401      	str	r4, [sp, #4]
10012622:	0006      	movs	r6, r0
10012624:	000d      	movs	r5, r1
10012626:	4680      	mov	r8, r0
10012628:	4689      	mov	r9, r1
1001262a:	46a2      	mov	sl, r4
1001262c:	433b      	orrs	r3, r7
1001262e:	d032      	beq.n	10012696 <__ieee754_pow+0x8e>
10012630:	4b6e      	ldr	r3, [pc, #440]	; (100127ec <__ieee754_pow+0x1e4>)
10012632:	006c      	lsls	r4, r5, #1
10012634:	0864      	lsrs	r4, r4, #1
10012636:	429c      	cmp	r4, r3
10012638:	dc29      	bgt.n	1001268e <__ieee754_pow+0x86>
1001263a:	d026      	beq.n	1001268a <__ieee754_pow+0x82>
1001263c:	429f      	cmp	r7, r3
1001263e:	dc26      	bgt.n	1001268e <__ieee754_pow+0x86>
10012640:	4b6a      	ldr	r3, [pc, #424]	; (100127ec <__ieee754_pow+0x1e4>)
10012642:	429f      	cmp	r7, r3
10012644:	d100      	bne.n	10012648 <__ieee754_pow+0x40>
10012646:	e089      	b.n	1001275c <__ieee754_pow+0x154>
10012648:	2300      	movs	r3, #0
1001264a:	469b      	mov	fp, r3
1001264c:	464b      	mov	r3, r9
1001264e:	2b00      	cmp	r3, #0
10012650:	da00      	bge.n	10012654 <__ieee754_pow+0x4c>
10012652:	e087      	b.n	10012764 <__ieee754_pow+0x15c>
10012654:	2a00      	cmp	r2, #0
10012656:	d12f      	bne.n	100126b8 <__ieee754_pow+0xb0>
10012658:	4b64      	ldr	r3, [pc, #400]	; (100127ec <__ieee754_pow+0x1e4>)
1001265a:	429f      	cmp	r7, r3
1001265c:	d100      	bne.n	10012660 <__ieee754_pow+0x58>
1001265e:	e09f      	b.n	100127a0 <__ieee754_pow+0x198>
10012660:	4b63      	ldr	r3, [pc, #396]	; (100127f0 <__ieee754_pow+0x1e8>)
10012662:	429f      	cmp	r7, r3
10012664:	d05d      	beq.n	10012722 <__ieee754_pow+0x11a>
10012666:	2380      	movs	r3, #128	; 0x80
10012668:	05db      	lsls	r3, r3, #23
1001266a:	459a      	cmp	sl, r3
1001266c:	d101      	bne.n	10012672 <__ieee754_pow+0x6a>
1001266e:	f000 fbc1 	bl	10012df4 <__ieee754_pow+0x7ec>
10012672:	4b60      	ldr	r3, [pc, #384]	; (100127f4 <__ieee754_pow+0x1ec>)
10012674:	459a      	cmp	sl, r3
10012676:	d11f      	bne.n	100126b8 <__ieee754_pow+0xb0>
10012678:	464b      	mov	r3, r9
1001267a:	2b00      	cmp	r3, #0
1001267c:	db1c      	blt.n	100126b8 <__ieee754_pow+0xb0>
1001267e:	0030      	movs	r0, r6
10012680:	0029      	movs	r1, r5
10012682:	f000 fcf7 	bl	10013074 <__ieee754_sqrt>
10012686:	0006      	movs	r6, r0
10012688:	e007      	b.n	1001269a <__ieee754_pow+0x92>
1001268a:	2800      	cmp	r0, #0
1001268c:	d00d      	beq.n	100126aa <__ieee754_pow+0xa2>
1001268e:	4b5a      	ldr	r3, [pc, #360]	; (100127f8 <__ieee754_pow+0x1f0>)
10012690:	18e0      	adds	r0, r4, r3
10012692:	4330      	orrs	r0, r6
10012694:	d10b      	bne.n	100126ae <__ieee754_pow+0xa6>
10012696:	2600      	movs	r6, #0
10012698:	4955      	ldr	r1, [pc, #340]	; (100127f0 <__ieee754_pow+0x1e8>)
1001269a:	0030      	movs	r0, r6
1001269c:	b011      	add	sp, #68	; 0x44
1001269e:	bc3c      	pop	{r2, r3, r4, r5}
100126a0:	4690      	mov	r8, r2
100126a2:	4699      	mov	r9, r3
100126a4:	46a2      	mov	sl, r4
100126a6:	46ab      	mov	fp, r5
100126a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100126aa:	42a7      	cmp	r7, r4
100126ac:	ddc8      	ble.n	10012640 <__ieee754_pow+0x38>
100126ae:	4853      	ldr	r0, [pc, #332]	; (100127fc <__ieee754_pow+0x1f4>)
100126b0:	f000 fe42 	bl	10013338 <nan>
100126b4:	0006      	movs	r6, r0
100126b6:	e7f0      	b.n	1001269a <__ieee754_pow+0x92>
100126b8:	0030      	movs	r0, r6
100126ba:	0029      	movs	r1, r5
100126bc:	f000 fe2c 	bl	10013318 <fabs>
100126c0:	4643      	mov	r3, r8
100126c2:	2b00      	cmp	r3, #0
100126c4:	d01d      	beq.n	10012702 <__ieee754_pow+0xfa>
100126c6:	0feb      	lsrs	r3, r5, #31
100126c8:	3b01      	subs	r3, #1
100126ca:	4698      	mov	r8, r3
100126cc:	465b      	mov	r3, fp
100126ce:	4642      	mov	r2, r8
100126d0:	4313      	orrs	r3, r2
100126d2:	d079      	beq.n	100127c8 <__ieee754_pow+0x1c0>
100126d4:	4b4a      	ldr	r3, [pc, #296]	; (10012800 <__ieee754_pow+0x1f8>)
100126d6:	429f      	cmp	r7, r3
100126d8:	dc00      	bgt.n	100126dc <__ieee754_pow+0xd4>
100126da:	e09f      	b.n	1001281c <__ieee754_pow+0x214>
100126dc:	4b49      	ldr	r3, [pc, #292]	; (10012804 <__ieee754_pow+0x1fc>)
100126de:	429f      	cmp	r7, r3
100126e0:	dc01      	bgt.n	100126e6 <__ieee754_pow+0xde>
100126e2:	f000 fbce 	bl	10012e82 <__ieee754_pow+0x87a>
100126e6:	4b48      	ldr	r3, [pc, #288]	; (10012808 <__ieee754_pow+0x200>)
100126e8:	429c      	cmp	r4, r3
100126ea:	dd79      	ble.n	100127e0 <__ieee754_pow+0x1d8>
100126ec:	4653      	mov	r3, sl
100126ee:	2b00      	cmp	r3, #0
100126f0:	dd79      	ble.n	100127e6 <__ieee754_pow+0x1de>
100126f2:	4a46      	ldr	r2, [pc, #280]	; (1001280c <__ieee754_pow+0x204>)
100126f4:	4b46      	ldr	r3, [pc, #280]	; (10012810 <__ieee754_pow+0x208>)
100126f6:	0010      	movs	r0, r2
100126f8:	0019      	movs	r1, r3
100126fa:	f002 ff83 	bl	10015604 <__aeabi_dmul>
100126fe:	0006      	movs	r6, r0
10012700:	e7cb      	b.n	1001269a <__ieee754_pow+0x92>
10012702:	2c00      	cmp	r4, #0
10012704:	d004      	beq.n	10012710 <__ieee754_pow+0x108>
10012706:	4a3a      	ldr	r2, [pc, #232]	; (100127f0 <__ieee754_pow+0x1e8>)
10012708:	00ab      	lsls	r3, r5, #2
1001270a:	089b      	lsrs	r3, r3, #2
1001270c:	4293      	cmp	r3, r2
1001270e:	d1da      	bne.n	100126c6 <__ieee754_pow+0xbe>
10012710:	4653      	mov	r3, sl
10012712:	2b00      	cmp	r3, #0
10012714:	da00      	bge.n	10012718 <__ieee754_pow+0x110>
10012716:	e3ad      	b.n	10012e74 <__ieee754_pow+0x86c>
10012718:	464b      	mov	r3, r9
1001271a:	2b00      	cmp	r3, #0
1001271c:	db0d      	blt.n	1001273a <__ieee754_pow+0x132>
1001271e:	0006      	movs	r6, r0
10012720:	e7bb      	b.n	1001269a <__ieee754_pow+0x92>
10012722:	4653      	mov	r3, sl
10012724:	0029      	movs	r1, r5
10012726:	2b00      	cmp	r3, #0
10012728:	dab7      	bge.n	1001269a <__ieee754_pow+0x92>
1001272a:	0032      	movs	r2, r6
1001272c:	002b      	movs	r3, r5
1001272e:	2000      	movs	r0, #0
10012730:	492f      	ldr	r1, [pc, #188]	; (100127f0 <__ieee754_pow+0x1e8>)
10012732:	f002 fb43 	bl	10014dbc <__aeabi_ddiv>
10012736:	0006      	movs	r6, r0
10012738:	e7af      	b.n	1001269a <__ieee754_pow+0x92>
1001273a:	4b2f      	ldr	r3, [pc, #188]	; (100127f8 <__ieee754_pow+0x1f0>)
1001273c:	469c      	mov	ip, r3
1001273e:	465b      	mov	r3, fp
10012740:	4464      	add	r4, ip
10012742:	431c      	orrs	r4, r3
10012744:	d101      	bne.n	1001274a <__ieee754_pow+0x142>
10012746:	f000 fc2b 	bl	10012fa0 <__ieee754_pow+0x998>
1001274a:	465b      	mov	r3, fp
1001274c:	0006      	movs	r6, r0
1001274e:	2b01      	cmp	r3, #1
10012750:	d1a3      	bne.n	1001269a <__ieee754_pow+0x92>
10012752:	2380      	movs	r3, #128	; 0x80
10012754:	061b      	lsls	r3, r3, #24
10012756:	469c      	mov	ip, r3
10012758:	4461      	add	r1, ip
1001275a:	e79e      	b.n	1001269a <__ieee754_pow+0x92>
1001275c:	2a00      	cmp	r2, #0
1001275e:	d100      	bne.n	10012762 <__ieee754_pow+0x15a>
10012760:	e772      	b.n	10012648 <__ieee754_pow+0x40>
10012762:	e794      	b.n	1001268e <__ieee754_pow+0x86>
10012764:	4b2b      	ldr	r3, [pc, #172]	; (10012814 <__ieee754_pow+0x20c>)
10012766:	429f      	cmp	r7, r3
10012768:	dc2b      	bgt.n	100127c2 <__ieee754_pow+0x1ba>
1001276a:	4b27      	ldr	r3, [pc, #156]	; (10012808 <__ieee754_pow+0x200>)
1001276c:	429f      	cmp	r7, r3
1001276e:	dc00      	bgt.n	10012772 <__ieee754_pow+0x16a>
10012770:	e770      	b.n	10012654 <__ieee754_pow+0x4c>
10012772:	4929      	ldr	r1, [pc, #164]	; (10012818 <__ieee754_pow+0x210>)
10012774:	153b      	asrs	r3, r7, #20
10012776:	468c      	mov	ip, r1
10012778:	4463      	add	r3, ip
1001277a:	2b14      	cmp	r3, #20
1001277c:	dc01      	bgt.n	10012782 <__ieee754_pow+0x17a>
1001277e:	f000 fbf2 	bl	10012f66 <__ieee754_pow+0x95e>
10012782:	2134      	movs	r1, #52	; 0x34
10012784:	1acb      	subs	r3, r1, r3
10012786:	9900      	ldr	r1, [sp, #0]
10012788:	40d9      	lsrs	r1, r3
1001278a:	0008      	movs	r0, r1
1001278c:	4098      	lsls	r0, r3
1001278e:	4282      	cmp	r2, r0
10012790:	d000      	beq.n	10012794 <__ieee754_pow+0x18c>
10012792:	e75f      	b.n	10012654 <__ieee754_pow+0x4c>
10012794:	2301      	movs	r3, #1
10012796:	4019      	ands	r1, r3
10012798:	3301      	adds	r3, #1
1001279a:	1a5b      	subs	r3, r3, r1
1001279c:	469b      	mov	fp, r3
1001279e:	e759      	b.n	10012654 <__ieee754_pow+0x4c>
100127a0:	4b15      	ldr	r3, [pc, #84]	; (100127f8 <__ieee754_pow+0x1f0>)
100127a2:	18e0      	adds	r0, r4, r3
100127a4:	4306      	orrs	r6, r0
100127a6:	d100      	bne.n	100127aa <__ieee754_pow+0x1a2>
100127a8:	e775      	b.n	10012696 <__ieee754_pow+0x8e>
100127aa:	4b17      	ldr	r3, [pc, #92]	; (10012808 <__ieee754_pow+0x200>)
100127ac:	429c      	cmp	r4, r3
100127ae:	dc00      	bgt.n	100127b2 <__ieee754_pow+0x1aa>
100127b0:	e351      	b.n	10012e56 <__ieee754_pow+0x84e>
100127b2:	4653      	mov	r3, sl
100127b4:	2b00      	cmp	r3, #0
100127b6:	db16      	blt.n	100127e6 <__ieee754_pow+0x1de>
100127b8:	9b00      	ldr	r3, [sp, #0]
100127ba:	9c01      	ldr	r4, [sp, #4]
100127bc:	001e      	movs	r6, r3
100127be:	0021      	movs	r1, r4
100127c0:	e76b      	b.n	1001269a <__ieee754_pow+0x92>
100127c2:	2302      	movs	r3, #2
100127c4:	469b      	mov	fp, r3
100127c6:	e745      	b.n	10012654 <__ieee754_pow+0x4c>
100127c8:	0032      	movs	r2, r6
100127ca:	002b      	movs	r3, r5
100127cc:	0030      	movs	r0, r6
100127ce:	0029      	movs	r1, r5
100127d0:	f003 f992 	bl	10015af8 <__aeabi_dsub>
100127d4:	0002      	movs	r2, r0
100127d6:	000b      	movs	r3, r1
100127d8:	f002 faf0 	bl	10014dbc <__aeabi_ddiv>
100127dc:	0006      	movs	r6, r0
100127de:	e75c      	b.n	1001269a <__ieee754_pow+0x92>
100127e0:	4653      	mov	r3, sl
100127e2:	2b00      	cmp	r3, #0
100127e4:	db85      	blt.n	100126f2 <__ieee754_pow+0xea>
100127e6:	2600      	movs	r6, #0
100127e8:	2100      	movs	r1, #0
100127ea:	e756      	b.n	1001269a <__ieee754_pow+0x92>
100127ec:	7ff00000 	.word	0x7ff00000
100127f0:	3ff00000 	.word	0x3ff00000
100127f4:	3fe00000 	.word	0x3fe00000
100127f8:	c0100000 	.word	0xc0100000
100127fc:	100185f0 	.word	0x100185f0
10012800:	41e00000 	.word	0x41e00000
10012804:	43f00000 	.word	0x43f00000
10012808:	3fefffff 	.word	0x3fefffff
1001280c:	8800759c 	.word	0x8800759c
10012810:	7e37e43c 	.word	0x7e37e43c
10012814:	433fffff 	.word	0x433fffff
10012818:	fffffc01 	.word	0xfffffc01
1001281c:	4be8      	ldr	r3, [pc, #928]	; (10012bc0 <__ieee754_pow+0x5b8>)
1001281e:	2200      	movs	r2, #0
10012820:	429c      	cmp	r4, r3
10012822:	dc06      	bgt.n	10012832 <__ieee754_pow+0x22a>
10012824:	2200      	movs	r2, #0
10012826:	4be7      	ldr	r3, [pc, #924]	; (10012bc4 <__ieee754_pow+0x5bc>)
10012828:	f002 feec 	bl	10015604 <__aeabi_dmul>
1001282c:	2235      	movs	r2, #53	; 0x35
1001282e:	000c      	movs	r4, r1
10012830:	4252      	negs	r2, r2
10012832:	4de5      	ldr	r5, [pc, #916]	; (10012bc8 <__ieee754_pow+0x5c0>)
10012834:	1523      	asrs	r3, r4, #20
10012836:	46ac      	mov	ip, r5
10012838:	4463      	add	r3, ip
1001283a:	4699      	mov	r9, r3
1001283c:	0324      	lsls	r4, r4, #12
1001283e:	4de3      	ldr	r5, [pc, #908]	; (10012bcc <__ieee754_pow+0x5c4>)
10012840:	4be3      	ldr	r3, [pc, #908]	; (10012bd0 <__ieee754_pow+0x5c8>)
10012842:	0b24      	lsrs	r4, r4, #12
10012844:	4491      	add	r9, r2
10012846:	4325      	orrs	r5, r4
10012848:	429c      	cmp	r4, r3
1001284a:	dd09      	ble.n	10012860 <__ieee754_pow+0x258>
1001284c:	4be1      	ldr	r3, [pc, #900]	; (10012bd4 <__ieee754_pow+0x5cc>)
1001284e:	429c      	cmp	r4, r3
10012850:	dc00      	bgt.n	10012854 <__ieee754_pow+0x24c>
10012852:	e3a9      	b.n	10012fa8 <__ieee754_pow+0x9a0>
10012854:	2301      	movs	r3, #1
10012856:	469c      	mov	ip, r3
10012858:	4bdf      	ldr	r3, [pc, #892]	; (10012bd8 <__ieee754_pow+0x5d0>)
1001285a:	44e1      	add	r9, ip
1001285c:	469c      	mov	ip, r3
1001285e:	4465      	add	r5, ip
10012860:	2300      	movs	r3, #0
10012862:	2400      	movs	r4, #0
10012864:	2200      	movs	r2, #0
10012866:	9308      	str	r3, [sp, #32]
10012868:	9409      	str	r4, [sp, #36]	; 0x24
1001286a:	930c      	str	r3, [sp, #48]	; 0x30
1001286c:	940d      	str	r4, [sp, #52]	; 0x34
1001286e:	2400      	movs	r4, #0
10012870:	4bd6      	ldr	r3, [pc, #856]	; (10012bcc <__ieee754_pow+0x5c4>)
10012872:	9206      	str	r2, [sp, #24]
10012874:	9307      	str	r3, [sp, #28]
10012876:	9a06      	ldr	r2, [sp, #24]
10012878:	9b07      	ldr	r3, [sp, #28]
1001287a:	0029      	movs	r1, r5
1001287c:	900a      	str	r0, [sp, #40]	; 0x28
1001287e:	910b      	str	r1, [sp, #44]	; 0x2c
10012880:	f003 f93a 	bl	10015af8 <__aeabi_dsub>
10012884:	9a06      	ldr	r2, [sp, #24]
10012886:	9b07      	ldr	r3, [sp, #28]
10012888:	0006      	movs	r6, r0
1001288a:	000f      	movs	r7, r1
1001288c:	980a      	ldr	r0, [sp, #40]	; 0x28
1001288e:	990b      	ldr	r1, [sp, #44]	; 0x2c
10012890:	f001 ff68 	bl	10014764 <__aeabi_dadd>
10012894:	0002      	movs	r2, r0
10012896:	000b      	movs	r3, r1
10012898:	2000      	movs	r0, #0
1001289a:	49cc      	ldr	r1, [pc, #816]	; (10012bcc <__ieee754_pow+0x5c4>)
1001289c:	f002 fa8e 	bl	10014dbc <__aeabi_ddiv>
100128a0:	000a      	movs	r2, r1
100128a2:	0001      	movs	r1, r0
100128a4:	0013      	movs	r3, r2
100128a6:	910e      	str	r1, [sp, #56]	; 0x38
100128a8:	920f      	str	r2, [sp, #60]	; 0x3c
100128aa:	0002      	movs	r2, r0
100128ac:	0039      	movs	r1, r7
100128ae:	0030      	movs	r0, r6
100128b0:	f002 fea8 	bl	10015604 <__aeabi_dmul>
100128b4:	000a      	movs	r2, r1
100128b6:	0001      	movs	r1, r0
100128b8:	2080      	movs	r0, #128	; 0x80
100128ba:	9104      	str	r1, [sp, #16]
100128bc:	9205      	str	r2, [sp, #20]
100128be:	0013      	movs	r3, r2
100128c0:	2200      	movs	r2, #0
100128c2:	2180      	movs	r1, #128	; 0x80
100128c4:	0300      	lsls	r0, r0, #12
100128c6:	4684      	mov	ip, r0
100128c8:	9202      	str	r2, [sp, #8]
100128ca:	9303      	str	r3, [sp, #12]
100128cc:	2200      	movs	r2, #0
100128ce:	0589      	lsls	r1, r1, #22
100128d0:	106d      	asrs	r5, r5, #1
100128d2:	430d      	orrs	r5, r1
100128d4:	4465      	add	r5, ip
100128d6:	192b      	adds	r3, r5, r4
100128d8:	9802      	ldr	r0, [sp, #8]
100128da:	9903      	ldr	r1, [sp, #12]
100128dc:	0014      	movs	r4, r2
100128de:	001d      	movs	r5, r3
100128e0:	f002 fe90 	bl	10015604 <__aeabi_dmul>
100128e4:	0002      	movs	r2, r0
100128e6:	000b      	movs	r3, r1
100128e8:	0030      	movs	r0, r6
100128ea:	0039      	movs	r1, r7
100128ec:	f003 f904 	bl	10015af8 <__aeabi_dsub>
100128f0:	9a06      	ldr	r2, [sp, #24]
100128f2:	9b07      	ldr	r3, [sp, #28]
100128f4:	0006      	movs	r6, r0
100128f6:	000f      	movs	r7, r1
100128f8:	0020      	movs	r0, r4
100128fa:	0029      	movs	r1, r5
100128fc:	f003 f8fc 	bl	10015af8 <__aeabi_dsub>
10012900:	0002      	movs	r2, r0
10012902:	000b      	movs	r3, r1
10012904:	980a      	ldr	r0, [sp, #40]	; 0x28
10012906:	990b      	ldr	r1, [sp, #44]	; 0x2c
10012908:	f003 f8f6 	bl	10015af8 <__aeabi_dsub>
1001290c:	9a02      	ldr	r2, [sp, #8]
1001290e:	9b03      	ldr	r3, [sp, #12]
10012910:	f002 fe78 	bl	10015604 <__aeabi_dmul>
10012914:	0002      	movs	r2, r0
10012916:	000b      	movs	r3, r1
10012918:	0030      	movs	r0, r6
1001291a:	0039      	movs	r1, r7
1001291c:	f003 f8ec 	bl	10015af8 <__aeabi_dsub>
10012920:	9a0e      	ldr	r2, [sp, #56]	; 0x38
10012922:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
10012924:	f002 fe6e 	bl	10015604 <__aeabi_dmul>
10012928:	9d04      	ldr	r5, [sp, #16]
1001292a:	9e05      	ldr	r6, [sp, #20]
1001292c:	9006      	str	r0, [sp, #24]
1001292e:	9107      	str	r1, [sp, #28]
10012930:	002a      	movs	r2, r5
10012932:	0033      	movs	r3, r6
10012934:	0028      	movs	r0, r5
10012936:	0031      	movs	r1, r6
10012938:	f002 fe64 	bl	10015604 <__aeabi_dmul>
1001293c:	0006      	movs	r6, r0
1001293e:	000f      	movs	r7, r1
10012940:	4aa6      	ldr	r2, [pc, #664]	; (10012bdc <__ieee754_pow+0x5d4>)
10012942:	4ba7      	ldr	r3, [pc, #668]	; (10012be0 <__ieee754_pow+0x5d8>)
10012944:	f002 fe5e 	bl	10015604 <__aeabi_dmul>
10012948:	4aa6      	ldr	r2, [pc, #664]	; (10012be4 <__ieee754_pow+0x5dc>)
1001294a:	4ba7      	ldr	r3, [pc, #668]	; (10012be8 <__ieee754_pow+0x5e0>)
1001294c:	f001 ff0a 	bl	10014764 <__aeabi_dadd>
10012950:	0032      	movs	r2, r6
10012952:	003b      	movs	r3, r7
10012954:	f002 fe56 	bl	10015604 <__aeabi_dmul>
10012958:	4aa4      	ldr	r2, [pc, #656]	; (10012bec <__ieee754_pow+0x5e4>)
1001295a:	4ba5      	ldr	r3, [pc, #660]	; (10012bf0 <__ieee754_pow+0x5e8>)
1001295c:	f001 ff02 	bl	10014764 <__aeabi_dadd>
10012960:	0032      	movs	r2, r6
10012962:	003b      	movs	r3, r7
10012964:	f002 fe4e 	bl	10015604 <__aeabi_dmul>
10012968:	4aa2      	ldr	r2, [pc, #648]	; (10012bf4 <__ieee754_pow+0x5ec>)
1001296a:	4ba3      	ldr	r3, [pc, #652]	; (10012bf8 <__ieee754_pow+0x5f0>)
1001296c:	f001 fefa 	bl	10014764 <__aeabi_dadd>
10012970:	0032      	movs	r2, r6
10012972:	003b      	movs	r3, r7
10012974:	f002 fe46 	bl	10015604 <__aeabi_dmul>
10012978:	4aa0      	ldr	r2, [pc, #640]	; (10012bfc <__ieee754_pow+0x5f4>)
1001297a:	4ba1      	ldr	r3, [pc, #644]	; (10012c00 <__ieee754_pow+0x5f8>)
1001297c:	f001 fef2 	bl	10014764 <__aeabi_dadd>
10012980:	0032      	movs	r2, r6
10012982:	003b      	movs	r3, r7
10012984:	f002 fe3e 	bl	10015604 <__aeabi_dmul>
10012988:	4a9e      	ldr	r2, [pc, #632]	; (10012c04 <__ieee754_pow+0x5fc>)
1001298a:	4b9f      	ldr	r3, [pc, #636]	; (10012c08 <__ieee754_pow+0x600>)
1001298c:	f001 feea 	bl	10014764 <__aeabi_dadd>
10012990:	0032      	movs	r2, r6
10012992:	0004      	movs	r4, r0
10012994:	000d      	movs	r5, r1
10012996:	003b      	movs	r3, r7
10012998:	0030      	movs	r0, r6
1001299a:	0039      	movs	r1, r7
1001299c:	f002 fe32 	bl	10015604 <__aeabi_dmul>
100129a0:	0002      	movs	r2, r0
100129a2:	000b      	movs	r3, r1
100129a4:	0020      	movs	r0, r4
100129a6:	0029      	movs	r1, r5
100129a8:	f002 fe2c 	bl	10015604 <__aeabi_dmul>
100129ac:	9e02      	ldr	r6, [sp, #8]
100129ae:	9f03      	ldr	r7, [sp, #12]
100129b0:	0004      	movs	r4, r0
100129b2:	000d      	movs	r5, r1
100129b4:	9804      	ldr	r0, [sp, #16]
100129b6:	9905      	ldr	r1, [sp, #20]
100129b8:	0032      	movs	r2, r6
100129ba:	003b      	movs	r3, r7
100129bc:	f001 fed2 	bl	10014764 <__aeabi_dadd>
100129c0:	9a06      	ldr	r2, [sp, #24]
100129c2:	9b07      	ldr	r3, [sp, #28]
100129c4:	f002 fe1e 	bl	10015604 <__aeabi_dmul>
100129c8:	0022      	movs	r2, r4
100129ca:	002b      	movs	r3, r5
100129cc:	f001 feca 	bl	10014764 <__aeabi_dadd>
100129d0:	0032      	movs	r2, r6
100129d2:	900a      	str	r0, [sp, #40]	; 0x28
100129d4:	910b      	str	r1, [sp, #44]	; 0x2c
100129d6:	003b      	movs	r3, r7
100129d8:	0030      	movs	r0, r6
100129da:	0039      	movs	r1, r7
100129dc:	9602      	str	r6, [sp, #8]
100129de:	9703      	str	r7, [sp, #12]
100129e0:	f002 fe10 	bl	10015604 <__aeabi_dmul>
100129e4:	2200      	movs	r2, #0
100129e6:	4b89      	ldr	r3, [pc, #548]	; (10012c0c <__ieee754_pow+0x604>)
100129e8:	0004      	movs	r4, r0
100129ea:	000d      	movs	r5, r1
100129ec:	f001 feba 	bl	10014764 <__aeabi_dadd>
100129f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
100129f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
100129f4:	f001 feb6 	bl	10014764 <__aeabi_dadd>
100129f8:	2600      	movs	r6, #0
100129fa:	000f      	movs	r7, r1
100129fc:	0032      	movs	r2, r6
100129fe:	000b      	movs	r3, r1
10012a00:	9802      	ldr	r0, [sp, #8]
10012a02:	9903      	ldr	r1, [sp, #12]
10012a04:	f002 fdfe 	bl	10015604 <__aeabi_dmul>
10012a08:	2200      	movs	r2, #0
10012a0a:	9002      	str	r0, [sp, #8]
10012a0c:	9103      	str	r1, [sp, #12]
10012a0e:	4b7f      	ldr	r3, [pc, #508]	; (10012c0c <__ieee754_pow+0x604>)
10012a10:	0030      	movs	r0, r6
10012a12:	0039      	movs	r1, r7
10012a14:	f003 f870 	bl	10015af8 <__aeabi_dsub>
10012a18:	0022      	movs	r2, r4
10012a1a:	002b      	movs	r3, r5
10012a1c:	f003 f86c 	bl	10015af8 <__aeabi_dsub>
10012a20:	0002      	movs	r2, r0
10012a22:	000b      	movs	r3, r1
10012a24:	980a      	ldr	r0, [sp, #40]	; 0x28
10012a26:	990b      	ldr	r1, [sp, #44]	; 0x2c
10012a28:	f003 f866 	bl	10015af8 <__aeabi_dsub>
10012a2c:	9a04      	ldr	r2, [sp, #16]
10012a2e:	9b05      	ldr	r3, [sp, #20]
10012a30:	f002 fde8 	bl	10015604 <__aeabi_dmul>
10012a34:	0032      	movs	r2, r6
10012a36:	0004      	movs	r4, r0
10012a38:	000d      	movs	r5, r1
10012a3a:	9806      	ldr	r0, [sp, #24]
10012a3c:	9907      	ldr	r1, [sp, #28]
10012a3e:	003b      	movs	r3, r7
10012a40:	f002 fde0 	bl	10015604 <__aeabi_dmul>
10012a44:	0002      	movs	r2, r0
10012a46:	000b      	movs	r3, r1
10012a48:	0020      	movs	r0, r4
10012a4a:	0029      	movs	r1, r5
10012a4c:	f001 fe8a 	bl	10014764 <__aeabi_dadd>
10012a50:	0004      	movs	r4, r0
10012a52:	000d      	movs	r5, r1
10012a54:	0002      	movs	r2, r0
10012a56:	000b      	movs	r3, r1
10012a58:	9802      	ldr	r0, [sp, #8]
10012a5a:	9903      	ldr	r1, [sp, #12]
10012a5c:	f001 fe82 	bl	10014764 <__aeabi_dadd>
10012a60:	2600      	movs	r6, #0
10012a62:	22e0      	movs	r2, #224	; 0xe0
10012a64:	4b6a      	ldr	r3, [pc, #424]	; (10012c10 <__ieee754_pow+0x608>)
10012a66:	0612      	lsls	r2, r2, #24
10012a68:	0030      	movs	r0, r6
10012a6a:	000f      	movs	r7, r1
10012a6c:	f002 fdca 	bl	10015604 <__aeabi_dmul>
10012a70:	9a02      	ldr	r2, [sp, #8]
10012a72:	9b03      	ldr	r3, [sp, #12]
10012a74:	9004      	str	r0, [sp, #16]
10012a76:	9105      	str	r1, [sp, #20]
10012a78:	0030      	movs	r0, r6
10012a7a:	0039      	movs	r1, r7
10012a7c:	f003 f83c 	bl	10015af8 <__aeabi_dsub>
10012a80:	0002      	movs	r2, r0
10012a82:	000b      	movs	r3, r1
10012a84:	0020      	movs	r0, r4
10012a86:	0029      	movs	r1, r5
10012a88:	f003 f836 	bl	10015af8 <__aeabi_dsub>
10012a8c:	4a61      	ldr	r2, [pc, #388]	; (10012c14 <__ieee754_pow+0x60c>)
10012a8e:	4b60      	ldr	r3, [pc, #384]	; (10012c10 <__ieee754_pow+0x608>)
10012a90:	f002 fdb8 	bl	10015604 <__aeabi_dmul>
10012a94:	4a60      	ldr	r2, [pc, #384]	; (10012c18 <__ieee754_pow+0x610>)
10012a96:	0004      	movs	r4, r0
10012a98:	000d      	movs	r5, r1
10012a9a:	4b60      	ldr	r3, [pc, #384]	; (10012c1c <__ieee754_pow+0x614>)
10012a9c:	0030      	movs	r0, r6
10012a9e:	0039      	movs	r1, r7
10012aa0:	f002 fdb0 	bl	10015604 <__aeabi_dmul>
10012aa4:	0002      	movs	r2, r0
10012aa6:	000b      	movs	r3, r1
10012aa8:	0020      	movs	r0, r4
10012aaa:	0029      	movs	r1, r5
10012aac:	f001 fe5a 	bl	10014764 <__aeabi_dadd>
10012ab0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
10012ab2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
10012ab4:	f001 fe56 	bl	10014764 <__aeabi_dadd>
10012ab8:	0006      	movs	r6, r0
10012aba:	4648      	mov	r0, r9
10012abc:	000f      	movs	r7, r1
10012abe:	f003 fbc5 	bl	1001624c <__aeabi_i2d>
10012ac2:	0004      	movs	r4, r0
10012ac4:	000d      	movs	r5, r1
10012ac6:	9804      	ldr	r0, [sp, #16]
10012ac8:	9905      	ldr	r1, [sp, #20]
10012aca:	0032      	movs	r2, r6
10012acc:	003b      	movs	r3, r7
10012ace:	f001 fe49 	bl	10014764 <__aeabi_dadd>
10012ad2:	9a08      	ldr	r2, [sp, #32]
10012ad4:	9b09      	ldr	r3, [sp, #36]	; 0x24
10012ad6:	f001 fe45 	bl	10014764 <__aeabi_dadd>
10012ada:	0022      	movs	r2, r4
10012adc:	002b      	movs	r3, r5
10012ade:	f001 fe41 	bl	10014764 <__aeabi_dadd>
10012ae2:	2000      	movs	r0, #0
10012ae4:	0022      	movs	r2, r4
10012ae6:	002b      	movs	r3, r5
10012ae8:	9002      	str	r0, [sp, #8]
10012aea:	9103      	str	r1, [sp, #12]
10012aec:	f003 f804 	bl	10015af8 <__aeabi_dsub>
10012af0:	9a08      	ldr	r2, [sp, #32]
10012af2:	9b09      	ldr	r3, [sp, #36]	; 0x24
10012af4:	f003 f800 	bl	10015af8 <__aeabi_dsub>
10012af8:	9a04      	ldr	r2, [sp, #16]
10012afa:	9b05      	ldr	r3, [sp, #20]
10012afc:	f002 fffc 	bl	10015af8 <__aeabi_dsub>
10012b00:	0002      	movs	r2, r0
10012b02:	000b      	movs	r3, r1
10012b04:	0030      	movs	r0, r6
10012b06:	0039      	movs	r1, r7
10012b08:	f002 fff6 	bl	10015af8 <__aeabi_dsub>
10012b0c:	9004      	str	r0, [sp, #16]
10012b0e:	9105      	str	r1, [sp, #20]
10012b10:	465b      	mov	r3, fp
10012b12:	4642      	mov	r2, r8
10012b14:	3b01      	subs	r3, #1
10012b16:	4313      	orrs	r3, r2
10012b18:	d100      	bne.n	10012b1c <__ieee754_pow+0x514>
10012b1a:	e197      	b.n	10012e4c <__ieee754_pow+0x844>
10012b1c:	2300      	movs	r3, #0
10012b1e:	4c2b      	ldr	r4, [pc, #172]	; (10012bcc <__ieee754_pow+0x5c4>)
10012b20:	9306      	str	r3, [sp, #24]
10012b22:	9407      	str	r4, [sp, #28]
10012b24:	9800      	ldr	r0, [sp, #0]
10012b26:	9901      	ldr	r1, [sp, #4]
10012b28:	2600      	movs	r6, #0
10012b2a:	000b      	movs	r3, r1
10012b2c:	0032      	movs	r2, r6
10012b2e:	000f      	movs	r7, r1
10012b30:	f002 ffe2 	bl	10015af8 <__aeabi_dsub>
10012b34:	9a02      	ldr	r2, [sp, #8]
10012b36:	9b03      	ldr	r3, [sp, #12]
10012b38:	f002 fd64 	bl	10015604 <__aeabi_dmul>
10012b3c:	9a00      	ldr	r2, [sp, #0]
10012b3e:	9b01      	ldr	r3, [sp, #4]
10012b40:	0004      	movs	r4, r0
10012b42:	000d      	movs	r5, r1
10012b44:	9804      	ldr	r0, [sp, #16]
10012b46:	9905      	ldr	r1, [sp, #20]
10012b48:	f002 fd5c 	bl	10015604 <__aeabi_dmul>
10012b4c:	0002      	movs	r2, r0
10012b4e:	000b      	movs	r3, r1
10012b50:	0020      	movs	r0, r4
10012b52:	0029      	movs	r1, r5
10012b54:	f001 fe06 	bl	10014764 <__aeabi_dadd>
10012b58:	0004      	movs	r4, r0
10012b5a:	000d      	movs	r5, r1
10012b5c:	9802      	ldr	r0, [sp, #8]
10012b5e:	9903      	ldr	r1, [sp, #12]
10012b60:	003b      	movs	r3, r7
10012b62:	0032      	movs	r2, r6
10012b64:	9404      	str	r4, [sp, #16]
10012b66:	9505      	str	r5, [sp, #20]
10012b68:	f002 fd4c 	bl	10015604 <__aeabi_dmul>
10012b6c:	9000      	str	r0, [sp, #0]
10012b6e:	9101      	str	r1, [sp, #4]
10012b70:	000b      	movs	r3, r1
10012b72:	0002      	movs	r2, r0
10012b74:	0029      	movs	r1, r5
10012b76:	0020      	movs	r0, r4
10012b78:	f001 fdf4 	bl	10014764 <__aeabi_dadd>
10012b7c:	4b28      	ldr	r3, [pc, #160]	; (10012c20 <__ieee754_pow+0x618>)
10012b7e:	4681      	mov	r9, r0
10012b80:	1e0f      	subs	r7, r1, #0
10012b82:	468a      	mov	sl, r1
10012b84:	429f      	cmp	r7, r3
10012b86:	dc00      	bgt.n	10012b8a <__ieee754_pow+0x582>
10012b88:	e13c      	b.n	10012e04 <__ieee754_pow+0x7fc>
10012b8a:	4b26      	ldr	r3, [pc, #152]	; (10012c24 <__ieee754_pow+0x61c>)
10012b8c:	18cb      	adds	r3, r1, r3
10012b8e:	4303      	orrs	r3, r0
10012b90:	d000      	beq.n	10012b94 <__ieee754_pow+0x58c>
10012b92:	e1db      	b.n	10012f4c <__ieee754_pow+0x944>
10012b94:	9804      	ldr	r0, [sp, #16]
10012b96:	9905      	ldr	r1, [sp, #20]
10012b98:	4a23      	ldr	r2, [pc, #140]	; (10012c28 <__ieee754_pow+0x620>)
10012b9a:	4b24      	ldr	r3, [pc, #144]	; (10012c2c <__ieee754_pow+0x624>)
10012b9c:	f001 fde2 	bl	10014764 <__aeabi_dadd>
10012ba0:	9a00      	ldr	r2, [sp, #0]
10012ba2:	9b01      	ldr	r3, [sp, #4]
10012ba4:	0004      	movs	r4, r0
10012ba6:	000d      	movs	r5, r1
10012ba8:	4648      	mov	r0, r9
10012baa:	0039      	movs	r1, r7
10012bac:	f002 ffa4 	bl	10015af8 <__aeabi_dsub>
10012bb0:	0002      	movs	r2, r0
10012bb2:	000b      	movs	r3, r1
10012bb4:	0020      	movs	r0, r4
10012bb6:	0029      	movs	r1, r5
10012bb8:	f000 fe8a 	bl	100138d0 <__aeabi_dcmpgt>
10012bbc:	003e      	movs	r6, r7
10012bbe:	e037      	b.n	10012c30 <__ieee754_pow+0x628>
10012bc0:	000fffff 	.word	0x000fffff
10012bc4:	43400000 	.word	0x43400000
10012bc8:	fffffc01 	.word	0xfffffc01
10012bcc:	3ff00000 	.word	0x3ff00000
10012bd0:	0003988e 	.word	0x0003988e
10012bd4:	000bb679 	.word	0x000bb679
10012bd8:	fff00000 	.word	0xfff00000
10012bdc:	4a454eef 	.word	0x4a454eef
10012be0:	3fca7e28 	.word	0x3fca7e28
10012be4:	93c9db65 	.word	0x93c9db65
10012be8:	3fcd864a 	.word	0x3fcd864a
10012bec:	a91d4101 	.word	0xa91d4101
10012bf0:	3fd17460 	.word	0x3fd17460
10012bf4:	518f264d 	.word	0x518f264d
10012bf8:	3fd55555 	.word	0x3fd55555
10012bfc:	db6fabff 	.word	0xdb6fabff
10012c00:	3fdb6db6 	.word	0x3fdb6db6
10012c04:	33333303 	.word	0x33333303
10012c08:	3fe33333 	.word	0x3fe33333
10012c0c:	40080000 	.word	0x40080000
10012c10:	3feec709 	.word	0x3feec709
10012c14:	dc3a03fd 	.word	0xdc3a03fd
10012c18:	145b01f5 	.word	0x145b01f5
10012c1c:	be3e2fe0 	.word	0xbe3e2fe0
10012c20:	408fffff 	.word	0x408fffff
10012c24:	bf700000 	.word	0xbf700000
10012c28:	652b82fe 	.word	0x652b82fe
10012c2c:	3c971547 	.word	0x3c971547
10012c30:	2800      	cmp	r0, #0
10012c32:	d000      	beq.n	10012c36 <__ieee754_pow+0x62e>
10012c34:	e18a      	b.n	10012f4c <__ieee754_pow+0x944>
10012c36:	2280      	movs	r2, #128	; 0x80
10012c38:	4be7      	ldr	r3, [pc, #924]	; (10012fd8 <__ieee754_pow+0x9d0>)
10012c3a:	0352      	lsls	r2, r2, #13
10012c3c:	469c      	mov	ip, r3
10012c3e:	0013      	movs	r3, r2
10012c40:	1536      	asrs	r6, r6, #20
10012c42:	4466      	add	r6, ip
10012c44:	4133      	asrs	r3, r6
10012c46:	49e5      	ldr	r1, [pc, #916]	; (10012fdc <__ieee754_pow+0x9d4>)
10012c48:	19db      	adds	r3, r3, r7
10012c4a:	005e      	lsls	r6, r3, #1
10012c4c:	001c      	movs	r4, r3
10012c4e:	031b      	lsls	r3, r3, #12
10012c50:	468c      	mov	ip, r1
10012c52:	0b1b      	lsrs	r3, r3, #12
10012c54:	4313      	orrs	r3, r2
10012c56:	2214      	movs	r2, #20
10012c58:	0d76      	lsrs	r6, r6, #21
10012c5a:	4fe1      	ldr	r7, [pc, #900]	; (10012fe0 <__ieee754_pow+0x9d8>)
10012c5c:	4466      	add	r6, ip
10012c5e:	4137      	asrs	r7, r6
10012c60:	1b96      	subs	r6, r2, r6
10012c62:	4133      	asrs	r3, r6
10012c64:	4698      	mov	r8, r3
10012c66:	4653      	mov	r3, sl
10012c68:	43bc      	bics	r4, r7
10012c6a:	2000      	movs	r0, #0
10012c6c:	0021      	movs	r1, r4
10012c6e:	2b00      	cmp	r3, #0
10012c70:	da00      	bge.n	10012c74 <__ieee754_pow+0x66c>
10012c72:	e1a9      	b.n	10012fc8 <__ieee754_pow+0x9c0>
10012c74:	0002      	movs	r2, r0
10012c76:	000b      	movs	r3, r1
10012c78:	9800      	ldr	r0, [sp, #0]
10012c7a:	9901      	ldr	r1, [sp, #4]
10012c7c:	f002 ff3c 	bl	10015af8 <__aeabi_dsub>
10012c80:	000b      	movs	r3, r1
10012c82:	9000      	str	r0, [sp, #0]
10012c84:	9101      	str	r1, [sp, #4]
10012c86:	0002      	movs	r2, r0
10012c88:	9804      	ldr	r0, [sp, #16]
10012c8a:	9905      	ldr	r1, [sp, #20]
10012c8c:	f001 fd6a 	bl	10014764 <__aeabi_dadd>
10012c90:	4643      	mov	r3, r8
10012c92:	051b      	lsls	r3, r3, #20
10012c94:	4699      	mov	r9, r3
10012c96:	2000      	movs	r0, #0
10012c98:	2200      	movs	r2, #0
10012c9a:	4bd2      	ldr	r3, [pc, #840]	; (10012fe4 <__ieee754_pow+0x9dc>)
10012c9c:	0006      	movs	r6, r0
10012c9e:	000f      	movs	r7, r1
10012ca0:	f002 fcb0 	bl	10015604 <__aeabi_dmul>
10012ca4:	9a00      	ldr	r2, [sp, #0]
10012ca6:	9b01      	ldr	r3, [sp, #4]
10012ca8:	9002      	str	r0, [sp, #8]
10012caa:	9103      	str	r1, [sp, #12]
10012cac:	0030      	movs	r0, r6
10012cae:	0039      	movs	r1, r7
10012cb0:	f002 ff22 	bl	10015af8 <__aeabi_dsub>
10012cb4:	0002      	movs	r2, r0
10012cb6:	000b      	movs	r3, r1
10012cb8:	9804      	ldr	r0, [sp, #16]
10012cba:	9905      	ldr	r1, [sp, #20]
10012cbc:	f002 ff1c 	bl	10015af8 <__aeabi_dsub>
10012cc0:	4ac9      	ldr	r2, [pc, #804]	; (10012fe8 <__ieee754_pow+0x9e0>)
10012cc2:	4bca      	ldr	r3, [pc, #808]	; (10012fec <__ieee754_pow+0x9e4>)
10012cc4:	f002 fc9e 	bl	10015604 <__aeabi_dmul>
10012cc8:	4ac9      	ldr	r2, [pc, #804]	; (10012ff0 <__ieee754_pow+0x9e8>)
10012cca:	0004      	movs	r4, r0
10012ccc:	000d      	movs	r5, r1
10012cce:	4bc9      	ldr	r3, [pc, #804]	; (10012ff4 <__ieee754_pow+0x9ec>)
10012cd0:	0030      	movs	r0, r6
10012cd2:	0039      	movs	r1, r7
10012cd4:	f002 fc96 	bl	10015604 <__aeabi_dmul>
10012cd8:	0002      	movs	r2, r0
10012cda:	000b      	movs	r3, r1
10012cdc:	0020      	movs	r0, r4
10012cde:	0029      	movs	r1, r5
10012ce0:	f001 fd40 	bl	10014764 <__aeabi_dadd>
10012ce4:	0004      	movs	r4, r0
10012ce6:	000d      	movs	r5, r1
10012ce8:	0002      	movs	r2, r0
10012cea:	000b      	movs	r3, r1
10012cec:	9802      	ldr	r0, [sp, #8]
10012cee:	9903      	ldr	r1, [sp, #12]
10012cf0:	f001 fd38 	bl	10014764 <__aeabi_dadd>
10012cf4:	9a02      	ldr	r2, [sp, #8]
10012cf6:	9b03      	ldr	r3, [sp, #12]
10012cf8:	0006      	movs	r6, r0
10012cfa:	000f      	movs	r7, r1
10012cfc:	f002 fefc 	bl	10015af8 <__aeabi_dsub>
10012d00:	0002      	movs	r2, r0
10012d02:	000b      	movs	r3, r1
10012d04:	0020      	movs	r0, r4
10012d06:	0029      	movs	r1, r5
10012d08:	f002 fef6 	bl	10015af8 <__aeabi_dsub>
10012d0c:	0032      	movs	r2, r6
10012d0e:	9000      	str	r0, [sp, #0]
10012d10:	9101      	str	r1, [sp, #4]
10012d12:	003b      	movs	r3, r7
10012d14:	0030      	movs	r0, r6
10012d16:	0039      	movs	r1, r7
10012d18:	f002 fc74 	bl	10015604 <__aeabi_dmul>
10012d1c:	0004      	movs	r4, r0
10012d1e:	000d      	movs	r5, r1
10012d20:	4ab5      	ldr	r2, [pc, #724]	; (10012ff8 <__ieee754_pow+0x9f0>)
10012d22:	4bb6      	ldr	r3, [pc, #728]	; (10012ffc <__ieee754_pow+0x9f4>)
10012d24:	f002 fc6e 	bl	10015604 <__aeabi_dmul>
10012d28:	4ab5      	ldr	r2, [pc, #724]	; (10013000 <__ieee754_pow+0x9f8>)
10012d2a:	4bb6      	ldr	r3, [pc, #728]	; (10013004 <__ieee754_pow+0x9fc>)
10012d2c:	f002 fee4 	bl	10015af8 <__aeabi_dsub>
10012d30:	0022      	movs	r2, r4
10012d32:	002b      	movs	r3, r5
10012d34:	f002 fc66 	bl	10015604 <__aeabi_dmul>
10012d38:	4ab3      	ldr	r2, [pc, #716]	; (10013008 <__ieee754_pow+0xa00>)
10012d3a:	4bb4      	ldr	r3, [pc, #720]	; (1001300c <__ieee754_pow+0xa04>)
10012d3c:	f001 fd12 	bl	10014764 <__aeabi_dadd>
10012d40:	0022      	movs	r2, r4
10012d42:	002b      	movs	r3, r5
10012d44:	f002 fc5e 	bl	10015604 <__aeabi_dmul>
10012d48:	4ab1      	ldr	r2, [pc, #708]	; (10013010 <__ieee754_pow+0xa08>)
10012d4a:	4bb2      	ldr	r3, [pc, #712]	; (10013014 <__ieee754_pow+0xa0c>)
10012d4c:	f002 fed4 	bl	10015af8 <__aeabi_dsub>
10012d50:	0022      	movs	r2, r4
10012d52:	002b      	movs	r3, r5
10012d54:	f002 fc56 	bl	10015604 <__aeabi_dmul>
10012d58:	4aaf      	ldr	r2, [pc, #700]	; (10013018 <__ieee754_pow+0xa10>)
10012d5a:	4bb0      	ldr	r3, [pc, #704]	; (1001301c <__ieee754_pow+0xa14>)
10012d5c:	f001 fd02 	bl	10014764 <__aeabi_dadd>
10012d60:	0022      	movs	r2, r4
10012d62:	002b      	movs	r3, r5
10012d64:	f002 fc4e 	bl	10015604 <__aeabi_dmul>
10012d68:	0002      	movs	r2, r0
10012d6a:	000b      	movs	r3, r1
10012d6c:	0030      	movs	r0, r6
10012d6e:	0039      	movs	r1, r7
10012d70:	f002 fec2 	bl	10015af8 <__aeabi_dsub>
10012d74:	0004      	movs	r4, r0
10012d76:	000d      	movs	r5, r1
10012d78:	0002      	movs	r2, r0
10012d7a:	000b      	movs	r3, r1
10012d7c:	0030      	movs	r0, r6
10012d7e:	0039      	movs	r1, r7
10012d80:	f002 fc40 	bl	10015604 <__aeabi_dmul>
10012d84:	2380      	movs	r3, #128	; 0x80
10012d86:	9002      	str	r0, [sp, #8]
10012d88:	9103      	str	r1, [sp, #12]
10012d8a:	2200      	movs	r2, #0
10012d8c:	05db      	lsls	r3, r3, #23
10012d8e:	0020      	movs	r0, r4
10012d90:	0029      	movs	r1, r5
10012d92:	f002 feb1 	bl	10015af8 <__aeabi_dsub>
10012d96:	0002      	movs	r2, r0
10012d98:	000b      	movs	r3, r1
10012d9a:	9802      	ldr	r0, [sp, #8]
10012d9c:	9903      	ldr	r1, [sp, #12]
10012d9e:	f002 f80d 	bl	10014dbc <__aeabi_ddiv>
10012da2:	9a00      	ldr	r2, [sp, #0]
10012da4:	9b01      	ldr	r3, [sp, #4]
10012da6:	0004      	movs	r4, r0
10012da8:	000d      	movs	r5, r1
10012daa:	0030      	movs	r0, r6
10012dac:	0039      	movs	r1, r7
10012dae:	f002 fc29 	bl	10015604 <__aeabi_dmul>
10012db2:	9a00      	ldr	r2, [sp, #0]
10012db4:	9b01      	ldr	r3, [sp, #4]
10012db6:	f001 fcd5 	bl	10014764 <__aeabi_dadd>
10012dba:	0002      	movs	r2, r0
10012dbc:	000b      	movs	r3, r1
10012dbe:	0020      	movs	r0, r4
10012dc0:	0029      	movs	r1, r5
10012dc2:	f002 fe99 	bl	10015af8 <__aeabi_dsub>
10012dc6:	0032      	movs	r2, r6
10012dc8:	003b      	movs	r3, r7
10012dca:	f002 fe95 	bl	10015af8 <__aeabi_dsub>
10012dce:	0002      	movs	r2, r0
10012dd0:	000b      	movs	r3, r1
10012dd2:	2000      	movs	r0, #0
10012dd4:	4992      	ldr	r1, [pc, #584]	; (10013020 <__ieee754_pow+0xa18>)
10012dd6:	f002 fe8f 	bl	10015af8 <__aeabi_dsub>
10012dda:	464b      	mov	r3, r9
10012ddc:	185b      	adds	r3, r3, r1
10012dde:	151a      	asrs	r2, r3, #20
10012de0:	2a00      	cmp	r2, #0
10012de2:	dc00      	bgt.n	10012de6 <__ieee754_pow+0x7de>
10012de4:	e0f4      	b.n	10012fd0 <__ieee754_pow+0x9c8>
10012de6:	0019      	movs	r1, r3
10012de8:	9a06      	ldr	r2, [sp, #24]
10012dea:	9b07      	ldr	r3, [sp, #28]
10012dec:	f002 fc0a 	bl	10015604 <__aeabi_dmul>
10012df0:	0006      	movs	r6, r0
10012df2:	e452      	b.n	1001269a <__ieee754_pow+0x92>
10012df4:	0032      	movs	r2, r6
10012df6:	0030      	movs	r0, r6
10012df8:	002b      	movs	r3, r5
10012dfa:	0029      	movs	r1, r5
10012dfc:	f002 fc02 	bl	10015604 <__aeabi_dmul>
10012e00:	0006      	movs	r6, r0
10012e02:	e44a      	b.n	1001269a <__ieee754_pow+0x92>
10012e04:	4b87      	ldr	r3, [pc, #540]	; (10013024 <__ieee754_pow+0xa1c>)
10012e06:	004e      	lsls	r6, r1, #1
10012e08:	0876      	lsrs	r6, r6, #1
10012e0a:	429e      	cmp	r6, r3
10012e0c:	dc00      	bgt.n	10012e10 <__ieee754_pow+0x808>
10012e0e:	e0bf      	b.n	10012f90 <__ieee754_pow+0x988>
10012e10:	4b85      	ldr	r3, [pc, #532]	; (10013028 <__ieee754_pow+0xa20>)
10012e12:	18cb      	adds	r3, r1, r3
10012e14:	4303      	orrs	r3, r0
10012e16:	d10c      	bne.n	10012e32 <__ieee754_pow+0x82a>
10012e18:	9a00      	ldr	r2, [sp, #0]
10012e1a:	9b01      	ldr	r3, [sp, #4]
10012e1c:	f002 fe6c 	bl	10015af8 <__aeabi_dsub>
10012e20:	0002      	movs	r2, r0
10012e22:	000b      	movs	r3, r1
10012e24:	9804      	ldr	r0, [sp, #16]
10012e26:	9905      	ldr	r1, [sp, #20]
10012e28:	f000 fd48 	bl	100138bc <__aeabi_dcmple>
10012e2c:	2800      	cmp	r0, #0
10012e2e:	d100      	bne.n	10012e32 <__ieee754_pow+0x82a>
10012e30:	e701      	b.n	10012c36 <__ieee754_pow+0x62e>
10012e32:	9806      	ldr	r0, [sp, #24]
10012e34:	9907      	ldr	r1, [sp, #28]
10012e36:	4a7d      	ldr	r2, [pc, #500]	; (1001302c <__ieee754_pow+0xa24>)
10012e38:	4b7d      	ldr	r3, [pc, #500]	; (10013030 <__ieee754_pow+0xa28>)
10012e3a:	f002 fbe3 	bl	10015604 <__aeabi_dmul>
10012e3e:	4a7b      	ldr	r2, [pc, #492]	; (1001302c <__ieee754_pow+0xa24>)
10012e40:	4b7b      	ldr	r3, [pc, #492]	; (10013030 <__ieee754_pow+0xa28>)
10012e42:	f002 fbdf 	bl	10015604 <__aeabi_dmul>
10012e46:	0006      	movs	r6, r0
10012e48:	f7ff fc27 	bl	1001269a <__ieee754_pow+0x92>
10012e4c:	2300      	movs	r3, #0
10012e4e:	4c79      	ldr	r4, [pc, #484]	; (10013034 <__ieee754_pow+0xa2c>)
10012e50:	9306      	str	r3, [sp, #24]
10012e52:	9407      	str	r4, [sp, #28]
10012e54:	e666      	b.n	10012b24 <__ieee754_pow+0x51c>
10012e56:	4653      	mov	r3, sl
10012e58:	2b00      	cmp	r3, #0
10012e5a:	db00      	blt.n	10012e5e <__ieee754_pow+0x856>
10012e5c:	e4c3      	b.n	100127e6 <__ieee754_pow+0x1de>
10012e5e:	9b00      	ldr	r3, [sp, #0]
10012e60:	9c01      	ldr	r4, [sp, #4]
10012e62:	2280      	movs	r2, #128	; 0x80
10012e64:	0612      	lsls	r2, r2, #24
10012e66:	001e      	movs	r6, r3
10012e68:	4694      	mov	ip, r2
10012e6a:	0023      	movs	r3, r4
10012e6c:	4463      	add	r3, ip
10012e6e:	0019      	movs	r1, r3
10012e70:	f7ff fc13 	bl	1001269a <__ieee754_pow+0x92>
10012e74:	0002      	movs	r2, r0
10012e76:	000b      	movs	r3, r1
10012e78:	2000      	movs	r0, #0
10012e7a:	4969      	ldr	r1, [pc, #420]	; (10013020 <__ieee754_pow+0xa18>)
10012e7c:	f001 ff9e 	bl	10014dbc <__aeabi_ddiv>
10012e80:	e44a      	b.n	10012718 <__ieee754_pow+0x110>
10012e82:	4b6d      	ldr	r3, [pc, #436]	; (10013038 <__ieee754_pow+0xa30>)
10012e84:	429c      	cmp	r4, r3
10012e86:	dc00      	bgt.n	10012e8a <__ieee754_pow+0x882>
10012e88:	e4aa      	b.n	100127e0 <__ieee754_pow+0x1d8>
10012e8a:	4b65      	ldr	r3, [pc, #404]	; (10013020 <__ieee754_pow+0xa18>)
10012e8c:	429c      	cmp	r4, r3
10012e8e:	dd01      	ble.n	10012e94 <__ieee754_pow+0x88c>
10012e90:	f7ff fc2c 	bl	100126ec <__ieee754_pow+0xe4>
10012e94:	2200      	movs	r2, #0
10012e96:	4b62      	ldr	r3, [pc, #392]	; (10013020 <__ieee754_pow+0xa18>)
10012e98:	f002 fe2e 	bl	10015af8 <__aeabi_dsub>
10012e9c:	22c0      	movs	r2, #192	; 0xc0
10012e9e:	4b67      	ldr	r3, [pc, #412]	; (1001303c <__ieee754_pow+0xa34>)
10012ea0:	05d2      	lsls	r2, r2, #23
10012ea2:	0004      	movs	r4, r0
10012ea4:	000d      	movs	r5, r1
10012ea6:	f002 fbad 	bl	10015604 <__aeabi_dmul>
10012eaa:	4a65      	ldr	r2, [pc, #404]	; (10013040 <__ieee754_pow+0xa38>)
10012eac:	0006      	movs	r6, r0
10012eae:	000f      	movs	r7, r1
10012eb0:	4b64      	ldr	r3, [pc, #400]	; (10013044 <__ieee754_pow+0xa3c>)
10012eb2:	0020      	movs	r0, r4
10012eb4:	0029      	movs	r1, r5
10012eb6:	f002 fba5 	bl	10015604 <__aeabi_dmul>
10012eba:	2200      	movs	r2, #0
10012ebc:	9002      	str	r0, [sp, #8]
10012ebe:	9103      	str	r1, [sp, #12]
10012ec0:	4b61      	ldr	r3, [pc, #388]	; (10013048 <__ieee754_pow+0xa40>)
10012ec2:	0020      	movs	r0, r4
10012ec4:	0029      	movs	r1, r5
10012ec6:	f002 fb9d 	bl	10015604 <__aeabi_dmul>
10012eca:	0002      	movs	r2, r0
10012ecc:	000b      	movs	r3, r1
10012ece:	485f      	ldr	r0, [pc, #380]	; (1001304c <__ieee754_pow+0xa44>)
10012ed0:	495f      	ldr	r1, [pc, #380]	; (10013050 <__ieee754_pow+0xa48>)
10012ed2:	f002 fe11 	bl	10015af8 <__aeabi_dsub>
10012ed6:	0022      	movs	r2, r4
10012ed8:	002b      	movs	r3, r5
10012eda:	f002 fb93 	bl	10015604 <__aeabi_dmul>
10012ede:	0002      	movs	r2, r0
10012ee0:	000b      	movs	r3, r1
10012ee2:	2000      	movs	r0, #0
10012ee4:	495b      	ldr	r1, [pc, #364]	; (10013054 <__ieee754_pow+0xa4c>)
10012ee6:	f002 fe07 	bl	10015af8 <__aeabi_dsub>
10012eea:	0022      	movs	r2, r4
10012eec:	9004      	str	r0, [sp, #16]
10012eee:	9105      	str	r1, [sp, #20]
10012ef0:	002b      	movs	r3, r5
10012ef2:	0020      	movs	r0, r4
10012ef4:	0029      	movs	r1, r5
10012ef6:	f002 fb85 	bl	10015604 <__aeabi_dmul>
10012efa:	0002      	movs	r2, r0
10012efc:	000b      	movs	r3, r1
10012efe:	9804      	ldr	r0, [sp, #16]
10012f00:	9905      	ldr	r1, [sp, #20]
10012f02:	f002 fb7f 	bl	10015604 <__aeabi_dmul>
10012f06:	4a54      	ldr	r2, [pc, #336]	; (10013058 <__ieee754_pow+0xa50>)
10012f08:	4b4c      	ldr	r3, [pc, #304]	; (1001303c <__ieee754_pow+0xa34>)
10012f0a:	f002 fb7b 	bl	10015604 <__aeabi_dmul>
10012f0e:	0002      	movs	r2, r0
10012f10:	000b      	movs	r3, r1
10012f12:	9802      	ldr	r0, [sp, #8]
10012f14:	9903      	ldr	r1, [sp, #12]
10012f16:	f002 fdef 	bl	10015af8 <__aeabi_dsub>
10012f1a:	0002      	movs	r2, r0
10012f1c:	000b      	movs	r3, r1
10012f1e:	0004      	movs	r4, r0
10012f20:	000d      	movs	r5, r1
10012f22:	0030      	movs	r0, r6
10012f24:	0039      	movs	r1, r7
10012f26:	f001 fc1d 	bl	10014764 <__aeabi_dadd>
10012f2a:	2200      	movs	r2, #0
10012f2c:	0010      	movs	r0, r2
10012f2e:	003b      	movs	r3, r7
10012f30:	0032      	movs	r2, r6
10012f32:	9002      	str	r0, [sp, #8]
10012f34:	9103      	str	r1, [sp, #12]
10012f36:	f002 fddf 	bl	10015af8 <__aeabi_dsub>
10012f3a:	0002      	movs	r2, r0
10012f3c:	000b      	movs	r3, r1
10012f3e:	0020      	movs	r0, r4
10012f40:	0029      	movs	r1, r5
10012f42:	f002 fdd9 	bl	10015af8 <__aeabi_dsub>
10012f46:	9004      	str	r0, [sp, #16]
10012f48:	9105      	str	r1, [sp, #20]
10012f4a:	e5e1      	b.n	10012b10 <__ieee754_pow+0x508>
10012f4c:	4a43      	ldr	r2, [pc, #268]	; (1001305c <__ieee754_pow+0xa54>)
10012f4e:	4b44      	ldr	r3, [pc, #272]	; (10013060 <__ieee754_pow+0xa58>)
10012f50:	9806      	ldr	r0, [sp, #24]
10012f52:	9907      	ldr	r1, [sp, #28]
10012f54:	f002 fb56 	bl	10015604 <__aeabi_dmul>
10012f58:	4a40      	ldr	r2, [pc, #256]	; (1001305c <__ieee754_pow+0xa54>)
10012f5a:	4b41      	ldr	r3, [pc, #260]	; (10013060 <__ieee754_pow+0xa58>)
10012f5c:	f002 fb52 	bl	10015604 <__aeabi_dmul>
10012f60:	0006      	movs	r6, r0
10012f62:	f7ff fb9a 	bl	1001269a <__ieee754_pow+0x92>
10012f66:	2a00      	cmp	r2, #0
10012f68:	d001      	beq.n	10012f6e <__ieee754_pow+0x966>
10012f6a:	f7ff fba5 	bl	100126b8 <__ieee754_pow+0xb0>
10012f6e:	3214      	adds	r2, #20
10012f70:	1ad3      	subs	r3, r2, r3
10012f72:	003a      	movs	r2, r7
10012f74:	411a      	asrs	r2, r3
10012f76:	0011      	movs	r1, r2
10012f78:	4099      	lsls	r1, r3
10012f7a:	428f      	cmp	r7, r1
10012f7c:	d001      	beq.n	10012f82 <__ieee754_pow+0x97a>
10012f7e:	f7ff fb6f 	bl	10012660 <__ieee754_pow+0x58>
10012f82:	2301      	movs	r3, #1
10012f84:	4013      	ands	r3, r2
10012f86:	2202      	movs	r2, #2
10012f88:	1ad3      	subs	r3, r2, r3
10012f8a:	469b      	mov	fp, r3
10012f8c:	f7ff fb68 	bl	10012660 <__ieee754_pow+0x58>
10012f90:	4b30      	ldr	r3, [pc, #192]	; (10013054 <__ieee754_pow+0xa4c>)
10012f92:	429e      	cmp	r6, r3
10012f94:	dd00      	ble.n	10012f98 <__ieee754_pow+0x990>
10012f96:	e64e      	b.n	10012c36 <__ieee754_pow+0x62e>
10012f98:	2300      	movs	r3, #0
10012f9a:	4699      	mov	r9, r3
10012f9c:	4698      	mov	r8, r3
10012f9e:	e67a      	b.n	10012c96 <__ieee754_pow+0x68e>
10012fa0:	0002      	movs	r2, r0
10012fa2:	000b      	movs	r3, r1
10012fa4:	f7ff fc14 	bl	100127d0 <__ieee754_pow+0x1c8>
10012fa8:	2380      	movs	r3, #128	; 0x80
10012faa:	4c2e      	ldr	r4, [pc, #184]	; (10013064 <__ieee754_pow+0xa5c>)
10012fac:	05db      	lsls	r3, r3, #23
10012fae:	9308      	str	r3, [sp, #32]
10012fb0:	9409      	str	r4, [sp, #36]	; 0x24
10012fb2:	4b2d      	ldr	r3, [pc, #180]	; (10013068 <__ieee754_pow+0xa60>)
10012fb4:	4c2d      	ldr	r4, [pc, #180]	; (1001306c <__ieee754_pow+0xa64>)
10012fb6:	2200      	movs	r2, #0
10012fb8:	930c      	str	r3, [sp, #48]	; 0x30
10012fba:	940d      	str	r4, [sp, #52]	; 0x34
10012fbc:	2480      	movs	r4, #128	; 0x80
10012fbe:	4b2c      	ldr	r3, [pc, #176]	; (10013070 <__ieee754_pow+0xa68>)
10012fc0:	02e4      	lsls	r4, r4, #11
10012fc2:	9206      	str	r2, [sp, #24]
10012fc4:	9307      	str	r3, [sp, #28]
10012fc6:	e456      	b.n	10012876 <__ieee754_pow+0x26e>
10012fc8:	4643      	mov	r3, r8
10012fca:	425b      	negs	r3, r3
10012fcc:	4698      	mov	r8, r3
10012fce:	e651      	b.n	10012c74 <__ieee754_pow+0x66c>
10012fd0:	4642      	mov	r2, r8
10012fd2:	f000 fa59 	bl	10013488 <scalbn>
10012fd6:	e707      	b.n	10012de8 <__ieee754_pow+0x7e0>
10012fd8:	fffffc02 	.word	0xfffffc02
10012fdc:	fffffc01 	.word	0xfffffc01
10012fe0:	000fffff 	.word	0x000fffff
10012fe4:	3fe62e43 	.word	0x3fe62e43
10012fe8:	fefa39ef 	.word	0xfefa39ef
10012fec:	3fe62e42 	.word	0x3fe62e42
10012ff0:	0ca86c39 	.word	0x0ca86c39
10012ff4:	be205c61 	.word	0xbe205c61
10012ff8:	72bea4d0 	.word	0x72bea4d0
10012ffc:	3e663769 	.word	0x3e663769
10013000:	c5d26bf1 	.word	0xc5d26bf1
10013004:	3ebbbd41 	.word	0x3ebbbd41
10013008:	af25de2c 	.word	0xaf25de2c
1001300c:	3f11566a 	.word	0x3f11566a
10013010:	16bebd93 	.word	0x16bebd93
10013014:	3f66c16c 	.word	0x3f66c16c
10013018:	5555553e 	.word	0x5555553e
1001301c:	3fc55555 	.word	0x3fc55555
10013020:	3ff00000 	.word	0x3ff00000
10013024:	4090cbff 	.word	0x4090cbff
10013028:	3f6f3400 	.word	0x3f6f3400
1001302c:	c2f8f359 	.word	0xc2f8f359
10013030:	01a56e1f 	.word	0x01a56e1f
10013034:	bff00000 	.word	0xbff00000
10013038:	3feffffe 	.word	0x3feffffe
1001303c:	3ff71547 	.word	0x3ff71547
10013040:	f85ddf44 	.word	0xf85ddf44
10013044:	3e54ae0b 	.word	0x3e54ae0b
10013048:	3fd00000 	.word	0x3fd00000
1001304c:	55555555 	.word	0x55555555
10013050:	3fd55555 	.word	0x3fd55555
10013054:	3fe00000 	.word	0x3fe00000
10013058:	652b82fe 	.word	0x652b82fe
1001305c:	8800759c 	.word	0x8800759c
10013060:	7e37e43c 	.word	0x7e37e43c
10013064:	3fe2b803 	.word	0x3fe2b803
10013068:	43cfd006 	.word	0x43cfd006
1001306c:	3e4cfdeb 	.word	0x3e4cfdeb
10013070:	3ff80000 	.word	0x3ff80000

10013074 <__ieee754_sqrt>:
10013074:	b5f0      	push	{r4, r5, r6, r7, lr}
10013076:	4656      	mov	r6, sl
10013078:	464d      	mov	r5, r9
1001307a:	4644      	mov	r4, r8
1001307c:	465f      	mov	r7, fp
1001307e:	4b75      	ldr	r3, [pc, #468]	; (10013254 <__ieee754_sqrt+0x1e0>)
10013080:	b4f0      	push	{r4, r5, r6, r7}
10013082:	000a      	movs	r2, r1
10013084:	000d      	movs	r5, r1
10013086:	0019      	movs	r1, r3
10013088:	b083      	sub	sp, #12
1001308a:	0006      	movs	r6, r0
1001308c:	0004      	movs	r4, r0
1001308e:	4029      	ands	r1, r5
10013090:	4299      	cmp	r1, r3
10013092:	d100      	bne.n	10013096 <__ieee754_sqrt+0x22>
10013094:	e0ba      	b.n	1001320c <__ieee754_sqrt+0x198>
10013096:	2d00      	cmp	r5, #0
10013098:	dc00      	bgt.n	1001309c <__ieee754_sqrt+0x28>
1001309a:	e094      	b.n	100131c6 <__ieee754_sqrt+0x152>
1001309c:	152d      	asrs	r5, r5, #20
1001309e:	d100      	bne.n	100130a2 <__ieee754_sqrt+0x2e>
100130a0:	e0a3      	b.n	100131ea <__ieee754_sqrt+0x176>
100130a2:	4b6d      	ldr	r3, [pc, #436]	; (10013258 <__ieee754_sqrt+0x1e4>)
100130a4:	0312      	lsls	r2, r2, #12
100130a6:	469c      	mov	ip, r3
100130a8:	2380      	movs	r3, #128	; 0x80
100130aa:	0b12      	lsrs	r2, r2, #12
100130ac:	035b      	lsls	r3, r3, #13
100130ae:	4465      	add	r5, ip
100130b0:	431a      	orrs	r2, r3
100130b2:	07eb      	lsls	r3, r5, #31
100130b4:	d500      	bpl.n	100130b8 <__ieee754_sqrt+0x44>
100130b6:	e081      	b.n	100131bc <__ieee754_sqrt+0x148>
100130b8:	106b      	asrs	r3, r5, #1
100130ba:	4698      	mov	r8, r3
100130bc:	0fe3      	lsrs	r3, r4, #31
100130be:	189b      	adds	r3, r3, r2
100130c0:	189b      	adds	r3, r3, r2
100130c2:	2280      	movs	r2, #128	; 0x80
100130c4:	2116      	movs	r1, #22
100130c6:	2600      	movs	r6, #0
100130c8:	2700      	movs	r7, #0
100130ca:	0064      	lsls	r4, r4, #1
100130cc:	0392      	lsls	r2, r2, #14
100130ce:	18b8      	adds	r0, r7, r2
100130d0:	4298      	cmp	r0, r3
100130d2:	dc02      	bgt.n	100130da <__ieee754_sqrt+0x66>
100130d4:	1887      	adds	r7, r0, r2
100130d6:	1a1b      	subs	r3, r3, r0
100130d8:	18b6      	adds	r6, r6, r2
100130da:	0fe0      	lsrs	r0, r4, #31
100130dc:	005b      	lsls	r3, r3, #1
100130de:	3901      	subs	r1, #1
100130e0:	181b      	adds	r3, r3, r0
100130e2:	0064      	lsls	r4, r4, #1
100130e4:	0852      	lsrs	r2, r2, #1
100130e6:	2900      	cmp	r1, #0
100130e8:	d1f1      	bne.n	100130ce <__ieee754_sqrt+0x5a>
100130ea:	2200      	movs	r2, #0
100130ec:	9201      	str	r2, [sp, #4]
100130ee:	4694      	mov	ip, r2
100130f0:	2280      	movs	r2, #128	; 0x80
100130f2:	0612      	lsls	r2, r2, #24
100130f4:	2020      	movs	r0, #32
100130f6:	4691      	mov	r9, r2
100130f8:	e009      	b.n	1001310e <__ieee754_sqrt+0x9a>
100130fa:	429f      	cmp	r7, r3
100130fc:	d041      	beq.n	10013182 <__ieee754_sqrt+0x10e>
100130fe:	0fe1      	lsrs	r1, r4, #31
10013100:	18c9      	adds	r1, r1, r3
10013102:	3801      	subs	r0, #1
10013104:	18cb      	adds	r3, r1, r3
10013106:	0064      	lsls	r4, r4, #1
10013108:	0852      	lsrs	r2, r2, #1
1001310a:	2800      	cmp	r0, #0
1001310c:	d01e      	beq.n	1001314c <__ieee754_sqrt+0xd8>
1001310e:	4661      	mov	r1, ip
10013110:	1851      	adds	r1, r2, r1
10013112:	429f      	cmp	r7, r3
10013114:	daf1      	bge.n	100130fa <__ieee754_sqrt+0x86>
10013116:	188d      	adds	r5, r1, r2
10013118:	46ac      	mov	ip, r5
1001311a:	0fcd      	lsrs	r5, r1, #31
1001311c:	07ed      	lsls	r5, r5, #31
1001311e:	46ba      	mov	sl, r7
10013120:	454d      	cmp	r5, r9
10013122:	d039      	beq.n	10013198 <__ieee754_sqrt+0x124>
10013124:	1bdb      	subs	r3, r3, r7
10013126:	428c      	cmp	r4, r1
10013128:	41bf      	sbcs	r7, r7
1001312a:	427f      	negs	r7, r7
1001312c:	1bdb      	subs	r3, r3, r7
1001312e:	1a64      	subs	r4, r4, r1
10013130:	9901      	ldr	r1, [sp, #4]
10013132:	3801      	subs	r0, #1
10013134:	468b      	mov	fp, r1
10013136:	4493      	add	fp, r2
10013138:	4659      	mov	r1, fp
1001313a:	9101      	str	r1, [sp, #4]
1001313c:	0fe1      	lsrs	r1, r4, #31
1001313e:	18c9      	adds	r1, r1, r3
10013140:	4657      	mov	r7, sl
10013142:	18cb      	adds	r3, r1, r3
10013144:	0064      	lsls	r4, r4, #1
10013146:	0852      	lsrs	r2, r2, #1
10013148:	2800      	cmp	r0, #0
1001314a:	d1e0      	bne.n	1001310e <__ieee754_sqrt+0x9a>
1001314c:	4323      	orrs	r3, r4
1001314e:	d12b      	bne.n	100131a8 <__ieee754_sqrt+0x134>
10013150:	9b01      	ldr	r3, [sp, #4]
10013152:	085b      	lsrs	r3, r3, #1
10013154:	4941      	ldr	r1, [pc, #260]	; (1001325c <__ieee754_sqrt+0x1e8>)
10013156:	1072      	asrs	r2, r6, #1
10013158:	468c      	mov	ip, r1
1001315a:	4462      	add	r2, ip
1001315c:	07f1      	lsls	r1, r6, #31
1001315e:	d502      	bpl.n	10013166 <__ieee754_sqrt+0xf2>
10013160:	2180      	movs	r1, #128	; 0x80
10013162:	0609      	lsls	r1, r1, #24
10013164:	430b      	orrs	r3, r1
10013166:	4641      	mov	r1, r8
10013168:	0509      	lsls	r1, r1, #20
1001316a:	188d      	adds	r5, r1, r2
1001316c:	001e      	movs	r6, r3
1001316e:	002f      	movs	r7, r5
10013170:	0030      	movs	r0, r6
10013172:	0039      	movs	r1, r7
10013174:	b003      	add	sp, #12
10013176:	bc3c      	pop	{r2, r3, r4, r5}
10013178:	4690      	mov	r8, r2
1001317a:	4699      	mov	r9, r3
1001317c:	46a2      	mov	sl, r4
1001317e:	46ab      	mov	fp, r5
10013180:	bdf0      	pop	{r4, r5, r6, r7, pc}
10013182:	42a1      	cmp	r1, r4
10013184:	d80e      	bhi.n	100131a4 <__ieee754_sqrt+0x130>
10013186:	188d      	adds	r5, r1, r2
10013188:	46ac      	mov	ip, r5
1001318a:	0fcd      	lsrs	r5, r1, #31
1001318c:	07ed      	lsls	r5, r5, #31
1001318e:	454d      	cmp	r5, r9
10013190:	d048      	beq.n	10013224 <__ieee754_sqrt+0x1b0>
10013192:	469a      	mov	sl, r3
10013194:	2300      	movs	r3, #0
10013196:	e7ca      	b.n	1001312e <__ieee754_sqrt+0xba>
10013198:	4665      	mov	r5, ip
1001319a:	2d00      	cmp	r5, #0
1001319c:	dbc2      	blt.n	10013124 <__ieee754_sqrt+0xb0>
1001319e:	1c7d      	adds	r5, r7, #1
100131a0:	46aa      	mov	sl, r5
100131a2:	e7bf      	b.n	10013124 <__ieee754_sqrt+0xb0>
100131a4:	003b      	movs	r3, r7
100131a6:	e7aa      	b.n	100130fe <__ieee754_sqrt+0x8a>
100131a8:	9b01      	ldr	r3, [sp, #4]
100131aa:	3301      	adds	r3, #1
100131ac:	d03e      	beq.n	1001322c <__ieee754_sqrt+0x1b8>
100131ae:	9a01      	ldr	r2, [sp, #4]
100131b0:	2301      	movs	r3, #1
100131b2:	4694      	mov	ip, r2
100131b4:	4013      	ands	r3, r2
100131b6:	4463      	add	r3, ip
100131b8:	085b      	lsrs	r3, r3, #1
100131ba:	e7cb      	b.n	10013154 <__ieee754_sqrt+0xe0>
100131bc:	0fe3      	lsrs	r3, r4, #31
100131be:	0052      	lsls	r2, r2, #1
100131c0:	189a      	adds	r2, r3, r2
100131c2:	0064      	lsls	r4, r4, #1
100131c4:	e778      	b.n	100130b8 <__ieee754_sqrt+0x44>
100131c6:	006b      	lsls	r3, r5, #1
100131c8:	085b      	lsrs	r3, r3, #1
100131ca:	4303      	orrs	r3, r0
100131cc:	002f      	movs	r7, r5
100131ce:	2b00      	cmp	r3, #0
100131d0:	d0ce      	beq.n	10013170 <__ieee754_sqrt+0xfc>
100131d2:	2500      	movs	r5, #0
100131d4:	2a00      	cmp	r2, #0
100131d6:	d131      	bne.n	1001323c <__ieee754_sqrt+0x1c8>
100131d8:	0ae2      	lsrs	r2, r4, #11
100131da:	3d15      	subs	r5, #21
100131dc:	0564      	lsls	r4, r4, #21
100131de:	2a00      	cmp	r2, #0
100131e0:	d0fa      	beq.n	100131d8 <__ieee754_sqrt+0x164>
100131e2:	2380      	movs	r3, #128	; 0x80
100131e4:	035b      	lsls	r3, r3, #13
100131e6:	421a      	tst	r2, r3
100131e8:	d123      	bne.n	10013232 <__ieee754_sqrt+0x1be>
100131ea:	2080      	movs	r0, #128	; 0x80
100131ec:	2300      	movs	r3, #0
100131ee:	0340      	lsls	r0, r0, #13
100131f0:	e000      	b.n	100131f4 <__ieee754_sqrt+0x180>
100131f2:	000b      	movs	r3, r1
100131f4:	0052      	lsls	r2, r2, #1
100131f6:	1c59      	adds	r1, r3, #1
100131f8:	4202      	tst	r2, r0
100131fa:	d0fa      	beq.n	100131f2 <__ieee754_sqrt+0x17e>
100131fc:	2020      	movs	r0, #32
100131fe:	1a40      	subs	r0, r0, r1
10013200:	1aed      	subs	r5, r5, r3
10013202:	0023      	movs	r3, r4
10013204:	40c3      	lsrs	r3, r0
10013206:	408c      	lsls	r4, r1
10013208:	431a      	orrs	r2, r3
1001320a:	e74a      	b.n	100130a2 <__ieee754_sqrt+0x2e>
1001320c:	0002      	movs	r2, r0
1001320e:	002b      	movs	r3, r5
10013210:	0029      	movs	r1, r5
10013212:	f002 f9f7 	bl	10015604 <__aeabi_dmul>
10013216:	0032      	movs	r2, r6
10013218:	002b      	movs	r3, r5
1001321a:	f001 faa3 	bl	10014764 <__aeabi_dadd>
1001321e:	0006      	movs	r6, r0
10013220:	000f      	movs	r7, r1
10013222:	e7a5      	b.n	10013170 <__ieee754_sqrt+0xfc>
10013224:	4665      	mov	r5, ip
10013226:	2d00      	cmp	r5, #0
10013228:	dab9      	bge.n	1001319e <__ieee754_sqrt+0x12a>
1001322a:	e7b2      	b.n	10013192 <__ieee754_sqrt+0x11e>
1001322c:	3601      	adds	r6, #1
1001322e:	2300      	movs	r3, #0
10013230:	e790      	b.n	10013154 <__ieee754_sqrt+0xe0>
10013232:	2301      	movs	r3, #1
10013234:	2020      	movs	r0, #32
10013236:	425b      	negs	r3, r3
10013238:	2100      	movs	r1, #0
1001323a:	e7e1      	b.n	10013200 <__ieee754_sqrt+0x18c>
1001323c:	003b      	movs	r3, r7
1001323e:	0002      	movs	r2, r0
10013240:	0039      	movs	r1, r7
10013242:	f002 fc59 	bl	10015af8 <__aeabi_dsub>
10013246:	0002      	movs	r2, r0
10013248:	000b      	movs	r3, r1
1001324a:	f001 fdb7 	bl	10014dbc <__aeabi_ddiv>
1001324e:	0006      	movs	r6, r0
10013250:	000f      	movs	r7, r1
10013252:	e78d      	b.n	10013170 <__ieee754_sqrt+0xfc>
10013254:	7ff00000 	.word	0x7ff00000
10013258:	fffffc01 	.word	0xfffffc01
1001325c:	3fe00000 	.word	0x3fe00000

10013260 <__ieee754_sqrtf>:
10013260:	492b      	ldr	r1, [pc, #172]	; (10013310 <__ieee754_sqrtf+0xb0>)
10013262:	0042      	lsls	r2, r0, #1
10013264:	b570      	push	{r4, r5, r6, lr}
10013266:	0003      	movs	r3, r0
10013268:	1c04      	adds	r4, r0, #0
1001326a:	0852      	lsrs	r2, r2, #1
1001326c:	428a      	cmp	r2, r1
1001326e:	d83a      	bhi.n	100132e6 <__ieee754_sqrtf+0x86>
10013270:	2a00      	cmp	r2, #0
10013272:	d037      	beq.n	100132e4 <__ieee754_sqrtf+0x84>
10013274:	2800      	cmp	r0, #0
10013276:	db3f      	blt.n	100132f8 <__ieee754_sqrtf+0x98>
10013278:	4926      	ldr	r1, [pc, #152]	; (10013314 <__ieee754_sqrtf+0xb4>)
1001327a:	15c0      	asrs	r0, r0, #23
1001327c:	428a      	cmp	r2, r1
1001327e:	d80b      	bhi.n	10013298 <__ieee754_sqrtf+0x38>
10013280:	3101      	adds	r1, #1
10013282:	4221      	tst	r1, r4
10013284:	d13f      	bne.n	10013306 <__ieee754_sqrtf+0xa6>
10013286:	2200      	movs	r2, #0
10013288:	000c      	movs	r4, r1
1001328a:	e000      	b.n	1001328e <__ieee754_sqrtf+0x2e>
1001328c:	000a      	movs	r2, r1
1001328e:	005b      	lsls	r3, r3, #1
10013290:	1c51      	adds	r1, r2, #1
10013292:	4223      	tst	r3, r4
10013294:	d0fa      	beq.n	1001328c <__ieee754_sqrtf+0x2c>
10013296:	1a80      	subs	r0, r0, r2
10013298:	2280      	movs	r2, #128	; 0x80
1001329a:	025b      	lsls	r3, r3, #9
1001329c:	0a5b      	lsrs	r3, r3, #9
1001329e:	0412      	lsls	r2, r2, #16
100132a0:	387f      	subs	r0, #127	; 0x7f
100132a2:	4313      	orrs	r3, r2
100132a4:	07c2      	lsls	r2, r0, #31
100132a6:	d425      	bmi.n	100132f4 <__ieee754_sqrtf+0x94>
100132a8:	2280      	movs	r2, #128	; 0x80
100132aa:	2119      	movs	r1, #25
100132ac:	2500      	movs	r5, #0
100132ae:	2600      	movs	r6, #0
100132b0:	1040      	asrs	r0, r0, #1
100132b2:	005b      	lsls	r3, r3, #1
100132b4:	0452      	lsls	r2, r2, #17
100132b6:	18b4      	adds	r4, r6, r2
100132b8:	429c      	cmp	r4, r3
100132ba:	dc02      	bgt.n	100132c2 <__ieee754_sqrtf+0x62>
100132bc:	18a6      	adds	r6, r4, r2
100132be:	1b1b      	subs	r3, r3, r4
100132c0:	18ad      	adds	r5, r5, r2
100132c2:	3901      	subs	r1, #1
100132c4:	005b      	lsls	r3, r3, #1
100132c6:	0852      	lsrs	r2, r2, #1
100132c8:	2900      	cmp	r1, #0
100132ca:	d1f4      	bne.n	100132b6 <__ieee754_sqrtf+0x56>
100132cc:	2b00      	cmp	r3, #0
100132ce:	d002      	beq.n	100132d6 <__ieee754_sqrtf+0x76>
100132d0:	2301      	movs	r3, #1
100132d2:	402b      	ands	r3, r5
100132d4:	18ed      	adds	r5, r5, r3
100132d6:	23fc      	movs	r3, #252	; 0xfc
100132d8:	059b      	lsls	r3, r3, #22
100132da:	469c      	mov	ip, r3
100132dc:	106d      	asrs	r5, r5, #1
100132de:	4465      	add	r5, ip
100132e0:	05c0      	lsls	r0, r0, #23
100132e2:	1940      	adds	r0, r0, r5
100132e4:	bd70      	pop	{r4, r5, r6, pc}
100132e6:	1c01      	adds	r1, r0, #0
100132e8:	f000 fee2 	bl	100140b0 <__aeabi_fmul>
100132ec:	1c21      	adds	r1, r4, #0
100132ee:	f000 fb9f 	bl	10013a30 <__aeabi_fadd>
100132f2:	e7f7      	b.n	100132e4 <__ieee754_sqrtf+0x84>
100132f4:	005b      	lsls	r3, r3, #1
100132f6:	e7d7      	b.n	100132a8 <__ieee754_sqrtf+0x48>
100132f8:	1c01      	adds	r1, r0, #0
100132fa:	f000 ffed 	bl	100142d8 <__aeabi_fsub>
100132fe:	1c01      	adds	r1, r0, #0
10013300:	f000 fd0c 	bl	10013d1c <__aeabi_fdiv>
10013304:	e7ee      	b.n	100132e4 <__ieee754_sqrtf+0x84>
10013306:	2201      	movs	r2, #1
10013308:	4252      	negs	r2, r2
1001330a:	1a80      	subs	r0, r0, r2
1001330c:	e7c4      	b.n	10013298 <__ieee754_sqrtf+0x38>
1001330e:	46c0      	nop			; (mov r8, r8)
10013310:	7f7fffff 	.word	0x7f7fffff
10013314:	007fffff 	.word	0x007fffff

10013318 <fabs>:
10013318:	0049      	lsls	r1, r1, #1
1001331a:	084b      	lsrs	r3, r1, #1
1001331c:	0019      	movs	r1, r3
1001331e:	4770      	bx	lr

10013320 <finite>:
10013320:	4b03      	ldr	r3, [pc, #12]	; (10013330 <finite+0x10>)
10013322:	0048      	lsls	r0, r1, #1
10013324:	469c      	mov	ip, r3
10013326:	0840      	lsrs	r0, r0, #1
10013328:	4460      	add	r0, ip
1001332a:	0fc0      	lsrs	r0, r0, #31
1001332c:	4770      	bx	lr
1001332e:	46c0      	nop			; (mov r8, r8)
10013330:	80100000 	.word	0x80100000

10013334 <matherr>:
10013334:	2000      	movs	r0, #0
10013336:	4770      	bx	lr

10013338 <nan>:
10013338:	2000      	movs	r0, #0
1001333a:	4901      	ldr	r1, [pc, #4]	; (10013340 <nan+0x8>)
1001333c:	4770      	bx	lr
1001333e:	46c0      	nop			; (mov r8, r8)
10013340:	7ff80000 	.word	0x7ff80000

10013344 <rint>:
10013344:	b5f0      	push	{r4, r5, r6, r7, lr}
10013346:	4647      	mov	r7, r8
10013348:	b480      	push	{r7}
1001334a:	0fcb      	lsrs	r3, r1, #31
1001334c:	4698      	mov	r8, r3
1001334e:	4c4a      	ldr	r4, [pc, #296]	; (10013478 <rint+0x134>)
10013350:	004b      	lsls	r3, r1, #1
10013352:	0d5b      	lsrs	r3, r3, #21
10013354:	191e      	adds	r6, r3, r4
10013356:	b082      	sub	sp, #8
10013358:	0007      	movs	r7, r0
1001335a:	000a      	movs	r2, r1
1001335c:	2e13      	cmp	r6, #19
1001335e:	dc35      	bgt.n	100133cc <rint+0x88>
10013360:	2e00      	cmp	r6, #0
10013362:	db57      	blt.n	10013414 <rint+0xd0>
10013364:	4b45      	ldr	r3, [pc, #276]	; (1001347c <rint+0x138>)
10013366:	0004      	movs	r4, r0
10013368:	4133      	asrs	r3, r6
1001336a:	001f      	movs	r7, r3
1001336c:	400f      	ands	r7, r1
1001336e:	4307      	orrs	r7, r0
10013370:	000d      	movs	r5, r1
10013372:	2f00      	cmp	r7, #0
10013374:	d024      	beq.n	100133c0 <rint+0x7c>
10013376:	085b      	lsrs	r3, r3, #1
10013378:	001c      	movs	r4, r3
1001337a:	400c      	ands	r4, r1
1001337c:	4320      	orrs	r0, r4
1001337e:	2700      	movs	r7, #0
10013380:	2800      	cmp	r0, #0
10013382:	d007      	beq.n	10013394 <rint+0x50>
10013384:	2e13      	cmp	r6, #19
10013386:	d100      	bne.n	1001338a <rint+0x46>
10013388:	e072      	b.n	10013470 <rint+0x12c>
1001338a:	2280      	movs	r2, #128	; 0x80
1001338c:	02d2      	lsls	r2, r2, #11
1001338e:	4132      	asrs	r2, r6
10013390:	4399      	bics	r1, r3
10013392:	430a      	orrs	r2, r1
10013394:	4643      	mov	r3, r8
10013396:	00de      	lsls	r6, r3, #3
10013398:	4b39      	ldr	r3, [pc, #228]	; (10013480 <rint+0x13c>)
1001339a:	0011      	movs	r1, r2
1001339c:	199e      	adds	r6, r3, r6
1001339e:	6834      	ldr	r4, [r6, #0]
100133a0:	6875      	ldr	r5, [r6, #4]
100133a2:	0038      	movs	r0, r7
100133a4:	0022      	movs	r2, r4
100133a6:	002b      	movs	r3, r5
100133a8:	f001 f9dc 	bl	10014764 <__aeabi_dadd>
100133ac:	9000      	str	r0, [sp, #0]
100133ae:	9101      	str	r1, [sp, #4]
100133b0:	9800      	ldr	r0, [sp, #0]
100133b2:	9901      	ldr	r1, [sp, #4]
100133b4:	0022      	movs	r2, r4
100133b6:	002b      	movs	r3, r5
100133b8:	f002 fb9e 	bl	10015af8 <__aeabi_dsub>
100133bc:	0004      	movs	r4, r0
100133be:	000d      	movs	r5, r1
100133c0:	0020      	movs	r0, r4
100133c2:	0029      	movs	r1, r5
100133c4:	b002      	add	sp, #8
100133c6:	bc04      	pop	{r2}
100133c8:	4690      	mov	r8, r2
100133ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
100133cc:	2e33      	cmp	r6, #51	; 0x33
100133ce:	dd0c      	ble.n	100133ea <rint+0xa6>
100133d0:	2380      	movs	r3, #128	; 0x80
100133d2:	0004      	movs	r4, r0
100133d4:	000d      	movs	r5, r1
100133d6:	00db      	lsls	r3, r3, #3
100133d8:	429e      	cmp	r6, r3
100133da:	d1f1      	bne.n	100133c0 <rint+0x7c>
100133dc:	0002      	movs	r2, r0
100133de:	000b      	movs	r3, r1
100133e0:	f001 f9c0 	bl	10014764 <__aeabi_dadd>
100133e4:	0004      	movs	r4, r0
100133e6:	000d      	movs	r5, r1
100133e8:	e7ea      	b.n	100133c0 <rint+0x7c>
100133ea:	4c26      	ldr	r4, [pc, #152]	; (10013484 <rint+0x140>)
100133ec:	000d      	movs	r5, r1
100133ee:	46a4      	mov	ip, r4
100133f0:	2401      	movs	r4, #1
100133f2:	4463      	add	r3, ip
100133f4:	4264      	negs	r4, r4
100133f6:	40dc      	lsrs	r4, r3
100133f8:	46a4      	mov	ip, r4
100133fa:	4661      	mov	r1, ip
100133fc:	0004      	movs	r4, r0
100133fe:	4201      	tst	r1, r0
10013400:	d0de      	beq.n	100133c0 <rint+0x7c>
10013402:	0849      	lsrs	r1, r1, #1
10013404:	4201      	tst	r1, r0
10013406:	d0c5      	beq.n	10013394 <rint+0x50>
10013408:	2780      	movs	r7, #128	; 0x80
1001340a:	05ff      	lsls	r7, r7, #23
1001340c:	411f      	asrs	r7, r3
1001340e:	4388      	bics	r0, r1
10013410:	4307      	orrs	r7, r0
10013412:	e7bf      	b.n	10013394 <rint+0x50>
10013414:	004b      	lsls	r3, r1, #1
10013416:	085b      	lsrs	r3, r3, #1
10013418:	4303      	orrs	r3, r0
1001341a:	0004      	movs	r4, r0
1001341c:	000d      	movs	r5, r1
1001341e:	2b00      	cmp	r3, #0
10013420:	d0ce      	beq.n	100133c0 <rint+0x7c>
10013422:	030b      	lsls	r3, r1, #12
10013424:	0b1b      	lsrs	r3, r3, #12
10013426:	4303      	orrs	r3, r0
10013428:	425a      	negs	r2, r3
1001342a:	4313      	orrs	r3, r2
1001342c:	2280      	movs	r2, #128	; 0x80
1001342e:	0b1b      	lsrs	r3, r3, #12
10013430:	0312      	lsls	r2, r2, #12
10013432:	4013      	ands	r3, r2
10013434:	0c4a      	lsrs	r2, r1, #17
10013436:	0452      	lsls	r2, r2, #17
10013438:	4313      	orrs	r3, r2
1001343a:	0019      	movs	r1, r3
1001343c:	4643      	mov	r3, r8
1001343e:	4a10      	ldr	r2, [pc, #64]	; (10013480 <rint+0x13c>)
10013440:	00db      	lsls	r3, r3, #3
10013442:	18d3      	adds	r3, r2, r3
10013444:	681c      	ldr	r4, [r3, #0]
10013446:	685d      	ldr	r5, [r3, #4]
10013448:	0022      	movs	r2, r4
1001344a:	002b      	movs	r3, r5
1001344c:	f001 f98a 	bl	10014764 <__aeabi_dadd>
10013450:	9000      	str	r0, [sp, #0]
10013452:	9101      	str	r1, [sp, #4]
10013454:	9800      	ldr	r0, [sp, #0]
10013456:	9901      	ldr	r1, [sp, #4]
10013458:	0022      	movs	r2, r4
1001345a:	002b      	movs	r3, r5
1001345c:	f002 fb4c 	bl	10015af8 <__aeabi_dsub>
10013460:	4642      	mov	r2, r8
10013462:	004b      	lsls	r3, r1, #1
10013464:	085b      	lsrs	r3, r3, #1
10013466:	07d6      	lsls	r6, r2, #31
10013468:	4333      	orrs	r3, r6
1001346a:	0004      	movs	r4, r0
1001346c:	001d      	movs	r5, r3
1001346e:	e7a7      	b.n	100133c0 <rint+0x7c>
10013470:	2780      	movs	r7, #128	; 0x80
10013472:	063f      	lsls	r7, r7, #24
10013474:	e789      	b.n	1001338a <rint+0x46>
10013476:	46c0      	nop			; (mov r8, r8)
10013478:	fffffc01 	.word	0xfffffc01
1001347c:	000fffff 	.word	0x000fffff
10013480:	100186b8 	.word	0x100186b8
10013484:	fffffbed 	.word	0xfffffbed

10013488 <scalbn>:
10013488:	004b      	lsls	r3, r1, #1
1001348a:	b570      	push	{r4, r5, r6, lr}
1001348c:	0d5b      	lsrs	r3, r3, #21
1001348e:	0014      	movs	r4, r2
10013490:	000a      	movs	r2, r1
10013492:	2b00      	cmp	r3, #0
10013494:	d11a      	bne.n	100134cc <scalbn+0x44>
10013496:	004b      	lsls	r3, r1, #1
10013498:	085b      	lsrs	r3, r3, #1
1001349a:	4303      	orrs	r3, r0
1001349c:	d015      	beq.n	100134ca <scalbn+0x42>
1001349e:	2200      	movs	r2, #0
100134a0:	4b22      	ldr	r3, [pc, #136]	; (1001352c <scalbn+0xa4>)
100134a2:	f002 f8af 	bl	10015604 <__aeabi_dmul>
100134a6:	4b22      	ldr	r3, [pc, #136]	; (10013530 <scalbn+0xa8>)
100134a8:	000a      	movs	r2, r1
100134aa:	429c      	cmp	r4, r3
100134ac:	db22      	blt.n	100134f4 <scalbn+0x6c>
100134ae:	004b      	lsls	r3, r1, #1
100134b0:	0d5b      	lsrs	r3, r3, #21
100134b2:	3b36      	subs	r3, #54	; 0x36
100134b4:	4d1f      	ldr	r5, [pc, #124]	; (10013534 <scalbn+0xac>)
100134b6:	18e3      	adds	r3, r4, r3
100134b8:	42ab      	cmp	r3, r5
100134ba:	dc20      	bgt.n	100134fe <scalbn+0x76>
100134bc:	2b00      	cmp	r3, #0
100134be:	dd0d      	ble.n	100134dc <scalbn+0x54>
100134c0:	4c1d      	ldr	r4, [pc, #116]	; (10013538 <scalbn+0xb0>)
100134c2:	051b      	lsls	r3, r3, #20
100134c4:	4022      	ands	r2, r4
100134c6:	431a      	orrs	r2, r3
100134c8:	0011      	movs	r1, r2
100134ca:	bd70      	pop	{r4, r5, r6, pc}
100134cc:	4d1b      	ldr	r5, [pc, #108]	; (1001353c <scalbn+0xb4>)
100134ce:	42ab      	cmp	r3, r5
100134d0:	d1f0      	bne.n	100134b4 <scalbn+0x2c>
100134d2:	0002      	movs	r2, r0
100134d4:	000b      	movs	r3, r1
100134d6:	f001 f945 	bl	10014764 <__aeabi_dadd>
100134da:	e7f6      	b.n	100134ca <scalbn+0x42>
100134dc:	001d      	movs	r5, r3
100134de:	3535      	adds	r5, #53	; 0x35
100134e0:	da18      	bge.n	10013514 <scalbn+0x8c>
100134e2:	4b17      	ldr	r3, [pc, #92]	; (10013540 <scalbn+0xb8>)
100134e4:	0002      	movs	r2, r0
100134e6:	429c      	cmp	r4, r3
100134e8:	dc0a      	bgt.n	10013500 <scalbn+0x78>
100134ea:	000b      	movs	r3, r1
100134ec:	4815      	ldr	r0, [pc, #84]	; (10013544 <scalbn+0xbc>)
100134ee:	4916      	ldr	r1, [pc, #88]	; (10013548 <scalbn+0xc0>)
100134f0:	f000 f832 	bl	10013558 <copysign>
100134f4:	4a13      	ldr	r2, [pc, #76]	; (10013544 <scalbn+0xbc>)
100134f6:	4b14      	ldr	r3, [pc, #80]	; (10013548 <scalbn+0xc0>)
100134f8:	f002 f884 	bl	10015604 <__aeabi_dmul>
100134fc:	e7e5      	b.n	100134ca <scalbn+0x42>
100134fe:	0002      	movs	r2, r0
10013500:	000b      	movs	r3, r1
10013502:	4812      	ldr	r0, [pc, #72]	; (1001354c <scalbn+0xc4>)
10013504:	4912      	ldr	r1, [pc, #72]	; (10013550 <scalbn+0xc8>)
10013506:	f000 f827 	bl	10013558 <copysign>
1001350a:	4a10      	ldr	r2, [pc, #64]	; (1001354c <scalbn+0xc4>)
1001350c:	4b10      	ldr	r3, [pc, #64]	; (10013550 <scalbn+0xc8>)
1001350e:	f002 f879 	bl	10015604 <__aeabi_dmul>
10013512:	e7da      	b.n	100134ca <scalbn+0x42>
10013514:	4c08      	ldr	r4, [pc, #32]	; (10013538 <scalbn+0xb0>)
10013516:	3336      	adds	r3, #54	; 0x36
10013518:	4022      	ands	r2, r4
1001351a:	051b      	lsls	r3, r3, #20
1001351c:	4313      	orrs	r3, r2
1001351e:	0019      	movs	r1, r3
10013520:	2200      	movs	r2, #0
10013522:	4b0c      	ldr	r3, [pc, #48]	; (10013554 <scalbn+0xcc>)
10013524:	f002 f86e 	bl	10015604 <__aeabi_dmul>
10013528:	e7cf      	b.n	100134ca <scalbn+0x42>
1001352a:	46c0      	nop			; (mov r8, r8)
1001352c:	43500000 	.word	0x43500000
10013530:	ffff3cb0 	.word	0xffff3cb0
10013534:	000007fe 	.word	0x000007fe
10013538:	800fffff 	.word	0x800fffff
1001353c:	000007ff 	.word	0x000007ff
10013540:	0000c350 	.word	0x0000c350
10013544:	c2f8f359 	.word	0xc2f8f359
10013548:	01a56e1f 	.word	0x01a56e1f
1001354c:	8800759c 	.word	0x8800759c
10013550:	7e37e43c 	.word	0x7e37e43c
10013554:	3c900000 	.word	0x3c900000

10013558 <copysign>:
10013558:	b530      	push	{r4, r5, lr}
1001355a:	004a      	lsls	r2, r1, #1
1001355c:	0fdb      	lsrs	r3, r3, #31
1001355e:	07db      	lsls	r3, r3, #31
10013560:	0852      	lsrs	r2, r2, #1
10013562:	431a      	orrs	r2, r3
10013564:	0011      	movs	r1, r2
10013566:	bd30      	pop	{r4, r5, pc}

10013568 <__gnu_thumb1_case_sqi>:
10013568:	b402      	push	{r1}
1001356a:	4671      	mov	r1, lr
1001356c:	0849      	lsrs	r1, r1, #1
1001356e:	0049      	lsls	r1, r1, #1
10013570:	5609      	ldrsb	r1, [r1, r0]
10013572:	0049      	lsls	r1, r1, #1
10013574:	448e      	add	lr, r1
10013576:	bc02      	pop	{r1}
10013578:	4770      	bx	lr
1001357a:	46c0      	nop			; (mov r8, r8)

1001357c <__gnu_thumb1_case_uqi>:
1001357c:	b402      	push	{r1}
1001357e:	4671      	mov	r1, lr
10013580:	0849      	lsrs	r1, r1, #1
10013582:	0049      	lsls	r1, r1, #1
10013584:	5c09      	ldrb	r1, [r1, r0]
10013586:	0049      	lsls	r1, r1, #1
10013588:	448e      	add	lr, r1
1001358a:	bc02      	pop	{r1}
1001358c:	4770      	bx	lr
1001358e:	46c0      	nop			; (mov r8, r8)

10013590 <__aeabi_uidiv>:
10013590:	2200      	movs	r2, #0
10013592:	0843      	lsrs	r3, r0, #1
10013594:	428b      	cmp	r3, r1
10013596:	d374      	bcc.n	10013682 <__aeabi_uidiv+0xf2>
10013598:	0903      	lsrs	r3, r0, #4
1001359a:	428b      	cmp	r3, r1
1001359c:	d35f      	bcc.n	1001365e <__aeabi_uidiv+0xce>
1001359e:	0a03      	lsrs	r3, r0, #8
100135a0:	428b      	cmp	r3, r1
100135a2:	d344      	bcc.n	1001362e <__aeabi_uidiv+0x9e>
100135a4:	0b03      	lsrs	r3, r0, #12
100135a6:	428b      	cmp	r3, r1
100135a8:	d328      	bcc.n	100135fc <__aeabi_uidiv+0x6c>
100135aa:	0c03      	lsrs	r3, r0, #16
100135ac:	428b      	cmp	r3, r1
100135ae:	d30d      	bcc.n	100135cc <__aeabi_uidiv+0x3c>
100135b0:	22ff      	movs	r2, #255	; 0xff
100135b2:	0209      	lsls	r1, r1, #8
100135b4:	ba12      	rev	r2, r2
100135b6:	0c03      	lsrs	r3, r0, #16
100135b8:	428b      	cmp	r3, r1
100135ba:	d302      	bcc.n	100135c2 <__aeabi_uidiv+0x32>
100135bc:	1212      	asrs	r2, r2, #8
100135be:	0209      	lsls	r1, r1, #8
100135c0:	d065      	beq.n	1001368e <__aeabi_uidiv+0xfe>
100135c2:	0b03      	lsrs	r3, r0, #12
100135c4:	428b      	cmp	r3, r1
100135c6:	d319      	bcc.n	100135fc <__aeabi_uidiv+0x6c>
100135c8:	e000      	b.n	100135cc <__aeabi_uidiv+0x3c>
100135ca:	0a09      	lsrs	r1, r1, #8
100135cc:	0bc3      	lsrs	r3, r0, #15
100135ce:	428b      	cmp	r3, r1
100135d0:	d301      	bcc.n	100135d6 <__aeabi_uidiv+0x46>
100135d2:	03cb      	lsls	r3, r1, #15
100135d4:	1ac0      	subs	r0, r0, r3
100135d6:	4152      	adcs	r2, r2
100135d8:	0b83      	lsrs	r3, r0, #14
100135da:	428b      	cmp	r3, r1
100135dc:	d301      	bcc.n	100135e2 <__aeabi_uidiv+0x52>
100135de:	038b      	lsls	r3, r1, #14
100135e0:	1ac0      	subs	r0, r0, r3
100135e2:	4152      	adcs	r2, r2
100135e4:	0b43      	lsrs	r3, r0, #13
100135e6:	428b      	cmp	r3, r1
100135e8:	d301      	bcc.n	100135ee <__aeabi_uidiv+0x5e>
100135ea:	034b      	lsls	r3, r1, #13
100135ec:	1ac0      	subs	r0, r0, r3
100135ee:	4152      	adcs	r2, r2
100135f0:	0b03      	lsrs	r3, r0, #12
100135f2:	428b      	cmp	r3, r1
100135f4:	d301      	bcc.n	100135fa <__aeabi_uidiv+0x6a>
100135f6:	030b      	lsls	r3, r1, #12
100135f8:	1ac0      	subs	r0, r0, r3
100135fa:	4152      	adcs	r2, r2
100135fc:	0ac3      	lsrs	r3, r0, #11
100135fe:	428b      	cmp	r3, r1
10013600:	d301      	bcc.n	10013606 <__aeabi_uidiv+0x76>
10013602:	02cb      	lsls	r3, r1, #11
10013604:	1ac0      	subs	r0, r0, r3
10013606:	4152      	adcs	r2, r2
10013608:	0a83      	lsrs	r3, r0, #10
1001360a:	428b      	cmp	r3, r1
1001360c:	d301      	bcc.n	10013612 <__aeabi_uidiv+0x82>
1001360e:	028b      	lsls	r3, r1, #10
10013610:	1ac0      	subs	r0, r0, r3
10013612:	4152      	adcs	r2, r2
10013614:	0a43      	lsrs	r3, r0, #9
10013616:	428b      	cmp	r3, r1
10013618:	d301      	bcc.n	1001361e <__aeabi_uidiv+0x8e>
1001361a:	024b      	lsls	r3, r1, #9
1001361c:	1ac0      	subs	r0, r0, r3
1001361e:	4152      	adcs	r2, r2
10013620:	0a03      	lsrs	r3, r0, #8
10013622:	428b      	cmp	r3, r1
10013624:	d301      	bcc.n	1001362a <__aeabi_uidiv+0x9a>
10013626:	020b      	lsls	r3, r1, #8
10013628:	1ac0      	subs	r0, r0, r3
1001362a:	4152      	adcs	r2, r2
1001362c:	d2cd      	bcs.n	100135ca <__aeabi_uidiv+0x3a>
1001362e:	09c3      	lsrs	r3, r0, #7
10013630:	428b      	cmp	r3, r1
10013632:	d301      	bcc.n	10013638 <__aeabi_uidiv+0xa8>
10013634:	01cb      	lsls	r3, r1, #7
10013636:	1ac0      	subs	r0, r0, r3
10013638:	4152      	adcs	r2, r2
1001363a:	0983      	lsrs	r3, r0, #6
1001363c:	428b      	cmp	r3, r1
1001363e:	d301      	bcc.n	10013644 <__aeabi_uidiv+0xb4>
10013640:	018b      	lsls	r3, r1, #6
10013642:	1ac0      	subs	r0, r0, r3
10013644:	4152      	adcs	r2, r2
10013646:	0943      	lsrs	r3, r0, #5
10013648:	428b      	cmp	r3, r1
1001364a:	d301      	bcc.n	10013650 <__aeabi_uidiv+0xc0>
1001364c:	014b      	lsls	r3, r1, #5
1001364e:	1ac0      	subs	r0, r0, r3
10013650:	4152      	adcs	r2, r2
10013652:	0903      	lsrs	r3, r0, #4
10013654:	428b      	cmp	r3, r1
10013656:	d301      	bcc.n	1001365c <__aeabi_uidiv+0xcc>
10013658:	010b      	lsls	r3, r1, #4
1001365a:	1ac0      	subs	r0, r0, r3
1001365c:	4152      	adcs	r2, r2
1001365e:	08c3      	lsrs	r3, r0, #3
10013660:	428b      	cmp	r3, r1
10013662:	d301      	bcc.n	10013668 <__aeabi_uidiv+0xd8>
10013664:	00cb      	lsls	r3, r1, #3
10013666:	1ac0      	subs	r0, r0, r3
10013668:	4152      	adcs	r2, r2
1001366a:	0883      	lsrs	r3, r0, #2
1001366c:	428b      	cmp	r3, r1
1001366e:	d301      	bcc.n	10013674 <__aeabi_uidiv+0xe4>
10013670:	008b      	lsls	r3, r1, #2
10013672:	1ac0      	subs	r0, r0, r3
10013674:	4152      	adcs	r2, r2
10013676:	0843      	lsrs	r3, r0, #1
10013678:	428b      	cmp	r3, r1
1001367a:	d301      	bcc.n	10013680 <__aeabi_uidiv+0xf0>
1001367c:	004b      	lsls	r3, r1, #1
1001367e:	1ac0      	subs	r0, r0, r3
10013680:	4152      	adcs	r2, r2
10013682:	1a41      	subs	r1, r0, r1
10013684:	d200      	bcs.n	10013688 <__aeabi_uidiv+0xf8>
10013686:	4601      	mov	r1, r0
10013688:	4152      	adcs	r2, r2
1001368a:	4610      	mov	r0, r2
1001368c:	4770      	bx	lr
1001368e:	e7ff      	b.n	10013690 <__aeabi_uidiv+0x100>
10013690:	b501      	push	{r0, lr}
10013692:	2000      	movs	r0, #0
10013694:	f000 f8f0 	bl	10013878 <__aeabi_idiv0>
10013698:	bd02      	pop	{r1, pc}
1001369a:	46c0      	nop			; (mov r8, r8)

1001369c <__aeabi_uidivmod>:
1001369c:	2900      	cmp	r1, #0
1001369e:	d0f7      	beq.n	10013690 <__aeabi_uidiv+0x100>
100136a0:	e776      	b.n	10013590 <__aeabi_uidiv>
100136a2:	4770      	bx	lr

100136a4 <__aeabi_idiv>:
100136a4:	4603      	mov	r3, r0
100136a6:	430b      	orrs	r3, r1
100136a8:	d47f      	bmi.n	100137aa <__aeabi_idiv+0x106>
100136aa:	2200      	movs	r2, #0
100136ac:	0843      	lsrs	r3, r0, #1
100136ae:	428b      	cmp	r3, r1
100136b0:	d374      	bcc.n	1001379c <__aeabi_idiv+0xf8>
100136b2:	0903      	lsrs	r3, r0, #4
100136b4:	428b      	cmp	r3, r1
100136b6:	d35f      	bcc.n	10013778 <__aeabi_idiv+0xd4>
100136b8:	0a03      	lsrs	r3, r0, #8
100136ba:	428b      	cmp	r3, r1
100136bc:	d344      	bcc.n	10013748 <__aeabi_idiv+0xa4>
100136be:	0b03      	lsrs	r3, r0, #12
100136c0:	428b      	cmp	r3, r1
100136c2:	d328      	bcc.n	10013716 <__aeabi_idiv+0x72>
100136c4:	0c03      	lsrs	r3, r0, #16
100136c6:	428b      	cmp	r3, r1
100136c8:	d30d      	bcc.n	100136e6 <__aeabi_idiv+0x42>
100136ca:	22ff      	movs	r2, #255	; 0xff
100136cc:	0209      	lsls	r1, r1, #8
100136ce:	ba12      	rev	r2, r2
100136d0:	0c03      	lsrs	r3, r0, #16
100136d2:	428b      	cmp	r3, r1
100136d4:	d302      	bcc.n	100136dc <__aeabi_idiv+0x38>
100136d6:	1212      	asrs	r2, r2, #8
100136d8:	0209      	lsls	r1, r1, #8
100136da:	d065      	beq.n	100137a8 <__aeabi_idiv+0x104>
100136dc:	0b03      	lsrs	r3, r0, #12
100136de:	428b      	cmp	r3, r1
100136e0:	d319      	bcc.n	10013716 <__aeabi_idiv+0x72>
100136e2:	e000      	b.n	100136e6 <__aeabi_idiv+0x42>
100136e4:	0a09      	lsrs	r1, r1, #8
100136e6:	0bc3      	lsrs	r3, r0, #15
100136e8:	428b      	cmp	r3, r1
100136ea:	d301      	bcc.n	100136f0 <__aeabi_idiv+0x4c>
100136ec:	03cb      	lsls	r3, r1, #15
100136ee:	1ac0      	subs	r0, r0, r3
100136f0:	4152      	adcs	r2, r2
100136f2:	0b83      	lsrs	r3, r0, #14
100136f4:	428b      	cmp	r3, r1
100136f6:	d301      	bcc.n	100136fc <__aeabi_idiv+0x58>
100136f8:	038b      	lsls	r3, r1, #14
100136fa:	1ac0      	subs	r0, r0, r3
100136fc:	4152      	adcs	r2, r2
100136fe:	0b43      	lsrs	r3, r0, #13
10013700:	428b      	cmp	r3, r1
10013702:	d301      	bcc.n	10013708 <__aeabi_idiv+0x64>
10013704:	034b      	lsls	r3, r1, #13
10013706:	1ac0      	subs	r0, r0, r3
10013708:	4152      	adcs	r2, r2
1001370a:	0b03      	lsrs	r3, r0, #12
1001370c:	428b      	cmp	r3, r1
1001370e:	d301      	bcc.n	10013714 <__aeabi_idiv+0x70>
10013710:	030b      	lsls	r3, r1, #12
10013712:	1ac0      	subs	r0, r0, r3
10013714:	4152      	adcs	r2, r2
10013716:	0ac3      	lsrs	r3, r0, #11
10013718:	428b      	cmp	r3, r1
1001371a:	d301      	bcc.n	10013720 <__aeabi_idiv+0x7c>
1001371c:	02cb      	lsls	r3, r1, #11
1001371e:	1ac0      	subs	r0, r0, r3
10013720:	4152      	adcs	r2, r2
10013722:	0a83      	lsrs	r3, r0, #10
10013724:	428b      	cmp	r3, r1
10013726:	d301      	bcc.n	1001372c <__aeabi_idiv+0x88>
10013728:	028b      	lsls	r3, r1, #10
1001372a:	1ac0      	subs	r0, r0, r3
1001372c:	4152      	adcs	r2, r2
1001372e:	0a43      	lsrs	r3, r0, #9
10013730:	428b      	cmp	r3, r1
10013732:	d301      	bcc.n	10013738 <__aeabi_idiv+0x94>
10013734:	024b      	lsls	r3, r1, #9
10013736:	1ac0      	subs	r0, r0, r3
10013738:	4152      	adcs	r2, r2
1001373a:	0a03      	lsrs	r3, r0, #8
1001373c:	428b      	cmp	r3, r1
1001373e:	d301      	bcc.n	10013744 <__aeabi_idiv+0xa0>
10013740:	020b      	lsls	r3, r1, #8
10013742:	1ac0      	subs	r0, r0, r3
10013744:	4152      	adcs	r2, r2
10013746:	d2cd      	bcs.n	100136e4 <__aeabi_idiv+0x40>
10013748:	09c3      	lsrs	r3, r0, #7
1001374a:	428b      	cmp	r3, r1
1001374c:	d301      	bcc.n	10013752 <__aeabi_idiv+0xae>
1001374e:	01cb      	lsls	r3, r1, #7
10013750:	1ac0      	subs	r0, r0, r3
10013752:	4152      	adcs	r2, r2
10013754:	0983      	lsrs	r3, r0, #6
10013756:	428b      	cmp	r3, r1
10013758:	d301      	bcc.n	1001375e <__aeabi_idiv+0xba>
1001375a:	018b      	lsls	r3, r1, #6
1001375c:	1ac0      	subs	r0, r0, r3
1001375e:	4152      	adcs	r2, r2
10013760:	0943      	lsrs	r3, r0, #5
10013762:	428b      	cmp	r3, r1
10013764:	d301      	bcc.n	1001376a <__aeabi_idiv+0xc6>
10013766:	014b      	lsls	r3, r1, #5
10013768:	1ac0      	subs	r0, r0, r3
1001376a:	4152      	adcs	r2, r2
1001376c:	0903      	lsrs	r3, r0, #4
1001376e:	428b      	cmp	r3, r1
10013770:	d301      	bcc.n	10013776 <__aeabi_idiv+0xd2>
10013772:	010b      	lsls	r3, r1, #4
10013774:	1ac0      	subs	r0, r0, r3
10013776:	4152      	adcs	r2, r2
10013778:	08c3      	lsrs	r3, r0, #3
1001377a:	428b      	cmp	r3, r1
1001377c:	d301      	bcc.n	10013782 <__aeabi_idiv+0xde>
1001377e:	00cb      	lsls	r3, r1, #3
10013780:	1ac0      	subs	r0, r0, r3
10013782:	4152      	adcs	r2, r2
10013784:	0883      	lsrs	r3, r0, #2
10013786:	428b      	cmp	r3, r1
10013788:	d301      	bcc.n	1001378e <__aeabi_idiv+0xea>
1001378a:	008b      	lsls	r3, r1, #2
1001378c:	1ac0      	subs	r0, r0, r3
1001378e:	4152      	adcs	r2, r2
10013790:	0843      	lsrs	r3, r0, #1
10013792:	428b      	cmp	r3, r1
10013794:	d301      	bcc.n	1001379a <__aeabi_idiv+0xf6>
10013796:	004b      	lsls	r3, r1, #1
10013798:	1ac0      	subs	r0, r0, r3
1001379a:	4152      	adcs	r2, r2
1001379c:	1a41      	subs	r1, r0, r1
1001379e:	d200      	bcs.n	100137a2 <__aeabi_idiv+0xfe>
100137a0:	4601      	mov	r1, r0
100137a2:	4152      	adcs	r2, r2
100137a4:	4610      	mov	r0, r2
100137a6:	4770      	bx	lr
100137a8:	e05d      	b.n	10013866 <__aeabi_idiv+0x1c2>
100137aa:	0fca      	lsrs	r2, r1, #31
100137ac:	d000      	beq.n	100137b0 <__aeabi_idiv+0x10c>
100137ae:	4249      	negs	r1, r1
100137b0:	1003      	asrs	r3, r0, #32
100137b2:	d300      	bcc.n	100137b6 <__aeabi_idiv+0x112>
100137b4:	4240      	negs	r0, r0
100137b6:	4053      	eors	r3, r2
100137b8:	2200      	movs	r2, #0
100137ba:	469c      	mov	ip, r3
100137bc:	0903      	lsrs	r3, r0, #4
100137be:	428b      	cmp	r3, r1
100137c0:	d32d      	bcc.n	1001381e <__aeabi_idiv+0x17a>
100137c2:	0a03      	lsrs	r3, r0, #8
100137c4:	428b      	cmp	r3, r1
100137c6:	d312      	bcc.n	100137ee <__aeabi_idiv+0x14a>
100137c8:	22fc      	movs	r2, #252	; 0xfc
100137ca:	0189      	lsls	r1, r1, #6
100137cc:	ba12      	rev	r2, r2
100137ce:	0a03      	lsrs	r3, r0, #8
100137d0:	428b      	cmp	r3, r1
100137d2:	d30c      	bcc.n	100137ee <__aeabi_idiv+0x14a>
100137d4:	0189      	lsls	r1, r1, #6
100137d6:	1192      	asrs	r2, r2, #6
100137d8:	428b      	cmp	r3, r1
100137da:	d308      	bcc.n	100137ee <__aeabi_idiv+0x14a>
100137dc:	0189      	lsls	r1, r1, #6
100137de:	1192      	asrs	r2, r2, #6
100137e0:	428b      	cmp	r3, r1
100137e2:	d304      	bcc.n	100137ee <__aeabi_idiv+0x14a>
100137e4:	0189      	lsls	r1, r1, #6
100137e6:	d03a      	beq.n	1001385e <__aeabi_idiv+0x1ba>
100137e8:	1192      	asrs	r2, r2, #6
100137ea:	e000      	b.n	100137ee <__aeabi_idiv+0x14a>
100137ec:	0989      	lsrs	r1, r1, #6
100137ee:	09c3      	lsrs	r3, r0, #7
100137f0:	428b      	cmp	r3, r1
100137f2:	d301      	bcc.n	100137f8 <__aeabi_idiv+0x154>
100137f4:	01cb      	lsls	r3, r1, #7
100137f6:	1ac0      	subs	r0, r0, r3
100137f8:	4152      	adcs	r2, r2
100137fa:	0983      	lsrs	r3, r0, #6
100137fc:	428b      	cmp	r3, r1
100137fe:	d301      	bcc.n	10013804 <__aeabi_idiv+0x160>
10013800:	018b      	lsls	r3, r1, #6
10013802:	1ac0      	subs	r0, r0, r3
10013804:	4152      	adcs	r2, r2
10013806:	0943      	lsrs	r3, r0, #5
10013808:	428b      	cmp	r3, r1
1001380a:	d301      	bcc.n	10013810 <__aeabi_idiv+0x16c>
1001380c:	014b      	lsls	r3, r1, #5
1001380e:	1ac0      	subs	r0, r0, r3
10013810:	4152      	adcs	r2, r2
10013812:	0903      	lsrs	r3, r0, #4
10013814:	428b      	cmp	r3, r1
10013816:	d301      	bcc.n	1001381c <__aeabi_idiv+0x178>
10013818:	010b      	lsls	r3, r1, #4
1001381a:	1ac0      	subs	r0, r0, r3
1001381c:	4152      	adcs	r2, r2
1001381e:	08c3      	lsrs	r3, r0, #3
10013820:	428b      	cmp	r3, r1
10013822:	d301      	bcc.n	10013828 <__aeabi_idiv+0x184>
10013824:	00cb      	lsls	r3, r1, #3
10013826:	1ac0      	subs	r0, r0, r3
10013828:	4152      	adcs	r2, r2
1001382a:	0883      	lsrs	r3, r0, #2
1001382c:	428b      	cmp	r3, r1
1001382e:	d301      	bcc.n	10013834 <__aeabi_idiv+0x190>
10013830:	008b      	lsls	r3, r1, #2
10013832:	1ac0      	subs	r0, r0, r3
10013834:	4152      	adcs	r2, r2
10013836:	d2d9      	bcs.n	100137ec <__aeabi_idiv+0x148>
10013838:	0843      	lsrs	r3, r0, #1
1001383a:	428b      	cmp	r3, r1
1001383c:	d301      	bcc.n	10013842 <__aeabi_idiv+0x19e>
1001383e:	004b      	lsls	r3, r1, #1
10013840:	1ac0      	subs	r0, r0, r3
10013842:	4152      	adcs	r2, r2
10013844:	1a41      	subs	r1, r0, r1
10013846:	d200      	bcs.n	1001384a <__aeabi_idiv+0x1a6>
10013848:	4601      	mov	r1, r0
1001384a:	4663      	mov	r3, ip
1001384c:	4152      	adcs	r2, r2
1001384e:	105b      	asrs	r3, r3, #1
10013850:	4610      	mov	r0, r2
10013852:	d301      	bcc.n	10013858 <__aeabi_idiv+0x1b4>
10013854:	4240      	negs	r0, r0
10013856:	2b00      	cmp	r3, #0
10013858:	d500      	bpl.n	1001385c <__aeabi_idiv+0x1b8>
1001385a:	4249      	negs	r1, r1
1001385c:	4770      	bx	lr
1001385e:	4663      	mov	r3, ip
10013860:	105b      	asrs	r3, r3, #1
10013862:	d300      	bcc.n	10013866 <__aeabi_idiv+0x1c2>
10013864:	4240      	negs	r0, r0
10013866:	b501      	push	{r0, lr}
10013868:	2000      	movs	r0, #0
1001386a:	f000 f805 	bl	10013878 <__aeabi_idiv0>
1001386e:	bd02      	pop	{r1, pc}

10013870 <__aeabi_idivmod>:
10013870:	2900      	cmp	r1, #0
10013872:	d0f8      	beq.n	10013866 <__aeabi_idiv+0x1c2>
10013874:	e716      	b.n	100136a4 <__aeabi_idiv>
10013876:	4770      	bx	lr

10013878 <__aeabi_idiv0>:
10013878:	4770      	bx	lr
1001387a:	46c0      	nop			; (mov r8, r8)

1001387c <__aeabi_cdrcmple>:
1001387c:	4684      	mov	ip, r0
1001387e:	1c10      	adds	r0, r2, #0
10013880:	4662      	mov	r2, ip
10013882:	468c      	mov	ip, r1
10013884:	1c19      	adds	r1, r3, #0
10013886:	4663      	mov	r3, ip
10013888:	e000      	b.n	1001388c <__aeabi_cdcmpeq>
1001388a:	46c0      	nop			; (mov r8, r8)

1001388c <__aeabi_cdcmpeq>:
1001388c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
1001388e:	f001 fe4f 	bl	10015530 <__ledf2>
10013892:	2800      	cmp	r0, #0
10013894:	d401      	bmi.n	1001389a <__aeabi_cdcmpeq+0xe>
10013896:	2100      	movs	r1, #0
10013898:	42c8      	cmn	r0, r1
1001389a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

1001389c <__aeabi_dcmpeq>:
1001389c:	b510      	push	{r4, lr}
1001389e:	f001 fda3 	bl	100153e8 <__eqdf2>
100138a2:	4240      	negs	r0, r0
100138a4:	3001      	adds	r0, #1
100138a6:	bd10      	pop	{r4, pc}

100138a8 <__aeabi_dcmplt>:
100138a8:	b510      	push	{r4, lr}
100138aa:	f001 fe41 	bl	10015530 <__ledf2>
100138ae:	2800      	cmp	r0, #0
100138b0:	db01      	blt.n	100138b6 <__aeabi_dcmplt+0xe>
100138b2:	2000      	movs	r0, #0
100138b4:	bd10      	pop	{r4, pc}
100138b6:	2001      	movs	r0, #1
100138b8:	bd10      	pop	{r4, pc}
100138ba:	46c0      	nop			; (mov r8, r8)

100138bc <__aeabi_dcmple>:
100138bc:	b510      	push	{r4, lr}
100138be:	f001 fe37 	bl	10015530 <__ledf2>
100138c2:	2800      	cmp	r0, #0
100138c4:	dd01      	ble.n	100138ca <__aeabi_dcmple+0xe>
100138c6:	2000      	movs	r0, #0
100138c8:	bd10      	pop	{r4, pc}
100138ca:	2001      	movs	r0, #1
100138cc:	bd10      	pop	{r4, pc}
100138ce:	46c0      	nop			; (mov r8, r8)

100138d0 <__aeabi_dcmpgt>:
100138d0:	b510      	push	{r4, lr}
100138d2:	f001 fdc9 	bl	10015468 <__gedf2>
100138d6:	2800      	cmp	r0, #0
100138d8:	dc01      	bgt.n	100138de <__aeabi_dcmpgt+0xe>
100138da:	2000      	movs	r0, #0
100138dc:	bd10      	pop	{r4, pc}
100138de:	2001      	movs	r0, #1
100138e0:	bd10      	pop	{r4, pc}
100138e2:	46c0      	nop			; (mov r8, r8)

100138e4 <__aeabi_dcmpge>:
100138e4:	b510      	push	{r4, lr}
100138e6:	f001 fdbf 	bl	10015468 <__gedf2>
100138ea:	2800      	cmp	r0, #0
100138ec:	da01      	bge.n	100138f2 <__aeabi_dcmpge+0xe>
100138ee:	2000      	movs	r0, #0
100138f0:	bd10      	pop	{r4, pc}
100138f2:	2001      	movs	r0, #1
100138f4:	bd10      	pop	{r4, pc}
100138f6:	46c0      	nop			; (mov r8, r8)

100138f8 <__aeabi_cfrcmple>:
100138f8:	4684      	mov	ip, r0
100138fa:	1c08      	adds	r0, r1, #0
100138fc:	4661      	mov	r1, ip
100138fe:	e7ff      	b.n	10013900 <__aeabi_cfcmpeq>

10013900 <__aeabi_cfcmpeq>:
10013900:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10013902:	f000 fb91 	bl	10014028 <__lesf2>
10013906:	2800      	cmp	r0, #0
10013908:	d401      	bmi.n	1001390e <__aeabi_cfcmpeq+0xe>
1001390a:	2100      	movs	r1, #0
1001390c:	42c8      	cmn	r0, r1
1001390e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10013910 <__aeabi_fcmpeq>:
10013910:	b510      	push	{r4, lr}
10013912:	f000 fb1d 	bl	10013f50 <__eqsf2>
10013916:	4240      	negs	r0, r0
10013918:	3001      	adds	r0, #1
1001391a:	bd10      	pop	{r4, pc}

1001391c <__aeabi_fcmplt>:
1001391c:	b510      	push	{r4, lr}
1001391e:	f000 fb83 	bl	10014028 <__lesf2>
10013922:	2800      	cmp	r0, #0
10013924:	db01      	blt.n	1001392a <__aeabi_fcmplt+0xe>
10013926:	2000      	movs	r0, #0
10013928:	bd10      	pop	{r4, pc}
1001392a:	2001      	movs	r0, #1
1001392c:	bd10      	pop	{r4, pc}
1001392e:	46c0      	nop			; (mov r8, r8)

10013930 <__aeabi_fcmple>:
10013930:	b510      	push	{r4, lr}
10013932:	f000 fb79 	bl	10014028 <__lesf2>
10013936:	2800      	cmp	r0, #0
10013938:	dd01      	ble.n	1001393e <__aeabi_fcmple+0xe>
1001393a:	2000      	movs	r0, #0
1001393c:	bd10      	pop	{r4, pc}
1001393e:	2001      	movs	r0, #1
10013940:	bd10      	pop	{r4, pc}
10013942:	46c0      	nop			; (mov r8, r8)

10013944 <__aeabi_fcmpgt>:
10013944:	b510      	push	{r4, lr}
10013946:	f000 fb2b 	bl	10013fa0 <__gesf2>
1001394a:	2800      	cmp	r0, #0
1001394c:	dc01      	bgt.n	10013952 <__aeabi_fcmpgt+0xe>
1001394e:	2000      	movs	r0, #0
10013950:	bd10      	pop	{r4, pc}
10013952:	2001      	movs	r0, #1
10013954:	bd10      	pop	{r4, pc}
10013956:	46c0      	nop			; (mov r8, r8)

10013958 <__aeabi_fcmpge>:
10013958:	b510      	push	{r4, lr}
1001395a:	f000 fb21 	bl	10013fa0 <__gesf2>
1001395e:	2800      	cmp	r0, #0
10013960:	da01      	bge.n	10013966 <__aeabi_fcmpge+0xe>
10013962:	2000      	movs	r0, #0
10013964:	bd10      	pop	{r4, pc}
10013966:	2001      	movs	r0, #1
10013968:	bd10      	pop	{r4, pc}
1001396a:	46c0      	nop			; (mov r8, r8)

1001396c <__aeabi_lmul>:
1001396c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001396e:	464f      	mov	r7, r9
10013970:	4646      	mov	r6, r8
10013972:	b4c0      	push	{r6, r7}
10013974:	0416      	lsls	r6, r2, #16
10013976:	0c36      	lsrs	r6, r6, #16
10013978:	4699      	mov	r9, r3
1001397a:	0033      	movs	r3, r6
1001397c:	0405      	lsls	r5, r0, #16
1001397e:	0c2c      	lsrs	r4, r5, #16
10013980:	0c07      	lsrs	r7, r0, #16
10013982:	0c15      	lsrs	r5, r2, #16
10013984:	4363      	muls	r3, r4
10013986:	437e      	muls	r6, r7
10013988:	436f      	muls	r7, r5
1001398a:	4365      	muls	r5, r4
1001398c:	0c1c      	lsrs	r4, r3, #16
1001398e:	19ad      	adds	r5, r5, r6
10013990:	1964      	adds	r4, r4, r5
10013992:	469c      	mov	ip, r3
10013994:	42a6      	cmp	r6, r4
10013996:	d903      	bls.n	100139a0 <__aeabi_lmul+0x34>
10013998:	2380      	movs	r3, #128	; 0x80
1001399a:	025b      	lsls	r3, r3, #9
1001399c:	4698      	mov	r8, r3
1001399e:	4447      	add	r7, r8
100139a0:	4663      	mov	r3, ip
100139a2:	0c25      	lsrs	r5, r4, #16
100139a4:	19ef      	adds	r7, r5, r7
100139a6:	041d      	lsls	r5, r3, #16
100139a8:	464b      	mov	r3, r9
100139aa:	434a      	muls	r2, r1
100139ac:	4343      	muls	r3, r0
100139ae:	0c2d      	lsrs	r5, r5, #16
100139b0:	0424      	lsls	r4, r4, #16
100139b2:	1964      	adds	r4, r4, r5
100139b4:	1899      	adds	r1, r3, r2
100139b6:	19c9      	adds	r1, r1, r7
100139b8:	0020      	movs	r0, r4
100139ba:	bc0c      	pop	{r2, r3}
100139bc:	4690      	mov	r8, r2
100139be:	4699      	mov	r9, r3
100139c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100139c2:	46c0      	nop			; (mov r8, r8)

100139c4 <__aeabi_f2uiz>:
100139c4:	219e      	movs	r1, #158	; 0x9e
100139c6:	b510      	push	{r4, lr}
100139c8:	05c9      	lsls	r1, r1, #23
100139ca:	1c04      	adds	r4, r0, #0
100139cc:	f7ff ffc4 	bl	10013958 <__aeabi_fcmpge>
100139d0:	2800      	cmp	r0, #0
100139d2:	d103      	bne.n	100139dc <__aeabi_f2uiz+0x18>
100139d4:	1c20      	adds	r0, r4, #0
100139d6:	f000 fe1d 	bl	10014614 <__aeabi_f2iz>
100139da:	bd10      	pop	{r4, pc}
100139dc:	219e      	movs	r1, #158	; 0x9e
100139de:	1c20      	adds	r0, r4, #0
100139e0:	05c9      	lsls	r1, r1, #23
100139e2:	f000 fc79 	bl	100142d8 <__aeabi_fsub>
100139e6:	f000 fe15 	bl	10014614 <__aeabi_f2iz>
100139ea:	2380      	movs	r3, #128	; 0x80
100139ec:	061b      	lsls	r3, r3, #24
100139ee:	469c      	mov	ip, r3
100139f0:	4460      	add	r0, ip
100139f2:	e7f2      	b.n	100139da <__aeabi_f2uiz+0x16>

100139f4 <__aeabi_d2uiz>:
100139f4:	b570      	push	{r4, r5, r6, lr}
100139f6:	2200      	movs	r2, #0
100139f8:	4b0c      	ldr	r3, [pc, #48]	; (10013a2c <__aeabi_d2uiz+0x38>)
100139fa:	0004      	movs	r4, r0
100139fc:	000d      	movs	r5, r1
100139fe:	f7ff ff71 	bl	100138e4 <__aeabi_dcmpge>
10013a02:	2800      	cmp	r0, #0
10013a04:	d104      	bne.n	10013a10 <__aeabi_d2uiz+0x1c>
10013a06:	0020      	movs	r0, r4
10013a08:	0029      	movs	r1, r5
10013a0a:	f002 fbe9 	bl	100161e0 <__aeabi_d2iz>
10013a0e:	bd70      	pop	{r4, r5, r6, pc}
10013a10:	4b06      	ldr	r3, [pc, #24]	; (10013a2c <__aeabi_d2uiz+0x38>)
10013a12:	2200      	movs	r2, #0
10013a14:	0020      	movs	r0, r4
10013a16:	0029      	movs	r1, r5
10013a18:	f002 f86e 	bl	10015af8 <__aeabi_dsub>
10013a1c:	f002 fbe0 	bl	100161e0 <__aeabi_d2iz>
10013a20:	2380      	movs	r3, #128	; 0x80
10013a22:	061b      	lsls	r3, r3, #24
10013a24:	469c      	mov	ip, r3
10013a26:	4460      	add	r0, ip
10013a28:	e7f1      	b.n	10013a0e <__aeabi_d2uiz+0x1a>
10013a2a:	46c0      	nop			; (mov r8, r8)
10013a2c:	41e00000 	.word	0x41e00000

10013a30 <__aeabi_fadd>:
10013a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10013a32:	024a      	lsls	r2, r1, #9
10013a34:	0243      	lsls	r3, r0, #9
10013a36:	0044      	lsls	r4, r0, #1
10013a38:	004e      	lsls	r6, r1, #1
10013a3a:	0fc5      	lsrs	r5, r0, #31
10013a3c:	0e24      	lsrs	r4, r4, #24
10013a3e:	0028      	movs	r0, r5
10013a40:	099b      	lsrs	r3, r3, #6
10013a42:	0e36      	lsrs	r6, r6, #24
10013a44:	0fc9      	lsrs	r1, r1, #31
10013a46:	0992      	lsrs	r2, r2, #6
10013a48:	428d      	cmp	r5, r1
10013a4a:	d059      	beq.n	10013b00 <__aeabi_fadd+0xd0>
10013a4c:	1ba0      	subs	r0, r4, r6
10013a4e:	2800      	cmp	r0, #0
10013a50:	dc00      	bgt.n	10013a54 <__aeabi_fadd+0x24>
10013a52:	e08d      	b.n	10013b70 <__aeabi_fadd+0x140>
10013a54:	2e00      	cmp	r6, #0
10013a56:	d11a      	bne.n	10013a8e <__aeabi_fadd+0x5e>
10013a58:	2a00      	cmp	r2, #0
10013a5a:	d000      	beq.n	10013a5e <__aeabi_fadd+0x2e>
10013a5c:	e079      	b.n	10013b52 <__aeabi_fadd+0x122>
10013a5e:	075a      	lsls	r2, r3, #29
10013a60:	d004      	beq.n	10013a6c <__aeabi_fadd+0x3c>
10013a62:	220f      	movs	r2, #15
10013a64:	401a      	ands	r2, r3
10013a66:	2a04      	cmp	r2, #4
10013a68:	d000      	beq.n	10013a6c <__aeabi_fadd+0x3c>
10013a6a:	3304      	adds	r3, #4
10013a6c:	015a      	lsls	r2, r3, #5
10013a6e:	d538      	bpl.n	10013ae2 <__aeabi_fadd+0xb2>
10013a70:	3401      	adds	r4, #1
10013a72:	2cff      	cmp	r4, #255	; 0xff
10013a74:	d100      	bne.n	10013a78 <__aeabi_fadd+0x48>
10013a76:	e089      	b.n	10013b8c <__aeabi_fadd+0x15c>
10013a78:	0028      	movs	r0, r5
10013a7a:	019b      	lsls	r3, r3, #6
10013a7c:	0a5b      	lsrs	r3, r3, #9
10013a7e:	b2e4      	uxtb	r4, r4
10013a80:	025b      	lsls	r3, r3, #9
10013a82:	05e4      	lsls	r4, r4, #23
10013a84:	0a5b      	lsrs	r3, r3, #9
10013a86:	4323      	orrs	r3, r4
10013a88:	07c0      	lsls	r0, r0, #31
10013a8a:	4318      	orrs	r0, r3
10013a8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10013a8e:	2cff      	cmp	r4, #255	; 0xff
10013a90:	d0e5      	beq.n	10013a5e <__aeabi_fadd+0x2e>
10013a92:	2180      	movs	r1, #128	; 0x80
10013a94:	04c9      	lsls	r1, r1, #19
10013a96:	430a      	orrs	r2, r1
10013a98:	281b      	cmp	r0, #27
10013a9a:	dd00      	ble.n	10013a9e <__aeabi_fadd+0x6e>
10013a9c:	e089      	b.n	10013bb2 <__aeabi_fadd+0x182>
10013a9e:	0016      	movs	r6, r2
10013aa0:	2120      	movs	r1, #32
10013aa2:	40c6      	lsrs	r6, r0
10013aa4:	1a08      	subs	r0, r1, r0
10013aa6:	4082      	lsls	r2, r0
10013aa8:	1e51      	subs	r1, r2, #1
10013aaa:	418a      	sbcs	r2, r1
10013aac:	4332      	orrs	r2, r6
10013aae:	1a9b      	subs	r3, r3, r2
10013ab0:	015a      	lsls	r2, r3, #5
10013ab2:	d514      	bpl.n	10013ade <__aeabi_fadd+0xae>
10013ab4:	019b      	lsls	r3, r3, #6
10013ab6:	099e      	lsrs	r6, r3, #6
10013ab8:	0030      	movs	r0, r6
10013aba:	f002 fd21 	bl	10016500 <__clzsi2>
10013abe:	3805      	subs	r0, #5
10013ac0:	4086      	lsls	r6, r0
10013ac2:	4284      	cmp	r4, r0
10013ac4:	dc65      	bgt.n	10013b92 <__aeabi_fadd+0x162>
10013ac6:	1b04      	subs	r4, r0, r4
10013ac8:	0033      	movs	r3, r6
10013aca:	2020      	movs	r0, #32
10013acc:	3401      	adds	r4, #1
10013ace:	40e3      	lsrs	r3, r4
10013ad0:	1b04      	subs	r4, r0, r4
10013ad2:	40a6      	lsls	r6, r4
10013ad4:	1e72      	subs	r2, r6, #1
10013ad6:	4196      	sbcs	r6, r2
10013ad8:	2400      	movs	r4, #0
10013ada:	4333      	orrs	r3, r6
10013adc:	e7bf      	b.n	10013a5e <__aeabi_fadd+0x2e>
10013ade:	075a      	lsls	r2, r3, #29
10013ae0:	d1bf      	bne.n	10013a62 <__aeabi_fadd+0x32>
10013ae2:	08df      	lsrs	r7, r3, #3
10013ae4:	0028      	movs	r0, r5
10013ae6:	2cff      	cmp	r4, #255	; 0xff
10013ae8:	d12f      	bne.n	10013b4a <__aeabi_fadd+0x11a>
10013aea:	2f00      	cmp	r7, #0
10013aec:	d100      	bne.n	10013af0 <__aeabi_fadd+0xc0>
10013aee:	e087      	b.n	10013c00 <__aeabi_fadd+0x1d0>
10013af0:	2280      	movs	r2, #128	; 0x80
10013af2:	03d2      	lsls	r2, r2, #15
10013af4:	0013      	movs	r3, r2
10013af6:	433b      	orrs	r3, r7
10013af8:	025b      	lsls	r3, r3, #9
10013afa:	0a5b      	lsrs	r3, r3, #9
10013afc:	24ff      	movs	r4, #255	; 0xff
10013afe:	e7bf      	b.n	10013a80 <__aeabi_fadd+0x50>
10013b00:	1ba1      	subs	r1, r4, r6
10013b02:	2900      	cmp	r1, #0
10013b04:	dd49      	ble.n	10013b9a <__aeabi_fadd+0x16a>
10013b06:	2e00      	cmp	r6, #0
10013b08:	d029      	beq.n	10013b5e <__aeabi_fadd+0x12e>
10013b0a:	2cff      	cmp	r4, #255	; 0xff
10013b0c:	d0a7      	beq.n	10013a5e <__aeabi_fadd+0x2e>
10013b0e:	2680      	movs	r6, #128	; 0x80
10013b10:	04f6      	lsls	r6, r6, #19
10013b12:	4332      	orrs	r2, r6
10013b14:	291b      	cmp	r1, #27
10013b16:	dd00      	ble.n	10013b1a <__aeabi_fadd+0xea>
10013b18:	e08d      	b.n	10013c36 <__aeabi_fadd+0x206>
10013b1a:	0017      	movs	r7, r2
10013b1c:	2620      	movs	r6, #32
10013b1e:	40cf      	lsrs	r7, r1
10013b20:	1a71      	subs	r1, r6, r1
10013b22:	408a      	lsls	r2, r1
10013b24:	1e51      	subs	r1, r2, #1
10013b26:	418a      	sbcs	r2, r1
10013b28:	433a      	orrs	r2, r7
10013b2a:	189b      	adds	r3, r3, r2
10013b2c:	015a      	lsls	r2, r3, #5
10013b2e:	d5d6      	bpl.n	10013ade <__aeabi_fadd+0xae>
10013b30:	3401      	adds	r4, #1
10013b32:	2cff      	cmp	r4, #255	; 0xff
10013b34:	d064      	beq.n	10013c00 <__aeabi_fadd+0x1d0>
10013b36:	2201      	movs	r2, #1
10013b38:	4976      	ldr	r1, [pc, #472]	; (10013d14 <__aeabi_fadd+0x2e4>)
10013b3a:	401a      	ands	r2, r3
10013b3c:	085b      	lsrs	r3, r3, #1
10013b3e:	400b      	ands	r3, r1
10013b40:	4313      	orrs	r3, r2
10013b42:	e78c      	b.n	10013a5e <__aeabi_fadd+0x2e>
10013b44:	1e03      	subs	r3, r0, #0
10013b46:	d1ca      	bne.n	10013ade <__aeabi_fadd+0xae>
10013b48:	2000      	movs	r0, #0
10013b4a:	027b      	lsls	r3, r7, #9
10013b4c:	0a5b      	lsrs	r3, r3, #9
10013b4e:	b2e4      	uxtb	r4, r4
10013b50:	e796      	b.n	10013a80 <__aeabi_fadd+0x50>
10013b52:	3801      	subs	r0, #1
10013b54:	2800      	cmp	r0, #0
10013b56:	d0aa      	beq.n	10013aae <__aeabi_fadd+0x7e>
10013b58:	2cff      	cmp	r4, #255	; 0xff
10013b5a:	d19d      	bne.n	10013a98 <__aeabi_fadd+0x68>
10013b5c:	e77f      	b.n	10013a5e <__aeabi_fadd+0x2e>
10013b5e:	2a00      	cmp	r2, #0
10013b60:	d100      	bne.n	10013b64 <__aeabi_fadd+0x134>
10013b62:	e77c      	b.n	10013a5e <__aeabi_fadd+0x2e>
10013b64:	3901      	subs	r1, #1
10013b66:	2900      	cmp	r1, #0
10013b68:	d0df      	beq.n	10013b2a <__aeabi_fadd+0xfa>
10013b6a:	2cff      	cmp	r4, #255	; 0xff
10013b6c:	d1d2      	bne.n	10013b14 <__aeabi_fadd+0xe4>
10013b6e:	e776      	b.n	10013a5e <__aeabi_fadd+0x2e>
10013b70:	2800      	cmp	r0, #0
10013b72:	d120      	bne.n	10013bb6 <__aeabi_fadd+0x186>
10013b74:	1c60      	adds	r0, r4, #1
10013b76:	b2c0      	uxtb	r0, r0
10013b78:	2801      	cmp	r0, #1
10013b7a:	dd53      	ble.n	10013c24 <__aeabi_fadd+0x1f4>
10013b7c:	2780      	movs	r7, #128	; 0x80
10013b7e:	1a9e      	subs	r6, r3, r2
10013b80:	04ff      	lsls	r7, r7, #19
10013b82:	4037      	ands	r7, r6
10013b84:	d02f      	beq.n	10013be6 <__aeabi_fadd+0x1b6>
10013b86:	1ad6      	subs	r6, r2, r3
10013b88:	000d      	movs	r5, r1
10013b8a:	e795      	b.n	10013ab8 <__aeabi_fadd+0x88>
10013b8c:	0028      	movs	r0, r5
10013b8e:	2300      	movs	r3, #0
10013b90:	e776      	b.n	10013a80 <__aeabi_fadd+0x50>
10013b92:	4b61      	ldr	r3, [pc, #388]	; (10013d18 <__aeabi_fadd+0x2e8>)
10013b94:	1a24      	subs	r4, r4, r0
10013b96:	4033      	ands	r3, r6
10013b98:	e761      	b.n	10013a5e <__aeabi_fadd+0x2e>
10013b9a:	2900      	cmp	r1, #0
10013b9c:	d14d      	bne.n	10013c3a <__aeabi_fadd+0x20a>
10013b9e:	1c61      	adds	r1, r4, #1
10013ba0:	b2ce      	uxtb	r6, r1
10013ba2:	2e01      	cmp	r6, #1
10013ba4:	dd2f      	ble.n	10013c06 <__aeabi_fadd+0x1d6>
10013ba6:	29ff      	cmp	r1, #255	; 0xff
10013ba8:	d02a      	beq.n	10013c00 <__aeabi_fadd+0x1d0>
10013baa:	189b      	adds	r3, r3, r2
10013bac:	085b      	lsrs	r3, r3, #1
10013bae:	000c      	movs	r4, r1
10013bb0:	e755      	b.n	10013a5e <__aeabi_fadd+0x2e>
10013bb2:	2201      	movs	r2, #1
10013bb4:	e77b      	b.n	10013aae <__aeabi_fadd+0x7e>
10013bb6:	2c00      	cmp	r4, #0
10013bb8:	d11b      	bne.n	10013bf2 <__aeabi_fadd+0x1c2>
10013bba:	2b00      	cmp	r3, #0
10013bbc:	d05b      	beq.n	10013c76 <__aeabi_fadd+0x246>
10013bbe:	43c0      	mvns	r0, r0
10013bc0:	2800      	cmp	r0, #0
10013bc2:	d00c      	beq.n	10013bde <__aeabi_fadd+0x1ae>
10013bc4:	2eff      	cmp	r6, #255	; 0xff
10013bc6:	d07e      	beq.n	10013cc6 <__aeabi_fadd+0x296>
10013bc8:	281b      	cmp	r0, #27
10013bca:	dd00      	ble.n	10013bce <__aeabi_fadd+0x19e>
10013bcc:	e092      	b.n	10013cf4 <__aeabi_fadd+0x2c4>
10013bce:	001d      	movs	r5, r3
10013bd0:	2420      	movs	r4, #32
10013bd2:	40c5      	lsrs	r5, r0
10013bd4:	1a20      	subs	r0, r4, r0
10013bd6:	4083      	lsls	r3, r0
10013bd8:	1e58      	subs	r0, r3, #1
10013bda:	4183      	sbcs	r3, r0
10013bdc:	432b      	orrs	r3, r5
10013bde:	1ad3      	subs	r3, r2, r3
10013be0:	0034      	movs	r4, r6
10013be2:	000d      	movs	r5, r1
10013be4:	e764      	b.n	10013ab0 <__aeabi_fadd+0x80>
10013be6:	2e00      	cmp	r6, #0
10013be8:	d000      	beq.n	10013bec <__aeabi_fadd+0x1bc>
10013bea:	e765      	b.n	10013ab8 <__aeabi_fadd+0x88>
10013bec:	2000      	movs	r0, #0
10013bee:	2400      	movs	r4, #0
10013bf0:	e7ab      	b.n	10013b4a <__aeabi_fadd+0x11a>
10013bf2:	2eff      	cmp	r6, #255	; 0xff
10013bf4:	d067      	beq.n	10013cc6 <__aeabi_fadd+0x296>
10013bf6:	2480      	movs	r4, #128	; 0x80
10013bf8:	04e4      	lsls	r4, r4, #19
10013bfa:	4240      	negs	r0, r0
10013bfc:	4323      	orrs	r3, r4
10013bfe:	e7e3      	b.n	10013bc8 <__aeabi_fadd+0x198>
10013c00:	24ff      	movs	r4, #255	; 0xff
10013c02:	2300      	movs	r3, #0
10013c04:	e73c      	b.n	10013a80 <__aeabi_fadd+0x50>
10013c06:	2c00      	cmp	r4, #0
10013c08:	d161      	bne.n	10013cce <__aeabi_fadd+0x29e>
10013c0a:	2b00      	cmp	r3, #0
10013c0c:	d07e      	beq.n	10013d0c <__aeabi_fadd+0x2dc>
10013c0e:	2a00      	cmp	r2, #0
10013c10:	d100      	bne.n	10013c14 <__aeabi_fadd+0x1e4>
10013c12:	e724      	b.n	10013a5e <__aeabi_fadd+0x2e>
10013c14:	189b      	adds	r3, r3, r2
10013c16:	015a      	lsls	r2, r3, #5
10013c18:	d400      	bmi.n	10013c1c <__aeabi_fadd+0x1ec>
10013c1a:	e760      	b.n	10013ade <__aeabi_fadd+0xae>
10013c1c:	4a3e      	ldr	r2, [pc, #248]	; (10013d18 <__aeabi_fadd+0x2e8>)
10013c1e:	000c      	movs	r4, r1
10013c20:	4013      	ands	r3, r2
10013c22:	e71c      	b.n	10013a5e <__aeabi_fadd+0x2e>
10013c24:	2c00      	cmp	r4, #0
10013c26:	d11e      	bne.n	10013c66 <__aeabi_fadd+0x236>
10013c28:	2b00      	cmp	r3, #0
10013c2a:	d12f      	bne.n	10013c8c <__aeabi_fadd+0x25c>
10013c2c:	2a00      	cmp	r2, #0
10013c2e:	d066      	beq.n	10013cfe <__aeabi_fadd+0x2ce>
10013c30:	0013      	movs	r3, r2
10013c32:	000d      	movs	r5, r1
10013c34:	e713      	b.n	10013a5e <__aeabi_fadd+0x2e>
10013c36:	2201      	movs	r2, #1
10013c38:	e777      	b.n	10013b2a <__aeabi_fadd+0xfa>
10013c3a:	2c00      	cmp	r4, #0
10013c3c:	d11f      	bne.n	10013c7e <__aeabi_fadd+0x24e>
10013c3e:	2b00      	cmp	r3, #0
10013c40:	d05a      	beq.n	10013cf8 <__aeabi_fadd+0x2c8>
10013c42:	43c9      	mvns	r1, r1
10013c44:	2900      	cmp	r1, #0
10013c46:	d00b      	beq.n	10013c60 <__aeabi_fadd+0x230>
10013c48:	2eff      	cmp	r6, #255	; 0xff
10013c4a:	d050      	beq.n	10013cee <__aeabi_fadd+0x2be>
10013c4c:	291b      	cmp	r1, #27
10013c4e:	dc5f      	bgt.n	10013d10 <__aeabi_fadd+0x2e0>
10013c50:	001f      	movs	r7, r3
10013c52:	2420      	movs	r4, #32
10013c54:	40cf      	lsrs	r7, r1
10013c56:	1a61      	subs	r1, r4, r1
10013c58:	408b      	lsls	r3, r1
10013c5a:	1e59      	subs	r1, r3, #1
10013c5c:	418b      	sbcs	r3, r1
10013c5e:	433b      	orrs	r3, r7
10013c60:	189b      	adds	r3, r3, r2
10013c62:	0034      	movs	r4, r6
10013c64:	e762      	b.n	10013b2c <__aeabi_fadd+0xfc>
10013c66:	2b00      	cmp	r3, #0
10013c68:	d11c      	bne.n	10013ca4 <__aeabi_fadd+0x274>
10013c6a:	2a00      	cmp	r2, #0
10013c6c:	d04a      	beq.n	10013d04 <__aeabi_fadd+0x2d4>
10013c6e:	0013      	movs	r3, r2
10013c70:	000d      	movs	r5, r1
10013c72:	24ff      	movs	r4, #255	; 0xff
10013c74:	e6f3      	b.n	10013a5e <__aeabi_fadd+0x2e>
10013c76:	0013      	movs	r3, r2
10013c78:	0034      	movs	r4, r6
10013c7a:	000d      	movs	r5, r1
10013c7c:	e6ef      	b.n	10013a5e <__aeabi_fadd+0x2e>
10013c7e:	2eff      	cmp	r6, #255	; 0xff
10013c80:	d035      	beq.n	10013cee <__aeabi_fadd+0x2be>
10013c82:	2480      	movs	r4, #128	; 0x80
10013c84:	04e4      	lsls	r4, r4, #19
10013c86:	4249      	negs	r1, r1
10013c88:	4323      	orrs	r3, r4
10013c8a:	e7df      	b.n	10013c4c <__aeabi_fadd+0x21c>
10013c8c:	2a00      	cmp	r2, #0
10013c8e:	d100      	bne.n	10013c92 <__aeabi_fadd+0x262>
10013c90:	e6e5      	b.n	10013a5e <__aeabi_fadd+0x2e>
10013c92:	2780      	movs	r7, #128	; 0x80
10013c94:	1a98      	subs	r0, r3, r2
10013c96:	04ff      	lsls	r7, r7, #19
10013c98:	4007      	ands	r7, r0
10013c9a:	d100      	bne.n	10013c9e <__aeabi_fadd+0x26e>
10013c9c:	e752      	b.n	10013b44 <__aeabi_fadd+0x114>
10013c9e:	1ad3      	subs	r3, r2, r3
10013ca0:	000d      	movs	r5, r1
10013ca2:	e6dc      	b.n	10013a5e <__aeabi_fadd+0x2e>
10013ca4:	24ff      	movs	r4, #255	; 0xff
10013ca6:	2a00      	cmp	r2, #0
10013ca8:	d100      	bne.n	10013cac <__aeabi_fadd+0x27c>
10013caa:	e6d8      	b.n	10013a5e <__aeabi_fadd+0x2e>
10013cac:	2080      	movs	r0, #128	; 0x80
10013cae:	08db      	lsrs	r3, r3, #3
10013cb0:	03c0      	lsls	r0, r0, #15
10013cb2:	4203      	tst	r3, r0
10013cb4:	d004      	beq.n	10013cc0 <__aeabi_fadd+0x290>
10013cb6:	08d2      	lsrs	r2, r2, #3
10013cb8:	4202      	tst	r2, r0
10013cba:	d101      	bne.n	10013cc0 <__aeabi_fadd+0x290>
10013cbc:	0013      	movs	r3, r2
10013cbe:	000d      	movs	r5, r1
10013cc0:	00db      	lsls	r3, r3, #3
10013cc2:	24ff      	movs	r4, #255	; 0xff
10013cc4:	e6cb      	b.n	10013a5e <__aeabi_fadd+0x2e>
10013cc6:	0013      	movs	r3, r2
10013cc8:	24ff      	movs	r4, #255	; 0xff
10013cca:	000d      	movs	r5, r1
10013ccc:	e6c7      	b.n	10013a5e <__aeabi_fadd+0x2e>
10013cce:	2b00      	cmp	r3, #0
10013cd0:	d00d      	beq.n	10013cee <__aeabi_fadd+0x2be>
10013cd2:	24ff      	movs	r4, #255	; 0xff
10013cd4:	2a00      	cmp	r2, #0
10013cd6:	d100      	bne.n	10013cda <__aeabi_fadd+0x2aa>
10013cd8:	e6c1      	b.n	10013a5e <__aeabi_fadd+0x2e>
10013cda:	2180      	movs	r1, #128	; 0x80
10013cdc:	08db      	lsrs	r3, r3, #3
10013cde:	03c9      	lsls	r1, r1, #15
10013ce0:	420b      	tst	r3, r1
10013ce2:	d0ed      	beq.n	10013cc0 <__aeabi_fadd+0x290>
10013ce4:	08d2      	lsrs	r2, r2, #3
10013ce6:	420a      	tst	r2, r1
10013ce8:	d1ea      	bne.n	10013cc0 <__aeabi_fadd+0x290>
10013cea:	0013      	movs	r3, r2
10013cec:	e7e8      	b.n	10013cc0 <__aeabi_fadd+0x290>
10013cee:	0013      	movs	r3, r2
10013cf0:	24ff      	movs	r4, #255	; 0xff
10013cf2:	e6b4      	b.n	10013a5e <__aeabi_fadd+0x2e>
10013cf4:	2301      	movs	r3, #1
10013cf6:	e772      	b.n	10013bde <__aeabi_fadd+0x1ae>
10013cf8:	0013      	movs	r3, r2
10013cfa:	0034      	movs	r4, r6
10013cfc:	e6af      	b.n	10013a5e <__aeabi_fadd+0x2e>
10013cfe:	2700      	movs	r7, #0
10013d00:	2000      	movs	r0, #0
10013d02:	e722      	b.n	10013b4a <__aeabi_fadd+0x11a>
10013d04:	2780      	movs	r7, #128	; 0x80
10013d06:	2000      	movs	r0, #0
10013d08:	03ff      	lsls	r7, r7, #15
10013d0a:	e6f1      	b.n	10013af0 <__aeabi_fadd+0xc0>
10013d0c:	0013      	movs	r3, r2
10013d0e:	e6a6      	b.n	10013a5e <__aeabi_fadd+0x2e>
10013d10:	2301      	movs	r3, #1
10013d12:	e7a5      	b.n	10013c60 <__aeabi_fadd+0x230>
10013d14:	7dffffff 	.word	0x7dffffff
10013d18:	fbffffff 	.word	0xfbffffff

10013d1c <__aeabi_fdiv>:
10013d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
10013d1e:	4656      	mov	r6, sl
10013d20:	4644      	mov	r4, r8
10013d22:	465f      	mov	r7, fp
10013d24:	464d      	mov	r5, r9
10013d26:	b4f0      	push	{r4, r5, r6, r7}
10013d28:	0244      	lsls	r4, r0, #9
10013d2a:	0046      	lsls	r6, r0, #1
10013d2c:	0fc7      	lsrs	r7, r0, #31
10013d2e:	b083      	sub	sp, #12
10013d30:	4688      	mov	r8, r1
10013d32:	0a65      	lsrs	r5, r4, #9
10013d34:	0e36      	lsrs	r6, r6, #24
10013d36:	46ba      	mov	sl, r7
10013d38:	d03d      	beq.n	10013db6 <__aeabi_fdiv+0x9a>
10013d3a:	2eff      	cmp	r6, #255	; 0xff
10013d3c:	d022      	beq.n	10013d84 <__aeabi_fdiv+0x68>
10013d3e:	2300      	movs	r3, #0
10013d40:	00ec      	lsls	r4, r5, #3
10013d42:	2580      	movs	r5, #128	; 0x80
10013d44:	4699      	mov	r9, r3
10013d46:	469b      	mov	fp, r3
10013d48:	04ed      	lsls	r5, r5, #19
10013d4a:	4325      	orrs	r5, r4
10013d4c:	3e7f      	subs	r6, #127	; 0x7f
10013d4e:	4643      	mov	r3, r8
10013d50:	025c      	lsls	r4, r3, #9
10013d52:	0058      	lsls	r0, r3, #1
10013d54:	0fdb      	lsrs	r3, r3, #31
10013d56:	0a64      	lsrs	r4, r4, #9
10013d58:	0e00      	lsrs	r0, r0, #24
10013d5a:	4698      	mov	r8, r3
10013d5c:	d036      	beq.n	10013dcc <__aeabi_fdiv+0xb0>
10013d5e:	28ff      	cmp	r0, #255	; 0xff
10013d60:	d030      	beq.n	10013dc4 <__aeabi_fdiv+0xa8>
10013d62:	2380      	movs	r3, #128	; 0x80
10013d64:	2100      	movs	r1, #0
10013d66:	00e4      	lsls	r4, r4, #3
10013d68:	04db      	lsls	r3, r3, #19
10013d6a:	431c      	orrs	r4, r3
10013d6c:	387f      	subs	r0, #127	; 0x7f
10013d6e:	1a30      	subs	r0, r6, r0
10013d70:	9001      	str	r0, [sp, #4]
10013d72:	4648      	mov	r0, r9
10013d74:	4642      	mov	r2, r8
10013d76:	4308      	orrs	r0, r1
10013d78:	4e72      	ldr	r6, [pc, #456]	; (10013f44 <__aeabi_fdiv+0x228>)
10013d7a:	0080      	lsls	r0, r0, #2
10013d7c:	5830      	ldr	r0, [r6, r0]
10013d7e:	407a      	eors	r2, r7
10013d80:	0013      	movs	r3, r2
10013d82:	4687      	mov	pc, r0
10013d84:	2d00      	cmp	r5, #0
10013d86:	d144      	bne.n	10013e12 <__aeabi_fdiv+0xf6>
10013d88:	2308      	movs	r3, #8
10013d8a:	4699      	mov	r9, r3
10013d8c:	3b06      	subs	r3, #6
10013d8e:	469b      	mov	fp, r3
10013d90:	e7dd      	b.n	10013d4e <__aeabi_fdiv+0x32>
10013d92:	2201      	movs	r2, #1
10013d94:	20ff      	movs	r0, #255	; 0xff
10013d96:	2400      	movs	r4, #0
10013d98:	401a      	ands	r2, r3
10013d9a:	0264      	lsls	r4, r4, #9
10013d9c:	05c3      	lsls	r3, r0, #23
10013d9e:	0a64      	lsrs	r4, r4, #9
10013da0:	07d2      	lsls	r2, r2, #31
10013da2:	431c      	orrs	r4, r3
10013da4:	4314      	orrs	r4, r2
10013da6:	0020      	movs	r0, r4
10013da8:	b003      	add	sp, #12
10013daa:	bc3c      	pop	{r2, r3, r4, r5}
10013dac:	4690      	mov	r8, r2
10013dae:	4699      	mov	r9, r3
10013db0:	46a2      	mov	sl, r4
10013db2:	46ab      	mov	fp, r5
10013db4:	bdf0      	pop	{r4, r5, r6, r7, pc}
10013db6:	2d00      	cmp	r5, #0
10013db8:	d120      	bne.n	10013dfc <__aeabi_fdiv+0xe0>
10013dba:	2304      	movs	r3, #4
10013dbc:	4699      	mov	r9, r3
10013dbe:	3b03      	subs	r3, #3
10013dc0:	469b      	mov	fp, r3
10013dc2:	e7c4      	b.n	10013d4e <__aeabi_fdiv+0x32>
10013dc4:	2c00      	cmp	r4, #0
10013dc6:	d117      	bne.n	10013df8 <__aeabi_fdiv+0xdc>
10013dc8:	2102      	movs	r1, #2
10013dca:	e002      	b.n	10013dd2 <__aeabi_fdiv+0xb6>
10013dcc:	2c00      	cmp	r4, #0
10013dce:	d10a      	bne.n	10013de6 <__aeabi_fdiv+0xca>
10013dd0:	2101      	movs	r1, #1
10013dd2:	1a32      	subs	r2, r6, r0
10013dd4:	9201      	str	r2, [sp, #4]
10013dd6:	464a      	mov	r2, r9
10013dd8:	4643      	mov	r3, r8
10013dda:	430a      	orrs	r2, r1
10013ddc:	485a      	ldr	r0, [pc, #360]	; (10013f48 <__aeabi_fdiv+0x22c>)
10013dde:	0092      	lsls	r2, r2, #2
10013de0:	5882      	ldr	r2, [r0, r2]
10013de2:	407b      	eors	r3, r7
10013de4:	4697      	mov	pc, r2
10013de6:	0020      	movs	r0, r4
10013de8:	f002 fb8a 	bl	10016500 <__clzsi2>
10013dec:	1f43      	subs	r3, r0, #5
10013dee:	3076      	adds	r0, #118	; 0x76
10013df0:	409c      	lsls	r4, r3
10013df2:	4240      	negs	r0, r0
10013df4:	2100      	movs	r1, #0
10013df6:	e7ba      	b.n	10013d6e <__aeabi_fdiv+0x52>
10013df8:	2103      	movs	r1, #3
10013dfa:	e7b8      	b.n	10013d6e <__aeabi_fdiv+0x52>
10013dfc:	0028      	movs	r0, r5
10013dfe:	f002 fb7f 	bl	10016500 <__clzsi2>
10013e02:	1f43      	subs	r3, r0, #5
10013e04:	409d      	lsls	r5, r3
10013e06:	2300      	movs	r3, #0
10013e08:	3076      	adds	r0, #118	; 0x76
10013e0a:	4246      	negs	r6, r0
10013e0c:	4699      	mov	r9, r3
10013e0e:	469b      	mov	fp, r3
10013e10:	e79d      	b.n	10013d4e <__aeabi_fdiv+0x32>
10013e12:	230c      	movs	r3, #12
10013e14:	4699      	mov	r9, r3
10013e16:	3b09      	subs	r3, #9
10013e18:	469b      	mov	fp, r3
10013e1a:	e798      	b.n	10013d4e <__aeabi_fdiv+0x32>
10013e1c:	2480      	movs	r4, #128	; 0x80
10013e1e:	2200      	movs	r2, #0
10013e20:	03e4      	lsls	r4, r4, #15
10013e22:	20ff      	movs	r0, #255	; 0xff
10013e24:	e7b9      	b.n	10013d9a <__aeabi_fdiv+0x7e>
10013e26:	2400      	movs	r4, #0
10013e28:	46c2      	mov	sl, r8
10013e2a:	468b      	mov	fp, r1
10013e2c:	465a      	mov	r2, fp
10013e2e:	4653      	mov	r3, sl
10013e30:	2a02      	cmp	r2, #2
10013e32:	d0ae      	beq.n	10013d92 <__aeabi_fdiv+0x76>
10013e34:	2a03      	cmp	r2, #3
10013e36:	d07d      	beq.n	10013f34 <__aeabi_fdiv+0x218>
10013e38:	2a01      	cmp	r2, #1
10013e3a:	d131      	bne.n	10013ea0 <__aeabi_fdiv+0x184>
10013e3c:	2201      	movs	r2, #1
10013e3e:	2000      	movs	r0, #0
10013e40:	401a      	ands	r2, r3
10013e42:	2400      	movs	r4, #0
10013e44:	e7a9      	b.n	10013d9a <__aeabi_fdiv+0x7e>
10013e46:	2201      	movs	r2, #1
10013e48:	1a10      	subs	r0, r2, r0
10013e4a:	281b      	cmp	r0, #27
10013e4c:	dd56      	ble.n	10013efc <__aeabi_fdiv+0x1e0>
10013e4e:	401a      	ands	r2, r3
10013e50:	2000      	movs	r0, #0
10013e52:	2400      	movs	r4, #0
10013e54:	e7a1      	b.n	10013d9a <__aeabi_fdiv+0x7e>
10013e56:	2380      	movs	r3, #128	; 0x80
10013e58:	03db      	lsls	r3, r3, #15
10013e5a:	421d      	tst	r5, r3
10013e5c:	d14b      	bne.n	10013ef6 <__aeabi_fdiv+0x1da>
10013e5e:	2380      	movs	r3, #128	; 0x80
10013e60:	03db      	lsls	r3, r3, #15
10013e62:	432b      	orrs	r3, r5
10013e64:	025c      	lsls	r4, r3, #9
10013e66:	0a64      	lsrs	r4, r4, #9
10013e68:	003a      	movs	r2, r7
10013e6a:	20ff      	movs	r0, #255	; 0xff
10013e6c:	e795      	b.n	10013d9a <__aeabi_fdiv+0x7e>
10013e6e:	016d      	lsls	r5, r5, #5
10013e70:	0160      	lsls	r0, r4, #5
10013e72:	4285      	cmp	r5, r0
10013e74:	d230      	bcs.n	10013ed8 <__aeabi_fdiv+0x1bc>
10013e76:	9a01      	ldr	r2, [sp, #4]
10013e78:	2400      	movs	r4, #0
10013e7a:	3a01      	subs	r2, #1
10013e7c:	9201      	str	r2, [sp, #4]
10013e7e:	221b      	movs	r2, #27
10013e80:	2701      	movs	r7, #1
10013e82:	0029      	movs	r1, r5
10013e84:	0064      	lsls	r4, r4, #1
10013e86:	006d      	lsls	r5, r5, #1
10013e88:	2900      	cmp	r1, #0
10013e8a:	db01      	blt.n	10013e90 <__aeabi_fdiv+0x174>
10013e8c:	42a8      	cmp	r0, r5
10013e8e:	d801      	bhi.n	10013e94 <__aeabi_fdiv+0x178>
10013e90:	1a2d      	subs	r5, r5, r0
10013e92:	433c      	orrs	r4, r7
10013e94:	3a01      	subs	r2, #1
10013e96:	2a00      	cmp	r2, #0
10013e98:	d1f3      	bne.n	10013e82 <__aeabi_fdiv+0x166>
10013e9a:	1e6a      	subs	r2, r5, #1
10013e9c:	4195      	sbcs	r5, r2
10013e9e:	432c      	orrs	r4, r5
10013ea0:	9801      	ldr	r0, [sp, #4]
10013ea2:	307f      	adds	r0, #127	; 0x7f
10013ea4:	2800      	cmp	r0, #0
10013ea6:	ddce      	ble.n	10013e46 <__aeabi_fdiv+0x12a>
10013ea8:	0762      	lsls	r2, r4, #29
10013eaa:	d004      	beq.n	10013eb6 <__aeabi_fdiv+0x19a>
10013eac:	220f      	movs	r2, #15
10013eae:	4022      	ands	r2, r4
10013eb0:	2a04      	cmp	r2, #4
10013eb2:	d000      	beq.n	10013eb6 <__aeabi_fdiv+0x19a>
10013eb4:	3404      	adds	r4, #4
10013eb6:	0122      	lsls	r2, r4, #4
10013eb8:	d503      	bpl.n	10013ec2 <__aeabi_fdiv+0x1a6>
10013eba:	4a24      	ldr	r2, [pc, #144]	; (10013f4c <__aeabi_fdiv+0x230>)
10013ebc:	9801      	ldr	r0, [sp, #4]
10013ebe:	4014      	ands	r4, r2
10013ec0:	3080      	adds	r0, #128	; 0x80
10013ec2:	28fe      	cmp	r0, #254	; 0xfe
10013ec4:	dd00      	ble.n	10013ec8 <__aeabi_fdiv+0x1ac>
10013ec6:	e764      	b.n	10013d92 <__aeabi_fdiv+0x76>
10013ec8:	2201      	movs	r2, #1
10013eca:	01a4      	lsls	r4, r4, #6
10013ecc:	0a64      	lsrs	r4, r4, #9
10013ece:	b2c0      	uxtb	r0, r0
10013ed0:	401a      	ands	r2, r3
10013ed2:	e762      	b.n	10013d9a <__aeabi_fdiv+0x7e>
10013ed4:	002c      	movs	r4, r5
10013ed6:	e7a9      	b.n	10013e2c <__aeabi_fdiv+0x110>
10013ed8:	1a2d      	subs	r5, r5, r0
10013eda:	221a      	movs	r2, #26
10013edc:	2401      	movs	r4, #1
10013ede:	e7cf      	b.n	10013e80 <__aeabi_fdiv+0x164>
10013ee0:	026b      	lsls	r3, r5, #9
10013ee2:	d5bc      	bpl.n	10013e5e <__aeabi_fdiv+0x142>
10013ee4:	2400      	movs	r4, #0
10013ee6:	2380      	movs	r3, #128	; 0x80
10013ee8:	03db      	lsls	r3, r3, #15
10013eea:	431c      	orrs	r4, r3
10013eec:	0264      	lsls	r4, r4, #9
10013eee:	0a64      	lsrs	r4, r4, #9
10013ef0:	4642      	mov	r2, r8
10013ef2:	20ff      	movs	r0, #255	; 0xff
10013ef4:	e751      	b.n	10013d9a <__aeabi_fdiv+0x7e>
10013ef6:	421c      	tst	r4, r3
10013ef8:	d1b3      	bne.n	10013e62 <__aeabi_fdiv+0x146>
10013efa:	e7f4      	b.n	10013ee6 <__aeabi_fdiv+0x1ca>
10013efc:	0021      	movs	r1, r4
10013efe:	2220      	movs	r2, #32
10013f00:	40c1      	lsrs	r1, r0
10013f02:	1a10      	subs	r0, r2, r0
10013f04:	4084      	lsls	r4, r0
10013f06:	1e62      	subs	r2, r4, #1
10013f08:	4194      	sbcs	r4, r2
10013f0a:	430c      	orrs	r4, r1
10013f0c:	0762      	lsls	r2, r4, #29
10013f0e:	d004      	beq.n	10013f1a <__aeabi_fdiv+0x1fe>
10013f10:	220f      	movs	r2, #15
10013f12:	4022      	ands	r2, r4
10013f14:	2a04      	cmp	r2, #4
10013f16:	d000      	beq.n	10013f1a <__aeabi_fdiv+0x1fe>
10013f18:	3404      	adds	r4, #4
10013f1a:	0162      	lsls	r2, r4, #5
10013f1c:	d504      	bpl.n	10013f28 <__aeabi_fdiv+0x20c>
10013f1e:	2201      	movs	r2, #1
10013f20:	2001      	movs	r0, #1
10013f22:	401a      	ands	r2, r3
10013f24:	2400      	movs	r4, #0
10013f26:	e738      	b.n	10013d9a <__aeabi_fdiv+0x7e>
10013f28:	2201      	movs	r2, #1
10013f2a:	01a4      	lsls	r4, r4, #6
10013f2c:	0a64      	lsrs	r4, r4, #9
10013f2e:	401a      	ands	r2, r3
10013f30:	2000      	movs	r0, #0
10013f32:	e732      	b.n	10013d9a <__aeabi_fdiv+0x7e>
10013f34:	2380      	movs	r3, #128	; 0x80
10013f36:	03db      	lsls	r3, r3, #15
10013f38:	431c      	orrs	r4, r3
10013f3a:	0264      	lsls	r4, r4, #9
10013f3c:	0a64      	lsrs	r4, r4, #9
10013f3e:	4652      	mov	r2, sl
10013f40:	20ff      	movs	r0, #255	; 0xff
10013f42:	e72a      	b.n	10013d9a <__aeabi_fdiv+0x7e>
10013f44:	100186c8 	.word	0x100186c8
10013f48:	10018708 	.word	0x10018708
10013f4c:	f7ffffff 	.word	0xf7ffffff

10013f50 <__eqsf2>:
10013f50:	0243      	lsls	r3, r0, #9
10013f52:	b570      	push	{r4, r5, r6, lr}
10013f54:	0042      	lsls	r2, r0, #1
10013f56:	004c      	lsls	r4, r1, #1
10013f58:	0a5d      	lsrs	r5, r3, #9
10013f5a:	0fc3      	lsrs	r3, r0, #31
10013f5c:	0248      	lsls	r0, r1, #9
10013f5e:	0e12      	lsrs	r2, r2, #24
10013f60:	0a46      	lsrs	r6, r0, #9
10013f62:	0e24      	lsrs	r4, r4, #24
10013f64:	0fc9      	lsrs	r1, r1, #31
10013f66:	2aff      	cmp	r2, #255	; 0xff
10013f68:	d00f      	beq.n	10013f8a <__eqsf2+0x3a>
10013f6a:	2cff      	cmp	r4, #255	; 0xff
10013f6c:	d011      	beq.n	10013f92 <__eqsf2+0x42>
10013f6e:	2001      	movs	r0, #1
10013f70:	42a2      	cmp	r2, r4
10013f72:	d000      	beq.n	10013f76 <__eqsf2+0x26>
10013f74:	bd70      	pop	{r4, r5, r6, pc}
10013f76:	42b5      	cmp	r5, r6
10013f78:	d1fc      	bne.n	10013f74 <__eqsf2+0x24>
10013f7a:	428b      	cmp	r3, r1
10013f7c:	d00d      	beq.n	10013f9a <__eqsf2+0x4a>
10013f7e:	2a00      	cmp	r2, #0
10013f80:	d1f8      	bne.n	10013f74 <__eqsf2+0x24>
10013f82:	0028      	movs	r0, r5
10013f84:	1e43      	subs	r3, r0, #1
10013f86:	4198      	sbcs	r0, r3
10013f88:	e7f4      	b.n	10013f74 <__eqsf2+0x24>
10013f8a:	2001      	movs	r0, #1
10013f8c:	2d00      	cmp	r5, #0
10013f8e:	d1f1      	bne.n	10013f74 <__eqsf2+0x24>
10013f90:	e7eb      	b.n	10013f6a <__eqsf2+0x1a>
10013f92:	2001      	movs	r0, #1
10013f94:	2e00      	cmp	r6, #0
10013f96:	d1ed      	bne.n	10013f74 <__eqsf2+0x24>
10013f98:	e7e9      	b.n	10013f6e <__eqsf2+0x1e>
10013f9a:	2000      	movs	r0, #0
10013f9c:	e7ea      	b.n	10013f74 <__eqsf2+0x24>
10013f9e:	46c0      	nop			; (mov r8, r8)

10013fa0 <__gesf2>:
10013fa0:	0243      	lsls	r3, r0, #9
10013fa2:	b5f0      	push	{r4, r5, r6, r7, lr}
10013fa4:	0042      	lsls	r2, r0, #1
10013fa6:	0a5d      	lsrs	r5, r3, #9
10013fa8:	0fc3      	lsrs	r3, r0, #31
10013faa:	0248      	lsls	r0, r1, #9
10013fac:	0a44      	lsrs	r4, r0, #9
10013fae:	0048      	lsls	r0, r1, #1
10013fb0:	0e12      	lsrs	r2, r2, #24
10013fb2:	0e00      	lsrs	r0, r0, #24
10013fb4:	0fc9      	lsrs	r1, r1, #31
10013fb6:	2aff      	cmp	r2, #255	; 0xff
10013fb8:	d01f      	beq.n	10013ffa <__gesf2+0x5a>
10013fba:	28ff      	cmp	r0, #255	; 0xff
10013fbc:	d022      	beq.n	10014004 <__gesf2+0x64>
10013fbe:	2a00      	cmp	r2, #0
10013fc0:	d109      	bne.n	10013fd6 <__gesf2+0x36>
10013fc2:	426e      	negs	r6, r5
10013fc4:	416e      	adcs	r6, r5
10013fc6:	2800      	cmp	r0, #0
10013fc8:	d10f      	bne.n	10013fea <__gesf2+0x4a>
10013fca:	2c00      	cmp	r4, #0
10013fcc:	d10d      	bne.n	10013fea <__gesf2+0x4a>
10013fce:	2000      	movs	r0, #0
10013fd0:	2d00      	cmp	r5, #0
10013fd2:	d009      	beq.n	10013fe8 <__gesf2+0x48>
10013fd4:	e005      	b.n	10013fe2 <__gesf2+0x42>
10013fd6:	2800      	cmp	r0, #0
10013fd8:	d101      	bne.n	10013fde <__gesf2+0x3e>
10013fda:	2c00      	cmp	r4, #0
10013fdc:	d001      	beq.n	10013fe2 <__gesf2+0x42>
10013fde:	428b      	cmp	r3, r1
10013fe0:	d013      	beq.n	1001400a <__gesf2+0x6a>
10013fe2:	4258      	negs	r0, r3
10013fe4:	2301      	movs	r3, #1
10013fe6:	4318      	orrs	r0, r3
10013fe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
10013fea:	2e00      	cmp	r6, #0
10013fec:	d0f7      	beq.n	10013fde <__gesf2+0x3e>
10013fee:	4248      	negs	r0, r1
10013ff0:	4141      	adcs	r1, r0
10013ff2:	2001      	movs	r0, #1
10013ff4:	4249      	negs	r1, r1
10013ff6:	4308      	orrs	r0, r1
10013ff8:	e7f6      	b.n	10013fe8 <__gesf2+0x48>
10013ffa:	2d00      	cmp	r5, #0
10013ffc:	d0dd      	beq.n	10013fba <__gesf2+0x1a>
10013ffe:	2002      	movs	r0, #2
10014000:	4240      	negs	r0, r0
10014002:	e7f1      	b.n	10013fe8 <__gesf2+0x48>
10014004:	2c00      	cmp	r4, #0
10014006:	d0da      	beq.n	10013fbe <__gesf2+0x1e>
10014008:	e7f9      	b.n	10013ffe <__gesf2+0x5e>
1001400a:	4282      	cmp	r2, r0
1001400c:	dce9      	bgt.n	10013fe2 <__gesf2+0x42>
1001400e:	db04      	blt.n	1001401a <__gesf2+0x7a>
10014010:	42a5      	cmp	r5, r4
10014012:	d8e6      	bhi.n	10013fe2 <__gesf2+0x42>
10014014:	2000      	movs	r0, #0
10014016:	42a5      	cmp	r5, r4
10014018:	d2e6      	bcs.n	10013fe8 <__gesf2+0x48>
1001401a:	4258      	negs	r0, r3
1001401c:	4143      	adcs	r3, r0
1001401e:	2001      	movs	r0, #1
10014020:	425b      	negs	r3, r3
10014022:	4318      	orrs	r0, r3
10014024:	e7e0      	b.n	10013fe8 <__gesf2+0x48>
10014026:	46c0      	nop			; (mov r8, r8)

10014028 <__lesf2>:
10014028:	0243      	lsls	r3, r0, #9
1001402a:	b5f0      	push	{r4, r5, r6, r7, lr}
1001402c:	0042      	lsls	r2, r0, #1
1001402e:	004c      	lsls	r4, r1, #1
10014030:	0a5e      	lsrs	r6, r3, #9
10014032:	0fc3      	lsrs	r3, r0, #31
10014034:	0248      	lsls	r0, r1, #9
10014036:	0e12      	lsrs	r2, r2, #24
10014038:	0a45      	lsrs	r5, r0, #9
1001403a:	0e24      	lsrs	r4, r4, #24
1001403c:	0fc9      	lsrs	r1, r1, #31
1001403e:	2aff      	cmp	r2, #255	; 0xff
10014040:	d017      	beq.n	10014072 <__lesf2+0x4a>
10014042:	2cff      	cmp	r4, #255	; 0xff
10014044:	d019      	beq.n	1001407a <__lesf2+0x52>
10014046:	2a00      	cmp	r2, #0
10014048:	d10b      	bne.n	10014062 <__lesf2+0x3a>
1001404a:	4270      	negs	r0, r6
1001404c:	4170      	adcs	r0, r6
1001404e:	2c00      	cmp	r4, #0
10014050:	d017      	beq.n	10014082 <__lesf2+0x5a>
10014052:	2800      	cmp	r0, #0
10014054:	d007      	beq.n	10014066 <__lesf2+0x3e>
10014056:	4248      	negs	r0, r1
10014058:	4141      	adcs	r1, r0
1001405a:	2001      	movs	r0, #1
1001405c:	4249      	negs	r1, r1
1001405e:	4308      	orrs	r0, r1
10014060:	bdf0      	pop	{r4, r5, r6, r7, pc}
10014062:	2c00      	cmp	r4, #0
10014064:	d013      	beq.n	1001408e <__lesf2+0x66>
10014066:	428b      	cmp	r3, r1
10014068:	d014      	beq.n	10014094 <__lesf2+0x6c>
1001406a:	4258      	negs	r0, r3
1001406c:	2301      	movs	r3, #1
1001406e:	4318      	orrs	r0, r3
10014070:	e7f6      	b.n	10014060 <__lesf2+0x38>
10014072:	2002      	movs	r0, #2
10014074:	2e00      	cmp	r6, #0
10014076:	d1f3      	bne.n	10014060 <__lesf2+0x38>
10014078:	e7e3      	b.n	10014042 <__lesf2+0x1a>
1001407a:	2002      	movs	r0, #2
1001407c:	2d00      	cmp	r5, #0
1001407e:	d1ef      	bne.n	10014060 <__lesf2+0x38>
10014080:	e7e1      	b.n	10014046 <__lesf2+0x1e>
10014082:	2d00      	cmp	r5, #0
10014084:	d1e5      	bne.n	10014052 <__lesf2+0x2a>
10014086:	2000      	movs	r0, #0
10014088:	2e00      	cmp	r6, #0
1001408a:	d0e9      	beq.n	10014060 <__lesf2+0x38>
1001408c:	e7ed      	b.n	1001406a <__lesf2+0x42>
1001408e:	2d00      	cmp	r5, #0
10014090:	d1e9      	bne.n	10014066 <__lesf2+0x3e>
10014092:	e7ea      	b.n	1001406a <__lesf2+0x42>
10014094:	42a2      	cmp	r2, r4
10014096:	dce8      	bgt.n	1001406a <__lesf2+0x42>
10014098:	db04      	blt.n	100140a4 <__lesf2+0x7c>
1001409a:	42ae      	cmp	r6, r5
1001409c:	d8e5      	bhi.n	1001406a <__lesf2+0x42>
1001409e:	2000      	movs	r0, #0
100140a0:	42ae      	cmp	r6, r5
100140a2:	d2dd      	bcs.n	10014060 <__lesf2+0x38>
100140a4:	4258      	negs	r0, r3
100140a6:	4143      	adcs	r3, r0
100140a8:	2001      	movs	r0, #1
100140aa:	425b      	negs	r3, r3
100140ac:	4318      	orrs	r0, r3
100140ae:	e7d7      	b.n	10014060 <__lesf2+0x38>

100140b0 <__aeabi_fmul>:
100140b0:	b5f0      	push	{r4, r5, r6, r7, lr}
100140b2:	4657      	mov	r7, sl
100140b4:	464e      	mov	r6, r9
100140b6:	4645      	mov	r5, r8
100140b8:	0043      	lsls	r3, r0, #1
100140ba:	b4e0      	push	{r5, r6, r7}
100140bc:	0246      	lsls	r6, r0, #9
100140be:	4688      	mov	r8, r1
100140c0:	0a76      	lsrs	r6, r6, #9
100140c2:	0e1f      	lsrs	r7, r3, #24
100140c4:	0fc4      	lsrs	r4, r0, #31
100140c6:	2f00      	cmp	r7, #0
100140c8:	d047      	beq.n	1001415a <__aeabi_fmul+0xaa>
100140ca:	2fff      	cmp	r7, #255	; 0xff
100140cc:	d025      	beq.n	1001411a <__aeabi_fmul+0x6a>
100140ce:	2300      	movs	r3, #0
100140d0:	2580      	movs	r5, #128	; 0x80
100140d2:	469a      	mov	sl, r3
100140d4:	4699      	mov	r9, r3
100140d6:	00f6      	lsls	r6, r6, #3
100140d8:	04ed      	lsls	r5, r5, #19
100140da:	432e      	orrs	r6, r5
100140dc:	3f7f      	subs	r7, #127	; 0x7f
100140de:	4643      	mov	r3, r8
100140e0:	4642      	mov	r2, r8
100140e2:	025d      	lsls	r5, r3, #9
100140e4:	0fd2      	lsrs	r2, r2, #31
100140e6:	005b      	lsls	r3, r3, #1
100140e8:	0a6d      	lsrs	r5, r5, #9
100140ea:	0e1b      	lsrs	r3, r3, #24
100140ec:	4690      	mov	r8, r2
100140ee:	d040      	beq.n	10014172 <__aeabi_fmul+0xc2>
100140f0:	2bff      	cmp	r3, #255	; 0xff
100140f2:	d039      	beq.n	10014168 <__aeabi_fmul+0xb8>
100140f4:	2280      	movs	r2, #128	; 0x80
100140f6:	2000      	movs	r0, #0
100140f8:	00ed      	lsls	r5, r5, #3
100140fa:	04d2      	lsls	r2, r2, #19
100140fc:	4315      	orrs	r5, r2
100140fe:	3b7f      	subs	r3, #127	; 0x7f
10014100:	18fb      	adds	r3, r7, r3
10014102:	4642      	mov	r2, r8
10014104:	4657      	mov	r7, sl
10014106:	1c59      	adds	r1, r3, #1
10014108:	4062      	eors	r2, r4
1001410a:	468c      	mov	ip, r1
1001410c:	4307      	orrs	r7, r0
1001410e:	2f0f      	cmp	r7, #15
10014110:	d85c      	bhi.n	100141cc <__aeabi_fmul+0x11c>
10014112:	496f      	ldr	r1, [pc, #444]	; (100142d0 <__aeabi_fmul+0x220>)
10014114:	00bf      	lsls	r7, r7, #2
10014116:	59c9      	ldr	r1, [r1, r7]
10014118:	468f      	mov	pc, r1
1001411a:	2e00      	cmp	r6, #0
1001411c:	d145      	bne.n	100141aa <__aeabi_fmul+0xfa>
1001411e:	2308      	movs	r3, #8
10014120:	469a      	mov	sl, r3
10014122:	3b06      	subs	r3, #6
10014124:	4699      	mov	r9, r3
10014126:	e7da      	b.n	100140de <__aeabi_fmul+0x2e>
10014128:	4642      	mov	r2, r8
1001412a:	2802      	cmp	r0, #2
1001412c:	d02d      	beq.n	1001418a <__aeabi_fmul+0xda>
1001412e:	2803      	cmp	r0, #3
10014130:	d100      	bne.n	10014134 <__aeabi_fmul+0x84>
10014132:	e0c3      	b.n	100142bc <__aeabi_fmul+0x20c>
10014134:	2801      	cmp	r0, #1
10014136:	d000      	beq.n	1001413a <__aeabi_fmul+0x8a>
10014138:	e0a2      	b.n	10014280 <__aeabi_fmul+0x1d0>
1001413a:	2500      	movs	r5, #0
1001413c:	2600      	movs	r6, #0
1001413e:	4002      	ands	r2, r0
10014140:	b2d4      	uxtb	r4, r2
10014142:	0276      	lsls	r6, r6, #9
10014144:	05ed      	lsls	r5, r5, #23
10014146:	0a76      	lsrs	r6, r6, #9
10014148:	432e      	orrs	r6, r5
1001414a:	07e4      	lsls	r4, r4, #31
1001414c:	4326      	orrs	r6, r4
1001414e:	0030      	movs	r0, r6
10014150:	bc1c      	pop	{r2, r3, r4}
10014152:	4690      	mov	r8, r2
10014154:	4699      	mov	r9, r3
10014156:	46a2      	mov	sl, r4
10014158:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001415a:	2e00      	cmp	r6, #0
1001415c:	d11a      	bne.n	10014194 <__aeabi_fmul+0xe4>
1001415e:	2304      	movs	r3, #4
10014160:	469a      	mov	sl, r3
10014162:	3b03      	subs	r3, #3
10014164:	4699      	mov	r9, r3
10014166:	e7ba      	b.n	100140de <__aeabi_fmul+0x2e>
10014168:	002a      	movs	r2, r5
1001416a:	1e51      	subs	r1, r2, #1
1001416c:	418a      	sbcs	r2, r1
1001416e:	1c90      	adds	r0, r2, #2
10014170:	e7c6      	b.n	10014100 <__aeabi_fmul+0x50>
10014172:	2001      	movs	r0, #1
10014174:	2d00      	cmp	r5, #0
10014176:	d0c3      	beq.n	10014100 <__aeabi_fmul+0x50>
10014178:	0028      	movs	r0, r5
1001417a:	f002 f9c1 	bl	10016500 <__clzsi2>
1001417e:	1f43      	subs	r3, r0, #5
10014180:	3076      	adds	r0, #118	; 0x76
10014182:	409d      	lsls	r5, r3
10014184:	4243      	negs	r3, r0
10014186:	2000      	movs	r0, #0
10014188:	e7ba      	b.n	10014100 <__aeabi_fmul+0x50>
1001418a:	2401      	movs	r4, #1
1001418c:	25ff      	movs	r5, #255	; 0xff
1001418e:	4014      	ands	r4, r2
10014190:	2600      	movs	r6, #0
10014192:	e7d6      	b.n	10014142 <__aeabi_fmul+0x92>
10014194:	0030      	movs	r0, r6
10014196:	f002 f9b3 	bl	10016500 <__clzsi2>
1001419a:	1f43      	subs	r3, r0, #5
1001419c:	409e      	lsls	r6, r3
1001419e:	2300      	movs	r3, #0
100141a0:	3076      	adds	r0, #118	; 0x76
100141a2:	4247      	negs	r7, r0
100141a4:	469a      	mov	sl, r3
100141a6:	4699      	mov	r9, r3
100141a8:	e799      	b.n	100140de <__aeabi_fmul+0x2e>
100141aa:	230c      	movs	r3, #12
100141ac:	469a      	mov	sl, r3
100141ae:	3b09      	subs	r3, #9
100141b0:	4699      	mov	r9, r3
100141b2:	e794      	b.n	100140de <__aeabi_fmul+0x2e>
100141b4:	2680      	movs	r6, #128	; 0x80
100141b6:	2400      	movs	r4, #0
100141b8:	03f6      	lsls	r6, r6, #15
100141ba:	25ff      	movs	r5, #255	; 0xff
100141bc:	e7c1      	b.n	10014142 <__aeabi_fmul+0x92>
100141be:	0035      	movs	r5, r6
100141c0:	4648      	mov	r0, r9
100141c2:	e7b2      	b.n	1001412a <__aeabi_fmul+0x7a>
100141c4:	0035      	movs	r5, r6
100141c6:	0022      	movs	r2, r4
100141c8:	4648      	mov	r0, r9
100141ca:	e7ae      	b.n	1001412a <__aeabi_fmul+0x7a>
100141cc:	0429      	lsls	r1, r5, #16
100141ce:	0c09      	lsrs	r1, r1, #16
100141d0:	0008      	movs	r0, r1
100141d2:	0c37      	lsrs	r7, r6, #16
100141d4:	0436      	lsls	r6, r6, #16
100141d6:	0c36      	lsrs	r6, r6, #16
100141d8:	0c2c      	lsrs	r4, r5, #16
100141da:	4379      	muls	r1, r7
100141dc:	4370      	muls	r0, r6
100141de:	4367      	muls	r7, r4
100141e0:	4374      	muls	r4, r6
100141e2:	0c06      	lsrs	r6, r0, #16
100141e4:	1864      	adds	r4, r4, r1
100141e6:	1936      	adds	r6, r6, r4
100141e8:	42b1      	cmp	r1, r6
100141ea:	d903      	bls.n	100141f4 <__aeabi_fmul+0x144>
100141ec:	2180      	movs	r1, #128	; 0x80
100141ee:	0249      	lsls	r1, r1, #9
100141f0:	4688      	mov	r8, r1
100141f2:	4447      	add	r7, r8
100141f4:	0400      	lsls	r0, r0, #16
100141f6:	0c00      	lsrs	r0, r0, #16
100141f8:	0431      	lsls	r1, r6, #16
100141fa:	1809      	adds	r1, r1, r0
100141fc:	018d      	lsls	r5, r1, #6
100141fe:	1e68      	subs	r0, r5, #1
10014200:	4185      	sbcs	r5, r0
10014202:	0e89      	lsrs	r1, r1, #26
10014204:	4329      	orrs	r1, r5
10014206:	0c35      	lsrs	r5, r6, #16
10014208:	19ed      	adds	r5, r5, r7
1001420a:	01ad      	lsls	r5, r5, #6
1001420c:	430d      	orrs	r5, r1
1001420e:	0129      	lsls	r1, r5, #4
10014210:	d504      	bpl.n	1001421c <__aeabi_fmul+0x16c>
10014212:	2301      	movs	r3, #1
10014214:	0869      	lsrs	r1, r5, #1
10014216:	401d      	ands	r5, r3
10014218:	4663      	mov	r3, ip
1001421a:	430d      	orrs	r5, r1
1001421c:	0019      	movs	r1, r3
1001421e:	317f      	adds	r1, #127	; 0x7f
10014220:	2900      	cmp	r1, #0
10014222:	dd25      	ble.n	10014270 <__aeabi_fmul+0x1c0>
10014224:	0768      	lsls	r0, r5, #29
10014226:	d004      	beq.n	10014232 <__aeabi_fmul+0x182>
10014228:	200f      	movs	r0, #15
1001422a:	4028      	ands	r0, r5
1001422c:	2804      	cmp	r0, #4
1001422e:	d000      	beq.n	10014232 <__aeabi_fmul+0x182>
10014230:	3504      	adds	r5, #4
10014232:	0128      	lsls	r0, r5, #4
10014234:	d503      	bpl.n	1001423e <__aeabi_fmul+0x18e>
10014236:	4927      	ldr	r1, [pc, #156]	; (100142d4 <__aeabi_fmul+0x224>)
10014238:	3380      	adds	r3, #128	; 0x80
1001423a:	400d      	ands	r5, r1
1001423c:	0019      	movs	r1, r3
1001423e:	29fe      	cmp	r1, #254	; 0xfe
10014240:	dca3      	bgt.n	1001418a <__aeabi_fmul+0xda>
10014242:	2401      	movs	r4, #1
10014244:	01ad      	lsls	r5, r5, #6
10014246:	0a6e      	lsrs	r6, r5, #9
10014248:	4014      	ands	r4, r2
1001424a:	b2cd      	uxtb	r5, r1
1001424c:	e779      	b.n	10014142 <__aeabi_fmul+0x92>
1001424e:	2080      	movs	r0, #128	; 0x80
10014250:	03c0      	lsls	r0, r0, #15
10014252:	4206      	tst	r6, r0
10014254:	d007      	beq.n	10014266 <__aeabi_fmul+0x1b6>
10014256:	4205      	tst	r5, r0
10014258:	d105      	bne.n	10014266 <__aeabi_fmul+0x1b6>
1001425a:	4328      	orrs	r0, r5
1001425c:	0246      	lsls	r6, r0, #9
1001425e:	0a76      	lsrs	r6, r6, #9
10014260:	4644      	mov	r4, r8
10014262:	25ff      	movs	r5, #255	; 0xff
10014264:	e76d      	b.n	10014142 <__aeabi_fmul+0x92>
10014266:	4306      	orrs	r6, r0
10014268:	0276      	lsls	r6, r6, #9
1001426a:	0a76      	lsrs	r6, r6, #9
1001426c:	25ff      	movs	r5, #255	; 0xff
1001426e:	e768      	b.n	10014142 <__aeabi_fmul+0x92>
10014270:	2401      	movs	r4, #1
10014272:	1a61      	subs	r1, r4, r1
10014274:	291b      	cmp	r1, #27
10014276:	dd05      	ble.n	10014284 <__aeabi_fmul+0x1d4>
10014278:	4014      	ands	r4, r2
1001427a:	2500      	movs	r5, #0
1001427c:	2600      	movs	r6, #0
1001427e:	e760      	b.n	10014142 <__aeabi_fmul+0x92>
10014280:	4663      	mov	r3, ip
10014282:	e7cb      	b.n	1001421c <__aeabi_fmul+0x16c>
10014284:	002e      	movs	r6, r5
10014286:	2320      	movs	r3, #32
10014288:	40ce      	lsrs	r6, r1
1001428a:	1a59      	subs	r1, r3, r1
1001428c:	408d      	lsls	r5, r1
1001428e:	1e6b      	subs	r3, r5, #1
10014290:	419d      	sbcs	r5, r3
10014292:	432e      	orrs	r6, r5
10014294:	0773      	lsls	r3, r6, #29
10014296:	d004      	beq.n	100142a2 <__aeabi_fmul+0x1f2>
10014298:	230f      	movs	r3, #15
1001429a:	4033      	ands	r3, r6
1001429c:	2b04      	cmp	r3, #4
1001429e:	d000      	beq.n	100142a2 <__aeabi_fmul+0x1f2>
100142a0:	3604      	adds	r6, #4
100142a2:	0173      	lsls	r3, r6, #5
100142a4:	d504      	bpl.n	100142b0 <__aeabi_fmul+0x200>
100142a6:	2401      	movs	r4, #1
100142a8:	2501      	movs	r5, #1
100142aa:	4014      	ands	r4, r2
100142ac:	2600      	movs	r6, #0
100142ae:	e748      	b.n	10014142 <__aeabi_fmul+0x92>
100142b0:	2401      	movs	r4, #1
100142b2:	01b6      	lsls	r6, r6, #6
100142b4:	0a76      	lsrs	r6, r6, #9
100142b6:	4014      	ands	r4, r2
100142b8:	2500      	movs	r5, #0
100142ba:	e742      	b.n	10014142 <__aeabi_fmul+0x92>
100142bc:	2680      	movs	r6, #128	; 0x80
100142be:	2401      	movs	r4, #1
100142c0:	03f6      	lsls	r6, r6, #15
100142c2:	432e      	orrs	r6, r5
100142c4:	0276      	lsls	r6, r6, #9
100142c6:	0a76      	lsrs	r6, r6, #9
100142c8:	4014      	ands	r4, r2
100142ca:	25ff      	movs	r5, #255	; 0xff
100142cc:	e739      	b.n	10014142 <__aeabi_fmul+0x92>
100142ce:	46c0      	nop			; (mov r8, r8)
100142d0:	10018748 	.word	0x10018748
100142d4:	f7ffffff 	.word	0xf7ffffff

100142d8 <__aeabi_fsub>:
100142d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100142da:	024a      	lsls	r2, r1, #9
100142dc:	004e      	lsls	r6, r1, #1
100142de:	0243      	lsls	r3, r0, #9
100142e0:	0044      	lsls	r4, r0, #1
100142e2:	0e24      	lsrs	r4, r4, #24
100142e4:	0fc5      	lsrs	r5, r0, #31
100142e6:	099b      	lsrs	r3, r3, #6
100142e8:	0e36      	lsrs	r6, r6, #24
100142ea:	0fc9      	lsrs	r1, r1, #31
100142ec:	0992      	lsrs	r2, r2, #6
100142ee:	2eff      	cmp	r6, #255	; 0xff
100142f0:	d100      	bne.n	100142f4 <__aeabi_fsub+0x1c>
100142f2:	e083      	b.n	100143fc <__aeabi_fsub+0x124>
100142f4:	2001      	movs	r0, #1
100142f6:	4041      	eors	r1, r0
100142f8:	1ba0      	subs	r0, r4, r6
100142fa:	42a9      	cmp	r1, r5
100142fc:	d05c      	beq.n	100143b8 <__aeabi_fsub+0xe0>
100142fe:	2800      	cmp	r0, #0
10014300:	dc00      	bgt.n	10014304 <__aeabi_fsub+0x2c>
10014302:	e095      	b.n	10014430 <__aeabi_fsub+0x158>
10014304:	2e00      	cmp	r6, #0
10014306:	d11c      	bne.n	10014342 <__aeabi_fsub+0x6a>
10014308:	2a00      	cmp	r2, #0
1001430a:	d000      	beq.n	1001430e <__aeabi_fsub+0x36>
1001430c:	e081      	b.n	10014412 <__aeabi_fsub+0x13a>
1001430e:	075a      	lsls	r2, r3, #29
10014310:	d004      	beq.n	1001431c <__aeabi_fsub+0x44>
10014312:	220f      	movs	r2, #15
10014314:	401a      	ands	r2, r3
10014316:	2a04      	cmp	r2, #4
10014318:	d000      	beq.n	1001431c <__aeabi_fsub+0x44>
1001431a:	3304      	adds	r3, #4
1001431c:	015a      	lsls	r2, r3, #5
1001431e:	d53b      	bpl.n	10014398 <__aeabi_fsub+0xc0>
10014320:	3401      	adds	r4, #1
10014322:	2cff      	cmp	r4, #255	; 0xff
10014324:	d100      	bne.n	10014328 <__aeabi_fsub+0x50>
10014326:	e091      	b.n	1001444c <__aeabi_fsub+0x174>
10014328:	2001      	movs	r0, #1
1001432a:	019b      	lsls	r3, r3, #6
1001432c:	0a5b      	lsrs	r3, r3, #9
1001432e:	b2e4      	uxtb	r4, r4
10014330:	4005      	ands	r5, r0
10014332:	025b      	lsls	r3, r3, #9
10014334:	05e4      	lsls	r4, r4, #23
10014336:	0a5b      	lsrs	r3, r3, #9
10014338:	07ed      	lsls	r5, r5, #31
1001433a:	4323      	orrs	r3, r4
1001433c:	432b      	orrs	r3, r5
1001433e:	0018      	movs	r0, r3
10014340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10014342:	2cff      	cmp	r4, #255	; 0xff
10014344:	d0e3      	beq.n	1001430e <__aeabi_fsub+0x36>
10014346:	2180      	movs	r1, #128	; 0x80
10014348:	04c9      	lsls	r1, r1, #19
1001434a:	430a      	orrs	r2, r1
1001434c:	281b      	cmp	r0, #27
1001434e:	dd00      	ble.n	10014352 <__aeabi_fsub+0x7a>
10014350:	e090      	b.n	10014474 <__aeabi_fsub+0x19c>
10014352:	0016      	movs	r6, r2
10014354:	2120      	movs	r1, #32
10014356:	40c6      	lsrs	r6, r0
10014358:	1a08      	subs	r0, r1, r0
1001435a:	4082      	lsls	r2, r0
1001435c:	1e51      	subs	r1, r2, #1
1001435e:	418a      	sbcs	r2, r1
10014360:	4332      	orrs	r2, r6
10014362:	1a9b      	subs	r3, r3, r2
10014364:	015a      	lsls	r2, r3, #5
10014366:	d515      	bpl.n	10014394 <__aeabi_fsub+0xbc>
10014368:	019b      	lsls	r3, r3, #6
1001436a:	099e      	lsrs	r6, r3, #6
1001436c:	0030      	movs	r0, r6
1001436e:	f002 f8c7 	bl	10016500 <__clzsi2>
10014372:	3805      	subs	r0, #5
10014374:	4086      	lsls	r6, r0
10014376:	4284      	cmp	r4, r0
10014378:	dc6c      	bgt.n	10014454 <__aeabi_fsub+0x17c>
1001437a:	1b04      	subs	r4, r0, r4
1001437c:	0033      	movs	r3, r6
1001437e:	2020      	movs	r0, #32
10014380:	3401      	adds	r4, #1
10014382:	40e3      	lsrs	r3, r4
10014384:	1b04      	subs	r4, r0, r4
10014386:	40a6      	lsls	r6, r4
10014388:	1e72      	subs	r2, r6, #1
1001438a:	4196      	sbcs	r6, r2
1001438c:	2400      	movs	r4, #0
1001438e:	4333      	orrs	r3, r6
10014390:	e7bd      	b.n	1001430e <__aeabi_fsub+0x36>
10014392:	000d      	movs	r5, r1
10014394:	075a      	lsls	r2, r3, #29
10014396:	d1bc      	bne.n	10014312 <__aeabi_fsub+0x3a>
10014398:	08df      	lsrs	r7, r3, #3
1001439a:	2301      	movs	r3, #1
1001439c:	401d      	ands	r5, r3
1001439e:	2cff      	cmp	r4, #255	; 0xff
100143a0:	d133      	bne.n	1001440a <__aeabi_fsub+0x132>
100143a2:	2f00      	cmp	r7, #0
100143a4:	d100      	bne.n	100143a8 <__aeabi_fsub+0xd0>
100143a6:	e090      	b.n	100144ca <__aeabi_fsub+0x1f2>
100143a8:	2280      	movs	r2, #128	; 0x80
100143aa:	03d2      	lsls	r2, r2, #15
100143ac:	0013      	movs	r3, r2
100143ae:	433b      	orrs	r3, r7
100143b0:	025b      	lsls	r3, r3, #9
100143b2:	0a5b      	lsrs	r3, r3, #9
100143b4:	24ff      	movs	r4, #255	; 0xff
100143b6:	e7bc      	b.n	10014332 <__aeabi_fsub+0x5a>
100143b8:	2800      	cmp	r0, #0
100143ba:	dd4f      	ble.n	1001445c <__aeabi_fsub+0x184>
100143bc:	2e00      	cmp	r6, #0
100143be:	d02e      	beq.n	1001441e <__aeabi_fsub+0x146>
100143c0:	2cff      	cmp	r4, #255	; 0xff
100143c2:	d0a4      	beq.n	1001430e <__aeabi_fsub+0x36>
100143c4:	2580      	movs	r5, #128	; 0x80
100143c6:	04ed      	lsls	r5, r5, #19
100143c8:	432a      	orrs	r2, r5
100143ca:	281b      	cmp	r0, #27
100143cc:	dd00      	ble.n	100143d0 <__aeabi_fsub+0xf8>
100143ce:	e097      	b.n	10014500 <__aeabi_fsub+0x228>
100143d0:	0016      	movs	r6, r2
100143d2:	2520      	movs	r5, #32
100143d4:	40c6      	lsrs	r6, r0
100143d6:	1a28      	subs	r0, r5, r0
100143d8:	4082      	lsls	r2, r0
100143da:	1e50      	subs	r0, r2, #1
100143dc:	4182      	sbcs	r2, r0
100143de:	4332      	orrs	r2, r6
100143e0:	189b      	adds	r3, r3, r2
100143e2:	015a      	lsls	r2, r3, #5
100143e4:	d5d5      	bpl.n	10014392 <__aeabi_fsub+0xba>
100143e6:	3401      	adds	r4, #1
100143e8:	2cff      	cmp	r4, #255	; 0xff
100143ea:	d06d      	beq.n	100144c8 <__aeabi_fsub+0x1f0>
100143ec:	2201      	movs	r2, #1
100143ee:	487b      	ldr	r0, [pc, #492]	; (100145dc <__aeabi_fsub+0x304>)
100143f0:	401a      	ands	r2, r3
100143f2:	085b      	lsrs	r3, r3, #1
100143f4:	4003      	ands	r3, r0
100143f6:	4313      	orrs	r3, r2
100143f8:	000d      	movs	r5, r1
100143fa:	e788      	b.n	1001430e <__aeabi_fsub+0x36>
100143fc:	2a00      	cmp	r2, #0
100143fe:	d000      	beq.n	10014402 <__aeabi_fsub+0x12a>
10014400:	e77a      	b.n	100142f8 <__aeabi_fsub+0x20>
10014402:	e777      	b.n	100142f4 <__aeabi_fsub+0x1c>
10014404:	1e03      	subs	r3, r0, #0
10014406:	d1c5      	bne.n	10014394 <__aeabi_fsub+0xbc>
10014408:	2500      	movs	r5, #0
1001440a:	027b      	lsls	r3, r7, #9
1001440c:	0a5b      	lsrs	r3, r3, #9
1001440e:	b2e4      	uxtb	r4, r4
10014410:	e78f      	b.n	10014332 <__aeabi_fsub+0x5a>
10014412:	3801      	subs	r0, #1
10014414:	2800      	cmp	r0, #0
10014416:	d0a4      	beq.n	10014362 <__aeabi_fsub+0x8a>
10014418:	2cff      	cmp	r4, #255	; 0xff
1001441a:	d197      	bne.n	1001434c <__aeabi_fsub+0x74>
1001441c:	e777      	b.n	1001430e <__aeabi_fsub+0x36>
1001441e:	2a00      	cmp	r2, #0
10014420:	d100      	bne.n	10014424 <__aeabi_fsub+0x14c>
10014422:	e774      	b.n	1001430e <__aeabi_fsub+0x36>
10014424:	3801      	subs	r0, #1
10014426:	2800      	cmp	r0, #0
10014428:	d0da      	beq.n	100143e0 <__aeabi_fsub+0x108>
1001442a:	2cff      	cmp	r4, #255	; 0xff
1001442c:	d1cd      	bne.n	100143ca <__aeabi_fsub+0xf2>
1001442e:	e76e      	b.n	1001430e <__aeabi_fsub+0x36>
10014430:	2800      	cmp	r0, #0
10014432:	d121      	bne.n	10014478 <__aeabi_fsub+0x1a0>
10014434:	1c60      	adds	r0, r4, #1
10014436:	b2c0      	uxtb	r0, r0
10014438:	2801      	cmp	r0, #1
1001443a:	dd58      	ble.n	100144ee <__aeabi_fsub+0x216>
1001443c:	2780      	movs	r7, #128	; 0x80
1001443e:	1a9e      	subs	r6, r3, r2
10014440:	04ff      	lsls	r7, r7, #19
10014442:	4037      	ands	r7, r6
10014444:	d02f      	beq.n	100144a6 <__aeabi_fsub+0x1ce>
10014446:	1ad6      	subs	r6, r2, r3
10014448:	000d      	movs	r5, r1
1001444a:	e78f      	b.n	1001436c <__aeabi_fsub+0x94>
1001444c:	2301      	movs	r3, #1
1001444e:	401d      	ands	r5, r3
10014450:	2300      	movs	r3, #0
10014452:	e76e      	b.n	10014332 <__aeabi_fsub+0x5a>
10014454:	4b62      	ldr	r3, [pc, #392]	; (100145e0 <__aeabi_fsub+0x308>)
10014456:	1a24      	subs	r4, r4, r0
10014458:	4033      	ands	r3, r6
1001445a:	e758      	b.n	1001430e <__aeabi_fsub+0x36>
1001445c:	2800      	cmp	r0, #0
1001445e:	d151      	bne.n	10014504 <__aeabi_fsub+0x22c>
10014460:	1c60      	adds	r0, r4, #1
10014462:	b2c6      	uxtb	r6, r0
10014464:	2e01      	cmp	r6, #1
10014466:	dd33      	ble.n	100144d0 <__aeabi_fsub+0x1f8>
10014468:	28ff      	cmp	r0, #255	; 0xff
1001446a:	d02d      	beq.n	100144c8 <__aeabi_fsub+0x1f0>
1001446c:	189b      	adds	r3, r3, r2
1001446e:	085b      	lsrs	r3, r3, #1
10014470:	0004      	movs	r4, r0
10014472:	e74c      	b.n	1001430e <__aeabi_fsub+0x36>
10014474:	2201      	movs	r2, #1
10014476:	e774      	b.n	10014362 <__aeabi_fsub+0x8a>
10014478:	2c00      	cmp	r4, #0
1001447a:	d01a      	beq.n	100144b2 <__aeabi_fsub+0x1da>
1001447c:	2eff      	cmp	r6, #255	; 0xff
1001447e:	d01f      	beq.n	100144c0 <__aeabi_fsub+0x1e8>
10014480:	2480      	movs	r4, #128	; 0x80
10014482:	04e4      	lsls	r4, r4, #19
10014484:	4240      	negs	r0, r0
10014486:	4323      	orrs	r3, r4
10014488:	281b      	cmp	r0, #27
1001448a:	dd00      	ble.n	1001448e <__aeabi_fsub+0x1b6>
1001448c:	e096      	b.n	100145bc <__aeabi_fsub+0x2e4>
1001448e:	001d      	movs	r5, r3
10014490:	2420      	movs	r4, #32
10014492:	40c5      	lsrs	r5, r0
10014494:	1a20      	subs	r0, r4, r0
10014496:	4083      	lsls	r3, r0
10014498:	1e58      	subs	r0, r3, #1
1001449a:	4183      	sbcs	r3, r0
1001449c:	432b      	orrs	r3, r5
1001449e:	1ad3      	subs	r3, r2, r3
100144a0:	0034      	movs	r4, r6
100144a2:	000d      	movs	r5, r1
100144a4:	e75e      	b.n	10014364 <__aeabi_fsub+0x8c>
100144a6:	2e00      	cmp	r6, #0
100144a8:	d000      	beq.n	100144ac <__aeabi_fsub+0x1d4>
100144aa:	e75f      	b.n	1001436c <__aeabi_fsub+0x94>
100144ac:	2500      	movs	r5, #0
100144ae:	2400      	movs	r4, #0
100144b0:	e7ab      	b.n	1001440a <__aeabi_fsub+0x132>
100144b2:	2b00      	cmp	r3, #0
100144b4:	d044      	beq.n	10014540 <__aeabi_fsub+0x268>
100144b6:	43c0      	mvns	r0, r0
100144b8:	2800      	cmp	r0, #0
100144ba:	d0f0      	beq.n	1001449e <__aeabi_fsub+0x1c6>
100144bc:	2eff      	cmp	r6, #255	; 0xff
100144be:	d1e3      	bne.n	10014488 <__aeabi_fsub+0x1b0>
100144c0:	0013      	movs	r3, r2
100144c2:	24ff      	movs	r4, #255	; 0xff
100144c4:	000d      	movs	r5, r1
100144c6:	e722      	b.n	1001430e <__aeabi_fsub+0x36>
100144c8:	000d      	movs	r5, r1
100144ca:	24ff      	movs	r4, #255	; 0xff
100144cc:	2300      	movs	r3, #0
100144ce:	e730      	b.n	10014332 <__aeabi_fsub+0x5a>
100144d0:	2c00      	cmp	r4, #0
100144d2:	d15d      	bne.n	10014590 <__aeabi_fsub+0x2b8>
100144d4:	2b00      	cmp	r3, #0
100144d6:	d07d      	beq.n	100145d4 <__aeabi_fsub+0x2fc>
100144d8:	2a00      	cmp	r2, #0
100144da:	d100      	bne.n	100144de <__aeabi_fsub+0x206>
100144dc:	e717      	b.n	1001430e <__aeabi_fsub+0x36>
100144de:	189b      	adds	r3, r3, r2
100144e0:	015a      	lsls	r2, r3, #5
100144e2:	d400      	bmi.n	100144e6 <__aeabi_fsub+0x20e>
100144e4:	e756      	b.n	10014394 <__aeabi_fsub+0xbc>
100144e6:	4a3e      	ldr	r2, [pc, #248]	; (100145e0 <__aeabi_fsub+0x308>)
100144e8:	0004      	movs	r4, r0
100144ea:	4013      	ands	r3, r2
100144ec:	e70f      	b.n	1001430e <__aeabi_fsub+0x36>
100144ee:	2c00      	cmp	r4, #0
100144f0:	d11e      	bne.n	10014530 <__aeabi_fsub+0x258>
100144f2:	2b00      	cmp	r3, #0
100144f4:	d12f      	bne.n	10014556 <__aeabi_fsub+0x27e>
100144f6:	2a00      	cmp	r2, #0
100144f8:	d065      	beq.n	100145c6 <__aeabi_fsub+0x2ee>
100144fa:	0013      	movs	r3, r2
100144fc:	000d      	movs	r5, r1
100144fe:	e706      	b.n	1001430e <__aeabi_fsub+0x36>
10014500:	2201      	movs	r2, #1
10014502:	e76d      	b.n	100143e0 <__aeabi_fsub+0x108>
10014504:	2c00      	cmp	r4, #0
10014506:	d11f      	bne.n	10014548 <__aeabi_fsub+0x270>
10014508:	2b00      	cmp	r3, #0
1001450a:	d059      	beq.n	100145c0 <__aeabi_fsub+0x2e8>
1001450c:	43c0      	mvns	r0, r0
1001450e:	2800      	cmp	r0, #0
10014510:	d00b      	beq.n	1001452a <__aeabi_fsub+0x252>
10014512:	2eff      	cmp	r6, #255	; 0xff
10014514:	d04f      	beq.n	100145b6 <__aeabi_fsub+0x2de>
10014516:	281b      	cmp	r0, #27
10014518:	dc5e      	bgt.n	100145d8 <__aeabi_fsub+0x300>
1001451a:	001d      	movs	r5, r3
1001451c:	2420      	movs	r4, #32
1001451e:	40c5      	lsrs	r5, r0
10014520:	1a20      	subs	r0, r4, r0
10014522:	4083      	lsls	r3, r0
10014524:	1e58      	subs	r0, r3, #1
10014526:	4183      	sbcs	r3, r0
10014528:	432b      	orrs	r3, r5
1001452a:	189b      	adds	r3, r3, r2
1001452c:	0034      	movs	r4, r6
1001452e:	e758      	b.n	100143e2 <__aeabi_fsub+0x10a>
10014530:	2b00      	cmp	r3, #0
10014532:	d11c      	bne.n	1001456e <__aeabi_fsub+0x296>
10014534:	2a00      	cmp	r2, #0
10014536:	d049      	beq.n	100145cc <__aeabi_fsub+0x2f4>
10014538:	0013      	movs	r3, r2
1001453a:	000d      	movs	r5, r1
1001453c:	24ff      	movs	r4, #255	; 0xff
1001453e:	e6e6      	b.n	1001430e <__aeabi_fsub+0x36>
10014540:	0013      	movs	r3, r2
10014542:	0034      	movs	r4, r6
10014544:	000d      	movs	r5, r1
10014546:	e6e2      	b.n	1001430e <__aeabi_fsub+0x36>
10014548:	2eff      	cmp	r6, #255	; 0xff
1001454a:	d034      	beq.n	100145b6 <__aeabi_fsub+0x2de>
1001454c:	2480      	movs	r4, #128	; 0x80
1001454e:	04e4      	lsls	r4, r4, #19
10014550:	4240      	negs	r0, r0
10014552:	4323      	orrs	r3, r4
10014554:	e7df      	b.n	10014516 <__aeabi_fsub+0x23e>
10014556:	2a00      	cmp	r2, #0
10014558:	d100      	bne.n	1001455c <__aeabi_fsub+0x284>
1001455a:	e6d8      	b.n	1001430e <__aeabi_fsub+0x36>
1001455c:	2780      	movs	r7, #128	; 0x80
1001455e:	1a98      	subs	r0, r3, r2
10014560:	04ff      	lsls	r7, r7, #19
10014562:	4007      	ands	r7, r0
10014564:	d100      	bne.n	10014568 <__aeabi_fsub+0x290>
10014566:	e74d      	b.n	10014404 <__aeabi_fsub+0x12c>
10014568:	1ad3      	subs	r3, r2, r3
1001456a:	000d      	movs	r5, r1
1001456c:	e6cf      	b.n	1001430e <__aeabi_fsub+0x36>
1001456e:	24ff      	movs	r4, #255	; 0xff
10014570:	2a00      	cmp	r2, #0
10014572:	d100      	bne.n	10014576 <__aeabi_fsub+0x29e>
10014574:	e6cb      	b.n	1001430e <__aeabi_fsub+0x36>
10014576:	2080      	movs	r0, #128	; 0x80
10014578:	08db      	lsrs	r3, r3, #3
1001457a:	03c0      	lsls	r0, r0, #15
1001457c:	4203      	tst	r3, r0
1001457e:	d004      	beq.n	1001458a <__aeabi_fsub+0x2b2>
10014580:	08d2      	lsrs	r2, r2, #3
10014582:	4202      	tst	r2, r0
10014584:	d101      	bne.n	1001458a <__aeabi_fsub+0x2b2>
10014586:	0013      	movs	r3, r2
10014588:	000d      	movs	r5, r1
1001458a:	00db      	lsls	r3, r3, #3
1001458c:	24ff      	movs	r4, #255	; 0xff
1001458e:	e6be      	b.n	1001430e <__aeabi_fsub+0x36>
10014590:	2b00      	cmp	r3, #0
10014592:	d010      	beq.n	100145b6 <__aeabi_fsub+0x2de>
10014594:	24ff      	movs	r4, #255	; 0xff
10014596:	2a00      	cmp	r2, #0
10014598:	d100      	bne.n	1001459c <__aeabi_fsub+0x2c4>
1001459a:	e6b8      	b.n	1001430e <__aeabi_fsub+0x36>
1001459c:	2080      	movs	r0, #128	; 0x80
1001459e:	08db      	lsrs	r3, r3, #3
100145a0:	03c0      	lsls	r0, r0, #15
100145a2:	4203      	tst	r3, r0
100145a4:	d003      	beq.n	100145ae <__aeabi_fsub+0x2d6>
100145a6:	08d2      	lsrs	r2, r2, #3
100145a8:	4202      	tst	r2, r0
100145aa:	d100      	bne.n	100145ae <__aeabi_fsub+0x2d6>
100145ac:	0013      	movs	r3, r2
100145ae:	00db      	lsls	r3, r3, #3
100145b0:	000d      	movs	r5, r1
100145b2:	24ff      	movs	r4, #255	; 0xff
100145b4:	e6ab      	b.n	1001430e <__aeabi_fsub+0x36>
100145b6:	0013      	movs	r3, r2
100145b8:	24ff      	movs	r4, #255	; 0xff
100145ba:	e6a8      	b.n	1001430e <__aeabi_fsub+0x36>
100145bc:	2301      	movs	r3, #1
100145be:	e76e      	b.n	1001449e <__aeabi_fsub+0x1c6>
100145c0:	0013      	movs	r3, r2
100145c2:	0034      	movs	r4, r6
100145c4:	e6a3      	b.n	1001430e <__aeabi_fsub+0x36>
100145c6:	2700      	movs	r7, #0
100145c8:	2500      	movs	r5, #0
100145ca:	e71e      	b.n	1001440a <__aeabi_fsub+0x132>
100145cc:	2780      	movs	r7, #128	; 0x80
100145ce:	2500      	movs	r5, #0
100145d0:	03ff      	lsls	r7, r7, #15
100145d2:	e6e9      	b.n	100143a8 <__aeabi_fsub+0xd0>
100145d4:	0013      	movs	r3, r2
100145d6:	e69a      	b.n	1001430e <__aeabi_fsub+0x36>
100145d8:	2301      	movs	r3, #1
100145da:	e7a6      	b.n	1001452a <__aeabi_fsub+0x252>
100145dc:	7dffffff 	.word	0x7dffffff
100145e0:	fbffffff 	.word	0xfbffffff

100145e4 <__aeabi_fcmpun>:
100145e4:	0243      	lsls	r3, r0, #9
100145e6:	0a5a      	lsrs	r2, r3, #9
100145e8:	0040      	lsls	r0, r0, #1
100145ea:	024b      	lsls	r3, r1, #9
100145ec:	0049      	lsls	r1, r1, #1
100145ee:	0e00      	lsrs	r0, r0, #24
100145f0:	0a5b      	lsrs	r3, r3, #9
100145f2:	0e09      	lsrs	r1, r1, #24
100145f4:	28ff      	cmp	r0, #255	; 0xff
100145f6:	d003      	beq.n	10014600 <__aeabi_fcmpun+0x1c>
100145f8:	2000      	movs	r0, #0
100145fa:	29ff      	cmp	r1, #255	; 0xff
100145fc:	d006      	beq.n	1001460c <__aeabi_fcmpun+0x28>
100145fe:	4770      	bx	lr
10014600:	38fe      	subs	r0, #254	; 0xfe
10014602:	2a00      	cmp	r2, #0
10014604:	d1fb      	bne.n	100145fe <__aeabi_fcmpun+0x1a>
10014606:	2000      	movs	r0, #0
10014608:	29ff      	cmp	r1, #255	; 0xff
1001460a:	d1f8      	bne.n	100145fe <__aeabi_fcmpun+0x1a>
1001460c:	0018      	movs	r0, r3
1001460e:	1e43      	subs	r3, r0, #1
10014610:	4198      	sbcs	r0, r3
10014612:	e7f4      	b.n	100145fe <__aeabi_fcmpun+0x1a>

10014614 <__aeabi_f2iz>:
10014614:	0243      	lsls	r3, r0, #9
10014616:	0a59      	lsrs	r1, r3, #9
10014618:	0043      	lsls	r3, r0, #1
1001461a:	0fc2      	lsrs	r2, r0, #31
1001461c:	0e1b      	lsrs	r3, r3, #24
1001461e:	2000      	movs	r0, #0
10014620:	2b7e      	cmp	r3, #126	; 0x7e
10014622:	dd0e      	ble.n	10014642 <__aeabi_f2iz+0x2e>
10014624:	2b9d      	cmp	r3, #157	; 0x9d
10014626:	dc0d      	bgt.n	10014644 <__aeabi_f2iz+0x30>
10014628:	2080      	movs	r0, #128	; 0x80
1001462a:	0400      	lsls	r0, r0, #16
1001462c:	4301      	orrs	r1, r0
1001462e:	2b95      	cmp	r3, #149	; 0x95
10014630:	dc0b      	bgt.n	1001464a <__aeabi_f2iz+0x36>
10014632:	2096      	movs	r0, #150	; 0x96
10014634:	1ac3      	subs	r3, r0, r3
10014636:	40d9      	lsrs	r1, r3
10014638:	000b      	movs	r3, r1
1001463a:	4258      	negs	r0, r3
1001463c:	2a00      	cmp	r2, #0
1001463e:	d100      	bne.n	10014642 <__aeabi_f2iz+0x2e>
10014640:	0018      	movs	r0, r3
10014642:	4770      	bx	lr
10014644:	4b03      	ldr	r3, [pc, #12]	; (10014654 <__aeabi_f2iz+0x40>)
10014646:	18d0      	adds	r0, r2, r3
10014648:	e7fb      	b.n	10014642 <__aeabi_f2iz+0x2e>
1001464a:	3b96      	subs	r3, #150	; 0x96
1001464c:	4099      	lsls	r1, r3
1001464e:	000b      	movs	r3, r1
10014650:	e7f3      	b.n	1001463a <__aeabi_f2iz+0x26>
10014652:	46c0      	nop			; (mov r8, r8)
10014654:	7fffffff 	.word	0x7fffffff

10014658 <__aeabi_i2f>:
10014658:	b570      	push	{r4, r5, r6, lr}
1001465a:	2800      	cmp	r0, #0
1001465c:	d030      	beq.n	100146c0 <__aeabi_i2f+0x68>
1001465e:	17c3      	asrs	r3, r0, #31
10014660:	18c5      	adds	r5, r0, r3
10014662:	405d      	eors	r5, r3
10014664:	0fc4      	lsrs	r4, r0, #31
10014666:	0028      	movs	r0, r5
10014668:	f001 ff4a 	bl	10016500 <__clzsi2>
1001466c:	239e      	movs	r3, #158	; 0x9e
1001466e:	1a1b      	subs	r3, r3, r0
10014670:	2b96      	cmp	r3, #150	; 0x96
10014672:	dc0d      	bgt.n	10014690 <__aeabi_i2f+0x38>
10014674:	2296      	movs	r2, #150	; 0x96
10014676:	1ad2      	subs	r2, r2, r3
10014678:	4095      	lsls	r5, r2
1001467a:	026a      	lsls	r2, r5, #9
1001467c:	0a52      	lsrs	r2, r2, #9
1001467e:	b2d8      	uxtb	r0, r3
10014680:	0252      	lsls	r2, r2, #9
10014682:	05c0      	lsls	r0, r0, #23
10014684:	0a52      	lsrs	r2, r2, #9
10014686:	07e4      	lsls	r4, r4, #31
10014688:	4302      	orrs	r2, r0
1001468a:	4322      	orrs	r2, r4
1001468c:	0010      	movs	r0, r2
1001468e:	bd70      	pop	{r4, r5, r6, pc}
10014690:	2b99      	cmp	r3, #153	; 0x99
10014692:	dc19      	bgt.n	100146c8 <__aeabi_i2f+0x70>
10014694:	2299      	movs	r2, #153	; 0x99
10014696:	1ad2      	subs	r2, r2, r3
10014698:	4095      	lsls	r5, r2
1001469a:	4a12      	ldr	r2, [pc, #72]	; (100146e4 <__aeabi_i2f+0x8c>)
1001469c:	402a      	ands	r2, r5
1001469e:	0769      	lsls	r1, r5, #29
100146a0:	d004      	beq.n	100146ac <__aeabi_i2f+0x54>
100146a2:	210f      	movs	r1, #15
100146a4:	400d      	ands	r5, r1
100146a6:	2d04      	cmp	r5, #4
100146a8:	d000      	beq.n	100146ac <__aeabi_i2f+0x54>
100146aa:	3204      	adds	r2, #4
100146ac:	0151      	lsls	r1, r2, #5
100146ae:	d503      	bpl.n	100146b8 <__aeabi_i2f+0x60>
100146b0:	4b0c      	ldr	r3, [pc, #48]	; (100146e4 <__aeabi_i2f+0x8c>)
100146b2:	401a      	ands	r2, r3
100146b4:	239f      	movs	r3, #159	; 0x9f
100146b6:	1a1b      	subs	r3, r3, r0
100146b8:	0192      	lsls	r2, r2, #6
100146ba:	0a52      	lsrs	r2, r2, #9
100146bc:	b2d8      	uxtb	r0, r3
100146be:	e7df      	b.n	10014680 <__aeabi_i2f+0x28>
100146c0:	2400      	movs	r4, #0
100146c2:	2000      	movs	r0, #0
100146c4:	2200      	movs	r2, #0
100146c6:	e7db      	b.n	10014680 <__aeabi_i2f+0x28>
100146c8:	2205      	movs	r2, #5
100146ca:	002e      	movs	r6, r5
100146cc:	1a12      	subs	r2, r2, r0
100146ce:	21b9      	movs	r1, #185	; 0xb9
100146d0:	40d6      	lsrs	r6, r2
100146d2:	002a      	movs	r2, r5
100146d4:	1ac9      	subs	r1, r1, r3
100146d6:	408a      	lsls	r2, r1
100146d8:	1e55      	subs	r5, r2, #1
100146da:	41aa      	sbcs	r2, r5
100146dc:	0035      	movs	r5, r6
100146de:	4315      	orrs	r5, r2
100146e0:	e7db      	b.n	1001469a <__aeabi_i2f+0x42>
100146e2:	46c0      	nop			; (mov r8, r8)
100146e4:	fbffffff 	.word	0xfbffffff

100146e8 <__aeabi_ui2f>:
100146e8:	b570      	push	{r4, r5, r6, lr}
100146ea:	1e04      	subs	r4, r0, #0
100146ec:	d028      	beq.n	10014740 <__aeabi_ui2f+0x58>
100146ee:	f001 ff07 	bl	10016500 <__clzsi2>
100146f2:	239e      	movs	r3, #158	; 0x9e
100146f4:	1a1b      	subs	r3, r3, r0
100146f6:	2b96      	cmp	r3, #150	; 0x96
100146f8:	dc0a      	bgt.n	10014710 <__aeabi_ui2f+0x28>
100146fa:	2296      	movs	r2, #150	; 0x96
100146fc:	1ad2      	subs	r2, r2, r3
100146fe:	4094      	lsls	r4, r2
10014700:	0262      	lsls	r2, r4, #9
10014702:	0a52      	lsrs	r2, r2, #9
10014704:	b2d8      	uxtb	r0, r3
10014706:	0252      	lsls	r2, r2, #9
10014708:	0a52      	lsrs	r2, r2, #9
1001470a:	05c0      	lsls	r0, r0, #23
1001470c:	4310      	orrs	r0, r2
1001470e:	bd70      	pop	{r4, r5, r6, pc}
10014710:	2b99      	cmp	r3, #153	; 0x99
10014712:	dc18      	bgt.n	10014746 <__aeabi_ui2f+0x5e>
10014714:	2299      	movs	r2, #153	; 0x99
10014716:	1ad2      	subs	r2, r2, r3
10014718:	4094      	lsls	r4, r2
1001471a:	4a11      	ldr	r2, [pc, #68]	; (10014760 <__aeabi_ui2f+0x78>)
1001471c:	4022      	ands	r2, r4
1001471e:	0761      	lsls	r1, r4, #29
10014720:	d004      	beq.n	1001472c <__aeabi_ui2f+0x44>
10014722:	210f      	movs	r1, #15
10014724:	400c      	ands	r4, r1
10014726:	2c04      	cmp	r4, #4
10014728:	d000      	beq.n	1001472c <__aeabi_ui2f+0x44>
1001472a:	3204      	adds	r2, #4
1001472c:	0151      	lsls	r1, r2, #5
1001472e:	d503      	bpl.n	10014738 <__aeabi_ui2f+0x50>
10014730:	4b0b      	ldr	r3, [pc, #44]	; (10014760 <__aeabi_ui2f+0x78>)
10014732:	401a      	ands	r2, r3
10014734:	239f      	movs	r3, #159	; 0x9f
10014736:	1a1b      	subs	r3, r3, r0
10014738:	0192      	lsls	r2, r2, #6
1001473a:	0a52      	lsrs	r2, r2, #9
1001473c:	b2d8      	uxtb	r0, r3
1001473e:	e7e2      	b.n	10014706 <__aeabi_ui2f+0x1e>
10014740:	2000      	movs	r0, #0
10014742:	2200      	movs	r2, #0
10014744:	e7df      	b.n	10014706 <__aeabi_ui2f+0x1e>
10014746:	2205      	movs	r2, #5
10014748:	0025      	movs	r5, r4
1001474a:	1a12      	subs	r2, r2, r0
1001474c:	21b9      	movs	r1, #185	; 0xb9
1001474e:	40d5      	lsrs	r5, r2
10014750:	0022      	movs	r2, r4
10014752:	1ac9      	subs	r1, r1, r3
10014754:	408a      	lsls	r2, r1
10014756:	1e54      	subs	r4, r2, #1
10014758:	41a2      	sbcs	r2, r4
1001475a:	002c      	movs	r4, r5
1001475c:	4314      	orrs	r4, r2
1001475e:	e7dc      	b.n	1001471a <__aeabi_ui2f+0x32>
10014760:	fbffffff 	.word	0xfbffffff

10014764 <__aeabi_dadd>:
10014764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10014766:	4656      	mov	r6, sl
10014768:	465f      	mov	r7, fp
1001476a:	464d      	mov	r5, r9
1001476c:	4644      	mov	r4, r8
1001476e:	b4f0      	push	{r4, r5, r6, r7}
10014770:	000f      	movs	r7, r1
10014772:	0ffd      	lsrs	r5, r7, #31
10014774:	46aa      	mov	sl, r5
10014776:	0309      	lsls	r1, r1, #12
10014778:	007c      	lsls	r4, r7, #1
1001477a:	002e      	movs	r6, r5
1001477c:	005f      	lsls	r7, r3, #1
1001477e:	0f45      	lsrs	r5, r0, #29
10014780:	0a49      	lsrs	r1, r1, #9
10014782:	0d7f      	lsrs	r7, r7, #21
10014784:	4329      	orrs	r1, r5
10014786:	00c5      	lsls	r5, r0, #3
10014788:	0318      	lsls	r0, r3, #12
1001478a:	46bc      	mov	ip, r7
1001478c:	0a40      	lsrs	r0, r0, #9
1001478e:	0f57      	lsrs	r7, r2, #29
10014790:	0d64      	lsrs	r4, r4, #21
10014792:	0fdb      	lsrs	r3, r3, #31
10014794:	4338      	orrs	r0, r7
10014796:	00d2      	lsls	r2, r2, #3
10014798:	459a      	cmp	sl, r3
1001479a:	d100      	bne.n	1001479e <__aeabi_dadd+0x3a>
1001479c:	e0aa      	b.n	100148f4 <__aeabi_dadd+0x190>
1001479e:	4666      	mov	r6, ip
100147a0:	1ba6      	subs	r6, r4, r6
100147a2:	2e00      	cmp	r6, #0
100147a4:	dc00      	bgt.n	100147a8 <__aeabi_dadd+0x44>
100147a6:	e0ff      	b.n	100149a8 <__aeabi_dadd+0x244>
100147a8:	4663      	mov	r3, ip
100147aa:	2b00      	cmp	r3, #0
100147ac:	d139      	bne.n	10014822 <__aeabi_dadd+0xbe>
100147ae:	0003      	movs	r3, r0
100147b0:	4313      	orrs	r3, r2
100147b2:	d000      	beq.n	100147b6 <__aeabi_dadd+0x52>
100147b4:	e0d9      	b.n	1001496a <__aeabi_dadd+0x206>
100147b6:	076b      	lsls	r3, r5, #29
100147b8:	d009      	beq.n	100147ce <__aeabi_dadd+0x6a>
100147ba:	230f      	movs	r3, #15
100147bc:	402b      	ands	r3, r5
100147be:	2b04      	cmp	r3, #4
100147c0:	d005      	beq.n	100147ce <__aeabi_dadd+0x6a>
100147c2:	1d2b      	adds	r3, r5, #4
100147c4:	42ab      	cmp	r3, r5
100147c6:	41ad      	sbcs	r5, r5
100147c8:	426d      	negs	r5, r5
100147ca:	1949      	adds	r1, r1, r5
100147cc:	001d      	movs	r5, r3
100147ce:	020b      	lsls	r3, r1, #8
100147d0:	d400      	bmi.n	100147d4 <__aeabi_dadd+0x70>
100147d2:	e082      	b.n	100148da <__aeabi_dadd+0x176>
100147d4:	4bca      	ldr	r3, [pc, #808]	; (10014b00 <__aeabi_dadd+0x39c>)
100147d6:	3401      	adds	r4, #1
100147d8:	429c      	cmp	r4, r3
100147da:	d100      	bne.n	100147de <__aeabi_dadd+0x7a>
100147dc:	e0fe      	b.n	100149dc <__aeabi_dadd+0x278>
100147de:	000a      	movs	r2, r1
100147e0:	4656      	mov	r6, sl
100147e2:	4bc8      	ldr	r3, [pc, #800]	; (10014b04 <__aeabi_dadd+0x3a0>)
100147e4:	08ed      	lsrs	r5, r5, #3
100147e6:	401a      	ands	r2, r3
100147e8:	0750      	lsls	r0, r2, #29
100147ea:	0564      	lsls	r4, r4, #21
100147ec:	0252      	lsls	r2, r2, #9
100147ee:	4305      	orrs	r5, r0
100147f0:	0b12      	lsrs	r2, r2, #12
100147f2:	0d64      	lsrs	r4, r4, #21
100147f4:	2100      	movs	r1, #0
100147f6:	0312      	lsls	r2, r2, #12
100147f8:	0d0b      	lsrs	r3, r1, #20
100147fa:	051b      	lsls	r3, r3, #20
100147fc:	0564      	lsls	r4, r4, #21
100147fe:	0b12      	lsrs	r2, r2, #12
10014800:	431a      	orrs	r2, r3
10014802:	0863      	lsrs	r3, r4, #1
10014804:	4cc0      	ldr	r4, [pc, #768]	; (10014b08 <__aeabi_dadd+0x3a4>)
10014806:	07f6      	lsls	r6, r6, #31
10014808:	4014      	ands	r4, r2
1001480a:	431c      	orrs	r4, r3
1001480c:	0064      	lsls	r4, r4, #1
1001480e:	0864      	lsrs	r4, r4, #1
10014810:	4334      	orrs	r4, r6
10014812:	0028      	movs	r0, r5
10014814:	0021      	movs	r1, r4
10014816:	bc3c      	pop	{r2, r3, r4, r5}
10014818:	4690      	mov	r8, r2
1001481a:	4699      	mov	r9, r3
1001481c:	46a2      	mov	sl, r4
1001481e:	46ab      	mov	fp, r5
10014820:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10014822:	4bb7      	ldr	r3, [pc, #732]	; (10014b00 <__aeabi_dadd+0x39c>)
10014824:	429c      	cmp	r4, r3
10014826:	d0c6      	beq.n	100147b6 <__aeabi_dadd+0x52>
10014828:	2380      	movs	r3, #128	; 0x80
1001482a:	041b      	lsls	r3, r3, #16
1001482c:	4318      	orrs	r0, r3
1001482e:	2e38      	cmp	r6, #56	; 0x38
10014830:	dd00      	ble.n	10014834 <__aeabi_dadd+0xd0>
10014832:	e0eb      	b.n	10014a0c <__aeabi_dadd+0x2a8>
10014834:	2e1f      	cmp	r6, #31
10014836:	dd00      	ble.n	1001483a <__aeabi_dadd+0xd6>
10014838:	e11e      	b.n	10014a78 <__aeabi_dadd+0x314>
1001483a:	2320      	movs	r3, #32
1001483c:	1b9b      	subs	r3, r3, r6
1001483e:	469c      	mov	ip, r3
10014840:	0003      	movs	r3, r0
10014842:	4667      	mov	r7, ip
10014844:	40bb      	lsls	r3, r7
10014846:	4698      	mov	r8, r3
10014848:	0013      	movs	r3, r2
1001484a:	4647      	mov	r7, r8
1001484c:	40f3      	lsrs	r3, r6
1001484e:	433b      	orrs	r3, r7
10014850:	4667      	mov	r7, ip
10014852:	40ba      	lsls	r2, r7
10014854:	1e57      	subs	r7, r2, #1
10014856:	41ba      	sbcs	r2, r7
10014858:	4313      	orrs	r3, r2
1001485a:	0002      	movs	r2, r0
1001485c:	40f2      	lsrs	r2, r6
1001485e:	1aeb      	subs	r3, r5, r3
10014860:	429d      	cmp	r5, r3
10014862:	41b6      	sbcs	r6, r6
10014864:	001d      	movs	r5, r3
10014866:	1a8a      	subs	r2, r1, r2
10014868:	4276      	negs	r6, r6
1001486a:	1b91      	subs	r1, r2, r6
1001486c:	020b      	lsls	r3, r1, #8
1001486e:	d531      	bpl.n	100148d4 <__aeabi_dadd+0x170>
10014870:	024a      	lsls	r2, r1, #9
10014872:	0a56      	lsrs	r6, r2, #9
10014874:	2e00      	cmp	r6, #0
10014876:	d100      	bne.n	1001487a <__aeabi_dadd+0x116>
10014878:	e0b4      	b.n	100149e4 <__aeabi_dadd+0x280>
1001487a:	0030      	movs	r0, r6
1001487c:	f001 fe40 	bl	10016500 <__clzsi2>
10014880:	0003      	movs	r3, r0
10014882:	3b08      	subs	r3, #8
10014884:	2b1f      	cmp	r3, #31
10014886:	dd00      	ble.n	1001488a <__aeabi_dadd+0x126>
10014888:	e0b5      	b.n	100149f6 <__aeabi_dadd+0x292>
1001488a:	2220      	movs	r2, #32
1001488c:	0029      	movs	r1, r5
1001488e:	1ad2      	subs	r2, r2, r3
10014890:	40d1      	lsrs	r1, r2
10014892:	409e      	lsls	r6, r3
10014894:	000a      	movs	r2, r1
10014896:	409d      	lsls	r5, r3
10014898:	4332      	orrs	r2, r6
1001489a:	429c      	cmp	r4, r3
1001489c:	dd00      	ble.n	100148a0 <__aeabi_dadd+0x13c>
1001489e:	e0b1      	b.n	10014a04 <__aeabi_dadd+0x2a0>
100148a0:	1b1c      	subs	r4, r3, r4
100148a2:	1c63      	adds	r3, r4, #1
100148a4:	2b1f      	cmp	r3, #31
100148a6:	dd00      	ble.n	100148aa <__aeabi_dadd+0x146>
100148a8:	e0d5      	b.n	10014a56 <__aeabi_dadd+0x2f2>
100148aa:	2120      	movs	r1, #32
100148ac:	0014      	movs	r4, r2
100148ae:	0028      	movs	r0, r5
100148b0:	1ac9      	subs	r1, r1, r3
100148b2:	408c      	lsls	r4, r1
100148b4:	40d8      	lsrs	r0, r3
100148b6:	408d      	lsls	r5, r1
100148b8:	4304      	orrs	r4, r0
100148ba:	40da      	lsrs	r2, r3
100148bc:	1e68      	subs	r0, r5, #1
100148be:	4185      	sbcs	r5, r0
100148c0:	0011      	movs	r1, r2
100148c2:	4325      	orrs	r5, r4
100148c4:	2400      	movs	r4, #0
100148c6:	e776      	b.n	100147b6 <__aeabi_dadd+0x52>
100148c8:	4641      	mov	r1, r8
100148ca:	4331      	orrs	r1, r6
100148cc:	d100      	bne.n	100148d0 <__aeabi_dadd+0x16c>
100148ce:	e234      	b.n	10014d3a <__aeabi_dadd+0x5d6>
100148d0:	0031      	movs	r1, r6
100148d2:	4645      	mov	r5, r8
100148d4:	076b      	lsls	r3, r5, #29
100148d6:	d000      	beq.n	100148da <__aeabi_dadd+0x176>
100148d8:	e76f      	b.n	100147ba <__aeabi_dadd+0x56>
100148da:	4656      	mov	r6, sl
100148dc:	0748      	lsls	r0, r1, #29
100148de:	08ed      	lsrs	r5, r5, #3
100148e0:	08c9      	lsrs	r1, r1, #3
100148e2:	4305      	orrs	r5, r0
100148e4:	4b86      	ldr	r3, [pc, #536]	; (10014b00 <__aeabi_dadd+0x39c>)
100148e6:	429c      	cmp	r4, r3
100148e8:	d035      	beq.n	10014956 <__aeabi_dadd+0x1f2>
100148ea:	030a      	lsls	r2, r1, #12
100148ec:	0564      	lsls	r4, r4, #21
100148ee:	0b12      	lsrs	r2, r2, #12
100148f0:	0d64      	lsrs	r4, r4, #21
100148f2:	e77f      	b.n	100147f4 <__aeabi_dadd+0x90>
100148f4:	4663      	mov	r3, ip
100148f6:	1ae3      	subs	r3, r4, r3
100148f8:	469b      	mov	fp, r3
100148fa:	2b00      	cmp	r3, #0
100148fc:	dc00      	bgt.n	10014900 <__aeabi_dadd+0x19c>
100148fe:	e08b      	b.n	10014a18 <__aeabi_dadd+0x2b4>
10014900:	4667      	mov	r7, ip
10014902:	2f00      	cmp	r7, #0
10014904:	d03c      	beq.n	10014980 <__aeabi_dadd+0x21c>
10014906:	4f7e      	ldr	r7, [pc, #504]	; (10014b00 <__aeabi_dadd+0x39c>)
10014908:	42bc      	cmp	r4, r7
1001490a:	d100      	bne.n	1001490e <__aeabi_dadd+0x1aa>
1001490c:	e753      	b.n	100147b6 <__aeabi_dadd+0x52>
1001490e:	2780      	movs	r7, #128	; 0x80
10014910:	043f      	lsls	r7, r7, #16
10014912:	4338      	orrs	r0, r7
10014914:	465b      	mov	r3, fp
10014916:	2b38      	cmp	r3, #56	; 0x38
10014918:	dc00      	bgt.n	1001491c <__aeabi_dadd+0x1b8>
1001491a:	e0f7      	b.n	10014b0c <__aeabi_dadd+0x3a8>
1001491c:	4302      	orrs	r2, r0
1001491e:	1e50      	subs	r0, r2, #1
10014920:	4182      	sbcs	r2, r0
10014922:	2000      	movs	r0, #0
10014924:	b2d2      	uxtb	r2, r2
10014926:	1953      	adds	r3, r2, r5
10014928:	1842      	adds	r2, r0, r1
1001492a:	42ab      	cmp	r3, r5
1001492c:	4189      	sbcs	r1, r1
1001492e:	001d      	movs	r5, r3
10014930:	4249      	negs	r1, r1
10014932:	1889      	adds	r1, r1, r2
10014934:	020b      	lsls	r3, r1, #8
10014936:	d5cd      	bpl.n	100148d4 <__aeabi_dadd+0x170>
10014938:	4b71      	ldr	r3, [pc, #452]	; (10014b00 <__aeabi_dadd+0x39c>)
1001493a:	3401      	adds	r4, #1
1001493c:	429c      	cmp	r4, r3
1001493e:	d100      	bne.n	10014942 <__aeabi_dadd+0x1de>
10014940:	e13d      	b.n	10014bbe <__aeabi_dadd+0x45a>
10014942:	2001      	movs	r0, #1
10014944:	4a6f      	ldr	r2, [pc, #444]	; (10014b04 <__aeabi_dadd+0x3a0>)
10014946:	086b      	lsrs	r3, r5, #1
10014948:	400a      	ands	r2, r1
1001494a:	4028      	ands	r0, r5
1001494c:	4318      	orrs	r0, r3
1001494e:	07d5      	lsls	r5, r2, #31
10014950:	4305      	orrs	r5, r0
10014952:	0851      	lsrs	r1, r2, #1
10014954:	e72f      	b.n	100147b6 <__aeabi_dadd+0x52>
10014956:	002b      	movs	r3, r5
10014958:	430b      	orrs	r3, r1
1001495a:	d100      	bne.n	1001495e <__aeabi_dadd+0x1fa>
1001495c:	e1cb      	b.n	10014cf6 <__aeabi_dadd+0x592>
1001495e:	2380      	movs	r3, #128	; 0x80
10014960:	031b      	lsls	r3, r3, #12
10014962:	430b      	orrs	r3, r1
10014964:	031a      	lsls	r2, r3, #12
10014966:	0b12      	lsrs	r2, r2, #12
10014968:	e744      	b.n	100147f4 <__aeabi_dadd+0x90>
1001496a:	3e01      	subs	r6, #1
1001496c:	2e00      	cmp	r6, #0
1001496e:	d16d      	bne.n	10014a4c <__aeabi_dadd+0x2e8>
10014970:	1aae      	subs	r6, r5, r2
10014972:	42b5      	cmp	r5, r6
10014974:	419b      	sbcs	r3, r3
10014976:	1a09      	subs	r1, r1, r0
10014978:	425b      	negs	r3, r3
1001497a:	1ac9      	subs	r1, r1, r3
1001497c:	0035      	movs	r5, r6
1001497e:	e775      	b.n	1001486c <__aeabi_dadd+0x108>
10014980:	0007      	movs	r7, r0
10014982:	4317      	orrs	r7, r2
10014984:	d100      	bne.n	10014988 <__aeabi_dadd+0x224>
10014986:	e716      	b.n	100147b6 <__aeabi_dadd+0x52>
10014988:	2301      	movs	r3, #1
1001498a:	425b      	negs	r3, r3
1001498c:	469c      	mov	ip, r3
1001498e:	44e3      	add	fp, ip
10014990:	465b      	mov	r3, fp
10014992:	2b00      	cmp	r3, #0
10014994:	d000      	beq.n	10014998 <__aeabi_dadd+0x234>
10014996:	e0e0      	b.n	10014b5a <__aeabi_dadd+0x3f6>
10014998:	18aa      	adds	r2, r5, r2
1001499a:	42aa      	cmp	r2, r5
1001499c:	419b      	sbcs	r3, r3
1001499e:	1809      	adds	r1, r1, r0
100149a0:	425b      	negs	r3, r3
100149a2:	1859      	adds	r1, r3, r1
100149a4:	0015      	movs	r5, r2
100149a6:	e7c5      	b.n	10014934 <__aeabi_dadd+0x1d0>
100149a8:	2e00      	cmp	r6, #0
100149aa:	d175      	bne.n	10014a98 <__aeabi_dadd+0x334>
100149ac:	1c66      	adds	r6, r4, #1
100149ae:	0576      	lsls	r6, r6, #21
100149b0:	0d76      	lsrs	r6, r6, #21
100149b2:	2e01      	cmp	r6, #1
100149b4:	dc00      	bgt.n	100149b8 <__aeabi_dadd+0x254>
100149b6:	e0f3      	b.n	10014ba0 <__aeabi_dadd+0x43c>
100149b8:	1aae      	subs	r6, r5, r2
100149ba:	46b0      	mov	r8, r6
100149bc:	4545      	cmp	r5, r8
100149be:	41bf      	sbcs	r7, r7
100149c0:	1a0e      	subs	r6, r1, r0
100149c2:	427f      	negs	r7, r7
100149c4:	1bf6      	subs	r6, r6, r7
100149c6:	0237      	lsls	r7, r6, #8
100149c8:	d400      	bmi.n	100149cc <__aeabi_dadd+0x268>
100149ca:	e08f      	b.n	10014aec <__aeabi_dadd+0x388>
100149cc:	1b55      	subs	r5, r2, r5
100149ce:	42aa      	cmp	r2, r5
100149d0:	41b6      	sbcs	r6, r6
100149d2:	1a41      	subs	r1, r0, r1
100149d4:	4276      	negs	r6, r6
100149d6:	1b8e      	subs	r6, r1, r6
100149d8:	469a      	mov	sl, r3
100149da:	e74b      	b.n	10014874 <__aeabi_dadd+0x110>
100149dc:	4656      	mov	r6, sl
100149de:	2200      	movs	r2, #0
100149e0:	2500      	movs	r5, #0
100149e2:	e707      	b.n	100147f4 <__aeabi_dadd+0x90>
100149e4:	0028      	movs	r0, r5
100149e6:	f001 fd8b 	bl	10016500 <__clzsi2>
100149ea:	3020      	adds	r0, #32
100149ec:	0003      	movs	r3, r0
100149ee:	3b08      	subs	r3, #8
100149f0:	2b1f      	cmp	r3, #31
100149f2:	dc00      	bgt.n	100149f6 <__aeabi_dadd+0x292>
100149f4:	e749      	b.n	1001488a <__aeabi_dadd+0x126>
100149f6:	002a      	movs	r2, r5
100149f8:	3828      	subs	r0, #40	; 0x28
100149fa:	4082      	lsls	r2, r0
100149fc:	2500      	movs	r5, #0
100149fe:	429c      	cmp	r4, r3
10014a00:	dc00      	bgt.n	10014a04 <__aeabi_dadd+0x2a0>
10014a02:	e74d      	b.n	100148a0 <__aeabi_dadd+0x13c>
10014a04:	493f      	ldr	r1, [pc, #252]	; (10014b04 <__aeabi_dadd+0x3a0>)
10014a06:	1ae4      	subs	r4, r4, r3
10014a08:	4011      	ands	r1, r2
10014a0a:	e6d4      	b.n	100147b6 <__aeabi_dadd+0x52>
10014a0c:	4302      	orrs	r2, r0
10014a0e:	1e50      	subs	r0, r2, #1
10014a10:	4182      	sbcs	r2, r0
10014a12:	b2d3      	uxtb	r3, r2
10014a14:	2200      	movs	r2, #0
10014a16:	e722      	b.n	1001485e <__aeabi_dadd+0xfa>
10014a18:	2b00      	cmp	r3, #0
10014a1a:	d000      	beq.n	10014a1e <__aeabi_dadd+0x2ba>
10014a1c:	e0f3      	b.n	10014c06 <__aeabi_dadd+0x4a2>
10014a1e:	1c63      	adds	r3, r4, #1
10014a20:	469c      	mov	ip, r3
10014a22:	055b      	lsls	r3, r3, #21
10014a24:	0d5b      	lsrs	r3, r3, #21
10014a26:	2b01      	cmp	r3, #1
10014a28:	dc00      	bgt.n	10014a2c <__aeabi_dadd+0x2c8>
10014a2a:	e09f      	b.n	10014b6c <__aeabi_dadd+0x408>
10014a2c:	4b34      	ldr	r3, [pc, #208]	; (10014b00 <__aeabi_dadd+0x39c>)
10014a2e:	459c      	cmp	ip, r3
10014a30:	d100      	bne.n	10014a34 <__aeabi_dadd+0x2d0>
10014a32:	e0c3      	b.n	10014bbc <__aeabi_dadd+0x458>
10014a34:	18aa      	adds	r2, r5, r2
10014a36:	1809      	adds	r1, r1, r0
10014a38:	42aa      	cmp	r2, r5
10014a3a:	4180      	sbcs	r0, r0
10014a3c:	4240      	negs	r0, r0
10014a3e:	1841      	adds	r1, r0, r1
10014a40:	07cd      	lsls	r5, r1, #31
10014a42:	0852      	lsrs	r2, r2, #1
10014a44:	4315      	orrs	r5, r2
10014a46:	0849      	lsrs	r1, r1, #1
10014a48:	4664      	mov	r4, ip
10014a4a:	e6b4      	b.n	100147b6 <__aeabi_dadd+0x52>
10014a4c:	4b2c      	ldr	r3, [pc, #176]	; (10014b00 <__aeabi_dadd+0x39c>)
10014a4e:	429c      	cmp	r4, r3
10014a50:	d000      	beq.n	10014a54 <__aeabi_dadd+0x2f0>
10014a52:	e6ec      	b.n	1001482e <__aeabi_dadd+0xca>
10014a54:	e6af      	b.n	100147b6 <__aeabi_dadd+0x52>
10014a56:	0011      	movs	r1, r2
10014a58:	3c1f      	subs	r4, #31
10014a5a:	40e1      	lsrs	r1, r4
10014a5c:	000c      	movs	r4, r1
10014a5e:	2b20      	cmp	r3, #32
10014a60:	d100      	bne.n	10014a64 <__aeabi_dadd+0x300>
10014a62:	e07f      	b.n	10014b64 <__aeabi_dadd+0x400>
10014a64:	2140      	movs	r1, #64	; 0x40
10014a66:	1acb      	subs	r3, r1, r3
10014a68:	409a      	lsls	r2, r3
10014a6a:	4315      	orrs	r5, r2
10014a6c:	1e6a      	subs	r2, r5, #1
10014a6e:	4195      	sbcs	r5, r2
10014a70:	2100      	movs	r1, #0
10014a72:	4325      	orrs	r5, r4
10014a74:	2400      	movs	r4, #0
10014a76:	e72d      	b.n	100148d4 <__aeabi_dadd+0x170>
10014a78:	0033      	movs	r3, r6
10014a7a:	0007      	movs	r7, r0
10014a7c:	3b20      	subs	r3, #32
10014a7e:	40df      	lsrs	r7, r3
10014a80:	003b      	movs	r3, r7
10014a82:	2e20      	cmp	r6, #32
10014a84:	d070      	beq.n	10014b68 <__aeabi_dadd+0x404>
10014a86:	2740      	movs	r7, #64	; 0x40
10014a88:	1bbe      	subs	r6, r7, r6
10014a8a:	40b0      	lsls	r0, r6
10014a8c:	4302      	orrs	r2, r0
10014a8e:	1e50      	subs	r0, r2, #1
10014a90:	4182      	sbcs	r2, r0
10014a92:	4313      	orrs	r3, r2
10014a94:	2200      	movs	r2, #0
10014a96:	e6e2      	b.n	1001485e <__aeabi_dadd+0xfa>
10014a98:	2c00      	cmp	r4, #0
10014a9a:	d04f      	beq.n	10014b3c <__aeabi_dadd+0x3d8>
10014a9c:	4c18      	ldr	r4, [pc, #96]	; (10014b00 <__aeabi_dadd+0x39c>)
10014a9e:	45a4      	cmp	ip, r4
10014aa0:	d100      	bne.n	10014aa4 <__aeabi_dadd+0x340>
10014aa2:	e0ab      	b.n	10014bfc <__aeabi_dadd+0x498>
10014aa4:	2480      	movs	r4, #128	; 0x80
10014aa6:	0424      	lsls	r4, r4, #16
10014aa8:	4276      	negs	r6, r6
10014aaa:	4321      	orrs	r1, r4
10014aac:	2e38      	cmp	r6, #56	; 0x38
10014aae:	dd00      	ble.n	10014ab2 <__aeabi_dadd+0x34e>
10014ab0:	e0df      	b.n	10014c72 <__aeabi_dadd+0x50e>
10014ab2:	2e1f      	cmp	r6, #31
10014ab4:	dd00      	ble.n	10014ab8 <__aeabi_dadd+0x354>
10014ab6:	e143      	b.n	10014d40 <__aeabi_dadd+0x5dc>
10014ab8:	2720      	movs	r7, #32
10014aba:	1bbc      	subs	r4, r7, r6
10014abc:	46a1      	mov	r9, r4
10014abe:	000c      	movs	r4, r1
10014ac0:	464f      	mov	r7, r9
10014ac2:	40bc      	lsls	r4, r7
10014ac4:	46a0      	mov	r8, r4
10014ac6:	002c      	movs	r4, r5
10014ac8:	4647      	mov	r7, r8
10014aca:	40f4      	lsrs	r4, r6
10014acc:	433c      	orrs	r4, r7
10014ace:	464f      	mov	r7, r9
10014ad0:	40bd      	lsls	r5, r7
10014ad2:	1e6f      	subs	r7, r5, #1
10014ad4:	41bd      	sbcs	r5, r7
10014ad6:	40f1      	lsrs	r1, r6
10014ad8:	432c      	orrs	r4, r5
10014ada:	1b15      	subs	r5, r2, r4
10014adc:	42aa      	cmp	r2, r5
10014ade:	4192      	sbcs	r2, r2
10014ae0:	1a41      	subs	r1, r0, r1
10014ae2:	4252      	negs	r2, r2
10014ae4:	1a89      	subs	r1, r1, r2
10014ae6:	4664      	mov	r4, ip
10014ae8:	469a      	mov	sl, r3
10014aea:	e6bf      	b.n	1001486c <__aeabi_dadd+0x108>
10014aec:	4641      	mov	r1, r8
10014aee:	4645      	mov	r5, r8
10014af0:	4331      	orrs	r1, r6
10014af2:	d000      	beq.n	10014af6 <__aeabi_dadd+0x392>
10014af4:	e6be      	b.n	10014874 <__aeabi_dadd+0x110>
10014af6:	2600      	movs	r6, #0
10014af8:	2400      	movs	r4, #0
10014afa:	2500      	movs	r5, #0
10014afc:	e6f2      	b.n	100148e4 <__aeabi_dadd+0x180>
10014afe:	46c0      	nop			; (mov r8, r8)
10014b00:	000007ff 	.word	0x000007ff
10014b04:	ff7fffff 	.word	0xff7fffff
10014b08:	800fffff 	.word	0x800fffff
10014b0c:	2b1f      	cmp	r3, #31
10014b0e:	dc59      	bgt.n	10014bc4 <__aeabi_dadd+0x460>
10014b10:	2720      	movs	r7, #32
10014b12:	1aff      	subs	r7, r7, r3
10014b14:	46bc      	mov	ip, r7
10014b16:	0007      	movs	r7, r0
10014b18:	4663      	mov	r3, ip
10014b1a:	409f      	lsls	r7, r3
10014b1c:	465b      	mov	r3, fp
10014b1e:	46b9      	mov	r9, r7
10014b20:	0017      	movs	r7, r2
10014b22:	40df      	lsrs	r7, r3
10014b24:	46b8      	mov	r8, r7
10014b26:	464f      	mov	r7, r9
10014b28:	4643      	mov	r3, r8
10014b2a:	431f      	orrs	r7, r3
10014b2c:	4663      	mov	r3, ip
10014b2e:	409a      	lsls	r2, r3
10014b30:	1e53      	subs	r3, r2, #1
10014b32:	419a      	sbcs	r2, r3
10014b34:	465b      	mov	r3, fp
10014b36:	433a      	orrs	r2, r7
10014b38:	40d8      	lsrs	r0, r3
10014b3a:	e6f4      	b.n	10014926 <__aeabi_dadd+0x1c2>
10014b3c:	000c      	movs	r4, r1
10014b3e:	432c      	orrs	r4, r5
10014b40:	d05c      	beq.n	10014bfc <__aeabi_dadd+0x498>
10014b42:	43f6      	mvns	r6, r6
10014b44:	2e00      	cmp	r6, #0
10014b46:	d155      	bne.n	10014bf4 <__aeabi_dadd+0x490>
10014b48:	1b55      	subs	r5, r2, r5
10014b4a:	42aa      	cmp	r2, r5
10014b4c:	41a4      	sbcs	r4, r4
10014b4e:	1a41      	subs	r1, r0, r1
10014b50:	4264      	negs	r4, r4
10014b52:	1b09      	subs	r1, r1, r4
10014b54:	469a      	mov	sl, r3
10014b56:	4664      	mov	r4, ip
10014b58:	e688      	b.n	1001486c <__aeabi_dadd+0x108>
10014b5a:	4f96      	ldr	r7, [pc, #600]	; (10014db4 <__aeabi_dadd+0x650>)
10014b5c:	42bc      	cmp	r4, r7
10014b5e:	d000      	beq.n	10014b62 <__aeabi_dadd+0x3fe>
10014b60:	e6d8      	b.n	10014914 <__aeabi_dadd+0x1b0>
10014b62:	e628      	b.n	100147b6 <__aeabi_dadd+0x52>
10014b64:	2200      	movs	r2, #0
10014b66:	e780      	b.n	10014a6a <__aeabi_dadd+0x306>
10014b68:	2000      	movs	r0, #0
10014b6a:	e78f      	b.n	10014a8c <__aeabi_dadd+0x328>
10014b6c:	000b      	movs	r3, r1
10014b6e:	432b      	orrs	r3, r5
10014b70:	2c00      	cmp	r4, #0
10014b72:	d000      	beq.n	10014b76 <__aeabi_dadd+0x412>
10014b74:	e0c2      	b.n	10014cfc <__aeabi_dadd+0x598>
10014b76:	2b00      	cmp	r3, #0
10014b78:	d100      	bne.n	10014b7c <__aeabi_dadd+0x418>
10014b7a:	e101      	b.n	10014d80 <__aeabi_dadd+0x61c>
10014b7c:	0003      	movs	r3, r0
10014b7e:	4313      	orrs	r3, r2
10014b80:	d100      	bne.n	10014b84 <__aeabi_dadd+0x420>
10014b82:	e618      	b.n	100147b6 <__aeabi_dadd+0x52>
10014b84:	18ab      	adds	r3, r5, r2
10014b86:	42ab      	cmp	r3, r5
10014b88:	41b6      	sbcs	r6, r6
10014b8a:	1809      	adds	r1, r1, r0
10014b8c:	4276      	negs	r6, r6
10014b8e:	1871      	adds	r1, r6, r1
10014b90:	020a      	lsls	r2, r1, #8
10014b92:	d400      	bmi.n	10014b96 <__aeabi_dadd+0x432>
10014b94:	e109      	b.n	10014daa <__aeabi_dadd+0x646>
10014b96:	4a88      	ldr	r2, [pc, #544]	; (10014db8 <__aeabi_dadd+0x654>)
10014b98:	001d      	movs	r5, r3
10014b9a:	4011      	ands	r1, r2
10014b9c:	4664      	mov	r4, ip
10014b9e:	e60a      	b.n	100147b6 <__aeabi_dadd+0x52>
10014ba0:	2c00      	cmp	r4, #0
10014ba2:	d15b      	bne.n	10014c5c <__aeabi_dadd+0x4f8>
10014ba4:	000e      	movs	r6, r1
10014ba6:	432e      	orrs	r6, r5
10014ba8:	d000      	beq.n	10014bac <__aeabi_dadd+0x448>
10014baa:	e08a      	b.n	10014cc2 <__aeabi_dadd+0x55e>
10014bac:	0001      	movs	r1, r0
10014bae:	4311      	orrs	r1, r2
10014bb0:	d100      	bne.n	10014bb4 <__aeabi_dadd+0x450>
10014bb2:	e0c2      	b.n	10014d3a <__aeabi_dadd+0x5d6>
10014bb4:	0001      	movs	r1, r0
10014bb6:	0015      	movs	r5, r2
10014bb8:	469a      	mov	sl, r3
10014bba:	e5fc      	b.n	100147b6 <__aeabi_dadd+0x52>
10014bbc:	4664      	mov	r4, ip
10014bbe:	2100      	movs	r1, #0
10014bc0:	2500      	movs	r5, #0
10014bc2:	e68f      	b.n	100148e4 <__aeabi_dadd+0x180>
10014bc4:	2320      	movs	r3, #32
10014bc6:	425b      	negs	r3, r3
10014bc8:	469c      	mov	ip, r3
10014bca:	44dc      	add	ip, fp
10014bcc:	4663      	mov	r3, ip
10014bce:	0007      	movs	r7, r0
10014bd0:	40df      	lsrs	r7, r3
10014bd2:	465b      	mov	r3, fp
10014bd4:	46bc      	mov	ip, r7
10014bd6:	2b20      	cmp	r3, #32
10014bd8:	d100      	bne.n	10014bdc <__aeabi_dadd+0x478>
10014bda:	e0ac      	b.n	10014d36 <__aeabi_dadd+0x5d2>
10014bdc:	2340      	movs	r3, #64	; 0x40
10014bde:	465f      	mov	r7, fp
10014be0:	1bdb      	subs	r3, r3, r7
10014be2:	4098      	lsls	r0, r3
10014be4:	4302      	orrs	r2, r0
10014be6:	1e50      	subs	r0, r2, #1
10014be8:	4182      	sbcs	r2, r0
10014bea:	4663      	mov	r3, ip
10014bec:	4313      	orrs	r3, r2
10014bee:	001a      	movs	r2, r3
10014bf0:	2000      	movs	r0, #0
10014bf2:	e698      	b.n	10014926 <__aeabi_dadd+0x1c2>
10014bf4:	4c6f      	ldr	r4, [pc, #444]	; (10014db4 <__aeabi_dadd+0x650>)
10014bf6:	45a4      	cmp	ip, r4
10014bf8:	d000      	beq.n	10014bfc <__aeabi_dadd+0x498>
10014bfa:	e757      	b.n	10014aac <__aeabi_dadd+0x348>
10014bfc:	0001      	movs	r1, r0
10014bfe:	0015      	movs	r5, r2
10014c00:	4664      	mov	r4, ip
10014c02:	469a      	mov	sl, r3
10014c04:	e5d7      	b.n	100147b6 <__aeabi_dadd+0x52>
10014c06:	2c00      	cmp	r4, #0
10014c08:	d139      	bne.n	10014c7e <__aeabi_dadd+0x51a>
10014c0a:	000c      	movs	r4, r1
10014c0c:	432c      	orrs	r4, r5
10014c0e:	d06e      	beq.n	10014cee <__aeabi_dadd+0x58a>
10014c10:	43db      	mvns	r3, r3
10014c12:	2b00      	cmp	r3, #0
10014c14:	d01a      	beq.n	10014c4c <__aeabi_dadd+0x4e8>
10014c16:	4c67      	ldr	r4, [pc, #412]	; (10014db4 <__aeabi_dadd+0x650>)
10014c18:	45a4      	cmp	ip, r4
10014c1a:	d068      	beq.n	10014cee <__aeabi_dadd+0x58a>
10014c1c:	2b38      	cmp	r3, #56	; 0x38
10014c1e:	dd00      	ble.n	10014c22 <__aeabi_dadd+0x4be>
10014c20:	e0a4      	b.n	10014d6c <__aeabi_dadd+0x608>
10014c22:	2b1f      	cmp	r3, #31
10014c24:	dd00      	ble.n	10014c28 <__aeabi_dadd+0x4c4>
10014c26:	e0ae      	b.n	10014d86 <__aeabi_dadd+0x622>
10014c28:	2420      	movs	r4, #32
10014c2a:	000f      	movs	r7, r1
10014c2c:	1ae4      	subs	r4, r4, r3
10014c2e:	40a7      	lsls	r7, r4
10014c30:	46b9      	mov	r9, r7
10014c32:	002f      	movs	r7, r5
10014c34:	40df      	lsrs	r7, r3
10014c36:	46b8      	mov	r8, r7
10014c38:	46a3      	mov	fp, r4
10014c3a:	464f      	mov	r7, r9
10014c3c:	4644      	mov	r4, r8
10014c3e:	4327      	orrs	r7, r4
10014c40:	465c      	mov	r4, fp
10014c42:	40a5      	lsls	r5, r4
10014c44:	1e6c      	subs	r4, r5, #1
10014c46:	41a5      	sbcs	r5, r4
10014c48:	40d9      	lsrs	r1, r3
10014c4a:	433d      	orrs	r5, r7
10014c4c:	18ad      	adds	r5, r5, r2
10014c4e:	4295      	cmp	r5, r2
10014c50:	419b      	sbcs	r3, r3
10014c52:	1809      	adds	r1, r1, r0
10014c54:	425b      	negs	r3, r3
10014c56:	1859      	adds	r1, r3, r1
10014c58:	4664      	mov	r4, ip
10014c5a:	e66b      	b.n	10014934 <__aeabi_dadd+0x1d0>
10014c5c:	000c      	movs	r4, r1
10014c5e:	432c      	orrs	r4, r5
10014c60:	d115      	bne.n	10014c8e <__aeabi_dadd+0x52a>
10014c62:	0001      	movs	r1, r0
10014c64:	4311      	orrs	r1, r2
10014c66:	d07b      	beq.n	10014d60 <__aeabi_dadd+0x5fc>
10014c68:	0001      	movs	r1, r0
10014c6a:	0015      	movs	r5, r2
10014c6c:	469a      	mov	sl, r3
10014c6e:	4c51      	ldr	r4, [pc, #324]	; (10014db4 <__aeabi_dadd+0x650>)
10014c70:	e5a1      	b.n	100147b6 <__aeabi_dadd+0x52>
10014c72:	430d      	orrs	r5, r1
10014c74:	1e69      	subs	r1, r5, #1
10014c76:	418d      	sbcs	r5, r1
10014c78:	2100      	movs	r1, #0
10014c7a:	b2ec      	uxtb	r4, r5
10014c7c:	e72d      	b.n	10014ada <__aeabi_dadd+0x376>
10014c7e:	4c4d      	ldr	r4, [pc, #308]	; (10014db4 <__aeabi_dadd+0x650>)
10014c80:	45a4      	cmp	ip, r4
10014c82:	d034      	beq.n	10014cee <__aeabi_dadd+0x58a>
10014c84:	2480      	movs	r4, #128	; 0x80
10014c86:	0424      	lsls	r4, r4, #16
10014c88:	425b      	negs	r3, r3
10014c8a:	4321      	orrs	r1, r4
10014c8c:	e7c6      	b.n	10014c1c <__aeabi_dadd+0x4b8>
10014c8e:	0004      	movs	r4, r0
10014c90:	4314      	orrs	r4, r2
10014c92:	d04e      	beq.n	10014d32 <__aeabi_dadd+0x5ce>
10014c94:	08ed      	lsrs	r5, r5, #3
10014c96:	074c      	lsls	r4, r1, #29
10014c98:	432c      	orrs	r4, r5
10014c9a:	2580      	movs	r5, #128	; 0x80
10014c9c:	08c9      	lsrs	r1, r1, #3
10014c9e:	032d      	lsls	r5, r5, #12
10014ca0:	4229      	tst	r1, r5
10014ca2:	d008      	beq.n	10014cb6 <__aeabi_dadd+0x552>
10014ca4:	08c6      	lsrs	r6, r0, #3
10014ca6:	422e      	tst	r6, r5
10014ca8:	d105      	bne.n	10014cb6 <__aeabi_dadd+0x552>
10014caa:	08d2      	lsrs	r2, r2, #3
10014cac:	0741      	lsls	r1, r0, #29
10014cae:	4311      	orrs	r1, r2
10014cb0:	000c      	movs	r4, r1
10014cb2:	469a      	mov	sl, r3
10014cb4:	0031      	movs	r1, r6
10014cb6:	0f62      	lsrs	r2, r4, #29
10014cb8:	00c9      	lsls	r1, r1, #3
10014cba:	00e5      	lsls	r5, r4, #3
10014cbc:	4311      	orrs	r1, r2
10014cbe:	4c3d      	ldr	r4, [pc, #244]	; (10014db4 <__aeabi_dadd+0x650>)
10014cc0:	e579      	b.n	100147b6 <__aeabi_dadd+0x52>
10014cc2:	0006      	movs	r6, r0
10014cc4:	4316      	orrs	r6, r2
10014cc6:	d100      	bne.n	10014cca <__aeabi_dadd+0x566>
10014cc8:	e575      	b.n	100147b6 <__aeabi_dadd+0x52>
10014cca:	1aae      	subs	r6, r5, r2
10014ccc:	46b0      	mov	r8, r6
10014cce:	4545      	cmp	r5, r8
10014cd0:	41bf      	sbcs	r7, r7
10014cd2:	1a0e      	subs	r6, r1, r0
10014cd4:	427f      	negs	r7, r7
10014cd6:	1bf6      	subs	r6, r6, r7
10014cd8:	0237      	lsls	r7, r6, #8
10014cda:	d400      	bmi.n	10014cde <__aeabi_dadd+0x57a>
10014cdc:	e5f4      	b.n	100148c8 <__aeabi_dadd+0x164>
10014cde:	1b55      	subs	r5, r2, r5
10014ce0:	42aa      	cmp	r2, r5
10014ce2:	41b6      	sbcs	r6, r6
10014ce4:	1a41      	subs	r1, r0, r1
10014ce6:	4276      	negs	r6, r6
10014ce8:	1b89      	subs	r1, r1, r6
10014cea:	469a      	mov	sl, r3
10014cec:	e563      	b.n	100147b6 <__aeabi_dadd+0x52>
10014cee:	0001      	movs	r1, r0
10014cf0:	0015      	movs	r5, r2
10014cf2:	4664      	mov	r4, ip
10014cf4:	e55f      	b.n	100147b6 <__aeabi_dadd+0x52>
10014cf6:	2200      	movs	r2, #0
10014cf8:	2500      	movs	r5, #0
10014cfa:	e57b      	b.n	100147f4 <__aeabi_dadd+0x90>
10014cfc:	2b00      	cmp	r3, #0
10014cfe:	d03b      	beq.n	10014d78 <__aeabi_dadd+0x614>
10014d00:	0003      	movs	r3, r0
10014d02:	4313      	orrs	r3, r2
10014d04:	d015      	beq.n	10014d32 <__aeabi_dadd+0x5ce>
10014d06:	08ed      	lsrs	r5, r5, #3
10014d08:	074b      	lsls	r3, r1, #29
10014d0a:	432b      	orrs	r3, r5
10014d0c:	2580      	movs	r5, #128	; 0x80
10014d0e:	08c9      	lsrs	r1, r1, #3
10014d10:	032d      	lsls	r5, r5, #12
10014d12:	4229      	tst	r1, r5
10014d14:	d007      	beq.n	10014d26 <__aeabi_dadd+0x5c2>
10014d16:	08c4      	lsrs	r4, r0, #3
10014d18:	422c      	tst	r4, r5
10014d1a:	d104      	bne.n	10014d26 <__aeabi_dadd+0x5c2>
10014d1c:	0741      	lsls	r1, r0, #29
10014d1e:	000b      	movs	r3, r1
10014d20:	0021      	movs	r1, r4
10014d22:	08d2      	lsrs	r2, r2, #3
10014d24:	4313      	orrs	r3, r2
10014d26:	00c9      	lsls	r1, r1, #3
10014d28:	0f5a      	lsrs	r2, r3, #29
10014d2a:	4311      	orrs	r1, r2
10014d2c:	00dd      	lsls	r5, r3, #3
10014d2e:	4c21      	ldr	r4, [pc, #132]	; (10014db4 <__aeabi_dadd+0x650>)
10014d30:	e541      	b.n	100147b6 <__aeabi_dadd+0x52>
10014d32:	4c20      	ldr	r4, [pc, #128]	; (10014db4 <__aeabi_dadd+0x650>)
10014d34:	e53f      	b.n	100147b6 <__aeabi_dadd+0x52>
10014d36:	2000      	movs	r0, #0
10014d38:	e754      	b.n	10014be4 <__aeabi_dadd+0x480>
10014d3a:	2600      	movs	r6, #0
10014d3c:	2500      	movs	r5, #0
10014d3e:	e5d1      	b.n	100148e4 <__aeabi_dadd+0x180>
10014d40:	0034      	movs	r4, r6
10014d42:	000f      	movs	r7, r1
10014d44:	3c20      	subs	r4, #32
10014d46:	40e7      	lsrs	r7, r4
10014d48:	003c      	movs	r4, r7
10014d4a:	2e20      	cmp	r6, #32
10014d4c:	d02b      	beq.n	10014da6 <__aeabi_dadd+0x642>
10014d4e:	2740      	movs	r7, #64	; 0x40
10014d50:	1bbe      	subs	r6, r7, r6
10014d52:	40b1      	lsls	r1, r6
10014d54:	430d      	orrs	r5, r1
10014d56:	1e69      	subs	r1, r5, #1
10014d58:	418d      	sbcs	r5, r1
10014d5a:	2100      	movs	r1, #0
10014d5c:	432c      	orrs	r4, r5
10014d5e:	e6bc      	b.n	10014ada <__aeabi_dadd+0x376>
10014d60:	2180      	movs	r1, #128	; 0x80
10014d62:	2600      	movs	r6, #0
10014d64:	0309      	lsls	r1, r1, #12
10014d66:	4c13      	ldr	r4, [pc, #76]	; (10014db4 <__aeabi_dadd+0x650>)
10014d68:	2500      	movs	r5, #0
10014d6a:	e5bb      	b.n	100148e4 <__aeabi_dadd+0x180>
10014d6c:	430d      	orrs	r5, r1
10014d6e:	1e69      	subs	r1, r5, #1
10014d70:	418d      	sbcs	r5, r1
10014d72:	2100      	movs	r1, #0
10014d74:	b2ed      	uxtb	r5, r5
10014d76:	e769      	b.n	10014c4c <__aeabi_dadd+0x4e8>
10014d78:	0001      	movs	r1, r0
10014d7a:	0015      	movs	r5, r2
10014d7c:	4c0d      	ldr	r4, [pc, #52]	; (10014db4 <__aeabi_dadd+0x650>)
10014d7e:	e51a      	b.n	100147b6 <__aeabi_dadd+0x52>
10014d80:	0001      	movs	r1, r0
10014d82:	0015      	movs	r5, r2
10014d84:	e517      	b.n	100147b6 <__aeabi_dadd+0x52>
10014d86:	001c      	movs	r4, r3
10014d88:	000f      	movs	r7, r1
10014d8a:	3c20      	subs	r4, #32
10014d8c:	40e7      	lsrs	r7, r4
10014d8e:	003c      	movs	r4, r7
10014d90:	2b20      	cmp	r3, #32
10014d92:	d00c      	beq.n	10014dae <__aeabi_dadd+0x64a>
10014d94:	2740      	movs	r7, #64	; 0x40
10014d96:	1afb      	subs	r3, r7, r3
10014d98:	4099      	lsls	r1, r3
10014d9a:	430d      	orrs	r5, r1
10014d9c:	1e69      	subs	r1, r5, #1
10014d9e:	418d      	sbcs	r5, r1
10014da0:	2100      	movs	r1, #0
10014da2:	4325      	orrs	r5, r4
10014da4:	e752      	b.n	10014c4c <__aeabi_dadd+0x4e8>
10014da6:	2100      	movs	r1, #0
10014da8:	e7d4      	b.n	10014d54 <__aeabi_dadd+0x5f0>
10014daa:	001d      	movs	r5, r3
10014dac:	e592      	b.n	100148d4 <__aeabi_dadd+0x170>
10014dae:	2100      	movs	r1, #0
10014db0:	e7f3      	b.n	10014d9a <__aeabi_dadd+0x636>
10014db2:	46c0      	nop			; (mov r8, r8)
10014db4:	000007ff 	.word	0x000007ff
10014db8:	ff7fffff 	.word	0xff7fffff

10014dbc <__aeabi_ddiv>:
10014dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
10014dbe:	4656      	mov	r6, sl
10014dc0:	464d      	mov	r5, r9
10014dc2:	4644      	mov	r4, r8
10014dc4:	465f      	mov	r7, fp
10014dc6:	b4f0      	push	{r4, r5, r6, r7}
10014dc8:	001d      	movs	r5, r3
10014dca:	030e      	lsls	r6, r1, #12
10014dcc:	004c      	lsls	r4, r1, #1
10014dce:	0fcb      	lsrs	r3, r1, #31
10014dd0:	b087      	sub	sp, #28
10014dd2:	0007      	movs	r7, r0
10014dd4:	4692      	mov	sl, r2
10014dd6:	4681      	mov	r9, r0
10014dd8:	0b36      	lsrs	r6, r6, #12
10014dda:	0d64      	lsrs	r4, r4, #21
10014ddc:	4698      	mov	r8, r3
10014dde:	d06a      	beq.n	10014eb6 <__aeabi_ddiv+0xfa>
10014de0:	4b6d      	ldr	r3, [pc, #436]	; (10014f98 <__aeabi_ddiv+0x1dc>)
10014de2:	429c      	cmp	r4, r3
10014de4:	d035      	beq.n	10014e52 <__aeabi_ddiv+0x96>
10014de6:	2280      	movs	r2, #128	; 0x80
10014de8:	0f43      	lsrs	r3, r0, #29
10014dea:	0412      	lsls	r2, r2, #16
10014dec:	4313      	orrs	r3, r2
10014dee:	00f6      	lsls	r6, r6, #3
10014df0:	431e      	orrs	r6, r3
10014df2:	00c3      	lsls	r3, r0, #3
10014df4:	4699      	mov	r9, r3
10014df6:	4b69      	ldr	r3, [pc, #420]	; (10014f9c <__aeabi_ddiv+0x1e0>)
10014df8:	2700      	movs	r7, #0
10014dfa:	469c      	mov	ip, r3
10014dfc:	2300      	movs	r3, #0
10014dfe:	4464      	add	r4, ip
10014e00:	9302      	str	r3, [sp, #8]
10014e02:	032b      	lsls	r3, r5, #12
10014e04:	0068      	lsls	r0, r5, #1
10014e06:	0b1b      	lsrs	r3, r3, #12
10014e08:	0fed      	lsrs	r5, r5, #31
10014e0a:	4651      	mov	r1, sl
10014e0c:	469b      	mov	fp, r3
10014e0e:	0d40      	lsrs	r0, r0, #21
10014e10:	9500      	str	r5, [sp, #0]
10014e12:	d100      	bne.n	10014e16 <__aeabi_ddiv+0x5a>
10014e14:	e078      	b.n	10014f08 <__aeabi_ddiv+0x14c>
10014e16:	4b60      	ldr	r3, [pc, #384]	; (10014f98 <__aeabi_ddiv+0x1dc>)
10014e18:	4298      	cmp	r0, r3
10014e1a:	d06c      	beq.n	10014ef6 <__aeabi_ddiv+0x13a>
10014e1c:	465b      	mov	r3, fp
10014e1e:	00da      	lsls	r2, r3, #3
10014e20:	0f4b      	lsrs	r3, r1, #29
10014e22:	2180      	movs	r1, #128	; 0x80
10014e24:	0409      	lsls	r1, r1, #16
10014e26:	430b      	orrs	r3, r1
10014e28:	4313      	orrs	r3, r2
10014e2a:	469b      	mov	fp, r3
10014e2c:	4653      	mov	r3, sl
10014e2e:	00d9      	lsls	r1, r3, #3
10014e30:	4b5a      	ldr	r3, [pc, #360]	; (10014f9c <__aeabi_ddiv+0x1e0>)
10014e32:	469c      	mov	ip, r3
10014e34:	2300      	movs	r3, #0
10014e36:	4460      	add	r0, ip
10014e38:	4642      	mov	r2, r8
10014e3a:	1a20      	subs	r0, r4, r0
10014e3c:	406a      	eors	r2, r5
10014e3e:	4692      	mov	sl, r2
10014e40:	9001      	str	r0, [sp, #4]
10014e42:	431f      	orrs	r7, r3
10014e44:	2f0f      	cmp	r7, #15
10014e46:	d900      	bls.n	10014e4a <__aeabi_ddiv+0x8e>
10014e48:	e0b0      	b.n	10014fac <__aeabi_ddiv+0x1f0>
10014e4a:	4855      	ldr	r0, [pc, #340]	; (10014fa0 <__aeabi_ddiv+0x1e4>)
10014e4c:	00bf      	lsls	r7, r7, #2
10014e4e:	59c0      	ldr	r0, [r0, r7]
10014e50:	4687      	mov	pc, r0
10014e52:	4337      	orrs	r7, r6
10014e54:	d000      	beq.n	10014e58 <__aeabi_ddiv+0x9c>
10014e56:	e088      	b.n	10014f6a <__aeabi_ddiv+0x1ae>
10014e58:	2300      	movs	r3, #0
10014e5a:	4699      	mov	r9, r3
10014e5c:	3302      	adds	r3, #2
10014e5e:	2708      	movs	r7, #8
10014e60:	2600      	movs	r6, #0
10014e62:	9302      	str	r3, [sp, #8]
10014e64:	e7cd      	b.n	10014e02 <__aeabi_ddiv+0x46>
10014e66:	4643      	mov	r3, r8
10014e68:	46b3      	mov	fp, r6
10014e6a:	4649      	mov	r1, r9
10014e6c:	9300      	str	r3, [sp, #0]
10014e6e:	9b02      	ldr	r3, [sp, #8]
10014e70:	9a00      	ldr	r2, [sp, #0]
10014e72:	4692      	mov	sl, r2
10014e74:	2b02      	cmp	r3, #2
10014e76:	d000      	beq.n	10014e7a <__aeabi_ddiv+0xbe>
10014e78:	e1bf      	b.n	100151fa <__aeabi_ddiv+0x43e>
10014e7a:	2100      	movs	r1, #0
10014e7c:	4653      	mov	r3, sl
10014e7e:	2201      	movs	r2, #1
10014e80:	2600      	movs	r6, #0
10014e82:	4689      	mov	r9, r1
10014e84:	401a      	ands	r2, r3
10014e86:	4b44      	ldr	r3, [pc, #272]	; (10014f98 <__aeabi_ddiv+0x1dc>)
10014e88:	2100      	movs	r1, #0
10014e8a:	0336      	lsls	r6, r6, #12
10014e8c:	0d0c      	lsrs	r4, r1, #20
10014e8e:	0524      	lsls	r4, r4, #20
10014e90:	0b36      	lsrs	r6, r6, #12
10014e92:	4326      	orrs	r6, r4
10014e94:	4c43      	ldr	r4, [pc, #268]	; (10014fa4 <__aeabi_ddiv+0x1e8>)
10014e96:	051b      	lsls	r3, r3, #20
10014e98:	4026      	ands	r6, r4
10014e9a:	431e      	orrs	r6, r3
10014e9c:	0076      	lsls	r6, r6, #1
10014e9e:	07d2      	lsls	r2, r2, #31
10014ea0:	0876      	lsrs	r6, r6, #1
10014ea2:	4316      	orrs	r6, r2
10014ea4:	4648      	mov	r0, r9
10014ea6:	0031      	movs	r1, r6
10014ea8:	b007      	add	sp, #28
10014eaa:	bc3c      	pop	{r2, r3, r4, r5}
10014eac:	4690      	mov	r8, r2
10014eae:	4699      	mov	r9, r3
10014eb0:	46a2      	mov	sl, r4
10014eb2:	46ab      	mov	fp, r5
10014eb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
10014eb6:	0033      	movs	r3, r6
10014eb8:	4303      	orrs	r3, r0
10014eba:	d04f      	beq.n	10014f5c <__aeabi_ddiv+0x1a0>
10014ebc:	2e00      	cmp	r6, #0
10014ebe:	d100      	bne.n	10014ec2 <__aeabi_ddiv+0x106>
10014ec0:	e1bc      	b.n	1001523c <__aeabi_ddiv+0x480>
10014ec2:	0030      	movs	r0, r6
10014ec4:	f001 fb1c 	bl	10016500 <__clzsi2>
10014ec8:	0003      	movs	r3, r0
10014eca:	3b0b      	subs	r3, #11
10014ecc:	2b1c      	cmp	r3, #28
10014ece:	dd00      	ble.n	10014ed2 <__aeabi_ddiv+0x116>
10014ed0:	e1ad      	b.n	1001522e <__aeabi_ddiv+0x472>
10014ed2:	221d      	movs	r2, #29
10014ed4:	0001      	movs	r1, r0
10014ed6:	1ad3      	subs	r3, r2, r3
10014ed8:	3908      	subs	r1, #8
10014eda:	003a      	movs	r2, r7
10014edc:	408f      	lsls	r7, r1
10014ede:	408e      	lsls	r6, r1
10014ee0:	40da      	lsrs	r2, r3
10014ee2:	46b9      	mov	r9, r7
10014ee4:	4316      	orrs	r6, r2
10014ee6:	4b30      	ldr	r3, [pc, #192]	; (10014fa8 <__aeabi_ddiv+0x1ec>)
10014ee8:	2700      	movs	r7, #0
10014eea:	469c      	mov	ip, r3
10014eec:	2300      	movs	r3, #0
10014eee:	4460      	add	r0, ip
10014ef0:	4244      	negs	r4, r0
10014ef2:	9302      	str	r3, [sp, #8]
10014ef4:	e785      	b.n	10014e02 <__aeabi_ddiv+0x46>
10014ef6:	4653      	mov	r3, sl
10014ef8:	465a      	mov	r2, fp
10014efa:	4313      	orrs	r3, r2
10014efc:	d12c      	bne.n	10014f58 <__aeabi_ddiv+0x19c>
10014efe:	2300      	movs	r3, #0
10014f00:	2100      	movs	r1, #0
10014f02:	469b      	mov	fp, r3
10014f04:	3302      	adds	r3, #2
10014f06:	e797      	b.n	10014e38 <__aeabi_ddiv+0x7c>
10014f08:	430b      	orrs	r3, r1
10014f0a:	d020      	beq.n	10014f4e <__aeabi_ddiv+0x192>
10014f0c:	465b      	mov	r3, fp
10014f0e:	2b00      	cmp	r3, #0
10014f10:	d100      	bne.n	10014f14 <__aeabi_ddiv+0x158>
10014f12:	e19e      	b.n	10015252 <__aeabi_ddiv+0x496>
10014f14:	4658      	mov	r0, fp
10014f16:	f001 faf3 	bl	10016500 <__clzsi2>
10014f1a:	0003      	movs	r3, r0
10014f1c:	3b0b      	subs	r3, #11
10014f1e:	2b1c      	cmp	r3, #28
10014f20:	dd00      	ble.n	10014f24 <__aeabi_ddiv+0x168>
10014f22:	e18f      	b.n	10015244 <__aeabi_ddiv+0x488>
10014f24:	0002      	movs	r2, r0
10014f26:	4659      	mov	r1, fp
10014f28:	3a08      	subs	r2, #8
10014f2a:	4091      	lsls	r1, r2
10014f2c:	468b      	mov	fp, r1
10014f2e:	211d      	movs	r1, #29
10014f30:	1acb      	subs	r3, r1, r3
10014f32:	4651      	mov	r1, sl
10014f34:	40d9      	lsrs	r1, r3
10014f36:	000b      	movs	r3, r1
10014f38:	4659      	mov	r1, fp
10014f3a:	430b      	orrs	r3, r1
10014f3c:	4651      	mov	r1, sl
10014f3e:	469b      	mov	fp, r3
10014f40:	4091      	lsls	r1, r2
10014f42:	4b19      	ldr	r3, [pc, #100]	; (10014fa8 <__aeabi_ddiv+0x1ec>)
10014f44:	469c      	mov	ip, r3
10014f46:	4460      	add	r0, ip
10014f48:	4240      	negs	r0, r0
10014f4a:	2300      	movs	r3, #0
10014f4c:	e774      	b.n	10014e38 <__aeabi_ddiv+0x7c>
10014f4e:	2300      	movs	r3, #0
10014f50:	2100      	movs	r1, #0
10014f52:	469b      	mov	fp, r3
10014f54:	3301      	adds	r3, #1
10014f56:	e76f      	b.n	10014e38 <__aeabi_ddiv+0x7c>
10014f58:	2303      	movs	r3, #3
10014f5a:	e76d      	b.n	10014e38 <__aeabi_ddiv+0x7c>
10014f5c:	2300      	movs	r3, #0
10014f5e:	4699      	mov	r9, r3
10014f60:	3301      	adds	r3, #1
10014f62:	2704      	movs	r7, #4
10014f64:	2600      	movs	r6, #0
10014f66:	9302      	str	r3, [sp, #8]
10014f68:	e74b      	b.n	10014e02 <__aeabi_ddiv+0x46>
10014f6a:	2303      	movs	r3, #3
10014f6c:	270c      	movs	r7, #12
10014f6e:	9302      	str	r3, [sp, #8]
10014f70:	e747      	b.n	10014e02 <__aeabi_ddiv+0x46>
10014f72:	2201      	movs	r2, #1
10014f74:	1ad5      	subs	r5, r2, r3
10014f76:	2d38      	cmp	r5, #56	; 0x38
10014f78:	dc00      	bgt.n	10014f7c <__aeabi_ddiv+0x1c0>
10014f7a:	e1b0      	b.n	100152de <__aeabi_ddiv+0x522>
10014f7c:	4653      	mov	r3, sl
10014f7e:	401a      	ands	r2, r3
10014f80:	2100      	movs	r1, #0
10014f82:	2300      	movs	r3, #0
10014f84:	2600      	movs	r6, #0
10014f86:	4689      	mov	r9, r1
10014f88:	e77e      	b.n	10014e88 <__aeabi_ddiv+0xcc>
10014f8a:	2300      	movs	r3, #0
10014f8c:	2680      	movs	r6, #128	; 0x80
10014f8e:	4699      	mov	r9, r3
10014f90:	2200      	movs	r2, #0
10014f92:	0336      	lsls	r6, r6, #12
10014f94:	4b00      	ldr	r3, [pc, #0]	; (10014f98 <__aeabi_ddiv+0x1dc>)
10014f96:	e777      	b.n	10014e88 <__aeabi_ddiv+0xcc>
10014f98:	000007ff 	.word	0x000007ff
10014f9c:	fffffc01 	.word	0xfffffc01
10014fa0:	10018788 	.word	0x10018788
10014fa4:	800fffff 	.word	0x800fffff
10014fa8:	000003f3 	.word	0x000003f3
10014fac:	455e      	cmp	r6, fp
10014fae:	d900      	bls.n	10014fb2 <__aeabi_ddiv+0x1f6>
10014fb0:	e172      	b.n	10015298 <__aeabi_ddiv+0x4dc>
10014fb2:	d100      	bne.n	10014fb6 <__aeabi_ddiv+0x1fa>
10014fb4:	e16d      	b.n	10015292 <__aeabi_ddiv+0x4d6>
10014fb6:	9b01      	ldr	r3, [sp, #4]
10014fb8:	464d      	mov	r5, r9
10014fba:	3b01      	subs	r3, #1
10014fbc:	9301      	str	r3, [sp, #4]
10014fbe:	2300      	movs	r3, #0
10014fc0:	0034      	movs	r4, r6
10014fc2:	9302      	str	r3, [sp, #8]
10014fc4:	465b      	mov	r3, fp
10014fc6:	021e      	lsls	r6, r3, #8
10014fc8:	0e0b      	lsrs	r3, r1, #24
10014fca:	431e      	orrs	r6, r3
10014fcc:	020b      	lsls	r3, r1, #8
10014fce:	9303      	str	r3, [sp, #12]
10014fd0:	0c33      	lsrs	r3, r6, #16
10014fd2:	4699      	mov	r9, r3
10014fd4:	0433      	lsls	r3, r6, #16
10014fd6:	0c1b      	lsrs	r3, r3, #16
10014fd8:	4649      	mov	r1, r9
10014fda:	0020      	movs	r0, r4
10014fdc:	9300      	str	r3, [sp, #0]
10014fde:	f7fe fad7 	bl	10013590 <__aeabi_uidiv>
10014fe2:	9b00      	ldr	r3, [sp, #0]
10014fe4:	0037      	movs	r7, r6
10014fe6:	4343      	muls	r3, r0
10014fe8:	0006      	movs	r6, r0
10014fea:	4649      	mov	r1, r9
10014fec:	0020      	movs	r0, r4
10014fee:	4698      	mov	r8, r3
10014ff0:	f7fe fb54 	bl	1001369c <__aeabi_uidivmod>
10014ff4:	0c2c      	lsrs	r4, r5, #16
10014ff6:	0409      	lsls	r1, r1, #16
10014ff8:	430c      	orrs	r4, r1
10014ffa:	45a0      	cmp	r8, r4
10014ffc:	d909      	bls.n	10015012 <__aeabi_ddiv+0x256>
10014ffe:	19e4      	adds	r4, r4, r7
10015000:	1e73      	subs	r3, r6, #1
10015002:	42a7      	cmp	r7, r4
10015004:	d900      	bls.n	10015008 <__aeabi_ddiv+0x24c>
10015006:	e15c      	b.n	100152c2 <__aeabi_ddiv+0x506>
10015008:	45a0      	cmp	r8, r4
1001500a:	d800      	bhi.n	1001500e <__aeabi_ddiv+0x252>
1001500c:	e159      	b.n	100152c2 <__aeabi_ddiv+0x506>
1001500e:	3e02      	subs	r6, #2
10015010:	19e4      	adds	r4, r4, r7
10015012:	4643      	mov	r3, r8
10015014:	1ae4      	subs	r4, r4, r3
10015016:	4649      	mov	r1, r9
10015018:	0020      	movs	r0, r4
1001501a:	f7fe fab9 	bl	10013590 <__aeabi_uidiv>
1001501e:	0003      	movs	r3, r0
10015020:	9a00      	ldr	r2, [sp, #0]
10015022:	4680      	mov	r8, r0
10015024:	4353      	muls	r3, r2
10015026:	4649      	mov	r1, r9
10015028:	0020      	movs	r0, r4
1001502a:	469b      	mov	fp, r3
1001502c:	f7fe fb36 	bl	1001369c <__aeabi_uidivmod>
10015030:	042a      	lsls	r2, r5, #16
10015032:	0409      	lsls	r1, r1, #16
10015034:	0c12      	lsrs	r2, r2, #16
10015036:	430a      	orrs	r2, r1
10015038:	4593      	cmp	fp, r2
1001503a:	d90d      	bls.n	10015058 <__aeabi_ddiv+0x29c>
1001503c:	4643      	mov	r3, r8
1001503e:	19d2      	adds	r2, r2, r7
10015040:	3b01      	subs	r3, #1
10015042:	4297      	cmp	r7, r2
10015044:	d900      	bls.n	10015048 <__aeabi_ddiv+0x28c>
10015046:	e13a      	b.n	100152be <__aeabi_ddiv+0x502>
10015048:	4593      	cmp	fp, r2
1001504a:	d800      	bhi.n	1001504e <__aeabi_ddiv+0x292>
1001504c:	e137      	b.n	100152be <__aeabi_ddiv+0x502>
1001504e:	2302      	movs	r3, #2
10015050:	425b      	negs	r3, r3
10015052:	469c      	mov	ip, r3
10015054:	19d2      	adds	r2, r2, r7
10015056:	44e0      	add	r8, ip
10015058:	465b      	mov	r3, fp
1001505a:	1ad2      	subs	r2, r2, r3
1001505c:	4643      	mov	r3, r8
1001505e:	0436      	lsls	r6, r6, #16
10015060:	4333      	orrs	r3, r6
10015062:	469b      	mov	fp, r3
10015064:	9903      	ldr	r1, [sp, #12]
10015066:	0c18      	lsrs	r0, r3, #16
10015068:	0c0b      	lsrs	r3, r1, #16
1001506a:	001d      	movs	r5, r3
1001506c:	9305      	str	r3, [sp, #20]
1001506e:	0409      	lsls	r1, r1, #16
10015070:	465b      	mov	r3, fp
10015072:	0c09      	lsrs	r1, r1, #16
10015074:	000c      	movs	r4, r1
10015076:	041b      	lsls	r3, r3, #16
10015078:	0c1b      	lsrs	r3, r3, #16
1001507a:	4344      	muls	r4, r0
1001507c:	9104      	str	r1, [sp, #16]
1001507e:	4359      	muls	r1, r3
10015080:	436b      	muls	r3, r5
10015082:	4368      	muls	r0, r5
10015084:	191b      	adds	r3, r3, r4
10015086:	0c0d      	lsrs	r5, r1, #16
10015088:	18eb      	adds	r3, r5, r3
1001508a:	429c      	cmp	r4, r3
1001508c:	d903      	bls.n	10015096 <__aeabi_ddiv+0x2da>
1001508e:	2480      	movs	r4, #128	; 0x80
10015090:	0264      	lsls	r4, r4, #9
10015092:	46a4      	mov	ip, r4
10015094:	4460      	add	r0, ip
10015096:	0c1c      	lsrs	r4, r3, #16
10015098:	0409      	lsls	r1, r1, #16
1001509a:	041b      	lsls	r3, r3, #16
1001509c:	0c09      	lsrs	r1, r1, #16
1001509e:	1820      	adds	r0, r4, r0
100150a0:	185d      	adds	r5, r3, r1
100150a2:	4282      	cmp	r2, r0
100150a4:	d200      	bcs.n	100150a8 <__aeabi_ddiv+0x2ec>
100150a6:	e0de      	b.n	10015266 <__aeabi_ddiv+0x4aa>
100150a8:	d100      	bne.n	100150ac <__aeabi_ddiv+0x2f0>
100150aa:	e0d7      	b.n	1001525c <__aeabi_ddiv+0x4a0>
100150ac:	1a16      	subs	r6, r2, r0
100150ae:	9b02      	ldr	r3, [sp, #8]
100150b0:	469c      	mov	ip, r3
100150b2:	1b5d      	subs	r5, r3, r5
100150b4:	45ac      	cmp	ip, r5
100150b6:	419b      	sbcs	r3, r3
100150b8:	425b      	negs	r3, r3
100150ba:	1af6      	subs	r6, r6, r3
100150bc:	42b7      	cmp	r7, r6
100150be:	d100      	bne.n	100150c2 <__aeabi_ddiv+0x306>
100150c0:	e106      	b.n	100152d0 <__aeabi_ddiv+0x514>
100150c2:	4649      	mov	r1, r9
100150c4:	0030      	movs	r0, r6
100150c6:	f7fe fa63 	bl	10013590 <__aeabi_uidiv>
100150ca:	9b00      	ldr	r3, [sp, #0]
100150cc:	0004      	movs	r4, r0
100150ce:	4343      	muls	r3, r0
100150d0:	4649      	mov	r1, r9
100150d2:	0030      	movs	r0, r6
100150d4:	4698      	mov	r8, r3
100150d6:	f7fe fae1 	bl	1001369c <__aeabi_uidivmod>
100150da:	0c2e      	lsrs	r6, r5, #16
100150dc:	0409      	lsls	r1, r1, #16
100150de:	430e      	orrs	r6, r1
100150e0:	45b0      	cmp	r8, r6
100150e2:	d909      	bls.n	100150f8 <__aeabi_ddiv+0x33c>
100150e4:	19f6      	adds	r6, r6, r7
100150e6:	1e63      	subs	r3, r4, #1
100150e8:	42b7      	cmp	r7, r6
100150ea:	d900      	bls.n	100150ee <__aeabi_ddiv+0x332>
100150ec:	e0f3      	b.n	100152d6 <__aeabi_ddiv+0x51a>
100150ee:	45b0      	cmp	r8, r6
100150f0:	d800      	bhi.n	100150f4 <__aeabi_ddiv+0x338>
100150f2:	e0f0      	b.n	100152d6 <__aeabi_ddiv+0x51a>
100150f4:	3c02      	subs	r4, #2
100150f6:	19f6      	adds	r6, r6, r7
100150f8:	4643      	mov	r3, r8
100150fa:	1af3      	subs	r3, r6, r3
100150fc:	4649      	mov	r1, r9
100150fe:	0018      	movs	r0, r3
10015100:	9302      	str	r3, [sp, #8]
10015102:	f7fe fa45 	bl	10013590 <__aeabi_uidiv>
10015106:	9b00      	ldr	r3, [sp, #0]
10015108:	0006      	movs	r6, r0
1001510a:	4343      	muls	r3, r0
1001510c:	4649      	mov	r1, r9
1001510e:	9802      	ldr	r0, [sp, #8]
10015110:	4698      	mov	r8, r3
10015112:	f7fe fac3 	bl	1001369c <__aeabi_uidivmod>
10015116:	042d      	lsls	r5, r5, #16
10015118:	0409      	lsls	r1, r1, #16
1001511a:	0c2d      	lsrs	r5, r5, #16
1001511c:	430d      	orrs	r5, r1
1001511e:	45a8      	cmp	r8, r5
10015120:	d909      	bls.n	10015136 <__aeabi_ddiv+0x37a>
10015122:	19ed      	adds	r5, r5, r7
10015124:	1e73      	subs	r3, r6, #1
10015126:	42af      	cmp	r7, r5
10015128:	d900      	bls.n	1001512c <__aeabi_ddiv+0x370>
1001512a:	e0d6      	b.n	100152da <__aeabi_ddiv+0x51e>
1001512c:	45a8      	cmp	r8, r5
1001512e:	d800      	bhi.n	10015132 <__aeabi_ddiv+0x376>
10015130:	e0d3      	b.n	100152da <__aeabi_ddiv+0x51e>
10015132:	3e02      	subs	r6, #2
10015134:	19ed      	adds	r5, r5, r7
10015136:	0424      	lsls	r4, r4, #16
10015138:	0021      	movs	r1, r4
1001513a:	4643      	mov	r3, r8
1001513c:	4331      	orrs	r1, r6
1001513e:	9e04      	ldr	r6, [sp, #16]
10015140:	9a05      	ldr	r2, [sp, #20]
10015142:	0030      	movs	r0, r6
10015144:	1aed      	subs	r5, r5, r3
10015146:	040b      	lsls	r3, r1, #16
10015148:	0c0c      	lsrs	r4, r1, #16
1001514a:	0c1b      	lsrs	r3, r3, #16
1001514c:	4358      	muls	r0, r3
1001514e:	4366      	muls	r6, r4
10015150:	4353      	muls	r3, r2
10015152:	4354      	muls	r4, r2
10015154:	199a      	adds	r2, r3, r6
10015156:	0c03      	lsrs	r3, r0, #16
10015158:	189b      	adds	r3, r3, r2
1001515a:	429e      	cmp	r6, r3
1001515c:	d903      	bls.n	10015166 <__aeabi_ddiv+0x3aa>
1001515e:	2280      	movs	r2, #128	; 0x80
10015160:	0252      	lsls	r2, r2, #9
10015162:	4694      	mov	ip, r2
10015164:	4464      	add	r4, ip
10015166:	0c1a      	lsrs	r2, r3, #16
10015168:	0400      	lsls	r0, r0, #16
1001516a:	041b      	lsls	r3, r3, #16
1001516c:	0c00      	lsrs	r0, r0, #16
1001516e:	1914      	adds	r4, r2, r4
10015170:	181b      	adds	r3, r3, r0
10015172:	42a5      	cmp	r5, r4
10015174:	d350      	bcc.n	10015218 <__aeabi_ddiv+0x45c>
10015176:	d04d      	beq.n	10015214 <__aeabi_ddiv+0x458>
10015178:	2301      	movs	r3, #1
1001517a:	4319      	orrs	r1, r3
1001517c:	4a96      	ldr	r2, [pc, #600]	; (100153d8 <__aeabi_ddiv+0x61c>)
1001517e:	9b01      	ldr	r3, [sp, #4]
10015180:	4694      	mov	ip, r2
10015182:	4463      	add	r3, ip
10015184:	2b00      	cmp	r3, #0
10015186:	dc00      	bgt.n	1001518a <__aeabi_ddiv+0x3ce>
10015188:	e6f3      	b.n	10014f72 <__aeabi_ddiv+0x1b6>
1001518a:	074a      	lsls	r2, r1, #29
1001518c:	d009      	beq.n	100151a2 <__aeabi_ddiv+0x3e6>
1001518e:	220f      	movs	r2, #15
10015190:	400a      	ands	r2, r1
10015192:	2a04      	cmp	r2, #4
10015194:	d005      	beq.n	100151a2 <__aeabi_ddiv+0x3e6>
10015196:	1d0a      	adds	r2, r1, #4
10015198:	428a      	cmp	r2, r1
1001519a:	4189      	sbcs	r1, r1
1001519c:	4249      	negs	r1, r1
1001519e:	448b      	add	fp, r1
100151a0:	0011      	movs	r1, r2
100151a2:	465a      	mov	r2, fp
100151a4:	01d2      	lsls	r2, r2, #7
100151a6:	d508      	bpl.n	100151ba <__aeabi_ddiv+0x3fe>
100151a8:	465a      	mov	r2, fp
100151aa:	4b8c      	ldr	r3, [pc, #560]	; (100153dc <__aeabi_ddiv+0x620>)
100151ac:	401a      	ands	r2, r3
100151ae:	4693      	mov	fp, r2
100151b0:	2280      	movs	r2, #128	; 0x80
100151b2:	00d2      	lsls	r2, r2, #3
100151b4:	4694      	mov	ip, r2
100151b6:	9b01      	ldr	r3, [sp, #4]
100151b8:	4463      	add	r3, ip
100151ba:	4a89      	ldr	r2, [pc, #548]	; (100153e0 <__aeabi_ddiv+0x624>)
100151bc:	4293      	cmp	r3, r2
100151be:	dd00      	ble.n	100151c2 <__aeabi_ddiv+0x406>
100151c0:	e65b      	b.n	10014e7a <__aeabi_ddiv+0xbe>
100151c2:	465a      	mov	r2, fp
100151c4:	08c9      	lsrs	r1, r1, #3
100151c6:	0750      	lsls	r0, r2, #29
100151c8:	4308      	orrs	r0, r1
100151ca:	0256      	lsls	r6, r2, #9
100151cc:	4651      	mov	r1, sl
100151ce:	2201      	movs	r2, #1
100151d0:	055b      	lsls	r3, r3, #21
100151d2:	4681      	mov	r9, r0
100151d4:	0b36      	lsrs	r6, r6, #12
100151d6:	0d5b      	lsrs	r3, r3, #21
100151d8:	400a      	ands	r2, r1
100151da:	e655      	b.n	10014e88 <__aeabi_ddiv+0xcc>
100151dc:	2380      	movs	r3, #128	; 0x80
100151de:	031b      	lsls	r3, r3, #12
100151e0:	421e      	tst	r6, r3
100151e2:	d011      	beq.n	10015208 <__aeabi_ddiv+0x44c>
100151e4:	465a      	mov	r2, fp
100151e6:	421a      	tst	r2, r3
100151e8:	d10e      	bne.n	10015208 <__aeabi_ddiv+0x44c>
100151ea:	465e      	mov	r6, fp
100151ec:	431e      	orrs	r6, r3
100151ee:	0336      	lsls	r6, r6, #12
100151f0:	0b36      	lsrs	r6, r6, #12
100151f2:	002a      	movs	r2, r5
100151f4:	4689      	mov	r9, r1
100151f6:	4b7b      	ldr	r3, [pc, #492]	; (100153e4 <__aeabi_ddiv+0x628>)
100151f8:	e646      	b.n	10014e88 <__aeabi_ddiv+0xcc>
100151fa:	2b03      	cmp	r3, #3
100151fc:	d100      	bne.n	10015200 <__aeabi_ddiv+0x444>
100151fe:	e0e1      	b.n	100153c4 <__aeabi_ddiv+0x608>
10015200:	2b01      	cmp	r3, #1
10015202:	d1bb      	bne.n	1001517c <__aeabi_ddiv+0x3c0>
10015204:	401a      	ands	r2, r3
10015206:	e6bb      	b.n	10014f80 <__aeabi_ddiv+0x1c4>
10015208:	431e      	orrs	r6, r3
1001520a:	0336      	lsls	r6, r6, #12
1001520c:	0b36      	lsrs	r6, r6, #12
1001520e:	4642      	mov	r2, r8
10015210:	4b74      	ldr	r3, [pc, #464]	; (100153e4 <__aeabi_ddiv+0x628>)
10015212:	e639      	b.n	10014e88 <__aeabi_ddiv+0xcc>
10015214:	2b00      	cmp	r3, #0
10015216:	d0b1      	beq.n	1001517c <__aeabi_ddiv+0x3c0>
10015218:	197d      	adds	r5, r7, r5
1001521a:	1e4a      	subs	r2, r1, #1
1001521c:	42af      	cmp	r7, r5
1001521e:	d952      	bls.n	100152c6 <__aeabi_ddiv+0x50a>
10015220:	0011      	movs	r1, r2
10015222:	42a5      	cmp	r5, r4
10015224:	d1a8      	bne.n	10015178 <__aeabi_ddiv+0x3bc>
10015226:	9a03      	ldr	r2, [sp, #12]
10015228:	429a      	cmp	r2, r3
1001522a:	d1a5      	bne.n	10015178 <__aeabi_ddiv+0x3bc>
1001522c:	e7a6      	b.n	1001517c <__aeabi_ddiv+0x3c0>
1001522e:	0003      	movs	r3, r0
10015230:	003e      	movs	r6, r7
10015232:	3b28      	subs	r3, #40	; 0x28
10015234:	409e      	lsls	r6, r3
10015236:	2300      	movs	r3, #0
10015238:	4699      	mov	r9, r3
1001523a:	e654      	b.n	10014ee6 <__aeabi_ddiv+0x12a>
1001523c:	f001 f960 	bl	10016500 <__clzsi2>
10015240:	3020      	adds	r0, #32
10015242:	e641      	b.n	10014ec8 <__aeabi_ddiv+0x10c>
10015244:	0003      	movs	r3, r0
10015246:	4652      	mov	r2, sl
10015248:	3b28      	subs	r3, #40	; 0x28
1001524a:	409a      	lsls	r2, r3
1001524c:	2100      	movs	r1, #0
1001524e:	4693      	mov	fp, r2
10015250:	e677      	b.n	10014f42 <__aeabi_ddiv+0x186>
10015252:	4650      	mov	r0, sl
10015254:	f001 f954 	bl	10016500 <__clzsi2>
10015258:	3020      	adds	r0, #32
1001525a:	e65e      	b.n	10014f1a <__aeabi_ddiv+0x15e>
1001525c:	9b02      	ldr	r3, [sp, #8]
1001525e:	2600      	movs	r6, #0
10015260:	42ab      	cmp	r3, r5
10015262:	d300      	bcc.n	10015266 <__aeabi_ddiv+0x4aa>
10015264:	e723      	b.n	100150ae <__aeabi_ddiv+0x2f2>
10015266:	9e03      	ldr	r6, [sp, #12]
10015268:	9902      	ldr	r1, [sp, #8]
1001526a:	46b4      	mov	ip, r6
1001526c:	4461      	add	r1, ip
1001526e:	4688      	mov	r8, r1
10015270:	45b0      	cmp	r8, r6
10015272:	41b6      	sbcs	r6, r6
10015274:	465b      	mov	r3, fp
10015276:	4276      	negs	r6, r6
10015278:	19f6      	adds	r6, r6, r7
1001527a:	18b2      	adds	r2, r6, r2
1001527c:	3b01      	subs	r3, #1
1001527e:	9102      	str	r1, [sp, #8]
10015280:	4297      	cmp	r7, r2
10015282:	d213      	bcs.n	100152ac <__aeabi_ddiv+0x4f0>
10015284:	4290      	cmp	r0, r2
10015286:	d84f      	bhi.n	10015328 <__aeabi_ddiv+0x56c>
10015288:	d100      	bne.n	1001528c <__aeabi_ddiv+0x4d0>
1001528a:	e08e      	b.n	100153aa <__aeabi_ddiv+0x5ee>
1001528c:	1a16      	subs	r6, r2, r0
1001528e:	469b      	mov	fp, r3
10015290:	e70d      	b.n	100150ae <__aeabi_ddiv+0x2f2>
10015292:	4589      	cmp	r9, r1
10015294:	d200      	bcs.n	10015298 <__aeabi_ddiv+0x4dc>
10015296:	e68e      	b.n	10014fb6 <__aeabi_ddiv+0x1fa>
10015298:	0874      	lsrs	r4, r6, #1
1001529a:	464b      	mov	r3, r9
1001529c:	07f6      	lsls	r6, r6, #31
1001529e:	0035      	movs	r5, r6
100152a0:	085b      	lsrs	r3, r3, #1
100152a2:	431d      	orrs	r5, r3
100152a4:	464b      	mov	r3, r9
100152a6:	07db      	lsls	r3, r3, #31
100152a8:	9302      	str	r3, [sp, #8]
100152aa:	e68b      	b.n	10014fc4 <__aeabi_ddiv+0x208>
100152ac:	4297      	cmp	r7, r2
100152ae:	d1ed      	bne.n	1001528c <__aeabi_ddiv+0x4d0>
100152b0:	9903      	ldr	r1, [sp, #12]
100152b2:	9c02      	ldr	r4, [sp, #8]
100152b4:	42a1      	cmp	r1, r4
100152b6:	d9e5      	bls.n	10015284 <__aeabi_ddiv+0x4c8>
100152b8:	1a3e      	subs	r6, r7, r0
100152ba:	469b      	mov	fp, r3
100152bc:	e6f7      	b.n	100150ae <__aeabi_ddiv+0x2f2>
100152be:	4698      	mov	r8, r3
100152c0:	e6ca      	b.n	10015058 <__aeabi_ddiv+0x29c>
100152c2:	001e      	movs	r6, r3
100152c4:	e6a5      	b.n	10015012 <__aeabi_ddiv+0x256>
100152c6:	42ac      	cmp	r4, r5
100152c8:	d83e      	bhi.n	10015348 <__aeabi_ddiv+0x58c>
100152ca:	d074      	beq.n	100153b6 <__aeabi_ddiv+0x5fa>
100152cc:	0011      	movs	r1, r2
100152ce:	e753      	b.n	10015178 <__aeabi_ddiv+0x3bc>
100152d0:	2101      	movs	r1, #1
100152d2:	4249      	negs	r1, r1
100152d4:	e752      	b.n	1001517c <__aeabi_ddiv+0x3c0>
100152d6:	001c      	movs	r4, r3
100152d8:	e70e      	b.n	100150f8 <__aeabi_ddiv+0x33c>
100152da:	001e      	movs	r6, r3
100152dc:	e72b      	b.n	10015136 <__aeabi_ddiv+0x37a>
100152de:	2d1f      	cmp	r5, #31
100152e0:	dc3c      	bgt.n	1001535c <__aeabi_ddiv+0x5a0>
100152e2:	2320      	movs	r3, #32
100152e4:	000a      	movs	r2, r1
100152e6:	4658      	mov	r0, fp
100152e8:	1b5b      	subs	r3, r3, r5
100152ea:	4098      	lsls	r0, r3
100152ec:	40ea      	lsrs	r2, r5
100152ee:	4099      	lsls	r1, r3
100152f0:	4302      	orrs	r2, r0
100152f2:	1e48      	subs	r0, r1, #1
100152f4:	4181      	sbcs	r1, r0
100152f6:	465e      	mov	r6, fp
100152f8:	4311      	orrs	r1, r2
100152fa:	40ee      	lsrs	r6, r5
100152fc:	074b      	lsls	r3, r1, #29
100152fe:	d009      	beq.n	10015314 <__aeabi_ddiv+0x558>
10015300:	230f      	movs	r3, #15
10015302:	400b      	ands	r3, r1
10015304:	2b04      	cmp	r3, #4
10015306:	d005      	beq.n	10015314 <__aeabi_ddiv+0x558>
10015308:	000b      	movs	r3, r1
1001530a:	1d19      	adds	r1, r3, #4
1001530c:	4299      	cmp	r1, r3
1001530e:	419b      	sbcs	r3, r3
10015310:	425b      	negs	r3, r3
10015312:	18f6      	adds	r6, r6, r3
10015314:	0233      	lsls	r3, r6, #8
10015316:	d53c      	bpl.n	10015392 <__aeabi_ddiv+0x5d6>
10015318:	4653      	mov	r3, sl
1001531a:	2201      	movs	r2, #1
1001531c:	2100      	movs	r1, #0
1001531e:	401a      	ands	r2, r3
10015320:	2600      	movs	r6, #0
10015322:	2301      	movs	r3, #1
10015324:	4689      	mov	r9, r1
10015326:	e5af      	b.n	10014e88 <__aeabi_ddiv+0xcc>
10015328:	2302      	movs	r3, #2
1001532a:	425b      	negs	r3, r3
1001532c:	469c      	mov	ip, r3
1001532e:	9c03      	ldr	r4, [sp, #12]
10015330:	44e3      	add	fp, ip
10015332:	46a4      	mov	ip, r4
10015334:	9b02      	ldr	r3, [sp, #8]
10015336:	4463      	add	r3, ip
10015338:	4698      	mov	r8, r3
1001533a:	45a0      	cmp	r8, r4
1001533c:	41b6      	sbcs	r6, r6
1001533e:	4276      	negs	r6, r6
10015340:	19f6      	adds	r6, r6, r7
10015342:	9302      	str	r3, [sp, #8]
10015344:	18b2      	adds	r2, r6, r2
10015346:	e6b1      	b.n	100150ac <__aeabi_ddiv+0x2f0>
10015348:	9803      	ldr	r0, [sp, #12]
1001534a:	1e8a      	subs	r2, r1, #2
1001534c:	0041      	lsls	r1, r0, #1
1001534e:	4281      	cmp	r1, r0
10015350:	41b6      	sbcs	r6, r6
10015352:	4276      	negs	r6, r6
10015354:	19f6      	adds	r6, r6, r7
10015356:	19ad      	adds	r5, r5, r6
10015358:	9103      	str	r1, [sp, #12]
1001535a:	e761      	b.n	10015220 <__aeabi_ddiv+0x464>
1001535c:	221f      	movs	r2, #31
1001535e:	4252      	negs	r2, r2
10015360:	1ad3      	subs	r3, r2, r3
10015362:	465a      	mov	r2, fp
10015364:	40da      	lsrs	r2, r3
10015366:	0013      	movs	r3, r2
10015368:	2d20      	cmp	r5, #32
1001536a:	d029      	beq.n	100153c0 <__aeabi_ddiv+0x604>
1001536c:	2240      	movs	r2, #64	; 0x40
1001536e:	4658      	mov	r0, fp
10015370:	1b55      	subs	r5, r2, r5
10015372:	40a8      	lsls	r0, r5
10015374:	4301      	orrs	r1, r0
10015376:	1e48      	subs	r0, r1, #1
10015378:	4181      	sbcs	r1, r0
1001537a:	2007      	movs	r0, #7
1001537c:	430b      	orrs	r3, r1
1001537e:	4018      	ands	r0, r3
10015380:	2600      	movs	r6, #0
10015382:	2800      	cmp	r0, #0
10015384:	d009      	beq.n	1001539a <__aeabi_ddiv+0x5de>
10015386:	220f      	movs	r2, #15
10015388:	2600      	movs	r6, #0
1001538a:	401a      	ands	r2, r3
1001538c:	0019      	movs	r1, r3
1001538e:	2a04      	cmp	r2, #4
10015390:	d1bb      	bne.n	1001530a <__aeabi_ddiv+0x54e>
10015392:	000b      	movs	r3, r1
10015394:	0770      	lsls	r0, r6, #29
10015396:	0276      	lsls	r6, r6, #9
10015398:	0b36      	lsrs	r6, r6, #12
1001539a:	08db      	lsrs	r3, r3, #3
1001539c:	4303      	orrs	r3, r0
1001539e:	4699      	mov	r9, r3
100153a0:	2201      	movs	r2, #1
100153a2:	4653      	mov	r3, sl
100153a4:	401a      	ands	r2, r3
100153a6:	2300      	movs	r3, #0
100153a8:	e56e      	b.n	10014e88 <__aeabi_ddiv+0xcc>
100153aa:	9902      	ldr	r1, [sp, #8]
100153ac:	428d      	cmp	r5, r1
100153ae:	d8bb      	bhi.n	10015328 <__aeabi_ddiv+0x56c>
100153b0:	469b      	mov	fp, r3
100153b2:	2600      	movs	r6, #0
100153b4:	e67b      	b.n	100150ae <__aeabi_ddiv+0x2f2>
100153b6:	9803      	ldr	r0, [sp, #12]
100153b8:	4298      	cmp	r0, r3
100153ba:	d3c5      	bcc.n	10015348 <__aeabi_ddiv+0x58c>
100153bc:	0011      	movs	r1, r2
100153be:	e732      	b.n	10015226 <__aeabi_ddiv+0x46a>
100153c0:	2000      	movs	r0, #0
100153c2:	e7d7      	b.n	10015374 <__aeabi_ddiv+0x5b8>
100153c4:	2680      	movs	r6, #128	; 0x80
100153c6:	465b      	mov	r3, fp
100153c8:	0336      	lsls	r6, r6, #12
100153ca:	431e      	orrs	r6, r3
100153cc:	0336      	lsls	r6, r6, #12
100153ce:	0b36      	lsrs	r6, r6, #12
100153d0:	9a00      	ldr	r2, [sp, #0]
100153d2:	4689      	mov	r9, r1
100153d4:	4b03      	ldr	r3, [pc, #12]	; (100153e4 <__aeabi_ddiv+0x628>)
100153d6:	e557      	b.n	10014e88 <__aeabi_ddiv+0xcc>
100153d8:	000003ff 	.word	0x000003ff
100153dc:	feffffff 	.word	0xfeffffff
100153e0:	000007fe 	.word	0x000007fe
100153e4:	000007ff 	.word	0x000007ff

100153e8 <__eqdf2>:
100153e8:	b5f0      	push	{r4, r5, r6, r7, lr}
100153ea:	465f      	mov	r7, fp
100153ec:	4656      	mov	r6, sl
100153ee:	464d      	mov	r5, r9
100153f0:	4644      	mov	r4, r8
100153f2:	b4f0      	push	{r4, r5, r6, r7}
100153f4:	031f      	lsls	r7, r3, #12
100153f6:	005c      	lsls	r4, r3, #1
100153f8:	0fdb      	lsrs	r3, r3, #31
100153fa:	469a      	mov	sl, r3
100153fc:	4b19      	ldr	r3, [pc, #100]	; (10015464 <__eqdf2+0x7c>)
100153fe:	030e      	lsls	r6, r1, #12
10015400:	004d      	lsls	r5, r1, #1
10015402:	0fc9      	lsrs	r1, r1, #31
10015404:	4680      	mov	r8, r0
10015406:	0b36      	lsrs	r6, r6, #12
10015408:	0d6d      	lsrs	r5, r5, #21
1001540a:	468b      	mov	fp, r1
1001540c:	4691      	mov	r9, r2
1001540e:	0b3f      	lsrs	r7, r7, #12
10015410:	0d64      	lsrs	r4, r4, #21
10015412:	429d      	cmp	r5, r3
10015414:	d019      	beq.n	1001544a <__eqdf2+0x62>
10015416:	4b13      	ldr	r3, [pc, #76]	; (10015464 <__eqdf2+0x7c>)
10015418:	429c      	cmp	r4, r3
1001541a:	d01b      	beq.n	10015454 <__eqdf2+0x6c>
1001541c:	2301      	movs	r3, #1
1001541e:	42a5      	cmp	r5, r4
10015420:	d006      	beq.n	10015430 <__eqdf2+0x48>
10015422:	0018      	movs	r0, r3
10015424:	bc3c      	pop	{r2, r3, r4, r5}
10015426:	4690      	mov	r8, r2
10015428:	4699      	mov	r9, r3
1001542a:	46a2      	mov	sl, r4
1001542c:	46ab      	mov	fp, r5
1001542e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10015430:	42be      	cmp	r6, r7
10015432:	d1f6      	bne.n	10015422 <__eqdf2+0x3a>
10015434:	45c8      	cmp	r8, r9
10015436:	d1f4      	bne.n	10015422 <__eqdf2+0x3a>
10015438:	45d3      	cmp	fp, sl
1001543a:	d010      	beq.n	1001545e <__eqdf2+0x76>
1001543c:	2d00      	cmp	r5, #0
1001543e:	d1f0      	bne.n	10015422 <__eqdf2+0x3a>
10015440:	4330      	orrs	r0, r6
10015442:	0003      	movs	r3, r0
10015444:	1e5a      	subs	r2, r3, #1
10015446:	4193      	sbcs	r3, r2
10015448:	e7eb      	b.n	10015422 <__eqdf2+0x3a>
1001544a:	0031      	movs	r1, r6
1001544c:	2301      	movs	r3, #1
1001544e:	4301      	orrs	r1, r0
10015450:	d1e7      	bne.n	10015422 <__eqdf2+0x3a>
10015452:	e7e0      	b.n	10015416 <__eqdf2+0x2e>
10015454:	433a      	orrs	r2, r7
10015456:	2301      	movs	r3, #1
10015458:	2a00      	cmp	r2, #0
1001545a:	d1e2      	bne.n	10015422 <__eqdf2+0x3a>
1001545c:	e7de      	b.n	1001541c <__eqdf2+0x34>
1001545e:	2300      	movs	r3, #0
10015460:	e7df      	b.n	10015422 <__eqdf2+0x3a>
10015462:	46c0      	nop			; (mov r8, r8)
10015464:	000007ff 	.word	0x000007ff

10015468 <__gedf2>:
10015468:	b5f0      	push	{r4, r5, r6, r7, lr}
1001546a:	465f      	mov	r7, fp
1001546c:	4644      	mov	r4, r8
1001546e:	4656      	mov	r6, sl
10015470:	464d      	mov	r5, r9
10015472:	b4f0      	push	{r4, r5, r6, r7}
10015474:	031f      	lsls	r7, r3, #12
10015476:	0b3c      	lsrs	r4, r7, #12
10015478:	4f2c      	ldr	r7, [pc, #176]	; (1001552c <__gedf2+0xc4>)
1001547a:	030e      	lsls	r6, r1, #12
1001547c:	004d      	lsls	r5, r1, #1
1001547e:	46a3      	mov	fp, r4
10015480:	005c      	lsls	r4, r3, #1
10015482:	4684      	mov	ip, r0
10015484:	0b36      	lsrs	r6, r6, #12
10015486:	0d6d      	lsrs	r5, r5, #21
10015488:	0fc9      	lsrs	r1, r1, #31
1001548a:	4690      	mov	r8, r2
1001548c:	0d64      	lsrs	r4, r4, #21
1001548e:	0fdb      	lsrs	r3, r3, #31
10015490:	42bd      	cmp	r5, r7
10015492:	d02b      	beq.n	100154ec <__gedf2+0x84>
10015494:	4f25      	ldr	r7, [pc, #148]	; (1001552c <__gedf2+0xc4>)
10015496:	42bc      	cmp	r4, r7
10015498:	d02e      	beq.n	100154f8 <__gedf2+0x90>
1001549a:	2d00      	cmp	r5, #0
1001549c:	d10e      	bne.n	100154bc <__gedf2+0x54>
1001549e:	4330      	orrs	r0, r6
100154a0:	0007      	movs	r7, r0
100154a2:	4681      	mov	r9, r0
100154a4:	4278      	negs	r0, r7
100154a6:	4178      	adcs	r0, r7
100154a8:	2c00      	cmp	r4, #0
100154aa:	d117      	bne.n	100154dc <__gedf2+0x74>
100154ac:	465f      	mov	r7, fp
100154ae:	433a      	orrs	r2, r7
100154b0:	d114      	bne.n	100154dc <__gedf2+0x74>
100154b2:	464b      	mov	r3, r9
100154b4:	2000      	movs	r0, #0
100154b6:	2b00      	cmp	r3, #0
100154b8:	d00a      	beq.n	100154d0 <__gedf2+0x68>
100154ba:	e006      	b.n	100154ca <__gedf2+0x62>
100154bc:	2c00      	cmp	r4, #0
100154be:	d102      	bne.n	100154c6 <__gedf2+0x5e>
100154c0:	4658      	mov	r0, fp
100154c2:	4302      	orrs	r2, r0
100154c4:	d001      	beq.n	100154ca <__gedf2+0x62>
100154c6:	4299      	cmp	r1, r3
100154c8:	d01a      	beq.n	10015500 <__gedf2+0x98>
100154ca:	2301      	movs	r3, #1
100154cc:	4248      	negs	r0, r1
100154ce:	4318      	orrs	r0, r3
100154d0:	bc3c      	pop	{r2, r3, r4, r5}
100154d2:	4690      	mov	r8, r2
100154d4:	4699      	mov	r9, r3
100154d6:	46a2      	mov	sl, r4
100154d8:	46ab      	mov	fp, r5
100154da:	bdf0      	pop	{r4, r5, r6, r7, pc}
100154dc:	2800      	cmp	r0, #0
100154de:	d0f2      	beq.n	100154c6 <__gedf2+0x5e>
100154e0:	4258      	negs	r0, r3
100154e2:	4158      	adcs	r0, r3
100154e4:	2201      	movs	r2, #1
100154e6:	4240      	negs	r0, r0
100154e8:	4310      	orrs	r0, r2
100154ea:	e7f1      	b.n	100154d0 <__gedf2+0x68>
100154ec:	0037      	movs	r7, r6
100154ee:	4307      	orrs	r7, r0
100154f0:	d0d0      	beq.n	10015494 <__gedf2+0x2c>
100154f2:	2002      	movs	r0, #2
100154f4:	4240      	negs	r0, r0
100154f6:	e7eb      	b.n	100154d0 <__gedf2+0x68>
100154f8:	465f      	mov	r7, fp
100154fa:	4317      	orrs	r7, r2
100154fc:	d0cd      	beq.n	1001549a <__gedf2+0x32>
100154fe:	e7f8      	b.n	100154f2 <__gedf2+0x8a>
10015500:	42a5      	cmp	r5, r4
10015502:	dce2      	bgt.n	100154ca <__gedf2+0x62>
10015504:	db05      	blt.n	10015512 <__gedf2+0xaa>
10015506:	455e      	cmp	r6, fp
10015508:	d8df      	bhi.n	100154ca <__gedf2+0x62>
1001550a:	d008      	beq.n	1001551e <__gedf2+0xb6>
1001550c:	2000      	movs	r0, #0
1001550e:	455e      	cmp	r6, fp
10015510:	d2de      	bcs.n	100154d0 <__gedf2+0x68>
10015512:	4248      	negs	r0, r1
10015514:	4148      	adcs	r0, r1
10015516:	2301      	movs	r3, #1
10015518:	4240      	negs	r0, r0
1001551a:	4318      	orrs	r0, r3
1001551c:	e7d8      	b.n	100154d0 <__gedf2+0x68>
1001551e:	45c4      	cmp	ip, r8
10015520:	d8d3      	bhi.n	100154ca <__gedf2+0x62>
10015522:	2000      	movs	r0, #0
10015524:	45c4      	cmp	ip, r8
10015526:	d3f4      	bcc.n	10015512 <__gedf2+0xaa>
10015528:	e7d2      	b.n	100154d0 <__gedf2+0x68>
1001552a:	46c0      	nop			; (mov r8, r8)
1001552c:	000007ff 	.word	0x000007ff

10015530 <__ledf2>:
10015530:	b5f0      	push	{r4, r5, r6, r7, lr}
10015532:	465f      	mov	r7, fp
10015534:	464d      	mov	r5, r9
10015536:	4644      	mov	r4, r8
10015538:	4656      	mov	r6, sl
1001553a:	b4f0      	push	{r4, r5, r6, r7}
1001553c:	031c      	lsls	r4, r3, #12
1001553e:	0b24      	lsrs	r4, r4, #12
10015540:	46a4      	mov	ip, r4
10015542:	4c2f      	ldr	r4, [pc, #188]	; (10015600 <__ledf2+0xd0>)
10015544:	030f      	lsls	r7, r1, #12
10015546:	004d      	lsls	r5, r1, #1
10015548:	005e      	lsls	r6, r3, #1
1001554a:	0fc9      	lsrs	r1, r1, #31
1001554c:	4680      	mov	r8, r0
1001554e:	0b3f      	lsrs	r7, r7, #12
10015550:	0d6d      	lsrs	r5, r5, #21
10015552:	468b      	mov	fp, r1
10015554:	4691      	mov	r9, r2
10015556:	0d76      	lsrs	r6, r6, #21
10015558:	0fdb      	lsrs	r3, r3, #31
1001555a:	42a5      	cmp	r5, r4
1001555c:	d020      	beq.n	100155a0 <__ledf2+0x70>
1001555e:	4c28      	ldr	r4, [pc, #160]	; (10015600 <__ledf2+0xd0>)
10015560:	42a6      	cmp	r6, r4
10015562:	d022      	beq.n	100155aa <__ledf2+0x7a>
10015564:	2d00      	cmp	r5, #0
10015566:	d112      	bne.n	1001558e <__ledf2+0x5e>
10015568:	4338      	orrs	r0, r7
1001556a:	4244      	negs	r4, r0
1001556c:	4144      	adcs	r4, r0
1001556e:	2e00      	cmp	r6, #0
10015570:	d020      	beq.n	100155b4 <__ledf2+0x84>
10015572:	2c00      	cmp	r4, #0
10015574:	d00d      	beq.n	10015592 <__ledf2+0x62>
10015576:	425c      	negs	r4, r3
10015578:	4163      	adcs	r3, r4
1001557a:	2401      	movs	r4, #1
1001557c:	425b      	negs	r3, r3
1001557e:	431c      	orrs	r4, r3
10015580:	0020      	movs	r0, r4
10015582:	bc3c      	pop	{r2, r3, r4, r5}
10015584:	4690      	mov	r8, r2
10015586:	4699      	mov	r9, r3
10015588:	46a2      	mov	sl, r4
1001558a:	46ab      	mov	fp, r5
1001558c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001558e:	2e00      	cmp	r6, #0
10015590:	d017      	beq.n	100155c2 <__ledf2+0x92>
10015592:	455b      	cmp	r3, fp
10015594:	d019      	beq.n	100155ca <__ledf2+0x9a>
10015596:	465b      	mov	r3, fp
10015598:	425c      	negs	r4, r3
1001559a:	2301      	movs	r3, #1
1001559c:	431c      	orrs	r4, r3
1001559e:	e7ef      	b.n	10015580 <__ledf2+0x50>
100155a0:	0039      	movs	r1, r7
100155a2:	2402      	movs	r4, #2
100155a4:	4301      	orrs	r1, r0
100155a6:	d1eb      	bne.n	10015580 <__ledf2+0x50>
100155a8:	e7d9      	b.n	1001555e <__ledf2+0x2e>
100155aa:	4661      	mov	r1, ip
100155ac:	2402      	movs	r4, #2
100155ae:	4311      	orrs	r1, r2
100155b0:	d1e6      	bne.n	10015580 <__ledf2+0x50>
100155b2:	e7d7      	b.n	10015564 <__ledf2+0x34>
100155b4:	4661      	mov	r1, ip
100155b6:	430a      	orrs	r2, r1
100155b8:	d1db      	bne.n	10015572 <__ledf2+0x42>
100155ba:	2400      	movs	r4, #0
100155bc:	2800      	cmp	r0, #0
100155be:	d0df      	beq.n	10015580 <__ledf2+0x50>
100155c0:	e7e9      	b.n	10015596 <__ledf2+0x66>
100155c2:	4661      	mov	r1, ip
100155c4:	430a      	orrs	r2, r1
100155c6:	d1e4      	bne.n	10015592 <__ledf2+0x62>
100155c8:	e7e5      	b.n	10015596 <__ledf2+0x66>
100155ca:	42b5      	cmp	r5, r6
100155cc:	dd03      	ble.n	100155d6 <__ledf2+0xa6>
100155ce:	2201      	movs	r2, #1
100155d0:	425c      	negs	r4, r3
100155d2:	4314      	orrs	r4, r2
100155d4:	e7d4      	b.n	10015580 <__ledf2+0x50>
100155d6:	42b5      	cmp	r5, r6
100155d8:	dbcd      	blt.n	10015576 <__ledf2+0x46>
100155da:	4567      	cmp	r7, ip
100155dc:	d8db      	bhi.n	10015596 <__ledf2+0x66>
100155de:	d009      	beq.n	100155f4 <__ledf2+0xc4>
100155e0:	2400      	movs	r4, #0
100155e2:	4567      	cmp	r7, ip
100155e4:	d2cc      	bcs.n	10015580 <__ledf2+0x50>
100155e6:	4659      	mov	r1, fp
100155e8:	424c      	negs	r4, r1
100155ea:	4161      	adcs	r1, r4
100155ec:	2401      	movs	r4, #1
100155ee:	4249      	negs	r1, r1
100155f0:	430c      	orrs	r4, r1
100155f2:	e7c5      	b.n	10015580 <__ledf2+0x50>
100155f4:	45c8      	cmp	r8, r9
100155f6:	d8ce      	bhi.n	10015596 <__ledf2+0x66>
100155f8:	2400      	movs	r4, #0
100155fa:	45c8      	cmp	r8, r9
100155fc:	d3f3      	bcc.n	100155e6 <__ledf2+0xb6>
100155fe:	e7bf      	b.n	10015580 <__ledf2+0x50>
10015600:	000007ff 	.word	0x000007ff

10015604 <__aeabi_dmul>:
10015604:	b5f0      	push	{r4, r5, r6, r7, lr}
10015606:	465f      	mov	r7, fp
10015608:	4656      	mov	r6, sl
1001560a:	464d      	mov	r5, r9
1001560c:	4644      	mov	r4, r8
1001560e:	b4f0      	push	{r4, r5, r6, r7}
10015610:	030d      	lsls	r5, r1, #12
10015612:	4699      	mov	r9, r3
10015614:	004e      	lsls	r6, r1, #1
10015616:	0b2b      	lsrs	r3, r5, #12
10015618:	b087      	sub	sp, #28
1001561a:	0007      	movs	r7, r0
1001561c:	4692      	mov	sl, r2
1001561e:	4680      	mov	r8, r0
10015620:	469b      	mov	fp, r3
10015622:	0d76      	lsrs	r6, r6, #21
10015624:	0fcc      	lsrs	r4, r1, #31
10015626:	2e00      	cmp	r6, #0
10015628:	d069      	beq.n	100156fe <__aeabi_dmul+0xfa>
1001562a:	4b6d      	ldr	r3, [pc, #436]	; (100157e0 <__aeabi_dmul+0x1dc>)
1001562c:	429e      	cmp	r6, r3
1001562e:	d035      	beq.n	1001569c <__aeabi_dmul+0x98>
10015630:	465b      	mov	r3, fp
10015632:	2280      	movs	r2, #128	; 0x80
10015634:	00dd      	lsls	r5, r3, #3
10015636:	0412      	lsls	r2, r2, #16
10015638:	0f43      	lsrs	r3, r0, #29
1001563a:	4313      	orrs	r3, r2
1001563c:	432b      	orrs	r3, r5
1001563e:	469b      	mov	fp, r3
10015640:	00c3      	lsls	r3, r0, #3
10015642:	4698      	mov	r8, r3
10015644:	4b67      	ldr	r3, [pc, #412]	; (100157e4 <__aeabi_dmul+0x1e0>)
10015646:	2700      	movs	r7, #0
10015648:	469c      	mov	ip, r3
1001564a:	2300      	movs	r3, #0
1001564c:	4466      	add	r6, ip
1001564e:	9301      	str	r3, [sp, #4]
10015650:	464a      	mov	r2, r9
10015652:	0315      	lsls	r5, r2, #12
10015654:	0050      	lsls	r0, r2, #1
10015656:	0fd2      	lsrs	r2, r2, #31
10015658:	4653      	mov	r3, sl
1001565a:	0b2d      	lsrs	r5, r5, #12
1001565c:	0d40      	lsrs	r0, r0, #21
1001565e:	4691      	mov	r9, r2
10015660:	d100      	bne.n	10015664 <__aeabi_dmul+0x60>
10015662:	e076      	b.n	10015752 <__aeabi_dmul+0x14e>
10015664:	4a5e      	ldr	r2, [pc, #376]	; (100157e0 <__aeabi_dmul+0x1dc>)
10015666:	4290      	cmp	r0, r2
10015668:	d06c      	beq.n	10015744 <__aeabi_dmul+0x140>
1001566a:	2280      	movs	r2, #128	; 0x80
1001566c:	0f5b      	lsrs	r3, r3, #29
1001566e:	0412      	lsls	r2, r2, #16
10015670:	4313      	orrs	r3, r2
10015672:	4a5c      	ldr	r2, [pc, #368]	; (100157e4 <__aeabi_dmul+0x1e0>)
10015674:	00ed      	lsls	r5, r5, #3
10015676:	4694      	mov	ip, r2
10015678:	431d      	orrs	r5, r3
1001567a:	4653      	mov	r3, sl
1001567c:	2200      	movs	r2, #0
1001567e:	00db      	lsls	r3, r3, #3
10015680:	4460      	add	r0, ip
10015682:	4649      	mov	r1, r9
10015684:	1836      	adds	r6, r6, r0
10015686:	1c70      	adds	r0, r6, #1
10015688:	4061      	eors	r1, r4
1001568a:	9002      	str	r0, [sp, #8]
1001568c:	4317      	orrs	r7, r2
1001568e:	2f0f      	cmp	r7, #15
10015690:	d900      	bls.n	10015694 <__aeabi_dmul+0x90>
10015692:	e0af      	b.n	100157f4 <__aeabi_dmul+0x1f0>
10015694:	4854      	ldr	r0, [pc, #336]	; (100157e8 <__aeabi_dmul+0x1e4>)
10015696:	00bf      	lsls	r7, r7, #2
10015698:	59c7      	ldr	r7, [r0, r7]
1001569a:	46bf      	mov	pc, r7
1001569c:	465b      	mov	r3, fp
1001569e:	431f      	orrs	r7, r3
100156a0:	d000      	beq.n	100156a4 <__aeabi_dmul+0xa0>
100156a2:	e088      	b.n	100157b6 <__aeabi_dmul+0x1b2>
100156a4:	2300      	movs	r3, #0
100156a6:	469b      	mov	fp, r3
100156a8:	4698      	mov	r8, r3
100156aa:	3302      	adds	r3, #2
100156ac:	2708      	movs	r7, #8
100156ae:	9301      	str	r3, [sp, #4]
100156b0:	e7ce      	b.n	10015650 <__aeabi_dmul+0x4c>
100156b2:	4649      	mov	r1, r9
100156b4:	2a02      	cmp	r2, #2
100156b6:	d06a      	beq.n	1001578e <__aeabi_dmul+0x18a>
100156b8:	2a03      	cmp	r2, #3
100156ba:	d100      	bne.n	100156be <__aeabi_dmul+0xba>
100156bc:	e209      	b.n	10015ad2 <__aeabi_dmul+0x4ce>
100156be:	2a01      	cmp	r2, #1
100156c0:	d000      	beq.n	100156c4 <__aeabi_dmul+0xc0>
100156c2:	e1bb      	b.n	10015a3c <__aeabi_dmul+0x438>
100156c4:	4011      	ands	r1, r2
100156c6:	2200      	movs	r2, #0
100156c8:	2300      	movs	r3, #0
100156ca:	2500      	movs	r5, #0
100156cc:	4690      	mov	r8, r2
100156ce:	b2cc      	uxtb	r4, r1
100156d0:	2100      	movs	r1, #0
100156d2:	032d      	lsls	r5, r5, #12
100156d4:	0d0a      	lsrs	r2, r1, #20
100156d6:	0512      	lsls	r2, r2, #20
100156d8:	0b2d      	lsrs	r5, r5, #12
100156da:	4315      	orrs	r5, r2
100156dc:	4a43      	ldr	r2, [pc, #268]	; (100157ec <__aeabi_dmul+0x1e8>)
100156de:	051b      	lsls	r3, r3, #20
100156e0:	4015      	ands	r5, r2
100156e2:	431d      	orrs	r5, r3
100156e4:	006d      	lsls	r5, r5, #1
100156e6:	07e4      	lsls	r4, r4, #31
100156e8:	086d      	lsrs	r5, r5, #1
100156ea:	4325      	orrs	r5, r4
100156ec:	4640      	mov	r0, r8
100156ee:	0029      	movs	r1, r5
100156f0:	b007      	add	sp, #28
100156f2:	bc3c      	pop	{r2, r3, r4, r5}
100156f4:	4690      	mov	r8, r2
100156f6:	4699      	mov	r9, r3
100156f8:	46a2      	mov	sl, r4
100156fa:	46ab      	mov	fp, r5
100156fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100156fe:	4303      	orrs	r3, r0
10015700:	d052      	beq.n	100157a8 <__aeabi_dmul+0x1a4>
10015702:	465b      	mov	r3, fp
10015704:	2b00      	cmp	r3, #0
10015706:	d100      	bne.n	1001570a <__aeabi_dmul+0x106>
10015708:	e18a      	b.n	10015a20 <__aeabi_dmul+0x41c>
1001570a:	4658      	mov	r0, fp
1001570c:	f000 fef8 	bl	10016500 <__clzsi2>
10015710:	0003      	movs	r3, r0
10015712:	3b0b      	subs	r3, #11
10015714:	2b1c      	cmp	r3, #28
10015716:	dd00      	ble.n	1001571a <__aeabi_dmul+0x116>
10015718:	e17b      	b.n	10015a12 <__aeabi_dmul+0x40e>
1001571a:	221d      	movs	r2, #29
1001571c:	1ad3      	subs	r3, r2, r3
1001571e:	003a      	movs	r2, r7
10015720:	0001      	movs	r1, r0
10015722:	465d      	mov	r5, fp
10015724:	40da      	lsrs	r2, r3
10015726:	3908      	subs	r1, #8
10015728:	408d      	lsls	r5, r1
1001572a:	0013      	movs	r3, r2
1001572c:	408f      	lsls	r7, r1
1001572e:	432b      	orrs	r3, r5
10015730:	469b      	mov	fp, r3
10015732:	46b8      	mov	r8, r7
10015734:	4b2e      	ldr	r3, [pc, #184]	; (100157f0 <__aeabi_dmul+0x1ec>)
10015736:	2700      	movs	r7, #0
10015738:	469c      	mov	ip, r3
1001573a:	2300      	movs	r3, #0
1001573c:	4460      	add	r0, ip
1001573e:	4246      	negs	r6, r0
10015740:	9301      	str	r3, [sp, #4]
10015742:	e785      	b.n	10015650 <__aeabi_dmul+0x4c>
10015744:	4652      	mov	r2, sl
10015746:	432a      	orrs	r2, r5
10015748:	d12c      	bne.n	100157a4 <__aeabi_dmul+0x1a0>
1001574a:	2500      	movs	r5, #0
1001574c:	2300      	movs	r3, #0
1001574e:	2202      	movs	r2, #2
10015750:	e797      	b.n	10015682 <__aeabi_dmul+0x7e>
10015752:	4652      	mov	r2, sl
10015754:	432a      	orrs	r2, r5
10015756:	d021      	beq.n	1001579c <__aeabi_dmul+0x198>
10015758:	2d00      	cmp	r5, #0
1001575a:	d100      	bne.n	1001575e <__aeabi_dmul+0x15a>
1001575c:	e154      	b.n	10015a08 <__aeabi_dmul+0x404>
1001575e:	0028      	movs	r0, r5
10015760:	f000 fece 	bl	10016500 <__clzsi2>
10015764:	0003      	movs	r3, r0
10015766:	3b0b      	subs	r3, #11
10015768:	2b1c      	cmp	r3, #28
1001576a:	dd00      	ble.n	1001576e <__aeabi_dmul+0x16a>
1001576c:	e146      	b.n	100159fc <__aeabi_dmul+0x3f8>
1001576e:	211d      	movs	r1, #29
10015770:	1acb      	subs	r3, r1, r3
10015772:	4651      	mov	r1, sl
10015774:	0002      	movs	r2, r0
10015776:	40d9      	lsrs	r1, r3
10015778:	4653      	mov	r3, sl
1001577a:	3a08      	subs	r2, #8
1001577c:	4095      	lsls	r5, r2
1001577e:	4093      	lsls	r3, r2
10015780:	430d      	orrs	r5, r1
10015782:	4a1b      	ldr	r2, [pc, #108]	; (100157f0 <__aeabi_dmul+0x1ec>)
10015784:	4694      	mov	ip, r2
10015786:	4460      	add	r0, ip
10015788:	4240      	negs	r0, r0
1001578a:	2200      	movs	r2, #0
1001578c:	e779      	b.n	10015682 <__aeabi_dmul+0x7e>
1001578e:	2401      	movs	r4, #1
10015790:	2200      	movs	r2, #0
10015792:	400c      	ands	r4, r1
10015794:	4b12      	ldr	r3, [pc, #72]	; (100157e0 <__aeabi_dmul+0x1dc>)
10015796:	2500      	movs	r5, #0
10015798:	4690      	mov	r8, r2
1001579a:	e799      	b.n	100156d0 <__aeabi_dmul+0xcc>
1001579c:	2500      	movs	r5, #0
1001579e:	2300      	movs	r3, #0
100157a0:	2201      	movs	r2, #1
100157a2:	e76e      	b.n	10015682 <__aeabi_dmul+0x7e>
100157a4:	2203      	movs	r2, #3
100157a6:	e76c      	b.n	10015682 <__aeabi_dmul+0x7e>
100157a8:	2300      	movs	r3, #0
100157aa:	469b      	mov	fp, r3
100157ac:	4698      	mov	r8, r3
100157ae:	3301      	adds	r3, #1
100157b0:	2704      	movs	r7, #4
100157b2:	9301      	str	r3, [sp, #4]
100157b4:	e74c      	b.n	10015650 <__aeabi_dmul+0x4c>
100157b6:	2303      	movs	r3, #3
100157b8:	270c      	movs	r7, #12
100157ba:	9301      	str	r3, [sp, #4]
100157bc:	e748      	b.n	10015650 <__aeabi_dmul+0x4c>
100157be:	2300      	movs	r3, #0
100157c0:	2580      	movs	r5, #128	; 0x80
100157c2:	4698      	mov	r8, r3
100157c4:	2400      	movs	r4, #0
100157c6:	032d      	lsls	r5, r5, #12
100157c8:	4b05      	ldr	r3, [pc, #20]	; (100157e0 <__aeabi_dmul+0x1dc>)
100157ca:	e781      	b.n	100156d0 <__aeabi_dmul+0xcc>
100157cc:	465d      	mov	r5, fp
100157ce:	4643      	mov	r3, r8
100157d0:	9a01      	ldr	r2, [sp, #4]
100157d2:	e76f      	b.n	100156b4 <__aeabi_dmul+0xb0>
100157d4:	465d      	mov	r5, fp
100157d6:	4643      	mov	r3, r8
100157d8:	0021      	movs	r1, r4
100157da:	9a01      	ldr	r2, [sp, #4]
100157dc:	e76a      	b.n	100156b4 <__aeabi_dmul+0xb0>
100157de:	46c0      	nop			; (mov r8, r8)
100157e0:	000007ff 	.word	0x000007ff
100157e4:	fffffc01 	.word	0xfffffc01
100157e8:	100187c8 	.word	0x100187c8
100157ec:	800fffff 	.word	0x800fffff
100157f0:	000003f3 	.word	0x000003f3
100157f4:	4642      	mov	r2, r8
100157f6:	0c12      	lsrs	r2, r2, #16
100157f8:	4691      	mov	r9, r2
100157fa:	0c1a      	lsrs	r2, r3, #16
100157fc:	4694      	mov	ip, r2
100157fe:	4642      	mov	r2, r8
10015800:	0417      	lsls	r7, r2, #16
10015802:	464a      	mov	r2, r9
10015804:	041b      	lsls	r3, r3, #16
10015806:	0c1b      	lsrs	r3, r3, #16
10015808:	435a      	muls	r2, r3
1001580a:	4660      	mov	r0, ip
1001580c:	4690      	mov	r8, r2
1001580e:	464a      	mov	r2, r9
10015810:	4342      	muls	r2, r0
10015812:	0010      	movs	r0, r2
10015814:	9203      	str	r2, [sp, #12]
10015816:	4662      	mov	r2, ip
10015818:	001c      	movs	r4, r3
1001581a:	0c3f      	lsrs	r7, r7, #16
1001581c:	437a      	muls	r2, r7
1001581e:	437c      	muls	r4, r7
10015820:	4442      	add	r2, r8
10015822:	9201      	str	r2, [sp, #4]
10015824:	0c22      	lsrs	r2, r4, #16
10015826:	4692      	mov	sl, r2
10015828:	9a01      	ldr	r2, [sp, #4]
1001582a:	4452      	add	r2, sl
1001582c:	4590      	cmp	r8, r2
1001582e:	d906      	bls.n	1001583e <__aeabi_dmul+0x23a>
10015830:	4682      	mov	sl, r0
10015832:	2080      	movs	r0, #128	; 0x80
10015834:	0240      	lsls	r0, r0, #9
10015836:	4680      	mov	r8, r0
10015838:	44c2      	add	sl, r8
1001583a:	4650      	mov	r0, sl
1001583c:	9003      	str	r0, [sp, #12]
1001583e:	0c10      	lsrs	r0, r2, #16
10015840:	9004      	str	r0, [sp, #16]
10015842:	4648      	mov	r0, r9
10015844:	0424      	lsls	r4, r4, #16
10015846:	0c24      	lsrs	r4, r4, #16
10015848:	0412      	lsls	r2, r2, #16
1001584a:	1912      	adds	r2, r2, r4
1001584c:	9205      	str	r2, [sp, #20]
1001584e:	0c2a      	lsrs	r2, r5, #16
10015850:	042d      	lsls	r5, r5, #16
10015852:	0c2d      	lsrs	r5, r5, #16
10015854:	4368      	muls	r0, r5
10015856:	002c      	movs	r4, r5
10015858:	4682      	mov	sl, r0
1001585a:	4648      	mov	r0, r9
1001585c:	437c      	muls	r4, r7
1001585e:	4350      	muls	r0, r2
10015860:	4681      	mov	r9, r0
10015862:	0c20      	lsrs	r0, r4, #16
10015864:	4680      	mov	r8, r0
10015866:	4357      	muls	r7, r2
10015868:	4457      	add	r7, sl
1001586a:	4447      	add	r7, r8
1001586c:	45ba      	cmp	sl, r7
1001586e:	d903      	bls.n	10015878 <__aeabi_dmul+0x274>
10015870:	2080      	movs	r0, #128	; 0x80
10015872:	0240      	lsls	r0, r0, #9
10015874:	4680      	mov	r8, r0
10015876:	44c1      	add	r9, r8
10015878:	0c38      	lsrs	r0, r7, #16
1001587a:	043f      	lsls	r7, r7, #16
1001587c:	46b8      	mov	r8, r7
1001587e:	4448      	add	r0, r9
10015880:	0424      	lsls	r4, r4, #16
10015882:	0c24      	lsrs	r4, r4, #16
10015884:	9001      	str	r0, [sp, #4]
10015886:	9804      	ldr	r0, [sp, #16]
10015888:	44a0      	add	r8, r4
1001588a:	4440      	add	r0, r8
1001588c:	9004      	str	r0, [sp, #16]
1001588e:	4658      	mov	r0, fp
10015890:	0c00      	lsrs	r0, r0, #16
10015892:	4681      	mov	r9, r0
10015894:	4658      	mov	r0, fp
10015896:	0404      	lsls	r4, r0, #16
10015898:	0c20      	lsrs	r0, r4, #16
1001589a:	4682      	mov	sl, r0
1001589c:	0007      	movs	r7, r0
1001589e:	4648      	mov	r0, r9
100158a0:	435f      	muls	r7, r3
100158a2:	464c      	mov	r4, r9
100158a4:	4343      	muls	r3, r0
100158a6:	4660      	mov	r0, ip
100158a8:	4360      	muls	r0, r4
100158aa:	4664      	mov	r4, ip
100158ac:	4683      	mov	fp, r0
100158ae:	4650      	mov	r0, sl
100158b0:	4344      	muls	r4, r0
100158b2:	0c38      	lsrs	r0, r7, #16
100158b4:	4684      	mov	ip, r0
100158b6:	18e4      	adds	r4, r4, r3
100158b8:	4464      	add	r4, ip
100158ba:	42a3      	cmp	r3, r4
100158bc:	d903      	bls.n	100158c6 <__aeabi_dmul+0x2c2>
100158be:	2380      	movs	r3, #128	; 0x80
100158c0:	025b      	lsls	r3, r3, #9
100158c2:	469c      	mov	ip, r3
100158c4:	44e3      	add	fp, ip
100158c6:	4648      	mov	r0, r9
100158c8:	043f      	lsls	r7, r7, #16
100158ca:	0c23      	lsrs	r3, r4, #16
100158cc:	0c3f      	lsrs	r7, r7, #16
100158ce:	0424      	lsls	r4, r4, #16
100158d0:	19e4      	adds	r4, r4, r7
100158d2:	4657      	mov	r7, sl
100158d4:	4368      	muls	r0, r5
100158d6:	436f      	muls	r7, r5
100158d8:	4684      	mov	ip, r0
100158da:	464d      	mov	r5, r9
100158dc:	4650      	mov	r0, sl
100158de:	4355      	muls	r5, r2
100158e0:	4342      	muls	r2, r0
100158e2:	0c38      	lsrs	r0, r7, #16
100158e4:	4681      	mov	r9, r0
100158e6:	4462      	add	r2, ip
100158e8:	444a      	add	r2, r9
100158ea:	445b      	add	r3, fp
100158ec:	4594      	cmp	ip, r2
100158ee:	d903      	bls.n	100158f8 <__aeabi_dmul+0x2f4>
100158f0:	2080      	movs	r0, #128	; 0x80
100158f2:	0240      	lsls	r0, r0, #9
100158f4:	4684      	mov	ip, r0
100158f6:	4465      	add	r5, ip
100158f8:	9803      	ldr	r0, [sp, #12]
100158fa:	043f      	lsls	r7, r7, #16
100158fc:	4683      	mov	fp, r0
100158fe:	9804      	ldr	r0, [sp, #16]
10015900:	0c3f      	lsrs	r7, r7, #16
10015902:	4684      	mov	ip, r0
10015904:	44e3      	add	fp, ip
10015906:	45c3      	cmp	fp, r8
10015908:	4180      	sbcs	r0, r0
1001590a:	4240      	negs	r0, r0
1001590c:	4682      	mov	sl, r0
1001590e:	0410      	lsls	r0, r2, #16
10015910:	4684      	mov	ip, r0
10015912:	9801      	ldr	r0, [sp, #4]
10015914:	4467      	add	r7, ip
10015916:	4684      	mov	ip, r0
10015918:	4467      	add	r7, ip
1001591a:	44a3      	add	fp, r4
1001591c:	46bc      	mov	ip, r7
1001591e:	45a3      	cmp	fp, r4
10015920:	41a4      	sbcs	r4, r4
10015922:	4699      	mov	r9, r3
10015924:	44d4      	add	ip, sl
10015926:	4264      	negs	r4, r4
10015928:	4287      	cmp	r7, r0
1001592a:	41bf      	sbcs	r7, r7
1001592c:	45d4      	cmp	ip, sl
1001592e:	4180      	sbcs	r0, r0
10015930:	44e1      	add	r9, ip
10015932:	46a0      	mov	r8, r4
10015934:	4599      	cmp	r9, r3
10015936:	419b      	sbcs	r3, r3
10015938:	427f      	negs	r7, r7
1001593a:	4240      	negs	r0, r0
1001593c:	44c8      	add	r8, r9
1001593e:	4307      	orrs	r7, r0
10015940:	0c12      	lsrs	r2, r2, #16
10015942:	18ba      	adds	r2, r7, r2
10015944:	45a0      	cmp	r8, r4
10015946:	41a4      	sbcs	r4, r4
10015948:	425f      	negs	r7, r3
1001594a:	003b      	movs	r3, r7
1001594c:	4264      	negs	r4, r4
1001594e:	4323      	orrs	r3, r4
10015950:	18d7      	adds	r7, r2, r3
10015952:	4643      	mov	r3, r8
10015954:	197d      	adds	r5, r7, r5
10015956:	0ddb      	lsrs	r3, r3, #23
10015958:	026d      	lsls	r5, r5, #9
1001595a:	431d      	orrs	r5, r3
1001595c:	465b      	mov	r3, fp
1001595e:	025a      	lsls	r2, r3, #9
10015960:	9b05      	ldr	r3, [sp, #20]
10015962:	431a      	orrs	r2, r3
10015964:	1e53      	subs	r3, r2, #1
10015966:	419a      	sbcs	r2, r3
10015968:	465b      	mov	r3, fp
1001596a:	0ddb      	lsrs	r3, r3, #23
1001596c:	431a      	orrs	r2, r3
1001596e:	4643      	mov	r3, r8
10015970:	025b      	lsls	r3, r3, #9
10015972:	4313      	orrs	r3, r2
10015974:	01ea      	lsls	r2, r5, #7
10015976:	d507      	bpl.n	10015988 <__aeabi_dmul+0x384>
10015978:	2201      	movs	r2, #1
1001597a:	085c      	lsrs	r4, r3, #1
1001597c:	4013      	ands	r3, r2
1001597e:	4323      	orrs	r3, r4
10015980:	07ea      	lsls	r2, r5, #31
10015982:	9e02      	ldr	r6, [sp, #8]
10015984:	4313      	orrs	r3, r2
10015986:	086d      	lsrs	r5, r5, #1
10015988:	4a57      	ldr	r2, [pc, #348]	; (10015ae8 <__aeabi_dmul+0x4e4>)
1001598a:	18b2      	adds	r2, r6, r2
1001598c:	2a00      	cmp	r2, #0
1001598e:	dd4b      	ble.n	10015a28 <__aeabi_dmul+0x424>
10015990:	0758      	lsls	r0, r3, #29
10015992:	d009      	beq.n	100159a8 <__aeabi_dmul+0x3a4>
10015994:	200f      	movs	r0, #15
10015996:	4018      	ands	r0, r3
10015998:	2804      	cmp	r0, #4
1001599a:	d005      	beq.n	100159a8 <__aeabi_dmul+0x3a4>
1001599c:	1d18      	adds	r0, r3, #4
1001599e:	4298      	cmp	r0, r3
100159a0:	419b      	sbcs	r3, r3
100159a2:	425b      	negs	r3, r3
100159a4:	18ed      	adds	r5, r5, r3
100159a6:	0003      	movs	r3, r0
100159a8:	01e8      	lsls	r0, r5, #7
100159aa:	d504      	bpl.n	100159b6 <__aeabi_dmul+0x3b2>
100159ac:	4a4f      	ldr	r2, [pc, #316]	; (10015aec <__aeabi_dmul+0x4e8>)
100159ae:	4015      	ands	r5, r2
100159b0:	2280      	movs	r2, #128	; 0x80
100159b2:	00d2      	lsls	r2, r2, #3
100159b4:	18b2      	adds	r2, r6, r2
100159b6:	484e      	ldr	r0, [pc, #312]	; (10015af0 <__aeabi_dmul+0x4ec>)
100159b8:	4282      	cmp	r2, r0
100159ba:	dd00      	ble.n	100159be <__aeabi_dmul+0x3ba>
100159bc:	e6e7      	b.n	1001578e <__aeabi_dmul+0x18a>
100159be:	2401      	movs	r4, #1
100159c0:	08db      	lsrs	r3, r3, #3
100159c2:	0768      	lsls	r0, r5, #29
100159c4:	4318      	orrs	r0, r3
100159c6:	026d      	lsls	r5, r5, #9
100159c8:	0553      	lsls	r3, r2, #21
100159ca:	4680      	mov	r8, r0
100159cc:	0b2d      	lsrs	r5, r5, #12
100159ce:	0d5b      	lsrs	r3, r3, #21
100159d0:	400c      	ands	r4, r1
100159d2:	e67d      	b.n	100156d0 <__aeabi_dmul+0xcc>
100159d4:	2280      	movs	r2, #128	; 0x80
100159d6:	4659      	mov	r1, fp
100159d8:	0312      	lsls	r2, r2, #12
100159da:	4211      	tst	r1, r2
100159dc:	d008      	beq.n	100159f0 <__aeabi_dmul+0x3ec>
100159de:	4215      	tst	r5, r2
100159e0:	d106      	bne.n	100159f0 <__aeabi_dmul+0x3ec>
100159e2:	4315      	orrs	r5, r2
100159e4:	032d      	lsls	r5, r5, #12
100159e6:	4698      	mov	r8, r3
100159e8:	0b2d      	lsrs	r5, r5, #12
100159ea:	464c      	mov	r4, r9
100159ec:	4b41      	ldr	r3, [pc, #260]	; (10015af4 <__aeabi_dmul+0x4f0>)
100159ee:	e66f      	b.n	100156d0 <__aeabi_dmul+0xcc>
100159f0:	465d      	mov	r5, fp
100159f2:	4315      	orrs	r5, r2
100159f4:	032d      	lsls	r5, r5, #12
100159f6:	0b2d      	lsrs	r5, r5, #12
100159f8:	4b3e      	ldr	r3, [pc, #248]	; (10015af4 <__aeabi_dmul+0x4f0>)
100159fa:	e669      	b.n	100156d0 <__aeabi_dmul+0xcc>
100159fc:	0003      	movs	r3, r0
100159fe:	4655      	mov	r5, sl
10015a00:	3b28      	subs	r3, #40	; 0x28
10015a02:	409d      	lsls	r5, r3
10015a04:	2300      	movs	r3, #0
10015a06:	e6bc      	b.n	10015782 <__aeabi_dmul+0x17e>
10015a08:	4650      	mov	r0, sl
10015a0a:	f000 fd79 	bl	10016500 <__clzsi2>
10015a0e:	3020      	adds	r0, #32
10015a10:	e6a8      	b.n	10015764 <__aeabi_dmul+0x160>
10015a12:	0003      	movs	r3, r0
10015a14:	3b28      	subs	r3, #40	; 0x28
10015a16:	409f      	lsls	r7, r3
10015a18:	2300      	movs	r3, #0
10015a1a:	46bb      	mov	fp, r7
10015a1c:	4698      	mov	r8, r3
10015a1e:	e689      	b.n	10015734 <__aeabi_dmul+0x130>
10015a20:	f000 fd6e 	bl	10016500 <__clzsi2>
10015a24:	3020      	adds	r0, #32
10015a26:	e673      	b.n	10015710 <__aeabi_dmul+0x10c>
10015a28:	2401      	movs	r4, #1
10015a2a:	1aa6      	subs	r6, r4, r2
10015a2c:	2e38      	cmp	r6, #56	; 0x38
10015a2e:	dd07      	ble.n	10015a40 <__aeabi_dmul+0x43c>
10015a30:	2200      	movs	r2, #0
10015a32:	400c      	ands	r4, r1
10015a34:	2300      	movs	r3, #0
10015a36:	2500      	movs	r5, #0
10015a38:	4690      	mov	r8, r2
10015a3a:	e649      	b.n	100156d0 <__aeabi_dmul+0xcc>
10015a3c:	9e02      	ldr	r6, [sp, #8]
10015a3e:	e7a3      	b.n	10015988 <__aeabi_dmul+0x384>
10015a40:	2e1f      	cmp	r6, #31
10015a42:	dc20      	bgt.n	10015a86 <__aeabi_dmul+0x482>
10015a44:	2220      	movs	r2, #32
10015a46:	002c      	movs	r4, r5
10015a48:	0018      	movs	r0, r3
10015a4a:	1b92      	subs	r2, r2, r6
10015a4c:	40f0      	lsrs	r0, r6
10015a4e:	4094      	lsls	r4, r2
10015a50:	4093      	lsls	r3, r2
10015a52:	4304      	orrs	r4, r0
10015a54:	1e58      	subs	r0, r3, #1
10015a56:	4183      	sbcs	r3, r0
10015a58:	431c      	orrs	r4, r3
10015a5a:	40f5      	lsrs	r5, r6
10015a5c:	0763      	lsls	r3, r4, #29
10015a5e:	d009      	beq.n	10015a74 <__aeabi_dmul+0x470>
10015a60:	230f      	movs	r3, #15
10015a62:	4023      	ands	r3, r4
10015a64:	2b04      	cmp	r3, #4
10015a66:	d005      	beq.n	10015a74 <__aeabi_dmul+0x470>
10015a68:	0023      	movs	r3, r4
10015a6a:	1d1c      	adds	r4, r3, #4
10015a6c:	429c      	cmp	r4, r3
10015a6e:	4192      	sbcs	r2, r2
10015a70:	4252      	negs	r2, r2
10015a72:	18ad      	adds	r5, r5, r2
10015a74:	022b      	lsls	r3, r5, #8
10015a76:	d51f      	bpl.n	10015ab8 <__aeabi_dmul+0x4b4>
10015a78:	2401      	movs	r4, #1
10015a7a:	2200      	movs	r2, #0
10015a7c:	400c      	ands	r4, r1
10015a7e:	2301      	movs	r3, #1
10015a80:	2500      	movs	r5, #0
10015a82:	4690      	mov	r8, r2
10015a84:	e624      	b.n	100156d0 <__aeabi_dmul+0xcc>
10015a86:	201f      	movs	r0, #31
10015a88:	002c      	movs	r4, r5
10015a8a:	4240      	negs	r0, r0
10015a8c:	1a82      	subs	r2, r0, r2
10015a8e:	40d4      	lsrs	r4, r2
10015a90:	2e20      	cmp	r6, #32
10015a92:	d01c      	beq.n	10015ace <__aeabi_dmul+0x4ca>
10015a94:	2240      	movs	r2, #64	; 0x40
10015a96:	1b96      	subs	r6, r2, r6
10015a98:	40b5      	lsls	r5, r6
10015a9a:	432b      	orrs	r3, r5
10015a9c:	1e58      	subs	r0, r3, #1
10015a9e:	4183      	sbcs	r3, r0
10015aa0:	2007      	movs	r0, #7
10015aa2:	4323      	orrs	r3, r4
10015aa4:	4018      	ands	r0, r3
10015aa6:	2500      	movs	r5, #0
10015aa8:	2800      	cmp	r0, #0
10015aaa:	d009      	beq.n	10015ac0 <__aeabi_dmul+0x4bc>
10015aac:	220f      	movs	r2, #15
10015aae:	2500      	movs	r5, #0
10015ab0:	401a      	ands	r2, r3
10015ab2:	001c      	movs	r4, r3
10015ab4:	2a04      	cmp	r2, #4
10015ab6:	d1d8      	bne.n	10015a6a <__aeabi_dmul+0x466>
10015ab8:	0023      	movs	r3, r4
10015aba:	0768      	lsls	r0, r5, #29
10015abc:	026d      	lsls	r5, r5, #9
10015abe:	0b2d      	lsrs	r5, r5, #12
10015ac0:	2401      	movs	r4, #1
10015ac2:	08db      	lsrs	r3, r3, #3
10015ac4:	4303      	orrs	r3, r0
10015ac6:	4698      	mov	r8, r3
10015ac8:	400c      	ands	r4, r1
10015aca:	2300      	movs	r3, #0
10015acc:	e600      	b.n	100156d0 <__aeabi_dmul+0xcc>
10015ace:	2500      	movs	r5, #0
10015ad0:	e7e3      	b.n	10015a9a <__aeabi_dmul+0x496>
10015ad2:	2280      	movs	r2, #128	; 0x80
10015ad4:	2401      	movs	r4, #1
10015ad6:	0312      	lsls	r2, r2, #12
10015ad8:	4315      	orrs	r5, r2
10015ada:	032d      	lsls	r5, r5, #12
10015adc:	4698      	mov	r8, r3
10015ade:	0b2d      	lsrs	r5, r5, #12
10015ae0:	400c      	ands	r4, r1
10015ae2:	4b04      	ldr	r3, [pc, #16]	; (10015af4 <__aeabi_dmul+0x4f0>)
10015ae4:	e5f4      	b.n	100156d0 <__aeabi_dmul+0xcc>
10015ae6:	46c0      	nop			; (mov r8, r8)
10015ae8:	000003ff 	.word	0x000003ff
10015aec:	feffffff 	.word	0xfeffffff
10015af0:	000007fe 	.word	0x000007fe
10015af4:	000007ff 	.word	0x000007ff

10015af8 <__aeabi_dsub>:
10015af8:	b5f0      	push	{r4, r5, r6, r7, lr}
10015afa:	4657      	mov	r7, sl
10015afc:	464e      	mov	r6, r9
10015afe:	4645      	mov	r5, r8
10015b00:	b4e0      	push	{r5, r6, r7}
10015b02:	000e      	movs	r6, r1
10015b04:	0011      	movs	r1, r2
10015b06:	0ff2      	lsrs	r2, r6, #31
10015b08:	4692      	mov	sl, r2
10015b0a:	00c5      	lsls	r5, r0, #3
10015b0c:	0f42      	lsrs	r2, r0, #29
10015b0e:	0318      	lsls	r0, r3, #12
10015b10:	0337      	lsls	r7, r6, #12
10015b12:	0074      	lsls	r4, r6, #1
10015b14:	0a40      	lsrs	r0, r0, #9
10015b16:	0f4e      	lsrs	r6, r1, #29
10015b18:	0a7f      	lsrs	r7, r7, #9
10015b1a:	4330      	orrs	r0, r6
10015b1c:	4ecf      	ldr	r6, [pc, #828]	; (10015e5c <__aeabi_dsub+0x364>)
10015b1e:	4317      	orrs	r7, r2
10015b20:	005a      	lsls	r2, r3, #1
10015b22:	0d64      	lsrs	r4, r4, #21
10015b24:	0d52      	lsrs	r2, r2, #21
10015b26:	0fdb      	lsrs	r3, r3, #31
10015b28:	00c9      	lsls	r1, r1, #3
10015b2a:	42b2      	cmp	r2, r6
10015b2c:	d100      	bne.n	10015b30 <__aeabi_dsub+0x38>
10015b2e:	e0e5      	b.n	10015cfc <__aeabi_dsub+0x204>
10015b30:	2601      	movs	r6, #1
10015b32:	4073      	eors	r3, r6
10015b34:	1aa6      	subs	r6, r4, r2
10015b36:	46b4      	mov	ip, r6
10015b38:	4553      	cmp	r3, sl
10015b3a:	d100      	bne.n	10015b3e <__aeabi_dsub+0x46>
10015b3c:	e0af      	b.n	10015c9e <__aeabi_dsub+0x1a6>
10015b3e:	2e00      	cmp	r6, #0
10015b40:	dc00      	bgt.n	10015b44 <__aeabi_dsub+0x4c>
10015b42:	e10d      	b.n	10015d60 <__aeabi_dsub+0x268>
10015b44:	2a00      	cmp	r2, #0
10015b46:	d13a      	bne.n	10015bbe <__aeabi_dsub+0xc6>
10015b48:	0003      	movs	r3, r0
10015b4a:	430b      	orrs	r3, r1
10015b4c:	d000      	beq.n	10015b50 <__aeabi_dsub+0x58>
10015b4e:	e0e4      	b.n	10015d1a <__aeabi_dsub+0x222>
10015b50:	076b      	lsls	r3, r5, #29
10015b52:	d009      	beq.n	10015b68 <__aeabi_dsub+0x70>
10015b54:	230f      	movs	r3, #15
10015b56:	402b      	ands	r3, r5
10015b58:	2b04      	cmp	r3, #4
10015b5a:	d005      	beq.n	10015b68 <__aeabi_dsub+0x70>
10015b5c:	1d2b      	adds	r3, r5, #4
10015b5e:	42ab      	cmp	r3, r5
10015b60:	41ad      	sbcs	r5, r5
10015b62:	426d      	negs	r5, r5
10015b64:	197f      	adds	r7, r7, r5
10015b66:	001d      	movs	r5, r3
10015b68:	023b      	lsls	r3, r7, #8
10015b6a:	d400      	bmi.n	10015b6e <__aeabi_dsub+0x76>
10015b6c:	e088      	b.n	10015c80 <__aeabi_dsub+0x188>
10015b6e:	4bbb      	ldr	r3, [pc, #748]	; (10015e5c <__aeabi_dsub+0x364>)
10015b70:	3401      	adds	r4, #1
10015b72:	429c      	cmp	r4, r3
10015b74:	d100      	bne.n	10015b78 <__aeabi_dsub+0x80>
10015b76:	e110      	b.n	10015d9a <__aeabi_dsub+0x2a2>
10015b78:	003a      	movs	r2, r7
10015b7a:	4bb9      	ldr	r3, [pc, #740]	; (10015e60 <__aeabi_dsub+0x368>)
10015b7c:	4651      	mov	r1, sl
10015b7e:	401a      	ands	r2, r3
10015b80:	2301      	movs	r3, #1
10015b82:	0750      	lsls	r0, r2, #29
10015b84:	08ed      	lsrs	r5, r5, #3
10015b86:	0252      	lsls	r2, r2, #9
10015b88:	0564      	lsls	r4, r4, #21
10015b8a:	4305      	orrs	r5, r0
10015b8c:	0b12      	lsrs	r2, r2, #12
10015b8e:	0d64      	lsrs	r4, r4, #21
10015b90:	400b      	ands	r3, r1
10015b92:	2100      	movs	r1, #0
10015b94:	0028      	movs	r0, r5
10015b96:	0312      	lsls	r2, r2, #12
10015b98:	0d0d      	lsrs	r5, r1, #20
10015b9a:	0b12      	lsrs	r2, r2, #12
10015b9c:	0564      	lsls	r4, r4, #21
10015b9e:	052d      	lsls	r5, r5, #20
10015ba0:	4315      	orrs	r5, r2
10015ba2:	0862      	lsrs	r2, r4, #1
10015ba4:	4caf      	ldr	r4, [pc, #700]	; (10015e64 <__aeabi_dsub+0x36c>)
10015ba6:	07db      	lsls	r3, r3, #31
10015ba8:	402c      	ands	r4, r5
10015baa:	4314      	orrs	r4, r2
10015bac:	0064      	lsls	r4, r4, #1
10015bae:	0864      	lsrs	r4, r4, #1
10015bb0:	431c      	orrs	r4, r3
10015bb2:	0021      	movs	r1, r4
10015bb4:	bc1c      	pop	{r2, r3, r4}
10015bb6:	4690      	mov	r8, r2
10015bb8:	4699      	mov	r9, r3
10015bba:	46a2      	mov	sl, r4
10015bbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
10015bbe:	4ba7      	ldr	r3, [pc, #668]	; (10015e5c <__aeabi_dsub+0x364>)
10015bc0:	429c      	cmp	r4, r3
10015bc2:	d0c5      	beq.n	10015b50 <__aeabi_dsub+0x58>
10015bc4:	2380      	movs	r3, #128	; 0x80
10015bc6:	041b      	lsls	r3, r3, #16
10015bc8:	4318      	orrs	r0, r3
10015bca:	4663      	mov	r3, ip
10015bcc:	2b38      	cmp	r3, #56	; 0x38
10015bce:	dd00      	ble.n	10015bd2 <__aeabi_dsub+0xda>
10015bd0:	e0fd      	b.n	10015dce <__aeabi_dsub+0x2d6>
10015bd2:	2b1f      	cmp	r3, #31
10015bd4:	dd00      	ble.n	10015bd8 <__aeabi_dsub+0xe0>
10015bd6:	e130      	b.n	10015e3a <__aeabi_dsub+0x342>
10015bd8:	4662      	mov	r2, ip
10015bda:	2320      	movs	r3, #32
10015bdc:	1a9b      	subs	r3, r3, r2
10015bde:	0002      	movs	r2, r0
10015be0:	409a      	lsls	r2, r3
10015be2:	4666      	mov	r6, ip
10015be4:	4690      	mov	r8, r2
10015be6:	000a      	movs	r2, r1
10015be8:	4099      	lsls	r1, r3
10015bea:	40f2      	lsrs	r2, r6
10015bec:	4646      	mov	r6, r8
10015bee:	1e4b      	subs	r3, r1, #1
10015bf0:	4199      	sbcs	r1, r3
10015bf2:	4332      	orrs	r2, r6
10015bf4:	4311      	orrs	r1, r2
10015bf6:	4663      	mov	r3, ip
10015bf8:	0002      	movs	r2, r0
10015bfa:	40da      	lsrs	r2, r3
10015bfc:	1a69      	subs	r1, r5, r1
10015bfe:	428d      	cmp	r5, r1
10015c00:	419b      	sbcs	r3, r3
10015c02:	000d      	movs	r5, r1
10015c04:	1aba      	subs	r2, r7, r2
10015c06:	425b      	negs	r3, r3
10015c08:	1ad7      	subs	r7, r2, r3
10015c0a:	023b      	lsls	r3, r7, #8
10015c0c:	d535      	bpl.n	10015c7a <__aeabi_dsub+0x182>
10015c0e:	027a      	lsls	r2, r7, #9
10015c10:	0a53      	lsrs	r3, r2, #9
10015c12:	4698      	mov	r8, r3
10015c14:	4643      	mov	r3, r8
10015c16:	2b00      	cmp	r3, #0
10015c18:	d100      	bne.n	10015c1c <__aeabi_dsub+0x124>
10015c1a:	e0c4      	b.n	10015da6 <__aeabi_dsub+0x2ae>
10015c1c:	4640      	mov	r0, r8
10015c1e:	f000 fc6f 	bl	10016500 <__clzsi2>
10015c22:	0003      	movs	r3, r0
10015c24:	3b08      	subs	r3, #8
10015c26:	2b1f      	cmp	r3, #31
10015c28:	dd00      	ble.n	10015c2c <__aeabi_dsub+0x134>
10015c2a:	e0c5      	b.n	10015db8 <__aeabi_dsub+0x2c0>
10015c2c:	2220      	movs	r2, #32
10015c2e:	0029      	movs	r1, r5
10015c30:	1ad2      	subs	r2, r2, r3
10015c32:	4647      	mov	r7, r8
10015c34:	40d1      	lsrs	r1, r2
10015c36:	409f      	lsls	r7, r3
10015c38:	000a      	movs	r2, r1
10015c3a:	409d      	lsls	r5, r3
10015c3c:	433a      	orrs	r2, r7
10015c3e:	429c      	cmp	r4, r3
10015c40:	dd00      	ble.n	10015c44 <__aeabi_dsub+0x14c>
10015c42:	e0c0      	b.n	10015dc6 <__aeabi_dsub+0x2ce>
10015c44:	1b1c      	subs	r4, r3, r4
10015c46:	1c63      	adds	r3, r4, #1
10015c48:	2b1f      	cmp	r3, #31
10015c4a:	dd00      	ble.n	10015c4e <__aeabi_dsub+0x156>
10015c4c:	e0e4      	b.n	10015e18 <__aeabi_dsub+0x320>
10015c4e:	2120      	movs	r1, #32
10015c50:	0014      	movs	r4, r2
10015c52:	0028      	movs	r0, r5
10015c54:	1ac9      	subs	r1, r1, r3
10015c56:	40d8      	lsrs	r0, r3
10015c58:	408c      	lsls	r4, r1
10015c5a:	408d      	lsls	r5, r1
10015c5c:	4304      	orrs	r4, r0
10015c5e:	40da      	lsrs	r2, r3
10015c60:	1e68      	subs	r0, r5, #1
10015c62:	4185      	sbcs	r5, r0
10015c64:	0017      	movs	r7, r2
10015c66:	4325      	orrs	r5, r4
10015c68:	2400      	movs	r4, #0
10015c6a:	e771      	b.n	10015b50 <__aeabi_dsub+0x58>
10015c6c:	4642      	mov	r2, r8
10015c6e:	4663      	mov	r3, ip
10015c70:	431a      	orrs	r2, r3
10015c72:	d100      	bne.n	10015c76 <__aeabi_dsub+0x17e>
10015c74:	e24c      	b.n	10016110 <__aeabi_dsub+0x618>
10015c76:	4667      	mov	r7, ip
10015c78:	4645      	mov	r5, r8
10015c7a:	076b      	lsls	r3, r5, #29
10015c7c:	d000      	beq.n	10015c80 <__aeabi_dsub+0x188>
10015c7e:	e769      	b.n	10015b54 <__aeabi_dsub+0x5c>
10015c80:	2301      	movs	r3, #1
10015c82:	4651      	mov	r1, sl
10015c84:	0778      	lsls	r0, r7, #29
10015c86:	08ed      	lsrs	r5, r5, #3
10015c88:	08fa      	lsrs	r2, r7, #3
10015c8a:	400b      	ands	r3, r1
10015c8c:	4305      	orrs	r5, r0
10015c8e:	4973      	ldr	r1, [pc, #460]	; (10015e5c <__aeabi_dsub+0x364>)
10015c90:	428c      	cmp	r4, r1
10015c92:	d038      	beq.n	10015d06 <__aeabi_dsub+0x20e>
10015c94:	0312      	lsls	r2, r2, #12
10015c96:	0564      	lsls	r4, r4, #21
10015c98:	0b12      	lsrs	r2, r2, #12
10015c9a:	0d64      	lsrs	r4, r4, #21
10015c9c:	e779      	b.n	10015b92 <__aeabi_dsub+0x9a>
10015c9e:	2e00      	cmp	r6, #0
10015ca0:	dc00      	bgt.n	10015ca4 <__aeabi_dsub+0x1ac>
10015ca2:	e09a      	b.n	10015dda <__aeabi_dsub+0x2e2>
10015ca4:	2a00      	cmp	r2, #0
10015ca6:	d047      	beq.n	10015d38 <__aeabi_dsub+0x240>
10015ca8:	4a6c      	ldr	r2, [pc, #432]	; (10015e5c <__aeabi_dsub+0x364>)
10015caa:	4294      	cmp	r4, r2
10015cac:	d100      	bne.n	10015cb0 <__aeabi_dsub+0x1b8>
10015cae:	e74f      	b.n	10015b50 <__aeabi_dsub+0x58>
10015cb0:	2280      	movs	r2, #128	; 0x80
10015cb2:	0412      	lsls	r2, r2, #16
10015cb4:	4310      	orrs	r0, r2
10015cb6:	4662      	mov	r2, ip
10015cb8:	2a38      	cmp	r2, #56	; 0x38
10015cba:	dc00      	bgt.n	10015cbe <__aeabi_dsub+0x1c6>
10015cbc:	e108      	b.n	10015ed0 <__aeabi_dsub+0x3d8>
10015cbe:	4301      	orrs	r1, r0
10015cc0:	1e48      	subs	r0, r1, #1
10015cc2:	4181      	sbcs	r1, r0
10015cc4:	2200      	movs	r2, #0
10015cc6:	b2c9      	uxtb	r1, r1
10015cc8:	1949      	adds	r1, r1, r5
10015cca:	19d2      	adds	r2, r2, r7
10015ccc:	42a9      	cmp	r1, r5
10015cce:	41bf      	sbcs	r7, r7
10015cd0:	000d      	movs	r5, r1
10015cd2:	427f      	negs	r7, r7
10015cd4:	18bf      	adds	r7, r7, r2
10015cd6:	023a      	lsls	r2, r7, #8
10015cd8:	d400      	bmi.n	10015cdc <__aeabi_dsub+0x1e4>
10015cda:	e142      	b.n	10015f62 <__aeabi_dsub+0x46a>
10015cdc:	4a5f      	ldr	r2, [pc, #380]	; (10015e5c <__aeabi_dsub+0x364>)
10015cde:	3401      	adds	r4, #1
10015ce0:	4294      	cmp	r4, r2
10015ce2:	d100      	bne.n	10015ce6 <__aeabi_dsub+0x1ee>
10015ce4:	e14e      	b.n	10015f84 <__aeabi_dsub+0x48c>
10015ce6:	2001      	movs	r0, #1
10015ce8:	4a5d      	ldr	r2, [pc, #372]	; (10015e60 <__aeabi_dsub+0x368>)
10015cea:	0869      	lsrs	r1, r5, #1
10015cec:	403a      	ands	r2, r7
10015cee:	4028      	ands	r0, r5
10015cf0:	4308      	orrs	r0, r1
10015cf2:	07d5      	lsls	r5, r2, #31
10015cf4:	4305      	orrs	r5, r0
10015cf6:	0857      	lsrs	r7, r2, #1
10015cf8:	469a      	mov	sl, r3
10015cfa:	e729      	b.n	10015b50 <__aeabi_dsub+0x58>
10015cfc:	0006      	movs	r6, r0
10015cfe:	430e      	orrs	r6, r1
10015d00:	d000      	beq.n	10015d04 <__aeabi_dsub+0x20c>
10015d02:	e717      	b.n	10015b34 <__aeabi_dsub+0x3c>
10015d04:	e714      	b.n	10015b30 <__aeabi_dsub+0x38>
10015d06:	0029      	movs	r1, r5
10015d08:	4311      	orrs	r1, r2
10015d0a:	d100      	bne.n	10015d0e <__aeabi_dsub+0x216>
10015d0c:	e1f9      	b.n	10016102 <__aeabi_dsub+0x60a>
10015d0e:	2180      	movs	r1, #128	; 0x80
10015d10:	0309      	lsls	r1, r1, #12
10015d12:	430a      	orrs	r2, r1
10015d14:	0312      	lsls	r2, r2, #12
10015d16:	0b12      	lsrs	r2, r2, #12
10015d18:	e73b      	b.n	10015b92 <__aeabi_dsub+0x9a>
10015d1a:	2301      	movs	r3, #1
10015d1c:	425b      	negs	r3, r3
10015d1e:	4698      	mov	r8, r3
10015d20:	44c4      	add	ip, r8
10015d22:	4663      	mov	r3, ip
10015d24:	2b00      	cmp	r3, #0
10015d26:	d172      	bne.n	10015e0e <__aeabi_dsub+0x316>
10015d28:	1a69      	subs	r1, r5, r1
10015d2a:	428d      	cmp	r5, r1
10015d2c:	419b      	sbcs	r3, r3
10015d2e:	1a3f      	subs	r7, r7, r0
10015d30:	425b      	negs	r3, r3
10015d32:	1aff      	subs	r7, r7, r3
10015d34:	000d      	movs	r5, r1
10015d36:	e768      	b.n	10015c0a <__aeabi_dsub+0x112>
10015d38:	0002      	movs	r2, r0
10015d3a:	430a      	orrs	r2, r1
10015d3c:	d100      	bne.n	10015d40 <__aeabi_dsub+0x248>
10015d3e:	e707      	b.n	10015b50 <__aeabi_dsub+0x58>
10015d40:	2201      	movs	r2, #1
10015d42:	4252      	negs	r2, r2
10015d44:	4690      	mov	r8, r2
10015d46:	44c4      	add	ip, r8
10015d48:	4662      	mov	r2, ip
10015d4a:	2a00      	cmp	r2, #0
10015d4c:	d000      	beq.n	10015d50 <__aeabi_dsub+0x258>
10015d4e:	e0e6      	b.n	10015f1e <__aeabi_dsub+0x426>
10015d50:	1869      	adds	r1, r5, r1
10015d52:	42a9      	cmp	r1, r5
10015d54:	41b6      	sbcs	r6, r6
10015d56:	183f      	adds	r7, r7, r0
10015d58:	4276      	negs	r6, r6
10015d5a:	19f7      	adds	r7, r6, r7
10015d5c:	000d      	movs	r5, r1
10015d5e:	e7ba      	b.n	10015cd6 <__aeabi_dsub+0x1de>
10015d60:	2e00      	cmp	r6, #0
10015d62:	d000      	beq.n	10015d66 <__aeabi_dsub+0x26e>
10015d64:	e080      	b.n	10015e68 <__aeabi_dsub+0x370>
10015d66:	1c62      	adds	r2, r4, #1
10015d68:	0552      	lsls	r2, r2, #21
10015d6a:	0d52      	lsrs	r2, r2, #21
10015d6c:	2a01      	cmp	r2, #1
10015d6e:	dc00      	bgt.n	10015d72 <__aeabi_dsub+0x27a>
10015d70:	e0f9      	b.n	10015f66 <__aeabi_dsub+0x46e>
10015d72:	1a6a      	subs	r2, r5, r1
10015d74:	4691      	mov	r9, r2
10015d76:	454d      	cmp	r5, r9
10015d78:	41b6      	sbcs	r6, r6
10015d7a:	1a3a      	subs	r2, r7, r0
10015d7c:	4276      	negs	r6, r6
10015d7e:	1b92      	subs	r2, r2, r6
10015d80:	4690      	mov	r8, r2
10015d82:	0212      	lsls	r2, r2, #8
10015d84:	d400      	bmi.n	10015d88 <__aeabi_dsub+0x290>
10015d86:	e099      	b.n	10015ebc <__aeabi_dsub+0x3c4>
10015d88:	1b4d      	subs	r5, r1, r5
10015d8a:	42a9      	cmp	r1, r5
10015d8c:	4189      	sbcs	r1, r1
10015d8e:	1bc7      	subs	r7, r0, r7
10015d90:	4249      	negs	r1, r1
10015d92:	1a7a      	subs	r2, r7, r1
10015d94:	4690      	mov	r8, r2
10015d96:	469a      	mov	sl, r3
10015d98:	e73c      	b.n	10015c14 <__aeabi_dsub+0x11c>
10015d9a:	4652      	mov	r2, sl
10015d9c:	2301      	movs	r3, #1
10015d9e:	2500      	movs	r5, #0
10015da0:	4013      	ands	r3, r2
10015da2:	2200      	movs	r2, #0
10015da4:	e6f5      	b.n	10015b92 <__aeabi_dsub+0x9a>
10015da6:	0028      	movs	r0, r5
10015da8:	f000 fbaa 	bl	10016500 <__clzsi2>
10015dac:	3020      	adds	r0, #32
10015dae:	0003      	movs	r3, r0
10015db0:	3b08      	subs	r3, #8
10015db2:	2b1f      	cmp	r3, #31
10015db4:	dc00      	bgt.n	10015db8 <__aeabi_dsub+0x2c0>
10015db6:	e739      	b.n	10015c2c <__aeabi_dsub+0x134>
10015db8:	002a      	movs	r2, r5
10015dba:	3828      	subs	r0, #40	; 0x28
10015dbc:	4082      	lsls	r2, r0
10015dbe:	2500      	movs	r5, #0
10015dc0:	429c      	cmp	r4, r3
10015dc2:	dc00      	bgt.n	10015dc6 <__aeabi_dsub+0x2ce>
10015dc4:	e73e      	b.n	10015c44 <__aeabi_dsub+0x14c>
10015dc6:	4f26      	ldr	r7, [pc, #152]	; (10015e60 <__aeabi_dsub+0x368>)
10015dc8:	1ae4      	subs	r4, r4, r3
10015dca:	4017      	ands	r7, r2
10015dcc:	e6c0      	b.n	10015b50 <__aeabi_dsub+0x58>
10015dce:	4301      	orrs	r1, r0
10015dd0:	1e48      	subs	r0, r1, #1
10015dd2:	4181      	sbcs	r1, r0
10015dd4:	2200      	movs	r2, #0
10015dd6:	b2c9      	uxtb	r1, r1
10015dd8:	e710      	b.n	10015bfc <__aeabi_dsub+0x104>
10015dda:	2e00      	cmp	r6, #0
10015ddc:	d000      	beq.n	10015de0 <__aeabi_dsub+0x2e8>
10015dde:	e0f1      	b.n	10015fc4 <__aeabi_dsub+0x4cc>
10015de0:	1c62      	adds	r2, r4, #1
10015de2:	4694      	mov	ip, r2
10015de4:	0552      	lsls	r2, r2, #21
10015de6:	0d52      	lsrs	r2, r2, #21
10015de8:	2a01      	cmp	r2, #1
10015dea:	dc00      	bgt.n	10015dee <__aeabi_dsub+0x2f6>
10015dec:	e0a0      	b.n	10015f30 <__aeabi_dsub+0x438>
10015dee:	4a1b      	ldr	r2, [pc, #108]	; (10015e5c <__aeabi_dsub+0x364>)
10015df0:	4594      	cmp	ip, r2
10015df2:	d100      	bne.n	10015df6 <__aeabi_dsub+0x2fe>
10015df4:	e0c5      	b.n	10015f82 <__aeabi_dsub+0x48a>
10015df6:	1869      	adds	r1, r5, r1
10015df8:	42a9      	cmp	r1, r5
10015dfa:	4192      	sbcs	r2, r2
10015dfc:	183f      	adds	r7, r7, r0
10015dfe:	4252      	negs	r2, r2
10015e00:	19d2      	adds	r2, r2, r7
10015e02:	0849      	lsrs	r1, r1, #1
10015e04:	07d5      	lsls	r5, r2, #31
10015e06:	430d      	orrs	r5, r1
10015e08:	0857      	lsrs	r7, r2, #1
10015e0a:	4664      	mov	r4, ip
10015e0c:	e6a0      	b.n	10015b50 <__aeabi_dsub+0x58>
10015e0e:	4b13      	ldr	r3, [pc, #76]	; (10015e5c <__aeabi_dsub+0x364>)
10015e10:	429c      	cmp	r4, r3
10015e12:	d000      	beq.n	10015e16 <__aeabi_dsub+0x31e>
10015e14:	e6d9      	b.n	10015bca <__aeabi_dsub+0xd2>
10015e16:	e69b      	b.n	10015b50 <__aeabi_dsub+0x58>
10015e18:	0011      	movs	r1, r2
10015e1a:	3c1f      	subs	r4, #31
10015e1c:	40e1      	lsrs	r1, r4
10015e1e:	000c      	movs	r4, r1
10015e20:	2b20      	cmp	r3, #32
10015e22:	d100      	bne.n	10015e26 <__aeabi_dsub+0x32e>
10015e24:	e080      	b.n	10015f28 <__aeabi_dsub+0x430>
10015e26:	2140      	movs	r1, #64	; 0x40
10015e28:	1acb      	subs	r3, r1, r3
10015e2a:	409a      	lsls	r2, r3
10015e2c:	4315      	orrs	r5, r2
10015e2e:	1e6a      	subs	r2, r5, #1
10015e30:	4195      	sbcs	r5, r2
10015e32:	2700      	movs	r7, #0
10015e34:	4325      	orrs	r5, r4
10015e36:	2400      	movs	r4, #0
10015e38:	e71f      	b.n	10015c7a <__aeabi_dsub+0x182>
10015e3a:	4663      	mov	r3, ip
10015e3c:	0002      	movs	r2, r0
10015e3e:	3b20      	subs	r3, #32
10015e40:	40da      	lsrs	r2, r3
10015e42:	4663      	mov	r3, ip
10015e44:	2b20      	cmp	r3, #32
10015e46:	d071      	beq.n	10015f2c <__aeabi_dsub+0x434>
10015e48:	2340      	movs	r3, #64	; 0x40
10015e4a:	4666      	mov	r6, ip
10015e4c:	1b9b      	subs	r3, r3, r6
10015e4e:	4098      	lsls	r0, r3
10015e50:	4301      	orrs	r1, r0
10015e52:	1e48      	subs	r0, r1, #1
10015e54:	4181      	sbcs	r1, r0
10015e56:	4311      	orrs	r1, r2
10015e58:	2200      	movs	r2, #0
10015e5a:	e6cf      	b.n	10015bfc <__aeabi_dsub+0x104>
10015e5c:	000007ff 	.word	0x000007ff
10015e60:	ff7fffff 	.word	0xff7fffff
10015e64:	800fffff 	.word	0x800fffff
10015e68:	2c00      	cmp	r4, #0
10015e6a:	d048      	beq.n	10015efe <__aeabi_dsub+0x406>
10015e6c:	4cca      	ldr	r4, [pc, #808]	; (10016198 <__aeabi_dsub+0x6a0>)
10015e6e:	42a2      	cmp	r2, r4
10015e70:	d100      	bne.n	10015e74 <__aeabi_dsub+0x37c>
10015e72:	e0a2      	b.n	10015fba <__aeabi_dsub+0x4c2>
10015e74:	4274      	negs	r4, r6
10015e76:	46a1      	mov	r9, r4
10015e78:	2480      	movs	r4, #128	; 0x80
10015e7a:	0424      	lsls	r4, r4, #16
10015e7c:	4327      	orrs	r7, r4
10015e7e:	464c      	mov	r4, r9
10015e80:	2c38      	cmp	r4, #56	; 0x38
10015e82:	dd00      	ble.n	10015e86 <__aeabi_dsub+0x38e>
10015e84:	e0db      	b.n	1001603e <__aeabi_dsub+0x546>
10015e86:	2c1f      	cmp	r4, #31
10015e88:	dd00      	ble.n	10015e8c <__aeabi_dsub+0x394>
10015e8a:	e144      	b.n	10016116 <__aeabi_dsub+0x61e>
10015e8c:	464e      	mov	r6, r9
10015e8e:	2420      	movs	r4, #32
10015e90:	1ba4      	subs	r4, r4, r6
10015e92:	003e      	movs	r6, r7
10015e94:	40a6      	lsls	r6, r4
10015e96:	46a2      	mov	sl, r4
10015e98:	46b0      	mov	r8, r6
10015e9a:	464c      	mov	r4, r9
10015e9c:	002e      	movs	r6, r5
10015e9e:	40e6      	lsrs	r6, r4
10015ea0:	46b4      	mov	ip, r6
10015ea2:	4646      	mov	r6, r8
10015ea4:	4664      	mov	r4, ip
10015ea6:	4326      	orrs	r6, r4
10015ea8:	4654      	mov	r4, sl
10015eaa:	40a5      	lsls	r5, r4
10015eac:	1e6c      	subs	r4, r5, #1
10015eae:	41a5      	sbcs	r5, r4
10015eb0:	0034      	movs	r4, r6
10015eb2:	432c      	orrs	r4, r5
10015eb4:	464d      	mov	r5, r9
10015eb6:	40ef      	lsrs	r7, r5
10015eb8:	1b0d      	subs	r5, r1, r4
10015eba:	e028      	b.n	10015f0e <__aeabi_dsub+0x416>
10015ebc:	464a      	mov	r2, r9
10015ebe:	4643      	mov	r3, r8
10015ec0:	464d      	mov	r5, r9
10015ec2:	431a      	orrs	r2, r3
10015ec4:	d000      	beq.n	10015ec8 <__aeabi_dsub+0x3d0>
10015ec6:	e6a5      	b.n	10015c14 <__aeabi_dsub+0x11c>
10015ec8:	2300      	movs	r3, #0
10015eca:	2400      	movs	r4, #0
10015ecc:	2500      	movs	r5, #0
10015ece:	e6de      	b.n	10015c8e <__aeabi_dsub+0x196>
10015ed0:	2a1f      	cmp	r2, #31
10015ed2:	dc5a      	bgt.n	10015f8a <__aeabi_dsub+0x492>
10015ed4:	4666      	mov	r6, ip
10015ed6:	2220      	movs	r2, #32
10015ed8:	1b92      	subs	r2, r2, r6
10015eda:	0006      	movs	r6, r0
10015edc:	4096      	lsls	r6, r2
10015ede:	4691      	mov	r9, r2
10015ee0:	46b0      	mov	r8, r6
10015ee2:	4662      	mov	r2, ip
10015ee4:	000e      	movs	r6, r1
10015ee6:	40d6      	lsrs	r6, r2
10015ee8:	4642      	mov	r2, r8
10015eea:	4316      	orrs	r6, r2
10015eec:	464a      	mov	r2, r9
10015eee:	4091      	lsls	r1, r2
10015ef0:	1e4a      	subs	r2, r1, #1
10015ef2:	4191      	sbcs	r1, r2
10015ef4:	0002      	movs	r2, r0
10015ef6:	4660      	mov	r0, ip
10015ef8:	4331      	orrs	r1, r6
10015efa:	40c2      	lsrs	r2, r0
10015efc:	e6e4      	b.n	10015cc8 <__aeabi_dsub+0x1d0>
10015efe:	003c      	movs	r4, r7
10015f00:	432c      	orrs	r4, r5
10015f02:	d05a      	beq.n	10015fba <__aeabi_dsub+0x4c2>
10015f04:	43f4      	mvns	r4, r6
10015f06:	46a1      	mov	r9, r4
10015f08:	2c00      	cmp	r4, #0
10015f0a:	d152      	bne.n	10015fb2 <__aeabi_dsub+0x4ba>
10015f0c:	1b4d      	subs	r5, r1, r5
10015f0e:	42a9      	cmp	r1, r5
10015f10:	4189      	sbcs	r1, r1
10015f12:	1bc7      	subs	r7, r0, r7
10015f14:	4249      	negs	r1, r1
10015f16:	1a7f      	subs	r7, r7, r1
10015f18:	0014      	movs	r4, r2
10015f1a:	469a      	mov	sl, r3
10015f1c:	e675      	b.n	10015c0a <__aeabi_dsub+0x112>
10015f1e:	4a9e      	ldr	r2, [pc, #632]	; (10016198 <__aeabi_dsub+0x6a0>)
10015f20:	4294      	cmp	r4, r2
10015f22:	d000      	beq.n	10015f26 <__aeabi_dsub+0x42e>
10015f24:	e6c7      	b.n	10015cb6 <__aeabi_dsub+0x1be>
10015f26:	e613      	b.n	10015b50 <__aeabi_dsub+0x58>
10015f28:	2200      	movs	r2, #0
10015f2a:	e77f      	b.n	10015e2c <__aeabi_dsub+0x334>
10015f2c:	2000      	movs	r0, #0
10015f2e:	e78f      	b.n	10015e50 <__aeabi_dsub+0x358>
10015f30:	2c00      	cmp	r4, #0
10015f32:	d000      	beq.n	10015f36 <__aeabi_dsub+0x43e>
10015f34:	e0c8      	b.n	100160c8 <__aeabi_dsub+0x5d0>
10015f36:	003b      	movs	r3, r7
10015f38:	432b      	orrs	r3, r5
10015f3a:	d100      	bne.n	10015f3e <__aeabi_dsub+0x446>
10015f3c:	e10f      	b.n	1001615e <__aeabi_dsub+0x666>
10015f3e:	0003      	movs	r3, r0
10015f40:	430b      	orrs	r3, r1
10015f42:	d100      	bne.n	10015f46 <__aeabi_dsub+0x44e>
10015f44:	e604      	b.n	10015b50 <__aeabi_dsub+0x58>
10015f46:	1869      	adds	r1, r5, r1
10015f48:	42a9      	cmp	r1, r5
10015f4a:	419b      	sbcs	r3, r3
10015f4c:	183f      	adds	r7, r7, r0
10015f4e:	425b      	negs	r3, r3
10015f50:	19df      	adds	r7, r3, r7
10015f52:	023b      	lsls	r3, r7, #8
10015f54:	d400      	bmi.n	10015f58 <__aeabi_dsub+0x460>
10015f56:	e11a      	b.n	1001618e <__aeabi_dsub+0x696>
10015f58:	4b90      	ldr	r3, [pc, #576]	; (1001619c <__aeabi_dsub+0x6a4>)
10015f5a:	000d      	movs	r5, r1
10015f5c:	401f      	ands	r7, r3
10015f5e:	4664      	mov	r4, ip
10015f60:	e5f6      	b.n	10015b50 <__aeabi_dsub+0x58>
10015f62:	469a      	mov	sl, r3
10015f64:	e689      	b.n	10015c7a <__aeabi_dsub+0x182>
10015f66:	003a      	movs	r2, r7
10015f68:	432a      	orrs	r2, r5
10015f6a:	2c00      	cmp	r4, #0
10015f6c:	d15c      	bne.n	10016028 <__aeabi_dsub+0x530>
10015f6e:	2a00      	cmp	r2, #0
10015f70:	d175      	bne.n	1001605e <__aeabi_dsub+0x566>
10015f72:	0002      	movs	r2, r0
10015f74:	430a      	orrs	r2, r1
10015f76:	d100      	bne.n	10015f7a <__aeabi_dsub+0x482>
10015f78:	e0ca      	b.n	10016110 <__aeabi_dsub+0x618>
10015f7a:	0007      	movs	r7, r0
10015f7c:	000d      	movs	r5, r1
10015f7e:	469a      	mov	sl, r3
10015f80:	e5e6      	b.n	10015b50 <__aeabi_dsub+0x58>
10015f82:	4664      	mov	r4, ip
10015f84:	2200      	movs	r2, #0
10015f86:	2500      	movs	r5, #0
10015f88:	e681      	b.n	10015c8e <__aeabi_dsub+0x196>
10015f8a:	4662      	mov	r2, ip
10015f8c:	0006      	movs	r6, r0
10015f8e:	3a20      	subs	r2, #32
10015f90:	40d6      	lsrs	r6, r2
10015f92:	4662      	mov	r2, ip
10015f94:	46b0      	mov	r8, r6
10015f96:	2a20      	cmp	r2, #32
10015f98:	d100      	bne.n	10015f9c <__aeabi_dsub+0x4a4>
10015f9a:	e0b7      	b.n	1001610c <__aeabi_dsub+0x614>
10015f9c:	2240      	movs	r2, #64	; 0x40
10015f9e:	4666      	mov	r6, ip
10015fa0:	1b92      	subs	r2, r2, r6
10015fa2:	4090      	lsls	r0, r2
10015fa4:	4301      	orrs	r1, r0
10015fa6:	4642      	mov	r2, r8
10015fa8:	1e48      	subs	r0, r1, #1
10015faa:	4181      	sbcs	r1, r0
10015fac:	4311      	orrs	r1, r2
10015fae:	2200      	movs	r2, #0
10015fb0:	e68a      	b.n	10015cc8 <__aeabi_dsub+0x1d0>
10015fb2:	4c79      	ldr	r4, [pc, #484]	; (10016198 <__aeabi_dsub+0x6a0>)
10015fb4:	42a2      	cmp	r2, r4
10015fb6:	d000      	beq.n	10015fba <__aeabi_dsub+0x4c2>
10015fb8:	e761      	b.n	10015e7e <__aeabi_dsub+0x386>
10015fba:	0007      	movs	r7, r0
10015fbc:	000d      	movs	r5, r1
10015fbe:	0014      	movs	r4, r2
10015fc0:	469a      	mov	sl, r3
10015fc2:	e5c5      	b.n	10015b50 <__aeabi_dsub+0x58>
10015fc4:	2c00      	cmp	r4, #0
10015fc6:	d141      	bne.n	1001604c <__aeabi_dsub+0x554>
10015fc8:	003c      	movs	r4, r7
10015fca:	432c      	orrs	r4, r5
10015fcc:	d078      	beq.n	100160c0 <__aeabi_dsub+0x5c8>
10015fce:	43f4      	mvns	r4, r6
10015fd0:	46a1      	mov	r9, r4
10015fd2:	2c00      	cmp	r4, #0
10015fd4:	d020      	beq.n	10016018 <__aeabi_dsub+0x520>
10015fd6:	4c70      	ldr	r4, [pc, #448]	; (10016198 <__aeabi_dsub+0x6a0>)
10015fd8:	42a2      	cmp	r2, r4
10015fda:	d071      	beq.n	100160c0 <__aeabi_dsub+0x5c8>
10015fdc:	464c      	mov	r4, r9
10015fde:	2c38      	cmp	r4, #56	; 0x38
10015fe0:	dd00      	ble.n	10015fe4 <__aeabi_dsub+0x4ec>
10015fe2:	e0b2      	b.n	1001614a <__aeabi_dsub+0x652>
10015fe4:	2c1f      	cmp	r4, #31
10015fe6:	dd00      	ble.n	10015fea <__aeabi_dsub+0x4f2>
10015fe8:	e0bc      	b.n	10016164 <__aeabi_dsub+0x66c>
10015fea:	2620      	movs	r6, #32
10015fec:	1b34      	subs	r4, r6, r4
10015fee:	46a2      	mov	sl, r4
10015ff0:	003c      	movs	r4, r7
10015ff2:	4656      	mov	r6, sl
10015ff4:	40b4      	lsls	r4, r6
10015ff6:	464e      	mov	r6, r9
10015ff8:	46a0      	mov	r8, r4
10015ffa:	002c      	movs	r4, r5
10015ffc:	40f4      	lsrs	r4, r6
10015ffe:	46a4      	mov	ip, r4
10016000:	4644      	mov	r4, r8
10016002:	4666      	mov	r6, ip
10016004:	4334      	orrs	r4, r6
10016006:	46a4      	mov	ip, r4
10016008:	4654      	mov	r4, sl
1001600a:	40a5      	lsls	r5, r4
1001600c:	4664      	mov	r4, ip
1001600e:	1e6e      	subs	r6, r5, #1
10016010:	41b5      	sbcs	r5, r6
10016012:	4325      	orrs	r5, r4
10016014:	464c      	mov	r4, r9
10016016:	40e7      	lsrs	r7, r4
10016018:	186d      	adds	r5, r5, r1
1001601a:	428d      	cmp	r5, r1
1001601c:	4189      	sbcs	r1, r1
1001601e:	183f      	adds	r7, r7, r0
10016020:	4249      	negs	r1, r1
10016022:	19cf      	adds	r7, r1, r7
10016024:	0014      	movs	r4, r2
10016026:	e656      	b.n	10015cd6 <__aeabi_dsub+0x1de>
10016028:	2a00      	cmp	r2, #0
1001602a:	d12f      	bne.n	1001608c <__aeabi_dsub+0x594>
1001602c:	0002      	movs	r2, r0
1001602e:	430a      	orrs	r2, r1
10016030:	d100      	bne.n	10016034 <__aeabi_dsub+0x53c>
10016032:	e084      	b.n	1001613e <__aeabi_dsub+0x646>
10016034:	0007      	movs	r7, r0
10016036:	000d      	movs	r5, r1
10016038:	469a      	mov	sl, r3
1001603a:	4c57      	ldr	r4, [pc, #348]	; (10016198 <__aeabi_dsub+0x6a0>)
1001603c:	e588      	b.n	10015b50 <__aeabi_dsub+0x58>
1001603e:	433d      	orrs	r5, r7
10016040:	1e6f      	subs	r7, r5, #1
10016042:	41bd      	sbcs	r5, r7
10016044:	b2ec      	uxtb	r4, r5
10016046:	2700      	movs	r7, #0
10016048:	1b0d      	subs	r5, r1, r4
1001604a:	e760      	b.n	10015f0e <__aeabi_dsub+0x416>
1001604c:	4c52      	ldr	r4, [pc, #328]	; (10016198 <__aeabi_dsub+0x6a0>)
1001604e:	42a2      	cmp	r2, r4
10016050:	d036      	beq.n	100160c0 <__aeabi_dsub+0x5c8>
10016052:	4274      	negs	r4, r6
10016054:	2680      	movs	r6, #128	; 0x80
10016056:	0436      	lsls	r6, r6, #16
10016058:	46a1      	mov	r9, r4
1001605a:	4337      	orrs	r7, r6
1001605c:	e7be      	b.n	10015fdc <__aeabi_dsub+0x4e4>
1001605e:	0002      	movs	r2, r0
10016060:	430a      	orrs	r2, r1
10016062:	d100      	bne.n	10016066 <__aeabi_dsub+0x56e>
10016064:	e574      	b.n	10015b50 <__aeabi_dsub+0x58>
10016066:	1a6a      	subs	r2, r5, r1
10016068:	4690      	mov	r8, r2
1001606a:	4545      	cmp	r5, r8
1001606c:	41b6      	sbcs	r6, r6
1001606e:	1a3a      	subs	r2, r7, r0
10016070:	4276      	negs	r6, r6
10016072:	1b92      	subs	r2, r2, r6
10016074:	4694      	mov	ip, r2
10016076:	0212      	lsls	r2, r2, #8
10016078:	d400      	bmi.n	1001607c <__aeabi_dsub+0x584>
1001607a:	e5f7      	b.n	10015c6c <__aeabi_dsub+0x174>
1001607c:	1b4d      	subs	r5, r1, r5
1001607e:	42a9      	cmp	r1, r5
10016080:	4189      	sbcs	r1, r1
10016082:	1bc7      	subs	r7, r0, r7
10016084:	4249      	negs	r1, r1
10016086:	1a7f      	subs	r7, r7, r1
10016088:	469a      	mov	sl, r3
1001608a:	e561      	b.n	10015b50 <__aeabi_dsub+0x58>
1001608c:	0002      	movs	r2, r0
1001608e:	430a      	orrs	r2, r1
10016090:	d03a      	beq.n	10016108 <__aeabi_dsub+0x610>
10016092:	08ed      	lsrs	r5, r5, #3
10016094:	077c      	lsls	r4, r7, #29
10016096:	432c      	orrs	r4, r5
10016098:	2580      	movs	r5, #128	; 0x80
1001609a:	08fa      	lsrs	r2, r7, #3
1001609c:	032d      	lsls	r5, r5, #12
1001609e:	422a      	tst	r2, r5
100160a0:	d008      	beq.n	100160b4 <__aeabi_dsub+0x5bc>
100160a2:	08c7      	lsrs	r7, r0, #3
100160a4:	422f      	tst	r7, r5
100160a6:	d105      	bne.n	100160b4 <__aeabi_dsub+0x5bc>
100160a8:	0745      	lsls	r5, r0, #29
100160aa:	002c      	movs	r4, r5
100160ac:	003a      	movs	r2, r7
100160ae:	469a      	mov	sl, r3
100160b0:	08c9      	lsrs	r1, r1, #3
100160b2:	430c      	orrs	r4, r1
100160b4:	0f67      	lsrs	r7, r4, #29
100160b6:	00d2      	lsls	r2, r2, #3
100160b8:	00e5      	lsls	r5, r4, #3
100160ba:	4317      	orrs	r7, r2
100160bc:	4c36      	ldr	r4, [pc, #216]	; (10016198 <__aeabi_dsub+0x6a0>)
100160be:	e547      	b.n	10015b50 <__aeabi_dsub+0x58>
100160c0:	0007      	movs	r7, r0
100160c2:	000d      	movs	r5, r1
100160c4:	0014      	movs	r4, r2
100160c6:	e543      	b.n	10015b50 <__aeabi_dsub+0x58>
100160c8:	003a      	movs	r2, r7
100160ca:	432a      	orrs	r2, r5
100160cc:	d043      	beq.n	10016156 <__aeabi_dsub+0x65e>
100160ce:	0002      	movs	r2, r0
100160d0:	430a      	orrs	r2, r1
100160d2:	d019      	beq.n	10016108 <__aeabi_dsub+0x610>
100160d4:	08ed      	lsrs	r5, r5, #3
100160d6:	077c      	lsls	r4, r7, #29
100160d8:	432c      	orrs	r4, r5
100160da:	2580      	movs	r5, #128	; 0x80
100160dc:	08fa      	lsrs	r2, r7, #3
100160de:	032d      	lsls	r5, r5, #12
100160e0:	422a      	tst	r2, r5
100160e2:	d007      	beq.n	100160f4 <__aeabi_dsub+0x5fc>
100160e4:	08c6      	lsrs	r6, r0, #3
100160e6:	422e      	tst	r6, r5
100160e8:	d104      	bne.n	100160f4 <__aeabi_dsub+0x5fc>
100160ea:	0747      	lsls	r7, r0, #29
100160ec:	003c      	movs	r4, r7
100160ee:	0032      	movs	r2, r6
100160f0:	08c9      	lsrs	r1, r1, #3
100160f2:	430c      	orrs	r4, r1
100160f4:	00d7      	lsls	r7, r2, #3
100160f6:	0f62      	lsrs	r2, r4, #29
100160f8:	00e5      	lsls	r5, r4, #3
100160fa:	4317      	orrs	r7, r2
100160fc:	469a      	mov	sl, r3
100160fe:	4c26      	ldr	r4, [pc, #152]	; (10016198 <__aeabi_dsub+0x6a0>)
10016100:	e526      	b.n	10015b50 <__aeabi_dsub+0x58>
10016102:	2200      	movs	r2, #0
10016104:	2500      	movs	r5, #0
10016106:	e544      	b.n	10015b92 <__aeabi_dsub+0x9a>
10016108:	4c23      	ldr	r4, [pc, #140]	; (10016198 <__aeabi_dsub+0x6a0>)
1001610a:	e521      	b.n	10015b50 <__aeabi_dsub+0x58>
1001610c:	2000      	movs	r0, #0
1001610e:	e749      	b.n	10015fa4 <__aeabi_dsub+0x4ac>
10016110:	2300      	movs	r3, #0
10016112:	2500      	movs	r5, #0
10016114:	e5bb      	b.n	10015c8e <__aeabi_dsub+0x196>
10016116:	464c      	mov	r4, r9
10016118:	003e      	movs	r6, r7
1001611a:	3c20      	subs	r4, #32
1001611c:	40e6      	lsrs	r6, r4
1001611e:	464c      	mov	r4, r9
10016120:	46b4      	mov	ip, r6
10016122:	2c20      	cmp	r4, #32
10016124:	d031      	beq.n	1001618a <__aeabi_dsub+0x692>
10016126:	2440      	movs	r4, #64	; 0x40
10016128:	464e      	mov	r6, r9
1001612a:	1ba6      	subs	r6, r4, r6
1001612c:	40b7      	lsls	r7, r6
1001612e:	433d      	orrs	r5, r7
10016130:	1e6c      	subs	r4, r5, #1
10016132:	41a5      	sbcs	r5, r4
10016134:	4664      	mov	r4, ip
10016136:	432c      	orrs	r4, r5
10016138:	2700      	movs	r7, #0
1001613a:	1b0d      	subs	r5, r1, r4
1001613c:	e6e7      	b.n	10015f0e <__aeabi_dsub+0x416>
1001613e:	2280      	movs	r2, #128	; 0x80
10016140:	2300      	movs	r3, #0
10016142:	0312      	lsls	r2, r2, #12
10016144:	4c14      	ldr	r4, [pc, #80]	; (10016198 <__aeabi_dsub+0x6a0>)
10016146:	2500      	movs	r5, #0
10016148:	e5a1      	b.n	10015c8e <__aeabi_dsub+0x196>
1001614a:	433d      	orrs	r5, r7
1001614c:	1e6f      	subs	r7, r5, #1
1001614e:	41bd      	sbcs	r5, r7
10016150:	2700      	movs	r7, #0
10016152:	b2ed      	uxtb	r5, r5
10016154:	e760      	b.n	10016018 <__aeabi_dsub+0x520>
10016156:	0007      	movs	r7, r0
10016158:	000d      	movs	r5, r1
1001615a:	4c0f      	ldr	r4, [pc, #60]	; (10016198 <__aeabi_dsub+0x6a0>)
1001615c:	e4f8      	b.n	10015b50 <__aeabi_dsub+0x58>
1001615e:	0007      	movs	r7, r0
10016160:	000d      	movs	r5, r1
10016162:	e4f5      	b.n	10015b50 <__aeabi_dsub+0x58>
10016164:	464e      	mov	r6, r9
10016166:	003c      	movs	r4, r7
10016168:	3e20      	subs	r6, #32
1001616a:	40f4      	lsrs	r4, r6
1001616c:	46a0      	mov	r8, r4
1001616e:	464c      	mov	r4, r9
10016170:	2c20      	cmp	r4, #32
10016172:	d00e      	beq.n	10016192 <__aeabi_dsub+0x69a>
10016174:	2440      	movs	r4, #64	; 0x40
10016176:	464e      	mov	r6, r9
10016178:	1ba4      	subs	r4, r4, r6
1001617a:	40a7      	lsls	r7, r4
1001617c:	433d      	orrs	r5, r7
1001617e:	1e6f      	subs	r7, r5, #1
10016180:	41bd      	sbcs	r5, r7
10016182:	4644      	mov	r4, r8
10016184:	2700      	movs	r7, #0
10016186:	4325      	orrs	r5, r4
10016188:	e746      	b.n	10016018 <__aeabi_dsub+0x520>
1001618a:	2700      	movs	r7, #0
1001618c:	e7cf      	b.n	1001612e <__aeabi_dsub+0x636>
1001618e:	000d      	movs	r5, r1
10016190:	e573      	b.n	10015c7a <__aeabi_dsub+0x182>
10016192:	2700      	movs	r7, #0
10016194:	e7f2      	b.n	1001617c <__aeabi_dsub+0x684>
10016196:	46c0      	nop			; (mov r8, r8)
10016198:	000007ff 	.word	0x000007ff
1001619c:	ff7fffff 	.word	0xff7fffff

100161a0 <__aeabi_dcmpun>:
100161a0:	b570      	push	{r4, r5, r6, lr}
100161a2:	4e0e      	ldr	r6, [pc, #56]	; (100161dc <__aeabi_dcmpun+0x3c>)
100161a4:	030c      	lsls	r4, r1, #12
100161a6:	031d      	lsls	r5, r3, #12
100161a8:	0049      	lsls	r1, r1, #1
100161aa:	005b      	lsls	r3, r3, #1
100161ac:	0b24      	lsrs	r4, r4, #12
100161ae:	0d49      	lsrs	r1, r1, #21
100161b0:	0b2d      	lsrs	r5, r5, #12
100161b2:	0d5b      	lsrs	r3, r3, #21
100161b4:	42b1      	cmp	r1, r6
100161b6:	d004      	beq.n	100161c2 <__aeabi_dcmpun+0x22>
100161b8:	4908      	ldr	r1, [pc, #32]	; (100161dc <__aeabi_dcmpun+0x3c>)
100161ba:	2000      	movs	r0, #0
100161bc:	428b      	cmp	r3, r1
100161be:	d008      	beq.n	100161d2 <__aeabi_dcmpun+0x32>
100161c0:	bd70      	pop	{r4, r5, r6, pc}
100161c2:	4304      	orrs	r4, r0
100161c4:	2001      	movs	r0, #1
100161c6:	2c00      	cmp	r4, #0
100161c8:	d1fa      	bne.n	100161c0 <__aeabi_dcmpun+0x20>
100161ca:	4904      	ldr	r1, [pc, #16]	; (100161dc <__aeabi_dcmpun+0x3c>)
100161cc:	2000      	movs	r0, #0
100161ce:	428b      	cmp	r3, r1
100161d0:	d1f6      	bne.n	100161c0 <__aeabi_dcmpun+0x20>
100161d2:	4315      	orrs	r5, r2
100161d4:	0028      	movs	r0, r5
100161d6:	1e45      	subs	r5, r0, #1
100161d8:	41a8      	sbcs	r0, r5
100161da:	e7f1      	b.n	100161c0 <__aeabi_dcmpun+0x20>
100161dc:	000007ff 	.word	0x000007ff

100161e0 <__aeabi_d2iz>:
100161e0:	030b      	lsls	r3, r1, #12
100161e2:	b530      	push	{r4, r5, lr}
100161e4:	4d13      	ldr	r5, [pc, #76]	; (10016234 <__aeabi_d2iz+0x54>)
100161e6:	0b1a      	lsrs	r2, r3, #12
100161e8:	004b      	lsls	r3, r1, #1
100161ea:	0d5b      	lsrs	r3, r3, #21
100161ec:	0fc9      	lsrs	r1, r1, #31
100161ee:	2400      	movs	r4, #0
100161f0:	42ab      	cmp	r3, r5
100161f2:	dd11      	ble.n	10016218 <__aeabi_d2iz+0x38>
100161f4:	4c10      	ldr	r4, [pc, #64]	; (10016238 <__aeabi_d2iz+0x58>)
100161f6:	42a3      	cmp	r3, r4
100161f8:	dc10      	bgt.n	1001621c <__aeabi_d2iz+0x3c>
100161fa:	2480      	movs	r4, #128	; 0x80
100161fc:	0364      	lsls	r4, r4, #13
100161fe:	4322      	orrs	r2, r4
10016200:	4c0e      	ldr	r4, [pc, #56]	; (1001623c <__aeabi_d2iz+0x5c>)
10016202:	1ae4      	subs	r4, r4, r3
10016204:	2c1f      	cmp	r4, #31
10016206:	dd0c      	ble.n	10016222 <__aeabi_d2iz+0x42>
10016208:	480d      	ldr	r0, [pc, #52]	; (10016240 <__aeabi_d2iz+0x60>)
1001620a:	1ac3      	subs	r3, r0, r3
1001620c:	40da      	lsrs	r2, r3
1001620e:	0013      	movs	r3, r2
10016210:	425c      	negs	r4, r3
10016212:	2900      	cmp	r1, #0
10016214:	d100      	bne.n	10016218 <__aeabi_d2iz+0x38>
10016216:	001c      	movs	r4, r3
10016218:	0020      	movs	r0, r4
1001621a:	bd30      	pop	{r4, r5, pc}
1001621c:	4b09      	ldr	r3, [pc, #36]	; (10016244 <__aeabi_d2iz+0x64>)
1001621e:	18cc      	adds	r4, r1, r3
10016220:	e7fa      	b.n	10016218 <__aeabi_d2iz+0x38>
10016222:	40e0      	lsrs	r0, r4
10016224:	4c08      	ldr	r4, [pc, #32]	; (10016248 <__aeabi_d2iz+0x68>)
10016226:	46a4      	mov	ip, r4
10016228:	4463      	add	r3, ip
1001622a:	409a      	lsls	r2, r3
1001622c:	0013      	movs	r3, r2
1001622e:	4303      	orrs	r3, r0
10016230:	e7ee      	b.n	10016210 <__aeabi_d2iz+0x30>
10016232:	46c0      	nop			; (mov r8, r8)
10016234:	000003fe 	.word	0x000003fe
10016238:	0000041d 	.word	0x0000041d
1001623c:	00000433 	.word	0x00000433
10016240:	00000413 	.word	0x00000413
10016244:	7fffffff 	.word	0x7fffffff
10016248:	fffffbed 	.word	0xfffffbed

1001624c <__aeabi_i2d>:
1001624c:	b570      	push	{r4, r5, r6, lr}
1001624e:	2800      	cmp	r0, #0
10016250:	d030      	beq.n	100162b4 <__aeabi_i2d+0x68>
10016252:	17c3      	asrs	r3, r0, #31
10016254:	18c4      	adds	r4, r0, r3
10016256:	405c      	eors	r4, r3
10016258:	0fc5      	lsrs	r5, r0, #31
1001625a:	0020      	movs	r0, r4
1001625c:	f000 f950 	bl	10016500 <__clzsi2>
10016260:	4b17      	ldr	r3, [pc, #92]	; (100162c0 <__aeabi_i2d+0x74>)
10016262:	4a18      	ldr	r2, [pc, #96]	; (100162c4 <__aeabi_i2d+0x78>)
10016264:	1a1b      	subs	r3, r3, r0
10016266:	1ad2      	subs	r2, r2, r3
10016268:	2a1f      	cmp	r2, #31
1001626a:	dd18      	ble.n	1001629e <__aeabi_i2d+0x52>
1001626c:	4a16      	ldr	r2, [pc, #88]	; (100162c8 <__aeabi_i2d+0x7c>)
1001626e:	1ad2      	subs	r2, r2, r3
10016270:	4094      	lsls	r4, r2
10016272:	2200      	movs	r2, #0
10016274:	0324      	lsls	r4, r4, #12
10016276:	055b      	lsls	r3, r3, #21
10016278:	0b24      	lsrs	r4, r4, #12
1001627a:	0d5b      	lsrs	r3, r3, #21
1001627c:	2100      	movs	r1, #0
1001627e:	0010      	movs	r0, r2
10016280:	0324      	lsls	r4, r4, #12
10016282:	0d0a      	lsrs	r2, r1, #20
10016284:	0512      	lsls	r2, r2, #20
10016286:	0b24      	lsrs	r4, r4, #12
10016288:	4314      	orrs	r4, r2
1001628a:	4a10      	ldr	r2, [pc, #64]	; (100162cc <__aeabi_i2d+0x80>)
1001628c:	051b      	lsls	r3, r3, #20
1001628e:	4014      	ands	r4, r2
10016290:	431c      	orrs	r4, r3
10016292:	0064      	lsls	r4, r4, #1
10016294:	07ed      	lsls	r5, r5, #31
10016296:	0864      	lsrs	r4, r4, #1
10016298:	432c      	orrs	r4, r5
1001629a:	0021      	movs	r1, r4
1001629c:	bd70      	pop	{r4, r5, r6, pc}
1001629e:	0021      	movs	r1, r4
100162a0:	4091      	lsls	r1, r2
100162a2:	000a      	movs	r2, r1
100162a4:	210b      	movs	r1, #11
100162a6:	1a08      	subs	r0, r1, r0
100162a8:	40c4      	lsrs	r4, r0
100162aa:	055b      	lsls	r3, r3, #21
100162ac:	0324      	lsls	r4, r4, #12
100162ae:	0b24      	lsrs	r4, r4, #12
100162b0:	0d5b      	lsrs	r3, r3, #21
100162b2:	e7e3      	b.n	1001627c <__aeabi_i2d+0x30>
100162b4:	2500      	movs	r5, #0
100162b6:	2300      	movs	r3, #0
100162b8:	2400      	movs	r4, #0
100162ba:	2200      	movs	r2, #0
100162bc:	e7de      	b.n	1001627c <__aeabi_i2d+0x30>
100162be:	46c0      	nop			; (mov r8, r8)
100162c0:	0000041e 	.word	0x0000041e
100162c4:	00000433 	.word	0x00000433
100162c8:	00000413 	.word	0x00000413
100162cc:	800fffff 	.word	0x800fffff

100162d0 <__aeabi_ui2d>:
100162d0:	b570      	push	{r4, r5, r6, lr}
100162d2:	1e05      	subs	r5, r0, #0
100162d4:	d028      	beq.n	10016328 <__aeabi_ui2d+0x58>
100162d6:	f000 f913 	bl	10016500 <__clzsi2>
100162da:	4b15      	ldr	r3, [pc, #84]	; (10016330 <__aeabi_ui2d+0x60>)
100162dc:	4a15      	ldr	r2, [pc, #84]	; (10016334 <__aeabi_ui2d+0x64>)
100162de:	1a1b      	subs	r3, r3, r0
100162e0:	1ad2      	subs	r2, r2, r3
100162e2:	2a1f      	cmp	r2, #31
100162e4:	dd16      	ble.n	10016314 <__aeabi_ui2d+0x44>
100162e6:	002c      	movs	r4, r5
100162e8:	4a13      	ldr	r2, [pc, #76]	; (10016338 <__aeabi_ui2d+0x68>)
100162ea:	2500      	movs	r5, #0
100162ec:	1ad2      	subs	r2, r2, r3
100162ee:	4094      	lsls	r4, r2
100162f0:	055a      	lsls	r2, r3, #21
100162f2:	0324      	lsls	r4, r4, #12
100162f4:	0b24      	lsrs	r4, r4, #12
100162f6:	0d52      	lsrs	r2, r2, #21
100162f8:	2100      	movs	r1, #0
100162fa:	0324      	lsls	r4, r4, #12
100162fc:	0d0b      	lsrs	r3, r1, #20
100162fe:	0b24      	lsrs	r4, r4, #12
10016300:	051b      	lsls	r3, r3, #20
10016302:	4323      	orrs	r3, r4
10016304:	4c0d      	ldr	r4, [pc, #52]	; (1001633c <__aeabi_ui2d+0x6c>)
10016306:	0512      	lsls	r2, r2, #20
10016308:	4023      	ands	r3, r4
1001630a:	4313      	orrs	r3, r2
1001630c:	005b      	lsls	r3, r3, #1
1001630e:	0028      	movs	r0, r5
10016310:	0859      	lsrs	r1, r3, #1
10016312:	bd70      	pop	{r4, r5, r6, pc}
10016314:	210b      	movs	r1, #11
10016316:	002c      	movs	r4, r5
10016318:	1a08      	subs	r0, r1, r0
1001631a:	40c4      	lsrs	r4, r0
1001631c:	4095      	lsls	r5, r2
1001631e:	0324      	lsls	r4, r4, #12
10016320:	055a      	lsls	r2, r3, #21
10016322:	0b24      	lsrs	r4, r4, #12
10016324:	0d52      	lsrs	r2, r2, #21
10016326:	e7e7      	b.n	100162f8 <__aeabi_ui2d+0x28>
10016328:	2200      	movs	r2, #0
1001632a:	2400      	movs	r4, #0
1001632c:	e7e4      	b.n	100162f8 <__aeabi_ui2d+0x28>
1001632e:	46c0      	nop			; (mov r8, r8)
10016330:	0000041e 	.word	0x0000041e
10016334:	00000433 	.word	0x00000433
10016338:	00000413 	.word	0x00000413
1001633c:	800fffff 	.word	0x800fffff

10016340 <__aeabi_f2d>:
10016340:	0042      	lsls	r2, r0, #1
10016342:	0e12      	lsrs	r2, r2, #24
10016344:	1c51      	adds	r1, r2, #1
10016346:	0243      	lsls	r3, r0, #9
10016348:	b2c9      	uxtb	r1, r1
1001634a:	b570      	push	{r4, r5, r6, lr}
1001634c:	0a5d      	lsrs	r5, r3, #9
1001634e:	0fc4      	lsrs	r4, r0, #31
10016350:	2901      	cmp	r1, #1
10016352:	dd15      	ble.n	10016380 <__aeabi_f2d+0x40>
10016354:	21e0      	movs	r1, #224	; 0xe0
10016356:	0089      	lsls	r1, r1, #2
10016358:	468c      	mov	ip, r1
1001635a:	076d      	lsls	r5, r5, #29
1001635c:	0b1b      	lsrs	r3, r3, #12
1001635e:	4462      	add	r2, ip
10016360:	2100      	movs	r1, #0
10016362:	0028      	movs	r0, r5
10016364:	0d0d      	lsrs	r5, r1, #20
10016366:	052d      	lsls	r5, r5, #20
10016368:	432b      	orrs	r3, r5
1001636a:	4d1c      	ldr	r5, [pc, #112]	; (100163dc <__aeabi_f2d+0x9c>)
1001636c:	0552      	lsls	r2, r2, #21
1001636e:	402b      	ands	r3, r5
10016370:	0852      	lsrs	r2, r2, #1
10016372:	4313      	orrs	r3, r2
10016374:	005b      	lsls	r3, r3, #1
10016376:	07e4      	lsls	r4, r4, #31
10016378:	085b      	lsrs	r3, r3, #1
1001637a:	4323      	orrs	r3, r4
1001637c:	0019      	movs	r1, r3
1001637e:	bd70      	pop	{r4, r5, r6, pc}
10016380:	2a00      	cmp	r2, #0
10016382:	d115      	bne.n	100163b0 <__aeabi_f2d+0x70>
10016384:	2d00      	cmp	r5, #0
10016386:	d01f      	beq.n	100163c8 <__aeabi_f2d+0x88>
10016388:	0028      	movs	r0, r5
1001638a:	f000 f8b9 	bl	10016500 <__clzsi2>
1001638e:	280a      	cmp	r0, #10
10016390:	dc1d      	bgt.n	100163ce <__aeabi_f2d+0x8e>
10016392:	230b      	movs	r3, #11
10016394:	002a      	movs	r2, r5
10016396:	1a1b      	subs	r3, r3, r0
10016398:	40da      	lsrs	r2, r3
1001639a:	0013      	movs	r3, r2
1001639c:	0002      	movs	r2, r0
1001639e:	3215      	adds	r2, #21
100163a0:	4095      	lsls	r5, r2
100163a2:	4a0f      	ldr	r2, [pc, #60]	; (100163e0 <__aeabi_f2d+0xa0>)
100163a4:	031b      	lsls	r3, r3, #12
100163a6:	1a12      	subs	r2, r2, r0
100163a8:	0552      	lsls	r2, r2, #21
100163aa:	0b1b      	lsrs	r3, r3, #12
100163ac:	0d52      	lsrs	r2, r2, #21
100163ae:	e7d7      	b.n	10016360 <__aeabi_f2d+0x20>
100163b0:	2d00      	cmp	r5, #0
100163b2:	d006      	beq.n	100163c2 <__aeabi_f2d+0x82>
100163b4:	2280      	movs	r2, #128	; 0x80
100163b6:	0b1b      	lsrs	r3, r3, #12
100163b8:	0312      	lsls	r2, r2, #12
100163ba:	4313      	orrs	r3, r2
100163bc:	076d      	lsls	r5, r5, #29
100163be:	4a09      	ldr	r2, [pc, #36]	; (100163e4 <__aeabi_f2d+0xa4>)
100163c0:	e7ce      	b.n	10016360 <__aeabi_f2d+0x20>
100163c2:	4a08      	ldr	r2, [pc, #32]	; (100163e4 <__aeabi_f2d+0xa4>)
100163c4:	2300      	movs	r3, #0
100163c6:	e7cb      	b.n	10016360 <__aeabi_f2d+0x20>
100163c8:	2200      	movs	r2, #0
100163ca:	2300      	movs	r3, #0
100163cc:	e7c8      	b.n	10016360 <__aeabi_f2d+0x20>
100163ce:	0003      	movs	r3, r0
100163d0:	3b0b      	subs	r3, #11
100163d2:	409d      	lsls	r5, r3
100163d4:	002b      	movs	r3, r5
100163d6:	2500      	movs	r5, #0
100163d8:	e7e3      	b.n	100163a2 <__aeabi_f2d+0x62>
100163da:	46c0      	nop			; (mov r8, r8)
100163dc:	800fffff 	.word	0x800fffff
100163e0:	00000389 	.word	0x00000389
100163e4:	000007ff 	.word	0x000007ff

100163e8 <__aeabi_d2f>:
100163e8:	004b      	lsls	r3, r1, #1
100163ea:	b570      	push	{r4, r5, r6, lr}
100163ec:	0d5e      	lsrs	r6, r3, #21
100163ee:	030c      	lsls	r4, r1, #12
100163f0:	1c75      	adds	r5, r6, #1
100163f2:	0a64      	lsrs	r4, r4, #9
100163f4:	0f42      	lsrs	r2, r0, #29
100163f6:	056d      	lsls	r5, r5, #21
100163f8:	4322      	orrs	r2, r4
100163fa:	0fc9      	lsrs	r1, r1, #31
100163fc:	00c4      	lsls	r4, r0, #3
100163fe:	0d6d      	lsrs	r5, r5, #21
10016400:	2d01      	cmp	r5, #1
10016402:	dd2a      	ble.n	1001645a <__aeabi_d2f+0x72>
10016404:	4b3b      	ldr	r3, [pc, #236]	; (100164f4 <__aeabi_d2f+0x10c>)
10016406:	18f3      	adds	r3, r6, r3
10016408:	2bfe      	cmp	r3, #254	; 0xfe
1001640a:	dc1a      	bgt.n	10016442 <__aeabi_d2f+0x5a>
1001640c:	2b00      	cmp	r3, #0
1001640e:	dd42      	ble.n	10016496 <__aeabi_d2f+0xae>
10016410:	0180      	lsls	r0, r0, #6
10016412:	1e45      	subs	r5, r0, #1
10016414:	41a8      	sbcs	r0, r5
10016416:	00d2      	lsls	r2, r2, #3
10016418:	4310      	orrs	r0, r2
1001641a:	0f62      	lsrs	r2, r4, #29
1001641c:	4302      	orrs	r2, r0
1001641e:	0750      	lsls	r0, r2, #29
10016420:	d004      	beq.n	1001642c <__aeabi_d2f+0x44>
10016422:	200f      	movs	r0, #15
10016424:	4010      	ands	r0, r2
10016426:	2804      	cmp	r0, #4
10016428:	d000      	beq.n	1001642c <__aeabi_d2f+0x44>
1001642a:	3204      	adds	r2, #4
1001642c:	2080      	movs	r0, #128	; 0x80
1001642e:	04c0      	lsls	r0, r0, #19
10016430:	4010      	ands	r0, r2
10016432:	d021      	beq.n	10016478 <__aeabi_d2f+0x90>
10016434:	3301      	adds	r3, #1
10016436:	2bff      	cmp	r3, #255	; 0xff
10016438:	d003      	beq.n	10016442 <__aeabi_d2f+0x5a>
1001643a:	0192      	lsls	r2, r2, #6
1001643c:	0a52      	lsrs	r2, r2, #9
1001643e:	b2db      	uxtb	r3, r3
10016440:	e001      	b.n	10016446 <__aeabi_d2f+0x5e>
10016442:	23ff      	movs	r3, #255	; 0xff
10016444:	2200      	movs	r2, #0
10016446:	0252      	lsls	r2, r2, #9
10016448:	0a52      	lsrs	r2, r2, #9
1001644a:	05db      	lsls	r3, r3, #23
1001644c:	4313      	orrs	r3, r2
1001644e:	005b      	lsls	r3, r3, #1
10016450:	07c9      	lsls	r1, r1, #31
10016452:	085b      	lsrs	r3, r3, #1
10016454:	430b      	orrs	r3, r1
10016456:	0018      	movs	r0, r3
10016458:	bd70      	pop	{r4, r5, r6, pc}
1001645a:	2e00      	cmp	r6, #0
1001645c:	d007      	beq.n	1001646e <__aeabi_d2f+0x86>
1001645e:	4314      	orrs	r4, r2
10016460:	d0ef      	beq.n	10016442 <__aeabi_d2f+0x5a>
10016462:	2080      	movs	r0, #128	; 0x80
10016464:	00d2      	lsls	r2, r2, #3
10016466:	0480      	lsls	r0, r0, #18
10016468:	4302      	orrs	r2, r0
1001646a:	23ff      	movs	r3, #255	; 0xff
1001646c:	e7d7      	b.n	1001641e <__aeabi_d2f+0x36>
1001646e:	4322      	orrs	r2, r4
10016470:	2300      	movs	r3, #0
10016472:	2a00      	cmp	r2, #0
10016474:	d003      	beq.n	1001647e <__aeabi_d2f+0x96>
10016476:	2205      	movs	r2, #5
10016478:	08d2      	lsrs	r2, r2, #3
1001647a:	2bff      	cmp	r3, #255	; 0xff
1001647c:	d003      	beq.n	10016486 <__aeabi_d2f+0x9e>
1001647e:	0252      	lsls	r2, r2, #9
10016480:	0a52      	lsrs	r2, r2, #9
10016482:	b2db      	uxtb	r3, r3
10016484:	e7df      	b.n	10016446 <__aeabi_d2f+0x5e>
10016486:	2a00      	cmp	r2, #0
10016488:	d032      	beq.n	100164f0 <__aeabi_d2f+0x108>
1001648a:	2080      	movs	r0, #128	; 0x80
1001648c:	03c0      	lsls	r0, r0, #15
1001648e:	4302      	orrs	r2, r0
10016490:	0252      	lsls	r2, r2, #9
10016492:	0a52      	lsrs	r2, r2, #9
10016494:	e7d7      	b.n	10016446 <__aeabi_d2f+0x5e>
10016496:	0018      	movs	r0, r3
10016498:	3017      	adds	r0, #23
1001649a:	db14      	blt.n	100164c6 <__aeabi_d2f+0xde>
1001649c:	2080      	movs	r0, #128	; 0x80
1001649e:	0400      	lsls	r0, r0, #16
100164a0:	4302      	orrs	r2, r0
100164a2:	201e      	movs	r0, #30
100164a4:	1ac0      	subs	r0, r0, r3
100164a6:	281f      	cmp	r0, #31
100164a8:	dc0f      	bgt.n	100164ca <__aeabi_d2f+0xe2>
100164aa:	0025      	movs	r5, r4
100164ac:	4b12      	ldr	r3, [pc, #72]	; (100164f8 <__aeabi_d2f+0x110>)
100164ae:	18f3      	adds	r3, r6, r3
100164b0:	409d      	lsls	r5, r3
100164b2:	1e6e      	subs	r6, r5, #1
100164b4:	41b5      	sbcs	r5, r6
100164b6:	409a      	lsls	r2, r3
100164b8:	002b      	movs	r3, r5
100164ba:	4313      	orrs	r3, r2
100164bc:	0022      	movs	r2, r4
100164be:	40c2      	lsrs	r2, r0
100164c0:	431a      	orrs	r2, r3
100164c2:	2300      	movs	r3, #0
100164c4:	e7ab      	b.n	1001641e <__aeabi_d2f+0x36>
100164c6:	2300      	movs	r3, #0
100164c8:	e7d5      	b.n	10016476 <__aeabi_d2f+0x8e>
100164ca:	2502      	movs	r5, #2
100164cc:	426d      	negs	r5, r5
100164ce:	1aeb      	subs	r3, r5, r3
100164d0:	0015      	movs	r5, r2
100164d2:	40dd      	lsrs	r5, r3
100164d4:	2820      	cmp	r0, #32
100164d6:	d009      	beq.n	100164ec <__aeabi_d2f+0x104>
100164d8:	4b08      	ldr	r3, [pc, #32]	; (100164fc <__aeabi_d2f+0x114>)
100164da:	18f3      	adds	r3, r6, r3
100164dc:	409a      	lsls	r2, r3
100164de:	4314      	orrs	r4, r2
100164e0:	1e62      	subs	r2, r4, #1
100164e2:	4194      	sbcs	r4, r2
100164e4:	0022      	movs	r2, r4
100164e6:	2300      	movs	r3, #0
100164e8:	432a      	orrs	r2, r5
100164ea:	e798      	b.n	1001641e <__aeabi_d2f+0x36>
100164ec:	2200      	movs	r2, #0
100164ee:	e7f6      	b.n	100164de <__aeabi_d2f+0xf6>
100164f0:	2200      	movs	r2, #0
100164f2:	e7a8      	b.n	10016446 <__aeabi_d2f+0x5e>
100164f4:	fffffc80 	.word	0xfffffc80
100164f8:	fffffc82 	.word	0xfffffc82
100164fc:	fffffca2 	.word	0xfffffca2

10016500 <__clzsi2>:
10016500:	211c      	movs	r1, #28
10016502:	2301      	movs	r3, #1
10016504:	041b      	lsls	r3, r3, #16
10016506:	4298      	cmp	r0, r3
10016508:	d301      	bcc.n	1001650e <__clzsi2+0xe>
1001650a:	0c00      	lsrs	r0, r0, #16
1001650c:	3910      	subs	r1, #16
1001650e:	0a1b      	lsrs	r3, r3, #8
10016510:	4298      	cmp	r0, r3
10016512:	d301      	bcc.n	10016518 <__clzsi2+0x18>
10016514:	0a00      	lsrs	r0, r0, #8
10016516:	3908      	subs	r1, #8
10016518:	091b      	lsrs	r3, r3, #4
1001651a:	4298      	cmp	r0, r3
1001651c:	d301      	bcc.n	10016522 <__clzsi2+0x22>
1001651e:	0900      	lsrs	r0, r0, #4
10016520:	3904      	subs	r1, #4
10016522:	a202      	add	r2, pc, #8	; (adr r2, 1001652c <__clzsi2+0x2c>)
10016524:	5c10      	ldrb	r0, [r2, r0]
10016526:	1840      	adds	r0, r0, r1
10016528:	4770      	bx	lr
1001652a:	46c0      	nop			; (mov r8, r8)
1001652c:	02020304 	.word	0x02020304
10016530:	01010101 	.word	0x01010101
	...

1001653c <__errno>:
1001653c:	4b01      	ldr	r3, [pc, #4]	; (10016544 <__errno+0x8>)
1001653e:	6818      	ldr	r0, [r3, #0]
10016540:	4770      	bx	lr
10016542:	46c0      	nop			; (mov r8, r8)
10016544:	10018934 	.word	0x10018934

10016548 <__libc_init_array>:
10016548:	4b0e      	ldr	r3, [pc, #56]	; (10016584 <__libc_init_array+0x3c>)
1001654a:	b570      	push	{r4, r5, r6, lr}
1001654c:	2500      	movs	r5, #0
1001654e:	001e      	movs	r6, r3
10016550:	4c0d      	ldr	r4, [pc, #52]	; (10016588 <__libc_init_array+0x40>)
10016552:	1ae4      	subs	r4, r4, r3
10016554:	10a4      	asrs	r4, r4, #2
10016556:	42a5      	cmp	r5, r4
10016558:	d004      	beq.n	10016564 <__libc_init_array+0x1c>
1001655a:	00ab      	lsls	r3, r5, #2
1001655c:	58f3      	ldr	r3, [r6, r3]
1001655e:	4798      	blx	r3
10016560:	3501      	adds	r5, #1
10016562:	e7f8      	b.n	10016556 <__libc_init_array+0xe>
10016564:	f002 f99e 	bl	100188a4 <_init>
10016568:	4b08      	ldr	r3, [pc, #32]	; (1001658c <__libc_init_array+0x44>)
1001656a:	2500      	movs	r5, #0
1001656c:	001e      	movs	r6, r3
1001656e:	4c08      	ldr	r4, [pc, #32]	; (10016590 <__libc_init_array+0x48>)
10016570:	1ae4      	subs	r4, r4, r3
10016572:	10a4      	asrs	r4, r4, #2
10016574:	42a5      	cmp	r5, r4
10016576:	d004      	beq.n	10016582 <__libc_init_array+0x3a>
10016578:	00ab      	lsls	r3, r5, #2
1001657a:	58f3      	ldr	r3, [r6, r3]
1001657c:	4798      	blx	r3
1001657e:	3501      	adds	r5, #1
10016580:	e7f8      	b.n	10016574 <__libc_init_array+0x2c>
10016582:	bd70      	pop	{r4, r5, r6, pc}
10016584:	100188b0 	.word	0x100188b0
10016588:	100188b0 	.word	0x100188b0
1001658c:	100188b0 	.word	0x100188b0
10016590:	100188b4 	.word	0x100188b4

10016594 <malloc>:
10016594:	b510      	push	{r4, lr}
10016596:	4b03      	ldr	r3, [pc, #12]	; (100165a4 <malloc+0x10>)
10016598:	0001      	movs	r1, r0
1001659a:	6818      	ldr	r0, [r3, #0]
1001659c:	f000 f86a 	bl	10016674 <_malloc_r>
100165a0:	bd10      	pop	{r4, pc}
100165a2:	46c0      	nop			; (mov r8, r8)
100165a4:	10018934 	.word	0x10018934

100165a8 <memcmp>:
100165a8:	b530      	push	{r4, r5, lr}
100165aa:	2400      	movs	r4, #0
100165ac:	42a2      	cmp	r2, r4
100165ae:	d008      	beq.n	100165c2 <memcmp+0x1a>
100165b0:	5d03      	ldrb	r3, [r0, r4]
100165b2:	1c65      	adds	r5, r4, #1
100165b4:	5d0c      	ldrb	r4, [r1, r4]
100165b6:	42a3      	cmp	r3, r4
100165b8:	d001      	beq.n	100165be <memcmp+0x16>
100165ba:	1b18      	subs	r0, r3, r4
100165bc:	e002      	b.n	100165c4 <memcmp+0x1c>
100165be:	002c      	movs	r4, r5
100165c0:	e7f4      	b.n	100165ac <memcmp+0x4>
100165c2:	2000      	movs	r0, #0
100165c4:	bd30      	pop	{r4, r5, pc}

100165c6 <memcpy>:
100165c6:	2300      	movs	r3, #0
100165c8:	b510      	push	{r4, lr}
100165ca:	429a      	cmp	r2, r3
100165cc:	d003      	beq.n	100165d6 <memcpy+0x10>
100165ce:	5ccc      	ldrb	r4, [r1, r3]
100165d0:	54c4      	strb	r4, [r0, r3]
100165d2:	3301      	adds	r3, #1
100165d4:	e7f9      	b.n	100165ca <memcpy+0x4>
100165d6:	bd10      	pop	{r4, pc}

100165d8 <memset>:
100165d8:	0003      	movs	r3, r0
100165da:	1882      	adds	r2, r0, r2
100165dc:	4293      	cmp	r3, r2
100165de:	d002      	beq.n	100165e6 <memset+0xe>
100165e0:	7019      	strb	r1, [r3, #0]
100165e2:	3301      	adds	r3, #1
100165e4:	e7fa      	b.n	100165dc <memset+0x4>
100165e6:	4770      	bx	lr

100165e8 <_free_r>:
100165e8:	b530      	push	{r4, r5, lr}
100165ea:	2900      	cmp	r1, #0
100165ec:	d03e      	beq.n	1001666c <_free_r+0x84>
100165ee:	3904      	subs	r1, #4
100165f0:	680b      	ldr	r3, [r1, #0]
100165f2:	2b00      	cmp	r3, #0
100165f4:	da00      	bge.n	100165f8 <_free_r+0x10>
100165f6:	18c9      	adds	r1, r1, r3
100165f8:	4a1d      	ldr	r2, [pc, #116]	; (10016670 <_free_r+0x88>)
100165fa:	6813      	ldr	r3, [r2, #0]
100165fc:	0014      	movs	r4, r2
100165fe:	2b00      	cmp	r3, #0
10016600:	d102      	bne.n	10016608 <_free_r+0x20>
10016602:	604b      	str	r3, [r1, #4]
10016604:	6011      	str	r1, [r2, #0]
10016606:	e031      	b.n	1001666c <_free_r+0x84>
10016608:	428b      	cmp	r3, r1
1001660a:	d90d      	bls.n	10016628 <_free_r+0x40>
1001660c:	680a      	ldr	r2, [r1, #0]
1001660e:	1888      	adds	r0, r1, r2
10016610:	4283      	cmp	r3, r0
10016612:	d103      	bne.n	1001661c <_free_r+0x34>
10016614:	6818      	ldr	r0, [r3, #0]
10016616:	685b      	ldr	r3, [r3, #4]
10016618:	1882      	adds	r2, r0, r2
1001661a:	600a      	str	r2, [r1, #0]
1001661c:	604b      	str	r3, [r1, #4]
1001661e:	6021      	str	r1, [r4, #0]
10016620:	e024      	b.n	1001666c <_free_r+0x84>
10016622:	428a      	cmp	r2, r1
10016624:	d803      	bhi.n	1001662e <_free_r+0x46>
10016626:	0013      	movs	r3, r2
10016628:	685a      	ldr	r2, [r3, #4]
1001662a:	2a00      	cmp	r2, #0
1001662c:	d1f9      	bne.n	10016622 <_free_r+0x3a>
1001662e:	681d      	ldr	r5, [r3, #0]
10016630:	195c      	adds	r4, r3, r5
10016632:	428c      	cmp	r4, r1
10016634:	d10b      	bne.n	1001664e <_free_r+0x66>
10016636:	6809      	ldr	r1, [r1, #0]
10016638:	1869      	adds	r1, r5, r1
1001663a:	1858      	adds	r0, r3, r1
1001663c:	6019      	str	r1, [r3, #0]
1001663e:	4282      	cmp	r2, r0
10016640:	d114      	bne.n	1001666c <_free_r+0x84>
10016642:	6810      	ldr	r0, [r2, #0]
10016644:	6852      	ldr	r2, [r2, #4]
10016646:	1841      	adds	r1, r0, r1
10016648:	6019      	str	r1, [r3, #0]
1001664a:	605a      	str	r2, [r3, #4]
1001664c:	e00e      	b.n	1001666c <_free_r+0x84>
1001664e:	428c      	cmp	r4, r1
10016650:	d902      	bls.n	10016658 <_free_r+0x70>
10016652:	230c      	movs	r3, #12
10016654:	6003      	str	r3, [r0, #0]
10016656:	e009      	b.n	1001666c <_free_r+0x84>
10016658:	6808      	ldr	r0, [r1, #0]
1001665a:	180c      	adds	r4, r1, r0
1001665c:	42a2      	cmp	r2, r4
1001665e:	d103      	bne.n	10016668 <_free_r+0x80>
10016660:	6814      	ldr	r4, [r2, #0]
10016662:	6852      	ldr	r2, [r2, #4]
10016664:	1820      	adds	r0, r4, r0
10016666:	6008      	str	r0, [r1, #0]
10016668:	604a      	str	r2, [r1, #4]
1001666a:	6059      	str	r1, [r3, #4]
1001666c:	bd30      	pop	{r4, r5, pc}
1001666e:	46c0      	nop			; (mov r8, r8)
10016670:	1001a404 	.word	0x1001a404

10016674 <_malloc_r>:
10016674:	2303      	movs	r3, #3
10016676:	b570      	push	{r4, r5, r6, lr}
10016678:	1ccd      	adds	r5, r1, #3
1001667a:	439d      	bics	r5, r3
1001667c:	3508      	adds	r5, #8
1001667e:	0006      	movs	r6, r0
10016680:	2d0c      	cmp	r5, #12
10016682:	d201      	bcs.n	10016688 <_malloc_r+0x14>
10016684:	250c      	movs	r5, #12
10016686:	e005      	b.n	10016694 <_malloc_r+0x20>
10016688:	2d00      	cmp	r5, #0
1001668a:	da03      	bge.n	10016694 <_malloc_r+0x20>
1001668c:	230c      	movs	r3, #12
1001668e:	2000      	movs	r0, #0
10016690:	6033      	str	r3, [r6, #0]
10016692:	e040      	b.n	10016716 <_malloc_r+0xa2>
10016694:	42a9      	cmp	r1, r5
10016696:	d8f9      	bhi.n	1001668c <_malloc_r+0x18>
10016698:	4b1f      	ldr	r3, [pc, #124]	; (10016718 <_malloc_r+0xa4>)
1001669a:	681c      	ldr	r4, [r3, #0]
1001669c:	001a      	movs	r2, r3
1001669e:	0021      	movs	r1, r4
100166a0:	2900      	cmp	r1, #0
100166a2:	d013      	beq.n	100166cc <_malloc_r+0x58>
100166a4:	680b      	ldr	r3, [r1, #0]
100166a6:	1b5b      	subs	r3, r3, r5
100166a8:	d40d      	bmi.n	100166c6 <_malloc_r+0x52>
100166aa:	2b0b      	cmp	r3, #11
100166ac:	d902      	bls.n	100166b4 <_malloc_r+0x40>
100166ae:	600b      	str	r3, [r1, #0]
100166b0:	18cc      	adds	r4, r1, r3
100166b2:	e01e      	b.n	100166f2 <_malloc_r+0x7e>
100166b4:	428c      	cmp	r4, r1
100166b6:	d102      	bne.n	100166be <_malloc_r+0x4a>
100166b8:	6863      	ldr	r3, [r4, #4]
100166ba:	6013      	str	r3, [r2, #0]
100166bc:	e01a      	b.n	100166f4 <_malloc_r+0x80>
100166be:	684b      	ldr	r3, [r1, #4]
100166c0:	6063      	str	r3, [r4, #4]
100166c2:	000c      	movs	r4, r1
100166c4:	e016      	b.n	100166f4 <_malloc_r+0x80>
100166c6:	000c      	movs	r4, r1
100166c8:	6849      	ldr	r1, [r1, #4]
100166ca:	e7e9      	b.n	100166a0 <_malloc_r+0x2c>
100166cc:	4c13      	ldr	r4, [pc, #76]	; (1001671c <_malloc_r+0xa8>)
100166ce:	6823      	ldr	r3, [r4, #0]
100166d0:	2b00      	cmp	r3, #0
100166d2:	d103      	bne.n	100166dc <_malloc_r+0x68>
100166d4:	0030      	movs	r0, r6
100166d6:	f000 f8f9 	bl	100168cc <_sbrk_r>
100166da:	6020      	str	r0, [r4, #0]
100166dc:	0029      	movs	r1, r5
100166de:	0030      	movs	r0, r6
100166e0:	f000 f8f4 	bl	100168cc <_sbrk_r>
100166e4:	1c43      	adds	r3, r0, #1
100166e6:	d0d1      	beq.n	1001668c <_malloc_r+0x18>
100166e8:	2303      	movs	r3, #3
100166ea:	1cc4      	adds	r4, r0, #3
100166ec:	439c      	bics	r4, r3
100166ee:	42a0      	cmp	r0, r4
100166f0:	d10a      	bne.n	10016708 <_malloc_r+0x94>
100166f2:	6025      	str	r5, [r4, #0]
100166f4:	0020      	movs	r0, r4
100166f6:	2207      	movs	r2, #7
100166f8:	300b      	adds	r0, #11
100166fa:	1d23      	adds	r3, r4, #4
100166fc:	4390      	bics	r0, r2
100166fe:	1ac3      	subs	r3, r0, r3
10016700:	d009      	beq.n	10016716 <_malloc_r+0xa2>
10016702:	425a      	negs	r2, r3
10016704:	50e2      	str	r2, [r4, r3]
10016706:	e006      	b.n	10016716 <_malloc_r+0xa2>
10016708:	1a21      	subs	r1, r4, r0
1001670a:	0030      	movs	r0, r6
1001670c:	f000 f8de 	bl	100168cc <_sbrk_r>
10016710:	1c43      	adds	r3, r0, #1
10016712:	d1ee      	bne.n	100166f2 <_malloc_r+0x7e>
10016714:	e7ba      	b.n	1001668c <_malloc_r+0x18>
10016716:	bd70      	pop	{r4, r5, r6, pc}
10016718:	1001a404 	.word	0x1001a404
1001671c:	1001a400 	.word	0x1001a400

10016720 <iprintf>:
10016720:	b40f      	push	{r0, r1, r2, r3}
10016722:	4b0b      	ldr	r3, [pc, #44]	; (10016750 <iprintf+0x30>)
10016724:	b513      	push	{r0, r1, r4, lr}
10016726:	681c      	ldr	r4, [r3, #0]
10016728:	2c00      	cmp	r4, #0
1001672a:	d005      	beq.n	10016738 <iprintf+0x18>
1001672c:	69a3      	ldr	r3, [r4, #24]
1001672e:	2b00      	cmp	r3, #0
10016730:	d102      	bne.n	10016738 <iprintf+0x18>
10016732:	0020      	movs	r0, r4
10016734:	f000 fb58 	bl	10016de8 <__sinit>
10016738:	ab05      	add	r3, sp, #20
1001673a:	9a04      	ldr	r2, [sp, #16]
1001673c:	68a1      	ldr	r1, [r4, #8]
1001673e:	0020      	movs	r0, r4
10016740:	9301      	str	r3, [sp, #4]
10016742:	f000 fc71 	bl	10017028 <_vfiprintf_r>
10016746:	bc16      	pop	{r1, r2, r4}
10016748:	bc08      	pop	{r3}
1001674a:	b004      	add	sp, #16
1001674c:	4718      	bx	r3
1001674e:	46c0      	nop			; (mov r8, r8)
10016750:	10018934 	.word	0x10018934

10016754 <putchar>:
10016754:	4b08      	ldr	r3, [pc, #32]	; (10016778 <putchar+0x24>)
10016756:	b570      	push	{r4, r5, r6, lr}
10016758:	681c      	ldr	r4, [r3, #0]
1001675a:	0005      	movs	r5, r0
1001675c:	2c00      	cmp	r4, #0
1001675e:	d005      	beq.n	1001676c <putchar+0x18>
10016760:	69a3      	ldr	r3, [r4, #24]
10016762:	2b00      	cmp	r3, #0
10016764:	d102      	bne.n	1001676c <putchar+0x18>
10016766:	0020      	movs	r0, r4
10016768:	f000 fb3e 	bl	10016de8 <__sinit>
1001676c:	0029      	movs	r1, r5
1001676e:	68a2      	ldr	r2, [r4, #8]
10016770:	0020      	movs	r0, r4
10016772:	f000 ff05 	bl	10017580 <_putc_r>
10016776:	bd70      	pop	{r4, r5, r6, pc}
10016778:	10018934 	.word	0x10018934

1001677c <_puts_r>:
1001677c:	b570      	push	{r4, r5, r6, lr}
1001677e:	0005      	movs	r5, r0
10016780:	000e      	movs	r6, r1
10016782:	2800      	cmp	r0, #0
10016784:	d004      	beq.n	10016790 <_puts_r+0x14>
10016786:	6983      	ldr	r3, [r0, #24]
10016788:	2b00      	cmp	r3, #0
1001678a:	d101      	bne.n	10016790 <_puts_r+0x14>
1001678c:	f000 fb2c 	bl	10016de8 <__sinit>
10016790:	69ab      	ldr	r3, [r5, #24]
10016792:	68ac      	ldr	r4, [r5, #8]
10016794:	2b00      	cmp	r3, #0
10016796:	d102      	bne.n	1001679e <_puts_r+0x22>
10016798:	0028      	movs	r0, r5
1001679a:	f000 fb25 	bl	10016de8 <__sinit>
1001679e:	4b25      	ldr	r3, [pc, #148]	; (10016834 <_puts_r+0xb8>)
100167a0:	429c      	cmp	r4, r3
100167a2:	d101      	bne.n	100167a8 <_puts_r+0x2c>
100167a4:	686c      	ldr	r4, [r5, #4]
100167a6:	e008      	b.n	100167ba <_puts_r+0x3e>
100167a8:	4b23      	ldr	r3, [pc, #140]	; (10016838 <_puts_r+0xbc>)
100167aa:	429c      	cmp	r4, r3
100167ac:	d101      	bne.n	100167b2 <_puts_r+0x36>
100167ae:	68ac      	ldr	r4, [r5, #8]
100167b0:	e003      	b.n	100167ba <_puts_r+0x3e>
100167b2:	4b22      	ldr	r3, [pc, #136]	; (1001683c <_puts_r+0xc0>)
100167b4:	429c      	cmp	r4, r3
100167b6:	d100      	bne.n	100167ba <_puts_r+0x3e>
100167b8:	68ec      	ldr	r4, [r5, #12]
100167ba:	89a3      	ldrh	r3, [r4, #12]
100167bc:	071b      	lsls	r3, r3, #28
100167be:	d502      	bpl.n	100167c6 <_puts_r+0x4a>
100167c0:	6923      	ldr	r3, [r4, #16]
100167c2:	2b00      	cmp	r3, #0
100167c4:	d111      	bne.n	100167ea <_puts_r+0x6e>
100167c6:	0021      	movs	r1, r4
100167c8:	0028      	movs	r0, r5
100167ca:	f000 f9a3 	bl	10016b14 <__swsetup_r>
100167ce:	2800      	cmp	r0, #0
100167d0:	d00b      	beq.n	100167ea <_puts_r+0x6e>
100167d2:	2001      	movs	r0, #1
100167d4:	4240      	negs	r0, r0
100167d6:	e02b      	b.n	10016830 <_puts_r+0xb4>
100167d8:	3b01      	subs	r3, #1
100167da:	3601      	adds	r6, #1
100167dc:	60a3      	str	r3, [r4, #8]
100167de:	2b00      	cmp	r3, #0
100167e0:	db08      	blt.n	100167f4 <_puts_r+0x78>
100167e2:	6823      	ldr	r3, [r4, #0]
100167e4:	1c5a      	adds	r2, r3, #1
100167e6:	6022      	str	r2, [r4, #0]
100167e8:	7019      	strb	r1, [r3, #0]
100167ea:	7831      	ldrb	r1, [r6, #0]
100167ec:	68a3      	ldr	r3, [r4, #8]
100167ee:	2900      	cmp	r1, #0
100167f0:	d1f2      	bne.n	100167d8 <_puts_r+0x5c>
100167f2:	e00b      	b.n	1001680c <_puts_r+0x90>
100167f4:	69a2      	ldr	r2, [r4, #24]
100167f6:	4293      	cmp	r3, r2
100167f8:	db01      	blt.n	100167fe <_puts_r+0x82>
100167fa:	290a      	cmp	r1, #10
100167fc:	d1f1      	bne.n	100167e2 <_puts_r+0x66>
100167fe:	0022      	movs	r2, r4
10016800:	0028      	movs	r0, r5
10016802:	f000 f92f 	bl	10016a64 <__swbuf_r>
10016806:	1c43      	adds	r3, r0, #1
10016808:	d1ef      	bne.n	100167ea <_puts_r+0x6e>
1001680a:	e7e2      	b.n	100167d2 <_puts_r+0x56>
1001680c:	3b01      	subs	r3, #1
1001680e:	60a3      	str	r3, [r4, #8]
10016810:	2b00      	cmp	r3, #0
10016812:	da08      	bge.n	10016826 <_puts_r+0xaa>
10016814:	0022      	movs	r2, r4
10016816:	310a      	adds	r1, #10
10016818:	0028      	movs	r0, r5
1001681a:	f000 f923 	bl	10016a64 <__swbuf_r>
1001681e:	1c43      	adds	r3, r0, #1
10016820:	d0d7      	beq.n	100167d2 <_puts_r+0x56>
10016822:	200a      	movs	r0, #10
10016824:	e004      	b.n	10016830 <_puts_r+0xb4>
10016826:	200a      	movs	r0, #10
10016828:	6823      	ldr	r3, [r4, #0]
1001682a:	1c5a      	adds	r2, r3, #1
1001682c:	6022      	str	r2, [r4, #0]
1001682e:	7018      	strb	r0, [r3, #0]
10016830:	bd70      	pop	{r4, r5, r6, pc}
10016832:	46c0      	nop			; (mov r8, r8)
10016834:	10018810 	.word	0x10018810
10016838:	10018830 	.word	0x10018830
1001683c:	10018850 	.word	0x10018850

10016840 <puts>:
10016840:	b510      	push	{r4, lr}
10016842:	4b03      	ldr	r3, [pc, #12]	; (10016850 <puts+0x10>)
10016844:	0001      	movs	r1, r0
10016846:	6818      	ldr	r0, [r3, #0]
10016848:	f7ff ff98 	bl	1001677c <_puts_r>
1001684c:	bd10      	pop	{r4, pc}
1001684e:	46c0      	nop			; (mov r8, r8)
10016850:	10018934 	.word	0x10018934

10016854 <rand>:
10016854:	4b15      	ldr	r3, [pc, #84]	; (100168ac <rand+0x58>)
10016856:	b510      	push	{r4, lr}
10016858:	681c      	ldr	r4, [r3, #0]
1001685a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1001685c:	2b00      	cmp	r3, #0
1001685e:	d115      	bne.n	1001688c <rand+0x38>
10016860:	2018      	movs	r0, #24
10016862:	f7ff fe97 	bl	10016594 <malloc>
10016866:	4b12      	ldr	r3, [pc, #72]	; (100168b0 <rand+0x5c>)
10016868:	63a0      	str	r0, [r4, #56]	; 0x38
1001686a:	8003      	strh	r3, [r0, #0]
1001686c:	4b11      	ldr	r3, [pc, #68]	; (100168b4 <rand+0x60>)
1001686e:	2201      	movs	r2, #1
10016870:	8043      	strh	r3, [r0, #2]
10016872:	4b11      	ldr	r3, [pc, #68]	; (100168b8 <rand+0x64>)
10016874:	8083      	strh	r3, [r0, #4]
10016876:	4b11      	ldr	r3, [pc, #68]	; (100168bc <rand+0x68>)
10016878:	80c3      	strh	r3, [r0, #6]
1001687a:	4b11      	ldr	r3, [pc, #68]	; (100168c0 <rand+0x6c>)
1001687c:	8103      	strh	r3, [r0, #8]
1001687e:	2305      	movs	r3, #5
10016880:	8143      	strh	r3, [r0, #10]
10016882:	3306      	adds	r3, #6
10016884:	8183      	strh	r3, [r0, #12]
10016886:	2300      	movs	r3, #0
10016888:	6102      	str	r2, [r0, #16]
1001688a:	6143      	str	r3, [r0, #20]
1001688c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
1001688e:	4a0d      	ldr	r2, [pc, #52]	; (100168c4 <rand+0x70>)
10016890:	6920      	ldr	r0, [r4, #16]
10016892:	6961      	ldr	r1, [r4, #20]
10016894:	4b0c      	ldr	r3, [pc, #48]	; (100168c8 <rand+0x74>)
10016896:	f7fd f869 	bl	1001396c <__aeabi_lmul>
1001689a:	2201      	movs	r2, #1
1001689c:	2300      	movs	r3, #0
1001689e:	1880      	adds	r0, r0, r2
100168a0:	4159      	adcs	r1, r3
100168a2:	6120      	str	r0, [r4, #16]
100168a4:	6161      	str	r1, [r4, #20]
100168a6:	0048      	lsls	r0, r1, #1
100168a8:	0840      	lsrs	r0, r0, #1
100168aa:	bd10      	pop	{r4, pc}
100168ac:	10018934 	.word	0x10018934
100168b0:	0000330e 	.word	0x0000330e
100168b4:	ffffabcd 	.word	0xffffabcd
100168b8:	00001234 	.word	0x00001234
100168bc:	ffffe66d 	.word	0xffffe66d
100168c0:	ffffdeec 	.word	0xffffdeec
100168c4:	4c957f2d 	.word	0x4c957f2d
100168c8:	5851f42d 	.word	0x5851f42d

100168cc <_sbrk_r>:
100168cc:	2300      	movs	r3, #0
100168ce:	b570      	push	{r4, r5, r6, lr}
100168d0:	4c06      	ldr	r4, [pc, #24]	; (100168ec <_sbrk_r+0x20>)
100168d2:	0005      	movs	r5, r0
100168d4:	0008      	movs	r0, r1
100168d6:	6023      	str	r3, [r4, #0]
100168d8:	f7f1 fd90 	bl	100083fc <_sbrk>
100168dc:	1c43      	adds	r3, r0, #1
100168de:	d103      	bne.n	100168e8 <_sbrk_r+0x1c>
100168e0:	6823      	ldr	r3, [r4, #0]
100168e2:	2b00      	cmp	r3, #0
100168e4:	d000      	beq.n	100168e8 <_sbrk_r+0x1c>
100168e6:	602b      	str	r3, [r5, #0]
100168e8:	bd70      	pop	{r4, r5, r6, pc}
100168ea:	46c0      	nop			; (mov r8, r8)
100168ec:	1001b82c 	.word	0x1001b82c

100168f0 <setbuf>:
100168f0:	424a      	negs	r2, r1
100168f2:	414a      	adcs	r2, r1
100168f4:	2380      	movs	r3, #128	; 0x80
100168f6:	b510      	push	{r4, lr}
100168f8:	0052      	lsls	r2, r2, #1
100168fa:	00db      	lsls	r3, r3, #3
100168fc:	f000 f802 	bl	10016904 <setvbuf>
10016900:	bd10      	pop	{r4, pc}
	...

10016904 <setvbuf>:
10016904:	b5f0      	push	{r4, r5, r6, r7, lr}
10016906:	001d      	movs	r5, r3
10016908:	4b51      	ldr	r3, [pc, #324]	; (10016a50 <setvbuf+0x14c>)
1001690a:	b085      	sub	sp, #20
1001690c:	681e      	ldr	r6, [r3, #0]
1001690e:	0004      	movs	r4, r0
10016910:	000f      	movs	r7, r1
10016912:	9200      	str	r2, [sp, #0]
10016914:	2e00      	cmp	r6, #0
10016916:	d005      	beq.n	10016924 <setvbuf+0x20>
10016918:	69b3      	ldr	r3, [r6, #24]
1001691a:	2b00      	cmp	r3, #0
1001691c:	d102      	bne.n	10016924 <setvbuf+0x20>
1001691e:	0030      	movs	r0, r6
10016920:	f000 fa62 	bl	10016de8 <__sinit>
10016924:	4b4b      	ldr	r3, [pc, #300]	; (10016a54 <setvbuf+0x150>)
10016926:	429c      	cmp	r4, r3
10016928:	d101      	bne.n	1001692e <setvbuf+0x2a>
1001692a:	6874      	ldr	r4, [r6, #4]
1001692c:	e008      	b.n	10016940 <setvbuf+0x3c>
1001692e:	4b4a      	ldr	r3, [pc, #296]	; (10016a58 <setvbuf+0x154>)
10016930:	429c      	cmp	r4, r3
10016932:	d101      	bne.n	10016938 <setvbuf+0x34>
10016934:	68b4      	ldr	r4, [r6, #8]
10016936:	e003      	b.n	10016940 <setvbuf+0x3c>
10016938:	4b48      	ldr	r3, [pc, #288]	; (10016a5c <setvbuf+0x158>)
1001693a:	429c      	cmp	r4, r3
1001693c:	d100      	bne.n	10016940 <setvbuf+0x3c>
1001693e:	68f4      	ldr	r4, [r6, #12]
10016940:	9b00      	ldr	r3, [sp, #0]
10016942:	2b02      	cmp	r3, #2
10016944:	d005      	beq.n	10016952 <setvbuf+0x4e>
10016946:	2b01      	cmp	r3, #1
10016948:	d900      	bls.n	1001694c <setvbuf+0x48>
1001694a:	e07c      	b.n	10016a46 <setvbuf+0x142>
1001694c:	2d00      	cmp	r5, #0
1001694e:	da00      	bge.n	10016952 <setvbuf+0x4e>
10016950:	e079      	b.n	10016a46 <setvbuf+0x142>
10016952:	0021      	movs	r1, r4
10016954:	0030      	movs	r0, r6
10016956:	f000 f9d9 	bl	10016d0c <_fflush_r>
1001695a:	6b61      	ldr	r1, [r4, #52]	; 0x34
1001695c:	2900      	cmp	r1, #0
1001695e:	d008      	beq.n	10016972 <setvbuf+0x6e>
10016960:	0023      	movs	r3, r4
10016962:	3344      	adds	r3, #68	; 0x44
10016964:	4299      	cmp	r1, r3
10016966:	d002      	beq.n	1001696e <setvbuf+0x6a>
10016968:	0030      	movs	r0, r6
1001696a:	f7ff fe3d 	bl	100165e8 <_free_r>
1001696e:	2300      	movs	r3, #0
10016970:	6363      	str	r3, [r4, #52]	; 0x34
10016972:	2300      	movs	r3, #0
10016974:	61a3      	str	r3, [r4, #24]
10016976:	6063      	str	r3, [r4, #4]
10016978:	89a3      	ldrh	r3, [r4, #12]
1001697a:	061b      	lsls	r3, r3, #24
1001697c:	d503      	bpl.n	10016986 <setvbuf+0x82>
1001697e:	6921      	ldr	r1, [r4, #16]
10016980:	0030      	movs	r0, r6
10016982:	f7ff fe31 	bl	100165e8 <_free_r>
10016986:	89a2      	ldrh	r2, [r4, #12]
10016988:	4b35      	ldr	r3, [pc, #212]	; (10016a60 <setvbuf+0x15c>)
1001698a:	4013      	ands	r3, r2
1001698c:	81a3      	strh	r3, [r4, #12]
1001698e:	9b00      	ldr	r3, [sp, #0]
10016990:	2b02      	cmp	r3, #2
10016992:	d021      	beq.n	100169d8 <setvbuf+0xd4>
10016994:	ab03      	add	r3, sp, #12
10016996:	aa02      	add	r2, sp, #8
10016998:	0021      	movs	r1, r4
1001699a:	0030      	movs	r0, r6
1001699c:	f000 fab8 	bl	10016f10 <__swhatbuf_r>
100169a0:	89a3      	ldrh	r3, [r4, #12]
100169a2:	4318      	orrs	r0, r3
100169a4:	81a0      	strh	r0, [r4, #12]
100169a6:	2d00      	cmp	r5, #0
100169a8:	d101      	bne.n	100169ae <setvbuf+0xaa>
100169aa:	9d02      	ldr	r5, [sp, #8]
100169ac:	e001      	b.n	100169b2 <setvbuf+0xae>
100169ae:	2f00      	cmp	r7, #0
100169b0:	d125      	bne.n	100169fe <setvbuf+0xfa>
100169b2:	0028      	movs	r0, r5
100169b4:	f7ff fdee 	bl	10016594 <malloc>
100169b8:	9501      	str	r5, [sp, #4]
100169ba:	1e07      	subs	r7, r0, #0
100169bc:	d11a      	bne.n	100169f4 <setvbuf+0xf0>
100169be:	9b02      	ldr	r3, [sp, #8]
100169c0:	9301      	str	r3, [sp, #4]
100169c2:	42ab      	cmp	r3, r5
100169c4:	d102      	bne.n	100169cc <setvbuf+0xc8>
100169c6:	2001      	movs	r0, #1
100169c8:	4240      	negs	r0, r0
100169ca:	e006      	b.n	100169da <setvbuf+0xd6>
100169cc:	9801      	ldr	r0, [sp, #4]
100169ce:	f7ff fde1 	bl	10016594 <malloc>
100169d2:	1e07      	subs	r7, r0, #0
100169d4:	d10e      	bne.n	100169f4 <setvbuf+0xf0>
100169d6:	e7f6      	b.n	100169c6 <setvbuf+0xc2>
100169d8:	2000      	movs	r0, #0
100169da:	2202      	movs	r2, #2
100169dc:	89a3      	ldrh	r3, [r4, #12]
100169de:	4313      	orrs	r3, r2
100169e0:	81a3      	strh	r3, [r4, #12]
100169e2:	2300      	movs	r3, #0
100169e4:	60a3      	str	r3, [r4, #8]
100169e6:	0023      	movs	r3, r4
100169e8:	3347      	adds	r3, #71	; 0x47
100169ea:	6023      	str	r3, [r4, #0]
100169ec:	6123      	str	r3, [r4, #16]
100169ee:	2301      	movs	r3, #1
100169f0:	6163      	str	r3, [r4, #20]
100169f2:	e02a      	b.n	10016a4a <setvbuf+0x146>
100169f4:	2280      	movs	r2, #128	; 0x80
100169f6:	89a3      	ldrh	r3, [r4, #12]
100169f8:	9d01      	ldr	r5, [sp, #4]
100169fa:	4313      	orrs	r3, r2
100169fc:	81a3      	strh	r3, [r4, #12]
100169fe:	69b3      	ldr	r3, [r6, #24]
10016a00:	2b00      	cmp	r3, #0
10016a02:	d102      	bne.n	10016a0a <setvbuf+0x106>
10016a04:	0030      	movs	r0, r6
10016a06:	f000 f9ef 	bl	10016de8 <__sinit>
10016a0a:	9b00      	ldr	r3, [sp, #0]
10016a0c:	2b01      	cmp	r3, #1
10016a0e:	d103      	bne.n	10016a18 <setvbuf+0x114>
10016a10:	89a3      	ldrh	r3, [r4, #12]
10016a12:	9a00      	ldr	r2, [sp, #0]
10016a14:	431a      	orrs	r2, r3
10016a16:	81a2      	strh	r2, [r4, #12]
10016a18:	2308      	movs	r3, #8
10016a1a:	89a2      	ldrh	r2, [r4, #12]
10016a1c:	6027      	str	r7, [r4, #0]
10016a1e:	4013      	ands	r3, r2
10016a20:	6127      	str	r7, [r4, #16]
10016a22:	6165      	str	r5, [r4, #20]
10016a24:	1e18      	subs	r0, r3, #0
10016a26:	d00c      	beq.n	10016a42 <setvbuf+0x13e>
10016a28:	2301      	movs	r3, #1
10016a2a:	401a      	ands	r2, r3
10016a2c:	2300      	movs	r3, #0
10016a2e:	1e10      	subs	r0, r2, #0
10016a30:	4298      	cmp	r0, r3
10016a32:	d004      	beq.n	10016a3e <setvbuf+0x13a>
10016a34:	426d      	negs	r5, r5
10016a36:	60a3      	str	r3, [r4, #8]
10016a38:	61a5      	str	r5, [r4, #24]
10016a3a:	0018      	movs	r0, r3
10016a3c:	e005      	b.n	10016a4a <setvbuf+0x146>
10016a3e:	60a5      	str	r5, [r4, #8]
10016a40:	e003      	b.n	10016a4a <setvbuf+0x146>
10016a42:	60a3      	str	r3, [r4, #8]
10016a44:	e001      	b.n	10016a4a <setvbuf+0x146>
10016a46:	2001      	movs	r0, #1
10016a48:	4240      	negs	r0, r0
10016a4a:	b005      	add	sp, #20
10016a4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
10016a4e:	46c0      	nop			; (mov r8, r8)
10016a50:	10018934 	.word	0x10018934
10016a54:	10018810 	.word	0x10018810
10016a58:	10018830 	.word	0x10018830
10016a5c:	10018850 	.word	0x10018850
10016a60:	fffff35c 	.word	0xfffff35c

10016a64 <__swbuf_r>:
10016a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10016a66:	0005      	movs	r5, r0
10016a68:	000f      	movs	r7, r1
10016a6a:	0014      	movs	r4, r2
10016a6c:	2800      	cmp	r0, #0
10016a6e:	d004      	beq.n	10016a7a <__swbuf_r+0x16>
10016a70:	6983      	ldr	r3, [r0, #24]
10016a72:	2b00      	cmp	r3, #0
10016a74:	d101      	bne.n	10016a7a <__swbuf_r+0x16>
10016a76:	f000 f9b7 	bl	10016de8 <__sinit>
10016a7a:	4b23      	ldr	r3, [pc, #140]	; (10016b08 <__swbuf_r+0xa4>)
10016a7c:	429c      	cmp	r4, r3
10016a7e:	d101      	bne.n	10016a84 <__swbuf_r+0x20>
10016a80:	686c      	ldr	r4, [r5, #4]
10016a82:	e008      	b.n	10016a96 <__swbuf_r+0x32>
10016a84:	4b21      	ldr	r3, [pc, #132]	; (10016b0c <__swbuf_r+0xa8>)
10016a86:	429c      	cmp	r4, r3
10016a88:	d101      	bne.n	10016a8e <__swbuf_r+0x2a>
10016a8a:	68ac      	ldr	r4, [r5, #8]
10016a8c:	e003      	b.n	10016a96 <__swbuf_r+0x32>
10016a8e:	4b20      	ldr	r3, [pc, #128]	; (10016b10 <__swbuf_r+0xac>)
10016a90:	429c      	cmp	r4, r3
10016a92:	d100      	bne.n	10016a96 <__swbuf_r+0x32>
10016a94:	68ec      	ldr	r4, [r5, #12]
10016a96:	69a3      	ldr	r3, [r4, #24]
10016a98:	60a3      	str	r3, [r4, #8]
10016a9a:	89a3      	ldrh	r3, [r4, #12]
10016a9c:	071b      	lsls	r3, r3, #28
10016a9e:	d50a      	bpl.n	10016ab6 <__swbuf_r+0x52>
10016aa0:	6923      	ldr	r3, [r4, #16]
10016aa2:	2b00      	cmp	r3, #0
10016aa4:	d007      	beq.n	10016ab6 <__swbuf_r+0x52>
10016aa6:	6823      	ldr	r3, [r4, #0]
10016aa8:	6922      	ldr	r2, [r4, #16]
10016aaa:	b2fe      	uxtb	r6, r7
10016aac:	1a98      	subs	r0, r3, r2
10016aae:	6963      	ldr	r3, [r4, #20]
10016ab0:	4298      	cmp	r0, r3
10016ab2:	db0f      	blt.n	10016ad4 <__swbuf_r+0x70>
10016ab4:	e008      	b.n	10016ac8 <__swbuf_r+0x64>
10016ab6:	0021      	movs	r1, r4
10016ab8:	0028      	movs	r0, r5
10016aba:	f000 f82b 	bl	10016b14 <__swsetup_r>
10016abe:	2800      	cmp	r0, #0
10016ac0:	d0f1      	beq.n	10016aa6 <__swbuf_r+0x42>
10016ac2:	2001      	movs	r0, #1
10016ac4:	4240      	negs	r0, r0
10016ac6:	e01d      	b.n	10016b04 <__swbuf_r+0xa0>
10016ac8:	0021      	movs	r1, r4
10016aca:	0028      	movs	r0, r5
10016acc:	f000 f91e 	bl	10016d0c <_fflush_r>
10016ad0:	2800      	cmp	r0, #0
10016ad2:	d1f6      	bne.n	10016ac2 <__swbuf_r+0x5e>
10016ad4:	68a3      	ldr	r3, [r4, #8]
10016ad6:	3001      	adds	r0, #1
10016ad8:	3b01      	subs	r3, #1
10016ada:	60a3      	str	r3, [r4, #8]
10016adc:	6823      	ldr	r3, [r4, #0]
10016ade:	1c5a      	adds	r2, r3, #1
10016ae0:	6022      	str	r2, [r4, #0]
10016ae2:	701f      	strb	r7, [r3, #0]
10016ae4:	6963      	ldr	r3, [r4, #20]
10016ae6:	4298      	cmp	r0, r3
10016ae8:	d005      	beq.n	10016af6 <__swbuf_r+0x92>
10016aea:	89a3      	ldrh	r3, [r4, #12]
10016aec:	0030      	movs	r0, r6
10016aee:	07db      	lsls	r3, r3, #31
10016af0:	d508      	bpl.n	10016b04 <__swbuf_r+0xa0>
10016af2:	2e0a      	cmp	r6, #10
10016af4:	d106      	bne.n	10016b04 <__swbuf_r+0xa0>
10016af6:	0021      	movs	r1, r4
10016af8:	0028      	movs	r0, r5
10016afa:	f000 f907 	bl	10016d0c <_fflush_r>
10016afe:	2800      	cmp	r0, #0
10016b00:	d1df      	bne.n	10016ac2 <__swbuf_r+0x5e>
10016b02:	0030      	movs	r0, r6
10016b04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10016b06:	46c0      	nop			; (mov r8, r8)
10016b08:	10018810 	.word	0x10018810
10016b0c:	10018830 	.word	0x10018830
10016b10:	10018850 	.word	0x10018850

10016b14 <__swsetup_r>:
10016b14:	4b36      	ldr	r3, [pc, #216]	; (10016bf0 <__swsetup_r+0xdc>)
10016b16:	b570      	push	{r4, r5, r6, lr}
10016b18:	681d      	ldr	r5, [r3, #0]
10016b1a:	0006      	movs	r6, r0
10016b1c:	000c      	movs	r4, r1
10016b1e:	2d00      	cmp	r5, #0
10016b20:	d005      	beq.n	10016b2e <__swsetup_r+0x1a>
10016b22:	69ab      	ldr	r3, [r5, #24]
10016b24:	2b00      	cmp	r3, #0
10016b26:	d102      	bne.n	10016b2e <__swsetup_r+0x1a>
10016b28:	0028      	movs	r0, r5
10016b2a:	f000 f95d 	bl	10016de8 <__sinit>
10016b2e:	4b31      	ldr	r3, [pc, #196]	; (10016bf4 <__swsetup_r+0xe0>)
10016b30:	429c      	cmp	r4, r3
10016b32:	d101      	bne.n	10016b38 <__swsetup_r+0x24>
10016b34:	686c      	ldr	r4, [r5, #4]
10016b36:	e008      	b.n	10016b4a <__swsetup_r+0x36>
10016b38:	4b2f      	ldr	r3, [pc, #188]	; (10016bf8 <__swsetup_r+0xe4>)
10016b3a:	429c      	cmp	r4, r3
10016b3c:	d101      	bne.n	10016b42 <__swsetup_r+0x2e>
10016b3e:	68ac      	ldr	r4, [r5, #8]
10016b40:	e003      	b.n	10016b4a <__swsetup_r+0x36>
10016b42:	4b2e      	ldr	r3, [pc, #184]	; (10016bfc <__swsetup_r+0xe8>)
10016b44:	429c      	cmp	r4, r3
10016b46:	d100      	bne.n	10016b4a <__swsetup_r+0x36>
10016b48:	68ec      	ldr	r4, [r5, #12]
10016b4a:	220c      	movs	r2, #12
10016b4c:	5ea3      	ldrsh	r3, [r4, r2]
10016b4e:	b29a      	uxth	r2, r3
10016b50:	0711      	lsls	r1, r2, #28
10016b52:	d423      	bmi.n	10016b9c <__swsetup_r+0x88>
10016b54:	06d1      	lsls	r1, r2, #27
10016b56:	d407      	bmi.n	10016b68 <__swsetup_r+0x54>
10016b58:	2209      	movs	r2, #9
10016b5a:	2001      	movs	r0, #1
10016b5c:	6032      	str	r2, [r6, #0]
10016b5e:	3237      	adds	r2, #55	; 0x37
10016b60:	4313      	orrs	r3, r2
10016b62:	81a3      	strh	r3, [r4, #12]
10016b64:	4240      	negs	r0, r0
10016b66:	e042      	b.n	10016bee <__swsetup_r+0xda>
10016b68:	0753      	lsls	r3, r2, #29
10016b6a:	d513      	bpl.n	10016b94 <__swsetup_r+0x80>
10016b6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
10016b6e:	2900      	cmp	r1, #0
10016b70:	d008      	beq.n	10016b84 <__swsetup_r+0x70>
10016b72:	0023      	movs	r3, r4
10016b74:	3344      	adds	r3, #68	; 0x44
10016b76:	4299      	cmp	r1, r3
10016b78:	d002      	beq.n	10016b80 <__swsetup_r+0x6c>
10016b7a:	0030      	movs	r0, r6
10016b7c:	f7ff fd34 	bl	100165e8 <_free_r>
10016b80:	2300      	movs	r3, #0
10016b82:	6363      	str	r3, [r4, #52]	; 0x34
10016b84:	2224      	movs	r2, #36	; 0x24
10016b86:	89a3      	ldrh	r3, [r4, #12]
10016b88:	4393      	bics	r3, r2
10016b8a:	81a3      	strh	r3, [r4, #12]
10016b8c:	2300      	movs	r3, #0
10016b8e:	6063      	str	r3, [r4, #4]
10016b90:	6923      	ldr	r3, [r4, #16]
10016b92:	6023      	str	r3, [r4, #0]
10016b94:	2208      	movs	r2, #8
10016b96:	89a3      	ldrh	r3, [r4, #12]
10016b98:	4313      	orrs	r3, r2
10016b9a:	81a3      	strh	r3, [r4, #12]
10016b9c:	6923      	ldr	r3, [r4, #16]
10016b9e:	2b00      	cmp	r3, #0
10016ba0:	d10b      	bne.n	10016bba <__swsetup_r+0xa6>
10016ba2:	23a0      	movs	r3, #160	; 0xa0
10016ba4:	89a2      	ldrh	r2, [r4, #12]
10016ba6:	009b      	lsls	r3, r3, #2
10016ba8:	4013      	ands	r3, r2
10016baa:	2280      	movs	r2, #128	; 0x80
10016bac:	0092      	lsls	r2, r2, #2
10016bae:	4293      	cmp	r3, r2
10016bb0:	d003      	beq.n	10016bba <__swsetup_r+0xa6>
10016bb2:	0021      	movs	r1, r4
10016bb4:	0030      	movs	r0, r6
10016bb6:	f000 f9d1 	bl	10016f5c <__smakebuf_r>
10016bba:	2301      	movs	r3, #1
10016bbc:	89a2      	ldrh	r2, [r4, #12]
10016bbe:	4013      	ands	r3, r2
10016bc0:	d005      	beq.n	10016bce <__swsetup_r+0xba>
10016bc2:	2300      	movs	r3, #0
10016bc4:	60a3      	str	r3, [r4, #8]
10016bc6:	6963      	ldr	r3, [r4, #20]
10016bc8:	425b      	negs	r3, r3
10016bca:	61a3      	str	r3, [r4, #24]
10016bcc:	e003      	b.n	10016bd6 <__swsetup_r+0xc2>
10016bce:	0792      	lsls	r2, r2, #30
10016bd0:	d400      	bmi.n	10016bd4 <__swsetup_r+0xc0>
10016bd2:	6963      	ldr	r3, [r4, #20]
10016bd4:	60a3      	str	r3, [r4, #8]
10016bd6:	2000      	movs	r0, #0
10016bd8:	6923      	ldr	r3, [r4, #16]
10016bda:	4283      	cmp	r3, r0
10016bdc:	d107      	bne.n	10016bee <__swsetup_r+0xda>
10016bde:	220c      	movs	r2, #12
10016be0:	5ea3      	ldrsh	r3, [r4, r2]
10016be2:	061a      	lsls	r2, r3, #24
10016be4:	d503      	bpl.n	10016bee <__swsetup_r+0xda>
10016be6:	2240      	movs	r2, #64	; 0x40
10016be8:	4313      	orrs	r3, r2
10016bea:	81a3      	strh	r3, [r4, #12]
10016bec:	3801      	subs	r0, #1
10016bee:	bd70      	pop	{r4, r5, r6, pc}
10016bf0:	10018934 	.word	0x10018934
10016bf4:	10018810 	.word	0x10018810
10016bf8:	10018830 	.word	0x10018830
10016bfc:	10018850 	.word	0x10018850

10016c00 <__sflush_r>:
10016c00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10016c02:	898a      	ldrh	r2, [r1, #12]
10016c04:	0005      	movs	r5, r0
10016c06:	000c      	movs	r4, r1
10016c08:	0713      	lsls	r3, r2, #28
10016c0a:	d45a      	bmi.n	10016cc2 <__sflush_r+0xc2>
10016c0c:	684b      	ldr	r3, [r1, #4]
10016c0e:	2b00      	cmp	r3, #0
10016c10:	dc02      	bgt.n	10016c18 <__sflush_r+0x18>
10016c12:	6c0b      	ldr	r3, [r1, #64]	; 0x40
10016c14:	2b00      	cmp	r3, #0
10016c16:	dd19      	ble.n	10016c4c <__sflush_r+0x4c>
10016c18:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
10016c1a:	2f00      	cmp	r7, #0
10016c1c:	d016      	beq.n	10016c4c <__sflush_r+0x4c>
10016c1e:	2300      	movs	r3, #0
10016c20:	682e      	ldr	r6, [r5, #0]
10016c22:	602b      	str	r3, [r5, #0]
10016c24:	2380      	movs	r3, #128	; 0x80
10016c26:	015b      	lsls	r3, r3, #5
10016c28:	401a      	ands	r2, r3
10016c2a:	d001      	beq.n	10016c30 <__sflush_r+0x30>
10016c2c:	6d60      	ldr	r0, [r4, #84]	; 0x54
10016c2e:	e014      	b.n	10016c5a <__sflush_r+0x5a>
10016c30:	2301      	movs	r3, #1
10016c32:	6a21      	ldr	r1, [r4, #32]
10016c34:	0028      	movs	r0, r5
10016c36:	47b8      	blx	r7
10016c38:	1c43      	adds	r3, r0, #1
10016c3a:	d10e      	bne.n	10016c5a <__sflush_r+0x5a>
10016c3c:	682b      	ldr	r3, [r5, #0]
10016c3e:	2b00      	cmp	r3, #0
10016c40:	d00b      	beq.n	10016c5a <__sflush_r+0x5a>
10016c42:	2b1d      	cmp	r3, #29
10016c44:	d001      	beq.n	10016c4a <__sflush_r+0x4a>
10016c46:	2b16      	cmp	r3, #22
10016c48:	d102      	bne.n	10016c50 <__sflush_r+0x50>
10016c4a:	602e      	str	r6, [r5, #0]
10016c4c:	2000      	movs	r0, #0
10016c4e:	e05a      	b.n	10016d06 <__sflush_r+0x106>
10016c50:	2240      	movs	r2, #64	; 0x40
10016c52:	89a3      	ldrh	r3, [r4, #12]
10016c54:	4313      	orrs	r3, r2
10016c56:	81a3      	strh	r3, [r4, #12]
10016c58:	e055      	b.n	10016d06 <__sflush_r+0x106>
10016c5a:	89a3      	ldrh	r3, [r4, #12]
10016c5c:	075b      	lsls	r3, r3, #29
10016c5e:	d506      	bpl.n	10016c6e <__sflush_r+0x6e>
10016c60:	6863      	ldr	r3, [r4, #4]
10016c62:	1ac0      	subs	r0, r0, r3
10016c64:	6b63      	ldr	r3, [r4, #52]	; 0x34
10016c66:	2b00      	cmp	r3, #0
10016c68:	d001      	beq.n	10016c6e <__sflush_r+0x6e>
10016c6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
10016c6c:	1ac0      	subs	r0, r0, r3
10016c6e:	2300      	movs	r3, #0
10016c70:	0002      	movs	r2, r0
10016c72:	6a21      	ldr	r1, [r4, #32]
10016c74:	0028      	movs	r0, r5
10016c76:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
10016c78:	47b8      	blx	r7
10016c7a:	89a3      	ldrh	r3, [r4, #12]
10016c7c:	1c42      	adds	r2, r0, #1
10016c7e:	d106      	bne.n	10016c8e <__sflush_r+0x8e>
10016c80:	6829      	ldr	r1, [r5, #0]
10016c82:	291d      	cmp	r1, #29
10016c84:	d83a      	bhi.n	10016cfc <__sflush_r+0xfc>
10016c86:	4a20      	ldr	r2, [pc, #128]	; (10016d08 <__sflush_r+0x108>)
10016c88:	40ca      	lsrs	r2, r1
10016c8a:	07d2      	lsls	r2, r2, #31
10016c8c:	d536      	bpl.n	10016cfc <__sflush_r+0xfc>
10016c8e:	2200      	movs	r2, #0
10016c90:	6062      	str	r2, [r4, #4]
10016c92:	6922      	ldr	r2, [r4, #16]
10016c94:	6022      	str	r2, [r4, #0]
10016c96:	04db      	lsls	r3, r3, #19
10016c98:	d505      	bpl.n	10016ca6 <__sflush_r+0xa6>
10016c9a:	1c43      	adds	r3, r0, #1
10016c9c:	d102      	bne.n	10016ca4 <__sflush_r+0xa4>
10016c9e:	682b      	ldr	r3, [r5, #0]
10016ca0:	2b00      	cmp	r3, #0
10016ca2:	d100      	bne.n	10016ca6 <__sflush_r+0xa6>
10016ca4:	6560      	str	r0, [r4, #84]	; 0x54
10016ca6:	6b61      	ldr	r1, [r4, #52]	; 0x34
10016ca8:	602e      	str	r6, [r5, #0]
10016caa:	2900      	cmp	r1, #0
10016cac:	d0ce      	beq.n	10016c4c <__sflush_r+0x4c>
10016cae:	0023      	movs	r3, r4
10016cb0:	3344      	adds	r3, #68	; 0x44
10016cb2:	4299      	cmp	r1, r3
10016cb4:	d002      	beq.n	10016cbc <__sflush_r+0xbc>
10016cb6:	0028      	movs	r0, r5
10016cb8:	f7ff fc96 	bl	100165e8 <_free_r>
10016cbc:	2000      	movs	r0, #0
10016cbe:	6360      	str	r0, [r4, #52]	; 0x34
10016cc0:	e021      	b.n	10016d06 <__sflush_r+0x106>
10016cc2:	690f      	ldr	r7, [r1, #16]
10016cc4:	2f00      	cmp	r7, #0
10016cc6:	d0c1      	beq.n	10016c4c <__sflush_r+0x4c>
10016cc8:	680b      	ldr	r3, [r1, #0]
10016cca:	600f      	str	r7, [r1, #0]
10016ccc:	1bdb      	subs	r3, r3, r7
10016cce:	9301      	str	r3, [sp, #4]
10016cd0:	2300      	movs	r3, #0
10016cd2:	0792      	lsls	r2, r2, #30
10016cd4:	d100      	bne.n	10016cd8 <__sflush_r+0xd8>
10016cd6:	694b      	ldr	r3, [r1, #20]
10016cd8:	60a3      	str	r3, [r4, #8]
10016cda:	e003      	b.n	10016ce4 <__sflush_r+0xe4>
10016cdc:	9b01      	ldr	r3, [sp, #4]
10016cde:	183f      	adds	r7, r7, r0
10016ce0:	1a1b      	subs	r3, r3, r0
10016ce2:	9301      	str	r3, [sp, #4]
10016ce4:	9b01      	ldr	r3, [sp, #4]
10016ce6:	2b00      	cmp	r3, #0
10016ce8:	ddb0      	ble.n	10016c4c <__sflush_r+0x4c>
10016cea:	9b01      	ldr	r3, [sp, #4]
10016cec:	003a      	movs	r2, r7
10016cee:	6a21      	ldr	r1, [r4, #32]
10016cf0:	0028      	movs	r0, r5
10016cf2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
10016cf4:	47b0      	blx	r6
10016cf6:	2800      	cmp	r0, #0
10016cf8:	dcf0      	bgt.n	10016cdc <__sflush_r+0xdc>
10016cfa:	89a3      	ldrh	r3, [r4, #12]
10016cfc:	2240      	movs	r2, #64	; 0x40
10016cfe:	2001      	movs	r0, #1
10016d00:	4313      	orrs	r3, r2
10016d02:	81a3      	strh	r3, [r4, #12]
10016d04:	4240      	negs	r0, r0
10016d06:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10016d08:	20400001 	.word	0x20400001

10016d0c <_fflush_r>:
10016d0c:	690b      	ldr	r3, [r1, #16]
10016d0e:	b570      	push	{r4, r5, r6, lr}
10016d10:	0005      	movs	r5, r0
10016d12:	000c      	movs	r4, r1
10016d14:	2b00      	cmp	r3, #0
10016d16:	d101      	bne.n	10016d1c <_fflush_r+0x10>
10016d18:	2000      	movs	r0, #0
10016d1a:	e01c      	b.n	10016d56 <_fflush_r+0x4a>
10016d1c:	2800      	cmp	r0, #0
10016d1e:	d004      	beq.n	10016d2a <_fflush_r+0x1e>
10016d20:	6983      	ldr	r3, [r0, #24]
10016d22:	2b00      	cmp	r3, #0
10016d24:	d101      	bne.n	10016d2a <_fflush_r+0x1e>
10016d26:	f000 f85f 	bl	10016de8 <__sinit>
10016d2a:	4b0b      	ldr	r3, [pc, #44]	; (10016d58 <_fflush_r+0x4c>)
10016d2c:	429c      	cmp	r4, r3
10016d2e:	d101      	bne.n	10016d34 <_fflush_r+0x28>
10016d30:	686c      	ldr	r4, [r5, #4]
10016d32:	e008      	b.n	10016d46 <_fflush_r+0x3a>
10016d34:	4b09      	ldr	r3, [pc, #36]	; (10016d5c <_fflush_r+0x50>)
10016d36:	429c      	cmp	r4, r3
10016d38:	d101      	bne.n	10016d3e <_fflush_r+0x32>
10016d3a:	68ac      	ldr	r4, [r5, #8]
10016d3c:	e003      	b.n	10016d46 <_fflush_r+0x3a>
10016d3e:	4b08      	ldr	r3, [pc, #32]	; (10016d60 <_fflush_r+0x54>)
10016d40:	429c      	cmp	r4, r3
10016d42:	d100      	bne.n	10016d46 <_fflush_r+0x3a>
10016d44:	68ec      	ldr	r4, [r5, #12]
10016d46:	220c      	movs	r2, #12
10016d48:	5ea3      	ldrsh	r3, [r4, r2]
10016d4a:	2b00      	cmp	r3, #0
10016d4c:	d0e4      	beq.n	10016d18 <_fflush_r+0xc>
10016d4e:	0021      	movs	r1, r4
10016d50:	0028      	movs	r0, r5
10016d52:	f7ff ff55 	bl	10016c00 <__sflush_r>
10016d56:	bd70      	pop	{r4, r5, r6, pc}
10016d58:	10018810 	.word	0x10018810
10016d5c:	10018830 	.word	0x10018830
10016d60:	10018850 	.word	0x10018850

10016d64 <_cleanup_r>:
10016d64:	b510      	push	{r4, lr}
10016d66:	4902      	ldr	r1, [pc, #8]	; (10016d70 <_cleanup_r+0xc>)
10016d68:	f000 f8b0 	bl	10016ecc <_fwalk_reent>
10016d6c:	bd10      	pop	{r4, pc}
10016d6e:	46c0      	nop			; (mov r8, r8)
10016d70:	10016d0d 	.word	0x10016d0d

10016d74 <std.isra.0>:
10016d74:	2300      	movs	r3, #0
10016d76:	b510      	push	{r4, lr}
10016d78:	0004      	movs	r4, r0
10016d7a:	6003      	str	r3, [r0, #0]
10016d7c:	6043      	str	r3, [r0, #4]
10016d7e:	6083      	str	r3, [r0, #8]
10016d80:	8181      	strh	r1, [r0, #12]
10016d82:	6643      	str	r3, [r0, #100]	; 0x64
10016d84:	81c2      	strh	r2, [r0, #14]
10016d86:	6103      	str	r3, [r0, #16]
10016d88:	6143      	str	r3, [r0, #20]
10016d8a:	6183      	str	r3, [r0, #24]
10016d8c:	0019      	movs	r1, r3
10016d8e:	2208      	movs	r2, #8
10016d90:	305c      	adds	r0, #92	; 0x5c
10016d92:	f7ff fc21 	bl	100165d8 <memset>
10016d96:	4b05      	ldr	r3, [pc, #20]	; (10016dac <std.isra.0+0x38>)
10016d98:	6224      	str	r4, [r4, #32]
10016d9a:	6263      	str	r3, [r4, #36]	; 0x24
10016d9c:	4b04      	ldr	r3, [pc, #16]	; (10016db0 <std.isra.0+0x3c>)
10016d9e:	62a3      	str	r3, [r4, #40]	; 0x28
10016da0:	4b04      	ldr	r3, [pc, #16]	; (10016db4 <std.isra.0+0x40>)
10016da2:	62e3      	str	r3, [r4, #44]	; 0x2c
10016da4:	4b04      	ldr	r3, [pc, #16]	; (10016db8 <std.isra.0+0x44>)
10016da6:	6323      	str	r3, [r4, #48]	; 0x30
10016da8:	bd10      	pop	{r4, pc}
10016daa:	46c0      	nop			; (mov r8, r8)
10016dac:	100175ed 	.word	0x100175ed
10016db0:	10017615 	.word	0x10017615
10016db4:	1001764d 	.word	0x1001764d
10016db8:	10017679 	.word	0x10017679

10016dbc <__sfmoreglue>:
10016dbc:	b570      	push	{r4, r5, r6, lr}
10016dbe:	2568      	movs	r5, #104	; 0x68
10016dc0:	1e4b      	subs	r3, r1, #1
10016dc2:	435d      	muls	r5, r3
10016dc4:	000e      	movs	r6, r1
10016dc6:	0029      	movs	r1, r5
10016dc8:	3174      	adds	r1, #116	; 0x74
10016dca:	f7ff fc53 	bl	10016674 <_malloc_r>
10016dce:	1e04      	subs	r4, r0, #0
10016dd0:	d008      	beq.n	10016de4 <__sfmoreglue+0x28>
10016dd2:	2100      	movs	r1, #0
10016dd4:	002a      	movs	r2, r5
10016dd6:	6001      	str	r1, [r0, #0]
10016dd8:	6046      	str	r6, [r0, #4]
10016dda:	300c      	adds	r0, #12
10016ddc:	60a0      	str	r0, [r4, #8]
10016dde:	3268      	adds	r2, #104	; 0x68
10016de0:	f7ff fbfa 	bl	100165d8 <memset>
10016de4:	0020      	movs	r0, r4
10016de6:	bd70      	pop	{r4, r5, r6, pc}

10016de8 <__sinit>:
10016de8:	6983      	ldr	r3, [r0, #24]
10016dea:	b513      	push	{r0, r1, r4, lr}
10016dec:	0004      	movs	r4, r0
10016dee:	2b00      	cmp	r3, #0
10016df0:	d128      	bne.n	10016e44 <__sinit+0x5c>
10016df2:	6483      	str	r3, [r0, #72]	; 0x48
10016df4:	64c3      	str	r3, [r0, #76]	; 0x4c
10016df6:	6503      	str	r3, [r0, #80]	; 0x50
10016df8:	4b13      	ldr	r3, [pc, #76]	; (10016e48 <__sinit+0x60>)
10016dfa:	4a14      	ldr	r2, [pc, #80]	; (10016e4c <__sinit+0x64>)
10016dfc:	681b      	ldr	r3, [r3, #0]
10016dfe:	6282      	str	r2, [r0, #40]	; 0x28
10016e00:	9301      	str	r3, [sp, #4]
10016e02:	4298      	cmp	r0, r3
10016e04:	d101      	bne.n	10016e0a <__sinit+0x22>
10016e06:	2301      	movs	r3, #1
10016e08:	6183      	str	r3, [r0, #24]
10016e0a:	0020      	movs	r0, r4
10016e0c:	f000 f820 	bl	10016e50 <__sfp>
10016e10:	6060      	str	r0, [r4, #4]
10016e12:	0020      	movs	r0, r4
10016e14:	f000 f81c 	bl	10016e50 <__sfp>
10016e18:	60a0      	str	r0, [r4, #8]
10016e1a:	0020      	movs	r0, r4
10016e1c:	f000 f818 	bl	10016e50 <__sfp>
10016e20:	2200      	movs	r2, #0
10016e22:	60e0      	str	r0, [r4, #12]
10016e24:	2104      	movs	r1, #4
10016e26:	6860      	ldr	r0, [r4, #4]
10016e28:	f7ff ffa4 	bl	10016d74 <std.isra.0>
10016e2c:	2201      	movs	r2, #1
10016e2e:	2109      	movs	r1, #9
10016e30:	68a0      	ldr	r0, [r4, #8]
10016e32:	f7ff ff9f 	bl	10016d74 <std.isra.0>
10016e36:	2202      	movs	r2, #2
10016e38:	2112      	movs	r1, #18
10016e3a:	68e0      	ldr	r0, [r4, #12]
10016e3c:	f7ff ff9a 	bl	10016d74 <std.isra.0>
10016e40:	2301      	movs	r3, #1
10016e42:	61a3      	str	r3, [r4, #24]
10016e44:	bd13      	pop	{r0, r1, r4, pc}
10016e46:	46c0      	nop			; (mov r8, r8)
10016e48:	1001880c 	.word	0x1001880c
10016e4c:	10016d65 	.word	0x10016d65

10016e50 <__sfp>:
10016e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10016e52:	4b1d      	ldr	r3, [pc, #116]	; (10016ec8 <__sfp+0x78>)
10016e54:	0006      	movs	r6, r0
10016e56:	681d      	ldr	r5, [r3, #0]
10016e58:	69ab      	ldr	r3, [r5, #24]
10016e5a:	2b00      	cmp	r3, #0
10016e5c:	d102      	bne.n	10016e64 <__sfp+0x14>
10016e5e:	0028      	movs	r0, r5
10016e60:	f7ff ffc2 	bl	10016de8 <__sinit>
10016e64:	3548      	adds	r5, #72	; 0x48
10016e66:	68ac      	ldr	r4, [r5, #8]
10016e68:	686b      	ldr	r3, [r5, #4]
10016e6a:	3b01      	subs	r3, #1
10016e6c:	d405      	bmi.n	10016e7a <__sfp+0x2a>
10016e6e:	220c      	movs	r2, #12
10016e70:	5ea7      	ldrsh	r7, [r4, r2]
10016e72:	2f00      	cmp	r7, #0
10016e74:	d010      	beq.n	10016e98 <__sfp+0x48>
10016e76:	3468      	adds	r4, #104	; 0x68
10016e78:	e7f7      	b.n	10016e6a <__sfp+0x1a>
10016e7a:	682b      	ldr	r3, [r5, #0]
10016e7c:	2b00      	cmp	r3, #0
10016e7e:	d001      	beq.n	10016e84 <__sfp+0x34>
10016e80:	682d      	ldr	r5, [r5, #0]
10016e82:	e7f0      	b.n	10016e66 <__sfp+0x16>
10016e84:	2104      	movs	r1, #4
10016e86:	0030      	movs	r0, r6
10016e88:	f7ff ff98 	bl	10016dbc <__sfmoreglue>
10016e8c:	6028      	str	r0, [r5, #0]
10016e8e:	2800      	cmp	r0, #0
10016e90:	d1f6      	bne.n	10016e80 <__sfp+0x30>
10016e92:	230c      	movs	r3, #12
10016e94:	6033      	str	r3, [r6, #0]
10016e96:	e016      	b.n	10016ec6 <__sfp+0x76>
10016e98:	2301      	movs	r3, #1
10016e9a:	0020      	movs	r0, r4
10016e9c:	425b      	negs	r3, r3
10016e9e:	81e3      	strh	r3, [r4, #14]
10016ea0:	3302      	adds	r3, #2
10016ea2:	81a3      	strh	r3, [r4, #12]
10016ea4:	6667      	str	r7, [r4, #100]	; 0x64
10016ea6:	6027      	str	r7, [r4, #0]
10016ea8:	60a7      	str	r7, [r4, #8]
10016eaa:	6067      	str	r7, [r4, #4]
10016eac:	6127      	str	r7, [r4, #16]
10016eae:	6167      	str	r7, [r4, #20]
10016eb0:	61a7      	str	r7, [r4, #24]
10016eb2:	305c      	adds	r0, #92	; 0x5c
10016eb4:	2208      	movs	r2, #8
10016eb6:	0039      	movs	r1, r7
10016eb8:	f7ff fb8e 	bl	100165d8 <memset>
10016ebc:	0020      	movs	r0, r4
10016ebe:	6367      	str	r7, [r4, #52]	; 0x34
10016ec0:	63a7      	str	r7, [r4, #56]	; 0x38
10016ec2:	64a7      	str	r7, [r4, #72]	; 0x48
10016ec4:	64e7      	str	r7, [r4, #76]	; 0x4c
10016ec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10016ec8:	1001880c 	.word	0x1001880c

10016ecc <_fwalk_reent>:
10016ecc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10016ece:	0004      	movs	r4, r0
10016ed0:	0007      	movs	r7, r0
10016ed2:	2600      	movs	r6, #0
10016ed4:	9101      	str	r1, [sp, #4]
10016ed6:	3448      	adds	r4, #72	; 0x48
10016ed8:	2c00      	cmp	r4, #0
10016eda:	d016      	beq.n	10016f0a <_fwalk_reent+0x3e>
10016edc:	6863      	ldr	r3, [r4, #4]
10016ede:	68a5      	ldr	r5, [r4, #8]
10016ee0:	9300      	str	r3, [sp, #0]
10016ee2:	9b00      	ldr	r3, [sp, #0]
10016ee4:	3b01      	subs	r3, #1
10016ee6:	9300      	str	r3, [sp, #0]
10016ee8:	d40d      	bmi.n	10016f06 <_fwalk_reent+0x3a>
10016eea:	89ab      	ldrh	r3, [r5, #12]
10016eec:	2b01      	cmp	r3, #1
10016eee:	d908      	bls.n	10016f02 <_fwalk_reent+0x36>
10016ef0:	220e      	movs	r2, #14
10016ef2:	5eab      	ldrsh	r3, [r5, r2]
10016ef4:	3301      	adds	r3, #1
10016ef6:	d004      	beq.n	10016f02 <_fwalk_reent+0x36>
10016ef8:	0029      	movs	r1, r5
10016efa:	0038      	movs	r0, r7
10016efc:	9b01      	ldr	r3, [sp, #4]
10016efe:	4798      	blx	r3
10016f00:	4306      	orrs	r6, r0
10016f02:	3568      	adds	r5, #104	; 0x68
10016f04:	e7ed      	b.n	10016ee2 <_fwalk_reent+0x16>
10016f06:	6824      	ldr	r4, [r4, #0]
10016f08:	e7e6      	b.n	10016ed8 <_fwalk_reent+0xc>
10016f0a:	0030      	movs	r0, r6
10016f0c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

10016f10 <__swhatbuf_r>:
10016f10:	b570      	push	{r4, r5, r6, lr}
10016f12:	000e      	movs	r6, r1
10016f14:	001d      	movs	r5, r3
10016f16:	230e      	movs	r3, #14
10016f18:	5ec9      	ldrsh	r1, [r1, r3]
10016f1a:	b090      	sub	sp, #64	; 0x40
10016f1c:	0014      	movs	r4, r2
10016f1e:	2900      	cmp	r1, #0
10016f20:	da06      	bge.n	10016f30 <__swhatbuf_r+0x20>
10016f22:	2300      	movs	r3, #0
10016f24:	602b      	str	r3, [r5, #0]
10016f26:	89b3      	ldrh	r3, [r6, #12]
10016f28:	061b      	lsls	r3, r3, #24
10016f2a:	d50f      	bpl.n	10016f4c <__swhatbuf_r+0x3c>
10016f2c:	2340      	movs	r3, #64	; 0x40
10016f2e:	e00f      	b.n	10016f50 <__swhatbuf_r+0x40>
10016f30:	aa01      	add	r2, sp, #4
10016f32:	f000 fbcd 	bl	100176d0 <_fstat_r>
10016f36:	2800      	cmp	r0, #0
10016f38:	dbf3      	blt.n	10016f22 <__swhatbuf_r+0x12>
10016f3a:	23f0      	movs	r3, #240	; 0xf0
10016f3c:	9a02      	ldr	r2, [sp, #8]
10016f3e:	021b      	lsls	r3, r3, #8
10016f40:	4013      	ands	r3, r2
10016f42:	4a05      	ldr	r2, [pc, #20]	; (10016f58 <__swhatbuf_r+0x48>)
10016f44:	189b      	adds	r3, r3, r2
10016f46:	425a      	negs	r2, r3
10016f48:	4153      	adcs	r3, r2
10016f4a:	602b      	str	r3, [r5, #0]
10016f4c:	2380      	movs	r3, #128	; 0x80
10016f4e:	00db      	lsls	r3, r3, #3
10016f50:	2000      	movs	r0, #0
10016f52:	6023      	str	r3, [r4, #0]
10016f54:	b010      	add	sp, #64	; 0x40
10016f56:	bd70      	pop	{r4, r5, r6, pc}
10016f58:	ffffe000 	.word	0xffffe000

10016f5c <__smakebuf_r>:
10016f5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10016f5e:	2602      	movs	r6, #2
10016f60:	898b      	ldrh	r3, [r1, #12]
10016f62:	0005      	movs	r5, r0
10016f64:	000c      	movs	r4, r1
10016f66:	4233      	tst	r3, r6
10016f68:	d110      	bne.n	10016f8c <__smakebuf_r+0x30>
10016f6a:	ab01      	add	r3, sp, #4
10016f6c:	466a      	mov	r2, sp
10016f6e:	f7ff ffcf 	bl	10016f10 <__swhatbuf_r>
10016f72:	9900      	ldr	r1, [sp, #0]
10016f74:	0007      	movs	r7, r0
10016f76:	0028      	movs	r0, r5
10016f78:	f7ff fb7c 	bl	10016674 <_malloc_r>
10016f7c:	2800      	cmp	r0, #0
10016f7e:	d10c      	bne.n	10016f9a <__smakebuf_r+0x3e>
10016f80:	220c      	movs	r2, #12
10016f82:	5ea3      	ldrsh	r3, [r4, r2]
10016f84:	059a      	lsls	r2, r3, #22
10016f86:	d423      	bmi.n	10016fd0 <__smakebuf_r+0x74>
10016f88:	4333      	orrs	r3, r6
10016f8a:	81a3      	strh	r3, [r4, #12]
10016f8c:	0023      	movs	r3, r4
10016f8e:	3347      	adds	r3, #71	; 0x47
10016f90:	6023      	str	r3, [r4, #0]
10016f92:	6123      	str	r3, [r4, #16]
10016f94:	2301      	movs	r3, #1
10016f96:	6163      	str	r3, [r4, #20]
10016f98:	e01a      	b.n	10016fd0 <__smakebuf_r+0x74>
10016f9a:	2280      	movs	r2, #128	; 0x80
10016f9c:	4b0d      	ldr	r3, [pc, #52]	; (10016fd4 <__smakebuf_r+0x78>)
10016f9e:	62ab      	str	r3, [r5, #40]	; 0x28
10016fa0:	89a3      	ldrh	r3, [r4, #12]
10016fa2:	6020      	str	r0, [r4, #0]
10016fa4:	4313      	orrs	r3, r2
10016fa6:	81a3      	strh	r3, [r4, #12]
10016fa8:	9b00      	ldr	r3, [sp, #0]
10016faa:	6120      	str	r0, [r4, #16]
10016fac:	6163      	str	r3, [r4, #20]
10016fae:	9b01      	ldr	r3, [sp, #4]
10016fb0:	2b00      	cmp	r3, #0
10016fb2:	d00a      	beq.n	10016fca <__smakebuf_r+0x6e>
10016fb4:	230e      	movs	r3, #14
10016fb6:	5ee1      	ldrsh	r1, [r4, r3]
10016fb8:	0028      	movs	r0, r5
10016fba:	f000 fb9b 	bl	100176f4 <_isatty_r>
10016fbe:	2800      	cmp	r0, #0
10016fc0:	d003      	beq.n	10016fca <__smakebuf_r+0x6e>
10016fc2:	2201      	movs	r2, #1
10016fc4:	89a3      	ldrh	r3, [r4, #12]
10016fc6:	4313      	orrs	r3, r2
10016fc8:	81a3      	strh	r3, [r4, #12]
10016fca:	89a3      	ldrh	r3, [r4, #12]
10016fcc:	431f      	orrs	r7, r3
10016fce:	81a7      	strh	r7, [r4, #12]
10016fd0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10016fd2:	46c0      	nop			; (mov r8, r8)
10016fd4:	10016d65 	.word	0x10016d65

10016fd8 <__sfputc_r>:
10016fd8:	6893      	ldr	r3, [r2, #8]
10016fda:	b510      	push	{r4, lr}
10016fdc:	3b01      	subs	r3, #1
10016fde:	6093      	str	r3, [r2, #8]
10016fe0:	2b00      	cmp	r3, #0
10016fe2:	da05      	bge.n	10016ff0 <__sfputc_r+0x18>
10016fe4:	6994      	ldr	r4, [r2, #24]
10016fe6:	42a3      	cmp	r3, r4
10016fe8:	db08      	blt.n	10016ffc <__sfputc_r+0x24>
10016fea:	b2cb      	uxtb	r3, r1
10016fec:	2b0a      	cmp	r3, #10
10016fee:	d005      	beq.n	10016ffc <__sfputc_r+0x24>
10016ff0:	6813      	ldr	r3, [r2, #0]
10016ff2:	1c58      	adds	r0, r3, #1
10016ff4:	6010      	str	r0, [r2, #0]
10016ff6:	7019      	strb	r1, [r3, #0]
10016ff8:	b2c8      	uxtb	r0, r1
10016ffa:	e001      	b.n	10017000 <__sfputc_r+0x28>
10016ffc:	f7ff fd32 	bl	10016a64 <__swbuf_r>
10017000:	bd10      	pop	{r4, pc}

10017002 <__sfputs_r>:
10017002:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10017004:	0006      	movs	r6, r0
10017006:	000f      	movs	r7, r1
10017008:	0014      	movs	r4, r2
1001700a:	18d5      	adds	r5, r2, r3
1001700c:	42ac      	cmp	r4, r5
1001700e:	d008      	beq.n	10017022 <__sfputs_r+0x20>
10017010:	7821      	ldrb	r1, [r4, #0]
10017012:	003a      	movs	r2, r7
10017014:	0030      	movs	r0, r6
10017016:	f7ff ffdf 	bl	10016fd8 <__sfputc_r>
1001701a:	3401      	adds	r4, #1
1001701c:	1c43      	adds	r3, r0, #1
1001701e:	d1f5      	bne.n	1001700c <__sfputs_r+0xa>
10017020:	e000      	b.n	10017024 <__sfputs_r+0x22>
10017022:	2000      	movs	r0, #0
10017024:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

10017028 <_vfiprintf_r>:
10017028:	b5f0      	push	{r4, r5, r6, r7, lr}
1001702a:	b09f      	sub	sp, #124	; 0x7c
1001702c:	0006      	movs	r6, r0
1001702e:	000f      	movs	r7, r1
10017030:	9202      	str	r2, [sp, #8]
10017032:	9305      	str	r3, [sp, #20]
10017034:	2800      	cmp	r0, #0
10017036:	d004      	beq.n	10017042 <_vfiprintf_r+0x1a>
10017038:	6983      	ldr	r3, [r0, #24]
1001703a:	2b00      	cmp	r3, #0
1001703c:	d101      	bne.n	10017042 <_vfiprintf_r+0x1a>
1001703e:	f7ff fed3 	bl	10016de8 <__sinit>
10017042:	4b7f      	ldr	r3, [pc, #508]	; (10017240 <_vfiprintf_r+0x218>)
10017044:	429f      	cmp	r7, r3
10017046:	d101      	bne.n	1001704c <_vfiprintf_r+0x24>
10017048:	6877      	ldr	r7, [r6, #4]
1001704a:	e008      	b.n	1001705e <_vfiprintf_r+0x36>
1001704c:	4b7d      	ldr	r3, [pc, #500]	; (10017244 <_vfiprintf_r+0x21c>)
1001704e:	429f      	cmp	r7, r3
10017050:	d101      	bne.n	10017056 <_vfiprintf_r+0x2e>
10017052:	68b7      	ldr	r7, [r6, #8]
10017054:	e003      	b.n	1001705e <_vfiprintf_r+0x36>
10017056:	4b7c      	ldr	r3, [pc, #496]	; (10017248 <_vfiprintf_r+0x220>)
10017058:	429f      	cmp	r7, r3
1001705a:	d100      	bne.n	1001705e <_vfiprintf_r+0x36>
1001705c:	68f7      	ldr	r7, [r6, #12]
1001705e:	89bb      	ldrh	r3, [r7, #12]
10017060:	071b      	lsls	r3, r3, #28
10017062:	d50a      	bpl.n	1001707a <_vfiprintf_r+0x52>
10017064:	693b      	ldr	r3, [r7, #16]
10017066:	2b00      	cmp	r3, #0
10017068:	d007      	beq.n	1001707a <_vfiprintf_r+0x52>
1001706a:	2300      	movs	r3, #0
1001706c:	ad06      	add	r5, sp, #24
1001706e:	616b      	str	r3, [r5, #20]
10017070:	3320      	adds	r3, #32
10017072:	766b      	strb	r3, [r5, #25]
10017074:	3310      	adds	r3, #16
10017076:	76ab      	strb	r3, [r5, #26]
10017078:	e03d      	b.n	100170f6 <_vfiprintf_r+0xce>
1001707a:	0039      	movs	r1, r7
1001707c:	0030      	movs	r0, r6
1001707e:	f7ff fd49 	bl	10016b14 <__swsetup_r>
10017082:	2800      	cmp	r0, #0
10017084:	d0f1      	beq.n	1001706a <_vfiprintf_r+0x42>
10017086:	2001      	movs	r0, #1
10017088:	4240      	negs	r0, r0
1001708a:	e0d6      	b.n	1001723a <_vfiprintf_r+0x212>
1001708c:	9a05      	ldr	r2, [sp, #20]
1001708e:	1d11      	adds	r1, r2, #4
10017090:	6812      	ldr	r2, [r2, #0]
10017092:	9105      	str	r1, [sp, #20]
10017094:	2a00      	cmp	r2, #0
10017096:	da00      	bge.n	1001709a <_vfiprintf_r+0x72>
10017098:	e07f      	b.n	1001719a <_vfiprintf_r+0x172>
1001709a:	9209      	str	r2, [sp, #36]	; 0x24
1001709c:	3401      	adds	r4, #1
1001709e:	7823      	ldrb	r3, [r4, #0]
100170a0:	2b2e      	cmp	r3, #46	; 0x2e
100170a2:	d100      	bne.n	100170a6 <_vfiprintf_r+0x7e>
100170a4:	e08d      	b.n	100171c2 <_vfiprintf_r+0x19a>
100170a6:	7821      	ldrb	r1, [r4, #0]
100170a8:	2203      	movs	r2, #3
100170aa:	4868      	ldr	r0, [pc, #416]	; (1001724c <_vfiprintf_r+0x224>)
100170ac:	f000 fb48 	bl	10017740 <memchr>
100170b0:	2800      	cmp	r0, #0
100170b2:	d007      	beq.n	100170c4 <_vfiprintf_r+0x9c>
100170b4:	4b65      	ldr	r3, [pc, #404]	; (1001724c <_vfiprintf_r+0x224>)
100170b6:	682a      	ldr	r2, [r5, #0]
100170b8:	1ac0      	subs	r0, r0, r3
100170ba:	2340      	movs	r3, #64	; 0x40
100170bc:	4083      	lsls	r3, r0
100170be:	4313      	orrs	r3, r2
100170c0:	602b      	str	r3, [r5, #0]
100170c2:	3401      	adds	r4, #1
100170c4:	7821      	ldrb	r1, [r4, #0]
100170c6:	1c63      	adds	r3, r4, #1
100170c8:	2206      	movs	r2, #6
100170ca:	4861      	ldr	r0, [pc, #388]	; (10017250 <_vfiprintf_r+0x228>)
100170cc:	9302      	str	r3, [sp, #8]
100170ce:	7629      	strb	r1, [r5, #24]
100170d0:	f000 fb36 	bl	10017740 <memchr>
100170d4:	2800      	cmp	r0, #0
100170d6:	d100      	bne.n	100170da <_vfiprintf_r+0xb2>
100170d8:	e09d      	b.n	10017216 <_vfiprintf_r+0x1ee>
100170da:	4b5e      	ldr	r3, [pc, #376]	; (10017254 <_vfiprintf_r+0x22c>)
100170dc:	2b00      	cmp	r3, #0
100170de:	d000      	beq.n	100170e2 <_vfiprintf_r+0xba>
100170e0:	e090      	b.n	10017204 <_vfiprintf_r+0x1dc>
100170e2:	2207      	movs	r2, #7
100170e4:	9b05      	ldr	r3, [sp, #20]
100170e6:	3307      	adds	r3, #7
100170e8:	4393      	bics	r3, r2
100170ea:	3308      	adds	r3, #8
100170ec:	9305      	str	r3, [sp, #20]
100170ee:	696b      	ldr	r3, [r5, #20]
100170f0:	9a03      	ldr	r2, [sp, #12]
100170f2:	189b      	adds	r3, r3, r2
100170f4:	616b      	str	r3, [r5, #20]
100170f6:	9c02      	ldr	r4, [sp, #8]
100170f8:	7823      	ldrb	r3, [r4, #0]
100170fa:	2b00      	cmp	r3, #0
100170fc:	d104      	bne.n	10017108 <_vfiprintf_r+0xe0>
100170fe:	9b02      	ldr	r3, [sp, #8]
10017100:	1ae3      	subs	r3, r4, r3
10017102:	9304      	str	r3, [sp, #16]
10017104:	d012      	beq.n	1001712c <_vfiprintf_r+0x104>
10017106:	e003      	b.n	10017110 <_vfiprintf_r+0xe8>
10017108:	2b25      	cmp	r3, #37	; 0x25
1001710a:	d0f8      	beq.n	100170fe <_vfiprintf_r+0xd6>
1001710c:	3401      	adds	r4, #1
1001710e:	e7f3      	b.n	100170f8 <_vfiprintf_r+0xd0>
10017110:	9b04      	ldr	r3, [sp, #16]
10017112:	9a02      	ldr	r2, [sp, #8]
10017114:	0039      	movs	r1, r7
10017116:	0030      	movs	r0, r6
10017118:	f7ff ff73 	bl	10017002 <__sfputs_r>
1001711c:	1c43      	adds	r3, r0, #1
1001711e:	d100      	bne.n	10017122 <_vfiprintf_r+0xfa>
10017120:	e086      	b.n	10017230 <_vfiprintf_r+0x208>
10017122:	696a      	ldr	r2, [r5, #20]
10017124:	9b04      	ldr	r3, [sp, #16]
10017126:	4694      	mov	ip, r2
10017128:	4463      	add	r3, ip
1001712a:	616b      	str	r3, [r5, #20]
1001712c:	7823      	ldrb	r3, [r4, #0]
1001712e:	2b00      	cmp	r3, #0
10017130:	d07e      	beq.n	10017230 <_vfiprintf_r+0x208>
10017132:	2201      	movs	r2, #1
10017134:	2300      	movs	r3, #0
10017136:	4252      	negs	r2, r2
10017138:	606a      	str	r2, [r5, #4]
1001713a:	a902      	add	r1, sp, #8
1001713c:	3254      	adds	r2, #84	; 0x54
1001713e:	1852      	adds	r2, r2, r1
10017140:	3401      	adds	r4, #1
10017142:	602b      	str	r3, [r5, #0]
10017144:	60eb      	str	r3, [r5, #12]
10017146:	60ab      	str	r3, [r5, #8]
10017148:	7013      	strb	r3, [r2, #0]
1001714a:	65ab      	str	r3, [r5, #88]	; 0x58
1001714c:	7821      	ldrb	r1, [r4, #0]
1001714e:	2205      	movs	r2, #5
10017150:	4841      	ldr	r0, [pc, #260]	; (10017258 <_vfiprintf_r+0x230>)
10017152:	f000 faf5 	bl	10017740 <memchr>
10017156:	2800      	cmp	r0, #0
10017158:	d008      	beq.n	1001716c <_vfiprintf_r+0x144>
1001715a:	4b3f      	ldr	r3, [pc, #252]	; (10017258 <_vfiprintf_r+0x230>)
1001715c:	682a      	ldr	r2, [r5, #0]
1001715e:	1ac0      	subs	r0, r0, r3
10017160:	2301      	movs	r3, #1
10017162:	4083      	lsls	r3, r0
10017164:	4313      	orrs	r3, r2
10017166:	602b      	str	r3, [r5, #0]
10017168:	3401      	adds	r4, #1
1001716a:	e7ef      	b.n	1001714c <_vfiprintf_r+0x124>
1001716c:	682b      	ldr	r3, [r5, #0]
1001716e:	06da      	lsls	r2, r3, #27
10017170:	d504      	bpl.n	1001717c <_vfiprintf_r+0x154>
10017172:	2253      	movs	r2, #83	; 0x53
10017174:	2120      	movs	r1, #32
10017176:	a802      	add	r0, sp, #8
10017178:	1812      	adds	r2, r2, r0
1001717a:	7011      	strb	r1, [r2, #0]
1001717c:	071a      	lsls	r2, r3, #28
1001717e:	d504      	bpl.n	1001718a <_vfiprintf_r+0x162>
10017180:	2253      	movs	r2, #83	; 0x53
10017182:	212b      	movs	r1, #43	; 0x2b
10017184:	a802      	add	r0, sp, #8
10017186:	1812      	adds	r2, r2, r0
10017188:	7011      	strb	r1, [r2, #0]
1001718a:	7822      	ldrb	r2, [r4, #0]
1001718c:	2a2a      	cmp	r2, #42	; 0x2a
1001718e:	d100      	bne.n	10017192 <_vfiprintf_r+0x16a>
10017190:	e77c      	b.n	1001708c <_vfiprintf_r+0x64>
10017192:	9b09      	ldr	r3, [sp, #36]	; 0x24
10017194:	2000      	movs	r0, #0
10017196:	210a      	movs	r1, #10
10017198:	e005      	b.n	100171a6 <_vfiprintf_r+0x17e>
1001719a:	4252      	negs	r2, r2
1001719c:	60ea      	str	r2, [r5, #12]
1001719e:	2202      	movs	r2, #2
100171a0:	4313      	orrs	r3, r2
100171a2:	602b      	str	r3, [r5, #0]
100171a4:	e77a      	b.n	1001709c <_vfiprintf_r+0x74>
100171a6:	7822      	ldrb	r2, [r4, #0]
100171a8:	3a30      	subs	r2, #48	; 0x30
100171aa:	2a09      	cmp	r2, #9
100171ac:	d804      	bhi.n	100171b8 <_vfiprintf_r+0x190>
100171ae:	434b      	muls	r3, r1
100171b0:	3401      	adds	r4, #1
100171b2:	189b      	adds	r3, r3, r2
100171b4:	2001      	movs	r0, #1
100171b6:	e7f6      	b.n	100171a6 <_vfiprintf_r+0x17e>
100171b8:	2800      	cmp	r0, #0
100171ba:	d100      	bne.n	100171be <_vfiprintf_r+0x196>
100171bc:	e76f      	b.n	1001709e <_vfiprintf_r+0x76>
100171be:	9309      	str	r3, [sp, #36]	; 0x24
100171c0:	e76d      	b.n	1001709e <_vfiprintf_r+0x76>
100171c2:	7863      	ldrb	r3, [r4, #1]
100171c4:	2b2a      	cmp	r3, #42	; 0x2a
100171c6:	d10a      	bne.n	100171de <_vfiprintf_r+0x1b6>
100171c8:	9b05      	ldr	r3, [sp, #20]
100171ca:	3402      	adds	r4, #2
100171cc:	1d1a      	adds	r2, r3, #4
100171ce:	681b      	ldr	r3, [r3, #0]
100171d0:	9205      	str	r2, [sp, #20]
100171d2:	2b00      	cmp	r3, #0
100171d4:	da01      	bge.n	100171da <_vfiprintf_r+0x1b2>
100171d6:	2301      	movs	r3, #1
100171d8:	425b      	negs	r3, r3
100171da:	9307      	str	r3, [sp, #28]
100171dc:	e763      	b.n	100170a6 <_vfiprintf_r+0x7e>
100171de:	2300      	movs	r3, #0
100171e0:	200a      	movs	r0, #10
100171e2:	001a      	movs	r2, r3
100171e4:	3401      	adds	r4, #1
100171e6:	606b      	str	r3, [r5, #4]
100171e8:	7821      	ldrb	r1, [r4, #0]
100171ea:	3930      	subs	r1, #48	; 0x30
100171ec:	2909      	cmp	r1, #9
100171ee:	d804      	bhi.n	100171fa <_vfiprintf_r+0x1d2>
100171f0:	4342      	muls	r2, r0
100171f2:	3401      	adds	r4, #1
100171f4:	1852      	adds	r2, r2, r1
100171f6:	2301      	movs	r3, #1
100171f8:	e7f6      	b.n	100171e8 <_vfiprintf_r+0x1c0>
100171fa:	2b00      	cmp	r3, #0
100171fc:	d100      	bne.n	10017200 <_vfiprintf_r+0x1d8>
100171fe:	e752      	b.n	100170a6 <_vfiprintf_r+0x7e>
10017200:	9207      	str	r2, [sp, #28]
10017202:	e750      	b.n	100170a6 <_vfiprintf_r+0x7e>
10017204:	ab05      	add	r3, sp, #20
10017206:	9300      	str	r3, [sp, #0]
10017208:	003a      	movs	r2, r7
1001720a:	4b14      	ldr	r3, [pc, #80]	; (1001725c <_vfiprintf_r+0x234>)
1001720c:	0029      	movs	r1, r5
1001720e:	0030      	movs	r0, r6
10017210:	e000      	b.n	10017214 <_vfiprintf_r+0x1ec>
10017212:	bf00      	nop
10017214:	e007      	b.n	10017226 <_vfiprintf_r+0x1fe>
10017216:	ab05      	add	r3, sp, #20
10017218:	9300      	str	r3, [sp, #0]
1001721a:	003a      	movs	r2, r7
1001721c:	4b0f      	ldr	r3, [pc, #60]	; (1001725c <_vfiprintf_r+0x234>)
1001721e:	0029      	movs	r1, r5
10017220:	0030      	movs	r0, r6
10017222:	f000 f88b 	bl	1001733c <_printf_i>
10017226:	9003      	str	r0, [sp, #12]
10017228:	9b03      	ldr	r3, [sp, #12]
1001722a:	3301      	adds	r3, #1
1001722c:	d000      	beq.n	10017230 <_vfiprintf_r+0x208>
1001722e:	e75e      	b.n	100170ee <_vfiprintf_r+0xc6>
10017230:	89bb      	ldrh	r3, [r7, #12]
10017232:	065b      	lsls	r3, r3, #25
10017234:	d500      	bpl.n	10017238 <_vfiprintf_r+0x210>
10017236:	e726      	b.n	10017086 <_vfiprintf_r+0x5e>
10017238:	980b      	ldr	r0, [sp, #44]	; 0x2c
1001723a:	b01f      	add	sp, #124	; 0x7c
1001723c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001723e:	46c0      	nop			; (mov r8, r8)
10017240:	10018810 	.word	0x10018810
10017244:	10018830 	.word	0x10018830
10017248:	10018850 	.word	0x10018850
1001724c:	10018876 	.word	0x10018876
10017250:	1001887a 	.word	0x1001887a
10017254:	00000000 	.word	0x00000000
10017258:	10018870 	.word	0x10018870
1001725c:	10017003 	.word	0x10017003

10017260 <_printf_common>:
10017260:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10017262:	0017      	movs	r7, r2
10017264:	9301      	str	r3, [sp, #4]
10017266:	688a      	ldr	r2, [r1, #8]
10017268:	690b      	ldr	r3, [r1, #16]
1001726a:	9000      	str	r0, [sp, #0]
1001726c:	000c      	movs	r4, r1
1001726e:	4293      	cmp	r3, r2
10017270:	da00      	bge.n	10017274 <_printf_common+0x14>
10017272:	0013      	movs	r3, r2
10017274:	0022      	movs	r2, r4
10017276:	603b      	str	r3, [r7, #0]
10017278:	3243      	adds	r2, #67	; 0x43
1001727a:	7812      	ldrb	r2, [r2, #0]
1001727c:	2a00      	cmp	r2, #0
1001727e:	d001      	beq.n	10017284 <_printf_common+0x24>
10017280:	3301      	adds	r3, #1
10017282:	603b      	str	r3, [r7, #0]
10017284:	6823      	ldr	r3, [r4, #0]
10017286:	069b      	lsls	r3, r3, #26
10017288:	d502      	bpl.n	10017290 <_printf_common+0x30>
1001728a:	683b      	ldr	r3, [r7, #0]
1001728c:	3302      	adds	r3, #2
1001728e:	603b      	str	r3, [r7, #0]
10017290:	2506      	movs	r5, #6
10017292:	6823      	ldr	r3, [r4, #0]
10017294:	401d      	ands	r5, r3
10017296:	d01e      	beq.n	100172d6 <_printf_common+0x76>
10017298:	0023      	movs	r3, r4
1001729a:	3343      	adds	r3, #67	; 0x43
1001729c:	781b      	ldrb	r3, [r3, #0]
1001729e:	1e5a      	subs	r2, r3, #1
100172a0:	4193      	sbcs	r3, r2
100172a2:	6822      	ldr	r2, [r4, #0]
100172a4:	0692      	lsls	r2, r2, #26
100172a6:	d51c      	bpl.n	100172e2 <_printf_common+0x82>
100172a8:	2030      	movs	r0, #48	; 0x30
100172aa:	18e1      	adds	r1, r4, r3
100172ac:	3143      	adds	r1, #67	; 0x43
100172ae:	7008      	strb	r0, [r1, #0]
100172b0:	0021      	movs	r1, r4
100172b2:	1c5a      	adds	r2, r3, #1
100172b4:	3145      	adds	r1, #69	; 0x45
100172b6:	7809      	ldrb	r1, [r1, #0]
100172b8:	18a2      	adds	r2, r4, r2
100172ba:	3243      	adds	r2, #67	; 0x43
100172bc:	3302      	adds	r3, #2
100172be:	7011      	strb	r1, [r2, #0]
100172c0:	e00f      	b.n	100172e2 <_printf_common+0x82>
100172c2:	0022      	movs	r2, r4
100172c4:	2301      	movs	r3, #1
100172c6:	3219      	adds	r2, #25
100172c8:	9901      	ldr	r1, [sp, #4]
100172ca:	9800      	ldr	r0, [sp, #0]
100172cc:	9e08      	ldr	r6, [sp, #32]
100172ce:	47b0      	blx	r6
100172d0:	1c43      	adds	r3, r0, #1
100172d2:	d00e      	beq.n	100172f2 <_printf_common+0x92>
100172d4:	3501      	adds	r5, #1
100172d6:	68e3      	ldr	r3, [r4, #12]
100172d8:	683a      	ldr	r2, [r7, #0]
100172da:	1a9b      	subs	r3, r3, r2
100172dc:	429d      	cmp	r5, r3
100172de:	dbf0      	blt.n	100172c2 <_printf_common+0x62>
100172e0:	e7da      	b.n	10017298 <_printf_common+0x38>
100172e2:	0022      	movs	r2, r4
100172e4:	9901      	ldr	r1, [sp, #4]
100172e6:	3243      	adds	r2, #67	; 0x43
100172e8:	9800      	ldr	r0, [sp, #0]
100172ea:	9d08      	ldr	r5, [sp, #32]
100172ec:	47a8      	blx	r5
100172ee:	1c43      	adds	r3, r0, #1
100172f0:	d102      	bne.n	100172f8 <_printf_common+0x98>
100172f2:	2001      	movs	r0, #1
100172f4:	4240      	negs	r0, r0
100172f6:	e020      	b.n	1001733a <_printf_common+0xda>
100172f8:	2306      	movs	r3, #6
100172fa:	6820      	ldr	r0, [r4, #0]
100172fc:	68e1      	ldr	r1, [r4, #12]
100172fe:	683a      	ldr	r2, [r7, #0]
10017300:	4003      	ands	r3, r0
10017302:	2500      	movs	r5, #0
10017304:	2b04      	cmp	r3, #4
10017306:	d103      	bne.n	10017310 <_printf_common+0xb0>
10017308:	1a8d      	subs	r5, r1, r2
1001730a:	43eb      	mvns	r3, r5
1001730c:	17db      	asrs	r3, r3, #31
1001730e:	401d      	ands	r5, r3
10017310:	68a3      	ldr	r3, [r4, #8]
10017312:	6922      	ldr	r2, [r4, #16]
10017314:	4293      	cmp	r3, r2
10017316:	dd01      	ble.n	1001731c <_printf_common+0xbc>
10017318:	1a9b      	subs	r3, r3, r2
1001731a:	18ed      	adds	r5, r5, r3
1001731c:	2700      	movs	r7, #0
1001731e:	42bd      	cmp	r5, r7
10017320:	d00a      	beq.n	10017338 <_printf_common+0xd8>
10017322:	0022      	movs	r2, r4
10017324:	2301      	movs	r3, #1
10017326:	321a      	adds	r2, #26
10017328:	9901      	ldr	r1, [sp, #4]
1001732a:	9800      	ldr	r0, [sp, #0]
1001732c:	9e08      	ldr	r6, [sp, #32]
1001732e:	47b0      	blx	r6
10017330:	1c43      	adds	r3, r0, #1
10017332:	d0de      	beq.n	100172f2 <_printf_common+0x92>
10017334:	3701      	adds	r7, #1
10017336:	e7f2      	b.n	1001731e <_printf_common+0xbe>
10017338:	2000      	movs	r0, #0
1001733a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1001733c <_printf_i>:
1001733c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001733e:	b08b      	sub	sp, #44	; 0x2c
10017340:	9206      	str	r2, [sp, #24]
10017342:	000a      	movs	r2, r1
10017344:	3243      	adds	r2, #67	; 0x43
10017346:	9307      	str	r3, [sp, #28]
10017348:	9005      	str	r0, [sp, #20]
1001734a:	9204      	str	r2, [sp, #16]
1001734c:	7e0a      	ldrb	r2, [r1, #24]
1001734e:	000c      	movs	r4, r1
10017350:	9b10      	ldr	r3, [sp, #64]	; 0x40
10017352:	2a6e      	cmp	r2, #110	; 0x6e
10017354:	d100      	bne.n	10017358 <_printf_i+0x1c>
10017356:	e0ab      	b.n	100174b0 <_printf_i+0x174>
10017358:	d811      	bhi.n	1001737e <_printf_i+0x42>
1001735a:	2a63      	cmp	r2, #99	; 0x63
1001735c:	d022      	beq.n	100173a4 <_printf_i+0x68>
1001735e:	d809      	bhi.n	10017374 <_printf_i+0x38>
10017360:	2a00      	cmp	r2, #0
10017362:	d100      	bne.n	10017366 <_printf_i+0x2a>
10017364:	e0b5      	b.n	100174d2 <_printf_i+0x196>
10017366:	2a58      	cmp	r2, #88	; 0x58
10017368:	d000      	beq.n	1001736c <_printf_i+0x30>
1001736a:	e0c5      	b.n	100174f8 <_printf_i+0x1bc>
1001736c:	3145      	adds	r1, #69	; 0x45
1001736e:	700a      	strb	r2, [r1, #0]
10017370:	4a81      	ldr	r2, [pc, #516]	; (10017578 <_printf_i+0x23c>)
10017372:	e04f      	b.n	10017414 <_printf_i+0xd8>
10017374:	2a64      	cmp	r2, #100	; 0x64
10017376:	d01d      	beq.n	100173b4 <_printf_i+0x78>
10017378:	2a69      	cmp	r2, #105	; 0x69
1001737a:	d01b      	beq.n	100173b4 <_printf_i+0x78>
1001737c:	e0bc      	b.n	100174f8 <_printf_i+0x1bc>
1001737e:	2a73      	cmp	r2, #115	; 0x73
10017380:	d100      	bne.n	10017384 <_printf_i+0x48>
10017382:	e0aa      	b.n	100174da <_printf_i+0x19e>
10017384:	d809      	bhi.n	1001739a <_printf_i+0x5e>
10017386:	2a6f      	cmp	r2, #111	; 0x6f
10017388:	d029      	beq.n	100173de <_printf_i+0xa2>
1001738a:	2a70      	cmp	r2, #112	; 0x70
1001738c:	d000      	beq.n	10017390 <_printf_i+0x54>
1001738e:	e0b3      	b.n	100174f8 <_printf_i+0x1bc>
10017390:	2220      	movs	r2, #32
10017392:	6809      	ldr	r1, [r1, #0]
10017394:	430a      	orrs	r2, r1
10017396:	6022      	str	r2, [r4, #0]
10017398:	e037      	b.n	1001740a <_printf_i+0xce>
1001739a:	2a75      	cmp	r2, #117	; 0x75
1001739c:	d01f      	beq.n	100173de <_printf_i+0xa2>
1001739e:	2a78      	cmp	r2, #120	; 0x78
100173a0:	d033      	beq.n	1001740a <_printf_i+0xce>
100173a2:	e0a9      	b.n	100174f8 <_printf_i+0x1bc>
100173a4:	000e      	movs	r6, r1
100173a6:	681a      	ldr	r2, [r3, #0]
100173a8:	3642      	adds	r6, #66	; 0x42
100173aa:	1d11      	adds	r1, r2, #4
100173ac:	6019      	str	r1, [r3, #0]
100173ae:	6813      	ldr	r3, [r2, #0]
100173b0:	7033      	strb	r3, [r6, #0]
100173b2:	e0a4      	b.n	100174fe <_printf_i+0x1c2>
100173b4:	6821      	ldr	r1, [r4, #0]
100173b6:	681a      	ldr	r2, [r3, #0]
100173b8:	0608      	lsls	r0, r1, #24
100173ba:	d406      	bmi.n	100173ca <_printf_i+0x8e>
100173bc:	0649      	lsls	r1, r1, #25
100173be:	d504      	bpl.n	100173ca <_printf_i+0x8e>
100173c0:	1d11      	adds	r1, r2, #4
100173c2:	6019      	str	r1, [r3, #0]
100173c4:	2300      	movs	r3, #0
100173c6:	5ed5      	ldrsh	r5, [r2, r3]
100173c8:	e002      	b.n	100173d0 <_printf_i+0x94>
100173ca:	1d11      	adds	r1, r2, #4
100173cc:	6019      	str	r1, [r3, #0]
100173ce:	6815      	ldr	r5, [r2, #0]
100173d0:	2d00      	cmp	r5, #0
100173d2:	da3b      	bge.n	1001744c <_printf_i+0x110>
100173d4:	232d      	movs	r3, #45	; 0x2d
100173d6:	9a04      	ldr	r2, [sp, #16]
100173d8:	426d      	negs	r5, r5
100173da:	7013      	strb	r3, [r2, #0]
100173dc:	e036      	b.n	1001744c <_printf_i+0x110>
100173de:	6821      	ldr	r1, [r4, #0]
100173e0:	681a      	ldr	r2, [r3, #0]
100173e2:	0608      	lsls	r0, r1, #24
100173e4:	d406      	bmi.n	100173f4 <_printf_i+0xb8>
100173e6:	0649      	lsls	r1, r1, #25
100173e8:	d504      	bpl.n	100173f4 <_printf_i+0xb8>
100173ea:	6815      	ldr	r5, [r2, #0]
100173ec:	1d11      	adds	r1, r2, #4
100173ee:	6019      	str	r1, [r3, #0]
100173f0:	b2ad      	uxth	r5, r5
100173f2:	e002      	b.n	100173fa <_printf_i+0xbe>
100173f4:	1d11      	adds	r1, r2, #4
100173f6:	6019      	str	r1, [r3, #0]
100173f8:	6815      	ldr	r5, [r2, #0]
100173fa:	4b5f      	ldr	r3, [pc, #380]	; (10017578 <_printf_i+0x23c>)
100173fc:	7e22      	ldrb	r2, [r4, #24]
100173fe:	9303      	str	r3, [sp, #12]
10017400:	2708      	movs	r7, #8
10017402:	2a6f      	cmp	r2, #111	; 0x6f
10017404:	d01d      	beq.n	10017442 <_printf_i+0x106>
10017406:	270a      	movs	r7, #10
10017408:	e01b      	b.n	10017442 <_printf_i+0x106>
1001740a:	0022      	movs	r2, r4
1001740c:	2178      	movs	r1, #120	; 0x78
1001740e:	3245      	adds	r2, #69	; 0x45
10017410:	7011      	strb	r1, [r2, #0]
10017412:	4a5a      	ldr	r2, [pc, #360]	; (1001757c <_printf_i+0x240>)
10017414:	6819      	ldr	r1, [r3, #0]
10017416:	9203      	str	r2, [sp, #12]
10017418:	1d08      	adds	r0, r1, #4
1001741a:	6822      	ldr	r2, [r4, #0]
1001741c:	6018      	str	r0, [r3, #0]
1001741e:	680d      	ldr	r5, [r1, #0]
10017420:	0610      	lsls	r0, r2, #24
10017422:	d402      	bmi.n	1001742a <_printf_i+0xee>
10017424:	0650      	lsls	r0, r2, #25
10017426:	d500      	bpl.n	1001742a <_printf_i+0xee>
10017428:	b2ad      	uxth	r5, r5
1001742a:	07d3      	lsls	r3, r2, #31
1001742c:	d502      	bpl.n	10017434 <_printf_i+0xf8>
1001742e:	2320      	movs	r3, #32
10017430:	431a      	orrs	r2, r3
10017432:	6022      	str	r2, [r4, #0]
10017434:	2710      	movs	r7, #16
10017436:	2d00      	cmp	r5, #0
10017438:	d103      	bne.n	10017442 <_printf_i+0x106>
1001743a:	2320      	movs	r3, #32
1001743c:	6822      	ldr	r2, [r4, #0]
1001743e:	439a      	bics	r2, r3
10017440:	6022      	str	r2, [r4, #0]
10017442:	0023      	movs	r3, r4
10017444:	2200      	movs	r2, #0
10017446:	3343      	adds	r3, #67	; 0x43
10017448:	701a      	strb	r2, [r3, #0]
1001744a:	e002      	b.n	10017452 <_printf_i+0x116>
1001744c:	270a      	movs	r7, #10
1001744e:	4b4a      	ldr	r3, [pc, #296]	; (10017578 <_printf_i+0x23c>)
10017450:	9303      	str	r3, [sp, #12]
10017452:	6863      	ldr	r3, [r4, #4]
10017454:	60a3      	str	r3, [r4, #8]
10017456:	2b00      	cmp	r3, #0
10017458:	db09      	blt.n	1001746e <_printf_i+0x132>
1001745a:	2204      	movs	r2, #4
1001745c:	6821      	ldr	r1, [r4, #0]
1001745e:	4391      	bics	r1, r2
10017460:	6021      	str	r1, [r4, #0]
10017462:	2d00      	cmp	r5, #0
10017464:	d105      	bne.n	10017472 <_printf_i+0x136>
10017466:	9e04      	ldr	r6, [sp, #16]
10017468:	2b00      	cmp	r3, #0
1001746a:	d011      	beq.n	10017490 <_printf_i+0x154>
1001746c:	e07b      	b.n	10017566 <_printf_i+0x22a>
1001746e:	2d00      	cmp	r5, #0
10017470:	d079      	beq.n	10017566 <_printf_i+0x22a>
10017472:	9e04      	ldr	r6, [sp, #16]
10017474:	0028      	movs	r0, r5
10017476:	0039      	movs	r1, r7
10017478:	f7fc f910 	bl	1001369c <__aeabi_uidivmod>
1001747c:	9b03      	ldr	r3, [sp, #12]
1001747e:	3e01      	subs	r6, #1
10017480:	5c5b      	ldrb	r3, [r3, r1]
10017482:	0028      	movs	r0, r5
10017484:	7033      	strb	r3, [r6, #0]
10017486:	0039      	movs	r1, r7
10017488:	f7fc f882 	bl	10013590 <__aeabi_uidiv>
1001748c:	1e05      	subs	r5, r0, #0
1001748e:	d1f1      	bne.n	10017474 <_printf_i+0x138>
10017490:	2f08      	cmp	r7, #8
10017492:	d109      	bne.n	100174a8 <_printf_i+0x16c>
10017494:	6823      	ldr	r3, [r4, #0]
10017496:	07db      	lsls	r3, r3, #31
10017498:	d506      	bpl.n	100174a8 <_printf_i+0x16c>
1001749a:	6863      	ldr	r3, [r4, #4]
1001749c:	6922      	ldr	r2, [r4, #16]
1001749e:	4293      	cmp	r3, r2
100174a0:	dc02      	bgt.n	100174a8 <_printf_i+0x16c>
100174a2:	2330      	movs	r3, #48	; 0x30
100174a4:	3e01      	subs	r6, #1
100174a6:	7033      	strb	r3, [r6, #0]
100174a8:	9b04      	ldr	r3, [sp, #16]
100174aa:	1b9b      	subs	r3, r3, r6
100174ac:	6123      	str	r3, [r4, #16]
100174ae:	e02b      	b.n	10017508 <_printf_i+0x1cc>
100174b0:	6809      	ldr	r1, [r1, #0]
100174b2:	681a      	ldr	r2, [r3, #0]
100174b4:	0608      	lsls	r0, r1, #24
100174b6:	d407      	bmi.n	100174c8 <_printf_i+0x18c>
100174b8:	0649      	lsls	r1, r1, #25
100174ba:	d505      	bpl.n	100174c8 <_printf_i+0x18c>
100174bc:	1d11      	adds	r1, r2, #4
100174be:	6019      	str	r1, [r3, #0]
100174c0:	6813      	ldr	r3, [r2, #0]
100174c2:	8aa2      	ldrh	r2, [r4, #20]
100174c4:	801a      	strh	r2, [r3, #0]
100174c6:	e004      	b.n	100174d2 <_printf_i+0x196>
100174c8:	1d11      	adds	r1, r2, #4
100174ca:	6019      	str	r1, [r3, #0]
100174cc:	6813      	ldr	r3, [r2, #0]
100174ce:	6962      	ldr	r2, [r4, #20]
100174d0:	601a      	str	r2, [r3, #0]
100174d2:	2300      	movs	r3, #0
100174d4:	9e04      	ldr	r6, [sp, #16]
100174d6:	6123      	str	r3, [r4, #16]
100174d8:	e016      	b.n	10017508 <_printf_i+0x1cc>
100174da:	681a      	ldr	r2, [r3, #0]
100174dc:	1d11      	adds	r1, r2, #4
100174de:	6019      	str	r1, [r3, #0]
100174e0:	6816      	ldr	r6, [r2, #0]
100174e2:	2100      	movs	r1, #0
100174e4:	6862      	ldr	r2, [r4, #4]
100174e6:	0030      	movs	r0, r6
100174e8:	f000 f92a 	bl	10017740 <memchr>
100174ec:	2800      	cmp	r0, #0
100174ee:	d001      	beq.n	100174f4 <_printf_i+0x1b8>
100174f0:	1b80      	subs	r0, r0, r6
100174f2:	6060      	str	r0, [r4, #4]
100174f4:	6863      	ldr	r3, [r4, #4]
100174f6:	e003      	b.n	10017500 <_printf_i+0x1c4>
100174f8:	0026      	movs	r6, r4
100174fa:	3642      	adds	r6, #66	; 0x42
100174fc:	7032      	strb	r2, [r6, #0]
100174fe:	2301      	movs	r3, #1
10017500:	6123      	str	r3, [r4, #16]
10017502:	2300      	movs	r3, #0
10017504:	9a04      	ldr	r2, [sp, #16]
10017506:	7013      	strb	r3, [r2, #0]
10017508:	9b07      	ldr	r3, [sp, #28]
1001750a:	aa09      	add	r2, sp, #36	; 0x24
1001750c:	9300      	str	r3, [sp, #0]
1001750e:	0021      	movs	r1, r4
10017510:	9b06      	ldr	r3, [sp, #24]
10017512:	9805      	ldr	r0, [sp, #20]
10017514:	f7ff fea4 	bl	10017260 <_printf_common>
10017518:	1c43      	adds	r3, r0, #1
1001751a:	d102      	bne.n	10017522 <_printf_i+0x1e6>
1001751c:	2001      	movs	r0, #1
1001751e:	4240      	negs	r0, r0
10017520:	e027      	b.n	10017572 <_printf_i+0x236>
10017522:	6923      	ldr	r3, [r4, #16]
10017524:	0032      	movs	r2, r6
10017526:	9906      	ldr	r1, [sp, #24]
10017528:	9805      	ldr	r0, [sp, #20]
1001752a:	9d07      	ldr	r5, [sp, #28]
1001752c:	47a8      	blx	r5
1001752e:	1c43      	adds	r3, r0, #1
10017530:	d0f4      	beq.n	1001751c <_printf_i+0x1e0>
10017532:	6823      	ldr	r3, [r4, #0]
10017534:	2500      	movs	r5, #0
10017536:	079b      	lsls	r3, r3, #30
10017538:	d40f      	bmi.n	1001755a <_printf_i+0x21e>
1001753a:	9b09      	ldr	r3, [sp, #36]	; 0x24
1001753c:	68e0      	ldr	r0, [r4, #12]
1001753e:	4298      	cmp	r0, r3
10017540:	da17      	bge.n	10017572 <_printf_i+0x236>
10017542:	0018      	movs	r0, r3
10017544:	e015      	b.n	10017572 <_printf_i+0x236>
10017546:	0022      	movs	r2, r4
10017548:	2301      	movs	r3, #1
1001754a:	3219      	adds	r2, #25
1001754c:	9906      	ldr	r1, [sp, #24]
1001754e:	9805      	ldr	r0, [sp, #20]
10017550:	9e07      	ldr	r6, [sp, #28]
10017552:	47b0      	blx	r6
10017554:	1c43      	adds	r3, r0, #1
10017556:	d0e1      	beq.n	1001751c <_printf_i+0x1e0>
10017558:	3501      	adds	r5, #1
1001755a:	68e3      	ldr	r3, [r4, #12]
1001755c:	9a09      	ldr	r2, [sp, #36]	; 0x24
1001755e:	1a9b      	subs	r3, r3, r2
10017560:	429d      	cmp	r5, r3
10017562:	dbf0      	blt.n	10017546 <_printf_i+0x20a>
10017564:	e7e9      	b.n	1001753a <_printf_i+0x1fe>
10017566:	0026      	movs	r6, r4
10017568:	9b03      	ldr	r3, [sp, #12]
1001756a:	3642      	adds	r6, #66	; 0x42
1001756c:	781b      	ldrb	r3, [r3, #0]
1001756e:	7033      	strb	r3, [r6, #0]
10017570:	e78e      	b.n	10017490 <_printf_i+0x154>
10017572:	b00b      	add	sp, #44	; 0x2c
10017574:	bdf0      	pop	{r4, r5, r6, r7, pc}
10017576:	46c0      	nop			; (mov r8, r8)
10017578:	10018881 	.word	0x10018881
1001757c:	10018892 	.word	0x10018892

10017580 <_putc_r>:
10017580:	b570      	push	{r4, r5, r6, lr}
10017582:	0006      	movs	r6, r0
10017584:	000d      	movs	r5, r1
10017586:	0014      	movs	r4, r2
10017588:	2800      	cmp	r0, #0
1001758a:	d004      	beq.n	10017596 <_putc_r+0x16>
1001758c:	6983      	ldr	r3, [r0, #24]
1001758e:	2b00      	cmp	r3, #0
10017590:	d101      	bne.n	10017596 <_putc_r+0x16>
10017592:	f7ff fc29 	bl	10016de8 <__sinit>
10017596:	4b12      	ldr	r3, [pc, #72]	; (100175e0 <_putc_r+0x60>)
10017598:	429c      	cmp	r4, r3
1001759a:	d101      	bne.n	100175a0 <_putc_r+0x20>
1001759c:	6874      	ldr	r4, [r6, #4]
1001759e:	e008      	b.n	100175b2 <_putc_r+0x32>
100175a0:	4b10      	ldr	r3, [pc, #64]	; (100175e4 <_putc_r+0x64>)
100175a2:	429c      	cmp	r4, r3
100175a4:	d101      	bne.n	100175aa <_putc_r+0x2a>
100175a6:	68b4      	ldr	r4, [r6, #8]
100175a8:	e003      	b.n	100175b2 <_putc_r+0x32>
100175aa:	4b0f      	ldr	r3, [pc, #60]	; (100175e8 <_putc_r+0x68>)
100175ac:	429c      	cmp	r4, r3
100175ae:	d100      	bne.n	100175b2 <_putc_r+0x32>
100175b0:	68f4      	ldr	r4, [r6, #12]
100175b2:	68a3      	ldr	r3, [r4, #8]
100175b4:	3b01      	subs	r3, #1
100175b6:	60a3      	str	r3, [r4, #8]
100175b8:	2b00      	cmp	r3, #0
100175ba:	da05      	bge.n	100175c8 <_putc_r+0x48>
100175bc:	69a2      	ldr	r2, [r4, #24]
100175be:	4293      	cmp	r3, r2
100175c0:	db08      	blt.n	100175d4 <_putc_r+0x54>
100175c2:	b2eb      	uxtb	r3, r5
100175c4:	2b0a      	cmp	r3, #10
100175c6:	d005      	beq.n	100175d4 <_putc_r+0x54>
100175c8:	6823      	ldr	r3, [r4, #0]
100175ca:	b2e8      	uxtb	r0, r5
100175cc:	1c5a      	adds	r2, r3, #1
100175ce:	6022      	str	r2, [r4, #0]
100175d0:	701d      	strb	r5, [r3, #0]
100175d2:	e004      	b.n	100175de <_putc_r+0x5e>
100175d4:	0022      	movs	r2, r4
100175d6:	0029      	movs	r1, r5
100175d8:	0030      	movs	r0, r6
100175da:	f7ff fa43 	bl	10016a64 <__swbuf_r>
100175de:	bd70      	pop	{r4, r5, r6, pc}
100175e0:	10018810 	.word	0x10018810
100175e4:	10018830 	.word	0x10018830
100175e8:	10018850 	.word	0x10018850

100175ec <__sread>:
100175ec:	b570      	push	{r4, r5, r6, lr}
100175ee:	000c      	movs	r4, r1
100175f0:	250e      	movs	r5, #14
100175f2:	5f49      	ldrsh	r1, [r1, r5]
100175f4:	f000 f8b0 	bl	10017758 <_read_r>
100175f8:	2800      	cmp	r0, #0
100175fa:	db03      	blt.n	10017604 <__sread+0x18>
100175fc:	6d63      	ldr	r3, [r4, #84]	; 0x54
100175fe:	181b      	adds	r3, r3, r0
10017600:	6563      	str	r3, [r4, #84]	; 0x54
10017602:	e003      	b.n	1001760c <__sread+0x20>
10017604:	89a2      	ldrh	r2, [r4, #12]
10017606:	4b02      	ldr	r3, [pc, #8]	; (10017610 <__sread+0x24>)
10017608:	4013      	ands	r3, r2
1001760a:	81a3      	strh	r3, [r4, #12]
1001760c:	bd70      	pop	{r4, r5, r6, pc}
1001760e:	46c0      	nop			; (mov r8, r8)
10017610:	ffffefff 	.word	0xffffefff

10017614 <__swrite>:
10017614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10017616:	001f      	movs	r7, r3
10017618:	898b      	ldrh	r3, [r1, #12]
1001761a:	0005      	movs	r5, r0
1001761c:	000c      	movs	r4, r1
1001761e:	0016      	movs	r6, r2
10017620:	05db      	lsls	r3, r3, #23
10017622:	d505      	bpl.n	10017630 <__swrite+0x1c>
10017624:	230e      	movs	r3, #14
10017626:	5ec9      	ldrsh	r1, [r1, r3]
10017628:	2200      	movs	r2, #0
1001762a:	2302      	movs	r3, #2
1001762c:	f000 f874 	bl	10017718 <_lseek_r>
10017630:	89a2      	ldrh	r2, [r4, #12]
10017632:	4b05      	ldr	r3, [pc, #20]	; (10017648 <__swrite+0x34>)
10017634:	0028      	movs	r0, r5
10017636:	4013      	ands	r3, r2
10017638:	81a3      	strh	r3, [r4, #12]
1001763a:	0032      	movs	r2, r6
1001763c:	230e      	movs	r3, #14
1001763e:	5ee1      	ldrsh	r1, [r4, r3]
10017640:	003b      	movs	r3, r7
10017642:	f000 f81f 	bl	10017684 <_write_r>
10017646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10017648:	ffffefff 	.word	0xffffefff

1001764c <__sseek>:
1001764c:	b570      	push	{r4, r5, r6, lr}
1001764e:	000c      	movs	r4, r1
10017650:	250e      	movs	r5, #14
10017652:	5f49      	ldrsh	r1, [r1, r5]
10017654:	f000 f860 	bl	10017718 <_lseek_r>
10017658:	89a3      	ldrh	r3, [r4, #12]
1001765a:	1c42      	adds	r2, r0, #1
1001765c:	d103      	bne.n	10017666 <__sseek+0x1a>
1001765e:	4a05      	ldr	r2, [pc, #20]	; (10017674 <__sseek+0x28>)
10017660:	4013      	ands	r3, r2
10017662:	81a3      	strh	r3, [r4, #12]
10017664:	e004      	b.n	10017670 <__sseek+0x24>
10017666:	2280      	movs	r2, #128	; 0x80
10017668:	0152      	lsls	r2, r2, #5
1001766a:	4313      	orrs	r3, r2
1001766c:	81a3      	strh	r3, [r4, #12]
1001766e:	6560      	str	r0, [r4, #84]	; 0x54
10017670:	bd70      	pop	{r4, r5, r6, pc}
10017672:	46c0      	nop			; (mov r8, r8)
10017674:	ffffefff 	.word	0xffffefff

10017678 <__sclose>:
10017678:	b510      	push	{r4, lr}
1001767a:	230e      	movs	r3, #14
1001767c:	5ec9      	ldrsh	r1, [r1, r3]
1001767e:	f000 f815 	bl	100176ac <_close_r>
10017682:	bd10      	pop	{r4, pc}

10017684 <_write_r>:
10017684:	b570      	push	{r4, r5, r6, lr}
10017686:	0005      	movs	r5, r0
10017688:	0008      	movs	r0, r1
1001768a:	0011      	movs	r1, r2
1001768c:	2200      	movs	r2, #0
1001768e:	4c06      	ldr	r4, [pc, #24]	; (100176a8 <_write_r+0x24>)
10017690:	6022      	str	r2, [r4, #0]
10017692:	001a      	movs	r2, r3
10017694:	f7f5 fb60 	bl	1000cd58 <_write>
10017698:	1c43      	adds	r3, r0, #1
1001769a:	d103      	bne.n	100176a4 <_write_r+0x20>
1001769c:	6823      	ldr	r3, [r4, #0]
1001769e:	2b00      	cmp	r3, #0
100176a0:	d000      	beq.n	100176a4 <_write_r+0x20>
100176a2:	602b      	str	r3, [r5, #0]
100176a4:	bd70      	pop	{r4, r5, r6, pc}
100176a6:	46c0      	nop			; (mov r8, r8)
100176a8:	1001b82c 	.word	0x1001b82c

100176ac <_close_r>:
100176ac:	2300      	movs	r3, #0
100176ae:	b570      	push	{r4, r5, r6, lr}
100176b0:	4c06      	ldr	r4, [pc, #24]	; (100176cc <_close_r+0x20>)
100176b2:	0005      	movs	r5, r0
100176b4:	0008      	movs	r0, r1
100176b6:	6023      	str	r3, [r4, #0]
100176b8:	f7f0 feb2 	bl	10008420 <_close>
100176bc:	1c43      	adds	r3, r0, #1
100176be:	d103      	bne.n	100176c8 <_close_r+0x1c>
100176c0:	6823      	ldr	r3, [r4, #0]
100176c2:	2b00      	cmp	r3, #0
100176c4:	d000      	beq.n	100176c8 <_close_r+0x1c>
100176c6:	602b      	str	r3, [r5, #0]
100176c8:	bd70      	pop	{r4, r5, r6, pc}
100176ca:	46c0      	nop			; (mov r8, r8)
100176cc:	1001b82c 	.word	0x1001b82c

100176d0 <_fstat_r>:
100176d0:	2300      	movs	r3, #0
100176d2:	b570      	push	{r4, r5, r6, lr}
100176d4:	4c06      	ldr	r4, [pc, #24]	; (100176f0 <_fstat_r+0x20>)
100176d6:	0005      	movs	r5, r0
100176d8:	0008      	movs	r0, r1
100176da:	0011      	movs	r1, r2
100176dc:	6023      	str	r3, [r4, #0]
100176de:	f7f0 fea3 	bl	10008428 <_fstat>
100176e2:	1c43      	adds	r3, r0, #1
100176e4:	d103      	bne.n	100176ee <_fstat_r+0x1e>
100176e6:	6823      	ldr	r3, [r4, #0]
100176e8:	2b00      	cmp	r3, #0
100176ea:	d000      	beq.n	100176ee <_fstat_r+0x1e>
100176ec:	602b      	str	r3, [r5, #0]
100176ee:	bd70      	pop	{r4, r5, r6, pc}
100176f0:	1001b82c 	.word	0x1001b82c

100176f4 <_isatty_r>:
100176f4:	2300      	movs	r3, #0
100176f6:	b570      	push	{r4, r5, r6, lr}
100176f8:	4c06      	ldr	r4, [pc, #24]	; (10017714 <_isatty_r+0x20>)
100176fa:	0005      	movs	r5, r0
100176fc:	0008      	movs	r0, r1
100176fe:	6023      	str	r3, [r4, #0]
10017700:	f7f0 fe98 	bl	10008434 <_isatty>
10017704:	1c43      	adds	r3, r0, #1
10017706:	d103      	bne.n	10017710 <_isatty_r+0x1c>
10017708:	6823      	ldr	r3, [r4, #0]
1001770a:	2b00      	cmp	r3, #0
1001770c:	d000      	beq.n	10017710 <_isatty_r+0x1c>
1001770e:	602b      	str	r3, [r5, #0]
10017710:	bd70      	pop	{r4, r5, r6, pc}
10017712:	46c0      	nop			; (mov r8, r8)
10017714:	1001b82c 	.word	0x1001b82c

10017718 <_lseek_r>:
10017718:	b570      	push	{r4, r5, r6, lr}
1001771a:	0005      	movs	r5, r0
1001771c:	0008      	movs	r0, r1
1001771e:	0011      	movs	r1, r2
10017720:	2200      	movs	r2, #0
10017722:	4c06      	ldr	r4, [pc, #24]	; (1001773c <_lseek_r+0x24>)
10017724:	6022      	str	r2, [r4, #0]
10017726:	001a      	movs	r2, r3
10017728:	f7f0 fe86 	bl	10008438 <_lseek>
1001772c:	1c43      	adds	r3, r0, #1
1001772e:	d103      	bne.n	10017738 <_lseek_r+0x20>
10017730:	6823      	ldr	r3, [r4, #0]
10017732:	2b00      	cmp	r3, #0
10017734:	d000      	beq.n	10017738 <_lseek_r+0x20>
10017736:	602b      	str	r3, [r5, #0]
10017738:	bd70      	pop	{r4, r5, r6, pc}
1001773a:	46c0      	nop			; (mov r8, r8)
1001773c:	1001b82c 	.word	0x1001b82c

10017740 <memchr>:
10017740:	b2c9      	uxtb	r1, r1
10017742:	1882      	adds	r2, r0, r2
10017744:	4290      	cmp	r0, r2
10017746:	d004      	beq.n	10017752 <memchr+0x12>
10017748:	7803      	ldrb	r3, [r0, #0]
1001774a:	428b      	cmp	r3, r1
1001774c:	d002      	beq.n	10017754 <memchr+0x14>
1001774e:	3001      	adds	r0, #1
10017750:	e7f8      	b.n	10017744 <memchr+0x4>
10017752:	2000      	movs	r0, #0
10017754:	4770      	bx	lr
	...

10017758 <_read_r>:
10017758:	b570      	push	{r4, r5, r6, lr}
1001775a:	0005      	movs	r5, r0
1001775c:	0008      	movs	r0, r1
1001775e:	0011      	movs	r1, r2
10017760:	2200      	movs	r2, #0
10017762:	4c06      	ldr	r4, [pc, #24]	; (1001777c <_read_r+0x24>)
10017764:	6022      	str	r2, [r4, #0]
10017766:	001a      	movs	r2, r3
10017768:	f7f5 fad6 	bl	1000cd18 <_read>
1001776c:	1c43      	adds	r3, r0, #1
1001776e:	d103      	bne.n	10017778 <_read_r+0x20>
10017770:	6823      	ldr	r3, [r4, #0]
10017772:	2b00      	cmp	r3, #0
10017774:	d000      	beq.n	10017778 <_read_r+0x20>
10017776:	602b      	str	r3, [r5, #0]
10017778:	bd70      	pop	{r4, r5, r6, pc}
1001777a:	46c0      	nop			; (mov r8, r8)
1001777c:	1001b82c 	.word	0x1001b82c
10017780:	0000000d 	.word	0x0000000d
10017784:	74617551 	.word	0x74617551
10017788:	696e7265 	.word	0x696e7265
1001778c:	20736e6f 	.word	0x20736e6f
10017790:	31207828 	.word	0x31207828
10017794:	30303030 	.word	0x30303030
10017798:	71203a29 	.word	0x71203a29
1001779c:	6c252031 	.word	0x6c252031
100177a0:	71202c64 	.word	0x71202c64
100177a4:	6c252032 	.word	0x6c252032
100177a8:	71202c64 	.word	0x71202c64
100177ac:	6c252033 	.word	0x6c252033
100177b0:	71202c64 	.word	0x71202c64
100177b4:	6c252034 	.word	0x6c252034
100177b8:	00000064 	.word	0x00000064
100177bc:	736d735b 	.word	0x736d735b
100177c0:	656c625f 	.word	0x656c625f
100177c4:	776f705f 	.word	0x776f705f
100177c8:	645f7265 	.word	0x645f7265
100177cc:	5d6e776f 	.word	0x5d6e776f
100177d0:	00000000 	.word	0x00000000
100177d4:	736d735b 	.word	0x736d735b
100177d8:	656c625f 	.word	0x656c625f
100177dc:	6961705f 	.word	0x6961705f
100177e0:	5f646572 	.word	0x5f646572
100177e4:	005d6e66 	.word	0x005d6e66
100177e8:	736d735b 	.word	0x736d735b
100177ec:	656c625f 	.word	0x656c625f
100177f0:	7664615f 	.word	0x7664615f
100177f4:	69747265 	.word	0x69747265
100177f8:	095d6573 	.word	0x095d6573
100177fc:	65766441 	.word	0x65766441
10017800:	73697472 	.word	0x73697472
10017804:	6e656d65 	.word	0x6e656d65
10017808:	61642074 	.word	0x61642074
1001780c:	73206174 	.word	0x73206174
10017810:	66207465 	.word	0x66207465
10017814:	656c6961 	.word	0x656c6961
10017818:	00002164 	.word	0x00002164
1001781c:	736d735b 	.word	0x736d735b
10017820:	7265735f 	.word	0x7265735f
10017824:	65636976 	.word	0x65636976
10017828:	7664615f 	.word	0x7664615f
1001782c:	69747265 	.word	0x69747265
10017830:	095d6573 	.word	0x095d6573
10017834:	20454c42 	.word	0x20454c42
10017838:	65766441 	.word	0x65766441
1001783c:	73697472 	.word	0x73697472
10017840:	6e656d65 	.word	0x6e656d65
10017844:	74732074 	.word	0x74732074
10017848:	20747261 	.word	0x20747261
1001784c:	6c696166 	.word	0x6c696166
10017850:	203a6465 	.word	0x203a6465
10017854:	73616572 	.word	0x73616572
10017858:	30206e6f 	.word	0x30206e6f
1001785c:	00782578 	.word	0x00782578
10017860:	49544f4e 	.word	0x49544f4e
10017864:	41434946 	.word	0x41434946
10017868:	4e4f4954 	.word	0x4e4f4954
1001786c:	52524520 	.word	0x52524520
10017870:	2121524f 	.word	0x2121524f
10017874:	00000000 	.word	0x00000000

10017878 <sms_ble_gap_cb>:
	...
10017884:	10008ec1 00000000 10008ed9 10008fd5     ................
	...
1001789c:	10008f11 10008d4d 00000000 00000000     ....M...........
	...

100178c4 <sms_ble_gatt_server_cb>:
100178c4:	10008d69 10008db9 00000000 00000000     i...............
	...
100178ec:	736d735b 7475625f 5f6e6f74 666e6f63     [sms_button_conf
100178fc:	72756769 50095d65 6c626f72 77206d65     igure].Problem w
1001790c:	656c6968 74657320 676e6974 20707520     hile setting up 
1001791c:	74747562 00316e6f 736d735b 7475625f     button1.[sms_but
1001792c:	5f6e6f74 666e6f63 72756769 50095d65     ton_configure].P
1001793c:	6c626f72 77206d65 656c6968 74657320     roblem while set
1001794c:	676e6974 20707520 414c5058 44454e49     ting up XPLAINED
1001795c:	65737520 75622072 6e6f7474 00000000      user button....
1001796c:	736d735b 7475625f 5f6e6f74 2d5d6e66     [sms_button_fn]-
1001797c:	00000030 736d735b 7475625f 5f6e6f74     0...[sms_button_
1001798c:	2d5d6e66 00000031 736d735b 7475625f     fn]-1...[sms_but
1001799c:	5f6e6f74 69666564 735f656e 69767265     ton_define_servi
100179ac:	5d736563 72655309 65636976 65642073     ces].Services de
100179bc:	696e6966 6620676e 656c6961 72202c64     fining failed, r
100179cc:	6f736165 7830206e 00007825 626f7250     eason 0x%x..Prob
100179dc:	206d656c 6c696877 65732065 6e697474     lem while settin
100179ec:	70672067 70206f69 00006e69 736d735b     g gpio pin..[sms
100179fc:	756d695f 6e6f635f 75676966 675f6572     _imu_configure_g
10017a0c:	5d6f6970 6f725009 6d656c62 69687720     pio].Problem whi
10017a1c:	7320656c 69747465 7520676e 4d492070     le setting up IM
10017a2c:	52442055 70205944 00006e69 736d735b     U DRDY pin..[sms
10017a3c:	75706d5f 6665645f 5f656e69 76726573     _mpu_define_serv
10017a4c:	73656369 6553095d 63697672 64207365     ices].Services d
10017a5c:	6e696665 20676e69 6c696166 202c6465     efining failed, 
10017a6c:	73616572 30206e6f 00782578 2055504d     reason 0x%x.MPU 
10017a7c:	696c6163 74617262 2e2e6465 6962202e     calibrated... bi
10017a8c:	76207361 65756c61 25203a73 2520646c     as values: %ld %
10017a9c:	2520646c 2f20646c 646c2520 646c2520     ld %ld / %ld %ld
10017aac:	646c2520 00000000 736d735b 6572705f      %ld....[sms_pre
10017abc:	72757373 65645f65 656e6966 7265735f     ssure_define_ser
10017acc:	65636976 53095d73 69767265 20736563     vices].Services 
10017adc:	69666564 676e696e 69616620 2c64656c     defining failed,
10017aec:	61657220 206e6f73 78257830 00000000      reason 0x%x....
10017afc:	736d735b 6175645f 6d69746c 5f317265     [sms_dualtimer1_
10017b0c:	005d6e66 736d735b 6175645f 6d69746c     fn].[sms_dualtim
10017b1c:	5f327265 005d6e66 1000bd38 1000bd46     er2_fn].8...F...
10017b2c:	1000bd54 1000bd62 1000bd70 1000bd7e     T...b...p...~...
10017b3c:	1000bd8c 1000bd9c 1000bdac 1000bdbc     ................
10017b4c:	1000bdcc 1000bddc 1000bdec 1000bdfc     ................
10017b5c:	1000be0c 1000be1c 1000be2c 1000be3c     ........,...<...
10017b6c:	1000be4c 1000be5c 1000be6c 1000be7c     L...\...l...|...
10017b7c:	1000be8c 1000be9c 1000beac 1000bebc     ................
10017b8c:	1000becc 1000bedc 1000beea 1000bef8     ................
10017b9c:	1000bf06 1000bf14 1000bf22 1000bf30     ........"...0...
10017bac:	1000bf3e 1000bf4c 1000bf5c 1000bf6c     >...L...\...l...
10017bbc:	1000bf7c 1000bf8c 1000bf9c 1000bfac     |...............
10017bcc:	1000bfbc 1000bfcc 1000bfdc 1000bfec     ................
10017bdc:	1000bffc 1000c00c 1000c01c 1000c02c     ............,...
10017bec:	1000c03c 1000c04c 1000c05a 1000c068     <...L...Z...h...
10017bfc:	1000c094 1000c0a2 1000c0b0 1000c0be     ................
10017c0c:	1000c0cc 1000c0da 1000c0e8 1000c0f6     ................
10017c1c:	1000c104 1000c112 1000c120 1000c12e     ........ .......
10017c2c:	1000c13c 1000c14a 1000c158 1000c166     <...J...X...f...
10017c3c:	1000c174 1000c182 1000c190 1000c19e     t...............
10017c4c:	1000c1ac 1000c1ba 1000c1c8 1000c1d6     ................
10017c5c:	1000c1e4 1000c1f2 1000c200 1000c20e     ................
10017c6c:	1000c21c 1000c22a 1000c238 1000c246     ....*...8...F...
10017c7c:	1000c254 1000c262 1000c270 1000c27e     T...b...p...~...
10017c8c:	1000c28c 1000c29a 1000c2a8 1000c2b6     ................
10017c9c:	1000c2c4 1000c2d2 1000c2e0 1000c2ee     ................
10017cac:	1000c2fc 1000c30a 1000c318 1000c326     ............&...
10017cbc:	1000c334 1000c342 1000c350 1000c35e     4...B...P...^...
10017ccc:	1000c36c 1000c37a 1000c414 1000c43c     l...z.......<...
10017cdc:	1000c464 1000c48c 1000c6cc 1000c4bc     d...............
10017cec:	1000c4d4 1000c54c 1000c564 1000c4ec     ....L...d.......
10017cfc:	1000c504 1000c51c 1000c534 1000c57c     ........4...|...
10017d0c:	1000c840 1000c840 1000c840 1000c840     @...@...@...@...
10017d1c:	1000c840 1000c840 1000c840 1000c840     @...@...@...@...
10017d2c:	1000c624 1000c63c 1000c654 1000c6e2     $...<...T.......
10017d3c:	1000c5ac 1000c840 1000c840 1000c840     ....@...@...@...
10017d4c:	1000c840 1000c840 1000c840 1000c66c     @...@...@...l...
10017d5c:	1000c684 1000c69c 1000c6b4 1000c840     ............@...
10017d6c:	1000c7f8 1000c810 1000c840 1000c840     ........@...@...
10017d7c:	1000c70e 1000c724 1000c73a 1000c750     ....$...:...P...
10017d8c:	1000c840 1000c840 1000c840 1000c840     @...@...@...@...
10017d9c:	1000c840 1000c840 1000c840 1000c840     @...@...@...@...
10017dac:	1000c400 1000c428 1000c450 1000c478     ....(...P...x...
10017dbc:	1000c4a4 1000c594 1000c5c4 1000c5dc     ................
10017dcc:	1000c5f4 1000c60c 1000c6f8 1000c766     ............f...
10017ddc:	1000c7e0 1000c828 1000ce90 1000ce92     ....(...........
10017dec:	1000ce78 1000ce78 1000ce78 1000ce90     x...x...x.......
10017dfc:	1000ce78 1000ce78 1000d6d6 1000d74a     x...x.......J...
10017e0c:	1000d6be 1000d750 1000d6c4 1000d6ca     ....P...........
10017e1c:	1000d6d0 1000dd70 1000dd70 1000dd70     ....p...p...p...
10017e2c:	1000dd70 1000dd70 1000dd70 1000dd70     p...p...p...p...
10017e3c:	1000dd70 1000dd70 1000dd70 1000dd70     p...p...p...p...
10017e4c:	1000dd70 1000dd70 1000dd70 1000dd70     p...p...p...p...
10017e5c:	1000dd70 1000dd70 1000dd70 1000dd70     p...p...p...p...
10017e6c:	1000dd8e 1000dd8e 1000dd8e 1000dd8e     ................
10017e7c:	1000dd8e 1000dd8e 1000dd8e 1000dd8e     ................
10017e8c:	1000dd8e 1000dd8e 1000ddb0 1000ddb0     ................
10017e9c:	1000ddb0 1000ddb0 1000ddb0 1000ddb0     ................
10017eac:	1000ddb0 1000ddb0 1000ddb0 1000ddb0     ................
10017ebc:	1000ddd2 1000ddd2 1000ddd2 1000ddd2     ................
10017ecc:	1000ddd2 1000ddd2 1000ddec 1000ddec     ................
10017edc:	1000ddec 1000ddec 1000ddec 1000ddec     ................
10017eec:	1000ddec 1000ddec 1000ddec 1000de06     ................
10017efc:	1000de06 1000de28 1000de28 1000de42     ....(...(...B...
10017f0c:	1000de28 34333231 00003635 efcdab00     (...123456......
10017f1c:	00efcdab                                ....

10017f20 <ble_mgr_gatt_server_handle>:
	...
10017f38:	1000cdad 1000ce11 1000cdb1 00000000     ................
10017f48:	6e616353 676e696e 61662020 64656c69     Scanning  failed
10017f58:	00000000 65766441 73697472 20676e69     ....Advertising 
10017f68:	6c696166 00006465 2055544d 6e616843     failed..MTU Chan
10017f78:	46206567 656c6961 43202c64 656e6e6f     ge Failed, Conne
10017f88:	6f697463 6148206e 656c646e 2c64253a     ction Handle:%d,
10017f98:	65704f20 69746172 253a6e6f 00000064      Operation:%d...
10017fa8:	69766544 64206563 6f637369 63656e6e     Device disconnec
10017fb8:	20646574 73616552 303a6e6f 32302578     ted Reason:0x%02
10017fc8:	61482078 656c646e 2578303d 00000078     x Handle=0x%x...
10017fd8:	72636e45 69747079 66206e6f 656c6961     Encryption faile
10017fe8:	00000064 72636e45 69747079 63206e6f     d...Encryption c
10017ff8:	6c706d6f 64657465 63757320 73736563     ompleted success
10018008:	6c6c7566 00000079 20454c42 69766544     fully...BLE Devi
10018018:	6e206563 6620746f 646e756f 636e6520     ce not found enc
10018028:	74707972 206e6f69 6f666e69 00000000     ryption info....
10018038:	6f666e49 78616d3a 6d756d69 2e6f6e20     Info:maximum no.
10018048:	7320666f 206e6163 69766564 72206563     of scan device r
10018058:	68636165 2e2e6465 6f74532e 6e697070     eached...Stoppin
10018068:	63532067 00006e61 6c696146 74206465     g Scan..Failed t
10018078:	7473206f 7320706f 6e6e6163 00676e69     o stop scanning.
10018088:	72696150 20676e69 6c696166 2e2e6465     Pairing failed..
10018098:	7369442e 6e6e6f63 69746365 0000676e     .Disconnecting..
100180a8:	63736944 656e6e6f 52207463 65757165     Disconnect Reque
100180b8:	46207473 656c6961 00000064 72696150     st Failed...Pair
100180c8:	20676e69 636f7270 72756465 6f632065     ing procedure co
100180d8:	656c706d 20646574 63637573 66737365     mpleted successf
100180e8:	796c6c75 00000000 20454c42 69766544     ully....BLE Devi
100180f8:	6e206563 6620746f 646e756f 206f7420     ce not found to 
10018108:	726f7473 68742065 61702065 6e697269     store the pairin
10018118:	6e692067 00006f66 72636e45 69747079     g info..Encrypti
10018128:	4e206e6f 7320746f 74726174 00006465     on Not started..
10018138:	76616c53 65532065 69727563 52207974     Slave Security R
10018148:	2d207165 74754120 746e6568 74616369     eq - Authenticat
10018158:	206e6f69 6c696146 00006465 72696150     ion Failed..Pair
10018168:	71655220 74736575 41202d20 65687475      Request - Authe
10018178:	6369746e 6f697461 6146206e 64656c69     ntication Failed
10018188:	00000000 65746e45 68742072 61502065     ....Enter the Pa
10018198:	656b7373 2d362879 69676944 69202974     sskey(6-Digit) i
100181a8:	6554206e 6e696d72 003a6c61 206e6950     n Terminal:.Pin 
100181b8:	656d6954 0074756f 63736944 656e6e6f     Timeout.Disconne
100181c8:	6e697463 2e2e2067 0000002e 61656c50     cting ......Plea
100181d8:	45206573 7265746e 65687420 6c6f6620     se Enter the fol
100181e8:	69776f6c 5020676e 2d737361 65646f63     lowing Pass-code
100181f8:	206e6f28 6568746f 65442072 65636976     (on other Device
10018208:	00003a29 72696150 79656b2d 70657220     ):..Pair-key rep
10018218:	6620796c 656c6961 00000064 20424f4f     ly failed...OOB 
10018228:	74616546 20657275 20746f4e 70707573     Feature Not supp
10018238:	6574726f 00000064 65746e45 20646572     orted...Entered 
10018248:	73736150 646f632d 00003a65 72696150     Pass-code:..Pair
10018258:	20676e69 6f666e69 74616d72 206e6f69     ing information 
10018268:	7020666f 20726565 69766564 69206563     of peer device i
10018278:	6f6e2073 76612074 616c6961 2e656c62     s not available.
10018288:	00000000 61656c50 75206573 6961706e     ....Please unpai
10018298:	68742072 65642065 65636976 6f726620     r the device fro
100182a8:	6570206d 64207265 63697665 6f6d2865     m peer device(mo
100182b8:	656c6962 65732029 6e697474 6d207367     bile) settings m
100182c8:	20756e65 20646e61 72617473 61702074     enu and start pa
100182d8:	6e697269 67612067 006e6961 72636e45     iring again.Encr
100182e8:	69747079 52206e6f 65757165 52207473     yption Request R
100182f8:	796c7065 69614620 0064656c 656c625b     eply Failed.[ble
10018308:	696e695f 09095d74 424d4153 49203131     _init]..SAMB11 I
10018318:	6974696e 7a696c61 6f697461 6166206e     nitialization fa
10018328:	64656c69 00000000 656c625b 696e695f     iled....[ble_ini
10018338:	09095d74 61656c50 63206573 6b636568     t]..Please check
10018348:	65687420 776f7020 61207265 6320646e      the power and c
10018358:	656e6e6f 6f697463 202f206e 64726168     onnection / hard
10018368:	65726177 6e6f6320 7463656e 0000726f     ware connector..
10018378:	52424153 4d532d65 00000053 69766544     SABRe-SMS...Devi
10018388:	6e206563 20656d61 20746573 6c696166     ce name set fail
10018398:	00006465 656c625b 7465735f 7665645f     ed..[ble_set_dev
100183a8:	6e6f635f 5d676966 44420909 64646120     _config]..BD add
100183b8:	73736572 74656720 69616620 0064656c     ress get failed.
100183c8:	656c625b 7465735f 7665645f 6e6f635f     [ble_set_dev_con
100183d8:	5d676966 74655309 454c4220 76654420     fig].Set BLE Dev
100183e8:	20656369 666e6f63 72756769 6f697461     ice configuratio
100183f8:	6166206e 64656c69 00000000 656c625b     n failed....[ble
10018408:	7465735f 7665645f 6e6f635f 5d676966     _set_dev_config]
10018418:	74655309 454c4220 76654420 20656369     .Set BLE Device 
10018428:	72646441 20737365 6c696166 00006465     Address failed..
10018438:	6e616353 676e696e 502e2e2e 7361656c     Scanning...Pleas
10018448:	61772065 2e2e7469 0000002e 76616c53     e wait......Slav
10018458:	65732065 69727563 72207974 65757165     e security reque
10018468:	66207473 656c6961 00000064 6e6e6f43     st failed...Conn
10018478:	65746365 6f742064 65657020 65642072     ected to peer de
10018488:	65636976 74697720 64612068 73657264     vice with addres
10018498:	78302073 78323025 78323025 78323025     s 0x%02x%02x%02x
100184a8:	78323025 78323025 78323025 00000000     %02x%02x%02x....
100184b8:	6e6e6f43 69746365 48206e6f 6c646e61     Connection Handl
100184c8:	64252065 00000000 6f736552 6e69766c     e %d....Resolvin
100184d8:	61522067 6d6f646e 64646120 73736572     g Random address
100184e8:	69616620 2a64656c 0000002a 2078614d      failed**...Max 
100184f8:	626d756e 6f207265 6f632066 63656e6e     number of connec
10018508:	6e6f6974 61657220 64656863 6425203a     tion reached: %d
10018518:	3d3d3d20 7369443e 6e6e6f63 69746365      ===>Disconnecti
10018528:	2e2e676e 0000002e 69766544 43206563     ng......Device C
10018538:	656e6e6f 6f697463 6146206e 64656c69     onnection Failed
10018548:	53202d20 75746174 25203a73 00000064      - Status: %d...
10018558:	5a2d571c 00002dbe 20454c42 65766441     .W-Z.-..BLE Adve
10018568:	73697472 6e656d65 61642074 73206174     rtisement data s
10018578:	66207465 656c6961 00000064              et failed...

10018584 <ble_mgr_gap_handle>:
10018584:	1000cda9 1000cf8d 1000cdc1 1000cde9     ................
10018594:	00000000 1000da39 1000ce41 1000cdbd     ....9...A.......
100185a4:	1000d12d 1000d00d 1000d32d 1000d145     -.......-...E...
100185b4:	1000d47d 1000d5c1 1000cec9 1000dc75     }...........u...
	...
100185d0:	6e6e6143 7320746f 74726174 554d4920     Cannot start IMU
100185e0:	00000000 306e7442 746e6920 202e2e2e     ....Btn0 int... 
100185f0:	00000000 316e7442 746e6920 202e2e2e     ....Btn1 int... 
10018600:	00000000 656d6954 69203172 2e2e746e     ....Timer1 int..
10018610:	0000202e 656d6954 69203272 2e2e746e     . ..Timer2 int..
10018620:	0000202e 73756c66 676e6968 00000021     . ..flushing!...
10018630:	73657250 65732073 6e69646e 25282067     Press sending (%
10018640:	64252f64 2e2e2e29 00000020 20504147     d/%d)... ...GAP 
10018650:	656d6974 0074756f 6e657645 65672074     timeout.Event ge
10018660:	69742074 756f656d 00000074 20454c42     t timeout...BLE 
10018670:	6f727265 636f2072 72727563 41006465     error occurred.A
10018680:	6c656d74 726f4320 04022e70                       tmel Corp.

1001868a <CSWTCH.45>:
1001868a:	00100402                                         ...

1001868d <CSWTCH.47>:
1001868d:	03010300 03030303 03030303 02020303              ...............

1001869c <client_conf_uuid>:
1001869c:	29042902                                         .)

1001869e <presentation_format_uuid>:
1001869e:	29012904                                         .)

100186a0 <user_desc_uuid>:
100186a0:	29032901                                         .)

100186a2 <server_conf_uuid>:
100186a2:	29002903                                         .)

100186a4 <extended_props_uuid>:
100186a4:	28022900                                         .)

100186a6 <include_uuid>:
100186a6:	28032802                                         .(

100186a8 <char_uuid>:
100186a8:	00002803 00776f70 74727173 00000066     .(..pow.sqrtf...

100186b8 <TWO52>:
100186b8:	00000000 43300000 00000000 c3300000     ......0C......0.
100186c8:	10013e6e 10013d92 10013e50 10013e28     n>...=..P>..(>..
100186d8:	10013e50 10013e1c 10013e50 10013e28     P>...>..P>..(>..
100186e8:	10013d92 10013d92 10013e1c 10013e28     .=...=...>..(>..
100186f8:	10013ed4 10013ed4 10013ed4 10013e56     .>...>...>..V>..
10018708:	10013d92 10013d92 10013e3c 10013e26     .=...=..<>..&>..
10018718:	10013e3c 10013e1c 10013e3c 10013e26     <>...>..<>..&>..
10018728:	10013d92 10013d92 10013e1c 10013e26     .=...=...>..&>..
10018738:	10013ed4 10013ed4 10013ed4 10013ee0     .>...>...>...>..
10018748:	100141cc 1001412a 1001412a 10014128     .A..*A..*A..(A..
10018758:	100141be 100141be 100141b4 10014128     .A...A...A..(A..
10018768:	100141be 100141b4 100141be 10014128     .A...A...A..(A..
10018778:	100141c4 100141c4 100141c4 1001424e     .A...A...A..NB..
10018788:	10014fac 10014e7a 10014f80 10014e70     .O..zN...O..pN..
10018798:	10014f80 10014f8a 10014f80 10014e70     .O...O...O..pN..
100187a8:	10014e7a 10014e7a 10014f8a 10014e70     zN..zN...O..pN..
100187b8:	10014e66 10014e66 10014e66 100151dc     fN..fN..fN...Q..
100187c8:	100157f4 100156b4 100156b4 100156b2     .W...V...V...V..
100187d8:	100157cc 100157cc 100157be 100156b2     .W...W...W...V..
100187e8:	100157cc 100157be 100157cc 100156b2     .W...W...W...V..
100187f8:	100157d4 100157d4 100157d4 100159d4     .W...W...W...Y..
10018808:	00000043                                C...

1001880c <_global_impure_ptr>:
1001880c:	100188d4                                ....

10018810 <__sf_fake_stdin>:
	...

10018830 <__sf_fake_stdout>:
	...

10018850 <__sf_fake_stderr>:
	...
10018870:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
10018880:	32313000 36353433 41393837 45444342     .0123456789ABCDE
10018890:	31300046 35343332 39383736 64636261     F.0123456789abcd
100188a0:	00006665                                ef..

100188a4 <_init>:
100188a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100188a6:	46c0      	nop			; (mov r8, r8)
100188a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
100188aa:	bc08      	pop	{r3}
100188ac:	469e      	mov	lr, r3
100188ae:	4770      	bx	lr

100188b0 <__init_array_start>:
100188b0:	100080b1 	.word	0x100080b1

100188b4 <_fini>:
100188b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100188b6:	46c0      	nop			; (mov r8, r8)
100188b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
100188ba:	bc08      	pop	{r3}
100188bc:	469e      	mov	lr, r3
100188be:	4770      	bx	lr

100188c0 <__fini_array_start>:
100188c0:	10008089 	.word	0x10008089
