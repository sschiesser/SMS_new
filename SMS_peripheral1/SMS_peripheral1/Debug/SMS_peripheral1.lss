
SMS_peripheral1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000108d4  10008000  10008000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000074  100188d4  100188d4  000188d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00002efc  10018948  10018948  00018948  2**2
                  ALLOC
  3 .stack        00000804  1001b844  1001b844  00018948  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00018948  2**0
                  CONTENTS, READONLY
  5 .comment      000000b4  00000000  00000000  00018970  2**0
                  CONTENTS, READONLY
  6 .debug_info   0004b48c  00000000  00000000  00018a24  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005334  00000000  00000000  00063eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00009e0b  00000000  00000000  000691e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000b80  00000000  00000000  00072fef  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000b40  00000000  00000000  00073b6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0000c34a  00000000  00000000  000746af  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000160ba  00000000  00000000  000809f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0014190e  00000000  00000000  00096ab3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002d08  00000000  00000000  001d83c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

10008000 <app_entry>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void app_entry(void)
{
10008000:	b510      	push	{r4, lr}

    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
10008002:	4b18      	ldr	r3, [pc, #96]	; (10008064 <app_entry+0x64>)
10008004:	4a18      	ldr	r2, [pc, #96]	; (10008068 <app_entry+0x68>)
10008006:	429a      	cmp	r2, r3
10008008:	d003      	beq.n	10008012 <app_entry+0x12>
        for (; pDest < &_erelocate;) {
1000800a:	4b18      	ldr	r3, [pc, #96]	; (1000806c <app_entry+0x6c>)
1000800c:	4a15      	ldr	r2, [pc, #84]	; (10008064 <app_entry+0x64>)
1000800e:	429a      	cmp	r2, r3
10008010:	d304      	bcc.n	1000801c <app_entry+0x1c>
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008012:	4b17      	ldr	r3, [pc, #92]	; (10008070 <app_entry+0x70>)
10008014:	4a17      	ldr	r2, [pc, #92]	; (10008074 <app_entry+0x74>)
10008016:	429a      	cmp	r2, r3
10008018:	d310      	bcc.n	1000803c <app_entry+0x3c>
1000801a:	e01e      	b.n	1000805a <app_entry+0x5a>
1000801c:	4b16      	ldr	r3, [pc, #88]	; (10008078 <app_entry+0x78>)
1000801e:	4a13      	ldr	r2, [pc, #76]	; (1000806c <app_entry+0x6c>)
10008020:	3203      	adds	r2, #3
10008022:	1ad2      	subs	r2, r2, r3
10008024:	0892      	lsrs	r2, r2, #2
10008026:	3201      	adds	r2, #1
10008028:	0092      	lsls	r2, r2, #2
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
1000802a:	2300      	movs	r3, #0
            *pDest++ = *pSrc++;
1000802c:	480d      	ldr	r0, [pc, #52]	; (10008064 <app_entry+0x64>)
1000802e:	490e      	ldr	r1, [pc, #56]	; (10008068 <app_entry+0x68>)
10008030:	58cc      	ldr	r4, [r1, r3]
10008032:	50c4      	str	r4, [r0, r3]
10008034:	3304      	adds	r3, #4
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
10008036:	4293      	cmp	r3, r2
10008038:	d1fa      	bne.n	10008030 <app_entry+0x30>
1000803a:	e7ea      	b.n	10008012 <app_entry+0x12>
1000803c:	4b0f      	ldr	r3, [pc, #60]	; (1000807c <app_entry+0x7c>)
1000803e:	490c      	ldr	r1, [pc, #48]	; (10008070 <app_entry+0x70>)
10008040:	3103      	adds	r1, #3
10008042:	1ac9      	subs	r1, r1, r3
10008044:	0889      	lsrs	r1, r1, #2
10008046:	3101      	adds	r1, #1
10008048:	0089      	lsls	r1, r1, #2
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
1000804a:	2300      	movs	r3, #0
        *pDest++ = 0;
1000804c:	4c09      	ldr	r4, [pc, #36]	; (10008074 <app_entry+0x74>)
1000804e:	2000      	movs	r0, #0
10008050:	191a      	adds	r2, r3, r4
10008052:	6010      	str	r0, [r2, #0]
10008054:	3304      	adds	r3, #4
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008056:	428b      	cmp	r3, r1
10008058:	d1fa      	bne.n	10008050 <app_entry+0x50>
        *pDest++ = 0;
    }

    /* Initialize the C library */
    __libc_init_array();
1000805a:	4b09      	ldr	r3, [pc, #36]	; (10008080 <app_entry+0x80>)
1000805c:	4798      	blx	r3

    /* Branch to main function */
    main();
1000805e:	4b09      	ldr	r3, [pc, #36]	; (10008084 <app_entry+0x84>)
10008060:	4798      	blx	r3

    /* return to BLE OS*/
    return;
}
10008062:	bd10      	pop	{r4, pc}
10008064:	100188d4 	.word	0x100188d4
10008068:	100188d4 	.word	0x100188d4
1000806c:	10018948 	.word	0x10018948
10008070:	1001b844 	.word	0x1001b844
10008074:	10018948 	.word	0x10018948
10008078:	100188d8 	.word	0x100188d8
1000807c:	1001894c 	.word	0x1001894c
10008080:	10016579 	.word	0x10016579
10008084:	1000eb11 	.word	0x1000eb11

10008088 <__do_global_dtors_aux>:
10008088:	b510      	push	{r4, lr}
1000808a:	4c06      	ldr	r4, [pc, #24]	; (100080a4 <__do_global_dtors_aux+0x1c>)
1000808c:	7823      	ldrb	r3, [r4, #0]
1000808e:	2b00      	cmp	r3, #0
10008090:	d107      	bne.n	100080a2 <__do_global_dtors_aux+0x1a>
10008092:	4b05      	ldr	r3, [pc, #20]	; (100080a8 <__do_global_dtors_aux+0x20>)
10008094:	2b00      	cmp	r3, #0
10008096:	d002      	beq.n	1000809e <__do_global_dtors_aux+0x16>
10008098:	4804      	ldr	r0, [pc, #16]	; (100080ac <__do_global_dtors_aux+0x24>)
1000809a:	e000      	b.n	1000809e <__do_global_dtors_aux+0x16>
1000809c:	bf00      	nop
1000809e:	2301      	movs	r3, #1
100080a0:	7023      	strb	r3, [r4, #0]
100080a2:	bd10      	pop	{r4, pc}
100080a4:	10018948 	.word	0x10018948
100080a8:	00000000 	.word	0x00000000
100080ac:	100188d4 	.word	0x100188d4

100080b0 <frame_dummy>:
100080b0:	4b08      	ldr	r3, [pc, #32]	; (100080d4 <frame_dummy+0x24>)
100080b2:	b510      	push	{r4, lr}
100080b4:	2b00      	cmp	r3, #0
100080b6:	d003      	beq.n	100080c0 <frame_dummy+0x10>
100080b8:	4907      	ldr	r1, [pc, #28]	; (100080d8 <frame_dummy+0x28>)
100080ba:	4808      	ldr	r0, [pc, #32]	; (100080dc <frame_dummy+0x2c>)
100080bc:	e000      	b.n	100080c0 <frame_dummy+0x10>
100080be:	bf00      	nop
100080c0:	4807      	ldr	r0, [pc, #28]	; (100080e0 <frame_dummy+0x30>)
100080c2:	6803      	ldr	r3, [r0, #0]
100080c4:	2b00      	cmp	r3, #0
100080c6:	d100      	bne.n	100080ca <frame_dummy+0x1a>
100080c8:	bd10      	pop	{r4, pc}
100080ca:	4b06      	ldr	r3, [pc, #24]	; (100080e4 <frame_dummy+0x34>)
100080cc:	2b00      	cmp	r3, #0
100080ce:	d0fb      	beq.n	100080c8 <frame_dummy+0x18>
100080d0:	4798      	blx	r3
100080d2:	e7f9      	b.n	100080c8 <frame_dummy+0x18>
100080d4:	00000000 	.word	0x00000000
100080d8:	1001894c 	.word	0x1001894c
100080dc:	100188d4 	.word	0x100188d4
100080e0:	100188d4 	.word	0x100188d4
100080e4:	00000000 	.word	0x00000000

100080e8 <aon_sleep_timer_get_config_defaults>:
 * \param[out]  config  Pointer to a AON Sleep Timer module configuration structure to set
 */
void aon_sleep_timer_get_config_defaults(struct aon_sleep_timer_config *config)
{
	/* Default configuration values */
	config->wakeup = AON_SLEEP_TIMER_WAKEUP_ARM;
100080e8:	2301      	movs	r3, #1
100080ea:	7003      	strb	r3, [r0, #0]
	config->mode = AON_SLEEP_TIMER_SINGLE_MODE;
100080ec:	7043      	strb	r3, [r0, #1]
	config->counter = 32000;
100080ee:	23fa      	movs	r3, #250	; 0xfa
100080f0:	01db      	lsls	r3, r3, #7
100080f2:	6043      	str	r3, [r0, #4]
}
100080f4:	4770      	bx	lr
100080f6:	46c0      	nop			; (mov r8, r8)

100080f8 <aon_sleep_timer_disable>:
 */
void aon_sleep_timer_disable(void)
{
	uint32_t regval;

	AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = 0;
100080f8:	4b06      	ldr	r3, [pc, #24]	; (10008114 <aon_sleep_timer_disable+0x1c>)
100080fa:	2200      	movs	r2, #0
100080fc:	605a      	str	r2, [r3, #4]
	regval = AON_SLEEP_TIMER0->CONTROL.reg;
100080fe:	681a      	ldr	r2, [r3, #0]
	regval &= ~AON_SLEEP_TIMER_CONTROL_RELOAD_ENABLE;
	regval &= ~AON_SLEEP_TIMER_CONTROL_SINGLE_COUNT_ENABLE;
10008100:	2103      	movs	r1, #3
10008102:	438a      	bics	r2, r1
	AON_SLEEP_TIMER0->CONTROL.reg = regval;
10008104:	601a      	str	r2, [r3, #0]

	while (AON_SLEEP_TIMER0->CONTROL.reg & (1 << 14)) {
10008106:	0019      	movs	r1, r3
10008108:	2280      	movs	r2, #128	; 0x80
1000810a:	01d2      	lsls	r2, r2, #7
1000810c:	680b      	ldr	r3, [r1, #0]
1000810e:	4213      	tst	r3, r2
10008110:	d1fc      	bne.n	1000810c <aon_sleep_timer_disable+0x14>
	}
}
10008112:	4770      	bx	lr
10008114:	4000d000 	.word	0x4000d000

10008118 <aon_sleep_timer_clear_interrup>:
 * This flag will be cleared automatically once the IRQ
 * has been seen on the sleep clock.
 */
void aon_sleep_timer_clear_interrup(void)
{
	AON_SLEEP_TIMER0->CONTROL.reg |= AON_SLEEP_TIMER_CONTROL_IRQ_CLEAR;
10008118:	4a02      	ldr	r2, [pc, #8]	; (10008124 <aon_sleep_timer_clear_interrup+0xc>)
1000811a:	6811      	ldr	r1, [r2, #0]
1000811c:	2310      	movs	r3, #16
1000811e:	430b      	orrs	r3, r1
10008120:	6013      	str	r3, [r2, #0]
}
10008122:	4770      	bx	lr
10008124:	4000d000 	.word	0x4000d000

10008128 <aon_sleep_timer_isr_handler>:
 *
 * Timer ISR handler.
 *
 */
static void aon_sleep_timer_isr_handler(void)
{
10008128:	b510      	push	{r4, lr}
	aon_sleep_timer_clear_interrup();
1000812a:	4b04      	ldr	r3, [pc, #16]	; (1000813c <aon_sleep_timer_isr_handler+0x14>)
1000812c:	4798      	blx	r3

	if (aon_sleep_timer_callback) {
1000812e:	4b04      	ldr	r3, [pc, #16]	; (10008140 <aon_sleep_timer_isr_handler+0x18>)
10008130:	681b      	ldr	r3, [r3, #0]
10008132:	2b00      	cmp	r3, #0
10008134:	d000      	beq.n	10008138 <aon_sleep_timer_isr_handler+0x10>
		aon_sleep_timer_callback();
10008136:	4798      	blx	r3
	}
}
10008138:	bd10      	pop	{r4, pc}
1000813a:	46c0      	nop			; (mov r8, r8)
1000813c:	10008119 	.word	0x10008119
10008140:	10018964 	.word	0x10018964

10008144 <aon_sleep_timer_register_callback>:
 *
 * \param[in]     callback_func Pointer to callback function
 */
void aon_sleep_timer_register_callback(aon_sleep_timer_callback_t fun)
{
	aon_sleep_timer_callback = fun;
10008144:	4b01      	ldr	r3, [pc, #4]	; (1000814c <aon_sleep_timer_register_callback+0x8>)
10008146:	6018      	str	r0, [r3, #0]
}
10008148:	4770      	bx	lr
1000814a:	46c0      	nop			; (mov r8, r8)
1000814c:	10018964 	.word	0x10018964

10008150 <aon_sleep_timer_unregister_callback>:
 * Unregisters and disable a callback function implemented by the user.
 *
 */
void aon_sleep_timer_unregister_callback(void)
{
	aon_sleep_timer_callback = NULL;
10008150:	2200      	movs	r2, #0
10008152:	4b01      	ldr	r3, [pc, #4]	; (10008158 <aon_sleep_timer_unregister_callback+0x8>)
10008154:	601a      	str	r2, [r3, #0]
}
10008156:	4770      	bx	lr
10008158:	10018964 	.word	0x10018964

1000815c <aon_sleep_timer_init>:
 *
 * \param[in]     config       Pointer to the AON Sleep Timer configuration options struct
 *
 */
void aon_sleep_timer_init(const struct aon_sleep_timer_config *config)
{
1000815c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000815e:	b083      	sub	sp, #12
	uint32_t aon_st_ctrl = 0;

	AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg = AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_RESETVALUE;
10008160:	2200      	movs	r2, #0
10008162:	4b29      	ldr	r3, [pc, #164]	; (10008208 <aon_sleep_timer_init+0xac>)
10008164:	731a      	strb	r2, [r3, #12]
	if (config->wakeup == AON_SLEEP_TIMER_WAKEUP_ARM_BLE) {
10008166:	7803      	ldrb	r3, [r0, #0]
10008168:	2b02      	cmp	r3, #2
1000816a:	d105      	bne.n	10008178 <aon_sleep_timer_init+0x1c>
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
1000816c:	4a26      	ldr	r2, [pc, #152]	; (10008208 <aon_sleep_timer_init+0xac>)
1000816e:	7b11      	ldrb	r1, [r2, #12]
10008170:	3301      	adds	r3, #1
10008172:	430b      	orrs	r3, r1
10008174:	7313      	strb	r3, [r2, #12]
10008176:	e005      	b.n	10008184 <aon_sleep_timer_init+0x28>
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE |
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_BLE_ENABLE;
	} else if (config->wakeup == AON_SLEEP_TIMER_WAKEUP_ARM) {
10008178:	2b01      	cmp	r3, #1
1000817a:	d103      	bne.n	10008184 <aon_sleep_timer_init+0x28>
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
1000817c:	4a22      	ldr	r2, [pc, #136]	; (10008208 <aon_sleep_timer_init+0xac>)
1000817e:	7b11      	ldrb	r1, [r2, #12]
10008180:	430b      	orrs	r3, r1
10008182:	7313      	strb	r3, [r2, #12]
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
10008184:	4b21      	ldr	r3, [pc, #132]	; (1000820c <aon_sleep_timer_init+0xb0>)
10008186:	681a      	ldr	r2, [r3, #0]
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
10008188:	0053      	lsls	r3, r2, #1
1000818a:	d01f      	beq.n	100081cc <aon_sleep_timer_init+0x70>
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
1000818c:	4d1f      	ldr	r5, [pc, #124]	; (1000820c <aon_sleep_timer_init+0xb0>)
1000818e:	2700      	movs	r7, #0

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;

	for (i = 0; i < cycles*100; i++) {
10008190:	262c      	movs	r6, #44	; 0x2c
10008192:	36ff      	adds	r6, #255	; 0xff
10008194:	2180      	movs	r1, #128	; 0x80
10008196:	01c9      	lsls	r1, r1, #7
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
10008198:	602f      	str	r7, [r5, #0]

static aon_sleep_timer_callback_t aon_sleep_timer_callback = NULL;

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;
1000819a:	9701      	str	r7, [sp, #4]

	for (i = 0; i < cycles*100; i++) {
1000819c:	9701      	str	r7, [sp, #4]
1000819e:	9b01      	ldr	r3, [sp, #4]
100081a0:	42b3      	cmp	r3, r6
100081a2:	d806      	bhi.n	100081b2 <aon_sleep_timer_init+0x56>
		asm volatile ("nop");
100081a4:	46c0      	nop			; (mov r8, r8)

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;

	for (i = 0; i < cycles*100; i++) {
100081a6:	9b01      	ldr	r3, [sp, #4]
100081a8:	3301      	adds	r3, #1
100081aa:	9301      	str	r3, [sp, #4]
100081ac:	9b01      	ldr	r3, [sp, #4]
100081ae:	42b3      	cmp	r3, r6
100081b0:	d9f8      	bls.n	100081a4 <aon_sleep_timer_init+0x48>
100081b2:	7844      	ldrb	r4, [r0, #1]
100081b4:	000b      	movs	r3, r1
100081b6:	2c00      	cmp	r4, #0
100081b8:	d103      	bne.n	100081c2 <aon_sleep_timer_init+0x66>
100081ba:	2380      	movs	r3, #128	; 0x80
100081bc:	009b      	lsls	r3, r3, #2
100081be:	e000      	b.n	100081c2 <aon_sleep_timer_init+0x66>
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
		delay_cycle(3);
		while (aon_st_ctrl & ((config->mode == AON_SLEEP_TIMER_RELOAD_MODE) ?
				(1 << 9) : (1 << 14))) {
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
100081c0:	682a      	ldr	r2, [r5, #0]

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
		delay_cycle(3);
		while (aon_st_ctrl & ((config->mode == AON_SLEEP_TIMER_RELOAD_MODE) ?
100081c2:	4213      	tst	r3, r2
100081c4:	d1fc      	bne.n	100081c0 <aon_sleep_timer_init+0x64>
				(1 << 9) : (1 << 14))) {
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
		}
		aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
100081c6:	682a      	ldr	r2, [r5, #0]
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
100081c8:	0053      	lsls	r3, r2, #1
100081ca:	d1e5      	bne.n	10008198 <aon_sleep_timer_init+0x3c>
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
		}
		aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	}

	if (config->mode == AON_SLEEP_TIMER_RELOAD_MODE) {
100081cc:	7843      	ldrb	r3, [r0, #1]
100081ce:	2b00      	cmp	r3, #0
100081d0:	d105      	bne.n	100081de <aon_sleep_timer_init+0x82>
		/* Reload counter will start here */
		AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = config->counter;
100081d2:	4b0e      	ldr	r3, [pc, #56]	; (1000820c <aon_sleep_timer_init+0xb0>)
100081d4:	6842      	ldr	r2, [r0, #4]
100081d6:	605a      	str	r2, [r3, #4]
		AON_SLEEP_TIMER0->CONTROL.reg = AON_SLEEP_TIMER_CONTROL_RELOAD_ENABLE;
100081d8:	2201      	movs	r2, #1
100081da:	601a      	str	r2, [r3, #0]
100081dc:	e004      	b.n	100081e8 <aon_sleep_timer_init+0x8c>
	} else {
		/* Single counter will start here */
		AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = config->counter;
100081de:	4b0b      	ldr	r3, [pc, #44]	; (1000820c <aon_sleep_timer_init+0xb0>)
100081e0:	6842      	ldr	r2, [r0, #4]
100081e2:	605a      	str	r2, [r3, #4]
		AON_SLEEP_TIMER0->CONTROL.reg = AON_SLEEP_TIMER_CONTROL_SINGLE_COUNT_ENABLE;
100081e4:	2202      	movs	r2, #2
100081e6:	601a      	str	r2, [r3, #0]
	}

	if (config->mode == AON_SLEEP_TIMER_SINGLE_MODE) {
100081e8:	7843      	ldrb	r3, [r0, #1]
100081ea:	2b01      	cmp	r3, #1
100081ec:	d106      	bne.n	100081fc <aon_sleep_timer_init+0xa0>
		while ((AON_SLEEP_TIMER0->CONTROL.reg &
100081ee:	4907      	ldr	r1, [pc, #28]	; (1000820c <aon_sleep_timer_init+0xb0>)
100081f0:	22e0      	movs	r2, #224	; 0xe0
100081f2:	01d2      	lsls	r2, r2, #7
100081f4:	680b      	ldr	r3, [r1, #0]
100081f6:	4013      	ands	r3, r2
100081f8:	4293      	cmp	r3, r2
100081fa:	d1fb      	bne.n	100081f4 <aon_sleep_timer_init+0x98>
				AON_SLEEP_TIMER_CONTROL_SLP_TIMER_SINGLE_COUNT_ENABLE_DLY_Msk)
				!= AON_SLEEP_TIMER_CONTROL_SLP_TIMER_SINGLE_COUNT_ENABLE_DLY_Msk) {
		}
	}

	system_register_isr(RAM_ISR_TABLE_AON_SLEEP_TIMER_INDEX, (uint32_t)aon_sleep_timer_isr_handler);
100081fc:	4904      	ldr	r1, [pc, #16]	; (10008210 <aon_sleep_timer_init+0xb4>)
100081fe:	202b      	movs	r0, #43	; 0x2b
10008200:	4b04      	ldr	r3, [pc, #16]	; (10008214 <aon_sleep_timer_init+0xb8>)
10008202:	4798      	blx	r3
}
10008204:	b003      	add	sp, #12
10008206:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008208:	4000e000 	.word	0x4000e000
1000820c:	4000d000 	.word	0x4000d000
10008210:	10008129 	.word	0x10008129
10008214:	1000c891 	.word	0x1000c891

10008218 <_i2c_master_read_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
10008218:	b5f0      	push	{r4, r5, r6, r7, lr}
1000821a:	4657      	mov	r7, sl
1000821c:	464e      	mov	r6, r9
1000821e:	4645      	mov	r5, r8
10008220:	b4e0      	push	{r5, r6, r7}
10008222:	b082      	sub	sp, #8
	Assert(config);
	
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
	uint16_t length = packet->data_length;
10008224:	884d      	ldrh	r5, [r1, #2]

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
10008226:	2317      	movs	r3, #23
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
	uint16_t length = packet->data_length;

	if (length == 0) {
10008228:	2d00      	cmp	r5, #0
1000822a:	d033      	beq.n	10008294 <_i2c_master_read_packet+0x7c>
	Assert(module->hw);
	Assert(config);
	
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
1000822c:	6803      	ldr	r3, [r0, #0]
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2c *const i2c_module)
{
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
1000822e:	2428      	movs	r4, #40	; 0x28
10008230:	5d1a      	ldrb	r2, [r3, r4]
10008232:	07d2      	lsls	r2, r2, #31
10008234:	d4fc      	bmi.n	10008230 <_i2c_master_read_packet+0x18>
	}

	i2c_wait_for_idle(i2c_module);

	/* Flush the FIFO */
	i2c_module->I2C_FLUSH.reg = 1;
10008236:	2201      	movs	r2, #1
10008238:	2434      	movs	r4, #52	; 0x34
1000823a:	551a      	strb	r2, [r3, r4]

	/* Enable I2C on bus (start condition). */
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
1000823c:	3c14      	subs	r4, #20
1000823e:	551a      	strb	r2, [r3, r4]
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
10008240:	880a      	ldrh	r2, [r1, #0]
10008242:	0052      	lsls	r2, r2, #1
10008244:	2402      	movs	r4, #2
10008246:	34ff      	adds	r4, #255	; 0xff
10008248:	4322      	orrs	r2, r4
1000824a:	b292      	uxth	r2, r2
1000824c:	801a      	strh	r2, [r3, #0]
			(packet->address << 1) | I2C_TRANSFER_READ;

	/* Now check whether the core has sent the data out and free the bus. */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
1000824e:	3cf1      	subs	r4, #241	; 0xf1
		status = i2c_module->TRANSMIT_STATUS.reg;
10008250:	7a1a      	ldrb	r2, [r3, #8]
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
			(packet->address << 1) | I2C_TRANSFER_READ;

	/* Now check whether the core has sent the data out and free the bus. */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
10008252:	4222      	tst	r2, r4
10008254:	d0fc      	beq.n	10008250 <_i2c_master_read_packet+0x38>
10008256:	2200      	movs	r2, #0
		status = i2c_module->TRANSMIT_STATUS.reg;
	}

	do {
		/* Send stop condition. */
		if ((!module->no_stop) && (counter == (length - 1))) {
10008258:	1e6c      	subs	r4, r5, #1
1000825a:	46a4      	mov	ip, r4
			i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
1000825c:	2420      	movs	r4, #32
1000825e:	46a1      	mov	r9, r4
10008260:	2400      	movs	r4, #0
10008262:	46a0      	mov	r8, r4
		}

		status = i2c_module->RECEIVE_STATUS.reg;
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
10008264:	2601      	movs	r6, #1
		status = i2c_module->TRANSMIT_STATUS.reg;
	}

	do {
		/* Send stop condition. */
		if ((!module->no_stop) && (counter == (length - 1))) {
10008266:	7944      	ldrb	r4, [r0, #5]
10008268:	2c00      	cmp	r4, #0
1000826a:	d104      	bne.n	10008276 <_i2c_master_read_packet+0x5e>
1000826c:	4562      	cmp	r2, ip
1000826e:	d102      	bne.n	10008276 <_i2c_master_read_packet+0x5e>
			i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
10008270:	464c      	mov	r4, r9
10008272:	4647      	mov	r7, r8
10008274:	551f      	strb	r7, [r3, r4]
		}

		status = i2c_module->RECEIVE_STATUS.reg;
10008276:	7b1c      	ldrb	r4, [r3, #12]
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
10008278:	4234      	tst	r4, r6
1000827a:	d008      	beq.n	1000828e <_i2c_master_read_packet+0x76>
			packet->data[counter++] = i2c_module->RECEIVE_DATA.reg;
1000827c:	1c54      	adds	r4, r2, #1
1000827e:	46a2      	mov	sl, r4
10008280:	791f      	ldrb	r7, [r3, #4]
10008282:	684c      	ldr	r4, [r1, #4]
10008284:	54a7      	strb	r7, [r4, r2]
10008286:	4652      	mov	r2, sl
10008288:	466c      	mov	r4, sp
1000828a:	80e2      	strh	r2, [r4, #6]
1000828c:	88e2      	ldrh	r2, [r4, #6]
	} while (counter < length);
1000828e:	42aa      	cmp	r2, r5
10008290:	d3e9      	bcc.n	10008266 <_i2c_master_read_packet+0x4e>

	return STATUS_OK;
10008292:	2300      	movs	r3, #0
}
10008294:	0018      	movs	r0, r3
10008296:	b002      	add	sp, #8
10008298:	bc1c      	pop	{r2, r3, r4}
1000829a:	4690      	mov	r8, r2
1000829c:	4699      	mov	r9, r3
1000829e:	46a2      	mov	sl, r4
100082a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100082a2:	46c0      	nop			; (mov r8, r8)

100082a4 <_i2c_master_write_packet>:
 * \retval STATUS_OK                    The packet was write successfully
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
100082a4:	b5f0      	push	{r4, r5, r6, r7, lr}
100082a6:	4684      	mov	ip, r0
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);
	
	I2c *const i2c_module = (module->hw);
100082a8:	6802      	ldr	r2, [r0, #0]
	uint16_t counter = 0;
	uint32_t status  = 0;

	uint16_t length = packet->data_length;
100082aa:	884e      	ldrh	r6, [r1, #2]
100082ac:	2428      	movs	r4, #40	; 0x28
100082ae:	5d13      	ldrb	r3, [r2, r4]
100082b0:	07db      	lsls	r3, r3, #31
100082b2:	d4fc      	bmi.n	100082ae <_i2c_master_write_packet+0xa>

	i2c_wait_for_idle(i2c_module);

	/* Flush the FIFO */
	i2c_module->I2C_FLUSH.reg = 1;
100082b4:	2301      	movs	r3, #1
100082b6:	2434      	movs	r4, #52	; 0x34
100082b8:	5513      	strb	r3, [r2, r4]

	/* Enable I2C on bus (start condition) */
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
100082ba:	3c14      	subs	r4, #20
100082bc:	5513      	strb	r3, [r2, r4]

	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
100082be:	880b      	ldrh	r3, [r1, #0]
100082c0:	005b      	lsls	r3, r3, #1
100082c2:	34e0      	adds	r4, #224	; 0xe0
100082c4:	4323      	orrs	r3, r4
100082c6:	b29b      	uxth	r3, r3
100082c8:	8013      	strh	r3, [r2, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);
	
	I2c *const i2c_module = (module->hw);
	uint16_t counter = 0;
100082ca:	2400      	movs	r4, #0
	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
			((packet->address) << 1) | I2C_TRANSFER_WRITE;
	do {
		status = i2c_module->TRANSMIT_STATUS.reg;
		if (status & I2C_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_Msk) {
100082cc:	2501      	movs	r5, #1

	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
			((packet->address) << 1) | I2C_TRANSFER_WRITE;
	do {
		status = i2c_module->TRANSMIT_STATUS.reg;
100082ce:	7a13      	ldrb	r3, [r2, #8]
100082d0:	b2db      	uxtb	r3, r3
		if (status & I2C_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_Msk) {
100082d2:	421d      	tst	r5, r3
100082d4:	d004      	beq.n	100082e0 <_i2c_master_write_packet+0x3c>
			i2c_module->TRANSMIT_DATA.reg = packet->data[counter++];
100082d6:	1c67      	adds	r7, r4, #1
100082d8:	6848      	ldr	r0, [r1, #4]
100082da:	5d04      	ldrb	r4, [r0, r4]
100082dc:	8014      	strh	r4, [r2, #0]
100082de:	b2bc      	uxth	r4, r7
		}
	} while (counter < length); 
100082e0:	42b4      	cmp	r4, r6
100082e2:	d3f4      	bcc.n	100082ce <_i2c_master_write_packet+0x2a>

	/* Now check whether the core has sent the data out and free the bus */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
100082e4:	06db      	lsls	r3, r3, #27
100082e6:	d403      	bmi.n	100082f0 <_i2c_master_write_packet+0x4c>
100082e8:	2110      	movs	r1, #16
			status = i2c_module->TRANSMIT_STATUS.reg;
100082ea:	7a13      	ldrb	r3, [r2, #8]
			i2c_module->TRANSMIT_DATA.reg = packet->data[counter++];
		}
	} while (counter < length); 

	/* Now check whether the core has sent the data out and free the bus */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
100082ec:	420b      	tst	r3, r1
100082ee:	d0fc      	beq.n	100082ea <_i2c_master_write_packet+0x46>
			status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition */
	if (!module->no_stop) {
100082f0:	4663      	mov	r3, ip
100082f2:	795b      	ldrb	r3, [r3, #5]
100082f4:	2b00      	cmp	r3, #0
100082f6:	d102      	bne.n	100082fe <_i2c_master_write_packet+0x5a>
		i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
100082f8:	2100      	movs	r1, #0
100082fa:	3320      	adds	r3, #32
100082fc:	54d1      	strb	r1, [r2, r3]
	}

	return STATUS_OK;
}
100082fe:	2000      	movs	r0, #0
10008300:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008302:	46c0      	nop			; (mov r8, r8)

10008304 <i2c_master_get_config_defaults>:
		struct i2c_master_config *const config)
{
	/* Sanity check */
	Assert(config);
	
	config->clock_source    = I2C_CLK_INPUT_3;
10008304:	2303      	movs	r3, #3
10008306:	7003      	strb	r3, [r0, #0]
	config->clock_divider   = 0x10;
10008308:	330d      	adds	r3, #13
1000830a:	8043      	strh	r3, [r0, #2]
	config->pin_number_pad0 = PIN_LP_GPIO_8;
1000830c:	3b08      	subs	r3, #8
1000830e:	6043      	str	r3, [r0, #4]
	config->pin_number_pad1 = PIN_LP_GPIO_9;
10008310:	3301      	adds	r3, #1
10008312:	60c3      	str	r3, [r0, #12]
	config->pinmux_sel_pad0 = MUX_LP_GPIO_8_I2C0_SDA;
10008314:	3b07      	subs	r3, #7
10008316:	6083      	str	r3, [r0, #8]
	config->pinmux_sel_pad1 = MUX_LP_GPIO_9_I2C0_SCL;
10008318:	6103      	str	r3, [r0, #16]
}
1000831a:	4770      	bx	lr

1000831c <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		I2c *const hw,
		const struct i2c_master_config *const config)
{
1000831c:	b570      	push	{r4, r5, r6, lr}
1000831e:	0004      	movs	r4, r0
10008320:	0015      	movs	r5, r2
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);
	
	module->hw = hw;
10008322:	6001      	str	r1, [r0, #0]

	/* Sanity check arguments. */
	if ((module == NULL) || (config == NULL))
10008324:	2800      	cmp	r0, #0
10008326:	d026      	beq.n	10008376 <i2c_master_init+0x5a>
10008328:	2a00      	cmp	r2, #0
1000832a:	d026      	beq.n	1000837a <i2c_master_init+0x5e>
1000832c:	2228      	movs	r2, #40	; 0x28
1000832e:	5c8b      	ldrb	r3, [r1, r2]
10008330:	07db      	lsls	r3, r3, #31
10008332:	d4fc      	bmi.n	1000832e <i2c_master_init+0x12>
 *
 */
static inline void i2c_disable(I2c *const i2c_module)
{
	i2c_wait_for_idle(i2c_module);
	i2c_module->I2C_MODULE_ENABLE.reg = 0;
10008334:	2300      	movs	r3, #0
10008336:	750b      	strb	r3, [r1, #20]
		return STATUS_ERR_INVALID_ARG;

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
10008338:	6823      	ldr	r3, [r4, #0]
1000833a:	4a11      	ldr	r2, [pc, #68]	; (10008380 <i2c_master_init+0x64>)
1000833c:	4293      	cmp	r3, r2
1000833e:	d103      	bne.n	10008348 <i2c_master_init+0x2c>
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
10008340:	2003      	movs	r0, #3
10008342:	4b10      	ldr	r3, [pc, #64]	; (10008384 <i2c_master_init+0x68>)
10008344:	4798      	blx	r3
10008346:	e006      	b.n	10008356 <i2c_master_init+0x3a>
	} else if (module->hw == I2C1) {
		system_peripheral_reset(PERIPHERAL_I2C1_CORE);
	} else {
		return STATUS_ERR_INVALID_ARG;
10008348:	2017      	movs	r0, #23
		return STATUS_ERR_INVALID_ARG;

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
	} else if (module->hw == I2C1) {
1000834a:	4a0f      	ldr	r2, [pc, #60]	; (10008388 <i2c_master_init+0x6c>)
1000834c:	4293      	cmp	r3, r2
1000834e:	d115      	bne.n	1000837c <i2c_master_init+0x60>
		system_peripheral_reset(PERIPHERAL_I2C1_CORE);
10008350:	3002      	adds	r0, #2
10008352:	4b0c      	ldr	r3, [pc, #48]	; (10008384 <i2c_master_init+0x68>)
10008354:	4798      	blx	r3
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);

	I2c *const i2c_module = (module->hw);
10008356:	6824      	ldr	r4, [r4, #0]

	/* Set the pinmux for this i2c module. */
	gpio_pinmux_cofiguration(config->pin_number_pad0, (uint16_t)(config->pinmux_sel_pad0));
10008358:	8929      	ldrh	r1, [r5, #8]
1000835a:	7928      	ldrb	r0, [r5, #4]
1000835c:	4e0b      	ldr	r6, [pc, #44]	; (1000838c <i2c_master_init+0x70>)
1000835e:	47b0      	blx	r6
	gpio_pinmux_cofiguration(config->pin_number_pad1, (uint16_t)(config->pinmux_sel_pad1));
10008360:	8a29      	ldrh	r1, [r5, #16]
10008362:	7b28      	ldrb	r0, [r5, #12]
10008364:	47b0      	blx	r6
	/* Set clock. */
	i2c_module->CLOCK_SOURCE_SELECT.reg = config->clock_source;
10008366:	782b      	ldrb	r3, [r5, #0]
10008368:	7423      	strb	r3, [r4, #16]
	i2c_module->I2C_CLK_DIVIDER.reg = I2C_CLK_DIVIDER_I2C_DIVIDE_RATIO(config->clock_divider);
1000836a:	886b      	ldrh	r3, [r5, #2]
1000836c:	8323      	strh	r3, [r4, #24]
	/* Enable master mode. */
	i2c_module->I2C_MASTER_MODE.reg = I2C_MASTER_MODE_MASTER_ENABLE_1;
1000836e:	2301      	movs	r3, #1
10008370:	7723      	strb	r3, [r4, #28]
#endif

	/* Set config and return status. */
	_i2c_master_set_config(module, config);

	return STATUS_OK;
10008372:	2000      	movs	r0, #0
10008374:	e002      	b.n	1000837c <i2c_master_init+0x60>
	
	module->hw = hw;

	/* Sanity check arguments. */
	if ((module == NULL) || (config == NULL))
		return STATUS_ERR_INVALID_ARG;
10008376:	2017      	movs	r0, #23
10008378:	e000      	b.n	1000837c <i2c_master_init+0x60>
1000837a:	2017      	movs	r0, #23

	/* Set config and return status. */
	_i2c_master_set_config(module, config);

	return STATUS_OK;
}
1000837c:	bd70      	pop	{r4, r5, r6, pc}
1000837e:	46c0      	nop			; (mov r8, r8)
10008380:	40003000 	.word	0x40003000
10008384:	1000c429 	.word	0x1000c429
10008388:	40003400 	.word	0x40003400
1000838c:	1000b9b1 	.word	0x1000b9b1

10008390 <i2c_master_read_packet_wait>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
10008390:	b510      	push	{r4, lr}
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
10008392:	2800      	cmp	r0, #0
10008394:	d008      	beq.n	100083a8 <i2c_master_read_packet_wait+0x18>
		return STATUS_ERR_INVALID_ARG;
10008396:	2317      	movs	r3, #23
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
10008398:	2900      	cmp	r1, #0
1000839a:	d006      	beq.n	100083aa <i2c_master_read_packet_wait+0x1a>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
1000839c:	2300      	movs	r3, #0
1000839e:	7143      	strb	r3, [r0, #5]

	return _i2c_master_read_packet(module, packet);
100083a0:	4b03      	ldr	r3, [pc, #12]	; (100083b0 <i2c_master_read_packet_wait+0x20>)
100083a2:	4798      	blx	r3
100083a4:	0003      	movs	r3, r0
100083a6:	e000      	b.n	100083aa <i2c_master_read_packet_wait+0x1a>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
		return STATUS_ERR_INVALID_ARG;
100083a8:	2317      	movs	r3, #23
#endif

	module->no_stop = false;

	return _i2c_master_read_packet(module, packet);
}
100083aa:	0018      	movs	r0, r3
100083ac:	bd10      	pop	{r4, pc}
100083ae:	46c0      	nop			; (mov r8, r8)
100083b0:	10008219 	.word	0x10008219

100083b4 <i2c_master_write_packet_wait>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
100083b4:	b510      	push	{r4, lr}
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
100083b6:	2800      	cmp	r0, #0
100083b8:	d008      	beq.n	100083cc <i2c_master_write_packet_wait+0x18>
		return STATUS_ERR_INVALID_ARG;
100083ba:	2317      	movs	r3, #23
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
100083bc:	2900      	cmp	r1, #0
100083be:	d006      	beq.n	100083ce <i2c_master_write_packet_wait+0x1a>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
100083c0:	2300      	movs	r3, #0
100083c2:	7143      	strb	r3, [r0, #5]

	return _i2c_master_write_packet(module, packet);
100083c4:	4b03      	ldr	r3, [pc, #12]	; (100083d4 <i2c_master_write_packet_wait+0x20>)
100083c6:	4798      	blx	r3
100083c8:	0003      	movs	r3, r0
100083ca:	e000      	b.n	100083ce <i2c_master_write_packet_wait+0x1a>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
100083cc:	2317      	movs	r3, #23
#endif

	module->no_stop = false;

	return _i2c_master_write_packet(module, packet);
}
100083ce:	0018      	movs	r0, r3
100083d0:	bd10      	pop	{r4, pc}
100083d2:	46c0      	nop			; (mov r8, r8)
100083d4:	100082a5 	.word	0x100082a5

100083d8 <i2c_master_write_packet_wait_no_stop>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
100083d8:	b510      	push	{r4, lr}
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
100083da:	2800      	cmp	r0, #0
100083dc:	d008      	beq.n	100083f0 <i2c_master_write_packet_wait_no_stop+0x18>
		return STATUS_ERR_INVALID_ARG;
100083de:	2317      	movs	r3, #23
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
100083e0:	2900      	cmp	r1, #0
100083e2:	d006      	beq.n	100083f2 <i2c_master_write_packet_wait_no_stop+0x1a>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = true;
100083e4:	3b16      	subs	r3, #22
100083e6:	7143      	strb	r3, [r0, #5]

	return _i2c_master_write_packet(module, packet);
100083e8:	4b03      	ldr	r3, [pc, #12]	; (100083f8 <i2c_master_write_packet_wait_no_stop+0x20>)
100083ea:	4798      	blx	r3
100083ec:	0003      	movs	r3, r0
100083ee:	e000      	b.n	100083f2 <i2c_master_write_packet_wait_no_stop+0x1a>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
100083f0:	2317      	movs	r3, #23
#endif

	module->no_stop = true;

	return _i2c_master_write_packet(module, packet);
}
100083f2:	0018      	movs	r0, r3
100083f4:	bd10      	pop	{r4, pc}
100083f6:	46c0      	nop			; (mov r8, r8)
100083f8:	100082a5 	.word	0x100082a5

100083fc <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
100083fc:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
100083fe:	4a06      	ldr	r2, [pc, #24]	; (10008418 <_sbrk+0x1c>)
10008400:	6812      	ldr	r2, [r2, #0]
10008402:	2a00      	cmp	r2, #0
10008404:	d102      	bne.n	1000840c <_sbrk+0x10>
		heap = (unsigned char *)&_end;
10008406:	4905      	ldr	r1, [pc, #20]	; (1000841c <_sbrk+0x20>)
10008408:	4a03      	ldr	r2, [pc, #12]	; (10008418 <_sbrk+0x1c>)
1000840a:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
1000840c:	4a02      	ldr	r2, [pc, #8]	; (10008418 <_sbrk+0x1c>)
1000840e:	6810      	ldr	r0, [r2, #0]

	heap += incr;
10008410:	18c3      	adds	r3, r0, r3
10008412:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
10008414:	4770      	bx	lr
10008416:	46c0      	nop			; (mov r8, r8)
10008418:	10018968 	.word	0x10018968
1000841c:	1001c048 	.word	0x1001c048

10008420 <_close>:
}

extern int _close(int file)
{
	return -1;
}
10008420:	2001      	movs	r0, #1
10008422:	4240      	negs	r0, r0
10008424:	4770      	bx	lr
10008426:	46c0      	nop			; (mov r8, r8)

10008428 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
10008428:	2380      	movs	r3, #128	; 0x80
1000842a:	019b      	lsls	r3, r3, #6
1000842c:	604b      	str	r3, [r1, #4]

	return 0;
}
1000842e:	2000      	movs	r0, #0
10008430:	4770      	bx	lr
10008432:	46c0      	nop			; (mov r8, r8)

10008434 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
10008434:	2001      	movs	r0, #1
10008436:	4770      	bx	lr

10008438 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
10008438:	2000      	movs	r0, #0
1000843a:	4770      	bx	lr

1000843c <madgwick_quaternion_update>:
// which fuses acceleration, rotation rate, and magnetic moments to produce a quaternion-based estimate of absolute
// device orientation -- which can be converted to yaw, pitch, and roll. Useful for stabilizing quadcopters, etc.
// The performance of the orientation filter is at least as good as conventional Kalman-based filtering algorithms
// but is much less computationally intensive---it can be performed on a 3.3 V Pro Mini operating at 8 MHz!
void madgwick_quaternion_update(float ax, float ay, float az, float gx, float gy, float gz, float mx, float my, float mz, float deltat)
{
1000843c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000843e:	465f      	mov	r7, fp
10008440:	4656      	mov	r6, sl
10008442:	464d      	mov	r5, r9
10008444:	4644      	mov	r4, r8
10008446:	b4f0      	push	{r4, r5, r6, r7}
10008448:	b09f      	sub	sp, #124	; 0x7c
1000844a:	1c05      	adds	r5, r0, #0
1000844c:	1c0e      	adds	r6, r1, #0
1000844e:	9202      	str	r2, [sp, #8]
10008450:	930c      	str	r3, [sp, #48]	; 0x30
	DBG_LOG("Deltatf(i) = %lu", (uint32_t)(deltat * 1000000));
10008452:	48fd      	ldr	r0, [pc, #1012]	; (10008848 <madgwick_quaternion_update+0x40c>)
10008454:	4bfd      	ldr	r3, [pc, #1012]	; (1000884c <madgwick_quaternion_update+0x410>)
10008456:	4798      	blx	r3
10008458:	4cfd      	ldr	r4, [pc, #1012]	; (10008850 <madgwick_quaternion_update+0x414>)
1000845a:	49fe      	ldr	r1, [pc, #1016]	; (10008854 <madgwick_quaternion_update+0x418>)
1000845c:	982d      	ldr	r0, [sp, #180]	; 0xb4
1000845e:	47a0      	blx	r4
10008460:	4bfd      	ldr	r3, [pc, #1012]	; (10008858 <madgwick_quaternion_update+0x41c>)
10008462:	4798      	blx	r3
10008464:	0001      	movs	r1, r0
10008466:	48fd      	ldr	r0, [pc, #1012]	; (1000885c <madgwick_quaternion_update+0x420>)
10008468:	4bfd      	ldr	r3, [pc, #1012]	; (10008860 <madgwick_quaternion_update+0x424>)
1000846a:	4798      	blx	r3
	float _2q1my;
	float _2q1mz;
	float _2q2mx;
	float _4bx;
	float _4bz;
	float _2q1 = 2.0 * q1;
1000846c:	4bfd      	ldr	r3, [pc, #1012]	; (10008864 <madgwick_quaternion_update+0x428>)
1000846e:	6819      	ldr	r1, [r3, #0]
10008470:	9105      	str	r1, [sp, #20]
	float _2q2 = 2.0 * q2;
10008472:	4bfd      	ldr	r3, [pc, #1012]	; (10008868 <madgwick_quaternion_update+0x42c>)
10008474:	6819      	ldr	r1, [r3, #0]
10008476:	9104      	str	r1, [sp, #16]
	float _2q3 = 2.0 * q3;
10008478:	4bfc      	ldr	r3, [pc, #1008]	; (1000886c <madgwick_quaternion_update+0x430>)
1000847a:	6819      	ldr	r1, [r3, #0]
1000847c:	9100      	str	r1, [sp, #0]
	float _2q4 = 2.0 * q4;
1000847e:	4bfc      	ldr	r3, [pc, #1008]	; (10008870 <madgwick_quaternion_update+0x434>)
10008480:	6819      	ldr	r1, [r3, #0]
10008482:	9103      	str	r1, [sp, #12]
	float q3q3 = q3 * q3;
	float q3q4 = q3 * q4;
	float q4q4 = q4 * q4;

	// Normalize accelerometer measurement
	norm = sqrtf(ax * ax + ay * ay + az * az);
10008484:	1c29      	adds	r1, r5, #0
10008486:	9506      	str	r5, [sp, #24]
10008488:	1c28      	adds	r0, r5, #0
1000848a:	47a0      	blx	r4
1000848c:	1c05      	adds	r5, r0, #0
1000848e:	1c31      	adds	r1, r6, #0
10008490:	9607      	str	r6, [sp, #28]
10008492:	1c30      	adds	r0, r6, #0
10008494:	47a0      	blx	r4
10008496:	1c06      	adds	r6, r0, #0
10008498:	4ff6      	ldr	r7, [pc, #984]	; (10008874 <madgwick_quaternion_update+0x438>)
1000849a:	1c01      	adds	r1, r0, #0
1000849c:	1c28      	adds	r0, r5, #0
1000849e:	47b8      	blx	r7
100084a0:	9008      	str	r0, [sp, #32]
100084a2:	9b02      	ldr	r3, [sp, #8]
100084a4:	1c19      	adds	r1, r3, #0
100084a6:	1c18      	adds	r0, r3, #0
100084a8:	47a0      	blx	r4
100084aa:	9009      	str	r0, [sp, #36]	; 0x24
100084ac:	1c31      	adds	r1, r6, #0
100084ae:	1c28      	adds	r0, r5, #0
100084b0:	47b8      	blx	r7
100084b2:	1c05      	adds	r5, r0, #0
100084b4:	9909      	ldr	r1, [sp, #36]	; 0x24
100084b6:	1c28      	adds	r0, r5, #0
100084b8:	47b8      	blx	r7
100084ba:	4bef      	ldr	r3, [pc, #956]	; (10008878 <madgwick_quaternion_update+0x43c>)
100084bc:	4798      	blx	r3
100084be:	1c04      	adds	r4, r0, #0
	if (norm == 0.0) return; // handle NaN
100084c0:	2100      	movs	r1, #0
100084c2:	4bee      	ldr	r3, [pc, #952]	; (1000887c <madgwick_quaternion_update+0x440>)
100084c4:	4798      	blx	r3
100084c6:	2800      	cmp	r0, #0
100084c8:	d001      	beq.n	100084ce <madgwick_quaternion_update+0x92>
100084ca:	f000 fbff 	bl	10008ccc <madgwick_quaternion_update+0x890>
	ax *= norm;
	ay *= norm;
	az *= norm;

	// Normalize magnetometer measurement
	norm = sqrtf(mx * mx + my * my + mz * mz);
100084ce:	4ee0      	ldr	r6, [pc, #896]	; (10008850 <madgwick_quaternion_update+0x414>)
100084d0:	992a      	ldr	r1, [sp, #168]	; 0xa8
100084d2:	1c08      	adds	r0, r1, #0
100084d4:	47b0      	blx	r6
100084d6:	1c05      	adds	r5, r0, #0
100084d8:	992b      	ldr	r1, [sp, #172]	; 0xac
100084da:	1c08      	adds	r0, r1, #0
100084dc:	47b0      	blx	r6
100084de:	4fe5      	ldr	r7, [pc, #916]	; (10008874 <madgwick_quaternion_update+0x438>)
100084e0:	9008      	str	r0, [sp, #32]
100084e2:	1c01      	adds	r1, r0, #0
100084e4:	1c28      	adds	r0, r5, #0
100084e6:	47b8      	blx	r7
100084e8:	9009      	str	r0, [sp, #36]	; 0x24
100084ea:	992c      	ldr	r1, [sp, #176]	; 0xb0
100084ec:	1c08      	adds	r0, r1, #0
100084ee:	47b0      	blx	r6
100084f0:	900a      	str	r0, [sp, #40]	; 0x28
100084f2:	9908      	ldr	r1, [sp, #32]
100084f4:	1c28      	adds	r0, r5, #0
100084f6:	47b8      	blx	r7
100084f8:	1c05      	adds	r5, r0, #0
100084fa:	990a      	ldr	r1, [sp, #40]	; 0x28
100084fc:	1c28      	adds	r0, r5, #0
100084fe:	47b8      	blx	r7
10008500:	4bdd      	ldr	r3, [pc, #884]	; (10008878 <madgwick_quaternion_update+0x43c>)
10008502:	4798      	blx	r3
10008504:	9008      	str	r0, [sp, #32]
	if (norm == 0.0f) return; // handle NaN
10008506:	2100      	movs	r1, #0
10008508:	4bdc      	ldr	r3, [pc, #880]	; (1000887c <madgwick_quaternion_update+0x440>)
1000850a:	4798      	blx	r3
1000850c:	2800      	cmp	r0, #0
1000850e:	d000      	beq.n	10008512 <madgwick_quaternion_update+0xd6>
10008510:	e3dc      	b.n	10008ccc <madgwick_quaternion_update+0x890>
	float _2q1my;
	float _2q1mz;
	float _2q2mx;
	float _4bx;
	float _4bz;
	float _2q1 = 2.0 * q1;
10008512:	4ed8      	ldr	r6, [pc, #864]	; (10008874 <madgwick_quaternion_update+0x438>)
10008514:	9b05      	ldr	r3, [sp, #20]
10008516:	1c19      	adds	r1, r3, #0
10008518:	1c18      	adds	r0, r3, #0
1000851a:	47b0      	blx	r6
1000851c:	900e      	str	r0, [sp, #56]	; 0x38
	float _2q2 = 2.0 * q2;
1000851e:	9a04      	ldr	r2, [sp, #16]
10008520:	1c11      	adds	r1, r2, #0
10008522:	1c10      	adds	r0, r2, #0
10008524:	47b0      	blx	r6
10008526:	9010      	str	r0, [sp, #64]	; 0x40
	float _2q3 = 2.0 * q3;
10008528:	9b00      	ldr	r3, [sp, #0]
1000852a:	1c19      	adds	r1, r3, #0
1000852c:	1c18      	adds	r0, r3, #0
1000852e:	47b0      	blx	r6
10008530:	9011      	str	r0, [sp, #68]	; 0x44
	float _2q4 = 2.0 * q4;
10008532:	9d03      	ldr	r5, [sp, #12]
10008534:	1c29      	adds	r1, r5, #0
10008536:	1c28      	adds	r0, r5, #0
10008538:	47b0      	blx	r6
1000853a:	9019      	str	r0, [sp, #100]	; 0x64
	float _2q1q3 = 2.0f * q1 * q3;
	float _2q3q4 = 2.0f * q3 * q4;
	float q1q1 = q1 * q1;
1000853c:	4fc4      	ldr	r7, [pc, #784]	; (10008850 <madgwick_quaternion_update+0x414>)
1000853e:	9b05      	ldr	r3, [sp, #20]
10008540:	1c19      	adds	r1, r3, #0
10008542:	1c18      	adds	r0, r3, #0
10008544:	47b8      	blx	r7
10008546:	9015      	str	r0, [sp, #84]	; 0x54
	float q1q2 = q1 * q2;
10008548:	9904      	ldr	r1, [sp, #16]
1000854a:	9805      	ldr	r0, [sp, #20]
1000854c:	47b8      	blx	r7
1000854e:	9017      	str	r0, [sp, #92]	; 0x5c
	float q1q3 = q1 * q3;
10008550:	9900      	ldr	r1, [sp, #0]
10008552:	9805      	ldr	r0, [sp, #20]
10008554:	47b8      	blx	r7
10008556:	901a      	str	r0, [sp, #104]	; 0x68
	float q1q4 = q1 * q4;
	float q2q2 = q2 * q2;
10008558:	9a04      	ldr	r2, [sp, #16]
1000855a:	1c11      	adds	r1, r2, #0
1000855c:	1c10      	adds	r0, r2, #0
1000855e:	47b8      	blx	r7
10008560:	9012      	str	r0, [sp, #72]	; 0x48
	float q2q3 = q2 * q3;
	float q2q4 = q2 * q4;
10008562:	1c29      	adds	r1, r5, #0
10008564:	9804      	ldr	r0, [sp, #16]
10008566:	47b8      	blx	r7
10008568:	9013      	str	r0, [sp, #76]	; 0x4c
	float q3q3 = q3 * q3;
1000856a:	9b00      	ldr	r3, [sp, #0]
1000856c:	1c19      	adds	r1, r3, #0
1000856e:	1c18      	adds	r0, r3, #0
10008570:	47b8      	blx	r7
10008572:	900f      	str	r0, [sp, #60]	; 0x3c
	float q3q4 = q3 * q4;
	float q4q4 = q4 * q4;
10008574:	1c29      	adds	r1, r5, #0
10008576:	9503      	str	r5, [sp, #12]
10008578:	1c28      	adds	r0, r5, #0
1000857a:	47b8      	blx	r7
1000857c:	9014      	str	r0, [sp, #80]	; 0x50

	// Normalize accelerometer measurement
	norm = sqrtf(ax * ax + ay * ay + az * az);
	if (norm == 0.0) return; // handle NaN
	norm = 1.0f/norm;
1000857e:	4dc0      	ldr	r5, [pc, #768]	; (10008880 <madgwick_quaternion_update+0x444>)
10008580:	1c21      	adds	r1, r4, #0
10008582:	20fe      	movs	r0, #254	; 0xfe
10008584:	0580      	lsls	r0, r0, #22
10008586:	47a8      	blx	r5
10008588:	9018      	str	r0, [sp, #96]	; 0x60
	az *= norm;

	// Normalize magnetometer measurement
	norm = sqrtf(mx * mx + my * my + mz * mz);
	if (norm == 0.0f) return; // handle NaN
	norm = 1.0f/norm;
1000858a:	9908      	ldr	r1, [sp, #32]
1000858c:	20fe      	movs	r0, #254	; 0xfe
1000858e:	0580      	lsls	r0, r0, #22
10008590:	47a8      	blx	r5
10008592:	1c04      	adds	r4, r0, #0
	mx *= norm;
10008594:	1c01      	adds	r1, r0, #0
10008596:	982a      	ldr	r0, [sp, #168]	; 0xa8
10008598:	47b8      	blx	r7
1000859a:	9009      	str	r0, [sp, #36]	; 0x24
	my *= norm;
1000859c:	1c21      	adds	r1, r4, #0
1000859e:	982b      	ldr	r0, [sp, #172]	; 0xac
100085a0:	47b8      	blx	r7
100085a2:	1c05      	adds	r5, r0, #0
	mz *= norm;
100085a4:	1c21      	adds	r1, r4, #0
100085a6:	982c      	ldr	r0, [sp, #176]	; 0xb0
100085a8:	47b8      	blx	r7
100085aa:	1c04      	adds	r4, r0, #0

	// Reference direction of Earth's magnetic field
	_2q1mx = 2.0f * q1 * mx;
100085ac:	9909      	ldr	r1, [sp, #36]	; 0x24
100085ae:	980e      	ldr	r0, [sp, #56]	; 0x38
100085b0:	47b8      	blx	r7
100085b2:	9016      	str	r0, [sp, #88]	; 0x58
	_2q1my = 2.0f * q1 * my;
100085b4:	950a      	str	r5, [sp, #40]	; 0x28
100085b6:	1c29      	adds	r1, r5, #0
100085b8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
100085ba:	1c28      	adds	r0, r5, #0
100085bc:	47b8      	blx	r7
100085be:	901b      	str	r0, [sp, #108]	; 0x6c
	_2q1mz = 2.0f * q1 * mz;
100085c0:	940d      	str	r4, [sp, #52]	; 0x34
100085c2:	1c21      	adds	r1, r4, #0
100085c4:	950e      	str	r5, [sp, #56]	; 0x38
100085c6:	1c28      	adds	r0, r5, #0
100085c8:	47b8      	blx	r7
100085ca:	901c      	str	r0, [sp, #112]	; 0x70
	_2q2mx = 2.0f * q2 * mx;
100085cc:	9c09      	ldr	r4, [sp, #36]	; 0x24
100085ce:	1c21      	adds	r1, r4, #0
100085d0:	9810      	ldr	r0, [sp, #64]	; 0x40
100085d2:	47b8      	blx	r7
100085d4:	901d      	str	r0, [sp, #116]	; 0x74
	hx = mx * q1q1 - _2q1my * q4 + _2q1mz * q3 + mx * q2q2 + _2q2 * my * q3 + _2q2 * mz * q4 - mx * q3q3 - mx * q4q4;
100085d6:	9409      	str	r4, [sp, #36]	; 0x24
100085d8:	1c21      	adds	r1, r4, #0
100085da:	9815      	ldr	r0, [sp, #84]	; 0x54
100085dc:	47b8      	blx	r7
100085de:	1c04      	adds	r4, r0, #0
100085e0:	991b      	ldr	r1, [sp, #108]	; 0x6c
100085e2:	9803      	ldr	r0, [sp, #12]
100085e4:	47b8      	blx	r7
100085e6:	1c01      	adds	r1, r0, #0
100085e8:	4da6      	ldr	r5, [pc, #664]	; (10008884 <madgwick_quaternion_update+0x448>)
100085ea:	1c20      	adds	r0, r4, #0
100085ec:	47a8      	blx	r5
100085ee:	1c04      	adds	r4, r0, #0
100085f0:	991c      	ldr	r1, [sp, #112]	; 0x70
100085f2:	9800      	ldr	r0, [sp, #0]
100085f4:	47b8      	blx	r7
100085f6:	1c01      	adds	r1, r0, #0
100085f8:	1c20      	adds	r0, r4, #0
100085fa:	47b0      	blx	r6
100085fc:	1c04      	adds	r4, r0, #0
100085fe:	9909      	ldr	r1, [sp, #36]	; 0x24
10008600:	9812      	ldr	r0, [sp, #72]	; 0x48
10008602:	47b8      	blx	r7
10008604:	1c01      	adds	r1, r0, #0
10008606:	1c20      	adds	r0, r4, #0
10008608:	47b0      	blx	r6
1000860a:	1c04      	adds	r4, r0, #0
1000860c:	990a      	ldr	r1, [sp, #40]	; 0x28
1000860e:	9810      	ldr	r0, [sp, #64]	; 0x40
10008610:	47b8      	blx	r7
10008612:	9900      	ldr	r1, [sp, #0]
10008614:	47b8      	blx	r7
10008616:	1c01      	adds	r1, r0, #0
10008618:	1c20      	adds	r0, r4, #0
1000861a:	47b0      	blx	r6
1000861c:	1c04      	adds	r4, r0, #0
1000861e:	990d      	ldr	r1, [sp, #52]	; 0x34
10008620:	9810      	ldr	r0, [sp, #64]	; 0x40
10008622:	47b8      	blx	r7
10008624:	9903      	ldr	r1, [sp, #12]
10008626:	47b8      	blx	r7
10008628:	1c01      	adds	r1, r0, #0
1000862a:	1c20      	adds	r0, r4, #0
1000862c:	47b0      	blx	r6
1000862e:	1c04      	adds	r4, r0, #0
10008630:	9909      	ldr	r1, [sp, #36]	; 0x24
10008632:	980f      	ldr	r0, [sp, #60]	; 0x3c
10008634:	47b8      	blx	r7
10008636:	1c01      	adds	r1, r0, #0
10008638:	1c20      	adds	r0, r4, #0
1000863a:	47a8      	blx	r5
1000863c:	1c04      	adds	r4, r0, #0
1000863e:	9909      	ldr	r1, [sp, #36]	; 0x24
10008640:	9814      	ldr	r0, [sp, #80]	; 0x50
10008642:	47b8      	blx	r7
10008644:	1c01      	adds	r1, r0, #0
10008646:	1c20      	adds	r0, r4, #0
10008648:	47a8      	blx	r5
1000864a:	9008      	str	r0, [sp, #32]
	hy = _2q1mx * q4 + my * q1q1 - _2q1mz * q2 + _2q2mx * q3 - my * q2q2 + my * q3q3 + _2q3 * mz * q4 - my * q4q4;
1000864c:	9916      	ldr	r1, [sp, #88]	; 0x58
1000864e:	9803      	ldr	r0, [sp, #12]
10008650:	47b8      	blx	r7
10008652:	1c04      	adds	r4, r0, #0
10008654:	990a      	ldr	r1, [sp, #40]	; 0x28
10008656:	9815      	ldr	r0, [sp, #84]	; 0x54
10008658:	47b8      	blx	r7
1000865a:	1c01      	adds	r1, r0, #0
1000865c:	1c20      	adds	r0, r4, #0
1000865e:	47b0      	blx	r6
10008660:	1c04      	adds	r4, r0, #0
10008662:	991c      	ldr	r1, [sp, #112]	; 0x70
10008664:	9804      	ldr	r0, [sp, #16]
10008666:	47b8      	blx	r7
10008668:	1c01      	adds	r1, r0, #0
1000866a:	1c20      	adds	r0, r4, #0
1000866c:	47a8      	blx	r5
1000866e:	1c04      	adds	r4, r0, #0
10008670:	991d      	ldr	r1, [sp, #116]	; 0x74
10008672:	9800      	ldr	r0, [sp, #0]
10008674:	47b8      	blx	r7
10008676:	1c01      	adds	r1, r0, #0
10008678:	1c20      	adds	r0, r4, #0
1000867a:	47b0      	blx	r6
1000867c:	1c04      	adds	r4, r0, #0
1000867e:	990a      	ldr	r1, [sp, #40]	; 0x28
10008680:	9812      	ldr	r0, [sp, #72]	; 0x48
10008682:	47b8      	blx	r7
10008684:	1c01      	adds	r1, r0, #0
10008686:	1c20      	adds	r0, r4, #0
10008688:	47a8      	blx	r5
1000868a:	1c04      	adds	r4, r0, #0
1000868c:	990a      	ldr	r1, [sp, #40]	; 0x28
1000868e:	980f      	ldr	r0, [sp, #60]	; 0x3c
10008690:	47b8      	blx	r7
10008692:	1c01      	adds	r1, r0, #0
10008694:	1c20      	adds	r0, r4, #0
10008696:	47b0      	blx	r6
10008698:	1c04      	adds	r4, r0, #0
1000869a:	990d      	ldr	r1, [sp, #52]	; 0x34
1000869c:	9811      	ldr	r0, [sp, #68]	; 0x44
1000869e:	47b8      	blx	r7
100086a0:	9903      	ldr	r1, [sp, #12]
100086a2:	47b8      	blx	r7
100086a4:	1c01      	adds	r1, r0, #0
100086a6:	1c20      	adds	r0, r4, #0
100086a8:	47b0      	blx	r6
100086aa:	1c04      	adds	r4, r0, #0
100086ac:	990a      	ldr	r1, [sp, #40]	; 0x28
100086ae:	9814      	ldr	r0, [sp, #80]	; 0x50
100086b0:	47b8      	blx	r7
100086b2:	1c01      	adds	r1, r0, #0
100086b4:	1c20      	adds	r0, r4, #0
100086b6:	47a8      	blx	r5
100086b8:	1c04      	adds	r4, r0, #0
	_2bx = sqrtf(hx * hx + hy * hy);
100086ba:	9a08      	ldr	r2, [sp, #32]
100086bc:	1c11      	adds	r1, r2, #0
100086be:	1c10      	adds	r0, r2, #0
100086c0:	47b8      	blx	r7
100086c2:	901c      	str	r0, [sp, #112]	; 0x70
100086c4:	9a08      	ldr	r2, [sp, #32]
100086c6:	1c11      	adds	r1, r2, #0
100086c8:	1c10      	adds	r0, r2, #0
100086ca:	47b8      	blx	r7
100086cc:	9008      	str	r0, [sp, #32]
100086ce:	1c21      	adds	r1, r4, #0
100086d0:	1c20      	adds	r0, r4, #0
100086d2:	47b8      	blx	r7
100086d4:	1c01      	adds	r1, r0, #0
100086d6:	9808      	ldr	r0, [sp, #32]
100086d8:	47b0      	blx	r6
100086da:	4b67      	ldr	r3, [pc, #412]	; (10008878 <madgwick_quaternion_update+0x43c>)
100086dc:	4798      	blx	r3
100086de:	9008      	str	r0, [sp, #32]
	_2bz = -_2q1mx * q3 + _2q1my * q2 + mz * q1q1 + _2q2mx * q4 - mz * q2q2 + _2q3 * my * q4 - mz * q3q3 + mz * q4q4;
100086e0:	9c16      	ldr	r4, [sp, #88]	; 0x58
100086e2:	46a0      	mov	r8, r4
100086e4:	2480      	movs	r4, #128	; 0x80
100086e6:	0624      	lsls	r4, r4, #24
100086e8:	46a4      	mov	ip, r4
100086ea:	44e0      	add	r8, ip
100086ec:	4640      	mov	r0, r8
100086ee:	9900      	ldr	r1, [sp, #0]
100086f0:	47b8      	blx	r7
100086f2:	1c04      	adds	r4, r0, #0
100086f4:	991b      	ldr	r1, [sp, #108]	; 0x6c
100086f6:	9804      	ldr	r0, [sp, #16]
100086f8:	47b8      	blx	r7
100086fa:	1c01      	adds	r1, r0, #0
100086fc:	1c20      	adds	r0, r4, #0
100086fe:	47b0      	blx	r6
10008700:	1c04      	adds	r4, r0, #0
10008702:	990d      	ldr	r1, [sp, #52]	; 0x34
10008704:	9815      	ldr	r0, [sp, #84]	; 0x54
10008706:	47b8      	blx	r7
10008708:	1c01      	adds	r1, r0, #0
1000870a:	1c20      	adds	r0, r4, #0
1000870c:	47b0      	blx	r6
1000870e:	1c04      	adds	r4, r0, #0
10008710:	991d      	ldr	r1, [sp, #116]	; 0x74
10008712:	9803      	ldr	r0, [sp, #12]
10008714:	47b8      	blx	r7
10008716:	1c01      	adds	r1, r0, #0
10008718:	1c20      	adds	r0, r4, #0
1000871a:	47b0      	blx	r6
1000871c:	1c04      	adds	r4, r0, #0
1000871e:	990d      	ldr	r1, [sp, #52]	; 0x34
10008720:	9812      	ldr	r0, [sp, #72]	; 0x48
10008722:	47b8      	blx	r7
10008724:	1c01      	adds	r1, r0, #0
10008726:	1c20      	adds	r0, r4, #0
10008728:	47a8      	blx	r5
1000872a:	1c04      	adds	r4, r0, #0
1000872c:	990a      	ldr	r1, [sp, #40]	; 0x28
1000872e:	9811      	ldr	r0, [sp, #68]	; 0x44
10008730:	47b8      	blx	r7
10008732:	9903      	ldr	r1, [sp, #12]
10008734:	47b8      	blx	r7
10008736:	1c01      	adds	r1, r0, #0
10008738:	1c20      	adds	r0, r4, #0
1000873a:	47b0      	blx	r6
1000873c:	1c04      	adds	r4, r0, #0
1000873e:	990d      	ldr	r1, [sp, #52]	; 0x34
10008740:	980f      	ldr	r0, [sp, #60]	; 0x3c
10008742:	47b8      	blx	r7
10008744:	1c01      	adds	r1, r0, #0
10008746:	1c20      	adds	r0, r4, #0
10008748:	47a8      	blx	r5
1000874a:	1c04      	adds	r4, r0, #0
1000874c:	990d      	ldr	r1, [sp, #52]	; 0x34
1000874e:	9814      	ldr	r0, [sp, #80]	; 0x50
10008750:	47b8      	blx	r7
10008752:	1c01      	adds	r1, r0, #0
10008754:	1c20      	adds	r0, r4, #0
10008756:	47b0      	blx	r6
10008758:	1c04      	adds	r4, r0, #0
	_4bx = 2.0f * _2bx;
	_4bz = 2.0f * _2bz;
1000875a:	1c01      	adds	r1, r0, #0
1000875c:	47b0      	blx	r6
1000875e:	901b      	str	r0, [sp, #108]	; 0x6c

	// Gradient decent algorithm corrective step
	s1 = -_2q3 * (2.0f * q2q4 - _2q1q3 - ax) + _2q2 * (2.0f * q1q2 + _2q3q4 - ay) - _2bz * q3 * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (-_2bx * q4 + _2bz * q2) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + _2bx * q3 * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
10008760:	9b13      	ldr	r3, [sp, #76]	; 0x4c
10008762:	1c19      	adds	r1, r3, #0
10008764:	1c18      	adds	r0, r3, #0
10008766:	47b0      	blx	r6
10008768:	9015      	str	r0, [sp, #84]	; 0x54
1000876a:	9900      	ldr	r1, [sp, #0]
1000876c:	980e      	ldr	r0, [sp, #56]	; 0x38
1000876e:	47b8      	blx	r7
10008770:	1c01      	adds	r1, r0, #0
10008772:	9815      	ldr	r0, [sp, #84]	; 0x54
10008774:	47a8      	blx	r5
10008776:	9015      	str	r0, [sp, #84]	; 0x54
10008778:	9918      	ldr	r1, [sp, #96]	; 0x60
1000877a:	9806      	ldr	r0, [sp, #24]
1000877c:	47b8      	blx	r7
1000877e:	1c01      	adds	r1, r0, #0
10008780:	9815      	ldr	r0, [sp, #84]	; 0x54
10008782:	47a8      	blx	r5
10008784:	9015      	str	r0, [sp, #84]	; 0x54
10008786:	9903      	ldr	r1, [sp, #12]
10008788:	9811      	ldr	r0, [sp, #68]	; 0x44
1000878a:	47b8      	blx	r7
1000878c:	9006      	str	r0, [sp, #24]
1000878e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
10008790:	1c11      	adds	r1, r2, #0
10008792:	1c10      	adds	r0, r2, #0
10008794:	47b0      	blx	r6
10008796:	1c01      	adds	r1, r0, #0
10008798:	9806      	ldr	r0, [sp, #24]
1000879a:	47b0      	blx	r6
1000879c:	9006      	str	r0, [sp, #24]
1000879e:	9918      	ldr	r1, [sp, #96]	; 0x60
100087a0:	9807      	ldr	r0, [sp, #28]
100087a2:	47b8      	blx	r7
100087a4:	1c01      	adds	r1, r0, #0
100087a6:	9806      	ldr	r0, [sp, #24]
100087a8:	47a8      	blx	r5
100087aa:	9016      	str	r0, [sp, #88]	; 0x58
100087ac:	1c21      	adds	r1, r4, #0
100087ae:	9800      	ldr	r0, [sp, #0]
100087b0:	47b8      	blx	r7
100087b2:	901c      	str	r0, [sp, #112]	; 0x70
100087b4:	990f      	ldr	r1, [sp, #60]	; 0x3c
100087b6:	20fc      	movs	r0, #252	; 0xfc
100087b8:	0580      	lsls	r0, r0, #22
100087ba:	47a8      	blx	r5
100087bc:	9914      	ldr	r1, [sp, #80]	; 0x50
100087be:	47a8      	blx	r5
100087c0:	9908      	ldr	r1, [sp, #32]
100087c2:	47b8      	blx	r7
100087c4:	9006      	str	r0, [sp, #24]
100087c6:	991a      	ldr	r1, [sp, #104]	; 0x68
100087c8:	9813      	ldr	r0, [sp, #76]	; 0x4c
100087ca:	47a8      	blx	r5
100087cc:	1c21      	adds	r1, r4, #0
100087ce:	47b8      	blx	r7
100087d0:	1c01      	adds	r1, r0, #0
100087d2:	9806      	ldr	r0, [sp, #24]
100087d4:	47b0      	blx	r6
100087d6:	9909      	ldr	r1, [sp, #36]	; 0x24
100087d8:	47a8      	blx	r5
100087da:	9009      	str	r0, [sp, #36]	; 0x24
100087dc:	9b08      	ldr	r3, [sp, #32]
100087de:	2280      	movs	r2, #128	; 0x80
100087e0:	0612      	lsls	r2, r2, #24
100087e2:	4694      	mov	ip, r2
100087e4:	4463      	add	r3, ip
100087e6:	9314      	str	r3, [sp, #80]	; 0x50
100087e8:	1c21      	adds	r1, r4, #0
100087ea:	9804      	ldr	r0, [sp, #16]
100087ec:	47b8      	blx	r7
100087ee:	901d      	str	r0, [sp, #116]	; 0x74
100087f0:	9900      	ldr	r1, [sp, #0]
100087f2:	9804      	ldr	r0, [sp, #16]
100087f4:	47b8      	blx	r7
100087f6:	9006      	str	r0, [sp, #24]
100087f8:	9903      	ldr	r1, [sp, #12]
100087fa:	9805      	ldr	r0, [sp, #20]
100087fc:	47b8      	blx	r7
100087fe:	1c01      	adds	r1, r0, #0
10008800:	9806      	ldr	r0, [sp, #24]
10008802:	47a8      	blx	r5
10008804:	9908      	ldr	r1, [sp, #32]
10008806:	47b8      	blx	r7
10008808:	9006      	str	r0, [sp, #24]
1000880a:	9903      	ldr	r1, [sp, #12]
1000880c:	9800      	ldr	r0, [sp, #0]
1000880e:	47b8      	blx	r7
10008810:	9917      	ldr	r1, [sp, #92]	; 0x5c
10008812:	47b0      	blx	r6
10008814:	1c21      	adds	r1, r4, #0
10008816:	47b8      	blx	r7
10008818:	1c01      	adds	r1, r0, #0
1000881a:	9806      	ldr	r0, [sp, #24]
1000881c:	47b0      	blx	r6
1000881e:	990a      	ldr	r1, [sp, #40]	; 0x28
10008820:	47a8      	blx	r5
10008822:	900a      	str	r0, [sp, #40]	; 0x28
10008824:	9908      	ldr	r1, [sp, #32]
10008826:	9800      	ldr	r0, [sp, #0]
10008828:	47b8      	blx	r7
1000882a:	9007      	str	r0, [sp, #28]
1000882c:	9912      	ldr	r1, [sp, #72]	; 0x48
1000882e:	20fc      	movs	r0, #252	; 0xfc
10008830:	0580      	lsls	r0, r0, #22
10008832:	47a8      	blx	r5
10008834:	990f      	ldr	r1, [sp, #60]	; 0x3c
10008836:	47a8      	blx	r5
10008838:	1c21      	adds	r1, r4, #0
1000883a:	47b8      	blx	r7
1000883c:	9006      	str	r0, [sp, #24]
1000883e:	9913      	ldr	r1, [sp, #76]	; 0x4c
10008840:	981a      	ldr	r0, [sp, #104]	; 0x68
10008842:	47b0      	blx	r6
10008844:	e020      	b.n	10008888 <madgwick_quaternion_update+0x44c>
10008846:	46c0      	nop			; (mov r8, r8)
10008848:	100177b0 	.word	0x100177b0
1000884c:	10016871 	.word	0x10016871
10008850:	100140e1 	.word	0x100140e1
10008854:	49742400 	.word	0x49742400
10008858:	100139f5 	.word	0x100139f5
1000885c:	100177b4 	.word	0x100177b4
10008860:	10016751 	.word	0x10016751
10008864:	100188d4 	.word	0x100188d4
10008868:	1001896c 	.word	0x1001896c
1000886c:	10018970 	.word	0x10018970
10008870:	10018974 	.word	0x10018974
10008874:	10013a61 	.word	0x10013a61
10008878:	10012595 	.word	0x10012595
1000887c:	10013941 	.word	0x10013941
10008880:	10013d4d 	.word	0x10013d4d
10008884:	10014309 	.word	0x10014309
10008888:	9908      	ldr	r1, [sp, #32]
1000888a:	47b8      	blx	r7
1000888c:	1c01      	adds	r1, r0, #0
1000888e:	9806      	ldr	r0, [sp, #24]
10008890:	47b0      	blx	r6
10008892:	990d      	ldr	r1, [sp, #52]	; 0x34
10008894:	47a8      	blx	r5
10008896:	900d      	str	r0, [sp, #52]	; 0x34
10008898:	9911      	ldr	r1, [sp, #68]	; 0x44
1000889a:	2380      	movs	r3, #128	; 0x80
1000889c:	061b      	lsls	r3, r3, #24
1000889e:	469c      	mov	ip, r3
100088a0:	4461      	add	r1, ip
100088a2:	0008      	movs	r0, r1
100088a4:	9915      	ldr	r1, [sp, #84]	; 0x54
100088a6:	47b8      	blx	r7
100088a8:	9006      	str	r0, [sp, #24]
100088aa:	9916      	ldr	r1, [sp, #88]	; 0x58
100088ac:	9810      	ldr	r0, [sp, #64]	; 0x40
100088ae:	47b8      	blx	r7
100088b0:	1c01      	adds	r1, r0, #0
100088b2:	9806      	ldr	r0, [sp, #24]
100088b4:	47b0      	blx	r6
100088b6:	9006      	str	r0, [sp, #24]
100088b8:	9909      	ldr	r1, [sp, #36]	; 0x24
100088ba:	981c      	ldr	r0, [sp, #112]	; 0x70
100088bc:	47b8      	blx	r7
100088be:	1c01      	adds	r1, r0, #0
100088c0:	9806      	ldr	r0, [sp, #24]
100088c2:	47a8      	blx	r5
100088c4:	9006      	str	r0, [sp, #24]
100088c6:	9914      	ldr	r1, [sp, #80]	; 0x50
100088c8:	9803      	ldr	r0, [sp, #12]
100088ca:	47b8      	blx	r7
100088cc:	991d      	ldr	r1, [sp, #116]	; 0x74
100088ce:	47b0      	blx	r6
100088d0:	990a      	ldr	r1, [sp, #40]	; 0x28
100088d2:	47b8      	blx	r7
100088d4:	1c01      	adds	r1, r0, #0
100088d6:	9806      	ldr	r0, [sp, #24]
100088d8:	47b0      	blx	r6
100088da:	9006      	str	r0, [sp, #24]
100088dc:	990d      	ldr	r1, [sp, #52]	; 0x34
100088de:	9807      	ldr	r0, [sp, #28]
100088e0:	47b8      	blx	r7
100088e2:	1c01      	adds	r1, r0, #0
100088e4:	9806      	ldr	r0, [sp, #24]
100088e6:	47b0      	blx	r6
100088e8:	9006      	str	r0, [sp, #24]
	s2 = _2q4 * (2.0f * q2q4 - _2q1q3 - ax) + _2q1 * (2.0f * q1q2 + _2q3q4 - ay) - 4.0f * q2 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az) + _2bz * q4 * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (_2bx * q3 + _2bz * q1) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + (_2bx * q4 - _4bz * q2) * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
100088ea:	9a12      	ldr	r2, [sp, #72]	; 0x48
100088ec:	1c11      	adds	r1, r2, #0
100088ee:	1c10      	adds	r0, r2, #0
100088f0:	47b0      	blx	r6
100088f2:	1c01      	adds	r1, r0, #0
100088f4:	20fe      	movs	r0, #254	; 0xfe
100088f6:	0580      	lsls	r0, r0, #22
100088f8:	47a8      	blx	r5
100088fa:	9012      	str	r0, [sp, #72]	; 0x48
100088fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
100088fe:	1c19      	adds	r1, r3, #0
10008900:	1c18      	adds	r0, r3, #0
10008902:	47b0      	blx	r6
10008904:	1c01      	adds	r1, r0, #0
10008906:	9812      	ldr	r0, [sp, #72]	; 0x48
10008908:	47a8      	blx	r5
1000890a:	900f      	str	r0, [sp, #60]	; 0x3c
1000890c:	9918      	ldr	r1, [sp, #96]	; 0x60
1000890e:	9802      	ldr	r0, [sp, #8]
10008910:	47b8      	blx	r7
10008912:	1c01      	adds	r1, r0, #0
10008914:	980f      	ldr	r0, [sp, #60]	; 0x3c
10008916:	47a8      	blx	r5
10008918:	900f      	str	r0, [sp, #60]	; 0x3c
1000891a:	1c21      	adds	r1, r4, #0
1000891c:	9803      	ldr	r0, [sp, #12]
1000891e:	47b8      	blx	r7
10008920:	9012      	str	r0, [sp, #72]	; 0x48
10008922:	1c21      	adds	r1, r4, #0
10008924:	9805      	ldr	r0, [sp, #20]
10008926:	47b8      	blx	r7
10008928:	9013      	str	r0, [sp, #76]	; 0x4c
1000892a:	9915      	ldr	r1, [sp, #84]	; 0x54
1000892c:	9819      	ldr	r0, [sp, #100]	; 0x64
1000892e:	47b8      	blx	r7
10008930:	1c04      	adds	r4, r0, #0
10008932:	9916      	ldr	r1, [sp, #88]	; 0x58
10008934:	980e      	ldr	r0, [sp, #56]	; 0x38
10008936:	47b8      	blx	r7
10008938:	1c01      	adds	r1, r0, #0
1000893a:	1c20      	adds	r0, r4, #0
1000893c:	47b0      	blx	r6
1000893e:	1c04      	adds	r4, r0, #0
10008940:	2181      	movs	r1, #129	; 0x81
10008942:	05c9      	lsls	r1, r1, #23
10008944:	9804      	ldr	r0, [sp, #16]
10008946:	47b8      	blx	r7
10008948:	990f      	ldr	r1, [sp, #60]	; 0x3c
1000894a:	47b8      	blx	r7
1000894c:	1c01      	adds	r1, r0, #0
1000894e:	1c20      	adds	r0, r4, #0
10008950:	47a8      	blx	r5
10008952:	1c04      	adds	r4, r0, #0
10008954:	9912      	ldr	r1, [sp, #72]	; 0x48
10008956:	9809      	ldr	r0, [sp, #36]	; 0x24
10008958:	47b8      	blx	r7
1000895a:	1c01      	adds	r1, r0, #0
1000895c:	1c20      	adds	r0, r4, #0
1000895e:	47b0      	blx	r6
10008960:	1c04      	adds	r4, r0, #0
10008962:	9913      	ldr	r1, [sp, #76]	; 0x4c
10008964:	9807      	ldr	r0, [sp, #28]
10008966:	47b0      	blx	r6
10008968:	990a      	ldr	r1, [sp, #40]	; 0x28
1000896a:	47b8      	blx	r7
1000896c:	1c01      	adds	r1, r0, #0
1000896e:	1c20      	adds	r0, r4, #0
10008970:	47b0      	blx	r6
10008972:	1c04      	adds	r4, r0, #0
10008974:	9908      	ldr	r1, [sp, #32]
10008976:	9803      	ldr	r0, [sp, #12]
10008978:	47b8      	blx	r7
1000897a:	9002      	str	r0, [sp, #8]
1000897c:	991b      	ldr	r1, [sp, #108]	; 0x6c
1000897e:	9804      	ldr	r0, [sp, #16]
10008980:	47b8      	blx	r7
10008982:	1c01      	adds	r1, r0, #0
10008984:	9802      	ldr	r0, [sp, #8]
10008986:	47a8      	blx	r5
10008988:	990d      	ldr	r1, [sp, #52]	; 0x34
1000898a:	47b8      	blx	r7
1000898c:	1c01      	adds	r1, r0, #0
1000898e:	1c20      	adds	r0, r4, #0
10008990:	47b0      	blx	r6
10008992:	9002      	str	r0, [sp, #8]
	s3 = -_2q1 * (2.0f * q2q4 - _2q1q3 - ax) + _2q4 * (2.0f * q1q2 + _2q3q4 - ay) - 4.0f * q3 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az) + (-_4bx * q3 - _2bz * q1) * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (_2bx * q2 + _2bz * q4) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + (_2bx * q1 - _4bz * q3) * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
10008994:	9a08      	ldr	r2, [sp, #32]
10008996:	1c11      	adds	r1, r2, #0
10008998:	1c10      	adds	r0, r2, #0
1000899a:	47b0      	blx	r6
1000899c:	2380      	movs	r3, #128	; 0x80
1000899e:	061b      	lsls	r3, r3, #24
100089a0:	18c4      	adds	r4, r0, r3
100089a2:	9908      	ldr	r1, [sp, #32]
100089a4:	9804      	ldr	r0, [sp, #16]
100089a6:	47b8      	blx	r7
100089a8:	9017      	str	r0, [sp, #92]	; 0x5c
100089aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
100089ac:	2280      	movs	r2, #128	; 0x80
100089ae:	0612      	lsls	r2, r2, #24
100089b0:	4694      	mov	ip, r2
100089b2:	4463      	add	r3, ip
100089b4:	0018      	movs	r0, r3
100089b6:	9915      	ldr	r1, [sp, #84]	; 0x54
100089b8:	47b8      	blx	r7
100089ba:	9007      	str	r0, [sp, #28]
100089bc:	9916      	ldr	r1, [sp, #88]	; 0x58
100089be:	9819      	ldr	r0, [sp, #100]	; 0x64
100089c0:	47b8      	blx	r7
100089c2:	1c01      	adds	r1, r0, #0
100089c4:	9807      	ldr	r0, [sp, #28]
100089c6:	47b0      	blx	r6
100089c8:	9007      	str	r0, [sp, #28]
100089ca:	2181      	movs	r1, #129	; 0x81
100089cc:	05c9      	lsls	r1, r1, #23
100089ce:	9800      	ldr	r0, [sp, #0]
100089d0:	47b8      	blx	r7
100089d2:	990f      	ldr	r1, [sp, #60]	; 0x3c
100089d4:	47b8      	blx	r7
100089d6:	1c01      	adds	r1, r0, #0
100089d8:	9807      	ldr	r0, [sp, #28]
100089da:	47a8      	blx	r5
100089dc:	9007      	str	r0, [sp, #28]
100089de:	1c21      	adds	r1, r4, #0
100089e0:	9800      	ldr	r0, [sp, #0]
100089e2:	47b8      	blx	r7
100089e4:	9913      	ldr	r1, [sp, #76]	; 0x4c
100089e6:	47a8      	blx	r5
100089e8:	9909      	ldr	r1, [sp, #36]	; 0x24
100089ea:	47b8      	blx	r7
100089ec:	1c01      	adds	r1, r0, #0
100089ee:	9807      	ldr	r0, [sp, #28]
100089f0:	47b0      	blx	r6
100089f2:	9007      	str	r0, [sp, #28]
100089f4:	9917      	ldr	r1, [sp, #92]	; 0x5c
100089f6:	9812      	ldr	r0, [sp, #72]	; 0x48
100089f8:	47b0      	blx	r6
100089fa:	990a      	ldr	r1, [sp, #40]	; 0x28
100089fc:	47b8      	blx	r7
100089fe:	1c01      	adds	r1, r0, #0
10008a00:	9807      	ldr	r0, [sp, #28]
10008a02:	47b0      	blx	r6
10008a04:	9007      	str	r0, [sp, #28]
10008a06:	9908      	ldr	r1, [sp, #32]
10008a08:	9805      	ldr	r0, [sp, #20]
10008a0a:	47b8      	blx	r7
10008a0c:	9008      	str	r0, [sp, #32]
10008a0e:	991b      	ldr	r1, [sp, #108]	; 0x6c
10008a10:	9800      	ldr	r0, [sp, #0]
10008a12:	47b8      	blx	r7
10008a14:	1c01      	adds	r1, r0, #0
10008a16:	9808      	ldr	r0, [sp, #32]
10008a18:	47a8      	blx	r5
10008a1a:	990d      	ldr	r1, [sp, #52]	; 0x34
10008a1c:	47b8      	blx	r7
10008a1e:	1c01      	adds	r1, r0, #0
10008a20:	9807      	ldr	r0, [sp, #28]
10008a22:	47b0      	blx	r6
10008a24:	9007      	str	r0, [sp, #28]
	s4 = _2q2 * (2.0f * q2q4 - _2q1q3 - ax) + _2q3 * (2.0f * q1q2 + _2q3q4 - ay) + (-_4bx * q4 + _2bz * q2) * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (-_2bx * q1 + _2bz * q3) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + _2bx * q2 * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
10008a26:	9915      	ldr	r1, [sp, #84]	; 0x54
10008a28:	9810      	ldr	r0, [sp, #64]	; 0x40
10008a2a:	47b8      	blx	r7
10008a2c:	1c05      	adds	r5, r0, #0
10008a2e:	9916      	ldr	r1, [sp, #88]	; 0x58
10008a30:	9811      	ldr	r0, [sp, #68]	; 0x44
10008a32:	47b8      	blx	r7
10008a34:	1c01      	adds	r1, r0, #0
10008a36:	1c28      	adds	r0, r5, #0
10008a38:	47b0      	blx	r6
10008a3a:	1c05      	adds	r5, r0, #0
10008a3c:	1c21      	adds	r1, r4, #0
10008a3e:	9803      	ldr	r0, [sp, #12]
10008a40:	47b8      	blx	r7
10008a42:	991d      	ldr	r1, [sp, #116]	; 0x74
10008a44:	47b0      	blx	r6
10008a46:	9909      	ldr	r1, [sp, #36]	; 0x24
10008a48:	47b8      	blx	r7
10008a4a:	1c01      	adds	r1, r0, #0
10008a4c:	1c28      	adds	r0, r5, #0
10008a4e:	47b0      	blx	r6
10008a50:	1c04      	adds	r4, r0, #0
10008a52:	9914      	ldr	r1, [sp, #80]	; 0x50
10008a54:	9805      	ldr	r0, [sp, #20]
10008a56:	47b8      	blx	r7
10008a58:	991c      	ldr	r1, [sp, #112]	; 0x70
10008a5a:	47b0      	blx	r6
10008a5c:	990a      	ldr	r1, [sp, #40]	; 0x28
10008a5e:	47b8      	blx	r7
10008a60:	1c01      	adds	r1, r0, #0
10008a62:	1c20      	adds	r0, r4, #0
10008a64:	47b0      	blx	r6
10008a66:	1c04      	adds	r4, r0, #0
10008a68:	9917      	ldr	r1, [sp, #92]	; 0x5c
10008a6a:	980d      	ldr	r0, [sp, #52]	; 0x34
10008a6c:	47b8      	blx	r7
10008a6e:	1c01      	adds	r1, r0, #0
10008a70:	1c20      	adds	r0, r4, #0
10008a72:	47b0      	blx	r6
10008a74:	9008      	str	r0, [sp, #32]
	norm = sqrtf(s1 * s1 + s2 * s2 + s3 * s3 + s4 * s4);    // normalize step magnitude
10008a76:	9c06      	ldr	r4, [sp, #24]
10008a78:	1c21      	adds	r1, r4, #0
10008a7a:	1c20      	adds	r0, r4, #0
10008a7c:	47b8      	blx	r7
10008a7e:	1c04      	adds	r4, r0, #0
10008a80:	9d02      	ldr	r5, [sp, #8]
10008a82:	1c29      	adds	r1, r5, #0
10008a84:	1c28      	adds	r0, r5, #0
10008a86:	47b8      	blx	r7
10008a88:	1c05      	adds	r5, r0, #0
10008a8a:	1c01      	adds	r1, r0, #0
10008a8c:	1c20      	adds	r0, r4, #0
10008a8e:	47b0      	blx	r6
10008a90:	9009      	str	r0, [sp, #36]	; 0x24
10008a92:	9a07      	ldr	r2, [sp, #28]
10008a94:	1c11      	adds	r1, r2, #0
10008a96:	1c10      	adds	r0, r2, #0
10008a98:	47b8      	blx	r7
10008a9a:	1c01      	adds	r1, r0, #0
10008a9c:	9809      	ldr	r0, [sp, #36]	; 0x24
10008a9e:	47b0      	blx	r6
10008aa0:	9009      	str	r0, [sp, #36]	; 0x24
10008aa2:	1c29      	adds	r1, r5, #0
10008aa4:	1c20      	adds	r0, r4, #0
10008aa6:	47b0      	blx	r6
10008aa8:	1c05      	adds	r5, r0, #0
10008aaa:	4c8c      	ldr	r4, [pc, #560]	; (10008cdc <madgwick_quaternion_update+0x8a0>)
10008aac:	9a07      	ldr	r2, [sp, #28]
10008aae:	1c11      	adds	r1, r2, #0
10008ab0:	1c10      	adds	r0, r2, #0
10008ab2:	47a0      	blx	r4
10008ab4:	1c01      	adds	r1, r0, #0
10008ab6:	4f8a      	ldr	r7, [pc, #552]	; (10008ce0 <madgwick_quaternion_update+0x8a4>)
10008ab8:	1c28      	adds	r0, r5, #0
10008aba:	47b8      	blx	r7
10008abc:	1c05      	adds	r5, r0, #0
10008abe:	9b08      	ldr	r3, [sp, #32]
10008ac0:	1c19      	adds	r1, r3, #0
10008ac2:	1c18      	adds	r0, r3, #0
10008ac4:	47a0      	blx	r4
10008ac6:	1c01      	adds	r1, r0, #0
10008ac8:	1c28      	adds	r0, r5, #0
10008aca:	47b8      	blx	r7
10008acc:	4985      	ldr	r1, [pc, #532]	; (10008ce4 <madgwick_quaternion_update+0x8a8>)
10008ace:	4788      	blx	r1
10008ad0:	1c01      	adds	r1, r0, #0
	norm = 1.0f/norm;
10008ad2:	4d85      	ldr	r5, [pc, #532]	; (10008ce8 <madgwick_quaternion_update+0x8ac>)
10008ad4:	46a8      	mov	r8, r5
10008ad6:	20fe      	movs	r0, #254	; 0xfe
10008ad8:	0580      	lsls	r0, r0, #22
10008ada:	47a8      	blx	r5
10008adc:	9009      	str	r0, [sp, #36]	; 0x24
	qDot2 = 0.5f * (q1 * gx + q3 * gz - q4 * gy) - BETA * s2;
	qDot3 = 0.5f * (q1 * gy - q2 * gz + q4 * gx) - BETA * s3;
	qDot4 = 0.5f * (q1 * gz + q2 * gy - q3 * gx) - BETA * s4;

	// Integrate to yield quaternion
	q1 += qDot1 * deltat;
10008ade:	9904      	ldr	r1, [sp, #16]
10008ae0:	2580      	movs	r5, #128	; 0x80
10008ae2:	062d      	lsls	r5, r5, #24
10008ae4:	46ac      	mov	ip, r5
10008ae6:	4461      	add	r1, ip
10008ae8:	0008      	movs	r0, r1
10008aea:	990c      	ldr	r1, [sp, #48]	; 0x30
10008aec:	47a0      	blx	r4
10008aee:	1c05      	adds	r5, r0, #0
10008af0:	9928      	ldr	r1, [sp, #160]	; 0xa0
10008af2:	9800      	ldr	r0, [sp, #0]
10008af4:	47a0      	blx	r4
10008af6:	1c01      	adds	r1, r0, #0
10008af8:	4e7c      	ldr	r6, [pc, #496]	; (10008cec <madgwick_quaternion_update+0x8b0>)
10008afa:	1c28      	adds	r0, r5, #0
10008afc:	47b0      	blx	r6
10008afe:	1c05      	adds	r5, r0, #0
10008b00:	9929      	ldr	r1, [sp, #164]	; 0xa4
10008b02:	9803      	ldr	r0, [sp, #12]
10008b04:	47a0      	blx	r4
10008b06:	1c01      	adds	r1, r0, #0
10008b08:	1c28      	adds	r0, r5, #0
10008b0a:	47b0      	blx	r6
10008b0c:	21fc      	movs	r1, #252	; 0xfc
10008b0e:	0589      	lsls	r1, r1, #22
10008b10:	47a0      	blx	r4
10008b12:	4d77      	ldr	r5, [pc, #476]	; (10008cf0 <madgwick_quaternion_update+0x8b4>)
10008b14:	47a8      	blx	r5
10008b16:	900a      	str	r0, [sp, #40]	; 0x28
10008b18:	910b      	str	r1, [sp, #44]	; 0x2c
10008b1a:	9909      	ldr	r1, [sp, #36]	; 0x24
10008b1c:	9806      	ldr	r0, [sp, #24]
10008b1e:	47a0      	blx	r4
10008b20:	47a8      	blx	r5
10008b22:	4b74      	ldr	r3, [pc, #464]	; (10008cf4 <madgwick_quaternion_update+0x8b8>)
10008b24:	469a      	mov	sl, r3
10008b26:	4a74      	ldr	r2, [pc, #464]	; (10008cf8 <madgwick_quaternion_update+0x8bc>)
10008b28:	4b74      	ldr	r3, [pc, #464]	; (10008cfc <madgwick_quaternion_update+0x8c0>)
10008b2a:	47d0      	blx	sl
10008b2c:	0002      	movs	r2, r0
10008b2e:	000b      	movs	r3, r1
10008b30:	4973      	ldr	r1, [pc, #460]	; (10008d00 <madgwick_quaternion_update+0x8c4>)
10008b32:	468b      	mov	fp, r1
10008b34:	980a      	ldr	r0, [sp, #40]	; 0x28
10008b36:	990b      	ldr	r1, [sp, #44]	; 0x2c
10008b38:	47d8      	blx	fp
10008b3a:	4b72      	ldr	r3, [pc, #456]	; (10008d04 <madgwick_quaternion_update+0x8c8>)
10008b3c:	4699      	mov	r9, r3
10008b3e:	4798      	blx	r3
10008b40:	992d      	ldr	r1, [sp, #180]	; 0xb4
10008b42:	47a0      	blx	r4
10008b44:	9905      	ldr	r1, [sp, #20]
10008b46:	47b8      	blx	r7
10008b48:	4b6f      	ldr	r3, [pc, #444]	; (10008d08 <madgwick_quaternion_update+0x8cc>)
10008b4a:	9006      	str	r0, [sp, #24]
10008b4c:	6018      	str	r0, [r3, #0]
	q2 += qDot2 * deltat;
10008b4e:	990c      	ldr	r1, [sp, #48]	; 0x30
10008b50:	9805      	ldr	r0, [sp, #20]
10008b52:	47a0      	blx	r4
10008b54:	900a      	str	r0, [sp, #40]	; 0x28
10008b56:	9929      	ldr	r1, [sp, #164]	; 0xa4
10008b58:	9800      	ldr	r0, [sp, #0]
10008b5a:	47a0      	blx	r4
10008b5c:	1c01      	adds	r1, r0, #0
10008b5e:	980a      	ldr	r0, [sp, #40]	; 0x28
10008b60:	47b8      	blx	r7
10008b62:	900a      	str	r0, [sp, #40]	; 0x28
10008b64:	9928      	ldr	r1, [sp, #160]	; 0xa0
10008b66:	9803      	ldr	r0, [sp, #12]
10008b68:	47a0      	blx	r4
10008b6a:	1c01      	adds	r1, r0, #0
10008b6c:	980a      	ldr	r0, [sp, #40]	; 0x28
10008b6e:	47b0      	blx	r6
10008b70:	21fc      	movs	r1, #252	; 0xfc
10008b72:	0589      	lsls	r1, r1, #22
10008b74:	47a0      	blx	r4
10008b76:	47a8      	blx	r5
10008b78:	900a      	str	r0, [sp, #40]	; 0x28
10008b7a:	910b      	str	r1, [sp, #44]	; 0x2c
10008b7c:	9909      	ldr	r1, [sp, #36]	; 0x24
10008b7e:	9802      	ldr	r0, [sp, #8]
10008b80:	47a0      	blx	r4
10008b82:	47a8      	blx	r5
10008b84:	4a5c      	ldr	r2, [pc, #368]	; (10008cf8 <madgwick_quaternion_update+0x8bc>)
10008b86:	4b5d      	ldr	r3, [pc, #372]	; (10008cfc <madgwick_quaternion_update+0x8c0>)
10008b88:	47d0      	blx	sl
10008b8a:	0002      	movs	r2, r0
10008b8c:	000b      	movs	r3, r1
10008b8e:	980a      	ldr	r0, [sp, #40]	; 0x28
10008b90:	990b      	ldr	r1, [sp, #44]	; 0x2c
10008b92:	47d8      	blx	fp
10008b94:	47c8      	blx	r9
10008b96:	992d      	ldr	r1, [sp, #180]	; 0xb4
10008b98:	47a0      	blx	r4
10008b9a:	9904      	ldr	r1, [sp, #16]
10008b9c:	47b8      	blx	r7
10008b9e:	4b5b      	ldr	r3, [pc, #364]	; (10008d0c <madgwick_quaternion_update+0x8d0>)
10008ba0:	9002      	str	r0, [sp, #8]
10008ba2:	6018      	str	r0, [r3, #0]
	q3 += qDot3 * deltat;
10008ba4:	9928      	ldr	r1, [sp, #160]	; 0xa0
10008ba6:	9805      	ldr	r0, [sp, #20]
10008ba8:	47a0      	blx	r4
10008baa:	900a      	str	r0, [sp, #40]	; 0x28
10008bac:	9929      	ldr	r1, [sp, #164]	; 0xa4
10008bae:	9804      	ldr	r0, [sp, #16]
10008bb0:	47a0      	blx	r4
10008bb2:	1c01      	adds	r1, r0, #0
10008bb4:	980a      	ldr	r0, [sp, #40]	; 0x28
10008bb6:	47b0      	blx	r6
10008bb8:	900a      	str	r0, [sp, #40]	; 0x28
10008bba:	990c      	ldr	r1, [sp, #48]	; 0x30
10008bbc:	9803      	ldr	r0, [sp, #12]
10008bbe:	47a0      	blx	r4
10008bc0:	1c01      	adds	r1, r0, #0
10008bc2:	980a      	ldr	r0, [sp, #40]	; 0x28
10008bc4:	47b8      	blx	r7
10008bc6:	21fc      	movs	r1, #252	; 0xfc
10008bc8:	0589      	lsls	r1, r1, #22
10008bca:	47a0      	blx	r4
10008bcc:	47a8      	blx	r5
10008bce:	900a      	str	r0, [sp, #40]	; 0x28
10008bd0:	910b      	str	r1, [sp, #44]	; 0x2c
10008bd2:	9909      	ldr	r1, [sp, #36]	; 0x24
10008bd4:	9807      	ldr	r0, [sp, #28]
10008bd6:	47a0      	blx	r4
10008bd8:	47a8      	blx	r5
10008bda:	4a47      	ldr	r2, [pc, #284]	; (10008cf8 <madgwick_quaternion_update+0x8bc>)
10008bdc:	4b47      	ldr	r3, [pc, #284]	; (10008cfc <madgwick_quaternion_update+0x8c0>)
10008bde:	47d0      	blx	sl
10008be0:	0002      	movs	r2, r0
10008be2:	000b      	movs	r3, r1
10008be4:	980a      	ldr	r0, [sp, #40]	; 0x28
10008be6:	990b      	ldr	r1, [sp, #44]	; 0x2c
10008be8:	47d8      	blx	fp
10008bea:	47c8      	blx	r9
10008bec:	992d      	ldr	r1, [sp, #180]	; 0xb4
10008bee:	47a0      	blx	r4
10008bf0:	9900      	ldr	r1, [sp, #0]
10008bf2:	47b8      	blx	r7
10008bf4:	4b46      	ldr	r3, [pc, #280]	; (10008d10 <madgwick_quaternion_update+0x8d4>)
10008bf6:	9007      	str	r0, [sp, #28]
10008bf8:	6018      	str	r0, [r3, #0]
	q4 += qDot4 * deltat;
10008bfa:	9929      	ldr	r1, [sp, #164]	; 0xa4
10008bfc:	9805      	ldr	r0, [sp, #20]
10008bfe:	47a0      	blx	r4
10008c00:	9005      	str	r0, [sp, #20]
10008c02:	9928      	ldr	r1, [sp, #160]	; 0xa0
10008c04:	9804      	ldr	r0, [sp, #16]
10008c06:	47a0      	blx	r4
10008c08:	1c01      	adds	r1, r0, #0
10008c0a:	9805      	ldr	r0, [sp, #20]
10008c0c:	47b8      	blx	r7
10008c0e:	9004      	str	r0, [sp, #16]
10008c10:	990c      	ldr	r1, [sp, #48]	; 0x30
10008c12:	9800      	ldr	r0, [sp, #0]
10008c14:	47a0      	blx	r4
10008c16:	1c01      	adds	r1, r0, #0
10008c18:	9804      	ldr	r0, [sp, #16]
10008c1a:	47b0      	blx	r6
10008c1c:	21fc      	movs	r1, #252	; 0xfc
10008c1e:	0589      	lsls	r1, r1, #22
10008c20:	47a0      	blx	r4
10008c22:	47a8      	blx	r5
10008c24:	9000      	str	r0, [sp, #0]
10008c26:	9101      	str	r1, [sp, #4]
10008c28:	9909      	ldr	r1, [sp, #36]	; 0x24
10008c2a:	9808      	ldr	r0, [sp, #32]
10008c2c:	47a0      	blx	r4
10008c2e:	47a8      	blx	r5
10008c30:	4a31      	ldr	r2, [pc, #196]	; (10008cf8 <madgwick_quaternion_update+0x8bc>)
10008c32:	4b32      	ldr	r3, [pc, #200]	; (10008cfc <madgwick_quaternion_update+0x8c0>)
10008c34:	47d0      	blx	sl
10008c36:	0002      	movs	r2, r0
10008c38:	000b      	movs	r3, r1
10008c3a:	9800      	ldr	r0, [sp, #0]
10008c3c:	9901      	ldr	r1, [sp, #4]
10008c3e:	47d8      	blx	fp
10008c40:	47c8      	blx	r9
10008c42:	992d      	ldr	r1, [sp, #180]	; 0xb4
10008c44:	47a0      	blx	r4
10008c46:	9903      	ldr	r1, [sp, #12]
10008c48:	47b8      	blx	r7
10008c4a:	4b32      	ldr	r3, [pc, #200]	; (10008d14 <madgwick_quaternion_update+0x8d8>)
10008c4c:	9000      	str	r0, [sp, #0]
10008c4e:	6018      	str	r0, [r3, #0]
	norm = sqrtf(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);    // normalize quaternion
10008c50:	9a06      	ldr	r2, [sp, #24]
10008c52:	1c11      	adds	r1, r2, #0
10008c54:	1c10      	adds	r0, r2, #0
10008c56:	47a0      	blx	r4
10008c58:	1c06      	adds	r6, r0, #0
10008c5a:	9b02      	ldr	r3, [sp, #8]
10008c5c:	1c19      	adds	r1, r3, #0
10008c5e:	1c18      	adds	r0, r3, #0
10008c60:	47a0      	blx	r4
10008c62:	1c01      	adds	r1, r0, #0
10008c64:	9003      	str	r0, [sp, #12]
10008c66:	1c30      	adds	r0, r6, #0
10008c68:	47b8      	blx	r7
10008c6a:	1c05      	adds	r5, r0, #0
10008c6c:	9807      	ldr	r0, [sp, #28]
10008c6e:	1c01      	adds	r1, r0, #0
10008c70:	47a0      	blx	r4
10008c72:	9004      	str	r0, [sp, #16]
10008c74:	1c01      	adds	r1, r0, #0
10008c76:	1c28      	adds	r0, r5, #0
10008c78:	47b8      	blx	r7
10008c7a:	9005      	str	r0, [sp, #20]
10008c7c:	9d00      	ldr	r5, [sp, #0]
10008c7e:	1c29      	adds	r1, r5, #0
10008c80:	1c28      	adds	r0, r5, #0
10008c82:	47a0      	blx	r4
10008c84:	1c05      	adds	r5, r0, #0
10008c86:	9903      	ldr	r1, [sp, #12]
10008c88:	1c30      	adds	r0, r6, #0
10008c8a:	47b8      	blx	r7
10008c8c:	1c06      	adds	r6, r0, #0
10008c8e:	9904      	ldr	r1, [sp, #16]
10008c90:	1c30      	adds	r0, r6, #0
10008c92:	47b8      	blx	r7
10008c94:	1c06      	adds	r6, r0, #0
10008c96:	1c29      	adds	r1, r5, #0
10008c98:	1c30      	adds	r0, r6, #0
10008c9a:	47b8      	blx	r7
10008c9c:	4911      	ldr	r1, [pc, #68]	; (10008ce4 <madgwick_quaternion_update+0x8a8>)
10008c9e:	4788      	blx	r1
10008ca0:	1c01      	adds	r1, r0, #0
	norm = 1.0f/norm;
10008ca2:	20fe      	movs	r0, #254	; 0xfe
10008ca4:	0580      	lsls	r0, r0, #22
10008ca6:	47c0      	blx	r8
10008ca8:	1c05      	adds	r5, r0, #0
	imu_device.output.q[0] = q1 * norm;
10008caa:	4e1b      	ldr	r6, [pc, #108]	; (10008d18 <madgwick_quaternion_update+0x8dc>)
10008cac:	1c01      	adds	r1, r0, #0
10008cae:	9806      	ldr	r0, [sp, #24]
10008cb0:	47a0      	blx	r4
10008cb2:	6670      	str	r0, [r6, #100]	; 0x64
	imu_device.output.q[1] = q2 * norm;
10008cb4:	1c29      	adds	r1, r5, #0
10008cb6:	9802      	ldr	r0, [sp, #8]
10008cb8:	47a0      	blx	r4
10008cba:	66b0      	str	r0, [r6, #104]	; 0x68
	imu_device.output.q[2] = q3 * norm;
10008cbc:	1c29      	adds	r1, r5, #0
10008cbe:	9807      	ldr	r0, [sp, #28]
10008cc0:	47a0      	blx	r4
10008cc2:	66f0      	str	r0, [r6, #108]	; 0x6c
	imu_device.output.q[3] = q4 * norm;
10008cc4:	1c29      	adds	r1, r5, #0
10008cc6:	9800      	ldr	r0, [sp, #0]
10008cc8:	47a0      	blx	r4
10008cca:	6730      	str	r0, [r6, #112]	; 0x70
	//DBG_LOG("Quaternions (x 10000): q1 %ld, q2 %ld, q3 %ld, q4 %ld", (uint32_t)(imu_device.output.q[0]*10000), (uint32_t)(imu_device.output.q[1] * 10000), (uint32_t)(imu_device.output.q[2] * 10000), (uint32_t)(imu_device.output.q[3] * 10000));
}
10008ccc:	b01f      	add	sp, #124	; 0x7c
10008cce:	bc3c      	pop	{r2, r3, r4, r5}
10008cd0:	4690      	mov	r8, r2
10008cd2:	4699      	mov	r9, r3
10008cd4:	46a2      	mov	sl, r4
10008cd6:	46ab      	mov	fp, r5
10008cd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008cda:	46c0      	nop			; (mov r8, r8)
10008cdc:	100140e1 	.word	0x100140e1
10008ce0:	10013a61 	.word	0x10013a61
10008ce4:	10012595 	.word	0x10012595
10008ce8:	10013d4d 	.word	0x10013d4d
10008cec:	10014309 	.word	0x10014309
10008cf0:	10016371 	.word	0x10016371
10008cf4:	10015635 	.word	0x10015635
10008cf8:	a79ed7ed 	.word	0xa79ed7ed
10008cfc:	3fe358e1 	.word	0x3fe358e1
10008d00:	10015b29 	.word	0x10015b29
10008d04:	10016419 	.word	0x10016419
10008d08:	100188d4 	.word	0x100188d4
10008d0c:	1001896c 	.word	0x1001896c
10008d10:	10018970 	.word	0x10018970
10008d14:	10018974 	.word	0x10018974
10008d18:	1001a564 	.word	0x1001a564

10008d1c <ahrs_calculation>:
	//mpu_device.output.roll  = atan2(2.0f * (q[0] * q[1] + q[2] * q[3]), q[0] * q[0] - q[1] * q[1] - q[2] * q[2] + q[3] * q[3]);
	//mpu_device.output.pitch *= 180.0f / PI;
	//mpu_device.output.yaw   *= 180.0f / PI;
	//mpu_device.output.yaw   -= 2.25; // Declination at Zurich, Switzerland is 2 degrees 14 minutes  on 2017-02-06
	//mpu_device.output.roll  *= 180.0f / PI;
10008d1c:	4770      	bx	lr
10008d1e:	46c0      	nop			; (mov r8, r8)

10008d20 <sms_ble_pair_request_fn>:

/* AT_BLE_PAIR_REQUEST (#10) */
at_ble_status_t sms_ble_pair_request_fn(void *params)
{
    at_ble_pair_request_t *request = (at_ble_pair_request_t *)params;
    DBG_LOG_DEV("[sms_ble_pair_request_fn]\tPairing request... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_instance.current_state, timer1_current_mode, timer2_current_mode);
10008d20:	4b03      	ldr	r3, [pc, #12]	; (10008d30 <sms_ble_pair_request_fn+0x10>)
10008d22:	781b      	ldrb	r3, [r3, #0]
10008d24:	4b03      	ldr	r3, [pc, #12]	; (10008d34 <sms_ble_pair_request_fn+0x14>)
10008d26:	781b      	ldrb	r3, [r3, #0]
10008d28:	4b03      	ldr	r3, [pc, #12]	; (10008d38 <sms_ble_pair_request_fn+0x18>)
10008d2a:	781b      	ldrb	r3, [r3, #0]
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- peer features: 0x%02x", request->handle, request->peer_features);
    return AT_BLE_SUCCESS;
}
10008d2c:	2000      	movs	r0, #0
10008d2e:	4770      	bx	lr
10008d30:	1001a428 	.word	0x1001a428
10008d34:	1001a41c 	.word	0x1001a41c
10008d38:	1001a54b 	.word	0x1001a54b

10008d3c <sms_ble_notification_confirmed_fn>:

/* AT_BLE_NOTIFICATION_CONFIRMED (#29) */
at_ble_status_t sms_ble_notification_confirmed_fn(void *params)
{
10008d3c:	b510      	push	{r4, lr}
	//DBG_LOG_CONT(" done!");
    //gpio_pin_set_output_level(dbg_pin, DBG_PIN_HIGH);
    
    at_ble_cmd_complete_event_t *notification_status = (at_ble_cmd_complete_event_t *)params;
	ble_instance.sending_queue--;
10008d3e:	4c0d      	ldr	r4, [pc, #52]	; (10008d74 <sms_ble_notification_confirmed_fn+0x38>)
10008d40:	7863      	ldrb	r3, [r4, #1]
10008d42:	3b01      	subs	r3, #1
10008d44:	b2db      	uxtb	r3, r3
10008d46:	7063      	strb	r3, [r4, #1]
	//DBG_LOG("T/O: OFF");
	sms_ble_timeout = BLE_TIMEOUT_OFF;
10008d48:	2201      	movs	r2, #1
10008d4a:	4252      	negs	r2, r2
10008d4c:	4b0a      	ldr	r3, [pc, #40]	; (10008d78 <sms_ble_notification_confirmed_fn+0x3c>)
10008d4e:	601a      	str	r2, [r3, #0]
    //button_instance.current_state = sms_button_get_state();
    //DBG_LOG_DEV("[sms_ble_notification_confirmed_fn]\tNotification sent... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- operation: 0x%02x\r\n- status: 0x%02x", notification_status->conn_handle, notification_status->operation, notification_status->status);
    sms_dualtimer_stop(DUALTIMER_TIMER2);
10008d50:	2001      	movs	r0, #1
10008d52:	4b0a      	ldr	r3, [pc, #40]	; (10008d7c <sms_ble_notification_confirmed_fn+0x40>)
10008d54:	4798      	blx	r3
    timer2_current_mode = TIMER2_MODE_NONE;
10008d56:	2200      	movs	r2, #0
10008d58:	4b09      	ldr	r3, [pc, #36]	; (10008d80 <sms_ble_notification_confirmed_fn+0x44>)
10008d5a:	701a      	strb	r2, [r3, #0]
    ble_instance.current_state = BLE_STATE_PAIRED;
10008d5c:	2322      	movs	r3, #34	; 0x22
10008d5e:	7023      	strb	r3, [r4, #0]
    //DBG_LOG_CONT_DEV(" done!");

    //gpio_pin_set_output_level(dbg_pin, DBG_PIN_LOW);
    
    //DBG_LOG_DEV("Timer1 current mode: %d", timer1_current_mode);
    if(timer1_current_mode == TIMER1_MODE_NONE) {
10008d60:	4b08      	ldr	r3, [pc, #32]	; (10008d84 <sms_ble_notification_confirmed_fn+0x48>)
10008d62:	781b      	ldrb	r3, [r3, #0]
10008d64:	2b00      	cmp	r3, #0
10008d66:	d102      	bne.n	10008d6e <sms_ble_notification_confirmed_fn+0x32>
        ulp_ready = true;
10008d68:	3201      	adds	r2, #1
10008d6a:	4b07      	ldr	r3, [pc, #28]	; (10008d88 <sms_ble_notification_confirmed_fn+0x4c>)
10008d6c:	701a      	strb	r2, [r3, #0]
    }
    return AT_BLE_SUCCESS;
}
10008d6e:	2000      	movs	r0, #0
10008d70:	bd10      	pop	{r4, pc}
10008d72:	46c0      	nop			; (mov r8, r8)
10008d74:	1001a428 	.word	0x1001a428
10008d78:	1001a420 	.word	0x1001a420
10008d7c:	1000acb9 	.word	0x1000acb9
10008d80:	1001a54b 	.word	0x1001a54b
10008d84:	1001a41c 	.word	0x1001a41c
10008d88:	1001a425 	.word	0x1001a425

10008d8c <sms_ble_indication_confirmed_fn>:

/* AT_BLE_INDICATION_CONFIRMED (#30) */
at_ble_status_t sms_ble_indication_confirmed_fn(void *params)
{
10008d8c:	b510      	push	{r4, lr}
    
    at_ble_indication_confirmed_t *indication_status = (at_ble_indication_confirmed_t *)params;
    //button_instance.current_state = sms_button_get_state();
    //DBG_LOG_DEV("[sms_ble_indication_confirmed]\tIndication confirmed... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- char handle: 0x%04x\r\n- status: 0x%02x", indication_status->conn_handle, indication_status->char_handle, indication_status->status);
    sms_dualtimer_stop(DUALTIMER_TIMER2);
10008d8e:	2001      	movs	r0, #1
10008d90:	4b08      	ldr	r3, [pc, #32]	; (10008db4 <sms_ble_indication_confirmed_fn+0x28>)
10008d92:	4798      	blx	r3
    timer2_current_mode = TIMER2_MODE_NONE;
10008d94:	2200      	movs	r2, #0
10008d96:	4b08      	ldr	r3, [pc, #32]	; (10008db8 <sms_ble_indication_confirmed_fn+0x2c>)
10008d98:	701a      	strb	r2, [r3, #0]
    ble_instance.current_state = BLE_STATE_PAIRED;
10008d9a:	3222      	adds	r2, #34	; 0x22
10008d9c:	4b07      	ldr	r3, [pc, #28]	; (10008dbc <sms_ble_indication_confirmed_fn+0x30>)
10008d9e:	701a      	strb	r2, [r3, #0]
    //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
    //sms_sensors_toggle_interrupt(SMS_EXTINT_ENABLE);
    
    //gpio_pin_set_output_level(dbg_pin, DBG_PIN_LOW);
    
    if(timer1_current_mode == TIMER1_MODE_NONE) {
10008da0:	4b07      	ldr	r3, [pc, #28]	; (10008dc0 <sms_ble_indication_confirmed_fn+0x34>)
10008da2:	781b      	ldrb	r3, [r3, #0]
10008da4:	2b00      	cmp	r3, #0
10008da6:	d102      	bne.n	10008dae <sms_ble_indication_confirmed_fn+0x22>
        ulp_ready = true;
10008da8:	3a21      	subs	r2, #33	; 0x21
10008daa:	4b06      	ldr	r3, [pc, #24]	; (10008dc4 <sms_ble_indication_confirmed_fn+0x38>)
10008dac:	701a      	strb	r2, [r3, #0]
    }        
    return AT_BLE_SUCCESS;
}
10008dae:	2000      	movs	r0, #0
10008db0:	bd10      	pop	{r4, pc}
10008db2:	46c0      	nop			; (mov r8, r8)
10008db4:	1000acb9 	.word	0x1000acb9
10008db8:	1001a54b 	.word	0x1001a54b
10008dbc:	1001a428 	.word	0x1001a428
10008dc0:	1001a41c 	.word	0x1001a41c
10008dc4:	1001a425 	.word	0x1001a425

10008dc8 <sms_ble_init_variables>:


/* Own functions */
void sms_ble_init_variables(void)
{
    ble_instance.current_state = BLE_STATE_POWEROFF;
10008dc8:	2300      	movs	r3, #0
10008dca:	4a02      	ldr	r2, [pc, #8]	; (10008dd4 <sms_ble_init_variables+0xc>)
10008dcc:	7013      	strb	r3, [r2, #0]
    sms_ble_send_cnt = 0;
10008dce:	4a02      	ldr	r2, [pc, #8]	; (10008dd8 <sms_ble_init_variables+0x10>)
10008dd0:	8013      	strh	r3, [r2, #0]
}
10008dd2:	4770      	bx	lr
10008dd4:	1001a428 	.word	0x1001a428
10008dd8:	1001a644 	.word	0x1001a644

10008ddc <sms_ble_startup>:

void sms_ble_startup(void)
{
10008ddc:	b510      	push	{r4, lr}
	//sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
	timer2_current_mode = TIMER2_MODE_LED_STARTUP;
10008dde:	2202      	movs	r2, #2
10008de0:	4b02      	ldr	r3, [pc, #8]	; (10008dec <sms_ble_startup+0x10>)
10008de2:	701a      	strb	r2, [r3, #0]
	sms_led_blink_start(SMS_LED_0_PIN);
10008de4:	2016      	movs	r0, #22
10008de6:	4b02      	ldr	r3, [pc, #8]	; (10008df0 <sms_ble_startup+0x14>)
10008de8:	4798      	blx	r3
}
10008dea:	bd10      	pop	{r4, pc}
10008dec:	1001a54b 	.word	0x1001a54b
10008df0:	1000a769 	.word	0x1000a769

10008df4 <sms_ble_power_down>:

void sms_ble_power_down(void)
{
10008df4:	b510      	push	{r4, lr}
	sms_monitor_get_states("[sms_ble_power_down]");
10008df6:	481b      	ldr	r0, [pc, #108]	; (10008e64 <sms_ble_power_down+0x70>)
10008df8:	4b1b      	ldr	r3, [pc, #108]	; (10008e68 <sms_ble_power_down+0x74>)
10008dfa:	4798      	blx	r3
	if(ble_instance.current_state == BLE_STATE_POWEROFF) {
10008dfc:	4b1b      	ldr	r3, [pc, #108]	; (10008e6c <sms_ble_power_down+0x78>)
10008dfe:	781b      	ldrb	r3, [r3, #0]
10008e00:	2b00      	cmp	r3, #0
10008e02:	d105      	bne.n	10008e10 <sms_ble_power_down+0x1c>
		/* If already power off state, then go back sleeping */
		//sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
		ulp_ready = true;
10008e04:	2201      	movs	r2, #1
10008e06:	4b1a      	ldr	r3, [pc, #104]	; (10008e70 <sms_ble_power_down+0x7c>)
10008e08:	701a      	strb	r2, [r3, #0]
		release_sleep_lock();
10008e0a:	4b1a      	ldr	r3, [pc, #104]	; (10008e74 <sms_ble_power_down+0x80>)
10008e0c:	4798      	blx	r3
10008e0e:	e028      	b.n	10008e62 <sms_ble_power_down+0x6e>
	}
	else {
		/* Disable button interrupts */
		//sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
		/* Disconnect if necessary from BLE network */
		switch(ble_instance.current_state) {
10008e10:	4b16      	ldr	r3, [pc, #88]	; (10008e6c <sms_ble_power_down+0x78>)
10008e12:	781b      	ldrb	r3, [r3, #0]
10008e14:	b2db      	uxtb	r3, r3
10008e16:	2b21      	cmp	r3, #33	; 0x21
10008e18:	d015      	beq.n	10008e46 <sms_ble_power_down+0x52>
10008e1a:	d802      	bhi.n	10008e22 <sms_ble_power_down+0x2e>
10008e1c:	2b20      	cmp	r3, #32
10008e1e:	d003      	beq.n	10008e28 <sms_ble_power_down+0x34>
10008e20:	e016      	b.n	10008e50 <sms_ble_power_down+0x5c>
10008e22:	2b23      	cmp	r3, #35	; 0x23
10008e24:	d908      	bls.n	10008e38 <sms_ble_power_down+0x44>
10008e26:	e013      	b.n	10008e50 <sms_ble_power_down+0x5c>
			case BLE_STATE_ADVERTISING:
			DBG_LOG_DEV("[sms_ble_power_down]\tStopping command received during advertisement. Stopping... ");
			if(at_ble_adv_stop() != AT_BLE_SUCCESS) {
10008e28:	4b13      	ldr	r3, [pc, #76]	; (10008e78 <sms_ble_power_down+0x84>)
10008e2a:	4798      	blx	r3
10008e2c:	2800      	cmp	r0, #0
10008e2e:	d10f      	bne.n	10008e50 <sms_ble_power_down+0x5c>
				DBG_LOG_CONT_DEV("failed!!!");
				//#pragma TBD: manage adv_stop failure
			}
			else {
				DBG_LOG_CONT_DEV("done!");
				ble_instance.current_state = BLE_STATE_DISCONNECTED;
10008e30:	2211      	movs	r2, #17
10008e32:	4b0e      	ldr	r3, [pc, #56]	; (10008e6c <sms_ble_power_down+0x78>)
10008e34:	701a      	strb	r2, [r3, #0]
10008e36:	e00b      	b.n	10008e50 <sms_ble_power_down+0x5c>
			case BLE_STATE_PAIRED:
			DBG_LOG_DEV("[sms_ble_power_down]\t\tDevice paired... disabling interrupts & switching down sensors");
			
			case BLE_STATE_INDICATING:
			DBG_LOG_DEV("[sms_ble_power_down]\t\tCurrently indicating");
			pressure_device.state = PRESSURE_STATE_OFF;
10008e38:	2100      	movs	r1, #0
10008e3a:	232b      	movs	r3, #43	; 0x2b
10008e3c:	4a0f      	ldr	r2, [pc, #60]	; (10008e7c <sms_ble_power_down+0x88>)
10008e3e:	54d1      	strb	r1, [r2, r3]
			sms_sensors_interrupt_toggle(false, false);
10008e40:	2000      	movs	r0, #0
10008e42:	4b0f      	ldr	r3, [pc, #60]	; (10008e80 <sms_ble_power_down+0x8c>)
10008e44:	4798      	blx	r3
			//#pragma TBD: switch-off sensors to save current
			//sms_sensors_switch(false);
			
			case BLE_STATE_CONNECTED:
			DBG_LOG_DEV("[sms_ble_power_down]\t\tDevice connected... disconnecting");
			at_ble_disconnect(sms_connection_handle, AT_BLE_TERMINATED_BY_USER);
10008e46:	4b0f      	ldr	r3, [pc, #60]	; (10008e84 <sms_ble_power_down+0x90>)
10008e48:	8818      	ldrh	r0, [r3, #0]
10008e4a:	2113      	movs	r1, #19
10008e4c:	4b0e      	ldr	r3, [pc, #56]	; (10008e88 <sms_ble_power_down+0x94>)
10008e4e:	4798      	blx	r3
			
			default:
			break;
		}
		
		ble_instance.current_state = BLE_STATE_DISCONNECTED;
10008e50:	2211      	movs	r2, #17
10008e52:	4b06      	ldr	r3, [pc, #24]	; (10008e6c <sms_ble_power_down+0x78>)
10008e54:	701a      	strb	r2, [r3, #0]
		timer2_current_mode = TIMER2_MODE_LED_SHUTDOWN;
10008e56:	3a0e      	subs	r2, #14
10008e58:	4b0c      	ldr	r3, [pc, #48]	; (10008e8c <sms_ble_power_down+0x98>)
10008e5a:	701a      	strb	r2, [r3, #0]
		sms_led_blink_start(SMS_LED_0_PIN);
10008e5c:	2016      	movs	r0, #22
10008e5e:	4b0c      	ldr	r3, [pc, #48]	; (10008e90 <sms_ble_power_down+0x9c>)
10008e60:	4798      	blx	r3
	}
}
10008e62:	bd10      	pop	{r4, pc}
10008e64:	100177c8 	.word	0x100177c8
10008e68:	1000968d 	.word	0x1000968d
10008e6c:	1001a428 	.word	0x1001a428
10008e70:	1001a425 	.word	0x1001a425
10008e74:	1000e8b5 	.word	0x1000e8b5
10008e78:	1000fb4d 	.word	0x1000fb4d
10008e7c:	1001a4b0 	.word	0x1001a4b0
10008e80:	1000a9e9 	.word	0x1000a9e9
10008e84:	1001a42a 	.word	0x1001a42a
10008e88:	1000fb79 	.word	0x1000fb79
10008e8c:	1001a54b 	.word	0x1001a54b
10008e90:	1000a769 	.word	0x1000a769

10008e94 <sms_ble_adv_report_fn>:
//#include <stdio.h>
#include "sms_ble.h"

/* AT_BLE_ADV_REPORT (#3) */
at_ble_status_t sms_ble_adv_report_fn(void *params)
{
10008e94:	b510      	push	{r4, lr}
    at_ble_adv_report_t *adv_report = (at_ble_adv_report_t *)params;
    ble_instance.current_state = BLE_STATE_DISCONNECTED;
10008e96:	2211      	movs	r2, #17
10008e98:	4b02      	ldr	r3, [pc, #8]	; (10008ea4 <sms_ble_adv_report_fn+0x10>)
10008e9a:	701a      	strb	r2, [r3, #0]
    DBG_LOG_DEV("[sms_ble_adv_report_fn]\tAdvertisement timeout...");
    //DBG_LOG_DEV("- status: 0x%02x", adv_report->status);
    sms_ble_power_down();
10008e9c:	4b02      	ldr	r3, [pc, #8]	; (10008ea8 <sms_ble_adv_report_fn+0x14>)
10008e9e:	4798      	blx	r3
    return AT_BLE_SUCCESS;
}
10008ea0:	2000      	movs	r0, #0
10008ea2:	bd10      	pop	{r4, pc}
10008ea4:	1001a428 	.word	0x1001a428
10008ea8:	10008df5 	.word	0x10008df5

10008eac <sms_ble_connected_fn>:

/* AT_BLE_CONNECTED (#5) */
at_ble_status_t sms_ble_connected_fn(void *params)
{
10008eac:	b510      	push	{r4, lr}
    if(ble_instance.current_state == BLE_STATE_ADVERTISING) {
10008eae:	4b09      	ldr	r3, [pc, #36]	; (10008ed4 <sms_ble_connected_fn+0x28>)
10008eb0:	781b      	ldrb	r3, [r3, #0]
10008eb2:	2b20      	cmp	r3, #32
10008eb4:	d10a      	bne.n	10008ecc <sms_ble_connected_fn+0x20>
        at_ble_connected_t *connected = (at_ble_connected_t *)params;
        sms_ble_conn_handle = connected->handle;
10008eb6:	8902      	ldrh	r2, [r0, #8]
10008eb8:	4b07      	ldr	r3, [pc, #28]	; (10008ed8 <sms_ble_connected_fn+0x2c>)
10008eba:	801a      	strh	r2, [r3, #0]
        ble_instance.current_state = BLE_STATE_CONNECTED;
10008ebc:	2221      	movs	r2, #33	; 0x21
10008ebe:	4b05      	ldr	r3, [pc, #20]	; (10008ed4 <sms_ble_connected_fn+0x28>)
10008ec0:	701a      	strb	r2, [r3, #0]
        //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- conn interval: %d\r\n- conn latency: %d\r\n- supervision timeout: %d\r\n- peer address: 0x", connected->handle, connected->conn_params.con_interval, connected->conn_params.con_latency, connected->conn_params.sup_to);
        //for(uint8_t i = 0; i < AT_BLE_ADDR_LEN; i++) {
            //DBG_LOG_CONT_DEV("%02x",connected->peer_addr.addr[AT_BLE_ADDR_LEN - (i+1)]);
        //}
		//DBG_LOG("T/O: 5000 ms");
		sms_ble_timeout = BLE_TIMEOUT_PAIR;
10008ec2:	32d4      	adds	r2, #212	; 0xd4
10008ec4:	32ff      	adds	r2, #255	; 0xff
10008ec6:	4b05      	ldr	r3, [pc, #20]	; (10008edc <sms_ble_connected_fn+0x30>)
10008ec8:	601a      	str	r2, [r3, #0]
10008eca:	e001      	b.n	10008ed0 <sms_ble_connected_fn+0x24>
    }
    else {
        sms_ble_power_down();
10008ecc:	4b04      	ldr	r3, [pc, #16]	; (10008ee0 <sms_ble_connected_fn+0x34>)
10008ece:	4798      	blx	r3
    }    
    return AT_BLE_SUCCESS;
}
10008ed0:	2000      	movs	r0, #0
10008ed2:	bd10      	pop	{r4, pc}
10008ed4:	1001a428 	.word	0x1001a428
10008ed8:	1001a53e 	.word	0x1001a53e
10008edc:	1001a420 	.word	0x1001a420
10008ee0:	10008df5 	.word	0x10008df5

10008ee4 <sms_ble_paired_fn>:
    return AT_BLE_SUCCESS;
}

/* AT_BLE_PAIR_DONE (#9) */
at_ble_status_t sms_ble_paired_fn(void *params)
{
10008ee4:	b510      	push	{r4, lr}
    if(ble_instance.current_state == BLE_STATE_CONNECTED) {
10008ee6:	4b0b      	ldr	r3, [pc, #44]	; (10008f14 <sms_ble_paired_fn+0x30>)
10008ee8:	781b      	ldrb	r3, [r3, #0]
10008eea:	2b21      	cmp	r3, #33	; 0x21
10008eec:	d10e      	bne.n	10008f0c <sms_ble_paired_fn+0x28>
        ble_instance.current_state = BLE_STATE_PAIRED;
10008eee:	2222      	movs	r2, #34	; 0x22
10008ef0:	4b08      	ldr	r3, [pc, #32]	; (10008f14 <sms_ble_paired_fn+0x30>)
10008ef2:	701a      	strb	r2, [r3, #0]
        at_ble_pair_done_t *pair_status = (at_ble_pair_done_t *)params;
        sms_monitor_get_states("[sms_ble_paired_fn]");
10008ef4:	4808      	ldr	r0, [pc, #32]	; (10008f18 <sms_ble_paired_fn+0x34>)
10008ef6:	4b09      	ldr	r3, [pc, #36]	; (10008f1c <sms_ble_paired_fn+0x38>)
10008ef8:	4798      	blx	r3
        //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- authorization: 0x%02x\r\n- status: 0x%02x", pair_status->handle, pair_status->auth, pair_status->status);
        sms_sensors_switch(true, true); // ! Release sleep lock & enable buttons interrupt after reset done!
10008efa:	2101      	movs	r1, #1
10008efc:	2001      	movs	r0, #1
10008efe:	4b08      	ldr	r3, [pc, #32]	; (10008f20 <sms_ble_paired_fn+0x3c>)
10008f00:	4798      	blx	r3
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
		//DBG_LOG("T/O: OFF");
		sms_ble_timeout = BLE_TIMEOUT_OFF;
10008f02:	2201      	movs	r2, #1
10008f04:	4252      	negs	r2, r2
10008f06:	4b07      	ldr	r3, [pc, #28]	; (10008f24 <sms_ble_paired_fn+0x40>)
10008f08:	601a      	str	r2, [r3, #0]
10008f0a:	e001      	b.n	10008f10 <sms_ble_paired_fn+0x2c>
    }
    else {
        sms_ble_power_down();
10008f0c:	4b06      	ldr	r3, [pc, #24]	; (10008f28 <sms_ble_paired_fn+0x44>)
10008f0e:	4798      	blx	r3
    }        
    return AT_BLE_SUCCESS;
}
10008f10:	2000      	movs	r0, #0
10008f12:	bd10      	pop	{r4, pc}
10008f14:	1001a428 	.word	0x1001a428
10008f18:	100177e0 	.word	0x100177e0
10008f1c:	1000968d 	.word	0x1000968d
10008f20:	1000aa71 	.word	0x1000aa71
10008f24:	1001a420 	.word	0x1001a420
10008f28:	10008df5 	.word	0x10008df5

10008f2c <sms_ble_advertise>:
		sms_led_blink_start(SMS_LED_0_PIN);
	}
}

at_ble_status_t sms_ble_advertise(void)
{
10008f2c:	b510      	push	{r4, lr}
10008f2e:	b084      	sub	sp, #16
	at_ble_status_t status = AT_BLE_FAILURE;
	ble_instance.current_state = BLE_STATE_ADVERTISING;
10008f30:	2220      	movs	r2, #32
10008f32:	4b14      	ldr	r3, [pc, #80]	; (10008f84 <sms_ble_advertise+0x58>)
10008f34:	701a      	strb	r2, [r3, #0]

	/* Set the advertisement data */
	if((status = ble_advertisement_data_set()) != AT_BLE_SUCCESS) {
10008f36:	4b14      	ldr	r3, [pc, #80]	; (10008f88 <sms_ble_advertise+0x5c>)
10008f38:	4798      	blx	r3
10008f3a:	1e04      	subs	r4, r0, #0
10008f3c:	d007      	beq.n	10008f4e <sms_ble_advertise+0x22>
		DBG_LOG("[sms_ble_advertise]\tAdvertisement data set failed!");
10008f3e:	4813      	ldr	r0, [pc, #76]	; (10008f8c <sms_ble_advertise+0x60>)
10008f40:	4b13      	ldr	r3, [pc, #76]	; (10008f90 <sms_ble_advertise+0x64>)
10008f42:	4798      	blx	r3
10008f44:	4813      	ldr	r0, [pc, #76]	; (10008f94 <sms_ble_advertise+0x68>)
10008f46:	4b14      	ldr	r3, [pc, #80]	; (10008f98 <sms_ble_advertise+0x6c>)
10008f48:	4798      	blx	r3
		return status;
10008f4a:	0020      	movs	r0, r4
10008f4c:	e018      	b.n	10008f80 <sms_ble_advertise+0x54>
	}

	/* Start of advertisement */
	if((status = at_ble_adv_start(AT_BLE_ADV_TYPE_UNDIRECTED, AT_BLE_ADV_GEN_DISCOVERABLE, NULL, AT_BLE_ADV_FP_ANY, APP_FAST_ADV, APP_ADV_TIMEOUT, 0)) == AT_BLE_SUCCESS)
10008f4e:	2300      	movs	r3, #0
10008f50:	9302      	str	r3, [sp, #8]
10008f52:	4b12      	ldr	r3, [pc, #72]	; (10008f9c <sms_ble_advertise+0x70>)
10008f54:	9301      	str	r3, [sp, #4]
10008f56:	23c8      	movs	r3, #200	; 0xc8
10008f58:	00db      	lsls	r3, r3, #3
10008f5a:	9300      	str	r3, [sp, #0]
10008f5c:	2300      	movs	r3, #0
10008f5e:	2200      	movs	r2, #0
10008f60:	2101      	movs	r1, #1
10008f62:	2000      	movs	r0, #0
10008f64:	4c0e      	ldr	r4, [pc, #56]	; (10008fa0 <sms_ble_advertise+0x74>)
10008f66:	47a0      	blx	r4
10008f68:	0004      	movs	r4, r0
	{
		DBG_LOG_DEV("[sms_ble_advertise]\t\tBLE Started Advertisement");
		return AT_BLE_SUCCESS;
10008f6a:	2000      	movs	r0, #0
		DBG_LOG("[sms_ble_advertise]\tAdvertisement data set failed!");
		return status;
	}

	/* Start of advertisement */
	if((status = at_ble_adv_start(AT_BLE_ADV_TYPE_UNDIRECTED, AT_BLE_ADV_GEN_DISCOVERABLE, NULL, AT_BLE_ADV_FP_ANY, APP_FAST_ADV, APP_ADV_TIMEOUT, 0)) == AT_BLE_SUCCESS)
10008f6c:	2c00      	cmp	r4, #0
10008f6e:	d007      	beq.n	10008f80 <sms_ble_advertise+0x54>
	{
		DBG_LOG_DEV("[sms_ble_advertise]\t\tBLE Started Advertisement");
		return AT_BLE_SUCCESS;
	}
	else {
		DBG_LOG("[sms_service_advertise]\tBLE Advertisement start failed: reason 0x%x", status);
10008f70:	4806      	ldr	r0, [pc, #24]	; (10008f8c <sms_ble_advertise+0x60>)
10008f72:	4b07      	ldr	r3, [pc, #28]	; (10008f90 <sms_ble_advertise+0x64>)
10008f74:	4798      	blx	r3
10008f76:	0021      	movs	r1, r4
10008f78:	480a      	ldr	r0, [pc, #40]	; (10008fa4 <sms_ble_advertise+0x78>)
10008f7a:	4b07      	ldr	r3, [pc, #28]	; (10008f98 <sms_ble_advertise+0x6c>)
10008f7c:	4798      	blx	r3
	}
	return AT_BLE_FAILURE;
10008f7e:	20e2      	movs	r0, #226	; 0xe2
}
10008f80:	b004      	add	sp, #16
10008f82:	bd10      	pop	{r4, pc}
10008f84:	1001a428 	.word	0x1001a428
10008f88:	1000df19 	.word	0x1000df19
10008f8c:	100177b0 	.word	0x100177b0
10008f90:	10016871 	.word	0x10016871
10008f94:	100177f4 	.word	0x100177f4
10008f98:	10016751 	.word	0x10016751
10008f9c:	0000028f 	.word	0x0000028f
10008fa0:	1000fa11 	.word	0x1000fa11
10008fa4:	10017828 	.word	0x10017828

10008fa8 <sms_ble_disconnected_fn>:
    return AT_BLE_SUCCESS;
}

/* AT_BLE_DISCONNECTED (#6) */
at_ble_status_t sms_ble_disconnected_fn(void *params)
{
10008fa8:	b510      	push	{r4, lr}
10008faa:	0004      	movs	r4, r0
    at_ble_disconnected_t *disconnect = (at_ble_disconnected_t *)params;
    if(ble_instance.current_state == BLE_STATE_PAIRED) {
10008fac:	4b16      	ldr	r3, [pc, #88]	; (10009008 <sms_ble_disconnected_fn+0x60>)
10008fae:	781b      	ldrb	r3, [r3, #0]
10008fb0:	2b22      	cmp	r3, #34	; 0x22
10008fb2:	d10a      	bne.n	10008fca <sms_ble_disconnected_fn+0x22>
        pressure_device.state = PRESSURE_STATE_OFF;
10008fb4:	2100      	movs	r1, #0
10008fb6:	3309      	adds	r3, #9
10008fb8:	4a14      	ldr	r2, [pc, #80]	; (1000900c <sms_ble_disconnected_fn+0x64>)
10008fba:	54d1      	strb	r1, [r2, r3]
        sms_sensors_interrupt_toggle(false, false);
10008fbc:	2000      	movs	r0, #0
10008fbe:	4b14      	ldr	r3, [pc, #80]	; (10009010 <sms_ble_disconnected_fn+0x68>)
10008fc0:	4798      	blx	r3
        sms_sensors_switch(false, false);
10008fc2:	2100      	movs	r1, #0
10008fc4:	2000      	movs	r0, #0
10008fc6:	4b13      	ldr	r3, [pc, #76]	; (10009014 <sms_ble_disconnected_fn+0x6c>)
10008fc8:	4798      	blx	r3
    }
    ble_instance.current_state = BLE_STATE_DISCONNECTED;
10008fca:	4b0f      	ldr	r3, [pc, #60]	; (10009008 <sms_ble_disconnected_fn+0x60>)
10008fcc:	2211      	movs	r2, #17
10008fce:	701a      	strb	r2, [r3, #0]
    DBG_LOG_DEV("[sms_ble_disconnected_fn]\tPeer disconnected... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_instance.current_state, timer1_current_mode, timer2_current_mode);
10008fd0:	781b      	ldrb	r3, [r3, #0]
10008fd2:	4b11      	ldr	r3, [pc, #68]	; (10009018 <sms_ble_disconnected_fn+0x70>)
10008fd4:	781b      	ldrb	r3, [r3, #0]
10008fd6:	4b11      	ldr	r3, [pc, #68]	; (1000901c <sms_ble_disconnected_fn+0x74>)
10008fd8:	781b      	ldrb	r3, [r3, #0]
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- reason: 0x%02x", disconnect->handle, disconnect->reason);
    switch(disconnect->reason) {
10008fda:	78a3      	ldrb	r3, [r4, #2]
10008fdc:	2b1a      	cmp	r3, #26
10008fde:	d00b      	beq.n	10008ff8 <sms_ble_disconnected_fn+0x50>
10008fe0:	b2da      	uxtb	r2, r3
10008fe2:	2a1a      	cmp	r2, #26
10008fe4:	d804      	bhi.n	10008ff0 <sms_ble_disconnected_fn+0x48>
10008fe6:	2b05      	cmp	r3, #5
10008fe8:	d006      	beq.n	10008ff8 <sms_ble_disconnected_fn+0x50>
10008fea:	2b08      	cmp	r3, #8
10008fec:	d107      	bne.n	10008ffe <sms_ble_disconnected_fn+0x56>
10008fee:	e003      	b.n	10008ff8 <sms_ble_disconnected_fn+0x50>
10008ff0:	2b29      	cmp	r3, #41	; 0x29
10008ff2:	d001      	beq.n	10008ff8 <sms_ble_disconnected_fn+0x50>
10008ff4:	2b3b      	cmp	r3, #59	; 0x3b
10008ff6:	d102      	bne.n	10008ffe <sms_ble_disconnected_fn+0x56>
        case AT_BLE_AUTH_FAILURE: //0x05
        case AT_BLE_SUPERVISION_TIMEOUT: //0x08
        case AT_BLE_UNSUPPORTED_REMOTE_FEATURE: // 0x1A
        case AT_BLE_PAIRING_WITH_UNIT_KEY_NOT_SUP: // 0x29
        case AT_BLE_UNACCEPTABLE_INTERVAL: // 0x3B
        sms_ble_advertise();
10008ff8:	4b09      	ldr	r3, [pc, #36]	; (10009020 <sms_ble_disconnected_fn+0x78>)
10008ffa:	4798      	blx	r3
        break;
10008ffc:	e001      	b.n	10009002 <sms_ble_disconnected_fn+0x5a>
        case AT_BLE_TERMINATED_BY_USER: // 0x13
        case AT_BLE_REMOTE_DEV_TERM_LOW_RESOURCES: //0x14
        case AT_BLE_REMOTE_DEV_POWER_OFF: //0x15
        case AT_BLE_CON_TERM_BY_LOCAL_HOST: //0x16
        default:
        sms_ble_power_down();
10008ffe:	4b09      	ldr	r3, [pc, #36]	; (10009024 <sms_ble_disconnected_fn+0x7c>)
10009000:	4798      	blx	r3
        break;
    }
    
    return AT_BLE_SUCCESS;
}
10009002:	2000      	movs	r0, #0
10009004:	bd10      	pop	{r4, pc}
10009006:	46c0      	nop			; (mov r8, r8)
10009008:	1001a428 	.word	0x1001a428
1000900c:	1001a4b0 	.word	0x1001a4b0
10009010:	1000a9e9 	.word	0x1000a9e9
10009014:	1000aa71 	.word	0x1000aa71
10009018:	1001a41c 	.word	0x1001a41c
1000901c:	1001a54b 	.word	0x1001a54b
10009020:	10008f2d 	.word	0x10008f2d
10009024:	10008df5 	.word	0x10008df5

10009028 <sms_ble_send_characteristic>:
	}
	return AT_BLE_FAILURE;
}

at_ble_status_t sms_ble_send_characteristic(enum sms_ble_char_type ch)
{
10009028:	b570      	push	{r4, r5, r6, lr}
1000902a:	b084      	sub	sp, #16
    uint8_t send_val[BLE_CHAR_SIZE_MAX];
	uint32_t calc_val;
    //ble_current_state = BLE_STATE_INDICATING;

    
    switch(ch) {
1000902c:	2801      	cmp	r0, #1
1000902e:	d02e      	beq.n	1000908e <sms_ble_send_characteristic+0x66>
10009030:	2800      	cmp	r0, #0
10009032:	d002      	beq.n	1000903a <sms_ble_send_characteristic+0x12>
10009034:	2802      	cmp	r0, #2
10009036:	d040      	beq.n	100090ba <sms_ble_send_characteristic+0x92>
10009038:	e07a      	b.n	10009130 <sms_ble_send_characteristic+0x108>
        case BLE_CHAR_BTN:
		send_val[0] = 0x00;
1000903a:	2300      	movs	r3, #0
1000903c:	466a      	mov	r2, sp
1000903e:	7013      	strb	r3, [r2, #0]
		if(button_instance.btn0.new_char) {
10009040:	4b4d      	ldr	r3, [pc, #308]	; (10009178 <sms_ble_send_characteristic+0x150>)
10009042:	791b      	ldrb	r3, [r3, #4]
10009044:	2b00      	cmp	r3, #0
10009046:	d00a      	beq.n	1000905e <sms_ble_send_characteristic+0x36>
			button_instance.btn0.char_value = ((button_instance.btn0.char_value >= 0x7f) ? 0 : (button_instance.btn0.char_value + 1));
10009048:	4b4b      	ldr	r3, [pc, #300]	; (10009178 <sms_ble_send_characteristic+0x150>)
1000904a:	795a      	ldrb	r2, [r3, #5]
1000904c:	2300      	movs	r3, #0
1000904e:	2a7e      	cmp	r2, #126	; 0x7e
10009050:	d801      	bhi.n	10009056 <sms_ble_send_characteristic+0x2e>
10009052:	3201      	adds	r2, #1
10009054:	b2d3      	uxtb	r3, r2
10009056:	4a48      	ldr	r2, [pc, #288]	; (10009178 <sms_ble_send_characteristic+0x150>)
10009058:	7153      	strb	r3, [r2, #5]
			send_val[0] |= button_instance.btn0.char_value;
1000905a:	466a      	mov	r2, sp
1000905c:	7013      	strb	r3, [r2, #0]
		}
		if(button_instance.btn1.new_char) {
1000905e:	4b46      	ldr	r3, [pc, #280]	; (10009178 <sms_ble_send_characteristic+0x150>)
10009060:	7a9b      	ldrb	r3, [r3, #10]
10009062:	2b00      	cmp	r3, #0
10009064:	d00f      	beq.n	10009086 <sms_ble_send_characteristic+0x5e>
	        button_instance.btn1.char_value = ((button_instance.btn1.char_value >= 0xff) ? 0 : (button_instance.btn1.char_value + 1));
10009066:	4b44      	ldr	r3, [pc, #272]	; (10009178 <sms_ble_send_characteristic+0x150>)
10009068:	7adb      	ldrb	r3, [r3, #11]
1000906a:	2bff      	cmp	r3, #255	; 0xff
1000906c:	d002      	beq.n	10009074 <sms_ble_send_characteristic+0x4c>
1000906e:	3301      	adds	r3, #1
10009070:	b2db      	uxtb	r3, r3
10009072:	e000      	b.n	10009076 <sms_ble_send_characteristic+0x4e>
10009074:	2300      	movs	r3, #0
10009076:	4a40      	ldr	r2, [pc, #256]	; (10009178 <sms_ble_send_characteristic+0x150>)
10009078:	72d3      	strb	r3, [r2, #11]
			send_val[0] |= button_instance.btn1.char_value + 0x80;
1000907a:	3b80      	subs	r3, #128	; 0x80
1000907c:	466a      	mov	r2, sp
1000907e:	7812      	ldrb	r2, [r2, #0]
10009080:	4313      	orrs	r3, r2
10009082:	466a      	mov	r2, sp
10009084:	7013      	strb	r3, [r2, #0]
		}
        val_handle = button_instance.service_handler.serv_chars.char_val_handle;
10009086:	4b3c      	ldr	r3, [pc, #240]	; (10009178 <sms_ble_send_characteristic+0x150>)
10009088:	8c9d      	ldrh	r5, [r3, #36]	; 0x24
        length = BLE_CHAR_SIZE_BUTTON;
1000908a:	2201      	movs	r2, #1
        break;
1000908c:	e052      	b.n	10009134 <sms_ble_send_characteristic+0x10c>
                
        case BLE_CHAR_PRESS:
        send_val[0] = (uint8_t)((pressure_device.hal.temperature >>24) & 0xff);
1000908e:	4a3b      	ldr	r2, [pc, #236]	; (1000917c <sms_ble_send_characteristic+0x154>)
10009090:	6a13      	ldr	r3, [r2, #32]
10009092:	1619      	asrs	r1, r3, #24
10009094:	4668      	mov	r0, sp
10009096:	7001      	strb	r1, [r0, #0]
        send_val[1] = (uint8_t)((pressure_device.hal.temperature >> 16) & 0xff);
10009098:	1419      	asrs	r1, r3, #16
1000909a:	7041      	strb	r1, [r0, #1]
        send_val[2] = (uint8_t)((pressure_device.hal.temperature >> 8) & 0xff);
1000909c:	1219      	asrs	r1, r3, #8
1000909e:	7081      	strb	r1, [r0, #2]
        send_val[3] = (uint8_t)((pressure_device.hal.temperature) & 0xff);
100090a0:	70c3      	strb	r3, [r0, #3]
        send_val[4] = (uint8_t)((pressure_device.hal.pressure >> 24) & 0xff);
100090a2:	69d3      	ldr	r3, [r2, #28]
100090a4:	1619      	asrs	r1, r3, #24
100090a6:	7101      	strb	r1, [r0, #4]
        send_val[5] = (uint8_t)((pressure_device.hal.pressure >> 16) & 0xff);
100090a8:	1419      	asrs	r1, r3, #16
100090aa:	7141      	strb	r1, [r0, #5]
        send_val[6] = (uint8_t)((pressure_device.hal.pressure >> 8) & 0xff);
100090ac:	1219      	asrs	r1, r3, #8
100090ae:	7181      	strb	r1, [r0, #6]
        send_val[7] = (uint8_t)((pressure_device.hal.pressure) & 0xff);
100090b0:	71c3      	strb	r3, [r0, #7]
        val_handle = pressure_device.service_handler.serv_chars.char_val_handle;
100090b2:	2340      	movs	r3, #64	; 0x40
100090b4:	5ad5      	ldrh	r5, [r2, r3]
        length = BLE_CHAR_SIZE_PRESSURE;
100090b6:	2208      	movs	r2, #8
        break;
100090b8:	e03c      	b.n	10009134 <sms_ble_send_characteristic+0x10c>
        
        case BLE_CHAR_MPU:
		calc_val = (uint32_t)(imu_device.output.q[0] * 1000000);
100090ba:	4c31      	ldr	r4, [pc, #196]	; (10009180 <sms_ble_send_characteristic+0x158>)
100090bc:	4e31      	ldr	r6, [pc, #196]	; (10009184 <sms_ble_send_characteristic+0x15c>)
100090be:	4932      	ldr	r1, [pc, #200]	; (10009188 <sms_ble_send_characteristic+0x160>)
100090c0:	6e60      	ldr	r0, [r4, #100]	; 0x64
100090c2:	47b0      	blx	r6
100090c4:	4d31      	ldr	r5, [pc, #196]	; (1000918c <sms_ble_send_characteristic+0x164>)
100090c6:	47a8      	blx	r5
		//DBG_LOG("q1: %ld ", calc_val);
        send_val[0] = (uint8_t)(calc_val & 0xff);
100090c8:	466b      	mov	r3, sp
100090ca:	7018      	strb	r0, [r3, #0]
        send_val[1] = (uint8_t)((calc_val >> 8) & 0xff);
100090cc:	0a03      	lsrs	r3, r0, #8
100090ce:	466a      	mov	r2, sp
100090d0:	7053      	strb	r3, [r2, #1]
        send_val[2] = (uint8_t)((calc_val >> 16) & 0xff);
100090d2:	0c03      	lsrs	r3, r0, #16
100090d4:	7093      	strb	r3, [r2, #2]
        send_val[3] = (uint8_t)((calc_val >> 24) & 0xff);
100090d6:	0e00      	lsrs	r0, r0, #24
100090d8:	70d0      	strb	r0, [r2, #3]
		calc_val = (uint32_t)(imu_device.output.q[1] * 1000000);
100090da:	492b      	ldr	r1, [pc, #172]	; (10009188 <sms_ble_send_characteristic+0x160>)
100090dc:	6ea0      	ldr	r0, [r4, #104]	; 0x68
100090de:	47b0      	blx	r6
100090e0:	47a8      	blx	r5
		//DBG_LOG_CONT("q2: %ld ", calc_val);
        send_val[4] = (uint8_t)(calc_val & 0xff);
100090e2:	466b      	mov	r3, sp
100090e4:	7118      	strb	r0, [r3, #4]
        send_val[5] = (uint8_t)((calc_val >> 8) & 0xff);
100090e6:	0a03      	lsrs	r3, r0, #8
100090e8:	466a      	mov	r2, sp
100090ea:	7153      	strb	r3, [r2, #5]
        send_val[6] = (uint8_t)((calc_val >> 16) & 0xff);
100090ec:	0c03      	lsrs	r3, r0, #16
100090ee:	7193      	strb	r3, [r2, #6]
        send_val[7] = (uint8_t)((calc_val >> 24) & 0xff);
100090f0:	0e00      	lsrs	r0, r0, #24
100090f2:	71d0      	strb	r0, [r2, #7]
		calc_val = (uint32_t)(imu_device.output.q[2] * 1000000);
100090f4:	4924      	ldr	r1, [pc, #144]	; (10009188 <sms_ble_send_characteristic+0x160>)
100090f6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
100090f8:	47b0      	blx	r6
100090fa:	47a8      	blx	r5
		//DBG_LOG_CONT("q3: %ld ", calc_val);
		send_val[8] = (uint8_t)(calc_val & 0xff);
100090fc:	466b      	mov	r3, sp
100090fe:	7218      	strb	r0, [r3, #8]
		send_val[9] = (uint8_t)((calc_val >> 8) & 0xff);
10009100:	0a03      	lsrs	r3, r0, #8
10009102:	466a      	mov	r2, sp
10009104:	7253      	strb	r3, [r2, #9]
		send_val[10] = (uint8_t)((calc_val >> 16) & 0xff);
10009106:	0c03      	lsrs	r3, r0, #16
10009108:	7293      	strb	r3, [r2, #10]
		send_val[11] = (uint8_t)((calc_val >> 24) & 0xff);
1000910a:	0e00      	lsrs	r0, r0, #24
1000910c:	72d0      	strb	r0, [r2, #11]
		calc_val = (uint32_t)(imu_device.output.q[3] * 1000000);
1000910e:	491e      	ldr	r1, [pc, #120]	; (10009188 <sms_ble_send_characteristic+0x160>)
10009110:	6f20      	ldr	r0, [r4, #112]	; 0x70
10009112:	47b0      	blx	r6
10009114:	47a8      	blx	r5
		//DBG_LOG_CONT("q4: %ld ", calc_val);
		send_val[12] = (uint8_t)(calc_val & 0xff);
10009116:	466b      	mov	r3, sp
10009118:	7318      	strb	r0, [r3, #12]
		send_val[13] = (uint8_t)((calc_val >> 8) & 0xff);
1000911a:	0a03      	lsrs	r3, r0, #8
1000911c:	466a      	mov	r2, sp
1000911e:	7353      	strb	r3, [r2, #13]
		send_val[14] = (uint8_t)((calc_val >> 16) & 0xff);
10009120:	0c03      	lsrs	r3, r0, #16
10009122:	7393      	strb	r3, [r2, #14]
		send_val[15] = (uint8_t)((calc_val >> 24) & 0xff);
10009124:	0e00      	lsrs	r0, r0, #24
10009126:	73d0      	strb	r0, [r2, #15]
        val_handle = imu_device.service_handler.serv_chars.char_val_handle;
10009128:	2398      	movs	r3, #152	; 0x98
1000912a:	5ae5      	ldrh	r5, [r4, r3]
        length = BLE_CHAR_SIZE_MPU;
1000912c:	2210      	movs	r2, #16
        //else {
            //for(uint8_t i = 0; i < 2; i++) {
                //send_val[18+i] = 0;
            //}
        //}
        break;
1000912e:	e001      	b.n	10009134 <sms_ble_send_characteristic+0x10c>

at_ble_status_t sms_ble_send_characteristic(enum sms_ble_char_type ch)
{
    at_ble_status_t status = AT_BLE_SUCCESS;
    at_ble_handle_t val_handle = 0;
    uint8_t length = 0;
10009130:	2200      	movs	r2, #0
}

at_ble_status_t sms_ble_send_characteristic(enum sms_ble_char_type ch)
{
    at_ble_status_t status = AT_BLE_SUCCESS;
    at_ble_handle_t val_handle = 0;
10009132:	2500      	movs	r5, #0
    
    //DBG_LOG("Sending: ");
    //for(int i = 0; i < length; i += 4) {
        //DBG_LOG_CONT("0x%02x%02x%02x%02x ", send_val[i], send_val[i+1], send_val[i+2], send_val[i+3]);
    //}
    status = at_ble_characteristic_value_set(val_handle, send_val, (length * sizeof(uint8_t)));
10009134:	b292      	uxth	r2, r2
10009136:	4669      	mov	r1, sp
10009138:	0028      	movs	r0, r5
1000913a:	4b15      	ldr	r3, [pc, #84]	; (10009190 <sms_ble_send_characteristic+0x168>)
1000913c:	4798      	blx	r3
1000913e:	1e04      	subs	r4, r0, #0
    if(status == AT_BLE_SUCCESS) {
10009140:	d116      	bne.n	10009170 <sms_ble_send_characteristic+0x148>
//#   if SMS_SENDING_WITH_ACK == true
        //sms_ble_ind_retry = 0;
        //status = at_ble_indication_send(sms_connection_handle, val_handle);
//#   else
        status = at_ble_notification_send(sms_connection_handle, val_handle);
10009142:	4b14      	ldr	r3, [pc, #80]	; (10009194 <sms_ble_send_characteristic+0x16c>)
10009144:	8818      	ldrh	r0, [r3, #0]
10009146:	0029      	movs	r1, r5
10009148:	4b13      	ldr	r3, [pc, #76]	; (10009198 <sms_ble_send_characteristic+0x170>)
1000914a:	4798      	blx	r3
1000914c:	1e04      	subs	r4, r0, #0
		if(status == AT_BLE_SUCCESS) {
1000914e:	d10c      	bne.n	1000916a <sms_ble_send_characteristic+0x142>
			ble_instance.sending_queue++;
10009150:	4a12      	ldr	r2, [pc, #72]	; (1000919c <sms_ble_send_characteristic+0x174>)
10009152:	7853      	ldrb	r3, [r2, #1]
10009154:	3301      	adds	r3, #1
10009156:	b2db      	uxtb	r3, r3
10009158:	7053      	strb	r3, [r2, #1]
			sms_ble_send_cnt++;
1000915a:	4a11      	ldr	r2, [pc, #68]	; (100091a0 <sms_ble_send_characteristic+0x178>)
1000915c:	8813      	ldrh	r3, [r2, #0]
1000915e:	3301      	adds	r3, #1
10009160:	8013      	strh	r3, [r2, #0]
			//DBG_LOG_CONT(" %d GONE? ", sms_ble_send_cnt);
			//DBG_LOG("T/O: 20ms");
			sms_ble_timeout = BLE_TIMEOUT_NOTIFY;
10009162:	2202      	movs	r2, #2
10009164:	4b0f      	ldr	r3, [pc, #60]	; (100091a4 <sms_ble_send_characteristic+0x17c>)
10009166:	601a      	str	r2, [r3, #0]
10009168:	e002      	b.n	10009170 <sms_ble_send_characteristic+0x148>
		}
		else {
			DBG_LOG_CONT("NOTIFICATION ERROR!!");
1000916a:	480f      	ldr	r0, [pc, #60]	; (100091a8 <sms_ble_send_characteristic+0x180>)
1000916c:	4b0f      	ldr	r3, [pc, #60]	; (100091ac <sms_ble_send_characteristic+0x184>)
1000916e:	4798      	blx	r3
    }
	else {
		DBG_LOG_DEV(" NOT set? ");
	}
    return status;
}
10009170:	0020      	movs	r0, r4
10009172:	b004      	add	sp, #16
10009174:	bd70      	pop	{r4, r5, r6, pc}
10009176:	46c0      	nop			; (mov r8, r8)
10009178:	1001a42c 	.word	0x1001a42c
1000917c:	1001a4b0 	.word	0x1001a4b0
10009180:	1001a564 	.word	0x1001a564
10009184:	100140e1 	.word	0x100140e1
10009188:	49742400 	.word	0x49742400
1000918c:	100139f5 	.word	0x100139f5
10009190:	100102f5 	.word	0x100102f5
10009194:	1001a42a 	.word	0x1001a42a
10009198:	10010495 	.word	0x10010495
1000919c:	1001a428 	.word	0x1001a428
100091a0:	1001a644 	.word	0x1001a644
100091a4:	1001a420 	.word	0x1001a420
100091a8:	1001786c 	.word	0x1001786c
100091ac:	10016751 	.word	0x10016751

100091b0 <sms_ble_primary_service_define>:

at_ble_status_t sms_ble_primary_service_define(gatt_service_handler_t *service)
{
100091b0:	b510      	push	{r4, lr}
100091b2:	b082      	sub	sp, #8
    //DBG_LOG_DEV("[sms_ble_primary_service_define]\n\r  defining primary service\r\n- uuid: 0x%02x\r\n- handle: 0x%02x\r\n- char uuid: 0x%02x%02x\r\n- char init value: %d", (unsigned int)service->serv_uuid.uuid, service->serv_handle, service->serv_chars.uuid.uuid[1], service->serv_chars.uuid.uuid[0], service->serv_chars.value_init_len);
    return(at_ble_primary_service_define(&service->serv_uuid, &service->serv_handle, NULL, 0, &service->serv_chars, 1));
100091b4:	0001      	movs	r1, r0
100091b6:	3112      	adds	r1, #18
100091b8:	2301      	movs	r3, #1
100091ba:	9301      	str	r3, [sp, #4]
100091bc:	0003      	movs	r3, r0
100091be:	3314      	adds	r3, #20
100091c0:	9300      	str	r3, [sp, #0]
100091c2:	2300      	movs	r3, #0
100091c4:	2200      	movs	r2, #0
100091c6:	4c02      	ldr	r4, [pc, #8]	; (100091d0 <sms_ble_primary_service_define+0x20>)
100091c8:	47a0      	blx	r4
}
100091ca:	b002      	add	sp, #8
100091cc:	bd10      	pop	{r4, pc}
100091ce:	46c0      	nop			; (mov r8, r8)
100091d0:	100102d5 	.word	0x100102d5

100091d4 <sms_ble_service_init>:

void sms_ble_service_init(enum sms_ble_serv_type type, gatt_service_handler_t *service, uint8_t *value)
{
100091d4:	b5f0      	push	{r4, r5, r6, r7, lr}
100091d6:	464f      	mov	r7, r9
100091d8:	4646      	mov	r6, r8
100091da:	b4c0      	push	{r6, r7}
100091dc:	b083      	sub	sp, #12
100091de:	4694      	mov	ip, r2
    at_ble_handle_t handle = 0;
    uint8_t uuid[16] = {0};
    uint8_t char_size = 0;
    switch(type) {
100091e0:	2801      	cmp	r0, #1
100091e2:	d010      	beq.n	10009206 <sms_ble_service_init+0x32>
100091e4:	2800      	cmp	r0, #0
100091e6:	d002      	beq.n	100091ee <sms_ble_service_init+0x1a>
100091e8:	2802      	cmp	r0, #2
100091ea:	d019      	beq.n	10009220 <sms_ble_service_init+0x4c>
100091ec:	e025      	b.n	1000923a <sms_ble_service_init+0x66>
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 8) & 0xFF);
100091ee:	23bb      	movs	r3, #187	; 0xbb
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 16) & 0xFF);
100091f0:	2450      	movs	r4, #80	; 0x50
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
100091f2:	2553      	movs	r5, #83	; 0x53
        case BLE_SERV_BUTTON:
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
100091f4:	26be      	movs	r6, #190	; 0xbe
    switch(type) {
        case BLE_SERV_BUTTON:
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
100091f6:	275a      	movs	r7, #90	; 0x5a
    uint8_t char_size = 0;
    switch(type) {
        case BLE_SERV_BUTTON:
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
100091f8:	2057      	movs	r0, #87	; 0x57
    uint8_t uuid[16] = {0};
    uint8_t char_size = 0;
    switch(type) {
        case BLE_SERV_BUTTON:
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
100091fa:	221c      	movs	r2, #28
100091fc:	4690      	mov	r8, r2
        uuid[11] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3) & 0xFF);
        uuid[12] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 24) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4) & 0xFF);
        char_size = 1;
100091fe:	3a1b      	subs	r2, #27
10009200:	9201      	str	r2, [sp, #4]
    at_ble_handle_t handle = 0;
    uint8_t uuid[16] = {0};
    uint8_t char_size = 0;
    switch(type) {
        case BLE_SERV_BUTTON:
        handle = 1;
10009202:	4691      	mov	r9, r2
10009204:	e023      	b.n	1000924e <sms_ble_service_init+0x7a>
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 8) & 0xFF);
10009206:	23ee      	movs	r3, #238	; 0xee
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 16) & 0xFF);
10009208:	2450      	movs	r4, #80	; 0x50
        handle = 2;
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 24) & 0xFF);
1000920a:	2553      	movs	r5, #83	; 0x53
        case BLE_SERV_PRESSURE:
        handle = 2;
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
1000920c:	26be      	movs	r6, #190	; 0xbe
        
        case BLE_SERV_PRESSURE:
        handle = 2;
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
1000920e:	275a      	movs	r7, #90	; 0x5a
        break;
        
        case BLE_SERV_PRESSURE:
        handle = 2;
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
10009210:	2057      	movs	r0, #87	; 0x57
        char_size = 1;
        break;
        
        case BLE_SERV_PRESSURE:
        handle = 2;
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
10009212:	221c      	movs	r2, #28
10009214:	4690      	mov	r8, r2
        uuid[11] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3) & 0xFF);
        uuid[12] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 24) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4) & 0xFF);
        char_size = 8;
10009216:	3a14      	subs	r2, #20
10009218:	9201      	str	r2, [sp, #4]
        uuid[15] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4) & 0xFF);
        char_size = 1;
        break;
        
        case BLE_SERV_PRESSURE:
        handle = 2;
1000921a:	3a06      	subs	r2, #6
1000921c:	4691      	mov	r9, r2
        uuid[12] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 24) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4) & 0xFF);
        char_size = 8;
        break;
1000921e:	e016      	b.n	1000924e <sms_ble_service_init+0x7a>
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 8) & 0xFF);
10009220:	2311      	movs	r3, #17
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 16) & 0xFF);
10009222:	2450      	movs	r4, #80	; 0x50
        handle = 3;
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 24) & 0xFF);
10009224:	2553      	movs	r5, #83	; 0x53
        case BLE_SERV_MPU:
        handle = 3;
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1) & 0xFF);
10009226:	26be      	movs	r6, #190	; 0xbe
        
        case BLE_SERV_MPU:
        handle = 3;
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
10009228:	275a      	movs	r7, #90	; 0x5a
        break;
        
        case BLE_SERV_MPU:
        handle = 3;
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
1000922a:	2057      	movs	r0, #87	; 0x57
        char_size = 8;
        break;
        
        case BLE_SERV_MPU:
        handle = 3;
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
1000922c:	221c      	movs	r2, #28
1000922e:	4690      	mov	r8, r2
        uuid[11] = (uint8_t) ((SMS_MPU_SERVICE_UUID_3) & 0xFF);
        uuid[12] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 24) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4) & 0xFF);
        char_size = 20;
10009230:	3a08      	subs	r2, #8
10009232:	9201      	str	r2, [sp, #4]
        uuid[15] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4) & 0xFF);
        char_size = 8;
        break;
        
        case BLE_SERV_MPU:
        handle = 3;
10009234:	3a11      	subs	r2, #17
10009236:	4691      	mov	r9, r2
        uuid[12] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 24) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4) & 0xFF);
        char_size = 20;
        break;
10009238:	e009      	b.n	1000924e <sms_ble_service_init+0x7a>
}

void sms_ble_service_init(enum sms_ble_serv_type type, gatt_service_handler_t *service, uint8_t *value)
{
    at_ble_handle_t handle = 0;
    uint8_t uuid[16] = {0};
1000923a:	2300      	movs	r3, #0
1000923c:	2400      	movs	r4, #0
1000923e:	2500      	movs	r5, #0
10009240:	2600      	movs	r6, #0
10009242:	2700      	movs	r7, #0
10009244:	2000      	movs	r0, #0
10009246:	2200      	movs	r2, #0
10009248:	4690      	mov	r8, r2
    uint8_t char_size = 0;
1000924a:	9201      	str	r2, [sp, #4]
    return(at_ble_primary_service_define(&service->serv_uuid, &service->serv_handle, NULL, 0, &service->serv_chars, 1));
}

void sms_ble_service_init(enum sms_ble_serv_type type, gatt_service_handler_t *service, uint8_t *value)
{
    at_ble_handle_t handle = 0;
1000924c:	4691      	mov	r9, r2
        
        default:
        break;
    }
    //SMS button service characteristic
    service->serv_handle = handle;
1000924e:	464a      	mov	r2, r9
10009250:	824a      	strh	r2, [r1, #18]
    service->serv_uuid.type = AT_BLE_UUID_128;
10009252:	2202      	movs	r2, #2
10009254:	700a      	strb	r2, [r1, #0]
    service->serv_uuid.uuid[0] = uuid[0];
10009256:	4642      	mov	r2, r8
10009258:	704a      	strb	r2, [r1, #1]
    service->serv_uuid.uuid[1] = uuid[1];
1000925a:	7088      	strb	r0, [r1, #2]
    service->serv_uuid.uuid[2] = uuid[2];
1000925c:	70cf      	strb	r7, [r1, #3]
    service->serv_uuid.uuid[3] = uuid[3];
1000925e:	710e      	strb	r6, [r1, #4]
    service->serv_uuid.uuid[4] = uuid[4];
10009260:	714d      	strb	r5, [r1, #5]
    service->serv_uuid.uuid[5] = uuid[5];
10009262:	718c      	strb	r4, [r1, #6]
    service->serv_uuid.uuid[6] = uuid[6];
10009264:	71cb      	strb	r3, [r1, #7]
    service->serv_uuid.uuid[7] = uuid[7];
10009266:	720b      	strb	r3, [r1, #8]
    service->serv_uuid.uuid[8] = uuid[8];
10009268:	2300      	movs	r3, #0
1000926a:	724b      	strb	r3, [r1, #9]
    service->serv_uuid.uuid[9] = uuid[9];
1000926c:	728b      	strb	r3, [r1, #10]
    service->serv_uuid.uuid[10] = uuid[10];
1000926e:	72cb      	strb	r3, [r1, #11]
    service->serv_uuid.uuid[11] = uuid[11];
10009270:	730b      	strb	r3, [r1, #12]
    service->serv_uuid.uuid[12] = uuid[12];
10009272:	734b      	strb	r3, [r1, #13]
    service->serv_uuid.uuid[13] = uuid[13];
10009274:	738b      	strb	r3, [r1, #14]
    service->serv_uuid.uuid[14] = uuid[14];
10009276:	73cb      	strb	r3, [r1, #15]
    service->serv_uuid.uuid[15] = uuid[15];
10009278:	740b      	strb	r3, [r1, #16]
    
    #   if SMS_SENDING_WITH_ACK == true
    service->serv_chars.properties = (AT_BLE_CHAR_READ | AT_BLE_CHAR_INDICATE); // properties
    #   else
    service->serv_chars.properties = (AT_BLE_CHAR_READ | AT_BLE_CHAR_NOTIFY); // properties
1000927a:	2412      	movs	r4, #18
1000927c:	850c      	strh	r4, [r1, #40]	; 0x28
    #   endif
    service->serv_chars.init_value = value; // value
1000927e:	4662      	mov	r2, ip
10009280:	62ca      	str	r2, [r1, #44]	; 0x2c
    service->serv_chars.value_init_len = char_size * sizeof(uint8_t);
10009282:	466a      	mov	r2, sp
10009284:	8892      	ldrh	r2, [r2, #4]
10009286:	860a      	strh	r2, [r1, #48]	; 0x30
    service->serv_chars.value_max_len = char_size * sizeof(uint8_t);
10009288:	864a      	strh	r2, [r1, #50]	; 0x32
    service->serv_chars.value_permissions = (AT_BLE_ATTR_READABLE_NO_AUTHN_NO_AUTHR | AT_BLE_ATTR_WRITABLE_NO_AUTHN_NO_AUTHR); // permissions
1000928a:	2011      	movs	r0, #17
1000928c:	2234      	movs	r2, #52	; 0x34
1000928e:	5488      	strb	r0, [r1, r2]
    service->serv_chars.user_desc = NULL; //user defined name
10009290:	638b      	str	r3, [r1, #56]	; 0x38
    service->serv_chars.user_desc_len = 0;
10009292:	2200      	movs	r2, #0
10009294:	878b      	strh	r3, [r1, #60]	; 0x3c
    service->serv_chars.user_desc_max_len = 0;
10009296:	87cb      	strh	r3, [r1, #62]	; 0x3e
    service->serv_chars.user_desc_permissions = AT_BLE_ATTR_NO_PERMISSIONS; // user description permissions
10009298:	3033      	adds	r0, #51	; 0x33
1000929a:	540a      	strb	r2, [r1, r0]
    service->serv_chars.client_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS; // client config permissions
1000929c:	3001      	adds	r0, #1
1000929e:	540a      	strb	r2, [r1, r0]
    service->serv_chars.server_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS; // server config permissions
100092a0:	3001      	adds	r0, #1
100092a2:	540a      	strb	r2, [r1, r0]
    service->serv_chars.user_desc_handle = 0; // user description handles
100092a4:	2248      	movs	r2, #72	; 0x48
100092a6:	528b      	strh	r3, [r1, r2]
    service->serv_chars.client_config_handle = 0; // client config handles
100092a8:	3202      	adds	r2, #2
100092aa:	528b      	strh	r3, [r1, r2]
    service->serv_chars.server_config_handle = 0; // server config handles
100092ac:	3202      	adds	r2, #2
100092ae:	528b      	strh	r3, [r1, r2]
    
    service->serv_chars.presentation_format = NULL; //presentation format
100092b0:	640b      	str	r3, [r1, #64]	; 0x40
100092b2:	b003      	add	sp, #12
100092b4:	bc0c      	pop	{r2, r3}
100092b6:	4690      	mov	r8, r2
100092b8:	4699      	mov	r9, r3
100092ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

100092bc <sms_button_bt0_callback>:
        gpio_disable_callback(button_instance.btn1.gpio_pin);
    }
}
/* Callbacks --> sending interrupt message to platform */
void sms_button_bt0_callback(void)
{
100092bc:	b510      	push	{r4, lr}
    button_instance.btn0.new_int = true;
100092be:	4b05      	ldr	r3, [pc, #20]	; (100092d4 <sms_button_bt0_callback+0x18>)
100092c0:	2201      	movs	r2, #1
100092c2:	70da      	strb	r2, [r3, #3]
    send_plf_int_msg_ind(button_instance.btn0.gpio_pin, GPIO_CALLBACK_RISING, NULL, 0);
100092c4:	7858      	ldrb	r0, [r3, #1]
100092c6:	2300      	movs	r3, #0
100092c8:	2200      	movs	r2, #0
100092ca:	2102      	movs	r1, #2
100092cc:	4c02      	ldr	r4, [pc, #8]	; (100092d8 <sms_button_bt0_callback+0x1c>)
100092ce:	47a0      	blx	r4
}
100092d0:	bd10      	pop	{r4, pc}
100092d2:	46c0      	nop			; (mov r8, r8)
100092d4:	1001a42c 	.word	0x1001a42c
100092d8:	1000e5e9 	.word	0x1000e5e9

100092dc <sms_button_bt1_callback>:
void sms_button_bt1_callback(void)
{
100092dc:	b510      	push	{r4, lr}
	button_instance.btn1.new_int = true;
100092de:	4b05      	ldr	r3, [pc, #20]	; (100092f4 <sms_button_bt1_callback+0x18>)
100092e0:	2201      	movs	r2, #1
100092e2:	725a      	strb	r2, [r3, #9]
    send_plf_int_msg_ind(button_instance.btn1.gpio_pin, GPIO_CALLBACK_RISING, NULL, 0);
100092e4:	79d8      	ldrb	r0, [r3, #7]
100092e6:	2300      	movs	r3, #0
100092e8:	2200      	movs	r2, #0
100092ea:	2102      	movs	r1, #2
100092ec:	4c02      	ldr	r4, [pc, #8]	; (100092f8 <sms_button_bt1_callback+0x1c>)
100092ee:	47a0      	blx	r4
}
100092f0:	bd10      	pop	{r4, pc}
100092f2:	46c0      	nop			; (mov r8, r8)
100092f4:	1001a42c 	.word	0x1001a42c
100092f8:	1000e5e9 	.word	0x1000e5e9

100092fc <sms_button_init_variables>:
}

/* Initialize all button-related variables */
void sms_button_init_variables(void)
{
	button_instance.current_state = BUTTON_STATE_NONE;
100092fc:	4b08      	ldr	r3, [pc, #32]	; (10009320 <sms_button_init_variables+0x24>)
100092fe:	2200      	movs	r2, #0
10009300:	735a      	strb	r2, [r3, #13]
	button_instance.btn0.id = SMS_BTN_0;
10009302:	701a      	strb	r2, [r3, #0]
	button_instance.btn0.gpio_pin = SMS_BTN_0_PIN;
10009304:	211f      	movs	r1, #31
10009306:	7059      	strb	r1, [r3, #1]
	button_instance.btn0.int_enabled = true;
10009308:	391e      	subs	r1, #30
1000930a:	7099      	strb	r1, [r3, #2]
	button_instance.btn0.new_int = false;
1000930c:	70da      	strb	r2, [r3, #3]
	button_instance.btn0.char_value = 0;
1000930e:	715a      	strb	r2, [r3, #5]
	button_instance.btn1.id = SMS_BTN_1;
10009310:	7199      	strb	r1, [r3, #6]
	button_instance.btn1.gpio_pin = SMS_BTN_1_PIN;
10009312:	201d      	movs	r0, #29
10009314:	71d8      	strb	r0, [r3, #7]
	button_instance.btn1.int_enabled = true;
10009316:	7219      	strb	r1, [r3, #8]
	button_instance.btn1.new_int = false;
10009318:	725a      	strb	r2, [r3, #9]
	button_instance.btn1.char_value = 0;
1000931a:	72da      	strb	r2, [r3, #11]
}
1000931c:	4770      	bx	lr
1000931e:	46c0      	nop			; (mov r8, r8)
10009320:	1001a42c 	.word	0x1001a42c

10009324 <sms_button_gpio_init>:

/* Initialize gpio for button inputs */
void sms_button_gpio_init(void)
{
10009324:	b5f0      	push	{r4, r5, r6, r7, lr}
10009326:	4657      	mov	r7, sl
10009328:	464e      	mov	r6, r9
1000932a:	4645      	mov	r5, r8
1000932c:	b4e0      	push	{r5, r6, r7}
1000932e:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;

    /* Button0 @ PIN_AO_GPIO_0 */
    gpio_get_config_defaults(&config_gpio_pin);
10009330:	ac01      	add	r4, sp, #4
10009332:	0020      	movs	r0, r4
10009334:	4b1d      	ldr	r3, [pc, #116]	; (100093ac <sms_button_gpio_init+0x88>)
10009336:	469a      	mov	sl, r3
10009338:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
1000933a:	2300      	movs	r3, #0
1000933c:	4699      	mov	r9, r3
1000933e:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
10009340:	2302      	movs	r3, #2
10009342:	4698      	mov	r8, r3
10009344:	7063      	strb	r3, [r4, #1]
    config_gpio_pin.aon_wakeup = true;
10009346:	2701      	movs	r7, #1
10009348:	70e7      	strb	r7, [r4, #3]
    if(gpio_pin_set_config(button_instance.btn0.gpio_pin, &config_gpio_pin) != STATUS_OK) {
1000934a:	4e19      	ldr	r6, [pc, #100]	; (100093b0 <sms_button_gpio_init+0x8c>)
1000934c:	7870      	ldrb	r0, [r6, #1]
1000934e:	0021      	movs	r1, r4
10009350:	4d18      	ldr	r5, [pc, #96]	; (100093b4 <sms_button_gpio_init+0x90>)
10009352:	47a8      	blx	r5
        DBG_LOG_DEV("[sms_button_configure]\tproblem while setting up button0");
    }
    
    /* Button1 @ PIN_AO_GPIO_2 */
    gpio_get_config_defaults(&config_gpio_pin);
10009354:	0020      	movs	r0, r4
10009356:	47d0      	blx	sl
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
10009358:	464b      	mov	r3, r9
1000935a:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
1000935c:	4643      	mov	r3, r8
1000935e:	7063      	strb	r3, [r4, #1]
    config_gpio_pin.aon_wakeup = true;
10009360:	70e7      	strb	r7, [r4, #3]
    if(gpio_pin_set_config(button_instance.btn1.gpio_pin, &config_gpio_pin) != STATUS_OK) {
10009362:	79f0      	ldrb	r0, [r6, #7]
10009364:	0021      	movs	r1, r4
10009366:	47a8      	blx	r5
10009368:	2800      	cmp	r0, #0
1000936a:	d005      	beq.n	10009378 <sms_button_gpio_init+0x54>
        DBG_LOG("[sms_button_configure]\tProblem while setting up button1");
1000936c:	4812      	ldr	r0, [pc, #72]	; (100093b8 <sms_button_gpio_init+0x94>)
1000936e:	4b13      	ldr	r3, [pc, #76]	; (100093bc <sms_button_gpio_init+0x98>)
10009370:	4798      	blx	r3
10009372:	4813      	ldr	r0, [pc, #76]	; (100093c0 <sms_button_gpio_init+0x9c>)
10009374:	4b13      	ldr	r3, [pc, #76]	; (100093c4 <sms_button_gpio_init+0xa0>)
10009376:	4798      	blx	r3
    }

    /* Button 0 on SAMB11 XPLAINED */
    gpio_get_config_defaults(&config_gpio_pin);
10009378:	ac01      	add	r4, sp, #4
1000937a:	0020      	movs	r0, r4
1000937c:	4b0b      	ldr	r3, [pc, #44]	; (100093ac <sms_button_gpio_init+0x88>)
1000937e:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
10009380:	2300      	movs	r3, #0
10009382:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_NONE;
10009384:	7063      	strb	r3, [r4, #1]
    if(gpio_pin_set_config(BUTTON_0_PIN, &config_gpio_pin) != STATUS_OK) {
10009386:	0021      	movs	r1, r4
10009388:	2017      	movs	r0, #23
1000938a:	4b0a      	ldr	r3, [pc, #40]	; (100093b4 <sms_button_gpio_init+0x90>)
1000938c:	4798      	blx	r3
1000938e:	2800      	cmp	r0, #0
10009390:	d005      	beq.n	1000939e <sms_button_gpio_init+0x7a>
        DBG_LOG("[sms_button_configure]\tProblem while setting up XPLAINED user button");
10009392:	4809      	ldr	r0, [pc, #36]	; (100093b8 <sms_button_gpio_init+0x94>)
10009394:	4b09      	ldr	r3, [pc, #36]	; (100093bc <sms_button_gpio_init+0x98>)
10009396:	4798      	blx	r3
10009398:	480b      	ldr	r0, [pc, #44]	; (100093c8 <sms_button_gpio_init+0xa4>)
1000939a:	4b0a      	ldr	r3, [pc, #40]	; (100093c4 <sms_button_gpio_init+0xa0>)
1000939c:	4798      	blx	r3
    }
}
1000939e:	b002      	add	sp, #8
100093a0:	bc1c      	pop	{r2, r3, r4}
100093a2:	4690      	mov	r8, r2
100093a4:	4699      	mov	r9, r3
100093a6:	46a2      	mov	sl, r4
100093a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100093aa:	46c0      	nop			; (mov r8, r8)
100093ac:	1000b6bd 	.word	0x1000b6bd
100093b0:	1001a42c 	.word	0x1001a42c
100093b4:	1000b6cd 	.word	0x1000b6cd
100093b8:	100177b0 	.word	0x100177b0
100093bc:	10016871 	.word	0x10016871
100093c0:	100178f8 	.word	0x100178f8
100093c4:	10016751 	.word	0x10016751
100093c8:	10017930 	.word	0x10017930

100093cc <sms_button_register_callbacks>:

/* Register button input callbacks */
void sms_button_register_callbacks(void)
{
100093cc:	b570      	push	{r4, r5, r6, lr}
    /* Button0 callback */
    gpio_register_callback(button_instance.btn0.gpio_pin, sms_button_bt0_callback, GPIO_CALLBACK_RISING);
100093ce:	4d05      	ldr	r5, [pc, #20]	; (100093e4 <sms_button_register_callbacks+0x18>)
100093d0:	7868      	ldrb	r0, [r5, #1]
100093d2:	2202      	movs	r2, #2
100093d4:	4904      	ldr	r1, [pc, #16]	; (100093e8 <sms_button_register_callbacks+0x1c>)
100093d6:	4c05      	ldr	r4, [pc, #20]	; (100093ec <sms_button_register_callbacks+0x20>)
100093d8:	47a0      	blx	r4
    //gpio_enable_callback(SMS_BTN_0_PIN);
    
    /* Button1 callback */
    gpio_register_callback(button_instance.btn1.gpio_pin, sms_button_bt1_callback, GPIO_CALLBACK_RISING);
100093da:	79e8      	ldrb	r0, [r5, #7]
100093dc:	2202      	movs	r2, #2
100093de:	4904      	ldr	r1, [pc, #16]	; (100093f0 <sms_button_register_callbacks+0x24>)
100093e0:	47a0      	blx	r4
    //gpio_enable_callback(SMS_BTN_1_PIN);
    
    /* User button callback */
}
100093e2:	bd70      	pop	{r4, r5, r6, pc}
100093e4:	1001a42c 	.word	0x1001a42c
100093e8:	100092bd 	.word	0x100092bd
100093ec:	1000bafd 	.word	0x1000bafd
100093f0:	100092dd 	.word	0x100092dd

100093f4 <sms_button_get_state>:

/* Get current buttons state */
enum sms_button_state sms_button_get_state(void)
{
100093f4:	b570      	push	{r4, r5, r6, lr}
    bool b0 = gpio_pin_get_input_level(SMS_BTN_0_PIN);
100093f6:	201f      	movs	r0, #31
100093f8:	4c08      	ldr	r4, [pc, #32]	; (1000941c <sms_button_get_state+0x28>)
100093fa:	47a0      	blx	r4
100093fc:	0005      	movs	r5, r0
    bool b1 = gpio_pin_get_input_level(SMS_BTN_1_PIN);
100093fe:	201d      	movs	r0, #29
10009400:	47a0      	blx	r4
    DBG_LOG_DEV("[sms_button_get_state]\t\tButton state: %d %d", b1, b0);
    if(b0 && b1) return BUTTON_STATE_BOTH;
10009402:	2d00      	cmp	r5, #0
10009404:	d004      	beq.n	10009410 <sms_button_get_state+0x1c>
10009406:	2303      	movs	r3, #3
10009408:	2800      	cmp	r0, #0
1000940a:	d104      	bne.n	10009416 <sms_button_get_state+0x22>
    else if(b0 && !b1) return BUTTON_STATE_B0;
1000940c:	3b02      	subs	r3, #2
1000940e:	e002      	b.n	10009416 <sms_button_get_state+0x22>
    else if(!b0 && b1) return BUTTON_STATE_B1;
    else return BUTTON_STATE_NONE;
10009410:	1e43      	subs	r3, r0, #1
10009412:	4198      	sbcs	r0, r3
10009414:	0043      	lsls	r3, r0, #1
}
10009416:	0018      	movs	r0, r3
10009418:	bd70      	pop	{r4, r5, r6, pc}
1000941a:	46c0      	nop			; (mov r8, r8)
1000941c:	1000b885 	.word	0x1000b885

10009420 <sms_button_fn>:

/************************************************************************/
/* Callback functions --> doing things                                  */
/************************************************************************/
int sms_button_fn(enum sms_btn_ids btn)
{
10009420:	b570      	push	{r4, r5, r6, lr}
10009422:	0005      	movs	r5, r0
    button_instance.previous_state = button_instance.current_state;
10009424:	4c47      	ldr	r4, [pc, #284]	; (10009544 <sms_button_fn+0x124>)
10009426:	7b63      	ldrb	r3, [r4, #13]
10009428:	7323      	strb	r3, [r4, #12]
    button_instance.current_state = sms_button_get_state();
1000942a:	4b47      	ldr	r3, [pc, #284]	; (10009548 <sms_button_fn+0x128>)
1000942c:	4798      	blx	r3
1000942e:	7360      	strb	r0, [r4, #13]
    
    if(btn == SMS_BTN_0) sms_monitor_get_states("[sms_button_fn]-0");
10009430:	2d00      	cmp	r5, #0
10009432:	d103      	bne.n	1000943c <sms_button_fn+0x1c>
10009434:	4845      	ldr	r0, [pc, #276]	; (1000954c <sms_button_fn+0x12c>)
10009436:	4b46      	ldr	r3, [pc, #280]	; (10009550 <sms_button_fn+0x130>)
10009438:	4798      	blx	r3
1000943a:	e004      	b.n	10009446 <sms_button_fn+0x26>
    else if(btn == SMS_BTN_1) sms_monitor_get_states("[sms_button_fn]-1");
1000943c:	2d01      	cmp	r5, #1
1000943e:	d175      	bne.n	1000952c <sms_button_fn+0x10c>
10009440:	4844      	ldr	r0, [pc, #272]	; (10009554 <sms_button_fn+0x134>)
10009442:	4b43      	ldr	r3, [pc, #268]	; (10009550 <sms_button_fn+0x130>)
10009444:	4798      	blx	r3
    else return -1;
    
    switch(button_instance.current_state) {
10009446:	4b3f      	ldr	r3, [pc, #252]	; (10009544 <sms_button_fn+0x124>)
10009448:	7b5b      	ldrb	r3, [r3, #13]
1000944a:	2b01      	cmp	r3, #1
1000944c:	d006      	beq.n	1000945c <sms_button_fn+0x3c>
1000944e:	2b00      	cmp	r3, #0
10009450:	d067      	beq.n	10009522 <sms_button_fn+0x102>
10009452:	2b02      	cmp	r3, #2
10009454:	d024      	beq.n	100094a0 <sms_button_fn+0x80>
10009456:	2b03      	cmp	r3, #3
10009458:	d043      	beq.n	100094e2 <sms_button_fn+0xc2>
1000945a:	e06a      	b.n	10009532 <sms_button_fn+0x112>
        // --- current state ---
        case BUTTON_STATE_B0:
        switch(ble_instance.current_state) {
1000945c:	4b3e      	ldr	r3, [pc, #248]	; (10009558 <sms_button_fn+0x138>)
1000945e:	781b      	ldrb	r3, [r3, #0]
10009460:	b2db      	uxtb	r3, r3
10009462:	2b00      	cmp	r3, #0
10009464:	d003      	beq.n	1000946e <sms_button_fn+0x4e>
10009466:	3b22      	subs	r3, #34	; 0x22
10009468:	2b01      	cmp	r3, #1
1000946a:	d864      	bhi.n	10009536 <sms_button_fn+0x116>
1000946c:	e00e      	b.n	1000948c <sms_button_fn+0x6c>
            case BLE_STATE_POWEROFF:
            timer1_current_mode = TIMER1_MODE_STARTUP;
1000946e:	2201      	movs	r2, #1
10009470:	4b3a      	ldr	r3, [pc, #232]	; (1000955c <sms_button_fn+0x13c>)
10009472:	701a      	strb	r2, [r3, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
10009474:	2300      	movs	r3, #0
10009476:	4a3a      	ldr	r2, [pc, #232]	; (10009560 <sms_button_fn+0x140>)
10009478:	7013      	strb	r3, [r2, #0]
            sms_btn_cnt = 0;
1000947a:	4a3a      	ldr	r2, [pc, #232]	; (10009564 <sms_button_fn+0x144>)
1000947c:	7013      	strb	r3, [r2, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
1000947e:	2200      	movs	r2, #0
10009480:	21fa      	movs	r1, #250	; 0xfa
10009482:	2001      	movs	r0, #1
10009484:	4b38      	ldr	r3, [pc, #224]	; (10009568 <sms_button_fn+0x148>)
10009486:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
10009488:	2000      	movs	r0, #0
            timer1_current_mode = TIMER1_MODE_STARTUP;
            timer2_current_mode = TIMER2_MODE_NONE;
            sms_btn_cnt = 0;
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
            break;
1000948a:	e059      	b.n	10009540 <sms_button_fn+0x120>
            case BLE_STATE_INDICATING:
            //if(pressure_device.state == PRESSURE_STATE_STDBY) {
                //DBG_LOG_DEV("[sms_button_fn]\t\tStarting sensors (B0)");
                //sms_sensors_interrupt_toggle(false, true);
            //}
            timer1_current_mode = TIMER1_MODE_NONE;
1000948c:	2300      	movs	r3, #0
1000948e:	4a33      	ldr	r2, [pc, #204]	; (1000955c <sms_button_fn+0x13c>)
10009490:	7013      	strb	r3, [r2, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
10009492:	4a33      	ldr	r2, [pc, #204]	; (10009560 <sms_button_fn+0x140>)
10009494:	7013      	strb	r3, [r2, #0]
			sms_ble_send_characteristic(BLE_CHAR_BTN);
10009496:	2000      	movs	r0, #0
10009498:	4b34      	ldr	r3, [pc, #208]	; (1000956c <sms_button_fn+0x14c>)
1000949a:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000949c:	2000      	movs	r0, #0
                //sms_sensors_interrupt_toggle(false, true);
            //}
            timer1_current_mode = TIMER1_MODE_NONE;
            timer2_current_mode = TIMER2_MODE_NONE;
			sms_ble_send_characteristic(BLE_CHAR_BTN);
            break;
1000949e:	e04f      	b.n	10009540 <sms_button_fn+0x120>
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        break;
        
        // --- current state ---
        case BUTTON_STATE_B1:
        switch(ble_instance.current_state) {
100094a0:	4b2d      	ldr	r3, [pc, #180]	; (10009558 <sms_button_fn+0x138>)
100094a2:	781b      	ldrb	r3, [r3, #0]
100094a4:	b2db      	uxtb	r3, r3
100094a6:	2b00      	cmp	r3, #0
100094a8:	d002      	beq.n	100094b0 <sms_button_fn+0x90>
100094aa:	2b22      	cmp	r3, #34	; 0x22
100094ac:	d00f      	beq.n	100094ce <sms_button_fn+0xae>
100094ae:	e045      	b.n	1000953c <sms_button_fn+0x11c>
            case BLE_STATE_POWEROFF:
            timer1_current_mode = TIMER1_MODE_STARTUP;
100094b0:	2201      	movs	r2, #1
100094b2:	4b2a      	ldr	r3, [pc, #168]	; (1000955c <sms_button_fn+0x13c>)
100094b4:	701a      	strb	r2, [r3, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
100094b6:	2300      	movs	r3, #0
100094b8:	4a29      	ldr	r2, [pc, #164]	; (10009560 <sms_button_fn+0x140>)
100094ba:	7013      	strb	r3, [r2, #0]
            sms_btn_cnt = 0;
100094bc:	4a29      	ldr	r2, [pc, #164]	; (10009564 <sms_button_fn+0x144>)
100094be:	7013      	strb	r3, [r2, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
100094c0:	2200      	movs	r2, #0
100094c2:	21fa      	movs	r1, #250	; 0xfa
100094c4:	2001      	movs	r0, #1
100094c6:	4b28      	ldr	r3, [pc, #160]	; (10009568 <sms_button_fn+0x148>)
100094c8:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
100094ca:	2000      	movs	r0, #0
            timer1_current_mode = TIMER1_MODE_STARTUP;
            timer2_current_mode = TIMER2_MODE_NONE;
            sms_btn_cnt = 0;
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
            break;
100094cc:	e038      	b.n	10009540 <sms_button_fn+0x120>
            case BLE_STATE_PAIRED:
            //if(pressure_device.state == PRESSURE_STATE_STDBY) {
                //DBG_LOG_DEV("[sms_button_fn]\t\tStarting sensors (B1)");
                //sms_sensors_interrupt_toggle(false, true);
            //}
            timer1_current_mode = TIMER1_MODE_NONE;
100094ce:	2300      	movs	r3, #0
100094d0:	4a22      	ldr	r2, [pc, #136]	; (1000955c <sms_button_fn+0x13c>)
100094d2:	7013      	strb	r3, [r2, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
100094d4:	4a22      	ldr	r2, [pc, #136]	; (10009560 <sms_button_fn+0x140>)
100094d6:	7013      	strb	r3, [r2, #0]
            //sms_ble_ind_retry = 0;
            sms_ble_send_characteristic(BLE_CHAR_BTN);
100094d8:	2000      	movs	r0, #0
100094da:	4b24      	ldr	r3, [pc, #144]	; (1000956c <sms_button_fn+0x14c>)
100094dc:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
100094de:	2000      	movs	r0, #0
            //}
            timer1_current_mode = TIMER1_MODE_NONE;
            timer2_current_mode = TIMER2_MODE_NONE;
            //sms_ble_ind_retry = 0;
            sms_ble_send_characteristic(BLE_CHAR_BTN);
            break;
100094e0:	e02e      	b.n	10009540 <sms_button_fn+0x120>
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        break;
        
        // --- current state ---
        case BUTTON_STATE_BOTH:
        if(ble_instance.current_state == BLE_STATE_POWEROFF) {
100094e2:	4b1d      	ldr	r3, [pc, #116]	; (10009558 <sms_button_fn+0x138>)
100094e4:	781b      	ldrb	r3, [r3, #0]
100094e6:	2b00      	cmp	r3, #0
100094e8:	d108      	bne.n	100094fc <sms_button_fn+0xdc>
            timer1_current_mode = TIMER1_MODE_NONE;
100094ea:	4a1c      	ldr	r2, [pc, #112]	; (1000955c <sms_button_fn+0x13c>)
100094ec:	7013      	strb	r3, [r2, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
100094ee:	4a1c      	ldr	r2, [pc, #112]	; (10009560 <sms_button_fn+0x140>)
100094f0:	7013      	strb	r3, [r2, #0]
            ulp_ready = true;
100094f2:	2201      	movs	r2, #1
100094f4:	4b1e      	ldr	r3, [pc, #120]	; (10009570 <sms_button_fn+0x150>)
100094f6:	701a      	strb	r2, [r3, #0]
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
100094f8:	2000      	movs	r0, #0
100094fa:	e021      	b.n	10009540 <sms_button_fn+0x120>
                //pressure_device.state = PRESSURE_STATE_STDBY;
            //}
            //else {
                //pressure_device.state = PRESSURE_STATE_OFF;
            //}
            sms_sensors_interrupt_toggle(false, false);
100094fc:	2100      	movs	r1, #0
100094fe:	2000      	movs	r0, #0
10009500:	4b1c      	ldr	r3, [pc, #112]	; (10009574 <sms_button_fn+0x154>)
10009502:	4798      	blx	r3
            timer1_current_mode = TIMER1_MODE_SHUTDOWN;
10009504:	2202      	movs	r2, #2
10009506:	4b15      	ldr	r3, [pc, #84]	; (1000955c <sms_button_fn+0x13c>)
10009508:	701a      	strb	r2, [r3, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
1000950a:	2300      	movs	r3, #0
1000950c:	4a14      	ldr	r2, [pc, #80]	; (10009560 <sms_button_fn+0x140>)
1000950e:	7013      	strb	r3, [r2, #0]
            sms_btn_cnt = 0;
10009510:	4a14      	ldr	r2, [pc, #80]	; (10009564 <sms_button_fn+0x144>)
10009512:	7013      	strb	r3, [r2, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_SHTDWN_MS, DUALTIMER_TIMER1);
10009514:	2200      	movs	r2, #0
10009516:	21fa      	movs	r1, #250	; 0xfa
10009518:	2001      	movs	r0, #1
1000951a:	4b13      	ldr	r3, [pc, #76]	; (10009568 <sms_button_fn+0x148>)
1000951c:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000951e:	2000      	movs	r0, #0
10009520:	e00e      	b.n	10009540 <sms_button_fn+0x120>
        }
        break;
        
        // --- current state ---
        case BUTTON_STATE_NONE:
        ulp_ready = true;
10009522:	2201      	movs	r2, #1
10009524:	4b12      	ldr	r3, [pc, #72]	; (10009570 <sms_button_fn+0x150>)
10009526:	701a      	strb	r2, [r3, #0]
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
10009528:	2000      	movs	r0, #0
        // --- current state ---
        case BUTTON_STATE_NONE:
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
1000952a:	e009      	b.n	10009540 <sms_button_fn+0x120>
    button_instance.previous_state = button_instance.current_state;
    button_instance.current_state = sms_button_get_state();
    
    if(btn == SMS_BTN_0) sms_monitor_get_states("[sms_button_fn]-0");
    else if(btn == SMS_BTN_1) sms_monitor_get_states("[sms_button_fn]-1");
    else return -1;
1000952c:	2001      	movs	r0, #1
1000952e:	4240      	negs	r0, r0
10009530:	e006      	b.n	10009540 <sms_button_fn+0x120>
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
10009532:	2000      	movs	r0, #0
10009534:	e004      	b.n	10009540 <sms_button_fn+0x120>
            case BLE_STATE_DISCONNECTED:
            case BLE_STATE_ADVERTISING:
            case BLE_STATE_CONNECTED:
            default:
            DBG_LOG_DEV("[sms_button_fn]\t\t\tNot used states...");
            return -1;
10009536:	2001      	movs	r0, #1
10009538:	4240      	negs	r0, r0
1000953a:	e001      	b.n	10009540 <sms_button_fn+0x120>
            sms_ble_send_characteristic(BLE_CHAR_BTN);
            break;
            
            case BLE_STATE_INDICATING:
            DBG_LOG_DEV("[sms_button_fn]\tStill indicating...");
            return -1;
1000953c:	2001      	movs	r0, #1
1000953e:	4240      	negs	r0, r0
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
}
10009540:	bd70      	pop	{r4, r5, r6, pc}
10009542:	46c0      	nop			; (mov r8, r8)
10009544:	1001a42c 	.word	0x1001a42c
10009548:	100093f5 	.word	0x100093f5
1000954c:	10017978 	.word	0x10017978
10009550:	1000968d 	.word	0x1000968d
10009554:	1001798c 	.word	0x1001798c
10009558:	1001a428 	.word	0x1001a428
1000955c:	1001a41c 	.word	0x1001a41c
10009560:	1001a54b 	.word	0x1001a54b
10009564:	1001a646 	.word	0x1001a646
10009568:	1000ac59 	.word	0x1000ac59
1000956c:	10009029 	.word	0x10009029
10009570:	1001a425 	.word	0x1001a425
10009574:	1000a9e9 	.word	0x1000a9e9

10009578 <sms_button_toggle_callback>:
    else return BUTTON_STATE_NONE;
}

/* En- or disable button interrupts */
void sms_button_toggle_callback(enum sms_btn_int_tog tog0, enum sms_btn_int_tog tog1)
{
10009578:	b510      	push	{r4, lr}
1000957a:	000c      	movs	r4, r1
    if(tog0 == SMS_BTN_INT_ENABLE) {
1000957c:	2800      	cmp	r0, #0
1000957e:	d104      	bne.n	1000958a <sms_button_toggle_callback+0x12>
        gpio_enable_callback(button_instance.btn0.gpio_pin);
10009580:	4b0c      	ldr	r3, [pc, #48]	; (100095b4 <sms_button_toggle_callback+0x3c>)
10009582:	7858      	ldrb	r0, [r3, #1]
10009584:	4b0c      	ldr	r3, [pc, #48]	; (100095b8 <sms_button_toggle_callback+0x40>)
10009586:	4798      	blx	r3
10009588:	e005      	b.n	10009596 <sms_button_toggle_callback+0x1e>
    }
    else if(tog0 == SMS_BTN_INT_DISABLE) {
1000958a:	2801      	cmp	r0, #1
1000958c:	d103      	bne.n	10009596 <sms_button_toggle_callback+0x1e>
        gpio_disable_callback(button_instance.btn0.gpio_pin);
1000958e:	4b09      	ldr	r3, [pc, #36]	; (100095b4 <sms_button_toggle_callback+0x3c>)
10009590:	7858      	ldrb	r0, [r3, #1]
10009592:	4b0a      	ldr	r3, [pc, #40]	; (100095bc <sms_button_toggle_callback+0x44>)
10009594:	4798      	blx	r3
    }
    
    if(tog1 == SMS_BTN_INT_ENABLE) {
10009596:	2c00      	cmp	r4, #0
10009598:	d104      	bne.n	100095a4 <sms_button_toggle_callback+0x2c>
        gpio_enable_callback(button_instance.btn1.gpio_pin);
1000959a:	4b06      	ldr	r3, [pc, #24]	; (100095b4 <sms_button_toggle_callback+0x3c>)
1000959c:	79d8      	ldrb	r0, [r3, #7]
1000959e:	4b06      	ldr	r3, [pc, #24]	; (100095b8 <sms_button_toggle_callback+0x40>)
100095a0:	4798      	blx	r3
100095a2:	e005      	b.n	100095b0 <sms_button_toggle_callback+0x38>
    }
    else if(tog1 == SMS_BTN_INT_DISABLE) {
100095a4:	2c01      	cmp	r4, #1
100095a6:	d103      	bne.n	100095b0 <sms_button_toggle_callback+0x38>
        gpio_disable_callback(button_instance.btn1.gpio_pin);
100095a8:	4b02      	ldr	r3, [pc, #8]	; (100095b4 <sms_button_toggle_callback+0x3c>)
100095aa:	79d8      	ldrb	r0, [r3, #7]
100095ac:	4b03      	ldr	r3, [pc, #12]	; (100095bc <sms_button_toggle_callback+0x44>)
100095ae:	4798      	blx	r3
    }
}
100095b0:	bd10      	pop	{r4, pc}
100095b2:	46c0      	nop			; (mov r8, r8)
100095b4:	1001a42c 	.word	0x1001a42c
100095b8:	1000bbcd 	.word	0x1000bbcd
100095bc:	1000bc29 	.word	0x1000bc29

100095c0 <sms_button_define_services>:
    send_plf_int_msg_ind(button_instance.btn1.gpio_pin, GPIO_CALLBACK_RISING, NULL, 0);
}

/* Define BLE service for buttons */
void sms_button_define_services(void)
{
100095c0:	b510      	push	{r4, lr}
100095c2:	b082      	sub	sp, #8
    at_ble_status_t status;
    uint8_t init_value = 0;
100095c4:	466b      	mov	r3, sp
100095c6:	1dda      	adds	r2, r3, #7
100095c8:	2300      	movs	r3, #0
100095ca:	7013      	strb	r3, [r2, #0]
    sms_ble_service_init(BLE_SERV_BUTTON, &button_instance.service_handler, &init_value);
100095cc:	4c09      	ldr	r4, [pc, #36]	; (100095f4 <sms_button_define_services+0x34>)
100095ce:	0021      	movs	r1, r4
100095d0:	2000      	movs	r0, #0
100095d2:	4b09      	ldr	r3, [pc, #36]	; (100095f8 <sms_button_define_services+0x38>)
100095d4:	4798      	blx	r3
    if((status = sms_ble_primary_service_define(&button_instance.service_handler)) != AT_BLE_SUCCESS) {
100095d6:	0020      	movs	r0, r4
100095d8:	4b08      	ldr	r3, [pc, #32]	; (100095fc <sms_button_define_services+0x3c>)
100095da:	4798      	blx	r3
100095dc:	1e04      	subs	r4, r0, #0
100095de:	d006      	beq.n	100095ee <sms_button_define_services+0x2e>
        DBG_LOG("[sms_button_define_services]\tServices defining failed, reason 0x%x", status);
100095e0:	4807      	ldr	r0, [pc, #28]	; (10009600 <sms_button_define_services+0x40>)
100095e2:	4b08      	ldr	r3, [pc, #32]	; (10009604 <sms_button_define_services+0x44>)
100095e4:	4798      	blx	r3
100095e6:	0021      	movs	r1, r4
100095e8:	4807      	ldr	r0, [pc, #28]	; (10009608 <sms_button_define_services+0x48>)
100095ea:	4b08      	ldr	r3, [pc, #32]	; (1000960c <sms_button_define_services+0x4c>)
100095ec:	4798      	blx	r3
    }
    else {
        DBG_LOG_DEV("[sms_button_define_services]\tServices defined, SMS button handle: %d", button_instance.service_handler.serv_handle);
    }
100095ee:	b002      	add	sp, #8
100095f0:	bd10      	pop	{r4, pc}
100095f2:	46c0      	nop			; (mov r8, r8)
100095f4:	1001a43c 	.word	0x1001a43c
100095f8:	100091d5 	.word	0x100091d5
100095fc:	100091b1 	.word	0x100091b1
10009600:	100177b0 	.word	0x100177b0
10009604:	10016871 	.word	0x10016871
10009608:	100179a0 	.word	0x100179a0
1000960c:	10016751 	.word	0x10016751

10009610 <sms_monitor_configure_gpio>:

#include "sms_common.h"

/* General functions */
void sms_monitor_configure_gpio(void)
{
10009610:	b510      	push	{r4, lr}
10009612:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;
    gpio_get_config_defaults(&config_gpio_pin);
10009614:	ac01      	add	r4, sp, #4
10009616:	0020      	movs	r0, r4
10009618:	4b15      	ldr	r3, [pc, #84]	; (10009670 <sms_monitor_configure_gpio+0x60>)
1000961a:	4798      	blx	r3
    config_gpio_pin.direction  = GPIO_PIN_DIR_OUTPUT;
1000961c:	2301      	movs	r3, #1
1000961e:	7023      	strb	r3, [r4, #0]
    if(gpio_pin_set_config(DBG_PIN_1, &config_gpio_pin) != STATUS_OK) {
10009620:	0021      	movs	r1, r4
10009622:	200e      	movs	r0, #14
10009624:	4b13      	ldr	r3, [pc, #76]	; (10009674 <sms_monitor_configure_gpio+0x64>)
10009626:	4798      	blx	r3
10009628:	2800      	cmp	r0, #0
1000962a:	d005      	beq.n	10009638 <sms_monitor_configure_gpio+0x28>
        DBG_LOG("Problem while setting gpio pin");
1000962c:	4812      	ldr	r0, [pc, #72]	; (10009678 <sms_monitor_configure_gpio+0x68>)
1000962e:	4b13      	ldr	r3, [pc, #76]	; (1000967c <sms_monitor_configure_gpio+0x6c>)
10009630:	4798      	blx	r3
10009632:	4813      	ldr	r0, [pc, #76]	; (10009680 <sms_monitor_configure_gpio+0x70>)
10009634:	4b13      	ldr	r3, [pc, #76]	; (10009684 <sms_monitor_configure_gpio+0x74>)
10009636:	4798      	blx	r3
    }
    gpio_pin_set_output_level(DBG_PIN_1, DBG_PIN_LOW);
10009638:	2100      	movs	r1, #0
1000963a:	200e      	movs	r0, #14
1000963c:	4b12      	ldr	r3, [pc, #72]	; (10009688 <sms_monitor_configure_gpio+0x78>)
1000963e:	4798      	blx	r3
	
	gpio_get_config_defaults(&config_gpio_pin);
10009640:	ac01      	add	r4, sp, #4
10009642:	0020      	movs	r0, r4
10009644:	4b0a      	ldr	r3, [pc, #40]	; (10009670 <sms_monitor_configure_gpio+0x60>)
10009646:	4798      	blx	r3
	config_gpio_pin.direction = GPIO_PIN_DIR_OUTPUT;
10009648:	2301      	movs	r3, #1
1000964a:	7023      	strb	r3, [r4, #0]
	if(gpio_pin_set_config(DBG_PIN_2, &config_gpio_pin) != STATUS_OK) {
1000964c:	0021      	movs	r1, r4
1000964e:	200f      	movs	r0, #15
10009650:	4b08      	ldr	r3, [pc, #32]	; (10009674 <sms_monitor_configure_gpio+0x64>)
10009652:	4798      	blx	r3
10009654:	2800      	cmp	r0, #0
10009656:	d005      	beq.n	10009664 <sms_monitor_configure_gpio+0x54>
		DBG_LOG("Problem while setting gpio pin");
10009658:	4807      	ldr	r0, [pc, #28]	; (10009678 <sms_monitor_configure_gpio+0x68>)
1000965a:	4b08      	ldr	r3, [pc, #32]	; (1000967c <sms_monitor_configure_gpio+0x6c>)
1000965c:	4798      	blx	r3
1000965e:	4808      	ldr	r0, [pc, #32]	; (10009680 <sms_monitor_configure_gpio+0x70>)
10009660:	4b08      	ldr	r3, [pc, #32]	; (10009684 <sms_monitor_configure_gpio+0x74>)
10009662:	4798      	blx	r3
	}
	gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_LOW);
10009664:	2100      	movs	r1, #0
10009666:	200f      	movs	r0, #15
10009668:	4b07      	ldr	r3, [pc, #28]	; (10009688 <sms_monitor_configure_gpio+0x78>)
1000966a:	4798      	blx	r3
}
1000966c:	b002      	add	sp, #8
1000966e:	bd10      	pop	{r4, pc}
10009670:	1000b6bd 	.word	0x1000b6bd
10009674:	1000b6cd 	.word	0x1000b6cd
10009678:	100177b0 	.word	0x100177b0
1000967c:	10016871 	.word	0x10016871
10009680:	100179e4 	.word	0x100179e4
10009684:	10016751 	.word	0x10016751
10009688:	1000b925 	.word	0x1000b925

1000968c <sms_monitor_get_states>:

void sms_monitor_get_states(const char *label)
{
    DBG_LOG_DEV("%s...\t\tB-prev %d, B-cur %d, BLE 0x%02x, T1 %d, T2 %d, SMS %d", label, button_instance.previous_state, button_instance.current_state, ble_instance.current_state, timer1_current_mode, timer2_current_mode, sms_working_mode);
1000968c:	4b04      	ldr	r3, [pc, #16]	; (100096a0 <sms_monitor_get_states+0x14>)
1000968e:	781b      	ldrb	r3, [r3, #0]
10009690:	4b04      	ldr	r3, [pc, #16]	; (100096a4 <sms_monitor_get_states+0x18>)
10009692:	781b      	ldrb	r3, [r3, #0]
10009694:	4b04      	ldr	r3, [pc, #16]	; (100096a8 <sms_monitor_get_states+0x1c>)
10009696:	781b      	ldrb	r3, [r3, #0]
10009698:	4b04      	ldr	r3, [pc, #16]	; (100096ac <sms_monitor_get_states+0x20>)
1000969a:	781b      	ldrb	r3, [r3, #0]
}
1000969c:	4770      	bx	lr
1000969e:	46c0      	nop			; (mov r8, r8)
100096a0:	1001a428 	.word	0x1001a428
100096a4:	1001a41c 	.word	0x1001a41c
100096a8:	1001a54b 	.word	0x1001a54b
100096ac:	1001a424 	.word	0x1001a424

100096b0 <sms_i2c_master_configure>:
#include <stdlib.h>
#include "sms_i2c.h"


void sms_i2c_master_configure(void)
{
100096b0:	b530      	push	{r4, r5, lr}
100096b2:	b087      	sub	sp, #28
    i2c_wpacket.data = malloc(I2C_DATA_LENGTH * sizeof(uint8_t));
100096b4:	2010      	movs	r0, #16
100096b6:	4c14      	ldr	r4, [pc, #80]	; (10009708 <sms_i2c_master_configure+0x58>)
100096b8:	47a0      	blx	r4
100096ba:	4b14      	ldr	r3, [pc, #80]	; (1000970c <sms_i2c_master_configure+0x5c>)
100096bc:	6058      	str	r0, [r3, #4]
    i2c_rpacket.data = malloc(I2C_DATA_LENGTH * sizeof(uint8_t));
100096be:	2010      	movs	r0, #16
100096c0:	47a0      	blx	r4
100096c2:	4b13      	ldr	r3, [pc, #76]	; (10009710 <sms_i2c_master_configure+0x60>)
100096c4:	6058      	str	r0, [r3, #4]

    struct i2c_master_config config_i2c_master;
    i2c_master_get_config_defaults(&config_i2c_master);
100096c6:	ac01      	add	r4, sp, #4
100096c8:	0020      	movs	r0, r4
100096ca:	4b12      	ldr	r3, [pc, #72]	; (10009714 <sms_i2c_master_configure+0x64>)
100096cc:	4798      	blx	r3
    config_i2c_master.clock_source = SMS_I2C_MASTER_CLK_SRC;
100096ce:	2303      	movs	r3, #3
100096d0:	7023      	strb	r3, [r4, #0]
    config_i2c_master.clock_divider = SMS_I2C_MASTER_CLK_DIV;
100096d2:	331b      	adds	r3, #27
100096d4:	8063      	strh	r3, [r4, #2]
    config_i2c_master.pin_number_pad0 = SMS_I2C_MASTER_PIN_SDA;
100096d6:	3b16      	subs	r3, #22
100096d8:	6063      	str	r3, [r4, #4]
    config_i2c_master.pin_number_pad1 = SMS_I2C_MASTER_PIN_SCL;
100096da:	3301      	adds	r3, #1
100096dc:	60e3      	str	r3, [r4, #12]
    config_i2c_master.pinmux_sel_pad0 = SMS_I2C_MASTER_MUX_SDA;
100096de:	3b07      	subs	r3, #7
100096e0:	60a3      	str	r3, [r4, #8]
    config_i2c_master.pinmux_sel_pad1 = SMS_I2C_MASTER_MUX_SCL;
100096e2:	6123      	str	r3, [r4, #16]
    while(i2c_master_init(&i2c_master_instance, SMS_I2C_MASTER_PORT, &config_i2c_master) != STATUS_OK);
100096e4:	4d0c      	ldr	r5, [pc, #48]	; (10009718 <sms_i2c_master_configure+0x68>)
100096e6:	4c0d      	ldr	r4, [pc, #52]	; (1000971c <sms_i2c_master_configure+0x6c>)
100096e8:	aa01      	add	r2, sp, #4
100096ea:	490d      	ldr	r1, [pc, #52]	; (10009720 <sms_i2c_master_configure+0x70>)
100096ec:	0028      	movs	r0, r5
100096ee:	47a0      	blx	r4
100096f0:	2800      	cmp	r0, #0
100096f2:	d1f9      	bne.n	100096e8 <sms_i2c_master_configure+0x38>

    i2c_enable(i2c_master_instance.hw);
100096f4:	4b08      	ldr	r3, [pc, #32]	; (10009718 <sms_i2c_master_configure+0x68>)
100096f6:	681a      	ldr	r2, [r3, #0]
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2c *const i2c_module)
{
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
100096f8:	2128      	movs	r1, #40	; 0x28
100096fa:	5c53      	ldrb	r3, [r2, r1]
100096fc:	07db      	lsls	r3, r3, #31
100096fe:	d4fc      	bmi.n	100096fa <sms_i2c_master_configure+0x4a>
static inline void i2c_enable(I2c *const i2c_module)
{
	/* Wait for module to sync. */
	i2c_wait_for_idle(i2c_module);
	/* Enable module. */
	i2c_module->I2C_MODULE_ENABLE.reg = (1 << I2C_MODULE_ENABLE_ENABLE_Pos);
10009700:	2301      	movs	r3, #1
10009702:	7513      	strb	r3, [r2, #20]
}
10009704:	b007      	add	sp, #28
10009706:	bd30      	pop	{r4, r5, pc}
10009708:	100165c5 	.word	0x100165c5
1000970c:	1001a550 	.word	0x1001a550
10009710:	1001a534 	.word	0x1001a534
10009714:	10008305 	.word	0x10008305
10009718:	1001a540 	.word	0x1001a540
1000971c:	1000831d 	.word	0x1000831d
10009720:	40003000 	.word	0x40003000

10009724 <sms_i2c_master_write>:

int sms_i2c_master_write(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t const *data)
{
10009724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    //DBG_LOG_DEV("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
10009726:	4c12      	ldr	r4, [pc, #72]	; (10009770 <sms_i2c_master_write+0x4c>)
10009728:	8020      	strh	r0, [r4, #0]
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
1000972a:	1c50      	adds	r0, r2, #1
1000972c:	b2c0      	uxtb	r0, r0
1000972e:	8060      	strh	r0, [r4, #2]
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
10009730:	6860      	ldr	r0, [r4, #4]
10009732:	7001      	strb	r1, [r0, #0]
    for(uint8_t i = 0; i < data_len; i++) {
10009734:	2a00      	cmp	r2, #0
10009736:	d00e      	beq.n	10009756 <sms_i2c_master_write+0x32>
10009738:	2000      	movs	r0, #0
1000973a:	1c41      	adds	r1, r0, #1
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
1000973c:	5c18      	ldrb	r0, [r3, r0]
1000973e:	6865      	ldr	r5, [r4, #4]
10009740:	5468      	strb	r0, [r5, r1]
10009742:	0008      	movs	r0, r1
    //DBG_LOG_DEV("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    for(uint8_t i = 0; i < data_len; i++) {
10009744:	b2c9      	uxtb	r1, r1
10009746:	428a      	cmp	r2, r1
10009748:	d8f7      	bhi.n	1000973a <sms_i2c_master_write+0x16>
1000974a:	e004      	b.n	10009756 <sms_i2c_master_write+0x32>
1000974c:	3c01      	subs	r4, #1
1000974e:	b2a4      	uxth	r4, r4
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
        //DBG_LOG_CONT_DEV("0x%02x ", i2c_wpacket.data[i+1]);
    }
    while (i2c_master_write_packet_wait(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
        /* Increment timeout counter and check if timed out. */
        if (timeout++ >= I2C_TIMEOUT) {
10009750:	2c00      	cmp	r4, #0
10009752:	d104      	bne.n	1000975e <sms_i2c_master_write+0x3a>
10009754:	e009      	b.n	1000976a <sms_i2c_master_write+0x46>
    //DBG_LOG_DEV("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    for(uint8_t i = 0; i < data_len; i++) {
10009756:	4c07      	ldr	r4, [pc, #28]	; (10009774 <sms_i2c_master_write+0x50>)
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
        //DBG_LOG_CONT_DEV("0x%02x ", i2c_wpacket.data[i+1]);
    }
    while (i2c_master_write_packet_wait(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
10009758:	4e05      	ldr	r6, [pc, #20]	; (10009770 <sms_i2c_master_write+0x4c>)
1000975a:	4d07      	ldr	r5, [pc, #28]	; (10009778 <sms_i2c_master_write+0x54>)
1000975c:	4f07      	ldr	r7, [pc, #28]	; (1000977c <sms_i2c_master_write+0x58>)
1000975e:	0031      	movs	r1, r6
10009760:	0028      	movs	r0, r5
10009762:	47b8      	blx	r7
10009764:	2800      	cmp	r0, #0
10009766:	d1f1      	bne.n	1000974c <sms_i2c_master_write+0x28>
10009768:	e001      	b.n	1000976e <sms_i2c_master_write+0x4a>
        /* Increment timeout counter and check if timed out. */
        if (timeout++ >= I2C_TIMEOUT) {
            return -1;
1000976a:	2001      	movs	r0, #1
1000976c:	4240      	negs	r0, r0
        }
    }
    return 0;
}
1000976e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10009770:	1001a550 	.word	0x1001a550
10009774:	000003e9 	.word	0x000003e9
10009778:	1001a540 	.word	0x1001a540
1000977c:	100083b5 	.word	0x100083b5

10009780 <sms_i2c_master_read>:

int sms_i2c_master_read(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t *data)
{
10009780:	b5f0      	push	{r4, r5, r6, r7, lr}
10009782:	4647      	mov	r7, r8
10009784:	b480      	push	{r7}
10009786:	0017      	movs	r7, r2
10009788:	4698      	mov	r8, r3
    //DBG_LOG("i2c reading from 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout;
    i2c_wpacket.address = (uint8_t)slave_addr;
1000978a:	b280      	uxth	r0, r0
1000978c:	4b1d      	ldr	r3, [pc, #116]	; (10009804 <sms_i2c_master_read+0x84>)
1000978e:	8018      	strh	r0, [r3, #0]
    i2c_wpacket.data_length = 1;
10009790:	2201      	movs	r2, #1
10009792:	805a      	strh	r2, [r3, #2]
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
10009794:	685b      	ldr	r3, [r3, #4]
10009796:	7019      	strb	r1, [r3, #0]
    i2c_rpacket.address = (uint8_t)slave_addr;
10009798:	4b1b      	ldr	r3, [pc, #108]	; (10009808 <sms_i2c_master_read+0x88>)
1000979a:	8018      	strh	r0, [r3, #0]
    i2c_rpacket.data_length = (uint8_t)data_len;
1000979c:	805f      	strh	r7, [r3, #2]
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
1000979e:	4c1b      	ldr	r4, [pc, #108]	; (1000980c <sms_i2c_master_read+0x8c>)
100097a0:	4e18      	ldr	r6, [pc, #96]	; (10009804 <sms_i2c_master_read+0x84>)
100097a2:	4d1b      	ldr	r5, [pc, #108]	; (10009810 <sms_i2c_master_read+0x90>)
100097a4:	e003      	b.n	100097ae <sms_i2c_master_read+0x2e>
100097a6:	3c01      	subs	r4, #1
100097a8:	b2a4      	uxth	r4, r4
		//DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
100097aa:	2c00      	cmp	r4, #0
100097ac:	d01f      	beq.n	100097ee <sms_i2c_master_read+0x6e>
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    i2c_rpacket.address = (uint8_t)slave_addr;
    i2c_rpacket.data_length = (uint8_t)data_len;
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
100097ae:	0031      	movs	r1, r6
100097b0:	4818      	ldr	r0, [pc, #96]	; (10009814 <sms_i2c_master_read+0x94>)
100097b2:	47a8      	blx	r5
100097b4:	2800      	cmp	r0, #0
100097b6:	d1f6      	bne.n	100097a6 <sms_i2c_master_read+0x26>
100097b8:	4e14      	ldr	r6, [pc, #80]	; (1000980c <sms_i2c_master_read+0x8c>)
            return -1;
        }
    }
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
100097ba:	4d13      	ldr	r5, [pc, #76]	; (10009808 <sms_i2c_master_read+0x88>)
100097bc:	4c16      	ldr	r4, [pc, #88]	; (10009818 <sms_i2c_master_read+0x98>)
100097be:	e003      	b.n	100097c8 <sms_i2c_master_read+0x48>
100097c0:	3e01      	subs	r6, #1
100097c2:	b2b6      	uxth	r6, r6
		//DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
100097c4:	2e00      	cmp	r6, #0
100097c6:	d015      	beq.n	100097f4 <sms_i2c_master_read+0x74>
            return -1;
        }
    }
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
100097c8:	0029      	movs	r1, r5
100097ca:	4812      	ldr	r0, [pc, #72]	; (10009814 <sms_i2c_master_read+0x94>)
100097cc:	47a0      	blx	r4
100097ce:	2800      	cmp	r0, #0
100097d0:	d1f6      	bne.n	100097c0 <sms_i2c_master_read+0x40>
		//DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
        }
    }
    for(uint8_t i = 0; i < data_len; i++) {
100097d2:	2f00      	cmp	r7, #0
100097d4:	d011      	beq.n	100097fa <sms_i2c_master_read+0x7a>
100097d6:	2300      	movs	r3, #0
        data[i] = i2c_rpacket.data[i];
100097d8:	490b      	ldr	r1, [pc, #44]	; (10009808 <sms_i2c_master_read+0x88>)
100097da:	684a      	ldr	r2, [r1, #4]
100097dc:	5cd2      	ldrb	r2, [r2, r3]
100097de:	4640      	mov	r0, r8
100097e0:	54c2      	strb	r2, [r0, r3]
100097e2:	3301      	adds	r3, #1
		//DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
        }
    }
    for(uint8_t i = 0; i < data_len; i++) {
100097e4:	b2da      	uxtb	r2, r3
100097e6:	4297      	cmp	r7, r2
100097e8:	d8f7      	bhi.n	100097da <sms_i2c_master_read+0x5a>
        data[i] = i2c_rpacket.data[i];
        //DBG_LOG_CONT(" 0x%02x ", data[i]);
    }
    return 0;
100097ea:	2000      	movs	r0, #0
100097ec:	e006      	b.n	100097fc <sms_i2c_master_read+0x7c>
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
		//DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
100097ee:	2001      	movs	r0, #1
100097f0:	4240      	negs	r0, r0
100097f2:	e003      	b.n	100097fc <sms_i2c_master_read+0x7c>
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
		//DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
100097f4:	2001      	movs	r0, #1
100097f6:	4240      	negs	r0, r0
100097f8:	e000      	b.n	100097fc <sms_i2c_master_read+0x7c>
    }
    for(uint8_t i = 0; i < data_len; i++) {
        data[i] = i2c_rpacket.data[i];
        //DBG_LOG_CONT(" 0x%02x ", data[i]);
    }
    return 0;
100097fa:	2000      	movs	r0, #0
100097fc:	bc04      	pop	{r2}
100097fe:	4690      	mov	r8, r2
10009800:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009802:	46c0      	nop			; (mov r8, r8)
10009804:	1001a550 	.word	0x1001a550
10009808:	1001a534 	.word	0x1001a534
1000980c:	000003e9 	.word	0x000003e9
10009810:	100083d9 	.word	0x100083d9
10009814:	1001a540 	.word	0x1001a540
10009818:	10008391 	.word	0x10008391

1000981c <sms_imu_interrupt_callback>:
	gpio_disable_callback(SMS_MPU_DRDY_PIN);
	imu_device.interrupt.enabled = false;
}
/* IMU DRDY callback function */
void sms_imu_interrupt_callback(void)
{
1000981c:	b510      	push	{r4, lr}
	if(imu_device.interrupt.enabled) {
1000981e:	2380      	movs	r3, #128	; 0x80
10009820:	4a06      	ldr	r2, [pc, #24]	; (1000983c <sms_imu_interrupt_callback+0x20>)
10009822:	5cd3      	ldrb	r3, [r2, r3]
10009824:	2b00      	cmp	r3, #0
10009826:	d008      	beq.n	1000983a <sms_imu_interrupt_callback+0x1e>
		imu_device.interrupt.new_gyro = true;
10009828:	2101      	movs	r1, #1
1000982a:	2381      	movs	r3, #129	; 0x81
1000982c:	54d1      	strb	r1, [r2, r3]
		send_plf_int_msg_ind(SMS_MPU_DRDY_PIN, GPIO_CALLBACK_RISING, NULL, 0);
1000982e:	2300      	movs	r3, #0
10009830:	2200      	movs	r2, #0
10009832:	3101      	adds	r1, #1
10009834:	201e      	movs	r0, #30
10009836:	4c02      	ldr	r4, [pc, #8]	; (10009840 <sms_imu_interrupt_callback+0x24>)
10009838:	47a0      	blx	r4
	}
}
1000983a:	bd10      	pop	{r4, pc}
1000983c:	1001a564 	.word	0x1001a564
10009840:	1000e5e9 	.word	0x1000e5e9

10009844 <sms_imu_configure_gpio>:
#include "mpu9250.h"

/* Board setup functions... */
/* GPIO settings */
void sms_imu_configure_gpio(void)
{
10009844:	b510      	push	{r4, lr}
10009846:	b082      	sub	sp, #8
	struct gpio_config config_gpio_pin;

	/* Data ready interrupt from IMU */
	gpio_get_config_defaults(&config_gpio_pin);
10009848:	ac01      	add	r4, sp, #4
1000984a:	0020      	movs	r0, r4
1000984c:	4b0a      	ldr	r3, [pc, #40]	; (10009878 <sms_imu_configure_gpio+0x34>)
1000984e:	4798      	blx	r3
	config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
10009850:	2300      	movs	r3, #0
10009852:	7023      	strb	r3, [r4, #0]
	config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
10009854:	3302      	adds	r3, #2
10009856:	7063      	strb	r3, [r4, #1]
	config_gpio_pin.aon_wakeup = true;
10009858:	3b01      	subs	r3, #1
1000985a:	70e3      	strb	r3, [r4, #3]
	if(gpio_pin_set_config(SMS_MPU_DRDY_PIN, &config_gpio_pin) != STATUS_OK) {
1000985c:	0021      	movs	r1, r4
1000985e:	201e      	movs	r0, #30
10009860:	4b06      	ldr	r3, [pc, #24]	; (1000987c <sms_imu_configure_gpio+0x38>)
10009862:	4798      	blx	r3
10009864:	2800      	cmp	r0, #0
10009866:	d005      	beq.n	10009874 <sms_imu_configure_gpio+0x30>
		DBG_LOG("[sms_imu_configure_gpio]\tProblem while setting up IMU DRDY pin");
10009868:	4805      	ldr	r0, [pc, #20]	; (10009880 <sms_imu_configure_gpio+0x3c>)
1000986a:	4b06      	ldr	r3, [pc, #24]	; (10009884 <sms_imu_configure_gpio+0x40>)
1000986c:	4798      	blx	r3
1000986e:	4806      	ldr	r0, [pc, #24]	; (10009888 <sms_imu_configure_gpio+0x44>)
10009870:	4b06      	ldr	r3, [pc, #24]	; (1000988c <sms_imu_configure_gpio+0x48>)
10009872:	4798      	blx	r3
	//config_gpio_pin.direction = GPIO_PIN_DIR_OUTPUT;
	//if(!gpio_pin_set_config(SMS_MPU_VCC_PIN, &config_gpio_pin) != STATUS_OK) {
	//DBG_LOG("[sms_imu_configure_gpio]\tProblem while setting up MPU VCC pin");
	//}
	//gpio_pin_set_output_level(SMS_MPU_VCC_PIN, true);
}
10009874:	b002      	add	sp, #8
10009876:	bd10      	pop	{r4, pc}
10009878:	1000b6bd 	.word	0x1000b6bd
1000987c:	1000b6cd 	.word	0x1000b6cd
10009880:	100177b0 	.word	0x100177b0
10009884:	10016871 	.word	0x10016871
10009888:	10017a04 	.word	0x10017a04
1000988c:	10016751 	.word	0x10016751

10009890 <sms_imu_register_callbacks>:
/* Register IMU DRDY interrupt callback */
void sms_imu_register_callbacks(void)
{
10009890:	b510      	push	{r4, lr}
	/* MPU-9250 interrupt callback */
	gpio_register_callback(SMS_MPU_DRDY_PIN, sms_imu_interrupt_callback, GPIO_CALLBACK_RISING);
10009892:	2202      	movs	r2, #2
10009894:	4902      	ldr	r1, [pc, #8]	; (100098a0 <sms_imu_register_callbacks+0x10>)
10009896:	201e      	movs	r0, #30
10009898:	4b02      	ldr	r3, [pc, #8]	; (100098a4 <sms_imu_register_callbacks+0x14>)
1000989a:	4798      	blx	r3
}
1000989c:	bd10      	pop	{r4, pc}
1000989e:	46c0      	nop			; (mov r8, r8)
100098a0:	1000981d 	.word	0x1000981d
100098a4:	1000bafd 	.word	0x1000bafd

100098a8 <sms_imu_enable_callback>:
{
	gpio_unregister_callback(SMS_MPU_DRDY_PIN, GPIO_CALLBACK_RISING);
}
/* Enable IMU DRDY interrupt callback */
void sms_imu_enable_callback(void)
{
100098a8:	b510      	push	{r4, lr}
	gpio_enable_callback(SMS_MPU_DRDY_PIN);
100098aa:	201e      	movs	r0, #30
100098ac:	4b03      	ldr	r3, [pc, #12]	; (100098bc <sms_imu_enable_callback+0x14>)
100098ae:	4798      	blx	r3
	imu_device.interrupt.enabled = true;
100098b0:	2101      	movs	r1, #1
100098b2:	2380      	movs	r3, #128	; 0x80
100098b4:	4a02      	ldr	r2, [pc, #8]	; (100098c0 <sms_imu_enable_callback+0x18>)
100098b6:	54d1      	strb	r1, [r2, r3]
}
100098b8:	bd10      	pop	{r4, pc}
100098ba:	46c0      	nop			; (mov r8, r8)
100098bc:	1000bbcd 	.word	0x1000bbcd
100098c0:	1001a564 	.word	0x1001a564

100098c4 <sms_imu_disable_callback>:
/* Disable IMU DRDY interrupt callback */
void sms_imu_disable_callback(void)
{
100098c4:	b510      	push	{r4, lr}
	gpio_disable_callback(SMS_MPU_DRDY_PIN);
100098c6:	201e      	movs	r0, #30
100098c8:	4b03      	ldr	r3, [pc, #12]	; (100098d8 <sms_imu_disable_callback+0x14>)
100098ca:	4798      	blx	r3
	imu_device.interrupt.enabled = false;
100098cc:	2100      	movs	r1, #0
100098ce:	2380      	movs	r3, #128	; 0x80
100098d0:	4a02      	ldr	r2, [pc, #8]	; (100098dc <sms_imu_disable_callback+0x18>)
100098d2:	54d1      	strb	r1, [r2, r3]
}
100098d4:	bd10      	pop	{r4, pc}
100098d6:	46c0      	nop			; (mov r8, r8)
100098d8:	1000bc29 	.word	0x1000bc29
100098dc:	1001a564 	.word	0x1001a564

100098e0 <sms_imu_define_services>:
	}

}
/* BLE service definition */
void sms_imu_define_services(void)
{
100098e0:	b510      	push	{r4, lr}
100098e2:	b082      	sub	sp, #8
	at_ble_status_t status;
	uint8_t init_value = 0;
100098e4:	466b      	mov	r3, sp
100098e6:	1dda      	adds	r2, r3, #7
100098e8:	2300      	movs	r3, #0
100098ea:	7013      	strb	r3, [r2, #0]
	sms_ble_service_init(BLE_SERV_MPU, &imu_device.service_handler, &init_value);
100098ec:	4c09      	ldr	r4, [pc, #36]	; (10009914 <sms_imu_define_services+0x34>)
100098ee:	0021      	movs	r1, r4
100098f0:	2002      	movs	r0, #2
100098f2:	4b09      	ldr	r3, [pc, #36]	; (10009918 <sms_imu_define_services+0x38>)
100098f4:	4798      	blx	r3
	if((status = sms_ble_primary_service_define(&imu_device.service_handler)) != AT_BLE_SUCCESS) {
100098f6:	0020      	movs	r0, r4
100098f8:	4b08      	ldr	r3, [pc, #32]	; (1000991c <sms_imu_define_services+0x3c>)
100098fa:	4798      	blx	r3
100098fc:	1e04      	subs	r4, r0, #0
100098fe:	d006      	beq.n	1000990e <sms_imu_define_services+0x2e>
		DBG_LOG("[sms_mpu_define_services]\tServices defining failed, reason 0x%x", status);
10009900:	4807      	ldr	r0, [pc, #28]	; (10009920 <sms_imu_define_services+0x40>)
10009902:	4b08      	ldr	r3, [pc, #32]	; (10009924 <sms_imu_define_services+0x44>)
10009904:	4798      	blx	r3
10009906:	0021      	movs	r1, r4
10009908:	4807      	ldr	r0, [pc, #28]	; (10009928 <sms_imu_define_services+0x48>)
1000990a:	4b08      	ldr	r3, [pc, #32]	; (1000992c <sms_imu_define_services+0x4c>)
1000990c:	4798      	blx	r3
	}
	else {
		DBG_LOG_DEV("[sms_mpu_define_services]\tServices defined, SMS MPU handle: %d", imu_device.service_handler.serv_handle);
	}
}
1000990e:	b002      	add	sp, #8
10009910:	bd10      	pop	{r4, pc}
10009912:	46c0      	nop			; (mov r8, r8)
10009914:	1001a5e8 	.word	0x1001a5e8
10009918:	100091d5 	.word	0x100091d5
1000991c:	100091b1 	.word	0x100091b1
10009920:	100177b0 	.word	0x100177b0
10009924:	10016871 	.word	0x10016871
10009928:	10017a44 	.word	0x10017a44
1000992c:	10016751 	.word	0x10016751

10009930 <read_accel_data>:
	}
	return 0;
}
/* Read accel data */
void read_accel_data(int16_t *destination)
{
10009930:	b530      	push	{r4, r5, lr}
10009932:	b083      	sub	sp, #12
10009934:	0004      	movs	r4, r0
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
10009936:	466b      	mov	r3, sp
10009938:	2206      	movs	r2, #6
1000993a:	213b      	movs	r1, #59	; 0x3b
1000993c:	2069      	movs	r0, #105	; 0x69
1000993e:	4d0c      	ldr	r5, [pc, #48]	; (10009970 <read_accel_data+0x40>)
10009940:	47a8      	blx	r5
/* Read accel data */
void read_accel_data(int16_t *destination)
{
	uint8_t rawData[6];  // x/y/z accel register data stored here
	readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 6, &rawData[0]);  // Read the six raw data registers into data array
	destination[0] = ((int16_t)rawData[0] << 8) | rawData[1] ;  // Turn the MSB and LSB into a signed 16-bit value
10009942:	466b      	mov	r3, sp
10009944:	781b      	ldrb	r3, [r3, #0]
10009946:	021b      	lsls	r3, r3, #8
10009948:	466a      	mov	r2, sp
1000994a:	7852      	ldrb	r2, [r2, #1]
1000994c:	4313      	orrs	r3, r2
1000994e:	8023      	strh	r3, [r4, #0]
	destination[1] = ((int16_t)rawData[2] << 8) | rawData[3] ;
10009950:	466b      	mov	r3, sp
10009952:	789b      	ldrb	r3, [r3, #2]
10009954:	021b      	lsls	r3, r3, #8
10009956:	466a      	mov	r2, sp
10009958:	78d2      	ldrb	r2, [r2, #3]
1000995a:	4313      	orrs	r3, r2
1000995c:	8063      	strh	r3, [r4, #2]
	destination[2] = ((int16_t)rawData[4] << 8) | rawData[5] ;
1000995e:	466b      	mov	r3, sp
10009960:	791b      	ldrb	r3, [r3, #4]
10009962:	021b      	lsls	r3, r3, #8
10009964:	466a      	mov	r2, sp
10009966:	7952      	ldrb	r2, [r2, #5]
10009968:	4313      	orrs	r3, r2
1000996a:	80a3      	strh	r3, [r4, #4]
}
1000996c:	b003      	add	sp, #12
1000996e:	bd30      	pop	{r4, r5, pc}
10009970:	10009781 	.word	0x10009781

10009974 <read_gyro_data>:
/* Read gyro data */
void read_gyro_data(int16_t *destination)
{
10009974:	b530      	push	{r4, r5, lr}
10009976:	b083      	sub	sp, #12
10009978:	0004      	movs	r4, r0
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
1000997a:	466b      	mov	r3, sp
1000997c:	2206      	movs	r2, #6
1000997e:	2143      	movs	r1, #67	; 0x43
10009980:	2069      	movs	r0, #105	; 0x69
10009982:	4d0c      	ldr	r5, [pc, #48]	; (100099b4 <read_gyro_data+0x40>)
10009984:	47a8      	blx	r5
/* Read gyro data */
void read_gyro_data(int16_t *destination)
{
	uint8_t rawData[6];  // x/y/z gyro register data stored here
	readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, &rawData[0]);  // Read the six raw data registers sequentially into data array
	destination[0] = ((int16_t)rawData[0] << 8) | rawData[1] ;  // Turn the MSB and LSB into a signed 16-bit value
10009986:	466b      	mov	r3, sp
10009988:	781b      	ldrb	r3, [r3, #0]
1000998a:	021b      	lsls	r3, r3, #8
1000998c:	466a      	mov	r2, sp
1000998e:	7852      	ldrb	r2, [r2, #1]
10009990:	4313      	orrs	r3, r2
10009992:	8023      	strh	r3, [r4, #0]
	destination[1] = ((int16_t)rawData[2] << 8) | rawData[3] ;
10009994:	466b      	mov	r3, sp
10009996:	789b      	ldrb	r3, [r3, #2]
10009998:	021b      	lsls	r3, r3, #8
1000999a:	466a      	mov	r2, sp
1000999c:	78d2      	ldrb	r2, [r2, #3]
1000999e:	4313      	orrs	r3, r2
100099a0:	8063      	strh	r3, [r4, #2]
	destination[2] = ((int16_t)rawData[4] << 8) | rawData[5] ;
100099a2:	466b      	mov	r3, sp
100099a4:	791b      	ldrb	r3, [r3, #4]
100099a6:	021b      	lsls	r3, r3, #8
100099a8:	466a      	mov	r2, sp
100099aa:	7952      	ldrb	r2, [r2, #5]
100099ac:	4313      	orrs	r3, r2
100099ae:	80a3      	strh	r3, [r4, #4]
}
100099b0:	b003      	add	sp, #12
100099b2:	bd30      	pop	{r4, r5, pc}
100099b4:	10009781 	.word	0x10009781

100099b8 <get_Mres>:
float get_Mres(uint8_t m_scale)
{
	float retVal = 0;
	// Possible magnetometer scales (and their register bit settings) are:
	// 14 bit resolution (0) and 16 bit resolution (1)
	switch(m_scale) {
100099b8:	2800      	cmp	r0, #0
100099ba:	d002      	beq.n	100099c2 <get_Mres+0xa>
100099bc:	2801      	cmp	r0, #1
100099be:	d002      	beq.n	100099c6 <get_Mres+0xe>
100099c0:	e003      	b.n	100099ca <get_Mres+0x12>
		case MFS_14BITS:
		retVal = 10.0 * 4912.0 / 8190.0;
100099c2:	4803      	ldr	r0, [pc, #12]	; (100099d0 <get_Mres+0x18>)
100099c4:	e002      	b.n	100099cc <get_Mres+0x14>
		break;
		
		case MFS_16BITS:
		retVal = 10.0 * 4912.0 / 32760.0;
100099c6:	4803      	ldr	r0, [pc, #12]	; (100099d4 <get_Mres+0x1c>)
		break;
100099c8:	e000      	b.n	100099cc <get_Mres+0x14>


/* Utility functions */
float get_Mres(uint8_t m_scale)
{
	float retVal = 0;
100099ca:	2000      	movs	r0, #0
		
		default:
		break;
	}
	return retVal;
}
100099cc:	4770      	bx	lr
100099ce:	46c0      	nop			; (mov r8, r8)
100099d0:	40bfebff 	.word	0x40bfebff
100099d4:	3fbfebff 	.word	0x3fbfebff

100099d8 <get_Gres>:
{
	float retVal = 0;
	// Possible gyro scales (and their register bit settings) are:
	// 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS  (11).
	// Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
	switch(g_scale) {
100099d8:	2801      	cmp	r0, #1
100099da:	d008      	beq.n	100099ee <get_Gres+0x16>
100099dc:	2800      	cmp	r0, #0
100099de:	d004      	beq.n	100099ea <get_Gres+0x12>
100099e0:	2802      	cmp	r0, #2
100099e2:	d006      	beq.n	100099f2 <get_Gres+0x1a>
100099e4:	2803      	cmp	r0, #3
100099e6:	d006      	beq.n	100099f6 <get_Gres+0x1e>
100099e8:	e007      	b.n	100099fa <get_Gres+0x22>
		case GFS_250DPS:
		retVal = 250.0 / 32768.0;
100099ea:	4805      	ldr	r0, [pc, #20]	; (10009a00 <get_Gres+0x28>)
100099ec:	e006      	b.n	100099fc <get_Gres+0x24>
		break;
		
		case GFS_500DPS:
		retVal = 500.0 / 32768.0;
100099ee:	4805      	ldr	r0, [pc, #20]	; (10009a04 <get_Gres+0x2c>)
		break;
100099f0:	e004      	b.n	100099fc <get_Gres+0x24>
		
		case GFS_1000DPS:
		retVal = 1000.0 / 32768.0;
100099f2:	4805      	ldr	r0, [pc, #20]	; (10009a08 <get_Gres+0x30>)
		break;
100099f4:	e002      	b.n	100099fc <get_Gres+0x24>
		
		case GFS_2000DPS:
		retVal = 2000.0 / 32768.0;
100099f6:	4805      	ldr	r0, [pc, #20]	; (10009a0c <get_Gres+0x34>)
		break;
100099f8:	e000      	b.n	100099fc <get_Gres+0x24>
	}
	return retVal;
}
float get_Gres(uint8_t g_scale)
{
	float retVal = 0;
100099fa:	2000      	movs	r0, #0
		
		default:
		break;
	}
	return retVal;
}
100099fc:	4770      	bx	lr
100099fe:	46c0      	nop			; (mov r8, r8)
10009a00:	3bfa0000 	.word	0x3bfa0000
10009a04:	3c7a0000 	.word	0x3c7a0000
10009a08:	3cfa0000 	.word	0x3cfa0000
10009a0c:	3d7a0000 	.word	0x3d7a0000

10009a10 <get_Ares>:
float get_Ares(uint8_t a_scale)
{
	float retVal = 0.0;
	switch(a_scale) {
10009a10:	2801      	cmp	r0, #1
10009a12:	d009      	beq.n	10009a28 <get_Ares+0x18>
10009a14:	2800      	cmp	r0, #0
10009a16:	d004      	beq.n	10009a22 <get_Ares+0x12>
10009a18:	2802      	cmp	r0, #2
10009a1a:	d008      	beq.n	10009a2e <get_Ares+0x1e>
10009a1c:	2803      	cmp	r0, #3
10009a1e:	d009      	beq.n	10009a34 <get_Ares+0x24>
10009a20:	e00b      	b.n	10009a3a <get_Ares+0x2a>
		// Possible accelerometer scales (and their register bit settings) are:
		// 2 Gs (00), 4 Gs (01), 8 Gs (10), and 16 Gs  (11).
		// Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
		case AFS_2G:
		retVal = 2.0/32768.0;
10009a22:	20e2      	movs	r0, #226	; 0xe2
10009a24:	0580      	lsls	r0, r0, #22
10009a26:	e009      	b.n	10009a3c <get_Ares+0x2c>
		break;
		case AFS_4G:
		retVal = 4.0/32768.0;
10009a28:	20e4      	movs	r0, #228	; 0xe4
10009a2a:	0580      	lsls	r0, r0, #22
		break;
10009a2c:	e006      	b.n	10009a3c <get_Ares+0x2c>
		case AFS_8G:
		retVal = 8.0/32768.0;
10009a2e:	20e6      	movs	r0, #230	; 0xe6
10009a30:	0580      	lsls	r0, r0, #22
		break;
10009a32:	e003      	b.n	10009a3c <get_Ares+0x2c>
		case AFS_16G:
		retVal = 16.0/32768.0;
10009a34:	20e8      	movs	r0, #232	; 0xe8
10009a36:	0580      	lsls	r0, r0, #22
		break;
10009a38:	e000      	b.n	10009a3c <get_Ares+0x2c>
	}
	return retVal;
}
float get_Ares(uint8_t a_scale)
{
	float retVal = 0.0;
10009a3a:	2000      	movs	r0, #0
		case AFS_16G:
		retVal = 16.0/32768.0;
		break;
	}
	return retVal;
}
10009a3c:	4770      	bx	lr
10009a3e:	46c0      	nop			; (mov r8, r8)

10009a40 <writeByte>:


/* I2C abstractions to simplify the code */
void writeByte(uint8_t address, uint8_t subAddress, uint8_t data)
{
10009a40:	b510      	push	{r4, lr}
10009a42:	b082      	sub	sp, #8
10009a44:	466b      	mov	r3, sp
10009a46:	3307      	adds	r3, #7
10009a48:	701a      	strb	r2, [r3, #0]
	sms_i2c_master_write(address, subAddress, 1, &data);
10009a4a:	2201      	movs	r2, #1
10009a4c:	4c01      	ldr	r4, [pc, #4]	; (10009a54 <writeByte+0x14>)
10009a4e:	47a0      	blx	r4
}
10009a50:	b002      	add	sp, #8
10009a52:	bd10      	pop	{r4, pc}
10009a54:	10009725 	.word	0x10009725

10009a58 <sms_imu_mpu_calibrate>:
	}
	return retVal;
}
/* Calculate biases for gyro and accel and write them into MPU registers */
void sms_imu_mpu_calibrate(float *dest1, float *dest2)
{
10009a58:	b5f0      	push	{r4, r5, r6, r7, lr}
10009a5a:	465f      	mov	r7, fp
10009a5c:	4656      	mov	r6, sl
10009a5e:	464d      	mov	r5, r9
10009a60:	4644      	mov	r4, r8
10009a62:	b4f0      	push	{r4, r5, r6, r7}
10009a64:	b08f      	sub	sp, #60	; 0x3c
10009a66:	9003      	str	r0, [sp, #12]
10009a68:	9105      	str	r1, [sp, #20]
	uint16_t ii, packet_count, fifo_count;
	int32_t gyro_bias[3]  = {0, 0, 0};
	int32_t accel_bias[3] = {0, 0, 0};
	
	// reset device
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
10009a6a:	2280      	movs	r2, #128	; 0x80
10009a6c:	216b      	movs	r1, #107	; 0x6b
10009a6e:	2069      	movs	r0, #105	; 0x69
10009a70:	4ccd      	ldr	r4, [pc, #820]	; (10009da8 <sms_imu_mpu_calibrate+0x350>)
10009a72:	47a0      	blx	r4
	delay_ms(100);
10009a74:	2064      	movs	r0, #100	; 0x64
10009a76:	4dcd      	ldr	r5, [pc, #820]	; (10009dac <sms_imu_mpu_calibrate+0x354>)
10009a78:	47a8      	blx	r5
	
	// get stable time source; Auto select clock source to be PLL gyroscope reference if ready
	// else use the internal oscillator, bits 2:0 = 001
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);
10009a7a:	2201      	movs	r2, #1
10009a7c:	216b      	movs	r1, #107	; 0x6b
10009a7e:	2069      	movs	r0, #105	; 0x69
10009a80:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, PWR_MGMT_2, 0x00);
10009a82:	2200      	movs	r2, #0
10009a84:	216c      	movs	r1, #108	; 0x6c
10009a86:	2069      	movs	r0, #105	; 0x69
10009a88:	47a0      	blx	r4
	delay_ms(200);
10009a8a:	20c8      	movs	r0, #200	; 0xc8
10009a8c:	47a8      	blx	r5

	// Configure device for bias calculation
	writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x00);   // Disable all interrupts
10009a8e:	2200      	movs	r2, #0
10009a90:	2138      	movs	r1, #56	; 0x38
10009a92:	2069      	movs	r0, #105	; 0x69
10009a94:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);      // Disable FIFO
10009a96:	2200      	movs	r2, #0
10009a98:	2123      	movs	r1, #35	; 0x23
10009a9a:	2069      	movs	r0, #105	; 0x69
10009a9c:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x00);   // Turn on internal clock source
10009a9e:	2200      	movs	r2, #0
10009aa0:	216b      	movs	r1, #107	; 0x6b
10009aa2:	2069      	movs	r0, #105	; 0x69
10009aa4:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, I2C_MST_CTRL, 0x00); // Disable I2C master
10009aa6:	2200      	movs	r2, #0
10009aa8:	2124      	movs	r1, #36	; 0x24
10009aaa:	2069      	movs	r0, #105	; 0x69
10009aac:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, USER_CTRL, 0x00);    // Disable FIFO and I2C master modes
10009aae:	2200      	movs	r2, #0
10009ab0:	216a      	movs	r1, #106	; 0x6a
10009ab2:	2069      	movs	r0, #105	; 0x69
10009ab4:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, USER_CTRL, 0x0C);    // Reset FIFO and DMP
10009ab6:	220c      	movs	r2, #12
10009ab8:	216a      	movs	r1, #106	; 0x6a
10009aba:	2069      	movs	r0, #105	; 0x69
10009abc:	47a0      	blx	r4
	delay_ms(15);
10009abe:	200f      	movs	r0, #15
10009ac0:	47a8      	blx	r5
	
	// Configure MPU9250 gyro and accelerometer for bias calculation
	writeByte(MPU9250_ADDRESS, CONFIG, 0x01);      // Set low-pass filter to 188 Hz
10009ac2:	2201      	movs	r2, #1
10009ac4:	211a      	movs	r1, #26
10009ac6:	2069      	movs	r0, #105	; 0x69
10009ac8:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x00);  // Set sample rate to 1 kHz
10009aca:	2200      	movs	r2, #0
10009acc:	2119      	movs	r1, #25
10009ace:	2069      	movs	r0, #105	; 0x69
10009ad0:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, GYRO_CONFIG, 0x00);  // Set gyro full-scale to 250 degrees per second, maximum sensitivity
10009ad2:	2200      	movs	r2, #0
10009ad4:	211b      	movs	r1, #27
10009ad6:	2069      	movs	r0, #105	; 0x69
10009ad8:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0x00); // Set accelerometer full-scale to 2 g, maximum sensitivity
10009ada:	2200      	movs	r2, #0
10009adc:	211c      	movs	r1, #28
10009ade:	2069      	movs	r0, #105	; 0x69
10009ae0:	47a0      	blx	r4
	
	uint16_t  gyrosensitivity  = 131;   // = 131 LSB/degrees/sec
	uint16_t  accelsensitivity = 16384;  // = 16384 LSB/g

	// Configure FIFO to capture accelerometer and gyro data for bias calculation
	writeByte(MPU9250_ADDRESS, USER_CTRL, 0x40);   // Enable FIFO
10009ae2:	2240      	movs	r2, #64	; 0x40
10009ae4:	216a      	movs	r1, #106	; 0x6a
10009ae6:	2069      	movs	r0, #105	; 0x69
10009ae8:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO  (max size 512 bytes in MPU-9150)
10009aea:	2278      	movs	r2, #120	; 0x78
10009aec:	2123      	movs	r1, #35	; 0x23
10009aee:	2069      	movs	r0, #105	; 0x69
10009af0:	47a0      	blx	r4
	delay_ms(40); // accumulate 40 samples in 40 milliseconds = 480 bytes
10009af2:	2028      	movs	r0, #40	; 0x28
10009af4:	47a8      	blx	r5

	// At end of sample accumulation, turn off FIFO sensor read
	writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
10009af6:	2200      	movs	r2, #0
10009af8:	2123      	movs	r1, #35	; 0x23
10009afa:	2069      	movs	r0, #105	; 0x69
10009afc:	47a0      	blx	r4
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
10009afe:	ac0b      	add	r4, sp, #44	; 0x2c
10009b00:	0023      	movs	r3, r4
10009b02:	2202      	movs	r2, #2
10009b04:	2172      	movs	r1, #114	; 0x72
10009b06:	2069      	movs	r0, #105	; 0x69
10009b08:	4da9      	ldr	r5, [pc, #676]	; (10009db0 <sms_imu_mpu_calibrate+0x358>)
10009b0a:	47a8      	blx	r5

	// At end of sample accumulation, turn off FIFO sensor read
	writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
	readBytes(MPU9250_ADDRESS, FIFO_COUNTH, 2, data); // read FIFO sample count
	fifo_count = ((uint16_t)data[0] << 8) | data[1];
	packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
10009b0c:	7820      	ldrb	r0, [r4, #0]
10009b0e:	0200      	lsls	r0, r0, #8
10009b10:	7863      	ldrb	r3, [r4, #1]
10009b12:	4318      	orrs	r0, r3
10009b14:	210c      	movs	r1, #12
10009b16:	4ba7      	ldr	r3, [pc, #668]	; (10009db4 <sms_imu_mpu_calibrate+0x35c>)
10009b18:	4798      	blx	r3
10009b1a:	b283      	uxth	r3, r0
10009b1c:	9302      	str	r3, [sp, #8]
	
	for (ii = 0; ii < packet_count; ii++) {
10009b1e:	2b00      	cmp	r3, #0
10009b20:	d042      	beq.n	10009ba8 <sms_imu_mpu_calibrate+0x150>
10009b22:	2300      	movs	r3, #0
10009b24:	4698      	mov	r8, r3
10009b26:	2700      	movs	r7, #0
10009b28:	469b      	mov	fp, r3
10009b2a:	469a      	mov	sl, r3
10009b2c:	4699      	mov	r9, r3
10009b2e:	2500      	movs	r5, #0
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
10009b30:	ac0b      	add	r4, sp, #44	; 0x2c
10009b32:	9301      	str	r3, [sp, #4]
10009b34:	0023      	movs	r3, r4
10009b36:	220c      	movs	r2, #12
10009b38:	2174      	movs	r1, #116	; 0x74
10009b3a:	2069      	movs	r0, #105	; 0x69
10009b3c:	4e9c      	ldr	r6, [pc, #624]	; (10009db0 <sms_imu_mpu_calibrate+0x358>)
10009b3e:	47b0      	blx	r6
		accel_temp[2] = (int16_t) (((int16_t)data[4] << 8) | data[5]  ) ;
		gyro_temp[0]  = (int16_t) (((int16_t)data[6] << 8) | data[7]  ) ;
		gyro_temp[1]  = (int16_t) (((int16_t)data[8] << 8) | data[9]  ) ;
		gyro_temp[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]) ;
		
		accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
10009b40:	7823      	ldrb	r3, [r4, #0]
10009b42:	021b      	lsls	r3, r3, #8
10009b44:	7862      	ldrb	r2, [r4, #1]
10009b46:	4313      	orrs	r3, r2
10009b48:	b21b      	sxth	r3, r3
10009b4a:	9a01      	ldr	r2, [sp, #4]
10009b4c:	4694      	mov	ip, r2
10009b4e:	449c      	add	ip, r3
10009b50:	4663      	mov	r3, ip
10009b52:	9301      	str	r3, [sp, #4]
		accel_bias[1] += (int32_t) accel_temp[1];
10009b54:	78a3      	ldrb	r3, [r4, #2]
10009b56:	021b      	lsls	r3, r3, #8
10009b58:	78e2      	ldrb	r2, [r4, #3]
10009b5a:	4313      	orrs	r3, r2
10009b5c:	b21b      	sxth	r3, r3
10009b5e:	18ff      	adds	r7, r7, r3
		accel_bias[2] += (int32_t) accel_temp[2];
10009b60:	7923      	ldrb	r3, [r4, #4]
10009b62:	021b      	lsls	r3, r3, #8
10009b64:	7962      	ldrb	r2, [r4, #5]
10009b66:	4313      	orrs	r3, r2
10009b68:	b21b      	sxth	r3, r3
10009b6a:	4499      	add	r9, r3
		gyro_bias[0]  += (int32_t) gyro_temp[0];
10009b6c:	79a3      	ldrb	r3, [r4, #6]
10009b6e:	021b      	lsls	r3, r3, #8
10009b70:	79e2      	ldrb	r2, [r4, #7]
10009b72:	4313      	orrs	r3, r2
10009b74:	b21b      	sxth	r3, r3
10009b76:	4498      	add	r8, r3
		gyro_bias[1]  += (int32_t) gyro_temp[1];
10009b78:	7a23      	ldrb	r3, [r4, #8]
10009b7a:	021b      	lsls	r3, r3, #8
10009b7c:	7a62      	ldrb	r2, [r4, #9]
10009b7e:	4313      	orrs	r3, r2
10009b80:	b21b      	sxth	r3, r3
10009b82:	449a      	add	sl, r3
		gyro_bias[2]  += (int32_t) gyro_temp[2];
10009b84:	7aa3      	ldrb	r3, [r4, #10]
10009b86:	021b      	lsls	r3, r3, #8
10009b88:	7ae2      	ldrb	r2, [r4, #11]
10009b8a:	4313      	orrs	r3, r2
10009b8c:	b21b      	sxth	r3, r3
10009b8e:	449b      	add	fp, r3
	writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
	readBytes(MPU9250_ADDRESS, FIFO_COUNTH, 2, data); // read FIFO sample count
	fifo_count = ((uint16_t)data[0] << 8) | data[1];
	packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
	
	for (ii = 0; ii < packet_count; ii++) {
10009b90:	3501      	adds	r5, #1
10009b92:	b2ad      	uxth	r5, r5
10009b94:	9b02      	ldr	r3, [sp, #8]
10009b96:	42ab      	cmp	r3, r5
10009b98:	d1cc      	bne.n	10009b34 <sms_imu_mpu_calibrate+0xdc>
10009b9a:	4653      	mov	r3, sl
10009b9c:	46ba      	mov	sl, r7
10009b9e:	465a      	mov	r2, fp
10009ba0:	46e3      	mov	fp, ip
10009ba2:	0016      	movs	r6, r2
10009ba4:	001f      	movs	r7, r3
10009ba6:	e006      	b.n	10009bb6 <sms_imu_mpu_calibrate+0x15e>
/* Calculate biases for gyro and accel and write them into MPU registers */
void sms_imu_mpu_calibrate(float *dest1, float *dest2)
{
	uint8_t data[12]; // data array to hold accelerometer and gyro x, y, z, data
	uint16_t ii, packet_count, fifo_count;
	int32_t gyro_bias[3]  = {0, 0, 0};
10009ba8:	2300      	movs	r3, #0
10009baa:	4698      	mov	r8, r3
10009bac:	2700      	movs	r7, #0
10009bae:	2600      	movs	r6, #0
	int32_t accel_bias[3] = {0, 0, 0};
10009bb0:	469b      	mov	fp, r3
10009bb2:	469a      	mov	sl, r3
10009bb4:	4699      	mov	r9, r3
		gyro_bias[0]  += (int32_t) gyro_temp[0];
		gyro_bias[1]  += (int32_t) gyro_temp[1];
		gyro_bias[2]  += (int32_t) gyro_temp[2];
		
	}
	accel_bias[0] /= (int32_t) packet_count; // Normalize sums to get average count biases
10009bb6:	4c80      	ldr	r4, [pc, #512]	; (10009db8 <sms_imu_mpu_calibrate+0x360>)
10009bb8:	9902      	ldr	r1, [sp, #8]
10009bba:	4658      	mov	r0, fp
10009bbc:	47a0      	blx	r4
10009bbe:	0005      	movs	r5, r0
	accel_bias[1] /= (int32_t) packet_count;
10009bc0:	9b02      	ldr	r3, [sp, #8]
10009bc2:	469b      	mov	fp, r3
10009bc4:	0019      	movs	r1, r3
10009bc6:	4650      	mov	r0, sl
10009bc8:	47a0      	blx	r4
10009bca:	4682      	mov	sl, r0
	accel_bias[2] /= (int32_t) packet_count;
10009bcc:	4659      	mov	r1, fp
10009bce:	4648      	mov	r0, r9
10009bd0:	47a0      	blx	r4
10009bd2:	4681      	mov	r9, r0
	gyro_bias[0]  /= (int32_t) packet_count;
10009bd4:	4659      	mov	r1, fp
10009bd6:	4640      	mov	r0, r8
10009bd8:	47a0      	blx	r4
10009bda:	9001      	str	r0, [sp, #4]
	gyro_bias[1]  /= (int32_t) packet_count;
10009bdc:	4659      	mov	r1, fp
10009bde:	0038      	movs	r0, r7
10009be0:	47a0      	blx	r4
10009be2:	9002      	str	r0, [sp, #8]
	gyro_bias[2]  /= (int32_t) packet_count;
10009be4:	4659      	mov	r1, fp
10009be6:	0030      	movs	r0, r6
10009be8:	47a0      	blx	r4
10009bea:	9004      	str	r0, [sp, #16]
	
	if(accel_bias[2] > 0L) {
10009bec:	464b      	mov	r3, r9
10009bee:	2b00      	cmp	r3, #0
10009bf0:	dd03      	ble.n	10009bfa <sms_imu_mpu_calibrate+0x1a2>
		accel_bias[2] -= (int32_t) accelsensitivity;
10009bf2:	4b72      	ldr	r3, [pc, #456]	; (10009dbc <sms_imu_mpu_calibrate+0x364>)
10009bf4:	469c      	mov	ip, r3
10009bf6:	44e1      	add	r9, ip
10009bf8:	e003      	b.n	10009c02 <sms_imu_mpu_calibrate+0x1aa>
	}  // Remove gravity from the z-axis accelerometer bias calculation
	else {
		accel_bias[2] += (int32_t) accelsensitivity;
10009bfa:	2380      	movs	r3, #128	; 0x80
10009bfc:	01db      	lsls	r3, r3, #7
10009bfe:	469c      	mov	ip, r3
10009c00:	44e1      	add	r9, ip
	}
	
	// Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
	data[0] = (-gyro_bias[0]/4  >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
10009c02:	9b01      	ldr	r3, [sp, #4]
10009c04:	4259      	negs	r1, r3
10009c06:	17ca      	asrs	r2, r1, #31
10009c08:	2303      	movs	r3, #3
10009c0a:	401a      	ands	r2, r3
10009c0c:	1852      	adds	r2, r2, r1
10009c0e:	1091      	asrs	r1, r2, #2
10009c10:	1292      	asrs	r2, r2, #10
10009c12:	b2d2      	uxtb	r2, r2
10009c14:	ac0b      	add	r4, sp, #44	; 0x2c
10009c16:	7022      	strb	r2, [r4, #0]
	data[1] = (-gyro_bias[0]/4)       & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
10009c18:	7061      	strb	r1, [r4, #1]
	data[2] = (-gyro_bias[1]/4  >> 8) & 0xFF;
10009c1a:	9902      	ldr	r1, [sp, #8]
10009c1c:	4248      	negs	r0, r1
10009c1e:	17c1      	asrs	r1, r0, #31
10009c20:	4019      	ands	r1, r3
10009c22:	1809      	adds	r1, r1, r0
10009c24:	1088      	asrs	r0, r1, #2
10009c26:	1289      	asrs	r1, r1, #10
10009c28:	70a1      	strb	r1, [r4, #2]
	data[3] = (-gyro_bias[1]/4)       & 0xFF;
10009c2a:	70e0      	strb	r0, [r4, #3]
	data[4] = (-gyro_bias[2]/4  >> 8) & 0xFF;
10009c2c:	9e04      	ldr	r6, [sp, #16]
10009c2e:	4271      	negs	r1, r6
10009c30:	17c8      	asrs	r0, r1, #31
10009c32:	4003      	ands	r3, r0
10009c34:	185b      	adds	r3, r3, r1
10009c36:	1099      	asrs	r1, r3, #2
10009c38:	129b      	asrs	r3, r3, #10
10009c3a:	7123      	strb	r3, [r4, #4]
	data[5] = (-gyro_bias[2]/4)       & 0xFF;
10009c3c:	7161      	strb	r1, [r4, #5]
	
	// Push gyro biases to hardware registers
	writeByte(MPU9250_ADDRESS, XG_OFFSET_H, data[0]);
10009c3e:	2113      	movs	r1, #19
10009c40:	2069      	movs	r0, #105	; 0x69
10009c42:	4e59      	ldr	r6, [pc, #356]	; (10009da8 <sms_imu_mpu_calibrate+0x350>)
10009c44:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, XG_OFFSET_L, data[1]);
10009c46:	7862      	ldrb	r2, [r4, #1]
10009c48:	2114      	movs	r1, #20
10009c4a:	2069      	movs	r0, #105	; 0x69
10009c4c:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, YG_OFFSET_H, data[2]);
10009c4e:	78a2      	ldrb	r2, [r4, #2]
10009c50:	2115      	movs	r1, #21
10009c52:	2069      	movs	r0, #105	; 0x69
10009c54:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, YG_OFFSET_L, data[3]);
10009c56:	78e2      	ldrb	r2, [r4, #3]
10009c58:	2116      	movs	r1, #22
10009c5a:	2069      	movs	r0, #105	; 0x69
10009c5c:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, ZG_OFFSET_H, data[4]);
10009c5e:	7922      	ldrb	r2, [r4, #4]
10009c60:	2117      	movs	r1, #23
10009c62:	2069      	movs	r0, #105	; 0x69
10009c64:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, ZG_OFFSET_L, data[5]);
10009c66:	7962      	ldrb	r2, [r4, #5]
10009c68:	2118      	movs	r1, #24
10009c6a:	2069      	movs	r0, #105	; 0x69
10009c6c:	47b0      	blx	r6
	
	// Output scaled gyro biases for display in the main program
	dest1[0] = (float)((float)gyro_bias[0]/(float)gyrosensitivity);
10009c6e:	4f54      	ldr	r7, [pc, #336]	; (10009dc0 <sms_imu_mpu_calibrate+0x368>)
10009c70:	9801      	ldr	r0, [sp, #4]
10009c72:	47b8      	blx	r7
10009c74:	4e53      	ldr	r6, [pc, #332]	; (10009dc4 <sms_imu_mpu_calibrate+0x36c>)
10009c76:	4954      	ldr	r1, [pc, #336]	; (10009dc8 <sms_imu_mpu_calibrate+0x370>)
10009c78:	47b0      	blx	r6
10009c7a:	9b03      	ldr	r3, [sp, #12]
10009c7c:	6018      	str	r0, [r3, #0]
	dest1[1] = (float)((float)gyro_bias[1]/(float)gyrosensitivity);
10009c7e:	9802      	ldr	r0, [sp, #8]
10009c80:	47b8      	blx	r7
10009c82:	4951      	ldr	r1, [pc, #324]	; (10009dc8 <sms_imu_mpu_calibrate+0x370>)
10009c84:	47b0      	blx	r6
10009c86:	9b03      	ldr	r3, [sp, #12]
10009c88:	6058      	str	r0, [r3, #4]
	dest1[2] = (float)((float)gyro_bias[2]/(float)gyrosensitivity);
10009c8a:	9804      	ldr	r0, [sp, #16]
10009c8c:	47b8      	blx	r7
10009c8e:	494e      	ldr	r1, [pc, #312]	; (10009dc8 <sms_imu_mpu_calibrate+0x370>)
10009c90:	47b0      	blx	r6
10009c92:	9b03      	ldr	r3, [sp, #12]
10009c94:	6098      	str	r0, [r3, #8]
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
10009c96:	0023      	movs	r3, r4
10009c98:	2202      	movs	r2, #2
10009c9a:	2177      	movs	r1, #119	; 0x77
10009c9c:	2069      	movs	r0, #105	; 0x69
10009c9e:	4e44      	ldr	r6, [pc, #272]	; (10009db0 <sms_imu_mpu_calibrate+0x358>)
10009ca0:	46b0      	mov	r8, r6
10009ca2:	47b0      	blx	r6
	// compensation calculations. Accelerometer bias registers expect bias input as 2048 LSB per g, so that
	// the accelerometer biases calculated above must be divided by 8.

	int32_t accel_bias_reg[3] = {0, 0, 0}; // A place to hold the factory accelerometer trim biases
	readBytes(MPU9250_ADDRESS, XA_OFFSET_H, 2, data); // Read factory accelerometer trim values
	accel_bias_reg[0] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
10009ca4:	7827      	ldrb	r7, [r4, #0]
10009ca6:	023f      	lsls	r7, r7, #8
10009ca8:	7863      	ldrb	r3, [r4, #1]
10009caa:	431f      	orrs	r7, r3
10009cac:	9708      	str	r7, [sp, #32]
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
10009cae:	0023      	movs	r3, r4
10009cb0:	2202      	movs	r2, #2
10009cb2:	217a      	movs	r1, #122	; 0x7a
10009cb4:	2069      	movs	r0, #105	; 0x69
10009cb6:	47b0      	blx	r6

	int32_t accel_bias_reg[3] = {0, 0, 0}; // A place to hold the factory accelerometer trim biases
	readBytes(MPU9250_ADDRESS, XA_OFFSET_H, 2, data); // Read factory accelerometer trim values
	accel_bias_reg[0] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
	readBytes(MPU9250_ADDRESS, YA_OFFSET_H, 2, data);
	accel_bias_reg[1] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
10009cb8:	7826      	ldrb	r6, [r4, #0]
10009cba:	0236      	lsls	r6, r6, #8
10009cbc:	7863      	ldrb	r3, [r4, #1]
10009cbe:	431e      	orrs	r6, r3
10009cc0:	9609      	str	r6, [sp, #36]	; 0x24
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
10009cc2:	0023      	movs	r3, r4
10009cc4:	2202      	movs	r2, #2
10009cc6:	217d      	movs	r1, #125	; 0x7d
10009cc8:	2069      	movs	r0, #105	; 0x69
10009cca:	47c0      	blx	r8
	readBytes(MPU9250_ADDRESS, XA_OFFSET_H, 2, data); // Read factory accelerometer trim values
	accel_bias_reg[0] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
	readBytes(MPU9250_ADDRESS, YA_OFFSET_H, 2, data);
	accel_bias_reg[1] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
	readBytes(MPU9250_ADDRESS, ZA_OFFSET_H, 2, data);
	accel_bias_reg[2] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
10009ccc:	7823      	ldrb	r3, [r4, #0]
10009cce:	021b      	lsls	r3, r3, #8
10009cd0:	7861      	ldrb	r1, [r4, #1]
10009cd2:	4319      	orrs	r1, r3
10009cd4:	910a      	str	r1, [sp, #40]	; 0x28
	
	uint32_t mask = 1uL; // Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
	uint8_t mask_bit[3] = {0, 0, 0}; // Define array to hold mask bit for each accelerometer bias axis
10009cd6:	ab07      	add	r3, sp, #28
10009cd8:	2200      	movs	r2, #0
10009cda:	701a      	strb	r2, [r3, #0]
10009cdc:	705a      	strb	r2, [r3, #1]
10009cde:	709a      	strb	r2, [r3, #2]
10009ce0:	2300      	movs	r3, #0
	
	for(ii = 0; ii < 3; ii++) {
		if((accel_bias_reg[ii] & mask)) mask_bit[ii] = 0x01; // If temperature compensation bit is set, record that fact in mask_bit
10009ce2:	2401      	movs	r4, #1
10009ce4:	009a      	lsls	r2, r3, #2
10009ce6:	a808      	add	r0, sp, #32
10009ce8:	5812      	ldr	r2, [r2, r0]
10009cea:	4222      	tst	r2, r4
10009cec:	d001      	beq.n	10009cf2 <sms_imu_mpu_calibrate+0x29a>
10009cee:	aa07      	add	r2, sp, #28
10009cf0:	549c      	strb	r4, [r3, r2]
10009cf2:	3301      	adds	r3, #1
	accel_bias_reg[2] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
	
	uint32_t mask = 1uL; // Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
	uint8_t mask_bit[3] = {0, 0, 0}; // Define array to hold mask bit for each accelerometer bias axis
	
	for(ii = 0; ii < 3; ii++) {
10009cf4:	2b03      	cmp	r3, #3
10009cf6:	d1f5      	bne.n	10009ce4 <sms_imu_mpu_calibrate+0x28c>
		if((accel_bias_reg[ii] & mask)) mask_bit[ii] = 0x01; // If temperature compensation bit is set, record that fact in mask_bit
	}
	
	// Construct total accelerometer bias, including calculated average accelerometer bias from above
	accel_bias_reg[0] -= (accel_bias[0]/8); // Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
10009cf8:	17ea      	asrs	r2, r5, #31
10009cfa:	3304      	adds	r3, #4
10009cfc:	401a      	ands	r2, r3
10009cfe:	1952      	adds	r2, r2, r5
10009d00:	10d2      	asrs	r2, r2, #3
10009d02:	1abf      	subs	r7, r7, r2
	accel_bias_reg[1] -= (accel_bias[1]/8);
10009d04:	4652      	mov	r2, sl
10009d06:	17d0      	asrs	r0, r2, #31
10009d08:	4018      	ands	r0, r3
10009d0a:	4450      	add	r0, sl
10009d0c:	10c0      	asrs	r0, r0, #3
10009d0e:	1a36      	subs	r6, r6, r0
	accel_bias_reg[2] -= (accel_bias[2]/8);
10009d10:	464a      	mov	r2, r9
10009d12:	17d2      	asrs	r2, r2, #31
10009d14:	4013      	ands	r3, r2
10009d16:	444b      	add	r3, r9
10009d18:	10da      	asrs	r2, r3, #3
10009d1a:	1a8b      	subs	r3, r1, r2
	
	data[0] = (accel_bias_reg[0] >> 8) & 0xFF;
10009d1c:	123a      	asrs	r2, r7, #8
10009d1e:	b2d2      	uxtb	r2, r2
10009d20:	ac0b      	add	r4, sp, #44	; 0x2c
10009d22:	7022      	strb	r2, [r4, #0]
	data[1] = (accel_bias_reg[0])      & 0xFF;
	data[1] = data[1] | mask_bit[0]; // preserve temperature compensation bit when writing back to accelerometer bias registers
10009d24:	a907      	add	r1, sp, #28
10009d26:	7808      	ldrb	r0, [r1, #0]
10009d28:	4307      	orrs	r7, r0
10009d2a:	7067      	strb	r7, [r4, #1]
	data[2] = (accel_bias_reg[1] >> 8) & 0xFF;
10009d2c:	1230      	asrs	r0, r6, #8
10009d2e:	70a0      	strb	r0, [r4, #2]
	data[3] = (accel_bias_reg[1])      & 0xFF;
	data[3] = data[3] | mask_bit[1]; // preserve temperature compensation bit when writing back to accelerometer bias registers
10009d30:	7848      	ldrb	r0, [r1, #1]
10009d32:	4306      	orrs	r6, r0
10009d34:	70e6      	strb	r6, [r4, #3]
	data[4] = (accel_bias_reg[2] >> 8) & 0xFF;
10009d36:	1218      	asrs	r0, r3, #8
10009d38:	7120      	strb	r0, [r4, #4]
	data[5] = (accel_bias_reg[2])      & 0xFF;
	data[5] = data[5] | mask_bit[2]; // preserve temperature compensation bit when writing back to accelerometer bias registers
10009d3a:	7889      	ldrb	r1, [r1, #2]
10009d3c:	430b      	orrs	r3, r1
10009d3e:	7163      	strb	r3, [r4, #5]
	
	// Apparently this is not working for the acceleration biases in the MPU-9250
	// Are we handling the temperature correction bit properly?
	// Push accelerometer biases to hardware registers
	writeByte(MPU9250_ADDRESS, XA_OFFSET_H, data[0]);
10009d40:	2177      	movs	r1, #119	; 0x77
10009d42:	2069      	movs	r0, #105	; 0x69
10009d44:	4e18      	ldr	r6, [pc, #96]	; (10009da8 <sms_imu_mpu_calibrate+0x350>)
10009d46:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, XA_OFFSET_L, data[1]);
10009d48:	7862      	ldrb	r2, [r4, #1]
10009d4a:	2178      	movs	r1, #120	; 0x78
10009d4c:	2069      	movs	r0, #105	; 0x69
10009d4e:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, YA_OFFSET_H, data[2]);
10009d50:	78a2      	ldrb	r2, [r4, #2]
10009d52:	217a      	movs	r1, #122	; 0x7a
10009d54:	2069      	movs	r0, #105	; 0x69
10009d56:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, YA_OFFSET_L, data[3]);
10009d58:	78e2      	ldrb	r2, [r4, #3]
10009d5a:	217b      	movs	r1, #123	; 0x7b
10009d5c:	2069      	movs	r0, #105	; 0x69
10009d5e:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, ZA_OFFSET_H, data[4]);
10009d60:	7922      	ldrb	r2, [r4, #4]
10009d62:	217d      	movs	r1, #125	; 0x7d
10009d64:	2069      	movs	r0, #105	; 0x69
10009d66:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, ZA_OFFSET_L, data[5]);
10009d68:	7962      	ldrb	r2, [r4, #5]
10009d6a:	217e      	movs	r1, #126	; 0x7e
10009d6c:	2069      	movs	r0, #105	; 0x69
10009d6e:	47b0      	blx	r6

	// Output scaled accelerometer biases for display in the main program
	dest2[0] = (float)accel_bias[0]/(float)accelsensitivity;
10009d70:	4e13      	ldr	r6, [pc, #76]	; (10009dc0 <sms_imu_mpu_calibrate+0x368>)
10009d72:	0028      	movs	r0, r5
10009d74:	47b0      	blx	r6
10009d76:	4c15      	ldr	r4, [pc, #84]	; (10009dcc <sms_imu_mpu_calibrate+0x374>)
10009d78:	21e2      	movs	r1, #226	; 0xe2
10009d7a:	0589      	lsls	r1, r1, #22
10009d7c:	47a0      	blx	r4
10009d7e:	9d05      	ldr	r5, [sp, #20]
10009d80:	6028      	str	r0, [r5, #0]
	dest2[1] = (float)accel_bias[1]/(float)accelsensitivity;
10009d82:	4650      	mov	r0, sl
10009d84:	47b0      	blx	r6
10009d86:	21e2      	movs	r1, #226	; 0xe2
10009d88:	0589      	lsls	r1, r1, #22
10009d8a:	47a0      	blx	r4
10009d8c:	6068      	str	r0, [r5, #4]
	dest2[2] = (float)accel_bias[2]/(float)accelsensitivity;
10009d8e:	4648      	mov	r0, r9
10009d90:	47b0      	blx	r6
10009d92:	21e2      	movs	r1, #226	; 0xe2
10009d94:	0589      	lsls	r1, r1, #22
10009d96:	47a0      	blx	r4
10009d98:	60a8      	str	r0, [r5, #8]
	//uint32_t p2 = dest1[2] * 10000;
	//uint32_t p3 = dest2[0] * 10000;
	//uint32_t p4 = dest2[1] * 10000;
	//uint32_t p5 = dest2[2] * 10000;
	//DBG_LOG("destX: %ld %ld %ld / %ld %ld %ld", p0, p1, p2, p3, p4, p5);
}
10009d9a:	b00f      	add	sp, #60	; 0x3c
10009d9c:	bc3c      	pop	{r2, r3, r4, r5}
10009d9e:	4690      	mov	r8, r2
10009da0:	4699      	mov	r9, r3
10009da2:	46a2      	mov	sl, r4
10009da4:	46ab      	mov	fp, r5
10009da6:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009da8:	10009a41 	.word	0x10009a41
10009dac:	1000b029 	.word	0x1000b029
10009db0:	10009781 	.word	0x10009781
10009db4:	100135c1 	.word	0x100135c1
10009db8:	100136d5 	.word	0x100136d5
10009dbc:	ffffc000 	.word	0xffffc000
10009dc0:	10014689 	.word	0x10014689
10009dc4:	10013d4d 	.word	0x10013d4d
10009dc8:	43030000 	.word	0x43030000
10009dcc:	100140e1 	.word	0x100140e1

10009dd0 <sms_imu_comp_initialize>:
	writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x01);  // Enable data ready (bit 0) interrupt
	delay_ms(100);
}
/* Compass */
void sms_imu_comp_initialize(float *destination)
{
10009dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
10009dd2:	465f      	mov	r7, fp
10009dd4:	4656      	mov	r6, sl
10009dd6:	464d      	mov	r5, r9
10009dd8:	4644      	mov	r4, r8
10009dda:	b4f0      	push	{r4, r5, r6, r7}
10009ddc:	b083      	sub	sp, #12
10009dde:	4680      	mov	r8, r0
	imu_device.config.m_scale = MFS_16BITS;	// Choose either 14-bit or 16-bit magnetometer resolution
10009de0:	4c36      	ldr	r4, [pc, #216]	; (10009ebc <sms_imu_comp_initialize+0xec>)
10009de2:	2301      	movs	r3, #1
10009de4:	70a3      	strb	r3, [r4, #2]
	imu_device.config.m_mode = MODE_CONT1;	// CONT1 (2) for 8 Hz, CONT2 (6) for 100 Hz continuous magnetometer data read
10009de6:	3301      	adds	r3, #1
10009de8:	70e3      	strb	r3, [r4, #3]

	/* !!! SET MAGNETOMETER BIAS VALUES !!! SHOULD BE CALCULATED AUTOMATICALLY !!! */
	imu_device.config.mag_bias[0] = 470.0;
10009dea:	4b35      	ldr	r3, [pc, #212]	; (10009ec0 <sms_imu_comp_initialize+0xf0>)
10009dec:	6363      	str	r3, [r4, #52]	; 0x34
	imu_device.config.mag_bias[1] = 120.0;
10009dee:	4b35      	ldr	r3, [pc, #212]	; (10009ec4 <sms_imu_comp_initialize+0xf4>)
10009df0:	63a3      	str	r3, [r4, #56]	; 0x38
	imu_device.config.mag_bias[2] = 125.0;
10009df2:	4b35      	ldr	r3, [pc, #212]	; (10009ec8 <sms_imu_comp_initialize+0xf8>)
10009df4:	63e3      	str	r3, [r4, #60]	; 0x3c
	/* !!! SET MAGNETOMETER BIAS VALUES !!! SHOULD BE CALCULATED AUTOMATICALLY !!! */

	// First extract the factory calibration for each magnetometer axis
	uint8_t data[3];  // x/y/z gyro calibration data stored here
	writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
10009df6:	2200      	movs	r2, #0
10009df8:	210a      	movs	r1, #10
10009dfa:	200c      	movs	r0, #12
10009dfc:	4e33      	ldr	r6, [pc, #204]	; (10009ecc <sms_imu_comp_initialize+0xfc>)
10009dfe:	47b0      	blx	r6
	delay_ms(10);
10009e00:	200a      	movs	r0, #10
10009e02:	4b33      	ldr	r3, [pc, #204]	; (10009ed0 <sms_imu_comp_initialize+0x100>)
10009e04:	4798      	blx	r3
	writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x0F); // Enter Fuse ROM access mode
10009e06:	220f      	movs	r2, #15
10009e08:	210a      	movs	r1, #10
10009e0a:	200c      	movs	r0, #12
10009e0c:	47b0      	blx	r6
	delay_ms(10);
10009e0e:	200a      	movs	r0, #10
10009e10:	4b2f      	ldr	r3, [pc, #188]	; (10009ed0 <sms_imu_comp_initialize+0x100>)
10009e12:	4798      	blx	r3
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
10009e14:	af01      	add	r7, sp, #4
10009e16:	003b      	movs	r3, r7
10009e18:	2203      	movs	r2, #3
10009e1a:	2110      	movs	r1, #16
10009e1c:	200c      	movs	r0, #12
10009e1e:	4d2d      	ldr	r5, [pc, #180]	; (10009ed4 <sms_imu_comp_initialize+0x104>)
10009e20:	47a8      	blx	r5
	writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
	delay_ms(10);
	writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x0F); // Enter Fuse ROM access mode
	delay_ms(10);
	readBytes(AK8963_ADDRESS, AK8963_ASAX, 3, data);  // Read the x-, y-, and z-axis calibration values
	destination[0] =  (float)(data[0] - 128)/256. + 1.;   // Return x-axis sensitivity adjustment values, etc.
10009e22:	7838      	ldrb	r0, [r7, #0]
10009e24:	3880      	subs	r0, #128	; 0x80
10009e26:	4b2c      	ldr	r3, [pc, #176]	; (10009ed8 <sms_imu_comp_initialize+0x108>)
10009e28:	469b      	mov	fp, r3
10009e2a:	4798      	blx	r3
10009e2c:	4b2b      	ldr	r3, [pc, #172]	; (10009edc <sms_imu_comp_initialize+0x10c>)
10009e2e:	469a      	mov	sl, r3
10009e30:	4798      	blx	r3
10009e32:	2200      	movs	r2, #0
10009e34:	4b2a      	ldr	r3, [pc, #168]	; (10009ee0 <sms_imu_comp_initialize+0x110>)
10009e36:	4d2b      	ldr	r5, [pc, #172]	; (10009ee4 <sms_imu_comp_initialize+0x114>)
10009e38:	47a8      	blx	r5
10009e3a:	2200      	movs	r2, #0
10009e3c:	4b2a      	ldr	r3, [pc, #168]	; (10009ee8 <sms_imu_comp_initialize+0x118>)
10009e3e:	4d2b      	ldr	r5, [pc, #172]	; (10009eec <sms_imu_comp_initialize+0x11c>)
10009e40:	47a8      	blx	r5
10009e42:	4b2b      	ldr	r3, [pc, #172]	; (10009ef0 <sms_imu_comp_initialize+0x120>)
10009e44:	4699      	mov	r9, r3
10009e46:	4798      	blx	r3
10009e48:	4643      	mov	r3, r8
10009e4a:	6018      	str	r0, [r3, #0]
	destination[1] =  (float)(data[1] - 128)/256. + 1.;
10009e4c:	7878      	ldrb	r0, [r7, #1]
10009e4e:	3880      	subs	r0, #128	; 0x80
10009e50:	47d8      	blx	fp
10009e52:	47d0      	blx	sl
10009e54:	2200      	movs	r2, #0
10009e56:	4b22      	ldr	r3, [pc, #136]	; (10009ee0 <sms_imu_comp_initialize+0x110>)
10009e58:	4d22      	ldr	r5, [pc, #136]	; (10009ee4 <sms_imu_comp_initialize+0x114>)
10009e5a:	47a8      	blx	r5
10009e5c:	2200      	movs	r2, #0
10009e5e:	4b22      	ldr	r3, [pc, #136]	; (10009ee8 <sms_imu_comp_initialize+0x118>)
10009e60:	4d22      	ldr	r5, [pc, #136]	; (10009eec <sms_imu_comp_initialize+0x11c>)
10009e62:	47a8      	blx	r5
10009e64:	47c8      	blx	r9
10009e66:	4643      	mov	r3, r8
10009e68:	6058      	str	r0, [r3, #4]
	destination[2] =  (float)(data[2] - 128)/256. + 1.;
10009e6a:	78b8      	ldrb	r0, [r7, #2]
10009e6c:	3880      	subs	r0, #128	; 0x80
10009e6e:	47d8      	blx	fp
10009e70:	47d0      	blx	sl
10009e72:	2200      	movs	r2, #0
10009e74:	4b1a      	ldr	r3, [pc, #104]	; (10009ee0 <sms_imu_comp_initialize+0x110>)
10009e76:	4d1b      	ldr	r5, [pc, #108]	; (10009ee4 <sms_imu_comp_initialize+0x114>)
10009e78:	47a8      	blx	r5
10009e7a:	2200      	movs	r2, #0
10009e7c:	4b1a      	ldr	r3, [pc, #104]	; (10009ee8 <sms_imu_comp_initialize+0x118>)
10009e7e:	4d1b      	ldr	r5, [pc, #108]	; (10009eec <sms_imu_comp_initialize+0x11c>)
10009e80:	47a8      	blx	r5
10009e82:	47c8      	blx	r9
10009e84:	4643      	mov	r3, r8
10009e86:	6098      	str	r0, [r3, #8]
	writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
10009e88:	2200      	movs	r2, #0
10009e8a:	210a      	movs	r1, #10
10009e8c:	200c      	movs	r0, #12
10009e8e:	47b0      	blx	r6
	delay_ms(10);
10009e90:	200a      	movs	r0, #10
10009e92:	4b0f      	ldr	r3, [pc, #60]	; (10009ed0 <sms_imu_comp_initialize+0x100>)
10009e94:	4798      	blx	r3
	// Configure the magnetometer for continuous read and highest resolution
	// set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
	// and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
	writeByte(AK8963_ADDRESS, AK8963_CNTL, imu_device.config.m_scale << 4 | imu_device.config.m_mode); // Set magnetometer data resolution and sample ODR
10009e96:	78a2      	ldrb	r2, [r4, #2]
10009e98:	0112      	lsls	r2, r2, #4
10009e9a:	78e3      	ldrb	r3, [r4, #3]
10009e9c:	431a      	orrs	r2, r3
10009e9e:	b2d2      	uxtb	r2, r2
10009ea0:	210a      	movs	r1, #10
10009ea2:	200c      	movs	r0, #12
10009ea4:	47b0      	blx	r6
	delay_ms(10);
10009ea6:	200a      	movs	r0, #10
10009ea8:	4b09      	ldr	r3, [pc, #36]	; (10009ed0 <sms_imu_comp_initialize+0x100>)
10009eaa:	4798      	blx	r3
}
10009eac:	b003      	add	sp, #12
10009eae:	bc3c      	pop	{r2, r3, r4, r5}
10009eb0:	4690      	mov	r8, r2
10009eb2:	4699      	mov	r9, r3
10009eb4:	46a2      	mov	sl, r4
10009eb6:	46ab      	mov	fp, r5
10009eb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009eba:	46c0      	nop			; (mov r8, r8)
10009ebc:	1001a564 	.word	0x1001a564
10009ec0:	43eb0000 	.word	0x43eb0000
10009ec4:	42f00000 	.word	0x42f00000
10009ec8:	42fa0000 	.word	0x42fa0000
10009ecc:	10009a41 	.word	0x10009a41
10009ed0:	1000b029 	.word	0x1000b029
10009ed4:	10009781 	.word	0x10009781
10009ed8:	10014689 	.word	0x10014689
10009edc:	10016371 	.word	0x10016371
10009ee0:	3f700000 	.word	0x3f700000
10009ee4:	10015635 	.word	0x10015635
10009ee8:	3ff00000 	.word	0x3ff00000
10009eec:	10014795 	.word	0x10014795
10009ef0:	10016419 	.word	0x10016419

10009ef4 <readByte>:
void writeByte(uint8_t address, uint8_t subAddress, uint8_t data)
{
	sms_i2c_master_write(address, subAddress, 1, &data);
}
uint8_t readByte(uint8_t address, uint8_t subAddress)
{
10009ef4:	b530      	push	{r4, r5, lr}
10009ef6:	b083      	sub	sp, #12
	uint8_t data[1];
	sms_i2c_master_read(address, subAddress, 1, data);
10009ef8:	ac01      	add	r4, sp, #4
10009efa:	0023      	movs	r3, r4
10009efc:	2201      	movs	r2, #1
10009efe:	4d02      	ldr	r5, [pc, #8]	; (10009f08 <readByte+0x14>)
10009f00:	47a8      	blx	r5
	return data[0];
10009f02:	7820      	ldrb	r0, [r4, #0]
}
10009f04:	b003      	add	sp, #12
10009f06:	bd30      	pop	{r4, r5, pc}
10009f08:	10009781 	.word	0x10009781

10009f0c <sms_imu_comp_check>:
	}
	return retVal;
}
/* Check if the compass responds */
int sms_imu_comp_check(void)
{
10009f0c:	b510      	push	{r4, lr}
	int retVal = -1;
	uint8_t d = readByte(AK8963_ADDRESS, AK8963_WHO_AM_I);
10009f0e:	2100      	movs	r1, #0
10009f10:	200c      	movs	r0, #12
10009f12:	4b03      	ldr	r3, [pc, #12]	; (10009f20 <sms_imu_comp_check+0x14>)
10009f14:	4798      	blx	r3
	if(d == 0x48) {
		//DBG_LOG("[sms_mpu_comp_check]\t\tAK8963 is online...");
		retVal = 0;
	}
	return retVal;
10009f16:	3848      	subs	r0, #72	; 0x48
10009f18:	1e43      	subs	r3, r0, #1
10009f1a:	4198      	sbcs	r0, r3
10009f1c:	4240      	negs	r0, r0
}
10009f1e:	bd10      	pop	{r4, pc}
10009f20:	10009ef5 	.word	0x10009ef5

10009f24 <sms_imu_mpu_initialize>:


/* Initialization functions... */
/* MPU */
void sms_imu_mpu_initialize(void)
{
10009f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	imu_device.config.a_scale = AFS_2G;
10009f26:	4f25      	ldr	r7, [pc, #148]	; (10009fbc <sms_imu_mpu_initialize+0x98>)
10009f28:	2300      	movs	r3, #0
10009f2a:	703b      	strb	r3, [r7, #0]
	imu_device.config.g_scale = GFS_250DPS;
10009f2c:	707b      	strb	r3, [r7, #1]
	imu_device.config.ahrs = false;
10009f2e:	224c      	movs	r2, #76	; 0x4c
10009f30:	54bb      	strb	r3, [r7, r2]

	// wake up device
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x00); // Clear sleep mode bit (6), enable all sensors
10009f32:	2200      	movs	r2, #0
10009f34:	216b      	movs	r1, #107	; 0x6b
10009f36:	2069      	movs	r0, #105	; 0x69
10009f38:	4c21      	ldr	r4, [pc, #132]	; (10009fc0 <sms_imu_mpu_initialize+0x9c>)
10009f3a:	47a0      	blx	r4
	delay_ms(100); // Wait for all registers to reset
10009f3c:	2064      	movs	r0, #100	; 0x64
10009f3e:	4d21      	ldr	r5, [pc, #132]	; (10009fc4 <sms_imu_mpu_initialize+0xa0>)
10009f40:	47a8      	blx	r5

	// get stable time source
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);  // Auto select clock source to be PLL gyroscope reference if ready else
10009f42:	2201      	movs	r2, #1
10009f44:	216b      	movs	r1, #107	; 0x6b
10009f46:	2069      	movs	r0, #105	; 0x69
10009f48:	47a0      	blx	r4
	delay_ms(200);
10009f4a:	20c8      	movs	r0, #200	; 0xc8
10009f4c:	47a8      	blx	r5
	// minimum delay time for this setting is 5.9 ms, which means sensor fusion update rates cannot
	// be higher than 1 / 0.0059 = 170 Hz
	// DLPF_CFG = bits 2:0 = 011; this limits the sample rate to 1000 Hz for both
	// With the MPU9250, it is possible to get gyro sample rates of 32 kHz (!), 8 kHz, or 1 kHz
	// writeByte(MPU9250_ADDRESS, CONFIG, 0x03);
	writeByte(MPU9250_ADDRESS, CONFIG, 0x03);		// gyro bandwidth = 10 Hz, delay = 17.85 ms -> max rate = 56 Hz
10009f4e:	2203      	movs	r2, #3
10009f50:	211a      	movs	r1, #26
10009f52:	2069      	movs	r0, #105	; 0x69
10009f54:	47a0      	blx	r4

	// Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
	writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x0A);  	// Use a 90 Hz rate; a rate consistent with the filter update rate
10009f56:	220a      	movs	r2, #10
10009f58:	2119      	movs	r1, #25
10009f5a:	2069      	movs	r0, #105	; 0x69
10009f5c:	47a0      	blx	r4
	// // determined inset in CONFIG above
	//writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x63);  	// Use a 10 Hz rate; a rate consistent with the filter update rate
	
	// Set gyroscope full scale range
	// Range selects FS_SEL and AFS_SEL are 0 - 3, so 2-bit values are left-shifted into positions 4:3
	uint8_t c = readByte(MPU9250_ADDRESS, GYRO_CONFIG); // get current GYRO_CONFIG register value
10009f5e:	211b      	movs	r1, #27
10009f60:	2069      	movs	r0, #105	; 0x69
10009f62:	4e19      	ldr	r6, [pc, #100]	; (10009fc8 <sms_imu_mpu_initialize+0xa4>)
10009f64:	47b0      	blx	r6
	// c = c & ~0xE0; // Clear self-test bits [7:5]
	c = c & ~0x02; // Clear Fchoice bits [1:0]
	c = c & ~0x18; // Clear AFS bits [4:3]
	c = c | (imu_device.config.g_scale << 3); // Set full scale range for the gyro
10009f66:	787a      	ldrb	r2, [r7, #1]
10009f68:	00d2      	lsls	r2, r2, #3
10009f6a:	231a      	movs	r3, #26
10009f6c:	4398      	bics	r0, r3
10009f6e:	4302      	orrs	r2, r0
	// c =| 0x00; // Set Fchoice for the gyro to 11 by writing its inverse to bits 1:0 of GYRO_CONFIG
	writeByte(MPU9250_ADDRESS, GYRO_CONFIG, c ); // Write new GYRO_CONFIG value to register
10009f70:	b2d2      	uxtb	r2, r2
10009f72:	211b      	movs	r1, #27
10009f74:	2069      	movs	r0, #105	; 0x69
10009f76:	47a0      	blx	r4
	
	// Set accelerometer full-scale range configuration
	c = readByte(MPU9250_ADDRESS, ACCEL_CONFIG); // get current ACCEL_CONFIG register value
10009f78:	211c      	movs	r1, #28
10009f7a:	2069      	movs	r0, #105	; 0x69
10009f7c:	47b0      	blx	r6
	// c = c & ~0xE0; // Clear self-test bits [7:5]
	c = c & ~0x18;  // Clear AFS bits [4:3]
	c = c | (imu_device.config.a_scale << 3); // Set full scale range for the accelerometer
10009f7e:	783a      	ldrb	r2, [r7, #0]
10009f80:	00d2      	lsls	r2, r2, #3
10009f82:	2318      	movs	r3, #24
10009f84:	4398      	bics	r0, r3
10009f86:	4302      	orrs	r2, r0
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, c); // Write new ACCEL_CONFIG register value
10009f88:	b2d2      	uxtb	r2, r2
10009f8a:	211c      	movs	r1, #28
10009f8c:	2069      	movs	r0, #105	; 0x69
10009f8e:	47a0      	blx	r4

	// Set accelerometer sample rate configuration
	// It is possible to get a 4 kHz sample rate from the accelerometer by choosing 1 for
	// accel_fchoice_b bit [3]; in this case the bandwidth is 1.13 kHz
	c = readByte(MPU9250_ADDRESS, ACCEL_CONFIG2); // get current ACCEL_CONFIG2 register value
10009f90:	211d      	movs	r1, #29
10009f92:	2069      	movs	r0, #105	; 0x69
10009f94:	47b0      	blx	r6
	c = c & ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
10009f96:	23f0      	movs	r3, #240	; 0xf0
10009f98:	0002      	movs	r2, r0
10009f9a:	401a      	ands	r2, r3
	// c = c | 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
	c = c | 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz, delay 11.8 ms
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, c); // Write new ACCEL_CONFIG2 register value
10009f9c:	3bed      	subs	r3, #237	; 0xed
10009f9e:	431a      	orrs	r2, r3
10009fa0:	211d      	movs	r1, #29
10009fa2:	2069      	movs	r0, #105	; 0x69
10009fa4:	47a0      	blx	r4
	// Configure Interrupts and Bypass Enable
	// Set interrupt pin active high, push-pull, send 50 us interrupt pulses,
	// clear on ANY read, and enable I2C_BYPASS_EN so additional chips
	// can join the I2C bus and all can be controlled by the Arduino as master
	//writeByte(MPU9250_ADDRESS, INT_PIN_CFG, 0x22);
	writeByte(MPU9250_ADDRESS, INT_PIN_CFG, 0x12);
10009fa6:	2212      	movs	r2, #18
10009fa8:	2137      	movs	r1, #55	; 0x37
10009faa:	2069      	movs	r0, #105	; 0x69
10009fac:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x01);  // Enable data ready (bit 0) interrupt
10009fae:	2201      	movs	r2, #1
10009fb0:	2138      	movs	r1, #56	; 0x38
10009fb2:	2069      	movs	r0, #105	; 0x69
10009fb4:	47a0      	blx	r4
	delay_ms(100);
10009fb6:	2064      	movs	r0, #100	; 0x64
10009fb8:	47a8      	blx	r5
}
10009fba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10009fbc:	1001a564 	.word	0x1001a564
10009fc0:	10009a41 	.word	0x10009a41
10009fc4:	1000b029 	.word	0x1000b029
10009fc8:	10009ef5 	.word	0x10009ef5

10009fcc <sms_imu_selftest>:
	//uint32_t p5 = dest2[2] * 10000;
	//DBG_LOG("destX: %ld %ld %ld / %ld %ld %ld", p0, p1, p2, p3, p4, p5);
}
/* Self-test */
void sms_imu_selftest(float *destination)
{
10009fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
10009fce:	465f      	mov	r7, fp
10009fd0:	4656      	mov	r6, sl
10009fd2:	464d      	mov	r5, r9
10009fd4:	4644      	mov	r4, r8
10009fd6:	b4f0      	push	{r4, r5, r6, r7}
10009fd8:	b09d      	sub	sp, #116	; 0x74
10009fda:	9003      	str	r0, [sp, #12]
	uint8_t raw_data[6] = {0};
10009fdc:	2206      	movs	r2, #6
10009fde:	2100      	movs	r1, #0
10009fe0:	a81a      	add	r0, sp, #104	; 0x68
10009fe2:	4ce0      	ldr	r4, [pc, #896]	; (1000a364 <sms_imu_selftest+0x398>)
10009fe4:	47a0      	blx	r4
	uint8_t stest[6];
	int32_t g_avg[3] = {0}, a_avg[3] = {0}, a_stavg[3] = {0}, g_stavg[3] = {0};
10009fe6:	220c      	movs	r2, #12
10009fe8:	2100      	movs	r1, #0
10009fea:	a817      	add	r0, sp, #92	; 0x5c
10009fec:	47a0      	blx	r4
10009fee:	220c      	movs	r2, #12
10009ff0:	2100      	movs	r1, #0
10009ff2:	a814      	add	r0, sp, #80	; 0x50
10009ff4:	47a0      	blx	r4
10009ff6:	220c      	movs	r2, #12
10009ff8:	2100      	movs	r1, #0
10009ffa:	a811      	add	r0, sp, #68	; 0x44
10009ffc:	47a0      	blx	r4
10009ffe:	220c      	movs	r2, #12
1000a000:	2100      	movs	r1, #0
1000a002:	a80e      	add	r0, sp, #56	; 0x38
1000a004:	47a0      	blx	r4
	float factory_trim[6];
	uint8_t fs = 0;
	
	writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x00);	// Set gyro sample rate to 1 kHz
1000a006:	2200      	movs	r2, #0
1000a008:	2119      	movs	r1, #25
1000a00a:	2069      	movs	r0, #105	; 0x69
1000a00c:	4cd6      	ldr	r4, [pc, #856]	; (1000a368 <sms_imu_selftest+0x39c>)
1000a00e:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, CONFIG, 0x02);		// Set gyro sample rate to 1 kHz and DLPF to 92 Hz
1000a010:	2202      	movs	r2, #2
1000a012:	211a      	movs	r1, #26
1000a014:	2069      	movs	r0, #105	; 0x69
1000a016:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, GYRO_CONFIG, fs<<3);	// Set full scale range for the gyro to 250 dps
1000a018:	2200      	movs	r2, #0
1000a01a:	211b      	movs	r1, #27
1000a01c:	2069      	movs	r0, #105	; 0x69
1000a01e:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, 0x02);	// Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
1000a020:	2202      	movs	r2, #2
1000a022:	211d      	movs	r1, #29
1000a024:	2069      	movs	r0, #105	; 0x69
1000a026:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, fs<<3);	// Set full scale range for the accelerometer to 2 g
1000a028:	2200      	movs	r2, #0
1000a02a:	211c      	movs	r1, #28
1000a02c:	2069      	movs	r0, #105	; 0x69
1000a02e:	47a0      	blx	r4
1000a030:	25c8      	movs	r5, #200	; 0xc8
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
1000a032:	ac1a      	add	r4, sp, #104	; 0x68
1000a034:	4ecd      	ldr	r6, [pc, #820]	; (1000a36c <sms_imu_selftest+0x3a0>)
1000a036:	0023      	movs	r3, r4
1000a038:	2206      	movs	r2, #6
1000a03a:	213b      	movs	r1, #59	; 0x3b
1000a03c:	2069      	movs	r0, #105	; 0x69
1000a03e:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, 0x02);	// Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, fs<<3);	// Set full scale range for the accelerometer to 2 g
	
	for(uint8_t i = 0; i < 200; i++) { // get average current values of gyro and accelerometer
		readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 6, raw_data);
		a_avg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]);
1000a040:	7823      	ldrb	r3, [r4, #0]
1000a042:	021b      	lsls	r3, r3, #8
1000a044:	7862      	ldrb	r2, [r4, #1]
1000a046:	4313      	orrs	r3, r2
1000a048:	b21b      	sxth	r3, r3
1000a04a:	9a14      	ldr	r2, [sp, #80]	; 0x50
1000a04c:	4694      	mov	ip, r2
1000a04e:	4463      	add	r3, ip
1000a050:	9314      	str	r3, [sp, #80]	; 0x50
		a_avg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]);
1000a052:	78a3      	ldrb	r3, [r4, #2]
1000a054:	021b      	lsls	r3, r3, #8
1000a056:	78e2      	ldrb	r2, [r4, #3]
1000a058:	4313      	orrs	r3, r2
1000a05a:	b21b      	sxth	r3, r3
1000a05c:	9a15      	ldr	r2, [sp, #84]	; 0x54
1000a05e:	9200      	str	r2, [sp, #0]
1000a060:	4694      	mov	ip, r2
1000a062:	4463      	add	r3, ip
1000a064:	9315      	str	r3, [sp, #84]	; 0x54
		a_avg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]);
1000a066:	7923      	ldrb	r3, [r4, #4]
1000a068:	021b      	lsls	r3, r3, #8
1000a06a:	7962      	ldrb	r2, [r4, #5]
1000a06c:	4313      	orrs	r3, r2
1000a06e:	b21b      	sxth	r3, r3
1000a070:	9a16      	ldr	r2, [sp, #88]	; 0x58
1000a072:	9200      	str	r2, [sp, #0]
1000a074:	4694      	mov	ip, r2
1000a076:	4463      	add	r3, ip
1000a078:	9316      	str	r3, [sp, #88]	; 0x58
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
1000a07a:	0023      	movs	r3, r4
1000a07c:	2206      	movs	r2, #6
1000a07e:	2143      	movs	r1, #67	; 0x43
1000a080:	2069      	movs	r0, #105	; 0x69
1000a082:	47b0      	blx	r6
		a_avg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]);
		a_avg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]);
		a_avg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]);
		
		readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, raw_data);
		g_avg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]);
1000a084:	7823      	ldrb	r3, [r4, #0]
1000a086:	021b      	lsls	r3, r3, #8
1000a088:	7862      	ldrb	r2, [r4, #1]
1000a08a:	4313      	orrs	r3, r2
1000a08c:	b21b      	sxth	r3, r3
1000a08e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
1000a090:	4694      	mov	ip, r2
1000a092:	4463      	add	r3, ip
1000a094:	9317      	str	r3, [sp, #92]	; 0x5c
		g_avg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]);
1000a096:	78a3      	ldrb	r3, [r4, #2]
1000a098:	021b      	lsls	r3, r3, #8
1000a09a:	78e2      	ldrb	r2, [r4, #3]
1000a09c:	4313      	orrs	r3, r2
1000a09e:	b21b      	sxth	r3, r3
1000a0a0:	9a18      	ldr	r2, [sp, #96]	; 0x60
1000a0a2:	9200      	str	r2, [sp, #0]
1000a0a4:	4694      	mov	ip, r2
1000a0a6:	4463      	add	r3, ip
1000a0a8:	9318      	str	r3, [sp, #96]	; 0x60
		g_avg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]);
1000a0aa:	7923      	ldrb	r3, [r4, #4]
1000a0ac:	021b      	lsls	r3, r3, #8
1000a0ae:	7962      	ldrb	r2, [r4, #5]
1000a0b0:	4313      	orrs	r3, r2
1000a0b2:	b21b      	sxth	r3, r3
1000a0b4:	9a19      	ldr	r2, [sp, #100]	; 0x64
1000a0b6:	9200      	str	r2, [sp, #0]
1000a0b8:	4694      	mov	ip, r2
1000a0ba:	4463      	add	r3, ip
1000a0bc:	9319      	str	r3, [sp, #100]	; 0x64
1000a0be:	3d01      	subs	r5, #1
1000a0c0:	b2ed      	uxtb	r5, r5
	writeByte(MPU9250_ADDRESS, CONFIG, 0x02);		// Set gyro sample rate to 1 kHz and DLPF to 92 Hz
	writeByte(MPU9250_ADDRESS, GYRO_CONFIG, fs<<3);	// Set full scale range for the gyro to 250 dps
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, 0x02);	// Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, fs<<3);	// Set full scale range for the accelerometer to 2 g
	
	for(uint8_t i = 0; i < 200; i++) { // get average current values of gyro and accelerometer
1000a0c2:	2d00      	cmp	r5, #0
1000a0c4:	d1b7      	bne.n	1000a036 <sms_imu_selftest+0x6a>
1000a0c6:	2400      	movs	r4, #0
		g_avg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]);
		g_avg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]);
		g_avg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]);
	}
	for(uint8_t i = 0; i < 3; i++) { // get average of 200 values and store as average current readings
		a_avg[i] /= 200;
1000a0c8:	4ea9      	ldr	r6, [pc, #676]	; (1000a370 <sms_imu_selftest+0x3a4>)
1000a0ca:	ad14      	add	r5, sp, #80	; 0x50
1000a0cc:	21c8      	movs	r1, #200	; 0xc8
1000a0ce:	5960      	ldr	r0, [r4, r5]
1000a0d0:	47b0      	blx	r6
1000a0d2:	5160      	str	r0, [r4, r5]
		g_avg[i] /= 200;
1000a0d4:	ad17      	add	r5, sp, #92	; 0x5c
1000a0d6:	21c8      	movs	r1, #200	; 0xc8
1000a0d8:	5960      	ldr	r0, [r4, r5]
1000a0da:	47b0      	blx	r6
1000a0dc:	5160      	str	r0, [r4, r5]
1000a0de:	3404      	adds	r4, #4
		readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, raw_data);
		g_avg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]);
		g_avg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]);
		g_avg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]);
	}
	for(uint8_t i = 0; i < 3; i++) { // get average of 200 values and store as average current readings
1000a0e0:	2c0c      	cmp	r4, #12
1000a0e2:	d1f2      	bne.n	1000a0ca <sms_imu_selftest+0xfe>
		a_avg[i] /= 200;
		g_avg[i] /= 200;
	}
	
	// Configure the accelerometer for self-test
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set accelerometer range to +/- 2 g
1000a0e4:	22e0      	movs	r2, #224	; 0xe0
1000a0e6:	211c      	movs	r1, #28
1000a0e8:	2069      	movs	r0, #105	; 0x69
1000a0ea:	4c9f      	ldr	r4, [pc, #636]	; (1000a368 <sms_imu_selftest+0x39c>)
1000a0ec:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set (MPU9250_ADDRESS, GYRO_CONFIG,  0xE0); // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
1000a0ee:	22e0      	movs	r2, #224	; 0xe0
1000a0f0:	211c      	movs	r1, #28
1000a0f2:	2069      	movs	r0, #105	; 0x69
1000a0f4:	47a0      	blx	r4
	delay_ms(25);  // Delay a while to let the device stabilize
1000a0f6:	2019      	movs	r0, #25
1000a0f8:	4b9e      	ldr	r3, [pc, #632]	; (1000a374 <sms_imu_selftest+0x3a8>)
1000a0fa:	4798      	blx	r3
1000a0fc:	25c8      	movs	r5, #200	; 0xc8
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
1000a0fe:	ac1a      	add	r4, sp, #104	; 0x68
1000a100:	4e9a      	ldr	r6, [pc, #616]	; (1000a36c <sms_imu_selftest+0x3a0>)
1000a102:	0023      	movs	r3, r4
1000a104:	2206      	movs	r2, #6
1000a106:	213b      	movs	r1, #59	; 0x3b
1000a108:	2069      	movs	r0, #105	; 0x69
1000a10a:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set (MPU9250_ADDRESS, GYRO_CONFIG,  0xE0); // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
	delay_ms(25);  // Delay a while to let the device stabilize
	
	for(uint8_t i = 0; i < 200; i++) {  // get average self-test values of gyro and accelerometer
		readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 6, raw_data);  // Read the six raw data registers into data array
		a_stavg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
1000a10c:	7823      	ldrb	r3, [r4, #0]
1000a10e:	021b      	lsls	r3, r3, #8
1000a110:	7862      	ldrb	r2, [r4, #1]
1000a112:	4313      	orrs	r3, r2
1000a114:	b21b      	sxth	r3, r3
1000a116:	9a11      	ldr	r2, [sp, #68]	; 0x44
1000a118:	4694      	mov	ip, r2
1000a11a:	4463      	add	r3, ip
1000a11c:	9311      	str	r3, [sp, #68]	; 0x44
		a_stavg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]) ;
1000a11e:	78a3      	ldrb	r3, [r4, #2]
1000a120:	021b      	lsls	r3, r3, #8
1000a122:	78e2      	ldrb	r2, [r4, #3]
1000a124:	4313      	orrs	r3, r2
1000a126:	b21b      	sxth	r3, r3
1000a128:	9a12      	ldr	r2, [sp, #72]	; 0x48
1000a12a:	9200      	str	r2, [sp, #0]
1000a12c:	4694      	mov	ip, r2
1000a12e:	4463      	add	r3, ip
1000a130:	9312      	str	r3, [sp, #72]	; 0x48
		a_stavg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]) ;
1000a132:	7923      	ldrb	r3, [r4, #4]
1000a134:	021b      	lsls	r3, r3, #8
1000a136:	7962      	ldrb	r2, [r4, #5]
1000a138:	4313      	orrs	r3, r2
1000a13a:	b21b      	sxth	r3, r3
1000a13c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
1000a13e:	9200      	str	r2, [sp, #0]
1000a140:	4694      	mov	ip, r2
1000a142:	4463      	add	r3, ip
1000a144:	9313      	str	r3, [sp, #76]	; 0x4c
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
1000a146:	0023      	movs	r3, r4
1000a148:	2206      	movs	r2, #6
1000a14a:	2143      	movs	r1, #67	; 0x43
1000a14c:	2069      	movs	r0, #105	; 0x69
1000a14e:	47b0      	blx	r6
		a_stavg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
		a_stavg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]) ;
		a_stavg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]) ;
		
		readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, raw_data);  // Read the six raw data registers sequentially into data array
		g_stavg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
1000a150:	7823      	ldrb	r3, [r4, #0]
1000a152:	021b      	lsls	r3, r3, #8
1000a154:	7862      	ldrb	r2, [r4, #1]
1000a156:	4313      	orrs	r3, r2
1000a158:	b21b      	sxth	r3, r3
1000a15a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1000a15c:	4694      	mov	ip, r2
1000a15e:	4463      	add	r3, ip
1000a160:	930e      	str	r3, [sp, #56]	; 0x38
		g_stavg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]) ;
1000a162:	78a3      	ldrb	r3, [r4, #2]
1000a164:	021b      	lsls	r3, r3, #8
1000a166:	78e2      	ldrb	r2, [r4, #3]
1000a168:	4313      	orrs	r3, r2
1000a16a:	b21b      	sxth	r3, r3
1000a16c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
1000a16e:	9200      	str	r2, [sp, #0]
1000a170:	4694      	mov	ip, r2
1000a172:	4463      	add	r3, ip
1000a174:	930f      	str	r3, [sp, #60]	; 0x3c
		g_stavg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]) ;
1000a176:	7923      	ldrb	r3, [r4, #4]
1000a178:	021b      	lsls	r3, r3, #8
1000a17a:	7962      	ldrb	r2, [r4, #5]
1000a17c:	4313      	orrs	r3, r2
1000a17e:	b21b      	sxth	r3, r3
1000a180:	9a10      	ldr	r2, [sp, #64]	; 0x40
1000a182:	9200      	str	r2, [sp, #0]
1000a184:	4694      	mov	ip, r2
1000a186:	4463      	add	r3, ip
1000a188:	9310      	str	r3, [sp, #64]	; 0x40
1000a18a:	3d01      	subs	r5, #1
1000a18c:	b2ed      	uxtb	r5, r5
	// Configure the accelerometer for self-test
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set accelerometer range to +/- 2 g
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set (MPU9250_ADDRESS, GYRO_CONFIG,  0xE0); // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
	delay_ms(25);  // Delay a while to let the device stabilize
	
	for(uint8_t i = 0; i < 200; i++) {  // get average self-test values of gyro and accelerometer
1000a18e:	2d00      	cmp	r5, #0
1000a190:	d1b7      	bne.n	1000a102 <sms_imu_selftest+0x136>
1000a192:	2400      	movs	r4, #0
		g_stavg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
		g_stavg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]) ;
		g_stavg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]) ;
	}
	for(uint8_t i = 0; i < 3; i++) { // get average of 200 values and store as average self-test readings
		a_stavg[i] /= 200;
1000a194:	4e76      	ldr	r6, [pc, #472]	; (1000a370 <sms_imu_selftest+0x3a4>)
1000a196:	ad11      	add	r5, sp, #68	; 0x44
1000a198:	21c8      	movs	r1, #200	; 0xc8
1000a19a:	5960      	ldr	r0, [r4, r5]
1000a19c:	47b0      	blx	r6
1000a19e:	5160      	str	r0, [r4, r5]
		g_stavg[i] /= 200;
1000a1a0:	ad0e      	add	r5, sp, #56	; 0x38
1000a1a2:	21c8      	movs	r1, #200	; 0xc8
1000a1a4:	5960      	ldr	r0, [r4, r5]
1000a1a6:	47b0      	blx	r6
1000a1a8:	5160      	str	r0, [r4, r5]
1000a1aa:	3404      	adds	r4, #4
		readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, raw_data);  // Read the six raw data registers sequentially into data array
		g_stavg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
		g_stavg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]) ;
		g_stavg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]) ;
	}
	for(uint8_t i = 0; i < 3; i++) { // get average of 200 values and store as average self-test readings
1000a1ac:	2c0c      	cmp	r4, #12
1000a1ae:	d1f2      	bne.n	1000a196 <sms_imu_selftest+0x1ca>
		a_stavg[i] /= 200;
		g_stavg[i] /= 200;
	}

	// Configure the gyro and accelerometer for normal operation
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0x00);
1000a1b0:	2200      	movs	r2, #0
1000a1b2:	211c      	movs	r1, #28
1000a1b4:	2069      	movs	r0, #105	; 0x69
1000a1b6:	4c6c      	ldr	r4, [pc, #432]	; (1000a368 <sms_imu_selftest+0x39c>)
1000a1b8:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, GYRO_CONFIG,  0x00);
1000a1ba:	2200      	movs	r2, #0
1000a1bc:	211b      	movs	r1, #27
1000a1be:	2069      	movs	r0, #105	; 0x69
1000a1c0:	47a0      	blx	r4
	delay_ms(25);  // Delay a while to let the device stabilize
1000a1c2:	2019      	movs	r0, #25
1000a1c4:	4b6b      	ldr	r3, [pc, #428]	; (1000a374 <sms_imu_selftest+0x3a8>)
1000a1c6:	4798      	blx	r3

	// Retrieve accelerometer and gyro factory Self-Test Code from USR_Reg
	stest[0] = readByte(MPU9250_ADDRESS, SELF_TEST_X_ACCEL); // X-axis accel self-test results
1000a1c8:	210d      	movs	r1, #13
1000a1ca:	2069      	movs	r0, #105	; 0x69
1000a1cc:	4d6a      	ldr	r5, [pc, #424]	; (1000a378 <sms_imu_selftest+0x3ac>)
1000a1ce:	47a8      	blx	r5
1000a1d0:	0004      	movs	r4, r0
	stest[1] = readByte(MPU9250_ADDRESS, SELF_TEST_Y_ACCEL); // Y-axis accel self-test results
1000a1d2:	210e      	movs	r1, #14
1000a1d4:	2069      	movs	r0, #105	; 0x69
1000a1d6:	47a8      	blx	r5
1000a1d8:	9000      	str	r0, [sp, #0]
	stest[2] = readByte(MPU9250_ADDRESS, SELF_TEST_Z_ACCEL); // Z-axis accel self-test results
1000a1da:	210f      	movs	r1, #15
1000a1dc:	2069      	movs	r0, #105	; 0x69
1000a1de:	47a8      	blx	r5
1000a1e0:	9004      	str	r0, [sp, #16]
	stest[3] = readByte(MPU9250_ADDRESS, SELF_TEST_X_GYRO);  // X-axis gyro self-test results
1000a1e2:	2100      	movs	r1, #0
1000a1e4:	2069      	movs	r0, #105	; 0x69
1000a1e6:	47a8      	blx	r5
1000a1e8:	9005      	str	r0, [sp, #20]
	stest[4] = readByte(MPU9250_ADDRESS, SELF_TEST_Y_GYRO);  // Y-axis gyro self-test results
1000a1ea:	2101      	movs	r1, #1
1000a1ec:	2069      	movs	r0, #105	; 0x69
1000a1ee:	47a8      	blx	r5
1000a1f0:	9006      	str	r0, [sp, #24]
	stest[5] = readByte(MPU9250_ADDRESS, SELF_TEST_Z_GYRO);  // Z-axis gyro self-test results
1000a1f2:	2102      	movs	r1, #2
1000a1f4:	2069      	movs	r0, #105	; 0x69
1000a1f6:	47a8      	blx	r5
1000a1f8:	9007      	str	r0, [sp, #28]

	// Retrieve factory self-test value from self-test code reads
	factory_trim[0] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[0] - 1.0) )); // FT[Xa] factory trim calculation
1000a1fa:	4b60      	ldr	r3, [pc, #384]	; (1000a37c <sms_imu_selftest+0x3b0>)
1000a1fc:	469a      	mov	sl, r3
1000a1fe:	0020      	movs	r0, r4
1000a200:	4798      	blx	r3
1000a202:	4b5f      	ldr	r3, [pc, #380]	; (1000a380 <sms_imu_selftest+0x3b4>)
1000a204:	4699      	mov	r9, r3
1000a206:	4798      	blx	r3
1000a208:	4e5e      	ldr	r6, [pc, #376]	; (1000a384 <sms_imu_selftest+0x3b8>)
1000a20a:	2200      	movs	r2, #0
1000a20c:	4b5e      	ldr	r3, [pc, #376]	; (1000a388 <sms_imu_selftest+0x3bc>)
1000a20e:	47b0      	blx	r6
1000a210:	0002      	movs	r2, r0
1000a212:	000b      	movs	r3, r1
1000a214:	485d      	ldr	r0, [pc, #372]	; (1000a38c <sms_imu_selftest+0x3c0>)
1000a216:	495e      	ldr	r1, [pc, #376]	; (1000a390 <sms_imu_selftest+0x3c4>)
1000a218:	4f5e      	ldr	r7, [pc, #376]	; (1000a394 <sms_imu_selftest+0x3c8>)
1000a21a:	47b8      	blx	r7
1000a21c:	4d5e      	ldr	r5, [pc, #376]	; (1000a398 <sms_imu_selftest+0x3cc>)
1000a21e:	2200      	movs	r2, #0
1000a220:	4b5e      	ldr	r3, [pc, #376]	; (1000a39c <sms_imu_selftest+0x3d0>)
1000a222:	47a8      	blx	r5
1000a224:	4c5e      	ldr	r4, [pc, #376]	; (1000a3a0 <sms_imu_selftest+0x3d4>)
1000a226:	47a0      	blx	r4
1000a228:	9008      	str	r0, [sp, #32]
	factory_trim[1] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[1] - 1.0) )); // FT[Ya] factory trim calculation
1000a22a:	9800      	ldr	r0, [sp, #0]
1000a22c:	47d0      	blx	sl
1000a22e:	47c8      	blx	r9
1000a230:	2200      	movs	r2, #0
1000a232:	4b55      	ldr	r3, [pc, #340]	; (1000a388 <sms_imu_selftest+0x3bc>)
1000a234:	47b0      	blx	r6
1000a236:	0002      	movs	r2, r0
1000a238:	000b      	movs	r3, r1
1000a23a:	4854      	ldr	r0, [pc, #336]	; (1000a38c <sms_imu_selftest+0x3c0>)
1000a23c:	4954      	ldr	r1, [pc, #336]	; (1000a390 <sms_imu_selftest+0x3c4>)
1000a23e:	47b8      	blx	r7
1000a240:	2200      	movs	r2, #0
1000a242:	4b56      	ldr	r3, [pc, #344]	; (1000a39c <sms_imu_selftest+0x3d0>)
1000a244:	47a8      	blx	r5
1000a246:	47a0      	blx	r4
1000a248:	9009      	str	r0, [sp, #36]	; 0x24
	factory_trim[2] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[2] - 1.0) )); // FT[Za] factory trim calculation
1000a24a:	9804      	ldr	r0, [sp, #16]
1000a24c:	47d0      	blx	sl
1000a24e:	47c8      	blx	r9
1000a250:	2200      	movs	r2, #0
1000a252:	4b4d      	ldr	r3, [pc, #308]	; (1000a388 <sms_imu_selftest+0x3bc>)
1000a254:	47b0      	blx	r6
1000a256:	0002      	movs	r2, r0
1000a258:	000b      	movs	r3, r1
1000a25a:	484c      	ldr	r0, [pc, #304]	; (1000a38c <sms_imu_selftest+0x3c0>)
1000a25c:	494c      	ldr	r1, [pc, #304]	; (1000a390 <sms_imu_selftest+0x3c4>)
1000a25e:	47b8      	blx	r7
1000a260:	2200      	movs	r2, #0
1000a262:	4b4e      	ldr	r3, [pc, #312]	; (1000a39c <sms_imu_selftest+0x3d0>)
1000a264:	47a8      	blx	r5
1000a266:	47a0      	blx	r4
1000a268:	900a      	str	r0, [sp, #40]	; 0x28
	factory_trim[3] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[3] - 1.0) )); // FT[Xg] factory trim calculation
1000a26a:	9805      	ldr	r0, [sp, #20]
1000a26c:	47d0      	blx	sl
1000a26e:	47c8      	blx	r9
1000a270:	2200      	movs	r2, #0
1000a272:	4b45      	ldr	r3, [pc, #276]	; (1000a388 <sms_imu_selftest+0x3bc>)
1000a274:	47b0      	blx	r6
1000a276:	0002      	movs	r2, r0
1000a278:	000b      	movs	r3, r1
1000a27a:	4844      	ldr	r0, [pc, #272]	; (1000a38c <sms_imu_selftest+0x3c0>)
1000a27c:	4944      	ldr	r1, [pc, #272]	; (1000a390 <sms_imu_selftest+0x3c4>)
1000a27e:	47b8      	blx	r7
1000a280:	2200      	movs	r2, #0
1000a282:	4b46      	ldr	r3, [pc, #280]	; (1000a39c <sms_imu_selftest+0x3d0>)
1000a284:	47a8      	blx	r5
1000a286:	47a0      	blx	r4
1000a288:	900b      	str	r0, [sp, #44]	; 0x2c
	factory_trim[4] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[4] - 1.0) )); // FT[Yg] factory trim calculation
1000a28a:	9806      	ldr	r0, [sp, #24]
1000a28c:	47d0      	blx	sl
1000a28e:	47c8      	blx	r9
1000a290:	2200      	movs	r2, #0
1000a292:	4b3d      	ldr	r3, [pc, #244]	; (1000a388 <sms_imu_selftest+0x3bc>)
1000a294:	47b0      	blx	r6
1000a296:	0002      	movs	r2, r0
1000a298:	000b      	movs	r3, r1
1000a29a:	483c      	ldr	r0, [pc, #240]	; (1000a38c <sms_imu_selftest+0x3c0>)
1000a29c:	493c      	ldr	r1, [pc, #240]	; (1000a390 <sms_imu_selftest+0x3c4>)
1000a29e:	47b8      	blx	r7
1000a2a0:	2200      	movs	r2, #0
1000a2a2:	4b3e      	ldr	r3, [pc, #248]	; (1000a39c <sms_imu_selftest+0x3d0>)
1000a2a4:	47a8      	blx	r5
1000a2a6:	47a0      	blx	r4
1000a2a8:	900c      	str	r0, [sp, #48]	; 0x30
	factory_trim[5] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[5] - 1.0) )); // FT[Zg] factory trim calculation
1000a2aa:	9807      	ldr	r0, [sp, #28]
1000a2ac:	47d0      	blx	sl
1000a2ae:	47c8      	blx	r9
1000a2b0:	2200      	movs	r2, #0
1000a2b2:	4b35      	ldr	r3, [pc, #212]	; (1000a388 <sms_imu_selftest+0x3bc>)
1000a2b4:	47b0      	blx	r6
1000a2b6:	0002      	movs	r2, r0
1000a2b8:	000b      	movs	r3, r1
1000a2ba:	4834      	ldr	r0, [pc, #208]	; (1000a38c <sms_imu_selftest+0x3c0>)
1000a2bc:	4934      	ldr	r1, [pc, #208]	; (1000a390 <sms_imu_selftest+0x3c4>)
1000a2be:	47b8      	blx	r7
1000a2c0:	2200      	movs	r2, #0
1000a2c2:	4b36      	ldr	r3, [pc, #216]	; (1000a39c <sms_imu_selftest+0x3d0>)
1000a2c4:	47a8      	blx	r5
1000a2c6:	47a0      	blx	r4
1000a2c8:	900d      	str	r0, [sp, #52]	; 0x34
1000a2ca:	2400      	movs	r4, #0
	
	// Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
	// To get percent, must multiply by 100
	for (int i = 0; i < 3; i++) {
		destination[i]   = 100.0*((float)(a_stavg[i] - a_avg[i]))/factory_trim[i] - 100.;   // Report percent differences
1000a2cc:	4b35      	ldr	r3, [pc, #212]	; (1000a3a4 <sms_imu_selftest+0x3d8>)
1000a2ce:	4699      	mov	r9, r3
1000a2d0:	4d2b      	ldr	r5, [pc, #172]	; (1000a380 <sms_imu_selftest+0x3b4>)
1000a2d2:	4b31      	ldr	r3, [pc, #196]	; (1000a398 <sms_imu_selftest+0x3cc>)
1000a2d4:	4698      	mov	r8, r3
1000a2d6:	4b34      	ldr	r3, [pc, #208]	; (1000a3a8 <sms_imu_selftest+0x3dc>)
1000a2d8:	469a      	mov	sl, r3
1000a2da:	4f2a      	ldr	r7, [pc, #168]	; (1000a384 <sms_imu_selftest+0x3b8>)
1000a2dc:	4e30      	ldr	r6, [pc, #192]	; (1000a3a0 <sms_imu_selftest+0x3d4>)
1000a2de:	ab11      	add	r3, sp, #68	; 0x44
1000a2e0:	58e3      	ldr	r3, [r4, r3]
1000a2e2:	aa14      	add	r2, sp, #80	; 0x50
1000a2e4:	58a0      	ldr	r0, [r4, r2]
1000a2e6:	1a18      	subs	r0, r3, r0
1000a2e8:	47c8      	blx	r9
1000a2ea:	47a8      	blx	r5
1000a2ec:	2200      	movs	r2, #0
1000a2ee:	4b2f      	ldr	r3, [pc, #188]	; (1000a3ac <sms_imu_selftest+0x3e0>)
1000a2f0:	47c0      	blx	r8
1000a2f2:	9000      	str	r0, [sp, #0]
1000a2f4:	9101      	str	r1, [sp, #4]
1000a2f6:	ab08      	add	r3, sp, #32
1000a2f8:	58e0      	ldr	r0, [r4, r3]
1000a2fa:	47a8      	blx	r5
1000a2fc:	0002      	movs	r2, r0
1000a2fe:	000b      	movs	r3, r1
1000a300:	9800      	ldr	r0, [sp, #0]
1000a302:	9901      	ldr	r1, [sp, #4]
1000a304:	47d0      	blx	sl
1000a306:	2200      	movs	r2, #0
1000a308:	4b28      	ldr	r3, [pc, #160]	; (1000a3ac <sms_imu_selftest+0x3e0>)
1000a30a:	47b8      	blx	r7
1000a30c:	47b0      	blx	r6
1000a30e:	9b03      	ldr	r3, [sp, #12]
1000a310:	5118      	str	r0, [r3, r4]
		destination[i+3] = 100.0*((float)(g_stavg[i] - g_avg[i]))/factory_trim[i+3] - 100.; // Report percent differences
1000a312:	469b      	mov	fp, r3
1000a314:	44a3      	add	fp, r4
1000a316:	ab0e      	add	r3, sp, #56	; 0x38
1000a318:	58e3      	ldr	r3, [r4, r3]
1000a31a:	aa17      	add	r2, sp, #92	; 0x5c
1000a31c:	58a0      	ldr	r0, [r4, r2]
1000a31e:	1a18      	subs	r0, r3, r0
1000a320:	47c8      	blx	r9
1000a322:	47a8      	blx	r5
1000a324:	2200      	movs	r2, #0
1000a326:	4b21      	ldr	r3, [pc, #132]	; (1000a3ac <sms_imu_selftest+0x3e0>)
1000a328:	47c0      	blx	r8
1000a32a:	9000      	str	r0, [sp, #0]
1000a32c:	9101      	str	r1, [sp, #4]
1000a32e:	0023      	movs	r3, r4
1000a330:	aa08      	add	r2, sp, #32
1000a332:	4694      	mov	ip, r2
1000a334:	4463      	add	r3, ip
1000a336:	68d8      	ldr	r0, [r3, #12]
1000a338:	47a8      	blx	r5
1000a33a:	0002      	movs	r2, r0
1000a33c:	000b      	movs	r3, r1
1000a33e:	9800      	ldr	r0, [sp, #0]
1000a340:	9901      	ldr	r1, [sp, #4]
1000a342:	47d0      	blx	sl
1000a344:	2200      	movs	r2, #0
1000a346:	4b19      	ldr	r3, [pc, #100]	; (1000a3ac <sms_imu_selftest+0x3e0>)
1000a348:	47b8      	blx	r7
1000a34a:	47b0      	blx	r6
1000a34c:	465b      	mov	r3, fp
1000a34e:	60d8      	str	r0, [r3, #12]
1000a350:	3404      	adds	r4, #4
	factory_trim[4] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[4] - 1.0) )); // FT[Yg] factory trim calculation
	factory_trim[5] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[5] - 1.0) )); // FT[Zg] factory trim calculation
	
	// Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
	// To get percent, must multiply by 100
	for (int i = 0; i < 3; i++) {
1000a352:	2c0c      	cmp	r4, #12
1000a354:	d1c3      	bne.n	1000a2de <sms_imu_selftest+0x312>
		destination[i]   = 100.0*((float)(a_stavg[i] - a_avg[i]))/factory_trim[i] - 100.;   // Report percent differences
		destination[i+3] = 100.0*((float)(g_stavg[i] - g_avg[i]))/factory_trim[i+3] - 100.; // Report percent differences
	}

}
1000a356:	b01d      	add	sp, #116	; 0x74
1000a358:	bc3c      	pop	{r2, r3, r4, r5}
1000a35a:	4690      	mov	r8, r2
1000a35c:	4699      	mov	r9, r3
1000a35e:	46a2      	mov	sl, r4
1000a360:	46ab      	mov	fp, r5
1000a362:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a364:	10016609 	.word	0x10016609
1000a368:	10009a41 	.word	0x10009a41
1000a36c:	10009781 	.word	0x10009781
1000a370:	100136d5 	.word	0x100136d5
1000a374:	1000b029 	.word	0x1000b029
1000a378:	10009ef5 	.word	0x10009ef5
1000a37c:	10014719 	.word	0x10014719
1000a380:	10016371 	.word	0x10016371
1000a384:	10015b29 	.word	0x10015b29
1000a388:	3ff00000 	.word	0x3ff00000
1000a38c:	c28f5c29 	.word	0xc28f5c29
1000a390:	3ff028f5 	.word	0x3ff028f5
1000a394:	1001221d 	.word	0x1001221d
1000a398:	10015635 	.word	0x10015635
1000a39c:	40a47800 	.word	0x40a47800
1000a3a0:	10016419 	.word	0x10016419
1000a3a4:	10014689 	.word	0x10014689
1000a3a8:	10014ded 	.word	0x10014ded
1000a3ac:	40590000 	.word	0x40590000

1000a3b0 <sms_imu_mpu_check>:
	return 0;
}

/* Sensor setup functions... */
/* Check if MPU responds and make a self test */
int sms_imu_mpu_check(void) {
1000a3b0:	b510      	push	{r4, lr}
	int retVal = -1;
	uint8_t c = readByte(MPU9250_ADDRESS, WHO_AM_I_MPU9250);
1000a3b2:	2175      	movs	r1, #117	; 0x75
1000a3b4:	2069      	movs	r0, #105	; 0x69
1000a3b6:	4b06      	ldr	r3, [pc, #24]	; (1000a3d0 <sms_imu_mpu_check+0x20>)
1000a3b8:	4798      	blx	r3
	if(c == 0x71) {
1000a3ba:	2871      	cmp	r0, #113	; 0x71
1000a3bc:	d104      	bne.n	1000a3c8 <sms_imu_mpu_check+0x18>
		//DBG_LOG("[sms_mpu_check]\t\tMPU-9250 is online...");
		sms_imu_selftest(imu_device.config.self_test);
1000a3be:	4805      	ldr	r0, [pc, #20]	; (1000a3d4 <sms_imu_mpu_check+0x24>)
1000a3c0:	4b05      	ldr	r3, [pc, #20]	; (1000a3d8 <sms_imu_mpu_check+0x28>)
1000a3c2:	4798      	blx	r3
		//DBG_LOG("[sms_mpu_check]\t\tMPU-9250 self-test passed");
		retVal = 0;
1000a3c4:	2000      	movs	r0, #0
1000a3c6:	e001      	b.n	1000a3cc <sms_imu_mpu_check+0x1c>
}

/* Sensor setup functions... */
/* Check if MPU responds and make a self test */
int sms_imu_mpu_check(void) {
	int retVal = -1;
1000a3c8:	2001      	movs	r0, #1
1000a3ca:	4240      	negs	r0, r0
		sms_imu_selftest(imu_device.config.self_test);
		//DBG_LOG("[sms_mpu_check]\t\tMPU-9250 self-test passed");
		retVal = 0;
	}
	return retVal;
}
1000a3cc:	bd10      	pop	{r4, pc}
1000a3ce:	46c0      	nop			; (mov r8, r8)
1000a3d0:	10009ef5 	.word	0x10009ef5
1000a3d4:	1001a568 	.word	0x1001a568
1000a3d8:	10009fcd 	.word	0x10009fcd

1000a3dc <sms_imu_startup>:
		send_plf_int_msg_ind(SMS_MPU_DRDY_PIN, GPIO_CALLBACK_RISING, NULL, 0);
	}
}
/* Startup function */
int sms_imu_startup(void)
{
1000a3dc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a3de:	b087      	sub	sp, #28
	/* MPU */
	if(sms_imu_mpu_check()) return -1;
1000a3e0:	4b22      	ldr	r3, [pc, #136]	; (1000a46c <sms_imu_startup+0x90>)
1000a3e2:	4798      	blx	r3
1000a3e4:	2800      	cmp	r0, #0
1000a3e6:	d139      	bne.n	1000a45c <sms_imu_startup+0x80>
	sms_imu_mpu_calibrate(imu_device.config.gyro_bias, imu_device.config.accel_bias);
1000a3e8:	4c21      	ldr	r4, [pc, #132]	; (1000a470 <sms_imu_startup+0x94>)
1000a3ea:	0020      	movs	r0, r4
1000a3ec:	380c      	subs	r0, #12
1000a3ee:	0021      	movs	r1, r4
1000a3f0:	4b20      	ldr	r3, [pc, #128]	; (1000a474 <sms_imu_startup+0x98>)
1000a3f2:	4798      	blx	r3
	DBG_LOG("MPU calibrated... bias values: %ld %ld %ld / %ld %ld %ld", (uint32_t)(imu_device.config.gyro_bias[0] * 10000), (uint32_t)(imu_device.config.gyro_bias[1] * 10000), (uint32_t)(imu_device.config.gyro_bias[2] * 10000), (uint32_t)(imu_device.config.accel_bias[0] * 10000), (uint32_t)(imu_device.config.accel_bias[1] * 10000), (uint32_t)(imu_device.config.accel_bias[2] * 10000));
1000a3f4:	4820      	ldr	r0, [pc, #128]	; (1000a478 <sms_imu_startup+0x9c>)
1000a3f6:	4b21      	ldr	r3, [pc, #132]	; (1000a47c <sms_imu_startup+0xa0>)
1000a3f8:	4798      	blx	r3
1000a3fa:	3c28      	subs	r4, #40	; 0x28
1000a3fc:	4e20      	ldr	r6, [pc, #128]	; (1000a480 <sms_imu_startup+0xa4>)
1000a3fe:	4921      	ldr	r1, [pc, #132]	; (1000a484 <sms_imu_startup+0xa8>)
1000a400:	6a60      	ldr	r0, [r4, #36]	; 0x24
1000a402:	47b0      	blx	r6
1000a404:	4d20      	ldr	r5, [pc, #128]	; (1000a488 <sms_imu_startup+0xac>)
1000a406:	47a8      	blx	r5
1000a408:	0007      	movs	r7, r0
1000a40a:	491e      	ldr	r1, [pc, #120]	; (1000a484 <sms_imu_startup+0xa8>)
1000a40c:	6a20      	ldr	r0, [r4, #32]
1000a40e:	47b0      	blx	r6
1000a410:	47a8      	blx	r5
1000a412:	9004      	str	r0, [sp, #16]
1000a414:	491b      	ldr	r1, [pc, #108]	; (1000a484 <sms_imu_startup+0xa8>)
1000a416:	69e0      	ldr	r0, [r4, #28]
1000a418:	47b0      	blx	r6
1000a41a:	47a8      	blx	r5
1000a41c:	9005      	str	r0, [sp, #20]
1000a41e:	4919      	ldr	r1, [pc, #100]	; (1000a484 <sms_imu_startup+0xa8>)
1000a420:	6b20      	ldr	r0, [r4, #48]	; 0x30
1000a422:	47b0      	blx	r6
1000a424:	47a8      	blx	r5
1000a426:	9002      	str	r0, [sp, #8]
1000a428:	4916      	ldr	r1, [pc, #88]	; (1000a484 <sms_imu_startup+0xa8>)
1000a42a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
1000a42c:	47b0      	blx	r6
1000a42e:	47a8      	blx	r5
1000a430:	9001      	str	r0, [sp, #4]
1000a432:	4914      	ldr	r1, [pc, #80]	; (1000a484 <sms_imu_startup+0xa8>)
1000a434:	6aa0      	ldr	r0, [r4, #40]	; 0x28
1000a436:	47b0      	blx	r6
1000a438:	47a8      	blx	r5
1000a43a:	9000      	str	r0, [sp, #0]
1000a43c:	003b      	movs	r3, r7
1000a43e:	9a04      	ldr	r2, [sp, #16]
1000a440:	9905      	ldr	r1, [sp, #20]
1000a442:	4812      	ldr	r0, [pc, #72]	; (1000a48c <sms_imu_startup+0xb0>)
1000a444:	4c12      	ldr	r4, [pc, #72]	; (1000a490 <sms_imu_startup+0xb4>)
1000a446:	47a0      	blx	r4
	sms_imu_mpu_initialize();
1000a448:	4b12      	ldr	r3, [pc, #72]	; (1000a494 <sms_imu_startup+0xb8>)
1000a44a:	4798      	blx	r3
	
	/* Compass */
	if(sms_imu_comp_check()) return -1;
1000a44c:	4b12      	ldr	r3, [pc, #72]	; (1000a498 <sms_imu_startup+0xbc>)
1000a44e:	4798      	blx	r3
1000a450:	1e04      	subs	r4, r0, #0
1000a452:	d106      	bne.n	1000a462 <sms_imu_startup+0x86>
	sms_imu_comp_initialize(imu_device.config.mag_calibration);
1000a454:	4811      	ldr	r0, [pc, #68]	; (1000a49c <sms_imu_startup+0xc0>)
1000a456:	4b12      	ldr	r3, [pc, #72]	; (1000a4a0 <sms_imu_startup+0xc4>)
1000a458:	4798      	blx	r3
	//DBG_LOG("Compass initialized... calibration values: %ld %ld %ld", (uint32_t)(mpu_device.config.mag_calibration[0] * 10000), (uint32_t)(mpu_device.config.mag_calibration[1] * 10000), (uint32_t)(mpu_device.config.mag_calibration[2] * 10000));
	
	return 0;
1000a45a:	e004      	b.n	1000a466 <sms_imu_startup+0x8a>
}
/* Startup function */
int sms_imu_startup(void)
{
	/* MPU */
	if(sms_imu_mpu_check()) return -1;
1000a45c:	2401      	movs	r4, #1
1000a45e:	4264      	negs	r4, r4
1000a460:	e001      	b.n	1000a466 <sms_imu_startup+0x8a>
	sms_imu_mpu_calibrate(imu_device.config.gyro_bias, imu_device.config.accel_bias);
	DBG_LOG("MPU calibrated... bias values: %ld %ld %ld / %ld %ld %ld", (uint32_t)(imu_device.config.gyro_bias[0] * 10000), (uint32_t)(imu_device.config.gyro_bias[1] * 10000), (uint32_t)(imu_device.config.gyro_bias[2] * 10000), (uint32_t)(imu_device.config.accel_bias[0] * 10000), (uint32_t)(imu_device.config.accel_bias[1] * 10000), (uint32_t)(imu_device.config.accel_bias[2] * 10000));
	sms_imu_mpu_initialize();
	
	/* Compass */
	if(sms_imu_comp_check()) return -1;
1000a462:	2401      	movs	r4, #1
1000a464:	4264      	negs	r4, r4
	sms_imu_comp_initialize(imu_device.config.mag_calibration);
	//DBG_LOG("Compass initialized... calibration values: %ld %ld %ld", (uint32_t)(mpu_device.config.mag_calibration[0] * 10000), (uint32_t)(mpu_device.config.mag_calibration[1] * 10000), (uint32_t)(mpu_device.config.mag_calibration[2] * 10000));
	
	return 0;
}
1000a466:	0020      	movs	r0, r4
1000a468:	b007      	add	sp, #28
1000a46a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a46c:	1000a3b1 	.word	0x1000a3b1
1000a470:	1001a58c 	.word	0x1001a58c
1000a474:	10009a59 	.word	0x10009a59
1000a478:	100177b0 	.word	0x100177b0
1000a47c:	10016871 	.word	0x10016871
1000a480:	100140e1 	.word	0x100140e1
1000a484:	461c4000 	.word	0x461c4000
1000a488:	100139f5 	.word	0x100139f5
1000a48c:	10017a84 	.word	0x10017a84
1000a490:	10016751 	.word	0x10016751
1000a494:	10009f25 	.word	0x10009f25
1000a498:	10009f0d 	.word	0x10009f0d
1000a49c:	1001a5a4 	.word	0x1001a5a4
1000a4a0:	10009dd1 	.word	0x10009dd1

1000a4a4 <read_comp_data>:
	destination[1] = ((int16_t)rawData[2] << 8) | rawData[3] ;
	destination[2] = ((int16_t)rawData[4] << 8) | rawData[5] ;
}
/* Read compass data */
void read_comp_data(int16_t *destination)
{
1000a4a4:	b530      	push	{r4, r5, lr}
1000a4a6:	b083      	sub	sp, #12
1000a4a8:	0004      	movs	r4, r0
	uint8_t rawData[7];  // x/y/z gyro register data, ST2 register stored here, must read ST2 at end of data acquisition
	if(readByte(AK8963_ADDRESS, AK8963_ST1) & 0x01) { // wait for magnetometer data ready bit to be set
1000a4aa:	2102      	movs	r1, #2
1000a4ac:	200c      	movs	r0, #12
1000a4ae:	4b12      	ldr	r3, [pc, #72]	; (1000a4f8 <read_comp_data+0x54>)
1000a4b0:	4798      	blx	r3
1000a4b2:	07c3      	lsls	r3, r0, #31
1000a4b4:	d51e      	bpl.n	1000a4f4 <read_comp_data+0x50>
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
1000a4b6:	466b      	mov	r3, sp
1000a4b8:	2207      	movs	r2, #7
1000a4ba:	2103      	movs	r1, #3
1000a4bc:	200c      	movs	r0, #12
1000a4be:	4d0f      	ldr	r5, [pc, #60]	; (1000a4fc <read_comp_data+0x58>)
1000a4c0:	47a8      	blx	r5
{
	uint8_t rawData[7];  // x/y/z gyro register data, ST2 register stored here, must read ST2 at end of data acquisition
	if(readByte(AK8963_ADDRESS, AK8963_ST1) & 0x01) { // wait for magnetometer data ready bit to be set
		readBytes(AK8963_ADDRESS, AK8963_XOUT_L, 7, &rawData[0]);  // Read the six raw data and ST2 registers sequentially into data array
		uint8_t c = rawData[6]; // End data read by reading ST2 register
		if(!(c & 0x08)) { // Check if magnetic sensor overflow set, if not then report data
1000a4c2:	466b      	mov	r3, sp
1000a4c4:	799b      	ldrb	r3, [r3, #6]
1000a4c6:	071b      	lsls	r3, r3, #28
1000a4c8:	d414      	bmi.n	1000a4f4 <read_comp_data+0x50>
			destination[0] = ((int16_t)rawData[1] << 8) | rawData[0] ;  // Turn the MSB and LSB into a signed 16-bit value
1000a4ca:	466b      	mov	r3, sp
1000a4cc:	785b      	ldrb	r3, [r3, #1]
1000a4ce:	021b      	lsls	r3, r3, #8
1000a4d0:	466a      	mov	r2, sp
1000a4d2:	7812      	ldrb	r2, [r2, #0]
1000a4d4:	4313      	orrs	r3, r2
1000a4d6:	8023      	strh	r3, [r4, #0]
			destination[1] = ((int16_t)rawData[3] << 8) | rawData[2] ;  // Data stored as little Endian
1000a4d8:	466b      	mov	r3, sp
1000a4da:	78db      	ldrb	r3, [r3, #3]
1000a4dc:	021b      	lsls	r3, r3, #8
1000a4de:	466a      	mov	r2, sp
1000a4e0:	7892      	ldrb	r2, [r2, #2]
1000a4e2:	4313      	orrs	r3, r2
1000a4e4:	8063      	strh	r3, [r4, #2]
			destination[2] = ((int16_t)rawData[5] << 8) | rawData[4] ;
1000a4e6:	466b      	mov	r3, sp
1000a4e8:	795b      	ldrb	r3, [r3, #5]
1000a4ea:	021b      	lsls	r3, r3, #8
1000a4ec:	466a      	mov	r2, sp
1000a4ee:	7912      	ldrb	r2, [r2, #4]
1000a4f0:	4313      	orrs	r3, r2
1000a4f2:	80a3      	strh	r3, [r4, #4]
		}
	}
}
1000a4f4:	b003      	add	sp, #12
1000a4f6:	bd30      	pop	{r4, r5, pc}
1000a4f8:	10009ef5 	.word	0x10009ef5
1000a4fc:	10009781 	.word	0x10009781

1000a500 <sms_imu_poll_data>:


/* Data reading functions... */
/* Poll */
int sms_imu_poll_data(void)
{
1000a500:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a502:	465f      	mov	r7, fp
1000a504:	4656      	mov	r6, sl
1000a506:	464d      	mov	r5, r9
1000a508:	4644      	mov	r4, r8
1000a50a:	b4f0      	push	{r4, r5, r6, r7}
1000a50c:	b08f      	sub	sp, #60	; 0x3c
	read_accel_data(imu_device.output.raw_accel);
1000a50e:	4e5c      	ldr	r6, [pc, #368]	; (1000a680 <sms_imu_poll_data+0x180>)
1000a510:	0030      	movs	r0, r6
1000a512:	4b5c      	ldr	r3, [pc, #368]	; (1000a684 <sms_imu_poll_data+0x184>)
1000a514:	4798      	blx	r3
	float a_res = get_Ares(imu_device.config.a_scale);
1000a516:	3e56      	subs	r6, #86	; 0x56
1000a518:	7830      	ldrb	r0, [r6, #0]
1000a51a:	4b5b      	ldr	r3, [pc, #364]	; (1000a688 <sms_imu_poll_data+0x188>)
1000a51c:	4798      	blx	r3
1000a51e:	1c05      	adds	r5, r0, #0
	float ax = ((float)imu_device.output.raw_accel[0]) * a_res;
1000a520:	2356      	movs	r3, #86	; 0x56
1000a522:	5ef0      	ldrsh	r0, [r6, r3]
1000a524:	4c59      	ldr	r4, [pc, #356]	; (1000a68c <sms_imu_poll_data+0x18c>)
1000a526:	47a0      	blx	r4
1000a528:	4f59      	ldr	r7, [pc, #356]	; (1000a690 <sms_imu_poll_data+0x190>)
1000a52a:	1c29      	adds	r1, r5, #0
1000a52c:	47b8      	blx	r7
1000a52e:	9008      	str	r0, [sp, #32]
	float ay = ((float)imu_device.output.raw_accel[1]) * a_res;
1000a530:	2358      	movs	r3, #88	; 0x58
1000a532:	5ef0      	ldrsh	r0, [r6, r3]
1000a534:	47a0      	blx	r4
1000a536:	1c29      	adds	r1, r5, #0
1000a538:	47b8      	blx	r7
1000a53a:	9009      	str	r0, [sp, #36]	; 0x24
	float az = ((float)imu_device.output.raw_accel[2]) * a_res;
1000a53c:	235a      	movs	r3, #90	; 0x5a
1000a53e:	5ef0      	ldrsh	r0, [r6, r3]
1000a540:	47a0      	blx	r4
1000a542:	1c29      	adds	r1, r5, #0
1000a544:	47b8      	blx	r7
1000a546:	900a      	str	r0, [sp, #40]	; 0x28
	
	read_gyro_data(imu_device.output.raw_gyro);
1000a548:	0030      	movs	r0, r6
1000a54a:	3050      	adds	r0, #80	; 0x50
1000a54c:	4b51      	ldr	r3, [pc, #324]	; (1000a694 <sms_imu_poll_data+0x194>)
1000a54e:	4798      	blx	r3
	float g_res = get_Gres(imu_device.config.g_scale);
1000a550:	7870      	ldrb	r0, [r6, #1]
1000a552:	4b51      	ldr	r3, [pc, #324]	; (1000a698 <sms_imu_poll_data+0x198>)
1000a554:	4798      	blx	r3
1000a556:	1c05      	adds	r5, r0, #0
	float gx = ((float)imu_device.output.raw_gyro[0]) * g_res;
1000a558:	2350      	movs	r3, #80	; 0x50
1000a55a:	5ef0      	ldrsh	r0, [r6, r3]
1000a55c:	47a0      	blx	r4
1000a55e:	1c29      	adds	r1, r5, #0
1000a560:	47b8      	blx	r7
1000a562:	900b      	str	r0, [sp, #44]	; 0x2c
	float gy = ((float)imu_device.output.raw_gyro[1]) * g_res;
1000a564:	2352      	movs	r3, #82	; 0x52
1000a566:	5ef0      	ldrsh	r0, [r6, r3]
1000a568:	47a0      	blx	r4
1000a56a:	1c29      	adds	r1, r5, #0
1000a56c:	47b8      	blx	r7
1000a56e:	900c      	str	r0, [sp, #48]	; 0x30
	float gz = ((float)imu_device.output.raw_gyro[2]) * g_res;
1000a570:	2354      	movs	r3, #84	; 0x54
1000a572:	5ef0      	ldrsh	r0, [r6, r3]
1000a574:	47a0      	blx	r4
1000a576:	1c29      	adds	r1, r5, #0
1000a578:	47b8      	blx	r7
1000a57a:	900d      	str	r0, [sp, #52]	; 0x34
	
	read_comp_data(imu_device.output.raw_compass);
1000a57c:	0030      	movs	r0, r6
1000a57e:	305c      	adds	r0, #92	; 0x5c
1000a580:	4b46      	ldr	r3, [pc, #280]	; (1000a69c <sms_imu_poll_data+0x19c>)
1000a582:	4798      	blx	r3
	float m_res = get_Mres(imu_device.config.m_scale);
1000a584:	78b0      	ldrb	r0, [r6, #2]
1000a586:	4b46      	ldr	r3, [pc, #280]	; (1000a6a0 <sms_imu_poll_data+0x1a0>)
1000a588:	4798      	blx	r3
1000a58a:	1c05      	adds	r5, r0, #0
	float mx = ( ((float)imu_device.output.raw_compass[0]) * m_res * imu_device.config.mag_calibration[0] ) - imu_device.config.mag_bias[0];
1000a58c:	235c      	movs	r3, #92	; 0x5c
1000a58e:	5ef0      	ldrsh	r0, [r6, r3]
1000a590:	47a0      	blx	r4
1000a592:	9507      	str	r5, [sp, #28]
1000a594:	1c29      	adds	r1, r5, #0
1000a596:	47b8      	blx	r7
1000a598:	6c31      	ldr	r1, [r6, #64]	; 0x40
1000a59a:	47b8      	blx	r7
1000a59c:	4d41      	ldr	r5, [pc, #260]	; (1000a6a4 <sms_imu_poll_data+0x1a4>)
1000a59e:	6b71      	ldr	r1, [r6, #52]	; 0x34
1000a5a0:	47a8      	blx	r5
1000a5a2:	4683      	mov	fp, r0
	float my = ( ((float)imu_device.output.raw_compass[1]) * m_res * imu_device.config.mag_calibration[1] ) - imu_device.config.mag_bias[1];
1000a5a4:	235e      	movs	r3, #94	; 0x5e
1000a5a6:	5ef0      	ldrsh	r0, [r6, r3]
1000a5a8:	47a0      	blx	r4
1000a5aa:	9907      	ldr	r1, [sp, #28]
1000a5ac:	47b8      	blx	r7
1000a5ae:	6c71      	ldr	r1, [r6, #68]	; 0x44
1000a5b0:	47b8      	blx	r7
1000a5b2:	6bb1      	ldr	r1, [r6, #56]	; 0x38
1000a5b4:	47a8      	blx	r5
1000a5b6:	4681      	mov	r9, r0
	float mz = ( ((float)imu_device.output.raw_compass[2]) * m_res * imu_device.config.mag_calibration[2] ) - imu_device.config.mag_bias[2];
1000a5b8:	2360      	movs	r3, #96	; 0x60
1000a5ba:	5ef0      	ldrsh	r0, [r6, r3]
1000a5bc:	47a0      	blx	r4
1000a5be:	9907      	ldr	r1, [sp, #28]
1000a5c0:	47b8      	blx	r7
1000a5c2:	6cb1      	ldr	r1, [r6, #72]	; 0x48
1000a5c4:	47b8      	blx	r7
1000a5c6:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
1000a5c8:	47a8      	blx	r5
1000a5ca:	4682      	mov	sl, r0
	
	static uint32_t last_time = 0;
	const uint32_t cnt_max = 0xffffffff/SMS_DUALTIMER_LOAD_US;
	uint32_t now = (uint32_t)(dualtimer_get_value(DUALTIMER_TIMER1)/SMS_DUALTIMER_LOAD_US);
1000a5cc:	2000      	movs	r0, #0
1000a5ce:	4b36      	ldr	r3, [pc, #216]	; (1000a6a8 <sms_imu_poll_data+0x1a8>)
1000a5d0:	4798      	blx	r3
1000a5d2:	211a      	movs	r1, #26
1000a5d4:	4b35      	ldr	r3, [pc, #212]	; (1000a6ac <sms_imu_poll_data+0x1ac>)
1000a5d6:	4798      	blx	r3
	uint32_t deltati = ((now < last_time) ? (last_time - now) : (cnt_max - now + last_time));
1000a5d8:	4b35      	ldr	r3, [pc, #212]	; (1000a6b0 <sms_imu_poll_data+0x1b0>)
1000a5da:	681c      	ldr	r4, [r3, #0]
1000a5dc:	42a0      	cmp	r0, r4
1000a5de:	d202      	bcs.n	1000a5e6 <sms_imu_poll_data+0xe6>
1000a5e0:	1a23      	subs	r3, r4, r0
1000a5e2:	4698      	mov	r8, r3
1000a5e4:	e004      	b.n	1000a5f0 <sms_imu_poll_data+0xf0>
1000a5e6:	4b33      	ldr	r3, [pc, #204]	; (1000a6b4 <sms_imu_poll_data+0x1b4>)
1000a5e8:	469c      	mov	ip, r3
1000a5ea:	4464      	add	r4, ip
1000a5ec:	1a23      	subs	r3, r4, r0
1000a5ee:	4698      	mov	r8, r3
	last_time = now;
1000a5f0:	4b2f      	ldr	r3, [pc, #188]	; (1000a6b0 <sms_imu_poll_data+0x1b0>)
1000a5f2:	6018      	str	r0, [r3, #0]
	float deltatf = (float)deltati / 1000000.0;
	//mahony_quaternion_update(ax, ay, az, gx*PI/180.0, gy*PI/180.0, gz*PI/180.0, my, mx, mz, deltat);
	madgwick_quaternion_update(ax, ay, az, gx*PI/180.0, gy*PI/180.0, gz*PI/180.0, my, mx, mz, deltatf);
1000a5f4:	4c30      	ldr	r4, [pc, #192]	; (1000a6b8 <sms_imu_poll_data+0x1b8>)
1000a5f6:	980b      	ldr	r0, [sp, #44]	; 0x2c
1000a5f8:	47a0      	blx	r4
1000a5fa:	4f30      	ldr	r7, [pc, #192]	; (1000a6bc <sms_imu_poll_data+0x1bc>)
1000a5fc:	4a30      	ldr	r2, [pc, #192]	; (1000a6c0 <sms_imu_poll_data+0x1c0>)
1000a5fe:	4b31      	ldr	r3, [pc, #196]	; (1000a6c4 <sms_imu_poll_data+0x1c4>)
1000a600:	47b8      	blx	r7
1000a602:	4e31      	ldr	r6, [pc, #196]	; (1000a6c8 <sms_imu_poll_data+0x1c8>)
1000a604:	2200      	movs	r2, #0
1000a606:	4b31      	ldr	r3, [pc, #196]	; (1000a6cc <sms_imu_poll_data+0x1cc>)
1000a608:	47b0      	blx	r6
1000a60a:	4d31      	ldr	r5, [pc, #196]	; (1000a6d0 <sms_imu_poll_data+0x1d0>)
1000a60c:	47a8      	blx	r5
1000a60e:	9007      	str	r0, [sp, #28]
1000a610:	4640      	mov	r0, r8
1000a612:	4b30      	ldr	r3, [pc, #192]	; (1000a6d4 <sms_imu_poll_data+0x1d4>)
1000a614:	4798      	blx	r3
1000a616:	4930      	ldr	r1, [pc, #192]	; (1000a6d8 <sms_imu_poll_data+0x1d8>)
1000a618:	4b30      	ldr	r3, [pc, #192]	; (1000a6dc <sms_imu_poll_data+0x1dc>)
1000a61a:	4798      	blx	r3
1000a61c:	9005      	str	r0, [sp, #20]
1000a61e:	4652      	mov	r2, sl
1000a620:	9204      	str	r2, [sp, #16]
1000a622:	465a      	mov	r2, fp
1000a624:	9203      	str	r2, [sp, #12]
1000a626:	464a      	mov	r2, r9
1000a628:	9202      	str	r2, [sp, #8]
1000a62a:	980d      	ldr	r0, [sp, #52]	; 0x34
1000a62c:	47a0      	blx	r4
1000a62e:	4a24      	ldr	r2, [pc, #144]	; (1000a6c0 <sms_imu_poll_data+0x1c0>)
1000a630:	4b24      	ldr	r3, [pc, #144]	; (1000a6c4 <sms_imu_poll_data+0x1c4>)
1000a632:	47b8      	blx	r7
1000a634:	2200      	movs	r2, #0
1000a636:	4b25      	ldr	r3, [pc, #148]	; (1000a6cc <sms_imu_poll_data+0x1cc>)
1000a638:	47b0      	blx	r6
1000a63a:	47a8      	blx	r5
1000a63c:	9001      	str	r0, [sp, #4]
1000a63e:	980c      	ldr	r0, [sp, #48]	; 0x30
1000a640:	47a0      	blx	r4
1000a642:	4a1f      	ldr	r2, [pc, #124]	; (1000a6c0 <sms_imu_poll_data+0x1c0>)
1000a644:	4b1f      	ldr	r3, [pc, #124]	; (1000a6c4 <sms_imu_poll_data+0x1c4>)
1000a646:	47b8      	blx	r7
1000a648:	2200      	movs	r2, #0
1000a64a:	4b20      	ldr	r3, [pc, #128]	; (1000a6cc <sms_imu_poll_data+0x1cc>)
1000a64c:	47b0      	blx	r6
1000a64e:	47a8      	blx	r5
1000a650:	9000      	str	r0, [sp, #0]
1000a652:	9b07      	ldr	r3, [sp, #28]
1000a654:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1000a656:	9909      	ldr	r1, [sp, #36]	; 0x24
1000a658:	9808      	ldr	r0, [sp, #32]
1000a65a:	4c21      	ldr	r4, [pc, #132]	; (1000a6e0 <sms_imu_poll_data+0x1e0>)
1000a65c:	47a0      	blx	r4
	
	if(imu_device.config.ahrs) {
1000a65e:	234c      	movs	r3, #76	; 0x4c
1000a660:	4a20      	ldr	r2, [pc, #128]	; (1000a6e4 <sms_imu_poll_data+0x1e4>)
1000a662:	5cd3      	ldrb	r3, [r2, r3]
1000a664:	2b00      	cmp	r3, #0
1000a666:	d002      	beq.n	1000a66e <sms_imu_poll_data+0x16e>
		ahrs_calculation(imu_device.output.q);
1000a668:	481f      	ldr	r0, [pc, #124]	; (1000a6e8 <sms_imu_poll_data+0x1e8>)
1000a66a:	4b20      	ldr	r3, [pc, #128]	; (1000a6ec <sms_imu_poll_data+0x1ec>)
1000a66c:	4798      	blx	r3
	}
	return 0;
}
1000a66e:	2000      	movs	r0, #0
1000a670:	b00f      	add	sp, #60	; 0x3c
1000a672:	bc3c      	pop	{r2, r3, r4, r5}
1000a674:	4690      	mov	r8, r2
1000a676:	4699      	mov	r9, r3
1000a678:	46a2      	mov	sl, r4
1000a67a:	46ab      	mov	fp, r5
1000a67c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a67e:	46c0      	nop			; (mov r8, r8)
1000a680:	1001a5ba 	.word	0x1001a5ba
1000a684:	10009931 	.word	0x10009931
1000a688:	10009a11 	.word	0x10009a11
1000a68c:	10014689 	.word	0x10014689
1000a690:	100140e1 	.word	0x100140e1
1000a694:	10009975 	.word	0x10009975
1000a698:	100099d9 	.word	0x100099d9
1000a69c:	1000a4a5 	.word	0x1000a4a5
1000a6a0:	100099b9 	.word	0x100099b9
1000a6a4:	10014309 	.word	0x10014309
1000a6a8:	1000b3cd 	.word	0x1000b3cd
1000a6ac:	100135c1 	.word	0x100135c1
1000a6b0:	10018978 	.word	0x10018978
1000a6b4:	09d89d89 	.word	0x09d89d89
1000a6b8:	10016371 	.word	0x10016371
1000a6bc:	10015635 	.word	0x10015635
1000a6c0:	54442d28 	.word	0x54442d28
1000a6c4:	400921fb 	.word	0x400921fb
1000a6c8:	10014ded 	.word	0x10014ded
1000a6cc:	40668000 	.word	0x40668000
1000a6d0:	10016419 	.word	0x10016419
1000a6d4:	10014719 	.word	0x10014719
1000a6d8:	49742400 	.word	0x49742400
1000a6dc:	10013d4d 	.word	0x10013d4d
1000a6e0:	1000843d 	.word	0x1000843d
1000a6e4:	1001a564 	.word	0x1001a564
1000a6e8:	1001a5c8 	.word	0x1001a5c8
1000a6ec:	10008d1d 	.word	0x10008d1d

1000a6f0 <sms_led_switch_on>:
    sms_led_switch_off(SMS_LED_0_PIN);
}


void sms_led_switch_on(enum sms_leds led)
{
1000a6f0:	b510      	push	{r4, lr}
    gpio_pin_set_output_level(led, SMS_LED_ACTIVE);
1000a6f2:	2100      	movs	r1, #0
1000a6f4:	4b01      	ldr	r3, [pc, #4]	; (1000a6fc <sms_led_switch_on+0xc>)
1000a6f6:	4798      	blx	r3
}
1000a6f8:	bd10      	pop	{r4, pc}
1000a6fa:	46c0      	nop			; (mov r8, r8)
1000a6fc:	1000b925 	.word	0x1000b925

1000a700 <sms_led_switch_off>:


void sms_led_switch_off(enum sms_leds led)
{
1000a700:	b510      	push	{r4, lr}
    gpio_pin_set_output_level(led, SMS_LED_INACTIVE);
1000a702:	2101      	movs	r1, #1
1000a704:	4b01      	ldr	r3, [pc, #4]	; (1000a70c <sms_led_switch_off+0xc>)
1000a706:	4798      	blx	r3
}
1000a708:	bd10      	pop	{r4, pc}
1000a70a:	46c0      	nop			; (mov r8, r8)
1000a70c:	1000b925 	.word	0x1000b925

1000a710 <sms_led_gpio_init>:
 */ 

#include "sms_led.h"

void sms_led_gpio_init(void)
{
1000a710:	b510      	push	{r4, lr}
1000a712:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;

    /* LED0 @ GPIO_LP_GPIO_22 */
    gpio_get_config_defaults(&config_gpio_pin);
1000a714:	ac01      	add	r4, sp, #4
1000a716:	0020      	movs	r0, r4
1000a718:	4b06      	ldr	r3, [pc, #24]	; (1000a734 <sms_led_gpio_init+0x24>)
1000a71a:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_OUTPUT;
1000a71c:	2301      	movs	r3, #1
1000a71e:	7023      	strb	r3, [r4, #0]
    if(gpio_pin_set_config(SMS_LED_0_PIN, &config_gpio_pin) != STATUS_OK) {
1000a720:	0021      	movs	r1, r4
1000a722:	2016      	movs	r0, #22
1000a724:	4b04      	ldr	r3, [pc, #16]	; (1000a738 <sms_led_gpio_init+0x28>)
1000a726:	4798      	blx	r3
        DBG_LOG_DEV("[sms_led_gpio_init]\tproblem while setting up led0");
    }
    sms_led_switch_off(SMS_LED_0_PIN);
1000a728:	2016      	movs	r0, #22
1000a72a:	4b04      	ldr	r3, [pc, #16]	; (1000a73c <sms_led_gpio_init+0x2c>)
1000a72c:	4798      	blx	r3
}
1000a72e:	b002      	add	sp, #8
1000a730:	bd10      	pop	{r4, pc}
1000a732:	46c0      	nop			; (mov r8, r8)
1000a734:	1000b6bd 	.word	0x1000b6bd
1000a738:	1000b6cd 	.word	0x1000b6cd
1000a73c:	1000a701 	.word	0x1000a701

1000a740 <sms_led_toggle>:
    gpio_pin_set_output_level(led, SMS_LED_INACTIVE);
}


void sms_led_toggle(enum sms_leds led)
{
1000a740:	b510      	push	{r4, lr}
1000a742:	0004      	movs	r4, r0
}


bool sms_led_get_state(enum sms_leds led)
{
    return gpio_pin_get_output_level(led);
1000a744:	4b05      	ldr	r3, [pc, #20]	; (1000a75c <sms_led_toggle+0x1c>)
1000a746:	4798      	blx	r3


void sms_led_toggle(enum sms_leds led)
{
    bool state = sms_led_get_state(led);
    if(state == SMS_LED_ACTIVE) sms_led_switch_off(led);
1000a748:	2800      	cmp	r0, #0
1000a74a:	d103      	bne.n	1000a754 <sms_led_toggle+0x14>
1000a74c:	0020      	movs	r0, r4
1000a74e:	4b04      	ldr	r3, [pc, #16]	; (1000a760 <sms_led_toggle+0x20>)
1000a750:	4798      	blx	r3
1000a752:	e002      	b.n	1000a75a <sms_led_toggle+0x1a>
    else sms_led_switch_on(led);
1000a754:	0020      	movs	r0, r4
1000a756:	4b03      	ldr	r3, [pc, #12]	; (1000a764 <sms_led_toggle+0x24>)
1000a758:	4798      	blx	r3
}
1000a75a:	bd10      	pop	{r4, pc}
1000a75c:	1000b8d5 	.word	0x1000b8d5
1000a760:	1000a701 	.word	0x1000a701
1000a764:	1000a6f1 	.word	0x1000a6f1

1000a768 <sms_led_blink_start>:
    return gpio_pin_get_output_level(led);
}


void sms_led_blink_start(enum sms_leds led)
{
1000a768:	b510      	push	{r4, lr}
    sms_led_switch_on(led);
1000a76a:	4b0c      	ldr	r3, [pc, #48]	; (1000a79c <sms_led_blink_start+0x34>)
1000a76c:	4798      	blx	r3
    sms_led_blink_cnt = 0;
1000a76e:	2200      	movs	r2, #0
1000a770:	4b0b      	ldr	r3, [pc, #44]	; (1000a7a0 <sms_led_blink_start+0x38>)
1000a772:	701a      	strb	r2, [r3, #0]
    uint32_t delay = 0;
    switch(timer2_current_mode) {
1000a774:	4b0b      	ldr	r3, [pc, #44]	; (1000a7a4 <sms_led_blink_start+0x3c>)
1000a776:	781b      	ldrb	r3, [r3, #0]
1000a778:	b2db      	uxtb	r3, r3
1000a77a:	2b02      	cmp	r3, #2
1000a77c:	d002      	beq.n	1000a784 <sms_led_blink_start+0x1c>
1000a77e:	2b03      	cmp	r3, #3
1000a780:	d002      	beq.n	1000a788 <sms_led_blink_start+0x20>
1000a782:	e004      	b.n	1000a78e <sms_led_blink_start+0x26>
        case TIMER2_MODE_LED_STARTUP:
        delay = SMS_BLINK_STARTUP_MS;
1000a784:	2164      	movs	r1, #100	; 0x64
1000a786:	e003      	b.n	1000a790 <sms_led_blink_start+0x28>
        break;
        
        case TIMER2_MODE_LED_SHUTDOWN:
        delay = SMS_BLINK_SHTDWN_MS;
1000a788:	21c8      	movs	r1, #200	; 0xc8
1000a78a:	0049      	lsls	r1, r1, #1
        break;
1000a78c:	e000      	b.n	1000a790 <sms_led_blink_start+0x28>

void sms_led_blink_start(enum sms_leds led)
{
    sms_led_switch_on(led);
    sms_led_blink_cnt = 0;
    uint32_t delay = 0;
1000a78e:	2100      	movs	r1, #0
        
        default:
        break;
    }

    sms_dualtimer_start(TIMER_UNIT_MS, delay, DUALTIMER_TIMER2);
1000a790:	2201      	movs	r2, #1
1000a792:	2001      	movs	r0, #1
1000a794:	4b04      	ldr	r3, [pc, #16]	; (1000a7a8 <sms_led_blink_start+0x40>)
1000a796:	4798      	blx	r3
}
1000a798:	bd10      	pop	{r4, pc}
1000a79a:	46c0      	nop			; (mov r8, r8)
1000a79c:	1000a6f1 	.word	0x1000a6f1
1000a7a0:	1001a64c 	.word	0x1001a64c
1000a7a4:	1001a54b 	.word	0x1001a54b
1000a7a8:	1000ac59 	.word	0x1000ac59

1000a7ac <sms_pressure_init_variables>:

#include "sms_pressure.h"

void sms_pressure_init_variables(void)
{
	pressure_device.hal.current_state = MS58_STATE_NONE;
1000a7ac:	4b06      	ldr	r3, [pc, #24]	; (1000a7c8 <sms_pressure_init_variables+0x1c>)
1000a7ae:	2200      	movs	r2, #0
1000a7b0:	2125      	movs	r1, #37	; 0x25
1000a7b2:	545a      	strb	r2, [r3, r1]
	pressure_device.state = PRESSURE_STATE_OFF;
1000a7b4:	3106      	adds	r1, #6
1000a7b6:	545a      	strb	r2, [r3, r1]
	pressure_device.rts = false;
1000a7b8:	3901      	subs	r1, #1
1000a7ba:	545a      	strb	r2, [r3, r1]
	pressure_device.int_enabled = false;
1000a7bc:	3902      	subs	r1, #2
1000a7be:	545a      	strb	r2, [r3, r1]
	pressure_device.new_int = false;
1000a7c0:	3101      	adds	r1, #1
1000a7c2:	545a      	strb	r2, [r3, r1]
}
1000a7c4:	4770      	bx	lr
1000a7c6:	46c0      	nop			; (mov r8, r8)
1000a7c8:	1001a4b0 	.word	0x1001a4b0

1000a7cc <sms_pressure_ms58_reset>:
    }
    return STATUS_ERR_IO;
}

void sms_pressure_ms58_reset(void)
{
1000a7cc:	b510      	push	{r4, lr}
1000a7ce:	b082      	sub	sp, #8
    //DBG_LOG_DEV("[sms_pressure_ms58_reset]\twriting reset command");
    spi_wdata[0] = MS58_RESET;
1000a7d0:	4a05      	ldr	r2, [pc, #20]	; (1000a7e8 <sms_pressure_ms58_reset+0x1c>)
1000a7d2:	231e      	movs	r3, #30
1000a7d4:	7013      	strb	r3, [r2, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 1);
1000a7d6:	3b1d      	subs	r3, #29
1000a7d8:	9300      	str	r3, [sp, #0]
1000a7da:	4b04      	ldr	r3, [pc, #16]	; (1000a7ec <sms_pressure_ms58_reset+0x20>)
1000a7dc:	4904      	ldr	r1, [pc, #16]	; (1000a7f0 <sms_pressure_ms58_reset+0x24>)
1000a7de:	4805      	ldr	r0, [pc, #20]	; (1000a7f4 <sms_pressure_ms58_reset+0x28>)
1000a7e0:	4c05      	ldr	r4, [pc, #20]	; (1000a7f8 <sms_pressure_ms58_reset+0x2c>)
1000a7e2:	47a0      	blx	r4
}
1000a7e4:	b002      	add	sp, #8
1000a7e6:	bd10      	pop	{r4, pc}
1000a7e8:	1001a4a0 	.word	0x1001a4a0
1000a7ec:	1001a48c 	.word	0x1001a48c
1000a7f0:	1001a54c 	.word	0x1001a54c
1000a7f4:	1001a558 	.word	0x1001a558
1000a7f8:	1000ab21 	.word	0x1000ab21

1000a7fc <sms_pressure_ms58_read_prom>:
		//if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
	}
}

enum status_code sms_pressure_ms58_read_prom(void)
{
1000a7fc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a7fe:	4657      	mov	r7, sl
1000a800:	b480      	push	{r7}
1000a802:	b082      	sub	sp, #8
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] reading bytes... ");
    spi_wdata[0] = MS58_PROM_READ_1;
1000a804:	4d37      	ldr	r5, [pc, #220]	; (1000a8e4 <sms_pressure_ms58_read_prom+0xe8>)
1000a806:	23a2      	movs	r3, #162	; 0xa2
1000a808:	702b      	strb	r3, [r5, #0]
    spi_wdata[1] = 0x00;
1000a80a:	2300      	movs	r3, #0
1000a80c:	706b      	strb	r3, [r5, #1]
    spi_wdata[2] = 0x00;
1000a80e:	70ab      	strb	r3, [r5, #2]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000a810:	4c35      	ldr	r4, [pc, #212]	; (1000a8e8 <sms_pressure_ms58_read_prom+0xec>)
1000a812:	3303      	adds	r3, #3
1000a814:	469a      	mov	sl, r3
1000a816:	9300      	str	r3, [sp, #0]
1000a818:	0023      	movs	r3, r4
1000a81a:	002a      	movs	r2, r5
1000a81c:	4933      	ldr	r1, [pc, #204]	; (1000a8ec <sms_pressure_ms58_read_prom+0xf0>)
1000a81e:	4834      	ldr	r0, [pc, #208]	; (1000a8f0 <sms_pressure_ms58_read_prom+0xf4>)
1000a820:	4f34      	ldr	r7, [pc, #208]	; (1000a8f4 <sms_pressure_ms58_read_prom+0xf8>)
1000a822:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[1] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000a824:	4e34      	ldr	r6, [pc, #208]	; (1000a8f8 <sms_pressure_ms58_read_prom+0xfc>)
1000a826:	7863      	ldrb	r3, [r4, #1]
1000a828:	021b      	lsls	r3, r3, #8
1000a82a:	78a2      	ldrb	r2, [r4, #2]
1000a82c:	4313      	orrs	r3, r2
1000a82e:	80f3      	strh	r3, [r6, #6]

    spi_wdata[0] = MS58_PROM_READ_2;
1000a830:	23a4      	movs	r3, #164	; 0xa4
1000a832:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000a834:	4653      	mov	r3, sl
1000a836:	9300      	str	r3, [sp, #0]
1000a838:	0023      	movs	r3, r4
1000a83a:	002a      	movs	r2, r5
1000a83c:	492b      	ldr	r1, [pc, #172]	; (1000a8ec <sms_pressure_ms58_read_prom+0xf0>)
1000a83e:	482c      	ldr	r0, [pc, #176]	; (1000a8f0 <sms_pressure_ms58_read_prom+0xf4>)
1000a840:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[2] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000a842:	7863      	ldrb	r3, [r4, #1]
1000a844:	021b      	lsls	r3, r3, #8
1000a846:	78a2      	ldrb	r2, [r4, #2]
1000a848:	4313      	orrs	r3, r2
1000a84a:	8133      	strh	r3, [r6, #8]

    spi_wdata[0] = MS58_PROM_READ_3;
1000a84c:	23a6      	movs	r3, #166	; 0xa6
1000a84e:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000a850:	4653      	mov	r3, sl
1000a852:	9300      	str	r3, [sp, #0]
1000a854:	0023      	movs	r3, r4
1000a856:	002a      	movs	r2, r5
1000a858:	4924      	ldr	r1, [pc, #144]	; (1000a8ec <sms_pressure_ms58_read_prom+0xf0>)
1000a85a:	4825      	ldr	r0, [pc, #148]	; (1000a8f0 <sms_pressure_ms58_read_prom+0xf4>)
1000a85c:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[3] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000a85e:	7863      	ldrb	r3, [r4, #1]
1000a860:	021b      	lsls	r3, r3, #8
1000a862:	78a2      	ldrb	r2, [r4, #2]
1000a864:	4313      	orrs	r3, r2
1000a866:	8173      	strh	r3, [r6, #10]

    spi_wdata[0] = MS58_PROM_READ_4;
1000a868:	23a8      	movs	r3, #168	; 0xa8
1000a86a:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000a86c:	4653      	mov	r3, sl
1000a86e:	9300      	str	r3, [sp, #0]
1000a870:	0023      	movs	r3, r4
1000a872:	002a      	movs	r2, r5
1000a874:	491d      	ldr	r1, [pc, #116]	; (1000a8ec <sms_pressure_ms58_read_prom+0xf0>)
1000a876:	481e      	ldr	r0, [pc, #120]	; (1000a8f0 <sms_pressure_ms58_read_prom+0xf4>)
1000a878:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[4] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000a87a:	7863      	ldrb	r3, [r4, #1]
1000a87c:	021b      	lsls	r3, r3, #8
1000a87e:	78a2      	ldrb	r2, [r4, #2]
1000a880:	4313      	orrs	r3, r2
1000a882:	81b3      	strh	r3, [r6, #12]

    spi_wdata[0] = MS58_PROM_READ_5;
1000a884:	23aa      	movs	r3, #170	; 0xaa
1000a886:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000a888:	4653      	mov	r3, sl
1000a88a:	9300      	str	r3, [sp, #0]
1000a88c:	0023      	movs	r3, r4
1000a88e:	002a      	movs	r2, r5
1000a890:	4916      	ldr	r1, [pc, #88]	; (1000a8ec <sms_pressure_ms58_read_prom+0xf0>)
1000a892:	4817      	ldr	r0, [pc, #92]	; (1000a8f0 <sms_pressure_ms58_read_prom+0xf4>)
1000a894:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[5] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000a896:	7863      	ldrb	r3, [r4, #1]
1000a898:	021b      	lsls	r3, r3, #8
1000a89a:	78a2      	ldrb	r2, [r4, #2]
1000a89c:	4313      	orrs	r3, r2
1000a89e:	81f3      	strh	r3, [r6, #14]

    spi_wdata[0] = MS58_PROM_READ_6;
1000a8a0:	23ac      	movs	r3, #172	; 0xac
1000a8a2:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000a8a4:	4653      	mov	r3, sl
1000a8a6:	9300      	str	r3, [sp, #0]
1000a8a8:	0023      	movs	r3, r4
1000a8aa:	002a      	movs	r2, r5
1000a8ac:	490f      	ldr	r1, [pc, #60]	; (1000a8ec <sms_pressure_ms58_read_prom+0xf0>)
1000a8ae:	4810      	ldr	r0, [pc, #64]	; (1000a8f0 <sms_pressure_ms58_read_prom+0xf4>)
1000a8b0:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[6] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000a8b2:	7863      	ldrb	r3, [r4, #1]
1000a8b4:	021b      	lsls	r3, r3, #8
1000a8b6:	78a2      	ldrb	r2, [r4, #2]
1000a8b8:	4313      	orrs	r3, r2
1000a8ba:	8233      	strh	r3, [r6, #16]

    spi_wdata[0] = MS58_PROM_READ_7;
1000a8bc:	23ae      	movs	r3, #174	; 0xae
1000a8be:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000a8c0:	4653      	mov	r3, sl
1000a8c2:	9300      	str	r3, [sp, #0]
1000a8c4:	0023      	movs	r3, r4
1000a8c6:	002a      	movs	r2, r5
1000a8c8:	4908      	ldr	r1, [pc, #32]	; (1000a8ec <sms_pressure_ms58_read_prom+0xf0>)
1000a8ca:	4809      	ldr	r0, [pc, #36]	; (1000a8f0 <sms_pressure_ms58_read_prom+0xf4>)
1000a8cc:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[7] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000a8ce:	7863      	ldrb	r3, [r4, #1]
1000a8d0:	021b      	lsls	r3, r3, #8
1000a8d2:	78a2      	ldrb	r2, [r4, #2]
1000a8d4:	4313      	orrs	r3, r2
1000a8d6:	8273      	strh	r3, [r6, #18]
    //for(uint8_t i = 1; i < MS58_PROM_VALUES_MAX; i++) {
        //DBG_LOG_DEV("  C%d -> %d", (i+1), ms58_device.prom_values[i]);
    //}

    return STATUS_OK;
}
1000a8d8:	2000      	movs	r0, #0
1000a8da:	b002      	add	sp, #8
1000a8dc:	bc04      	pop	{r2}
1000a8de:	4692      	mov	sl, r2
1000a8e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a8e2:	46c0      	nop			; (mov r8, r8)
1000a8e4:	1001a4a0 	.word	0x1001a4a0
1000a8e8:	1001a48c 	.word	0x1001a48c
1000a8ec:	1001a54c 	.word	0x1001a54c
1000a8f0:	1001a558 	.word	0x1001a558
1000a8f4:	1000ab21 	.word	0x1000ab21
1000a8f8:	1001a4b0 	.word	0x1001a4b0

1000a8fc <sms_pressure_init>:
    
    ulp_ready = true;
}

enum status_code sms_pressure_init(void)
{
1000a8fc:	b510      	push	{r4, lr}
    /* Read the PROM values */
    if(sms_pressure_ms58_read_prom() == STATUS_OK) {
1000a8fe:	4b0a      	ldr	r3, [pc, #40]	; (1000a928 <sms_pressure_init+0x2c>)
1000a900:	4798      	blx	r3
1000a902:	2800      	cmp	r0, #0
1000a904:	d10d      	bne.n	1000a922 <sms_pressure_init+0x26>
        pressure_device.hal.init_ok = true;
1000a906:	4b09      	ldr	r3, [pc, #36]	; (1000a92c <sms_pressure_init+0x30>)
1000a908:	2201      	movs	r2, #1
1000a90a:	705a      	strb	r2, [r3, #1]
        pressure_device.hal.current_state = MS58_STATE_READY;
1000a90c:	2402      	movs	r4, #2
1000a90e:	2125      	movs	r1, #37	; 0x25
1000a910:	545c      	strb	r4, [r3, r1]
		pressure_device.int_enabled = true;
1000a912:	3103      	adds	r1, #3
1000a914:	545a      	strb	r2, [r3, r1]
		pressure_device.new_int = false;
1000a916:	2200      	movs	r2, #0
1000a918:	3101      	adds	r1, #1
1000a91a:	545a      	strb	r2, [r3, r1]
		pressure_device.rts = false;
1000a91c:	3101      	adds	r1, #1
1000a91e:	545a      	strb	r2, [r3, r1]
        return STATUS_OK;
1000a920:	e000      	b.n	1000a924 <sms_pressure_init+0x28>
    }
    return STATUS_ERR_IO;
1000a922:	2010      	movs	r0, #16
}
1000a924:	bd10      	pop	{r4, pc}
1000a926:	46c0      	nop			; (mov r8, r8)
1000a928:	1000a7fd 	.word	0x1000a7fd
1000a92c:	1001a4b0 	.word	0x1001a4b0

1000a930 <sms_pressure_startup>:
    /* Disable power supply by default */
    gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, false);
}

void sms_pressure_startup(void)
{
1000a930:	b510      	push	{r4, lr}
    DBG_LOG_DEV("[sms_pressure_startup]\t\tStarting pressure sensor");
    //gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, true); // switch on MS58 pressure sensor
    /* Disable buttons for reset time (~3 ms) to avoid conflict with dualtimer1 */
    sms_button_toggle_callback(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
1000a932:	2101      	movs	r1, #1
1000a934:	2001      	movs	r0, #1
1000a936:	4b10      	ldr	r3, [pc, #64]	; (1000a978 <sms_pressure_startup+0x48>)
1000a938:	4798      	blx	r3
    pressure_device.hal.current_state = MS58_STATE_RESETTING;
1000a93a:	2101      	movs	r1, #1
1000a93c:	2325      	movs	r3, #37	; 0x25
1000a93e:	4a0f      	ldr	r2, [pc, #60]	; (1000a97c <sms_pressure_startup+0x4c>)
1000a940:	54d1      	strb	r1, [r2, r3]
    /* Write the reset command to MS58 */
    sms_pressure_ms58_reset();
1000a942:	4b0f      	ldr	r3, [pc, #60]	; (1000a980 <sms_pressure_startup+0x50>)
1000a944:	4798      	blx	r3
    delay_ms(3);
1000a946:	2003      	movs	r0, #3
1000a948:	4b0e      	ldr	r3, [pc, #56]	; (1000a984 <sms_pressure_startup+0x54>)
1000a94a:	4798      	blx	r3
    if(sms_pressure_init() != STATUS_OK) {
1000a94c:	4b0e      	ldr	r3, [pc, #56]	; (1000a988 <sms_pressure_startup+0x58>)
1000a94e:	4798      	blx	r3
1000a950:	2800      	cmp	r0, #0
1000a952:	d000      	beq.n	1000a956 <sms_pressure_startup+0x26>
1000a954:	e7fe      	b.n	1000a954 <sms_pressure_startup+0x24>
        DBG_LOG_DEV("[sms_pressure_startup]\t\t\tFailed to initialize pressure device");
        pressure_device.hal.init_ok = false;
        while(1){};
    }
    pressure_device.hal.current_state = MS58_STATE_READY;
1000a956:	4b09      	ldr	r3, [pc, #36]	; (1000a97c <sms_pressure_startup+0x4c>)
1000a958:	2102      	movs	r1, #2
1000a95a:	2225      	movs	r2, #37	; 0x25
1000a95c:	5499      	strb	r1, [r3, r2]
    pressure_device.hal.init_ok = true;
1000a95e:	2401      	movs	r4, #1
1000a960:	705c      	strb	r4, [r3, #1]
    sms_working_mode = SMS_MODE_COMPLETE;
1000a962:	3a1e      	subs	r2, #30
1000a964:	4b09      	ldr	r3, [pc, #36]	; (1000a98c <sms_pressure_startup+0x5c>)
1000a966:	701a      	strb	r2, [r3, #0]
    sms_sensors_interrupt_toggle(true, true);
1000a968:	3901      	subs	r1, #1
1000a96a:	2001      	movs	r0, #1
1000a96c:	4b08      	ldr	r3, [pc, #32]	; (1000a990 <sms_pressure_startup+0x60>)
1000a96e:	4798      	blx	r3
    
    ulp_ready = true;
1000a970:	4b08      	ldr	r3, [pc, #32]	; (1000a994 <sms_pressure_startup+0x64>)
1000a972:	701c      	strb	r4, [r3, #0]
}
1000a974:	bd10      	pop	{r4, pc}
1000a976:	46c0      	nop			; (mov r8, r8)
1000a978:	10009579 	.word	0x10009579
1000a97c:	1001a4b0 	.word	0x1001a4b0
1000a980:	1000a7cd 	.word	0x1000a7cd
1000a984:	1000b029 	.word	0x1000b029
1000a988:	1000a8fd 	.word	0x1000a8fd
1000a98c:	1001a424 	.word	0x1001a424
1000a990:	1000a9e9 	.word	0x1000a9e9
1000a994:	1001a425 	.word	0x1001a425

1000a998 <sms_pressure_define_services>:

    DBG_LOG_DEV("[sms_pressure_ms58_calculate] temperature = %ld  pressure = %ld", pressure_device.hal.temperature, pressure_device.hal.pressure);
}

void sms_pressure_define_services(void)
{
1000a998:	b510      	push	{r4, lr}
1000a99a:	b082      	sub	sp, #8
    at_ble_status_t status;
    uint8_t init_value = 0;
1000a99c:	466b      	mov	r3, sp
1000a99e:	1dda      	adds	r2, r3, #7
1000a9a0:	2300      	movs	r3, #0
1000a9a2:	7013      	strb	r3, [r2, #0]
    sms_ble_service_init(BLE_SERV_PRESSURE, &pressure_device.service_handler, &init_value);
1000a9a4:	4c09      	ldr	r4, [pc, #36]	; (1000a9cc <sms_pressure_define_services+0x34>)
1000a9a6:	0021      	movs	r1, r4
1000a9a8:	2001      	movs	r0, #1
1000a9aa:	4b09      	ldr	r3, [pc, #36]	; (1000a9d0 <sms_pressure_define_services+0x38>)
1000a9ac:	4798      	blx	r3
    if((status = sms_ble_primary_service_define(&pressure_device.service_handler)) != AT_BLE_SUCCESS) {
1000a9ae:	0020      	movs	r0, r4
1000a9b0:	4b08      	ldr	r3, [pc, #32]	; (1000a9d4 <sms_pressure_define_services+0x3c>)
1000a9b2:	4798      	blx	r3
1000a9b4:	1e04      	subs	r4, r0, #0
1000a9b6:	d006      	beq.n	1000a9c6 <sms_pressure_define_services+0x2e>
        DBG_LOG("[sms_pressure_define_services]\tServices defining failed, reason 0x%x", status);
1000a9b8:	4807      	ldr	r0, [pc, #28]	; (1000a9d8 <sms_pressure_define_services+0x40>)
1000a9ba:	4b08      	ldr	r3, [pc, #32]	; (1000a9dc <sms_pressure_define_services+0x44>)
1000a9bc:	4798      	blx	r3
1000a9be:	0021      	movs	r1, r4
1000a9c0:	4807      	ldr	r0, [pc, #28]	; (1000a9e0 <sms_pressure_define_services+0x48>)
1000a9c2:	4b08      	ldr	r3, [pc, #32]	; (1000a9e4 <sms_pressure_define_services+0x4c>)
1000a9c4:	4798      	blx	r3
    }
    else {
        DBG_LOG_DEV("[sms_pressure_define_services]\tServices defined, SMS pressure handle: %d", pressure_device.service_handler.serv_handle);
    }
1000a9c6:	b002      	add	sp, #8
1000a9c8:	bd10      	pop	{r4, pc}
1000a9ca:	46c0      	nop			; (mov r8, r8)
1000a9cc:	1001a4dc 	.word	0x1001a4dc
1000a9d0:	100091d5 	.word	0x100091d5
1000a9d4:	100091b1 	.word	0x100091b1
1000a9d8:	100177b0 	.word	0x100177b0
1000a9dc:	10016871 	.word	0x10016871
1000a9e0:	10017ac0 	.word	0x10017ac0
1000a9e4:	10016751 	.word	0x10016751

1000a9e8 <sms_sensors_interrupt_toggle>:
 */ 

#include "sms_peripheral1.h"

/* Sensors-related functions */
void sms_sensors_interrupt_toggle(bool mpu_int, bool press_int) {
1000a9e8:	b510      	push	{r4, lr}
1000a9ea:	000c      	movs	r4, r1
    /* IMU --> IMU_DRDY */
    if(mpu_int) {
1000a9ec:	2800      	cmp	r0, #0
1000a9ee:	d006      	beq.n	1000a9fe <sms_sensors_interrupt_toggle+0x16>
        imu_device.state = IMU_STATE_ON;
1000a9f0:	2102      	movs	r1, #2
1000a9f2:	2383      	movs	r3, #131	; 0x83
1000a9f4:	4a14      	ldr	r2, [pc, #80]	; (1000aa48 <sms_sensors_interrupt_toggle+0x60>)
1000a9f6:	54d1      	strb	r1, [r2, r3]
        sms_imu_enable_callback();
1000a9f8:	4b14      	ldr	r3, [pc, #80]	; (1000aa4c <sms_sensors_interrupt_toggle+0x64>)
1000a9fa:	4798      	blx	r3
1000a9fc:	e005      	b.n	1000aa0a <sms_sensors_interrupt_toggle+0x22>
    }
    else {
        imu_device.state = IMU_STATE_OFF;
1000a9fe:	2100      	movs	r1, #0
1000aa00:	2383      	movs	r3, #131	; 0x83
1000aa02:	4a11      	ldr	r2, [pc, #68]	; (1000aa48 <sms_sensors_interrupt_toggle+0x60>)
1000aa04:	54d1      	strb	r1, [r2, r3]
        sms_imu_disable_callback();
1000aa06:	4b12      	ldr	r3, [pc, #72]	; (1000aa50 <sms_sensors_interrupt_toggle+0x68>)
1000aa08:	4798      	blx	r3
     * Note: Since there is no direct mechanism to simply enable and disable
     *       the AON sleep timer interruption, we have to initialize it each
     *       time (and it starts running) and register the corresponding
     *       callback (and it enables the interrupt)
     */
    if(press_int) {
1000aa0a:	2c00      	cmp	r4, #0
1000aa0c:	d010      	beq.n	1000aa30 <sms_sensors_interrupt_toggle+0x48>
        pressure_device.hal.current_state = MS58_STATE_CONV_PRESSURE;
1000aa0e:	4b11      	ldr	r3, [pc, #68]	; (1000aa54 <sms_sensors_interrupt_toggle+0x6c>)
1000aa10:	2103      	movs	r1, #3
1000aa12:	2225      	movs	r2, #37	; 0x25
1000aa14:	5499      	strb	r1, [r3, r2]
        pressure_device.state = PRESSURE_STATE_ON;
1000aa16:	3901      	subs	r1, #1
1000aa18:	3206      	adds	r2, #6
1000aa1a:	5499      	strb	r1, [r3, r2]
        sms_timer_aon_init(SMS_PRESSURE_CONVERT_MS, AON_SLEEP_TIMER_RELOAD_MODE);
1000aa1c:	2100      	movs	r1, #0
1000aa1e:	480e      	ldr	r0, [pc, #56]	; (1000aa58 <sms_sensors_interrupt_toggle+0x70>)
1000aa20:	4b0e      	ldr	r3, [pc, #56]	; (1000aa5c <sms_sensors_interrupt_toggle+0x74>)
1000aa22:	4798      	blx	r3
        sms_timer_aon_register_callback();
1000aa24:	4b0e      	ldr	r3, [pc, #56]	; (1000aa60 <sms_sensors_interrupt_toggle+0x78>)
1000aa26:	4798      	blx	r3
        sensors_active = true;
1000aa28:	2201      	movs	r2, #1
1000aa2a:	4b0e      	ldr	r3, [pc, #56]	; (1000aa64 <sms_sensors_interrupt_toggle+0x7c>)
1000aa2c:	701a      	strb	r2, [r3, #0]
1000aa2e:	e00a      	b.n	1000aa46 <sms_sensors_interrupt_toggle+0x5e>
    }
    else {
        pressure_device.hal.current_state = MS58_STATE_READY;
1000aa30:	2102      	movs	r1, #2
1000aa32:	2325      	movs	r3, #37	; 0x25
1000aa34:	4a07      	ldr	r2, [pc, #28]	; (1000aa54 <sms_sensors_interrupt_toggle+0x6c>)
1000aa36:	54d1      	strb	r1, [r2, r3]
        sms_timer_aon_disable();
1000aa38:	4b0b      	ldr	r3, [pc, #44]	; (1000aa68 <sms_sensors_interrupt_toggle+0x80>)
1000aa3a:	4798      	blx	r3
        sms_timer_aon_unregister_callback();
1000aa3c:	4b0b      	ldr	r3, [pc, #44]	; (1000aa6c <sms_sensors_interrupt_toggle+0x84>)
1000aa3e:	4798      	blx	r3
        sensors_active = false;
1000aa40:	2200      	movs	r2, #0
1000aa42:	4b08      	ldr	r3, [pc, #32]	; (1000aa64 <sms_sensors_interrupt_toggle+0x7c>)
1000aa44:	701a      	strb	r2, [r3, #0]
    }
}
1000aa46:	bd10      	pop	{r4, pc}
1000aa48:	1001a564 	.word	0x1001a564
1000aa4c:	100098a9 	.word	0x100098a9
1000aa50:	100098c5 	.word	0x100098c5
1000aa54:	1001a4b0 	.word	0x1001a4b0
1000aa58:	000003d5 	.word	0x000003d5
1000aa5c:	1000ab85 	.word	0x1000ab85
1000aa60:	1000abb9 	.word	0x1000abb9
1000aa64:	1001a53c 	.word	0x1001a53c
1000aa68:	1000abad 	.word	0x1000abad
1000aa6c:	1000abd9 	.word	0x1000abd9

1000aa70 <sms_sensors_switch>:
    

void sms_sensors_switch(bool mpu_en, bool press_en)
{
1000aa70:	b510      	push	{r4, lr}
1000aa72:	000c      	movs	r4, r1
    /* IMU */
    if(mpu_en) {
1000aa74:	2800      	cmp	r0, #0
1000aa76:	d103      	bne.n	1000aa80 <sms_sensors_switch+0x10>
            //mpu_device.hal.init_ok = true;
            //sms_sensors_interrupt_toggle(true, false);
        //}
    }
    else {
        gpio_pin_set_output_level(SMS_MPU_VCC_PIN, false);
1000aa78:	2100      	movs	r1, #0
1000aa7a:	3006      	adds	r0, #6
1000aa7c:	4b07      	ldr	r3, [pc, #28]	; (1000aa9c <sms_sensors_switch+0x2c>)
1000aa7e:	4798      	blx	r3
    }
    
    /* Pressure */
    if(press_en) {                
1000aa80:	2c00      	cmp	r4, #0
1000aa82:	d006      	beq.n	1000aa92 <sms_sensors_switch+0x22>
        pressure_device.hal.current_state = MS58_STATE_RESETTING;
1000aa84:	2101      	movs	r1, #1
1000aa86:	2325      	movs	r3, #37	; 0x25
1000aa88:	4a05      	ldr	r2, [pc, #20]	; (1000aaa0 <sms_sensors_switch+0x30>)
1000aa8a:	54d1      	strb	r1, [r2, r3]
        //pressure_device.hal.reset_done = false;
        //pressure_device.hal.init_ok = false;
        sms_pressure_startup();
1000aa8c:	4b05      	ldr	r3, [pc, #20]	; (1000aaa4 <sms_sensors_switch+0x34>)
1000aa8e:	4798      	blx	r3
1000aa90:	e003      	b.n	1000aa9a <sms_sensors_switch+0x2a>
    }
    else {
        gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, false);
1000aa92:	2100      	movs	r1, #0
1000aa94:	2007      	movs	r0, #7
1000aa96:	4b01      	ldr	r3, [pc, #4]	; (1000aa9c <sms_sensors_switch+0x2c>)
1000aa98:	4798      	blx	r3
    }
}
1000aa9a:	bd10      	pop	{r4, pc}
1000aa9c:	1000b925 	.word	0x1000b925
1000aaa0:	1001a4b0 	.word	0x1001a4b0
1000aaa4:	1000a931 	.word	0x1000a931

1000aaa8 <sms_spi_master_configure>:
 *   + mode 3 on SPI0 @ 1 MHz for MPU-9250 IMU
 * - assign SS pin for each slave device
 * - enable SPI
 */ 
void sms_spi_master_configure(void)
{
1000aaa8:	b530      	push	{r4, r5, lr}
1000aaaa:	b08d      	sub	sp, #52	; 0x34
    //DBG_LOG_DEV("[spi_master_configure]\tconfiguring SPI masters and attaching slaves...");

    /* Initialize ms58 spi slave device */
    struct spi_config spi_master_config;
    struct spi_slave_inst_config spi_slave_ms58_config;
    spi_slave_inst_get_config_defaults(&spi_slave_ms58_config);
1000aaac:	ac01      	add	r4, sp, #4
1000aaae:	0020      	movs	r0, r4
1000aab0:	4b13      	ldr	r3, [pc, #76]	; (1000ab00 <sms_spi_master_configure+0x58>)
1000aab2:	4798      	blx	r3
    spi_slave_ms58_config.ss_pin = SMS_PRESSURE_SPI_SS_PIN;
1000aab4:	2310      	movs	r3, #16
1000aab6:	7023      	strb	r3, [r4, #0]
    spi_attach_slave(&spi_slave_ms58_instance, &spi_slave_ms58_config);
1000aab8:	0021      	movs	r1, r4
1000aaba:	4812      	ldr	r0, [pc, #72]	; (1000ab04 <sms_spi_master_configure+0x5c>)
1000aabc:	4b12      	ldr	r3, [pc, #72]	; (1000ab08 <sms_spi_master_configure+0x60>)
1000aabe:	4798      	blx	r3
    

    /* Initialize SPI1 master for ms58 */
    spi_get_config_defaults(&spi_master_config);
1000aac0:	ac02      	add	r4, sp, #8
1000aac2:	0020      	movs	r0, r4
1000aac4:	4b11      	ldr	r3, [pc, #68]	; (1000ab0c <sms_spi_master_configure+0x64>)
1000aac6:	4798      	blx	r3
    spi_master_config.clock_divider = SPI_MASTER_MS58_CLOCK_DIV;
1000aac8:	2368      	movs	r3, #104	; 0x68
1000aaca:	7123      	strb	r3, [r4, #4]
    spi_master_config.transfer_mode = SPI_MASTER_MS58_MODE;
1000aacc:	2300      	movs	r3, #0
1000aace:	70a3      	strb	r3, [r4, #2]
    spi_master_config.pin_number_pad[0] = SPI_MASTER_MS58_PIN_SCK;
1000aad0:	3311      	adds	r3, #17
1000aad2:	60a3      	str	r3, [r4, #8]
    spi_master_config.pinmux_sel_pad[0] = SPI_MASTER_MS58_MUX_SCK;
1000aad4:	3b0d      	subs	r3, #13
1000aad6:	61a3      	str	r3, [r4, #24]
    spi_master_config.pin_number_pad[1] = SPI_MASTER_MS58_PIN_MOSI;
1000aad8:	2213      	movs	r2, #19
1000aada:	60e2      	str	r2, [r4, #12]
    spi_master_config.pinmux_sel_pad[1] = SPI_MASTER_MS58_MUX_MOSI;
1000aadc:	61e3      	str	r3, [r4, #28]
    spi_master_config.pin_number_pad[2] = SPI_MASTER_MS58_PIN_SSN;
1000aade:	3a14      	subs	r2, #20
1000aae0:	6122      	str	r2, [r4, #16]
    spi_master_config.pinmux_sel_pad[2] = SPI_MASTER_MS58_MUX_SSN;
1000aae2:	6222      	str	r2, [r4, #32]
    spi_master_config.pin_number_pad[3] = SPI_MASTER_MS58_MISO;
1000aae4:	3213      	adds	r2, #19
1000aae6:	6162      	str	r2, [r4, #20]
    spi_master_config.pinmux_sel_pad[3] = SPI_MASTER_MS58_MUX_MISO;
1000aae8:	6263      	str	r3, [r4, #36]	; 0x24
    spi_init(&spi_master_ms58_instance, SPI_MASTER_MS58_PORT, &spi_master_config);
1000aaea:	4d09      	ldr	r5, [pc, #36]	; (1000ab10 <sms_spi_master_configure+0x68>)
1000aaec:	0022      	movs	r2, r4
1000aaee:	4909      	ldr	r1, [pc, #36]	; (1000ab14 <sms_spi_master_configure+0x6c>)
1000aaf0:	0028      	movs	r0, r5
1000aaf2:	4b09      	ldr	r3, [pc, #36]	; (1000ab18 <sms_spi_master_configure+0x70>)
1000aaf4:	4798      	blx	r3
    spi_enable(&spi_master_ms58_instance);
1000aaf6:	0028      	movs	r0, r5
1000aaf8:	4b08      	ldr	r3, [pc, #32]	; (1000ab1c <sms_spi_master_configure+0x74>)
1000aafa:	4798      	blx	r3
}
1000aafc:	b00d      	add	sp, #52	; 0x34
1000aafe:	bd30      	pop	{r4, r5, pc}
1000ab00:	1000b055 	.word	0x1000b055
1000ab04:	1001a54c 	.word	0x1001a54c
1000ab08:	1000b08d 	.word	0x1000b08d
1000ab0c:	1000b061 	.word	0x1000b061
1000ab10:	1001a558 	.word	0x1001a558
1000ab14:	40007000 	.word	0x40007000
1000ab18:	1000b15d 	.word	0x1000b15d
1000ab1c:	1000b0cd 	.word	0x1000b0cd

1000ab20 <sms_spi_master_transceive>:
/* SPI transceive function:
 * - enable selected slave
 * - start transceive blocking job
 * - when job returned, disable selected slave
 */
enum status_code sms_spi_master_transceive(struct spi_module *const module, struct spi_slave_inst *const slave, uint8_t *tx_data, uint8_t *rx_data, uint16_t len) {
1000ab20:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ab22:	b083      	sub	sp, #12
1000ab24:	0004      	movs	r4, r0
1000ab26:	000d      	movs	r5, r1
1000ab28:	9200      	str	r2, [sp, #0]
1000ab2a:	9301      	str	r3, [sp, #4]
1000ab2c:	ab08      	add	r3, sp, #32
1000ab2e:	881e      	ldrh	r6, [r3, #0]
    enum status_code retVal;
    /* Enable slave */
    //DBG_LOG_CONT_DEV(" selecting slave...");
    spi_select_slave(module, slave, true);
1000ab30:	2201      	movs	r2, #1
1000ab32:	4f08      	ldr	r7, [pc, #32]	; (1000ab54 <sms_spi_master_transceive+0x34>)
1000ab34:	47b8      	blx	r7
    /* Write SPI data */
    //DBG_LOG_CONT_DEV(" writing data...");
    retVal = spi_transceive_buffer_wait(module, tx_data, rx_data, len);
1000ab36:	0033      	movs	r3, r6
1000ab38:	9a01      	ldr	r2, [sp, #4]
1000ab3a:	9900      	ldr	r1, [sp, #0]
1000ab3c:	0020      	movs	r0, r4
1000ab3e:	4e06      	ldr	r6, [pc, #24]	; (1000ab58 <sms_spi_master_transceive+0x38>)
1000ab40:	47b0      	blx	r6
1000ab42:	0006      	movs	r6, r0
    /* Disable slave */
    //DBG_LOG_CONT_DEV(" de-selecting slave...");
    spi_select_slave(module, slave, false);
1000ab44:	2200      	movs	r2, #0
1000ab46:	0029      	movs	r1, r5
1000ab48:	0020      	movs	r0, r4
1000ab4a:	47b8      	blx	r7
    //DBG_LOG_CONT_DEV(" done!");
    return retVal;
}
1000ab4c:	0030      	movs	r0, r6
1000ab4e:	b003      	add	sp, #12
1000ab50:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ab52:	46c0      	nop			; (mov r8, r8)
1000ab54:	1000b345 	.word	0x1000b345
1000ab58:	1000b2c1 	.word	0x1000b2c1

1000ab5c <sms_timer_aon_callback>:

#include "sms_timer.h"

/* AON SLEEP TIMER */
void sms_timer_aon_callback(void)
{
1000ab5c:	b510      	push	{r4, lr}
    if(pressure_device.int_enabled) {
1000ab5e:	2328      	movs	r3, #40	; 0x28
1000ab60:	4a06      	ldr	r2, [pc, #24]	; (1000ab7c <sms_timer_aon_callback+0x20>)
1000ab62:	5cd3      	ldrb	r3, [r2, r3]
1000ab64:	2b00      	cmp	r3, #0
1000ab66:	d008      	beq.n	1000ab7a <sms_timer_aon_callback+0x1e>
		pressure_device.new_int = true;
1000ab68:	2101      	movs	r1, #1
1000ab6a:	2329      	movs	r3, #41	; 0x29
1000ab6c:	54d1      	strb	r1, [r2, r3]
	    send_plf_int_msg_ind(AON_SLEEP_TIMER_EXPIRY_CALLBACK, AON_TIMER_EXPIRED, NULL, 0);
1000ab6e:	2300      	movs	r3, #0
1000ab70:	2200      	movs	r2, #0
1000ab72:	3102      	adds	r1, #2
1000ab74:	2042      	movs	r0, #66	; 0x42
1000ab76:	4c02      	ldr	r4, [pc, #8]	; (1000ab80 <sms_timer_aon_callback+0x24>)
1000ab78:	47a0      	blx	r4
	}
}
1000ab7a:	bd10      	pop	{r4, pc}
1000ab7c:	1001a4b0 	.word	0x1001a4b0
1000ab80:	1000e5e9 	.word	0x1000e5e9

1000ab84 <sms_timer_aon_init>:

void sms_timer_aon_init(uint32_t cnt, enum aon_sleep_timer_mode cnt_mode)
{
1000ab84:	b530      	push	{r4, r5, lr}
1000ab86:	b083      	sub	sp, #12
1000ab88:	0004      	movs	r4, r0
1000ab8a:	000d      	movs	r5, r1
    struct aon_sleep_timer_config config_aon_sleep_timer;
    aon_sleep_timer_get_config_defaults(&config_aon_sleep_timer);
1000ab8c:	4668      	mov	r0, sp
1000ab8e:	4b05      	ldr	r3, [pc, #20]	; (1000aba4 <sms_timer_aon_init+0x20>)
1000ab90:	4798      	blx	r3
    config_aon_sleep_timer.mode = cnt_mode;
1000ab92:	466b      	mov	r3, sp
1000ab94:	705d      	strb	r5, [r3, #1]
    config_aon_sleep_timer.counter = cnt;
1000ab96:	9401      	str	r4, [sp, #4]
    aon_sleep_timer_init(&config_aon_sleep_timer);
1000ab98:	4668      	mov	r0, sp
1000ab9a:	4b03      	ldr	r3, [pc, #12]	; (1000aba8 <sms_timer_aon_init+0x24>)
1000ab9c:	4798      	blx	r3
}
1000ab9e:	b003      	add	sp, #12
1000aba0:	bd30      	pop	{r4, r5, pc}
1000aba2:	46c0      	nop			; (mov r8, r8)
1000aba4:	100080e9 	.word	0x100080e9
1000aba8:	1000815d 	.word	0x1000815d

1000abac <sms_timer_aon_disable>:

void sms_timer_aon_disable(void)
{
1000abac:	b510      	push	{r4, lr}
    aon_sleep_timer_disable();
1000abae:	4b01      	ldr	r3, [pc, #4]	; (1000abb4 <sms_timer_aon_disable+0x8>)
1000abb0:	4798      	blx	r3
}
1000abb2:	bd10      	pop	{r4, pc}
1000abb4:	100080f9 	.word	0x100080f9

1000abb8 <sms_timer_aon_register_callback>:

void sms_timer_aon_register_callback(void)
{
1000abb8:	b510      	push	{r4, lr}
    aon_sleep_timer_register_callback(sms_timer_aon_callback);
1000abba:	4804      	ldr	r0, [pc, #16]	; (1000abcc <sms_timer_aon_register_callback+0x14>)
1000abbc:	4b04      	ldr	r3, [pc, #16]	; (1000abd0 <sms_timer_aon_register_callback+0x18>)
1000abbe:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000abc0:	2280      	movs	r2, #128	; 0x80
1000abc2:	0512      	lsls	r2, r2, #20
1000abc4:	4b03      	ldr	r3, [pc, #12]	; (1000abd4 <sms_timer_aon_register_callback+0x1c>)
1000abc6:	601a      	str	r2, [r3, #0]
    NVIC_EnableIRQ(AON_SLEEP_TIMER0_IRQn);
}
1000abc8:	bd10      	pop	{r4, pc}
1000abca:	46c0      	nop			; (mov r8, r8)
1000abcc:	1000ab5d 	.word	0x1000ab5d
1000abd0:	10008145 	.word	0x10008145
1000abd4:	e000e100 	.word	0xe000e100

1000abd8 <sms_timer_aon_unregister_callback>:

void sms_timer_aon_unregister_callback(void)
{
1000abd8:	b510      	push	{r4, lr}
    aon_sleep_timer_unregister_callback();
1000abda:	4b04      	ldr	r3, [pc, #16]	; (1000abec <sms_timer_aon_unregister_callback+0x14>)
1000abdc:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000abde:	2180      	movs	r1, #128	; 0x80
1000abe0:	0509      	lsls	r1, r1, #20
1000abe2:	2380      	movs	r3, #128	; 0x80
1000abe4:	4a02      	ldr	r2, [pc, #8]	; (1000abf0 <sms_timer_aon_unregister_callback+0x18>)
1000abe6:	50d1      	str	r1, [r2, r3]
    NVIC_DisableIRQ(AON_SLEEP_TIMER0_IRQn);
}
1000abe8:	bd10      	pop	{r4, pc}
1000abea:	46c0      	nop			; (mov r8, r8)
1000abec:	10008151 	.word	0x10008151
1000abf0:	e000e100 	.word	0xe000e100

1000abf4 <sms_dualtimer_init>:
    count = (uint32_t *)0;
}

/* DUALTIMER */
void sms_dualtimer_init(void)
{
1000abf4:	b510      	push	{r4, lr}
1000abf6:	b088      	sub	sp, #32
    struct dualtimer_config config_dualtimer;
    dualtimer_get_config_defaults(&config_dualtimer);
1000abf8:	ac01      	add	r4, sp, #4
1000abfa:	0020      	movs	r0, r4
1000abfc:	4b0c      	ldr	r3, [pc, #48]	; (1000ac30 <sms_dualtimer_init+0x3c>)
1000abfe:	4798      	blx	r3

	/* Dualtimer1 used for background us counting without interrupts
	 * (similar to the millis() or micros() functions in Arduino) */
    //config_dualtimer.timer1.load_value = SMS_DUALTIMER_LOAD_US;
	config_dualtimer.timer1.load_value = 0xFFFFFFFF;
1000ac00:	2301      	movs	r3, #1
1000ac02:	425b      	negs	r3, r3
1000ac04:	60a3      	str	r3, [r4, #8]
    config_dualtimer.timer1.counter_mode = DUALTIMER_FREE_RUNNING_MODE;
1000ac06:	3302      	adds	r3, #2
1000ac08:	7063      	strb	r3, [r4, #1]
	//config_dualtimer.timer1.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
	//config_dualtimer.timer1.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
	config_dualtimer.timer1.interrup_enable = false;
1000ac0a:	2200      	movs	r2, #0
1000ac0c:	7122      	strb	r2, [r4, #4]
	/* Dualtimer1 used first as a blocking ms delay
	 * (could be changed after device startup and initialization) */
    config_dualtimer.timer2.load_value = SMS_DUALTIMER_LOAD_MS;
1000ac0e:	4909      	ldr	r1, [pc, #36]	; (1000ac34 <sms_dualtimer_init+0x40>)
1000ac10:	6161      	str	r1, [r4, #20]
    config_dualtimer.timer2.counter_mode = DUALTIMER_ONE_SHOT_MODE;
1000ac12:	7362      	strb	r2, [r4, #13]
	config_dualtimer.timer2.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
1000ac14:	73e2      	strb	r2, [r4, #15]
	config_dualtimer.timer2.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
1000ac16:	73a3      	strb	r3, [r4, #14]
	config_dualtimer.timer2.interrup_enable = true;
1000ac18:	7423      	strb	r3, [r4, #16]

    dualtimer_init(&config_dualtimer);
1000ac1a:	0020      	movs	r0, r4
1000ac1c:	4b06      	ldr	r3, [pc, #24]	; (1000ac38 <sms_dualtimer_init+0x44>)
1000ac1e:	4798      	blx	r3
    dualtimer_disable(DUALTIMER_TIMER1);
1000ac20:	2000      	movs	r0, #0
1000ac22:	4c06      	ldr	r4, [pc, #24]	; (1000ac3c <sms_dualtimer_init+0x48>)
1000ac24:	47a0      	blx	r4
    dualtimer_disable(DUALTIMER_TIMER2);
1000ac26:	2001      	movs	r0, #1
1000ac28:	47a0      	blx	r4
}
1000ac2a:	b008      	add	sp, #32
1000ac2c:	bd10      	pop	{r4, pc}
1000ac2e:	46c0      	nop			; (mov r8, r8)
1000ac30:	1000b3a9 	.word	0x1000b3a9
1000ac34:	00006590 	.word	0x00006590
1000ac38:	1000b451 	.word	0x1000b451
1000ac3c:	1000b42d 	.word	0x1000b42d

1000ac40 <sms_dualtimer_register_callback>:

void sms_dualtimer_register_callback(enum dualtimer_timer tmr, sms_dualtimer_callback_t cb_handler)
{
1000ac40:	b510      	push	{r4, lr}
1000ac42:	0004      	movs	r4, r0
    dualtimer_register_callback(tmr, cb_handler);
1000ac44:	4b02      	ldr	r3, [pc, #8]	; (1000ac50 <sms_dualtimer_register_callback+0x10>)
1000ac46:	4798      	blx	r3
    NVIC_EnableIRQ(DUALTIMER0_IRQn);
}

void sms_dualtimer_stop(enum dualtimer_timer tmr)
{
    dualtimer_disable(tmr);
1000ac48:	0020      	movs	r0, r4
1000ac4a:	4b02      	ldr	r3, [pc, #8]	; (1000ac54 <sms_dualtimer_register_callback+0x14>)
1000ac4c:	4798      	blx	r3

void sms_dualtimer_register_callback(enum dualtimer_timer tmr, sms_dualtimer_callback_t cb_handler)
{
    dualtimer_register_callback(tmr, cb_handler);
    sms_dualtimer_stop(tmr);
}
1000ac4e:	bd10      	pop	{r4, pc}
1000ac50:	1000b555 	.word	0x1000b555
1000ac54:	1000b42d 	.word	0x1000b42d

1000ac58 <sms_dualtimer_start>:

void sms_dualtimer_start(timer_unit_type_t unit, uint32_t delay, enum dualtimer_timer tmr)
{
1000ac58:	b510      	push	{r4, lr}
1000ac5a:	0014      	movs	r4, r2
    uint32_t timer_load = 1;
    switch(unit) {
1000ac5c:	2801      	cmp	r0, #1
1000ac5e:	d006      	beq.n	1000ac6e <sms_dualtimer_start+0x16>
1000ac60:	2800      	cmp	r0, #0
1000ac62:	d002      	beq.n	1000ac6a <sms_dualtimer_start+0x12>
1000ac64:	2802      	cmp	r0, #2
1000ac66:	d004      	beq.n	1000ac72 <sms_dualtimer_start+0x1a>
1000ac68:	e005      	b.n	1000ac76 <sms_dualtimer_start+0x1e>
        case TIMER_UNIT_US:
        timer_load = SMS_DUALTIMER_LOAD_US;
1000ac6a:	221a      	movs	r2, #26
1000ac6c:	e004      	b.n	1000ac78 <sms_dualtimer_start+0x20>
        break;
        
        case TIMER_UNIT_MS:
        timer_load = SMS_DUALTIMER_LOAD_MS;
1000ac6e:	4a0c      	ldr	r2, [pc, #48]	; (1000aca0 <sms_dualtimer_start+0x48>)
        break;
1000ac70:	e002      	b.n	1000ac78 <sms_dualtimer_start+0x20>
        
        case TIMER_UNIT_S:
        timer_load = SMS_DUALTIMER_LOAD_S;
1000ac72:	4a0c      	ldr	r2, [pc, #48]	; (1000aca4 <sms_dualtimer_start+0x4c>)
        break;
1000ac74:	e000      	b.n	1000ac78 <sms_dualtimer_start+0x20>
    sms_dualtimer_stop(tmr);
}

void sms_dualtimer_start(timer_unit_type_t unit, uint32_t delay, enum dualtimer_timer tmr)
{
    uint32_t timer_load = 1;
1000ac76:	2201      	movs	r2, #1
        
        default:
        break;
    }
    
    if(delay <= 0) {
1000ac78:	2900      	cmp	r1, #0
1000ac7a:	d100      	bne.n	1000ac7e <sms_dualtimer_start+0x26>
        //DBG_LOG("[sms_dualtimer_start]\tWarning! Delay value < 0... setting to 1");
        delay = 1;
1000ac7c:	3101      	adds	r1, #1
    }
    
    ulp_ready = false;
1000ac7e:	2000      	movs	r0, #0
1000ac80:	4b09      	ldr	r3, [pc, #36]	; (1000aca8 <sms_dualtimer_start+0x50>)
1000ac82:	7018      	strb	r0, [r3, #0]
    //DBG_LOG_DEV("[sms_dualtimer_start]\t\tStarting timer%d... load: %ld, delay: %ld", (tmr+1), timer_load, delay);
    dualtimer_set_counter(tmr, DUALTIMER_SET_CURRUNT_REG, timer_load * delay);
1000ac84:	434a      	muls	r2, r1
1000ac86:	2100      	movs	r1, #0
1000ac88:	0020      	movs	r0, r4
1000ac8a:	4b08      	ldr	r3, [pc, #32]	; (1000acac <sms_dualtimer_start+0x54>)
1000ac8c:	4798      	blx	r3
    dualtimer_enable(tmr);
1000ac8e:	0020      	movs	r0, r4
1000ac90:	4b07      	ldr	r3, [pc, #28]	; (1000acb0 <sms_dualtimer_start+0x58>)
1000ac92:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000ac94:	2280      	movs	r2, #128	; 0x80
1000ac96:	01d2      	lsls	r2, r2, #7
1000ac98:	4b06      	ldr	r3, [pc, #24]	; (1000acb4 <sms_dualtimer_start+0x5c>)
1000ac9a:	601a      	str	r2, [r3, #0]
    NVIC_EnableIRQ(DUALTIMER0_IRQn);
}
1000ac9c:	bd10      	pop	{r4, pc}
1000ac9e:	46c0      	nop			; (mov r8, r8)
1000aca0:	00006590 	.word	0x00006590
1000aca4:	018cba80 	.word	0x018cba80
1000aca8:	1001a425 	.word	0x1001a425
1000acac:	1000b3e1 	.word	0x1000b3e1
1000acb0:	1000b409 	.word	0x1000b409
1000acb4:	e000e100 	.word	0xe000e100

1000acb8 <sms_dualtimer_stop>:

void sms_dualtimer_stop(enum dualtimer_timer tmr)
{
1000acb8:	b510      	push	{r4, lr}
    dualtimer_disable(tmr);
1000acba:	4b01      	ldr	r3, [pc, #4]	; (1000acc0 <sms_dualtimer_stop+0x8>)
1000acbc:	4798      	blx	r3
}
1000acbe:	bd10      	pop	{r4, pc}
1000acc0:	1000b42d 	.word	0x1000b42d

1000acc4 <sms_dualtimer1_cb>:

void sms_dualtimer1_cb(void)
{
1000acc4:	b510      	push	{r4, lr}
    timer1_instance.new_int = true;
1000acc6:	2201      	movs	r2, #1
1000acc8:	4b04      	ldr	r3, [pc, #16]	; (1000acdc <sms_dualtimer1_cb+0x18>)
1000acca:	709a      	strb	r2, [r3, #2]
    send_plf_int_msg_ind(DUALTIMER_TIMER1_CALLBACK, TIMER_EXPIRED_CALLBACK_TYPE_DETECT, NULL, 0);
1000accc:	2300      	movs	r3, #0
1000acce:	2200      	movs	r2, #0
1000acd0:	2101      	movs	r1, #1
1000acd2:	2040      	movs	r0, #64	; 0x40
1000acd4:	4c02      	ldr	r4, [pc, #8]	; (1000ace0 <sms_dualtimer1_cb+0x1c>)
1000acd6:	47a0      	blx	r4
}
1000acd8:	bd10      	pop	{r4, pc}
1000acda:	46c0      	nop			; (mov r8, r8)
1000acdc:	1001a49c 	.word	0x1001a49c
1000ace0:	1000e5e9 	.word	0x1000e5e9

1000ace4 <sms_dualtimer1_fn>:
    send_plf_int_msg_ind(DUALTIMER_TIMER2_CALLBACK, TIMER_EXPIRED_CALLBACK_TYPE_DETECT, NULL, 0);
}


void sms_dualtimer1_fn(void)
{
1000ace4:	b510      	push	{r4, lr}
    //sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
    switch(timer1_current_mode) {
1000ace6:	4b79      	ldr	r3, [pc, #484]	; (1000aecc <sms_dualtimer1_fn+0x1e8>)
1000ace8:	781b      	ldrb	r3, [r3, #0]
1000acea:	b2db      	uxtb	r3, r3
1000acec:	2b01      	cmp	r3, #1
1000acee:	d003      	beq.n	1000acf8 <sms_dualtimer1_fn+0x14>
1000acf0:	2b02      	cmp	r3, #2
1000acf2:	d100      	bne.n	1000acf6 <sms_dualtimer1_fn+0x12>
1000acf4:	e0ae      	b.n	1000ae54 <sms_dualtimer1_fn+0x170>
1000acf6:	e0e1      	b.n	1000aebc <sms_dualtimer1_fn+0x1d8>
        /* Timer1 mode = STARTUP */
        case TIMER1_MODE_STARTUP:
        {
            timer1_current_mode = TIMER1_MODE_NONE;
1000acf8:	2200      	movs	r2, #0
1000acfa:	4b74      	ldr	r3, [pc, #464]	; (1000aecc <sms_dualtimer1_fn+0x1e8>)
1000acfc:	701a      	strb	r2, [r3, #0]
            button_instance.previous_state = button_instance.current_state;
1000acfe:	4c74      	ldr	r4, [pc, #464]	; (1000aed0 <sms_dualtimer1_fn+0x1ec>)
1000ad00:	7b63      	ldrb	r3, [r4, #13]
1000ad02:	7323      	strb	r3, [r4, #12]
            button_instance.current_state = sms_button_get_state();
1000ad04:	4b73      	ldr	r3, [pc, #460]	; (1000aed4 <sms_dualtimer1_fn+0x1f0>)
1000ad06:	4798      	blx	r3
1000ad08:	7360      	strb	r0, [r4, #13]
            sms_monitor_get_states("[sms_dualtimer1_fn]");
1000ad0a:	4873      	ldr	r0, [pc, #460]	; (1000aed8 <sms_dualtimer1_fn+0x1f4>)
1000ad0c:	4b73      	ldr	r3, [pc, #460]	; (1000aedc <sms_dualtimer1_fn+0x1f8>)
1000ad0e:	4798      	blx	r3
            
            switch(button_instance.previous_state) {
1000ad10:	7b23      	ldrb	r3, [r4, #12]
1000ad12:	2b01      	cmp	r3, #1
1000ad14:	d002      	beq.n	1000ad1c <sms_dualtimer1_fn+0x38>
1000ad16:	2b02      	cmp	r3, #2
1000ad18:	d04c      	beq.n	1000adb4 <sms_dualtimer1_fn+0xd0>
1000ad1a:	e093      	b.n	1000ae44 <sms_dualtimer1_fn+0x160>
                // --- Timer1 mode = STARTUP: switch prev_state ---
                case BUTTON_STATE_B0:
                switch(button_instance.current_state) {
1000ad1c:	4b6c      	ldr	r3, [pc, #432]	; (1000aed0 <sms_dualtimer1_fn+0x1ec>)
1000ad1e:	7b5b      	ldrb	r3, [r3, #13]
1000ad20:	2b01      	cmp	r3, #1
1000ad22:	d002      	beq.n	1000ad2a <sms_dualtimer1_fn+0x46>
1000ad24:	2b02      	cmp	r3, #2
1000ad26:	d023      	beq.n	1000ad70 <sms_dualtimer1_fn+0x8c>
1000ad28:	e03b      	b.n	1000ada2 <sms_dualtimer1_fn+0xbe>
                    // --- prev_state = b0: switch current_state ---
                    case BUTTON_STATE_B0:
                    if(ble_instance.current_state == BLE_STATE_POWEROFF) {
1000ad2a:	4b6d      	ldr	r3, [pc, #436]	; (1000aee0 <sms_dualtimer1_fn+0x1fc>)
1000ad2c:	781b      	ldrb	r3, [r3, #0]
1000ad2e:	2b00      	cmp	r3, #0
1000ad30:	d115      	bne.n	1000ad5e <sms_dualtimer1_fn+0x7a>
                        sms_btn_cnt++;
1000ad32:	4a6c      	ldr	r2, [pc, #432]	; (1000aee4 <sms_dualtimer1_fn+0x200>)
1000ad34:	7813      	ldrb	r3, [r2, #0]
1000ad36:	3301      	adds	r3, #1
1000ad38:	b2db      	uxtb	r3, r3
1000ad3a:	7013      	strb	r3, [r2, #0]
                        if(sms_btn_cnt >= SMS_BTN_STARTUP_CNT) {
1000ad3c:	2b0f      	cmp	r3, #15
1000ad3e:	d905      	bls.n	1000ad4c <sms_dualtimer1_fn+0x68>
                            timer1_current_mode = TIMER1_MODE_NONE;
1000ad40:	2200      	movs	r2, #0
1000ad42:	4b62      	ldr	r3, [pc, #392]	; (1000aecc <sms_dualtimer1_fn+0x1e8>)
1000ad44:	701a      	strb	r2, [r3, #0]
                            sms_ble_startup();
1000ad46:	4b68      	ldr	r3, [pc, #416]	; (1000aee8 <sms_dualtimer1_fn+0x204>)
1000ad48:	4798      	blx	r3
1000ad4a:	e0be      	b.n	1000aeca <sms_dualtimer1_fn+0x1e6>
                        }
                        else {
                            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                            timer1_current_mode = TIMER1_MODE_STARTUP;
1000ad4c:	2201      	movs	r2, #1
1000ad4e:	4b5f      	ldr	r3, [pc, #380]	; (1000aecc <sms_dualtimer1_fn+0x1e8>)
1000ad50:	701a      	strb	r2, [r3, #0]
                            //ulp_ready = false;
                            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
1000ad52:	2200      	movs	r2, #0
1000ad54:	21fa      	movs	r1, #250	; 0xfa
1000ad56:	2001      	movs	r0, #1
1000ad58:	4b64      	ldr	r3, [pc, #400]	; (1000aeec <sms_dualtimer1_fn+0x208>)
1000ad5a:	4798      	blx	r3
1000ad5c:	e0b5      	b.n	1000aeca <sms_dualtimer1_fn+0x1e6>
                        }
                    }
                    else {
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        if(timer2_current_mode == TIMER2_MODE_NONE) {
1000ad5e:	4b64      	ldr	r3, [pc, #400]	; (1000aef0 <sms_dualtimer1_fn+0x20c>)
1000ad60:	781b      	ldrb	r3, [r3, #0]
1000ad62:	2b00      	cmp	r3, #0
1000ad64:	d000      	beq.n	1000ad68 <sms_dualtimer1_fn+0x84>
1000ad66:	e0b0      	b.n	1000aeca <sms_dualtimer1_fn+0x1e6>
                            //release_sleep_lock();
                            ulp_ready = true;
1000ad68:	2201      	movs	r2, #1
1000ad6a:	4b62      	ldr	r3, [pc, #392]	; (1000aef4 <sms_dualtimer1_fn+0x210>)
1000ad6c:	701a      	strb	r2, [r3, #0]
1000ad6e:	e0ac      	b.n	1000aeca <sms_dualtimer1_fn+0x1e6>
                    }
                    break;
                    
                    // --- prev_state = b0: switch current_state ---
                    case BUTTON_STATE_B1:
                    if(ble_instance.current_state == BLE_STATE_POWEROFF) {
1000ad70:	4b5b      	ldr	r3, [pc, #364]	; (1000aee0 <sms_dualtimer1_fn+0x1fc>)
1000ad72:	781b      	ldrb	r3, [r3, #0]
1000ad74:	2b00      	cmp	r3, #0
1000ad76:	d10b      	bne.n	1000ad90 <sms_dualtimer1_fn+0xac>
                        sms_btn_cnt = 0;
1000ad78:	2200      	movs	r2, #0
1000ad7a:	4b5a      	ldr	r3, [pc, #360]	; (1000aee4 <sms_dualtimer1_fn+0x200>)
1000ad7c:	701a      	strb	r2, [r3, #0]
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        timer1_current_mode = TIMER1_MODE_STARTUP;
1000ad7e:	3201      	adds	r2, #1
1000ad80:	4b52      	ldr	r3, [pc, #328]	; (1000aecc <sms_dualtimer1_fn+0x1e8>)
1000ad82:	701a      	strb	r2, [r3, #0]
                        //ulp_ready = false;
                        sms_dualtimer_start(TIMER_UNIT_MS, SMS_BLINK_STARTUP_MS, DUALTIMER_TIMER1);
1000ad84:	2200      	movs	r2, #0
1000ad86:	2164      	movs	r1, #100	; 0x64
1000ad88:	2001      	movs	r0, #1
1000ad8a:	4b58      	ldr	r3, [pc, #352]	; (1000aeec <sms_dualtimer1_fn+0x208>)
1000ad8c:	4798      	blx	r3
1000ad8e:	e09c      	b.n	1000aeca <sms_dualtimer1_fn+0x1e6>
                    }
                    else {
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        if(timer2_current_mode == TIMER2_MODE_NONE) {
1000ad90:	4b57      	ldr	r3, [pc, #348]	; (1000aef0 <sms_dualtimer1_fn+0x20c>)
1000ad92:	781b      	ldrb	r3, [r3, #0]
1000ad94:	2b00      	cmp	r3, #0
1000ad96:	d000      	beq.n	1000ad9a <sms_dualtimer1_fn+0xb6>
1000ad98:	e097      	b.n	1000aeca <sms_dualtimer1_fn+0x1e6>
                            //release_sleep_lock();
                            ulp_ready = true;
1000ad9a:	2201      	movs	r2, #1
1000ad9c:	4b55      	ldr	r3, [pc, #340]	; (1000aef4 <sms_dualtimer1_fn+0x210>)
1000ad9e:	701a      	strb	r2, [r3, #0]
1000ada0:	e093      	b.n	1000aeca <sms_dualtimer1_fn+0x1e6>
                    // --- prev_state = b0: switch current_state ---
                    case BUTTON_STATE_BOTH:
                    case BUTTON_STATE_NONE:
                    default:
                    //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                    if(timer2_current_mode == TIMER2_MODE_NONE) {
1000ada2:	4b53      	ldr	r3, [pc, #332]	; (1000aef0 <sms_dualtimer1_fn+0x20c>)
1000ada4:	781b      	ldrb	r3, [r3, #0]
1000ada6:	2b00      	cmp	r3, #0
1000ada8:	d000      	beq.n	1000adac <sms_dualtimer1_fn+0xc8>
1000adaa:	e08e      	b.n	1000aeca <sms_dualtimer1_fn+0x1e6>
                        //release_sleep_lock();
                        ulp_ready = true;
1000adac:	2201      	movs	r2, #1
1000adae:	4b51      	ldr	r3, [pc, #324]	; (1000aef4 <sms_dualtimer1_fn+0x210>)
1000adb0:	701a      	strb	r2, [r3, #0]
1000adb2:	e08a      	b.n	1000aeca <sms_dualtimer1_fn+0x1e6>
                }
                break;
                
                // --- Timer1 mode = STARTUP: switch prev_state ---
                case BUTTON_STATE_B1:
                switch(button_instance.current_state) {
1000adb4:	4b46      	ldr	r3, [pc, #280]	; (1000aed0 <sms_dualtimer1_fn+0x1ec>)
1000adb6:	7b5b      	ldrb	r3, [r3, #13]
1000adb8:	2b01      	cmp	r3, #1
1000adba:	d023      	beq.n	1000ae04 <sms_dualtimer1_fn+0x120>
1000adbc:	2b02      	cmp	r3, #2
1000adbe:	d139      	bne.n	1000ae34 <sms_dualtimer1_fn+0x150>
                    // --- prev_state = b1: switch current_state ---
                    case BUTTON_STATE_B1:
                    if(ble_instance.current_state == BLE_STATE_POWEROFF) {
1000adc0:	4b47      	ldr	r3, [pc, #284]	; (1000aee0 <sms_dualtimer1_fn+0x1fc>)
1000adc2:	781b      	ldrb	r3, [r3, #0]
1000adc4:	2b00      	cmp	r3, #0
1000adc6:	d115      	bne.n	1000adf4 <sms_dualtimer1_fn+0x110>
                        sms_btn_cnt++;
1000adc8:	4a46      	ldr	r2, [pc, #280]	; (1000aee4 <sms_dualtimer1_fn+0x200>)
1000adca:	7813      	ldrb	r3, [r2, #0]
1000adcc:	3301      	adds	r3, #1
1000adce:	b2db      	uxtb	r3, r3
1000add0:	7013      	strb	r3, [r2, #0]
                        if(sms_btn_cnt >= SMS_BTN_STARTUP_CNT) {
1000add2:	2b0f      	cmp	r3, #15
1000add4:	d905      	bls.n	1000ade2 <sms_dualtimer1_fn+0xfe>
                            timer1_current_mode = TIMER1_MODE_NONE;
1000add6:	2200      	movs	r2, #0
1000add8:	4b3c      	ldr	r3, [pc, #240]	; (1000aecc <sms_dualtimer1_fn+0x1e8>)
1000adda:	701a      	strb	r2, [r3, #0]
                            sms_ble_startup();
1000addc:	4b42      	ldr	r3, [pc, #264]	; (1000aee8 <sms_dualtimer1_fn+0x204>)
1000adde:	4798      	blx	r3
1000ade0:	e073      	b.n	1000aeca <sms_dualtimer1_fn+0x1e6>
                        }
                        else {
                            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                            timer1_current_mode = TIMER1_MODE_STARTUP;
1000ade2:	2201      	movs	r2, #1
1000ade4:	4b39      	ldr	r3, [pc, #228]	; (1000aecc <sms_dualtimer1_fn+0x1e8>)
1000ade6:	701a      	strb	r2, [r3, #0]
                            //ulp_ready = false;
                            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
1000ade8:	2200      	movs	r2, #0
1000adea:	21fa      	movs	r1, #250	; 0xfa
1000adec:	2001      	movs	r0, #1
1000adee:	4b3f      	ldr	r3, [pc, #252]	; (1000aeec <sms_dualtimer1_fn+0x208>)
1000adf0:	4798      	blx	r3
1000adf2:	e06a      	b.n	1000aeca <sms_dualtimer1_fn+0x1e6>
                        }
                    }
                    else {
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        if(timer2_current_mode == TIMER2_MODE_NONE) {
1000adf4:	4b3e      	ldr	r3, [pc, #248]	; (1000aef0 <sms_dualtimer1_fn+0x20c>)
1000adf6:	781b      	ldrb	r3, [r3, #0]
1000adf8:	2b00      	cmp	r3, #0
1000adfa:	d166      	bne.n	1000aeca <sms_dualtimer1_fn+0x1e6>
                            //release_sleep_lock();
                            ulp_ready = true;
1000adfc:	2201      	movs	r2, #1
1000adfe:	4b3d      	ldr	r3, [pc, #244]	; (1000aef4 <sms_dualtimer1_fn+0x210>)
1000ae00:	701a      	strb	r2, [r3, #0]
1000ae02:	e062      	b.n	1000aeca <sms_dualtimer1_fn+0x1e6>
                    }
                    break;
                    
                    // --- prev_state = b1: switch current_state ---
                    case BUTTON_STATE_B0:
                    if(ble_instance.current_state == BLE_STATE_POWEROFF) {
1000ae04:	4b36      	ldr	r3, [pc, #216]	; (1000aee0 <sms_dualtimer1_fn+0x1fc>)
1000ae06:	781b      	ldrb	r3, [r3, #0]
1000ae08:	2b00      	cmp	r3, #0
1000ae0a:	d10b      	bne.n	1000ae24 <sms_dualtimer1_fn+0x140>
                        sms_btn_cnt = 0;
1000ae0c:	2200      	movs	r2, #0
1000ae0e:	4b35      	ldr	r3, [pc, #212]	; (1000aee4 <sms_dualtimer1_fn+0x200>)
1000ae10:	701a      	strb	r2, [r3, #0]
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        timer1_current_mode = TIMER1_MODE_STARTUP;
1000ae12:	3201      	adds	r2, #1
1000ae14:	4b2d      	ldr	r3, [pc, #180]	; (1000aecc <sms_dualtimer1_fn+0x1e8>)
1000ae16:	701a      	strb	r2, [r3, #0]
                        //ulp_ready = false;
                        sms_dualtimer_start(TIMER_UNIT_MS, SMS_BLINK_STARTUP_MS, DUALTIMER_TIMER1);
1000ae18:	2200      	movs	r2, #0
1000ae1a:	2164      	movs	r1, #100	; 0x64
1000ae1c:	2001      	movs	r0, #1
1000ae1e:	4b33      	ldr	r3, [pc, #204]	; (1000aeec <sms_dualtimer1_fn+0x208>)
1000ae20:	4798      	blx	r3
1000ae22:	e052      	b.n	1000aeca <sms_dualtimer1_fn+0x1e6>
                    }
                    else {
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        if(timer2_current_mode == TIMER2_MODE_NONE) {
1000ae24:	4b32      	ldr	r3, [pc, #200]	; (1000aef0 <sms_dualtimer1_fn+0x20c>)
1000ae26:	781b      	ldrb	r3, [r3, #0]
1000ae28:	2b00      	cmp	r3, #0
1000ae2a:	d14e      	bne.n	1000aeca <sms_dualtimer1_fn+0x1e6>
                            //release_sleep_lock();
                            ulp_ready = true;
1000ae2c:	2201      	movs	r2, #1
1000ae2e:	4b31      	ldr	r3, [pc, #196]	; (1000aef4 <sms_dualtimer1_fn+0x210>)
1000ae30:	701a      	strb	r2, [r3, #0]
1000ae32:	e04a      	b.n	1000aeca <sms_dualtimer1_fn+0x1e6>
                    // --- prev_state = b1: switch current_state ---
                    case BUTTON_STATE_NONE:
                    case BUTTON_STATE_BOTH:
                    default:
                    //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                    if(timer2_current_mode == TIMER2_MODE_NONE) {
1000ae34:	4b2e      	ldr	r3, [pc, #184]	; (1000aef0 <sms_dualtimer1_fn+0x20c>)
1000ae36:	781b      	ldrb	r3, [r3, #0]
1000ae38:	2b00      	cmp	r3, #0
1000ae3a:	d146      	bne.n	1000aeca <sms_dualtimer1_fn+0x1e6>
                        //release_sleep_lock();
                        ulp_ready = true;
1000ae3c:	2201      	movs	r2, #1
1000ae3e:	4b2d      	ldr	r3, [pc, #180]	; (1000aef4 <sms_dualtimer1_fn+0x210>)
1000ae40:	701a      	strb	r2, [r3, #0]
1000ae42:	e042      	b.n	1000aeca <sms_dualtimer1_fn+0x1e6>
                case BUTTON_STATE_NONE:
                case BUTTON_STATE_BOTH:
                default:
                {
                    //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                    if(timer2_current_mode == TIMER2_MODE_NONE) {
1000ae44:	4b2a      	ldr	r3, [pc, #168]	; (1000aef0 <sms_dualtimer1_fn+0x20c>)
1000ae46:	781b      	ldrb	r3, [r3, #0]
1000ae48:	2b00      	cmp	r3, #0
1000ae4a:	d13e      	bne.n	1000aeca <sms_dualtimer1_fn+0x1e6>
                        //release_sleep_lock();
                        ulp_ready = true;
1000ae4c:	2201      	movs	r2, #1
1000ae4e:	4b29      	ldr	r3, [pc, #164]	; (1000aef4 <sms_dualtimer1_fn+0x210>)
1000ae50:	701a      	strb	r2, [r3, #0]
1000ae52:	e03a      	b.n	1000aeca <sms_dualtimer1_fn+0x1e6>
        
        /* Timer1 mode = SHUTDOWN */
        case TIMER1_MODE_SHUTDOWN:
        {
            //timer1_current_mode = TIMER1_MODE_NONE;
            button_instance.previous_state = button_instance.current_state;
1000ae54:	4c1e      	ldr	r4, [pc, #120]	; (1000aed0 <sms_dualtimer1_fn+0x1ec>)
1000ae56:	7b63      	ldrb	r3, [r4, #13]
1000ae58:	7323      	strb	r3, [r4, #12]
            button_instance.current_state = sms_button_get_state();
1000ae5a:	4b1e      	ldr	r3, [pc, #120]	; (1000aed4 <sms_dualtimer1_fn+0x1f0>)
1000ae5c:	4798      	blx	r3
1000ae5e:	7360      	strb	r0, [r4, #13]
            sms_monitor_get_states("[sms_dualtimer1_fn]");
1000ae60:	481d      	ldr	r0, [pc, #116]	; (1000aed8 <sms_dualtimer1_fn+0x1f4>)
1000ae62:	4b1e      	ldr	r3, [pc, #120]	; (1000aedc <sms_dualtimer1_fn+0x1f8>)
1000ae64:	4798      	blx	r3
            
            if((button_instance.previous_state == BUTTON_STATE_BOTH) && (button_instance.current_state == BUTTON_STATE_BOTH)) {
1000ae66:	89a2      	ldrh	r2, [r4, #12]
1000ae68:	4b23      	ldr	r3, [pc, #140]	; (1000aef8 <sms_dualtimer1_fn+0x214>)
1000ae6a:	429a      	cmp	r2, r3
1000ae6c:	d112      	bne.n	1000ae94 <sms_dualtimer1_fn+0x1b0>
                sms_btn_cnt++;
1000ae6e:	4a1d      	ldr	r2, [pc, #116]	; (1000aee4 <sms_dualtimer1_fn+0x200>)
1000ae70:	7813      	ldrb	r3, [r2, #0]
1000ae72:	3301      	adds	r3, #1
1000ae74:	b2db      	uxtb	r3, r3
1000ae76:	7013      	strb	r3, [r2, #0]
                if(sms_btn_cnt >= SMS_BTN_SHTDWN_CNT) {
1000ae78:	2b09      	cmp	r3, #9
1000ae7a:	d902      	bls.n	1000ae82 <sms_dualtimer1_fn+0x19e>
                    sms_ble_power_down();
1000ae7c:	4b1f      	ldr	r3, [pc, #124]	; (1000aefc <sms_dualtimer1_fn+0x218>)
1000ae7e:	4798      	blx	r3
1000ae80:	e023      	b.n	1000aeca <sms_dualtimer1_fn+0x1e6>
                }
                else {
                    //sms_sensors_toggle_interrupt(SMS_EXTINT_DISABLE);
                    timer1_current_mode = TIMER1_MODE_SHUTDOWN;
1000ae82:	2202      	movs	r2, #2
1000ae84:	4b11      	ldr	r3, [pc, #68]	; (1000aecc <sms_dualtimer1_fn+0x1e8>)
1000ae86:	701a      	strb	r2, [r3, #0]
                    sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_SHTDWN_MS, DUALTIMER_TIMER1);
1000ae88:	2200      	movs	r2, #0
1000ae8a:	21fa      	movs	r1, #250	; 0xfa
1000ae8c:	2001      	movs	r0, #1
1000ae8e:	4b17      	ldr	r3, [pc, #92]	; (1000aeec <sms_dualtimer1_fn+0x208>)
1000ae90:	4798      	blx	r3
1000ae92:	e01a      	b.n	1000aeca <sms_dualtimer1_fn+0x1e6>
                }
            }
            else {
                if(pressure_device.state == PRESSURE_STATE_STDBY) {
1000ae94:	232b      	movs	r3, #43	; 0x2b
1000ae96:	4a1a      	ldr	r2, [pc, #104]	; (1000af00 <sms_dualtimer1_fn+0x21c>)
1000ae98:	5cd3      	ldrb	r3, [r2, r3]
1000ae9a:	2b01      	cmp	r3, #1
1000ae9c:	d103      	bne.n	1000aea6 <sms_dualtimer1_fn+0x1c2>
                    DBG_LOG_DEV("[sms_dualtimer1_fn]\t\tStarting sensors (shutting down)...");
                    sms_sensors_interrupt_toggle(false, true);
1000ae9e:	2101      	movs	r1, #1
1000aea0:	2000      	movs	r0, #0
1000aea2:	4b18      	ldr	r3, [pc, #96]	; (1000af04 <sms_dualtimer1_fn+0x220>)
1000aea4:	4798      	blx	r3
                }                    
                timer1_current_mode = TIMER1_MODE_NONE;
1000aea6:	2200      	movs	r2, #0
1000aea8:	4b08      	ldr	r3, [pc, #32]	; (1000aecc <sms_dualtimer1_fn+0x1e8>)
1000aeaa:	701a      	strb	r2, [r3, #0]
                if(timer2_current_mode == TIMER2_MODE_NONE) {
1000aeac:	4b10      	ldr	r3, [pc, #64]	; (1000aef0 <sms_dualtimer1_fn+0x20c>)
1000aeae:	781b      	ldrb	r3, [r3, #0]
1000aeb0:	2b00      	cmp	r3, #0
1000aeb2:	d10a      	bne.n	1000aeca <sms_dualtimer1_fn+0x1e6>
                    ulp_ready = true;
1000aeb4:	3201      	adds	r2, #1
1000aeb6:	4b0f      	ldr	r3, [pc, #60]	; (1000aef4 <sms_dualtimer1_fn+0x210>)
1000aeb8:	701a      	strb	r2, [r3, #0]
1000aeba:	e006      	b.n	1000aeca <sms_dualtimer1_fn+0x1e6>
        }
        
        case TIMER1_MODE_NONE:
        default:
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
        if(timer2_current_mode == TIMER2_MODE_NONE) {
1000aebc:	4b0c      	ldr	r3, [pc, #48]	; (1000aef0 <sms_dualtimer1_fn+0x20c>)
1000aebe:	781b      	ldrb	r3, [r3, #0]
1000aec0:	2b00      	cmp	r3, #0
1000aec2:	d102      	bne.n	1000aeca <sms_dualtimer1_fn+0x1e6>
            //release_sleep_lock();
            ulp_ready = true;
1000aec4:	2201      	movs	r2, #1
1000aec6:	4b0b      	ldr	r3, [pc, #44]	; (1000aef4 <sms_dualtimer1_fn+0x210>)
1000aec8:	701a      	strb	r2, [r3, #0]
        }            
        break;
    } // switch(timer1_current_mode)
}
1000aeca:	bd10      	pop	{r4, pc}
1000aecc:	1001a41c 	.word	0x1001a41c
1000aed0:	1001a42c 	.word	0x1001a42c
1000aed4:	100093f5 	.word	0x100093f5
1000aed8:	10017b08 	.word	0x10017b08
1000aedc:	1000968d 	.word	0x1000968d
1000aee0:	1001a428 	.word	0x1001a428
1000aee4:	1001a646 	.word	0x1001a646
1000aee8:	10008ddd 	.word	0x10008ddd
1000aeec:	1000ac59 	.word	0x1000ac59
1000aef0:	1001a54b 	.word	0x1001a54b
1000aef4:	1001a425 	.word	0x1001a425
1000aef8:	00000303 	.word	0x00000303
1000aefc:	10008df5 	.word	0x10008df5
1000af00:	1001a4b0 	.word	0x1001a4b0
1000af04:	1000a9e9 	.word	0x1000a9e9

1000af08 <sms_dualtimer2_fn>:

void sms_dualtimer2_fn(void)
{
1000af08:	b510      	push	{r4, lr}
    //sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
    sms_monitor_get_states("[sms_dualtimer2_fn]");
1000af0a:	483a      	ldr	r0, [pc, #232]	; (1000aff4 <sms_dualtimer2_fn+0xec>)
1000af0c:	4b3a      	ldr	r3, [pc, #232]	; (1000aff8 <sms_dualtimer2_fn+0xf0>)
1000af0e:	4798      	blx	r3
    switch(timer2_current_mode) {
1000af10:	4b3a      	ldr	r3, [pc, #232]	; (1000affc <sms_dualtimer2_fn+0xf4>)
1000af12:	781b      	ldrb	r3, [r3, #0]
1000af14:	b2db      	uxtb	r3, r3
1000af16:	2b02      	cmp	r3, #2
1000af18:	d028      	beq.n	1000af6c <sms_dualtimer2_fn+0x64>
1000af1a:	2b03      	cmp	r3, #3
1000af1c:	d047      	beq.n	1000afae <sms_dualtimer2_fn+0xa6>
1000af1e:	2b01      	cmp	r3, #1
1000af20:	d166      	bne.n	1000aff0 <sms_dualtimer2_fn+0xe8>
        case TIMER2_MODE_INDICATION_TOUT:
        timer2_current_mode = TIMER2_MODE_NONE;
1000af22:	2200      	movs	r2, #0
1000af24:	4b35      	ldr	r3, [pc, #212]	; (1000affc <sms_dualtimer2_fn+0xf4>)
1000af26:	701a      	strb	r2, [r3, #0]
        if(ble_instance.current_state == BLE_STATE_PAIRED) {
1000af28:	4b35      	ldr	r3, [pc, #212]	; (1000b000 <sms_dualtimer2_fn+0xf8>)
1000af2a:	781b      	ldrb	r3, [r3, #0]
1000af2c:	2b22      	cmp	r3, #34	; 0x22
1000af2e:	d107      	bne.n	1000af40 <sms_dualtimer2_fn+0x38>
            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
            if(timer1_current_mode == TIMER1_MODE_NONE) {
1000af30:	4b34      	ldr	r3, [pc, #208]	; (1000b004 <sms_dualtimer2_fn+0xfc>)
1000af32:	781b      	ldrb	r3, [r3, #0]
1000af34:	2b00      	cmp	r3, #0
1000af36:	d15b      	bne.n	1000aff0 <sms_dualtimer2_fn+0xe8>
                //release_sleep_lock();
                ulp_ready = true;
1000af38:	3201      	adds	r2, #1
1000af3a:	4b33      	ldr	r3, [pc, #204]	; (1000b008 <sms_dualtimer2_fn+0x100>)
1000af3c:	701a      	strb	r2, [r3, #0]
1000af3e:	e057      	b.n	1000aff0 <sms_dualtimer2_fn+0xe8>
            }                
        }
        else {
            sms_ble_ind_retry++;
1000af40:	4a32      	ldr	r2, [pc, #200]	; (1000b00c <sms_dualtimer2_fn+0x104>)
1000af42:	7813      	ldrb	r3, [r2, #0]
1000af44:	3301      	adds	r3, #1
1000af46:	b2db      	uxtb	r3, r3
1000af48:	7013      	strb	r3, [r2, #0]
            if(sms_ble_ind_retry >= BLE_INDICATION_RETRY_MAX) {
1000af4a:	2b00      	cmp	r3, #0
1000af4c:	d006      	beq.n	1000af5c <sms_dualtimer2_fn+0x54>
                DBG_LOG_CONT_DEV(" ...giving up!");
                //DBG_LOG_DEV("[sms_dualtimer2_fn]\tTimer1 mode: %d", timer1_current_mode);
                timer2_current_mode = TIMER2_MODE_NONE;
1000af4e:	2200      	movs	r2, #0
1000af50:	4b2a      	ldr	r3, [pc, #168]	; (1000affc <sms_dualtimer2_fn+0xf4>)
1000af52:	701a      	strb	r2, [r3, #0]
                ble_instance.current_state = BLE_STATE_PAIRED;
1000af54:	3222      	adds	r2, #34	; 0x22
1000af56:	4b2a      	ldr	r3, [pc, #168]	; (1000b000 <sms_dualtimer2_fn+0xf8>)
1000af58:	701a      	strb	r2, [r3, #0]
1000af5a:	e049      	b.n	1000aff0 <sms_dualtimer2_fn+0xe8>
                //if(timer1_current_mode == TIMER1_MODE_NONE) release_sleep_lock();
            }
            else {
                DBG_LOG_CONT_DEV(" ...waiting... counter: %d", sms_ble_ind_retry);
                //sms_ble_send_characteristic(BLE_CHAR_PRESSURE);
                timer2_current_mode = TIMER2_MODE_INDICATION_TOUT;
1000af5c:	2201      	movs	r2, #1
1000af5e:	4b27      	ldr	r3, [pc, #156]	; (1000affc <sms_dualtimer2_fn+0xf4>)
1000af60:	701a      	strb	r2, [r3, #0]
                //ulp_ready = false;
                sms_dualtimer_start(TIMER_UNIT_MS, BLE_INDICATION_TOUT_MS, DUALTIMER_TIMER2);
1000af62:	2164      	movs	r1, #100	; 0x64
1000af64:	2001      	movs	r0, #1
1000af66:	4b2a      	ldr	r3, [pc, #168]	; (1000b010 <sms_dualtimer2_fn+0x108>)
1000af68:	4798      	blx	r3
1000af6a:	e041      	b.n	1000aff0 <sms_dualtimer2_fn+0xe8>
        }
        break;
        
        case TIMER2_MODE_LED_STARTUP:
        DBG_LOG_DEV("[sms_dualtimer2_fn]\t\tBlinking startup...");
        timer2_current_mode = TIMER2_MODE_NONE;
1000af6c:	2200      	movs	r2, #0
1000af6e:	4b23      	ldr	r3, [pc, #140]	; (1000affc <sms_dualtimer2_fn+0xf4>)
1000af70:	701a      	strb	r2, [r3, #0]
        sms_led_blink_cnt++;
1000af72:	4a28      	ldr	r2, [pc, #160]	; (1000b014 <sms_dualtimer2_fn+0x10c>)
1000af74:	7813      	ldrb	r3, [r2, #0]
1000af76:	3301      	adds	r3, #1
1000af78:	b2db      	uxtb	r3, r3
1000af7a:	7013      	strb	r3, [r2, #0]
        if(sms_led_blink_cnt >= SMS_BLINK_STARTUP_CNT) {
1000af7c:	7813      	ldrb	r3, [r2, #0]
1000af7e:	b2db      	uxtb	r3, r3
1000af80:	2b07      	cmp	r3, #7
1000af82:	d908      	bls.n	1000af96 <sms_dualtimer2_fn+0x8e>
            sms_led_switch_off(SMS_LED_0_PIN);
1000af84:	2016      	movs	r0, #22
1000af86:	4b24      	ldr	r3, [pc, #144]	; (1000b018 <sms_dualtimer2_fn+0x110>)
1000af88:	4798      	blx	r3
            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
            /* Blinking done... starting ble advertisement */
            //DBG_LOG_DEV("[sms_dualtimer2_fn]\tSMS awake... starting advertisement");
            sms_ble_advertise();
1000af8a:	4b24      	ldr	r3, [pc, #144]	; (1000b01c <sms_dualtimer2_fn+0x114>)
1000af8c:	4798      	blx	r3
            ulp_ready = true;
1000af8e:	2201      	movs	r2, #1
1000af90:	4b1d      	ldr	r3, [pc, #116]	; (1000b008 <sms_dualtimer2_fn+0x100>)
1000af92:	701a      	strb	r2, [r3, #0]
1000af94:	e02c      	b.n	1000aff0 <sms_dualtimer2_fn+0xe8>
        }
        else {
            //DBG_LOG_DEV("[sms_dualtimer2_fn]\tBlinking up... cnt = %d", sms_led_blink_cnt);
            sms_led_toggle(SMS_LED_0_PIN);
1000af96:	2016      	movs	r0, #22
1000af98:	4b21      	ldr	r3, [pc, #132]	; (1000b020 <sms_dualtimer2_fn+0x118>)
1000af9a:	4798      	blx	r3
            timer2_current_mode = TIMER2_MODE_LED_STARTUP;
1000af9c:	2202      	movs	r2, #2
1000af9e:	4b17      	ldr	r3, [pc, #92]	; (1000affc <sms_dualtimer2_fn+0xf4>)
1000afa0:	701a      	strb	r2, [r3, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BLINK_STARTUP_MS, DUALTIMER_TIMER2);
1000afa2:	3a01      	subs	r2, #1
1000afa4:	2164      	movs	r1, #100	; 0x64
1000afa6:	2001      	movs	r0, #1
1000afa8:	4b19      	ldr	r3, [pc, #100]	; (1000b010 <sms_dualtimer2_fn+0x108>)
1000afaa:	4798      	blx	r3
1000afac:	e020      	b.n	1000aff0 <sms_dualtimer2_fn+0xe8>
        }
        break;
        
        case TIMER2_MODE_LED_SHUTDOWN:
        DBG_LOG_DEV("[sms_dualtimer2_fn]\t\tBlinking shutdown...");
        timer2_current_mode = TIMER2_MODE_NONE;
1000afae:	2200      	movs	r2, #0
1000afb0:	4b12      	ldr	r3, [pc, #72]	; (1000affc <sms_dualtimer2_fn+0xf4>)
1000afb2:	701a      	strb	r2, [r3, #0]
        sms_led_blink_cnt++;
1000afb4:	4a17      	ldr	r2, [pc, #92]	; (1000b014 <sms_dualtimer2_fn+0x10c>)
1000afb6:	7813      	ldrb	r3, [r2, #0]
1000afb8:	3301      	adds	r3, #1
1000afba:	b2db      	uxtb	r3, r3
1000afbc:	7013      	strb	r3, [r2, #0]
        if(sms_led_blink_cnt >= SMS_BLINK_SHTDWN_CNT) {
1000afbe:	7813      	ldrb	r3, [r2, #0]
1000afc0:	b2db      	uxtb	r3, r3
1000afc2:	2b03      	cmp	r3, #3
1000afc4:	d908      	bls.n	1000afd8 <sms_dualtimer2_fn+0xd0>
            sms_led_switch_off(SMS_LED_0_PIN);
1000afc6:	2016      	movs	r0, #22
1000afc8:	4b13      	ldr	r3, [pc, #76]	; (1000b018 <sms_dualtimer2_fn+0x110>)
1000afca:	4798      	blx	r3
            DBG_LOG_DEV("[sms_dualtimer2_fn]\t\tPowering off...");
            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
            sms_init_variables();
1000afcc:	4b15      	ldr	r3, [pc, #84]	; (1000b024 <sms_dualtimer2_fn+0x11c>)
1000afce:	4798      	blx	r3
            ulp_ready = true;
1000afd0:	2201      	movs	r2, #1
1000afd2:	4b0d      	ldr	r3, [pc, #52]	; (1000b008 <sms_dualtimer2_fn+0x100>)
1000afd4:	701a      	strb	r2, [r3, #0]
1000afd6:	e00b      	b.n	1000aff0 <sms_dualtimer2_fn+0xe8>
            //release_sleep_lock();
        }
        else {
            //DBG_LOG_DEV("[sms_dualtimer2_fn]\tBLinking off... cnt = %d", sms_led_blink_cnt);
            sms_led_toggle(SMS_LED_0_PIN);
1000afd8:	2016      	movs	r0, #22
1000afda:	4b11      	ldr	r3, [pc, #68]	; (1000b020 <sms_dualtimer2_fn+0x118>)
1000afdc:	4798      	blx	r3
            timer2_current_mode = TIMER2_MODE_LED_SHUTDOWN;
1000afde:	2203      	movs	r2, #3
1000afe0:	4b06      	ldr	r3, [pc, #24]	; (1000affc <sms_dualtimer2_fn+0xf4>)
1000afe2:	701a      	strb	r2, [r3, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BLINK_SHTDWN_MS, DUALTIMER_TIMER2);
1000afe4:	3a02      	subs	r2, #2
1000afe6:	21c8      	movs	r1, #200	; 0xc8
1000afe8:	0049      	lsls	r1, r1, #1
1000afea:	2001      	movs	r0, #1
1000afec:	4b08      	ldr	r3, [pc, #32]	; (1000b010 <sms_dualtimer2_fn+0x108>)
1000afee:	4798      	blx	r3
        case TIMER2_MODE_LED_CONNECTION_LOST:
        case TIMER2_MODE_NONE:
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
        break;
    }
}
1000aff0:	bd10      	pop	{r4, pc}
1000aff2:	46c0      	nop			; (mov r8, r8)
1000aff4:	10017b1c 	.word	0x10017b1c
1000aff8:	1000968d 	.word	0x1000968d
1000affc:	1001a54b 	.word	0x1001a54b
1000b000:	1001a428 	.word	0x1001a428
1000b004:	1001a41c 	.word	0x1001a41c
1000b008:	1001a425 	.word	0x1001a425
1000b00c:	1001a53d 	.word	0x1001a53d
1000b010:	1000ac59 	.word	0x1000ac59
1000b014:	1001a64c 	.word	0x1001a64c
1000b018:	1000a701 	.word	0x1000a701
1000b01c:	10008f2d 	.word	0x10008f2d
1000b020:	1000a741 	.word	0x1000a741
1000b024:	1000eac5 	.word	0x1000eac5

1000b028 <delay_ms>:

void delay_ms(uint32_t delay) {
1000b028:	b510      	push	{r4, lr}
1000b02a:	0001      	movs	r1, r0
	sms_dualtimer_start(TIMER_UNIT_MS, delay, DUALTIMER_TIMER2);
1000b02c:	2201      	movs	r2, #1
1000b02e:	2001      	movs	r0, #1
1000b030:	4b05      	ldr	r3, [pc, #20]	; (1000b048 <delay_ms+0x20>)
1000b032:	4798      	blx	r3
	while(dualtimer_get_value(DUALTIMER_TIMER2)) {
1000b034:	4c05      	ldr	r4, [pc, #20]	; (1000b04c <delay_ms+0x24>)
1000b036:	2001      	movs	r0, #1
1000b038:	47a0      	blx	r4
1000b03a:	2800      	cmp	r0, #0
1000b03c:	d1fb      	bne.n	1000b036 <delay_ms+0xe>
    NVIC_EnableIRQ(DUALTIMER0_IRQn);
}

void sms_dualtimer_stop(enum dualtimer_timer tmr)
{
    dualtimer_disable(tmr);
1000b03e:	3001      	adds	r0, #1
1000b040:	4b03      	ldr	r3, [pc, #12]	; (1000b050 <delay_ms+0x28>)
1000b042:	4798      	blx	r3
void delay_ms(uint32_t delay) {
	sms_dualtimer_start(TIMER_UNIT_MS, delay, DUALTIMER_TIMER2);
	while(dualtimer_get_value(DUALTIMER_TIMER2)) {
	}
	sms_dualtimer_stop(DUALTIMER_TIMER2);
1000b044:	bd10      	pop	{r4, pc}
1000b046:	46c0      	nop			; (mov r8, r8)
1000b048:	1000ac59 	.word	0x1000ac59
1000b04c:	1000b3cd 	.word	0x1000b3cd
1000b050:	1000b42d 	.word	0x1000b42d

1000b054 <spi_slave_inst_get_config_defaults>:
void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
	Assert(config);

	config->ss_pin          = PIN_LP_GPIO_12;
1000b054:	230c      	movs	r3, #12
1000b056:	7003      	strb	r3, [r0, #0]
	config->address_enabled = false;
1000b058:	2300      	movs	r3, #0
1000b05a:	7043      	strb	r3, [r0, #1]
	config->address         = 0;
1000b05c:	7083      	strb	r3, [r0, #2]
}
1000b05e:	4770      	bx	lr

1000b060 <spi_get_config_defaults>:
void spi_get_config_defaults(
		struct spi_config *const config)
{
	Assert(config);

	config->mode             = SPI_MODE_MASTER;
1000b060:	2301      	movs	r3, #1
1000b062:	7003      	strb	r3, [r0, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
1000b064:	2300      	movs	r3, #0
1000b066:	7043      	strb	r3, [r0, #1]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
1000b068:	7083      	strb	r3, [r0, #2]
	config->clock_source     = SPI_CLK_INPUT_0;
1000b06a:	70c3      	strb	r3, [r0, #3]
	config->clock_divider    = 129;
1000b06c:	3381      	adds	r3, #129	; 0x81
1000b06e:	7103      	strb	r3, [r0, #4]

	config->pin_number_pad[0] = PIN_LP_GPIO_10;
1000b070:	3b77      	subs	r3, #119	; 0x77
1000b072:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_11;
1000b074:	3301      	adds	r3, #1
1000b076:	60c3      	str	r3, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_12;
1000b078:	3301      	adds	r3, #1
1000b07a:	6103      	str	r3, [r0, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_13;
1000b07c:	3301      	adds	r3, #1
1000b07e:	6143      	str	r3, [r0, #20]

	config->pinmux_sel_pad[0] = MUX_LP_GPIO_10_SPI0_SCK;
1000b080:	3b0b      	subs	r3, #11
1000b082:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_11_SPI0_MOSI;
1000b084:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_12_SPI0_SSN;
1000b086:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_13_SPI0_MISO;
1000b088:	6243      	str	r3, [r0, #36]	; 0x24
};
1000b08a:	4770      	bx	lr

1000b08c <spi_attach_slave>:
 *
 */
void spi_attach_slave(
		struct spi_slave_inst *const slave,
		struct spi_slave_inst_config *const config)
{
1000b08c:	b530      	push	{r4, r5, lr}
1000b08e:	b083      	sub	sp, #12
1000b090:	0004      	movs	r4, r0
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
1000b092:	780b      	ldrb	r3, [r1, #0]
1000b094:	7003      	strb	r3, [r0, #0]
	slave->address_enabled = config->address_enabled;
1000b096:	784b      	ldrb	r3, [r1, #1]
1000b098:	7043      	strb	r3, [r0, #1]
	slave->address         = config->address;
1000b09a:	788b      	ldrb	r3, [r1, #2]
1000b09c:	7083      	strb	r3, [r0, #2]

	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);
1000b09e:	ad01      	add	r5, sp, #4
1000b0a0:	0028      	movs	r0, r5
1000b0a2:	4b07      	ldr	r3, [pc, #28]	; (1000b0c0 <spi_attach_slave+0x34>)
1000b0a4:	4798      	blx	r3
	config_gpio.direction = GPIO_PIN_DIR_OUTPUT;
1000b0a6:	2301      	movs	r3, #1
1000b0a8:	702b      	strb	r3, [r5, #0]
	gpio_pin_set_config(slave->ss_pin, &config_gpio);
1000b0aa:	7820      	ldrb	r0, [r4, #0]
1000b0ac:	0029      	movs	r1, r5
1000b0ae:	4b05      	ldr	r3, [pc, #20]	; (1000b0c4 <spi_attach_slave+0x38>)
1000b0b0:	4798      	blx	r3

	gpio_pin_set_output_level(slave->ss_pin, true);
1000b0b2:	7820      	ldrb	r0, [r4, #0]
1000b0b4:	2101      	movs	r1, #1
1000b0b6:	4b04      	ldr	r3, [pc, #16]	; (1000b0c8 <spi_attach_slave+0x3c>)
1000b0b8:	4798      	blx	r3
}
1000b0ba:	b003      	add	sp, #12
1000b0bc:	bd30      	pop	{r4, r5, pc}
1000b0be:	46c0      	nop			; (mov r8, r8)
1000b0c0:	1000b6bd 	.word	0x1000b6bd
1000b0c4:	1000b6cd 	.word	0x1000b6cd
1000b0c8:	1000b925 	.word	0x1000b925

1000b0cc <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void spi_enable(struct spi_module *const module)
{
	Spi *const spi_module = (module->hw);
1000b0cc:	6803      	ldr	r3, [r0, #0]
		NVIC_EnableIRQ(SPI1_TX_IRQn);
	}
#endif

	/* Enable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = SPI_MODULE_ENABLE_ENABLE;
1000b0ce:	2201      	movs	r2, #1
1000b0d0:	761a      	strb	r2, [r3, #24]
}
1000b0d2:	4770      	bx	lr

1000b0d4 <spi_disable>:
 * This function will disable the SPI module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void spi_disable(struct spi_module *const module)
{
1000b0d4:	b510      	push	{r4, lr}
		NVIC_DisableIRQ(SPI1_TX_IRQn);
	}
#  endif

	/* Disable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
1000b0d6:	2300      	movs	r3, #0
1000b0d8:	6802      	ldr	r2, [r0, #0]
1000b0da:	7613      	strb	r3, [r2, #24]
 */
static void _spi_clock_disable(struct spi_module *const module)
{
	Assert(module);

	Spi *const spi_module = (module->hw);
1000b0dc:	6803      	ldr	r3, [r0, #0]

	if (spi_module == (void *)SPI0) {
1000b0de:	4a0d      	ldr	r2, [pc, #52]	; (1000b114 <spi_disable+0x40>)
1000b0e0:	4293      	cmp	r3, r2
1000b0e2:	d109      	bne.n	1000b0f8 <spi_disable+0x24>
		system_clock_peripheral_disable(PERIPHERAL_SPI0_SCK_CLK);
1000b0e4:	2041      	movs	r0, #65	; 0x41
1000b0e6:	4c0c      	ldr	r4, [pc, #48]	; (1000b118 <spi_disable+0x44>)
1000b0e8:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_SCK_PHASE);
1000b0ea:	2026      	movs	r0, #38	; 0x26
1000b0ec:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_IF);
1000b0ee:	2038      	movs	r0, #56	; 0x38
1000b0f0:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_CORE);
1000b0f2:	2001      	movs	r0, #1
1000b0f4:	47a0      	blx	r4
1000b0f6:	e00b      	b.n	1000b110 <spi_disable+0x3c>
	} else if (spi_module == (void *)SPI1) {
1000b0f8:	4a08      	ldr	r2, [pc, #32]	; (1000b11c <spi_disable+0x48>)
1000b0fa:	4293      	cmp	r3, r2
1000b0fc:	d108      	bne.n	1000b110 <spi_disable+0x3c>
		system_clock_peripheral_disable(PERIPHERAL_SPI1_SCK_CLK);
1000b0fe:	2042      	movs	r0, #66	; 0x42
1000b100:	4c05      	ldr	r4, [pc, #20]	; (1000b118 <spi_disable+0x44>)
1000b102:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_SCK_PHASE);
1000b104:	2027      	movs	r0, #39	; 0x27
1000b106:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_IF);
1000b108:	2039      	movs	r0, #57	; 0x39
1000b10a:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_CORE);
1000b10c:	2002      	movs	r0, #2
1000b10e:	47a0      	blx	r4
#  endif

	/* Disable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
	_spi_clock_disable(module);
}
1000b110:	bd10      	pop	{r4, pc}
1000b112:	46c0      	nop			; (mov r8, r8)
1000b114:	40006000 	.word	0x40006000
1000b118:	1000c0bd 	.word	0x1000c0bd
1000b11c:	40007000 	.word	0x40007000

1000b120 <spi_reset>:
 * disable it.
 *
 * \param[in,out] module Pointer to the software instance struct
 */
void spi_reset(struct spi_module *const module)
{
1000b120:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Spi *const spi_module = (module->hw);
1000b122:	6804      	ldr	r4, [r0, #0]

	/* Disable the module */
	spi_disable(module);
1000b124:	4b09      	ldr	r3, [pc, #36]	; (1000b14c <spi_reset+0x2c>)
1000b126:	4798      	blx	r3

	/* Software reset the module */
	if(spi_module == (void *)SPI0) {
1000b128:	4b09      	ldr	r3, [pc, #36]	; (1000b150 <spi_reset+0x30>)
1000b12a:	429c      	cmp	r4, r3
1000b12c:	d105      	bne.n	1000b13a <spi_reset+0x1a>
		system_peripheral_reset(PERIPHERAL_SPI0_CORE);
1000b12e:	2001      	movs	r0, #1
1000b130:	4c08      	ldr	r4, [pc, #32]	; (1000b154 <spi_reset+0x34>)
1000b132:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_SPI0_IF);
1000b134:	2038      	movs	r0, #56	; 0x38
1000b136:	47a0      	blx	r4
1000b138:	e007      	b.n	1000b14a <spi_reset+0x2a>
	} else if (spi_module == (void *)SPI1) {
1000b13a:	4b07      	ldr	r3, [pc, #28]	; (1000b158 <spi_reset+0x38>)
1000b13c:	429c      	cmp	r4, r3
1000b13e:	d104      	bne.n	1000b14a <spi_reset+0x2a>
		system_peripheral_reset(PERIPHERAL_SPI1_CORE);
1000b140:	2002      	movs	r0, #2
1000b142:	4c04      	ldr	r4, [pc, #16]	; (1000b154 <spi_reset+0x34>)
1000b144:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_SPI1_IF);
1000b146:	2039      	movs	r0, #57	; 0x39
1000b148:	47a0      	blx	r4
	}
}
1000b14a:	bd10      	pop	{r4, pc}
1000b14c:	1000b0d5 	.word	0x1000b0d5
1000b150:	40006000 	.word	0x40006000
1000b154:	1000c429 	.word	0x1000c429
1000b158:	40007000 	.word	0x40007000

1000b15c <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Spi *const hw,
		const struct spi_config *const config)
{
1000b15c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b15e:	465f      	mov	r7, fp
1000b160:	4646      	mov	r6, r8
1000b162:	b4c0      	push	{r6, r7}
1000b164:	b083      	sub	sp, #12
1000b166:	0006      	movs	r6, r0
1000b168:	4688      	mov	r8, r1
1000b16a:	0015      	movs	r5, r2
	Assert(config);

	uint8_t idx;

	/* Initialize device instance */
	module->hw = hw;
1000b16c:	6031      	str	r1, [r6, #0]

	Spi *const spi_module = (module->hw);

	/* Check if module is enabled. */
	if (spi_module->SPI_MODULE_ENABLE.reg & SPI_MODULE_ENABLE_MASK) {
1000b16e:	7e0b      	ldrb	r3, [r1, #24]
1000b170:	07db      	lsls	r3, r3, #31
1000b172:	d501      	bpl.n	1000b178 <spi_init+0x1c>
		spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
1000b174:	2300      	movs	r3, #0
1000b176:	760b      	strb	r3, [r1, #24]
	}

	spi_reset(module);
1000b178:	0030      	movs	r0, r6
1000b17a:	4b4a      	ldr	r3, [pc, #296]	; (1000b2a4 <spi_init+0x148>)
1000b17c:	4798      	blx	r3
 */
static void _spi_clock_enable(struct spi_module *const module)
{
	Assert(module);

	Spi *const spi_module = (module->hw);
1000b17e:	6833      	ldr	r3, [r6, #0]

	if (spi_module == (void *)SPI0) {
1000b180:	4a49      	ldr	r2, [pc, #292]	; (1000b2a8 <spi_init+0x14c>)
1000b182:	4293      	cmp	r3, r2
1000b184:	d109      	bne.n	1000b19a <spi_init+0x3e>
		system_clock_peripheral_enable(PERIPHERAL_SPI0_SCK_CLK);
1000b186:	2041      	movs	r0, #65	; 0x41
1000b188:	4c48      	ldr	r4, [pc, #288]	; (1000b2ac <spi_init+0x150>)
1000b18a:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_SCK_PHASE);
1000b18c:	2026      	movs	r0, #38	; 0x26
1000b18e:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_IF);
1000b190:	2038      	movs	r0, #56	; 0x38
1000b192:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_CORE);
1000b194:	2001      	movs	r0, #1
1000b196:	47a0      	blx	r4
1000b198:	e00b      	b.n	1000b1b2 <spi_init+0x56>
	} else if (spi_module == (void *)SPI1) {
1000b19a:	4a45      	ldr	r2, [pc, #276]	; (1000b2b0 <spi_init+0x154>)
1000b19c:	4293      	cmp	r3, r2
1000b19e:	d108      	bne.n	1000b1b2 <spi_init+0x56>
		system_clock_peripheral_enable(PERIPHERAL_SPI1_SCK_CLK);
1000b1a0:	2042      	movs	r0, #66	; 0x42
1000b1a2:	4c42      	ldr	r4, [pc, #264]	; (1000b2ac <spi_init+0x150>)
1000b1a4:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_SCK_PHASE);
1000b1a6:	2027      	movs	r0, #39	; 0x27
1000b1a8:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_IF);
1000b1aa:	2039      	movs	r0, #57	; 0x39
1000b1ac:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_CORE);
1000b1ae:	2002      	movs	r0, #2
1000b1b0:	47a0      	blx	r4
	}
#endif

	//Program the pinmux.
	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);
1000b1b2:	a801      	add	r0, sp, #4
1000b1b4:	4b3f      	ldr	r3, [pc, #252]	; (1000b2b4 <spi_init+0x158>)
1000b1b6:	4798      	blx	r3
1000b1b8:	002c      	movs	r4, r5
1000b1ba:	3408      	adds	r4, #8
1000b1bc:	2318      	movs	r3, #24
1000b1be:	469b      	mov	fp, r3
1000b1c0:	44ab      	add	fp, r5
1000b1c2:	0027      	movs	r7, r4

	/* Set the pinmux for this spi module. */
	for(idx = 0; idx < 4; idx++) {
		if (config->pin_number_pad[idx] != PINMUX_UNUSED) {
1000b1c4:	6820      	ldr	r0, [r4, #0]
1000b1c6:	1c43      	adds	r3, r0, #1
1000b1c8:	d011      	beq.n	1000b1ee <spi_init+0x92>
			if (config->mode == SPI_MODE_MASTER) {
1000b1ca:	782b      	ldrb	r3, [r5, #0]
1000b1cc:	2b01      	cmp	r3, #1
1000b1ce:	d102      	bne.n	1000b1d6 <spi_init+0x7a>
				config_gpio.direction = GPIO_PIN_DIR_OUTPUT;
1000b1d0:	466a      	mov	r2, sp
1000b1d2:	7113      	strb	r3, [r2, #4]
1000b1d4:	e003      	b.n	1000b1de <spi_init+0x82>
			} else if (config->mode == SPI_MODE_SLAVE) {
1000b1d6:	2b00      	cmp	r3, #0
1000b1d8:	d101      	bne.n	1000b1de <spi_init+0x82>
				config_gpio.direction = GPIO_PIN_DIR_INPUT;
1000b1da:	466a      	mov	r2, sp
1000b1dc:	7113      	strb	r3, [r2, #4]
			}
			gpio_pin_set_config(config->pin_number_pad[idx], &config_gpio);
1000b1de:	b2c0      	uxtb	r0, r0
1000b1e0:	a901      	add	r1, sp, #4
1000b1e2:	4b35      	ldr	r3, [pc, #212]	; (1000b2b8 <spi_init+0x15c>)
1000b1e4:	4798      	blx	r3
			gpio_pinmux_cofiguration(config->pin_number_pad[idx], \
1000b1e6:	8a39      	ldrh	r1, [r7, #16]
1000b1e8:	7838      	ldrb	r0, [r7, #0]
1000b1ea:	4b34      	ldr	r3, [pc, #208]	; (1000b2bc <spi_init+0x160>)
1000b1ec:	4798      	blx	r3
1000b1ee:	3404      	adds	r4, #4
	//Program the pinmux.
	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);

	/* Set the pinmux for this spi module. */
	for(idx = 0; idx < 4; idx++) {
1000b1f0:	455c      	cmp	r4, fp
1000b1f2:	d1e6      	bne.n	1000b1c2 <spi_init+0x66>
						(uint16_t)(config->pinmux_sel_pad[idx]));
		}
	}

	/* Set up the input clock for the module */
	spi_module->CLOCK_SOURCE_SELECT.reg = config->clock_source;
1000b1f4:	78eb      	ldrb	r3, [r5, #3]
1000b1f6:	4642      	mov	r2, r8
1000b1f8:	7413      	strb	r3, [r2, #16]

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
1000b1fa:	782b      	ldrb	r3, [r5, #0]
1000b1fc:	2b01      	cmp	r3, #1
1000b1fe:	d100      	bne.n	1000b202 <spi_init+0xa6>
		/* Set the mode in SPI master mode */
		spi_module->SPI_MASTER_MODE.reg = SPI_MODE_MASTER;
1000b200:	7713      	strb	r3, [r2, #28]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
1000b202:	782b      	ldrb	r3, [r5, #0]
1000b204:	2b00      	cmp	r3, #0
1000b206:	d101      	bne.n	1000b20c <spi_init+0xb0>
		/* Set the mode in SPI slave mode */
		spi_module->SPI_MASTER_MODE.reg = SPI_MODE_SLAVE;
1000b208:	4642      	mov	r2, r8
1000b20a:	7713      	strb	r3, [r2, #28]
		const struct spi_config *const config)
{
	Assert(module);
	Assert(config);

	Spi *const spi_module = (module->hw);
1000b20c:	6833      	ldr	r3, [r6, #0]

	module->mode  = config->mode;
1000b20e:	782a      	ldrb	r2, [r5, #0]
1000b210:	7172      	strb	r2, [r6, #5]

#if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
1000b212:	782a      	ldrb	r2, [r5, #0]
1000b214:	2a01      	cmp	r2, #1
1000b216:	d101      	bne.n	1000b21c <spi_init+0xc0>
		spi_module->SPI_CLK_DIVIDER.reg = config->clock_divider;
1000b218:	792a      	ldrb	r2, [r5, #4]
1000b21a:	829a      	strh	r2, [r3, #20]
	}
#endif

	/* Set data order */
	if (config->data_order == SPI_DATA_ORDER_LSB) {
1000b21c:	786a      	ldrb	r2, [r5, #1]
1000b21e:	2a04      	cmp	r2, #4
1000b220:	d104      	bne.n	1000b22c <spi_init+0xd0>
		spi_module->SPI_CONFIGURATION.bit.LSB_FIRST_ENABLE = 0x1;
1000b222:	2124      	movs	r1, #36	; 0x24
1000b224:	5c58      	ldrb	r0, [r3, r1]
1000b226:	4302      	orrs	r2, r0
1000b228:	545a      	strb	r2, [r3, r1]
1000b22a:	e004      	b.n	1000b236 <spi_init+0xda>
	} else {
		spi_module->SPI_CONFIGURATION.bit.LSB_FIRST_ENABLE = 0x0;
1000b22c:	2124      	movs	r1, #36	; 0x24
1000b22e:	5c5a      	ldrb	r2, [r3, r1]
1000b230:	2004      	movs	r0, #4
1000b232:	4382      	bics	r2, r0
1000b234:	545a      	strb	r2, [r3, r1]
	}

	/* Set clock polarity and clock phase */
	switch(config->transfer_mode)
1000b236:	78aa      	ldrb	r2, [r5, #2]
1000b238:	2a01      	cmp	r2, #1
1000b23a:	d01a      	beq.n	1000b272 <spi_init+0x116>
1000b23c:	2a00      	cmp	r2, #0
1000b23e:	d004      	beq.n	1000b24a <spi_init+0xee>
1000b240:	2a02      	cmp	r2, #2
1000b242:	d00c      	beq.n	1000b25e <spi_init+0x102>
1000b244:	2a03      	cmp	r2, #3
1000b246:	d01e      	beq.n	1000b286 <spi_init+0x12a>
1000b248:	e026      	b.n	1000b298 <spi_init+0x13c>
	{
		case SPI_TRANSFER_MODE_0:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x0;
1000b24a:	2224      	movs	r2, #36	; 0x24
1000b24c:	5c99      	ldrb	r1, [r3, r2]
1000b24e:	2002      	movs	r0, #2
1000b250:	4381      	bics	r1, r0
1000b252:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x0;
1000b254:	5c99      	ldrb	r1, [r3, r2]
1000b256:	3801      	subs	r0, #1
1000b258:	4381      	bics	r1, r0
1000b25a:	5499      	strb	r1, [r3, r2]
1000b25c:	e01c      	b.n	1000b298 <spi_init+0x13c>
			break;
		case SPI_TRANSFER_MODE_1:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x1;
1000b25e:	2224      	movs	r2, #36	; 0x24
1000b260:	5c98      	ldrb	r0, [r3, r2]
1000b262:	2102      	movs	r1, #2
1000b264:	4301      	orrs	r1, r0
1000b266:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x0;
1000b268:	5c99      	ldrb	r1, [r3, r2]
1000b26a:	2001      	movs	r0, #1
1000b26c:	4381      	bics	r1, r0
1000b26e:	5499      	strb	r1, [r3, r2]
1000b270:	e012      	b.n	1000b298 <spi_init+0x13c>
			break;
		case SPI_TRANSFER_MODE_2:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x0;
1000b272:	2224      	movs	r2, #36	; 0x24
1000b274:	5c99      	ldrb	r1, [r3, r2]
1000b276:	2002      	movs	r0, #2
1000b278:	4381      	bics	r1, r0
1000b27a:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x1;
1000b27c:	5c98      	ldrb	r0, [r3, r2]
1000b27e:	2101      	movs	r1, #1
1000b280:	4301      	orrs	r1, r0
1000b282:	5499      	strb	r1, [r3, r2]
1000b284:	e008      	b.n	1000b298 <spi_init+0x13c>
			break;
		case SPI_TRANSFER_MODE_3:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x1;
1000b286:	2224      	movs	r2, #36	; 0x24
1000b288:	5c98      	ldrb	r0, [r3, r2]
1000b28a:	2102      	movs	r1, #2
1000b28c:	4301      	orrs	r1, r0
1000b28e:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x1;
1000b290:	5c98      	ldrb	r0, [r3, r2]
1000b292:	2101      	movs	r1, #1
1000b294:	4301      	orrs	r1, r0
1000b296:	5499      	strb	r1, [r3, r2]
	module->locked                     = 0;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
1000b298:	2000      	movs	r0, #0
1000b29a:	b003      	add	sp, #12
1000b29c:	bc0c      	pop	{r2, r3}
1000b29e:	4690      	mov	r8, r2
1000b2a0:	469b      	mov	fp, r3
1000b2a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b2a4:	1000b121 	.word	0x1000b121
1000b2a8:	40006000 	.word	0x40006000
1000b2ac:	1000bd61 	.word	0x1000bd61
1000b2b0:	40007000 	.word	0x40007000
1000b2b4:	1000b6bd 	.word	0x1000b6bd
1000b2b8:	1000b6cd 	.word	0x1000b6cd
1000b2bc:	1000b9b1 	.word	0x1000b9b1

1000b2c0 <spi_transceive_buffer_wait>:
enum status_code spi_transceive_buffer_wait(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
1000b2c0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b2c2:	b083      	sub	sp, #12
	Spi *spi_module = module->hw;
1000b2c4:	6804      	ldr	r4, [r0, #0]
	uint8_t dummy = 0;
1000b2c6:	2600      	movs	r6, #0
1000b2c8:	466d      	mov	r5, sp
1000b2ca:	71ee      	strb	r6, [r5, #7]
1000b2cc:	3507      	adds	r5, #7
	uint8_t skip_mosi = 0;
	uint8_t skip_miso = 0;
	uint8_t status;
	uint16_t transfer_len = 0;

	if(spi_module == 0) {
1000b2ce:	2c00      	cmp	r4, #0
1000b2d0:	d034      	beq.n	1000b33c <spi_transceive_buffer_wait+0x7c>
		return STATUS_ERR_NOT_INITIALIZED;
	}
	if(!tx_data) {
1000b2d2:	2900      	cmp	r1, #0
1000b2d4:	d104      	bne.n	1000b2e0 <spi_transceive_buffer_wait+0x20>
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
1000b2d6:	0029      	movs	r1, r5
1000b2d8:	7980      	ldrb	r0, [r0, #6]
1000b2da:	7028      	strb	r0, [r5, #0]
		skip_mosi = 1;
1000b2dc:	2701      	movs	r7, #1
1000b2de:	e00b      	b.n	1000b2f8 <spi_transceive_buffer_wait+0x38>
	} else if(!rx_data) {
1000b2e0:	2a00      	cmp	r2, #0
1000b2e2:	d005      	beq.n	1000b2f0 <spi_transceive_buffer_wait+0x30>
		rx_data = &dummy;
		skip_miso = 1;
	} else if(length == 0) {
		return STATUS_ERR_INVALID_ARG;
1000b2e4:	2017      	movs	r0, #23
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
		skip_miso = 1;
	} else if(length == 0) {
1000b2e6:	2b00      	cmp	r3, #0
1000b2e8:	d029      	beq.n	1000b33e <spi_transceive_buffer_wait+0x7e>
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
	uint8_t skip_miso = 0;
1000b2ea:	2600      	movs	r6, #0
		uint8_t *rx_data,
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
1000b2ec:	2700      	movs	r7, #0
1000b2ee:	e003      	b.n	1000b2f8 <spi_transceive_buffer_wait+0x38>
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
		skip_miso = 1;
1000b2f0:	2601      	movs	r6, #1
		uint8_t *rx_data,
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
1000b2f2:	2700      	movs	r7, #0
	if(!tx_data) {
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
1000b2f4:	466a      	mov	r2, sp
1000b2f6:	3207      	adds	r2, #7
 */
static bool _spi_is_active(Spi *const spi_module)
{
	Assert(spi_module);

	return spi_module->SPI_BUS_STATUS.bit.SPI_ACTIVE;
1000b2f8:	2528      	movs	r5, #40	; 0x28
1000b2fa:	5d60      	ldrb	r0, [r4, r5]
	}

	/* Check for Idle */
	do {
		status = _spi_is_active(spi_module);
	}while(status);
1000b2fc:	07c0      	lsls	r0, r0, #31
1000b2fe:	d4fc      	bmi.n	1000b2fa <spi_transceive_buffer_wait+0x3a>

	/* Clear all status registers */
	spi_module->RECEIVE_STATUS.reg;
1000b300:	7b20      	ldrb	r0, [r4, #12]
	spi_module->TRANSMIT_STATUS.reg;
1000b302:	7a20      	ldrb	r0, [r4, #8]

	/* Start transfer */
	while(transfer_len < length) {
1000b304:	2b00      	cmp	r3, #0
1000b306:	d014      	beq.n	1000b332 <spi_transceive_buffer_wait+0x72>
1000b308:	2500      	movs	r5, #0
		/* Read data shifted from MISO */
		while(!_spi_is_ready_to_read(spi_module));
		*rx_data = spi_module->RECEIVE_DATA.reg;
		transfer_len++;
		if (!skip_mosi) {
			tx_data++;
1000b30a:	4278      	negs	r0, r7
1000b30c:	4147      	adcs	r7, r0
		}
		if (!skip_miso) {
			rx_data++;
1000b30e:	4270      	negs	r0, r6
1000b310:	4146      	adcs	r6, r0
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->TRANSMIT_STATUS.bit.TX_FIFO_NOT_FULL);
1000b312:	7a20      	ldrb	r0, [r4, #8]
	spi_module->TRANSMIT_STATUS.reg;

	/* Start transfer */
	while(transfer_len < length) {
		/* Write data to MOSI */
		while(!_spi_is_ready_to_write(spi_module));
1000b314:	07c0      	lsls	r0, r0, #31
1000b316:	d5fc      	bpl.n	1000b312 <spi_transceive_buffer_wait+0x52>
		spi_module->TRANSMIT_DATA.reg = *tx_data;
1000b318:	7808      	ldrb	r0, [r1, #0]
1000b31a:	7020      	strb	r0, [r4, #0]
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->RECEIVE_STATUS.bit.RX_FIFO_NOT_EMPTY);
1000b31c:	7b20      	ldrb	r0, [r4, #12]
	while(transfer_len < length) {
		/* Write data to MOSI */
		while(!_spi_is_ready_to_write(spi_module));
		spi_module->TRANSMIT_DATA.reg = *tx_data;
		/* Read data shifted from MISO */
		while(!_spi_is_ready_to_read(spi_module));
1000b31e:	07c0      	lsls	r0, r0, #31
1000b320:	d5fc      	bpl.n	1000b31c <spi_transceive_buffer_wait+0x5c>
		*rx_data = spi_module->RECEIVE_DATA.reg;
1000b322:	7920      	ldrb	r0, [r4, #4]
1000b324:	7010      	strb	r0, [r2, #0]
		transfer_len++;
1000b326:	3501      	adds	r5, #1
1000b328:	b2ad      	uxth	r5, r5
		if (!skip_mosi) {
			tx_data++;
1000b32a:	19c9      	adds	r1, r1, r7
		}
		if (!skip_miso) {
			rx_data++;
1000b32c:	1992      	adds	r2, r2, r6
	/* Clear all status registers */
	spi_module->RECEIVE_STATUS.reg;
	spi_module->TRANSMIT_STATUS.reg;

	/* Start transfer */
	while(transfer_len < length) {
1000b32e:	42ab      	cmp	r3, r5
1000b330:	d1ef      	bne.n	1000b312 <spi_transceive_buffer_wait+0x52>
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->TRANSMIT_STATUS.bit.TX_FIFO_EMPTY);
1000b332:	7a23      	ldrb	r3, [r4, #8]
		}
	}
	/* check TXFIFO is empty */
	do {
		status = _spi_is_write_complete(spi_module);
	}while(!status);
1000b334:	06db      	lsls	r3, r3, #27
1000b336:	d5fc      	bpl.n	1000b332 <spi_transceive_buffer_wait+0x72>

	return STATUS_OK;
1000b338:	2000      	movs	r0, #0
1000b33a:	e000      	b.n	1000b33e <spi_transceive_buffer_wait+0x7e>
	uint8_t skip_miso = 0;
	uint8_t status;
	uint16_t transfer_len = 0;

	if(spi_module == 0) {
		return STATUS_ERR_NOT_INITIALIZED;
1000b33c:	201f      	movs	r0, #31
		status = _spi_is_write_complete(spi_module);
	}while(!status);

	return STATUS_OK;

}
1000b33e:	b003      	add	sp, #12
1000b340:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b342:	46c0      	nop			; (mov r8, r8)

1000b344 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		bool select)
{
1000b344:	b510      	push	{r4, lr}
	uint8_t gpio_num = slave->ss_pin;
1000b346:	7808      	ldrb	r0, [r1, #0]
	if(select) {
1000b348:	2a00      	cmp	r2, #0
1000b34a:	d003      	beq.n	1000b354 <spi_select_slave+0x10>
		/* ASSERT Slave select pin */
		gpio_pin_set_output_level(gpio_num, false);
1000b34c:	2100      	movs	r1, #0
1000b34e:	4b04      	ldr	r3, [pc, #16]	; (1000b360 <spi_select_slave+0x1c>)
1000b350:	4798      	blx	r3
1000b352:	e002      	b.n	1000b35a <spi_select_slave+0x16>
	} else {
		/* DEASSERT Slave select pin */
		gpio_pin_set_output_level(gpio_num, true);
1000b354:	2101      	movs	r1, #1
1000b356:	4b02      	ldr	r3, [pc, #8]	; (1000b360 <spi_select_slave+0x1c>)
1000b358:	4798      	blx	r3
	}

	return STATUS_OK;
}
1000b35a:	2000      	movs	r0, #0
1000b35c:	bd10      	pop	{r4, pc}
1000b35e:	46c0      	nop			; (mov r8, r8)
1000b360:	1000b925 	.word	0x1000b925

1000b364 <dualtimer_isr_handler>:
 *
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
1000b364:	b510      	push	{r4, lr}
 * \retval The interrupt status of timer1/timer2
 */
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
1000b366:	4b0d      	ldr	r3, [pc, #52]	; (1000b39c <dualtimer_isr_handler+0x38>)
1000b368:	7d1b      	ldrb	r3, [r3, #20]
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
1000b36a:	2b00      	cmp	r3, #0
1000b36c:	d007      	beq.n	1000b37e <dualtimer_isr_handler+0x1a>
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
1000b36e:	2201      	movs	r2, #1
1000b370:	4b0a      	ldr	r3, [pc, #40]	; (1000b39c <dualtimer_isr_handler+0x38>)
1000b372:	731a      	strb	r2, [r3, #12]
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
1000b374:	4b0a      	ldr	r3, [pc, #40]	; (1000b3a0 <dualtimer_isr_handler+0x3c>)
1000b376:	681b      	ldr	r3, [r3, #0]
1000b378:	2b00      	cmp	r3, #0
1000b37a:	d000      	beq.n	1000b37e <dualtimer_isr_handler+0x1a>
			dualtimer_callback_timer1();
1000b37c:	4798      	blx	r3
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
	} else {
		return DUALTIMER0->TIMER2MIS.reg;
1000b37e:	2334      	movs	r3, #52	; 0x34
1000b380:	4a06      	ldr	r2, [pc, #24]	; (1000b39c <dualtimer_isr_handler+0x38>)
1000b382:	5cd3      	ldrb	r3, [r2, r3]
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
1000b384:	2b00      	cmp	r3, #0
1000b386:	d007      	beq.n	1000b398 <dualtimer_isr_handler+0x34>
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
	} else {
		DUALTIMER0->TIMER2INTCLR.reg = 1;
1000b388:	2101      	movs	r1, #1
1000b38a:	232c      	movs	r3, #44	; 0x2c
1000b38c:	54d1      	strb	r1, [r2, r3]
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER2);
		if (dualtimer_callback_timer2)
1000b38e:	4b05      	ldr	r3, [pc, #20]	; (1000b3a4 <dualtimer_isr_handler+0x40>)
1000b390:	681b      	ldr	r3, [r3, #0]
1000b392:	2b00      	cmp	r3, #0
1000b394:	d000      	beq.n	1000b398 <dualtimer_isr_handler+0x34>
			dualtimer_callback_timer2();
1000b396:	4798      	blx	r3
	}
}
1000b398:	bd10      	pop	{r4, pc}
1000b39a:	46c0      	nop			; (mov r8, r8)
1000b39c:	40001000 	.word	0x40001000
1000b3a0:	1001897c 	.word	0x1001897c
1000b3a4:	10018980 	.word	0x10018980

1000b3a8 <dualtimer_get_config_defaults>:
 *
 * \param[out]  config  Pointer to a DUALTIMER module configuration structure to set
 */
void dualtimer_get_config_defaults(struct dualtimer_config *config)
{
	config->timer1.timer_enable = true;
1000b3a8:	2301      	movs	r3, #1
1000b3aa:	7003      	strb	r3, [r0, #0]
	config->timer2.timer_enable = true;
1000b3ac:	7303      	strb	r3, [r0, #12]

	config->timer1.counter_mode = DUALTIMER_PERIODIC_MODE;
1000b3ae:	2202      	movs	r2, #2
1000b3b0:	7042      	strb	r2, [r0, #1]
	config->timer2.counter_mode = DUALTIMER_PERIODIC_MODE;
1000b3b2:	7342      	strb	r2, [r0, #13]

	config->timer1.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
1000b3b4:	7083      	strb	r3, [r0, #2]
	config->timer2.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
1000b3b6:	7383      	strb	r3, [r0, #14]

	config->timer1.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
1000b3b8:	2200      	movs	r2, #0
1000b3ba:	70c2      	strb	r2, [r0, #3]
	config->timer2.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
1000b3bc:	73c2      	strb	r2, [r0, #15]

	config->timer1.interrup_enable = true;
1000b3be:	7103      	strb	r3, [r0, #4]
	config->timer2.interrup_enable = true;
1000b3c0:	7403      	strb	r3, [r0, #16]

	config->timer1.load_value = 0;
1000b3c2:	6082      	str	r2, [r0, #8]
	config->timer2.load_value = 0;
1000b3c4:	6142      	str	r2, [r0, #20]

	config->clock_source = DUALTIMER_CLK_INPUT_0;
1000b3c6:	7602      	strb	r2, [r0, #24]
}
1000b3c8:	4770      	bx	lr
1000b3ca:	46c0      	nop			; (mov r8, r8)

1000b3cc <dualtimer_get_value>:
 *
 * \retval Timer1/Timer2 current value
 */
uint32_t dualtimer_get_value(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
1000b3cc:	2800      	cmp	r0, #0
1000b3ce:	d102      	bne.n	1000b3d6 <dualtimer_get_value+0xa>
		return DUALTIMER0->TIMER1VALUE.reg;
1000b3d0:	4b02      	ldr	r3, [pc, #8]	; (1000b3dc <dualtimer_get_value+0x10>)
1000b3d2:	6858      	ldr	r0, [r3, #4]
1000b3d4:	e001      	b.n	1000b3da <dualtimer_get_value+0xe>
	} else {
		return DUALTIMER0->TIMER2VALUE.reg;
1000b3d6:	4b01      	ldr	r3, [pc, #4]	; (1000b3dc <dualtimer_get_value+0x10>)
1000b3d8:	6a58      	ldr	r0, [r3, #36]	; 0x24
	}
}
1000b3da:	4770      	bx	lr
1000b3dc:	40001000 	.word	0x40001000

1000b3e0 <dualtimer_set_counter>:
 * \param[in]     value        Load value
 */
void dualtimer_set_counter(enum dualtimer_timer timer,
		enum dualtimer_set_register cur_bg, uint32_t value)
{
	if (timer == DUALTIMER_TIMER1) {
1000b3e0:	2800      	cmp	r0, #0
1000b3e2:	d107      	bne.n	1000b3f4 <dualtimer_set_counter+0x14>
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
1000b3e4:	2900      	cmp	r1, #0
1000b3e6:	d102      	bne.n	1000b3ee <dualtimer_set_counter+0xe>
			DUALTIMER0->TIMER1LOAD.reg = value;
1000b3e8:	4b06      	ldr	r3, [pc, #24]	; (1000b404 <dualtimer_set_counter+0x24>)
1000b3ea:	601a      	str	r2, [r3, #0]
1000b3ec:	e009      	b.n	1000b402 <dualtimer_set_counter+0x22>
		} else {
			DUALTIMER0->TIMER1BGLOAD.reg = value;
1000b3ee:	4b05      	ldr	r3, [pc, #20]	; (1000b404 <dualtimer_set_counter+0x24>)
1000b3f0:	619a      	str	r2, [r3, #24]
1000b3f2:	e006      	b.n	1000b402 <dualtimer_set_counter+0x22>
		}
	} else {
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
1000b3f4:	2900      	cmp	r1, #0
1000b3f6:	d102      	bne.n	1000b3fe <dualtimer_set_counter+0x1e>
			DUALTIMER0->TIMER2LOAD.reg = value;
1000b3f8:	4b02      	ldr	r3, [pc, #8]	; (1000b404 <dualtimer_set_counter+0x24>)
1000b3fa:	621a      	str	r2, [r3, #32]
1000b3fc:	e001      	b.n	1000b402 <dualtimer_set_counter+0x22>
			} else {
			DUALTIMER0->TIMER2BGLOAD.reg = value;
1000b3fe:	4b01      	ldr	r3, [pc, #4]	; (1000b404 <dualtimer_set_counter+0x24>)
1000b400:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
}
1000b402:	4770      	bx	lr
1000b404:	40001000 	.word	0x40001000

1000b408 <dualtimer_enable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_enable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
1000b408:	2800      	cmp	r0, #0
1000b40a:	d105      	bne.n	1000b418 <dualtimer_enable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg |= DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
1000b40c:	4a06      	ldr	r2, [pc, #24]	; (1000b428 <dualtimer_enable+0x20>)
1000b40e:	7a11      	ldrb	r1, [r2, #8]
1000b410:	2380      	movs	r3, #128	; 0x80
1000b412:	430b      	orrs	r3, r1
1000b414:	7213      	strb	r3, [r2, #8]
1000b416:	e005      	b.n	1000b424 <dualtimer_enable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg |= DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
1000b418:	4903      	ldr	r1, [pc, #12]	; (1000b428 <dualtimer_enable+0x20>)
1000b41a:	2228      	movs	r2, #40	; 0x28
1000b41c:	5c88      	ldrb	r0, [r1, r2]
1000b41e:	2380      	movs	r3, #128	; 0x80
1000b420:	4303      	orrs	r3, r0
1000b422:	548b      	strb	r3, [r1, r2]
	}
}
1000b424:	4770      	bx	lr
1000b426:	46c0      	nop			; (mov r8, r8)
1000b428:	40001000 	.word	0x40001000

1000b42c <dualtimer_disable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_disable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
1000b42c:	2800      	cmp	r0, #0
1000b42e:	d105      	bne.n	1000b43c <dualtimer_disable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg &= ~DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
1000b430:	4a06      	ldr	r2, [pc, #24]	; (1000b44c <dualtimer_disable+0x20>)
1000b432:	7a11      	ldrb	r1, [r2, #8]
1000b434:	237f      	movs	r3, #127	; 0x7f
1000b436:	400b      	ands	r3, r1
1000b438:	7213      	strb	r3, [r2, #8]
1000b43a:	e005      	b.n	1000b448 <dualtimer_disable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg &= ~DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
1000b43c:	4903      	ldr	r1, [pc, #12]	; (1000b44c <dualtimer_disable+0x20>)
1000b43e:	2228      	movs	r2, #40	; 0x28
1000b440:	5c88      	ldrb	r0, [r1, r2]
1000b442:	237f      	movs	r3, #127	; 0x7f
1000b444:	4003      	ands	r3, r0
1000b446:	548b      	strb	r3, [r1, r2]
	}
}
1000b448:	4770      	bx	lr
1000b44a:	46c0      	nop			; (mov r8, r8)
1000b44c:	40001000 	.word	0x40001000

1000b450 <dualtimer_init>:
 * \param[in]     config       Pointer to the Dualtimer configuration options struct
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
1000b450:	b570      	push	{r4, r5, r6, lr}
1000b452:	0004      	movs	r4, r0
	uint8_t regval = 0;

	/* Global reset */
	system_peripheral_reset(PERIPHERAL_DUALT_TIMER);
1000b454:	2004      	movs	r0, #4
1000b456:	4b39      	ldr	r3, [pc, #228]	; (1000b53c <dualtimer_init+0xec>)
1000b458:	4798      	blx	r3

	/* Common config */
	if (config->timer1.timer_enable || config->timer2.timer_enable) {
1000b45a:	7823      	ldrb	r3, [r4, #0]
1000b45c:	2b00      	cmp	r3, #0
1000b45e:	d102      	bne.n	1000b466 <dualtimer_init+0x16>
1000b460:	7b23      	ldrb	r3, [r4, #12]
1000b462:	2b00      	cmp	r3, #0
1000b464:	d065      	beq.n	1000b532 <dualtimer_init+0xe2>
		LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |=
1000b466:	4936      	ldr	r1, [pc, #216]	; (1000b540 <dualtimer_init+0xf0>)
1000b468:	68ca      	ldr	r2, [r1, #12]
1000b46a:	2320      	movs	r3, #32
1000b46c:	4313      	orrs	r3, r2
1000b46e:	60cb      	str	r3, [r1, #12]
		LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
1000b470:	7e22      	ldrb	r2, [r4, #24]
1000b472:	698b      	ldr	r3, [r1, #24]
1000b474:	2003      	movs	r0, #3
1000b476:	4002      	ands	r2, r0
1000b478:	0112      	lsls	r2, r2, #4
1000b47a:	302d      	adds	r0, #45	; 0x2d
1000b47c:	4383      	bics	r3, r0
1000b47e:	4313      	orrs	r3, r2
1000b480:	618b      	str	r3, [r1, #24]
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
1000b482:	7823      	ldrb	r3, [r4, #0]
1000b484:	2b00      	cmp	r3, #0
1000b486:	d026      	beq.n	1000b4d6 <dualtimer_init+0x86>
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000b488:	7863      	ldrb	r3, [r4, #1]
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
1000b48a:	2101      	movs	r1, #1
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000b48c:	2b00      	cmp	r3, #0
1000b48e:	d003      	beq.n	1000b498 <dualtimer_init+0x48>
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer1.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_0;
		} else if (config->timer1.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_1;
1000b490:	3b02      	subs	r3, #2
1000b492:	425d      	negs	r5, r3
1000b494:	415d      	adcs	r5, r3
1000b496:	01a9      	lsls	r1, r5, #6
		}
		regval |= (DUALTIMER_TIMER1CONTROL_TIMER_SIZE &
1000b498:	78a2      	ldrb	r2, [r4, #2]
1000b49a:	0052      	lsls	r2, r2, #1
1000b49c:	2502      	movs	r5, #2
1000b49e:	402a      	ands	r2, r5
1000b4a0:	78e3      	ldrb	r3, [r4, #3]
1000b4a2:	009b      	lsls	r3, r3, #2
1000b4a4:	350a      	adds	r5, #10
1000b4a6:	402b      	ands	r3, r5
1000b4a8:	431a      	orrs	r2, r3
1000b4aa:	0015      	movs	r5, r2
1000b4ac:	430d      	orrs	r5, r1
				((config->timer1.counter_size) << DUALTIMER_TIMER1CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER1CONTROL_TIMERPRE(config->timer1.clock_prescaler);
		if (config->timer1.interrup_enable) {
1000b4ae:	7923      	ldrb	r3, [r4, #4]
1000b4b0:	2b00      	cmp	r3, #0
1000b4b2:	d001      	beq.n	1000b4b8 <dualtimer_init+0x68>
			regval |= DUALTIMER_TIMER1CONTROL_INTERRUPT_ENABLE;
1000b4b4:	2320      	movs	r3, #32
1000b4b6:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER1LOAD.reg = config->timer1.load_value;
1000b4b8:	4b22      	ldr	r3, [pc, #136]	; (1000b544 <dualtimer_init+0xf4>)
1000b4ba:	68a2      	ldr	r2, [r4, #8]
1000b4bc:	601a      	str	r2, [r3, #0]
		DUALTIMER0->TIMER1CONTROL.reg = regval;
1000b4be:	721d      	strb	r5, [r3, #8]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
1000b4c0:	491f      	ldr	r1, [pc, #124]	; (1000b540 <dualtimer_init+0xf0>)
1000b4c2:	22c4      	movs	r2, #196	; 0xc4
1000b4c4:	0052      	lsls	r2, r2, #1
1000b4c6:	5c88      	ldrb	r0, [r1, r2]
1000b4c8:	2301      	movs	r3, #1
1000b4ca:	4303      	orrs	r3, r0
1000b4cc:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER1);
1000b4ce:	2000      	movs	r0, #0
1000b4d0:	4b1d      	ldr	r3, [pc, #116]	; (1000b548 <dualtimer_init+0xf8>)
1000b4d2:	4798      	blx	r3
1000b4d4:	e000      	b.n	1000b4d8 <dualtimer_init+0x88>
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
	uint8_t regval = 0;
1000b4d6:	2500      	movs	r5, #0
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
		dualtimer_enable(DUALTIMER_TIMER1);
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
1000b4d8:	7b23      	ldrb	r3, [r4, #12]
1000b4da:	2b00      	cmp	r3, #0
1000b4dc:	d029      	beq.n	1000b532 <dualtimer_init+0xe2>
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000b4de:	7b63      	ldrb	r3, [r4, #13]
1000b4e0:	2b00      	cmp	r3, #0
1000b4e2:	d005      	beq.n	1000b4f0 <dualtimer_init+0xa0>
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
1000b4e4:	2b01      	cmp	r3, #1
1000b4e6:	d005      	beq.n	1000b4f4 <dualtimer_init+0xa4>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
1000b4e8:	2b02      	cmp	r3, #2
1000b4ea:	d104      	bne.n	1000b4f6 <dualtimer_init+0xa6>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
1000b4ec:	2540      	movs	r5, #64	; 0x40
1000b4ee:	e002      	b.n	1000b4f6 <dualtimer_init+0xa6>
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
1000b4f0:	2501      	movs	r5, #1
1000b4f2:	e000      	b.n	1000b4f6 <dualtimer_init+0xa6>
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
1000b4f4:	2500      	movs	r5, #0
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
		}
		regval |= (DUALTIMER_TIMER2CONTROL_TIMER_SIZE &
1000b4f6:	7ba3      	ldrb	r3, [r4, #14]
1000b4f8:	005b      	lsls	r3, r3, #1
1000b4fa:	2102      	movs	r1, #2
1000b4fc:	4019      	ands	r1, r3
1000b4fe:	7be2      	ldrb	r2, [r4, #15]
1000b500:	0092      	lsls	r2, r2, #2
1000b502:	230c      	movs	r3, #12
1000b504:	4013      	ands	r3, r2
1000b506:	430b      	orrs	r3, r1
1000b508:	431d      	orrs	r5, r3
				((config->timer2.counter_size) << DUALTIMER_TIMER2CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER2CONTROL_TIMERPRE(config->timer2.clock_prescaler);
		if (config->timer2.interrup_enable) {
1000b50a:	7c23      	ldrb	r3, [r4, #16]
1000b50c:	2b00      	cmp	r3, #0
1000b50e:	d001      	beq.n	1000b514 <dualtimer_init+0xc4>
			regval |= DUALTIMER_TIMER2CONTROL_INTERRUPT_ENABLE;
1000b510:	2320      	movs	r3, #32
1000b512:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER2LOAD.reg = config->timer2.load_value;
1000b514:	6962      	ldr	r2, [r4, #20]
1000b516:	4b0b      	ldr	r3, [pc, #44]	; (1000b544 <dualtimer_init+0xf4>)
1000b518:	621a      	str	r2, [r3, #32]
		DUALTIMER0->TIMER2CONTROL.reg = regval;
1000b51a:	2228      	movs	r2, #40	; 0x28
1000b51c:	549d      	strb	r5, [r3, r2]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_2_ENABLE;
1000b51e:	4908      	ldr	r1, [pc, #32]	; (1000b540 <dualtimer_init+0xf0>)
1000b520:	3261      	adds	r2, #97	; 0x61
1000b522:	32ff      	adds	r2, #255	; 0xff
1000b524:	5c88      	ldrb	r0, [r1, r2]
1000b526:	2302      	movs	r3, #2
1000b528:	4303      	orrs	r3, r0
1000b52a:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER2);
1000b52c:	2001      	movs	r0, #1
1000b52e:	4b06      	ldr	r3, [pc, #24]	; (1000b548 <dualtimer_init+0xf8>)
1000b530:	4798      	blx	r3
	}

	system_register_isr(RAM_ISR_TABLE_DUALTIMER_INDEX, (uint32_t)dualtimer_isr_handler);
1000b532:	4906      	ldr	r1, [pc, #24]	; (1000b54c <dualtimer_init+0xfc>)
1000b534:	201e      	movs	r0, #30
1000b536:	4b06      	ldr	r3, [pc, #24]	; (1000b550 <dualtimer_init+0x100>)
1000b538:	4798      	blx	r3
}
1000b53a:	bd70      	pop	{r4, r5, r6, pc}
1000b53c:	1000c429 	.word	0x1000c429
1000b540:	4000b000 	.word	0x4000b000
1000b544:	40001000 	.word	0x40001000
1000b548:	1000b409 	.word	0x1000b409
1000b54c:	1000b365 	.word	0x1000b365
1000b550:	1000c891 	.word	0x1000c891

1000b554 <dualtimer_register_callback>:
 *
 * \param[in]     callback_func Pointer to callback function
 */
void dualtimer_register_callback(enum dualtimer_timer timer, dualtimer_callback_t fun)
{
	if (timer == DUALTIMER_TIMER1) {
1000b554:	2800      	cmp	r0, #0
1000b556:	d102      	bne.n	1000b55e <dualtimer_register_callback+0xa>
		dualtimer_callback_timer1 = fun;
1000b558:	4b02      	ldr	r3, [pc, #8]	; (1000b564 <dualtimer_register_callback+0x10>)
1000b55a:	6019      	str	r1, [r3, #0]
1000b55c:	e001      	b.n	1000b562 <dualtimer_register_callback+0xe>
	} else {
		dualtimer_callback_timer2 = fun;
1000b55e:	4b02      	ldr	r3, [pc, #8]	; (1000b568 <dualtimer_register_callback+0x14>)
1000b560:	6019      	str	r1, [r3, #0]
	}
}
1000b562:	4770      	bx	lr
1000b564:	1001897c 	.word	0x1001897c
1000b568:	10018980 	.word	0x10018980

1000b56c <gpio_port0_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port0_isr_handler(void)
{
1000b56c:	b570      	push	{r4, r5, r6, lr}
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;
1000b56e:	4b16      	ldr	r3, [pc, #88]	; (1000b5c8 <gpio_port0_isr_handler+0x5c>)
1000b570:	681d      	ldr	r5, [r3, #0]
1000b572:	8f29      	ldrh	r1, [r5, #56]	; 0x38
1000b574:	b289      	uxth	r1, r1

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
1000b576:	07cb      	lsls	r3, r1, #31
1000b578:	d407      	bmi.n	1000b58a <gpio_port0_isr_handler+0x1e>
1000b57a:	2301      	movs	r3, #1
1000b57c:	2401      	movs	r4, #1
1000b57e:	0018      	movs	r0, r3
1000b580:	0022      	movs	r2, r4
1000b582:	409a      	lsls	r2, r3
1000b584:	4211      	tst	r1, r2
1000b586:	d014      	beq.n	1000b5b2 <gpio_port0_isr_handler+0x46>
1000b588:	e001      	b.n	1000b58e <gpio_port0_isr_handler+0x22>
1000b58a:	2201      	movs	r2, #1
1000b58c:	2000      	movs	r0, #0
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
1000b58e:	b292      	uxth	r2, r2
1000b590:	872a      	strh	r2, [r5, #56]	; 0x38
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
1000b592:	2346      	movs	r3, #70	; 0x46
1000b594:	4a0c      	ldr	r2, [pc, #48]	; (1000b5c8 <gpio_port0_isr_handler+0x5c>)
1000b596:	5ad3      	ldrh	r3, [r2, r3]
1000b598:	4103      	asrs	r3, r0
1000b59a:	07db      	lsls	r3, r3, #31
1000b59c:	d50c      	bpl.n	1000b5b8 <gpio_port0_isr_handler+0x4c>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
1000b59e:	2344      	movs	r3, #68	; 0x44

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
1000b5a0:	5ad3      	ldrh	r3, [r2, r3]
1000b5a2:	4103      	asrs	r3, r0
1000b5a4:	07db      	lsls	r3, r3, #31
1000b5a6:	d507      	bpl.n	1000b5b8 <gpio_port0_isr_handler+0x4c>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
                _gpio_instances[0].callback[i]();
1000b5a8:	0080      	lsls	r0, r0, #2
1000b5aa:	1810      	adds	r0, r2, r0
1000b5ac:	6843      	ldr	r3, [r0, #4]
1000b5ae:	4798      	blx	r3
1000b5b0:	e002      	b.n	1000b5b8 <gpio_port0_isr_handler+0x4c>
1000b5b2:	3301      	adds	r3, #1
 */
static void gpio_port0_isr_handler(void)
{
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
1000b5b4:	2b10      	cmp	r3, #16
1000b5b6:	d1e2      	bne.n	1000b57e <gpio_port0_isr_handler+0x12>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000b5b8:	2180      	movs	r1, #128	; 0x80
1000b5ba:	0409      	lsls	r1, r1, #16
1000b5bc:	23c0      	movs	r3, #192	; 0xc0
1000b5be:	005b      	lsls	r3, r3, #1
1000b5c0:	4a02      	ldr	r2, [pc, #8]	; (1000b5cc <gpio_port0_isr_handler+0x60>)
1000b5c2:	50d1      	str	r1, [r2, r3]
                _gpio_instances[0].callback[i]();
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO0_IRQn);
}
1000b5c4:	bd70      	pop	{r4, r5, r6, pc}
1000b5c6:	46c0      	nop			; (mov r8, r8)
1000b5c8:	1001a650 	.word	0x1001a650
1000b5cc:	e000e100 	.word	0xe000e100

1000b5d0 <gpio_port1_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port1_isr_handler(void)
{
1000b5d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;
1000b5d2:	4b18      	ldr	r3, [pc, #96]	; (1000b634 <gpio_port1_isr_handler+0x64>)
1000b5d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
1000b5d6:	8f1e      	ldrh	r6, [r3, #56]	; 0x38
1000b5d8:	b2b6      	uxth	r6, r6
1000b5da:	0037      	movs	r7, r6
1000b5dc:	2400      	movs	r4, #0

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
1000b5de:	0b76      	lsrs	r6, r6, #13
1000b5e0:	0376      	lsls	r6, r6, #13
			aon_handle_ext_wakeup_isr();
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
1000b5e2:	4d14      	ldr	r5, [pc, #80]	; (1000b634 <gpio_port1_isr_handler+0x64>)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
1000b5e4:	2e00      	cmp	r6, #0
1000b5e6:	d001      	beq.n	1000b5ec <gpio_port1_isr_handler+0x1c>
			aon_handle_ext_wakeup_isr();
1000b5e8:	4b13      	ldr	r3, [pc, #76]	; (1000b638 <gpio_port1_isr_handler+0x68>)
1000b5ea:	4798      	blx	r3
		}

		if (flag & (1 << i)) {
1000b5ec:	0022      	movs	r2, r4
1000b5ee:	2301      	movs	r3, #1
1000b5f0:	40a3      	lsls	r3, r4
1000b5f2:	421f      	tst	r7, r3
1000b5f4:	d013      	beq.n	1000b61e <gpio_port1_isr_handler+0x4e>
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
1000b5f6:	b29b      	uxth	r3, r3
1000b5f8:	6ca9      	ldr	r1, [r5, #72]	; 0x48
1000b5fa:	870b      	strh	r3, [r1, #56]	; 0x38
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
1000b5fc:	238e      	movs	r3, #142	; 0x8e
1000b5fe:	5aeb      	ldrh	r3, [r5, r3]
1000b600:	4123      	asrs	r3, r4
1000b602:	07db      	lsls	r3, r3, #31
1000b604:	d50b      	bpl.n	1000b61e <gpio_port1_isr_handler+0x4e>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
1000b606:	238c      	movs	r3, #140	; 0x8c
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
1000b608:	490a      	ldr	r1, [pc, #40]	; (1000b634 <gpio_port1_isr_handler+0x64>)
1000b60a:	5acb      	ldrh	r3, [r1, r3]
1000b60c:	4123      	asrs	r3, r4
1000b60e:	07db      	lsls	r3, r3, #31
1000b610:	d505      	bpl.n	1000b61e <gpio_port1_isr_handler+0x4e>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
				_gpio_instances[1].callback[i]();
1000b612:	3212      	adds	r2, #18
1000b614:	0092      	lsls	r2, r2, #2
1000b616:	188a      	adds	r2, r1, r2
1000b618:	6853      	ldr	r3, [r2, #4]
1000b61a:	4798      	blx	r3
				break;
1000b61c:	e002      	b.n	1000b624 <gpio_port1_isr_handler+0x54>
1000b61e:	3401      	adds	r4, #1
 */
static void gpio_port1_isr_handler(void)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
1000b620:	2c10      	cmp	r4, #16
1000b622:	d1df      	bne.n	1000b5e4 <gpio_port1_isr_handler+0x14>
1000b624:	2180      	movs	r1, #128	; 0x80
1000b626:	0449      	lsls	r1, r1, #17
1000b628:	23c0      	movs	r3, #192	; 0xc0
1000b62a:	005b      	lsls	r3, r3, #1
1000b62c:	4a03      	ldr	r2, [pc, #12]	; (1000b63c <gpio_port1_isr_handler+0x6c>)
1000b62e:	50d1      	str	r1, [r2, r3]
				break;
			}
		}
	}
	NVIC_ClearPendingIRQ(GPIO1_IRQn);
}
1000b630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000b632:	46c0      	nop			; (mov r8, r8)
1000b634:	1001a650 	.word	0x1001a650
1000b638:	0001bc51 	.word	0x0001bc51
1000b63c:	e000e100 	.word	0xe000e100

1000b640 <gpio_port2_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port2_isr_handler(void)
{
1000b640:	b510      	push	{r4, lr}
	uint32_t flag = _gpio_instances[2].hw->INTSTATUSCLEAR.reg;
1000b642:	2390      	movs	r3, #144	; 0x90
1000b644:	4a1b      	ldr	r2, [pc, #108]	; (1000b6b4 <gpio_port2_isr_handler+0x74>)
1000b646:	58d2      	ldr	r2, [r2, r3]
1000b648:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000b64a:	b29b      	uxth	r3, r3

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
1000b64c:	04d9      	lsls	r1, r3, #19
1000b64e:	d414      	bmi.n	1000b67a <gpio_port2_isr_handler+0x3a>
1000b650:	0499      	lsls	r1, r3, #18
1000b652:	d40a      	bmi.n	1000b66a <gpio_port2_isr_handler+0x2a>
1000b654:	0459      	lsls	r1, r3, #17
1000b656:	d40c      	bmi.n	1000b672 <gpio_port2_isr_handler+0x32>
1000b658:	0bdb      	lsrs	r3, r3, #15
1000b65a:	03db      	lsls	r3, r3, #15
1000b65c:	b29b      	uxth	r3, r3
1000b65e:	2b00      	cmp	r3, #0
1000b660:	d020      	beq.n	1000b6a4 <gpio_port2_isr_handler+0x64>
1000b662:	2380      	movs	r3, #128	; 0x80
1000b664:	021b      	lsls	r3, r3, #8
1000b666:	210f      	movs	r1, #15
1000b668:	e00a      	b.n	1000b680 <gpio_port2_isr_handler+0x40>
1000b66a:	2380      	movs	r3, #128	; 0x80
1000b66c:	019b      	lsls	r3, r3, #6
1000b66e:	210d      	movs	r1, #13
1000b670:	e006      	b.n	1000b680 <gpio_port2_isr_handler+0x40>
1000b672:	2380      	movs	r3, #128	; 0x80
1000b674:	01db      	lsls	r3, r3, #7
1000b676:	210e      	movs	r1, #14
1000b678:	e002      	b.n	1000b680 <gpio_port2_isr_handler+0x40>
1000b67a:	2380      	movs	r3, #128	; 0x80
1000b67c:	015b      	lsls	r3, r3, #5
1000b67e:	210c      	movs	r1, #12
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
1000b680:	b29b      	uxth	r3, r3
1000b682:	8713      	strh	r3, [r2, #56]	; 0x38
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
1000b684:	23d6      	movs	r3, #214	; 0xd6
1000b686:	4a0b      	ldr	r2, [pc, #44]	; (1000b6b4 <gpio_port2_isr_handler+0x74>)
1000b688:	5ad3      	ldrh	r3, [r2, r3]
1000b68a:	410b      	asrs	r3, r1
1000b68c:	07db      	lsls	r3, r3, #31
1000b68e:	d509      	bpl.n	1000b6a4 <gpio_port2_isr_handler+0x64>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
1000b690:	23d4      	movs	r3, #212	; 0xd4

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
1000b692:	5ad3      	ldrh	r3, [r2, r3]
1000b694:	410b      	asrs	r3, r1
1000b696:	07db      	lsls	r3, r3, #31
1000b698:	d504      	bpl.n	1000b6a4 <gpio_port2_isr_handler+0x64>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
                _gpio_instances[2].callback[i]();
1000b69a:	3124      	adds	r1, #36	; 0x24
1000b69c:	0089      	lsls	r1, r1, #2
1000b69e:	1851      	adds	r1, r2, r1
1000b6a0:	684b      	ldr	r3, [r1, #4]
1000b6a2:	4798      	blx	r3
1000b6a4:	2180      	movs	r1, #128	; 0x80
1000b6a6:	0489      	lsls	r1, r1, #18
1000b6a8:	23c0      	movs	r3, #192	; 0xc0
1000b6aa:	005b      	lsls	r3, r3, #1
1000b6ac:	4a02      	ldr	r2, [pc, #8]	; (1000b6b8 <gpio_port2_isr_handler+0x78>)
1000b6ae:	50d1      	str	r1, [r2, r3]
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO2_IRQn);
}
1000b6b0:	bd10      	pop	{r4, pc}
1000b6b2:	46c0      	nop			; (mov r8, r8)
1000b6b4:	1001a650 	.word	0x1001a650
1000b6b8:	e000e100 	.word	0xe000e100

1000b6bc <gpio_get_config_defaults>:
 *  \param[out] config  Configuration structure to initialize to default values.
 */
void gpio_get_config_defaults(struct gpio_config *const config)
{
	/* Default configuration values */
	config->direction  = GPIO_PIN_DIR_INPUT;
1000b6bc:	2300      	movs	r3, #0
1000b6be:	7003      	strb	r3, [r0, #0]
	config->input_pull = GPIO_PIN_PULL_UP;
1000b6c0:	2201      	movs	r2, #1
1000b6c2:	7042      	strb	r2, [r0, #1]
	config->powersave  = false;
1000b6c4:	7083      	strb	r3, [r0, #2]
	config->aon_wakeup = false;
1000b6c6:	70c3      	strb	r3, [r0, #3]
}
1000b6c8:	4770      	bx	lr
1000b6ca:	46c0      	nop			; (mov r8, r8)

1000b6cc <gpio_pin_set_config>:
 *  \retval STATUS_RESOURCE_NOT_AVAILABLE   Requested gpio is already in use.
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
1000b6cc:	b570      	push	{r4, r5, r6, lr}
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
1000b6ce:	2317      	movs	r3, #23
	enum status_code status = STATUS_OK;

	/* Following GPIO's should never be modified by user.
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
1000b6d0:	2801      	cmp	r0, #1
1000b6d2:	d800      	bhi.n	1000b6d6 <gpio_pin_set_config+0xa>
1000b6d4:	e0c8      	b.n	1000b868 <gpio_pin_set_config+0x19c>
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
	} else {
		if (gpio_pin <= 7) {
1000b6d6:	2807      	cmp	r0, #7
1000b6d8:	d809      	bhi.n	1000b6ee <gpio_pin_set_config+0x22>
			LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000b6da:	4d64      	ldr	r5, [pc, #400]	; (1000b86c <gpio_pin_set_config+0x1a0>)
1000b6dc:	6c6a      	ldr	r2, [r5, #68]	; 0x44
1000b6de:	3b10      	subs	r3, #16
1000b6e0:	4003      	ands	r3, r0
1000b6e2:	009b      	lsls	r3, r3, #2
1000b6e4:	2407      	movs	r4, #7
1000b6e6:	409c      	lsls	r4, r3
1000b6e8:	43a2      	bics	r2, r4
1000b6ea:	646a      	str	r2, [r5, #68]	; 0x44
1000b6ec:	e029      	b.n	1000b742 <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 15) {
1000b6ee:	280f      	cmp	r0, #15
1000b6f0:	d809      	bhi.n	1000b706 <gpio_pin_set_config+0x3a>
			LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000b6f2:	4d5e      	ldr	r5, [pc, #376]	; (1000b86c <gpio_pin_set_config+0x1a0>)
1000b6f4:	6caa      	ldr	r2, [r5, #72]	; 0x48
1000b6f6:	2307      	movs	r3, #7
1000b6f8:	4003      	ands	r3, r0
1000b6fa:	009b      	lsls	r3, r3, #2
1000b6fc:	2407      	movs	r4, #7
1000b6fe:	409c      	lsls	r4, r3
1000b700:	43a2      	bics	r2, r4
1000b702:	64aa      	str	r2, [r5, #72]	; 0x48
1000b704:	e01d      	b.n	1000b742 <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 23) {
1000b706:	2817      	cmp	r0, #23
1000b708:	d809      	bhi.n	1000b71e <gpio_pin_set_config+0x52>
			LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000b70a:	4d58      	ldr	r5, [pc, #352]	; (1000b86c <gpio_pin_set_config+0x1a0>)
1000b70c:	6cea      	ldr	r2, [r5, #76]	; 0x4c
1000b70e:	2307      	movs	r3, #7
1000b710:	4003      	ands	r3, r0
1000b712:	009b      	lsls	r3, r3, #2
1000b714:	2407      	movs	r4, #7
1000b716:	409c      	lsls	r4, r3
1000b718:	43a2      	bics	r2, r4
1000b71a:	64ea      	str	r2, [r5, #76]	; 0x4c
1000b71c:	e011      	b.n	1000b742 <gpio_pin_set_config+0x76>
		} else if (44 <= gpio_pin  && gpio_pin < 48) {
1000b71e:	0003      	movs	r3, r0
1000b720:	3b2c      	subs	r3, #44	; 0x2c
1000b722:	2b03      	cmp	r3, #3
1000b724:	d80d      	bhi.n	1000b742 <gpio_pin_set_config+0x76>
			/* Set GPIO_MSx as digital mode */
			AON_GP_REGS0->MS_GPIO_MODE.vec.ANALOG_ENABLE_ &= ~(1 << (gpio_pin - PIN_GPIO_MS4));
1000b726:	4d52      	ldr	r5, [pc, #328]	; (1000b870 <gpio_pin_set_config+0x1a4>)
1000b728:	2482      	movs	r4, #130	; 0x82
1000b72a:	00e4      	lsls	r4, r4, #3
1000b72c:	5d2a      	ldrb	r2, [r5, r4]
1000b72e:	0712      	lsls	r2, r2, #28
1000b730:	2601      	movs	r6, #1
1000b732:	409e      	lsls	r6, r3
1000b734:	0f12      	lsrs	r2, r2, #28
1000b736:	5d2b      	ldrb	r3, [r5, r4]
1000b738:	43b2      	bics	r2, r6
1000b73a:	260f      	movs	r6, #15
1000b73c:	43b3      	bics	r3, r6
1000b73e:	4313      	orrs	r3, r2
1000b740:	552b      	strb	r3, [r5, r4]
		}
	
		if ((gpio_pin == PIN_AO_GPIO_0) || (gpio_pin == PIN_AO_GPIO_1) ||
1000b742:	0003      	movs	r3, r0
1000b744:	3b1d      	subs	r3, #29
1000b746:	2b02      	cmp	r3, #2
1000b748:	d829      	bhi.n	1000b79e <gpio_pin_set_config+0xd2>
				(gpio_pin == PIN_AO_GPIO_2)) {
			/* Active Low, Always On Pull Enable Control */
			if (config->input_pull == GPIO_PIN_PULL_UP) {
1000b74a:	784b      	ldrb	r3, [r1, #1]
1000b74c:	2b01      	cmp	r3, #1
1000b74e:	d108      	bne.n	1000b762 <gpio_pin_set_config+0x96>
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
1000b750:	4d47      	ldr	r5, [pc, #284]	; (1000b870 <gpio_pin_set_config+0x1a4>)
1000b752:	7d2b      	ldrb	r3, [r5, #20]
1000b754:	241f      	movs	r4, #31
1000b756:	1a24      	subs	r4, r4, r0
1000b758:	2201      	movs	r2, #1
1000b75a:	40a2      	lsls	r2, r4
1000b75c:	4393      	bics	r3, r2
1000b75e:	752b      	strb	r3, [r5, #20]
1000b760:	e008      	b.n	1000b774 <gpio_pin_set_config+0xa8>
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
1000b762:	4c43      	ldr	r4, [pc, #268]	; (1000b870 <gpio_pin_set_config+0x1a4>)
1000b764:	7d25      	ldrb	r5, [r4, #20]
1000b766:	221f      	movs	r2, #31
1000b768:	1a12      	subs	r2, r2, r0
1000b76a:	2301      	movs	r3, #1
1000b76c:	4093      	lsls	r3, r2
1000b76e:	432b      	orrs	r3, r5
1000b770:	b2db      	uxtb	r3, r3
1000b772:	7523      	strb	r3, [r4, #20]
			}
			if (config->aon_wakeup) {
1000b774:	78ca      	ldrb	r2, [r1, #3]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000b776:	2300      	movs	r3, #0
			if (config->input_pull == GPIO_PIN_PULL_UP) {
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
			}
			if (config->aon_wakeup) {
1000b778:	2a00      	cmp	r2, #0
1000b77a:	d075      	beq.n	1000b868 <gpio_pin_set_config+0x19c>
				/* Enable AON_GPIO_x to be a wakeup MCU from sleep mode */
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
1000b77c:	493c      	ldr	r1, [pc, #240]	; (1000b870 <gpio_pin_set_config+0x1a4>)
1000b77e:	880c      	ldrh	r4, [r1, #0]
1000b780:	221f      	movs	r2, #31
1000b782:	1a10      	subs	r0, r2, r0
1000b784:	0080      	lsls	r0, r0, #2
1000b786:	3301      	adds	r3, #1
1000b788:	4083      	lsls	r3, r0
1000b78a:	4323      	orrs	r3, r4
1000b78c:	b29b      	uxth	r3, r3
1000b78e:	800b      	strh	r3, [r1, #0]
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
1000b790:	4a38      	ldr	r2, [pc, #224]	; (1000b874 <gpio_pin_set_config+0x1a8>)
1000b792:	7811      	ldrb	r1, [r2, #0]
1000b794:	2302      	movs	r3, #2
1000b796:	430b      	orrs	r3, r1
1000b798:	7013      	strb	r3, [r2, #0]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000b79a:	2300      	movs	r3, #0
1000b79c:	e064      	b.n	1000b868 <gpio_pin_set_config+0x19c>
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
1000b79e:	780a      	ldrb	r2, [r1, #0]
1000b7a0:	2a00      	cmp	r2, #0
1000b7a2:	d140      	bne.n	1000b826 <gpio_pin_set_config+0x15a>
				if(gpio_pin < 16) {
1000b7a4:	280f      	cmp	r0, #15
1000b7a6:	d808      	bhi.n	1000b7ba <gpio_pin_set_config+0xee>
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
1000b7a8:	2301      	movs	r3, #1
1000b7aa:	4083      	lsls	r3, r0
1000b7ac:	b29b      	uxth	r3, r3
1000b7ae:	4a32      	ldr	r2, [pc, #200]	; (1000b878 <gpio_pin_set_config+0x1ac>)
1000b7b0:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000b7b2:	2300      	movs	r3, #0
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
1000b7b4:	281f      	cmp	r0, #31
1000b7b6:	d857      	bhi.n	1000b868 <gpio_pin_set_config+0x19c>
1000b7b8:	e012      	b.n	1000b7e0 <gpio_pin_set_config+0x114>
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
				if(gpio_pin < 16) {
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32){
1000b7ba:	281f      	cmp	r0, #31
1000b7bc:	d807      	bhi.n	1000b7ce <gpio_pin_set_config+0x102>
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000b7be:	220f      	movs	r2, #15
1000b7c0:	4002      	ands	r2, r0
1000b7c2:	2301      	movs	r3, #1
1000b7c4:	4093      	lsls	r3, r2
1000b7c6:	b29b      	uxth	r3, r3
1000b7c8:	4a2c      	ldr	r2, [pc, #176]	; (1000b87c <gpio_pin_set_config+0x1b0>)
1000b7ca:	8293      	strh	r3, [r2, #20]
1000b7cc:	e008      	b.n	1000b7e0 <gpio_pin_set_config+0x114>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000b7ce:	230f      	movs	r3, #15
1000b7d0:	4018      	ands	r0, r3
1000b7d2:	3b0e      	subs	r3, #14
1000b7d4:	4083      	lsls	r3, r0
1000b7d6:	b29b      	uxth	r3, r3
1000b7d8:	4a29      	ldr	r2, [pc, #164]	; (1000b880 <gpio_pin_set_config+0x1b4>)
1000b7da:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000b7dc:	2300      	movs	r3, #0
1000b7de:	e043      	b.n	1000b868 <gpio_pin_set_config+0x19c>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
1000b7e0:	784b      	ldrb	r3, [r1, #1]
1000b7e2:	2b01      	cmp	r3, #1
1000b7e4:	d00c      	beq.n	1000b800 <gpio_pin_set_config+0x134>
1000b7e6:	2b00      	cmp	r3, #0
1000b7e8:	d002      	beq.n	1000b7f0 <gpio_pin_set_config+0x124>
1000b7ea:	2b02      	cmp	r3, #2
1000b7ec:	d010      	beq.n	1000b810 <gpio_pin_set_config+0x144>
1000b7ee:	e03a      	b.n	1000b866 <gpio_pin_set_config+0x19a>
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
1000b7f0:	491e      	ldr	r1, [pc, #120]	; (1000b86c <gpio_pin_set_config+0x1a0>)
1000b7f2:	6d0a      	ldr	r2, [r1, #80]	; 0x50
1000b7f4:	2301      	movs	r3, #1
1000b7f6:	4083      	lsls	r3, r0
1000b7f8:	4313      	orrs	r3, r2
1000b7fa:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000b7fc:	2300      	movs	r3, #0
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
1000b7fe:	e033      	b.n	1000b868 <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000b800:	491a      	ldr	r1, [pc, #104]	; (1000b86c <gpio_pin_set_config+0x1a0>)
1000b802:	6d0b      	ldr	r3, [r1, #80]	; 0x50
1000b804:	2201      	movs	r2, #1
1000b806:	4082      	lsls	r2, r0
1000b808:	4393      	bics	r3, r2
1000b80a:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000b80c:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
1000b80e:	e02b      	b.n	1000b868 <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
1000b810:	4b16      	ldr	r3, [pc, #88]	; (1000b86c <gpio_pin_set_config+0x1a0>)
1000b812:	6d59      	ldr	r1, [r3, #84]	; 0x54
1000b814:	2201      	movs	r2, #1
1000b816:	4082      	lsls	r2, r0
1000b818:	4311      	orrs	r1, r2
1000b81a:	6559      	str	r1, [r3, #84]	; 0x54
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000b81c:	6d19      	ldr	r1, [r3, #80]	; 0x50
1000b81e:	4391      	bics	r1, r2
1000b820:	6519      	str	r1, [r3, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000b822:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
1000b824:	e020      	b.n	1000b868 <gpio_pin_set_config+0x19c>
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000b826:	2300      	movs	r3, #0
						default:
							status = STATUS_ERR_INVALID_ARG;
							break;
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
1000b828:	2a01      	cmp	r2, #1
1000b82a:	d11d      	bne.n	1000b868 <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
1000b82c:	280f      	cmp	r0, #15
1000b82e:	d806      	bhi.n	1000b83e <gpio_pin_set_config+0x172>
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
1000b830:	3301      	adds	r3, #1
1000b832:	4083      	lsls	r3, r0
1000b834:	b29b      	uxth	r3, r3
1000b836:	4a10      	ldr	r2, [pc, #64]	; (1000b878 <gpio_pin_set_config+0x1ac>)
1000b838:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000b83a:	2300      	movs	r3, #0
1000b83c:	e014      	b.n	1000b868 <gpio_pin_set_config+0x19c>
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
1000b83e:	281f      	cmp	r0, #31
1000b840:	d808      	bhi.n	1000b854 <gpio_pin_set_config+0x188>
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
1000b842:	230f      	movs	r3, #15
1000b844:	4018      	ands	r0, r3
1000b846:	3b0e      	subs	r3, #14
1000b848:	4083      	lsls	r3, r0
1000b84a:	b29b      	uxth	r3, r3
1000b84c:	4a0b      	ldr	r2, [pc, #44]	; (1000b87c <gpio_pin_set_config+0x1b0>)
1000b84e:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000b850:	2300      	movs	r3, #0
1000b852:	e009      	b.n	1000b868 <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENSET.reg = (1 << (gpio_pin % 16));
1000b854:	230f      	movs	r3, #15
1000b856:	4018      	ands	r0, r3
1000b858:	3b0e      	subs	r3, #14
1000b85a:	4083      	lsls	r3, r0
1000b85c:	b29b      	uxth	r3, r3
1000b85e:	4a08      	ldr	r2, [pc, #32]	; (1000b880 <gpio_pin_set_config+0x1b4>)
1000b860:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000b862:	2300      	movs	r3, #0
1000b864:	e000      	b.n	1000b868 <gpio_pin_set_config+0x19c>
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
						default:
							status = STATUS_ERR_INVALID_ARG;
1000b866:	2317      	movs	r3, #23
				}
			}
		}
	}
	return status;
}
1000b868:	0018      	movs	r0, r3
1000b86a:	bd70      	pop	{r4, r5, r6, pc}
1000b86c:	4000b000 	.word	0x4000b000
1000b870:	4000f000 	.word	0x4000f000
1000b874:	4000e000 	.word	0x4000e000
1000b878:	40010000 	.word	0x40010000
1000b87c:	40011000 	.word	0x40011000
1000b880:	40013000 	.word	0x40013000

1000b884 <gpio_pin_get_input_level>:
 */
bool gpio_pin_get_input_level(const uint8_t gpio_pin)
{
	uint32_t regval = 0;

	if (gpio_pin < 16) {
1000b884:	280f      	cmp	r0, #15
1000b886:	d806      	bhi.n	1000b896 <gpio_pin_get_input_level+0x12>
		regval = GPIO0->DATA.reg;
1000b888:	4b0f      	ldr	r3, [pc, #60]	; (1000b8c8 <gpio_pin_get_input_level+0x44>)
1000b88a:	8819      	ldrh	r1, [r3, #0]
		regval &= (1 << gpio_pin);
1000b88c:	2301      	movs	r3, #1
1000b88e:	4083      	lsls	r3, r0
1000b890:	0018      	movs	r0, r3
1000b892:	4008      	ands	r0, r1
1000b894:	e014      	b.n	1000b8c0 <gpio_pin_get_input_level+0x3c>
	} else if (gpio_pin < 32) {
1000b896:	281f      	cmp	r0, #31
1000b898:	d809      	bhi.n	1000b8ae <gpio_pin_get_input_level+0x2a>
		regval = GPIO1->DATA.reg;
1000b89a:	4b0c      	ldr	r3, [pc, #48]	; (1000b8cc <gpio_pin_get_input_level+0x48>)
1000b89c:	8819      	ldrh	r1, [r3, #0]
		regval &= (1 << (gpio_pin % 16));
1000b89e:	230f      	movs	r3, #15
1000b8a0:	4003      	ands	r3, r0
1000b8a2:	001a      	movs	r2, r3
1000b8a4:	2301      	movs	r3, #1
1000b8a6:	4093      	lsls	r3, r2
1000b8a8:	0018      	movs	r0, r3
1000b8aa:	4008      	ands	r0, r1
1000b8ac:	e008      	b.n	1000b8c0 <gpio_pin_get_input_level+0x3c>
	} else {
		regval = GPIO2->DATA.reg;
1000b8ae:	4b08      	ldr	r3, [pc, #32]	; (1000b8d0 <gpio_pin_get_input_level+0x4c>)
1000b8b0:	8819      	ldrh	r1, [r3, #0]
		regval &= (1 << (gpio_pin % 16));
1000b8b2:	230f      	movs	r3, #15
1000b8b4:	4003      	ands	r3, r0
1000b8b6:	001a      	movs	r2, r3
1000b8b8:	2301      	movs	r3, #1
1000b8ba:	4093      	lsls	r3, r2
1000b8bc:	0018      	movs	r0, r3
1000b8be:	4008      	ands	r0, r1
	}

	return regval;
1000b8c0:	1e43      	subs	r3, r0, #1
1000b8c2:	4198      	sbcs	r0, r3
1000b8c4:	b2c0      	uxtb	r0, r0
}
1000b8c6:	4770      	bx	lr
1000b8c8:	40010000 	.word	0x40010000
1000b8cc:	40011000 	.word	0x40011000
1000b8d0:	40013000 	.word	0x40013000

1000b8d4 <gpio_pin_get_output_level>:
 */
bool gpio_pin_get_output_level(const uint8_t gpio_pin)
{
	uint32_t regval = 0;

	if (gpio_pin < 16) {
1000b8d4:	280f      	cmp	r0, #15
1000b8d6:	d806      	bhi.n	1000b8e6 <gpio_pin_get_output_level+0x12>
		regval = GPIO0->DATAOUT.reg;
1000b8d8:	4b0f      	ldr	r3, [pc, #60]	; (1000b918 <gpio_pin_get_output_level+0x44>)
1000b8da:	8899      	ldrh	r1, [r3, #4]
		regval &= (1 << gpio_pin);
1000b8dc:	2301      	movs	r3, #1
1000b8de:	4083      	lsls	r3, r0
1000b8e0:	0018      	movs	r0, r3
1000b8e2:	4008      	ands	r0, r1
1000b8e4:	e014      	b.n	1000b910 <gpio_pin_get_output_level+0x3c>
	} else if (gpio_pin < 32) {
1000b8e6:	281f      	cmp	r0, #31
1000b8e8:	d809      	bhi.n	1000b8fe <gpio_pin_get_output_level+0x2a>
		regval = GPIO1->DATAOUT.reg;
1000b8ea:	4b0c      	ldr	r3, [pc, #48]	; (1000b91c <gpio_pin_get_output_level+0x48>)
1000b8ec:	8899      	ldrh	r1, [r3, #4]
		regval &= (1 << (gpio_pin % 16));
1000b8ee:	230f      	movs	r3, #15
1000b8f0:	4003      	ands	r3, r0
1000b8f2:	001a      	movs	r2, r3
1000b8f4:	2301      	movs	r3, #1
1000b8f6:	4093      	lsls	r3, r2
1000b8f8:	0018      	movs	r0, r3
1000b8fa:	4008      	ands	r0, r1
1000b8fc:	e008      	b.n	1000b910 <gpio_pin_get_output_level+0x3c>
	} else {
		regval = GPIO2->DATAOUT.reg;
1000b8fe:	4b08      	ldr	r3, [pc, #32]	; (1000b920 <gpio_pin_get_output_level+0x4c>)
1000b900:	8899      	ldrh	r1, [r3, #4]
		regval &= (1 << (gpio_pin % 16));
1000b902:	230f      	movs	r3, #15
1000b904:	4003      	ands	r3, r0
1000b906:	001a      	movs	r2, r3
1000b908:	2301      	movs	r3, #1
1000b90a:	4093      	lsls	r3, r2
1000b90c:	0018      	movs	r0, r3
1000b90e:	4008      	ands	r0, r1
	}

	return regval;
1000b910:	1e43      	subs	r3, r0, #1
1000b912:	4198      	sbcs	r0, r3
1000b914:	b2c0      	uxtb	r0, r0
}
1000b916:	4770      	bx	lr
1000b918:	40010000 	.word	0x40010000
1000b91c:	40011000 	.word	0x40011000
1000b920:	40013000 	.word	0x40013000

1000b924 <gpio_pin_set_output_level>:
 *
 *  \param[in] gpio_pin  Index of the GPIO pin to write to.
 *  \param[in] level     Logical level to set the given pin to.
 */
void gpio_pin_set_output_level(const uint8_t gpio_pin, const bool level)
{
1000b924:	b510      	push	{r4, lr}
	if (gpio_pin < 16) {
1000b926:	280f      	cmp	r0, #15
1000b928:	d810      	bhi.n	1000b94c <gpio_pin_set_output_level+0x28>
		if(level) {
1000b92a:	2900      	cmp	r1, #0
1000b92c:	d007      	beq.n	1000b93e <gpio_pin_set_output_level+0x1a>
			GPIO0->DATAOUT.reg |= (1 << gpio_pin);
1000b92e:	4a1d      	ldr	r2, [pc, #116]	; (1000b9a4 <gpio_pin_set_output_level+0x80>)
1000b930:	8891      	ldrh	r1, [r2, #4]
1000b932:	2301      	movs	r3, #1
1000b934:	4083      	lsls	r3, r0
1000b936:	430b      	orrs	r3, r1
1000b938:	b29b      	uxth	r3, r3
1000b93a:	8093      	strh	r3, [r2, #4]
1000b93c:	e031      	b.n	1000b9a2 <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO0->DATAOUT.reg &= ~(1 << gpio_pin);
1000b93e:	4919      	ldr	r1, [pc, #100]	; (1000b9a4 <gpio_pin_set_output_level+0x80>)
1000b940:	888b      	ldrh	r3, [r1, #4]
1000b942:	2201      	movs	r2, #1
1000b944:	4082      	lsls	r2, r0
1000b946:	4393      	bics	r3, r2
1000b948:	808b      	strh	r3, [r1, #4]
1000b94a:	e02a      	b.n	1000b9a2 <gpio_pin_set_output_level+0x7e>
		}
	} else if (gpio_pin < 32) {
1000b94c:	281f      	cmp	r0, #31
1000b94e:	d814      	bhi.n	1000b97a <gpio_pin_set_output_level+0x56>
		if(level) {
1000b950:	2900      	cmp	r1, #0
1000b952:	d009      	beq.n	1000b968 <gpio_pin_set_output_level+0x44>
			GPIO1->DATAOUT.reg |= (1 << (gpio_pin % 16));
1000b954:	4914      	ldr	r1, [pc, #80]	; (1000b9a8 <gpio_pin_set_output_level+0x84>)
1000b956:	888c      	ldrh	r4, [r1, #4]
1000b958:	220f      	movs	r2, #15
1000b95a:	4010      	ands	r0, r2
1000b95c:	2301      	movs	r3, #1
1000b95e:	4083      	lsls	r3, r0
1000b960:	4323      	orrs	r3, r4
1000b962:	b29b      	uxth	r3, r3
1000b964:	808b      	strh	r3, [r1, #4]
1000b966:	e01c      	b.n	1000b9a2 <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO1->DATAOUT.reg &= ~(1 << (gpio_pin % 16));
1000b968:	490f      	ldr	r1, [pc, #60]	; (1000b9a8 <gpio_pin_set_output_level+0x84>)
1000b96a:	888b      	ldrh	r3, [r1, #4]
1000b96c:	220f      	movs	r2, #15
1000b96e:	4010      	ands	r0, r2
1000b970:	3a0e      	subs	r2, #14
1000b972:	4082      	lsls	r2, r0
1000b974:	4393      	bics	r3, r2
1000b976:	808b      	strh	r3, [r1, #4]
1000b978:	e013      	b.n	1000b9a2 <gpio_pin_set_output_level+0x7e>
		}
	} else {
		if(level) {
1000b97a:	2900      	cmp	r1, #0
1000b97c:	d009      	beq.n	1000b992 <gpio_pin_set_output_level+0x6e>
			GPIO2->DATAOUT.reg |= (1 << (gpio_pin % 16));
1000b97e:	490b      	ldr	r1, [pc, #44]	; (1000b9ac <gpio_pin_set_output_level+0x88>)
1000b980:	888c      	ldrh	r4, [r1, #4]
1000b982:	220f      	movs	r2, #15
1000b984:	4010      	ands	r0, r2
1000b986:	2301      	movs	r3, #1
1000b988:	4083      	lsls	r3, r0
1000b98a:	4323      	orrs	r3, r4
1000b98c:	b29b      	uxth	r3, r3
1000b98e:	808b      	strh	r3, [r1, #4]
1000b990:	e007      	b.n	1000b9a2 <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO2->DATAOUT.reg &= ~(1 << (gpio_pin % 16));
1000b992:	4906      	ldr	r1, [pc, #24]	; (1000b9ac <gpio_pin_set_output_level+0x88>)
1000b994:	888b      	ldrh	r3, [r1, #4]
1000b996:	220f      	movs	r2, #15
1000b998:	4010      	ands	r0, r2
1000b99a:	3a0e      	subs	r2, #14
1000b99c:	4082      	lsls	r2, r0
1000b99e:	4393      	bics	r3, r2
1000b9a0:	808b      	strh	r3, [r1, #4]
		}
	}
}
1000b9a2:	bd10      	pop	{r4, pc}
1000b9a4:	40010000 	.word	0x40010000
1000b9a8:	40011000 	.word	0x40011000
1000b9ac:	40013000 	.word	0x40013000

1000b9b0 <gpio_pinmux_cofiguration>:
 *
 *  \param[in] gpio_pin   Index of the GPIO pin to toggle.
 *  \param[in] pinmux_sel PINMUX selection.
 */
void gpio_pinmux_cofiguration(const uint8_t gpio_pin, uint16_t pinmux_sel)
{
1000b9b0:	b570      	push	{r4, r5, r6, lr}
	uint8_t megamux_sel = (pinmux_sel >> 8) & 0xFF;
1000b9b2:	0a0d      	lsrs	r5, r1, #8

	pinmux_sel &= 0xFF;
1000b9b4:	23ff      	movs	r3, #255	; 0xff
1000b9b6:	4019      	ands	r1, r3

	if (gpio_pin <= 7) {
1000b9b8:	2807      	cmp	r0, #7
1000b9ba:	d833      	bhi.n	1000ba24 <gpio_pinmux_cofiguration+0x74>
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000b9bc:	4a4e      	ldr	r2, [pc, #312]	; (1000baf8 <gpio_pinmux_cofiguration+0x148>)
1000b9be:	6c54      	ldr	r4, [r2, #68]	; 0x44
1000b9c0:	3bf8      	subs	r3, #248	; 0xf8
1000b9c2:	4003      	ands	r3, r0
1000b9c4:	009b      	lsls	r3, r3, #2
1000b9c6:	2607      	movs	r6, #7
1000b9c8:	409e      	lsls	r6, r3
1000b9ca:	43b4      	bics	r4, r6
1000b9cc:	6454      	str	r4, [r2, #68]	; 0x44
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000b9ce:	6c54      	ldr	r4, [r2, #68]	; 0x44
1000b9d0:	000e      	movs	r6, r1
1000b9d2:	409e      	lsls	r6, r3
1000b9d4:	0033      	movs	r3, r6
1000b9d6:	4323      	orrs	r3, r4
1000b9d8:	6453      	str	r3, [r2, #68]	; 0x44
		if (pinmux_sel == 0x01) {
1000b9da:	2901      	cmp	r1, #1
1000b9dc:	d000      	beq.n	1000b9e0 <gpio_pinmux_cofiguration+0x30>
1000b9de:	e08a      	b.n	1000baf6 <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 3) {
1000b9e0:	2803      	cmp	r0, #3
1000b9e2:	d80f      	bhi.n	1000ba04 <gpio_pinmux_cofiguration+0x54>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000b9e4:	0011      	movs	r1, r2
1000b9e6:	22d0      	movs	r2, #208	; 0xd0
1000b9e8:	0052      	lsls	r2, r2, #1
1000b9ea:	588c      	ldr	r4, [r1, r2]
1000b9ec:	2303      	movs	r3, #3
1000b9ee:	4018      	ands	r0, r3
1000b9f0:	00c0      	lsls	r0, r0, #3
1000b9f2:	333c      	adds	r3, #60	; 0x3c
1000b9f4:	4083      	lsls	r3, r0
1000b9f6:	439c      	bics	r4, r3
1000b9f8:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000b9fa:	588b      	ldr	r3, [r1, r2]
1000b9fc:	4085      	lsls	r5, r0
1000b9fe:	431d      	orrs	r5, r3
1000ba00:	508d      	str	r5, [r1, r2]
1000ba02:	e078      	b.n	1000baf6 <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 7) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000ba04:	493c      	ldr	r1, [pc, #240]	; (1000baf8 <gpio_pinmux_cofiguration+0x148>)
1000ba06:	22d2      	movs	r2, #210	; 0xd2
1000ba08:	0052      	lsls	r2, r2, #1
1000ba0a:	588c      	ldr	r4, [r1, r2]
1000ba0c:	2303      	movs	r3, #3
1000ba0e:	4018      	ands	r0, r3
1000ba10:	00c0      	lsls	r0, r0, #3
1000ba12:	333c      	adds	r3, #60	; 0x3c
1000ba14:	4083      	lsls	r3, r0
1000ba16:	439c      	bics	r4, r3
1000ba18:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000ba1a:	588b      	ldr	r3, [r1, r2]
1000ba1c:	4085      	lsls	r5, r0
1000ba1e:	431d      	orrs	r5, r3
1000ba20:	508d      	str	r5, [r1, r2]
1000ba22:	e068      	b.n	1000baf6 <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 15) {
1000ba24:	280f      	cmp	r0, #15
1000ba26:	d832      	bhi.n	1000ba8e <gpio_pinmux_cofiguration+0xde>
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000ba28:	4a33      	ldr	r2, [pc, #204]	; (1000baf8 <gpio_pinmux_cofiguration+0x148>)
1000ba2a:	6c94      	ldr	r4, [r2, #72]	; 0x48
1000ba2c:	2307      	movs	r3, #7
1000ba2e:	4003      	ands	r3, r0
1000ba30:	009b      	lsls	r3, r3, #2
1000ba32:	2607      	movs	r6, #7
1000ba34:	409e      	lsls	r6, r3
1000ba36:	43b4      	bics	r4, r6
1000ba38:	6494      	str	r4, [r2, #72]	; 0x48
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000ba3a:	6c94      	ldr	r4, [r2, #72]	; 0x48
1000ba3c:	000e      	movs	r6, r1
1000ba3e:	409e      	lsls	r6, r3
1000ba40:	0033      	movs	r3, r6
1000ba42:	4323      	orrs	r3, r4
1000ba44:	6493      	str	r3, [r2, #72]	; 0x48
		if (pinmux_sel == 0x01) {
1000ba46:	2901      	cmp	r1, #1
1000ba48:	d155      	bne.n	1000baf6 <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 11) {
1000ba4a:	280b      	cmp	r0, #11
1000ba4c:	d80f      	bhi.n	1000ba6e <gpio_pinmux_cofiguration+0xbe>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000ba4e:	0011      	movs	r1, r2
1000ba50:	22d4      	movs	r2, #212	; 0xd4
1000ba52:	0052      	lsls	r2, r2, #1
1000ba54:	588c      	ldr	r4, [r1, r2]
1000ba56:	2303      	movs	r3, #3
1000ba58:	4018      	ands	r0, r3
1000ba5a:	00c0      	lsls	r0, r0, #3
1000ba5c:	333c      	adds	r3, #60	; 0x3c
1000ba5e:	4083      	lsls	r3, r0
1000ba60:	439c      	bics	r4, r3
1000ba62:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000ba64:	588b      	ldr	r3, [r1, r2]
1000ba66:	4085      	lsls	r5, r0
1000ba68:	431d      	orrs	r5, r3
1000ba6a:	508d      	str	r5, [r1, r2]
1000ba6c:	e043      	b.n	1000baf6 <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 15) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000ba6e:	4922      	ldr	r1, [pc, #136]	; (1000baf8 <gpio_pinmux_cofiguration+0x148>)
1000ba70:	22d6      	movs	r2, #214	; 0xd6
1000ba72:	0052      	lsls	r2, r2, #1
1000ba74:	588c      	ldr	r4, [r1, r2]
1000ba76:	2303      	movs	r3, #3
1000ba78:	4018      	ands	r0, r3
1000ba7a:	00c0      	lsls	r0, r0, #3
1000ba7c:	333c      	adds	r3, #60	; 0x3c
1000ba7e:	4083      	lsls	r3, r0
1000ba80:	439c      	bics	r4, r3
1000ba82:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000ba84:	588b      	ldr	r3, [r1, r2]
1000ba86:	4085      	lsls	r5, r0
1000ba88:	431d      	orrs	r5, r3
1000ba8a:	508d      	str	r5, [r1, r2]
1000ba8c:	e033      	b.n	1000baf6 <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 23) {
1000ba8e:	2817      	cmp	r0, #23
1000ba90:	d831      	bhi.n	1000baf6 <gpio_pinmux_cofiguration+0x146>
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000ba92:	4a19      	ldr	r2, [pc, #100]	; (1000baf8 <gpio_pinmux_cofiguration+0x148>)
1000ba94:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
1000ba96:	2307      	movs	r3, #7
1000ba98:	4003      	ands	r3, r0
1000ba9a:	009b      	lsls	r3, r3, #2
1000ba9c:	2607      	movs	r6, #7
1000ba9e:	409e      	lsls	r6, r3
1000baa0:	43b4      	bics	r4, r6
1000baa2:	64d4      	str	r4, [r2, #76]	; 0x4c
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000baa4:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
1000baa6:	000e      	movs	r6, r1
1000baa8:	409e      	lsls	r6, r3
1000baaa:	0033      	movs	r3, r6
1000baac:	4323      	orrs	r3, r4
1000baae:	64d3      	str	r3, [r2, #76]	; 0x4c
		if (pinmux_sel == 0x01) {
1000bab0:	2901      	cmp	r1, #1
1000bab2:	d120      	bne.n	1000baf6 <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 19) {
1000bab4:	2813      	cmp	r0, #19
1000bab6:	d80f      	bhi.n	1000bad8 <gpio_pinmux_cofiguration+0x128>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000bab8:	0011      	movs	r1, r2
1000baba:	22d8      	movs	r2, #216	; 0xd8
1000babc:	0052      	lsls	r2, r2, #1
1000babe:	588c      	ldr	r4, [r1, r2]
1000bac0:	2303      	movs	r3, #3
1000bac2:	4018      	ands	r0, r3
1000bac4:	00c0      	lsls	r0, r0, #3
1000bac6:	333c      	adds	r3, #60	; 0x3c
1000bac8:	4083      	lsls	r3, r0
1000baca:	439c      	bics	r4, r3
1000bacc:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000bace:	588b      	ldr	r3, [r1, r2]
1000bad0:	4085      	lsls	r5, r0
1000bad2:	431d      	orrs	r5, r3
1000bad4:	508d      	str	r5, [r1, r2]
1000bad6:	e00e      	b.n	1000baf6 <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 23) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000bad8:	4a07      	ldr	r2, [pc, #28]	; (1000baf8 <gpio_pinmux_cofiguration+0x148>)
1000bada:	23da      	movs	r3, #218	; 0xda
1000badc:	005b      	lsls	r3, r3, #1
1000bade:	58d1      	ldr	r1, [r2, r3]
1000bae0:	2403      	movs	r4, #3
1000bae2:	4020      	ands	r0, r4
1000bae4:	00c0      	lsls	r0, r0, #3
1000bae6:	343c      	adds	r4, #60	; 0x3c
1000bae8:	4084      	lsls	r4, r0
1000baea:	43a1      	bics	r1, r4
1000baec:	50d1      	str	r1, [r2, r3]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000baee:	58d1      	ldr	r1, [r2, r3]
1000baf0:	4085      	lsls	r5, r0
1000baf2:	430d      	orrs	r5, r1
1000baf4:	50d5      	str	r5, [r2, r3]
			}
		}
	}
}
1000baf6:	bd70      	pop	{r4, r5, r6, pc}
1000baf8:	4000b000 	.word	0x4000b000

1000bafc <gpio_register_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 *
 */
void gpio_register_callback(uint8_t gpio_pin, gpio_callback_t callback_func,
				enum gpio_callback callback_type)
{
1000bafc:	b5f0      	push	{r4, r5, r6, r7, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
		gpio_port = 0;
1000bafe:	2300      	movs	r3, #0
	Assert(callback_func);
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000bb00:	280f      	cmp	r0, #15
1000bb02:	d904      	bls.n	1000bb0e <gpio_register_callback+0x12>
		gpio_port = 0;
	} else if (gpio_pin < 32) {
		gpio_port = 1;
	} else {
		gpio_port = 2;
1000bb04:	241f      	movs	r4, #31
1000bb06:	4284      	cmp	r4, r0
1000bb08:	415b      	adcs	r3, r3
1000bb0a:	3c1d      	subs	r4, #29
1000bb0c:	1ae3      	subs	r3, r4, r3
	}
	switch (callback_type) {
1000bb0e:	2a01      	cmp	r2, #1
1000bb10:	d016      	beq.n	1000bb40 <gpio_register_callback+0x44>
1000bb12:	2a00      	cmp	r2, #0
1000bb14:	d004      	beq.n	1000bb20 <gpio_register_callback+0x24>
1000bb16:	2a02      	cmp	r2, #2
1000bb18:	d022      	beq.n	1000bb60 <gpio_register_callback+0x64>
1000bb1a:	2a03      	cmp	r2, #3
1000bb1c:	d030      	beq.n	1000bb80 <gpio_register_callback+0x84>
1000bb1e:	e03e      	b.n	1000bb9e <gpio_register_callback+0xa2>
	case GPIO_CALLBACK_LOW:
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
1000bb20:	4e29      	ldr	r6, [pc, #164]	; (1000bbc8 <gpio_register_callback+0xcc>)
1000bb22:	00dc      	lsls	r4, r3, #3
1000bb24:	18e2      	adds	r2, r4, r3
1000bb26:	00d2      	lsls	r2, r2, #3
1000bb28:	5997      	ldr	r7, [r2, r6]
1000bb2a:	250f      	movs	r5, #15
1000bb2c:	4005      	ands	r5, r0
1000bb2e:	2201      	movs	r2, #1
1000bb30:	40aa      	lsls	r2, r5
1000bb32:	b292      	uxth	r2, r2
1000bb34:	85ba      	strh	r2, [r7, #44]	; 0x2c
		_gpio_instances[gpio_port].hw->INTPOLCLR.reg = 1 << (gpio_pin % 16);
1000bb36:	18e4      	adds	r4, r4, r3
1000bb38:	00e4      	lsls	r4, r4, #3
1000bb3a:	59a4      	ldr	r4, [r4, r6]
1000bb3c:	86a2      	strh	r2, [r4, #52]	; 0x34
		break;
1000bb3e:	e02e      	b.n	1000bb9e <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_HIGH:
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
1000bb40:	4e21      	ldr	r6, [pc, #132]	; (1000bbc8 <gpio_register_callback+0xcc>)
1000bb42:	00dc      	lsls	r4, r3, #3
1000bb44:	18e2      	adds	r2, r4, r3
1000bb46:	00d2      	lsls	r2, r2, #3
1000bb48:	5997      	ldr	r7, [r2, r6]
1000bb4a:	250f      	movs	r5, #15
1000bb4c:	4005      	ands	r5, r0
1000bb4e:	2201      	movs	r2, #1
1000bb50:	40aa      	lsls	r2, r5
1000bb52:	b292      	uxth	r2, r2
1000bb54:	85ba      	strh	r2, [r7, #44]	; 0x2c
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
1000bb56:	18e4      	adds	r4, r4, r3
1000bb58:	00e4      	lsls	r4, r4, #3
1000bb5a:	59a4      	ldr	r4, [r4, r6]
1000bb5c:	8622      	strh	r2, [r4, #48]	; 0x30
		break;
1000bb5e:	e01e      	b.n	1000bb9e <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_RISING:
		_gpio_instances[gpio_port].hw->INTTYPESET.reg = 1 << (gpio_pin % 16);
1000bb60:	4e19      	ldr	r6, [pc, #100]	; (1000bbc8 <gpio_register_callback+0xcc>)
1000bb62:	00dc      	lsls	r4, r3, #3
1000bb64:	18e2      	adds	r2, r4, r3
1000bb66:	00d2      	lsls	r2, r2, #3
1000bb68:	5997      	ldr	r7, [r2, r6]
1000bb6a:	250f      	movs	r5, #15
1000bb6c:	4005      	ands	r5, r0
1000bb6e:	2201      	movs	r2, #1
1000bb70:	40aa      	lsls	r2, r5
1000bb72:	b292      	uxth	r2, r2
1000bb74:	853a      	strh	r2, [r7, #40]	; 0x28
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
1000bb76:	18e4      	adds	r4, r4, r3
1000bb78:	00e4      	lsls	r4, r4, #3
1000bb7a:	59a4      	ldr	r4, [r4, r6]
1000bb7c:	8622      	strh	r2, [r4, #48]	; 0x30
		break;
1000bb7e:	e00e      	b.n	1000bb9e <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_FALLING:
		_gpio_instances[gpio_port].hw->INTTYPESET.reg = 1 << (gpio_pin % 16);
1000bb80:	4e11      	ldr	r6, [pc, #68]	; (1000bbc8 <gpio_register_callback+0xcc>)
1000bb82:	00dc      	lsls	r4, r3, #3
1000bb84:	18e2      	adds	r2, r4, r3
1000bb86:	00d2      	lsls	r2, r2, #3
1000bb88:	5997      	ldr	r7, [r2, r6]
1000bb8a:	250f      	movs	r5, #15
1000bb8c:	4005      	ands	r5, r0
1000bb8e:	2201      	movs	r2, #1
1000bb90:	40aa      	lsls	r2, r5
1000bb92:	b292      	uxth	r2, r2
1000bb94:	853a      	strh	r2, [r7, #40]	; 0x28
		_gpio_instances[gpio_port].hw->INTPOLCLR.reg = (1 << (gpio_pin % 16));
1000bb96:	18e4      	adds	r4, r4, r3
1000bb98:	00e4      	lsls	r4, r4, #3
1000bb9a:	59a4      	ldr	r4, [r4, r6]
1000bb9c:	86a2      	strh	r2, [r4, #52]	; 0x34

	case GPIO_CALLBACK_N:
		break;
	}
	/* Register callback function */
	_gpio_instances[gpio_port].callback[gpio_pin % 16] = callback_func;
1000bb9e:	220f      	movs	r2, #15
1000bba0:	4010      	ands	r0, r2
1000bba2:	4c09      	ldr	r4, [pc, #36]	; (1000bbc8 <gpio_register_callback+0xcc>)
1000bba4:	00dd      	lsls	r5, r3, #3
1000bba6:	18ea      	adds	r2, r5, r3
1000bba8:	0052      	lsls	r2, r2, #1
1000bbaa:	1812      	adds	r2, r2, r0
1000bbac:	0092      	lsls	r2, r2, #2
1000bbae:	18a2      	adds	r2, r4, r2
1000bbb0:	6051      	str	r1, [r2, #4]
	/* Set the bit corresponding to the gpio pin */
	_gpio_instances[gpio_port].callback_reg_mask |= (1 << (gpio_pin % 16));
1000bbb2:	18ea      	adds	r2, r5, r3
1000bbb4:	00d2      	lsls	r2, r2, #3
1000bbb6:	18a2      	adds	r2, r4, r2
1000bbb8:	3244      	adds	r2, #68	; 0x44
1000bbba:	2101      	movs	r1, #1
1000bbbc:	4081      	lsls	r1, r0
1000bbbe:	8813      	ldrh	r3, [r2, #0]
1000bbc0:	430b      	orrs	r3, r1
1000bbc2:	8013      	strh	r3, [r2, #0]
}
1000bbc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000bbc6:	46c0      	nop			; (mov r8, r8)
1000bbc8:	1001a650 	.word	0x1001a650

1000bbcc <gpio_enable_callback>:
 * conditions for the callback type are met.
 *
 * \param[in]  gpio_pin   GPIO pin
 */
void gpio_enable_callback(uint8_t gpio_pin)
{
1000bbcc:	b530      	push	{r4, r5, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000bbce:	280f      	cmp	r0, #15
1000bbd0:	d805      	bhi.n	1000bbde <gpio_enable_callback+0x12>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000bbd2:	2280      	movs	r2, #128	; 0x80
1000bbd4:	0412      	lsls	r2, r2, #16
1000bbd6:	4b12      	ldr	r3, [pc, #72]	; (1000bc20 <gpio_enable_callback+0x54>)
1000bbd8:	601a      	str	r2, [r3, #0]
		gpio_port = 0;
1000bbda:	2200      	movs	r2, #0
1000bbdc:	e00c      	b.n	1000bbf8 <gpio_enable_callback+0x2c>
		NVIC_EnableIRQ(GPIO0_IRQn);
	} else if (gpio_pin < 32) {
1000bbde:	281f      	cmp	r0, #31
1000bbe0:	d805      	bhi.n	1000bbee <gpio_enable_callback+0x22>
1000bbe2:	2280      	movs	r2, #128	; 0x80
1000bbe4:	0452      	lsls	r2, r2, #17
1000bbe6:	4b0e      	ldr	r3, [pc, #56]	; (1000bc20 <gpio_enable_callback+0x54>)
1000bbe8:	601a      	str	r2, [r3, #0]
		gpio_port = 1;
1000bbea:	2201      	movs	r2, #1
1000bbec:	e004      	b.n	1000bbf8 <gpio_enable_callback+0x2c>
1000bbee:	2280      	movs	r2, #128	; 0x80
1000bbf0:	0492      	lsls	r2, r2, #18
1000bbf2:	4b0b      	ldr	r3, [pc, #44]	; (1000bc20 <gpio_enable_callback+0x54>)
1000bbf4:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(GPIO1_IRQn);
	} else {
		gpio_port = 2;
1000bbf6:	2202      	movs	r2, #2
		NVIC_EnableIRQ(GPIO2_IRQn);
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask |= (1 << (gpio_pin % 16));
1000bbf8:	230f      	movs	r3, #15
1000bbfa:	4018      	ands	r0, r3
1000bbfc:	2101      	movs	r1, #1
1000bbfe:	4081      	lsls	r1, r0
1000bc00:	4c08      	ldr	r4, [pc, #32]	; (1000bc24 <gpio_enable_callback+0x58>)
1000bc02:	00d5      	lsls	r5, r2, #3
1000bc04:	18ab      	adds	r3, r5, r2
1000bc06:	00db      	lsls	r3, r3, #3
1000bc08:	18e3      	adds	r3, r4, r3
1000bc0a:	3346      	adds	r3, #70	; 0x46
1000bc0c:	8818      	ldrh	r0, [r3, #0]
1000bc0e:	4308      	orrs	r0, r1
1000bc10:	8018      	strh	r0, [r3, #0]
	_gpio_instances[gpio_port].hw->INTENSET.reg = (1 << (gpio_pin % 16));
1000bc12:	18aa      	adds	r2, r5, r2
1000bc14:	00d2      	lsls	r2, r2, #3
1000bc16:	5913      	ldr	r3, [r2, r4]
1000bc18:	b289      	uxth	r1, r1
1000bc1a:	8419      	strh	r1, [r3, #32]
}
1000bc1c:	bd30      	pop	{r4, r5, pc}
1000bc1e:	46c0      	nop			; (mov r8, r8)
1000bc20:	e000e100 	.word	0xe000e100
1000bc24:	1001a650 	.word	0x1001a650

1000bc28 <gpio_disable_callback>:
 * The callback function will not be called from the interrupt handler.
 *
 * \param[in]  gpio_pin   GPIO pin
 */
void gpio_disable_callback(uint8_t gpio_pin)
{
1000bc28:	b530      	push	{r4, r5, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
		gpio_port = 0;
1000bc2a:	2300      	movs	r3, #0
{
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000bc2c:	280f      	cmp	r0, #15
1000bc2e:	d904      	bls.n	1000bc3a <gpio_disable_callback+0x12>
		gpio_port = 0;
	} else if (gpio_pin < 32) {
		gpio_port = 1;
	} else {
		gpio_port = 2;
1000bc30:	221f      	movs	r2, #31
1000bc32:	4282      	cmp	r2, r0
1000bc34:	415b      	adcs	r3, r3
1000bc36:	3a1d      	subs	r2, #29
1000bc38:	1ad3      	subs	r3, r2, r3
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask &= ~(1 << (gpio_pin % 16));
1000bc3a:	220f      	movs	r2, #15
1000bc3c:	4010      	ands	r0, r2
1000bc3e:	2101      	movs	r1, #1
1000bc40:	4081      	lsls	r1, r0
1000bc42:	4c07      	ldr	r4, [pc, #28]	; (1000bc60 <gpio_disable_callback+0x38>)
1000bc44:	00dd      	lsls	r5, r3, #3
1000bc46:	18ea      	adds	r2, r5, r3
1000bc48:	00d2      	lsls	r2, r2, #3
1000bc4a:	18a2      	adds	r2, r4, r2
1000bc4c:	3246      	adds	r2, #70	; 0x46
1000bc4e:	8810      	ldrh	r0, [r2, #0]
1000bc50:	4388      	bics	r0, r1
1000bc52:	8010      	strh	r0, [r2, #0]
	_gpio_instances[gpio_port].hw->INTENCLR.reg = (1 << (gpio_pin % 16));
1000bc54:	18eb      	adds	r3, r5, r3
1000bc56:	00db      	lsls	r3, r3, #3
1000bc58:	591b      	ldr	r3, [r3, r4]
1000bc5a:	b289      	uxth	r1, r1
1000bc5c:	8499      	strh	r1, [r3, #36]	; 0x24
}
1000bc5e:	bd30      	pop	{r4, r5, pc}
1000bc60:	1001a650 	.word	0x1001a650

1000bc64 <gpio_init>:
 *
 * This function will init GPIO callback.
 *
 */
void gpio_init(void)
{
1000bc64:	b510      	push	{r4, lr}
1000bc66:	4a11      	ldr	r2, [pc, #68]	; (1000bcac <gpio_init+0x48>)
1000bc68:	0010      	movs	r0, r2
1000bc6a:	30d8      	adds	r0, #216	; 0xd8
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
			_gpio_instances[i].callback[j] = NULL;
1000bc6c:	2100      	movs	r1, #0
1000bc6e:	e007      	b.n	1000bc80 <gpio_init+0x1c>
1000bc70:	c302      	stmia	r3!, {r1}
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
1000bc72:	4293      	cmp	r3, r2
1000bc74:	d1fc      	bne.n	1000bc70 <gpio_init+0xc>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
1000bc76:	8051      	strh	r1, [r2, #2]
		_gpio_instances[i].callback_reg_mask = 0;
1000bc78:	8011      	strh	r1, [r2, #0]
1000bc7a:	3248      	adds	r2, #72	; 0x48
 */
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
1000bc7c:	4282      	cmp	r2, r0
1000bc7e:	d002      	beq.n	1000bc86 <gpio_init+0x22>
1000bc80:	0013      	movs	r3, r2
1000bc82:	3b40      	subs	r3, #64	; 0x40
1000bc84:	e7f4      	b.n	1000bc70 <gpio_init+0xc>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
		_gpio_instances[i].callback_reg_mask = 0;
	}
	_gpio_instances[0].hw = (void *)GPIO0;
1000bc86:	4b0a      	ldr	r3, [pc, #40]	; (1000bcb0 <gpio_init+0x4c>)
1000bc88:	4a0a      	ldr	r2, [pc, #40]	; (1000bcb4 <gpio_init+0x50>)
1000bc8a:	601a      	str	r2, [r3, #0]
	_gpio_instances[1].hw = (void *)GPIO1;
1000bc8c:	4a0a      	ldr	r2, [pc, #40]	; (1000bcb8 <gpio_init+0x54>)
1000bc8e:	649a      	str	r2, [r3, #72]	; 0x48
	_gpio_instances[2].hw = (void *)GPIO2;
1000bc90:	490a      	ldr	r1, [pc, #40]	; (1000bcbc <gpio_init+0x58>)
1000bc92:	2290      	movs	r2, #144	; 0x90
1000bc94:	5099      	str	r1, [r3, r2]
	system_register_isr(RAM_ISR_TABLE_PORT0_COMB_INDEX, (uint32_t)gpio_port0_isr_handler);
1000bc96:	490a      	ldr	r1, [pc, #40]	; (1000bcc0 <gpio_init+0x5c>)
1000bc98:	2027      	movs	r0, #39	; 0x27
1000bc9a:	4c0a      	ldr	r4, [pc, #40]	; (1000bcc4 <gpio_init+0x60>)
1000bc9c:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT1_COMB_INDEX, (uint32_t)gpio_port1_isr_handler);
1000bc9e:	490a      	ldr	r1, [pc, #40]	; (1000bcc8 <gpio_init+0x64>)
1000bca0:	2028      	movs	r0, #40	; 0x28
1000bca2:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT2_COMB_INDEX, (uint32_t)gpio_port2_isr_handler);
1000bca4:	4909      	ldr	r1, [pc, #36]	; (1000bccc <gpio_init+0x68>)
1000bca6:	2029      	movs	r0, #41	; 0x29
1000bca8:	47a0      	blx	r4
}
1000bcaa:	bd10      	pop	{r4, pc}
1000bcac:	1001a694 	.word	0x1001a694
1000bcb0:	1001a650 	.word	0x1001a650
1000bcb4:	40010000 	.word	0x40010000
1000bcb8:	40011000 	.word	0x40011000
1000bcbc:	40013000 	.word	0x40013000
1000bcc0:	1000b56d 	.word	0x1000b56d
1000bcc4:	1000c891 	.word	0x1000c891
1000bcc8:	1000b5d1 	.word	0x1000b5d1
1000bccc:	1000b641 	.word	0x1000b641

1000bcd0 <system_clock_config>:
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_config(enum system_clock_resource resoure, \
				enum system_clock_freq freq)
{
	switch (resoure) {
1000bcd0:	2801      	cmp	r0, #1
1000bcd2:	d00d      	beq.n	1000bcf0 <system_clock_config+0x20>
1000bcd4:	2800      	cmp	r0, #0
1000bcd6:	d002      	beq.n	1000bcde <system_clock_config+0xe>
1000bcd8:	2802      	cmp	r0, #2
1000bcda:	d01c      	beq.n	1000bd16 <system_clock_config+0x46>
1000bcdc:	e02e      	b.n	1000bd3c <system_clock_config+0x6c>
		case CLOCK_RESOURCE_XO_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000bcde:	4a18      	ldr	r2, [pc, #96]	; (1000bd40 <system_clock_config+0x70>)
1000bce0:	6990      	ldr	r0, [r2, #24]
1000bce2:	230c      	movs	r3, #12
1000bce4:	4303      	orrs	r3, r0
1000bce6:	6193      	str	r3, [r2, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			system_clock_value = 26000000;
1000bce8:	4a16      	ldr	r2, [pc, #88]	; (1000bd44 <system_clock_config+0x74>)
1000bcea:	4b17      	ldr	r3, [pc, #92]	; (1000bd48 <system_clock_config+0x78>)
1000bcec:	601a      	str	r2, [r3, #0]
			break;
1000bcee:	e01a      	b.n	1000bd26 <system_clock_config+0x56>

		case CLOCK_RESOURCE_LP_2_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000bcf0:	4b13      	ldr	r3, [pc, #76]	; (1000bd40 <system_clock_config+0x70>)
1000bcf2:	6998      	ldr	r0, [r3, #24]
1000bcf4:	2208      	movs	r2, #8
1000bcf6:	4302      	orrs	r2, r0
1000bcf8:	619a      	str	r2, [r3, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000bcfa:	699a      	ldr	r2, [r3, #24]
1000bcfc:	2004      	movs	r0, #4
1000bcfe:	4382      	bics	r2, r0
1000bd00:	619a      	str	r2, [r3, #24]
					~LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK;
			AON_GP_REGS0->AON_PMU_CTRL.reg |= \
1000bd02:	4a12      	ldr	r2, [pc, #72]	; (1000bd4c <system_clock_config+0x7c>)
1000bd04:	6853      	ldr	r3, [r2, #4]
1000bd06:	2080      	movs	r0, #128	; 0x80
1000bd08:	0300      	lsls	r0, r0, #12
1000bd0a:	4303      	orrs	r3, r0
1000bd0c:	6053      	str	r3, [r2, #4]
					AON_GP_REGS_AON_PMU_CTRL_PMU_2MHZ_CLK_EN;
			system_clock_value = 2000000;
1000bd0e:	4a10      	ldr	r2, [pc, #64]	; (1000bd50 <system_clock_config+0x80>)
1000bd10:	4b0d      	ldr	r3, [pc, #52]	; (1000bd48 <system_clock_config+0x78>)
1000bd12:	601a      	str	r2, [r3, #0]
			break;
1000bd14:	e007      	b.n	1000bd26 <system_clock_config+0x56>

		case CLOCK_RESOURCE_RC_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000bd16:	4a0a      	ldr	r2, [pc, #40]	; (1000bd40 <system_clock_config+0x70>)
1000bd18:	6993      	ldr	r3, [r2, #24]
1000bd1a:	200c      	movs	r0, #12
1000bd1c:	4383      	bics	r3, r0
1000bd1e:	6193      	str	r3, [r2, #24]
					~(LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
1000bd20:	4a08      	ldr	r2, [pc, #32]	; (1000bd44 <system_clock_config+0x74>)
1000bd22:	4b09      	ldr	r3, [pc, #36]	; (1000bd48 <system_clock_config+0x78>)
1000bd24:	601a      	str	r2, [r3, #0]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000bd26:	4b06      	ldr	r3, [pc, #24]	; (1000bd40 <system_clock_config+0x70>)
1000bd28:	699a      	ldr	r2, [r3, #24]
1000bd2a:	2003      	movs	r0, #3
1000bd2c:	4382      	bics	r2, r0
1000bd2e:	619a      	str	r2, [r3, #24]
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000bd30:	699a      	ldr	r2, [r3, #24]
1000bd32:	4001      	ands	r1, r0
1000bd34:	4311      	orrs	r1, r2
1000bd36:	6199      	str	r1, [r3, #24]
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
1000bd38:	2000      	movs	r0, #0
1000bd3a:	e000      	b.n	1000bd3e <system_clock_config+0x6e>
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
			break;

		default:
			return STATUS_ERR_INVALID_ARG;
1000bd3c:	2017      	movs	r0, #23
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
}
1000bd3e:	4770      	bx	lr
1000bd40:	4000b000 	.word	0x4000b000
1000bd44:	018cba80 	.word	0x018cba80
1000bd48:	1001a728 	.word	0x1001a728
1000bd4c:	4000f000 	.word	0x4000f000
1000bd50:	001e8480 	.word	0x001e8480

1000bd54 <system_clock_get_value>:
 *
 * \return system clock value.
 */
uint32_t system_clock_get_value(void)
{
	return system_clock_value;
1000bd54:	4b01      	ldr	r3, [pc, #4]	; (1000bd5c <system_clock_get_value+0x8>)
1000bd56:	6818      	ldr	r0, [r3, #0]
}
1000bd58:	4770      	bx	lr
1000bd5a:	46c0      	nop			; (mov r8, r8)
1000bd5c:	1001a728 	.word	0x1001a728

1000bd60 <system_clock_peripheral_enable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_enable(enum system_peripheral peripheral)
{
1000bd60:	b500      	push	{lr}
	switch (peripheral) {
1000bd62:	2835      	cmp	r0, #53	; 0x35
1000bd64:	d900      	bls.n	1000bd68 <system_clock_peripheral_enable+0x8>
1000bd66:	e1a2      	b.n	1000c0ae <system_clock_peripheral_enable+0x34e>
1000bd68:	0080      	lsls	r0, r0, #2
1000bd6a:	4bd2      	ldr	r3, [pc, #840]	; (1000c0b4 <system_clock_peripheral_enable+0x354>)
1000bd6c:	581b      	ldr	r3, [r3, r0]
1000bd6e:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bd70:	4ad1      	ldr	r2, [pc, #836]	; (1000c0b8 <system_clock_peripheral_enable+0x358>)
1000bd72:	68d1      	ldr	r1, [r2, #12]
1000bd74:	2302      	movs	r3, #2
1000bd76:	430b      	orrs	r3, r1
1000bd78:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bd7a:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;
1000bd7c:	e198      	b.n	1000c0b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bd7e:	4ace      	ldr	r2, [pc, #824]	; (1000c0b8 <system_clock_peripheral_enable+0x358>)
1000bd80:	68d1      	ldr	r1, [r2, #12]
1000bd82:	2304      	movs	r3, #4
1000bd84:	430b      	orrs	r3, r1
1000bd86:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bd88:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;
1000bd8a:	e191      	b.n	1000c0b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bd8c:	4aca      	ldr	r2, [pc, #808]	; (1000c0b8 <system_clock_peripheral_enable+0x358>)
1000bd8e:	68d1      	ldr	r1, [r2, #12]
1000bd90:	2308      	movs	r3, #8
1000bd92:	430b      	orrs	r3, r1
1000bd94:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bd96:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;
1000bd98:	e18a      	b.n	1000c0b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bd9a:	4ac7      	ldr	r2, [pc, #796]	; (1000c0b8 <system_clock_peripheral_enable+0x358>)
1000bd9c:	68d1      	ldr	r1, [r2, #12]
1000bd9e:	2310      	movs	r3, #16
1000bda0:	430b      	orrs	r3, r1
1000bda2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bda4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;
1000bda6:	e183      	b.n	1000c0b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bda8:	4ac3      	ldr	r2, [pc, #780]	; (1000c0b8 <system_clock_peripheral_enable+0x358>)
1000bdaa:	68d1      	ldr	r1, [r2, #12]
1000bdac:	2320      	movs	r3, #32
1000bdae:	430b      	orrs	r3, r1
1000bdb0:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bdb2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;
1000bdb4:	e17c      	b.n	1000c0b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bdb6:	4ac0      	ldr	r2, [pc, #768]	; (1000c0b8 <system_clock_peripheral_enable+0x358>)
1000bdb8:	68d1      	ldr	r1, [r2, #12]
1000bdba:	2380      	movs	r3, #128	; 0x80
1000bdbc:	430b      	orrs	r3, r1
1000bdbe:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bdc0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
1000bdc2:	e175      	b.n	1000c0b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bdc4:	4abc      	ldr	r2, [pc, #752]	; (1000c0b8 <system_clock_peripheral_enable+0x358>)
1000bdc6:	68d3      	ldr	r3, [r2, #12]
1000bdc8:	2180      	movs	r1, #128	; 0x80
1000bdca:	0049      	lsls	r1, r1, #1
1000bdcc:	430b      	orrs	r3, r1
1000bdce:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bdd0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN;
		break;
1000bdd2:	e16d      	b.n	1000c0b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bdd4:	4ab8      	ldr	r2, [pc, #736]	; (1000c0b8 <system_clock_peripheral_enable+0x358>)
1000bdd6:	68d3      	ldr	r3, [r2, #12]
1000bdd8:	2180      	movs	r1, #128	; 0x80
1000bdda:	0109      	lsls	r1, r1, #4
1000bddc:	430b      	orrs	r3, r1
1000bdde:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bde0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN;
		break;
1000bde2:	e165      	b.n	1000c0b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bde4:	4ab4      	ldr	r2, [pc, #720]	; (1000c0b8 <system_clock_peripheral_enable+0x358>)
1000bde6:	68d3      	ldr	r3, [r2, #12]
1000bde8:	2180      	movs	r1, #128	; 0x80
1000bdea:	0149      	lsls	r1, r1, #5
1000bdec:	430b      	orrs	r3, r1
1000bdee:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bdf0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN;
		break;
1000bdf2:	e15d      	b.n	1000c0b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bdf4:	4ab0      	ldr	r2, [pc, #704]	; (1000c0b8 <system_clock_peripheral_enable+0x358>)
1000bdf6:	68d3      	ldr	r3, [r2, #12]
1000bdf8:	2180      	movs	r1, #128	; 0x80
1000bdfa:	0189      	lsls	r1, r1, #6
1000bdfc:	430b      	orrs	r3, r1
1000bdfe:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000be00:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN;
		break;
1000be02:	e155      	b.n	1000c0b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000be04:	4aac      	ldr	r2, [pc, #688]	; (1000c0b8 <system_clock_peripheral_enable+0x358>)
1000be06:	68d3      	ldr	r3, [r2, #12]
1000be08:	2180      	movs	r1, #128	; 0x80
1000be0a:	01c9      	lsls	r1, r1, #7
1000be0c:	430b      	orrs	r3, r1
1000be0e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000be10:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN;
		break;
1000be12:	e14d      	b.n	1000c0b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000be14:	4aa8      	ldr	r2, [pc, #672]	; (1000c0b8 <system_clock_peripheral_enable+0x358>)
1000be16:	68d3      	ldr	r3, [r2, #12]
1000be18:	2180      	movs	r1, #128	; 0x80
1000be1a:	0209      	lsls	r1, r1, #8
1000be1c:	430b      	orrs	r3, r1
1000be1e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000be20:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN;
		break;
1000be22:	e145      	b.n	1000c0b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000be24:	4aa4      	ldr	r2, [pc, #656]	; (1000c0b8 <system_clock_peripheral_enable+0x358>)
1000be26:	68d3      	ldr	r3, [r2, #12]
1000be28:	2180      	movs	r1, #128	; 0x80
1000be2a:	0249      	lsls	r1, r1, #9
1000be2c:	430b      	orrs	r3, r1
1000be2e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000be30:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN;
		break;
1000be32:	e13d      	b.n	1000c0b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000be34:	4aa0      	ldr	r2, [pc, #640]	; (1000c0b8 <system_clock_peripheral_enable+0x358>)
1000be36:	68d3      	ldr	r3, [r2, #12]
1000be38:	2180      	movs	r1, #128	; 0x80
1000be3a:	0289      	lsls	r1, r1, #10
1000be3c:	430b      	orrs	r3, r1
1000be3e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000be40:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
1000be42:	e135      	b.n	1000c0b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000be44:	4a9c      	ldr	r2, [pc, #624]	; (1000c0b8 <system_clock_peripheral_enable+0x358>)
1000be46:	68d3      	ldr	r3, [r2, #12]
1000be48:	2180      	movs	r1, #128	; 0x80
1000be4a:	02c9      	lsls	r1, r1, #11
1000be4c:	430b      	orrs	r3, r1
1000be4e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000be50:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
1000be52:	e12d      	b.n	1000c0b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000be54:	4a98      	ldr	r2, [pc, #608]	; (1000c0b8 <system_clock_peripheral_enable+0x358>)
1000be56:	68d3      	ldr	r3, [r2, #12]
1000be58:	2180      	movs	r1, #128	; 0x80
1000be5a:	0309      	lsls	r1, r1, #12
1000be5c:	430b      	orrs	r3, r1
1000be5e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000be60:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
1000be62:	e125      	b.n	1000c0b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000be64:	4a94      	ldr	r2, [pc, #592]	; (1000c0b8 <system_clock_peripheral_enable+0x358>)
1000be66:	68d3      	ldr	r3, [r2, #12]
1000be68:	2180      	movs	r1, #128	; 0x80
1000be6a:	0349      	lsls	r1, r1, #13
1000be6c:	430b      	orrs	r3, r1
1000be6e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000be70:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
1000be72:	e11d      	b.n	1000c0b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000be74:	4a90      	ldr	r2, [pc, #576]	; (1000c0b8 <system_clock_peripheral_enable+0x358>)
1000be76:	68d3      	ldr	r3, [r2, #12]
1000be78:	2180      	movs	r1, #128	; 0x80
1000be7a:	0389      	lsls	r1, r1, #14
1000be7c:	430b      	orrs	r3, r1
1000be7e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000be80:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
1000be82:	e115      	b.n	1000c0b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000be84:	4a8c      	ldr	r2, [pc, #560]	; (1000c0b8 <system_clock_peripheral_enable+0x358>)
1000be86:	68d3      	ldr	r3, [r2, #12]
1000be88:	2180      	movs	r1, #128	; 0x80
1000be8a:	03c9      	lsls	r1, r1, #15
1000be8c:	430b      	orrs	r3, r1
1000be8e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000be90:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
1000be92:	e10d      	b.n	1000c0b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000be94:	4a88      	ldr	r2, [pc, #544]	; (1000c0b8 <system_clock_peripheral_enable+0x358>)
1000be96:	68d3      	ldr	r3, [r2, #12]
1000be98:	2180      	movs	r1, #128	; 0x80
1000be9a:	0409      	lsls	r1, r1, #16
1000be9c:	430b      	orrs	r3, r1
1000be9e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bea0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
1000bea2:	e105      	b.n	1000c0b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bea4:	4a84      	ldr	r2, [pc, #528]	; (1000c0b8 <system_clock_peripheral_enable+0x358>)
1000bea6:	68d3      	ldr	r3, [r2, #12]
1000bea8:	2180      	movs	r1, #128	; 0x80
1000beaa:	0449      	lsls	r1, r1, #17
1000beac:	430b      	orrs	r3, r1
1000beae:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000beb0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
1000beb2:	e0fd      	b.n	1000c0b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000beb4:	4a80      	ldr	r2, [pc, #512]	; (1000c0b8 <system_clock_peripheral_enable+0x358>)
1000beb6:	68d3      	ldr	r3, [r2, #12]
1000beb8:	2180      	movs	r1, #128	; 0x80
1000beba:	0489      	lsls	r1, r1, #18
1000bebc:	430b      	orrs	r3, r1
1000bebe:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bec0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
1000bec2:	e0f5      	b.n	1000c0b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bec4:	4a7c      	ldr	r2, [pc, #496]	; (1000c0b8 <system_clock_peripheral_enable+0x358>)
1000bec6:	68d3      	ldr	r3, [r2, #12]
1000bec8:	2180      	movs	r1, #128	; 0x80
1000beca:	04c9      	lsls	r1, r1, #19
1000becc:	430b      	orrs	r3, r1
1000bece:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bed0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN;
		break;
1000bed2:	e0ed      	b.n	1000c0b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bed4:	4a78      	ldr	r2, [pc, #480]	; (1000c0b8 <system_clock_peripheral_enable+0x358>)
1000bed6:	68d3      	ldr	r3, [r2, #12]
1000bed8:	2180      	movs	r1, #128	; 0x80
1000beda:	0509      	lsls	r1, r1, #20
1000bedc:	430b      	orrs	r3, r1
1000bede:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bee0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN;
		break;
1000bee2:	e0e5      	b.n	1000c0b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bee4:	4a74      	ldr	r2, [pc, #464]	; (1000c0b8 <system_clock_peripheral_enable+0x358>)
1000bee6:	68d3      	ldr	r3, [r2, #12]
1000bee8:	2180      	movs	r1, #128	; 0x80
1000beea:	0549      	lsls	r1, r1, #21
1000beec:	430b      	orrs	r3, r1
1000beee:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bef0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN;
		break;
1000bef2:	e0dd      	b.n	1000c0b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bef4:	4a70      	ldr	r2, [pc, #448]	; (1000c0b8 <system_clock_peripheral_enable+0x358>)
1000bef6:	68d3      	ldr	r3, [r2, #12]
1000bef8:	2180      	movs	r1, #128	; 0x80
1000befa:	0589      	lsls	r1, r1, #22
1000befc:	430b      	orrs	r3, r1
1000befe:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bf00:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN;
		break;
1000bf02:	e0d5      	b.n	1000c0b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bf04:	4a6c      	ldr	r2, [pc, #432]	; (1000c0b8 <system_clock_peripheral_enable+0x358>)
1000bf06:	68d3      	ldr	r3, [r2, #12]
1000bf08:	2180      	movs	r1, #128	; 0x80
1000bf0a:	05c9      	lsls	r1, r1, #23
1000bf0c:	430b      	orrs	r3, r1
1000bf0e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bf10:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
1000bf12:	e0cd      	b.n	1000c0b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bf14:	4a68      	ldr	r2, [pc, #416]	; (1000c0b8 <system_clock_peripheral_enable+0x358>)
1000bf16:	6911      	ldr	r1, [r2, #16]
1000bf18:	2301      	movs	r3, #1
1000bf1a:	430b      	orrs	r3, r1
1000bf1c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bf1e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;
1000bf20:	e0c6      	b.n	1000c0b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bf22:	4a65      	ldr	r2, [pc, #404]	; (1000c0b8 <system_clock_peripheral_enable+0x358>)
1000bf24:	6911      	ldr	r1, [r2, #16]
1000bf26:	2302      	movs	r3, #2
1000bf28:	430b      	orrs	r3, r1
1000bf2a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bf2c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;
1000bf2e:	e0bf      	b.n	1000c0b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bf30:	4a61      	ldr	r2, [pc, #388]	; (1000c0b8 <system_clock_peripheral_enable+0x358>)
1000bf32:	6911      	ldr	r1, [r2, #16]
1000bf34:	2304      	movs	r3, #4
1000bf36:	430b      	orrs	r3, r1
1000bf38:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bf3a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;
1000bf3c:	e0b8      	b.n	1000c0b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bf3e:	4a5e      	ldr	r2, [pc, #376]	; (1000c0b8 <system_clock_peripheral_enable+0x358>)
1000bf40:	6911      	ldr	r1, [r2, #16]
1000bf42:	2308      	movs	r3, #8
1000bf44:	430b      	orrs	r3, r1
1000bf46:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bf48:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;
1000bf4a:	e0b1      	b.n	1000c0b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bf4c:	4a5a      	ldr	r2, [pc, #360]	; (1000c0b8 <system_clock_peripheral_enable+0x358>)
1000bf4e:	6911      	ldr	r1, [r2, #16]
1000bf50:	2310      	movs	r3, #16
1000bf52:	430b      	orrs	r3, r1
1000bf54:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bf56:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;
1000bf58:	e0aa      	b.n	1000c0b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bf5a:	4a57      	ldr	r2, [pc, #348]	; (1000c0b8 <system_clock_peripheral_enable+0x358>)
1000bf5c:	6911      	ldr	r1, [r2, #16]
1000bf5e:	2320      	movs	r3, #32
1000bf60:	430b      	orrs	r3, r1
1000bf62:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bf64:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;
1000bf66:	e0a3      	b.n	1000c0b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bf68:	4a53      	ldr	r2, [pc, #332]	; (1000c0b8 <system_clock_peripheral_enable+0x358>)
1000bf6a:	6911      	ldr	r1, [r2, #16]
1000bf6c:	2340      	movs	r3, #64	; 0x40
1000bf6e:	430b      	orrs	r3, r1
1000bf70:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bf72:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;
1000bf74:	e09c      	b.n	1000c0b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bf76:	4a50      	ldr	r2, [pc, #320]	; (1000c0b8 <system_clock_peripheral_enable+0x358>)
1000bf78:	6911      	ldr	r1, [r2, #16]
1000bf7a:	2380      	movs	r3, #128	; 0x80
1000bf7c:	430b      	orrs	r3, r1
1000bf7e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bf80:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN;
		break;
1000bf82:	e095      	b.n	1000c0b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bf84:	4a4c      	ldr	r2, [pc, #304]	; (1000c0b8 <system_clock_peripheral_enable+0x358>)
1000bf86:	6913      	ldr	r3, [r2, #16]
1000bf88:	2180      	movs	r1, #128	; 0x80
1000bf8a:	0049      	lsls	r1, r1, #1
1000bf8c:	430b      	orrs	r3, r1
1000bf8e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bf90:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN;
		break;
1000bf92:	e08d      	b.n	1000c0b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bf94:	4a48      	ldr	r2, [pc, #288]	; (1000c0b8 <system_clock_peripheral_enable+0x358>)
1000bf96:	6913      	ldr	r3, [r2, #16]
1000bf98:	2180      	movs	r1, #128	; 0x80
1000bf9a:	0089      	lsls	r1, r1, #2
1000bf9c:	430b      	orrs	r3, r1
1000bf9e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bfa0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN;
		break;
1000bfa2:	e085      	b.n	1000c0b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bfa4:	4a44      	ldr	r2, [pc, #272]	; (1000c0b8 <system_clock_peripheral_enable+0x358>)
1000bfa6:	6913      	ldr	r3, [r2, #16]
1000bfa8:	2180      	movs	r1, #128	; 0x80
1000bfaa:	00c9      	lsls	r1, r1, #3
1000bfac:	430b      	orrs	r3, r1
1000bfae:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bfb0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
1000bfb2:	e07d      	b.n	1000c0b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bfb4:	4a40      	ldr	r2, [pc, #256]	; (1000c0b8 <system_clock_peripheral_enable+0x358>)
1000bfb6:	6913      	ldr	r3, [r2, #16]
1000bfb8:	2180      	movs	r1, #128	; 0x80
1000bfba:	0109      	lsls	r1, r1, #4
1000bfbc:	430b      	orrs	r3, r1
1000bfbe:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bfc0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
1000bfc2:	e075      	b.n	1000c0b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bfc4:	4a3c      	ldr	r2, [pc, #240]	; (1000c0b8 <system_clock_peripheral_enable+0x358>)
1000bfc6:	6913      	ldr	r3, [r2, #16]
1000bfc8:	2180      	movs	r1, #128	; 0x80
1000bfca:	0149      	lsls	r1, r1, #5
1000bfcc:	430b      	orrs	r3, r1
1000bfce:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bfd0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
1000bfd2:	e06d      	b.n	1000c0b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bfd4:	4a38      	ldr	r2, [pc, #224]	; (1000c0b8 <system_clock_peripheral_enable+0x358>)
1000bfd6:	6913      	ldr	r3, [r2, #16]
1000bfd8:	2180      	movs	r1, #128	; 0x80
1000bfda:	0189      	lsls	r1, r1, #6
1000bfdc:	430b      	orrs	r3, r1
1000bfde:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bfe0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
1000bfe2:	e065      	b.n	1000c0b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bfe4:	4a34      	ldr	r2, [pc, #208]	; (1000c0b8 <system_clock_peripheral_enable+0x358>)
1000bfe6:	6913      	ldr	r3, [r2, #16]
1000bfe8:	2180      	movs	r1, #128	; 0x80
1000bfea:	01c9      	lsls	r1, r1, #7
1000bfec:	430b      	orrs	r3, r1
1000bfee:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bff0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN;
		break;
1000bff2:	e05d      	b.n	1000c0b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bff4:	4a30      	ldr	r2, [pc, #192]	; (1000c0b8 <system_clock_peripheral_enable+0x358>)
1000bff6:	6913      	ldr	r3, [r2, #16]
1000bff8:	2180      	movs	r1, #128	; 0x80
1000bffa:	0209      	lsls	r1, r1, #8
1000bffc:	430b      	orrs	r3, r1
1000bffe:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c000:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
1000c002:	e055      	b.n	1000c0b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c004:	4a2c      	ldr	r2, [pc, #176]	; (1000c0b8 <system_clock_peripheral_enable+0x358>)
1000c006:	6913      	ldr	r3, [r2, #16]
1000c008:	2180      	movs	r1, #128	; 0x80
1000c00a:	0249      	lsls	r1, r1, #9
1000c00c:	430b      	orrs	r3, r1
1000c00e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c010:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
1000c012:	e04d      	b.n	1000c0b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c014:	4a28      	ldr	r2, [pc, #160]	; (1000c0b8 <system_clock_peripheral_enable+0x358>)
1000c016:	6913      	ldr	r3, [r2, #16]
1000c018:	2180      	movs	r1, #128	; 0x80
1000c01a:	0289      	lsls	r1, r1, #10
1000c01c:	430b      	orrs	r3, r1
1000c01e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c020:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
1000c022:	e045      	b.n	1000c0b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c024:	4a24      	ldr	r2, [pc, #144]	; (1000c0b8 <system_clock_peripheral_enable+0x358>)
1000c026:	6913      	ldr	r3, [r2, #16]
1000c028:	2180      	movs	r1, #128	; 0x80
1000c02a:	02c9      	lsls	r1, r1, #11
1000c02c:	430b      	orrs	r3, r1
1000c02e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c030:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
1000c032:	e03d      	b.n	1000c0b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c034:	4a20      	ldr	r2, [pc, #128]	; (1000c0b8 <system_clock_peripheral_enable+0x358>)
1000c036:	6913      	ldr	r3, [r2, #16]
1000c038:	2180      	movs	r1, #128	; 0x80
1000c03a:	0309      	lsls	r1, r1, #12
1000c03c:	430b      	orrs	r3, r1
1000c03e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c040:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
1000c042:	e035      	b.n	1000c0b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c044:	4a1c      	ldr	r2, [pc, #112]	; (1000c0b8 <system_clock_peripheral_enable+0x358>)
1000c046:	6913      	ldr	r3, [r2, #16]
1000c048:	2180      	movs	r1, #128	; 0x80
1000c04a:	0349      	lsls	r1, r1, #13
1000c04c:	430b      	orrs	r3, r1
1000c04e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c050:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
1000c052:	e02d      	b.n	1000c0b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c054:	4a18      	ldr	r2, [pc, #96]	; (1000c0b8 <system_clock_peripheral_enable+0x358>)
1000c056:	6913      	ldr	r3, [r2, #16]
1000c058:	2180      	movs	r1, #128	; 0x80
1000c05a:	0389      	lsls	r1, r1, #14
1000c05c:	430b      	orrs	r3, r1
1000c05e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c060:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
1000c062:	e025      	b.n	1000c0b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c064:	4a14      	ldr	r2, [pc, #80]	; (1000c0b8 <system_clock_peripheral_enable+0x358>)
1000c066:	6913      	ldr	r3, [r2, #16]
1000c068:	2180      	movs	r1, #128	; 0x80
1000c06a:	03c9      	lsls	r1, r1, #15
1000c06c:	430b      	orrs	r3, r1
1000c06e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c070:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
1000c072:	e01d      	b.n	1000c0b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c074:	4a10      	ldr	r2, [pc, #64]	; (1000c0b8 <system_clock_peripheral_enable+0x358>)
1000c076:	6913      	ldr	r3, [r2, #16]
1000c078:	2180      	movs	r1, #128	; 0x80
1000c07a:	0409      	lsls	r1, r1, #16
1000c07c:	430b      	orrs	r3, r1
1000c07e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c080:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
1000c082:	e015      	b.n	1000c0b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000c084:	4a0c      	ldr	r2, [pc, #48]	; (1000c0b8 <system_clock_peripheral_enable+0x358>)
1000c086:	7d11      	ldrb	r1, [r2, #20]
1000c088:	2301      	movs	r3, #1
1000c08a:	430b      	orrs	r3, r1
1000c08c:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c08e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;
1000c090:	e00e      	b.n	1000c0b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000c092:	4a09      	ldr	r2, [pc, #36]	; (1000c0b8 <system_clock_peripheral_enable+0x358>)
1000c094:	7d11      	ldrb	r1, [r2, #20]
1000c096:	2302      	movs	r3, #2
1000c098:	430b      	orrs	r3, r1
1000c09a:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c09c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;
1000c09e:	e007      	b.n	1000c0b0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000c0a0:	4a05      	ldr	r2, [pc, #20]	; (1000c0b8 <system_clock_peripheral_enable+0x358>)
1000c0a2:	7d11      	ldrb	r1, [r2, #20]
1000c0a4:	2304      	movs	r3, #4
1000c0a6:	430b      	orrs	r3, r1
1000c0a8:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c0aa:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_PERIPH_REGS_CLK_EN;
		break;
1000c0ac:	e000      	b.n	1000c0b0 <system_clock_peripheral_enable+0x350>

		default:
			return STATUS_ERR_INVALID_ARG;
1000c0ae:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000c0b0:	bd00      	pop	{pc}
1000c0b2:	46c0      	nop			; (mov r8, r8)
1000c0b4:	10017b30 	.word	0x10017b30
1000c0b8:	4000b000 	.word	0x4000b000

1000c0bc <system_clock_peripheral_disable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_disable(enum system_peripheral peripheral)
{
1000c0bc:	b500      	push	{lr}
	switch (peripheral) {
1000c0be:	2835      	cmp	r0, #53	; 0x35
1000c0c0:	d900      	bls.n	1000c0c4 <system_clock_peripheral_disable+0x8>
1000c0c2:	e17d      	b.n	1000c3c0 <system_clock_peripheral_disable+0x304>
1000c0c4:	0080      	lsls	r0, r0, #2
1000c0c6:	4bbf      	ldr	r3, [pc, #764]	; (1000c3c4 <system_clock_peripheral_disable+0x308>)
1000c0c8:	581b      	ldr	r3, [r3, r0]
1000c0ca:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c0cc:	4abe      	ldr	r2, [pc, #760]	; (1000c3c8 <system_clock_peripheral_disable+0x30c>)
1000c0ce:	68d3      	ldr	r3, [r2, #12]
1000c0d0:	2102      	movs	r1, #2
1000c0d2:	438b      	bics	r3, r1
1000c0d4:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c0d6:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;
1000c0d8:	e173      	b.n	1000c3c2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c0da:	4abb      	ldr	r2, [pc, #748]	; (1000c3c8 <system_clock_peripheral_disable+0x30c>)
1000c0dc:	68d3      	ldr	r3, [r2, #12]
1000c0de:	2104      	movs	r1, #4
1000c0e0:	438b      	bics	r3, r1
1000c0e2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c0e4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;
1000c0e6:	e16c      	b.n	1000c3c2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c0e8:	4ab7      	ldr	r2, [pc, #732]	; (1000c3c8 <system_clock_peripheral_disable+0x30c>)
1000c0ea:	68d3      	ldr	r3, [r2, #12]
1000c0ec:	2108      	movs	r1, #8
1000c0ee:	438b      	bics	r3, r1
1000c0f0:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c0f2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;
1000c0f4:	e165      	b.n	1000c3c2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c0f6:	4ab4      	ldr	r2, [pc, #720]	; (1000c3c8 <system_clock_peripheral_disable+0x30c>)
1000c0f8:	68d3      	ldr	r3, [r2, #12]
1000c0fa:	2110      	movs	r1, #16
1000c0fc:	438b      	bics	r3, r1
1000c0fe:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c100:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;
1000c102:	e15e      	b.n	1000c3c2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c104:	4ab0      	ldr	r2, [pc, #704]	; (1000c3c8 <system_clock_peripheral_disable+0x30c>)
1000c106:	68d3      	ldr	r3, [r2, #12]
1000c108:	2120      	movs	r1, #32
1000c10a:	438b      	bics	r3, r1
1000c10c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c10e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;
1000c110:	e157      	b.n	1000c3c2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c112:	4aad      	ldr	r2, [pc, #692]	; (1000c3c8 <system_clock_peripheral_disable+0x30c>)
1000c114:	68d3      	ldr	r3, [r2, #12]
1000c116:	2180      	movs	r1, #128	; 0x80
1000c118:	438b      	bics	r3, r1
1000c11a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c11c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
1000c11e:	e150      	b.n	1000c3c2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c120:	4aa9      	ldr	r2, [pc, #676]	; (1000c3c8 <system_clock_peripheral_disable+0x30c>)
1000c122:	68d1      	ldr	r1, [r2, #12]
1000c124:	4ba9      	ldr	r3, [pc, #676]	; (1000c3cc <system_clock_peripheral_disable+0x310>)
1000c126:	400b      	ands	r3, r1
1000c128:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c12a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN;
		break;
1000c12c:	e149      	b.n	1000c3c2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c12e:	4aa6      	ldr	r2, [pc, #664]	; (1000c3c8 <system_clock_peripheral_disable+0x30c>)
1000c130:	68d1      	ldr	r1, [r2, #12]
1000c132:	4ba7      	ldr	r3, [pc, #668]	; (1000c3d0 <system_clock_peripheral_disable+0x314>)
1000c134:	400b      	ands	r3, r1
1000c136:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c138:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN;
		break;
1000c13a:	e142      	b.n	1000c3c2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c13c:	4aa2      	ldr	r2, [pc, #648]	; (1000c3c8 <system_clock_peripheral_disable+0x30c>)
1000c13e:	68d1      	ldr	r1, [r2, #12]
1000c140:	4ba4      	ldr	r3, [pc, #656]	; (1000c3d4 <system_clock_peripheral_disable+0x318>)
1000c142:	400b      	ands	r3, r1
1000c144:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c146:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN;
		break;
1000c148:	e13b      	b.n	1000c3c2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c14a:	4a9f      	ldr	r2, [pc, #636]	; (1000c3c8 <system_clock_peripheral_disable+0x30c>)
1000c14c:	68d1      	ldr	r1, [r2, #12]
1000c14e:	4ba2      	ldr	r3, [pc, #648]	; (1000c3d8 <system_clock_peripheral_disable+0x31c>)
1000c150:	400b      	ands	r3, r1
1000c152:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c154:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN;
		break;
1000c156:	e134      	b.n	1000c3c2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c158:	4a9b      	ldr	r2, [pc, #620]	; (1000c3c8 <system_clock_peripheral_disable+0x30c>)
1000c15a:	68d1      	ldr	r1, [r2, #12]
1000c15c:	4b9f      	ldr	r3, [pc, #636]	; (1000c3dc <system_clock_peripheral_disable+0x320>)
1000c15e:	400b      	ands	r3, r1
1000c160:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c162:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN;
		break;
1000c164:	e12d      	b.n	1000c3c2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c166:	4a98      	ldr	r2, [pc, #608]	; (1000c3c8 <system_clock_peripheral_disable+0x30c>)
1000c168:	68d1      	ldr	r1, [r2, #12]
1000c16a:	4b9d      	ldr	r3, [pc, #628]	; (1000c3e0 <system_clock_peripheral_disable+0x324>)
1000c16c:	400b      	ands	r3, r1
1000c16e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c170:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN;
		break;
1000c172:	e126      	b.n	1000c3c2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c174:	4a94      	ldr	r2, [pc, #592]	; (1000c3c8 <system_clock_peripheral_disable+0x30c>)
1000c176:	68d1      	ldr	r1, [r2, #12]
1000c178:	4b9a      	ldr	r3, [pc, #616]	; (1000c3e4 <system_clock_peripheral_disable+0x328>)
1000c17a:	400b      	ands	r3, r1
1000c17c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c17e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN;
		break;
1000c180:	e11f      	b.n	1000c3c2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c182:	4a91      	ldr	r2, [pc, #580]	; (1000c3c8 <system_clock_peripheral_disable+0x30c>)
1000c184:	68d1      	ldr	r1, [r2, #12]
1000c186:	4b98      	ldr	r3, [pc, #608]	; (1000c3e8 <system_clock_peripheral_disable+0x32c>)
1000c188:	400b      	ands	r3, r1
1000c18a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c18c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
1000c18e:	e118      	b.n	1000c3c2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c190:	4a8d      	ldr	r2, [pc, #564]	; (1000c3c8 <system_clock_peripheral_disable+0x30c>)
1000c192:	68d1      	ldr	r1, [r2, #12]
1000c194:	4b95      	ldr	r3, [pc, #596]	; (1000c3ec <system_clock_peripheral_disable+0x330>)
1000c196:	400b      	ands	r3, r1
1000c198:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c19a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
1000c19c:	e111      	b.n	1000c3c2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c19e:	4a8a      	ldr	r2, [pc, #552]	; (1000c3c8 <system_clock_peripheral_disable+0x30c>)
1000c1a0:	68d1      	ldr	r1, [r2, #12]
1000c1a2:	4b93      	ldr	r3, [pc, #588]	; (1000c3f0 <system_clock_peripheral_disable+0x334>)
1000c1a4:	400b      	ands	r3, r1
1000c1a6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c1a8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
1000c1aa:	e10a      	b.n	1000c3c2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c1ac:	4a86      	ldr	r2, [pc, #536]	; (1000c3c8 <system_clock_peripheral_disable+0x30c>)
1000c1ae:	68d1      	ldr	r1, [r2, #12]
1000c1b0:	4b90      	ldr	r3, [pc, #576]	; (1000c3f4 <system_clock_peripheral_disable+0x338>)
1000c1b2:	400b      	ands	r3, r1
1000c1b4:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c1b6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
1000c1b8:	e103      	b.n	1000c3c2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c1ba:	4a83      	ldr	r2, [pc, #524]	; (1000c3c8 <system_clock_peripheral_disable+0x30c>)
1000c1bc:	68d1      	ldr	r1, [r2, #12]
1000c1be:	4b8e      	ldr	r3, [pc, #568]	; (1000c3f8 <system_clock_peripheral_disable+0x33c>)
1000c1c0:	400b      	ands	r3, r1
1000c1c2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c1c4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
1000c1c6:	e0fc      	b.n	1000c3c2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c1c8:	4a7f      	ldr	r2, [pc, #508]	; (1000c3c8 <system_clock_peripheral_disable+0x30c>)
1000c1ca:	68d1      	ldr	r1, [r2, #12]
1000c1cc:	4b8b      	ldr	r3, [pc, #556]	; (1000c3fc <system_clock_peripheral_disable+0x340>)
1000c1ce:	400b      	ands	r3, r1
1000c1d0:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c1d2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
1000c1d4:	e0f5      	b.n	1000c3c2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c1d6:	4a7c      	ldr	r2, [pc, #496]	; (1000c3c8 <system_clock_peripheral_disable+0x30c>)
1000c1d8:	68d1      	ldr	r1, [r2, #12]
1000c1da:	4b89      	ldr	r3, [pc, #548]	; (1000c400 <system_clock_peripheral_disable+0x344>)
1000c1dc:	400b      	ands	r3, r1
1000c1de:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c1e0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
1000c1e2:	e0ee      	b.n	1000c3c2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c1e4:	4a78      	ldr	r2, [pc, #480]	; (1000c3c8 <system_clock_peripheral_disable+0x30c>)
1000c1e6:	68d1      	ldr	r1, [r2, #12]
1000c1e8:	4b86      	ldr	r3, [pc, #536]	; (1000c404 <system_clock_peripheral_disable+0x348>)
1000c1ea:	400b      	ands	r3, r1
1000c1ec:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c1ee:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
1000c1f0:	e0e7      	b.n	1000c3c2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c1f2:	4a75      	ldr	r2, [pc, #468]	; (1000c3c8 <system_clock_peripheral_disable+0x30c>)
1000c1f4:	68d1      	ldr	r1, [r2, #12]
1000c1f6:	4b84      	ldr	r3, [pc, #528]	; (1000c408 <system_clock_peripheral_disable+0x34c>)
1000c1f8:	400b      	ands	r3, r1
1000c1fa:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c1fc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
1000c1fe:	e0e0      	b.n	1000c3c2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c200:	4a71      	ldr	r2, [pc, #452]	; (1000c3c8 <system_clock_peripheral_disable+0x30c>)
1000c202:	68d1      	ldr	r1, [r2, #12]
1000c204:	4b81      	ldr	r3, [pc, #516]	; (1000c40c <system_clock_peripheral_disable+0x350>)
1000c206:	400b      	ands	r3, r1
1000c208:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c20a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN;
		break;
1000c20c:	e0d9      	b.n	1000c3c2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c20e:	4a6e      	ldr	r2, [pc, #440]	; (1000c3c8 <system_clock_peripheral_disable+0x30c>)
1000c210:	68d1      	ldr	r1, [r2, #12]
1000c212:	4b7f      	ldr	r3, [pc, #508]	; (1000c410 <system_clock_peripheral_disable+0x354>)
1000c214:	400b      	ands	r3, r1
1000c216:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c218:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN;
		break;
1000c21a:	e0d2      	b.n	1000c3c2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c21c:	4a6a      	ldr	r2, [pc, #424]	; (1000c3c8 <system_clock_peripheral_disable+0x30c>)
1000c21e:	68d1      	ldr	r1, [r2, #12]
1000c220:	4b7c      	ldr	r3, [pc, #496]	; (1000c414 <system_clock_peripheral_disable+0x358>)
1000c222:	400b      	ands	r3, r1
1000c224:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c226:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN;
		break;
1000c228:	e0cb      	b.n	1000c3c2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c22a:	4a67      	ldr	r2, [pc, #412]	; (1000c3c8 <system_clock_peripheral_disable+0x30c>)
1000c22c:	68d1      	ldr	r1, [r2, #12]
1000c22e:	4b7a      	ldr	r3, [pc, #488]	; (1000c418 <system_clock_peripheral_disable+0x35c>)
1000c230:	400b      	ands	r3, r1
1000c232:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c234:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN;
		break;
1000c236:	e0c4      	b.n	1000c3c2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c238:	4a63      	ldr	r2, [pc, #396]	; (1000c3c8 <system_clock_peripheral_disable+0x30c>)
1000c23a:	68d1      	ldr	r1, [r2, #12]
1000c23c:	4b77      	ldr	r3, [pc, #476]	; (1000c41c <system_clock_peripheral_disable+0x360>)
1000c23e:	400b      	ands	r3, r1
1000c240:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c242:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
1000c244:	e0bd      	b.n	1000c3c2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c246:	4a60      	ldr	r2, [pc, #384]	; (1000c3c8 <system_clock_peripheral_disable+0x30c>)
1000c248:	6913      	ldr	r3, [r2, #16]
1000c24a:	2101      	movs	r1, #1
1000c24c:	438b      	bics	r3, r1
1000c24e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c250:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;
1000c252:	e0b6      	b.n	1000c3c2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c254:	4a5c      	ldr	r2, [pc, #368]	; (1000c3c8 <system_clock_peripheral_disable+0x30c>)
1000c256:	6913      	ldr	r3, [r2, #16]
1000c258:	2102      	movs	r1, #2
1000c25a:	438b      	bics	r3, r1
1000c25c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c25e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;
1000c260:	e0af      	b.n	1000c3c2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c262:	4a59      	ldr	r2, [pc, #356]	; (1000c3c8 <system_clock_peripheral_disable+0x30c>)
1000c264:	6913      	ldr	r3, [r2, #16]
1000c266:	2104      	movs	r1, #4
1000c268:	438b      	bics	r3, r1
1000c26a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c26c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;
1000c26e:	e0a8      	b.n	1000c3c2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c270:	4a55      	ldr	r2, [pc, #340]	; (1000c3c8 <system_clock_peripheral_disable+0x30c>)
1000c272:	6913      	ldr	r3, [r2, #16]
1000c274:	2108      	movs	r1, #8
1000c276:	438b      	bics	r3, r1
1000c278:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c27a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;
1000c27c:	e0a1      	b.n	1000c3c2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c27e:	4a52      	ldr	r2, [pc, #328]	; (1000c3c8 <system_clock_peripheral_disable+0x30c>)
1000c280:	6913      	ldr	r3, [r2, #16]
1000c282:	2110      	movs	r1, #16
1000c284:	438b      	bics	r3, r1
1000c286:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c288:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;
1000c28a:	e09a      	b.n	1000c3c2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c28c:	4a4e      	ldr	r2, [pc, #312]	; (1000c3c8 <system_clock_peripheral_disable+0x30c>)
1000c28e:	6913      	ldr	r3, [r2, #16]
1000c290:	2120      	movs	r1, #32
1000c292:	438b      	bics	r3, r1
1000c294:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c296:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;
1000c298:	e093      	b.n	1000c3c2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c29a:	4a4b      	ldr	r2, [pc, #300]	; (1000c3c8 <system_clock_peripheral_disable+0x30c>)
1000c29c:	6913      	ldr	r3, [r2, #16]
1000c29e:	2140      	movs	r1, #64	; 0x40
1000c2a0:	438b      	bics	r3, r1
1000c2a2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c2a4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;
1000c2a6:	e08c      	b.n	1000c3c2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c2a8:	4a47      	ldr	r2, [pc, #284]	; (1000c3c8 <system_clock_peripheral_disable+0x30c>)
1000c2aa:	6913      	ldr	r3, [r2, #16]
1000c2ac:	2180      	movs	r1, #128	; 0x80
1000c2ae:	438b      	bics	r3, r1
1000c2b0:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c2b2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN;
		break;
1000c2b4:	e085      	b.n	1000c3c2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c2b6:	4a44      	ldr	r2, [pc, #272]	; (1000c3c8 <system_clock_peripheral_disable+0x30c>)
1000c2b8:	6911      	ldr	r1, [r2, #16]
1000c2ba:	4b44      	ldr	r3, [pc, #272]	; (1000c3cc <system_clock_peripheral_disable+0x310>)
1000c2bc:	400b      	ands	r3, r1
1000c2be:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c2c0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN;
		break;
1000c2c2:	e07e      	b.n	1000c3c2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c2c4:	4a40      	ldr	r2, [pc, #256]	; (1000c3c8 <system_clock_peripheral_disable+0x30c>)
1000c2c6:	6911      	ldr	r1, [r2, #16]
1000c2c8:	4b55      	ldr	r3, [pc, #340]	; (1000c420 <system_clock_peripheral_disable+0x364>)
1000c2ca:	400b      	ands	r3, r1
1000c2cc:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c2ce:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN;
		break;
1000c2d0:	e077      	b.n	1000c3c2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c2d2:	4a3d      	ldr	r2, [pc, #244]	; (1000c3c8 <system_clock_peripheral_disable+0x30c>)
1000c2d4:	6911      	ldr	r1, [r2, #16]
1000c2d6:	4b53      	ldr	r3, [pc, #332]	; (1000c424 <system_clock_peripheral_disable+0x368>)
1000c2d8:	400b      	ands	r3, r1
1000c2da:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c2dc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
1000c2de:	e070      	b.n	1000c3c2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c2e0:	4a39      	ldr	r2, [pc, #228]	; (1000c3c8 <system_clock_peripheral_disable+0x30c>)
1000c2e2:	6911      	ldr	r1, [r2, #16]
1000c2e4:	4b3a      	ldr	r3, [pc, #232]	; (1000c3d0 <system_clock_peripheral_disable+0x314>)
1000c2e6:	400b      	ands	r3, r1
1000c2e8:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c2ea:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
1000c2ec:	e069      	b.n	1000c3c2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c2ee:	4a36      	ldr	r2, [pc, #216]	; (1000c3c8 <system_clock_peripheral_disable+0x30c>)
1000c2f0:	6911      	ldr	r1, [r2, #16]
1000c2f2:	4b38      	ldr	r3, [pc, #224]	; (1000c3d4 <system_clock_peripheral_disable+0x318>)
1000c2f4:	400b      	ands	r3, r1
1000c2f6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c2f8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
1000c2fa:	e062      	b.n	1000c3c2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c2fc:	4a32      	ldr	r2, [pc, #200]	; (1000c3c8 <system_clock_peripheral_disable+0x30c>)
1000c2fe:	6911      	ldr	r1, [r2, #16]
1000c300:	4b35      	ldr	r3, [pc, #212]	; (1000c3d8 <system_clock_peripheral_disable+0x31c>)
1000c302:	400b      	ands	r3, r1
1000c304:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c306:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
1000c308:	e05b      	b.n	1000c3c2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c30a:	4a2f      	ldr	r2, [pc, #188]	; (1000c3c8 <system_clock_peripheral_disable+0x30c>)
1000c30c:	6911      	ldr	r1, [r2, #16]
1000c30e:	4b33      	ldr	r3, [pc, #204]	; (1000c3dc <system_clock_peripheral_disable+0x320>)
1000c310:	400b      	ands	r3, r1
1000c312:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c314:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN;
		break;
1000c316:	e054      	b.n	1000c3c2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c318:	4a2b      	ldr	r2, [pc, #172]	; (1000c3c8 <system_clock_peripheral_disable+0x30c>)
1000c31a:	6911      	ldr	r1, [r2, #16]
1000c31c:	4b30      	ldr	r3, [pc, #192]	; (1000c3e0 <system_clock_peripheral_disable+0x324>)
1000c31e:	400b      	ands	r3, r1
1000c320:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c322:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
1000c324:	e04d      	b.n	1000c3c2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c326:	4a28      	ldr	r2, [pc, #160]	; (1000c3c8 <system_clock_peripheral_disable+0x30c>)
1000c328:	6911      	ldr	r1, [r2, #16]
1000c32a:	4b2e      	ldr	r3, [pc, #184]	; (1000c3e4 <system_clock_peripheral_disable+0x328>)
1000c32c:	400b      	ands	r3, r1
1000c32e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c330:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
1000c332:	e046      	b.n	1000c3c2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c334:	4a24      	ldr	r2, [pc, #144]	; (1000c3c8 <system_clock_peripheral_disable+0x30c>)
1000c336:	6911      	ldr	r1, [r2, #16]
1000c338:	4b2b      	ldr	r3, [pc, #172]	; (1000c3e8 <system_clock_peripheral_disable+0x32c>)
1000c33a:	400b      	ands	r3, r1
1000c33c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c33e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
1000c340:	e03f      	b.n	1000c3c2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c342:	4a21      	ldr	r2, [pc, #132]	; (1000c3c8 <system_clock_peripheral_disable+0x30c>)
1000c344:	6911      	ldr	r1, [r2, #16]
1000c346:	4b29      	ldr	r3, [pc, #164]	; (1000c3ec <system_clock_peripheral_disable+0x330>)
1000c348:	400b      	ands	r3, r1
1000c34a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c34c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
1000c34e:	e038      	b.n	1000c3c2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c350:	4a1d      	ldr	r2, [pc, #116]	; (1000c3c8 <system_clock_peripheral_disable+0x30c>)
1000c352:	6911      	ldr	r1, [r2, #16]
1000c354:	4b26      	ldr	r3, [pc, #152]	; (1000c3f0 <system_clock_peripheral_disable+0x334>)
1000c356:	400b      	ands	r3, r1
1000c358:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c35a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
1000c35c:	e031      	b.n	1000c3c2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c35e:	4a1a      	ldr	r2, [pc, #104]	; (1000c3c8 <system_clock_peripheral_disable+0x30c>)
1000c360:	6911      	ldr	r1, [r2, #16]
1000c362:	4b24      	ldr	r3, [pc, #144]	; (1000c3f4 <system_clock_peripheral_disable+0x338>)
1000c364:	400b      	ands	r3, r1
1000c366:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c368:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
1000c36a:	e02a      	b.n	1000c3c2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c36c:	4a16      	ldr	r2, [pc, #88]	; (1000c3c8 <system_clock_peripheral_disable+0x30c>)
1000c36e:	6911      	ldr	r1, [r2, #16]
1000c370:	4b21      	ldr	r3, [pc, #132]	; (1000c3f8 <system_clock_peripheral_disable+0x33c>)
1000c372:	400b      	ands	r3, r1
1000c374:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c376:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
1000c378:	e023      	b.n	1000c3c2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c37a:	4a13      	ldr	r2, [pc, #76]	; (1000c3c8 <system_clock_peripheral_disable+0x30c>)
1000c37c:	6911      	ldr	r1, [r2, #16]
1000c37e:	4b1f      	ldr	r3, [pc, #124]	; (1000c3fc <system_clock_peripheral_disable+0x340>)
1000c380:	400b      	ands	r3, r1
1000c382:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c384:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
1000c386:	e01c      	b.n	1000c3c2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c388:	4a0f      	ldr	r2, [pc, #60]	; (1000c3c8 <system_clock_peripheral_disable+0x30c>)
1000c38a:	6911      	ldr	r1, [r2, #16]
1000c38c:	4b1c      	ldr	r3, [pc, #112]	; (1000c400 <system_clock_peripheral_disable+0x344>)
1000c38e:	400b      	ands	r3, r1
1000c390:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c392:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
1000c394:	e015      	b.n	1000c3c2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
1000c396:	4a0c      	ldr	r2, [pc, #48]	; (1000c3c8 <system_clock_peripheral_disable+0x30c>)
1000c398:	7d13      	ldrb	r3, [r2, #20]
1000c39a:	2101      	movs	r1, #1
1000c39c:	438b      	bics	r3, r1
1000c39e:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c3a0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;
1000c3a2:	e00e      	b.n	1000c3c2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
1000c3a4:	4a08      	ldr	r2, [pc, #32]	; (1000c3c8 <system_clock_peripheral_disable+0x30c>)
1000c3a6:	7d13      	ldrb	r3, [r2, #20]
1000c3a8:	2102      	movs	r1, #2
1000c3aa:	438b      	bics	r3, r1
1000c3ac:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c3ae:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;
1000c3b0:	e007      	b.n	1000c3c2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
1000c3b2:	4a05      	ldr	r2, [pc, #20]	; (1000c3c8 <system_clock_peripheral_disable+0x30c>)
1000c3b4:	7d13      	ldrb	r3, [r2, #20]
1000c3b6:	2104      	movs	r1, #4
1000c3b8:	438b      	bics	r3, r1
1000c3ba:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c3bc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_PERIPH_REGS_CLK_EN;
		break;
1000c3be:	e000      	b.n	1000c3c2 <system_clock_peripheral_disable+0x306>

		default:
			return STATUS_ERR_INVALID_ARG;
1000c3c0:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000c3c2:	bd00      	pop	{pc}
1000c3c4:	10017c08 	.word	0x10017c08
1000c3c8:	4000b000 	.word	0x4000b000
1000c3cc:	fffffeff 	.word	0xfffffeff
1000c3d0:	fffff7ff 	.word	0xfffff7ff
1000c3d4:	ffffefff 	.word	0xffffefff
1000c3d8:	ffffdfff 	.word	0xffffdfff
1000c3dc:	ffffbfff 	.word	0xffffbfff
1000c3e0:	ffff7fff 	.word	0xffff7fff
1000c3e4:	fffeffff 	.word	0xfffeffff
1000c3e8:	fffdffff 	.word	0xfffdffff
1000c3ec:	fffbffff 	.word	0xfffbffff
1000c3f0:	fff7ffff 	.word	0xfff7ffff
1000c3f4:	ffefffff 	.word	0xffefffff
1000c3f8:	ffdfffff 	.word	0xffdfffff
1000c3fc:	ffbfffff 	.word	0xffbfffff
1000c400:	ff7fffff 	.word	0xff7fffff
1000c404:	feffffff 	.word	0xfeffffff
1000c408:	fdffffff 	.word	0xfdffffff
1000c40c:	fbffffff 	.word	0xfbffffff
1000c410:	f7ffffff 	.word	0xf7ffffff
1000c414:	efffffff 	.word	0xefffffff
1000c418:	dfffffff 	.word	0xdfffffff
1000c41c:	bfffffff 	.word	0xbfffffff
1000c420:	fffffdff 	.word	0xfffffdff
1000c424:	fffffbff 	.word	0xfffffbff

1000c428 <system_peripheral_reset>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_peripheral_reset(enum system_peripheral peripheral)
{
1000c428:	b500      	push	{lr}
	switch (peripheral) {
1000c42a:	2843      	cmp	r0, #67	; 0x43
1000c42c:	d900      	bls.n	1000c430 <system_peripheral_reset+0x8>
1000c42e:	e223      	b.n	1000c878 <system_peripheral_reset+0x450>
1000c430:	0080      	lsls	r0, r0, #2
1000c432:	4be0      	ldr	r3, [pc, #896]	; (1000c7b4 <system_peripheral_reset+0x38c>)
1000c434:	581b      	ldr	r3, [r3, r0]
1000c436:	469f      	mov	pc, r3
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c438:	4bdf      	ldr	r3, [pc, #892]	; (1000c7b8 <system_peripheral_reset+0x390>)
1000c43a:	6859      	ldr	r1, [r3, #4]
1000c43c:	2202      	movs	r2, #2
1000c43e:	4391      	bics	r1, r2
1000c440:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c442:	6859      	ldr	r1, [r3, #4]
1000c444:	430a      	orrs	r2, r1
1000c446:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c448:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
		break;
1000c44a:	e216      	b.n	1000c87a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c44c:	4bda      	ldr	r3, [pc, #872]	; (1000c7b8 <system_peripheral_reset+0x390>)
1000c44e:	6859      	ldr	r1, [r3, #4]
1000c450:	2204      	movs	r2, #4
1000c452:	4391      	bics	r1, r2
1000c454:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c456:	6859      	ldr	r1, [r3, #4]
1000c458:	430a      	orrs	r2, r1
1000c45a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c45c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
		break;
1000c45e:	e20c      	b.n	1000c87a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c460:	4bd5      	ldr	r3, [pc, #852]	; (1000c7b8 <system_peripheral_reset+0x390>)
1000c462:	6859      	ldr	r1, [r3, #4]
1000c464:	2208      	movs	r2, #8
1000c466:	4391      	bics	r1, r2
1000c468:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c46a:	6859      	ldr	r1, [r3, #4]
1000c46c:	430a      	orrs	r2, r1
1000c46e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c470:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
		break;
1000c472:	e202      	b.n	1000c87a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c474:	4bd0      	ldr	r3, [pc, #832]	; (1000c7b8 <system_peripheral_reset+0x390>)
1000c476:	6859      	ldr	r1, [r3, #4]
1000c478:	2210      	movs	r2, #16
1000c47a:	4391      	bics	r1, r2
1000c47c:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c47e:	6859      	ldr	r1, [r3, #4]
1000c480:	430a      	orrs	r2, r1
1000c482:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c484:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
		break;
1000c486:	e1f8      	b.n	1000c87a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c488:	4bcb      	ldr	r3, [pc, #812]	; (1000c7b8 <system_peripheral_reset+0x390>)
1000c48a:	6859      	ldr	r1, [r3, #4]
1000c48c:	2220      	movs	r2, #32
1000c48e:	4391      	bics	r1, r2
1000c490:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c492:	6859      	ldr	r1, [r3, #4]
1000c494:	430a      	orrs	r2, r1
1000c496:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c498:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
		break;
1000c49a:	e1ee      	b.n	1000c87a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c49c:	4bc6      	ldr	r3, [pc, #792]	; (1000c7b8 <system_peripheral_reset+0x390>)
1000c49e:	6859      	ldr	r1, [r3, #4]
1000c4a0:	2240      	movs	r2, #64	; 0x40
1000c4a2:	4391      	bics	r1, r2
1000c4a4:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c4a6:	6859      	ldr	r1, [r3, #4]
1000c4a8:	430a      	orrs	r2, r1
1000c4aa:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c4ac:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
		break;
1000c4ae:	e1e4      	b.n	1000c87a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c4b0:	4bc1      	ldr	r3, [pc, #772]	; (1000c7b8 <system_peripheral_reset+0x390>)
1000c4b2:	6859      	ldr	r1, [r3, #4]
1000c4b4:	2280      	movs	r2, #128	; 0x80
1000c4b6:	4391      	bics	r1, r2
1000c4b8:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c4ba:	6859      	ldr	r1, [r3, #4]
1000c4bc:	430a      	orrs	r2, r1
1000c4be:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c4c0:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
		break;
1000c4c2:	e1da      	b.n	1000c87a <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c4c4:	4bbc      	ldr	r3, [pc, #752]	; (1000c7b8 <system_peripheral_reset+0x390>)
1000c4c6:	6859      	ldr	r1, [r3, #4]
1000c4c8:	4abc      	ldr	r2, [pc, #752]	; (1000c7bc <system_peripheral_reset+0x394>)
1000c4ca:	400a      	ands	r2, r1
1000c4cc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c4ce:	685a      	ldr	r2, [r3, #4]
1000c4d0:	2180      	movs	r1, #128	; 0x80
1000c4d2:	0049      	lsls	r1, r1, #1
1000c4d4:	430a      	orrs	r2, r1
1000c4d6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c4d8:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
		break;
1000c4da:	e1ce      	b.n	1000c87a <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c4dc:	4bb6      	ldr	r3, [pc, #728]	; (1000c7b8 <system_peripheral_reset+0x390>)
1000c4de:	6859      	ldr	r1, [r3, #4]
1000c4e0:	4ab7      	ldr	r2, [pc, #732]	; (1000c7c0 <system_peripheral_reset+0x398>)
1000c4e2:	400a      	ands	r2, r1
1000c4e4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c4e6:	685a      	ldr	r2, [r3, #4]
1000c4e8:	2180      	movs	r1, #128	; 0x80
1000c4ea:	0089      	lsls	r1, r1, #2
1000c4ec:	430a      	orrs	r2, r1
1000c4ee:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c4f0:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
		break;
1000c4f2:	e1c2      	b.n	1000c87a <system_peripheral_reset+0x452>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c4f4:	4bb0      	ldr	r3, [pc, #704]	; (1000c7b8 <system_peripheral_reset+0x390>)
1000c4f6:	6859      	ldr	r1, [r3, #4]
1000c4f8:	4ab2      	ldr	r2, [pc, #712]	; (1000c7c4 <system_peripheral_reset+0x39c>)
1000c4fa:	400a      	ands	r2, r1
1000c4fc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c4fe:	685a      	ldr	r2, [r3, #4]
1000c500:	2180      	movs	r1, #128	; 0x80
1000c502:	00c9      	lsls	r1, r1, #3
1000c504:	430a      	orrs	r2, r1
1000c506:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c508:	2000      	movs	r0, #0
		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
		break;
1000c50a:	e1b6      	b.n	1000c87a <system_peripheral_reset+0x452>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c50c:	4baa      	ldr	r3, [pc, #680]	; (1000c7b8 <system_peripheral_reset+0x390>)
1000c50e:	6859      	ldr	r1, [r3, #4]
1000c510:	4aad      	ldr	r2, [pc, #692]	; (1000c7c8 <system_peripheral_reset+0x3a0>)
1000c512:	400a      	ands	r2, r1
1000c514:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c516:	685a      	ldr	r2, [r3, #4]
1000c518:	2180      	movs	r1, #128	; 0x80
1000c51a:	0109      	lsls	r1, r1, #4
1000c51c:	430a      	orrs	r2, r1
1000c51e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c520:	2000      	movs	r0, #0
		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
		break;
1000c522:	e1aa      	b.n	1000c87a <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c524:	4ba4      	ldr	r3, [pc, #656]	; (1000c7b8 <system_peripheral_reset+0x390>)
1000c526:	6859      	ldr	r1, [r3, #4]
1000c528:	4aa8      	ldr	r2, [pc, #672]	; (1000c7cc <system_peripheral_reset+0x3a4>)
1000c52a:	400a      	ands	r2, r1
1000c52c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c52e:	685a      	ldr	r2, [r3, #4]
1000c530:	2180      	movs	r1, #128	; 0x80
1000c532:	0149      	lsls	r1, r1, #5
1000c534:	430a      	orrs	r2, r1
1000c536:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c538:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
		break;
1000c53a:	e19e      	b.n	1000c87a <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c53c:	4b9e      	ldr	r3, [pc, #632]	; (1000c7b8 <system_peripheral_reset+0x390>)
1000c53e:	6859      	ldr	r1, [r3, #4]
1000c540:	4aa3      	ldr	r2, [pc, #652]	; (1000c7d0 <system_peripheral_reset+0x3a8>)
1000c542:	400a      	ands	r2, r1
1000c544:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c546:	685a      	ldr	r2, [r3, #4]
1000c548:	2180      	movs	r1, #128	; 0x80
1000c54a:	0189      	lsls	r1, r1, #6
1000c54c:	430a      	orrs	r2, r1
1000c54e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c550:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
		break;
1000c552:	e192      	b.n	1000c87a <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c554:	4b98      	ldr	r3, [pc, #608]	; (1000c7b8 <system_peripheral_reset+0x390>)
1000c556:	6859      	ldr	r1, [r3, #4]
1000c558:	4a9e      	ldr	r2, [pc, #632]	; (1000c7d4 <system_peripheral_reset+0x3ac>)
1000c55a:	400a      	ands	r2, r1
1000c55c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c55e:	685a      	ldr	r2, [r3, #4]
1000c560:	2180      	movs	r1, #128	; 0x80
1000c562:	01c9      	lsls	r1, r1, #7
1000c564:	430a      	orrs	r2, r1
1000c566:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c568:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
		break;
1000c56a:	e186      	b.n	1000c87a <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c56c:	4b92      	ldr	r3, [pc, #584]	; (1000c7b8 <system_peripheral_reset+0x390>)
1000c56e:	6859      	ldr	r1, [r3, #4]
1000c570:	4a99      	ldr	r2, [pc, #612]	; (1000c7d8 <system_peripheral_reset+0x3b0>)
1000c572:	400a      	ands	r2, r1
1000c574:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c576:	685a      	ldr	r2, [r3, #4]
1000c578:	2180      	movs	r1, #128	; 0x80
1000c57a:	0209      	lsls	r1, r1, #8
1000c57c:	430a      	orrs	r2, r1
1000c57e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c580:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
		break;
1000c582:	e17a      	b.n	1000c87a <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c584:	4b8c      	ldr	r3, [pc, #560]	; (1000c7b8 <system_peripheral_reset+0x390>)
1000c586:	6859      	ldr	r1, [r3, #4]
1000c588:	4a94      	ldr	r2, [pc, #592]	; (1000c7dc <system_peripheral_reset+0x3b4>)
1000c58a:	400a      	ands	r2, r1
1000c58c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c58e:	685a      	ldr	r2, [r3, #4]
1000c590:	2180      	movs	r1, #128	; 0x80
1000c592:	0249      	lsls	r1, r1, #9
1000c594:	430a      	orrs	r2, r1
1000c596:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c598:	2000      	movs	r0, #0
		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
		break;
1000c59a:	e16e      	b.n	1000c87a <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c59c:	4b86      	ldr	r3, [pc, #536]	; (1000c7b8 <system_peripheral_reset+0x390>)
1000c59e:	6859      	ldr	r1, [r3, #4]
1000c5a0:	4a8f      	ldr	r2, [pc, #572]	; (1000c7e0 <system_peripheral_reset+0x3b8>)
1000c5a2:	400a      	ands	r2, r1
1000c5a4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c5a6:	685a      	ldr	r2, [r3, #4]
1000c5a8:	2180      	movs	r1, #128	; 0x80
1000c5aa:	0289      	lsls	r1, r1, #10
1000c5ac:	430a      	orrs	r2, r1
1000c5ae:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c5b0:	2000      	movs	r0, #0
		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
		break;
1000c5b2:	e162      	b.n	1000c87a <system_peripheral_reset+0x452>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c5b4:	4b80      	ldr	r3, [pc, #512]	; (1000c7b8 <system_peripheral_reset+0x390>)
1000c5b6:	6859      	ldr	r1, [r3, #4]
1000c5b8:	4a8a      	ldr	r2, [pc, #552]	; (1000c7e4 <system_peripheral_reset+0x3bc>)
1000c5ba:	400a      	ands	r2, r1
1000c5bc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c5be:	685a      	ldr	r2, [r3, #4]
1000c5c0:	2180      	movs	r1, #128	; 0x80
1000c5c2:	02c9      	lsls	r1, r1, #11
1000c5c4:	430a      	orrs	r2, r1
1000c5c6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c5c8:	2000      	movs	r0, #0
		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
		break;
1000c5ca:	e156      	b.n	1000c87a <system_peripheral_reset+0x452>

		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c5cc:	4b7a      	ldr	r3, [pc, #488]	; (1000c7b8 <system_peripheral_reset+0x390>)
1000c5ce:	6859      	ldr	r1, [r3, #4]
1000c5d0:	4a85      	ldr	r2, [pc, #532]	; (1000c7e8 <system_peripheral_reset+0x3c0>)
1000c5d2:	400a      	ands	r2, r1
1000c5d4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c5d6:	685a      	ldr	r2, [r3, #4]
1000c5d8:	2180      	movs	r1, #128	; 0x80
1000c5da:	0309      	lsls	r1, r1, #12
1000c5dc:	430a      	orrs	r2, r1
1000c5de:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c5e0:	2000      	movs	r0, #0
		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
		break;
1000c5e2:	e14a      	b.n	1000c87a <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c5e4:	4b74      	ldr	r3, [pc, #464]	; (1000c7b8 <system_peripheral_reset+0x390>)
1000c5e6:	6859      	ldr	r1, [r3, #4]
1000c5e8:	4a80      	ldr	r2, [pc, #512]	; (1000c7ec <system_peripheral_reset+0x3c4>)
1000c5ea:	400a      	ands	r2, r1
1000c5ec:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c5ee:	685a      	ldr	r2, [r3, #4]
1000c5f0:	2180      	movs	r1, #128	; 0x80
1000c5f2:	0349      	lsls	r1, r1, #13
1000c5f4:	430a      	orrs	r2, r1
1000c5f6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c5f8:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
		break;
1000c5fa:	e13e      	b.n	1000c87a <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c5fc:	4b6e      	ldr	r3, [pc, #440]	; (1000c7b8 <system_peripheral_reset+0x390>)
1000c5fe:	6859      	ldr	r1, [r3, #4]
1000c600:	4a7b      	ldr	r2, [pc, #492]	; (1000c7f0 <system_peripheral_reset+0x3c8>)
1000c602:	400a      	ands	r2, r1
1000c604:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c606:	685a      	ldr	r2, [r3, #4]
1000c608:	2180      	movs	r1, #128	; 0x80
1000c60a:	0389      	lsls	r1, r1, #14
1000c60c:	430a      	orrs	r2, r1
1000c60e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c610:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
		break;
1000c612:	e132      	b.n	1000c87a <system_peripheral_reset+0x452>

		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c614:	4b68      	ldr	r3, [pc, #416]	; (1000c7b8 <system_peripheral_reset+0x390>)
1000c616:	6859      	ldr	r1, [r3, #4]
1000c618:	4a76      	ldr	r2, [pc, #472]	; (1000c7f4 <system_peripheral_reset+0x3cc>)
1000c61a:	400a      	ands	r2, r1
1000c61c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c61e:	685a      	ldr	r2, [r3, #4]
1000c620:	2180      	movs	r1, #128	; 0x80
1000c622:	03c9      	lsls	r1, r1, #15
1000c624:	430a      	orrs	r2, r1
1000c626:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c628:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
		break;
1000c62a:	e126      	b.n	1000c87a <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c62c:	4b62      	ldr	r3, [pc, #392]	; (1000c7b8 <system_peripheral_reset+0x390>)
1000c62e:	6859      	ldr	r1, [r3, #4]
1000c630:	4a71      	ldr	r2, [pc, #452]	; (1000c7f8 <system_peripheral_reset+0x3d0>)
1000c632:	400a      	ands	r2, r1
1000c634:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c636:	685a      	ldr	r2, [r3, #4]
1000c638:	2180      	movs	r1, #128	; 0x80
1000c63a:	0409      	lsls	r1, r1, #16
1000c63c:	430a      	orrs	r2, r1
1000c63e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c640:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
		break;
1000c642:	e11a      	b.n	1000c87a <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c644:	4b5c      	ldr	r3, [pc, #368]	; (1000c7b8 <system_peripheral_reset+0x390>)
1000c646:	6859      	ldr	r1, [r3, #4]
1000c648:	4a6c      	ldr	r2, [pc, #432]	; (1000c7fc <system_peripheral_reset+0x3d4>)
1000c64a:	400a      	ands	r2, r1
1000c64c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c64e:	685a      	ldr	r2, [r3, #4]
1000c650:	2180      	movs	r1, #128	; 0x80
1000c652:	0449      	lsls	r1, r1, #17
1000c654:	430a      	orrs	r2, r1
1000c656:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c658:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
		break;
1000c65a:	e10e      	b.n	1000c87a <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c65c:	4b56      	ldr	r3, [pc, #344]	; (1000c7b8 <system_peripheral_reset+0x390>)
1000c65e:	6859      	ldr	r1, [r3, #4]
1000c660:	4a67      	ldr	r2, [pc, #412]	; (1000c800 <system_peripheral_reset+0x3d8>)
1000c662:	400a      	ands	r2, r1
1000c664:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c666:	685a      	ldr	r2, [r3, #4]
1000c668:	2180      	movs	r1, #128	; 0x80
1000c66a:	0489      	lsls	r1, r1, #18
1000c66c:	430a      	orrs	r2, r1
1000c66e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c670:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
		break;
1000c672:	e102      	b.n	1000c87a <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c674:	4b50      	ldr	r3, [pc, #320]	; (1000c7b8 <system_peripheral_reset+0x390>)
1000c676:	6859      	ldr	r1, [r3, #4]
1000c678:	4a62      	ldr	r2, [pc, #392]	; (1000c804 <system_peripheral_reset+0x3dc>)
1000c67a:	400a      	ands	r2, r1
1000c67c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c67e:	685a      	ldr	r2, [r3, #4]
1000c680:	2180      	movs	r1, #128	; 0x80
1000c682:	04c9      	lsls	r1, r1, #19
1000c684:	430a      	orrs	r2, r1
1000c686:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c688:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
		break;
1000c68a:	e0f6      	b.n	1000c87a <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c68c:	4b4a      	ldr	r3, [pc, #296]	; (1000c7b8 <system_peripheral_reset+0x390>)
1000c68e:	6859      	ldr	r1, [r3, #4]
1000c690:	4a5d      	ldr	r2, [pc, #372]	; (1000c808 <system_peripheral_reset+0x3e0>)
1000c692:	400a      	ands	r2, r1
1000c694:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c696:	685a      	ldr	r2, [r3, #4]
1000c698:	2180      	movs	r1, #128	; 0x80
1000c69a:	0509      	lsls	r1, r1, #20
1000c69c:	430a      	orrs	r2, r1
1000c69e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c6a0:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
		break;
1000c6a2:	e0ea      	b.n	1000c87a <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c6a4:	4b44      	ldr	r3, [pc, #272]	; (1000c7b8 <system_peripheral_reset+0x390>)
1000c6a6:	6859      	ldr	r1, [r3, #4]
1000c6a8:	4a58      	ldr	r2, [pc, #352]	; (1000c80c <system_peripheral_reset+0x3e4>)
1000c6aa:	400a      	ands	r2, r1
1000c6ac:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c6ae:	685a      	ldr	r2, [r3, #4]
1000c6b0:	2180      	movs	r1, #128	; 0x80
1000c6b2:	0549      	lsls	r1, r1, #21
1000c6b4:	430a      	orrs	r2, r1
1000c6b6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c6b8:	2000      	movs	r0, #0
		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
		break;
1000c6ba:	e0de      	b.n	1000c87a <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c6bc:	4b3e      	ldr	r3, [pc, #248]	; (1000c7b8 <system_peripheral_reset+0x390>)
1000c6be:	6859      	ldr	r1, [r3, #4]
1000c6c0:	4a53      	ldr	r2, [pc, #332]	; (1000c810 <system_peripheral_reset+0x3e8>)
1000c6c2:	400a      	ands	r2, r1
1000c6c4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c6c6:	685a      	ldr	r2, [r3, #4]
1000c6c8:	2180      	movs	r1, #128	; 0x80
1000c6ca:	0589      	lsls	r1, r1, #22
1000c6cc:	430a      	orrs	r2, r1
1000c6ce:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c6d0:	2000      	movs	r0, #0
		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
		break;
1000c6d2:	e0d2      	b.n	1000c87a <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c6d4:	4b38      	ldr	r3, [pc, #224]	; (1000c7b8 <system_peripheral_reset+0x390>)
1000c6d6:	6859      	ldr	r1, [r3, #4]
1000c6d8:	4a4e      	ldr	r2, [pc, #312]	; (1000c814 <system_peripheral_reset+0x3ec>)
1000c6da:	400a      	ands	r2, r1
1000c6dc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c6de:	685a      	ldr	r2, [r3, #4]
1000c6e0:	2180      	movs	r1, #128	; 0x80
1000c6e2:	05c9      	lsls	r1, r1, #23
1000c6e4:	430a      	orrs	r2, r1
1000c6e6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c6e8:	2000      	movs	r0, #0
		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
		break;
1000c6ea:	e0c6      	b.n	1000c87a <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c6ec:	4a32      	ldr	r2, [pc, #200]	; (1000c7b8 <system_peripheral_reset+0x390>)
1000c6ee:	6853      	ldr	r3, [r2, #4]
1000c6f0:	005b      	lsls	r3, r3, #1
1000c6f2:	085b      	lsrs	r3, r3, #1
1000c6f4:	6053      	str	r3, [r2, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c6f6:	6853      	ldr	r3, [r2, #4]
1000c6f8:	2180      	movs	r1, #128	; 0x80
1000c6fa:	0609      	lsls	r1, r1, #24
1000c6fc:	430b      	orrs	r3, r1
1000c6fe:	6053      	str	r3, [r2, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c700:	2000      	movs	r0, #0
		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
		break;
1000c702:	e0ba      	b.n	1000c87a <system_peripheral_reset+0x452>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c704:	4b2c      	ldr	r3, [pc, #176]	; (1000c7b8 <system_peripheral_reset+0x390>)
1000c706:	891a      	ldrh	r2, [r3, #8]
1000c708:	2101      	movs	r1, #1
1000c70a:	438a      	bics	r2, r1
1000c70c:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c70e:	8919      	ldrh	r1, [r3, #8]
1000c710:	2201      	movs	r2, #1
1000c712:	430a      	orrs	r2, r1
1000c714:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c716:	2000      	movs	r0, #0
		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
		break;
1000c718:	e0af      	b.n	1000c87a <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c71a:	4b27      	ldr	r3, [pc, #156]	; (1000c7b8 <system_peripheral_reset+0x390>)
1000c71c:	891a      	ldrh	r2, [r3, #8]
1000c71e:	2102      	movs	r1, #2
1000c720:	438a      	bics	r2, r1
1000c722:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c724:	8919      	ldrh	r1, [r3, #8]
1000c726:	2202      	movs	r2, #2
1000c728:	430a      	orrs	r2, r1
1000c72a:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c72c:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
		break;
1000c72e:	e0a4      	b.n	1000c87a <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c730:	4b21      	ldr	r3, [pc, #132]	; (1000c7b8 <system_peripheral_reset+0x390>)
1000c732:	891a      	ldrh	r2, [r3, #8]
1000c734:	2104      	movs	r1, #4
1000c736:	438a      	bics	r2, r1
1000c738:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c73a:	8919      	ldrh	r1, [r3, #8]
1000c73c:	2204      	movs	r2, #4
1000c73e:	430a      	orrs	r2, r1
1000c740:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c742:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
		break;
1000c744:	e099      	b.n	1000c87a <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c746:	4b1c      	ldr	r3, [pc, #112]	; (1000c7b8 <system_peripheral_reset+0x390>)
1000c748:	891a      	ldrh	r2, [r3, #8]
1000c74a:	2108      	movs	r1, #8
1000c74c:	438a      	bics	r2, r1
1000c74e:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c750:	8919      	ldrh	r1, [r3, #8]
1000c752:	2208      	movs	r2, #8
1000c754:	430a      	orrs	r2, r1
1000c756:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c758:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
		break;
1000c75a:	e08e      	b.n	1000c87a <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c75c:	4b16      	ldr	r3, [pc, #88]	; (1000c7b8 <system_peripheral_reset+0x390>)
1000c75e:	891a      	ldrh	r2, [r3, #8]
1000c760:	2110      	movs	r1, #16
1000c762:	438a      	bics	r2, r1
1000c764:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c766:	8919      	ldrh	r1, [r3, #8]
1000c768:	2210      	movs	r2, #16
1000c76a:	430a      	orrs	r2, r1
1000c76c:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c76e:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
		break;
1000c770:	e083      	b.n	1000c87a <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c772:	4b11      	ldr	r3, [pc, #68]	; (1000c7b8 <system_peripheral_reset+0x390>)
1000c774:	891a      	ldrh	r2, [r3, #8]
1000c776:	2120      	movs	r1, #32
1000c778:	438a      	bics	r2, r1
1000c77a:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c77c:	8919      	ldrh	r1, [r3, #8]
1000c77e:	2220      	movs	r2, #32
1000c780:	430a      	orrs	r2, r1
1000c782:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c784:	2000      	movs	r0, #0
		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
		break;
1000c786:	e078      	b.n	1000c87a <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c788:	4b0b      	ldr	r3, [pc, #44]	; (1000c7b8 <system_peripheral_reset+0x390>)
1000c78a:	891a      	ldrh	r2, [r3, #8]
1000c78c:	2140      	movs	r1, #64	; 0x40
1000c78e:	438a      	bics	r2, r1
1000c790:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c792:	8919      	ldrh	r1, [r3, #8]
1000c794:	2240      	movs	r2, #64	; 0x40
1000c796:	430a      	orrs	r2, r1
1000c798:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c79a:	2000      	movs	r0, #0
		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
		break;
1000c79c:	e06d      	b.n	1000c87a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c79e:	4b06      	ldr	r3, [pc, #24]	; (1000c7b8 <system_peripheral_reset+0x390>)
1000c7a0:	891a      	ldrh	r2, [r3, #8]
1000c7a2:	2180      	movs	r1, #128	; 0x80
1000c7a4:	438a      	bics	r2, r1
1000c7a6:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c7a8:	8919      	ldrh	r1, [r3, #8]
1000c7aa:	2280      	movs	r2, #128	; 0x80
1000c7ac:	430a      	orrs	r2, r1
1000c7ae:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c7b0:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
		break;
1000c7b2:	e062      	b.n	1000c87a <system_peripheral_reset+0x452>
1000c7b4:	10017ce0 	.word	0x10017ce0
1000c7b8:	4000b000 	.word	0x4000b000
1000c7bc:	fffffeff 	.word	0xfffffeff
1000c7c0:	fffffdff 	.word	0xfffffdff
1000c7c4:	fffffbff 	.word	0xfffffbff
1000c7c8:	fffff7ff 	.word	0xfffff7ff
1000c7cc:	ffffefff 	.word	0xffffefff
1000c7d0:	ffffdfff 	.word	0xffffdfff
1000c7d4:	ffffbfff 	.word	0xffffbfff
1000c7d8:	ffff7fff 	.word	0xffff7fff
1000c7dc:	fffeffff 	.word	0xfffeffff
1000c7e0:	fffdffff 	.word	0xfffdffff
1000c7e4:	fffbffff 	.word	0xfffbffff
1000c7e8:	fff7ffff 	.word	0xfff7ffff
1000c7ec:	ffefffff 	.word	0xffefffff
1000c7f0:	ffdfffff 	.word	0xffdfffff
1000c7f4:	ffbfffff 	.word	0xffbfffff
1000c7f8:	ff7fffff 	.word	0xff7fffff
1000c7fc:	feffffff 	.word	0xfeffffff
1000c800:	fdffffff 	.word	0xfdffffff
1000c804:	fbffffff 	.word	0xfbffffff
1000c808:	f7ffffff 	.word	0xf7ffffff
1000c80c:	efffffff 	.word	0xefffffff
1000c810:	dfffffff 	.word	0xdfffffff
1000c814:	bfffffff 	.word	0xbfffffff

		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c818:	4b18      	ldr	r3, [pc, #96]	; (1000c87c <system_peripheral_reset+0x454>)
1000c81a:	8919      	ldrh	r1, [r3, #8]
1000c81c:	4a18      	ldr	r2, [pc, #96]	; (1000c880 <system_peripheral_reset+0x458>)
1000c81e:	400a      	ands	r2, r1
1000c820:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c822:	8919      	ldrh	r1, [r3, #8]
1000c824:	2280      	movs	r2, #128	; 0x80
1000c826:	0052      	lsls	r2, r2, #1
1000c828:	430a      	orrs	r2, r1
1000c82a:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c82c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
		break;
1000c82e:	e024      	b.n	1000c87a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c830:	4b12      	ldr	r3, [pc, #72]	; (1000c87c <system_peripheral_reset+0x454>)
1000c832:	8919      	ldrh	r1, [r3, #8]
1000c834:	4a13      	ldr	r2, [pc, #76]	; (1000c884 <system_peripheral_reset+0x45c>)
1000c836:	400a      	ands	r2, r1
1000c838:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c83a:	8919      	ldrh	r1, [r3, #8]
1000c83c:	2280      	movs	r2, #128	; 0x80
1000c83e:	0092      	lsls	r2, r2, #2
1000c840:	430a      	orrs	r2, r1
1000c842:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c844:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
		break;
1000c846:	e018      	b.n	1000c87a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c848:	4b0c      	ldr	r3, [pc, #48]	; (1000c87c <system_peripheral_reset+0x454>)
1000c84a:	8919      	ldrh	r1, [r3, #8]
1000c84c:	4a0e      	ldr	r2, [pc, #56]	; (1000c888 <system_peripheral_reset+0x460>)
1000c84e:	400a      	ands	r2, r1
1000c850:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c852:	8919      	ldrh	r1, [r3, #8]
1000c854:	2280      	movs	r2, #128	; 0x80
1000c856:	00d2      	lsls	r2, r2, #3
1000c858:	430a      	orrs	r2, r1
1000c85a:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c85c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
		break;
1000c85e:	e00c      	b.n	1000c87a <system_peripheral_reset+0x452>

		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c860:	4b06      	ldr	r3, [pc, #24]	; (1000c87c <system_peripheral_reset+0x454>)
1000c862:	8919      	ldrh	r1, [r3, #8]
1000c864:	4a09      	ldr	r2, [pc, #36]	; (1000c88c <system_peripheral_reset+0x464>)
1000c866:	400a      	ands	r2, r1
1000c868:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c86a:	8919      	ldrh	r1, [r3, #8]
1000c86c:	2280      	movs	r2, #128	; 0x80
1000c86e:	0112      	lsls	r2, r2, #4
1000c870:	430a      	orrs	r2, r1
1000c872:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c874:	2000      	movs	r0, #0
		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
		break;
1000c876:	e000      	b.n	1000c87a <system_peripheral_reset+0x452>

		default:
			return STATUS_ERR_INVALID_ARG;
1000c878:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000c87a:	bd00      	pop	{pc}
1000c87c:	4000b000 	.word	0x4000b000
1000c880:	fffffeff 	.word	0xfffffeff
1000c884:	fffffdff 	.word	0xfffffdff
1000c888:	fffffbff 	.word	0xfffffbff
1000c88c:	fffff7ff 	.word	0xfffff7ff

1000c890 <system_register_isr>:
void system_register_isr(enum ram_isr_table_index isr_index,
		uint32_t isr_address)
{
	uint32_t *temp;
	temp = (uint32_t *)(isr_index * 4 + ISR_RAM_MAP_START_ADDRESS);
	*temp = isr_address;
1000c890:	2380      	movs	r3, #128	; 0x80
1000c892:	04db      	lsls	r3, r3, #19
1000c894:	469c      	mov	ip, r3
1000c896:	4460      	add	r0, ip
1000c898:	0080      	lsls	r0, r0, #2
1000c89a:	6001      	str	r1, [r0, #0]
}
1000c89c:	4770      	bx	lr
1000c89e:	46c0      	nop			; (mov r8, r8)

1000c8a0 <uart_rx0_isr_handler>:
	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
}

static void uart_rx0_isr_handler(void)
{
1000c8a0:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
1000c8a2:	4b20      	ldr	r3, [pc, #128]	; (1000c924 <uart_rx0_isr_handler+0x84>)
1000c8a4:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000c8a6:	6823      	ldr	r3, [r4, #0]
1000c8a8:	7d1d      	ldrb	r5, [r3, #20]
1000c8aa:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000c8ac:	066a      	lsls	r2, r5, #25
1000c8ae:	d513      	bpl.n	1000c8d8 <uart_rx0_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000c8b0:	211e      	movs	r1, #30
1000c8b2:	2222      	movs	r2, #34	; 0x22
1000c8b4:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000c8b6:	7e1a      	ldrb	r2, [r3, #24]
1000c8b8:	3123      	adds	r1, #35	; 0x23
1000c8ba:	438a      	bics	r2, r1
1000c8bc:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000c8be:	2321      	movs	r3, #33	; 0x21
1000c8c0:	5ce3      	ldrb	r3, [r4, r3]
1000c8c2:	071b      	lsls	r3, r3, #28
1000c8c4:	d506      	bpl.n	1000c8d4 <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000c8c6:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000c8c8:	5ce3      	ldrb	r3, [r4, r3]
1000c8ca:	071b      	lsls	r3, r3, #28
1000c8cc:	d502      	bpl.n	1000c8d4 <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000c8ce:	0020      	movs	r0, r4
1000c8d0:	6923      	ldr	r3, [r4, #16]
1000c8d2:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000c8d4:	6823      	ldr	r3, [r4, #0]
1000c8d6:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000c8d8:	07eb      	lsls	r3, r5, #31
1000c8da:	d522      	bpl.n	1000c922 <uart_rx0_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000c8dc:	6823      	ldr	r3, [r4, #0]
1000c8de:	7c1b      	ldrb	r3, [r3, #16]
1000c8e0:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000c8e2:	6962      	ldr	r2, [r4, #20]
1000c8e4:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000c8e6:	6963      	ldr	r3, [r4, #20]
1000c8e8:	3301      	adds	r3, #1
1000c8ea:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000c8ec:	8ba3      	ldrh	r3, [r4, #28]
1000c8ee:	3b01      	subs	r3, #1
1000c8f0:	b29b      	uxth	r3, r3
1000c8f2:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
1000c8f4:	8ba3      	ldrh	r3, [r4, #28]
1000c8f6:	b29b      	uxth	r3, r3
1000c8f8:	2b00      	cmp	r3, #0
1000c8fa:	d112      	bne.n	1000c922 <uart_rx0_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000c8fc:	3321      	adds	r3, #33	; 0x21
1000c8fe:	5ce3      	ldrb	r3, [r4, r3]
1000c900:	075b      	lsls	r3, r3, #29
1000c902:	d50e      	bpl.n	1000c922 <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000c904:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000c906:	5ce3      	ldrb	r3, [r4, r3]
1000c908:	075b      	lsls	r3, r3, #29
1000c90a:	d50a      	bpl.n	1000c922 <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000c90c:	2200      	movs	r2, #0
1000c90e:	2322      	movs	r3, #34	; 0x22
1000c910:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000c912:	6822      	ldr	r2, [r4, #0]
1000c914:	7e13      	ldrb	r3, [r2, #24]
1000c916:	2101      	movs	r1, #1
1000c918:	438b      	bics	r3, r1
1000c91a:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000c91c:	68e3      	ldr	r3, [r4, #12]
1000c91e:	0020      	movs	r0, r4
1000c920:	4798      	blx	r3
			}
		}
	}
}
1000c922:	bd70      	pop	{r4, r5, r6, pc}
1000c924:	1001a72c 	.word	0x1001a72c

1000c928 <uart_tx0_isr_handler>:

static void uart_tx0_isr_handler(void)
{
1000c928:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
1000c92a:	4b21      	ldr	r3, [pc, #132]	; (1000c9b0 <uart_tx0_isr_handler+0x88>)
1000c92c:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000c92e:	6823      	ldr	r3, [r4, #0]
1000c930:	791d      	ldrb	r5, [r3, #4]
1000c932:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000c934:	07ea      	lsls	r2, r5, #31
1000c936:	d517      	bpl.n	1000c968 <uart_tx0_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000c938:	69a2      	ldr	r2, [r4, #24]
1000c93a:	7811      	ldrb	r1, [r2, #0]
1000c93c:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000c93e:	3201      	adds	r2, #1
1000c940:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000c942:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000c944:	8be3      	ldrh	r3, [r4, #30]
1000c946:	3b01      	subs	r3, #1
1000c948:	b29b      	uxth	r3, r3
1000c94a:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[0];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
1000c94c:	8be3      	ldrh	r3, [r4, #30]
1000c94e:	b29b      	uxth	r3, r3
1000c950:	2b00      	cmp	r3, #0
1000c952:	d109      	bne.n	1000c968 <uart_tx0_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
1000c954:	6822      	ldr	r2, [r4, #0]
1000c956:	7a13      	ldrb	r3, [r2, #8]
1000c958:	2101      	movs	r1, #1
1000c95a:	438b      	bics	r3, r1
1000c95c:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000c95e:	6822      	ldr	r2, [r4, #0]
1000c960:	7a11      	ldrb	r1, [r2, #8]
1000c962:	2310      	movs	r3, #16
1000c964:	430b      	orrs	r3, r1
1000c966:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000c968:	06eb      	lsls	r3, r5, #27
1000c96a:	d512      	bpl.n	1000c992 <uart_tx0_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000c96c:	2321      	movs	r3, #33	; 0x21
1000c96e:	5ce3      	ldrb	r3, [r4, r3]
1000c970:	07db      	lsls	r3, r3, #31
1000c972:	d50e      	bpl.n	1000c992 <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000c974:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000c976:	5ce3      	ldrb	r3, [r4, r3]
1000c978:	07db      	lsls	r3, r3, #31
1000c97a:	d50a      	bpl.n	1000c992 <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000c97c:	2200      	movs	r2, #0
1000c97e:	2322      	movs	r3, #34	; 0x22
1000c980:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000c982:	6822      	ldr	r2, [r4, #0]
1000c984:	7a13      	ldrb	r3, [r2, #8]
1000c986:	2110      	movs	r1, #16
1000c988:	438b      	bics	r3, r1
1000c98a:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000c98c:	0020      	movs	r0, r4
1000c98e:	6863      	ldr	r3, [r4, #4]
1000c990:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000c992:	06ab      	lsls	r3, r5, #26
1000c994:	d50a      	bpl.n	1000c9ac <uart_tx0_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000c996:	2321      	movs	r3, #33	; 0x21
1000c998:	5ce3      	ldrb	r3, [r4, r3]
1000c99a:	079b      	lsls	r3, r3, #30
1000c99c:	d506      	bpl.n	1000c9ac <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
1000c99e:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000c9a0:	5ce3      	ldrb	r3, [r4, r3]
1000c9a2:	079b      	lsls	r3, r3, #30
1000c9a4:	d502      	bpl.n	1000c9ac <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000c9a6:	68a3      	ldr	r3, [r4, #8]
1000c9a8:	0020      	movs	r0, r4
1000c9aa:	4798      	blx	r3
		}

	}
}
1000c9ac:	bd70      	pop	{r4, r5, r6, pc}
1000c9ae:	46c0      	nop			; (mov r8, r8)
1000c9b0:	1001a72c 	.word	0x1001a72c

1000c9b4 <uart_rx1_isr_handler>:

static void uart_rx1_isr_handler(void)
{
1000c9b4:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
1000c9b6:	4b20      	ldr	r3, [pc, #128]	; (1000ca38 <uart_rx1_isr_handler+0x84>)
1000c9b8:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000c9ba:	6823      	ldr	r3, [r4, #0]
1000c9bc:	7d1d      	ldrb	r5, [r3, #20]
1000c9be:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000c9c0:	066a      	lsls	r2, r5, #25
1000c9c2:	d513      	bpl.n	1000c9ec <uart_rx1_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000c9c4:	211e      	movs	r1, #30
1000c9c6:	2222      	movs	r2, #34	; 0x22
1000c9c8:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000c9ca:	7e1a      	ldrb	r2, [r3, #24]
1000c9cc:	3123      	adds	r1, #35	; 0x23
1000c9ce:	438a      	bics	r2, r1
1000c9d0:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000c9d2:	2321      	movs	r3, #33	; 0x21
1000c9d4:	5ce3      	ldrb	r3, [r4, r3]
1000c9d6:	071b      	lsls	r3, r3, #28
1000c9d8:	d506      	bpl.n	1000c9e8 <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000c9da:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000c9dc:	5ce3      	ldrb	r3, [r4, r3]
1000c9de:	071b      	lsls	r3, r3, #28
1000c9e0:	d502      	bpl.n	1000c9e8 <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000c9e2:	0020      	movs	r0, r4
1000c9e4:	6923      	ldr	r3, [r4, #16]
1000c9e6:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000c9e8:	6823      	ldr	r3, [r4, #0]
1000c9ea:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000c9ec:	07eb      	lsls	r3, r5, #31
1000c9ee:	d522      	bpl.n	1000ca36 <uart_rx1_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000c9f0:	6823      	ldr	r3, [r4, #0]
1000c9f2:	7c1b      	ldrb	r3, [r3, #16]
1000c9f4:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000c9f6:	6962      	ldr	r2, [r4, #20]
1000c9f8:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000c9fa:	6963      	ldr	r3, [r4, #20]
1000c9fc:	3301      	adds	r3, #1
1000c9fe:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000ca00:	8ba3      	ldrh	r3, [r4, #28]
1000ca02:	3b01      	subs	r3, #1
1000ca04:	b29b      	uxth	r3, r3
1000ca06:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
1000ca08:	8ba3      	ldrh	r3, [r4, #28]
1000ca0a:	b29b      	uxth	r3, r3
1000ca0c:	2b00      	cmp	r3, #0
1000ca0e:	d112      	bne.n	1000ca36 <uart_rx1_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000ca10:	3321      	adds	r3, #33	; 0x21
1000ca12:	5ce3      	ldrb	r3, [r4, r3]
1000ca14:	075b      	lsls	r3, r3, #29
1000ca16:	d50e      	bpl.n	1000ca36 <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000ca18:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000ca1a:	5ce3      	ldrb	r3, [r4, r3]
1000ca1c:	075b      	lsls	r3, r3, #29
1000ca1e:	d50a      	bpl.n	1000ca36 <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000ca20:	2200      	movs	r2, #0
1000ca22:	2322      	movs	r3, #34	; 0x22
1000ca24:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000ca26:	6822      	ldr	r2, [r4, #0]
1000ca28:	7e13      	ldrb	r3, [r2, #24]
1000ca2a:	2101      	movs	r1, #1
1000ca2c:	438b      	bics	r3, r1
1000ca2e:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000ca30:	68e3      	ldr	r3, [r4, #12]
1000ca32:	0020      	movs	r0, r4
1000ca34:	4798      	blx	r3
			}
		}
	}
}
1000ca36:	bd70      	pop	{r4, r5, r6, pc}
1000ca38:	1001a72c 	.word	0x1001a72c

1000ca3c <uart_tx1_isr_handler>:

static void uart_tx1_isr_handler(void)
{
1000ca3c:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
1000ca3e:	4b21      	ldr	r3, [pc, #132]	; (1000cac4 <uart_tx1_isr_handler+0x88>)
1000ca40:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000ca42:	6823      	ldr	r3, [r4, #0]
1000ca44:	791d      	ldrb	r5, [r3, #4]
1000ca46:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000ca48:	07ea      	lsls	r2, r5, #31
1000ca4a:	d517      	bpl.n	1000ca7c <uart_tx1_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000ca4c:	69a2      	ldr	r2, [r4, #24]
1000ca4e:	7811      	ldrb	r1, [r2, #0]
1000ca50:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000ca52:	3201      	adds	r2, #1
1000ca54:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000ca56:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000ca58:	8be3      	ldrh	r3, [r4, #30]
1000ca5a:	3b01      	subs	r3, #1
1000ca5c:	b29b      	uxth	r3, r3
1000ca5e:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[1];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
1000ca60:	8be3      	ldrh	r3, [r4, #30]
1000ca62:	b29b      	uxth	r3, r3
1000ca64:	2b00      	cmp	r3, #0
1000ca66:	d109      	bne.n	1000ca7c <uart_tx1_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
1000ca68:	6822      	ldr	r2, [r4, #0]
1000ca6a:	7a13      	ldrb	r3, [r2, #8]
1000ca6c:	2101      	movs	r1, #1
1000ca6e:	438b      	bics	r3, r1
1000ca70:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000ca72:	6822      	ldr	r2, [r4, #0]
1000ca74:	7a11      	ldrb	r1, [r2, #8]
1000ca76:	2310      	movs	r3, #16
1000ca78:	430b      	orrs	r3, r1
1000ca7a:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000ca7c:	06eb      	lsls	r3, r5, #27
1000ca7e:	d512      	bpl.n	1000caa6 <uart_tx1_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000ca80:	2321      	movs	r3, #33	; 0x21
1000ca82:	5ce3      	ldrb	r3, [r4, r3]
1000ca84:	07db      	lsls	r3, r3, #31
1000ca86:	d50e      	bpl.n	1000caa6 <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000ca88:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000ca8a:	5ce3      	ldrb	r3, [r4, r3]
1000ca8c:	07db      	lsls	r3, r3, #31
1000ca8e:	d50a      	bpl.n	1000caa6 <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000ca90:	2200      	movs	r2, #0
1000ca92:	2322      	movs	r3, #34	; 0x22
1000ca94:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000ca96:	6822      	ldr	r2, [r4, #0]
1000ca98:	7a13      	ldrb	r3, [r2, #8]
1000ca9a:	2110      	movs	r1, #16
1000ca9c:	438b      	bics	r3, r1
1000ca9e:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000caa0:	0020      	movs	r0, r4
1000caa2:	6863      	ldr	r3, [r4, #4]
1000caa4:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000caa6:	06ab      	lsls	r3, r5, #26
1000caa8:	d50a      	bpl.n	1000cac0 <uart_tx1_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000caaa:	2321      	movs	r3, #33	; 0x21
1000caac:	5ce3      	ldrb	r3, [r4, r3]
1000caae:	079b      	lsls	r3, r3, #30
1000cab0:	d506      	bpl.n	1000cac0 <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
1000cab2:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000cab4:	5ce3      	ldrb	r3, [r4, r3]
1000cab6:	079b      	lsls	r3, r3, #30
1000cab8:	d502      	bpl.n	1000cac0 <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000caba:	68a3      	ldr	r3, [r4, #8]
1000cabc:	0020      	movs	r0, r4
1000cabe:	4798      	blx	r3
		}

	}
}
1000cac0:	bd70      	pop	{r4, r5, r6, pc}
1000cac2:	46c0      	nop			; (mov r8, r8)
1000cac4:	1001a72c 	.word	0x1001a72c

1000cac8 <uart_get_config_defaults>:
 * \param[out] config  Pointer to configuration structure to be initiated
 */
void uart_get_config_defaults(
		struct uart_config *const config)
{
	config->baud_rate = 115200;
1000cac8:	23e1      	movs	r3, #225	; 0xe1
1000caca:	025b      	lsls	r3, r3, #9
1000cacc:	6003      	str	r3, [r0, #0]
	config->data_bits = UART_8_BITS;
1000cace:	2300      	movs	r3, #0
1000cad0:	7103      	strb	r3, [r0, #4]
	config->stop_bits = UART_1_STOP_BIT;
1000cad2:	7143      	strb	r3, [r0, #5]
	config->parity = UART_NO_PARITY;
1000cad4:	7183      	strb	r3, [r0, #6]
	config->flow_control = false;
1000cad6:	71c3      	strb	r3, [r0, #7]

	config->pin_number_pad[0] = PIN_LP_GPIO_2;
1000cad8:	3302      	adds	r3, #2
1000cada:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_3;
1000cadc:	2203      	movs	r2, #3
1000cade:	60c2      	str	r2, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_4;
1000cae0:	3201      	adds	r2, #1
1000cae2:	6102      	str	r2, [r0, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_5;
1000cae4:	3201      	adds	r2, #1
1000cae6:	6142      	str	r2, [r0, #20]

	config->pinmux_sel_pad[0] = MUX_LP_GPIO_2_UART0_RXD;
1000cae8:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_3_UART0_TXD;
1000caea:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_4_UART0_CTS;
1000caec:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_5_UART0_RTS;
1000caee:	6243      	str	r3, [r0, #36]	; 0x24
}
1000caf0:	4770      	bx	lr
1000caf2:	46c0      	nop			; (mov r8, r8)

1000caf4 <uart_init>:
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000caf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000caf6:	464f      	mov	r7, r9
1000caf8:	4646      	mov	r6, r8
1000cafa:	b4c0      	push	{r6, r7}
1000cafc:	0005      	movs	r5, r0
1000cafe:	0017      	movs	r7, r2

	uint8_t config_temp = 0;
	uint8_t i,index;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
1000cb00:	6001      	str	r1, [r0, #0]

	for (i = 0; i < UART_CALLBACK_N; i++) {
		module->callback[i] = NULL;
1000cb02:	2300      	movs	r3, #0
1000cb04:	6043      	str	r3, [r0, #4]
1000cb06:	6083      	str	r3, [r0, #8]
1000cb08:	60c3      	str	r3, [r0, #12]
1000cb0a:	6103      	str	r3, [r0, #16]
	}
	module->rx_buffer_ptr = NULL;
1000cb0c:	6143      	str	r3, [r0, #20]
	module->tx_buffer_ptr = NULL;
1000cb0e:	6183      	str	r3, [r0, #24]
	module->remaining_rx_buffer_length = 0;
1000cb10:	2200      	movs	r2, #0
1000cb12:	8383      	strh	r3, [r0, #28]
	module->remaining_tx_buffer_length = 0;
1000cb14:	83c3      	strh	r3, [r0, #30]
	module->callback_reg_mask = 0;
1000cb16:	3320      	adds	r3, #32
1000cb18:	54c2      	strb	r2, [r0, r3]
	module->callback_enable_mask = 0;
1000cb1a:	3301      	adds	r3, #1
1000cb1c:	54c2      	strb	r2, [r0, r3]
	module->status = STATUS_OK;
1000cb1e:	3301      	adds	r3, #1
1000cb20:	54c2      	strb	r2, [r0, r3]

	if (hw == UART0) {
1000cb22:	4b55      	ldr	r3, [pc, #340]	; (1000cc78 <uart_init+0x184>)
1000cb24:	4299      	cmp	r1, r3
1000cb26:	d118      	bne.n	1000cb5a <uart_init+0x66>
		system_peripheral_reset(PERIPHERAL_UART0_CORE);
1000cb28:	2009      	movs	r0, #9
1000cb2a:	4c54      	ldr	r4, [pc, #336]	; (1000cc7c <uart_init+0x188>)
1000cb2c:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART0_IF);
1000cb2e:	200a      	movs	r0, #10
1000cb30:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_CORE);
1000cb32:	2009      	movs	r0, #9
1000cb34:	4c52      	ldr	r4, [pc, #328]	; (1000cc80 <uart_init+0x18c>)
1000cb36:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_IF);
1000cb38:	200a      	movs	r0, #10
1000cb3a:	47a0      	blx	r4
		_uart_instances[0] = module;
1000cb3c:	4b51      	ldr	r3, [pc, #324]	; (1000cc84 <uart_init+0x190>)
1000cb3e:	601d      	str	r5, [r3, #0]
		system_register_isr(RAM_ISR_TABLE_UARTRX0_INDEX, (uint32_t)uart_rx0_isr_handler);
1000cb40:	4951      	ldr	r1, [pc, #324]	; (1000cc88 <uart_init+0x194>)
1000cb42:	2010      	movs	r0, #16
1000cb44:	4c51      	ldr	r4, [pc, #324]	; (1000cc8c <uart_init+0x198>)
1000cb46:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX0_INDEX, (uint32_t)uart_tx0_isr_handler);
1000cb48:	4951      	ldr	r1, [pc, #324]	; (1000cc90 <uart_init+0x19c>)
1000cb4a:	2011      	movs	r0, #17
1000cb4c:	47a0      	blx	r4
1000cb4e:	4b51      	ldr	r3, [pc, #324]	; (1000cc94 <uart_init+0x1a0>)
1000cb50:	2201      	movs	r2, #1
1000cb52:	601a      	str	r2, [r3, #0]
1000cb54:	3201      	adds	r2, #1
1000cb56:	601a      	str	r2, [r3, #0]
1000cb58:	e01a      	b.n	1000cb90 <uart_init+0x9c>
		NVIC_EnableIRQ(UART0_RX_IRQn);
		NVIC_EnableIRQ(UART0_TX_IRQn);
	} else if (hw == UART1) {
1000cb5a:	4b4f      	ldr	r3, [pc, #316]	; (1000cc98 <uart_init+0x1a4>)
1000cb5c:	4299      	cmp	r1, r3
1000cb5e:	d117      	bne.n	1000cb90 <uart_init+0x9c>
		system_peripheral_reset(PERIPHERAL_UART1_CORE);
1000cb60:	200b      	movs	r0, #11
1000cb62:	4c46      	ldr	r4, [pc, #280]	; (1000cc7c <uart_init+0x188>)
1000cb64:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART1_IF);
1000cb66:	200c      	movs	r0, #12
1000cb68:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_CORE);
1000cb6a:	200b      	movs	r0, #11
1000cb6c:	4c44      	ldr	r4, [pc, #272]	; (1000cc80 <uart_init+0x18c>)
1000cb6e:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_IF);
1000cb70:	200c      	movs	r0, #12
1000cb72:	47a0      	blx	r4
		_uart_instances[1] = module;
1000cb74:	4b43      	ldr	r3, [pc, #268]	; (1000cc84 <uart_init+0x190>)
1000cb76:	605d      	str	r5, [r3, #4]
		system_register_isr(RAM_ISR_TABLE_UARTRX1_INDEX, (uint32_t)uart_rx1_isr_handler);
1000cb78:	4948      	ldr	r1, [pc, #288]	; (1000cc9c <uart_init+0x1a8>)
1000cb7a:	2012      	movs	r0, #18
1000cb7c:	4c43      	ldr	r4, [pc, #268]	; (1000cc8c <uart_init+0x198>)
1000cb7e:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX1_INDEX, (uint32_t)uart_tx1_isr_handler);
1000cb80:	4947      	ldr	r1, [pc, #284]	; (1000cca0 <uart_init+0x1ac>)
1000cb82:	2013      	movs	r0, #19
1000cb84:	47a0      	blx	r4
1000cb86:	4b43      	ldr	r3, [pc, #268]	; (1000cc94 <uart_init+0x1a0>)
1000cb88:	2204      	movs	r2, #4
1000cb8a:	601a      	str	r2, [r3, #0]
1000cb8c:	3204      	adds	r2, #4
1000cb8e:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000cb90:	79fb      	ldrb	r3, [r7, #7]
		index = 4;
1000cb92:	2204      	movs	r2, #4
1000cb94:	4690      	mov	r8, r2
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000cb96:	2b00      	cmp	r3, #0
1000cb98:	d152      	bne.n	1000cc40 <uart_init+0x14c>
		index = 4;
	} else {
		index = 2;
1000cb9a:	3302      	adds	r3, #2
1000cb9c:	4698      	mov	r8, r3
1000cb9e:	e04f      	b.n	1000cc40 <uart_init+0x14c>
#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000cba0:	8a31      	ldrh	r1, [r6, #16]
1000cba2:	ce01      	ldmia	r6!, {r0}
1000cba4:	b2c0      	uxtb	r0, r0
1000cba6:	47c8      	blx	r9

#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
1000cba8:	3401      	adds	r4, #1
1000cbaa:	b2e4      	uxtb	r4, r4
1000cbac:	4544      	cmp	r4, r8
1000cbae:	d3f7      	bcc.n	1000cba0 <uart_init+0xac>
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000cbb0:	682b      	ldr	r3, [r5, #0]
1000cbb2:	7d1a      	ldrb	r2, [r3, #20]
1000cbb4:	07d2      	lsls	r2, r2, #31
1000cbb6:	d504      	bpl.n	1000cbc2 <uart_init+0xce>
1000cbb8:	2101      	movs	r1, #1
		i = module->hw->RECEIVE_DATA.reg;
1000cbba:	7c1a      	ldrb	r2, [r3, #16]
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000cbbc:	7d1a      	ldrb	r2, [r3, #20]
1000cbbe:	420a      	tst	r2, r1
1000cbc0:	d1fb      	bne.n	1000cbba <uart_init+0xc6>
		i = module->hw->RECEIVE_DATA.reg;
	}
	
	/* reset configuration register */
	module->hw->UART_CONFIGURATION.reg = 0;
1000cbc2:	2100      	movs	r1, #0
1000cbc4:	2220      	movs	r2, #32
1000cbc6:	5499      	strb	r1, [r3, r2]

	/* program the uart configuration. */
	if(config->flow_control) {
1000cbc8:	79fb      	ldrb	r3, [r7, #7]
		config_temp |= UART_CONFIGURATION_CTS_ENABLE_1;
1000cbca:	1e59      	subs	r1, r3, #1
1000cbcc:	418b      	sbcs	r3, r1
1000cbce:	0159      	lsls	r1, r3, #5
	}
	config_temp |= config->data_bits;
	config_temp |= config->stop_bits;
1000cbd0:	793b      	ldrb	r3, [r7, #4]
1000cbd2:	797a      	ldrb	r2, [r7, #5]
1000cbd4:	4313      	orrs	r3, r2
1000cbd6:	430b      	orrs	r3, r1
	switch(config->parity) {
1000cbd8:	79ba      	ldrb	r2, [r7, #6]
1000cbda:	2a02      	cmp	r2, #2
1000cbdc:	d00d      	beq.n	1000cbfa <uart_init+0x106>
1000cbde:	b2d1      	uxtb	r1, r2
1000cbe0:	2902      	cmp	r1, #2
1000cbe2:	d802      	bhi.n	1000cbea <uart_init+0xf6>
1000cbe4:	2a01      	cmp	r2, #1
1000cbe6:	d005      	beq.n	1000cbf4 <uart_init+0x100>
1000cbe8:	e00f      	b.n	1000cc0a <uart_init+0x116>
1000cbea:	2a03      	cmp	r2, #3
1000cbec:	d008      	beq.n	1000cc00 <uart_init+0x10c>
1000cbee:	2a04      	cmp	r2, #4
1000cbf0:	d009      	beq.n	1000cc06 <uart_init+0x112>
1000cbf2:	e00a      	b.n	1000cc0a <uart_init+0x116>
		case UART_NO_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_0;
			break;

		case UART_EVEN_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
1000cbf4:	2202      	movs	r2, #2
1000cbf6:	4313      	orrs	r3, r2
			config_temp |= UART_CONFIGURATION_PARITY_MODE_0;
			break;
1000cbf8:	e007      	b.n	1000cc0a <uart_init+0x116>

		case UART_ODD_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_1;
1000cbfa:	2206      	movs	r2, #6
1000cbfc:	4313      	orrs	r3, r2
			break;
1000cbfe:	e004      	b.n	1000cc0a <uart_init+0x116>

		case UART_SPACE_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_2;
1000cc00:	220a      	movs	r2, #10
1000cc02:	4313      	orrs	r3, r2
			break;
1000cc04:	e001      	b.n	1000cc0a <uart_init+0x116>

		case UART_MARK_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_3;
1000cc06:	220e      	movs	r2, #14
1000cc08:	4313      	orrs	r3, r2
			break;

		default:
			break;
	}	
	module->hw->UART_CONFIGURATION.reg = config_temp;
1000cc0a:	2220      	movs	r2, #32
1000cc0c:	6829      	ldr	r1, [r5, #0]
1000cc0e:	548b      	strb	r3, [r1, r2]

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);
1000cc10:	683e      	ldr	r6, [r7, #0]
	uint16_t integerpart = 0;
	uint8_t fractionalpart = 0;
	uint32_t diff;
	uint8_t i = 0;

	clock = system_clock_get_value();
1000cc12:	4b24      	ldr	r3, [pc, #144]	; (1000cca4 <uart_init+0x1b0>)
1000cc14:	4798      	blx	r3
1000cc16:	0004      	movs	r4, r0
	integerpart = clock / baud_rate;
1000cc18:	0031      	movs	r1, r6
1000cc1a:	4b23      	ldr	r3, [pc, #140]	; (1000cca8 <uart_init+0x1b4>)
1000cc1c:	4798      	blx	r3
1000cc1e:	b282      	uxth	r2, r0
	diff = clock - (baud_rate * integerpart);
1000cc20:	0400      	lsls	r0, r0, #16
1000cc22:	0c00      	lsrs	r0, r0, #16
1000cc24:	4370      	muls	r0, r6
1000cc26:	1a20      	subs	r0, r4, r0
	i = 0;
	while(diff > (baud_rate / 16)) {
1000cc28:	0931      	lsrs	r1, r6, #4
1000cc2a:	4288      	cmp	r0, r1
1000cc2c:	d906      	bls.n	1000cc3c <uart_init+0x148>
1000cc2e:	2300      	movs	r3, #0
		i++;
1000cc30:	3301      	adds	r3, #1
1000cc32:	b2db      	uxtb	r3, r3
		diff -= (baud_rate / 16);
1000cc34:	1a40      	subs	r0, r0, r1

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
	while(diff > (baud_rate / 16)) {
1000cc36:	4288      	cmp	r0, r1
1000cc38:	d8fa      	bhi.n	1000cc30 <uart_init+0x13c>
1000cc3a:	e007      	b.n	1000cc4c <uart_init+0x158>
	uint8_t i = 0;

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
1000cc3c:	2300      	movs	r3, #0
1000cc3e:	e005      	b.n	1000cc4c <uart_init+0x158>
1000cc40:	003e      	movs	r6, r7
1000cc42:	3608      	adds	r6, #8
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000cc44:	2400      	movs	r4, #0
#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000cc46:	4b19      	ldr	r3, [pc, #100]	; (1000ccac <uart_init+0x1b8>)
1000cc48:	4699      	mov	r9, r3
1000cc4a:	e7a9      	b.n	1000cba0 <uart_init+0xac>
		i++;
		diff -= (baud_rate / 16);
	}
	fractionalpart = (i + 1) / 2;

	module->hw->UART_CLOCK_SOURCE.reg = UART_CLOCK_SOURCE_CLOCK_SELECT_0;
1000cc4c:	2100      	movs	r1, #0
1000cc4e:	2028      	movs	r0, #40	; 0x28
1000cc50:	682c      	ldr	r4, [r5, #0]
1000cc52:	5421      	strb	r1, [r4, r0]
	module->hw->UART_BAUD_RATE.reg =
1000cc54:	3301      	adds	r3, #1
1000cc56:	071b      	lsls	r3, r3, #28
1000cc58:	0f5b      	lsrs	r3, r3, #29
1000cc5a:	00d2      	lsls	r2, r2, #3
1000cc5c:	4313      	orrs	r3, r2
1000cc5e:	b29b      	uxth	r3, r3
1000cc60:	682a      	ldr	r2, [r5, #0]
1000cc62:	8493      	strh	r3, [r2, #36]	; 0x24
	module->hw->UART_CONFIGURATION.reg = config_temp;

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);

	module->hw->RX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at read time
1000cc64:	682b      	ldr	r3, [r5, #0]
1000cc66:	7619      	strb	r1, [r3, #24]
	module->hw->TX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at write time
1000cc68:	682b      	ldr	r3, [r5, #0]
1000cc6a:	7219      	strb	r1, [r3, #8]
	
	return STATUS_OK;
}
1000cc6c:	2000      	movs	r0, #0
1000cc6e:	bc0c      	pop	{r2, r3}
1000cc70:	4690      	mov	r8, r2
1000cc72:	4699      	mov	r9, r3
1000cc74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000cc76:	46c0      	nop			; (mov r8, r8)
1000cc78:	40004000 	.word	0x40004000
1000cc7c:	1000c429 	.word	0x1000c429
1000cc80:	1000bd61 	.word	0x1000bd61
1000cc84:	1001a72c 	.word	0x1001a72c
1000cc88:	1000c8a1 	.word	0x1000c8a1
1000cc8c:	1000c891 	.word	0x1000c891
1000cc90:	1000c929 	.word	0x1000c929
1000cc94:	e000e100 	.word	0xe000e100
1000cc98:	40005000 	.word	0x40005000
1000cc9c:	1000c9b5 	.word	0x1000c9b5
1000cca0:	1000ca3d 	.word	0x1000ca3d
1000cca4:	1000bd55 	.word	0x1000bd55
1000cca8:	100135c1 	.word	0x100135c1
1000ccac:	1000b9b1 	.word	0x1000b9b1

1000ccb0 <uart_write_wait>:
* \retval STATUS_OK         If the operation was completed
*/
enum status_code uart_write_wait(struct uart_module *const module,
		const uint8_t tx_data)
{
	while (!(module->hw->TRANSMIT_STATUS.reg & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL));
1000ccb0:	6802      	ldr	r2, [r0, #0]
1000ccb2:	2001      	movs	r0, #1
1000ccb4:	7913      	ldrb	r3, [r2, #4]
1000ccb6:	4203      	tst	r3, r0
1000ccb8:	d0fc      	beq.n	1000ccb4 <uart_write_wait+0x4>

	module->hw->TRANSMIT_DATA.reg = tx_data;
1000ccba:	7011      	strb	r1, [r2, #0]
	
	return STATUS_OK;
}
1000ccbc:	2000      	movs	r0, #0
1000ccbe:	4770      	bx	lr

1000ccc0 <uart_read_wait>:
* \retval STATUS_OK                If the operation was completed
*/
enum status_code uart_read_wait(struct uart_module *const module,
		uint8_t *const rx_data)
{
	while (!(module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY));
1000ccc0:	6802      	ldr	r2, [r0, #0]
1000ccc2:	2001      	movs	r0, #1
1000ccc4:	7d13      	ldrb	r3, [r2, #20]
1000ccc6:	4203      	tst	r3, r0
1000ccc8:	d0fc      	beq.n	1000ccc4 <uart_read_wait+0x4>

	*rx_data = module->hw->RECEIVE_DATA.reg;
1000ccca:	7c13      	ldrb	r3, [r2, #16]
1000cccc:	700b      	strb	r3, [r1, #0]
	
	return STATUS_OK;
}
1000ccce:	2000      	movs	r0, #0
1000ccd0:	4770      	bx	lr
1000ccd2:	46c0      	nop			; (mov r8, r8)

1000ccd4 <uart_read_buffer_job>:
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
1000ccd4:	2317      	movs	r3, #23
{
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
1000ccd6:	2a00      	cmp	r2, #0
1000ccd8:	d00d      	beq.n	1000ccf6 <uart_read_buffer_job+0x22>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check if the UART is busy transmitting or slave waiting for TXC*/
	if (module->status == STATUS_BUSY) {
1000ccda:	330b      	adds	r3, #11
1000ccdc:	5cc3      	ldrb	r3, [r0, r3]
1000ccde:	b2db      	uxtb	r3, r3
1000cce0:	2b05      	cmp	r3, #5
1000cce2:	d008      	beq.n	1000ccf6 <uart_read_buffer_job+0x22>
	Assert(module);
	Assert(rx_data);

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
1000cce4:	8382      	strh	r2, [r0, #28]
	module->rx_buffer_ptr = rx_data;
1000cce6:	6141      	str	r1, [r0, #20]
	module->status = STATUS_BUSY;
1000cce8:	2205      	movs	r2, #5
1000ccea:	2322      	movs	r3, #34	; 0x22
1000ccec:	54c2      	strb	r2, [r0, r3]

	module->hw->RX_INTERRUPT_MASK.reg = UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK;
1000ccee:	6803      	ldr	r3, [r0, #0]
1000ccf0:	3a04      	subs	r2, #4
1000ccf2:	761a      	strb	r2, [r3, #24]
		return STATUS_BUSY;
	}

	/* Issue internal read */
	_uart_read_buffer(module, rx_data, length);
	return STATUS_OK;
1000ccf4:	2300      	movs	r3, #0
}
1000ccf6:	0018      	movs	r0, r3
1000ccf8:	4770      	bx	lr
1000ccfa:	46c0      	nop			; (mov r8, r8)

1000ccfc <uart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
1000ccfc:	0093      	lsls	r3, r2, #2
1000ccfe:	18c3      	adds	r3, r0, r3
1000cd00:	6059      	str	r1, [r3, #4]
	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
1000cd02:	2120      	movs	r1, #32
1000cd04:	2301      	movs	r3, #1
1000cd06:	4093      	lsls	r3, r2
1000cd08:	5c42      	ldrb	r2, [r0, r1]
1000cd0a:	4313      	orrs	r3, r2
1000cd0c:	5443      	strb	r3, [r0, r1]
}
1000cd0e:	4770      	bx	lr

1000cd10 <uart_enable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_enable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000cd10:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
1000cd12:	2221      	movs	r2, #33	; 0x21
1000cd14:	2301      	movs	r3, #1
1000cd16:	408b      	lsls	r3, r1
1000cd18:	5c84      	ldrb	r4, [r0, r2]
1000cd1a:	4323      	orrs	r3, r4
1000cd1c:	5483      	strb	r3, [r0, r2]

	if (callback_type == UART_CTS_ACTIVE) {
1000cd1e:	2901      	cmp	r1, #1
1000cd20:	d104      	bne.n	1000cd2c <uart_enable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg |= UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000cd22:	6802      	ldr	r2, [r0, #0]
1000cd24:	7a11      	ldrb	r1, [r2, #8]
1000cd26:	2320      	movs	r3, #32
1000cd28:	430b      	orrs	r3, r1
1000cd2a:	7213      	strb	r3, [r2, #8]
	}
}
1000cd2c:	bd10      	pop	{r4, pc}
1000cd2e:	46c0      	nop			; (mov r8, r8)

1000cd30 <uart_disable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_disable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000cd30:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
1000cd32:	2201      	movs	r2, #1
1000cd34:	408a      	lsls	r2, r1
1000cd36:	2421      	movs	r4, #33	; 0x21
1000cd38:	5d03      	ldrb	r3, [r0, r4]
1000cd3a:	4393      	bics	r3, r2
1000cd3c:	5503      	strb	r3, [r0, r4]

	if (callback_type == UART_CTS_ACTIVE) {
1000cd3e:	2901      	cmp	r1, #1
1000cd40:	d104      	bne.n	1000cd4c <uart_disable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg &= ~UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000cd42:	6802      	ldr	r2, [r0, #0]
1000cd44:	7a13      	ldrb	r3, [r2, #8]
1000cd46:	311f      	adds	r1, #31
1000cd48:	438b      	bics	r3, r1
1000cd4a:	7213      	strb	r3, [r2, #8]
	}

}
1000cd4c:	bd10      	pop	{r4, pc}
1000cd4e:	46c0      	nop			; (mov r8, r8)

1000cd50 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
1000cd50:	b5f0      	push	{r4, r5, r6, r7, lr}
1000cd52:	4647      	mov	r7, r8
1000cd54:	b480      	push	{r7}
1000cd56:	000c      	movs	r4, r1
1000cd58:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
1000cd5a:	2800      	cmp	r0, #0
1000cd5c:	d10d      	bne.n	1000cd7a <_read+0x2a>
		return -1;
	}

	for (; len > 0; --len) {
1000cd5e:	2a00      	cmp	r2, #0
1000cd60:	dd0e      	ble.n	1000cd80 <_read+0x30>
1000cd62:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
1000cd64:	4e08      	ldr	r6, [pc, #32]	; (1000cd88 <_read+0x38>)
1000cd66:	4d09      	ldr	r5, [pc, #36]	; (1000cd8c <_read+0x3c>)
1000cd68:	6830      	ldr	r0, [r6, #0]
1000cd6a:	0021      	movs	r1, r4
1000cd6c:	682b      	ldr	r3, [r5, #0]
1000cd6e:	4798      	blx	r3
		ptr++;
1000cd70:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
1000cd72:	42a7      	cmp	r7, r4
1000cd74:	d1f8      	bne.n	1000cd68 <_read+0x18>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
1000cd76:	4640      	mov	r0, r8
1000cd78:	e003      	b.n	1000cd82 <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
1000cd7a:	2001      	movs	r0, #1
1000cd7c:	4240      	negs	r0, r0
1000cd7e:	e000      	b.n	1000cd82 <_read+0x32>
	}

	for (; len > 0; --len) {
1000cd80:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
1000cd82:	bc04      	pop	{r2}
1000cd84:	4690      	mov	r8, r2
1000cd86:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000cd88:	1001a73c 	.word	0x1001a73c
1000cd8c:	1001a734 	.word	0x1001a734

1000cd90 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
1000cd90:	b5f0      	push	{r4, r5, r6, r7, lr}
1000cd92:	4647      	mov	r7, r8
1000cd94:	b480      	push	{r7}
1000cd96:	000e      	movs	r6, r1
1000cd98:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
1000cd9a:	3801      	subs	r0, #1
1000cd9c:	2802      	cmp	r0, #2
1000cd9e:	d811      	bhi.n	1000cdc4 <_write+0x34>
		return -1;
	}

	for (; len != 0; --len) {
1000cda0:	2a00      	cmp	r2, #0
1000cda2:	d012      	beq.n	1000cdca <_write+0x3a>
1000cda4:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
1000cda6:	4b0c      	ldr	r3, [pc, #48]	; (1000cdd8 <_write+0x48>)
1000cda8:	4698      	mov	r8, r3
1000cdaa:	4f0c      	ldr	r7, [pc, #48]	; (1000cddc <_write+0x4c>)
1000cdac:	4643      	mov	r3, r8
1000cdae:	6818      	ldr	r0, [r3, #0]
1000cdb0:	5d31      	ldrb	r1, [r6, r4]
1000cdb2:	683b      	ldr	r3, [r7, #0]
1000cdb4:	4798      	blx	r3
1000cdb6:	2800      	cmp	r0, #0
1000cdb8:	db09      	blt.n	1000cdce <_write+0x3e>
			return -1;
		}
		++nChars;
1000cdba:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
1000cdbc:	42a5      	cmp	r5, r4
1000cdbe:	d1f5      	bne.n	1000cdac <_write+0x1c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
1000cdc0:	0020      	movs	r0, r4
1000cdc2:	e006      	b.n	1000cdd2 <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
1000cdc4:	2001      	movs	r0, #1
1000cdc6:	4240      	negs	r0, r0
1000cdc8:	e003      	b.n	1000cdd2 <_write+0x42>
	}

	for (; len != 0; --len) {
1000cdca:	2000      	movs	r0, #0
1000cdcc:	e001      	b.n	1000cdd2 <_write+0x42>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
1000cdce:	2001      	movs	r0, #1
1000cdd0:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
1000cdd2:	bc04      	pop	{r2}
1000cdd4:	4690      	mov	r8, r2
1000cdd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000cdd8:	1001a73c 	.word	0x1001a73c
1000cddc:	1001a738 	.word	0x1001a738

1000cde0 <ble_undefined_event_handler>:
at_ble_status_t ble_undefined_event_handler(void *params)
{
	DBG_LOG_DEV("Undefined Event Received");
    ALL_UNUSED(params);
	return AT_BLE_SUCCESS;
}
1000cde0:	2000      	movs	r0, #0
1000cde2:	4770      	bx	lr

1000cde4 <ble_mtu_changed_indication_handler>:
	mtu_changed_ind = (at_ble_mtu_changed_ind_t *)params;
	DBG_LOG_DEV("BLE-MTU Changed, Connection Handle: %d, New Value: %d", 
										mtu_changed_ind->conhdl, 
										mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
}
1000cde4:	2000      	movs	r0, #0
1000cde6:	4770      	bx	lr

1000cde8 <ble_characteristic_write_cmd_complete_handler>:

at_ble_status_t ble_characteristic_write_cmd_complete_handler(void *params)
{
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
1000cde8:	78c0      	ldrb	r0, [r0, #3]
1000cdea:	2800      	cmp	r0, #0
1000cdec:	d000      	beq.n	1000cdf0 <ble_characteristic_write_cmd_complete_handler+0x8>
	{
		DBG_LOG_DEV("Char Write Cmd Failed, Connection Handle:%d, Operation:%d",
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
1000cdee:	20e2      	movs	r0, #226	; 0xe2
}
1000cdf0:	4770      	bx	lr
1000cdf2:	46c0      	nop			; (mov r8, r8)

1000cdf4 <ble_conn_param_update>:
	at_ble_conn_param_update_done_t * conn_param_update;
	conn_param_update = (at_ble_conn_param_update_done_t *)params;
	DBG_LOG_DEV("AT_BLE_CONN_PARAM_UPDATE ");
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}
1000cdf4:	2000      	movs	r0, #0
1000cdf6:	4770      	bx	lr

1000cdf8 <ble_scan_report_handler>:
	}
}

/** @brief function handles scan report */
at_ble_status_t ble_scan_report_handler(void *params)
{
1000cdf8:	b510      	push	{r4, lr}
	at_ble_scan_report_t *scan_report;
	scan_report = (at_ble_scan_report_t *)params;
	if (scan_report->status == AT_BLE_SUCCESS)
1000cdfa:	7800      	ldrb	r0, [r0, #0]
1000cdfc:	2800      	cmp	r0, #0
1000cdfe:	d006      	beq.n	1000ce0e <ble_scan_report_handler+0x16>
		/* All scan data should be handled */
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Scanning  failed");
1000ce00:	4803      	ldr	r0, [pc, #12]	; (1000ce10 <ble_scan_report_handler+0x18>)
1000ce02:	4b04      	ldr	r3, [pc, #16]	; (1000ce14 <ble_scan_report_handler+0x1c>)
1000ce04:	4798      	blx	r3
1000ce06:	4804      	ldr	r0, [pc, #16]	; (1000ce18 <ble_scan_report_handler+0x20>)
1000ce08:	4b04      	ldr	r3, [pc, #16]	; (1000ce1c <ble_scan_report_handler+0x24>)
1000ce0a:	4798      	blx	r3
	}
	return AT_BLE_FAILURE;
1000ce0c:	20e2      	movs	r0, #226	; 0xe2
}
1000ce0e:	bd10      	pop	{r4, pc}
1000ce10:	100177b0 	.word	0x100177b0
1000ce14:	10016871 	.word	0x10016871
1000ce18:	10017f54 	.word	0x10017f54
1000ce1c:	10016751 	.word	0x10016751

1000ce20 <ble_adv_report_handler>:

/** @brief function handles advertising report */
at_ble_status_t ble_adv_report_handler(void *params)
{
1000ce20:	b510      	push	{r4, lr}
    at_ble_adv_report_t *adv_report;
    adv_report = (at_ble_adv_report_t *)params;
    if(adv_report->status == AT_BLE_SUCCESS)
1000ce22:	7800      	ldrb	r0, [r0, #0]
1000ce24:	2800      	cmp	r0, #0
1000ce26:	d006      	beq.n	1000ce36 <ble_adv_report_handler+0x16>
    {
        return AT_BLE_SUCCESS;
    }
    else 
    {
        DBG_LOG("Advertising failed");
1000ce28:	4803      	ldr	r0, [pc, #12]	; (1000ce38 <ble_adv_report_handler+0x18>)
1000ce2a:	4b04      	ldr	r3, [pc, #16]	; (1000ce3c <ble_adv_report_handler+0x1c>)
1000ce2c:	4798      	blx	r3
1000ce2e:	4804      	ldr	r0, [pc, #16]	; (1000ce40 <ble_adv_report_handler+0x20>)
1000ce30:	4b04      	ldr	r3, [pc, #16]	; (1000ce44 <ble_adv_report_handler+0x24>)
1000ce32:	4798      	blx	r3
    }
    return AT_BLE_FAILURE;
1000ce34:	20e2      	movs	r0, #226	; 0xe2
}
1000ce36:	bd10      	pop	{r4, pc}
1000ce38:	100177b0 	.word	0x100177b0
1000ce3c:	10016871 	.word	0x10016871
1000ce40:	10017f68 	.word	0x10017f68
1000ce44:	10016751 	.word	0x10016751

1000ce48 <ble_mtu_changed_cmd_complete_handler>:
										mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_mtu_changed_cmd_complete_handler(void *params)
{
1000ce48:	b510      	push	{r4, lr}
1000ce4a:	0004      	movs	r4, r0
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
1000ce4c:	78c0      	ldrb	r0, [r0, #3]
1000ce4e:	2800      	cmp	r0, #0
1000ce50:	d008      	beq.n	1000ce64 <ble_mtu_changed_cmd_complete_handler+0x1c>
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("MTU Change Failed, Connection Handle:%d, Operation:%d",
1000ce52:	4805      	ldr	r0, [pc, #20]	; (1000ce68 <ble_mtu_changed_cmd_complete_handler+0x20>)
1000ce54:	4b05      	ldr	r3, [pc, #20]	; (1000ce6c <ble_mtu_changed_cmd_complete_handler+0x24>)
1000ce56:	4798      	blx	r3
1000ce58:	78a2      	ldrb	r2, [r4, #2]
1000ce5a:	8821      	ldrh	r1, [r4, #0]
1000ce5c:	4804      	ldr	r0, [pc, #16]	; (1000ce70 <ble_mtu_changed_cmd_complete_handler+0x28>)
1000ce5e:	4b05      	ldr	r3, [pc, #20]	; (1000ce74 <ble_mtu_changed_cmd_complete_handler+0x2c>)
1000ce60:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
1000ce62:	20e2      	movs	r0, #226	; 0xe2
}
1000ce64:	bd10      	pop	{r4, pc}
1000ce66:	46c0      	nop			; (mov r8, r8)
1000ce68:	100177b0 	.word	0x100177b0
1000ce6c:	10016871 	.word	0x10016871
1000ce70:	10017f7c 	.word	0x10017f7c
1000ce74:	10016751 	.word	0x10016751

1000ce78 <ble_disconnected_state_handler>:
	return AT_BLE_FAILURE;
}

/** @brief function handles disconnection event received from stack */
at_ble_status_t ble_disconnected_state_handler(void *params)
{
1000ce78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000ce7a:	0004      	movs	r4, r0
1000ce7c:	4b19      	ldr	r3, [pc, #100]	; (1000cee4 <ble_disconnected_state_handler+0x6c>)
1000ce7e:	229b      	movs	r2, #155	; 0x9b
1000ce80:	0092      	lsls	r2, r2, #2
1000ce82:	189d      	adds	r5, r3, r2
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
1000ce84:	2701      	movs	r7, #1
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000ce86:	2600      	movs	r6, #0
1000ce88:	0018      	movs	r0, r3
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
1000ce8a:	001a      	movs	r2, r3
1000ce8c:	3a56      	subs	r2, #86	; 0x56
1000ce8e:	8811      	ldrh	r1, [r2, #0]
1000ce90:	8822      	ldrh	r2, [r4, #0]
1000ce92:	4291      	cmp	r1, r2
1000ce94:	d119      	bne.n	1000ceca <ble_disconnected_state_handler+0x52>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
1000ce96:	781a      	ldrb	r2, [r3, #0]
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
1000ce98:	2a05      	cmp	r2, #5
1000ce9a:	d001      	beq.n	1000cea0 <ble_disconnected_state_handler+0x28>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
1000ce9c:	2a08      	cmp	r2, #8
1000ce9e:	d101      	bne.n	1000cea4 <ble_disconnected_state_handler+0x2c>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
1000cea0:	7007      	strb	r7, [r0, #0]
1000cea2:	e012      	b.n	1000ceca <ble_disconnected_state_handler+0x52>
		}		
		else if(ble_dev_info[idx].conn_info.handle == disconnect->handle)
		{
			switch (ble_dev_info[idx].conn_state)
1000cea4:	2a07      	cmp	r2, #7
1000cea6:	d80f      	bhi.n	1000cec8 <ble_disconnected_state_handler+0x50>
1000cea8:	0092      	lsls	r2, r2, #2
1000ceaa:	490f      	ldr	r1, [pc, #60]	; (1000cee8 <ble_disconnected_state_handler+0x70>)
1000ceac:	588a      	ldr	r2, [r1, r2]
1000ceae:	4697      	mov	pc, r2
				case BLE_DEVICE_PAIRING_FAILED:
				case BLE_DEVICE_ENCRYPTION_STATE:
				case BLE_DEVICE_ENCRYPTION_FAILED:
				{
					/* Device is not paired so remove the device information */
					ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000ceb0:	701e      	strb	r6, [r3, #0]
					if (ble_device_count > 0)
1000ceb2:	4a0e      	ldr	r2, [pc, #56]	; (1000ceec <ble_disconnected_state_handler+0x74>)
1000ceb4:	7812      	ldrb	r2, [r2, #0]
1000ceb6:	2a00      	cmp	r2, #0
1000ceb8:	d007      	beq.n	1000ceca <ble_disconnected_state_handler+0x52>
					{
						ble_device_count--;
1000ceba:	4a0c      	ldr	r2, [pc, #48]	; (1000ceec <ble_disconnected_state_handler+0x74>)
1000cebc:	7812      	ldrb	r2, [r2, #0]
1000cebe:	3a01      	subs	r2, #1
1000cec0:	b2d2      	uxtb	r2, r2
1000cec2:	490a      	ldr	r1, [pc, #40]	; (1000ceec <ble_disconnected_state_handler+0x74>)
1000cec4:	700a      	strb	r2, [r1, #0]
1000cec6:	e000      	b.n	1000ceca <ble_disconnected_state_handler+0x52>
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000cec8:	7006      	strb	r6, [r0, #0]
1000ceca:	337c      	adds	r3, #124	; 0x7c
{
	at_ble_disconnected_t *disconnect;
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000cecc:	42ab      	cmp	r3, r5
1000cece:	d1db      	bne.n	1000ce88 <ble_disconnected_state_handler+0x10>
				break;				
			}
		} 
	}
	
	DBG_LOG("Device disconnected Reason:0x%02x Handle=0x%x", disconnect->reason, disconnect->handle);
1000ced0:	4807      	ldr	r0, [pc, #28]	; (1000cef0 <ble_disconnected_state_handler+0x78>)
1000ced2:	4b08      	ldr	r3, [pc, #32]	; (1000cef4 <ble_disconnected_state_handler+0x7c>)
1000ced4:	4798      	blx	r3
1000ced6:	8822      	ldrh	r2, [r4, #0]
1000ced8:	78a1      	ldrb	r1, [r4, #2]
1000ceda:	4807      	ldr	r0, [pc, #28]	; (1000cef8 <ble_disconnected_state_handler+0x80>)
1000cedc:	4b07      	ldr	r3, [pc, #28]	; (1000cefc <ble_disconnected_state_handler+0x84>)
1000cede:	4798      	blx	r3
	return AT_BLE_SUCCESS;
}
1000cee0:	2000      	movs	r0, #0
1000cee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000cee4:	1001a7b6 	.word	0x1001a7b6
1000cee8:	10017df0 	.word	0x10017df0
1000ceec:	1001a9c4 	.word	0x1001a9c4
1000cef0:	100177b0 	.word	0x100177b0
1000cef4:	10016871 	.word	0x10016871
1000cef8:	10017fb4 	.word	0x10017fb4
1000cefc:	10016751 	.word	0x10016751

1000cf00 <ble_encryption_status_change_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption status change */
at_ble_status_t ble_encryption_status_change_handler(void *params)
{
1000cf00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000cf02:	0006      	movs	r6, r0
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
1000cf04:	8801      	ldrh	r1, [r0, #0]
1000cf06:	4b28      	ldr	r3, [pc, #160]	; (1000cfa8 <ble_encryption_status_change_handler+0xa8>)
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000cf08:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
1000cf0a:	891a      	ldrh	r2, [r3, #8]
1000cf0c:	428a      	cmp	r2, r1
1000cf0e:	d104      	bne.n	1000cf1a <ble_encryption_status_change_handler+0x1a>
1000cf10:	001a      	movs	r2, r3
1000cf12:	325e      	adds	r2, #94	; 0x5e
1000cf14:	7812      	ldrb	r2, [r2, #0]
1000cf16:	2a06      	cmp	r2, #6
1000cf18:	d02e      	beq.n	1000cf78 <ble_encryption_status_change_handler+0x78>
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000cf1a:	3401      	adds	r4, #1
1000cf1c:	b2e4      	uxtb	r4, r4
1000cf1e:	337c      	adds	r3, #124	; 0x7c
1000cf20:	2c05      	cmp	r4, #5
1000cf22:	d1f2      	bne.n	1000cf0a <ble_encryption_status_change_handler+0xa>
1000cf24:	e039      	b.n	1000cf9a <ble_encryption_status_change_handler+0x9a>
			return AT_BLE_FAILURE;
		}
	}
	else
	{
		ble_dev_info[idx].bond_info.status = enc_status->status;
1000cf26:	4920      	ldr	r1, [pc, #128]	; (1000cfa8 <ble_encryption_status_change_handler+0xa8>)
1000cf28:	0163      	lsls	r3, r4, #5
1000cf2a:	1b1a      	subs	r2, r3, r4
1000cf2c:	0092      	lsls	r2, r2, #2
1000cf2e:	188a      	adds	r2, r1, r2
1000cf30:	7615      	strb	r5, [r2, #24]
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
1000cf32:	0014      	movs	r4, r2
1000cf34:	345e      	adds	r4, #94	; 0x5e
1000cf36:	2307      	movs	r3, #7
1000cf38:	7023      	strb	r3, [r4, #0]
		DBG_LOG("Encryption failed");
1000cf3a:	481c      	ldr	r0, [pc, #112]	; (1000cfac <ble_encryption_status_change_handler+0xac>)
1000cf3c:	4b1c      	ldr	r3, [pc, #112]	; (1000cfb0 <ble_encryption_status_change_handler+0xb0>)
1000cf3e:	4798      	blx	r3
1000cf40:	481c      	ldr	r0, [pc, #112]	; (1000cfb4 <ble_encryption_status_change_handler+0xb4>)
1000cf42:	4b1d      	ldr	r3, [pc, #116]	; (1000cfb8 <ble_encryption_status_change_handler+0xb8>)
1000cf44:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000cf46:	25e2      	movs	r5, #226	; 0xe2
1000cf48:	e02b      	b.n	1000cfa2 <ble_encryption_status_change_handler+0xa2>
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Encryption completed successfully");
1000cf4a:	4818      	ldr	r0, [pc, #96]	; (1000cfac <ble_encryption_status_change_handler+0xac>)
1000cf4c:	4b18      	ldr	r3, [pc, #96]	; (1000cfb0 <ble_encryption_status_change_handler+0xb0>)
1000cf4e:	4798      	blx	r3
1000cf50:	481a      	ldr	r0, [pc, #104]	; (1000cfbc <ble_encryption_status_change_handler+0xbc>)
1000cf52:	4b19      	ldr	r3, [pc, #100]	; (1000cfb8 <ble_encryption_status_change_handler+0xb8>)
1000cf54:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_COMPLETED;
1000cf56:	4914      	ldr	r1, [pc, #80]	; (1000cfa8 <ble_encryption_status_change_handler+0xa8>)
1000cf58:	0163      	lsls	r3, r4, #5
1000cf5a:	1b1a      	subs	r2, r3, r4
1000cf5c:	0092      	lsls	r2, r2, #2
1000cf5e:	188a      	adds	r2, r1, r2
1000cf60:	0010      	movs	r0, r2
1000cf62:	305e      	adds	r0, #94	; 0x5e
1000cf64:	2708      	movs	r7, #8
1000cf66:	7007      	strb	r7, [r0, #0]
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
1000cf68:	78f0      	ldrb	r0, [r6, #3]
1000cf6a:	7510      	strb	r0, [r2, #20]
			ble_dev_info[idx].bond_info.status = enc_status->status;
1000cf6c:	78b2      	ldrb	r2, [r6, #2]
1000cf6e:	1b1c      	subs	r4, r3, r4
1000cf70:	00a4      	lsls	r4, r4, #2
1000cf72:	190c      	adds	r4, r1, r4
1000cf74:	7622      	strb	r2, [r4, #24]
		ble_dev_info[idx].bond_info.status = enc_status->status;
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
1000cf76:	e014      	b.n	1000cfa2 <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
1000cf78:	78b5      	ldrb	r5, [r6, #2]
1000cf7a:	2d00      	cmp	r5, #0
1000cf7c:	d0e5      	beq.n	1000cf4a <ble_encryption_status_change_handler+0x4a>
1000cf7e:	e7d2      	b.n	1000cf26 <ble_encryption_status_change_handler+0x26>
	{
		DBG_LOG("Encryption completed successfully");
1000cf80:	4e0a      	ldr	r6, [pc, #40]	; (1000cfac <ble_encryption_status_change_handler+0xac>)
1000cf82:	0030      	movs	r0, r6
1000cf84:	4d0a      	ldr	r5, [pc, #40]	; (1000cfb0 <ble_encryption_status_change_handler+0xb0>)
1000cf86:	47a8      	blx	r5
1000cf88:	480c      	ldr	r0, [pc, #48]	; (1000cfbc <ble_encryption_status_change_handler+0xbc>)
1000cf8a:	4c0b      	ldr	r4, [pc, #44]	; (1000cfb8 <ble_encryption_status_change_handler+0xb8>)
1000cf8c:	47a0      	blx	r4
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
			ble_dev_info[idx].bond_info.status = enc_status->status;
		}
		else
		{
			DBG_LOG("BLE Device not found encryption info");
1000cf8e:	0030      	movs	r0, r6
1000cf90:	47a8      	blx	r5
1000cf92:	480b      	ldr	r0, [pc, #44]	; (1000cfc0 <ble_encryption_status_change_handler+0xc0>)
1000cf94:	47a0      	blx	r4
			return AT_BLE_FAILURE;
1000cf96:	25e2      	movs	r5, #226	; 0xe2
1000cf98:	e003      	b.n	1000cfa2 <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
1000cf9a:	78b5      	ldrb	r5, [r6, #2]
1000cf9c:	2d00      	cmp	r5, #0
1000cf9e:	d1c2      	bne.n	1000cf26 <ble_encryption_status_change_handler+0x26>
1000cfa0:	e7ee      	b.n	1000cf80 <ble_encryption_status_change_handler+0x80>
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
}
1000cfa2:	0028      	movs	r0, r5
1000cfa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000cfa6:	46c0      	nop			; (mov r8, r8)
1000cfa8:	1001a758 	.word	0x1001a758
1000cfac:	100177b0 	.word	0x100177b0
1000cfb0:	10016871 	.word	0x10016871
1000cfb4:	10017fe4 	.word	0x10017fe4
1000cfb8:	10016751 	.word	0x10016751
1000cfbc:	10017ff8 	.word	0x10017ff8
1000cfc0:	1001801c 	.word	0x1001801c

1000cfc4 <ble_scan_info_handler>:
	return found;
}
#endif
/** @brief function handling scaned information */
at_ble_status_t ble_scan_info_handler(void *params)
{
1000cfc4:	b510      	push	{r4, lr}
1000cfc6:	0001      	movs	r1, r0
	at_ble_scan_info_t *scan_param;
	scan_param = (at_ble_scan_info_t *)params;
	if(scan_response_count < MAX_SCAN_DEVICE)
1000cfc8:	4b15      	ldr	r3, [pc, #84]	; (1000d020 <ble_scan_info_handler+0x5c>)
1000cfca:	781b      	ldrb	r3, [r3, #0]
1000cfcc:	b2db      	uxtb	r3, r3
1000cfce:	2b13      	cmp	r3, #19
1000cfd0:	d812      	bhi.n	1000cff8 <ble_scan_info_handler+0x34>
	{
		memcpy((uint8_t *)&scan_info[scan_response_count], scan_param, sizeof(at_ble_scan_info_t));
1000cfd2:	4c13      	ldr	r4, [pc, #76]	; (1000d020 <ble_scan_info_handler+0x5c>)
1000cfd4:	7823      	ldrb	r3, [r4, #0]
1000cfd6:	b2db      	uxtb	r3, r3
1000cfd8:	0098      	lsls	r0, r3, #2
1000cfda:	18c0      	adds	r0, r0, r3
1000cfdc:	00c0      	lsls	r0, r0, #3
1000cfde:	18c3      	adds	r3, r0, r3
1000cfe0:	4810      	ldr	r0, [pc, #64]	; (1000d024 <ble_scan_info_handler+0x60>)
1000cfe2:	1818      	adds	r0, r3, r0
1000cfe4:	2229      	movs	r2, #41	; 0x29
1000cfe6:	4b10      	ldr	r3, [pc, #64]	; (1000d028 <ble_scan_info_handler+0x64>)
1000cfe8:	4798      	blx	r3
		DBG_LOG_DEV("Info:Device found address [%d]  0x%02X%02X%02X%02X%02X%02X ",
1000cfea:	7823      	ldrb	r3, [r4, #0]
		scan_param->dev_addr.addr[4],
		scan_param->dev_addr.addr[3],
		scan_param->dev_addr.addr[2],
		scan_param->dev_addr.addr[1],
		scan_param->dev_addr.addr[0]);
		scan_response_count++;
1000cfec:	7823      	ldrb	r3, [r4, #0]
1000cfee:	3301      	adds	r3, #1
1000cff0:	b2db      	uxtb	r3, r3
1000cff2:	7023      	strb	r3, [r4, #0]
		return AT_BLE_SUCCESS;
1000cff4:	2300      	movs	r3, #0
1000cff6:	e011      	b.n	1000d01c <ble_scan_info_handler+0x58>
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
1000cff8:	480c      	ldr	r0, [pc, #48]	; (1000d02c <ble_scan_info_handler+0x68>)
1000cffa:	4b0d      	ldr	r3, [pc, #52]	; (1000d030 <ble_scan_info_handler+0x6c>)
1000cffc:	4798      	blx	r3
1000cffe:	480d      	ldr	r0, [pc, #52]	; (1000d034 <ble_scan_info_handler+0x70>)
1000d000:	4b0d      	ldr	r3, [pc, #52]	; (1000d038 <ble_scan_info_handler+0x74>)
1000d002:	4798      	blx	r3
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
1000d004:	4b0d      	ldr	r3, [pc, #52]	; (1000d03c <ble_scan_info_handler+0x78>)
1000d006:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
1000d008:	23e2      	movs	r3, #226	; 0xe2
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
1000d00a:	2800      	cmp	r0, #0
1000d00c:	d006      	beq.n	1000d01c <ble_scan_info_handler+0x58>
		{
			DBG_LOG("Failed to stop scanning");
1000d00e:	4807      	ldr	r0, [pc, #28]	; (1000d02c <ble_scan_info_handler+0x68>)
1000d010:	4b07      	ldr	r3, [pc, #28]	; (1000d030 <ble_scan_info_handler+0x6c>)
1000d012:	4798      	blx	r3
1000d014:	480a      	ldr	r0, [pc, #40]	; (1000d040 <ble_scan_info_handler+0x7c>)
1000d016:	4b08      	ldr	r3, [pc, #32]	; (1000d038 <ble_scan_info_handler+0x74>)
1000d018:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
1000d01a:	23e2      	movs	r3, #226	; 0xe2
	}
}
1000d01c:	0018      	movs	r0, r3
1000d01e:	bd10      	pop	{r4, pc}
1000d020:	10019268 	.word	0x10019268
1000d024:	1001aa3c 	.word	0x1001aa3c
1000d028:	100165f7 	.word	0x100165f7
1000d02c:	100177b0 	.word	0x100177b0
1000d030:	10016871 	.word	0x10016871
1000d034:	10018044 	.word	0x10018044
1000d038:	10016751 	.word	0x10016751
1000d03c:	1000fb59 	.word	0x1000fb59
1000d040:	1001807c 	.word	0x1001807c

1000d044 <ble_pair_done_handler>:
	return AT_BLE_SUCCESS;	
}

/** @brief function handles pair done event */
at_ble_status_t ble_pair_done_handler(void *params)
{
1000d044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000d046:	464f      	mov	r7, r9
1000d048:	4646      	mov	r6, r8
1000d04a:	b4c0      	push	{r6, r7}
1000d04c:	0005      	movs	r5, r0
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1000d04e:	8841      	ldrh	r1, [r0, #2]
1000d050:	4b3a      	ldr	r3, [pc, #232]	; (1000d13c <ble_pair_done_handler+0xf8>)
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d052:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1000d054:	891a      	ldrh	r2, [r3, #8]
1000d056:	428a      	cmp	r2, r1
1000d058:	d104      	bne.n	1000d064 <ble_pair_done_handler+0x20>
1000d05a:	001a      	movs	r2, r3
1000d05c:	325e      	adds	r2, #94	; 0x5e
1000d05e:	7812      	ldrb	r2, [r2, #0]
1000d060:	2a03      	cmp	r2, #3
1000d062:	d062      	beq.n	1000d12a <ble_pair_done_handler+0xe6>
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d064:	3401      	adds	r4, #1
1000d066:	b2e4      	uxtb	r4, r4
1000d068:	337c      	adds	r3, #124	; 0x7c
1000d06a:	2c05      	cmp	r4, #5
1000d06c:	d1f2      	bne.n	1000d054 <ble_pair_done_handler+0x10>
1000d06e:	e02b      	b.n	1000d0c8 <ble_pair_done_handler+0x84>
			return AT_BLE_FAILURE;
		}		
	}
	else
	{
		if(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE && ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) {
1000d070:	0163      	lsls	r3, r4, #5
1000d072:	1b1c      	subs	r4, r3, r4
1000d074:	00a4      	lsls	r4, r4, #2
1000d076:	4b31      	ldr	r3, [pc, #196]	; (1000d13c <ble_pair_done_handler+0xf8>)
1000d078:	191c      	adds	r4, r3, r4
1000d07a:	345e      	adds	r4, #94	; 0x5e
1000d07c:	7823      	ldrb	r3, [r4, #0]
1000d07e:	2b01      	cmp	r3, #1
1000d080:	d913      	bls.n	1000d0aa <ble_pair_done_handler+0x66>
			DBG_LOG("Pairing failed...Disconnecting");
1000d082:	482f      	ldr	r0, [pc, #188]	; (1000d140 <ble_pair_done_handler+0xfc>)
1000d084:	4b2f      	ldr	r3, [pc, #188]	; (1000d144 <ble_pair_done_handler+0x100>)
1000d086:	4798      	blx	r3
1000d088:	482f      	ldr	r0, [pc, #188]	; (1000d148 <ble_pair_done_handler+0x104>)
1000d08a:	4b30      	ldr	r3, [pc, #192]	; (1000d14c <ble_pair_done_handler+0x108>)
1000d08c:	4798      	blx	r3
			if(!(at_ble_disconnect(pairing_params->handle, AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS))
1000d08e:	8868      	ldrh	r0, [r5, #2]
1000d090:	2113      	movs	r1, #19
1000d092:	4b2f      	ldr	r3, [pc, #188]	; (1000d150 <ble_pair_done_handler+0x10c>)
1000d094:	4798      	blx	r3
1000d096:	1e06      	subs	r6, r0, #0
1000d098:	d04b      	beq.n	1000d132 <ble_pair_done_handler+0xee>
			{
				DBG_LOG("Disconnect Request Failed");
1000d09a:	4829      	ldr	r0, [pc, #164]	; (1000d140 <ble_pair_done_handler+0xfc>)
1000d09c:	4b29      	ldr	r3, [pc, #164]	; (1000d144 <ble_pair_done_handler+0x100>)
1000d09e:	4798      	blx	r3
1000d0a0:	482c      	ldr	r0, [pc, #176]	; (1000d154 <ble_pair_done_handler+0x110>)
1000d0a2:	4b2a      	ldr	r3, [pc, #168]	; (1000d14c <ble_pair_done_handler+0x108>)
1000d0a4:	4798      	blx	r3
				return AT_BLE_FAILURE;
1000d0a6:	26e2      	movs	r6, #226	; 0xe2
1000d0a8:	e043      	b.n	1000d132 <ble_pair_done_handler+0xee>
			}
		}
	}
	return AT_BLE_SUCCESS;
1000d0aa:	2600      	movs	r6, #0
1000d0ac:	e041      	b.n	1000d132 <ble_pair_done_handler+0xee>
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Pairing procedure completed successfully");
1000d0ae:	4e24      	ldr	r6, [pc, #144]	; (1000d140 <ble_pair_done_handler+0xfc>)
1000d0b0:	0030      	movs	r0, r6
1000d0b2:	4d24      	ldr	r5, [pc, #144]	; (1000d144 <ble_pair_done_handler+0x100>)
1000d0b4:	47a8      	blx	r5
1000d0b6:	4828      	ldr	r0, [pc, #160]	; (1000d158 <ble_pair_done_handler+0x114>)
1000d0b8:	4c24      	ldr	r4, [pc, #144]	; (1000d14c <ble_pair_done_handler+0x108>)
1000d0ba:	47a0      	blx	r4
				
			}
		}
		else
		{
			DBG_LOG("BLE Device not found to store the pairing info");
1000d0bc:	0030      	movs	r0, r6
1000d0be:	47a8      	blx	r5
1000d0c0:	4826      	ldr	r0, [pc, #152]	; (1000d15c <ble_pair_done_handler+0x118>)
1000d0c2:	47a0      	blx	r4
			return AT_BLE_FAILURE;
1000d0c4:	26e2      	movs	r6, #226	; 0xe2
1000d0c6:	e034      	b.n	1000d132 <ble_pair_done_handler+0xee>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
1000d0c8:	792b      	ldrb	r3, [r5, #4]
1000d0ca:	2b00      	cmp	r3, #0
1000d0cc:	d1d0      	bne.n	1000d070 <ble_pair_done_handler+0x2c>
1000d0ce:	e7ee      	b.n	1000d0ae <ble_pair_done_handler+0x6a>
	{
		DBG_LOG("Pairing procedure completed successfully");
1000d0d0:	481b      	ldr	r0, [pc, #108]	; (1000d140 <ble_pair_done_handler+0xfc>)
1000d0d2:	4b1c      	ldr	r3, [pc, #112]	; (1000d144 <ble_pair_done_handler+0x100>)
1000d0d4:	4798      	blx	r3
1000d0d6:	4820      	ldr	r0, [pc, #128]	; (1000d158 <ble_pair_done_handler+0x114>)
1000d0d8:	4b1c      	ldr	r3, [pc, #112]	; (1000d14c <ble_pair_done_handler+0x108>)
1000d0da:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].bond_info.auth = pairing_params->auth;
1000d0dc:	782a      	ldrb	r2, [r5, #0]
1000d0de:	4b17      	ldr	r3, [pc, #92]	; (1000d13c <ble_pair_done_handler+0xf8>)
1000d0e0:	4699      	mov	r9, r3
1000d0e2:	0167      	lsls	r7, r4, #5
1000d0e4:	1b3b      	subs	r3, r7, r4
1000d0e6:	009b      	lsls	r3, r3, #2
1000d0e8:	444b      	add	r3, r9
1000d0ea:	751a      	strb	r2, [r3, #20]
			ble_dev_info[idx].bond_info.status = pairing_params->status;
1000d0ec:	792a      	ldrb	r2, [r5, #4]
1000d0ee:	761a      	strb	r2, [r3, #24]
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRED;
1000d0f0:	335e      	adds	r3, #94	; 0x5e
1000d0f2:	2205      	movs	r2, #5
1000d0f4:	701a      	strb	r2, [r3, #0]
			
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
1000d0f6:	1b38      	subs	r0, r7, r4
1000d0f8:	0080      	lsls	r0, r0, #2
1000d0fa:	4448      	add	r0, r9
1000d0fc:	3036      	adds	r0, #54	; 0x36
1000d0fe:	0029      	movs	r1, r5
1000d100:	3122      	adds	r1, #34	; 0x22
1000d102:	320b      	adds	r2, #11
1000d104:	4b16      	ldr	r3, [pc, #88]	; (1000d160 <ble_pair_done_handler+0x11c>)
1000d106:	4698      	mov	r8, r3
1000d108:	4798      	blx	r3
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
1000d10a:	1b38      	subs	r0, r7, r4
1000d10c:	0080      	lsls	r0, r0, #2
1000d10e:	4448      	add	r0, r9
1000d110:	3046      	adds	r0, #70	; 0x46
1000d112:	0029      	movs	r1, r5
1000d114:	3132      	adds	r1, #50	; 0x32
1000d116:	2217      	movs	r2, #23
1000d118:	47c0      	blx	r8
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
1000d11a:	1b38      	subs	r0, r7, r4
1000d11c:	0080      	lsls	r0, r0, #2
1000d11e:	4448      	add	r0, r9
1000d120:	301a      	adds	r0, #26
1000d122:	1da9      	adds	r1, r5, #6
1000d124:	221c      	movs	r2, #28
1000d126:	47c0      	blx	r8
1000d128:	e003      	b.n	1000d132 <ble_pair_done_handler+0xee>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
1000d12a:	792e      	ldrb	r6, [r5, #4]
1000d12c:	2e00      	cmp	r6, #0
1000d12e:	d0cf      	beq.n	1000d0d0 <ble_pair_done_handler+0x8c>
1000d130:	e79e      	b.n	1000d070 <ble_pair_done_handler+0x2c>
				return AT_BLE_FAILURE;
			}
		}
	}
	return AT_BLE_SUCCESS;
}
1000d132:	0030      	movs	r0, r6
1000d134:	bc0c      	pop	{r2, r3}
1000d136:	4690      	mov	r8, r2
1000d138:	4699      	mov	r9, r3
1000d13a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000d13c:	1001a758 	.word	0x1001a758
1000d140:	100177b0 	.word	0x100177b0
1000d144:	10016871 	.word	0x10016871
1000d148:	10018094 	.word	0x10018094
1000d14c:	10016751 	.word	0x10016751
1000d150:	1000fb79 	.word	0x1000fb79
1000d154:	100180b4 	.word	0x100180b4
1000d158:	100180d0 	.word	0x100180d0
1000d15c:	100180fc 	.word	0x100180fc
1000d160:	100165f7 	.word	0x100165f7

1000d164 <ble_conn_param_update_req>:
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_conn_param_update_req(void *params)
{
1000d164:	b510      	push	{r4, lr}
	at_ble_conn_param_update_request_t * conn_param_req;
	conn_param_req = (at_ble_conn_param_update_request_t *)params;
	at_ble_conn_update_reply(conn_param_req->handle, true, 1, 120);
1000d166:	8800      	ldrh	r0, [r0, #0]
1000d168:	2378      	movs	r3, #120	; 0x78
1000d16a:	2201      	movs	r2, #1
1000d16c:	2101      	movs	r1, #1
1000d16e:	4c02      	ldr	r4, [pc, #8]	; (1000d178 <ble_conn_param_update_req+0x14>)
1000d170:	47a0      	blx	r4
	return AT_BLE_SUCCESS;
}
1000d172:	2000      	movs	r0, #0
1000d174:	bd10      	pop	{r4, pc}
1000d176:	46c0      	nop			; (mov r8, r8)
1000d178:	1000fb99 	.word	0x1000fb99

1000d17c <ble_slave_security_request_handler>:

at_ble_status_t ble_slave_security_request_handler(void* params)
{
1000d17c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d17e:	4657      	mov	r7, sl
1000d180:	464e      	mov	r6, r9
1000d182:	4645      	mov	r5, r8
1000d184:	b4e0      	push	{r5, r6, r7}
1000d186:	b084      	sub	sp, #16
1000d188:	0004      	movs	r4, r0
	uint8_t i = 0, idx;
	at_ble_slave_sec_request_t* slave_sec_req;
	bool device_found = false;
	
	slave_sec_req = (at_ble_slave_sec_request_t*)params;	
	memset(&features, 0x00, sizeof(at_ble_pair_features_t));
1000d18a:	2209      	movs	r2, #9
1000d18c:	2100      	movs	r1, #0
1000d18e:	a801      	add	r0, sp, #4
1000d190:	4b6a      	ldr	r3, [pc, #424]	; (1000d33c <ble_slave_security_request_handler+0x1c0>)
1000d192:	4798      	blx	r3
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000d194:	8825      	ldrh	r5, [r4, #0]
1000d196:	496a      	ldr	r1, [pc, #424]	; (1000d340 <ble_slave_security_request_handler+0x1c4>)
1000d198:	000a      	movs	r2, r1
1000d19a:	2300      	movs	r3, #0
1000d19c:	8910      	ldrh	r0, [r2, #8]
1000d19e:	42a8      	cmp	r0, r5
1000d1a0:	d116      	bne.n	1000d1d0 <ble_slave_security_request_handler+0x54>
1000d1a2:	0010      	movs	r0, r2
1000d1a4:	305e      	adds	r0, #94	; 0x5e
1000d1a6:	7800      	ldrb	r0, [r0, #0]
1000d1a8:	2802      	cmp	r0, #2
1000d1aa:	d111      	bne.n	1000d1d0 <ble_slave_security_request_handler+0x54>
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000d1ac:	4864      	ldr	r0, [pc, #400]	; (1000d340 <ble_slave_security_request_handler+0x1c4>)
1000d1ae:	015a      	lsls	r2, r3, #5
1000d1b0:	1ad6      	subs	r6, r2, r3
1000d1b2:	00b6      	lsls	r6, r6, #2
1000d1b4:	1986      	adds	r6, r0, r6
1000d1b6:	365e      	adds	r6, #94	; 0x5e
1000d1b8:	2206      	movs	r2, #6
1000d1ba:	7032      	strb	r2, [r6, #0]
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
1000d1bc:	32f9      	adds	r2, #249	; 0xf9
1000d1be:	4013      	ands	r3, r2
1000d1c0:	015a      	lsls	r2, r3, #5
1000d1c2:	1ad2      	subs	r2, r2, r3
1000d1c4:	0092      	lsls	r2, r2, #2
1000d1c6:	1882      	adds	r2, r0, r2
1000d1c8:	7d12      	ldrb	r2, [r2, #20]
1000d1ca:	07d0      	lsls	r0, r2, #31
1000d1cc:	d405      	bmi.n	1000d1da <ble_slave_security_request_handler+0x5e>
1000d1ce:	e01b      	b.n	1000d208 <ble_slave_security_request_handler+0x8c>
1000d1d0:	3301      	adds	r3, #1
1000d1d2:	327c      	adds	r2, #124	; 0x7c
		//at_ble_disconnect(slave_sec_req->handle, AT_BLE_AUTH_FAILURE);		
		//return AT_BLE_FAILURE;
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d1d4:	2b05      	cmp	r3, #5
1000d1d6:	d1e1      	bne.n	1000d19c <ble_slave_security_request_handler+0x20>
1000d1d8:	e01e      	b.n	1000d218 <ble_slave_security_request_handler+0x9c>
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
1000d1da:	78e0      	ldrb	r0, [r4, #3]
1000d1dc:	2800      	cmp	r0, #0
1000d1de:	d013      	beq.n	1000d208 <ble_slave_security_request_handler+0x8c>
		{
			if(at_ble_encryption_start(slave_sec_req->handle, &ble_dev_info[idx].bond_info.peer_ltk, ble_dev_info[idx].bond_info.auth) == AT_BLE_SUCCESS)
1000d1e0:	0159      	lsls	r1, r3, #5
1000d1e2:	1ac9      	subs	r1, r1, r3
1000d1e4:	008b      	lsls	r3, r1, #2
1000d1e6:	4956      	ldr	r1, [pc, #344]	; (1000d340 <ble_slave_security_request_handler+0x1c4>)
1000d1e8:	18c9      	adds	r1, r1, r3
1000d1ea:	311a      	adds	r1, #26
1000d1ec:	8820      	ldrh	r0, [r4, #0]
1000d1ee:	4b55      	ldr	r3, [pc, #340]	; (1000d344 <ble_slave_security_request_handler+0x1c8>)
1000d1f0:	4798      	blx	r3
1000d1f2:	2800      	cmp	r0, #0
1000d1f4:	d100      	bne.n	1000d1f8 <ble_slave_security_request_handler+0x7c>
1000d1f6:	e09b      	b.n	1000d330 <ble_slave_security_request_handler+0x1b4>
			{
				return  AT_BLE_SUCCESS;
			}
			else
			{
				DBG_LOG("Encryption Not started");
1000d1f8:	4853      	ldr	r0, [pc, #332]	; (1000d348 <ble_slave_security_request_handler+0x1cc>)
1000d1fa:	4b54      	ldr	r3, [pc, #336]	; (1000d34c <ble_slave_security_request_handler+0x1d0>)
1000d1fc:	4798      	blx	r3
1000d1fe:	4854      	ldr	r0, [pc, #336]	; (1000d350 <ble_slave_security_request_handler+0x1d4>)
1000d200:	4b54      	ldr	r3, [pc, #336]	; (1000d354 <ble_slave_security_request_handler+0x1d8>)
1000d202:	4798      	blx	r3
				return AT_BLE_FAILURE;
1000d204:	20e2      	movs	r0, #226	; 0xe2
1000d206:	e093      	b.n	1000d330 <ble_slave_security_request_handler+0x1b4>
			}			
		}
		else
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000d208:	015a      	lsls	r2, r3, #5
1000d20a:	1ad3      	subs	r3, r2, r3
1000d20c:	009b      	lsls	r3, r3, #2
1000d20e:	4a4c      	ldr	r2, [pc, #304]	; (1000d340 <ble_slave_security_request_handler+0x1c4>)
1000d210:	18d3      	adds	r3, r2, r3
1000d212:	335e      	adds	r3, #94	; 0x5e
1000d214:	2202      	movs	r2, #2
1000d216:	701a      	strb	r2, [r3, #0]
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000d218:	8825      	ldrh	r5, [r4, #0]
1000d21a:	2200      	movs	r2, #0
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d21c:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000d21e:	0016      	movs	r6, r2
1000d220:	8908      	ldrh	r0, [r1, #8]
1000d222:	42a8      	cmp	r0, r5
1000d224:	d10d      	bne.n	1000d242 <ble_slave_security_request_handler+0xc6>
1000d226:	0008      	movs	r0, r1
1000d228:	305e      	adds	r0, #94	; 0x5e
1000d22a:	7800      	ldrb	r0, [r0, #0]
1000d22c:	2802      	cmp	r0, #2
1000d22e:	d108      	bne.n	1000d242 <ble_slave_security_request_handler+0xc6>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000d230:	0152      	lsls	r2, r2, #5
1000d232:	1b92      	subs	r2, r2, r6
1000d234:	0096      	lsls	r6, r2, #2
1000d236:	4a42      	ldr	r2, [pc, #264]	; (1000d340 <ble_slave_security_request_handler+0x1c4>)
1000d238:	1992      	adds	r2, r2, r6
1000d23a:	325e      	adds	r2, #94	; 0x5e
1000d23c:	2103      	movs	r1, #3
1000d23e:	7011      	strb	r1, [r2, #0]
			break;
1000d240:	e005      	b.n	1000d24e <ble_slave_security_request_handler+0xd2>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d242:	3301      	adds	r3, #1
1000d244:	b2db      	uxtb	r3, r3
1000d246:	3201      	adds	r2, #1
1000d248:	317c      	adds	r1, #124	; 0x7c
1000d24a:	2b05      	cmp	r3, #5
1000d24c:	d1e7      	bne.n	1000d21e <ble_slave_security_request_handler+0xa2>
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
	features.bond = slave_sec_req->bond;
1000d24e:	aa01      	add	r2, sp, #4
1000d250:	78e1      	ldrb	r1, [r4, #3]
1000d252:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = true;
1000d254:	2101      	movs	r1, #1
1000d256:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = AT_BLE_IO_CAP_KB_DISPLAY;
1000d258:	3103      	adds	r1, #3
1000d25a:	7011      	strb	r1, [r2, #0]

	features.oob_avaiable = false;
			
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000d25c:	001f      	movs	r7, r3
1000d25e:	015a      	lsls	r2, r3, #5
1000d260:	1ad2      	subs	r2, r2, r3
1000d262:	0092      	lsls	r2, r2, #2
1000d264:	4936      	ldr	r1, [pc, #216]	; (1000d340 <ble_slave_security_request_handler+0x1c4>)
1000d266:	5c52      	ldrb	r2, [r2, r1]
1000d268:	2a02      	cmp	r2, #2
1000d26a:	d104      	bne.n	1000d276 <ble_slave_security_request_handler+0xfa>
	{
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000d26c:	aa01      	add	r2, sp, #4
1000d26e:	2103      	movs	r1, #3
1000d270:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000d272:	71d1      	strb	r1, [r2, #7]
1000d274:	e003      	b.n	1000d27e <ble_slave_security_request_handler+0x102>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000d276:	aa01      	add	r2, sp, #4
1000d278:	2101      	movs	r1, #1
1000d27a:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000d27c:	71d1      	strb	r1, [r2, #7]
	}
	features.max_key_size = 16;
1000d27e:	aa01      	add	r2, sp, #4
1000d280:	2110      	movs	r1, #16
1000d282:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
1000d284:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000d286:	017a      	lsls	r2, r7, #5
1000d288:	1bd2      	subs	r2, r2, r7
1000d28a:	0092      	lsls	r2, r2, #2
1000d28c:	492c      	ldr	r1, [pc, #176]	; (1000d340 <ble_slave_security_request_handler+0x1c4>)
1000d28e:	188a      	adds	r2, r1, r2
1000d290:	7e12      	ldrb	r2, [r2, #24]
1000d292:	2a40      	cmp	r2, #64	; 0x40
1000d294:	d134      	bne.n	1000d300 <ble_slave_security_request_handler+0x184>
1000d296:	015a      	lsls	r2, r3, #5
1000d298:	1ad3      	subs	r3, r2, r3
1000d29a:	009b      	lsls	r3, r3, #2
1000d29c:	469a      	mov	sl, r3
1000d29e:	001e      	movs	r6, r3
1000d2a0:	3660      	adds	r6, #96	; 0x60
1000d2a2:	1876      	adds	r6, r6, r1
1000d2a4:	4655      	mov	r5, sl
1000d2a6:	3568      	adds	r5, #104	; 0x68
1000d2a8:	186d      	adds	r5, r5, r1
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000d2aa:	4b2b      	ldr	r3, [pc, #172]	; (1000d358 <ble_slave_security_request_handler+0x1dc>)
1000d2ac:	4699      	mov	r9, r3
1000d2ae:	230f      	movs	r3, #15
1000d2b0:	4698      	mov	r8, r3
1000d2b2:	47c8      	blx	r9
1000d2b4:	4643      	mov	r3, r8
1000d2b6:	4018      	ands	r0, r3
1000d2b8:	7030      	strb	r0, [r6, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000d2ba:	47c8      	blx	r9
1000d2bc:	4643      	mov	r3, r8
1000d2be:	4018      	ands	r0, r3
1000d2c0:	74b0      	strb	r0, [r6, #18]
1000d2c2:	3601      	adds	r6, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000d2c4:	42ae      	cmp	r6, r5
1000d2c6:	d1f4      	bne.n	1000d2b2 <ble_slave_security_request_handler+0x136>
1000d2c8:	4656      	mov	r6, sl
1000d2ca:	3670      	adds	r6, #112	; 0x70
1000d2cc:	4a1c      	ldr	r2, [pc, #112]	; (1000d340 <ble_slave_security_request_handler+0x1c4>)
1000d2ce:	18b6      	adds	r6, r6, r2
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000d2d0:	4b21      	ldr	r3, [pc, #132]	; (1000d358 <ble_slave_security_request_handler+0x1dc>)
1000d2d2:	4699      	mov	r9, r3
1000d2d4:	230f      	movs	r3, #15
1000d2d6:	4698      	mov	r8, r3
1000d2d8:	47c8      	blx	r9
1000d2da:	4643      	mov	r3, r8
1000d2dc:	4018      	ands	r0, r3
1000d2de:	7028      	strb	r0, [r5, #0]
1000d2e0:	3501      	adds	r5, #1
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000d2e2:	42b5      	cmp	r5, r6
1000d2e4:	d1f8      	bne.n	1000d2d8 <ble_slave_security_request_handler+0x15c>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000d2e6:	4b1c      	ldr	r3, [pc, #112]	; (1000d358 <ble_slave_security_request_handler+0x1dc>)
1000d2e8:	4798      	blx	r3
1000d2ea:	017b      	lsls	r3, r7, #5
1000d2ec:	1bdb      	subs	r3, r3, r7
1000d2ee:	009b      	lsls	r3, r3, #2
1000d2f0:	4a13      	ldr	r2, [pc, #76]	; (1000d340 <ble_slave_security_request_handler+0x1c4>)
1000d2f2:	18d3      	adds	r3, r2, r3
1000d2f4:	001a      	movs	r2, r3
1000d2f6:	3270      	adds	r2, #112	; 0x70
1000d2f8:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000d2fa:	337a      	adds	r3, #122	; 0x7a
1000d2fc:	2210      	movs	r2, #16
1000d2fe:	701a      	strb	r2, [r3, #0]
	{
		/* Bonding information already exists */
		
	}

	if(at_ble_authenticate(slave_sec_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000d300:	017a      	lsls	r2, r7, #5
1000d302:	1bd7      	subs	r7, r2, r7
1000d304:	00bf      	lsls	r7, r7, #2
1000d306:	3760      	adds	r7, #96	; 0x60
1000d308:	4a0d      	ldr	r2, [pc, #52]	; (1000d340 <ble_slave_security_request_handler+0x1c4>)
1000d30a:	18ba      	adds	r2, r7, r2
1000d30c:	8820      	ldrh	r0, [r4, #0]
1000d30e:	2300      	movs	r3, #0
1000d310:	a901      	add	r1, sp, #4
1000d312:	4c12      	ldr	r4, [pc, #72]	; (1000d35c <ble_slave_security_request_handler+0x1e0>)
1000d314:	47a0      	blx	r4
1000d316:	2800      	cmp	r0, #0
1000d318:	d00a      	beq.n	1000d330 <ble_slave_security_request_handler+0x1b4>
	{
		features.bond = false;
1000d31a:	ab01      	add	r3, sp, #4
1000d31c:	2200      	movs	r2, #0
1000d31e:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000d320:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Slave Security Req - Authentication Failed");
1000d322:	4809      	ldr	r0, [pc, #36]	; (1000d348 <ble_slave_security_request_handler+0x1cc>)
1000d324:	4b09      	ldr	r3, [pc, #36]	; (1000d34c <ble_slave_security_request_handler+0x1d0>)
1000d326:	4798      	blx	r3
1000d328:	480d      	ldr	r0, [pc, #52]	; (1000d360 <ble_slave_security_request_handler+0x1e4>)
1000d32a:	4b0a      	ldr	r3, [pc, #40]	; (1000d354 <ble_slave_security_request_handler+0x1d8>)
1000d32c:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000d32e:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000d330:	b004      	add	sp, #16
1000d332:	bc1c      	pop	{r2, r3, r4}
1000d334:	4690      	mov	r8, r2
1000d336:	4699      	mov	r9, r3
1000d338:	46a2      	mov	sl, r4
1000d33a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d33c:	10016609 	.word	0x10016609
1000d340:	1001a758 	.word	0x1001a758
1000d344:	1001075d 	.word	0x1001075d
1000d348:	100177b0 	.word	0x100177b0
1000d34c:	10016871 	.word	0x10016871
1000d350:	1001812c 	.word	0x1001812c
1000d354:	10016751 	.word	0x10016751
1000d358:	10016885 	.word	0x10016885
1000d35c:	10010571 	.word	0x10010571
1000d360:	10018144 	.word	0x10018144

1000d364 <ble_pair_request_handler>:

/** @brief function handles pair request */
at_ble_status_t ble_pair_request_handler(void *params)
{
1000d364:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d366:	465f      	mov	r7, fp
1000d368:	4656      	mov	r6, sl
1000d36a:	464d      	mov	r5, r9
1000d36c:	4644      	mov	r4, r8
1000d36e:	b4f0      	push	{r4, r5, r6, r7}
1000d370:	b085      	sub	sp, #20
1000d372:	4683      	mov	fp, r0
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000d374:	8804      	ldrh	r4, [r0, #0]
1000d376:	4a48      	ldr	r2, [pc, #288]	; (1000d498 <ble_pair_request_handler+0x134>)
1000d378:	2100      	movs	r1, #0
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d37a:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000d37c:	8910      	ldrh	r0, [r2, #8]
1000d37e:	42a0      	cmp	r0, r4
1000d380:	d10d      	bne.n	1000d39e <ble_pair_request_handler+0x3a>
1000d382:	0010      	movs	r0, r2
1000d384:	305e      	adds	r0, #94	; 0x5e
1000d386:	7800      	ldrb	r0, [r0, #0]
1000d388:	2802      	cmp	r0, #2
1000d38a:	d108      	bne.n	1000d39e <ble_pair_request_handler+0x3a>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000d38c:	014a      	lsls	r2, r1, #5
1000d38e:	1a52      	subs	r2, r2, r1
1000d390:	0095      	lsls	r5, r2, #2
1000d392:	4a41      	ldr	r2, [pc, #260]	; (1000d498 <ble_pair_request_handler+0x134>)
1000d394:	1952      	adds	r2, r2, r5
1000d396:	325e      	adds	r2, #94	; 0x5e
1000d398:	2103      	movs	r1, #3
1000d39a:	7011      	strb	r1, [r2, #0]
			break;
1000d39c:	e005      	b.n	1000d3aa <ble_pair_request_handler+0x46>
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d39e:	3301      	adds	r3, #1
1000d3a0:	b2db      	uxtb	r3, r3
1000d3a2:	3101      	adds	r1, #1
1000d3a4:	327c      	adds	r2, #124	; 0x7c
1000d3a6:	2b05      	cmp	r3, #5
1000d3a8:	d1e8      	bne.n	1000d37c <ble_pair_request_handler+0x18>
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
1000d3aa:	aa01      	add	r2, sp, #4
1000d3ac:	2100      	movs	r1, #0
1000d3ae:	7211      	strb	r1, [r2, #8]
	features.bond = BLE_BOND_REQ;
1000d3b0:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = BLE_MITM_REQ;
1000d3b2:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = BLE_IO_CAPABALITIES;
1000d3b4:	2003      	movs	r0, #3
1000d3b6:	7010      	strb	r0, [r2, #0]
	features.oob_avaiable = BLE_OOB_REQ;
1000d3b8:	70d1      	strb	r1, [r2, #3]
	
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000d3ba:	001f      	movs	r7, r3
1000d3bc:	015a      	lsls	r2, r3, #5
1000d3be:	1ad2      	subs	r2, r2, r3
1000d3c0:	0092      	lsls	r2, r2, #2
1000d3c2:	4935      	ldr	r1, [pc, #212]	; (1000d498 <ble_pair_request_handler+0x134>)
1000d3c4:	5c52      	ldrb	r2, [r2, r1]
1000d3c6:	2a02      	cmp	r2, #2
1000d3c8:	d104      	bne.n	1000d3d4 <ble_pair_request_handler+0x70>
	{
		/* Distribution of IRK is required */
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000d3ca:	aa01      	add	r2, sp, #4
1000d3cc:	2103      	movs	r1, #3
1000d3ce:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000d3d0:	71d1      	strb	r1, [r2, #7]
1000d3d2:	e003      	b.n	1000d3dc <ble_pair_request_handler+0x78>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000d3d4:	aa01      	add	r2, sp, #4
1000d3d6:	2101      	movs	r1, #1
1000d3d8:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000d3da:	71d1      	strb	r1, [r2, #7]
	}
			
	features.max_key_size = 16;
1000d3dc:	aa01      	add	r2, sp, #4
1000d3de:	2110      	movs	r1, #16
1000d3e0:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
1000d3e2:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000d3e4:	017a      	lsls	r2, r7, #5
1000d3e6:	1bd2      	subs	r2, r2, r7
1000d3e8:	0092      	lsls	r2, r2, #2
1000d3ea:	492b      	ldr	r1, [pc, #172]	; (1000d498 <ble_pair_request_handler+0x134>)
1000d3ec:	188a      	adds	r2, r1, r2
1000d3ee:	7e12      	ldrb	r2, [r2, #24]
1000d3f0:	2a40      	cmp	r2, #64	; 0x40
1000d3f2:	d131      	bne.n	1000d458 <ble_pair_request_handler+0xf4>
1000d3f4:	015a      	lsls	r2, r3, #5
1000d3f6:	1ad3      	subs	r3, r2, r3
1000d3f8:	009b      	lsls	r3, r3, #2
1000d3fa:	469a      	mov	sl, r3
1000d3fc:	001d      	movs	r5, r3
1000d3fe:	3560      	adds	r5, #96	; 0x60
1000d400:	186d      	adds	r5, r5, r1
1000d402:	4654      	mov	r4, sl
1000d404:	3468      	adds	r4, #104	; 0x68
1000d406:	1864      	adds	r4, r4, r1
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000d408:	4b24      	ldr	r3, [pc, #144]	; (1000d49c <ble_pair_request_handler+0x138>)
1000d40a:	4699      	mov	r9, r3
1000d40c:	260f      	movs	r6, #15
1000d40e:	47c8      	blx	r9
1000d410:	4030      	ands	r0, r6
1000d412:	7028      	strb	r0, [r5, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000d414:	47c8      	blx	r9
1000d416:	4030      	ands	r0, r6
1000d418:	74a8      	strb	r0, [r5, #18]
1000d41a:	3501      	adds	r5, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000d41c:	42a5      	cmp	r5, r4
1000d41e:	d1f6      	bne.n	1000d40e <ble_pair_request_handler+0xaa>
1000d420:	4655      	mov	r5, sl
1000d422:	3570      	adds	r5, #112	; 0x70
1000d424:	4a1c      	ldr	r2, [pc, #112]	; (1000d498 <ble_pair_request_handler+0x134>)
1000d426:	18ad      	adds	r5, r5, r2
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000d428:	4b1c      	ldr	r3, [pc, #112]	; (1000d49c <ble_pair_request_handler+0x138>)
1000d42a:	4699      	mov	r9, r3
1000d42c:	230f      	movs	r3, #15
1000d42e:	4698      	mov	r8, r3
1000d430:	47c8      	blx	r9
1000d432:	4643      	mov	r3, r8
1000d434:	4018      	ands	r0, r3
1000d436:	7020      	strb	r0, [r4, #0]
1000d438:	3401      	adds	r4, #1
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000d43a:	42ac      	cmp	r4, r5
1000d43c:	d1f8      	bne.n	1000d430 <ble_pair_request_handler+0xcc>
		for (i = 0; i < 16; i++)
		{
			DBG_LOG_CONT_DEV("0x%02X ", ble_dev_info[idx].host_ltk.key[i]);
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000d43e:	4b17      	ldr	r3, [pc, #92]	; (1000d49c <ble_pair_request_handler+0x138>)
1000d440:	4798      	blx	r3
1000d442:	017b      	lsls	r3, r7, #5
1000d444:	1bdb      	subs	r3, r3, r7
1000d446:	009b      	lsls	r3, r3, #2
1000d448:	4a13      	ldr	r2, [pc, #76]	; (1000d498 <ble_pair_request_handler+0x134>)
1000d44a:	18d3      	adds	r3, r2, r3
1000d44c:	001a      	movs	r2, r3
1000d44e:	3270      	adds	r2, #112	; 0x70
1000d450:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000d452:	337a      	adds	r3, #122	; 0x7a
1000d454:	2210      	movs	r2, #16
1000d456:	701a      	strb	r2, [r3, #0]
	}

	/* Send pairing response */
	DBG_LOG_DEV("Sending pairing response");

	if(at_ble_authenticate(pair_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000d458:	017a      	lsls	r2, r7, #5
1000d45a:	1bd7      	subs	r7, r2, r7
1000d45c:	00bf      	lsls	r7, r7, #2
1000d45e:	3760      	adds	r7, #96	; 0x60
1000d460:	4a0d      	ldr	r2, [pc, #52]	; (1000d498 <ble_pair_request_handler+0x134>)
1000d462:	18ba      	adds	r2, r7, r2
1000d464:	465b      	mov	r3, fp
1000d466:	8818      	ldrh	r0, [r3, #0]
1000d468:	2300      	movs	r3, #0
1000d46a:	a901      	add	r1, sp, #4
1000d46c:	4c0c      	ldr	r4, [pc, #48]	; (1000d4a0 <ble_pair_request_handler+0x13c>)
1000d46e:	47a0      	blx	r4
1000d470:	2800      	cmp	r0, #0
1000d472:	d00a      	beq.n	1000d48a <ble_pair_request_handler+0x126>
	{
		features.bond = false;
1000d474:	ab01      	add	r3, sp, #4
1000d476:	2200      	movs	r2, #0
1000d478:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000d47a:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Pair Request - Authentication Failed");
1000d47c:	4809      	ldr	r0, [pc, #36]	; (1000d4a4 <ble_pair_request_handler+0x140>)
1000d47e:	4b0a      	ldr	r3, [pc, #40]	; (1000d4a8 <ble_pair_request_handler+0x144>)
1000d480:	4798      	blx	r3
1000d482:	480a      	ldr	r0, [pc, #40]	; (1000d4ac <ble_pair_request_handler+0x148>)
1000d484:	4b0a      	ldr	r3, [pc, #40]	; (1000d4b0 <ble_pair_request_handler+0x14c>)
1000d486:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000d488:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000d48a:	b005      	add	sp, #20
1000d48c:	bc3c      	pop	{r2, r3, r4, r5}
1000d48e:	4690      	mov	r8, r2
1000d490:	4699      	mov	r9, r3
1000d492:	46a2      	mov	sl, r4
1000d494:	46ab      	mov	fp, r5
1000d496:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d498:	1001a758 	.word	0x1001a758
1000d49c:	10016885 	.word	0x10016885
1000d4a0:	10010571 	.word	0x10010571
1000d4a4:	100177b0 	.word	0x100177b0
1000d4a8:	10016871 	.word	0x10016871
1000d4ac:	10018170 	.word	0x10018170
1000d4b0:	10016751 	.word	0x10016751

1000d4b4 <ble_pair_key_request_handler>:

/** @brief function handles pair key request */
at_ble_status_t ble_pair_key_request_handler (void *params)
{
1000d4b4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d4b6:	b085      	sub	sp, #20
1000d4b8:	0005      	movs	r5, r0
	at_ble_pair_key_request_t *pair_key;
	pair_key = (at_ble_pair_key_request_t *)params;
	/* Passkey has fixed value in this example MSB */
	uint8_t passkey[6]={'1','2','3','4','5','6'};
1000d4ba:	2206      	movs	r2, #6
1000d4bc:	493d      	ldr	r1, [pc, #244]	; (1000d5b4 <ble_pair_key_request_handler+0x100>)
1000d4be:	a802      	add	r0, sp, #8
1000d4c0:	4e3d      	ldr	r6, [pc, #244]	; (1000d5b8 <ble_pair_key_request_handler+0x104>)
1000d4c2:	47b0      	blx	r6
	uint8_t idx = 0;
        uint8_t pin;
        
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
1000d4c4:	ac01      	add	r4, sp, #4
1000d4c6:	2204      	movs	r2, #4
1000d4c8:	0029      	movs	r1, r5
1000d4ca:	0020      	movs	r0, r4
1000d4cc:	47b0      	blx	r6
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
1000d4ce:	78e3      	ldrb	r3, [r4, #3]
1000d4d0:	2b00      	cmp	r3, #0
1000d4d2:	d162      	bne.n	1000d59a <ble_pair_key_request_handler+0xe6>
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000d4d4:	4839      	ldr	r0, [pc, #228]	; (1000d5bc <ble_pair_key_request_handler+0x108>)
1000d4d6:	4b3a      	ldr	r3, [pc, #232]	; (1000d5c0 <ble_pair_key_request_handler+0x10c>)
1000d4d8:	4798      	blx	r3
1000d4da:	483a      	ldr	r0, [pc, #232]	; (1000d5c4 <ble_pair_key_request_handler+0x110>)
1000d4dc:	4b3a      	ldr	r3, [pc, #232]	; (1000d5c8 <ble_pair_key_request_handler+0x114>)
1000d4de:	4798      	blx	r3
1000d4e0:	2600      	movs	r6, #0
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000d4e2:	4c3a      	ldr	r4, [pc, #232]	; (1000d5cc <ble_pair_key_request_handler+0x118>)
				return AT_BLE_FAILURE;
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
			  passkey[idx++] = pin;
			  DBG_LOG_CONT("%c", pin);
1000d4e4:	27ff      	movs	r7, #255	; 0xff
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000d4e6:	201e      	movs	r0, #30
1000d4e8:	47a0      	blx	r4
1000d4ea:	b2c3      	uxtb	r3, r0

			if (!pin) {
1000d4ec:	2b00      	cmp	r3, #0
1000d4ee:	d11a      	bne.n	1000d526 <ble_pair_key_request_handler+0x72>
			DBG_LOG("Pin Timeout");
1000d4f0:	4f32      	ldr	r7, [pc, #200]	; (1000d5bc <ble_pair_key_request_handler+0x108>)
1000d4f2:	0038      	movs	r0, r7
1000d4f4:	4e32      	ldr	r6, [pc, #200]	; (1000d5c0 <ble_pair_key_request_handler+0x10c>)
1000d4f6:	47b0      	blx	r6
1000d4f8:	4835      	ldr	r0, [pc, #212]	; (1000d5d0 <ble_pair_key_request_handler+0x11c>)
1000d4fa:	4c33      	ldr	r4, [pc, #204]	; (1000d5c8 <ble_pair_key_request_handler+0x114>)
1000d4fc:	47a0      	blx	r4
				DBG_LOG("Disconnecting ...");
1000d4fe:	0038      	movs	r0, r7
1000d500:	47b0      	blx	r6
1000d502:	4834      	ldr	r0, [pc, #208]	; (1000d5d4 <ble_pair_key_request_handler+0x120>)
1000d504:	47a0      	blx	r4
				if (!(at_ble_disconnect(pair_key->handle,
1000d506:	8828      	ldrh	r0, [r5, #0]
1000d508:	2113      	movs	r1, #19
1000d50a:	4b33      	ldr	r3, [pc, #204]	; (1000d5d8 <ble_pair_key_request_handler+0x124>)
1000d50c:	4798      	blx	r3
1000d50e:	0003      	movs	r3, r0
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
				}
				return AT_BLE_FAILURE;
1000d510:	20e2      	movs	r0, #226	; 0xe2
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);

			if (!pin) {
			DBG_LOG("Pin Timeout");
				DBG_LOG("Disconnecting ...");
				if (!(at_ble_disconnect(pair_key->handle,
1000d512:	2b00      	cmp	r3, #0
1000d514:	d04c      	beq.n	1000d5b0 <ble_pair_key_request_handler+0xfc>
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
1000d516:	4829      	ldr	r0, [pc, #164]	; (1000d5bc <ble_pair_key_request_handler+0x108>)
1000d518:	4b29      	ldr	r3, [pc, #164]	; (1000d5c0 <ble_pair_key_request_handler+0x10c>)
1000d51a:	4798      	blx	r3
1000d51c:	482f      	ldr	r0, [pc, #188]	; (1000d5dc <ble_pair_key_request_handler+0x128>)
1000d51e:	4b2a      	ldr	r3, [pc, #168]	; (1000d5c8 <ble_pair_key_request_handler+0x114>)
1000d520:	4798      	blx	r3
				}
				return AT_BLE_FAILURE;
1000d522:	20e2      	movs	r0, #226	; 0xe2
1000d524:	e044      	b.n	1000d5b0 <ble_pair_key_request_handler+0xfc>
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
1000d526:	001a      	movs	r2, r3
1000d528:	3a30      	subs	r2, #48	; 0x30
1000d52a:	2a09      	cmp	r2, #9
1000d52c:	d8db      	bhi.n	1000d4e6 <ble_pair_key_request_handler+0x32>
			  passkey[idx++] = pin;
1000d52e:	aa02      	add	r2, sp, #8
1000d530:	54b3      	strb	r3, [r6, r2]
			  DBG_LOG_CONT("%c", pin);
1000d532:	4038      	ands	r0, r7
1000d534:	4b2a      	ldr	r3, [pc, #168]	; (1000d5e0 <ble_pair_key_request_handler+0x12c>)
1000d536:	4798      	blx	r3
1000d538:	3601      	adds	r6, #1
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
1000d53a:	2e06      	cmp	r6, #6
1000d53c:	d026      	beq.n	1000d58c <ble_pair_key_request_handler+0xd8>
1000d53e:	e7d2      	b.n	1000d4e6 <ble_pair_key_request_handler+0x32>
          {
            DBG_LOG("Entered Pass-code:");
          }
          else
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
1000d540:	481e      	ldr	r0, [pc, #120]	; (1000d5bc <ble_pair_key_request_handler+0x108>)
1000d542:	4b1f      	ldr	r3, [pc, #124]	; (1000d5c0 <ble_pair_key_request_handler+0x10c>)
1000d544:	4798      	blx	r3
1000d546:	4827      	ldr	r0, [pc, #156]	; (1000d5e4 <ble_pair_key_request_handler+0x130>)
1000d548:	4b1f      	ldr	r3, [pc, #124]	; (1000d5c8 <ble_pair_key_request_handler+0x114>)
1000d54a:	4798      	blx	r3
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000d54c:	2400      	movs	r4, #0
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
1000d54e:	4e24      	ldr	r6, [pc, #144]	; (1000d5e0 <ble_pair_key_request_handler+0x12c>)
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
1000d550:	ab02      	add	r3, sp, #8
                  DBG_LOG_CONT("%c",passkey[idx]);
1000d552:	5ce0      	ldrb	r0, [r4, r3]
1000d554:	47b0      	blx	r6
1000d556:	3401      	adds	r4, #1
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
1000d558:	2c06      	cmp	r4, #6
1000d55a:	d1f9      	bne.n	1000d550 <ble_pair_key_request_handler+0x9c>
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
          }		
          
          if(!((at_ble_pair_key_reply(pair_key->handle, pair_key_request.type, passkey)) == AT_BLE_SUCCESS))
1000d55c:	ab01      	add	r3, sp, #4
1000d55e:	7899      	ldrb	r1, [r3, #2]
1000d560:	8828      	ldrh	r0, [r5, #0]
1000d562:	aa02      	add	r2, sp, #8
1000d564:	4b20      	ldr	r3, [pc, #128]	; (1000d5e8 <ble_pair_key_request_handler+0x134>)
1000d566:	4798      	blx	r3
1000d568:	2800      	cmp	r0, #0
1000d56a:	d021      	beq.n	1000d5b0 <ble_pair_key_request_handler+0xfc>
          {
                  DBG_LOG("Pair-key reply failed");
1000d56c:	4813      	ldr	r0, [pc, #76]	; (1000d5bc <ble_pair_key_request_handler+0x108>)
1000d56e:	4b14      	ldr	r3, [pc, #80]	; (1000d5c0 <ble_pair_key_request_handler+0x10c>)
1000d570:	4798      	blx	r3
1000d572:	481e      	ldr	r0, [pc, #120]	; (1000d5ec <ble_pair_key_request_handler+0x138>)
1000d574:	4b14      	ldr	r3, [pc, #80]	; (1000d5c8 <ble_pair_key_request_handler+0x114>)
1000d576:	4798      	blx	r3
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000d578:	2000      	movs	r0, #0
1000d57a:	e019      	b.n	1000d5b0 <ble_pair_key_request_handler+0xfc>
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
1000d57c:	480f      	ldr	r0, [pc, #60]	; (1000d5bc <ble_pair_key_request_handler+0x108>)
1000d57e:	4b10      	ldr	r3, [pc, #64]	; (1000d5c0 <ble_pair_key_request_handler+0x10c>)
1000d580:	4798      	blx	r3
1000d582:	481b      	ldr	r0, [pc, #108]	; (1000d5f0 <ble_pair_key_request_handler+0x13c>)
1000d584:	4b10      	ldr	r3, [pc, #64]	; (1000d5c8 <ble_pair_key_request_handler+0x114>)
1000d586:	4798      	blx	r3
		}
	}
	return AT_BLE_SUCCESS;	
1000d588:	2000      	movs	r0, #0
1000d58a:	e011      	b.n	1000d5b0 <ble_pair_key_request_handler+0xfc>
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
	   (pair_key_request.type == AT_BLE_PAIR_PASSKEY)) || (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY))
	{
          if(pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY)
          {
            DBG_LOG("Entered Pass-code:");
1000d58c:	480b      	ldr	r0, [pc, #44]	; (1000d5bc <ble_pair_key_request_handler+0x108>)
1000d58e:	4b0c      	ldr	r3, [pc, #48]	; (1000d5c0 <ble_pair_key_request_handler+0x10c>)
1000d590:	4798      	blx	r3
1000d592:	4818      	ldr	r0, [pc, #96]	; (1000d5f4 <ble_pair_key_request_handler+0x140>)
1000d594:	4b0c      	ldr	r3, [pc, #48]	; (1000d5c8 <ble_pair_key_request_handler+0x114>)
1000d596:	4798      	blx	r3
1000d598:	e7d8      	b.n	1000d54c <ble_pair_key_request_handler+0x98>
			} 
	  }
	}	
	
	/* Display passkey */
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
1000d59a:	ab01      	add	r3, sp, #4
1000d59c:	885a      	ldrh	r2, [r3, #2]
1000d59e:	2380      	movs	r3, #128	; 0x80
1000d5a0:	005b      	lsls	r3, r3, #1
1000d5a2:	429a      	cmp	r2, r3
1000d5a4:	d0cc      	beq.n	1000d540 <ble_pair_key_request_handler+0x8c>
                  DBG_LOG("Pair-key reply failed");
          }
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
1000d5a6:	ab01      	add	r3, sp, #4
1000d5a8:	789b      	ldrb	r3, [r3, #2]
1000d5aa:	2b01      	cmp	r3, #1
1000d5ac:	d0e6      	beq.n	1000d57c <ble_pair_key_request_handler+0xc8>
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000d5ae:	2000      	movs	r0, #0
}
1000d5b0:	b005      	add	sp, #20
1000d5b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d5b4:	10017f1c 	.word	0x10017f1c
1000d5b8:	100165f7 	.word	0x100165f7
1000d5bc:	100177b0 	.word	0x100177b0
1000d5c0:	10016871 	.word	0x10016871
1000d5c4:	10018198 	.word	0x10018198
1000d5c8:	10016751 	.word	0x10016751
1000d5cc:	1000e13d 	.word	0x1000e13d
1000d5d0:	100181c0 	.word	0x100181c0
1000d5d4:	100181cc 	.word	0x100181cc
1000d5d8:	1000fb79 	.word	0x1000fb79
1000d5dc:	100180b4 	.word	0x100180b4
1000d5e0:	10016785 	.word	0x10016785
1000d5e4:	100181e0 	.word	0x100181e0
1000d5e8:	100106a1 	.word	0x100106a1
1000d5ec:	10018218 	.word	0x10018218
1000d5f0:	10018230 	.word	0x10018230
1000d5f4:	1001824c 	.word	0x1001824c

1000d5f8 <ble_encryption_request_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption requests */
at_ble_status_t ble_encryption_request_handler(void *params)
{
1000d5f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000d5fa:	0006      	movs	r6, r0
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000d5fc:	8805      	ldrh	r5, [r0, #0]
1000d5fe:	4b2f      	ldr	r3, [pc, #188]	; (1000d6bc <ble_encryption_request_handler+0xc4>)
1000d600:	2200      	movs	r2, #0
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d602:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000d604:	0010      	movs	r0, r2
1000d606:	8919      	ldrh	r1, [r3, #8]
1000d608:	42a9      	cmp	r1, r5
1000d60a:	d116      	bne.n	1000d63a <ble_encryption_request_handler+0x42>
1000d60c:	0019      	movs	r1, r3
1000d60e:	315e      	adds	r1, #94	; 0x5e
1000d610:	7809      	ldrb	r1, [r1, #0]
1000d612:	2901      	cmp	r1, #1
1000d614:	d911      	bls.n	1000d63a <ble_encryption_request_handler+0x42>
		(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE))
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000d616:	4929      	ldr	r1, [pc, #164]	; (1000d6bc <ble_encryption_request_handler+0xc4>)
1000d618:	0152      	lsls	r2, r2, #5
1000d61a:	1a10      	subs	r0, r2, r0
1000d61c:	0080      	lsls	r0, r0, #2
1000d61e:	1808      	adds	r0, r1, r0
1000d620:	305e      	adds	r0, #94	; 0x5e
1000d622:	2306      	movs	r3, #6
1000d624:	7003      	strb	r3, [r0, #0]
	{
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
		DBG_LOG_DEV("The index is %d",idx);
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
1000d626:	0162      	lsls	r2, r4, #5
1000d628:	1b13      	subs	r3, r2, r4
1000d62a:	009b      	lsls	r3, r3, #2
1000d62c:	18cb      	adds	r3, r1, r3
1000d62e:	3370      	adds	r3, #112	; 0x70
1000d630:	881a      	ldrh	r2, [r3, #0]
1000d632:	8873      	ldrh	r3, [r6, #2]
1000d634:	429a      	cmp	r2, r3
1000d636:	d113      	bne.n	1000d660 <ble_encryption_request_handler+0x68>
1000d638:	e006      	b.n	1000d648 <ble_encryption_request_handler+0x50>
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d63a:	3401      	adds	r4, #1
1000d63c:	b2e4      	uxtb	r4, r4
1000d63e:	3201      	adds	r2, #1
1000d640:	337c      	adds	r3, #124	; 0x7c
1000d642:	2c05      	cmp	r4, #5
1000d644:	d1de      	bne.n	1000d604 <ble_encryption_request_handler+0xc>
1000d646:	e00b      	b.n	1000d660 <ble_encryption_request_handler+0x68>
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
		DBG_LOG_DEV("The index is %d",idx);
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
		&& !memcmp(&enc_req->nb[0],&ble_dev_info[idx].host_ltk.nb[0],8))
1000d648:	0161      	lsls	r1, r4, #5
1000d64a:	1b09      	subs	r1, r1, r4
1000d64c:	0089      	lsls	r1, r1, #2
1000d64e:	4b1b      	ldr	r3, [pc, #108]	; (1000d6bc <ble_encryption_request_handler+0xc4>)
1000d650:	1859      	adds	r1, r3, r1
1000d652:	3172      	adds	r1, #114	; 0x72
1000d654:	1d30      	adds	r0, r6, #4
1000d656:	2208      	movs	r2, #8
1000d658:	4b19      	ldr	r3, [pc, #100]	; (1000d6c0 <ble_encryption_request_handler+0xc8>)
1000d65a:	4798      	blx	r3
			DBG_LOG_DEV("ENC-Req: Key Found");
		}
	}
	
	
    if(key_found == false)
1000d65c:	2800      	cmp	r0, #0
1000d65e:	d015      	beq.n	1000d68c <ble_encryption_request_handler+0x94>
    {
	    DBG_LOG("Pairing information of peer device is not available.");
1000d660:	4f18      	ldr	r7, [pc, #96]	; (1000d6c4 <ble_encryption_request_handler+0xcc>)
1000d662:	0038      	movs	r0, r7
1000d664:	4e18      	ldr	r6, [pc, #96]	; (1000d6c8 <ble_encryption_request_handler+0xd0>)
1000d666:	47b0      	blx	r6
1000d668:	4818      	ldr	r0, [pc, #96]	; (1000d6cc <ble_encryption_request_handler+0xd4>)
1000d66a:	4d19      	ldr	r5, [pc, #100]	; (1000d6d0 <ble_encryption_request_handler+0xd8>)
1000d66c:	47a8      	blx	r5
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
1000d66e:	0038      	movs	r0, r7
1000d670:	47b0      	blx	r6
1000d672:	4818      	ldr	r0, [pc, #96]	; (1000d6d4 <ble_encryption_request_handler+0xdc>)
1000d674:	47a8      	blx	r5
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
1000d676:	0163      	lsls	r3, r4, #5
1000d678:	1b1c      	subs	r4, r3, r4
1000d67a:	00a4      	lsls	r4, r4, #2
1000d67c:	4b0f      	ldr	r3, [pc, #60]	; (1000d6bc <ble_encryption_request_handler+0xc4>)
1000d67e:	191c      	adds	r4, r3, r4
1000d680:	8920      	ldrh	r0, [r4, #8]
1000d682:	2105      	movs	r1, #5
1000d684:	4b14      	ldr	r3, [pc, #80]	; (1000d6d8 <ble_encryption_request_handler+0xe0>)
1000d686:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000d688:	20e2      	movs	r0, #226	; 0xe2
1000d68a:	e016      	b.n	1000d6ba <ble_encryption_request_handler+0xc2>
    }

	if(!(at_ble_encryption_request_reply(enc_req->handle, ble_dev_info[idx].bond_info.auth, key_found, &ble_dev_info[idx].host_ltk) == AT_BLE_SUCCESS))
1000d68c:	0162      	lsls	r2, r4, #5
1000d68e:	1b13      	subs	r3, r2, r4
1000d690:	009b      	lsls	r3, r3, #2
1000d692:	3360      	adds	r3, #96	; 0x60
1000d694:	4909      	ldr	r1, [pc, #36]	; (1000d6bc <ble_encryption_request_handler+0xc4>)
1000d696:	185b      	adds	r3, r3, r1
1000d698:	1b14      	subs	r4, r2, r4
1000d69a:	00a4      	lsls	r4, r4, #2
1000d69c:	190c      	adds	r4, r1, r4
1000d69e:	7d21      	ldrb	r1, [r4, #20]
1000d6a0:	8830      	ldrh	r0, [r6, #0]
1000d6a2:	2201      	movs	r2, #1
1000d6a4:	4c0d      	ldr	r4, [pc, #52]	; (1000d6dc <ble_encryption_request_handler+0xe4>)
1000d6a6:	47a0      	blx	r4
1000d6a8:	2800      	cmp	r0, #0
1000d6aa:	d006      	beq.n	1000d6ba <ble_encryption_request_handler+0xc2>
	{
		DBG_LOG("Encryption Request Reply Failed");
1000d6ac:	4805      	ldr	r0, [pc, #20]	; (1000d6c4 <ble_encryption_request_handler+0xcc>)
1000d6ae:	4b06      	ldr	r3, [pc, #24]	; (1000d6c8 <ble_encryption_request_handler+0xd0>)
1000d6b0:	4798      	blx	r3
1000d6b2:	480b      	ldr	r0, [pc, #44]	; (1000d6e0 <ble_encryption_request_handler+0xe8>)
1000d6b4:	4b06      	ldr	r3, [pc, #24]	; (1000d6d0 <ble_encryption_request_handler+0xd8>)
1000d6b6:	4798      	blx	r3
	}
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
	}
	return AT_BLE_SUCCESS;
1000d6b8:	2000      	movs	r0, #0
}
1000d6ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000d6bc:	1001a758 	.word	0x1001a758
1000d6c0:	100165d9 	.word	0x100165d9
1000d6c4:	100177b0 	.word	0x100177b0
1000d6c8:	10016871 	.word	0x10016871
1000d6cc:	10018260 	.word	0x10018260
1000d6d0:	10016751 	.word	0x10016751
1000d6d4:	10018298 	.word	0x10018298
1000d6d8:	1000fb79 	.word	0x1000fb79
1000d6dc:	100107d5 	.word	0x100107d5
1000d6e0:	100182f0 	.word	0x100182f0

1000d6e4 <ble_mgr_events_callback_handler>:
}

bool ble_mgr_events_callback_handler(ble_mgr_event_cb_t event_cb_type, 
									ble_mgr_event_t event_type,
									const ble_event_callback_t *ble_event_handler)
{
1000d6e4:	b530      	push	{r4, r5, lr}
	uint8_t idx;
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
1000d6e6:	2a00      	cmp	r2, #0
1000d6e8:	d047      	beq.n	1000d77a <ble_mgr_events_callback_handler+0x96>
	{
		switch(event_type)
1000d6ea:	2906      	cmp	r1, #6
1000d6ec:	d847      	bhi.n	1000d77e <ble_mgr_events_callback_handler+0x9a>
1000d6ee:	0089      	lsls	r1, r1, #2
1000d6f0:	4b28      	ldr	r3, [pc, #160]	; (1000d794 <ble_mgr_events_callback_handler+0xb0>)
1000d6f2:	585b      	ldr	r3, [r3, r1]
1000d6f4:	469f      	mov	pc, r3
			}
			break;
			
			case BLE_GATT_SERVER_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_server_event_cb;
1000d6f6:	4b28      	ldr	r3, [pc, #160]	; (1000d798 <ble_mgr_events_callback_handler+0xb4>)
				max_event_handler = MAX_GATT_SERVER_SUBSCRIBERS;
1000d6f8:	2405      	movs	r4, #5
1000d6fa:	e00a      	b.n	1000d712 <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_GATT_HTPT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_htpt_event_cb;
1000d6fc:	4b27      	ldr	r3, [pc, #156]	; (1000d79c <ble_mgr_events_callback_handler+0xb8>)
				max_event_handler = MAX_HTPT_EVENT_SUBSCRIBERS;
1000d6fe:	2401      	movs	r4, #1
			}
			break;
1000d700:	e007      	b.n	1000d712 <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_DTM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_dtm_event_cb;
1000d702:	4b27      	ldr	r3, [pc, #156]	; (1000d7a0 <ble_mgr_events_callback_handler+0xbc>)
				max_event_handler = MAX_DTM_EVENT_SUBSCRIBERS;
1000d704:	2405      	movs	r4, #5
			}
			break;
1000d706:	e004      	b.n	1000d712 <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_CUSTOM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_custom_event_cb;
1000d708:	4b26      	ldr	r3, [pc, #152]	; (1000d7a4 <ble_mgr_events_callback_handler+0xc0>)
				max_event_handler = MAX_CUSTOM_EVENT_SUBSCRIBERS;
1000d70a:	2401      	movs	r4, #1
			}
			break;
1000d70c:	e001      	b.n	1000d712 <ble_mgr_events_callback_handler+0x2e>
	{
		switch(event_type)
		{
			case BLE_GAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gap_event_cb;
1000d70e:	4b26      	ldr	r3, [pc, #152]	; (1000d7a8 <ble_mgr_events_callback_handler+0xc4>)
				max_event_handler = MAX_GAP_EVENT_SUBSCRIBERS;
1000d710:	2405      	movs	r4, #5
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
1000d712:	2800      	cmp	r0, #0
1000d714:	d116      	bne.n	1000d744 <ble_mgr_events_callback_handler+0x60>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000d716:	6819      	ldr	r1, [r3, #0]
1000d718:	2900      	cmp	r1, #0
1000d71a:	d10b      	bne.n	1000d734 <ble_mgr_events_callback_handler+0x50>
1000d71c:	e006      	b.n	1000d72c <ble_mgr_events_callback_handler+0x48>
1000d71e:	001d      	movs	r5, r3
1000d720:	3304      	adds	r3, #4
1000d722:	1f18      	subs	r0, r3, #4
1000d724:	6800      	ldr	r0, [r0, #0]
1000d726:	2800      	cmp	r0, #0
1000d728:	d106      	bne.n	1000d738 <ble_mgr_events_callback_handler+0x54>
1000d72a:	e000      	b.n	1000d72e <ble_mgr_events_callback_handler+0x4a>
1000d72c:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = ble_event_handler;
1000d72e:	602a      	str	r2, [r5, #0]
						status = true; //Successfully registered to table
1000d730:	2101      	movs	r1, #1
						break;
1000d732:	e02c      	b.n	1000d78e <ble_mgr_events_callback_handler+0xaa>
1000d734:	3304      	adds	r3, #4
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000d736:	2100      	movs	r1, #0
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000d738:	3101      	adds	r1, #1
1000d73a:	b2c9      	uxtb	r1, r1
1000d73c:	42a1      	cmp	r1, r4
1000d73e:	d3ee      	bcc.n	1000d71e <ble_mgr_events_callback_handler+0x3a>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000d740:	2100      	movs	r1, #0
1000d742:	e024      	b.n	1000d78e <ble_mgr_events_callback_handler+0xaa>
1000d744:	2100      	movs	r1, #0
						status = true; //Successfully registered to table
						break;
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
1000d746:	2801      	cmp	r0, #1
1000d748:	d121      	bne.n	1000d78e <ble_mgr_events_callback_handler+0xaa>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000d74a:	6819      	ldr	r1, [r3, #0]
1000d74c:	428a      	cmp	r2, r1
1000d74e:	d10c      	bne.n	1000d76a <ble_mgr_events_callback_handler+0x86>
1000d750:	e006      	b.n	1000d760 <ble_mgr_events_callback_handler+0x7c>
1000d752:	001d      	movs	r5, r3
1000d754:	3304      	adds	r3, #4
1000d756:	1f18      	subs	r0, r3, #4
1000d758:	6800      	ldr	r0, [r0, #0]
1000d75a:	4282      	cmp	r2, r0
1000d75c:	d107      	bne.n	1000d76e <ble_mgr_events_callback_handler+0x8a>
1000d75e:	e000      	b.n	1000d762 <ble_mgr_events_callback_handler+0x7e>
1000d760:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = NULL;
1000d762:	2300      	movs	r3, #0
1000d764:	602b      	str	r3, [r5, #0]
						status = true;//Successfully unregistered from table
1000d766:	2101      	movs	r1, #1
						break;
1000d768:	e011      	b.n	1000d78e <ble_mgr_events_callback_handler+0xaa>
1000d76a:	3304      	adds	r3, #4
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000d76c:	2100      	movs	r1, #0
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000d76e:	3101      	adds	r1, #1
1000d770:	b2c9      	uxtb	r1, r1
1000d772:	42a1      	cmp	r1, r4
1000d774:	d3ed      	bcc.n	1000d752 <ble_mgr_events_callback_handler+0x6e>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000d776:	2100      	movs	r1, #0
1000d778:	e009      	b.n	1000d78e <ble_mgr_events_callback_handler+0xaa>
			}			
		}
	}
	else
	{
		status = false; //Invalid parameter
1000d77a:	2100      	movs	r1, #0
1000d77c:	e007      	b.n	1000d78e <ble_mgr_events_callback_handler+0xaa>
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
	{
		switch(event_type)
1000d77e:	2100      	movs	r1, #0
1000d780:	e005      	b.n	1000d78e <ble_mgr_events_callback_handler+0xaa>
			}
			break;
			
			case BLE_GATT_CLIENT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_client_event_cb;
1000d782:	4b0a      	ldr	r3, [pc, #40]	; (1000d7ac <ble_mgr_events_callback_handler+0xc8>)
				max_event_handler = MAX_GATT_CLIENT_SUBSCRIBERS;
1000d784:	2405      	movs	r4, #5
1000d786:	e7c4      	b.n	1000d712 <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_L2CAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_l2cap_event_cb;
1000d788:	4b09      	ldr	r3, [pc, #36]	; (1000d7b0 <ble_mgr_events_callback_handler+0xcc>)
				max_event_handler = MAX_L2CAP_EVENT_SUBSCRIBERS;
1000d78a:	2401      	movs	r4, #1
1000d78c:	e7c1      	b.n	1000d712 <ble_mgr_events_callback_handler+0x2e>
	else
	{
		status = false; //Invalid parameter
	}
	return status;
}
1000d78e:	0008      	movs	r0, r1
1000d790:	bd30      	pop	{r4, r5, pc}
1000d792:	46c0      	nop			; (mov r8, r8)
1000d794:	10017e10 	.word	0x10017e10
1000d798:	1001a744 	.word	0x1001a744
1000d79c:	1001a740 	.word	0x1001a740
1000d7a0:	1001a9c8 	.word	0x1001a9c8
1000d7a4:	1001af7c 	.word	0x1001af7c
1000d7a8:	1001a9dc 	.word	0x1001a9dc
1000d7ac:	1001a9f0 	.word	0x1001a9f0
1000d7b0:	1001aa38 	.word	0x1001aa38

1000d7b4 <ble_device_init>:
volatile uint32_t 	event_params_memory[1024] 	= {0};


/** @brief BLE device initialization */
void ble_device_init(at_ble_addr_t *addr)
{
1000d7b4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d7b6:	465f      	mov	r7, fp
1000d7b8:	4656      	mov	r6, sl
1000d7ba:	464d      	mov	r5, r9
1000d7bc:	4644      	mov	r4, r8
1000d7be:	b4f0      	push	{r4, r5, r6, r7}
1000d7c0:	b08d      	sub	sp, #52	; 0x34
1000d7c2:	0006      	movs	r6, r0
static bool ble_scan_duplication_check(at_ble_scan_info_t * info);
#endif

static void init_global_var(void)
{
	ble_user_event_cb = 0;
1000d7c4:	2400      	movs	r4, #0
1000d7c6:	4b72      	ldr	r3, [pc, #456]	; (1000d990 <ble_device_init+0x1dc>)
1000d7c8:	601c      	str	r4, [r3, #0]
	
	memset(&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000d7ca:	2207      	movs	r2, #7
1000d7cc:	2100      	movs	r1, #0
1000d7ce:	4871      	ldr	r0, [pc, #452]	; (1000d994 <ble_device_init+0x1e0>)
1000d7d0:	4d71      	ldr	r5, [pc, #452]	; (1000d998 <ble_device_init+0x1e4>)
1000d7d2:	47a8      	blx	r5
	memset(&connected_state_info, 0, sizeof(at_ble_connected_t));
1000d7d4:	2212      	movs	r2, #18
1000d7d6:	2100      	movs	r1, #0
1000d7d8:	4870      	ldr	r0, [pc, #448]	; (1000d99c <ble_device_init+0x1e8>)
1000d7da:	47a8      	blx	r5
		
#if defined ATT_DB_MEMORY
	memset(att_db_data, 0, sizeof(uint32_t) * BLE_ATT_DB_MEMORY_SIZE/4);
1000d7dc:	4a70      	ldr	r2, [pc, #448]	; (1000d9a0 <ble_device_init+0x1ec>)
1000d7de:	2100      	movs	r1, #0
1000d7e0:	4870      	ldr	r0, [pc, #448]	; (1000d9a4 <ble_device_init+0x1f0>)
1000d7e2:	47a8      	blx	r5
#endif

	scan_response_count = 0;
1000d7e4:	4b70      	ldr	r3, [pc, #448]	; (1000d9a8 <ble_device_init+0x1f4>)
1000d7e6:	701c      	strb	r4, [r3, #0]
	memset(scan_info, 0, sizeof(scan_info));
1000d7e8:	22cd      	movs	r2, #205	; 0xcd
1000d7ea:	0092      	lsls	r2, r2, #2
1000d7ec:	2100      	movs	r1, #0
1000d7ee:	486f      	ldr	r0, [pc, #444]	; (1000d9ac <ble_device_init+0x1f8>)
1000d7f0:	47a8      	blx	r5

	event = AT_BLE_UNDEFINED_EVENT;
1000d7f2:	4b6f      	ldr	r3, [pc, #444]	; (1000d9b0 <ble_device_init+0x1fc>)
1000d7f4:	701c      	strb	r4, [r3, #0]
	memset(ble_event_params, 0, BLE_EVENT_PARAM_MAX_SIZE);
1000d7f6:	2283      	movs	r2, #131	; 0x83
1000d7f8:	0092      	lsls	r2, r2, #2
1000d7fa:	2100      	movs	r1, #0
1000d7fc:	486d      	ldr	r0, [pc, #436]	; (1000d9b4 <ble_device_init+0x200>)
1000d7fe:	47a8      	blx	r5
{
	uint8_t idx;	
	char *dev_name = NULL;
	init_global_var();

	memset((uint8_t *)event_pool_memory, 0, sizeof(event_pool_memory));
1000d800:	4b6d      	ldr	r3, [pc, #436]	; (1000d9b8 <ble_device_init+0x204>)
1000d802:	469b      	mov	fp, r3
1000d804:	2380      	movs	r3, #128	; 0x80
1000d806:	00db      	lsls	r3, r3, #3
1000d808:	469a      	mov	sl, r3
1000d80a:	001a      	movs	r2, r3
1000d80c:	2100      	movs	r1, #0
1000d80e:	4658      	mov	r0, fp
1000d810:	47a8      	blx	r5
	memset((uint8_t *)event_params_memory, 0, sizeof(event_params_memory));
1000d812:	4b6a      	ldr	r3, [pc, #424]	; (1000d9bc <ble_device_init+0x208>)
1000d814:	4699      	mov	r9, r3
1000d816:	2380      	movs	r3, #128	; 0x80
1000d818:	015b      	lsls	r3, r3, #5
1000d81a:	4698      	mov	r8, r3
1000d81c:	001a      	movs	r2, r3
1000d81e:	2100      	movs	r1, #0
1000d820:	4648      	mov	r0, r9
1000d822:	47a8      	blx	r5

	memset(&pf_cfg, 0, sizeof(pf_cfg));
1000d824:	4f66      	ldr	r7, [pc, #408]	; (1000d9c0 <ble_device_init+0x20c>)
1000d826:	221c      	movs	r2, #28
1000d828:	2100      	movs	r1, #0
1000d82a:	0038      	movs	r0, r7
1000d82c:	47a8      	blx	r5

	pf_cfg.event_mem_pool.memStartAdd        = (uint8_t *)event_pool_memory;
1000d82e:	465b      	mov	r3, fp
1000d830:	60bb      	str	r3, [r7, #8]
	pf_cfg.event_mem_pool.memSize            = sizeof(event_pool_memory);
1000d832:	4653      	mov	r3, sl
1000d834:	60fb      	str	r3, [r7, #12]
	pf_cfg.event_params_mem_pool.memStartAdd = (uint8_t *)event_params_memory;
1000d836:	464b      	mov	r3, r9
1000d838:	613b      	str	r3, [r7, #16]
	pf_cfg.event_params_mem_pool.memSize     = sizeof(event_params_memory);
1000d83a:	4643      	mov	r3, r8
1000d83c:	617b      	str	r3, [r7, #20]

	/* Initialize the BLE Event callbacks */
	for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gap_event_cb[idx] = NULL;
1000d83e:	4b61      	ldr	r3, [pc, #388]	; (1000d9c4 <ble_device_init+0x210>)
1000d840:	601c      	str	r4, [r3, #0]
1000d842:	605c      	str	r4, [r3, #4]
1000d844:	609c      	str	r4, [r3, #8]
1000d846:	60dc      	str	r4, [r3, #12]
1000d848:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_client_event_cb[idx] = NULL;
1000d84a:	4b5f      	ldr	r3, [pc, #380]	; (1000d9c8 <ble_device_init+0x214>)
1000d84c:	601c      	str	r4, [r3, #0]
1000d84e:	605c      	str	r4, [r3, #4]
1000d850:	609c      	str	r4, [r3, #8]
1000d852:	60dc      	str	r4, [r3, #12]
1000d854:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_server_event_cb[idx] = NULL;
1000d856:	4b5d      	ldr	r3, [pc, #372]	; (1000d9cc <ble_device_init+0x218>)
1000d858:	601c      	str	r4, [r3, #0]
1000d85a:	605c      	str	r4, [r3, #4]
1000d85c:	609c      	str	r4, [r3, #8]
1000d85e:	60dc      	str	r4, [r3, #12]
1000d860:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_l2cap_event_cb[idx] = NULL;
1000d862:	4b5b      	ldr	r3, [pc, #364]	; (1000d9d0 <ble_device_init+0x21c>)
1000d864:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_htpt_event_cb[idx] = NULL;
1000d866:	4b5b      	ldr	r3, [pc, #364]	; (1000d9d4 <ble_device_init+0x220>)
1000d868:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_dtm_event_cb[idx] = NULL;
1000d86a:	4b5b      	ldr	r3, [pc, #364]	; (1000d9d8 <ble_device_init+0x224>)
1000d86c:	601c      	str	r4, [r3, #0]
1000d86e:	605c      	str	r4, [r3, #4]
1000d870:	609c      	str	r4, [r3, #8]
1000d872:	60dc      	str	r4, [r3, #12]
1000d874:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_custom_event_cb[idx] = NULL;
1000d876:	4b59      	ldr	r3, [pc, #356]	; (1000d9dc <ble_device_init+0x228>)
1000d878:	601c      	str	r4, [r3, #0]
1000d87a:	4c59      	ldr	r4, [pc, #356]	; (1000d9e0 <ble_device_init+0x22c>)
1000d87c:	239b      	movs	r3, #155	; 0x9b
1000d87e:	009b      	lsls	r3, r3, #2
1000d880:	4698      	mov	r8, r3
1000d882:	44a0      	add	r8, r4
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000d884:	4f44      	ldr	r7, [pc, #272]	; (1000d998 <ble_device_init+0x1e4>)
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000d886:	2540      	movs	r5, #64	; 0x40
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000d888:	227c      	movs	r2, #124	; 0x7c
1000d88a:	2100      	movs	r1, #0
1000d88c:	0020      	movs	r0, r4
1000d88e:	47b8      	blx	r7
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000d890:	0023      	movs	r3, r4
1000d892:	335e      	adds	r3, #94	; 0x5e
1000d894:	2200      	movs	r2, #0
1000d896:	701a      	strb	r2, [r3, #0]
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000d898:	7625      	strb	r5, [r4, #24]
1000d89a:	347c      	adds	r4, #124	; 0x7c
	{
		ble_mgr_custom_event_cb[idx] = NULL;
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d89c:	45a0      	cmp	r8, r4
1000d89e:	d1f3      	bne.n	1000d888 <ble_device_init+0xd4>
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
    }
	/* Need to reset the count to 0 for storing it only in SRAM */
	ble_device_count = 0; 
1000d8a0:	4b50      	ldr	r3, [pc, #320]	; (1000d9e4 <ble_device_init+0x230>)
1000d8a2:	701a      	strb	r2, [r3, #0]
	
	
#if defined ATT_DB_MEMORY
	pf_cfg.memPool.memSize = BLE_ATT_DB_MEMORY_SIZE;
1000d8a4:	4846      	ldr	r0, [pc, #280]	; (1000d9c0 <ble_device_init+0x20c>)
1000d8a6:	4b3e      	ldr	r3, [pc, #248]	; (1000d9a0 <ble_device_init+0x1ec>)
1000d8a8:	6043      	str	r3, [r0, #4]
	pf_cfg.memPool.memStartAdd = (uint8_t *)att_db_data;
1000d8aa:	4b3e      	ldr	r3, [pc, #248]	; (1000d9a4 <ble_device_init+0x1f0>)
1000d8ac:	6003      	str	r3, [r0, #0]
{
	/* Initialize the platform */
	DBG_LOG_DEV("[ble_init]\t\t\tInitializing SAMB11");
	
	/* Init BLE device */
	if(at_ble_init(args) != AT_BLE_SUCCESS)
1000d8ae:	4b4e      	ldr	r3, [pc, #312]	; (1000d9e8 <ble_device_init+0x234>)
1000d8b0:	4798      	blx	r3
1000d8b2:	2800      	cmp	r0, #0
1000d8b4:	d00b      	beq.n	1000d8ce <ble_device_init+0x11a>
	{
		DBG_LOG("[ble_init]\t\tSAMB11 Initialization failed");
1000d8b6:	4e4d      	ldr	r6, [pc, #308]	; (1000d9ec <ble_device_init+0x238>)
1000d8b8:	0030      	movs	r0, r6
1000d8ba:	4d4d      	ldr	r5, [pc, #308]	; (1000d9f0 <ble_device_init+0x23c>)
1000d8bc:	47a8      	blx	r5
1000d8be:	484d      	ldr	r0, [pc, #308]	; (1000d9f4 <ble_device_init+0x240>)
1000d8c0:	4c4d      	ldr	r4, [pc, #308]	; (1000d9f8 <ble_device_init+0x244>)
1000d8c2:	47a0      	blx	r4
		DBG_LOG("[ble_init]\t\tPlease check the power and connection / hardware connector");	
1000d8c4:	0030      	movs	r0, r6
1000d8c6:	47a8      	blx	r5
1000d8c8:	484c      	ldr	r0, [pc, #304]	; (1000d9fc <ble_device_init+0x248>)
1000d8ca:	47a0      	blx	r4
1000d8cc:	e7fe      	b.n	1000d8cc <ble_device_init+0x118>
#endif
	
	ble_init(&pf_cfg);

	/* Register it in first index of callback handler */
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, 
1000d8ce:	4a4c      	ldr	r2, [pc, #304]	; (1000da00 <ble_device_init+0x24c>)
1000d8d0:	2100      	movs	r1, #0
1000d8d2:	2000      	movs	r0, #0
1000d8d4:	4c4b      	ldr	r4, [pc, #300]	; (1000da04 <ble_device_init+0x250>)
1000d8d6:	47a0      	blx	r4
									BLE_GAP_EVENT_TYPE, 
									ble_mgr_gap_handle);
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
1000d8d8:	4a4b      	ldr	r2, [pc, #300]	; (1000da08 <ble_device_init+0x254>)
1000d8da:	2102      	movs	r1, #2
1000d8dc:	2000      	movs	r0, #0
1000d8de:	47a0      	blx	r4
{
	if ((name == NULL) || (name_len < 1))
	{
		return AT_BLE_INVALID_PARAM;
	}
	return at_ble_device_name_set(name, name_len);
1000d8e0:	2109      	movs	r1, #9
1000d8e2:	484a      	ldr	r0, [pc, #296]	; (1000da0c <ble_device_init+0x258>)
1000d8e4:	4b4a      	ldr	r3, [pc, #296]	; (1000da10 <ble_device_init+0x25c>)
1000d8e6:	4798      	blx	r3
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
									BLE_GATT_SERVER_EVENT_TYPE,
									ble_mgr_gatt_server_handle);
									
	dev_name = (char *)BLE_DEVICE_NAME;
	if (ble_set_device_name((uint8_t *)dev_name, strlen(dev_name)) != AT_BLE_SUCCESS)
1000d8e8:	2800      	cmp	r0, #0
1000d8ea:	d005      	beq.n	1000d8f8 <ble_device_init+0x144>
	{
		DBG_LOG("Device name set failed");
1000d8ec:	483f      	ldr	r0, [pc, #252]	; (1000d9ec <ble_device_init+0x238>)
1000d8ee:	4b40      	ldr	r3, [pc, #256]	; (1000d9f0 <ble_device_init+0x23c>)
1000d8f0:	4798      	blx	r3
1000d8f2:	4848      	ldr	r0, [pc, #288]	; (1000da14 <ble_device_init+0x260>)
1000d8f4:	4b40      	ldr	r3, [pc, #256]	; (1000d9f8 <ble_device_init+0x244>)
1000d8f6:	4798      	blx	r3

/* Set BLE Address and device configuration, If address is NULL then it will use BD public address */
static void ble_set_dev_config(at_ble_addr_t *addr)
{
	at_ble_dev_config_t stDevConfig;
	at_ble_addr_t address = {AT_BLE_ADDRESS_PUBLIC, {0xAB, 0xCD, 0xEF, 0xAB, 0xCD, 0xEF}};
1000d8f8:	2207      	movs	r2, #7
1000d8fa:	4947      	ldr	r1, [pc, #284]	; (1000da18 <ble_device_init+0x264>)
1000d8fc:	3108      	adds	r1, #8
1000d8fe:	4668      	mov	r0, sp
1000d900:	4b46      	ldr	r3, [pc, #280]	; (1000da1c <ble_device_init+0x268>)
1000d902:	4798      	blx	r3
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
1000d904:	2226      	movs	r2, #38	; 0x26
1000d906:	2100      	movs	r1, #0
1000d908:	a802      	add	r0, sp, #8
1000d90a:	4b23      	ldr	r3, [pc, #140]	; (1000d998 <ble_device_init+0x1e4>)
1000d90c:	4798      	blx	r3
	
	if (addr == NULL)
1000d90e:	2e00      	cmp	r6, #0
1000d910:	d10c      	bne.n	1000d92c <ble_device_init+0x178>
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000d912:	4668      	mov	r0, sp
1000d914:	4b42      	ldr	r3, [pc, #264]	; (1000da20 <ble_device_init+0x26c>)
1000d916:	4798      	blx	r3
		{
			DBG_LOG("[ble_set_dev_config]\t\tBD address get failed");
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000d918:	466e      	mov	r6, sp
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
	
	if (addr == NULL)
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000d91a:	2800      	cmp	r0, #0
1000d91c:	d006      	beq.n	1000d92c <ble_device_init+0x178>
		{
			DBG_LOG("[ble_set_dev_config]\t\tBD address get failed");
1000d91e:	4833      	ldr	r0, [pc, #204]	; (1000d9ec <ble_device_init+0x238>)
1000d920:	4b33      	ldr	r3, [pc, #204]	; (1000d9f0 <ble_device_init+0x23c>)
1000d922:	4798      	blx	r3
1000d924:	483f      	ldr	r0, [pc, #252]	; (1000da24 <ble_device_init+0x270>)
1000d926:	4b34      	ldr	r3, [pc, #208]	; (1000d9f8 <ble_device_init+0x244>)
1000d928:	4798      	blx	r3
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000d92a:	466e      	mov	r6, sp
	addr->addr[1],
	addr->addr[0], addr->type);
	
	/* Set device configuration */
	/* Device role */
	stDevConfig.role = (at_ble_dev_role_t)BLE_DEVICE_ROLE;
1000d92c:	ac02      	add	r4, sp, #8
1000d92e:	230a      	movs	r3, #10
1000d930:	7023      	strb	r3, [r4, #0]
	/* device renew duration */
	stDevConfig.renew_dur = AT_RENEW_DUR_VAL_MIN;
1000d932:	4b3d      	ldr	r3, [pc, #244]	; (1000da28 <ble_device_init+0x274>)
1000d934:	8063      	strh	r3, [r4, #2]
	/* device address type */
	memcpy((uint8_t *)&stDevConfig.address, (uint8_t *)addr, sizeof(at_ble_addr_t));
1000d936:	2207      	movs	r2, #7
1000d938:	0031      	movs	r1, r6
1000d93a:	a803      	add	r0, sp, #12
1000d93c:	4b37      	ldr	r3, [pc, #220]	; (1000da1c <ble_device_init+0x268>)
1000d93e:	4798      	blx	r3
	/* Attributes */
	stDevConfig.att_cfg.b2NamePerm = AT_BLE_WRITE_DISABLE;
1000d940:	2300      	movs	r3, #0
1000d942:	76e3      	strb	r3, [r4, #27]
	stDevConfig.att_cfg.b2AppearancePerm = AT_BLE_WRITE_DISABLE;
1000d944:	7723      	strb	r3, [r4, #28]
	stDevConfig.att_cfg.b1EnableSpcs = 0;
1000d946:	7763      	strb	r3, [r4, #29]
	stDevConfig.att_cfg.b1EnableServiceChanged = 0;
1000d948:	77a3      	strb	r3, [r4, #30]
	stDevConfig.att_cfg.b2Rfu = AT_BLE_WRITE_DISABLE;
1000d94a:	77e3      	strb	r3, [r4, #31]
	/* Handles */
	stDevConfig.gap_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000d94c:	8423      	strh	r3, [r4, #32]
	stDevConfig.gatt_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000d94e:	8463      	strh	r3, [r4, #34]	; 0x22
	/* MTU */
	stDevConfig.max_mtu = AT_MTU_VAL_RECOMMENDED;
1000d950:	2380      	movs	r3, #128	; 0x80
1000d952:	009b      	lsls	r3, r3, #2
1000d954:	84a3      	strh	r3, [r4, #36]	; 0x24
	
	if(at_ble_set_dev_config(&stDevConfig) != AT_BLE_SUCCESS)
1000d956:	0020      	movs	r0, r4
1000d958:	4b34      	ldr	r3, [pc, #208]	; (1000da2c <ble_device_init+0x278>)
1000d95a:	4798      	blx	r3
1000d95c:	2800      	cmp	r0, #0
1000d95e:	d005      	beq.n	1000d96c <ble_device_init+0x1b8>
	{
		DBG_LOG("[ble_set_dev_config]\tSet BLE Device configuration failed");
1000d960:	4822      	ldr	r0, [pc, #136]	; (1000d9ec <ble_device_init+0x238>)
1000d962:	4b23      	ldr	r3, [pc, #140]	; (1000d9f0 <ble_device_init+0x23c>)
1000d964:	4798      	blx	r3
1000d966:	4832      	ldr	r0, [pc, #200]	; (1000da30 <ble_device_init+0x27c>)
1000d968:	4b23      	ldr	r3, [pc, #140]	; (1000d9f8 <ble_device_init+0x244>)
1000d96a:	4798      	blx	r3
	}
	
	if (at_ble_addr_set(addr) != AT_BLE_SUCCESS)
1000d96c:	0030      	movs	r0, r6
1000d96e:	4b31      	ldr	r3, [pc, #196]	; (1000da34 <ble_device_init+0x280>)
1000d970:	4798      	blx	r3
1000d972:	2800      	cmp	r0, #0
1000d974:	d005      	beq.n	1000d982 <ble_device_init+0x1ce>
	{
		DBG_LOG("[ble_set_dev_config]\tSet BLE Device Address failed");
1000d976:	481d      	ldr	r0, [pc, #116]	; (1000d9ec <ble_device_init+0x238>)
1000d978:	4b1d      	ldr	r3, [pc, #116]	; (1000d9f0 <ble_device_init+0x23c>)
1000d97a:	4798      	blx	r3
1000d97c:	482e      	ldr	r0, [pc, #184]	; (1000da38 <ble_device_init+0x284>)
1000d97e:	4b1e      	ldr	r3, [pc, #120]	; (1000d9f8 <ble_device_init+0x244>)
1000d980:	4798      	blx	r3
	{
		DBG_LOG("Device name set failed");
	}
	
	ble_set_dev_config(addr);	
}
1000d982:	b00d      	add	sp, #52	; 0x34
1000d984:	bc3c      	pop	{r2, r3, r4, r5}
1000d986:	4690      	mov	r8, r2
1000d988:	4699      	mov	r9, r3
1000d98a:	46a2      	mov	sl, r4
1000d98c:	46ab      	mov	fp, r5
1000d98e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d990:	10019264 	.word	0x10019264
1000d994:	1001926c 	.word	0x1001926c
1000d998:	10016609 	.word	0x10016609
1000d99c:	1001aa04 	.word	0x1001aa04
1000d9a0:	000004e2 	.word	0x000004e2
1000d9a4:	10018d84 	.word	0x10018d84
1000d9a8:	10019268 	.word	0x10019268
1000d9ac:	1001aa3c 	.word	0x1001aa3c
1000d9b0:	1001aa34 	.word	0x1001aa34
1000d9b4:	1001ad70 	.word	0x1001ad70
1000d9b8:	10018984 	.word	0x10018984
1000d9bc:	10019274 	.word	0x10019274
1000d9c0:	1001aa18 	.word	0x1001aa18
1000d9c4:	1001a9dc 	.word	0x1001a9dc
1000d9c8:	1001a9f0 	.word	0x1001a9f0
1000d9cc:	1001a744 	.word	0x1001a744
1000d9d0:	1001aa38 	.word	0x1001aa38
1000d9d4:	1001a740 	.word	0x1001a740
1000d9d8:	1001a9c8 	.word	0x1001a9c8
1000d9dc:	1001af7c 	.word	0x1001af7c
1000d9e0:	1001a758 	.word	0x1001a758
1000d9e4:	1001a9c4 	.word	0x1001a9c4
1000d9e8:	1000f785 	.word	0x1000f785
1000d9ec:	100177b0 	.word	0x100177b0
1000d9f0:	10016871 	.word	0x10016871
1000d9f4:	10018310 	.word	0x10018310
1000d9f8:	10016751 	.word	0x10016751
1000d9fc:	1001833c 	.word	0x1001833c
1000da00:	10018590 	.word	0x10018590
1000da04:	1000d6e5 	.word	0x1000d6e5
1000da08:	10017f2c 	.word	0x10017f2c
1000da0c:	10018384 	.word	0x10018384
1000da10:	1000f69d 	.word	0x1000f69d
1000da14:	10018390 	.word	0x10018390
1000da18:	10017f1c 	.word	0x10017f1c
1000da1c:	100165f7 	.word	0x100165f7
1000da20:	1000f6d1 	.word	0x1000f6d1
1000da24:	100183a8 	.word	0x100183a8
1000da28:	00003a98 	.word	0x00003a98
1000da2c:	1000f6f5 	.word	0x1000f6f5
1000da30:	100183d4 	.word	0x100183d4
1000da34:	1000f939 	.word	0x1000f939
1000da38:	10018410 	.word	0x10018410

1000da3c <ble_send_slave_sec_request>:
	return AT_BLE_FAILURE;
}

/** @brief function to send slave security request */
at_ble_status_t ble_send_slave_sec_request(at_ble_handle_t conn_handle)
{
1000da3c:	b510      	push	{r4, lr}
	#if BLE_PAIR_ENABLE
		if (at_ble_send_slave_sec_request(conn_handle, BLE_MITM_REQ, BLE_BOND_REQ) == AT_BLE_SUCCESS)
1000da3e:	2200      	movs	r2, #0
1000da40:	2100      	movs	r1, #0
1000da42:	4b06      	ldr	r3, [pc, #24]	; (1000da5c <ble_send_slave_sec_request+0x20>)
1000da44:	4798      	blx	r3
1000da46:	2800      	cmp	r0, #0
1000da48:	d006      	beq.n	1000da58 <ble_send_slave_sec_request+0x1c>
			DBG_LOG_DEV("Slave security request successful");
			return AT_BLE_SUCCESS;
		}
		else
		{
			DBG_LOG("Slave security request failed");
1000da4a:	4805      	ldr	r0, [pc, #20]	; (1000da60 <ble_send_slave_sec_request+0x24>)
1000da4c:	4b05      	ldr	r3, [pc, #20]	; (1000da64 <ble_send_slave_sec_request+0x28>)
1000da4e:	4798      	blx	r3
1000da50:	4805      	ldr	r0, [pc, #20]	; (1000da68 <ble_send_slave_sec_request+0x2c>)
1000da52:	4b06      	ldr	r3, [pc, #24]	; (1000da6c <ble_send_slave_sec_request+0x30>)
1000da54:	4798      	blx	r3
		}
	#endif
	return AT_BLE_FAILURE;
1000da56:	20e2      	movs	r0, #226	; 0xe2
}
1000da58:	bd10      	pop	{r4, pc}
1000da5a:	46c0      	nop			; (mov r8, r8)
1000da5c:	1001071d 	.word	0x1001071d
1000da60:	100177b0 	.word	0x100177b0
1000da64:	10016871 	.word	0x10016871
1000da68:	10018460 	.word	0x10018460
1000da6c:	10016751 	.word	0x10016751

1000da70 <ble_connected_state_handler>:
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000da70:	b5f0      	push	{r4, r5, r6, r7, lr}
1000da72:	465f      	mov	r7, fp
1000da74:	464e      	mov	r6, r9
1000da76:	4645      	mov	r5, r8
1000da78:	b4e0      	push	{r5, r6, r7}
1000da7a:	b09a      	sub	sp, #104	; 0x68
1000da7c:	0005      	movs	r5, r0
	at_ble_connected_t *conn_params;
	uint8_t idx = 0;
	conn_params = (at_ble_connected_t *)params;
	bool peripheral_device_added = false;
	
	if (conn_params->conn_status == AT_BLE_SUCCESS)
1000da7e:	7a86      	ldrb	r6, [r0, #10]
1000da80:	2e00      	cmp	r6, #0
1000da82:	d000      	beq.n	1000da86 <ble_connected_state_handler+0x16>
1000da84:	e0c6      	b.n	1000dc14 <ble_connected_state_handler+0x1a4>
	{
		DBG_LOG("Connected to peer device with address 0x%02x%02x%02x%02x%02x%02x",
1000da86:	4875      	ldr	r0, [pc, #468]	; (1000dc5c <ble_connected_state_handler+0x1ec>)
1000da88:	4f75      	ldr	r7, [pc, #468]	; (1000dc60 <ble_connected_state_handler+0x1f0>)
1000da8a:	47b8      	blx	r7
1000da8c:	792b      	ldrb	r3, [r5, #4]
1000da8e:	796a      	ldrb	r2, [r5, #5]
1000da90:	79a9      	ldrb	r1, [r5, #6]
1000da92:	7868      	ldrb	r0, [r5, #1]
1000da94:	9002      	str	r0, [sp, #8]
1000da96:	78a8      	ldrb	r0, [r5, #2]
1000da98:	9001      	str	r0, [sp, #4]
1000da9a:	78e8      	ldrb	r0, [r5, #3]
1000da9c:	9000      	str	r0, [sp, #0]
1000da9e:	4871      	ldr	r0, [pc, #452]	; (1000dc64 <ble_connected_state_handler+0x1f4>)
1000daa0:	4c71      	ldr	r4, [pc, #452]	; (1000dc68 <ble_connected_state_handler+0x1f8>)
1000daa2:	47a0      	blx	r4
		conn_params->peer_addr.addr[3],
		conn_params->peer_addr.addr[2],
		conn_params->peer_addr.addr[1],
		conn_params->peer_addr.addr[0]);
		
		DBG_LOG("Connection Handle %d", conn_params->handle);
1000daa4:	486d      	ldr	r0, [pc, #436]	; (1000dc5c <ble_connected_state_handler+0x1ec>)
1000daa6:	47b8      	blx	r7
1000daa8:	8929      	ldrh	r1, [r5, #8]
1000daaa:	4870      	ldr	r0, [pc, #448]	; (1000dc6c <ble_connected_state_handler+0x1fc>)
1000daac:	47a0      	blx	r4
		
		memcpy((uint8_t *)&connected_state_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));	
1000daae:	2212      	movs	r2, #18
1000dab0:	0029      	movs	r1, r5
1000dab2:	486f      	ldr	r0, [pc, #444]	; (1000dc70 <ble_connected_state_handler+0x200>)
1000dab4:	4b6f      	ldr	r3, [pc, #444]	; (1000dc74 <ble_connected_state_handler+0x204>)
1000dab6:	4798      	blx	r3
		if(memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000dab8:	9504      	str	r5, [sp, #16]
1000daba:	2207      	movs	r2, #7
1000dabc:	0029      	movs	r1, r5
1000dabe:	486e      	ldr	r0, [pc, #440]	; (1000dc78 <ble_connected_state_handler+0x208>)
1000dac0:	4b6e      	ldr	r3, [pc, #440]	; (1000dc7c <ble_connected_state_handler+0x20c>)
1000dac2:	4798      	blx	r3
1000dac4:	2800      	cmp	r0, #0
1000dac6:	d100      	bne.n	1000daca <ble_connected_state_handler+0x5a>
1000dac8:	e0ad      	b.n	1000dc26 <ble_connected_state_handler+0x1b6>
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
1000daca:	782b      	ldrb	r3, [r5, #0]
1000dacc:	2b02      	cmp	r3, #2
1000dace:	d000      	beq.n	1000dad2 <ble_connected_state_handler+0x62>
1000dad0:	e0a9      	b.n	1000dc26 <ble_connected_state_handler+0x1b6>
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
1000dad2:	2250      	movs	r2, #80	; 0x50
1000dad4:	2100      	movs	r1, #0
1000dad6:	a806      	add	r0, sp, #24
1000dad8:	4b69      	ldr	r3, [pc, #420]	; (1000dc80 <ble_connected_state_handler+0x210>)
1000dada:	4798      	blx	r3
1000dadc:	4f69      	ldr	r7, [pc, #420]	; (1000dc84 <ble_connected_state_handler+0x214>)
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
1000dade:	2300      	movs	r3, #0
1000dae0:	e00b      	b.n	1000dafa <ble_connected_state_handler+0x8a>
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000dae2:	1c59      	adds	r1, r3, #1
1000dae4:	7814      	ldrb	r4, [r2, #0]
1000dae6:	a806      	add	r0, sp, #24
1000dae8:	54c4      	strb	r4, [r0, r3]
1000daea:	3201      	adds	r2, #1
1000daec:	b28b      	uxth	r3, r1
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
1000daee:	42b3      	cmp	r3, r6
1000daf0:	d1f7      	bne.n	1000dae2 <ble_connected_state_handler+0x72>
1000daf2:	377c      	adds	r7, #124	; 0x7c
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000daf4:	1e33      	subs	r3, r6, #0
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
1000daf6:	2b50      	cmp	r3, #80	; 0x50
1000daf8:	d004      	beq.n	1000db04 <ble_connected_state_handler+0x94>
1000dafa:	001e      	movs	r6, r3
1000dafc:	3610      	adds	r6, #16
1000dafe:	b2b6      	uxth	r6, r6
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000db00:	003a      	movs	r2, r7
1000db02:	e7ee      	b.n	1000dae2 <ble_connected_state_handler+0x72>
					}
					
				}
				if (nb_keys)
				{
					if(at_ble_random_address_resolve(BLE_MAX_DEVICE_CONNECTED, &conn_params->peer_addr, irk_key) == AT_BLE_SUCCESS)
1000db04:	aa06      	add	r2, sp, #24
1000db06:	0029      	movs	r1, r5
1000db08:	2005      	movs	r0, #5
1000db0a:	4b5f      	ldr	r3, [pc, #380]	; (1000dc88 <ble_connected_state_handler+0x218>)
1000db0c:	4798      	blx	r3
1000db0e:	1e06      	subs	r6, r0, #0
1000db10:	d100      	bne.n	1000db14 <ble_connected_state_handler+0xa4>
1000db12:	e09c      	b.n	1000dc4e <ble_connected_state_handler+0x1de>
						DBG_LOG_DEV("Resolving Random address success**");
						return AT_BLE_SUCCESS;
					}
					else
					{
						DBG_LOG("Resolving Random address failed**");
1000db14:	4851      	ldr	r0, [pc, #324]	; (1000dc5c <ble_connected_state_handler+0x1ec>)
1000db16:	4b52      	ldr	r3, [pc, #328]	; (1000dc60 <ble_connected_state_handler+0x1f0>)
1000db18:	4798      	blx	r3
1000db1a:	485c      	ldr	r0, [pc, #368]	; (1000dc8c <ble_connected_state_handler+0x21c>)
1000db1c:	4b52      	ldr	r3, [pc, #328]	; (1000dc68 <ble_connected_state_handler+0x1f8>)
1000db1e:	4798      	blx	r3
						return AT_BLE_FAILURE;
1000db20:	26e2      	movs	r6, #226	; 0xe2
1000db22:	e094      	b.n	1000dc4e <ble_connected_state_handler+0x1de>
1000db24:	b2e7      	uxtb	r7, r4
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000db26:	9405      	str	r4, [sp, #20]
1000db28:	2207      	movs	r2, #7
1000db2a:	9904      	ldr	r1, [sp, #16]
1000db2c:	4648      	mov	r0, r9
1000db2e:	47d8      	blx	fp
1000db30:	2800      	cmp	r0, #0
1000db32:	d109      	bne.n	1000db48 <ble_connected_state_handler+0xd8>
				{
					ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000db34:	9a05      	ldr	r2, [sp, #20]
1000db36:	0153      	lsls	r3, r2, #5
1000db38:	1a9b      	subs	r3, r3, r2
1000db3a:	009a      	lsls	r2, r3, #2
1000db3c:	4b54      	ldr	r3, [pc, #336]	; (1000dc90 <ble_connected_state_handler+0x220>)
1000db3e:	189b      	adds	r3, r3, r2
1000db40:	335e      	adds	r3, #94	; 0x5e
1000db42:	2202      	movs	r2, #2
1000db44:	701a      	strb	r2, [r3, #0]
1000db46:	e02b      	b.n	1000dba0 <ble_connected_state_handler+0x130>
1000db48:	3401      	adds	r4, #1
1000db4a:	237c      	movs	r3, #124	; 0x7c
1000db4c:	469c      	mov	ip, r3
1000db4e:	44e1      	add	r9, ip
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000db50:	2c05      	cmp	r4, #5
1000db52:	d1e7      	bne.n	1000db24 <ble_connected_state_handler+0xb4>
1000db54:	e072      	b.n	1000dc3c <ble_connected_state_handler+0x1cc>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000db56:	001c      	movs	r4, r3
1000db58:	7811      	ldrb	r1, [r2, #0]
1000db5a:	2900      	cmp	r1, #0
1000db5c:	d11a      	bne.n	1000db94 <ble_connected_state_handler+0x124>
1000db5e:	e001      	b.n	1000db64 <ble_connected_state_handler+0xf4>
1000db60:	2400      	movs	r4, #0
1000db62:	2700      	movs	r7, #0
					{
						/* @Todo Need to Handle Random Address */
						memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));
1000db64:	0163      	lsls	r3, r4, #5
1000db66:	4699      	mov	r9, r3
1000db68:	1b18      	subs	r0, r3, r4
1000db6a:	0080      	lsls	r0, r0, #2
1000db6c:	4b48      	ldr	r3, [pc, #288]	; (1000dc90 <ble_connected_state_handler+0x220>)
1000db6e:	4698      	mov	r8, r3
1000db70:	4440      	add	r0, r8
1000db72:	2212      	movs	r2, #18
1000db74:	0029      	movs	r1, r5
1000db76:	4b3f      	ldr	r3, [pc, #252]	; (1000dc74 <ble_connected_state_handler+0x204>)
1000db78:	4798      	blx	r3
						ble_device_count++;
1000db7a:	4a46      	ldr	r2, [pc, #280]	; (1000dc94 <ble_connected_state_handler+0x224>)
1000db7c:	7813      	ldrb	r3, [r2, #0]
1000db7e:	3301      	adds	r3, #1
1000db80:	b2db      	uxtb	r3, r3
1000db82:	7013      	strb	r3, [r2, #0]
						ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000db84:	464b      	mov	r3, r9
1000db86:	1b1b      	subs	r3, r3, r4
1000db88:	009b      	lsls	r3, r3, #2
1000db8a:	4443      	add	r3, r8
1000db8c:	335e      	adds	r3, #94	; 0x5e
1000db8e:	2202      	movs	r2, #2
1000db90:	701a      	strb	r2, [r3, #0]
						break;
1000db92:	e005      	b.n	1000dba0 <ble_connected_state_handler+0x130>
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000db94:	1c79      	adds	r1, r7, #1
1000db96:	b2cf      	uxtb	r7, r1
1000db98:	3301      	adds	r3, #1
1000db9a:	327c      	adds	r2, #124	; 0x7c
1000db9c:	2f05      	cmp	r7, #5
1000db9e:	d1da      	bne.n	1000db56 <ble_connected_state_handler+0xe6>
						break;
					}
				}
			}
			
			if(!memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000dba0:	2207      	movs	r2, #7
1000dba2:	0029      	movs	r1, r5
1000dba4:	4834      	ldr	r0, [pc, #208]	; (1000dc78 <ble_connected_state_handler+0x208>)
1000dba6:	4b35      	ldr	r3, [pc, #212]	; (1000dc7c <ble_connected_state_handler+0x20c>)
1000dba8:	4798      	blx	r3
1000dbaa:	2800      	cmp	r0, #0
1000dbac:	d10c      	bne.n	1000dbc8 <ble_connected_state_handler+0x158>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
1000dbae:	017b      	lsls	r3, r7, #5
1000dbb0:	1bdb      	subs	r3, r3, r7
1000dbb2:	009b      	lsls	r3, r3, #2
1000dbb4:	4a36      	ldr	r2, [pc, #216]	; (1000dc90 <ble_connected_state_handler+0x220>)
1000dbb6:	18d3      	adds	r3, r2, r3
1000dbb8:	2205      	movs	r2, #5
1000dbba:	749a      	strb	r2, [r3, #18]
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000dbbc:	3202      	adds	r2, #2
1000dbbe:	2100      	movs	r1, #0
1000dbc0:	482d      	ldr	r0, [pc, #180]	; (1000dc78 <ble_connected_state_handler+0x208>)
1000dbc2:	4b2f      	ldr	r3, [pc, #188]	; (1000dc80 <ble_connected_state_handler+0x210>)
1000dbc4:	4798      	blx	r3
1000dbc6:	e042      	b.n	1000dc4e <ble_connected_state_handler+0x1de>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
			}
			else
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000dbc8:	4b31      	ldr	r3, [pc, #196]	; (1000dc90 <ble_connected_state_handler+0x220>)
1000dbca:	4698      	mov	r8, r3
1000dbcc:	017c      	lsls	r4, r7, #5
1000dbce:	1be3      	subs	r3, r4, r7
1000dbd0:	009b      	lsls	r3, r3, #2
1000dbd2:	4443      	add	r3, r8
1000dbd4:	220a      	movs	r2, #10
1000dbd6:	749a      	strb	r2, [r3, #18]
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000dbd8:	3a03      	subs	r2, #3
1000dbda:	2100      	movs	r1, #0
1000dbdc:	4826      	ldr	r0, [pc, #152]	; (1000dc78 <ble_connected_state_handler+0x208>)
1000dbde:	4b28      	ldr	r3, [pc, #160]	; (1000dc80 <ble_connected_state_handler+0x210>)
1000dbe0:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
		}		
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000dbe2:	1be4      	subs	r4, r4, r7
1000dbe4:	00a4      	lsls	r4, r4, #2
1000dbe6:	4444      	add	r4, r8
1000dbe8:	7ca3      	ldrb	r3, [r4, #18]
1000dbea:	2b0a      	cmp	r3, #10
1000dbec:	d12f      	bne.n	1000dc4e <ble_connected_state_handler+0x1de>
1000dbee:	e00d      	b.n	1000dc0c <ble_connected_state_handler+0x19c>
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
					
		}
		else
		{
			DBG_LOG("Max number of connection reached: %d ===>Disconnecting...", ble_device_count);
1000dbf0:	481a      	ldr	r0, [pc, #104]	; (1000dc5c <ble_connected_state_handler+0x1ec>)
1000dbf2:	4b1b      	ldr	r3, [pc, #108]	; (1000dc60 <ble_connected_state_handler+0x1f0>)
1000dbf4:	4798      	blx	r3
1000dbf6:	4b27      	ldr	r3, [pc, #156]	; (1000dc94 <ble_connected_state_handler+0x224>)
1000dbf8:	7819      	ldrb	r1, [r3, #0]
1000dbfa:	b2c9      	uxtb	r1, r1
1000dbfc:	4826      	ldr	r0, [pc, #152]	; (1000dc98 <ble_connected_state_handler+0x228>)
1000dbfe:	4b1a      	ldr	r3, [pc, #104]	; (1000dc68 <ble_connected_state_handler+0x1f8>)
1000dc00:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
1000dc02:	8928      	ldrh	r0, [r5, #8]
1000dc04:	2113      	movs	r1, #19
1000dc06:	4b25      	ldr	r3, [pc, #148]	; (1000dc9c <ble_connected_state_handler+0x22c>)
1000dc08:	4798      	blx	r3
1000dc0a:	e020      	b.n	1000dc4e <ble_connected_state_handler+0x1de>
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
        {
	 		ble_send_slave_sec_request(conn_params->handle);
1000dc0c:	8928      	ldrh	r0, [r5, #8]
1000dc0e:	4b24      	ldr	r3, [pc, #144]	; (1000dca0 <ble_connected_state_handler+0x230>)
1000dc10:	4798      	blx	r3
1000dc12:	e01c      	b.n	1000dc4e <ble_connected_state_handler+0x1de>
        }
#endif
	} 
	else
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
1000dc14:	4811      	ldr	r0, [pc, #68]	; (1000dc5c <ble_connected_state_handler+0x1ec>)
1000dc16:	4b12      	ldr	r3, [pc, #72]	; (1000dc60 <ble_connected_state_handler+0x1f0>)
1000dc18:	4798      	blx	r3
1000dc1a:	7aa9      	ldrb	r1, [r5, #10]
1000dc1c:	4821      	ldr	r0, [pc, #132]	; (1000dca4 <ble_connected_state_handler+0x234>)
1000dc1e:	4b12      	ldr	r3, [pc, #72]	; (1000dc68 <ble_connected_state_handler+0x1f8>)
1000dc20:	4798      	blx	r3
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
1000dc22:	2600      	movs	r6, #0
1000dc24:	e013      	b.n	1000dc4e <ble_connected_state_handler+0x1de>
					DBG_LOG_DEV("New Connection");
				}				
			}
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
1000dc26:	4b1b      	ldr	r3, [pc, #108]	; (1000dc94 <ble_connected_state_handler+0x224>)
1000dc28:	781b      	ldrb	r3, [r3, #0]
1000dc2a:	b2db      	uxtb	r3, r3
1000dc2c:	2b04      	cmp	r3, #4
1000dc2e:	d8df      	bhi.n	1000dbf0 <ble_connected_state_handler+0x180>
1000dc30:	4b17      	ldr	r3, [pc, #92]	; (1000dc90 <ble_connected_state_handler+0x220>)
1000dc32:	4699      	mov	r9, r3
1000dc34:	2400      	movs	r4, #0
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000dc36:	4b11      	ldr	r3, [pc, #68]	; (1000dc7c <ble_connected_state_handler+0x20c>)
1000dc38:	469b      	mov	fp, r3
1000dc3a:	e773      	b.n	1000db24 <ble_connected_state_handler+0xb4>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000dc3c:	235e      	movs	r3, #94	; 0x5e
1000dc3e:	4a14      	ldr	r2, [pc, #80]	; (1000dc90 <ble_connected_state_handler+0x220>)
1000dc40:	5cd3      	ldrb	r3, [r2, r3]
1000dc42:	2b00      	cmp	r3, #0
1000dc44:	d08c      	beq.n	1000db60 <ble_connected_state_handler+0xf0>
1000dc46:	4a18      	ldr	r2, [pc, #96]	; (1000dca8 <ble_connected_state_handler+0x238>)
1000dc48:	2301      	movs	r3, #1
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000dc4a:	2701      	movs	r7, #1
1000dc4c:	e783      	b.n	1000db56 <ble_connected_state_handler+0xe6>
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
}
1000dc4e:	0030      	movs	r0, r6
1000dc50:	b01a      	add	sp, #104	; 0x68
1000dc52:	bc1c      	pop	{r2, r3, r4}
1000dc54:	4690      	mov	r8, r2
1000dc56:	4699      	mov	r9, r3
1000dc58:	46a3      	mov	fp, r4
1000dc5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000dc5c:	100177b0 	.word	0x100177b0
1000dc60:	10016871 	.word	0x10016871
1000dc64:	10018480 	.word	0x10018480
1000dc68:	10016751 	.word	0x10016751
1000dc6c:	100184c4 	.word	0x100184c4
1000dc70:	1001aa04 	.word	0x1001aa04
1000dc74:	100165f7 	.word	0x100165f7
1000dc78:	1001926c 	.word	0x1001926c
1000dc7c:	100165d9 	.word	0x100165d9
1000dc80:	10016609 	.word	0x10016609
1000dc84:	1001a79e 	.word	0x1001a79e
1000dc88:	1000fba5 	.word	0x1000fba5
1000dc8c:	100184dc 	.word	0x100184dc
1000dc90:	1001a758 	.word	0x1001a758
1000dc94:	1001a9c4 	.word	0x1001a9c4
1000dc98:	10018500 	.word	0x10018500
1000dc9c:	1000fb79 	.word	0x1000fb79
1000dca0:	1000da3d 	.word	0x1000da3d
1000dca4:	1001853c 	.word	0x1001853c
1000dca8:	1001a832 	.word	0x1001a832

1000dcac <ble_resolv_rand_addr_handler>:

at_ble_status_t ble_resolv_rand_addr_handler(void *params)
{
1000dcac:	b5f0      	push	{r4, r5, r6, r7, lr}
1000dcae:	4647      	mov	r7, r8
1000dcb0:	b480      	push	{r7}
	uint8_t idx;	
	bool device_found = false;
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
1000dcb2:	7803      	ldrb	r3, [r0, #0]
1000dcb4:	2b00      	cmp	r3, #0
1000dcb6:	d141      	bne.n	1000dd3c <ble_resolv_rand_addr_handler+0x90>
1000dcb8:	4d2f      	ldr	r5, [pc, #188]	; (1000dd78 <ble_resolv_rand_addr_handler+0xcc>)
1000dcba:	2400      	movs	r4, #0
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			/* Check the Resolved Address */
			if (!memcmp((uint8_t *)ble_resolv_rand_addr_status->irk, (uint8_t *)ble_dev_info[idx].bond_info.peer_irk.key, AT_BLE_MAX_KEY_LEN))
1000dcbc:	1c46      	adds	r6, r0, #1
1000dcbe:	4f2f      	ldr	r7, [pc, #188]	; (1000dd7c <ble_resolv_rand_addr_handler+0xd0>)
1000dcc0:	2210      	movs	r2, #16
1000dcc2:	0029      	movs	r1, r5
1000dcc4:	0030      	movs	r0, r6
1000dcc6:	47b8      	blx	r7
1000dcc8:	2800      	cmp	r0, #0
1000dcca:	d03f      	beq.n	1000dd4c <ble_resolv_rand_addr_handler+0xa0>
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000dccc:	3401      	adds	r4, #1
1000dcce:	b2e4      	uxtb	r4, r4
1000dcd0:	357c      	adds	r5, #124	; 0x7c
1000dcd2:	2c05      	cmp	r4, #5
1000dcd4:	d1f4      	bne.n	1000dcc0 <ble_resolv_rand_addr_handler+0x14>
1000dcd6:	e031      	b.n	1000dd3c <ble_resolv_rand_addr_handler+0x90>
1000dcd8:	b2dd      	uxtb	r5, r3
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000dcda:	001c      	movs	r4, r3
1000dcdc:	7811      	ldrb	r1, [r2, #0]
1000dcde:	2900      	cmp	r1, #0
1000dce0:	d122      	bne.n	1000dd28 <ble_resolv_rand_addr_handler+0x7c>
1000dce2:	e001      	b.n	1000dce8 <ble_resolv_rand_addr_handler+0x3c>
1000dce4:	2400      	movs	r4, #0
1000dce6:	2500      	movs	r5, #0
			{
				memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000dce8:	4b25      	ldr	r3, [pc, #148]	; (1000dd80 <ble_resolv_rand_addr_handler+0xd4>)
1000dcea:	4698      	mov	r8, r3
1000dcec:	0166      	lsls	r6, r4, #5
1000dcee:	1b37      	subs	r7, r6, r4
1000dcf0:	00bf      	lsls	r7, r7, #2
1000dcf2:	4447      	add	r7, r8
1000dcf4:	2212      	movs	r2, #18
1000dcf6:	4923      	ldr	r1, [pc, #140]	; (1000dd84 <ble_resolv_rand_addr_handler+0xd8>)
1000dcf8:	0038      	movs	r0, r7
1000dcfa:	4b23      	ldr	r3, [pc, #140]	; (1000dd88 <ble_resolv_rand_addr_handler+0xdc>)
1000dcfc:	4798      	blx	r3
				ble_device_count++;
1000dcfe:	4a23      	ldr	r2, [pc, #140]	; (1000dd8c <ble_resolv_rand_addr_handler+0xe0>)
1000dd00:	7813      	ldrb	r3, [r2, #0]
1000dd02:	3301      	adds	r3, #1
1000dd04:	b2db      	uxtb	r3, r3
1000dd06:	7013      	strb	r3, [r2, #0]
				ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000dd08:	375e      	adds	r7, #94	; 0x5e
1000dd0a:	2302      	movs	r3, #2
1000dd0c:	703b      	strb	r3, [r7, #0]
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000dd0e:	1b34      	subs	r4, r6, r4
1000dd10:	00a4      	lsls	r4, r4, #2
1000dd12:	4444      	add	r4, r8
1000dd14:	3308      	adds	r3, #8
1000dd16:	74a3      	strb	r3, [r4, #18]
			}
		}
	}
	DBG_LOG_DEV("Device idx:%d",idx);
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000dd18:	016b      	lsls	r3, r5, #5
1000dd1a:	1b5d      	subs	r5, r3, r5
1000dd1c:	00ad      	lsls	r5, r5, #2
1000dd1e:	4445      	add	r5, r8
1000dd20:	7cab      	ldrb	r3, [r5, #18]
1000dd22:	2b0a      	cmp	r3, #10
1000dd24:	d123      	bne.n	1000dd6e <ble_resolv_rand_addr_handler+0xc2>
1000dd26:	e004      	b.n	1000dd32 <ble_resolv_rand_addr_handler+0x86>
1000dd28:	3301      	adds	r3, #1
1000dd2a:	327c      	adds	r2, #124	; 0x7c
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000dd2c:	2b05      	cmp	r3, #5
1000dd2e:	d1d3      	bne.n	1000dcd8 <ble_resolv_rand_addr_handler+0x2c>
1000dd30:	e01d      	b.n	1000dd6e <ble_resolv_rand_addr_handler+0xc2>
	}
	DBG_LOG_DEV("Device idx:%d",idx);
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
	{
		ble_send_slave_sec_request(connected_state_info.handle);
1000dd32:	4b14      	ldr	r3, [pc, #80]	; (1000dd84 <ble_resolv_rand_addr_handler+0xd8>)
1000dd34:	8918      	ldrh	r0, [r3, #8]
1000dd36:	4b16      	ldr	r3, [pc, #88]	; (1000dd90 <ble_resolv_rand_addr_handler+0xe4>)
1000dd38:	4798      	blx	r3
	}
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
1000dd3a:	e018      	b.n	1000dd6e <ble_resolv_rand_addr_handler+0xc2>
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000dd3c:	235e      	movs	r3, #94	; 0x5e
1000dd3e:	4a10      	ldr	r2, [pc, #64]	; (1000dd80 <ble_resolv_rand_addr_handler+0xd4>)
1000dd40:	5cd3      	ldrb	r3, [r2, r3]
1000dd42:	2b00      	cmp	r3, #0
1000dd44:	d0ce      	beq.n	1000dce4 <ble_resolv_rand_addr_handler+0x38>
1000dd46:	4a13      	ldr	r2, [pc, #76]	; (1000dd94 <ble_resolv_rand_addr_handler+0xe8>)
1000dd48:	2301      	movs	r3, #1
1000dd4a:	e7c5      	b.n	1000dcd8 <ble_resolv_rand_addr_handler+0x2c>
	}
	
	if (device_found)
	{
		DBG_LOG_DEV("##########Device Found");
		ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000dd4c:	480c      	ldr	r0, [pc, #48]	; (1000dd80 <ble_resolv_rand_addr_handler+0xd4>)
1000dd4e:	0163      	lsls	r3, r4, #5
1000dd50:	1b1a      	subs	r2, r3, r4
1000dd52:	0092      	lsls	r2, r2, #2
1000dd54:	1882      	adds	r2, r0, r2
1000dd56:	0011      	movs	r1, r2
1000dd58:	315e      	adds	r1, #94	; 0x5e
1000dd5a:	2502      	movs	r5, #2
1000dd5c:	700d      	strb	r5, [r1, #0]
		ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000dd5e:	210a      	movs	r1, #10
1000dd60:	7491      	strb	r1, [r2, #18]
		memcpy((uint8_t *)&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000dd62:	0010      	movs	r0, r2
1000dd64:	2212      	movs	r2, #18
1000dd66:	4907      	ldr	r1, [pc, #28]	; (1000dd84 <ble_resolv_rand_addr_handler+0xd8>)
1000dd68:	4b07      	ldr	r3, [pc, #28]	; (1000dd88 <ble_resolv_rand_addr_handler+0xdc>)
1000dd6a:	4798      	blx	r3
1000dd6c:	e7e1      	b.n	1000dd32 <ble_resolv_rand_addr_handler+0x86>
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
	
}
1000dd6e:	2000      	movs	r0, #0
1000dd70:	bc04      	pop	{r2}
1000dd72:	4690      	mov	r8, r2
1000dd74:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000dd76:	46c0      	nop			; (mov r8, r8)
1000dd78:	1001a79e 	.word	0x1001a79e
1000dd7c:	100165d9 	.word	0x100165d9
1000dd80:	1001a758 	.word	0x1001a758
1000dd84:	1001aa04 	.word	0x1001aa04
1000dd88:	100165f7 	.word	0x100165f7
1000dd8c:	1001a9c4 	.word	0x1001a9c4
1000dd90:	1000da3d 	.word	0x1000da3d
1000dd94:	1001a832 	.word	0x1001a832

1000dd98 <ble_event_manager>:
	}
	return AT_BLE_SUCCESS;
}

void ble_event_manager(at_ble_events_t events, void *event_params)
{
1000dd98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000dd9a:	000d      	movs	r5, r1
	DBG_LOG_DEV("\r\nBLE-Event:%d", events);
	switch(events)
1000dd9c:	283b      	cmp	r0, #59	; 0x3b
1000dd9e:	d872      	bhi.n	1000de86 <ble_event_manager+0xee>
1000dda0:	0083      	lsls	r3, r0, #2
1000dda2:	4a3c      	ldr	r2, [pc, #240]	; (1000de94 <ble_event_manager+0xfc>)
1000dda4:	58d3      	ldr	r3, [r2, r3]
1000dda6:	469f      	mov	pc, r3
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000dda8:	0084      	lsls	r4, r0, #2
1000ddaa:	2600      	movs	r6, #0
		}
		#endif			
		
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
1000ddac:	4f3a      	ldr	r7, [pc, #232]	; (1000de98 <ble_event_manager+0x100>)
1000ddae:	59bb      	ldr	r3, [r7, r6]
1000ddb0:	2b00      	cmp	r3, #0
1000ddb2:	d004      	beq.n	1000ddbe <ble_event_manager+0x26>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000ddb4:	591b      	ldr	r3, [r3, r4]
1000ddb6:	2b00      	cmp	r3, #0
1000ddb8:	d001      	beq.n	1000ddbe <ble_event_manager+0x26>
				{
					event_cb_fn[events](event_params);		
1000ddba:	0028      	movs	r0, r5
1000ddbc:	4798      	blx	r3
1000ddbe:	3604      	adds	r6, #4
			if( ble_scan_duplication_check((at_ble_scan_info_t*)event_params) )
				return;
		}
		#endif			
		
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
1000ddc0:	2e14      	cmp	r6, #20
1000ddc2:	d1f4      	bne.n	1000ddae <ble_event_manager+0x16>
1000ddc4:	e065      	b.n	1000de92 <ble_event_manager+0xfa>
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000ddc6:	3813      	subs	r0, #19
1000ddc8:	b2c4      	uxtb	r4, r0
1000ddca:	00a4      	lsls	r4, r4, #2
1000ddcc:	2600      	movs	r6, #0
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
1000ddce:	4f33      	ldr	r7, [pc, #204]	; (1000de9c <ble_event_manager+0x104>)
1000ddd0:	59bb      	ldr	r3, [r7, r6]
1000ddd2:	2b00      	cmp	r3, #0
1000ddd4:	d004      	beq.n	1000dde0 <ble_event_manager+0x48>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000ddd6:	591b      	ldr	r3, [r3, r4]
1000ddd8:	2b00      	cmp	r3, #0
1000ddda:	d001      	beq.n	1000dde0 <ble_event_manager+0x48>
				{
					event_cb_fn[events](event_params);
1000dddc:	0028      	movs	r0, r5
1000ddde:	4798      	blx	r3
1000dde0:	3604      	adds	r6, #4
	case AT_BLE_NOTIFICATION_RECIEVED:
	case AT_BLE_INDICATION_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
1000dde2:	2e14      	cmp	r6, #20
1000dde4:	d1f4      	bne.n	1000ddd0 <ble_event_manager+0x38>
1000dde6:	e054      	b.n	1000de92 <ble_event_manager+0xfa>
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000dde8:	381d      	subs	r0, #29
1000ddea:	b2c4      	uxtb	r4, r0
1000ddec:	00a4      	lsls	r4, r4, #2
1000ddee:	2600      	movs	r6, #0
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
1000ddf0:	4f2b      	ldr	r7, [pc, #172]	; (1000dea0 <ble_event_manager+0x108>)
1000ddf2:	59bb      	ldr	r3, [r7, r6]
1000ddf4:	2b00      	cmp	r3, #0
1000ddf6:	d004      	beq.n	1000de02 <ble_event_manager+0x6a>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000ddf8:	591b      	ldr	r3, [r3, r4]
1000ddfa:	2b00      	cmp	r3, #0
1000ddfc:	d001      	beq.n	1000de02 <ble_event_manager+0x6a>
				{
					event_cb_fn[events](event_params);
1000ddfe:	0028      	movs	r0, r5
1000de00:	4798      	blx	r3
1000de02:	3604      	adds	r6, #4
	case AT_BLE_READ_AUTHORIZE_REQUEST:
	{
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
1000de04:	2e14      	cmp	r6, #20
1000de06:	d1f4      	bne.n	1000ddf2 <ble_event_manager+0x5a>
1000de08:	e043      	b.n	1000de92 <ble_event_manager+0xfa>
	case AT_BLE_LECB_ADD_CREDIT_IND:
	case AT_BLE_LECB_SEND_RESP:
	case AT_BLE_LECB_DATA_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_READ_AUTHORIZE_REQUEST + 1);
1000de0a:	3827      	subs	r0, #39	; 0x27
1000de0c:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_l2cap_event_cb[idx] != NULL)
1000de0e:	4b25      	ldr	r3, [pc, #148]	; (1000dea4 <ble_event_manager+0x10c>)
1000de10:	681b      	ldr	r3, [r3, #0]
1000de12:	2b00      	cmp	r3, #0
1000de14:	d03d      	beq.n	1000de92 <ble_event_manager+0xfa>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_l2cap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000de16:	0080      	lsls	r0, r0, #2
1000de18:	58c3      	ldr	r3, [r0, r3]
1000de1a:	2b00      	cmp	r3, #0
1000de1c:	d039      	beq.n	1000de92 <ble_event_manager+0xfa>
				{
					event_cb_fn[events](event_params);
1000de1e:	0008      	movs	r0, r1
1000de20:	4798      	blx	r3
1000de22:	e036      	b.n	1000de92 <ble_event_manager+0xfa>
	case AT_BLE_HTPT_ENABLE_RSP:
	case AT_BLE_HTPT_MEAS_INTV_UPD_RSP:
	case AT_BLE_HTPT_MEAS_INTV_CHG_REQ:
	{
		uint8_t idx;
		events -= (AT_BLE_LECB_DATA_RECIEVED + 1);
1000de24:	382d      	subs	r0, #45	; 0x2d
1000de26:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_htpt_event_cb[idx] != NULL)
1000de28:	4b1f      	ldr	r3, [pc, #124]	; (1000dea8 <ble_event_manager+0x110>)
1000de2a:	681b      	ldr	r3, [r3, #0]
1000de2c:	2b00      	cmp	r3, #0
1000de2e:	d030      	beq.n	1000de92 <ble_event_manager+0xfa>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_htpt_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000de30:	0080      	lsls	r0, r0, #2
1000de32:	58c3      	ldr	r3, [r0, r3]
1000de34:	2b00      	cmp	r3, #0
1000de36:	d02c      	beq.n	1000de92 <ble_event_manager+0xfa>
				{
					event_cb_fn[events](event_params);
1000de38:	0008      	movs	r0, r1
1000de3a:	4798      	blx	r3
1000de3c:	e029      	b.n	1000de92 <ble_event_manager+0xfa>
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000de3e:	3836      	subs	r0, #54	; 0x36
1000de40:	b2c4      	uxtb	r4, r0
1000de42:	00a4      	lsls	r4, r4, #2
1000de44:	2600      	movs	r6, #0
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
1000de46:	4f19      	ldr	r7, [pc, #100]	; (1000deac <ble_event_manager+0x114>)
1000de48:	59bb      	ldr	r3, [r7, r6]
1000de4a:	2b00      	cmp	r3, #0
1000de4c:	d004      	beq.n	1000de58 <ble_event_manager+0xc0>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000de4e:	591b      	ldr	r3, [r3, r4]
1000de50:	2b00      	cmp	r3, #0
1000de52:	d001      	beq.n	1000de58 <ble_event_manager+0xc0>
				{
					event_cb_fn[events](event_params);
1000de54:	0028      	movs	r0, r5
1000de56:	4798      	blx	r3
1000de58:	3604      	adds	r6, #4
	case AT_BLE_LE_TEST_STATUS:
	case AT_BLE_LE_PACKET_REPORT:
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
1000de5a:	2e14      	cmp	r6, #20
1000de5c:	d1f4      	bne.n	1000de48 <ble_event_manager+0xb0>
1000de5e:	e018      	b.n	1000de92 <ble_event_manager+0xfa>
	case AT_BLE_CUSTOM_EVENT:
	case AT_BLE_DEVICE_READY:
	case AT_BLE_EVENT_MAX:
	{
		uint8_t idx;
		events -= (AT_BLE_LE_PACKET_REPORT + 1);
1000de60:	3838      	subs	r0, #56	; 0x38
1000de62:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_custom_event_cb[idx] != NULL)
1000de64:	4b12      	ldr	r3, [pc, #72]	; (1000deb0 <ble_event_manager+0x118>)
1000de66:	681b      	ldr	r3, [r3, #0]
1000de68:	2b00      	cmp	r3, #0
1000de6a:	d012      	beq.n	1000de92 <ble_event_manager+0xfa>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_custom_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000de6c:	0080      	lsls	r0, r0, #2
1000de6e:	58c3      	ldr	r3, [r0, r3]
1000de70:	2b00      	cmp	r3, #0
1000de72:	d00e      	beq.n	1000de92 <ble_event_manager+0xfa>
				{
					event_cb_fn[events](event_params);
1000de74:	0008      	movs	r0, r1
1000de76:	4798      	blx	r3
1000de78:	e00b      	b.n	1000de92 <ble_event_manager+0xfa>
	}
	break;

	case AT_PLATFORM_EVENT:
	{
		if (ble_user_event_cb) {
1000de7a:	4b0e      	ldr	r3, [pc, #56]	; (1000deb4 <ble_event_manager+0x11c>)
1000de7c:	681b      	ldr	r3, [r3, #0]
1000de7e:	2b00      	cmp	r3, #0
1000de80:	d007      	beq.n	1000de92 <ble_event_manager+0xfa>
			ble_user_event_cb();
1000de82:	4798      	blx	r3
1000de84:	e005      	b.n	1000de92 <ble_event_manager+0xfa>
	break;

	default:
	{
		DBG_LOG_DEV("BLE-Manager:Unknown Event=0x%X", events);
		DBG_LOG("\r\n");
1000de86:	4d0c      	ldr	r5, [pc, #48]	; (1000deb8 <ble_event_manager+0x120>)
1000de88:	0028      	movs	r0, r5
1000de8a:	4c0c      	ldr	r4, [pc, #48]	; (1000debc <ble_event_manager+0x124>)
1000de8c:	47a0      	blx	r4
1000de8e:	0028      	movs	r0, r5
1000de90:	47a0      	blx	r4
	}
	break;		
	}
}
1000de92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000de94:	10017e2c 	.word	0x10017e2c
1000de98:	1001a9dc 	.word	0x1001a9dc
1000de9c:	1001a9f0 	.word	0x1001a9f0
1000dea0:	1001a744 	.word	0x1001a744
1000dea4:	1001aa38 	.word	0x1001aa38
1000dea8:	1001a740 	.word	0x1001a740
1000deac:	1001a9c8 	.word	0x1001a9c8
1000deb0:	1001af7c 	.word	0x1001af7c
1000deb4:	10019264 	.word	0x10019264
1000deb8:	100177b0 	.word	0x100177b0
1000debc:	10016871 	.word	0x10016871

1000dec0 <ble_event_task>:
	return ulp_status;
}

/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
1000dec0:	b570      	push	{r4, r5, r6, lr}
1000dec2:	0004      	movs	r4, r0
	return status;
}

ble_ulp_mode_t ble_get_ulp_status(void)
{
	return ulp_status;
1000dec4:	4b0d      	ldr	r3, [pc, #52]	; (1000defc <ble_event_task+0x3c>)
1000dec6:	781b      	ldrb	r3, [r3, #0]
/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
	at_ble_status_t status;
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
1000dec8:	2b01      	cmp	r3, #1
1000deca:	d101      	bne.n	1000ded0 <ble_event_task+0x10>
	{
		release_sleep_lock();
1000decc:	4b0c      	ldr	r3, [pc, #48]	; (1000df00 <ble_event_task+0x40>)
1000dece:	4798      	blx	r3
	}	
	status = at_ble_event_get(&event, ble_event_params, timeout);
1000ded0:	0022      	movs	r2, r4
1000ded2:	490c      	ldr	r1, [pc, #48]	; (1000df04 <ble_event_task+0x44>)
1000ded4:	480c      	ldr	r0, [pc, #48]	; (1000df08 <ble_event_task+0x48>)
1000ded6:	4b0d      	ldr	r3, [pc, #52]	; (1000df0c <ble_event_task+0x4c>)
1000ded8:	4798      	blx	r3
1000deda:	0004      	movs	r4, r0
1000dedc:	0005      	movs	r5, r0
	return status;
}

ble_ulp_mode_t ble_get_ulp_status(void)
{
	return ulp_status;
1000dede:	4b07      	ldr	r3, [pc, #28]	; (1000defc <ble_event_task+0x3c>)
1000dee0:	781b      	ldrb	r3, [r3, #0]
	{
		release_sleep_lock();
	}	
	status = at_ble_event_get(&event, ble_event_params, timeout);
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
1000dee2:	2b01      	cmp	r3, #1
1000dee4:	d101      	bne.n	1000deea <ble_event_task+0x2a>
	{
		acquire_sleep_lock();
1000dee6:	4b0a      	ldr	r3, [pc, #40]	; (1000df10 <ble_event_task+0x50>)
1000dee8:	4798      	blx	r3
	}
	
    if (status == AT_BLE_SUCCESS) 
1000deea:	2d00      	cmp	r5, #0
1000deec:	d104      	bne.n	1000def8 <ble_event_task+0x38>
    {		
            ble_event_manager(event, ble_event_params);
1000deee:	4b06      	ldr	r3, [pc, #24]	; (1000df08 <ble_event_task+0x48>)
1000def0:	7818      	ldrb	r0, [r3, #0]
1000def2:	4904      	ldr	r1, [pc, #16]	; (1000df04 <ble_event_task+0x44>)
1000def4:	4b07      	ldr	r3, [pc, #28]	; (1000df14 <ble_event_task+0x54>)
1000def6:	4798      	blx	r3
    }
    
    return status;
}
1000def8:	0020      	movs	r0, r4
1000defa:	bd70      	pop	{r4, r5, r6, pc}
1000defc:	10019273 	.word	0x10019273
1000df00:	1000e8b5 	.word	0x1000e8b5
1000df04:	1001ad70 	.word	0x1001ad70
1000df08:	1001aa34 	.word	0x1001aa34
1000df0c:	1000ef2d 	.word	0x1000ef2d
1000df10:	1000e88d 	.word	0x1000e88d
1000df14:	1000dd99 	.word	0x1000dd99

1000df18 <ble_advertisement_data_set>:
	}
}

/* Advertisement Data will be set based on the advertisement configuration */
at_ble_status_t ble_advertisement_data_set(void)
{
1000df18:	b510      	push	{r4, lr}
1000df1a:	b090      	sub	sp, #64	; 0x40
		uint8_t length_field_ind;
		uint8_t adv_element_len;
		adv_buf[adv_data_element.len] = adv_data_element.len;
		length_field_ind = adv_data_element.len;
		adv_data_element.len++;
		adv_buf[adv_data_element.len++] = COMPLETE_LIST_16BIT_SERV_UUIDS;
1000df1c:	ac08      	add	r4, sp, #32
1000df1e:	2203      	movs	r2, #3
1000df20:	7062      	strb	r2, [r4, #1]
		MREPEAT(SERVICE_UUID16_MAX_NUM, _CONF_SERVICE_16BIT_UUID, &adv_data_element);
1000df22:	2302      	movs	r3, #2
1000df24:	70a3      	strb	r3, [r4, #2]
1000df26:	3316      	adds	r3, #22
1000df28:	70e3      	strb	r3, [r4, #3]
1000df2a:	7122      	strb	r2, [r4, #4]
1000df2c:	7163      	strb	r3, [r4, #5]
1000df2e:	3201      	adds	r2, #1
1000df30:	71a2      	strb	r2, [r4, #6]
1000df32:	71e3      	strb	r3, [r4, #7]
1000df34:	320b      	adds	r2, #11
1000df36:	7222      	strb	r2, [r4, #8]
1000df38:	7263      	strb	r3, [r4, #9]
		adv_element_len = adv_data_element.len - (length_field_ind + ADV_ELEMENT_SIZE);
		if(adv_element_len) 
		{			
			adv_buf[length_field_ind] = adv_element_len+ADV_TYPE_SIZE;
1000df3a:	3b0f      	subs	r3, #15
1000df3c:	7023      	strb	r3, [r4, #0]
	#endif
	
	#if (BLE_GAP_ADV_COMPLETE_LOCAL_NAME_ENABLE && !BLE_GAP_ADV_SHORTENED_LOCAL_NAME_ENABLE)
	#if (BLE_GAP_ADV_COMPLETE_LOCAL_NAME_SCN_RSP_ENABLE != SCAN_RESPONSE_ONLY_ENABLE)
	if((adv_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_TYPE_FLAG_SIZE + ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH))) {
		adv_buf[adv_data_element.len++] = BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH + ADV_TYPE_SIZE;
1000df3e:	3a05      	subs	r2, #5
1000df40:	72a2      	strb	r2, [r4, #10]
		adv_buf[adv_data_element.len++] = COMPLETE_LOCAL_NAME;
1000df42:	72e3      	strb	r3, [r4, #11]
		memcpy(&adv_buf[adv_data_element.len], BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME, BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH);
1000df44:	aa0b      	add	r2, sp, #44	; 0x2c
1000df46:	4b10      	ldr	r3, [pc, #64]	; (1000df88 <ble_advertisement_data_set+0x70>)
1000df48:	cb03      	ldmia	r3!, {r0, r1}
1000df4a:	c203      	stmia	r2!, {r0, r1}
1000df4c:	781b      	ldrb	r3, [r3, #0]
1000df4e:	7013      	strb	r3, [r2, #0]
    DBG_LOG_DEV("[ble_manager]\t\tManufacturer specific data NOT enabled");
	if(false){}
	#endif
	#if ((BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_SCN_RSP_ENABLE == SCAN_RESPONSE_ENABLE) || (BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_SCN_RSP_ENABLE == SCAN_RESPONSE_ONLY_ENABLE))
	else if((scan_resp_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE))) {
		scn_resp[scan_resp_data_element.len++] = BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE + ADV_TYPE_SIZE;
1000df50:	2307      	movs	r3, #7
1000df52:	466a      	mov	r2, sp
1000df54:	7013      	strb	r3, [r2, #0]
		scn_resp[scan_resp_data_element.len++] = MANUFACTURER_SPECIFIC_DATA;
1000df56:	33f8      	adds	r3, #248	; 0xf8
1000df58:	7053      	strb	r3, [r2, #1]
		memcpy(&scn_resp[scan_resp_data_element.len], BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA, BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE);
1000df5a:	2206      	movs	r2, #6
1000df5c:	490b      	ldr	r1, [pc, #44]	; (1000df8c <ble_advertisement_data_set+0x74>)
1000df5e:	466b      	mov	r3, sp
1000df60:	1c98      	adds	r0, r3, #2
1000df62:	4b0b      	ldr	r3, [pc, #44]	; (1000df90 <ble_advertisement_data_set+0x78>)
1000df64:	4798      	blx	r3
		DBG_LOG_ADV("Failed to add Manufacturer specific data");
		return AT_BLE_GAP_INVALID_PARAM;
	}
	#endif
	
	if (at_ble_adv_data_set(adv_buf, adv_data_element.len, scn_resp,
1000df66:	2308      	movs	r3, #8
1000df68:	466a      	mov	r2, sp
1000df6a:	2115      	movs	r1, #21
1000df6c:	0020      	movs	r0, r4
1000df6e:	4c09      	ldr	r4, [pc, #36]	; (1000df94 <ble_advertisement_data_set+0x7c>)
1000df70:	47a0      	blx	r4
1000df72:	2800      	cmp	r0, #0
1000df74:	d005      	beq.n	1000df82 <ble_advertisement_data_set+0x6a>
	scan_resp_data_element.len) != AT_BLE_SUCCESS) {
		DBG_LOG("BLE Advertisement data set failed");
1000df76:	4808      	ldr	r0, [pc, #32]	; (1000df98 <ble_advertisement_data_set+0x80>)
1000df78:	4b08      	ldr	r3, [pc, #32]	; (1000df9c <ble_advertisement_data_set+0x84>)
1000df7a:	4798      	blx	r3
1000df7c:	4808      	ldr	r0, [pc, #32]	; (1000dfa0 <ble_advertisement_data_set+0x88>)
1000df7e:	4b09      	ldr	r3, [pc, #36]	; (1000dfa4 <ble_advertisement_data_set+0x8c>)
1000df80:	4798      	blx	r3
            //DBG_LOG_ADV("- 0x%02x(%c) ", adv_buf[i], adv_buf[i]);
        //}
		//DBG_LOG_ADV("BLE Advertisement data set success");
		return AT_BLE_SUCCESS;
    }
}
1000df82:	2000      	movs	r0, #0
1000df84:	b010      	add	sp, #64	; 0x40
1000df86:	bd10      	pop	{r4, pc}
1000df88:	10018384 	.word	0x10018384
1000df8c:	10018564 	.word	0x10018564
1000df90:	100165f7 	.word	0x100165f7
1000df94:	1000f98d 	.word	0x1000f98d
1000df98:	100177b0 	.word	0x100177b0
1000df9c:	10016871 	.word	0x10016871
1000dfa0:	1001856c 	.word	0x1001856c
1000dfa4:	10016751 	.word	0x10016751

1000dfa8 <uart_read_complete_callback>:

void _time_start(unsigned int sec);
unsigned int _time_done(void);

static void uart_read_complete_callback(struct uart_module *const module)
{
1000dfa8:	b510      	push	{r4, lr}
	if(read_status == UART_READ_WAITING) {
1000dfaa:	4b0e      	ldr	r3, [pc, #56]	; (1000dfe4 <uart_read_complete_callback+0x3c>)
1000dfac:	781b      	ldrb	r3, [r3, #0]
1000dfae:	2b01      	cmp	r3, #1
1000dfb0:	d10b      	bne.n	1000dfca <uart_read_complete_callback+0x22>
		read_status = UART_READ_DONE;
1000dfb2:	2202      	movs	r2, #2
1000dfb4:	4b0b      	ldr	r3, [pc, #44]	; (1000dfe4 <uart_read_complete_callback+0x3c>)
1000dfb6:	701a      	strb	r2, [r3, #0]
		
		if(user_callback_func == NULL)
1000dfb8:	4b0b      	ldr	r3, [pc, #44]	; (1000dfe8 <uart_read_complete_callback+0x40>)
1000dfba:	681b      	ldr	r3, [r3, #0]
1000dfbc:	2b00      	cmp	r3, #0
1000dfbe:	d110      	bne.n	1000dfe2 <uart_read_complete_callback+0x3a>
			uart_disable_callback(&uart_instance, UART_RX_COMPLETE);
1000dfc0:	2102      	movs	r1, #2
1000dfc2:	480a      	ldr	r0, [pc, #40]	; (1000dfec <uart_read_complete_callback+0x44>)
1000dfc4:	4b0a      	ldr	r3, [pc, #40]	; (1000dff0 <uart_read_complete_callback+0x48>)
1000dfc6:	4798      	blx	r3
1000dfc8:	e00b      	b.n	1000dfe2 <uart_read_complete_callback+0x3a>
	}
	else if(user_callback_func != NULL) {
1000dfca:	4b07      	ldr	r3, [pc, #28]	; (1000dfe8 <uart_read_complete_callback+0x40>)
1000dfcc:	681b      	ldr	r3, [r3, #0]
1000dfce:	2b00      	cmp	r3, #0
1000dfd0:	d007      	beq.n	1000dfe2 <uart_read_complete_callback+0x3a>
		user_callback_func(string_input[0]);
1000dfd2:	4c08      	ldr	r4, [pc, #32]	; (1000dff4 <uart_read_complete_callback+0x4c>)
1000dfd4:	7820      	ldrb	r0, [r4, #0]
1000dfd6:	4798      	blx	r3
		uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000dfd8:	2201      	movs	r2, #1
1000dfda:	0021      	movs	r1, r4
1000dfdc:	4803      	ldr	r0, [pc, #12]	; (1000dfec <uart_read_complete_callback+0x44>)
1000dfde:	4b06      	ldr	r3, [pc, #24]	; (1000dff8 <uart_read_complete_callback+0x50>)
1000dfe0:	4798      	blx	r3
	}
	else {
		//Nothing to do.
	}
}
1000dfe2:	bd10      	pop	{r4, pc}
1000dfe4:	1001a278 	.word	0x1001a278
1000dfe8:	1001a280 	.word	0x1001a280
1000dfec:	1001af80 	.word	0x1001af80
1000dff0:	1000cd31 	.word	0x1000cd31
1000dff4:	1001a27c 	.word	0x1001a27c
1000dff8:	1000ccd5 	.word	0x1000ccd5

1000dffc <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct uart_module *const module,
		uint8_t *c)
{
1000dffc:	b570      	push	{r4, r5, r6, lr}
1000dffe:	0006      	movs	r6, r0
1000e000:	000d      	movs	r5, r1
	while(STATUS_OK != uart_read_wait(module, c));
1000e002:	4c03      	ldr	r4, [pc, #12]	; (1000e010 <usart_serial_getchar+0x14>)
1000e004:	0029      	movs	r1, r5
1000e006:	0030      	movs	r0, r6
1000e008:	47a0      	blx	r4
1000e00a:	2800      	cmp	r0, #0
1000e00c:	d1fa      	bne.n	1000e004 <usart_serial_getchar+0x8>
}
1000e00e:	bd70      	pop	{r4, r5, r6, pc}
1000e010:	1000ccc1 	.word	0x1000ccc1

1000e014 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct uart_module *const module,
		uint8_t c)
{
1000e014:	b570      	push	{r4, r5, r6, lr}
1000e016:	0006      	movs	r6, r0
1000e018:	000d      	movs	r5, r1
	while(STATUS_OK !=uart_write_wait(module, c));
1000e01a:	4c03      	ldr	r4, [pc, #12]	; (1000e028 <usart_serial_putchar+0x14>)
1000e01c:	0029      	movs	r1, r5
1000e01e:	0030      	movs	r0, r6
1000e020:	47a0      	blx	r4
1000e022:	2800      	cmp	r0, #0
1000e024:	d1fa      	bne.n	1000e01c <usart_serial_putchar+0x8>

	return STATUS_OK;
}
1000e026:	bd70      	pop	{r4, r5, r6, pc}
1000e028:	1000ccb1 	.word	0x1000ccb1

1000e02c <serial_console_init>:

void serial_console_init(void)
{
1000e02c:	b570      	push	{r4, r5, r6, lr}
	system_clock_config(CLOCK_RESOURCE_XO_26_MHZ, CLOCK_FREQ_26_MHZ);
1000e02e:	2100      	movs	r1, #0
1000e030:	2000      	movs	r0, #0
1000e032:	4b19      	ldr	r3, [pc, #100]	; (1000e098 <serial_console_init+0x6c>)
1000e034:	4798      	blx	r3

	uart_get_config_defaults(&config_uart);
1000e036:	4c19      	ldr	r4, [pc, #100]	; (1000e09c <serial_console_init+0x70>)
1000e038:	0020      	movs	r0, r4
1000e03a:	4b19      	ldr	r3, [pc, #100]	; (1000e0a0 <serial_console_init+0x74>)
1000e03c:	4798      	blx	r3

	config_uart.baud_rate = CONF_STDIO_BAUDRATE;
1000e03e:	23e1      	movs	r3, #225	; 0xe1
1000e040:	025b      	lsls	r3, r3, #9
1000e042:	6023      	str	r3, [r4, #0]
	config_uart.pin_number_pad[0] = EDBG_CDC_PIN_PAD0;
1000e044:	2302      	movs	r3, #2
1000e046:	60a3      	str	r3, [r4, #8]
	config_uart.pin_number_pad[1] = EDBG_CDC_PIN_PAD1;
1000e048:	2203      	movs	r2, #3
1000e04a:	60e2      	str	r2, [r4, #12]
	config_uart.pin_number_pad[2] = EDBG_CDC_PIN_PAD2;
1000e04c:	3201      	adds	r2, #1
1000e04e:	6122      	str	r2, [r4, #16]
	config_uart.pin_number_pad[3] = EDBG_CDC_PIN_PAD3;
1000e050:	3201      	adds	r2, #1
1000e052:	6162      	str	r2, [r4, #20]
	
	config_uart.pinmux_sel_pad[0] = EDBG_CDC_MUX_PAD0;
1000e054:	61a3      	str	r3, [r4, #24]
	config_uart.pinmux_sel_pad[1] = EDBG_CDC_MUX_PAD1;
1000e056:	61e3      	str	r3, [r4, #28]
	config_uart.pinmux_sel_pad[2] = EDBG_CDC_MUX_PAD2;
1000e058:	6223      	str	r3, [r4, #32]
	config_uart.pinmux_sel_pad[3] = EDBG_CDC_MUX_PAD3;
1000e05a:	6263      	str	r3, [r4, #36]	; 0x24
static inline void stdio_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	stdio_base = (void *)module;
1000e05c:	4d11      	ldr	r5, [pc, #68]	; (1000e0a4 <serial_console_init+0x78>)
1000e05e:	4b12      	ldr	r3, [pc, #72]	; (1000e0a8 <serial_console_init+0x7c>)
1000e060:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
1000e062:	4a12      	ldr	r2, [pc, #72]	; (1000e0ac <serial_console_init+0x80>)
1000e064:	4b12      	ldr	r3, [pc, #72]	; (1000e0b0 <serial_console_init+0x84>)
1000e066:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
1000e068:	4a12      	ldr	r2, [pc, #72]	; (1000e0b4 <serial_console_init+0x88>)
1000e06a:	4b13      	ldr	r3, [pc, #76]	; (1000e0b8 <serial_console_init+0x8c>)
1000e06c:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	if (uart_init(module, hw, config) == STATUS_OK) {
1000e06e:	0022      	movs	r2, r4
1000e070:	4912      	ldr	r1, [pc, #72]	; (1000e0bc <serial_console_init+0x90>)
1000e072:	0028      	movs	r0, r5
1000e074:	4b12      	ldr	r3, [pc, #72]	; (1000e0c0 <serial_console_init+0x94>)
1000e076:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
1000e078:	4e12      	ldr	r6, [pc, #72]	; (1000e0c4 <serial_console_init+0x98>)
1000e07a:	6833      	ldr	r3, [r6, #0]
1000e07c:	6898      	ldr	r0, [r3, #8]
1000e07e:	2100      	movs	r1, #0
1000e080:	4c11      	ldr	r4, [pc, #68]	; (1000e0c8 <serial_console_init+0x9c>)
1000e082:	47a0      	blx	r4
	setbuf(stdin, NULL);
1000e084:	6833      	ldr	r3, [r6, #0]
1000e086:	6858      	ldr	r0, [r3, #4]
1000e088:	2100      	movs	r1, #0
1000e08a:	47a0      	blx	r4

	stdio_serial_init(&uart_instance, CONF_STDIO_USART_MODULE, &config_uart);
	
	uart_register_callback(&uart_instance, uart_read_complete_callback, UART_RX_COMPLETE);
1000e08c:	2202      	movs	r2, #2
1000e08e:	490f      	ldr	r1, [pc, #60]	; (1000e0cc <serial_console_init+0xa0>)
1000e090:	0028      	movs	r0, r5
1000e092:	4b0f      	ldr	r3, [pc, #60]	; (1000e0d0 <serial_console_init+0xa4>)
1000e094:	4798      	blx	r3
}
1000e096:	bd70      	pop	{r4, r5, r6, pc}
1000e098:	1000bcd1 	.word	0x1000bcd1
1000e09c:	1001afa4 	.word	0x1001afa4
1000e0a0:	1000cac9 	.word	0x1000cac9
1000e0a4:	1001af80 	.word	0x1001af80
1000e0a8:	1001a73c 	.word	0x1001a73c
1000e0ac:	1000e015 	.word	0x1000e015
1000e0b0:	1001a738 	.word	0x1001a738
1000e0b4:	1000dffd 	.word	0x1000dffd
1000e0b8:	1001a734 	.word	0x1001a734
1000e0bc:	40004000 	.word	0x40004000
1000e0c0:	1000caf5 	.word	0x1000caf5
1000e0c4:	10018944 	.word	0x10018944
1000e0c8:	10016921 	.word	0x10016921
1000e0cc:	1000dfa9 	.word	0x1000dfa9
1000e0d0:	1000ccfd 	.word	0x1000ccfd

1000e0d4 <_time_start>:

void _time_start(unsigned int sec)
{
1000e0d4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e0d6:	b083      	sub	sp, #12
1000e0d8:	0005      	movs	r5, r0
	system_clock_get_value();
1000e0da:	4c0d      	ldr	r4, [pc, #52]	; (1000e110 <_time_start+0x3c>)
1000e0dc:	47a0      	blx	r4
	unsigned int main_clk = system_clock_get_value();
1000e0de:	47a0      	blx	r4

	tick = (((double)(main_clk)) * ((double)0.0000493)) * (sec * 1000);
1000e0e0:	4f0c      	ldr	r7, [pc, #48]	; (1000e114 <_time_start+0x40>)
1000e0e2:	47b8      	blx	r7
1000e0e4:	4e0c      	ldr	r6, [pc, #48]	; (1000e118 <_time_start+0x44>)
1000e0e6:	4a0d      	ldr	r2, [pc, #52]	; (1000e11c <_time_start+0x48>)
1000e0e8:	4b0d      	ldr	r3, [pc, #52]	; (1000e120 <_time_start+0x4c>)
1000e0ea:	47b0      	blx	r6
1000e0ec:	9000      	str	r0, [sp, #0]
1000e0ee:	9101      	str	r1, [sp, #4]
1000e0f0:	20fa      	movs	r0, #250	; 0xfa
1000e0f2:	0080      	lsls	r0, r0, #2
1000e0f4:	4368      	muls	r0, r5
1000e0f6:	47b8      	blx	r7
1000e0f8:	0002      	movs	r2, r0
1000e0fa:	000b      	movs	r3, r1
1000e0fc:	9800      	ldr	r0, [sp, #0]
1000e0fe:	9901      	ldr	r1, [sp, #4]
1000e100:	47b0      	blx	r6
1000e102:	4b08      	ldr	r3, [pc, #32]	; (1000e124 <_time_start+0x50>)
1000e104:	4798      	blx	r3
1000e106:	4b08      	ldr	r3, [pc, #32]	; (1000e128 <_time_start+0x54>)
1000e108:	6018      	str	r0, [r3, #0]
}
1000e10a:	b003      	add	sp, #12
1000e10c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e10e:	46c0      	nop			; (mov r8, r8)
1000e110:	1000bd55 	.word	0x1000bd55
1000e114:	10016301 	.word	0x10016301
1000e118:	10015635 	.word	0x10015635
1000e11c:	19feaec7 	.word	0x19feaec7
1000e120:	3f09d8ef 	.word	0x3f09d8ef
1000e124:	10013a25 	.word	0x10013a25
1000e128:	1001a274 	.word	0x1001a274

1000e12c <_time_done>:

unsigned int _time_done()
{
	return --tick;
1000e12c:	4b02      	ldr	r3, [pc, #8]	; (1000e138 <_time_done+0xc>)
1000e12e:	681a      	ldr	r2, [r3, #0]
1000e130:	1e50      	subs	r0, r2, #1
1000e132:	6018      	str	r0, [r3, #0]
}
1000e134:	4770      	bx	lr
1000e136:	46c0      	nop			; (mov r8, r8)
1000e138:	1001a274 	.word	0x1001a274

1000e13c <getchar_b11_timeout>:

int getchar_b11_timeout(unsigned int sec)
{
1000e13c:	b570      	push	{r4, r5, r6, lr}
1000e13e:	0004      	movs	r4, r0
	read_status = UART_READ_WAITING;
1000e140:	2201      	movs	r2, #1
1000e142:	4b11      	ldr	r3, [pc, #68]	; (1000e188 <getchar_b11_timeout+0x4c>)
1000e144:	701a      	strb	r2, [r3, #0]
	
	if(user_callback_func == NULL)
1000e146:	4b11      	ldr	r3, [pc, #68]	; (1000e18c <getchar_b11_timeout+0x50>)
1000e148:	681b      	ldr	r3, [r3, #0]
1000e14a:	2b00      	cmp	r3, #0
1000e14c:	d103      	bne.n	1000e156 <getchar_b11_timeout+0x1a>
		uart_enable_callback(&uart_instance, UART_RX_COMPLETE);
1000e14e:	2102      	movs	r1, #2
1000e150:	480f      	ldr	r0, [pc, #60]	; (1000e190 <getchar_b11_timeout+0x54>)
1000e152:	4b10      	ldr	r3, [pc, #64]	; (1000e194 <getchar_b11_timeout+0x58>)
1000e154:	4798      	blx	r3

	_time_start(sec);
1000e156:	0020      	movs	r0, r4
1000e158:	4b0f      	ldr	r3, [pc, #60]	; (1000e198 <getchar_b11_timeout+0x5c>)
1000e15a:	4798      	blx	r3
	
	string_input[0] = 0;
1000e15c:	490f      	ldr	r1, [pc, #60]	; (1000e19c <getchar_b11_timeout+0x60>)
1000e15e:	2300      	movs	r3, #0
1000e160:	700b      	strb	r3, [r1, #0]
	uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000e162:	2201      	movs	r2, #1
1000e164:	480a      	ldr	r0, [pc, #40]	; (1000e190 <getchar_b11_timeout+0x54>)
1000e166:	4b0e      	ldr	r3, [pc, #56]	; (1000e1a0 <getchar_b11_timeout+0x64>)
1000e168:	4798      	blx	r3
	
	while (read_status != UART_READ_DONE && _time_done() > 0 );
1000e16a:	4c07      	ldr	r4, [pc, #28]	; (1000e188 <getchar_b11_timeout+0x4c>)
1000e16c:	4d0d      	ldr	r5, [pc, #52]	; (1000e1a4 <getchar_b11_timeout+0x68>)
1000e16e:	7823      	ldrb	r3, [r4, #0]
1000e170:	2b02      	cmp	r3, #2
1000e172:	d002      	beq.n	1000e17a <getchar_b11_timeout+0x3e>
1000e174:	47a8      	blx	r5
1000e176:	2800      	cmp	r0, #0
1000e178:	d1f9      	bne.n	1000e16e <getchar_b11_timeout+0x32>
	
	read_status = UART_READ_NONE;
1000e17a:	2200      	movs	r2, #0
1000e17c:	4b02      	ldr	r3, [pc, #8]	; (1000e188 <getchar_b11_timeout+0x4c>)
1000e17e:	701a      	strb	r2, [r3, #0]

	return string_input[0];
1000e180:	4b06      	ldr	r3, [pc, #24]	; (1000e19c <getchar_b11_timeout+0x60>)
1000e182:	7818      	ldrb	r0, [r3, #0]
}
1000e184:	bd70      	pop	{r4, r5, r6, pc}
1000e186:	46c0      	nop			; (mov r8, r8)
1000e188:	1001a278 	.word	0x1001a278
1000e18c:	1001a280 	.word	0x1001a280
1000e190:	1001af80 	.word	0x1001af80
1000e194:	1000cd11 	.word	0x1000cd11
1000e198:	1000e0d5 	.word	0x1000e0d5
1000e19c:	1001a27c 	.word	0x1001a27c
1000e1a0:	1000ccd5 	.word	0x1000ccd5
1000e1a4:	1000e12d 	.word	0x1000e12d

1000e1a8 <platform_event_free>:
void platform_event_free(struct platform_event* event);
//struct str_watched_event watched_event;

void platform_event_free(struct platform_event* event)
{
	event->next = platform_event_free_list;
1000e1a8:	4b02      	ldr	r3, [pc, #8]	; (1000e1b4 <platform_event_free+0xc>)
1000e1aa:	681a      	ldr	r2, [r3, #0]
1000e1ac:	6002      	str	r2, [r0, #0]
	platform_event_free_list = event;
1000e1ae:	6018      	str	r0, [r3, #0]
}
1000e1b0:	4770      	bx	lr
1000e1b2:	46c0      	nop			; (mov r8, r8)
1000e1b4:	1001a288 	.word	0x1001a288

1000e1b8 <platform_event_post>:

void platform_event_post(uint16_t event_type, void * data, uint16_t data_len)
{
1000e1b8:	b530      	push	{r4, r5, lr}
	// get a free event object
	struct platform_event* evt = platform_event_free_list;
1000e1ba:	4b0b      	ldr	r3, [pc, #44]	; (1000e1e8 <platform_event_post+0x30>)
1000e1bc:	681c      	ldr	r4, [r3, #0]
	if(evt != NULL)
1000e1be:	2c00      	cmp	r4, #0
1000e1c0:	d011      	beq.n	1000e1e6 <platform_event_post+0x2e>
	{
		platform_event_free_list = evt->next;
1000e1c2:	6825      	ldr	r5, [r4, #0]
1000e1c4:	601d      	str	r5, [r3, #0]
		
		evt->next = NULL;
1000e1c6:	2300      	movs	r3, #0
1000e1c8:	6023      	str	r3, [r4, #0]
		evt->data = data;
1000e1ca:	60a1      	str	r1, [r4, #8]
		evt->data_len = data_len;
1000e1cc:	80e2      	strh	r2, [r4, #6]
		evt->event_type = event_type;
1000e1ce:	80a0      	strh	r0, [r4, #4]

		if(platform_event_pending_list == NULL)
1000e1d0:	4b06      	ldr	r3, [pc, #24]	; (1000e1ec <platform_event_post+0x34>)
1000e1d2:	681a      	ldr	r2, [r3, #0]
1000e1d4:	2a00      	cmp	r2, #0
1000e1d6:	d102      	bne.n	1000e1de <platform_event_post+0x26>
		{
			platform_event_pending_list = evt;
1000e1d8:	601c      	str	r4, [r3, #0]
1000e1da:	e004      	b.n	1000e1e6 <platform_event_post+0x2e>
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
			{
				cur = cur->next;
1000e1dc:	001a      	movs	r2, r3
			platform_event_pending_list = evt;
		}
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
1000e1de:	6813      	ldr	r3, [r2, #0]
1000e1e0:	2b00      	cmp	r3, #0
1000e1e2:	d1fb      	bne.n	1000e1dc <platform_event_post+0x24>
			{
				cur = cur->next;
			}
			cur->next = evt;
1000e1e4:	6014      	str	r4, [r2, #0]
		}
		
		//platform_event_signal();
	}
	
}
1000e1e6:	bd30      	pop	{r4, r5, pc}
1000e1e8:	1001a288 	.word	0x1001a288
1000e1ec:	1001a284 	.word	0x1001a284

1000e1f0 <platform_event_init>:
	return status;
	
}

void platform_event_init()
{
1000e1f0:	b570      	push	{r4, r5, r6, lr}
	uint32_t i;
	platform_event_free_list = NULL;
1000e1f2:	2300      	movs	r3, #0
1000e1f4:	4a06      	ldr	r2, [pc, #24]	; (1000e210 <platform_event_init+0x20>)
1000e1f6:	6013      	str	r3, [r2, #0]
	platform_event_pending_list = NULL;
1000e1f8:	4a06      	ldr	r2, [pc, #24]	; (1000e214 <platform_event_init+0x24>)
1000e1fa:	6013      	str	r3, [r2, #0]
1000e1fc:	4c06      	ldr	r4, [pc, #24]	; (1000e218 <platform_event_init+0x28>)
1000e1fe:	0026      	movs	r6, r4
1000e200:	3678      	adds	r6, #120	; 0x78
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
	{
		platform_event_free(&platform_event_pool[i]);
1000e202:	4d06      	ldr	r5, [pc, #24]	; (1000e21c <platform_event_init+0x2c>)
1000e204:	0020      	movs	r0, r4
1000e206:	47a8      	blx	r5
1000e208:	340c      	adds	r4, #12
{
	uint32_t i;
	platform_event_free_list = NULL;
	platform_event_pending_list = NULL;
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
1000e20a:	42b4      	cmp	r4, r6
1000e20c:	d1fa      	bne.n	1000e204 <platform_event_init+0x14>
	{
		platform_event_free(&platform_event_pool[i]);
	}
}
1000e20e:	bd70      	pop	{r4, r5, r6, pc}
1000e210:	1001a288 	.word	0x1001a288
1000e214:	1001a284 	.word	0x1001a284
1000e218:	1001a28c 	.word	0x1001a28c
1000e21c:	1000e1a9 	.word	0x1000e1a9

1000e220 <at_ke_msg_send>:
	}
	return status;
}

static void at_ke_msg_send(void const * param_ptr)
{
1000e220:	b570      	push	{r4, r5, r6, lr}
1000e222:	0004      	movs	r4, r0
	struct ke_msg *kemsg;
	uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
1000e224:	4b13      	ldr	r3, [pc, #76]	; (1000e274 <at_ke_msg_send+0x54>)
1000e226:	681d      	ldr	r5, [r3, #0]
	ke_msg_send(param_ptr);
1000e228:	4b13      	ldr	r3, [pc, #76]	; (1000e278 <at_ke_msg_send+0x58>)
1000e22a:	681b      	ldr	r3, [r3, #0]
1000e22c:	4798      	blx	r3
	kemsg = ke_param2msg(param_ptr);

	if((kemsg != NULL) && (kemsg->dest_id != TASK_INTERNAL_APP)) {
1000e22e:	2c0c      	cmp	r4, #12
1000e230:	d01f      	beq.n	1000e272 <at_ke_msg_send+0x52>
1000e232:	3c0c      	subs	r4, #12
1000e234:	88e3      	ldrh	r3, [r4, #6]
1000e236:	2b05      	cmp	r3, #5
1000e238:	d01b      	beq.n	1000e272 <at_ke_msg_send+0x52>
		if(osc_en == 0)
1000e23a:	07eb      	lsls	r3, r5, #31
1000e23c:	d414      	bmi.n	1000e268 <at_ke_msg_send+0x48>
		{
			/* BLE Core is off, issue a wakeup request*/
			/* First, make sure PD4 is powered up and out of reset */
			pwr_enable_arm_wakeup(1<<1);
1000e23e:	4b0f      	ldr	r3, [pc, #60]	; (1000e27c <at_ke_msg_send+0x5c>)
1000e240:	681b      	ldr	r3, [r3, #0]
1000e242:	2002      	movs	r0, #2
1000e244:	4798      	blx	r3
			pwr_arm_wakeup_req();
1000e246:	4b0e      	ldr	r3, [pc, #56]	; (1000e280 <at_ke_msg_send+0x60>)
1000e248:	681b      	ldr	r3, [r3, #0]
1000e24a:	4798      	blx	r3
			while (pwr_wait_BLE_out_of_reset(3));
1000e24c:	4c0d      	ldr	r4, [pc, #52]	; (1000e284 <at_ke_msg_send+0x64>)
1000e24e:	2003      	movs	r0, #3
1000e250:	6823      	ldr	r3, [r4, #0]
1000e252:	4798      	blx	r3
1000e254:	2800      	cmp	r0, #0
1000e256:	d1fa      	bne.n	1000e24e <at_ke_msg_send+0x2e>
			pwr_disable_arm_wakeup(1<<1);
1000e258:	4b0b      	ldr	r3, [pc, #44]	; (1000e288 <at_ke_msg_send+0x68>)
1000e25a:	681b      	ldr	r3, [r3, #0]
1000e25c:	3002      	adds	r0, #2
1000e25e:	4798      	blx	r3
			REG_PL_WR(0x4000B020, 1);
1000e260:	2201      	movs	r2, #1
1000e262:	4b0a      	ldr	r3, [pc, #40]	; (1000e28c <at_ke_msg_send+0x6c>)
1000e264:	601a      	str	r2, [r3, #0]
1000e266:	e004      	b.n	1000e272 <at_ke_msg_send+0x52>
#endif	//CHIPVERSION_B0
		}
		else
		{
			/*  */
			os_sem_up(gstrFwSem);
1000e268:	4b09      	ldr	r3, [pc, #36]	; (1000e290 <at_ke_msg_send+0x70>)
1000e26a:	6818      	ldr	r0, [r3, #0]
1000e26c:	4b09      	ldr	r3, [pc, #36]	; (1000e294 <at_ke_msg_send+0x74>)
1000e26e:	681b      	ldr	r3, [r3, #0]
1000e270:	4798      	blx	r3
		}
	}
}
1000e272:	bd70      	pop	{r4, r5, r6, pc}
1000e274:	4000b1ec 	.word	0x4000b1ec
1000e278:	1001a334 	.word	0x1001a334
1000e27c:	1001a32c 	.word	0x1001a32c
1000e280:	1001a340 	.word	0x1001a340
1000e284:	1001a314 	.word	0x1001a314
1000e288:	1001a31c 	.word	0x1001a31c
1000e28c:	4000b020 	.word	0x4000b020
1000e290:	1001a320 	.word	0x1001a320
1000e294:	1001a310 	.word	0x1001a310

1000e298 <samb11_plf_resume_callback>:
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
	return status;
}

void samb11_plf_resume_callback(void)
{
1000e298:	b510      	push	{r4, lr}
	//spi_flash_turn_off();
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,default_samb11_clock_init[0]);
1000e29a:	4b06      	ldr	r3, [pc, #24]	; (1000e2b4 <samb11_plf_resume_callback+0x1c>)
1000e29c:	4a06      	ldr	r2, [pc, #24]	; (1000e2b8 <samb11_plf_resume_callback+0x20>)
1000e29e:	6819      	ldr	r1, [r3, #0]
1000e2a0:	6011      	str	r1, [r2, #0]
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,default_samb11_clock_init[1]);
1000e2a2:	685a      	ldr	r2, [r3, #4]
1000e2a4:	4b05      	ldr	r3, [pc, #20]	; (1000e2bc <samb11_plf_resume_callback+0x24>)
1000e2a6:	601a      	str	r2, [r3, #0]
	if(samb11_app_resume_cb != NULL)
1000e2a8:	4b05      	ldr	r3, [pc, #20]	; (1000e2c0 <samb11_plf_resume_callback+0x28>)
1000e2aa:	681b      	ldr	r3, [r3, #0]
1000e2ac:	2b00      	cmp	r3, #0
1000e2ae:	d000      	beq.n	1000e2b2 <samb11_plf_resume_callback+0x1a>
	{
		samb11_app_resume_cb();
1000e2b0:	4798      	blx	r3
	}
}
1000e2b2:	bd10      	pop	{r4, pc}
1000e2b4:	1001afcc 	.word	0x1001afcc
1000e2b8:	4000b00c 	.word	0x4000b00c
1000e2bc:	4000b010 	.word	0x4000b010
1000e2c0:	1001b2a8 	.word	0x1001b2a8

1000e2c4 <init_port_list>:
port port_list[LPGPIO_MAX];
uint32_t default_samb11_clock_init[2];
void samb11_plf_resume_callback(void);

void init_port_list(void)
{
1000e2c4:	b570      	push	{r4, r5, r6, lr}
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
1000e2c6:	2232      	movs	r2, #50	; 0x32
1000e2c8:	2100      	movs	r1, #0
1000e2ca:	480d      	ldr	r0, [pc, #52]	; (1000e300 <init_port_list+0x3c>)
1000e2cc:	4b0d      	ldr	r3, [pc, #52]	; (1000e304 <init_port_list+0x40>)
1000e2ce:	4798      	blx	r3
1000e2d0:	2100      	movs	r1, #0
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000e2d2:	480b      	ldr	r0, [pc, #44]	; (1000e300 <init_port_list+0x3c>)
		port_list[i].bit.available = 1;
1000e2d4:	2501      	movs	r5, #1
		port_list[i].bit.configured = 0;
1000e2d6:	2402      	movs	r4, #2
void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000e2d8:	004a      	lsls	r2, r1, #1
1000e2da:	5411      	strb	r1, [r2, r0]
		port_list[i].bit.available = 1;
1000e2dc:	1882      	adds	r2, r0, r2
1000e2de:	7853      	ldrb	r3, [r2, #1]
1000e2e0:	432b      	orrs	r3, r5
		port_list[i].bit.configured = 0;
1000e2e2:	b2db      	uxtb	r3, r3
1000e2e4:	43a3      	bics	r3, r4
1000e2e6:	7053      	strb	r3, [r2, #1]
1000e2e8:	3101      	adds	r1, #1

void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
1000e2ea:	2919      	cmp	r1, #25
1000e2ec:	d1f4      	bne.n	1000e2d8 <init_port_list+0x14>
		port_list[i].bit.gpio_num = i;
		port_list[i].bit.available = 1;
		port_list[i].bit.configured = 0;
	}
	//Set the GPIO for SWD is not available
	port_list[0].bit.available = 0;
1000e2ee:	4b04      	ldr	r3, [pc, #16]	; (1000e300 <init_port_list+0x3c>)
1000e2f0:	785a      	ldrb	r2, [r3, #1]
1000e2f2:	3918      	subs	r1, #24
1000e2f4:	438a      	bics	r2, r1
1000e2f6:	705a      	strb	r2, [r3, #1]
	port_list[1].bit.available = 0;
1000e2f8:	78da      	ldrb	r2, [r3, #3]
1000e2fa:	438a      	bics	r2, r1
1000e2fc:	70da      	strb	r2, [r3, #3]
	//GPIO 14 is used for Coex and controlled by Firmware
	//port_list[14].bit.available = 0;
}
1000e2fe:	bd70      	pop	{r4, r5, r6, pc}
1000e300:	1001afe8 	.word	0x1001afe8
1000e304:	10016609 	.word	0x10016609

1000e308 <init_clock>:

void init_clock(void)
{
	uint32_t regval;
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0);
1000e308:	4a06      	ldr	r2, [pc, #24]	; (1000e324 <init_clock+0x1c>)
1000e30a:	6811      	ldr	r1, [r2, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_1_CLK_EN);
	//disable UART core & interface clocks
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_IF_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN);
1000e30c:	4b06      	ldr	r3, [pc, #24]	; (1000e328 <init_clock+0x20>)
1000e30e:	400b      	ands	r3, r1
	//disable I2C core 1 clocks
	//regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C1_CORE_CLK_EN);		//do not disable I2C because I2C driver in ASF will not enable.
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,regval);
1000e310:	6013      	str	r3, [r2, #0]
	default_samb11_clock_init[0] = regval;
1000e312:	4a06      	ldr	r2, [pc, #24]	; (1000e32c <init_clock+0x24>)
1000e314:	6013      	str	r3, [r2, #0]
	
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1);
1000e316:	4906      	ldr	r1, [pc, #24]	; (1000e330 <init_clock+0x28>)
1000e318:	6808      	ldr	r0, [r1, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_4_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_5_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_6_CLK_EN);
	//disable SPI SCK Phase int clock 
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN);
1000e31a:	4b06      	ldr	r3, [pc, #24]	; (1000e334 <init_clock+0x2c>)
1000e31c:	4003      	ands	r3, r0
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,regval);
1000e31e:	600b      	str	r3, [r1, #0]
	default_samb11_clock_init[1] = regval;
1000e320:	6053      	str	r3, [r2, #4]
	//ARM debugger
	
	//store default values
}
1000e322:	4770      	bx	lr
1000e324:	4000b00c 	.word	0x4000b00c
1000e328:	fffe0fd3 	.word	0xfffe0fd3
1000e32c:	1001afcc 	.word	0x1001afcc
1000e330:	4000b010 	.word	0x4000b010
1000e334:	ffffe7c0 	.word	0xffffe7c0

1000e338 <platform_driver_init>:

plf_drv_status platform_driver_init()
{
1000e338:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e33a:	4657      	mov	r7, sl
1000e33c:	464e      	mov	r6, r9
1000e33e:	4645      	mov	r5, r8
1000e340:	b4e0      	push	{r5, r6, r7}
	plf_drv_status status = STATUS_NOT_INITIALIZED;
	if((platform_initialized == 0) || (platform_initialized != 1)) {
1000e342:	4b4f      	ldr	r3, [pc, #316]	; (1000e480 <platform_driver_init+0x148>)
1000e344:	781b      	ldrb	r3, [r3, #0]
1000e346:	2b00      	cmp	r3, #0
1000e348:	d004      	beq.n	1000e354 <platform_driver_init+0x1c>
1000e34a:	4b4d      	ldr	r3, [pc, #308]	; (1000e480 <platform_driver_init+0x148>)
1000e34c:	781b      	ldrb	r3, [r3, #0]
1000e34e:	2b01      	cmp	r3, #1
1000e350:	d100      	bne.n	1000e354 <platform_driver_init+0x1c>
1000e352:	e08c      	b.n	1000e46e <platform_driver_init+0x136>
		init_port_list();
1000e354:	4b4b      	ldr	r3, [pc, #300]	; (1000e484 <platform_driver_init+0x14c>)
1000e356:	4798      	blx	r3
		init_clock();
1000e358:	4b4b      	ldr	r3, [pc, #300]	; (1000e488 <platform_driver_init+0x150>)
1000e35a:	4798      	blx	r3
		// Initialize the ble stack message handler to NULL
		ble_stack_message_handler = NULL;
1000e35c:	2300      	movs	r3, #0
1000e35e:	4698      	mov	r8, r3
1000e360:	4b4a      	ldr	r3, [pc, #296]	; (1000e48c <platform_driver_init+0x154>)
1000e362:	4642      	mov	r2, r8
1000e364:	601a      	str	r2, [r3, #0]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000e366:	4c4a      	ldr	r4, [pc, #296]	; (1000e490 <platform_driver_init+0x158>)
1000e368:	2380      	movs	r3, #128	; 0x80
1000e36a:	2280      	movs	r2, #128	; 0x80
1000e36c:	0412      	lsls	r2, r2, #16
1000e36e:	4692      	mov	sl, r2
1000e370:	50e2      	str	r2, [r4, r3]
1000e372:	2280      	movs	r2, #128	; 0x80
1000e374:	0452      	lsls	r2, r2, #17
1000e376:	4691      	mov	r9, r2
1000e378:	50e2      	str	r2, [r4, r3]
#ifdef CHIPVERSION_B0
		NVIC_DisableIRQ(GPIO0_IRQn);
		NVIC_DisableIRQ(GPIO1_IRQn);
		/* NVIC_DisableIRQ(PORT0_COMB_IRQn); */
		/* NVIC_DisableIRQ(PORT1_COMB_IRQn); */
		platform_register_isr = (uint8_t (*)(uint8_t ,void *))0x000007d7;
1000e37a:	4d46      	ldr	r5, [pc, #280]	; (1000e494 <platform_driver_init+0x15c>)
1000e37c:	4b46      	ldr	r3, [pc, #280]	; (1000e498 <platform_driver_init+0x160>)
1000e37e:	602b      	str	r3, [r5, #0]
		platform_unregister_isr = (uint8_t (*)(uint8_t ))0x000007bd;
1000e380:	4b46      	ldr	r3, [pc, #280]	; (1000e49c <platform_driver_init+0x164>)
1000e382:	4a47      	ldr	r2, [pc, #284]	; (1000e4a0 <platform_driver_init+0x168>)
1000e384:	6013      	str	r3, [r2, #0]
		handle_ext_wakeup_isr = (void (*)(void))0x1bc51;
1000e386:	4947      	ldr	r1, [pc, #284]	; (1000e4a4 <platform_driver_init+0x16c>)
1000e388:	4a47      	ldr	r2, [pc, #284]	; (1000e4a8 <platform_driver_init+0x170>)
1000e38a:	6011      	str	r1, [r2, #0]
		gapm_get_task_from_id = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400bc));
1000e38c:	4a47      	ldr	r2, [pc, #284]	; (1000e4ac <platform_driver_init+0x174>)
1000e38e:	6811      	ldr	r1, [r2, #0]
1000e390:	4a47      	ldr	r2, [pc, #284]	; (1000e4b0 <platform_driver_init+0x178>)
1000e392:	6011      	str	r1, [r2, #0]
		gapm_get_id_from_task = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400b8));
1000e394:	4a47      	ldr	r2, [pc, #284]	; (1000e4b4 <platform_driver_init+0x17c>)
1000e396:	6811      	ldr	r1, [r2, #0]
1000e398:	4a47      	ldr	r2, [pc, #284]	; (1000e4b8 <platform_driver_init+0x180>)
1000e39a:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_set = (void (*)(uint16_t))0x0001b99f;
1000e39c:	4947      	ldr	r1, [pc, #284]	; (1000e4bc <platform_driver_init+0x184>)
1000e39e:	4a48      	ldr	r2, [pc, #288]	; (1000e4c0 <platform_driver_init+0x188>)
1000e3a0:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_clear = (void (*)(uint16_t))0x0001b9db;
1000e3a2:	4948      	ldr	r1, [pc, #288]	; (1000e4c4 <platform_driver_init+0x18c>)
1000e3a4:	4a48      	ldr	r2, [pc, #288]	; (1000e4c8 <platform_driver_init+0x190>)
1000e3a6:	6011      	str	r1, [r2, #0]
		apps_resume_cb = (uint32_t *)0x1004003c;
1000e3a8:	4f48      	ldr	r7, [pc, #288]	; (1000e4cc <platform_driver_init+0x194>)
1000e3aa:	4a49      	ldr	r2, [pc, #292]	; (1000e4d0 <platform_driver_init+0x198>)
1000e3ac:	603a      	str	r2, [r7, #0]
		actualfreq = (uint32_t *)0x10041FC0; /* set to NULL for now as clock calibration is disabled for the time being */  /*(uint32_t *)0x10006bd8;*/
1000e3ae:	4949      	ldr	r1, [pc, #292]	; (1000e4d4 <platform_driver_init+0x19c>)
1000e3b0:	4a49      	ldr	r2, [pc, #292]	; (1000e4d8 <platform_driver_init+0x1a0>)
1000e3b2:	6011      	str	r1, [r2, #0]
		updateuartbr_fp = (void (*)())0x10041FC4;
1000e3b4:	4949      	ldr	r1, [pc, #292]	; (1000e4dc <platform_driver_init+0x1a4>)
1000e3b6:	4a4a      	ldr	r2, [pc, #296]	; (1000e4e0 <platform_driver_init+0x1a8>)
1000e3b8:	6011      	str	r1, [r2, #0]
		wakeup_source_active_cb = (uint32_t *)0x10041FD4;
1000e3ba:	4e4a      	ldr	r6, [pc, #296]	; (1000e4e4 <platform_driver_init+0x1ac>)
1000e3bc:	4a4a      	ldr	r2, [pc, #296]	; (1000e4e8 <platform_driver_init+0x1b0>)
1000e3be:	6032      	str	r2, [r6, #0]
		wakeup_event_pending = (uint32_t *)0x10041FD8;
1000e3c0:	494a      	ldr	r1, [pc, #296]	; (1000e4ec <platform_driver_init+0x1b4>)
1000e3c2:	4a4b      	ldr	r2, [pc, #300]	; (1000e4f0 <platform_driver_init+0x1b8>)
1000e3c4:	6011      	str	r1, [r2, #0]
		/* power APIs */
		pwr_enable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cbe9;
1000e3c6:	494b      	ldr	r1, [pc, #300]	; (1000e4f4 <platform_driver_init+0x1bc>)
1000e3c8:	4a4b      	ldr	r2, [pc, #300]	; (1000e4f8 <platform_driver_init+0x1c0>)
1000e3ca:	6011      	str	r1, [r2, #0]
		pwr_disable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cd8f;
1000e3cc:	494b      	ldr	r1, [pc, #300]	; (1000e4fc <platform_driver_init+0x1c4>)
1000e3ce:	4a4c      	ldr	r2, [pc, #304]	; (1000e500 <platform_driver_init+0x1c8>)
1000e3d0:	6011      	str	r1, [r2, #0]
		pwr_arm_wakeup_req = (int (*)(void))0x0001cea3;
1000e3d2:	494c      	ldr	r1, [pc, #304]	; (1000e504 <platform_driver_init+0x1cc>)
1000e3d4:	4a4c      	ldr	r2, [pc, #304]	; (1000e508 <platform_driver_init+0x1d0>)
1000e3d6:	6011      	str	r1, [r2, #0]
		pwr_wait_BLE_out_of_reset = (int (*)(uint32_t threshold))0x0001cbcf;
1000e3d8:	494c      	ldr	r1, [pc, #304]	; (1000e50c <platform_driver_init+0x1d4>)
1000e3da:	4a4d      	ldr	r2, [pc, #308]	; (1000e510 <platform_driver_init+0x1d8>)
1000e3dc:	6011      	str	r1, [r2, #0]
		NVIC_DisableIRQ(PORT1_ALL_IRQn);
		platform_register_isr = register_isr;
		platform_unregister_isr = unregister_isr;
		handle_ext_wakeup_isr = (void (*)(void))0x14085;
#endif
		platform_unregister_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX);
1000e3de:	2028      	movs	r0, #40	; 0x28
1000e3e0:	4798      	blx	r3
		platform_register_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX,(void*)PORT1_COMB_Handler);
1000e3e2:	494c      	ldr	r1, [pc, #304]	; (1000e514 <platform_driver_init+0x1dc>)
1000e3e4:	2028      	movs	r0, #40	; 0x28
1000e3e6:	682b      	ldr	r3, [r5, #0]
1000e3e8:	4798      	blx	r3
		platform_register_isr(GPIO0_COMBINED_VECTOR_TABLE_INDEX,(void*)gpio0_combined_isr_handler);
1000e3ea:	682b      	ldr	r3, [r5, #0]
1000e3ec:	494a      	ldr	r1, [pc, #296]	; (1000e518 <platform_driver_init+0x1e0>)
1000e3ee:	2027      	movs	r0, #39	; 0x27
1000e3f0:	4798      	blx	r3
		//gstrFwSem               = (void *)0x100004e4;
		//NMI_MsgQueueRecv = (int (*)(void *, void ** )) 0x00017f67;
		//InternalAppMsgQHandle = (void *)0x10001158;
		//ke_free = (void (*)(void *)) 0x00015e3d;
#elif CHIPVERSION_B0
		ke_msg_send 	= (void (*)(void const *))(*((unsigned int *)0x100400e4));
1000e3f2:	4b4a      	ldr	r3, [pc, #296]	; (1000e51c <platform_driver_init+0x1e4>)
1000e3f4:	681a      	ldr	r2, [r3, #0]
1000e3f6:	4b4a      	ldr	r3, [pc, #296]	; (1000e520 <platform_driver_init+0x1e8>)
1000e3f8:	601a      	str	r2, [r3, #0]
		ke_msg_alloc 	= (void* (*)(ke_msg_id_t const id, ke_task_id_t const dest_id,
1000e3fa:	4a4a      	ldr	r2, [pc, #296]	; (1000e524 <platform_driver_init+0x1ec>)
1000e3fc:	4b4a      	ldr	r3, [pc, #296]	; (1000e528 <platform_driver_init+0x1f0>)
1000e3fe:	601a      	str	r2, [r3, #0]
										ke_task_id_t const src_id, uint16_t const param_len) )0x00019fe9;
		os_sem_up 		= (int (*)(void*))0x0001dbdd;
1000e400:	4a4a      	ldr	r2, [pc, #296]	; (1000e52c <platform_driver_init+0x1f4>)
1000e402:	4b4b      	ldr	r3, [pc, #300]	; (1000e530 <platform_driver_init+0x1f8>)
1000e404:	601a      	str	r2, [r3, #0]
		os_sem_down		= (int (*)(void*))0x0001dc5b;
1000e406:	4a4b      	ldr	r2, [pc, #300]	; (1000e534 <platform_driver_init+0x1fc>)
1000e408:	4b4b      	ldr	r3, [pc, #300]	; (1000e538 <platform_driver_init+0x200>)
1000e40a:	601a      	str	r2, [r3, #0]
		gstrFwSem 		= (void*)0x100405ec;
1000e40c:	4a4b      	ldr	r2, [pc, #300]	; (1000e53c <platform_driver_init+0x204>)
1000e40e:	4b4c      	ldr	r3, [pc, #304]	; (1000e540 <platform_driver_init+0x208>)
1000e410:	601a      	str	r2, [r3, #0]
		NMI_MsgQueueRecv = (int(*)(void*, void ** ))0x0001d5e3;
1000e412:	4a4c      	ldr	r2, [pc, #304]	; (1000e544 <platform_driver_init+0x20c>)
1000e414:	4b4c      	ldr	r3, [pc, #304]	; (1000e548 <platform_driver_init+0x210>)
1000e416:	601a      	str	r2, [r3, #0]
		InternalAppMsgQHandle = (void*)0x10040c20;
1000e418:	4a4c      	ldr	r2, [pc, #304]	; (1000e54c <platform_driver_init+0x214>)
1000e41a:	4b4d      	ldr	r3, [pc, #308]	; (1000e550 <platform_driver_init+0x218>)
1000e41c:	601a      	str	r2, [r3, #0]
		ke_free = (void(*)(void*))0x00019f09;
1000e41e:	4a4d      	ldr	r2, [pc, #308]	; (1000e554 <platform_driver_init+0x21c>)
1000e420:	4b4d      	ldr	r3, [pc, #308]	; (1000e558 <platform_driver_init+0x220>)
1000e422:	601a      	str	r2, [r3, #0]
#endif
		memset(rx_buffer,0,sizeof(rx_buffer));
1000e424:	22a0      	movs	r2, #160	; 0xa0
1000e426:	0092      	lsls	r2, r2, #2
1000e428:	2100      	movs	r1, #0
1000e42a:	484c      	ldr	r0, [pc, #304]	; (1000e55c <platform_driver_init+0x224>)
1000e42c:	4b4c      	ldr	r3, [pc, #304]	; (1000e560 <platform_driver_init+0x228>)
1000e42e:	4798      	blx	r3
		plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000e430:	2280      	movs	r2, #128	; 0x80
1000e432:	0092      	lsls	r2, r2, #2
1000e434:	4b4b      	ldr	r3, [pc, #300]	; (1000e564 <platform_driver_init+0x22c>)
1000e436:	801a      	strh	r2, [r3, #0]
		platform_event_init();
1000e438:	4b4b      	ldr	r3, [pc, #300]	; (1000e568 <platform_driver_init+0x230>)
1000e43a:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000e43c:	4653      	mov	r3, sl
1000e43e:	6023      	str	r3, [r4, #0]
1000e440:	464b      	mov	r3, r9
1000e442:	6023      	str	r3, [r4, #0]
		
#ifndef CHIPVERSION_B0		
		// spi_flash clock fix.
		spi_flash_clock_init();
#endif
		samb11_app_resume_cb = NULL;
1000e444:	4b49      	ldr	r3, [pc, #292]	; (1000e56c <platform_driver_init+0x234>)
1000e446:	4642      	mov	r2, r8
1000e448:	601a      	str	r2, [r3, #0]
		*apps_resume_cb = (uint32_t)((resume_callback)samb11_plf_resume_callback);
1000e44a:	683b      	ldr	r3, [r7, #0]
1000e44c:	4a48      	ldr	r2, [pc, #288]	; (1000e570 <platform_driver_init+0x238>)
1000e44e:	601a      	str	r2, [r3, #0]
		*wakeup_source_active_cb = (uint32_t)((wakeup_source_active_callback)wakeup_active_event_callback);
1000e450:	6833      	ldr	r3, [r6, #0]
1000e452:	4a48      	ldr	r2, [pc, #288]	; (1000e574 <platform_driver_init+0x23c>)
1000e454:	601a      	str	r2, [r3, #0]
		wakeup_int_unregister_callback(0);
1000e456:	2000      	movs	r0, #0
1000e458:	4c47      	ldr	r4, [pc, #284]	; (1000e578 <platform_driver_init+0x240>)
1000e45a:	47a0      	blx	r4
		wakeup_int_unregister_callback(1);
1000e45c:	2001      	movs	r0, #1
1000e45e:	47a0      	blx	r4
		wakeup_int_unregister_callback(2);
1000e460:	2002      	movs	r0, #2
1000e462:	47a0      	blx	r4
		platform_initialized = 1;
1000e464:	2201      	movs	r2, #1
1000e466:	4b06      	ldr	r3, [pc, #24]	; (1000e480 <platform_driver_init+0x148>)
1000e468:	701a      	strb	r2, [r3, #0]
		status = STATUS_SUCCESS;
1000e46a:	2000      	movs	r0, #0
1000e46c:	e003      	b.n	1000e476 <platform_driver_init+0x13e>
	}
	else {
		platform_initialized = 1;
1000e46e:	2201      	movs	r2, #1
1000e470:	4b03      	ldr	r3, [pc, #12]	; (1000e480 <platform_driver_init+0x148>)
1000e472:	701a      	strb	r2, [r3, #0]
		status = STATUS_ALREADY_INITIALIZED;
1000e474:	2001      	movs	r0, #1
	}
	return status;
}
1000e476:	bc1c      	pop	{r2, r3, r4}
1000e478:	4690      	mov	r8, r2
1000e47a:	4699      	mov	r9, r3
1000e47c:	46a2      	mov	sl, r4
1000e47e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e480:	1001a318 	.word	0x1001a318
1000e484:	1000e2c5 	.word	0x1000e2c5
1000e488:	1000e309 	.word	0x1000e309
1000e48c:	1001a338 	.word	0x1001a338
1000e490:	e000e100 	.word	0xe000e100
1000e494:	1001b29c 	.word	0x1001b29c
1000e498:	000007d7 	.word	0x000007d7
1000e49c:	000007bd 	.word	0x000007bd
1000e4a0:	1001afd8 	.word	0x1001afd8
1000e4a4:	0001bc51 	.word	0x0001bc51
1000e4a8:	1001b2a0 	.word	0x1001b2a0
1000e4ac:	100400bc 	.word	0x100400bc
1000e4b0:	1001a30c 	.word	0x1001a30c
1000e4b4:	100400b8 	.word	0x100400b8
1000e4b8:	1001a308 	.word	0x1001a308
1000e4bc:	0001b99f 	.word	0x0001b99f
1000e4c0:	1001afd4 	.word	0x1001afd4
1000e4c4:	0001b9db 	.word	0x0001b9db
1000e4c8:	1001afe0 	.word	0x1001afe0
1000e4cc:	1001b2b0 	.word	0x1001b2b0
1000e4d0:	1004003c 	.word	0x1004003c
1000e4d4:	10041fc0 	.word	0x10041fc0
1000e4d8:	1001afe4 	.word	0x1001afe4
1000e4dc:	10041fc4 	.word	0x10041fc4
1000e4e0:	1001b2ac 	.word	0x1001b2ac
1000e4e4:	1001b2a4 	.word	0x1001b2a4
1000e4e8:	10041fd4 	.word	0x10041fd4
1000e4ec:	10041fd8 	.word	0x10041fd8
1000e4f0:	1001afdc 	.word	0x1001afdc
1000e4f4:	0001cbe9 	.word	0x0001cbe9
1000e4f8:	1001a32c 	.word	0x1001a32c
1000e4fc:	0001cd8f 	.word	0x0001cd8f
1000e500:	1001a31c 	.word	0x1001a31c
1000e504:	0001cea3 	.word	0x0001cea3
1000e508:	1001a340 	.word	0x1001a340
1000e50c:	0001cbcf 	.word	0x0001cbcf
1000e510:	1001a314 	.word	0x1001a314
1000e514:	1000e9c1 	.word	0x1000e9c1
1000e518:	1000e955 	.word	0x1000e955
1000e51c:	100400e4 	.word	0x100400e4
1000e520:	1001a334 	.word	0x1001a334
1000e524:	00019fe9 	.word	0x00019fe9
1000e528:	1001a344 	.word	0x1001a344
1000e52c:	0001dbdd 	.word	0x0001dbdd
1000e530:	1001a310 	.word	0x1001a310
1000e534:	0001dc5b 	.word	0x0001dc5b
1000e538:	1001a324 	.word	0x1001a324
1000e53c:	100405ec 	.word	0x100405ec
1000e540:	1001a320 	.word	0x1001a320
1000e544:	0001d5e3 	.word	0x0001d5e3
1000e548:	1001a330 	.word	0x1001a330
1000e54c:	10040c20 	.word	0x10040c20
1000e550:	1001a348 	.word	0x1001a348
1000e554:	00019f09 	.word	0x00019f09
1000e558:	1001a304 	.word	0x1001a304
1000e55c:	1001b01c 	.word	0x1001b01c
1000e560:	10016609 	.word	0x10016609
1000e564:	1001b2b4 	.word	0x1001b2b4
1000e568:	1000e1f1 	.word	0x1000e1f1
1000e56c:	1001b2a8 	.word	0x1001b2a8
1000e570:	1000e299 	.word	0x1000e299
1000e574:	1000ea1d 	.word	0x1000ea1d
1000e578:	1000ea05 	.word	0x1000ea05

1000e57c <platform_register_ble_msg_handler>:


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000e57c:	4b04      	ldr	r3, [pc, #16]	; (1000e590 <platform_register_ble_msg_handler+0x14>)
1000e57e:	781a      	ldrb	r2, [r3, #0]
		ble_stack_message_handler = fp;
		status = STATUS_SUCCESS;
	}
	else {
		status = STATUS_NOT_INITIALIZED;
1000e580:	2305      	movs	r3, #5


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000e582:	2a01      	cmp	r2, #1
1000e584:	d102      	bne.n	1000e58c <platform_register_ble_msg_handler+0x10>
		ble_stack_message_handler = fp;
1000e586:	4b03      	ldr	r3, [pc, #12]	; (1000e594 <platform_register_ble_msg_handler+0x18>)
1000e588:	6018      	str	r0, [r3, #0]
		status = STATUS_SUCCESS;
1000e58a:	2300      	movs	r3, #0
	}
	else {
		status = STATUS_NOT_INITIALIZED;
	}
	return status;
}
1000e58c:	0018      	movs	r0, r3
1000e58e:	4770      	bx	lr
1000e590:	1001a318 	.word	0x1001a318
1000e594:	1001a338 	.word	0x1001a338

1000e598 <platform_interface_send>:


//Sends a message through RW kernel messaging API
//struct ke_msg * p_msg;
void platform_interface_send(uint8_t* data, uint32_t len)
{
1000e598:	b570      	push	{r4, r5, r6, lr}
1000e59a:	0004      	movs	r4, r0
	void* params;
	
	#if (CHIPVERSION_B0)
	ke_task_id_t dest_id;
	dest_id = p_msg_hdr->dest_id;
	if(gapm_get_task_from_id != NULL)
1000e59c:	4b0e      	ldr	r3, [pc, #56]	; (1000e5d8 <platform_interface_send+0x40>)
1000e59e:	681b      	ldr	r3, [r3, #0]
1000e5a0:	2b00      	cmp	r3, #0
1000e5a2:	d002      	beq.n	1000e5aa <platform_interface_send+0x12>
		p_msg_hdr->dest_id = gapm_get_task_from_id(dest_id);
1000e5a4:	8840      	ldrh	r0, [r0, #2]
1000e5a6:	4798      	blx	r3
1000e5a8:	8060      	strh	r0, [r4, #2]
	#endif	//CHIPVERSION_B0
	// Allocate the kernel message
	params = ke_msg_alloc(p_msg_hdr->id, p_msg_hdr->dest_id, p_msg_hdr->src_id, p_msg_hdr->param_len);
1000e5aa:	88e3      	ldrh	r3, [r4, #6]
1000e5ac:	88a2      	ldrh	r2, [r4, #4]
1000e5ae:	8861      	ldrh	r1, [r4, #2]
1000e5b0:	8820      	ldrh	r0, [r4, #0]
1000e5b2:	4d0a      	ldr	r5, [pc, #40]	; (1000e5dc <platform_interface_send+0x44>)
1000e5b4:	682d      	ldr	r5, [r5, #0]
1000e5b6:	47a8      	blx	r5
1000e5b8:	0005      	movs	r5, r0
											
	//no params
	if (p_msg_hdr->param_len == 0)
1000e5ba:	88e2      	ldrh	r2, [r4, #6]
1000e5bc:	2a00      	cmp	r2, #0
1000e5be:	d102      	bne.n	1000e5c6 <platform_interface_send+0x2e>
	{
		// Send message directly
		at_ke_msg_send(params);
1000e5c0:	4b07      	ldr	r3, [pc, #28]	; (1000e5e0 <platform_interface_send+0x48>)
1000e5c2:	4798      	blx	r3
1000e5c4:	e006      	b.n	1000e5d4 <platform_interface_send+0x3c>
	}
	else
	{
		//copy params
		memcpy(params,&(data[KE_MSG_HDR_LENGTH]),p_msg_hdr->param_len);
1000e5c6:	0021      	movs	r1, r4
1000e5c8:	3108      	adds	r1, #8
1000e5ca:	4b06      	ldr	r3, [pc, #24]	; (1000e5e4 <platform_interface_send+0x4c>)
1000e5cc:	4798      	blx	r3
		// Send the kernel message
		at_ke_msg_send(params);
1000e5ce:	0028      	movs	r0, r5
1000e5d0:	4b03      	ldr	r3, [pc, #12]	; (1000e5e0 <platform_interface_send+0x48>)
1000e5d2:	4798      	blx	r3
	}
}
1000e5d4:	bd70      	pop	{r4, r5, r6, pc}
1000e5d6:	46c0      	nop			; (mov r8, r8)
1000e5d8:	1001a30c 	.word	0x1001a30c
1000e5dc:	1001a344 	.word	0x1001a344
1000e5e0:	1000e221 	.word	0x1000e221
1000e5e4:	100165f7 	.word	0x100165f7

1000e5e8 <send_plf_int_msg_ind>:

void send_plf_int_msg_ind(uint8_t intr_index, uint8_t callback_id, void *data, uint16_t data_len)
{
1000e5e8:	b570      	push	{r4, r5, r6, lr}
1000e5ea:	0015      	movs	r5, r2
1000e5ec:	001c      	movs	r4, r3
	void* params;
//#if (CHIPVERSION_A4)	
	//os_sem_up(gstrFwSem);
//#endif
	// Allocate the kernel message
	params = ke_msg_alloc(PERIPHERAL_INTERRUPT_EVENT, TASK_INTERNAL_APP, BUILD_INTR_SRCID(callback_id,intr_index), data_len);
1000e5ee:	020a      	lsls	r2, r1, #8
1000e5f0:	4302      	orrs	r2, r0
1000e5f2:	4b0a      	ldr	r3, [pc, #40]	; (1000e61c <send_plf_int_msg_ind+0x34>)
1000e5f4:	681e      	ldr	r6, [r3, #0]
1000e5f6:	0023      	movs	r3, r4
1000e5f8:	2105      	movs	r1, #5
1000e5fa:	20a0      	movs	r0, #160	; 0xa0
1000e5fc:	00c0      	lsls	r0, r0, #3
1000e5fe:	47b0      	blx	r6
1000e600:	1e06      	subs	r6, r0, #0
											
	//no params
	if(params != NULL) {
1000e602:	d00a      	beq.n	1000e61a <send_plf_int_msg_ind+0x32>
		if((data_len != 0) && (NULL != data))
1000e604:	2c00      	cmp	r4, #0
1000e606:	d005      	beq.n	1000e614 <send_plf_int_msg_ind+0x2c>
1000e608:	2d00      	cmp	r5, #0
1000e60a:	d003      	beq.n	1000e614 <send_plf_int_msg_ind+0x2c>
		{
			//copy params
			memcpy(params, data, data_len);
1000e60c:	0022      	movs	r2, r4
1000e60e:	0029      	movs	r1, r5
1000e610:	4b03      	ldr	r3, [pc, #12]	; (1000e620 <send_plf_int_msg_ind+0x38>)
1000e612:	4798      	blx	r3
		}
		// Send the kernel message
		at_ke_msg_send(params);
1000e614:	0030      	movs	r0, r6
1000e616:	4b03      	ldr	r3, [pc, #12]	; (1000e624 <send_plf_int_msg_ind+0x3c>)
1000e618:	4798      	blx	r3
	}
}
1000e61a:	bd70      	pop	{r4, r5, r6, pc}
1000e61c:	1001a344 	.word	0x1001a344
1000e620:	100165f7 	.word	0x100165f7
1000e624:	1000e221 	.word	0x1000e221

1000e628 <platform_event_wait>:
//Waits on InternalAppMsgQHandle Queue
// This function won't busy wait if nothing on queue but will down the semaphore and go to a blocking state
// The OS then will move control to other higher priority tasks and will only return if these tasks finish processing AND the queue has received 
//a msg
plf_drv_status platform_event_wait(uint32_t timeout)
{
1000e628:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e62a:	465f      	mov	r7, fp
1000e62c:	4656      	mov	r6, sl
1000e62e:	464d      	mov	r5, r9
1000e630:	4644      	mov	r4, r8
1000e632:	b4f0      	push	{r4, r5, r6, r7}
1000e634:	b087      	sub	sp, #28
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000e636:	1e44      	subs	r4, r0, #1
plf_drv_status platform_event_wait(uint32_t timeout)
{
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
1000e638:	2300      	movs	r3, #0
1000e63a:	4699      	mov	r9, r3
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000e63c:	1ce3      	adds	r3, r4, #3
1000e63e:	d81c      	bhi.n	1000e67a <platform_event_wait+0x52>
	return num_of_freed;
}

static void platform_start_event_timeout(uint32_t timeout)
{
	uint8_t msg[8+5] = {0};
1000e640:	220d      	movs	r2, #13
1000e642:	2100      	movs	r1, #0
1000e644:	a802      	add	r0, sp, #8
1000e646:	4b82      	ldr	r3, [pc, #520]	; (1000e850 <platform_event_wait+0x228>)
1000e648:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000e64a:	2333      	movs	r3, #51	; 0x33
1000e64c:	aa02      	add	r2, sp, #8
1000e64e:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000e650:	3b30      	subs	r3, #48	; 0x30
1000e652:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000e654:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000e656:	3302      	adds	r3, #2
1000e658:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000e65a:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (((5)>>8) & 0x00FF );
	
	msg[u16TxLen++] = (uint8_t)((timeout) & 0x00FF );
1000e65c:	7214      	strb	r4, [r2, #8]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 8) & 0x00FF) ;
1000e65e:	0a23      	lsrs	r3, r4, #8
1000e660:	7253      	strb	r3, [r2, #9]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 16) & 0x00FF);
1000e662:	0c23      	lsrs	r3, r4, #16
1000e664:	7293      	strb	r3, [r2, #10]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 24) & 0x00FF);
1000e666:	0e24      	lsrs	r4, r4, #24
1000e668:	72d4      	strb	r4, [r2, #11]
	
	msg[u16TxLen++] = ((1) & 0x00FF );
1000e66a:	2301      	movs	r3, #1
1000e66c:	7313      	strb	r3, [r2, #12]
	
	platform_interface_send(msg, u16TxLen);
1000e66e:	210d      	movs	r1, #13
1000e670:	0010      	movs	r0, r2
1000e672:	4b78      	ldr	r3, [pc, #480]	; (1000e854 <platform_event_wait+0x22c>)
1000e674:	4798      	blx	r3
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
	{			
		platform_start_event_timeout(timeout-1);
		bEventTimeoutFlag = 1;
1000e676:	2301      	movs	r3, #1
1000e678:	4699      	mov	r9, r3
1000e67a:	2400      	movs	r4, #0
1000e67c:	2500      	movs	r5, #0
	}

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
1000e67e:	4f76      	ldr	r7, [pc, #472]	; (1000e858 <platform_event_wait+0x230>)
1000e680:	4e76      	ldr	r6, [pc, #472]	; (1000e85c <platform_event_wait+0x234>)
1000e682:	4977      	ldr	r1, [pc, #476]	; (1000e860 <platform_event_wait+0x238>)
1000e684:	6838      	ldr	r0, [r7, #0]
1000e686:	6833      	ldr	r3, [r6, #0]
1000e688:	4798      	blx	r3
1000e68a:	2800      	cmp	r0, #0
1000e68c:	d000      	beq.n	1000e690 <platform_event_wait+0x68>
1000e68e:	e088      	b.n	1000e7a2 <platform_event_wait+0x17a>
		{
			uint16_t msg_id = rcv_msg->id;
1000e690:	4b73      	ldr	r3, [pc, #460]	; (1000e860 <platform_event_wait+0x238>)
1000e692:	681c      	ldr	r4, [r3, #0]
1000e694:	88a3      	ldrh	r3, [r4, #4]
1000e696:	469a      	mov	sl, r3
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000e698:	23cd      	movs	r3, #205	; 0xcd
1000e69a:	009b      	lsls	r3, r3, #2
1000e69c:	459a      	cmp	sl, r3
1000e69e:	d100      	bne.n	1000e6a2 <platform_event_wait+0x7a>
1000e6a0:	e0c7      	b.n	1000e832 <platform_event_wait+0x20a>

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
1000e6a2:	8923      	ldrh	r3, [r4, #8]
1000e6a4:	469b      	mov	fp, r3
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
1000e6a6:	8963      	ldrh	r3, [r4, #10]
1000e6a8:	4698      	mov	r8, r3
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000e6aa:	464b      	mov	r3, r9
1000e6ac:	2b00      	cmp	r3, #0
1000e6ae:	d011      	beq.n	1000e6d4 <platform_event_wait+0xac>
	platform_interface_send(msg, u16TxLen);
}

static void platform_stop_event_timeout(void)
{
	uint8_t msg[8+5] = {0};
1000e6b0:	220d      	movs	r2, #13
1000e6b2:	2100      	movs	r1, #0
1000e6b4:	a802      	add	r0, sp, #8
1000e6b6:	4b66      	ldr	r3, [pc, #408]	; (1000e850 <platform_event_wait+0x228>)
1000e6b8:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000e6ba:	2333      	movs	r3, #51	; 0x33
1000e6bc:	aa02      	add	r2, sp, #8
1000e6be:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000e6c0:	3b30      	subs	r3, #48	; 0x30
1000e6c2:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000e6c4:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000e6c6:	3302      	adds	r3, #2
1000e6c8:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000e6ca:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (uint8_t)(( (0) >> 16) & 0x00FF);
	msg[u16TxLen++] = (uint8_t)(( (0) >> 24) & 0x00FF);
	
	msg[u16TxLen++] = ((0) & 0x00FF );
	
	platform_interface_send(msg, u16TxLen);
1000e6cc:	210d      	movs	r1, #13
1000e6ce:	0010      	movs	r0, r2
1000e6d0:	4b60      	ldr	r3, [pc, #384]	; (1000e854 <platform_event_wait+0x22c>)
1000e6d2:	4798      	blx	r3
			{
				//Stop timer if it is still running
				platform_stop_event_timeout();
			}
				
			if(msg_id == PERIPHERAL_INTERRUPT_EVENT)
1000e6d4:	23a0      	movs	r3, #160	; 0xa0
1000e6d6:	00db      	lsls	r3, r3, #3
1000e6d8:	459a      	cmp	sl, r3
1000e6da:	d121      	bne.n	1000e720 <platform_event_wait+0xf8>
			{
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
1000e6dc:	4b61      	ldr	r3, [pc, #388]	; (1000e864 <platform_event_wait+0x23c>)
1000e6de:	881b      	ldrh	r3, [r3, #0]
1000e6e0:	4443      	add	r3, r8
1000e6e2:	22a0      	movs	r2, #160	; 0xa0
1000e6e4:	0092      	lsls	r2, r2, #2
1000e6e6:	4293      	cmp	r3, r2
1000e6e8:	dd02      	ble.n	1000e6f0 <platform_event_wait+0xc8>
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000e6ea:	3a80      	subs	r2, #128	; 0x80
1000e6ec:	4b5d      	ldr	r3, [pc, #372]	; (1000e864 <platform_event_wait+0x23c>)
1000e6ee:	801a      	strh	r2, [r3, #0]
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
1000e6f0:	4b5c      	ldr	r3, [pc, #368]	; (1000e864 <platform_event_wait+0x23c>)
1000e6f2:	469a      	mov	sl, r3
1000e6f4:	881d      	ldrh	r5, [r3, #0]
1000e6f6:	4b5c      	ldr	r3, [pc, #368]	; (1000e868 <platform_event_wait+0x240>)
1000e6f8:	18ed      	adds	r5, r5, r3
1000e6fa:	0021      	movs	r1, r4
1000e6fc:	310c      	adds	r1, #12
1000e6fe:	4642      	mov	r2, r8
1000e700:	0028      	movs	r0, r5
1000e702:	4b5a      	ldr	r3, [pc, #360]	; (1000e86c <platform_event_wait+0x244>)
1000e704:	4798      	blx	r3
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
1000e706:	4642      	mov	r2, r8
1000e708:	0029      	movs	r1, r5
1000e70a:	4658      	mov	r0, fp
1000e70c:	4b58      	ldr	r3, [pc, #352]	; (1000e870 <platform_event_wait+0x248>)
1000e70e:	4798      	blx	r3
				plf_event_buff_index += len;
1000e710:	4653      	mov	r3, sl
1000e712:	881b      	ldrh	r3, [r3, #0]
1000e714:	4443      	add	r3, r8
1000e716:	4652      	mov	r2, sl
1000e718:	8013      	strh	r3, [r2, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000e71a:	2400      	movs	r4, #0
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
				plf_event_buff_index += len;
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
1000e71c:	2502      	movs	r5, #2
1000e71e:	e03a      	b.n	1000e796 <platform_event_wait+0x16e>
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000e720:	4b54      	ldr	r3, [pc, #336]	; (1000e874 <platform_event_wait+0x24c>)
1000e722:	681b      	ldr	r3, [r3, #0]
1000e724:	2b00      	cmp	r3, #0
1000e726:	d032      	beq.n	1000e78e <platform_event_wait+0x166>
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
1000e728:	4b4d      	ldr	r3, [pc, #308]	; (1000e860 <platform_event_wait+0x238>)
1000e72a:	681a      	ldr	r2, [r3, #0]
1000e72c:	8893      	ldrh	r3, [r2, #4]
1000e72e:	21cd      	movs	r1, #205	; 0xcd
1000e730:	0089      	lsls	r1, r1, #2
1000e732:	428b      	cmp	r3, r1
1000e734:	d104      	bne.n	1000e740 <platform_event_wait+0x118>
					{
						if(bEventTimeoutFlag)
1000e736:	464b      	mov	r3, r9
						{
							status = STATUS_TIMEOUT;	
						}
						else
						{
							bLoopAgain = 1;
1000e738:	2401      	movs	r4, #1
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
1000e73a:	2b00      	cmp	r3, #0
1000e73c:	d02b      	beq.n	1000e796 <platform_event_wait+0x16e>
1000e73e:	e028      	b.n	1000e792 <platform_event_wait+0x16a>
							bLoopAgain = 1;
						}
					}
					else
					{
						ke_msg_hdr = (struct ke_msghdr *)((void *)(rx_buffer+BLE_EVENT_BUFFER_START_INDEX));
1000e740:	4c4d      	ldr	r4, [pc, #308]	; (1000e878 <platform_event_wait+0x250>)
1000e742:	4d49      	ldr	r5, [pc, #292]	; (1000e868 <platform_event_wait+0x240>)
1000e744:	6025      	str	r5, [r4, #0]
						ke_msg_hdr->id = rcv_msg->id;
1000e746:	702b      	strb	r3, [r5, #0]
1000e748:	0a1b      	lsrs	r3, r3, #8
1000e74a:	706b      	strb	r3, [r5, #1]
//#if (CHIPVERSION_A3 || CHIPVERSION_A4)
					//ke_msg_hdr->src_id = rcv_msg->src_id;
//#else
					ke_msg_hdr->src_id = gapm_get_id_from_task(rcv_msg->src_id);
1000e74c:	8910      	ldrh	r0, [r2, #8]
1000e74e:	4b4b      	ldr	r3, [pc, #300]	; (1000e87c <platform_event_wait+0x254>)
1000e750:	681b      	ldr	r3, [r3, #0]
1000e752:	4798      	blx	r3
1000e754:	7128      	strb	r0, [r5, #4]
1000e756:	0a00      	lsrs	r0, r0, #8
1000e758:	7168      	strb	r0, [r5, #5]
//#endif  /* (CHIPVERSION_A3 || CHIPVERSION_A4) */
						ke_msg_hdr->dest_id = rcv_msg->dest_id;
1000e75a:	6820      	ldr	r0, [r4, #0]
1000e75c:	4b40      	ldr	r3, [pc, #256]	; (1000e860 <platform_event_wait+0x238>)
1000e75e:	681a      	ldr	r2, [r3, #0]
1000e760:	88d2      	ldrh	r2, [r2, #6]
1000e762:	8042      	strh	r2, [r0, #2]
						ke_msg_hdr->param_len = rcv_msg->param_len;
1000e764:	681d      	ldr	r5, [r3, #0]
1000e766:	896b      	ldrh	r3, [r5, #10]
1000e768:	80c3      	strh	r3, [r0, #6]
						ke_msg_hdr++;
1000e76a:	3008      	adds	r0, #8
1000e76c:	6020      	str	r0, [r4, #0]
						if(rcv_msg->param_len > 0) {
1000e76e:	896a      	ldrh	r2, [r5, #10]
1000e770:	2a00      	cmp	r2, #0
1000e772:	d003      	beq.n	1000e77c <platform_event_wait+0x154>
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
1000e774:	0029      	movs	r1, r5
1000e776:	310c      	adds	r1, #12
1000e778:	4b3c      	ldr	r3, [pc, #240]	; (1000e86c <platform_event_wait+0x244>)
1000e77a:	4798      	blx	r3
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
1000e77c:	8969      	ldrh	r1, [r5, #10]
1000e77e:	3108      	adds	r1, #8
1000e780:	4b3c      	ldr	r3, [pc, #240]	; (1000e874 <platform_event_wait+0x24c>)
1000e782:	681b      	ldr	r3, [r3, #0]
1000e784:	4838      	ldr	r0, [pc, #224]	; (1000e868 <platform_event_wait+0x240>)
1000e786:	4798      	blx	r3
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000e788:	2400      	movs	r4, #0
						ke_msg_hdr++;
						if(rcv_msg->param_len > 0) {
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
1000e78a:	2503      	movs	r5, #3
1000e78c:	e003      	b.n	1000e796 <platform_event_wait+0x16e>
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000e78e:	2400      	movs	r4, #0
1000e790:	e001      	b.n	1000e796 <platform_event_wait+0x16e>
1000e792:	2400      	movs	r4, #0
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
						{
							status = STATUS_TIMEOUT;	
1000e794:	25d0      	movs	r5, #208	; 0xd0
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
					}
				}
			}
			ke_free(rcv_msg);
1000e796:	4b32      	ldr	r3, [pc, #200]	; (1000e860 <platform_event_wait+0x238>)
1000e798:	6818      	ldr	r0, [r3, #0]
1000e79a:	4b39      	ldr	r3, [pc, #228]	; (1000e880 <platform_event_wait+0x258>)
1000e79c:	681b      	ldr	r3, [r3, #0]
1000e79e:	4798      	blx	r3
1000e7a0:	e000      	b.n	1000e7a4 <platform_event_wait+0x17c>
		}
		else
		{
			status = STATUS_FAILURE;
1000e7a2:	2507      	movs	r5, #7
		}
	}while(bLoopAgain);
1000e7a4:	2c00      	cmp	r4, #0
1000e7a6:	d000      	beq.n	1000e7aa <platform_event_wait+0x182>
1000e7a8:	e76b      	b.n	1000e682 <platform_event_wait+0x5a>
	
	if(bEventTimeoutFlag)
1000e7aa:	464b      	mov	r3, r9
1000e7ac:	2b00      	cmp	r3, #0
1000e7ae:	d046      	beq.n	1000e83e <platform_event_wait+0x216>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
1000e7b0:	4b29      	ldr	r3, [pc, #164]	; (1000e858 <platform_event_wait+0x230>)
1000e7b2:	681e      	ldr	r6, [r3, #0]
#endif 
static int NMI_MsgQueueDestroyOnKeID(NMI_MsgQueueHandle* pHandle, ke_msg_id_t u16KeMsgId)
{
	int num_of_freed=0;
	Message * current , *prev = NULL;
	if((NULL == pHandle) && (NULL == pHandle->pstrMessageList))
1000e7b4:	2e00      	cmp	r6, #0
1000e7b6:	d104      	bne.n	1000e7c2 <platform_event_wait+0x19a>
1000e7b8:	2300      	movs	r3, #0
1000e7ba:	6a1c      	ldr	r4, [r3, #32]
1000e7bc:	2c00      	cmp	r4, #0
1000e7be:	d131      	bne.n	1000e824 <platform_event_wait+0x1fc>
1000e7c0:	e03d      	b.n	1000e83e <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
1000e7c2:	6a34      	ldr	r4, [r6, #32]
	os_sem_down(&pHandle->strCriticalSection);
1000e7c4:	2314      	movs	r3, #20
1000e7c6:	469c      	mov	ip, r3
1000e7c8:	44b4      	add	ip, r6
1000e7ca:	4663      	mov	r3, ip
1000e7cc:	4660      	mov	r0, ip
1000e7ce:	9300      	str	r3, [sp, #0]
1000e7d0:	4b2c      	ldr	r3, [pc, #176]	; (1000e884 <platform_event_wait+0x25c>)
1000e7d2:	681b      	ldr	r3, [r3, #0]
1000e7d4:	4798      	blx	r3
	while(NULL != current)
1000e7d6:	2c00      	cmp	r4, #0
1000e7d8:	d01f      	beq.n	1000e81a <platform_event_wait+0x1f2>
			}
			ke_free(rcv_msg);
		}
		else
		{
			status = STATUS_FAILURE;
1000e7da:	2700      	movs	r7, #0

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000e7dc:	23cd      	movs	r3, #205	; 0xcd
1000e7de:	009b      	lsls	r3, r3, #2
1000e7e0:	4698      	mov	r8, r3
		{
			num_of_freed++;
			if(NULL != prev)
			{
				prev->pstrNext = current->pstrNext;
				ke_free(current);
1000e7e2:	4b27      	ldr	r3, [pc, #156]	; (1000e880 <platform_event_wait+0x258>)
1000e7e4:	469a      	mov	sl, r3
1000e7e6:	0020      	movs	r0, r4

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000e7e8:	6803      	ldr	r3, [r0, #0]
1000e7ea:	889b      	ldrh	r3, [r3, #4]
1000e7ec:	4543      	cmp	r3, r8
1000e7ee:	d110      	bne.n	1000e812 <platform_event_wait+0x1ea>
		{
			num_of_freed++;
			if(NULL != prev)
1000e7f0:	2f00      	cmp	r7, #0
1000e7f2:	d006      	beq.n	1000e802 <platform_event_wait+0x1da>
			{
				prev->pstrNext = current->pstrNext;
1000e7f4:	6883      	ldr	r3, [r0, #8]
1000e7f6:	60bb      	str	r3, [r7, #8]
				ke_free(current);
1000e7f8:	4653      	mov	r3, sl
1000e7fa:	681b      	ldr	r3, [r3, #0]
1000e7fc:	4798      	blx	r3
				current = prev->pstrNext;
1000e7fe:	68b8      	ldr	r0, [r7, #8]
1000e800:	e009      	b.n	1000e816 <platform_event_wait+0x1ee>
			}
			else
			{
				pHandle->pstrMessageList = current->pstrNext;
1000e802:	6883      	ldr	r3, [r0, #8]
1000e804:	6233      	str	r3, [r6, #32]
				ke_free(current);
1000e806:	4b1e      	ldr	r3, [pc, #120]	; (1000e880 <platform_event_wait+0x258>)
1000e808:	681b      	ldr	r3, [r3, #0]
1000e80a:	9301      	str	r3, [sp, #4]
1000e80c:	4798      	blx	r3
				current = pHandle->pstrMessageList;
1000e80e:	6a30      	ldr	r0, [r6, #32]
1000e810:	e001      	b.n	1000e816 <platform_event_wait+0x1ee>
			}
		}
		else
		{
			prev = current;
			current = current ->pstrNext;
1000e812:	0007      	movs	r7, r0
1000e814:	6880      	ldr	r0, [r0, #8]
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
1000e816:	2800      	cmp	r0, #0
1000e818:	d1e6      	bne.n	1000e7e8 <platform_event_wait+0x1c0>
		{
			prev = current;
			current = current ->pstrNext;
		}
	}
	os_sem_up(&pHandle->strCriticalSection);
1000e81a:	4b1b      	ldr	r3, [pc, #108]	; (1000e888 <platform_event_wait+0x260>)
1000e81c:	681b      	ldr	r3, [r3, #0]
1000e81e:	9800      	ldr	r0, [sp, #0]
1000e820:	4798      	blx	r3
	if(bEventTimeoutFlag)
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
1000e822:	e00c      	b.n	1000e83e <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
1000e824:	2314      	movs	r3, #20
1000e826:	9300      	str	r3, [sp, #0]
1000e828:	4b16      	ldr	r3, [pc, #88]	; (1000e884 <platform_event_wait+0x25c>)
1000e82a:	681b      	ldr	r3, [r3, #0]
1000e82c:	2014      	movs	r0, #20
1000e82e:	4798      	blx	r3
1000e830:	e7d3      	b.n	1000e7da <platform_event_wait+0x1b2>
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000e832:	4b10      	ldr	r3, [pc, #64]	; (1000e874 <platform_event_wait+0x24c>)
1000e834:	681b      	ldr	r3, [r3, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000e836:	2400      	movs	r4, #0
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000e838:	2b00      	cmp	r3, #0
1000e83a:	d0ac      	beq.n	1000e796 <platform_event_wait+0x16e>
1000e83c:	e77b      	b.n	1000e736 <platform_event_wait+0x10e>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
}
1000e83e:	0028      	movs	r0, r5
1000e840:	b007      	add	sp, #28
1000e842:	bc3c      	pop	{r2, r3, r4, r5}
1000e844:	4690      	mov	r8, r2
1000e846:	4699      	mov	r9, r3
1000e848:	46a2      	mov	sl, r4
1000e84a:	46ab      	mov	fp, r5
1000e84c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e84e:	46c0      	nop			; (mov r8, r8)
1000e850:	10016609 	.word	0x10016609
1000e854:	1000e599 	.word	0x1000e599
1000e858:	1001a348 	.word	0x1001a348
1000e85c:	1001a330 	.word	0x1001a330
1000e860:	1001a33c 	.word	0x1001a33c
1000e864:	1001b2b4 	.word	0x1001b2b4
1000e868:	1001b01c 	.word	0x1001b01c
1000e86c:	100165f7 	.word	0x100165f7
1000e870:	1000e1b9 	.word	0x1000e1b9
1000e874:	1001a338 	.word	0x1001a338
1000e878:	1001a328 	.word	0x1001a328
1000e87c:	1001a308 	.word	0x1001a308
1000e880:	1001a304 	.word	0x1001a304
1000e884:	1001a324 	.word	0x1001a324
1000e888:	1001a310 	.word	0x1001a310

1000e88c <acquire_sleep_lock>:

plf_drv_status acquire_sleep_lock()
{
1000e88c:	b510      	push	{r4, lr}
    //DBG_LOG_DEV("[acquire_sleep_lock]\tDisabling ULP");
	plf_drv_status status = STATUS_RESOURCE_BUSY;
	//uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
	
	rwip_prevent_sleep_set(APP_PREVENT_SLEEP);
1000e88e:	4b03      	ldr	r3, [pc, #12]	; (1000e89c <acquire_sleep_lock+0x10>)
1000e890:	681b      	ldr	r3, [r3, #0]
1000e892:	2080      	movs	r0, #128	; 0x80
1000e894:	0200      	lsls	r0, r0, #8
1000e896:	4798      	blx	r3
		/*  */
		os_sem_up(gstrFwSem);
	}
#endif	//0
	return status;
}
1000e898:	2008      	movs	r0, #8
1000e89a:	bd10      	pop	{r4, pc}
1000e89c:	1001afd4 	.word	0x1001afd4

1000e8a0 <release_message_lock>:

plf_drv_status release_message_lock()
{
1000e8a0:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000e8a2:	4b03      	ldr	r3, [pc, #12]	; (1000e8b0 <release_message_lock+0x10>)
1000e8a4:	681b      	ldr	r3, [r3, #0]
1000e8a6:	2080      	movs	r0, #128	; 0x80
1000e8a8:	01c0      	lsls	r0, r0, #7
1000e8aa:	4798      	blx	r3
	return status;
}
1000e8ac:	2000      	movs	r0, #0
1000e8ae:	bd10      	pop	{r4, pc}
1000e8b0:	1001afe0 	.word	0x1001afe0

1000e8b4 <release_sleep_lock>:

plf_drv_status release_sleep_lock()
{
1000e8b4:	b510      	push	{r4, lr}
    //DBG_LOG_DEV("[release_sleep_lock]\tEnabling ULP");
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000e8b6:	4c05      	ldr	r4, [pc, #20]	; (1000e8cc <release_sleep_lock+0x18>)
1000e8b8:	2080      	movs	r0, #128	; 0x80
1000e8ba:	01c0      	lsls	r0, r0, #7
1000e8bc:	6823      	ldr	r3, [r4, #0]
1000e8be:	4798      	blx	r3
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
1000e8c0:	6823      	ldr	r3, [r4, #0]
1000e8c2:	2080      	movs	r0, #128	; 0x80
1000e8c4:	0200      	lsls	r0, r0, #8
1000e8c6:	4798      	blx	r3
	return status;
}
1000e8c8:	2000      	movs	r0, #0
1000e8ca:	bd10      	pop	{r4, pc}
1000e8cc:	1001afe0 	.word	0x1001afe0

1000e8d0 <register_resume_callback>:
}

plf_drv_status register_resume_callback(resume_callback cb)
{
	plf_drv_status status = STATUS_SUCCESS;
	if(cb == NULL)
1000e8d0:	2800      	cmp	r0, #0
1000e8d2:	d003      	beq.n	1000e8dc <register_resume_callback+0xc>
	{
		status = STATUS_INVALID_ARGUMENT;
	}
	else 
	{
		samb11_app_resume_cb = cb;
1000e8d4:	4b02      	ldr	r3, [pc, #8]	; (1000e8e0 <register_resume_callback+0x10>)
1000e8d6:	6018      	str	r0, [r3, #0]
	}
}

plf_drv_status register_resume_callback(resume_callback cb)
{
	plf_drv_status status = STATUS_SUCCESS;
1000e8d8:	2000      	movs	r0, #0
1000e8da:	e000      	b.n	1000e8de <register_resume_callback+0xe>
	if(cb == NULL)
	{
		status = STATUS_INVALID_ARGUMENT;
1000e8dc:	2009      	movs	r0, #9
	{
		samb11_app_resume_cb = cb;
		//*apps_resume_cb = (uint32_t)cb;
	}
	return status;
}
1000e8de:	4770      	bx	lr
1000e8e0:	1001b2a8 	.word	0x1001b2a8

1000e8e4 <gpio1_combined_isr_handler>:

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source);
void wakeup_active_event_callback(uint32_t wakeup_source);

void gpio1_combined_isr_handler(void)
{
1000e8e4:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio1 = LPGPIO_16;
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
1000e8e6:	4a18      	ldr	r2, [pc, #96]	; (1000e948 <gpio1_combined_isr_handler+0x64>)
1000e8e8:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000e8ea:	b29b      	uxth	r3, r3
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000e8ec:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000e8ee:	2180      	movs	r1, #128	; 0x80
1000e8f0:	0209      	lsls	r1, r1, #8
1000e8f2:	4301      	orrs	r1, r0
1000e8f4:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000e8f6:	0010      	movs	r0, r2
1000e8f8:	4d14      	ldr	r5, [pc, #80]	; (1000e94c <gpio1_combined_isr_handler+0x68>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000e8fa:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000e8fc:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000e8fe:	05db      	lsls	r3, r3, #23
1000e900:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000e902:	d011      	beq.n	1000e928 <gpio1_combined_isr_handler+0x44>
			port_gpio1 = (intstatus & ~(intstatus - 1));
1000e904:	b2db      	uxtb	r3, r3
1000e906:	4259      	negs	r1, r3
1000e908:	400b      	ands	r3, r1
			while (!(port_gpio1 == 1)) {
1000e90a:	2b01      	cmp	r3, #1
1000e90c:	d006      	beq.n	1000e91c <gpio1_combined_isr_handler+0x38>
1000e90e:	0011      	movs	r1, r2
				port_gpio1 = port_gpio1 >> 1;
1000e910:	085b      	lsrs	r3, r3, #1
				index++;
1000e912:	3101      	adds	r1, #1
1000e914:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio1 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio1 == 1)) {
1000e916:	2b01      	cmp	r3, #1
1000e918:	d1fa      	bne.n	1000e910 <gpio1_combined_isr_handler+0x2c>
1000e91a:	e000      	b.n	1000e91e <gpio1_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000e91c:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000e91e:	0023      	movs	r3, r4
1000e920:	408b      	lsls	r3, r1
1000e922:	b29b      	uxth	r3, r3
1000e924:	8703      	strh	r3, [r0, #56]	; 0x38
1000e926:	e003      	b.n	1000e930 <gpio1_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000e928:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000e92a:	432b      	orrs	r3, r5
1000e92c:	b29b      	uxth	r3, r3
1000e92e:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO1->INTSTATUSCLEAR.reg;
1000e930:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000e932:	05db      	lsls	r3, r3, #23
1000e934:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000e936:	d1e2      	bne.n	1000e8fe <gpio1_combined_isr_handler+0x1a>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000e938:	2180      	movs	r1, #128	; 0x80
1000e93a:	0049      	lsls	r1, r1, #1
1000e93c:	3381      	adds	r3, #129	; 0x81
1000e93e:	33ff      	adds	r3, #255	; 0xff
1000e940:	4a03      	ldr	r2, [pc, #12]	; (1000e950 <gpio1_combined_isr_handler+0x6c>)
1000e942:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(8);
}
1000e944:	bd30      	pop	{r4, r5, pc}
1000e946:	46c0      	nop			; (mov r8, r8)
1000e948:	40011000 	.word	0x40011000
1000e94c:	ffff8000 	.word	0xffff8000
1000e950:	e000e100 	.word	0xe000e100

1000e954 <gpio0_combined_isr_handler>:

void gpio0_combined_isr_handler(void)
{
1000e954:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio0 = LPGPIO_0;
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
1000e956:	4a17      	ldr	r2, [pc, #92]	; (1000e9b4 <gpio0_combined_isr_handler+0x60>)
1000e958:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000e95a:	b29b      	uxth	r3, r3
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000e95c:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000e95e:	2180      	movs	r1, #128	; 0x80
1000e960:	0209      	lsls	r1, r1, #8
1000e962:	4301      	orrs	r1, r0
1000e964:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000e966:	0010      	movs	r0, r2
1000e968:	4d13      	ldr	r5, [pc, #76]	; (1000e9b8 <gpio0_combined_isr_handler+0x64>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000e96a:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000e96c:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000e96e:	05db      	lsls	r3, r3, #23
1000e970:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000e972:	d011      	beq.n	1000e998 <gpio0_combined_isr_handler+0x44>
			port_gpio0 = (intstatus & ~(intstatus - 1));
1000e974:	b2db      	uxtb	r3, r3
1000e976:	4259      	negs	r1, r3
1000e978:	400b      	ands	r3, r1
			while (!(port_gpio0 == 1)) {
1000e97a:	2b01      	cmp	r3, #1
1000e97c:	d006      	beq.n	1000e98c <gpio0_combined_isr_handler+0x38>
1000e97e:	0011      	movs	r1, r2
				port_gpio0 = port_gpio0 >> 1;
1000e980:	085b      	lsrs	r3, r3, #1
				index++;
1000e982:	3101      	adds	r1, #1
1000e984:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio0 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio0 == 1)) {
1000e986:	2b01      	cmp	r3, #1
1000e988:	d1fa      	bne.n	1000e980 <gpio0_combined_isr_handler+0x2c>
1000e98a:	e000      	b.n	1000e98e <gpio0_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000e98c:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000e98e:	0023      	movs	r3, r4
1000e990:	408b      	lsls	r3, r1
1000e992:	b29b      	uxth	r3, r3
1000e994:	8703      	strh	r3, [r0, #56]	; 0x38
1000e996:	e003      	b.n	1000e9a0 <gpio0_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000e998:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000e99a:	432b      	orrs	r3, r5
1000e99c:	b29b      	uxth	r3, r3
1000e99e:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO0->INTSTATUSCLEAR.reg;
1000e9a0:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000e9a2:	05db      	lsls	r3, r3, #23
1000e9a4:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000e9a6:	d1e2      	bne.n	1000e96e <gpio0_combined_isr_handler+0x1a>
1000e9a8:	2180      	movs	r1, #128	; 0x80
1000e9aa:	3381      	adds	r3, #129	; 0x81
1000e9ac:	33ff      	adds	r3, #255	; 0xff
1000e9ae:	4a03      	ldr	r2, [pc, #12]	; (1000e9bc <gpio0_combined_isr_handler+0x68>)
1000e9b0:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(7);
}
1000e9b2:	bd30      	pop	{r4, r5, pc}
1000e9b4:	40010000 	.word	0x40010000
1000e9b8:	ffff8000 	.word	0xffff8000
1000e9bc:	e000e100 	.word	0xe000e100

1000e9c0 <PORT1_COMB_Handler>:

#ifdef CHIPVERSION_B0
void PORT1_COMB_Handler(void)
{
1000e9c0:	b510      	push	{r4, lr}
	/* if(CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13))) { */
	if (GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13))) {
1000e9c2:	4b0c      	ldr	r3, [pc, #48]	; (1000e9f4 <PORT1_COMB_Handler+0x34>)
1000e9c4:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
1000e9c6:	0b5b      	lsrs	r3, r3, #13
1000e9c8:	d010      	beq.n	1000e9ec <PORT1_COMB_Handler+0x2c>
		handle_ext_wakeup_isr();
1000e9ca:	4b0b      	ldr	r3, [pc, #44]	; (1000e9f8 <PORT1_COMB_Handler+0x38>)
1000e9cc:	681b      	ldr	r3, [r3, #0]
1000e9ce:	4798      	blx	r3

		/* clear specific int pin status that caused the Interrupt */
		/* CMSDK_GPIO1->INTCLEAR |= CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13)); */
		GPIO1->INTSTATUSCLEAR.reg |= GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13));
1000e9d0:	4a08      	ldr	r2, [pc, #32]	; (1000e9f4 <PORT1_COMB_Handler+0x34>)
1000e9d2:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000e9d4:	8f11      	ldrh	r1, [r2, #56]	; 0x38
1000e9d6:	0b5b      	lsrs	r3, r3, #13
1000e9d8:	035b      	lsls	r3, r3, #13
1000e9da:	430b      	orrs	r3, r1
1000e9dc:	8713      	strh	r3, [r2, #56]	; 0x38
1000e9de:	2180      	movs	r1, #128	; 0x80
1000e9e0:	0049      	lsls	r1, r1, #1
1000e9e2:	23c0      	movs	r3, #192	; 0xc0
1000e9e4:	005b      	lsls	r3, r3, #1
1000e9e6:	4a05      	ldr	r2, [pc, #20]	; (1000e9fc <PORT1_COMB_Handler+0x3c>)
1000e9e8:	50d1      	str	r1, [r2, r3]
1000e9ea:	e001      	b.n	1000e9f0 <PORT1_COMB_Handler+0x30>
		/* NVIC_ClearPendingIRQ(PORT1_COMB_IRQn); */
		NVIC_ClearPendingIRQ(8);
	} else {
		gpio1_combined_isr_handler();
1000e9ec:	4b04      	ldr	r3, [pc, #16]	; (1000ea00 <PORT1_COMB_Handler+0x40>)
1000e9ee:	4798      	blx	r3
	}
}
1000e9f0:	bd10      	pop	{r4, pc}
1000e9f2:	46c0      	nop			; (mov r8, r8)
1000e9f4:	40011000 	.word	0x40011000
1000e9f8:	1001b2a0 	.word	0x1001b2a0
1000e9fc:	e000e100 	.word	0xe000e100
1000ea00:	1000e8e5 	.word	0x1000e8e5

1000ea04 <wakeup_int_unregister_callback>:
	{
		wakeup_source_callback[wakeup_source] = 0;
	}
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
1000ea04:	2303      	movs	r3, #3
#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
	if(	(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_0) || 
1000ea06:	2802      	cmp	r0, #2
1000ea08:	d804      	bhi.n	1000ea14 <wakeup_int_unregister_callback+0x10>
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_1) || 
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_2) ) 
	{
		wakeup_source_callback[wakeup_source] = 0;
1000ea0a:	0080      	lsls	r0, r0, #2
1000ea0c:	2200      	movs	r2, #0
1000ea0e:	4b02      	ldr	r3, [pc, #8]	; (1000ea18 <wakeup_int_unregister_callback+0x14>)
1000ea10:	50c2      	str	r2, [r0, r3]

#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
1000ea12:	2300      	movs	r3, #0
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
	}
	return status;
}
1000ea14:	0018      	movs	r0, r3
1000ea16:	4770      	bx	lr
1000ea18:	1001b2b8 	.word	0x1001b2b8

1000ea1c <wakeup_active_event_callback>:

void wakeup_active_event_callback(uint32_t wakeup_source)
{
1000ea1c:	b510      	push	{r4, lr}
1000ea1e:	0004      	movs	r4, r0
	portint_callback_t callback;
	uint32_t *pu32WakeSource = (uint32_t *)wakeup_source;
	if((*pu32WakeSource & 0xFF) == 1)
1000ea20:	7803      	ldrb	r3, [r0, #0]
1000ea22:	2b01      	cmp	r3, #1
1000ea24:	d108      	bne.n	1000ea38 <wakeup_active_event_callback+0x1c>
	{
		if(wakeup_source_callback[0] != NULL) {
1000ea26:	4b11      	ldr	r3, [pc, #68]	; (1000ea6c <wakeup_active_event_callback+0x50>)
1000ea28:	681b      	ldr	r3, [r3, #0]
1000ea2a:	2b00      	cmp	r3, #0
1000ea2c:	d000      	beq.n	1000ea30 <wakeup_active_event_callback+0x14>
			callback = wakeup_source_callback[0];
			callback();
1000ea2e:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF);
1000ea30:	23ff      	movs	r3, #255	; 0xff
1000ea32:	6822      	ldr	r2, [r4, #0]
1000ea34:	439a      	bics	r2, r3
1000ea36:	6022      	str	r2, [r4, #0]
	}
	if(((*pu32WakeSource >> 8) & 0xFF) == 1)
1000ea38:	7863      	ldrb	r3, [r4, #1]
1000ea3a:	2b01      	cmp	r3, #1
1000ea3c:	d108      	bne.n	1000ea50 <wakeup_active_event_callback+0x34>
	{
		if(wakeup_source_callback[1] != NULL) {
1000ea3e:	4b0b      	ldr	r3, [pc, #44]	; (1000ea6c <wakeup_active_event_callback+0x50>)
1000ea40:	685b      	ldr	r3, [r3, #4]
1000ea42:	2b00      	cmp	r3, #0
1000ea44:	d000      	beq.n	1000ea48 <wakeup_active_event_callback+0x2c>
			callback = wakeup_source_callback[1];
			callback();
1000ea46:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 8);
1000ea48:	4b09      	ldr	r3, [pc, #36]	; (1000ea70 <wakeup_active_event_callback+0x54>)
1000ea4a:	6822      	ldr	r2, [r4, #0]
1000ea4c:	4013      	ands	r3, r2
1000ea4e:	6023      	str	r3, [r4, #0]
	}
	if(((*pu32WakeSource >> 16) & 0xFF) == 1)
1000ea50:	78a3      	ldrb	r3, [r4, #2]
1000ea52:	2b01      	cmp	r3, #1
1000ea54:	d108      	bne.n	1000ea68 <wakeup_active_event_callback+0x4c>
	{
		if(wakeup_source_callback[2] != NULL) {
1000ea56:	4b05      	ldr	r3, [pc, #20]	; (1000ea6c <wakeup_active_event_callback+0x50>)
1000ea58:	689b      	ldr	r3, [r3, #8]
1000ea5a:	2b00      	cmp	r3, #0
1000ea5c:	d000      	beq.n	1000ea60 <wakeup_active_event_callback+0x44>
			callback = wakeup_source_callback[2];
			callback();
1000ea5e:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 16);
1000ea60:	4b04      	ldr	r3, [pc, #16]	; (1000ea74 <wakeup_active_event_callback+0x58>)
1000ea62:	6822      	ldr	r2, [r4, #0]
1000ea64:	4013      	ands	r3, r2
1000ea66:	6023      	str	r3, [r4, #0]
	}
}
1000ea68:	bd10      	pop	{r4, pc}
1000ea6a:	46c0      	nop			; (mov r8, r8)
1000ea6c:	1001b2b8 	.word	0x1001b2b8
1000ea70:	ffff00ff 	.word	0xffff00ff
1000ea74:	ff00ffff 	.word	0xff00ffff

1000ea78 <resume_cb>:
	sms_pressure_init_variables();
}


static void resume_cb(void)
{
1000ea78:	b510      	push	{r4, lr}
	init_port_list(); // re-initialize all ports
1000ea7a:	4b09      	ldr	r3, [pc, #36]	; (1000eaa0 <resume_cb+0x28>)
1000ea7c:	4798      	blx	r3
	serial_console_init(); // GPIO (UART) for the console
1000ea7e:	4b09      	ldr	r3, [pc, #36]	; (1000eaa4 <resume_cb+0x2c>)
1000ea80:	4798      	blx	r3
	sms_dualtimer_init();
1000ea82:	4b09      	ldr	r3, [pc, #36]	; (1000eaa8 <resume_cb+0x30>)
1000ea84:	4798      	blx	r3
	sms_button_gpio_init(); // GPIO (AO_0 & AO_1) for the buttons
1000ea86:	4b09      	ldr	r3, [pc, #36]	; (1000eaac <resume_cb+0x34>)
1000ea88:	4798      	blx	r3
	sms_led_gpio_init();
1000ea8a:	4b09      	ldr	r3, [pc, #36]	; (1000eab0 <resume_cb+0x38>)
1000ea8c:	4798      	blx	r3
	sms_spi_master_configure();
1000ea8e:	4b09      	ldr	r3, [pc, #36]	; (1000eab4 <resume_cb+0x3c>)
1000ea90:	4798      	blx	r3
	sms_i2c_master_configure();
1000ea92:	4b09      	ldr	r3, [pc, #36]	; (1000eab8 <resume_cb+0x40>)
1000ea94:	4798      	blx	r3
	sms_imu_configure_gpio();
1000ea96:	4b09      	ldr	r3, [pc, #36]	; (1000eabc <resume_cb+0x44>)
1000ea98:	4798      	blx	r3
	sms_monitor_configure_gpio();
1000ea9a:	4b09      	ldr	r3, [pc, #36]	; (1000eac0 <resume_cb+0x48>)
1000ea9c:	4798      	blx	r3
	//gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, true);
}
1000ea9e:	bd10      	pop	{r4, pc}
1000eaa0:	1000e2c5 	.word	0x1000e2c5
1000eaa4:	1000e02d 	.word	0x1000e02d
1000eaa8:	1000abf5 	.word	0x1000abf5
1000eaac:	10009325 	.word	0x10009325
1000eab0:	1000a711 	.word	0x1000a711
1000eab4:	1000aaa9 	.word	0x1000aaa9
1000eab8:	100096b1 	.word	0x100096b1
1000eabc:	10009845 	.word	0x10009845
1000eac0:	10009611 	.word	0x10009611

1000eac4 <sms_init_variables>:
*/
/*- Includes ---------------------------------------------------------------*/
#include "sms_peripheral1.h"

void sms_init_variables(void)
{
1000eac4:	b510      	push	{r4, lr}
	timer1_current_mode = TIMER1_MODE_NONE;
1000eac6:	2300      	movs	r3, #0
1000eac8:	4a09      	ldr	r2, [pc, #36]	; (1000eaf0 <sms_init_variables+0x2c>)
1000eaca:	7013      	strb	r3, [r2, #0]
	timer2_current_mode = TIMER2_MODE_NONE;
1000eacc:	4a09      	ldr	r2, [pc, #36]	; (1000eaf4 <sms_init_variables+0x30>)
1000eace:	7013      	strb	r3, [r2, #0]
	sms_working_mode = SMS_MODE_BUTTON_SOLO;
1000ead0:	2101      	movs	r1, #1
1000ead2:	4a09      	ldr	r2, [pc, #36]	; (1000eaf8 <sms_init_variables+0x34>)
1000ead4:	7011      	strb	r1, [r2, #0]
	ulp_ready = false;
1000ead6:	4a09      	ldr	r2, [pc, #36]	; (1000eafc <sms_init_variables+0x38>)
1000ead8:	7013      	strb	r3, [r2, #0]
	sms_ble_timeout = BLE_TIMEOUT_OFF;
1000eada:	2201      	movs	r2, #1
1000eadc:	4252      	negs	r2, r2
1000eade:	4b08      	ldr	r3, [pc, #32]	; (1000eb00 <sms_init_variables+0x3c>)
1000eae0:	601a      	str	r2, [r3, #0]
	
	sms_ble_init_variables();
1000eae2:	4b08      	ldr	r3, [pc, #32]	; (1000eb04 <sms_init_variables+0x40>)
1000eae4:	4798      	blx	r3
	sms_button_init_variables();
1000eae6:	4b08      	ldr	r3, [pc, #32]	; (1000eb08 <sms_init_variables+0x44>)
1000eae8:	4798      	blx	r3
	sms_pressure_init_variables();
1000eaea:	4b08      	ldr	r3, [pc, #32]	; (1000eb0c <sms_init_variables+0x48>)
1000eaec:	4798      	blx	r3
}
1000eaee:	bd10      	pop	{r4, pc}
1000eaf0:	1001a41c 	.word	0x1001a41c
1000eaf4:	1001a54b 	.word	0x1001a54b
1000eaf8:	1001a424 	.word	0x1001a424
1000eafc:	1001a425 	.word	0x1001a425
1000eb00:	1001a420 	.word	0x1001a420
1000eb04:	10008dc9 	.word	0x10008dc9
1000eb08:	100092fd 	.word	0x100092fd
1000eb0c:	1000a7ad 	.word	0x1000a7ad

1000eb10 <main>:
//sms_current_interrupt.int_on = true;
//}


int main(void)
{
1000eb10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Define current BLE state
	* ------------------------ */
	ble_instance.current_state = BLE_STATE_STARTING;
1000eb12:	2210      	movs	r2, #16
1000eb14:	4b86      	ldr	r3, [pc, #536]	; (1000ed30 <main+0x220>)
1000eb16:	701a      	strb	r2, [r3, #0]
	
	/* Initialize platform
	* ------------------- */
	platform_driver_init();
1000eb18:	4b86      	ldr	r3, [pc, #536]	; (1000ed34 <main+0x224>)
1000eb1a:	4798      	blx	r3
	gpio_init(); // GPIO
1000eb1c:	4b86      	ldr	r3, [pc, #536]	; (1000ed38 <main+0x228>)
1000eb1e:	4798      	blx	r3
	serial_console_init(); // serial console for debugging
1000eb20:	4b86      	ldr	r3, [pc, #536]	; (1000ed3c <main+0x22c>)
1000eb22:	4798      	blx	r3
	
	/* Disable ULP
	* ----------- */
	acquire_sleep_lock();
1000eb24:	4b86      	ldr	r3, [pc, #536]	; (1000ed40 <main+0x230>)
1000eb26:	4798      	blx	r3
	

	/* Initialize SMS flags
	* -------------------- */
	sms_init_variables();
1000eb28:	4b86      	ldr	r3, [pc, #536]	; (1000ed44 <main+0x234>)
1000eb2a:	4798      	blx	r3
	
	
	/* Initialize hardware components
	* ------------------------------ */
	// Dualtimer
	sms_dualtimer_init();
1000eb2c:	4b86      	ldr	r3, [pc, #536]	; (1000ed48 <main+0x238>)
1000eb2e:	4798      	blx	r3
	
	// Buttons
	sms_button_gpio_init();
1000eb30:	4b86      	ldr	r3, [pc, #536]	; (1000ed4c <main+0x23c>)
1000eb32:	4798      	blx	r3
	
	// LED
	sms_led_gpio_init();
1000eb34:	4b86      	ldr	r3, [pc, #536]	; (1000ed50 <main+0x240>)
1000eb36:	4798      	blx	r3
	
	// I2C
	sms_i2c_master_configure();
1000eb38:	4b86      	ldr	r3, [pc, #536]	; (1000ed54 <main+0x244>)
1000eb3a:	4798      	blx	r3
	
	// SPI
	sms_spi_master_configure();
1000eb3c:	4b86      	ldr	r3, [pc, #536]	; (1000ed58 <main+0x248>)
1000eb3e:	4798      	blx	r3
	
	// MPU
	sms_imu_configure_gpio();
1000eb40:	4b86      	ldr	r3, [pc, #536]	; (1000ed5c <main+0x24c>)
1000eb42:	4798      	blx	r3
	
	// monitoring...
	sms_monitor_configure_gpio();
1000eb44:	4b86      	ldr	r3, [pc, #536]	; (1000ed60 <main+0x250>)
1000eb46:	4798      	blx	r3
	
	/* Initialize the BLE module
	* ------------------------- */
	ble_device_init(NULL); // initialize the BLE chip and set the device address
1000eb48:	2000      	movs	r0, #0
1000eb4a:	4b86      	ldr	r3, [pc, #536]	; (1000ed64 <main+0x254>)
1000eb4c:	4798      	blx	r3
	
	
	/* Define BLE services
	* ------------------- */
	sms_button_define_services();
1000eb4e:	4b86      	ldr	r3, [pc, #536]	; (1000ed68 <main+0x258>)
1000eb50:	4798      	blx	r3
	sms_pressure_define_services();
1000eb52:	4b86      	ldr	r3, [pc, #536]	; (1000ed6c <main+0x25c>)
1000eb54:	4798      	blx	r3
	sms_imu_define_services();
1000eb56:	4b86      	ldr	r3, [pc, #536]	; (1000ed70 <main+0x260>)
1000eb58:	4798      	blx	r3
	
	
	/* Register callbacks
	* ------------------ */
	// Recovering from ULP
	register_resume_callback(resume_cb); // register resume callback
1000eb5a:	4886      	ldr	r0, [pc, #536]	; (1000ed74 <main+0x264>)
1000eb5c:	4b86      	ldr	r3, [pc, #536]	; (1000ed78 <main+0x268>)
1000eb5e:	4798      	blx	r3

	// Dualtimer (AON timer enables on registration... so do it later)
	sms_dualtimer_register_callback(DUALTIMER_TIMER1, sms_dualtimer1_cb); // button pressing timer
1000eb60:	4986      	ldr	r1, [pc, #536]	; (1000ed7c <main+0x26c>)
1000eb62:	2000      	movs	r0, #0
1000eb64:	4b86      	ldr	r3, [pc, #536]	; (1000ed80 <main+0x270>)
1000eb66:	4798      	blx	r3
	// DUALTIMER_TIMER2 used for blocking delay!! So don't register callback!!

	// Buttons
	sms_button_register_callbacks();
1000eb68:	4b86      	ldr	r3, [pc, #536]	; (1000ed84 <main+0x274>)
1000eb6a:	4798      	blx	r3
	
	// MPU
	sms_imu_register_callbacks();
1000eb6c:	4b86      	ldr	r3, [pc, #536]	; (1000ed88 <main+0x278>)
1000eb6e:	4798      	blx	r3

	// BLE
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, BLE_GAP_EVENT_TYPE, sms_ble_gap_cb);
1000eb70:	4a86      	ldr	r2, [pc, #536]	; (1000ed8c <main+0x27c>)
1000eb72:	2100      	movs	r1, #0
1000eb74:	2000      	movs	r0, #0
1000eb76:	4c86      	ldr	r4, [pc, #536]	; (1000ed90 <main+0x280>)
1000eb78:	47a0      	blx	r4
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, BLE_GATT_SERVER_EVENT_TYPE, sms_ble_gatt_server_cb);
1000eb7a:	4a86      	ldr	r2, [pc, #536]	; (1000ed94 <main+0x284>)
1000eb7c:	2102      	movs	r1, #2
1000eb7e:	2000      	movs	r0, #0
1000eb80:	47a0      	blx	r4

	/* Enable buttons interrupts
	* ------------------------- */
	//sms_button_toggle_callback(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);

	if(sms_imu_startup()) {
1000eb82:	4b85      	ldr	r3, [pc, #532]	; (1000ed98 <main+0x288>)
1000eb84:	4798      	blx	r3
1000eb86:	2800      	cmp	r0, #0
1000eb88:	d005      	beq.n	1000eb96 <main+0x86>
		DBG_LOG("Cannot start IMU");
1000eb8a:	4884      	ldr	r0, [pc, #528]	; (1000ed9c <main+0x28c>)
1000eb8c:	4b84      	ldr	r3, [pc, #528]	; (1000eda0 <main+0x290>)
1000eb8e:	4798      	blx	r3
1000eb90:	4884      	ldr	r0, [pc, #528]	; (1000eda4 <main+0x294>)
1000eb92:	4b85      	ldr	r3, [pc, #532]	; (1000eda8 <main+0x298>)
1000eb94:	4798      	blx	r3
	}
	dualtimer_enable(DUALTIMER_TIMER1);
1000eb96:	2000      	movs	r0, #0
1000eb98:	4b84      	ldr	r3, [pc, #528]	; (1000edac <main+0x29c>)
1000eb9a:	4798      	blx	r3

	sms_button_toggle_callback(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
1000eb9c:	2101      	movs	r1, #1
1000eb9e:	2001      	movs	r0, #1
1000eba0:	4b83      	ldr	r3, [pc, #524]	; (1000edb0 <main+0x2a0>)
1000eba2:	4798      	blx	r3
	sms_sensors_interrupt_toggle(true, false);
1000eba4:	2100      	movs	r1, #0
1000eba6:	2001      	movs	r0, #1
1000eba8:	4b82      	ldr	r3, [pc, #520]	; (1000edb4 <main+0x2a4>)
1000ebaa:	4798      	blx	r3
	at_ble_status_t ble_status;
	static uint32_t cnt = 0;
	while(true)
	{
		/* BLE Event task */
		ble_status = ble_event_task(sms_ble_timeout);
1000ebac:	4e82      	ldr	r6, [pc, #520]	; (1000edb8 <main+0x2a8>)
1000ebae:	4c83      	ldr	r4, [pc, #524]	; (1000edbc <main+0x2ac>)
		}
		else if(ble_status == AT_BLE_TIMEOUT) {
			DBG_LOG("Event get timeout");
		}
		else {
			DBG_LOG("BLE error occurred");
1000ebb0:	4d7a      	ldr	r5, [pc, #488]	; (1000ed9c <main+0x28c>)
	at_ble_status_t ble_status;
	static uint32_t cnt = 0;
	while(true)
	{
		/* BLE Event task */
		ble_status = ble_event_task(sms_ble_timeout);
1000ebb2:	6830      	ldr	r0, [r6, #0]
1000ebb4:	47a0      	blx	r4
		
		if(ble_status == AT_BLE_SUCCESS) {
1000ebb6:	2800      	cmp	r0, #0
1000ebb8:	d000      	beq.n	1000ebbc <main+0xac>
1000ebba:	e0a0      	b.n	1000ecfe <main+0x1ee>
			/* Sensor interrupt region */
			if(button_instance.btn0.new_int) {
1000ebbc:	4b80      	ldr	r3, [pc, #512]	; (1000edc0 <main+0x2b0>)
1000ebbe:	78db      	ldrb	r3, [r3, #3]
1000ebc0:	2b00      	cmp	r3, #0
1000ebc2:	d00b      	beq.n	1000ebdc <main+0xcc>
				DBG_LOG("Btn0 int... ");
1000ebc4:	4875      	ldr	r0, [pc, #468]	; (1000ed9c <main+0x28c>)
1000ebc6:	4b76      	ldr	r3, [pc, #472]	; (1000eda0 <main+0x290>)
1000ebc8:	4798      	blx	r3
1000ebca:	487e      	ldr	r0, [pc, #504]	; (1000edc4 <main+0x2b4>)
1000ebcc:	4b76      	ldr	r3, [pc, #472]	; (1000eda8 <main+0x298>)
1000ebce:	4798      	blx	r3
				if(sms_button_fn(SMS_BTN_0) < 0) {
1000ebd0:	2000      	movs	r0, #0
1000ebd2:	4b7d      	ldr	r3, [pc, #500]	; (1000edc8 <main+0x2b8>)
1000ebd4:	4798      	blx	r3
					DBG_LOG_DEV("Error in sms_button_fn()");
				}
				// here
				button_instance.btn0.new_int = false;
1000ebd6:	2200      	movs	r2, #0
1000ebd8:	4b79      	ldr	r3, [pc, #484]	; (1000edc0 <main+0x2b0>)
1000ebda:	70da      	strb	r2, [r3, #3]
			}
			if(button_instance.btn1.new_int) {
1000ebdc:	4b78      	ldr	r3, [pc, #480]	; (1000edc0 <main+0x2b0>)
1000ebde:	7a5b      	ldrb	r3, [r3, #9]
1000ebe0:	2b00      	cmp	r3, #0
1000ebe2:	d00b      	beq.n	1000ebfc <main+0xec>
				DBG_LOG("Btn1 int... ");
1000ebe4:	486d      	ldr	r0, [pc, #436]	; (1000ed9c <main+0x28c>)
1000ebe6:	4b6e      	ldr	r3, [pc, #440]	; (1000eda0 <main+0x290>)
1000ebe8:	4798      	blx	r3
1000ebea:	4878      	ldr	r0, [pc, #480]	; (1000edcc <main+0x2bc>)
1000ebec:	4b6e      	ldr	r3, [pc, #440]	; (1000eda8 <main+0x298>)
1000ebee:	4798      	blx	r3
				if(sms_button_fn(SMS_BTN_1) < 0) {
1000ebf0:	2001      	movs	r0, #1
1000ebf2:	4b75      	ldr	r3, [pc, #468]	; (1000edc8 <main+0x2b8>)
1000ebf4:	4798      	blx	r3
					DBG_LOG_DEV("Error in sms_button_fn()");
				}
				// here
				button_instance.btn1.new_int = false;
1000ebf6:	2200      	movs	r2, #0
1000ebf8:	4b71      	ldr	r3, [pc, #452]	; (1000edc0 <main+0x2b0>)
1000ebfa:	725a      	strb	r2, [r3, #9]
			}
			if(imu_device.interrupt.new_gyro) {
1000ebfc:	2381      	movs	r3, #129	; 0x81
1000ebfe:	4a74      	ldr	r2, [pc, #464]	; (1000edd0 <main+0x2c0>)
1000ec00:	5cd3      	ldrb	r3, [r2, r3]
1000ec02:	2b00      	cmp	r3, #0
1000ec04:	d00b      	beq.n	1000ec1e <main+0x10e>
				gpio_pin_set_output_level(DBG_PIN_1, DBG_PIN_HIGH);
1000ec06:	2101      	movs	r1, #1
1000ec08:	200e      	movs	r0, #14
1000ec0a:	4f72      	ldr	r7, [pc, #456]	; (1000edd4 <main+0x2c4>)
1000ec0c:	47b8      	blx	r7
				//DBG_LOG("MPU int (%ld)... ", cnt++);
				sms_imu_poll_data();
1000ec0e:	4b72      	ldr	r3, [pc, #456]	; (1000edd8 <main+0x2c8>)
1000ec10:	4798      	blx	r3
				
				imu_device.interrupt.new_gyro = false;
1000ec12:	2100      	movs	r1, #0
1000ec14:	2381      	movs	r3, #129	; 0x81
1000ec16:	4a6e      	ldr	r2, [pc, #440]	; (1000edd0 <main+0x2c0>)
1000ec18:	54d1      	strb	r1, [r2, r3]
				//imu_device.interrupt.rts = true;
				gpio_pin_set_output_level(DBG_PIN_1, DBG_PIN_LOW);
1000ec1a:	200e      	movs	r0, #14
1000ec1c:	47b8      	blx	r7
				//DBG_LOG_CONT_DEV("done");
			}
			if(pressure_device.new_int) {
1000ec1e:	2329      	movs	r3, #41	; 0x29
1000ec20:	4a6e      	ldr	r2, [pc, #440]	; (1000eddc <main+0x2cc>)
1000ec22:	5cd3      	ldrb	r3, [r2, r3]
1000ec24:	2b00      	cmp	r3, #0
1000ec26:	d002      	beq.n	1000ec2e <main+0x11e>
				//DBG_LOG("Press int (%d)... ", ble_instance.sending_queue);
				//gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_HIGH);
				//sms_pressure_poll_data();
				pressure_device.new_int = false;
1000ec28:	2100      	movs	r1, #0
1000ec2a:	2329      	movs	r3, #41	; 0x29
1000ec2c:	54d1      	strb	r1, [r2, r3]
				//gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_LOW);
				//DBG_LOG_CONT_DEV("done");
			}
			
			/* Timer interrupt region */
			if(timer1_instance.new_int) {
1000ec2e:	4b6c      	ldr	r3, [pc, #432]	; (1000ede0 <main+0x2d0>)
1000ec30:	789b      	ldrb	r3, [r3, #2]
1000ec32:	2b00      	cmp	r3, #0
1000ec34:	d00d      	beq.n	1000ec52 <main+0x142>
				DBG_LOG("Timer1 int... ");
1000ec36:	4859      	ldr	r0, [pc, #356]	; (1000ed9c <main+0x28c>)
1000ec38:	4b59      	ldr	r3, [pc, #356]	; (1000eda0 <main+0x290>)
1000ec3a:	4798      	blx	r3
1000ec3c:	4869      	ldr	r0, [pc, #420]	; (1000ede4 <main+0x2d4>)
1000ec3e:	4b5a      	ldr	r3, [pc, #360]	; (1000eda8 <main+0x298>)
1000ec40:	4798      	blx	r3
				sms_dualtimer_stop(DUALTIMER_TIMER1);
1000ec42:	2000      	movs	r0, #0
1000ec44:	4b68      	ldr	r3, [pc, #416]	; (1000ede8 <main+0x2d8>)
1000ec46:	4798      	blx	r3
				sms_dualtimer1_fn();
1000ec48:	4b68      	ldr	r3, [pc, #416]	; (1000edec <main+0x2dc>)
1000ec4a:	4798      	blx	r3
				timer1_instance.new_int = false;
1000ec4c:	2200      	movs	r2, #0
1000ec4e:	4b64      	ldr	r3, [pc, #400]	; (1000ede0 <main+0x2d0>)
1000ec50:	709a      	strb	r2, [r3, #2]
			}
			if(timer2_instance.new_int) {
1000ec52:	4b67      	ldr	r3, [pc, #412]	; (1000edf0 <main+0x2e0>)
1000ec54:	789b      	ldrb	r3, [r3, #2]
1000ec56:	2b00      	cmp	r3, #0
1000ec58:	d00d      	beq.n	1000ec76 <main+0x166>
				DBG_LOG("Timer2 int... ");
1000ec5a:	4850      	ldr	r0, [pc, #320]	; (1000ed9c <main+0x28c>)
1000ec5c:	4b50      	ldr	r3, [pc, #320]	; (1000eda0 <main+0x290>)
1000ec5e:	4798      	blx	r3
1000ec60:	4864      	ldr	r0, [pc, #400]	; (1000edf4 <main+0x2e4>)
1000ec62:	4b51      	ldr	r3, [pc, #324]	; (1000eda8 <main+0x298>)
1000ec64:	4798      	blx	r3
				sms_dualtimer_stop(DUALTIMER_TIMER2);
1000ec66:	2001      	movs	r0, #1
1000ec68:	4b5f      	ldr	r3, [pc, #380]	; (1000ede8 <main+0x2d8>)
1000ec6a:	4798      	blx	r3
				sms_dualtimer2_fn();
1000ec6c:	4b62      	ldr	r3, [pc, #392]	; (1000edf8 <main+0x2e8>)
1000ec6e:	4798      	blx	r3
				timer2_instance.new_int = false;
1000ec70:	2200      	movs	r2, #0
1000ec72:	4b5f      	ldr	r3, [pc, #380]	; (1000edf0 <main+0x2e0>)
1000ec74:	709a      	strb	r2, [r3, #2]
			}
			
			/* Sending region */
			if(imu_device.interrupt.rts) {
1000ec76:	2382      	movs	r3, #130	; 0x82
1000ec78:	4a55      	ldr	r2, [pc, #340]	; (1000edd0 <main+0x2c0>)
1000ec7a:	5cd3      	ldrb	r3, [r2, r3]
1000ec7c:	2b00      	cmp	r3, #0
1000ec7e:	d015      	beq.n	1000ecac <main+0x19c>
				//DBG_LOG("MPU sending (%d/%d)... ", pressure_device.new_int, ble_instance.sending_queue);
				gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_HIGH);
1000ec80:	2101      	movs	r1, #1
1000ec82:	200f      	movs	r0, #15
1000ec84:	4b53      	ldr	r3, [pc, #332]	; (1000edd4 <main+0x2c4>)
1000ec86:	4798      	blx	r3
				if(ble_instance.sending_queue == 0) {
1000ec88:	4b29      	ldr	r3, [pc, #164]	; (1000ed30 <main+0x220>)
1000ec8a:	785b      	ldrb	r3, [r3, #1]
1000ec8c:	2b00      	cmp	r3, #0
1000ec8e:	d103      	bne.n	1000ec98 <main+0x188>
					sms_ble_send_characteristic(BLE_CHAR_MPU);
1000ec90:	2002      	movs	r0, #2
1000ec92:	4b5a      	ldr	r3, [pc, #360]	; (1000edfc <main+0x2ec>)
1000ec94:	4798      	blx	r3
1000ec96:	e002      	b.n	1000ec9e <main+0x18e>
				}
				else {
					DBG_LOG_CONT("flushing!");
1000ec98:	4859      	ldr	r0, [pc, #356]	; (1000ee00 <main+0x2f0>)
1000ec9a:	4b43      	ldr	r3, [pc, #268]	; (1000eda8 <main+0x298>)
1000ec9c:	4798      	blx	r3
				}
				imu_device.interrupt.rts = false;
1000ec9e:	2100      	movs	r1, #0
1000eca0:	2382      	movs	r3, #130	; 0x82
1000eca2:	4a4b      	ldr	r2, [pc, #300]	; (1000edd0 <main+0x2c0>)
1000eca4:	54d1      	strb	r1, [r2, r3]
				gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_LOW);
1000eca6:	200f      	movs	r0, #15
1000eca8:	4b4a      	ldr	r3, [pc, #296]	; (1000edd4 <main+0x2c4>)
1000ecaa:	4798      	blx	r3
			}
			if(pressure_device.rts) {
1000ecac:	232a      	movs	r3, #42	; 0x2a
1000ecae:	4a4b      	ldr	r2, [pc, #300]	; (1000eddc <main+0x2cc>)
1000ecb0:	5cd3      	ldrb	r3, [r2, r3]
1000ecb2:	2b00      	cmp	r3, #0
1000ecb4:	d100      	bne.n	1000ecb8 <main+0x1a8>
1000ecb6:	e77c      	b.n	1000ebb2 <main+0xa2>
				DBG_LOG("Press sending (%d/%d)... ", imu_device.interrupt.new_gyro, ble_instance.sending_queue);
1000ecb8:	4838      	ldr	r0, [pc, #224]	; (1000ed9c <main+0x28c>)
1000ecba:	4b39      	ldr	r3, [pc, #228]	; (1000eda0 <main+0x290>)
1000ecbc:	4798      	blx	r3
1000ecbe:	2381      	movs	r3, #129	; 0x81
1000ecc0:	4a43      	ldr	r2, [pc, #268]	; (1000edd0 <main+0x2c0>)
1000ecc2:	5cd1      	ldrb	r1, [r2, r3]
1000ecc4:	b2c9      	uxtb	r1, r1
1000ecc6:	4f1a      	ldr	r7, [pc, #104]	; (1000ed30 <main+0x220>)
1000ecc8:	787a      	ldrb	r2, [r7, #1]
1000ecca:	b2d2      	uxtb	r2, r2
1000eccc:	484d      	ldr	r0, [pc, #308]	; (1000ee04 <main+0x2f4>)
1000ecce:	4b36      	ldr	r3, [pc, #216]	; (1000eda8 <main+0x298>)
1000ecd0:	4798      	blx	r3
				gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_HIGH);
1000ecd2:	2101      	movs	r1, #1
1000ecd4:	200f      	movs	r0, #15
1000ecd6:	4b3f      	ldr	r3, [pc, #252]	; (1000edd4 <main+0x2c4>)
1000ecd8:	4798      	blx	r3
				if(ble_instance.sending_queue == 0) {
1000ecda:	787b      	ldrb	r3, [r7, #1]
1000ecdc:	2b00      	cmp	r3, #0
1000ecde:	d103      	bne.n	1000ece8 <main+0x1d8>
					sms_ble_send_characteristic(BLE_CHAR_PRESS);
1000ece0:	2001      	movs	r0, #1
1000ece2:	4b46      	ldr	r3, [pc, #280]	; (1000edfc <main+0x2ec>)
1000ece4:	4798      	blx	r3
1000ece6:	e002      	b.n	1000ecee <main+0x1de>
				}
				else {
					DBG_LOG_CONT("flushing!");
1000ece8:	4845      	ldr	r0, [pc, #276]	; (1000ee00 <main+0x2f0>)
1000ecea:	4b2f      	ldr	r3, [pc, #188]	; (1000eda8 <main+0x298>)
1000ecec:	4798      	blx	r3
				}
				pressure_device.rts = false;
1000ecee:	2100      	movs	r1, #0
1000ecf0:	232a      	movs	r3, #42	; 0x2a
1000ecf2:	4a3a      	ldr	r2, [pc, #232]	; (1000eddc <main+0x2cc>)
1000ecf4:	54d1      	strb	r1, [r2, r3]
				gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_LOW);
1000ecf6:	200f      	movs	r0, #15
1000ecf8:	4b36      	ldr	r3, [pc, #216]	; (1000edd4 <main+0x2c4>)
1000ecfa:	4798      	blx	r3
1000ecfc:	e759      	b.n	1000ebb2 <main+0xa2>
			}
		}
		else if(ble_status == AT_BLE_GAP_TIMEOUT) {
1000ecfe:	2845      	cmp	r0, #69	; 0x45
1000ed00:	d106      	bne.n	1000ed10 <main+0x200>
			DBG_LOG("GAP timeout");
1000ed02:	4826      	ldr	r0, [pc, #152]	; (1000ed9c <main+0x28c>)
1000ed04:	4b26      	ldr	r3, [pc, #152]	; (1000eda0 <main+0x290>)
1000ed06:	4798      	blx	r3
1000ed08:	483f      	ldr	r0, [pc, #252]	; (1000ee08 <main+0x2f8>)
1000ed0a:	4b27      	ldr	r3, [pc, #156]	; (1000eda8 <main+0x298>)
1000ed0c:	4798      	blx	r3
1000ed0e:	e750      	b.n	1000ebb2 <main+0xa2>
		}
		else if(ble_status == AT_BLE_TIMEOUT) {
1000ed10:	28d0      	cmp	r0, #208	; 0xd0
1000ed12:	d106      	bne.n	1000ed22 <main+0x212>
			DBG_LOG("Event get timeout");
1000ed14:	4821      	ldr	r0, [pc, #132]	; (1000ed9c <main+0x28c>)
1000ed16:	4b22      	ldr	r3, [pc, #136]	; (1000eda0 <main+0x290>)
1000ed18:	4798      	blx	r3
1000ed1a:	483c      	ldr	r0, [pc, #240]	; (1000ee0c <main+0x2fc>)
1000ed1c:	4b22      	ldr	r3, [pc, #136]	; (1000eda8 <main+0x298>)
1000ed1e:	4798      	blx	r3
1000ed20:	e747      	b.n	1000ebb2 <main+0xa2>
		}
		else {
			DBG_LOG("BLE error occurred");
1000ed22:	0028      	movs	r0, r5
1000ed24:	4b1e      	ldr	r3, [pc, #120]	; (1000eda0 <main+0x290>)
1000ed26:	4798      	blx	r3
1000ed28:	4839      	ldr	r0, [pc, #228]	; (1000ee10 <main+0x300>)
1000ed2a:	4b1f      	ldr	r3, [pc, #124]	; (1000eda8 <main+0x298>)
1000ed2c:	4798      	blx	r3
1000ed2e:	e740      	b.n	1000ebb2 <main+0xa2>
1000ed30:	1001a428 	.word	0x1001a428
1000ed34:	1000e339 	.word	0x1000e339
1000ed38:	1000bc65 	.word	0x1000bc65
1000ed3c:	1000e02d 	.word	0x1000e02d
1000ed40:	1000e88d 	.word	0x1000e88d
1000ed44:	1000eac5 	.word	0x1000eac5
1000ed48:	1000abf5 	.word	0x1000abf5
1000ed4c:	10009325 	.word	0x10009325
1000ed50:	1000a711 	.word	0x1000a711
1000ed54:	100096b1 	.word	0x100096b1
1000ed58:	1000aaa9 	.word	0x1000aaa9
1000ed5c:	10009845 	.word	0x10009845
1000ed60:	10009611 	.word	0x10009611
1000ed64:	1000d7b5 	.word	0x1000d7b5
1000ed68:	100095c1 	.word	0x100095c1
1000ed6c:	1000a999 	.word	0x1000a999
1000ed70:	100098e1 	.word	0x100098e1
1000ed74:	1000ea79 	.word	0x1000ea79
1000ed78:	1000e8d1 	.word	0x1000e8d1
1000ed7c:	1000acc5 	.word	0x1000acc5
1000ed80:	1000ac41 	.word	0x1000ac41
1000ed84:	100093cd 	.word	0x100093cd
1000ed88:	10009891 	.word	0x10009891
1000ed8c:	10017884 	.word	0x10017884
1000ed90:	1000d6e5 	.word	0x1000d6e5
1000ed94:	100178d0 	.word	0x100178d0
1000ed98:	1000a3dd 	.word	0x1000a3dd
1000ed9c:	100177b0 	.word	0x100177b0
1000eda0:	10016871 	.word	0x10016871
1000eda4:	100185dc 	.word	0x100185dc
1000eda8:	10016751 	.word	0x10016751
1000edac:	1000b409 	.word	0x1000b409
1000edb0:	10009579 	.word	0x10009579
1000edb4:	1000a9e9 	.word	0x1000a9e9
1000edb8:	1001a420 	.word	0x1001a420
1000edbc:	1000dec1 	.word	0x1000dec1
1000edc0:	1001a42c 	.word	0x1001a42c
1000edc4:	100185f0 	.word	0x100185f0
1000edc8:	10009421 	.word	0x10009421
1000edcc:	10018600 	.word	0x10018600
1000edd0:	1001a564 	.word	0x1001a564
1000edd4:	1000b925 	.word	0x1000b925
1000edd8:	1000a501 	.word	0x1000a501
1000eddc:	1001a4b0 	.word	0x1001a4b0
1000ede0:	1001a49c 	.word	0x1001a49c
1000ede4:	10018610 	.word	0x10018610
1000ede8:	1000acb9 	.word	0x1000acb9
1000edec:	1000ace5 	.word	0x1000ace5
1000edf0:	1001a548 	.word	0x1001a548
1000edf4:	10018620 	.word	0x10018620
1000edf8:	1000af09 	.word	0x1000af09
1000edfc:	10009029 	.word	0x10009029
1000ee00:	10018630 	.word	0x10018630
1000ee04:	1001863c 	.word	0x1001863c
1000ee08:	10018658 	.word	0x10018658
1000ee0c:	10018664 	.word	0x10018664
1000ee10:	10018678 	.word	0x10018678

1000ee14 <internal_event_post>:
1000ee14:	b570      	push	{r4, r5, r6, lr}
1000ee16:	4d12      	ldr	r5, [pc, #72]	; (1000ee60 <internal_event_post+0x4c>)
1000ee18:	682c      	ldr	r4, [r5, #0]
1000ee1a:	2c00      	cmp	r4, #0
1000ee1c:	d014      	beq.n	1000ee48 <internal_event_post+0x34>
1000ee1e:	6826      	ldr	r6, [r4, #0]
1000ee20:	60e2      	str	r2, [r4, #12]
1000ee22:	602e      	str	r6, [r5, #0]
1000ee24:	2500      	movs	r5, #0
1000ee26:	4a0f      	ldr	r2, [pc, #60]	; (1000ee64 <internal_event_post+0x50>)
1000ee28:	8123      	strh	r3, [r4, #8]
1000ee2a:	6813      	ldr	r3, [r2, #0]
1000ee2c:	6025      	str	r5, [r4, #0]
1000ee2e:	80a0      	strh	r0, [r4, #4]
1000ee30:	80e1      	strh	r1, [r4, #6]
1000ee32:	42ab      	cmp	r3, r5
1000ee34:	d101      	bne.n	1000ee3a <internal_event_post+0x26>
1000ee36:	6014      	str	r4, [r2, #0]
1000ee38:	e011      	b.n	1000ee5e <internal_event_post+0x4a>
1000ee3a:	681a      	ldr	r2, [r3, #0]
1000ee3c:	2a00      	cmp	r2, #0
1000ee3e:	d001      	beq.n	1000ee44 <internal_event_post+0x30>
1000ee40:	1c13      	adds	r3, r2, #0
1000ee42:	e7fa      	b.n	1000ee3a <internal_event_post+0x26>
1000ee44:	601c      	str	r4, [r3, #0]
1000ee46:	e00a      	b.n	1000ee5e <internal_event_post+0x4a>
1000ee48:	b2c4      	uxtb	r4, r0
1000ee4a:	2c00      	cmp	r4, #0
1000ee4c:	d107      	bne.n	1000ee5e <internal_event_post+0x4a>
1000ee4e:	4c06      	ldr	r4, [pc, #24]	; (1000ee68 <internal_event_post+0x54>)
1000ee50:	60e2      	str	r2, [r4, #12]
1000ee52:	2201      	movs	r2, #1
1000ee54:	8123      	strh	r3, [r4, #8]
1000ee56:	4b05      	ldr	r3, [pc, #20]	; (1000ee6c <internal_event_post+0x58>)
1000ee58:	80a0      	strh	r0, [r4, #4]
1000ee5a:	80e1      	strh	r1, [r4, #6]
1000ee5c:	701a      	strb	r2, [r3, #0]
1000ee5e:	bd70      	pop	{r4, r5, r6, pc}
1000ee60:	1001a364 	.word	0x1001a364
1000ee64:	1001a360 	.word	0x1001a360
1000ee68:	1001a34c 	.word	0x1001a34c
1000ee6c:	1001a35c 	.word	0x1001a35c

1000ee70 <internal_event_init>:
1000ee70:	b510      	push	{r4, lr}
1000ee72:	4b08      	ldr	r3, [pc, #32]	; (1000ee94 <internal_event_init+0x24>)
1000ee74:	0900      	lsrs	r0, r0, #4
1000ee76:	0100      	lsls	r0, r0, #4
1000ee78:	681a      	ldr	r2, [r3, #0]
1000ee7a:	1808      	adds	r0, r1, r0
1000ee7c:	4281      	cmp	r1, r0
1000ee7e:	d003      	beq.n	1000ee88 <internal_event_init+0x18>
1000ee80:	600a      	str	r2, [r1, #0]
1000ee82:	1c0a      	adds	r2, r1, #0
1000ee84:	3110      	adds	r1, #16
1000ee86:	e7f9      	b.n	1000ee7c <internal_event_init+0xc>
1000ee88:	601a      	str	r2, [r3, #0]
1000ee8a:	2200      	movs	r2, #0
1000ee8c:	4b02      	ldr	r3, [pc, #8]	; (1000ee98 <internal_event_init+0x28>)
1000ee8e:	601a      	str	r2, [r3, #0]
1000ee90:	bd10      	pop	{r4, pc}
1000ee92:	46c0      	nop			; (mov r8, r8)
1000ee94:	1001a364 	.word	0x1001a364
1000ee98:	1001a360 	.word	0x1001a360

1000ee9c <special_events_handler>:
1000ee9c:	b538      	push	{r3, r4, r5, lr}
1000ee9e:	4c1b      	ldr	r4, [pc, #108]	; (1000ef0c <special_events_handler+0x70>)
1000eea0:	1c03      	adds	r3, r0, #0
1000eea2:	8825      	ldrh	r5, [r4, #0]
1000eea4:	1c08      	adds	r0, r1, #0
1000eea6:	1c21      	adds	r1, r4, #0
1000eea8:	429d      	cmp	r5, r3
1000eeaa:	d107      	bne.n	1000eebc <special_events_handler+0x20>
1000eeac:	88a5      	ldrh	r5, [r4, #4]
1000eeae:	4285      	cmp	r5, r0
1000eeb0:	d104      	bne.n	1000eebc <special_events_handler+0x20>
1000eeb2:	2301      	movs	r3, #1
1000eeb4:	425b      	negs	r3, r3
1000eeb6:	8023      	strh	r3, [r4, #0]
1000eeb8:	60a2      	str	r2, [r4, #8]
1000eeba:	e009      	b.n	1000eed0 <special_events_handler+0x34>
1000eebc:	884c      	ldrh	r4, [r1, #2]
1000eebe:	429c      	cmp	r4, r3
1000eec0:	d10a      	bne.n	1000eed8 <special_events_handler+0x3c>
1000eec2:	888c      	ldrh	r4, [r1, #4]
1000eec4:	4284      	cmp	r4, r0
1000eec6:	d107      	bne.n	1000eed8 <special_events_handler+0x3c>
1000eec8:	2301      	movs	r3, #1
1000eeca:	425b      	negs	r3, r3
1000eecc:	804b      	strh	r3, [r1, #2]
1000eece:	608a      	str	r2, [r1, #8]
1000eed0:	4b0f      	ldr	r3, [pc, #60]	; (1000ef10 <special_events_handler+0x74>)
1000eed2:	4798      	blx	r3
1000eed4:	2001      	movs	r0, #1
1000eed6:	e017      	b.n	1000ef08 <special_events_handler+0x6c>
1000eed8:	490e      	ldr	r1, [pc, #56]	; (1000ef14 <special_events_handler+0x78>)
1000eeda:	428b      	cmp	r3, r1
1000eedc:	d00e      	beq.n	1000eefc <special_events_handler+0x60>
1000eede:	490e      	ldr	r1, [pc, #56]	; (1000ef18 <special_events_handler+0x7c>)
1000eee0:	428b      	cmp	r3, r1
1000eee2:	d007      	beq.n	1000eef4 <special_events_handler+0x58>
1000eee4:	490d      	ldr	r1, [pc, #52]	; (1000ef1c <special_events_handler+0x80>)
1000eee6:	2000      	movs	r0, #0
1000eee8:	428b      	cmp	r3, r1
1000eeea:	d10d      	bne.n	1000ef08 <special_events_handler+0x6c>
1000eeec:	1c10      	adds	r0, r2, #0
1000eeee:	4b0c      	ldr	r3, [pc, #48]	; (1000ef20 <special_events_handler+0x84>)
1000eef0:	4798      	blx	r3
1000eef2:	e7ef      	b.n	1000eed4 <special_events_handler+0x38>
1000eef4:	1c11      	adds	r1, r2, #0
1000eef6:	4b0b      	ldr	r3, [pc, #44]	; (1000ef24 <special_events_handler+0x88>)
1000eef8:	2200      	movs	r2, #0
1000eefa:	e002      	b.n	1000ef02 <special_events_handler+0x66>
1000eefc:	1c11      	adds	r1, r2, #0
1000eefe:	2200      	movs	r2, #0
1000ef00:	4b09      	ldr	r3, [pc, #36]	; (1000ef28 <special_events_handler+0x8c>)
1000ef02:	4798      	blx	r3
1000ef04:	4243      	negs	r3, r0
1000ef06:	4158      	adcs	r0, r3
1000ef08:	bd38      	pop	{r3, r4, r5, pc}
1000ef0a:	46c0      	nop			; (mov r8, r8)
1000ef0c:	1001b2c4 	.word	0x1001b2c4
1000ef10:	100108f9 	.word	0x100108f9
1000ef14:	00000e13 	.word	0x00000e13
1000ef18:	00000e15 	.word	0x00000e15
1000ef1c:	00000e01 	.word	0x00000e01
1000ef20:	10010c69 	.word	0x10010c69
1000ef24:	10010e29 	.word	0x10010e29
1000ef28:	10010f01 	.word	0x10010f01

1000ef2c <at_ble_event_get>:
1000ef2c:	2300      	movs	r3, #0
1000ef2e:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ef30:	b087      	sub	sp, #28
1000ef32:	9204      	str	r2, [sp, #16]
1000ef34:	7003      	strb	r3, [r0, #0]
1000ef36:	9b04      	ldr	r3, [sp, #16]
1000ef38:	9003      	str	r0, [sp, #12]
1000ef3a:	3b01      	subs	r3, #1
1000ef3c:	1c0d      	adds	r5, r1, #0
1000ef3e:	9305      	str	r3, [sp, #20]
1000ef40:	3303      	adds	r3, #3
1000ef42:	d802      	bhi.n	1000ef4a <at_ble_event_get+0x1e>
1000ef44:	9804      	ldr	r0, [sp, #16]
1000ef46:	4bae      	ldr	r3, [pc, #696]	; (1000f200 <at_ble_event_get+0x2d4>)
1000ef48:	4798      	blx	r3
1000ef4a:	9b05      	ldr	r3, [sp, #20]
1000ef4c:	4cad      	ldr	r4, [pc, #692]	; (1000f204 <at_ble_event_get+0x2d8>)
1000ef4e:	3303      	adds	r3, #3
1000ef50:	d902      	bls.n	1000ef58 <at_ble_event_get+0x2c>
1000ef52:	2300      	movs	r3, #0
1000ef54:	9302      	str	r3, [sp, #8]
1000ef56:	e015      	b.n	1000ef84 <at_ble_event_get+0x58>
1000ef58:	2300      	movs	r3, #0
1000ef5a:	9302      	str	r3, [sp, #8]
1000ef5c:	6823      	ldr	r3, [r4, #0]
1000ef5e:	2b00      	cmp	r3, #0
1000ef60:	d113      	bne.n	1000ef8a <at_ble_event_get+0x5e>
1000ef62:	9b02      	ldr	r3, [sp, #8]
1000ef64:	2bd0      	cmp	r3, #208	; 0xd0
1000ef66:	d100      	bne.n	1000ef6a <at_ble_event_get+0x3e>
1000ef68:	e2da      	b.n	1000f520 <at_ble_event_get+0x5f4>
1000ef6a:	9804      	ldr	r0, [sp, #16]
1000ef6c:	4ba6      	ldr	r3, [pc, #664]	; (1000f208 <at_ble_event_get+0x2dc>)
1000ef6e:	4798      	blx	r3
1000ef70:	9002      	str	r0, [sp, #8]
1000ef72:	2802      	cmp	r0, #2
1000ef74:	d1f2      	bne.n	1000ef5c <at_ble_event_get+0x30>
1000ef76:	e03f      	b.n	1000eff8 <at_ble_event_get+0xcc>
1000ef78:	9804      	ldr	r0, [sp, #16]
1000ef7a:	4ba3      	ldr	r3, [pc, #652]	; (1000f208 <at_ble_event_get+0x2dc>)
1000ef7c:	4798      	blx	r3
1000ef7e:	9002      	str	r0, [sp, #8]
1000ef80:	2802      	cmp	r0, #2
1000ef82:	d039      	beq.n	1000eff8 <at_ble_event_get+0xcc>
1000ef84:	6823      	ldr	r3, [r4, #0]
1000ef86:	2b00      	cmp	r3, #0
1000ef88:	d0f6      	beq.n	1000ef78 <at_ble_event_get+0x4c>
1000ef8a:	9b02      	ldr	r3, [sp, #8]
1000ef8c:	2bd0      	cmp	r3, #208	; 0xd0
1000ef8e:	d100      	bne.n	1000ef92 <at_ble_event_get+0x66>
1000ef90:	e2c6      	b.n	1000f520 <at_ble_event_get+0x5f4>
1000ef92:	9b02      	ldr	r3, [sp, #8]
1000ef94:	3b03      	subs	r3, #3
1000ef96:	1e5a      	subs	r2, r3, #1
1000ef98:	4193      	sbcs	r3, r2
1000ef9a:	9a02      	ldr	r2, [sp, #8]
1000ef9c:	425b      	negs	r3, r3
1000ef9e:	401a      	ands	r2, r3
1000efa0:	6823      	ldr	r3, [r4, #0]
1000efa2:	9202      	str	r2, [sp, #8]
1000efa4:	2b00      	cmp	r3, #0
1000efa6:	d100      	bne.n	1000efaa <at_ble_event_get+0x7e>
1000efa8:	e2c2      	b.n	1000f530 <at_ble_event_get+0x604>
1000efaa:	681a      	ldr	r2, [r3, #0]
1000efac:	68de      	ldr	r6, [r3, #12]
1000efae:	6022      	str	r2, [r4, #0]
1000efb0:	88da      	ldrh	r2, [r3, #6]
1000efb2:	9201      	str	r2, [sp, #4]
1000efb4:	4a95      	ldr	r2, [pc, #596]	; (1000f20c <at_ble_event_get+0x2e0>)
1000efb6:	889c      	ldrh	r4, [r3, #4]
1000efb8:	6811      	ldr	r1, [r2, #0]
1000efba:	6013      	str	r3, [r2, #0]
1000efbc:	6019      	str	r1, [r3, #0]
1000efbe:	4b94      	ldr	r3, [pc, #592]	; (1000f210 <at_ble_event_get+0x2e4>)
1000efc0:	781b      	ldrb	r3, [r3, #0]
1000efc2:	2b01      	cmp	r3, #1
1000efc4:	d10f      	bne.n	1000efe6 <at_ble_event_get+0xba>
1000efc6:	4b93      	ldr	r3, [pc, #588]	; (1000f214 <at_ble_event_get+0x2e8>)
1000efc8:	4a92      	ldr	r2, [pc, #584]	; (1000f214 <at_ble_event_get+0x2e8>)
1000efca:	8898      	ldrh	r0, [r3, #4]
1000efcc:	88d9      	ldrh	r1, [r3, #6]
1000efce:	68d2      	ldr	r2, [r2, #12]
1000efd0:	891b      	ldrh	r3, [r3, #8]
1000efd2:	4f91      	ldr	r7, [pc, #580]	; (1000f218 <at_ble_event_get+0x2ec>)
1000efd4:	47b8      	blx	r7
1000efd6:	2210      	movs	r2, #16
1000efd8:	4b90      	ldr	r3, [pc, #576]	; (1000f21c <at_ble_event_get+0x2f0>)
1000efda:	488e      	ldr	r0, [pc, #568]	; (1000f214 <at_ble_event_get+0x2e8>)
1000efdc:	2100      	movs	r1, #0
1000efde:	4798      	blx	r3
1000efe0:	2300      	movs	r3, #0
1000efe2:	4a8b      	ldr	r2, [pc, #556]	; (1000f210 <at_ble_event_get+0x2e4>)
1000efe4:	7013      	strb	r3, [r2, #0]
1000efe6:	9b02      	ldr	r3, [sp, #8]
1000efe8:	2b00      	cmp	r3, #0
1000efea:	d114      	bne.n	1000f016 <at_ble_event_get+0xea>
1000efec:	4b8c      	ldr	r3, [pc, #560]	; (1000f220 <at_ble_event_get+0x2f4>)
1000efee:	429c      	cmp	r4, r3
1000eff0:	d009      	beq.n	1000f006 <at_ble_event_get+0xda>
1000eff2:	4b8c      	ldr	r3, [pc, #560]	; (1000f224 <at_ble_event_get+0x2f8>)
1000eff4:	429c      	cmp	r4, r3
1000eff6:	d127      	bne.n	1000f048 <at_ble_event_get+0x11c>
1000eff8:	233a      	movs	r3, #58	; 0x3a
1000effa:	9a03      	ldr	r2, [sp, #12]
1000effc:	7013      	strb	r3, [r2, #0]
1000effe:	2300      	movs	r3, #0
1000f000:	9302      	str	r3, [sp, #8]
1000f002:	1c1d      	adds	r5, r3, #0
1000f004:	e007      	b.n	1000f016 <at_ble_event_get+0xea>
1000f006:	9b01      	ldr	r3, [sp, #4]
1000f008:	42a3      	cmp	r3, r4
1000f00a:	d000      	beq.n	1000f00e <at_ble_event_get+0xe2>
1000f00c:	e28a      	b.n	1000f524 <at_ble_event_get+0x5f8>
1000f00e:	2338      	movs	r3, #56	; 0x38
1000f010:	9a03      	ldr	r2, [sp, #12]
1000f012:	7013      	strb	r3, [r2, #0]
1000f014:	602e      	str	r6, [r5, #0]
1000f016:	9b03      	ldr	r3, [sp, #12]
1000f018:	781b      	ldrb	r3, [r3, #0]
1000f01a:	2b3b      	cmp	r3, #59	; 0x3b
1000f01c:	d101      	bne.n	1000f022 <at_ble_event_get+0xf6>
1000f01e:	4b82      	ldr	r3, [pc, #520]	; (1000f228 <at_ble_event_get+0x2fc>)
1000f020:	4798      	blx	r3
1000f022:	9b03      	ldr	r3, [sp, #12]
1000f024:	781b      	ldrb	r3, [r3, #0]
1000f026:	2b3b      	cmp	r3, #59	; 0x3b
1000f028:	d003      	beq.n	1000f032 <at_ble_event_get+0x106>
1000f02a:	9b05      	ldr	r3, [sp, #20]
1000f02c:	3303      	adds	r3, #3
1000f02e:	d904      	bls.n	1000f03a <at_ble_event_get+0x10e>
1000f030:	e283      	b.n	1000f53a <at_ble_event_get+0x60e>
1000f032:	9b02      	ldr	r3, [sp, #8]
1000f034:	2b00      	cmp	r3, #0
1000f036:	d088      	beq.n	1000ef4a <at_ble_event_get+0x1e>
1000f038:	e7f7      	b.n	1000f02a <at_ble_event_get+0xfe>
1000f03a:	9b02      	ldr	r3, [sp, #8]
1000f03c:	2bd0      	cmp	r3, #208	; 0xd0
1000f03e:	d100      	bne.n	1000f042 <at_ble_event_get+0x116>
1000f040:	e27b      	b.n	1000f53a <at_ble_event_get+0x60e>
1000f042:	4b7a      	ldr	r3, [pc, #488]	; (1000f22c <at_ble_event_get+0x300>)
1000f044:	4798      	blx	r3
1000f046:	e278      	b.n	1000f53a <at_ble_event_get+0x60e>
1000f048:	9b01      	ldr	r3, [sp, #4]
1000f04a:	2bbb      	cmp	r3, #187	; 0xbb
1000f04c:	d125      	bne.n	1000f09a <at_ble_event_get+0x16e>
1000f04e:	2cbb      	cmp	r4, #187	; 0xbb
1000f050:	d123      	bne.n	1000f09a <at_ble_event_get+0x16e>
1000f052:	466b      	mov	r3, sp
1000f054:	891b      	ldrh	r3, [r3, #8]
1000f056:	80ab      	strh	r3, [r5, #4]
1000f058:	78b3      	ldrb	r3, [r6, #2]
1000f05a:	7872      	ldrb	r2, [r6, #1]
1000f05c:	78f0      	ldrb	r0, [r6, #3]
1000f05e:	021b      	lsls	r3, r3, #8
1000f060:	4313      	orrs	r3, r2
1000f062:	7971      	ldrb	r1, [r6, #5]
1000f064:	7932      	ldrb	r2, [r6, #4]
1000f066:	70a8      	strb	r0, [r5, #2]
1000f068:	4871      	ldr	r0, [pc, #452]	; (1000f230 <at_ble_event_get+0x304>)
1000f06a:	802b      	strh	r3, [r5, #0]
1000f06c:	4283      	cmp	r3, r0
1000f06e:	d806      	bhi.n	1000f07e <at_ble_event_get+0x152>
1000f070:	4a70      	ldr	r2, [pc, #448]	; (1000f234 <at_ble_event_get+0x308>)
1000f072:	4293      	cmp	r3, r2
1000f074:	d20b      	bcs.n	1000f08e <at_ble_event_get+0x162>
1000f076:	4a70      	ldr	r2, [pc, #448]	; (1000f238 <at_ble_event_get+0x30c>)
1000f078:	4293      	cmp	r3, r2
1000f07a:	d008      	beq.n	1000f08e <at_ble_event_get+0x162>
1000f07c:	e009      	b.n	1000f092 <at_ble_event_get+0x166>
1000f07e:	486f      	ldr	r0, [pc, #444]	; (1000f23c <at_ble_event_get+0x310>)
1000f080:	4283      	cmp	r3, r0
1000f082:	d106      	bne.n	1000f092 <at_ble_event_get+0x166>
1000f084:	020b      	lsls	r3, r1, #8
1000f086:	4313      	orrs	r3, r2
1000f088:	80ab      	strh	r3, [r5, #4]
1000f08a:	2337      	movs	r3, #55	; 0x37
1000f08c:	e002      	b.n	1000f094 <at_ble_event_get+0x168>
1000f08e:	2336      	movs	r3, #54	; 0x36
1000f090:	e000      	b.n	1000f094 <at_ble_event_get+0x168>
1000f092:	2300      	movs	r3, #0
1000f094:	9a03      	ldr	r2, [sp, #12]
1000f096:	7013      	strb	r3, [r2, #0]
1000f098:	e7bd      	b.n	1000f016 <at_ble_event_get+0xea>
1000f09a:	4b69      	ldr	r3, [pc, #420]	; (1000f240 <at_ble_event_get+0x314>)
1000f09c:	429c      	cmp	r4, r3
1000f09e:	d100      	bne.n	1000f0a2 <at_ble_event_get+0x176>
1000f0a0:	e144      	b.n	1000f32c <at_ble_event_get+0x400>
1000f0a2:	d865      	bhi.n	1000f170 <at_ble_event_get+0x244>
1000f0a4:	4b67      	ldr	r3, [pc, #412]	; (1000f244 <at_ble_event_get+0x318>)
1000f0a6:	429c      	cmp	r4, r3
1000f0a8:	d100      	bne.n	1000f0ac <at_ble_event_get+0x180>
1000f0aa:	e1d5      	b.n	1000f458 <at_ble_event_get+0x52c>
1000f0ac:	d82f      	bhi.n	1000f10e <at_ble_event_get+0x1e2>
1000f0ae:	4b66      	ldr	r3, [pc, #408]	; (1000f248 <at_ble_event_get+0x31c>)
1000f0b0:	429c      	cmp	r4, r3
1000f0b2:	d100      	bne.n	1000f0b6 <at_ble_event_get+0x18a>
1000f0b4:	e1e0      	b.n	1000f478 <at_ble_event_get+0x54c>
1000f0b6:	d813      	bhi.n	1000f0e0 <at_ble_event_get+0x1b4>
1000f0b8:	4b64      	ldr	r3, [pc, #400]	; (1000f24c <at_ble_event_get+0x320>)
1000f0ba:	429c      	cmp	r4, r3
1000f0bc:	d100      	bne.n	1000f0c0 <at_ble_event_get+0x194>
1000f0be:	e1a3      	b.n	1000f408 <at_ble_event_get+0x4dc>
1000f0c0:	d804      	bhi.n	1000f0cc <at_ble_event_get+0x1a0>
1000f0c2:	2638      	movs	r6, #56	; 0x38
1000f0c4:	42b4      	cmp	r4, r6
1000f0c6:	d100      	bne.n	1000f0ca <at_ble_event_get+0x19e>
1000f0c8:	e225      	b.n	1000f516 <at_ble_event_get+0x5ea>
1000f0ca:	e117      	b.n	1000f2fc <at_ble_event_get+0x3d0>
1000f0cc:	4b60      	ldr	r3, [pc, #384]	; (1000f250 <at_ble_event_get+0x324>)
1000f0ce:	429c      	cmp	r4, r3
1000f0d0:	d100      	bne.n	1000f0d4 <at_ble_event_get+0x1a8>
1000f0d2:	e19f      	b.n	1000f414 <at_ble_event_get+0x4e8>
1000f0d4:	33fe      	adds	r3, #254	; 0xfe
1000f0d6:	33ff      	adds	r3, #255	; 0xff
1000f0d8:	429c      	cmp	r4, r3
1000f0da:	d100      	bne.n	1000f0de <at_ble_event_get+0x1b2>
1000f0dc:	e1d3      	b.n	1000f486 <at_ble_event_get+0x55a>
1000f0de:	e10d      	b.n	1000f2fc <at_ble_event_get+0x3d0>
1000f0e0:	4b5c      	ldr	r3, [pc, #368]	; (1000f254 <at_ble_event_get+0x328>)
1000f0e2:	429c      	cmp	r4, r3
1000f0e4:	d100      	bne.n	1000f0e8 <at_ble_event_get+0x1bc>
1000f0e6:	e1a9      	b.n	1000f43c <at_ble_event_get+0x510>
1000f0e8:	d808      	bhi.n	1000f0fc <at_ble_event_get+0x1d0>
1000f0ea:	4b5b      	ldr	r3, [pc, #364]	; (1000f258 <at_ble_event_get+0x32c>)
1000f0ec:	429c      	cmp	r4, r3
1000f0ee:	d100      	bne.n	1000f0f2 <at_ble_event_get+0x1c6>
1000f0f0:	e196      	b.n	1000f420 <at_ble_event_get+0x4f4>
1000f0f2:	4b5a      	ldr	r3, [pc, #360]	; (1000f25c <at_ble_event_get+0x330>)
1000f0f4:	429c      	cmp	r4, r3
1000f0f6:	d100      	bne.n	1000f0fa <at_ble_event_get+0x1ce>
1000f0f8:	e199      	b.n	1000f42e <at_ble_event_get+0x502>
1000f0fa:	e0ff      	b.n	1000f2fc <at_ble_event_get+0x3d0>
1000f0fc:	4b58      	ldr	r3, [pc, #352]	; (1000f260 <at_ble_event_get+0x334>)
1000f0fe:	429c      	cmp	r4, r3
1000f100:	d100      	bne.n	1000f104 <at_ble_event_get+0x1d8>
1000f102:	e1a2      	b.n	1000f44a <at_ble_event_get+0x51e>
1000f104:	4b57      	ldr	r3, [pc, #348]	; (1000f264 <at_ble_event_get+0x338>)
1000f106:	429c      	cmp	r4, r3
1000f108:	d100      	bne.n	1000f10c <at_ble_event_get+0x1e0>
1000f10a:	e1d4      	b.n	1000f4b6 <at_ble_event_get+0x58a>
1000f10c:	e0f6      	b.n	1000f2fc <at_ble_event_get+0x3d0>
1000f10e:	4b56      	ldr	r3, [pc, #344]	; (1000f268 <at_ble_event_get+0x33c>)
1000f110:	429c      	cmp	r4, r3
1000f112:	d100      	bne.n	1000f116 <at_ble_event_get+0x1ea>
1000f114:	e1c8      	b.n	1000f4a8 <at_ble_event_get+0x57c>
1000f116:	d812      	bhi.n	1000f13e <at_ble_event_get+0x212>
1000f118:	4b54      	ldr	r3, [pc, #336]	; (1000f26c <at_ble_event_get+0x340>)
1000f11a:	429c      	cmp	r4, r3
1000f11c:	d100      	bne.n	1000f120 <at_ble_event_get+0x1f4>
1000f11e:	e1d1      	b.n	1000f4c4 <at_ble_event_get+0x598>
1000f120:	d804      	bhi.n	1000f12c <at_ble_event_get+0x200>
1000f122:	4b53      	ldr	r3, [pc, #332]	; (1000f270 <at_ble_event_get+0x344>)
1000f124:	429c      	cmp	r4, r3
1000f126:	d100      	bne.n	1000f12a <at_ble_event_get+0x1fe>
1000f128:	e19b      	b.n	1000f462 <at_ble_event_get+0x536>
1000f12a:	e0e7      	b.n	1000f2fc <at_ble_event_get+0x3d0>
1000f12c:	4b51      	ldr	r3, [pc, #324]	; (1000f274 <at_ble_event_get+0x348>)
1000f12e:	429c      	cmp	r4, r3
1000f130:	d100      	bne.n	1000f134 <at_ble_event_get+0x208>
1000f132:	e1ad      	b.n	1000f490 <at_ble_event_get+0x564>
1000f134:	4b50      	ldr	r3, [pc, #320]	; (1000f278 <at_ble_event_get+0x34c>)
1000f136:	429c      	cmp	r4, r3
1000f138:	d100      	bne.n	1000f13c <at_ble_event_get+0x210>
1000f13a:	e1b0      	b.n	1000f49e <at_ble_event_get+0x572>
1000f13c:	e0de      	b.n	1000f2fc <at_ble_event_get+0x3d0>
1000f13e:	4b4f      	ldr	r3, [pc, #316]	; (1000f27c <at_ble_event_get+0x350>)
1000f140:	429c      	cmp	r4, r3
1000f142:	d100      	bne.n	1000f146 <at_ble_event_get+0x21a>
1000f144:	e0e0      	b.n	1000f308 <at_ble_event_get+0x3dc>
1000f146:	d809      	bhi.n	1000f15c <at_ble_event_get+0x230>
1000f148:	3b08      	subs	r3, #8
1000f14a:	429c      	cmp	r4, r3
1000f14c:	d100      	bne.n	1000f150 <at_ble_event_get+0x224>
1000f14e:	e0d7      	b.n	1000f300 <at_ble_event_get+0x3d4>
1000f150:	4b4b      	ldr	r3, [pc, #300]	; (1000f280 <at_ble_event_get+0x354>)
1000f152:	2639      	movs	r6, #57	; 0x39
1000f154:	429c      	cmp	r4, r3
1000f156:	d100      	bne.n	1000f15a <at_ble_event_get+0x22e>
1000f158:	e1dd      	b.n	1000f516 <at_ble_event_get+0x5ea>
1000f15a:	e0cf      	b.n	1000f2fc <at_ble_event_get+0x3d0>
1000f15c:	23d1      	movs	r3, #209	; 0xd1
1000f15e:	011b      	lsls	r3, r3, #4
1000f160:	429c      	cmp	r4, r3
1000f162:	d100      	bne.n	1000f166 <at_ble_event_get+0x23a>
1000f164:	e0d6      	b.n	1000f314 <at_ble_event_get+0x3e8>
1000f166:	4b47      	ldr	r3, [pc, #284]	; (1000f284 <at_ble_event_get+0x358>)
1000f168:	429c      	cmp	r4, r3
1000f16a:	d100      	bne.n	1000f16e <at_ble_event_get+0x242>
1000f16c:	e0d8      	b.n	1000f320 <at_ble_event_get+0x3f4>
1000f16e:	e0c5      	b.n	1000f2fc <at_ble_event_get+0x3d0>
1000f170:	4b45      	ldr	r3, [pc, #276]	; (1000f288 <at_ble_event_get+0x35c>)
1000f172:	429c      	cmp	r4, r3
1000f174:	d100      	bne.n	1000f178 <at_ble_event_get+0x24c>
1000f176:	e117      	b.n	1000f3a8 <at_ble_event_get+0x47c>
1000f178:	d82e      	bhi.n	1000f1d8 <at_ble_event_get+0x2ac>
1000f17a:	4b44      	ldr	r3, [pc, #272]	; (1000f28c <at_ble_event_get+0x360>)
1000f17c:	429c      	cmp	r4, r3
1000f17e:	d100      	bne.n	1000f182 <at_ble_event_get+0x256>
1000f180:	e13d      	b.n	1000f3fe <at_ble_event_get+0x4d2>
1000f182:	d812      	bhi.n	1000f1aa <at_ble_event_get+0x27e>
1000f184:	4b42      	ldr	r3, [pc, #264]	; (1000f290 <at_ble_event_get+0x364>)
1000f186:	429c      	cmp	r4, r3
1000f188:	d100      	bne.n	1000f18c <at_ble_event_get+0x260>
1000f18a:	e0e8      	b.n	1000f35e <at_ble_event_get+0x432>
1000f18c:	d804      	bhi.n	1000f198 <at_ble_event_get+0x26c>
1000f18e:	3b03      	subs	r3, #3
1000f190:	429c      	cmp	r4, r3
1000f192:	d100      	bne.n	1000f196 <at_ble_event_get+0x26a>
1000f194:	e0d0      	b.n	1000f338 <at_ble_event_get+0x40c>
1000f196:	e0b1      	b.n	1000f2fc <at_ble_event_get+0x3d0>
1000f198:	4b3e      	ldr	r3, [pc, #248]	; (1000f294 <at_ble_event_get+0x368>)
1000f19a:	429c      	cmp	r4, r3
1000f19c:	d100      	bne.n	1000f1a0 <at_ble_event_get+0x274>
1000f19e:	e0d0      	b.n	1000f342 <at_ble_event_get+0x416>
1000f1a0:	4b3d      	ldr	r3, [pc, #244]	; (1000f298 <at_ble_event_get+0x36c>)
1000f1a2:	429c      	cmp	r4, r3
1000f1a4:	d100      	bne.n	1000f1a8 <at_ble_event_get+0x27c>
1000f1a6:	e0f9      	b.n	1000f39c <at_ble_event_get+0x470>
1000f1a8:	e0a8      	b.n	1000f2fc <at_ble_event_get+0x3d0>
1000f1aa:	4b3c      	ldr	r3, [pc, #240]	; (1000f29c <at_ble_event_get+0x370>)
1000f1ac:	429c      	cmp	r4, r3
1000f1ae:	d100      	bne.n	1000f1b2 <at_ble_event_get+0x286>
1000f1b0:	e0db      	b.n	1000f36a <at_ble_event_get+0x43e>
1000f1b2:	d808      	bhi.n	1000f1c6 <at_ble_event_get+0x29a>
1000f1b4:	4b3a      	ldr	r3, [pc, #232]	; (1000f2a0 <at_ble_event_get+0x374>)
1000f1b6:	429c      	cmp	r4, r3
1000f1b8:	d100      	bne.n	1000f1bc <at_ble_event_get+0x290>
1000f1ba:	e11b      	b.n	1000f3f4 <at_ble_event_get+0x4c8>
1000f1bc:	4b39      	ldr	r3, [pc, #228]	; (1000f2a4 <at_ble_event_get+0x378>)
1000f1be:	429c      	cmp	r4, r3
1000f1c0:	d100      	bne.n	1000f1c4 <at_ble_event_get+0x298>
1000f1c2:	e0d8      	b.n	1000f376 <at_ble_event_get+0x44a>
1000f1c4:	e09a      	b.n	1000f2fc <at_ble_event_get+0x3d0>
1000f1c6:	4b38      	ldr	r3, [pc, #224]	; (1000f2a8 <at_ble_event_get+0x37c>)
1000f1c8:	429c      	cmp	r4, r3
1000f1ca:	d100      	bne.n	1000f1ce <at_ble_event_get+0x2a2>
1000f1cc:	e0d8      	b.n	1000f380 <at_ble_event_get+0x454>
1000f1ce:	4b37      	ldr	r3, [pc, #220]	; (1000f2ac <at_ble_event_get+0x380>)
1000f1d0:	429c      	cmp	r4, r3
1000f1d2:	d100      	bne.n	1000f1d6 <at_ble_event_get+0x2aa>
1000f1d4:	e0db      	b.n	1000f38e <at_ble_event_get+0x462>
1000f1d6:	e091      	b.n	1000f2fc <at_ble_event_get+0x3d0>
1000f1d8:	4b35      	ldr	r3, [pc, #212]	; (1000f2b0 <at_ble_event_get+0x384>)
1000f1da:	429c      	cmp	r4, r3
1000f1dc:	d100      	bne.n	1000f1e0 <at_ble_event_get+0x2b4>
1000f1de:	e0f7      	b.n	1000f3d0 <at_ble_event_get+0x4a4>
1000f1e0:	d876      	bhi.n	1000f2d0 <at_ble_event_get+0x3a4>
1000f1e2:	4b34      	ldr	r3, [pc, #208]	; (1000f2b4 <at_ble_event_get+0x388>)
1000f1e4:	429c      	cmp	r4, r3
1000f1e6:	d100      	bne.n	1000f1ea <at_ble_event_get+0x2be>
1000f1e8:	e0f8      	b.n	1000f3dc <at_ble_event_get+0x4b0>
1000f1ea:	d869      	bhi.n	1000f2c0 <at_ble_event_get+0x394>
1000f1ec:	4b32      	ldr	r3, [pc, #200]	; (1000f2b8 <at_ble_event_get+0x38c>)
1000f1ee:	429c      	cmp	r4, r3
1000f1f0:	d100      	bne.n	1000f1f4 <at_ble_event_get+0x2c8>
1000f1f2:	e0e0      	b.n	1000f3b6 <at_ble_event_get+0x48a>
1000f1f4:	4b31      	ldr	r3, [pc, #196]	; (1000f2bc <at_ble_event_get+0x390>)
1000f1f6:	429c      	cmp	r4, r3
1000f1f8:	d100      	bne.n	1000f1fc <at_ble_event_get+0x2d0>
1000f1fa:	e0a9      	b.n	1000f350 <at_ble_event_get+0x424>
1000f1fc:	e07e      	b.n	1000f2fc <at_ble_event_get+0x3d0>
1000f1fe:	46c0      	nop			; (mov r8, r8)
1000f200:	10010931 	.word	0x10010931
1000f204:	1001a360 	.word	0x1001a360
1000f208:	1000e629 	.word	0x1000e629
1000f20c:	1001a364 	.word	0x1001a364
1000f210:	1001a35c 	.word	0x1001a35c
1000f214:	1001a34c 	.word	0x1001a34c
1000f218:	1000ee15 	.word	0x1000ee15
1000f21c:	10016609 	.word	0x10016609
1000f220:	0000ffff 	.word	0x0000ffff
1000f224:	0000fffe 	.word	0x0000fffe
1000f228:	1000e8a1 	.word	0x1000e8a1
1000f22c:	10010933 	.word	0x10010933
1000f230:	0000201e 	.word	0x0000201e
1000f234:	0000201d 	.word	0x0000201d
1000f238:	00000c03 	.word	0x00000c03
1000f23c:	0000201f 	.word	0x0000201f
1000f240:	00000d1c 	.word	0x00000d1c
1000f244:	00000c0c 	.word	0x00000c0c
1000f248:	00000c02 	.word	0x00000c02
1000f24c:	00000a02 	.word	0x00000a02
1000f250:	00000a03 	.word	0x00000a03
1000f254:	00000c06 	.word	0x00000c06
1000f258:	00000c04 	.word	0x00000c04
1000f25c:	00000c05 	.word	0x00000c05
1000f260:	00000c07 	.word	0x00000c07
1000f264:	00000c09 	.word	0x00000c09
1000f268:	00000c17 	.word	0x00000c17
1000f26c:	00000c12 	.word	0x00000c12
1000f270:	00000c0d 	.word	0x00000c0d
1000f274:	00000c13 	.word	0x00000c13
1000f278:	00000c15 	.word	0x00000c15
1000f27c:	00000d08 	.word	0x00000d08
1000f280:	00000d01 	.word	0x00000d01
1000f284:	00000d15 	.word	0x00000d15
1000f288:	00000e1b 	.word	0x00000e1b
1000f28c:	00000e0f 	.word	0x00000e0f
1000f290:	00000e03 	.word	0x00000e03
1000f294:	00000e06 	.word	0x00000e06
1000f298:	00000e0a 	.word	0x00000e0a
1000f29c:	00000e15 	.word	0x00000e15
1000f2a0:	00000e11 	.word	0x00000e11
1000f2a4:	00000e13 	.word	0x00000e13
1000f2a8:	00000e17 	.word	0x00000e17
1000f2ac:	00000e19 	.word	0x00000e19
1000f2b0:	00000e27 	.word	0x00000e27
1000f2b4:	00000e21 	.word	0x00000e21
1000f2b8:	00000e1c 	.word	0x00000e1c
1000f2bc:	00000e1d 	.word	0x00000e1d
1000f2c0:	4b9f      	ldr	r3, [pc, #636]	; (1000f540 <at_ble_event_get+0x614>)
1000f2c2:	429c      	cmp	r4, r3
1000f2c4:	d07e      	beq.n	1000f3c4 <at_ble_event_get+0x498>
1000f2c6:	4b9f      	ldr	r3, [pc, #636]	; (1000f544 <at_ble_event_get+0x618>)
1000f2c8:	429c      	cmp	r4, r3
1000f2ca:	d100      	bne.n	1000f2ce <at_ble_event_get+0x3a2>
1000f2cc:	e08c      	b.n	1000f3e8 <at_ble_event_get+0x4bc>
1000f2ce:	e015      	b.n	1000f2fc <at_ble_event_get+0x3d0>
1000f2d0:	4b9d      	ldr	r3, [pc, #628]	; (1000f548 <at_ble_event_get+0x61c>)
1000f2d2:	429c      	cmp	r4, r3
1000f2d4:	d100      	bne.n	1000f2d8 <at_ble_event_get+0x3ac>
1000f2d6:	e10a      	b.n	1000f4ee <at_ble_event_get+0x5c2>
1000f2d8:	d808      	bhi.n	1000f2ec <at_ble_event_get+0x3c0>
1000f2da:	4b9c      	ldr	r3, [pc, #624]	; (1000f54c <at_ble_event_get+0x620>)
1000f2dc:	429c      	cmp	r4, r3
1000f2de:	d100      	bne.n	1000f2e2 <at_ble_event_get+0x3b6>
1000f2e0:	e0f7      	b.n	1000f4d2 <at_ble_event_get+0x5a6>
1000f2e2:	4b9b      	ldr	r3, [pc, #620]	; (1000f550 <at_ble_event_get+0x624>)
1000f2e4:	429c      	cmp	r4, r3
1000f2e6:	d100      	bne.n	1000f2ea <at_ble_event_get+0x3be>
1000f2e8:	e0fa      	b.n	1000f4e0 <at_ble_event_get+0x5b4>
1000f2ea:	e007      	b.n	1000f2fc <at_ble_event_get+0x3d0>
1000f2ec:	4b99      	ldr	r3, [pc, #612]	; (1000f554 <at_ble_event_get+0x628>)
1000f2ee:	429c      	cmp	r4, r3
1000f2f0:	d100      	bne.n	1000f2f4 <at_ble_event_get+0x3c8>
1000f2f2:	e103      	b.n	1000f4fc <at_ble_event_get+0x5d0>
1000f2f4:	4b98      	ldr	r3, [pc, #608]	; (1000f558 <at_ble_event_get+0x62c>)
1000f2f6:	429c      	cmp	r4, r3
1000f2f8:	d100      	bne.n	1000f2fc <at_ble_event_get+0x3d0>
1000f2fa:	e106      	b.n	1000f50a <at_ble_event_get+0x5de>
1000f2fc:	2600      	movs	r6, #0
1000f2fe:	e10a      	b.n	1000f516 <at_ble_event_get+0x5ea>
1000f300:	1c30      	adds	r0, r6, #0
1000f302:	1c29      	adds	r1, r5, #0
1000f304:	4b95      	ldr	r3, [pc, #596]	; (1000f55c <at_ble_event_get+0x630>)
1000f306:	e014      	b.n	1000f332 <at_ble_event_get+0x406>
1000f308:	1c30      	adds	r0, r6, #0
1000f30a:	1c29      	adds	r1, r5, #0
1000f30c:	4b94      	ldr	r3, [pc, #592]	; (1000f560 <at_ble_event_get+0x634>)
1000f30e:	4798      	blx	r3
1000f310:	2604      	movs	r6, #4
1000f312:	e100      	b.n	1000f516 <at_ble_event_get+0x5ea>
1000f314:	1c30      	adds	r0, r6, #0
1000f316:	1c29      	adds	r1, r5, #0
1000f318:	4b92      	ldr	r3, [pc, #584]	; (1000f564 <at_ble_event_get+0x638>)
1000f31a:	4798      	blx	r3
1000f31c:	2601      	movs	r6, #1
1000f31e:	e0fa      	b.n	1000f516 <at_ble_event_get+0x5ea>
1000f320:	1c30      	adds	r0, r6, #0
1000f322:	1c29      	adds	r1, r5, #0
1000f324:	4b90      	ldr	r3, [pc, #576]	; (1000f568 <at_ble_event_get+0x63c>)
1000f326:	4798      	blx	r3
1000f328:	260f      	movs	r6, #15
1000f32a:	e0f4      	b.n	1000f516 <at_ble_event_get+0x5ea>
1000f32c:	1c30      	adds	r0, r6, #0
1000f32e:	1c29      	adds	r1, r5, #0
1000f330:	4b8e      	ldr	r3, [pc, #568]	; (1000f56c <at_ble_event_get+0x640>)
1000f332:	4798      	blx	r3
1000f334:	1c06      	adds	r6, r0, #0
1000f336:	e0ee      	b.n	1000f516 <at_ble_event_get+0x5ea>
1000f338:	9801      	ldr	r0, [sp, #4]
1000f33a:	1c31      	adds	r1, r6, #0
1000f33c:	1c2a      	adds	r2, r5, #0
1000f33e:	4b8c      	ldr	r3, [pc, #560]	; (1000f570 <at_ble_event_get+0x644>)
1000f340:	e017      	b.n	1000f372 <at_ble_event_get+0x446>
1000f342:	1c31      	adds	r1, r6, #0
1000f344:	9801      	ldr	r0, [sp, #4]
1000f346:	1c2a      	adds	r2, r5, #0
1000f348:	4b8a      	ldr	r3, [pc, #552]	; (1000f574 <at_ble_event_get+0x648>)
1000f34a:	4798      	blx	r3
1000f34c:	2611      	movs	r6, #17
1000f34e:	e0e2      	b.n	1000f516 <at_ble_event_get+0x5ea>
1000f350:	1c31      	adds	r1, r6, #0
1000f352:	9801      	ldr	r0, [sp, #4]
1000f354:	1c2a      	adds	r2, r5, #0
1000f356:	4b88      	ldr	r3, [pc, #544]	; (1000f578 <at_ble_event_get+0x64c>)
1000f358:	4798      	blx	r3
1000f35a:	2612      	movs	r6, #18
1000f35c:	e0db      	b.n	1000f516 <at_ble_event_get+0x5ea>
1000f35e:	1c30      	adds	r0, r6, #0
1000f360:	1c29      	adds	r1, r5, #0
1000f362:	4b86      	ldr	r3, [pc, #536]	; (1000f57c <at_ble_event_get+0x650>)
1000f364:	4798      	blx	r3
1000f366:	2606      	movs	r6, #6
1000f368:	e0d5      	b.n	1000f516 <at_ble_event_get+0x5ea>
1000f36a:	1c31      	adds	r1, r6, #0
1000f36c:	1c2a      	adds	r2, r5, #0
1000f36e:	9801      	ldr	r0, [sp, #4]
1000f370:	4b83      	ldr	r3, [pc, #524]	; (1000f580 <at_ble_event_get+0x654>)
1000f372:	4798      	blx	r3
1000f374:	e7de      	b.n	1000f334 <at_ble_event_get+0x408>
1000f376:	9801      	ldr	r0, [sp, #4]
1000f378:	1c31      	adds	r1, r6, #0
1000f37a:	1c2a      	adds	r2, r5, #0
1000f37c:	4b81      	ldr	r3, [pc, #516]	; (1000f584 <at_ble_event_get+0x658>)
1000f37e:	e7f8      	b.n	1000f372 <at_ble_event_get+0x446>
1000f380:	1c31      	adds	r1, r6, #0
1000f382:	9801      	ldr	r0, [sp, #4]
1000f384:	1c2a      	adds	r2, r5, #0
1000f386:	4b80      	ldr	r3, [pc, #512]	; (1000f588 <at_ble_event_get+0x65c>)
1000f388:	4798      	blx	r3
1000f38a:	260d      	movs	r6, #13
1000f38c:	e0c3      	b.n	1000f516 <at_ble_event_get+0x5ea>
1000f38e:	1c31      	adds	r1, r6, #0
1000f390:	9801      	ldr	r0, [sp, #4]
1000f392:	1c2a      	adds	r2, r5, #0
1000f394:	4b7d      	ldr	r3, [pc, #500]	; (1000f58c <at_ble_event_get+0x660>)
1000f396:	4798      	blx	r3
1000f398:	260e      	movs	r6, #14
1000f39a:	e0bc      	b.n	1000f516 <at_ble_event_get+0x5ea>
1000f39c:	9801      	ldr	r0, [sp, #4]
1000f39e:	1c31      	adds	r1, r6, #0
1000f3a0:	1c2a      	adds	r2, r5, #0
1000f3a2:	4b7b      	ldr	r3, [pc, #492]	; (1000f590 <at_ble_event_get+0x664>)
1000f3a4:	4798      	blx	r3
1000f3a6:	e084      	b.n	1000f4b2 <at_ble_event_get+0x586>
1000f3a8:	1c31      	adds	r1, r6, #0
1000f3aa:	9801      	ldr	r0, [sp, #4]
1000f3ac:	1c2a      	adds	r2, r5, #0
1000f3ae:	4b79      	ldr	r3, [pc, #484]	; (1000f594 <at_ble_event_get+0x668>)
1000f3b0:	4798      	blx	r3
1000f3b2:	260b      	movs	r6, #11
1000f3b4:	e0af      	b.n	1000f516 <at_ble_event_get+0x5ea>
1000f3b6:	1c31      	adds	r1, r6, #0
1000f3b8:	9801      	ldr	r0, [sp, #4]
1000f3ba:	1c2a      	adds	r2, r5, #0
1000f3bc:	4b76      	ldr	r3, [pc, #472]	; (1000f598 <at_ble_event_get+0x66c>)
1000f3be:	4798      	blx	r3
1000f3c0:	2610      	movs	r6, #16
1000f3c2:	e0a8      	b.n	1000f516 <at_ble_event_get+0x5ea>
1000f3c4:	1c30      	adds	r0, r6, #0
1000f3c6:	1c29      	adds	r1, r5, #0
1000f3c8:	4b74      	ldr	r3, [pc, #464]	; (1000f59c <at_ble_event_get+0x670>)
1000f3ca:	4798      	blx	r3
1000f3cc:	2628      	movs	r6, #40	; 0x28
1000f3ce:	e0a2      	b.n	1000f516 <at_ble_event_get+0x5ea>
1000f3d0:	1c30      	adds	r0, r6, #0
1000f3d2:	1c29      	adds	r1, r5, #0
1000f3d4:	4b72      	ldr	r3, [pc, #456]	; (1000f5a0 <at_ble_event_get+0x674>)
1000f3d6:	4798      	blx	r3
1000f3d8:	2629      	movs	r6, #41	; 0x29
1000f3da:	e09c      	b.n	1000f516 <at_ble_event_get+0x5ea>
1000f3dc:	1c30      	adds	r0, r6, #0
1000f3de:	1c29      	adds	r1, r5, #0
1000f3e0:	4b70      	ldr	r3, [pc, #448]	; (1000f5a4 <at_ble_event_get+0x678>)
1000f3e2:	4798      	blx	r3
1000f3e4:	2627      	movs	r6, #39	; 0x27
1000f3e6:	e096      	b.n	1000f516 <at_ble_event_get+0x5ea>
1000f3e8:	1c30      	adds	r0, r6, #0
1000f3ea:	1c29      	adds	r1, r5, #0
1000f3ec:	4b6e      	ldr	r3, [pc, #440]	; (1000f5a8 <at_ble_event_get+0x67c>)
1000f3ee:	4798      	blx	r3
1000f3f0:	262a      	movs	r6, #42	; 0x2a
1000f3f2:	e090      	b.n	1000f516 <at_ble_event_get+0x5ea>
1000f3f4:	9801      	ldr	r0, [sp, #4]
1000f3f6:	1c31      	adds	r1, r6, #0
1000f3f8:	1c2a      	adds	r2, r5, #0
1000f3fa:	4b6c      	ldr	r3, [pc, #432]	; (1000f5ac <at_ble_event_get+0x680>)
1000f3fc:	e7b9      	b.n	1000f372 <at_ble_event_get+0x446>
1000f3fe:	9801      	ldr	r0, [sp, #4]
1000f400:	1c31      	adds	r1, r6, #0
1000f402:	1c2a      	adds	r2, r5, #0
1000f404:	4b6a      	ldr	r3, [pc, #424]	; (1000f5b0 <at_ble_event_get+0x684>)
1000f406:	e7b4      	b.n	1000f372 <at_ble_event_get+0x446>
1000f408:	1c30      	adds	r0, r6, #0
1000f40a:	1c29      	adds	r1, r5, #0
1000f40c:	4b69      	ldr	r3, [pc, #420]	; (1000f5b4 <at_ble_event_get+0x688>)
1000f40e:	4798      	blx	r3
1000f410:	262b      	movs	r6, #43	; 0x2b
1000f412:	e080      	b.n	1000f516 <at_ble_event_get+0x5ea>
1000f414:	1c30      	adds	r0, r6, #0
1000f416:	1c29      	adds	r1, r5, #0
1000f418:	4b67      	ldr	r3, [pc, #412]	; (1000f5b8 <at_ble_event_get+0x68c>)
1000f41a:	4798      	blx	r3
1000f41c:	262c      	movs	r6, #44	; 0x2c
1000f41e:	e07a      	b.n	1000f516 <at_ble_event_get+0x5ea>
1000f420:	1c31      	adds	r1, r6, #0
1000f422:	9801      	ldr	r0, [sp, #4]
1000f424:	1c2a      	adds	r2, r5, #0
1000f426:	4b65      	ldr	r3, [pc, #404]	; (1000f5bc <at_ble_event_get+0x690>)
1000f428:	4798      	blx	r3
1000f42a:	2613      	movs	r6, #19
1000f42c:	e073      	b.n	1000f516 <at_ble_event_get+0x5ea>
1000f42e:	1c31      	adds	r1, r6, #0
1000f430:	9801      	ldr	r0, [sp, #4]
1000f432:	1c2a      	adds	r2, r5, #0
1000f434:	4b62      	ldr	r3, [pc, #392]	; (1000f5c0 <at_ble_event_get+0x694>)
1000f436:	4798      	blx	r3
1000f438:	2614      	movs	r6, #20
1000f43a:	e06c      	b.n	1000f516 <at_ble_event_get+0x5ea>
1000f43c:	1c31      	adds	r1, r6, #0
1000f43e:	9801      	ldr	r0, [sp, #4]
1000f440:	1c2a      	adds	r2, r5, #0
1000f442:	4b60      	ldr	r3, [pc, #384]	; (1000f5c4 <at_ble_event_get+0x698>)
1000f444:	4798      	blx	r3
1000f446:	2615      	movs	r6, #21
1000f448:	e065      	b.n	1000f516 <at_ble_event_get+0x5ea>
1000f44a:	1c31      	adds	r1, r6, #0
1000f44c:	9801      	ldr	r0, [sp, #4]
1000f44e:	1c2a      	adds	r2, r5, #0
1000f450:	4b5d      	ldr	r3, [pc, #372]	; (1000f5c8 <at_ble_event_get+0x69c>)
1000f452:	4798      	blx	r3
1000f454:	2616      	movs	r6, #22
1000f456:	e05e      	b.n	1000f516 <at_ble_event_get+0x5ea>
1000f458:	9801      	ldr	r0, [sp, #4]
1000f45a:	1c31      	adds	r1, r6, #0
1000f45c:	1c2a      	adds	r2, r5, #0
1000f45e:	4b5b      	ldr	r3, [pc, #364]	; (1000f5cc <at_ble_event_get+0x6a0>)
1000f460:	e787      	b.n	1000f372 <at_ble_event_get+0x446>
1000f462:	1c31      	adds	r1, r6, #0
1000f464:	9801      	ldr	r0, [sp, #4]
1000f466:	1c2a      	adds	r2, r5, #0
1000f468:	4b58      	ldr	r3, [pc, #352]	; (1000f5cc <at_ble_event_get+0x6a0>)
1000f46a:	4798      	blx	r3
1000f46c:	88a9      	ldrh	r1, [r5, #4]
1000f46e:	1c06      	adds	r6, r0, #0
1000f470:	4b57      	ldr	r3, [pc, #348]	; (1000f5d0 <at_ble_event_get+0x6a4>)
1000f472:	8828      	ldrh	r0, [r5, #0]
1000f474:	4798      	blx	r3
1000f476:	e04e      	b.n	1000f516 <at_ble_event_get+0x5ea>
1000f478:	1c31      	adds	r1, r6, #0
1000f47a:	9801      	ldr	r0, [sp, #4]
1000f47c:	1c2a      	adds	r2, r5, #0
1000f47e:	4b55      	ldr	r3, [pc, #340]	; (1000f5d4 <at_ble_event_get+0x6a8>)
1000f480:	4798      	blx	r3
1000f482:	2623      	movs	r6, #35	; 0x23
1000f484:	e047      	b.n	1000f516 <at_ble_event_get+0x5ea>
1000f486:	9801      	ldr	r0, [sp, #4]
1000f488:	1c31      	adds	r1, r6, #0
1000f48a:	1c2a      	adds	r2, r5, #0
1000f48c:	4b52      	ldr	r3, [pc, #328]	; (1000f5d8 <at_ble_event_get+0x6ac>)
1000f48e:	e770      	b.n	1000f372 <at_ble_event_get+0x446>
1000f490:	9b01      	ldr	r3, [sp, #4]
1000f492:	1c30      	adds	r0, r6, #0
1000f494:	0a1f      	lsrs	r7, r3, #8
1000f496:	802f      	strh	r7, [r5, #0]
1000f498:	1c29      	adds	r1, r5, #0
1000f49a:	4b50      	ldr	r3, [pc, #320]	; (1000f5dc <at_ble_event_get+0x6b0>)
1000f49c:	e749      	b.n	1000f332 <at_ble_event_get+0x406>
1000f49e:	9801      	ldr	r0, [sp, #4]
1000f4a0:	1c31      	adds	r1, r6, #0
1000f4a2:	1c2a      	adds	r2, r5, #0
1000f4a4:	4b4e      	ldr	r3, [pc, #312]	; (1000f5e0 <at_ble_event_get+0x6b4>)
1000f4a6:	e764      	b.n	1000f372 <at_ble_event_get+0x446>
1000f4a8:	1c30      	adds	r0, r6, #0
1000f4aa:	1c29      	adds	r1, r5, #0
1000f4ac:	9a01      	ldr	r2, [sp, #4]
1000f4ae:	4b4d      	ldr	r3, [pc, #308]	; (1000f5e4 <at_ble_event_get+0x6b8>)
1000f4b0:	4798      	blx	r3
1000f4b2:	263b      	movs	r6, #59	; 0x3b
1000f4b4:	e02f      	b.n	1000f516 <at_ble_event_get+0x5ea>
1000f4b6:	1c31      	adds	r1, r6, #0
1000f4b8:	9801      	ldr	r0, [sp, #4]
1000f4ba:	1c2a      	adds	r2, r5, #0
1000f4bc:	4b4a      	ldr	r3, [pc, #296]	; (1000f5e8 <at_ble_event_get+0x6bc>)
1000f4be:	4798      	blx	r3
1000f4c0:	2618      	movs	r6, #24
1000f4c2:	e028      	b.n	1000f516 <at_ble_event_get+0x5ea>
1000f4c4:	1c31      	adds	r1, r6, #0
1000f4c6:	9801      	ldr	r0, [sp, #4]
1000f4c8:	1c2a      	adds	r2, r5, #0
1000f4ca:	4b48      	ldr	r3, [pc, #288]	; (1000f5ec <at_ble_event_get+0x6c0>)
1000f4cc:	4798      	blx	r3
1000f4ce:	2620      	movs	r6, #32
1000f4d0:	e021      	b.n	1000f516 <at_ble_event_get+0x5ea>
1000f4d2:	1c31      	adds	r1, r6, #0
1000f4d4:	9801      	ldr	r0, [sp, #4]
1000f4d6:	1c2a      	adds	r2, r5, #0
1000f4d8:	4b45      	ldr	r3, [pc, #276]	; (1000f5f0 <at_ble_event_get+0x6c4>)
1000f4da:	4798      	blx	r3
1000f4dc:	2633      	movs	r6, #51	; 0x33
1000f4de:	e01a      	b.n	1000f516 <at_ble_event_get+0x5ea>
1000f4e0:	1c31      	adds	r1, r6, #0
1000f4e2:	9801      	ldr	r0, [sp, #4]
1000f4e4:	1c2a      	adds	r2, r5, #0
1000f4e6:	4b43      	ldr	r3, [pc, #268]	; (1000f5f4 <at_ble_event_get+0x6c8>)
1000f4e8:	4798      	blx	r3
1000f4ea:	2630      	movs	r6, #48	; 0x30
1000f4ec:	e013      	b.n	1000f516 <at_ble_event_get+0x5ea>
1000f4ee:	1c31      	adds	r1, r6, #0
1000f4f0:	9801      	ldr	r0, [sp, #4]
1000f4f2:	1c2a      	adds	r2, r5, #0
1000f4f4:	4b40      	ldr	r3, [pc, #256]	; (1000f5f8 <at_ble_event_get+0x6cc>)
1000f4f6:	4798      	blx	r3
1000f4f8:	2634      	movs	r6, #52	; 0x34
1000f4fa:	e00c      	b.n	1000f516 <at_ble_event_get+0x5ea>
1000f4fc:	1c31      	adds	r1, r6, #0
1000f4fe:	9801      	ldr	r0, [sp, #4]
1000f500:	1c2a      	adds	r2, r5, #0
1000f502:	4b3e      	ldr	r3, [pc, #248]	; (1000f5fc <at_ble_event_get+0x6d0>)
1000f504:	4798      	blx	r3
1000f506:	2635      	movs	r6, #53	; 0x35
1000f508:	e005      	b.n	1000f516 <at_ble_event_get+0x5ea>
1000f50a:	1c31      	adds	r1, r6, #0
1000f50c:	9801      	ldr	r0, [sp, #4]
1000f50e:	1c2a      	adds	r2, r5, #0
1000f510:	4b3b      	ldr	r3, [pc, #236]	; (1000f600 <at_ble_event_get+0x6d4>)
1000f512:	4798      	blx	r3
1000f514:	2632      	movs	r6, #50	; 0x32
1000f516:	9b03      	ldr	r3, [sp, #12]
1000f518:	701e      	strb	r6, [r3, #0]
1000f51a:	2300      	movs	r3, #0
1000f51c:	9302      	str	r3, [sp, #8]
1000f51e:	e57a      	b.n	1000f016 <at_ble_event_get+0xea>
1000f520:	23d0      	movs	r3, #208	; 0xd0
1000f522:	e7fb      	b.n	1000f51c <at_ble_event_get+0x5f0>
1000f524:	9b01      	ldr	r3, [sp, #4]
1000f526:	9e02      	ldr	r6, [sp, #8]
1000f528:	2bbb      	cmp	r3, #187	; 0xbb
1000f52a:	d000      	beq.n	1000f52e <at_ble_event_get+0x602>
1000f52c:	e6e6      	b.n	1000f2fc <at_ble_event_get+0x3d0>
1000f52e:	e7f2      	b.n	1000f516 <at_ble_event_get+0x5ea>
1000f530:	9b02      	ldr	r3, [sp, #8]
1000f532:	2b00      	cmp	r3, #0
1000f534:	d000      	beq.n	1000f538 <at_ble_event_get+0x60c>
1000f536:	e56e      	b.n	1000f016 <at_ble_event_get+0xea>
1000f538:	e6e0      	b.n	1000f2fc <at_ble_event_get+0x3d0>
1000f53a:	9802      	ldr	r0, [sp, #8]
1000f53c:	b007      	add	sp, #28
1000f53e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f540:	00000e22 	.word	0x00000e22
1000f544:	00000e25 	.word	0x00000e25
1000f548:	00001b05 	.word	0x00001b05
1000f54c:	00001b01 	.word	0x00001b01
1000f550:	00001b03 	.word	0x00001b03
1000f554:	00001b06 	.word	0x00001b06
1000f558:	00001b08 	.word	0x00001b08
1000f55c:	1001175d 	.word	0x1001175d
1000f560:	10011741 	.word	0x10011741
1000f564:	100119dd 	.word	0x100119dd
1000f568:	10011acd 	.word	0x10011acd
1000f56c:	10011af1 	.word	0x10011af1
1000f570:	10010ad5 	.word	0x10010ad5
1000f574:	10011355 	.word	0x10011355
1000f578:	100113d1 	.word	0x100113d1
1000f57c:	10010d8d 	.word	0x10010d8d
1000f580:	10010e29 	.word	0x10010e29
1000f584:	10010f01 	.word	0x10010f01
1000f588:	10011189 	.word	0x10011189
1000f58c:	10011229 	.word	0x10011229
1000f590:	100112e1 	.word	0x100112e1
1000f594:	10011309 	.word	0x10011309
1000f598:	1001131f 	.word	0x1001131f
1000f59c:	100113e9 	.word	0x100113e9
1000f5a0:	10011417 	.word	0x10011417
1000f5a4:	1001142d 	.word	0x1001142d
1000f5a8:	10011457 	.word	0x10011457
1000f5ac:	10011285 	.word	0x10011285
1000f5b0:	100112af 	.word	0x100112af
1000f5b4:	10010515 	.word	0x10010515
1000f5b8:	10010541 	.word	0x10010541
1000f5bc:	10011d11 	.word	0x10011d11
1000f5c0:	10011d4d 	.word	0x10011d4d
1000f5c4:	10011d95 	.word	0x10011d95
1000f5c8:	10011dd9 	.word	0x10011dd9
1000f5cc:	10011e0d 	.word	0x10011e0d
1000f5d0:	10011cd1 	.word	0x10011cd1
1000f5d4:	10011ed9 	.word	0x10011ed9
1000f5d8:	10011e61 	.word	0x10011e61
1000f5dc:	100103f9 	.word	0x100103f9
1000f5e0:	10010465 	.word	0x10010465
1000f5e4:	10010429 	.word	0x10010429
1000f5e8:	10011ee9 	.word	0x10011ee9
1000f5ec:	10011f29 	.word	0x10011f29
1000f5f0:	100121f1 	.word	0x100121f1
1000f5f4:	100121fb 	.word	0x100121fb
1000f5f8:	10012201 	.word	0x10012201
1000f5fc:	10012207 	.word	0x10012207
1000f600:	10012213 	.word	0x10012213

1000f604 <internal_event_flush>:
1000f604:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f606:	490e      	ldr	r1, [pc, #56]	; (1000f640 <internal_event_flush+0x3c>)
1000f608:	2400      	movs	r4, #0
1000f60a:	680b      	ldr	r3, [r1, #0]
1000f60c:	1c0f      	adds	r7, r1, #0
1000f60e:	1c1e      	adds	r6, r3, #0
1000f610:	4a0c      	ldr	r2, [pc, #48]	; (1000f644 <internal_event_flush+0x40>)
1000f612:	6815      	ldr	r5, [r2, #0]
1000f614:	9201      	str	r2, [sp, #4]
1000f616:	2b00      	cmp	r3, #0
1000f618:	d00e      	beq.n	1000f638 <internal_event_flush+0x34>
1000f61a:	889a      	ldrh	r2, [r3, #4]
1000f61c:	6819      	ldr	r1, [r3, #0]
1000f61e:	4282      	cmp	r2, r0
1000f620:	d107      	bne.n	1000f632 <internal_event_flush+0x2e>
1000f622:	2c00      	cmp	r4, #0
1000f624:	d001      	beq.n	1000f62a <internal_event_flush+0x26>
1000f626:	6021      	str	r1, [r4, #0]
1000f628:	e000      	b.n	1000f62c <internal_event_flush+0x28>
1000f62a:	1c0e      	adds	r6, r1, #0
1000f62c:	601d      	str	r5, [r3, #0]
1000f62e:	1c1d      	adds	r5, r3, #0
1000f630:	1c23      	adds	r3, r4, #0
1000f632:	1c1c      	adds	r4, r3, #0
1000f634:	1c0b      	adds	r3, r1, #0
1000f636:	e7ee      	b.n	1000f616 <internal_event_flush+0x12>
1000f638:	9b01      	ldr	r3, [sp, #4]
1000f63a:	603e      	str	r6, [r7, #0]
1000f63c:	601d      	str	r5, [r3, #0]
1000f63e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000f640:	1001a360 	.word	0x1001a360
1000f644:	1001a364 	.word	0x1001a364

1000f648 <internal_conn_flush>:
1000f648:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f64a:	4a12      	ldr	r2, [pc, #72]	; (1000f694 <internal_conn_flush+0x4c>)
1000f64c:	9000      	str	r0, [sp, #0]
1000f64e:	6813      	ldr	r3, [r2, #0]
1000f650:	4811      	ldr	r0, [pc, #68]	; (1000f698 <internal_conn_flush+0x50>)
1000f652:	1c1f      	adds	r7, r3, #0
1000f654:	2100      	movs	r1, #0
1000f656:	4684      	mov	ip, r0
1000f658:	6804      	ldr	r4, [r0, #0]
1000f65a:	9201      	str	r2, [sp, #4]
1000f65c:	2b00      	cmp	r3, #0
1000f65e:	d014      	beq.n	1000f68a <internal_conn_flush+0x42>
1000f660:	88d8      	ldrh	r0, [r3, #6]
1000f662:	9a00      	ldr	r2, [sp, #0]
1000f664:	681d      	ldr	r5, [r3, #0]
1000f666:	0a06      	lsrs	r6, r0, #8
1000f668:	4296      	cmp	r6, r2
1000f66a:	d10b      	bne.n	1000f684 <internal_conn_flush+0x3c>
1000f66c:	26fd      	movs	r6, #253	; 0xfd
1000f66e:	4006      	ands	r6, r0
1000f670:	2e0c      	cmp	r6, #12
1000f672:	d107      	bne.n	1000f684 <internal_conn_flush+0x3c>
1000f674:	2900      	cmp	r1, #0
1000f676:	d001      	beq.n	1000f67c <internal_conn_flush+0x34>
1000f678:	600d      	str	r5, [r1, #0]
1000f67a:	e000      	b.n	1000f67e <internal_conn_flush+0x36>
1000f67c:	1c2f      	adds	r7, r5, #0
1000f67e:	601c      	str	r4, [r3, #0]
1000f680:	1c1c      	adds	r4, r3, #0
1000f682:	1c0b      	adds	r3, r1, #0
1000f684:	1c19      	adds	r1, r3, #0
1000f686:	1c2b      	adds	r3, r5, #0
1000f688:	e7e8      	b.n	1000f65c <internal_conn_flush+0x14>
1000f68a:	9b01      	ldr	r3, [sp, #4]
1000f68c:	601f      	str	r7, [r3, #0]
1000f68e:	4663      	mov	r3, ip
1000f690:	601c      	str	r4, [r3, #0]
1000f692:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000f694:	1001a360 	.word	0x1001a360
1000f698:	1001a364 	.word	0x1001a364

1000f69c <at_ble_device_name_set>:
1000f69c:	b530      	push	{r4, r5, lr}
1000f69e:	23cf      	movs	r3, #207	; 0xcf
1000f6a0:	2800      	cmp	r0, #0
1000f6a2:	d010      	beq.n	1000f6c6 <at_ble_device_name_set+0x2a>
1000f6a4:	1e4a      	subs	r2, r1, #1
1000f6a6:	2a1f      	cmp	r2, #31
1000f6a8:	d80d      	bhi.n	1000f6c6 <at_ble_device_name_set+0x2a>
1000f6aa:	4a08      	ldr	r2, [pc, #32]	; (1000f6cc <at_ble_device_name_set+0x30>)
1000f6ac:	1c13      	adds	r3, r2, #0
1000f6ae:	33aa      	adds	r3, #170	; 0xaa
1000f6b0:	8019      	strh	r1, [r3, #0]
1000f6b2:	2300      	movs	r3, #0
1000f6b4:	1c1c      	adds	r4, r3, #0
1000f6b6:	5cc5      	ldrb	r5, [r0, r3]
1000f6b8:	34ac      	adds	r4, #172	; 0xac
1000f6ba:	3301      	adds	r3, #1
1000f6bc:	5515      	strb	r5, [r2, r4]
1000f6be:	b2dc      	uxtb	r4, r3
1000f6c0:	428c      	cmp	r4, r1
1000f6c2:	d3f7      	bcc.n	1000f6b4 <at_ble_device_name_set+0x18>
1000f6c4:	2300      	movs	r3, #0
1000f6c6:	1c18      	adds	r0, r3, #0
1000f6c8:	bd30      	pop	{r4, r5, pc}
1000f6ca:	46c0      	nop			; (mov r8, r8)
1000f6cc:	1001b362 	.word	0x1001b362

1000f6d0 <at_ble_addr_get>:
1000f6d0:	b510      	push	{r4, lr}
1000f6d2:	1c04      	adds	r4, r0, #0
1000f6d4:	20cf      	movs	r0, #207	; 0xcf
1000f6d6:	2c00      	cmp	r4, #0
1000f6d8:	d006      	beq.n	1000f6e8 <at_ble_addr_get+0x18>
1000f6da:	4b04      	ldr	r3, [pc, #16]	; (1000f6ec <at_ble_addr_get+0x1c>)
1000f6dc:	38ce      	subs	r0, #206	; 0xce
1000f6de:	1c21      	adds	r1, r4, #0
1000f6e0:	4798      	blx	r3
1000f6e2:	4b03      	ldr	r3, [pc, #12]	; (1000f6f0 <at_ble_addr_get+0x20>)
1000f6e4:	791b      	ldrb	r3, [r3, #4]
1000f6e6:	7023      	strb	r3, [r4, #0]
1000f6e8:	bd10      	pop	{r4, pc}
1000f6ea:	46c0      	nop			; (mov r8, r8)
1000f6ec:	100115f1 	.word	0x100115f1
1000f6f0:	1001b362 	.word	0x1001b362

1000f6f4 <at_ble_set_dev_config>:
1000f6f4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f6f6:	7906      	ldrb	r6, [r0, #4]
1000f6f8:	b089      	sub	sp, #36	; 0x24
1000f6fa:	25cf      	movs	r5, #207	; 0xcf
1000f6fc:	2e03      	cmp	r6, #3
1000f6fe:	d838      	bhi.n	1000f772 <at_ble_set_dev_config+0x7e>
1000f700:	7803      	ldrb	r3, [r0, #0]
1000f702:	3511      	adds	r5, #17
1000f704:	2b0f      	cmp	r3, #15
1000f706:	d834      	bhi.n	1000f772 <at_ble_set_dev_config+0x7e>
1000f708:	2380      	movs	r3, #128	; 0x80
1000f70a:	8c87      	ldrh	r7, [r0, #36]	; 0x24
1000f70c:	3d11      	subs	r5, #17
1000f70e:	009b      	lsls	r3, r3, #2
1000f710:	429f      	cmp	r7, r3
1000f712:	d82e      	bhi.n	1000f772 <at_ble_set_dev_config+0x7e>
1000f714:	7fc5      	ldrb	r5, [r0, #31]
1000f716:	7f83      	ldrb	r3, [r0, #30]
1000f718:	01ad      	lsls	r5, r5, #6
1000f71a:	015b      	lsls	r3, r3, #5
1000f71c:	431d      	orrs	r5, r3
1000f71e:	7ec3      	ldrb	r3, [r0, #27]
1000f720:	431d      	orrs	r5, r3
1000f722:	7f43      	ldrb	r3, [r0, #29]
1000f724:	011b      	lsls	r3, r3, #4
1000f726:	431d      	orrs	r5, r3
1000f728:	7f03      	ldrb	r3, [r0, #28]
1000f72a:	009b      	lsls	r3, r3, #2
1000f72c:	431d      	orrs	r5, r3
1000f72e:	4b12      	ldr	r3, [pc, #72]	; (1000f778 <at_ble_set_dev_config+0x84>)
1000f730:	b2ed      	uxtb	r5, r5
1000f732:	711e      	strb	r6, [r3, #4]
1000f734:	7903      	ldrb	r3, [r0, #4]
1000f736:	3b02      	subs	r3, #2
1000f738:	2b01      	cmp	r3, #1
1000f73a:	d801      	bhi.n	1000f740 <at_ble_set_dev_config+0x4c>
1000f73c:	2302      	movs	r3, #2
1000f73e:	7103      	strb	r3, [r0, #4]
1000f740:	1c04      	adds	r4, r0, #0
1000f742:	1c23      	adds	r3, r4, #0
1000f744:	330b      	adds	r3, #11
1000f746:	8861      	ldrh	r1, [r4, #2]
1000f748:	9307      	str	r3, [sp, #28]
1000f74a:	7923      	ldrb	r3, [r4, #4]
1000f74c:	7800      	ldrb	r0, [r0, #0]
1000f74e:	9300      	str	r3, [sp, #0]
1000f750:	9501      	str	r5, [sp, #4]
1000f752:	8c25      	ldrh	r5, [r4, #32]
1000f754:	1d62      	adds	r2, r4, #5
1000f756:	9502      	str	r5, [sp, #8]
1000f758:	8c65      	ldrh	r5, [r4, #34]	; 0x22
1000f75a:	9b07      	ldr	r3, [sp, #28]
1000f75c:	9503      	str	r5, [sp, #12]
1000f75e:	9704      	str	r7, [sp, #16]
1000f760:	4d06      	ldr	r5, [pc, #24]	; (1000f77c <at_ble_set_dev_config+0x88>)
1000f762:	47a8      	blx	r5
1000f764:	7126      	strb	r6, [r4, #4]
1000f766:	1c05      	adds	r5, r0, #0
1000f768:	1c21      	adds	r1, r4, #0
1000f76a:	4803      	ldr	r0, [pc, #12]	; (1000f778 <at_ble_set_dev_config+0x84>)
1000f76c:	2226      	movs	r2, #38	; 0x26
1000f76e:	4b04      	ldr	r3, [pc, #16]	; (1000f780 <at_ble_set_dev_config+0x8c>)
1000f770:	4798      	blx	r3
1000f772:	1c28      	adds	r0, r5, #0
1000f774:	b009      	add	sp, #36	; 0x24
1000f776:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f778:	1001b362 	.word	0x1001b362
1000f77c:	100114e9 	.word	0x100114e9
1000f780:	100165f7 	.word	0x100165f7

1000f784 <at_ble_init>:
1000f784:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f786:	b087      	sub	sp, #28
1000f788:	af03      	add	r7, sp, #12
1000f78a:	4954      	ldr	r1, [pc, #336]	; (1000f8dc <at_ble_init+0x158>)
1000f78c:	220b      	movs	r2, #11
1000f78e:	4b54      	ldr	r3, [pc, #336]	; (1000f8e0 <at_ble_init+0x15c>)
1000f790:	1c04      	adds	r4, r0, #0
1000f792:	1c38      	adds	r0, r7, #0
1000f794:	4798      	blx	r3
1000f796:	2205      	movs	r2, #5
1000f798:	4b52      	ldr	r3, [pc, #328]	; (1000f8e4 <at_ble_init+0x160>)
1000f79a:	2640      	movs	r6, #64	; 0x40
1000f79c:	801a      	strh	r2, [r3, #0]
1000f79e:	2300      	movs	r3, #0
1000f7a0:	4a51      	ldr	r2, [pc, #324]	; (1000f8e8 <at_ble_init+0x164>)
1000f7a2:	6013      	str	r3, [r2, #0]
1000f7a4:	4a51      	ldr	r2, [pc, #324]	; (1000f8ec <at_ble_init+0x168>)
1000f7a6:	7013      	strb	r3, [r2, #0]
1000f7a8:	4a51      	ldr	r2, [pc, #324]	; (1000f8f0 <at_ble_init+0x16c>)
1000f7aa:	7013      	strb	r3, [r2, #0]
1000f7ac:	4b51      	ldr	r3, [pc, #324]	; (1000f8f4 <at_ble_init+0x170>)
1000f7ae:	4798      	blx	r3
1000f7b0:	4b51      	ldr	r3, [pc, #324]	; (1000f8f8 <at_ble_init+0x174>)
1000f7b2:	4798      	blx	r3
1000f7b4:	4b51      	ldr	r3, [pc, #324]	; (1000f8fc <at_ble_init+0x178>)
1000f7b6:	4798      	blx	r3
1000f7b8:	4b51      	ldr	r3, [pc, #324]	; (1000f900 <at_ble_init+0x17c>)
1000f7ba:	4798      	blx	r3
1000f7bc:	2c00      	cmp	r4, #0
1000f7be:	d100      	bne.n	1000f7c2 <at_ble_init+0x3e>
1000f7c0:	e089      	b.n	1000f8d6 <at_ble_init+0x152>
1000f7c2:	68a3      	ldr	r3, [r4, #8]
1000f7c4:	2b00      	cmp	r3, #0
1000f7c6:	d100      	bne.n	1000f7ca <at_ble_init+0x46>
1000f7c8:	e085      	b.n	1000f8d6 <at_ble_init+0x152>
1000f7ca:	6923      	ldr	r3, [r4, #16]
1000f7cc:	2b00      	cmp	r3, #0
1000f7ce:	d100      	bne.n	1000f7d2 <at_ble_init+0x4e>
1000f7d0:	e081      	b.n	1000f8d6 <at_ble_init+0x152>
1000f7d2:	6820      	ldr	r0, [r4, #0]
1000f7d4:	2800      	cmp	r0, #0
1000f7d6:	d102      	bne.n	1000f7de <at_ble_init+0x5a>
1000f7d8:	6863      	ldr	r3, [r4, #4]
1000f7da:	2b00      	cmp	r3, #0
1000f7dc:	d17b      	bne.n	1000f8d6 <at_ble_init+0x152>
1000f7de:	4b49      	ldr	r3, [pc, #292]	; (1000f904 <at_ble_init+0x180>)
1000f7e0:	6861      	ldr	r1, [r4, #4]
1000f7e2:	4798      	blx	r3
1000f7e4:	4b48      	ldr	r3, [pc, #288]	; (1000f908 <at_ble_init+0x184>)
1000f7e6:	4798      	blx	r3
1000f7e8:	2801      	cmp	r0, #1
1000f7ea:	d901      	bls.n	1000f7f0 <at_ble_init+0x6c>
1000f7ec:	26e2      	movs	r6, #226	; 0xe2
1000f7ee:	e072      	b.n	1000f8d6 <at_ble_init+0x152>
1000f7f0:	4846      	ldr	r0, [pc, #280]	; (1000f90c <at_ble_init+0x188>)
1000f7f2:	4b47      	ldr	r3, [pc, #284]	; (1000f910 <at_ble_init+0x18c>)
1000f7f4:	4798      	blx	r3
1000f7f6:	2800      	cmp	r0, #0
1000f7f8:	d1f8      	bne.n	1000f7ec <at_ble_init+0x68>
1000f7fa:	1c20      	adds	r0, r4, #0
1000f7fc:	4b45      	ldr	r3, [pc, #276]	; (1000f914 <at_ble_init+0x190>)
1000f7fe:	4798      	blx	r3
1000f800:	68e0      	ldr	r0, [r4, #12]
1000f802:	68a1      	ldr	r1, [r4, #8]
1000f804:	4b44      	ldr	r3, [pc, #272]	; (1000f918 <at_ble_init+0x194>)
1000f806:	4798      	blx	r3
1000f808:	466b      	mov	r3, sp
1000f80a:	2201      	movs	r2, #1
1000f80c:	1cdc      	adds	r4, r3, #3
1000f80e:	1c20      	adds	r0, r4, #0
1000f810:	a901      	add	r1, sp, #4
1000f812:	4252      	negs	r2, r2
1000f814:	4b41      	ldr	r3, [pc, #260]	; (1000f91c <at_ble_init+0x198>)
1000f816:	4798      	blx	r3
1000f818:	2800      	cmp	r0, #0
1000f81a:	d102      	bne.n	1000f822 <at_ble_init+0x9e>
1000f81c:	7823      	ldrb	r3, [r4, #0]
1000f81e:	2b39      	cmp	r3, #57	; 0x39
1000f820:	d1f2      	bne.n	1000f808 <at_ble_init+0x84>
1000f822:	4b3f      	ldr	r3, [pc, #252]	; (1000f920 <at_ble_init+0x19c>)
1000f824:	4798      	blx	r3
1000f826:	1e06      	subs	r6, r0, #0
1000f828:	d155      	bne.n	1000f8d6 <at_ble_init+0x152>
1000f82a:	1c03      	adds	r3, r0, #0
1000f82c:	2101      	movs	r1, #1
1000f82e:	4a3d      	ldr	r2, [pc, #244]	; (1000f924 <at_ble_init+0x1a0>)
1000f830:	4249      	negs	r1, r1
1000f832:	189a      	adds	r2, r3, r2
1000f834:	3312      	adds	r3, #18
1000f836:	8151      	strh	r1, [r2, #10]
1000f838:	2b90      	cmp	r3, #144	; 0x90
1000f83a:	d1f7      	bne.n	1000f82c <at_ble_init+0xa8>
1000f83c:	4c3a      	ldr	r4, [pc, #232]	; (1000f928 <at_ble_init+0x1a4>)
1000f83e:	3b81      	subs	r3, #129	; 0x81
1000f840:	7023      	strb	r3, [r4, #0]
1000f842:	4b3a      	ldr	r3, [pc, #232]	; (1000f92c <at_ble_init+0x1a8>)
1000f844:	4a3a      	ldr	r2, [pc, #232]	; (1000f930 <at_ble_init+0x1ac>)
1000f846:	8063      	strh	r3, [r4, #2]
1000f848:	2300      	movs	r3, #0
1000f84a:	7123      	strb	r3, [r4, #4]
1000f84c:	3301      	adds	r3, #1
1000f84e:	1e58      	subs	r0, r3, #1
1000f850:	0119      	lsls	r1, r3, #4
1000f852:	4301      	orrs	r1, r0
1000f854:	3302      	adds	r3, #2
1000f856:	7011      	strb	r1, [r2, #0]
1000f858:	3201      	adds	r2, #1
1000f85a:	2b21      	cmp	r3, #33	; 0x21
1000f85c:	d1f7      	bne.n	1000f84e <at_ble_init+0xca>
1000f85e:	33e0      	adds	r3, #224	; 0xe0
1000f860:	33ff      	adds	r3, #255	; 0xff
1000f862:	84a3      	strh	r3, [r4, #36]	; 0x24
1000f864:	1c23      	adds	r3, r4, #0
1000f866:	2500      	movs	r5, #0
1000f868:	3373      	adds	r3, #115	; 0x73
1000f86a:	701d      	strb	r5, [r3, #0]
1000f86c:	1c23      	adds	r3, r4, #0
1000f86e:	3372      	adds	r3, #114	; 0x72
1000f870:	701d      	strb	r5, [r3, #0]
1000f872:	1c23      	adds	r3, r4, #0
1000f874:	3376      	adds	r3, #118	; 0x76
1000f876:	701d      	strb	r5, [r3, #0]
1000f878:	1c23      	adds	r3, r4, #0
1000f87a:	33cc      	adds	r3, #204	; 0xcc
1000f87c:	801d      	strh	r5, [r3, #0]
1000f87e:	1c22      	adds	r2, r4, #0
1000f880:	23a0      	movs	r3, #160	; 0xa0
1000f882:	32d0      	adds	r2, #208	; 0xd0
1000f884:	005b      	lsls	r3, r3, #1
1000f886:	8013      	strh	r3, [r2, #0]
1000f888:	1c22      	adds	r2, r4, #0
1000f88a:	32ce      	adds	r2, #206	; 0xce
1000f88c:	8013      	strh	r3, [r2, #0]
1000f88e:	1c23      	adds	r3, r4, #0
1000f890:	33d2      	adds	r3, #210	; 0xd2
1000f892:	801d      	strh	r5, [r3, #0]
1000f894:	22fa      	movs	r2, #250	; 0xfa
1000f896:	1c23      	adds	r3, r4, #0
1000f898:	0052      	lsls	r2, r2, #1
1000f89a:	33d4      	adds	r3, #212	; 0xd4
1000f89c:	801a      	strh	r2, [r3, #0]
1000f89e:	1c23      	adds	r3, r4, #0
1000f8a0:	33d6      	adds	r3, #214	; 0xd6
1000f8a2:	701d      	strb	r5, [r3, #0]
1000f8a4:	1c20      	adds	r0, r4, #0
1000f8a6:	4b23      	ldr	r3, [pc, #140]	; (1000f934 <at_ble_init+0x1b0>)
1000f8a8:	76e5      	strb	r5, [r4, #27]
1000f8aa:	7725      	strb	r5, [r4, #28]
1000f8ac:	7765      	strb	r5, [r4, #29]
1000f8ae:	77a5      	strb	r5, [r4, #30]
1000f8b0:	77e5      	strb	r5, [r4, #31]
1000f8b2:	8425      	strh	r5, [r4, #32]
1000f8b4:	8465      	strh	r5, [r4, #34]	; 0x22
1000f8b6:	4798      	blx	r3
1000f8b8:	1c23      	adds	r3, r4, #0
1000f8ba:	2207      	movs	r2, #7
1000f8bc:	3374      	adds	r3, #116	; 0x74
1000f8be:	701a      	strb	r2, [r3, #0]
1000f8c0:	1c23      	adds	r3, r4, #0
1000f8c2:	3204      	adds	r2, #4
1000f8c4:	33aa      	adds	r3, #170	; 0xaa
1000f8c6:	801a      	strh	r2, [r3, #0]
1000f8c8:	1c2b      	adds	r3, r5, #0
1000f8ca:	5d7a      	ldrb	r2, [r7, r5]
1000f8cc:	33ac      	adds	r3, #172	; 0xac
1000f8ce:	3501      	adds	r5, #1
1000f8d0:	54e2      	strb	r2, [r4, r3]
1000f8d2:	2d0b      	cmp	r5, #11
1000f8d4:	d1f8      	bne.n	1000f8c8 <at_ble_init+0x144>
1000f8d6:	1c30      	adds	r0, r6, #0
1000f8d8:	b007      	add	sp, #28
1000f8da:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f8dc:	1001868b 	.word	0x1001868b
1000f8e0:	100165f7 	.word	0x100165f7
1000f8e4:	1001b2d0 	.word	0x1001b2d0
1000f8e8:	1001a410 	.word	0x1001a410
1000f8ec:	1001a370 	.word	0x1001a370
1000f8f0:	100188d8 	.word	0x100188d8
1000f8f4:	10011f39 	.word	0x10011f39
1000f8f8:	1000fbf5 	.word	0x1000fbf5
1000f8fc:	10010255 	.word	0x10010255
1000f900:	10010509 	.word	0x10010509
1000f904:	10010291 	.word	0x10010291
1000f908:	1000e339 	.word	0x1000e339
1000f90c:	10010809 	.word	0x10010809
1000f910:	1000e57d 	.word	0x1000e57d
1000f914:	100108b1 	.word	0x100108b1
1000f918:	1000ee71 	.word	0x1000ee71
1000f91c:	1000ef2d 	.word	0x1000ef2d
1000f920:	10011479 	.word	0x10011479
1000f924:	1001b2d2 	.word	0x1001b2d2
1000f928:	1001b362 	.word	0x1001b362
1000f92c:	00003a98 	.word	0x00003a98
1000f930:	1001b36d 	.word	0x1001b36d
1000f934:	1000f6f5 	.word	0x1000f6f5

1000f938 <at_ble_addr_set>:
1000f938:	b538      	push	{r3, r4, r5, lr}
1000f93a:	1c45      	adds	r5, r0, #1
1000f93c:	1c03      	adds	r3, r0, #0
1000f93e:	20cf      	movs	r0, #207	; 0xcf
1000f940:	2d00      	cmp	r5, #0
1000f942:	d018      	beq.n	1000f976 <at_ble_addr_set+0x3e>
1000f944:	781a      	ldrb	r2, [r3, #0]
1000f946:	2a03      	cmp	r2, #3
1000f948:	d815      	bhi.n	1000f976 <at_ble_addr_set+0x3e>
1000f94a:	2a01      	cmp	r2, #1
1000f94c:	d102      	bne.n	1000f954 <at_ble_addr_set+0x1c>
1000f94e:	785a      	ldrb	r2, [r3, #1]
1000f950:	2a00      	cmp	r2, #0
1000f952:	d010      	beq.n	1000f976 <at_ble_addr_set+0x3e>
1000f954:	1c1c      	adds	r4, r3, #0
1000f956:	1c29      	adds	r1, r5, #0
1000f958:	2206      	movs	r2, #6
1000f95a:	4b07      	ldr	r3, [pc, #28]	; (1000f978 <at_ble_addr_set+0x40>)
1000f95c:	4807      	ldr	r0, [pc, #28]	; (1000f97c <at_ble_addr_set+0x44>)
1000f95e:	4798      	blx	r3
1000f960:	7823      	ldrb	r3, [r4, #0]
1000f962:	4807      	ldr	r0, [pc, #28]	; (1000f980 <at_ble_addr_set+0x48>)
1000f964:	7103      	strb	r3, [r0, #4]
1000f966:	4b07      	ldr	r3, [pc, #28]	; (1000f984 <at_ble_addr_set+0x4c>)
1000f968:	4798      	blx	r3
1000f96a:	7823      	ldrb	r3, [r4, #0]
1000f96c:	2b00      	cmp	r3, #0
1000f96e:	d102      	bne.n	1000f976 <at_ble_addr_set+0x3e>
1000f970:	1c28      	adds	r0, r5, #0
1000f972:	4b05      	ldr	r3, [pc, #20]	; (1000f988 <at_ble_addr_set+0x50>)
1000f974:	4798      	blx	r3
1000f976:	bd38      	pop	{r3, r4, r5, pc}
1000f978:	100165f7 	.word	0x100165f7
1000f97c:	1001b367 	.word	0x1001b367
1000f980:	1001b362 	.word	0x1001b362
1000f984:	1000f6f5 	.word	0x1000f6f5
1000f988:	10010935 	.word	0x10010935

1000f98c <at_ble_adv_data_set>:
1000f98c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000f98e:	4684      	mov	ip, r0
1000f990:	1c0f      	adds	r7, r1, #0
1000f992:	1c16      	adds	r6, r2, #0
1000f994:	1c1c      	adds	r4, r3, #0
1000f996:	2800      	cmp	r0, #0
1000f998:	d102      	bne.n	1000f9a0 <at_ble_adv_data_set+0x14>
1000f99a:	20e2      	movs	r0, #226	; 0xe2
1000f99c:	2a00      	cmp	r2, #0
1000f99e:	d02b      	beq.n	1000f9f8 <at_ble_adv_data_set+0x6c>
1000f9a0:	20cf      	movs	r0, #207	; 0xcf
1000f9a2:	2f1f      	cmp	r7, #31
1000f9a4:	d828      	bhi.n	1000f9f8 <at_ble_adv_data_set+0x6c>
1000f9a6:	2c1f      	cmp	r4, #31
1000f9a8:	d826      	bhi.n	1000f9f8 <at_ble_adv_data_set+0x6c>
1000f9aa:	4663      	mov	r3, ip
1000f9ac:	2b00      	cmp	r3, #0
1000f9ae:	d00e      	beq.n	1000f9ce <at_ble_adv_data_set+0x42>
1000f9b0:	4812      	ldr	r0, [pc, #72]	; (1000f9fc <at_ble_adv_data_set+0x70>)
1000f9b2:	4d13      	ldr	r5, [pc, #76]	; (1000fa00 <at_ble_adv_data_set+0x74>)
1000f9b4:	2f00      	cmp	r7, #0
1000f9b6:	d104      	bne.n	1000f9c2 <at_ble_adv_data_set+0x36>
1000f9b8:	1c39      	adds	r1, r7, #0
1000f9ba:	221f      	movs	r2, #31
1000f9bc:	4b11      	ldr	r3, [pc, #68]	; (1000fa04 <at_ble_adv_data_set+0x78>)
1000f9be:	4798      	blx	r3
1000f9c0:	e003      	b.n	1000f9ca <at_ble_adv_data_set+0x3e>
1000f9c2:	4661      	mov	r1, ip
1000f9c4:	1c3a      	adds	r2, r7, #0
1000f9c6:	4b10      	ldr	r3, [pc, #64]	; (1000fa08 <at_ble_adv_data_set+0x7c>)
1000f9c8:	4798      	blx	r3
1000f9ca:	3572      	adds	r5, #114	; 0x72
1000f9cc:	702f      	strb	r7, [r5, #0]
1000f9ce:	1e30      	subs	r0, r6, #0
1000f9d0:	d012      	beq.n	1000f9f8 <at_ble_adv_data_set+0x6c>
1000f9d2:	4d0b      	ldr	r5, [pc, #44]	; (1000fa00 <at_ble_adv_data_set+0x74>)
1000f9d4:	480d      	ldr	r0, [pc, #52]	; (1000fa0c <at_ble_adv_data_set+0x80>)
1000f9d6:	2c00      	cmp	r4, #0
1000f9d8:	d107      	bne.n	1000f9ea <at_ble_adv_data_set+0x5e>
1000f9da:	1c21      	adds	r1, r4, #0
1000f9dc:	221f      	movs	r2, #31
1000f9de:	4b09      	ldr	r3, [pc, #36]	; (1000fa04 <at_ble_adv_data_set+0x78>)
1000f9e0:	3573      	adds	r5, #115	; 0x73
1000f9e2:	4798      	blx	r3
1000f9e4:	702c      	strb	r4, [r5, #0]
1000f9e6:	1c20      	adds	r0, r4, #0
1000f9e8:	e006      	b.n	1000f9f8 <at_ble_adv_data_set+0x6c>
1000f9ea:	1c31      	adds	r1, r6, #0
1000f9ec:	1c22      	adds	r2, r4, #0
1000f9ee:	4b06      	ldr	r3, [pc, #24]	; (1000fa08 <at_ble_adv_data_set+0x7c>)
1000f9f0:	4798      	blx	r3
1000f9f2:	2000      	movs	r0, #0
1000f9f4:	3573      	adds	r5, #115	; 0x73
1000f9f6:	702c      	strb	r4, [r5, #0]
1000f9f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000f9fa:	46c0      	nop			; (mov r8, r8)
1000f9fc:	1001b396 	.word	0x1001b396
1000fa00:	1001b362 	.word	0x1001b362
1000fa04:	10016609 	.word	0x10016609
1000fa08:	100165f7 	.word	0x100165f7
1000fa0c:	1001b3b5 	.word	0x1001b3b5

1000fa10 <at_ble_adv_start>:
1000fa10:	b5f0      	push	{r4, r5, r6, r7, lr}
1000fa12:	b091      	sub	sp, #68	; 0x44
1000fa14:	1c1f      	adds	r7, r3, #0
1000fa16:	ab16      	add	r3, sp, #88	; 0x58
1000fa18:	881d      	ldrh	r5, [r3, #0]
1000fa1a:	ab17      	add	r3, sp, #92	; 0x5c
1000fa1c:	881b      	ldrh	r3, [r3, #0]
1000fa1e:	910d      	str	r1, [sp, #52]	; 0x34
1000fa20:	930e      	str	r3, [sp, #56]	; 0x38
1000fa22:	ab18      	add	r3, sp, #96	; 0x60
1000fa24:	781b      	ldrb	r3, [r3, #0]
1000fa26:	1c04      	adds	r4, r0, #0
1000fa28:	930f      	str	r3, [sp, #60]	; 0x3c
1000fa2a:	4b42      	ldr	r3, [pc, #264]	; (1000fb34 <at_ble_adv_start+0x124>)
1000fa2c:	1c16      	adds	r6, r2, #0
1000fa2e:	3373      	adds	r3, #115	; 0x73
1000fa30:	781b      	ldrb	r3, [r3, #0]
1000fa32:	20cf      	movs	r0, #207	; 0xcf
1000fa34:	930c      	str	r3, [sp, #48]	; 0x30
1000fa36:	2c01      	cmp	r4, #1
1000fa38:	d103      	bne.n	1000fa42 <at_ble_adv_start+0x32>
1000fa3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1000fa3c:	2b00      	cmp	r3, #0
1000fa3e:	d176      	bne.n	1000fb2e <at_ble_adv_start+0x11e>
1000fa40:	e024      	b.n	1000fa8c <at_ble_adv_start+0x7c>
1000fa42:	2c04      	cmp	r4, #4
1000fa44:	d873      	bhi.n	1000fb2e <at_ble_adv_start+0x11e>
1000fa46:	2380      	movs	r3, #128	; 0x80
1000fa48:	01db      	lsls	r3, r3, #7
1000fa4a:	429d      	cmp	r5, r3
1000fa4c:	d86f      	bhi.n	1000fb2e <at_ble_adv_start+0x11e>
1000fa4e:	2c00      	cmp	r4, #0
1000fa50:	d102      	bne.n	1000fa58 <at_ble_adv_start+0x48>
1000fa52:	2d1f      	cmp	r5, #31
1000fa54:	d96b      	bls.n	1000fb2e <at_ble_adv_start+0x11e>
1000fa56:	e003      	b.n	1000fa60 <at_ble_adv_start+0x50>
1000fa58:	2d9f      	cmp	r5, #159	; 0x9f
1000fa5a:	d801      	bhi.n	1000fa60 <at_ble_adv_start+0x50>
1000fa5c:	2c01      	cmp	r4, #1
1000fa5e:	d166      	bne.n	1000fb2e <at_ble_adv_start+0x11e>
1000fa60:	2f00      	cmp	r7, #0
1000fa62:	d009      	beq.n	1000fa78 <at_ble_adv_start+0x68>
1000fa64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000fa66:	20cf      	movs	r0, #207	; 0xcf
1000fa68:	3b01      	subs	r3, #1
1000fa6a:	2b01      	cmp	r3, #1
1000fa6c:	d95f      	bls.n	1000fb2e <at_ble_adv_start+0x11e>
1000fa6e:	2c01      	cmp	r4, #1
1000fa70:	d102      	bne.n	1000fa78 <at_ble_adv_start+0x68>
1000fa72:	2d00      	cmp	r5, #0
1000fa74:	d100      	bne.n	1000fa78 <at_ble_adv_start+0x68>
1000fa76:	3520      	adds	r5, #32
1000fa78:	4b2f      	ldr	r3, [pc, #188]	; (1000fb38 <at_ble_adv_start+0x128>)
1000fa7a:	4798      	blx	r3
1000fa7c:	1c01      	adds	r1, r0, #0
1000fa7e:	2e00      	cmp	r6, #0
1000fa80:	d043      	beq.n	1000fb0a <at_ble_adv_start+0xfa>
1000fa82:	7833      	ldrb	r3, [r6, #0]
1000fa84:	1e60      	subs	r0, r4, #1
1000fa86:	2b00      	cmp	r3, #0
1000fa88:	d109      	bne.n	1000fa9e <at_ble_adv_start+0x8e>
1000fa8a:	e03b      	b.n	1000fb04 <at_ble_adv_start+0xf4>
1000fa8c:	2380      	movs	r3, #128	; 0x80
1000fa8e:	01db      	lsls	r3, r3, #7
1000fa90:	429d      	cmp	r5, r3
1000fa92:	d84c      	bhi.n	1000fb2e <at_ble_adv_start+0x11e>
1000fa94:	2e00      	cmp	r6, #0
1000fa96:	d04a      	beq.n	1000fb2e <at_ble_adv_start+0x11e>
1000fa98:	2f00      	cmp	r7, #0
1000fa9a:	d1e3      	bne.n	1000fa64 <at_ble_adv_start+0x54>
1000fa9c:	e02b      	b.n	1000faf6 <at_ble_adv_start+0xe6>
1000fa9e:	2301      	movs	r3, #1
1000faa0:	2803      	cmp	r0, #3
1000faa2:	d93a      	bls.n	1000fb1a <at_ble_adv_start+0x10a>
1000faa4:	200d      	movs	r0, #13
1000faa6:	1c72      	adds	r2, r6, #1
1000faa8:	e002      	b.n	1000fab0 <at_ble_adv_start+0xa0>
1000faaa:	200e      	movs	r0, #14
1000faac:	1e32      	subs	r2, r6, #0
1000faae:	d1fa      	bne.n	1000faa6 <at_ble_adv_start+0x96>
1000fab0:	4c20      	ldr	r4, [pc, #128]	; (1000fb34 <at_ble_adv_start+0x124>)
1000fab2:	3474      	adds	r4, #116	; 0x74
1000fab4:	7826      	ldrb	r6, [r4, #0]
1000fab6:	2407      	movs	r4, #7
1000fab8:	2e00      	cmp	r6, #0
1000faba:	d000      	beq.n	1000fabe <at_ble_adv_start+0xae>
1000fabc:	1c34      	adds	r4, r6, #0
1000fabe:	9200      	str	r2, [sp, #0]
1000fac0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1000fac2:	9403      	str	r4, [sp, #12]
1000fac4:	9204      	str	r2, [sp, #16]
1000fac6:	4a1b      	ldr	r2, [pc, #108]	; (1000fb34 <at_ble_adv_start+0x124>)
1000fac8:	9501      	str	r5, [sp, #4]
1000faca:	9502      	str	r5, [sp, #8]
1000facc:	9705      	str	r7, [sp, #20]
1000face:	3272      	adds	r2, #114	; 0x72
1000fad0:	7812      	ldrb	r2, [r2, #0]
1000fad2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
1000fad4:	9206      	str	r2, [sp, #24]
1000fad6:	4a19      	ldr	r2, [pc, #100]	; (1000fb3c <at_ble_adv_start+0x12c>)
1000fad8:	9207      	str	r2, [sp, #28]
1000fada:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1000fadc:	9208      	str	r2, [sp, #32]
1000fade:	4a18      	ldr	r2, [pc, #96]	; (1000fb40 <at_ble_adv_start+0x130>)
1000fae0:	9209      	str	r2, [sp, #36]	; 0x24
1000fae2:	2264      	movs	r2, #100	; 0x64
1000fae4:	4362      	muls	r2, r4
1000fae6:	b292      	uxth	r2, r2
1000fae8:	920a      	str	r2, [sp, #40]	; 0x28
1000faea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
1000faec:	4c15      	ldr	r4, [pc, #84]	; (1000fb44 <at_ble_adv_start+0x134>)
1000faee:	920b      	str	r2, [sp, #44]	; 0x2c
1000faf0:	4a15      	ldr	r2, [pc, #84]	; (1000fb48 <at_ble_adv_start+0x138>)
1000faf2:	47a0      	blx	r4
1000faf4:	e01b      	b.n	1000fb2e <at_ble_adv_start+0x11e>
1000faf6:	2d00      	cmp	r5, #0
1000faf8:	d1be      	bne.n	1000fa78 <at_ble_adv_start+0x68>
1000fafa:	4b0f      	ldr	r3, [pc, #60]	; (1000fb38 <at_ble_adv_start+0x128>)
1000fafc:	4798      	blx	r3
1000fafe:	2520      	movs	r5, #32
1000fb00:	1c01      	adds	r1, r0, #0
1000fb02:	e7be      	b.n	1000fa82 <at_ble_adv_start+0x72>
1000fb04:	2803      	cmp	r0, #3
1000fb06:	d8cd      	bhi.n	1000faa4 <at_ble_adv_start+0x94>
1000fb08:	e006      	b.n	1000fb18 <at_ble_adv_start+0x108>
1000fb0a:	1e60      	subs	r0, r4, #1
1000fb0c:	2803      	cmp	r0, #3
1000fb0e:	d903      	bls.n	1000fb18 <at_ble_adv_start+0x108>
1000fb10:	1c33      	adds	r3, r6, #0
1000fb12:	200d      	movs	r0, #13
1000fb14:	1c32      	adds	r2, r6, #0
1000fb16:	e7cb      	b.n	1000fab0 <at_ble_adv_start+0xa0>
1000fb18:	2300      	movs	r3, #0
1000fb1a:	f003 fd3d 	bl	10013598 <__gnu_thumb1_case_sqi>
1000fb1e:	06c6      	.short	0x06c6
1000fb20:	0204      	.short	0x0204
1000fb22:	200f      	movs	r0, #15
1000fb24:	e7c2      	b.n	1000faac <at_ble_adv_start+0x9c>
1000fb26:	2200      	movs	r2, #0
1000fb28:	920c      	str	r2, [sp, #48]	; 0x30
1000fb2a:	200c      	movs	r0, #12
1000fb2c:	e7be      	b.n	1000faac <at_ble_adv_start+0x9c>
1000fb2e:	b011      	add	sp, #68	; 0x44
1000fb30:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000fb32:	46c0      	nop			; (mov r8, r8)
1000fb34:	1001b362 	.word	0x1001b362
1000fb38:	100119c5 	.word	0x100119c5
1000fb3c:	1001b396 	.word	0x1001b396
1000fb40:	1001b3b5 	.word	0x1001b3b5
1000fb44:	100118a5 	.word	0x100118a5
1000fb48:	00003a98 	.word	0x00003a98

1000fb4c <at_ble_adv_stop>:
1000fb4c:	b508      	push	{r3, lr}
1000fb4e:	4b01      	ldr	r3, [pc, #4]	; (1000fb54 <at_ble_adv_stop+0x8>)
1000fb50:	4798      	blx	r3
1000fb52:	bd08      	pop	{r3, pc}
1000fb54:	100116d1 	.word	0x100116d1

1000fb58 <at_ble_scan_stop>:
1000fb58:	b510      	push	{r4, lr}
1000fb5a:	4b05      	ldr	r3, [pc, #20]	; (1000fb70 <at_ble_scan_stop+0x18>)
1000fb5c:	4798      	blx	r3
1000fb5e:	1e04      	subs	r4, r0, #0
1000fb60:	d103      	bne.n	1000fb6a <at_ble_scan_stop+0x12>
1000fb62:	20d1      	movs	r0, #209	; 0xd1
1000fb64:	4b03      	ldr	r3, [pc, #12]	; (1000fb74 <at_ble_scan_stop+0x1c>)
1000fb66:	0100      	lsls	r0, r0, #4
1000fb68:	4798      	blx	r3
1000fb6a:	1c20      	adds	r0, r4, #0
1000fb6c:	bd10      	pop	{r4, pc}
1000fb6e:	46c0      	nop			; (mov r8, r8)
1000fb70:	100116d1 	.word	0x100116d1
1000fb74:	1000f605 	.word	0x1000f605

1000fb78 <at_ble_disconnect>:
1000fb78:	b538      	push	{r3, r4, r5, lr}
1000fb7a:	1c04      	adds	r4, r0, #0
1000fb7c:	4b04      	ldr	r3, [pc, #16]	; (1000fb90 <at_ble_disconnect+0x18>)
1000fb7e:	1c08      	adds	r0, r1, #0
1000fb80:	1c21      	adds	r1, r4, #0
1000fb82:	4798      	blx	r3
1000fb84:	1c05      	adds	r5, r0, #0
1000fb86:	4b03      	ldr	r3, [pc, #12]	; (1000fb94 <at_ble_disconnect+0x1c>)
1000fb88:	1c20      	adds	r0, r4, #0
1000fb8a:	4798      	blx	r3
1000fb8c:	1c28      	adds	r0, r5, #0
1000fb8e:	bd38      	pop	{r3, r4, r5, pc}
1000fb90:	10010d49 	.word	0x10010d49
1000fb94:	1000f649 	.word	0x1000f649

1000fb98 <at_ble_conn_update_reply>:
1000fb98:	b510      	push	{r4, lr}
1000fb9a:	4c01      	ldr	r4, [pc, #4]	; (1000fba0 <at_ble_conn_update_reply+0x8>)
1000fb9c:	47a0      	blx	r4
1000fb9e:	bd10      	pop	{r4, pc}
1000fba0:	10011239 	.word	0x10011239

1000fba4 <at_ble_random_address_resolve>:
1000fba4:	b510      	push	{r4, lr}
1000fba6:	23cf      	movs	r3, #207	; 0xcf
1000fba8:	2800      	cmp	r0, #0
1000fbaa:	d00a      	beq.n	1000fbc2 <at_ble_random_address_resolve+0x1e>
1000fbac:	2900      	cmp	r1, #0
1000fbae:	d008      	beq.n	1000fbc2 <at_ble_random_address_resolve+0x1e>
1000fbb0:	2a00      	cmp	r2, #0
1000fbb2:	d006      	beq.n	1000fbc2 <at_ble_random_address_resolve+0x1e>
1000fbb4:	780c      	ldrb	r4, [r1, #0]
1000fbb6:	2c02      	cmp	r4, #2
1000fbb8:	d103      	bne.n	1000fbc2 <at_ble_random_address_resolve+0x1e>
1000fbba:	4b03      	ldr	r3, [pc, #12]	; (1000fbc8 <at_ble_random_address_resolve+0x24>)
1000fbbc:	3101      	adds	r1, #1
1000fbbe:	4798      	blx	r3
1000fbc0:	2300      	movs	r3, #0
1000fbc2:	1c18      	adds	r0, r3, #0
1000fbc4:	bd10      	pop	{r4, pc}
1000fbc6:	46c0      	nop			; (mov r8, r8)
1000fbc8:	10011a65 	.word	0x10011a65

1000fbcc <at_ble_uuid_type2len>:
1000fbcc:	23cf      	movs	r3, #207	; 0xcf
1000fbce:	2802      	cmp	r0, #2
1000fbd0:	d801      	bhi.n	1000fbd6 <at_ble_uuid_type2len+0xa>
1000fbd2:	4b02      	ldr	r3, [pc, #8]	; (1000fbdc <at_ble_uuid_type2len+0x10>)
1000fbd4:	5c1b      	ldrb	r3, [r3, r0]
1000fbd6:	1c18      	adds	r0, r3, #0
1000fbd8:	4770      	bx	lr
1000fbda:	46c0      	nop			; (mov r8, r8)
1000fbdc:	10018696 	.word	0x10018696

1000fbe0 <at_ble_uuid_len2type>:
1000fbe0:	1e83      	subs	r3, r0, #2
1000fbe2:	b2db      	uxtb	r3, r3
1000fbe4:	2003      	movs	r0, #3
1000fbe6:	2b0e      	cmp	r3, #14
1000fbe8:	d801      	bhi.n	1000fbee <at_ble_uuid_len2type+0xe>
1000fbea:	4a01      	ldr	r2, [pc, #4]	; (1000fbf0 <at_ble_uuid_len2type+0x10>)
1000fbec:	5cd0      	ldrb	r0, [r2, r3]
1000fbee:	4770      	bx	lr
1000fbf0:	10018699 	.word	0x10018699

1000fbf4 <init_gatt_client_module>:
1000fbf4:	2200      	movs	r2, #0
1000fbf6:	4b01      	ldr	r3, [pc, #4]	; (1000fbfc <init_gatt_client_module+0x8>)
1000fbf8:	801a      	strh	r2, [r3, #0]
1000fbfa:	4770      	bx	lr
1000fbfc:	1001a368 	.word	0x1001a368

1000fc00 <db_searchATT>:
1000fc00:	b570      	push	{r4, r5, r6, lr}
1000fc02:	1c05      	adds	r5, r0, #0
1000fc04:	2400      	movs	r4, #0
1000fc06:	4b0c      	ldr	r3, [pc, #48]	; (1000fc38 <db_searchATT+0x38>)
1000fc08:	6819      	ldr	r1, [r3, #0]
1000fc0a:	4b0c      	ldr	r3, [pc, #48]	; (1000fc3c <db_searchATT+0x3c>)
1000fc0c:	681e      	ldr	r6, [r3, #0]
1000fc0e:	428c      	cmp	r4, r1
1000fc10:	dc10      	bgt.n	1000fc34 <db_searchATT+0x34>
1000fc12:	200c      	movs	r0, #12
1000fc14:	1863      	adds	r3, r4, r1
1000fc16:	0fda      	lsrs	r2, r3, #31
1000fc18:	18d3      	adds	r3, r2, r3
1000fc1a:	1c02      	adds	r2, r0, #0
1000fc1c:	105b      	asrs	r3, r3, #1
1000fc1e:	435a      	muls	r2, r3
1000fc20:	18b0      	adds	r0, r6, r2
1000fc22:	8802      	ldrh	r2, [r0, #0]
1000fc24:	42aa      	cmp	r2, r5
1000fc26:	d201      	bcs.n	1000fc2c <db_searchATT+0x2c>
1000fc28:	1e59      	subs	r1, r3, #1
1000fc2a:	e7f0      	b.n	1000fc0e <db_searchATT+0xe>
1000fc2c:	42aa      	cmp	r2, r5
1000fc2e:	d902      	bls.n	1000fc36 <db_searchATT+0x36>
1000fc30:	1c5c      	adds	r4, r3, #1
1000fc32:	e7ec      	b.n	1000fc0e <db_searchATT+0xe>
1000fc34:	2000      	movs	r0, #0
1000fc36:	bd70      	pop	{r4, r5, r6, pc}
1000fc38:	1001a37c 	.word	0x1001a37c
1000fc3c:	1001a374 	.word	0x1001a374

1000fc40 <att_permissions>:
1000fc40:	b530      	push	{r4, r5, lr}
1000fc42:	2403      	movs	r4, #3
1000fc44:	1c05      	adds	r5, r0, #0
1000fc46:	2301      	movs	r3, #1
1000fc48:	4025      	ands	r5, r4
1000fc4a:	42a5      	cmp	r5, r4
1000fc4c:	d009      	beq.n	1000fc62 <att_permissions+0x22>
1000fc4e:	1c23      	adds	r3, r4, #0
1000fc50:	1924      	adds	r4, r4, r4
1000fc52:	4220      	tst	r0, r4
1000fc54:	d105      	bne.n	1000fc62 <att_permissions+0x22>
1000fc56:	3b02      	subs	r3, #2
1000fc58:	4218      	tst	r0, r3
1000fc5a:	d102      	bne.n	1000fc62 <att_permissions+0x22>
1000fc5c:	1e4b      	subs	r3, r1, #1
1000fc5e:	4199      	sbcs	r1, r3
1000fc60:	b28b      	uxth	r3, r1
1000fc62:	2130      	movs	r1, #48	; 0x30
1000fc64:	4001      	ands	r1, r0
1000fc66:	2930      	cmp	r1, #48	; 0x30
1000fc68:	d007      	beq.n	1000fc7a <att_permissions+0x3a>
1000fc6a:	0641      	lsls	r1, r0, #25
1000fc6c:	d401      	bmi.n	1000fc72 <att_permissions+0x32>
1000fc6e:	0681      	lsls	r1, r0, #26
1000fc70:	d501      	bpl.n	1000fc76 <att_permissions+0x36>
1000fc72:	4807      	ldr	r0, [pc, #28]	; (1000fc90 <att_permissions+0x50>)
1000fc74:	e009      	b.n	1000fc8a <att_permissions+0x4a>
1000fc76:	06c1      	lsls	r1, r0, #27
1000fc78:	d501      	bpl.n	1000fc7e <att_permissions+0x3e>
1000fc7a:	4806      	ldr	r0, [pc, #24]	; (1000fc94 <att_permissions+0x54>)
1000fc7c:	e005      	b.n	1000fc8a <att_permissions+0x4a>
1000fc7e:	2a00      	cmp	r2, #0
1000fc80:	d001      	beq.n	1000fc86 <att_permissions+0x46>
1000fc82:	2204      	movs	r2, #4
1000fc84:	4313      	orrs	r3, r2
1000fc86:	2080      	movs	r0, #128	; 0x80
1000fc88:	0180      	lsls	r0, r0, #6
1000fc8a:	4318      	orrs	r0, r3
1000fc8c:	bd30      	pop	{r4, r5, pc}
1000fc8e:	46c0      	nop			; (mov r8, r8)
1000fc90:	0000200c 	.word	0x0000200c
1000fc94:	00002004 	.word	0x00002004

1000fc98 <char_permissions>:
1000fc98:	b530      	push	{r4, r5, lr}
1000fc9a:	2300      	movs	r3, #0
1000fc9c:	0784      	lsls	r4, r0, #30
1000fc9e:	d503      	bpl.n	1000fca8 <char_permissions+0x10>
1000fca0:	3301      	adds	r3, #1
1000fca2:	4219      	tst	r1, r3
1000fca4:	d100      	bne.n	1000fca8 <char_permissions+0x10>
1000fca6:	3302      	adds	r3, #2
1000fca8:	0704      	lsls	r4, r0, #28
1000fcaa:	d508      	bpl.n	1000fcbe <char_permissions+0x26>
1000fcac:	06cc      	lsls	r4, r1, #27
1000fcae:	d501      	bpl.n	1000fcb4 <char_permissions+0x1c>
1000fcb0:	2404      	movs	r4, #4
1000fcb2:	e000      	b.n	1000fcb6 <char_permissions+0x1e>
1000fcb4:	240c      	movs	r4, #12
1000fcb6:	4323      	orrs	r3, r4
1000fcb8:	2480      	movs	r4, #128	; 0x80
1000fcba:	01a4      	lsls	r4, r4, #6
1000fcbc:	4323      	orrs	r3, r4
1000fcbe:	0684      	lsls	r4, r0, #26
1000fcc0:	d506      	bpl.n	1000fcd0 <char_permissions+0x38>
1000fcc2:	2406      	movs	r4, #6
1000fcc4:	4221      	tst	r1, r4
1000fcc6:	d101      	bne.n	1000fccc <char_permissions+0x34>
1000fcc8:	340a      	adds	r4, #10
1000fcca:	e000      	b.n	1000fcce <char_permissions+0x36>
1000fccc:	2430      	movs	r4, #48	; 0x30
1000fcce:	4323      	orrs	r3, r4
1000fcd0:	06c4      	lsls	r4, r0, #27
1000fcd2:	d506      	bpl.n	1000fce2 <char_permissions+0x4a>
1000fcd4:	2406      	movs	r4, #6
1000fcd6:	4221      	tst	r1, r4
1000fcd8:	d101      	bne.n	1000fcde <char_permissions+0x46>
1000fcda:	343a      	adds	r4, #58	; 0x3a
1000fcdc:	e000      	b.n	1000fce0 <char_permissions+0x48>
1000fcde:	24c0      	movs	r4, #192	; 0xc0
1000fce0:	4323      	orrs	r3, r4
1000fce2:	2480      	movs	r4, #128	; 0x80
1000fce4:	0064      	lsls	r4, r4, #1
1000fce6:	4220      	tst	r0, r4
1000fce8:	d000      	beq.n	1000fcec <char_permissions+0x54>
1000fcea:	4323      	orrs	r3, r4
1000fcec:	07c4      	lsls	r4, r0, #31
1000fcee:	d502      	bpl.n	1000fcf6 <char_permissions+0x5e>
1000fcf0:	2480      	movs	r4, #128	; 0x80
1000fcf2:	00a4      	lsls	r4, r4, #2
1000fcf4:	4323      	orrs	r3, r4
1000fcf6:	2404      	movs	r4, #4
1000fcf8:	4220      	tst	r0, r4
1000fcfa:	d006      	beq.n	1000fd0a <char_permissions+0x72>
1000fcfc:	06cd      	lsls	r5, r1, #27
1000fcfe:	d400      	bmi.n	1000fd02 <char_permissions+0x6a>
1000fd00:	240c      	movs	r4, #12
1000fd02:	4323      	orrs	r3, r4
1000fd04:	2480      	movs	r4, #128	; 0x80
1000fd06:	0124      	lsls	r4, r4, #4
1000fd08:	4323      	orrs	r3, r4
1000fd0a:	0644      	lsls	r4, r0, #25
1000fd0c:	d501      	bpl.n	1000fd12 <char_permissions+0x7a>
1000fd0e:	4c08      	ldr	r4, [pc, #32]	; (1000fd30 <char_permissions+0x98>)
1000fd10:	4323      	orrs	r3, r4
1000fd12:	0600      	lsls	r0, r0, #24
1000fd14:	d507      	bpl.n	1000fd26 <char_permissions+0x8e>
1000fd16:	2004      	movs	r0, #4
1000fd18:	06c9      	lsls	r1, r1, #27
1000fd1a:	d400      	bmi.n	1000fd1e <char_permissions+0x86>
1000fd1c:	200c      	movs	r0, #12
1000fd1e:	4303      	orrs	r3, r0
1000fd20:	2084      	movs	r0, #132	; 0x84
1000fd22:	0180      	lsls	r0, r0, #6
1000fd24:	4303      	orrs	r3, r0
1000fd26:	0390      	lsls	r0, r2, #14
1000fd28:	4303      	orrs	r3, r0
1000fd2a:	b298      	uxth	r0, r3
1000fd2c:	bd30      	pop	{r4, r5, pc}
1000fd2e:	46c0      	nop			; (mov r8, r8)
1000fd30:	00001004 	.word	0x00001004

1000fd34 <presentation_format_define>:
1000fd34:	b507      	push	{r0, r1, r2, lr}
1000fd36:	466a      	mov	r2, sp
1000fd38:	780b      	ldrb	r3, [r1, #0]
1000fd3a:	7013      	strb	r3, [r2, #0]
1000fd3c:	784b      	ldrb	r3, [r1, #1]
1000fd3e:	7053      	strb	r3, [r2, #1]
1000fd40:	884b      	ldrh	r3, [r1, #2]
1000fd42:	7093      	strb	r3, [r2, #2]
1000fd44:	0a1b      	lsrs	r3, r3, #8
1000fd46:	70d3      	strb	r3, [r2, #3]
1000fd48:	790b      	ldrb	r3, [r1, #4]
1000fd4a:	7113      	strb	r3, [r2, #4]
1000fd4c:	88cb      	ldrh	r3, [r1, #6]
1000fd4e:	2107      	movs	r1, #7
1000fd50:	7153      	strb	r3, [r2, #5]
1000fd52:	0a1b      	lsrs	r3, r3, #8
1000fd54:	7193      	strb	r3, [r2, #6]
1000fd56:	4b01      	ldr	r3, [pc, #4]	; (1000fd5c <presentation_format_define+0x28>)
1000fd58:	4798      	blx	r3
1000fd5a:	bd0e      	pop	{r1, r2, r3, pc}
1000fd5c:	100120c9 	.word	0x100120c9

1000fd60 <db_addATT>:
1000fd60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000fd62:	4c29      	ldr	r4, [pc, #164]	; (1000fe08 <db_addATT+0xa8>)
1000fd64:	1c1d      	adds	r5, r3, #0
1000fd66:	6823      	ldr	r3, [r4, #0]
1000fd68:	9001      	str	r0, [sp, #4]
1000fd6a:	26d3      	movs	r6, #211	; 0xd3
1000fd6c:	2b00      	cmp	r3, #0
1000fd6e:	d048      	beq.n	1000fe02 <db_addATT+0xa2>
1000fd70:	1c1e      	adds	r6, r3, #0
1000fd72:	3e0c      	subs	r6, #12
1000fd74:	6026      	str	r6, [r4, #0]
1000fd76:	2900      	cmp	r1, #0
1000fd78:	d005      	beq.n	1000fd86 <db_addATT+0x26>
1000fd7a:	4f24      	ldr	r7, [pc, #144]	; (1000fe0c <db_addATT+0xac>)
1000fd7c:	46bc      	mov	ip, r7
1000fd7e:	4660      	mov	r0, ip
1000fd80:	683f      	ldr	r7, [r7, #0]
1000fd82:	18bf      	adds	r7, r7, r2
1000fd84:	6007      	str	r7, [r0, #0]
1000fd86:	4821      	ldr	r0, [pc, #132]	; (1000fe0c <db_addATT+0xac>)
1000fd88:	6807      	ldr	r7, [r0, #0]
1000fd8a:	4684      	mov	ip, r0
1000fd8c:	42be      	cmp	r6, r7
1000fd8e:	d932      	bls.n	1000fdf6 <db_addATT+0x96>
1000fd90:	4668      	mov	r0, sp
1000fd92:	8880      	ldrh	r0, [r0, #4]
1000fd94:	3b0c      	subs	r3, #12
1000fd96:	8018      	strh	r0, [r3, #0]
1000fd98:	6823      	ldr	r3, [r4, #0]
1000fd9a:	2900      	cmp	r1, #0
1000fd9c:	d009      	beq.n	1000fdb2 <db_addATT+0x52>
1000fd9e:	2a00      	cmp	r2, #0
1000fda0:	d007      	beq.n	1000fdb2 <db_addATT+0x52>
1000fda2:	4660      	mov	r0, ip
1000fda4:	6800      	ldr	r0, [r0, #0]
1000fda6:	809a      	strh	r2, [r3, #4]
1000fda8:	1a80      	subs	r0, r0, r2
1000fdaa:	6098      	str	r0, [r3, #8]
1000fdac:	4b18      	ldr	r3, [pc, #96]	; (1000fe10 <db_addATT+0xb0>)
1000fdae:	4798      	blx	r3
1000fdb0:	e002      	b.n	1000fdb8 <db_addATT+0x58>
1000fdb2:	2100      	movs	r1, #0
1000fdb4:	809a      	strh	r2, [r3, #4]
1000fdb6:	6099      	str	r1, [r3, #8]
1000fdb8:	2300      	movs	r3, #0
1000fdba:	6822      	ldr	r2, [r4, #0]
1000fdbc:	7093      	strb	r3, [r2, #2]
1000fdbe:	3303      	adds	r3, #3
1000fdc0:	402b      	ands	r3, r5
1000fdc2:	2b03      	cmp	r3, #3
1000fdc4:	d001      	beq.n	1000fdca <db_addATT+0x6a>
1000fdc6:	076b      	lsls	r3, r5, #29
1000fdc8:	d504      	bpl.n	1000fdd4 <db_addATT+0x74>
1000fdca:	2101      	movs	r1, #1
1000fdcc:	6822      	ldr	r2, [r4, #0]
1000fdce:	7893      	ldrb	r3, [r2, #2]
1000fdd0:	430b      	orrs	r3, r1
1000fdd2:	7093      	strb	r3, [r2, #2]
1000fdd4:	2330      	movs	r3, #48	; 0x30
1000fdd6:	402b      	ands	r3, r5
1000fdd8:	2b30      	cmp	r3, #48	; 0x30
1000fdda:	d001      	beq.n	1000fde0 <db_addATT+0x80>
1000fddc:	066b      	lsls	r3, r5, #25
1000fdde:	d504      	bpl.n	1000fdea <db_addATT+0x8a>
1000fde0:	2102      	movs	r1, #2
1000fde2:	6822      	ldr	r2, [r4, #0]
1000fde4:	7893      	ldrb	r3, [r2, #2]
1000fde6:	430b      	orrs	r3, r1
1000fde8:	7093      	strb	r3, [r2, #2]
1000fdea:	4a0a      	ldr	r2, [pc, #40]	; (1000fe14 <db_addATT+0xb4>)
1000fdec:	2600      	movs	r6, #0
1000fdee:	6813      	ldr	r3, [r2, #0]
1000fdf0:	3301      	adds	r3, #1
1000fdf2:	6013      	str	r3, [r2, #0]
1000fdf4:	e005      	b.n	1000fe02 <db_addATT+0xa2>
1000fdf6:	6023      	str	r3, [r4, #0]
1000fdf8:	2611      	movs	r6, #17
1000fdfa:	2900      	cmp	r1, #0
1000fdfc:	d001      	beq.n	1000fe02 <db_addATT+0xa2>
1000fdfe:	1aba      	subs	r2, r7, r2
1000fe00:	6002      	str	r2, [r0, #0]
1000fe02:	1c30      	adds	r0, r6, #0
1000fe04:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000fe06:	46c0      	nop			; (mov r8, r8)
1000fe08:	1001a374 	.word	0x1001a374
1000fe0c:	1001a378 	.word	0x1001a378
1000fe10:	100165f7 	.word	0x100165f7
1000fe14:	1001a37c 	.word	0x1001a37c

1000fe18 <user_description_define>:
1000fe18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000fe1a:	1c05      	adds	r5, r0, #0
1000fe1c:	20cf      	movs	r0, #207	; 0xcf
1000fe1e:	2a00      	cmp	r2, #0
1000fe20:	d01c      	beq.n	1000fe5c <user_description_define+0x44>
1000fe22:	1c14      	adds	r4, r2, #0
1000fe24:	2203      	movs	r2, #3
1000fe26:	1c1e      	adds	r6, r3, #0
1000fe28:	400a      	ands	r2, r1
1000fe2a:	1c0b      	adds	r3, r1, #0
1000fe2c:	3a03      	subs	r2, #3
1000fe2e:	4251      	negs	r1, r2
1000fe30:	4151      	adcs	r1, r2
1000fe32:	075a      	lsls	r2, r3, #29
1000fe34:	0fd2      	lsrs	r2, r2, #31
1000fe36:	430a      	orrs	r2, r1
1000fe38:	03d2      	lsls	r2, r2, #15
1000fe3a:	4f09      	ldr	r7, [pc, #36]	; (1000fe60 <user_description_define+0x48>)
1000fe3c:	1c28      	adds	r0, r5, #0
1000fe3e:	2a00      	cmp	r2, #0
1000fe40:	d003      	beq.n	1000fe4a <user_description_define+0x32>
1000fe42:	1c21      	adds	r1, r4, #0
1000fe44:	1c32      	adds	r2, r6, #0
1000fe46:	47b8      	blx	r7
1000fe48:	e008      	b.n	1000fe5c <user_description_define+0x44>
1000fe4a:	1c11      	adds	r1, r2, #0
1000fe4c:	47b8      	blx	r7
1000fe4e:	2800      	cmp	r0, #0
1000fe50:	d104      	bne.n	1000fe5c <user_description_define+0x44>
1000fe52:	1c28      	adds	r0, r5, #0
1000fe54:	1c31      	adds	r1, r6, #0
1000fe56:	1c22      	adds	r2, r4, #0
1000fe58:	4b02      	ldr	r3, [pc, #8]	; (1000fe64 <user_description_define+0x4c>)
1000fe5a:	4798      	blx	r3
1000fe5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000fe5e:	46c0      	nop			; (mov r8, r8)
1000fe60:	1000fd61 	.word	0x1000fd61
1000fe64:	100120c9 	.word	0x100120c9

1000fe68 <at_ble_read_authorize_reply.part.1>:
1000fe68:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000fe6a:	4b09      	ldr	r3, [pc, #36]	; (1000fe90 <at_ble_read_authorize_reply.part.1+0x28>)
1000fe6c:	1c05      	adds	r5, r0, #0
1000fe6e:	1c08      	adds	r0, r1, #0
1000fe70:	1c0c      	adds	r4, r1, #0
1000fe72:	4798      	blx	r3
1000fe74:	2800      	cmp	r0, #0
1000fe76:	d009      	beq.n	1000fe8c <at_ble_read_authorize_reply.part.1+0x24>
1000fe78:	6882      	ldr	r2, [r0, #8]
1000fe7a:	2a00      	cmp	r2, #0
1000fe7c:	d006      	beq.n	1000fe8c <at_ble_read_authorize_reply.part.1+0x24>
1000fe7e:	8883      	ldrh	r3, [r0, #4]
1000fe80:	1c29      	adds	r1, r5, #0
1000fe82:	9200      	str	r2, [sp, #0]
1000fe84:	1c20      	adds	r0, r4, #0
1000fe86:	2200      	movs	r2, #0
1000fe88:	4c02      	ldr	r4, [pc, #8]	; (1000fe94 <at_ble_read_authorize_reply.part.1+0x2c>)
1000fe8a:	47a0      	blx	r4
1000fe8c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000fe8e:	46c0      	nop			; (mov r8, r8)
1000fe90:	1000fc01 	.word	0x1000fc01
1000fe94:	10011b61 	.word	0x10011b61

1000fe98 <internal_at_ble_service_define>:
1000fe98:	b5f0      	push	{r4, r5, r6, r7, lr}
1000fe9a:	b08b      	sub	sp, #44	; 0x2c
1000fe9c:	9306      	str	r3, [sp, #24]
1000fe9e:	ab10      	add	r3, sp, #64	; 0x40
1000fea0:	9202      	str	r2, [sp, #8]
1000fea2:	cb04      	ldmia	r3!, {r2}
1000fea4:	1c05      	adds	r5, r0, #0
1000fea6:	881b      	ldrh	r3, [r3, #0]
1000fea8:	9105      	str	r1, [sp, #20]
1000feaa:	9303      	str	r3, [sp, #12]
1000feac:	ab12      	add	r3, sp, #72	; 0x48
1000feae:	781b      	ldrb	r3, [r3, #0]
1000feb0:	20cf      	movs	r0, #207	; 0xcf
1000feb2:	9304      	str	r3, [sp, #16]
1000feb4:	2d00      	cmp	r5, #0
1000feb6:	d100      	bne.n	1000feba <internal_at_ble_service_define+0x22>
1000feb8:	e1ca      	b.n	10010250 <internal_at_ble_service_define+0x3b8>
1000feba:	2900      	cmp	r1, #0
1000febc:	d100      	bne.n	1000fec0 <internal_at_ble_service_define+0x28>
1000febe:	e1c7      	b.n	10010250 <internal_at_ble_service_define+0x3b8>
1000fec0:	2a00      	cmp	r2, #0
1000fec2:	d100      	bne.n	1000fec6 <internal_at_ble_service_define+0x2e>
1000fec4:	e1c4      	b.n	10010250 <internal_at_ble_service_define+0x3b8>
1000fec6:	9b03      	ldr	r3, [sp, #12]
1000fec8:	2b00      	cmp	r3, #0
1000feca:	d100      	bne.n	1000fece <internal_at_ble_service_define+0x36>
1000fecc:	e1c0      	b.n	10010250 <internal_at_ble_service_define+0x3b8>
1000fece:	4bc9      	ldr	r3, [pc, #804]	; (100101f4 <internal_at_ble_service_define+0x35c>)
1000fed0:	3004      	adds	r0, #4
1000fed2:	681e      	ldr	r6, [r3, #0]
1000fed4:	2e00      	cmp	r6, #0
1000fed6:	d100      	bne.n	1000feda <internal_at_ble_service_define+0x42>
1000fed8:	e1ba      	b.n	10010250 <internal_at_ble_service_define+0x3b8>
1000feda:	2400      	movs	r4, #0
1000fedc:	4bc6      	ldr	r3, [pc, #792]	; (100101f8 <internal_at_ble_service_define+0x360>)
1000fede:	8034      	strh	r4, [r6, #0]
1000fee0:	881b      	ldrh	r3, [r3, #0]
1000fee2:	1db7      	adds	r7, r6, #6
1000fee4:	1c21      	adds	r1, r4, #0
1000fee6:	2210      	movs	r2, #16
1000fee8:	8073      	strh	r3, [r6, #2]
1000feea:	1c38      	adds	r0, r7, #0
1000feec:	4bc3      	ldr	r3, [pc, #780]	; (100101fc <internal_at_ble_service_define+0x364>)
1000feee:	4798      	blx	r3
1000fef0:	7828      	ldrb	r0, [r5, #0]
1000fef2:	4bc3      	ldr	r3, [pc, #780]	; (10010200 <internal_at_ble_service_define+0x368>)
1000fef4:	4798      	blx	r3
1000fef6:	1c69      	adds	r1, r5, #1
1000fef8:	1c02      	adds	r2, r0, #0
1000fefa:	4bc2      	ldr	r3, [pc, #776]	; (10010204 <internal_at_ble_service_define+0x36c>)
1000fefc:	1c38      	adds	r0, r7, #0
1000fefe:	4798      	blx	r3
1000ff00:	2204      	movs	r2, #4
1000ff02:	782b      	ldrb	r3, [r5, #0]
1000ff04:	9d02      	ldr	r5, [sp, #8]
1000ff06:	011b      	lsls	r3, r3, #4
1000ff08:	4313      	orrs	r3, r2
1000ff0a:	9a04      	ldr	r2, [sp, #16]
1000ff0c:	7174      	strb	r4, [r6, #5]
1000ff0e:	0192      	lsls	r2, r2, #6
1000ff10:	4313      	orrs	r3, r2
1000ff12:	7133      	strb	r3, [r6, #4]
1000ff14:	2316      	movs	r3, #22
1000ff16:	9a06      	ldr	r2, [sp, #24]
1000ff18:	3512      	adds	r5, #18
1000ff1a:	4353      	muls	r3, r2
1000ff1c:	9a02      	ldr	r2, [sp, #8]
1000ff1e:	3312      	adds	r3, #18
1000ff20:	18d7      	adds	r7, r2, r3
1000ff22:	42bd      	cmp	r5, r7
1000ff24:	d00f      	beq.n	1000ff46 <internal_at_ble_service_define+0xae>
1000ff26:	4bb8      	ldr	r3, [pc, #736]	; (10010208 <internal_at_ble_service_define+0x370>)
1000ff28:	8829      	ldrh	r1, [r5, #0]
1000ff2a:	9300      	str	r3, [sp, #0]
1000ff2c:	230e      	movs	r3, #14
1000ff2e:	aa06      	add	r2, sp, #24
1000ff30:	189b      	adds	r3, r3, r2
1000ff32:	9301      	str	r3, [sp, #4]
1000ff34:	4cb5      	ldr	r4, [pc, #724]	; (1001020c <internal_at_ble_service_define+0x374>)
1000ff36:	1c30      	adds	r0, r6, #0
1000ff38:	2201      	movs	r2, #1
1000ff3a:	2302      	movs	r3, #2
1000ff3c:	47a0      	blx	r4
1000ff3e:	3516      	adds	r5, #22
1000ff40:	1e04      	subs	r4, r0, #0
1000ff42:	d0ee      	beq.n	1000ff22 <internal_at_ble_service_define+0x8a>
1000ff44:	e183      	b.n	1001024e <internal_at_ble_service_define+0x3b6>
1000ff46:	9f10      	ldr	r7, [sp, #64]	; 0x40
1000ff48:	2300      	movs	r3, #0
1000ff4a:	3714      	adds	r7, #20
1000ff4c:	1c3d      	adds	r5, r7, #0
1000ff4e:	9302      	str	r3, [sp, #8]
1000ff50:	9b02      	ldr	r3, [sp, #8]
1000ff52:	9a03      	ldr	r2, [sp, #12]
1000ff54:	4293      	cmp	r3, r2
1000ff56:	db00      	blt.n	1000ff5a <internal_at_ble_service_define+0xc2>
1000ff58:	e0bf      	b.n	100100da <internal_at_ble_service_define+0x242>
1000ff5a:	4bad      	ldr	r3, [pc, #692]	; (10010210 <internal_at_ble_service_define+0x378>)
1000ff5c:	aa06      	add	r2, sp, #24
1000ff5e:	9300      	str	r3, [sp, #0]
1000ff60:	230e      	movs	r3, #14
1000ff62:	189b      	adds	r3, r3, r2
1000ff64:	9301      	str	r3, [sp, #4]
1000ff66:	4ca9      	ldr	r4, [pc, #676]	; (1001020c <internal_at_ble_service_define+0x374>)
1000ff68:	1c30      	adds	r0, r6, #0
1000ff6a:	2104      	movs	r1, #4
1000ff6c:	2201      	movs	r2, #1
1000ff6e:	2302      	movs	r3, #2
1000ff70:	47a0      	blx	r4
1000ff72:	1e04      	subs	r4, r0, #0
1000ff74:	d000      	beq.n	1000ff78 <internal_at_ble_service_define+0xe0>
1000ff76:	e16a      	b.n	1001024e <internal_at_ble_service_define+0x3b6>
1000ff78:	1c2b      	adds	r3, r5, #0
1000ff7a:	3b12      	subs	r3, #18
1000ff7c:	7b2c      	ldrb	r4, [r5, #12]
1000ff7e:	781b      	ldrb	r3, [r3, #0]
1000ff80:	1c21      	adds	r1, r4, #0
1000ff82:	1c1a      	adds	r2, r3, #0
1000ff84:	9304      	str	r3, [sp, #16]
1000ff86:	8828      	ldrh	r0, [r5, #0]
1000ff88:	4ba2      	ldr	r3, [pc, #648]	; (10010214 <internal_at_ble_service_define+0x37c>)
1000ff8a:	4798      	blx	r3
1000ff8c:	2303      	movs	r3, #3
1000ff8e:	4023      	ands	r3, r4
1000ff90:	3b03      	subs	r3, #3
1000ff92:	4259      	negs	r1, r3
1000ff94:	4159      	adcs	r1, r3
1000ff96:	2301      	movs	r3, #1
1000ff98:	08a4      	lsrs	r4, r4, #2
1000ff9a:	401c      	ands	r4, r3
1000ff9c:	430c      	orrs	r4, r1
1000ff9e:	896b      	ldrh	r3, [r5, #10]
1000ffa0:	03e4      	lsls	r4, r4, #15
1000ffa2:	431c      	orrs	r4, r3
1000ffa4:	9007      	str	r0, [sp, #28]
1000ffa6:	4b96      	ldr	r3, [pc, #600]	; (10010200 <internal_at_ble_service_define+0x368>)
1000ffa8:	9804      	ldr	r0, [sp, #16]
1000ffaa:	4798      	blx	r3
1000ffac:	1c2a      	adds	r2, r5, #0
1000ffae:	3a11      	subs	r2, #17
1000ffb0:	9200      	str	r2, [sp, #0]
1000ffb2:	3a03      	subs	r2, #3
1000ffb4:	1c03      	adds	r3, r0, #0
1000ffb6:	9201      	str	r2, [sp, #4]
1000ffb8:	1c21      	adds	r1, r4, #0
1000ffba:	1c30      	adds	r0, r6, #0
1000ffbc:	4c93      	ldr	r4, [pc, #588]	; (1001020c <internal_at_ble_service_define+0x374>)
1000ffbe:	9a07      	ldr	r2, [sp, #28]
1000ffc0:	47a0      	blx	r4
1000ffc2:	1e04      	subs	r4, r0, #0
1000ffc4:	d000      	beq.n	1000ffc8 <internal_at_ble_service_define+0x130>
1000ffc6:	e142      	b.n	1001024e <internal_at_ble_service_define+0x3b6>
1000ffc8:	22c0      	movs	r2, #192	; 0xc0
1000ffca:	882b      	ldrh	r3, [r5, #0]
1000ffcc:	0052      	lsls	r2, r2, #1
1000ffce:	4213      	tst	r3, r2
1000ffd0:	d104      	bne.n	1000ffdc <internal_at_ble_service_define+0x144>
1000ffd2:	8aab      	ldrh	r3, [r5, #20]
1000ffd4:	9304      	str	r3, [sp, #16]
1000ffd6:	2b00      	cmp	r3, #0
1000ffd8:	d116      	bne.n	10010008 <internal_at_ble_service_define+0x170>
1000ffda:	e03a      	b.n	10010052 <internal_at_ble_service_define+0x1ba>
1000ffdc:	2201      	movs	r2, #1
1000ffde:	09d9      	lsrs	r1, r3, #7
1000ffe0:	4011      	ands	r1, r2
1000ffe2:	05db      	lsls	r3, r3, #23
1000ffe4:	d501      	bpl.n	1000ffea <internal_at_ble_service_define+0x152>
1000ffe6:	2302      	movs	r3, #2
1000ffe8:	4319      	orrs	r1, r3
1000ffea:	4b8b      	ldr	r3, [pc, #556]	; (10010218 <internal_at_ble_service_define+0x380>)
1000ffec:	aa06      	add	r2, sp, #24
1000ffee:	9300      	str	r3, [sp, #0]
1000fff0:	230e      	movs	r3, #14
1000fff2:	189b      	adds	r3, r3, r2
1000fff4:	9301      	str	r3, [sp, #4]
1000fff6:	4c85      	ldr	r4, [pc, #532]	; (1001020c <internal_at_ble_service_define+0x374>)
1000fff8:	0209      	lsls	r1, r1, #8
1000fffa:	1c30      	adds	r0, r6, #0
1000fffc:	2201      	movs	r2, #1
1000fffe:	2302      	movs	r3, #2
10010000:	47a0      	blx	r4
10010002:	1e04      	subs	r4, r0, #0
10010004:	d0e5      	beq.n	1000ffd2 <internal_at_ble_service_define+0x13a>
10010006:	e122      	b.n	1001024e <internal_at_ble_service_define+0x3b6>
10010008:	2380      	movs	r3, #128	; 0x80
1001000a:	882a      	ldrh	r2, [r5, #0]
1001000c:	7f2c      	ldrb	r4, [r5, #28]
1001000e:	005b      	lsls	r3, r3, #1
10010010:	401a      	ands	r2, r3
10010012:	1c20      	adds	r0, r4, #0
10010014:	2101      	movs	r1, #1
10010016:	2a00      	cmp	r2, #0
10010018:	d000      	beq.n	1001001c <internal_at_ble_service_define+0x184>
1001001a:	1c0a      	adds	r2, r1, #0
1001001c:	4b7f      	ldr	r3, [pc, #508]	; (1001021c <internal_at_ble_service_define+0x384>)
1001001e:	4798      	blx	r3
10010020:	2203      	movs	r2, #3
10010022:	4022      	ands	r2, r4
10010024:	3a03      	subs	r2, #3
10010026:	4251      	negs	r1, r2
10010028:	4151      	adcs	r1, r2
1001002a:	4b7d      	ldr	r3, [pc, #500]	; (10010220 <internal_at_ble_service_define+0x388>)
1001002c:	1c0a      	adds	r2, r1, #0
1001002e:	9300      	str	r3, [sp, #0]
10010030:	1c2b      	adds	r3, r5, #0
10010032:	0764      	lsls	r4, r4, #29
10010034:	0fe4      	lsrs	r4, r4, #31
10010036:	4322      	orrs	r2, r4
10010038:	03d2      	lsls	r2, r2, #15
1001003a:	4310      	orrs	r0, r2
1001003c:	3320      	adds	r3, #32
1001003e:	b282      	uxth	r2, r0
10010040:	9301      	str	r3, [sp, #4]
10010042:	4c72      	ldr	r4, [pc, #456]	; (1001020c <internal_at_ble_service_define+0x374>)
10010044:	1c30      	adds	r0, r6, #0
10010046:	9904      	ldr	r1, [sp, #16]
10010048:	2302      	movs	r3, #2
1001004a:	47a0      	blx	r4
1001004c:	1e04      	subs	r4, r0, #0
1001004e:	d000      	beq.n	10010052 <internal_at_ble_service_define+0x1ba>
10010050:	e0fd      	b.n	1001024e <internal_at_ble_service_define+0x3b6>
10010052:	2101      	movs	r1, #1
10010054:	882b      	ldrh	r3, [r5, #0]
10010056:	420b      	tst	r3, r1
10010058:	d011      	beq.n	1001007e <internal_at_ble_service_define+0x1e6>
1001005a:	7fa8      	ldrb	r0, [r5, #30]
1001005c:	4b6f      	ldr	r3, [pc, #444]	; (1001021c <internal_at_ble_service_define+0x384>)
1001005e:	2200      	movs	r2, #0
10010060:	4798      	blx	r3
10010062:	4b70      	ldr	r3, [pc, #448]	; (10010224 <internal_at_ble_service_define+0x38c>)
10010064:	1c02      	adds	r2, r0, #0
10010066:	9300      	str	r3, [sp, #0]
10010068:	1c2b      	adds	r3, r5, #0
1001006a:	3324      	adds	r3, #36	; 0x24
1001006c:	9301      	str	r3, [sp, #4]
1001006e:	4c67      	ldr	r4, [pc, #412]	; (1001020c <internal_at_ble_service_define+0x374>)
10010070:	1c30      	adds	r0, r6, #0
10010072:	496d      	ldr	r1, [pc, #436]	; (10010228 <internal_at_ble_service_define+0x390>)
10010074:	2302      	movs	r3, #2
10010076:	47a0      	blx	r4
10010078:	1e04      	subs	r4, r0, #0
1001007a:	d000      	beq.n	1001007e <internal_at_ble_service_define+0x1e6>
1001007c:	e0e7      	b.n	1001024e <internal_at_ble_service_define+0x3b6>
1001007e:	2330      	movs	r3, #48	; 0x30
10010080:	882a      	ldrh	r2, [r5, #0]
10010082:	421a      	tst	r2, r3
10010084:	d012      	beq.n	100100ac <internal_at_ble_service_define+0x214>
10010086:	2101      	movs	r1, #1
10010088:	7f68      	ldrb	r0, [r5, #29]
1001008a:	1c0a      	adds	r2, r1, #0
1001008c:	4b63      	ldr	r3, [pc, #396]	; (1001021c <internal_at_ble_service_define+0x384>)
1001008e:	4798      	blx	r3
10010090:	4b66      	ldr	r3, [pc, #408]	; (1001022c <internal_at_ble_service_define+0x394>)
10010092:	1c02      	adds	r2, r0, #0
10010094:	9300      	str	r3, [sp, #0]
10010096:	1c2b      	adds	r3, r5, #0
10010098:	3322      	adds	r3, #34	; 0x22
1001009a:	9301      	str	r3, [sp, #4]
1001009c:	4c5b      	ldr	r4, [pc, #364]	; (1001020c <internal_at_ble_service_define+0x374>)
1001009e:	1c30      	adds	r0, r6, #0
100100a0:	4961      	ldr	r1, [pc, #388]	; (10010228 <internal_at_ble_service_define+0x390>)
100100a2:	2302      	movs	r3, #2
100100a4:	47a0      	blx	r4
100100a6:	1e04      	subs	r4, r0, #0
100100a8:	d000      	beq.n	100100ac <internal_at_ble_service_define+0x214>
100100aa:	e0d0      	b.n	1001024e <internal_at_ble_service_define+0x3b6>
100100ac:	69ab      	ldr	r3, [r5, #24]
100100ae:	2b00      	cmp	r3, #0
100100b0:	d00e      	beq.n	100100d0 <internal_at_ble_service_define+0x238>
100100b2:	4b5f      	ldr	r3, [pc, #380]	; (10010230 <internal_at_ble_service_define+0x398>)
100100b4:	aa06      	add	r2, sp, #24
100100b6:	9300      	str	r3, [sp, #0]
100100b8:	230e      	movs	r3, #14
100100ba:	189b      	adds	r3, r3, r2
100100bc:	9301      	str	r3, [sp, #4]
100100be:	4c53      	ldr	r4, [pc, #332]	; (1001020c <internal_at_ble_service_define+0x374>)
100100c0:	1c30      	adds	r0, r6, #0
100100c2:	2107      	movs	r1, #7
100100c4:	2201      	movs	r2, #1
100100c6:	2302      	movs	r3, #2
100100c8:	47a0      	blx	r4
100100ca:	1e04      	subs	r4, r0, #0
100100cc:	d000      	beq.n	100100d0 <internal_at_ble_service_define+0x238>
100100ce:	e0be      	b.n	1001024e <internal_at_ble_service_define+0x3b6>
100100d0:	9b02      	ldr	r3, [sp, #8]
100100d2:	353c      	adds	r5, #60	; 0x3c
100100d4:	3301      	adds	r3, #1
100100d6:	9302      	str	r3, [sp, #8]
100100d8:	e73a      	b.n	1000ff50 <internal_at_ble_service_define+0xb8>
100100da:	1c30      	adds	r0, r6, #0
100100dc:	4b55      	ldr	r3, [pc, #340]	; (10010234 <internal_at_ble_service_define+0x39c>)
100100de:	4798      	blx	r3
100100e0:	1e04      	subs	r4, r0, #0
100100e2:	d000      	beq.n	100100e6 <internal_at_ble_service_define+0x24e>
100100e4:	e0b3      	b.n	1001024e <internal_at_ble_service_define+0x3b6>
100100e6:	8833      	ldrh	r3, [r6, #0]
100100e8:	9a05      	ldr	r2, [sp, #20]
100100ea:	8013      	strh	r3, [r2, #0]
100100ec:	8836      	ldrh	r6, [r6, #0]
100100ee:	9b06      	ldr	r3, [sp, #24]
100100f0:	9a03      	ldr	r2, [sp, #12]
100100f2:	18f6      	adds	r6, r6, r3
100100f4:	b2b3      	uxth	r3, r6
100100f6:	9302      	str	r3, [sp, #8]
100100f8:	233c      	movs	r3, #60	; 0x3c
100100fa:	4353      	muls	r3, r2
100100fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
100100fe:	3314      	adds	r3, #20
10010100:	18d3      	adds	r3, r2, r3
10010102:	9304      	str	r3, [sp, #16]
10010104:	9b04      	ldr	r3, [sp, #16]
10010106:	429f      	cmp	r7, r3
10010108:	d100      	bne.n	1001010c <internal_at_ble_service_define+0x274>
1001010a:	e0a0      	b.n	1001024e <internal_at_ble_service_define+0x3b6>
1001010c:	9b02      	ldr	r3, [sp, #8]
1001010e:	1c9d      	adds	r5, r3, #2
10010110:	1c3b      	adds	r3, r7, #0
10010112:	b2ad      	uxth	r5, r5
10010114:	3b14      	subs	r3, #20
10010116:	801d      	strh	r5, [r3, #0]
10010118:	9303      	str	r3, [sp, #12]
1001011a:	893b      	ldrh	r3, [r7, #8]
1001011c:	2b00      	cmp	r3, #0
1001011e:	d108      	bne.n	10010132 <internal_at_ble_service_define+0x29a>
10010120:	23c0      	movs	r3, #192	; 0xc0
10010122:	883a      	ldrh	r2, [r7, #0]
10010124:	005b      	lsls	r3, r3, #1
10010126:	421a      	tst	r2, r3
10010128:	d026      	beq.n	10010178 <internal_at_ble_service_define+0x2e0>
1001012a:	9e02      	ldr	r6, [sp, #8]
1001012c:	3603      	adds	r6, #3
1001012e:	b2b5      	uxth	r5, r6
10010130:	e022      	b.n	10010178 <internal_at_ble_service_define+0x2e0>
10010132:	2103      	movs	r1, #3
10010134:	7b3b      	ldrb	r3, [r7, #12]
10010136:	4019      	ands	r1, r3
10010138:	3903      	subs	r1, #3
1001013a:	424a      	negs	r2, r1
1001013c:	414a      	adcs	r2, r1
1001013e:	0759      	lsls	r1, r3, #29
10010140:	0fc9      	lsrs	r1, r1, #31
10010142:	4311      	orrs	r1, r2
10010144:	03c9      	lsls	r1, r1, #15
10010146:	897a      	ldrh	r2, [r7, #10]
10010148:	2900      	cmp	r1, #0
1001014a:	d007      	beq.n	1001015c <internal_at_ble_service_define+0x2c4>
1001014c:	6879      	ldr	r1, [r7, #4]
1001014e:	2900      	cmp	r1, #0
10010150:	d100      	bne.n	10010154 <internal_at_ble_service_define+0x2bc>
10010152:	4939      	ldr	r1, [pc, #228]	; (10010238 <internal_at_ble_service_define+0x3a0>)
10010154:	1c28      	adds	r0, r5, #0
10010156:	4e39      	ldr	r6, [pc, #228]	; (1001023c <internal_at_ble_service_define+0x3a4>)
10010158:	47b0      	blx	r6
1001015a:	e00a      	b.n	10010172 <internal_at_ble_service_define+0x2da>
1001015c:	1c28      	adds	r0, r5, #0
1001015e:	4e37      	ldr	r6, [pc, #220]	; (1001023c <internal_at_ble_service_define+0x3a4>)
10010160:	47b0      	blx	r6
10010162:	2800      	cmp	r0, #0
10010164:	d172      	bne.n	1001024c <internal_at_ble_service_define+0x3b4>
10010166:	9b03      	ldr	r3, [sp, #12]
10010168:	8939      	ldrh	r1, [r7, #8]
1001016a:	8818      	ldrh	r0, [r3, #0]
1001016c:	687a      	ldr	r2, [r7, #4]
1001016e:	4b34      	ldr	r3, [pc, #208]	; (10010240 <internal_at_ble_service_define+0x3a8>)
10010170:	4798      	blx	r3
10010172:	2800      	cmp	r0, #0
10010174:	d0d4      	beq.n	10010120 <internal_at_ble_service_define+0x288>
10010176:	e069      	b.n	1001024c <internal_at_ble_service_define+0x3b4>
10010178:	8abb      	ldrh	r3, [r7, #20]
1001017a:	2b00      	cmp	r3, #0
1001017c:	d00a      	beq.n	10010194 <internal_at_ble_service_define+0x2fc>
1001017e:	3501      	adds	r5, #1
10010180:	b2ad      	uxth	r5, r5
10010182:	843d      	strh	r5, [r7, #32]
10010184:	7f39      	ldrb	r1, [r7, #28]
10010186:	8afb      	ldrh	r3, [r7, #22]
10010188:	1c28      	adds	r0, r5, #0
1001018a:	693a      	ldr	r2, [r7, #16]
1001018c:	4e2d      	ldr	r6, [pc, #180]	; (10010244 <internal_at_ble_service_define+0x3ac>)
1001018e:	47b0      	blx	r6
10010190:	2800      	cmp	r0, #0
10010192:	d15b      	bne.n	1001024c <internal_at_ble_service_define+0x3b4>
10010194:	883b      	ldrh	r3, [r7, #0]
10010196:	07db      	lsls	r3, r3, #31
10010198:	d50d      	bpl.n	100101b6 <internal_at_ble_service_define+0x31e>
1001019a:	2200      	movs	r2, #0
1001019c:	3501      	adds	r5, #1
1001019e:	b2ad      	uxth	r5, r5
100101a0:	a909      	add	r1, sp, #36	; 0x24
100101a2:	84bd      	strh	r5, [r7, #36]	; 0x24
100101a4:	7fbb      	ldrb	r3, [r7, #30]
100101a6:	1c28      	adds	r0, r5, #0
100101a8:	700a      	strb	r2, [r1, #0]
100101aa:	704a      	strb	r2, [r1, #1]
100101ac:	4e23      	ldr	r6, [pc, #140]	; (1001023c <internal_at_ble_service_define+0x3a4>)
100101ae:	3202      	adds	r2, #2
100101b0:	47b0      	blx	r6
100101b2:	2800      	cmp	r0, #0
100101b4:	d14a      	bne.n	1001024c <internal_at_ble_service_define+0x3b4>
100101b6:	2330      	movs	r3, #48	; 0x30
100101b8:	883a      	ldrh	r2, [r7, #0]
100101ba:	421a      	tst	r2, r3
100101bc:	d00d      	beq.n	100101da <internal_at_ble_service_define+0x342>
100101be:	2200      	movs	r2, #0
100101c0:	3501      	adds	r5, #1
100101c2:	b2ad      	uxth	r5, r5
100101c4:	a909      	add	r1, sp, #36	; 0x24
100101c6:	847d      	strh	r5, [r7, #34]	; 0x22
100101c8:	7f7b      	ldrb	r3, [r7, #29]
100101ca:	1c28      	adds	r0, r5, #0
100101cc:	700a      	strb	r2, [r1, #0]
100101ce:	704a      	strb	r2, [r1, #1]
100101d0:	4e1a      	ldr	r6, [pc, #104]	; (1001023c <internal_at_ble_service_define+0x3a4>)
100101d2:	3202      	adds	r2, #2
100101d4:	47b0      	blx	r6
100101d6:	2800      	cmp	r0, #0
100101d8:	d138      	bne.n	1001024c <internal_at_ble_service_define+0x3b4>
100101da:	69b9      	ldr	r1, [r7, #24]
100101dc:	2900      	cmp	r1, #0
100101de:	d006      	beq.n	100101ee <internal_at_ble_service_define+0x356>
100101e0:	3501      	adds	r5, #1
100101e2:	b2ad      	uxth	r5, r5
100101e4:	1c28      	adds	r0, r5, #0
100101e6:	4b18      	ldr	r3, [pc, #96]	; (10010248 <internal_at_ble_service_define+0x3b0>)
100101e8:	4798      	blx	r3
100101ea:	2800      	cmp	r0, #0
100101ec:	d12e      	bne.n	1001024c <internal_at_ble_service_define+0x3b4>
100101ee:	373c      	adds	r7, #60	; 0x3c
100101f0:	9502      	str	r5, [sp, #8]
100101f2:	e787      	b.n	10010104 <internal_at_ble_service_define+0x26c>
100101f4:	1001a384 	.word	0x1001a384
100101f8:	1001b2d0 	.word	0x1001b2d0
100101fc:	10016609 	.word	0x10016609
10010200:	1000fbcd 	.word	0x1000fbcd
10010204:	100165f7 	.word	0x100165f7
10010208:	100186b2 	.word	0x100186b2
1001020c:	10012059 	.word	0x10012059
10010210:	100186b4 	.word	0x100186b4
10010214:	1000fc99 	.word	0x1000fc99
10010218:	100186b0 	.word	0x100186b0
1001021c:	1000fc41 	.word	0x1000fc41
10010220:	100186ac 	.word	0x100186ac
10010224:	100186ae 	.word	0x100186ae
10010228:	00008002 	.word	0x00008002
1001022c:	100186a8 	.word	0x100186a8
10010230:	100186aa 	.word	0x100186aa
10010234:	10011f4d 	.word	0x10011f4d
10010238:	1001a370 	.word	0x1001a370
1001023c:	1000fd61 	.word	0x1000fd61
10010240:	100120c9 	.word	0x100120c9
10010244:	1000fe19 	.word	0x1000fe19
10010248:	1000fd35 	.word	0x1000fd35
1001024c:	1c04      	adds	r4, r0, #0
1001024e:	1c20      	adds	r0, r4, #0
10010250:	b00b      	add	sp, #44	; 0x2c
10010252:	bdf0      	pop	{r4, r5, r6, r7, pc}

10010254 <initi_gatt_server_module>:
10010254:	2300      	movs	r3, #0
10010256:	4a07      	ldr	r2, [pc, #28]	; (10010274 <initi_gatt_server_module+0x20>)
10010258:	7013      	strb	r3, [r2, #0]
1001025a:	4a07      	ldr	r2, [pc, #28]	; (10010278 <initi_gatt_server_module+0x24>)
1001025c:	6013      	str	r3, [r2, #0]
1001025e:	4a07      	ldr	r2, [pc, #28]	; (1001027c <initi_gatt_server_module+0x28>)
10010260:	6013      	str	r3, [r2, #0]
10010262:	4a07      	ldr	r2, [pc, #28]	; (10010280 <initi_gatt_server_module+0x2c>)
10010264:	6013      	str	r3, [r2, #0]
10010266:	4a07      	ldr	r2, [pc, #28]	; (10010284 <initi_gatt_server_module+0x30>)
10010268:	6013      	str	r3, [r2, #0]
1001026a:	4a07      	ldr	r2, [pc, #28]	; (10010288 <initi_gatt_server_module+0x34>)
1001026c:	6013      	str	r3, [r2, #0]
1001026e:	4a07      	ldr	r2, [pc, #28]	; (1001028c <initi_gatt_server_module+0x38>)
10010270:	6013      	str	r3, [r2, #0]
10010272:	4770      	bx	lr
10010274:	1001a370 	.word	0x1001a370
10010278:	1001a380 	.word	0x1001a380
1001027c:	1001a37c 	.word	0x1001a37c
10010280:	1001a36c 	.word	0x1001a36c
10010284:	1001a378 	.word	0x1001a378
10010288:	1001a374 	.word	0x1001a374
1001028c:	1001a384 	.word	0x1001a384

10010290 <db_init>:
10010290:	4b0a      	ldr	r3, [pc, #40]	; (100102bc <db_init+0x2c>)
10010292:	4a0b      	ldr	r2, [pc, #44]	; (100102c0 <db_init+0x30>)
10010294:	6018      	str	r0, [r3, #0]
10010296:	084b      	lsrs	r3, r1, #1
10010298:	6013      	str	r3, [r2, #0]
1001029a:	4a0a      	ldr	r2, [pc, #40]	; (100102c4 <db_init+0x34>)
1001029c:	18c3      	adds	r3, r0, r3
1001029e:	6013      	str	r3, [r2, #0]
100102a0:	4a09      	ldr	r2, [pc, #36]	; (100102c8 <db_init+0x38>)
100102a2:	1841      	adds	r1, r0, r1
100102a4:	6013      	str	r3, [r2, #0]
100102a6:	2303      	movs	r3, #3
100102a8:	2200      	movs	r2, #0
100102aa:	3103      	adds	r1, #3
100102ac:	4399      	bics	r1, r3
100102ae:	4b07      	ldr	r3, [pc, #28]	; (100102cc <db_init+0x3c>)
100102b0:	3904      	subs	r1, #4
100102b2:	6019      	str	r1, [r3, #0]
100102b4:	4b06      	ldr	r3, [pc, #24]	; (100102d0 <db_init+0x40>)
100102b6:	601a      	str	r2, [r3, #0]
100102b8:	4770      	bx	lr
100102ba:	46c0      	nop			; (mov r8, r8)
100102bc:	1001a384 	.word	0x1001a384
100102c0:	1001a380 	.word	0x1001a380
100102c4:	1001a36c 	.word	0x1001a36c
100102c8:	1001a378 	.word	0x1001a378
100102cc:	1001a374 	.word	0x1001a374
100102d0:	1001a37c 	.word	0x1001a37c

100102d4 <at_ble_primary_service_define>:
100102d4:	b530      	push	{r4, r5, lr}
100102d6:	b085      	sub	sp, #20
100102d8:	ac08      	add	r4, sp, #32
100102da:	cc20      	ldmia	r4!, {r5}
100102dc:	8824      	ldrh	r4, [r4, #0]
100102de:	9500      	str	r5, [sp, #0]
100102e0:	9401      	str	r4, [sp, #4]
100102e2:	2401      	movs	r4, #1
100102e4:	9402      	str	r4, [sp, #8]
100102e6:	4c02      	ldr	r4, [pc, #8]	; (100102f0 <at_ble_primary_service_define+0x1c>)
100102e8:	47a0      	blx	r4
100102ea:	b005      	add	sp, #20
100102ec:	bd30      	pop	{r4, r5, pc}
100102ee:	46c0      	nop			; (mov r8, r8)
100102f0:	1000fe99 	.word	0x1000fe99

100102f4 <at_ble_characteristic_value_set>:
100102f4:	b570      	push	{r4, r5, r6, lr}
100102f6:	4b0b      	ldr	r3, [pc, #44]	; (10010324 <at_ble_characteristic_value_set+0x30>)
100102f8:	1c06      	adds	r6, r0, #0
100102fa:	1c0c      	adds	r4, r1, #0
100102fc:	1c15      	adds	r5, r2, #0
100102fe:	4798      	blx	r3
10010300:	2800      	cmp	r0, #0
10010302:	d008      	beq.n	10010316 <at_ble_characteristic_value_set+0x22>
10010304:	6880      	ldr	r0, [r0, #8]
10010306:	2800      	cmp	r0, #0
10010308:	d005      	beq.n	10010316 <at_ble_characteristic_value_set+0x22>
1001030a:	1c21      	adds	r1, r4, #0
1001030c:	1c2a      	adds	r2, r5, #0
1001030e:	4b06      	ldr	r3, [pc, #24]	; (10010328 <at_ble_characteristic_value_set+0x34>)
10010310:	4798      	blx	r3
10010312:	2000      	movs	r0, #0
10010314:	e004      	b.n	10010320 <at_ble_characteristic_value_set+0x2c>
10010316:	1c30      	adds	r0, r6, #0
10010318:	1c29      	adds	r1, r5, #0
1001031a:	1c22      	adds	r2, r4, #0
1001031c:	4b03      	ldr	r3, [pc, #12]	; (1001032c <at_ble_characteristic_value_set+0x38>)
1001031e:	4798      	blx	r3
10010320:	bd70      	pop	{r4, r5, r6, pc}
10010322:	46c0      	nop			; (mov r8, r8)
10010324:	1000fc01 	.word	0x1000fc01
10010328:	100165f7 	.word	0x100165f7
1001032c:	100120c9 	.word	0x100120c9

10010330 <at_ble_characteristic_value_get>:
10010330:	b570      	push	{r4, r5, r6, lr}
10010332:	4b0c      	ldr	r3, [pc, #48]	; (10010364 <at_ble_characteristic_value_get+0x34>)
10010334:	1c06      	adds	r6, r0, #0
10010336:	1c0c      	adds	r4, r1, #0
10010338:	1c15      	adds	r5, r2, #0
1001033a:	4798      	blx	r3
1001033c:	2800      	cmp	r0, #0
1001033e:	d00b      	beq.n	10010358 <at_ble_characteristic_value_get+0x28>
10010340:	6883      	ldr	r3, [r0, #8]
10010342:	2b00      	cmp	r3, #0
10010344:	d008      	beq.n	10010358 <at_ble_characteristic_value_get+0x28>
10010346:	8883      	ldrh	r3, [r0, #4]
10010348:	802b      	strh	r3, [r5, #0]
1001034a:	8882      	ldrh	r2, [r0, #4]
1001034c:	6881      	ldr	r1, [r0, #8]
1001034e:	4b06      	ldr	r3, [pc, #24]	; (10010368 <at_ble_characteristic_value_get+0x38>)
10010350:	1c20      	adds	r0, r4, #0
10010352:	4798      	blx	r3
10010354:	2000      	movs	r0, #0
10010356:	e004      	b.n	10010362 <at_ble_characteristic_value_get+0x32>
10010358:	1c30      	adds	r0, r6, #0
1001035a:	1c29      	adds	r1, r5, #0
1001035c:	1c22      	adds	r2, r4, #0
1001035e:	4b03      	ldr	r3, [pc, #12]	; (1001036c <at_ble_characteristic_value_get+0x3c>)
10010360:	4798      	blx	r3
10010362:	bd70      	pop	{r4, r5, r6, pc}
10010364:	1000fc01 	.word	0x1000fc01
10010368:	100165f7 	.word	0x100165f7
1001036c:	10012155 	.word	0x10012155

10010370 <at_ble_write_authorize_reply>:
10010370:	b5f0      	push	{r4, r5, r6, r7, lr}
10010372:	b085      	sub	sp, #20
10010374:	1c04      	adds	r4, r0, #0
10010376:	9101      	str	r1, [sp, #4]
10010378:	2900      	cmp	r1, #0
1001037a:	d128      	bne.n	100103ce <at_ble_write_authorize_reply+0x5e>
1001037c:	8843      	ldrh	r3, [r0, #2]
1001037e:	1c27      	adds	r7, r4, #0
10010380:	9300      	str	r3, [sp, #0]
10010382:	1c18      	adds	r0, r3, #0
10010384:	4b16      	ldr	r3, [pc, #88]	; (100103e0 <at_ble_write_authorize_reply+0x70>)
10010386:	4798      	blx	r3
10010388:	3708      	adds	r7, #8
1001038a:	2800      	cmp	r0, #0
1001038c:	d009      	beq.n	100103a2 <at_ble_write_authorize_reply+0x32>
1001038e:	6880      	ldr	r0, [r0, #8]
10010390:	2800      	cmp	r0, #0
10010392:	d006      	beq.n	100103a2 <at_ble_write_authorize_reply+0x32>
10010394:	88a3      	ldrh	r3, [r4, #4]
10010396:	88e2      	ldrh	r2, [r4, #6]
10010398:	18c0      	adds	r0, r0, r3
1001039a:	1c39      	adds	r1, r7, #0
1001039c:	4b11      	ldr	r3, [pc, #68]	; (100103e4 <at_ble_write_authorize_reply+0x74>)
1001039e:	4798      	blx	r3
100103a0:	e015      	b.n	100103ce <at_ble_write_authorize_reply+0x5e>
100103a2:	ab02      	add	r3, sp, #8
100103a4:	1d9e      	adds	r6, r3, #6
100103a6:	2300      	movs	r3, #0
100103a8:	4d0f      	ldr	r5, [pc, #60]	; (100103e8 <at_ble_write_authorize_reply+0x78>)
100103aa:	8033      	strh	r3, [r6, #0]
100103ac:	6829      	ldr	r1, [r5, #0]
100103ae:	1c32      	adds	r2, r6, #0
100103b0:	4b0e      	ldr	r3, [pc, #56]	; (100103ec <at_ble_write_authorize_reply+0x7c>)
100103b2:	9800      	ldr	r0, [sp, #0]
100103b4:	4798      	blx	r3
100103b6:	682b      	ldr	r3, [r5, #0]
100103b8:	88a0      	ldrh	r0, [r4, #4]
100103ba:	88e2      	ldrh	r2, [r4, #6]
100103bc:	1818      	adds	r0, r3, r0
100103be:	1c39      	adds	r1, r7, #0
100103c0:	4b08      	ldr	r3, [pc, #32]	; (100103e4 <at_ble_write_authorize_reply+0x74>)
100103c2:	4798      	blx	r3
100103c4:	8860      	ldrh	r0, [r4, #2]
100103c6:	8832      	ldrh	r2, [r6, #0]
100103c8:	6829      	ldr	r1, [r5, #0]
100103ca:	4b09      	ldr	r3, [pc, #36]	; (100103f0 <at_ble_write_authorize_reply+0x80>)
100103cc:	4798      	blx	r3
100103ce:	8860      	ldrh	r0, [r4, #2]
100103d0:	8821      	ldrh	r1, [r4, #0]
100103d2:	9a01      	ldr	r2, [sp, #4]
100103d4:	4b07      	ldr	r3, [pc, #28]	; (100103f4 <at_ble_write_authorize_reply+0x84>)
100103d6:	4798      	blx	r3
100103d8:	2000      	movs	r0, #0
100103da:	b005      	add	sp, #20
100103dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100103de:	46c0      	nop			; (mov r8, r8)
100103e0:	1000fc01 	.word	0x1000fc01
100103e4:	100165f7 	.word	0x100165f7
100103e8:	100188dc 	.word	0x100188dc
100103ec:	10010331 	.word	0x10010331
100103f0:	100102f5 	.word	0x100102f5
100103f4:	10011bcd 	.word	0x10011bcd

100103f8 <gatts_handle_read_req>:
100103f8:	b538      	push	{r3, r4, r5, lr}
100103fa:	1c0c      	adds	r4, r1, #0
100103fc:	4b07      	ldr	r3, [pc, #28]	; (1001041c <gatts_handle_read_req+0x24>)
100103fe:	4798      	blx	r3
10010400:	8865      	ldrh	r5, [r4, #2]
10010402:	4b07      	ldr	r3, [pc, #28]	; (10010420 <gatts_handle_read_req+0x28>)
10010404:	1c28      	adds	r0, r5, #0
10010406:	4798      	blx	r3
10010408:	7883      	ldrb	r3, [r0, #2]
1001040a:	2026      	movs	r0, #38	; 0x26
1001040c:	07db      	lsls	r3, r3, #31
1001040e:	d404      	bmi.n	1001041a <gatts_handle_read_req+0x22>
10010410:	8820      	ldrh	r0, [r4, #0]
10010412:	1c29      	adds	r1, r5, #0
10010414:	4b03      	ldr	r3, [pc, #12]	; (10010424 <gatts_handle_read_req+0x2c>)
10010416:	4798      	blx	r3
10010418:	203b      	movs	r0, #59	; 0x3b
1001041a:	bd38      	pop	{r3, r4, r5, pc}
1001041c:	10011b11 	.word	0x10011b11
10010420:	1000fc01 	.word	0x1000fc01
10010424:	1000fe69 	.word	0x1000fe69

10010428 <gatts_handle_att_info_req>:
10010428:	b538      	push	{r3, r4, r5, lr}
1001042a:	1c0d      	adds	r5, r1, #0
1001042c:	4b0a      	ldr	r3, [pc, #40]	; (10010458 <gatts_handle_att_info_req+0x30>)
1001042e:	1c14      	adds	r4, r2, #0
10010430:	4798      	blx	r3
10010432:	882d      	ldrh	r5, [r5, #0]
10010434:	4b09      	ldr	r3, [pc, #36]	; (1001045c <gatts_handle_att_info_req+0x34>)
10010436:	1c28      	adds	r0, r5, #0
10010438:	4798      	blx	r3
1001043a:	0a22      	lsrs	r2, r4, #8
1001043c:	1c03      	adds	r3, r0, #0
1001043e:	4c08      	ldr	r4, [pc, #32]	; (10010460 <gatts_handle_att_info_req+0x38>)
10010440:	b291      	uxth	r1, r2
10010442:	2800      	cmp	r0, #0
10010444:	d003      	beq.n	1001044e <gatts_handle_att_info_req+0x26>
10010446:	8882      	ldrh	r2, [r0, #4]
10010448:	2300      	movs	r3, #0
1001044a:	1c28      	adds	r0, r5, #0
1001044c:	e001      	b.n	10010452 <gatts_handle_att_info_req+0x2a>
1001044e:	1c28      	adds	r0, r5, #0
10010450:	2201      	movs	r2, #1
10010452:	47a0      	blx	r4
10010454:	203b      	movs	r0, #59	; 0x3b
10010456:	bd38      	pop	{r3, r4, r5, pc}
10010458:	10011b55 	.word	0x10011b55
1001045c:	1000fc01 	.word	0x1000fc01
10010460:	10011c11 	.word	0x10011c11

10010464 <gatts_handle_write_req>:
10010464:	b510      	push	{r4, lr}
10010466:	1c14      	adds	r4, r2, #0
10010468:	4b07      	ldr	r3, [pc, #28]	; (10010488 <gatts_handle_write_req+0x24>)
1001046a:	4798      	blx	r3
1001046c:	4b07      	ldr	r3, [pc, #28]	; (1001048c <gatts_handle_write_req+0x28>)
1001046e:	8860      	ldrh	r0, [r4, #2]
10010470:	4798      	blx	r3
10010472:	2302      	movs	r3, #2
10010474:	7881      	ldrb	r1, [r0, #2]
10010476:	2022      	movs	r0, #34	; 0x22
10010478:	4019      	ands	r1, r3
1001047a:	d103      	bne.n	10010484 <gatts_handle_write_req+0x20>
1001047c:	1c20      	adds	r0, r4, #0
1001047e:	4b04      	ldr	r3, [pc, #16]	; (10010490 <gatts_handle_write_req+0x2c>)
10010480:	4798      	blx	r3
10010482:	201f      	movs	r0, #31
10010484:	bd10      	pop	{r4, pc}
10010486:	46c0      	nop			; (mov r8, r8)
10010488:	10011b1d 	.word	0x10011b1d
1001048c:	1000fc01 	.word	0x1000fc01
10010490:	10010371 	.word	0x10010371

10010494 <at_ble_notification_send>:
10010494:	b5f0      	push	{r4, r5, r6, r7, lr}
10010496:	4d17      	ldr	r5, [pc, #92]	; (100104f4 <at_ble_notification_send+0x60>)
10010498:	4c17      	ldr	r4, [pc, #92]	; (100104f8 <at_ble_notification_send+0x64>)
1001049a:	682a      	ldr	r2, [r5, #0]
1001049c:	44a5      	add	sp, r4
1001049e:	23d2      	movs	r3, #210	; 0xd2
100104a0:	2a04      	cmp	r2, #4
100104a2:	d822      	bhi.n	100104ea <at_ble_notification_send+0x56>
100104a4:	1c06      	adds	r6, r0, #0
100104a6:	4b15      	ldr	r3, [pc, #84]	; (100104fc <at_ble_notification_send+0x68>)
100104a8:	1c08      	adds	r0, r1, #0
100104aa:	1c0c      	adds	r4, r1, #0
100104ac:	4798      	blx	r3
100104ae:	2800      	cmp	r0, #0
100104b0:	d008      	beq.n	100104c4 <at_ble_notification_send+0x30>
100104b2:	6883      	ldr	r3, [r0, #8]
100104b4:	2b00      	cmp	r3, #0
100104b6:	d005      	beq.n	100104c4 <at_ble_notification_send+0x30>
100104b8:	8882      	ldrh	r2, [r0, #4]
100104ba:	1c21      	adds	r1, r4, #0
100104bc:	9200      	str	r2, [sp, #0]
100104be:	2012      	movs	r0, #18
100104c0:	1c32      	adds	r2, r6, #0
100104c2:	e00c      	b.n	100104de <at_ble_notification_send+0x4a>
100104c4:	270e      	movs	r7, #14
100104c6:	446f      	add	r7, sp
100104c8:	1c39      	adds	r1, r7, #0
100104ca:	aa04      	add	r2, sp, #16
100104cc:	4b0c      	ldr	r3, [pc, #48]	; (10010500 <at_ble_notification_send+0x6c>)
100104ce:	1c20      	adds	r0, r4, #0
100104d0:	4798      	blx	r3
100104d2:	2012      	movs	r0, #18
100104d4:	1c21      	adds	r1, r4, #0
100104d6:	1c32      	adds	r2, r6, #0
100104d8:	883b      	ldrh	r3, [r7, #0]
100104da:	9300      	str	r3, [sp, #0]
100104dc:	ab04      	add	r3, sp, #16
100104de:	4c09      	ldr	r4, [pc, #36]	; (10010504 <at_ble_notification_send+0x70>)
100104e0:	47a0      	blx	r4
100104e2:	682b      	ldr	r3, [r5, #0]
100104e4:	3301      	adds	r3, #1
100104e6:	602b      	str	r3, [r5, #0]
100104e8:	2300      	movs	r3, #0
100104ea:	1c18      	adds	r0, r3, #0
100104ec:	2385      	movs	r3, #133	; 0x85
100104ee:	009b      	lsls	r3, r3, #2
100104f0:	449d      	add	sp, r3
100104f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
100104f4:	1001a410 	.word	0x1001a410
100104f8:	fffffdec 	.word	0xfffffdec
100104fc:	1000fc01 	.word	0x1000fc01
10010500:	10012155 	.word	0x10012155
10010504:	10011c59 	.word	0x10011c59

10010508 <init_l2cc_task_module>:
10010508:	220a      	movs	r2, #10
1001050a:	4b01      	ldr	r3, [pc, #4]	; (10010510 <init_l2cc_task_module+0x8>)
1001050c:	701a      	strb	r2, [r3, #0]
1001050e:	4770      	bx	lr
10010510:	100188d8 	.word	0x100188d8

10010514 <l2cc_data_send_rsp_handler>:
10010514:	b510      	push	{r4, lr}
10010516:	7802      	ldrb	r2, [r0, #0]
10010518:	700a      	strb	r2, [r1, #0]
1001051a:	7883      	ldrb	r3, [r0, #2]
1001051c:	7844      	ldrb	r4, [r0, #1]
1001051e:	021b      	lsls	r3, r3, #8
10010520:	4323      	orrs	r3, r4
10010522:	804b      	strh	r3, [r1, #2]
10010524:	7903      	ldrb	r3, [r0, #4]
10010526:	78c0      	ldrb	r0, [r0, #3]
10010528:	021b      	lsls	r3, r3, #8
1001052a:	4303      	orrs	r3, r0
1001052c:	808b      	strh	r3, [r1, #4]
1001052e:	2a00      	cmp	r2, #0
10010530:	d103      	bne.n	1001053a <l2cc_data_send_rsp_handler+0x26>
10010532:	4a02      	ldr	r2, [pc, #8]	; (1001053c <l2cc_data_send_rsp_handler+0x28>)
10010534:	7813      	ldrb	r3, [r2, #0]
10010536:	3301      	adds	r3, #1
10010538:	7013      	strb	r3, [r2, #0]
1001053a:	bd10      	pop	{r4, pc}
1001053c:	100188d8 	.word	0x100188d8

10010540 <l2cc_data_received_handler>:
10010540:	b508      	push	{r3, lr}
10010542:	1c03      	adds	r3, r0, #0
10010544:	7842      	ldrb	r2, [r0, #1]
10010546:	7800      	ldrb	r0, [r0, #0]
10010548:	0212      	lsls	r2, r2, #8
1001054a:	4302      	orrs	r2, r0
1001054c:	800a      	strh	r2, [r1, #0]
1001054e:	78da      	ldrb	r2, [r3, #3]
10010550:	7898      	ldrb	r0, [r3, #2]
10010552:	0212      	lsls	r2, r2, #8
10010554:	4302      	orrs	r2, r0
10010556:	804a      	strh	r2, [r1, #2]
10010558:	795a      	ldrb	r2, [r3, #5]
1001055a:	7918      	ldrb	r0, [r3, #4]
1001055c:	0212      	lsls	r2, r2, #8
1001055e:	4302      	orrs	r2, r0
10010560:	808a      	strh	r2, [r1, #4]
10010562:	1d88      	adds	r0, r1, #6
10010564:	1d99      	adds	r1, r3, #6
10010566:	4b01      	ldr	r3, [pc, #4]	; (1001056c <l2cc_data_received_handler+0x2c>)
10010568:	4798      	blx	r3
1001056a:	bd08      	pop	{r3, pc}
1001056c:	100165f7 	.word	0x100165f7

10010570 <at_ble_authenticate>:
10010570:	b5f0      	push	{r4, r5, r6, r7, lr}
10010572:	1c0c      	adds	r4, r1, #0
10010574:	211f      	movs	r1, #31
10010576:	b08b      	sub	sp, #44	; 0x2c
10010578:	9307      	str	r3, [sp, #28]
1001057a:	ab02      	add	r3, sp, #8
1001057c:	18c9      	adds	r1, r1, r3
1001057e:	230f      	movs	r3, #15
10010580:	700b      	strb	r3, [r1, #0]
10010582:	4b40      	ldr	r3, [pc, #256]	; (10010684 <at_ble_authenticate+0x114>)
10010584:	1c05      	adds	r5, r0, #0
10010586:	1c16      	adds	r6, r2, #0
10010588:	4798      	blx	r3
1001058a:	1c07      	adds	r7, r0, #0
1001058c:	2001      	movs	r0, #1
1001058e:	2f07      	cmp	r7, #7
10010590:	d875      	bhi.n	1001067e <at_ble_authenticate+0x10e>
10010592:	2c00      	cmp	r4, #0
10010594:	d113      	bne.n	100105be <at_ble_authenticate+0x4e>
10010596:	2312      	movs	r3, #18
10010598:	435f      	muls	r7, r3
1001059a:	4b3b      	ldr	r3, [pc, #236]	; (10010688 <at_ble_authenticate+0x118>)
1001059c:	5cfb      	ldrb	r3, [r7, r3]
1001059e:	4283      	cmp	r3, r0
100105a0:	d001      	beq.n	100105a6 <at_ble_authenticate+0x36>
100105a2:	20cf      	movs	r0, #207	; 0xcf
100105a4:	e06b      	b.n	1001067e <at_ble_authenticate+0x10e>
100105a6:	9504      	str	r5, [sp, #16]
100105a8:	9400      	str	r4, [sp, #0]
100105aa:	9401      	str	r4, [sp, #4]
100105ac:	9402      	str	r4, [sp, #8]
100105ae:	9403      	str	r4, [sp, #12]
100105b0:	1c20      	adds	r0, r4, #0
100105b2:	1c21      	adds	r1, r4, #0
100105b4:	1c22      	adds	r2, r4, #0
100105b6:	1c23      	adds	r3, r4, #0
100105b8:	4d34      	ldr	r5, [pc, #208]	; (1001068c <at_ble_authenticate+0x11c>)
100105ba:	47a8      	blx	r5
100105bc:	e05e      	b.n	1001067c <at_ble_authenticate+0x10c>
100105be:	7922      	ldrb	r2, [r4, #4]
100105c0:	2a06      	cmp	r2, #6
100105c2:	d9ee      	bls.n	100105a2 <at_ble_authenticate+0x32>
100105c4:	7963      	ldrb	r3, [r4, #5]
100105c6:	2b10      	cmp	r3, #16
100105c8:	d8eb      	bhi.n	100105a2 <at_ble_authenticate+0x32>
100105ca:	429a      	cmp	r2, r3
100105cc:	d8e9      	bhi.n	100105a2 <at_ble_authenticate+0x32>
100105ce:	7a23      	ldrb	r3, [r4, #8]
100105d0:	2b04      	cmp	r3, #4
100105d2:	d8e6      	bhi.n	100105a2 <at_ble_authenticate+0x32>
100105d4:	79a3      	ldrb	r3, [r4, #6]
100105d6:	2b07      	cmp	r3, #7
100105d8:	d8e3      	bhi.n	100105a2 <at_ble_authenticate+0x32>
100105da:	79e3      	ldrb	r3, [r4, #7]
100105dc:	2b07      	cmp	r3, #7
100105de:	d8e0      	bhi.n	100105a2 <at_ble_authenticate+0x32>
100105e0:	78a3      	ldrb	r3, [r4, #2]
100105e2:	2b00      	cmp	r3, #0
100105e4:	d006      	beq.n	100105f4 <at_ble_authenticate+0x84>
100105e6:	2e00      	cmp	r6, #0
100105e8:	d0db      	beq.n	100105a2 <at_ble_authenticate+0x32>
100105ea:	4829      	ldr	r0, [pc, #164]	; (10010690 <at_ble_authenticate+0x120>)
100105ec:	1c31      	adds	r1, r6, #0
100105ee:	221c      	movs	r2, #28
100105f0:	4b28      	ldr	r3, [pc, #160]	; (10010694 <at_ble_authenticate+0x124>)
100105f2:	4798      	blx	r3
100105f4:	9b07      	ldr	r3, [sp, #28]
100105f6:	2b00      	cmp	r3, #0
100105f8:	d005      	beq.n	10010606 <at_ble_authenticate+0x96>
100105fa:	4827      	ldr	r0, [pc, #156]	; (10010698 <at_ble_authenticate+0x128>)
100105fc:	1c19      	adds	r1, r3, #0
100105fe:	309a      	adds	r0, #154	; 0x9a
10010600:	2210      	movs	r2, #16
10010602:	4b24      	ldr	r3, [pc, #144]	; (10010694 <at_ble_authenticate+0x124>)
10010604:	4798      	blx	r3
10010606:	7863      	ldrb	r3, [r4, #1]
10010608:	78a2      	ldrb	r2, [r4, #2]
1001060a:	009b      	lsls	r3, r3, #2
1001060c:	4313      	orrs	r3, r2
1001060e:	2212      	movs	r2, #18
10010610:	4357      	muls	r7, r2
10010612:	4a1d      	ldr	r2, [pc, #116]	; (10010688 <at_ble_authenticate+0x118>)
10010614:	b2db      	uxtb	r3, r3
10010616:	5cba      	ldrb	r2, [r7, r2]
10010618:	2a00      	cmp	r2, #0
1001061a:	d116      	bne.n	1001064a <at_ble_authenticate+0xda>
1001061c:	79a0      	ldrb	r0, [r4, #6]
1001061e:	0742      	lsls	r2, r0, #29
10010620:	d502      	bpl.n	10010628 <at_ble_authenticate+0xb8>
10010622:	9a07      	ldr	r2, [sp, #28]
10010624:	2a00      	cmp	r2, #0
10010626:	d0bc      	beq.n	100105a2 <at_ble_authenticate+0x32>
10010628:	07c2      	lsls	r2, r0, #31
1001062a:	d501      	bpl.n	10010630 <at_ble_authenticate+0xc0>
1001062c:	2e00      	cmp	r6, #0
1001062e:	d0b8      	beq.n	100105a2 <at_ble_authenticate+0x32>
10010630:	7966      	ldrb	r6, [r4, #5]
10010632:	7821      	ldrb	r1, [r4, #0]
10010634:	78e2      	ldrb	r2, [r4, #3]
10010636:	9600      	str	r6, [sp, #0]
10010638:	9001      	str	r0, [sp, #4]
1001063a:	79e0      	ldrb	r0, [r4, #7]
1001063c:	9002      	str	r0, [sp, #8]
1001063e:	7a20      	ldrb	r0, [r4, #8]
10010640:	4c16      	ldr	r4, [pc, #88]	; (1001069c <at_ble_authenticate+0x12c>)
10010642:	9003      	str	r0, [sp, #12]
10010644:	1c28      	adds	r0, r5, #0
10010646:	47a0      	blx	r4
10010648:	e018      	b.n	1001067c <at_ble_authenticate+0x10c>
1001064a:	2a01      	cmp	r2, #1
1001064c:	d1a9      	bne.n	100105a2 <at_ble_authenticate+0x32>
1001064e:	79e0      	ldrb	r0, [r4, #7]
10010650:	0742      	lsls	r2, r0, #29
10010652:	d502      	bpl.n	1001065a <at_ble_authenticate+0xea>
10010654:	9a07      	ldr	r2, [sp, #28]
10010656:	2a00      	cmp	r2, #0
10010658:	d0a3      	beq.n	100105a2 <at_ble_authenticate+0x32>
1001065a:	07c2      	lsls	r2, r0, #31
1001065c:	d501      	bpl.n	10010662 <at_ble_authenticate+0xf2>
1001065e:	2e00      	cmp	r6, #0
10010660:	d09f      	beq.n	100105a2 <at_ble_authenticate+0x32>
10010662:	7966      	ldrb	r6, [r4, #5]
10010664:	7821      	ldrb	r1, [r4, #0]
10010666:	78e2      	ldrb	r2, [r4, #3]
10010668:	9600      	str	r6, [sp, #0]
1001066a:	79a6      	ldrb	r6, [r4, #6]
1001066c:	9002      	str	r0, [sp, #8]
1001066e:	9601      	str	r6, [sp, #4]
10010670:	7a20      	ldrb	r0, [r4, #8]
10010672:	9504      	str	r5, [sp, #16]
10010674:	9003      	str	r0, [sp, #12]
10010676:	4c05      	ldr	r4, [pc, #20]	; (1001068c <at_ble_authenticate+0x11c>)
10010678:	2001      	movs	r0, #1
1001067a:	47a0      	blx	r4
1001067c:	2000      	movs	r0, #0
1001067e:	b00b      	add	sp, #44	; 0x2c
10010680:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010682:	46c0      	nop			; (mov r8, r8)
10010684:	10010a71 	.word	0x10010a71
10010688:	1001b2d2 	.word	0x1001b2d2
1001068c:	10010fe1 	.word	0x10010fe1
10010690:	1001b3e0 	.word	0x1001b3e0
10010694:	100165f7 	.word	0x100165f7
10010698:	1001b362 	.word	0x1001b362
1001069c:	10010dc1 	.word	0x10010dc1

100106a0 <at_ble_pair_key_reply>:
100106a0:	b5f0      	push	{r4, r5, r6, r7, lr}
100106a2:	b085      	sub	sp, #20
100106a4:	1c05      	adds	r5, r0, #0
100106a6:	1c0c      	adds	r4, r1, #0
100106a8:	1c16      	adds	r6, r2, #0
100106aa:	2100      	movs	r1, #0
100106ac:	4668      	mov	r0, sp
100106ae:	2210      	movs	r2, #16
100106b0:	4b18      	ldr	r3, [pc, #96]	; (10010714 <at_ble_pair_key_reply+0x74>)
100106b2:	4798      	blx	r3
100106b4:	2101      	movs	r1, #1
100106b6:	2e00      	cmp	r6, #0
100106b8:	d101      	bne.n	100106be <at_ble_pair_key_reply+0x1e>
100106ba:	1c31      	adds	r1, r6, #0
100106bc:	466e      	mov	r6, sp
100106be:	2c00      	cmp	r4, #0
100106c0:	d116      	bne.n	100106f0 <at_ble_pair_key_reply+0x50>
100106c2:	2701      	movs	r7, #1
100106c4:	1c23      	adds	r3, r4, #0
100106c6:	1d70      	adds	r0, r6, #5
100106c8:	3e01      	subs	r6, #1
100106ca:	7802      	ldrb	r2, [r0, #0]
100106cc:	3801      	subs	r0, #1
100106ce:	3a30      	subs	r2, #48	; 0x30
100106d0:	437a      	muls	r2, r7
100106d2:	189b      	adds	r3, r3, r2
100106d4:	220a      	movs	r2, #10
100106d6:	4357      	muls	r7, r2
100106d8:	42b0      	cmp	r0, r6
100106da:	d1f6      	bne.n	100106ca <at_ble_pair_key_reply+0x2a>
100106dc:	466a      	mov	r2, sp
100106de:	4668      	mov	r0, sp
100106e0:	7013      	strb	r3, [r2, #0]
100106e2:	0a1a      	lsrs	r2, r3, #8
100106e4:	7042      	strb	r2, [r0, #1]
100106e6:	0c1a      	lsrs	r2, r3, #16
100106e8:	0e1b      	lsrs	r3, r3, #24
100106ea:	7082      	strb	r2, [r0, #2]
100106ec:	70c3      	strb	r3, [r0, #3]
100106ee:	e009      	b.n	10010704 <at_ble_pair_key_reply+0x64>
100106f0:	20cf      	movs	r0, #207	; 0xcf
100106f2:	2c01      	cmp	r4, #1
100106f4:	d10c      	bne.n	10010710 <at_ble_pair_key_reply+0x70>
100106f6:	2300      	movs	r3, #0
100106f8:	4668      	mov	r0, sp
100106fa:	5cf2      	ldrb	r2, [r6, r3]
100106fc:	54c2      	strb	r2, [r0, r3]
100106fe:	3301      	adds	r3, #1
10010700:	2b10      	cmp	r3, #16
10010702:	d1f9      	bne.n	100106f8 <at_ble_pair_key_reply+0x58>
10010704:	2004      	movs	r0, #4
10010706:	466a      	mov	r2, sp
10010708:	1c2b      	adds	r3, r5, #0
1001070a:	4c03      	ldr	r4, [pc, #12]	; (10010718 <at_ble_pair_key_reply+0x78>)
1001070c:	47a0      	blx	r4
1001070e:	2000      	movs	r0, #0
10010710:	b005      	add	sp, #20
10010712:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010714:	10016609 	.word	0x10016609
10010718:	1001105d 	.word	0x1001105d

1001071c <at_ble_send_slave_sec_request>:
1001071c:	b570      	push	{r4, r5, r6, lr}
1001071e:	4b0c      	ldr	r3, [pc, #48]	; (10010750 <at_ble_send_slave_sec_request+0x34>)
10010720:	1c0e      	adds	r6, r1, #0
10010722:	2100      	movs	r1, #0
10010724:	1c05      	adds	r5, r0, #0
10010726:	1c14      	adds	r4, r2, #0
10010728:	4798      	blx	r3
1001072a:	2301      	movs	r3, #1
1001072c:	2807      	cmp	r0, #7
1001072e:	d80d      	bhi.n	1001074c <at_ble_send_slave_sec_request+0x30>
10010730:	3311      	adds	r3, #17
10010732:	4358      	muls	r0, r3
10010734:	4b07      	ldr	r3, [pc, #28]	; (10010754 <at_ble_send_slave_sec_request+0x38>)
10010736:	5cc2      	ldrb	r2, [r0, r3]
10010738:	23e0      	movs	r3, #224	; 0xe0
1001073a:	2a01      	cmp	r2, #1
1001073c:	d106      	bne.n	1001074c <at_ble_send_slave_sec_request+0x30>
1001073e:	00b1      	lsls	r1, r6, #2
10010740:	430c      	orrs	r4, r1
10010742:	4b05      	ldr	r3, [pc, #20]	; (10010758 <at_ble_send_slave_sec_request+0x3c>)
10010744:	b2e1      	uxtb	r1, r4
10010746:	1c28      	adds	r0, r5, #0
10010748:	4798      	blx	r3
1001074a:	2300      	movs	r3, #0
1001074c:	1c18      	adds	r0, r3, #0
1001074e:	bd70      	pop	{r4, r5, r6, pc}
10010750:	10010a71 	.word	0x10010a71
10010754:	1001b2d2 	.word	0x1001b2d2
10010758:	100110ad 	.word	0x100110ad

1001075c <at_ble_encryption_start>:
1001075c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001075e:	23cf      	movs	r3, #207	; 0xcf
10010760:	2900      	cmp	r1, #0
10010762:	d02b      	beq.n	100107bc <at_ble_encryption_start+0x60>
10010764:	2a05      	cmp	r2, #5
10010766:	d829      	bhi.n	100107bc <at_ble_encryption_start+0x60>
10010768:	2701      	movs	r7, #1
1001076a:	1c3d      	adds	r5, r7, #0
1001076c:	2433      	movs	r4, #51	; 0x33
1001076e:	4095      	lsls	r5, r2
10010770:	4225      	tst	r5, r4
10010772:	d023      	beq.n	100107bc <at_ble_encryption_start+0x60>
10010774:	7e8c      	ldrb	r4, [r1, #26]
10010776:	3c07      	subs	r4, #7
10010778:	2c09      	cmp	r4, #9
1001077a:	d81f      	bhi.n	100107bc <at_ble_encryption_start+0x60>
1001077c:	4b10      	ldr	r3, [pc, #64]	; (100107c0 <at_ble_encryption_start+0x64>)
1001077e:	1c0c      	adds	r4, r1, #0
10010780:	2100      	movs	r1, #0
10010782:	1c15      	adds	r5, r2, #0
10010784:	1c06      	adds	r6, r0, #0
10010786:	4798      	blx	r3
10010788:	1c3b      	adds	r3, r7, #0
1001078a:	2807      	cmp	r0, #7
1001078c:	d816      	bhi.n	100107bc <at_ble_encryption_start+0x60>
1001078e:	2312      	movs	r3, #18
10010790:	4358      	muls	r0, r3
10010792:	4b0c      	ldr	r3, [pc, #48]	; (100107c4 <at_ble_encryption_start+0x68>)
10010794:	5cc7      	ldrb	r7, [r0, r3]
10010796:	23e0      	movs	r3, #224	; 0xe0
10010798:	2f00      	cmp	r7, #0
1001079a:	d10f      	bne.n	100107bc <at_ble_encryption_start+0x60>
1001079c:	1c21      	adds	r1, r4, #0
1001079e:	221c      	movs	r2, #28
100107a0:	4b09      	ldr	r3, [pc, #36]	; (100107c8 <at_ble_encryption_start+0x6c>)
100107a2:	480a      	ldr	r0, [pc, #40]	; (100107cc <at_ble_encryption_start+0x70>)
100107a4:	4798      	blx	r3
100107a6:	1c23      	adds	r3, r4, #0
100107a8:	7ea1      	ldrb	r1, [r4, #26]
100107aa:	8a22      	ldrh	r2, [r4, #16]
100107ac:	3312      	adds	r3, #18
100107ae:	9100      	str	r1, [sp, #0]
100107b0:	9501      	str	r5, [sp, #4]
100107b2:	1c21      	adds	r1, r4, #0
100107b4:	1c30      	adds	r0, r6, #0
100107b6:	4c06      	ldr	r4, [pc, #24]	; (100107d0 <at_ble_encryption_start+0x74>)
100107b8:	47a0      	blx	r4
100107ba:	1c3b      	adds	r3, r7, #0
100107bc:	1c18      	adds	r0, r3, #0
100107be:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100107c0:	10010a71 	.word	0x10010a71
100107c4:	1001b2d2 	.word	0x1001b2d2
100107c8:	100165f7 	.word	0x100165f7
100107cc:	1001b3e0 	.word	0x1001b3e0
100107d0:	100110ed 	.word	0x100110ed

100107d4 <at_ble_encryption_request_reply>:
100107d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
100107d6:	24cf      	movs	r4, #207	; 0xcf
100107d8:	2b00      	cmp	r3, #0
100107da:	d011      	beq.n	10010800 <at_ble_encryption_request_reply+0x2c>
100107dc:	2a00      	cmp	r2, #0
100107de:	d00a      	beq.n	100107f6 <at_ble_encryption_request_reply+0x22>
100107e0:	2905      	cmp	r1, #5
100107e2:	d80d      	bhi.n	10010800 <at_ble_encryption_request_reply+0x2c>
100107e4:	2501      	movs	r5, #1
100107e6:	2633      	movs	r6, #51	; 0x33
100107e8:	408d      	lsls	r5, r1
100107ea:	4235      	tst	r5, r6
100107ec:	d008      	beq.n	10010800 <at_ble_encryption_request_reply+0x2c>
100107ee:	7e9d      	ldrb	r5, [r3, #26]
100107f0:	3d07      	subs	r5, #7
100107f2:	2d09      	cmp	r5, #9
100107f4:	d804      	bhi.n	10010800 <at_ble_encryption_request_reply+0x2c>
100107f6:	7e9c      	ldrb	r4, [r3, #26]
100107f8:	9400      	str	r4, [sp, #0]
100107fa:	4c02      	ldr	r4, [pc, #8]	; (10010804 <at_ble_encryption_request_reply+0x30>)
100107fc:	47a0      	blx	r4
100107fe:	2400      	movs	r4, #0
10010800:	1c20      	adds	r0, r4, #0
10010802:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
10010804:	100111a9 	.word	0x100111a9

10010808 <rx_callback>:
10010808:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001080a:	8883      	ldrh	r3, [r0, #4]
1001080c:	1c01      	adds	r1, r0, #0
1001080e:	9301      	str	r3, [sp, #4]
10010810:	88c5      	ldrh	r5, [r0, #6]
10010812:	8806      	ldrh	r6, [r0, #0]
10010814:	2d00      	cmp	r5, #0
10010816:	d10f      	bne.n	10010838 <rx_callback+0x30>
10010818:	1c19      	adds	r1, r3, #0
1001081a:	1c30      	adds	r0, r6, #0
1001081c:	4b19      	ldr	r3, [pc, #100]	; (10010884 <rx_callback+0x7c>)
1001081e:	1c2a      	adds	r2, r5, #0
10010820:	4798      	blx	r3
10010822:	1e03      	subs	r3, r0, #0
10010824:	d105      	bne.n	10010832 <rx_callback+0x2a>
10010826:	1c30      	adds	r0, r6, #0
10010828:	9901      	ldr	r1, [sp, #4]
1001082a:	1c1a      	adds	r2, r3, #0
1001082c:	4c16      	ldr	r4, [pc, #88]	; (10010888 <rx_callback+0x80>)
1001082e:	47a0      	blx	r4
10010830:	e027      	b.n	10010882 <rx_callback+0x7a>
10010832:	4b16      	ldr	r3, [pc, #88]	; (1001088c <rx_callback+0x84>)
10010834:	4798      	blx	r3
10010836:	e024      	b.n	10010882 <rx_callback+0x7a>
10010838:	4c15      	ldr	r4, [pc, #84]	; (10010890 <rx_callback+0x88>)
1001083a:	4a16      	ldr	r2, [pc, #88]	; (10010894 <rx_callback+0x8c>)
1001083c:	6823      	ldr	r3, [r4, #0]
1001083e:	6812      	ldr	r2, [r2, #0]
10010840:	18eb      	adds	r3, r5, r3
10010842:	4293      	cmp	r3, r2
10010844:	d901      	bls.n	1001084a <rx_callback+0x42>
10010846:	2300      	movs	r3, #0
10010848:	6023      	str	r3, [r4, #0]
1001084a:	4f13      	ldr	r7, [pc, #76]	; (10010898 <rx_callback+0x90>)
1001084c:	6822      	ldr	r2, [r4, #0]
1001084e:	683b      	ldr	r3, [r7, #0]
10010850:	3108      	adds	r1, #8
10010852:	1898      	adds	r0, r3, r2
10010854:	1c2a      	adds	r2, r5, #0
10010856:	4b11      	ldr	r3, [pc, #68]	; (1001089c <rx_callback+0x94>)
10010858:	4798      	blx	r3
1001085a:	683b      	ldr	r3, [r7, #0]
1001085c:	6822      	ldr	r2, [r4, #0]
1001085e:	1c30      	adds	r0, r6, #0
10010860:	189a      	adds	r2, r3, r2
10010862:	9901      	ldr	r1, [sp, #4]
10010864:	4b07      	ldr	r3, [pc, #28]	; (10010884 <rx_callback+0x7c>)
10010866:	4798      	blx	r3
10010868:	2800      	cmp	r0, #0
1001086a:	d1e2      	bne.n	10010832 <rx_callback+0x2a>
1001086c:	6823      	ldr	r3, [r4, #0]
1001086e:	683a      	ldr	r2, [r7, #0]
10010870:	1c30      	adds	r0, r6, #0
10010872:	18d2      	adds	r2, r2, r3
10010874:	9901      	ldr	r1, [sp, #4]
10010876:	1c2b      	adds	r3, r5, #0
10010878:	4e03      	ldr	r6, [pc, #12]	; (10010888 <rx_callback+0x80>)
1001087a:	47b0      	blx	r6
1001087c:	6823      	ldr	r3, [r4, #0]
1001087e:	18ed      	adds	r5, r5, r3
10010880:	6025      	str	r5, [r4, #0]
10010882:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10010884:	1000ee9d 	.word	0x1000ee9d
10010888:	1000ee15 	.word	0x1000ee15
1001088c:	1000e8a1 	.word	0x1000e8a1
10010890:	1001b43c 	.word	0x1001b43c
10010894:	1001a38c 	.word	0x1001a38c
10010898:	1001a388 	.word	0x1001a388
1001089c:	100165f7 	.word	0x100165f7

100108a0 <interface_send>:
100108a0:	b508      	push	{r3, lr}
100108a2:	4b02      	ldr	r3, [pc, #8]	; (100108ac <interface_send+0xc>)
100108a4:	4798      	blx	r3
100108a6:	2000      	movs	r0, #0
100108a8:	bd08      	pop	{r3, pc}
100108aa:	46c0      	nop			; (mov r8, r8)
100108ac:	1000e599 	.word	0x1000e599

100108b0 <interface_init>:
100108b0:	2280      	movs	r2, #128	; 0x80
100108b2:	b510      	push	{r4, lr}
100108b4:	2100      	movs	r1, #0
100108b6:	1c04      	adds	r4, r0, #0
100108b8:	0092      	lsls	r2, r2, #2
100108ba:	4b08      	ldr	r3, [pc, #32]	; (100108dc <interface_init+0x2c>)
100108bc:	4808      	ldr	r0, [pc, #32]	; (100108e0 <interface_init+0x30>)
100108be:	4798      	blx	r3
100108c0:	2200      	movs	r2, #0
100108c2:	4b08      	ldr	r3, [pc, #32]	; (100108e4 <interface_init+0x34>)
100108c4:	601a      	str	r2, [r3, #0]
100108c6:	4a08      	ldr	r2, [pc, #32]	; (100108e8 <interface_init+0x38>)
100108c8:	4b08      	ldr	r3, [pc, #32]	; (100108ec <interface_init+0x3c>)
100108ca:	601a      	str	r2, [r3, #0]
100108cc:	4b08      	ldr	r3, [pc, #32]	; (100108f0 <interface_init+0x40>)
100108ce:	6922      	ldr	r2, [r4, #16]
100108d0:	601a      	str	r2, [r3, #0]
100108d2:	6962      	ldr	r2, [r4, #20]
100108d4:	4b07      	ldr	r3, [pc, #28]	; (100108f4 <interface_init+0x44>)
100108d6:	601a      	str	r2, [r3, #0]
100108d8:	bd10      	pop	{r4, pc}
100108da:	46c0      	nop			; (mov r8, r8)
100108dc:	10016609 	.word	0x10016609
100108e0:	1001b640 	.word	0x1001b640
100108e4:	1001b43c 	.word	0x1001b43c
100108e8:	1001b440 	.word	0x1001b440
100108ec:	100188dc 	.word	0x100188dc
100108f0:	1001a388 	.word	0x1001a388
100108f4:	1001a38c 	.word	0x1001a38c

100108f8 <platform_cmd_cmpl_signal>:
100108f8:	2201      	movs	r2, #1
100108fa:	4b01      	ldr	r3, [pc, #4]	; (10010900 <platform_cmd_cmpl_signal+0x8>)
100108fc:	601a      	str	r2, [r3, #0]
100108fe:	4770      	bx	lr
10010900:	1001a390 	.word	0x1001a390

10010904 <platform_cmd_cmpl_wait>:
10010904:	b510      	push	{r4, lr}
10010906:	1c04      	adds	r4, r0, #0
10010908:	4b07      	ldr	r3, [pc, #28]	; (10010928 <platform_cmd_cmpl_wait+0x24>)
1001090a:	681a      	ldr	r2, [r3, #0]
1001090c:	2a01      	cmp	r2, #1
1001090e:	d003      	beq.n	10010918 <platform_cmd_cmpl_wait+0x14>
10010910:	4b06      	ldr	r3, [pc, #24]	; (1001092c <platform_cmd_cmpl_wait+0x28>)
10010912:	2000      	movs	r0, #0
10010914:	4798      	blx	r3
10010916:	e7f7      	b.n	10010908 <platform_cmd_cmpl_wait+0x4>
10010918:	6819      	ldr	r1, [r3, #0]
1001091a:	2901      	cmp	r1, #1
1001091c:	d102      	bne.n	10010924 <platform_cmd_cmpl_wait+0x20>
1001091e:	2200      	movs	r2, #0
10010920:	601a      	str	r2, [r3, #0]
10010922:	e000      	b.n	10010926 <platform_cmd_cmpl_wait+0x22>
10010924:	7022      	strb	r2, [r4, #0]
10010926:	bd10      	pop	{r4, pc}
10010928:	1001a390 	.word	0x1001a390
1001092c:	1000e629 	.word	0x1000e629

10010930 <start_timer>:
10010930:	4770      	bx	lr

10010932 <stop_timer>:
10010932:	4770      	bx	lr

10010934 <dbg_le_set_bd_addr_req_handler>:
10010934:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010936:	466b      	mov	r3, sp
10010938:	1dde      	adds	r6, r3, #7
1001093a:	2300      	movs	r3, #0
1001093c:	7033      	strb	r3, [r6, #0]
1001093e:	230f      	movs	r3, #15
10010940:	4c13      	ldr	r4, [pc, #76]	; (10010990 <dbg_le_set_bd_addr_req_handler+0x5c>)
10010942:	2703      	movs	r7, #3
10010944:	7023      	strb	r3, [r4, #0]
10010946:	2300      	movs	r3, #0
10010948:	70e3      	strb	r3, [r4, #3]
1001094a:	4b12      	ldr	r3, [pc, #72]	; (10010994 <dbg_le_set_bd_addr_req_handler+0x60>)
1001094c:	1c01      	adds	r1, r0, #0
1001094e:	881a      	ldrh	r2, [r3, #0]
10010950:	881b      	ldrh	r3, [r3, #0]
10010952:	7122      	strb	r2, [r4, #4]
10010954:	0a1b      	lsrs	r3, r3, #8
10010956:	2206      	movs	r2, #6
10010958:	7163      	strb	r3, [r4, #5]
1001095a:	480f      	ldr	r0, [pc, #60]	; (10010998 <dbg_le_set_bd_addr_req_handler+0x64>)
1001095c:	4b0f      	ldr	r3, [pc, #60]	; (1001099c <dbg_le_set_bd_addr_req_handler+0x68>)
1001095e:	7067      	strb	r7, [r4, #1]
10010960:	70a7      	strb	r7, [r4, #2]
10010962:	4798      	blx	r3
10010964:	4d0e      	ldr	r5, [pc, #56]	; (100109a0 <dbg_le_set_bd_addr_req_handler+0x6c>)
10010966:	4b0f      	ldr	r3, [pc, #60]	; (100109a4 <dbg_le_set_bd_addr_req_handler+0x70>)
10010968:	210e      	movs	r1, #14
1001096a:	802b      	strh	r3, [r5, #0]
1001096c:	2306      	movs	r3, #6
1001096e:	71a3      	strb	r3, [r4, #6]
10010970:	2300      	movs	r3, #0
10010972:	1c20      	adds	r0, r4, #0
10010974:	71e3      	strb	r3, [r4, #7]
10010976:	4b0c      	ldr	r3, [pc, #48]	; (100109a8 <dbg_le_set_bd_addr_req_handler+0x74>)
10010978:	80af      	strh	r7, [r5, #4]
1001097a:	4798      	blx	r3
1001097c:	1c30      	adds	r0, r6, #0
1001097e:	4b0b      	ldr	r3, [pc, #44]	; (100109ac <dbg_le_set_bd_addr_req_handler+0x78>)
10010980:	4798      	blx	r3
10010982:	7833      	ldrb	r3, [r6, #0]
10010984:	20e2      	movs	r0, #226	; 0xe2
10010986:	2b00      	cmp	r3, #0
10010988:	d101      	bne.n	1001098e <dbg_le_set_bd_addr_req_handler+0x5a>
1001098a:	68ab      	ldr	r3, [r5, #8]
1001098c:	7818      	ldrb	r0, [r3, #0]
1001098e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10010990:	1001b640 	.word	0x1001b640
10010994:	1001b2d0 	.word	0x1001b2d0
10010998:	1001b648 	.word	0x1001b648
1001099c:	100165f7 	.word	0x100165f7
100109a0:	1001b2c4 	.word	0x1001b2c4
100109a4:	00000329 	.word	0x00000329
100109a8:	100108a1 	.word	0x100108a1
100109ac:	10010905 	.word	0x10010905

100109b0 <gapc_get_dev_info_cfm.constprop.1>:
100109b0:	b538      	push	{r3, r4, r5, lr}
100109b2:	230b      	movs	r3, #11
100109b4:	4c27      	ldr	r4, [pc, #156]	; (10010a54 <gapc_get_dev_info_cfm.constprop.1+0xa4>)
100109b6:	7023      	strb	r3, [r4, #0]
100109b8:	3303      	adds	r3, #3
100109ba:	7063      	strb	r3, [r4, #1]
100109bc:	3329      	adds	r3, #41	; 0x29
100109be:	70a3      	strb	r3, [r4, #2]
100109c0:	4b25      	ldr	r3, [pc, #148]	; (10010a58 <gapc_get_dev_info_cfm.constprop.1+0xa8>)
100109c2:	70e1      	strb	r1, [r4, #3]
100109c4:	881a      	ldrh	r2, [r3, #0]
100109c6:	881b      	ldrh	r3, [r3, #0]
100109c8:	7122      	strb	r2, [r4, #4]
100109ca:	0a1b      	lsrs	r3, r3, #8
100109cc:	7163      	strb	r3, [r4, #5]
100109ce:	2300      	movs	r3, #0
100109d0:	7220      	strb	r0, [r4, #8]
100109d2:	7263      	strb	r3, [r4, #9]
100109d4:	2801      	cmp	r0, #1
100109d6:	d02b      	beq.n	10010a30 <gapc_get_dev_info_cfm.constprop.1+0x80>
100109d8:	4298      	cmp	r0, r3
100109da:	d01b      	beq.n	10010a14 <gapc_get_dev_info_cfm.constprop.1+0x64>
100109dc:	2802      	cmp	r0, #2
100109de:	d12f      	bne.n	10010a40 <gapc_get_dev_info_cfm.constprop.1+0x90>
100109e0:	4b1e      	ldr	r3, [pc, #120]	; (10010a5c <gapc_get_dev_info_cfm.constprop.1+0xac>)
100109e2:	2112      	movs	r1, #18
100109e4:	1c1a      	adds	r2, r3, #0
100109e6:	32ce      	adds	r2, #206	; 0xce
100109e8:	8812      	ldrh	r2, [r2, #0]
100109ea:	72a2      	strb	r2, [r4, #10]
100109ec:	0a12      	lsrs	r2, r2, #8
100109ee:	72e2      	strb	r2, [r4, #11]
100109f0:	1c1a      	adds	r2, r3, #0
100109f2:	32d0      	adds	r2, #208	; 0xd0
100109f4:	8812      	ldrh	r2, [r2, #0]
100109f6:	7322      	strb	r2, [r4, #12]
100109f8:	0a12      	lsrs	r2, r2, #8
100109fa:	7362      	strb	r2, [r4, #13]
100109fc:	1c1a      	adds	r2, r3, #0
100109fe:	32d2      	adds	r2, #210	; 0xd2
10010a00:	8812      	ldrh	r2, [r2, #0]
10010a02:	33d4      	adds	r3, #212	; 0xd4
10010a04:	73a2      	strb	r2, [r4, #14]
10010a06:	0a12      	lsrs	r2, r2, #8
10010a08:	73e2      	strb	r2, [r4, #15]
10010a0a:	881b      	ldrh	r3, [r3, #0]
10010a0c:	7423      	strb	r3, [r4, #16]
10010a0e:	0a1b      	lsrs	r3, r3, #8
10010a10:	7463      	strb	r3, [r4, #17]
10010a12:	e016      	b.n	10010a42 <gapc_get_dev_info_cfm.constprop.1+0x92>
10010a14:	4b11      	ldr	r3, [pc, #68]	; (10010a5c <gapc_get_dev_info_cfm.constprop.1+0xac>)
10010a16:	4912      	ldr	r1, [pc, #72]	; (10010a60 <gapc_get_dev_info_cfm.constprop.1+0xb0>)
10010a18:	33aa      	adds	r3, #170	; 0xaa
10010a1a:	881d      	ldrh	r5, [r3, #0]
10010a1c:	4811      	ldr	r0, [pc, #68]	; (10010a64 <gapc_get_dev_info_cfm.constprop.1+0xb4>)
10010a1e:	0a2b      	lsrs	r3, r5, #8
10010a20:	72a5      	strb	r5, [r4, #10]
10010a22:	72e3      	strb	r3, [r4, #11]
10010a24:	1c2a      	adds	r2, r5, #0
10010a26:	4b10      	ldr	r3, [pc, #64]	; (10010a68 <gapc_get_dev_info_cfm.constprop.1+0xb8>)
10010a28:	350c      	adds	r5, #12
10010a2a:	4798      	blx	r3
10010a2c:	b2a9      	uxth	r1, r5
10010a2e:	e008      	b.n	10010a42 <gapc_get_dev_info_cfm.constprop.1+0x92>
10010a30:	4b0a      	ldr	r3, [pc, #40]	; (10010a5c <gapc_get_dev_info_cfm.constprop.1+0xac>)
10010a32:	210c      	movs	r1, #12
10010a34:	33cc      	adds	r3, #204	; 0xcc
10010a36:	881b      	ldrh	r3, [r3, #0]
10010a38:	72a3      	strb	r3, [r4, #10]
10010a3a:	0a1b      	lsrs	r3, r3, #8
10010a3c:	72e3      	strb	r3, [r4, #11]
10010a3e:	e000      	b.n	10010a42 <gapc_get_dev_info_cfm.constprop.1+0x92>
10010a40:	210a      	movs	r1, #10
10010a42:	1c0b      	adds	r3, r1, #0
10010a44:	3b08      	subs	r3, #8
10010a46:	71a3      	strb	r3, [r4, #6]
10010a48:	121b      	asrs	r3, r3, #8
10010a4a:	71e3      	strb	r3, [r4, #7]
10010a4c:	1c20      	adds	r0, r4, #0
10010a4e:	4b07      	ldr	r3, [pc, #28]	; (10010a6c <gapc_get_dev_info_cfm.constprop.1+0xbc>)
10010a50:	4798      	blx	r3
10010a52:	bd38      	pop	{r3, r4, r5, pc}
10010a54:	1001b640 	.word	0x1001b640
10010a58:	1001b2d0 	.word	0x1001b2d0
10010a5c:	1001b362 	.word	0x1001b362
10010a60:	1001b40e 	.word	0x1001b40e
10010a64:	1001b64c 	.word	0x1001b64c
10010a68:	100165f7 	.word	0x100165f7
10010a6c:	100108a1 	.word	0x100108a1

10010a70 <check_ConnData_idx_role>:
10010a70:	4b0c      	ldr	r3, [pc, #48]	; (10010aa4 <check_ConnData_idx_role+0x34>)
10010a72:	b570      	push	{r4, r5, r6, lr}
10010a74:	1c04      	adds	r4, r0, #0
10010a76:	2008      	movs	r0, #8
10010a78:	429c      	cmp	r4, r3
10010a7a:	d011      	beq.n	10010aa0 <check_ConnData_idx_role+0x30>
10010a7c:	2300      	movs	r3, #0
10010a7e:	2212      	movs	r2, #18
10010a80:	435a      	muls	r2, r3
10010a82:	4d09      	ldr	r5, [pc, #36]	; (10010aa8 <check_ConnData_idx_role+0x38>)
10010a84:	b2d8      	uxtb	r0, r3
10010a86:	1956      	adds	r6, r2, r5
10010a88:	8976      	ldrh	r6, [r6, #10]
10010a8a:	42a6      	cmp	r6, r4
10010a8c:	d104      	bne.n	10010a98 <check_ConnData_idx_role+0x28>
10010a8e:	2900      	cmp	r1, #0
10010a90:	d006      	beq.n	10010aa0 <check_ConnData_idx_role+0x30>
10010a92:	5d53      	ldrb	r3, [r2, r5]
10010a94:	700b      	strb	r3, [r1, #0]
10010a96:	e003      	b.n	10010aa0 <check_ConnData_idx_role+0x30>
10010a98:	3301      	adds	r3, #1
10010a9a:	2b08      	cmp	r3, #8
10010a9c:	d1ef      	bne.n	10010a7e <check_ConnData_idx_role+0xe>
10010a9e:	1c18      	adds	r0, r3, #0
10010aa0:	bd70      	pop	{r4, r5, r6, pc}
10010aa2:	46c0      	nop			; (mov r8, r8)
10010aa4:	0000ffff 	.word	0x0000ffff
10010aa8:	1001b2d2 	.word	0x1001b2d2

10010aac <check_ConnData_emptyEntry>:
10010aac:	2300      	movs	r3, #0
10010aae:	2212      	movs	r2, #18
10010ab0:	435a      	muls	r2, r3
10010ab2:	4906      	ldr	r1, [pc, #24]	; (10010acc <check_ConnData_emptyEntry+0x20>)
10010ab4:	b2d8      	uxtb	r0, r3
10010ab6:	1852      	adds	r2, r2, r1
10010ab8:	8951      	ldrh	r1, [r2, #10]
10010aba:	4a05      	ldr	r2, [pc, #20]	; (10010ad0 <check_ConnData_emptyEntry+0x24>)
10010abc:	4291      	cmp	r1, r2
10010abe:	d003      	beq.n	10010ac8 <check_ConnData_emptyEntry+0x1c>
10010ac0:	3301      	adds	r3, #1
10010ac2:	2b08      	cmp	r3, #8
10010ac4:	d1f3      	bne.n	10010aae <check_ConnData_emptyEntry+0x2>
10010ac6:	1c18      	adds	r0, r3, #0
10010ac8:	4770      	bx	lr
10010aca:	46c0      	nop			; (mov r8, r8)
10010acc:	1001b2d2 	.word	0x1001b2d2
10010ad0:	0000ffff 	.word	0x0000ffff

10010ad4 <gapc_cmp_evt>:
10010ad4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010ad6:	780b      	ldrb	r3, [r1, #0]
10010ad8:	1c05      	adds	r5, r0, #0
10010ada:	1e58      	subs	r0, r3, #1
10010adc:	784e      	ldrb	r6, [r1, #1]
10010ade:	280f      	cmp	r0, #15
10010ae0:	d85a      	bhi.n	10010b98 <gapc_cmp_evt+0xc4>
10010ae2:	1c14      	adds	r4, r2, #0
10010ae4:	f002 fd62 	bl	100135ac <__gnu_thumb1_case_uqi>
10010ae8:	5858440a 	.word	0x5858440a
10010aec:	4b584444 	.word	0x4b584444
10010af0:	0825122d 	.word	0x0825122d
10010af4:	3e395858 	.word	0x3e395858
10010af8:	203b      	movs	r0, #59	; 0x3b
10010afa:	e04e      	b.n	10010b9a <gapc_cmp_evt+0xc6>
10010afc:	203b      	movs	r0, #59	; 0x3b
10010afe:	2e00      	cmp	r6, #0
10010b00:	d04b      	beq.n	10010b9a <gapc_cmp_evt+0xc6>
10010b02:	0a2d      	lsrs	r5, r5, #8
10010b04:	8015      	strh	r5, [r2, #0]
10010b06:	7096      	strb	r6, [r2, #2]
10010b08:	3835      	subs	r0, #53	; 0x35
10010b0a:	e046      	b.n	10010b9a <gapc_cmp_evt+0xc6>
10010b0c:	466b      	mov	r3, sp
10010b0e:	1ddf      	adds	r7, r3, #7
10010b10:	2301      	movs	r3, #1
10010b12:	0a2d      	lsrs	r5, r5, #8
10010b14:	703b      	strb	r3, [r7, #0]
10010b16:	1c28      	adds	r0, r5, #0
10010b18:	1c39      	adds	r1, r7, #0
10010b1a:	4b20      	ldr	r3, [pc, #128]	; (10010b9c <gapc_cmp_evt+0xc8>)
10010b1c:	4798      	blx	r3
10010b1e:	2807      	cmp	r0, #7
10010b20:	d803      	bhi.n	10010b2a <gapc_cmp_evt+0x56>
10010b22:	783b      	ldrb	r3, [r7, #0]
10010b24:	203b      	movs	r0, #59	; 0x3b
10010b26:	2b00      	cmp	r3, #0
10010b28:	d037      	beq.n	10010b9a <gapc_cmp_evt+0xc6>
10010b2a:	8065      	strh	r5, [r4, #2]
10010b2c:	7126      	strb	r6, [r4, #4]
10010b2e:	2009      	movs	r0, #9
10010b30:	e033      	b.n	10010b9a <gapc_cmp_evt+0xc6>
10010b32:	203b      	movs	r0, #59	; 0x3b
10010b34:	2e00      	cmp	r6, #0
10010b36:	d030      	beq.n	10010b9a <gapc_cmp_evt+0xc6>
10010b38:	0a2d      	lsrs	r5, r5, #8
10010b3a:	8015      	strh	r5, [r2, #0]
10010b3c:	7096      	strb	r6, [r2, #2]
10010b3e:	382d      	subs	r0, #45	; 0x2d
10010b40:	e02b      	b.n	10010b9a <gapc_cmp_evt+0xc6>
10010b42:	203b      	movs	r0, #59	; 0x3b
10010b44:	2e00      	cmp	r6, #0
10010b46:	d028      	beq.n	10010b9a <gapc_cmp_evt+0xc6>
10010b48:	2300      	movs	r3, #0
10010b4a:	0a2d      	lsrs	r5, r5, #8
10010b4c:	8015      	strh	r5, [r2, #0]
10010b4e:	7096      	strb	r6, [r2, #2]
10010b50:	8093      	strh	r3, [r2, #4]
10010b52:	80d3      	strh	r3, [r2, #6]
10010b54:	8113      	strh	r3, [r2, #8]
10010b56:	3834      	subs	r0, #52	; 0x34
10010b58:	e01f      	b.n	10010b9a <gapc_cmp_evt+0xc6>
10010b5a:	203b      	movs	r0, #59	; 0x3b
10010b5c:	2e00      	cmp	r6, #0
10010b5e:	d01c      	beq.n	10010b9a <gapc_cmp_evt+0xc6>
10010b60:	7216      	strb	r6, [r2, #8]
10010b62:	e003      	b.n	10010b6c <gapc_cmp_evt+0x98>
10010b64:	203b      	movs	r0, #59	; 0x3b
10010b66:	2e00      	cmp	r6, #0
10010b68:	d017      	beq.n	10010b9a <gapc_cmp_evt+0xc6>
10010b6a:	7116      	strb	r6, [r2, #4]
10010b6c:	3812      	subs	r0, #18
10010b6e:	e014      	b.n	10010b9a <gapc_cmp_evt+0xc6>
10010b70:	203b      	movs	r0, #59	; 0x3b
10010b72:	2e00      	cmp	r6, #0
10010b74:	d011      	beq.n	10010b9a <gapc_cmp_evt+0xc6>
10010b76:	7093      	strb	r3, [r2, #2]
10010b78:	70d6      	strb	r6, [r2, #3]
10010b7a:	382a      	subs	r0, #42	; 0x2a
10010b7c:	e00d      	b.n	10010b9a <gapc_cmp_evt+0xc6>
10010b7e:	203b      	movs	r0, #59	; 0x3b
10010b80:	2e00      	cmp	r6, #0
10010b82:	d00a      	beq.n	10010b9a <gapc_cmp_evt+0xc6>
10010b84:	0a2d      	lsrs	r5, r5, #8
10010b86:	7016      	strb	r6, [r2, #0]
10010b88:	8055      	strh	r5, [r2, #2]
10010b8a:	1d10      	adds	r0, r2, #4
10010b8c:	2100      	movs	r1, #0
10010b8e:	2205      	movs	r2, #5
10010b90:	4b03      	ldr	r3, [pc, #12]	; (10010ba0 <gapc_cmp_evt+0xcc>)
10010b92:	4798      	blx	r3
10010b94:	2012      	movs	r0, #18
10010b96:	e000      	b.n	10010b9a <gapc_cmp_evt+0xc6>
10010b98:	2000      	movs	r0, #0
10010b9a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10010b9c:	10010a71 	.word	0x10010a71
10010ba0:	10016609 	.word	0x10016609

10010ba4 <gapc_connection_cfm_handler>:
10010ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
10010ba6:	b085      	sub	sp, #20
10010ba8:	1c1d      	adds	r5, r3, #0
10010baa:	ab0a      	add	r3, sp, #40	; 0x28
10010bac:	781b      	ldrb	r3, [r3, #0]
10010bae:	9201      	str	r2, [sp, #4]
10010bb0:	9302      	str	r3, [sp, #8]
10010bb2:	ab0b      	add	r3, sp, #44	; 0x2c
10010bb4:	781b      	ldrb	r3, [r3, #0]
10010bb6:	1c07      	adds	r7, r0, #0
10010bb8:	9303      	str	r3, [sp, #12]
10010bba:	ab0c      	add	r3, sp, #48	; 0x30
10010bbc:	881a      	ldrh	r2, [r3, #0]
10010bbe:	2302      	movs	r3, #2
10010bc0:	1c0e      	adds	r6, r1, #0
10010bc2:	4c23      	ldr	r4, [pc, #140]	; (10010c50 <gapc_connection_cfm_handler+0xac>)
10010bc4:	1c39      	adds	r1, r7, #0
10010bc6:	7023      	strb	r3, [r4, #0]
10010bc8:	330c      	adds	r3, #12
10010bca:	7063      	strb	r3, [r4, #1]
10010bcc:	70a3      	strb	r3, [r4, #2]
10010bce:	4b21      	ldr	r3, [pc, #132]	; (10010c54 <gapc_connection_cfm_handler+0xb0>)
10010bd0:	70e2      	strb	r2, [r4, #3]
10010bd2:	881a      	ldrh	r2, [r3, #0]
10010bd4:	881b      	ldrh	r3, [r3, #0]
10010bd6:	7122      	strb	r2, [r4, #4]
10010bd8:	0a1b      	lsrs	r3, r3, #8
10010bda:	4f1f      	ldr	r7, [pc, #124]	; (10010c58 <gapc_connection_cfm_handler+0xb4>)
10010bdc:	2210      	movs	r2, #16
10010bde:	481f      	ldr	r0, [pc, #124]	; (10010c5c <gapc_connection_cfm_handler+0xb8>)
10010be0:	7163      	strb	r3, [r4, #5]
10010be2:	47b8      	blx	r7
10010be4:	0a33      	lsrs	r3, r6, #8
10010be6:	7626      	strb	r6, [r4, #24]
10010be8:	7663      	strb	r3, [r4, #25]
10010bea:	9901      	ldr	r1, [sp, #4]
10010bec:	0c33      	lsrs	r3, r6, #16
10010bee:	2210      	movs	r2, #16
10010bf0:	0e36      	lsrs	r6, r6, #24
10010bf2:	481b      	ldr	r0, [pc, #108]	; (10010c60 <gapc_connection_cfm_handler+0xbc>)
10010bf4:	76a3      	strb	r3, [r4, #26]
10010bf6:	76e6      	strb	r6, [r4, #27]
10010bf8:	47b8      	blx	r7
10010bfa:	1c23      	adds	r3, r4, #0
10010bfc:	332c      	adds	r3, #44	; 0x2c
10010bfe:	701d      	strb	r5, [r3, #0]
10010c00:	1c23      	adds	r3, r4, #0
10010c02:	0a2a      	lsrs	r2, r5, #8
10010c04:	332d      	adds	r3, #45	; 0x2d
10010c06:	701a      	strb	r2, [r3, #0]
10010c08:	1c23      	adds	r3, r4, #0
10010c0a:	0c2a      	lsrs	r2, r5, #16
10010c0c:	332e      	adds	r3, #46	; 0x2e
10010c0e:	701a      	strb	r2, [r3, #0]
10010c10:	1c23      	adds	r3, r4, #0
10010c12:	0e2d      	lsrs	r5, r5, #24
10010c14:	332f      	adds	r3, #47	; 0x2f
10010c16:	466a      	mov	r2, sp
10010c18:	701d      	strb	r5, [r3, #0]
10010c1a:	1c23      	adds	r3, r4, #0
10010c1c:	7a12      	ldrb	r2, [r2, #8]
10010c1e:	3330      	adds	r3, #48	; 0x30
10010c20:	701a      	strb	r2, [r3, #0]
10010c22:	1c23      	adds	r3, r4, #0
10010c24:	2500      	movs	r5, #0
10010c26:	3331      	adds	r3, #49	; 0x31
10010c28:	466a      	mov	r2, sp
10010c2a:	701d      	strb	r5, [r3, #0]
10010c2c:	1c23      	adds	r3, r4, #0
10010c2e:	7b12      	ldrb	r2, [r2, #12]
10010c30:	3332      	adds	r3, #50	; 0x32
10010c32:	701a      	strb	r2, [r3, #0]
10010c34:	1c23      	adds	r3, r4, #0
10010c36:	3333      	adds	r3, #51	; 0x33
10010c38:	701d      	strb	r5, [r3, #0]
10010c3a:	232c      	movs	r3, #44	; 0x2c
10010c3c:	1c20      	adds	r0, r4, #0
10010c3e:	71a3      	strb	r3, [r4, #6]
10010c40:	2134      	movs	r1, #52	; 0x34
10010c42:	4b08      	ldr	r3, [pc, #32]	; (10010c64 <gapc_connection_cfm_handler+0xc0>)
10010c44:	71e5      	strb	r5, [r4, #7]
10010c46:	4798      	blx	r3
10010c48:	1c28      	adds	r0, r5, #0
10010c4a:	b005      	add	sp, #20
10010c4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010c4e:	46c0      	nop			; (mov r8, r8)
10010c50:	1001b640 	.word	0x1001b640
10010c54:	1001b2d0 	.word	0x1001b2d0
10010c58:	100165f7 	.word	0x100165f7
10010c5c:	1001b648 	.word	0x1001b648
10010c60:	1001b65c 	.word	0x1001b65c
10010c64:	100108a1 	.word	0x100108a1

10010c68 <gapc_con_req_ind>:
10010c68:	b5f0      	push	{r4, r5, r6, r7, lr}
10010c6a:	7845      	ldrb	r5, [r0, #1]
10010c6c:	7803      	ldrb	r3, [r0, #0]
10010c6e:	4c30      	ldr	r4, [pc, #192]	; (10010d30 <gapc_con_req_ind+0xc8>)
10010c70:	022d      	lsls	r5, r5, #8
10010c72:	431d      	orrs	r5, r3
10010c74:	85a5      	strh	r5, [r4, #44]	; 0x2c
10010c76:	78c3      	ldrb	r3, [r0, #3]
10010c78:	7882      	ldrb	r2, [r0, #2]
10010c7a:	b08b      	sub	sp, #44	; 0x2c
10010c7c:	021b      	lsls	r3, r3, #8
10010c7e:	431a      	orrs	r2, r3
10010c80:	466b      	mov	r3, sp
10010c82:	9205      	str	r2, [sp, #20]
10010c84:	8a9b      	ldrh	r3, [r3, #20]
10010c86:	2120      	movs	r1, #32
10010c88:	85e3      	strh	r3, [r4, #46]	; 0x2e
10010c8a:	7943      	ldrb	r3, [r0, #5]
10010c8c:	7902      	ldrb	r2, [r0, #4]
10010c8e:	021b      	lsls	r3, r3, #8
10010c90:	431a      	orrs	r2, r3
10010c92:	466b      	mov	r3, sp
10010c94:	9206      	str	r2, [sp, #24]
10010c96:	8b1b      	ldrh	r3, [r3, #24]
10010c98:	1c06      	adds	r6, r0, #0
10010c9a:	8623      	strh	r3, [r4, #48]	; 0x30
10010c9c:	79c3      	ldrb	r3, [r0, #7]
10010c9e:	7982      	ldrb	r2, [r0, #6]
10010ca0:	021b      	lsls	r3, r3, #8
10010ca2:	431a      	orrs	r2, r3
10010ca4:	466b      	mov	r3, sp
10010ca6:	9207      	str	r2, [sp, #28]
10010ca8:	466a      	mov	r2, sp
10010caa:	8b9b      	ldrh	r3, [r3, #28]
10010cac:	1852      	adds	r2, r2, r1
10010cae:	8663      	strh	r3, [r4, #50]	; 0x32
10010cb0:	7a43      	ldrb	r3, [r0, #9]
10010cb2:	1c01      	adds	r1, r0, #0
10010cb4:	9308      	str	r3, [sp, #32]
10010cb6:	1c23      	adds	r3, r4, #0
10010cb8:	7812      	ldrb	r2, [r2, #0]
10010cba:	3377      	adds	r3, #119	; 0x77
10010cbc:	3478      	adds	r4, #120	; 0x78
10010cbe:	701a      	strb	r2, [r3, #0]
10010cc0:	310a      	adds	r1, #10
10010cc2:	2206      	movs	r2, #6
10010cc4:	4b1b      	ldr	r3, [pc, #108]	; (10010d34 <gapc_con_req_ind+0xcc>)
10010cc6:	1c20      	adds	r0, r4, #0
10010cc8:	4798      	blx	r3
10010cca:	7c33      	ldrb	r3, [r6, #16]
10010ccc:	9309      	str	r3, [sp, #36]	; 0x24
10010cce:	4b1a      	ldr	r3, [pc, #104]	; (10010d38 <gapc_con_req_ind+0xd0>)
10010cd0:	4798      	blx	r3
10010cd2:	4e1a      	ldr	r6, [pc, #104]	; (10010d3c <gapc_con_req_ind+0xd4>)
10010cd4:	1e07      	subs	r7, r0, #0
10010cd6:	2f07      	cmp	r7, #7
10010cd8:	d81b      	bhi.n	10010d12 <gapc_con_req_ind+0xaa>
10010cda:	2312      	movs	r3, #18
10010cdc:	4343      	muls	r3, r0
10010cde:	18f0      	adds	r0, r6, r3
10010ce0:	8145      	strh	r5, [r0, #10]
10010ce2:	4669      	mov	r1, sp
10010ce4:	2524      	movs	r5, #36	; 0x24
10010ce6:	1949      	adds	r1, r1, r5
10010ce8:	7809      	ldrb	r1, [r1, #0]
10010cea:	2206      	movs	r2, #6
10010cec:	54f1      	strb	r1, [r6, r3]
10010cee:	2120      	movs	r1, #32
10010cf0:	466b      	mov	r3, sp
10010cf2:	185b      	adds	r3, r3, r1
10010cf4:	781b      	ldrb	r3, [r3, #0]
10010cf6:	1c21      	adds	r1, r4, #0
10010cf8:	7043      	strb	r3, [r0, #1]
10010cfa:	466b      	mov	r3, sp
10010cfc:	8a9b      	ldrh	r3, [r3, #20]
10010cfe:	3002      	adds	r0, #2
10010d00:	8143      	strh	r3, [r0, #10]
10010d02:	466b      	mov	r3, sp
10010d04:	8b1b      	ldrh	r3, [r3, #24]
10010d06:	8183      	strh	r3, [r0, #12]
10010d08:	466b      	mov	r3, sp
10010d0a:	8b9b      	ldrh	r3, [r3, #28]
10010d0c:	81c3      	strh	r3, [r0, #14]
10010d0e:	4b09      	ldr	r3, [pc, #36]	; (10010d34 <gapc_con_req_ind+0xcc>)
10010d10:	4798      	blx	r3
10010d12:	2112      	movs	r1, #18
10010d14:	2300      	movs	r3, #0
10010d16:	434f      	muls	r7, r1
10010d18:	9300      	str	r3, [sp, #0]
10010d1a:	9301      	str	r3, [sp, #4]
10010d1c:	19f6      	adds	r6, r6, r7
10010d1e:	8971      	ldrh	r1, [r6, #10]
10010d20:	4a07      	ldr	r2, [pc, #28]	; (10010d40 <gapc_con_req_ind+0xd8>)
10010d22:	9102      	str	r1, [sp, #8]
10010d24:	1c10      	adds	r0, r2, #0
10010d26:	1c19      	adds	r1, r3, #0
10010d28:	4c06      	ldr	r4, [pc, #24]	; (10010d44 <gapc_con_req_ind+0xdc>)
10010d2a:	47a0      	blx	r4
10010d2c:	b00b      	add	sp, #44	; 0x2c
10010d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010d30:	1001b362 	.word	0x1001b362
10010d34:	100165f7 	.word	0x100165f7
10010d38:	10010aad 	.word	0x10010aad
10010d3c:	1001b2d2 	.word	0x1001b2d2
10010d40:	1001a394 	.word	0x1001a394
10010d44:	10010ba5 	.word	0x10010ba5

10010d48 <gapc_disconnect_cmd_handler>:
10010d48:	2204      	movs	r2, #4
10010d4a:	b510      	push	{r4, lr}
10010d4c:	4b0c      	ldr	r3, [pc, #48]	; (10010d80 <gapc_disconnect_cmd_handler+0x38>)
10010d4e:	2400      	movs	r4, #0
10010d50:	701a      	strb	r2, [r3, #0]
10010d52:	320a      	adds	r2, #10
10010d54:	705a      	strb	r2, [r3, #1]
10010d56:	709a      	strb	r2, [r3, #2]
10010d58:	4a0a      	ldr	r2, [pc, #40]	; (10010d84 <gapc_disconnect_cmd_handler+0x3c>)
10010d5a:	70d9      	strb	r1, [r3, #3]
10010d5c:	8811      	ldrh	r1, [r2, #0]
10010d5e:	8812      	ldrh	r2, [r2, #0]
10010d60:	7119      	strb	r1, [r3, #4]
10010d62:	0a12      	lsrs	r2, r2, #8
10010d64:	715a      	strb	r2, [r3, #5]
10010d66:	2201      	movs	r2, #1
10010d68:	721a      	strb	r2, [r3, #8]
10010d6a:	1892      	adds	r2, r2, r2
10010d6c:	7258      	strb	r0, [r3, #9]
10010d6e:	719a      	strb	r2, [r3, #6]
10010d70:	71dc      	strb	r4, [r3, #7]
10010d72:	1c18      	adds	r0, r3, #0
10010d74:	210a      	movs	r1, #10
10010d76:	4b04      	ldr	r3, [pc, #16]	; (10010d88 <gapc_disconnect_cmd_handler+0x40>)
10010d78:	4798      	blx	r3
10010d7a:	1c20      	adds	r0, r4, #0
10010d7c:	bd10      	pop	{r4, pc}
10010d7e:	46c0      	nop			; (mov r8, r8)
10010d80:	1001b640 	.word	0x1001b640
10010d84:	1001b2d0 	.word	0x1001b2d0
10010d88:	100108a1 	.word	0x100108a1

10010d8c <gapc_disconnect_ind>:
10010d8c:	1c02      	adds	r2, r0, #0
10010d8e:	b508      	push	{r3, lr}
10010d90:	7843      	ldrb	r3, [r0, #1]
10010d92:	7800      	ldrb	r0, [r0, #0]
10010d94:	021b      	lsls	r3, r3, #8
10010d96:	4318      	orrs	r0, r3
10010d98:	8008      	strh	r0, [r1, #0]
10010d9a:	7893      	ldrb	r3, [r2, #2]
10010d9c:	708b      	strb	r3, [r1, #2]
10010d9e:	2100      	movs	r1, #0
10010da0:	4b05      	ldr	r3, [pc, #20]	; (10010db8 <gapc_disconnect_ind+0x2c>)
10010da2:	4798      	blx	r3
10010da4:	2807      	cmp	r0, #7
10010da6:	d806      	bhi.n	10010db6 <gapc_disconnect_ind+0x2a>
10010da8:	2312      	movs	r3, #18
10010daa:	4358      	muls	r0, r3
10010dac:	4b03      	ldr	r3, [pc, #12]	; (10010dbc <gapc_disconnect_ind+0x30>)
10010dae:	1818      	adds	r0, r3, r0
10010db0:	2301      	movs	r3, #1
10010db2:	425b      	negs	r3, r3
10010db4:	8143      	strh	r3, [r0, #10]
10010db6:	bd08      	pop	{r3, pc}
10010db8:	10010a71 	.word	0x10010a71
10010dbc:	1001b2d2 	.word	0x1001b2d2

10010dc0 <gapc_bond_cmd_handler>:
10010dc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010dc2:	9300      	str	r3, [sp, #0]
10010dc4:	2312      	movs	r3, #18
10010dc6:	1c04      	adds	r4, r0, #0
10010dc8:	a808      	add	r0, sp, #32
10010dca:	7807      	ldrb	r7, [r0, #0]
10010dcc:	a809      	add	r0, sp, #36	; 0x24
10010dce:	7806      	ldrb	r6, [r0, #0]
10010dd0:	a80a      	add	r0, sp, #40	; 0x28
10010dd2:	7805      	ldrb	r5, [r0, #0]
10010dd4:	a80b      	add	r0, sp, #44	; 0x2c
10010dd6:	7800      	ldrb	r0, [r0, #0]
10010dd8:	9001      	str	r0, [sp, #4]
10010dda:	4810      	ldr	r0, [pc, #64]	; (10010e1c <gapc_bond_cmd_handler+0x5c>)
10010ddc:	7003      	strb	r3, [r0, #0]
10010dde:	230e      	movs	r3, #14
10010de0:	70c4      	strb	r4, [r0, #3]
10010de2:	4c0f      	ldr	r4, [pc, #60]	; (10010e20 <gapc_bond_cmd_handler+0x60>)
10010de4:	7043      	strb	r3, [r0, #1]
10010de6:	7083      	strb	r3, [r0, #2]
10010de8:	8823      	ldrh	r3, [r4, #0]
10010dea:	8824      	ldrh	r4, [r4, #0]
10010dec:	7103      	strb	r3, [r0, #4]
10010dee:	466b      	mov	r3, sp
10010df0:	781b      	ldrb	r3, [r3, #0]
10010df2:	0a24      	lsrs	r4, r4, #8
10010df4:	72c3      	strb	r3, [r0, #11]
10010df6:	466b      	mov	r3, sp
10010df8:	791b      	ldrb	r3, [r3, #4]
10010dfa:	7144      	strb	r4, [r0, #5]
10010dfc:	73c3      	strb	r3, [r0, #15]
10010dfe:	2308      	movs	r3, #8
10010e00:	7183      	strb	r3, [r0, #6]
10010e02:	2300      	movs	r3, #0
10010e04:	240a      	movs	r4, #10
10010e06:	7241      	strb	r1, [r0, #9]
10010e08:	71c3      	strb	r3, [r0, #7]
10010e0a:	2110      	movs	r1, #16
10010e0c:	4b05      	ldr	r3, [pc, #20]	; (10010e24 <gapc_bond_cmd_handler+0x64>)
10010e0e:	7307      	strb	r7, [r0, #12]
10010e10:	7346      	strb	r6, [r0, #13]
10010e12:	7385      	strb	r5, [r0, #14]
10010e14:	7204      	strb	r4, [r0, #8]
10010e16:	7282      	strb	r2, [r0, #10]
10010e18:	4798      	blx	r3
10010e1a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10010e1c:	1001b640 	.word	0x1001b640
10010e20:	1001b2d0 	.word	0x1001b2d0
10010e24:	100108a1 	.word	0x100108a1

10010e28 <gapc_bond_ind>:
10010e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10010e2a:	780e      	ldrb	r6, [r1, #0]
10010e2c:	1c03      	adds	r3, r0, #0
10010e2e:	1eb0      	subs	r0, r6, #2
10010e30:	2805      	cmp	r0, #5
10010e32:	d85d      	bhi.n	10010ef0 <gapc_bond_ind+0xc8>
10010e34:	1c15      	adds	r5, r2, #0
10010e36:	1c0c      	adds	r4, r1, #0
10010e38:	f002 fbb8 	bl	100135ac <__gnu_thumb1_case_uqi>
10010e3c:	2f5a030d 	.word	0x2f5a030d
10010e40:	4740      	.short	0x4740
10010e42:	2009      	movs	r0, #9
10010e44:	2a00      	cmp	r2, #0
10010e46:	d054      	beq.n	10010ef2 <gapc_bond_ind+0xca>
10010e48:	0a1b      	lsrs	r3, r3, #8
10010e4a:	8053      	strh	r3, [r2, #2]
10010e4c:	788b      	ldrb	r3, [r1, #2]
10010e4e:	4829      	ldr	r0, [pc, #164]	; (10010ef4 <gapc_bond_ind+0xcc>)
10010e50:	7113      	strb	r3, [r2, #4]
10010e52:	2100      	movs	r1, #0
10010e54:	e01c      	b.n	10010e90 <gapc_bond_ind+0x68>
10010e56:	2009      	movs	r0, #9
10010e58:	2a00      	cmp	r2, #0
10010e5a:	d04a      	beq.n	10010ef2 <gapc_bond_ind+0xca>
10010e5c:	4c25      	ldr	r4, [pc, #148]	; (10010ef4 <gapc_bond_ind+0xcc>)
10010e5e:	0a1b      	lsrs	r3, r3, #8
10010e60:	8053      	strh	r3, [r2, #2]
10010e62:	788b      	ldrb	r3, [r1, #2]
10010e64:	2700      	movs	r7, #0
10010e66:	1c10      	adds	r0, r2, #0
10010e68:	1c21      	adds	r1, r4, #0
10010e6a:	7013      	strb	r3, [r2, #0]
10010e6c:	4e22      	ldr	r6, [pc, #136]	; (10010ef8 <gapc_bond_ind+0xd0>)
10010e6e:	7117      	strb	r7, [r2, #4]
10010e70:	312e      	adds	r1, #46	; 0x2e
10010e72:	2217      	movs	r2, #23
10010e74:	3032      	adds	r0, #50	; 0x32
10010e76:	47b0      	blx	r6
10010e78:	1c28      	adds	r0, r5, #0
10010e7a:	1c21      	adds	r1, r4, #0
10010e7c:	2210      	movs	r2, #16
10010e7e:	311e      	adds	r1, #30
10010e80:	3022      	adds	r0, #34	; 0x22
10010e82:	47b0      	blx	r6
10010e84:	1ca1      	adds	r1, r4, #2
10010e86:	1da8      	adds	r0, r5, #6
10010e88:	221c      	movs	r2, #28
10010e8a:	47b0      	blx	r6
10010e8c:	1c20      	adds	r0, r4, #0
10010e8e:	1c39      	adds	r1, r7, #0
10010e90:	2246      	movs	r2, #70	; 0x46
10010e92:	4b1a      	ldr	r3, [pc, #104]	; (10010efc <gapc_bond_ind+0xd4>)
10010e94:	4798      	blx	r3
10010e96:	2009      	movs	r0, #9
10010e98:	e02b      	b.n	10010ef2 <gapc_bond_ind+0xca>
10010e9a:	4d16      	ldr	r5, [pc, #88]	; (10010ef4 <gapc_bond_ind+0xcc>)
10010e9c:	3102      	adds	r1, #2
10010e9e:	1c28      	adds	r0, r5, #0
10010ea0:	2210      	movs	r2, #16
10010ea2:	4e15      	ldr	r6, [pc, #84]	; (10010ef8 <gapc_bond_ind+0xd0>)
10010ea4:	302e      	adds	r0, #46	; 0x2e
10010ea6:	47b0      	blx	r6
10010ea8:	1c28      	adds	r0, r5, #0
10010eaa:	1c21      	adds	r1, r4, #0
10010eac:	303f      	adds	r0, #63	; 0x3f
10010eae:	3112      	adds	r1, #18
10010eb0:	2206      	movs	r2, #6
10010eb2:	47b0      	blx	r6
10010eb4:	7e23      	ldrb	r3, [r4, #24]
10010eb6:	353e      	adds	r5, #62	; 0x3e
10010eb8:	702b      	strb	r3, [r5, #0]
10010eba:	e019      	b.n	10010ef0 <gapc_bond_ind+0xc8>
10010ebc:	480d      	ldr	r0, [pc, #52]	; (10010ef4 <gapc_bond_ind+0xcc>)
10010ebe:	3102      	adds	r1, #2
10010ec0:	2210      	movs	r2, #16
10010ec2:	4b0d      	ldr	r3, [pc, #52]	; (10010ef8 <gapc_bond_ind+0xd0>)
10010ec4:	301e      	adds	r0, #30
10010ec6:	4798      	blx	r3
10010ec8:	e012      	b.n	10010ef0 <gapc_bond_ind+0xc8>
10010eca:	4d0a      	ldr	r5, [pc, #40]	; (10010ef4 <gapc_bond_ind+0xcc>)
10010ecc:	3102      	adds	r1, #2
10010ece:	2210      	movs	r2, #16
10010ed0:	4e09      	ldr	r6, [pc, #36]	; (10010ef8 <gapc_bond_ind+0xd0>)
10010ed2:	1ca8      	adds	r0, r5, #2
10010ed4:	47b0      	blx	r6
10010ed6:	1c28      	adds	r0, r5, #0
10010ed8:	1c21      	adds	r1, r4, #0
10010eda:	7ce3      	ldrb	r3, [r4, #19]
10010edc:	7ca2      	ldrb	r2, [r4, #18]
10010ede:	021b      	lsls	r3, r3, #8
10010ee0:	4313      	orrs	r3, r2
10010ee2:	3014      	adds	r0, #20
10010ee4:	3114      	adds	r1, #20
10010ee6:	2208      	movs	r2, #8
10010ee8:	826b      	strh	r3, [r5, #18]
10010eea:	47b0      	blx	r6
10010eec:	7f23      	ldrb	r3, [r4, #28]
10010eee:	772b      	strb	r3, [r5, #28]
10010ef0:	2000      	movs	r0, #0
10010ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10010ef4:	1001a3c4 	.word	0x1001a3c4
10010ef8:	100165f7 	.word	0x100165f7
10010efc:	10016609 	.word	0x10016609

10010f00 <gapc_bond_req_ind>:
10010f00:	b570      	push	{r4, r5, r6, lr}
10010f02:	780c      	ldrb	r4, [r1, #0]
10010f04:	1c03      	adds	r3, r0, #0
10010f06:	7849      	ldrb	r1, [r1, #1]
10010f08:	2c07      	cmp	r4, #7
10010f0a:	d85c      	bhi.n	10010fc6 <gapc_bond_req_ind+0xc6>
10010f0c:	1c20      	adds	r0, r4, #0
10010f0e:	f002 fb4d 	bl	100135ac <__gnu_thumb1_case_uqi>
10010f12:	5a04      	.short	0x5a04
10010f14:	5a0b5a5a 	.word	0x5a0b5a5a
10010f18:	1f1f      	.short	0x1f1f
10010f1a:	200a      	movs	r0, #10
10010f1c:	2a00      	cmp	r2, #0
10010f1e:	d053      	beq.n	10010fc8 <gapc_bond_req_ind+0xc8>
10010f20:	0a1b      	lsrs	r3, r3, #8
10010f22:	8013      	strh	r3, [r2, #0]
10010f24:	7091      	strb	r1, [r2, #2]
10010f26:	e04f      	b.n	10010fc8 <gapc_bond_req_ind+0xc8>
10010f28:	2a00      	cmp	r2, #0
10010f2a:	d00b      	beq.n	10010f44 <gapc_bond_req_ind+0x44>
10010f2c:	0a1b      	lsrs	r3, r3, #8
10010f2e:	8013      	strh	r3, [r2, #0]
10010f30:	2900      	cmp	r1, #0
10010f32:	d102      	bne.n	10010f3a <gapc_bond_req_ind+0x3a>
10010f34:	2301      	movs	r3, #1
10010f36:	7093      	strb	r3, [r2, #2]
10010f38:	e004      	b.n	10010f44 <gapc_bond_req_ind+0x44>
10010f3a:	2300      	movs	r3, #0
10010f3c:	7093      	strb	r3, [r2, #2]
10010f3e:	2902      	cmp	r1, #2
10010f40:	d102      	bne.n	10010f48 <gapc_bond_req_ind+0x48>
10010f42:	70d3      	strb	r3, [r2, #3]
10010f44:	200c      	movs	r0, #12
10010f46:	e03f      	b.n	10010fc8 <gapc_bond_req_ind+0xc8>
10010f48:	2901      	cmp	r1, #1
10010f4a:	d1fb      	bne.n	10010f44 <gapc_bond_req_ind+0x44>
10010f4c:	70d1      	strb	r1, [r2, #3]
10010f4e:	e7f9      	b.n	10010f44 <gapc_bond_req_ind+0x44>
10010f50:	2214      	movs	r2, #20
10010f52:	481e      	ldr	r0, [pc, #120]	; (10010fcc <gapc_bond_req_ind+0xcc>)
10010f54:	0a1b      	lsrs	r3, r3, #8
10010f56:	70c3      	strb	r3, [r0, #3]
10010f58:	4b1d      	ldr	r3, [pc, #116]	; (10010fd0 <gapc_bond_req_ind+0xd0>)
10010f5a:	7002      	strb	r2, [r0, #0]
10010f5c:	3a06      	subs	r2, #6
10010f5e:	7042      	strb	r2, [r0, #1]
10010f60:	7082      	strb	r2, [r0, #2]
10010f62:	881a      	ldrh	r2, [r3, #0]
10010f64:	881b      	ldrh	r3, [r3, #0]
10010f66:	4e1b      	ldr	r6, [pc, #108]	; (10010fd4 <gapc_bond_req_ind+0xd4>)
10010f68:	0a1b      	lsrs	r3, r3, #8
10010f6a:	7143      	strb	r3, [r0, #5]
10010f6c:	2301      	movs	r3, #1
10010f6e:	7102      	strb	r2, [r0, #4]
10010f70:	7204      	strb	r4, [r0, #8]
10010f72:	7243      	strb	r3, [r0, #9]
10010f74:	1c05      	adds	r5, r0, #0
10010f76:	1c31      	adds	r1, r6, #0
10010f78:	300a      	adds	r0, #10
10010f7a:	2c07      	cmp	r4, #7
10010f7c:	d116      	bne.n	10010fac <gapc_bond_req_ind+0xac>
10010f7e:	317e      	adds	r1, #126	; 0x7e
10010f80:	2210      	movs	r2, #16
10010f82:	4c15      	ldr	r4, [pc, #84]	; (10010fd8 <gapc_bond_req_ind+0xd8>)
10010f84:	47a0      	blx	r4
10010f86:	1c33      	adds	r3, r6, #0
10010f88:	1c31      	adds	r1, r6, #0
10010f8a:	1c28      	adds	r0, r5, #0
10010f8c:	338e      	adds	r3, #142	; 0x8e
10010f8e:	881b      	ldrh	r3, [r3, #0]
10010f90:	3190      	adds	r1, #144	; 0x90
10010f92:	76ab      	strb	r3, [r5, #26]
10010f94:	2208      	movs	r2, #8
10010f96:	0a1b      	lsrs	r3, r3, #8
10010f98:	301c      	adds	r0, #28
10010f9a:	76eb      	strb	r3, [r5, #27]
10010f9c:	47a0      	blx	r4
10010f9e:	1c31      	adds	r1, r6, #0
10010fa0:	3198      	adds	r1, #152	; 0x98
10010fa2:	780a      	ldrb	r2, [r1, #0]
10010fa4:	1d6b      	adds	r3, r5, #5
10010fa6:	77da      	strb	r2, [r3, #31]
10010fa8:	2125      	movs	r1, #37	; 0x25
10010faa:	e004      	b.n	10010fb6 <gapc_bond_req_ind+0xb6>
10010fac:	319a      	adds	r1, #154	; 0x9a
10010fae:	2210      	movs	r2, #16
10010fb0:	4b09      	ldr	r3, [pc, #36]	; (10010fd8 <gapc_bond_req_ind+0xd8>)
10010fb2:	4798      	blx	r3
10010fb4:	211a      	movs	r1, #26
10010fb6:	1c0b      	adds	r3, r1, #0
10010fb8:	2400      	movs	r4, #0
10010fba:	3b08      	subs	r3, #8
10010fbc:	71ab      	strb	r3, [r5, #6]
10010fbe:	1c28      	adds	r0, r5, #0
10010fc0:	4b06      	ldr	r3, [pc, #24]	; (10010fdc <gapc_bond_req_ind+0xdc>)
10010fc2:	71ec      	strb	r4, [r5, #7]
10010fc4:	4798      	blx	r3
10010fc6:	2000      	movs	r0, #0
10010fc8:	bd70      	pop	{r4, r5, r6, pc}
10010fca:	46c0      	nop			; (mov r8, r8)
10010fcc:	1001b640 	.word	0x1001b640
10010fd0:	1001b2d0 	.word	0x1001b2d0
10010fd4:	1001b362 	.word	0x1001b362
10010fd8:	100165f7 	.word	0x100165f7
10010fdc:	100108a1 	.word	0x100108a1

10010fe0 <gapc_bond_cfm_handler_pair_resp>:
10010fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
10010fe2:	b085      	sub	sp, #20
10010fe4:	1c07      	adds	r7, r0, #0
10010fe6:	a80a      	add	r0, sp, #40	; 0x28
10010fe8:	7806      	ldrb	r6, [r0, #0]
10010fea:	a80b      	add	r0, sp, #44	; 0x2c
10010fec:	7805      	ldrb	r5, [r0, #0]
10010fee:	a80c      	add	r0, sp, #48	; 0x30
10010ff0:	7800      	ldrb	r0, [r0, #0]
10010ff2:	2414      	movs	r4, #20
10010ff4:	9002      	str	r0, [sp, #8]
10010ff6:	a80d      	add	r0, sp, #52	; 0x34
10010ff8:	7800      	ldrb	r0, [r0, #0]
10010ffa:	9301      	str	r3, [sp, #4]
10010ffc:	9003      	str	r0, [sp, #12]
10010ffe:	a80e      	add	r0, sp, #56	; 0x38
10011000:	8800      	ldrh	r0, [r0, #0]
10011002:	4684      	mov	ip, r0
10011004:	4812      	ldr	r0, [pc, #72]	; (10011050 <gapc_bond_cfm_handler_pair_resp+0x70>)
10011006:	7004      	strb	r4, [r0, #0]
10011008:	3c06      	subs	r4, #6
1001100a:	7044      	strb	r4, [r0, #1]
1001100c:	7084      	strb	r4, [r0, #2]
1001100e:	4664      	mov	r4, ip
10011010:	70c4      	strb	r4, [r0, #3]
10011012:	4c10      	ldr	r4, [pc, #64]	; (10011054 <gapc_bond_cfm_handler_pair_resp+0x74>)
10011014:	7247      	strb	r7, [r0, #9]
10011016:	8823      	ldrh	r3, [r4, #0]
10011018:	8824      	ldrh	r4, [r4, #0]
1001101a:	7103      	strb	r3, [r0, #4]
1001101c:	466b      	mov	r3, sp
1001101e:	791b      	ldrb	r3, [r3, #4]
10011020:	0a24      	lsrs	r4, r4, #8
10011022:	7303      	strb	r3, [r0, #12]
10011024:	466b      	mov	r3, sp
10011026:	7a1b      	ldrb	r3, [r3, #8]
10011028:	7144      	strb	r4, [r0, #5]
1001102a:	73c3      	strb	r3, [r0, #15]
1001102c:	466b      	mov	r3, sp
1001102e:	7b1b      	ldrb	r3, [r3, #12]
10011030:	2401      	movs	r4, #1
10011032:	7403      	strb	r3, [r0, #16]
10011034:	2309      	movs	r3, #9
10011036:	7183      	strb	r3, [r0, #6]
10011038:	2300      	movs	r3, #0
1001103a:	7204      	strb	r4, [r0, #8]
1001103c:	7281      	strb	r1, [r0, #10]
1001103e:	72c2      	strb	r2, [r0, #11]
10011040:	7346      	strb	r6, [r0, #13]
10011042:	7385      	strb	r5, [r0, #14]
10011044:	71c3      	strb	r3, [r0, #7]
10011046:	2111      	movs	r1, #17
10011048:	4b03      	ldr	r3, [pc, #12]	; (10011058 <gapc_bond_cfm_handler_pair_resp+0x78>)
1001104a:	4798      	blx	r3
1001104c:	b005      	add	sp, #20
1001104e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011050:	1001b640 	.word	0x1001b640
10011054:	1001b2d0 	.word	0x1001b2d0
10011058:	100108a1 	.word	0x100108a1

1001105c <gapc_bond_cfm_handler_key_exch>:
1001105c:	b538      	push	{r3, r4, r5, lr}
1001105e:	2514      	movs	r5, #20
10011060:	4c0d      	ldr	r4, [pc, #52]	; (10011098 <gapc_bond_cfm_handler_key_exch+0x3c>)
10011062:	70e3      	strb	r3, [r4, #3]
10011064:	4b0d      	ldr	r3, [pc, #52]	; (1001109c <gapc_bond_cfm_handler_key_exch+0x40>)
10011066:	7025      	strb	r5, [r4, #0]
10011068:	3d06      	subs	r5, #6
1001106a:	7065      	strb	r5, [r4, #1]
1001106c:	70a5      	strb	r5, [r4, #2]
1001106e:	881d      	ldrh	r5, [r3, #0]
10011070:	881b      	ldrh	r3, [r3, #0]
10011072:	7220      	strb	r0, [r4, #8]
10011074:	0a1b      	lsrs	r3, r3, #8
10011076:	7163      	strb	r3, [r4, #5]
10011078:	7261      	strb	r1, [r4, #9]
1001107a:	4b09      	ldr	r3, [pc, #36]	; (100110a0 <gapc_bond_cfm_handler_key_exch+0x44>)
1001107c:	1c11      	adds	r1, r2, #0
1001107e:	4809      	ldr	r0, [pc, #36]	; (100110a4 <gapc_bond_cfm_handler_key_exch+0x48>)
10011080:	2210      	movs	r2, #16
10011082:	7125      	strb	r5, [r4, #4]
10011084:	4798      	blx	r3
10011086:	2312      	movs	r3, #18
10011088:	71a3      	strb	r3, [r4, #6]
1001108a:	2300      	movs	r3, #0
1001108c:	1c20      	adds	r0, r4, #0
1001108e:	71e3      	strb	r3, [r4, #7]
10011090:	211a      	movs	r1, #26
10011092:	4b05      	ldr	r3, [pc, #20]	; (100110a8 <gapc_bond_cfm_handler_key_exch+0x4c>)
10011094:	4798      	blx	r3
10011096:	bd38      	pop	{r3, r4, r5, pc}
10011098:	1001b640 	.word	0x1001b640
1001109c:	1001b2d0 	.word	0x1001b2d0
100110a0:	100165f7 	.word	0x100165f7
100110a4:	1001b64a 	.word	0x1001b64a
100110a8:	100108a1 	.word	0x100108a1

100110ac <gapc_security_cmd_handler>:
100110ac:	221a      	movs	r2, #26
100110ae:	b508      	push	{r3, lr}
100110b0:	4b0b      	ldr	r3, [pc, #44]	; (100110e0 <gapc_security_cmd_handler+0x34>)
100110b2:	701a      	strb	r2, [r3, #0]
100110b4:	3a0c      	subs	r2, #12
100110b6:	705a      	strb	r2, [r3, #1]
100110b8:	709a      	strb	r2, [r3, #2]
100110ba:	4a0a      	ldr	r2, [pc, #40]	; (100110e4 <gapc_security_cmd_handler+0x38>)
100110bc:	70d8      	strb	r0, [r3, #3]
100110be:	8810      	ldrh	r0, [r2, #0]
100110c0:	8812      	ldrh	r2, [r2, #0]
100110c2:	7118      	strb	r0, [r3, #4]
100110c4:	0a12      	lsrs	r2, r2, #8
100110c6:	715a      	strb	r2, [r3, #5]
100110c8:	220c      	movs	r2, #12
100110ca:	721a      	strb	r2, [r3, #8]
100110cc:	3a0a      	subs	r2, #10
100110ce:	719a      	strb	r2, [r3, #6]
100110d0:	2200      	movs	r2, #0
100110d2:	7259      	strb	r1, [r3, #9]
100110d4:	71da      	strb	r2, [r3, #7]
100110d6:	1c18      	adds	r0, r3, #0
100110d8:	210a      	movs	r1, #10
100110da:	4b03      	ldr	r3, [pc, #12]	; (100110e8 <gapc_security_cmd_handler+0x3c>)
100110dc:	4798      	blx	r3
100110de:	bd08      	pop	{r3, pc}
100110e0:	1001b640 	.word	0x1001b640
100110e4:	1001b2d0 	.word	0x1001b2d0
100110e8:	100108a1 	.word	0x100108a1

100110ec <gapc_encrypt_cmd_handler>:
100110ec:	b5f0      	push	{r4, r5, r6, r7, lr}
100110ee:	2500      	movs	r5, #0
100110f0:	b089      	sub	sp, #36	; 0x24
100110f2:	9306      	str	r3, [sp, #24]
100110f4:	ab0e      	add	r3, sp, #56	; 0x38
100110f6:	781b      	ldrb	r3, [r3, #0]
100110f8:	1c17      	adds	r7, r2, #0
100110fa:	9307      	str	r3, [sp, #28]
100110fc:	ab0f      	add	r3, sp, #60	; 0x3c
100110fe:	781b      	ldrb	r3, [r3, #0]
10011100:	4a19      	ldr	r2, [pc, #100]	; (10011168 <gapc_encrypt_cmd_handler+0x7c>)
10011102:	1c06      	adds	r6, r0, #0
10011104:	9105      	str	r1, [sp, #20]
10011106:	9300      	str	r3, [sp, #0]
10011108:	9002      	str	r0, [sp, #8]
1001110a:	1c29      	adds	r1, r5, #0
1001110c:	1c2b      	adds	r3, r5, #0
1001110e:	9501      	str	r5, [sp, #4]
10011110:	1c10      	adds	r0, r2, #0
10011112:	4c16      	ldr	r4, [pc, #88]	; (1001116c <gapc_encrypt_cmd_handler+0x80>)
10011114:	47a0      	blx	r4
10011116:	2316      	movs	r3, #22
10011118:	4c15      	ldr	r4, [pc, #84]	; (10011170 <gapc_encrypt_cmd_handler+0x84>)
1001111a:	9905      	ldr	r1, [sp, #20]
1001111c:	7023      	strb	r3, [r4, #0]
1001111e:	3b08      	subs	r3, #8
10011120:	7063      	strb	r3, [r4, #1]
10011122:	70a3      	strb	r3, [r4, #2]
10011124:	4b13      	ldr	r3, [pc, #76]	; (10011174 <gapc_encrypt_cmd_handler+0x88>)
10011126:	70e6      	strb	r6, [r4, #3]
10011128:	881a      	ldrh	r2, [r3, #0]
1001112a:	881b      	ldrh	r3, [r3, #0]
1001112c:	7122      	strb	r2, [r4, #4]
1001112e:	0a1b      	lsrs	r3, r3, #8
10011130:	7163      	strb	r3, [r4, #5]
10011132:	230b      	movs	r3, #11
10011134:	4e10      	ldr	r6, [pc, #64]	; (10011178 <gapc_encrypt_cmd_handler+0x8c>)
10011136:	2210      	movs	r2, #16
10011138:	4810      	ldr	r0, [pc, #64]	; (1001117c <gapc_encrypt_cmd_handler+0x90>)
1001113a:	7223      	strb	r3, [r4, #8]
1001113c:	7265      	strb	r5, [r4, #9]
1001113e:	47b0      	blx	r6
10011140:	0a3b      	lsrs	r3, r7, #8
10011142:	9906      	ldr	r1, [sp, #24]
10011144:	2208      	movs	r2, #8
10011146:	480e      	ldr	r0, [pc, #56]	; (10011180 <gapc_encrypt_cmd_handler+0x94>)
10011148:	76e3      	strb	r3, [r4, #27]
1001114a:	76a7      	strb	r7, [r4, #26]
1001114c:	47b0      	blx	r6
1001114e:	466a      	mov	r2, sp
10011150:	7f12      	ldrb	r2, [r2, #28]
10011152:	1d63      	adds	r3, r4, #5
10011154:	77da      	strb	r2, [r3, #31]
10011156:	231d      	movs	r3, #29
10011158:	1c20      	adds	r0, r4, #0
1001115a:	71a3      	strb	r3, [r4, #6]
1001115c:	2125      	movs	r1, #37	; 0x25
1001115e:	4b09      	ldr	r3, [pc, #36]	; (10011184 <gapc_encrypt_cmd_handler+0x98>)
10011160:	71e5      	strb	r5, [r4, #7]
10011162:	4798      	blx	r3
10011164:	b009      	add	sp, #36	; 0x24
10011166:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011168:	1001a3a4 	.word	0x1001a3a4
1001116c:	10010ba5 	.word	0x10010ba5
10011170:	1001b640 	.word	0x1001b640
10011174:	1001b2d0 	.word	0x1001b2d0
10011178:	100165f7 	.word	0x100165f7
1001117c:	1001b64a 	.word	0x1001b64a
10011180:	1001b65c 	.word	0x1001b65c
10011184:	100108a1 	.word	0x100108a1

10011188 <gapc_encrypt_req_ind>:
10011188:	b508      	push	{r3, lr}
1001118a:	0a00      	lsrs	r0, r0, #8
1001118c:	8010      	strh	r0, [r2, #0]
1001118e:	784b      	ldrb	r3, [r1, #1]
10011190:	7808      	ldrb	r0, [r1, #0]
10011192:	021b      	lsls	r3, r3, #8
10011194:	4303      	orrs	r3, r0
10011196:	8053      	strh	r3, [r2, #2]
10011198:	1d10      	adds	r0, r2, #4
1001119a:	3102      	adds	r1, #2
1001119c:	2208      	movs	r2, #8
1001119e:	4b01      	ldr	r3, [pc, #4]	; (100111a4 <gapc_encrypt_req_ind+0x1c>)
100111a0:	4798      	blx	r3
100111a2:	bd08      	pop	{r3, pc}
100111a4:	100165f7 	.word	0x100165f7

100111a8 <gapc_encrypt_cfm_handler>:
100111a8:	b5f0      	push	{r4, r5, r6, r7, lr}
100111aa:	2500      	movs	r5, #0
100111ac:	b087      	sub	sp, #28
100111ae:	9304      	str	r3, [sp, #16]
100111b0:	ab0c      	add	r3, sp, #48	; 0x30
100111b2:	781b      	ldrb	r3, [r3, #0]
100111b4:	1c17      	adds	r7, r2, #0
100111b6:	4a15      	ldr	r2, [pc, #84]	; (1001120c <gapc_encrypt_cfm_handler+0x64>)
100111b8:	1c06      	adds	r6, r0, #0
100111ba:	9305      	str	r3, [sp, #20]
100111bc:	9100      	str	r1, [sp, #0]
100111be:	9002      	str	r0, [sp, #8]
100111c0:	1c29      	adds	r1, r5, #0
100111c2:	1c2b      	adds	r3, r5, #0
100111c4:	9501      	str	r5, [sp, #4]
100111c6:	1c10      	adds	r0, r2, #0
100111c8:	4c11      	ldr	r4, [pc, #68]	; (10011210 <gapc_encrypt_cfm_handler+0x68>)
100111ca:	47a0      	blx	r4
100111cc:	2318      	movs	r3, #24
100111ce:	4c11      	ldr	r4, [pc, #68]	; (10011214 <gapc_encrypt_cfm_handler+0x6c>)
100111d0:	9904      	ldr	r1, [sp, #16]
100111d2:	7023      	strb	r3, [r4, #0]
100111d4:	3b0a      	subs	r3, #10
100111d6:	7063      	strb	r3, [r4, #1]
100111d8:	70a3      	strb	r3, [r4, #2]
100111da:	4b0f      	ldr	r3, [pc, #60]	; (10011218 <gapc_encrypt_cfm_handler+0x70>)
100111dc:	480f      	ldr	r0, [pc, #60]	; (1001121c <gapc_encrypt_cfm_handler+0x74>)
100111de:	881a      	ldrh	r2, [r3, #0]
100111e0:	881b      	ldrh	r3, [r3, #0]
100111e2:	7122      	strb	r2, [r4, #4]
100111e4:	0a1b      	lsrs	r3, r3, #8
100111e6:	7163      	strb	r3, [r4, #5]
100111e8:	2210      	movs	r2, #16
100111ea:	4b0d      	ldr	r3, [pc, #52]	; (10011220 <gapc_encrypt_cfm_handler+0x78>)
100111ec:	70e6      	strb	r6, [r4, #3]
100111ee:	7227      	strb	r7, [r4, #8]
100111f0:	4798      	blx	r3
100111f2:	466b      	mov	r3, sp
100111f4:	7d1b      	ldrb	r3, [r3, #20]
100111f6:	1c20      	adds	r0, r4, #0
100111f8:	7663      	strb	r3, [r4, #25]
100111fa:	2312      	movs	r3, #18
100111fc:	211a      	movs	r1, #26
100111fe:	71a3      	strb	r3, [r4, #6]
10011200:	4b08      	ldr	r3, [pc, #32]	; (10011224 <gapc_encrypt_cfm_handler+0x7c>)
10011202:	71e5      	strb	r5, [r4, #7]
10011204:	4798      	blx	r3
10011206:	b007      	add	sp, #28
10011208:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001120a:	46c0      	nop			; (mov r8, r8)
1001120c:	1001a3b4 	.word	0x1001a3b4
10011210:	10010ba5 	.word	0x10010ba5
10011214:	1001b640 	.word	0x1001b640
10011218:	1001b2d0 	.word	0x1001b2d0
1001121c:	1001b649 	.word	0x1001b649
10011220:	100165f7 	.word	0x100165f7
10011224:	100108a1 	.word	0x100108a1

10011228 <gapc_encrypt_ind>:
10011228:	780b      	ldrb	r3, [r1, #0]
1001122a:	0a00      	lsrs	r0, r0, #8
1001122c:	70d3      	strb	r3, [r2, #3]
1001122e:	2300      	movs	r3, #0
10011230:	8010      	strh	r0, [r2, #0]
10011232:	7093      	strb	r3, [r2, #2]
10011234:	4770      	bx	lr
	...

10011238 <gapc_param_update_cfm_handler>:
10011238:	b538      	push	{r3, r4, r5, lr}
1001123a:	2410      	movs	r4, #16
1001123c:	1c05      	adds	r5, r0, #0
1001123e:	480e      	ldr	r0, [pc, #56]	; (10011278 <gapc_param_update_cfm_handler+0x40>)
10011240:	7004      	strb	r4, [r0, #0]
10011242:	3c02      	subs	r4, #2
10011244:	7044      	strb	r4, [r0, #1]
10011246:	7084      	strb	r4, [r0, #2]
10011248:	4c0c      	ldr	r4, [pc, #48]	; (1001127c <gapc_param_update_cfm_handler+0x44>)
1001124a:	70c5      	strb	r5, [r0, #3]
1001124c:	8825      	ldrh	r5, [r4, #0]
1001124e:	8824      	ldrh	r4, [r4, #0]
10011250:	72c3      	strb	r3, [r0, #11]
10011252:	0a1b      	lsrs	r3, r3, #8
10011254:	0a24      	lsrs	r4, r4, #8
10011256:	7303      	strb	r3, [r0, #12]
10011258:	2305      	movs	r3, #5
1001125a:	7144      	strb	r4, [r0, #5]
1001125c:	2400      	movs	r4, #0
1001125e:	7201      	strb	r1, [r0, #8]
10011260:	7242      	strb	r2, [r0, #9]
10011262:	7183      	strb	r3, [r0, #6]
10011264:	0a12      	lsrs	r2, r2, #8
10011266:	210d      	movs	r1, #13
10011268:	4b05      	ldr	r3, [pc, #20]	; (10011280 <gapc_param_update_cfm_handler+0x48>)
1001126a:	7105      	strb	r5, [r0, #4]
1001126c:	7282      	strb	r2, [r0, #10]
1001126e:	71c4      	strb	r4, [r0, #7]
10011270:	4798      	blx	r3
10011272:	1c20      	adds	r0, r4, #0
10011274:	bd38      	pop	{r3, r4, r5, pc}
10011276:	46c0      	nop			; (mov r8, r8)
10011278:	1001b640 	.word	0x1001b640
1001127c:	1001b2d0 	.word	0x1001b2d0
10011280:	100108a1 	.word	0x100108a1

10011284 <gapc_param_updated_ind>:
10011284:	2300      	movs	r3, #0
10011286:	0a00      	lsrs	r0, r0, #8
10011288:	8010      	strh	r0, [r2, #0]
1001128a:	7093      	strb	r3, [r2, #2]
1001128c:	784b      	ldrb	r3, [r1, #1]
1001128e:	7808      	ldrb	r0, [r1, #0]
10011290:	021b      	lsls	r3, r3, #8
10011292:	4303      	orrs	r3, r0
10011294:	8093      	strh	r3, [r2, #4]
10011296:	78cb      	ldrb	r3, [r1, #3]
10011298:	7888      	ldrb	r0, [r1, #2]
1001129a:	021b      	lsls	r3, r3, #8
1001129c:	4303      	orrs	r3, r0
1001129e:	80d3      	strh	r3, [r2, #6]
100112a0:	794b      	ldrb	r3, [r1, #5]
100112a2:	7909      	ldrb	r1, [r1, #4]
100112a4:	021b      	lsls	r3, r3, #8
100112a6:	430b      	orrs	r3, r1
100112a8:	2007      	movs	r0, #7
100112aa:	8113      	strh	r3, [r2, #8]
100112ac:	4770      	bx	lr

100112ae <gapc_param_updated_req_ind>:
100112ae:	0a00      	lsrs	r0, r0, #8
100112b0:	8010      	strh	r0, [r2, #0]
100112b2:	784b      	ldrb	r3, [r1, #1]
100112b4:	7808      	ldrb	r0, [r1, #0]
100112b6:	021b      	lsls	r3, r3, #8
100112b8:	4303      	orrs	r3, r0
100112ba:	8053      	strh	r3, [r2, #2]
100112bc:	78cb      	ldrb	r3, [r1, #3]
100112be:	7888      	ldrb	r0, [r1, #2]
100112c0:	021b      	lsls	r3, r3, #8
100112c2:	4303      	orrs	r3, r0
100112c4:	8093      	strh	r3, [r2, #4]
100112c6:	794b      	ldrb	r3, [r1, #5]
100112c8:	7908      	ldrb	r0, [r1, #4]
100112ca:	021b      	lsls	r3, r3, #8
100112cc:	4303      	orrs	r3, r0
100112ce:	80d3      	strh	r3, [r2, #6]
100112d0:	79cb      	ldrb	r3, [r1, #7]
100112d2:	7989      	ldrb	r1, [r1, #6]
100112d4:	021b      	lsls	r3, r3, #8
100112d6:	430b      	orrs	r3, r1
100112d8:	2008      	movs	r0, #8
100112da:	8113      	strh	r3, [r2, #8]
100112dc:	4770      	bx	lr
	...

100112e0 <gapc_dev_info_req_ind_handler>:
100112e0:	b508      	push	{r3, lr}
100112e2:	1c0b      	adds	r3, r1, #0
100112e4:	0a01      	lsrs	r1, r0, #8
100112e6:	8011      	strh	r1, [r2, #0]
100112e8:	7818      	ldrb	r0, [r3, #0]
100112ea:	7090      	strb	r0, [r2, #2]
100112ec:	2800      	cmp	r0, #0
100112ee:	d104      	bne.n	100112fa <gapc_dev_info_req_ind_handler+0x1a>
100112f0:	4b03      	ldr	r3, [pc, #12]	; (10011300 <gapc_dev_info_req_ind_handler+0x20>)
100112f2:	33aa      	adds	r3, #170	; 0xaa
100112f4:	881b      	ldrh	r3, [r3, #0]
100112f6:	2b00      	cmp	r3, #0
100112f8:	d001      	beq.n	100112fe <gapc_dev_info_req_ind_handler+0x1e>
100112fa:	4b02      	ldr	r3, [pc, #8]	; (10011304 <gapc_dev_info_req_ind_handler+0x24>)
100112fc:	4798      	blx	r3
100112fe:	bd08      	pop	{r3, pc}
10011300:	1001b362 	.word	0x1001b362
10011304:	100109b1 	.word	0x100109b1

10011308 <gapc_sec_req_ind>:
10011308:	0a00      	lsrs	r0, r0, #8
1001130a:	8010      	strh	r0, [r2, #0]
1001130c:	7809      	ldrb	r1, [r1, #0]
1001130e:	2301      	movs	r3, #1
10011310:	1c08      	adds	r0, r1, #0
10011312:	0889      	lsrs	r1, r1, #2
10011314:	4018      	ands	r0, r3
10011316:	400b      	ands	r3, r1
10011318:	70d0      	strb	r0, [r2, #3]
1001131a:	7113      	strb	r3, [r2, #4]
1001131c:	4770      	bx	lr

1001131e <gapc_sign_counter_ind_handler>:
1001131e:	0a00      	lsrs	r0, r0, #8
10011320:	8010      	strh	r0, [r2, #0]
10011322:	784b      	ldrb	r3, [r1, #1]
10011324:	0218      	lsls	r0, r3, #8
10011326:	788b      	ldrb	r3, [r1, #2]
10011328:	041b      	lsls	r3, r3, #16
1001132a:	4303      	orrs	r3, r0
1001132c:	7808      	ldrb	r0, [r1, #0]
1001132e:	4303      	orrs	r3, r0
10011330:	78c8      	ldrb	r0, [r1, #3]
10011332:	0600      	lsls	r0, r0, #24
10011334:	4303      	orrs	r3, r0
10011336:	6053      	str	r3, [r2, #4]
10011338:	794b      	ldrb	r3, [r1, #5]
1001133a:	0218      	lsls	r0, r3, #8
1001133c:	798b      	ldrb	r3, [r1, #6]
1001133e:	041b      	lsls	r3, r3, #16
10011340:	4303      	orrs	r3, r0
10011342:	7908      	ldrb	r0, [r1, #4]
10011344:	79c9      	ldrb	r1, [r1, #7]
10011346:	4303      	orrs	r3, r0
10011348:	0609      	lsls	r1, r1, #24
1001134a:	430b      	orrs	r3, r1
1001134c:	2000      	movs	r0, #0
1001134e:	6093      	str	r3, [r2, #8]
10011350:	4770      	bx	lr
	...

10011354 <gapc_peer_att_info_ind_handler>:
10011354:	b510      	push	{r4, lr}
10011356:	0a00      	lsrs	r0, r0, #8
10011358:	8010      	strh	r0, [r2, #0]
1001135a:	7808      	ldrb	r0, [r1, #0]
1001135c:	7090      	strb	r0, [r2, #2]
1001135e:	788b      	ldrb	r3, [r1, #2]
10011360:	784c      	ldrb	r4, [r1, #1]
10011362:	021b      	lsls	r3, r3, #8
10011364:	4323      	orrs	r3, r4
10011366:	8093      	strh	r3, [r2, #4]
10011368:	2801      	cmp	r0, #1
1001136a:	d027      	beq.n	100113bc <gapc_peer_att_info_ind_handler+0x68>
1001136c:	2800      	cmp	r0, #0
1001136e:	d017      	beq.n	100113a0 <gapc_peer_att_info_ind_handler+0x4c>
10011370:	2802      	cmp	r0, #2
10011372:	d12a      	bne.n	100113ca <gapc_peer_att_info_ind_handler+0x76>
10011374:	790b      	ldrb	r3, [r1, #4]
10011376:	78c8      	ldrb	r0, [r1, #3]
10011378:	021b      	lsls	r3, r3, #8
1001137a:	4303      	orrs	r3, r0
1001137c:	8113      	strh	r3, [r2, #8]
1001137e:	798b      	ldrb	r3, [r1, #6]
10011380:	7948      	ldrb	r0, [r1, #5]
10011382:	021b      	lsls	r3, r3, #8
10011384:	4303      	orrs	r3, r0
10011386:	80d3      	strh	r3, [r2, #6]
10011388:	7a0b      	ldrb	r3, [r1, #8]
1001138a:	79c8      	ldrb	r0, [r1, #7]
1001138c:	021b      	lsls	r3, r3, #8
1001138e:	4303      	orrs	r3, r0
10011390:	8193      	strh	r3, [r2, #12]
10011392:	7a8b      	ldrb	r3, [r1, #10]
10011394:	7a49      	ldrb	r1, [r1, #9]
10011396:	021b      	lsls	r3, r3, #8
10011398:	430b      	orrs	r3, r1
1001139a:	8153      	strh	r3, [r2, #10]
1001139c:	2306      	movs	r3, #6
1001139e:	e013      	b.n	100113c8 <gapc_peer_att_info_ind_handler+0x74>
100113a0:	1c14      	adds	r4, r2, #0
100113a2:	1c20      	adds	r0, r4, #0
100113a4:	790a      	ldrb	r2, [r1, #4]
100113a6:	78cb      	ldrb	r3, [r1, #3]
100113a8:	0212      	lsls	r2, r2, #8
100113aa:	431a      	orrs	r2, r3
100113ac:	80e2      	strh	r2, [r4, #6]
100113ae:	4b07      	ldr	r3, [pc, #28]	; (100113cc <gapc_peer_att_info_ind_handler+0x78>)
100113b0:	3008      	adds	r0, #8
100113b2:	3105      	adds	r1, #5
100113b4:	4798      	blx	r3
100113b6:	2302      	movs	r3, #2
100113b8:	70a3      	strb	r3, [r4, #2]
100113ba:	e006      	b.n	100113ca <gapc_peer_att_info_ind_handler+0x76>
100113bc:	790b      	ldrb	r3, [r1, #4]
100113be:	78c9      	ldrb	r1, [r1, #3]
100113c0:	021b      	lsls	r3, r3, #8
100113c2:	430b      	orrs	r3, r1
100113c4:	80d3      	strh	r3, [r2, #6]
100113c6:	2305      	movs	r3, #5
100113c8:	7093      	strb	r3, [r2, #2]
100113ca:	bd10      	pop	{r4, pc}
100113cc:	100165f7 	.word	0x100165f7

100113d0 <gapc_con_channel_map_ind_handler>:
100113d0:	b508      	push	{r3, lr}
100113d2:	2300      	movs	r3, #0
100113d4:	0a00      	lsrs	r0, r0, #8
100113d6:	7013      	strb	r3, [r2, #0]
100113d8:	8050      	strh	r0, [r2, #2]
100113da:	4b02      	ldr	r3, [pc, #8]	; (100113e4 <gapc_con_channel_map_ind_handler+0x14>)
100113dc:	1d10      	adds	r0, r2, #4
100113de:	2205      	movs	r2, #5
100113e0:	4798      	blx	r3
100113e2:	bd08      	pop	{r3, pc}
100113e4:	100165f7 	.word	0x100165f7

100113e8 <gapc_lecb_connected>:
100113e8:	7843      	ldrb	r3, [r0, #1]
100113ea:	7802      	ldrb	r2, [r0, #0]
100113ec:	021b      	lsls	r3, r3, #8
100113ee:	4313      	orrs	r3, r2
100113f0:	800b      	strh	r3, [r1, #0]
100113f2:	78c3      	ldrb	r3, [r0, #3]
100113f4:	7882      	ldrb	r2, [r0, #2]
100113f6:	021b      	lsls	r3, r3, #8
100113f8:	4313      	orrs	r3, r2
100113fa:	804b      	strh	r3, [r1, #2]
100113fc:	7943      	ldrb	r3, [r0, #5]
100113fe:	7902      	ldrb	r2, [r0, #4]
10011400:	021b      	lsls	r3, r3, #8
10011402:	4313      	orrs	r3, r2
10011404:	808b      	strh	r3, [r1, #4]
10011406:	79c3      	ldrb	r3, [r0, #7]
10011408:	7982      	ldrb	r2, [r0, #6]
1001140a:	021b      	lsls	r3, r3, #8
1001140c:	4313      	orrs	r3, r2
1001140e:	80cb      	strh	r3, [r1, #6]
10011410:	2300      	movs	r3, #0
10011412:	720b      	strb	r3, [r1, #8]
10011414:	4770      	bx	lr

10011416 <gapc_lecb_disconnected>:
10011416:	7843      	ldrb	r3, [r0, #1]
10011418:	7802      	ldrb	r2, [r0, #0]
1001141a:	021b      	lsls	r3, r3, #8
1001141c:	4313      	orrs	r3, r2
1001141e:	800b      	strh	r3, [r1, #0]
10011420:	78c3      	ldrb	r3, [r0, #3]
10011422:	7882      	ldrb	r2, [r0, #2]
10011424:	021b      	lsls	r3, r3, #8
10011426:	4313      	orrs	r3, r2
10011428:	804b      	strh	r3, [r1, #2]
1001142a:	4770      	bx	lr

1001142c <gapc_lecb_connect_req_ind>:
1001142c:	7843      	ldrb	r3, [r0, #1]
1001142e:	7802      	ldrb	r2, [r0, #0]
10011430:	021b      	lsls	r3, r3, #8
10011432:	4313      	orrs	r3, r2
10011434:	800b      	strh	r3, [r1, #0]
10011436:	78c3      	ldrb	r3, [r0, #3]
10011438:	7882      	ldrb	r2, [r0, #2]
1001143a:	021b      	lsls	r3, r3, #8
1001143c:	4313      	orrs	r3, r2
1001143e:	804b      	strh	r3, [r1, #2]
10011440:	7943      	ldrb	r3, [r0, #5]
10011442:	7902      	ldrb	r2, [r0, #4]
10011444:	021b      	lsls	r3, r3, #8
10011446:	4313      	orrs	r3, r2
10011448:	808b      	strh	r3, [r1, #4]
1001144a:	79c3      	ldrb	r3, [r0, #7]
1001144c:	7982      	ldrb	r2, [r0, #6]
1001144e:	021b      	lsls	r3, r3, #8
10011450:	4313      	orrs	r3, r2
10011452:	80cb      	strh	r3, [r1, #6]
10011454:	4770      	bx	lr

10011456 <gapc_lecb_add_credit_resp_handler>:
10011456:	7843      	ldrb	r3, [r0, #1]
10011458:	7802      	ldrb	r2, [r0, #0]
1001145a:	021b      	lsls	r3, r3, #8
1001145c:	4313      	orrs	r3, r2
1001145e:	800b      	strh	r3, [r1, #0]
10011460:	78c3      	ldrb	r3, [r0, #3]
10011462:	7882      	ldrb	r2, [r0, #2]
10011464:	021b      	lsls	r3, r3, #8
10011466:	4313      	orrs	r3, r2
10011468:	804b      	strh	r3, [r1, #2]
1001146a:	7943      	ldrb	r3, [r0, #5]
1001146c:	7902      	ldrb	r2, [r0, #4]
1001146e:	021b      	lsls	r3, r3, #8
10011470:	4313      	orrs	r3, r2
10011472:	808b      	strh	r3, [r1, #4]
10011474:	4770      	bx	lr
	...

10011478 <gapm_reset_req_handler>:
10011478:	b573      	push	{r0, r1, r4, r5, r6, lr}
1001147a:	466b      	mov	r3, sp
1001147c:	4915      	ldr	r1, [pc, #84]	; (100114d4 <gapm_reset_req_handler+0x5c>)
1001147e:	4816      	ldr	r0, [pc, #88]	; (100114d8 <gapm_reset_req_handler+0x60>)
10011480:	880c      	ldrh	r4, [r1, #0]
10011482:	8809      	ldrh	r1, [r1, #0]
10011484:	1ddd      	adds	r5, r3, #7
10011486:	0a09      	lsrs	r1, r1, #8
10011488:	2300      	movs	r3, #0
1001148a:	2202      	movs	r2, #2
1001148c:	7141      	strb	r1, [r0, #5]
1001148e:	26d0      	movs	r6, #208	; 0xd0
10011490:	2101      	movs	r1, #1
10011492:	7104      	strb	r4, [r0, #4]
10011494:	4c11      	ldr	r4, [pc, #68]	; (100114dc <gapm_reset_req_handler+0x64>)
10011496:	702b      	strb	r3, [r5, #0]
10011498:	7002      	strb	r2, [r0, #0]
1001149a:	70c3      	strb	r3, [r0, #3]
1001149c:	320b      	adds	r2, #11
1001149e:	7201      	strb	r1, [r0, #8]
100114a0:	7181      	strb	r1, [r0, #6]
100114a2:	71c3      	strb	r3, [r0, #7]
100114a4:	3108      	adds	r1, #8
100114a6:	4b0e      	ldr	r3, [pc, #56]	; (100114e0 <gapm_reset_req_handler+0x68>)
100114a8:	0136      	lsls	r6, r6, #4
100114aa:	7042      	strb	r2, [r0, #1]
100114ac:	7082      	strb	r2, [r0, #2]
100114ae:	80a2      	strh	r2, [r4, #4]
100114b0:	8026      	strh	r6, [r4, #0]
100114b2:	4798      	blx	r3
100114b4:	1c28      	adds	r0, r5, #0
100114b6:	4b0b      	ldr	r3, [pc, #44]	; (100114e4 <gapm_reset_req_handler+0x6c>)
100114b8:	4798      	blx	r3
100114ba:	782b      	ldrb	r3, [r5, #0]
100114bc:	20e2      	movs	r0, #226	; 0xe2
100114be:	2b00      	cmp	r3, #0
100114c0:	d106      	bne.n	100114d0 <gapm_reset_req_handler+0x58>
100114c2:	68a3      	ldr	r3, [r4, #8]
100114c4:	20e2      	movs	r0, #226	; 0xe2
100114c6:	781a      	ldrb	r2, [r3, #0]
100114c8:	785b      	ldrb	r3, [r3, #1]
100114ca:	2a01      	cmp	r2, #1
100114cc:	d100      	bne.n	100114d0 <gapm_reset_req_handler+0x58>
100114ce:	1c18      	adds	r0, r3, #0
100114d0:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
100114d2:	46c0      	nop			; (mov r8, r8)
100114d4:	1001b2d0 	.word	0x1001b2d0
100114d8:	1001b640 	.word	0x1001b640
100114dc:	1001b2c4 	.word	0x1001b2c4
100114e0:	100108a1 	.word	0x100108a1
100114e4:	10010905 	.word	0x10010905

100114e8 <gapm_set_dev_config_cmd_handler>:
100114e8:	b5f0      	push	{r4, r5, r6, r7, lr}
100114ea:	b089      	sub	sp, #36	; 0x24
100114ec:	9303      	str	r3, [sp, #12]
100114ee:	ab0e      	add	r3, sp, #56	; 0x38
100114f0:	781b      	ldrb	r3, [r3, #0]
100114f2:	4c37      	ldr	r4, [pc, #220]	; (100115d0 <gapm_set_dev_config_cmd_handler+0xe8>)
100114f4:	9304      	str	r3, [sp, #16]
100114f6:	ab0f      	add	r3, sp, #60	; 0x3c
100114f8:	781b      	ldrb	r3, [r3, #0]
100114fa:	270d      	movs	r7, #13
100114fc:	9305      	str	r3, [sp, #20]
100114fe:	ab10      	add	r3, sp, #64	; 0x40
10011500:	881b      	ldrh	r3, [r3, #0]
10011502:	72a1      	strb	r1, [r4, #10]
10011504:	9300      	str	r3, [sp, #0]
10011506:	ab11      	add	r3, sp, #68	; 0x44
10011508:	881b      	ldrh	r3, [r3, #0]
1001150a:	0a09      	lsrs	r1, r1, #8
1001150c:	9301      	str	r3, [sp, #4]
1001150e:	ab12      	add	r3, sp, #72	; 0x48
10011510:	881b      	ldrh	r3, [r3, #0]
10011512:	7260      	strb	r0, [r4, #9]
10011514:	9302      	str	r3, [sp, #8]
10011516:	ab06      	add	r3, sp, #24
10011518:	1dde      	adds	r6, r3, #7
1001151a:	2300      	movs	r3, #0
1001151c:	7033      	strb	r3, [r6, #0]
1001151e:	2304      	movs	r3, #4
10011520:	7023      	strb	r3, [r4, #0]
10011522:	2300      	movs	r3, #0
10011524:	70e3      	strb	r3, [r4, #3]
10011526:	4b2b      	ldr	r3, [pc, #172]	; (100115d4 <gapm_set_dev_config_cmd_handler+0xec>)
10011528:	72e1      	strb	r1, [r4, #11]
1001152a:	881d      	ldrh	r5, [r3, #0]
1001152c:	881b      	ldrh	r3, [r3, #0]
1001152e:	1c11      	adds	r1, r2, #0
10011530:	0a1b      	lsrs	r3, r3, #8
10011532:	7163      	strb	r3, [r4, #5]
10011534:	2303      	movs	r3, #3
10011536:	7125      	strb	r5, [r4, #4]
10011538:	2206      	movs	r2, #6
1001153a:	4d27      	ldr	r5, [pc, #156]	; (100115d8 <gapm_set_dev_config_cmd_handler+0xf0>)
1001153c:	4827      	ldr	r0, [pc, #156]	; (100115dc <gapm_set_dev_config_cmd_handler+0xf4>)
1001153e:	7223      	strb	r3, [r4, #8]
10011540:	7067      	strb	r7, [r4, #1]
10011542:	70a7      	strb	r7, [r4, #2]
10011544:	47a8      	blx	r5
10011546:	9903      	ldr	r1, [sp, #12]
10011548:	2210      	movs	r2, #16
1001154a:	4825      	ldr	r0, [pc, #148]	; (100115e0 <gapm_set_dev_config_cmd_handler+0xf8>)
1001154c:	47a8      	blx	r5
1001154e:	466a      	mov	r2, sp
10011550:	7c12      	ldrb	r2, [r2, #16]
10011552:	1ce3      	adds	r3, r4, #3
10011554:	77da      	strb	r2, [r3, #31]
10011556:	466a      	mov	r2, sp
10011558:	7d12      	ldrb	r2, [r2, #20]
1001155a:	1d23      	adds	r3, r4, #4
1001155c:	77da      	strb	r2, [r3, #31]
1001155e:	466a      	mov	r2, sp
10011560:	7812      	ldrb	r2, [r2, #0]
10011562:	1d63      	adds	r3, r4, #5
10011564:	77da      	strb	r2, [r3, #31]
10011566:	9b00      	ldr	r3, [sp, #0]
10011568:	1da2      	adds	r2, r4, #6
1001156a:	0a1b      	lsrs	r3, r3, #8
1001156c:	77d3      	strb	r3, [r2, #31]
1001156e:	466a      	mov	r2, sp
10011570:	7912      	ldrb	r2, [r2, #4]
10011572:	1de3      	adds	r3, r4, #7
10011574:	77da      	strb	r2, [r3, #31]
10011576:	1c22      	adds	r2, r4, #0
10011578:	9b01      	ldr	r3, [sp, #4]
1001157a:	3208      	adds	r2, #8
1001157c:	0a1b      	lsrs	r3, r3, #8
1001157e:	77d3      	strb	r3, [r2, #31]
10011580:	466a      	mov	r2, sp
10011582:	1c23      	adds	r3, r4, #0
10011584:	7a12      	ldrb	r2, [r2, #8]
10011586:	3328      	adds	r3, #40	; 0x28
10011588:	701a      	strb	r2, [r3, #0]
1001158a:	1c22      	adds	r2, r4, #0
1001158c:	9b02      	ldr	r3, [sp, #8]
1001158e:	3229      	adds	r2, #41	; 0x29
10011590:	0a1b      	lsrs	r3, r3, #8
10011592:	7013      	strb	r3, [r2, #0]
10011594:	23d0      	movs	r3, #208	; 0xd0
10011596:	4d13      	ldr	r5, [pc, #76]	; (100115e4 <gapm_set_dev_config_cmd_handler+0xfc>)
10011598:	011b      	lsls	r3, r3, #4
1001159a:	802b      	strh	r3, [r5, #0]
1001159c:	2322      	movs	r3, #34	; 0x22
1001159e:	71a3      	strb	r3, [r4, #6]
100115a0:	2300      	movs	r3, #0
100115a2:	212a      	movs	r1, #42	; 0x2a
100115a4:	71e3      	strb	r3, [r4, #7]
100115a6:	1c20      	adds	r0, r4, #0
100115a8:	4b0f      	ldr	r3, [pc, #60]	; (100115e8 <gapm_set_dev_config_cmd_handler+0x100>)
100115aa:	80af      	strh	r7, [r5, #4]
100115ac:	4798      	blx	r3
100115ae:	1c30      	adds	r0, r6, #0
100115b0:	4b0e      	ldr	r3, [pc, #56]	; (100115ec <gapm_set_dev_config_cmd_handler+0x104>)
100115b2:	4798      	blx	r3
100115b4:	7833      	ldrb	r3, [r6, #0]
100115b6:	20e2      	movs	r0, #226	; 0xe2
100115b8:	2b00      	cmp	r3, #0
100115ba:	d106      	bne.n	100115ca <gapm_set_dev_config_cmd_handler+0xe2>
100115bc:	68ab      	ldr	r3, [r5, #8]
100115be:	20e2      	movs	r0, #226	; 0xe2
100115c0:	781a      	ldrb	r2, [r3, #0]
100115c2:	785b      	ldrb	r3, [r3, #1]
100115c4:	2a03      	cmp	r2, #3
100115c6:	d100      	bne.n	100115ca <gapm_set_dev_config_cmd_handler+0xe2>
100115c8:	1c18      	adds	r0, r3, #0
100115ca:	b009      	add	sp, #36	; 0x24
100115cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100115ce:	46c0      	nop			; (mov r8, r8)
100115d0:	1001b640 	.word	0x1001b640
100115d4:	1001b2d0 	.word	0x1001b2d0
100115d8:	100165f7 	.word	0x100165f7
100115dc:	1001b64c 	.word	0x1001b64c
100115e0:	1001b652 	.word	0x1001b652
100115e4:	1001b2c4 	.word	0x1001b2c4
100115e8:	100108a1 	.word	0x100108a1
100115ec:	10010905 	.word	0x10010905

100115f0 <gapm_get_dev_config_cmd_handler>:
100115f0:	4684      	mov	ip, r0
100115f2:	4663      	mov	r3, ip
100115f4:	b5f0      	push	{r4, r5, r6, r7, lr}
100115f6:	b085      	sub	sp, #20
100115f8:	9100      	str	r1, [sp, #0]
100115fa:	20cf      	movs	r0, #207	; 0xcf
100115fc:	2b01      	cmp	r3, #1
100115fe:	d854      	bhi.n	100116aa <gapm_get_dev_config_cmd_handler+0xba>
10011600:	2900      	cmp	r1, #0
10011602:	d052      	beq.n	100116aa <gapm_get_dev_config_cmd_handler+0xba>
10011604:	2200      	movs	r2, #0
10011606:	492a      	ldr	r1, [pc, #168]	; (100116b0 <gapm_get_dev_config_cmd_handler+0xc0>)
10011608:	ab02      	add	r3, sp, #8
1001160a:	880c      	ldrh	r4, [r1, #0]
1001160c:	8809      	ldrh	r1, [r1, #0]
1001160e:	1d9f      	adds	r7, r3, #6
10011610:	719a      	strb	r2, [r3, #6]
10011612:	4b28      	ldr	r3, [pc, #160]	; (100116b4 <gapm_get_dev_config_cmd_handler+0xc4>)
10011614:	0a09      	lsrs	r1, r1, #8
10011616:	250d      	movs	r5, #13
10011618:	2606      	movs	r6, #6
1001161a:	7159      	strb	r1, [r3, #5]
1001161c:	4661      	mov	r1, ip
1001161e:	701e      	strb	r6, [r3, #0]
10011620:	705d      	strb	r5, [r3, #1]
10011622:	709d      	strb	r5, [r3, #2]
10011624:	70da      	strb	r2, [r3, #3]
10011626:	711c      	strb	r4, [r3, #4]
10011628:	2901      	cmp	r1, #1
1001162a:	d13e      	bne.n	100116aa <gapm_get_dev_config_cmd_handler+0xba>
1001162c:	21d0      	movs	r1, #208	; 0xd0
1001162e:	4c22      	ldr	r4, [pc, #136]	; (100116b8 <gapm_get_dev_config_cmd_handler+0xc8>)
10011630:	0109      	lsls	r1, r1, #4
10011632:	8061      	strh	r1, [r4, #2]
10011634:	4921      	ldr	r1, [pc, #132]	; (100116bc <gapm_get_dev_config_cmd_handler+0xcc>)
10011636:	71da      	strb	r2, [r3, #7]
10011638:	8021      	strh	r1, [r4, #0]
1001163a:	4661      	mov	r1, ip
1001163c:	721e      	strb	r6, [r3, #8]
1001163e:	7199      	strb	r1, [r3, #6]
10011640:	1c18      	adds	r0, r3, #0
10011642:	2109      	movs	r1, #9
10011644:	4b1e      	ldr	r3, [pc, #120]	; (100116c0 <gapm_get_dev_config_cmd_handler+0xd0>)
10011646:	80a5      	strh	r5, [r4, #4]
10011648:	4798      	blx	r3
1001164a:	1c38      	adds	r0, r7, #0
1001164c:	4b1d      	ldr	r3, [pc, #116]	; (100116c4 <gapm_get_dev_config_cmd_handler+0xd4>)
1001164e:	4798      	blx	r3
10011650:	783b      	ldrb	r3, [r7, #0]
10011652:	20e2      	movs	r0, #226	; 0xe2
10011654:	9301      	str	r3, [sp, #4]
10011656:	2b00      	cmp	r3, #0
10011658:	d127      	bne.n	100116aa <gapm_get_dev_config_cmd_handler+0xba>
1001165a:	8821      	ldrh	r1, [r4, #0]
1001165c:	4a1a      	ldr	r2, [pc, #104]	; (100116c8 <gapm_get_dev_config_cmd_handler+0xd8>)
1001165e:	68a7      	ldr	r7, [r4, #8]
10011660:	3b01      	subs	r3, #1
10011662:	4291      	cmp	r1, r2
10011664:	d001      	beq.n	1001166a <gapm_get_dev_config_cmd_handler+0x7a>
10011666:	8023      	strh	r3, [r4, #0]
10011668:	e01a      	b.n	100116a0 <gapm_get_dev_config_cmd_handler+0xb0>
1001166a:	8063      	strh	r3, [r4, #2]
1001166c:	9b00      	ldr	r3, [sp, #0]
1001166e:	1c39      	adds	r1, r7, #0
10011670:	1c58      	adds	r0, r3, #1
10011672:	1c32      	adds	r2, r6, #0
10011674:	4b15      	ldr	r3, [pc, #84]	; (100116cc <gapm_get_dev_config_cmd_handler+0xdc>)
10011676:	4798      	blx	r3
10011678:	79bb      	ldrb	r3, [r7, #6]
1001167a:	9a00      	ldr	r2, [sp, #0]
1001167c:	7013      	strb	r3, [r2, #0]
1001167e:	23d0      	movs	r3, #208	; 0xd0
10011680:	011b      	lsls	r3, r3, #4
10011682:	8023      	strh	r3, [r4, #0]
10011684:	ab02      	add	r3, sp, #8
10011686:	80a5      	strh	r5, [r4, #4]
10011688:	1ddd      	adds	r5, r3, #7
1001168a:	466b      	mov	r3, sp
1001168c:	791b      	ldrb	r3, [r3, #4]
1001168e:	1c28      	adds	r0, r5, #0
10011690:	702b      	strb	r3, [r5, #0]
10011692:	4b0c      	ldr	r3, [pc, #48]	; (100116c4 <gapm_get_dev_config_cmd_handler+0xd4>)
10011694:	4798      	blx	r3
10011696:	782b      	ldrb	r3, [r5, #0]
10011698:	20d0      	movs	r0, #208	; 0xd0
1001169a:	2b00      	cmp	r3, #0
1001169c:	d105      	bne.n	100116aa <gapm_get_dev_config_cmd_handler+0xba>
1001169e:	68a7      	ldr	r7, [r4, #8]
100116a0:	783b      	ldrb	r3, [r7, #0]
100116a2:	7878      	ldrb	r0, [r7, #1]
100116a4:	2b06      	cmp	r3, #6
100116a6:	d000      	beq.n	100116aa <gapm_get_dev_config_cmd_handler+0xba>
100116a8:	20e2      	movs	r0, #226	; 0xe2
100116aa:	b005      	add	sp, #20
100116ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
100116ae:	46c0      	nop			; (mov r8, r8)
100116b0:	1001b2d0 	.word	0x1001b2d0
100116b4:	1001b640 	.word	0x1001b640
100116b8:	1001b2c4 	.word	0x1001b2c4
100116bc:	00000d08 	.word	0x00000d08
100116c0:	100108a1 	.word	0x100108a1
100116c4:	10010905 	.word	0x10010905
100116c8:	0000ffff 	.word	0x0000ffff
100116cc:	100165f7 	.word	0x100165f7

100116d0 <gapm_cancel_cmd_handler>:
100116d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
100116d2:	4916      	ldr	r1, [pc, #88]	; (1001172c <gapm_cancel_cmd_handler+0x5c>)
100116d4:	4816      	ldr	r0, [pc, #88]	; (10011730 <gapm_cancel_cmd_handler+0x60>)
100116d6:	880c      	ldrh	r4, [r1, #0]
100116d8:	8809      	ldrh	r1, [r1, #0]
100116da:	466b      	mov	r3, sp
100116dc:	0a09      	lsrs	r1, r1, #8
100116de:	7141      	strb	r1, [r0, #5]
100116e0:	2102      	movs	r1, #2
100116e2:	2203      	movs	r2, #3
100116e4:	7201      	strb	r1, [r0, #8]
100116e6:	21d0      	movs	r1, #208	; 0xd0
100116e8:	1ddd      	adds	r5, r3, #7
100116ea:	2300      	movs	r3, #0
100116ec:	7104      	strb	r4, [r0, #4]
100116ee:	4c11      	ldr	r4, [pc, #68]	; (10011734 <gapm_cancel_cmd_handler+0x64>)
100116f0:	7002      	strb	r2, [r0, #0]
100116f2:	0109      	lsls	r1, r1, #4
100116f4:	320a      	adds	r2, #10
100116f6:	702b      	strb	r3, [r5, #0]
100116f8:	7042      	strb	r2, [r0, #1]
100116fa:	7082      	strb	r2, [r0, #2]
100116fc:	70c3      	strb	r3, [r0, #3]
100116fe:	8021      	strh	r1, [r4, #0]
10011700:	80a2      	strh	r2, [r4, #4]
10011702:	71c3      	strb	r3, [r0, #7]
10011704:	3a0c      	subs	r2, #12
10011706:	2109      	movs	r1, #9
10011708:	4b0b      	ldr	r3, [pc, #44]	; (10011738 <gapm_cancel_cmd_handler+0x68>)
1001170a:	7182      	strb	r2, [r0, #6]
1001170c:	4798      	blx	r3
1001170e:	1c28      	adds	r0, r5, #0
10011710:	4b0a      	ldr	r3, [pc, #40]	; (1001173c <gapm_cancel_cmd_handler+0x6c>)
10011712:	4798      	blx	r3
10011714:	7828      	ldrb	r0, [r5, #0]
10011716:	2800      	cmp	r0, #0
10011718:	d001      	beq.n	1001171e <gapm_cancel_cmd_handler+0x4e>
1001171a:	20e2      	movs	r0, #226	; 0xe2
1001171c:	e004      	b.n	10011728 <gapm_cancel_cmd_handler+0x58>
1001171e:	68a3      	ldr	r3, [r4, #8]
10011720:	785b      	ldrb	r3, [r3, #1]
10011722:	2b44      	cmp	r3, #68	; 0x44
10011724:	d000      	beq.n	10011728 <gapm_cancel_cmd_handler+0x58>
10011726:	1c18      	adds	r0, r3, #0
10011728:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1001172a:	46c0      	nop			; (mov r8, r8)
1001172c:	1001b2d0 	.word	0x1001b2d0
10011730:	1001b640 	.word	0x1001b640
10011734:	1001b2c4 	.word	0x1001b2c4
10011738:	100108a1 	.word	0x100108a1
1001173c:	10010905 	.word	0x10010905

10011740 <gapm_dev_bdaddr_ind_handler>:
10011740:	b538      	push	{r3, r4, r5, lr}
10011742:	1c05      	adds	r5, r0, #0
10011744:	1c0c      	adds	r4, r1, #0
10011746:	1c48      	adds	r0, r1, #1
10011748:	2206      	movs	r2, #6
1001174a:	1c29      	adds	r1, r5, #0
1001174c:	4b02      	ldr	r3, [pc, #8]	; (10011758 <gapm_dev_bdaddr_ind_handler+0x18>)
1001174e:	4798      	blx	r3
10011750:	79ab      	ldrb	r3, [r5, #6]
10011752:	2000      	movs	r0, #0
10011754:	7023      	strb	r3, [r4, #0]
10011756:	bd38      	pop	{r3, r4, r5, pc}
10011758:	100165f7 	.word	0x100165f7

1001175c <gapm_cmp_evt>:
1001175c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001175e:	7803      	ldrb	r3, [r0, #0]
10011760:	7845      	ldrb	r5, [r0, #1]
10011762:	3b0c      	subs	r3, #12
10011764:	1e18      	subs	r0, r3, #0
10011766:	280b      	cmp	r0, #11
10011768:	d900      	bls.n	1001176c <gapm_cmp_evt+0x10>
1001176a:	e08d      	b.n	10011888 <gapm_cmp_evt+0x12c>
1001176c:	1c0c      	adds	r4, r1, #0
1001176e:	f001 ff1d 	bl	100135ac <__gnu_thumb1_case_uqi>
10011772:	1952      	.short	0x1952
10011774:	068b1919 	.word	0x068b1919
10011778:	8b595906 	.word	0x8b595906
1001177c:	0d8b      	.short	0x0d8b
1001177e:	2300      	movs	r3, #0
10011780:	2d45      	cmp	r5, #69	; 0x45
10011782:	d000      	beq.n	10011786 <gapm_cmp_evt+0x2a>
10011784:	1c2b      	adds	r3, r5, #0
10011786:	7023      	strb	r3, [r4, #0]
10011788:	2002      	movs	r0, #2
1001178a:	e07e      	b.n	1001188a <gapm_cmp_evt+0x12e>
1001178c:	203b      	movs	r0, #59	; 0x3b
1001178e:	2d00      	cmp	r5, #0
10011790:	d100      	bne.n	10011794 <gapm_cmp_evt+0x38>
10011792:	e07a      	b.n	1001188a <gapm_cmp_evt+0x12e>
10011794:	700d      	strb	r5, [r1, #0]
10011796:	1c48      	adds	r0, r1, #1
10011798:	2210      	movs	r2, #16
1001179a:	2100      	movs	r1, #0
1001179c:	4b3b      	ldr	r3, [pc, #236]	; (1001188c <gapm_cmp_evt+0x130>)
1001179e:	4798      	blx	r3
100117a0:	200f      	movs	r0, #15
100117a2:	e072      	b.n	1001188a <gapm_cmp_evt+0x12e>
100117a4:	2d00      	cmp	r5, #0
100117a6:	d134      	bne.n	10011812 <gapm_cmp_evt+0xb6>
100117a8:	4b39      	ldr	r3, [pc, #228]	; (10011890 <gapm_cmp_evt+0x134>)
100117aa:	4798      	blx	r3
100117ac:	1e43      	subs	r3, r0, #1
100117ae:	b2db      	uxtb	r3, r3
100117b0:	1c28      	adds	r0, r5, #0
100117b2:	2b06      	cmp	r3, #6
100117b4:	d869      	bhi.n	1001188a <gapm_cmp_evt+0x12e>
100117b6:	466b      	mov	r3, sp
100117b8:	4e36      	ldr	r6, [pc, #216]	; (10011894 <gapm_cmp_evt+0x138>)
100117ba:	1dd9      	adds	r1, r3, #7
100117bc:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
100117be:	4b36      	ldr	r3, [pc, #216]	; (10011898 <gapm_cmp_evt+0x13c>)
100117c0:	4798      	blx	r3
100117c2:	2312      	movs	r3, #18
100117c4:	4358      	muls	r0, r3
100117c6:	4935      	ldr	r1, [pc, #212]	; (1001189c <gapm_cmp_evt+0x140>)
100117c8:	1809      	adds	r1, r1, r0
100117ca:	1c0b      	adds	r3, r1, #0
100117cc:	894a      	ldrh	r2, [r1, #10]
100117ce:	3308      	adds	r3, #8
100117d0:	8122      	strh	r2, [r4, #8]
100117d2:	784f      	ldrb	r7, [r1, #1]
100117d4:	72a5      	strb	r5, [r4, #10]
100117d6:	7027      	strb	r7, [r4, #0]
100117d8:	898a      	ldrh	r2, [r1, #12]
100117da:	1c60      	adds	r0, r4, #1
100117dc:	81a2      	strh	r2, [r4, #12]
100117de:	88db      	ldrh	r3, [r3, #6]
100117e0:	3102      	adds	r1, #2
100117e2:	81e3      	strh	r3, [r4, #14]
100117e4:	89cb      	ldrh	r3, [r1, #14]
100117e6:	2206      	movs	r2, #6
100117e8:	8223      	strh	r3, [r4, #16]
100117ea:	4b2d      	ldr	r3, [pc, #180]	; (100118a0 <gapm_cmp_evt+0x144>)
100117ec:	4798      	blx	r3
100117ee:	2f00      	cmp	r7, #0
100117f0:	d00a      	beq.n	10011808 <gapm_cmp_evt+0xac>
100117f2:	79a3      	ldrb	r3, [r4, #6]
100117f4:	223f      	movs	r2, #63	; 0x3f
100117f6:	1c19      	adds	r1, r3, #0
100117f8:	3501      	adds	r5, #1
100117fa:	4391      	bics	r1, r2
100117fc:	29c0      	cmp	r1, #192	; 0xc0
100117fe:	d003      	beq.n	10011808 <gapm_cmp_evt+0xac>
10011800:	065b      	lsls	r3, r3, #25
10011802:	0fdb      	lsrs	r3, r3, #31
10011804:	3502      	adds	r5, #2
10011806:	1aed      	subs	r5, r5, r3
10011808:	2301      	movs	r3, #1
1001180a:	425b      	negs	r3, r3
1001180c:	7025      	strb	r5, [r4, #0]
1001180e:	85b3      	strh	r3, [r6, #44]	; 0x2c
10011810:	e038      	b.n	10011884 <gapm_cmp_evt+0x128>
10011812:	700d      	strb	r5, [r1, #0]
10011814:	e004      	b.n	10011820 <gapm_cmp_evt+0xc4>
10011816:	2300      	movs	r3, #0
10011818:	2d45      	cmp	r5, #69	; 0x45
1001181a:	d000      	beq.n	1001181e <gapm_cmp_evt+0xc2>
1001181c:	1c2b      	adds	r3, r5, #0
1001181e:	7023      	strb	r3, [r4, #0]
10011820:	2003      	movs	r0, #3
10011822:	e032      	b.n	1001188a <gapm_cmp_evt+0x12e>
10011824:	4e1b      	ldr	r6, [pc, #108]	; (10011894 <gapm_cmp_evt+0x138>)
10011826:	2100      	movs	r1, #0
10011828:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
1001182a:	4b1b      	ldr	r3, [pc, #108]	; (10011898 <gapm_cmp_evt+0x13c>)
1001182c:	4798      	blx	r3
1001182e:	2807      	cmp	r0, #7
10011830:	d818      	bhi.n	10011864 <gapm_cmp_evt+0x108>
10011832:	2301      	movs	r3, #1
10011834:	425b      	negs	r3, r3
10011836:	85b3      	strh	r3, [r6, #44]	; 0x2c
10011838:	3313      	adds	r3, #19
1001183a:	4358      	muls	r0, r3
1001183c:	4917      	ldr	r1, [pc, #92]	; (1001189c <gapm_cmp_evt+0x140>)
1001183e:	1809      	adds	r1, r1, r0
10011840:	1c0b      	adds	r3, r1, #0
10011842:	894a      	ldrh	r2, [r1, #10]
10011844:	3308      	adds	r3, #8
10011846:	8122      	strh	r2, [r4, #8]
10011848:	784a      	ldrb	r2, [r1, #1]
1001184a:	72a5      	strb	r5, [r4, #10]
1001184c:	7022      	strb	r2, [r4, #0]
1001184e:	898a      	ldrh	r2, [r1, #12]
10011850:	1c60      	adds	r0, r4, #1
10011852:	81a2      	strh	r2, [r4, #12]
10011854:	88db      	ldrh	r3, [r3, #6]
10011856:	3102      	adds	r1, #2
10011858:	81e3      	strh	r3, [r4, #14]
1001185a:	89cb      	ldrh	r3, [r1, #14]
1001185c:	2206      	movs	r2, #6
1001185e:	8223      	strh	r3, [r4, #16]
10011860:	4b0f      	ldr	r3, [pc, #60]	; (100118a0 <gapm_cmp_evt+0x144>)
10011862:	4798      	blx	r3
10011864:	2200      	movs	r2, #0
10011866:	7823      	ldrb	r3, [r4, #0]
10011868:	4293      	cmp	r3, r2
1001186a:	d00a      	beq.n	10011882 <gapm_cmp_evt+0x126>
1001186c:	79a3      	ldrb	r3, [r4, #6]
1001186e:	323f      	adds	r2, #63	; 0x3f
10011870:	1c19      	adds	r1, r3, #0
10011872:	4391      	bics	r1, r2
10011874:	3a3e      	subs	r2, #62	; 0x3e
10011876:	29c0      	cmp	r1, #192	; 0xc0
10011878:	d003      	beq.n	10011882 <gapm_cmp_evt+0x126>
1001187a:	065b      	lsls	r3, r3, #25
1001187c:	0fdb      	lsrs	r3, r3, #31
1001187e:	3202      	adds	r2, #2
10011880:	1ad2      	subs	r2, r2, r3
10011882:	7022      	strb	r2, [r4, #0]
10011884:	2005      	movs	r0, #5
10011886:	e000      	b.n	1001188a <gapm_cmp_evt+0x12e>
10011888:	2000      	movs	r0, #0
1001188a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1001188c:	10016609 	.word	0x10016609
10011890:	10010aad 	.word	0x10010aad
10011894:	1001b362 	.word	0x1001b362
10011898:	10010a71 	.word	0x10010a71
1001189c:	1001b2d2 	.word	0x1001b2d2
100118a0:	100165f7 	.word	0x100165f7

100118a4 <gapm_start_adv_cmd_handler>:
100118a4:	b5f0      	push	{r4, r5, r6, r7, lr}
100118a6:	b089      	sub	sp, #36	; 0x24
100118a8:	9303      	str	r3, [sp, #12]
100118aa:	ab0e      	add	r3, sp, #56	; 0x38
100118ac:	9102      	str	r1, [sp, #8]
100118ae:	cb02      	ldmia	r3!, {r1}
100118b0:	aa08      	add	r2, sp, #32
100118b2:	881b      	ldrh	r3, [r3, #0]
100118b4:	4e3c      	ldr	r6, [pc, #240]	; (100119a8 <gapm_start_adv_cmd_handler+0x104>)
100118b6:	9300      	str	r3, [sp, #0]
100118b8:	ab10      	add	r3, sp, #64	; 0x40
100118ba:	881b      	ldrh	r3, [r3, #0]
100118bc:	240d      	movs	r4, #13
100118be:	469c      	mov	ip, r3
100118c0:	ab11      	add	r3, sp, #68	; 0x44
100118c2:	781b      	ldrb	r3, [r3, #0]
100118c4:	9304      	str	r3, [sp, #16]
100118c6:	ab12      	add	r3, sp, #72	; 0x48
100118c8:	781b      	ldrb	r3, [r3, #0]
100118ca:	9305      	str	r3, [sp, #20]
100118cc:	ab13      	add	r3, sp, #76	; 0x4c
100118ce:	781b      	ldrb	r3, [r3, #0]
100118d0:	9306      	str	r3, [sp, #24]
100118d2:	ab14      	add	r3, sp, #80	; 0x50
100118d4:	781b      	ldrb	r3, [r3, #0]
100118d6:	9301      	str	r3, [sp, #4]
100118d8:	2319      	movs	r3, #25
100118da:	189b      	adds	r3, r3, r2
100118dc:	7fdd      	ldrb	r5, [r3, #31]
100118de:	ab18      	add	r3, sp, #96	; 0x60
100118e0:	881f      	ldrh	r7, [r3, #0]
100118e2:	ab19      	add	r3, sp, #100	; 0x64
100118e4:	781b      	ldrb	r3, [r3, #0]
100118e6:	8832      	ldrh	r2, [r6, #0]
100118e8:	9307      	str	r3, [sp, #28]
100118ea:	4b30      	ldr	r3, [pc, #192]	; (100119ac <gapm_start_adv_cmd_handler+0x108>)
100118ec:	8836      	ldrh	r6, [r6, #0]
100118ee:	711a      	strb	r2, [r3, #4]
100118f0:	466a      	mov	r2, sp
100118f2:	7a12      	ldrb	r2, [r2, #8]
100118f4:	701c      	strb	r4, [r3, #0]
100118f6:	705c      	strb	r4, [r3, #1]
100118f8:	709c      	strb	r4, [r3, #2]
100118fa:	725a      	strb	r2, [r3, #9]
100118fc:	2400      	movs	r4, #0
100118fe:	466a      	mov	r2, sp
10011900:	0a36      	lsrs	r6, r6, #8
10011902:	70dc      	strb	r4, [r3, #3]
10011904:	7218      	strb	r0, [r3, #8]
10011906:	729c      	strb	r4, [r3, #10]
10011908:	715e      	strb	r6, [r3, #5]
1001190a:	72dc      	strb	r4, [r3, #11]
1001190c:	7812      	ldrb	r2, [r2, #0]
1001190e:	380e      	subs	r0, #14
10011910:	731a      	strb	r2, [r3, #12]
10011912:	9a00      	ldr	r2, [sp, #0]
10011914:	0a14      	lsrs	r4, r2, #8
10011916:	4662      	mov	r2, ip
10011918:	739a      	strb	r2, [r3, #14]
1001191a:	4662      	mov	r2, ip
1001191c:	735c      	strb	r4, [r3, #13]
1001191e:	0a14      	lsrs	r4, r2, #8
10011920:	466a      	mov	r2, sp
10011922:	7c12      	ldrb	r2, [r2, #16]
10011924:	73dc      	strb	r4, [r3, #15]
10011926:	741a      	strb	r2, [r3, #16]
10011928:	1c1c      	adds	r4, r3, #0
1001192a:	2801      	cmp	r0, #1
1001192c:	d809      	bhi.n	10011942 <gapm_start_adv_cmd_handler+0x9e>
1001192e:	2900      	cmp	r1, #0
10011930:	d003      	beq.n	1001193a <gapm_start_adv_cmd_handler+0x96>
10011932:	481f      	ldr	r0, [pc, #124]	; (100119b0 <gapm_start_adv_cmd_handler+0x10c>)
10011934:	2206      	movs	r2, #6
10011936:	4b1f      	ldr	r3, [pc, #124]	; (100119b4 <gapm_start_adv_cmd_handler+0x110>)
10011938:	4798      	blx	r3
1001193a:	466b      	mov	r3, sp
1001193c:	7b1b      	ldrb	r3, [r3, #12]
1001193e:	75e3      	strb	r3, [r4, #23]
10011940:	e014      	b.n	1001196c <gapm_start_adv_cmd_handler+0xc8>
10011942:	466b      	mov	r3, sp
10011944:	7d1b      	ldrb	r3, [r3, #20]
10011946:	9915      	ldr	r1, [sp, #84]	; 0x54
10011948:	7463      	strb	r3, [r4, #17]
1001194a:	466b      	mov	r3, sp
1001194c:	7e1b      	ldrb	r3, [r3, #24]
1001194e:	9a01      	ldr	r2, [sp, #4]
10011950:	74a3      	strb	r3, [r4, #18]
10011952:	466b      	mov	r3, sp
10011954:	791b      	ldrb	r3, [r3, #4]
10011956:	4818      	ldr	r0, [pc, #96]	; (100119b8 <gapm_start_adv_cmd_handler+0x114>)
10011958:	4e16      	ldr	r6, [pc, #88]	; (100119b4 <gapm_start_adv_cmd_handler+0x110>)
1001195a:	74e3      	strb	r3, [r4, #19]
1001195c:	47b0      	blx	r6
1001195e:	1c23      	adds	r3, r4, #0
10011960:	4816      	ldr	r0, [pc, #88]	; (100119bc <gapm_start_adv_cmd_handler+0x118>)
10011962:	3330      	adds	r3, #48	; 0x30
10011964:	9917      	ldr	r1, [sp, #92]	; 0x5c
10011966:	1c2a      	adds	r2, r5, #0
10011968:	701d      	strb	r5, [r3, #0]
1001196a:	47b0      	blx	r6
1001196c:	1c22      	adds	r2, r4, #0
1001196e:	23a5      	movs	r3, #165	; 0xa5
10011970:	3250      	adds	r2, #80	; 0x50
10011972:	7013      	strb	r3, [r2, #0]
10011974:	1c22      	adds	r2, r4, #0
10011976:	3251      	adds	r2, #81	; 0x51
10011978:	7013      	strb	r3, [r2, #0]
1001197a:	1c23      	adds	r3, r4, #0
1001197c:	1c22      	adds	r2, r4, #0
1001197e:	3352      	adds	r3, #82	; 0x52
10011980:	701f      	strb	r7, [r3, #0]
10011982:	3253      	adds	r2, #83	; 0x53
10011984:	0a3b      	lsrs	r3, r7, #8
10011986:	7013      	strb	r3, [r2, #0]
10011988:	466a      	mov	r2, sp
1001198a:	1c23      	adds	r3, r4, #0
1001198c:	7f12      	ldrb	r2, [r2, #28]
1001198e:	3354      	adds	r3, #84	; 0x54
10011990:	701a      	strb	r2, [r3, #0]
10011992:	234d      	movs	r3, #77	; 0x4d
10011994:	2500      	movs	r5, #0
10011996:	71a3      	strb	r3, [r4, #6]
10011998:	1c20      	adds	r0, r4, #0
1001199a:	2155      	movs	r1, #85	; 0x55
1001199c:	4b08      	ldr	r3, [pc, #32]	; (100119c0 <gapm_start_adv_cmd_handler+0x11c>)
1001199e:	71e5      	strb	r5, [r4, #7]
100119a0:	4798      	blx	r3
100119a2:	1c28      	adds	r0, r5, #0
100119a4:	b009      	add	sp, #36	; 0x24
100119a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
100119a8:	1001b2d0 	.word	0x1001b2d0
100119ac:	1001b640 	.word	0x1001b640
100119b0:	1001b651 	.word	0x1001b651
100119b4:	100165f7 	.word	0x100165f7
100119b8:	1001b654 	.word	0x1001b654
100119bc:	1001b671 	.word	0x1001b671
100119c0:	100108a1 	.word	0x100108a1

100119c4 <get_gap_local_addr_type>:
100119c4:	4b04      	ldr	r3, [pc, #16]	; (100119d8 <get_gap_local_addr_type+0x14>)
100119c6:	2001      	movs	r0, #1
100119c8:	791b      	ldrb	r3, [r3, #4]
100119ca:	2b02      	cmp	r3, #2
100119cc:	d003      	beq.n	100119d6 <get_gap_local_addr_type+0x12>
100119ce:	3b03      	subs	r3, #3
100119d0:	4258      	negs	r0, r3
100119d2:	4158      	adcs	r0, r3
100119d4:	0040      	lsls	r0, r0, #1
100119d6:	4770      	bx	lr
100119d8:	1001b362 	.word	0x1001b362

100119dc <gapm_adv_report_evt_handler>:
100119dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100119de:	7843      	ldrb	r3, [r0, #1]
100119e0:	1c05      	adds	r5, r0, #0
100119e2:	9301      	str	r3, [sp, #4]
100119e4:	466b      	mov	r3, sp
100119e6:	1c0c      	adds	r4, r1, #0
100119e8:	791b      	ldrb	r3, [r3, #4]
100119ea:	7806      	ldrb	r6, [r0, #0]
100119ec:	2206      	movs	r2, #6
100119ee:	704b      	strb	r3, [r1, #1]
100119f0:	1c88      	adds	r0, r1, #2
100119f2:	4f1b      	ldr	r7, [pc, #108]	; (10011a60 <gapm_adv_report_evt_handler+0x84>)
100119f4:	1ca9      	adds	r1, r5, #2
100119f6:	47b8      	blx	r7
100119f8:	1c20      	adds	r0, r4, #0
100119fa:	1c29      	adds	r1, r5, #0
100119fc:	7a2a      	ldrb	r2, [r5, #8]
100119fe:	3008      	adds	r0, #8
10011a00:	77c2      	strb	r2, [r0, #31]
10011a02:	3109      	adds	r1, #9
10011a04:	3528      	adds	r5, #40	; 0x28
10011a06:	47b8      	blx	r7
10011a08:	782b      	ldrb	r3, [r5, #0]
10011a0a:	b25a      	sxtb	r2, r3
10011a0c:	2a00      	cmp	r2, #0
10011a0e:	da01      	bge.n	10011a14 <gapm_adv_report_evt_handler+0x38>
10011a10:	3301      	adds	r3, #1
10011a12:	b2db      	uxtb	r3, r3
10011a14:	1c22      	adds	r2, r4, #0
10011a16:	3228      	adds	r2, #40	; 0x28
10011a18:	7013      	strb	r3, [r2, #0]
10011a1a:	2200      	movs	r2, #0
10011a1c:	9b01      	ldr	r3, [sp, #4]
10011a1e:	4293      	cmp	r3, r2
10011a20:	d00a      	beq.n	10011a38 <gapm_adv_report_evt_handler+0x5c>
10011a22:	79e3      	ldrb	r3, [r4, #7]
10011a24:	323f      	adds	r2, #63	; 0x3f
10011a26:	1c19      	adds	r1, r3, #0
10011a28:	4391      	bics	r1, r2
10011a2a:	3a3e      	subs	r2, #62	; 0x3e
10011a2c:	29c0      	cmp	r1, #192	; 0xc0
10011a2e:	d003      	beq.n	10011a38 <gapm_adv_report_evt_handler+0x5c>
10011a30:	065b      	lsls	r3, r3, #25
10011a32:	0fdb      	lsrs	r3, r3, #31
10011a34:	3202      	adds	r2, #2
10011a36:	1ad2      	subs	r2, r2, r3
10011a38:	7062      	strb	r2, [r4, #1]
10011a3a:	2e04      	cmp	r6, #4
10011a3c:	d80f      	bhi.n	10011a5e <gapm_adv_report_evt_handler+0x82>
10011a3e:	1c30      	adds	r0, r6, #0
10011a40:	f001 fdb4 	bl	100135ac <__gnu_thumb1_case_uqi>
10011a44:	09070503 	.word	0x09070503
10011a48:	0b          	.byte	0x0b
10011a49:	00          	.byte	0x00
10011a4a:	2300      	movs	r3, #0
10011a4c:	e006      	b.n	10011a5c <gapm_adv_report_evt_handler+0x80>
10011a4e:	2301      	movs	r3, #1
10011a50:	e004      	b.n	10011a5c <gapm_adv_report_evt_handler+0x80>
10011a52:	2302      	movs	r3, #2
10011a54:	e002      	b.n	10011a5c <gapm_adv_report_evt_handler+0x80>
10011a56:	2303      	movs	r3, #3
10011a58:	e000      	b.n	10011a5c <gapm_adv_report_evt_handler+0x80>
10011a5a:	2305      	movs	r3, #5
10011a5c:	7023      	strb	r3, [r4, #0]
10011a5e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10011a60:	100165f7 	.word	0x100165f7

10011a64 <gapm_resolv_addr_cmd_handler>:
10011a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10011a66:	2314      	movs	r3, #20
10011a68:	4c12      	ldr	r4, [pc, #72]	; (10011ab4 <gapm_resolv_addr_cmd_handler+0x50>)
10011a6a:	1c17      	adds	r7, r2, #0
10011a6c:	7023      	strb	r3, [r4, #0]
10011a6e:	3b07      	subs	r3, #7
10011a70:	7063      	strb	r3, [r4, #1]
10011a72:	70a3      	strb	r3, [r4, #2]
10011a74:	2300      	movs	r3, #0
10011a76:	70e3      	strb	r3, [r4, #3]
10011a78:	4b0f      	ldr	r3, [pc, #60]	; (10011ab8 <gapm_resolv_addr_cmd_handler+0x54>)
10011a7a:	1c05      	adds	r5, r0, #0
10011a7c:	881a      	ldrh	r2, [r3, #0]
10011a7e:	881b      	ldrh	r3, [r3, #0]
10011a80:	4e0e      	ldr	r6, [pc, #56]	; (10011abc <gapm_resolv_addr_cmd_handler+0x58>)
10011a82:	0a1b      	lsrs	r3, r3, #8
10011a84:	7163      	strb	r3, [r4, #5]
10011a86:	2317      	movs	r3, #23
10011a88:	012d      	lsls	r5, r5, #4
10011a8a:	7122      	strb	r2, [r4, #4]
10011a8c:	7260      	strb	r0, [r4, #9]
10011a8e:	2206      	movs	r2, #6
10011a90:	480b      	ldr	r0, [pc, #44]	; (10011ac0 <gapm_resolv_addr_cmd_handler+0x5c>)
10011a92:	7223      	strb	r3, [r4, #8]
10011a94:	47b0      	blx	r6
10011a96:	1c39      	adds	r1, r7, #0
10011a98:	1c2a      	adds	r2, r5, #0
10011a9a:	480a      	ldr	r0, [pc, #40]	; (10011ac4 <gapm_resolv_addr_cmd_handler+0x60>)
10011a9c:	47b0      	blx	r6
10011a9e:	1c29      	adds	r1, r5, #0
10011aa0:	3110      	adds	r1, #16
10011aa2:	1c0b      	adds	r3, r1, #0
10011aa4:	3b08      	subs	r3, #8
10011aa6:	71a3      	strb	r3, [r4, #6]
10011aa8:	121b      	asrs	r3, r3, #8
10011aaa:	71e3      	strb	r3, [r4, #7]
10011aac:	1c20      	adds	r0, r4, #0
10011aae:	4b06      	ldr	r3, [pc, #24]	; (10011ac8 <gapm_resolv_addr_cmd_handler+0x64>)
10011ab0:	4798      	blx	r3
10011ab2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10011ab4:	1001b640 	.word	0x1001b640
10011ab8:	1001b2d0 	.word	0x1001b2d0
10011abc:	100165f7 	.word	0x100165f7
10011ac0:	1001b64a 	.word	0x1001b64a
10011ac4:	1001b650 	.word	0x1001b650
10011ac8:	100108a1 	.word	0x100108a1

10011acc <gapm_addr_solved_ind_handler>:
10011acc:	b570      	push	{r4, r5, r6, lr}
10011ace:	1c04      	adds	r4, r0, #0
10011ad0:	1c08      	adds	r0, r1, #0
10011ad2:	1c0d      	adds	r5, r1, #0
10011ad4:	4e05      	ldr	r6, [pc, #20]	; (10011aec <gapm_addr_solved_ind_handler+0x20>)
10011ad6:	1c21      	adds	r1, r4, #0
10011ad8:	2206      	movs	r2, #6
10011ada:	3011      	adds	r0, #17
10011adc:	47b0      	blx	r6
10011ade:	1c68      	adds	r0, r5, #1
10011ae0:	1da1      	adds	r1, r4, #6
10011ae2:	2210      	movs	r2, #16
10011ae4:	47b0      	blx	r6
10011ae6:	2300      	movs	r3, #0
10011ae8:	702b      	strb	r3, [r5, #0]
10011aea:	bd70      	pop	{r4, r5, r6, pc}
10011aec:	100165f7 	.word	0x100165f7

10011af0 <gapm_profile_added_ind_handler>:
10011af0:	b510      	push	{r4, lr}
10011af2:	7843      	ldrb	r3, [r0, #1]
10011af4:	7902      	ldrb	r2, [r0, #4]
10011af6:	7944      	ldrb	r4, [r0, #5]
10011af8:	7800      	ldrb	r0, [r0, #0]
10011afa:	021b      	lsls	r3, r3, #8
10011afc:	4303      	orrs	r3, r0
10011afe:	2b1b      	cmp	r3, #27
10011b00:	d104      	bne.n	10011b0c <gapm_profile_added_ind_handler+0x1c>
10011b02:	2300      	movs	r3, #0
10011b04:	700b      	strb	r3, [r1, #0]
10011b06:	0223      	lsls	r3, r4, #8
10011b08:	4313      	orrs	r3, r2
10011b0a:	804b      	strh	r3, [r1, #2]
10011b0c:	203b      	movs	r0, #59	; 0x3b
10011b0e:	bd10      	pop	{r4, pc}

10011b10 <gattc_read_req_ind_parser>:
10011b10:	7843      	ldrb	r3, [r0, #1]
10011b12:	7802      	ldrb	r2, [r0, #0]
10011b14:	021b      	lsls	r3, r3, #8
10011b16:	4313      	orrs	r3, r2
10011b18:	804b      	strh	r3, [r1, #2]
10011b1a:	4770      	bx	lr

10011b1c <gattc_write_req_ind_parser>:
10011b1c:	b508      	push	{r3, lr}
10011b1e:	1c13      	adds	r3, r2, #0
10011b20:	0a00      	lsrs	r0, r0, #8
10011b22:	8010      	strh	r0, [r2, #0]
10011b24:	784a      	ldrb	r2, [r1, #1]
10011b26:	7808      	ldrb	r0, [r1, #0]
10011b28:	0212      	lsls	r2, r2, #8
10011b2a:	4302      	orrs	r2, r0
10011b2c:	805a      	strh	r2, [r3, #2]
10011b2e:	78ca      	ldrb	r2, [r1, #3]
10011b30:	7888      	ldrb	r0, [r1, #2]
10011b32:	0212      	lsls	r2, r2, #8
10011b34:	4302      	orrs	r2, r0
10011b36:	809a      	strh	r2, [r3, #4]
10011b38:	794a      	ldrb	r2, [r1, #5]
10011b3a:	7908      	ldrb	r0, [r1, #4]
10011b3c:	0212      	lsls	r2, r2, #8
10011b3e:	4302      	orrs	r2, r0
10011b40:	80da      	strh	r2, [r3, #6]
10011b42:	3308      	adds	r3, #8
10011b44:	1c18      	adds	r0, r3, #0
10011b46:	3106      	adds	r1, #6
10011b48:	4b01      	ldr	r3, [pc, #4]	; (10011b50 <gattc_write_req_ind_parser+0x34>)
10011b4a:	4798      	blx	r3
10011b4c:	bd08      	pop	{r3, pc}
10011b4e:	46c0      	nop			; (mov r8, r8)
10011b50:	100165f7 	.word	0x100165f7

10011b54 <gattc_att_info_req_parser>:
10011b54:	7843      	ldrb	r3, [r0, #1]
10011b56:	7802      	ldrb	r2, [r0, #0]
10011b58:	021b      	lsls	r3, r3, #8
10011b5a:	4313      	orrs	r3, r2
10011b5c:	800b      	strh	r3, [r1, #0]
10011b5e:	4770      	bx	lr

10011b60 <gattc_read_cfm>:
10011b60:	b538      	push	{r3, r4, r5, lr}
10011b62:	2514      	movs	r5, #20
10011b64:	1c1c      	adds	r4, r3, #0
10011b66:	4b14      	ldr	r3, [pc, #80]	; (10011bb8 <gattc_read_cfm+0x58>)
10011b68:	70d9      	strb	r1, [r3, #3]
10011b6a:	4914      	ldr	r1, [pc, #80]	; (10011bbc <gattc_read_cfm+0x5c>)
10011b6c:	701d      	strb	r5, [r3, #0]
10011b6e:	3d08      	subs	r5, #8
10011b70:	705d      	strb	r5, [r3, #1]
10011b72:	709d      	strb	r5, [r3, #2]
10011b74:	880d      	ldrh	r5, [r1, #0]
10011b76:	8809      	ldrh	r1, [r1, #0]
10011b78:	7218      	strb	r0, [r3, #8]
10011b7a:	0a09      	lsrs	r1, r1, #8
10011b7c:	7159      	strb	r1, [r3, #5]
10011b7e:	0a00      	lsrs	r0, r0, #8
10011b80:	0a21      	lsrs	r1, r4, #8
10011b82:	711d      	strb	r5, [r3, #4]
10011b84:	7258      	strb	r0, [r3, #9]
10011b86:	729c      	strb	r4, [r3, #10]
10011b88:	72d9      	strb	r1, [r3, #11]
10011b8a:	731a      	strb	r2, [r3, #12]
10011b8c:	1c1d      	adds	r5, r3, #0
10011b8e:	2c00      	cmp	r4, #0
10011b90:	d007      	beq.n	10011ba2 <gattc_read_cfm+0x42>
10011b92:	9904      	ldr	r1, [sp, #16]
10011b94:	1c22      	adds	r2, r4, #0
10011b96:	480a      	ldr	r0, [pc, #40]	; (10011bc0 <gattc_read_cfm+0x60>)
10011b98:	4b0a      	ldr	r3, [pc, #40]	; (10011bc4 <gattc_read_cfm+0x64>)
10011b9a:	340d      	adds	r4, #13
10011b9c:	4798      	blx	r3
10011b9e:	b2a1      	uxth	r1, r4
10011ba0:	e001      	b.n	10011ba6 <gattc_read_cfm+0x46>
10011ba2:	210e      	movs	r1, #14
10011ba4:	735c      	strb	r4, [r3, #13]
10011ba6:	1c0b      	adds	r3, r1, #0
10011ba8:	3b08      	subs	r3, #8
10011baa:	71ab      	strb	r3, [r5, #6]
10011bac:	121b      	asrs	r3, r3, #8
10011bae:	71eb      	strb	r3, [r5, #7]
10011bb0:	1c28      	adds	r0, r5, #0
10011bb2:	4b05      	ldr	r3, [pc, #20]	; (10011bc8 <gattc_read_cfm+0x68>)
10011bb4:	4798      	blx	r3
10011bb6:	bd38      	pop	{r3, r4, r5, pc}
10011bb8:	1001b640 	.word	0x1001b640
10011bbc:	1001b2d0 	.word	0x1001b2d0
10011bc0:	1001b64d 	.word	0x1001b64d
10011bc4:	100165f7 	.word	0x100165f7
10011bc8:	100108a1 	.word	0x100108a1

10011bcc <gattc_write_cfm>:
10011bcc:	4b0d      	ldr	r3, [pc, #52]	; (10011c04 <gattc_write_cfm+0x38>)
10011bce:	b510      	push	{r4, lr}
10011bd0:	729a      	strb	r2, [r3, #10]
10011bd2:	2203      	movs	r2, #3
10011bd4:	2416      	movs	r4, #22
10011bd6:	719a      	strb	r2, [r3, #6]
10011bd8:	2200      	movs	r2, #0
10011bda:	70d9      	strb	r1, [r3, #3]
10011bdc:	490a      	ldr	r1, [pc, #40]	; (10011c08 <gattc_write_cfm+0x3c>)
10011bde:	701c      	strb	r4, [r3, #0]
10011be0:	3c0a      	subs	r4, #10
10011be2:	705c      	strb	r4, [r3, #1]
10011be4:	709c      	strb	r4, [r3, #2]
10011be6:	880c      	ldrh	r4, [r1, #0]
10011be8:	8809      	ldrh	r1, [r1, #0]
10011bea:	7218      	strb	r0, [r3, #8]
10011bec:	0a09      	lsrs	r1, r1, #8
10011bee:	0a00      	lsrs	r0, r0, #8
10011bf0:	711c      	strb	r4, [r3, #4]
10011bf2:	7159      	strb	r1, [r3, #5]
10011bf4:	7258      	strb	r0, [r3, #9]
10011bf6:	71da      	strb	r2, [r3, #7]
10011bf8:	1c18      	adds	r0, r3, #0
10011bfa:	210b      	movs	r1, #11
10011bfc:	4b03      	ldr	r3, [pc, #12]	; (10011c0c <gattc_write_cfm+0x40>)
10011bfe:	4798      	blx	r3
10011c00:	bd10      	pop	{r4, pc}
10011c02:	46c0      	nop			; (mov r8, r8)
10011c04:	1001b640 	.word	0x1001b640
10011c08:	1001b2d0 	.word	0x1001b2d0
10011c0c:	100108a1 	.word	0x100108a1

10011c10 <gattc_att_info_cfm>:
10011c10:	b538      	push	{r3, r4, r5, lr}
10011c12:	4c0e      	ldr	r4, [pc, #56]	; (10011c4c <gattc_att_info_cfm+0x3c>)
10011c14:	2518      	movs	r5, #24
10011c16:	7323      	strb	r3, [r4, #12]
10011c18:	2305      	movs	r3, #5
10011c1a:	71a3      	strb	r3, [r4, #6]
10011c1c:	2300      	movs	r3, #0
10011c1e:	70e1      	strb	r1, [r4, #3]
10011c20:	490b      	ldr	r1, [pc, #44]	; (10011c50 <gattc_att_info_cfm+0x40>)
10011c22:	7025      	strb	r5, [r4, #0]
10011c24:	3d0c      	subs	r5, #12
10011c26:	7065      	strb	r5, [r4, #1]
10011c28:	70a5      	strb	r5, [r4, #2]
10011c2a:	880d      	ldrh	r5, [r1, #0]
10011c2c:	8809      	ldrh	r1, [r1, #0]
10011c2e:	7220      	strb	r0, [r4, #8]
10011c30:	0a09      	lsrs	r1, r1, #8
10011c32:	0a00      	lsrs	r0, r0, #8
10011c34:	7161      	strb	r1, [r4, #5]
10011c36:	7260      	strb	r0, [r4, #9]
10011c38:	72a2      	strb	r2, [r4, #10]
10011c3a:	71e3      	strb	r3, [r4, #7]
10011c3c:	0a12      	lsrs	r2, r2, #8
10011c3e:	1c20      	adds	r0, r4, #0
10011c40:	210d      	movs	r1, #13
10011c42:	4b04      	ldr	r3, [pc, #16]	; (10011c54 <gattc_att_info_cfm+0x44>)
10011c44:	7125      	strb	r5, [r4, #4]
10011c46:	72e2      	strb	r2, [r4, #11]
10011c48:	4798      	blx	r3
10011c4a:	bd38      	pop	{r3, r4, r5, pc}
10011c4c:	1001b640 	.word	0x1001b640
10011c50:	1001b2d0 	.word	0x1001b2d0
10011c54:	100108a1 	.word	0x100108a1

10011c58 <gattc_send_evt_cmd_handler>:
10011c58:	b570      	push	{r4, r5, r6, lr}
10011c5a:	2610      	movs	r6, #16
10011c5c:	ac04      	add	r4, sp, #16
10011c5e:	8825      	ldrh	r5, [r4, #0]
10011c60:	4c15      	ldr	r4, [pc, #84]	; (10011cb8 <gattc_send_evt_cmd_handler+0x60>)
10011c62:	70e2      	strb	r2, [r4, #3]
10011c64:	4a15      	ldr	r2, [pc, #84]	; (10011cbc <gattc_send_evt_cmd_handler+0x64>)
10011c66:	7026      	strb	r6, [r4, #0]
10011c68:	3e04      	subs	r6, #4
10011c6a:	7066      	strb	r6, [r4, #1]
10011c6c:	70a6      	strb	r6, [r4, #2]
10011c6e:	8816      	ldrh	r6, [r2, #0]
10011c70:	8812      	ldrh	r2, [r2, #0]
10011c72:	7220      	strb	r0, [r4, #8]
10011c74:	0a12      	lsrs	r2, r2, #8
10011c76:	7162      	strb	r2, [r4, #5]
10011c78:	4a11      	ldr	r2, [pc, #68]	; (10011cc0 <gattc_send_evt_cmd_handler+0x68>)
10011c7a:	7321      	strb	r1, [r4, #12]
10011c7c:	8812      	ldrh	r2, [r2, #0]
10011c7e:	73a5      	strb	r5, [r4, #14]
10011c80:	3201      	adds	r2, #1
10011c82:	7262      	strb	r2, [r4, #9]
10011c84:	1212      	asrs	r2, r2, #8
10011c86:	72a2      	strb	r2, [r4, #10]
10011c88:	2200      	movs	r2, #0
10011c8a:	72e2      	strb	r2, [r4, #11]
10011c8c:	0a0a      	lsrs	r2, r1, #8
10011c8e:	7362      	strb	r2, [r4, #13]
10011c90:	0a2a      	lsrs	r2, r5, #8
10011c92:	73e2      	strb	r2, [r4, #15]
10011c94:	1c19      	adds	r1, r3, #0
10011c96:	1c2a      	adds	r2, r5, #0
10011c98:	4b0a      	ldr	r3, [pc, #40]	; (10011cc4 <gattc_send_evt_cmd_handler+0x6c>)
10011c9a:	3510      	adds	r5, #16
10011c9c:	480a      	ldr	r0, [pc, #40]	; (10011cc8 <gattc_send_evt_cmd_handler+0x70>)
10011c9e:	7126      	strb	r6, [r4, #4]
10011ca0:	4798      	blx	r3
10011ca2:	b2a9      	uxth	r1, r5
10011ca4:	1c0b      	adds	r3, r1, #0
10011ca6:	3b08      	subs	r3, #8
10011ca8:	71a3      	strb	r3, [r4, #6]
10011caa:	121b      	asrs	r3, r3, #8
10011cac:	71e3      	strb	r3, [r4, #7]
10011cae:	1c20      	adds	r0, r4, #0
10011cb0:	4b06      	ldr	r3, [pc, #24]	; (10011ccc <gattc_send_evt_cmd_handler+0x74>)
10011cb2:	4798      	blx	r3
10011cb4:	bd70      	pop	{r4, r5, r6, pc}
10011cb6:	46c0      	nop			; (mov r8, r8)
10011cb8:	1001b640 	.word	0x1001b640
10011cbc:	1001b2d0 	.word	0x1001b2d0
10011cc0:	1001a40c 	.word	0x1001a40c
10011cc4:	100165f7 	.word	0x100165f7
10011cc8:	1001b650 	.word	0x1001b650
10011ccc:	100108a1 	.word	0x100108a1

10011cd0 <gattc_event_cfm_handler>:
10011cd0:	220e      	movs	r2, #14
10011cd2:	b508      	push	{r3, lr}
10011cd4:	4b0b      	ldr	r3, [pc, #44]	; (10011d04 <gattc_event_cfm_handler+0x34>)
10011cd6:	701a      	strb	r2, [r3, #0]
10011cd8:	3a02      	subs	r2, #2
10011cda:	705a      	strb	r2, [r3, #1]
10011cdc:	709a      	strb	r2, [r3, #2]
10011cde:	4a0a      	ldr	r2, [pc, #40]	; (10011d08 <gattc_event_cfm_handler+0x38>)
10011ce0:	70d8      	strb	r0, [r3, #3]
10011ce2:	8810      	ldrh	r0, [r2, #0]
10011ce4:	8812      	ldrh	r2, [r2, #0]
10011ce6:	7219      	strb	r1, [r3, #8]
10011ce8:	0a12      	lsrs	r2, r2, #8
10011cea:	715a      	strb	r2, [r3, #5]
10011cec:	2202      	movs	r2, #2
10011cee:	719a      	strb	r2, [r3, #6]
10011cf0:	2200      	movs	r2, #0
10011cf2:	0a09      	lsrs	r1, r1, #8
10011cf4:	7118      	strb	r0, [r3, #4]
10011cf6:	7259      	strb	r1, [r3, #9]
10011cf8:	71da      	strb	r2, [r3, #7]
10011cfa:	1c18      	adds	r0, r3, #0
10011cfc:	210a      	movs	r1, #10
10011cfe:	4b03      	ldr	r3, [pc, #12]	; (10011d0c <gattc_event_cfm_handler+0x3c>)
10011d00:	4798      	blx	r3
10011d02:	bd08      	pop	{r3, pc}
10011d04:	1001b640 	.word	0x1001b640
10011d08:	1001b2d0 	.word	0x1001b2d0
10011d0c:	100108a1 	.word	0x100108a1

10011d10 <gattc_disc_svc_ind_parser>:
10011d10:	b570      	push	{r4, r5, r6, lr}
10011d12:	1c15      	adds	r5, r2, #0
10011d14:	0a00      	lsrs	r0, r0, #8
10011d16:	8010      	strh	r0, [r2, #0]
10011d18:	784b      	ldrb	r3, [r1, #1]
10011d1a:	780a      	ldrb	r2, [r1, #0]
10011d1c:	021b      	lsls	r3, r3, #8
10011d1e:	4313      	orrs	r3, r2
10011d20:	806b      	strh	r3, [r5, #2]
10011d22:	78cb      	ldrb	r3, [r1, #3]
10011d24:	788a      	ldrb	r2, [r1, #2]
10011d26:	021b      	lsls	r3, r3, #8
10011d28:	4313      	orrs	r3, r2
10011d2a:	80ab      	strh	r3, [r5, #4]
10011d2c:	790e      	ldrb	r6, [r1, #4]
10011d2e:	4b05      	ldr	r3, [pc, #20]	; (10011d44 <gattc_disc_svc_ind_parser+0x34>)
10011d30:	1c30      	adds	r0, r6, #0
10011d32:	1c0c      	adds	r4, r1, #0
10011d34:	4798      	blx	r3
10011d36:	1c32      	adds	r2, r6, #0
10011d38:	71a8      	strb	r0, [r5, #6]
10011d3a:	1d61      	adds	r1, r4, #5
10011d3c:	1de8      	adds	r0, r5, #7
10011d3e:	4b02      	ldr	r3, [pc, #8]	; (10011d48 <gattc_disc_svc_ind_parser+0x38>)
10011d40:	4798      	blx	r3
10011d42:	bd70      	pop	{r4, r5, r6, pc}
10011d44:	1000fbe1 	.word	0x1000fbe1
10011d48:	100165f7 	.word	0x100165f7

10011d4c <gattc_disc_svc_incl_ind_parser>:
10011d4c:	b570      	push	{r4, r5, r6, lr}
10011d4e:	1c15      	adds	r5, r2, #0
10011d50:	0a00      	lsrs	r0, r0, #8
10011d52:	8010      	strh	r0, [r2, #0]
10011d54:	784b      	ldrb	r3, [r1, #1]
10011d56:	780a      	ldrb	r2, [r1, #0]
10011d58:	021b      	lsls	r3, r3, #8
10011d5a:	4313      	orrs	r3, r2
10011d5c:	806b      	strh	r3, [r5, #2]
10011d5e:	78cb      	ldrb	r3, [r1, #3]
10011d60:	788a      	ldrb	r2, [r1, #2]
10011d62:	021b      	lsls	r3, r3, #8
10011d64:	4313      	orrs	r3, r2
10011d66:	80ab      	strh	r3, [r5, #4]
10011d68:	794b      	ldrb	r3, [r1, #5]
10011d6a:	790a      	ldrb	r2, [r1, #4]
10011d6c:	021b      	lsls	r3, r3, #8
10011d6e:	4313      	orrs	r3, r2
10011d70:	80eb      	strh	r3, [r5, #6]
10011d72:	798e      	ldrb	r6, [r1, #6]
10011d74:	4b05      	ldr	r3, [pc, #20]	; (10011d8c <gattc_disc_svc_incl_ind_parser+0x40>)
10011d76:	1c30      	adds	r0, r6, #0
10011d78:	1c0c      	adds	r4, r1, #0
10011d7a:	4798      	blx	r3
10011d7c:	7228      	strb	r0, [r5, #8]
10011d7e:	1c28      	adds	r0, r5, #0
10011d80:	1c32      	adds	r2, r6, #0
10011d82:	1de1      	adds	r1, r4, #7
10011d84:	4b02      	ldr	r3, [pc, #8]	; (10011d90 <gattc_disc_svc_incl_ind_parser+0x44>)
10011d86:	3009      	adds	r0, #9
10011d88:	4798      	blx	r3
10011d8a:	bd70      	pop	{r4, r5, r6, pc}
10011d8c:	1000fbe1 	.word	0x1000fbe1
10011d90:	100165f7 	.word	0x100165f7

10011d94 <gattc_disc_char_ind_parser>:
10011d94:	b570      	push	{r4, r5, r6, lr}
10011d96:	1c15      	adds	r5, r2, #0
10011d98:	0a00      	lsrs	r0, r0, #8
10011d9a:	8010      	strh	r0, [r2, #0]
10011d9c:	784b      	ldrb	r3, [r1, #1]
10011d9e:	780a      	ldrb	r2, [r1, #0]
10011da0:	021b      	lsls	r3, r3, #8
10011da2:	4313      	orrs	r3, r2
10011da4:	806b      	strh	r3, [r5, #2]
10011da6:	78cb      	ldrb	r3, [r1, #3]
10011da8:	788a      	ldrb	r2, [r1, #2]
10011daa:	021b      	lsls	r3, r3, #8
10011dac:	4313      	orrs	r3, r2
10011dae:	80ab      	strh	r3, [r5, #4]
10011db0:	790b      	ldrb	r3, [r1, #4]
10011db2:	1c0c      	adds	r4, r1, #0
10011db4:	71ab      	strb	r3, [r5, #6]
10011db6:	794e      	ldrb	r6, [r1, #5]
10011db8:	4b05      	ldr	r3, [pc, #20]	; (10011dd0 <gattc_disc_char_ind_parser+0x3c>)
10011dba:	1c30      	adds	r0, r6, #0
10011dbc:	4798      	blx	r3
10011dbe:	71e8      	strb	r0, [r5, #7]
10011dc0:	1c28      	adds	r0, r5, #0
10011dc2:	1c32      	adds	r2, r6, #0
10011dc4:	1da1      	adds	r1, r4, #6
10011dc6:	4b03      	ldr	r3, [pc, #12]	; (10011dd4 <gattc_disc_char_ind_parser+0x40>)
10011dc8:	3008      	adds	r0, #8
10011dca:	4798      	blx	r3
10011dcc:	bd70      	pop	{r4, r5, r6, pc}
10011dce:	46c0      	nop			; (mov r8, r8)
10011dd0:	1000fbe1 	.word	0x1000fbe1
10011dd4:	100165f7 	.word	0x100165f7

10011dd8 <gattc_disc_char_desc_ind_parser>:
10011dd8:	b570      	push	{r4, r5, r6, lr}
10011dda:	1c15      	adds	r5, r2, #0
10011ddc:	0a00      	lsrs	r0, r0, #8
10011dde:	8010      	strh	r0, [r2, #0]
10011de0:	784b      	ldrb	r3, [r1, #1]
10011de2:	780a      	ldrb	r2, [r1, #0]
10011de4:	021b      	lsls	r3, r3, #8
10011de6:	4313      	orrs	r3, r2
10011de8:	806b      	strh	r3, [r5, #2]
10011dea:	788e      	ldrb	r6, [r1, #2]
10011dec:	4b05      	ldr	r3, [pc, #20]	; (10011e04 <gattc_disc_char_desc_ind_parser+0x2c>)
10011dee:	1c30      	adds	r0, r6, #0
10011df0:	1c0c      	adds	r4, r1, #0
10011df2:	4798      	blx	r3
10011df4:	1c32      	adds	r2, r6, #0
10011df6:	7128      	strb	r0, [r5, #4]
10011df8:	1ce1      	adds	r1, r4, #3
10011dfa:	1d68      	adds	r0, r5, #5
10011dfc:	4b02      	ldr	r3, [pc, #8]	; (10011e08 <gattc_disc_char_desc_ind_parser+0x30>)
10011dfe:	4798      	blx	r3
10011e00:	bd70      	pop	{r4, r5, r6, pc}
10011e02:	46c0      	nop			; (mov r8, r8)
10011e04:	1000fbe1 	.word	0x1000fbe1
10011e08:	100165f7 	.word	0x100165f7

10011e0c <gattc_event_ind_and_notification_parser>:
10011e0c:	b510      	push	{r4, lr}
10011e0e:	780c      	ldrb	r4, [r1, #0]
10011e10:	1c13      	adds	r3, r2, #0
10011e12:	2c12      	cmp	r4, #18
10011e14:	d10e      	bne.n	10011e34 <gattc_event_ind_and_notification_parser+0x28>
10011e16:	0a00      	lsrs	r0, r0, #8
10011e18:	8010      	strh	r0, [r2, #0]
10011e1a:	788a      	ldrb	r2, [r1, #2]
10011e1c:	709a      	strb	r2, [r3, #2]
10011e1e:	7948      	ldrb	r0, [r1, #5]
10011e20:	790c      	ldrb	r4, [r1, #4]
10011e22:	0200      	lsls	r0, r0, #8
10011e24:	4320      	orrs	r0, r4
10011e26:	8098      	strh	r0, [r3, #4]
10011e28:	3106      	adds	r1, #6
10011e2a:	1d98      	adds	r0, r3, #6
10011e2c:	4b0b      	ldr	r3, [pc, #44]	; (10011e5c <gattc_event_ind_and_notification_parser+0x50>)
10011e2e:	4798      	blx	r3
10011e30:	221b      	movs	r2, #27
10011e32:	e010      	b.n	10011e56 <gattc_event_ind_and_notification_parser+0x4a>
10011e34:	2200      	movs	r2, #0
10011e36:	2c13      	cmp	r4, #19
10011e38:	d10d      	bne.n	10011e56 <gattc_event_ind_and_notification_parser+0x4a>
10011e3a:	0a00      	lsrs	r0, r0, #8
10011e3c:	8018      	strh	r0, [r3, #0]
10011e3e:	788a      	ldrb	r2, [r1, #2]
10011e40:	709a      	strb	r2, [r3, #2]
10011e42:	7908      	ldrb	r0, [r1, #4]
10011e44:	78cc      	ldrb	r4, [r1, #3]
10011e46:	0200      	lsls	r0, r0, #8
10011e48:	4320      	orrs	r0, r4
10011e4a:	8098      	strh	r0, [r3, #4]
10011e4c:	3106      	adds	r1, #6
10011e4e:	1d98      	adds	r0, r3, #6
10011e50:	4b02      	ldr	r3, [pc, #8]	; (10011e5c <gattc_event_ind_and_notification_parser+0x50>)
10011e52:	4798      	blx	r3
10011e54:	221c      	movs	r2, #28
10011e56:	1c10      	adds	r0, r2, #0
10011e58:	bd10      	pop	{r4, pc}
10011e5a:	46c0      	nop			; (mov r8, r8)
10011e5c:	100165f7 	.word	0x100165f7

10011e60 <gattc_complete_evt_handler>:
10011e60:	b500      	push	{lr}
10011e62:	0a00      	lsrs	r0, r0, #8
10011e64:	8010      	strh	r0, [r2, #0]
10011e66:	7808      	ldrb	r0, [r1, #0]
10011e68:	7090      	strb	r0, [r2, #2]
10011e6a:	784b      	ldrb	r3, [r1, #1]
10011e6c:	3801      	subs	r0, #1
10011e6e:	70d3      	strb	r3, [r2, #3]
10011e70:	2813      	cmp	r0, #19
10011e72:	d82c      	bhi.n	10011ece <gattc_complete_evt_handler+0x6e>
10011e74:	f001 fb9a 	bl	100135ac <__gnu_thumb1_case_uqi>
10011e78:	0a0a0a0c 	.word	0x0a0a0a0c
10011e7c:	210a0a0a 	.word	0x210a0a0a
10011e80:	111f2121 	.word	0x111f2121
10011e84:	2b111111 	.word	0x2b111111
10011e88:	2919132b 	.word	0x2919132b
10011e8c:	2017      	movs	r0, #23
10011e8e:	e01f      	b.n	10011ed0 <gattc_complete_evt_handler+0x70>
10011e90:	2024      	movs	r0, #36	; 0x24
10011e92:	2b00      	cmp	r3, #0
10011e94:	d11c      	bne.n	10011ed0 <gattc_complete_evt_handler+0x70>
10011e96:	3017      	adds	r0, #23
10011e98:	e01a      	b.n	10011ed0 <gattc_complete_evt_handler+0x70>
10011e9a:	2025      	movs	r0, #37	; 0x25
10011e9c:	e018      	b.n	10011ed0 <gattc_complete_evt_handler+0x70>
10011e9e:	4a0d      	ldr	r2, [pc, #52]	; (10011ed4 <gattc_complete_evt_handler+0x74>)
10011ea0:	201d      	movs	r0, #29
10011ea2:	6813      	ldr	r3, [r2, #0]
10011ea4:	3b01      	subs	r3, #1
10011ea6:	6013      	str	r3, [r2, #0]
10011ea8:	e012      	b.n	10011ed0 <gattc_complete_evt_handler+0x70>
10011eaa:	4a0a      	ldr	r2, [pc, #40]	; (10011ed4 <gattc_complete_evt_handler+0x74>)
10011eac:	201e      	movs	r0, #30
10011eae:	6813      	ldr	r3, [r2, #0]
10011eb0:	3b01      	subs	r3, #1
10011eb2:	6013      	str	r3, [r2, #0]
10011eb4:	e00c      	b.n	10011ed0 <gattc_complete_evt_handler+0x70>
10011eb6:	2019      	movs	r0, #25
10011eb8:	e00a      	b.n	10011ed0 <gattc_complete_evt_handler+0x70>
10011eba:	203b      	movs	r0, #59	; 0x3b
10011ebc:	2b00      	cmp	r3, #0
10011ebe:	d007      	beq.n	10011ed0 <gattc_complete_evt_handler+0x70>
10011ec0:	2182      	movs	r1, #130	; 0x82
10011ec2:	0089      	lsls	r1, r1, #2
10011ec4:	5453      	strb	r3, [r2, r1]
10011ec6:	3823      	subs	r0, #35	; 0x23
10011ec8:	e002      	b.n	10011ed0 <gattc_complete_evt_handler+0x70>
10011eca:	2021      	movs	r0, #33	; 0x21
10011ecc:	e000      	b.n	10011ed0 <gattc_complete_evt_handler+0x70>
10011ece:	2000      	movs	r0, #0
10011ed0:	bd00      	pop	{pc}
10011ed2:	46c0      	nop			; (mov r8, r8)
10011ed4:	1001a410 	.word	0x1001a410

10011ed8 <gattc_event_mtu_changed_ind_parser>:
10011ed8:	0a00      	lsrs	r0, r0, #8
10011eda:	8010      	strh	r0, [r2, #0]
10011edc:	784b      	ldrb	r3, [r1, #1]
10011ede:	7809      	ldrb	r1, [r1, #0]
10011ee0:	021b      	lsls	r3, r3, #8
10011ee2:	430b      	orrs	r3, r1
10011ee4:	8053      	strh	r3, [r2, #2]
10011ee6:	4770      	bx	lr

10011ee8 <gattc_read_ind_parser>:
10011ee8:	0a00      	lsrs	r0, r0, #8
10011eea:	b508      	push	{r3, lr}
10011eec:	8010      	strh	r0, [r2, #0]
10011eee:	1c13      	adds	r3, r2, #0
10011ef0:	2282      	movs	r2, #130	; 0x82
10011ef2:	2000      	movs	r0, #0
10011ef4:	0092      	lsls	r2, r2, #2
10011ef6:	5498      	strb	r0, [r3, r2]
10011ef8:	784a      	ldrb	r2, [r1, #1]
10011efa:	7808      	ldrb	r0, [r1, #0]
10011efc:	0212      	lsls	r2, r2, #8
10011efe:	4302      	orrs	r2, r0
10011f00:	805a      	strh	r2, [r3, #2]
10011f02:	78ca      	ldrb	r2, [r1, #3]
10011f04:	7888      	ldrb	r0, [r1, #2]
10011f06:	0212      	lsls	r2, r2, #8
10011f08:	4302      	orrs	r2, r0
10011f0a:	80da      	strh	r2, [r3, #6]
10011f0c:	794a      	ldrb	r2, [r1, #5]
10011f0e:	7908      	ldrb	r0, [r1, #4]
10011f10:	0212      	lsls	r2, r2, #8
10011f12:	4302      	orrs	r2, r0
10011f14:	809a      	strh	r2, [r3, #4]
10011f16:	3308      	adds	r3, #8
10011f18:	1c18      	adds	r0, r3, #0
10011f1a:	3106      	adds	r1, #6
10011f1c:	4b01      	ldr	r3, [pc, #4]	; (10011f24 <gattc_read_ind_parser+0x3c>)
10011f1e:	4798      	blx	r3
10011f20:	bd08      	pop	{r3, pc}
10011f22:	46c0      	nop			; (mov r8, r8)
10011f24:	100165f7 	.word	0x100165f7

10011f28 <gattc_svc_changed_cfg_ind_parser>:
10011f28:	0a00      	lsrs	r0, r0, #8
10011f2a:	8010      	strh	r0, [r2, #0]
10011f2c:	784b      	ldrb	r3, [r1, #1]
10011f2e:	7809      	ldrb	r1, [r1, #0]
10011f30:	021b      	lsls	r3, r3, #8
10011f32:	430b      	orrs	r3, r1
10011f34:	8053      	strh	r3, [r2, #2]
10011f36:	4770      	bx	lr

10011f38 <init_gattc_task_module>:
10011f38:	2300      	movs	r3, #0
10011f3a:	4a02      	ldr	r2, [pc, #8]	; (10011f44 <init_gattc_task_module+0xc>)
10011f3c:	8013      	strh	r3, [r2, #0]
10011f3e:	4a02      	ldr	r2, [pc, #8]	; (10011f48 <init_gattc_task_module+0x10>)
10011f40:	8013      	strh	r3, [r2, #0]
10011f42:	4770      	bx	lr
10011f44:	1001a40a 	.word	0x1001a40a
10011f48:	1001a40c 	.word	0x1001a40c

10011f4c <gattm_add_svc_req_handler>:
10011f4c:	2200      	movs	r2, #0
10011f4e:	210b      	movs	r1, #11
10011f50:	b5f0      	push	{r4, r5, r6, r7, lr}
10011f52:	1c04      	adds	r4, r0, #0
10011f54:	7943      	ldrb	r3, [r0, #5]
10011f56:	b085      	sub	sp, #20
10011f58:	9301      	str	r3, [sp, #4]
10011f5a:	ab02      	add	r3, sp, #8
10011f5c:	71da      	strb	r2, [r3, #7]
10011f5e:	4b37      	ldr	r3, [pc, #220]	; (1001203c <gattm_add_svc_req_handler+0xf0>)
10011f60:	7059      	strb	r1, [r3, #1]
10011f62:	7099      	strb	r1, [r3, #2]
10011f64:	4936      	ldr	r1, [pc, #216]	; (10012040 <gattm_add_svc_req_handler+0xf4>)
10011f66:	701a      	strb	r2, [r3, #0]
10011f68:	8808      	ldrh	r0, [r1, #0]
10011f6a:	8809      	ldrh	r1, [r1, #0]
10011f6c:	70da      	strb	r2, [r3, #3]
10011f6e:	0a09      	lsrs	r1, r1, #8
10011f70:	7118      	strb	r0, [r3, #4]
10011f72:	7159      	strb	r1, [r3, #5]
10011f74:	8821      	ldrh	r1, [r4, #0]
10011f76:	7219      	strb	r1, [r3, #8]
10011f78:	8821      	ldrh	r1, [r4, #0]
10011f7a:	0a09      	lsrs	r1, r1, #8
10011f7c:	7259      	strb	r1, [r3, #9]
10011f7e:	8861      	ldrh	r1, [r4, #2]
10011f80:	7299      	strb	r1, [r3, #10]
10011f82:	8861      	ldrh	r1, [r4, #2]
10011f84:	0a09      	lsrs	r1, r1, #8
10011f86:	72d9      	strb	r1, [r3, #11]
10011f88:	7921      	ldrb	r1, [r4, #4]
10011f8a:	7319      	strb	r1, [r3, #12]
10011f8c:	4669      	mov	r1, sp
10011f8e:	7909      	ldrb	r1, [r1, #4]
10011f90:	7359      	strb	r1, [r3, #13]
10011f92:	18a1      	adds	r1, r4, r2
10011f94:	7988      	ldrb	r0, [r1, #6]
10011f96:	1899      	adds	r1, r3, r2
10011f98:	3201      	adds	r2, #1
10011f9a:	7388      	strb	r0, [r1, #14]
10011f9c:	2a10      	cmp	r2, #16
10011f9e:	d1f8      	bne.n	10011f92 <gattm_add_svc_req_handler+0x46>
10011fa0:	1c27      	adds	r7, r4, #0
10011fa2:	2300      	movs	r3, #0
10011fa4:	251e      	movs	r5, #30
10011fa6:	3716      	adds	r7, #22
10011fa8:	9300      	str	r3, [sp, #0]
10011faa:	9b00      	ldr	r3, [sp, #0]
10011fac:	9a01      	ldr	r2, [sp, #4]
10011fae:	4e23      	ldr	r6, [pc, #140]	; (1001203c <gattm_add_svc_req_handler+0xf0>)
10011fb0:	4293      	cmp	r3, r2
10011fb2:	da21      	bge.n	10011ff8 <gattm_add_svc_req_handler+0xac>
10011fb4:	1c39      	adds	r1, r7, #0
10011fb6:	1970      	adds	r0, r6, r5
10011fb8:	2210      	movs	r2, #16
10011fba:	4b22      	ldr	r3, [pc, #136]	; (10012044 <gattm_add_svc_req_handler+0xf8>)
10011fbc:	4798      	blx	r3
10011fbe:	1c2b      	adds	r3, r5, #0
10011fc0:	8a3a      	ldrh	r2, [r7, #16]
10011fc2:	3310      	adds	r3, #16
10011fc4:	b29b      	uxth	r3, r3
10011fc6:	54f2      	strb	r2, [r6, r3]
10011fc8:	1c2b      	adds	r3, r5, #0
10011fca:	8a3a      	ldrh	r2, [r7, #16]
10011fcc:	3311      	adds	r3, #17
10011fce:	b29b      	uxth	r3, r3
10011fd0:	0a12      	lsrs	r2, r2, #8
10011fd2:	54f2      	strb	r2, [r6, r3]
10011fd4:	1c2a      	adds	r2, r5, #0
10011fd6:	1c2b      	adds	r3, r5, #0
10011fd8:	8a79      	ldrh	r1, [r7, #18]
10011fda:	3212      	adds	r2, #18
10011fdc:	b292      	uxth	r2, r2
10011fde:	54b1      	strb	r1, [r6, r2]
10011fe0:	8a7a      	ldrh	r2, [r7, #18]
10011fe2:	3313      	adds	r3, #19
10011fe4:	b29b      	uxth	r3, r3
10011fe6:	0a12      	lsrs	r2, r2, #8
10011fe8:	54f2      	strb	r2, [r6, r3]
10011fea:	9b00      	ldr	r3, [sp, #0]
10011fec:	3514      	adds	r5, #20
10011fee:	3301      	adds	r3, #1
10011ff0:	b2ad      	uxth	r5, r5
10011ff2:	9300      	str	r3, [sp, #0]
10011ff4:	3714      	adds	r7, #20
10011ff6:	e7d8      	b.n	10011faa <gattm_add_svc_req_handler+0x5e>
10011ff8:	2114      	movs	r1, #20
10011ffa:	4d13      	ldr	r5, [pc, #76]	; (10012048 <gattm_add_svc_req_handler+0xfc>)
10011ffc:	4b13      	ldr	r3, [pc, #76]	; (1001204c <gattm_add_svc_req_handler+0x100>)
10011ffe:	4351      	muls	r1, r2
10012000:	802b      	strh	r3, [r5, #0]
10012002:	230b      	movs	r3, #11
10012004:	311e      	adds	r1, #30
10012006:	80ab      	strh	r3, [r5, #4]
10012008:	1c0b      	adds	r3, r1, #0
1001200a:	3b08      	subs	r3, #8
1001200c:	71b3      	strb	r3, [r6, #6]
1001200e:	121b      	asrs	r3, r3, #8
10012010:	71f3      	strb	r3, [r6, #7]
10012012:	1c30      	adds	r0, r6, #0
10012014:	4b0e      	ldr	r3, [pc, #56]	; (10012050 <gattm_add_svc_req_handler+0x104>)
10012016:	4798      	blx	r3
10012018:	ab02      	add	r3, sp, #8
1001201a:	1dde      	adds	r6, r3, #7
1001201c:	1c30      	adds	r0, r6, #0
1001201e:	4b0d      	ldr	r3, [pc, #52]	; (10012054 <gattm_add_svc_req_handler+0x108>)
10012020:	4798      	blx	r3
10012022:	7833      	ldrb	r3, [r6, #0]
10012024:	20e2      	movs	r0, #226	; 0xe2
10012026:	2b00      	cmp	r3, #0
10012028:	d106      	bne.n	10012038 <gattm_add_svc_req_handler+0xec>
1001202a:	68aa      	ldr	r2, [r5, #8]
1001202c:	7853      	ldrb	r3, [r2, #1]
1001202e:	7811      	ldrb	r1, [r2, #0]
10012030:	021b      	lsls	r3, r3, #8
10012032:	430b      	orrs	r3, r1
10012034:	8023      	strh	r3, [r4, #0]
10012036:	7890      	ldrb	r0, [r2, #2]
10012038:	b005      	add	sp, #20
1001203a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001203c:	1001b640 	.word	0x1001b640
10012040:	1001b2d0 	.word	0x1001b2d0
10012044:	100165f7 	.word	0x100165f7
10012048:	1001b2c4 	.word	0x1001b2c4
1001204c:	00000b01 	.word	0x00000b01
10012050:	100108a1 	.word	0x100108a1
10012054:	10010905 	.word	0x10010905

10012058 <gattm_add_attribute_req_handler>:
10012058:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001205a:	1c1f      	adds	r7, r3, #0
1001205c:	4b16      	ldr	r3, [pc, #88]	; (100120b8 <gattm_add_attribute_req_handler+0x60>)
1001205e:	9100      	str	r1, [sp, #0]
10012060:	9201      	str	r2, [sp, #4]
10012062:	1c05      	adds	r5, r0, #0
10012064:	7946      	ldrb	r6, [r0, #5]
10012066:	6818      	ldr	r0, [r3, #0]
10012068:	2114      	movs	r1, #20
1001206a:	4b14      	ldr	r3, [pc, #80]	; (100120bc <gattm_add_attribute_req_handler+0x64>)
1001206c:	382a      	subs	r0, #42	; 0x2a
1001206e:	4798      	blx	r3
10012070:	2311      	movs	r3, #17
10012072:	4286      	cmp	r6, r0
10012074:	d21e      	bcs.n	100120b4 <gattm_add_attribute_req_handler+0x5c>
10012076:	2414      	movs	r4, #20
10012078:	4366      	muls	r6, r4
1001207a:	19a8      	adds	r0, r5, r6
1001207c:	2100      	movs	r1, #0
1001207e:	2210      	movs	r2, #16
10012080:	4b0f      	ldr	r3, [pc, #60]	; (100120c0 <gattm_add_attribute_req_handler+0x68>)
10012082:	3016      	adds	r0, #22
10012084:	4798      	blx	r3
10012086:	7968      	ldrb	r0, [r5, #5]
10012088:	1c3a      	adds	r2, r7, #0
1001208a:	4360      	muls	r0, r4
1001208c:	1828      	adds	r0, r5, r0
1001208e:	4b0d      	ldr	r3, [pc, #52]	; (100120c4 <gattm_add_attribute_req_handler+0x6c>)
10012090:	3016      	adds	r0, #22
10012092:	9908      	ldr	r1, [sp, #32]
10012094:	4798      	blx	r3
10012096:	466a      	mov	r2, sp
10012098:	796b      	ldrb	r3, [r5, #5]
1001209a:	8812      	ldrh	r2, [r2, #0]
1001209c:	435c      	muls	r4, r3
1001209e:	192c      	adds	r4, r5, r4
100120a0:	8522      	strh	r2, [r4, #40]	; 0x28
100120a2:	466a      	mov	r2, sp
100120a4:	8892      	ldrh	r2, [r2, #4]
100120a6:	84e2      	strh	r2, [r4, #38]	; 0x26
100120a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
100120aa:	8013      	strh	r3, [r2, #0]
100120ac:	796b      	ldrb	r3, [r5, #5]
100120ae:	3301      	adds	r3, #1
100120b0:	716b      	strb	r3, [r5, #5]
100120b2:	2300      	movs	r3, #0
100120b4:	1c18      	adds	r0, r3, #0
100120b6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100120b8:	1001a380 	.word	0x1001a380
100120bc:	100135c1 	.word	0x100135c1
100120c0:	10016609 	.word	0x10016609
100120c4:	100165f7 	.word	0x100165f7

100120c8 <gattm_att_set_value_req_handler>:
100120c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100120ca:	466b      	mov	r3, sp
100120cc:	1dde      	adds	r6, r3, #7
100120ce:	2300      	movs	r3, #0
100120d0:	1c0d      	adds	r5, r1, #0
100120d2:	210c      	movs	r1, #12
100120d4:	270b      	movs	r7, #11
100120d6:	4c17      	ldr	r4, [pc, #92]	; (10012134 <gattm_att_set_value_req_handler+0x6c>)
100120d8:	7033      	strb	r3, [r6, #0]
100120da:	70e3      	strb	r3, [r4, #3]
100120dc:	4b16      	ldr	r3, [pc, #88]	; (10012138 <gattm_att_set_value_req_handler+0x70>)
100120de:	7021      	strb	r1, [r4, #0]
100120e0:	8819      	ldrh	r1, [r3, #0]
100120e2:	881b      	ldrh	r3, [r3, #0]
100120e4:	7220      	strb	r0, [r4, #8]
100120e6:	0a1b      	lsrs	r3, r3, #8
100120e8:	7163      	strb	r3, [r4, #5]
100120ea:	0a00      	lsrs	r0, r0, #8
100120ec:	0a2b      	lsrs	r3, r5, #8
100120ee:	7121      	strb	r1, [r4, #4]
100120f0:	7260      	strb	r0, [r4, #9]
100120f2:	1c11      	adds	r1, r2, #0
100120f4:	72a5      	strb	r5, [r4, #10]
100120f6:	1c2a      	adds	r2, r5, #0
100120f8:	72e3      	strb	r3, [r4, #11]
100120fa:	350c      	adds	r5, #12
100120fc:	4b0f      	ldr	r3, [pc, #60]	; (1001213c <gattm_att_set_value_req_handler+0x74>)
100120fe:	4810      	ldr	r0, [pc, #64]	; (10012140 <gattm_att_set_value_req_handler+0x78>)
10012100:	7067      	strb	r7, [r4, #1]
10012102:	70a7      	strb	r7, [r4, #2]
10012104:	4798      	blx	r3
10012106:	b2a9      	uxth	r1, r5
10012108:	4b0e      	ldr	r3, [pc, #56]	; (10012144 <gattm_att_set_value_req_handler+0x7c>)
1001210a:	4d0f      	ldr	r5, [pc, #60]	; (10012148 <gattm_att_set_value_req_handler+0x80>)
1001210c:	1c20      	adds	r0, r4, #0
1001210e:	802b      	strh	r3, [r5, #0]
10012110:	1c0b      	adds	r3, r1, #0
10012112:	3b08      	subs	r3, #8
10012114:	71a3      	strb	r3, [r4, #6]
10012116:	121b      	asrs	r3, r3, #8
10012118:	71e3      	strb	r3, [r4, #7]
1001211a:	4b0c      	ldr	r3, [pc, #48]	; (1001214c <gattm_att_set_value_req_handler+0x84>)
1001211c:	80af      	strh	r7, [r5, #4]
1001211e:	4798      	blx	r3
10012120:	1c30      	adds	r0, r6, #0
10012122:	4b0b      	ldr	r3, [pc, #44]	; (10012150 <gattm_att_set_value_req_handler+0x88>)
10012124:	4798      	blx	r3
10012126:	7833      	ldrb	r3, [r6, #0]
10012128:	20e2      	movs	r0, #226	; 0xe2
1001212a:	2b00      	cmp	r3, #0
1001212c:	d101      	bne.n	10012132 <gattm_att_set_value_req_handler+0x6a>
1001212e:	68ab      	ldr	r3, [r5, #8]
10012130:	7898      	ldrb	r0, [r3, #2]
10012132:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10012134:	1001b640 	.word	0x1001b640
10012138:	1001b2d0 	.word	0x1001b2d0
1001213c:	100165f7 	.word	0x100165f7
10012140:	1001b64c 	.word	0x1001b64c
10012144:	00000b0d 	.word	0x00000b0d
10012148:	1001b2c4 	.word	0x1001b2c4
1001214c:	100108a1 	.word	0x100108a1
10012150:	10010905 	.word	0x10010905

10012154 <gattm_att_get_value_req_handler>:
10012154:	b5f0      	push	{r4, r5, r6, r7, lr}
10012156:	b085      	sub	sp, #20
10012158:	9201      	str	r2, [sp, #4]
1001215a:	220a      	movs	r2, #10
1001215c:	1c04      	adds	r4, r0, #0
1001215e:	481d      	ldr	r0, [pc, #116]	; (100121d4 <gattm_att_get_value_req_handler+0x80>)
10012160:	ab02      	add	r3, sp, #8
10012162:	1dde      	adds	r6, r3, #7
10012164:	7002      	strb	r2, [r0, #0]
10012166:	2300      	movs	r3, #0
10012168:	220b      	movs	r2, #11
1001216a:	4d1b      	ldr	r5, [pc, #108]	; (100121d8 <gattm_att_get_value_req_handler+0x84>)
1001216c:	1c0f      	adds	r7, r1, #0
1001216e:	8829      	ldrh	r1, [r5, #0]
10012170:	882d      	ldrh	r5, [r5, #0]
10012172:	7101      	strb	r1, [r0, #4]
10012174:	0a2d      	lsrs	r5, r5, #8
10012176:	7145      	strb	r5, [r0, #5]
10012178:	0a25      	lsrs	r5, r4, #8
1001217a:	7245      	strb	r5, [r0, #9]
1001217c:	4917      	ldr	r1, [pc, #92]	; (100121dc <gattm_att_get_value_req_handler+0x88>)
1001217e:	4d18      	ldr	r5, [pc, #96]	; (100121e0 <gattm_att_get_value_req_handler+0x8c>)
10012180:	7033      	strb	r3, [r6, #0]
10012182:	7042      	strb	r2, [r0, #1]
10012184:	7082      	strb	r2, [r0, #2]
10012186:	70c3      	strb	r3, [r0, #3]
10012188:	8029      	strh	r1, [r5, #0]
1001218a:	80aa      	strh	r2, [r5, #4]
1001218c:	71c3      	strb	r3, [r0, #7]
1001218e:	3a09      	subs	r2, #9
10012190:	210a      	movs	r1, #10
10012192:	4b14      	ldr	r3, [pc, #80]	; (100121e4 <gattm_att_get_value_req_handler+0x90>)
10012194:	7182      	strb	r2, [r0, #6]
10012196:	7204      	strb	r4, [r0, #8]
10012198:	4798      	blx	r3
1001219a:	1c30      	adds	r0, r6, #0
1001219c:	4b12      	ldr	r3, [pc, #72]	; (100121e8 <gattm_att_get_value_req_handler+0x94>)
1001219e:	4798      	blx	r3
100121a0:	7833      	ldrb	r3, [r6, #0]
100121a2:	20e2      	movs	r0, #226	; 0xe2
100121a4:	2b00      	cmp	r3, #0
100121a6:	d112      	bne.n	100121ce <gattm_att_get_value_req_handler+0x7a>
100121a8:	68a9      	ldr	r1, [r5, #8]
100121aa:	9801      	ldr	r0, [sp, #4]
100121ac:	784d      	ldrb	r5, [r1, #1]
100121ae:	780b      	ldrb	r3, [r1, #0]
100121b0:	78ca      	ldrb	r2, [r1, #3]
100121b2:	022d      	lsls	r5, r5, #8
100121b4:	431d      	orrs	r5, r3
100121b6:	788b      	ldrb	r3, [r1, #2]
100121b8:	0212      	lsls	r2, r2, #8
100121ba:	431a      	orrs	r2, r3
100121bc:	803a      	strh	r2, [r7, #0]
100121be:	790e      	ldrb	r6, [r1, #4]
100121c0:	4b0a      	ldr	r3, [pc, #40]	; (100121ec <gattm_att_get_value_req_handler+0x98>)
100121c2:	3105      	adds	r1, #5
100121c4:	4798      	blx	r3
100121c6:	20e2      	movs	r0, #226	; 0xe2
100121c8:	42ac      	cmp	r4, r5
100121ca:	d100      	bne.n	100121ce <gattm_att_get_value_req_handler+0x7a>
100121cc:	1c30      	adds	r0, r6, #0
100121ce:	b005      	add	sp, #20
100121d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100121d2:	46c0      	nop			; (mov r8, r8)
100121d4:	1001b640 	.word	0x1001b640
100121d8:	1001b2d0 	.word	0x1001b2d0
100121dc:	00000b0b 	.word	0x00000b0b
100121e0:	1001b2c4 	.word	0x1001b2c4
100121e4:	100108a1 	.word	0x100108a1
100121e8:	10010905 	.word	0x10010905
100121ec:	100165f7 	.word	0x100165f7

100121f0 <htpt_enable_rsp_handler>:
100121f0:	780b      	ldrb	r3, [r1, #0]
100121f2:	7013      	strb	r3, [r2, #0]
100121f4:	784b      	ldrb	r3, [r1, #1]
100121f6:	7053      	strb	r3, [r2, #1]
100121f8:	4770      	bx	lr

100121fa <htpt_temp_send_rsp_handler>:
100121fa:	780b      	ldrb	r3, [r1, #0]
100121fc:	7013      	strb	r3, [r2, #0]
100121fe:	4770      	bx	lr

10012200 <htpt_meas_intv_upd_rsp_handler>:
10012200:	780b      	ldrb	r3, [r1, #0]
10012202:	7013      	strb	r3, [r2, #0]
10012204:	4770      	bx	lr

10012206 <htpt_meas_intv_chg_req_ind_handler>:
10012206:	78cb      	ldrb	r3, [r1, #3]
10012208:	7889      	ldrb	r1, [r1, #2]
1001220a:	021b      	lsls	r3, r3, #8
1001220c:	430b      	orrs	r3, r1
1001220e:	8013      	strh	r3, [r2, #0]
10012210:	4770      	bx	lr

10012212 <htpt_cfg_indntf_ind_handler>:
10012212:	780b      	ldrb	r3, [r1, #0]
10012214:	7013      	strb	r3, [r2, #0]
10012216:	784b      	ldrb	r3, [r1, #1]
10012218:	7053      	strb	r3, [r2, #1]
1001221a:	4770      	bx	lr

1001221c <pow>:
1001221c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001221e:	465f      	mov	r7, fp
10012220:	464d      	mov	r5, r9
10012222:	4656      	mov	r6, sl
10012224:	4644      	mov	r4, r8
10012226:	b4f0      	push	{r4, r5, r6, r7}
10012228:	b091      	sub	sp, #68	; 0x44
1001222a:	001f      	movs	r7, r3
1001222c:	0004      	movs	r4, r0
1001222e:	000d      	movs	r5, r1
10012230:	0016      	movs	r6, r2
10012232:	f000 fa01 	bl	10012638 <__ieee754_pow>
10012236:	4bcf      	ldr	r3, [pc, #828]	; (10012574 <pow+0x358>)
10012238:	9002      	str	r0, [sp, #8]
1001223a:	9103      	str	r1, [sp, #12]
1001223c:	469b      	mov	fp, r3
1001223e:	781b      	ldrb	r3, [r3, #0]
10012240:	b25b      	sxtb	r3, r3
10012242:	4699      	mov	r9, r3
10012244:	3301      	adds	r3, #1
10012246:	d04f      	beq.n	100122e8 <pow+0xcc>
10012248:	0032      	movs	r2, r6
1001224a:	003b      	movs	r3, r7
1001224c:	0030      	movs	r0, r6
1001224e:	0039      	movs	r1, r7
10012250:	f003 ffbe 	bl	100161d0 <__aeabi_dcmpun>
10012254:	9000      	str	r0, [sp, #0]
10012256:	2800      	cmp	r0, #0
10012258:	d146      	bne.n	100122e8 <pow+0xcc>
1001225a:	0022      	movs	r2, r4
1001225c:	002b      	movs	r3, r5
1001225e:	0020      	movs	r0, r4
10012260:	0029      	movs	r1, r5
10012262:	f003 ffb5 	bl	100161d0 <__aeabi_dcmpun>
10012266:	2200      	movs	r2, #0
10012268:	4682      	mov	sl, r0
1001226a:	2800      	cmp	r0, #0
1001226c:	d134      	bne.n	100122d8 <pow+0xbc>
1001226e:	2300      	movs	r3, #0
10012270:	0020      	movs	r0, r4
10012272:	0029      	movs	r1, r5
10012274:	f001 fb2a 	bl	100138cc <__aeabi_dcmpeq>
10012278:	2800      	cmp	r0, #0
1001227a:	d03a      	beq.n	100122f2 <pow+0xd6>
1001227c:	2200      	movs	r2, #0
1001227e:	2300      	movs	r3, #0
10012280:	0030      	movs	r0, r6
10012282:	0039      	movs	r1, r7
10012284:	f001 fb22 	bl	100138cc <__aeabi_dcmpeq>
10012288:	9005      	str	r0, [sp, #20]
1001228a:	2800      	cmp	r0, #0
1001228c:	d100      	bne.n	10012290 <pow+0x74>
1001228e:	e074      	b.n	1001237a <pow+0x15e>
10012290:	ab06      	add	r3, sp, #24
10012292:	4698      	mov	r8, r3
10012294:	2301      	movs	r3, #1
10012296:	4642      	mov	r2, r8
10012298:	9306      	str	r3, [sp, #24]
1001229a:	4bb7      	ldr	r3, [pc, #732]	; (10012578 <pow+0x35c>)
1001229c:	6053      	str	r3, [r2, #4]
1001229e:	4643      	mov	r3, r8
100122a0:	4652      	mov	r2, sl
100122a2:	609c      	str	r4, [r3, #8]
100122a4:	60dd      	str	r5, [r3, #12]
100122a6:	621a      	str	r2, [r3, #32]
100122a8:	611e      	str	r6, [r3, #16]
100122aa:	615f      	str	r7, [r3, #20]
100122ac:	4642      	mov	r2, r8
100122ae:	2300      	movs	r3, #0
100122b0:	2400      	movs	r4, #0
100122b2:	6193      	str	r3, [r2, #24]
100122b4:	61d4      	str	r4, [r2, #28]
100122b6:	464b      	mov	r3, r9
100122b8:	2b00      	cmp	r3, #0
100122ba:	d100      	bne.n	100122be <pow+0xa2>
100122bc:	e094      	b.n	100123e8 <pow+0x1cc>
100122be:	2300      	movs	r3, #0
100122c0:	4cae      	ldr	r4, [pc, #696]	; (1001257c <pow+0x360>)
100122c2:	9300      	str	r3, [sp, #0]
100122c4:	9401      	str	r4, [sp, #4]
100122c6:	9800      	ldr	r0, [sp, #0]
100122c8:	9901      	ldr	r1, [sp, #4]
100122ca:	b011      	add	sp, #68	; 0x44
100122cc:	bc3c      	pop	{r2, r3, r4, r5}
100122ce:	4690      	mov	r8, r2
100122d0:	4699      	mov	r9, r3
100122d2:	46a2      	mov	sl, r4
100122d4:	46ab      	mov	fp, r5
100122d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
100122d8:	2300      	movs	r3, #0
100122da:	0030      	movs	r0, r6
100122dc:	0039      	movs	r1, r7
100122de:	f001 faf5 	bl	100138cc <__aeabi_dcmpeq>
100122e2:	2800      	cmp	r0, #0
100122e4:	d000      	beq.n	100122e8 <pow+0xcc>
100122e6:	e0eb      	b.n	100124c0 <pow+0x2a4>
100122e8:	9b02      	ldr	r3, [sp, #8]
100122ea:	9c03      	ldr	r4, [sp, #12]
100122ec:	9300      	str	r3, [sp, #0]
100122ee:	9401      	str	r4, [sp, #4]
100122f0:	e7e9      	b.n	100122c6 <pow+0xaa>
100122f2:	9802      	ldr	r0, [sp, #8]
100122f4:	9903      	ldr	r1, [sp, #12]
100122f6:	f001 f82b 	bl	10013350 <finite>
100122fa:	4681      	mov	r9, r0
100122fc:	2800      	cmp	r0, #0
100122fe:	d100      	bne.n	10012302 <pow+0xe6>
10012300:	e086      	b.n	10012410 <pow+0x1f4>
10012302:	9802      	ldr	r0, [sp, #8]
10012304:	9903      	ldr	r1, [sp, #12]
10012306:	2200      	movs	r2, #0
10012308:	2300      	movs	r3, #0
1001230a:	f001 fadf 	bl	100138cc <__aeabi_dcmpeq>
1001230e:	2800      	cmp	r0, #0
10012310:	d0ea      	beq.n	100122e8 <pow+0xcc>
10012312:	0020      	movs	r0, r4
10012314:	0029      	movs	r1, r5
10012316:	f001 f81b 	bl	10013350 <finite>
1001231a:	9a02      	ldr	r2, [sp, #8]
1001231c:	9b03      	ldr	r3, [sp, #12]
1001231e:	9200      	str	r2, [sp, #0]
10012320:	9301      	str	r3, [sp, #4]
10012322:	2800      	cmp	r0, #0
10012324:	d0cf      	beq.n	100122c6 <pow+0xaa>
10012326:	0030      	movs	r0, r6
10012328:	0039      	movs	r1, r7
1001232a:	f001 f811 	bl	10013350 <finite>
1001232e:	9a02      	ldr	r2, [sp, #8]
10012330:	9b03      	ldr	r3, [sp, #12]
10012332:	9200      	str	r2, [sp, #0]
10012334:	9301      	str	r3, [sp, #4]
10012336:	2800      	cmp	r0, #0
10012338:	d0c5      	beq.n	100122c6 <pow+0xaa>
1001233a:	ab06      	add	r3, sp, #24
1001233c:	4698      	mov	r8, r3
1001233e:	2304      	movs	r3, #4
10012340:	4642      	mov	r2, r8
10012342:	9306      	str	r3, [sp, #24]
10012344:	4b8c      	ldr	r3, [pc, #560]	; (10012578 <pow+0x35c>)
10012346:	6094      	str	r4, [r2, #8]
10012348:	60d5      	str	r5, [r2, #12]
1001234a:	6053      	str	r3, [r2, #4]
1001234c:	2300      	movs	r3, #0
1001234e:	2400      	movs	r4, #0
10012350:	6213      	str	r3, [r2, #32]
10012352:	2300      	movs	r3, #0
10012354:	6193      	str	r3, [r2, #24]
10012356:	61d4      	str	r4, [r2, #28]
10012358:	465b      	mov	r3, fp
1001235a:	781b      	ldrb	r3, [r3, #0]
1001235c:	6116      	str	r6, [r2, #16]
1001235e:	6157      	str	r7, [r2, #20]
10012360:	b25b      	sxtb	r3, r3
10012362:	2b02      	cmp	r3, #2
10012364:	d004      	beq.n	10012370 <pow+0x154>
10012366:	4640      	mov	r0, r8
10012368:	f000 fffc 	bl	10013364 <matherr>
1001236c:	2800      	cmp	r0, #0
1001236e:	d140      	bne.n	100123f2 <pow+0x1d6>
10012370:	f004 f8fc 	bl	1001656c <__errno>
10012374:	2322      	movs	r3, #34	; 0x22
10012376:	6003      	str	r3, [r0, #0]
10012378:	e03b      	b.n	100123f2 <pow+0x1d6>
1001237a:	0030      	movs	r0, r6
1001237c:	0039      	movs	r1, r7
1001237e:	f000 ffe7 	bl	10013350 <finite>
10012382:	9a02      	ldr	r2, [sp, #8]
10012384:	9b03      	ldr	r3, [sp, #12]
10012386:	9200      	str	r2, [sp, #0]
10012388:	9301      	str	r3, [sp, #4]
1001238a:	2800      	cmp	r0, #0
1001238c:	d09b      	beq.n	100122c6 <pow+0xaa>
1001238e:	2200      	movs	r2, #0
10012390:	2300      	movs	r3, #0
10012392:	0030      	movs	r0, r6
10012394:	0039      	movs	r1, r7
10012396:	f001 fa9f 	bl	100138d8 <__aeabi_dcmplt>
1001239a:	2800      	cmp	r0, #0
1001239c:	d100      	bne.n	100123a0 <pow+0x184>
1001239e:	e792      	b.n	100122c6 <pow+0xaa>
100123a0:	ab06      	add	r3, sp, #24
100123a2:	4698      	mov	r8, r3
100123a4:	2301      	movs	r3, #1
100123a6:	4642      	mov	r2, r8
100123a8:	9306      	str	r3, [sp, #24]
100123aa:	4b73      	ldr	r3, [pc, #460]	; (10012578 <pow+0x35c>)
100123ac:	6053      	str	r3, [r2, #4]
100123ae:	4643      	mov	r3, r8
100123b0:	9a05      	ldr	r2, [sp, #20]
100123b2:	609c      	str	r4, [r3, #8]
100123b4:	60dd      	str	r5, [r3, #12]
100123b6:	621a      	str	r2, [r3, #32]
100123b8:	611e      	str	r6, [r3, #16]
100123ba:	615f      	str	r7, [r3, #20]
100123bc:	465b      	mov	r3, fp
100123be:	781b      	ldrb	r3, [r3, #0]
100123c0:	b25b      	sxtb	r3, r3
100123c2:	2b00      	cmp	r3, #0
100123c4:	d00b      	beq.n	100123de <pow+0x1c2>
100123c6:	2000      	movs	r0, #0
100123c8:	4642      	mov	r2, r8
100123ca:	496d      	ldr	r1, [pc, #436]	; (10012580 <pow+0x364>)
100123cc:	6190      	str	r0, [r2, #24]
100123ce:	61d1      	str	r1, [r2, #28]
100123d0:	2b02      	cmp	r3, #2
100123d2:	d109      	bne.n	100123e8 <pow+0x1cc>
100123d4:	f004 f8ca 	bl	1001656c <__errno>
100123d8:	2321      	movs	r3, #33	; 0x21
100123da:	6003      	str	r3, [r0, #0]
100123dc:	e009      	b.n	100123f2 <pow+0x1d6>
100123de:	4642      	mov	r2, r8
100123e0:	2300      	movs	r3, #0
100123e2:	2400      	movs	r4, #0
100123e4:	6193      	str	r3, [r2, #24]
100123e6:	61d4      	str	r4, [r2, #28]
100123e8:	4640      	mov	r0, r8
100123ea:	f000 ffbb 	bl	10013364 <matherr>
100123ee:	2800      	cmp	r0, #0
100123f0:	d0f0      	beq.n	100123d4 <pow+0x1b8>
100123f2:	4643      	mov	r3, r8
100123f4:	6a1b      	ldr	r3, [r3, #32]
100123f6:	2b00      	cmp	r3, #0
100123f8:	d004      	beq.n	10012404 <pow+0x1e8>
100123fa:	f004 f8b7 	bl	1001656c <__errno>
100123fe:	4643      	mov	r3, r8
10012400:	6a1b      	ldr	r3, [r3, #32]
10012402:	6003      	str	r3, [r0, #0]
10012404:	4643      	mov	r3, r8
10012406:	69dc      	ldr	r4, [r3, #28]
10012408:	699b      	ldr	r3, [r3, #24]
1001240a:	9300      	str	r3, [sp, #0]
1001240c:	9401      	str	r4, [sp, #4]
1001240e:	e75a      	b.n	100122c6 <pow+0xaa>
10012410:	0020      	movs	r0, r4
10012412:	0029      	movs	r1, r5
10012414:	f000 ff9c 	bl	10013350 <finite>
10012418:	2800      	cmp	r0, #0
1001241a:	d100      	bne.n	1001241e <pow+0x202>
1001241c:	e771      	b.n	10012302 <pow+0xe6>
1001241e:	0030      	movs	r0, r6
10012420:	0039      	movs	r1, r7
10012422:	f000 ff95 	bl	10013350 <finite>
10012426:	2800      	cmp	r0, #0
10012428:	d100      	bne.n	1001242c <pow+0x210>
1001242a:	e76a      	b.n	10012302 <pow+0xe6>
1001242c:	9802      	ldr	r0, [sp, #8]
1001242e:	9903      	ldr	r1, [sp, #12]
10012430:	000b      	movs	r3, r1
10012432:	0002      	movs	r2, r0
10012434:	f003 fecc 	bl	100161d0 <__aeabi_dcmpun>
10012438:	ab06      	add	r3, sp, #24
1001243a:	4698      	mov	r8, r3
1001243c:	2800      	cmp	r0, #0
1001243e:	d17a      	bne.n	10012536 <pow+0x31a>
10012440:	2303      	movs	r3, #3
10012442:	4642      	mov	r2, r8
10012444:	9306      	str	r3, [sp, #24]
10012446:	4b4c      	ldr	r3, [pc, #304]	; (10012578 <pow+0x35c>)
10012448:	6210      	str	r0, [r2, #32]
1001244a:	6053      	str	r3, [r2, #4]
1001244c:	465b      	mov	r3, fp
1001244e:	781b      	ldrb	r3, [r3, #0]
10012450:	6094      	str	r4, [r2, #8]
10012452:	60d5      	str	r5, [r2, #12]
10012454:	b25b      	sxtb	r3, r3
10012456:	6116      	str	r6, [r2, #16]
10012458:	6157      	str	r7, [r2, #20]
1001245a:	4699      	mov	r9, r3
1001245c:	2b00      	cmp	r3, #0
1001245e:	d148      	bne.n	100124f2 <pow+0x2d6>
10012460:	22e0      	movs	r2, #224	; 0xe0
10012462:	4641      	mov	r1, r8
10012464:	4b47      	ldr	r3, [pc, #284]	; (10012584 <pow+0x368>)
10012466:	0612      	lsls	r2, r2, #24
10012468:	618a      	str	r2, [r1, #24]
1001246a:	61cb      	str	r3, [r1, #28]
1001246c:	0020      	movs	r0, r4
1001246e:	2200      	movs	r2, #0
10012470:	2300      	movs	r3, #0
10012472:	0029      	movs	r1, r5
10012474:	f001 fa30 	bl	100138d8 <__aeabi_dcmplt>
10012478:	2800      	cmp	r0, #0
1001247a:	d100      	bne.n	1001247e <pow+0x262>
1001247c:	e773      	b.n	10012366 <pow+0x14a>
1001247e:	2200      	movs	r2, #0
10012480:	4b41      	ldr	r3, [pc, #260]	; (10012588 <pow+0x36c>)
10012482:	0030      	movs	r0, r6
10012484:	0039      	movs	r1, r7
10012486:	f003 f8d5 	bl	10015634 <__aeabi_dmul>
1001248a:	0004      	movs	r4, r0
1001248c:	000d      	movs	r5, r1
1001248e:	f000 ff71 	bl	10013374 <rint>
10012492:	0002      	movs	r2, r0
10012494:	000b      	movs	r3, r1
10012496:	0020      	movs	r0, r4
10012498:	0029      	movs	r1, r5
1001249a:	f001 fa17 	bl	100138cc <__aeabi_dcmpeq>
1001249e:	2800      	cmp	r0, #0
100124a0:	d105      	bne.n	100124ae <pow+0x292>
100124a2:	22e0      	movs	r2, #224	; 0xe0
100124a4:	4b39      	ldr	r3, [pc, #228]	; (1001258c <pow+0x370>)
100124a6:	0612      	lsls	r2, r2, #24
100124a8:	4641      	mov	r1, r8
100124aa:	618a      	str	r2, [r1, #24]
100124ac:	61cb      	str	r3, [r1, #28]
100124ae:	465b      	mov	r3, fp
100124b0:	781b      	ldrb	r3, [r3, #0]
100124b2:	b25b      	sxtb	r3, r3
100124b4:	4699      	mov	r9, r3
100124b6:	464b      	mov	r3, r9
100124b8:	2b02      	cmp	r3, #2
100124ba:	d000      	beq.n	100124be <pow+0x2a2>
100124bc:	e753      	b.n	10012366 <pow+0x14a>
100124be:	e757      	b.n	10012370 <pow+0x154>
100124c0:	ab06      	add	r3, sp, #24
100124c2:	4698      	mov	r8, r3
100124c4:	2301      	movs	r3, #1
100124c6:	4642      	mov	r2, r8
100124c8:	9306      	str	r3, [sp, #24]
100124ca:	4b2b      	ldr	r3, [pc, #172]	; (10012578 <pow+0x35c>)
100124cc:	6053      	str	r3, [r2, #4]
100124ce:	4643      	mov	r3, r8
100124d0:	609c      	str	r4, [r3, #8]
100124d2:	60dd      	str	r5, [r3, #12]
100124d4:	2400      	movs	r4, #0
100124d6:	9a00      	ldr	r2, [sp, #0]
100124d8:	4d28      	ldr	r5, [pc, #160]	; (1001257c <pow+0x360>)
100124da:	621a      	str	r2, [r3, #32]
100124dc:	611e      	str	r6, [r3, #16]
100124de:	615f      	str	r7, [r3, #20]
100124e0:	619c      	str	r4, [r3, #24]
100124e2:	61dd      	str	r5, [r3, #28]
100124e4:	464b      	mov	r3, r9
100124e6:	9400      	str	r4, [sp, #0]
100124e8:	9501      	str	r5, [sp, #4]
100124ea:	2b02      	cmp	r3, #2
100124ec:	d000      	beq.n	100124f0 <pow+0x2d4>
100124ee:	e77b      	b.n	100123e8 <pow+0x1cc>
100124f0:	e6e9      	b.n	100122c6 <pow+0xaa>
100124f2:	2200      	movs	r2, #0
100124f4:	4641      	mov	r1, r8
100124f6:	4b26      	ldr	r3, [pc, #152]	; (10012590 <pow+0x374>)
100124f8:	0020      	movs	r0, r4
100124fa:	618a      	str	r2, [r1, #24]
100124fc:	61cb      	str	r3, [r1, #28]
100124fe:	2200      	movs	r2, #0
10012500:	2300      	movs	r3, #0
10012502:	0029      	movs	r1, r5
10012504:	f001 f9e8 	bl	100138d8 <__aeabi_dcmplt>
10012508:	2800      	cmp	r0, #0
1001250a:	d0d4      	beq.n	100124b6 <pow+0x29a>
1001250c:	2200      	movs	r2, #0
1001250e:	4b1e      	ldr	r3, [pc, #120]	; (10012588 <pow+0x36c>)
10012510:	0030      	movs	r0, r6
10012512:	0039      	movs	r1, r7
10012514:	f003 f88e 	bl	10015634 <__aeabi_dmul>
10012518:	0004      	movs	r4, r0
1001251a:	000d      	movs	r5, r1
1001251c:	f000 ff2a 	bl	10013374 <rint>
10012520:	0002      	movs	r2, r0
10012522:	000b      	movs	r3, r1
10012524:	0020      	movs	r0, r4
10012526:	0029      	movs	r1, r5
10012528:	f001 f9d0 	bl	100138cc <__aeabi_dcmpeq>
1001252c:	2800      	cmp	r0, #0
1001252e:	d1be      	bne.n	100124ae <pow+0x292>
10012530:	2200      	movs	r2, #0
10012532:	4b13      	ldr	r3, [pc, #76]	; (10012580 <pow+0x364>)
10012534:	e7b8      	b.n	100124a8 <pow+0x28c>
10012536:	2301      	movs	r3, #1
10012538:	4642      	mov	r2, r8
1001253a:	9306      	str	r3, [sp, #24]
1001253c:	4b0e      	ldr	r3, [pc, #56]	; (10012578 <pow+0x35c>)
1001253e:	6053      	str	r3, [r2, #4]
10012540:	4643      	mov	r3, r8
10012542:	464a      	mov	r2, r9
10012544:	609c      	str	r4, [r3, #8]
10012546:	60dd      	str	r5, [r3, #12]
10012548:	621a      	str	r2, [r3, #32]
1001254a:	611e      	str	r6, [r3, #16]
1001254c:	615f      	str	r7, [r3, #20]
1001254e:	2400      	movs	r4, #0
10012550:	465b      	mov	r3, fp
10012552:	571c      	ldrsb	r4, [r3, r4]
10012554:	2c00      	cmp	r4, #0
10012556:	d100      	bne.n	1001255a <pow+0x33e>
10012558:	e741      	b.n	100123de <pow+0x1c2>
1001255a:	2300      	movs	r3, #0
1001255c:	2200      	movs	r2, #0
1001255e:	0019      	movs	r1, r3
10012560:	0010      	movs	r0, r2
10012562:	f002 fc43 	bl	10014dec <__aeabi_ddiv>
10012566:	4643      	mov	r3, r8
10012568:	6198      	str	r0, [r3, #24]
1001256a:	61d9      	str	r1, [r3, #28]
1001256c:	2c02      	cmp	r4, #2
1001256e:	d100      	bne.n	10012572 <pow+0x356>
10012570:	e730      	b.n	100123d4 <pow+0x1b8>
10012572:	e739      	b.n	100123e8 <pow+0x1cc>
10012574:	100188e0 	.word	0x100188e0
10012578:	100186b8 	.word	0x100186b8
1001257c:	3ff00000 	.word	0x3ff00000
10012580:	fff00000 	.word	0xfff00000
10012584:	47efffff 	.word	0x47efffff
10012588:	3fe00000 	.word	0x3fe00000
1001258c:	c7efffff 	.word	0xc7efffff
10012590:	7ff00000 	.word	0x7ff00000

10012594 <sqrtf>:
10012594:	b5f0      	push	{r4, r5, r6, r7, lr}
10012596:	2600      	movs	r6, #0
10012598:	b08d      	sub	sp, #52	; 0x34
1001259a:	1c04      	adds	r4, r0, #0
1001259c:	f000 fe78 	bl	10013290 <__ieee754_sqrtf>
100125a0:	4b23      	ldr	r3, [pc, #140]	; (10012630 <sqrtf+0x9c>)
100125a2:	1c05      	adds	r5, r0, #0
100125a4:	579e      	ldrsb	r6, [r3, r6]
100125a6:	1c73      	adds	r3, r6, #1
100125a8:	d00b      	beq.n	100125c2 <sqrtf+0x2e>
100125aa:	1c21      	adds	r1, r4, #0
100125ac:	1c20      	adds	r0, r4, #0
100125ae:	f002 f831 	bl	10014614 <__aeabi_fcmpun>
100125b2:	1e07      	subs	r7, r0, #0
100125b4:	d105      	bne.n	100125c2 <sqrtf+0x2e>
100125b6:	2100      	movs	r1, #0
100125b8:	1c20      	adds	r0, r4, #0
100125ba:	f001 f9c7 	bl	1001394c <__aeabi_fcmplt>
100125be:	2800      	cmp	r0, #0
100125c0:	d102      	bne.n	100125c8 <sqrtf+0x34>
100125c2:	1c28      	adds	r0, r5, #0
100125c4:	b00d      	add	sp, #52	; 0x34
100125c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
100125c8:	2301      	movs	r3, #1
100125ca:	9302      	str	r3, [sp, #8]
100125cc:	4b19      	ldr	r3, [pc, #100]	; (10012634 <sqrtf+0xa0>)
100125ce:	1c20      	adds	r0, r4, #0
100125d0:	9303      	str	r3, [sp, #12]
100125d2:	970a      	str	r7, [sp, #40]	; 0x28
100125d4:	f003 fecc 	bl	10016370 <__aeabi_f2d>
100125d8:	2200      	movs	r2, #0
100125da:	9006      	str	r0, [sp, #24]
100125dc:	9107      	str	r1, [sp, #28]
100125de:	9004      	str	r0, [sp, #16]
100125e0:	9105      	str	r1, [sp, #20]
100125e2:	2300      	movs	r3, #0
100125e4:	2e00      	cmp	r6, #0
100125e6:	d014      	beq.n	10012612 <sqrtf+0x7e>
100125e8:	0010      	movs	r0, r2
100125ea:	0019      	movs	r1, r3
100125ec:	f002 fbfe 	bl	10014dec <__aeabi_ddiv>
100125f0:	9008      	str	r0, [sp, #32]
100125f2:	9109      	str	r1, [sp, #36]	; 0x24
100125f4:	2e02      	cmp	r6, #2
100125f6:	d10e      	bne.n	10012616 <sqrtf+0x82>
100125f8:	f003 ffb8 	bl	1001656c <__errno>
100125fc:	2321      	movs	r3, #33	; 0x21
100125fe:	6003      	str	r3, [r0, #0]
10012600:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10012602:	9301      	str	r3, [sp, #4]
10012604:	2b00      	cmp	r3, #0
10012606:	d10c      	bne.n	10012622 <sqrtf+0x8e>
10012608:	9808      	ldr	r0, [sp, #32]
1001260a:	9909      	ldr	r1, [sp, #36]	; 0x24
1001260c:	f003 ff04 	bl	10016418 <__aeabi_d2f>
10012610:	e7d8      	b.n	100125c4 <sqrtf+0x30>
10012612:	9208      	str	r2, [sp, #32]
10012614:	9309      	str	r3, [sp, #36]	; 0x24
10012616:	a802      	add	r0, sp, #8
10012618:	f000 fea4 	bl	10013364 <matherr>
1001261c:	2800      	cmp	r0, #0
1001261e:	d1ef      	bne.n	10012600 <sqrtf+0x6c>
10012620:	e7ea      	b.n	100125f8 <sqrtf+0x64>
10012622:	f003 ffa3 	bl	1001656c <__errno>
10012626:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10012628:	9301      	str	r3, [sp, #4]
1001262a:	6003      	str	r3, [r0, #0]
1001262c:	e7ec      	b.n	10012608 <sqrtf+0x74>
1001262e:	46c0      	nop			; (mov r8, r8)
10012630:	100188e0 	.word	0x100188e0
10012634:	100186bc 	.word	0x100186bc

10012638 <__ieee754_pow>:
10012638:	b5f0      	push	{r4, r5, r6, r7, lr}
1001263a:	4656      	mov	r6, sl
1001263c:	464d      	mov	r5, r9
1001263e:	4644      	mov	r4, r8
10012640:	465f      	mov	r7, fp
10012642:	b4f0      	push	{r4, r5, r6, r7}
10012644:	001c      	movs	r4, r3
10012646:	0013      	movs	r3, r2
10012648:	0067      	lsls	r7, r4, #1
1001264a:	b091      	sub	sp, #68	; 0x44
1001264c:	087f      	lsrs	r7, r7, #1
1001264e:	9300      	str	r3, [sp, #0]
10012650:	9401      	str	r4, [sp, #4]
10012652:	0006      	movs	r6, r0
10012654:	000d      	movs	r5, r1
10012656:	4680      	mov	r8, r0
10012658:	4689      	mov	r9, r1
1001265a:	46a2      	mov	sl, r4
1001265c:	433b      	orrs	r3, r7
1001265e:	d032      	beq.n	100126c6 <__ieee754_pow+0x8e>
10012660:	4b6e      	ldr	r3, [pc, #440]	; (1001281c <__ieee754_pow+0x1e4>)
10012662:	006c      	lsls	r4, r5, #1
10012664:	0864      	lsrs	r4, r4, #1
10012666:	429c      	cmp	r4, r3
10012668:	dc29      	bgt.n	100126be <__ieee754_pow+0x86>
1001266a:	d026      	beq.n	100126ba <__ieee754_pow+0x82>
1001266c:	429f      	cmp	r7, r3
1001266e:	dc26      	bgt.n	100126be <__ieee754_pow+0x86>
10012670:	4b6a      	ldr	r3, [pc, #424]	; (1001281c <__ieee754_pow+0x1e4>)
10012672:	429f      	cmp	r7, r3
10012674:	d100      	bne.n	10012678 <__ieee754_pow+0x40>
10012676:	e089      	b.n	1001278c <__ieee754_pow+0x154>
10012678:	2300      	movs	r3, #0
1001267a:	469b      	mov	fp, r3
1001267c:	464b      	mov	r3, r9
1001267e:	2b00      	cmp	r3, #0
10012680:	da00      	bge.n	10012684 <__ieee754_pow+0x4c>
10012682:	e087      	b.n	10012794 <__ieee754_pow+0x15c>
10012684:	2a00      	cmp	r2, #0
10012686:	d12f      	bne.n	100126e8 <__ieee754_pow+0xb0>
10012688:	4b64      	ldr	r3, [pc, #400]	; (1001281c <__ieee754_pow+0x1e4>)
1001268a:	429f      	cmp	r7, r3
1001268c:	d100      	bne.n	10012690 <__ieee754_pow+0x58>
1001268e:	e09f      	b.n	100127d0 <__ieee754_pow+0x198>
10012690:	4b63      	ldr	r3, [pc, #396]	; (10012820 <__ieee754_pow+0x1e8>)
10012692:	429f      	cmp	r7, r3
10012694:	d05d      	beq.n	10012752 <__ieee754_pow+0x11a>
10012696:	2380      	movs	r3, #128	; 0x80
10012698:	05db      	lsls	r3, r3, #23
1001269a:	459a      	cmp	sl, r3
1001269c:	d101      	bne.n	100126a2 <__ieee754_pow+0x6a>
1001269e:	f000 fbc1 	bl	10012e24 <__ieee754_pow+0x7ec>
100126a2:	4b60      	ldr	r3, [pc, #384]	; (10012824 <__ieee754_pow+0x1ec>)
100126a4:	459a      	cmp	sl, r3
100126a6:	d11f      	bne.n	100126e8 <__ieee754_pow+0xb0>
100126a8:	464b      	mov	r3, r9
100126aa:	2b00      	cmp	r3, #0
100126ac:	db1c      	blt.n	100126e8 <__ieee754_pow+0xb0>
100126ae:	0030      	movs	r0, r6
100126b0:	0029      	movs	r1, r5
100126b2:	f000 fcf7 	bl	100130a4 <__ieee754_sqrt>
100126b6:	0006      	movs	r6, r0
100126b8:	e007      	b.n	100126ca <__ieee754_pow+0x92>
100126ba:	2800      	cmp	r0, #0
100126bc:	d00d      	beq.n	100126da <__ieee754_pow+0xa2>
100126be:	4b5a      	ldr	r3, [pc, #360]	; (10012828 <__ieee754_pow+0x1f0>)
100126c0:	18e0      	adds	r0, r4, r3
100126c2:	4330      	orrs	r0, r6
100126c4:	d10b      	bne.n	100126de <__ieee754_pow+0xa6>
100126c6:	2600      	movs	r6, #0
100126c8:	4955      	ldr	r1, [pc, #340]	; (10012820 <__ieee754_pow+0x1e8>)
100126ca:	0030      	movs	r0, r6
100126cc:	b011      	add	sp, #68	; 0x44
100126ce:	bc3c      	pop	{r2, r3, r4, r5}
100126d0:	4690      	mov	r8, r2
100126d2:	4699      	mov	r9, r3
100126d4:	46a2      	mov	sl, r4
100126d6:	46ab      	mov	fp, r5
100126d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100126da:	42a7      	cmp	r7, r4
100126dc:	ddc8      	ble.n	10012670 <__ieee754_pow+0x38>
100126de:	4853      	ldr	r0, [pc, #332]	; (1001282c <__ieee754_pow+0x1f4>)
100126e0:	f000 fe42 	bl	10013368 <nan>
100126e4:	0006      	movs	r6, r0
100126e6:	e7f0      	b.n	100126ca <__ieee754_pow+0x92>
100126e8:	0030      	movs	r0, r6
100126ea:	0029      	movs	r1, r5
100126ec:	f000 fe2c 	bl	10013348 <fabs>
100126f0:	4643      	mov	r3, r8
100126f2:	2b00      	cmp	r3, #0
100126f4:	d01d      	beq.n	10012732 <__ieee754_pow+0xfa>
100126f6:	0feb      	lsrs	r3, r5, #31
100126f8:	3b01      	subs	r3, #1
100126fa:	4698      	mov	r8, r3
100126fc:	465b      	mov	r3, fp
100126fe:	4642      	mov	r2, r8
10012700:	4313      	orrs	r3, r2
10012702:	d079      	beq.n	100127f8 <__ieee754_pow+0x1c0>
10012704:	4b4a      	ldr	r3, [pc, #296]	; (10012830 <__ieee754_pow+0x1f8>)
10012706:	429f      	cmp	r7, r3
10012708:	dc00      	bgt.n	1001270c <__ieee754_pow+0xd4>
1001270a:	e09f      	b.n	1001284c <__ieee754_pow+0x214>
1001270c:	4b49      	ldr	r3, [pc, #292]	; (10012834 <__ieee754_pow+0x1fc>)
1001270e:	429f      	cmp	r7, r3
10012710:	dc01      	bgt.n	10012716 <__ieee754_pow+0xde>
10012712:	f000 fbce 	bl	10012eb2 <__ieee754_pow+0x87a>
10012716:	4b48      	ldr	r3, [pc, #288]	; (10012838 <__ieee754_pow+0x200>)
10012718:	429c      	cmp	r4, r3
1001271a:	dd79      	ble.n	10012810 <__ieee754_pow+0x1d8>
1001271c:	4653      	mov	r3, sl
1001271e:	2b00      	cmp	r3, #0
10012720:	dd79      	ble.n	10012816 <__ieee754_pow+0x1de>
10012722:	4a46      	ldr	r2, [pc, #280]	; (1001283c <__ieee754_pow+0x204>)
10012724:	4b46      	ldr	r3, [pc, #280]	; (10012840 <__ieee754_pow+0x208>)
10012726:	0010      	movs	r0, r2
10012728:	0019      	movs	r1, r3
1001272a:	f002 ff83 	bl	10015634 <__aeabi_dmul>
1001272e:	0006      	movs	r6, r0
10012730:	e7cb      	b.n	100126ca <__ieee754_pow+0x92>
10012732:	2c00      	cmp	r4, #0
10012734:	d004      	beq.n	10012740 <__ieee754_pow+0x108>
10012736:	4a3a      	ldr	r2, [pc, #232]	; (10012820 <__ieee754_pow+0x1e8>)
10012738:	00ab      	lsls	r3, r5, #2
1001273a:	089b      	lsrs	r3, r3, #2
1001273c:	4293      	cmp	r3, r2
1001273e:	d1da      	bne.n	100126f6 <__ieee754_pow+0xbe>
10012740:	4653      	mov	r3, sl
10012742:	2b00      	cmp	r3, #0
10012744:	da00      	bge.n	10012748 <__ieee754_pow+0x110>
10012746:	e3ad      	b.n	10012ea4 <__ieee754_pow+0x86c>
10012748:	464b      	mov	r3, r9
1001274a:	2b00      	cmp	r3, #0
1001274c:	db0d      	blt.n	1001276a <__ieee754_pow+0x132>
1001274e:	0006      	movs	r6, r0
10012750:	e7bb      	b.n	100126ca <__ieee754_pow+0x92>
10012752:	4653      	mov	r3, sl
10012754:	0029      	movs	r1, r5
10012756:	2b00      	cmp	r3, #0
10012758:	dab7      	bge.n	100126ca <__ieee754_pow+0x92>
1001275a:	0032      	movs	r2, r6
1001275c:	002b      	movs	r3, r5
1001275e:	2000      	movs	r0, #0
10012760:	492f      	ldr	r1, [pc, #188]	; (10012820 <__ieee754_pow+0x1e8>)
10012762:	f002 fb43 	bl	10014dec <__aeabi_ddiv>
10012766:	0006      	movs	r6, r0
10012768:	e7af      	b.n	100126ca <__ieee754_pow+0x92>
1001276a:	4b2f      	ldr	r3, [pc, #188]	; (10012828 <__ieee754_pow+0x1f0>)
1001276c:	469c      	mov	ip, r3
1001276e:	465b      	mov	r3, fp
10012770:	4464      	add	r4, ip
10012772:	431c      	orrs	r4, r3
10012774:	d101      	bne.n	1001277a <__ieee754_pow+0x142>
10012776:	f000 fc2b 	bl	10012fd0 <__ieee754_pow+0x998>
1001277a:	465b      	mov	r3, fp
1001277c:	0006      	movs	r6, r0
1001277e:	2b01      	cmp	r3, #1
10012780:	d1a3      	bne.n	100126ca <__ieee754_pow+0x92>
10012782:	2380      	movs	r3, #128	; 0x80
10012784:	061b      	lsls	r3, r3, #24
10012786:	469c      	mov	ip, r3
10012788:	4461      	add	r1, ip
1001278a:	e79e      	b.n	100126ca <__ieee754_pow+0x92>
1001278c:	2a00      	cmp	r2, #0
1001278e:	d100      	bne.n	10012792 <__ieee754_pow+0x15a>
10012790:	e772      	b.n	10012678 <__ieee754_pow+0x40>
10012792:	e794      	b.n	100126be <__ieee754_pow+0x86>
10012794:	4b2b      	ldr	r3, [pc, #172]	; (10012844 <__ieee754_pow+0x20c>)
10012796:	429f      	cmp	r7, r3
10012798:	dc2b      	bgt.n	100127f2 <__ieee754_pow+0x1ba>
1001279a:	4b27      	ldr	r3, [pc, #156]	; (10012838 <__ieee754_pow+0x200>)
1001279c:	429f      	cmp	r7, r3
1001279e:	dc00      	bgt.n	100127a2 <__ieee754_pow+0x16a>
100127a0:	e770      	b.n	10012684 <__ieee754_pow+0x4c>
100127a2:	4929      	ldr	r1, [pc, #164]	; (10012848 <__ieee754_pow+0x210>)
100127a4:	153b      	asrs	r3, r7, #20
100127a6:	468c      	mov	ip, r1
100127a8:	4463      	add	r3, ip
100127aa:	2b14      	cmp	r3, #20
100127ac:	dc01      	bgt.n	100127b2 <__ieee754_pow+0x17a>
100127ae:	f000 fbf2 	bl	10012f96 <__ieee754_pow+0x95e>
100127b2:	2134      	movs	r1, #52	; 0x34
100127b4:	1acb      	subs	r3, r1, r3
100127b6:	9900      	ldr	r1, [sp, #0]
100127b8:	40d9      	lsrs	r1, r3
100127ba:	0008      	movs	r0, r1
100127bc:	4098      	lsls	r0, r3
100127be:	4282      	cmp	r2, r0
100127c0:	d000      	beq.n	100127c4 <__ieee754_pow+0x18c>
100127c2:	e75f      	b.n	10012684 <__ieee754_pow+0x4c>
100127c4:	2301      	movs	r3, #1
100127c6:	4019      	ands	r1, r3
100127c8:	3301      	adds	r3, #1
100127ca:	1a5b      	subs	r3, r3, r1
100127cc:	469b      	mov	fp, r3
100127ce:	e759      	b.n	10012684 <__ieee754_pow+0x4c>
100127d0:	4b15      	ldr	r3, [pc, #84]	; (10012828 <__ieee754_pow+0x1f0>)
100127d2:	18e0      	adds	r0, r4, r3
100127d4:	4306      	orrs	r6, r0
100127d6:	d100      	bne.n	100127da <__ieee754_pow+0x1a2>
100127d8:	e775      	b.n	100126c6 <__ieee754_pow+0x8e>
100127da:	4b17      	ldr	r3, [pc, #92]	; (10012838 <__ieee754_pow+0x200>)
100127dc:	429c      	cmp	r4, r3
100127de:	dc00      	bgt.n	100127e2 <__ieee754_pow+0x1aa>
100127e0:	e351      	b.n	10012e86 <__ieee754_pow+0x84e>
100127e2:	4653      	mov	r3, sl
100127e4:	2b00      	cmp	r3, #0
100127e6:	db16      	blt.n	10012816 <__ieee754_pow+0x1de>
100127e8:	9b00      	ldr	r3, [sp, #0]
100127ea:	9c01      	ldr	r4, [sp, #4]
100127ec:	001e      	movs	r6, r3
100127ee:	0021      	movs	r1, r4
100127f0:	e76b      	b.n	100126ca <__ieee754_pow+0x92>
100127f2:	2302      	movs	r3, #2
100127f4:	469b      	mov	fp, r3
100127f6:	e745      	b.n	10012684 <__ieee754_pow+0x4c>
100127f8:	0032      	movs	r2, r6
100127fa:	002b      	movs	r3, r5
100127fc:	0030      	movs	r0, r6
100127fe:	0029      	movs	r1, r5
10012800:	f003 f992 	bl	10015b28 <__aeabi_dsub>
10012804:	0002      	movs	r2, r0
10012806:	000b      	movs	r3, r1
10012808:	f002 faf0 	bl	10014dec <__aeabi_ddiv>
1001280c:	0006      	movs	r6, r0
1001280e:	e75c      	b.n	100126ca <__ieee754_pow+0x92>
10012810:	4653      	mov	r3, sl
10012812:	2b00      	cmp	r3, #0
10012814:	db85      	blt.n	10012722 <__ieee754_pow+0xea>
10012816:	2600      	movs	r6, #0
10012818:	2100      	movs	r1, #0
1001281a:	e756      	b.n	100126ca <__ieee754_pow+0x92>
1001281c:	7ff00000 	.word	0x7ff00000
10012820:	3ff00000 	.word	0x3ff00000
10012824:	3fe00000 	.word	0x3fe00000
10012828:	c0100000 	.word	0xc0100000
1001282c:	100185fc 	.word	0x100185fc
10012830:	41e00000 	.word	0x41e00000
10012834:	43f00000 	.word	0x43f00000
10012838:	3fefffff 	.word	0x3fefffff
1001283c:	8800759c 	.word	0x8800759c
10012840:	7e37e43c 	.word	0x7e37e43c
10012844:	433fffff 	.word	0x433fffff
10012848:	fffffc01 	.word	0xfffffc01
1001284c:	4be8      	ldr	r3, [pc, #928]	; (10012bf0 <__ieee754_pow+0x5b8>)
1001284e:	2200      	movs	r2, #0
10012850:	429c      	cmp	r4, r3
10012852:	dc06      	bgt.n	10012862 <__ieee754_pow+0x22a>
10012854:	2200      	movs	r2, #0
10012856:	4be7      	ldr	r3, [pc, #924]	; (10012bf4 <__ieee754_pow+0x5bc>)
10012858:	f002 feec 	bl	10015634 <__aeabi_dmul>
1001285c:	2235      	movs	r2, #53	; 0x35
1001285e:	000c      	movs	r4, r1
10012860:	4252      	negs	r2, r2
10012862:	4de5      	ldr	r5, [pc, #916]	; (10012bf8 <__ieee754_pow+0x5c0>)
10012864:	1523      	asrs	r3, r4, #20
10012866:	46ac      	mov	ip, r5
10012868:	4463      	add	r3, ip
1001286a:	4699      	mov	r9, r3
1001286c:	0324      	lsls	r4, r4, #12
1001286e:	4de3      	ldr	r5, [pc, #908]	; (10012bfc <__ieee754_pow+0x5c4>)
10012870:	4be3      	ldr	r3, [pc, #908]	; (10012c00 <__ieee754_pow+0x5c8>)
10012872:	0b24      	lsrs	r4, r4, #12
10012874:	4491      	add	r9, r2
10012876:	4325      	orrs	r5, r4
10012878:	429c      	cmp	r4, r3
1001287a:	dd09      	ble.n	10012890 <__ieee754_pow+0x258>
1001287c:	4be1      	ldr	r3, [pc, #900]	; (10012c04 <__ieee754_pow+0x5cc>)
1001287e:	429c      	cmp	r4, r3
10012880:	dc00      	bgt.n	10012884 <__ieee754_pow+0x24c>
10012882:	e3a9      	b.n	10012fd8 <__ieee754_pow+0x9a0>
10012884:	2301      	movs	r3, #1
10012886:	469c      	mov	ip, r3
10012888:	4bdf      	ldr	r3, [pc, #892]	; (10012c08 <__ieee754_pow+0x5d0>)
1001288a:	44e1      	add	r9, ip
1001288c:	469c      	mov	ip, r3
1001288e:	4465      	add	r5, ip
10012890:	2300      	movs	r3, #0
10012892:	2400      	movs	r4, #0
10012894:	2200      	movs	r2, #0
10012896:	9308      	str	r3, [sp, #32]
10012898:	9409      	str	r4, [sp, #36]	; 0x24
1001289a:	930c      	str	r3, [sp, #48]	; 0x30
1001289c:	940d      	str	r4, [sp, #52]	; 0x34
1001289e:	2400      	movs	r4, #0
100128a0:	4bd6      	ldr	r3, [pc, #856]	; (10012bfc <__ieee754_pow+0x5c4>)
100128a2:	9206      	str	r2, [sp, #24]
100128a4:	9307      	str	r3, [sp, #28]
100128a6:	9a06      	ldr	r2, [sp, #24]
100128a8:	9b07      	ldr	r3, [sp, #28]
100128aa:	0029      	movs	r1, r5
100128ac:	900a      	str	r0, [sp, #40]	; 0x28
100128ae:	910b      	str	r1, [sp, #44]	; 0x2c
100128b0:	f003 f93a 	bl	10015b28 <__aeabi_dsub>
100128b4:	9a06      	ldr	r2, [sp, #24]
100128b6:	9b07      	ldr	r3, [sp, #28]
100128b8:	0006      	movs	r6, r0
100128ba:	000f      	movs	r7, r1
100128bc:	980a      	ldr	r0, [sp, #40]	; 0x28
100128be:	990b      	ldr	r1, [sp, #44]	; 0x2c
100128c0:	f001 ff68 	bl	10014794 <__aeabi_dadd>
100128c4:	0002      	movs	r2, r0
100128c6:	000b      	movs	r3, r1
100128c8:	2000      	movs	r0, #0
100128ca:	49cc      	ldr	r1, [pc, #816]	; (10012bfc <__ieee754_pow+0x5c4>)
100128cc:	f002 fa8e 	bl	10014dec <__aeabi_ddiv>
100128d0:	000a      	movs	r2, r1
100128d2:	0001      	movs	r1, r0
100128d4:	0013      	movs	r3, r2
100128d6:	910e      	str	r1, [sp, #56]	; 0x38
100128d8:	920f      	str	r2, [sp, #60]	; 0x3c
100128da:	0002      	movs	r2, r0
100128dc:	0039      	movs	r1, r7
100128de:	0030      	movs	r0, r6
100128e0:	f002 fea8 	bl	10015634 <__aeabi_dmul>
100128e4:	000a      	movs	r2, r1
100128e6:	0001      	movs	r1, r0
100128e8:	2080      	movs	r0, #128	; 0x80
100128ea:	9104      	str	r1, [sp, #16]
100128ec:	9205      	str	r2, [sp, #20]
100128ee:	0013      	movs	r3, r2
100128f0:	2200      	movs	r2, #0
100128f2:	2180      	movs	r1, #128	; 0x80
100128f4:	0300      	lsls	r0, r0, #12
100128f6:	4684      	mov	ip, r0
100128f8:	9202      	str	r2, [sp, #8]
100128fa:	9303      	str	r3, [sp, #12]
100128fc:	2200      	movs	r2, #0
100128fe:	0589      	lsls	r1, r1, #22
10012900:	106d      	asrs	r5, r5, #1
10012902:	430d      	orrs	r5, r1
10012904:	4465      	add	r5, ip
10012906:	192b      	adds	r3, r5, r4
10012908:	9802      	ldr	r0, [sp, #8]
1001290a:	9903      	ldr	r1, [sp, #12]
1001290c:	0014      	movs	r4, r2
1001290e:	001d      	movs	r5, r3
10012910:	f002 fe90 	bl	10015634 <__aeabi_dmul>
10012914:	0002      	movs	r2, r0
10012916:	000b      	movs	r3, r1
10012918:	0030      	movs	r0, r6
1001291a:	0039      	movs	r1, r7
1001291c:	f003 f904 	bl	10015b28 <__aeabi_dsub>
10012920:	9a06      	ldr	r2, [sp, #24]
10012922:	9b07      	ldr	r3, [sp, #28]
10012924:	0006      	movs	r6, r0
10012926:	000f      	movs	r7, r1
10012928:	0020      	movs	r0, r4
1001292a:	0029      	movs	r1, r5
1001292c:	f003 f8fc 	bl	10015b28 <__aeabi_dsub>
10012930:	0002      	movs	r2, r0
10012932:	000b      	movs	r3, r1
10012934:	980a      	ldr	r0, [sp, #40]	; 0x28
10012936:	990b      	ldr	r1, [sp, #44]	; 0x2c
10012938:	f003 f8f6 	bl	10015b28 <__aeabi_dsub>
1001293c:	9a02      	ldr	r2, [sp, #8]
1001293e:	9b03      	ldr	r3, [sp, #12]
10012940:	f002 fe78 	bl	10015634 <__aeabi_dmul>
10012944:	0002      	movs	r2, r0
10012946:	000b      	movs	r3, r1
10012948:	0030      	movs	r0, r6
1001294a:	0039      	movs	r1, r7
1001294c:	f003 f8ec 	bl	10015b28 <__aeabi_dsub>
10012950:	9a0e      	ldr	r2, [sp, #56]	; 0x38
10012952:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
10012954:	f002 fe6e 	bl	10015634 <__aeabi_dmul>
10012958:	9d04      	ldr	r5, [sp, #16]
1001295a:	9e05      	ldr	r6, [sp, #20]
1001295c:	9006      	str	r0, [sp, #24]
1001295e:	9107      	str	r1, [sp, #28]
10012960:	002a      	movs	r2, r5
10012962:	0033      	movs	r3, r6
10012964:	0028      	movs	r0, r5
10012966:	0031      	movs	r1, r6
10012968:	f002 fe64 	bl	10015634 <__aeabi_dmul>
1001296c:	0006      	movs	r6, r0
1001296e:	000f      	movs	r7, r1
10012970:	4aa6      	ldr	r2, [pc, #664]	; (10012c0c <__ieee754_pow+0x5d4>)
10012972:	4ba7      	ldr	r3, [pc, #668]	; (10012c10 <__ieee754_pow+0x5d8>)
10012974:	f002 fe5e 	bl	10015634 <__aeabi_dmul>
10012978:	4aa6      	ldr	r2, [pc, #664]	; (10012c14 <__ieee754_pow+0x5dc>)
1001297a:	4ba7      	ldr	r3, [pc, #668]	; (10012c18 <__ieee754_pow+0x5e0>)
1001297c:	f001 ff0a 	bl	10014794 <__aeabi_dadd>
10012980:	0032      	movs	r2, r6
10012982:	003b      	movs	r3, r7
10012984:	f002 fe56 	bl	10015634 <__aeabi_dmul>
10012988:	4aa4      	ldr	r2, [pc, #656]	; (10012c1c <__ieee754_pow+0x5e4>)
1001298a:	4ba5      	ldr	r3, [pc, #660]	; (10012c20 <__ieee754_pow+0x5e8>)
1001298c:	f001 ff02 	bl	10014794 <__aeabi_dadd>
10012990:	0032      	movs	r2, r6
10012992:	003b      	movs	r3, r7
10012994:	f002 fe4e 	bl	10015634 <__aeabi_dmul>
10012998:	4aa2      	ldr	r2, [pc, #648]	; (10012c24 <__ieee754_pow+0x5ec>)
1001299a:	4ba3      	ldr	r3, [pc, #652]	; (10012c28 <__ieee754_pow+0x5f0>)
1001299c:	f001 fefa 	bl	10014794 <__aeabi_dadd>
100129a0:	0032      	movs	r2, r6
100129a2:	003b      	movs	r3, r7
100129a4:	f002 fe46 	bl	10015634 <__aeabi_dmul>
100129a8:	4aa0      	ldr	r2, [pc, #640]	; (10012c2c <__ieee754_pow+0x5f4>)
100129aa:	4ba1      	ldr	r3, [pc, #644]	; (10012c30 <__ieee754_pow+0x5f8>)
100129ac:	f001 fef2 	bl	10014794 <__aeabi_dadd>
100129b0:	0032      	movs	r2, r6
100129b2:	003b      	movs	r3, r7
100129b4:	f002 fe3e 	bl	10015634 <__aeabi_dmul>
100129b8:	4a9e      	ldr	r2, [pc, #632]	; (10012c34 <__ieee754_pow+0x5fc>)
100129ba:	4b9f      	ldr	r3, [pc, #636]	; (10012c38 <__ieee754_pow+0x600>)
100129bc:	f001 feea 	bl	10014794 <__aeabi_dadd>
100129c0:	0032      	movs	r2, r6
100129c2:	0004      	movs	r4, r0
100129c4:	000d      	movs	r5, r1
100129c6:	003b      	movs	r3, r7
100129c8:	0030      	movs	r0, r6
100129ca:	0039      	movs	r1, r7
100129cc:	f002 fe32 	bl	10015634 <__aeabi_dmul>
100129d0:	0002      	movs	r2, r0
100129d2:	000b      	movs	r3, r1
100129d4:	0020      	movs	r0, r4
100129d6:	0029      	movs	r1, r5
100129d8:	f002 fe2c 	bl	10015634 <__aeabi_dmul>
100129dc:	9e02      	ldr	r6, [sp, #8]
100129de:	9f03      	ldr	r7, [sp, #12]
100129e0:	0004      	movs	r4, r0
100129e2:	000d      	movs	r5, r1
100129e4:	9804      	ldr	r0, [sp, #16]
100129e6:	9905      	ldr	r1, [sp, #20]
100129e8:	0032      	movs	r2, r6
100129ea:	003b      	movs	r3, r7
100129ec:	f001 fed2 	bl	10014794 <__aeabi_dadd>
100129f0:	9a06      	ldr	r2, [sp, #24]
100129f2:	9b07      	ldr	r3, [sp, #28]
100129f4:	f002 fe1e 	bl	10015634 <__aeabi_dmul>
100129f8:	0022      	movs	r2, r4
100129fa:	002b      	movs	r3, r5
100129fc:	f001 feca 	bl	10014794 <__aeabi_dadd>
10012a00:	0032      	movs	r2, r6
10012a02:	900a      	str	r0, [sp, #40]	; 0x28
10012a04:	910b      	str	r1, [sp, #44]	; 0x2c
10012a06:	003b      	movs	r3, r7
10012a08:	0030      	movs	r0, r6
10012a0a:	0039      	movs	r1, r7
10012a0c:	9602      	str	r6, [sp, #8]
10012a0e:	9703      	str	r7, [sp, #12]
10012a10:	f002 fe10 	bl	10015634 <__aeabi_dmul>
10012a14:	2200      	movs	r2, #0
10012a16:	4b89      	ldr	r3, [pc, #548]	; (10012c3c <__ieee754_pow+0x604>)
10012a18:	0004      	movs	r4, r0
10012a1a:	000d      	movs	r5, r1
10012a1c:	f001 feba 	bl	10014794 <__aeabi_dadd>
10012a20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
10012a22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10012a24:	f001 feb6 	bl	10014794 <__aeabi_dadd>
10012a28:	2600      	movs	r6, #0
10012a2a:	000f      	movs	r7, r1
10012a2c:	0032      	movs	r2, r6
10012a2e:	000b      	movs	r3, r1
10012a30:	9802      	ldr	r0, [sp, #8]
10012a32:	9903      	ldr	r1, [sp, #12]
10012a34:	f002 fdfe 	bl	10015634 <__aeabi_dmul>
10012a38:	2200      	movs	r2, #0
10012a3a:	9002      	str	r0, [sp, #8]
10012a3c:	9103      	str	r1, [sp, #12]
10012a3e:	4b7f      	ldr	r3, [pc, #508]	; (10012c3c <__ieee754_pow+0x604>)
10012a40:	0030      	movs	r0, r6
10012a42:	0039      	movs	r1, r7
10012a44:	f003 f870 	bl	10015b28 <__aeabi_dsub>
10012a48:	0022      	movs	r2, r4
10012a4a:	002b      	movs	r3, r5
10012a4c:	f003 f86c 	bl	10015b28 <__aeabi_dsub>
10012a50:	0002      	movs	r2, r0
10012a52:	000b      	movs	r3, r1
10012a54:	980a      	ldr	r0, [sp, #40]	; 0x28
10012a56:	990b      	ldr	r1, [sp, #44]	; 0x2c
10012a58:	f003 f866 	bl	10015b28 <__aeabi_dsub>
10012a5c:	9a04      	ldr	r2, [sp, #16]
10012a5e:	9b05      	ldr	r3, [sp, #20]
10012a60:	f002 fde8 	bl	10015634 <__aeabi_dmul>
10012a64:	0032      	movs	r2, r6
10012a66:	0004      	movs	r4, r0
10012a68:	000d      	movs	r5, r1
10012a6a:	9806      	ldr	r0, [sp, #24]
10012a6c:	9907      	ldr	r1, [sp, #28]
10012a6e:	003b      	movs	r3, r7
10012a70:	f002 fde0 	bl	10015634 <__aeabi_dmul>
10012a74:	0002      	movs	r2, r0
10012a76:	000b      	movs	r3, r1
10012a78:	0020      	movs	r0, r4
10012a7a:	0029      	movs	r1, r5
10012a7c:	f001 fe8a 	bl	10014794 <__aeabi_dadd>
10012a80:	0004      	movs	r4, r0
10012a82:	000d      	movs	r5, r1
10012a84:	0002      	movs	r2, r0
10012a86:	000b      	movs	r3, r1
10012a88:	9802      	ldr	r0, [sp, #8]
10012a8a:	9903      	ldr	r1, [sp, #12]
10012a8c:	f001 fe82 	bl	10014794 <__aeabi_dadd>
10012a90:	2600      	movs	r6, #0
10012a92:	22e0      	movs	r2, #224	; 0xe0
10012a94:	4b6a      	ldr	r3, [pc, #424]	; (10012c40 <__ieee754_pow+0x608>)
10012a96:	0612      	lsls	r2, r2, #24
10012a98:	0030      	movs	r0, r6
10012a9a:	000f      	movs	r7, r1
10012a9c:	f002 fdca 	bl	10015634 <__aeabi_dmul>
10012aa0:	9a02      	ldr	r2, [sp, #8]
10012aa2:	9b03      	ldr	r3, [sp, #12]
10012aa4:	9004      	str	r0, [sp, #16]
10012aa6:	9105      	str	r1, [sp, #20]
10012aa8:	0030      	movs	r0, r6
10012aaa:	0039      	movs	r1, r7
10012aac:	f003 f83c 	bl	10015b28 <__aeabi_dsub>
10012ab0:	0002      	movs	r2, r0
10012ab2:	000b      	movs	r3, r1
10012ab4:	0020      	movs	r0, r4
10012ab6:	0029      	movs	r1, r5
10012ab8:	f003 f836 	bl	10015b28 <__aeabi_dsub>
10012abc:	4a61      	ldr	r2, [pc, #388]	; (10012c44 <__ieee754_pow+0x60c>)
10012abe:	4b60      	ldr	r3, [pc, #384]	; (10012c40 <__ieee754_pow+0x608>)
10012ac0:	f002 fdb8 	bl	10015634 <__aeabi_dmul>
10012ac4:	4a60      	ldr	r2, [pc, #384]	; (10012c48 <__ieee754_pow+0x610>)
10012ac6:	0004      	movs	r4, r0
10012ac8:	000d      	movs	r5, r1
10012aca:	4b60      	ldr	r3, [pc, #384]	; (10012c4c <__ieee754_pow+0x614>)
10012acc:	0030      	movs	r0, r6
10012ace:	0039      	movs	r1, r7
10012ad0:	f002 fdb0 	bl	10015634 <__aeabi_dmul>
10012ad4:	0002      	movs	r2, r0
10012ad6:	000b      	movs	r3, r1
10012ad8:	0020      	movs	r0, r4
10012ada:	0029      	movs	r1, r5
10012adc:	f001 fe5a 	bl	10014794 <__aeabi_dadd>
10012ae0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
10012ae2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
10012ae4:	f001 fe56 	bl	10014794 <__aeabi_dadd>
10012ae8:	0006      	movs	r6, r0
10012aea:	4648      	mov	r0, r9
10012aec:	000f      	movs	r7, r1
10012aee:	f003 fbc5 	bl	1001627c <__aeabi_i2d>
10012af2:	0004      	movs	r4, r0
10012af4:	000d      	movs	r5, r1
10012af6:	9804      	ldr	r0, [sp, #16]
10012af8:	9905      	ldr	r1, [sp, #20]
10012afa:	0032      	movs	r2, r6
10012afc:	003b      	movs	r3, r7
10012afe:	f001 fe49 	bl	10014794 <__aeabi_dadd>
10012b02:	9a08      	ldr	r2, [sp, #32]
10012b04:	9b09      	ldr	r3, [sp, #36]	; 0x24
10012b06:	f001 fe45 	bl	10014794 <__aeabi_dadd>
10012b0a:	0022      	movs	r2, r4
10012b0c:	002b      	movs	r3, r5
10012b0e:	f001 fe41 	bl	10014794 <__aeabi_dadd>
10012b12:	2000      	movs	r0, #0
10012b14:	0022      	movs	r2, r4
10012b16:	002b      	movs	r3, r5
10012b18:	9002      	str	r0, [sp, #8]
10012b1a:	9103      	str	r1, [sp, #12]
10012b1c:	f003 f804 	bl	10015b28 <__aeabi_dsub>
10012b20:	9a08      	ldr	r2, [sp, #32]
10012b22:	9b09      	ldr	r3, [sp, #36]	; 0x24
10012b24:	f003 f800 	bl	10015b28 <__aeabi_dsub>
10012b28:	9a04      	ldr	r2, [sp, #16]
10012b2a:	9b05      	ldr	r3, [sp, #20]
10012b2c:	f002 fffc 	bl	10015b28 <__aeabi_dsub>
10012b30:	0002      	movs	r2, r0
10012b32:	000b      	movs	r3, r1
10012b34:	0030      	movs	r0, r6
10012b36:	0039      	movs	r1, r7
10012b38:	f002 fff6 	bl	10015b28 <__aeabi_dsub>
10012b3c:	9004      	str	r0, [sp, #16]
10012b3e:	9105      	str	r1, [sp, #20]
10012b40:	465b      	mov	r3, fp
10012b42:	4642      	mov	r2, r8
10012b44:	3b01      	subs	r3, #1
10012b46:	4313      	orrs	r3, r2
10012b48:	d100      	bne.n	10012b4c <__ieee754_pow+0x514>
10012b4a:	e197      	b.n	10012e7c <__ieee754_pow+0x844>
10012b4c:	2300      	movs	r3, #0
10012b4e:	4c2b      	ldr	r4, [pc, #172]	; (10012bfc <__ieee754_pow+0x5c4>)
10012b50:	9306      	str	r3, [sp, #24]
10012b52:	9407      	str	r4, [sp, #28]
10012b54:	9800      	ldr	r0, [sp, #0]
10012b56:	9901      	ldr	r1, [sp, #4]
10012b58:	2600      	movs	r6, #0
10012b5a:	000b      	movs	r3, r1
10012b5c:	0032      	movs	r2, r6
10012b5e:	000f      	movs	r7, r1
10012b60:	f002 ffe2 	bl	10015b28 <__aeabi_dsub>
10012b64:	9a02      	ldr	r2, [sp, #8]
10012b66:	9b03      	ldr	r3, [sp, #12]
10012b68:	f002 fd64 	bl	10015634 <__aeabi_dmul>
10012b6c:	9a00      	ldr	r2, [sp, #0]
10012b6e:	9b01      	ldr	r3, [sp, #4]
10012b70:	0004      	movs	r4, r0
10012b72:	000d      	movs	r5, r1
10012b74:	9804      	ldr	r0, [sp, #16]
10012b76:	9905      	ldr	r1, [sp, #20]
10012b78:	f002 fd5c 	bl	10015634 <__aeabi_dmul>
10012b7c:	0002      	movs	r2, r0
10012b7e:	000b      	movs	r3, r1
10012b80:	0020      	movs	r0, r4
10012b82:	0029      	movs	r1, r5
10012b84:	f001 fe06 	bl	10014794 <__aeabi_dadd>
10012b88:	0004      	movs	r4, r0
10012b8a:	000d      	movs	r5, r1
10012b8c:	9802      	ldr	r0, [sp, #8]
10012b8e:	9903      	ldr	r1, [sp, #12]
10012b90:	003b      	movs	r3, r7
10012b92:	0032      	movs	r2, r6
10012b94:	9404      	str	r4, [sp, #16]
10012b96:	9505      	str	r5, [sp, #20]
10012b98:	f002 fd4c 	bl	10015634 <__aeabi_dmul>
10012b9c:	9000      	str	r0, [sp, #0]
10012b9e:	9101      	str	r1, [sp, #4]
10012ba0:	000b      	movs	r3, r1
10012ba2:	0002      	movs	r2, r0
10012ba4:	0029      	movs	r1, r5
10012ba6:	0020      	movs	r0, r4
10012ba8:	f001 fdf4 	bl	10014794 <__aeabi_dadd>
10012bac:	4b28      	ldr	r3, [pc, #160]	; (10012c50 <__ieee754_pow+0x618>)
10012bae:	4681      	mov	r9, r0
10012bb0:	1e0f      	subs	r7, r1, #0
10012bb2:	468a      	mov	sl, r1
10012bb4:	429f      	cmp	r7, r3
10012bb6:	dc00      	bgt.n	10012bba <__ieee754_pow+0x582>
10012bb8:	e13c      	b.n	10012e34 <__ieee754_pow+0x7fc>
10012bba:	4b26      	ldr	r3, [pc, #152]	; (10012c54 <__ieee754_pow+0x61c>)
10012bbc:	18cb      	adds	r3, r1, r3
10012bbe:	4303      	orrs	r3, r0
10012bc0:	d000      	beq.n	10012bc4 <__ieee754_pow+0x58c>
10012bc2:	e1db      	b.n	10012f7c <__ieee754_pow+0x944>
10012bc4:	9804      	ldr	r0, [sp, #16]
10012bc6:	9905      	ldr	r1, [sp, #20]
10012bc8:	4a23      	ldr	r2, [pc, #140]	; (10012c58 <__ieee754_pow+0x620>)
10012bca:	4b24      	ldr	r3, [pc, #144]	; (10012c5c <__ieee754_pow+0x624>)
10012bcc:	f001 fde2 	bl	10014794 <__aeabi_dadd>
10012bd0:	9a00      	ldr	r2, [sp, #0]
10012bd2:	9b01      	ldr	r3, [sp, #4]
10012bd4:	0004      	movs	r4, r0
10012bd6:	000d      	movs	r5, r1
10012bd8:	4648      	mov	r0, r9
10012bda:	0039      	movs	r1, r7
10012bdc:	f002 ffa4 	bl	10015b28 <__aeabi_dsub>
10012be0:	0002      	movs	r2, r0
10012be2:	000b      	movs	r3, r1
10012be4:	0020      	movs	r0, r4
10012be6:	0029      	movs	r1, r5
10012be8:	f000 fe8a 	bl	10013900 <__aeabi_dcmpgt>
10012bec:	003e      	movs	r6, r7
10012bee:	e037      	b.n	10012c60 <__ieee754_pow+0x628>
10012bf0:	000fffff 	.word	0x000fffff
10012bf4:	43400000 	.word	0x43400000
10012bf8:	fffffc01 	.word	0xfffffc01
10012bfc:	3ff00000 	.word	0x3ff00000
10012c00:	0003988e 	.word	0x0003988e
10012c04:	000bb679 	.word	0x000bb679
10012c08:	fff00000 	.word	0xfff00000
10012c0c:	4a454eef 	.word	0x4a454eef
10012c10:	3fca7e28 	.word	0x3fca7e28
10012c14:	93c9db65 	.word	0x93c9db65
10012c18:	3fcd864a 	.word	0x3fcd864a
10012c1c:	a91d4101 	.word	0xa91d4101
10012c20:	3fd17460 	.word	0x3fd17460
10012c24:	518f264d 	.word	0x518f264d
10012c28:	3fd55555 	.word	0x3fd55555
10012c2c:	db6fabff 	.word	0xdb6fabff
10012c30:	3fdb6db6 	.word	0x3fdb6db6
10012c34:	33333303 	.word	0x33333303
10012c38:	3fe33333 	.word	0x3fe33333
10012c3c:	40080000 	.word	0x40080000
10012c40:	3feec709 	.word	0x3feec709
10012c44:	dc3a03fd 	.word	0xdc3a03fd
10012c48:	145b01f5 	.word	0x145b01f5
10012c4c:	be3e2fe0 	.word	0xbe3e2fe0
10012c50:	408fffff 	.word	0x408fffff
10012c54:	bf700000 	.word	0xbf700000
10012c58:	652b82fe 	.word	0x652b82fe
10012c5c:	3c971547 	.word	0x3c971547
10012c60:	2800      	cmp	r0, #0
10012c62:	d000      	beq.n	10012c66 <__ieee754_pow+0x62e>
10012c64:	e18a      	b.n	10012f7c <__ieee754_pow+0x944>
10012c66:	2280      	movs	r2, #128	; 0x80
10012c68:	4be7      	ldr	r3, [pc, #924]	; (10013008 <__ieee754_pow+0x9d0>)
10012c6a:	0352      	lsls	r2, r2, #13
10012c6c:	469c      	mov	ip, r3
10012c6e:	0013      	movs	r3, r2
10012c70:	1536      	asrs	r6, r6, #20
10012c72:	4466      	add	r6, ip
10012c74:	4133      	asrs	r3, r6
10012c76:	49e5      	ldr	r1, [pc, #916]	; (1001300c <__ieee754_pow+0x9d4>)
10012c78:	19db      	adds	r3, r3, r7
10012c7a:	005e      	lsls	r6, r3, #1
10012c7c:	001c      	movs	r4, r3
10012c7e:	031b      	lsls	r3, r3, #12
10012c80:	468c      	mov	ip, r1
10012c82:	0b1b      	lsrs	r3, r3, #12
10012c84:	4313      	orrs	r3, r2
10012c86:	2214      	movs	r2, #20
10012c88:	0d76      	lsrs	r6, r6, #21
10012c8a:	4fe1      	ldr	r7, [pc, #900]	; (10013010 <__ieee754_pow+0x9d8>)
10012c8c:	4466      	add	r6, ip
10012c8e:	4137      	asrs	r7, r6
10012c90:	1b96      	subs	r6, r2, r6
10012c92:	4133      	asrs	r3, r6
10012c94:	4698      	mov	r8, r3
10012c96:	4653      	mov	r3, sl
10012c98:	43bc      	bics	r4, r7
10012c9a:	2000      	movs	r0, #0
10012c9c:	0021      	movs	r1, r4
10012c9e:	2b00      	cmp	r3, #0
10012ca0:	da00      	bge.n	10012ca4 <__ieee754_pow+0x66c>
10012ca2:	e1a9      	b.n	10012ff8 <__ieee754_pow+0x9c0>
10012ca4:	0002      	movs	r2, r0
10012ca6:	000b      	movs	r3, r1
10012ca8:	9800      	ldr	r0, [sp, #0]
10012caa:	9901      	ldr	r1, [sp, #4]
10012cac:	f002 ff3c 	bl	10015b28 <__aeabi_dsub>
10012cb0:	000b      	movs	r3, r1
10012cb2:	9000      	str	r0, [sp, #0]
10012cb4:	9101      	str	r1, [sp, #4]
10012cb6:	0002      	movs	r2, r0
10012cb8:	9804      	ldr	r0, [sp, #16]
10012cba:	9905      	ldr	r1, [sp, #20]
10012cbc:	f001 fd6a 	bl	10014794 <__aeabi_dadd>
10012cc0:	4643      	mov	r3, r8
10012cc2:	051b      	lsls	r3, r3, #20
10012cc4:	4699      	mov	r9, r3
10012cc6:	2000      	movs	r0, #0
10012cc8:	2200      	movs	r2, #0
10012cca:	4bd2      	ldr	r3, [pc, #840]	; (10013014 <__ieee754_pow+0x9dc>)
10012ccc:	0006      	movs	r6, r0
10012cce:	000f      	movs	r7, r1
10012cd0:	f002 fcb0 	bl	10015634 <__aeabi_dmul>
10012cd4:	9a00      	ldr	r2, [sp, #0]
10012cd6:	9b01      	ldr	r3, [sp, #4]
10012cd8:	9002      	str	r0, [sp, #8]
10012cda:	9103      	str	r1, [sp, #12]
10012cdc:	0030      	movs	r0, r6
10012cde:	0039      	movs	r1, r7
10012ce0:	f002 ff22 	bl	10015b28 <__aeabi_dsub>
10012ce4:	0002      	movs	r2, r0
10012ce6:	000b      	movs	r3, r1
10012ce8:	9804      	ldr	r0, [sp, #16]
10012cea:	9905      	ldr	r1, [sp, #20]
10012cec:	f002 ff1c 	bl	10015b28 <__aeabi_dsub>
10012cf0:	4ac9      	ldr	r2, [pc, #804]	; (10013018 <__ieee754_pow+0x9e0>)
10012cf2:	4bca      	ldr	r3, [pc, #808]	; (1001301c <__ieee754_pow+0x9e4>)
10012cf4:	f002 fc9e 	bl	10015634 <__aeabi_dmul>
10012cf8:	4ac9      	ldr	r2, [pc, #804]	; (10013020 <__ieee754_pow+0x9e8>)
10012cfa:	0004      	movs	r4, r0
10012cfc:	000d      	movs	r5, r1
10012cfe:	4bc9      	ldr	r3, [pc, #804]	; (10013024 <__ieee754_pow+0x9ec>)
10012d00:	0030      	movs	r0, r6
10012d02:	0039      	movs	r1, r7
10012d04:	f002 fc96 	bl	10015634 <__aeabi_dmul>
10012d08:	0002      	movs	r2, r0
10012d0a:	000b      	movs	r3, r1
10012d0c:	0020      	movs	r0, r4
10012d0e:	0029      	movs	r1, r5
10012d10:	f001 fd40 	bl	10014794 <__aeabi_dadd>
10012d14:	0004      	movs	r4, r0
10012d16:	000d      	movs	r5, r1
10012d18:	0002      	movs	r2, r0
10012d1a:	000b      	movs	r3, r1
10012d1c:	9802      	ldr	r0, [sp, #8]
10012d1e:	9903      	ldr	r1, [sp, #12]
10012d20:	f001 fd38 	bl	10014794 <__aeabi_dadd>
10012d24:	9a02      	ldr	r2, [sp, #8]
10012d26:	9b03      	ldr	r3, [sp, #12]
10012d28:	0006      	movs	r6, r0
10012d2a:	000f      	movs	r7, r1
10012d2c:	f002 fefc 	bl	10015b28 <__aeabi_dsub>
10012d30:	0002      	movs	r2, r0
10012d32:	000b      	movs	r3, r1
10012d34:	0020      	movs	r0, r4
10012d36:	0029      	movs	r1, r5
10012d38:	f002 fef6 	bl	10015b28 <__aeabi_dsub>
10012d3c:	0032      	movs	r2, r6
10012d3e:	9000      	str	r0, [sp, #0]
10012d40:	9101      	str	r1, [sp, #4]
10012d42:	003b      	movs	r3, r7
10012d44:	0030      	movs	r0, r6
10012d46:	0039      	movs	r1, r7
10012d48:	f002 fc74 	bl	10015634 <__aeabi_dmul>
10012d4c:	0004      	movs	r4, r0
10012d4e:	000d      	movs	r5, r1
10012d50:	4ab5      	ldr	r2, [pc, #724]	; (10013028 <__ieee754_pow+0x9f0>)
10012d52:	4bb6      	ldr	r3, [pc, #728]	; (1001302c <__ieee754_pow+0x9f4>)
10012d54:	f002 fc6e 	bl	10015634 <__aeabi_dmul>
10012d58:	4ab5      	ldr	r2, [pc, #724]	; (10013030 <__ieee754_pow+0x9f8>)
10012d5a:	4bb6      	ldr	r3, [pc, #728]	; (10013034 <__ieee754_pow+0x9fc>)
10012d5c:	f002 fee4 	bl	10015b28 <__aeabi_dsub>
10012d60:	0022      	movs	r2, r4
10012d62:	002b      	movs	r3, r5
10012d64:	f002 fc66 	bl	10015634 <__aeabi_dmul>
10012d68:	4ab3      	ldr	r2, [pc, #716]	; (10013038 <__ieee754_pow+0xa00>)
10012d6a:	4bb4      	ldr	r3, [pc, #720]	; (1001303c <__ieee754_pow+0xa04>)
10012d6c:	f001 fd12 	bl	10014794 <__aeabi_dadd>
10012d70:	0022      	movs	r2, r4
10012d72:	002b      	movs	r3, r5
10012d74:	f002 fc5e 	bl	10015634 <__aeabi_dmul>
10012d78:	4ab1      	ldr	r2, [pc, #708]	; (10013040 <__ieee754_pow+0xa08>)
10012d7a:	4bb2      	ldr	r3, [pc, #712]	; (10013044 <__ieee754_pow+0xa0c>)
10012d7c:	f002 fed4 	bl	10015b28 <__aeabi_dsub>
10012d80:	0022      	movs	r2, r4
10012d82:	002b      	movs	r3, r5
10012d84:	f002 fc56 	bl	10015634 <__aeabi_dmul>
10012d88:	4aaf      	ldr	r2, [pc, #700]	; (10013048 <__ieee754_pow+0xa10>)
10012d8a:	4bb0      	ldr	r3, [pc, #704]	; (1001304c <__ieee754_pow+0xa14>)
10012d8c:	f001 fd02 	bl	10014794 <__aeabi_dadd>
10012d90:	0022      	movs	r2, r4
10012d92:	002b      	movs	r3, r5
10012d94:	f002 fc4e 	bl	10015634 <__aeabi_dmul>
10012d98:	0002      	movs	r2, r0
10012d9a:	000b      	movs	r3, r1
10012d9c:	0030      	movs	r0, r6
10012d9e:	0039      	movs	r1, r7
10012da0:	f002 fec2 	bl	10015b28 <__aeabi_dsub>
10012da4:	0004      	movs	r4, r0
10012da6:	000d      	movs	r5, r1
10012da8:	0002      	movs	r2, r0
10012daa:	000b      	movs	r3, r1
10012dac:	0030      	movs	r0, r6
10012dae:	0039      	movs	r1, r7
10012db0:	f002 fc40 	bl	10015634 <__aeabi_dmul>
10012db4:	2380      	movs	r3, #128	; 0x80
10012db6:	9002      	str	r0, [sp, #8]
10012db8:	9103      	str	r1, [sp, #12]
10012dba:	2200      	movs	r2, #0
10012dbc:	05db      	lsls	r3, r3, #23
10012dbe:	0020      	movs	r0, r4
10012dc0:	0029      	movs	r1, r5
10012dc2:	f002 feb1 	bl	10015b28 <__aeabi_dsub>
10012dc6:	0002      	movs	r2, r0
10012dc8:	000b      	movs	r3, r1
10012dca:	9802      	ldr	r0, [sp, #8]
10012dcc:	9903      	ldr	r1, [sp, #12]
10012dce:	f002 f80d 	bl	10014dec <__aeabi_ddiv>
10012dd2:	9a00      	ldr	r2, [sp, #0]
10012dd4:	9b01      	ldr	r3, [sp, #4]
10012dd6:	0004      	movs	r4, r0
10012dd8:	000d      	movs	r5, r1
10012dda:	0030      	movs	r0, r6
10012ddc:	0039      	movs	r1, r7
10012dde:	f002 fc29 	bl	10015634 <__aeabi_dmul>
10012de2:	9a00      	ldr	r2, [sp, #0]
10012de4:	9b01      	ldr	r3, [sp, #4]
10012de6:	f001 fcd5 	bl	10014794 <__aeabi_dadd>
10012dea:	0002      	movs	r2, r0
10012dec:	000b      	movs	r3, r1
10012dee:	0020      	movs	r0, r4
10012df0:	0029      	movs	r1, r5
10012df2:	f002 fe99 	bl	10015b28 <__aeabi_dsub>
10012df6:	0032      	movs	r2, r6
10012df8:	003b      	movs	r3, r7
10012dfa:	f002 fe95 	bl	10015b28 <__aeabi_dsub>
10012dfe:	0002      	movs	r2, r0
10012e00:	000b      	movs	r3, r1
10012e02:	2000      	movs	r0, #0
10012e04:	4992      	ldr	r1, [pc, #584]	; (10013050 <__ieee754_pow+0xa18>)
10012e06:	f002 fe8f 	bl	10015b28 <__aeabi_dsub>
10012e0a:	464b      	mov	r3, r9
10012e0c:	185b      	adds	r3, r3, r1
10012e0e:	151a      	asrs	r2, r3, #20
10012e10:	2a00      	cmp	r2, #0
10012e12:	dc00      	bgt.n	10012e16 <__ieee754_pow+0x7de>
10012e14:	e0f4      	b.n	10013000 <__ieee754_pow+0x9c8>
10012e16:	0019      	movs	r1, r3
10012e18:	9a06      	ldr	r2, [sp, #24]
10012e1a:	9b07      	ldr	r3, [sp, #28]
10012e1c:	f002 fc0a 	bl	10015634 <__aeabi_dmul>
10012e20:	0006      	movs	r6, r0
10012e22:	e452      	b.n	100126ca <__ieee754_pow+0x92>
10012e24:	0032      	movs	r2, r6
10012e26:	0030      	movs	r0, r6
10012e28:	002b      	movs	r3, r5
10012e2a:	0029      	movs	r1, r5
10012e2c:	f002 fc02 	bl	10015634 <__aeabi_dmul>
10012e30:	0006      	movs	r6, r0
10012e32:	e44a      	b.n	100126ca <__ieee754_pow+0x92>
10012e34:	4b87      	ldr	r3, [pc, #540]	; (10013054 <__ieee754_pow+0xa1c>)
10012e36:	004e      	lsls	r6, r1, #1
10012e38:	0876      	lsrs	r6, r6, #1
10012e3a:	429e      	cmp	r6, r3
10012e3c:	dc00      	bgt.n	10012e40 <__ieee754_pow+0x808>
10012e3e:	e0bf      	b.n	10012fc0 <__ieee754_pow+0x988>
10012e40:	4b85      	ldr	r3, [pc, #532]	; (10013058 <__ieee754_pow+0xa20>)
10012e42:	18cb      	adds	r3, r1, r3
10012e44:	4303      	orrs	r3, r0
10012e46:	d10c      	bne.n	10012e62 <__ieee754_pow+0x82a>
10012e48:	9a00      	ldr	r2, [sp, #0]
10012e4a:	9b01      	ldr	r3, [sp, #4]
10012e4c:	f002 fe6c 	bl	10015b28 <__aeabi_dsub>
10012e50:	0002      	movs	r2, r0
10012e52:	000b      	movs	r3, r1
10012e54:	9804      	ldr	r0, [sp, #16]
10012e56:	9905      	ldr	r1, [sp, #20]
10012e58:	f000 fd48 	bl	100138ec <__aeabi_dcmple>
10012e5c:	2800      	cmp	r0, #0
10012e5e:	d100      	bne.n	10012e62 <__ieee754_pow+0x82a>
10012e60:	e701      	b.n	10012c66 <__ieee754_pow+0x62e>
10012e62:	9806      	ldr	r0, [sp, #24]
10012e64:	9907      	ldr	r1, [sp, #28]
10012e66:	4a7d      	ldr	r2, [pc, #500]	; (1001305c <__ieee754_pow+0xa24>)
10012e68:	4b7d      	ldr	r3, [pc, #500]	; (10013060 <__ieee754_pow+0xa28>)
10012e6a:	f002 fbe3 	bl	10015634 <__aeabi_dmul>
10012e6e:	4a7b      	ldr	r2, [pc, #492]	; (1001305c <__ieee754_pow+0xa24>)
10012e70:	4b7b      	ldr	r3, [pc, #492]	; (10013060 <__ieee754_pow+0xa28>)
10012e72:	f002 fbdf 	bl	10015634 <__aeabi_dmul>
10012e76:	0006      	movs	r6, r0
10012e78:	f7ff fc27 	bl	100126ca <__ieee754_pow+0x92>
10012e7c:	2300      	movs	r3, #0
10012e7e:	4c79      	ldr	r4, [pc, #484]	; (10013064 <__ieee754_pow+0xa2c>)
10012e80:	9306      	str	r3, [sp, #24]
10012e82:	9407      	str	r4, [sp, #28]
10012e84:	e666      	b.n	10012b54 <__ieee754_pow+0x51c>
10012e86:	4653      	mov	r3, sl
10012e88:	2b00      	cmp	r3, #0
10012e8a:	db00      	blt.n	10012e8e <__ieee754_pow+0x856>
10012e8c:	e4c3      	b.n	10012816 <__ieee754_pow+0x1de>
10012e8e:	9b00      	ldr	r3, [sp, #0]
10012e90:	9c01      	ldr	r4, [sp, #4]
10012e92:	2280      	movs	r2, #128	; 0x80
10012e94:	0612      	lsls	r2, r2, #24
10012e96:	001e      	movs	r6, r3
10012e98:	4694      	mov	ip, r2
10012e9a:	0023      	movs	r3, r4
10012e9c:	4463      	add	r3, ip
10012e9e:	0019      	movs	r1, r3
10012ea0:	f7ff fc13 	bl	100126ca <__ieee754_pow+0x92>
10012ea4:	0002      	movs	r2, r0
10012ea6:	000b      	movs	r3, r1
10012ea8:	2000      	movs	r0, #0
10012eaa:	4969      	ldr	r1, [pc, #420]	; (10013050 <__ieee754_pow+0xa18>)
10012eac:	f001 ff9e 	bl	10014dec <__aeabi_ddiv>
10012eb0:	e44a      	b.n	10012748 <__ieee754_pow+0x110>
10012eb2:	4b6d      	ldr	r3, [pc, #436]	; (10013068 <__ieee754_pow+0xa30>)
10012eb4:	429c      	cmp	r4, r3
10012eb6:	dc00      	bgt.n	10012eba <__ieee754_pow+0x882>
10012eb8:	e4aa      	b.n	10012810 <__ieee754_pow+0x1d8>
10012eba:	4b65      	ldr	r3, [pc, #404]	; (10013050 <__ieee754_pow+0xa18>)
10012ebc:	429c      	cmp	r4, r3
10012ebe:	dd01      	ble.n	10012ec4 <__ieee754_pow+0x88c>
10012ec0:	f7ff fc2c 	bl	1001271c <__ieee754_pow+0xe4>
10012ec4:	2200      	movs	r2, #0
10012ec6:	4b62      	ldr	r3, [pc, #392]	; (10013050 <__ieee754_pow+0xa18>)
10012ec8:	f002 fe2e 	bl	10015b28 <__aeabi_dsub>
10012ecc:	22c0      	movs	r2, #192	; 0xc0
10012ece:	4b67      	ldr	r3, [pc, #412]	; (1001306c <__ieee754_pow+0xa34>)
10012ed0:	05d2      	lsls	r2, r2, #23
10012ed2:	0004      	movs	r4, r0
10012ed4:	000d      	movs	r5, r1
10012ed6:	f002 fbad 	bl	10015634 <__aeabi_dmul>
10012eda:	4a65      	ldr	r2, [pc, #404]	; (10013070 <__ieee754_pow+0xa38>)
10012edc:	0006      	movs	r6, r0
10012ede:	000f      	movs	r7, r1
10012ee0:	4b64      	ldr	r3, [pc, #400]	; (10013074 <__ieee754_pow+0xa3c>)
10012ee2:	0020      	movs	r0, r4
10012ee4:	0029      	movs	r1, r5
10012ee6:	f002 fba5 	bl	10015634 <__aeabi_dmul>
10012eea:	2200      	movs	r2, #0
10012eec:	9002      	str	r0, [sp, #8]
10012eee:	9103      	str	r1, [sp, #12]
10012ef0:	4b61      	ldr	r3, [pc, #388]	; (10013078 <__ieee754_pow+0xa40>)
10012ef2:	0020      	movs	r0, r4
10012ef4:	0029      	movs	r1, r5
10012ef6:	f002 fb9d 	bl	10015634 <__aeabi_dmul>
10012efa:	0002      	movs	r2, r0
10012efc:	000b      	movs	r3, r1
10012efe:	485f      	ldr	r0, [pc, #380]	; (1001307c <__ieee754_pow+0xa44>)
10012f00:	495f      	ldr	r1, [pc, #380]	; (10013080 <__ieee754_pow+0xa48>)
10012f02:	f002 fe11 	bl	10015b28 <__aeabi_dsub>
10012f06:	0022      	movs	r2, r4
10012f08:	002b      	movs	r3, r5
10012f0a:	f002 fb93 	bl	10015634 <__aeabi_dmul>
10012f0e:	0002      	movs	r2, r0
10012f10:	000b      	movs	r3, r1
10012f12:	2000      	movs	r0, #0
10012f14:	495b      	ldr	r1, [pc, #364]	; (10013084 <__ieee754_pow+0xa4c>)
10012f16:	f002 fe07 	bl	10015b28 <__aeabi_dsub>
10012f1a:	0022      	movs	r2, r4
10012f1c:	9004      	str	r0, [sp, #16]
10012f1e:	9105      	str	r1, [sp, #20]
10012f20:	002b      	movs	r3, r5
10012f22:	0020      	movs	r0, r4
10012f24:	0029      	movs	r1, r5
10012f26:	f002 fb85 	bl	10015634 <__aeabi_dmul>
10012f2a:	0002      	movs	r2, r0
10012f2c:	000b      	movs	r3, r1
10012f2e:	9804      	ldr	r0, [sp, #16]
10012f30:	9905      	ldr	r1, [sp, #20]
10012f32:	f002 fb7f 	bl	10015634 <__aeabi_dmul>
10012f36:	4a54      	ldr	r2, [pc, #336]	; (10013088 <__ieee754_pow+0xa50>)
10012f38:	4b4c      	ldr	r3, [pc, #304]	; (1001306c <__ieee754_pow+0xa34>)
10012f3a:	f002 fb7b 	bl	10015634 <__aeabi_dmul>
10012f3e:	0002      	movs	r2, r0
10012f40:	000b      	movs	r3, r1
10012f42:	9802      	ldr	r0, [sp, #8]
10012f44:	9903      	ldr	r1, [sp, #12]
10012f46:	f002 fdef 	bl	10015b28 <__aeabi_dsub>
10012f4a:	0002      	movs	r2, r0
10012f4c:	000b      	movs	r3, r1
10012f4e:	0004      	movs	r4, r0
10012f50:	000d      	movs	r5, r1
10012f52:	0030      	movs	r0, r6
10012f54:	0039      	movs	r1, r7
10012f56:	f001 fc1d 	bl	10014794 <__aeabi_dadd>
10012f5a:	2200      	movs	r2, #0
10012f5c:	0010      	movs	r0, r2
10012f5e:	003b      	movs	r3, r7
10012f60:	0032      	movs	r2, r6
10012f62:	9002      	str	r0, [sp, #8]
10012f64:	9103      	str	r1, [sp, #12]
10012f66:	f002 fddf 	bl	10015b28 <__aeabi_dsub>
10012f6a:	0002      	movs	r2, r0
10012f6c:	000b      	movs	r3, r1
10012f6e:	0020      	movs	r0, r4
10012f70:	0029      	movs	r1, r5
10012f72:	f002 fdd9 	bl	10015b28 <__aeabi_dsub>
10012f76:	9004      	str	r0, [sp, #16]
10012f78:	9105      	str	r1, [sp, #20]
10012f7a:	e5e1      	b.n	10012b40 <__ieee754_pow+0x508>
10012f7c:	4a43      	ldr	r2, [pc, #268]	; (1001308c <__ieee754_pow+0xa54>)
10012f7e:	4b44      	ldr	r3, [pc, #272]	; (10013090 <__ieee754_pow+0xa58>)
10012f80:	9806      	ldr	r0, [sp, #24]
10012f82:	9907      	ldr	r1, [sp, #28]
10012f84:	f002 fb56 	bl	10015634 <__aeabi_dmul>
10012f88:	4a40      	ldr	r2, [pc, #256]	; (1001308c <__ieee754_pow+0xa54>)
10012f8a:	4b41      	ldr	r3, [pc, #260]	; (10013090 <__ieee754_pow+0xa58>)
10012f8c:	f002 fb52 	bl	10015634 <__aeabi_dmul>
10012f90:	0006      	movs	r6, r0
10012f92:	f7ff fb9a 	bl	100126ca <__ieee754_pow+0x92>
10012f96:	2a00      	cmp	r2, #0
10012f98:	d001      	beq.n	10012f9e <__ieee754_pow+0x966>
10012f9a:	f7ff fba5 	bl	100126e8 <__ieee754_pow+0xb0>
10012f9e:	3214      	adds	r2, #20
10012fa0:	1ad3      	subs	r3, r2, r3
10012fa2:	003a      	movs	r2, r7
10012fa4:	411a      	asrs	r2, r3
10012fa6:	0011      	movs	r1, r2
10012fa8:	4099      	lsls	r1, r3
10012faa:	428f      	cmp	r7, r1
10012fac:	d001      	beq.n	10012fb2 <__ieee754_pow+0x97a>
10012fae:	f7ff fb6f 	bl	10012690 <__ieee754_pow+0x58>
10012fb2:	2301      	movs	r3, #1
10012fb4:	4013      	ands	r3, r2
10012fb6:	2202      	movs	r2, #2
10012fb8:	1ad3      	subs	r3, r2, r3
10012fba:	469b      	mov	fp, r3
10012fbc:	f7ff fb68 	bl	10012690 <__ieee754_pow+0x58>
10012fc0:	4b30      	ldr	r3, [pc, #192]	; (10013084 <__ieee754_pow+0xa4c>)
10012fc2:	429e      	cmp	r6, r3
10012fc4:	dd00      	ble.n	10012fc8 <__ieee754_pow+0x990>
10012fc6:	e64e      	b.n	10012c66 <__ieee754_pow+0x62e>
10012fc8:	2300      	movs	r3, #0
10012fca:	4699      	mov	r9, r3
10012fcc:	4698      	mov	r8, r3
10012fce:	e67a      	b.n	10012cc6 <__ieee754_pow+0x68e>
10012fd0:	0002      	movs	r2, r0
10012fd2:	000b      	movs	r3, r1
10012fd4:	f7ff fc14 	bl	10012800 <__ieee754_pow+0x1c8>
10012fd8:	2380      	movs	r3, #128	; 0x80
10012fda:	4c2e      	ldr	r4, [pc, #184]	; (10013094 <__ieee754_pow+0xa5c>)
10012fdc:	05db      	lsls	r3, r3, #23
10012fde:	9308      	str	r3, [sp, #32]
10012fe0:	9409      	str	r4, [sp, #36]	; 0x24
10012fe2:	4b2d      	ldr	r3, [pc, #180]	; (10013098 <__ieee754_pow+0xa60>)
10012fe4:	4c2d      	ldr	r4, [pc, #180]	; (1001309c <__ieee754_pow+0xa64>)
10012fe6:	2200      	movs	r2, #0
10012fe8:	930c      	str	r3, [sp, #48]	; 0x30
10012fea:	940d      	str	r4, [sp, #52]	; 0x34
10012fec:	2480      	movs	r4, #128	; 0x80
10012fee:	4b2c      	ldr	r3, [pc, #176]	; (100130a0 <__ieee754_pow+0xa68>)
10012ff0:	02e4      	lsls	r4, r4, #11
10012ff2:	9206      	str	r2, [sp, #24]
10012ff4:	9307      	str	r3, [sp, #28]
10012ff6:	e456      	b.n	100128a6 <__ieee754_pow+0x26e>
10012ff8:	4643      	mov	r3, r8
10012ffa:	425b      	negs	r3, r3
10012ffc:	4698      	mov	r8, r3
10012ffe:	e651      	b.n	10012ca4 <__ieee754_pow+0x66c>
10013000:	4642      	mov	r2, r8
10013002:	f000 fa59 	bl	100134b8 <scalbn>
10013006:	e707      	b.n	10012e18 <__ieee754_pow+0x7e0>
10013008:	fffffc02 	.word	0xfffffc02
1001300c:	fffffc01 	.word	0xfffffc01
10013010:	000fffff 	.word	0x000fffff
10013014:	3fe62e43 	.word	0x3fe62e43
10013018:	fefa39ef 	.word	0xfefa39ef
1001301c:	3fe62e42 	.word	0x3fe62e42
10013020:	0ca86c39 	.word	0x0ca86c39
10013024:	be205c61 	.word	0xbe205c61
10013028:	72bea4d0 	.word	0x72bea4d0
1001302c:	3e663769 	.word	0x3e663769
10013030:	c5d26bf1 	.word	0xc5d26bf1
10013034:	3ebbbd41 	.word	0x3ebbbd41
10013038:	af25de2c 	.word	0xaf25de2c
1001303c:	3f11566a 	.word	0x3f11566a
10013040:	16bebd93 	.word	0x16bebd93
10013044:	3f66c16c 	.word	0x3f66c16c
10013048:	5555553e 	.word	0x5555553e
1001304c:	3fc55555 	.word	0x3fc55555
10013050:	3ff00000 	.word	0x3ff00000
10013054:	4090cbff 	.word	0x4090cbff
10013058:	3f6f3400 	.word	0x3f6f3400
1001305c:	c2f8f359 	.word	0xc2f8f359
10013060:	01a56e1f 	.word	0x01a56e1f
10013064:	bff00000 	.word	0xbff00000
10013068:	3feffffe 	.word	0x3feffffe
1001306c:	3ff71547 	.word	0x3ff71547
10013070:	f85ddf44 	.word	0xf85ddf44
10013074:	3e54ae0b 	.word	0x3e54ae0b
10013078:	3fd00000 	.word	0x3fd00000
1001307c:	55555555 	.word	0x55555555
10013080:	3fd55555 	.word	0x3fd55555
10013084:	3fe00000 	.word	0x3fe00000
10013088:	652b82fe 	.word	0x652b82fe
1001308c:	8800759c 	.word	0x8800759c
10013090:	7e37e43c 	.word	0x7e37e43c
10013094:	3fe2b803 	.word	0x3fe2b803
10013098:	43cfd006 	.word	0x43cfd006
1001309c:	3e4cfdeb 	.word	0x3e4cfdeb
100130a0:	3ff80000 	.word	0x3ff80000

100130a4 <__ieee754_sqrt>:
100130a4:	b5f0      	push	{r4, r5, r6, r7, lr}
100130a6:	4656      	mov	r6, sl
100130a8:	464d      	mov	r5, r9
100130aa:	4644      	mov	r4, r8
100130ac:	465f      	mov	r7, fp
100130ae:	4b75      	ldr	r3, [pc, #468]	; (10013284 <__ieee754_sqrt+0x1e0>)
100130b0:	b4f0      	push	{r4, r5, r6, r7}
100130b2:	000a      	movs	r2, r1
100130b4:	000d      	movs	r5, r1
100130b6:	0019      	movs	r1, r3
100130b8:	b083      	sub	sp, #12
100130ba:	0006      	movs	r6, r0
100130bc:	0004      	movs	r4, r0
100130be:	4029      	ands	r1, r5
100130c0:	4299      	cmp	r1, r3
100130c2:	d100      	bne.n	100130c6 <__ieee754_sqrt+0x22>
100130c4:	e0ba      	b.n	1001323c <__ieee754_sqrt+0x198>
100130c6:	2d00      	cmp	r5, #0
100130c8:	dc00      	bgt.n	100130cc <__ieee754_sqrt+0x28>
100130ca:	e094      	b.n	100131f6 <__ieee754_sqrt+0x152>
100130cc:	152d      	asrs	r5, r5, #20
100130ce:	d100      	bne.n	100130d2 <__ieee754_sqrt+0x2e>
100130d0:	e0a3      	b.n	1001321a <__ieee754_sqrt+0x176>
100130d2:	4b6d      	ldr	r3, [pc, #436]	; (10013288 <__ieee754_sqrt+0x1e4>)
100130d4:	0312      	lsls	r2, r2, #12
100130d6:	469c      	mov	ip, r3
100130d8:	2380      	movs	r3, #128	; 0x80
100130da:	0b12      	lsrs	r2, r2, #12
100130dc:	035b      	lsls	r3, r3, #13
100130de:	4465      	add	r5, ip
100130e0:	431a      	orrs	r2, r3
100130e2:	07eb      	lsls	r3, r5, #31
100130e4:	d500      	bpl.n	100130e8 <__ieee754_sqrt+0x44>
100130e6:	e081      	b.n	100131ec <__ieee754_sqrt+0x148>
100130e8:	106b      	asrs	r3, r5, #1
100130ea:	4698      	mov	r8, r3
100130ec:	0fe3      	lsrs	r3, r4, #31
100130ee:	189b      	adds	r3, r3, r2
100130f0:	189b      	adds	r3, r3, r2
100130f2:	2280      	movs	r2, #128	; 0x80
100130f4:	2116      	movs	r1, #22
100130f6:	2600      	movs	r6, #0
100130f8:	2700      	movs	r7, #0
100130fa:	0064      	lsls	r4, r4, #1
100130fc:	0392      	lsls	r2, r2, #14
100130fe:	18b8      	adds	r0, r7, r2
10013100:	4298      	cmp	r0, r3
10013102:	dc02      	bgt.n	1001310a <__ieee754_sqrt+0x66>
10013104:	1887      	adds	r7, r0, r2
10013106:	1a1b      	subs	r3, r3, r0
10013108:	18b6      	adds	r6, r6, r2
1001310a:	0fe0      	lsrs	r0, r4, #31
1001310c:	005b      	lsls	r3, r3, #1
1001310e:	3901      	subs	r1, #1
10013110:	181b      	adds	r3, r3, r0
10013112:	0064      	lsls	r4, r4, #1
10013114:	0852      	lsrs	r2, r2, #1
10013116:	2900      	cmp	r1, #0
10013118:	d1f1      	bne.n	100130fe <__ieee754_sqrt+0x5a>
1001311a:	2200      	movs	r2, #0
1001311c:	9201      	str	r2, [sp, #4]
1001311e:	4694      	mov	ip, r2
10013120:	2280      	movs	r2, #128	; 0x80
10013122:	0612      	lsls	r2, r2, #24
10013124:	2020      	movs	r0, #32
10013126:	4691      	mov	r9, r2
10013128:	e009      	b.n	1001313e <__ieee754_sqrt+0x9a>
1001312a:	429f      	cmp	r7, r3
1001312c:	d041      	beq.n	100131b2 <__ieee754_sqrt+0x10e>
1001312e:	0fe1      	lsrs	r1, r4, #31
10013130:	18c9      	adds	r1, r1, r3
10013132:	3801      	subs	r0, #1
10013134:	18cb      	adds	r3, r1, r3
10013136:	0064      	lsls	r4, r4, #1
10013138:	0852      	lsrs	r2, r2, #1
1001313a:	2800      	cmp	r0, #0
1001313c:	d01e      	beq.n	1001317c <__ieee754_sqrt+0xd8>
1001313e:	4661      	mov	r1, ip
10013140:	1851      	adds	r1, r2, r1
10013142:	429f      	cmp	r7, r3
10013144:	daf1      	bge.n	1001312a <__ieee754_sqrt+0x86>
10013146:	188d      	adds	r5, r1, r2
10013148:	46ac      	mov	ip, r5
1001314a:	0fcd      	lsrs	r5, r1, #31
1001314c:	07ed      	lsls	r5, r5, #31
1001314e:	46ba      	mov	sl, r7
10013150:	454d      	cmp	r5, r9
10013152:	d039      	beq.n	100131c8 <__ieee754_sqrt+0x124>
10013154:	1bdb      	subs	r3, r3, r7
10013156:	428c      	cmp	r4, r1
10013158:	41bf      	sbcs	r7, r7
1001315a:	427f      	negs	r7, r7
1001315c:	1bdb      	subs	r3, r3, r7
1001315e:	1a64      	subs	r4, r4, r1
10013160:	9901      	ldr	r1, [sp, #4]
10013162:	3801      	subs	r0, #1
10013164:	468b      	mov	fp, r1
10013166:	4493      	add	fp, r2
10013168:	4659      	mov	r1, fp
1001316a:	9101      	str	r1, [sp, #4]
1001316c:	0fe1      	lsrs	r1, r4, #31
1001316e:	18c9      	adds	r1, r1, r3
10013170:	4657      	mov	r7, sl
10013172:	18cb      	adds	r3, r1, r3
10013174:	0064      	lsls	r4, r4, #1
10013176:	0852      	lsrs	r2, r2, #1
10013178:	2800      	cmp	r0, #0
1001317a:	d1e0      	bne.n	1001313e <__ieee754_sqrt+0x9a>
1001317c:	4323      	orrs	r3, r4
1001317e:	d12b      	bne.n	100131d8 <__ieee754_sqrt+0x134>
10013180:	9b01      	ldr	r3, [sp, #4]
10013182:	085b      	lsrs	r3, r3, #1
10013184:	4941      	ldr	r1, [pc, #260]	; (1001328c <__ieee754_sqrt+0x1e8>)
10013186:	1072      	asrs	r2, r6, #1
10013188:	468c      	mov	ip, r1
1001318a:	4462      	add	r2, ip
1001318c:	07f1      	lsls	r1, r6, #31
1001318e:	d502      	bpl.n	10013196 <__ieee754_sqrt+0xf2>
10013190:	2180      	movs	r1, #128	; 0x80
10013192:	0609      	lsls	r1, r1, #24
10013194:	430b      	orrs	r3, r1
10013196:	4641      	mov	r1, r8
10013198:	0509      	lsls	r1, r1, #20
1001319a:	188d      	adds	r5, r1, r2
1001319c:	001e      	movs	r6, r3
1001319e:	002f      	movs	r7, r5
100131a0:	0030      	movs	r0, r6
100131a2:	0039      	movs	r1, r7
100131a4:	b003      	add	sp, #12
100131a6:	bc3c      	pop	{r2, r3, r4, r5}
100131a8:	4690      	mov	r8, r2
100131aa:	4699      	mov	r9, r3
100131ac:	46a2      	mov	sl, r4
100131ae:	46ab      	mov	fp, r5
100131b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100131b2:	42a1      	cmp	r1, r4
100131b4:	d80e      	bhi.n	100131d4 <__ieee754_sqrt+0x130>
100131b6:	188d      	adds	r5, r1, r2
100131b8:	46ac      	mov	ip, r5
100131ba:	0fcd      	lsrs	r5, r1, #31
100131bc:	07ed      	lsls	r5, r5, #31
100131be:	454d      	cmp	r5, r9
100131c0:	d048      	beq.n	10013254 <__ieee754_sqrt+0x1b0>
100131c2:	469a      	mov	sl, r3
100131c4:	2300      	movs	r3, #0
100131c6:	e7ca      	b.n	1001315e <__ieee754_sqrt+0xba>
100131c8:	4665      	mov	r5, ip
100131ca:	2d00      	cmp	r5, #0
100131cc:	dbc2      	blt.n	10013154 <__ieee754_sqrt+0xb0>
100131ce:	1c7d      	adds	r5, r7, #1
100131d0:	46aa      	mov	sl, r5
100131d2:	e7bf      	b.n	10013154 <__ieee754_sqrt+0xb0>
100131d4:	003b      	movs	r3, r7
100131d6:	e7aa      	b.n	1001312e <__ieee754_sqrt+0x8a>
100131d8:	9b01      	ldr	r3, [sp, #4]
100131da:	3301      	adds	r3, #1
100131dc:	d03e      	beq.n	1001325c <__ieee754_sqrt+0x1b8>
100131de:	9a01      	ldr	r2, [sp, #4]
100131e0:	2301      	movs	r3, #1
100131e2:	4694      	mov	ip, r2
100131e4:	4013      	ands	r3, r2
100131e6:	4463      	add	r3, ip
100131e8:	085b      	lsrs	r3, r3, #1
100131ea:	e7cb      	b.n	10013184 <__ieee754_sqrt+0xe0>
100131ec:	0fe3      	lsrs	r3, r4, #31
100131ee:	0052      	lsls	r2, r2, #1
100131f0:	189a      	adds	r2, r3, r2
100131f2:	0064      	lsls	r4, r4, #1
100131f4:	e778      	b.n	100130e8 <__ieee754_sqrt+0x44>
100131f6:	006b      	lsls	r3, r5, #1
100131f8:	085b      	lsrs	r3, r3, #1
100131fa:	4303      	orrs	r3, r0
100131fc:	002f      	movs	r7, r5
100131fe:	2b00      	cmp	r3, #0
10013200:	d0ce      	beq.n	100131a0 <__ieee754_sqrt+0xfc>
10013202:	2500      	movs	r5, #0
10013204:	2a00      	cmp	r2, #0
10013206:	d131      	bne.n	1001326c <__ieee754_sqrt+0x1c8>
10013208:	0ae2      	lsrs	r2, r4, #11
1001320a:	3d15      	subs	r5, #21
1001320c:	0564      	lsls	r4, r4, #21
1001320e:	2a00      	cmp	r2, #0
10013210:	d0fa      	beq.n	10013208 <__ieee754_sqrt+0x164>
10013212:	2380      	movs	r3, #128	; 0x80
10013214:	035b      	lsls	r3, r3, #13
10013216:	421a      	tst	r2, r3
10013218:	d123      	bne.n	10013262 <__ieee754_sqrt+0x1be>
1001321a:	2080      	movs	r0, #128	; 0x80
1001321c:	2300      	movs	r3, #0
1001321e:	0340      	lsls	r0, r0, #13
10013220:	e000      	b.n	10013224 <__ieee754_sqrt+0x180>
10013222:	000b      	movs	r3, r1
10013224:	0052      	lsls	r2, r2, #1
10013226:	1c59      	adds	r1, r3, #1
10013228:	4202      	tst	r2, r0
1001322a:	d0fa      	beq.n	10013222 <__ieee754_sqrt+0x17e>
1001322c:	2020      	movs	r0, #32
1001322e:	1a40      	subs	r0, r0, r1
10013230:	1aed      	subs	r5, r5, r3
10013232:	0023      	movs	r3, r4
10013234:	40c3      	lsrs	r3, r0
10013236:	408c      	lsls	r4, r1
10013238:	431a      	orrs	r2, r3
1001323a:	e74a      	b.n	100130d2 <__ieee754_sqrt+0x2e>
1001323c:	0002      	movs	r2, r0
1001323e:	002b      	movs	r3, r5
10013240:	0029      	movs	r1, r5
10013242:	f002 f9f7 	bl	10015634 <__aeabi_dmul>
10013246:	0032      	movs	r2, r6
10013248:	002b      	movs	r3, r5
1001324a:	f001 faa3 	bl	10014794 <__aeabi_dadd>
1001324e:	0006      	movs	r6, r0
10013250:	000f      	movs	r7, r1
10013252:	e7a5      	b.n	100131a0 <__ieee754_sqrt+0xfc>
10013254:	4665      	mov	r5, ip
10013256:	2d00      	cmp	r5, #0
10013258:	dab9      	bge.n	100131ce <__ieee754_sqrt+0x12a>
1001325a:	e7b2      	b.n	100131c2 <__ieee754_sqrt+0x11e>
1001325c:	3601      	adds	r6, #1
1001325e:	2300      	movs	r3, #0
10013260:	e790      	b.n	10013184 <__ieee754_sqrt+0xe0>
10013262:	2301      	movs	r3, #1
10013264:	2020      	movs	r0, #32
10013266:	425b      	negs	r3, r3
10013268:	2100      	movs	r1, #0
1001326a:	e7e1      	b.n	10013230 <__ieee754_sqrt+0x18c>
1001326c:	003b      	movs	r3, r7
1001326e:	0002      	movs	r2, r0
10013270:	0039      	movs	r1, r7
10013272:	f002 fc59 	bl	10015b28 <__aeabi_dsub>
10013276:	0002      	movs	r2, r0
10013278:	000b      	movs	r3, r1
1001327a:	f001 fdb7 	bl	10014dec <__aeabi_ddiv>
1001327e:	0006      	movs	r6, r0
10013280:	000f      	movs	r7, r1
10013282:	e78d      	b.n	100131a0 <__ieee754_sqrt+0xfc>
10013284:	7ff00000 	.word	0x7ff00000
10013288:	fffffc01 	.word	0xfffffc01
1001328c:	3fe00000 	.word	0x3fe00000

10013290 <__ieee754_sqrtf>:
10013290:	492b      	ldr	r1, [pc, #172]	; (10013340 <__ieee754_sqrtf+0xb0>)
10013292:	0042      	lsls	r2, r0, #1
10013294:	b570      	push	{r4, r5, r6, lr}
10013296:	0003      	movs	r3, r0
10013298:	1c04      	adds	r4, r0, #0
1001329a:	0852      	lsrs	r2, r2, #1
1001329c:	428a      	cmp	r2, r1
1001329e:	d83a      	bhi.n	10013316 <__ieee754_sqrtf+0x86>
100132a0:	2a00      	cmp	r2, #0
100132a2:	d037      	beq.n	10013314 <__ieee754_sqrtf+0x84>
100132a4:	2800      	cmp	r0, #0
100132a6:	db3f      	blt.n	10013328 <__ieee754_sqrtf+0x98>
100132a8:	4926      	ldr	r1, [pc, #152]	; (10013344 <__ieee754_sqrtf+0xb4>)
100132aa:	15c0      	asrs	r0, r0, #23
100132ac:	428a      	cmp	r2, r1
100132ae:	d80b      	bhi.n	100132c8 <__ieee754_sqrtf+0x38>
100132b0:	3101      	adds	r1, #1
100132b2:	4221      	tst	r1, r4
100132b4:	d13f      	bne.n	10013336 <__ieee754_sqrtf+0xa6>
100132b6:	2200      	movs	r2, #0
100132b8:	000c      	movs	r4, r1
100132ba:	e000      	b.n	100132be <__ieee754_sqrtf+0x2e>
100132bc:	000a      	movs	r2, r1
100132be:	005b      	lsls	r3, r3, #1
100132c0:	1c51      	adds	r1, r2, #1
100132c2:	4223      	tst	r3, r4
100132c4:	d0fa      	beq.n	100132bc <__ieee754_sqrtf+0x2c>
100132c6:	1a80      	subs	r0, r0, r2
100132c8:	2280      	movs	r2, #128	; 0x80
100132ca:	025b      	lsls	r3, r3, #9
100132cc:	0a5b      	lsrs	r3, r3, #9
100132ce:	0412      	lsls	r2, r2, #16
100132d0:	387f      	subs	r0, #127	; 0x7f
100132d2:	4313      	orrs	r3, r2
100132d4:	07c2      	lsls	r2, r0, #31
100132d6:	d425      	bmi.n	10013324 <__ieee754_sqrtf+0x94>
100132d8:	2280      	movs	r2, #128	; 0x80
100132da:	2119      	movs	r1, #25
100132dc:	2500      	movs	r5, #0
100132de:	2600      	movs	r6, #0
100132e0:	1040      	asrs	r0, r0, #1
100132e2:	005b      	lsls	r3, r3, #1
100132e4:	0452      	lsls	r2, r2, #17
100132e6:	18b4      	adds	r4, r6, r2
100132e8:	429c      	cmp	r4, r3
100132ea:	dc02      	bgt.n	100132f2 <__ieee754_sqrtf+0x62>
100132ec:	18a6      	adds	r6, r4, r2
100132ee:	1b1b      	subs	r3, r3, r4
100132f0:	18ad      	adds	r5, r5, r2
100132f2:	3901      	subs	r1, #1
100132f4:	005b      	lsls	r3, r3, #1
100132f6:	0852      	lsrs	r2, r2, #1
100132f8:	2900      	cmp	r1, #0
100132fa:	d1f4      	bne.n	100132e6 <__ieee754_sqrtf+0x56>
100132fc:	2b00      	cmp	r3, #0
100132fe:	d002      	beq.n	10013306 <__ieee754_sqrtf+0x76>
10013300:	2301      	movs	r3, #1
10013302:	402b      	ands	r3, r5
10013304:	18ed      	adds	r5, r5, r3
10013306:	23fc      	movs	r3, #252	; 0xfc
10013308:	059b      	lsls	r3, r3, #22
1001330a:	469c      	mov	ip, r3
1001330c:	106d      	asrs	r5, r5, #1
1001330e:	4465      	add	r5, ip
10013310:	05c0      	lsls	r0, r0, #23
10013312:	1940      	adds	r0, r0, r5
10013314:	bd70      	pop	{r4, r5, r6, pc}
10013316:	1c01      	adds	r1, r0, #0
10013318:	f000 fee2 	bl	100140e0 <__aeabi_fmul>
1001331c:	1c21      	adds	r1, r4, #0
1001331e:	f000 fb9f 	bl	10013a60 <__aeabi_fadd>
10013322:	e7f7      	b.n	10013314 <__ieee754_sqrtf+0x84>
10013324:	005b      	lsls	r3, r3, #1
10013326:	e7d7      	b.n	100132d8 <__ieee754_sqrtf+0x48>
10013328:	1c01      	adds	r1, r0, #0
1001332a:	f000 ffed 	bl	10014308 <__aeabi_fsub>
1001332e:	1c01      	adds	r1, r0, #0
10013330:	f000 fd0c 	bl	10013d4c <__aeabi_fdiv>
10013334:	e7ee      	b.n	10013314 <__ieee754_sqrtf+0x84>
10013336:	2201      	movs	r2, #1
10013338:	4252      	negs	r2, r2
1001333a:	1a80      	subs	r0, r0, r2
1001333c:	e7c4      	b.n	100132c8 <__ieee754_sqrtf+0x38>
1001333e:	46c0      	nop			; (mov r8, r8)
10013340:	7f7fffff 	.word	0x7f7fffff
10013344:	007fffff 	.word	0x007fffff

10013348 <fabs>:
10013348:	0049      	lsls	r1, r1, #1
1001334a:	084b      	lsrs	r3, r1, #1
1001334c:	0019      	movs	r1, r3
1001334e:	4770      	bx	lr

10013350 <finite>:
10013350:	4b03      	ldr	r3, [pc, #12]	; (10013360 <finite+0x10>)
10013352:	0048      	lsls	r0, r1, #1
10013354:	469c      	mov	ip, r3
10013356:	0840      	lsrs	r0, r0, #1
10013358:	4460      	add	r0, ip
1001335a:	0fc0      	lsrs	r0, r0, #31
1001335c:	4770      	bx	lr
1001335e:	46c0      	nop			; (mov r8, r8)
10013360:	80100000 	.word	0x80100000

10013364 <matherr>:
10013364:	2000      	movs	r0, #0
10013366:	4770      	bx	lr

10013368 <nan>:
10013368:	2000      	movs	r0, #0
1001336a:	4901      	ldr	r1, [pc, #4]	; (10013370 <nan+0x8>)
1001336c:	4770      	bx	lr
1001336e:	46c0      	nop			; (mov r8, r8)
10013370:	7ff80000 	.word	0x7ff80000

10013374 <rint>:
10013374:	b5f0      	push	{r4, r5, r6, r7, lr}
10013376:	4647      	mov	r7, r8
10013378:	b480      	push	{r7}
1001337a:	0fcb      	lsrs	r3, r1, #31
1001337c:	4698      	mov	r8, r3
1001337e:	4c4a      	ldr	r4, [pc, #296]	; (100134a8 <rint+0x134>)
10013380:	004b      	lsls	r3, r1, #1
10013382:	0d5b      	lsrs	r3, r3, #21
10013384:	191e      	adds	r6, r3, r4
10013386:	b082      	sub	sp, #8
10013388:	0007      	movs	r7, r0
1001338a:	000a      	movs	r2, r1
1001338c:	2e13      	cmp	r6, #19
1001338e:	dc35      	bgt.n	100133fc <rint+0x88>
10013390:	2e00      	cmp	r6, #0
10013392:	db57      	blt.n	10013444 <rint+0xd0>
10013394:	4b45      	ldr	r3, [pc, #276]	; (100134ac <rint+0x138>)
10013396:	0004      	movs	r4, r0
10013398:	4133      	asrs	r3, r6
1001339a:	001f      	movs	r7, r3
1001339c:	400f      	ands	r7, r1
1001339e:	4307      	orrs	r7, r0
100133a0:	000d      	movs	r5, r1
100133a2:	2f00      	cmp	r7, #0
100133a4:	d024      	beq.n	100133f0 <rint+0x7c>
100133a6:	085b      	lsrs	r3, r3, #1
100133a8:	001c      	movs	r4, r3
100133aa:	400c      	ands	r4, r1
100133ac:	4320      	orrs	r0, r4
100133ae:	2700      	movs	r7, #0
100133b0:	2800      	cmp	r0, #0
100133b2:	d007      	beq.n	100133c4 <rint+0x50>
100133b4:	2e13      	cmp	r6, #19
100133b6:	d100      	bne.n	100133ba <rint+0x46>
100133b8:	e072      	b.n	100134a0 <rint+0x12c>
100133ba:	2280      	movs	r2, #128	; 0x80
100133bc:	02d2      	lsls	r2, r2, #11
100133be:	4132      	asrs	r2, r6
100133c0:	4399      	bics	r1, r3
100133c2:	430a      	orrs	r2, r1
100133c4:	4643      	mov	r3, r8
100133c6:	00de      	lsls	r6, r3, #3
100133c8:	4b39      	ldr	r3, [pc, #228]	; (100134b0 <rint+0x13c>)
100133ca:	0011      	movs	r1, r2
100133cc:	199e      	adds	r6, r3, r6
100133ce:	6834      	ldr	r4, [r6, #0]
100133d0:	6875      	ldr	r5, [r6, #4]
100133d2:	0038      	movs	r0, r7
100133d4:	0022      	movs	r2, r4
100133d6:	002b      	movs	r3, r5
100133d8:	f001 f9dc 	bl	10014794 <__aeabi_dadd>
100133dc:	9000      	str	r0, [sp, #0]
100133de:	9101      	str	r1, [sp, #4]
100133e0:	9800      	ldr	r0, [sp, #0]
100133e2:	9901      	ldr	r1, [sp, #4]
100133e4:	0022      	movs	r2, r4
100133e6:	002b      	movs	r3, r5
100133e8:	f002 fb9e 	bl	10015b28 <__aeabi_dsub>
100133ec:	0004      	movs	r4, r0
100133ee:	000d      	movs	r5, r1
100133f0:	0020      	movs	r0, r4
100133f2:	0029      	movs	r1, r5
100133f4:	b002      	add	sp, #8
100133f6:	bc04      	pop	{r2}
100133f8:	4690      	mov	r8, r2
100133fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
100133fc:	2e33      	cmp	r6, #51	; 0x33
100133fe:	dd0c      	ble.n	1001341a <rint+0xa6>
10013400:	2380      	movs	r3, #128	; 0x80
10013402:	0004      	movs	r4, r0
10013404:	000d      	movs	r5, r1
10013406:	00db      	lsls	r3, r3, #3
10013408:	429e      	cmp	r6, r3
1001340a:	d1f1      	bne.n	100133f0 <rint+0x7c>
1001340c:	0002      	movs	r2, r0
1001340e:	000b      	movs	r3, r1
10013410:	f001 f9c0 	bl	10014794 <__aeabi_dadd>
10013414:	0004      	movs	r4, r0
10013416:	000d      	movs	r5, r1
10013418:	e7ea      	b.n	100133f0 <rint+0x7c>
1001341a:	4c26      	ldr	r4, [pc, #152]	; (100134b4 <rint+0x140>)
1001341c:	000d      	movs	r5, r1
1001341e:	46a4      	mov	ip, r4
10013420:	2401      	movs	r4, #1
10013422:	4463      	add	r3, ip
10013424:	4264      	negs	r4, r4
10013426:	40dc      	lsrs	r4, r3
10013428:	46a4      	mov	ip, r4
1001342a:	4661      	mov	r1, ip
1001342c:	0004      	movs	r4, r0
1001342e:	4201      	tst	r1, r0
10013430:	d0de      	beq.n	100133f0 <rint+0x7c>
10013432:	0849      	lsrs	r1, r1, #1
10013434:	4201      	tst	r1, r0
10013436:	d0c5      	beq.n	100133c4 <rint+0x50>
10013438:	2780      	movs	r7, #128	; 0x80
1001343a:	05ff      	lsls	r7, r7, #23
1001343c:	411f      	asrs	r7, r3
1001343e:	4388      	bics	r0, r1
10013440:	4307      	orrs	r7, r0
10013442:	e7bf      	b.n	100133c4 <rint+0x50>
10013444:	004b      	lsls	r3, r1, #1
10013446:	085b      	lsrs	r3, r3, #1
10013448:	4303      	orrs	r3, r0
1001344a:	0004      	movs	r4, r0
1001344c:	000d      	movs	r5, r1
1001344e:	2b00      	cmp	r3, #0
10013450:	d0ce      	beq.n	100133f0 <rint+0x7c>
10013452:	030b      	lsls	r3, r1, #12
10013454:	0b1b      	lsrs	r3, r3, #12
10013456:	4303      	orrs	r3, r0
10013458:	425a      	negs	r2, r3
1001345a:	4313      	orrs	r3, r2
1001345c:	2280      	movs	r2, #128	; 0x80
1001345e:	0b1b      	lsrs	r3, r3, #12
10013460:	0312      	lsls	r2, r2, #12
10013462:	4013      	ands	r3, r2
10013464:	0c4a      	lsrs	r2, r1, #17
10013466:	0452      	lsls	r2, r2, #17
10013468:	4313      	orrs	r3, r2
1001346a:	0019      	movs	r1, r3
1001346c:	4643      	mov	r3, r8
1001346e:	4a10      	ldr	r2, [pc, #64]	; (100134b0 <rint+0x13c>)
10013470:	00db      	lsls	r3, r3, #3
10013472:	18d3      	adds	r3, r2, r3
10013474:	681c      	ldr	r4, [r3, #0]
10013476:	685d      	ldr	r5, [r3, #4]
10013478:	0022      	movs	r2, r4
1001347a:	002b      	movs	r3, r5
1001347c:	f001 f98a 	bl	10014794 <__aeabi_dadd>
10013480:	9000      	str	r0, [sp, #0]
10013482:	9101      	str	r1, [sp, #4]
10013484:	9800      	ldr	r0, [sp, #0]
10013486:	9901      	ldr	r1, [sp, #4]
10013488:	0022      	movs	r2, r4
1001348a:	002b      	movs	r3, r5
1001348c:	f002 fb4c 	bl	10015b28 <__aeabi_dsub>
10013490:	4642      	mov	r2, r8
10013492:	004b      	lsls	r3, r1, #1
10013494:	085b      	lsrs	r3, r3, #1
10013496:	07d6      	lsls	r6, r2, #31
10013498:	4333      	orrs	r3, r6
1001349a:	0004      	movs	r4, r0
1001349c:	001d      	movs	r5, r3
1001349e:	e7a7      	b.n	100133f0 <rint+0x7c>
100134a0:	2780      	movs	r7, #128	; 0x80
100134a2:	063f      	lsls	r7, r7, #24
100134a4:	e789      	b.n	100133ba <rint+0x46>
100134a6:	46c0      	nop			; (mov r8, r8)
100134a8:	fffffc01 	.word	0xfffffc01
100134ac:	000fffff 	.word	0x000fffff
100134b0:	100186c8 	.word	0x100186c8
100134b4:	fffffbed 	.word	0xfffffbed

100134b8 <scalbn>:
100134b8:	004b      	lsls	r3, r1, #1
100134ba:	b570      	push	{r4, r5, r6, lr}
100134bc:	0d5b      	lsrs	r3, r3, #21
100134be:	0014      	movs	r4, r2
100134c0:	000a      	movs	r2, r1
100134c2:	2b00      	cmp	r3, #0
100134c4:	d11a      	bne.n	100134fc <scalbn+0x44>
100134c6:	004b      	lsls	r3, r1, #1
100134c8:	085b      	lsrs	r3, r3, #1
100134ca:	4303      	orrs	r3, r0
100134cc:	d015      	beq.n	100134fa <scalbn+0x42>
100134ce:	2200      	movs	r2, #0
100134d0:	4b22      	ldr	r3, [pc, #136]	; (1001355c <scalbn+0xa4>)
100134d2:	f002 f8af 	bl	10015634 <__aeabi_dmul>
100134d6:	4b22      	ldr	r3, [pc, #136]	; (10013560 <scalbn+0xa8>)
100134d8:	000a      	movs	r2, r1
100134da:	429c      	cmp	r4, r3
100134dc:	db22      	blt.n	10013524 <scalbn+0x6c>
100134de:	004b      	lsls	r3, r1, #1
100134e0:	0d5b      	lsrs	r3, r3, #21
100134e2:	3b36      	subs	r3, #54	; 0x36
100134e4:	4d1f      	ldr	r5, [pc, #124]	; (10013564 <scalbn+0xac>)
100134e6:	18e3      	adds	r3, r4, r3
100134e8:	42ab      	cmp	r3, r5
100134ea:	dc20      	bgt.n	1001352e <scalbn+0x76>
100134ec:	2b00      	cmp	r3, #0
100134ee:	dd0d      	ble.n	1001350c <scalbn+0x54>
100134f0:	4c1d      	ldr	r4, [pc, #116]	; (10013568 <scalbn+0xb0>)
100134f2:	051b      	lsls	r3, r3, #20
100134f4:	4022      	ands	r2, r4
100134f6:	431a      	orrs	r2, r3
100134f8:	0011      	movs	r1, r2
100134fa:	bd70      	pop	{r4, r5, r6, pc}
100134fc:	4d1b      	ldr	r5, [pc, #108]	; (1001356c <scalbn+0xb4>)
100134fe:	42ab      	cmp	r3, r5
10013500:	d1f0      	bne.n	100134e4 <scalbn+0x2c>
10013502:	0002      	movs	r2, r0
10013504:	000b      	movs	r3, r1
10013506:	f001 f945 	bl	10014794 <__aeabi_dadd>
1001350a:	e7f6      	b.n	100134fa <scalbn+0x42>
1001350c:	001d      	movs	r5, r3
1001350e:	3535      	adds	r5, #53	; 0x35
10013510:	da18      	bge.n	10013544 <scalbn+0x8c>
10013512:	4b17      	ldr	r3, [pc, #92]	; (10013570 <scalbn+0xb8>)
10013514:	0002      	movs	r2, r0
10013516:	429c      	cmp	r4, r3
10013518:	dc0a      	bgt.n	10013530 <scalbn+0x78>
1001351a:	000b      	movs	r3, r1
1001351c:	4815      	ldr	r0, [pc, #84]	; (10013574 <scalbn+0xbc>)
1001351e:	4916      	ldr	r1, [pc, #88]	; (10013578 <scalbn+0xc0>)
10013520:	f000 f832 	bl	10013588 <copysign>
10013524:	4a13      	ldr	r2, [pc, #76]	; (10013574 <scalbn+0xbc>)
10013526:	4b14      	ldr	r3, [pc, #80]	; (10013578 <scalbn+0xc0>)
10013528:	f002 f884 	bl	10015634 <__aeabi_dmul>
1001352c:	e7e5      	b.n	100134fa <scalbn+0x42>
1001352e:	0002      	movs	r2, r0
10013530:	000b      	movs	r3, r1
10013532:	4812      	ldr	r0, [pc, #72]	; (1001357c <scalbn+0xc4>)
10013534:	4912      	ldr	r1, [pc, #72]	; (10013580 <scalbn+0xc8>)
10013536:	f000 f827 	bl	10013588 <copysign>
1001353a:	4a10      	ldr	r2, [pc, #64]	; (1001357c <scalbn+0xc4>)
1001353c:	4b10      	ldr	r3, [pc, #64]	; (10013580 <scalbn+0xc8>)
1001353e:	f002 f879 	bl	10015634 <__aeabi_dmul>
10013542:	e7da      	b.n	100134fa <scalbn+0x42>
10013544:	4c08      	ldr	r4, [pc, #32]	; (10013568 <scalbn+0xb0>)
10013546:	3336      	adds	r3, #54	; 0x36
10013548:	4022      	ands	r2, r4
1001354a:	051b      	lsls	r3, r3, #20
1001354c:	4313      	orrs	r3, r2
1001354e:	0019      	movs	r1, r3
10013550:	2200      	movs	r2, #0
10013552:	4b0c      	ldr	r3, [pc, #48]	; (10013584 <scalbn+0xcc>)
10013554:	f002 f86e 	bl	10015634 <__aeabi_dmul>
10013558:	e7cf      	b.n	100134fa <scalbn+0x42>
1001355a:	46c0      	nop			; (mov r8, r8)
1001355c:	43500000 	.word	0x43500000
10013560:	ffff3cb0 	.word	0xffff3cb0
10013564:	000007fe 	.word	0x000007fe
10013568:	800fffff 	.word	0x800fffff
1001356c:	000007ff 	.word	0x000007ff
10013570:	0000c350 	.word	0x0000c350
10013574:	c2f8f359 	.word	0xc2f8f359
10013578:	01a56e1f 	.word	0x01a56e1f
1001357c:	8800759c 	.word	0x8800759c
10013580:	7e37e43c 	.word	0x7e37e43c
10013584:	3c900000 	.word	0x3c900000

10013588 <copysign>:
10013588:	b530      	push	{r4, r5, lr}
1001358a:	004a      	lsls	r2, r1, #1
1001358c:	0fdb      	lsrs	r3, r3, #31
1001358e:	07db      	lsls	r3, r3, #31
10013590:	0852      	lsrs	r2, r2, #1
10013592:	431a      	orrs	r2, r3
10013594:	0011      	movs	r1, r2
10013596:	bd30      	pop	{r4, r5, pc}

10013598 <__gnu_thumb1_case_sqi>:
10013598:	b402      	push	{r1}
1001359a:	4671      	mov	r1, lr
1001359c:	0849      	lsrs	r1, r1, #1
1001359e:	0049      	lsls	r1, r1, #1
100135a0:	5609      	ldrsb	r1, [r1, r0]
100135a2:	0049      	lsls	r1, r1, #1
100135a4:	448e      	add	lr, r1
100135a6:	bc02      	pop	{r1}
100135a8:	4770      	bx	lr
100135aa:	46c0      	nop			; (mov r8, r8)

100135ac <__gnu_thumb1_case_uqi>:
100135ac:	b402      	push	{r1}
100135ae:	4671      	mov	r1, lr
100135b0:	0849      	lsrs	r1, r1, #1
100135b2:	0049      	lsls	r1, r1, #1
100135b4:	5c09      	ldrb	r1, [r1, r0]
100135b6:	0049      	lsls	r1, r1, #1
100135b8:	448e      	add	lr, r1
100135ba:	bc02      	pop	{r1}
100135bc:	4770      	bx	lr
100135be:	46c0      	nop			; (mov r8, r8)

100135c0 <__aeabi_uidiv>:
100135c0:	2200      	movs	r2, #0
100135c2:	0843      	lsrs	r3, r0, #1
100135c4:	428b      	cmp	r3, r1
100135c6:	d374      	bcc.n	100136b2 <__aeabi_uidiv+0xf2>
100135c8:	0903      	lsrs	r3, r0, #4
100135ca:	428b      	cmp	r3, r1
100135cc:	d35f      	bcc.n	1001368e <__aeabi_uidiv+0xce>
100135ce:	0a03      	lsrs	r3, r0, #8
100135d0:	428b      	cmp	r3, r1
100135d2:	d344      	bcc.n	1001365e <__aeabi_uidiv+0x9e>
100135d4:	0b03      	lsrs	r3, r0, #12
100135d6:	428b      	cmp	r3, r1
100135d8:	d328      	bcc.n	1001362c <__aeabi_uidiv+0x6c>
100135da:	0c03      	lsrs	r3, r0, #16
100135dc:	428b      	cmp	r3, r1
100135de:	d30d      	bcc.n	100135fc <__aeabi_uidiv+0x3c>
100135e0:	22ff      	movs	r2, #255	; 0xff
100135e2:	0209      	lsls	r1, r1, #8
100135e4:	ba12      	rev	r2, r2
100135e6:	0c03      	lsrs	r3, r0, #16
100135e8:	428b      	cmp	r3, r1
100135ea:	d302      	bcc.n	100135f2 <__aeabi_uidiv+0x32>
100135ec:	1212      	asrs	r2, r2, #8
100135ee:	0209      	lsls	r1, r1, #8
100135f0:	d065      	beq.n	100136be <__aeabi_uidiv+0xfe>
100135f2:	0b03      	lsrs	r3, r0, #12
100135f4:	428b      	cmp	r3, r1
100135f6:	d319      	bcc.n	1001362c <__aeabi_uidiv+0x6c>
100135f8:	e000      	b.n	100135fc <__aeabi_uidiv+0x3c>
100135fa:	0a09      	lsrs	r1, r1, #8
100135fc:	0bc3      	lsrs	r3, r0, #15
100135fe:	428b      	cmp	r3, r1
10013600:	d301      	bcc.n	10013606 <__aeabi_uidiv+0x46>
10013602:	03cb      	lsls	r3, r1, #15
10013604:	1ac0      	subs	r0, r0, r3
10013606:	4152      	adcs	r2, r2
10013608:	0b83      	lsrs	r3, r0, #14
1001360a:	428b      	cmp	r3, r1
1001360c:	d301      	bcc.n	10013612 <__aeabi_uidiv+0x52>
1001360e:	038b      	lsls	r3, r1, #14
10013610:	1ac0      	subs	r0, r0, r3
10013612:	4152      	adcs	r2, r2
10013614:	0b43      	lsrs	r3, r0, #13
10013616:	428b      	cmp	r3, r1
10013618:	d301      	bcc.n	1001361e <__aeabi_uidiv+0x5e>
1001361a:	034b      	lsls	r3, r1, #13
1001361c:	1ac0      	subs	r0, r0, r3
1001361e:	4152      	adcs	r2, r2
10013620:	0b03      	lsrs	r3, r0, #12
10013622:	428b      	cmp	r3, r1
10013624:	d301      	bcc.n	1001362a <__aeabi_uidiv+0x6a>
10013626:	030b      	lsls	r3, r1, #12
10013628:	1ac0      	subs	r0, r0, r3
1001362a:	4152      	adcs	r2, r2
1001362c:	0ac3      	lsrs	r3, r0, #11
1001362e:	428b      	cmp	r3, r1
10013630:	d301      	bcc.n	10013636 <__aeabi_uidiv+0x76>
10013632:	02cb      	lsls	r3, r1, #11
10013634:	1ac0      	subs	r0, r0, r3
10013636:	4152      	adcs	r2, r2
10013638:	0a83      	lsrs	r3, r0, #10
1001363a:	428b      	cmp	r3, r1
1001363c:	d301      	bcc.n	10013642 <__aeabi_uidiv+0x82>
1001363e:	028b      	lsls	r3, r1, #10
10013640:	1ac0      	subs	r0, r0, r3
10013642:	4152      	adcs	r2, r2
10013644:	0a43      	lsrs	r3, r0, #9
10013646:	428b      	cmp	r3, r1
10013648:	d301      	bcc.n	1001364e <__aeabi_uidiv+0x8e>
1001364a:	024b      	lsls	r3, r1, #9
1001364c:	1ac0      	subs	r0, r0, r3
1001364e:	4152      	adcs	r2, r2
10013650:	0a03      	lsrs	r3, r0, #8
10013652:	428b      	cmp	r3, r1
10013654:	d301      	bcc.n	1001365a <__aeabi_uidiv+0x9a>
10013656:	020b      	lsls	r3, r1, #8
10013658:	1ac0      	subs	r0, r0, r3
1001365a:	4152      	adcs	r2, r2
1001365c:	d2cd      	bcs.n	100135fa <__aeabi_uidiv+0x3a>
1001365e:	09c3      	lsrs	r3, r0, #7
10013660:	428b      	cmp	r3, r1
10013662:	d301      	bcc.n	10013668 <__aeabi_uidiv+0xa8>
10013664:	01cb      	lsls	r3, r1, #7
10013666:	1ac0      	subs	r0, r0, r3
10013668:	4152      	adcs	r2, r2
1001366a:	0983      	lsrs	r3, r0, #6
1001366c:	428b      	cmp	r3, r1
1001366e:	d301      	bcc.n	10013674 <__aeabi_uidiv+0xb4>
10013670:	018b      	lsls	r3, r1, #6
10013672:	1ac0      	subs	r0, r0, r3
10013674:	4152      	adcs	r2, r2
10013676:	0943      	lsrs	r3, r0, #5
10013678:	428b      	cmp	r3, r1
1001367a:	d301      	bcc.n	10013680 <__aeabi_uidiv+0xc0>
1001367c:	014b      	lsls	r3, r1, #5
1001367e:	1ac0      	subs	r0, r0, r3
10013680:	4152      	adcs	r2, r2
10013682:	0903      	lsrs	r3, r0, #4
10013684:	428b      	cmp	r3, r1
10013686:	d301      	bcc.n	1001368c <__aeabi_uidiv+0xcc>
10013688:	010b      	lsls	r3, r1, #4
1001368a:	1ac0      	subs	r0, r0, r3
1001368c:	4152      	adcs	r2, r2
1001368e:	08c3      	lsrs	r3, r0, #3
10013690:	428b      	cmp	r3, r1
10013692:	d301      	bcc.n	10013698 <__aeabi_uidiv+0xd8>
10013694:	00cb      	lsls	r3, r1, #3
10013696:	1ac0      	subs	r0, r0, r3
10013698:	4152      	adcs	r2, r2
1001369a:	0883      	lsrs	r3, r0, #2
1001369c:	428b      	cmp	r3, r1
1001369e:	d301      	bcc.n	100136a4 <__aeabi_uidiv+0xe4>
100136a0:	008b      	lsls	r3, r1, #2
100136a2:	1ac0      	subs	r0, r0, r3
100136a4:	4152      	adcs	r2, r2
100136a6:	0843      	lsrs	r3, r0, #1
100136a8:	428b      	cmp	r3, r1
100136aa:	d301      	bcc.n	100136b0 <__aeabi_uidiv+0xf0>
100136ac:	004b      	lsls	r3, r1, #1
100136ae:	1ac0      	subs	r0, r0, r3
100136b0:	4152      	adcs	r2, r2
100136b2:	1a41      	subs	r1, r0, r1
100136b4:	d200      	bcs.n	100136b8 <__aeabi_uidiv+0xf8>
100136b6:	4601      	mov	r1, r0
100136b8:	4152      	adcs	r2, r2
100136ba:	4610      	mov	r0, r2
100136bc:	4770      	bx	lr
100136be:	e7ff      	b.n	100136c0 <__aeabi_uidiv+0x100>
100136c0:	b501      	push	{r0, lr}
100136c2:	2000      	movs	r0, #0
100136c4:	f000 f8f0 	bl	100138a8 <__aeabi_idiv0>
100136c8:	bd02      	pop	{r1, pc}
100136ca:	46c0      	nop			; (mov r8, r8)

100136cc <__aeabi_uidivmod>:
100136cc:	2900      	cmp	r1, #0
100136ce:	d0f7      	beq.n	100136c0 <__aeabi_uidiv+0x100>
100136d0:	e776      	b.n	100135c0 <__aeabi_uidiv>
100136d2:	4770      	bx	lr

100136d4 <__aeabi_idiv>:
100136d4:	4603      	mov	r3, r0
100136d6:	430b      	orrs	r3, r1
100136d8:	d47f      	bmi.n	100137da <__aeabi_idiv+0x106>
100136da:	2200      	movs	r2, #0
100136dc:	0843      	lsrs	r3, r0, #1
100136de:	428b      	cmp	r3, r1
100136e0:	d374      	bcc.n	100137cc <__aeabi_idiv+0xf8>
100136e2:	0903      	lsrs	r3, r0, #4
100136e4:	428b      	cmp	r3, r1
100136e6:	d35f      	bcc.n	100137a8 <__aeabi_idiv+0xd4>
100136e8:	0a03      	lsrs	r3, r0, #8
100136ea:	428b      	cmp	r3, r1
100136ec:	d344      	bcc.n	10013778 <__aeabi_idiv+0xa4>
100136ee:	0b03      	lsrs	r3, r0, #12
100136f0:	428b      	cmp	r3, r1
100136f2:	d328      	bcc.n	10013746 <__aeabi_idiv+0x72>
100136f4:	0c03      	lsrs	r3, r0, #16
100136f6:	428b      	cmp	r3, r1
100136f8:	d30d      	bcc.n	10013716 <__aeabi_idiv+0x42>
100136fa:	22ff      	movs	r2, #255	; 0xff
100136fc:	0209      	lsls	r1, r1, #8
100136fe:	ba12      	rev	r2, r2
10013700:	0c03      	lsrs	r3, r0, #16
10013702:	428b      	cmp	r3, r1
10013704:	d302      	bcc.n	1001370c <__aeabi_idiv+0x38>
10013706:	1212      	asrs	r2, r2, #8
10013708:	0209      	lsls	r1, r1, #8
1001370a:	d065      	beq.n	100137d8 <__aeabi_idiv+0x104>
1001370c:	0b03      	lsrs	r3, r0, #12
1001370e:	428b      	cmp	r3, r1
10013710:	d319      	bcc.n	10013746 <__aeabi_idiv+0x72>
10013712:	e000      	b.n	10013716 <__aeabi_idiv+0x42>
10013714:	0a09      	lsrs	r1, r1, #8
10013716:	0bc3      	lsrs	r3, r0, #15
10013718:	428b      	cmp	r3, r1
1001371a:	d301      	bcc.n	10013720 <__aeabi_idiv+0x4c>
1001371c:	03cb      	lsls	r3, r1, #15
1001371e:	1ac0      	subs	r0, r0, r3
10013720:	4152      	adcs	r2, r2
10013722:	0b83      	lsrs	r3, r0, #14
10013724:	428b      	cmp	r3, r1
10013726:	d301      	bcc.n	1001372c <__aeabi_idiv+0x58>
10013728:	038b      	lsls	r3, r1, #14
1001372a:	1ac0      	subs	r0, r0, r3
1001372c:	4152      	adcs	r2, r2
1001372e:	0b43      	lsrs	r3, r0, #13
10013730:	428b      	cmp	r3, r1
10013732:	d301      	bcc.n	10013738 <__aeabi_idiv+0x64>
10013734:	034b      	lsls	r3, r1, #13
10013736:	1ac0      	subs	r0, r0, r3
10013738:	4152      	adcs	r2, r2
1001373a:	0b03      	lsrs	r3, r0, #12
1001373c:	428b      	cmp	r3, r1
1001373e:	d301      	bcc.n	10013744 <__aeabi_idiv+0x70>
10013740:	030b      	lsls	r3, r1, #12
10013742:	1ac0      	subs	r0, r0, r3
10013744:	4152      	adcs	r2, r2
10013746:	0ac3      	lsrs	r3, r0, #11
10013748:	428b      	cmp	r3, r1
1001374a:	d301      	bcc.n	10013750 <__aeabi_idiv+0x7c>
1001374c:	02cb      	lsls	r3, r1, #11
1001374e:	1ac0      	subs	r0, r0, r3
10013750:	4152      	adcs	r2, r2
10013752:	0a83      	lsrs	r3, r0, #10
10013754:	428b      	cmp	r3, r1
10013756:	d301      	bcc.n	1001375c <__aeabi_idiv+0x88>
10013758:	028b      	lsls	r3, r1, #10
1001375a:	1ac0      	subs	r0, r0, r3
1001375c:	4152      	adcs	r2, r2
1001375e:	0a43      	lsrs	r3, r0, #9
10013760:	428b      	cmp	r3, r1
10013762:	d301      	bcc.n	10013768 <__aeabi_idiv+0x94>
10013764:	024b      	lsls	r3, r1, #9
10013766:	1ac0      	subs	r0, r0, r3
10013768:	4152      	adcs	r2, r2
1001376a:	0a03      	lsrs	r3, r0, #8
1001376c:	428b      	cmp	r3, r1
1001376e:	d301      	bcc.n	10013774 <__aeabi_idiv+0xa0>
10013770:	020b      	lsls	r3, r1, #8
10013772:	1ac0      	subs	r0, r0, r3
10013774:	4152      	adcs	r2, r2
10013776:	d2cd      	bcs.n	10013714 <__aeabi_idiv+0x40>
10013778:	09c3      	lsrs	r3, r0, #7
1001377a:	428b      	cmp	r3, r1
1001377c:	d301      	bcc.n	10013782 <__aeabi_idiv+0xae>
1001377e:	01cb      	lsls	r3, r1, #7
10013780:	1ac0      	subs	r0, r0, r3
10013782:	4152      	adcs	r2, r2
10013784:	0983      	lsrs	r3, r0, #6
10013786:	428b      	cmp	r3, r1
10013788:	d301      	bcc.n	1001378e <__aeabi_idiv+0xba>
1001378a:	018b      	lsls	r3, r1, #6
1001378c:	1ac0      	subs	r0, r0, r3
1001378e:	4152      	adcs	r2, r2
10013790:	0943      	lsrs	r3, r0, #5
10013792:	428b      	cmp	r3, r1
10013794:	d301      	bcc.n	1001379a <__aeabi_idiv+0xc6>
10013796:	014b      	lsls	r3, r1, #5
10013798:	1ac0      	subs	r0, r0, r3
1001379a:	4152      	adcs	r2, r2
1001379c:	0903      	lsrs	r3, r0, #4
1001379e:	428b      	cmp	r3, r1
100137a0:	d301      	bcc.n	100137a6 <__aeabi_idiv+0xd2>
100137a2:	010b      	lsls	r3, r1, #4
100137a4:	1ac0      	subs	r0, r0, r3
100137a6:	4152      	adcs	r2, r2
100137a8:	08c3      	lsrs	r3, r0, #3
100137aa:	428b      	cmp	r3, r1
100137ac:	d301      	bcc.n	100137b2 <__aeabi_idiv+0xde>
100137ae:	00cb      	lsls	r3, r1, #3
100137b0:	1ac0      	subs	r0, r0, r3
100137b2:	4152      	adcs	r2, r2
100137b4:	0883      	lsrs	r3, r0, #2
100137b6:	428b      	cmp	r3, r1
100137b8:	d301      	bcc.n	100137be <__aeabi_idiv+0xea>
100137ba:	008b      	lsls	r3, r1, #2
100137bc:	1ac0      	subs	r0, r0, r3
100137be:	4152      	adcs	r2, r2
100137c0:	0843      	lsrs	r3, r0, #1
100137c2:	428b      	cmp	r3, r1
100137c4:	d301      	bcc.n	100137ca <__aeabi_idiv+0xf6>
100137c6:	004b      	lsls	r3, r1, #1
100137c8:	1ac0      	subs	r0, r0, r3
100137ca:	4152      	adcs	r2, r2
100137cc:	1a41      	subs	r1, r0, r1
100137ce:	d200      	bcs.n	100137d2 <__aeabi_idiv+0xfe>
100137d0:	4601      	mov	r1, r0
100137d2:	4152      	adcs	r2, r2
100137d4:	4610      	mov	r0, r2
100137d6:	4770      	bx	lr
100137d8:	e05d      	b.n	10013896 <__aeabi_idiv+0x1c2>
100137da:	0fca      	lsrs	r2, r1, #31
100137dc:	d000      	beq.n	100137e0 <__aeabi_idiv+0x10c>
100137de:	4249      	negs	r1, r1
100137e0:	1003      	asrs	r3, r0, #32
100137e2:	d300      	bcc.n	100137e6 <__aeabi_idiv+0x112>
100137e4:	4240      	negs	r0, r0
100137e6:	4053      	eors	r3, r2
100137e8:	2200      	movs	r2, #0
100137ea:	469c      	mov	ip, r3
100137ec:	0903      	lsrs	r3, r0, #4
100137ee:	428b      	cmp	r3, r1
100137f0:	d32d      	bcc.n	1001384e <__aeabi_idiv+0x17a>
100137f2:	0a03      	lsrs	r3, r0, #8
100137f4:	428b      	cmp	r3, r1
100137f6:	d312      	bcc.n	1001381e <__aeabi_idiv+0x14a>
100137f8:	22fc      	movs	r2, #252	; 0xfc
100137fa:	0189      	lsls	r1, r1, #6
100137fc:	ba12      	rev	r2, r2
100137fe:	0a03      	lsrs	r3, r0, #8
10013800:	428b      	cmp	r3, r1
10013802:	d30c      	bcc.n	1001381e <__aeabi_idiv+0x14a>
10013804:	0189      	lsls	r1, r1, #6
10013806:	1192      	asrs	r2, r2, #6
10013808:	428b      	cmp	r3, r1
1001380a:	d308      	bcc.n	1001381e <__aeabi_idiv+0x14a>
1001380c:	0189      	lsls	r1, r1, #6
1001380e:	1192      	asrs	r2, r2, #6
10013810:	428b      	cmp	r3, r1
10013812:	d304      	bcc.n	1001381e <__aeabi_idiv+0x14a>
10013814:	0189      	lsls	r1, r1, #6
10013816:	d03a      	beq.n	1001388e <__aeabi_idiv+0x1ba>
10013818:	1192      	asrs	r2, r2, #6
1001381a:	e000      	b.n	1001381e <__aeabi_idiv+0x14a>
1001381c:	0989      	lsrs	r1, r1, #6
1001381e:	09c3      	lsrs	r3, r0, #7
10013820:	428b      	cmp	r3, r1
10013822:	d301      	bcc.n	10013828 <__aeabi_idiv+0x154>
10013824:	01cb      	lsls	r3, r1, #7
10013826:	1ac0      	subs	r0, r0, r3
10013828:	4152      	adcs	r2, r2
1001382a:	0983      	lsrs	r3, r0, #6
1001382c:	428b      	cmp	r3, r1
1001382e:	d301      	bcc.n	10013834 <__aeabi_idiv+0x160>
10013830:	018b      	lsls	r3, r1, #6
10013832:	1ac0      	subs	r0, r0, r3
10013834:	4152      	adcs	r2, r2
10013836:	0943      	lsrs	r3, r0, #5
10013838:	428b      	cmp	r3, r1
1001383a:	d301      	bcc.n	10013840 <__aeabi_idiv+0x16c>
1001383c:	014b      	lsls	r3, r1, #5
1001383e:	1ac0      	subs	r0, r0, r3
10013840:	4152      	adcs	r2, r2
10013842:	0903      	lsrs	r3, r0, #4
10013844:	428b      	cmp	r3, r1
10013846:	d301      	bcc.n	1001384c <__aeabi_idiv+0x178>
10013848:	010b      	lsls	r3, r1, #4
1001384a:	1ac0      	subs	r0, r0, r3
1001384c:	4152      	adcs	r2, r2
1001384e:	08c3      	lsrs	r3, r0, #3
10013850:	428b      	cmp	r3, r1
10013852:	d301      	bcc.n	10013858 <__aeabi_idiv+0x184>
10013854:	00cb      	lsls	r3, r1, #3
10013856:	1ac0      	subs	r0, r0, r3
10013858:	4152      	adcs	r2, r2
1001385a:	0883      	lsrs	r3, r0, #2
1001385c:	428b      	cmp	r3, r1
1001385e:	d301      	bcc.n	10013864 <__aeabi_idiv+0x190>
10013860:	008b      	lsls	r3, r1, #2
10013862:	1ac0      	subs	r0, r0, r3
10013864:	4152      	adcs	r2, r2
10013866:	d2d9      	bcs.n	1001381c <__aeabi_idiv+0x148>
10013868:	0843      	lsrs	r3, r0, #1
1001386a:	428b      	cmp	r3, r1
1001386c:	d301      	bcc.n	10013872 <__aeabi_idiv+0x19e>
1001386e:	004b      	lsls	r3, r1, #1
10013870:	1ac0      	subs	r0, r0, r3
10013872:	4152      	adcs	r2, r2
10013874:	1a41      	subs	r1, r0, r1
10013876:	d200      	bcs.n	1001387a <__aeabi_idiv+0x1a6>
10013878:	4601      	mov	r1, r0
1001387a:	4663      	mov	r3, ip
1001387c:	4152      	adcs	r2, r2
1001387e:	105b      	asrs	r3, r3, #1
10013880:	4610      	mov	r0, r2
10013882:	d301      	bcc.n	10013888 <__aeabi_idiv+0x1b4>
10013884:	4240      	negs	r0, r0
10013886:	2b00      	cmp	r3, #0
10013888:	d500      	bpl.n	1001388c <__aeabi_idiv+0x1b8>
1001388a:	4249      	negs	r1, r1
1001388c:	4770      	bx	lr
1001388e:	4663      	mov	r3, ip
10013890:	105b      	asrs	r3, r3, #1
10013892:	d300      	bcc.n	10013896 <__aeabi_idiv+0x1c2>
10013894:	4240      	negs	r0, r0
10013896:	b501      	push	{r0, lr}
10013898:	2000      	movs	r0, #0
1001389a:	f000 f805 	bl	100138a8 <__aeabi_idiv0>
1001389e:	bd02      	pop	{r1, pc}

100138a0 <__aeabi_idivmod>:
100138a0:	2900      	cmp	r1, #0
100138a2:	d0f8      	beq.n	10013896 <__aeabi_idiv+0x1c2>
100138a4:	e716      	b.n	100136d4 <__aeabi_idiv>
100138a6:	4770      	bx	lr

100138a8 <__aeabi_idiv0>:
100138a8:	4770      	bx	lr
100138aa:	46c0      	nop			; (mov r8, r8)

100138ac <__aeabi_cdrcmple>:
100138ac:	4684      	mov	ip, r0
100138ae:	1c10      	adds	r0, r2, #0
100138b0:	4662      	mov	r2, ip
100138b2:	468c      	mov	ip, r1
100138b4:	1c19      	adds	r1, r3, #0
100138b6:	4663      	mov	r3, ip
100138b8:	e000      	b.n	100138bc <__aeabi_cdcmpeq>
100138ba:	46c0      	nop			; (mov r8, r8)

100138bc <__aeabi_cdcmpeq>:
100138bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
100138be:	f001 fe4f 	bl	10015560 <__ledf2>
100138c2:	2800      	cmp	r0, #0
100138c4:	d401      	bmi.n	100138ca <__aeabi_cdcmpeq+0xe>
100138c6:	2100      	movs	r1, #0
100138c8:	42c8      	cmn	r0, r1
100138ca:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

100138cc <__aeabi_dcmpeq>:
100138cc:	b510      	push	{r4, lr}
100138ce:	f001 fda3 	bl	10015418 <__eqdf2>
100138d2:	4240      	negs	r0, r0
100138d4:	3001      	adds	r0, #1
100138d6:	bd10      	pop	{r4, pc}

100138d8 <__aeabi_dcmplt>:
100138d8:	b510      	push	{r4, lr}
100138da:	f001 fe41 	bl	10015560 <__ledf2>
100138de:	2800      	cmp	r0, #0
100138e0:	db01      	blt.n	100138e6 <__aeabi_dcmplt+0xe>
100138e2:	2000      	movs	r0, #0
100138e4:	bd10      	pop	{r4, pc}
100138e6:	2001      	movs	r0, #1
100138e8:	bd10      	pop	{r4, pc}
100138ea:	46c0      	nop			; (mov r8, r8)

100138ec <__aeabi_dcmple>:
100138ec:	b510      	push	{r4, lr}
100138ee:	f001 fe37 	bl	10015560 <__ledf2>
100138f2:	2800      	cmp	r0, #0
100138f4:	dd01      	ble.n	100138fa <__aeabi_dcmple+0xe>
100138f6:	2000      	movs	r0, #0
100138f8:	bd10      	pop	{r4, pc}
100138fa:	2001      	movs	r0, #1
100138fc:	bd10      	pop	{r4, pc}
100138fe:	46c0      	nop			; (mov r8, r8)

10013900 <__aeabi_dcmpgt>:
10013900:	b510      	push	{r4, lr}
10013902:	f001 fdc9 	bl	10015498 <__gedf2>
10013906:	2800      	cmp	r0, #0
10013908:	dc01      	bgt.n	1001390e <__aeabi_dcmpgt+0xe>
1001390a:	2000      	movs	r0, #0
1001390c:	bd10      	pop	{r4, pc}
1001390e:	2001      	movs	r0, #1
10013910:	bd10      	pop	{r4, pc}
10013912:	46c0      	nop			; (mov r8, r8)

10013914 <__aeabi_dcmpge>:
10013914:	b510      	push	{r4, lr}
10013916:	f001 fdbf 	bl	10015498 <__gedf2>
1001391a:	2800      	cmp	r0, #0
1001391c:	da01      	bge.n	10013922 <__aeabi_dcmpge+0xe>
1001391e:	2000      	movs	r0, #0
10013920:	bd10      	pop	{r4, pc}
10013922:	2001      	movs	r0, #1
10013924:	bd10      	pop	{r4, pc}
10013926:	46c0      	nop			; (mov r8, r8)

10013928 <__aeabi_cfrcmple>:
10013928:	4684      	mov	ip, r0
1001392a:	1c08      	adds	r0, r1, #0
1001392c:	4661      	mov	r1, ip
1001392e:	e7ff      	b.n	10013930 <__aeabi_cfcmpeq>

10013930 <__aeabi_cfcmpeq>:
10013930:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10013932:	f000 fb91 	bl	10014058 <__lesf2>
10013936:	2800      	cmp	r0, #0
10013938:	d401      	bmi.n	1001393e <__aeabi_cfcmpeq+0xe>
1001393a:	2100      	movs	r1, #0
1001393c:	42c8      	cmn	r0, r1
1001393e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10013940 <__aeabi_fcmpeq>:
10013940:	b510      	push	{r4, lr}
10013942:	f000 fb1d 	bl	10013f80 <__eqsf2>
10013946:	4240      	negs	r0, r0
10013948:	3001      	adds	r0, #1
1001394a:	bd10      	pop	{r4, pc}

1001394c <__aeabi_fcmplt>:
1001394c:	b510      	push	{r4, lr}
1001394e:	f000 fb83 	bl	10014058 <__lesf2>
10013952:	2800      	cmp	r0, #0
10013954:	db01      	blt.n	1001395a <__aeabi_fcmplt+0xe>
10013956:	2000      	movs	r0, #0
10013958:	bd10      	pop	{r4, pc}
1001395a:	2001      	movs	r0, #1
1001395c:	bd10      	pop	{r4, pc}
1001395e:	46c0      	nop			; (mov r8, r8)

10013960 <__aeabi_fcmple>:
10013960:	b510      	push	{r4, lr}
10013962:	f000 fb79 	bl	10014058 <__lesf2>
10013966:	2800      	cmp	r0, #0
10013968:	dd01      	ble.n	1001396e <__aeabi_fcmple+0xe>
1001396a:	2000      	movs	r0, #0
1001396c:	bd10      	pop	{r4, pc}
1001396e:	2001      	movs	r0, #1
10013970:	bd10      	pop	{r4, pc}
10013972:	46c0      	nop			; (mov r8, r8)

10013974 <__aeabi_fcmpgt>:
10013974:	b510      	push	{r4, lr}
10013976:	f000 fb2b 	bl	10013fd0 <__gesf2>
1001397a:	2800      	cmp	r0, #0
1001397c:	dc01      	bgt.n	10013982 <__aeabi_fcmpgt+0xe>
1001397e:	2000      	movs	r0, #0
10013980:	bd10      	pop	{r4, pc}
10013982:	2001      	movs	r0, #1
10013984:	bd10      	pop	{r4, pc}
10013986:	46c0      	nop			; (mov r8, r8)

10013988 <__aeabi_fcmpge>:
10013988:	b510      	push	{r4, lr}
1001398a:	f000 fb21 	bl	10013fd0 <__gesf2>
1001398e:	2800      	cmp	r0, #0
10013990:	da01      	bge.n	10013996 <__aeabi_fcmpge+0xe>
10013992:	2000      	movs	r0, #0
10013994:	bd10      	pop	{r4, pc}
10013996:	2001      	movs	r0, #1
10013998:	bd10      	pop	{r4, pc}
1001399a:	46c0      	nop			; (mov r8, r8)

1001399c <__aeabi_lmul>:
1001399c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001399e:	464f      	mov	r7, r9
100139a0:	4646      	mov	r6, r8
100139a2:	b4c0      	push	{r6, r7}
100139a4:	0416      	lsls	r6, r2, #16
100139a6:	0c36      	lsrs	r6, r6, #16
100139a8:	4699      	mov	r9, r3
100139aa:	0033      	movs	r3, r6
100139ac:	0405      	lsls	r5, r0, #16
100139ae:	0c2c      	lsrs	r4, r5, #16
100139b0:	0c07      	lsrs	r7, r0, #16
100139b2:	0c15      	lsrs	r5, r2, #16
100139b4:	4363      	muls	r3, r4
100139b6:	437e      	muls	r6, r7
100139b8:	436f      	muls	r7, r5
100139ba:	4365      	muls	r5, r4
100139bc:	0c1c      	lsrs	r4, r3, #16
100139be:	19ad      	adds	r5, r5, r6
100139c0:	1964      	adds	r4, r4, r5
100139c2:	469c      	mov	ip, r3
100139c4:	42a6      	cmp	r6, r4
100139c6:	d903      	bls.n	100139d0 <__aeabi_lmul+0x34>
100139c8:	2380      	movs	r3, #128	; 0x80
100139ca:	025b      	lsls	r3, r3, #9
100139cc:	4698      	mov	r8, r3
100139ce:	4447      	add	r7, r8
100139d0:	4663      	mov	r3, ip
100139d2:	0c25      	lsrs	r5, r4, #16
100139d4:	19ef      	adds	r7, r5, r7
100139d6:	041d      	lsls	r5, r3, #16
100139d8:	464b      	mov	r3, r9
100139da:	434a      	muls	r2, r1
100139dc:	4343      	muls	r3, r0
100139de:	0c2d      	lsrs	r5, r5, #16
100139e0:	0424      	lsls	r4, r4, #16
100139e2:	1964      	adds	r4, r4, r5
100139e4:	1899      	adds	r1, r3, r2
100139e6:	19c9      	adds	r1, r1, r7
100139e8:	0020      	movs	r0, r4
100139ea:	bc0c      	pop	{r2, r3}
100139ec:	4690      	mov	r8, r2
100139ee:	4699      	mov	r9, r3
100139f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100139f2:	46c0      	nop			; (mov r8, r8)

100139f4 <__aeabi_f2uiz>:
100139f4:	219e      	movs	r1, #158	; 0x9e
100139f6:	b510      	push	{r4, lr}
100139f8:	05c9      	lsls	r1, r1, #23
100139fa:	1c04      	adds	r4, r0, #0
100139fc:	f7ff ffc4 	bl	10013988 <__aeabi_fcmpge>
10013a00:	2800      	cmp	r0, #0
10013a02:	d103      	bne.n	10013a0c <__aeabi_f2uiz+0x18>
10013a04:	1c20      	adds	r0, r4, #0
10013a06:	f000 fe1d 	bl	10014644 <__aeabi_f2iz>
10013a0a:	bd10      	pop	{r4, pc}
10013a0c:	219e      	movs	r1, #158	; 0x9e
10013a0e:	1c20      	adds	r0, r4, #0
10013a10:	05c9      	lsls	r1, r1, #23
10013a12:	f000 fc79 	bl	10014308 <__aeabi_fsub>
10013a16:	f000 fe15 	bl	10014644 <__aeabi_f2iz>
10013a1a:	2380      	movs	r3, #128	; 0x80
10013a1c:	061b      	lsls	r3, r3, #24
10013a1e:	469c      	mov	ip, r3
10013a20:	4460      	add	r0, ip
10013a22:	e7f2      	b.n	10013a0a <__aeabi_f2uiz+0x16>

10013a24 <__aeabi_d2uiz>:
10013a24:	b570      	push	{r4, r5, r6, lr}
10013a26:	2200      	movs	r2, #0
10013a28:	4b0c      	ldr	r3, [pc, #48]	; (10013a5c <__aeabi_d2uiz+0x38>)
10013a2a:	0004      	movs	r4, r0
10013a2c:	000d      	movs	r5, r1
10013a2e:	f7ff ff71 	bl	10013914 <__aeabi_dcmpge>
10013a32:	2800      	cmp	r0, #0
10013a34:	d104      	bne.n	10013a40 <__aeabi_d2uiz+0x1c>
10013a36:	0020      	movs	r0, r4
10013a38:	0029      	movs	r1, r5
10013a3a:	f002 fbe9 	bl	10016210 <__aeabi_d2iz>
10013a3e:	bd70      	pop	{r4, r5, r6, pc}
10013a40:	4b06      	ldr	r3, [pc, #24]	; (10013a5c <__aeabi_d2uiz+0x38>)
10013a42:	2200      	movs	r2, #0
10013a44:	0020      	movs	r0, r4
10013a46:	0029      	movs	r1, r5
10013a48:	f002 f86e 	bl	10015b28 <__aeabi_dsub>
10013a4c:	f002 fbe0 	bl	10016210 <__aeabi_d2iz>
10013a50:	2380      	movs	r3, #128	; 0x80
10013a52:	061b      	lsls	r3, r3, #24
10013a54:	469c      	mov	ip, r3
10013a56:	4460      	add	r0, ip
10013a58:	e7f1      	b.n	10013a3e <__aeabi_d2uiz+0x1a>
10013a5a:	46c0      	nop			; (mov r8, r8)
10013a5c:	41e00000 	.word	0x41e00000

10013a60 <__aeabi_fadd>:
10013a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10013a62:	024a      	lsls	r2, r1, #9
10013a64:	0243      	lsls	r3, r0, #9
10013a66:	0044      	lsls	r4, r0, #1
10013a68:	004e      	lsls	r6, r1, #1
10013a6a:	0fc5      	lsrs	r5, r0, #31
10013a6c:	0e24      	lsrs	r4, r4, #24
10013a6e:	0028      	movs	r0, r5
10013a70:	099b      	lsrs	r3, r3, #6
10013a72:	0e36      	lsrs	r6, r6, #24
10013a74:	0fc9      	lsrs	r1, r1, #31
10013a76:	0992      	lsrs	r2, r2, #6
10013a78:	428d      	cmp	r5, r1
10013a7a:	d059      	beq.n	10013b30 <__aeabi_fadd+0xd0>
10013a7c:	1ba0      	subs	r0, r4, r6
10013a7e:	2800      	cmp	r0, #0
10013a80:	dc00      	bgt.n	10013a84 <__aeabi_fadd+0x24>
10013a82:	e08d      	b.n	10013ba0 <__aeabi_fadd+0x140>
10013a84:	2e00      	cmp	r6, #0
10013a86:	d11a      	bne.n	10013abe <__aeabi_fadd+0x5e>
10013a88:	2a00      	cmp	r2, #0
10013a8a:	d000      	beq.n	10013a8e <__aeabi_fadd+0x2e>
10013a8c:	e079      	b.n	10013b82 <__aeabi_fadd+0x122>
10013a8e:	075a      	lsls	r2, r3, #29
10013a90:	d004      	beq.n	10013a9c <__aeabi_fadd+0x3c>
10013a92:	220f      	movs	r2, #15
10013a94:	401a      	ands	r2, r3
10013a96:	2a04      	cmp	r2, #4
10013a98:	d000      	beq.n	10013a9c <__aeabi_fadd+0x3c>
10013a9a:	3304      	adds	r3, #4
10013a9c:	015a      	lsls	r2, r3, #5
10013a9e:	d538      	bpl.n	10013b12 <__aeabi_fadd+0xb2>
10013aa0:	3401      	adds	r4, #1
10013aa2:	2cff      	cmp	r4, #255	; 0xff
10013aa4:	d100      	bne.n	10013aa8 <__aeabi_fadd+0x48>
10013aa6:	e089      	b.n	10013bbc <__aeabi_fadd+0x15c>
10013aa8:	0028      	movs	r0, r5
10013aaa:	019b      	lsls	r3, r3, #6
10013aac:	0a5b      	lsrs	r3, r3, #9
10013aae:	b2e4      	uxtb	r4, r4
10013ab0:	025b      	lsls	r3, r3, #9
10013ab2:	05e4      	lsls	r4, r4, #23
10013ab4:	0a5b      	lsrs	r3, r3, #9
10013ab6:	4323      	orrs	r3, r4
10013ab8:	07c0      	lsls	r0, r0, #31
10013aba:	4318      	orrs	r0, r3
10013abc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10013abe:	2cff      	cmp	r4, #255	; 0xff
10013ac0:	d0e5      	beq.n	10013a8e <__aeabi_fadd+0x2e>
10013ac2:	2180      	movs	r1, #128	; 0x80
10013ac4:	04c9      	lsls	r1, r1, #19
10013ac6:	430a      	orrs	r2, r1
10013ac8:	281b      	cmp	r0, #27
10013aca:	dd00      	ble.n	10013ace <__aeabi_fadd+0x6e>
10013acc:	e089      	b.n	10013be2 <__aeabi_fadd+0x182>
10013ace:	0016      	movs	r6, r2
10013ad0:	2120      	movs	r1, #32
10013ad2:	40c6      	lsrs	r6, r0
10013ad4:	1a08      	subs	r0, r1, r0
10013ad6:	4082      	lsls	r2, r0
10013ad8:	1e51      	subs	r1, r2, #1
10013ada:	418a      	sbcs	r2, r1
10013adc:	4332      	orrs	r2, r6
10013ade:	1a9b      	subs	r3, r3, r2
10013ae0:	015a      	lsls	r2, r3, #5
10013ae2:	d514      	bpl.n	10013b0e <__aeabi_fadd+0xae>
10013ae4:	019b      	lsls	r3, r3, #6
10013ae6:	099e      	lsrs	r6, r3, #6
10013ae8:	0030      	movs	r0, r6
10013aea:	f002 fd21 	bl	10016530 <__clzsi2>
10013aee:	3805      	subs	r0, #5
10013af0:	4086      	lsls	r6, r0
10013af2:	4284      	cmp	r4, r0
10013af4:	dc65      	bgt.n	10013bc2 <__aeabi_fadd+0x162>
10013af6:	1b04      	subs	r4, r0, r4
10013af8:	0033      	movs	r3, r6
10013afa:	2020      	movs	r0, #32
10013afc:	3401      	adds	r4, #1
10013afe:	40e3      	lsrs	r3, r4
10013b00:	1b04      	subs	r4, r0, r4
10013b02:	40a6      	lsls	r6, r4
10013b04:	1e72      	subs	r2, r6, #1
10013b06:	4196      	sbcs	r6, r2
10013b08:	2400      	movs	r4, #0
10013b0a:	4333      	orrs	r3, r6
10013b0c:	e7bf      	b.n	10013a8e <__aeabi_fadd+0x2e>
10013b0e:	075a      	lsls	r2, r3, #29
10013b10:	d1bf      	bne.n	10013a92 <__aeabi_fadd+0x32>
10013b12:	08df      	lsrs	r7, r3, #3
10013b14:	0028      	movs	r0, r5
10013b16:	2cff      	cmp	r4, #255	; 0xff
10013b18:	d12f      	bne.n	10013b7a <__aeabi_fadd+0x11a>
10013b1a:	2f00      	cmp	r7, #0
10013b1c:	d100      	bne.n	10013b20 <__aeabi_fadd+0xc0>
10013b1e:	e087      	b.n	10013c30 <__aeabi_fadd+0x1d0>
10013b20:	2280      	movs	r2, #128	; 0x80
10013b22:	03d2      	lsls	r2, r2, #15
10013b24:	0013      	movs	r3, r2
10013b26:	433b      	orrs	r3, r7
10013b28:	025b      	lsls	r3, r3, #9
10013b2a:	0a5b      	lsrs	r3, r3, #9
10013b2c:	24ff      	movs	r4, #255	; 0xff
10013b2e:	e7bf      	b.n	10013ab0 <__aeabi_fadd+0x50>
10013b30:	1ba1      	subs	r1, r4, r6
10013b32:	2900      	cmp	r1, #0
10013b34:	dd49      	ble.n	10013bca <__aeabi_fadd+0x16a>
10013b36:	2e00      	cmp	r6, #0
10013b38:	d029      	beq.n	10013b8e <__aeabi_fadd+0x12e>
10013b3a:	2cff      	cmp	r4, #255	; 0xff
10013b3c:	d0a7      	beq.n	10013a8e <__aeabi_fadd+0x2e>
10013b3e:	2680      	movs	r6, #128	; 0x80
10013b40:	04f6      	lsls	r6, r6, #19
10013b42:	4332      	orrs	r2, r6
10013b44:	291b      	cmp	r1, #27
10013b46:	dd00      	ble.n	10013b4a <__aeabi_fadd+0xea>
10013b48:	e08d      	b.n	10013c66 <__aeabi_fadd+0x206>
10013b4a:	0017      	movs	r7, r2
10013b4c:	2620      	movs	r6, #32
10013b4e:	40cf      	lsrs	r7, r1
10013b50:	1a71      	subs	r1, r6, r1
10013b52:	408a      	lsls	r2, r1
10013b54:	1e51      	subs	r1, r2, #1
10013b56:	418a      	sbcs	r2, r1
10013b58:	433a      	orrs	r2, r7
10013b5a:	189b      	adds	r3, r3, r2
10013b5c:	015a      	lsls	r2, r3, #5
10013b5e:	d5d6      	bpl.n	10013b0e <__aeabi_fadd+0xae>
10013b60:	3401      	adds	r4, #1
10013b62:	2cff      	cmp	r4, #255	; 0xff
10013b64:	d064      	beq.n	10013c30 <__aeabi_fadd+0x1d0>
10013b66:	2201      	movs	r2, #1
10013b68:	4976      	ldr	r1, [pc, #472]	; (10013d44 <__aeabi_fadd+0x2e4>)
10013b6a:	401a      	ands	r2, r3
10013b6c:	085b      	lsrs	r3, r3, #1
10013b6e:	400b      	ands	r3, r1
10013b70:	4313      	orrs	r3, r2
10013b72:	e78c      	b.n	10013a8e <__aeabi_fadd+0x2e>
10013b74:	1e03      	subs	r3, r0, #0
10013b76:	d1ca      	bne.n	10013b0e <__aeabi_fadd+0xae>
10013b78:	2000      	movs	r0, #0
10013b7a:	027b      	lsls	r3, r7, #9
10013b7c:	0a5b      	lsrs	r3, r3, #9
10013b7e:	b2e4      	uxtb	r4, r4
10013b80:	e796      	b.n	10013ab0 <__aeabi_fadd+0x50>
10013b82:	3801      	subs	r0, #1
10013b84:	2800      	cmp	r0, #0
10013b86:	d0aa      	beq.n	10013ade <__aeabi_fadd+0x7e>
10013b88:	2cff      	cmp	r4, #255	; 0xff
10013b8a:	d19d      	bne.n	10013ac8 <__aeabi_fadd+0x68>
10013b8c:	e77f      	b.n	10013a8e <__aeabi_fadd+0x2e>
10013b8e:	2a00      	cmp	r2, #0
10013b90:	d100      	bne.n	10013b94 <__aeabi_fadd+0x134>
10013b92:	e77c      	b.n	10013a8e <__aeabi_fadd+0x2e>
10013b94:	3901      	subs	r1, #1
10013b96:	2900      	cmp	r1, #0
10013b98:	d0df      	beq.n	10013b5a <__aeabi_fadd+0xfa>
10013b9a:	2cff      	cmp	r4, #255	; 0xff
10013b9c:	d1d2      	bne.n	10013b44 <__aeabi_fadd+0xe4>
10013b9e:	e776      	b.n	10013a8e <__aeabi_fadd+0x2e>
10013ba0:	2800      	cmp	r0, #0
10013ba2:	d120      	bne.n	10013be6 <__aeabi_fadd+0x186>
10013ba4:	1c60      	adds	r0, r4, #1
10013ba6:	b2c0      	uxtb	r0, r0
10013ba8:	2801      	cmp	r0, #1
10013baa:	dd53      	ble.n	10013c54 <__aeabi_fadd+0x1f4>
10013bac:	2780      	movs	r7, #128	; 0x80
10013bae:	1a9e      	subs	r6, r3, r2
10013bb0:	04ff      	lsls	r7, r7, #19
10013bb2:	4037      	ands	r7, r6
10013bb4:	d02f      	beq.n	10013c16 <__aeabi_fadd+0x1b6>
10013bb6:	1ad6      	subs	r6, r2, r3
10013bb8:	000d      	movs	r5, r1
10013bba:	e795      	b.n	10013ae8 <__aeabi_fadd+0x88>
10013bbc:	0028      	movs	r0, r5
10013bbe:	2300      	movs	r3, #0
10013bc0:	e776      	b.n	10013ab0 <__aeabi_fadd+0x50>
10013bc2:	4b61      	ldr	r3, [pc, #388]	; (10013d48 <__aeabi_fadd+0x2e8>)
10013bc4:	1a24      	subs	r4, r4, r0
10013bc6:	4033      	ands	r3, r6
10013bc8:	e761      	b.n	10013a8e <__aeabi_fadd+0x2e>
10013bca:	2900      	cmp	r1, #0
10013bcc:	d14d      	bne.n	10013c6a <__aeabi_fadd+0x20a>
10013bce:	1c61      	adds	r1, r4, #1
10013bd0:	b2ce      	uxtb	r6, r1
10013bd2:	2e01      	cmp	r6, #1
10013bd4:	dd2f      	ble.n	10013c36 <__aeabi_fadd+0x1d6>
10013bd6:	29ff      	cmp	r1, #255	; 0xff
10013bd8:	d02a      	beq.n	10013c30 <__aeabi_fadd+0x1d0>
10013bda:	189b      	adds	r3, r3, r2
10013bdc:	085b      	lsrs	r3, r3, #1
10013bde:	000c      	movs	r4, r1
10013be0:	e755      	b.n	10013a8e <__aeabi_fadd+0x2e>
10013be2:	2201      	movs	r2, #1
10013be4:	e77b      	b.n	10013ade <__aeabi_fadd+0x7e>
10013be6:	2c00      	cmp	r4, #0
10013be8:	d11b      	bne.n	10013c22 <__aeabi_fadd+0x1c2>
10013bea:	2b00      	cmp	r3, #0
10013bec:	d05b      	beq.n	10013ca6 <__aeabi_fadd+0x246>
10013bee:	43c0      	mvns	r0, r0
10013bf0:	2800      	cmp	r0, #0
10013bf2:	d00c      	beq.n	10013c0e <__aeabi_fadd+0x1ae>
10013bf4:	2eff      	cmp	r6, #255	; 0xff
10013bf6:	d07e      	beq.n	10013cf6 <__aeabi_fadd+0x296>
10013bf8:	281b      	cmp	r0, #27
10013bfa:	dd00      	ble.n	10013bfe <__aeabi_fadd+0x19e>
10013bfc:	e092      	b.n	10013d24 <__aeabi_fadd+0x2c4>
10013bfe:	001d      	movs	r5, r3
10013c00:	2420      	movs	r4, #32
10013c02:	40c5      	lsrs	r5, r0
10013c04:	1a20      	subs	r0, r4, r0
10013c06:	4083      	lsls	r3, r0
10013c08:	1e58      	subs	r0, r3, #1
10013c0a:	4183      	sbcs	r3, r0
10013c0c:	432b      	orrs	r3, r5
10013c0e:	1ad3      	subs	r3, r2, r3
10013c10:	0034      	movs	r4, r6
10013c12:	000d      	movs	r5, r1
10013c14:	e764      	b.n	10013ae0 <__aeabi_fadd+0x80>
10013c16:	2e00      	cmp	r6, #0
10013c18:	d000      	beq.n	10013c1c <__aeabi_fadd+0x1bc>
10013c1a:	e765      	b.n	10013ae8 <__aeabi_fadd+0x88>
10013c1c:	2000      	movs	r0, #0
10013c1e:	2400      	movs	r4, #0
10013c20:	e7ab      	b.n	10013b7a <__aeabi_fadd+0x11a>
10013c22:	2eff      	cmp	r6, #255	; 0xff
10013c24:	d067      	beq.n	10013cf6 <__aeabi_fadd+0x296>
10013c26:	2480      	movs	r4, #128	; 0x80
10013c28:	04e4      	lsls	r4, r4, #19
10013c2a:	4240      	negs	r0, r0
10013c2c:	4323      	orrs	r3, r4
10013c2e:	e7e3      	b.n	10013bf8 <__aeabi_fadd+0x198>
10013c30:	24ff      	movs	r4, #255	; 0xff
10013c32:	2300      	movs	r3, #0
10013c34:	e73c      	b.n	10013ab0 <__aeabi_fadd+0x50>
10013c36:	2c00      	cmp	r4, #0
10013c38:	d161      	bne.n	10013cfe <__aeabi_fadd+0x29e>
10013c3a:	2b00      	cmp	r3, #0
10013c3c:	d07e      	beq.n	10013d3c <__aeabi_fadd+0x2dc>
10013c3e:	2a00      	cmp	r2, #0
10013c40:	d100      	bne.n	10013c44 <__aeabi_fadd+0x1e4>
10013c42:	e724      	b.n	10013a8e <__aeabi_fadd+0x2e>
10013c44:	189b      	adds	r3, r3, r2
10013c46:	015a      	lsls	r2, r3, #5
10013c48:	d400      	bmi.n	10013c4c <__aeabi_fadd+0x1ec>
10013c4a:	e760      	b.n	10013b0e <__aeabi_fadd+0xae>
10013c4c:	4a3e      	ldr	r2, [pc, #248]	; (10013d48 <__aeabi_fadd+0x2e8>)
10013c4e:	000c      	movs	r4, r1
10013c50:	4013      	ands	r3, r2
10013c52:	e71c      	b.n	10013a8e <__aeabi_fadd+0x2e>
10013c54:	2c00      	cmp	r4, #0
10013c56:	d11e      	bne.n	10013c96 <__aeabi_fadd+0x236>
10013c58:	2b00      	cmp	r3, #0
10013c5a:	d12f      	bne.n	10013cbc <__aeabi_fadd+0x25c>
10013c5c:	2a00      	cmp	r2, #0
10013c5e:	d066      	beq.n	10013d2e <__aeabi_fadd+0x2ce>
10013c60:	0013      	movs	r3, r2
10013c62:	000d      	movs	r5, r1
10013c64:	e713      	b.n	10013a8e <__aeabi_fadd+0x2e>
10013c66:	2201      	movs	r2, #1
10013c68:	e777      	b.n	10013b5a <__aeabi_fadd+0xfa>
10013c6a:	2c00      	cmp	r4, #0
10013c6c:	d11f      	bne.n	10013cae <__aeabi_fadd+0x24e>
10013c6e:	2b00      	cmp	r3, #0
10013c70:	d05a      	beq.n	10013d28 <__aeabi_fadd+0x2c8>
10013c72:	43c9      	mvns	r1, r1
10013c74:	2900      	cmp	r1, #0
10013c76:	d00b      	beq.n	10013c90 <__aeabi_fadd+0x230>
10013c78:	2eff      	cmp	r6, #255	; 0xff
10013c7a:	d050      	beq.n	10013d1e <__aeabi_fadd+0x2be>
10013c7c:	291b      	cmp	r1, #27
10013c7e:	dc5f      	bgt.n	10013d40 <__aeabi_fadd+0x2e0>
10013c80:	001f      	movs	r7, r3
10013c82:	2420      	movs	r4, #32
10013c84:	40cf      	lsrs	r7, r1
10013c86:	1a61      	subs	r1, r4, r1
10013c88:	408b      	lsls	r3, r1
10013c8a:	1e59      	subs	r1, r3, #1
10013c8c:	418b      	sbcs	r3, r1
10013c8e:	433b      	orrs	r3, r7
10013c90:	189b      	adds	r3, r3, r2
10013c92:	0034      	movs	r4, r6
10013c94:	e762      	b.n	10013b5c <__aeabi_fadd+0xfc>
10013c96:	2b00      	cmp	r3, #0
10013c98:	d11c      	bne.n	10013cd4 <__aeabi_fadd+0x274>
10013c9a:	2a00      	cmp	r2, #0
10013c9c:	d04a      	beq.n	10013d34 <__aeabi_fadd+0x2d4>
10013c9e:	0013      	movs	r3, r2
10013ca0:	000d      	movs	r5, r1
10013ca2:	24ff      	movs	r4, #255	; 0xff
10013ca4:	e6f3      	b.n	10013a8e <__aeabi_fadd+0x2e>
10013ca6:	0013      	movs	r3, r2
10013ca8:	0034      	movs	r4, r6
10013caa:	000d      	movs	r5, r1
10013cac:	e6ef      	b.n	10013a8e <__aeabi_fadd+0x2e>
10013cae:	2eff      	cmp	r6, #255	; 0xff
10013cb0:	d035      	beq.n	10013d1e <__aeabi_fadd+0x2be>
10013cb2:	2480      	movs	r4, #128	; 0x80
10013cb4:	04e4      	lsls	r4, r4, #19
10013cb6:	4249      	negs	r1, r1
10013cb8:	4323      	orrs	r3, r4
10013cba:	e7df      	b.n	10013c7c <__aeabi_fadd+0x21c>
10013cbc:	2a00      	cmp	r2, #0
10013cbe:	d100      	bne.n	10013cc2 <__aeabi_fadd+0x262>
10013cc0:	e6e5      	b.n	10013a8e <__aeabi_fadd+0x2e>
10013cc2:	2780      	movs	r7, #128	; 0x80
10013cc4:	1a98      	subs	r0, r3, r2
10013cc6:	04ff      	lsls	r7, r7, #19
10013cc8:	4007      	ands	r7, r0
10013cca:	d100      	bne.n	10013cce <__aeabi_fadd+0x26e>
10013ccc:	e752      	b.n	10013b74 <__aeabi_fadd+0x114>
10013cce:	1ad3      	subs	r3, r2, r3
10013cd0:	000d      	movs	r5, r1
10013cd2:	e6dc      	b.n	10013a8e <__aeabi_fadd+0x2e>
10013cd4:	24ff      	movs	r4, #255	; 0xff
10013cd6:	2a00      	cmp	r2, #0
10013cd8:	d100      	bne.n	10013cdc <__aeabi_fadd+0x27c>
10013cda:	e6d8      	b.n	10013a8e <__aeabi_fadd+0x2e>
10013cdc:	2080      	movs	r0, #128	; 0x80
10013cde:	08db      	lsrs	r3, r3, #3
10013ce0:	03c0      	lsls	r0, r0, #15
10013ce2:	4203      	tst	r3, r0
10013ce4:	d004      	beq.n	10013cf0 <__aeabi_fadd+0x290>
10013ce6:	08d2      	lsrs	r2, r2, #3
10013ce8:	4202      	tst	r2, r0
10013cea:	d101      	bne.n	10013cf0 <__aeabi_fadd+0x290>
10013cec:	0013      	movs	r3, r2
10013cee:	000d      	movs	r5, r1
10013cf0:	00db      	lsls	r3, r3, #3
10013cf2:	24ff      	movs	r4, #255	; 0xff
10013cf4:	e6cb      	b.n	10013a8e <__aeabi_fadd+0x2e>
10013cf6:	0013      	movs	r3, r2
10013cf8:	24ff      	movs	r4, #255	; 0xff
10013cfa:	000d      	movs	r5, r1
10013cfc:	e6c7      	b.n	10013a8e <__aeabi_fadd+0x2e>
10013cfe:	2b00      	cmp	r3, #0
10013d00:	d00d      	beq.n	10013d1e <__aeabi_fadd+0x2be>
10013d02:	24ff      	movs	r4, #255	; 0xff
10013d04:	2a00      	cmp	r2, #0
10013d06:	d100      	bne.n	10013d0a <__aeabi_fadd+0x2aa>
10013d08:	e6c1      	b.n	10013a8e <__aeabi_fadd+0x2e>
10013d0a:	2180      	movs	r1, #128	; 0x80
10013d0c:	08db      	lsrs	r3, r3, #3
10013d0e:	03c9      	lsls	r1, r1, #15
10013d10:	420b      	tst	r3, r1
10013d12:	d0ed      	beq.n	10013cf0 <__aeabi_fadd+0x290>
10013d14:	08d2      	lsrs	r2, r2, #3
10013d16:	420a      	tst	r2, r1
10013d18:	d1ea      	bne.n	10013cf0 <__aeabi_fadd+0x290>
10013d1a:	0013      	movs	r3, r2
10013d1c:	e7e8      	b.n	10013cf0 <__aeabi_fadd+0x290>
10013d1e:	0013      	movs	r3, r2
10013d20:	24ff      	movs	r4, #255	; 0xff
10013d22:	e6b4      	b.n	10013a8e <__aeabi_fadd+0x2e>
10013d24:	2301      	movs	r3, #1
10013d26:	e772      	b.n	10013c0e <__aeabi_fadd+0x1ae>
10013d28:	0013      	movs	r3, r2
10013d2a:	0034      	movs	r4, r6
10013d2c:	e6af      	b.n	10013a8e <__aeabi_fadd+0x2e>
10013d2e:	2700      	movs	r7, #0
10013d30:	2000      	movs	r0, #0
10013d32:	e722      	b.n	10013b7a <__aeabi_fadd+0x11a>
10013d34:	2780      	movs	r7, #128	; 0x80
10013d36:	2000      	movs	r0, #0
10013d38:	03ff      	lsls	r7, r7, #15
10013d3a:	e6f1      	b.n	10013b20 <__aeabi_fadd+0xc0>
10013d3c:	0013      	movs	r3, r2
10013d3e:	e6a6      	b.n	10013a8e <__aeabi_fadd+0x2e>
10013d40:	2301      	movs	r3, #1
10013d42:	e7a5      	b.n	10013c90 <__aeabi_fadd+0x230>
10013d44:	7dffffff 	.word	0x7dffffff
10013d48:	fbffffff 	.word	0xfbffffff

10013d4c <__aeabi_fdiv>:
10013d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
10013d4e:	4656      	mov	r6, sl
10013d50:	4644      	mov	r4, r8
10013d52:	465f      	mov	r7, fp
10013d54:	464d      	mov	r5, r9
10013d56:	b4f0      	push	{r4, r5, r6, r7}
10013d58:	0244      	lsls	r4, r0, #9
10013d5a:	0046      	lsls	r6, r0, #1
10013d5c:	0fc7      	lsrs	r7, r0, #31
10013d5e:	b083      	sub	sp, #12
10013d60:	4688      	mov	r8, r1
10013d62:	0a65      	lsrs	r5, r4, #9
10013d64:	0e36      	lsrs	r6, r6, #24
10013d66:	46ba      	mov	sl, r7
10013d68:	d03d      	beq.n	10013de6 <__aeabi_fdiv+0x9a>
10013d6a:	2eff      	cmp	r6, #255	; 0xff
10013d6c:	d022      	beq.n	10013db4 <__aeabi_fdiv+0x68>
10013d6e:	2300      	movs	r3, #0
10013d70:	00ec      	lsls	r4, r5, #3
10013d72:	2580      	movs	r5, #128	; 0x80
10013d74:	4699      	mov	r9, r3
10013d76:	469b      	mov	fp, r3
10013d78:	04ed      	lsls	r5, r5, #19
10013d7a:	4325      	orrs	r5, r4
10013d7c:	3e7f      	subs	r6, #127	; 0x7f
10013d7e:	4643      	mov	r3, r8
10013d80:	025c      	lsls	r4, r3, #9
10013d82:	0058      	lsls	r0, r3, #1
10013d84:	0fdb      	lsrs	r3, r3, #31
10013d86:	0a64      	lsrs	r4, r4, #9
10013d88:	0e00      	lsrs	r0, r0, #24
10013d8a:	4698      	mov	r8, r3
10013d8c:	d036      	beq.n	10013dfc <__aeabi_fdiv+0xb0>
10013d8e:	28ff      	cmp	r0, #255	; 0xff
10013d90:	d030      	beq.n	10013df4 <__aeabi_fdiv+0xa8>
10013d92:	2380      	movs	r3, #128	; 0x80
10013d94:	2100      	movs	r1, #0
10013d96:	00e4      	lsls	r4, r4, #3
10013d98:	04db      	lsls	r3, r3, #19
10013d9a:	431c      	orrs	r4, r3
10013d9c:	387f      	subs	r0, #127	; 0x7f
10013d9e:	1a30      	subs	r0, r6, r0
10013da0:	9001      	str	r0, [sp, #4]
10013da2:	4648      	mov	r0, r9
10013da4:	4642      	mov	r2, r8
10013da6:	4308      	orrs	r0, r1
10013da8:	4e72      	ldr	r6, [pc, #456]	; (10013f74 <__aeabi_fdiv+0x228>)
10013daa:	0080      	lsls	r0, r0, #2
10013dac:	5830      	ldr	r0, [r6, r0]
10013dae:	407a      	eors	r2, r7
10013db0:	0013      	movs	r3, r2
10013db2:	4687      	mov	pc, r0
10013db4:	2d00      	cmp	r5, #0
10013db6:	d144      	bne.n	10013e42 <__aeabi_fdiv+0xf6>
10013db8:	2308      	movs	r3, #8
10013dba:	4699      	mov	r9, r3
10013dbc:	3b06      	subs	r3, #6
10013dbe:	469b      	mov	fp, r3
10013dc0:	e7dd      	b.n	10013d7e <__aeabi_fdiv+0x32>
10013dc2:	2201      	movs	r2, #1
10013dc4:	20ff      	movs	r0, #255	; 0xff
10013dc6:	2400      	movs	r4, #0
10013dc8:	401a      	ands	r2, r3
10013dca:	0264      	lsls	r4, r4, #9
10013dcc:	05c3      	lsls	r3, r0, #23
10013dce:	0a64      	lsrs	r4, r4, #9
10013dd0:	07d2      	lsls	r2, r2, #31
10013dd2:	431c      	orrs	r4, r3
10013dd4:	4314      	orrs	r4, r2
10013dd6:	0020      	movs	r0, r4
10013dd8:	b003      	add	sp, #12
10013dda:	bc3c      	pop	{r2, r3, r4, r5}
10013ddc:	4690      	mov	r8, r2
10013dde:	4699      	mov	r9, r3
10013de0:	46a2      	mov	sl, r4
10013de2:	46ab      	mov	fp, r5
10013de4:	bdf0      	pop	{r4, r5, r6, r7, pc}
10013de6:	2d00      	cmp	r5, #0
10013de8:	d120      	bne.n	10013e2c <__aeabi_fdiv+0xe0>
10013dea:	2304      	movs	r3, #4
10013dec:	4699      	mov	r9, r3
10013dee:	3b03      	subs	r3, #3
10013df0:	469b      	mov	fp, r3
10013df2:	e7c4      	b.n	10013d7e <__aeabi_fdiv+0x32>
10013df4:	2c00      	cmp	r4, #0
10013df6:	d117      	bne.n	10013e28 <__aeabi_fdiv+0xdc>
10013df8:	2102      	movs	r1, #2
10013dfa:	e002      	b.n	10013e02 <__aeabi_fdiv+0xb6>
10013dfc:	2c00      	cmp	r4, #0
10013dfe:	d10a      	bne.n	10013e16 <__aeabi_fdiv+0xca>
10013e00:	2101      	movs	r1, #1
10013e02:	1a32      	subs	r2, r6, r0
10013e04:	9201      	str	r2, [sp, #4]
10013e06:	464a      	mov	r2, r9
10013e08:	4643      	mov	r3, r8
10013e0a:	430a      	orrs	r2, r1
10013e0c:	485a      	ldr	r0, [pc, #360]	; (10013f78 <__aeabi_fdiv+0x22c>)
10013e0e:	0092      	lsls	r2, r2, #2
10013e10:	5882      	ldr	r2, [r0, r2]
10013e12:	407b      	eors	r3, r7
10013e14:	4697      	mov	pc, r2
10013e16:	0020      	movs	r0, r4
10013e18:	f002 fb8a 	bl	10016530 <__clzsi2>
10013e1c:	1f43      	subs	r3, r0, #5
10013e1e:	3076      	adds	r0, #118	; 0x76
10013e20:	409c      	lsls	r4, r3
10013e22:	4240      	negs	r0, r0
10013e24:	2100      	movs	r1, #0
10013e26:	e7ba      	b.n	10013d9e <__aeabi_fdiv+0x52>
10013e28:	2103      	movs	r1, #3
10013e2a:	e7b8      	b.n	10013d9e <__aeabi_fdiv+0x52>
10013e2c:	0028      	movs	r0, r5
10013e2e:	f002 fb7f 	bl	10016530 <__clzsi2>
10013e32:	1f43      	subs	r3, r0, #5
10013e34:	409d      	lsls	r5, r3
10013e36:	2300      	movs	r3, #0
10013e38:	3076      	adds	r0, #118	; 0x76
10013e3a:	4246      	negs	r6, r0
10013e3c:	4699      	mov	r9, r3
10013e3e:	469b      	mov	fp, r3
10013e40:	e79d      	b.n	10013d7e <__aeabi_fdiv+0x32>
10013e42:	230c      	movs	r3, #12
10013e44:	4699      	mov	r9, r3
10013e46:	3b09      	subs	r3, #9
10013e48:	469b      	mov	fp, r3
10013e4a:	e798      	b.n	10013d7e <__aeabi_fdiv+0x32>
10013e4c:	2480      	movs	r4, #128	; 0x80
10013e4e:	2200      	movs	r2, #0
10013e50:	03e4      	lsls	r4, r4, #15
10013e52:	20ff      	movs	r0, #255	; 0xff
10013e54:	e7b9      	b.n	10013dca <__aeabi_fdiv+0x7e>
10013e56:	2400      	movs	r4, #0
10013e58:	46c2      	mov	sl, r8
10013e5a:	468b      	mov	fp, r1
10013e5c:	465a      	mov	r2, fp
10013e5e:	4653      	mov	r3, sl
10013e60:	2a02      	cmp	r2, #2
10013e62:	d0ae      	beq.n	10013dc2 <__aeabi_fdiv+0x76>
10013e64:	2a03      	cmp	r2, #3
10013e66:	d07d      	beq.n	10013f64 <__aeabi_fdiv+0x218>
10013e68:	2a01      	cmp	r2, #1
10013e6a:	d131      	bne.n	10013ed0 <__aeabi_fdiv+0x184>
10013e6c:	2201      	movs	r2, #1
10013e6e:	2000      	movs	r0, #0
10013e70:	401a      	ands	r2, r3
10013e72:	2400      	movs	r4, #0
10013e74:	e7a9      	b.n	10013dca <__aeabi_fdiv+0x7e>
10013e76:	2201      	movs	r2, #1
10013e78:	1a10      	subs	r0, r2, r0
10013e7a:	281b      	cmp	r0, #27
10013e7c:	dd56      	ble.n	10013f2c <__aeabi_fdiv+0x1e0>
10013e7e:	401a      	ands	r2, r3
10013e80:	2000      	movs	r0, #0
10013e82:	2400      	movs	r4, #0
10013e84:	e7a1      	b.n	10013dca <__aeabi_fdiv+0x7e>
10013e86:	2380      	movs	r3, #128	; 0x80
10013e88:	03db      	lsls	r3, r3, #15
10013e8a:	421d      	tst	r5, r3
10013e8c:	d14b      	bne.n	10013f26 <__aeabi_fdiv+0x1da>
10013e8e:	2380      	movs	r3, #128	; 0x80
10013e90:	03db      	lsls	r3, r3, #15
10013e92:	432b      	orrs	r3, r5
10013e94:	025c      	lsls	r4, r3, #9
10013e96:	0a64      	lsrs	r4, r4, #9
10013e98:	003a      	movs	r2, r7
10013e9a:	20ff      	movs	r0, #255	; 0xff
10013e9c:	e795      	b.n	10013dca <__aeabi_fdiv+0x7e>
10013e9e:	016d      	lsls	r5, r5, #5
10013ea0:	0160      	lsls	r0, r4, #5
10013ea2:	4285      	cmp	r5, r0
10013ea4:	d230      	bcs.n	10013f08 <__aeabi_fdiv+0x1bc>
10013ea6:	9a01      	ldr	r2, [sp, #4]
10013ea8:	2400      	movs	r4, #0
10013eaa:	3a01      	subs	r2, #1
10013eac:	9201      	str	r2, [sp, #4]
10013eae:	221b      	movs	r2, #27
10013eb0:	2701      	movs	r7, #1
10013eb2:	0029      	movs	r1, r5
10013eb4:	0064      	lsls	r4, r4, #1
10013eb6:	006d      	lsls	r5, r5, #1
10013eb8:	2900      	cmp	r1, #0
10013eba:	db01      	blt.n	10013ec0 <__aeabi_fdiv+0x174>
10013ebc:	42a8      	cmp	r0, r5
10013ebe:	d801      	bhi.n	10013ec4 <__aeabi_fdiv+0x178>
10013ec0:	1a2d      	subs	r5, r5, r0
10013ec2:	433c      	orrs	r4, r7
10013ec4:	3a01      	subs	r2, #1
10013ec6:	2a00      	cmp	r2, #0
10013ec8:	d1f3      	bne.n	10013eb2 <__aeabi_fdiv+0x166>
10013eca:	1e6a      	subs	r2, r5, #1
10013ecc:	4195      	sbcs	r5, r2
10013ece:	432c      	orrs	r4, r5
10013ed0:	9801      	ldr	r0, [sp, #4]
10013ed2:	307f      	adds	r0, #127	; 0x7f
10013ed4:	2800      	cmp	r0, #0
10013ed6:	ddce      	ble.n	10013e76 <__aeabi_fdiv+0x12a>
10013ed8:	0762      	lsls	r2, r4, #29
10013eda:	d004      	beq.n	10013ee6 <__aeabi_fdiv+0x19a>
10013edc:	220f      	movs	r2, #15
10013ede:	4022      	ands	r2, r4
10013ee0:	2a04      	cmp	r2, #4
10013ee2:	d000      	beq.n	10013ee6 <__aeabi_fdiv+0x19a>
10013ee4:	3404      	adds	r4, #4
10013ee6:	0122      	lsls	r2, r4, #4
10013ee8:	d503      	bpl.n	10013ef2 <__aeabi_fdiv+0x1a6>
10013eea:	4a24      	ldr	r2, [pc, #144]	; (10013f7c <__aeabi_fdiv+0x230>)
10013eec:	9801      	ldr	r0, [sp, #4]
10013eee:	4014      	ands	r4, r2
10013ef0:	3080      	adds	r0, #128	; 0x80
10013ef2:	28fe      	cmp	r0, #254	; 0xfe
10013ef4:	dd00      	ble.n	10013ef8 <__aeabi_fdiv+0x1ac>
10013ef6:	e764      	b.n	10013dc2 <__aeabi_fdiv+0x76>
10013ef8:	2201      	movs	r2, #1
10013efa:	01a4      	lsls	r4, r4, #6
10013efc:	0a64      	lsrs	r4, r4, #9
10013efe:	b2c0      	uxtb	r0, r0
10013f00:	401a      	ands	r2, r3
10013f02:	e762      	b.n	10013dca <__aeabi_fdiv+0x7e>
10013f04:	002c      	movs	r4, r5
10013f06:	e7a9      	b.n	10013e5c <__aeabi_fdiv+0x110>
10013f08:	1a2d      	subs	r5, r5, r0
10013f0a:	221a      	movs	r2, #26
10013f0c:	2401      	movs	r4, #1
10013f0e:	e7cf      	b.n	10013eb0 <__aeabi_fdiv+0x164>
10013f10:	026b      	lsls	r3, r5, #9
10013f12:	d5bc      	bpl.n	10013e8e <__aeabi_fdiv+0x142>
10013f14:	2400      	movs	r4, #0
10013f16:	2380      	movs	r3, #128	; 0x80
10013f18:	03db      	lsls	r3, r3, #15
10013f1a:	431c      	orrs	r4, r3
10013f1c:	0264      	lsls	r4, r4, #9
10013f1e:	0a64      	lsrs	r4, r4, #9
10013f20:	4642      	mov	r2, r8
10013f22:	20ff      	movs	r0, #255	; 0xff
10013f24:	e751      	b.n	10013dca <__aeabi_fdiv+0x7e>
10013f26:	421c      	tst	r4, r3
10013f28:	d1b3      	bne.n	10013e92 <__aeabi_fdiv+0x146>
10013f2a:	e7f4      	b.n	10013f16 <__aeabi_fdiv+0x1ca>
10013f2c:	0021      	movs	r1, r4
10013f2e:	2220      	movs	r2, #32
10013f30:	40c1      	lsrs	r1, r0
10013f32:	1a10      	subs	r0, r2, r0
10013f34:	4084      	lsls	r4, r0
10013f36:	1e62      	subs	r2, r4, #1
10013f38:	4194      	sbcs	r4, r2
10013f3a:	430c      	orrs	r4, r1
10013f3c:	0762      	lsls	r2, r4, #29
10013f3e:	d004      	beq.n	10013f4a <__aeabi_fdiv+0x1fe>
10013f40:	220f      	movs	r2, #15
10013f42:	4022      	ands	r2, r4
10013f44:	2a04      	cmp	r2, #4
10013f46:	d000      	beq.n	10013f4a <__aeabi_fdiv+0x1fe>
10013f48:	3404      	adds	r4, #4
10013f4a:	0162      	lsls	r2, r4, #5
10013f4c:	d504      	bpl.n	10013f58 <__aeabi_fdiv+0x20c>
10013f4e:	2201      	movs	r2, #1
10013f50:	2001      	movs	r0, #1
10013f52:	401a      	ands	r2, r3
10013f54:	2400      	movs	r4, #0
10013f56:	e738      	b.n	10013dca <__aeabi_fdiv+0x7e>
10013f58:	2201      	movs	r2, #1
10013f5a:	01a4      	lsls	r4, r4, #6
10013f5c:	0a64      	lsrs	r4, r4, #9
10013f5e:	401a      	ands	r2, r3
10013f60:	2000      	movs	r0, #0
10013f62:	e732      	b.n	10013dca <__aeabi_fdiv+0x7e>
10013f64:	2380      	movs	r3, #128	; 0x80
10013f66:	03db      	lsls	r3, r3, #15
10013f68:	431c      	orrs	r4, r3
10013f6a:	0264      	lsls	r4, r4, #9
10013f6c:	0a64      	lsrs	r4, r4, #9
10013f6e:	4652      	mov	r2, sl
10013f70:	20ff      	movs	r0, #255	; 0xff
10013f72:	e72a      	b.n	10013dca <__aeabi_fdiv+0x7e>
10013f74:	100186d8 	.word	0x100186d8
10013f78:	10018718 	.word	0x10018718
10013f7c:	f7ffffff 	.word	0xf7ffffff

10013f80 <__eqsf2>:
10013f80:	0243      	lsls	r3, r0, #9
10013f82:	b570      	push	{r4, r5, r6, lr}
10013f84:	0042      	lsls	r2, r0, #1
10013f86:	004c      	lsls	r4, r1, #1
10013f88:	0a5d      	lsrs	r5, r3, #9
10013f8a:	0fc3      	lsrs	r3, r0, #31
10013f8c:	0248      	lsls	r0, r1, #9
10013f8e:	0e12      	lsrs	r2, r2, #24
10013f90:	0a46      	lsrs	r6, r0, #9
10013f92:	0e24      	lsrs	r4, r4, #24
10013f94:	0fc9      	lsrs	r1, r1, #31
10013f96:	2aff      	cmp	r2, #255	; 0xff
10013f98:	d00f      	beq.n	10013fba <__eqsf2+0x3a>
10013f9a:	2cff      	cmp	r4, #255	; 0xff
10013f9c:	d011      	beq.n	10013fc2 <__eqsf2+0x42>
10013f9e:	2001      	movs	r0, #1
10013fa0:	42a2      	cmp	r2, r4
10013fa2:	d000      	beq.n	10013fa6 <__eqsf2+0x26>
10013fa4:	bd70      	pop	{r4, r5, r6, pc}
10013fa6:	42b5      	cmp	r5, r6
10013fa8:	d1fc      	bne.n	10013fa4 <__eqsf2+0x24>
10013faa:	428b      	cmp	r3, r1
10013fac:	d00d      	beq.n	10013fca <__eqsf2+0x4a>
10013fae:	2a00      	cmp	r2, #0
10013fb0:	d1f8      	bne.n	10013fa4 <__eqsf2+0x24>
10013fb2:	0028      	movs	r0, r5
10013fb4:	1e43      	subs	r3, r0, #1
10013fb6:	4198      	sbcs	r0, r3
10013fb8:	e7f4      	b.n	10013fa4 <__eqsf2+0x24>
10013fba:	2001      	movs	r0, #1
10013fbc:	2d00      	cmp	r5, #0
10013fbe:	d1f1      	bne.n	10013fa4 <__eqsf2+0x24>
10013fc0:	e7eb      	b.n	10013f9a <__eqsf2+0x1a>
10013fc2:	2001      	movs	r0, #1
10013fc4:	2e00      	cmp	r6, #0
10013fc6:	d1ed      	bne.n	10013fa4 <__eqsf2+0x24>
10013fc8:	e7e9      	b.n	10013f9e <__eqsf2+0x1e>
10013fca:	2000      	movs	r0, #0
10013fcc:	e7ea      	b.n	10013fa4 <__eqsf2+0x24>
10013fce:	46c0      	nop			; (mov r8, r8)

10013fd0 <__gesf2>:
10013fd0:	0243      	lsls	r3, r0, #9
10013fd2:	b5f0      	push	{r4, r5, r6, r7, lr}
10013fd4:	0042      	lsls	r2, r0, #1
10013fd6:	0a5d      	lsrs	r5, r3, #9
10013fd8:	0fc3      	lsrs	r3, r0, #31
10013fda:	0248      	lsls	r0, r1, #9
10013fdc:	0a44      	lsrs	r4, r0, #9
10013fde:	0048      	lsls	r0, r1, #1
10013fe0:	0e12      	lsrs	r2, r2, #24
10013fe2:	0e00      	lsrs	r0, r0, #24
10013fe4:	0fc9      	lsrs	r1, r1, #31
10013fe6:	2aff      	cmp	r2, #255	; 0xff
10013fe8:	d01f      	beq.n	1001402a <__gesf2+0x5a>
10013fea:	28ff      	cmp	r0, #255	; 0xff
10013fec:	d022      	beq.n	10014034 <__gesf2+0x64>
10013fee:	2a00      	cmp	r2, #0
10013ff0:	d109      	bne.n	10014006 <__gesf2+0x36>
10013ff2:	426e      	negs	r6, r5
10013ff4:	416e      	adcs	r6, r5
10013ff6:	2800      	cmp	r0, #0
10013ff8:	d10f      	bne.n	1001401a <__gesf2+0x4a>
10013ffa:	2c00      	cmp	r4, #0
10013ffc:	d10d      	bne.n	1001401a <__gesf2+0x4a>
10013ffe:	2000      	movs	r0, #0
10014000:	2d00      	cmp	r5, #0
10014002:	d009      	beq.n	10014018 <__gesf2+0x48>
10014004:	e005      	b.n	10014012 <__gesf2+0x42>
10014006:	2800      	cmp	r0, #0
10014008:	d101      	bne.n	1001400e <__gesf2+0x3e>
1001400a:	2c00      	cmp	r4, #0
1001400c:	d001      	beq.n	10014012 <__gesf2+0x42>
1001400e:	428b      	cmp	r3, r1
10014010:	d013      	beq.n	1001403a <__gesf2+0x6a>
10014012:	4258      	negs	r0, r3
10014014:	2301      	movs	r3, #1
10014016:	4318      	orrs	r0, r3
10014018:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001401a:	2e00      	cmp	r6, #0
1001401c:	d0f7      	beq.n	1001400e <__gesf2+0x3e>
1001401e:	4248      	negs	r0, r1
10014020:	4141      	adcs	r1, r0
10014022:	2001      	movs	r0, #1
10014024:	4249      	negs	r1, r1
10014026:	4308      	orrs	r0, r1
10014028:	e7f6      	b.n	10014018 <__gesf2+0x48>
1001402a:	2d00      	cmp	r5, #0
1001402c:	d0dd      	beq.n	10013fea <__gesf2+0x1a>
1001402e:	2002      	movs	r0, #2
10014030:	4240      	negs	r0, r0
10014032:	e7f1      	b.n	10014018 <__gesf2+0x48>
10014034:	2c00      	cmp	r4, #0
10014036:	d0da      	beq.n	10013fee <__gesf2+0x1e>
10014038:	e7f9      	b.n	1001402e <__gesf2+0x5e>
1001403a:	4282      	cmp	r2, r0
1001403c:	dce9      	bgt.n	10014012 <__gesf2+0x42>
1001403e:	db04      	blt.n	1001404a <__gesf2+0x7a>
10014040:	42a5      	cmp	r5, r4
10014042:	d8e6      	bhi.n	10014012 <__gesf2+0x42>
10014044:	2000      	movs	r0, #0
10014046:	42a5      	cmp	r5, r4
10014048:	d2e6      	bcs.n	10014018 <__gesf2+0x48>
1001404a:	4258      	negs	r0, r3
1001404c:	4143      	adcs	r3, r0
1001404e:	2001      	movs	r0, #1
10014050:	425b      	negs	r3, r3
10014052:	4318      	orrs	r0, r3
10014054:	e7e0      	b.n	10014018 <__gesf2+0x48>
10014056:	46c0      	nop			; (mov r8, r8)

10014058 <__lesf2>:
10014058:	0243      	lsls	r3, r0, #9
1001405a:	b5f0      	push	{r4, r5, r6, r7, lr}
1001405c:	0042      	lsls	r2, r0, #1
1001405e:	004c      	lsls	r4, r1, #1
10014060:	0a5e      	lsrs	r6, r3, #9
10014062:	0fc3      	lsrs	r3, r0, #31
10014064:	0248      	lsls	r0, r1, #9
10014066:	0e12      	lsrs	r2, r2, #24
10014068:	0a45      	lsrs	r5, r0, #9
1001406a:	0e24      	lsrs	r4, r4, #24
1001406c:	0fc9      	lsrs	r1, r1, #31
1001406e:	2aff      	cmp	r2, #255	; 0xff
10014070:	d017      	beq.n	100140a2 <__lesf2+0x4a>
10014072:	2cff      	cmp	r4, #255	; 0xff
10014074:	d019      	beq.n	100140aa <__lesf2+0x52>
10014076:	2a00      	cmp	r2, #0
10014078:	d10b      	bne.n	10014092 <__lesf2+0x3a>
1001407a:	4270      	negs	r0, r6
1001407c:	4170      	adcs	r0, r6
1001407e:	2c00      	cmp	r4, #0
10014080:	d017      	beq.n	100140b2 <__lesf2+0x5a>
10014082:	2800      	cmp	r0, #0
10014084:	d007      	beq.n	10014096 <__lesf2+0x3e>
10014086:	4248      	negs	r0, r1
10014088:	4141      	adcs	r1, r0
1001408a:	2001      	movs	r0, #1
1001408c:	4249      	negs	r1, r1
1001408e:	4308      	orrs	r0, r1
10014090:	bdf0      	pop	{r4, r5, r6, r7, pc}
10014092:	2c00      	cmp	r4, #0
10014094:	d013      	beq.n	100140be <__lesf2+0x66>
10014096:	428b      	cmp	r3, r1
10014098:	d014      	beq.n	100140c4 <__lesf2+0x6c>
1001409a:	4258      	negs	r0, r3
1001409c:	2301      	movs	r3, #1
1001409e:	4318      	orrs	r0, r3
100140a0:	e7f6      	b.n	10014090 <__lesf2+0x38>
100140a2:	2002      	movs	r0, #2
100140a4:	2e00      	cmp	r6, #0
100140a6:	d1f3      	bne.n	10014090 <__lesf2+0x38>
100140a8:	e7e3      	b.n	10014072 <__lesf2+0x1a>
100140aa:	2002      	movs	r0, #2
100140ac:	2d00      	cmp	r5, #0
100140ae:	d1ef      	bne.n	10014090 <__lesf2+0x38>
100140b0:	e7e1      	b.n	10014076 <__lesf2+0x1e>
100140b2:	2d00      	cmp	r5, #0
100140b4:	d1e5      	bne.n	10014082 <__lesf2+0x2a>
100140b6:	2000      	movs	r0, #0
100140b8:	2e00      	cmp	r6, #0
100140ba:	d0e9      	beq.n	10014090 <__lesf2+0x38>
100140bc:	e7ed      	b.n	1001409a <__lesf2+0x42>
100140be:	2d00      	cmp	r5, #0
100140c0:	d1e9      	bne.n	10014096 <__lesf2+0x3e>
100140c2:	e7ea      	b.n	1001409a <__lesf2+0x42>
100140c4:	42a2      	cmp	r2, r4
100140c6:	dce8      	bgt.n	1001409a <__lesf2+0x42>
100140c8:	db04      	blt.n	100140d4 <__lesf2+0x7c>
100140ca:	42ae      	cmp	r6, r5
100140cc:	d8e5      	bhi.n	1001409a <__lesf2+0x42>
100140ce:	2000      	movs	r0, #0
100140d0:	42ae      	cmp	r6, r5
100140d2:	d2dd      	bcs.n	10014090 <__lesf2+0x38>
100140d4:	4258      	negs	r0, r3
100140d6:	4143      	adcs	r3, r0
100140d8:	2001      	movs	r0, #1
100140da:	425b      	negs	r3, r3
100140dc:	4318      	orrs	r0, r3
100140de:	e7d7      	b.n	10014090 <__lesf2+0x38>

100140e0 <__aeabi_fmul>:
100140e0:	b5f0      	push	{r4, r5, r6, r7, lr}
100140e2:	4657      	mov	r7, sl
100140e4:	464e      	mov	r6, r9
100140e6:	4645      	mov	r5, r8
100140e8:	0043      	lsls	r3, r0, #1
100140ea:	b4e0      	push	{r5, r6, r7}
100140ec:	0246      	lsls	r6, r0, #9
100140ee:	4688      	mov	r8, r1
100140f0:	0a76      	lsrs	r6, r6, #9
100140f2:	0e1f      	lsrs	r7, r3, #24
100140f4:	0fc4      	lsrs	r4, r0, #31
100140f6:	2f00      	cmp	r7, #0
100140f8:	d047      	beq.n	1001418a <__aeabi_fmul+0xaa>
100140fa:	2fff      	cmp	r7, #255	; 0xff
100140fc:	d025      	beq.n	1001414a <__aeabi_fmul+0x6a>
100140fe:	2300      	movs	r3, #0
10014100:	2580      	movs	r5, #128	; 0x80
10014102:	469a      	mov	sl, r3
10014104:	4699      	mov	r9, r3
10014106:	00f6      	lsls	r6, r6, #3
10014108:	04ed      	lsls	r5, r5, #19
1001410a:	432e      	orrs	r6, r5
1001410c:	3f7f      	subs	r7, #127	; 0x7f
1001410e:	4643      	mov	r3, r8
10014110:	4642      	mov	r2, r8
10014112:	025d      	lsls	r5, r3, #9
10014114:	0fd2      	lsrs	r2, r2, #31
10014116:	005b      	lsls	r3, r3, #1
10014118:	0a6d      	lsrs	r5, r5, #9
1001411a:	0e1b      	lsrs	r3, r3, #24
1001411c:	4690      	mov	r8, r2
1001411e:	d040      	beq.n	100141a2 <__aeabi_fmul+0xc2>
10014120:	2bff      	cmp	r3, #255	; 0xff
10014122:	d039      	beq.n	10014198 <__aeabi_fmul+0xb8>
10014124:	2280      	movs	r2, #128	; 0x80
10014126:	2000      	movs	r0, #0
10014128:	00ed      	lsls	r5, r5, #3
1001412a:	04d2      	lsls	r2, r2, #19
1001412c:	4315      	orrs	r5, r2
1001412e:	3b7f      	subs	r3, #127	; 0x7f
10014130:	18fb      	adds	r3, r7, r3
10014132:	4642      	mov	r2, r8
10014134:	4657      	mov	r7, sl
10014136:	1c59      	adds	r1, r3, #1
10014138:	4062      	eors	r2, r4
1001413a:	468c      	mov	ip, r1
1001413c:	4307      	orrs	r7, r0
1001413e:	2f0f      	cmp	r7, #15
10014140:	d85c      	bhi.n	100141fc <__aeabi_fmul+0x11c>
10014142:	496f      	ldr	r1, [pc, #444]	; (10014300 <__aeabi_fmul+0x220>)
10014144:	00bf      	lsls	r7, r7, #2
10014146:	59c9      	ldr	r1, [r1, r7]
10014148:	468f      	mov	pc, r1
1001414a:	2e00      	cmp	r6, #0
1001414c:	d145      	bne.n	100141da <__aeabi_fmul+0xfa>
1001414e:	2308      	movs	r3, #8
10014150:	469a      	mov	sl, r3
10014152:	3b06      	subs	r3, #6
10014154:	4699      	mov	r9, r3
10014156:	e7da      	b.n	1001410e <__aeabi_fmul+0x2e>
10014158:	4642      	mov	r2, r8
1001415a:	2802      	cmp	r0, #2
1001415c:	d02d      	beq.n	100141ba <__aeabi_fmul+0xda>
1001415e:	2803      	cmp	r0, #3
10014160:	d100      	bne.n	10014164 <__aeabi_fmul+0x84>
10014162:	e0c3      	b.n	100142ec <__aeabi_fmul+0x20c>
10014164:	2801      	cmp	r0, #1
10014166:	d000      	beq.n	1001416a <__aeabi_fmul+0x8a>
10014168:	e0a2      	b.n	100142b0 <__aeabi_fmul+0x1d0>
1001416a:	2500      	movs	r5, #0
1001416c:	2600      	movs	r6, #0
1001416e:	4002      	ands	r2, r0
10014170:	b2d4      	uxtb	r4, r2
10014172:	0276      	lsls	r6, r6, #9
10014174:	05ed      	lsls	r5, r5, #23
10014176:	0a76      	lsrs	r6, r6, #9
10014178:	432e      	orrs	r6, r5
1001417a:	07e4      	lsls	r4, r4, #31
1001417c:	4326      	orrs	r6, r4
1001417e:	0030      	movs	r0, r6
10014180:	bc1c      	pop	{r2, r3, r4}
10014182:	4690      	mov	r8, r2
10014184:	4699      	mov	r9, r3
10014186:	46a2      	mov	sl, r4
10014188:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001418a:	2e00      	cmp	r6, #0
1001418c:	d11a      	bne.n	100141c4 <__aeabi_fmul+0xe4>
1001418e:	2304      	movs	r3, #4
10014190:	469a      	mov	sl, r3
10014192:	3b03      	subs	r3, #3
10014194:	4699      	mov	r9, r3
10014196:	e7ba      	b.n	1001410e <__aeabi_fmul+0x2e>
10014198:	002a      	movs	r2, r5
1001419a:	1e51      	subs	r1, r2, #1
1001419c:	418a      	sbcs	r2, r1
1001419e:	1c90      	adds	r0, r2, #2
100141a0:	e7c6      	b.n	10014130 <__aeabi_fmul+0x50>
100141a2:	2001      	movs	r0, #1
100141a4:	2d00      	cmp	r5, #0
100141a6:	d0c3      	beq.n	10014130 <__aeabi_fmul+0x50>
100141a8:	0028      	movs	r0, r5
100141aa:	f002 f9c1 	bl	10016530 <__clzsi2>
100141ae:	1f43      	subs	r3, r0, #5
100141b0:	3076      	adds	r0, #118	; 0x76
100141b2:	409d      	lsls	r5, r3
100141b4:	4243      	negs	r3, r0
100141b6:	2000      	movs	r0, #0
100141b8:	e7ba      	b.n	10014130 <__aeabi_fmul+0x50>
100141ba:	2401      	movs	r4, #1
100141bc:	25ff      	movs	r5, #255	; 0xff
100141be:	4014      	ands	r4, r2
100141c0:	2600      	movs	r6, #0
100141c2:	e7d6      	b.n	10014172 <__aeabi_fmul+0x92>
100141c4:	0030      	movs	r0, r6
100141c6:	f002 f9b3 	bl	10016530 <__clzsi2>
100141ca:	1f43      	subs	r3, r0, #5
100141cc:	409e      	lsls	r6, r3
100141ce:	2300      	movs	r3, #0
100141d0:	3076      	adds	r0, #118	; 0x76
100141d2:	4247      	negs	r7, r0
100141d4:	469a      	mov	sl, r3
100141d6:	4699      	mov	r9, r3
100141d8:	e799      	b.n	1001410e <__aeabi_fmul+0x2e>
100141da:	230c      	movs	r3, #12
100141dc:	469a      	mov	sl, r3
100141de:	3b09      	subs	r3, #9
100141e0:	4699      	mov	r9, r3
100141e2:	e794      	b.n	1001410e <__aeabi_fmul+0x2e>
100141e4:	2680      	movs	r6, #128	; 0x80
100141e6:	2400      	movs	r4, #0
100141e8:	03f6      	lsls	r6, r6, #15
100141ea:	25ff      	movs	r5, #255	; 0xff
100141ec:	e7c1      	b.n	10014172 <__aeabi_fmul+0x92>
100141ee:	0035      	movs	r5, r6
100141f0:	4648      	mov	r0, r9
100141f2:	e7b2      	b.n	1001415a <__aeabi_fmul+0x7a>
100141f4:	0035      	movs	r5, r6
100141f6:	0022      	movs	r2, r4
100141f8:	4648      	mov	r0, r9
100141fa:	e7ae      	b.n	1001415a <__aeabi_fmul+0x7a>
100141fc:	0429      	lsls	r1, r5, #16
100141fe:	0c09      	lsrs	r1, r1, #16
10014200:	0008      	movs	r0, r1
10014202:	0c37      	lsrs	r7, r6, #16
10014204:	0436      	lsls	r6, r6, #16
10014206:	0c36      	lsrs	r6, r6, #16
10014208:	0c2c      	lsrs	r4, r5, #16
1001420a:	4379      	muls	r1, r7
1001420c:	4370      	muls	r0, r6
1001420e:	4367      	muls	r7, r4
10014210:	4374      	muls	r4, r6
10014212:	0c06      	lsrs	r6, r0, #16
10014214:	1864      	adds	r4, r4, r1
10014216:	1936      	adds	r6, r6, r4
10014218:	42b1      	cmp	r1, r6
1001421a:	d903      	bls.n	10014224 <__aeabi_fmul+0x144>
1001421c:	2180      	movs	r1, #128	; 0x80
1001421e:	0249      	lsls	r1, r1, #9
10014220:	4688      	mov	r8, r1
10014222:	4447      	add	r7, r8
10014224:	0400      	lsls	r0, r0, #16
10014226:	0c00      	lsrs	r0, r0, #16
10014228:	0431      	lsls	r1, r6, #16
1001422a:	1809      	adds	r1, r1, r0
1001422c:	018d      	lsls	r5, r1, #6
1001422e:	1e68      	subs	r0, r5, #1
10014230:	4185      	sbcs	r5, r0
10014232:	0e89      	lsrs	r1, r1, #26
10014234:	4329      	orrs	r1, r5
10014236:	0c35      	lsrs	r5, r6, #16
10014238:	19ed      	adds	r5, r5, r7
1001423a:	01ad      	lsls	r5, r5, #6
1001423c:	430d      	orrs	r5, r1
1001423e:	0129      	lsls	r1, r5, #4
10014240:	d504      	bpl.n	1001424c <__aeabi_fmul+0x16c>
10014242:	2301      	movs	r3, #1
10014244:	0869      	lsrs	r1, r5, #1
10014246:	401d      	ands	r5, r3
10014248:	4663      	mov	r3, ip
1001424a:	430d      	orrs	r5, r1
1001424c:	0019      	movs	r1, r3
1001424e:	317f      	adds	r1, #127	; 0x7f
10014250:	2900      	cmp	r1, #0
10014252:	dd25      	ble.n	100142a0 <__aeabi_fmul+0x1c0>
10014254:	0768      	lsls	r0, r5, #29
10014256:	d004      	beq.n	10014262 <__aeabi_fmul+0x182>
10014258:	200f      	movs	r0, #15
1001425a:	4028      	ands	r0, r5
1001425c:	2804      	cmp	r0, #4
1001425e:	d000      	beq.n	10014262 <__aeabi_fmul+0x182>
10014260:	3504      	adds	r5, #4
10014262:	0128      	lsls	r0, r5, #4
10014264:	d503      	bpl.n	1001426e <__aeabi_fmul+0x18e>
10014266:	4927      	ldr	r1, [pc, #156]	; (10014304 <__aeabi_fmul+0x224>)
10014268:	3380      	adds	r3, #128	; 0x80
1001426a:	400d      	ands	r5, r1
1001426c:	0019      	movs	r1, r3
1001426e:	29fe      	cmp	r1, #254	; 0xfe
10014270:	dca3      	bgt.n	100141ba <__aeabi_fmul+0xda>
10014272:	2401      	movs	r4, #1
10014274:	01ad      	lsls	r5, r5, #6
10014276:	0a6e      	lsrs	r6, r5, #9
10014278:	4014      	ands	r4, r2
1001427a:	b2cd      	uxtb	r5, r1
1001427c:	e779      	b.n	10014172 <__aeabi_fmul+0x92>
1001427e:	2080      	movs	r0, #128	; 0x80
10014280:	03c0      	lsls	r0, r0, #15
10014282:	4206      	tst	r6, r0
10014284:	d007      	beq.n	10014296 <__aeabi_fmul+0x1b6>
10014286:	4205      	tst	r5, r0
10014288:	d105      	bne.n	10014296 <__aeabi_fmul+0x1b6>
1001428a:	4328      	orrs	r0, r5
1001428c:	0246      	lsls	r6, r0, #9
1001428e:	0a76      	lsrs	r6, r6, #9
10014290:	4644      	mov	r4, r8
10014292:	25ff      	movs	r5, #255	; 0xff
10014294:	e76d      	b.n	10014172 <__aeabi_fmul+0x92>
10014296:	4306      	orrs	r6, r0
10014298:	0276      	lsls	r6, r6, #9
1001429a:	0a76      	lsrs	r6, r6, #9
1001429c:	25ff      	movs	r5, #255	; 0xff
1001429e:	e768      	b.n	10014172 <__aeabi_fmul+0x92>
100142a0:	2401      	movs	r4, #1
100142a2:	1a61      	subs	r1, r4, r1
100142a4:	291b      	cmp	r1, #27
100142a6:	dd05      	ble.n	100142b4 <__aeabi_fmul+0x1d4>
100142a8:	4014      	ands	r4, r2
100142aa:	2500      	movs	r5, #0
100142ac:	2600      	movs	r6, #0
100142ae:	e760      	b.n	10014172 <__aeabi_fmul+0x92>
100142b0:	4663      	mov	r3, ip
100142b2:	e7cb      	b.n	1001424c <__aeabi_fmul+0x16c>
100142b4:	002e      	movs	r6, r5
100142b6:	2320      	movs	r3, #32
100142b8:	40ce      	lsrs	r6, r1
100142ba:	1a59      	subs	r1, r3, r1
100142bc:	408d      	lsls	r5, r1
100142be:	1e6b      	subs	r3, r5, #1
100142c0:	419d      	sbcs	r5, r3
100142c2:	432e      	orrs	r6, r5
100142c4:	0773      	lsls	r3, r6, #29
100142c6:	d004      	beq.n	100142d2 <__aeabi_fmul+0x1f2>
100142c8:	230f      	movs	r3, #15
100142ca:	4033      	ands	r3, r6
100142cc:	2b04      	cmp	r3, #4
100142ce:	d000      	beq.n	100142d2 <__aeabi_fmul+0x1f2>
100142d0:	3604      	adds	r6, #4
100142d2:	0173      	lsls	r3, r6, #5
100142d4:	d504      	bpl.n	100142e0 <__aeabi_fmul+0x200>
100142d6:	2401      	movs	r4, #1
100142d8:	2501      	movs	r5, #1
100142da:	4014      	ands	r4, r2
100142dc:	2600      	movs	r6, #0
100142de:	e748      	b.n	10014172 <__aeabi_fmul+0x92>
100142e0:	2401      	movs	r4, #1
100142e2:	01b6      	lsls	r6, r6, #6
100142e4:	0a76      	lsrs	r6, r6, #9
100142e6:	4014      	ands	r4, r2
100142e8:	2500      	movs	r5, #0
100142ea:	e742      	b.n	10014172 <__aeabi_fmul+0x92>
100142ec:	2680      	movs	r6, #128	; 0x80
100142ee:	2401      	movs	r4, #1
100142f0:	03f6      	lsls	r6, r6, #15
100142f2:	432e      	orrs	r6, r5
100142f4:	0276      	lsls	r6, r6, #9
100142f6:	0a76      	lsrs	r6, r6, #9
100142f8:	4014      	ands	r4, r2
100142fa:	25ff      	movs	r5, #255	; 0xff
100142fc:	e739      	b.n	10014172 <__aeabi_fmul+0x92>
100142fe:	46c0      	nop			; (mov r8, r8)
10014300:	10018758 	.word	0x10018758
10014304:	f7ffffff 	.word	0xf7ffffff

10014308 <__aeabi_fsub>:
10014308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001430a:	024a      	lsls	r2, r1, #9
1001430c:	004e      	lsls	r6, r1, #1
1001430e:	0243      	lsls	r3, r0, #9
10014310:	0044      	lsls	r4, r0, #1
10014312:	0e24      	lsrs	r4, r4, #24
10014314:	0fc5      	lsrs	r5, r0, #31
10014316:	099b      	lsrs	r3, r3, #6
10014318:	0e36      	lsrs	r6, r6, #24
1001431a:	0fc9      	lsrs	r1, r1, #31
1001431c:	0992      	lsrs	r2, r2, #6
1001431e:	2eff      	cmp	r6, #255	; 0xff
10014320:	d100      	bne.n	10014324 <__aeabi_fsub+0x1c>
10014322:	e083      	b.n	1001442c <__aeabi_fsub+0x124>
10014324:	2001      	movs	r0, #1
10014326:	4041      	eors	r1, r0
10014328:	1ba0      	subs	r0, r4, r6
1001432a:	42a9      	cmp	r1, r5
1001432c:	d05c      	beq.n	100143e8 <__aeabi_fsub+0xe0>
1001432e:	2800      	cmp	r0, #0
10014330:	dc00      	bgt.n	10014334 <__aeabi_fsub+0x2c>
10014332:	e095      	b.n	10014460 <__aeabi_fsub+0x158>
10014334:	2e00      	cmp	r6, #0
10014336:	d11c      	bne.n	10014372 <__aeabi_fsub+0x6a>
10014338:	2a00      	cmp	r2, #0
1001433a:	d000      	beq.n	1001433e <__aeabi_fsub+0x36>
1001433c:	e081      	b.n	10014442 <__aeabi_fsub+0x13a>
1001433e:	075a      	lsls	r2, r3, #29
10014340:	d004      	beq.n	1001434c <__aeabi_fsub+0x44>
10014342:	220f      	movs	r2, #15
10014344:	401a      	ands	r2, r3
10014346:	2a04      	cmp	r2, #4
10014348:	d000      	beq.n	1001434c <__aeabi_fsub+0x44>
1001434a:	3304      	adds	r3, #4
1001434c:	015a      	lsls	r2, r3, #5
1001434e:	d53b      	bpl.n	100143c8 <__aeabi_fsub+0xc0>
10014350:	3401      	adds	r4, #1
10014352:	2cff      	cmp	r4, #255	; 0xff
10014354:	d100      	bne.n	10014358 <__aeabi_fsub+0x50>
10014356:	e091      	b.n	1001447c <__aeabi_fsub+0x174>
10014358:	2001      	movs	r0, #1
1001435a:	019b      	lsls	r3, r3, #6
1001435c:	0a5b      	lsrs	r3, r3, #9
1001435e:	b2e4      	uxtb	r4, r4
10014360:	4005      	ands	r5, r0
10014362:	025b      	lsls	r3, r3, #9
10014364:	05e4      	lsls	r4, r4, #23
10014366:	0a5b      	lsrs	r3, r3, #9
10014368:	07ed      	lsls	r5, r5, #31
1001436a:	4323      	orrs	r3, r4
1001436c:	432b      	orrs	r3, r5
1001436e:	0018      	movs	r0, r3
10014370:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10014372:	2cff      	cmp	r4, #255	; 0xff
10014374:	d0e3      	beq.n	1001433e <__aeabi_fsub+0x36>
10014376:	2180      	movs	r1, #128	; 0x80
10014378:	04c9      	lsls	r1, r1, #19
1001437a:	430a      	orrs	r2, r1
1001437c:	281b      	cmp	r0, #27
1001437e:	dd00      	ble.n	10014382 <__aeabi_fsub+0x7a>
10014380:	e090      	b.n	100144a4 <__aeabi_fsub+0x19c>
10014382:	0016      	movs	r6, r2
10014384:	2120      	movs	r1, #32
10014386:	40c6      	lsrs	r6, r0
10014388:	1a08      	subs	r0, r1, r0
1001438a:	4082      	lsls	r2, r0
1001438c:	1e51      	subs	r1, r2, #1
1001438e:	418a      	sbcs	r2, r1
10014390:	4332      	orrs	r2, r6
10014392:	1a9b      	subs	r3, r3, r2
10014394:	015a      	lsls	r2, r3, #5
10014396:	d515      	bpl.n	100143c4 <__aeabi_fsub+0xbc>
10014398:	019b      	lsls	r3, r3, #6
1001439a:	099e      	lsrs	r6, r3, #6
1001439c:	0030      	movs	r0, r6
1001439e:	f002 f8c7 	bl	10016530 <__clzsi2>
100143a2:	3805      	subs	r0, #5
100143a4:	4086      	lsls	r6, r0
100143a6:	4284      	cmp	r4, r0
100143a8:	dc6c      	bgt.n	10014484 <__aeabi_fsub+0x17c>
100143aa:	1b04      	subs	r4, r0, r4
100143ac:	0033      	movs	r3, r6
100143ae:	2020      	movs	r0, #32
100143b0:	3401      	adds	r4, #1
100143b2:	40e3      	lsrs	r3, r4
100143b4:	1b04      	subs	r4, r0, r4
100143b6:	40a6      	lsls	r6, r4
100143b8:	1e72      	subs	r2, r6, #1
100143ba:	4196      	sbcs	r6, r2
100143bc:	2400      	movs	r4, #0
100143be:	4333      	orrs	r3, r6
100143c0:	e7bd      	b.n	1001433e <__aeabi_fsub+0x36>
100143c2:	000d      	movs	r5, r1
100143c4:	075a      	lsls	r2, r3, #29
100143c6:	d1bc      	bne.n	10014342 <__aeabi_fsub+0x3a>
100143c8:	08df      	lsrs	r7, r3, #3
100143ca:	2301      	movs	r3, #1
100143cc:	401d      	ands	r5, r3
100143ce:	2cff      	cmp	r4, #255	; 0xff
100143d0:	d133      	bne.n	1001443a <__aeabi_fsub+0x132>
100143d2:	2f00      	cmp	r7, #0
100143d4:	d100      	bne.n	100143d8 <__aeabi_fsub+0xd0>
100143d6:	e090      	b.n	100144fa <__aeabi_fsub+0x1f2>
100143d8:	2280      	movs	r2, #128	; 0x80
100143da:	03d2      	lsls	r2, r2, #15
100143dc:	0013      	movs	r3, r2
100143de:	433b      	orrs	r3, r7
100143e0:	025b      	lsls	r3, r3, #9
100143e2:	0a5b      	lsrs	r3, r3, #9
100143e4:	24ff      	movs	r4, #255	; 0xff
100143e6:	e7bc      	b.n	10014362 <__aeabi_fsub+0x5a>
100143e8:	2800      	cmp	r0, #0
100143ea:	dd4f      	ble.n	1001448c <__aeabi_fsub+0x184>
100143ec:	2e00      	cmp	r6, #0
100143ee:	d02e      	beq.n	1001444e <__aeabi_fsub+0x146>
100143f0:	2cff      	cmp	r4, #255	; 0xff
100143f2:	d0a4      	beq.n	1001433e <__aeabi_fsub+0x36>
100143f4:	2580      	movs	r5, #128	; 0x80
100143f6:	04ed      	lsls	r5, r5, #19
100143f8:	432a      	orrs	r2, r5
100143fa:	281b      	cmp	r0, #27
100143fc:	dd00      	ble.n	10014400 <__aeabi_fsub+0xf8>
100143fe:	e097      	b.n	10014530 <__aeabi_fsub+0x228>
10014400:	0016      	movs	r6, r2
10014402:	2520      	movs	r5, #32
10014404:	40c6      	lsrs	r6, r0
10014406:	1a28      	subs	r0, r5, r0
10014408:	4082      	lsls	r2, r0
1001440a:	1e50      	subs	r0, r2, #1
1001440c:	4182      	sbcs	r2, r0
1001440e:	4332      	orrs	r2, r6
10014410:	189b      	adds	r3, r3, r2
10014412:	015a      	lsls	r2, r3, #5
10014414:	d5d5      	bpl.n	100143c2 <__aeabi_fsub+0xba>
10014416:	3401      	adds	r4, #1
10014418:	2cff      	cmp	r4, #255	; 0xff
1001441a:	d06d      	beq.n	100144f8 <__aeabi_fsub+0x1f0>
1001441c:	2201      	movs	r2, #1
1001441e:	487b      	ldr	r0, [pc, #492]	; (1001460c <__aeabi_fsub+0x304>)
10014420:	401a      	ands	r2, r3
10014422:	085b      	lsrs	r3, r3, #1
10014424:	4003      	ands	r3, r0
10014426:	4313      	orrs	r3, r2
10014428:	000d      	movs	r5, r1
1001442a:	e788      	b.n	1001433e <__aeabi_fsub+0x36>
1001442c:	2a00      	cmp	r2, #0
1001442e:	d000      	beq.n	10014432 <__aeabi_fsub+0x12a>
10014430:	e77a      	b.n	10014328 <__aeabi_fsub+0x20>
10014432:	e777      	b.n	10014324 <__aeabi_fsub+0x1c>
10014434:	1e03      	subs	r3, r0, #0
10014436:	d1c5      	bne.n	100143c4 <__aeabi_fsub+0xbc>
10014438:	2500      	movs	r5, #0
1001443a:	027b      	lsls	r3, r7, #9
1001443c:	0a5b      	lsrs	r3, r3, #9
1001443e:	b2e4      	uxtb	r4, r4
10014440:	e78f      	b.n	10014362 <__aeabi_fsub+0x5a>
10014442:	3801      	subs	r0, #1
10014444:	2800      	cmp	r0, #0
10014446:	d0a4      	beq.n	10014392 <__aeabi_fsub+0x8a>
10014448:	2cff      	cmp	r4, #255	; 0xff
1001444a:	d197      	bne.n	1001437c <__aeabi_fsub+0x74>
1001444c:	e777      	b.n	1001433e <__aeabi_fsub+0x36>
1001444e:	2a00      	cmp	r2, #0
10014450:	d100      	bne.n	10014454 <__aeabi_fsub+0x14c>
10014452:	e774      	b.n	1001433e <__aeabi_fsub+0x36>
10014454:	3801      	subs	r0, #1
10014456:	2800      	cmp	r0, #0
10014458:	d0da      	beq.n	10014410 <__aeabi_fsub+0x108>
1001445a:	2cff      	cmp	r4, #255	; 0xff
1001445c:	d1cd      	bne.n	100143fa <__aeabi_fsub+0xf2>
1001445e:	e76e      	b.n	1001433e <__aeabi_fsub+0x36>
10014460:	2800      	cmp	r0, #0
10014462:	d121      	bne.n	100144a8 <__aeabi_fsub+0x1a0>
10014464:	1c60      	adds	r0, r4, #1
10014466:	b2c0      	uxtb	r0, r0
10014468:	2801      	cmp	r0, #1
1001446a:	dd58      	ble.n	1001451e <__aeabi_fsub+0x216>
1001446c:	2780      	movs	r7, #128	; 0x80
1001446e:	1a9e      	subs	r6, r3, r2
10014470:	04ff      	lsls	r7, r7, #19
10014472:	4037      	ands	r7, r6
10014474:	d02f      	beq.n	100144d6 <__aeabi_fsub+0x1ce>
10014476:	1ad6      	subs	r6, r2, r3
10014478:	000d      	movs	r5, r1
1001447a:	e78f      	b.n	1001439c <__aeabi_fsub+0x94>
1001447c:	2301      	movs	r3, #1
1001447e:	401d      	ands	r5, r3
10014480:	2300      	movs	r3, #0
10014482:	e76e      	b.n	10014362 <__aeabi_fsub+0x5a>
10014484:	4b62      	ldr	r3, [pc, #392]	; (10014610 <__aeabi_fsub+0x308>)
10014486:	1a24      	subs	r4, r4, r0
10014488:	4033      	ands	r3, r6
1001448a:	e758      	b.n	1001433e <__aeabi_fsub+0x36>
1001448c:	2800      	cmp	r0, #0
1001448e:	d151      	bne.n	10014534 <__aeabi_fsub+0x22c>
10014490:	1c60      	adds	r0, r4, #1
10014492:	b2c6      	uxtb	r6, r0
10014494:	2e01      	cmp	r6, #1
10014496:	dd33      	ble.n	10014500 <__aeabi_fsub+0x1f8>
10014498:	28ff      	cmp	r0, #255	; 0xff
1001449a:	d02d      	beq.n	100144f8 <__aeabi_fsub+0x1f0>
1001449c:	189b      	adds	r3, r3, r2
1001449e:	085b      	lsrs	r3, r3, #1
100144a0:	0004      	movs	r4, r0
100144a2:	e74c      	b.n	1001433e <__aeabi_fsub+0x36>
100144a4:	2201      	movs	r2, #1
100144a6:	e774      	b.n	10014392 <__aeabi_fsub+0x8a>
100144a8:	2c00      	cmp	r4, #0
100144aa:	d01a      	beq.n	100144e2 <__aeabi_fsub+0x1da>
100144ac:	2eff      	cmp	r6, #255	; 0xff
100144ae:	d01f      	beq.n	100144f0 <__aeabi_fsub+0x1e8>
100144b0:	2480      	movs	r4, #128	; 0x80
100144b2:	04e4      	lsls	r4, r4, #19
100144b4:	4240      	negs	r0, r0
100144b6:	4323      	orrs	r3, r4
100144b8:	281b      	cmp	r0, #27
100144ba:	dd00      	ble.n	100144be <__aeabi_fsub+0x1b6>
100144bc:	e096      	b.n	100145ec <__aeabi_fsub+0x2e4>
100144be:	001d      	movs	r5, r3
100144c0:	2420      	movs	r4, #32
100144c2:	40c5      	lsrs	r5, r0
100144c4:	1a20      	subs	r0, r4, r0
100144c6:	4083      	lsls	r3, r0
100144c8:	1e58      	subs	r0, r3, #1
100144ca:	4183      	sbcs	r3, r0
100144cc:	432b      	orrs	r3, r5
100144ce:	1ad3      	subs	r3, r2, r3
100144d0:	0034      	movs	r4, r6
100144d2:	000d      	movs	r5, r1
100144d4:	e75e      	b.n	10014394 <__aeabi_fsub+0x8c>
100144d6:	2e00      	cmp	r6, #0
100144d8:	d000      	beq.n	100144dc <__aeabi_fsub+0x1d4>
100144da:	e75f      	b.n	1001439c <__aeabi_fsub+0x94>
100144dc:	2500      	movs	r5, #0
100144de:	2400      	movs	r4, #0
100144e0:	e7ab      	b.n	1001443a <__aeabi_fsub+0x132>
100144e2:	2b00      	cmp	r3, #0
100144e4:	d044      	beq.n	10014570 <__aeabi_fsub+0x268>
100144e6:	43c0      	mvns	r0, r0
100144e8:	2800      	cmp	r0, #0
100144ea:	d0f0      	beq.n	100144ce <__aeabi_fsub+0x1c6>
100144ec:	2eff      	cmp	r6, #255	; 0xff
100144ee:	d1e3      	bne.n	100144b8 <__aeabi_fsub+0x1b0>
100144f0:	0013      	movs	r3, r2
100144f2:	24ff      	movs	r4, #255	; 0xff
100144f4:	000d      	movs	r5, r1
100144f6:	e722      	b.n	1001433e <__aeabi_fsub+0x36>
100144f8:	000d      	movs	r5, r1
100144fa:	24ff      	movs	r4, #255	; 0xff
100144fc:	2300      	movs	r3, #0
100144fe:	e730      	b.n	10014362 <__aeabi_fsub+0x5a>
10014500:	2c00      	cmp	r4, #0
10014502:	d15d      	bne.n	100145c0 <__aeabi_fsub+0x2b8>
10014504:	2b00      	cmp	r3, #0
10014506:	d07d      	beq.n	10014604 <__aeabi_fsub+0x2fc>
10014508:	2a00      	cmp	r2, #0
1001450a:	d100      	bne.n	1001450e <__aeabi_fsub+0x206>
1001450c:	e717      	b.n	1001433e <__aeabi_fsub+0x36>
1001450e:	189b      	adds	r3, r3, r2
10014510:	015a      	lsls	r2, r3, #5
10014512:	d400      	bmi.n	10014516 <__aeabi_fsub+0x20e>
10014514:	e756      	b.n	100143c4 <__aeabi_fsub+0xbc>
10014516:	4a3e      	ldr	r2, [pc, #248]	; (10014610 <__aeabi_fsub+0x308>)
10014518:	0004      	movs	r4, r0
1001451a:	4013      	ands	r3, r2
1001451c:	e70f      	b.n	1001433e <__aeabi_fsub+0x36>
1001451e:	2c00      	cmp	r4, #0
10014520:	d11e      	bne.n	10014560 <__aeabi_fsub+0x258>
10014522:	2b00      	cmp	r3, #0
10014524:	d12f      	bne.n	10014586 <__aeabi_fsub+0x27e>
10014526:	2a00      	cmp	r2, #0
10014528:	d065      	beq.n	100145f6 <__aeabi_fsub+0x2ee>
1001452a:	0013      	movs	r3, r2
1001452c:	000d      	movs	r5, r1
1001452e:	e706      	b.n	1001433e <__aeabi_fsub+0x36>
10014530:	2201      	movs	r2, #1
10014532:	e76d      	b.n	10014410 <__aeabi_fsub+0x108>
10014534:	2c00      	cmp	r4, #0
10014536:	d11f      	bne.n	10014578 <__aeabi_fsub+0x270>
10014538:	2b00      	cmp	r3, #0
1001453a:	d059      	beq.n	100145f0 <__aeabi_fsub+0x2e8>
1001453c:	43c0      	mvns	r0, r0
1001453e:	2800      	cmp	r0, #0
10014540:	d00b      	beq.n	1001455a <__aeabi_fsub+0x252>
10014542:	2eff      	cmp	r6, #255	; 0xff
10014544:	d04f      	beq.n	100145e6 <__aeabi_fsub+0x2de>
10014546:	281b      	cmp	r0, #27
10014548:	dc5e      	bgt.n	10014608 <__aeabi_fsub+0x300>
1001454a:	001d      	movs	r5, r3
1001454c:	2420      	movs	r4, #32
1001454e:	40c5      	lsrs	r5, r0
10014550:	1a20      	subs	r0, r4, r0
10014552:	4083      	lsls	r3, r0
10014554:	1e58      	subs	r0, r3, #1
10014556:	4183      	sbcs	r3, r0
10014558:	432b      	orrs	r3, r5
1001455a:	189b      	adds	r3, r3, r2
1001455c:	0034      	movs	r4, r6
1001455e:	e758      	b.n	10014412 <__aeabi_fsub+0x10a>
10014560:	2b00      	cmp	r3, #0
10014562:	d11c      	bne.n	1001459e <__aeabi_fsub+0x296>
10014564:	2a00      	cmp	r2, #0
10014566:	d049      	beq.n	100145fc <__aeabi_fsub+0x2f4>
10014568:	0013      	movs	r3, r2
1001456a:	000d      	movs	r5, r1
1001456c:	24ff      	movs	r4, #255	; 0xff
1001456e:	e6e6      	b.n	1001433e <__aeabi_fsub+0x36>
10014570:	0013      	movs	r3, r2
10014572:	0034      	movs	r4, r6
10014574:	000d      	movs	r5, r1
10014576:	e6e2      	b.n	1001433e <__aeabi_fsub+0x36>
10014578:	2eff      	cmp	r6, #255	; 0xff
1001457a:	d034      	beq.n	100145e6 <__aeabi_fsub+0x2de>
1001457c:	2480      	movs	r4, #128	; 0x80
1001457e:	04e4      	lsls	r4, r4, #19
10014580:	4240      	negs	r0, r0
10014582:	4323      	orrs	r3, r4
10014584:	e7df      	b.n	10014546 <__aeabi_fsub+0x23e>
10014586:	2a00      	cmp	r2, #0
10014588:	d100      	bne.n	1001458c <__aeabi_fsub+0x284>
1001458a:	e6d8      	b.n	1001433e <__aeabi_fsub+0x36>
1001458c:	2780      	movs	r7, #128	; 0x80
1001458e:	1a98      	subs	r0, r3, r2
10014590:	04ff      	lsls	r7, r7, #19
10014592:	4007      	ands	r7, r0
10014594:	d100      	bne.n	10014598 <__aeabi_fsub+0x290>
10014596:	e74d      	b.n	10014434 <__aeabi_fsub+0x12c>
10014598:	1ad3      	subs	r3, r2, r3
1001459a:	000d      	movs	r5, r1
1001459c:	e6cf      	b.n	1001433e <__aeabi_fsub+0x36>
1001459e:	24ff      	movs	r4, #255	; 0xff
100145a0:	2a00      	cmp	r2, #0
100145a2:	d100      	bne.n	100145a6 <__aeabi_fsub+0x29e>
100145a4:	e6cb      	b.n	1001433e <__aeabi_fsub+0x36>
100145a6:	2080      	movs	r0, #128	; 0x80
100145a8:	08db      	lsrs	r3, r3, #3
100145aa:	03c0      	lsls	r0, r0, #15
100145ac:	4203      	tst	r3, r0
100145ae:	d004      	beq.n	100145ba <__aeabi_fsub+0x2b2>
100145b0:	08d2      	lsrs	r2, r2, #3
100145b2:	4202      	tst	r2, r0
100145b4:	d101      	bne.n	100145ba <__aeabi_fsub+0x2b2>
100145b6:	0013      	movs	r3, r2
100145b8:	000d      	movs	r5, r1
100145ba:	00db      	lsls	r3, r3, #3
100145bc:	24ff      	movs	r4, #255	; 0xff
100145be:	e6be      	b.n	1001433e <__aeabi_fsub+0x36>
100145c0:	2b00      	cmp	r3, #0
100145c2:	d010      	beq.n	100145e6 <__aeabi_fsub+0x2de>
100145c4:	24ff      	movs	r4, #255	; 0xff
100145c6:	2a00      	cmp	r2, #0
100145c8:	d100      	bne.n	100145cc <__aeabi_fsub+0x2c4>
100145ca:	e6b8      	b.n	1001433e <__aeabi_fsub+0x36>
100145cc:	2080      	movs	r0, #128	; 0x80
100145ce:	08db      	lsrs	r3, r3, #3
100145d0:	03c0      	lsls	r0, r0, #15
100145d2:	4203      	tst	r3, r0
100145d4:	d003      	beq.n	100145de <__aeabi_fsub+0x2d6>
100145d6:	08d2      	lsrs	r2, r2, #3
100145d8:	4202      	tst	r2, r0
100145da:	d100      	bne.n	100145de <__aeabi_fsub+0x2d6>
100145dc:	0013      	movs	r3, r2
100145de:	00db      	lsls	r3, r3, #3
100145e0:	000d      	movs	r5, r1
100145e2:	24ff      	movs	r4, #255	; 0xff
100145e4:	e6ab      	b.n	1001433e <__aeabi_fsub+0x36>
100145e6:	0013      	movs	r3, r2
100145e8:	24ff      	movs	r4, #255	; 0xff
100145ea:	e6a8      	b.n	1001433e <__aeabi_fsub+0x36>
100145ec:	2301      	movs	r3, #1
100145ee:	e76e      	b.n	100144ce <__aeabi_fsub+0x1c6>
100145f0:	0013      	movs	r3, r2
100145f2:	0034      	movs	r4, r6
100145f4:	e6a3      	b.n	1001433e <__aeabi_fsub+0x36>
100145f6:	2700      	movs	r7, #0
100145f8:	2500      	movs	r5, #0
100145fa:	e71e      	b.n	1001443a <__aeabi_fsub+0x132>
100145fc:	2780      	movs	r7, #128	; 0x80
100145fe:	2500      	movs	r5, #0
10014600:	03ff      	lsls	r7, r7, #15
10014602:	e6e9      	b.n	100143d8 <__aeabi_fsub+0xd0>
10014604:	0013      	movs	r3, r2
10014606:	e69a      	b.n	1001433e <__aeabi_fsub+0x36>
10014608:	2301      	movs	r3, #1
1001460a:	e7a6      	b.n	1001455a <__aeabi_fsub+0x252>
1001460c:	7dffffff 	.word	0x7dffffff
10014610:	fbffffff 	.word	0xfbffffff

10014614 <__aeabi_fcmpun>:
10014614:	0243      	lsls	r3, r0, #9
10014616:	0a5a      	lsrs	r2, r3, #9
10014618:	0040      	lsls	r0, r0, #1
1001461a:	024b      	lsls	r3, r1, #9
1001461c:	0049      	lsls	r1, r1, #1
1001461e:	0e00      	lsrs	r0, r0, #24
10014620:	0a5b      	lsrs	r3, r3, #9
10014622:	0e09      	lsrs	r1, r1, #24
10014624:	28ff      	cmp	r0, #255	; 0xff
10014626:	d003      	beq.n	10014630 <__aeabi_fcmpun+0x1c>
10014628:	2000      	movs	r0, #0
1001462a:	29ff      	cmp	r1, #255	; 0xff
1001462c:	d006      	beq.n	1001463c <__aeabi_fcmpun+0x28>
1001462e:	4770      	bx	lr
10014630:	38fe      	subs	r0, #254	; 0xfe
10014632:	2a00      	cmp	r2, #0
10014634:	d1fb      	bne.n	1001462e <__aeabi_fcmpun+0x1a>
10014636:	2000      	movs	r0, #0
10014638:	29ff      	cmp	r1, #255	; 0xff
1001463a:	d1f8      	bne.n	1001462e <__aeabi_fcmpun+0x1a>
1001463c:	0018      	movs	r0, r3
1001463e:	1e43      	subs	r3, r0, #1
10014640:	4198      	sbcs	r0, r3
10014642:	e7f4      	b.n	1001462e <__aeabi_fcmpun+0x1a>

10014644 <__aeabi_f2iz>:
10014644:	0243      	lsls	r3, r0, #9
10014646:	0a59      	lsrs	r1, r3, #9
10014648:	0043      	lsls	r3, r0, #1
1001464a:	0fc2      	lsrs	r2, r0, #31
1001464c:	0e1b      	lsrs	r3, r3, #24
1001464e:	2000      	movs	r0, #0
10014650:	2b7e      	cmp	r3, #126	; 0x7e
10014652:	dd0e      	ble.n	10014672 <__aeabi_f2iz+0x2e>
10014654:	2b9d      	cmp	r3, #157	; 0x9d
10014656:	dc0d      	bgt.n	10014674 <__aeabi_f2iz+0x30>
10014658:	2080      	movs	r0, #128	; 0x80
1001465a:	0400      	lsls	r0, r0, #16
1001465c:	4301      	orrs	r1, r0
1001465e:	2b95      	cmp	r3, #149	; 0x95
10014660:	dc0b      	bgt.n	1001467a <__aeabi_f2iz+0x36>
10014662:	2096      	movs	r0, #150	; 0x96
10014664:	1ac3      	subs	r3, r0, r3
10014666:	40d9      	lsrs	r1, r3
10014668:	000b      	movs	r3, r1
1001466a:	4258      	negs	r0, r3
1001466c:	2a00      	cmp	r2, #0
1001466e:	d100      	bne.n	10014672 <__aeabi_f2iz+0x2e>
10014670:	0018      	movs	r0, r3
10014672:	4770      	bx	lr
10014674:	4b03      	ldr	r3, [pc, #12]	; (10014684 <__aeabi_f2iz+0x40>)
10014676:	18d0      	adds	r0, r2, r3
10014678:	e7fb      	b.n	10014672 <__aeabi_f2iz+0x2e>
1001467a:	3b96      	subs	r3, #150	; 0x96
1001467c:	4099      	lsls	r1, r3
1001467e:	000b      	movs	r3, r1
10014680:	e7f3      	b.n	1001466a <__aeabi_f2iz+0x26>
10014682:	46c0      	nop			; (mov r8, r8)
10014684:	7fffffff 	.word	0x7fffffff

10014688 <__aeabi_i2f>:
10014688:	b570      	push	{r4, r5, r6, lr}
1001468a:	2800      	cmp	r0, #0
1001468c:	d030      	beq.n	100146f0 <__aeabi_i2f+0x68>
1001468e:	17c3      	asrs	r3, r0, #31
10014690:	18c5      	adds	r5, r0, r3
10014692:	405d      	eors	r5, r3
10014694:	0fc4      	lsrs	r4, r0, #31
10014696:	0028      	movs	r0, r5
10014698:	f001 ff4a 	bl	10016530 <__clzsi2>
1001469c:	239e      	movs	r3, #158	; 0x9e
1001469e:	1a1b      	subs	r3, r3, r0
100146a0:	2b96      	cmp	r3, #150	; 0x96
100146a2:	dc0d      	bgt.n	100146c0 <__aeabi_i2f+0x38>
100146a4:	2296      	movs	r2, #150	; 0x96
100146a6:	1ad2      	subs	r2, r2, r3
100146a8:	4095      	lsls	r5, r2
100146aa:	026a      	lsls	r2, r5, #9
100146ac:	0a52      	lsrs	r2, r2, #9
100146ae:	b2d8      	uxtb	r0, r3
100146b0:	0252      	lsls	r2, r2, #9
100146b2:	05c0      	lsls	r0, r0, #23
100146b4:	0a52      	lsrs	r2, r2, #9
100146b6:	07e4      	lsls	r4, r4, #31
100146b8:	4302      	orrs	r2, r0
100146ba:	4322      	orrs	r2, r4
100146bc:	0010      	movs	r0, r2
100146be:	bd70      	pop	{r4, r5, r6, pc}
100146c0:	2b99      	cmp	r3, #153	; 0x99
100146c2:	dc19      	bgt.n	100146f8 <__aeabi_i2f+0x70>
100146c4:	2299      	movs	r2, #153	; 0x99
100146c6:	1ad2      	subs	r2, r2, r3
100146c8:	4095      	lsls	r5, r2
100146ca:	4a12      	ldr	r2, [pc, #72]	; (10014714 <__aeabi_i2f+0x8c>)
100146cc:	402a      	ands	r2, r5
100146ce:	0769      	lsls	r1, r5, #29
100146d0:	d004      	beq.n	100146dc <__aeabi_i2f+0x54>
100146d2:	210f      	movs	r1, #15
100146d4:	400d      	ands	r5, r1
100146d6:	2d04      	cmp	r5, #4
100146d8:	d000      	beq.n	100146dc <__aeabi_i2f+0x54>
100146da:	3204      	adds	r2, #4
100146dc:	0151      	lsls	r1, r2, #5
100146de:	d503      	bpl.n	100146e8 <__aeabi_i2f+0x60>
100146e0:	4b0c      	ldr	r3, [pc, #48]	; (10014714 <__aeabi_i2f+0x8c>)
100146e2:	401a      	ands	r2, r3
100146e4:	239f      	movs	r3, #159	; 0x9f
100146e6:	1a1b      	subs	r3, r3, r0
100146e8:	0192      	lsls	r2, r2, #6
100146ea:	0a52      	lsrs	r2, r2, #9
100146ec:	b2d8      	uxtb	r0, r3
100146ee:	e7df      	b.n	100146b0 <__aeabi_i2f+0x28>
100146f0:	2400      	movs	r4, #0
100146f2:	2000      	movs	r0, #0
100146f4:	2200      	movs	r2, #0
100146f6:	e7db      	b.n	100146b0 <__aeabi_i2f+0x28>
100146f8:	2205      	movs	r2, #5
100146fa:	002e      	movs	r6, r5
100146fc:	1a12      	subs	r2, r2, r0
100146fe:	21b9      	movs	r1, #185	; 0xb9
10014700:	40d6      	lsrs	r6, r2
10014702:	002a      	movs	r2, r5
10014704:	1ac9      	subs	r1, r1, r3
10014706:	408a      	lsls	r2, r1
10014708:	1e55      	subs	r5, r2, #1
1001470a:	41aa      	sbcs	r2, r5
1001470c:	0035      	movs	r5, r6
1001470e:	4315      	orrs	r5, r2
10014710:	e7db      	b.n	100146ca <__aeabi_i2f+0x42>
10014712:	46c0      	nop			; (mov r8, r8)
10014714:	fbffffff 	.word	0xfbffffff

10014718 <__aeabi_ui2f>:
10014718:	b570      	push	{r4, r5, r6, lr}
1001471a:	1e04      	subs	r4, r0, #0
1001471c:	d028      	beq.n	10014770 <__aeabi_ui2f+0x58>
1001471e:	f001 ff07 	bl	10016530 <__clzsi2>
10014722:	239e      	movs	r3, #158	; 0x9e
10014724:	1a1b      	subs	r3, r3, r0
10014726:	2b96      	cmp	r3, #150	; 0x96
10014728:	dc0a      	bgt.n	10014740 <__aeabi_ui2f+0x28>
1001472a:	2296      	movs	r2, #150	; 0x96
1001472c:	1ad2      	subs	r2, r2, r3
1001472e:	4094      	lsls	r4, r2
10014730:	0262      	lsls	r2, r4, #9
10014732:	0a52      	lsrs	r2, r2, #9
10014734:	b2d8      	uxtb	r0, r3
10014736:	0252      	lsls	r2, r2, #9
10014738:	0a52      	lsrs	r2, r2, #9
1001473a:	05c0      	lsls	r0, r0, #23
1001473c:	4310      	orrs	r0, r2
1001473e:	bd70      	pop	{r4, r5, r6, pc}
10014740:	2b99      	cmp	r3, #153	; 0x99
10014742:	dc18      	bgt.n	10014776 <__aeabi_ui2f+0x5e>
10014744:	2299      	movs	r2, #153	; 0x99
10014746:	1ad2      	subs	r2, r2, r3
10014748:	4094      	lsls	r4, r2
1001474a:	4a11      	ldr	r2, [pc, #68]	; (10014790 <__aeabi_ui2f+0x78>)
1001474c:	4022      	ands	r2, r4
1001474e:	0761      	lsls	r1, r4, #29
10014750:	d004      	beq.n	1001475c <__aeabi_ui2f+0x44>
10014752:	210f      	movs	r1, #15
10014754:	400c      	ands	r4, r1
10014756:	2c04      	cmp	r4, #4
10014758:	d000      	beq.n	1001475c <__aeabi_ui2f+0x44>
1001475a:	3204      	adds	r2, #4
1001475c:	0151      	lsls	r1, r2, #5
1001475e:	d503      	bpl.n	10014768 <__aeabi_ui2f+0x50>
10014760:	4b0b      	ldr	r3, [pc, #44]	; (10014790 <__aeabi_ui2f+0x78>)
10014762:	401a      	ands	r2, r3
10014764:	239f      	movs	r3, #159	; 0x9f
10014766:	1a1b      	subs	r3, r3, r0
10014768:	0192      	lsls	r2, r2, #6
1001476a:	0a52      	lsrs	r2, r2, #9
1001476c:	b2d8      	uxtb	r0, r3
1001476e:	e7e2      	b.n	10014736 <__aeabi_ui2f+0x1e>
10014770:	2000      	movs	r0, #0
10014772:	2200      	movs	r2, #0
10014774:	e7df      	b.n	10014736 <__aeabi_ui2f+0x1e>
10014776:	2205      	movs	r2, #5
10014778:	0025      	movs	r5, r4
1001477a:	1a12      	subs	r2, r2, r0
1001477c:	21b9      	movs	r1, #185	; 0xb9
1001477e:	40d5      	lsrs	r5, r2
10014780:	0022      	movs	r2, r4
10014782:	1ac9      	subs	r1, r1, r3
10014784:	408a      	lsls	r2, r1
10014786:	1e54      	subs	r4, r2, #1
10014788:	41a2      	sbcs	r2, r4
1001478a:	002c      	movs	r4, r5
1001478c:	4314      	orrs	r4, r2
1001478e:	e7dc      	b.n	1001474a <__aeabi_ui2f+0x32>
10014790:	fbffffff 	.word	0xfbffffff

10014794 <__aeabi_dadd>:
10014794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10014796:	4656      	mov	r6, sl
10014798:	465f      	mov	r7, fp
1001479a:	464d      	mov	r5, r9
1001479c:	4644      	mov	r4, r8
1001479e:	b4f0      	push	{r4, r5, r6, r7}
100147a0:	000f      	movs	r7, r1
100147a2:	0ffd      	lsrs	r5, r7, #31
100147a4:	46aa      	mov	sl, r5
100147a6:	0309      	lsls	r1, r1, #12
100147a8:	007c      	lsls	r4, r7, #1
100147aa:	002e      	movs	r6, r5
100147ac:	005f      	lsls	r7, r3, #1
100147ae:	0f45      	lsrs	r5, r0, #29
100147b0:	0a49      	lsrs	r1, r1, #9
100147b2:	0d7f      	lsrs	r7, r7, #21
100147b4:	4329      	orrs	r1, r5
100147b6:	00c5      	lsls	r5, r0, #3
100147b8:	0318      	lsls	r0, r3, #12
100147ba:	46bc      	mov	ip, r7
100147bc:	0a40      	lsrs	r0, r0, #9
100147be:	0f57      	lsrs	r7, r2, #29
100147c0:	0d64      	lsrs	r4, r4, #21
100147c2:	0fdb      	lsrs	r3, r3, #31
100147c4:	4338      	orrs	r0, r7
100147c6:	00d2      	lsls	r2, r2, #3
100147c8:	459a      	cmp	sl, r3
100147ca:	d100      	bne.n	100147ce <__aeabi_dadd+0x3a>
100147cc:	e0aa      	b.n	10014924 <__aeabi_dadd+0x190>
100147ce:	4666      	mov	r6, ip
100147d0:	1ba6      	subs	r6, r4, r6
100147d2:	2e00      	cmp	r6, #0
100147d4:	dc00      	bgt.n	100147d8 <__aeabi_dadd+0x44>
100147d6:	e0ff      	b.n	100149d8 <__aeabi_dadd+0x244>
100147d8:	4663      	mov	r3, ip
100147da:	2b00      	cmp	r3, #0
100147dc:	d139      	bne.n	10014852 <__aeabi_dadd+0xbe>
100147de:	0003      	movs	r3, r0
100147e0:	4313      	orrs	r3, r2
100147e2:	d000      	beq.n	100147e6 <__aeabi_dadd+0x52>
100147e4:	e0d9      	b.n	1001499a <__aeabi_dadd+0x206>
100147e6:	076b      	lsls	r3, r5, #29
100147e8:	d009      	beq.n	100147fe <__aeabi_dadd+0x6a>
100147ea:	230f      	movs	r3, #15
100147ec:	402b      	ands	r3, r5
100147ee:	2b04      	cmp	r3, #4
100147f0:	d005      	beq.n	100147fe <__aeabi_dadd+0x6a>
100147f2:	1d2b      	adds	r3, r5, #4
100147f4:	42ab      	cmp	r3, r5
100147f6:	41ad      	sbcs	r5, r5
100147f8:	426d      	negs	r5, r5
100147fa:	1949      	adds	r1, r1, r5
100147fc:	001d      	movs	r5, r3
100147fe:	020b      	lsls	r3, r1, #8
10014800:	d400      	bmi.n	10014804 <__aeabi_dadd+0x70>
10014802:	e082      	b.n	1001490a <__aeabi_dadd+0x176>
10014804:	4bca      	ldr	r3, [pc, #808]	; (10014b30 <__aeabi_dadd+0x39c>)
10014806:	3401      	adds	r4, #1
10014808:	429c      	cmp	r4, r3
1001480a:	d100      	bne.n	1001480e <__aeabi_dadd+0x7a>
1001480c:	e0fe      	b.n	10014a0c <__aeabi_dadd+0x278>
1001480e:	000a      	movs	r2, r1
10014810:	4656      	mov	r6, sl
10014812:	4bc8      	ldr	r3, [pc, #800]	; (10014b34 <__aeabi_dadd+0x3a0>)
10014814:	08ed      	lsrs	r5, r5, #3
10014816:	401a      	ands	r2, r3
10014818:	0750      	lsls	r0, r2, #29
1001481a:	0564      	lsls	r4, r4, #21
1001481c:	0252      	lsls	r2, r2, #9
1001481e:	4305      	orrs	r5, r0
10014820:	0b12      	lsrs	r2, r2, #12
10014822:	0d64      	lsrs	r4, r4, #21
10014824:	2100      	movs	r1, #0
10014826:	0312      	lsls	r2, r2, #12
10014828:	0d0b      	lsrs	r3, r1, #20
1001482a:	051b      	lsls	r3, r3, #20
1001482c:	0564      	lsls	r4, r4, #21
1001482e:	0b12      	lsrs	r2, r2, #12
10014830:	431a      	orrs	r2, r3
10014832:	0863      	lsrs	r3, r4, #1
10014834:	4cc0      	ldr	r4, [pc, #768]	; (10014b38 <__aeabi_dadd+0x3a4>)
10014836:	07f6      	lsls	r6, r6, #31
10014838:	4014      	ands	r4, r2
1001483a:	431c      	orrs	r4, r3
1001483c:	0064      	lsls	r4, r4, #1
1001483e:	0864      	lsrs	r4, r4, #1
10014840:	4334      	orrs	r4, r6
10014842:	0028      	movs	r0, r5
10014844:	0021      	movs	r1, r4
10014846:	bc3c      	pop	{r2, r3, r4, r5}
10014848:	4690      	mov	r8, r2
1001484a:	4699      	mov	r9, r3
1001484c:	46a2      	mov	sl, r4
1001484e:	46ab      	mov	fp, r5
10014850:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10014852:	4bb7      	ldr	r3, [pc, #732]	; (10014b30 <__aeabi_dadd+0x39c>)
10014854:	429c      	cmp	r4, r3
10014856:	d0c6      	beq.n	100147e6 <__aeabi_dadd+0x52>
10014858:	2380      	movs	r3, #128	; 0x80
1001485a:	041b      	lsls	r3, r3, #16
1001485c:	4318      	orrs	r0, r3
1001485e:	2e38      	cmp	r6, #56	; 0x38
10014860:	dd00      	ble.n	10014864 <__aeabi_dadd+0xd0>
10014862:	e0eb      	b.n	10014a3c <__aeabi_dadd+0x2a8>
10014864:	2e1f      	cmp	r6, #31
10014866:	dd00      	ble.n	1001486a <__aeabi_dadd+0xd6>
10014868:	e11e      	b.n	10014aa8 <__aeabi_dadd+0x314>
1001486a:	2320      	movs	r3, #32
1001486c:	1b9b      	subs	r3, r3, r6
1001486e:	469c      	mov	ip, r3
10014870:	0003      	movs	r3, r0
10014872:	4667      	mov	r7, ip
10014874:	40bb      	lsls	r3, r7
10014876:	4698      	mov	r8, r3
10014878:	0013      	movs	r3, r2
1001487a:	4647      	mov	r7, r8
1001487c:	40f3      	lsrs	r3, r6
1001487e:	433b      	orrs	r3, r7
10014880:	4667      	mov	r7, ip
10014882:	40ba      	lsls	r2, r7
10014884:	1e57      	subs	r7, r2, #1
10014886:	41ba      	sbcs	r2, r7
10014888:	4313      	orrs	r3, r2
1001488a:	0002      	movs	r2, r0
1001488c:	40f2      	lsrs	r2, r6
1001488e:	1aeb      	subs	r3, r5, r3
10014890:	429d      	cmp	r5, r3
10014892:	41b6      	sbcs	r6, r6
10014894:	001d      	movs	r5, r3
10014896:	1a8a      	subs	r2, r1, r2
10014898:	4276      	negs	r6, r6
1001489a:	1b91      	subs	r1, r2, r6
1001489c:	020b      	lsls	r3, r1, #8
1001489e:	d531      	bpl.n	10014904 <__aeabi_dadd+0x170>
100148a0:	024a      	lsls	r2, r1, #9
100148a2:	0a56      	lsrs	r6, r2, #9
100148a4:	2e00      	cmp	r6, #0
100148a6:	d100      	bne.n	100148aa <__aeabi_dadd+0x116>
100148a8:	e0b4      	b.n	10014a14 <__aeabi_dadd+0x280>
100148aa:	0030      	movs	r0, r6
100148ac:	f001 fe40 	bl	10016530 <__clzsi2>
100148b0:	0003      	movs	r3, r0
100148b2:	3b08      	subs	r3, #8
100148b4:	2b1f      	cmp	r3, #31
100148b6:	dd00      	ble.n	100148ba <__aeabi_dadd+0x126>
100148b8:	e0b5      	b.n	10014a26 <__aeabi_dadd+0x292>
100148ba:	2220      	movs	r2, #32
100148bc:	0029      	movs	r1, r5
100148be:	1ad2      	subs	r2, r2, r3
100148c0:	40d1      	lsrs	r1, r2
100148c2:	409e      	lsls	r6, r3
100148c4:	000a      	movs	r2, r1
100148c6:	409d      	lsls	r5, r3
100148c8:	4332      	orrs	r2, r6
100148ca:	429c      	cmp	r4, r3
100148cc:	dd00      	ble.n	100148d0 <__aeabi_dadd+0x13c>
100148ce:	e0b1      	b.n	10014a34 <__aeabi_dadd+0x2a0>
100148d0:	1b1c      	subs	r4, r3, r4
100148d2:	1c63      	adds	r3, r4, #1
100148d4:	2b1f      	cmp	r3, #31
100148d6:	dd00      	ble.n	100148da <__aeabi_dadd+0x146>
100148d8:	e0d5      	b.n	10014a86 <__aeabi_dadd+0x2f2>
100148da:	2120      	movs	r1, #32
100148dc:	0014      	movs	r4, r2
100148de:	0028      	movs	r0, r5
100148e0:	1ac9      	subs	r1, r1, r3
100148e2:	408c      	lsls	r4, r1
100148e4:	40d8      	lsrs	r0, r3
100148e6:	408d      	lsls	r5, r1
100148e8:	4304      	orrs	r4, r0
100148ea:	40da      	lsrs	r2, r3
100148ec:	1e68      	subs	r0, r5, #1
100148ee:	4185      	sbcs	r5, r0
100148f0:	0011      	movs	r1, r2
100148f2:	4325      	orrs	r5, r4
100148f4:	2400      	movs	r4, #0
100148f6:	e776      	b.n	100147e6 <__aeabi_dadd+0x52>
100148f8:	4641      	mov	r1, r8
100148fa:	4331      	orrs	r1, r6
100148fc:	d100      	bne.n	10014900 <__aeabi_dadd+0x16c>
100148fe:	e234      	b.n	10014d6a <__aeabi_dadd+0x5d6>
10014900:	0031      	movs	r1, r6
10014902:	4645      	mov	r5, r8
10014904:	076b      	lsls	r3, r5, #29
10014906:	d000      	beq.n	1001490a <__aeabi_dadd+0x176>
10014908:	e76f      	b.n	100147ea <__aeabi_dadd+0x56>
1001490a:	4656      	mov	r6, sl
1001490c:	0748      	lsls	r0, r1, #29
1001490e:	08ed      	lsrs	r5, r5, #3
10014910:	08c9      	lsrs	r1, r1, #3
10014912:	4305      	orrs	r5, r0
10014914:	4b86      	ldr	r3, [pc, #536]	; (10014b30 <__aeabi_dadd+0x39c>)
10014916:	429c      	cmp	r4, r3
10014918:	d035      	beq.n	10014986 <__aeabi_dadd+0x1f2>
1001491a:	030a      	lsls	r2, r1, #12
1001491c:	0564      	lsls	r4, r4, #21
1001491e:	0b12      	lsrs	r2, r2, #12
10014920:	0d64      	lsrs	r4, r4, #21
10014922:	e77f      	b.n	10014824 <__aeabi_dadd+0x90>
10014924:	4663      	mov	r3, ip
10014926:	1ae3      	subs	r3, r4, r3
10014928:	469b      	mov	fp, r3
1001492a:	2b00      	cmp	r3, #0
1001492c:	dc00      	bgt.n	10014930 <__aeabi_dadd+0x19c>
1001492e:	e08b      	b.n	10014a48 <__aeabi_dadd+0x2b4>
10014930:	4667      	mov	r7, ip
10014932:	2f00      	cmp	r7, #0
10014934:	d03c      	beq.n	100149b0 <__aeabi_dadd+0x21c>
10014936:	4f7e      	ldr	r7, [pc, #504]	; (10014b30 <__aeabi_dadd+0x39c>)
10014938:	42bc      	cmp	r4, r7
1001493a:	d100      	bne.n	1001493e <__aeabi_dadd+0x1aa>
1001493c:	e753      	b.n	100147e6 <__aeabi_dadd+0x52>
1001493e:	2780      	movs	r7, #128	; 0x80
10014940:	043f      	lsls	r7, r7, #16
10014942:	4338      	orrs	r0, r7
10014944:	465b      	mov	r3, fp
10014946:	2b38      	cmp	r3, #56	; 0x38
10014948:	dc00      	bgt.n	1001494c <__aeabi_dadd+0x1b8>
1001494a:	e0f7      	b.n	10014b3c <__aeabi_dadd+0x3a8>
1001494c:	4302      	orrs	r2, r0
1001494e:	1e50      	subs	r0, r2, #1
10014950:	4182      	sbcs	r2, r0
10014952:	2000      	movs	r0, #0
10014954:	b2d2      	uxtb	r2, r2
10014956:	1953      	adds	r3, r2, r5
10014958:	1842      	adds	r2, r0, r1
1001495a:	42ab      	cmp	r3, r5
1001495c:	4189      	sbcs	r1, r1
1001495e:	001d      	movs	r5, r3
10014960:	4249      	negs	r1, r1
10014962:	1889      	adds	r1, r1, r2
10014964:	020b      	lsls	r3, r1, #8
10014966:	d5cd      	bpl.n	10014904 <__aeabi_dadd+0x170>
10014968:	4b71      	ldr	r3, [pc, #452]	; (10014b30 <__aeabi_dadd+0x39c>)
1001496a:	3401      	adds	r4, #1
1001496c:	429c      	cmp	r4, r3
1001496e:	d100      	bne.n	10014972 <__aeabi_dadd+0x1de>
10014970:	e13d      	b.n	10014bee <__aeabi_dadd+0x45a>
10014972:	2001      	movs	r0, #1
10014974:	4a6f      	ldr	r2, [pc, #444]	; (10014b34 <__aeabi_dadd+0x3a0>)
10014976:	086b      	lsrs	r3, r5, #1
10014978:	400a      	ands	r2, r1
1001497a:	4028      	ands	r0, r5
1001497c:	4318      	orrs	r0, r3
1001497e:	07d5      	lsls	r5, r2, #31
10014980:	4305      	orrs	r5, r0
10014982:	0851      	lsrs	r1, r2, #1
10014984:	e72f      	b.n	100147e6 <__aeabi_dadd+0x52>
10014986:	002b      	movs	r3, r5
10014988:	430b      	orrs	r3, r1
1001498a:	d100      	bne.n	1001498e <__aeabi_dadd+0x1fa>
1001498c:	e1cb      	b.n	10014d26 <__aeabi_dadd+0x592>
1001498e:	2380      	movs	r3, #128	; 0x80
10014990:	031b      	lsls	r3, r3, #12
10014992:	430b      	orrs	r3, r1
10014994:	031a      	lsls	r2, r3, #12
10014996:	0b12      	lsrs	r2, r2, #12
10014998:	e744      	b.n	10014824 <__aeabi_dadd+0x90>
1001499a:	3e01      	subs	r6, #1
1001499c:	2e00      	cmp	r6, #0
1001499e:	d16d      	bne.n	10014a7c <__aeabi_dadd+0x2e8>
100149a0:	1aae      	subs	r6, r5, r2
100149a2:	42b5      	cmp	r5, r6
100149a4:	419b      	sbcs	r3, r3
100149a6:	1a09      	subs	r1, r1, r0
100149a8:	425b      	negs	r3, r3
100149aa:	1ac9      	subs	r1, r1, r3
100149ac:	0035      	movs	r5, r6
100149ae:	e775      	b.n	1001489c <__aeabi_dadd+0x108>
100149b0:	0007      	movs	r7, r0
100149b2:	4317      	orrs	r7, r2
100149b4:	d100      	bne.n	100149b8 <__aeabi_dadd+0x224>
100149b6:	e716      	b.n	100147e6 <__aeabi_dadd+0x52>
100149b8:	2301      	movs	r3, #1
100149ba:	425b      	negs	r3, r3
100149bc:	469c      	mov	ip, r3
100149be:	44e3      	add	fp, ip
100149c0:	465b      	mov	r3, fp
100149c2:	2b00      	cmp	r3, #0
100149c4:	d000      	beq.n	100149c8 <__aeabi_dadd+0x234>
100149c6:	e0e0      	b.n	10014b8a <__aeabi_dadd+0x3f6>
100149c8:	18aa      	adds	r2, r5, r2
100149ca:	42aa      	cmp	r2, r5
100149cc:	419b      	sbcs	r3, r3
100149ce:	1809      	adds	r1, r1, r0
100149d0:	425b      	negs	r3, r3
100149d2:	1859      	adds	r1, r3, r1
100149d4:	0015      	movs	r5, r2
100149d6:	e7c5      	b.n	10014964 <__aeabi_dadd+0x1d0>
100149d8:	2e00      	cmp	r6, #0
100149da:	d175      	bne.n	10014ac8 <__aeabi_dadd+0x334>
100149dc:	1c66      	adds	r6, r4, #1
100149de:	0576      	lsls	r6, r6, #21
100149e0:	0d76      	lsrs	r6, r6, #21
100149e2:	2e01      	cmp	r6, #1
100149e4:	dc00      	bgt.n	100149e8 <__aeabi_dadd+0x254>
100149e6:	e0f3      	b.n	10014bd0 <__aeabi_dadd+0x43c>
100149e8:	1aae      	subs	r6, r5, r2
100149ea:	46b0      	mov	r8, r6
100149ec:	4545      	cmp	r5, r8
100149ee:	41bf      	sbcs	r7, r7
100149f0:	1a0e      	subs	r6, r1, r0
100149f2:	427f      	negs	r7, r7
100149f4:	1bf6      	subs	r6, r6, r7
100149f6:	0237      	lsls	r7, r6, #8
100149f8:	d400      	bmi.n	100149fc <__aeabi_dadd+0x268>
100149fa:	e08f      	b.n	10014b1c <__aeabi_dadd+0x388>
100149fc:	1b55      	subs	r5, r2, r5
100149fe:	42aa      	cmp	r2, r5
10014a00:	41b6      	sbcs	r6, r6
10014a02:	1a41      	subs	r1, r0, r1
10014a04:	4276      	negs	r6, r6
10014a06:	1b8e      	subs	r6, r1, r6
10014a08:	469a      	mov	sl, r3
10014a0a:	e74b      	b.n	100148a4 <__aeabi_dadd+0x110>
10014a0c:	4656      	mov	r6, sl
10014a0e:	2200      	movs	r2, #0
10014a10:	2500      	movs	r5, #0
10014a12:	e707      	b.n	10014824 <__aeabi_dadd+0x90>
10014a14:	0028      	movs	r0, r5
10014a16:	f001 fd8b 	bl	10016530 <__clzsi2>
10014a1a:	3020      	adds	r0, #32
10014a1c:	0003      	movs	r3, r0
10014a1e:	3b08      	subs	r3, #8
10014a20:	2b1f      	cmp	r3, #31
10014a22:	dc00      	bgt.n	10014a26 <__aeabi_dadd+0x292>
10014a24:	e749      	b.n	100148ba <__aeabi_dadd+0x126>
10014a26:	002a      	movs	r2, r5
10014a28:	3828      	subs	r0, #40	; 0x28
10014a2a:	4082      	lsls	r2, r0
10014a2c:	2500      	movs	r5, #0
10014a2e:	429c      	cmp	r4, r3
10014a30:	dc00      	bgt.n	10014a34 <__aeabi_dadd+0x2a0>
10014a32:	e74d      	b.n	100148d0 <__aeabi_dadd+0x13c>
10014a34:	493f      	ldr	r1, [pc, #252]	; (10014b34 <__aeabi_dadd+0x3a0>)
10014a36:	1ae4      	subs	r4, r4, r3
10014a38:	4011      	ands	r1, r2
10014a3a:	e6d4      	b.n	100147e6 <__aeabi_dadd+0x52>
10014a3c:	4302      	orrs	r2, r0
10014a3e:	1e50      	subs	r0, r2, #1
10014a40:	4182      	sbcs	r2, r0
10014a42:	b2d3      	uxtb	r3, r2
10014a44:	2200      	movs	r2, #0
10014a46:	e722      	b.n	1001488e <__aeabi_dadd+0xfa>
10014a48:	2b00      	cmp	r3, #0
10014a4a:	d000      	beq.n	10014a4e <__aeabi_dadd+0x2ba>
10014a4c:	e0f3      	b.n	10014c36 <__aeabi_dadd+0x4a2>
10014a4e:	1c63      	adds	r3, r4, #1
10014a50:	469c      	mov	ip, r3
10014a52:	055b      	lsls	r3, r3, #21
10014a54:	0d5b      	lsrs	r3, r3, #21
10014a56:	2b01      	cmp	r3, #1
10014a58:	dc00      	bgt.n	10014a5c <__aeabi_dadd+0x2c8>
10014a5a:	e09f      	b.n	10014b9c <__aeabi_dadd+0x408>
10014a5c:	4b34      	ldr	r3, [pc, #208]	; (10014b30 <__aeabi_dadd+0x39c>)
10014a5e:	459c      	cmp	ip, r3
10014a60:	d100      	bne.n	10014a64 <__aeabi_dadd+0x2d0>
10014a62:	e0c3      	b.n	10014bec <__aeabi_dadd+0x458>
10014a64:	18aa      	adds	r2, r5, r2
10014a66:	1809      	adds	r1, r1, r0
10014a68:	42aa      	cmp	r2, r5
10014a6a:	4180      	sbcs	r0, r0
10014a6c:	4240      	negs	r0, r0
10014a6e:	1841      	adds	r1, r0, r1
10014a70:	07cd      	lsls	r5, r1, #31
10014a72:	0852      	lsrs	r2, r2, #1
10014a74:	4315      	orrs	r5, r2
10014a76:	0849      	lsrs	r1, r1, #1
10014a78:	4664      	mov	r4, ip
10014a7a:	e6b4      	b.n	100147e6 <__aeabi_dadd+0x52>
10014a7c:	4b2c      	ldr	r3, [pc, #176]	; (10014b30 <__aeabi_dadd+0x39c>)
10014a7e:	429c      	cmp	r4, r3
10014a80:	d000      	beq.n	10014a84 <__aeabi_dadd+0x2f0>
10014a82:	e6ec      	b.n	1001485e <__aeabi_dadd+0xca>
10014a84:	e6af      	b.n	100147e6 <__aeabi_dadd+0x52>
10014a86:	0011      	movs	r1, r2
10014a88:	3c1f      	subs	r4, #31
10014a8a:	40e1      	lsrs	r1, r4
10014a8c:	000c      	movs	r4, r1
10014a8e:	2b20      	cmp	r3, #32
10014a90:	d100      	bne.n	10014a94 <__aeabi_dadd+0x300>
10014a92:	e07f      	b.n	10014b94 <__aeabi_dadd+0x400>
10014a94:	2140      	movs	r1, #64	; 0x40
10014a96:	1acb      	subs	r3, r1, r3
10014a98:	409a      	lsls	r2, r3
10014a9a:	4315      	orrs	r5, r2
10014a9c:	1e6a      	subs	r2, r5, #1
10014a9e:	4195      	sbcs	r5, r2
10014aa0:	2100      	movs	r1, #0
10014aa2:	4325      	orrs	r5, r4
10014aa4:	2400      	movs	r4, #0
10014aa6:	e72d      	b.n	10014904 <__aeabi_dadd+0x170>
10014aa8:	0033      	movs	r3, r6
10014aaa:	0007      	movs	r7, r0
10014aac:	3b20      	subs	r3, #32
10014aae:	40df      	lsrs	r7, r3
10014ab0:	003b      	movs	r3, r7
10014ab2:	2e20      	cmp	r6, #32
10014ab4:	d070      	beq.n	10014b98 <__aeabi_dadd+0x404>
10014ab6:	2740      	movs	r7, #64	; 0x40
10014ab8:	1bbe      	subs	r6, r7, r6
10014aba:	40b0      	lsls	r0, r6
10014abc:	4302      	orrs	r2, r0
10014abe:	1e50      	subs	r0, r2, #1
10014ac0:	4182      	sbcs	r2, r0
10014ac2:	4313      	orrs	r3, r2
10014ac4:	2200      	movs	r2, #0
10014ac6:	e6e2      	b.n	1001488e <__aeabi_dadd+0xfa>
10014ac8:	2c00      	cmp	r4, #0
10014aca:	d04f      	beq.n	10014b6c <__aeabi_dadd+0x3d8>
10014acc:	4c18      	ldr	r4, [pc, #96]	; (10014b30 <__aeabi_dadd+0x39c>)
10014ace:	45a4      	cmp	ip, r4
10014ad0:	d100      	bne.n	10014ad4 <__aeabi_dadd+0x340>
10014ad2:	e0ab      	b.n	10014c2c <__aeabi_dadd+0x498>
10014ad4:	2480      	movs	r4, #128	; 0x80
10014ad6:	0424      	lsls	r4, r4, #16
10014ad8:	4276      	negs	r6, r6
10014ada:	4321      	orrs	r1, r4
10014adc:	2e38      	cmp	r6, #56	; 0x38
10014ade:	dd00      	ble.n	10014ae2 <__aeabi_dadd+0x34e>
10014ae0:	e0df      	b.n	10014ca2 <__aeabi_dadd+0x50e>
10014ae2:	2e1f      	cmp	r6, #31
10014ae4:	dd00      	ble.n	10014ae8 <__aeabi_dadd+0x354>
10014ae6:	e143      	b.n	10014d70 <__aeabi_dadd+0x5dc>
10014ae8:	2720      	movs	r7, #32
10014aea:	1bbc      	subs	r4, r7, r6
10014aec:	46a1      	mov	r9, r4
10014aee:	000c      	movs	r4, r1
10014af0:	464f      	mov	r7, r9
10014af2:	40bc      	lsls	r4, r7
10014af4:	46a0      	mov	r8, r4
10014af6:	002c      	movs	r4, r5
10014af8:	4647      	mov	r7, r8
10014afa:	40f4      	lsrs	r4, r6
10014afc:	433c      	orrs	r4, r7
10014afe:	464f      	mov	r7, r9
10014b00:	40bd      	lsls	r5, r7
10014b02:	1e6f      	subs	r7, r5, #1
10014b04:	41bd      	sbcs	r5, r7
10014b06:	40f1      	lsrs	r1, r6
10014b08:	432c      	orrs	r4, r5
10014b0a:	1b15      	subs	r5, r2, r4
10014b0c:	42aa      	cmp	r2, r5
10014b0e:	4192      	sbcs	r2, r2
10014b10:	1a41      	subs	r1, r0, r1
10014b12:	4252      	negs	r2, r2
10014b14:	1a89      	subs	r1, r1, r2
10014b16:	4664      	mov	r4, ip
10014b18:	469a      	mov	sl, r3
10014b1a:	e6bf      	b.n	1001489c <__aeabi_dadd+0x108>
10014b1c:	4641      	mov	r1, r8
10014b1e:	4645      	mov	r5, r8
10014b20:	4331      	orrs	r1, r6
10014b22:	d000      	beq.n	10014b26 <__aeabi_dadd+0x392>
10014b24:	e6be      	b.n	100148a4 <__aeabi_dadd+0x110>
10014b26:	2600      	movs	r6, #0
10014b28:	2400      	movs	r4, #0
10014b2a:	2500      	movs	r5, #0
10014b2c:	e6f2      	b.n	10014914 <__aeabi_dadd+0x180>
10014b2e:	46c0      	nop			; (mov r8, r8)
10014b30:	000007ff 	.word	0x000007ff
10014b34:	ff7fffff 	.word	0xff7fffff
10014b38:	800fffff 	.word	0x800fffff
10014b3c:	2b1f      	cmp	r3, #31
10014b3e:	dc59      	bgt.n	10014bf4 <__aeabi_dadd+0x460>
10014b40:	2720      	movs	r7, #32
10014b42:	1aff      	subs	r7, r7, r3
10014b44:	46bc      	mov	ip, r7
10014b46:	0007      	movs	r7, r0
10014b48:	4663      	mov	r3, ip
10014b4a:	409f      	lsls	r7, r3
10014b4c:	465b      	mov	r3, fp
10014b4e:	46b9      	mov	r9, r7
10014b50:	0017      	movs	r7, r2
10014b52:	40df      	lsrs	r7, r3
10014b54:	46b8      	mov	r8, r7
10014b56:	464f      	mov	r7, r9
10014b58:	4643      	mov	r3, r8
10014b5a:	431f      	orrs	r7, r3
10014b5c:	4663      	mov	r3, ip
10014b5e:	409a      	lsls	r2, r3
10014b60:	1e53      	subs	r3, r2, #1
10014b62:	419a      	sbcs	r2, r3
10014b64:	465b      	mov	r3, fp
10014b66:	433a      	orrs	r2, r7
10014b68:	40d8      	lsrs	r0, r3
10014b6a:	e6f4      	b.n	10014956 <__aeabi_dadd+0x1c2>
10014b6c:	000c      	movs	r4, r1
10014b6e:	432c      	orrs	r4, r5
10014b70:	d05c      	beq.n	10014c2c <__aeabi_dadd+0x498>
10014b72:	43f6      	mvns	r6, r6
10014b74:	2e00      	cmp	r6, #0
10014b76:	d155      	bne.n	10014c24 <__aeabi_dadd+0x490>
10014b78:	1b55      	subs	r5, r2, r5
10014b7a:	42aa      	cmp	r2, r5
10014b7c:	41a4      	sbcs	r4, r4
10014b7e:	1a41      	subs	r1, r0, r1
10014b80:	4264      	negs	r4, r4
10014b82:	1b09      	subs	r1, r1, r4
10014b84:	469a      	mov	sl, r3
10014b86:	4664      	mov	r4, ip
10014b88:	e688      	b.n	1001489c <__aeabi_dadd+0x108>
10014b8a:	4f96      	ldr	r7, [pc, #600]	; (10014de4 <__aeabi_dadd+0x650>)
10014b8c:	42bc      	cmp	r4, r7
10014b8e:	d000      	beq.n	10014b92 <__aeabi_dadd+0x3fe>
10014b90:	e6d8      	b.n	10014944 <__aeabi_dadd+0x1b0>
10014b92:	e628      	b.n	100147e6 <__aeabi_dadd+0x52>
10014b94:	2200      	movs	r2, #0
10014b96:	e780      	b.n	10014a9a <__aeabi_dadd+0x306>
10014b98:	2000      	movs	r0, #0
10014b9a:	e78f      	b.n	10014abc <__aeabi_dadd+0x328>
10014b9c:	000b      	movs	r3, r1
10014b9e:	432b      	orrs	r3, r5
10014ba0:	2c00      	cmp	r4, #0
10014ba2:	d000      	beq.n	10014ba6 <__aeabi_dadd+0x412>
10014ba4:	e0c2      	b.n	10014d2c <__aeabi_dadd+0x598>
10014ba6:	2b00      	cmp	r3, #0
10014ba8:	d100      	bne.n	10014bac <__aeabi_dadd+0x418>
10014baa:	e101      	b.n	10014db0 <__aeabi_dadd+0x61c>
10014bac:	0003      	movs	r3, r0
10014bae:	4313      	orrs	r3, r2
10014bb0:	d100      	bne.n	10014bb4 <__aeabi_dadd+0x420>
10014bb2:	e618      	b.n	100147e6 <__aeabi_dadd+0x52>
10014bb4:	18ab      	adds	r3, r5, r2
10014bb6:	42ab      	cmp	r3, r5
10014bb8:	41b6      	sbcs	r6, r6
10014bba:	1809      	adds	r1, r1, r0
10014bbc:	4276      	negs	r6, r6
10014bbe:	1871      	adds	r1, r6, r1
10014bc0:	020a      	lsls	r2, r1, #8
10014bc2:	d400      	bmi.n	10014bc6 <__aeabi_dadd+0x432>
10014bc4:	e109      	b.n	10014dda <__aeabi_dadd+0x646>
10014bc6:	4a88      	ldr	r2, [pc, #544]	; (10014de8 <__aeabi_dadd+0x654>)
10014bc8:	001d      	movs	r5, r3
10014bca:	4011      	ands	r1, r2
10014bcc:	4664      	mov	r4, ip
10014bce:	e60a      	b.n	100147e6 <__aeabi_dadd+0x52>
10014bd0:	2c00      	cmp	r4, #0
10014bd2:	d15b      	bne.n	10014c8c <__aeabi_dadd+0x4f8>
10014bd4:	000e      	movs	r6, r1
10014bd6:	432e      	orrs	r6, r5
10014bd8:	d000      	beq.n	10014bdc <__aeabi_dadd+0x448>
10014bda:	e08a      	b.n	10014cf2 <__aeabi_dadd+0x55e>
10014bdc:	0001      	movs	r1, r0
10014bde:	4311      	orrs	r1, r2
10014be0:	d100      	bne.n	10014be4 <__aeabi_dadd+0x450>
10014be2:	e0c2      	b.n	10014d6a <__aeabi_dadd+0x5d6>
10014be4:	0001      	movs	r1, r0
10014be6:	0015      	movs	r5, r2
10014be8:	469a      	mov	sl, r3
10014bea:	e5fc      	b.n	100147e6 <__aeabi_dadd+0x52>
10014bec:	4664      	mov	r4, ip
10014bee:	2100      	movs	r1, #0
10014bf0:	2500      	movs	r5, #0
10014bf2:	e68f      	b.n	10014914 <__aeabi_dadd+0x180>
10014bf4:	2320      	movs	r3, #32
10014bf6:	425b      	negs	r3, r3
10014bf8:	469c      	mov	ip, r3
10014bfa:	44dc      	add	ip, fp
10014bfc:	4663      	mov	r3, ip
10014bfe:	0007      	movs	r7, r0
10014c00:	40df      	lsrs	r7, r3
10014c02:	465b      	mov	r3, fp
10014c04:	46bc      	mov	ip, r7
10014c06:	2b20      	cmp	r3, #32
10014c08:	d100      	bne.n	10014c0c <__aeabi_dadd+0x478>
10014c0a:	e0ac      	b.n	10014d66 <__aeabi_dadd+0x5d2>
10014c0c:	2340      	movs	r3, #64	; 0x40
10014c0e:	465f      	mov	r7, fp
10014c10:	1bdb      	subs	r3, r3, r7
10014c12:	4098      	lsls	r0, r3
10014c14:	4302      	orrs	r2, r0
10014c16:	1e50      	subs	r0, r2, #1
10014c18:	4182      	sbcs	r2, r0
10014c1a:	4663      	mov	r3, ip
10014c1c:	4313      	orrs	r3, r2
10014c1e:	001a      	movs	r2, r3
10014c20:	2000      	movs	r0, #0
10014c22:	e698      	b.n	10014956 <__aeabi_dadd+0x1c2>
10014c24:	4c6f      	ldr	r4, [pc, #444]	; (10014de4 <__aeabi_dadd+0x650>)
10014c26:	45a4      	cmp	ip, r4
10014c28:	d000      	beq.n	10014c2c <__aeabi_dadd+0x498>
10014c2a:	e757      	b.n	10014adc <__aeabi_dadd+0x348>
10014c2c:	0001      	movs	r1, r0
10014c2e:	0015      	movs	r5, r2
10014c30:	4664      	mov	r4, ip
10014c32:	469a      	mov	sl, r3
10014c34:	e5d7      	b.n	100147e6 <__aeabi_dadd+0x52>
10014c36:	2c00      	cmp	r4, #0
10014c38:	d139      	bne.n	10014cae <__aeabi_dadd+0x51a>
10014c3a:	000c      	movs	r4, r1
10014c3c:	432c      	orrs	r4, r5
10014c3e:	d06e      	beq.n	10014d1e <__aeabi_dadd+0x58a>
10014c40:	43db      	mvns	r3, r3
10014c42:	2b00      	cmp	r3, #0
10014c44:	d01a      	beq.n	10014c7c <__aeabi_dadd+0x4e8>
10014c46:	4c67      	ldr	r4, [pc, #412]	; (10014de4 <__aeabi_dadd+0x650>)
10014c48:	45a4      	cmp	ip, r4
10014c4a:	d068      	beq.n	10014d1e <__aeabi_dadd+0x58a>
10014c4c:	2b38      	cmp	r3, #56	; 0x38
10014c4e:	dd00      	ble.n	10014c52 <__aeabi_dadd+0x4be>
10014c50:	e0a4      	b.n	10014d9c <__aeabi_dadd+0x608>
10014c52:	2b1f      	cmp	r3, #31
10014c54:	dd00      	ble.n	10014c58 <__aeabi_dadd+0x4c4>
10014c56:	e0ae      	b.n	10014db6 <__aeabi_dadd+0x622>
10014c58:	2420      	movs	r4, #32
10014c5a:	000f      	movs	r7, r1
10014c5c:	1ae4      	subs	r4, r4, r3
10014c5e:	40a7      	lsls	r7, r4
10014c60:	46b9      	mov	r9, r7
10014c62:	002f      	movs	r7, r5
10014c64:	40df      	lsrs	r7, r3
10014c66:	46b8      	mov	r8, r7
10014c68:	46a3      	mov	fp, r4
10014c6a:	464f      	mov	r7, r9
10014c6c:	4644      	mov	r4, r8
10014c6e:	4327      	orrs	r7, r4
10014c70:	465c      	mov	r4, fp
10014c72:	40a5      	lsls	r5, r4
10014c74:	1e6c      	subs	r4, r5, #1
10014c76:	41a5      	sbcs	r5, r4
10014c78:	40d9      	lsrs	r1, r3
10014c7a:	433d      	orrs	r5, r7
10014c7c:	18ad      	adds	r5, r5, r2
10014c7e:	4295      	cmp	r5, r2
10014c80:	419b      	sbcs	r3, r3
10014c82:	1809      	adds	r1, r1, r0
10014c84:	425b      	negs	r3, r3
10014c86:	1859      	adds	r1, r3, r1
10014c88:	4664      	mov	r4, ip
10014c8a:	e66b      	b.n	10014964 <__aeabi_dadd+0x1d0>
10014c8c:	000c      	movs	r4, r1
10014c8e:	432c      	orrs	r4, r5
10014c90:	d115      	bne.n	10014cbe <__aeabi_dadd+0x52a>
10014c92:	0001      	movs	r1, r0
10014c94:	4311      	orrs	r1, r2
10014c96:	d07b      	beq.n	10014d90 <__aeabi_dadd+0x5fc>
10014c98:	0001      	movs	r1, r0
10014c9a:	0015      	movs	r5, r2
10014c9c:	469a      	mov	sl, r3
10014c9e:	4c51      	ldr	r4, [pc, #324]	; (10014de4 <__aeabi_dadd+0x650>)
10014ca0:	e5a1      	b.n	100147e6 <__aeabi_dadd+0x52>
10014ca2:	430d      	orrs	r5, r1
10014ca4:	1e69      	subs	r1, r5, #1
10014ca6:	418d      	sbcs	r5, r1
10014ca8:	2100      	movs	r1, #0
10014caa:	b2ec      	uxtb	r4, r5
10014cac:	e72d      	b.n	10014b0a <__aeabi_dadd+0x376>
10014cae:	4c4d      	ldr	r4, [pc, #308]	; (10014de4 <__aeabi_dadd+0x650>)
10014cb0:	45a4      	cmp	ip, r4
10014cb2:	d034      	beq.n	10014d1e <__aeabi_dadd+0x58a>
10014cb4:	2480      	movs	r4, #128	; 0x80
10014cb6:	0424      	lsls	r4, r4, #16
10014cb8:	425b      	negs	r3, r3
10014cba:	4321      	orrs	r1, r4
10014cbc:	e7c6      	b.n	10014c4c <__aeabi_dadd+0x4b8>
10014cbe:	0004      	movs	r4, r0
10014cc0:	4314      	orrs	r4, r2
10014cc2:	d04e      	beq.n	10014d62 <__aeabi_dadd+0x5ce>
10014cc4:	08ed      	lsrs	r5, r5, #3
10014cc6:	074c      	lsls	r4, r1, #29
10014cc8:	432c      	orrs	r4, r5
10014cca:	2580      	movs	r5, #128	; 0x80
10014ccc:	08c9      	lsrs	r1, r1, #3
10014cce:	032d      	lsls	r5, r5, #12
10014cd0:	4229      	tst	r1, r5
10014cd2:	d008      	beq.n	10014ce6 <__aeabi_dadd+0x552>
10014cd4:	08c6      	lsrs	r6, r0, #3
10014cd6:	422e      	tst	r6, r5
10014cd8:	d105      	bne.n	10014ce6 <__aeabi_dadd+0x552>
10014cda:	08d2      	lsrs	r2, r2, #3
10014cdc:	0741      	lsls	r1, r0, #29
10014cde:	4311      	orrs	r1, r2
10014ce0:	000c      	movs	r4, r1
10014ce2:	469a      	mov	sl, r3
10014ce4:	0031      	movs	r1, r6
10014ce6:	0f62      	lsrs	r2, r4, #29
10014ce8:	00c9      	lsls	r1, r1, #3
10014cea:	00e5      	lsls	r5, r4, #3
10014cec:	4311      	orrs	r1, r2
10014cee:	4c3d      	ldr	r4, [pc, #244]	; (10014de4 <__aeabi_dadd+0x650>)
10014cf0:	e579      	b.n	100147e6 <__aeabi_dadd+0x52>
10014cf2:	0006      	movs	r6, r0
10014cf4:	4316      	orrs	r6, r2
10014cf6:	d100      	bne.n	10014cfa <__aeabi_dadd+0x566>
10014cf8:	e575      	b.n	100147e6 <__aeabi_dadd+0x52>
10014cfa:	1aae      	subs	r6, r5, r2
10014cfc:	46b0      	mov	r8, r6
10014cfe:	4545      	cmp	r5, r8
10014d00:	41bf      	sbcs	r7, r7
10014d02:	1a0e      	subs	r6, r1, r0
10014d04:	427f      	negs	r7, r7
10014d06:	1bf6      	subs	r6, r6, r7
10014d08:	0237      	lsls	r7, r6, #8
10014d0a:	d400      	bmi.n	10014d0e <__aeabi_dadd+0x57a>
10014d0c:	e5f4      	b.n	100148f8 <__aeabi_dadd+0x164>
10014d0e:	1b55      	subs	r5, r2, r5
10014d10:	42aa      	cmp	r2, r5
10014d12:	41b6      	sbcs	r6, r6
10014d14:	1a41      	subs	r1, r0, r1
10014d16:	4276      	negs	r6, r6
10014d18:	1b89      	subs	r1, r1, r6
10014d1a:	469a      	mov	sl, r3
10014d1c:	e563      	b.n	100147e6 <__aeabi_dadd+0x52>
10014d1e:	0001      	movs	r1, r0
10014d20:	0015      	movs	r5, r2
10014d22:	4664      	mov	r4, ip
10014d24:	e55f      	b.n	100147e6 <__aeabi_dadd+0x52>
10014d26:	2200      	movs	r2, #0
10014d28:	2500      	movs	r5, #0
10014d2a:	e57b      	b.n	10014824 <__aeabi_dadd+0x90>
10014d2c:	2b00      	cmp	r3, #0
10014d2e:	d03b      	beq.n	10014da8 <__aeabi_dadd+0x614>
10014d30:	0003      	movs	r3, r0
10014d32:	4313      	orrs	r3, r2
10014d34:	d015      	beq.n	10014d62 <__aeabi_dadd+0x5ce>
10014d36:	08ed      	lsrs	r5, r5, #3
10014d38:	074b      	lsls	r3, r1, #29
10014d3a:	432b      	orrs	r3, r5
10014d3c:	2580      	movs	r5, #128	; 0x80
10014d3e:	08c9      	lsrs	r1, r1, #3
10014d40:	032d      	lsls	r5, r5, #12
10014d42:	4229      	tst	r1, r5
10014d44:	d007      	beq.n	10014d56 <__aeabi_dadd+0x5c2>
10014d46:	08c4      	lsrs	r4, r0, #3
10014d48:	422c      	tst	r4, r5
10014d4a:	d104      	bne.n	10014d56 <__aeabi_dadd+0x5c2>
10014d4c:	0741      	lsls	r1, r0, #29
10014d4e:	000b      	movs	r3, r1
10014d50:	0021      	movs	r1, r4
10014d52:	08d2      	lsrs	r2, r2, #3
10014d54:	4313      	orrs	r3, r2
10014d56:	00c9      	lsls	r1, r1, #3
10014d58:	0f5a      	lsrs	r2, r3, #29
10014d5a:	4311      	orrs	r1, r2
10014d5c:	00dd      	lsls	r5, r3, #3
10014d5e:	4c21      	ldr	r4, [pc, #132]	; (10014de4 <__aeabi_dadd+0x650>)
10014d60:	e541      	b.n	100147e6 <__aeabi_dadd+0x52>
10014d62:	4c20      	ldr	r4, [pc, #128]	; (10014de4 <__aeabi_dadd+0x650>)
10014d64:	e53f      	b.n	100147e6 <__aeabi_dadd+0x52>
10014d66:	2000      	movs	r0, #0
10014d68:	e754      	b.n	10014c14 <__aeabi_dadd+0x480>
10014d6a:	2600      	movs	r6, #0
10014d6c:	2500      	movs	r5, #0
10014d6e:	e5d1      	b.n	10014914 <__aeabi_dadd+0x180>
10014d70:	0034      	movs	r4, r6
10014d72:	000f      	movs	r7, r1
10014d74:	3c20      	subs	r4, #32
10014d76:	40e7      	lsrs	r7, r4
10014d78:	003c      	movs	r4, r7
10014d7a:	2e20      	cmp	r6, #32
10014d7c:	d02b      	beq.n	10014dd6 <__aeabi_dadd+0x642>
10014d7e:	2740      	movs	r7, #64	; 0x40
10014d80:	1bbe      	subs	r6, r7, r6
10014d82:	40b1      	lsls	r1, r6
10014d84:	430d      	orrs	r5, r1
10014d86:	1e69      	subs	r1, r5, #1
10014d88:	418d      	sbcs	r5, r1
10014d8a:	2100      	movs	r1, #0
10014d8c:	432c      	orrs	r4, r5
10014d8e:	e6bc      	b.n	10014b0a <__aeabi_dadd+0x376>
10014d90:	2180      	movs	r1, #128	; 0x80
10014d92:	2600      	movs	r6, #0
10014d94:	0309      	lsls	r1, r1, #12
10014d96:	4c13      	ldr	r4, [pc, #76]	; (10014de4 <__aeabi_dadd+0x650>)
10014d98:	2500      	movs	r5, #0
10014d9a:	e5bb      	b.n	10014914 <__aeabi_dadd+0x180>
10014d9c:	430d      	orrs	r5, r1
10014d9e:	1e69      	subs	r1, r5, #1
10014da0:	418d      	sbcs	r5, r1
10014da2:	2100      	movs	r1, #0
10014da4:	b2ed      	uxtb	r5, r5
10014da6:	e769      	b.n	10014c7c <__aeabi_dadd+0x4e8>
10014da8:	0001      	movs	r1, r0
10014daa:	0015      	movs	r5, r2
10014dac:	4c0d      	ldr	r4, [pc, #52]	; (10014de4 <__aeabi_dadd+0x650>)
10014dae:	e51a      	b.n	100147e6 <__aeabi_dadd+0x52>
10014db0:	0001      	movs	r1, r0
10014db2:	0015      	movs	r5, r2
10014db4:	e517      	b.n	100147e6 <__aeabi_dadd+0x52>
10014db6:	001c      	movs	r4, r3
10014db8:	000f      	movs	r7, r1
10014dba:	3c20      	subs	r4, #32
10014dbc:	40e7      	lsrs	r7, r4
10014dbe:	003c      	movs	r4, r7
10014dc0:	2b20      	cmp	r3, #32
10014dc2:	d00c      	beq.n	10014dde <__aeabi_dadd+0x64a>
10014dc4:	2740      	movs	r7, #64	; 0x40
10014dc6:	1afb      	subs	r3, r7, r3
10014dc8:	4099      	lsls	r1, r3
10014dca:	430d      	orrs	r5, r1
10014dcc:	1e69      	subs	r1, r5, #1
10014dce:	418d      	sbcs	r5, r1
10014dd0:	2100      	movs	r1, #0
10014dd2:	4325      	orrs	r5, r4
10014dd4:	e752      	b.n	10014c7c <__aeabi_dadd+0x4e8>
10014dd6:	2100      	movs	r1, #0
10014dd8:	e7d4      	b.n	10014d84 <__aeabi_dadd+0x5f0>
10014dda:	001d      	movs	r5, r3
10014ddc:	e592      	b.n	10014904 <__aeabi_dadd+0x170>
10014dde:	2100      	movs	r1, #0
10014de0:	e7f3      	b.n	10014dca <__aeabi_dadd+0x636>
10014de2:	46c0      	nop			; (mov r8, r8)
10014de4:	000007ff 	.word	0x000007ff
10014de8:	ff7fffff 	.word	0xff7fffff

10014dec <__aeabi_ddiv>:
10014dec:	b5f0      	push	{r4, r5, r6, r7, lr}
10014dee:	4656      	mov	r6, sl
10014df0:	464d      	mov	r5, r9
10014df2:	4644      	mov	r4, r8
10014df4:	465f      	mov	r7, fp
10014df6:	b4f0      	push	{r4, r5, r6, r7}
10014df8:	001d      	movs	r5, r3
10014dfa:	030e      	lsls	r6, r1, #12
10014dfc:	004c      	lsls	r4, r1, #1
10014dfe:	0fcb      	lsrs	r3, r1, #31
10014e00:	b087      	sub	sp, #28
10014e02:	0007      	movs	r7, r0
10014e04:	4692      	mov	sl, r2
10014e06:	4681      	mov	r9, r0
10014e08:	0b36      	lsrs	r6, r6, #12
10014e0a:	0d64      	lsrs	r4, r4, #21
10014e0c:	4698      	mov	r8, r3
10014e0e:	d06a      	beq.n	10014ee6 <__aeabi_ddiv+0xfa>
10014e10:	4b6d      	ldr	r3, [pc, #436]	; (10014fc8 <__aeabi_ddiv+0x1dc>)
10014e12:	429c      	cmp	r4, r3
10014e14:	d035      	beq.n	10014e82 <__aeabi_ddiv+0x96>
10014e16:	2280      	movs	r2, #128	; 0x80
10014e18:	0f43      	lsrs	r3, r0, #29
10014e1a:	0412      	lsls	r2, r2, #16
10014e1c:	4313      	orrs	r3, r2
10014e1e:	00f6      	lsls	r6, r6, #3
10014e20:	431e      	orrs	r6, r3
10014e22:	00c3      	lsls	r3, r0, #3
10014e24:	4699      	mov	r9, r3
10014e26:	4b69      	ldr	r3, [pc, #420]	; (10014fcc <__aeabi_ddiv+0x1e0>)
10014e28:	2700      	movs	r7, #0
10014e2a:	469c      	mov	ip, r3
10014e2c:	2300      	movs	r3, #0
10014e2e:	4464      	add	r4, ip
10014e30:	9302      	str	r3, [sp, #8]
10014e32:	032b      	lsls	r3, r5, #12
10014e34:	0068      	lsls	r0, r5, #1
10014e36:	0b1b      	lsrs	r3, r3, #12
10014e38:	0fed      	lsrs	r5, r5, #31
10014e3a:	4651      	mov	r1, sl
10014e3c:	469b      	mov	fp, r3
10014e3e:	0d40      	lsrs	r0, r0, #21
10014e40:	9500      	str	r5, [sp, #0]
10014e42:	d100      	bne.n	10014e46 <__aeabi_ddiv+0x5a>
10014e44:	e078      	b.n	10014f38 <__aeabi_ddiv+0x14c>
10014e46:	4b60      	ldr	r3, [pc, #384]	; (10014fc8 <__aeabi_ddiv+0x1dc>)
10014e48:	4298      	cmp	r0, r3
10014e4a:	d06c      	beq.n	10014f26 <__aeabi_ddiv+0x13a>
10014e4c:	465b      	mov	r3, fp
10014e4e:	00da      	lsls	r2, r3, #3
10014e50:	0f4b      	lsrs	r3, r1, #29
10014e52:	2180      	movs	r1, #128	; 0x80
10014e54:	0409      	lsls	r1, r1, #16
10014e56:	430b      	orrs	r3, r1
10014e58:	4313      	orrs	r3, r2
10014e5a:	469b      	mov	fp, r3
10014e5c:	4653      	mov	r3, sl
10014e5e:	00d9      	lsls	r1, r3, #3
10014e60:	4b5a      	ldr	r3, [pc, #360]	; (10014fcc <__aeabi_ddiv+0x1e0>)
10014e62:	469c      	mov	ip, r3
10014e64:	2300      	movs	r3, #0
10014e66:	4460      	add	r0, ip
10014e68:	4642      	mov	r2, r8
10014e6a:	1a20      	subs	r0, r4, r0
10014e6c:	406a      	eors	r2, r5
10014e6e:	4692      	mov	sl, r2
10014e70:	9001      	str	r0, [sp, #4]
10014e72:	431f      	orrs	r7, r3
10014e74:	2f0f      	cmp	r7, #15
10014e76:	d900      	bls.n	10014e7a <__aeabi_ddiv+0x8e>
10014e78:	e0b0      	b.n	10014fdc <__aeabi_ddiv+0x1f0>
10014e7a:	4855      	ldr	r0, [pc, #340]	; (10014fd0 <__aeabi_ddiv+0x1e4>)
10014e7c:	00bf      	lsls	r7, r7, #2
10014e7e:	59c0      	ldr	r0, [r0, r7]
10014e80:	4687      	mov	pc, r0
10014e82:	4337      	orrs	r7, r6
10014e84:	d000      	beq.n	10014e88 <__aeabi_ddiv+0x9c>
10014e86:	e088      	b.n	10014f9a <__aeabi_ddiv+0x1ae>
10014e88:	2300      	movs	r3, #0
10014e8a:	4699      	mov	r9, r3
10014e8c:	3302      	adds	r3, #2
10014e8e:	2708      	movs	r7, #8
10014e90:	2600      	movs	r6, #0
10014e92:	9302      	str	r3, [sp, #8]
10014e94:	e7cd      	b.n	10014e32 <__aeabi_ddiv+0x46>
10014e96:	4643      	mov	r3, r8
10014e98:	46b3      	mov	fp, r6
10014e9a:	4649      	mov	r1, r9
10014e9c:	9300      	str	r3, [sp, #0]
10014e9e:	9b02      	ldr	r3, [sp, #8]
10014ea0:	9a00      	ldr	r2, [sp, #0]
10014ea2:	4692      	mov	sl, r2
10014ea4:	2b02      	cmp	r3, #2
10014ea6:	d000      	beq.n	10014eaa <__aeabi_ddiv+0xbe>
10014ea8:	e1bf      	b.n	1001522a <__aeabi_ddiv+0x43e>
10014eaa:	2100      	movs	r1, #0
10014eac:	4653      	mov	r3, sl
10014eae:	2201      	movs	r2, #1
10014eb0:	2600      	movs	r6, #0
10014eb2:	4689      	mov	r9, r1
10014eb4:	401a      	ands	r2, r3
10014eb6:	4b44      	ldr	r3, [pc, #272]	; (10014fc8 <__aeabi_ddiv+0x1dc>)
10014eb8:	2100      	movs	r1, #0
10014eba:	0336      	lsls	r6, r6, #12
10014ebc:	0d0c      	lsrs	r4, r1, #20
10014ebe:	0524      	lsls	r4, r4, #20
10014ec0:	0b36      	lsrs	r6, r6, #12
10014ec2:	4326      	orrs	r6, r4
10014ec4:	4c43      	ldr	r4, [pc, #268]	; (10014fd4 <__aeabi_ddiv+0x1e8>)
10014ec6:	051b      	lsls	r3, r3, #20
10014ec8:	4026      	ands	r6, r4
10014eca:	431e      	orrs	r6, r3
10014ecc:	0076      	lsls	r6, r6, #1
10014ece:	07d2      	lsls	r2, r2, #31
10014ed0:	0876      	lsrs	r6, r6, #1
10014ed2:	4316      	orrs	r6, r2
10014ed4:	4648      	mov	r0, r9
10014ed6:	0031      	movs	r1, r6
10014ed8:	b007      	add	sp, #28
10014eda:	bc3c      	pop	{r2, r3, r4, r5}
10014edc:	4690      	mov	r8, r2
10014ede:	4699      	mov	r9, r3
10014ee0:	46a2      	mov	sl, r4
10014ee2:	46ab      	mov	fp, r5
10014ee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
10014ee6:	0033      	movs	r3, r6
10014ee8:	4303      	orrs	r3, r0
10014eea:	d04f      	beq.n	10014f8c <__aeabi_ddiv+0x1a0>
10014eec:	2e00      	cmp	r6, #0
10014eee:	d100      	bne.n	10014ef2 <__aeabi_ddiv+0x106>
10014ef0:	e1bc      	b.n	1001526c <__aeabi_ddiv+0x480>
10014ef2:	0030      	movs	r0, r6
10014ef4:	f001 fb1c 	bl	10016530 <__clzsi2>
10014ef8:	0003      	movs	r3, r0
10014efa:	3b0b      	subs	r3, #11
10014efc:	2b1c      	cmp	r3, #28
10014efe:	dd00      	ble.n	10014f02 <__aeabi_ddiv+0x116>
10014f00:	e1ad      	b.n	1001525e <__aeabi_ddiv+0x472>
10014f02:	221d      	movs	r2, #29
10014f04:	0001      	movs	r1, r0
10014f06:	1ad3      	subs	r3, r2, r3
10014f08:	3908      	subs	r1, #8
10014f0a:	003a      	movs	r2, r7
10014f0c:	408f      	lsls	r7, r1
10014f0e:	408e      	lsls	r6, r1
10014f10:	40da      	lsrs	r2, r3
10014f12:	46b9      	mov	r9, r7
10014f14:	4316      	orrs	r6, r2
10014f16:	4b30      	ldr	r3, [pc, #192]	; (10014fd8 <__aeabi_ddiv+0x1ec>)
10014f18:	2700      	movs	r7, #0
10014f1a:	469c      	mov	ip, r3
10014f1c:	2300      	movs	r3, #0
10014f1e:	4460      	add	r0, ip
10014f20:	4244      	negs	r4, r0
10014f22:	9302      	str	r3, [sp, #8]
10014f24:	e785      	b.n	10014e32 <__aeabi_ddiv+0x46>
10014f26:	4653      	mov	r3, sl
10014f28:	465a      	mov	r2, fp
10014f2a:	4313      	orrs	r3, r2
10014f2c:	d12c      	bne.n	10014f88 <__aeabi_ddiv+0x19c>
10014f2e:	2300      	movs	r3, #0
10014f30:	2100      	movs	r1, #0
10014f32:	469b      	mov	fp, r3
10014f34:	3302      	adds	r3, #2
10014f36:	e797      	b.n	10014e68 <__aeabi_ddiv+0x7c>
10014f38:	430b      	orrs	r3, r1
10014f3a:	d020      	beq.n	10014f7e <__aeabi_ddiv+0x192>
10014f3c:	465b      	mov	r3, fp
10014f3e:	2b00      	cmp	r3, #0
10014f40:	d100      	bne.n	10014f44 <__aeabi_ddiv+0x158>
10014f42:	e19e      	b.n	10015282 <__aeabi_ddiv+0x496>
10014f44:	4658      	mov	r0, fp
10014f46:	f001 faf3 	bl	10016530 <__clzsi2>
10014f4a:	0003      	movs	r3, r0
10014f4c:	3b0b      	subs	r3, #11
10014f4e:	2b1c      	cmp	r3, #28
10014f50:	dd00      	ble.n	10014f54 <__aeabi_ddiv+0x168>
10014f52:	e18f      	b.n	10015274 <__aeabi_ddiv+0x488>
10014f54:	0002      	movs	r2, r0
10014f56:	4659      	mov	r1, fp
10014f58:	3a08      	subs	r2, #8
10014f5a:	4091      	lsls	r1, r2
10014f5c:	468b      	mov	fp, r1
10014f5e:	211d      	movs	r1, #29
10014f60:	1acb      	subs	r3, r1, r3
10014f62:	4651      	mov	r1, sl
10014f64:	40d9      	lsrs	r1, r3
10014f66:	000b      	movs	r3, r1
10014f68:	4659      	mov	r1, fp
10014f6a:	430b      	orrs	r3, r1
10014f6c:	4651      	mov	r1, sl
10014f6e:	469b      	mov	fp, r3
10014f70:	4091      	lsls	r1, r2
10014f72:	4b19      	ldr	r3, [pc, #100]	; (10014fd8 <__aeabi_ddiv+0x1ec>)
10014f74:	469c      	mov	ip, r3
10014f76:	4460      	add	r0, ip
10014f78:	4240      	negs	r0, r0
10014f7a:	2300      	movs	r3, #0
10014f7c:	e774      	b.n	10014e68 <__aeabi_ddiv+0x7c>
10014f7e:	2300      	movs	r3, #0
10014f80:	2100      	movs	r1, #0
10014f82:	469b      	mov	fp, r3
10014f84:	3301      	adds	r3, #1
10014f86:	e76f      	b.n	10014e68 <__aeabi_ddiv+0x7c>
10014f88:	2303      	movs	r3, #3
10014f8a:	e76d      	b.n	10014e68 <__aeabi_ddiv+0x7c>
10014f8c:	2300      	movs	r3, #0
10014f8e:	4699      	mov	r9, r3
10014f90:	3301      	adds	r3, #1
10014f92:	2704      	movs	r7, #4
10014f94:	2600      	movs	r6, #0
10014f96:	9302      	str	r3, [sp, #8]
10014f98:	e74b      	b.n	10014e32 <__aeabi_ddiv+0x46>
10014f9a:	2303      	movs	r3, #3
10014f9c:	270c      	movs	r7, #12
10014f9e:	9302      	str	r3, [sp, #8]
10014fa0:	e747      	b.n	10014e32 <__aeabi_ddiv+0x46>
10014fa2:	2201      	movs	r2, #1
10014fa4:	1ad5      	subs	r5, r2, r3
10014fa6:	2d38      	cmp	r5, #56	; 0x38
10014fa8:	dc00      	bgt.n	10014fac <__aeabi_ddiv+0x1c0>
10014faa:	e1b0      	b.n	1001530e <__aeabi_ddiv+0x522>
10014fac:	4653      	mov	r3, sl
10014fae:	401a      	ands	r2, r3
10014fb0:	2100      	movs	r1, #0
10014fb2:	2300      	movs	r3, #0
10014fb4:	2600      	movs	r6, #0
10014fb6:	4689      	mov	r9, r1
10014fb8:	e77e      	b.n	10014eb8 <__aeabi_ddiv+0xcc>
10014fba:	2300      	movs	r3, #0
10014fbc:	2680      	movs	r6, #128	; 0x80
10014fbe:	4699      	mov	r9, r3
10014fc0:	2200      	movs	r2, #0
10014fc2:	0336      	lsls	r6, r6, #12
10014fc4:	4b00      	ldr	r3, [pc, #0]	; (10014fc8 <__aeabi_ddiv+0x1dc>)
10014fc6:	e777      	b.n	10014eb8 <__aeabi_ddiv+0xcc>
10014fc8:	000007ff 	.word	0x000007ff
10014fcc:	fffffc01 	.word	0xfffffc01
10014fd0:	10018798 	.word	0x10018798
10014fd4:	800fffff 	.word	0x800fffff
10014fd8:	000003f3 	.word	0x000003f3
10014fdc:	455e      	cmp	r6, fp
10014fde:	d900      	bls.n	10014fe2 <__aeabi_ddiv+0x1f6>
10014fe0:	e172      	b.n	100152c8 <__aeabi_ddiv+0x4dc>
10014fe2:	d100      	bne.n	10014fe6 <__aeabi_ddiv+0x1fa>
10014fe4:	e16d      	b.n	100152c2 <__aeabi_ddiv+0x4d6>
10014fe6:	9b01      	ldr	r3, [sp, #4]
10014fe8:	464d      	mov	r5, r9
10014fea:	3b01      	subs	r3, #1
10014fec:	9301      	str	r3, [sp, #4]
10014fee:	2300      	movs	r3, #0
10014ff0:	0034      	movs	r4, r6
10014ff2:	9302      	str	r3, [sp, #8]
10014ff4:	465b      	mov	r3, fp
10014ff6:	021e      	lsls	r6, r3, #8
10014ff8:	0e0b      	lsrs	r3, r1, #24
10014ffa:	431e      	orrs	r6, r3
10014ffc:	020b      	lsls	r3, r1, #8
10014ffe:	9303      	str	r3, [sp, #12]
10015000:	0c33      	lsrs	r3, r6, #16
10015002:	4699      	mov	r9, r3
10015004:	0433      	lsls	r3, r6, #16
10015006:	0c1b      	lsrs	r3, r3, #16
10015008:	4649      	mov	r1, r9
1001500a:	0020      	movs	r0, r4
1001500c:	9300      	str	r3, [sp, #0]
1001500e:	f7fe fad7 	bl	100135c0 <__aeabi_uidiv>
10015012:	9b00      	ldr	r3, [sp, #0]
10015014:	0037      	movs	r7, r6
10015016:	4343      	muls	r3, r0
10015018:	0006      	movs	r6, r0
1001501a:	4649      	mov	r1, r9
1001501c:	0020      	movs	r0, r4
1001501e:	4698      	mov	r8, r3
10015020:	f7fe fb54 	bl	100136cc <__aeabi_uidivmod>
10015024:	0c2c      	lsrs	r4, r5, #16
10015026:	0409      	lsls	r1, r1, #16
10015028:	430c      	orrs	r4, r1
1001502a:	45a0      	cmp	r8, r4
1001502c:	d909      	bls.n	10015042 <__aeabi_ddiv+0x256>
1001502e:	19e4      	adds	r4, r4, r7
10015030:	1e73      	subs	r3, r6, #1
10015032:	42a7      	cmp	r7, r4
10015034:	d900      	bls.n	10015038 <__aeabi_ddiv+0x24c>
10015036:	e15c      	b.n	100152f2 <__aeabi_ddiv+0x506>
10015038:	45a0      	cmp	r8, r4
1001503a:	d800      	bhi.n	1001503e <__aeabi_ddiv+0x252>
1001503c:	e159      	b.n	100152f2 <__aeabi_ddiv+0x506>
1001503e:	3e02      	subs	r6, #2
10015040:	19e4      	adds	r4, r4, r7
10015042:	4643      	mov	r3, r8
10015044:	1ae4      	subs	r4, r4, r3
10015046:	4649      	mov	r1, r9
10015048:	0020      	movs	r0, r4
1001504a:	f7fe fab9 	bl	100135c0 <__aeabi_uidiv>
1001504e:	0003      	movs	r3, r0
10015050:	9a00      	ldr	r2, [sp, #0]
10015052:	4680      	mov	r8, r0
10015054:	4353      	muls	r3, r2
10015056:	4649      	mov	r1, r9
10015058:	0020      	movs	r0, r4
1001505a:	469b      	mov	fp, r3
1001505c:	f7fe fb36 	bl	100136cc <__aeabi_uidivmod>
10015060:	042a      	lsls	r2, r5, #16
10015062:	0409      	lsls	r1, r1, #16
10015064:	0c12      	lsrs	r2, r2, #16
10015066:	430a      	orrs	r2, r1
10015068:	4593      	cmp	fp, r2
1001506a:	d90d      	bls.n	10015088 <__aeabi_ddiv+0x29c>
1001506c:	4643      	mov	r3, r8
1001506e:	19d2      	adds	r2, r2, r7
10015070:	3b01      	subs	r3, #1
10015072:	4297      	cmp	r7, r2
10015074:	d900      	bls.n	10015078 <__aeabi_ddiv+0x28c>
10015076:	e13a      	b.n	100152ee <__aeabi_ddiv+0x502>
10015078:	4593      	cmp	fp, r2
1001507a:	d800      	bhi.n	1001507e <__aeabi_ddiv+0x292>
1001507c:	e137      	b.n	100152ee <__aeabi_ddiv+0x502>
1001507e:	2302      	movs	r3, #2
10015080:	425b      	negs	r3, r3
10015082:	469c      	mov	ip, r3
10015084:	19d2      	adds	r2, r2, r7
10015086:	44e0      	add	r8, ip
10015088:	465b      	mov	r3, fp
1001508a:	1ad2      	subs	r2, r2, r3
1001508c:	4643      	mov	r3, r8
1001508e:	0436      	lsls	r6, r6, #16
10015090:	4333      	orrs	r3, r6
10015092:	469b      	mov	fp, r3
10015094:	9903      	ldr	r1, [sp, #12]
10015096:	0c18      	lsrs	r0, r3, #16
10015098:	0c0b      	lsrs	r3, r1, #16
1001509a:	001d      	movs	r5, r3
1001509c:	9305      	str	r3, [sp, #20]
1001509e:	0409      	lsls	r1, r1, #16
100150a0:	465b      	mov	r3, fp
100150a2:	0c09      	lsrs	r1, r1, #16
100150a4:	000c      	movs	r4, r1
100150a6:	041b      	lsls	r3, r3, #16
100150a8:	0c1b      	lsrs	r3, r3, #16
100150aa:	4344      	muls	r4, r0
100150ac:	9104      	str	r1, [sp, #16]
100150ae:	4359      	muls	r1, r3
100150b0:	436b      	muls	r3, r5
100150b2:	4368      	muls	r0, r5
100150b4:	191b      	adds	r3, r3, r4
100150b6:	0c0d      	lsrs	r5, r1, #16
100150b8:	18eb      	adds	r3, r5, r3
100150ba:	429c      	cmp	r4, r3
100150bc:	d903      	bls.n	100150c6 <__aeabi_ddiv+0x2da>
100150be:	2480      	movs	r4, #128	; 0x80
100150c0:	0264      	lsls	r4, r4, #9
100150c2:	46a4      	mov	ip, r4
100150c4:	4460      	add	r0, ip
100150c6:	0c1c      	lsrs	r4, r3, #16
100150c8:	0409      	lsls	r1, r1, #16
100150ca:	041b      	lsls	r3, r3, #16
100150cc:	0c09      	lsrs	r1, r1, #16
100150ce:	1820      	adds	r0, r4, r0
100150d0:	185d      	adds	r5, r3, r1
100150d2:	4282      	cmp	r2, r0
100150d4:	d200      	bcs.n	100150d8 <__aeabi_ddiv+0x2ec>
100150d6:	e0de      	b.n	10015296 <__aeabi_ddiv+0x4aa>
100150d8:	d100      	bne.n	100150dc <__aeabi_ddiv+0x2f0>
100150da:	e0d7      	b.n	1001528c <__aeabi_ddiv+0x4a0>
100150dc:	1a16      	subs	r6, r2, r0
100150de:	9b02      	ldr	r3, [sp, #8]
100150e0:	469c      	mov	ip, r3
100150e2:	1b5d      	subs	r5, r3, r5
100150e4:	45ac      	cmp	ip, r5
100150e6:	419b      	sbcs	r3, r3
100150e8:	425b      	negs	r3, r3
100150ea:	1af6      	subs	r6, r6, r3
100150ec:	42b7      	cmp	r7, r6
100150ee:	d100      	bne.n	100150f2 <__aeabi_ddiv+0x306>
100150f0:	e106      	b.n	10015300 <__aeabi_ddiv+0x514>
100150f2:	4649      	mov	r1, r9
100150f4:	0030      	movs	r0, r6
100150f6:	f7fe fa63 	bl	100135c0 <__aeabi_uidiv>
100150fa:	9b00      	ldr	r3, [sp, #0]
100150fc:	0004      	movs	r4, r0
100150fe:	4343      	muls	r3, r0
10015100:	4649      	mov	r1, r9
10015102:	0030      	movs	r0, r6
10015104:	4698      	mov	r8, r3
10015106:	f7fe fae1 	bl	100136cc <__aeabi_uidivmod>
1001510a:	0c2e      	lsrs	r6, r5, #16
1001510c:	0409      	lsls	r1, r1, #16
1001510e:	430e      	orrs	r6, r1
10015110:	45b0      	cmp	r8, r6
10015112:	d909      	bls.n	10015128 <__aeabi_ddiv+0x33c>
10015114:	19f6      	adds	r6, r6, r7
10015116:	1e63      	subs	r3, r4, #1
10015118:	42b7      	cmp	r7, r6
1001511a:	d900      	bls.n	1001511e <__aeabi_ddiv+0x332>
1001511c:	e0f3      	b.n	10015306 <__aeabi_ddiv+0x51a>
1001511e:	45b0      	cmp	r8, r6
10015120:	d800      	bhi.n	10015124 <__aeabi_ddiv+0x338>
10015122:	e0f0      	b.n	10015306 <__aeabi_ddiv+0x51a>
10015124:	3c02      	subs	r4, #2
10015126:	19f6      	adds	r6, r6, r7
10015128:	4643      	mov	r3, r8
1001512a:	1af3      	subs	r3, r6, r3
1001512c:	4649      	mov	r1, r9
1001512e:	0018      	movs	r0, r3
10015130:	9302      	str	r3, [sp, #8]
10015132:	f7fe fa45 	bl	100135c0 <__aeabi_uidiv>
10015136:	9b00      	ldr	r3, [sp, #0]
10015138:	0006      	movs	r6, r0
1001513a:	4343      	muls	r3, r0
1001513c:	4649      	mov	r1, r9
1001513e:	9802      	ldr	r0, [sp, #8]
10015140:	4698      	mov	r8, r3
10015142:	f7fe fac3 	bl	100136cc <__aeabi_uidivmod>
10015146:	042d      	lsls	r5, r5, #16
10015148:	0409      	lsls	r1, r1, #16
1001514a:	0c2d      	lsrs	r5, r5, #16
1001514c:	430d      	orrs	r5, r1
1001514e:	45a8      	cmp	r8, r5
10015150:	d909      	bls.n	10015166 <__aeabi_ddiv+0x37a>
10015152:	19ed      	adds	r5, r5, r7
10015154:	1e73      	subs	r3, r6, #1
10015156:	42af      	cmp	r7, r5
10015158:	d900      	bls.n	1001515c <__aeabi_ddiv+0x370>
1001515a:	e0d6      	b.n	1001530a <__aeabi_ddiv+0x51e>
1001515c:	45a8      	cmp	r8, r5
1001515e:	d800      	bhi.n	10015162 <__aeabi_ddiv+0x376>
10015160:	e0d3      	b.n	1001530a <__aeabi_ddiv+0x51e>
10015162:	3e02      	subs	r6, #2
10015164:	19ed      	adds	r5, r5, r7
10015166:	0424      	lsls	r4, r4, #16
10015168:	0021      	movs	r1, r4
1001516a:	4643      	mov	r3, r8
1001516c:	4331      	orrs	r1, r6
1001516e:	9e04      	ldr	r6, [sp, #16]
10015170:	9a05      	ldr	r2, [sp, #20]
10015172:	0030      	movs	r0, r6
10015174:	1aed      	subs	r5, r5, r3
10015176:	040b      	lsls	r3, r1, #16
10015178:	0c0c      	lsrs	r4, r1, #16
1001517a:	0c1b      	lsrs	r3, r3, #16
1001517c:	4358      	muls	r0, r3
1001517e:	4366      	muls	r6, r4
10015180:	4353      	muls	r3, r2
10015182:	4354      	muls	r4, r2
10015184:	199a      	adds	r2, r3, r6
10015186:	0c03      	lsrs	r3, r0, #16
10015188:	189b      	adds	r3, r3, r2
1001518a:	429e      	cmp	r6, r3
1001518c:	d903      	bls.n	10015196 <__aeabi_ddiv+0x3aa>
1001518e:	2280      	movs	r2, #128	; 0x80
10015190:	0252      	lsls	r2, r2, #9
10015192:	4694      	mov	ip, r2
10015194:	4464      	add	r4, ip
10015196:	0c1a      	lsrs	r2, r3, #16
10015198:	0400      	lsls	r0, r0, #16
1001519a:	041b      	lsls	r3, r3, #16
1001519c:	0c00      	lsrs	r0, r0, #16
1001519e:	1914      	adds	r4, r2, r4
100151a0:	181b      	adds	r3, r3, r0
100151a2:	42a5      	cmp	r5, r4
100151a4:	d350      	bcc.n	10015248 <__aeabi_ddiv+0x45c>
100151a6:	d04d      	beq.n	10015244 <__aeabi_ddiv+0x458>
100151a8:	2301      	movs	r3, #1
100151aa:	4319      	orrs	r1, r3
100151ac:	4a96      	ldr	r2, [pc, #600]	; (10015408 <__aeabi_ddiv+0x61c>)
100151ae:	9b01      	ldr	r3, [sp, #4]
100151b0:	4694      	mov	ip, r2
100151b2:	4463      	add	r3, ip
100151b4:	2b00      	cmp	r3, #0
100151b6:	dc00      	bgt.n	100151ba <__aeabi_ddiv+0x3ce>
100151b8:	e6f3      	b.n	10014fa2 <__aeabi_ddiv+0x1b6>
100151ba:	074a      	lsls	r2, r1, #29
100151bc:	d009      	beq.n	100151d2 <__aeabi_ddiv+0x3e6>
100151be:	220f      	movs	r2, #15
100151c0:	400a      	ands	r2, r1
100151c2:	2a04      	cmp	r2, #4
100151c4:	d005      	beq.n	100151d2 <__aeabi_ddiv+0x3e6>
100151c6:	1d0a      	adds	r2, r1, #4
100151c8:	428a      	cmp	r2, r1
100151ca:	4189      	sbcs	r1, r1
100151cc:	4249      	negs	r1, r1
100151ce:	448b      	add	fp, r1
100151d0:	0011      	movs	r1, r2
100151d2:	465a      	mov	r2, fp
100151d4:	01d2      	lsls	r2, r2, #7
100151d6:	d508      	bpl.n	100151ea <__aeabi_ddiv+0x3fe>
100151d8:	465a      	mov	r2, fp
100151da:	4b8c      	ldr	r3, [pc, #560]	; (1001540c <__aeabi_ddiv+0x620>)
100151dc:	401a      	ands	r2, r3
100151de:	4693      	mov	fp, r2
100151e0:	2280      	movs	r2, #128	; 0x80
100151e2:	00d2      	lsls	r2, r2, #3
100151e4:	4694      	mov	ip, r2
100151e6:	9b01      	ldr	r3, [sp, #4]
100151e8:	4463      	add	r3, ip
100151ea:	4a89      	ldr	r2, [pc, #548]	; (10015410 <__aeabi_ddiv+0x624>)
100151ec:	4293      	cmp	r3, r2
100151ee:	dd00      	ble.n	100151f2 <__aeabi_ddiv+0x406>
100151f0:	e65b      	b.n	10014eaa <__aeabi_ddiv+0xbe>
100151f2:	465a      	mov	r2, fp
100151f4:	08c9      	lsrs	r1, r1, #3
100151f6:	0750      	lsls	r0, r2, #29
100151f8:	4308      	orrs	r0, r1
100151fa:	0256      	lsls	r6, r2, #9
100151fc:	4651      	mov	r1, sl
100151fe:	2201      	movs	r2, #1
10015200:	055b      	lsls	r3, r3, #21
10015202:	4681      	mov	r9, r0
10015204:	0b36      	lsrs	r6, r6, #12
10015206:	0d5b      	lsrs	r3, r3, #21
10015208:	400a      	ands	r2, r1
1001520a:	e655      	b.n	10014eb8 <__aeabi_ddiv+0xcc>
1001520c:	2380      	movs	r3, #128	; 0x80
1001520e:	031b      	lsls	r3, r3, #12
10015210:	421e      	tst	r6, r3
10015212:	d011      	beq.n	10015238 <__aeabi_ddiv+0x44c>
10015214:	465a      	mov	r2, fp
10015216:	421a      	tst	r2, r3
10015218:	d10e      	bne.n	10015238 <__aeabi_ddiv+0x44c>
1001521a:	465e      	mov	r6, fp
1001521c:	431e      	orrs	r6, r3
1001521e:	0336      	lsls	r6, r6, #12
10015220:	0b36      	lsrs	r6, r6, #12
10015222:	002a      	movs	r2, r5
10015224:	4689      	mov	r9, r1
10015226:	4b7b      	ldr	r3, [pc, #492]	; (10015414 <__aeabi_ddiv+0x628>)
10015228:	e646      	b.n	10014eb8 <__aeabi_ddiv+0xcc>
1001522a:	2b03      	cmp	r3, #3
1001522c:	d100      	bne.n	10015230 <__aeabi_ddiv+0x444>
1001522e:	e0e1      	b.n	100153f4 <__aeabi_ddiv+0x608>
10015230:	2b01      	cmp	r3, #1
10015232:	d1bb      	bne.n	100151ac <__aeabi_ddiv+0x3c0>
10015234:	401a      	ands	r2, r3
10015236:	e6bb      	b.n	10014fb0 <__aeabi_ddiv+0x1c4>
10015238:	431e      	orrs	r6, r3
1001523a:	0336      	lsls	r6, r6, #12
1001523c:	0b36      	lsrs	r6, r6, #12
1001523e:	4642      	mov	r2, r8
10015240:	4b74      	ldr	r3, [pc, #464]	; (10015414 <__aeabi_ddiv+0x628>)
10015242:	e639      	b.n	10014eb8 <__aeabi_ddiv+0xcc>
10015244:	2b00      	cmp	r3, #0
10015246:	d0b1      	beq.n	100151ac <__aeabi_ddiv+0x3c0>
10015248:	197d      	adds	r5, r7, r5
1001524a:	1e4a      	subs	r2, r1, #1
1001524c:	42af      	cmp	r7, r5
1001524e:	d952      	bls.n	100152f6 <__aeabi_ddiv+0x50a>
10015250:	0011      	movs	r1, r2
10015252:	42a5      	cmp	r5, r4
10015254:	d1a8      	bne.n	100151a8 <__aeabi_ddiv+0x3bc>
10015256:	9a03      	ldr	r2, [sp, #12]
10015258:	429a      	cmp	r2, r3
1001525a:	d1a5      	bne.n	100151a8 <__aeabi_ddiv+0x3bc>
1001525c:	e7a6      	b.n	100151ac <__aeabi_ddiv+0x3c0>
1001525e:	0003      	movs	r3, r0
10015260:	003e      	movs	r6, r7
10015262:	3b28      	subs	r3, #40	; 0x28
10015264:	409e      	lsls	r6, r3
10015266:	2300      	movs	r3, #0
10015268:	4699      	mov	r9, r3
1001526a:	e654      	b.n	10014f16 <__aeabi_ddiv+0x12a>
1001526c:	f001 f960 	bl	10016530 <__clzsi2>
10015270:	3020      	adds	r0, #32
10015272:	e641      	b.n	10014ef8 <__aeabi_ddiv+0x10c>
10015274:	0003      	movs	r3, r0
10015276:	4652      	mov	r2, sl
10015278:	3b28      	subs	r3, #40	; 0x28
1001527a:	409a      	lsls	r2, r3
1001527c:	2100      	movs	r1, #0
1001527e:	4693      	mov	fp, r2
10015280:	e677      	b.n	10014f72 <__aeabi_ddiv+0x186>
10015282:	4650      	mov	r0, sl
10015284:	f001 f954 	bl	10016530 <__clzsi2>
10015288:	3020      	adds	r0, #32
1001528a:	e65e      	b.n	10014f4a <__aeabi_ddiv+0x15e>
1001528c:	9b02      	ldr	r3, [sp, #8]
1001528e:	2600      	movs	r6, #0
10015290:	42ab      	cmp	r3, r5
10015292:	d300      	bcc.n	10015296 <__aeabi_ddiv+0x4aa>
10015294:	e723      	b.n	100150de <__aeabi_ddiv+0x2f2>
10015296:	9e03      	ldr	r6, [sp, #12]
10015298:	9902      	ldr	r1, [sp, #8]
1001529a:	46b4      	mov	ip, r6
1001529c:	4461      	add	r1, ip
1001529e:	4688      	mov	r8, r1
100152a0:	45b0      	cmp	r8, r6
100152a2:	41b6      	sbcs	r6, r6
100152a4:	465b      	mov	r3, fp
100152a6:	4276      	negs	r6, r6
100152a8:	19f6      	adds	r6, r6, r7
100152aa:	18b2      	adds	r2, r6, r2
100152ac:	3b01      	subs	r3, #1
100152ae:	9102      	str	r1, [sp, #8]
100152b0:	4297      	cmp	r7, r2
100152b2:	d213      	bcs.n	100152dc <__aeabi_ddiv+0x4f0>
100152b4:	4290      	cmp	r0, r2
100152b6:	d84f      	bhi.n	10015358 <__aeabi_ddiv+0x56c>
100152b8:	d100      	bne.n	100152bc <__aeabi_ddiv+0x4d0>
100152ba:	e08e      	b.n	100153da <__aeabi_ddiv+0x5ee>
100152bc:	1a16      	subs	r6, r2, r0
100152be:	469b      	mov	fp, r3
100152c0:	e70d      	b.n	100150de <__aeabi_ddiv+0x2f2>
100152c2:	4589      	cmp	r9, r1
100152c4:	d200      	bcs.n	100152c8 <__aeabi_ddiv+0x4dc>
100152c6:	e68e      	b.n	10014fe6 <__aeabi_ddiv+0x1fa>
100152c8:	0874      	lsrs	r4, r6, #1
100152ca:	464b      	mov	r3, r9
100152cc:	07f6      	lsls	r6, r6, #31
100152ce:	0035      	movs	r5, r6
100152d0:	085b      	lsrs	r3, r3, #1
100152d2:	431d      	orrs	r5, r3
100152d4:	464b      	mov	r3, r9
100152d6:	07db      	lsls	r3, r3, #31
100152d8:	9302      	str	r3, [sp, #8]
100152da:	e68b      	b.n	10014ff4 <__aeabi_ddiv+0x208>
100152dc:	4297      	cmp	r7, r2
100152de:	d1ed      	bne.n	100152bc <__aeabi_ddiv+0x4d0>
100152e0:	9903      	ldr	r1, [sp, #12]
100152e2:	9c02      	ldr	r4, [sp, #8]
100152e4:	42a1      	cmp	r1, r4
100152e6:	d9e5      	bls.n	100152b4 <__aeabi_ddiv+0x4c8>
100152e8:	1a3e      	subs	r6, r7, r0
100152ea:	469b      	mov	fp, r3
100152ec:	e6f7      	b.n	100150de <__aeabi_ddiv+0x2f2>
100152ee:	4698      	mov	r8, r3
100152f0:	e6ca      	b.n	10015088 <__aeabi_ddiv+0x29c>
100152f2:	001e      	movs	r6, r3
100152f4:	e6a5      	b.n	10015042 <__aeabi_ddiv+0x256>
100152f6:	42ac      	cmp	r4, r5
100152f8:	d83e      	bhi.n	10015378 <__aeabi_ddiv+0x58c>
100152fa:	d074      	beq.n	100153e6 <__aeabi_ddiv+0x5fa>
100152fc:	0011      	movs	r1, r2
100152fe:	e753      	b.n	100151a8 <__aeabi_ddiv+0x3bc>
10015300:	2101      	movs	r1, #1
10015302:	4249      	negs	r1, r1
10015304:	e752      	b.n	100151ac <__aeabi_ddiv+0x3c0>
10015306:	001c      	movs	r4, r3
10015308:	e70e      	b.n	10015128 <__aeabi_ddiv+0x33c>
1001530a:	001e      	movs	r6, r3
1001530c:	e72b      	b.n	10015166 <__aeabi_ddiv+0x37a>
1001530e:	2d1f      	cmp	r5, #31
10015310:	dc3c      	bgt.n	1001538c <__aeabi_ddiv+0x5a0>
10015312:	2320      	movs	r3, #32
10015314:	000a      	movs	r2, r1
10015316:	4658      	mov	r0, fp
10015318:	1b5b      	subs	r3, r3, r5
1001531a:	4098      	lsls	r0, r3
1001531c:	40ea      	lsrs	r2, r5
1001531e:	4099      	lsls	r1, r3
10015320:	4302      	orrs	r2, r0
10015322:	1e48      	subs	r0, r1, #1
10015324:	4181      	sbcs	r1, r0
10015326:	465e      	mov	r6, fp
10015328:	4311      	orrs	r1, r2
1001532a:	40ee      	lsrs	r6, r5
1001532c:	074b      	lsls	r3, r1, #29
1001532e:	d009      	beq.n	10015344 <__aeabi_ddiv+0x558>
10015330:	230f      	movs	r3, #15
10015332:	400b      	ands	r3, r1
10015334:	2b04      	cmp	r3, #4
10015336:	d005      	beq.n	10015344 <__aeabi_ddiv+0x558>
10015338:	000b      	movs	r3, r1
1001533a:	1d19      	adds	r1, r3, #4
1001533c:	4299      	cmp	r1, r3
1001533e:	419b      	sbcs	r3, r3
10015340:	425b      	negs	r3, r3
10015342:	18f6      	adds	r6, r6, r3
10015344:	0233      	lsls	r3, r6, #8
10015346:	d53c      	bpl.n	100153c2 <__aeabi_ddiv+0x5d6>
10015348:	4653      	mov	r3, sl
1001534a:	2201      	movs	r2, #1
1001534c:	2100      	movs	r1, #0
1001534e:	401a      	ands	r2, r3
10015350:	2600      	movs	r6, #0
10015352:	2301      	movs	r3, #1
10015354:	4689      	mov	r9, r1
10015356:	e5af      	b.n	10014eb8 <__aeabi_ddiv+0xcc>
10015358:	2302      	movs	r3, #2
1001535a:	425b      	negs	r3, r3
1001535c:	469c      	mov	ip, r3
1001535e:	9c03      	ldr	r4, [sp, #12]
10015360:	44e3      	add	fp, ip
10015362:	46a4      	mov	ip, r4
10015364:	9b02      	ldr	r3, [sp, #8]
10015366:	4463      	add	r3, ip
10015368:	4698      	mov	r8, r3
1001536a:	45a0      	cmp	r8, r4
1001536c:	41b6      	sbcs	r6, r6
1001536e:	4276      	negs	r6, r6
10015370:	19f6      	adds	r6, r6, r7
10015372:	9302      	str	r3, [sp, #8]
10015374:	18b2      	adds	r2, r6, r2
10015376:	e6b1      	b.n	100150dc <__aeabi_ddiv+0x2f0>
10015378:	9803      	ldr	r0, [sp, #12]
1001537a:	1e8a      	subs	r2, r1, #2
1001537c:	0041      	lsls	r1, r0, #1
1001537e:	4281      	cmp	r1, r0
10015380:	41b6      	sbcs	r6, r6
10015382:	4276      	negs	r6, r6
10015384:	19f6      	adds	r6, r6, r7
10015386:	19ad      	adds	r5, r5, r6
10015388:	9103      	str	r1, [sp, #12]
1001538a:	e761      	b.n	10015250 <__aeabi_ddiv+0x464>
1001538c:	221f      	movs	r2, #31
1001538e:	4252      	negs	r2, r2
10015390:	1ad3      	subs	r3, r2, r3
10015392:	465a      	mov	r2, fp
10015394:	40da      	lsrs	r2, r3
10015396:	0013      	movs	r3, r2
10015398:	2d20      	cmp	r5, #32
1001539a:	d029      	beq.n	100153f0 <__aeabi_ddiv+0x604>
1001539c:	2240      	movs	r2, #64	; 0x40
1001539e:	4658      	mov	r0, fp
100153a0:	1b55      	subs	r5, r2, r5
100153a2:	40a8      	lsls	r0, r5
100153a4:	4301      	orrs	r1, r0
100153a6:	1e48      	subs	r0, r1, #1
100153a8:	4181      	sbcs	r1, r0
100153aa:	2007      	movs	r0, #7
100153ac:	430b      	orrs	r3, r1
100153ae:	4018      	ands	r0, r3
100153b0:	2600      	movs	r6, #0
100153b2:	2800      	cmp	r0, #0
100153b4:	d009      	beq.n	100153ca <__aeabi_ddiv+0x5de>
100153b6:	220f      	movs	r2, #15
100153b8:	2600      	movs	r6, #0
100153ba:	401a      	ands	r2, r3
100153bc:	0019      	movs	r1, r3
100153be:	2a04      	cmp	r2, #4
100153c0:	d1bb      	bne.n	1001533a <__aeabi_ddiv+0x54e>
100153c2:	000b      	movs	r3, r1
100153c4:	0770      	lsls	r0, r6, #29
100153c6:	0276      	lsls	r6, r6, #9
100153c8:	0b36      	lsrs	r6, r6, #12
100153ca:	08db      	lsrs	r3, r3, #3
100153cc:	4303      	orrs	r3, r0
100153ce:	4699      	mov	r9, r3
100153d0:	2201      	movs	r2, #1
100153d2:	4653      	mov	r3, sl
100153d4:	401a      	ands	r2, r3
100153d6:	2300      	movs	r3, #0
100153d8:	e56e      	b.n	10014eb8 <__aeabi_ddiv+0xcc>
100153da:	9902      	ldr	r1, [sp, #8]
100153dc:	428d      	cmp	r5, r1
100153de:	d8bb      	bhi.n	10015358 <__aeabi_ddiv+0x56c>
100153e0:	469b      	mov	fp, r3
100153e2:	2600      	movs	r6, #0
100153e4:	e67b      	b.n	100150de <__aeabi_ddiv+0x2f2>
100153e6:	9803      	ldr	r0, [sp, #12]
100153e8:	4298      	cmp	r0, r3
100153ea:	d3c5      	bcc.n	10015378 <__aeabi_ddiv+0x58c>
100153ec:	0011      	movs	r1, r2
100153ee:	e732      	b.n	10015256 <__aeabi_ddiv+0x46a>
100153f0:	2000      	movs	r0, #0
100153f2:	e7d7      	b.n	100153a4 <__aeabi_ddiv+0x5b8>
100153f4:	2680      	movs	r6, #128	; 0x80
100153f6:	465b      	mov	r3, fp
100153f8:	0336      	lsls	r6, r6, #12
100153fa:	431e      	orrs	r6, r3
100153fc:	0336      	lsls	r6, r6, #12
100153fe:	0b36      	lsrs	r6, r6, #12
10015400:	9a00      	ldr	r2, [sp, #0]
10015402:	4689      	mov	r9, r1
10015404:	4b03      	ldr	r3, [pc, #12]	; (10015414 <__aeabi_ddiv+0x628>)
10015406:	e557      	b.n	10014eb8 <__aeabi_ddiv+0xcc>
10015408:	000003ff 	.word	0x000003ff
1001540c:	feffffff 	.word	0xfeffffff
10015410:	000007fe 	.word	0x000007fe
10015414:	000007ff 	.word	0x000007ff

10015418 <__eqdf2>:
10015418:	b5f0      	push	{r4, r5, r6, r7, lr}
1001541a:	465f      	mov	r7, fp
1001541c:	4656      	mov	r6, sl
1001541e:	464d      	mov	r5, r9
10015420:	4644      	mov	r4, r8
10015422:	b4f0      	push	{r4, r5, r6, r7}
10015424:	031f      	lsls	r7, r3, #12
10015426:	005c      	lsls	r4, r3, #1
10015428:	0fdb      	lsrs	r3, r3, #31
1001542a:	469a      	mov	sl, r3
1001542c:	4b19      	ldr	r3, [pc, #100]	; (10015494 <__eqdf2+0x7c>)
1001542e:	030e      	lsls	r6, r1, #12
10015430:	004d      	lsls	r5, r1, #1
10015432:	0fc9      	lsrs	r1, r1, #31
10015434:	4680      	mov	r8, r0
10015436:	0b36      	lsrs	r6, r6, #12
10015438:	0d6d      	lsrs	r5, r5, #21
1001543a:	468b      	mov	fp, r1
1001543c:	4691      	mov	r9, r2
1001543e:	0b3f      	lsrs	r7, r7, #12
10015440:	0d64      	lsrs	r4, r4, #21
10015442:	429d      	cmp	r5, r3
10015444:	d019      	beq.n	1001547a <__eqdf2+0x62>
10015446:	4b13      	ldr	r3, [pc, #76]	; (10015494 <__eqdf2+0x7c>)
10015448:	429c      	cmp	r4, r3
1001544a:	d01b      	beq.n	10015484 <__eqdf2+0x6c>
1001544c:	2301      	movs	r3, #1
1001544e:	42a5      	cmp	r5, r4
10015450:	d006      	beq.n	10015460 <__eqdf2+0x48>
10015452:	0018      	movs	r0, r3
10015454:	bc3c      	pop	{r2, r3, r4, r5}
10015456:	4690      	mov	r8, r2
10015458:	4699      	mov	r9, r3
1001545a:	46a2      	mov	sl, r4
1001545c:	46ab      	mov	fp, r5
1001545e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10015460:	42be      	cmp	r6, r7
10015462:	d1f6      	bne.n	10015452 <__eqdf2+0x3a>
10015464:	45c8      	cmp	r8, r9
10015466:	d1f4      	bne.n	10015452 <__eqdf2+0x3a>
10015468:	45d3      	cmp	fp, sl
1001546a:	d010      	beq.n	1001548e <__eqdf2+0x76>
1001546c:	2d00      	cmp	r5, #0
1001546e:	d1f0      	bne.n	10015452 <__eqdf2+0x3a>
10015470:	4330      	orrs	r0, r6
10015472:	0003      	movs	r3, r0
10015474:	1e5a      	subs	r2, r3, #1
10015476:	4193      	sbcs	r3, r2
10015478:	e7eb      	b.n	10015452 <__eqdf2+0x3a>
1001547a:	0031      	movs	r1, r6
1001547c:	2301      	movs	r3, #1
1001547e:	4301      	orrs	r1, r0
10015480:	d1e7      	bne.n	10015452 <__eqdf2+0x3a>
10015482:	e7e0      	b.n	10015446 <__eqdf2+0x2e>
10015484:	433a      	orrs	r2, r7
10015486:	2301      	movs	r3, #1
10015488:	2a00      	cmp	r2, #0
1001548a:	d1e2      	bne.n	10015452 <__eqdf2+0x3a>
1001548c:	e7de      	b.n	1001544c <__eqdf2+0x34>
1001548e:	2300      	movs	r3, #0
10015490:	e7df      	b.n	10015452 <__eqdf2+0x3a>
10015492:	46c0      	nop			; (mov r8, r8)
10015494:	000007ff 	.word	0x000007ff

10015498 <__gedf2>:
10015498:	b5f0      	push	{r4, r5, r6, r7, lr}
1001549a:	465f      	mov	r7, fp
1001549c:	4644      	mov	r4, r8
1001549e:	4656      	mov	r6, sl
100154a0:	464d      	mov	r5, r9
100154a2:	b4f0      	push	{r4, r5, r6, r7}
100154a4:	031f      	lsls	r7, r3, #12
100154a6:	0b3c      	lsrs	r4, r7, #12
100154a8:	4f2c      	ldr	r7, [pc, #176]	; (1001555c <__gedf2+0xc4>)
100154aa:	030e      	lsls	r6, r1, #12
100154ac:	004d      	lsls	r5, r1, #1
100154ae:	46a3      	mov	fp, r4
100154b0:	005c      	lsls	r4, r3, #1
100154b2:	4684      	mov	ip, r0
100154b4:	0b36      	lsrs	r6, r6, #12
100154b6:	0d6d      	lsrs	r5, r5, #21
100154b8:	0fc9      	lsrs	r1, r1, #31
100154ba:	4690      	mov	r8, r2
100154bc:	0d64      	lsrs	r4, r4, #21
100154be:	0fdb      	lsrs	r3, r3, #31
100154c0:	42bd      	cmp	r5, r7
100154c2:	d02b      	beq.n	1001551c <__gedf2+0x84>
100154c4:	4f25      	ldr	r7, [pc, #148]	; (1001555c <__gedf2+0xc4>)
100154c6:	42bc      	cmp	r4, r7
100154c8:	d02e      	beq.n	10015528 <__gedf2+0x90>
100154ca:	2d00      	cmp	r5, #0
100154cc:	d10e      	bne.n	100154ec <__gedf2+0x54>
100154ce:	4330      	orrs	r0, r6
100154d0:	0007      	movs	r7, r0
100154d2:	4681      	mov	r9, r0
100154d4:	4278      	negs	r0, r7
100154d6:	4178      	adcs	r0, r7
100154d8:	2c00      	cmp	r4, #0
100154da:	d117      	bne.n	1001550c <__gedf2+0x74>
100154dc:	465f      	mov	r7, fp
100154de:	433a      	orrs	r2, r7
100154e0:	d114      	bne.n	1001550c <__gedf2+0x74>
100154e2:	464b      	mov	r3, r9
100154e4:	2000      	movs	r0, #0
100154e6:	2b00      	cmp	r3, #0
100154e8:	d00a      	beq.n	10015500 <__gedf2+0x68>
100154ea:	e006      	b.n	100154fa <__gedf2+0x62>
100154ec:	2c00      	cmp	r4, #0
100154ee:	d102      	bne.n	100154f6 <__gedf2+0x5e>
100154f0:	4658      	mov	r0, fp
100154f2:	4302      	orrs	r2, r0
100154f4:	d001      	beq.n	100154fa <__gedf2+0x62>
100154f6:	4299      	cmp	r1, r3
100154f8:	d01a      	beq.n	10015530 <__gedf2+0x98>
100154fa:	2301      	movs	r3, #1
100154fc:	4248      	negs	r0, r1
100154fe:	4318      	orrs	r0, r3
10015500:	bc3c      	pop	{r2, r3, r4, r5}
10015502:	4690      	mov	r8, r2
10015504:	4699      	mov	r9, r3
10015506:	46a2      	mov	sl, r4
10015508:	46ab      	mov	fp, r5
1001550a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001550c:	2800      	cmp	r0, #0
1001550e:	d0f2      	beq.n	100154f6 <__gedf2+0x5e>
10015510:	4258      	negs	r0, r3
10015512:	4158      	adcs	r0, r3
10015514:	2201      	movs	r2, #1
10015516:	4240      	negs	r0, r0
10015518:	4310      	orrs	r0, r2
1001551a:	e7f1      	b.n	10015500 <__gedf2+0x68>
1001551c:	0037      	movs	r7, r6
1001551e:	4307      	orrs	r7, r0
10015520:	d0d0      	beq.n	100154c4 <__gedf2+0x2c>
10015522:	2002      	movs	r0, #2
10015524:	4240      	negs	r0, r0
10015526:	e7eb      	b.n	10015500 <__gedf2+0x68>
10015528:	465f      	mov	r7, fp
1001552a:	4317      	orrs	r7, r2
1001552c:	d0cd      	beq.n	100154ca <__gedf2+0x32>
1001552e:	e7f8      	b.n	10015522 <__gedf2+0x8a>
10015530:	42a5      	cmp	r5, r4
10015532:	dce2      	bgt.n	100154fa <__gedf2+0x62>
10015534:	db05      	blt.n	10015542 <__gedf2+0xaa>
10015536:	455e      	cmp	r6, fp
10015538:	d8df      	bhi.n	100154fa <__gedf2+0x62>
1001553a:	d008      	beq.n	1001554e <__gedf2+0xb6>
1001553c:	2000      	movs	r0, #0
1001553e:	455e      	cmp	r6, fp
10015540:	d2de      	bcs.n	10015500 <__gedf2+0x68>
10015542:	4248      	negs	r0, r1
10015544:	4148      	adcs	r0, r1
10015546:	2301      	movs	r3, #1
10015548:	4240      	negs	r0, r0
1001554a:	4318      	orrs	r0, r3
1001554c:	e7d8      	b.n	10015500 <__gedf2+0x68>
1001554e:	45c4      	cmp	ip, r8
10015550:	d8d3      	bhi.n	100154fa <__gedf2+0x62>
10015552:	2000      	movs	r0, #0
10015554:	45c4      	cmp	ip, r8
10015556:	d3f4      	bcc.n	10015542 <__gedf2+0xaa>
10015558:	e7d2      	b.n	10015500 <__gedf2+0x68>
1001555a:	46c0      	nop			; (mov r8, r8)
1001555c:	000007ff 	.word	0x000007ff

10015560 <__ledf2>:
10015560:	b5f0      	push	{r4, r5, r6, r7, lr}
10015562:	465f      	mov	r7, fp
10015564:	464d      	mov	r5, r9
10015566:	4644      	mov	r4, r8
10015568:	4656      	mov	r6, sl
1001556a:	b4f0      	push	{r4, r5, r6, r7}
1001556c:	031c      	lsls	r4, r3, #12
1001556e:	0b24      	lsrs	r4, r4, #12
10015570:	46a4      	mov	ip, r4
10015572:	4c2f      	ldr	r4, [pc, #188]	; (10015630 <__ledf2+0xd0>)
10015574:	030f      	lsls	r7, r1, #12
10015576:	004d      	lsls	r5, r1, #1
10015578:	005e      	lsls	r6, r3, #1
1001557a:	0fc9      	lsrs	r1, r1, #31
1001557c:	4680      	mov	r8, r0
1001557e:	0b3f      	lsrs	r7, r7, #12
10015580:	0d6d      	lsrs	r5, r5, #21
10015582:	468b      	mov	fp, r1
10015584:	4691      	mov	r9, r2
10015586:	0d76      	lsrs	r6, r6, #21
10015588:	0fdb      	lsrs	r3, r3, #31
1001558a:	42a5      	cmp	r5, r4
1001558c:	d020      	beq.n	100155d0 <__ledf2+0x70>
1001558e:	4c28      	ldr	r4, [pc, #160]	; (10015630 <__ledf2+0xd0>)
10015590:	42a6      	cmp	r6, r4
10015592:	d022      	beq.n	100155da <__ledf2+0x7a>
10015594:	2d00      	cmp	r5, #0
10015596:	d112      	bne.n	100155be <__ledf2+0x5e>
10015598:	4338      	orrs	r0, r7
1001559a:	4244      	negs	r4, r0
1001559c:	4144      	adcs	r4, r0
1001559e:	2e00      	cmp	r6, #0
100155a0:	d020      	beq.n	100155e4 <__ledf2+0x84>
100155a2:	2c00      	cmp	r4, #0
100155a4:	d00d      	beq.n	100155c2 <__ledf2+0x62>
100155a6:	425c      	negs	r4, r3
100155a8:	4163      	adcs	r3, r4
100155aa:	2401      	movs	r4, #1
100155ac:	425b      	negs	r3, r3
100155ae:	431c      	orrs	r4, r3
100155b0:	0020      	movs	r0, r4
100155b2:	bc3c      	pop	{r2, r3, r4, r5}
100155b4:	4690      	mov	r8, r2
100155b6:	4699      	mov	r9, r3
100155b8:	46a2      	mov	sl, r4
100155ba:	46ab      	mov	fp, r5
100155bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100155be:	2e00      	cmp	r6, #0
100155c0:	d017      	beq.n	100155f2 <__ledf2+0x92>
100155c2:	455b      	cmp	r3, fp
100155c4:	d019      	beq.n	100155fa <__ledf2+0x9a>
100155c6:	465b      	mov	r3, fp
100155c8:	425c      	negs	r4, r3
100155ca:	2301      	movs	r3, #1
100155cc:	431c      	orrs	r4, r3
100155ce:	e7ef      	b.n	100155b0 <__ledf2+0x50>
100155d0:	0039      	movs	r1, r7
100155d2:	2402      	movs	r4, #2
100155d4:	4301      	orrs	r1, r0
100155d6:	d1eb      	bne.n	100155b0 <__ledf2+0x50>
100155d8:	e7d9      	b.n	1001558e <__ledf2+0x2e>
100155da:	4661      	mov	r1, ip
100155dc:	2402      	movs	r4, #2
100155de:	4311      	orrs	r1, r2
100155e0:	d1e6      	bne.n	100155b0 <__ledf2+0x50>
100155e2:	e7d7      	b.n	10015594 <__ledf2+0x34>
100155e4:	4661      	mov	r1, ip
100155e6:	430a      	orrs	r2, r1
100155e8:	d1db      	bne.n	100155a2 <__ledf2+0x42>
100155ea:	2400      	movs	r4, #0
100155ec:	2800      	cmp	r0, #0
100155ee:	d0df      	beq.n	100155b0 <__ledf2+0x50>
100155f0:	e7e9      	b.n	100155c6 <__ledf2+0x66>
100155f2:	4661      	mov	r1, ip
100155f4:	430a      	orrs	r2, r1
100155f6:	d1e4      	bne.n	100155c2 <__ledf2+0x62>
100155f8:	e7e5      	b.n	100155c6 <__ledf2+0x66>
100155fa:	42b5      	cmp	r5, r6
100155fc:	dd03      	ble.n	10015606 <__ledf2+0xa6>
100155fe:	2201      	movs	r2, #1
10015600:	425c      	negs	r4, r3
10015602:	4314      	orrs	r4, r2
10015604:	e7d4      	b.n	100155b0 <__ledf2+0x50>
10015606:	42b5      	cmp	r5, r6
10015608:	dbcd      	blt.n	100155a6 <__ledf2+0x46>
1001560a:	4567      	cmp	r7, ip
1001560c:	d8db      	bhi.n	100155c6 <__ledf2+0x66>
1001560e:	d009      	beq.n	10015624 <__ledf2+0xc4>
10015610:	2400      	movs	r4, #0
10015612:	4567      	cmp	r7, ip
10015614:	d2cc      	bcs.n	100155b0 <__ledf2+0x50>
10015616:	4659      	mov	r1, fp
10015618:	424c      	negs	r4, r1
1001561a:	4161      	adcs	r1, r4
1001561c:	2401      	movs	r4, #1
1001561e:	4249      	negs	r1, r1
10015620:	430c      	orrs	r4, r1
10015622:	e7c5      	b.n	100155b0 <__ledf2+0x50>
10015624:	45c8      	cmp	r8, r9
10015626:	d8ce      	bhi.n	100155c6 <__ledf2+0x66>
10015628:	2400      	movs	r4, #0
1001562a:	45c8      	cmp	r8, r9
1001562c:	d3f3      	bcc.n	10015616 <__ledf2+0xb6>
1001562e:	e7bf      	b.n	100155b0 <__ledf2+0x50>
10015630:	000007ff 	.word	0x000007ff

10015634 <__aeabi_dmul>:
10015634:	b5f0      	push	{r4, r5, r6, r7, lr}
10015636:	465f      	mov	r7, fp
10015638:	4656      	mov	r6, sl
1001563a:	464d      	mov	r5, r9
1001563c:	4644      	mov	r4, r8
1001563e:	b4f0      	push	{r4, r5, r6, r7}
10015640:	030d      	lsls	r5, r1, #12
10015642:	4699      	mov	r9, r3
10015644:	004e      	lsls	r6, r1, #1
10015646:	0b2b      	lsrs	r3, r5, #12
10015648:	b087      	sub	sp, #28
1001564a:	0007      	movs	r7, r0
1001564c:	4692      	mov	sl, r2
1001564e:	4680      	mov	r8, r0
10015650:	469b      	mov	fp, r3
10015652:	0d76      	lsrs	r6, r6, #21
10015654:	0fcc      	lsrs	r4, r1, #31
10015656:	2e00      	cmp	r6, #0
10015658:	d069      	beq.n	1001572e <__aeabi_dmul+0xfa>
1001565a:	4b6d      	ldr	r3, [pc, #436]	; (10015810 <__aeabi_dmul+0x1dc>)
1001565c:	429e      	cmp	r6, r3
1001565e:	d035      	beq.n	100156cc <__aeabi_dmul+0x98>
10015660:	465b      	mov	r3, fp
10015662:	2280      	movs	r2, #128	; 0x80
10015664:	00dd      	lsls	r5, r3, #3
10015666:	0412      	lsls	r2, r2, #16
10015668:	0f43      	lsrs	r3, r0, #29
1001566a:	4313      	orrs	r3, r2
1001566c:	432b      	orrs	r3, r5
1001566e:	469b      	mov	fp, r3
10015670:	00c3      	lsls	r3, r0, #3
10015672:	4698      	mov	r8, r3
10015674:	4b67      	ldr	r3, [pc, #412]	; (10015814 <__aeabi_dmul+0x1e0>)
10015676:	2700      	movs	r7, #0
10015678:	469c      	mov	ip, r3
1001567a:	2300      	movs	r3, #0
1001567c:	4466      	add	r6, ip
1001567e:	9301      	str	r3, [sp, #4]
10015680:	464a      	mov	r2, r9
10015682:	0315      	lsls	r5, r2, #12
10015684:	0050      	lsls	r0, r2, #1
10015686:	0fd2      	lsrs	r2, r2, #31
10015688:	4653      	mov	r3, sl
1001568a:	0b2d      	lsrs	r5, r5, #12
1001568c:	0d40      	lsrs	r0, r0, #21
1001568e:	4691      	mov	r9, r2
10015690:	d100      	bne.n	10015694 <__aeabi_dmul+0x60>
10015692:	e076      	b.n	10015782 <__aeabi_dmul+0x14e>
10015694:	4a5e      	ldr	r2, [pc, #376]	; (10015810 <__aeabi_dmul+0x1dc>)
10015696:	4290      	cmp	r0, r2
10015698:	d06c      	beq.n	10015774 <__aeabi_dmul+0x140>
1001569a:	2280      	movs	r2, #128	; 0x80
1001569c:	0f5b      	lsrs	r3, r3, #29
1001569e:	0412      	lsls	r2, r2, #16
100156a0:	4313      	orrs	r3, r2
100156a2:	4a5c      	ldr	r2, [pc, #368]	; (10015814 <__aeabi_dmul+0x1e0>)
100156a4:	00ed      	lsls	r5, r5, #3
100156a6:	4694      	mov	ip, r2
100156a8:	431d      	orrs	r5, r3
100156aa:	4653      	mov	r3, sl
100156ac:	2200      	movs	r2, #0
100156ae:	00db      	lsls	r3, r3, #3
100156b0:	4460      	add	r0, ip
100156b2:	4649      	mov	r1, r9
100156b4:	1836      	adds	r6, r6, r0
100156b6:	1c70      	adds	r0, r6, #1
100156b8:	4061      	eors	r1, r4
100156ba:	9002      	str	r0, [sp, #8]
100156bc:	4317      	orrs	r7, r2
100156be:	2f0f      	cmp	r7, #15
100156c0:	d900      	bls.n	100156c4 <__aeabi_dmul+0x90>
100156c2:	e0af      	b.n	10015824 <__aeabi_dmul+0x1f0>
100156c4:	4854      	ldr	r0, [pc, #336]	; (10015818 <__aeabi_dmul+0x1e4>)
100156c6:	00bf      	lsls	r7, r7, #2
100156c8:	59c7      	ldr	r7, [r0, r7]
100156ca:	46bf      	mov	pc, r7
100156cc:	465b      	mov	r3, fp
100156ce:	431f      	orrs	r7, r3
100156d0:	d000      	beq.n	100156d4 <__aeabi_dmul+0xa0>
100156d2:	e088      	b.n	100157e6 <__aeabi_dmul+0x1b2>
100156d4:	2300      	movs	r3, #0
100156d6:	469b      	mov	fp, r3
100156d8:	4698      	mov	r8, r3
100156da:	3302      	adds	r3, #2
100156dc:	2708      	movs	r7, #8
100156de:	9301      	str	r3, [sp, #4]
100156e0:	e7ce      	b.n	10015680 <__aeabi_dmul+0x4c>
100156e2:	4649      	mov	r1, r9
100156e4:	2a02      	cmp	r2, #2
100156e6:	d06a      	beq.n	100157be <__aeabi_dmul+0x18a>
100156e8:	2a03      	cmp	r2, #3
100156ea:	d100      	bne.n	100156ee <__aeabi_dmul+0xba>
100156ec:	e209      	b.n	10015b02 <__aeabi_dmul+0x4ce>
100156ee:	2a01      	cmp	r2, #1
100156f0:	d000      	beq.n	100156f4 <__aeabi_dmul+0xc0>
100156f2:	e1bb      	b.n	10015a6c <__aeabi_dmul+0x438>
100156f4:	4011      	ands	r1, r2
100156f6:	2200      	movs	r2, #0
100156f8:	2300      	movs	r3, #0
100156fa:	2500      	movs	r5, #0
100156fc:	4690      	mov	r8, r2
100156fe:	b2cc      	uxtb	r4, r1
10015700:	2100      	movs	r1, #0
10015702:	032d      	lsls	r5, r5, #12
10015704:	0d0a      	lsrs	r2, r1, #20
10015706:	0512      	lsls	r2, r2, #20
10015708:	0b2d      	lsrs	r5, r5, #12
1001570a:	4315      	orrs	r5, r2
1001570c:	4a43      	ldr	r2, [pc, #268]	; (1001581c <__aeabi_dmul+0x1e8>)
1001570e:	051b      	lsls	r3, r3, #20
10015710:	4015      	ands	r5, r2
10015712:	431d      	orrs	r5, r3
10015714:	006d      	lsls	r5, r5, #1
10015716:	07e4      	lsls	r4, r4, #31
10015718:	086d      	lsrs	r5, r5, #1
1001571a:	4325      	orrs	r5, r4
1001571c:	4640      	mov	r0, r8
1001571e:	0029      	movs	r1, r5
10015720:	b007      	add	sp, #28
10015722:	bc3c      	pop	{r2, r3, r4, r5}
10015724:	4690      	mov	r8, r2
10015726:	4699      	mov	r9, r3
10015728:	46a2      	mov	sl, r4
1001572a:	46ab      	mov	fp, r5
1001572c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001572e:	4303      	orrs	r3, r0
10015730:	d052      	beq.n	100157d8 <__aeabi_dmul+0x1a4>
10015732:	465b      	mov	r3, fp
10015734:	2b00      	cmp	r3, #0
10015736:	d100      	bne.n	1001573a <__aeabi_dmul+0x106>
10015738:	e18a      	b.n	10015a50 <__aeabi_dmul+0x41c>
1001573a:	4658      	mov	r0, fp
1001573c:	f000 fef8 	bl	10016530 <__clzsi2>
10015740:	0003      	movs	r3, r0
10015742:	3b0b      	subs	r3, #11
10015744:	2b1c      	cmp	r3, #28
10015746:	dd00      	ble.n	1001574a <__aeabi_dmul+0x116>
10015748:	e17b      	b.n	10015a42 <__aeabi_dmul+0x40e>
1001574a:	221d      	movs	r2, #29
1001574c:	1ad3      	subs	r3, r2, r3
1001574e:	003a      	movs	r2, r7
10015750:	0001      	movs	r1, r0
10015752:	465d      	mov	r5, fp
10015754:	40da      	lsrs	r2, r3
10015756:	3908      	subs	r1, #8
10015758:	408d      	lsls	r5, r1
1001575a:	0013      	movs	r3, r2
1001575c:	408f      	lsls	r7, r1
1001575e:	432b      	orrs	r3, r5
10015760:	469b      	mov	fp, r3
10015762:	46b8      	mov	r8, r7
10015764:	4b2e      	ldr	r3, [pc, #184]	; (10015820 <__aeabi_dmul+0x1ec>)
10015766:	2700      	movs	r7, #0
10015768:	469c      	mov	ip, r3
1001576a:	2300      	movs	r3, #0
1001576c:	4460      	add	r0, ip
1001576e:	4246      	negs	r6, r0
10015770:	9301      	str	r3, [sp, #4]
10015772:	e785      	b.n	10015680 <__aeabi_dmul+0x4c>
10015774:	4652      	mov	r2, sl
10015776:	432a      	orrs	r2, r5
10015778:	d12c      	bne.n	100157d4 <__aeabi_dmul+0x1a0>
1001577a:	2500      	movs	r5, #0
1001577c:	2300      	movs	r3, #0
1001577e:	2202      	movs	r2, #2
10015780:	e797      	b.n	100156b2 <__aeabi_dmul+0x7e>
10015782:	4652      	mov	r2, sl
10015784:	432a      	orrs	r2, r5
10015786:	d021      	beq.n	100157cc <__aeabi_dmul+0x198>
10015788:	2d00      	cmp	r5, #0
1001578a:	d100      	bne.n	1001578e <__aeabi_dmul+0x15a>
1001578c:	e154      	b.n	10015a38 <__aeabi_dmul+0x404>
1001578e:	0028      	movs	r0, r5
10015790:	f000 fece 	bl	10016530 <__clzsi2>
10015794:	0003      	movs	r3, r0
10015796:	3b0b      	subs	r3, #11
10015798:	2b1c      	cmp	r3, #28
1001579a:	dd00      	ble.n	1001579e <__aeabi_dmul+0x16a>
1001579c:	e146      	b.n	10015a2c <__aeabi_dmul+0x3f8>
1001579e:	211d      	movs	r1, #29
100157a0:	1acb      	subs	r3, r1, r3
100157a2:	4651      	mov	r1, sl
100157a4:	0002      	movs	r2, r0
100157a6:	40d9      	lsrs	r1, r3
100157a8:	4653      	mov	r3, sl
100157aa:	3a08      	subs	r2, #8
100157ac:	4095      	lsls	r5, r2
100157ae:	4093      	lsls	r3, r2
100157b0:	430d      	orrs	r5, r1
100157b2:	4a1b      	ldr	r2, [pc, #108]	; (10015820 <__aeabi_dmul+0x1ec>)
100157b4:	4694      	mov	ip, r2
100157b6:	4460      	add	r0, ip
100157b8:	4240      	negs	r0, r0
100157ba:	2200      	movs	r2, #0
100157bc:	e779      	b.n	100156b2 <__aeabi_dmul+0x7e>
100157be:	2401      	movs	r4, #1
100157c0:	2200      	movs	r2, #0
100157c2:	400c      	ands	r4, r1
100157c4:	4b12      	ldr	r3, [pc, #72]	; (10015810 <__aeabi_dmul+0x1dc>)
100157c6:	2500      	movs	r5, #0
100157c8:	4690      	mov	r8, r2
100157ca:	e799      	b.n	10015700 <__aeabi_dmul+0xcc>
100157cc:	2500      	movs	r5, #0
100157ce:	2300      	movs	r3, #0
100157d0:	2201      	movs	r2, #1
100157d2:	e76e      	b.n	100156b2 <__aeabi_dmul+0x7e>
100157d4:	2203      	movs	r2, #3
100157d6:	e76c      	b.n	100156b2 <__aeabi_dmul+0x7e>
100157d8:	2300      	movs	r3, #0
100157da:	469b      	mov	fp, r3
100157dc:	4698      	mov	r8, r3
100157de:	3301      	adds	r3, #1
100157e0:	2704      	movs	r7, #4
100157e2:	9301      	str	r3, [sp, #4]
100157e4:	e74c      	b.n	10015680 <__aeabi_dmul+0x4c>
100157e6:	2303      	movs	r3, #3
100157e8:	270c      	movs	r7, #12
100157ea:	9301      	str	r3, [sp, #4]
100157ec:	e748      	b.n	10015680 <__aeabi_dmul+0x4c>
100157ee:	2300      	movs	r3, #0
100157f0:	2580      	movs	r5, #128	; 0x80
100157f2:	4698      	mov	r8, r3
100157f4:	2400      	movs	r4, #0
100157f6:	032d      	lsls	r5, r5, #12
100157f8:	4b05      	ldr	r3, [pc, #20]	; (10015810 <__aeabi_dmul+0x1dc>)
100157fa:	e781      	b.n	10015700 <__aeabi_dmul+0xcc>
100157fc:	465d      	mov	r5, fp
100157fe:	4643      	mov	r3, r8
10015800:	9a01      	ldr	r2, [sp, #4]
10015802:	e76f      	b.n	100156e4 <__aeabi_dmul+0xb0>
10015804:	465d      	mov	r5, fp
10015806:	4643      	mov	r3, r8
10015808:	0021      	movs	r1, r4
1001580a:	9a01      	ldr	r2, [sp, #4]
1001580c:	e76a      	b.n	100156e4 <__aeabi_dmul+0xb0>
1001580e:	46c0      	nop			; (mov r8, r8)
10015810:	000007ff 	.word	0x000007ff
10015814:	fffffc01 	.word	0xfffffc01
10015818:	100187d8 	.word	0x100187d8
1001581c:	800fffff 	.word	0x800fffff
10015820:	000003f3 	.word	0x000003f3
10015824:	4642      	mov	r2, r8
10015826:	0c12      	lsrs	r2, r2, #16
10015828:	4691      	mov	r9, r2
1001582a:	0c1a      	lsrs	r2, r3, #16
1001582c:	4694      	mov	ip, r2
1001582e:	4642      	mov	r2, r8
10015830:	0417      	lsls	r7, r2, #16
10015832:	464a      	mov	r2, r9
10015834:	041b      	lsls	r3, r3, #16
10015836:	0c1b      	lsrs	r3, r3, #16
10015838:	435a      	muls	r2, r3
1001583a:	4660      	mov	r0, ip
1001583c:	4690      	mov	r8, r2
1001583e:	464a      	mov	r2, r9
10015840:	4342      	muls	r2, r0
10015842:	0010      	movs	r0, r2
10015844:	9203      	str	r2, [sp, #12]
10015846:	4662      	mov	r2, ip
10015848:	001c      	movs	r4, r3
1001584a:	0c3f      	lsrs	r7, r7, #16
1001584c:	437a      	muls	r2, r7
1001584e:	437c      	muls	r4, r7
10015850:	4442      	add	r2, r8
10015852:	9201      	str	r2, [sp, #4]
10015854:	0c22      	lsrs	r2, r4, #16
10015856:	4692      	mov	sl, r2
10015858:	9a01      	ldr	r2, [sp, #4]
1001585a:	4452      	add	r2, sl
1001585c:	4590      	cmp	r8, r2
1001585e:	d906      	bls.n	1001586e <__aeabi_dmul+0x23a>
10015860:	4682      	mov	sl, r0
10015862:	2080      	movs	r0, #128	; 0x80
10015864:	0240      	lsls	r0, r0, #9
10015866:	4680      	mov	r8, r0
10015868:	44c2      	add	sl, r8
1001586a:	4650      	mov	r0, sl
1001586c:	9003      	str	r0, [sp, #12]
1001586e:	0c10      	lsrs	r0, r2, #16
10015870:	9004      	str	r0, [sp, #16]
10015872:	4648      	mov	r0, r9
10015874:	0424      	lsls	r4, r4, #16
10015876:	0c24      	lsrs	r4, r4, #16
10015878:	0412      	lsls	r2, r2, #16
1001587a:	1912      	adds	r2, r2, r4
1001587c:	9205      	str	r2, [sp, #20]
1001587e:	0c2a      	lsrs	r2, r5, #16
10015880:	042d      	lsls	r5, r5, #16
10015882:	0c2d      	lsrs	r5, r5, #16
10015884:	4368      	muls	r0, r5
10015886:	002c      	movs	r4, r5
10015888:	4682      	mov	sl, r0
1001588a:	4648      	mov	r0, r9
1001588c:	437c      	muls	r4, r7
1001588e:	4350      	muls	r0, r2
10015890:	4681      	mov	r9, r0
10015892:	0c20      	lsrs	r0, r4, #16
10015894:	4680      	mov	r8, r0
10015896:	4357      	muls	r7, r2
10015898:	4457      	add	r7, sl
1001589a:	4447      	add	r7, r8
1001589c:	45ba      	cmp	sl, r7
1001589e:	d903      	bls.n	100158a8 <__aeabi_dmul+0x274>
100158a0:	2080      	movs	r0, #128	; 0x80
100158a2:	0240      	lsls	r0, r0, #9
100158a4:	4680      	mov	r8, r0
100158a6:	44c1      	add	r9, r8
100158a8:	0c38      	lsrs	r0, r7, #16
100158aa:	043f      	lsls	r7, r7, #16
100158ac:	46b8      	mov	r8, r7
100158ae:	4448      	add	r0, r9
100158b0:	0424      	lsls	r4, r4, #16
100158b2:	0c24      	lsrs	r4, r4, #16
100158b4:	9001      	str	r0, [sp, #4]
100158b6:	9804      	ldr	r0, [sp, #16]
100158b8:	44a0      	add	r8, r4
100158ba:	4440      	add	r0, r8
100158bc:	9004      	str	r0, [sp, #16]
100158be:	4658      	mov	r0, fp
100158c0:	0c00      	lsrs	r0, r0, #16
100158c2:	4681      	mov	r9, r0
100158c4:	4658      	mov	r0, fp
100158c6:	0404      	lsls	r4, r0, #16
100158c8:	0c20      	lsrs	r0, r4, #16
100158ca:	4682      	mov	sl, r0
100158cc:	0007      	movs	r7, r0
100158ce:	4648      	mov	r0, r9
100158d0:	435f      	muls	r7, r3
100158d2:	464c      	mov	r4, r9
100158d4:	4343      	muls	r3, r0
100158d6:	4660      	mov	r0, ip
100158d8:	4360      	muls	r0, r4
100158da:	4664      	mov	r4, ip
100158dc:	4683      	mov	fp, r0
100158de:	4650      	mov	r0, sl
100158e0:	4344      	muls	r4, r0
100158e2:	0c38      	lsrs	r0, r7, #16
100158e4:	4684      	mov	ip, r0
100158e6:	18e4      	adds	r4, r4, r3
100158e8:	4464      	add	r4, ip
100158ea:	42a3      	cmp	r3, r4
100158ec:	d903      	bls.n	100158f6 <__aeabi_dmul+0x2c2>
100158ee:	2380      	movs	r3, #128	; 0x80
100158f0:	025b      	lsls	r3, r3, #9
100158f2:	469c      	mov	ip, r3
100158f4:	44e3      	add	fp, ip
100158f6:	4648      	mov	r0, r9
100158f8:	043f      	lsls	r7, r7, #16
100158fa:	0c23      	lsrs	r3, r4, #16
100158fc:	0c3f      	lsrs	r7, r7, #16
100158fe:	0424      	lsls	r4, r4, #16
10015900:	19e4      	adds	r4, r4, r7
10015902:	4657      	mov	r7, sl
10015904:	4368      	muls	r0, r5
10015906:	436f      	muls	r7, r5
10015908:	4684      	mov	ip, r0
1001590a:	464d      	mov	r5, r9
1001590c:	4650      	mov	r0, sl
1001590e:	4355      	muls	r5, r2
10015910:	4342      	muls	r2, r0
10015912:	0c38      	lsrs	r0, r7, #16
10015914:	4681      	mov	r9, r0
10015916:	4462      	add	r2, ip
10015918:	444a      	add	r2, r9
1001591a:	445b      	add	r3, fp
1001591c:	4594      	cmp	ip, r2
1001591e:	d903      	bls.n	10015928 <__aeabi_dmul+0x2f4>
10015920:	2080      	movs	r0, #128	; 0x80
10015922:	0240      	lsls	r0, r0, #9
10015924:	4684      	mov	ip, r0
10015926:	4465      	add	r5, ip
10015928:	9803      	ldr	r0, [sp, #12]
1001592a:	043f      	lsls	r7, r7, #16
1001592c:	4683      	mov	fp, r0
1001592e:	9804      	ldr	r0, [sp, #16]
10015930:	0c3f      	lsrs	r7, r7, #16
10015932:	4684      	mov	ip, r0
10015934:	44e3      	add	fp, ip
10015936:	45c3      	cmp	fp, r8
10015938:	4180      	sbcs	r0, r0
1001593a:	4240      	negs	r0, r0
1001593c:	4682      	mov	sl, r0
1001593e:	0410      	lsls	r0, r2, #16
10015940:	4684      	mov	ip, r0
10015942:	9801      	ldr	r0, [sp, #4]
10015944:	4467      	add	r7, ip
10015946:	4684      	mov	ip, r0
10015948:	4467      	add	r7, ip
1001594a:	44a3      	add	fp, r4
1001594c:	46bc      	mov	ip, r7
1001594e:	45a3      	cmp	fp, r4
10015950:	41a4      	sbcs	r4, r4
10015952:	4699      	mov	r9, r3
10015954:	44d4      	add	ip, sl
10015956:	4264      	negs	r4, r4
10015958:	4287      	cmp	r7, r0
1001595a:	41bf      	sbcs	r7, r7
1001595c:	45d4      	cmp	ip, sl
1001595e:	4180      	sbcs	r0, r0
10015960:	44e1      	add	r9, ip
10015962:	46a0      	mov	r8, r4
10015964:	4599      	cmp	r9, r3
10015966:	419b      	sbcs	r3, r3
10015968:	427f      	negs	r7, r7
1001596a:	4240      	negs	r0, r0
1001596c:	44c8      	add	r8, r9
1001596e:	4307      	orrs	r7, r0
10015970:	0c12      	lsrs	r2, r2, #16
10015972:	18ba      	adds	r2, r7, r2
10015974:	45a0      	cmp	r8, r4
10015976:	41a4      	sbcs	r4, r4
10015978:	425f      	negs	r7, r3
1001597a:	003b      	movs	r3, r7
1001597c:	4264      	negs	r4, r4
1001597e:	4323      	orrs	r3, r4
10015980:	18d7      	adds	r7, r2, r3
10015982:	4643      	mov	r3, r8
10015984:	197d      	adds	r5, r7, r5
10015986:	0ddb      	lsrs	r3, r3, #23
10015988:	026d      	lsls	r5, r5, #9
1001598a:	431d      	orrs	r5, r3
1001598c:	465b      	mov	r3, fp
1001598e:	025a      	lsls	r2, r3, #9
10015990:	9b05      	ldr	r3, [sp, #20]
10015992:	431a      	orrs	r2, r3
10015994:	1e53      	subs	r3, r2, #1
10015996:	419a      	sbcs	r2, r3
10015998:	465b      	mov	r3, fp
1001599a:	0ddb      	lsrs	r3, r3, #23
1001599c:	431a      	orrs	r2, r3
1001599e:	4643      	mov	r3, r8
100159a0:	025b      	lsls	r3, r3, #9
100159a2:	4313      	orrs	r3, r2
100159a4:	01ea      	lsls	r2, r5, #7
100159a6:	d507      	bpl.n	100159b8 <__aeabi_dmul+0x384>
100159a8:	2201      	movs	r2, #1
100159aa:	085c      	lsrs	r4, r3, #1
100159ac:	4013      	ands	r3, r2
100159ae:	4323      	orrs	r3, r4
100159b0:	07ea      	lsls	r2, r5, #31
100159b2:	9e02      	ldr	r6, [sp, #8]
100159b4:	4313      	orrs	r3, r2
100159b6:	086d      	lsrs	r5, r5, #1
100159b8:	4a57      	ldr	r2, [pc, #348]	; (10015b18 <__aeabi_dmul+0x4e4>)
100159ba:	18b2      	adds	r2, r6, r2
100159bc:	2a00      	cmp	r2, #0
100159be:	dd4b      	ble.n	10015a58 <__aeabi_dmul+0x424>
100159c0:	0758      	lsls	r0, r3, #29
100159c2:	d009      	beq.n	100159d8 <__aeabi_dmul+0x3a4>
100159c4:	200f      	movs	r0, #15
100159c6:	4018      	ands	r0, r3
100159c8:	2804      	cmp	r0, #4
100159ca:	d005      	beq.n	100159d8 <__aeabi_dmul+0x3a4>
100159cc:	1d18      	adds	r0, r3, #4
100159ce:	4298      	cmp	r0, r3
100159d0:	419b      	sbcs	r3, r3
100159d2:	425b      	negs	r3, r3
100159d4:	18ed      	adds	r5, r5, r3
100159d6:	0003      	movs	r3, r0
100159d8:	01e8      	lsls	r0, r5, #7
100159da:	d504      	bpl.n	100159e6 <__aeabi_dmul+0x3b2>
100159dc:	4a4f      	ldr	r2, [pc, #316]	; (10015b1c <__aeabi_dmul+0x4e8>)
100159de:	4015      	ands	r5, r2
100159e0:	2280      	movs	r2, #128	; 0x80
100159e2:	00d2      	lsls	r2, r2, #3
100159e4:	18b2      	adds	r2, r6, r2
100159e6:	484e      	ldr	r0, [pc, #312]	; (10015b20 <__aeabi_dmul+0x4ec>)
100159e8:	4282      	cmp	r2, r0
100159ea:	dd00      	ble.n	100159ee <__aeabi_dmul+0x3ba>
100159ec:	e6e7      	b.n	100157be <__aeabi_dmul+0x18a>
100159ee:	2401      	movs	r4, #1
100159f0:	08db      	lsrs	r3, r3, #3
100159f2:	0768      	lsls	r0, r5, #29
100159f4:	4318      	orrs	r0, r3
100159f6:	026d      	lsls	r5, r5, #9
100159f8:	0553      	lsls	r3, r2, #21
100159fa:	4680      	mov	r8, r0
100159fc:	0b2d      	lsrs	r5, r5, #12
100159fe:	0d5b      	lsrs	r3, r3, #21
10015a00:	400c      	ands	r4, r1
10015a02:	e67d      	b.n	10015700 <__aeabi_dmul+0xcc>
10015a04:	2280      	movs	r2, #128	; 0x80
10015a06:	4659      	mov	r1, fp
10015a08:	0312      	lsls	r2, r2, #12
10015a0a:	4211      	tst	r1, r2
10015a0c:	d008      	beq.n	10015a20 <__aeabi_dmul+0x3ec>
10015a0e:	4215      	tst	r5, r2
10015a10:	d106      	bne.n	10015a20 <__aeabi_dmul+0x3ec>
10015a12:	4315      	orrs	r5, r2
10015a14:	032d      	lsls	r5, r5, #12
10015a16:	4698      	mov	r8, r3
10015a18:	0b2d      	lsrs	r5, r5, #12
10015a1a:	464c      	mov	r4, r9
10015a1c:	4b41      	ldr	r3, [pc, #260]	; (10015b24 <__aeabi_dmul+0x4f0>)
10015a1e:	e66f      	b.n	10015700 <__aeabi_dmul+0xcc>
10015a20:	465d      	mov	r5, fp
10015a22:	4315      	orrs	r5, r2
10015a24:	032d      	lsls	r5, r5, #12
10015a26:	0b2d      	lsrs	r5, r5, #12
10015a28:	4b3e      	ldr	r3, [pc, #248]	; (10015b24 <__aeabi_dmul+0x4f0>)
10015a2a:	e669      	b.n	10015700 <__aeabi_dmul+0xcc>
10015a2c:	0003      	movs	r3, r0
10015a2e:	4655      	mov	r5, sl
10015a30:	3b28      	subs	r3, #40	; 0x28
10015a32:	409d      	lsls	r5, r3
10015a34:	2300      	movs	r3, #0
10015a36:	e6bc      	b.n	100157b2 <__aeabi_dmul+0x17e>
10015a38:	4650      	mov	r0, sl
10015a3a:	f000 fd79 	bl	10016530 <__clzsi2>
10015a3e:	3020      	adds	r0, #32
10015a40:	e6a8      	b.n	10015794 <__aeabi_dmul+0x160>
10015a42:	0003      	movs	r3, r0
10015a44:	3b28      	subs	r3, #40	; 0x28
10015a46:	409f      	lsls	r7, r3
10015a48:	2300      	movs	r3, #0
10015a4a:	46bb      	mov	fp, r7
10015a4c:	4698      	mov	r8, r3
10015a4e:	e689      	b.n	10015764 <__aeabi_dmul+0x130>
10015a50:	f000 fd6e 	bl	10016530 <__clzsi2>
10015a54:	3020      	adds	r0, #32
10015a56:	e673      	b.n	10015740 <__aeabi_dmul+0x10c>
10015a58:	2401      	movs	r4, #1
10015a5a:	1aa6      	subs	r6, r4, r2
10015a5c:	2e38      	cmp	r6, #56	; 0x38
10015a5e:	dd07      	ble.n	10015a70 <__aeabi_dmul+0x43c>
10015a60:	2200      	movs	r2, #0
10015a62:	400c      	ands	r4, r1
10015a64:	2300      	movs	r3, #0
10015a66:	2500      	movs	r5, #0
10015a68:	4690      	mov	r8, r2
10015a6a:	e649      	b.n	10015700 <__aeabi_dmul+0xcc>
10015a6c:	9e02      	ldr	r6, [sp, #8]
10015a6e:	e7a3      	b.n	100159b8 <__aeabi_dmul+0x384>
10015a70:	2e1f      	cmp	r6, #31
10015a72:	dc20      	bgt.n	10015ab6 <__aeabi_dmul+0x482>
10015a74:	2220      	movs	r2, #32
10015a76:	002c      	movs	r4, r5
10015a78:	0018      	movs	r0, r3
10015a7a:	1b92      	subs	r2, r2, r6
10015a7c:	40f0      	lsrs	r0, r6
10015a7e:	4094      	lsls	r4, r2
10015a80:	4093      	lsls	r3, r2
10015a82:	4304      	orrs	r4, r0
10015a84:	1e58      	subs	r0, r3, #1
10015a86:	4183      	sbcs	r3, r0
10015a88:	431c      	orrs	r4, r3
10015a8a:	40f5      	lsrs	r5, r6
10015a8c:	0763      	lsls	r3, r4, #29
10015a8e:	d009      	beq.n	10015aa4 <__aeabi_dmul+0x470>
10015a90:	230f      	movs	r3, #15
10015a92:	4023      	ands	r3, r4
10015a94:	2b04      	cmp	r3, #4
10015a96:	d005      	beq.n	10015aa4 <__aeabi_dmul+0x470>
10015a98:	0023      	movs	r3, r4
10015a9a:	1d1c      	adds	r4, r3, #4
10015a9c:	429c      	cmp	r4, r3
10015a9e:	4192      	sbcs	r2, r2
10015aa0:	4252      	negs	r2, r2
10015aa2:	18ad      	adds	r5, r5, r2
10015aa4:	022b      	lsls	r3, r5, #8
10015aa6:	d51f      	bpl.n	10015ae8 <__aeabi_dmul+0x4b4>
10015aa8:	2401      	movs	r4, #1
10015aaa:	2200      	movs	r2, #0
10015aac:	400c      	ands	r4, r1
10015aae:	2301      	movs	r3, #1
10015ab0:	2500      	movs	r5, #0
10015ab2:	4690      	mov	r8, r2
10015ab4:	e624      	b.n	10015700 <__aeabi_dmul+0xcc>
10015ab6:	201f      	movs	r0, #31
10015ab8:	002c      	movs	r4, r5
10015aba:	4240      	negs	r0, r0
10015abc:	1a82      	subs	r2, r0, r2
10015abe:	40d4      	lsrs	r4, r2
10015ac0:	2e20      	cmp	r6, #32
10015ac2:	d01c      	beq.n	10015afe <__aeabi_dmul+0x4ca>
10015ac4:	2240      	movs	r2, #64	; 0x40
10015ac6:	1b96      	subs	r6, r2, r6
10015ac8:	40b5      	lsls	r5, r6
10015aca:	432b      	orrs	r3, r5
10015acc:	1e58      	subs	r0, r3, #1
10015ace:	4183      	sbcs	r3, r0
10015ad0:	2007      	movs	r0, #7
10015ad2:	4323      	orrs	r3, r4
10015ad4:	4018      	ands	r0, r3
10015ad6:	2500      	movs	r5, #0
10015ad8:	2800      	cmp	r0, #0
10015ada:	d009      	beq.n	10015af0 <__aeabi_dmul+0x4bc>
10015adc:	220f      	movs	r2, #15
10015ade:	2500      	movs	r5, #0
10015ae0:	401a      	ands	r2, r3
10015ae2:	001c      	movs	r4, r3
10015ae4:	2a04      	cmp	r2, #4
10015ae6:	d1d8      	bne.n	10015a9a <__aeabi_dmul+0x466>
10015ae8:	0023      	movs	r3, r4
10015aea:	0768      	lsls	r0, r5, #29
10015aec:	026d      	lsls	r5, r5, #9
10015aee:	0b2d      	lsrs	r5, r5, #12
10015af0:	2401      	movs	r4, #1
10015af2:	08db      	lsrs	r3, r3, #3
10015af4:	4303      	orrs	r3, r0
10015af6:	4698      	mov	r8, r3
10015af8:	400c      	ands	r4, r1
10015afa:	2300      	movs	r3, #0
10015afc:	e600      	b.n	10015700 <__aeabi_dmul+0xcc>
10015afe:	2500      	movs	r5, #0
10015b00:	e7e3      	b.n	10015aca <__aeabi_dmul+0x496>
10015b02:	2280      	movs	r2, #128	; 0x80
10015b04:	2401      	movs	r4, #1
10015b06:	0312      	lsls	r2, r2, #12
10015b08:	4315      	orrs	r5, r2
10015b0a:	032d      	lsls	r5, r5, #12
10015b0c:	4698      	mov	r8, r3
10015b0e:	0b2d      	lsrs	r5, r5, #12
10015b10:	400c      	ands	r4, r1
10015b12:	4b04      	ldr	r3, [pc, #16]	; (10015b24 <__aeabi_dmul+0x4f0>)
10015b14:	e5f4      	b.n	10015700 <__aeabi_dmul+0xcc>
10015b16:	46c0      	nop			; (mov r8, r8)
10015b18:	000003ff 	.word	0x000003ff
10015b1c:	feffffff 	.word	0xfeffffff
10015b20:	000007fe 	.word	0x000007fe
10015b24:	000007ff 	.word	0x000007ff

10015b28 <__aeabi_dsub>:
10015b28:	b5f0      	push	{r4, r5, r6, r7, lr}
10015b2a:	4657      	mov	r7, sl
10015b2c:	464e      	mov	r6, r9
10015b2e:	4645      	mov	r5, r8
10015b30:	b4e0      	push	{r5, r6, r7}
10015b32:	000e      	movs	r6, r1
10015b34:	0011      	movs	r1, r2
10015b36:	0ff2      	lsrs	r2, r6, #31
10015b38:	4692      	mov	sl, r2
10015b3a:	00c5      	lsls	r5, r0, #3
10015b3c:	0f42      	lsrs	r2, r0, #29
10015b3e:	0318      	lsls	r0, r3, #12
10015b40:	0337      	lsls	r7, r6, #12
10015b42:	0074      	lsls	r4, r6, #1
10015b44:	0a40      	lsrs	r0, r0, #9
10015b46:	0f4e      	lsrs	r6, r1, #29
10015b48:	0a7f      	lsrs	r7, r7, #9
10015b4a:	4330      	orrs	r0, r6
10015b4c:	4ecf      	ldr	r6, [pc, #828]	; (10015e8c <__aeabi_dsub+0x364>)
10015b4e:	4317      	orrs	r7, r2
10015b50:	005a      	lsls	r2, r3, #1
10015b52:	0d64      	lsrs	r4, r4, #21
10015b54:	0d52      	lsrs	r2, r2, #21
10015b56:	0fdb      	lsrs	r3, r3, #31
10015b58:	00c9      	lsls	r1, r1, #3
10015b5a:	42b2      	cmp	r2, r6
10015b5c:	d100      	bne.n	10015b60 <__aeabi_dsub+0x38>
10015b5e:	e0e5      	b.n	10015d2c <__aeabi_dsub+0x204>
10015b60:	2601      	movs	r6, #1
10015b62:	4073      	eors	r3, r6
10015b64:	1aa6      	subs	r6, r4, r2
10015b66:	46b4      	mov	ip, r6
10015b68:	4553      	cmp	r3, sl
10015b6a:	d100      	bne.n	10015b6e <__aeabi_dsub+0x46>
10015b6c:	e0af      	b.n	10015cce <__aeabi_dsub+0x1a6>
10015b6e:	2e00      	cmp	r6, #0
10015b70:	dc00      	bgt.n	10015b74 <__aeabi_dsub+0x4c>
10015b72:	e10d      	b.n	10015d90 <__aeabi_dsub+0x268>
10015b74:	2a00      	cmp	r2, #0
10015b76:	d13a      	bne.n	10015bee <__aeabi_dsub+0xc6>
10015b78:	0003      	movs	r3, r0
10015b7a:	430b      	orrs	r3, r1
10015b7c:	d000      	beq.n	10015b80 <__aeabi_dsub+0x58>
10015b7e:	e0e4      	b.n	10015d4a <__aeabi_dsub+0x222>
10015b80:	076b      	lsls	r3, r5, #29
10015b82:	d009      	beq.n	10015b98 <__aeabi_dsub+0x70>
10015b84:	230f      	movs	r3, #15
10015b86:	402b      	ands	r3, r5
10015b88:	2b04      	cmp	r3, #4
10015b8a:	d005      	beq.n	10015b98 <__aeabi_dsub+0x70>
10015b8c:	1d2b      	adds	r3, r5, #4
10015b8e:	42ab      	cmp	r3, r5
10015b90:	41ad      	sbcs	r5, r5
10015b92:	426d      	negs	r5, r5
10015b94:	197f      	adds	r7, r7, r5
10015b96:	001d      	movs	r5, r3
10015b98:	023b      	lsls	r3, r7, #8
10015b9a:	d400      	bmi.n	10015b9e <__aeabi_dsub+0x76>
10015b9c:	e088      	b.n	10015cb0 <__aeabi_dsub+0x188>
10015b9e:	4bbb      	ldr	r3, [pc, #748]	; (10015e8c <__aeabi_dsub+0x364>)
10015ba0:	3401      	adds	r4, #1
10015ba2:	429c      	cmp	r4, r3
10015ba4:	d100      	bne.n	10015ba8 <__aeabi_dsub+0x80>
10015ba6:	e110      	b.n	10015dca <__aeabi_dsub+0x2a2>
10015ba8:	003a      	movs	r2, r7
10015baa:	4bb9      	ldr	r3, [pc, #740]	; (10015e90 <__aeabi_dsub+0x368>)
10015bac:	4651      	mov	r1, sl
10015bae:	401a      	ands	r2, r3
10015bb0:	2301      	movs	r3, #1
10015bb2:	0750      	lsls	r0, r2, #29
10015bb4:	08ed      	lsrs	r5, r5, #3
10015bb6:	0252      	lsls	r2, r2, #9
10015bb8:	0564      	lsls	r4, r4, #21
10015bba:	4305      	orrs	r5, r0
10015bbc:	0b12      	lsrs	r2, r2, #12
10015bbe:	0d64      	lsrs	r4, r4, #21
10015bc0:	400b      	ands	r3, r1
10015bc2:	2100      	movs	r1, #0
10015bc4:	0028      	movs	r0, r5
10015bc6:	0312      	lsls	r2, r2, #12
10015bc8:	0d0d      	lsrs	r5, r1, #20
10015bca:	0b12      	lsrs	r2, r2, #12
10015bcc:	0564      	lsls	r4, r4, #21
10015bce:	052d      	lsls	r5, r5, #20
10015bd0:	4315      	orrs	r5, r2
10015bd2:	0862      	lsrs	r2, r4, #1
10015bd4:	4caf      	ldr	r4, [pc, #700]	; (10015e94 <__aeabi_dsub+0x36c>)
10015bd6:	07db      	lsls	r3, r3, #31
10015bd8:	402c      	ands	r4, r5
10015bda:	4314      	orrs	r4, r2
10015bdc:	0064      	lsls	r4, r4, #1
10015bde:	0864      	lsrs	r4, r4, #1
10015be0:	431c      	orrs	r4, r3
10015be2:	0021      	movs	r1, r4
10015be4:	bc1c      	pop	{r2, r3, r4}
10015be6:	4690      	mov	r8, r2
10015be8:	4699      	mov	r9, r3
10015bea:	46a2      	mov	sl, r4
10015bec:	bdf0      	pop	{r4, r5, r6, r7, pc}
10015bee:	4ba7      	ldr	r3, [pc, #668]	; (10015e8c <__aeabi_dsub+0x364>)
10015bf0:	429c      	cmp	r4, r3
10015bf2:	d0c5      	beq.n	10015b80 <__aeabi_dsub+0x58>
10015bf4:	2380      	movs	r3, #128	; 0x80
10015bf6:	041b      	lsls	r3, r3, #16
10015bf8:	4318      	orrs	r0, r3
10015bfa:	4663      	mov	r3, ip
10015bfc:	2b38      	cmp	r3, #56	; 0x38
10015bfe:	dd00      	ble.n	10015c02 <__aeabi_dsub+0xda>
10015c00:	e0fd      	b.n	10015dfe <__aeabi_dsub+0x2d6>
10015c02:	2b1f      	cmp	r3, #31
10015c04:	dd00      	ble.n	10015c08 <__aeabi_dsub+0xe0>
10015c06:	e130      	b.n	10015e6a <__aeabi_dsub+0x342>
10015c08:	4662      	mov	r2, ip
10015c0a:	2320      	movs	r3, #32
10015c0c:	1a9b      	subs	r3, r3, r2
10015c0e:	0002      	movs	r2, r0
10015c10:	409a      	lsls	r2, r3
10015c12:	4666      	mov	r6, ip
10015c14:	4690      	mov	r8, r2
10015c16:	000a      	movs	r2, r1
10015c18:	4099      	lsls	r1, r3
10015c1a:	40f2      	lsrs	r2, r6
10015c1c:	4646      	mov	r6, r8
10015c1e:	1e4b      	subs	r3, r1, #1
10015c20:	4199      	sbcs	r1, r3
10015c22:	4332      	orrs	r2, r6
10015c24:	4311      	orrs	r1, r2
10015c26:	4663      	mov	r3, ip
10015c28:	0002      	movs	r2, r0
10015c2a:	40da      	lsrs	r2, r3
10015c2c:	1a69      	subs	r1, r5, r1
10015c2e:	428d      	cmp	r5, r1
10015c30:	419b      	sbcs	r3, r3
10015c32:	000d      	movs	r5, r1
10015c34:	1aba      	subs	r2, r7, r2
10015c36:	425b      	negs	r3, r3
10015c38:	1ad7      	subs	r7, r2, r3
10015c3a:	023b      	lsls	r3, r7, #8
10015c3c:	d535      	bpl.n	10015caa <__aeabi_dsub+0x182>
10015c3e:	027a      	lsls	r2, r7, #9
10015c40:	0a53      	lsrs	r3, r2, #9
10015c42:	4698      	mov	r8, r3
10015c44:	4643      	mov	r3, r8
10015c46:	2b00      	cmp	r3, #0
10015c48:	d100      	bne.n	10015c4c <__aeabi_dsub+0x124>
10015c4a:	e0c4      	b.n	10015dd6 <__aeabi_dsub+0x2ae>
10015c4c:	4640      	mov	r0, r8
10015c4e:	f000 fc6f 	bl	10016530 <__clzsi2>
10015c52:	0003      	movs	r3, r0
10015c54:	3b08      	subs	r3, #8
10015c56:	2b1f      	cmp	r3, #31
10015c58:	dd00      	ble.n	10015c5c <__aeabi_dsub+0x134>
10015c5a:	e0c5      	b.n	10015de8 <__aeabi_dsub+0x2c0>
10015c5c:	2220      	movs	r2, #32
10015c5e:	0029      	movs	r1, r5
10015c60:	1ad2      	subs	r2, r2, r3
10015c62:	4647      	mov	r7, r8
10015c64:	40d1      	lsrs	r1, r2
10015c66:	409f      	lsls	r7, r3
10015c68:	000a      	movs	r2, r1
10015c6a:	409d      	lsls	r5, r3
10015c6c:	433a      	orrs	r2, r7
10015c6e:	429c      	cmp	r4, r3
10015c70:	dd00      	ble.n	10015c74 <__aeabi_dsub+0x14c>
10015c72:	e0c0      	b.n	10015df6 <__aeabi_dsub+0x2ce>
10015c74:	1b1c      	subs	r4, r3, r4
10015c76:	1c63      	adds	r3, r4, #1
10015c78:	2b1f      	cmp	r3, #31
10015c7a:	dd00      	ble.n	10015c7e <__aeabi_dsub+0x156>
10015c7c:	e0e4      	b.n	10015e48 <__aeabi_dsub+0x320>
10015c7e:	2120      	movs	r1, #32
10015c80:	0014      	movs	r4, r2
10015c82:	0028      	movs	r0, r5
10015c84:	1ac9      	subs	r1, r1, r3
10015c86:	40d8      	lsrs	r0, r3
10015c88:	408c      	lsls	r4, r1
10015c8a:	408d      	lsls	r5, r1
10015c8c:	4304      	orrs	r4, r0
10015c8e:	40da      	lsrs	r2, r3
10015c90:	1e68      	subs	r0, r5, #1
10015c92:	4185      	sbcs	r5, r0
10015c94:	0017      	movs	r7, r2
10015c96:	4325      	orrs	r5, r4
10015c98:	2400      	movs	r4, #0
10015c9a:	e771      	b.n	10015b80 <__aeabi_dsub+0x58>
10015c9c:	4642      	mov	r2, r8
10015c9e:	4663      	mov	r3, ip
10015ca0:	431a      	orrs	r2, r3
10015ca2:	d100      	bne.n	10015ca6 <__aeabi_dsub+0x17e>
10015ca4:	e24c      	b.n	10016140 <__aeabi_dsub+0x618>
10015ca6:	4667      	mov	r7, ip
10015ca8:	4645      	mov	r5, r8
10015caa:	076b      	lsls	r3, r5, #29
10015cac:	d000      	beq.n	10015cb0 <__aeabi_dsub+0x188>
10015cae:	e769      	b.n	10015b84 <__aeabi_dsub+0x5c>
10015cb0:	2301      	movs	r3, #1
10015cb2:	4651      	mov	r1, sl
10015cb4:	0778      	lsls	r0, r7, #29
10015cb6:	08ed      	lsrs	r5, r5, #3
10015cb8:	08fa      	lsrs	r2, r7, #3
10015cba:	400b      	ands	r3, r1
10015cbc:	4305      	orrs	r5, r0
10015cbe:	4973      	ldr	r1, [pc, #460]	; (10015e8c <__aeabi_dsub+0x364>)
10015cc0:	428c      	cmp	r4, r1
10015cc2:	d038      	beq.n	10015d36 <__aeabi_dsub+0x20e>
10015cc4:	0312      	lsls	r2, r2, #12
10015cc6:	0564      	lsls	r4, r4, #21
10015cc8:	0b12      	lsrs	r2, r2, #12
10015cca:	0d64      	lsrs	r4, r4, #21
10015ccc:	e779      	b.n	10015bc2 <__aeabi_dsub+0x9a>
10015cce:	2e00      	cmp	r6, #0
10015cd0:	dc00      	bgt.n	10015cd4 <__aeabi_dsub+0x1ac>
10015cd2:	e09a      	b.n	10015e0a <__aeabi_dsub+0x2e2>
10015cd4:	2a00      	cmp	r2, #0
10015cd6:	d047      	beq.n	10015d68 <__aeabi_dsub+0x240>
10015cd8:	4a6c      	ldr	r2, [pc, #432]	; (10015e8c <__aeabi_dsub+0x364>)
10015cda:	4294      	cmp	r4, r2
10015cdc:	d100      	bne.n	10015ce0 <__aeabi_dsub+0x1b8>
10015cde:	e74f      	b.n	10015b80 <__aeabi_dsub+0x58>
10015ce0:	2280      	movs	r2, #128	; 0x80
10015ce2:	0412      	lsls	r2, r2, #16
10015ce4:	4310      	orrs	r0, r2
10015ce6:	4662      	mov	r2, ip
10015ce8:	2a38      	cmp	r2, #56	; 0x38
10015cea:	dc00      	bgt.n	10015cee <__aeabi_dsub+0x1c6>
10015cec:	e108      	b.n	10015f00 <__aeabi_dsub+0x3d8>
10015cee:	4301      	orrs	r1, r0
10015cf0:	1e48      	subs	r0, r1, #1
10015cf2:	4181      	sbcs	r1, r0
10015cf4:	2200      	movs	r2, #0
10015cf6:	b2c9      	uxtb	r1, r1
10015cf8:	1949      	adds	r1, r1, r5
10015cfa:	19d2      	adds	r2, r2, r7
10015cfc:	42a9      	cmp	r1, r5
10015cfe:	41bf      	sbcs	r7, r7
10015d00:	000d      	movs	r5, r1
10015d02:	427f      	negs	r7, r7
10015d04:	18bf      	adds	r7, r7, r2
10015d06:	023a      	lsls	r2, r7, #8
10015d08:	d400      	bmi.n	10015d0c <__aeabi_dsub+0x1e4>
10015d0a:	e142      	b.n	10015f92 <__aeabi_dsub+0x46a>
10015d0c:	4a5f      	ldr	r2, [pc, #380]	; (10015e8c <__aeabi_dsub+0x364>)
10015d0e:	3401      	adds	r4, #1
10015d10:	4294      	cmp	r4, r2
10015d12:	d100      	bne.n	10015d16 <__aeabi_dsub+0x1ee>
10015d14:	e14e      	b.n	10015fb4 <__aeabi_dsub+0x48c>
10015d16:	2001      	movs	r0, #1
10015d18:	4a5d      	ldr	r2, [pc, #372]	; (10015e90 <__aeabi_dsub+0x368>)
10015d1a:	0869      	lsrs	r1, r5, #1
10015d1c:	403a      	ands	r2, r7
10015d1e:	4028      	ands	r0, r5
10015d20:	4308      	orrs	r0, r1
10015d22:	07d5      	lsls	r5, r2, #31
10015d24:	4305      	orrs	r5, r0
10015d26:	0857      	lsrs	r7, r2, #1
10015d28:	469a      	mov	sl, r3
10015d2a:	e729      	b.n	10015b80 <__aeabi_dsub+0x58>
10015d2c:	0006      	movs	r6, r0
10015d2e:	430e      	orrs	r6, r1
10015d30:	d000      	beq.n	10015d34 <__aeabi_dsub+0x20c>
10015d32:	e717      	b.n	10015b64 <__aeabi_dsub+0x3c>
10015d34:	e714      	b.n	10015b60 <__aeabi_dsub+0x38>
10015d36:	0029      	movs	r1, r5
10015d38:	4311      	orrs	r1, r2
10015d3a:	d100      	bne.n	10015d3e <__aeabi_dsub+0x216>
10015d3c:	e1f9      	b.n	10016132 <__aeabi_dsub+0x60a>
10015d3e:	2180      	movs	r1, #128	; 0x80
10015d40:	0309      	lsls	r1, r1, #12
10015d42:	430a      	orrs	r2, r1
10015d44:	0312      	lsls	r2, r2, #12
10015d46:	0b12      	lsrs	r2, r2, #12
10015d48:	e73b      	b.n	10015bc2 <__aeabi_dsub+0x9a>
10015d4a:	2301      	movs	r3, #1
10015d4c:	425b      	negs	r3, r3
10015d4e:	4698      	mov	r8, r3
10015d50:	44c4      	add	ip, r8
10015d52:	4663      	mov	r3, ip
10015d54:	2b00      	cmp	r3, #0
10015d56:	d172      	bne.n	10015e3e <__aeabi_dsub+0x316>
10015d58:	1a69      	subs	r1, r5, r1
10015d5a:	428d      	cmp	r5, r1
10015d5c:	419b      	sbcs	r3, r3
10015d5e:	1a3f      	subs	r7, r7, r0
10015d60:	425b      	negs	r3, r3
10015d62:	1aff      	subs	r7, r7, r3
10015d64:	000d      	movs	r5, r1
10015d66:	e768      	b.n	10015c3a <__aeabi_dsub+0x112>
10015d68:	0002      	movs	r2, r0
10015d6a:	430a      	orrs	r2, r1
10015d6c:	d100      	bne.n	10015d70 <__aeabi_dsub+0x248>
10015d6e:	e707      	b.n	10015b80 <__aeabi_dsub+0x58>
10015d70:	2201      	movs	r2, #1
10015d72:	4252      	negs	r2, r2
10015d74:	4690      	mov	r8, r2
10015d76:	44c4      	add	ip, r8
10015d78:	4662      	mov	r2, ip
10015d7a:	2a00      	cmp	r2, #0
10015d7c:	d000      	beq.n	10015d80 <__aeabi_dsub+0x258>
10015d7e:	e0e6      	b.n	10015f4e <__aeabi_dsub+0x426>
10015d80:	1869      	adds	r1, r5, r1
10015d82:	42a9      	cmp	r1, r5
10015d84:	41b6      	sbcs	r6, r6
10015d86:	183f      	adds	r7, r7, r0
10015d88:	4276      	negs	r6, r6
10015d8a:	19f7      	adds	r7, r6, r7
10015d8c:	000d      	movs	r5, r1
10015d8e:	e7ba      	b.n	10015d06 <__aeabi_dsub+0x1de>
10015d90:	2e00      	cmp	r6, #0
10015d92:	d000      	beq.n	10015d96 <__aeabi_dsub+0x26e>
10015d94:	e080      	b.n	10015e98 <__aeabi_dsub+0x370>
10015d96:	1c62      	adds	r2, r4, #1
10015d98:	0552      	lsls	r2, r2, #21
10015d9a:	0d52      	lsrs	r2, r2, #21
10015d9c:	2a01      	cmp	r2, #1
10015d9e:	dc00      	bgt.n	10015da2 <__aeabi_dsub+0x27a>
10015da0:	e0f9      	b.n	10015f96 <__aeabi_dsub+0x46e>
10015da2:	1a6a      	subs	r2, r5, r1
10015da4:	4691      	mov	r9, r2
10015da6:	454d      	cmp	r5, r9
10015da8:	41b6      	sbcs	r6, r6
10015daa:	1a3a      	subs	r2, r7, r0
10015dac:	4276      	negs	r6, r6
10015dae:	1b92      	subs	r2, r2, r6
10015db0:	4690      	mov	r8, r2
10015db2:	0212      	lsls	r2, r2, #8
10015db4:	d400      	bmi.n	10015db8 <__aeabi_dsub+0x290>
10015db6:	e099      	b.n	10015eec <__aeabi_dsub+0x3c4>
10015db8:	1b4d      	subs	r5, r1, r5
10015dba:	42a9      	cmp	r1, r5
10015dbc:	4189      	sbcs	r1, r1
10015dbe:	1bc7      	subs	r7, r0, r7
10015dc0:	4249      	negs	r1, r1
10015dc2:	1a7a      	subs	r2, r7, r1
10015dc4:	4690      	mov	r8, r2
10015dc6:	469a      	mov	sl, r3
10015dc8:	e73c      	b.n	10015c44 <__aeabi_dsub+0x11c>
10015dca:	4652      	mov	r2, sl
10015dcc:	2301      	movs	r3, #1
10015dce:	2500      	movs	r5, #0
10015dd0:	4013      	ands	r3, r2
10015dd2:	2200      	movs	r2, #0
10015dd4:	e6f5      	b.n	10015bc2 <__aeabi_dsub+0x9a>
10015dd6:	0028      	movs	r0, r5
10015dd8:	f000 fbaa 	bl	10016530 <__clzsi2>
10015ddc:	3020      	adds	r0, #32
10015dde:	0003      	movs	r3, r0
10015de0:	3b08      	subs	r3, #8
10015de2:	2b1f      	cmp	r3, #31
10015de4:	dc00      	bgt.n	10015de8 <__aeabi_dsub+0x2c0>
10015de6:	e739      	b.n	10015c5c <__aeabi_dsub+0x134>
10015de8:	002a      	movs	r2, r5
10015dea:	3828      	subs	r0, #40	; 0x28
10015dec:	4082      	lsls	r2, r0
10015dee:	2500      	movs	r5, #0
10015df0:	429c      	cmp	r4, r3
10015df2:	dc00      	bgt.n	10015df6 <__aeabi_dsub+0x2ce>
10015df4:	e73e      	b.n	10015c74 <__aeabi_dsub+0x14c>
10015df6:	4f26      	ldr	r7, [pc, #152]	; (10015e90 <__aeabi_dsub+0x368>)
10015df8:	1ae4      	subs	r4, r4, r3
10015dfa:	4017      	ands	r7, r2
10015dfc:	e6c0      	b.n	10015b80 <__aeabi_dsub+0x58>
10015dfe:	4301      	orrs	r1, r0
10015e00:	1e48      	subs	r0, r1, #1
10015e02:	4181      	sbcs	r1, r0
10015e04:	2200      	movs	r2, #0
10015e06:	b2c9      	uxtb	r1, r1
10015e08:	e710      	b.n	10015c2c <__aeabi_dsub+0x104>
10015e0a:	2e00      	cmp	r6, #0
10015e0c:	d000      	beq.n	10015e10 <__aeabi_dsub+0x2e8>
10015e0e:	e0f1      	b.n	10015ff4 <__aeabi_dsub+0x4cc>
10015e10:	1c62      	adds	r2, r4, #1
10015e12:	4694      	mov	ip, r2
10015e14:	0552      	lsls	r2, r2, #21
10015e16:	0d52      	lsrs	r2, r2, #21
10015e18:	2a01      	cmp	r2, #1
10015e1a:	dc00      	bgt.n	10015e1e <__aeabi_dsub+0x2f6>
10015e1c:	e0a0      	b.n	10015f60 <__aeabi_dsub+0x438>
10015e1e:	4a1b      	ldr	r2, [pc, #108]	; (10015e8c <__aeabi_dsub+0x364>)
10015e20:	4594      	cmp	ip, r2
10015e22:	d100      	bne.n	10015e26 <__aeabi_dsub+0x2fe>
10015e24:	e0c5      	b.n	10015fb2 <__aeabi_dsub+0x48a>
10015e26:	1869      	adds	r1, r5, r1
10015e28:	42a9      	cmp	r1, r5
10015e2a:	4192      	sbcs	r2, r2
10015e2c:	183f      	adds	r7, r7, r0
10015e2e:	4252      	negs	r2, r2
10015e30:	19d2      	adds	r2, r2, r7
10015e32:	0849      	lsrs	r1, r1, #1
10015e34:	07d5      	lsls	r5, r2, #31
10015e36:	430d      	orrs	r5, r1
10015e38:	0857      	lsrs	r7, r2, #1
10015e3a:	4664      	mov	r4, ip
10015e3c:	e6a0      	b.n	10015b80 <__aeabi_dsub+0x58>
10015e3e:	4b13      	ldr	r3, [pc, #76]	; (10015e8c <__aeabi_dsub+0x364>)
10015e40:	429c      	cmp	r4, r3
10015e42:	d000      	beq.n	10015e46 <__aeabi_dsub+0x31e>
10015e44:	e6d9      	b.n	10015bfa <__aeabi_dsub+0xd2>
10015e46:	e69b      	b.n	10015b80 <__aeabi_dsub+0x58>
10015e48:	0011      	movs	r1, r2
10015e4a:	3c1f      	subs	r4, #31
10015e4c:	40e1      	lsrs	r1, r4
10015e4e:	000c      	movs	r4, r1
10015e50:	2b20      	cmp	r3, #32
10015e52:	d100      	bne.n	10015e56 <__aeabi_dsub+0x32e>
10015e54:	e080      	b.n	10015f58 <__aeabi_dsub+0x430>
10015e56:	2140      	movs	r1, #64	; 0x40
10015e58:	1acb      	subs	r3, r1, r3
10015e5a:	409a      	lsls	r2, r3
10015e5c:	4315      	orrs	r5, r2
10015e5e:	1e6a      	subs	r2, r5, #1
10015e60:	4195      	sbcs	r5, r2
10015e62:	2700      	movs	r7, #0
10015e64:	4325      	orrs	r5, r4
10015e66:	2400      	movs	r4, #0
10015e68:	e71f      	b.n	10015caa <__aeabi_dsub+0x182>
10015e6a:	4663      	mov	r3, ip
10015e6c:	0002      	movs	r2, r0
10015e6e:	3b20      	subs	r3, #32
10015e70:	40da      	lsrs	r2, r3
10015e72:	4663      	mov	r3, ip
10015e74:	2b20      	cmp	r3, #32
10015e76:	d071      	beq.n	10015f5c <__aeabi_dsub+0x434>
10015e78:	2340      	movs	r3, #64	; 0x40
10015e7a:	4666      	mov	r6, ip
10015e7c:	1b9b      	subs	r3, r3, r6
10015e7e:	4098      	lsls	r0, r3
10015e80:	4301      	orrs	r1, r0
10015e82:	1e48      	subs	r0, r1, #1
10015e84:	4181      	sbcs	r1, r0
10015e86:	4311      	orrs	r1, r2
10015e88:	2200      	movs	r2, #0
10015e8a:	e6cf      	b.n	10015c2c <__aeabi_dsub+0x104>
10015e8c:	000007ff 	.word	0x000007ff
10015e90:	ff7fffff 	.word	0xff7fffff
10015e94:	800fffff 	.word	0x800fffff
10015e98:	2c00      	cmp	r4, #0
10015e9a:	d048      	beq.n	10015f2e <__aeabi_dsub+0x406>
10015e9c:	4cca      	ldr	r4, [pc, #808]	; (100161c8 <__aeabi_dsub+0x6a0>)
10015e9e:	42a2      	cmp	r2, r4
10015ea0:	d100      	bne.n	10015ea4 <__aeabi_dsub+0x37c>
10015ea2:	e0a2      	b.n	10015fea <__aeabi_dsub+0x4c2>
10015ea4:	4274      	negs	r4, r6
10015ea6:	46a1      	mov	r9, r4
10015ea8:	2480      	movs	r4, #128	; 0x80
10015eaa:	0424      	lsls	r4, r4, #16
10015eac:	4327      	orrs	r7, r4
10015eae:	464c      	mov	r4, r9
10015eb0:	2c38      	cmp	r4, #56	; 0x38
10015eb2:	dd00      	ble.n	10015eb6 <__aeabi_dsub+0x38e>
10015eb4:	e0db      	b.n	1001606e <__aeabi_dsub+0x546>
10015eb6:	2c1f      	cmp	r4, #31
10015eb8:	dd00      	ble.n	10015ebc <__aeabi_dsub+0x394>
10015eba:	e144      	b.n	10016146 <__aeabi_dsub+0x61e>
10015ebc:	464e      	mov	r6, r9
10015ebe:	2420      	movs	r4, #32
10015ec0:	1ba4      	subs	r4, r4, r6
10015ec2:	003e      	movs	r6, r7
10015ec4:	40a6      	lsls	r6, r4
10015ec6:	46a2      	mov	sl, r4
10015ec8:	46b0      	mov	r8, r6
10015eca:	464c      	mov	r4, r9
10015ecc:	002e      	movs	r6, r5
10015ece:	40e6      	lsrs	r6, r4
10015ed0:	46b4      	mov	ip, r6
10015ed2:	4646      	mov	r6, r8
10015ed4:	4664      	mov	r4, ip
10015ed6:	4326      	orrs	r6, r4
10015ed8:	4654      	mov	r4, sl
10015eda:	40a5      	lsls	r5, r4
10015edc:	1e6c      	subs	r4, r5, #1
10015ede:	41a5      	sbcs	r5, r4
10015ee0:	0034      	movs	r4, r6
10015ee2:	432c      	orrs	r4, r5
10015ee4:	464d      	mov	r5, r9
10015ee6:	40ef      	lsrs	r7, r5
10015ee8:	1b0d      	subs	r5, r1, r4
10015eea:	e028      	b.n	10015f3e <__aeabi_dsub+0x416>
10015eec:	464a      	mov	r2, r9
10015eee:	4643      	mov	r3, r8
10015ef0:	464d      	mov	r5, r9
10015ef2:	431a      	orrs	r2, r3
10015ef4:	d000      	beq.n	10015ef8 <__aeabi_dsub+0x3d0>
10015ef6:	e6a5      	b.n	10015c44 <__aeabi_dsub+0x11c>
10015ef8:	2300      	movs	r3, #0
10015efa:	2400      	movs	r4, #0
10015efc:	2500      	movs	r5, #0
10015efe:	e6de      	b.n	10015cbe <__aeabi_dsub+0x196>
10015f00:	2a1f      	cmp	r2, #31
10015f02:	dc5a      	bgt.n	10015fba <__aeabi_dsub+0x492>
10015f04:	4666      	mov	r6, ip
10015f06:	2220      	movs	r2, #32
10015f08:	1b92      	subs	r2, r2, r6
10015f0a:	0006      	movs	r6, r0
10015f0c:	4096      	lsls	r6, r2
10015f0e:	4691      	mov	r9, r2
10015f10:	46b0      	mov	r8, r6
10015f12:	4662      	mov	r2, ip
10015f14:	000e      	movs	r6, r1
10015f16:	40d6      	lsrs	r6, r2
10015f18:	4642      	mov	r2, r8
10015f1a:	4316      	orrs	r6, r2
10015f1c:	464a      	mov	r2, r9
10015f1e:	4091      	lsls	r1, r2
10015f20:	1e4a      	subs	r2, r1, #1
10015f22:	4191      	sbcs	r1, r2
10015f24:	0002      	movs	r2, r0
10015f26:	4660      	mov	r0, ip
10015f28:	4331      	orrs	r1, r6
10015f2a:	40c2      	lsrs	r2, r0
10015f2c:	e6e4      	b.n	10015cf8 <__aeabi_dsub+0x1d0>
10015f2e:	003c      	movs	r4, r7
10015f30:	432c      	orrs	r4, r5
10015f32:	d05a      	beq.n	10015fea <__aeabi_dsub+0x4c2>
10015f34:	43f4      	mvns	r4, r6
10015f36:	46a1      	mov	r9, r4
10015f38:	2c00      	cmp	r4, #0
10015f3a:	d152      	bne.n	10015fe2 <__aeabi_dsub+0x4ba>
10015f3c:	1b4d      	subs	r5, r1, r5
10015f3e:	42a9      	cmp	r1, r5
10015f40:	4189      	sbcs	r1, r1
10015f42:	1bc7      	subs	r7, r0, r7
10015f44:	4249      	negs	r1, r1
10015f46:	1a7f      	subs	r7, r7, r1
10015f48:	0014      	movs	r4, r2
10015f4a:	469a      	mov	sl, r3
10015f4c:	e675      	b.n	10015c3a <__aeabi_dsub+0x112>
10015f4e:	4a9e      	ldr	r2, [pc, #632]	; (100161c8 <__aeabi_dsub+0x6a0>)
10015f50:	4294      	cmp	r4, r2
10015f52:	d000      	beq.n	10015f56 <__aeabi_dsub+0x42e>
10015f54:	e6c7      	b.n	10015ce6 <__aeabi_dsub+0x1be>
10015f56:	e613      	b.n	10015b80 <__aeabi_dsub+0x58>
10015f58:	2200      	movs	r2, #0
10015f5a:	e77f      	b.n	10015e5c <__aeabi_dsub+0x334>
10015f5c:	2000      	movs	r0, #0
10015f5e:	e78f      	b.n	10015e80 <__aeabi_dsub+0x358>
10015f60:	2c00      	cmp	r4, #0
10015f62:	d000      	beq.n	10015f66 <__aeabi_dsub+0x43e>
10015f64:	e0c8      	b.n	100160f8 <__aeabi_dsub+0x5d0>
10015f66:	003b      	movs	r3, r7
10015f68:	432b      	orrs	r3, r5
10015f6a:	d100      	bne.n	10015f6e <__aeabi_dsub+0x446>
10015f6c:	e10f      	b.n	1001618e <__aeabi_dsub+0x666>
10015f6e:	0003      	movs	r3, r0
10015f70:	430b      	orrs	r3, r1
10015f72:	d100      	bne.n	10015f76 <__aeabi_dsub+0x44e>
10015f74:	e604      	b.n	10015b80 <__aeabi_dsub+0x58>
10015f76:	1869      	adds	r1, r5, r1
10015f78:	42a9      	cmp	r1, r5
10015f7a:	419b      	sbcs	r3, r3
10015f7c:	183f      	adds	r7, r7, r0
10015f7e:	425b      	negs	r3, r3
10015f80:	19df      	adds	r7, r3, r7
10015f82:	023b      	lsls	r3, r7, #8
10015f84:	d400      	bmi.n	10015f88 <__aeabi_dsub+0x460>
10015f86:	e11a      	b.n	100161be <__aeabi_dsub+0x696>
10015f88:	4b90      	ldr	r3, [pc, #576]	; (100161cc <__aeabi_dsub+0x6a4>)
10015f8a:	000d      	movs	r5, r1
10015f8c:	401f      	ands	r7, r3
10015f8e:	4664      	mov	r4, ip
10015f90:	e5f6      	b.n	10015b80 <__aeabi_dsub+0x58>
10015f92:	469a      	mov	sl, r3
10015f94:	e689      	b.n	10015caa <__aeabi_dsub+0x182>
10015f96:	003a      	movs	r2, r7
10015f98:	432a      	orrs	r2, r5
10015f9a:	2c00      	cmp	r4, #0
10015f9c:	d15c      	bne.n	10016058 <__aeabi_dsub+0x530>
10015f9e:	2a00      	cmp	r2, #0
10015fa0:	d175      	bne.n	1001608e <__aeabi_dsub+0x566>
10015fa2:	0002      	movs	r2, r0
10015fa4:	430a      	orrs	r2, r1
10015fa6:	d100      	bne.n	10015faa <__aeabi_dsub+0x482>
10015fa8:	e0ca      	b.n	10016140 <__aeabi_dsub+0x618>
10015faa:	0007      	movs	r7, r0
10015fac:	000d      	movs	r5, r1
10015fae:	469a      	mov	sl, r3
10015fb0:	e5e6      	b.n	10015b80 <__aeabi_dsub+0x58>
10015fb2:	4664      	mov	r4, ip
10015fb4:	2200      	movs	r2, #0
10015fb6:	2500      	movs	r5, #0
10015fb8:	e681      	b.n	10015cbe <__aeabi_dsub+0x196>
10015fba:	4662      	mov	r2, ip
10015fbc:	0006      	movs	r6, r0
10015fbe:	3a20      	subs	r2, #32
10015fc0:	40d6      	lsrs	r6, r2
10015fc2:	4662      	mov	r2, ip
10015fc4:	46b0      	mov	r8, r6
10015fc6:	2a20      	cmp	r2, #32
10015fc8:	d100      	bne.n	10015fcc <__aeabi_dsub+0x4a4>
10015fca:	e0b7      	b.n	1001613c <__aeabi_dsub+0x614>
10015fcc:	2240      	movs	r2, #64	; 0x40
10015fce:	4666      	mov	r6, ip
10015fd0:	1b92      	subs	r2, r2, r6
10015fd2:	4090      	lsls	r0, r2
10015fd4:	4301      	orrs	r1, r0
10015fd6:	4642      	mov	r2, r8
10015fd8:	1e48      	subs	r0, r1, #1
10015fda:	4181      	sbcs	r1, r0
10015fdc:	4311      	orrs	r1, r2
10015fde:	2200      	movs	r2, #0
10015fe0:	e68a      	b.n	10015cf8 <__aeabi_dsub+0x1d0>
10015fe2:	4c79      	ldr	r4, [pc, #484]	; (100161c8 <__aeabi_dsub+0x6a0>)
10015fe4:	42a2      	cmp	r2, r4
10015fe6:	d000      	beq.n	10015fea <__aeabi_dsub+0x4c2>
10015fe8:	e761      	b.n	10015eae <__aeabi_dsub+0x386>
10015fea:	0007      	movs	r7, r0
10015fec:	000d      	movs	r5, r1
10015fee:	0014      	movs	r4, r2
10015ff0:	469a      	mov	sl, r3
10015ff2:	e5c5      	b.n	10015b80 <__aeabi_dsub+0x58>
10015ff4:	2c00      	cmp	r4, #0
10015ff6:	d141      	bne.n	1001607c <__aeabi_dsub+0x554>
10015ff8:	003c      	movs	r4, r7
10015ffa:	432c      	orrs	r4, r5
10015ffc:	d078      	beq.n	100160f0 <__aeabi_dsub+0x5c8>
10015ffe:	43f4      	mvns	r4, r6
10016000:	46a1      	mov	r9, r4
10016002:	2c00      	cmp	r4, #0
10016004:	d020      	beq.n	10016048 <__aeabi_dsub+0x520>
10016006:	4c70      	ldr	r4, [pc, #448]	; (100161c8 <__aeabi_dsub+0x6a0>)
10016008:	42a2      	cmp	r2, r4
1001600a:	d071      	beq.n	100160f0 <__aeabi_dsub+0x5c8>
1001600c:	464c      	mov	r4, r9
1001600e:	2c38      	cmp	r4, #56	; 0x38
10016010:	dd00      	ble.n	10016014 <__aeabi_dsub+0x4ec>
10016012:	e0b2      	b.n	1001617a <__aeabi_dsub+0x652>
10016014:	2c1f      	cmp	r4, #31
10016016:	dd00      	ble.n	1001601a <__aeabi_dsub+0x4f2>
10016018:	e0bc      	b.n	10016194 <__aeabi_dsub+0x66c>
1001601a:	2620      	movs	r6, #32
1001601c:	1b34      	subs	r4, r6, r4
1001601e:	46a2      	mov	sl, r4
10016020:	003c      	movs	r4, r7
10016022:	4656      	mov	r6, sl
10016024:	40b4      	lsls	r4, r6
10016026:	464e      	mov	r6, r9
10016028:	46a0      	mov	r8, r4
1001602a:	002c      	movs	r4, r5
1001602c:	40f4      	lsrs	r4, r6
1001602e:	46a4      	mov	ip, r4
10016030:	4644      	mov	r4, r8
10016032:	4666      	mov	r6, ip
10016034:	4334      	orrs	r4, r6
10016036:	46a4      	mov	ip, r4
10016038:	4654      	mov	r4, sl
1001603a:	40a5      	lsls	r5, r4
1001603c:	4664      	mov	r4, ip
1001603e:	1e6e      	subs	r6, r5, #1
10016040:	41b5      	sbcs	r5, r6
10016042:	4325      	orrs	r5, r4
10016044:	464c      	mov	r4, r9
10016046:	40e7      	lsrs	r7, r4
10016048:	186d      	adds	r5, r5, r1
1001604a:	428d      	cmp	r5, r1
1001604c:	4189      	sbcs	r1, r1
1001604e:	183f      	adds	r7, r7, r0
10016050:	4249      	negs	r1, r1
10016052:	19cf      	adds	r7, r1, r7
10016054:	0014      	movs	r4, r2
10016056:	e656      	b.n	10015d06 <__aeabi_dsub+0x1de>
10016058:	2a00      	cmp	r2, #0
1001605a:	d12f      	bne.n	100160bc <__aeabi_dsub+0x594>
1001605c:	0002      	movs	r2, r0
1001605e:	430a      	orrs	r2, r1
10016060:	d100      	bne.n	10016064 <__aeabi_dsub+0x53c>
10016062:	e084      	b.n	1001616e <__aeabi_dsub+0x646>
10016064:	0007      	movs	r7, r0
10016066:	000d      	movs	r5, r1
10016068:	469a      	mov	sl, r3
1001606a:	4c57      	ldr	r4, [pc, #348]	; (100161c8 <__aeabi_dsub+0x6a0>)
1001606c:	e588      	b.n	10015b80 <__aeabi_dsub+0x58>
1001606e:	433d      	orrs	r5, r7
10016070:	1e6f      	subs	r7, r5, #1
10016072:	41bd      	sbcs	r5, r7
10016074:	b2ec      	uxtb	r4, r5
10016076:	2700      	movs	r7, #0
10016078:	1b0d      	subs	r5, r1, r4
1001607a:	e760      	b.n	10015f3e <__aeabi_dsub+0x416>
1001607c:	4c52      	ldr	r4, [pc, #328]	; (100161c8 <__aeabi_dsub+0x6a0>)
1001607e:	42a2      	cmp	r2, r4
10016080:	d036      	beq.n	100160f0 <__aeabi_dsub+0x5c8>
10016082:	4274      	negs	r4, r6
10016084:	2680      	movs	r6, #128	; 0x80
10016086:	0436      	lsls	r6, r6, #16
10016088:	46a1      	mov	r9, r4
1001608a:	4337      	orrs	r7, r6
1001608c:	e7be      	b.n	1001600c <__aeabi_dsub+0x4e4>
1001608e:	0002      	movs	r2, r0
10016090:	430a      	orrs	r2, r1
10016092:	d100      	bne.n	10016096 <__aeabi_dsub+0x56e>
10016094:	e574      	b.n	10015b80 <__aeabi_dsub+0x58>
10016096:	1a6a      	subs	r2, r5, r1
10016098:	4690      	mov	r8, r2
1001609a:	4545      	cmp	r5, r8
1001609c:	41b6      	sbcs	r6, r6
1001609e:	1a3a      	subs	r2, r7, r0
100160a0:	4276      	negs	r6, r6
100160a2:	1b92      	subs	r2, r2, r6
100160a4:	4694      	mov	ip, r2
100160a6:	0212      	lsls	r2, r2, #8
100160a8:	d400      	bmi.n	100160ac <__aeabi_dsub+0x584>
100160aa:	e5f7      	b.n	10015c9c <__aeabi_dsub+0x174>
100160ac:	1b4d      	subs	r5, r1, r5
100160ae:	42a9      	cmp	r1, r5
100160b0:	4189      	sbcs	r1, r1
100160b2:	1bc7      	subs	r7, r0, r7
100160b4:	4249      	negs	r1, r1
100160b6:	1a7f      	subs	r7, r7, r1
100160b8:	469a      	mov	sl, r3
100160ba:	e561      	b.n	10015b80 <__aeabi_dsub+0x58>
100160bc:	0002      	movs	r2, r0
100160be:	430a      	orrs	r2, r1
100160c0:	d03a      	beq.n	10016138 <__aeabi_dsub+0x610>
100160c2:	08ed      	lsrs	r5, r5, #3
100160c4:	077c      	lsls	r4, r7, #29
100160c6:	432c      	orrs	r4, r5
100160c8:	2580      	movs	r5, #128	; 0x80
100160ca:	08fa      	lsrs	r2, r7, #3
100160cc:	032d      	lsls	r5, r5, #12
100160ce:	422a      	tst	r2, r5
100160d0:	d008      	beq.n	100160e4 <__aeabi_dsub+0x5bc>
100160d2:	08c7      	lsrs	r7, r0, #3
100160d4:	422f      	tst	r7, r5
100160d6:	d105      	bne.n	100160e4 <__aeabi_dsub+0x5bc>
100160d8:	0745      	lsls	r5, r0, #29
100160da:	002c      	movs	r4, r5
100160dc:	003a      	movs	r2, r7
100160de:	469a      	mov	sl, r3
100160e0:	08c9      	lsrs	r1, r1, #3
100160e2:	430c      	orrs	r4, r1
100160e4:	0f67      	lsrs	r7, r4, #29
100160e6:	00d2      	lsls	r2, r2, #3
100160e8:	00e5      	lsls	r5, r4, #3
100160ea:	4317      	orrs	r7, r2
100160ec:	4c36      	ldr	r4, [pc, #216]	; (100161c8 <__aeabi_dsub+0x6a0>)
100160ee:	e547      	b.n	10015b80 <__aeabi_dsub+0x58>
100160f0:	0007      	movs	r7, r0
100160f2:	000d      	movs	r5, r1
100160f4:	0014      	movs	r4, r2
100160f6:	e543      	b.n	10015b80 <__aeabi_dsub+0x58>
100160f8:	003a      	movs	r2, r7
100160fa:	432a      	orrs	r2, r5
100160fc:	d043      	beq.n	10016186 <__aeabi_dsub+0x65e>
100160fe:	0002      	movs	r2, r0
10016100:	430a      	orrs	r2, r1
10016102:	d019      	beq.n	10016138 <__aeabi_dsub+0x610>
10016104:	08ed      	lsrs	r5, r5, #3
10016106:	077c      	lsls	r4, r7, #29
10016108:	432c      	orrs	r4, r5
1001610a:	2580      	movs	r5, #128	; 0x80
1001610c:	08fa      	lsrs	r2, r7, #3
1001610e:	032d      	lsls	r5, r5, #12
10016110:	422a      	tst	r2, r5
10016112:	d007      	beq.n	10016124 <__aeabi_dsub+0x5fc>
10016114:	08c6      	lsrs	r6, r0, #3
10016116:	422e      	tst	r6, r5
10016118:	d104      	bne.n	10016124 <__aeabi_dsub+0x5fc>
1001611a:	0747      	lsls	r7, r0, #29
1001611c:	003c      	movs	r4, r7
1001611e:	0032      	movs	r2, r6
10016120:	08c9      	lsrs	r1, r1, #3
10016122:	430c      	orrs	r4, r1
10016124:	00d7      	lsls	r7, r2, #3
10016126:	0f62      	lsrs	r2, r4, #29
10016128:	00e5      	lsls	r5, r4, #3
1001612a:	4317      	orrs	r7, r2
1001612c:	469a      	mov	sl, r3
1001612e:	4c26      	ldr	r4, [pc, #152]	; (100161c8 <__aeabi_dsub+0x6a0>)
10016130:	e526      	b.n	10015b80 <__aeabi_dsub+0x58>
10016132:	2200      	movs	r2, #0
10016134:	2500      	movs	r5, #0
10016136:	e544      	b.n	10015bc2 <__aeabi_dsub+0x9a>
10016138:	4c23      	ldr	r4, [pc, #140]	; (100161c8 <__aeabi_dsub+0x6a0>)
1001613a:	e521      	b.n	10015b80 <__aeabi_dsub+0x58>
1001613c:	2000      	movs	r0, #0
1001613e:	e749      	b.n	10015fd4 <__aeabi_dsub+0x4ac>
10016140:	2300      	movs	r3, #0
10016142:	2500      	movs	r5, #0
10016144:	e5bb      	b.n	10015cbe <__aeabi_dsub+0x196>
10016146:	464c      	mov	r4, r9
10016148:	003e      	movs	r6, r7
1001614a:	3c20      	subs	r4, #32
1001614c:	40e6      	lsrs	r6, r4
1001614e:	464c      	mov	r4, r9
10016150:	46b4      	mov	ip, r6
10016152:	2c20      	cmp	r4, #32
10016154:	d031      	beq.n	100161ba <__aeabi_dsub+0x692>
10016156:	2440      	movs	r4, #64	; 0x40
10016158:	464e      	mov	r6, r9
1001615a:	1ba6      	subs	r6, r4, r6
1001615c:	40b7      	lsls	r7, r6
1001615e:	433d      	orrs	r5, r7
10016160:	1e6c      	subs	r4, r5, #1
10016162:	41a5      	sbcs	r5, r4
10016164:	4664      	mov	r4, ip
10016166:	432c      	orrs	r4, r5
10016168:	2700      	movs	r7, #0
1001616a:	1b0d      	subs	r5, r1, r4
1001616c:	e6e7      	b.n	10015f3e <__aeabi_dsub+0x416>
1001616e:	2280      	movs	r2, #128	; 0x80
10016170:	2300      	movs	r3, #0
10016172:	0312      	lsls	r2, r2, #12
10016174:	4c14      	ldr	r4, [pc, #80]	; (100161c8 <__aeabi_dsub+0x6a0>)
10016176:	2500      	movs	r5, #0
10016178:	e5a1      	b.n	10015cbe <__aeabi_dsub+0x196>
1001617a:	433d      	orrs	r5, r7
1001617c:	1e6f      	subs	r7, r5, #1
1001617e:	41bd      	sbcs	r5, r7
10016180:	2700      	movs	r7, #0
10016182:	b2ed      	uxtb	r5, r5
10016184:	e760      	b.n	10016048 <__aeabi_dsub+0x520>
10016186:	0007      	movs	r7, r0
10016188:	000d      	movs	r5, r1
1001618a:	4c0f      	ldr	r4, [pc, #60]	; (100161c8 <__aeabi_dsub+0x6a0>)
1001618c:	e4f8      	b.n	10015b80 <__aeabi_dsub+0x58>
1001618e:	0007      	movs	r7, r0
10016190:	000d      	movs	r5, r1
10016192:	e4f5      	b.n	10015b80 <__aeabi_dsub+0x58>
10016194:	464e      	mov	r6, r9
10016196:	003c      	movs	r4, r7
10016198:	3e20      	subs	r6, #32
1001619a:	40f4      	lsrs	r4, r6
1001619c:	46a0      	mov	r8, r4
1001619e:	464c      	mov	r4, r9
100161a0:	2c20      	cmp	r4, #32
100161a2:	d00e      	beq.n	100161c2 <__aeabi_dsub+0x69a>
100161a4:	2440      	movs	r4, #64	; 0x40
100161a6:	464e      	mov	r6, r9
100161a8:	1ba4      	subs	r4, r4, r6
100161aa:	40a7      	lsls	r7, r4
100161ac:	433d      	orrs	r5, r7
100161ae:	1e6f      	subs	r7, r5, #1
100161b0:	41bd      	sbcs	r5, r7
100161b2:	4644      	mov	r4, r8
100161b4:	2700      	movs	r7, #0
100161b6:	4325      	orrs	r5, r4
100161b8:	e746      	b.n	10016048 <__aeabi_dsub+0x520>
100161ba:	2700      	movs	r7, #0
100161bc:	e7cf      	b.n	1001615e <__aeabi_dsub+0x636>
100161be:	000d      	movs	r5, r1
100161c0:	e573      	b.n	10015caa <__aeabi_dsub+0x182>
100161c2:	2700      	movs	r7, #0
100161c4:	e7f2      	b.n	100161ac <__aeabi_dsub+0x684>
100161c6:	46c0      	nop			; (mov r8, r8)
100161c8:	000007ff 	.word	0x000007ff
100161cc:	ff7fffff 	.word	0xff7fffff

100161d0 <__aeabi_dcmpun>:
100161d0:	b570      	push	{r4, r5, r6, lr}
100161d2:	4e0e      	ldr	r6, [pc, #56]	; (1001620c <__aeabi_dcmpun+0x3c>)
100161d4:	030c      	lsls	r4, r1, #12
100161d6:	031d      	lsls	r5, r3, #12
100161d8:	0049      	lsls	r1, r1, #1
100161da:	005b      	lsls	r3, r3, #1
100161dc:	0b24      	lsrs	r4, r4, #12
100161de:	0d49      	lsrs	r1, r1, #21
100161e0:	0b2d      	lsrs	r5, r5, #12
100161e2:	0d5b      	lsrs	r3, r3, #21
100161e4:	42b1      	cmp	r1, r6
100161e6:	d004      	beq.n	100161f2 <__aeabi_dcmpun+0x22>
100161e8:	4908      	ldr	r1, [pc, #32]	; (1001620c <__aeabi_dcmpun+0x3c>)
100161ea:	2000      	movs	r0, #0
100161ec:	428b      	cmp	r3, r1
100161ee:	d008      	beq.n	10016202 <__aeabi_dcmpun+0x32>
100161f0:	bd70      	pop	{r4, r5, r6, pc}
100161f2:	4304      	orrs	r4, r0
100161f4:	2001      	movs	r0, #1
100161f6:	2c00      	cmp	r4, #0
100161f8:	d1fa      	bne.n	100161f0 <__aeabi_dcmpun+0x20>
100161fa:	4904      	ldr	r1, [pc, #16]	; (1001620c <__aeabi_dcmpun+0x3c>)
100161fc:	2000      	movs	r0, #0
100161fe:	428b      	cmp	r3, r1
10016200:	d1f6      	bne.n	100161f0 <__aeabi_dcmpun+0x20>
10016202:	4315      	orrs	r5, r2
10016204:	0028      	movs	r0, r5
10016206:	1e45      	subs	r5, r0, #1
10016208:	41a8      	sbcs	r0, r5
1001620a:	e7f1      	b.n	100161f0 <__aeabi_dcmpun+0x20>
1001620c:	000007ff 	.word	0x000007ff

10016210 <__aeabi_d2iz>:
10016210:	030b      	lsls	r3, r1, #12
10016212:	b530      	push	{r4, r5, lr}
10016214:	4d13      	ldr	r5, [pc, #76]	; (10016264 <__aeabi_d2iz+0x54>)
10016216:	0b1a      	lsrs	r2, r3, #12
10016218:	004b      	lsls	r3, r1, #1
1001621a:	0d5b      	lsrs	r3, r3, #21
1001621c:	0fc9      	lsrs	r1, r1, #31
1001621e:	2400      	movs	r4, #0
10016220:	42ab      	cmp	r3, r5
10016222:	dd11      	ble.n	10016248 <__aeabi_d2iz+0x38>
10016224:	4c10      	ldr	r4, [pc, #64]	; (10016268 <__aeabi_d2iz+0x58>)
10016226:	42a3      	cmp	r3, r4
10016228:	dc10      	bgt.n	1001624c <__aeabi_d2iz+0x3c>
1001622a:	2480      	movs	r4, #128	; 0x80
1001622c:	0364      	lsls	r4, r4, #13
1001622e:	4322      	orrs	r2, r4
10016230:	4c0e      	ldr	r4, [pc, #56]	; (1001626c <__aeabi_d2iz+0x5c>)
10016232:	1ae4      	subs	r4, r4, r3
10016234:	2c1f      	cmp	r4, #31
10016236:	dd0c      	ble.n	10016252 <__aeabi_d2iz+0x42>
10016238:	480d      	ldr	r0, [pc, #52]	; (10016270 <__aeabi_d2iz+0x60>)
1001623a:	1ac3      	subs	r3, r0, r3
1001623c:	40da      	lsrs	r2, r3
1001623e:	0013      	movs	r3, r2
10016240:	425c      	negs	r4, r3
10016242:	2900      	cmp	r1, #0
10016244:	d100      	bne.n	10016248 <__aeabi_d2iz+0x38>
10016246:	001c      	movs	r4, r3
10016248:	0020      	movs	r0, r4
1001624a:	bd30      	pop	{r4, r5, pc}
1001624c:	4b09      	ldr	r3, [pc, #36]	; (10016274 <__aeabi_d2iz+0x64>)
1001624e:	18cc      	adds	r4, r1, r3
10016250:	e7fa      	b.n	10016248 <__aeabi_d2iz+0x38>
10016252:	40e0      	lsrs	r0, r4
10016254:	4c08      	ldr	r4, [pc, #32]	; (10016278 <__aeabi_d2iz+0x68>)
10016256:	46a4      	mov	ip, r4
10016258:	4463      	add	r3, ip
1001625a:	409a      	lsls	r2, r3
1001625c:	0013      	movs	r3, r2
1001625e:	4303      	orrs	r3, r0
10016260:	e7ee      	b.n	10016240 <__aeabi_d2iz+0x30>
10016262:	46c0      	nop			; (mov r8, r8)
10016264:	000003fe 	.word	0x000003fe
10016268:	0000041d 	.word	0x0000041d
1001626c:	00000433 	.word	0x00000433
10016270:	00000413 	.word	0x00000413
10016274:	7fffffff 	.word	0x7fffffff
10016278:	fffffbed 	.word	0xfffffbed

1001627c <__aeabi_i2d>:
1001627c:	b570      	push	{r4, r5, r6, lr}
1001627e:	2800      	cmp	r0, #0
10016280:	d030      	beq.n	100162e4 <__aeabi_i2d+0x68>
10016282:	17c3      	asrs	r3, r0, #31
10016284:	18c4      	adds	r4, r0, r3
10016286:	405c      	eors	r4, r3
10016288:	0fc5      	lsrs	r5, r0, #31
1001628a:	0020      	movs	r0, r4
1001628c:	f000 f950 	bl	10016530 <__clzsi2>
10016290:	4b17      	ldr	r3, [pc, #92]	; (100162f0 <__aeabi_i2d+0x74>)
10016292:	4a18      	ldr	r2, [pc, #96]	; (100162f4 <__aeabi_i2d+0x78>)
10016294:	1a1b      	subs	r3, r3, r0
10016296:	1ad2      	subs	r2, r2, r3
10016298:	2a1f      	cmp	r2, #31
1001629a:	dd18      	ble.n	100162ce <__aeabi_i2d+0x52>
1001629c:	4a16      	ldr	r2, [pc, #88]	; (100162f8 <__aeabi_i2d+0x7c>)
1001629e:	1ad2      	subs	r2, r2, r3
100162a0:	4094      	lsls	r4, r2
100162a2:	2200      	movs	r2, #0
100162a4:	0324      	lsls	r4, r4, #12
100162a6:	055b      	lsls	r3, r3, #21
100162a8:	0b24      	lsrs	r4, r4, #12
100162aa:	0d5b      	lsrs	r3, r3, #21
100162ac:	2100      	movs	r1, #0
100162ae:	0010      	movs	r0, r2
100162b0:	0324      	lsls	r4, r4, #12
100162b2:	0d0a      	lsrs	r2, r1, #20
100162b4:	0512      	lsls	r2, r2, #20
100162b6:	0b24      	lsrs	r4, r4, #12
100162b8:	4314      	orrs	r4, r2
100162ba:	4a10      	ldr	r2, [pc, #64]	; (100162fc <__aeabi_i2d+0x80>)
100162bc:	051b      	lsls	r3, r3, #20
100162be:	4014      	ands	r4, r2
100162c0:	431c      	orrs	r4, r3
100162c2:	0064      	lsls	r4, r4, #1
100162c4:	07ed      	lsls	r5, r5, #31
100162c6:	0864      	lsrs	r4, r4, #1
100162c8:	432c      	orrs	r4, r5
100162ca:	0021      	movs	r1, r4
100162cc:	bd70      	pop	{r4, r5, r6, pc}
100162ce:	0021      	movs	r1, r4
100162d0:	4091      	lsls	r1, r2
100162d2:	000a      	movs	r2, r1
100162d4:	210b      	movs	r1, #11
100162d6:	1a08      	subs	r0, r1, r0
100162d8:	40c4      	lsrs	r4, r0
100162da:	055b      	lsls	r3, r3, #21
100162dc:	0324      	lsls	r4, r4, #12
100162de:	0b24      	lsrs	r4, r4, #12
100162e0:	0d5b      	lsrs	r3, r3, #21
100162e2:	e7e3      	b.n	100162ac <__aeabi_i2d+0x30>
100162e4:	2500      	movs	r5, #0
100162e6:	2300      	movs	r3, #0
100162e8:	2400      	movs	r4, #0
100162ea:	2200      	movs	r2, #0
100162ec:	e7de      	b.n	100162ac <__aeabi_i2d+0x30>
100162ee:	46c0      	nop			; (mov r8, r8)
100162f0:	0000041e 	.word	0x0000041e
100162f4:	00000433 	.word	0x00000433
100162f8:	00000413 	.word	0x00000413
100162fc:	800fffff 	.word	0x800fffff

10016300 <__aeabi_ui2d>:
10016300:	b570      	push	{r4, r5, r6, lr}
10016302:	1e05      	subs	r5, r0, #0
10016304:	d028      	beq.n	10016358 <__aeabi_ui2d+0x58>
10016306:	f000 f913 	bl	10016530 <__clzsi2>
1001630a:	4b15      	ldr	r3, [pc, #84]	; (10016360 <__aeabi_ui2d+0x60>)
1001630c:	4a15      	ldr	r2, [pc, #84]	; (10016364 <__aeabi_ui2d+0x64>)
1001630e:	1a1b      	subs	r3, r3, r0
10016310:	1ad2      	subs	r2, r2, r3
10016312:	2a1f      	cmp	r2, #31
10016314:	dd16      	ble.n	10016344 <__aeabi_ui2d+0x44>
10016316:	002c      	movs	r4, r5
10016318:	4a13      	ldr	r2, [pc, #76]	; (10016368 <__aeabi_ui2d+0x68>)
1001631a:	2500      	movs	r5, #0
1001631c:	1ad2      	subs	r2, r2, r3
1001631e:	4094      	lsls	r4, r2
10016320:	055a      	lsls	r2, r3, #21
10016322:	0324      	lsls	r4, r4, #12
10016324:	0b24      	lsrs	r4, r4, #12
10016326:	0d52      	lsrs	r2, r2, #21
10016328:	2100      	movs	r1, #0
1001632a:	0324      	lsls	r4, r4, #12
1001632c:	0d0b      	lsrs	r3, r1, #20
1001632e:	0b24      	lsrs	r4, r4, #12
10016330:	051b      	lsls	r3, r3, #20
10016332:	4323      	orrs	r3, r4
10016334:	4c0d      	ldr	r4, [pc, #52]	; (1001636c <__aeabi_ui2d+0x6c>)
10016336:	0512      	lsls	r2, r2, #20
10016338:	4023      	ands	r3, r4
1001633a:	4313      	orrs	r3, r2
1001633c:	005b      	lsls	r3, r3, #1
1001633e:	0028      	movs	r0, r5
10016340:	0859      	lsrs	r1, r3, #1
10016342:	bd70      	pop	{r4, r5, r6, pc}
10016344:	210b      	movs	r1, #11
10016346:	002c      	movs	r4, r5
10016348:	1a08      	subs	r0, r1, r0
1001634a:	40c4      	lsrs	r4, r0
1001634c:	4095      	lsls	r5, r2
1001634e:	0324      	lsls	r4, r4, #12
10016350:	055a      	lsls	r2, r3, #21
10016352:	0b24      	lsrs	r4, r4, #12
10016354:	0d52      	lsrs	r2, r2, #21
10016356:	e7e7      	b.n	10016328 <__aeabi_ui2d+0x28>
10016358:	2200      	movs	r2, #0
1001635a:	2400      	movs	r4, #0
1001635c:	e7e4      	b.n	10016328 <__aeabi_ui2d+0x28>
1001635e:	46c0      	nop			; (mov r8, r8)
10016360:	0000041e 	.word	0x0000041e
10016364:	00000433 	.word	0x00000433
10016368:	00000413 	.word	0x00000413
1001636c:	800fffff 	.word	0x800fffff

10016370 <__aeabi_f2d>:
10016370:	0042      	lsls	r2, r0, #1
10016372:	0e12      	lsrs	r2, r2, #24
10016374:	1c51      	adds	r1, r2, #1
10016376:	0243      	lsls	r3, r0, #9
10016378:	b2c9      	uxtb	r1, r1
1001637a:	b570      	push	{r4, r5, r6, lr}
1001637c:	0a5d      	lsrs	r5, r3, #9
1001637e:	0fc4      	lsrs	r4, r0, #31
10016380:	2901      	cmp	r1, #1
10016382:	dd15      	ble.n	100163b0 <__aeabi_f2d+0x40>
10016384:	21e0      	movs	r1, #224	; 0xe0
10016386:	0089      	lsls	r1, r1, #2
10016388:	468c      	mov	ip, r1
1001638a:	076d      	lsls	r5, r5, #29
1001638c:	0b1b      	lsrs	r3, r3, #12
1001638e:	4462      	add	r2, ip
10016390:	2100      	movs	r1, #0
10016392:	0028      	movs	r0, r5
10016394:	0d0d      	lsrs	r5, r1, #20
10016396:	052d      	lsls	r5, r5, #20
10016398:	432b      	orrs	r3, r5
1001639a:	4d1c      	ldr	r5, [pc, #112]	; (1001640c <__aeabi_f2d+0x9c>)
1001639c:	0552      	lsls	r2, r2, #21
1001639e:	402b      	ands	r3, r5
100163a0:	0852      	lsrs	r2, r2, #1
100163a2:	4313      	orrs	r3, r2
100163a4:	005b      	lsls	r3, r3, #1
100163a6:	07e4      	lsls	r4, r4, #31
100163a8:	085b      	lsrs	r3, r3, #1
100163aa:	4323      	orrs	r3, r4
100163ac:	0019      	movs	r1, r3
100163ae:	bd70      	pop	{r4, r5, r6, pc}
100163b0:	2a00      	cmp	r2, #0
100163b2:	d115      	bne.n	100163e0 <__aeabi_f2d+0x70>
100163b4:	2d00      	cmp	r5, #0
100163b6:	d01f      	beq.n	100163f8 <__aeabi_f2d+0x88>
100163b8:	0028      	movs	r0, r5
100163ba:	f000 f8b9 	bl	10016530 <__clzsi2>
100163be:	280a      	cmp	r0, #10
100163c0:	dc1d      	bgt.n	100163fe <__aeabi_f2d+0x8e>
100163c2:	230b      	movs	r3, #11
100163c4:	002a      	movs	r2, r5
100163c6:	1a1b      	subs	r3, r3, r0
100163c8:	40da      	lsrs	r2, r3
100163ca:	0013      	movs	r3, r2
100163cc:	0002      	movs	r2, r0
100163ce:	3215      	adds	r2, #21
100163d0:	4095      	lsls	r5, r2
100163d2:	4a0f      	ldr	r2, [pc, #60]	; (10016410 <__aeabi_f2d+0xa0>)
100163d4:	031b      	lsls	r3, r3, #12
100163d6:	1a12      	subs	r2, r2, r0
100163d8:	0552      	lsls	r2, r2, #21
100163da:	0b1b      	lsrs	r3, r3, #12
100163dc:	0d52      	lsrs	r2, r2, #21
100163de:	e7d7      	b.n	10016390 <__aeabi_f2d+0x20>
100163e0:	2d00      	cmp	r5, #0
100163e2:	d006      	beq.n	100163f2 <__aeabi_f2d+0x82>
100163e4:	2280      	movs	r2, #128	; 0x80
100163e6:	0b1b      	lsrs	r3, r3, #12
100163e8:	0312      	lsls	r2, r2, #12
100163ea:	4313      	orrs	r3, r2
100163ec:	076d      	lsls	r5, r5, #29
100163ee:	4a09      	ldr	r2, [pc, #36]	; (10016414 <__aeabi_f2d+0xa4>)
100163f0:	e7ce      	b.n	10016390 <__aeabi_f2d+0x20>
100163f2:	4a08      	ldr	r2, [pc, #32]	; (10016414 <__aeabi_f2d+0xa4>)
100163f4:	2300      	movs	r3, #0
100163f6:	e7cb      	b.n	10016390 <__aeabi_f2d+0x20>
100163f8:	2200      	movs	r2, #0
100163fa:	2300      	movs	r3, #0
100163fc:	e7c8      	b.n	10016390 <__aeabi_f2d+0x20>
100163fe:	0003      	movs	r3, r0
10016400:	3b0b      	subs	r3, #11
10016402:	409d      	lsls	r5, r3
10016404:	002b      	movs	r3, r5
10016406:	2500      	movs	r5, #0
10016408:	e7e3      	b.n	100163d2 <__aeabi_f2d+0x62>
1001640a:	46c0      	nop			; (mov r8, r8)
1001640c:	800fffff 	.word	0x800fffff
10016410:	00000389 	.word	0x00000389
10016414:	000007ff 	.word	0x000007ff

10016418 <__aeabi_d2f>:
10016418:	004b      	lsls	r3, r1, #1
1001641a:	b570      	push	{r4, r5, r6, lr}
1001641c:	0d5e      	lsrs	r6, r3, #21
1001641e:	030c      	lsls	r4, r1, #12
10016420:	1c75      	adds	r5, r6, #1
10016422:	0a64      	lsrs	r4, r4, #9
10016424:	0f42      	lsrs	r2, r0, #29
10016426:	056d      	lsls	r5, r5, #21
10016428:	4322      	orrs	r2, r4
1001642a:	0fc9      	lsrs	r1, r1, #31
1001642c:	00c4      	lsls	r4, r0, #3
1001642e:	0d6d      	lsrs	r5, r5, #21
10016430:	2d01      	cmp	r5, #1
10016432:	dd2a      	ble.n	1001648a <__aeabi_d2f+0x72>
10016434:	4b3b      	ldr	r3, [pc, #236]	; (10016524 <__aeabi_d2f+0x10c>)
10016436:	18f3      	adds	r3, r6, r3
10016438:	2bfe      	cmp	r3, #254	; 0xfe
1001643a:	dc1a      	bgt.n	10016472 <__aeabi_d2f+0x5a>
1001643c:	2b00      	cmp	r3, #0
1001643e:	dd42      	ble.n	100164c6 <__aeabi_d2f+0xae>
10016440:	0180      	lsls	r0, r0, #6
10016442:	1e45      	subs	r5, r0, #1
10016444:	41a8      	sbcs	r0, r5
10016446:	00d2      	lsls	r2, r2, #3
10016448:	4310      	orrs	r0, r2
1001644a:	0f62      	lsrs	r2, r4, #29
1001644c:	4302      	orrs	r2, r0
1001644e:	0750      	lsls	r0, r2, #29
10016450:	d004      	beq.n	1001645c <__aeabi_d2f+0x44>
10016452:	200f      	movs	r0, #15
10016454:	4010      	ands	r0, r2
10016456:	2804      	cmp	r0, #4
10016458:	d000      	beq.n	1001645c <__aeabi_d2f+0x44>
1001645a:	3204      	adds	r2, #4
1001645c:	2080      	movs	r0, #128	; 0x80
1001645e:	04c0      	lsls	r0, r0, #19
10016460:	4010      	ands	r0, r2
10016462:	d021      	beq.n	100164a8 <__aeabi_d2f+0x90>
10016464:	3301      	adds	r3, #1
10016466:	2bff      	cmp	r3, #255	; 0xff
10016468:	d003      	beq.n	10016472 <__aeabi_d2f+0x5a>
1001646a:	0192      	lsls	r2, r2, #6
1001646c:	0a52      	lsrs	r2, r2, #9
1001646e:	b2db      	uxtb	r3, r3
10016470:	e001      	b.n	10016476 <__aeabi_d2f+0x5e>
10016472:	23ff      	movs	r3, #255	; 0xff
10016474:	2200      	movs	r2, #0
10016476:	0252      	lsls	r2, r2, #9
10016478:	0a52      	lsrs	r2, r2, #9
1001647a:	05db      	lsls	r3, r3, #23
1001647c:	4313      	orrs	r3, r2
1001647e:	005b      	lsls	r3, r3, #1
10016480:	07c9      	lsls	r1, r1, #31
10016482:	085b      	lsrs	r3, r3, #1
10016484:	430b      	orrs	r3, r1
10016486:	0018      	movs	r0, r3
10016488:	bd70      	pop	{r4, r5, r6, pc}
1001648a:	2e00      	cmp	r6, #0
1001648c:	d007      	beq.n	1001649e <__aeabi_d2f+0x86>
1001648e:	4314      	orrs	r4, r2
10016490:	d0ef      	beq.n	10016472 <__aeabi_d2f+0x5a>
10016492:	2080      	movs	r0, #128	; 0x80
10016494:	00d2      	lsls	r2, r2, #3
10016496:	0480      	lsls	r0, r0, #18
10016498:	4302      	orrs	r2, r0
1001649a:	23ff      	movs	r3, #255	; 0xff
1001649c:	e7d7      	b.n	1001644e <__aeabi_d2f+0x36>
1001649e:	4322      	orrs	r2, r4
100164a0:	2300      	movs	r3, #0
100164a2:	2a00      	cmp	r2, #0
100164a4:	d003      	beq.n	100164ae <__aeabi_d2f+0x96>
100164a6:	2205      	movs	r2, #5
100164a8:	08d2      	lsrs	r2, r2, #3
100164aa:	2bff      	cmp	r3, #255	; 0xff
100164ac:	d003      	beq.n	100164b6 <__aeabi_d2f+0x9e>
100164ae:	0252      	lsls	r2, r2, #9
100164b0:	0a52      	lsrs	r2, r2, #9
100164b2:	b2db      	uxtb	r3, r3
100164b4:	e7df      	b.n	10016476 <__aeabi_d2f+0x5e>
100164b6:	2a00      	cmp	r2, #0
100164b8:	d032      	beq.n	10016520 <__aeabi_d2f+0x108>
100164ba:	2080      	movs	r0, #128	; 0x80
100164bc:	03c0      	lsls	r0, r0, #15
100164be:	4302      	orrs	r2, r0
100164c0:	0252      	lsls	r2, r2, #9
100164c2:	0a52      	lsrs	r2, r2, #9
100164c4:	e7d7      	b.n	10016476 <__aeabi_d2f+0x5e>
100164c6:	0018      	movs	r0, r3
100164c8:	3017      	adds	r0, #23
100164ca:	db14      	blt.n	100164f6 <__aeabi_d2f+0xde>
100164cc:	2080      	movs	r0, #128	; 0x80
100164ce:	0400      	lsls	r0, r0, #16
100164d0:	4302      	orrs	r2, r0
100164d2:	201e      	movs	r0, #30
100164d4:	1ac0      	subs	r0, r0, r3
100164d6:	281f      	cmp	r0, #31
100164d8:	dc0f      	bgt.n	100164fa <__aeabi_d2f+0xe2>
100164da:	0025      	movs	r5, r4
100164dc:	4b12      	ldr	r3, [pc, #72]	; (10016528 <__aeabi_d2f+0x110>)
100164de:	18f3      	adds	r3, r6, r3
100164e0:	409d      	lsls	r5, r3
100164e2:	1e6e      	subs	r6, r5, #1
100164e4:	41b5      	sbcs	r5, r6
100164e6:	409a      	lsls	r2, r3
100164e8:	002b      	movs	r3, r5
100164ea:	4313      	orrs	r3, r2
100164ec:	0022      	movs	r2, r4
100164ee:	40c2      	lsrs	r2, r0
100164f0:	431a      	orrs	r2, r3
100164f2:	2300      	movs	r3, #0
100164f4:	e7ab      	b.n	1001644e <__aeabi_d2f+0x36>
100164f6:	2300      	movs	r3, #0
100164f8:	e7d5      	b.n	100164a6 <__aeabi_d2f+0x8e>
100164fa:	2502      	movs	r5, #2
100164fc:	426d      	negs	r5, r5
100164fe:	1aeb      	subs	r3, r5, r3
10016500:	0015      	movs	r5, r2
10016502:	40dd      	lsrs	r5, r3
10016504:	2820      	cmp	r0, #32
10016506:	d009      	beq.n	1001651c <__aeabi_d2f+0x104>
10016508:	4b08      	ldr	r3, [pc, #32]	; (1001652c <__aeabi_d2f+0x114>)
1001650a:	18f3      	adds	r3, r6, r3
1001650c:	409a      	lsls	r2, r3
1001650e:	4314      	orrs	r4, r2
10016510:	1e62      	subs	r2, r4, #1
10016512:	4194      	sbcs	r4, r2
10016514:	0022      	movs	r2, r4
10016516:	2300      	movs	r3, #0
10016518:	432a      	orrs	r2, r5
1001651a:	e798      	b.n	1001644e <__aeabi_d2f+0x36>
1001651c:	2200      	movs	r2, #0
1001651e:	e7f6      	b.n	1001650e <__aeabi_d2f+0xf6>
10016520:	2200      	movs	r2, #0
10016522:	e7a8      	b.n	10016476 <__aeabi_d2f+0x5e>
10016524:	fffffc80 	.word	0xfffffc80
10016528:	fffffc82 	.word	0xfffffc82
1001652c:	fffffca2 	.word	0xfffffca2

10016530 <__clzsi2>:
10016530:	211c      	movs	r1, #28
10016532:	2301      	movs	r3, #1
10016534:	041b      	lsls	r3, r3, #16
10016536:	4298      	cmp	r0, r3
10016538:	d301      	bcc.n	1001653e <__clzsi2+0xe>
1001653a:	0c00      	lsrs	r0, r0, #16
1001653c:	3910      	subs	r1, #16
1001653e:	0a1b      	lsrs	r3, r3, #8
10016540:	4298      	cmp	r0, r3
10016542:	d301      	bcc.n	10016548 <__clzsi2+0x18>
10016544:	0a00      	lsrs	r0, r0, #8
10016546:	3908      	subs	r1, #8
10016548:	091b      	lsrs	r3, r3, #4
1001654a:	4298      	cmp	r0, r3
1001654c:	d301      	bcc.n	10016552 <__clzsi2+0x22>
1001654e:	0900      	lsrs	r0, r0, #4
10016550:	3904      	subs	r1, #4
10016552:	a202      	add	r2, pc, #8	; (adr r2, 1001655c <__clzsi2+0x2c>)
10016554:	5c10      	ldrb	r0, [r2, r0]
10016556:	1840      	adds	r0, r0, r1
10016558:	4770      	bx	lr
1001655a:	46c0      	nop			; (mov r8, r8)
1001655c:	02020304 	.word	0x02020304
10016560:	01010101 	.word	0x01010101
	...

1001656c <__errno>:
1001656c:	4b01      	ldr	r3, [pc, #4]	; (10016574 <__errno+0x8>)
1001656e:	6818      	ldr	r0, [r3, #0]
10016570:	4770      	bx	lr
10016572:	46c0      	nop			; (mov r8, r8)
10016574:	10018944 	.word	0x10018944

10016578 <__libc_init_array>:
10016578:	4b0e      	ldr	r3, [pc, #56]	; (100165b4 <__libc_init_array+0x3c>)
1001657a:	b570      	push	{r4, r5, r6, lr}
1001657c:	2500      	movs	r5, #0
1001657e:	001e      	movs	r6, r3
10016580:	4c0d      	ldr	r4, [pc, #52]	; (100165b8 <__libc_init_array+0x40>)
10016582:	1ae4      	subs	r4, r4, r3
10016584:	10a4      	asrs	r4, r4, #2
10016586:	42a5      	cmp	r5, r4
10016588:	d004      	beq.n	10016594 <__libc_init_array+0x1c>
1001658a:	00ab      	lsls	r3, r5, #2
1001658c:	58f3      	ldr	r3, [r6, r3]
1001658e:	4798      	blx	r3
10016590:	3501      	adds	r5, #1
10016592:	e7f8      	b.n	10016586 <__libc_init_array+0xe>
10016594:	f002 f98e 	bl	100188b4 <_init>
10016598:	4b08      	ldr	r3, [pc, #32]	; (100165bc <__libc_init_array+0x44>)
1001659a:	2500      	movs	r5, #0
1001659c:	001e      	movs	r6, r3
1001659e:	4c08      	ldr	r4, [pc, #32]	; (100165c0 <__libc_init_array+0x48>)
100165a0:	1ae4      	subs	r4, r4, r3
100165a2:	10a4      	asrs	r4, r4, #2
100165a4:	42a5      	cmp	r5, r4
100165a6:	d004      	beq.n	100165b2 <__libc_init_array+0x3a>
100165a8:	00ab      	lsls	r3, r5, #2
100165aa:	58f3      	ldr	r3, [r6, r3]
100165ac:	4798      	blx	r3
100165ae:	3501      	adds	r5, #1
100165b0:	e7f8      	b.n	100165a4 <__libc_init_array+0x2c>
100165b2:	bd70      	pop	{r4, r5, r6, pc}
100165b4:	100188c0 	.word	0x100188c0
100165b8:	100188c0 	.word	0x100188c0
100165bc:	100188c0 	.word	0x100188c0
100165c0:	100188c4 	.word	0x100188c4

100165c4 <malloc>:
100165c4:	b510      	push	{r4, lr}
100165c6:	4b03      	ldr	r3, [pc, #12]	; (100165d4 <malloc+0x10>)
100165c8:	0001      	movs	r1, r0
100165ca:	6818      	ldr	r0, [r3, #0]
100165cc:	f000 f86a 	bl	100166a4 <_malloc_r>
100165d0:	bd10      	pop	{r4, pc}
100165d2:	46c0      	nop			; (mov r8, r8)
100165d4:	10018944 	.word	0x10018944

100165d8 <memcmp>:
100165d8:	b530      	push	{r4, r5, lr}
100165da:	2400      	movs	r4, #0
100165dc:	42a2      	cmp	r2, r4
100165de:	d008      	beq.n	100165f2 <memcmp+0x1a>
100165e0:	5d03      	ldrb	r3, [r0, r4]
100165e2:	1c65      	adds	r5, r4, #1
100165e4:	5d0c      	ldrb	r4, [r1, r4]
100165e6:	42a3      	cmp	r3, r4
100165e8:	d001      	beq.n	100165ee <memcmp+0x16>
100165ea:	1b18      	subs	r0, r3, r4
100165ec:	e002      	b.n	100165f4 <memcmp+0x1c>
100165ee:	002c      	movs	r4, r5
100165f0:	e7f4      	b.n	100165dc <memcmp+0x4>
100165f2:	2000      	movs	r0, #0
100165f4:	bd30      	pop	{r4, r5, pc}

100165f6 <memcpy>:
100165f6:	2300      	movs	r3, #0
100165f8:	b510      	push	{r4, lr}
100165fa:	429a      	cmp	r2, r3
100165fc:	d003      	beq.n	10016606 <memcpy+0x10>
100165fe:	5ccc      	ldrb	r4, [r1, r3]
10016600:	54c4      	strb	r4, [r0, r3]
10016602:	3301      	adds	r3, #1
10016604:	e7f9      	b.n	100165fa <memcpy+0x4>
10016606:	bd10      	pop	{r4, pc}

10016608 <memset>:
10016608:	0003      	movs	r3, r0
1001660a:	1882      	adds	r2, r0, r2
1001660c:	4293      	cmp	r3, r2
1001660e:	d002      	beq.n	10016616 <memset+0xe>
10016610:	7019      	strb	r1, [r3, #0]
10016612:	3301      	adds	r3, #1
10016614:	e7fa      	b.n	1001660c <memset+0x4>
10016616:	4770      	bx	lr

10016618 <_free_r>:
10016618:	b530      	push	{r4, r5, lr}
1001661a:	2900      	cmp	r1, #0
1001661c:	d03e      	beq.n	1001669c <_free_r+0x84>
1001661e:	3904      	subs	r1, #4
10016620:	680b      	ldr	r3, [r1, #0]
10016622:	2b00      	cmp	r3, #0
10016624:	da00      	bge.n	10016628 <_free_r+0x10>
10016626:	18c9      	adds	r1, r1, r3
10016628:	4a1d      	ldr	r2, [pc, #116]	; (100166a0 <_free_r+0x88>)
1001662a:	6813      	ldr	r3, [r2, #0]
1001662c:	0014      	movs	r4, r2
1001662e:	2b00      	cmp	r3, #0
10016630:	d102      	bne.n	10016638 <_free_r+0x20>
10016632:	604b      	str	r3, [r1, #4]
10016634:	6011      	str	r1, [r2, #0]
10016636:	e031      	b.n	1001669c <_free_r+0x84>
10016638:	428b      	cmp	r3, r1
1001663a:	d90d      	bls.n	10016658 <_free_r+0x40>
1001663c:	680a      	ldr	r2, [r1, #0]
1001663e:	1888      	adds	r0, r1, r2
10016640:	4283      	cmp	r3, r0
10016642:	d103      	bne.n	1001664c <_free_r+0x34>
10016644:	6818      	ldr	r0, [r3, #0]
10016646:	685b      	ldr	r3, [r3, #4]
10016648:	1882      	adds	r2, r0, r2
1001664a:	600a      	str	r2, [r1, #0]
1001664c:	604b      	str	r3, [r1, #4]
1001664e:	6021      	str	r1, [r4, #0]
10016650:	e024      	b.n	1001669c <_free_r+0x84>
10016652:	428a      	cmp	r2, r1
10016654:	d803      	bhi.n	1001665e <_free_r+0x46>
10016656:	0013      	movs	r3, r2
10016658:	685a      	ldr	r2, [r3, #4]
1001665a:	2a00      	cmp	r2, #0
1001665c:	d1f9      	bne.n	10016652 <_free_r+0x3a>
1001665e:	681d      	ldr	r5, [r3, #0]
10016660:	195c      	adds	r4, r3, r5
10016662:	428c      	cmp	r4, r1
10016664:	d10b      	bne.n	1001667e <_free_r+0x66>
10016666:	6809      	ldr	r1, [r1, #0]
10016668:	1869      	adds	r1, r5, r1
1001666a:	1858      	adds	r0, r3, r1
1001666c:	6019      	str	r1, [r3, #0]
1001666e:	4282      	cmp	r2, r0
10016670:	d114      	bne.n	1001669c <_free_r+0x84>
10016672:	6810      	ldr	r0, [r2, #0]
10016674:	6852      	ldr	r2, [r2, #4]
10016676:	1841      	adds	r1, r0, r1
10016678:	6019      	str	r1, [r3, #0]
1001667a:	605a      	str	r2, [r3, #4]
1001667c:	e00e      	b.n	1001669c <_free_r+0x84>
1001667e:	428c      	cmp	r4, r1
10016680:	d902      	bls.n	10016688 <_free_r+0x70>
10016682:	230c      	movs	r3, #12
10016684:	6003      	str	r3, [r0, #0]
10016686:	e009      	b.n	1001669c <_free_r+0x84>
10016688:	6808      	ldr	r0, [r1, #0]
1001668a:	180c      	adds	r4, r1, r0
1001668c:	42a2      	cmp	r2, r4
1001668e:	d103      	bne.n	10016698 <_free_r+0x80>
10016690:	6814      	ldr	r4, [r2, #0]
10016692:	6852      	ldr	r2, [r2, #4]
10016694:	1820      	adds	r0, r4, r0
10016696:	6008      	str	r0, [r1, #0]
10016698:	604a      	str	r2, [r1, #4]
1001669a:	6059      	str	r1, [r3, #4]
1001669c:	bd30      	pop	{r4, r5, pc}
1001669e:	46c0      	nop			; (mov r8, r8)
100166a0:	1001a418 	.word	0x1001a418

100166a4 <_malloc_r>:
100166a4:	2303      	movs	r3, #3
100166a6:	b570      	push	{r4, r5, r6, lr}
100166a8:	1ccd      	adds	r5, r1, #3
100166aa:	439d      	bics	r5, r3
100166ac:	3508      	adds	r5, #8
100166ae:	0006      	movs	r6, r0
100166b0:	2d0c      	cmp	r5, #12
100166b2:	d201      	bcs.n	100166b8 <_malloc_r+0x14>
100166b4:	250c      	movs	r5, #12
100166b6:	e005      	b.n	100166c4 <_malloc_r+0x20>
100166b8:	2d00      	cmp	r5, #0
100166ba:	da03      	bge.n	100166c4 <_malloc_r+0x20>
100166bc:	230c      	movs	r3, #12
100166be:	2000      	movs	r0, #0
100166c0:	6033      	str	r3, [r6, #0]
100166c2:	e040      	b.n	10016746 <_malloc_r+0xa2>
100166c4:	42a9      	cmp	r1, r5
100166c6:	d8f9      	bhi.n	100166bc <_malloc_r+0x18>
100166c8:	4b1f      	ldr	r3, [pc, #124]	; (10016748 <_malloc_r+0xa4>)
100166ca:	681c      	ldr	r4, [r3, #0]
100166cc:	001a      	movs	r2, r3
100166ce:	0021      	movs	r1, r4
100166d0:	2900      	cmp	r1, #0
100166d2:	d013      	beq.n	100166fc <_malloc_r+0x58>
100166d4:	680b      	ldr	r3, [r1, #0]
100166d6:	1b5b      	subs	r3, r3, r5
100166d8:	d40d      	bmi.n	100166f6 <_malloc_r+0x52>
100166da:	2b0b      	cmp	r3, #11
100166dc:	d902      	bls.n	100166e4 <_malloc_r+0x40>
100166de:	600b      	str	r3, [r1, #0]
100166e0:	18cc      	adds	r4, r1, r3
100166e2:	e01e      	b.n	10016722 <_malloc_r+0x7e>
100166e4:	428c      	cmp	r4, r1
100166e6:	d102      	bne.n	100166ee <_malloc_r+0x4a>
100166e8:	6863      	ldr	r3, [r4, #4]
100166ea:	6013      	str	r3, [r2, #0]
100166ec:	e01a      	b.n	10016724 <_malloc_r+0x80>
100166ee:	684b      	ldr	r3, [r1, #4]
100166f0:	6063      	str	r3, [r4, #4]
100166f2:	000c      	movs	r4, r1
100166f4:	e016      	b.n	10016724 <_malloc_r+0x80>
100166f6:	000c      	movs	r4, r1
100166f8:	6849      	ldr	r1, [r1, #4]
100166fa:	e7e9      	b.n	100166d0 <_malloc_r+0x2c>
100166fc:	4c13      	ldr	r4, [pc, #76]	; (1001674c <_malloc_r+0xa8>)
100166fe:	6823      	ldr	r3, [r4, #0]
10016700:	2b00      	cmp	r3, #0
10016702:	d103      	bne.n	1001670c <_malloc_r+0x68>
10016704:	0030      	movs	r0, r6
10016706:	f000 f8f9 	bl	100168fc <_sbrk_r>
1001670a:	6020      	str	r0, [r4, #0]
1001670c:	0029      	movs	r1, r5
1001670e:	0030      	movs	r0, r6
10016710:	f000 f8f4 	bl	100168fc <_sbrk_r>
10016714:	1c43      	adds	r3, r0, #1
10016716:	d0d1      	beq.n	100166bc <_malloc_r+0x18>
10016718:	2303      	movs	r3, #3
1001671a:	1cc4      	adds	r4, r0, #3
1001671c:	439c      	bics	r4, r3
1001671e:	42a0      	cmp	r0, r4
10016720:	d10a      	bne.n	10016738 <_malloc_r+0x94>
10016722:	6025      	str	r5, [r4, #0]
10016724:	0020      	movs	r0, r4
10016726:	2207      	movs	r2, #7
10016728:	300b      	adds	r0, #11
1001672a:	1d23      	adds	r3, r4, #4
1001672c:	4390      	bics	r0, r2
1001672e:	1ac3      	subs	r3, r0, r3
10016730:	d009      	beq.n	10016746 <_malloc_r+0xa2>
10016732:	425a      	negs	r2, r3
10016734:	50e2      	str	r2, [r4, r3]
10016736:	e006      	b.n	10016746 <_malloc_r+0xa2>
10016738:	1a21      	subs	r1, r4, r0
1001673a:	0030      	movs	r0, r6
1001673c:	f000 f8de 	bl	100168fc <_sbrk_r>
10016740:	1c43      	adds	r3, r0, #1
10016742:	d1ee      	bne.n	10016722 <_malloc_r+0x7e>
10016744:	e7ba      	b.n	100166bc <_malloc_r+0x18>
10016746:	bd70      	pop	{r4, r5, r6, pc}
10016748:	1001a418 	.word	0x1001a418
1001674c:	1001a414 	.word	0x1001a414

10016750 <iprintf>:
10016750:	b40f      	push	{r0, r1, r2, r3}
10016752:	4b0b      	ldr	r3, [pc, #44]	; (10016780 <iprintf+0x30>)
10016754:	b513      	push	{r0, r1, r4, lr}
10016756:	681c      	ldr	r4, [r3, #0]
10016758:	2c00      	cmp	r4, #0
1001675a:	d005      	beq.n	10016768 <iprintf+0x18>
1001675c:	69a3      	ldr	r3, [r4, #24]
1001675e:	2b00      	cmp	r3, #0
10016760:	d102      	bne.n	10016768 <iprintf+0x18>
10016762:	0020      	movs	r0, r4
10016764:	f000 fb58 	bl	10016e18 <__sinit>
10016768:	ab05      	add	r3, sp, #20
1001676a:	9a04      	ldr	r2, [sp, #16]
1001676c:	68a1      	ldr	r1, [r4, #8]
1001676e:	0020      	movs	r0, r4
10016770:	9301      	str	r3, [sp, #4]
10016772:	f000 fc71 	bl	10017058 <_vfiprintf_r>
10016776:	bc16      	pop	{r1, r2, r4}
10016778:	bc08      	pop	{r3}
1001677a:	b004      	add	sp, #16
1001677c:	4718      	bx	r3
1001677e:	46c0      	nop			; (mov r8, r8)
10016780:	10018944 	.word	0x10018944

10016784 <putchar>:
10016784:	4b08      	ldr	r3, [pc, #32]	; (100167a8 <putchar+0x24>)
10016786:	b570      	push	{r4, r5, r6, lr}
10016788:	681c      	ldr	r4, [r3, #0]
1001678a:	0005      	movs	r5, r0
1001678c:	2c00      	cmp	r4, #0
1001678e:	d005      	beq.n	1001679c <putchar+0x18>
10016790:	69a3      	ldr	r3, [r4, #24]
10016792:	2b00      	cmp	r3, #0
10016794:	d102      	bne.n	1001679c <putchar+0x18>
10016796:	0020      	movs	r0, r4
10016798:	f000 fb3e 	bl	10016e18 <__sinit>
1001679c:	0029      	movs	r1, r5
1001679e:	68a2      	ldr	r2, [r4, #8]
100167a0:	0020      	movs	r0, r4
100167a2:	f000 ff05 	bl	100175b0 <_putc_r>
100167a6:	bd70      	pop	{r4, r5, r6, pc}
100167a8:	10018944 	.word	0x10018944

100167ac <_puts_r>:
100167ac:	b570      	push	{r4, r5, r6, lr}
100167ae:	0005      	movs	r5, r0
100167b0:	000e      	movs	r6, r1
100167b2:	2800      	cmp	r0, #0
100167b4:	d004      	beq.n	100167c0 <_puts_r+0x14>
100167b6:	6983      	ldr	r3, [r0, #24]
100167b8:	2b00      	cmp	r3, #0
100167ba:	d101      	bne.n	100167c0 <_puts_r+0x14>
100167bc:	f000 fb2c 	bl	10016e18 <__sinit>
100167c0:	69ab      	ldr	r3, [r5, #24]
100167c2:	68ac      	ldr	r4, [r5, #8]
100167c4:	2b00      	cmp	r3, #0
100167c6:	d102      	bne.n	100167ce <_puts_r+0x22>
100167c8:	0028      	movs	r0, r5
100167ca:	f000 fb25 	bl	10016e18 <__sinit>
100167ce:	4b25      	ldr	r3, [pc, #148]	; (10016864 <_puts_r+0xb8>)
100167d0:	429c      	cmp	r4, r3
100167d2:	d101      	bne.n	100167d8 <_puts_r+0x2c>
100167d4:	686c      	ldr	r4, [r5, #4]
100167d6:	e008      	b.n	100167ea <_puts_r+0x3e>
100167d8:	4b23      	ldr	r3, [pc, #140]	; (10016868 <_puts_r+0xbc>)
100167da:	429c      	cmp	r4, r3
100167dc:	d101      	bne.n	100167e2 <_puts_r+0x36>
100167de:	68ac      	ldr	r4, [r5, #8]
100167e0:	e003      	b.n	100167ea <_puts_r+0x3e>
100167e2:	4b22      	ldr	r3, [pc, #136]	; (1001686c <_puts_r+0xc0>)
100167e4:	429c      	cmp	r4, r3
100167e6:	d100      	bne.n	100167ea <_puts_r+0x3e>
100167e8:	68ec      	ldr	r4, [r5, #12]
100167ea:	89a3      	ldrh	r3, [r4, #12]
100167ec:	071b      	lsls	r3, r3, #28
100167ee:	d502      	bpl.n	100167f6 <_puts_r+0x4a>
100167f0:	6923      	ldr	r3, [r4, #16]
100167f2:	2b00      	cmp	r3, #0
100167f4:	d111      	bne.n	1001681a <_puts_r+0x6e>
100167f6:	0021      	movs	r1, r4
100167f8:	0028      	movs	r0, r5
100167fa:	f000 f9a3 	bl	10016b44 <__swsetup_r>
100167fe:	2800      	cmp	r0, #0
10016800:	d00b      	beq.n	1001681a <_puts_r+0x6e>
10016802:	2001      	movs	r0, #1
10016804:	4240      	negs	r0, r0
10016806:	e02b      	b.n	10016860 <_puts_r+0xb4>
10016808:	3b01      	subs	r3, #1
1001680a:	3601      	adds	r6, #1
1001680c:	60a3      	str	r3, [r4, #8]
1001680e:	2b00      	cmp	r3, #0
10016810:	db08      	blt.n	10016824 <_puts_r+0x78>
10016812:	6823      	ldr	r3, [r4, #0]
10016814:	1c5a      	adds	r2, r3, #1
10016816:	6022      	str	r2, [r4, #0]
10016818:	7019      	strb	r1, [r3, #0]
1001681a:	7831      	ldrb	r1, [r6, #0]
1001681c:	68a3      	ldr	r3, [r4, #8]
1001681e:	2900      	cmp	r1, #0
10016820:	d1f2      	bne.n	10016808 <_puts_r+0x5c>
10016822:	e00b      	b.n	1001683c <_puts_r+0x90>
10016824:	69a2      	ldr	r2, [r4, #24]
10016826:	4293      	cmp	r3, r2
10016828:	db01      	blt.n	1001682e <_puts_r+0x82>
1001682a:	290a      	cmp	r1, #10
1001682c:	d1f1      	bne.n	10016812 <_puts_r+0x66>
1001682e:	0022      	movs	r2, r4
10016830:	0028      	movs	r0, r5
10016832:	f000 f92f 	bl	10016a94 <__swbuf_r>
10016836:	1c43      	adds	r3, r0, #1
10016838:	d1ef      	bne.n	1001681a <_puts_r+0x6e>
1001683a:	e7e2      	b.n	10016802 <_puts_r+0x56>
1001683c:	3b01      	subs	r3, #1
1001683e:	60a3      	str	r3, [r4, #8]
10016840:	2b00      	cmp	r3, #0
10016842:	da08      	bge.n	10016856 <_puts_r+0xaa>
10016844:	0022      	movs	r2, r4
10016846:	310a      	adds	r1, #10
10016848:	0028      	movs	r0, r5
1001684a:	f000 f923 	bl	10016a94 <__swbuf_r>
1001684e:	1c43      	adds	r3, r0, #1
10016850:	d0d7      	beq.n	10016802 <_puts_r+0x56>
10016852:	200a      	movs	r0, #10
10016854:	e004      	b.n	10016860 <_puts_r+0xb4>
10016856:	200a      	movs	r0, #10
10016858:	6823      	ldr	r3, [r4, #0]
1001685a:	1c5a      	adds	r2, r3, #1
1001685c:	6022      	str	r2, [r4, #0]
1001685e:	7018      	strb	r0, [r3, #0]
10016860:	bd70      	pop	{r4, r5, r6, pc}
10016862:	46c0      	nop			; (mov r8, r8)
10016864:	10018820 	.word	0x10018820
10016868:	10018840 	.word	0x10018840
1001686c:	10018860 	.word	0x10018860

10016870 <puts>:
10016870:	b510      	push	{r4, lr}
10016872:	4b03      	ldr	r3, [pc, #12]	; (10016880 <puts+0x10>)
10016874:	0001      	movs	r1, r0
10016876:	6818      	ldr	r0, [r3, #0]
10016878:	f7ff ff98 	bl	100167ac <_puts_r>
1001687c:	bd10      	pop	{r4, pc}
1001687e:	46c0      	nop			; (mov r8, r8)
10016880:	10018944 	.word	0x10018944

10016884 <rand>:
10016884:	4b15      	ldr	r3, [pc, #84]	; (100168dc <rand+0x58>)
10016886:	b510      	push	{r4, lr}
10016888:	681c      	ldr	r4, [r3, #0]
1001688a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1001688c:	2b00      	cmp	r3, #0
1001688e:	d115      	bne.n	100168bc <rand+0x38>
10016890:	2018      	movs	r0, #24
10016892:	f7ff fe97 	bl	100165c4 <malloc>
10016896:	4b12      	ldr	r3, [pc, #72]	; (100168e0 <rand+0x5c>)
10016898:	63a0      	str	r0, [r4, #56]	; 0x38
1001689a:	8003      	strh	r3, [r0, #0]
1001689c:	4b11      	ldr	r3, [pc, #68]	; (100168e4 <rand+0x60>)
1001689e:	2201      	movs	r2, #1
100168a0:	8043      	strh	r3, [r0, #2]
100168a2:	4b11      	ldr	r3, [pc, #68]	; (100168e8 <rand+0x64>)
100168a4:	8083      	strh	r3, [r0, #4]
100168a6:	4b11      	ldr	r3, [pc, #68]	; (100168ec <rand+0x68>)
100168a8:	80c3      	strh	r3, [r0, #6]
100168aa:	4b11      	ldr	r3, [pc, #68]	; (100168f0 <rand+0x6c>)
100168ac:	8103      	strh	r3, [r0, #8]
100168ae:	2305      	movs	r3, #5
100168b0:	8143      	strh	r3, [r0, #10]
100168b2:	3306      	adds	r3, #6
100168b4:	8183      	strh	r3, [r0, #12]
100168b6:	2300      	movs	r3, #0
100168b8:	6102      	str	r2, [r0, #16]
100168ba:	6143      	str	r3, [r0, #20]
100168bc:	6ba4      	ldr	r4, [r4, #56]	; 0x38
100168be:	4a0d      	ldr	r2, [pc, #52]	; (100168f4 <rand+0x70>)
100168c0:	6920      	ldr	r0, [r4, #16]
100168c2:	6961      	ldr	r1, [r4, #20]
100168c4:	4b0c      	ldr	r3, [pc, #48]	; (100168f8 <rand+0x74>)
100168c6:	f7fd f869 	bl	1001399c <__aeabi_lmul>
100168ca:	2201      	movs	r2, #1
100168cc:	2300      	movs	r3, #0
100168ce:	1880      	adds	r0, r0, r2
100168d0:	4159      	adcs	r1, r3
100168d2:	6120      	str	r0, [r4, #16]
100168d4:	6161      	str	r1, [r4, #20]
100168d6:	0048      	lsls	r0, r1, #1
100168d8:	0840      	lsrs	r0, r0, #1
100168da:	bd10      	pop	{r4, pc}
100168dc:	10018944 	.word	0x10018944
100168e0:	0000330e 	.word	0x0000330e
100168e4:	ffffabcd 	.word	0xffffabcd
100168e8:	00001234 	.word	0x00001234
100168ec:	ffffe66d 	.word	0xffffe66d
100168f0:	ffffdeec 	.word	0xffffdeec
100168f4:	4c957f2d 	.word	0x4c957f2d
100168f8:	5851f42d 	.word	0x5851f42d

100168fc <_sbrk_r>:
100168fc:	2300      	movs	r3, #0
100168fe:	b570      	push	{r4, r5, r6, lr}
10016900:	4c06      	ldr	r4, [pc, #24]	; (1001691c <_sbrk_r+0x20>)
10016902:	0005      	movs	r5, r0
10016904:	0008      	movs	r0, r1
10016906:	6023      	str	r3, [r4, #0]
10016908:	f7f1 fd78 	bl	100083fc <_sbrk>
1001690c:	1c43      	adds	r3, r0, #1
1001690e:	d103      	bne.n	10016918 <_sbrk_r+0x1c>
10016910:	6823      	ldr	r3, [r4, #0]
10016912:	2b00      	cmp	r3, #0
10016914:	d000      	beq.n	10016918 <_sbrk_r+0x1c>
10016916:	602b      	str	r3, [r5, #0]
10016918:	bd70      	pop	{r4, r5, r6, pc}
1001691a:	46c0      	nop			; (mov r8, r8)
1001691c:	1001b840 	.word	0x1001b840

10016920 <setbuf>:
10016920:	424a      	negs	r2, r1
10016922:	414a      	adcs	r2, r1
10016924:	2380      	movs	r3, #128	; 0x80
10016926:	b510      	push	{r4, lr}
10016928:	0052      	lsls	r2, r2, #1
1001692a:	00db      	lsls	r3, r3, #3
1001692c:	f000 f802 	bl	10016934 <setvbuf>
10016930:	bd10      	pop	{r4, pc}
	...

10016934 <setvbuf>:
10016934:	b5f0      	push	{r4, r5, r6, r7, lr}
10016936:	001d      	movs	r5, r3
10016938:	4b51      	ldr	r3, [pc, #324]	; (10016a80 <setvbuf+0x14c>)
1001693a:	b085      	sub	sp, #20
1001693c:	681e      	ldr	r6, [r3, #0]
1001693e:	0004      	movs	r4, r0
10016940:	000f      	movs	r7, r1
10016942:	9200      	str	r2, [sp, #0]
10016944:	2e00      	cmp	r6, #0
10016946:	d005      	beq.n	10016954 <setvbuf+0x20>
10016948:	69b3      	ldr	r3, [r6, #24]
1001694a:	2b00      	cmp	r3, #0
1001694c:	d102      	bne.n	10016954 <setvbuf+0x20>
1001694e:	0030      	movs	r0, r6
10016950:	f000 fa62 	bl	10016e18 <__sinit>
10016954:	4b4b      	ldr	r3, [pc, #300]	; (10016a84 <setvbuf+0x150>)
10016956:	429c      	cmp	r4, r3
10016958:	d101      	bne.n	1001695e <setvbuf+0x2a>
1001695a:	6874      	ldr	r4, [r6, #4]
1001695c:	e008      	b.n	10016970 <setvbuf+0x3c>
1001695e:	4b4a      	ldr	r3, [pc, #296]	; (10016a88 <setvbuf+0x154>)
10016960:	429c      	cmp	r4, r3
10016962:	d101      	bne.n	10016968 <setvbuf+0x34>
10016964:	68b4      	ldr	r4, [r6, #8]
10016966:	e003      	b.n	10016970 <setvbuf+0x3c>
10016968:	4b48      	ldr	r3, [pc, #288]	; (10016a8c <setvbuf+0x158>)
1001696a:	429c      	cmp	r4, r3
1001696c:	d100      	bne.n	10016970 <setvbuf+0x3c>
1001696e:	68f4      	ldr	r4, [r6, #12]
10016970:	9b00      	ldr	r3, [sp, #0]
10016972:	2b02      	cmp	r3, #2
10016974:	d005      	beq.n	10016982 <setvbuf+0x4e>
10016976:	2b01      	cmp	r3, #1
10016978:	d900      	bls.n	1001697c <setvbuf+0x48>
1001697a:	e07c      	b.n	10016a76 <setvbuf+0x142>
1001697c:	2d00      	cmp	r5, #0
1001697e:	da00      	bge.n	10016982 <setvbuf+0x4e>
10016980:	e079      	b.n	10016a76 <setvbuf+0x142>
10016982:	0021      	movs	r1, r4
10016984:	0030      	movs	r0, r6
10016986:	f000 f9d9 	bl	10016d3c <_fflush_r>
1001698a:	6b61      	ldr	r1, [r4, #52]	; 0x34
1001698c:	2900      	cmp	r1, #0
1001698e:	d008      	beq.n	100169a2 <setvbuf+0x6e>
10016990:	0023      	movs	r3, r4
10016992:	3344      	adds	r3, #68	; 0x44
10016994:	4299      	cmp	r1, r3
10016996:	d002      	beq.n	1001699e <setvbuf+0x6a>
10016998:	0030      	movs	r0, r6
1001699a:	f7ff fe3d 	bl	10016618 <_free_r>
1001699e:	2300      	movs	r3, #0
100169a0:	6363      	str	r3, [r4, #52]	; 0x34
100169a2:	2300      	movs	r3, #0
100169a4:	61a3      	str	r3, [r4, #24]
100169a6:	6063      	str	r3, [r4, #4]
100169a8:	89a3      	ldrh	r3, [r4, #12]
100169aa:	061b      	lsls	r3, r3, #24
100169ac:	d503      	bpl.n	100169b6 <setvbuf+0x82>
100169ae:	6921      	ldr	r1, [r4, #16]
100169b0:	0030      	movs	r0, r6
100169b2:	f7ff fe31 	bl	10016618 <_free_r>
100169b6:	89a2      	ldrh	r2, [r4, #12]
100169b8:	4b35      	ldr	r3, [pc, #212]	; (10016a90 <setvbuf+0x15c>)
100169ba:	4013      	ands	r3, r2
100169bc:	81a3      	strh	r3, [r4, #12]
100169be:	9b00      	ldr	r3, [sp, #0]
100169c0:	2b02      	cmp	r3, #2
100169c2:	d021      	beq.n	10016a08 <setvbuf+0xd4>
100169c4:	ab03      	add	r3, sp, #12
100169c6:	aa02      	add	r2, sp, #8
100169c8:	0021      	movs	r1, r4
100169ca:	0030      	movs	r0, r6
100169cc:	f000 fab8 	bl	10016f40 <__swhatbuf_r>
100169d0:	89a3      	ldrh	r3, [r4, #12]
100169d2:	4318      	orrs	r0, r3
100169d4:	81a0      	strh	r0, [r4, #12]
100169d6:	2d00      	cmp	r5, #0
100169d8:	d101      	bne.n	100169de <setvbuf+0xaa>
100169da:	9d02      	ldr	r5, [sp, #8]
100169dc:	e001      	b.n	100169e2 <setvbuf+0xae>
100169de:	2f00      	cmp	r7, #0
100169e0:	d125      	bne.n	10016a2e <setvbuf+0xfa>
100169e2:	0028      	movs	r0, r5
100169e4:	f7ff fdee 	bl	100165c4 <malloc>
100169e8:	9501      	str	r5, [sp, #4]
100169ea:	1e07      	subs	r7, r0, #0
100169ec:	d11a      	bne.n	10016a24 <setvbuf+0xf0>
100169ee:	9b02      	ldr	r3, [sp, #8]
100169f0:	9301      	str	r3, [sp, #4]
100169f2:	42ab      	cmp	r3, r5
100169f4:	d102      	bne.n	100169fc <setvbuf+0xc8>
100169f6:	2001      	movs	r0, #1
100169f8:	4240      	negs	r0, r0
100169fa:	e006      	b.n	10016a0a <setvbuf+0xd6>
100169fc:	9801      	ldr	r0, [sp, #4]
100169fe:	f7ff fde1 	bl	100165c4 <malloc>
10016a02:	1e07      	subs	r7, r0, #0
10016a04:	d10e      	bne.n	10016a24 <setvbuf+0xf0>
10016a06:	e7f6      	b.n	100169f6 <setvbuf+0xc2>
10016a08:	2000      	movs	r0, #0
10016a0a:	2202      	movs	r2, #2
10016a0c:	89a3      	ldrh	r3, [r4, #12]
10016a0e:	4313      	orrs	r3, r2
10016a10:	81a3      	strh	r3, [r4, #12]
10016a12:	2300      	movs	r3, #0
10016a14:	60a3      	str	r3, [r4, #8]
10016a16:	0023      	movs	r3, r4
10016a18:	3347      	adds	r3, #71	; 0x47
10016a1a:	6023      	str	r3, [r4, #0]
10016a1c:	6123      	str	r3, [r4, #16]
10016a1e:	2301      	movs	r3, #1
10016a20:	6163      	str	r3, [r4, #20]
10016a22:	e02a      	b.n	10016a7a <setvbuf+0x146>
10016a24:	2280      	movs	r2, #128	; 0x80
10016a26:	89a3      	ldrh	r3, [r4, #12]
10016a28:	9d01      	ldr	r5, [sp, #4]
10016a2a:	4313      	orrs	r3, r2
10016a2c:	81a3      	strh	r3, [r4, #12]
10016a2e:	69b3      	ldr	r3, [r6, #24]
10016a30:	2b00      	cmp	r3, #0
10016a32:	d102      	bne.n	10016a3a <setvbuf+0x106>
10016a34:	0030      	movs	r0, r6
10016a36:	f000 f9ef 	bl	10016e18 <__sinit>
10016a3a:	9b00      	ldr	r3, [sp, #0]
10016a3c:	2b01      	cmp	r3, #1
10016a3e:	d103      	bne.n	10016a48 <setvbuf+0x114>
10016a40:	89a3      	ldrh	r3, [r4, #12]
10016a42:	9a00      	ldr	r2, [sp, #0]
10016a44:	431a      	orrs	r2, r3
10016a46:	81a2      	strh	r2, [r4, #12]
10016a48:	2308      	movs	r3, #8
10016a4a:	89a2      	ldrh	r2, [r4, #12]
10016a4c:	6027      	str	r7, [r4, #0]
10016a4e:	4013      	ands	r3, r2
10016a50:	6127      	str	r7, [r4, #16]
10016a52:	6165      	str	r5, [r4, #20]
10016a54:	1e18      	subs	r0, r3, #0
10016a56:	d00c      	beq.n	10016a72 <setvbuf+0x13e>
10016a58:	2301      	movs	r3, #1
10016a5a:	401a      	ands	r2, r3
10016a5c:	2300      	movs	r3, #0
10016a5e:	1e10      	subs	r0, r2, #0
10016a60:	4298      	cmp	r0, r3
10016a62:	d004      	beq.n	10016a6e <setvbuf+0x13a>
10016a64:	426d      	negs	r5, r5
10016a66:	60a3      	str	r3, [r4, #8]
10016a68:	61a5      	str	r5, [r4, #24]
10016a6a:	0018      	movs	r0, r3
10016a6c:	e005      	b.n	10016a7a <setvbuf+0x146>
10016a6e:	60a5      	str	r5, [r4, #8]
10016a70:	e003      	b.n	10016a7a <setvbuf+0x146>
10016a72:	60a3      	str	r3, [r4, #8]
10016a74:	e001      	b.n	10016a7a <setvbuf+0x146>
10016a76:	2001      	movs	r0, #1
10016a78:	4240      	negs	r0, r0
10016a7a:	b005      	add	sp, #20
10016a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
10016a7e:	46c0      	nop			; (mov r8, r8)
10016a80:	10018944 	.word	0x10018944
10016a84:	10018820 	.word	0x10018820
10016a88:	10018840 	.word	0x10018840
10016a8c:	10018860 	.word	0x10018860
10016a90:	fffff35c 	.word	0xfffff35c

10016a94 <__swbuf_r>:
10016a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10016a96:	0005      	movs	r5, r0
10016a98:	000f      	movs	r7, r1
10016a9a:	0014      	movs	r4, r2
10016a9c:	2800      	cmp	r0, #0
10016a9e:	d004      	beq.n	10016aaa <__swbuf_r+0x16>
10016aa0:	6983      	ldr	r3, [r0, #24]
10016aa2:	2b00      	cmp	r3, #0
10016aa4:	d101      	bne.n	10016aaa <__swbuf_r+0x16>
10016aa6:	f000 f9b7 	bl	10016e18 <__sinit>
10016aaa:	4b23      	ldr	r3, [pc, #140]	; (10016b38 <__swbuf_r+0xa4>)
10016aac:	429c      	cmp	r4, r3
10016aae:	d101      	bne.n	10016ab4 <__swbuf_r+0x20>
10016ab0:	686c      	ldr	r4, [r5, #4]
10016ab2:	e008      	b.n	10016ac6 <__swbuf_r+0x32>
10016ab4:	4b21      	ldr	r3, [pc, #132]	; (10016b3c <__swbuf_r+0xa8>)
10016ab6:	429c      	cmp	r4, r3
10016ab8:	d101      	bne.n	10016abe <__swbuf_r+0x2a>
10016aba:	68ac      	ldr	r4, [r5, #8]
10016abc:	e003      	b.n	10016ac6 <__swbuf_r+0x32>
10016abe:	4b20      	ldr	r3, [pc, #128]	; (10016b40 <__swbuf_r+0xac>)
10016ac0:	429c      	cmp	r4, r3
10016ac2:	d100      	bne.n	10016ac6 <__swbuf_r+0x32>
10016ac4:	68ec      	ldr	r4, [r5, #12]
10016ac6:	69a3      	ldr	r3, [r4, #24]
10016ac8:	60a3      	str	r3, [r4, #8]
10016aca:	89a3      	ldrh	r3, [r4, #12]
10016acc:	071b      	lsls	r3, r3, #28
10016ace:	d50a      	bpl.n	10016ae6 <__swbuf_r+0x52>
10016ad0:	6923      	ldr	r3, [r4, #16]
10016ad2:	2b00      	cmp	r3, #0
10016ad4:	d007      	beq.n	10016ae6 <__swbuf_r+0x52>
10016ad6:	6823      	ldr	r3, [r4, #0]
10016ad8:	6922      	ldr	r2, [r4, #16]
10016ada:	b2fe      	uxtb	r6, r7
10016adc:	1a98      	subs	r0, r3, r2
10016ade:	6963      	ldr	r3, [r4, #20]
10016ae0:	4298      	cmp	r0, r3
10016ae2:	db0f      	blt.n	10016b04 <__swbuf_r+0x70>
10016ae4:	e008      	b.n	10016af8 <__swbuf_r+0x64>
10016ae6:	0021      	movs	r1, r4
10016ae8:	0028      	movs	r0, r5
10016aea:	f000 f82b 	bl	10016b44 <__swsetup_r>
10016aee:	2800      	cmp	r0, #0
10016af0:	d0f1      	beq.n	10016ad6 <__swbuf_r+0x42>
10016af2:	2001      	movs	r0, #1
10016af4:	4240      	negs	r0, r0
10016af6:	e01d      	b.n	10016b34 <__swbuf_r+0xa0>
10016af8:	0021      	movs	r1, r4
10016afa:	0028      	movs	r0, r5
10016afc:	f000 f91e 	bl	10016d3c <_fflush_r>
10016b00:	2800      	cmp	r0, #0
10016b02:	d1f6      	bne.n	10016af2 <__swbuf_r+0x5e>
10016b04:	68a3      	ldr	r3, [r4, #8]
10016b06:	3001      	adds	r0, #1
10016b08:	3b01      	subs	r3, #1
10016b0a:	60a3      	str	r3, [r4, #8]
10016b0c:	6823      	ldr	r3, [r4, #0]
10016b0e:	1c5a      	adds	r2, r3, #1
10016b10:	6022      	str	r2, [r4, #0]
10016b12:	701f      	strb	r7, [r3, #0]
10016b14:	6963      	ldr	r3, [r4, #20]
10016b16:	4298      	cmp	r0, r3
10016b18:	d005      	beq.n	10016b26 <__swbuf_r+0x92>
10016b1a:	89a3      	ldrh	r3, [r4, #12]
10016b1c:	0030      	movs	r0, r6
10016b1e:	07db      	lsls	r3, r3, #31
10016b20:	d508      	bpl.n	10016b34 <__swbuf_r+0xa0>
10016b22:	2e0a      	cmp	r6, #10
10016b24:	d106      	bne.n	10016b34 <__swbuf_r+0xa0>
10016b26:	0021      	movs	r1, r4
10016b28:	0028      	movs	r0, r5
10016b2a:	f000 f907 	bl	10016d3c <_fflush_r>
10016b2e:	2800      	cmp	r0, #0
10016b30:	d1df      	bne.n	10016af2 <__swbuf_r+0x5e>
10016b32:	0030      	movs	r0, r6
10016b34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10016b36:	46c0      	nop			; (mov r8, r8)
10016b38:	10018820 	.word	0x10018820
10016b3c:	10018840 	.word	0x10018840
10016b40:	10018860 	.word	0x10018860

10016b44 <__swsetup_r>:
10016b44:	4b36      	ldr	r3, [pc, #216]	; (10016c20 <__swsetup_r+0xdc>)
10016b46:	b570      	push	{r4, r5, r6, lr}
10016b48:	681d      	ldr	r5, [r3, #0]
10016b4a:	0006      	movs	r6, r0
10016b4c:	000c      	movs	r4, r1
10016b4e:	2d00      	cmp	r5, #0
10016b50:	d005      	beq.n	10016b5e <__swsetup_r+0x1a>
10016b52:	69ab      	ldr	r3, [r5, #24]
10016b54:	2b00      	cmp	r3, #0
10016b56:	d102      	bne.n	10016b5e <__swsetup_r+0x1a>
10016b58:	0028      	movs	r0, r5
10016b5a:	f000 f95d 	bl	10016e18 <__sinit>
10016b5e:	4b31      	ldr	r3, [pc, #196]	; (10016c24 <__swsetup_r+0xe0>)
10016b60:	429c      	cmp	r4, r3
10016b62:	d101      	bne.n	10016b68 <__swsetup_r+0x24>
10016b64:	686c      	ldr	r4, [r5, #4]
10016b66:	e008      	b.n	10016b7a <__swsetup_r+0x36>
10016b68:	4b2f      	ldr	r3, [pc, #188]	; (10016c28 <__swsetup_r+0xe4>)
10016b6a:	429c      	cmp	r4, r3
10016b6c:	d101      	bne.n	10016b72 <__swsetup_r+0x2e>
10016b6e:	68ac      	ldr	r4, [r5, #8]
10016b70:	e003      	b.n	10016b7a <__swsetup_r+0x36>
10016b72:	4b2e      	ldr	r3, [pc, #184]	; (10016c2c <__swsetup_r+0xe8>)
10016b74:	429c      	cmp	r4, r3
10016b76:	d100      	bne.n	10016b7a <__swsetup_r+0x36>
10016b78:	68ec      	ldr	r4, [r5, #12]
10016b7a:	220c      	movs	r2, #12
10016b7c:	5ea3      	ldrsh	r3, [r4, r2]
10016b7e:	b29a      	uxth	r2, r3
10016b80:	0711      	lsls	r1, r2, #28
10016b82:	d423      	bmi.n	10016bcc <__swsetup_r+0x88>
10016b84:	06d1      	lsls	r1, r2, #27
10016b86:	d407      	bmi.n	10016b98 <__swsetup_r+0x54>
10016b88:	2209      	movs	r2, #9
10016b8a:	2001      	movs	r0, #1
10016b8c:	6032      	str	r2, [r6, #0]
10016b8e:	3237      	adds	r2, #55	; 0x37
10016b90:	4313      	orrs	r3, r2
10016b92:	81a3      	strh	r3, [r4, #12]
10016b94:	4240      	negs	r0, r0
10016b96:	e042      	b.n	10016c1e <__swsetup_r+0xda>
10016b98:	0753      	lsls	r3, r2, #29
10016b9a:	d513      	bpl.n	10016bc4 <__swsetup_r+0x80>
10016b9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
10016b9e:	2900      	cmp	r1, #0
10016ba0:	d008      	beq.n	10016bb4 <__swsetup_r+0x70>
10016ba2:	0023      	movs	r3, r4
10016ba4:	3344      	adds	r3, #68	; 0x44
10016ba6:	4299      	cmp	r1, r3
10016ba8:	d002      	beq.n	10016bb0 <__swsetup_r+0x6c>
10016baa:	0030      	movs	r0, r6
10016bac:	f7ff fd34 	bl	10016618 <_free_r>
10016bb0:	2300      	movs	r3, #0
10016bb2:	6363      	str	r3, [r4, #52]	; 0x34
10016bb4:	2224      	movs	r2, #36	; 0x24
10016bb6:	89a3      	ldrh	r3, [r4, #12]
10016bb8:	4393      	bics	r3, r2
10016bba:	81a3      	strh	r3, [r4, #12]
10016bbc:	2300      	movs	r3, #0
10016bbe:	6063      	str	r3, [r4, #4]
10016bc0:	6923      	ldr	r3, [r4, #16]
10016bc2:	6023      	str	r3, [r4, #0]
10016bc4:	2208      	movs	r2, #8
10016bc6:	89a3      	ldrh	r3, [r4, #12]
10016bc8:	4313      	orrs	r3, r2
10016bca:	81a3      	strh	r3, [r4, #12]
10016bcc:	6923      	ldr	r3, [r4, #16]
10016bce:	2b00      	cmp	r3, #0
10016bd0:	d10b      	bne.n	10016bea <__swsetup_r+0xa6>
10016bd2:	23a0      	movs	r3, #160	; 0xa0
10016bd4:	89a2      	ldrh	r2, [r4, #12]
10016bd6:	009b      	lsls	r3, r3, #2
10016bd8:	4013      	ands	r3, r2
10016bda:	2280      	movs	r2, #128	; 0x80
10016bdc:	0092      	lsls	r2, r2, #2
10016bde:	4293      	cmp	r3, r2
10016be0:	d003      	beq.n	10016bea <__swsetup_r+0xa6>
10016be2:	0021      	movs	r1, r4
10016be4:	0030      	movs	r0, r6
10016be6:	f000 f9d1 	bl	10016f8c <__smakebuf_r>
10016bea:	2301      	movs	r3, #1
10016bec:	89a2      	ldrh	r2, [r4, #12]
10016bee:	4013      	ands	r3, r2
10016bf0:	d005      	beq.n	10016bfe <__swsetup_r+0xba>
10016bf2:	2300      	movs	r3, #0
10016bf4:	60a3      	str	r3, [r4, #8]
10016bf6:	6963      	ldr	r3, [r4, #20]
10016bf8:	425b      	negs	r3, r3
10016bfa:	61a3      	str	r3, [r4, #24]
10016bfc:	e003      	b.n	10016c06 <__swsetup_r+0xc2>
10016bfe:	0792      	lsls	r2, r2, #30
10016c00:	d400      	bmi.n	10016c04 <__swsetup_r+0xc0>
10016c02:	6963      	ldr	r3, [r4, #20]
10016c04:	60a3      	str	r3, [r4, #8]
10016c06:	2000      	movs	r0, #0
10016c08:	6923      	ldr	r3, [r4, #16]
10016c0a:	4283      	cmp	r3, r0
10016c0c:	d107      	bne.n	10016c1e <__swsetup_r+0xda>
10016c0e:	220c      	movs	r2, #12
10016c10:	5ea3      	ldrsh	r3, [r4, r2]
10016c12:	061a      	lsls	r2, r3, #24
10016c14:	d503      	bpl.n	10016c1e <__swsetup_r+0xda>
10016c16:	2240      	movs	r2, #64	; 0x40
10016c18:	4313      	orrs	r3, r2
10016c1a:	81a3      	strh	r3, [r4, #12]
10016c1c:	3801      	subs	r0, #1
10016c1e:	bd70      	pop	{r4, r5, r6, pc}
10016c20:	10018944 	.word	0x10018944
10016c24:	10018820 	.word	0x10018820
10016c28:	10018840 	.word	0x10018840
10016c2c:	10018860 	.word	0x10018860

10016c30 <__sflush_r>:
10016c30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10016c32:	898a      	ldrh	r2, [r1, #12]
10016c34:	0005      	movs	r5, r0
10016c36:	000c      	movs	r4, r1
10016c38:	0713      	lsls	r3, r2, #28
10016c3a:	d45a      	bmi.n	10016cf2 <__sflush_r+0xc2>
10016c3c:	684b      	ldr	r3, [r1, #4]
10016c3e:	2b00      	cmp	r3, #0
10016c40:	dc02      	bgt.n	10016c48 <__sflush_r+0x18>
10016c42:	6c0b      	ldr	r3, [r1, #64]	; 0x40
10016c44:	2b00      	cmp	r3, #0
10016c46:	dd19      	ble.n	10016c7c <__sflush_r+0x4c>
10016c48:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
10016c4a:	2f00      	cmp	r7, #0
10016c4c:	d016      	beq.n	10016c7c <__sflush_r+0x4c>
10016c4e:	2300      	movs	r3, #0
10016c50:	682e      	ldr	r6, [r5, #0]
10016c52:	602b      	str	r3, [r5, #0]
10016c54:	2380      	movs	r3, #128	; 0x80
10016c56:	015b      	lsls	r3, r3, #5
10016c58:	401a      	ands	r2, r3
10016c5a:	d001      	beq.n	10016c60 <__sflush_r+0x30>
10016c5c:	6d60      	ldr	r0, [r4, #84]	; 0x54
10016c5e:	e014      	b.n	10016c8a <__sflush_r+0x5a>
10016c60:	2301      	movs	r3, #1
10016c62:	6a21      	ldr	r1, [r4, #32]
10016c64:	0028      	movs	r0, r5
10016c66:	47b8      	blx	r7
10016c68:	1c43      	adds	r3, r0, #1
10016c6a:	d10e      	bne.n	10016c8a <__sflush_r+0x5a>
10016c6c:	682b      	ldr	r3, [r5, #0]
10016c6e:	2b00      	cmp	r3, #0
10016c70:	d00b      	beq.n	10016c8a <__sflush_r+0x5a>
10016c72:	2b1d      	cmp	r3, #29
10016c74:	d001      	beq.n	10016c7a <__sflush_r+0x4a>
10016c76:	2b16      	cmp	r3, #22
10016c78:	d102      	bne.n	10016c80 <__sflush_r+0x50>
10016c7a:	602e      	str	r6, [r5, #0]
10016c7c:	2000      	movs	r0, #0
10016c7e:	e05a      	b.n	10016d36 <__sflush_r+0x106>
10016c80:	2240      	movs	r2, #64	; 0x40
10016c82:	89a3      	ldrh	r3, [r4, #12]
10016c84:	4313      	orrs	r3, r2
10016c86:	81a3      	strh	r3, [r4, #12]
10016c88:	e055      	b.n	10016d36 <__sflush_r+0x106>
10016c8a:	89a3      	ldrh	r3, [r4, #12]
10016c8c:	075b      	lsls	r3, r3, #29
10016c8e:	d506      	bpl.n	10016c9e <__sflush_r+0x6e>
10016c90:	6863      	ldr	r3, [r4, #4]
10016c92:	1ac0      	subs	r0, r0, r3
10016c94:	6b63      	ldr	r3, [r4, #52]	; 0x34
10016c96:	2b00      	cmp	r3, #0
10016c98:	d001      	beq.n	10016c9e <__sflush_r+0x6e>
10016c9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
10016c9c:	1ac0      	subs	r0, r0, r3
10016c9e:	2300      	movs	r3, #0
10016ca0:	0002      	movs	r2, r0
10016ca2:	6a21      	ldr	r1, [r4, #32]
10016ca4:	0028      	movs	r0, r5
10016ca6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
10016ca8:	47b8      	blx	r7
10016caa:	89a3      	ldrh	r3, [r4, #12]
10016cac:	1c42      	adds	r2, r0, #1
10016cae:	d106      	bne.n	10016cbe <__sflush_r+0x8e>
10016cb0:	6829      	ldr	r1, [r5, #0]
10016cb2:	291d      	cmp	r1, #29
10016cb4:	d83a      	bhi.n	10016d2c <__sflush_r+0xfc>
10016cb6:	4a20      	ldr	r2, [pc, #128]	; (10016d38 <__sflush_r+0x108>)
10016cb8:	40ca      	lsrs	r2, r1
10016cba:	07d2      	lsls	r2, r2, #31
10016cbc:	d536      	bpl.n	10016d2c <__sflush_r+0xfc>
10016cbe:	2200      	movs	r2, #0
10016cc0:	6062      	str	r2, [r4, #4]
10016cc2:	6922      	ldr	r2, [r4, #16]
10016cc4:	6022      	str	r2, [r4, #0]
10016cc6:	04db      	lsls	r3, r3, #19
10016cc8:	d505      	bpl.n	10016cd6 <__sflush_r+0xa6>
10016cca:	1c43      	adds	r3, r0, #1
10016ccc:	d102      	bne.n	10016cd4 <__sflush_r+0xa4>
10016cce:	682b      	ldr	r3, [r5, #0]
10016cd0:	2b00      	cmp	r3, #0
10016cd2:	d100      	bne.n	10016cd6 <__sflush_r+0xa6>
10016cd4:	6560      	str	r0, [r4, #84]	; 0x54
10016cd6:	6b61      	ldr	r1, [r4, #52]	; 0x34
10016cd8:	602e      	str	r6, [r5, #0]
10016cda:	2900      	cmp	r1, #0
10016cdc:	d0ce      	beq.n	10016c7c <__sflush_r+0x4c>
10016cde:	0023      	movs	r3, r4
10016ce0:	3344      	adds	r3, #68	; 0x44
10016ce2:	4299      	cmp	r1, r3
10016ce4:	d002      	beq.n	10016cec <__sflush_r+0xbc>
10016ce6:	0028      	movs	r0, r5
10016ce8:	f7ff fc96 	bl	10016618 <_free_r>
10016cec:	2000      	movs	r0, #0
10016cee:	6360      	str	r0, [r4, #52]	; 0x34
10016cf0:	e021      	b.n	10016d36 <__sflush_r+0x106>
10016cf2:	690f      	ldr	r7, [r1, #16]
10016cf4:	2f00      	cmp	r7, #0
10016cf6:	d0c1      	beq.n	10016c7c <__sflush_r+0x4c>
10016cf8:	680b      	ldr	r3, [r1, #0]
10016cfa:	600f      	str	r7, [r1, #0]
10016cfc:	1bdb      	subs	r3, r3, r7
10016cfe:	9301      	str	r3, [sp, #4]
10016d00:	2300      	movs	r3, #0
10016d02:	0792      	lsls	r2, r2, #30
10016d04:	d100      	bne.n	10016d08 <__sflush_r+0xd8>
10016d06:	694b      	ldr	r3, [r1, #20]
10016d08:	60a3      	str	r3, [r4, #8]
10016d0a:	e003      	b.n	10016d14 <__sflush_r+0xe4>
10016d0c:	9b01      	ldr	r3, [sp, #4]
10016d0e:	183f      	adds	r7, r7, r0
10016d10:	1a1b      	subs	r3, r3, r0
10016d12:	9301      	str	r3, [sp, #4]
10016d14:	9b01      	ldr	r3, [sp, #4]
10016d16:	2b00      	cmp	r3, #0
10016d18:	ddb0      	ble.n	10016c7c <__sflush_r+0x4c>
10016d1a:	9b01      	ldr	r3, [sp, #4]
10016d1c:	003a      	movs	r2, r7
10016d1e:	6a21      	ldr	r1, [r4, #32]
10016d20:	0028      	movs	r0, r5
10016d22:	6aa6      	ldr	r6, [r4, #40]	; 0x28
10016d24:	47b0      	blx	r6
10016d26:	2800      	cmp	r0, #0
10016d28:	dcf0      	bgt.n	10016d0c <__sflush_r+0xdc>
10016d2a:	89a3      	ldrh	r3, [r4, #12]
10016d2c:	2240      	movs	r2, #64	; 0x40
10016d2e:	2001      	movs	r0, #1
10016d30:	4313      	orrs	r3, r2
10016d32:	81a3      	strh	r3, [r4, #12]
10016d34:	4240      	negs	r0, r0
10016d36:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10016d38:	20400001 	.word	0x20400001

10016d3c <_fflush_r>:
10016d3c:	690b      	ldr	r3, [r1, #16]
10016d3e:	b570      	push	{r4, r5, r6, lr}
10016d40:	0005      	movs	r5, r0
10016d42:	000c      	movs	r4, r1
10016d44:	2b00      	cmp	r3, #0
10016d46:	d101      	bne.n	10016d4c <_fflush_r+0x10>
10016d48:	2000      	movs	r0, #0
10016d4a:	e01c      	b.n	10016d86 <_fflush_r+0x4a>
10016d4c:	2800      	cmp	r0, #0
10016d4e:	d004      	beq.n	10016d5a <_fflush_r+0x1e>
10016d50:	6983      	ldr	r3, [r0, #24]
10016d52:	2b00      	cmp	r3, #0
10016d54:	d101      	bne.n	10016d5a <_fflush_r+0x1e>
10016d56:	f000 f85f 	bl	10016e18 <__sinit>
10016d5a:	4b0b      	ldr	r3, [pc, #44]	; (10016d88 <_fflush_r+0x4c>)
10016d5c:	429c      	cmp	r4, r3
10016d5e:	d101      	bne.n	10016d64 <_fflush_r+0x28>
10016d60:	686c      	ldr	r4, [r5, #4]
10016d62:	e008      	b.n	10016d76 <_fflush_r+0x3a>
10016d64:	4b09      	ldr	r3, [pc, #36]	; (10016d8c <_fflush_r+0x50>)
10016d66:	429c      	cmp	r4, r3
10016d68:	d101      	bne.n	10016d6e <_fflush_r+0x32>
10016d6a:	68ac      	ldr	r4, [r5, #8]
10016d6c:	e003      	b.n	10016d76 <_fflush_r+0x3a>
10016d6e:	4b08      	ldr	r3, [pc, #32]	; (10016d90 <_fflush_r+0x54>)
10016d70:	429c      	cmp	r4, r3
10016d72:	d100      	bne.n	10016d76 <_fflush_r+0x3a>
10016d74:	68ec      	ldr	r4, [r5, #12]
10016d76:	220c      	movs	r2, #12
10016d78:	5ea3      	ldrsh	r3, [r4, r2]
10016d7a:	2b00      	cmp	r3, #0
10016d7c:	d0e4      	beq.n	10016d48 <_fflush_r+0xc>
10016d7e:	0021      	movs	r1, r4
10016d80:	0028      	movs	r0, r5
10016d82:	f7ff ff55 	bl	10016c30 <__sflush_r>
10016d86:	bd70      	pop	{r4, r5, r6, pc}
10016d88:	10018820 	.word	0x10018820
10016d8c:	10018840 	.word	0x10018840
10016d90:	10018860 	.word	0x10018860

10016d94 <_cleanup_r>:
10016d94:	b510      	push	{r4, lr}
10016d96:	4902      	ldr	r1, [pc, #8]	; (10016da0 <_cleanup_r+0xc>)
10016d98:	f000 f8b0 	bl	10016efc <_fwalk_reent>
10016d9c:	bd10      	pop	{r4, pc}
10016d9e:	46c0      	nop			; (mov r8, r8)
10016da0:	10016d3d 	.word	0x10016d3d

10016da4 <std.isra.0>:
10016da4:	2300      	movs	r3, #0
10016da6:	b510      	push	{r4, lr}
10016da8:	0004      	movs	r4, r0
10016daa:	6003      	str	r3, [r0, #0]
10016dac:	6043      	str	r3, [r0, #4]
10016dae:	6083      	str	r3, [r0, #8]
10016db0:	8181      	strh	r1, [r0, #12]
10016db2:	6643      	str	r3, [r0, #100]	; 0x64
10016db4:	81c2      	strh	r2, [r0, #14]
10016db6:	6103      	str	r3, [r0, #16]
10016db8:	6143      	str	r3, [r0, #20]
10016dba:	6183      	str	r3, [r0, #24]
10016dbc:	0019      	movs	r1, r3
10016dbe:	2208      	movs	r2, #8
10016dc0:	305c      	adds	r0, #92	; 0x5c
10016dc2:	f7ff fc21 	bl	10016608 <memset>
10016dc6:	4b05      	ldr	r3, [pc, #20]	; (10016ddc <std.isra.0+0x38>)
10016dc8:	6224      	str	r4, [r4, #32]
10016dca:	6263      	str	r3, [r4, #36]	; 0x24
10016dcc:	4b04      	ldr	r3, [pc, #16]	; (10016de0 <std.isra.0+0x3c>)
10016dce:	62a3      	str	r3, [r4, #40]	; 0x28
10016dd0:	4b04      	ldr	r3, [pc, #16]	; (10016de4 <std.isra.0+0x40>)
10016dd2:	62e3      	str	r3, [r4, #44]	; 0x2c
10016dd4:	4b04      	ldr	r3, [pc, #16]	; (10016de8 <std.isra.0+0x44>)
10016dd6:	6323      	str	r3, [r4, #48]	; 0x30
10016dd8:	bd10      	pop	{r4, pc}
10016dda:	46c0      	nop			; (mov r8, r8)
10016ddc:	1001761d 	.word	0x1001761d
10016de0:	10017645 	.word	0x10017645
10016de4:	1001767d 	.word	0x1001767d
10016de8:	100176a9 	.word	0x100176a9

10016dec <__sfmoreglue>:
10016dec:	b570      	push	{r4, r5, r6, lr}
10016dee:	2568      	movs	r5, #104	; 0x68
10016df0:	1e4b      	subs	r3, r1, #1
10016df2:	435d      	muls	r5, r3
10016df4:	000e      	movs	r6, r1
10016df6:	0029      	movs	r1, r5
10016df8:	3174      	adds	r1, #116	; 0x74
10016dfa:	f7ff fc53 	bl	100166a4 <_malloc_r>
10016dfe:	1e04      	subs	r4, r0, #0
10016e00:	d008      	beq.n	10016e14 <__sfmoreglue+0x28>
10016e02:	2100      	movs	r1, #0
10016e04:	002a      	movs	r2, r5
10016e06:	6001      	str	r1, [r0, #0]
10016e08:	6046      	str	r6, [r0, #4]
10016e0a:	300c      	adds	r0, #12
10016e0c:	60a0      	str	r0, [r4, #8]
10016e0e:	3268      	adds	r2, #104	; 0x68
10016e10:	f7ff fbfa 	bl	10016608 <memset>
10016e14:	0020      	movs	r0, r4
10016e16:	bd70      	pop	{r4, r5, r6, pc}

10016e18 <__sinit>:
10016e18:	6983      	ldr	r3, [r0, #24]
10016e1a:	b513      	push	{r0, r1, r4, lr}
10016e1c:	0004      	movs	r4, r0
10016e1e:	2b00      	cmp	r3, #0
10016e20:	d128      	bne.n	10016e74 <__sinit+0x5c>
10016e22:	6483      	str	r3, [r0, #72]	; 0x48
10016e24:	64c3      	str	r3, [r0, #76]	; 0x4c
10016e26:	6503      	str	r3, [r0, #80]	; 0x50
10016e28:	4b13      	ldr	r3, [pc, #76]	; (10016e78 <__sinit+0x60>)
10016e2a:	4a14      	ldr	r2, [pc, #80]	; (10016e7c <__sinit+0x64>)
10016e2c:	681b      	ldr	r3, [r3, #0]
10016e2e:	6282      	str	r2, [r0, #40]	; 0x28
10016e30:	9301      	str	r3, [sp, #4]
10016e32:	4298      	cmp	r0, r3
10016e34:	d101      	bne.n	10016e3a <__sinit+0x22>
10016e36:	2301      	movs	r3, #1
10016e38:	6183      	str	r3, [r0, #24]
10016e3a:	0020      	movs	r0, r4
10016e3c:	f000 f820 	bl	10016e80 <__sfp>
10016e40:	6060      	str	r0, [r4, #4]
10016e42:	0020      	movs	r0, r4
10016e44:	f000 f81c 	bl	10016e80 <__sfp>
10016e48:	60a0      	str	r0, [r4, #8]
10016e4a:	0020      	movs	r0, r4
10016e4c:	f000 f818 	bl	10016e80 <__sfp>
10016e50:	2200      	movs	r2, #0
10016e52:	60e0      	str	r0, [r4, #12]
10016e54:	2104      	movs	r1, #4
10016e56:	6860      	ldr	r0, [r4, #4]
10016e58:	f7ff ffa4 	bl	10016da4 <std.isra.0>
10016e5c:	2201      	movs	r2, #1
10016e5e:	2109      	movs	r1, #9
10016e60:	68a0      	ldr	r0, [r4, #8]
10016e62:	f7ff ff9f 	bl	10016da4 <std.isra.0>
10016e66:	2202      	movs	r2, #2
10016e68:	2112      	movs	r1, #18
10016e6a:	68e0      	ldr	r0, [r4, #12]
10016e6c:	f7ff ff9a 	bl	10016da4 <std.isra.0>
10016e70:	2301      	movs	r3, #1
10016e72:	61a3      	str	r3, [r4, #24]
10016e74:	bd13      	pop	{r0, r1, r4, pc}
10016e76:	46c0      	nop			; (mov r8, r8)
10016e78:	1001881c 	.word	0x1001881c
10016e7c:	10016d95 	.word	0x10016d95

10016e80 <__sfp>:
10016e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10016e82:	4b1d      	ldr	r3, [pc, #116]	; (10016ef8 <__sfp+0x78>)
10016e84:	0006      	movs	r6, r0
10016e86:	681d      	ldr	r5, [r3, #0]
10016e88:	69ab      	ldr	r3, [r5, #24]
10016e8a:	2b00      	cmp	r3, #0
10016e8c:	d102      	bne.n	10016e94 <__sfp+0x14>
10016e8e:	0028      	movs	r0, r5
10016e90:	f7ff ffc2 	bl	10016e18 <__sinit>
10016e94:	3548      	adds	r5, #72	; 0x48
10016e96:	68ac      	ldr	r4, [r5, #8]
10016e98:	686b      	ldr	r3, [r5, #4]
10016e9a:	3b01      	subs	r3, #1
10016e9c:	d405      	bmi.n	10016eaa <__sfp+0x2a>
10016e9e:	220c      	movs	r2, #12
10016ea0:	5ea7      	ldrsh	r7, [r4, r2]
10016ea2:	2f00      	cmp	r7, #0
10016ea4:	d010      	beq.n	10016ec8 <__sfp+0x48>
10016ea6:	3468      	adds	r4, #104	; 0x68
10016ea8:	e7f7      	b.n	10016e9a <__sfp+0x1a>
10016eaa:	682b      	ldr	r3, [r5, #0]
10016eac:	2b00      	cmp	r3, #0
10016eae:	d001      	beq.n	10016eb4 <__sfp+0x34>
10016eb0:	682d      	ldr	r5, [r5, #0]
10016eb2:	e7f0      	b.n	10016e96 <__sfp+0x16>
10016eb4:	2104      	movs	r1, #4
10016eb6:	0030      	movs	r0, r6
10016eb8:	f7ff ff98 	bl	10016dec <__sfmoreglue>
10016ebc:	6028      	str	r0, [r5, #0]
10016ebe:	2800      	cmp	r0, #0
10016ec0:	d1f6      	bne.n	10016eb0 <__sfp+0x30>
10016ec2:	230c      	movs	r3, #12
10016ec4:	6033      	str	r3, [r6, #0]
10016ec6:	e016      	b.n	10016ef6 <__sfp+0x76>
10016ec8:	2301      	movs	r3, #1
10016eca:	0020      	movs	r0, r4
10016ecc:	425b      	negs	r3, r3
10016ece:	81e3      	strh	r3, [r4, #14]
10016ed0:	3302      	adds	r3, #2
10016ed2:	81a3      	strh	r3, [r4, #12]
10016ed4:	6667      	str	r7, [r4, #100]	; 0x64
10016ed6:	6027      	str	r7, [r4, #0]
10016ed8:	60a7      	str	r7, [r4, #8]
10016eda:	6067      	str	r7, [r4, #4]
10016edc:	6127      	str	r7, [r4, #16]
10016ede:	6167      	str	r7, [r4, #20]
10016ee0:	61a7      	str	r7, [r4, #24]
10016ee2:	305c      	adds	r0, #92	; 0x5c
10016ee4:	2208      	movs	r2, #8
10016ee6:	0039      	movs	r1, r7
10016ee8:	f7ff fb8e 	bl	10016608 <memset>
10016eec:	0020      	movs	r0, r4
10016eee:	6367      	str	r7, [r4, #52]	; 0x34
10016ef0:	63a7      	str	r7, [r4, #56]	; 0x38
10016ef2:	64a7      	str	r7, [r4, #72]	; 0x48
10016ef4:	64e7      	str	r7, [r4, #76]	; 0x4c
10016ef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10016ef8:	1001881c 	.word	0x1001881c

10016efc <_fwalk_reent>:
10016efc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10016efe:	0004      	movs	r4, r0
10016f00:	0007      	movs	r7, r0
10016f02:	2600      	movs	r6, #0
10016f04:	9101      	str	r1, [sp, #4]
10016f06:	3448      	adds	r4, #72	; 0x48
10016f08:	2c00      	cmp	r4, #0
10016f0a:	d016      	beq.n	10016f3a <_fwalk_reent+0x3e>
10016f0c:	6863      	ldr	r3, [r4, #4]
10016f0e:	68a5      	ldr	r5, [r4, #8]
10016f10:	9300      	str	r3, [sp, #0]
10016f12:	9b00      	ldr	r3, [sp, #0]
10016f14:	3b01      	subs	r3, #1
10016f16:	9300      	str	r3, [sp, #0]
10016f18:	d40d      	bmi.n	10016f36 <_fwalk_reent+0x3a>
10016f1a:	89ab      	ldrh	r3, [r5, #12]
10016f1c:	2b01      	cmp	r3, #1
10016f1e:	d908      	bls.n	10016f32 <_fwalk_reent+0x36>
10016f20:	220e      	movs	r2, #14
10016f22:	5eab      	ldrsh	r3, [r5, r2]
10016f24:	3301      	adds	r3, #1
10016f26:	d004      	beq.n	10016f32 <_fwalk_reent+0x36>
10016f28:	0029      	movs	r1, r5
10016f2a:	0038      	movs	r0, r7
10016f2c:	9b01      	ldr	r3, [sp, #4]
10016f2e:	4798      	blx	r3
10016f30:	4306      	orrs	r6, r0
10016f32:	3568      	adds	r5, #104	; 0x68
10016f34:	e7ed      	b.n	10016f12 <_fwalk_reent+0x16>
10016f36:	6824      	ldr	r4, [r4, #0]
10016f38:	e7e6      	b.n	10016f08 <_fwalk_reent+0xc>
10016f3a:	0030      	movs	r0, r6
10016f3c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

10016f40 <__swhatbuf_r>:
10016f40:	b570      	push	{r4, r5, r6, lr}
10016f42:	000e      	movs	r6, r1
10016f44:	001d      	movs	r5, r3
10016f46:	230e      	movs	r3, #14
10016f48:	5ec9      	ldrsh	r1, [r1, r3]
10016f4a:	b090      	sub	sp, #64	; 0x40
10016f4c:	0014      	movs	r4, r2
10016f4e:	2900      	cmp	r1, #0
10016f50:	da06      	bge.n	10016f60 <__swhatbuf_r+0x20>
10016f52:	2300      	movs	r3, #0
10016f54:	602b      	str	r3, [r5, #0]
10016f56:	89b3      	ldrh	r3, [r6, #12]
10016f58:	061b      	lsls	r3, r3, #24
10016f5a:	d50f      	bpl.n	10016f7c <__swhatbuf_r+0x3c>
10016f5c:	2340      	movs	r3, #64	; 0x40
10016f5e:	e00f      	b.n	10016f80 <__swhatbuf_r+0x40>
10016f60:	aa01      	add	r2, sp, #4
10016f62:	f000 fbcd 	bl	10017700 <_fstat_r>
10016f66:	2800      	cmp	r0, #0
10016f68:	dbf3      	blt.n	10016f52 <__swhatbuf_r+0x12>
10016f6a:	23f0      	movs	r3, #240	; 0xf0
10016f6c:	9a02      	ldr	r2, [sp, #8]
10016f6e:	021b      	lsls	r3, r3, #8
10016f70:	4013      	ands	r3, r2
10016f72:	4a05      	ldr	r2, [pc, #20]	; (10016f88 <__swhatbuf_r+0x48>)
10016f74:	189b      	adds	r3, r3, r2
10016f76:	425a      	negs	r2, r3
10016f78:	4153      	adcs	r3, r2
10016f7a:	602b      	str	r3, [r5, #0]
10016f7c:	2380      	movs	r3, #128	; 0x80
10016f7e:	00db      	lsls	r3, r3, #3
10016f80:	2000      	movs	r0, #0
10016f82:	6023      	str	r3, [r4, #0]
10016f84:	b010      	add	sp, #64	; 0x40
10016f86:	bd70      	pop	{r4, r5, r6, pc}
10016f88:	ffffe000 	.word	0xffffe000

10016f8c <__smakebuf_r>:
10016f8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10016f8e:	2602      	movs	r6, #2
10016f90:	898b      	ldrh	r3, [r1, #12]
10016f92:	0005      	movs	r5, r0
10016f94:	000c      	movs	r4, r1
10016f96:	4233      	tst	r3, r6
10016f98:	d110      	bne.n	10016fbc <__smakebuf_r+0x30>
10016f9a:	ab01      	add	r3, sp, #4
10016f9c:	466a      	mov	r2, sp
10016f9e:	f7ff ffcf 	bl	10016f40 <__swhatbuf_r>
10016fa2:	9900      	ldr	r1, [sp, #0]
10016fa4:	0007      	movs	r7, r0
10016fa6:	0028      	movs	r0, r5
10016fa8:	f7ff fb7c 	bl	100166a4 <_malloc_r>
10016fac:	2800      	cmp	r0, #0
10016fae:	d10c      	bne.n	10016fca <__smakebuf_r+0x3e>
10016fb0:	220c      	movs	r2, #12
10016fb2:	5ea3      	ldrsh	r3, [r4, r2]
10016fb4:	059a      	lsls	r2, r3, #22
10016fb6:	d423      	bmi.n	10017000 <__smakebuf_r+0x74>
10016fb8:	4333      	orrs	r3, r6
10016fba:	81a3      	strh	r3, [r4, #12]
10016fbc:	0023      	movs	r3, r4
10016fbe:	3347      	adds	r3, #71	; 0x47
10016fc0:	6023      	str	r3, [r4, #0]
10016fc2:	6123      	str	r3, [r4, #16]
10016fc4:	2301      	movs	r3, #1
10016fc6:	6163      	str	r3, [r4, #20]
10016fc8:	e01a      	b.n	10017000 <__smakebuf_r+0x74>
10016fca:	2280      	movs	r2, #128	; 0x80
10016fcc:	4b0d      	ldr	r3, [pc, #52]	; (10017004 <__smakebuf_r+0x78>)
10016fce:	62ab      	str	r3, [r5, #40]	; 0x28
10016fd0:	89a3      	ldrh	r3, [r4, #12]
10016fd2:	6020      	str	r0, [r4, #0]
10016fd4:	4313      	orrs	r3, r2
10016fd6:	81a3      	strh	r3, [r4, #12]
10016fd8:	9b00      	ldr	r3, [sp, #0]
10016fda:	6120      	str	r0, [r4, #16]
10016fdc:	6163      	str	r3, [r4, #20]
10016fde:	9b01      	ldr	r3, [sp, #4]
10016fe0:	2b00      	cmp	r3, #0
10016fe2:	d00a      	beq.n	10016ffa <__smakebuf_r+0x6e>
10016fe4:	230e      	movs	r3, #14
10016fe6:	5ee1      	ldrsh	r1, [r4, r3]
10016fe8:	0028      	movs	r0, r5
10016fea:	f000 fb9b 	bl	10017724 <_isatty_r>
10016fee:	2800      	cmp	r0, #0
10016ff0:	d003      	beq.n	10016ffa <__smakebuf_r+0x6e>
10016ff2:	2201      	movs	r2, #1
10016ff4:	89a3      	ldrh	r3, [r4, #12]
10016ff6:	4313      	orrs	r3, r2
10016ff8:	81a3      	strh	r3, [r4, #12]
10016ffa:	89a3      	ldrh	r3, [r4, #12]
10016ffc:	431f      	orrs	r7, r3
10016ffe:	81a7      	strh	r7, [r4, #12]
10017000:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10017002:	46c0      	nop			; (mov r8, r8)
10017004:	10016d95 	.word	0x10016d95

10017008 <__sfputc_r>:
10017008:	6893      	ldr	r3, [r2, #8]
1001700a:	b510      	push	{r4, lr}
1001700c:	3b01      	subs	r3, #1
1001700e:	6093      	str	r3, [r2, #8]
10017010:	2b00      	cmp	r3, #0
10017012:	da05      	bge.n	10017020 <__sfputc_r+0x18>
10017014:	6994      	ldr	r4, [r2, #24]
10017016:	42a3      	cmp	r3, r4
10017018:	db08      	blt.n	1001702c <__sfputc_r+0x24>
1001701a:	b2cb      	uxtb	r3, r1
1001701c:	2b0a      	cmp	r3, #10
1001701e:	d005      	beq.n	1001702c <__sfputc_r+0x24>
10017020:	6813      	ldr	r3, [r2, #0]
10017022:	1c58      	adds	r0, r3, #1
10017024:	6010      	str	r0, [r2, #0]
10017026:	7019      	strb	r1, [r3, #0]
10017028:	b2c8      	uxtb	r0, r1
1001702a:	e001      	b.n	10017030 <__sfputc_r+0x28>
1001702c:	f7ff fd32 	bl	10016a94 <__swbuf_r>
10017030:	bd10      	pop	{r4, pc}

10017032 <__sfputs_r>:
10017032:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10017034:	0006      	movs	r6, r0
10017036:	000f      	movs	r7, r1
10017038:	0014      	movs	r4, r2
1001703a:	18d5      	adds	r5, r2, r3
1001703c:	42ac      	cmp	r4, r5
1001703e:	d008      	beq.n	10017052 <__sfputs_r+0x20>
10017040:	7821      	ldrb	r1, [r4, #0]
10017042:	003a      	movs	r2, r7
10017044:	0030      	movs	r0, r6
10017046:	f7ff ffdf 	bl	10017008 <__sfputc_r>
1001704a:	3401      	adds	r4, #1
1001704c:	1c43      	adds	r3, r0, #1
1001704e:	d1f5      	bne.n	1001703c <__sfputs_r+0xa>
10017050:	e000      	b.n	10017054 <__sfputs_r+0x22>
10017052:	2000      	movs	r0, #0
10017054:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

10017058 <_vfiprintf_r>:
10017058:	b5f0      	push	{r4, r5, r6, r7, lr}
1001705a:	b09f      	sub	sp, #124	; 0x7c
1001705c:	0006      	movs	r6, r0
1001705e:	000f      	movs	r7, r1
10017060:	9202      	str	r2, [sp, #8]
10017062:	9305      	str	r3, [sp, #20]
10017064:	2800      	cmp	r0, #0
10017066:	d004      	beq.n	10017072 <_vfiprintf_r+0x1a>
10017068:	6983      	ldr	r3, [r0, #24]
1001706a:	2b00      	cmp	r3, #0
1001706c:	d101      	bne.n	10017072 <_vfiprintf_r+0x1a>
1001706e:	f7ff fed3 	bl	10016e18 <__sinit>
10017072:	4b7f      	ldr	r3, [pc, #508]	; (10017270 <_vfiprintf_r+0x218>)
10017074:	429f      	cmp	r7, r3
10017076:	d101      	bne.n	1001707c <_vfiprintf_r+0x24>
10017078:	6877      	ldr	r7, [r6, #4]
1001707a:	e008      	b.n	1001708e <_vfiprintf_r+0x36>
1001707c:	4b7d      	ldr	r3, [pc, #500]	; (10017274 <_vfiprintf_r+0x21c>)
1001707e:	429f      	cmp	r7, r3
10017080:	d101      	bne.n	10017086 <_vfiprintf_r+0x2e>
10017082:	68b7      	ldr	r7, [r6, #8]
10017084:	e003      	b.n	1001708e <_vfiprintf_r+0x36>
10017086:	4b7c      	ldr	r3, [pc, #496]	; (10017278 <_vfiprintf_r+0x220>)
10017088:	429f      	cmp	r7, r3
1001708a:	d100      	bne.n	1001708e <_vfiprintf_r+0x36>
1001708c:	68f7      	ldr	r7, [r6, #12]
1001708e:	89bb      	ldrh	r3, [r7, #12]
10017090:	071b      	lsls	r3, r3, #28
10017092:	d50a      	bpl.n	100170aa <_vfiprintf_r+0x52>
10017094:	693b      	ldr	r3, [r7, #16]
10017096:	2b00      	cmp	r3, #0
10017098:	d007      	beq.n	100170aa <_vfiprintf_r+0x52>
1001709a:	2300      	movs	r3, #0
1001709c:	ad06      	add	r5, sp, #24
1001709e:	616b      	str	r3, [r5, #20]
100170a0:	3320      	adds	r3, #32
100170a2:	766b      	strb	r3, [r5, #25]
100170a4:	3310      	adds	r3, #16
100170a6:	76ab      	strb	r3, [r5, #26]
100170a8:	e03d      	b.n	10017126 <_vfiprintf_r+0xce>
100170aa:	0039      	movs	r1, r7
100170ac:	0030      	movs	r0, r6
100170ae:	f7ff fd49 	bl	10016b44 <__swsetup_r>
100170b2:	2800      	cmp	r0, #0
100170b4:	d0f1      	beq.n	1001709a <_vfiprintf_r+0x42>
100170b6:	2001      	movs	r0, #1
100170b8:	4240      	negs	r0, r0
100170ba:	e0d6      	b.n	1001726a <_vfiprintf_r+0x212>
100170bc:	9a05      	ldr	r2, [sp, #20]
100170be:	1d11      	adds	r1, r2, #4
100170c0:	6812      	ldr	r2, [r2, #0]
100170c2:	9105      	str	r1, [sp, #20]
100170c4:	2a00      	cmp	r2, #0
100170c6:	da00      	bge.n	100170ca <_vfiprintf_r+0x72>
100170c8:	e07f      	b.n	100171ca <_vfiprintf_r+0x172>
100170ca:	9209      	str	r2, [sp, #36]	; 0x24
100170cc:	3401      	adds	r4, #1
100170ce:	7823      	ldrb	r3, [r4, #0]
100170d0:	2b2e      	cmp	r3, #46	; 0x2e
100170d2:	d100      	bne.n	100170d6 <_vfiprintf_r+0x7e>
100170d4:	e08d      	b.n	100171f2 <_vfiprintf_r+0x19a>
100170d6:	7821      	ldrb	r1, [r4, #0]
100170d8:	2203      	movs	r2, #3
100170da:	4868      	ldr	r0, [pc, #416]	; (1001727c <_vfiprintf_r+0x224>)
100170dc:	f000 fb48 	bl	10017770 <memchr>
100170e0:	2800      	cmp	r0, #0
100170e2:	d007      	beq.n	100170f4 <_vfiprintf_r+0x9c>
100170e4:	4b65      	ldr	r3, [pc, #404]	; (1001727c <_vfiprintf_r+0x224>)
100170e6:	682a      	ldr	r2, [r5, #0]
100170e8:	1ac0      	subs	r0, r0, r3
100170ea:	2340      	movs	r3, #64	; 0x40
100170ec:	4083      	lsls	r3, r0
100170ee:	4313      	orrs	r3, r2
100170f0:	602b      	str	r3, [r5, #0]
100170f2:	3401      	adds	r4, #1
100170f4:	7821      	ldrb	r1, [r4, #0]
100170f6:	1c63      	adds	r3, r4, #1
100170f8:	2206      	movs	r2, #6
100170fa:	4861      	ldr	r0, [pc, #388]	; (10017280 <_vfiprintf_r+0x228>)
100170fc:	9302      	str	r3, [sp, #8]
100170fe:	7629      	strb	r1, [r5, #24]
10017100:	f000 fb36 	bl	10017770 <memchr>
10017104:	2800      	cmp	r0, #0
10017106:	d100      	bne.n	1001710a <_vfiprintf_r+0xb2>
10017108:	e09d      	b.n	10017246 <_vfiprintf_r+0x1ee>
1001710a:	4b5e      	ldr	r3, [pc, #376]	; (10017284 <_vfiprintf_r+0x22c>)
1001710c:	2b00      	cmp	r3, #0
1001710e:	d000      	beq.n	10017112 <_vfiprintf_r+0xba>
10017110:	e090      	b.n	10017234 <_vfiprintf_r+0x1dc>
10017112:	2207      	movs	r2, #7
10017114:	9b05      	ldr	r3, [sp, #20]
10017116:	3307      	adds	r3, #7
10017118:	4393      	bics	r3, r2
1001711a:	3308      	adds	r3, #8
1001711c:	9305      	str	r3, [sp, #20]
1001711e:	696b      	ldr	r3, [r5, #20]
10017120:	9a03      	ldr	r2, [sp, #12]
10017122:	189b      	adds	r3, r3, r2
10017124:	616b      	str	r3, [r5, #20]
10017126:	9c02      	ldr	r4, [sp, #8]
10017128:	7823      	ldrb	r3, [r4, #0]
1001712a:	2b00      	cmp	r3, #0
1001712c:	d104      	bne.n	10017138 <_vfiprintf_r+0xe0>
1001712e:	9b02      	ldr	r3, [sp, #8]
10017130:	1ae3      	subs	r3, r4, r3
10017132:	9304      	str	r3, [sp, #16]
10017134:	d012      	beq.n	1001715c <_vfiprintf_r+0x104>
10017136:	e003      	b.n	10017140 <_vfiprintf_r+0xe8>
10017138:	2b25      	cmp	r3, #37	; 0x25
1001713a:	d0f8      	beq.n	1001712e <_vfiprintf_r+0xd6>
1001713c:	3401      	adds	r4, #1
1001713e:	e7f3      	b.n	10017128 <_vfiprintf_r+0xd0>
10017140:	9b04      	ldr	r3, [sp, #16]
10017142:	9a02      	ldr	r2, [sp, #8]
10017144:	0039      	movs	r1, r7
10017146:	0030      	movs	r0, r6
10017148:	f7ff ff73 	bl	10017032 <__sfputs_r>
1001714c:	1c43      	adds	r3, r0, #1
1001714e:	d100      	bne.n	10017152 <_vfiprintf_r+0xfa>
10017150:	e086      	b.n	10017260 <_vfiprintf_r+0x208>
10017152:	696a      	ldr	r2, [r5, #20]
10017154:	9b04      	ldr	r3, [sp, #16]
10017156:	4694      	mov	ip, r2
10017158:	4463      	add	r3, ip
1001715a:	616b      	str	r3, [r5, #20]
1001715c:	7823      	ldrb	r3, [r4, #0]
1001715e:	2b00      	cmp	r3, #0
10017160:	d07e      	beq.n	10017260 <_vfiprintf_r+0x208>
10017162:	2201      	movs	r2, #1
10017164:	2300      	movs	r3, #0
10017166:	4252      	negs	r2, r2
10017168:	606a      	str	r2, [r5, #4]
1001716a:	a902      	add	r1, sp, #8
1001716c:	3254      	adds	r2, #84	; 0x54
1001716e:	1852      	adds	r2, r2, r1
10017170:	3401      	adds	r4, #1
10017172:	602b      	str	r3, [r5, #0]
10017174:	60eb      	str	r3, [r5, #12]
10017176:	60ab      	str	r3, [r5, #8]
10017178:	7013      	strb	r3, [r2, #0]
1001717a:	65ab      	str	r3, [r5, #88]	; 0x58
1001717c:	7821      	ldrb	r1, [r4, #0]
1001717e:	2205      	movs	r2, #5
10017180:	4841      	ldr	r0, [pc, #260]	; (10017288 <_vfiprintf_r+0x230>)
10017182:	f000 faf5 	bl	10017770 <memchr>
10017186:	2800      	cmp	r0, #0
10017188:	d008      	beq.n	1001719c <_vfiprintf_r+0x144>
1001718a:	4b3f      	ldr	r3, [pc, #252]	; (10017288 <_vfiprintf_r+0x230>)
1001718c:	682a      	ldr	r2, [r5, #0]
1001718e:	1ac0      	subs	r0, r0, r3
10017190:	2301      	movs	r3, #1
10017192:	4083      	lsls	r3, r0
10017194:	4313      	orrs	r3, r2
10017196:	602b      	str	r3, [r5, #0]
10017198:	3401      	adds	r4, #1
1001719a:	e7ef      	b.n	1001717c <_vfiprintf_r+0x124>
1001719c:	682b      	ldr	r3, [r5, #0]
1001719e:	06da      	lsls	r2, r3, #27
100171a0:	d504      	bpl.n	100171ac <_vfiprintf_r+0x154>
100171a2:	2253      	movs	r2, #83	; 0x53
100171a4:	2120      	movs	r1, #32
100171a6:	a802      	add	r0, sp, #8
100171a8:	1812      	adds	r2, r2, r0
100171aa:	7011      	strb	r1, [r2, #0]
100171ac:	071a      	lsls	r2, r3, #28
100171ae:	d504      	bpl.n	100171ba <_vfiprintf_r+0x162>
100171b0:	2253      	movs	r2, #83	; 0x53
100171b2:	212b      	movs	r1, #43	; 0x2b
100171b4:	a802      	add	r0, sp, #8
100171b6:	1812      	adds	r2, r2, r0
100171b8:	7011      	strb	r1, [r2, #0]
100171ba:	7822      	ldrb	r2, [r4, #0]
100171bc:	2a2a      	cmp	r2, #42	; 0x2a
100171be:	d100      	bne.n	100171c2 <_vfiprintf_r+0x16a>
100171c0:	e77c      	b.n	100170bc <_vfiprintf_r+0x64>
100171c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
100171c4:	2000      	movs	r0, #0
100171c6:	210a      	movs	r1, #10
100171c8:	e005      	b.n	100171d6 <_vfiprintf_r+0x17e>
100171ca:	4252      	negs	r2, r2
100171cc:	60ea      	str	r2, [r5, #12]
100171ce:	2202      	movs	r2, #2
100171d0:	4313      	orrs	r3, r2
100171d2:	602b      	str	r3, [r5, #0]
100171d4:	e77a      	b.n	100170cc <_vfiprintf_r+0x74>
100171d6:	7822      	ldrb	r2, [r4, #0]
100171d8:	3a30      	subs	r2, #48	; 0x30
100171da:	2a09      	cmp	r2, #9
100171dc:	d804      	bhi.n	100171e8 <_vfiprintf_r+0x190>
100171de:	434b      	muls	r3, r1
100171e0:	3401      	adds	r4, #1
100171e2:	189b      	adds	r3, r3, r2
100171e4:	2001      	movs	r0, #1
100171e6:	e7f6      	b.n	100171d6 <_vfiprintf_r+0x17e>
100171e8:	2800      	cmp	r0, #0
100171ea:	d100      	bne.n	100171ee <_vfiprintf_r+0x196>
100171ec:	e76f      	b.n	100170ce <_vfiprintf_r+0x76>
100171ee:	9309      	str	r3, [sp, #36]	; 0x24
100171f0:	e76d      	b.n	100170ce <_vfiprintf_r+0x76>
100171f2:	7863      	ldrb	r3, [r4, #1]
100171f4:	2b2a      	cmp	r3, #42	; 0x2a
100171f6:	d10a      	bne.n	1001720e <_vfiprintf_r+0x1b6>
100171f8:	9b05      	ldr	r3, [sp, #20]
100171fa:	3402      	adds	r4, #2
100171fc:	1d1a      	adds	r2, r3, #4
100171fe:	681b      	ldr	r3, [r3, #0]
10017200:	9205      	str	r2, [sp, #20]
10017202:	2b00      	cmp	r3, #0
10017204:	da01      	bge.n	1001720a <_vfiprintf_r+0x1b2>
10017206:	2301      	movs	r3, #1
10017208:	425b      	negs	r3, r3
1001720a:	9307      	str	r3, [sp, #28]
1001720c:	e763      	b.n	100170d6 <_vfiprintf_r+0x7e>
1001720e:	2300      	movs	r3, #0
10017210:	200a      	movs	r0, #10
10017212:	001a      	movs	r2, r3
10017214:	3401      	adds	r4, #1
10017216:	606b      	str	r3, [r5, #4]
10017218:	7821      	ldrb	r1, [r4, #0]
1001721a:	3930      	subs	r1, #48	; 0x30
1001721c:	2909      	cmp	r1, #9
1001721e:	d804      	bhi.n	1001722a <_vfiprintf_r+0x1d2>
10017220:	4342      	muls	r2, r0
10017222:	3401      	adds	r4, #1
10017224:	1852      	adds	r2, r2, r1
10017226:	2301      	movs	r3, #1
10017228:	e7f6      	b.n	10017218 <_vfiprintf_r+0x1c0>
1001722a:	2b00      	cmp	r3, #0
1001722c:	d100      	bne.n	10017230 <_vfiprintf_r+0x1d8>
1001722e:	e752      	b.n	100170d6 <_vfiprintf_r+0x7e>
10017230:	9207      	str	r2, [sp, #28]
10017232:	e750      	b.n	100170d6 <_vfiprintf_r+0x7e>
10017234:	ab05      	add	r3, sp, #20
10017236:	9300      	str	r3, [sp, #0]
10017238:	003a      	movs	r2, r7
1001723a:	4b14      	ldr	r3, [pc, #80]	; (1001728c <_vfiprintf_r+0x234>)
1001723c:	0029      	movs	r1, r5
1001723e:	0030      	movs	r0, r6
10017240:	e000      	b.n	10017244 <_vfiprintf_r+0x1ec>
10017242:	bf00      	nop
10017244:	e007      	b.n	10017256 <_vfiprintf_r+0x1fe>
10017246:	ab05      	add	r3, sp, #20
10017248:	9300      	str	r3, [sp, #0]
1001724a:	003a      	movs	r2, r7
1001724c:	4b0f      	ldr	r3, [pc, #60]	; (1001728c <_vfiprintf_r+0x234>)
1001724e:	0029      	movs	r1, r5
10017250:	0030      	movs	r0, r6
10017252:	f000 f88b 	bl	1001736c <_printf_i>
10017256:	9003      	str	r0, [sp, #12]
10017258:	9b03      	ldr	r3, [sp, #12]
1001725a:	3301      	adds	r3, #1
1001725c:	d000      	beq.n	10017260 <_vfiprintf_r+0x208>
1001725e:	e75e      	b.n	1001711e <_vfiprintf_r+0xc6>
10017260:	89bb      	ldrh	r3, [r7, #12]
10017262:	065b      	lsls	r3, r3, #25
10017264:	d500      	bpl.n	10017268 <_vfiprintf_r+0x210>
10017266:	e726      	b.n	100170b6 <_vfiprintf_r+0x5e>
10017268:	980b      	ldr	r0, [sp, #44]	; 0x2c
1001726a:	b01f      	add	sp, #124	; 0x7c
1001726c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001726e:	46c0      	nop			; (mov r8, r8)
10017270:	10018820 	.word	0x10018820
10017274:	10018840 	.word	0x10018840
10017278:	10018860 	.word	0x10018860
1001727c:	10018886 	.word	0x10018886
10017280:	1001888a 	.word	0x1001888a
10017284:	00000000 	.word	0x00000000
10017288:	10018880 	.word	0x10018880
1001728c:	10017033 	.word	0x10017033

10017290 <_printf_common>:
10017290:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10017292:	0017      	movs	r7, r2
10017294:	9301      	str	r3, [sp, #4]
10017296:	688a      	ldr	r2, [r1, #8]
10017298:	690b      	ldr	r3, [r1, #16]
1001729a:	9000      	str	r0, [sp, #0]
1001729c:	000c      	movs	r4, r1
1001729e:	4293      	cmp	r3, r2
100172a0:	da00      	bge.n	100172a4 <_printf_common+0x14>
100172a2:	0013      	movs	r3, r2
100172a4:	0022      	movs	r2, r4
100172a6:	603b      	str	r3, [r7, #0]
100172a8:	3243      	adds	r2, #67	; 0x43
100172aa:	7812      	ldrb	r2, [r2, #0]
100172ac:	2a00      	cmp	r2, #0
100172ae:	d001      	beq.n	100172b4 <_printf_common+0x24>
100172b0:	3301      	adds	r3, #1
100172b2:	603b      	str	r3, [r7, #0]
100172b4:	6823      	ldr	r3, [r4, #0]
100172b6:	069b      	lsls	r3, r3, #26
100172b8:	d502      	bpl.n	100172c0 <_printf_common+0x30>
100172ba:	683b      	ldr	r3, [r7, #0]
100172bc:	3302      	adds	r3, #2
100172be:	603b      	str	r3, [r7, #0]
100172c0:	2506      	movs	r5, #6
100172c2:	6823      	ldr	r3, [r4, #0]
100172c4:	401d      	ands	r5, r3
100172c6:	d01e      	beq.n	10017306 <_printf_common+0x76>
100172c8:	0023      	movs	r3, r4
100172ca:	3343      	adds	r3, #67	; 0x43
100172cc:	781b      	ldrb	r3, [r3, #0]
100172ce:	1e5a      	subs	r2, r3, #1
100172d0:	4193      	sbcs	r3, r2
100172d2:	6822      	ldr	r2, [r4, #0]
100172d4:	0692      	lsls	r2, r2, #26
100172d6:	d51c      	bpl.n	10017312 <_printf_common+0x82>
100172d8:	2030      	movs	r0, #48	; 0x30
100172da:	18e1      	adds	r1, r4, r3
100172dc:	3143      	adds	r1, #67	; 0x43
100172de:	7008      	strb	r0, [r1, #0]
100172e0:	0021      	movs	r1, r4
100172e2:	1c5a      	adds	r2, r3, #1
100172e4:	3145      	adds	r1, #69	; 0x45
100172e6:	7809      	ldrb	r1, [r1, #0]
100172e8:	18a2      	adds	r2, r4, r2
100172ea:	3243      	adds	r2, #67	; 0x43
100172ec:	3302      	adds	r3, #2
100172ee:	7011      	strb	r1, [r2, #0]
100172f0:	e00f      	b.n	10017312 <_printf_common+0x82>
100172f2:	0022      	movs	r2, r4
100172f4:	2301      	movs	r3, #1
100172f6:	3219      	adds	r2, #25
100172f8:	9901      	ldr	r1, [sp, #4]
100172fa:	9800      	ldr	r0, [sp, #0]
100172fc:	9e08      	ldr	r6, [sp, #32]
100172fe:	47b0      	blx	r6
10017300:	1c43      	adds	r3, r0, #1
10017302:	d00e      	beq.n	10017322 <_printf_common+0x92>
10017304:	3501      	adds	r5, #1
10017306:	68e3      	ldr	r3, [r4, #12]
10017308:	683a      	ldr	r2, [r7, #0]
1001730a:	1a9b      	subs	r3, r3, r2
1001730c:	429d      	cmp	r5, r3
1001730e:	dbf0      	blt.n	100172f2 <_printf_common+0x62>
10017310:	e7da      	b.n	100172c8 <_printf_common+0x38>
10017312:	0022      	movs	r2, r4
10017314:	9901      	ldr	r1, [sp, #4]
10017316:	3243      	adds	r2, #67	; 0x43
10017318:	9800      	ldr	r0, [sp, #0]
1001731a:	9d08      	ldr	r5, [sp, #32]
1001731c:	47a8      	blx	r5
1001731e:	1c43      	adds	r3, r0, #1
10017320:	d102      	bne.n	10017328 <_printf_common+0x98>
10017322:	2001      	movs	r0, #1
10017324:	4240      	negs	r0, r0
10017326:	e020      	b.n	1001736a <_printf_common+0xda>
10017328:	2306      	movs	r3, #6
1001732a:	6820      	ldr	r0, [r4, #0]
1001732c:	68e1      	ldr	r1, [r4, #12]
1001732e:	683a      	ldr	r2, [r7, #0]
10017330:	4003      	ands	r3, r0
10017332:	2500      	movs	r5, #0
10017334:	2b04      	cmp	r3, #4
10017336:	d103      	bne.n	10017340 <_printf_common+0xb0>
10017338:	1a8d      	subs	r5, r1, r2
1001733a:	43eb      	mvns	r3, r5
1001733c:	17db      	asrs	r3, r3, #31
1001733e:	401d      	ands	r5, r3
10017340:	68a3      	ldr	r3, [r4, #8]
10017342:	6922      	ldr	r2, [r4, #16]
10017344:	4293      	cmp	r3, r2
10017346:	dd01      	ble.n	1001734c <_printf_common+0xbc>
10017348:	1a9b      	subs	r3, r3, r2
1001734a:	18ed      	adds	r5, r5, r3
1001734c:	2700      	movs	r7, #0
1001734e:	42bd      	cmp	r5, r7
10017350:	d00a      	beq.n	10017368 <_printf_common+0xd8>
10017352:	0022      	movs	r2, r4
10017354:	2301      	movs	r3, #1
10017356:	321a      	adds	r2, #26
10017358:	9901      	ldr	r1, [sp, #4]
1001735a:	9800      	ldr	r0, [sp, #0]
1001735c:	9e08      	ldr	r6, [sp, #32]
1001735e:	47b0      	blx	r6
10017360:	1c43      	adds	r3, r0, #1
10017362:	d0de      	beq.n	10017322 <_printf_common+0x92>
10017364:	3701      	adds	r7, #1
10017366:	e7f2      	b.n	1001734e <_printf_common+0xbe>
10017368:	2000      	movs	r0, #0
1001736a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1001736c <_printf_i>:
1001736c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001736e:	b08b      	sub	sp, #44	; 0x2c
10017370:	9206      	str	r2, [sp, #24]
10017372:	000a      	movs	r2, r1
10017374:	3243      	adds	r2, #67	; 0x43
10017376:	9307      	str	r3, [sp, #28]
10017378:	9005      	str	r0, [sp, #20]
1001737a:	9204      	str	r2, [sp, #16]
1001737c:	7e0a      	ldrb	r2, [r1, #24]
1001737e:	000c      	movs	r4, r1
10017380:	9b10      	ldr	r3, [sp, #64]	; 0x40
10017382:	2a6e      	cmp	r2, #110	; 0x6e
10017384:	d100      	bne.n	10017388 <_printf_i+0x1c>
10017386:	e0ab      	b.n	100174e0 <_printf_i+0x174>
10017388:	d811      	bhi.n	100173ae <_printf_i+0x42>
1001738a:	2a63      	cmp	r2, #99	; 0x63
1001738c:	d022      	beq.n	100173d4 <_printf_i+0x68>
1001738e:	d809      	bhi.n	100173a4 <_printf_i+0x38>
10017390:	2a00      	cmp	r2, #0
10017392:	d100      	bne.n	10017396 <_printf_i+0x2a>
10017394:	e0b5      	b.n	10017502 <_printf_i+0x196>
10017396:	2a58      	cmp	r2, #88	; 0x58
10017398:	d000      	beq.n	1001739c <_printf_i+0x30>
1001739a:	e0c5      	b.n	10017528 <_printf_i+0x1bc>
1001739c:	3145      	adds	r1, #69	; 0x45
1001739e:	700a      	strb	r2, [r1, #0]
100173a0:	4a81      	ldr	r2, [pc, #516]	; (100175a8 <_printf_i+0x23c>)
100173a2:	e04f      	b.n	10017444 <_printf_i+0xd8>
100173a4:	2a64      	cmp	r2, #100	; 0x64
100173a6:	d01d      	beq.n	100173e4 <_printf_i+0x78>
100173a8:	2a69      	cmp	r2, #105	; 0x69
100173aa:	d01b      	beq.n	100173e4 <_printf_i+0x78>
100173ac:	e0bc      	b.n	10017528 <_printf_i+0x1bc>
100173ae:	2a73      	cmp	r2, #115	; 0x73
100173b0:	d100      	bne.n	100173b4 <_printf_i+0x48>
100173b2:	e0aa      	b.n	1001750a <_printf_i+0x19e>
100173b4:	d809      	bhi.n	100173ca <_printf_i+0x5e>
100173b6:	2a6f      	cmp	r2, #111	; 0x6f
100173b8:	d029      	beq.n	1001740e <_printf_i+0xa2>
100173ba:	2a70      	cmp	r2, #112	; 0x70
100173bc:	d000      	beq.n	100173c0 <_printf_i+0x54>
100173be:	e0b3      	b.n	10017528 <_printf_i+0x1bc>
100173c0:	2220      	movs	r2, #32
100173c2:	6809      	ldr	r1, [r1, #0]
100173c4:	430a      	orrs	r2, r1
100173c6:	6022      	str	r2, [r4, #0]
100173c8:	e037      	b.n	1001743a <_printf_i+0xce>
100173ca:	2a75      	cmp	r2, #117	; 0x75
100173cc:	d01f      	beq.n	1001740e <_printf_i+0xa2>
100173ce:	2a78      	cmp	r2, #120	; 0x78
100173d0:	d033      	beq.n	1001743a <_printf_i+0xce>
100173d2:	e0a9      	b.n	10017528 <_printf_i+0x1bc>
100173d4:	000e      	movs	r6, r1
100173d6:	681a      	ldr	r2, [r3, #0]
100173d8:	3642      	adds	r6, #66	; 0x42
100173da:	1d11      	adds	r1, r2, #4
100173dc:	6019      	str	r1, [r3, #0]
100173de:	6813      	ldr	r3, [r2, #0]
100173e0:	7033      	strb	r3, [r6, #0]
100173e2:	e0a4      	b.n	1001752e <_printf_i+0x1c2>
100173e4:	6821      	ldr	r1, [r4, #0]
100173e6:	681a      	ldr	r2, [r3, #0]
100173e8:	0608      	lsls	r0, r1, #24
100173ea:	d406      	bmi.n	100173fa <_printf_i+0x8e>
100173ec:	0649      	lsls	r1, r1, #25
100173ee:	d504      	bpl.n	100173fa <_printf_i+0x8e>
100173f0:	1d11      	adds	r1, r2, #4
100173f2:	6019      	str	r1, [r3, #0]
100173f4:	2300      	movs	r3, #0
100173f6:	5ed5      	ldrsh	r5, [r2, r3]
100173f8:	e002      	b.n	10017400 <_printf_i+0x94>
100173fa:	1d11      	adds	r1, r2, #4
100173fc:	6019      	str	r1, [r3, #0]
100173fe:	6815      	ldr	r5, [r2, #0]
10017400:	2d00      	cmp	r5, #0
10017402:	da3b      	bge.n	1001747c <_printf_i+0x110>
10017404:	232d      	movs	r3, #45	; 0x2d
10017406:	9a04      	ldr	r2, [sp, #16]
10017408:	426d      	negs	r5, r5
1001740a:	7013      	strb	r3, [r2, #0]
1001740c:	e036      	b.n	1001747c <_printf_i+0x110>
1001740e:	6821      	ldr	r1, [r4, #0]
10017410:	681a      	ldr	r2, [r3, #0]
10017412:	0608      	lsls	r0, r1, #24
10017414:	d406      	bmi.n	10017424 <_printf_i+0xb8>
10017416:	0649      	lsls	r1, r1, #25
10017418:	d504      	bpl.n	10017424 <_printf_i+0xb8>
1001741a:	6815      	ldr	r5, [r2, #0]
1001741c:	1d11      	adds	r1, r2, #4
1001741e:	6019      	str	r1, [r3, #0]
10017420:	b2ad      	uxth	r5, r5
10017422:	e002      	b.n	1001742a <_printf_i+0xbe>
10017424:	1d11      	adds	r1, r2, #4
10017426:	6019      	str	r1, [r3, #0]
10017428:	6815      	ldr	r5, [r2, #0]
1001742a:	4b5f      	ldr	r3, [pc, #380]	; (100175a8 <_printf_i+0x23c>)
1001742c:	7e22      	ldrb	r2, [r4, #24]
1001742e:	9303      	str	r3, [sp, #12]
10017430:	2708      	movs	r7, #8
10017432:	2a6f      	cmp	r2, #111	; 0x6f
10017434:	d01d      	beq.n	10017472 <_printf_i+0x106>
10017436:	270a      	movs	r7, #10
10017438:	e01b      	b.n	10017472 <_printf_i+0x106>
1001743a:	0022      	movs	r2, r4
1001743c:	2178      	movs	r1, #120	; 0x78
1001743e:	3245      	adds	r2, #69	; 0x45
10017440:	7011      	strb	r1, [r2, #0]
10017442:	4a5a      	ldr	r2, [pc, #360]	; (100175ac <_printf_i+0x240>)
10017444:	6819      	ldr	r1, [r3, #0]
10017446:	9203      	str	r2, [sp, #12]
10017448:	1d08      	adds	r0, r1, #4
1001744a:	6822      	ldr	r2, [r4, #0]
1001744c:	6018      	str	r0, [r3, #0]
1001744e:	680d      	ldr	r5, [r1, #0]
10017450:	0610      	lsls	r0, r2, #24
10017452:	d402      	bmi.n	1001745a <_printf_i+0xee>
10017454:	0650      	lsls	r0, r2, #25
10017456:	d500      	bpl.n	1001745a <_printf_i+0xee>
10017458:	b2ad      	uxth	r5, r5
1001745a:	07d3      	lsls	r3, r2, #31
1001745c:	d502      	bpl.n	10017464 <_printf_i+0xf8>
1001745e:	2320      	movs	r3, #32
10017460:	431a      	orrs	r2, r3
10017462:	6022      	str	r2, [r4, #0]
10017464:	2710      	movs	r7, #16
10017466:	2d00      	cmp	r5, #0
10017468:	d103      	bne.n	10017472 <_printf_i+0x106>
1001746a:	2320      	movs	r3, #32
1001746c:	6822      	ldr	r2, [r4, #0]
1001746e:	439a      	bics	r2, r3
10017470:	6022      	str	r2, [r4, #0]
10017472:	0023      	movs	r3, r4
10017474:	2200      	movs	r2, #0
10017476:	3343      	adds	r3, #67	; 0x43
10017478:	701a      	strb	r2, [r3, #0]
1001747a:	e002      	b.n	10017482 <_printf_i+0x116>
1001747c:	270a      	movs	r7, #10
1001747e:	4b4a      	ldr	r3, [pc, #296]	; (100175a8 <_printf_i+0x23c>)
10017480:	9303      	str	r3, [sp, #12]
10017482:	6863      	ldr	r3, [r4, #4]
10017484:	60a3      	str	r3, [r4, #8]
10017486:	2b00      	cmp	r3, #0
10017488:	db09      	blt.n	1001749e <_printf_i+0x132>
1001748a:	2204      	movs	r2, #4
1001748c:	6821      	ldr	r1, [r4, #0]
1001748e:	4391      	bics	r1, r2
10017490:	6021      	str	r1, [r4, #0]
10017492:	2d00      	cmp	r5, #0
10017494:	d105      	bne.n	100174a2 <_printf_i+0x136>
10017496:	9e04      	ldr	r6, [sp, #16]
10017498:	2b00      	cmp	r3, #0
1001749a:	d011      	beq.n	100174c0 <_printf_i+0x154>
1001749c:	e07b      	b.n	10017596 <_printf_i+0x22a>
1001749e:	2d00      	cmp	r5, #0
100174a0:	d079      	beq.n	10017596 <_printf_i+0x22a>
100174a2:	9e04      	ldr	r6, [sp, #16]
100174a4:	0028      	movs	r0, r5
100174a6:	0039      	movs	r1, r7
100174a8:	f7fc f910 	bl	100136cc <__aeabi_uidivmod>
100174ac:	9b03      	ldr	r3, [sp, #12]
100174ae:	3e01      	subs	r6, #1
100174b0:	5c5b      	ldrb	r3, [r3, r1]
100174b2:	0028      	movs	r0, r5
100174b4:	7033      	strb	r3, [r6, #0]
100174b6:	0039      	movs	r1, r7
100174b8:	f7fc f882 	bl	100135c0 <__aeabi_uidiv>
100174bc:	1e05      	subs	r5, r0, #0
100174be:	d1f1      	bne.n	100174a4 <_printf_i+0x138>
100174c0:	2f08      	cmp	r7, #8
100174c2:	d109      	bne.n	100174d8 <_printf_i+0x16c>
100174c4:	6823      	ldr	r3, [r4, #0]
100174c6:	07db      	lsls	r3, r3, #31
100174c8:	d506      	bpl.n	100174d8 <_printf_i+0x16c>
100174ca:	6863      	ldr	r3, [r4, #4]
100174cc:	6922      	ldr	r2, [r4, #16]
100174ce:	4293      	cmp	r3, r2
100174d0:	dc02      	bgt.n	100174d8 <_printf_i+0x16c>
100174d2:	2330      	movs	r3, #48	; 0x30
100174d4:	3e01      	subs	r6, #1
100174d6:	7033      	strb	r3, [r6, #0]
100174d8:	9b04      	ldr	r3, [sp, #16]
100174da:	1b9b      	subs	r3, r3, r6
100174dc:	6123      	str	r3, [r4, #16]
100174de:	e02b      	b.n	10017538 <_printf_i+0x1cc>
100174e0:	6809      	ldr	r1, [r1, #0]
100174e2:	681a      	ldr	r2, [r3, #0]
100174e4:	0608      	lsls	r0, r1, #24
100174e6:	d407      	bmi.n	100174f8 <_printf_i+0x18c>
100174e8:	0649      	lsls	r1, r1, #25
100174ea:	d505      	bpl.n	100174f8 <_printf_i+0x18c>
100174ec:	1d11      	adds	r1, r2, #4
100174ee:	6019      	str	r1, [r3, #0]
100174f0:	6813      	ldr	r3, [r2, #0]
100174f2:	8aa2      	ldrh	r2, [r4, #20]
100174f4:	801a      	strh	r2, [r3, #0]
100174f6:	e004      	b.n	10017502 <_printf_i+0x196>
100174f8:	1d11      	adds	r1, r2, #4
100174fa:	6019      	str	r1, [r3, #0]
100174fc:	6813      	ldr	r3, [r2, #0]
100174fe:	6962      	ldr	r2, [r4, #20]
10017500:	601a      	str	r2, [r3, #0]
10017502:	2300      	movs	r3, #0
10017504:	9e04      	ldr	r6, [sp, #16]
10017506:	6123      	str	r3, [r4, #16]
10017508:	e016      	b.n	10017538 <_printf_i+0x1cc>
1001750a:	681a      	ldr	r2, [r3, #0]
1001750c:	1d11      	adds	r1, r2, #4
1001750e:	6019      	str	r1, [r3, #0]
10017510:	6816      	ldr	r6, [r2, #0]
10017512:	2100      	movs	r1, #0
10017514:	6862      	ldr	r2, [r4, #4]
10017516:	0030      	movs	r0, r6
10017518:	f000 f92a 	bl	10017770 <memchr>
1001751c:	2800      	cmp	r0, #0
1001751e:	d001      	beq.n	10017524 <_printf_i+0x1b8>
10017520:	1b80      	subs	r0, r0, r6
10017522:	6060      	str	r0, [r4, #4]
10017524:	6863      	ldr	r3, [r4, #4]
10017526:	e003      	b.n	10017530 <_printf_i+0x1c4>
10017528:	0026      	movs	r6, r4
1001752a:	3642      	adds	r6, #66	; 0x42
1001752c:	7032      	strb	r2, [r6, #0]
1001752e:	2301      	movs	r3, #1
10017530:	6123      	str	r3, [r4, #16]
10017532:	2300      	movs	r3, #0
10017534:	9a04      	ldr	r2, [sp, #16]
10017536:	7013      	strb	r3, [r2, #0]
10017538:	9b07      	ldr	r3, [sp, #28]
1001753a:	aa09      	add	r2, sp, #36	; 0x24
1001753c:	9300      	str	r3, [sp, #0]
1001753e:	0021      	movs	r1, r4
10017540:	9b06      	ldr	r3, [sp, #24]
10017542:	9805      	ldr	r0, [sp, #20]
10017544:	f7ff fea4 	bl	10017290 <_printf_common>
10017548:	1c43      	adds	r3, r0, #1
1001754a:	d102      	bne.n	10017552 <_printf_i+0x1e6>
1001754c:	2001      	movs	r0, #1
1001754e:	4240      	negs	r0, r0
10017550:	e027      	b.n	100175a2 <_printf_i+0x236>
10017552:	6923      	ldr	r3, [r4, #16]
10017554:	0032      	movs	r2, r6
10017556:	9906      	ldr	r1, [sp, #24]
10017558:	9805      	ldr	r0, [sp, #20]
1001755a:	9d07      	ldr	r5, [sp, #28]
1001755c:	47a8      	blx	r5
1001755e:	1c43      	adds	r3, r0, #1
10017560:	d0f4      	beq.n	1001754c <_printf_i+0x1e0>
10017562:	6823      	ldr	r3, [r4, #0]
10017564:	2500      	movs	r5, #0
10017566:	079b      	lsls	r3, r3, #30
10017568:	d40f      	bmi.n	1001758a <_printf_i+0x21e>
1001756a:	9b09      	ldr	r3, [sp, #36]	; 0x24
1001756c:	68e0      	ldr	r0, [r4, #12]
1001756e:	4298      	cmp	r0, r3
10017570:	da17      	bge.n	100175a2 <_printf_i+0x236>
10017572:	0018      	movs	r0, r3
10017574:	e015      	b.n	100175a2 <_printf_i+0x236>
10017576:	0022      	movs	r2, r4
10017578:	2301      	movs	r3, #1
1001757a:	3219      	adds	r2, #25
1001757c:	9906      	ldr	r1, [sp, #24]
1001757e:	9805      	ldr	r0, [sp, #20]
10017580:	9e07      	ldr	r6, [sp, #28]
10017582:	47b0      	blx	r6
10017584:	1c43      	adds	r3, r0, #1
10017586:	d0e1      	beq.n	1001754c <_printf_i+0x1e0>
10017588:	3501      	adds	r5, #1
1001758a:	68e3      	ldr	r3, [r4, #12]
1001758c:	9a09      	ldr	r2, [sp, #36]	; 0x24
1001758e:	1a9b      	subs	r3, r3, r2
10017590:	429d      	cmp	r5, r3
10017592:	dbf0      	blt.n	10017576 <_printf_i+0x20a>
10017594:	e7e9      	b.n	1001756a <_printf_i+0x1fe>
10017596:	0026      	movs	r6, r4
10017598:	9b03      	ldr	r3, [sp, #12]
1001759a:	3642      	adds	r6, #66	; 0x42
1001759c:	781b      	ldrb	r3, [r3, #0]
1001759e:	7033      	strb	r3, [r6, #0]
100175a0:	e78e      	b.n	100174c0 <_printf_i+0x154>
100175a2:	b00b      	add	sp, #44	; 0x2c
100175a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100175a6:	46c0      	nop			; (mov r8, r8)
100175a8:	10018891 	.word	0x10018891
100175ac:	100188a2 	.word	0x100188a2

100175b0 <_putc_r>:
100175b0:	b570      	push	{r4, r5, r6, lr}
100175b2:	0006      	movs	r6, r0
100175b4:	000d      	movs	r5, r1
100175b6:	0014      	movs	r4, r2
100175b8:	2800      	cmp	r0, #0
100175ba:	d004      	beq.n	100175c6 <_putc_r+0x16>
100175bc:	6983      	ldr	r3, [r0, #24]
100175be:	2b00      	cmp	r3, #0
100175c0:	d101      	bne.n	100175c6 <_putc_r+0x16>
100175c2:	f7ff fc29 	bl	10016e18 <__sinit>
100175c6:	4b12      	ldr	r3, [pc, #72]	; (10017610 <_putc_r+0x60>)
100175c8:	429c      	cmp	r4, r3
100175ca:	d101      	bne.n	100175d0 <_putc_r+0x20>
100175cc:	6874      	ldr	r4, [r6, #4]
100175ce:	e008      	b.n	100175e2 <_putc_r+0x32>
100175d0:	4b10      	ldr	r3, [pc, #64]	; (10017614 <_putc_r+0x64>)
100175d2:	429c      	cmp	r4, r3
100175d4:	d101      	bne.n	100175da <_putc_r+0x2a>
100175d6:	68b4      	ldr	r4, [r6, #8]
100175d8:	e003      	b.n	100175e2 <_putc_r+0x32>
100175da:	4b0f      	ldr	r3, [pc, #60]	; (10017618 <_putc_r+0x68>)
100175dc:	429c      	cmp	r4, r3
100175de:	d100      	bne.n	100175e2 <_putc_r+0x32>
100175e0:	68f4      	ldr	r4, [r6, #12]
100175e2:	68a3      	ldr	r3, [r4, #8]
100175e4:	3b01      	subs	r3, #1
100175e6:	60a3      	str	r3, [r4, #8]
100175e8:	2b00      	cmp	r3, #0
100175ea:	da05      	bge.n	100175f8 <_putc_r+0x48>
100175ec:	69a2      	ldr	r2, [r4, #24]
100175ee:	4293      	cmp	r3, r2
100175f0:	db08      	blt.n	10017604 <_putc_r+0x54>
100175f2:	b2eb      	uxtb	r3, r5
100175f4:	2b0a      	cmp	r3, #10
100175f6:	d005      	beq.n	10017604 <_putc_r+0x54>
100175f8:	6823      	ldr	r3, [r4, #0]
100175fa:	b2e8      	uxtb	r0, r5
100175fc:	1c5a      	adds	r2, r3, #1
100175fe:	6022      	str	r2, [r4, #0]
10017600:	701d      	strb	r5, [r3, #0]
10017602:	e004      	b.n	1001760e <_putc_r+0x5e>
10017604:	0022      	movs	r2, r4
10017606:	0029      	movs	r1, r5
10017608:	0030      	movs	r0, r6
1001760a:	f7ff fa43 	bl	10016a94 <__swbuf_r>
1001760e:	bd70      	pop	{r4, r5, r6, pc}
10017610:	10018820 	.word	0x10018820
10017614:	10018840 	.word	0x10018840
10017618:	10018860 	.word	0x10018860

1001761c <__sread>:
1001761c:	b570      	push	{r4, r5, r6, lr}
1001761e:	000c      	movs	r4, r1
10017620:	250e      	movs	r5, #14
10017622:	5f49      	ldrsh	r1, [r1, r5]
10017624:	f000 f8b0 	bl	10017788 <_read_r>
10017628:	2800      	cmp	r0, #0
1001762a:	db03      	blt.n	10017634 <__sread+0x18>
1001762c:	6d63      	ldr	r3, [r4, #84]	; 0x54
1001762e:	181b      	adds	r3, r3, r0
10017630:	6563      	str	r3, [r4, #84]	; 0x54
10017632:	e003      	b.n	1001763c <__sread+0x20>
10017634:	89a2      	ldrh	r2, [r4, #12]
10017636:	4b02      	ldr	r3, [pc, #8]	; (10017640 <__sread+0x24>)
10017638:	4013      	ands	r3, r2
1001763a:	81a3      	strh	r3, [r4, #12]
1001763c:	bd70      	pop	{r4, r5, r6, pc}
1001763e:	46c0      	nop			; (mov r8, r8)
10017640:	ffffefff 	.word	0xffffefff

10017644 <__swrite>:
10017644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10017646:	001f      	movs	r7, r3
10017648:	898b      	ldrh	r3, [r1, #12]
1001764a:	0005      	movs	r5, r0
1001764c:	000c      	movs	r4, r1
1001764e:	0016      	movs	r6, r2
10017650:	05db      	lsls	r3, r3, #23
10017652:	d505      	bpl.n	10017660 <__swrite+0x1c>
10017654:	230e      	movs	r3, #14
10017656:	5ec9      	ldrsh	r1, [r1, r3]
10017658:	2200      	movs	r2, #0
1001765a:	2302      	movs	r3, #2
1001765c:	f000 f874 	bl	10017748 <_lseek_r>
10017660:	89a2      	ldrh	r2, [r4, #12]
10017662:	4b05      	ldr	r3, [pc, #20]	; (10017678 <__swrite+0x34>)
10017664:	0028      	movs	r0, r5
10017666:	4013      	ands	r3, r2
10017668:	81a3      	strh	r3, [r4, #12]
1001766a:	0032      	movs	r2, r6
1001766c:	230e      	movs	r3, #14
1001766e:	5ee1      	ldrsh	r1, [r4, r3]
10017670:	003b      	movs	r3, r7
10017672:	f000 f81f 	bl	100176b4 <_write_r>
10017676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10017678:	ffffefff 	.word	0xffffefff

1001767c <__sseek>:
1001767c:	b570      	push	{r4, r5, r6, lr}
1001767e:	000c      	movs	r4, r1
10017680:	250e      	movs	r5, #14
10017682:	5f49      	ldrsh	r1, [r1, r5]
10017684:	f000 f860 	bl	10017748 <_lseek_r>
10017688:	89a3      	ldrh	r3, [r4, #12]
1001768a:	1c42      	adds	r2, r0, #1
1001768c:	d103      	bne.n	10017696 <__sseek+0x1a>
1001768e:	4a05      	ldr	r2, [pc, #20]	; (100176a4 <__sseek+0x28>)
10017690:	4013      	ands	r3, r2
10017692:	81a3      	strh	r3, [r4, #12]
10017694:	e004      	b.n	100176a0 <__sseek+0x24>
10017696:	2280      	movs	r2, #128	; 0x80
10017698:	0152      	lsls	r2, r2, #5
1001769a:	4313      	orrs	r3, r2
1001769c:	81a3      	strh	r3, [r4, #12]
1001769e:	6560      	str	r0, [r4, #84]	; 0x54
100176a0:	bd70      	pop	{r4, r5, r6, pc}
100176a2:	46c0      	nop			; (mov r8, r8)
100176a4:	ffffefff 	.word	0xffffefff

100176a8 <__sclose>:
100176a8:	b510      	push	{r4, lr}
100176aa:	230e      	movs	r3, #14
100176ac:	5ec9      	ldrsh	r1, [r1, r3]
100176ae:	f000 f815 	bl	100176dc <_close_r>
100176b2:	bd10      	pop	{r4, pc}

100176b4 <_write_r>:
100176b4:	b570      	push	{r4, r5, r6, lr}
100176b6:	0005      	movs	r5, r0
100176b8:	0008      	movs	r0, r1
100176ba:	0011      	movs	r1, r2
100176bc:	2200      	movs	r2, #0
100176be:	4c06      	ldr	r4, [pc, #24]	; (100176d8 <_write_r+0x24>)
100176c0:	6022      	str	r2, [r4, #0]
100176c2:	001a      	movs	r2, r3
100176c4:	f7f5 fb64 	bl	1000cd90 <_write>
100176c8:	1c43      	adds	r3, r0, #1
100176ca:	d103      	bne.n	100176d4 <_write_r+0x20>
100176cc:	6823      	ldr	r3, [r4, #0]
100176ce:	2b00      	cmp	r3, #0
100176d0:	d000      	beq.n	100176d4 <_write_r+0x20>
100176d2:	602b      	str	r3, [r5, #0]
100176d4:	bd70      	pop	{r4, r5, r6, pc}
100176d6:	46c0      	nop			; (mov r8, r8)
100176d8:	1001b840 	.word	0x1001b840

100176dc <_close_r>:
100176dc:	2300      	movs	r3, #0
100176de:	b570      	push	{r4, r5, r6, lr}
100176e0:	4c06      	ldr	r4, [pc, #24]	; (100176fc <_close_r+0x20>)
100176e2:	0005      	movs	r5, r0
100176e4:	0008      	movs	r0, r1
100176e6:	6023      	str	r3, [r4, #0]
100176e8:	f7f0 fe9a 	bl	10008420 <_close>
100176ec:	1c43      	adds	r3, r0, #1
100176ee:	d103      	bne.n	100176f8 <_close_r+0x1c>
100176f0:	6823      	ldr	r3, [r4, #0]
100176f2:	2b00      	cmp	r3, #0
100176f4:	d000      	beq.n	100176f8 <_close_r+0x1c>
100176f6:	602b      	str	r3, [r5, #0]
100176f8:	bd70      	pop	{r4, r5, r6, pc}
100176fa:	46c0      	nop			; (mov r8, r8)
100176fc:	1001b840 	.word	0x1001b840

10017700 <_fstat_r>:
10017700:	2300      	movs	r3, #0
10017702:	b570      	push	{r4, r5, r6, lr}
10017704:	4c06      	ldr	r4, [pc, #24]	; (10017720 <_fstat_r+0x20>)
10017706:	0005      	movs	r5, r0
10017708:	0008      	movs	r0, r1
1001770a:	0011      	movs	r1, r2
1001770c:	6023      	str	r3, [r4, #0]
1001770e:	f7f0 fe8b 	bl	10008428 <_fstat>
10017712:	1c43      	adds	r3, r0, #1
10017714:	d103      	bne.n	1001771e <_fstat_r+0x1e>
10017716:	6823      	ldr	r3, [r4, #0]
10017718:	2b00      	cmp	r3, #0
1001771a:	d000      	beq.n	1001771e <_fstat_r+0x1e>
1001771c:	602b      	str	r3, [r5, #0]
1001771e:	bd70      	pop	{r4, r5, r6, pc}
10017720:	1001b840 	.word	0x1001b840

10017724 <_isatty_r>:
10017724:	2300      	movs	r3, #0
10017726:	b570      	push	{r4, r5, r6, lr}
10017728:	4c06      	ldr	r4, [pc, #24]	; (10017744 <_isatty_r+0x20>)
1001772a:	0005      	movs	r5, r0
1001772c:	0008      	movs	r0, r1
1001772e:	6023      	str	r3, [r4, #0]
10017730:	f7f0 fe80 	bl	10008434 <_isatty>
10017734:	1c43      	adds	r3, r0, #1
10017736:	d103      	bne.n	10017740 <_isatty_r+0x1c>
10017738:	6823      	ldr	r3, [r4, #0]
1001773a:	2b00      	cmp	r3, #0
1001773c:	d000      	beq.n	10017740 <_isatty_r+0x1c>
1001773e:	602b      	str	r3, [r5, #0]
10017740:	bd70      	pop	{r4, r5, r6, pc}
10017742:	46c0      	nop			; (mov r8, r8)
10017744:	1001b840 	.word	0x1001b840

10017748 <_lseek_r>:
10017748:	b570      	push	{r4, r5, r6, lr}
1001774a:	0005      	movs	r5, r0
1001774c:	0008      	movs	r0, r1
1001774e:	0011      	movs	r1, r2
10017750:	2200      	movs	r2, #0
10017752:	4c06      	ldr	r4, [pc, #24]	; (1001776c <_lseek_r+0x24>)
10017754:	6022      	str	r2, [r4, #0]
10017756:	001a      	movs	r2, r3
10017758:	f7f0 fe6e 	bl	10008438 <_lseek>
1001775c:	1c43      	adds	r3, r0, #1
1001775e:	d103      	bne.n	10017768 <_lseek_r+0x20>
10017760:	6823      	ldr	r3, [r4, #0]
10017762:	2b00      	cmp	r3, #0
10017764:	d000      	beq.n	10017768 <_lseek_r+0x20>
10017766:	602b      	str	r3, [r5, #0]
10017768:	bd70      	pop	{r4, r5, r6, pc}
1001776a:	46c0      	nop			; (mov r8, r8)
1001776c:	1001b840 	.word	0x1001b840

10017770 <memchr>:
10017770:	b2c9      	uxtb	r1, r1
10017772:	1882      	adds	r2, r0, r2
10017774:	4290      	cmp	r0, r2
10017776:	d004      	beq.n	10017782 <memchr+0x12>
10017778:	7803      	ldrb	r3, [r0, #0]
1001777a:	428b      	cmp	r3, r1
1001777c:	d002      	beq.n	10017784 <memchr+0x14>
1001777e:	3001      	adds	r0, #1
10017780:	e7f8      	b.n	10017774 <memchr+0x4>
10017782:	2000      	movs	r0, #0
10017784:	4770      	bx	lr
	...

10017788 <_read_r>:
10017788:	b570      	push	{r4, r5, r6, lr}
1001778a:	0005      	movs	r5, r0
1001778c:	0008      	movs	r0, r1
1001778e:	0011      	movs	r1, r2
10017790:	2200      	movs	r2, #0
10017792:	4c06      	ldr	r4, [pc, #24]	; (100177ac <_read_r+0x24>)
10017794:	6022      	str	r2, [r4, #0]
10017796:	001a      	movs	r2, r3
10017798:	f7f5 fada 	bl	1000cd50 <_read>
1001779c:	1c43      	adds	r3, r0, #1
1001779e:	d103      	bne.n	100177a8 <_read_r+0x20>
100177a0:	6823      	ldr	r3, [r4, #0]
100177a2:	2b00      	cmp	r3, #0
100177a4:	d000      	beq.n	100177a8 <_read_r+0x20>
100177a6:	602b      	str	r3, [r5, #0]
100177a8:	bd70      	pop	{r4, r5, r6, pc}
100177aa:	46c0      	nop			; (mov r8, r8)
100177ac:	1001b840 	.word	0x1001b840
100177b0:	0000000d 	.word	0x0000000d
100177b4:	746c6544 	.word	0x746c6544
100177b8:	28667461 	.word	0x28667461
100177bc:	3d202969 	.word	0x3d202969
100177c0:	756c2520 	.word	0x756c2520
100177c4:	00000000 	.word	0x00000000
100177c8:	736d735b 	.word	0x736d735b
100177cc:	656c625f 	.word	0x656c625f
100177d0:	776f705f 	.word	0x776f705f
100177d4:	645f7265 	.word	0x645f7265
100177d8:	5d6e776f 	.word	0x5d6e776f
100177dc:	00000000 	.word	0x00000000
100177e0:	736d735b 	.word	0x736d735b
100177e4:	656c625f 	.word	0x656c625f
100177e8:	6961705f 	.word	0x6961705f
100177ec:	5f646572 	.word	0x5f646572
100177f0:	005d6e66 	.word	0x005d6e66
100177f4:	736d735b 	.word	0x736d735b
100177f8:	656c625f 	.word	0x656c625f
100177fc:	7664615f 	.word	0x7664615f
10017800:	69747265 	.word	0x69747265
10017804:	095d6573 	.word	0x095d6573
10017808:	65766441 	.word	0x65766441
1001780c:	73697472 	.word	0x73697472
10017810:	6e656d65 	.word	0x6e656d65
10017814:	61642074 	.word	0x61642074
10017818:	73206174 	.word	0x73206174
1001781c:	66207465 	.word	0x66207465
10017820:	656c6961 	.word	0x656c6961
10017824:	00002164 	.word	0x00002164
10017828:	736d735b 	.word	0x736d735b
1001782c:	7265735f 	.word	0x7265735f
10017830:	65636976 	.word	0x65636976
10017834:	7664615f 	.word	0x7664615f
10017838:	69747265 	.word	0x69747265
1001783c:	095d6573 	.word	0x095d6573
10017840:	20454c42 	.word	0x20454c42
10017844:	65766441 	.word	0x65766441
10017848:	73697472 	.word	0x73697472
1001784c:	6e656d65 	.word	0x6e656d65
10017850:	74732074 	.word	0x74732074
10017854:	20747261 	.word	0x20747261
10017858:	6c696166 	.word	0x6c696166
1001785c:	203a6465 	.word	0x203a6465
10017860:	73616572 	.word	0x73616572
10017864:	30206e6f 	.word	0x30206e6f
10017868:	00782578 	.word	0x00782578
1001786c:	49544f4e 	.word	0x49544f4e
10017870:	41434946 	.word	0x41434946
10017874:	4e4f4954 	.word	0x4e4f4954
10017878:	52524520 	.word	0x52524520
1001787c:	2121524f 	.word	0x2121524f
10017880:	00000000 	.word	0x00000000

10017884 <sms_ble_gap_cb>:
	...
10017890:	10008e95 00000000 10008ead 10008fa9     ................
	...
100178a8:	10008ee5 10008d21 00000000 00000000     ....!...........
	...

100178d0 <sms_ble_gatt_server_cb>:
100178d0:	10008d3d 10008d8d 00000000 00000000     =...............
	...
100178f8:	736d735b 7475625f 5f6e6f74 666e6f63     [sms_button_conf
10017908:	72756769 50095d65 6c626f72 77206d65     igure].Problem w
10017918:	656c6968 74657320 676e6974 20707520     hile setting up 
10017928:	74747562 00316e6f 736d735b 7475625f     button1.[sms_but
10017938:	5f6e6f74 666e6f63 72756769 50095d65     ton_configure].P
10017948:	6c626f72 77206d65 656c6968 74657320     roblem while set
10017958:	676e6974 20707520 414c5058 44454e49     ting up XPLAINED
10017968:	65737520 75622072 6e6f7474 00000000      user button....
10017978:	736d735b 7475625f 5f6e6f74 2d5d6e66     [sms_button_fn]-
10017988:	00000030 736d735b 7475625f 5f6e6f74     0...[sms_button_
10017998:	2d5d6e66 00000031 736d735b 7475625f     fn]-1...[sms_but
100179a8:	5f6e6f74 69666564 735f656e 69767265     ton_define_servi
100179b8:	5d736563 72655309 65636976 65642073     ces].Services de
100179c8:	696e6966 6620676e 656c6961 72202c64     fining failed, r
100179d8:	6f736165 7830206e 00007825 626f7250     eason 0x%x..Prob
100179e8:	206d656c 6c696877 65732065 6e697474     lem while settin
100179f8:	70672067 70206f69 00006e69 736d735b     g gpio pin..[sms
10017a08:	756d695f 6e6f635f 75676966 675f6572     _imu_configure_g
10017a18:	5d6f6970 6f725009 6d656c62 69687720     pio].Problem whi
10017a28:	7320656c 69747465 7520676e 4d492070     le setting up IM
10017a38:	52442055 70205944 00006e69 736d735b     U DRDY pin..[sms
10017a48:	75706d5f 6665645f 5f656e69 76726573     _mpu_define_serv
10017a58:	73656369 6553095d 63697672 64207365     ices].Services d
10017a68:	6e696665 20676e69 6c696166 202c6465     efining failed, 
10017a78:	73616572 30206e6f 00782578 2055504d     reason 0x%x.MPU 
10017a88:	696c6163 74617262 2e2e6465 6962202e     calibrated... bi
10017a98:	76207361 65756c61 25203a73 2520646c     as values: %ld %
10017aa8:	2520646c 2f20646c 646c2520 646c2520     ld %ld / %ld %ld
10017ab8:	646c2520 00000000 736d735b 6572705f      %ld....[sms_pre
10017ac8:	72757373 65645f65 656e6966 7265735f     ssure_define_ser
10017ad8:	65636976 53095d73 69767265 20736563     vices].Services 
10017ae8:	69666564 676e696e 69616620 2c64656c     defining failed,
10017af8:	61657220 206e6f73 78257830 00000000      reason 0x%x....
10017b08:	736d735b 6175645f 6d69746c 5f317265     [sms_dualtimer1_
10017b18:	005d6e66 736d735b 6175645f 6d69746c     fn].[sms_dualtim
10017b28:	5f327265 005d6e66 1000bd70 1000bd7e     er2_fn].p...~...
10017b38:	1000bd8c 1000bd9a 1000bda8 1000bdb6     ................
10017b48:	1000bdc4 1000bdd4 1000bde4 1000bdf4     ................
10017b58:	1000be04 1000be14 1000be24 1000be34     ........$...4...
10017b68:	1000be44 1000be54 1000be64 1000be74     D...T...d...t...
10017b78:	1000be84 1000be94 1000bea4 1000beb4     ................
10017b88:	1000bec4 1000bed4 1000bee4 1000bef4     ................
10017b98:	1000bf04 1000bf14 1000bf22 1000bf30     ........"...0...
10017ba8:	1000bf3e 1000bf4c 1000bf5a 1000bf68     >...L...Z...h...
10017bb8:	1000bf76 1000bf84 1000bf94 1000bfa4     v...............
10017bc8:	1000bfb4 1000bfc4 1000bfd4 1000bfe4     ................
10017bd8:	1000bff4 1000c004 1000c014 1000c024     ............$...
10017be8:	1000c034 1000c044 1000c054 1000c064     4...D...T...d...
10017bf8:	1000c074 1000c084 1000c092 1000c0a0     t...............
10017c08:	1000c0cc 1000c0da 1000c0e8 1000c0f6     ................
10017c18:	1000c104 1000c112 1000c120 1000c12e     ........ .......
10017c28:	1000c13c 1000c14a 1000c158 1000c166     <...J...X...f...
10017c38:	1000c174 1000c182 1000c190 1000c19e     t...............
10017c48:	1000c1ac 1000c1ba 1000c1c8 1000c1d6     ................
10017c58:	1000c1e4 1000c1f2 1000c200 1000c20e     ................
10017c68:	1000c21c 1000c22a 1000c238 1000c246     ....*...8...F...
10017c78:	1000c254 1000c262 1000c270 1000c27e     T...b...p...~...
10017c88:	1000c28c 1000c29a 1000c2a8 1000c2b6     ................
10017c98:	1000c2c4 1000c2d2 1000c2e0 1000c2ee     ................
10017ca8:	1000c2fc 1000c30a 1000c318 1000c326     ............&...
10017cb8:	1000c334 1000c342 1000c350 1000c35e     4...B...P...^...
10017cc8:	1000c36c 1000c37a 1000c388 1000c396     l...z...........
10017cd8:	1000c3a4 1000c3b2 1000c44c 1000c474     ........L...t...
10017ce8:	1000c49c 1000c4c4 1000c704 1000c4f4     ................
10017cf8:	1000c50c 1000c584 1000c59c 1000c524     ............$...
10017d08:	1000c53c 1000c554 1000c56c 1000c5b4     <...T...l.......
10017d18:	1000c878 1000c878 1000c878 1000c878     x...x...x...x...
10017d28:	1000c878 1000c878 1000c878 1000c878     x...x...x...x...
10017d38:	1000c65c 1000c674 1000c68c 1000c71a     \...t...........
10017d48:	1000c5e4 1000c878 1000c878 1000c878     ....x...x...x...
10017d58:	1000c878 1000c878 1000c878 1000c6a4     x...x...x.......
10017d68:	1000c6bc 1000c6d4 1000c6ec 1000c878     ............x...
10017d78:	1000c830 1000c848 1000c878 1000c878     0...H...x...x...
10017d88:	1000c746 1000c75c 1000c772 1000c788     F...\...r.......
10017d98:	1000c878 1000c878 1000c878 1000c878     x...x...x...x...
10017da8:	1000c878 1000c878 1000c878 1000c878     x...x...x...x...
10017db8:	1000c438 1000c460 1000c488 1000c4b0     8...`...........
10017dc8:	1000c4dc 1000c5cc 1000c5fc 1000c614     ................
10017dd8:	1000c62c 1000c644 1000c730 1000c79e     ,...D...0.......
10017de8:	1000c818 1000c860 1000cec8 1000ceca     ....`...........
10017df8:	1000ceb0 1000ceb0 1000ceb0 1000cec8     ................
10017e08:	1000ceb0 1000ceb0 1000d70e 1000d782     ................
10017e18:	1000d6f6 1000d788 1000d6fc 1000d702     ................
10017e28:	1000d708 1000dda8 1000dda8 1000dda8     ................
10017e38:	1000dda8 1000dda8 1000dda8 1000dda8     ................
10017e48:	1000dda8 1000dda8 1000dda8 1000dda8     ................
10017e58:	1000dda8 1000dda8 1000dda8 1000dda8     ................
10017e68:	1000dda8 1000dda8 1000dda8 1000dda8     ................
10017e78:	1000ddc6 1000ddc6 1000ddc6 1000ddc6     ................
10017e88:	1000ddc6 1000ddc6 1000ddc6 1000ddc6     ................
10017e98:	1000ddc6 1000ddc6 1000dde8 1000dde8     ................
10017ea8:	1000dde8 1000dde8 1000dde8 1000dde8     ................
10017eb8:	1000dde8 1000dde8 1000dde8 1000dde8     ................
10017ec8:	1000de0a 1000de0a 1000de0a 1000de0a     ................
10017ed8:	1000de0a 1000de0a 1000de24 1000de24     ........$...$...
10017ee8:	1000de24 1000de24 1000de24 1000de24     $...$...$...$...
10017ef8:	1000de24 1000de24 1000de24 1000de3e     $...$...$...>...
10017f08:	1000de3e 1000de60 1000de60 1000de7a     >...`...`...z...
10017f18:	1000de60 34333231 00003635 efcdab00     `...123456......
10017f28:	00efcdab                                ....

10017f2c <ble_mgr_gatt_server_handle>:
	...
10017f44:	1000cde5 1000ce49 1000cde9 00000000     ....I...........
10017f54:	6e616353 676e696e 61662020 64656c69     Scanning  failed
10017f64:	00000000 65766441 73697472 20676e69     ....Advertising 
10017f74:	6c696166 00006465 2055544d 6e616843     failed..MTU Chan
10017f84:	46206567 656c6961 43202c64 656e6e6f     ge Failed, Conne
10017f94:	6f697463 6148206e 656c646e 2c64253a     ction Handle:%d,
10017fa4:	65704f20 69746172 253a6e6f 00000064      Operation:%d...
10017fb4:	69766544 64206563 6f637369 63656e6e     Device disconnec
10017fc4:	20646574 73616552 303a6e6f 32302578     ted Reason:0x%02
10017fd4:	61482078 656c646e 2578303d 00000078     x Handle=0x%x...
10017fe4:	72636e45 69747079 66206e6f 656c6961     Encryption faile
10017ff4:	00000064 72636e45 69747079 63206e6f     d...Encryption c
10018004:	6c706d6f 64657465 63757320 73736563     ompleted success
10018014:	6c6c7566 00000079 20454c42 69766544     fully...BLE Devi
10018024:	6e206563 6620746f 646e756f 636e6520     ce not found enc
10018034:	74707972 206e6f69 6f666e69 00000000     ryption info....
10018044:	6f666e49 78616d3a 6d756d69 2e6f6e20     Info:maximum no.
10018054:	7320666f 206e6163 69766564 72206563     of scan device r
10018064:	68636165 2e2e6465 6f74532e 6e697070     eached...Stoppin
10018074:	63532067 00006e61 6c696146 74206465     g Scan..Failed t
10018084:	7473206f 7320706f 6e6e6163 00676e69     o stop scanning.
10018094:	72696150 20676e69 6c696166 2e2e6465     Pairing failed..
100180a4:	7369442e 6e6e6f63 69746365 0000676e     .Disconnecting..
100180b4:	63736944 656e6e6f 52207463 65757165     Disconnect Reque
100180c4:	46207473 656c6961 00000064 72696150     st Failed...Pair
100180d4:	20676e69 636f7270 72756465 6f632065     ing procedure co
100180e4:	656c706d 20646574 63637573 66737365     mpleted successf
100180f4:	796c6c75 00000000 20454c42 69766544     ully....BLE Devi
10018104:	6e206563 6620746f 646e756f 206f7420     ce not found to 
10018114:	726f7473 68742065 61702065 6e697269     store the pairin
10018124:	6e692067 00006f66 72636e45 69747079     g info..Encrypti
10018134:	4e206e6f 7320746f 74726174 00006465     on Not started..
10018144:	76616c53 65532065 69727563 52207974     Slave Security R
10018154:	2d207165 74754120 746e6568 74616369     eq - Authenticat
10018164:	206e6f69 6c696146 00006465 72696150     ion Failed..Pair
10018174:	71655220 74736575 41202d20 65687475      Request - Authe
10018184:	6369746e 6f697461 6146206e 64656c69     ntication Failed
10018194:	00000000 65746e45 68742072 61502065     ....Enter the Pa
100181a4:	656b7373 2d362879 69676944 69202974     sskey(6-Digit) i
100181b4:	6554206e 6e696d72 003a6c61 206e6950     n Terminal:.Pin 
100181c4:	656d6954 0074756f 63736944 656e6e6f     Timeout.Disconne
100181d4:	6e697463 2e2e2067 0000002e 61656c50     cting ......Plea
100181e4:	45206573 7265746e 65687420 6c6f6620     se Enter the fol
100181f4:	69776f6c 5020676e 2d737361 65646f63     lowing Pass-code
10018204:	206e6f28 6568746f 65442072 65636976     (on other Device
10018214:	00003a29 72696150 79656b2d 70657220     ):..Pair-key rep
10018224:	6620796c 656c6961 00000064 20424f4f     ly failed...OOB 
10018234:	74616546 20657275 20746f4e 70707573     Feature Not supp
10018244:	6574726f 00000064 65746e45 20646572     orted...Entered 
10018254:	73736150 646f632d 00003a65 72696150     Pass-code:..Pair
10018264:	20676e69 6f666e69 74616d72 206e6f69     ing information 
10018274:	7020666f 20726565 69766564 69206563     of peer device i
10018284:	6f6e2073 76612074 616c6961 2e656c62     s not available.
10018294:	00000000 61656c50 75206573 6961706e     ....Please unpai
100182a4:	68742072 65642065 65636976 6f726620     r the device fro
100182b4:	6570206d 64207265 63697665 6f6d2865     m peer device(mo
100182c4:	656c6962 65732029 6e697474 6d207367     bile) settings m
100182d4:	20756e65 20646e61 72617473 61702074     enu and start pa
100182e4:	6e697269 67612067 006e6961 72636e45     iring again.Encr
100182f4:	69747079 52206e6f 65757165 52207473     yption Request R
10018304:	796c7065 69614620 0064656c 656c625b     eply Failed.[ble
10018314:	696e695f 09095d74 424d4153 49203131     _init]..SAMB11 I
10018324:	6974696e 7a696c61 6f697461 6166206e     nitialization fa
10018334:	64656c69 00000000 656c625b 696e695f     iled....[ble_ini
10018344:	09095d74 61656c50 63206573 6b636568     t]..Please check
10018354:	65687420 776f7020 61207265 6320646e      the power and c
10018364:	656e6e6f 6f697463 202f206e 64726168     onnection / hard
10018374:	65726177 6e6f6320 7463656e 0000726f     ware connector..
10018384:	52424153 4d532d65 00000053 69766544     SABRe-SMS...Devi
10018394:	6e206563 20656d61 20746573 6c696166     ce name set fail
100183a4:	00006465 656c625b 7465735f 7665645f     ed..[ble_set_dev
100183b4:	6e6f635f 5d676966 44420909 64646120     _config]..BD add
100183c4:	73736572 74656720 69616620 0064656c     ress get failed.
100183d4:	656c625b 7465735f 7665645f 6e6f635f     [ble_set_dev_con
100183e4:	5d676966 74655309 454c4220 76654420     fig].Set BLE Dev
100183f4:	20656369 666e6f63 72756769 6f697461     ice configuratio
10018404:	6166206e 64656c69 00000000 656c625b     n failed....[ble
10018414:	7465735f 7665645f 6e6f635f 5d676966     _set_dev_config]
10018424:	74655309 454c4220 76654420 20656369     .Set BLE Device 
10018434:	72646441 20737365 6c696166 00006465     Address failed..
10018444:	6e616353 676e696e 502e2e2e 7361656c     Scanning...Pleas
10018454:	61772065 2e2e7469 0000002e 76616c53     e wait......Slav
10018464:	65732065 69727563 72207974 65757165     e security reque
10018474:	66207473 656c6961 00000064 6e6e6f43     st failed...Conn
10018484:	65746365 6f742064 65657020 65642072     ected to peer de
10018494:	65636976 74697720 64612068 73657264     vice with addres
100184a4:	78302073 78323025 78323025 78323025     s 0x%02x%02x%02x
100184b4:	78323025 78323025 78323025 00000000     %02x%02x%02x....
100184c4:	6e6e6f43 69746365 48206e6f 6c646e61     Connection Handl
100184d4:	64252065 00000000 6f736552 6e69766c     e %d....Resolvin
100184e4:	61522067 6d6f646e 64646120 73736572     g Random address
100184f4:	69616620 2a64656c 0000002a 2078614d      failed**...Max 
10018504:	626d756e 6f207265 6f632066 63656e6e     number of connec
10018514:	6e6f6974 61657220 64656863 6425203a     tion reached: %d
10018524:	3d3d3d20 7369443e 6e6e6f63 69746365      ===>Disconnecti
10018534:	2e2e676e 0000002e 69766544 43206563     ng......Device C
10018544:	656e6e6f 6f697463 6146206e 64656c69     onnection Failed
10018554:	53202d20 75746174 25203a73 00000064      - Status: %d...
10018564:	5a2d571c 00002dbe 20454c42 65766441     .W-Z.-..BLE Adve
10018574:	73697472 6e656d65 61642074 73206174     rtisement data s
10018584:	66207465 656c6961 00000064              et failed...

10018590 <ble_mgr_gap_handle>:
10018590:	1000cde1 1000cfc5 1000cdf9 1000ce21     ............!...
100185a0:	00000000 1000da71 1000ce79 1000cdf5     ....q...y.......
100185b0:	1000d165 1000d045 1000d365 1000d17d     e...E...e...}...
100185c0:	1000d4b5 1000d5f9 1000cf01 1000dcad     ................
	...
100185dc:	6e6e6143 7320746f 74726174 554d4920     Cannot start IMU
100185ec:	00000000 306e7442 746e6920 202e2e2e     ....Btn0 int... 
100185fc:	00000000 316e7442 746e6920 202e2e2e     ....Btn1 int... 
1001860c:	00000000 656d6954 69203172 2e2e746e     ....Timer1 int..
1001861c:	0000202e 656d6954 69203272 2e2e746e     . ..Timer2 int..
1001862c:	0000202e 73756c66 676e6968 00000021     . ..flushing!...
1001863c:	73657250 65732073 6e69646e 25282067     Press sending (%
1001864c:	64252f64 2e2e2e29 00000020 20504147     d/%d)... ...GAP 
1001865c:	656d6974 0074756f 6e657645 65672074     timeout.Event ge
1001866c:	69742074 756f656d 00000074 20454c42     t timeout...BLE 
1001867c:	6f727265 636f2072 72727563 41006465     error occurred.A
1001868c:	6c656d74 726f4320 04022e70                       tmel Corp.

10018696 <CSWTCH.45>:
10018696:	00100402                                         ...

10018699 <CSWTCH.47>:
10018699:	03010300 03030303 03030303 02020303              ...............

100186a8 <client_conf_uuid>:
100186a8:	29042902                                         .)

100186aa <presentation_format_uuid>:
100186aa:	29012904                                         .)

100186ac <user_desc_uuid>:
100186ac:	29032901                                         .)

100186ae <server_conf_uuid>:
100186ae:	29002903                                         .)

100186b0 <extended_props_uuid>:
100186b0:	28022900                                         .)

100186b2 <include_uuid>:
100186b2:	28032802                                         .(

100186b4 <char_uuid>:
100186b4:	00002803 00776f70 74727173 00000066     .(..pow.sqrtf...
100186c4:	00000000                                ....

100186c8 <TWO52>:
100186c8:	00000000 43300000 00000000 c3300000     ......0C......0.
100186d8:	10013e9e 10013dc2 10013e80 10013e58     .>...=...>..X>..
100186e8:	10013e80 10013e4c 10013e80 10013e58     .>..L>...>..X>..
100186f8:	10013dc2 10013dc2 10013e4c 10013e58     .=...=..L>..X>..
10018708:	10013f04 10013f04 10013f04 10013e86     .?...?...?...>..
10018718:	10013dc2 10013dc2 10013e6c 10013e56     .=...=..l>..V>..
10018728:	10013e6c 10013e4c 10013e6c 10013e56     l>..L>..l>..V>..
10018738:	10013dc2 10013dc2 10013e4c 10013e56     .=...=..L>..V>..
10018748:	10013f04 10013f04 10013f04 10013f10     .?...?...?...?..
10018758:	100141fc 1001415a 1001415a 10014158     .A..ZA..ZA..XA..
10018768:	100141ee 100141ee 100141e4 10014158     .A...A...A..XA..
10018778:	100141ee 100141e4 100141ee 10014158     .A...A...A..XA..
10018788:	100141f4 100141f4 100141f4 1001427e     .A...A...A..~B..
10018798:	10014fdc 10014eaa 10014fb0 10014ea0     .O...N...O...N..
100187a8:	10014fb0 10014fba 10014fb0 10014ea0     .O...O...O...N..
100187b8:	10014eaa 10014eaa 10014fba 10014ea0     .N...N...O...N..
100187c8:	10014e96 10014e96 10014e96 1001520c     .N...N...N...R..
100187d8:	10015824 100156e4 100156e4 100156e2     $X...V...V...V..
100187e8:	100157fc 100157fc 100157ee 100156e2     .W...W...W...V..
100187f8:	100157fc 100157ee 100157fc 100156e2     .W...W...W...V..
10018808:	10015804 10015804 10015804 10015a04     .X...X...X...Z..
10018818:	00000043                                C...

1001881c <_global_impure_ptr>:
1001881c:	100188e4                                ....

10018820 <__sf_fake_stdin>:
	...

10018840 <__sf_fake_stdout>:
	...

10018860 <__sf_fake_stderr>:
	...
10018880:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
10018890:	32313000 36353433 41393837 45444342     .0123456789ABCDE
100188a0:	31300046 35343332 39383736 64636261     F.0123456789abcd
100188b0:	00006665                                ef..

100188b4 <_init>:
100188b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100188b6:	46c0      	nop			; (mov r8, r8)
100188b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
100188ba:	bc08      	pop	{r3}
100188bc:	469e      	mov	lr, r3
100188be:	4770      	bx	lr

100188c0 <__init_array_start>:
100188c0:	100080b1 	.word	0x100080b1

100188c4 <_fini>:
100188c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100188c6:	46c0      	nop			; (mov r8, r8)
100188c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
100188ca:	bc08      	pop	{r3}
100188cc:	469e      	mov	lr, r3
100188ce:	4770      	bx	lr

100188d0 <__fini_array_start>:
100188d0:	10008089 	.word	0x10008089
