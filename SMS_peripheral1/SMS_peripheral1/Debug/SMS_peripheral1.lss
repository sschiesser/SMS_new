
SMS_peripheral1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000fef0  10008000  10008000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000ac  10017ef0  10017ef0  00017ef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00002e98  10017f9c  10017f9c  00017f9c  2**2
                  ALLOC
  3 .stack        00001804  1001ae34  1001ae34  00017f9c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00017f9c  2**0
                  CONTENTS, READONLY
  5 .comment      000000b4  00000000  00000000  00017fc4  2**0
                  CONTENTS, READONLY
  6 .debug_info   0004e2da  00000000  00000000  00018078  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000562c  00000000  00000000  00066352  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000b7d0  00000000  00000000  0006b97e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000d50  00000000  00000000  0007714e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000dd8  00000000  00000000  00077e9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000285eb  00000000  00000000  00078c76  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00017e1b  00000000  00000000  000a1261  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00146fba  00000000  00000000  000b907c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002f2c  00000000  00000000  00200038  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

10008000 <app_entry>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void app_entry(void)
{
10008000:	b510      	push	{r4, lr}

    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
10008002:	4b18      	ldr	r3, [pc, #96]	; (10008064 <app_entry+0x64>)
10008004:	4a18      	ldr	r2, [pc, #96]	; (10008068 <app_entry+0x68>)
10008006:	429a      	cmp	r2, r3
10008008:	d003      	beq.n	10008012 <app_entry+0x12>
        for (; pDest < &_erelocate;) {
1000800a:	4b18      	ldr	r3, [pc, #96]	; (1000806c <app_entry+0x6c>)
1000800c:	4a15      	ldr	r2, [pc, #84]	; (10008064 <app_entry+0x64>)
1000800e:	429a      	cmp	r2, r3
10008010:	d304      	bcc.n	1000801c <app_entry+0x1c>
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008012:	4b17      	ldr	r3, [pc, #92]	; (10008070 <app_entry+0x70>)
10008014:	4a17      	ldr	r2, [pc, #92]	; (10008074 <app_entry+0x74>)
10008016:	429a      	cmp	r2, r3
10008018:	d310      	bcc.n	1000803c <app_entry+0x3c>
1000801a:	e01e      	b.n	1000805a <app_entry+0x5a>
1000801c:	4b16      	ldr	r3, [pc, #88]	; (10008078 <app_entry+0x78>)
1000801e:	4a13      	ldr	r2, [pc, #76]	; (1000806c <app_entry+0x6c>)
10008020:	3203      	adds	r2, #3
10008022:	1ad2      	subs	r2, r2, r3
10008024:	0892      	lsrs	r2, r2, #2
10008026:	3201      	adds	r2, #1
10008028:	0092      	lsls	r2, r2, #2
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
1000802a:	2300      	movs	r3, #0
            *pDest++ = *pSrc++;
1000802c:	480d      	ldr	r0, [pc, #52]	; (10008064 <app_entry+0x64>)
1000802e:	490e      	ldr	r1, [pc, #56]	; (10008068 <app_entry+0x68>)
10008030:	58cc      	ldr	r4, [r1, r3]
10008032:	50c4      	str	r4, [r0, r3]
10008034:	3304      	adds	r3, #4
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
10008036:	4293      	cmp	r3, r2
10008038:	d1fa      	bne.n	10008030 <app_entry+0x30>
1000803a:	e7ea      	b.n	10008012 <app_entry+0x12>
1000803c:	4b0f      	ldr	r3, [pc, #60]	; (1000807c <app_entry+0x7c>)
1000803e:	490c      	ldr	r1, [pc, #48]	; (10008070 <app_entry+0x70>)
10008040:	3103      	adds	r1, #3
10008042:	1ac9      	subs	r1, r1, r3
10008044:	0889      	lsrs	r1, r1, #2
10008046:	3101      	adds	r1, #1
10008048:	0089      	lsls	r1, r1, #2
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
1000804a:	2300      	movs	r3, #0
        *pDest++ = 0;
1000804c:	4c09      	ldr	r4, [pc, #36]	; (10008074 <app_entry+0x74>)
1000804e:	2000      	movs	r0, #0
10008050:	191a      	adds	r2, r3, r4
10008052:	6010      	str	r0, [r2, #0]
10008054:	3304      	adds	r3, #4
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008056:	428b      	cmp	r3, r1
10008058:	d1fa      	bne.n	10008050 <app_entry+0x50>
        *pDest++ = 0;
    }

    /* Initialize the C library */
    __libc_init_array();
1000805a:	4b09      	ldr	r3, [pc, #36]	; (10008080 <app_entry+0x80>)
1000805c:	4798      	blx	r3

    /* Branch to main function */
    main();
1000805e:	4b09      	ldr	r3, [pc, #36]	; (10008084 <app_entry+0x84>)
10008060:	4798      	blx	r3

    /* return to BLE OS*/
    return;
}
10008062:	bd10      	pop	{r4, pc}
10008064:	10017ef0 	.word	0x10017ef0
10008068:	10017ef0 	.word	0x10017ef0
1000806c:	10017f9c 	.word	0x10017f9c
10008070:	1001ae34 	.word	0x1001ae34
10008074:	10017f9c 	.word	0x10017f9c
10008078:	10017ef4 	.word	0x10017ef4
1000807c:	10017fa0 	.word	0x10017fa0
10008080:	10014afd 	.word	0x10014afd
10008084:	1000f625 	.word	0x1000f625

10008088 <__do_global_dtors_aux>:
10008088:	b510      	push	{r4, lr}
1000808a:	4c06      	ldr	r4, [pc, #24]	; (100080a4 <__do_global_dtors_aux+0x1c>)
1000808c:	7823      	ldrb	r3, [r4, #0]
1000808e:	2b00      	cmp	r3, #0
10008090:	d107      	bne.n	100080a2 <__do_global_dtors_aux+0x1a>
10008092:	4b05      	ldr	r3, [pc, #20]	; (100080a8 <__do_global_dtors_aux+0x20>)
10008094:	2b00      	cmp	r3, #0
10008096:	d002      	beq.n	1000809e <__do_global_dtors_aux+0x16>
10008098:	4804      	ldr	r0, [pc, #16]	; (100080ac <__do_global_dtors_aux+0x24>)
1000809a:	e000      	b.n	1000809e <__do_global_dtors_aux+0x16>
1000809c:	bf00      	nop
1000809e:	2301      	movs	r3, #1
100080a0:	7023      	strb	r3, [r4, #0]
100080a2:	bd10      	pop	{r4, pc}
100080a4:	10017f9c 	.word	0x10017f9c
100080a8:	00000000 	.word	0x00000000
100080ac:	10017ef0 	.word	0x10017ef0

100080b0 <frame_dummy>:
100080b0:	4b08      	ldr	r3, [pc, #32]	; (100080d4 <frame_dummy+0x24>)
100080b2:	b510      	push	{r4, lr}
100080b4:	2b00      	cmp	r3, #0
100080b6:	d003      	beq.n	100080c0 <frame_dummy+0x10>
100080b8:	4907      	ldr	r1, [pc, #28]	; (100080d8 <frame_dummy+0x28>)
100080ba:	4808      	ldr	r0, [pc, #32]	; (100080dc <frame_dummy+0x2c>)
100080bc:	e000      	b.n	100080c0 <frame_dummy+0x10>
100080be:	bf00      	nop
100080c0:	4807      	ldr	r0, [pc, #28]	; (100080e0 <frame_dummy+0x30>)
100080c2:	6803      	ldr	r3, [r0, #0]
100080c4:	2b00      	cmp	r3, #0
100080c6:	d100      	bne.n	100080ca <frame_dummy+0x1a>
100080c8:	bd10      	pop	{r4, pc}
100080ca:	4b06      	ldr	r3, [pc, #24]	; (100080e4 <frame_dummy+0x34>)
100080cc:	2b00      	cmp	r3, #0
100080ce:	d0fb      	beq.n	100080c8 <frame_dummy+0x18>
100080d0:	4798      	blx	r3
100080d2:	e7f9      	b.n	100080c8 <frame_dummy+0x18>
100080d4:	00000000 	.word	0x00000000
100080d8:	10017fa0 	.word	0x10017fa0
100080dc:	10017ef0 	.word	0x10017ef0
100080e0:	10017ef0 	.word	0x10017ef0
100080e4:	00000000 	.word	0x00000000

100080e8 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
100080e8:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_clock_get_value();
100080ea:	4b09      	ldr	r3, [pc, #36]	; (10008110 <delay_init+0x28>)
100080ec:	4798      	blx	r3
100080ee:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
100080f0:	4c08      	ldr	r4, [pc, #32]	; (10008114 <delay_init+0x2c>)
100080f2:	21fa      	movs	r1, #250	; 0xfa
100080f4:	0089      	lsls	r1, r1, #2
100080f6:	47a0      	blx	r4
100080f8:	4b07      	ldr	r3, [pc, #28]	; (10008118 <delay_init+0x30>)
100080fa:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
100080fc:	4907      	ldr	r1, [pc, #28]	; (1000811c <delay_init+0x34>)
100080fe:	0028      	movs	r0, r5
10008100:	47a0      	blx	r4
10008102:	4b07      	ldr	r3, [pc, #28]	; (10008120 <delay_init+0x38>)
10008104:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
10008106:	2205      	movs	r2, #5
10008108:	4b06      	ldr	r3, [pc, #24]	; (10008124 <delay_init+0x3c>)
1000810a:	601a      	str	r2, [r3, #0]
}
1000810c:	bd70      	pop	{r4, r5, r6, pc}
1000810e:	46c0      	nop			; (mov r8, r8)
10008110:	1000c48d 	.word	0x1000c48d
10008114:	10012e05 	.word	0x10012e05
10008118:	10017ef4 	.word	0x10017ef4
1000811c:	000f4240 	.word	0x000f4240
10008120:	10017ef0 	.word	0x10017ef0
10008124:	e000e010 	.word	0xe000e010

10008128 <delay_cycles_ms>:
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(uint32_t n)
{
10008128:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
1000812a:	4b08      	ldr	r3, [pc, #32]	; (1000814c <delay_cycles_ms+0x24>)
1000812c:	681c      	ldr	r4, [r3, #0]
 * \param n Number of cycles
 */
static inline void delay_cycles(const uint32_t n)
{
    if(n > 0) {
        SysTick->LOAD = n;
1000812e:	4a08      	ldr	r2, [pc, #32]	; (10008150 <delay_cycles_ms+0x28>)
        SysTick->VAL = 0;
10008130:	2500      	movs	r5, #0
        while(!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
10008132:	2180      	movs	r1, #128	; 0x80
10008134:	0249      	lsls	r1, r1, #9
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(uint32_t n)
{
	while (n--) {
10008136:	e006      	b.n	10008146 <delay_cycles_ms+0x1e>
 *
 * \param n Number of cycles
 */
static inline void delay_cycles(const uint32_t n)
{
    if(n > 0) {
10008138:	2c00      	cmp	r4, #0
1000813a:	d004      	beq.n	10008146 <delay_cycles_ms+0x1e>
        SysTick->LOAD = n;
1000813c:	6054      	str	r4, [r2, #4]
        SysTick->VAL = 0;
1000813e:	6095      	str	r5, [r2, #8]
        while(!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
10008140:	6813      	ldr	r3, [r2, #0]
10008142:	420b      	tst	r3, r1
10008144:	d0fc      	beq.n	10008140 <delay_cycles_ms+0x18>
10008146:	3801      	subs	r0, #1
10008148:	d2f6      	bcs.n	10008138 <delay_cycles_ms+0x10>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
	}
}
1000814a:	bd30      	pop	{r4, r5, pc}
1000814c:	10017ef4 	.word	0x10017ef4
10008150:	e000e010 	.word	0xe000e010

10008154 <aon_sleep_timer_get_config_defaults>:
 * \param[out]  config  Pointer to a AON Sleep Timer module configuration structure to set
 */
void aon_sleep_timer_get_config_defaults(struct aon_sleep_timer_config *config)
{
	/* Default configuration values */
	config->wakeup = AON_SLEEP_TIMER_WAKEUP_ARM;
10008154:	2301      	movs	r3, #1
10008156:	7003      	strb	r3, [r0, #0]
	config->mode = AON_SLEEP_TIMER_SINGLE_MODE;
10008158:	7043      	strb	r3, [r0, #1]
	config->counter = 32000;
1000815a:	23fa      	movs	r3, #250	; 0xfa
1000815c:	01db      	lsls	r3, r3, #7
1000815e:	6043      	str	r3, [r0, #4]
}
10008160:	4770      	bx	lr
10008162:	46c0      	nop			; (mov r8, r8)

10008164 <aon_sleep_timer_disable>:
 */
void aon_sleep_timer_disable(void)
{
	uint32_t regval;

	AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = 0;
10008164:	4b06      	ldr	r3, [pc, #24]	; (10008180 <aon_sleep_timer_disable+0x1c>)
10008166:	2200      	movs	r2, #0
10008168:	605a      	str	r2, [r3, #4]
	regval = AON_SLEEP_TIMER0->CONTROL.reg;
1000816a:	681a      	ldr	r2, [r3, #0]
	regval &= ~AON_SLEEP_TIMER_CONTROL_RELOAD_ENABLE;
	regval &= ~AON_SLEEP_TIMER_CONTROL_SINGLE_COUNT_ENABLE;
1000816c:	2103      	movs	r1, #3
1000816e:	438a      	bics	r2, r1
	AON_SLEEP_TIMER0->CONTROL.reg = regval;
10008170:	601a      	str	r2, [r3, #0]

	while (AON_SLEEP_TIMER0->CONTROL.reg & (1 << 14)) {
10008172:	0019      	movs	r1, r3
10008174:	2280      	movs	r2, #128	; 0x80
10008176:	01d2      	lsls	r2, r2, #7
10008178:	680b      	ldr	r3, [r1, #0]
1000817a:	4213      	tst	r3, r2
1000817c:	d1fc      	bne.n	10008178 <aon_sleep_timer_disable+0x14>
	}
}
1000817e:	4770      	bx	lr
10008180:	4000d000 	.word	0x4000d000

10008184 <aon_sleep_timer_clear_interrup>:
 * This flag will be cleared automatically once the IRQ
 * has been seen on the sleep clock.
 */
void aon_sleep_timer_clear_interrup(void)
{
	AON_SLEEP_TIMER0->CONTROL.reg |= AON_SLEEP_TIMER_CONTROL_IRQ_CLEAR;
10008184:	4a02      	ldr	r2, [pc, #8]	; (10008190 <aon_sleep_timer_clear_interrup+0xc>)
10008186:	6811      	ldr	r1, [r2, #0]
10008188:	2310      	movs	r3, #16
1000818a:	430b      	orrs	r3, r1
1000818c:	6013      	str	r3, [r2, #0]
}
1000818e:	4770      	bx	lr
10008190:	4000d000 	.word	0x4000d000

10008194 <aon_sleep_timer_isr_handler>:
 *
 * Timer ISR handler.
 *
 */
static void aon_sleep_timer_isr_handler(void)
{
10008194:	b510      	push	{r4, lr}
	aon_sleep_timer_clear_interrup();
10008196:	4b04      	ldr	r3, [pc, #16]	; (100081a8 <aon_sleep_timer_isr_handler+0x14>)
10008198:	4798      	blx	r3

	if (aon_sleep_timer_callback) {
1000819a:	4b04      	ldr	r3, [pc, #16]	; (100081ac <aon_sleep_timer_isr_handler+0x18>)
1000819c:	681b      	ldr	r3, [r3, #0]
1000819e:	2b00      	cmp	r3, #0
100081a0:	d000      	beq.n	100081a4 <aon_sleep_timer_isr_handler+0x10>
		aon_sleep_timer_callback();
100081a2:	4798      	blx	r3
	}
}
100081a4:	bd10      	pop	{r4, pc}
100081a6:	46c0      	nop			; (mov r8, r8)
100081a8:	10008185 	.word	0x10008185
100081ac:	10017fb8 	.word	0x10017fb8

100081b0 <aon_sleep_timer_register_callback>:
 *
 * \param[in]     callback_func Pointer to callback function
 */
void aon_sleep_timer_register_callback(aon_sleep_timer_callback_t fun)
{
	aon_sleep_timer_callback = fun;
100081b0:	4b01      	ldr	r3, [pc, #4]	; (100081b8 <aon_sleep_timer_register_callback+0x8>)
100081b2:	6018      	str	r0, [r3, #0]
}
100081b4:	4770      	bx	lr
100081b6:	46c0      	nop			; (mov r8, r8)
100081b8:	10017fb8 	.word	0x10017fb8

100081bc <aon_sleep_timer_unregister_callback>:
 * Unregisters and disable a callback function implemented by the user.
 *
 */
void aon_sleep_timer_unregister_callback(void)
{
	aon_sleep_timer_callback = NULL;
100081bc:	2200      	movs	r2, #0
100081be:	4b01      	ldr	r3, [pc, #4]	; (100081c4 <aon_sleep_timer_unregister_callback+0x8>)
100081c0:	601a      	str	r2, [r3, #0]
}
100081c2:	4770      	bx	lr
100081c4:	10017fb8 	.word	0x10017fb8

100081c8 <aon_sleep_timer_init>:
 *
 * \param[in]     config       Pointer to the AON Sleep Timer configuration options struct
 *
 */
void aon_sleep_timer_init(const struct aon_sleep_timer_config *config)
{
100081c8:	b5f0      	push	{r4, r5, r6, r7, lr}
100081ca:	b083      	sub	sp, #12
	uint32_t aon_st_ctrl = 0;

	AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg = AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_RESETVALUE;
100081cc:	2200      	movs	r2, #0
100081ce:	4b2b      	ldr	r3, [pc, #172]	; (1000827c <aon_sleep_timer_init+0xb4>)
100081d0:	731a      	strb	r2, [r3, #12]
	if (config->wakeup == AON_SLEEP_TIMER_WAKEUP_ARM_BLE) {
100081d2:	7803      	ldrb	r3, [r0, #0]
100081d4:	2b02      	cmp	r3, #2
100081d6:	d105      	bne.n	100081e4 <aon_sleep_timer_init+0x1c>
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
100081d8:	4a28      	ldr	r2, [pc, #160]	; (1000827c <aon_sleep_timer_init+0xb4>)
100081da:	7b11      	ldrb	r1, [r2, #12]
100081dc:	3301      	adds	r3, #1
100081de:	430b      	orrs	r3, r1
100081e0:	7313      	strb	r3, [r2, #12]
100081e2:	e005      	b.n	100081f0 <aon_sleep_timer_init+0x28>
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE |
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_BLE_ENABLE;
	} else if (config->wakeup == AON_SLEEP_TIMER_WAKEUP_ARM) {
100081e4:	2b01      	cmp	r3, #1
100081e6:	d103      	bne.n	100081f0 <aon_sleep_timer_init+0x28>
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
100081e8:	4a24      	ldr	r2, [pc, #144]	; (1000827c <aon_sleep_timer_init+0xb4>)
100081ea:	7b11      	ldrb	r1, [r2, #12]
100081ec:	430b      	orrs	r3, r1
100081ee:	7313      	strb	r3, [r2, #12]
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
100081f0:	4b23      	ldr	r3, [pc, #140]	; (10008280 <aon_sleep_timer_init+0xb8>)
100081f2:	681a      	ldr	r2, [r3, #0]
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
100081f4:	0053      	lsls	r3, r2, #1
100081f6:	d01f      	beq.n	10008238 <aon_sleep_timer_init+0x70>
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
100081f8:	4d21      	ldr	r5, [pc, #132]	; (10008280 <aon_sleep_timer_init+0xb8>)
100081fa:	2700      	movs	r7, #0

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;

	for (i = 0; i < cycles*100; i++) {
100081fc:	262c      	movs	r6, #44	; 0x2c
100081fe:	36ff      	adds	r6, #255	; 0xff
10008200:	2180      	movs	r1, #128	; 0x80
10008202:	01c9      	lsls	r1, r1, #7
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
10008204:	602f      	str	r7, [r5, #0]

static aon_sleep_timer_callback_t aon_sleep_timer_callback = NULL;

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;
10008206:	9701      	str	r7, [sp, #4]

	for (i = 0; i < cycles*100; i++) {
10008208:	9701      	str	r7, [sp, #4]
1000820a:	9b01      	ldr	r3, [sp, #4]
1000820c:	42b3      	cmp	r3, r6
1000820e:	d806      	bhi.n	1000821e <aon_sleep_timer_init+0x56>
		asm volatile ("nop");
10008210:	46c0      	nop			; (mov r8, r8)

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;

	for (i = 0; i < cycles*100; i++) {
10008212:	9b01      	ldr	r3, [sp, #4]
10008214:	3301      	adds	r3, #1
10008216:	9301      	str	r3, [sp, #4]
10008218:	9b01      	ldr	r3, [sp, #4]
1000821a:	42b3      	cmp	r3, r6
1000821c:	d9f8      	bls.n	10008210 <aon_sleep_timer_init+0x48>
1000821e:	7844      	ldrb	r4, [r0, #1]
10008220:	000b      	movs	r3, r1
10008222:	2c00      	cmp	r4, #0
10008224:	d103      	bne.n	1000822e <aon_sleep_timer_init+0x66>
10008226:	2380      	movs	r3, #128	; 0x80
10008228:	009b      	lsls	r3, r3, #2
1000822a:	e000      	b.n	1000822e <aon_sleep_timer_init+0x66>
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
		delay_cycle(3);
		while (aon_st_ctrl & ((config->mode == AON_SLEEP_TIMER_RELOAD_MODE) ?
				(1 << 9) : (1 << 14))) {
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
1000822c:	682a      	ldr	r2, [r5, #0]

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
		delay_cycle(3);
		while (aon_st_ctrl & ((config->mode == AON_SLEEP_TIMER_RELOAD_MODE) ?
1000822e:	4213      	tst	r3, r2
10008230:	d1fc      	bne.n	1000822c <aon_sleep_timer_init+0x64>
				(1 << 9) : (1 << 14))) {
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
		}
		aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
10008232:	682a      	ldr	r2, [r5, #0]
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
10008234:	0053      	lsls	r3, r2, #1
10008236:	d1e5      	bne.n	10008204 <aon_sleep_timer_init+0x3c>
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
		}
		aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	}

	if (config->mode == AON_SLEEP_TIMER_RELOAD_MODE) {
10008238:	7843      	ldrb	r3, [r0, #1]
1000823a:	2b00      	cmp	r3, #0
1000823c:	d105      	bne.n	1000824a <aon_sleep_timer_init+0x82>
		/* Reload counter will start here */
		AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = config->counter;
1000823e:	4b10      	ldr	r3, [pc, #64]	; (10008280 <aon_sleep_timer_init+0xb8>)
10008240:	6842      	ldr	r2, [r0, #4]
10008242:	605a      	str	r2, [r3, #4]
		AON_SLEEP_TIMER0->CONTROL.reg = AON_SLEEP_TIMER_CONTROL_RELOAD_ENABLE;
10008244:	2201      	movs	r2, #1
10008246:	601a      	str	r2, [r3, #0]
10008248:	e004      	b.n	10008254 <aon_sleep_timer_init+0x8c>
	} else {
		/* Single counter will start here */
		AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = config->counter;
1000824a:	4b0d      	ldr	r3, [pc, #52]	; (10008280 <aon_sleep_timer_init+0xb8>)
1000824c:	6842      	ldr	r2, [r0, #4]
1000824e:	605a      	str	r2, [r3, #4]
		AON_SLEEP_TIMER0->CONTROL.reg = AON_SLEEP_TIMER_CONTROL_SINGLE_COUNT_ENABLE;
10008250:	2202      	movs	r2, #2
10008252:	601a      	str	r2, [r3, #0]
	}

	if (config->mode == AON_SLEEP_TIMER_SINGLE_MODE) {
10008254:	7843      	ldrb	r3, [r0, #1]
10008256:	2b01      	cmp	r3, #1
10008258:	d109      	bne.n	1000826e <aon_sleep_timer_init+0xa6>
		while ((AON_SLEEP_TIMER0->CONTROL.reg &
1000825a:	4909      	ldr	r1, [pc, #36]	; (10008280 <aon_sleep_timer_init+0xb8>)
1000825c:	22e0      	movs	r2, #224	; 0xe0
1000825e:	01d2      	lsls	r2, r2, #7
10008260:	680b      	ldr	r3, [r1, #0]
10008262:	4013      	ands	r3, r2
10008264:	4293      	cmp	r3, r2
10008266:	d1fb      	bne.n	10008260 <aon_sleep_timer_init+0x98>
				AON_SLEEP_TIMER_CONTROL_SLP_TIMER_SINGLE_COUNT_ENABLE_DLY_Msk)
				!= AON_SLEEP_TIMER_CONTROL_SLP_TIMER_SINGLE_COUNT_ENABLE_DLY_Msk) {
		}
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
10008268:	2200      	movs	r2, #0
1000826a:	4b05      	ldr	r3, [pc, #20]	; (10008280 <aon_sleep_timer_init+0xb8>)
1000826c:	601a      	str	r2, [r3, #0]
	}

	system_register_isr(RAM_ISR_TABLE_AON_SLEEP_TIMER_INDEX, (uint32_t)aon_sleep_timer_isr_handler);
1000826e:	4905      	ldr	r1, [pc, #20]	; (10008284 <aon_sleep_timer_init+0xbc>)
10008270:	202b      	movs	r0, #43	; 0x2b
10008272:	4b05      	ldr	r3, [pc, #20]	; (10008288 <aon_sleep_timer_init+0xc0>)
10008274:	4798      	blx	r3
}
10008276:	b003      	add	sp, #12
10008278:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000827a:	46c0      	nop			; (mov r8, r8)
1000827c:	4000e000 	.word	0x4000e000
10008280:	4000d000 	.word	0x4000d000
10008284:	10008195 	.word	0x10008195
10008288:	1000cfc9 	.word	0x1000cfc9

1000828c <_i2c_master_read_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000828c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000828e:	464f      	mov	r7, r9
10008290:	4646      	mov	r6, r8
10008292:	b4c0      	push	{r6, r7}
10008294:	4681      	mov	r9, r0
	Assert(config);
	
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
	uint16_t length = packet->data_length;
10008296:	884d      	ldrh	r5, [r1, #2]

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
10008298:	2317      	movs	r3, #23
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
	uint16_t length = packet->data_length;

	if (length == 0) {
1000829a:	2d00      	cmp	r5, #0
1000829c:	d02f      	beq.n	100082fe <_i2c_master_read_packet+0x72>
	Assert(module->hw);
	Assert(config);
	
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
1000829e:	6802      	ldr	r2, [r0, #0]
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2c *const i2c_module)
{
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
100082a0:	2428      	movs	r4, #40	; 0x28
100082a2:	5d13      	ldrb	r3, [r2, r4]
100082a4:	07db      	lsls	r3, r3, #31
100082a6:	d4fc      	bmi.n	100082a2 <_i2c_master_read_packet+0x16>
	}

	i2c_wait_for_idle(i2c_module);

	/* Flush the FIFO */
	i2c_module->I2C_FLUSH.reg = 1;
100082a8:	2301      	movs	r3, #1
100082aa:	2434      	movs	r4, #52	; 0x34
100082ac:	5513      	strb	r3, [r2, r4]

	/* Enable I2C on bus (start condition). */
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
100082ae:	3c14      	subs	r4, #20
100082b0:	5513      	strb	r3, [r2, r4]
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
100082b2:	880b      	ldrh	r3, [r1, #0]
100082b4:	005b      	lsls	r3, r3, #1
100082b6:	2402      	movs	r4, #2
100082b8:	34ff      	adds	r4, #255	; 0xff
100082ba:	4323      	orrs	r3, r4
100082bc:	b29b      	uxth	r3, r3
100082be:	8013      	strh	r3, [r2, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);
	
	uint16_t counter = 0;
100082c0:	2400      	movs	r4, #0
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
			(packet->address << 1) | I2C_TRANSFER_READ;
	do {
		status = i2c_module->RECEIVE_STATUS.reg;
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
100082c2:	2301      	movs	r3, #1
100082c4:	4698      	mov	r8, r3
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
			(packet->address << 1) | I2C_TRANSFER_READ;
	do {
		status = i2c_module->RECEIVE_STATUS.reg;
100082c6:	7b13      	ldrb	r3, [r2, #12]
100082c8:	b2db      	uxtb	r3, r3
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
100082ca:	4640      	mov	r0, r8
100082cc:	4218      	tst	r0, r3
100082ce:	d006      	beq.n	100082de <_i2c_master_read_packet+0x52>
			packet->data[counter++] = i2c_module->RECEIVE_DATA.reg;
100082d0:	1c67      	adds	r7, r4, #1
100082d2:	7910      	ldrb	r0, [r2, #4]
100082d4:	4684      	mov	ip, r0
100082d6:	6848      	ldr	r0, [r1, #4]
100082d8:	4666      	mov	r6, ip
100082da:	5506      	strb	r6, [r0, r4]
100082dc:	b2bc      	uxth	r4, r7
	} while (counter < length); 
100082de:	42ac      	cmp	r4, r5
100082e0:	d3f1      	bcc.n	100082c6 <_i2c_master_read_packet+0x3a>

	/* Now check whether the core has sent the data out and free the bus. */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
100082e2:	06db      	lsls	r3, r3, #27
100082e4:	d403      	bmi.n	100082ee <_i2c_master_read_packet+0x62>
100082e6:	2110      	movs	r1, #16
		status = i2c_module->TRANSMIT_STATUS.reg;
100082e8:	7a13      	ldrb	r3, [r2, #8]
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
			packet->data[counter++] = i2c_module->RECEIVE_DATA.reg;
	} while (counter < length); 

	/* Now check whether the core has sent the data out and free the bus. */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
100082ea:	420b      	tst	r3, r1
100082ec:	d0fc      	beq.n	100082e8 <_i2c_master_read_packet+0x5c>
		status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition. */
	if (!module->no_stop) {
100082ee:	464b      	mov	r3, r9
100082f0:	7959      	ldrb	r1, [r3, #5]
		i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
	}

	return STATUS_OK;
100082f2:	2300      	movs	r3, #0
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
		status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition. */
	if (!module->no_stop) {
100082f4:	2900      	cmp	r1, #0
100082f6:	d102      	bne.n	100082fe <_i2c_master_read_packet+0x72>
		i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
100082f8:	3320      	adds	r3, #32
100082fa:	54d1      	strb	r1, [r2, r3]
	}

	return STATUS_OK;
100082fc:	2300      	movs	r3, #0
}
100082fe:	0018      	movs	r0, r3
10008300:	bc0c      	pop	{r2, r3}
10008302:	4690      	mov	r8, r2
10008304:	4699      	mov	r9, r3
10008306:	bdf0      	pop	{r4, r5, r6, r7, pc}

10008308 <_i2c_master_write_packet>:
 * \retval STATUS_OK                    The packet was write successfully
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
10008308:	b5f0      	push	{r4, r5, r6, r7, lr}
1000830a:	4684      	mov	ip, r0
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);
	
	I2c *const i2c_module = (module->hw);
1000830c:	6802      	ldr	r2, [r0, #0]
	uint16_t counter = 0;
	uint32_t status  = 0;

	uint16_t length = packet->data_length;
1000830e:	884e      	ldrh	r6, [r1, #2]
10008310:	2428      	movs	r4, #40	; 0x28
10008312:	5d13      	ldrb	r3, [r2, r4]
10008314:	07db      	lsls	r3, r3, #31
10008316:	d4fc      	bmi.n	10008312 <_i2c_master_write_packet+0xa>

	i2c_wait_for_idle(i2c_module);

	/* Flush the FIFO */
	i2c_module->I2C_FLUSH.reg = 1;
10008318:	2301      	movs	r3, #1
1000831a:	2434      	movs	r4, #52	; 0x34
1000831c:	5513      	strb	r3, [r2, r4]

	/* Enable I2C on bus (start condition) */
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
1000831e:	3c14      	subs	r4, #20
10008320:	5513      	strb	r3, [r2, r4]

	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
10008322:	880b      	ldrh	r3, [r1, #0]
10008324:	005b      	lsls	r3, r3, #1
10008326:	34e0      	adds	r4, #224	; 0xe0
10008328:	4323      	orrs	r3, r4
1000832a:	b29b      	uxth	r3, r3
1000832c:	8013      	strh	r3, [r2, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);
	
	I2c *const i2c_module = (module->hw);
	uint16_t counter = 0;
1000832e:	2400      	movs	r4, #0
	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
			((packet->address) << 1) | I2C_TRANSFER_WRITE;
	do {
		status = i2c_module->TRANSMIT_STATUS.reg;
		if (status & I2C_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_Msk) {
10008330:	2501      	movs	r5, #1

	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
			((packet->address) << 1) | I2C_TRANSFER_WRITE;
	do {
		status = i2c_module->TRANSMIT_STATUS.reg;
10008332:	7a13      	ldrb	r3, [r2, #8]
10008334:	b2db      	uxtb	r3, r3
		if (status & I2C_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_Msk) {
10008336:	421d      	tst	r5, r3
10008338:	d004      	beq.n	10008344 <_i2c_master_write_packet+0x3c>
			i2c_module->TRANSMIT_DATA.reg = packet->data[counter++];
1000833a:	1c67      	adds	r7, r4, #1
1000833c:	6848      	ldr	r0, [r1, #4]
1000833e:	5d04      	ldrb	r4, [r0, r4]
10008340:	8014      	strh	r4, [r2, #0]
10008342:	b2bc      	uxth	r4, r7
		}
	} while (counter < length); 
10008344:	42b4      	cmp	r4, r6
10008346:	d3f4      	bcc.n	10008332 <_i2c_master_write_packet+0x2a>

	/* Now check whether the core has sent the data out and free the bus */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
10008348:	06db      	lsls	r3, r3, #27
1000834a:	d403      	bmi.n	10008354 <_i2c_master_write_packet+0x4c>
1000834c:	2110      	movs	r1, #16
			status = i2c_module->TRANSMIT_STATUS.reg;
1000834e:	7a13      	ldrb	r3, [r2, #8]
			i2c_module->TRANSMIT_DATA.reg = packet->data[counter++];
		}
	} while (counter < length); 

	/* Now check whether the core has sent the data out and free the bus */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
10008350:	420b      	tst	r3, r1
10008352:	d0fc      	beq.n	1000834e <_i2c_master_write_packet+0x46>
			status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition */
	if (!module->no_stop) {
10008354:	4663      	mov	r3, ip
10008356:	795b      	ldrb	r3, [r3, #5]
10008358:	2b00      	cmp	r3, #0
1000835a:	d102      	bne.n	10008362 <_i2c_master_write_packet+0x5a>
		i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
1000835c:	2100      	movs	r1, #0
1000835e:	3320      	adds	r3, #32
10008360:	54d1      	strb	r1, [r2, r3]
	}

	return STATUS_OK;
}
10008362:	2000      	movs	r0, #0
10008364:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008366:	46c0      	nop			; (mov r8, r8)

10008368 <i2c_master_get_config_defaults>:
		struct i2c_master_config *const config)
{
	/* Sanity check */
	Assert(config);
	
	config->clock_source    = I2C_CLK_INPUT_3;
10008368:	2303      	movs	r3, #3
1000836a:	7003      	strb	r3, [r0, #0]
	config->clock_divider   = 0x10;
1000836c:	330d      	adds	r3, #13
1000836e:	8043      	strh	r3, [r0, #2]
	config->pin_number_pad0 = PIN_LP_GPIO_8;
10008370:	3b08      	subs	r3, #8
10008372:	6043      	str	r3, [r0, #4]
	config->pin_number_pad1 = PIN_LP_GPIO_9;
10008374:	3301      	adds	r3, #1
10008376:	60c3      	str	r3, [r0, #12]
	config->pinmux_sel_pad0 = MUX_LP_GPIO_8_I2C0_SDA;
10008378:	3b07      	subs	r3, #7
1000837a:	6083      	str	r3, [r0, #8]
	config->pinmux_sel_pad1 = MUX_LP_GPIO_9_I2C0_SCL;
1000837c:	6103      	str	r3, [r0, #16]
}
1000837e:	4770      	bx	lr

10008380 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		I2c *const hw,
		const struct i2c_master_config *const config)
{
10008380:	b570      	push	{r4, r5, r6, lr}
10008382:	0004      	movs	r4, r0
10008384:	0015      	movs	r5, r2
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);
	
	module->hw = hw;
10008386:	6001      	str	r1, [r0, #0]

	/* Sanity check arguments. */
	if ((module == NULL) || (config == NULL))
10008388:	2800      	cmp	r0, #0
1000838a:	d026      	beq.n	100083da <i2c_master_init+0x5a>
1000838c:	2a00      	cmp	r2, #0
1000838e:	d026      	beq.n	100083de <i2c_master_init+0x5e>
10008390:	2228      	movs	r2, #40	; 0x28
10008392:	5c8b      	ldrb	r3, [r1, r2]
10008394:	07db      	lsls	r3, r3, #31
10008396:	d4fc      	bmi.n	10008392 <i2c_master_init+0x12>
 *
 */
static inline void i2c_disable(I2c *const i2c_module)
{
	i2c_wait_for_idle(i2c_module);
	i2c_module->I2C_MODULE_ENABLE.reg = 0;
10008398:	2300      	movs	r3, #0
1000839a:	750b      	strb	r3, [r1, #20]
		return STATUS_ERR_INVALID_ARG;

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
1000839c:	6823      	ldr	r3, [r4, #0]
1000839e:	4a11      	ldr	r2, [pc, #68]	; (100083e4 <i2c_master_init+0x64>)
100083a0:	4293      	cmp	r3, r2
100083a2:	d103      	bne.n	100083ac <i2c_master_init+0x2c>
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
100083a4:	2003      	movs	r0, #3
100083a6:	4b10      	ldr	r3, [pc, #64]	; (100083e8 <i2c_master_init+0x68>)
100083a8:	4798      	blx	r3
100083aa:	e006      	b.n	100083ba <i2c_master_init+0x3a>
	} else if (module->hw == I2C1) {
		system_peripheral_reset(PERIPHERAL_I2C1_CORE);
	} else {
		return STATUS_ERR_INVALID_ARG;
100083ac:	2017      	movs	r0, #23
		return STATUS_ERR_INVALID_ARG;

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
	} else if (module->hw == I2C1) {
100083ae:	4a0f      	ldr	r2, [pc, #60]	; (100083ec <i2c_master_init+0x6c>)
100083b0:	4293      	cmp	r3, r2
100083b2:	d115      	bne.n	100083e0 <i2c_master_init+0x60>
		system_peripheral_reset(PERIPHERAL_I2C1_CORE);
100083b4:	3002      	adds	r0, #2
100083b6:	4b0c      	ldr	r3, [pc, #48]	; (100083e8 <i2c_master_init+0x68>)
100083b8:	4798      	blx	r3
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);

	I2c *const i2c_module = (module->hw);
100083ba:	6824      	ldr	r4, [r4, #0]

	/* Set the pinmux for this i2c module. */
	gpio_pinmux_cofiguration(config->pin_number_pad0, (uint16_t)(config->pinmux_sel_pad0));
100083bc:	8929      	ldrh	r1, [r5, #8]
100083be:	7928      	ldrb	r0, [r5, #4]
100083c0:	4e0b      	ldr	r6, [pc, #44]	; (100083f0 <i2c_master_init+0x70>)
100083c2:	47b0      	blx	r6
	gpio_pinmux_cofiguration(config->pin_number_pad1, (uint16_t)(config->pinmux_sel_pad1));
100083c4:	8a29      	ldrh	r1, [r5, #16]
100083c6:	7b28      	ldrb	r0, [r5, #12]
100083c8:	47b0      	blx	r6
	/* Set clock. */
	i2c_module->CLOCK_SOURCE_SELECT.reg = config->clock_source;
100083ca:	782b      	ldrb	r3, [r5, #0]
100083cc:	7423      	strb	r3, [r4, #16]
	i2c_module->I2C_CLK_DIVIDER.reg = I2C_CLK_DIVIDER_I2C_DIVIDE_RATIO(config->clock_divider);
100083ce:	886b      	ldrh	r3, [r5, #2]
100083d0:	8323      	strh	r3, [r4, #24]
	/* Enable master mode. */
	i2c_module->I2C_MASTER_MODE.reg = I2C_MASTER_MODE_MASTER_ENABLE_1;
100083d2:	2301      	movs	r3, #1
100083d4:	7723      	strb	r3, [r4, #28]
#endif

	/* Set config and return status. */
	_i2c_master_set_config(module, config);

	return STATUS_OK;
100083d6:	2000      	movs	r0, #0
100083d8:	e002      	b.n	100083e0 <i2c_master_init+0x60>
	
	module->hw = hw;

	/* Sanity check arguments. */
	if ((module == NULL) || (config == NULL))
		return STATUS_ERR_INVALID_ARG;
100083da:	2017      	movs	r0, #23
100083dc:	e000      	b.n	100083e0 <i2c_master_init+0x60>
100083de:	2017      	movs	r0, #23

	/* Set config and return status. */
	_i2c_master_set_config(module, config);

	return STATUS_OK;
}
100083e0:	bd70      	pop	{r4, r5, r6, pc}
100083e2:	46c0      	nop			; (mov r8, r8)
100083e4:	40003000 	.word	0x40003000
100083e8:	1000cb61 	.word	0x1000cb61
100083ec:	40003400 	.word	0x40003400
100083f0:	1000c0e9 	.word	0x1000c0e9

100083f4 <i2c_master_read_packet_wait>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
100083f4:	b510      	push	{r4, lr}
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
100083f6:	2800      	cmp	r0, #0
100083f8:	d008      	beq.n	1000840c <i2c_master_read_packet_wait+0x18>
		return STATUS_ERR_INVALID_ARG;
100083fa:	2317      	movs	r3, #23
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
100083fc:	2900      	cmp	r1, #0
100083fe:	d006      	beq.n	1000840e <i2c_master_read_packet_wait+0x1a>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
10008400:	2300      	movs	r3, #0
10008402:	7143      	strb	r3, [r0, #5]

	return _i2c_master_read_packet(module, packet);
10008404:	4b03      	ldr	r3, [pc, #12]	; (10008414 <i2c_master_read_packet_wait+0x20>)
10008406:	4798      	blx	r3
10008408:	0003      	movs	r3, r0
1000840a:	e000      	b.n	1000840e <i2c_master_read_packet_wait+0x1a>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
		return STATUS_ERR_INVALID_ARG;
1000840c:	2317      	movs	r3, #23
#endif

	module->no_stop = false;

	return _i2c_master_read_packet(module, packet);
}
1000840e:	0018      	movs	r0, r3
10008410:	bd10      	pop	{r4, pc}
10008412:	46c0      	nop			; (mov r8, r8)
10008414:	1000828d 	.word	0x1000828d

10008418 <i2c_master_write_packet_wait>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
10008418:	b510      	push	{r4, lr}
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
1000841a:	2800      	cmp	r0, #0
1000841c:	d008      	beq.n	10008430 <i2c_master_write_packet_wait+0x18>
		return STATUS_ERR_INVALID_ARG;
1000841e:	2317      	movs	r3, #23
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
10008420:	2900      	cmp	r1, #0
10008422:	d006      	beq.n	10008432 <i2c_master_write_packet_wait+0x1a>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
10008424:	2300      	movs	r3, #0
10008426:	7143      	strb	r3, [r0, #5]

	return _i2c_master_write_packet(module, packet);
10008428:	4b03      	ldr	r3, [pc, #12]	; (10008438 <i2c_master_write_packet_wait+0x20>)
1000842a:	4798      	blx	r3
1000842c:	0003      	movs	r3, r0
1000842e:	e000      	b.n	10008432 <i2c_master_write_packet_wait+0x1a>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
10008430:	2317      	movs	r3, #23
#endif

	module->no_stop = false;

	return _i2c_master_write_packet(module, packet);
}
10008432:	0018      	movs	r0, r3
10008434:	bd10      	pop	{r4, pc}
10008436:	46c0      	nop			; (mov r8, r8)
10008438:	10008309 	.word	0x10008309

1000843c <i2c_master_write_packet_wait_no_stop>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000843c:	b510      	push	{r4, lr}
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
1000843e:	2800      	cmp	r0, #0
10008440:	d008      	beq.n	10008454 <i2c_master_write_packet_wait_no_stop+0x18>
		return STATUS_ERR_INVALID_ARG;
10008442:	2317      	movs	r3, #23
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
10008444:	2900      	cmp	r1, #0
10008446:	d006      	beq.n	10008456 <i2c_master_write_packet_wait_no_stop+0x1a>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = true;
10008448:	3b16      	subs	r3, #22
1000844a:	7143      	strb	r3, [r0, #5]

	return _i2c_master_write_packet(module, packet);
1000844c:	4b03      	ldr	r3, [pc, #12]	; (1000845c <i2c_master_write_packet_wait_no_stop+0x20>)
1000844e:	4798      	blx	r3
10008450:	0003      	movs	r3, r0
10008452:	e000      	b.n	10008456 <i2c_master_write_packet_wait_no_stop+0x1a>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
10008454:	2317      	movs	r3, #23
#endif

	module->no_stop = true;

	return _i2c_master_write_packet(module, packet);
}
10008456:	0018      	movs	r0, r3
10008458:	bd10      	pop	{r4, pc}
1000845a:	46c0      	nop			; (mov r8, r8)
1000845c:	10008309 	.word	0x10008309

10008460 <set_int_enable>:
 *  interrupt is used.
 *  @param[in]  enable      1 to enable interrupt.
 *  @return     0 if successful.
 */
static int set_int_enable(unsigned char enable)
{
10008460:	b510      	push	{r4, lr}
10008462:	b082      	sub	sp, #8
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
10008464:	2324      	movs	r3, #36	; 0x24
10008466:	4a25      	ldr	r2, [pc, #148]	; (100084fc <set_int_enable+0x9c>)
10008468:	5cd3      	ldrb	r3, [r2, r3]
1000846a:	2b00      	cmp	r3, #0
1000846c:	d019      	beq.n	100084a2 <set_int_enable+0x42>
        if (enable)
1000846e:	2800      	cmp	r0, #0
10008470:	d003      	beq.n	1000847a <set_int_enable+0x1a>
            tmp = BIT_DMP_INT_EN;
10008472:	2202      	movs	r2, #2
10008474:	466b      	mov	r3, sp
10008476:	71da      	strb	r2, [r3, #7]
10008478:	e002      	b.n	10008480 <set_int_enable+0x20>
        else
            tmp = 0x00;
1000847a:	2200      	movs	r2, #0
1000847c:	466b      	mov	r3, sp
1000847e:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
10008480:	4b1e      	ldr	r3, [pc, #120]	; (100084fc <set_int_enable+0x9c>)
10008482:	681a      	ldr	r2, [r3, #0]
10008484:	7c51      	ldrb	r1, [r2, #17]
10008486:	685b      	ldr	r3, [r3, #4]
10008488:	7818      	ldrb	r0, [r3, #0]
1000848a:	466b      	mov	r3, sp
1000848c:	3307      	adds	r3, #7
1000848e:	2201      	movs	r2, #1
10008490:	4c1b      	ldr	r4, [pc, #108]	; (10008500 <set_int_enable+0xa0>)
10008492:	47a0      	blx	r4
10008494:	2800      	cmp	r0, #0
10008496:	d127      	bne.n	100084e8 <set_int_enable+0x88>
            return -1;
        st.chip_cfg.int_enable = tmp;
10008498:	466b      	mov	r3, sp
1000849a:	79da      	ldrb	r2, [r3, #7]
1000849c:	4b17      	ldr	r3, [pc, #92]	; (100084fc <set_int_enable+0x9c>)
1000849e:	745a      	strb	r2, [r3, #17]
100084a0:	e02a      	b.n	100084f8 <set_int_enable+0x98>
    } else {
        if (!st.chip_cfg.sensors)
100084a2:	4b16      	ldr	r3, [pc, #88]	; (100084fc <set_int_enable+0x9c>)
100084a4:	7a9b      	ldrb	r3, [r3, #10]
100084a6:	2b00      	cmp	r3, #0
100084a8:	d021      	beq.n	100084ee <set_int_enable+0x8e>
            return -1;
        if (enable && st.chip_cfg.int_enable)
100084aa:	2800      	cmp	r0, #0
100084ac:	d008      	beq.n	100084c0 <set_int_enable+0x60>
100084ae:	4b13      	ldr	r3, [pc, #76]	; (100084fc <set_int_enable+0x9c>)
100084b0:	7c5b      	ldrb	r3, [r3, #17]
            return 0;
100084b2:	2000      	movs	r0, #0
            return -1;
        st.chip_cfg.int_enable = tmp;
    } else {
        if (!st.chip_cfg.sensors)
            return -1;
        if (enable && st.chip_cfg.int_enable)
100084b4:	2b00      	cmp	r3, #0
100084b6:	d11f      	bne.n	100084f8 <set_int_enable+0x98>
            return 0;
        if (enable)
            tmp = BIT_DATA_RDY_EN;
100084b8:	2201      	movs	r2, #1
100084ba:	466b      	mov	r3, sp
100084bc:	71da      	strb	r2, [r3, #7]
100084be:	e002      	b.n	100084c6 <set_int_enable+0x66>
        else
            tmp = 0x00;
100084c0:	2200      	movs	r2, #0
100084c2:	466b      	mov	r3, sp
100084c4:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
100084c6:	4b0d      	ldr	r3, [pc, #52]	; (100084fc <set_int_enable+0x9c>)
100084c8:	681a      	ldr	r2, [r3, #0]
100084ca:	7c51      	ldrb	r1, [r2, #17]
100084cc:	685b      	ldr	r3, [r3, #4]
100084ce:	7818      	ldrb	r0, [r3, #0]
100084d0:	466b      	mov	r3, sp
100084d2:	3307      	adds	r3, #7
100084d4:	2201      	movs	r2, #1
100084d6:	4c0a      	ldr	r4, [pc, #40]	; (10008500 <set_int_enable+0xa0>)
100084d8:	47a0      	blx	r4
100084da:	2800      	cmp	r0, #0
100084dc:	d10a      	bne.n	100084f4 <set_int_enable+0x94>
            return -1;
        st.chip_cfg.int_enable = tmp;
100084de:	466b      	mov	r3, sp
100084e0:	79da      	ldrb	r2, [r3, #7]
100084e2:	4b06      	ldr	r3, [pc, #24]	; (100084fc <set_int_enable+0x9c>)
100084e4:	745a      	strb	r2, [r3, #17]
100084e6:	e007      	b.n	100084f8 <set_int_enable+0x98>
        if (enable)
            tmp = BIT_DMP_INT_EN;
        else
            tmp = 0x00;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
            return -1;
100084e8:	2001      	movs	r0, #1
100084ea:	4240      	negs	r0, r0
100084ec:	e004      	b.n	100084f8 <set_int_enable+0x98>
        st.chip_cfg.int_enable = tmp;
    } else {
        if (!st.chip_cfg.sensors)
            return -1;
100084ee:	2001      	movs	r0, #1
100084f0:	4240      	negs	r0, r0
100084f2:	e001      	b.n	100084f8 <set_int_enable+0x98>
        if (enable)
            tmp = BIT_DATA_RDY_EN;
        else
            tmp = 0x00;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
            return -1;
100084f4:	2001      	movs	r0, #1
100084f6:	4240      	negs	r0, r0
        st.chip_cfg.int_enable = tmp;
    }
    return 0;
}
100084f8:	b002      	add	sp, #8
100084fa:	bd10      	pop	{r4, pc}
100084fc:	10017ef8 	.word	0x10017ef8
10008500:	1000a93d 	.word	0x1000a93d

10008504 <mpu_reset_fifo>:
/**
 *  @brief  Reset FIFO read/write pointers.
 *  @return 0 if successful.
 */
int mpu_reset_fifo(void)
{
10008504:	b510      	push	{r4, lr}
10008506:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
10008508:	4b79      	ldr	r3, [pc, #484]	; (100086f0 <mpu_reset_fifo+0x1ec>)
1000850a:	7a9b      	ldrb	r3, [r3, #10]
1000850c:	2b00      	cmp	r3, #0
1000850e:	d100      	bne.n	10008512 <mpu_reset_fifo+0xe>
10008510:	e0ce      	b.n	100086b0 <mpu_reset_fifo+0x1ac>
        return -1;

    data = 0;
10008512:	466b      	mov	r3, sp
10008514:	3307      	adds	r3, #7
10008516:	2200      	movs	r2, #0
10008518:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
1000851a:	4a75      	ldr	r2, [pc, #468]	; (100086f0 <mpu_reset_fifo+0x1ec>)
1000851c:	6811      	ldr	r1, [r2, #0]
1000851e:	7c49      	ldrb	r1, [r1, #17]
10008520:	6852      	ldr	r2, [r2, #4]
10008522:	7810      	ldrb	r0, [r2, #0]
10008524:	2201      	movs	r2, #1
10008526:	4c73      	ldr	r4, [pc, #460]	; (100086f4 <mpu_reset_fifo+0x1f0>)
10008528:	47a0      	blx	r4
1000852a:	2800      	cmp	r0, #0
1000852c:	d000      	beq.n	10008530 <mpu_reset_fifo+0x2c>
1000852e:	e0c2      	b.n	100086b6 <mpu_reset_fifo+0x1b2>
        return -1;
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
10008530:	4b6f      	ldr	r3, [pc, #444]	; (100086f0 <mpu_reset_fifo+0x1ec>)
10008532:	681a      	ldr	r2, [r3, #0]
10008534:	7951      	ldrb	r1, [r2, #5]
10008536:	685b      	ldr	r3, [r3, #4]
10008538:	7818      	ldrb	r0, [r3, #0]
1000853a:	466b      	mov	r3, sp
1000853c:	3307      	adds	r3, #7
1000853e:	2201      	movs	r2, #1
10008540:	4c6c      	ldr	r4, [pc, #432]	; (100086f4 <mpu_reset_fifo+0x1f0>)
10008542:	47a0      	blx	r4
10008544:	2800      	cmp	r0, #0
10008546:	d000      	beq.n	1000854a <mpu_reset_fifo+0x46>
10008548:	e0b8      	b.n	100086bc <mpu_reset_fifo+0x1b8>
        return -1;
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
1000854a:	4b69      	ldr	r3, [pc, #420]	; (100086f0 <mpu_reset_fifo+0x1ec>)
1000854c:	681a      	ldr	r2, [r3, #0]
1000854e:	7911      	ldrb	r1, [r2, #4]
10008550:	685b      	ldr	r3, [r3, #4]
10008552:	7818      	ldrb	r0, [r3, #0]
10008554:	466b      	mov	r3, sp
10008556:	3307      	adds	r3, #7
10008558:	2201      	movs	r2, #1
1000855a:	4c66      	ldr	r4, [pc, #408]	; (100086f4 <mpu_reset_fifo+0x1f0>)
1000855c:	47a0      	blx	r4
1000855e:	2800      	cmp	r0, #0
10008560:	d000      	beq.n	10008564 <mpu_reset_fifo+0x60>
10008562:	e0ae      	b.n	100086c2 <mpu_reset_fifo+0x1be>
        return -1;

    if (st.chip_cfg.dmp_on) {
10008564:	2324      	movs	r3, #36	; 0x24
10008566:	4a62      	ldr	r2, [pc, #392]	; (100086f0 <mpu_reset_fifo+0x1ec>)
10008568:	5cd3      	ldrb	r3, [r2, r3]
1000856a:	2b00      	cmp	r3, #0
1000856c:	d04f      	beq.n	1000860e <mpu_reset_fifo+0x10a>
        data = BIT_FIFO_RST | BIT_DMP_RST;
1000856e:	466b      	mov	r3, sp
10008570:	3307      	adds	r3, #7
10008572:	220c      	movs	r2, #12
10008574:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
10008576:	4a5e      	ldr	r2, [pc, #376]	; (100086f0 <mpu_reset_fifo+0x1ec>)
10008578:	6811      	ldr	r1, [r2, #0]
1000857a:	7909      	ldrb	r1, [r1, #4]
1000857c:	6852      	ldr	r2, [r2, #4]
1000857e:	7810      	ldrb	r0, [r2, #0]
10008580:	2201      	movs	r2, #1
10008582:	4c5c      	ldr	r4, [pc, #368]	; (100086f4 <mpu_reset_fifo+0x1f0>)
10008584:	47a0      	blx	r4
10008586:	2800      	cmp	r0, #0
10008588:	d000      	beq.n	1000858c <mpu_reset_fifo+0x88>
1000858a:	e09d      	b.n	100086c8 <mpu_reset_fifo+0x1c4>
            return -1;
        delay_ms(50);
1000858c:	3032      	adds	r0, #50	; 0x32
1000858e:	4b5a      	ldr	r3, [pc, #360]	; (100086f8 <mpu_reset_fifo+0x1f4>)
10008590:	4798      	blx	r3
        data = BIT_DMP_EN | BIT_FIFO_EN;
10008592:	22c0      	movs	r2, #192	; 0xc0
10008594:	466b      	mov	r3, sp
10008596:	71da      	strb	r2, [r3, #7]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
10008598:	4b55      	ldr	r3, [pc, #340]	; (100086f0 <mpu_reset_fifo+0x1ec>)
1000859a:	7a9b      	ldrb	r3, [r3, #10]
1000859c:	07db      	lsls	r3, r3, #31
1000859e:	d502      	bpl.n	100085a6 <mpu_reset_fifo+0xa2>
            data |= BIT_AUX_IF_EN;
100085a0:	3220      	adds	r2, #32
100085a2:	466b      	mov	r3, sp
100085a4:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
100085a6:	4b52      	ldr	r3, [pc, #328]	; (100086f0 <mpu_reset_fifo+0x1ec>)
100085a8:	681a      	ldr	r2, [r3, #0]
100085aa:	7911      	ldrb	r1, [r2, #4]
100085ac:	685b      	ldr	r3, [r3, #4]
100085ae:	7818      	ldrb	r0, [r3, #0]
100085b0:	466b      	mov	r3, sp
100085b2:	3307      	adds	r3, #7
100085b4:	2201      	movs	r2, #1
100085b6:	4c4f      	ldr	r4, [pc, #316]	; (100086f4 <mpu_reset_fifo+0x1f0>)
100085b8:	47a0      	blx	r4
100085ba:	2800      	cmp	r0, #0
100085bc:	d000      	beq.n	100085c0 <mpu_reset_fifo+0xbc>
100085be:	e086      	b.n	100086ce <mpu_reset_fifo+0x1ca>
            return -1;
        if (st.chip_cfg.int_enable)
100085c0:	4b4b      	ldr	r3, [pc, #300]	; (100086f0 <mpu_reset_fifo+0x1ec>)
100085c2:	7c5b      	ldrb	r3, [r3, #17]
100085c4:	2b00      	cmp	r3, #0
100085c6:	d003      	beq.n	100085d0 <mpu_reset_fifo+0xcc>
            data = BIT_DMP_INT_EN;
100085c8:	2202      	movs	r2, #2
100085ca:	466b      	mov	r3, sp
100085cc:	71da      	strb	r2, [r3, #7]
100085ce:	e002      	b.n	100085d6 <mpu_reset_fifo+0xd2>
        else
            data = 0;
100085d0:	2200      	movs	r2, #0
100085d2:	466b      	mov	r3, sp
100085d4:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
100085d6:	4b46      	ldr	r3, [pc, #280]	; (100086f0 <mpu_reset_fifo+0x1ec>)
100085d8:	681a      	ldr	r2, [r3, #0]
100085da:	7c51      	ldrb	r1, [r2, #17]
100085dc:	685b      	ldr	r3, [r3, #4]
100085de:	7818      	ldrb	r0, [r3, #0]
100085e0:	466b      	mov	r3, sp
100085e2:	3307      	adds	r3, #7
100085e4:	2201      	movs	r2, #1
100085e6:	4c43      	ldr	r4, [pc, #268]	; (100086f4 <mpu_reset_fifo+0x1f0>)
100085e8:	47a0      	blx	r4
100085ea:	2800      	cmp	r0, #0
100085ec:	d172      	bne.n	100086d4 <mpu_reset_fifo+0x1d0>
            return -1;
        data = 0;
100085ee:	466b      	mov	r3, sp
100085f0:	3307      	adds	r3, #7
100085f2:	2200      	movs	r2, #0
100085f4:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
100085f6:	4a3e      	ldr	r2, [pc, #248]	; (100086f0 <mpu_reset_fifo+0x1ec>)
100085f8:	6811      	ldr	r1, [r2, #0]
100085fa:	7949      	ldrb	r1, [r1, #5]
100085fc:	6852      	ldr	r2, [r2, #4]
100085fe:	7810      	ldrb	r0, [r2, #0]
10008600:	2201      	movs	r2, #1
10008602:	4c3c      	ldr	r4, [pc, #240]	; (100086f4 <mpu_reset_fifo+0x1f0>)
10008604:	47a0      	blx	r4
10008606:	1e43      	subs	r3, r0, #1
10008608:	4198      	sbcs	r0, r3
1000860a:	4240      	negs	r0, r0
1000860c:	e06d      	b.n	100086ea <mpu_reset_fifo+0x1e6>
            return -1;
    } else {
        data = BIT_FIFO_RST;
1000860e:	466b      	mov	r3, sp
10008610:	3307      	adds	r3, #7
10008612:	2204      	movs	r2, #4
10008614:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
10008616:	4a36      	ldr	r2, [pc, #216]	; (100086f0 <mpu_reset_fifo+0x1ec>)
10008618:	6811      	ldr	r1, [r2, #0]
1000861a:	7909      	ldrb	r1, [r1, #4]
1000861c:	6852      	ldr	r2, [r2, #4]
1000861e:	7810      	ldrb	r0, [r2, #0]
10008620:	2201      	movs	r2, #1
10008622:	4c34      	ldr	r4, [pc, #208]	; (100086f4 <mpu_reset_fifo+0x1f0>)
10008624:	47a0      	blx	r4
10008626:	2800      	cmp	r0, #0
10008628:	d157      	bne.n	100086da <mpu_reset_fifo+0x1d6>
            return -1;
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
1000862a:	4b31      	ldr	r3, [pc, #196]	; (100086f0 <mpu_reset_fifo+0x1ec>)
1000862c:	7c9b      	ldrb	r3, [r3, #18]
1000862e:	2b00      	cmp	r3, #0
10008630:	d103      	bne.n	1000863a <mpu_reset_fifo+0x136>
10008632:	4b2f      	ldr	r3, [pc, #188]	; (100086f0 <mpu_reset_fifo+0x1ec>)
10008634:	7a9b      	ldrb	r3, [r3, #10]
10008636:	07db      	lsls	r3, r3, #31
10008638:	d403      	bmi.n	10008642 <mpu_reset_fifo+0x13e>
            data = BIT_FIFO_EN;
1000863a:	2240      	movs	r2, #64	; 0x40
1000863c:	466b      	mov	r3, sp
1000863e:	71da      	strb	r2, [r3, #7]
10008640:	e002      	b.n	10008648 <mpu_reset_fifo+0x144>
        else
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
10008642:	2260      	movs	r2, #96	; 0x60
10008644:	466b      	mov	r3, sp
10008646:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
10008648:	4b29      	ldr	r3, [pc, #164]	; (100086f0 <mpu_reset_fifo+0x1ec>)
1000864a:	681a      	ldr	r2, [r3, #0]
1000864c:	7911      	ldrb	r1, [r2, #4]
1000864e:	685b      	ldr	r3, [r3, #4]
10008650:	7818      	ldrb	r0, [r3, #0]
10008652:	466b      	mov	r3, sp
10008654:	3307      	adds	r3, #7
10008656:	2201      	movs	r2, #1
10008658:	4c26      	ldr	r4, [pc, #152]	; (100086f4 <mpu_reset_fifo+0x1f0>)
1000865a:	47a0      	blx	r4
1000865c:	2800      	cmp	r0, #0
1000865e:	d13f      	bne.n	100086e0 <mpu_reset_fifo+0x1dc>
            return -1;
        delay_ms(50);
10008660:	3032      	adds	r0, #50	; 0x32
10008662:	4b25      	ldr	r3, [pc, #148]	; (100086f8 <mpu_reset_fifo+0x1f4>)
10008664:	4798      	blx	r3
        if (st.chip_cfg.int_enable)
10008666:	4b22      	ldr	r3, [pc, #136]	; (100086f0 <mpu_reset_fifo+0x1ec>)
10008668:	7c5b      	ldrb	r3, [r3, #17]
1000866a:	2b00      	cmp	r3, #0
1000866c:	d003      	beq.n	10008676 <mpu_reset_fifo+0x172>
            data = BIT_DATA_RDY_EN;
1000866e:	2201      	movs	r2, #1
10008670:	466b      	mov	r3, sp
10008672:	71da      	strb	r2, [r3, #7]
10008674:	e002      	b.n	1000867c <mpu_reset_fifo+0x178>
        else
            data = 0;
10008676:	2200      	movs	r2, #0
10008678:	466b      	mov	r3, sp
1000867a:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
1000867c:	4b1c      	ldr	r3, [pc, #112]	; (100086f0 <mpu_reset_fifo+0x1ec>)
1000867e:	681a      	ldr	r2, [r3, #0]
10008680:	7c51      	ldrb	r1, [r2, #17]
10008682:	685b      	ldr	r3, [r3, #4]
10008684:	7818      	ldrb	r0, [r3, #0]
10008686:	466b      	mov	r3, sp
10008688:	3307      	adds	r3, #7
1000868a:	2201      	movs	r2, #1
1000868c:	4c19      	ldr	r4, [pc, #100]	; (100086f4 <mpu_reset_fifo+0x1f0>)
1000868e:	47a0      	blx	r4
10008690:	2800      	cmp	r0, #0
10008692:	d128      	bne.n	100086e6 <mpu_reset_fifo+0x1e2>
            return -1;
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
10008694:	4a16      	ldr	r2, [pc, #88]	; (100086f0 <mpu_reset_fifo+0x1ec>)
10008696:	0013      	movs	r3, r2
10008698:	3310      	adds	r3, #16
1000869a:	6811      	ldr	r1, [r2, #0]
1000869c:	7949      	ldrb	r1, [r1, #5]
1000869e:	6852      	ldr	r2, [r2, #4]
100086a0:	7810      	ldrb	r0, [r2, #0]
100086a2:	2201      	movs	r2, #1
100086a4:	4c13      	ldr	r4, [pc, #76]	; (100086f4 <mpu_reset_fifo+0x1f0>)
100086a6:	47a0      	blx	r4
100086a8:	1e43      	subs	r3, r0, #1
100086aa:	4198      	sbcs	r0, r3
100086ac:	4240      	negs	r0, r0
100086ae:	e01c      	b.n	100086ea <mpu_reset_fifo+0x1e6>
int mpu_reset_fifo(void)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
100086b0:	2001      	movs	r0, #1
100086b2:	4240      	negs	r0, r0
100086b4:	e019      	b.n	100086ea <mpu_reset_fifo+0x1e6>

    data = 0;
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
        return -1;
100086b6:	2001      	movs	r0, #1
100086b8:	4240      	negs	r0, r0
100086ba:	e016      	b.n	100086ea <mpu_reset_fifo+0x1e6>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
        return -1;
100086bc:	2001      	movs	r0, #1
100086be:	4240      	negs	r0, r0
100086c0:	e013      	b.n	100086ea <mpu_reset_fifo+0x1e6>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
        return -1;
100086c2:	2001      	movs	r0, #1
100086c4:	4240      	negs	r0, r0
100086c6:	e010      	b.n	100086ea <mpu_reset_fifo+0x1e6>

    if (st.chip_cfg.dmp_on) {
        data = BIT_FIFO_RST | BIT_DMP_RST;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
            return -1;
100086c8:	2001      	movs	r0, #1
100086ca:	4240      	negs	r0, r0
100086cc:	e00d      	b.n	100086ea <mpu_reset_fifo+0x1e6>
        delay_ms(50);
        data = BIT_DMP_EN | BIT_FIFO_EN;
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
            data |= BIT_AUX_IF_EN;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
            return -1;
100086ce:	2001      	movs	r0, #1
100086d0:	4240      	negs	r0, r0
100086d2:	e00a      	b.n	100086ea <mpu_reset_fifo+0x1e6>
        if (st.chip_cfg.int_enable)
            data = BIT_DMP_INT_EN;
        else
            data = 0;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
            return -1;
100086d4:	2001      	movs	r0, #1
100086d6:	4240      	negs	r0, r0
100086d8:	e007      	b.n	100086ea <mpu_reset_fifo+0x1e6>
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
            return -1;
    } else {
        data = BIT_FIFO_RST;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
            return -1;
100086da:	2001      	movs	r0, #1
100086dc:	4240      	negs	r0, r0
100086de:	e004      	b.n	100086ea <mpu_reset_fifo+0x1e6>
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
            data = BIT_FIFO_EN;
        else
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
            return -1;
100086e0:	2001      	movs	r0, #1
100086e2:	4240      	negs	r0, r0
100086e4:	e001      	b.n	100086ea <mpu_reset_fifo+0x1e6>
        if (st.chip_cfg.int_enable)
            data = BIT_DATA_RDY_EN;
        else
            data = 0;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
            return -1;
100086e6:	2001      	movs	r0, #1
100086e8:	4240      	negs	r0, r0
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
            return -1;
    }
    return 0;
}
100086ea:	b002      	add	sp, #8
100086ec:	bd10      	pop	{r4, pc}
100086ee:	46c0      	nop			; (mov r8, r8)
100086f0:	10017ef8 	.word	0x10017ef8
100086f4:	1000a93d 	.word	0x1000a93d
100086f8:	10008129 	.word	0x10008129

100086fc <mpu_set_gyro_fsr>:
 *  @brief      Set the gyro full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_gyro_fsr(unsigned short fsr)
{
100086fc:	b510      	push	{r4, lr}
100086fe:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
10008700:	4b24      	ldr	r3, [pc, #144]	; (10008794 <mpu_set_gyro_fsr+0x98>)
10008702:	7a9b      	ldrb	r3, [r3, #10]
10008704:	2b00      	cmp	r3, #0
10008706:	d03b      	beq.n	10008780 <mpu_set_gyro_fsr+0x84>
        return -1;

    switch (fsr) {
10008708:	23fa      	movs	r3, #250	; 0xfa
1000870a:	005b      	lsls	r3, r3, #1
1000870c:	4298      	cmp	r0, r3
1000870e:	d010      	beq.n	10008732 <mpu_set_gyro_fsr+0x36>
10008710:	d802      	bhi.n	10008718 <mpu_set_gyro_fsr+0x1c>
10008712:	28fa      	cmp	r0, #250	; 0xfa
10008714:	d009      	beq.n	1000872a <mpu_set_gyro_fsr+0x2e>
10008716:	e036      	b.n	10008786 <mpu_set_gyro_fsr+0x8a>
10008718:	23fa      	movs	r3, #250	; 0xfa
1000871a:	009b      	lsls	r3, r3, #2
1000871c:	4298      	cmp	r0, r3
1000871e:	d00c      	beq.n	1000873a <mpu_set_gyro_fsr+0x3e>
10008720:	23fa      	movs	r3, #250	; 0xfa
10008722:	00db      	lsls	r3, r3, #3
10008724:	4298      	cmp	r0, r3
10008726:	d00c      	beq.n	10008742 <mpu_set_gyro_fsr+0x46>
10008728:	e02d      	b.n	10008786 <mpu_set_gyro_fsr+0x8a>
    case 250:
        data = INV_FSR_250DPS << 3;
1000872a:	2200      	movs	r2, #0
1000872c:	466b      	mov	r3, sp
1000872e:	71da      	strb	r2, [r3, #7]
        break;
10008730:	e00a      	b.n	10008748 <mpu_set_gyro_fsr+0x4c>
    case 500:
        data = INV_FSR_500DPS << 3;
10008732:	2208      	movs	r2, #8
10008734:	466b      	mov	r3, sp
10008736:	71da      	strb	r2, [r3, #7]
        break;
10008738:	e006      	b.n	10008748 <mpu_set_gyro_fsr+0x4c>
    case 1000:
        data = INV_FSR_1000DPS << 3;
1000873a:	2210      	movs	r2, #16
1000873c:	466b      	mov	r3, sp
1000873e:	71da      	strb	r2, [r3, #7]
        break;
10008740:	e002      	b.n	10008748 <mpu_set_gyro_fsr+0x4c>
    case 2000:
        data = INV_FSR_2000DPS << 3;
10008742:	2218      	movs	r2, #24
10008744:	466b      	mov	r3, sp
10008746:	71da      	strb	r2, [r3, #7]
        break;
    default:
        return -1;
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
10008748:	466b      	mov	r3, sp
1000874a:	3307      	adds	r3, #7
1000874c:	781b      	ldrb	r3, [r3, #0]
1000874e:	4a11      	ldr	r2, [pc, #68]	; (10008794 <mpu_set_gyro_fsr+0x98>)
10008750:	7a12      	ldrb	r2, [r2, #8]
10008752:	08db      	lsrs	r3, r3, #3
        return 0;
10008754:	2000      	movs	r0, #0
        break;
    default:
        return -1;
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
10008756:	429a      	cmp	r2, r3
10008758:	d01a      	beq.n	10008790 <mpu_set_gyro_fsr+0x94>
        return 0;
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
1000875a:	4b0e      	ldr	r3, [pc, #56]	; (10008794 <mpu_set_gyro_fsr+0x98>)
1000875c:	681a      	ldr	r2, [r3, #0]
1000875e:	7991      	ldrb	r1, [r2, #6]
10008760:	685b      	ldr	r3, [r3, #4]
10008762:	7818      	ldrb	r0, [r3, #0]
10008764:	466b      	mov	r3, sp
10008766:	3307      	adds	r3, #7
10008768:	2201      	movs	r2, #1
1000876a:	4c0b      	ldr	r4, [pc, #44]	; (10008798 <mpu_set_gyro_fsr+0x9c>)
1000876c:	47a0      	blx	r4
1000876e:	2800      	cmp	r0, #0
10008770:	d10c      	bne.n	1000878c <mpu_set_gyro_fsr+0x90>
        return -1;
    st.chip_cfg.gyro_fsr = data >> 3;
10008772:	466b      	mov	r3, sp
10008774:	3307      	adds	r3, #7
10008776:	781b      	ldrb	r3, [r3, #0]
10008778:	08db      	lsrs	r3, r3, #3
1000877a:	4a06      	ldr	r2, [pc, #24]	; (10008794 <mpu_set_gyro_fsr+0x98>)
1000877c:	7213      	strb	r3, [r2, #8]
    return 0;
1000877e:	e007      	b.n	10008790 <mpu_set_gyro_fsr+0x94>
int mpu_set_gyro_fsr(unsigned short fsr)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
10008780:	2001      	movs	r0, #1
10008782:	4240      	negs	r0, r0
10008784:	e004      	b.n	10008790 <mpu_set_gyro_fsr+0x94>
        break;
    case 2000:
        data = INV_FSR_2000DPS << 3;
        break;
    default:
        return -1;
10008786:	2001      	movs	r0, #1
10008788:	4240      	negs	r0, r0
1000878a:	e001      	b.n	10008790 <mpu_set_gyro_fsr+0x94>
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
        return 0;
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
        return -1;
1000878c:	2001      	movs	r0, #1
1000878e:	4240      	negs	r0, r0
    st.chip_cfg.gyro_fsr = data >> 3;
    return 0;
}
10008790:	b002      	add	sp, #8
10008792:	bd10      	pop	{r4, pc}
10008794:	10017ef8 	.word	0x10017ef8
10008798:	1000a93d 	.word	0x1000a93d

1000879c <mpu_get_accel_fsr>:
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_accel_fsr(unsigned char *fsr)
{
    switch (st.chip_cfg.accel_fsr) {
1000879c:	4b11      	ldr	r3, [pc, #68]	; (100087e4 <mpu_get_accel_fsr+0x48>)
1000879e:	7a5b      	ldrb	r3, [r3, #9]
100087a0:	2b01      	cmp	r3, #1
100087a2:	d009      	beq.n	100087b8 <mpu_get_accel_fsr+0x1c>
100087a4:	2b00      	cmp	r3, #0
100087a6:	d004      	beq.n	100087b2 <mpu_get_accel_fsr+0x16>
100087a8:	2b02      	cmp	r3, #2
100087aa:	d008      	beq.n	100087be <mpu_get_accel_fsr+0x22>
100087ac:	2b03      	cmp	r3, #3
100087ae:	d009      	beq.n	100087c4 <mpu_get_accel_fsr+0x28>
100087b0:	e014      	b.n	100087dc <mpu_get_accel_fsr+0x40>
    case INV_FSR_2G:
        fsr[0] = 2;
100087b2:	2302      	movs	r3, #2
100087b4:	7003      	strb	r3, [r0, #0]
        break;
100087b6:	e007      	b.n	100087c8 <mpu_get_accel_fsr+0x2c>
    case INV_FSR_4G:
        fsr[0] = 4;
100087b8:	2304      	movs	r3, #4
100087ba:	7003      	strb	r3, [r0, #0]
        break;
100087bc:	e004      	b.n	100087c8 <mpu_get_accel_fsr+0x2c>
    case INV_FSR_8G:
        fsr[0] = 8;
100087be:	2308      	movs	r3, #8
100087c0:	7003      	strb	r3, [r0, #0]
        break;
100087c2:	e001      	b.n	100087c8 <mpu_get_accel_fsr+0x2c>
    case INV_FSR_16G:
        fsr[0] = 16;
100087c4:	2310      	movs	r3, #16
100087c6:	7003      	strb	r3, [r0, #0]
        break;
    default:
        return -1;
    }
    if (st.chip_cfg.accel_half)
100087c8:	4b06      	ldr	r3, [pc, #24]	; (100087e4 <mpu_get_accel_fsr+0x48>)
100087ca:	7cda      	ldrb	r2, [r3, #19]
        fsr[0] <<= 1;
    return 0;
100087cc:	2300      	movs	r3, #0
        fsr[0] = 16;
        break;
    default:
        return -1;
    }
    if (st.chip_cfg.accel_half)
100087ce:	2a00      	cmp	r2, #0
100087d0:	d006      	beq.n	100087e0 <mpu_get_accel_fsr+0x44>
        fsr[0] <<= 1;
100087d2:	7803      	ldrb	r3, [r0, #0]
100087d4:	005b      	lsls	r3, r3, #1
100087d6:	7003      	strb	r3, [r0, #0]
    return 0;
100087d8:	2300      	movs	r3, #0
100087da:	e001      	b.n	100087e0 <mpu_get_accel_fsr+0x44>
        break;
    case INV_FSR_16G:
        fsr[0] = 16;
        break;
    default:
        return -1;
100087dc:	2301      	movs	r3, #1
100087de:	425b      	negs	r3, r3
    }
    if (st.chip_cfg.accel_half)
        fsr[0] <<= 1;
    return 0;
}
100087e0:	0018      	movs	r0, r3
100087e2:	4770      	bx	lr
100087e4:	10017ef8 	.word	0x10017ef8

100087e8 <mpu_set_accel_fsr>:
 *  @brief      Set the accel full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_accel_fsr(unsigned char fsr)
{
100087e8:	b510      	push	{r4, lr}
100087ea:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
100087ec:	4b21      	ldr	r3, [pc, #132]	; (10008874 <mpu_set_accel_fsr+0x8c>)
100087ee:	7a9b      	ldrb	r3, [r3, #10]
100087f0:	2b00      	cmp	r3, #0
100087f2:	d035      	beq.n	10008860 <mpu_set_accel_fsr+0x78>
        return -1;

    switch (fsr) {
100087f4:	2804      	cmp	r0, #4
100087f6:	d00c      	beq.n	10008812 <mpu_set_accel_fsr+0x2a>
100087f8:	d802      	bhi.n	10008800 <mpu_set_accel_fsr+0x18>
100087fa:	2802      	cmp	r0, #2
100087fc:	d005      	beq.n	1000880a <mpu_set_accel_fsr+0x22>
100087fe:	e032      	b.n	10008866 <mpu_set_accel_fsr+0x7e>
10008800:	2808      	cmp	r0, #8
10008802:	d00a      	beq.n	1000881a <mpu_set_accel_fsr+0x32>
10008804:	2810      	cmp	r0, #16
10008806:	d00c      	beq.n	10008822 <mpu_set_accel_fsr+0x3a>
10008808:	e02d      	b.n	10008866 <mpu_set_accel_fsr+0x7e>
    case 2:
        data = INV_FSR_2G << 3;
1000880a:	2200      	movs	r2, #0
1000880c:	466b      	mov	r3, sp
1000880e:	71da      	strb	r2, [r3, #7]
        break;
10008810:	e00a      	b.n	10008828 <mpu_set_accel_fsr+0x40>
    case 4:
        data = INV_FSR_4G << 3;
10008812:	2208      	movs	r2, #8
10008814:	466b      	mov	r3, sp
10008816:	71da      	strb	r2, [r3, #7]
        break;
10008818:	e006      	b.n	10008828 <mpu_set_accel_fsr+0x40>
    case 8:
        data = INV_FSR_8G << 3;
1000881a:	2210      	movs	r2, #16
1000881c:	466b      	mov	r3, sp
1000881e:	71da      	strb	r2, [r3, #7]
        break;
10008820:	e002      	b.n	10008828 <mpu_set_accel_fsr+0x40>
    case 16:
        data = INV_FSR_16G << 3;
10008822:	2218      	movs	r2, #24
10008824:	466b      	mov	r3, sp
10008826:	71da      	strb	r2, [r3, #7]
        break;
    default:
        return -1;
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
10008828:	466b      	mov	r3, sp
1000882a:	3307      	adds	r3, #7
1000882c:	781b      	ldrb	r3, [r3, #0]
1000882e:	4a11      	ldr	r2, [pc, #68]	; (10008874 <mpu_set_accel_fsr+0x8c>)
10008830:	7a52      	ldrb	r2, [r2, #9]
10008832:	08db      	lsrs	r3, r3, #3
        return 0;
10008834:	2000      	movs	r0, #0
        break;
    default:
        return -1;
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
10008836:	429a      	cmp	r2, r3
10008838:	d01a      	beq.n	10008870 <mpu_set_accel_fsr+0x88>
        return 0;
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
1000883a:	4b0e      	ldr	r3, [pc, #56]	; (10008874 <mpu_set_accel_fsr+0x8c>)
1000883c:	681a      	ldr	r2, [r3, #0]
1000883e:	79d1      	ldrb	r1, [r2, #7]
10008840:	685b      	ldr	r3, [r3, #4]
10008842:	7818      	ldrb	r0, [r3, #0]
10008844:	466b      	mov	r3, sp
10008846:	3307      	adds	r3, #7
10008848:	2201      	movs	r2, #1
1000884a:	4c0b      	ldr	r4, [pc, #44]	; (10008878 <mpu_set_accel_fsr+0x90>)
1000884c:	47a0      	blx	r4
1000884e:	2800      	cmp	r0, #0
10008850:	d10c      	bne.n	1000886c <mpu_set_accel_fsr+0x84>
        return -1;
    st.chip_cfg.accel_fsr = data >> 3;
10008852:	466b      	mov	r3, sp
10008854:	3307      	adds	r3, #7
10008856:	781b      	ldrb	r3, [r3, #0]
10008858:	08db      	lsrs	r3, r3, #3
1000885a:	4a06      	ldr	r2, [pc, #24]	; (10008874 <mpu_set_accel_fsr+0x8c>)
1000885c:	7253      	strb	r3, [r2, #9]
    return 0;
1000885e:	e007      	b.n	10008870 <mpu_set_accel_fsr+0x88>
int mpu_set_accel_fsr(unsigned char fsr)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
10008860:	2001      	movs	r0, #1
10008862:	4240      	negs	r0, r0
10008864:	e004      	b.n	10008870 <mpu_set_accel_fsr+0x88>
        break;
    case 16:
        data = INV_FSR_16G << 3;
        break;
    default:
        return -1;
10008866:	2001      	movs	r0, #1
10008868:	4240      	negs	r0, r0
1000886a:	e001      	b.n	10008870 <mpu_set_accel_fsr+0x88>
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
        return 0;
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
        return -1;
1000886c:	2001      	movs	r0, #1
1000886e:	4240      	negs	r0, r0
    st.chip_cfg.accel_fsr = data >> 3;
    return 0;
}
10008870:	b002      	add	sp, #8
10008872:	bd10      	pop	{r4, pc}
10008874:	10017ef8 	.word	0x10017ef8
10008878:	1000a93d 	.word	0x1000a93d

1000887c <mpu_set_lpf>:
 *  The following LPF settings are supported: 188, 98, 42, 20, 10, 5.
 *  @param[in]  lpf Desired LPF setting.
 *  @return     0 if successful.
 */
int mpu_set_lpf(unsigned short lpf)
{
1000887c:	b510      	push	{r4, lr}
1000887e:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
10008880:	4b2b      	ldr	r3, [pc, #172]	; (10008930 <mpu_set_lpf+0xb4>)
10008882:	7a9b      	ldrb	r3, [r3, #10]
10008884:	2b00      	cmp	r3, #0
10008886:	d049      	beq.n	1000891c <mpu_set_lpf+0xa0>
        return -1;

    if (lpf >= 188)
10008888:	28bb      	cmp	r0, #187	; 0xbb
1000888a:	d903      	bls.n	10008894 <mpu_set_lpf+0x18>
        data = INV_FILTER_188HZ;
1000888c:	2201      	movs	r2, #1
1000888e:	466b      	mov	r3, sp
10008890:	71da      	strb	r2, [r3, #7]
10008892:	e01a      	b.n	100088ca <mpu_set_lpf+0x4e>
    else if (lpf >= 98)
10008894:	2861      	cmp	r0, #97	; 0x61
10008896:	d903      	bls.n	100088a0 <mpu_set_lpf+0x24>
        data = INV_FILTER_98HZ;
10008898:	2202      	movs	r2, #2
1000889a:	466b      	mov	r3, sp
1000889c:	71da      	strb	r2, [r3, #7]
1000889e:	e014      	b.n	100088ca <mpu_set_lpf+0x4e>
    else if (lpf >= 42)
100088a0:	2829      	cmp	r0, #41	; 0x29
100088a2:	d903      	bls.n	100088ac <mpu_set_lpf+0x30>
        data = INV_FILTER_42HZ;
100088a4:	2203      	movs	r2, #3
100088a6:	466b      	mov	r3, sp
100088a8:	71da      	strb	r2, [r3, #7]
100088aa:	e00e      	b.n	100088ca <mpu_set_lpf+0x4e>
    else if (lpf >= 20)
100088ac:	2813      	cmp	r0, #19
100088ae:	d903      	bls.n	100088b8 <mpu_set_lpf+0x3c>
        data = INV_FILTER_20HZ;
100088b0:	2204      	movs	r2, #4
100088b2:	466b      	mov	r3, sp
100088b4:	71da      	strb	r2, [r3, #7]
100088b6:	e008      	b.n	100088ca <mpu_set_lpf+0x4e>
    else if (lpf >= 10)
100088b8:	2809      	cmp	r0, #9
100088ba:	d903      	bls.n	100088c4 <mpu_set_lpf+0x48>
        data = INV_FILTER_10HZ;
100088bc:	2205      	movs	r2, #5
100088be:	466b      	mov	r3, sp
100088c0:	71da      	strb	r2, [r3, #7]
100088c2:	e002      	b.n	100088ca <mpu_set_lpf+0x4e>
    else
        data = INV_FILTER_5HZ;
100088c4:	2206      	movs	r2, #6
100088c6:	466b      	mov	r3, sp
100088c8:	71da      	strb	r2, [r3, #7]

    if (st.chip_cfg.lpf == data)
100088ca:	4b19      	ldr	r3, [pc, #100]	; (10008930 <mpu_set_lpf+0xb4>)
100088cc:	7ada      	ldrb	r2, [r3, #11]
100088ce:	466b      	mov	r3, sp
100088d0:	3307      	adds	r3, #7
100088d2:	781b      	ldrb	r3, [r3, #0]
        return 0;
100088d4:	2000      	movs	r0, #0
    else if (lpf >= 10)
        data = INV_FILTER_10HZ;
    else
        data = INV_FILTER_5HZ;

    if (st.chip_cfg.lpf == data)
100088d6:	429a      	cmp	r2, r3
100088d8:	d028      	beq.n	1000892c <mpu_set_lpf+0xb0>
        return 0;
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
100088da:	4b15      	ldr	r3, [pc, #84]	; (10008930 <mpu_set_lpf+0xb4>)
100088dc:	681a      	ldr	r2, [r3, #0]
100088de:	7891      	ldrb	r1, [r2, #2]
100088e0:	685b      	ldr	r3, [r3, #4]
100088e2:	7818      	ldrb	r0, [r3, #0]
100088e4:	466b      	mov	r3, sp
100088e6:	3307      	adds	r3, #7
100088e8:	2201      	movs	r2, #1
100088ea:	4c12      	ldr	r4, [pc, #72]	; (10008934 <mpu_set_lpf+0xb8>)
100088ec:	47a0      	blx	r4
100088ee:	2800      	cmp	r0, #0
100088f0:	d117      	bne.n	10008922 <mpu_set_lpf+0xa6>
        return -1;
#ifdef MPU6500
    data = BIT_FIFO_SIZE_1024 | data;
100088f2:	466b      	mov	r3, sp
100088f4:	3307      	adds	r3, #7
100088f6:	7819      	ldrb	r1, [r3, #0]
100088f8:	2240      	movs	r2, #64	; 0x40
100088fa:	430a      	orrs	r2, r1
100088fc:	701a      	strb	r2, [r3, #0]

    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, &data))
100088fe:	4a0c      	ldr	r2, [pc, #48]	; (10008930 <mpu_set_lpf+0xb4>)
10008900:	6811      	ldr	r1, [r2, #0]
10008902:	7a09      	ldrb	r1, [r1, #8]
10008904:	6852      	ldr	r2, [r2, #4]
10008906:	7810      	ldrb	r0, [r2, #0]
10008908:	2201      	movs	r2, #1
1000890a:	4c0a      	ldr	r4, [pc, #40]	; (10008934 <mpu_set_lpf+0xb8>)
1000890c:	47a0      	blx	r4
1000890e:	2800      	cmp	r0, #0
10008910:	d10a      	bne.n	10008928 <mpu_set_lpf+0xac>
            return -1;
#endif
    st.chip_cfg.lpf = data;
10008912:	466b      	mov	r3, sp
10008914:	79da      	ldrb	r2, [r3, #7]
10008916:	4b06      	ldr	r3, [pc, #24]	; (10008930 <mpu_set_lpf+0xb4>)
10008918:	72da      	strb	r2, [r3, #11]
    return 0;
1000891a:	e007      	b.n	1000892c <mpu_set_lpf+0xb0>
int mpu_set_lpf(unsigned short lpf)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
1000891c:	2001      	movs	r0, #1
1000891e:	4240      	negs	r0, r0
10008920:	e004      	b.n	1000892c <mpu_set_lpf+0xb0>
        data = INV_FILTER_5HZ;

    if (st.chip_cfg.lpf == data)
        return 0;
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
        return -1;
10008922:	2001      	movs	r0, #1
10008924:	4240      	negs	r0, r0
10008926:	e001      	b.n	1000892c <mpu_set_lpf+0xb0>
#ifdef MPU6500
    data = BIT_FIFO_SIZE_1024 | data;

    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, &data))
            return -1;
10008928:	2001      	movs	r0, #1
1000892a:	4240      	negs	r0, r0
#endif
    st.chip_cfg.lpf = data;
    return 0;
}
1000892c:	b002      	add	sp, #8
1000892e:	bd10      	pop	{r4, pc}
10008930:	10017ef8 	.word	0x10017ef8
10008934:	1000a93d 	.word	0x1000a93d

10008938 <mpu_get_sample_rate>:
 *  @param[out] rate    Current sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_get_sample_rate(unsigned short *rate)
{
    if (st.chip_cfg.dmp_on)
10008938:	2324      	movs	r3, #36	; 0x24
1000893a:	4a05      	ldr	r2, [pc, #20]	; (10008950 <mpu_get_sample_rate+0x18>)
1000893c:	5cd3      	ldrb	r3, [r2, r3]
1000893e:	2b00      	cmp	r3, #0
10008940:	d103      	bne.n	1000894a <mpu_get_sample_rate+0x12>
        return -1;
    else
        rate[0] = st.chip_cfg.sample_rate;
10008942:	89d3      	ldrh	r3, [r2, #14]
10008944:	8003      	strh	r3, [r0, #0]
    return 0;
10008946:	2000      	movs	r0, #0
10008948:	e001      	b.n	1000894e <mpu_get_sample_rate+0x16>
 *  @return     0 if successful.
 */
int mpu_get_sample_rate(unsigned short *rate)
{
    if (st.chip_cfg.dmp_on)
        return -1;
1000894a:	2001      	movs	r0, #1
1000894c:	4240      	negs	r0, r0
    else
        rate[0] = st.chip_cfg.sample_rate;
    return 0;
}
1000894e:	4770      	bx	lr
10008950:	10017ef8 	.word	0x10017ef8

10008954 <mpu_set_compass_sample_rate>:
 *  mpu_get_compass_sample_rate to check the actual setting.
 *  @param[in]  rate    Desired compass sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_compass_sample_rate(unsigned short rate)
{
10008954:	b530      	push	{r4, r5, lr}
10008956:	b083      	sub	sp, #12
10008958:	1e01      	subs	r1, r0, #0
#ifdef AK89xx_SECONDARY
    unsigned char div;
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
1000895a:	d020      	beq.n	1000899e <mpu_set_compass_sample_rate+0x4a>
1000895c:	4b17      	ldr	r3, [pc, #92]	; (100089bc <mpu_set_compass_sample_rate+0x68>)
1000895e:	89d8      	ldrh	r0, [r3, #14]
10008960:	4281      	cmp	r1, r0
10008962:	d81f      	bhi.n	100089a4 <mpu_set_compass_sample_rate+0x50>
10008964:	2964      	cmp	r1, #100	; 0x64
10008966:	d820      	bhi.n	100089aa <mpu_set_compass_sample_rate+0x56>
        return -1;

    div = st.chip_cfg.sample_rate / rate - 1;
10008968:	466b      	mov	r3, sp
1000896a:	1ddc      	adds	r4, r3, #7
1000896c:	4b14      	ldr	r3, [pc, #80]	; (100089c0 <mpu_set_compass_sample_rate+0x6c>)
1000896e:	4798      	blx	r3
10008970:	3801      	subs	r0, #1
10008972:	7020      	strb	r0, [r4, #0]
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
10008974:	4b11      	ldr	r3, [pc, #68]	; (100089bc <mpu_set_compass_sample_rate+0x68>)
10008976:	2224      	movs	r2, #36	; 0x24
10008978:	6819      	ldr	r1, [r3, #0]
1000897a:	5c89      	ldrb	r1, [r1, r2]
1000897c:	685b      	ldr	r3, [r3, #4]
1000897e:	7818      	ldrb	r0, [r3, #0]
10008980:	0023      	movs	r3, r4
10008982:	3a23      	subs	r2, #35	; 0x23
10008984:	4c0f      	ldr	r4, [pc, #60]	; (100089c4 <mpu_set_compass_sample_rate+0x70>)
10008986:	47a0      	blx	r4
10008988:	1e04      	subs	r4, r0, #0
1000898a:	d111      	bne.n	100089b0 <mpu_set_compass_sample_rate+0x5c>
        return -1;
    st.chip_cfg.compass_sample_rate = st.chip_cfg.sample_rate / (div + 1);
1000898c:	4d0b      	ldr	r5, [pc, #44]	; (100089bc <mpu_set_compass_sample_rate+0x68>)
1000898e:	89e8      	ldrh	r0, [r5, #14]
10008990:	466b      	mov	r3, sp
10008992:	79d9      	ldrb	r1, [r3, #7]
10008994:	3101      	adds	r1, #1
10008996:	4b0c      	ldr	r3, [pc, #48]	; (100089c8 <mpu_set_compass_sample_rate+0x74>)
10008998:	4798      	blx	r3
1000899a:	8528      	strh	r0, [r5, #40]	; 0x28
    return 0;
1000899c:	e00a      	b.n	100089b4 <mpu_set_compass_sample_rate+0x60>
int mpu_set_compass_sample_rate(unsigned short rate)
{
#ifdef AK89xx_SECONDARY
    unsigned char div;
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
        return -1;
1000899e:	2401      	movs	r4, #1
100089a0:	4264      	negs	r4, r4
100089a2:	e007      	b.n	100089b4 <mpu_set_compass_sample_rate+0x60>
100089a4:	2401      	movs	r4, #1
100089a6:	4264      	negs	r4, r4
100089a8:	e004      	b.n	100089b4 <mpu_set_compass_sample_rate+0x60>
100089aa:	2401      	movs	r4, #1
100089ac:	4264      	negs	r4, r4
100089ae:	e001      	b.n	100089b4 <mpu_set_compass_sample_rate+0x60>

    div = st.chip_cfg.sample_rate / rate - 1;
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
        return -1;
100089b0:	2401      	movs	r4, #1
100089b2:	4264      	negs	r4, r4
    st.chip_cfg.compass_sample_rate = st.chip_cfg.sample_rate / (div + 1);
    return 0;
#else
    return -1;
#endif
}
100089b4:	0020      	movs	r0, r4
100089b6:	b003      	add	sp, #12
100089b8:	bd30      	pop	{r4, r5, pc}
100089ba:	46c0      	nop			; (mov r8, r8)
100089bc:	10017ef8 	.word	0x10017ef8
100089c0:	10012e05 	.word	0x10012e05
100089c4:	1000a93d 	.word	0x1000a93d
100089c8:	10012f19 	.word	0x10012f19

100089cc <mpu_configure_fifo>:
 *  \n INV_XYZ_ACCEL
 *  @param[in]  sensors Mask of sensors to push to FIFO.
 *  @return     0 if successful.
 */
int mpu_configure_fifo(unsigned char sensors)
{
100089cc:	b570      	push	{r4, r5, r6, lr}
    int result = 0;

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;

    if (st.chip_cfg.dmp_on)
100089ce:	2324      	movs	r3, #36	; 0x24
100089d0:	4a16      	ldr	r2, [pc, #88]	; (10008a2c <mpu_configure_fifo+0x60>)
100089d2:	5cd3      	ldrb	r3, [r2, r3]
        return 0;
100089d4:	2400      	movs	r4, #0
    int result = 0;

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;

    if (st.chip_cfg.dmp_on)
100089d6:	2b00      	cmp	r3, #0
100089d8:	d126      	bne.n	10008a28 <mpu_configure_fifo+0x5c>
        return 0;
    else {
        if (!(st.chip_cfg.sensors))
100089da:	7a94      	ldrb	r4, [r2, #10]
100089dc:	2c00      	cmp	r4, #0
100089de:	d015      	beq.n	10008a0c <mpu_configure_fifo+0x40>
{
    unsigned char prev;
    int result = 0;

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;
100089e0:	2301      	movs	r3, #1
100089e2:	4398      	bics	r0, r3
    if (st.chip_cfg.dmp_on)
        return 0;
    else {
        if (!(st.chip_cfg.sensors))
            return -1;
        prev = st.chip_cfg.fifo_enable;
100089e4:	7c15      	ldrb	r5, [r2, #16]
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
100089e6:	4004      	ands	r4, r0
100089e8:	7414      	strb	r4, [r2, #16]
        if (st.chip_cfg.fifo_enable != sensors)
100089ea:	1b04      	subs	r4, r0, r4
100089ec:	1e63      	subs	r3, r4, #1
100089ee:	419c      	sbcs	r4, r3
100089f0:	4264      	negs	r4, r4
             * asleep.
             */
            result = -1;
        else
            result = 0;
        if (sensors || st.chip_cfg.lp_accel_mode)
100089f2:	2800      	cmp	r0, #0
100089f4:	d10d      	bne.n	10008a12 <mpu_configure_fifo+0x46>
100089f6:	7d13      	ldrb	r3, [r2, #20]
100089f8:	2b00      	cmp	r3, #0
100089fa:	d112      	bne.n	10008a22 <mpu_configure_fifo+0x56>
            set_int_enable(1);
        else
            set_int_enable(0);
100089fc:	4b0c      	ldr	r3, [pc, #48]	; (10008a30 <mpu_configure_fifo+0x64>)
100089fe:	4798      	blx	r3
10008a00:	e012      	b.n	10008a28 <mpu_configure_fifo+0x5c>
        if (sensors) {
            if (mpu_reset_fifo()) {
                st.chip_cfg.fifo_enable = prev;
10008a02:	4b0a      	ldr	r3, [pc, #40]	; (10008a2c <mpu_configure_fifo+0x60>)
10008a04:	741d      	strb	r5, [r3, #16]
                return -1;
10008a06:	2401      	movs	r4, #1
10008a08:	4264      	negs	r4, r4
10008a0a:	e00d      	b.n	10008a28 <mpu_configure_fifo+0x5c>

    if (st.chip_cfg.dmp_on)
        return 0;
    else {
        if (!(st.chip_cfg.sensors))
            return -1;
10008a0c:	2401      	movs	r4, #1
10008a0e:	4264      	negs	r4, r4
10008a10:	e00a      	b.n	10008a28 <mpu_configure_fifo+0x5c>
             */
            result = -1;
        else
            result = 0;
        if (sensors || st.chip_cfg.lp_accel_mode)
            set_int_enable(1);
10008a12:	2001      	movs	r0, #1
10008a14:	4b06      	ldr	r3, [pc, #24]	; (10008a30 <mpu_configure_fifo+0x64>)
10008a16:	4798      	blx	r3
        else
            set_int_enable(0);
        if (sensors) {
            if (mpu_reset_fifo()) {
10008a18:	4b06      	ldr	r3, [pc, #24]	; (10008a34 <mpu_configure_fifo+0x68>)
10008a1a:	4798      	blx	r3
10008a1c:	2800      	cmp	r0, #0
10008a1e:	d003      	beq.n	10008a28 <mpu_configure_fifo+0x5c>
10008a20:	e7ef      	b.n	10008a02 <mpu_configure_fifo+0x36>
             */
            result = -1;
        else
            result = 0;
        if (sensors || st.chip_cfg.lp_accel_mode)
            set_int_enable(1);
10008a22:	2001      	movs	r0, #1
10008a24:	4b02      	ldr	r3, [pc, #8]	; (10008a30 <mpu_configure_fifo+0x64>)
10008a26:	4798      	blx	r3
            }
        }
    }

    return result;
}
10008a28:	0020      	movs	r0, r4
10008a2a:	bd70      	pop	{r4, r5, r6, pc}
10008a2c:	10017ef8 	.word	0x10017ef8
10008a30:	10008461 	.word	0x10008461
10008a34:	10008505 	.word	0x10008505

10008a38 <mpu_read_fifo>:
 *  @param[out] more        Number of remaining packets.
 *  @return     0 if successful.
 */
int mpu_read_fifo(short *gyro, short *accel, unsigned long *timestamp,
        unsigned char *sensors, unsigned char *more)
{
10008a38:	b5f0      	push	{r4, r5, r6, r7, lr}
10008a3a:	464f      	mov	r7, r9
10008a3c:	b480      	push	{r7}
10008a3e:	b088      	sub	sp, #32
10008a40:	9001      	str	r0, [sp, #4]
10008a42:	9103      	str	r1, [sp, #12]
10008a44:	9202      	str	r2, [sp, #8]
10008a46:	001e      	movs	r6, r3
    /* Assumes maximum packet size is gyro (6) + accel (6). */
    unsigned char data[MAX_PACKET_LENGTH];
    unsigned char packet_size = 0;
    unsigned short fifo_count, index = 0;

    if (st.chip_cfg.dmp_on)
10008a48:	2324      	movs	r3, #36	; 0x24
10008a4a:	4a69      	ldr	r2, [pc, #420]	; (10008bf0 <mpu_read_fifo+0x1b8>)
10008a4c:	5cd3      	ldrb	r3, [r2, r3]
10008a4e:	2b00      	cmp	r3, #0
10008a50:	d000      	beq.n	10008a54 <mpu_read_fifo+0x1c>
10008a52:	e0b6      	b.n	10008bc2 <mpu_read_fifo+0x18a>
        return -1;

    sensors[0] = 0;
10008a54:	7033      	strb	r3, [r6, #0]
    if (!st.chip_cfg.sensors)
10008a56:	7a93      	ldrb	r3, [r2, #10]
10008a58:	2b00      	cmp	r3, #0
10008a5a:	d100      	bne.n	10008a5e <mpu_read_fifo+0x26>
10008a5c:	e0b4      	b.n	10008bc8 <mpu_read_fifo+0x190>
        return -1;
    if (!st.chip_cfg.fifo_enable)
10008a5e:	7c13      	ldrb	r3, [r2, #16]
10008a60:	2b00      	cmp	r3, #0
10008a62:	d100      	bne.n	10008a66 <mpu_read_fifo+0x2e>
10008a64:	e0b3      	b.n	10008bce <mpu_read_fifo+0x196>
        return -1;

    if (st.chip_cfg.fifo_enable & INV_X_GYRO)
10008a66:	065a      	lsls	r2, r3, #25
        packet_size += 2;
10008a68:	0fd2      	lsrs	r2, r2, #31
10008a6a:	0055      	lsls	r5, r2, #1
    if (st.chip_cfg.fifo_enable & INV_Y_GYRO)
10008a6c:	069a      	lsls	r2, r3, #26
10008a6e:	d501      	bpl.n	10008a74 <mpu_read_fifo+0x3c>
        packet_size += 2;
10008a70:	1caa      	adds	r2, r5, #2
10008a72:	b2d5      	uxtb	r5, r2
    if (st.chip_cfg.fifo_enable & INV_Z_GYRO)
10008a74:	06da      	lsls	r2, r3, #27
10008a76:	d501      	bpl.n	10008a7c <mpu_read_fifo+0x44>
        packet_size += 2;
10008a78:	1caa      	adds	r2, r5, #2
10008a7a:	b2d5      	uxtb	r5, r2
    if (st.chip_cfg.fifo_enable & INV_XYZ_ACCEL)
10008a7c:	071b      	lsls	r3, r3, #28
10008a7e:	d501      	bpl.n	10008a84 <mpu_read_fifo+0x4c>
        packet_size += 6;
10008a80:	1dab      	adds	r3, r5, #6
10008a82:	b2dd      	uxtb	r5, r3

    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, data))
10008a84:	4b5a      	ldr	r3, [pc, #360]	; (10008bf0 <mpu_read_fifo+0x1b8>)
10008a86:	681a      	ldr	r2, [r3, #0]
10008a88:	7b11      	ldrb	r1, [r2, #12]
10008a8a:	685b      	ldr	r3, [r3, #4]
10008a8c:	7818      	ldrb	r0, [r3, #0]
10008a8e:	ab05      	add	r3, sp, #20
10008a90:	2202      	movs	r2, #2
10008a92:	4c58      	ldr	r4, [pc, #352]	; (10008bf4 <mpu_read_fifo+0x1bc>)
10008a94:	47a0      	blx	r4
10008a96:	1e04      	subs	r4, r0, #0
10008a98:	d000      	beq.n	10008a9c <mpu_read_fifo+0x64>
10008a9a:	e09b      	b.n	10008bd4 <mpu_read_fifo+0x19c>
        return -1;
    fifo_count = (data[0] << 8) | data[1];
10008a9c:	aa05      	add	r2, sp, #20
10008a9e:	7813      	ldrb	r3, [r2, #0]
10008aa0:	021b      	lsls	r3, r3, #8
10008aa2:	7852      	ldrb	r2, [r2, #1]
10008aa4:	431a      	orrs	r2, r3
10008aa6:	4691      	mov	r9, r2
    if (fifo_count < packet_size)
10008aa8:	b2af      	uxth	r7, r5
10008aaa:	42ba      	cmp	r2, r7
10008aac:	d200      	bcs.n	10008ab0 <mpu_read_fifo+0x78>
10008aae:	e099      	b.n	10008be4 <mpu_read_fifo+0x1ac>
        return 0;
//    log_i("FIFO count: %hd\n", fifo_count);
    if (fifo_count > (st.hw->max_fifo >> 1)) {
10008ab0:	4b4f      	ldr	r3, [pc, #316]	; (10008bf0 <mpu_read_fifo+0x1b8>)
10008ab2:	685a      	ldr	r2, [r3, #4]
10008ab4:	8853      	ldrh	r3, [r2, #2]
10008ab6:	085b      	lsrs	r3, r3, #1
10008ab8:	4599      	cmp	r9, r3
10008aba:	d913      	bls.n	10008ae4 <mpu_read_fifo+0xac>
        /* FIFO is 50% full, better check overflow bit. */
        if (i2c_read(st.hw->addr, st.reg->int_status, 1, data))
10008abc:	4b4c      	ldr	r3, [pc, #304]	; (10008bf0 <mpu_read_fifo+0x1b8>)
10008abe:	681b      	ldr	r3, [r3, #0]
10008ac0:	7cd9      	ldrb	r1, [r3, #19]
10008ac2:	7810      	ldrb	r0, [r2, #0]
10008ac4:	ab05      	add	r3, sp, #20
10008ac6:	2201      	movs	r2, #1
10008ac8:	4c4a      	ldr	r4, [pc, #296]	; (10008bf4 <mpu_read_fifo+0x1bc>)
10008aca:	47a0      	blx	r4
10008acc:	2800      	cmp	r0, #0
10008ace:	d000      	beq.n	10008ad2 <mpu_read_fifo+0x9a>
10008ad0:	e083      	b.n	10008bda <mpu_read_fifo+0x1a2>
            return -1;
        if (data[0] & BIT_FIFO_OVERFLOW) {
10008ad2:	ab05      	add	r3, sp, #20
10008ad4:	781b      	ldrb	r3, [r3, #0]
10008ad6:	06db      	lsls	r3, r3, #27
10008ad8:	d504      	bpl.n	10008ae4 <mpu_read_fifo+0xac>
            mpu_reset_fifo();
10008ada:	4b47      	ldr	r3, [pc, #284]	; (10008bf8 <mpu_read_fifo+0x1c0>)
10008adc:	4798      	blx	r3
            return -2;
10008ade:	2402      	movs	r4, #2
10008ae0:	4264      	negs	r4, r4
10008ae2:	e07f      	b.n	10008be4 <mpu_read_fifo+0x1ac>
        }
    }
    get_ms((unsigned long*)timestamp);
10008ae4:	9802      	ldr	r0, [sp, #8]
10008ae6:	4b45      	ldr	r3, [pc, #276]	; (10008bfc <mpu_read_fifo+0x1c4>)
10008ae8:	4798      	blx	r3

    if (i2c_read(st.hw->addr, st.reg->fifo_r_w, packet_size, data))
10008aea:	4b41      	ldr	r3, [pc, #260]	; (10008bf0 <mpu_read_fifo+0x1b8>)
10008aec:	681a      	ldr	r2, [r3, #0]
10008aee:	7b51      	ldrb	r1, [r2, #13]
10008af0:	685b      	ldr	r3, [r3, #4]
10008af2:	7818      	ldrb	r0, [r3, #0]
10008af4:	ab05      	add	r3, sp, #20
10008af6:	002a      	movs	r2, r5
10008af8:	4c3e      	ldr	r4, [pc, #248]	; (10008bf4 <mpu_read_fifo+0x1bc>)
10008afa:	47a0      	blx	r4
10008afc:	1e04      	subs	r4, r0, #0
10008afe:	d16f      	bne.n	10008be0 <mpu_read_fifo+0x1a8>
        return -1;
    more[0] = fifo_count / packet_size - 1;
10008b00:	0029      	movs	r1, r5
10008b02:	4648      	mov	r0, r9
10008b04:	4b3e      	ldr	r3, [pc, #248]	; (10008c00 <mpu_read_fifo+0x1c8>)
10008b06:	4798      	blx	r3
10008b08:	3801      	subs	r0, #1
10008b0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
10008b0c:	7018      	strb	r0, [r3, #0]
    sensors[0] = 0;
10008b0e:	2300      	movs	r3, #0
10008b10:	7033      	strb	r3, [r6, #0]

    if ((index != packet_size) && st.chip_cfg.fifo_enable & INV_XYZ_ACCEL) {
10008b12:	2d00      	cmp	r5, #0
10008b14:	d01a      	beq.n	10008b4c <mpu_read_fifo+0x114>
10008b16:	4b36      	ldr	r3, [pc, #216]	; (10008bf0 <mpu_read_fifo+0x1b8>)
10008b18:	7c1a      	ldrb	r2, [r3, #16]
        unsigned char *sensors, unsigned char *more)
{
    /* Assumes maximum packet size is gyro (6) + accel (6). */
    unsigned char data[MAX_PACKET_LENGTH];
    unsigned char packet_size = 0;
    unsigned short fifo_count, index = 0;
10008b1a:	2300      	movs	r3, #0
    if (i2c_read(st.hw->addr, st.reg->fifo_r_w, packet_size, data))
        return -1;
    more[0] = fifo_count / packet_size - 1;
    sensors[0] = 0;

    if ((index != packet_size) && st.chip_cfg.fifo_enable & INV_XYZ_ACCEL) {
10008b1c:	0712      	lsls	r2, r2, #28
10008b1e:	d515      	bpl.n	10008b4c <mpu_read_fifo+0x114>
        accel[0] = (data[index+0] << 8) | data[index+1];
10008b20:	ab05      	add	r3, sp, #20
10008b22:	781a      	ldrb	r2, [r3, #0]
10008b24:	0212      	lsls	r2, r2, #8
10008b26:	7859      	ldrb	r1, [r3, #1]
10008b28:	430a      	orrs	r2, r1
10008b2a:	9803      	ldr	r0, [sp, #12]
10008b2c:	8002      	strh	r2, [r0, #0]
        accel[1] = (data[index+2] << 8) | data[index+3];
10008b2e:	789a      	ldrb	r2, [r3, #2]
10008b30:	0212      	lsls	r2, r2, #8
10008b32:	78d9      	ldrb	r1, [r3, #3]
10008b34:	430a      	orrs	r2, r1
10008b36:	8042      	strh	r2, [r0, #2]
        accel[2] = (data[index+4] << 8) | data[index+5];
10008b38:	791a      	ldrb	r2, [r3, #4]
10008b3a:	0212      	lsls	r2, r2, #8
10008b3c:	795b      	ldrb	r3, [r3, #5]
10008b3e:	4313      	orrs	r3, r2
10008b40:	8083      	strh	r3, [r0, #4]
        sensors[0] |= INV_XYZ_ACCEL;
10008b42:	7832      	ldrb	r2, [r6, #0]
10008b44:	2308      	movs	r3, #8
10008b46:	4313      	orrs	r3, r2
10008b48:	7033      	strb	r3, [r6, #0]
        index += 6;
10008b4a:	2306      	movs	r3, #6
    }
    if ((index != packet_size) && st.chip_cfg.fifo_enable & INV_X_GYRO) {
10008b4c:	42bb      	cmp	r3, r7
10008b4e:	d049      	beq.n	10008be4 <mpu_read_fifo+0x1ac>
10008b50:	4a27      	ldr	r2, [pc, #156]	; (10008bf0 <mpu_read_fifo+0x1b8>)
10008b52:	7c12      	ldrb	r2, [r2, #16]
10008b54:	0652      	lsls	r2, r2, #25
10008b56:	d50f      	bpl.n	10008b78 <mpu_read_fifo+0x140>
        gyro[0] = (data[index+0] << 8) | data[index+1];
10008b58:	a905      	add	r1, sp, #20
10008b5a:	5cca      	ldrb	r2, [r1, r3]
10008b5c:	0212      	lsls	r2, r2, #8
10008b5e:	18c9      	adds	r1, r1, r3
10008b60:	7849      	ldrb	r1, [r1, #1]
10008b62:	430a      	orrs	r2, r1
10008b64:	9901      	ldr	r1, [sp, #4]
10008b66:	800a      	strh	r2, [r1, #0]
        sensors[0] |= INV_X_GYRO;
10008b68:	7831      	ldrb	r1, [r6, #0]
10008b6a:	2240      	movs	r2, #64	; 0x40
10008b6c:	430a      	orrs	r2, r1
10008b6e:	7032      	strb	r2, [r6, #0]
        index += 2;
10008b70:	3302      	adds	r3, #2
10008b72:	b29b      	uxth	r3, r3
    }
    if ((index != packet_size) && st.chip_cfg.fifo_enable & INV_Y_GYRO) {
10008b74:	429f      	cmp	r7, r3
10008b76:	d035      	beq.n	10008be4 <mpu_read_fifo+0x1ac>
10008b78:	4a1d      	ldr	r2, [pc, #116]	; (10008bf0 <mpu_read_fifo+0x1b8>)
10008b7a:	7c12      	ldrb	r2, [r2, #16]
10008b7c:	0692      	lsls	r2, r2, #26
10008b7e:	d50f      	bpl.n	10008ba0 <mpu_read_fifo+0x168>
        gyro[1] = (data[index+0] << 8) | data[index+1];
10008b80:	a905      	add	r1, sp, #20
10008b82:	5cca      	ldrb	r2, [r1, r3]
10008b84:	0212      	lsls	r2, r2, #8
10008b86:	18c9      	adds	r1, r1, r3
10008b88:	7849      	ldrb	r1, [r1, #1]
10008b8a:	430a      	orrs	r2, r1
10008b8c:	9901      	ldr	r1, [sp, #4]
10008b8e:	804a      	strh	r2, [r1, #2]
        sensors[0] |= INV_Y_GYRO;
10008b90:	7831      	ldrb	r1, [r6, #0]
10008b92:	2220      	movs	r2, #32
10008b94:	430a      	orrs	r2, r1
10008b96:	7032      	strb	r2, [r6, #0]
        index += 2;
10008b98:	3302      	adds	r3, #2
10008b9a:	b29b      	uxth	r3, r3
    }
    if ((index != packet_size) && st.chip_cfg.fifo_enable & INV_Z_GYRO) {
10008b9c:	429f      	cmp	r7, r3
10008b9e:	d021      	beq.n	10008be4 <mpu_read_fifo+0x1ac>
10008ba0:	4a13      	ldr	r2, [pc, #76]	; (10008bf0 <mpu_read_fifo+0x1b8>)
10008ba2:	7c12      	ldrb	r2, [r2, #16]
10008ba4:	06d2      	lsls	r2, r2, #27
10008ba6:	d51d      	bpl.n	10008be4 <mpu_read_fifo+0x1ac>
        gyro[2] = (data[index+0] << 8) | data[index+1];
10008ba8:	a905      	add	r1, sp, #20
10008baa:	5cca      	ldrb	r2, [r1, r3]
10008bac:	0212      	lsls	r2, r2, #8
10008bae:	18cb      	adds	r3, r1, r3
10008bb0:	785b      	ldrb	r3, [r3, #1]
10008bb2:	4313      	orrs	r3, r2
10008bb4:	9a01      	ldr	r2, [sp, #4]
10008bb6:	8093      	strh	r3, [r2, #4]
        sensors[0] |= INV_Z_GYRO;
10008bb8:	7832      	ldrb	r2, [r6, #0]
10008bba:	2310      	movs	r3, #16
10008bbc:	4313      	orrs	r3, r2
10008bbe:	7033      	strb	r3, [r6, #0]
10008bc0:	e010      	b.n	10008be4 <mpu_read_fifo+0x1ac>
    unsigned char data[MAX_PACKET_LENGTH];
    unsigned char packet_size = 0;
    unsigned short fifo_count, index = 0;

    if (st.chip_cfg.dmp_on)
        return -1;
10008bc2:	2401      	movs	r4, #1
10008bc4:	4264      	negs	r4, r4
10008bc6:	e00d      	b.n	10008be4 <mpu_read_fifo+0x1ac>

    sensors[0] = 0;
    if (!st.chip_cfg.sensors)
        return -1;
10008bc8:	2401      	movs	r4, #1
10008bca:	4264      	negs	r4, r4
10008bcc:	e00a      	b.n	10008be4 <mpu_read_fifo+0x1ac>
    if (!st.chip_cfg.fifo_enable)
        return -1;
10008bce:	2401      	movs	r4, #1
10008bd0:	4264      	negs	r4, r4
10008bd2:	e007      	b.n	10008be4 <mpu_read_fifo+0x1ac>
        packet_size += 2;
    if (st.chip_cfg.fifo_enable & INV_XYZ_ACCEL)
        packet_size += 6;

    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, data))
        return -1;
10008bd4:	2401      	movs	r4, #1
10008bd6:	4264      	negs	r4, r4
10008bd8:	e004      	b.n	10008be4 <mpu_read_fifo+0x1ac>
        return 0;
//    log_i("FIFO count: %hd\n", fifo_count);
    if (fifo_count > (st.hw->max_fifo >> 1)) {
        /* FIFO is 50% full, better check overflow bit. */
        if (i2c_read(st.hw->addr, st.reg->int_status, 1, data))
            return -1;
10008bda:	2401      	movs	r4, #1
10008bdc:	4264      	negs	r4, r4
10008bde:	e001      	b.n	10008be4 <mpu_read_fifo+0x1ac>
        }
    }
    get_ms((unsigned long*)timestamp);

    if (i2c_read(st.hw->addr, st.reg->fifo_r_w, packet_size, data))
        return -1;
10008be0:	2401      	movs	r4, #1
10008be2:	4264      	negs	r4, r4
        sensors[0] |= INV_Z_GYRO;
        index += 2;
    }

    return 0;
}
10008be4:	0020      	movs	r0, r4
10008be6:	b008      	add	sp, #32
10008be8:	bc04      	pop	{r2}
10008bea:	4691      	mov	r9, r2
10008bec:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008bee:	46c0      	nop			; (mov r8, r8)
10008bf0:	10017ef8 	.word	0x10017ef8
10008bf4:	1000a999 	.word	0x1000a999
10008bf8:	10008505 	.word	0x10008505
10008bfc:	1000b22d 	.word	0x1000b22d
10008c00:	10012f19 	.word	0x10012f19

10008c04 <mpu_set_bypass>:
 *  @brief      Set device to bypass mode.
 *  @param[in]  bypass_on   1 to enable bypass mode.
 *  @return     0 if successful.
 */
int mpu_set_bypass(unsigned char bypass_on)
{
10008c04:	b530      	push	{r4, r5, lr}
10008c06:	b083      	sub	sp, #12
10008c08:	0004      	movs	r4, r0
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
10008c0a:	4b59      	ldr	r3, [pc, #356]	; (10008d70 <mpu_set_bypass+0x16c>)
10008c0c:	7c9b      	ldrb	r3, [r3, #18]
10008c0e:	4283      	cmp	r3, r0
10008c10:	d100      	bne.n	10008c14 <mpu_set_bypass+0x10>
10008c12:	e097      	b.n	10008d44 <mpu_set_bypass+0x140>
        return 0;

    if (bypass_on) {
10008c14:	2800      	cmp	r0, #0
10008c16:	d042      	beq.n	10008c9e <mpu_set_bypass+0x9a>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008c18:	4b55      	ldr	r3, [pc, #340]	; (10008d70 <mpu_set_bypass+0x16c>)
10008c1a:	681a      	ldr	r2, [r3, #0]
10008c1c:	7911      	ldrb	r1, [r2, #4]
10008c1e:	685b      	ldr	r3, [r3, #4]
10008c20:	7818      	ldrb	r0, [r3, #0]
10008c22:	466b      	mov	r3, sp
10008c24:	3307      	adds	r3, #7
10008c26:	2201      	movs	r2, #1
10008c28:	4d52      	ldr	r5, [pc, #328]	; (10008d74 <mpu_set_bypass+0x170>)
10008c2a:	47a8      	blx	r5
10008c2c:	2800      	cmp	r0, #0
10008c2e:	d000      	beq.n	10008c32 <mpu_set_bypass+0x2e>
10008c30:	e08a      	b.n	10008d48 <mpu_set_bypass+0x144>
            return -1;
        tmp &= ~BIT_AUX_IF_EN;
10008c32:	466b      	mov	r3, sp
10008c34:	3307      	adds	r3, #7
10008c36:	781a      	ldrb	r2, [r3, #0]
10008c38:	2120      	movs	r1, #32
10008c3a:	438a      	bics	r2, r1
10008c3c:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008c3e:	4a4c      	ldr	r2, [pc, #304]	; (10008d70 <mpu_set_bypass+0x16c>)
10008c40:	6811      	ldr	r1, [r2, #0]
10008c42:	7909      	ldrb	r1, [r1, #4]
10008c44:	6852      	ldr	r2, [r2, #4]
10008c46:	7810      	ldrb	r0, [r2, #0]
10008c48:	2201      	movs	r2, #1
10008c4a:	4d4b      	ldr	r5, [pc, #300]	; (10008d78 <mpu_set_bypass+0x174>)
10008c4c:	47a8      	blx	r5
10008c4e:	2800      	cmp	r0, #0
10008c50:	d17d      	bne.n	10008d4e <mpu_set_bypass+0x14a>
            return -1;
        delay_ms(3);
10008c52:	3003      	adds	r0, #3
10008c54:	4b49      	ldr	r3, [pc, #292]	; (10008d7c <mpu_set_bypass+0x178>)
10008c56:	4798      	blx	r3
        tmp = BIT_BYPASS_EN;
10008c58:	2202      	movs	r2, #2
10008c5a:	466b      	mov	r3, sp
10008c5c:	71da      	strb	r2, [r3, #7]
        if (st.chip_cfg.active_low_int)
10008c5e:	2322      	movs	r3, #34	; 0x22
10008c60:	4a43      	ldr	r2, [pc, #268]	; (10008d70 <mpu_set_bypass+0x16c>)
10008c62:	5cd3      	ldrb	r3, [r2, r3]
10008c64:	2b00      	cmp	r3, #0
10008c66:	d002      	beq.n	10008c6e <mpu_set_bypass+0x6a>
            tmp |= BIT_ACTL;
10008c68:	2282      	movs	r2, #130	; 0x82
10008c6a:	466b      	mov	r3, sp
10008c6c:	71da      	strb	r2, [r3, #7]
        if (st.chip_cfg.latched_int)
10008c6e:	2323      	movs	r3, #35	; 0x23
10008c70:	4a3f      	ldr	r2, [pc, #252]	; (10008d70 <mpu_set_bypass+0x16c>)
10008c72:	5cd3      	ldrb	r3, [r2, r3]
10008c74:	2b00      	cmp	r3, #0
10008c76:	d005      	beq.n	10008c84 <mpu_set_bypass+0x80>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
10008c78:	466b      	mov	r3, sp
10008c7a:	1dda      	adds	r2, r3, #7
10008c7c:	79d9      	ldrb	r1, [r3, #7]
10008c7e:	2330      	movs	r3, #48	; 0x30
10008c80:	430b      	orrs	r3, r1
10008c82:	7013      	strb	r3, [r2, #0]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
10008c84:	4b3a      	ldr	r3, [pc, #232]	; (10008d70 <mpu_set_bypass+0x16c>)
10008c86:	681a      	ldr	r2, [r3, #0]
10008c88:	7dd1      	ldrb	r1, [r2, #23]
10008c8a:	685b      	ldr	r3, [r3, #4]
10008c8c:	7818      	ldrb	r0, [r3, #0]
10008c8e:	466b      	mov	r3, sp
10008c90:	3307      	adds	r3, #7
10008c92:	2201      	movs	r2, #1
10008c94:	4d38      	ldr	r5, [pc, #224]	; (10008d78 <mpu_set_bypass+0x174>)
10008c96:	47a8      	blx	r5
10008c98:	2800      	cmp	r0, #0
10008c9a:	d04f      	beq.n	10008d3c <mpu_set_bypass+0x138>
10008c9c:	e05a      	b.n	10008d54 <mpu_set_bypass+0x150>
            return -1;
    } else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008c9e:	4b34      	ldr	r3, [pc, #208]	; (10008d70 <mpu_set_bypass+0x16c>)
10008ca0:	681a      	ldr	r2, [r3, #0]
10008ca2:	7911      	ldrb	r1, [r2, #4]
10008ca4:	685b      	ldr	r3, [r3, #4]
10008ca6:	7818      	ldrb	r0, [r3, #0]
10008ca8:	466b      	mov	r3, sp
10008caa:	3307      	adds	r3, #7
10008cac:	2201      	movs	r2, #1
10008cae:	4d31      	ldr	r5, [pc, #196]	; (10008d74 <mpu_set_bypass+0x170>)
10008cb0:	47a8      	blx	r5
10008cb2:	2800      	cmp	r0, #0
10008cb4:	d151      	bne.n	10008d5a <mpu_set_bypass+0x156>
            return -1;
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
10008cb6:	4b2e      	ldr	r3, [pc, #184]	; (10008d70 <mpu_set_bypass+0x16c>)
10008cb8:	7a9b      	ldrb	r3, [r3, #10]
10008cba:	07db      	lsls	r3, r3, #31
10008cbc:	d506      	bpl.n	10008ccc <mpu_set_bypass+0xc8>
            tmp |= BIT_AUX_IF_EN;
10008cbe:	466b      	mov	r3, sp
10008cc0:	1dda      	adds	r2, r3, #7
10008cc2:	79d9      	ldrb	r1, [r3, #7]
10008cc4:	2320      	movs	r3, #32
10008cc6:	430b      	orrs	r3, r1
10008cc8:	7013      	strb	r3, [r2, #0]
10008cca:	e005      	b.n	10008cd8 <mpu_set_bypass+0xd4>
        else
            tmp &= ~BIT_AUX_IF_EN;
10008ccc:	466b      	mov	r3, sp
10008cce:	1dda      	adds	r2, r3, #7
10008cd0:	79db      	ldrb	r3, [r3, #7]
10008cd2:	2120      	movs	r1, #32
10008cd4:	438b      	bics	r3, r1
10008cd6:	7013      	strb	r3, [r2, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008cd8:	4b25      	ldr	r3, [pc, #148]	; (10008d70 <mpu_set_bypass+0x16c>)
10008cda:	681a      	ldr	r2, [r3, #0]
10008cdc:	7911      	ldrb	r1, [r2, #4]
10008cde:	685b      	ldr	r3, [r3, #4]
10008ce0:	7818      	ldrb	r0, [r3, #0]
10008ce2:	466b      	mov	r3, sp
10008ce4:	3307      	adds	r3, #7
10008ce6:	2201      	movs	r2, #1
10008ce8:	4d23      	ldr	r5, [pc, #140]	; (10008d78 <mpu_set_bypass+0x174>)
10008cea:	47a8      	blx	r5
10008cec:	2800      	cmp	r0, #0
10008cee:	d137      	bne.n	10008d60 <mpu_set_bypass+0x15c>
            return -1;
        delay_ms(3);
10008cf0:	3003      	adds	r0, #3
10008cf2:	4b22      	ldr	r3, [pc, #136]	; (10008d7c <mpu_set_bypass+0x178>)
10008cf4:	4798      	blx	r3
        if (st.chip_cfg.active_low_int)
10008cf6:	2322      	movs	r3, #34	; 0x22
10008cf8:	4a1d      	ldr	r2, [pc, #116]	; (10008d70 <mpu_set_bypass+0x16c>)
10008cfa:	5cd3      	ldrb	r3, [r2, r3]
10008cfc:	2b00      	cmp	r3, #0
10008cfe:	d003      	beq.n	10008d08 <mpu_set_bypass+0x104>
            tmp = BIT_ACTL;
10008d00:	2280      	movs	r2, #128	; 0x80
10008d02:	466b      	mov	r3, sp
10008d04:	71da      	strb	r2, [r3, #7]
10008d06:	e002      	b.n	10008d0e <mpu_set_bypass+0x10a>
        else
            tmp = 0;
10008d08:	2200      	movs	r2, #0
10008d0a:	466b      	mov	r3, sp
10008d0c:	71da      	strb	r2, [r3, #7]
        if (st.chip_cfg.latched_int)
10008d0e:	2323      	movs	r3, #35	; 0x23
10008d10:	4a17      	ldr	r2, [pc, #92]	; (10008d70 <mpu_set_bypass+0x16c>)
10008d12:	5cd3      	ldrb	r3, [r2, r3]
10008d14:	2b00      	cmp	r3, #0
10008d16:	d005      	beq.n	10008d24 <mpu_set_bypass+0x120>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
10008d18:	466b      	mov	r3, sp
10008d1a:	1dda      	adds	r2, r3, #7
10008d1c:	79d9      	ldrb	r1, [r3, #7]
10008d1e:	2330      	movs	r3, #48	; 0x30
10008d20:	430b      	orrs	r3, r1
10008d22:	7013      	strb	r3, [r2, #0]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
10008d24:	4b12      	ldr	r3, [pc, #72]	; (10008d70 <mpu_set_bypass+0x16c>)
10008d26:	681a      	ldr	r2, [r3, #0]
10008d28:	7dd1      	ldrb	r1, [r2, #23]
10008d2a:	685b      	ldr	r3, [r3, #4]
10008d2c:	7818      	ldrb	r0, [r3, #0]
10008d2e:	466b      	mov	r3, sp
10008d30:	3307      	adds	r3, #7
10008d32:	2201      	movs	r2, #1
10008d34:	4d10      	ldr	r5, [pc, #64]	; (10008d78 <mpu_set_bypass+0x174>)
10008d36:	47a8      	blx	r5
10008d38:	2800      	cmp	r0, #0
10008d3a:	d114      	bne.n	10008d66 <mpu_set_bypass+0x162>
            return -1;
    }
    st.chip_cfg.bypass_mode = bypass_on;
10008d3c:	4b0c      	ldr	r3, [pc, #48]	; (10008d70 <mpu_set_bypass+0x16c>)
10008d3e:	749c      	strb	r4, [r3, #18]
    return 0;
10008d40:	2000      	movs	r0, #0
10008d42:	e012      	b.n	10008d6a <mpu_set_bypass+0x166>
int mpu_set_bypass(unsigned char bypass_on)
{
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
        return 0;
10008d44:	2000      	movs	r0, #0
10008d46:	e010      	b.n	10008d6a <mpu_set_bypass+0x166>

    if (bypass_on) {
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
            return -1;
10008d48:	2001      	movs	r0, #1
10008d4a:	4240      	negs	r0, r0
10008d4c:	e00d      	b.n	10008d6a <mpu_set_bypass+0x166>
        tmp &= ~BIT_AUX_IF_EN;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
            return -1;
10008d4e:	2001      	movs	r0, #1
10008d50:	4240      	negs	r0, r0
10008d52:	e00a      	b.n	10008d6a <mpu_set_bypass+0x166>
        if (st.chip_cfg.active_low_int)
            tmp |= BIT_ACTL;
        if (st.chip_cfg.latched_int)
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
            return -1;
10008d54:	2001      	movs	r0, #1
10008d56:	4240      	negs	r0, r0
10008d58:	e007      	b.n	10008d6a <mpu_set_bypass+0x166>
    } else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
            return -1;
10008d5a:	2001      	movs	r0, #1
10008d5c:	4240      	negs	r0, r0
10008d5e:	e004      	b.n	10008d6a <mpu_set_bypass+0x166>
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
            tmp |= BIT_AUX_IF_EN;
        else
            tmp &= ~BIT_AUX_IF_EN;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
            return -1;
10008d60:	2001      	movs	r0, #1
10008d62:	4240      	negs	r0, r0
10008d64:	e001      	b.n	10008d6a <mpu_set_bypass+0x166>
        else
            tmp = 0;
        if (st.chip_cfg.latched_int)
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
            return -1;
10008d66:	2001      	movs	r0, #1
10008d68:	4240      	negs	r0, r0
    }
    st.chip_cfg.bypass_mode = bypass_on;
    return 0;
}
10008d6a:	b003      	add	sp, #12
10008d6c:	bd30      	pop	{r4, r5, pc}
10008d6e:	46c0      	nop			; (mov r8, r8)
10008d70:	10017ef8 	.word	0x10017ef8
10008d74:	1000a999 	.word	0x1000a999
10008d78:	1000a93d 	.word	0x1000a93d
10008d7c:	10008129 	.word	0x10008129

10008d80 <mpu_set_int_latched>:
 *  Any MPU register will clear the interrupt.
 *  @param[in]  enable  1 to enable, 0 to disable.
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
10008d80:	b530      	push	{r4, r5, lr}
10008d82:	b083      	sub	sp, #12
10008d84:	0004      	movs	r4, r0
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
10008d86:	2323      	movs	r3, #35	; 0x23
10008d88:	4a1c      	ldr	r2, [pc, #112]	; (10008dfc <mpu_set_int_latched+0x7c>)
10008d8a:	5cd3      	ldrb	r3, [r2, r3]
10008d8c:	4283      	cmp	r3, r0
10008d8e:	d02e      	beq.n	10008dee <mpu_set_int_latched+0x6e>
        return 0;

    if (enable)
10008d90:	2800      	cmp	r0, #0
10008d92:	d003      	beq.n	10008d9c <mpu_set_int_latched+0x1c>
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
10008d94:	2230      	movs	r2, #48	; 0x30
10008d96:	466b      	mov	r3, sp
10008d98:	71da      	strb	r2, [r3, #7]
10008d9a:	e002      	b.n	10008da2 <mpu_set_int_latched+0x22>
    else
        tmp = 0;
10008d9c:	2200      	movs	r2, #0
10008d9e:	466b      	mov	r3, sp
10008da0:	71da      	strb	r2, [r3, #7]
    if (st.chip_cfg.bypass_mode)
10008da2:	4b16      	ldr	r3, [pc, #88]	; (10008dfc <mpu_set_int_latched+0x7c>)
10008da4:	7c9b      	ldrb	r3, [r3, #18]
10008da6:	2b00      	cmp	r3, #0
10008da8:	d005      	beq.n	10008db6 <mpu_set_int_latched+0x36>
        tmp |= BIT_BYPASS_EN;
10008daa:	466b      	mov	r3, sp
10008dac:	1dda      	adds	r2, r3, #7
10008dae:	79d9      	ldrb	r1, [r3, #7]
10008db0:	2302      	movs	r3, #2
10008db2:	430b      	orrs	r3, r1
10008db4:	7013      	strb	r3, [r2, #0]
    if (st.chip_cfg.active_low_int)
10008db6:	2322      	movs	r3, #34	; 0x22
10008db8:	4a10      	ldr	r2, [pc, #64]	; (10008dfc <mpu_set_int_latched+0x7c>)
10008dba:	5cd3      	ldrb	r3, [r2, r3]
10008dbc:	2b00      	cmp	r3, #0
10008dbe:	d006      	beq.n	10008dce <mpu_set_int_latched+0x4e>
        tmp |= BIT_ACTL;
10008dc0:	466b      	mov	r3, sp
10008dc2:	1dda      	adds	r2, r3, #7
10008dc4:	79db      	ldrb	r3, [r3, #7]
10008dc6:	2180      	movs	r1, #128	; 0x80
10008dc8:	4249      	negs	r1, r1
10008dca:	430b      	orrs	r3, r1
10008dcc:	7013      	strb	r3, [r2, #0]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
10008dce:	4b0b      	ldr	r3, [pc, #44]	; (10008dfc <mpu_set_int_latched+0x7c>)
10008dd0:	681a      	ldr	r2, [r3, #0]
10008dd2:	7dd1      	ldrb	r1, [r2, #23]
10008dd4:	685b      	ldr	r3, [r3, #4]
10008dd6:	7818      	ldrb	r0, [r3, #0]
10008dd8:	466b      	mov	r3, sp
10008dda:	3307      	adds	r3, #7
10008ddc:	2201      	movs	r2, #1
10008dde:	4d08      	ldr	r5, [pc, #32]	; (10008e00 <mpu_set_int_latched+0x80>)
10008de0:	47a8      	blx	r5
10008de2:	2800      	cmp	r0, #0
10008de4:	d105      	bne.n	10008df2 <mpu_set_int_latched+0x72>
        return -1;
    st.chip_cfg.latched_int = enable;
10008de6:	2323      	movs	r3, #35	; 0x23
10008de8:	4a04      	ldr	r2, [pc, #16]	; (10008dfc <mpu_set_int_latched+0x7c>)
10008dea:	54d4      	strb	r4, [r2, r3]
    return 0;
10008dec:	e003      	b.n	10008df6 <mpu_set_int_latched+0x76>
 */
int mpu_set_int_latched(unsigned char enable)
{
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
        return 0;
10008dee:	2000      	movs	r0, #0
10008df0:	e001      	b.n	10008df6 <mpu_set_int_latched+0x76>
    if (st.chip_cfg.bypass_mode)
        tmp |= BIT_BYPASS_EN;
    if (st.chip_cfg.active_low_int)
        tmp |= BIT_ACTL;
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
        return -1;
10008df2:	2001      	movs	r0, #1
10008df4:	4240      	negs	r0, r0
    st.chip_cfg.latched_int = enable;
    return 0;
}
10008df6:	b003      	add	sp, #12
10008df8:	bd30      	pop	{r4, r5, pc}
10008dfa:	46c0      	nop			; (mov r8, r8)
10008dfc:	10017ef8 	.word	0x10017ef8
10008e00:	1000a93d 	.word	0x1000a93d

10008e04 <mpu_lp_accel_mode>:
 *  @param[in]  rate        Minimum sampling rate, or zero to disable LP
 *                          accel mode.
 *  @return     0 if successful.
 */
int mpu_lp_accel_mode(unsigned short rate)
{
10008e04:	b510      	push	{r4, lr}
10008e06:	b082      	sub	sp, #8
10008e08:	1e04      	subs	r4, r0, #0
    unsigned char tmp[2];

    if (rate > 40)
10008e0a:	2c28      	cmp	r4, #40	; 0x28
10008e0c:	d878      	bhi.n	10008f00 <mpu_lp_accel_mode+0xfc>
        return -1;

    if (!rate) {
10008e0e:	2800      	cmp	r0, #0
10008e10:	d115      	bne.n	10008e3e <mpu_lp_accel_mode+0x3a>
        mpu_set_int_latched(0);
10008e12:	2000      	movs	r0, #0
10008e14:	4b44      	ldr	r3, [pc, #272]	; (10008f28 <mpu_lp_accel_mode+0x124>)
10008e16:	4798      	blx	r3
        tmp[0] = 0;
10008e18:	ab01      	add	r3, sp, #4
10008e1a:	2200      	movs	r2, #0
10008e1c:	701a      	strb	r2, [r3, #0]
        tmp[1] = BIT_STBY_XYZG;
10008e1e:	3207      	adds	r2, #7
10008e20:	705a      	strb	r2, [r3, #1]
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
10008e22:	4a42      	ldr	r2, [pc, #264]	; (10008f2c <mpu_lp_accel_mode+0x128>)
10008e24:	6811      	ldr	r1, [r2, #0]
10008e26:	7d49      	ldrb	r1, [r1, #21]
10008e28:	6852      	ldr	r2, [r2, #4]
10008e2a:	7810      	ldrb	r0, [r2, #0]
10008e2c:	2202      	movs	r2, #2
10008e2e:	4c40      	ldr	r4, [pc, #256]	; (10008f30 <mpu_lp_accel_mode+0x12c>)
10008e30:	47a0      	blx	r4
10008e32:	1e04      	subs	r4, r0, #0
10008e34:	d167      	bne.n	10008f06 <mpu_lp_accel_mode+0x102>
            return -1;
        st.chip_cfg.lp_accel_mode = 0;
10008e36:	2200      	movs	r2, #0
10008e38:	4b3c      	ldr	r3, [pc, #240]	; (10008f2c <mpu_lp_accel_mode+0x128>)
10008e3a:	751a      	strb	r2, [r3, #20]
        return 0;
10008e3c:	e071      	b.n	10008f22 <mpu_lp_accel_mode+0x11e>
     * it gets a chance to deassert the interrupt pin; therefore, we shift this
     * responsibility over to the MCU.
     *
     * Any register read will clear the interrupt.
     */
    mpu_set_int_latched(1);
10008e3e:	2001      	movs	r0, #1
10008e40:	4b39      	ldr	r3, [pc, #228]	; (10008f28 <mpu_lp_accel_mode+0x124>)
10008e42:	4798      	blx	r3
    tmp[1] = (tmp[1] << 6) | BIT_STBY_XYZG;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
        return -1;
#elif defined MPU6500
    /* Set wake frequency. */
    if (rate == 1)
10008e44:	2c01      	cmp	r4, #1
10008e46:	d103      	bne.n	10008e50 <mpu_lp_accel_mode+0x4c>
        tmp[0] = INV_LPA_1_25HZ;
10008e48:	2202      	movs	r2, #2
10008e4a:	ab01      	add	r3, sp, #4
10008e4c:	701a      	strb	r2, [r3, #0]
10008e4e:	e01a      	b.n	10008e86 <mpu_lp_accel_mode+0x82>
    else if (rate == 2)
10008e50:	2c02      	cmp	r4, #2
10008e52:	d103      	bne.n	10008e5c <mpu_lp_accel_mode+0x58>
        tmp[0] = INV_LPA_2_5HZ;
10008e54:	2203      	movs	r2, #3
10008e56:	ab01      	add	r3, sp, #4
10008e58:	701a      	strb	r2, [r3, #0]
10008e5a:	e014      	b.n	10008e86 <mpu_lp_accel_mode+0x82>
    else if (rate <= 5)
10008e5c:	2c05      	cmp	r4, #5
10008e5e:	d803      	bhi.n	10008e68 <mpu_lp_accel_mode+0x64>
        tmp[0] = INV_LPA_5HZ;
10008e60:	2204      	movs	r2, #4
10008e62:	ab01      	add	r3, sp, #4
10008e64:	701a      	strb	r2, [r3, #0]
10008e66:	e00e      	b.n	10008e86 <mpu_lp_accel_mode+0x82>
    else if (rate <= 10)
10008e68:	2c0a      	cmp	r4, #10
10008e6a:	d803      	bhi.n	10008e74 <mpu_lp_accel_mode+0x70>
        tmp[0] = INV_LPA_10HZ;
10008e6c:	2205      	movs	r2, #5
10008e6e:	ab01      	add	r3, sp, #4
10008e70:	701a      	strb	r2, [r3, #0]
10008e72:	e008      	b.n	10008e86 <mpu_lp_accel_mode+0x82>
    else if (rate <= 20)
10008e74:	2c14      	cmp	r4, #20
10008e76:	d803      	bhi.n	10008e80 <mpu_lp_accel_mode+0x7c>
        tmp[0] = INV_LPA_20HZ;
10008e78:	2206      	movs	r2, #6
10008e7a:	ab01      	add	r3, sp, #4
10008e7c:	701a      	strb	r2, [r3, #0]
10008e7e:	e002      	b.n	10008e86 <mpu_lp_accel_mode+0x82>
    else if (rate <= 40)
        tmp[0] = INV_LPA_40HZ;
10008e80:	2207      	movs	r2, #7
10008e82:	ab01      	add	r3, sp, #4
10008e84:	701a      	strb	r2, [r3, #0]
        tmp[0] = INV_LPA_160HZ;
    else if (rate <= 320)
        tmp[0] = INV_LPA_320HZ;
    else
        tmp[0] = INV_LPA_640HZ;
    if (i2c_write(st.hw->addr, st.reg->lp_accel_odr, 1, tmp))
10008e86:	4b29      	ldr	r3, [pc, #164]	; (10008f2c <mpu_lp_accel_mode+0x128>)
10008e88:	681a      	ldr	r2, [r3, #0]
10008e8a:	7a51      	ldrb	r1, [r2, #9]
10008e8c:	685b      	ldr	r3, [r3, #4]
10008e8e:	7818      	ldrb	r0, [r3, #0]
10008e90:	ab01      	add	r3, sp, #4
10008e92:	2201      	movs	r2, #1
10008e94:	4c26      	ldr	r4, [pc, #152]	; (10008f30 <mpu_lp_accel_mode+0x12c>)
10008e96:	47a0      	blx	r4
10008e98:	2800      	cmp	r0, #0
10008e9a:	d137      	bne.n	10008f0c <mpu_lp_accel_mode+0x108>
        return -1;
    /* Enable LP ACCEL mode, ACCEL_FCHOICE_B=1*/
    if (i2c_read(st.hw->addr, st.reg->accel_cfg2, 1, tmp))
10008e9c:	4b23      	ldr	r3, [pc, #140]	; (10008f2c <mpu_lp_accel_mode+0x128>)
10008e9e:	681a      	ldr	r2, [r3, #0]
10008ea0:	7a11      	ldrb	r1, [r2, #8]
10008ea2:	685b      	ldr	r3, [r3, #4]
10008ea4:	7818      	ldrb	r0, [r3, #0]
10008ea6:	ab01      	add	r3, sp, #4
10008ea8:	2201      	movs	r2, #1
10008eaa:	4c22      	ldr	r4, [pc, #136]	; (10008f34 <mpu_lp_accel_mode+0x130>)
10008eac:	47a0      	blx	r4
10008eae:	2800      	cmp	r0, #0
10008eb0:	d12f      	bne.n	10008f12 <mpu_lp_accel_mode+0x10e>
       	return -1;

    tmp[0] = BIT_ACCL_FC_B | tmp[0];
10008eb2:	ab01      	add	r3, sp, #4
10008eb4:	7819      	ldrb	r1, [r3, #0]
10008eb6:	2208      	movs	r2, #8
10008eb8:	430a      	orrs	r2, r1
10008eba:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, tmp))
10008ebc:	4a1b      	ldr	r2, [pc, #108]	; (10008f2c <mpu_lp_accel_mode+0x128>)
10008ebe:	6811      	ldr	r1, [r2, #0]
10008ec0:	7a09      	ldrb	r1, [r1, #8]
10008ec2:	6852      	ldr	r2, [r2, #4]
10008ec4:	7810      	ldrb	r0, [r2, #0]
10008ec6:	2201      	movs	r2, #1
10008ec8:	4c19      	ldr	r4, [pc, #100]	; (10008f30 <mpu_lp_accel_mode+0x12c>)
10008eca:	47a0      	blx	r4
10008ecc:	2800      	cmp	r0, #0
10008ece:	d123      	bne.n	10008f18 <mpu_lp_accel_mode+0x114>
    	return -1;
    tmp[0] = BIT_LPA_CYCLE;
10008ed0:	ab01      	add	r3, sp, #4
10008ed2:	2220      	movs	r2, #32
10008ed4:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
10008ed6:	4a15      	ldr	r2, [pc, #84]	; (10008f2c <mpu_lp_accel_mode+0x128>)
10008ed8:	6811      	ldr	r1, [r2, #0]
10008eda:	7d49      	ldrb	r1, [r1, #21]
10008edc:	6852      	ldr	r2, [r2, #4]
10008ede:	7810      	ldrb	r0, [r2, #0]
10008ee0:	2201      	movs	r2, #1
10008ee2:	4c13      	ldr	r4, [pc, #76]	; (10008f30 <mpu_lp_accel_mode+0x12c>)
10008ee4:	47a0      	blx	r4
10008ee6:	1e04      	subs	r4, r0, #0
10008ee8:	d119      	bne.n	10008f1e <mpu_lp_accel_mode+0x11a>
        return -1;
#endif
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
10008eea:	4b10      	ldr	r3, [pc, #64]	; (10008f2c <mpu_lp_accel_mode+0x128>)
10008eec:	2208      	movs	r2, #8
10008eee:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.clk_src = 0;
10008ef0:	2200      	movs	r2, #0
10008ef2:	731a      	strb	r2, [r3, #12]
    st.chip_cfg.lp_accel_mode = 1;
10008ef4:	3201      	adds	r2, #1
10008ef6:	751a      	strb	r2, [r3, #20]
    mpu_configure_fifo(0);
10008ef8:	2000      	movs	r0, #0
10008efa:	4b0f      	ldr	r3, [pc, #60]	; (10008f38 <mpu_lp_accel_mode+0x134>)
10008efc:	4798      	blx	r3

    return 0;
10008efe:	e010      	b.n	10008f22 <mpu_lp_accel_mode+0x11e>
int mpu_lp_accel_mode(unsigned short rate)
{
    unsigned char tmp[2];

    if (rate > 40)
        return -1;
10008f00:	2401      	movs	r4, #1
10008f02:	4264      	negs	r4, r4
10008f04:	e00d      	b.n	10008f22 <mpu_lp_accel_mode+0x11e>
    if (!rate) {
        mpu_set_int_latched(0);
        tmp[0] = 0;
        tmp[1] = BIT_STBY_XYZG;
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
            return -1;
10008f06:	2401      	movs	r4, #1
10008f08:	4264      	negs	r4, r4
10008f0a:	e00a      	b.n	10008f22 <mpu_lp_accel_mode+0x11e>
    else if (rate <= 320)
        tmp[0] = INV_LPA_320HZ;
    else
        tmp[0] = INV_LPA_640HZ;
    if (i2c_write(st.hw->addr, st.reg->lp_accel_odr, 1, tmp))
        return -1;
10008f0c:	2401      	movs	r4, #1
10008f0e:	4264      	negs	r4, r4
10008f10:	e007      	b.n	10008f22 <mpu_lp_accel_mode+0x11e>
    /* Enable LP ACCEL mode, ACCEL_FCHOICE_B=1*/
    if (i2c_read(st.hw->addr, st.reg->accel_cfg2, 1, tmp))
       	return -1;
10008f12:	2401      	movs	r4, #1
10008f14:	4264      	negs	r4, r4
10008f16:	e004      	b.n	10008f22 <mpu_lp_accel_mode+0x11e>

    tmp[0] = BIT_ACCL_FC_B | tmp[0];
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, tmp))
    	return -1;
10008f18:	2401      	movs	r4, #1
10008f1a:	4264      	negs	r4, r4
10008f1c:	e001      	b.n	10008f22 <mpu_lp_accel_mode+0x11e>
    tmp[0] = BIT_LPA_CYCLE;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
        return -1;
10008f1e:	2401      	movs	r4, #1
10008f20:	4264      	negs	r4, r4
    st.chip_cfg.clk_src = 0;
    st.chip_cfg.lp_accel_mode = 1;
    mpu_configure_fifo(0);

    return 0;
}
10008f22:	0020      	movs	r0, r4
10008f24:	b002      	add	sp, #8
10008f26:	bd10      	pop	{r4, pc}
10008f28:	10008d81 	.word	0x10008d81
10008f2c:	10017ef8 	.word	0x10017ef8
10008f30:	1000a93d 	.word	0x1000a93d
10008f34:	1000a999 	.word	0x1000a999
10008f38:	100089cd 	.word	0x100089cd

10008f3c <mpu_set_sample_rate>:
 *  Sampling rate must be between 4Hz and 1kHz.
 *  @param[in]  rate    Desired sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_sample_rate(unsigned short rate)
{
10008f3c:	b530      	push	{r4, r5, lr}
10008f3e:	b083      	sub	sp, #12
10008f40:	0004      	movs	r4, r0
    unsigned char data;

    if (!(st.chip_cfg.sensors))
10008f42:	4b2c      	ldr	r3, [pc, #176]	; (10008ff4 <mpu_set_sample_rate+0xb8>)
10008f44:	7a9b      	ldrb	r3, [r3, #10]
10008f46:	2b00      	cmp	r3, #0
10008f48:	d048      	beq.n	10008fdc <mpu_set_sample_rate+0xa0>
        return -1;

    if (st.chip_cfg.dmp_on)
10008f4a:	2324      	movs	r3, #36	; 0x24
10008f4c:	4a29      	ldr	r2, [pc, #164]	; (10008ff4 <mpu_set_sample_rate+0xb8>)
10008f4e:	5cd3      	ldrb	r3, [r2, r3]
10008f50:	2b00      	cmp	r3, #0
10008f52:	d146      	bne.n	10008fe2 <mpu_set_sample_rate+0xa6>
        return -1;
    else {
        if (st.chip_cfg.lp_accel_mode) {
10008f54:	7d13      	ldrb	r3, [r2, #20]
10008f56:	2b00      	cmp	r3, #0
10008f58:	d00a      	beq.n	10008f70 <mpu_set_sample_rate+0x34>
            if (rate && (rate <= 40)) {
10008f5a:	1e43      	subs	r3, r0, #1
10008f5c:	b29b      	uxth	r3, r3
10008f5e:	2b27      	cmp	r3, #39	; 0x27
10008f60:	d803      	bhi.n	10008f6a <mpu_set_sample_rate+0x2e>
                /* Just stay in low-power accel mode. */
                mpu_lp_accel_mode(rate);
10008f62:	4b25      	ldr	r3, [pc, #148]	; (10008ff8 <mpu_set_sample_rate+0xbc>)
10008f64:	4798      	blx	r3
                return 0;
10008f66:	2400      	movs	r4, #0
10008f68:	e040      	b.n	10008fec <mpu_set_sample_rate+0xb0>
            }
            /* Requested rate exceeds the allowed frequencies in LP accel mode,
             * switch back to full-power mode.
             */
            mpu_lp_accel_mode(0);
10008f6a:	2000      	movs	r0, #0
10008f6c:	4b22      	ldr	r3, [pc, #136]	; (10008ff8 <mpu_set_sample_rate+0xbc>)
10008f6e:	4798      	blx	r3
        }
        if (rate < 4)
            rate = 4;
10008f70:	2104      	movs	r1, #4
            /* Requested rate exceeds the allowed frequencies in LP accel mode,
             * switch back to full-power mode.
             */
            mpu_lp_accel_mode(0);
        }
        if (rate < 4)
10008f72:	2c03      	cmp	r4, #3
10008f74:	d907      	bls.n	10008f86 <mpu_set_sample_rate+0x4a>
10008f76:	1c21      	adds	r1, r4, #0
10008f78:	23fa      	movs	r3, #250	; 0xfa
10008f7a:	009b      	lsls	r3, r3, #2
10008f7c:	429c      	cmp	r4, r3
10008f7e:	d901      	bls.n	10008f84 <mpu_set_sample_rate+0x48>
10008f80:	4b1e      	ldr	r3, [pc, #120]	; (10008ffc <mpu_set_sample_rate+0xc0>)
10008f82:	8819      	ldrh	r1, [r3, #0]
10008f84:	b289      	uxth	r1, r1
            rate = 4;
        else if (rate > 1000)
            rate = 1000;

        data = 1000 / rate - 1;
10008f86:	466b      	mov	r3, sp
10008f88:	1ddc      	adds	r4, r3, #7
10008f8a:	20fa      	movs	r0, #250	; 0xfa
10008f8c:	0080      	lsls	r0, r0, #2
10008f8e:	4b1c      	ldr	r3, [pc, #112]	; (10009000 <mpu_set_sample_rate+0xc4>)
10008f90:	4798      	blx	r3
10008f92:	3801      	subs	r0, #1
10008f94:	7020      	strb	r0, [r4, #0]
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
10008f96:	4b17      	ldr	r3, [pc, #92]	; (10008ff4 <mpu_set_sample_rate+0xb8>)
10008f98:	681a      	ldr	r2, [r3, #0]
10008f9a:	7851      	ldrb	r1, [r2, #1]
10008f9c:	685b      	ldr	r3, [r3, #4]
10008f9e:	7818      	ldrb	r0, [r3, #0]
10008fa0:	0023      	movs	r3, r4
10008fa2:	2201      	movs	r2, #1
10008fa4:	4c17      	ldr	r4, [pc, #92]	; (10009004 <mpu_set_sample_rate+0xc8>)
10008fa6:	47a0      	blx	r4
10008fa8:	1e04      	subs	r4, r0, #0
10008faa:	d11d      	bne.n	10008fe8 <mpu_set_sample_rate+0xac>
            return -1;

        st.chip_cfg.sample_rate = 1000 / (1 + data);
10008fac:	4d11      	ldr	r5, [pc, #68]	; (10008ff4 <mpu_set_sample_rate+0xb8>)
10008fae:	466b      	mov	r3, sp
10008fb0:	79d9      	ldrb	r1, [r3, #7]
10008fb2:	3101      	adds	r1, #1
10008fb4:	20fa      	movs	r0, #250	; 0xfa
10008fb6:	0080      	lsls	r0, r0, #2
10008fb8:	4b11      	ldr	r3, [pc, #68]	; (10009000 <mpu_set_sample_rate+0xc4>)
10008fba:	4798      	blx	r3
10008fbc:	81e8      	strh	r0, [r5, #14]

#ifdef AK89xx_SECONDARY
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
10008fbe:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
10008fc0:	1c18      	adds	r0, r3, #0
10008fc2:	b29b      	uxth	r3, r3
10008fc4:	2b64      	cmp	r3, #100	; 0x64
10008fc6:	d900      	bls.n	10008fca <mpu_set_sample_rate+0x8e>
10008fc8:	2064      	movs	r0, #100	; 0x64
10008fca:	b280      	uxth	r0, r0
10008fcc:	4b0e      	ldr	r3, [pc, #56]	; (10009008 <mpu_set_sample_rate+0xcc>)
10008fce:	4798      	blx	r3
#endif

        /* Automatically set LPF to 1/2 sampling rate. */
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
10008fd0:	4b08      	ldr	r3, [pc, #32]	; (10008ff4 <mpu_set_sample_rate+0xb8>)
10008fd2:	89d8      	ldrh	r0, [r3, #14]
10008fd4:	0840      	lsrs	r0, r0, #1
10008fd6:	4b0d      	ldr	r3, [pc, #52]	; (1000900c <mpu_set_sample_rate+0xd0>)
10008fd8:	4798      	blx	r3
        return 0;
10008fda:	e007      	b.n	10008fec <mpu_set_sample_rate+0xb0>
int mpu_set_sample_rate(unsigned short rate)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
10008fdc:	2401      	movs	r4, #1
10008fde:	4264      	negs	r4, r4
10008fe0:	e004      	b.n	10008fec <mpu_set_sample_rate+0xb0>

    if (st.chip_cfg.dmp_on)
        return -1;
10008fe2:	2401      	movs	r4, #1
10008fe4:	4264      	negs	r4, r4
10008fe6:	e001      	b.n	10008fec <mpu_set_sample_rate+0xb0>
        else if (rate > 1000)
            rate = 1000;

        data = 1000 / rate - 1;
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
            return -1;
10008fe8:	2401      	movs	r4, #1
10008fea:	4264      	negs	r4, r4

        /* Automatically set LPF to 1/2 sampling rate. */
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
        return 0;
    }
}
10008fec:	0020      	movs	r0, r4
10008fee:	b003      	add	sp, #12
10008ff0:	bd30      	pop	{r4, r5, pc}
10008ff2:	46c0      	nop			; (mov r8, r8)
10008ff4:	10017ef8 	.word	0x10017ef8
10008ff8:	10008e05 	.word	0x10008e05
10008ffc:	10015d34 	.word	0x10015d34
10009000:	10012f19 	.word	0x10012f19
10009004:	1000a93d 	.word	0x1000a93d
10009008:	10008955 	.word	0x10008955
1000900c:	1000887d 	.word	0x1000887d

10009010 <mpu_set_sensors>:
 *  \n INV_XYZ_COMPASS
 *  @param[in]  sensors    Mask of sensors to wake.
 *  @return     0 if successful.
 */
int mpu_set_sensors(unsigned char sensors)
{
10009010:	b530      	push	{r4, r5, lr}
10009012:	b083      	sub	sp, #12
10009014:	0004      	movs	r4, r0
    unsigned char data;
#ifdef AK89xx_SECONDARY
    unsigned char user_ctrl;
#endif

    if (sensors & INV_XYZ_GYRO)
10009016:	2370      	movs	r3, #112	; 0x70
10009018:	4203      	tst	r3, r0
1000901a:	d003      	beq.n	10009024 <mpu_set_sensors+0x14>
        data = INV_CLK_PLL;
1000901c:	2201      	movs	r2, #1
1000901e:	466b      	mov	r3, sp
10009020:	71da      	strb	r2, [r3, #7]
10009022:	e015      	b.n	10009050 <mpu_set_sensors+0x40>
    else if (sensors)
10009024:	2800      	cmp	r0, #0
10009026:	d003      	beq.n	10009030 <mpu_set_sensors+0x20>
        data = 0;
10009028:	2200      	movs	r2, #0
1000902a:	466b      	mov	r3, sp
1000902c:	71da      	strb	r2, [r3, #7]
1000902e:	e00f      	b.n	10009050 <mpu_set_sensors+0x40>
    else
        data = BIT_SLEEP;
10009030:	466b      	mov	r3, sp
10009032:	3307      	adds	r3, #7
10009034:	2240      	movs	r2, #64	; 0x40
10009036:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
10009038:	4a6a      	ldr	r2, [pc, #424]	; (100091e4 <mpu_set_sensors+0x1d4>)
1000903a:	6811      	ldr	r1, [r2, #0]
1000903c:	7d49      	ldrb	r1, [r1, #21]
1000903e:	6852      	ldr	r2, [r2, #4]
10009040:	7810      	ldrb	r0, [r2, #0]
10009042:	2201      	movs	r2, #1
10009044:	4d68      	ldr	r5, [pc, #416]	; (100091e8 <mpu_set_sensors+0x1d8>)
10009046:	47a8      	blx	r5
10009048:	2800      	cmp	r0, #0
1000904a:	d100      	bne.n	1000904e <mpu_set_sensors+0x3e>
1000904c:	e0b2      	b.n	100091b4 <mpu_set_sensors+0x1a4>
1000904e:	e00b      	b.n	10009068 <mpu_set_sensors+0x58>
10009050:	4b64      	ldr	r3, [pc, #400]	; (100091e4 <mpu_set_sensors+0x1d4>)
10009052:	681a      	ldr	r2, [r3, #0]
10009054:	7d51      	ldrb	r1, [r2, #21]
10009056:	685b      	ldr	r3, [r3, #4]
10009058:	7818      	ldrb	r0, [r3, #0]
1000905a:	466b      	mov	r3, sp
1000905c:	3307      	adds	r3, #7
1000905e:	2201      	movs	r2, #1
10009060:	4d61      	ldr	r5, [pc, #388]	; (100091e8 <mpu_set_sensors+0x1d8>)
10009062:	47a8      	blx	r5
10009064:	2800      	cmp	r0, #0
10009066:	d005      	beq.n	10009074 <mpu_set_sensors+0x64>
        st.chip_cfg.sensors = 0;
10009068:	2200      	movs	r2, #0
1000906a:	4b5e      	ldr	r3, [pc, #376]	; (100091e4 <mpu_set_sensors+0x1d4>)
1000906c:	729a      	strb	r2, [r3, #10]
        return -1;
1000906e:	2501      	movs	r5, #1
10009070:	426d      	negs	r5, r5
10009072:	e0b4      	b.n	100091de <mpu_set_sensors+0x1ce>
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
10009074:	466b      	mov	r3, sp
10009076:	1dda      	adds	r2, r3, #7
10009078:	79db      	ldrb	r3, [r3, #7]
1000907a:	2140      	movs	r1, #64	; 0x40
1000907c:	438b      	bics	r3, r1
1000907e:	4959      	ldr	r1, [pc, #356]	; (100091e4 <mpu_set_sensors+0x1d4>)
10009080:	730b      	strb	r3, [r1, #12]

    data = 0;
10009082:	2300      	movs	r3, #0
10009084:	7013      	strb	r3, [r2, #0]
    if (!(sensors & INV_X_GYRO))
10009086:	0663      	lsls	r3, r4, #25
10009088:	d402      	bmi.n	10009090 <mpu_set_sensors+0x80>
        data |= BIT_STBY_XG;
1000908a:	2204      	movs	r2, #4
1000908c:	466b      	mov	r3, sp
1000908e:	71da      	strb	r2, [r3, #7]
    if (!(sensors & INV_Y_GYRO))
10009090:	06a3      	lsls	r3, r4, #26
10009092:	d405      	bmi.n	100090a0 <mpu_set_sensors+0x90>
        data |= BIT_STBY_YG;
10009094:	466b      	mov	r3, sp
10009096:	1dda      	adds	r2, r3, #7
10009098:	79d9      	ldrb	r1, [r3, #7]
1000909a:	2302      	movs	r3, #2
1000909c:	430b      	orrs	r3, r1
1000909e:	7013      	strb	r3, [r2, #0]
    if (!(sensors & INV_Z_GYRO))
100090a0:	06e3      	lsls	r3, r4, #27
100090a2:	d405      	bmi.n	100090b0 <mpu_set_sensors+0xa0>
        data |= BIT_STBY_ZG;
100090a4:	466b      	mov	r3, sp
100090a6:	1dda      	adds	r2, r3, #7
100090a8:	79d9      	ldrb	r1, [r3, #7]
100090aa:	2301      	movs	r3, #1
100090ac:	430b      	orrs	r3, r1
100090ae:	7013      	strb	r3, [r2, #0]
    if (!(sensors & INV_XYZ_ACCEL))
100090b0:	0723      	lsls	r3, r4, #28
100090b2:	d405      	bmi.n	100090c0 <mpu_set_sensors+0xb0>
        data |= BIT_STBY_XYZA;
100090b4:	466b      	mov	r3, sp
100090b6:	1dda      	adds	r2, r3, #7
100090b8:	79d9      	ldrb	r1, [r3, #7]
100090ba:	2338      	movs	r3, #56	; 0x38
100090bc:	430b      	orrs	r3, r1
100090be:	7013      	strb	r3, [r2, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
100090c0:	4b48      	ldr	r3, [pc, #288]	; (100091e4 <mpu_set_sensors+0x1d4>)
100090c2:	681a      	ldr	r2, [r3, #0]
100090c4:	7d91      	ldrb	r1, [r2, #22]
100090c6:	685b      	ldr	r3, [r3, #4]
100090c8:	7818      	ldrb	r0, [r3, #0]
100090ca:	466b      	mov	r3, sp
100090cc:	3307      	adds	r3, #7
100090ce:	2201      	movs	r2, #1
100090d0:	4d45      	ldr	r5, [pc, #276]	; (100091e8 <mpu_set_sensors+0x1d8>)
100090d2:	47a8      	blx	r5
100090d4:	2800      	cmp	r0, #0
100090d6:	d005      	beq.n	100090e4 <mpu_set_sensors+0xd4>
        st.chip_cfg.sensors = 0;
100090d8:	2200      	movs	r2, #0
100090da:	4b42      	ldr	r3, [pc, #264]	; (100091e4 <mpu_set_sensors+0x1d4>)
100090dc:	729a      	strb	r2, [r3, #10]
        return -1;
100090de:	2501      	movs	r5, #1
100090e0:	426d      	negs	r5, r5
100090e2:	e07c      	b.n	100091de <mpu_set_sensors+0x1ce>
    }

    if (sensors && (sensors != INV_XYZ_ACCEL))
100090e4:	2308      	movs	r3, #8
100090e6:	0022      	movs	r2, r4
100090e8:	439a      	bics	r2, r3
100090ea:	d06b      	beq.n	100091c4 <mpu_set_sensors+0x1b4>
        /* Latched interrupts only used in LP accel mode. */
        mpu_set_int_latched(0);
100090ec:	2000      	movs	r0, #0
100090ee:	4b3f      	ldr	r3, [pc, #252]	; (100091ec <mpu_set_sensors+0x1dc>)
100090f0:	4798      	blx	r3
    if (sensors & INV_XYZ_COMPASS)
        mpu_set_bypass(1);
    else
        mpu_set_bypass(0);
#else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
100090f2:	4b3c      	ldr	r3, [pc, #240]	; (100091e4 <mpu_set_sensors+0x1d4>)
100090f4:	681a      	ldr	r2, [r3, #0]
100090f6:	7911      	ldrb	r1, [r2, #4]
100090f8:	685b      	ldr	r3, [r3, #4]
100090fa:	7818      	ldrb	r0, [r3, #0]
100090fc:	466b      	mov	r3, sp
100090fe:	3306      	adds	r3, #6
10009100:	2201      	movs	r2, #1
10009102:	4d3b      	ldr	r5, [pc, #236]	; (100091f0 <mpu_set_sensors+0x1e0>)
10009104:	47a8      	blx	r5
10009106:	2800      	cmp	r0, #0
10009108:	d148      	bne.n	1000919c <mpu_set_sensors+0x18c>
        return -1;
    /* Handle AKM power management. */
    if (sensors & INV_XYZ_COMPASS) {
1000910a:	07e3      	lsls	r3, r4, #31
1000910c:	d509      	bpl.n	10009122 <mpu_set_sensors+0x112>
        data = AKM_SINGLE_MEASUREMENT;
1000910e:	2211      	movs	r2, #17
10009110:	466b      	mov	r3, sp
10009112:	71da      	strb	r2, [r3, #7]
        user_ctrl |= BIT_AUX_IF_EN;
10009114:	466b      	mov	r3, sp
10009116:	1d9a      	adds	r2, r3, #6
10009118:	7999      	ldrb	r1, [r3, #6]
1000911a:	2320      	movs	r3, #32
1000911c:	430b      	orrs	r3, r1
1000911e:	7013      	strb	r3, [r2, #0]
10009120:	e008      	b.n	10009134 <mpu_set_sensors+0x124>
    } else {
        data = AKM_POWER_DOWN;
10009122:	2210      	movs	r2, #16
10009124:	466b      	mov	r3, sp
10009126:	71da      	strb	r2, [r3, #7]
        user_ctrl &= ~BIT_AUX_IF_EN;
10009128:	466b      	mov	r3, sp
1000912a:	1d9a      	adds	r2, r3, #6
1000912c:	799b      	ldrb	r3, [r3, #6]
1000912e:	2120      	movs	r1, #32
10009130:	438b      	bics	r3, r1
10009132:	7013      	strb	r3, [r2, #0]
    }
    if (st.chip_cfg.dmp_on)
10009134:	2324      	movs	r3, #36	; 0x24
10009136:	4a2b      	ldr	r2, [pc, #172]	; (100091e4 <mpu_set_sensors+0x1d4>)
10009138:	5cd3      	ldrb	r3, [r2, r3]
1000913a:	2b00      	cmp	r3, #0
1000913c:	d007      	beq.n	1000914e <mpu_set_sensors+0x13e>
        user_ctrl |= BIT_DMP_EN;
1000913e:	466b      	mov	r3, sp
10009140:	1d9a      	adds	r2, r3, #6
10009142:	799b      	ldrb	r3, [r3, #6]
10009144:	2180      	movs	r1, #128	; 0x80
10009146:	4249      	negs	r1, r1
10009148:	430b      	orrs	r3, r1
1000914a:	7013      	strb	r3, [r2, #0]
1000914c:	e005      	b.n	1000915a <mpu_set_sensors+0x14a>
    else
        user_ctrl &= ~BIT_DMP_EN;
1000914e:	466b      	mov	r3, sp
10009150:	1d9a      	adds	r2, r3, #6
10009152:	799b      	ldrb	r3, [r3, #6]
10009154:	217f      	movs	r1, #127	; 0x7f
10009156:	400b      	ands	r3, r1
10009158:	7013      	strb	r3, [r2, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, &data))
1000915a:	4b22      	ldr	r3, [pc, #136]	; (100091e4 <mpu_set_sensors+0x1d4>)
1000915c:	2226      	movs	r2, #38	; 0x26
1000915e:	6819      	ldr	r1, [r3, #0]
10009160:	5c89      	ldrb	r1, [r1, r2]
10009162:	685b      	ldr	r3, [r3, #4]
10009164:	7818      	ldrb	r0, [r3, #0]
10009166:	466b      	mov	r3, sp
10009168:	3307      	adds	r3, #7
1000916a:	3a25      	subs	r2, #37	; 0x25
1000916c:	4d1e      	ldr	r5, [pc, #120]	; (100091e8 <mpu_set_sensors+0x1d8>)
1000916e:	47a8      	blx	r5
10009170:	2800      	cmp	r0, #0
10009172:	d116      	bne.n	100091a2 <mpu_set_sensors+0x192>
        return -1;
    /* Enable/disable I2C master mode. */
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
10009174:	4b1b      	ldr	r3, [pc, #108]	; (100091e4 <mpu_set_sensors+0x1d4>)
10009176:	681a      	ldr	r2, [r3, #0]
10009178:	7911      	ldrb	r1, [r2, #4]
1000917a:	685b      	ldr	r3, [r3, #4]
1000917c:	7818      	ldrb	r0, [r3, #0]
1000917e:	466b      	mov	r3, sp
10009180:	3306      	adds	r3, #6
10009182:	2201      	movs	r2, #1
10009184:	4d18      	ldr	r5, [pc, #96]	; (100091e8 <mpu_set_sensors+0x1d8>)
10009186:	47a8      	blx	r5
10009188:	1e05      	subs	r5, r0, #0
1000918a:	d10d      	bne.n	100091a8 <mpu_set_sensors+0x198>
        return -1;
#endif
#endif

    st.chip_cfg.sensors = sensors;
1000918c:	4b15      	ldr	r3, [pc, #84]	; (100091e4 <mpu_set_sensors+0x1d4>)
1000918e:	729c      	strb	r4, [r3, #10]
    st.chip_cfg.lp_accel_mode = 0;
10009190:	2200      	movs	r2, #0
10009192:	751a      	strb	r2, [r3, #20]
    delay_ms(50);
10009194:	2032      	movs	r0, #50	; 0x32
10009196:	4b17      	ldr	r3, [pc, #92]	; (100091f4 <mpu_set_sensors+0x1e4>)
10009198:	4798      	blx	r3
    return 0;
1000919a:	e020      	b.n	100091de <mpu_set_sensors+0x1ce>
        mpu_set_bypass(1);
    else
        mpu_set_bypass(0);
#else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
        return -1;
1000919c:	2501      	movs	r5, #1
1000919e:	426d      	negs	r5, r5
100091a0:	e01d      	b.n	100091de <mpu_set_sensors+0x1ce>
    if (st.chip_cfg.dmp_on)
        user_ctrl |= BIT_DMP_EN;
    else
        user_ctrl &= ~BIT_DMP_EN;
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, &data))
        return -1;
100091a2:	2501      	movs	r5, #1
100091a4:	426d      	negs	r5, r5
100091a6:	e01a      	b.n	100091de <mpu_set_sensors+0x1ce>
    /* Enable/disable I2C master mode. */
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
        return -1;
100091a8:	2501      	movs	r5, #1
100091aa:	426d      	negs	r5, r5
100091ac:	e017      	b.n	100091de <mpu_set_sensors+0x1ce>
        mpu_set_bypass(1);
    else
        mpu_set_bypass(0);
#else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
        return -1;
100091ae:	2501      	movs	r5, #1
100091b0:	426d      	negs	r5, r5
100091b2:	e014      	b.n	100091de <mpu_set_sensors+0x1ce>
        data = BIT_SLEEP;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
        st.chip_cfg.sensors = 0;
        return -1;
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
100091b4:	466b      	mov	r3, sp
100091b6:	3307      	adds	r3, #7
100091b8:	781b      	ldrb	r3, [r3, #0]
100091ba:	2240      	movs	r2, #64	; 0x40
100091bc:	4393      	bics	r3, r2
100091be:	4a09      	ldr	r2, [pc, #36]	; (100091e4 <mpu_set_sensors+0x1d4>)
100091c0:	7313      	strb	r3, [r2, #12]
100091c2:	e762      	b.n	1000908a <mpu_set_sensors+0x7a>
    if (sensors & INV_XYZ_COMPASS)
        mpu_set_bypass(1);
    else
        mpu_set_bypass(0);
#else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
100091c4:	4b07      	ldr	r3, [pc, #28]	; (100091e4 <mpu_set_sensors+0x1d4>)
100091c6:	681a      	ldr	r2, [r3, #0]
100091c8:	7911      	ldrb	r1, [r2, #4]
100091ca:	685b      	ldr	r3, [r3, #4]
100091cc:	7818      	ldrb	r0, [r3, #0]
100091ce:	466b      	mov	r3, sp
100091d0:	3306      	adds	r3, #6
100091d2:	2201      	movs	r2, #1
100091d4:	4d06      	ldr	r5, [pc, #24]	; (100091f0 <mpu_set_sensors+0x1e0>)
100091d6:	47a8      	blx	r5
100091d8:	2800      	cmp	r0, #0
100091da:	d0a2      	beq.n	10009122 <mpu_set_sensors+0x112>
100091dc:	e7e7      	b.n	100091ae <mpu_set_sensors+0x19e>

    st.chip_cfg.sensors = sensors;
    st.chip_cfg.lp_accel_mode = 0;
    delay_ms(50);
    return 0;
}
100091de:	0028      	movs	r0, r5
100091e0:	b003      	add	sp, #12
100091e2:	bd30      	pop	{r4, r5, pc}
100091e4:	10017ef8 	.word	0x10017ef8
100091e8:	1000a93d 	.word	0x1000a93d
100091ec:	10008d81 	.word	0x10008d81
100091f0:	1000a999 	.word	0x1000a999
100091f4:	10008129 	.word	0x10008129

100091f8 <mpu_init>:
 *  Data ready interrupt: Disabled, active low, unlatched.
 *  @param[in]  int_param   Platform-specific parameters to interrupt API.
 *  @return     0 if successful.
 */
int mpu_init(struct int_param_s *int_param)
{
100091f8:	b530      	push	{r4, r5, lr}
100091fa:	b085      	sub	sp, #20
    unsigned char data[6];

    /* Reset device. */
    data[0] = BIT_RESET;
100091fc:	ab02      	add	r3, sp, #8
100091fe:	2280      	movs	r2, #128	; 0x80
10009200:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
10009202:	4ab9      	ldr	r2, [pc, #740]	; (100094e8 <mpu_init+0x2f0>)
10009204:	6811      	ldr	r1, [r2, #0]
10009206:	7d49      	ldrb	r1, [r1, #21]
10009208:	6852      	ldr	r2, [r2, #4]
1000920a:	7810      	ldrb	r0, [r2, #0]
1000920c:	2201      	movs	r2, #1
1000920e:	4cb7      	ldr	r4, [pc, #732]	; (100094ec <mpu_init+0x2f4>)
10009210:	47a0      	blx	r4
10009212:	2800      	cmp	r0, #0
10009214:	d000      	beq.n	10009218 <mpu_init+0x20>
10009216:	e149      	b.n	100094ac <mpu_init+0x2b4>
        return -1;
    delay_ms(100);
10009218:	3064      	adds	r0, #100	; 0x64
1000921a:	4bb5      	ldr	r3, [pc, #724]	; (100094f0 <mpu_init+0x2f8>)
1000921c:	4798      	blx	r3

    /* Wake up chip. */
    data[0] = 0x00;
1000921e:	ab02      	add	r3, sp, #8
10009220:	2200      	movs	r2, #0
10009222:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
10009224:	4ab0      	ldr	r2, [pc, #704]	; (100094e8 <mpu_init+0x2f0>)
10009226:	6811      	ldr	r1, [r2, #0]
10009228:	7d49      	ldrb	r1, [r1, #21]
1000922a:	6852      	ldr	r2, [r2, #4]
1000922c:	7810      	ldrb	r0, [r2, #0]
1000922e:	2201      	movs	r2, #1
10009230:	4cae      	ldr	r4, [pc, #696]	; (100094ec <mpu_init+0x2f4>)
10009232:	47a0      	blx	r4
10009234:	2800      	cmp	r0, #0
10009236:	d000      	beq.n	1000923a <mpu_init+0x42>
10009238:	e13b      	b.n	100094b2 <mpu_init+0x2ba>
        return -1;

   st.chip_cfg.accel_half = 0;
1000923a:	4aab      	ldr	r2, [pc, #684]	; (100094e8 <mpu_init+0x2f0>)
1000923c:	2300      	movs	r3, #0
1000923e:	74d3      	strb	r3, [r2, #19]

#ifdef MPU6500
    /* MPU6500 shares 4kB of memory between the DMP and the FIFO. Since the
     * first 3kB are needed by the DMP, we'll use the last 1kB for the FIFO.
     */
    data[0] = BIT_FIFO_SIZE_1024;
10009240:	ab02      	add	r3, sp, #8
10009242:	2140      	movs	r1, #64	; 0x40
10009244:	7019      	strb	r1, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
10009246:	6811      	ldr	r1, [r2, #0]
10009248:	7a09      	ldrb	r1, [r1, #8]
1000924a:	6852      	ldr	r2, [r2, #4]
1000924c:	7810      	ldrb	r0, [r2, #0]
1000924e:	2201      	movs	r2, #1
10009250:	4ca6      	ldr	r4, [pc, #664]	; (100094ec <mpu_init+0x2f4>)
10009252:	47a0      	blx	r4
10009254:	2800      	cmp	r0, #0
10009256:	d000      	beq.n	1000925a <mpu_init+0x62>
10009258:	e12e      	b.n	100094b8 <mpu_init+0x2c0>
        return -1;
#endif

    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.sensors = 0xFF;
1000925a:	4ca3      	ldr	r4, [pc, #652]	; (100094e8 <mpu_init+0x2f0>)
1000925c:	23ff      	movs	r3, #255	; 0xff
1000925e:	72a3      	strb	r3, [r4, #10]
    st.chip_cfg.gyro_fsr = 0xFF;
10009260:	7223      	strb	r3, [r4, #8]
    st.chip_cfg.accel_fsr = 0xFF;
10009262:	7263      	strb	r3, [r4, #9]
    st.chip_cfg.lpf = 0xFF;
10009264:	72e3      	strb	r3, [r4, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
10009266:	2201      	movs	r2, #1
10009268:	4252      	negs	r2, r2
1000926a:	81e2      	strh	r2, [r4, #14]
    st.chip_cfg.fifo_enable = 0xFF;
1000926c:	7423      	strb	r3, [r4, #16]
    st.chip_cfg.bypass_mode = 0xFF;
1000926e:	74a3      	strb	r3, [r4, #18]
#ifdef AK89xx_SECONDARY
    st.chip_cfg.compass_sample_rate = 0xFFFF;
10009270:	8522      	strh	r2, [r4, #40]	; 0x28
#endif
    /* mpu_set_sensors always preserves this setting. */
    st.chip_cfg.clk_src = INV_CLK_PLL;
10009272:	3bfe      	subs	r3, #254	; 0xfe
10009274:	7323      	strb	r3, [r4, #12]
    /* Handled in next call to mpu_set_bypass. */
    st.chip_cfg.active_low_int = 0; // --> interrupt active high!!
10009276:	2500      	movs	r5, #0
10009278:	3321      	adds	r3, #33	; 0x21
1000927a:	54e5      	strb	r5, [r4, r3]
    st.chip_cfg.latched_int = 0;
1000927c:	3301      	adds	r3, #1
1000927e:	54e5      	strb	r5, [r4, r3]
    st.chip_cfg.int_motion_only = 0;
10009280:	7565      	strb	r5, [r4, #21]
    st.chip_cfg.lp_accel_mode = 0;
10009282:	7525      	strb	r5, [r4, #20]
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
10009284:	0020      	movs	r0, r4
10009286:	3016      	adds	r0, #22
10009288:	320d      	adds	r2, #13
1000928a:	2100      	movs	r1, #0
1000928c:	4b99      	ldr	r3, [pc, #612]	; (100094f4 <mpu_init+0x2fc>)
1000928e:	4798      	blx	r3
    st.chip_cfg.dmp_on = 0;
10009290:	2324      	movs	r3, #36	; 0x24
10009292:	54e5      	strb	r5, [r4, r3]
    st.chip_cfg.dmp_loaded = 0;
10009294:	3301      	adds	r3, #1
10009296:	54e5      	strb	r5, [r4, r3]
    st.chip_cfg.dmp_sample_rate = 0;
10009298:	84e5      	strh	r5, [r4, #38]	; 0x26

    if (mpu_set_gyro_fsr(2000))
1000929a:	20fa      	movs	r0, #250	; 0xfa
1000929c:	00c0      	lsls	r0, r0, #3
1000929e:	4b96      	ldr	r3, [pc, #600]	; (100094f8 <mpu_init+0x300>)
100092a0:	4798      	blx	r3
100092a2:	2800      	cmp	r0, #0
100092a4:	d000      	beq.n	100092a8 <mpu_init+0xb0>
100092a6:	e10a      	b.n	100094be <mpu_init+0x2c6>
        return -1;
    if (mpu_set_accel_fsr(2))
100092a8:	3002      	adds	r0, #2
100092aa:	4b94      	ldr	r3, [pc, #592]	; (100094fc <mpu_init+0x304>)
100092ac:	4798      	blx	r3
100092ae:	2800      	cmp	r0, #0
100092b0:	d000      	beq.n	100092b4 <mpu_init+0xbc>
100092b2:	e107      	b.n	100094c4 <mpu_init+0x2cc>
        return -1;
    if (mpu_set_lpf(42))
100092b4:	302a      	adds	r0, #42	; 0x2a
100092b6:	4b92      	ldr	r3, [pc, #584]	; (10009500 <mpu_init+0x308>)
100092b8:	4798      	blx	r3
100092ba:	2800      	cmp	r0, #0
100092bc:	d000      	beq.n	100092c0 <mpu_init+0xc8>
100092be:	e104      	b.n	100094ca <mpu_init+0x2d2>
        return -1;
    if (mpu_set_sample_rate(50))
100092c0:	3032      	adds	r0, #50	; 0x32
100092c2:	4b90      	ldr	r3, [pc, #576]	; (10009504 <mpu_init+0x30c>)
100092c4:	4798      	blx	r3
100092c6:	2800      	cmp	r0, #0
100092c8:	d000      	beq.n	100092cc <mpu_init+0xd4>
100092ca:	e101      	b.n	100094d0 <mpu_init+0x2d8>
        return -1;
    if (mpu_configure_fifo(0))
100092cc:	4b8e      	ldr	r3, [pc, #568]	; (10009508 <mpu_init+0x310>)
100092ce:	4798      	blx	r3
100092d0:	2800      	cmp	r0, #0
100092d2:	d000      	beq.n	100092d6 <mpu_init+0xde>
100092d4:	e0ff      	b.n	100094d6 <mpu_init+0x2de>
/* This initialization is similar to the one in ak8975.c. */
static int setup_compass(void)
{
    unsigned char data[4], akm_addr;

    mpu_set_bypass(1);
100092d6:	3001      	adds	r0, #1
100092d8:	4b8c      	ldr	r3, [pc, #560]	; (1000950c <mpu_init+0x314>)
100092da:	4798      	blx	r3

    /* Find compass. Possible addresses range from 0x0C to 0x0F. */
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
100092dc:	240c      	movs	r4, #12
        int result;
        result = i2c_read(akm_addr, AKM_REG_WHOAMI, 1, data);
100092de:	4d8c      	ldr	r5, [pc, #560]	; (10009510 <mpu_init+0x318>)
100092e0:	ab01      	add	r3, sp, #4
100092e2:	2201      	movs	r2, #1
100092e4:	2100      	movs	r1, #0
100092e6:	0020      	movs	r0, r4
100092e8:	47a8      	blx	r5
        if (!result && (data[0] == AKM_WHOAMI))
100092ea:	2800      	cmp	r0, #0
100092ec:	d103      	bne.n	100092f6 <mpu_init+0xfe>
100092ee:	466b      	mov	r3, sp
100092f0:	791b      	ldrb	r3, [r3, #4]
100092f2:	2b48      	cmp	r3, #72	; 0x48
100092f4:	d004      	beq.n	10009300 <mpu_init+0x108>
    unsigned char data[4], akm_addr;

    mpu_set_bypass(1);

    /* Find compass. Possible addresses range from 0x0C to 0x0F. */
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
100092f6:	3401      	adds	r4, #1
100092f8:	b2e4      	uxtb	r4, r4
100092fa:	2c10      	cmp	r4, #16
100092fc:	d1f0      	bne.n	100092e0 <mpu_init+0xe8>
100092fe:	e001      	b.n	10009304 <mpu_init+0x10c>
        result = i2c_read(akm_addr, AKM_REG_WHOAMI, 1, data);
        if (!result && (data[0] == AKM_WHOAMI))
            break;
    }

    if (akm_addr > 0x0F) {
10009300:	2c0f      	cmp	r4, #15
10009302:	d905      	bls.n	10009310 <mpu_init+0x118>
        /* TODO: Handle this case in all compass-related functions. */
        log_e("Compass not found.\n");
10009304:	4883      	ldr	r0, [pc, #524]	; (10009514 <mpu_init+0x31c>)
10009306:	4c84      	ldr	r4, [pc, #528]	; (10009518 <mpu_init+0x320>)
10009308:	47a0      	blx	r4
1000930a:	4884      	ldr	r0, [pc, #528]	; (1000951c <mpu_init+0x324>)
1000930c:	47a0      	blx	r4
1000930e:	e0c4      	b.n	1000949a <mpu_init+0x2a2>
        return -1;
    }

    st.chip_cfg.compass_addr = akm_addr;
10009310:	232a      	movs	r3, #42	; 0x2a
10009312:	4a75      	ldr	r2, [pc, #468]	; (100094e8 <mpu_init+0x2f0>)
10009314:	54d4      	strb	r4, [r2, r3]

    data[0] = AKM_POWER_DOWN;
10009316:	ab01      	add	r3, sp, #4
10009318:	2210      	movs	r2, #16
1000931a:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
1000931c:	3a0f      	subs	r2, #15
1000931e:	210a      	movs	r1, #10
10009320:	0020      	movs	r0, r4
10009322:	4c72      	ldr	r4, [pc, #456]	; (100094ec <mpu_init+0x2f4>)
10009324:	47a0      	blx	r4
10009326:	2800      	cmp	r0, #0
10009328:	d000      	beq.n	1000932c <mpu_init+0x134>
1000932a:	e0b6      	b.n	1000949a <mpu_init+0x2a2>
        return -1;
    delay_ms(1);
1000932c:	3001      	adds	r0, #1
1000932e:	4b70      	ldr	r3, [pc, #448]	; (100094f0 <mpu_init+0x2f8>)
10009330:	4798      	blx	r3

    data[0] = AKM_FUSE_ROM_ACCESS;
10009332:	ab01      	add	r3, sp, #4
10009334:	221f      	movs	r2, #31
10009336:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
10009338:	320b      	adds	r2, #11
1000933a:	496b      	ldr	r1, [pc, #428]	; (100094e8 <mpu_init+0x2f0>)
1000933c:	5c88      	ldrb	r0, [r1, r2]
1000933e:	3a29      	subs	r2, #41	; 0x29
10009340:	210a      	movs	r1, #10
10009342:	4c6a      	ldr	r4, [pc, #424]	; (100094ec <mpu_init+0x2f4>)
10009344:	47a0      	blx	r4
10009346:	2800      	cmp	r0, #0
10009348:	d000      	beq.n	1000934c <mpu_init+0x154>
1000934a:	e0a6      	b.n	1000949a <mpu_init+0x2a2>
        return -1;
    delay_ms(1);
1000934c:	3001      	adds	r0, #1
1000934e:	4b68      	ldr	r3, [pc, #416]	; (100094f0 <mpu_init+0x2f8>)
10009350:	4798      	blx	r3

    /* Get sensitivity adjustment data from fuse ROM. */
    if (i2c_read(st.chip_cfg.compass_addr, AKM_REG_ASAX, 3, data))
10009352:	232a      	movs	r3, #42	; 0x2a
10009354:	4a64      	ldr	r2, [pc, #400]	; (100094e8 <mpu_init+0x2f0>)
10009356:	5cd0      	ldrb	r0, [r2, r3]
10009358:	ab01      	add	r3, sp, #4
1000935a:	2203      	movs	r2, #3
1000935c:	2110      	movs	r1, #16
1000935e:	4c6c      	ldr	r4, [pc, #432]	; (10009510 <mpu_init+0x318>)
10009360:	47a0      	blx	r4
10009362:	2800      	cmp	r0, #0
10009364:	d000      	beq.n	10009368 <mpu_init+0x170>
10009366:	e098      	b.n	1000949a <mpu_init+0x2a2>
        return -1;
    st.chip_cfg.mag_sens_adj[0] = (long)data[0] + 128;
10009368:	4a5f      	ldr	r2, [pc, #380]	; (100094e8 <mpu_init+0x2f0>)
1000936a:	ab01      	add	r3, sp, #4
1000936c:	7819      	ldrb	r1, [r3, #0]
1000936e:	3180      	adds	r1, #128	; 0x80
10009370:	8591      	strh	r1, [r2, #44]	; 0x2c
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
10009372:	7859      	ldrb	r1, [r3, #1]
10009374:	3180      	adds	r1, #128	; 0x80
10009376:	85d1      	strh	r1, [r2, #46]	; 0x2e
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;
10009378:	7899      	ldrb	r1, [r3, #2]
1000937a:	3180      	adds	r1, #128	; 0x80
1000937c:	8611      	strh	r1, [r2, #48]	; 0x30

    data[0] = AKM_POWER_DOWN;
1000937e:	2110      	movs	r1, #16
10009380:	7019      	strb	r1, [r3, #0]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
10009382:	311a      	adds	r1, #26
10009384:	5c50      	ldrb	r0, [r2, r1]
10009386:	2201      	movs	r2, #1
10009388:	3920      	subs	r1, #32
1000938a:	4c58      	ldr	r4, [pc, #352]	; (100094ec <mpu_init+0x2f4>)
1000938c:	47a0      	blx	r4
1000938e:	2800      	cmp	r0, #0
10009390:	d000      	beq.n	10009394 <mpu_init+0x19c>
10009392:	e082      	b.n	1000949a <mpu_init+0x2a2>
        return -1;
    delay_ms(1);
10009394:	3001      	adds	r0, #1
10009396:	4b56      	ldr	r3, [pc, #344]	; (100094f0 <mpu_init+0x2f8>)
10009398:	4798      	blx	r3

    mpu_set_bypass(0);
1000939a:	2000      	movs	r0, #0
1000939c:	4b5b      	ldr	r3, [pc, #364]	; (1000950c <mpu_init+0x314>)
1000939e:	4798      	blx	r3

    /* Set up master mode, master clock, and ES bit. */
    data[0] = 0x40;
100093a0:	ab01      	add	r3, sp, #4
100093a2:	2240      	movs	r2, #64	; 0x40
100093a4:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
100093a6:	4a50      	ldr	r2, [pc, #320]	; (100094e8 <mpu_init+0x2f0>)
100093a8:	6811      	ldr	r1, [r2, #0]
100093aa:	7e89      	ldrb	r1, [r1, #26]
100093ac:	6852      	ldr	r2, [r2, #4]
100093ae:	7810      	ldrb	r0, [r2, #0]
100093b0:	2201      	movs	r2, #1
100093b2:	4c4e      	ldr	r4, [pc, #312]	; (100094ec <mpu_init+0x2f4>)
100093b4:	47a0      	blx	r4
100093b6:	2800      	cmp	r0, #0
100093b8:	d16f      	bne.n	1000949a <mpu_init+0x2a2>
        return -1;

    /* Slave 0 reads from AKM data registers. */
    data[0] = BIT_I2C_READ | st.chip_cfg.compass_addr;
100093ba:	ab01      	add	r3, sp, #4
100093bc:	4a4a      	ldr	r2, [pc, #296]	; (100094e8 <mpu_init+0x2f0>)
100093be:	212a      	movs	r1, #42	; 0x2a
100093c0:	5c51      	ldrb	r1, [r2, r1]
100093c2:	3880      	subs	r0, #128	; 0x80
100093c4:	4301      	orrs	r1, r0
100093c6:	7019      	strb	r1, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s0_addr, 1, data))
100093c8:	6811      	ldr	r1, [r2, #0]
100093ca:	7f89      	ldrb	r1, [r1, #30]
100093cc:	6852      	ldr	r2, [r2, #4]
100093ce:	7810      	ldrb	r0, [r2, #0]
100093d0:	2201      	movs	r2, #1
100093d2:	4c46      	ldr	r4, [pc, #280]	; (100094ec <mpu_init+0x2f4>)
100093d4:	47a0      	blx	r4
100093d6:	2800      	cmp	r0, #0
100093d8:	d15f      	bne.n	1000949a <mpu_init+0x2a2>
        return -1;

    /* Compass reads start at this register. */
    data[0] = AKM_REG_ST1;
100093da:	ab01      	add	r3, sp, #4
100093dc:	2202      	movs	r2, #2
100093de:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s0_reg, 1, data))
100093e0:	4a41      	ldr	r2, [pc, #260]	; (100094e8 <mpu_init+0x2f0>)
100093e2:	6811      	ldr	r1, [r2, #0]
100093e4:	7fc9      	ldrb	r1, [r1, #31]
100093e6:	6852      	ldr	r2, [r2, #4]
100093e8:	7810      	ldrb	r0, [r2, #0]
100093ea:	2201      	movs	r2, #1
100093ec:	4c3f      	ldr	r4, [pc, #252]	; (100094ec <mpu_init+0x2f4>)
100093ee:	47a0      	blx	r4
100093f0:	2800      	cmp	r0, #0
100093f2:	d152      	bne.n	1000949a <mpu_init+0x2a2>
        return -1;

    /* Enable slave 0, 8-byte reads. */
    data[0] = BIT_SLAVE_EN | 8;
100093f4:	ab01      	add	r3, sp, #4
100093f6:	2288      	movs	r2, #136	; 0x88
100093f8:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s0_ctrl, 1, data))
100093fa:	4a3b      	ldr	r2, [pc, #236]	; (100094e8 <mpu_init+0x2f0>)
100093fc:	2120      	movs	r1, #32
100093fe:	6810      	ldr	r0, [r2, #0]
10009400:	5c41      	ldrb	r1, [r0, r1]
10009402:	6852      	ldr	r2, [r2, #4]
10009404:	7810      	ldrb	r0, [r2, #0]
10009406:	2201      	movs	r2, #1
10009408:	4c38      	ldr	r4, [pc, #224]	; (100094ec <mpu_init+0x2f4>)
1000940a:	47a0      	blx	r4
1000940c:	2800      	cmp	r0, #0
1000940e:	d144      	bne.n	1000949a <mpu_init+0x2a2>
        return -1;

    /* Slave 1 changes AKM measurement mode. */
    data[0] = st.chip_cfg.compass_addr;
10009410:	ab01      	add	r3, sp, #4
10009412:	4a35      	ldr	r2, [pc, #212]	; (100094e8 <mpu_init+0x2f0>)
10009414:	212a      	movs	r1, #42	; 0x2a
10009416:	5c51      	ldrb	r1, [r2, r1]
10009418:	7019      	strb	r1, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_addr, 1, data))
1000941a:	2121      	movs	r1, #33	; 0x21
1000941c:	6810      	ldr	r0, [r2, #0]
1000941e:	5c41      	ldrb	r1, [r0, r1]
10009420:	6852      	ldr	r2, [r2, #4]
10009422:	7810      	ldrb	r0, [r2, #0]
10009424:	2201      	movs	r2, #1
10009426:	4c31      	ldr	r4, [pc, #196]	; (100094ec <mpu_init+0x2f4>)
10009428:	47a0      	blx	r4
1000942a:	2800      	cmp	r0, #0
1000942c:	d135      	bne.n	1000949a <mpu_init+0x2a2>
        return -1;

    /* AKM measurement mode register. */
    data[0] = AKM_REG_CNTL;
1000942e:	ab01      	add	r3, sp, #4
10009430:	220a      	movs	r2, #10
10009432:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_reg, 1, data))
10009434:	4a2c      	ldr	r2, [pc, #176]	; (100094e8 <mpu_init+0x2f0>)
10009436:	2122      	movs	r1, #34	; 0x22
10009438:	6810      	ldr	r0, [r2, #0]
1000943a:	5c41      	ldrb	r1, [r0, r1]
1000943c:	6852      	ldr	r2, [r2, #4]
1000943e:	7810      	ldrb	r0, [r2, #0]
10009440:	2201      	movs	r2, #1
10009442:	4c2a      	ldr	r4, [pc, #168]	; (100094ec <mpu_init+0x2f4>)
10009444:	47a0      	blx	r4
10009446:	2800      	cmp	r0, #0
10009448:	d127      	bne.n	1000949a <mpu_init+0x2a2>
        return -1;

    /* Enable slave 1, 1-byte writes. */
    data[0] = BIT_SLAVE_EN | 1;
1000944a:	ab01      	add	r3, sp, #4
1000944c:	2281      	movs	r2, #129	; 0x81
1000944e:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_ctrl, 1, data))
10009450:	4a25      	ldr	r2, [pc, #148]	; (100094e8 <mpu_init+0x2f0>)
10009452:	2123      	movs	r1, #35	; 0x23
10009454:	6810      	ldr	r0, [r2, #0]
10009456:	5c41      	ldrb	r1, [r0, r1]
10009458:	6852      	ldr	r2, [r2, #4]
1000945a:	7810      	ldrb	r0, [r2, #0]
1000945c:	2201      	movs	r2, #1
1000945e:	4c23      	ldr	r4, [pc, #140]	; (100094ec <mpu_init+0x2f4>)
10009460:	47a0      	blx	r4
10009462:	2800      	cmp	r0, #0
10009464:	d119      	bne.n	1000949a <mpu_init+0x2a2>
        return -1;

    /* Set slave 1 data. */
    data[0] = AKM_SINGLE_MEASUREMENT;
10009466:	ab01      	add	r3, sp, #4
10009468:	2211      	movs	r2, #17
1000946a:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, data))
1000946c:	4a1e      	ldr	r2, [pc, #120]	; (100094e8 <mpu_init+0x2f0>)
1000946e:	2126      	movs	r1, #38	; 0x26
10009470:	6810      	ldr	r0, [r2, #0]
10009472:	5c41      	ldrb	r1, [r0, r1]
10009474:	6852      	ldr	r2, [r2, #4]
10009476:	7810      	ldrb	r0, [r2, #0]
10009478:	2201      	movs	r2, #1
1000947a:	4c1c      	ldr	r4, [pc, #112]	; (100094ec <mpu_init+0x2f4>)
1000947c:	47a0      	blx	r4
1000947e:	2800      	cmp	r0, #0
10009480:	d10b      	bne.n	1000949a <mpu_init+0x2a2>
        return -1;

    /* Trigger slave 0 and slave 1 actions at each sample. */
    data[0] = 0x03;
10009482:	ab01      	add	r3, sp, #4
10009484:	2203      	movs	r2, #3
10009486:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->i2c_delay_ctrl, 1, data))
10009488:	4a17      	ldr	r2, [pc, #92]	; (100094e8 <mpu_init+0x2f0>)
1000948a:	2127      	movs	r1, #39	; 0x27
1000948c:	6810      	ldr	r0, [r2, #0]
1000948e:	5c41      	ldrb	r1, [r0, r1]
10009490:	6852      	ldr	r2, [r2, #4]
10009492:	7810      	ldrb	r0, [r2, #0]
10009494:	2201      	movs	r2, #1
10009496:	4c15      	ldr	r4, [pc, #84]	; (100094ec <mpu_init+0x2f4>)
10009498:	47a0      	blx	r4
    //if (int_param)
        //reg_int_cb(int_param);

#ifdef AK89xx_SECONDARY
    setup_compass();
    if (mpu_set_compass_sample_rate(10))
1000949a:	200a      	movs	r0, #10
1000949c:	4b20      	ldr	r3, [pc, #128]	; (10009520 <mpu_init+0x328>)
1000949e:	4798      	blx	r3
100094a0:	1e04      	subs	r4, r0, #0
100094a2:	d11b      	bne.n	100094dc <mpu_init+0x2e4>
    /* Already disabled by setup_compass. */
    if (mpu_set_bypass(0))
        return -1;
#endif

    mpu_set_sensors(0);
100094a4:	2000      	movs	r0, #0
100094a6:	4b1f      	ldr	r3, [pc, #124]	; (10009524 <mpu_init+0x32c>)
100094a8:	4798      	blx	r3
    return 0;
100094aa:	e019      	b.n	100094e0 <mpu_init+0x2e8>
    unsigned char data[6];

    /* Reset device. */
    data[0] = BIT_RESET;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
        return -1;
100094ac:	2401      	movs	r4, #1
100094ae:	4264      	negs	r4, r4
100094b0:	e016      	b.n	100094e0 <mpu_init+0x2e8>
    delay_ms(100);

    /* Wake up chip. */
    data[0] = 0x00;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
        return -1;
100094b2:	2401      	movs	r4, #1
100094b4:	4264      	negs	r4, r4
100094b6:	e013      	b.n	100094e0 <mpu_init+0x2e8>
    /* MPU6500 shares 4kB of memory between the DMP and the FIFO. Since the
     * first 3kB are needed by the DMP, we'll use the last 1kB for the FIFO.
     */
    data[0] = BIT_FIFO_SIZE_1024;
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
        return -1;
100094b8:	2401      	movs	r4, #1
100094ba:	4264      	negs	r4, r4
100094bc:	e010      	b.n	100094e0 <mpu_init+0x2e8>
    st.chip_cfg.dmp_on = 0;
    st.chip_cfg.dmp_loaded = 0;
    st.chip_cfg.dmp_sample_rate = 0;

    if (mpu_set_gyro_fsr(2000))
        return -1;
100094be:	2401      	movs	r4, #1
100094c0:	4264      	negs	r4, r4
100094c2:	e00d      	b.n	100094e0 <mpu_init+0x2e8>
    if (mpu_set_accel_fsr(2))
        return -1;
100094c4:	2401      	movs	r4, #1
100094c6:	4264      	negs	r4, r4
100094c8:	e00a      	b.n	100094e0 <mpu_init+0x2e8>
    if (mpu_set_lpf(42))
        return -1;
100094ca:	2401      	movs	r4, #1
100094cc:	4264      	negs	r4, r4
100094ce:	e007      	b.n	100094e0 <mpu_init+0x2e8>
    if (mpu_set_sample_rate(50))
        return -1;
100094d0:	2401      	movs	r4, #1
100094d2:	4264      	negs	r4, r4
100094d4:	e004      	b.n	100094e0 <mpu_init+0x2e8>
    if (mpu_configure_fifo(0))
        return -1;
100094d6:	2401      	movs	r4, #1
100094d8:	4264      	negs	r4, r4
100094da:	e001      	b.n	100094e0 <mpu_init+0x2e8>
        //reg_int_cb(int_param);

#ifdef AK89xx_SECONDARY
    setup_compass();
    if (mpu_set_compass_sample_rate(10))
        return -1;
100094dc:	2401      	movs	r4, #1
100094de:	4264      	negs	r4, r4
        return -1;
#endif

    mpu_set_sensors(0);
    return 0;
}
100094e0:	0020      	movs	r0, r4
100094e2:	b005      	add	sp, #20
100094e4:	bd30      	pop	{r4, r5, pc}
100094e6:	46c0      	nop			; (mov r8, r8)
100094e8:	10017ef8 	.word	0x10017ef8
100094ec:	1000a93d 	.word	0x1000a93d
100094f0:	10008129 	.word	0x10008129
100094f4:	10014b8d 	.word	0x10014b8d
100094f8:	100086fd 	.word	0x100086fd
100094fc:	100087e9 	.word	0x100087e9
10009500:	1000887d 	.word	0x1000887d
10009504:	10008f3d 	.word	0x10008f3d
10009508:	100089cd 	.word	0x100089cd
1000950c:	10008c05 	.word	0x10008c05
10009510:	1000a999 	.word	0x1000a999
10009514:	10015f9c 	.word	0x10015f9c
10009518:	10014df5 	.word	0x10014df5
1000951c:	10015e0c 	.word	0x10015e0c
10009520:	10008955 	.word	0x10008955
10009524:	10009011 	.word	0x10009011

10009528 <mpu_write_mem>:
 *  @param[in]  data        Bytes to write to memory.
 *  @return     0 if successful.
 */
int mpu_write_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
10009528:	b570      	push	{r4, r5, r6, lr}
1000952a:	b082      	sub	sp, #8
1000952c:	000c      	movs	r4, r1
1000952e:	1e15      	subs	r5, r2, #0
    unsigned char tmp[2];

    if (!data)
10009530:	d025      	beq.n	1000957e <mpu_write_mem+0x56>
        return -1;
    if (!st.chip_cfg.sensors)
10009532:	4b19      	ldr	r3, [pc, #100]	; (10009598 <mpu_write_mem+0x70>)
10009534:	7a9b      	ldrb	r3, [r3, #10]
10009536:	2b00      	cmp	r3, #0
10009538:	d024      	beq.n	10009584 <mpu_write_mem+0x5c>
        return -1;

    tmp[0] = (unsigned char)(mem_addr >> 8);
1000953a:	ab01      	add	r3, sp, #4
1000953c:	0a02      	lsrs	r2, r0, #8
1000953e:	701a      	strb	r2, [r3, #0]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
10009540:	b2c0      	uxtb	r0, r0
10009542:	7058      	strb	r0, [r3, #1]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
10009544:	4b14      	ldr	r3, [pc, #80]	; (10009598 <mpu_write_mem+0x70>)
10009546:	685b      	ldr	r3, [r3, #4]
10009548:	1840      	adds	r0, r0, r1
1000954a:	895a      	ldrh	r2, [r3, #10]
1000954c:	4290      	cmp	r0, r2
1000954e:	dc1c      	bgt.n	1000958a <mpu_write_mem+0x62>
        return -1;

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
10009550:	4a11      	ldr	r2, [pc, #68]	; (10009598 <mpu_write_mem+0x70>)
10009552:	6812      	ldr	r2, [r2, #0]
10009554:	7ed1      	ldrb	r1, [r2, #27]
10009556:	7818      	ldrb	r0, [r3, #0]
10009558:	ab01      	add	r3, sp, #4
1000955a:	2202      	movs	r2, #2
1000955c:	4e0f      	ldr	r6, [pc, #60]	; (1000959c <mpu_write_mem+0x74>)
1000955e:	47b0      	blx	r6
10009560:	2800      	cmp	r0, #0
10009562:	d115      	bne.n	10009590 <mpu_write_mem+0x68>
        return -1;
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
10009564:	b2e2      	uxtb	r2, r4
10009566:	4b0c      	ldr	r3, [pc, #48]	; (10009598 <mpu_write_mem+0x70>)
10009568:	6819      	ldr	r1, [r3, #0]
1000956a:	7e09      	ldrb	r1, [r1, #24]
1000956c:	685b      	ldr	r3, [r3, #4]
1000956e:	7818      	ldrb	r0, [r3, #0]
10009570:	002b      	movs	r3, r5
10009572:	4c0a      	ldr	r4, [pc, #40]	; (1000959c <mpu_write_mem+0x74>)
10009574:	47a0      	blx	r4
10009576:	1e43      	subs	r3, r0, #1
10009578:	4198      	sbcs	r0, r3
1000957a:	4240      	negs	r0, r0
1000957c:	e00a      	b.n	10009594 <mpu_write_mem+0x6c>
        unsigned char *data)
{
    unsigned char tmp[2];

    if (!data)
        return -1;
1000957e:	2001      	movs	r0, #1
10009580:	4240      	negs	r0, r0
10009582:	e007      	b.n	10009594 <mpu_write_mem+0x6c>
    if (!st.chip_cfg.sensors)
        return -1;
10009584:	2001      	movs	r0, #1
10009586:	4240      	negs	r0, r0
10009588:	e004      	b.n	10009594 <mpu_write_mem+0x6c>
    tmp[0] = (unsigned char)(mem_addr >> 8);
    tmp[1] = (unsigned char)(mem_addr & 0xFF);

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
        return -1;
1000958a:	2001      	movs	r0, #1
1000958c:	4240      	negs	r0, r0
1000958e:	e001      	b.n	10009594 <mpu_write_mem+0x6c>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
        return -1;
10009590:	2001      	movs	r0, #1
10009592:	4240      	negs	r0, r0
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
        return -1;
    return 0;
}
10009594:	b002      	add	sp, #8
10009596:	bd70      	pop	{r4, r5, r6, pc}
10009598:	10017ef8 	.word	0x10017ef8
1000959c:	1000a93d 	.word	0x1000a93d

100095a0 <mpu_set_dmp_state>:
 *  @brief      Enable/disable DMP support.
 *  @param[in]  enable  1 to turn on the DMP.
 *  @return     0 if successful.
 */
int mpu_set_dmp_state(unsigned char enable)
{
100095a0:	b570      	push	{r4, r5, r6, lr}
100095a2:	b082      	sub	sp, #8
    unsigned char tmp;
    if (st.chip_cfg.dmp_on == enable)
100095a4:	2324      	movs	r3, #36	; 0x24
100095a6:	4a21      	ldr	r2, [pc, #132]	; (1000962c <mpu_set_dmp_state+0x8c>)
100095a8:	5cd3      	ldrb	r3, [r2, r3]
100095aa:	4283      	cmp	r3, r0
100095ac:	d037      	beq.n	1000961e <mpu_set_dmp_state+0x7e>
        return 0;

    if (enable) {
100095ae:	2800      	cmp	r0, #0
100095b0:	d020      	beq.n	100095f4 <mpu_set_dmp_state+0x54>
        if (!st.chip_cfg.dmp_loaded)
100095b2:	2325      	movs	r3, #37	; 0x25
100095b4:	5cd3      	ldrb	r3, [r2, r3]
100095b6:	2b00      	cmp	r3, #0
100095b8:	d033      	beq.n	10009622 <mpu_set_dmp_state+0x82>
            return -1;
        /* Disable data ready interrupt. */
        set_int_enable(0);
100095ba:	2000      	movs	r0, #0
100095bc:	4d1c      	ldr	r5, [pc, #112]	; (10009630 <mpu_set_dmp_state+0x90>)
100095be:	47a8      	blx	r5
        /* Disable bypass mode. */
        mpu_set_bypass(0);
100095c0:	2000      	movs	r0, #0
100095c2:	4b1c      	ldr	r3, [pc, #112]	; (10009634 <mpu_set_dmp_state+0x94>)
100095c4:	4798      	blx	r3
        /* Keep constant sample rate, FIFO rate controlled by DMP. */
        mpu_set_sample_rate(st.chip_cfg.dmp_sample_rate);
100095c6:	4c19      	ldr	r4, [pc, #100]	; (1000962c <mpu_set_dmp_state+0x8c>)
100095c8:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
100095ca:	4b1b      	ldr	r3, [pc, #108]	; (10009638 <mpu_set_dmp_state+0x98>)
100095cc:	4798      	blx	r3
        /* Remove FIFO elements. */
        tmp = 0;
100095ce:	466b      	mov	r3, sp
100095d0:	3307      	adds	r3, #7
100095d2:	2200      	movs	r2, #0
100095d4:	701a      	strb	r2, [r3, #0]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
100095d6:	6862      	ldr	r2, [r4, #4]
100095d8:	7810      	ldrb	r0, [r2, #0]
100095da:	2201      	movs	r2, #1
100095dc:	2123      	movs	r1, #35	; 0x23
100095de:	4e17      	ldr	r6, [pc, #92]	; (1000963c <mpu_set_dmp_state+0x9c>)
100095e0:	47b0      	blx	r6
        st.chip_cfg.dmp_on = 1;
100095e2:	2201      	movs	r2, #1
100095e4:	2324      	movs	r3, #36	; 0x24
100095e6:	54e2      	strb	r2, [r4, r3]
        /* Enable DMP interrupt. */
        set_int_enable(1);
100095e8:	2001      	movs	r0, #1
100095ea:	47a8      	blx	r5
        mpu_reset_fifo();
100095ec:	4b14      	ldr	r3, [pc, #80]	; (10009640 <mpu_set_dmp_state+0xa0>)
100095ee:	4798      	blx	r3
        tmp = st.chip_cfg.fifo_enable;
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
        st.chip_cfg.dmp_on = 0;
        mpu_reset_fifo();
    }
    return 0;
100095f0:	2000      	movs	r0, #0
100095f2:	e018      	b.n	10009626 <mpu_set_dmp_state+0x86>
        /* Enable DMP interrupt. */
        set_int_enable(1);
        mpu_reset_fifo();
    } else {
        /* Disable DMP interrupt. */
        set_int_enable(0);
100095f4:	2000      	movs	r0, #0
100095f6:	4b0e      	ldr	r3, [pc, #56]	; (10009630 <mpu_set_dmp_state+0x90>)
100095f8:	4798      	blx	r3
        /* Restore FIFO settings. */
        tmp = st.chip_cfg.fifo_enable;
100095fa:	466b      	mov	r3, sp
100095fc:	3307      	adds	r3, #7
100095fe:	4c0b      	ldr	r4, [pc, #44]	; (1000962c <mpu_set_dmp_state+0x8c>)
10009600:	7c22      	ldrb	r2, [r4, #16]
10009602:	701a      	strb	r2, [r3, #0]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
10009604:	6862      	ldr	r2, [r4, #4]
10009606:	7810      	ldrb	r0, [r2, #0]
10009608:	2201      	movs	r2, #1
1000960a:	2123      	movs	r1, #35	; 0x23
1000960c:	4d0b      	ldr	r5, [pc, #44]	; (1000963c <mpu_set_dmp_state+0x9c>)
1000960e:	47a8      	blx	r5
        st.chip_cfg.dmp_on = 0;
10009610:	2200      	movs	r2, #0
10009612:	2324      	movs	r3, #36	; 0x24
10009614:	54e2      	strb	r2, [r4, r3]
        mpu_reset_fifo();
10009616:	4b0a      	ldr	r3, [pc, #40]	; (10009640 <mpu_set_dmp_state+0xa0>)
10009618:	4798      	blx	r3
    }
    return 0;
1000961a:	2000      	movs	r0, #0
1000961c:	e003      	b.n	10009626 <mpu_set_dmp_state+0x86>
 */
int mpu_set_dmp_state(unsigned char enable)
{
    unsigned char tmp;
    if (st.chip_cfg.dmp_on == enable)
        return 0;
1000961e:	2000      	movs	r0, #0
10009620:	e001      	b.n	10009626 <mpu_set_dmp_state+0x86>

    if (enable) {
        if (!st.chip_cfg.dmp_loaded)
            return -1;
10009622:	2001      	movs	r0, #1
10009624:	4240      	negs	r0, r0
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
        st.chip_cfg.dmp_on = 0;
        mpu_reset_fifo();
    }
    return 0;
}
10009626:	b002      	add	sp, #8
10009628:	bd70      	pop	{r4, r5, r6, pc}
1000962a:	46c0      	nop			; (mov r8, r8)
1000962c:	10017ef8 	.word	0x10017ef8
10009630:	10008461 	.word	0x10008461
10009634:	10008c05 	.word	0x10008c05
10009638:	10008f3d 	.word	0x10008f3d
1000963c:	1000a93d 	.word	0x1000a93d
10009640:	10008505 	.word	0x10008505

10009644 <mpu_get_compass_fsr>:
 *  @return     0 if successful.
 */
int mpu_get_compass_fsr(unsigned short *fsr)
{
#ifdef AK89xx_SECONDARY
    fsr[0] = st.hw->compass_fsr;
10009644:	4b02      	ldr	r3, [pc, #8]	; (10009650 <mpu_get_compass_fsr+0xc>)
10009646:	685b      	ldr	r3, [r3, #4]
10009648:	899b      	ldrh	r3, [r3, #12]
1000964a:	8003      	strh	r3, [r0, #0]
    return 0;
#else
    return -1;
#endif
}
1000964c:	2000      	movs	r0, #0
1000964e:	4770      	bx	lr
10009650:	10017ef8 	.word	0x10017ef8

10009654 <dmp_set_fifo_rate>:
 *  Only used when DMP is on.
 *  @param[in]  rate    Desired fifo rate (Hz).
 *  @return     0 if successful.
 */
int dmp_set_fifo_rate(unsigned short rate)
{
10009654:	b510      	push	{r4, lr}
10009656:	b086      	sub	sp, #24
10009658:	0004      	movs	r4, r0
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
1000965a:	220c      	movs	r2, #12
1000965c:	4915      	ldr	r1, [pc, #84]	; (100096b4 <dmp_set_fifo_rate+0x60>)
1000965e:	3110      	adds	r1, #16
10009660:	a803      	add	r0, sp, #12
10009662:	4b15      	ldr	r3, [pc, #84]	; (100096b8 <dmp_set_fifo_rate+0x64>)
10009664:	4798      	blx	r3
        0xc4, DINAAA, DINAF1, DINADF, DINADF, 0xBB, 0xAF, DINADF, DINADF};
    unsigned short div;
    unsigned char tmp[8];

    if (rate > DMP_SAMPLE_RATE)
10009666:	2cc8      	cmp	r4, #200	; 0xc8
10009668:	d819      	bhi.n	1000969e <dmp_set_fifo_rate+0x4a>
        return -1;
    div = DMP_SAMPLE_RATE / rate - 1;
1000966a:	0021      	movs	r1, r4
1000966c:	20c8      	movs	r0, #200	; 0xc8
1000966e:	4b13      	ldr	r3, [pc, #76]	; (100096bc <dmp_set_fifo_rate+0x68>)
10009670:	4798      	blx	r3
10009672:	3801      	subs	r0, #1
10009674:	b280      	uxth	r0, r0
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
10009676:	aa01      	add	r2, sp, #4
10009678:	0a03      	lsrs	r3, r0, #8
1000967a:	7013      	strb	r3, [r2, #0]
    tmp[1] = (unsigned char)(div & 0xFF);
1000967c:	7050      	strb	r0, [r2, #1]
    if (mpu_write_mem(D_0_22, 2, tmp))
1000967e:	2102      	movs	r1, #2
10009680:	480f      	ldr	r0, [pc, #60]	; (100096c0 <dmp_set_fifo_rate+0x6c>)
10009682:	4b10      	ldr	r3, [pc, #64]	; (100096c4 <dmp_set_fifo_rate+0x70>)
10009684:	4798      	blx	r3
10009686:	2800      	cmp	r0, #0
10009688:	d10c      	bne.n	100096a4 <dmp_set_fifo_rate+0x50>
        return -1;
    if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
1000968a:	aa03      	add	r2, sp, #12
1000968c:	210c      	movs	r1, #12
1000968e:	480e      	ldr	r0, [pc, #56]	; (100096c8 <dmp_set_fifo_rate+0x74>)
10009690:	4b0c      	ldr	r3, [pc, #48]	; (100096c4 <dmp_set_fifo_rate+0x70>)
10009692:	4798      	blx	r3
10009694:	2800      	cmp	r0, #0
10009696:	d108      	bne.n	100096aa <dmp_set_fifo_rate+0x56>
        return -1;

    dmp.fifo_rate = rate;
10009698:	4b0c      	ldr	r3, [pc, #48]	; (100096cc <dmp_set_fifo_rate+0x78>)
1000969a:	819c      	strh	r4, [r3, #12]
    return 0;
1000969c:	e007      	b.n	100096ae <dmp_set_fifo_rate+0x5a>
        0xc4, DINAAA, DINAF1, DINADF, DINADF, 0xBB, 0xAF, DINADF, DINADF};
    unsigned short div;
    unsigned char tmp[8];

    if (rate > DMP_SAMPLE_RATE)
        return -1;
1000969e:	2001      	movs	r0, #1
100096a0:	4240      	negs	r0, r0
100096a2:	e004      	b.n	100096ae <dmp_set_fifo_rate+0x5a>
    div = DMP_SAMPLE_RATE / rate - 1;
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
    tmp[1] = (unsigned char)(div & 0xFF);
    if (mpu_write_mem(D_0_22, 2, tmp))
        return -1;
100096a4:	2001      	movs	r0, #1
100096a6:	4240      	negs	r0, r0
100096a8:	e001      	b.n	100096ae <dmp_set_fifo_rate+0x5a>
    if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
        return -1;
100096aa:	2001      	movs	r0, #1
100096ac:	4240      	negs	r0, r0

    dmp.fifo_rate = rate;
    return 0;
}
100096ae:	b006      	add	sp, #24
100096b0:	bd10      	pop	{r4, pc}
100096b2:	46c0      	nop			; (mov r8, r8)
100096b4:	100161e8 	.word	0x100161e8
100096b8:	10014b7b 	.word	0x10014b7b
100096bc:	10012f19 	.word	0x10012f19
100096c0:	00000216 	.word	0x00000216
100096c4:	10009529 	.word	0x10009529
100096c8:	00000ac1 	.word	0x00000ac1
100096cc:	10017fbc 	.word	0x10017fbc

100096d0 <dmp_set_tap_thresh>:
 *  @param[in]  axis    1, 2, and 4 for XYZ accel, respectively.
 *  @param[in]  thresh  Tap threshold, in mg/ms.
 *  @return     0 if successful.
 */
int dmp_set_tap_thresh(unsigned char axis, unsigned short thresh)
{
100096d0:	b5f0      	push	{r4, r5, r6, r7, lr}
100096d2:	4647      	mov	r7, r8
100096d4:	b480      	push	{r7}
100096d6:	b082      	sub	sp, #8
100096d8:	0004      	movs	r4, r0
    unsigned char tmp[4], accel_fsr;
    float scaled_thresh;
    unsigned short dmp_thresh, dmp_thresh_2;
    if (!(axis & TAP_XYZ) || thresh > 1600)
100096da:	0743      	lsls	r3, r0, #29
100096dc:	d100      	bne.n	100096e0 <dmp_set_tap_thresh+0x10>
100096de:	e09c      	b.n	1000981a <dmp_set_tap_thresh+0x14a>
100096e0:	23c8      	movs	r3, #200	; 0xc8
100096e2:	00db      	lsls	r3, r3, #3
100096e4:	4299      	cmp	r1, r3
100096e6:	d900      	bls.n	100096ea <dmp_set_tap_thresh+0x1a>
100096e8:	e09a      	b.n	10009820 <dmp_set_tap_thresh+0x150>
        return -1;

    scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;
100096ea:	0008      	movs	r0, r1
100096ec:	4b58      	ldr	r3, [pc, #352]	; (10009850 <dmp_set_tap_thresh+0x180>)
100096ee:	4798      	blx	r3
100096f0:	4958      	ldr	r1, [pc, #352]	; (10009854 <dmp_set_tap_thresh+0x184>)
100096f2:	4b59      	ldr	r3, [pc, #356]	; (10009858 <dmp_set_tap_thresh+0x188>)
100096f4:	4798      	blx	r3
100096f6:	1c06      	adds	r6, r0, #0

    mpu_get_accel_fsr(&accel_fsr);
100096f8:	466b      	mov	r3, sp
100096fa:	1cdd      	adds	r5, r3, #3
100096fc:	0028      	movs	r0, r5
100096fe:	4b57      	ldr	r3, [pc, #348]	; (1000985c <dmp_set_tap_thresh+0x18c>)
10009700:	4798      	blx	r3
    switch (accel_fsr) {
10009702:	782b      	ldrb	r3, [r5, #0]
10009704:	2b04      	cmp	r3, #4
10009706:	d019      	beq.n	1000973c <dmp_set_tap_thresh+0x6c>
10009708:	b2da      	uxtb	r2, r3
1000970a:	2a04      	cmp	r2, #4
1000970c:	d802      	bhi.n	10009714 <dmp_set_tap_thresh+0x44>
1000970e:	2b02      	cmp	r3, #2
10009710:	d005      	beq.n	1000971e <dmp_set_tap_thresh+0x4e>
10009712:	e088      	b.n	10009826 <dmp_set_tap_thresh+0x156>
10009714:	2b08      	cmp	r3, #8
10009716:	d020      	beq.n	1000975a <dmp_set_tap_thresh+0x8a>
10009718:	2b10      	cmp	r3, #16
1000971a:	d02d      	beq.n	10009778 <dmp_set_tap_thresh+0xa8>
1000971c:	e083      	b.n	10009826 <dmp_set_tap_thresh+0x156>
    case 2:
        dmp_thresh = (unsigned short)(scaled_thresh * 16384);
1000971e:	4b50      	ldr	r3, [pc, #320]	; (10009860 <dmp_set_tap_thresh+0x190>)
10009720:	4698      	mov	r8, r3
10009722:	218d      	movs	r1, #141	; 0x8d
10009724:	05c9      	lsls	r1, r1, #23
10009726:	1c30      	adds	r0, r6, #0
10009728:	4798      	blx	r3
1000972a:	4f4e      	ldr	r7, [pc, #312]	; (10009864 <dmp_set_tap_thresh+0x194>)
1000972c:	47b8      	blx	r7
1000972e:	b285      	uxth	r5, r0
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
10009730:	494d      	ldr	r1, [pc, #308]	; (10009868 <dmp_set_tap_thresh+0x198>)
10009732:	1c30      	adds	r0, r6, #0
10009734:	47c0      	blx	r8
10009736:	47b8      	blx	r7
10009738:	b280      	uxth	r0, r0
        break;
1000973a:	e02b      	b.n	10009794 <dmp_set_tap_thresh+0xc4>
    case 4:
        dmp_thresh = (unsigned short)(scaled_thresh * 8192);
1000973c:	4b48      	ldr	r3, [pc, #288]	; (10009860 <dmp_set_tap_thresh+0x190>)
1000973e:	4698      	mov	r8, r3
10009740:	218c      	movs	r1, #140	; 0x8c
10009742:	05c9      	lsls	r1, r1, #23
10009744:	1c30      	adds	r0, r6, #0
10009746:	4798      	blx	r3
10009748:	4f46      	ldr	r7, [pc, #280]	; (10009864 <dmp_set_tap_thresh+0x194>)
1000974a:	47b8      	blx	r7
1000974c:	b285      	uxth	r5, r0
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
1000974e:	4947      	ldr	r1, [pc, #284]	; (1000986c <dmp_set_tap_thresh+0x19c>)
10009750:	1c30      	adds	r0, r6, #0
10009752:	47c0      	blx	r8
10009754:	47b8      	blx	r7
10009756:	b280      	uxth	r0, r0
        break;
10009758:	e01c      	b.n	10009794 <dmp_set_tap_thresh+0xc4>
    case 8:
        dmp_thresh = (unsigned short)(scaled_thresh * 4096);
1000975a:	4b41      	ldr	r3, [pc, #260]	; (10009860 <dmp_set_tap_thresh+0x190>)
1000975c:	4698      	mov	r8, r3
1000975e:	218b      	movs	r1, #139	; 0x8b
10009760:	05c9      	lsls	r1, r1, #23
10009762:	1c30      	adds	r0, r6, #0
10009764:	4798      	blx	r3
10009766:	4f3f      	ldr	r7, [pc, #252]	; (10009864 <dmp_set_tap_thresh+0x194>)
10009768:	47b8      	blx	r7
1000976a:	b285      	uxth	r5, r0
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
1000976c:	4940      	ldr	r1, [pc, #256]	; (10009870 <dmp_set_tap_thresh+0x1a0>)
1000976e:	1c30      	adds	r0, r6, #0
10009770:	47c0      	blx	r8
10009772:	47b8      	blx	r7
10009774:	b280      	uxth	r0, r0
        break;
10009776:	e00d      	b.n	10009794 <dmp_set_tap_thresh+0xc4>
    case 16:
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
10009778:	4b39      	ldr	r3, [pc, #228]	; (10009860 <dmp_set_tap_thresh+0x190>)
1000977a:	4698      	mov	r8, r3
1000977c:	218a      	movs	r1, #138	; 0x8a
1000977e:	05c9      	lsls	r1, r1, #23
10009780:	1c30      	adds	r0, r6, #0
10009782:	4798      	blx	r3
10009784:	4f37      	ldr	r7, [pc, #220]	; (10009864 <dmp_set_tap_thresh+0x194>)
10009786:	47b8      	blx	r7
10009788:	b285      	uxth	r5, r0
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
1000978a:	493a      	ldr	r1, [pc, #232]	; (10009874 <dmp_set_tap_thresh+0x1a4>)
1000978c:	1c30      	adds	r0, r6, #0
1000978e:	47c0      	blx	r8
10009790:	47b8      	blx	r7
10009792:	b280      	uxth	r0, r0
        break;
    default:
        return -1;
    }
    tmp[0] = (unsigned char)(dmp_thresh >> 8);
10009794:	ab01      	add	r3, sp, #4
10009796:	0a2a      	lsrs	r2, r5, #8
10009798:	701a      	strb	r2, [r3, #0]
    tmp[1] = (unsigned char)(dmp_thresh & 0xFF);
1000979a:	705d      	strb	r5, [r3, #1]
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
1000979c:	0a02      	lsrs	r2, r0, #8
1000979e:	709a      	strb	r2, [r3, #2]
    tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);
100097a0:	70d8      	strb	r0, [r3, #3]

    if (axis & TAP_X) {
100097a2:	07e3      	lsls	r3, r4, #31
100097a4:	d510      	bpl.n	100097c8 <dmp_set_tap_thresh+0xf8>
        if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
100097a6:	aa01      	add	r2, sp, #4
100097a8:	2102      	movs	r1, #2
100097aa:	20ea      	movs	r0, #234	; 0xea
100097ac:	0040      	lsls	r0, r0, #1
100097ae:	4b32      	ldr	r3, [pc, #200]	; (10009878 <dmp_set_tap_thresh+0x1a8>)
100097b0:	4798      	blx	r3
100097b2:	2800      	cmp	r0, #0
100097b4:	d13a      	bne.n	1000982c <dmp_set_tap_thresh+0x15c>
            return -1;
        if (mpu_write_mem(D_1_36, 2, tmp+2))
100097b6:	466b      	mov	r3, sp
100097b8:	1d9a      	adds	r2, r3, #6
100097ba:	2102      	movs	r1, #2
100097bc:	3025      	adds	r0, #37	; 0x25
100097be:	30ff      	adds	r0, #255	; 0xff
100097c0:	4b2d      	ldr	r3, [pc, #180]	; (10009878 <dmp_set_tap_thresh+0x1a8>)
100097c2:	4798      	blx	r3
100097c4:	2800      	cmp	r0, #0
100097c6:	d134      	bne.n	10009832 <dmp_set_tap_thresh+0x162>
            return -1;
    }
    if (axis & TAP_Y) {
100097c8:	07a3      	lsls	r3, r4, #30
100097ca:	d510      	bpl.n	100097ee <dmp_set_tap_thresh+0x11e>
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
100097cc:	aa01      	add	r2, sp, #4
100097ce:	2102      	movs	r1, #2
100097d0:	20ec      	movs	r0, #236	; 0xec
100097d2:	0040      	lsls	r0, r0, #1
100097d4:	4b28      	ldr	r3, [pc, #160]	; (10009878 <dmp_set_tap_thresh+0x1a8>)
100097d6:	4798      	blx	r3
100097d8:	2800      	cmp	r0, #0
100097da:	d12d      	bne.n	10009838 <dmp_set_tap_thresh+0x168>
            return -1;
        if (mpu_write_mem(D_1_40, 2, tmp+2))
100097dc:	466b      	mov	r3, sp
100097de:	1d9a      	adds	r2, r3, #6
100097e0:	2102      	movs	r1, #2
100097e2:	3029      	adds	r0, #41	; 0x29
100097e4:	30ff      	adds	r0, #255	; 0xff
100097e6:	4b24      	ldr	r3, [pc, #144]	; (10009878 <dmp_set_tap_thresh+0x1a8>)
100097e8:	4798      	blx	r3
100097ea:	2800      	cmp	r0, #0
100097ec:	d127      	bne.n	1000983e <dmp_set_tap_thresh+0x16e>
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
            return -1;
        if (mpu_write_mem(D_1_44, 2, tmp+2))
            return -1;
    }
    return 0;
100097ee:	2000      	movs	r0, #0
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
            return -1;
        if (mpu_write_mem(D_1_40, 2, tmp+2))
            return -1;
    }
    if (axis & TAP_Z) {
100097f0:	0763      	lsls	r3, r4, #29
100097f2:	d529      	bpl.n	10009848 <dmp_set_tap_thresh+0x178>
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
100097f4:	aa01      	add	r2, sp, #4
100097f6:	2102      	movs	r1, #2
100097f8:	30dd      	adds	r0, #221	; 0xdd
100097fa:	30ff      	adds	r0, #255	; 0xff
100097fc:	4b1e      	ldr	r3, [pc, #120]	; (10009878 <dmp_set_tap_thresh+0x1a8>)
100097fe:	4798      	blx	r3
10009800:	2800      	cmp	r0, #0
10009802:	d11f      	bne.n	10009844 <dmp_set_tap_thresh+0x174>
            return -1;
        if (mpu_write_mem(D_1_44, 2, tmp+2))
10009804:	466b      	mov	r3, sp
10009806:	1d9a      	adds	r2, r3, #6
10009808:	2102      	movs	r1, #2
1000980a:	302d      	adds	r0, #45	; 0x2d
1000980c:	30ff      	adds	r0, #255	; 0xff
1000980e:	4b1a      	ldr	r3, [pc, #104]	; (10009878 <dmp_set_tap_thresh+0x1a8>)
10009810:	4798      	blx	r3
10009812:	1e43      	subs	r3, r0, #1
10009814:	4198      	sbcs	r0, r3
10009816:	4240      	negs	r0, r0
10009818:	e016      	b.n	10009848 <dmp_set_tap_thresh+0x178>
{
    unsigned char tmp[4], accel_fsr;
    float scaled_thresh;
    unsigned short dmp_thresh, dmp_thresh_2;
    if (!(axis & TAP_XYZ) || thresh > 1600)
        return -1;
1000981a:	2001      	movs	r0, #1
1000981c:	4240      	negs	r0, r0
1000981e:	e013      	b.n	10009848 <dmp_set_tap_thresh+0x178>
10009820:	2001      	movs	r0, #1
10009822:	4240      	negs	r0, r0
10009824:	e010      	b.n	10009848 <dmp_set_tap_thresh+0x178>
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
        break;
    default:
        return -1;
10009826:	2001      	movs	r0, #1
10009828:	4240      	negs	r0, r0
1000982a:	e00d      	b.n	10009848 <dmp_set_tap_thresh+0x178>
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
    tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);

    if (axis & TAP_X) {
        if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
            return -1;
1000982c:	2001      	movs	r0, #1
1000982e:	4240      	negs	r0, r0
10009830:	e00a      	b.n	10009848 <dmp_set_tap_thresh+0x178>
        if (mpu_write_mem(D_1_36, 2, tmp+2))
            return -1;
10009832:	2001      	movs	r0, #1
10009834:	4240      	negs	r0, r0
10009836:	e007      	b.n	10009848 <dmp_set_tap_thresh+0x178>
    }
    if (axis & TAP_Y) {
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
            return -1;
10009838:	2001      	movs	r0, #1
1000983a:	4240      	negs	r0, r0
1000983c:	e004      	b.n	10009848 <dmp_set_tap_thresh+0x178>
        if (mpu_write_mem(D_1_40, 2, tmp+2))
            return -1;
1000983e:	2001      	movs	r0, #1
10009840:	4240      	negs	r0, r0
10009842:	e001      	b.n	10009848 <dmp_set_tap_thresh+0x178>
    }
    if (axis & TAP_Z) {
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
            return -1;
10009844:	2001      	movs	r0, #1
10009846:	4240      	negs	r0, r0
        if (mpu_write_mem(D_1_44, 2, tmp+2))
            return -1;
    }
    return 0;
}
10009848:	b002      	add	sp, #8
1000984a:	bc04      	pop	{r2}
1000984c:	4690      	mov	r8, r2
1000984e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009850:	10013bb1 	.word	0x10013bb1
10009854:	43480000 	.word	0x43480000
10009858:	100132a5 	.word	0x100132a5
1000985c:	1000879d 	.word	0x1000879d
10009860:	10013639 	.word	0x10013639
10009864:	10013239 	.word	0x10013239
10009868:	46400000 	.word	0x46400000
1000986c:	45c00000 	.word	0x45c00000
10009870:	45400000 	.word	0x45400000
10009874:	44c00000 	.word	0x44c00000
10009878:	10009529 	.word	0x10009529

1000987c <dmp_set_tap_axes>:
 *  @brief      Set which axes will register a tap.
 *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
 *  @return     0 if successful.
 */
int dmp_set_tap_axes(unsigned char axis)
{
1000987c:	b500      	push	{lr}
1000987e:	b083      	sub	sp, #12
    unsigned char tmp = 0;

    if (axis & TAP_X)
10009880:	07c3      	lsls	r3, r0, #31
10009882:	d403      	bmi.n	1000988c <dmp_set_tap_axes+0x10>
 *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
 *  @return     0 if successful.
 */
int dmp_set_tap_axes(unsigned char axis)
{
    unsigned char tmp = 0;
10009884:	2200      	movs	r2, #0
10009886:	466b      	mov	r3, sp
10009888:	71da      	strb	r2, [r3, #7]
1000988a:	e002      	b.n	10009892 <dmp_set_tap_axes+0x16>

    if (axis & TAP_X)
        tmp |= 0x30;
1000988c:	2230      	movs	r2, #48	; 0x30
1000988e:	466b      	mov	r3, sp
10009890:	71da      	strb	r2, [r3, #7]
    if (axis & TAP_Y)
10009892:	0783      	lsls	r3, r0, #30
10009894:	d505      	bpl.n	100098a2 <dmp_set_tap_axes+0x26>
        tmp |= 0x0C;
10009896:	466b      	mov	r3, sp
10009898:	1dda      	adds	r2, r3, #7
1000989a:	79d9      	ldrb	r1, [r3, #7]
1000989c:	230c      	movs	r3, #12
1000989e:	430b      	orrs	r3, r1
100098a0:	7013      	strb	r3, [r2, #0]
    if (axis & TAP_Z)
100098a2:	0743      	lsls	r3, r0, #29
100098a4:	d505      	bpl.n	100098b2 <dmp_set_tap_axes+0x36>
        tmp |= 0x03;
100098a6:	466b      	mov	r3, sp
100098a8:	1dda      	adds	r2, r3, #7
100098aa:	79d9      	ldrb	r1, [r3, #7]
100098ac:	2303      	movs	r3, #3
100098ae:	430b      	orrs	r3, r1
100098b0:	7013      	strb	r3, [r2, #0]
    return mpu_write_mem(D_1_72, 1, &tmp);
100098b2:	466b      	mov	r3, sp
100098b4:	1dda      	adds	r2, r3, #7
100098b6:	2101      	movs	r1, #1
100098b8:	20a4      	movs	r0, #164	; 0xa4
100098ba:	0040      	lsls	r0, r0, #1
100098bc:	4b01      	ldr	r3, [pc, #4]	; (100098c4 <dmp_set_tap_axes+0x48>)
100098be:	4798      	blx	r3
}
100098c0:	b003      	add	sp, #12
100098c2:	bd00      	pop	{pc}
100098c4:	10009529 	.word	0x10009529

100098c8 <dmp_set_tap_count>:
 *  @brief      Set minimum number of taps needed for an interrupt.
 *  @param[in]  min_taps    Minimum consecutive taps (1-4).
 *  @return     0 if successful.
 */
int dmp_set_tap_count(unsigned char min_taps)
{
100098c8:	b500      	push	{lr}
100098ca:	b083      	sub	sp, #12
    unsigned char tmp;

    if (min_taps < 1)
        min_taps = 1;
100098cc:	2301      	movs	r3, #1
 */
int dmp_set_tap_count(unsigned char min_taps)
{
    unsigned char tmp;

    if (min_taps < 1)
100098ce:	2800      	cmp	r0, #0
100098d0:	d004      	beq.n	100098dc <dmp_set_tap_count+0x14>
100098d2:	1c03      	adds	r3, r0, #0
100098d4:	2804      	cmp	r0, #4
100098d6:	d900      	bls.n	100098da <dmp_set_tap_count+0x12>
100098d8:	2304      	movs	r3, #4
100098da:	b2db      	uxtb	r3, r3
        min_taps = 1;
    else if (min_taps > 4)
        min_taps = 4;

    tmp = min_taps - 1;
100098dc:	466a      	mov	r2, sp
100098de:	3207      	adds	r2, #7
100098e0:	3b01      	subs	r3, #1
100098e2:	7013      	strb	r3, [r2, #0]
    return mpu_write_mem(D_1_79, 1, &tmp);
100098e4:	2101      	movs	r1, #1
100098e6:	2050      	movs	r0, #80	; 0x50
100098e8:	30ff      	adds	r0, #255	; 0xff
100098ea:	4b02      	ldr	r3, [pc, #8]	; (100098f4 <dmp_set_tap_count+0x2c>)
100098ec:	4798      	blx	r3
}
100098ee:	b003      	add	sp, #12
100098f0:	bd00      	pop	{pc}
100098f2:	46c0      	nop			; (mov r8, r8)
100098f4:	10009529 	.word	0x10009529

100098f8 <dmp_set_tap_time>:
 *  @brief      Set length between valid taps.
 *  @param[in]  time    Milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time(unsigned short time)
{
100098f8:	b500      	push	{lr}
100098fa:	b083      	sub	sp, #12
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
100098fc:	2105      	movs	r1, #5
100098fe:	4b07      	ldr	r3, [pc, #28]	; (1000991c <dmp_set_tap_time+0x24>)
10009900:	4798      	blx	r3
10009902:	b280      	uxth	r0, r0
    tmp[0] = (unsigned char)(dmp_time >> 8);
10009904:	aa01      	add	r2, sp, #4
10009906:	0a03      	lsrs	r3, r0, #8
10009908:	7013      	strb	r3, [r2, #0]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
1000990a:	7050      	strb	r0, [r2, #1]
    return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
1000990c:	2102      	movs	r1, #2
1000990e:	20ef      	movs	r0, #239	; 0xef
10009910:	0040      	lsls	r0, r0, #1
10009912:	4b03      	ldr	r3, [pc, #12]	; (10009920 <dmp_set_tap_time+0x28>)
10009914:	4798      	blx	r3
}
10009916:	b003      	add	sp, #12
10009918:	bd00      	pop	{pc}
1000991a:	46c0      	nop			; (mov r8, r8)
1000991c:	10012e05 	.word	0x10012e05
10009920:	10009529 	.word	0x10009529

10009924 <dmp_set_tap_time_multi>:
 *  @brief      Set max time between taps to register as a multi-tap.
 *  @param[in]  time    Max milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time_multi(unsigned short time)
{
10009924:	b500      	push	{lr}
10009926:	b083      	sub	sp, #12
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
10009928:	2105      	movs	r1, #5
1000992a:	4b07      	ldr	r3, [pc, #28]	; (10009948 <dmp_set_tap_time_multi+0x24>)
1000992c:	4798      	blx	r3
1000992e:	b280      	uxth	r0, r0
    tmp[0] = (unsigned char)(dmp_time >> 8);
10009930:	aa01      	add	r2, sp, #4
10009932:	0a03      	lsrs	r3, r0, #8
10009934:	7013      	strb	r3, [r2, #0]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
10009936:	7050      	strb	r0, [r2, #1]
    return mpu_write_mem(D_1_218, 2, tmp);
10009938:	2102      	movs	r1, #2
1000993a:	20ed      	movs	r0, #237	; 0xed
1000993c:	0040      	lsls	r0, r0, #1
1000993e:	4b03      	ldr	r3, [pc, #12]	; (1000994c <dmp_set_tap_time_multi+0x28>)
10009940:	4798      	blx	r3
}
10009942:	b003      	add	sp, #12
10009944:	bd00      	pop	{pc}
10009946:	46c0      	nop			; (mov r8, r8)
10009948:	10012e05 	.word	0x10012e05
1000994c:	10009529 	.word	0x10009529

10009950 <dmp_set_shake_reject_thresh>:
 *  @param[in]  sf      Gyro scale factor.
 *  @param[in]  thresh  Gyro threshold in dps.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_thresh(long sf, unsigned short thresh)
{
10009950:	b510      	push	{r4, lr}
10009952:	b082      	sub	sp, #8
10009954:	000c      	movs	r4, r1
    unsigned char tmp[4];
    long thresh_scaled = sf / 1000 * thresh;
10009956:	21fa      	movs	r1, #250	; 0xfa
10009958:	0089      	lsls	r1, r1, #2
1000995a:	4b09      	ldr	r3, [pc, #36]	; (10009980 <dmp_set_shake_reject_thresh+0x30>)
1000995c:	4798      	blx	r3
1000995e:	4360      	muls	r0, r4
    tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
10009960:	aa01      	add	r2, sp, #4
10009962:	1603      	asrs	r3, r0, #24
10009964:	7013      	strb	r3, [r2, #0]
    tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
10009966:	1403      	asrs	r3, r0, #16
10009968:	7053      	strb	r3, [r2, #1]
    tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
1000996a:	1203      	asrs	r3, r0, #8
1000996c:	7093      	strb	r3, [r2, #2]
    tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
1000996e:	70d0      	strb	r0, [r2, #3]
    return mpu_write_mem(D_1_92, 4, tmp);
10009970:	2104      	movs	r1, #4
10009972:	20ae      	movs	r0, #174	; 0xae
10009974:	0040      	lsls	r0, r0, #1
10009976:	4b03      	ldr	r3, [pc, #12]	; (10009984 <dmp_set_shake_reject_thresh+0x34>)
10009978:	4798      	blx	r3
}
1000997a:	b002      	add	sp, #8
1000997c:	bd10      	pop	{r4, pc}
1000997e:	46c0      	nop			; (mov r8, r8)
10009980:	10012f19 	.word	0x10012f19
10009984:	10009529 	.word	0x10009529

10009988 <dmp_set_shake_reject_time>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_time(unsigned short time)
{
10009988:	b500      	push	{lr}
1000998a:	b083      	sub	sp, #12
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
1000998c:	2105      	movs	r1, #5
1000998e:	4b07      	ldr	r3, [pc, #28]	; (100099ac <dmp_set_shake_reject_time+0x24>)
10009990:	4798      	blx	r3
10009992:	b280      	uxth	r0, r0
    tmp[0] = time >> 8;
10009994:	aa01      	add	r2, sp, #4
10009996:	0a03      	lsrs	r3, r0, #8
10009998:	7013      	strb	r3, [r2, #0]
    tmp[1] = time & 0xFF;
1000999a:	7050      	strb	r0, [r2, #1]
    return mpu_write_mem(D_1_90,2,tmp);
1000999c:	2102      	movs	r1, #2
1000999e:	20ad      	movs	r0, #173	; 0xad
100099a0:	0040      	lsls	r0, r0, #1
100099a2:	4b03      	ldr	r3, [pc, #12]	; (100099b0 <dmp_set_shake_reject_time+0x28>)
100099a4:	4798      	blx	r3
}
100099a6:	b003      	add	sp, #12
100099a8:	bd00      	pop	{pc}
100099aa:	46c0      	nop			; (mov r8, r8)
100099ac:	10012e05 	.word	0x10012e05
100099b0:	10009529 	.word	0x10009529

100099b4 <dmp_set_shake_reject_timeout>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_timeout(unsigned short time)
{
100099b4:	b500      	push	{lr}
100099b6:	b083      	sub	sp, #12
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
100099b8:	2105      	movs	r1, #5
100099ba:	4b07      	ldr	r3, [pc, #28]	; (100099d8 <dmp_set_shake_reject_timeout+0x24>)
100099bc:	4798      	blx	r3
100099be:	b280      	uxth	r0, r0
    tmp[0] = time >> 8;
100099c0:	aa01      	add	r2, sp, #4
100099c2:	0a03      	lsrs	r3, r0, #8
100099c4:	7013      	strb	r3, [r2, #0]
    tmp[1] = time & 0xFF;
100099c6:	7050      	strb	r0, [r2, #1]
    return mpu_write_mem(D_1_88,2,tmp);
100099c8:	2102      	movs	r1, #2
100099ca:	20ac      	movs	r0, #172	; 0xac
100099cc:	0040      	lsls	r0, r0, #1
100099ce:	4b03      	ldr	r3, [pc, #12]	; (100099dc <dmp_set_shake_reject_timeout+0x28>)
100099d0:	4798      	blx	r3
}
100099d2:	b003      	add	sp, #12
100099d4:	bd00      	pop	{pc}
100099d6:	46c0      	nop			; (mov r8, r8)
100099d8:	10012e05 	.word	0x10012e05
100099dc:	10009529 	.word	0x10009529

100099e0 <dmp_enable_gyro_cal>:
 *  subtracted from the gyro output.
 *  @param[in]  enable  1 to enable gyro calibration.
 *  @return     0 if successful.
 */
int dmp_enable_gyro_cal(unsigned char enable)
{
100099e0:	b500      	push	{lr}
100099e2:	b085      	sub	sp, #20
    if (enable) {
100099e4:	2800      	cmp	r0, #0
100099e6:	d00c      	beq.n	10009a02 <dmp_enable_gyro_cal+0x22>
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
100099e8:	2209      	movs	r2, #9
100099ea:	490d      	ldr	r1, [pc, #52]	; (10009a20 <dmp_enable_gyro_cal+0x40>)
100099ec:	311c      	adds	r1, #28
100099ee:	a801      	add	r0, sp, #4
100099f0:	4b0c      	ldr	r3, [pc, #48]	; (10009a24 <dmp_enable_gyro_cal+0x44>)
100099f2:	4798      	blx	r3
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
100099f4:	aa01      	add	r2, sp, #4
100099f6:	2109      	movs	r1, #9
100099f8:	2097      	movs	r0, #151	; 0x97
100099fa:	00c0      	lsls	r0, r0, #3
100099fc:	4b0a      	ldr	r3, [pc, #40]	; (10009a28 <dmp_enable_gyro_cal+0x48>)
100099fe:	4798      	blx	r3
10009a00:	e00b      	b.n	10009a1a <dmp_enable_gyro_cal+0x3a>
    } else {
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
10009a02:	2209      	movs	r2, #9
10009a04:	4906      	ldr	r1, [pc, #24]	; (10009a20 <dmp_enable_gyro_cal+0x40>)
10009a06:	3128      	adds	r1, #40	; 0x28
10009a08:	a801      	add	r0, sp, #4
10009a0a:	4b06      	ldr	r3, [pc, #24]	; (10009a24 <dmp_enable_gyro_cal+0x44>)
10009a0c:	4798      	blx	r3
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
10009a0e:	aa01      	add	r2, sp, #4
10009a10:	2109      	movs	r1, #9
10009a12:	2097      	movs	r0, #151	; 0x97
10009a14:	00c0      	lsls	r0, r0, #3
10009a16:	4b04      	ldr	r3, [pc, #16]	; (10009a28 <dmp_enable_gyro_cal+0x48>)
10009a18:	4798      	blx	r3
    }
}
10009a1a:	b005      	add	sp, #20
10009a1c:	bd00      	pop	{pc}
10009a1e:	46c0      	nop			; (mov r8, r8)
10009a20:	100161e8 	.word	0x100161e8
10009a24:	10014b7b 	.word	0x10014b7b
10009a28:	10009529 	.word	0x10009529

10009a2c <dmp_enable_lp_quat>:
 *  exclusive.
 *  @param[in]  enable  1 to enable 3-axis quaternion.
 *  @return     0 if successful.
 */
int dmp_enable_lp_quat(unsigned char enable)
{
10009a2c:	b500      	push	{lr}
10009a2e:	b083      	sub	sp, #12
    unsigned char regs[4];
    if (enable) {
10009a30:	2800      	cmp	r0, #0
10009a32:	d009      	beq.n	10009a48 <dmp_enable_lp_quat+0x1c>
        regs[0] = DINBC0;
10009a34:	ab01      	add	r3, sp, #4
10009a36:	22c0      	movs	r2, #192	; 0xc0
10009a38:	701a      	strb	r2, [r3, #0]
        regs[1] = DINBC2;
10009a3a:	3202      	adds	r2, #2
10009a3c:	705a      	strb	r2, [r3, #1]
        regs[2] = DINBC4;
10009a3e:	3202      	adds	r2, #2
10009a40:	709a      	strb	r2, [r3, #2]
        regs[3] = DINBC6;
10009a42:	3202      	adds	r2, #2
10009a44:	70da      	strb	r2, [r3, #3]
10009a46:	e001      	b.n	10009a4c <dmp_enable_lp_quat+0x20>
    }
    else
        memset(regs, 0x8B, 4);
10009a48:	4b05      	ldr	r3, [pc, #20]	; (10009a60 <dmp_enable_lp_quat+0x34>)
10009a4a:	9301      	str	r3, [sp, #4]

    mpu_write_mem(CFG_LP_QUAT, 4, regs);
10009a4c:	aa01      	add	r2, sp, #4
10009a4e:	2104      	movs	r1, #4
10009a50:	4804      	ldr	r0, [pc, #16]	; (10009a64 <dmp_enable_lp_quat+0x38>)
10009a52:	4b05      	ldr	r3, [pc, #20]	; (10009a68 <dmp_enable_lp_quat+0x3c>)
10009a54:	4798      	blx	r3

    return mpu_reset_fifo();
10009a56:	4b05      	ldr	r3, [pc, #20]	; (10009a6c <dmp_enable_lp_quat+0x40>)
10009a58:	4798      	blx	r3
}
10009a5a:	b003      	add	sp, #12
10009a5c:	bd00      	pop	{pc}
10009a5e:	46c0      	nop			; (mov r8, r8)
10009a60:	8b8b8b8b 	.word	0x8b8b8b8b
10009a64:	00000a98 	.word	0x00000a98
10009a68:	10009529 	.word	0x10009529
10009a6c:	10008505 	.word	0x10008505

10009a70 <dmp_enable_6x_lp_quat>:
 *  exclusive.
 *  @param[in]   enable  1 to enable 6-axis quaternion.
 *  @return      0 if successful.
 */
int dmp_enable_6x_lp_quat(unsigned char enable)
{
10009a70:	b500      	push	{lr}
10009a72:	b083      	sub	sp, #12
    unsigned char regs[4];
    if (enable) {
10009a74:	2800      	cmp	r0, #0
10009a76:	d009      	beq.n	10009a8c <dmp_enable_6x_lp_quat+0x1c>
        regs[0] = DINA20;
10009a78:	ab01      	add	r3, sp, #4
10009a7a:	2220      	movs	r2, #32
10009a7c:	701a      	strb	r2, [r3, #0]
        regs[1] = DINA28;
10009a7e:	3208      	adds	r2, #8
10009a80:	705a      	strb	r2, [r3, #1]
        regs[2] = DINA30;
10009a82:	3208      	adds	r2, #8
10009a84:	709a      	strb	r2, [r3, #2]
        regs[3] = DINA38;
10009a86:	3208      	adds	r2, #8
10009a88:	70da      	strb	r2, [r3, #3]
10009a8a:	e001      	b.n	10009a90 <dmp_enable_6x_lp_quat+0x20>
    } else
        memset(regs, 0xA3, 4);
10009a8c:	4b05      	ldr	r3, [pc, #20]	; (10009aa4 <dmp_enable_6x_lp_quat+0x34>)
10009a8e:	9301      	str	r3, [sp, #4]

    mpu_write_mem(CFG_8, 4, regs);
10009a90:	aa01      	add	r2, sp, #4
10009a92:	2104      	movs	r1, #4
10009a94:	4804      	ldr	r0, [pc, #16]	; (10009aa8 <dmp_enable_6x_lp_quat+0x38>)
10009a96:	4b05      	ldr	r3, [pc, #20]	; (10009aac <dmp_enable_6x_lp_quat+0x3c>)
10009a98:	4798      	blx	r3

    return mpu_reset_fifo();
10009a9a:	4b05      	ldr	r3, [pc, #20]	; (10009ab0 <dmp_enable_6x_lp_quat+0x40>)
10009a9c:	4798      	blx	r3
}
10009a9e:	b003      	add	sp, #12
10009aa0:	bd00      	pop	{pc}
10009aa2:	46c0      	nop			; (mov r8, r8)
10009aa4:	a3a3a3a3 	.word	0xa3a3a3a3
10009aa8:	00000a9e 	.word	0x00000a9e
10009aac:	10009529 	.word	0x10009529
10009ab0:	10008505 	.word	0x10008505

10009ab4 <dmp_enable_feature>:
 *  mutually exclusive.
 *  @param[in]  mask    Mask of features to enable.
 *  @return     0 if successful.
 */
int dmp_enable_feature(unsigned short mask)
{
10009ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
10009ab6:	b085      	sub	sp, #20
10009ab8:	0004      	movs	r4, r0

    /* TODO: All of these settings can probably be integrated into the default
     * DMP image.
     */
    /* Set integration scale factor. */
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
10009aba:	ad01      	add	r5, sp, #4
10009abc:	2302      	movs	r3, #2
10009abe:	702b      	strb	r3, [r5, #0]
    tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
10009ac0:	33c8      	adds	r3, #200	; 0xc8
10009ac2:	706b      	strb	r3, [r5, #1]
    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
10009ac4:	3319      	adds	r3, #25
10009ac6:	70ab      	strb	r3, [r5, #2]
    tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
10009ac8:	3bda      	subs	r3, #218	; 0xda
10009aca:	70eb      	strb	r3, [r5, #3]
    mpu_write_mem(D_0_104, 4, tmp);
10009acc:	002a      	movs	r2, r5
10009ace:	2104      	movs	r1, #4
10009ad0:	2068      	movs	r0, #104	; 0x68
10009ad2:	4b6a      	ldr	r3, [pc, #424]	; (10009c7c <dmp_enable_feature+0x1c8>)
10009ad4:	4798      	blx	r3

    /* Send sensor data to the FIFO. */
    tmp[0] = 0xA3;
10009ad6:	23a3      	movs	r3, #163	; 0xa3
10009ad8:	702b      	strb	r3, [r5, #0]
10009ada:	2740      	movs	r7, #64	; 0x40
10009adc:	4027      	ands	r7, r4
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
10009ade:	d007      	beq.n	10009af0 <dmp_enable_feature+0x3c>
        tmp[1] = 0xC0;
10009ae0:	ab01      	add	r3, sp, #4
10009ae2:	22c0      	movs	r2, #192	; 0xc0
10009ae4:	705a      	strb	r2, [r3, #1]
        tmp[2] = 0xC8;
10009ae6:	3208      	adds	r2, #8
10009ae8:	709a      	strb	r2, [r3, #2]
        tmp[3] = 0xC2;
10009aea:	3a06      	subs	r2, #6
10009aec:	70da      	strb	r2, [r3, #3]
10009aee:	e004      	b.n	10009afa <dmp_enable_feature+0x46>
    } else {
        tmp[1] = 0xA3;
10009af0:	ab01      	add	r3, sp, #4
10009af2:	22a3      	movs	r2, #163	; 0xa3
10009af4:	705a      	strb	r2, [r3, #1]
        tmp[2] = 0xA3;
10009af6:	709a      	strb	r2, [r3, #2]
        tmp[3] = 0xA3;
10009af8:	70da      	strb	r2, [r3, #3]
10009afa:	25c0      	movs	r5, #192	; 0xc0
10009afc:	006d      	lsls	r5, r5, #1
10009afe:	4025      	ands	r5, r4
    }
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
10009b00:	d007      	beq.n	10009b12 <dmp_enable_feature+0x5e>
        tmp[4] = 0xC4;
10009b02:	ab01      	add	r3, sp, #4
10009b04:	22c4      	movs	r2, #196	; 0xc4
10009b06:	711a      	strb	r2, [r3, #4]
        tmp[5] = 0xCC;
10009b08:	3208      	adds	r2, #8
10009b0a:	715a      	strb	r2, [r3, #5]
        tmp[6] = 0xC6;
10009b0c:	3a06      	subs	r2, #6
10009b0e:	719a      	strb	r2, [r3, #6]
10009b10:	e004      	b.n	10009b1c <dmp_enable_feature+0x68>
    } else {
        tmp[4] = 0xA3;
10009b12:	ab01      	add	r3, sp, #4
10009b14:	22a3      	movs	r2, #163	; 0xa3
10009b16:	711a      	strb	r2, [r3, #4]
        tmp[5] = 0xA3;
10009b18:	715a      	strb	r2, [r3, #5]
        tmp[6] = 0xA3;
10009b1a:	719a      	strb	r2, [r3, #6]
    }
    tmp[7] = 0xA3;
10009b1c:	aa01      	add	r2, sp, #4
10009b1e:	23a3      	movs	r3, #163	; 0xa3
10009b20:	71d3      	strb	r3, [r2, #7]
    tmp[8] = 0xA3;
10009b22:	7213      	strb	r3, [r2, #8]
    tmp[9] = 0xA3;
10009b24:	7253      	strb	r3, [r2, #9]
    mpu_write_mem(CFG_15,10,tmp);
10009b26:	210a      	movs	r1, #10
10009b28:	4855      	ldr	r0, [pc, #340]	; (10009c80 <dmp_enable_feature+0x1cc>)
10009b2a:	4b54      	ldr	r3, [pc, #336]	; (10009c7c <dmp_enable_feature+0x1c8>)
10009b2c:	4798      	blx	r3
10009b2e:	2603      	movs	r6, #3
10009b30:	4026      	ands	r6, r4

    /* Send gesture data to the FIFO. */
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
10009b32:	d003      	beq.n	10009b3c <dmp_enable_feature+0x88>
        tmp[0] = DINA20;
10009b34:	2220      	movs	r2, #32
10009b36:	ab01      	add	r3, sp, #4
10009b38:	701a      	strb	r2, [r3, #0]
10009b3a:	e002      	b.n	10009b42 <dmp_enable_feature+0x8e>
    else
        tmp[0] = 0xD8;
10009b3c:	22d8      	movs	r2, #216	; 0xd8
10009b3e:	ab01      	add	r3, sp, #4
10009b40:	701a      	strb	r2, [r3, #0]
    mpu_write_mem(CFG_27,1,tmp);
10009b42:	aa01      	add	r2, sp, #4
10009b44:	2101      	movs	r1, #1
10009b46:	484f      	ldr	r0, [pc, #316]	; (10009c84 <dmp_enable_feature+0x1d0>)
10009b48:	4b4c      	ldr	r3, [pc, #304]	; (10009c7c <dmp_enable_feature+0x1c8>)
10009b4a:	4798      	blx	r3

    if (mask & DMP_FEATURE_GYRO_CAL)
10009b4c:	06a3      	lsls	r3, r4, #26
10009b4e:	d503      	bpl.n	10009b58 <dmp_enable_feature+0xa4>
        dmp_enable_gyro_cal(1);
10009b50:	2001      	movs	r0, #1
10009b52:	4b4d      	ldr	r3, [pc, #308]	; (10009c88 <dmp_enable_feature+0x1d4>)
10009b54:	4798      	blx	r3
10009b56:	e002      	b.n	10009b5e <dmp_enable_feature+0xaa>
    else
        dmp_enable_gyro_cal(0);
10009b58:	2000      	movs	r0, #0
10009b5a:	4b4b      	ldr	r3, [pc, #300]	; (10009c88 <dmp_enable_feature+0x1d4>)
10009b5c:	4798      	blx	r3

    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
10009b5e:	2d00      	cmp	r5, #0
10009b60:	d019      	beq.n	10009b96 <dmp_enable_feature+0xe2>
        if (mask & DMP_FEATURE_SEND_CAL_GYRO) {
10009b62:	05e3      	lsls	r3, r4, #23
10009b64:	d509      	bpl.n	10009b7a <dmp_enable_feature+0xc6>
            tmp[0] = 0xB2;
10009b66:	ab01      	add	r3, sp, #4
10009b68:	22b2      	movs	r2, #178	; 0xb2
10009b6a:	701a      	strb	r2, [r3, #0]
            tmp[1] = 0x8B;
10009b6c:	3a27      	subs	r2, #39	; 0x27
10009b6e:	705a      	strb	r2, [r3, #1]
            tmp[2] = 0xB6;
10009b70:	322b      	adds	r2, #43	; 0x2b
10009b72:	709a      	strb	r2, [r3, #2]
            tmp[3] = 0x9B;
10009b74:	3a1b      	subs	r2, #27
10009b76:	70da      	strb	r2, [r3, #3]
10009b78:	e008      	b.n	10009b8c <dmp_enable_feature+0xd8>
        } else {
            tmp[0] = DINAC0;
10009b7a:	ab01      	add	r3, sp, #4
10009b7c:	22b0      	movs	r2, #176	; 0xb0
10009b7e:	701a      	strb	r2, [r3, #0]
            tmp[1] = DINA80;
10009b80:	3a30      	subs	r2, #48	; 0x30
10009b82:	705a      	strb	r2, [r3, #1]
            tmp[2] = DINAC2;
10009b84:	3234      	adds	r2, #52	; 0x34
10009b86:	709a      	strb	r2, [r3, #2]
            tmp[3] = DINA90;
10009b88:	3a24      	subs	r2, #36	; 0x24
10009b8a:	70da      	strb	r2, [r3, #3]
        }
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
10009b8c:	aa01      	add	r2, sp, #4
10009b8e:	2104      	movs	r1, #4
10009b90:	483e      	ldr	r0, [pc, #248]	; (10009c8c <dmp_enable_feature+0x1d8>)
10009b92:	4b3a      	ldr	r3, [pc, #232]	; (10009c7c <dmp_enable_feature+0x1c8>)
10009b94:	4798      	blx	r3
    }

    if (mask & DMP_FEATURE_TAP) {
10009b96:	07e3      	lsls	r3, r4, #31
10009b98:	d523      	bpl.n	10009be2 <dmp_enable_feature+0x12e>
        /* Enable tap. */
        tmp[0] = 0xF8;
10009b9a:	aa01      	add	r2, sp, #4
10009b9c:	23f8      	movs	r3, #248	; 0xf8
10009b9e:	7013      	strb	r3, [r2, #0]
        mpu_write_mem(CFG_20, 1, tmp);
10009ba0:	2101      	movs	r1, #1
10009ba2:	208b      	movs	r0, #139	; 0x8b
10009ba4:	0100      	lsls	r0, r0, #4
10009ba6:	4b35      	ldr	r3, [pc, #212]	; (10009c7c <dmp_enable_feature+0x1c8>)
10009ba8:	4798      	blx	r3
        dmp_set_tap_thresh(TAP_XYZ, 250);
10009baa:	21fa      	movs	r1, #250	; 0xfa
10009bac:	2007      	movs	r0, #7
10009bae:	4b38      	ldr	r3, [pc, #224]	; (10009c90 <dmp_enable_feature+0x1dc>)
10009bb0:	4798      	blx	r3
        dmp_set_tap_axes(TAP_XYZ);
10009bb2:	2007      	movs	r0, #7
10009bb4:	4b37      	ldr	r3, [pc, #220]	; (10009c94 <dmp_enable_feature+0x1e0>)
10009bb6:	4798      	blx	r3
        dmp_set_tap_count(1);
10009bb8:	2001      	movs	r0, #1
10009bba:	4b37      	ldr	r3, [pc, #220]	; (10009c98 <dmp_enable_feature+0x1e4>)
10009bbc:	4798      	blx	r3
        dmp_set_tap_time(100);
10009bbe:	2064      	movs	r0, #100	; 0x64
10009bc0:	4b36      	ldr	r3, [pc, #216]	; (10009c9c <dmp_enable_feature+0x1e8>)
10009bc2:	4798      	blx	r3
        dmp_set_tap_time_multi(500);
10009bc4:	20fa      	movs	r0, #250	; 0xfa
10009bc6:	0040      	lsls	r0, r0, #1
10009bc8:	4b35      	ldr	r3, [pc, #212]	; (10009ca0 <dmp_enable_feature+0x1ec>)
10009bca:	4798      	blx	r3

        dmp_set_shake_reject_thresh(GYRO_SF, 200);
10009bcc:	21c8      	movs	r1, #200	; 0xc8
10009bce:	4835      	ldr	r0, [pc, #212]	; (10009ca4 <dmp_enable_feature+0x1f0>)
10009bd0:	4b35      	ldr	r3, [pc, #212]	; (10009ca8 <dmp_enable_feature+0x1f4>)
10009bd2:	4798      	blx	r3
        dmp_set_shake_reject_time(40);
10009bd4:	2028      	movs	r0, #40	; 0x28
10009bd6:	4b35      	ldr	r3, [pc, #212]	; (10009cac <dmp_enable_feature+0x1f8>)
10009bd8:	4798      	blx	r3
        dmp_set_shake_reject_timeout(10);
10009bda:	200a      	movs	r0, #10
10009bdc:	4b34      	ldr	r3, [pc, #208]	; (10009cb0 <dmp_enable_feature+0x1fc>)
10009bde:	4798      	blx	r3
10009be0:	e007      	b.n	10009bf2 <dmp_enable_feature+0x13e>
    } else {
        tmp[0] = 0xD8;
10009be2:	aa01      	add	r2, sp, #4
10009be4:	23d8      	movs	r3, #216	; 0xd8
10009be6:	7013      	strb	r3, [r2, #0]
        mpu_write_mem(CFG_20, 1, tmp);
10009be8:	2101      	movs	r1, #1
10009bea:	208b      	movs	r0, #139	; 0x8b
10009bec:	0100      	lsls	r0, r0, #4
10009bee:	4b23      	ldr	r3, [pc, #140]	; (10009c7c <dmp_enable_feature+0x1c8>)
10009bf0:	4798      	blx	r3
    }

    if (mask & DMP_FEATURE_ANDROID_ORIENT) {
10009bf2:	07a3      	lsls	r3, r4, #30
10009bf4:	d503      	bpl.n	10009bfe <dmp_enable_feature+0x14a>
        tmp[0] = 0xD9;
10009bf6:	22d9      	movs	r2, #217	; 0xd9
10009bf8:	ab01      	add	r3, sp, #4
10009bfa:	701a      	strb	r2, [r3, #0]
10009bfc:	e002      	b.n	10009c04 <dmp_enable_feature+0x150>
    } else
        tmp[0] = 0xD8;
10009bfe:	22d8      	movs	r2, #216	; 0xd8
10009c00:	ab01      	add	r3, sp, #4
10009c02:	701a      	strb	r2, [r3, #0]
    mpu_write_mem(CFG_ANDROID_ORIENT_INT, 1, tmp);
10009c04:	aa01      	add	r2, sp, #4
10009c06:	2101      	movs	r1, #1
10009c08:	482a      	ldr	r0, [pc, #168]	; (10009cb4 <dmp_enable_feature+0x200>)
10009c0a:	4b1c      	ldr	r3, [pc, #112]	; (10009c7c <dmp_enable_feature+0x1c8>)
10009c0c:	4798      	blx	r3

    if (mask & DMP_FEATURE_LP_QUAT)
10009c0e:	0763      	lsls	r3, r4, #29
10009c10:	d503      	bpl.n	10009c1a <dmp_enable_feature+0x166>
        dmp_enable_lp_quat(1);
10009c12:	2001      	movs	r0, #1
10009c14:	4b28      	ldr	r3, [pc, #160]	; (10009cb8 <dmp_enable_feature+0x204>)
10009c16:	4798      	blx	r3
10009c18:	e002      	b.n	10009c20 <dmp_enable_feature+0x16c>
    else
        dmp_enable_lp_quat(0);
10009c1a:	2000      	movs	r0, #0
10009c1c:	4b26      	ldr	r3, [pc, #152]	; (10009cb8 <dmp_enable_feature+0x204>)
10009c1e:	4798      	blx	r3

    if (mask & DMP_FEATURE_6X_LP_QUAT)
10009c20:	06e3      	lsls	r3, r4, #27
10009c22:	d503      	bpl.n	10009c2c <dmp_enable_feature+0x178>
        dmp_enable_6x_lp_quat(1);
10009c24:	2001      	movs	r0, #1
10009c26:	4b25      	ldr	r3, [pc, #148]	; (10009cbc <dmp_enable_feature+0x208>)
10009c28:	4798      	blx	r3
10009c2a:	e002      	b.n	10009c32 <dmp_enable_feature+0x17e>
    else
        dmp_enable_6x_lp_quat(0);
10009c2c:	2000      	movs	r0, #0
10009c2e:	4b23      	ldr	r3, [pc, #140]	; (10009cbc <dmp_enable_feature+0x208>)
10009c30:	4798      	blx	r3

    /* Pedometer is always enabled. */
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
10009c32:	2308      	movs	r3, #8
10009c34:	4323      	orrs	r3, r4
10009c36:	4a22      	ldr	r2, [pc, #136]	; (10009cc0 <dmp_enable_feature+0x20c>)
10009c38:	8153      	strh	r3, [r2, #10]
    mpu_reset_fifo();
10009c3a:	4b22      	ldr	r3, [pc, #136]	; (10009cc4 <dmp_enable_feature+0x210>)
10009c3c:	4798      	blx	r3

    dmp.packet_length = 0;
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
10009c3e:	2f00      	cmp	r7, #0
10009c40:	d103      	bne.n	10009c4a <dmp_enable_feature+0x196>

    /* Pedometer is always enabled. */
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
    mpu_reset_fifo();

    dmp.packet_length = 0;
10009c42:	2200      	movs	r2, #0
10009c44:	4b1e      	ldr	r3, [pc, #120]	; (10009cc0 <dmp_enable_feature+0x20c>)
10009c46:	739a      	strb	r2, [r3, #14]
10009c48:	e002      	b.n	10009c50 <dmp_enable_feature+0x19c>
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
        dmp.packet_length += 6;
10009c4a:	2206      	movs	r2, #6
10009c4c:	4b1c      	ldr	r3, [pc, #112]	; (10009cc0 <dmp_enable_feature+0x20c>)
10009c4e:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_ANY_GYRO)
10009c50:	2d00      	cmp	r5, #0
10009c52:	d003      	beq.n	10009c5c <dmp_enable_feature+0x1a8>
        dmp.packet_length += 6;
10009c54:	4a1a      	ldr	r2, [pc, #104]	; (10009cc0 <dmp_enable_feature+0x20c>)
10009c56:	7b93      	ldrb	r3, [r2, #14]
10009c58:	3306      	adds	r3, #6
10009c5a:	7393      	strb	r3, [r2, #14]
    if (mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT))
10009c5c:	2314      	movs	r3, #20
10009c5e:	4223      	tst	r3, r4
10009c60:	d003      	beq.n	10009c6a <dmp_enable_feature+0x1b6>
        dmp.packet_length += 16;
10009c62:	4a17      	ldr	r2, [pc, #92]	; (10009cc0 <dmp_enable_feature+0x20c>)
10009c64:	7b93      	ldrb	r3, [r2, #14]
10009c66:	3310      	adds	r3, #16
10009c68:	7393      	strb	r3, [r2, #14]
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
10009c6a:	2e00      	cmp	r6, #0
10009c6c:	d003      	beq.n	10009c76 <dmp_enable_feature+0x1c2>
        dmp.packet_length += 4;
10009c6e:	4a14      	ldr	r2, [pc, #80]	; (10009cc0 <dmp_enable_feature+0x20c>)
10009c70:	7b93      	ldrb	r3, [r2, #14]
10009c72:	3304      	adds	r3, #4
10009c74:	7393      	strb	r3, [r2, #14]

    return 0;
}
10009c76:	2000      	movs	r0, #0
10009c78:	b005      	add	sp, #20
10009c7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009c7c:	10009529 	.word	0x10009529
10009c80:	00000aa7 	.word	0x00000aa7
10009c84:	00000ab6 	.word	0x00000ab6
10009c88:	100099e1 	.word	0x100099e1
10009c8c:	00000aa2 	.word	0x00000aa2
10009c90:	100096d1 	.word	0x100096d1
10009c94:	1000987d 	.word	0x1000987d
10009c98:	100098c9 	.word	0x100098c9
10009c9c:	100098f9 	.word	0x100098f9
10009ca0:	10009925 	.word	0x10009925
10009ca4:	02cae309 	.word	0x02cae309
10009ca8:	10009951 	.word	0x10009951
10009cac:	10009989 	.word	0x10009989
10009cb0:	100099b5 	.word	0x100099b5
10009cb4:	0000073d 	.word	0x0000073d
10009cb8:	10009a2d 	.word	0x10009a2d
10009cbc:	10009a71 	.word	0x10009a71
10009cc0:	10017fbc 	.word	0x10017fbc
10009cc4:	10008505 	.word	0x10008505

10009cc8 <sms_ble_pair_request_fn>:
    return AT_BLE_SUCCESS;
}

/* AT_BLE_PAIR_REQUEST (#10) */
at_ble_status_t sms_ble_pair_request_fn(void *params)
{
10009cc8:	b510      	push	{r4, lr}
10009cca:	b082      	sub	sp, #8
    at_ble_pair_request_t *request = (at_ble_pair_request_t *)params;
    DBG_LOG_DEV("[sms_ble_pair_request_fn]\tPairing request... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
10009ccc:	4809      	ldr	r0, [pc, #36]	; (10009cf4 <sms_ble_pair_request_fn+0x2c>)
10009cce:	4b0a      	ldr	r3, [pc, #40]	; (10009cf8 <sms_ble_pair_request_fn+0x30>)
10009cd0:	4798      	blx	r3
10009cd2:	4b0a      	ldr	r3, [pc, #40]	; (10009cfc <sms_ble_pair_request_fn+0x34>)
10009cd4:	781a      	ldrb	r2, [r3, #0]
10009cd6:	b2d2      	uxtb	r2, r2
10009cd8:	4b09      	ldr	r3, [pc, #36]	; (10009d00 <sms_ble_pair_request_fn+0x38>)
10009cda:	781b      	ldrb	r3, [r3, #0]
10009cdc:	b2db      	uxtb	r3, r3
10009cde:	4909      	ldr	r1, [pc, #36]	; (10009d04 <sms_ble_pair_request_fn+0x3c>)
10009ce0:	7808      	ldrb	r0, [r1, #0]
10009ce2:	4909      	ldr	r1, [pc, #36]	; (10009d08 <sms_ble_pair_request_fn+0x40>)
10009ce4:	7849      	ldrb	r1, [r1, #1]
10009ce6:	9000      	str	r0, [sp, #0]
10009ce8:	4808      	ldr	r0, [pc, #32]	; (10009d0c <sms_ble_pair_request_fn+0x44>)
10009cea:	4c09      	ldr	r4, [pc, #36]	; (10009d10 <sms_ble_pair_request_fn+0x48>)
10009cec:	47a0      	blx	r4
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- peer features: 0x%02x", request->handle, request->peer_features);
    return AT_BLE_SUCCESS;
}
10009cee:	2000      	movs	r0, #0
10009cf0:	b002      	add	sp, #8
10009cf2:	bd10      	pop	{r4, pc}
10009cf4:	10015f9c 	.word	0x10015f9c
10009cf8:	10014df5 	.word	0x10014df5
10009cfc:	10019c18 	.word	0x10019c18
10009d00:	10019a74 	.word	0x10019a74
10009d04:	10019c19 	.word	0x10019c19
10009d08:	10019b08 	.word	0x10019b08
10009d0c:	10016234 	.word	0x10016234
10009d10:	10014cd5 	.word	0x10014cd5

10009d14 <sms_ble_notification_confirmed_fn>:

/* AT_BLE_NOTIFICATION_CONFIRMED (#29) */
at_ble_status_t sms_ble_notification_confirmed_fn(void *params)
{
10009d14:	b510      	push	{r4, lr}
    
    at_ble_cmd_complete_event_t *notification_status = (at_ble_cmd_complete_event_t *)params;
    //button_instance.current_state = sms_button_get_state();
    //DBG_LOG_DEV("[sms_ble_notification_confirmed_fn]\tNotification sent... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- operation: 0x%02x\r\n- status: 0x%02x", notification_status->conn_handle, notification_status->operation, notification_status->status);
    sms_dualtimer_stop(DUALTIMER_TIMER2);
10009d16:	2001      	movs	r0, #1
10009d18:	4b0c      	ldr	r3, [pc, #48]	; (10009d4c <sms_ble_notification_confirmed_fn+0x38>)
10009d1a:	4798      	blx	r3
    timer2_current_mode = TIMER2_MODE_NONE;
10009d1c:	2200      	movs	r2, #0
10009d1e:	4b0c      	ldr	r3, [pc, #48]	; (10009d50 <sms_ble_notification_confirmed_fn+0x3c>)
10009d20:	701a      	strb	r2, [r3, #0]
    ble_current_state = BLE_STATE_PAIRED;
10009d22:	3222      	adds	r2, #34	; 0x22
10009d24:	4b0b      	ldr	r3, [pc, #44]	; (10009d54 <sms_ble_notification_confirmed_fn+0x40>)
10009d26:	701a      	strb	r2, [r3, #0]
    //sms_sensors_toggle_interrupt(SMS_EXTINT_ENABLE);
    //DBG_LOG_CONT_DEV(" done!");

    //gpio_pin_set_output_level(dbg_pin, DBG_PIN_LOW);
    
    DBG_LOG_DEV("Timer1 current mode: %d", timer1_current_mode);
10009d28:	480b      	ldr	r0, [pc, #44]	; (10009d58 <sms_ble_notification_confirmed_fn+0x44>)
10009d2a:	4b0c      	ldr	r3, [pc, #48]	; (10009d5c <sms_ble_notification_confirmed_fn+0x48>)
10009d2c:	4798      	blx	r3
10009d2e:	4c0c      	ldr	r4, [pc, #48]	; (10009d60 <sms_ble_notification_confirmed_fn+0x4c>)
10009d30:	7821      	ldrb	r1, [r4, #0]
10009d32:	b2c9      	uxtb	r1, r1
10009d34:	480b      	ldr	r0, [pc, #44]	; (10009d64 <sms_ble_notification_confirmed_fn+0x50>)
10009d36:	4b0c      	ldr	r3, [pc, #48]	; (10009d68 <sms_ble_notification_confirmed_fn+0x54>)
10009d38:	4798      	blx	r3
    if(timer1_current_mode == TIMER1_MODE_NONE) {
10009d3a:	7823      	ldrb	r3, [r4, #0]
10009d3c:	2b00      	cmp	r3, #0
10009d3e:	d102      	bne.n	10009d46 <sms_ble_notification_confirmed_fn+0x32>
        ulp_ready = true;
10009d40:	2201      	movs	r2, #1
10009d42:	4b0a      	ldr	r3, [pc, #40]	; (10009d6c <sms_ble_notification_confirmed_fn+0x58>)
10009d44:	701a      	strb	r2, [r3, #0]
    }
    return AT_BLE_SUCCESS;
}
10009d46:	2000      	movs	r0, #0
10009d48:	bd10      	pop	{r4, pc}
10009d4a:	46c0      	nop			; (mov r8, r8)
10009d4c:	1000b2e5 	.word	0x1000b2e5
10009d50:	10019c19 	.word	0x10019c19
10009d54:	10019c18 	.word	0x10019c18
10009d58:	10015f9c 	.word	0x10015f9c
10009d5c:	10014df5 	.word	0x10014df5
10009d60:	10019a74 	.word	0x10019a74
10009d64:	10016284 	.word	0x10016284
10009d68:	10014cd5 	.word	0x10014cd5
10009d6c:	10019b01 	.word	0x10019b01

10009d70 <sms_ble_indication_confirmed_fn>:

/* AT_BLE_INDICATION_CONFIRMED (#30) */
at_ble_status_t sms_ble_indication_confirmed_fn(void *params)
{
10009d70:	b510      	push	{r4, lr}
    
    at_ble_indication_confirmed_t *indication_status = (at_ble_indication_confirmed_t *)params;
    //button_instance.current_state = sms_button_get_state();
    //DBG_LOG_DEV("[sms_ble_indication_confirmed]\tIndication confirmed... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- char handle: 0x%04x\r\n- status: 0x%02x", indication_status->conn_handle, indication_status->char_handle, indication_status->status);
    sms_dualtimer_stop(DUALTIMER_TIMER2);
10009d72:	2001      	movs	r0, #1
10009d74:	4b08      	ldr	r3, [pc, #32]	; (10009d98 <sms_ble_indication_confirmed_fn+0x28>)
10009d76:	4798      	blx	r3
    timer2_current_mode = TIMER2_MODE_NONE;
10009d78:	2200      	movs	r2, #0
10009d7a:	4b08      	ldr	r3, [pc, #32]	; (10009d9c <sms_ble_indication_confirmed_fn+0x2c>)
10009d7c:	701a      	strb	r2, [r3, #0]
    ble_current_state = BLE_STATE_PAIRED;
10009d7e:	3222      	adds	r2, #34	; 0x22
10009d80:	4b07      	ldr	r3, [pc, #28]	; (10009da0 <sms_ble_indication_confirmed_fn+0x30>)
10009d82:	701a      	strb	r2, [r3, #0]
    //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
    //sms_sensors_toggle_interrupt(SMS_EXTINT_ENABLE);
    
    //gpio_pin_set_output_level(dbg_pin, DBG_PIN_LOW);
    
    if(timer1_current_mode == TIMER1_MODE_NONE) {
10009d84:	4b07      	ldr	r3, [pc, #28]	; (10009da4 <sms_ble_indication_confirmed_fn+0x34>)
10009d86:	781b      	ldrb	r3, [r3, #0]
10009d88:	2b00      	cmp	r3, #0
10009d8a:	d102      	bne.n	10009d92 <sms_ble_indication_confirmed_fn+0x22>
        ulp_ready = true;
10009d8c:	3a21      	subs	r2, #33	; 0x21
10009d8e:	4b06      	ldr	r3, [pc, #24]	; (10009da8 <sms_ble_indication_confirmed_fn+0x38>)
10009d90:	701a      	strb	r2, [r3, #0]
    }        
    return AT_BLE_SUCCESS;
}
10009d92:	2000      	movs	r0, #0
10009d94:	bd10      	pop	{r4, pc}
10009d96:	46c0      	nop			; (mov r8, r8)
10009d98:	1000b2e5 	.word	0x1000b2e5
10009d9c:	10019c19 	.word	0x10019c19
10009da0:	10019c18 	.word	0x10019c18
10009da4:	10019a74 	.word	0x10019a74
10009da8:	10019b01 	.word	0x10019b01

10009dac <sms_ble_startup>:
#include <stdio.h>
//#include <stdlib.h>
#include "sms_peripheral1.h"

void sms_ble_startup(void)
{
10009dac:	b510      	push	{r4, lr}
    //sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
    timer2_current_mode = TIMER2_MODE_LED_STARTUP;
10009dae:	2202      	movs	r2, #2
10009db0:	4b02      	ldr	r3, [pc, #8]	; (10009dbc <sms_ble_startup+0x10>)
10009db2:	701a      	strb	r2, [r3, #0]
    sms_led_blink_start(SMS_LED_0_PIN);
10009db4:	2016      	movs	r0, #22
10009db6:	4b02      	ldr	r3, [pc, #8]	; (10009dc0 <sms_ble_startup+0x14>)
10009db8:	4798      	blx	r3
}
10009dba:	bd10      	pop	{r4, pc}
10009dbc:	10019c19 	.word	0x10019c19
10009dc0:	1000ac89 	.word	0x1000ac89

10009dc4 <sms_ble_power_down>:

void sms_ble_power_down(void)
{
10009dc4:	b510      	push	{r4, lr}
    sms_monitor_get_states("[sms_ble_power_down]");
10009dc6:	482c      	ldr	r0, [pc, #176]	; (10009e78 <sms_ble_power_down+0xb4>)
10009dc8:	4b2c      	ldr	r3, [pc, #176]	; (10009e7c <sms_ble_power_down+0xb8>)
10009dca:	4798      	blx	r3
    if(ble_current_state == BLE_STATE_POWEROFF) {
10009dcc:	4b2c      	ldr	r3, [pc, #176]	; (10009e80 <sms_ble_power_down+0xbc>)
10009dce:	781b      	ldrb	r3, [r3, #0]
10009dd0:	2b00      	cmp	r3, #0
10009dd2:	d105      	bne.n	10009de0 <sms_ble_power_down+0x1c>
        /* If already power off state, then go back sleeping */
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        ulp_ready = true;
10009dd4:	2201      	movs	r2, #1
10009dd6:	4b2b      	ldr	r3, [pc, #172]	; (10009e84 <sms_ble_power_down+0xc0>)
10009dd8:	701a      	strb	r2, [r3, #0]
        release_sleep_lock();
10009dda:	4b2b      	ldr	r3, [pc, #172]	; (10009e88 <sms_ble_power_down+0xc4>)
10009ddc:	4798      	blx	r3
10009dde:	e049      	b.n	10009e74 <sms_ble_power_down+0xb0>
    }
    else {
        /* Disable button interrupts */
        //sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);        
        /* Disconnect if necessary from BLE network */
        switch(ble_current_state) {
10009de0:	4b27      	ldr	r3, [pc, #156]	; (10009e80 <sms_ble_power_down+0xbc>)
10009de2:	781b      	ldrb	r3, [r3, #0]
10009de4:	b2db      	uxtb	r3, r3
10009de6:	2b21      	cmp	r3, #33	; 0x21
10009de8:	d030      	beq.n	10009e4c <sms_ble_power_down+0x88>
10009dea:	d802      	bhi.n	10009df2 <sms_ble_power_down+0x2e>
10009dec:	2b20      	cmp	r3, #32
10009dee:	d005      	beq.n	10009dfc <sms_ble_power_down+0x38>
10009df0:	e037      	b.n	10009e62 <sms_ble_power_down+0x9e>
10009df2:	2b22      	cmp	r3, #34	; 0x22
10009df4:	d017      	beq.n	10009e26 <sms_ble_power_down+0x62>
10009df6:	2b23      	cmp	r3, #35	; 0x23
10009df8:	d01b      	beq.n	10009e32 <sms_ble_power_down+0x6e>
10009dfa:	e032      	b.n	10009e62 <sms_ble_power_down+0x9e>
            case BLE_STATE_ADVERTISING:
            DBG_LOG_DEV("[sms_ble_power_down]\tStopping command received during advertisement. Stopping... ");
10009dfc:	4823      	ldr	r0, [pc, #140]	; (10009e8c <sms_ble_power_down+0xc8>)
10009dfe:	4b24      	ldr	r3, [pc, #144]	; (10009e90 <sms_ble_power_down+0xcc>)
10009e00:	4798      	blx	r3
10009e02:	4824      	ldr	r0, [pc, #144]	; (10009e94 <sms_ble_power_down+0xd0>)
10009e04:	4b24      	ldr	r3, [pc, #144]	; (10009e98 <sms_ble_power_down+0xd4>)
10009e06:	4798      	blx	r3
            if(at_ble_adv_stop() != AT_BLE_SUCCESS) {
10009e08:	4b24      	ldr	r3, [pc, #144]	; (10009e9c <sms_ble_power_down+0xd8>)
10009e0a:	4798      	blx	r3
10009e0c:	2800      	cmp	r0, #0
10009e0e:	d003      	beq.n	10009e18 <sms_ble_power_down+0x54>
                DBG_LOG_CONT_DEV("failed!!!");
10009e10:	4823      	ldr	r0, [pc, #140]	; (10009ea0 <sms_ble_power_down+0xdc>)
10009e12:	4b21      	ldr	r3, [pc, #132]	; (10009e98 <sms_ble_power_down+0xd4>)
10009e14:	4798      	blx	r3
10009e16:	e024      	b.n	10009e62 <sms_ble_power_down+0x9e>
                //#pragma TBD: manage adv_stop failure
            }
            else {
                DBG_LOG_CONT_DEV("done!");
10009e18:	4822      	ldr	r0, [pc, #136]	; (10009ea4 <sms_ble_power_down+0xe0>)
10009e1a:	4b1f      	ldr	r3, [pc, #124]	; (10009e98 <sms_ble_power_down+0xd4>)
10009e1c:	4798      	blx	r3
                ble_current_state = BLE_STATE_DISCONNECTED;
10009e1e:	2211      	movs	r2, #17
10009e20:	4b17      	ldr	r3, [pc, #92]	; (10009e80 <sms_ble_power_down+0xbc>)
10009e22:	701a      	strb	r2, [r3, #0]
10009e24:	e01d      	b.n	10009e62 <sms_ble_power_down+0x9e>
            }
            break;
            
            case BLE_STATE_PAIRED:
            DBG_LOG_DEV("[sms_ble_power_down]\t\tDevice paired... disabling interrupts & switching down sensors");
10009e26:	4819      	ldr	r0, [pc, #100]	; (10009e8c <sms_ble_power_down+0xc8>)
10009e28:	4b19      	ldr	r3, [pc, #100]	; (10009e90 <sms_ble_power_down+0xcc>)
10009e2a:	4798      	blx	r3
10009e2c:	481e      	ldr	r0, [pc, #120]	; (10009ea8 <sms_ble_power_down+0xe4>)
10009e2e:	4b1a      	ldr	r3, [pc, #104]	; (10009e98 <sms_ble_power_down+0xd4>)
10009e30:	4798      	blx	r3
            
            case BLE_STATE_INDICATING:
            DBG_LOG_DEV("[sms_ble_power_down]\t\tCurrently indicating");
10009e32:	4816      	ldr	r0, [pc, #88]	; (10009e8c <sms_ble_power_down+0xc8>)
10009e34:	4b16      	ldr	r3, [pc, #88]	; (10009e90 <sms_ble_power_down+0xcc>)
10009e36:	4798      	blx	r3
10009e38:	481c      	ldr	r0, [pc, #112]	; (10009eac <sms_ble_power_down+0xe8>)
10009e3a:	4b17      	ldr	r3, [pc, #92]	; (10009e98 <sms_ble_power_down+0xd4>)
10009e3c:	4798      	blx	r3
            pressure_device.state = PRESSURE_STATE_OFF;
10009e3e:	2100      	movs	r1, #0
10009e40:	2328      	movs	r3, #40	; 0x28
10009e42:	4a1b      	ldr	r2, [pc, #108]	; (10009eb0 <sms_ble_power_down+0xec>)
10009e44:	54d1      	strb	r1, [r2, r3]
            sms_sensors_interrupt_toggle(false, false);
10009e46:	2000      	movs	r0, #0
10009e48:	4b1a      	ldr	r3, [pc, #104]	; (10009eb4 <sms_ble_power_down+0xf0>)
10009e4a:	4798      	blx	r3
            //#pragma TBD: switch-off sensors to save current
            //sms_sensors_switch(false);
            
            case BLE_STATE_CONNECTED:
            DBG_LOG_DEV("[sms_ble_power_down]\t\tDevice connected... disconnecting");
10009e4c:	480f      	ldr	r0, [pc, #60]	; (10009e8c <sms_ble_power_down+0xc8>)
10009e4e:	4b10      	ldr	r3, [pc, #64]	; (10009e90 <sms_ble_power_down+0xcc>)
10009e50:	4798      	blx	r3
10009e52:	4819      	ldr	r0, [pc, #100]	; (10009eb8 <sms_ble_power_down+0xf4>)
10009e54:	4b10      	ldr	r3, [pc, #64]	; (10009e98 <sms_ble_power_down+0xd4>)
10009e56:	4798      	blx	r3
            at_ble_disconnect(sms_connection_handle, AT_BLE_TERMINATED_BY_USER);
10009e58:	4b18      	ldr	r3, [pc, #96]	; (10009ebc <sms_ble_power_down+0xf8>)
10009e5a:	8818      	ldrh	r0, [r3, #0]
10009e5c:	2113      	movs	r1, #19
10009e5e:	4b18      	ldr	r3, [pc, #96]	; (10009ec0 <sms_ble_power_down+0xfc>)
10009e60:	4798      	blx	r3
            
            default:
            break;
        }
        
        ble_current_state = BLE_STATE_DISCONNECTED;
10009e62:	2211      	movs	r2, #17
10009e64:	4b06      	ldr	r3, [pc, #24]	; (10009e80 <sms_ble_power_down+0xbc>)
10009e66:	701a      	strb	r2, [r3, #0]
        timer2_current_mode = TIMER2_MODE_LED_SHUTDOWN;
10009e68:	3a0e      	subs	r2, #14
10009e6a:	4b16      	ldr	r3, [pc, #88]	; (10009ec4 <sms_ble_power_down+0x100>)
10009e6c:	701a      	strb	r2, [r3, #0]
        sms_led_blink_start(SMS_LED_0_PIN);
10009e6e:	2016      	movs	r0, #22
10009e70:	4b15      	ldr	r3, [pc, #84]	; (10009ec8 <sms_ble_power_down+0x104>)
10009e72:	4798      	blx	r3
    }
}
10009e74:	bd10      	pop	{r4, pc}
10009e76:	46c0      	nop			; (mov r8, r8)
10009e78:	1001629c 	.word	0x1001629c
10009e7c:	1000a7a1 	.word	0x1000a7a1
10009e80:	10019c18 	.word	0x10019c18
10009e84:	10019b01 	.word	0x10019b01
10009e88:	1000f391 	.word	0x1000f391
10009e8c:	10015f9c 	.word	0x10015f9c
10009e90:	10014df5 	.word	0x10014df5
10009e94:	100162b4 	.word	0x100162b4
10009e98:	10014cd5 	.word	0x10014cd5
10009e9c:	1001070d 	.word	0x1001070d
10009ea0:	10016308 	.word	0x10016308
10009ea4:	10016314 	.word	0x10016314
10009ea8:	1001631c 	.word	0x1001631c
10009eac:	10016374 	.word	0x10016374
10009eb0:	10019b7c 	.word	0x10019b7c
10009eb4:	1000a7fd 	.word	0x1000a7fd
10009eb8:	100163a0 	.word	0x100163a0
10009ebc:	10019b02 	.word	0x10019b02
10009ec0:	10010739 	.word	0x10010739
10009ec4:	10019c19 	.word	0x10019c19
10009ec8:	1000ac89 	.word	0x1000ac89

10009ecc <sms_ble_adv_report_fn>:
    return AT_BLE_FAILURE;
}

/* AT_BLE_ADV_REPORT (#3) */
at_ble_status_t sms_ble_adv_report_fn(void *params)
{
10009ecc:	b510      	push	{r4, lr}
    at_ble_adv_report_t *adv_report = (at_ble_adv_report_t *)params;
    ble_current_state = BLE_STATE_DISCONNECTED;
10009ece:	2211      	movs	r2, #17
10009ed0:	4b05      	ldr	r3, [pc, #20]	; (10009ee8 <sms_ble_adv_report_fn+0x1c>)
10009ed2:	701a      	strb	r2, [r3, #0]
    DBG_LOG_DEV("[sms_ble_adv_report_fn]\tAdvertisement timeout...");
10009ed4:	4805      	ldr	r0, [pc, #20]	; (10009eec <sms_ble_adv_report_fn+0x20>)
10009ed6:	4b06      	ldr	r3, [pc, #24]	; (10009ef0 <sms_ble_adv_report_fn+0x24>)
10009ed8:	4798      	blx	r3
10009eda:	4806      	ldr	r0, [pc, #24]	; (10009ef4 <sms_ble_adv_report_fn+0x28>)
10009edc:	4b06      	ldr	r3, [pc, #24]	; (10009ef8 <sms_ble_adv_report_fn+0x2c>)
10009ede:	4798      	blx	r3
    //DBG_LOG_DEV("- status: 0x%02x", adv_report->status);
    sms_ble_power_down();
10009ee0:	4b06      	ldr	r3, [pc, #24]	; (10009efc <sms_ble_adv_report_fn+0x30>)
10009ee2:	4798      	blx	r3
    return AT_BLE_SUCCESS;
}
10009ee4:	2000      	movs	r0, #0
10009ee6:	bd10      	pop	{r4, pc}
10009ee8:	10019c18 	.word	0x10019c18
10009eec:	10015f9c 	.word	0x10015f9c
10009ef0:	10014df5 	.word	0x10014df5
10009ef4:	100163d8 	.word	0x100163d8
10009ef8:	10014cd5 	.word	0x10014cd5
10009efc:	10009dc5 	.word	0x10009dc5

10009f00 <sms_ble_connected_fn>:

/* AT_BLE_CONNECTED (#5) */
at_ble_status_t sms_ble_connected_fn(void *params)
{
10009f00:	b510      	push	{r4, lr}
    if(ble_current_state == BLE_STATE_ADVERTISING) {
10009f02:	4b0a      	ldr	r3, [pc, #40]	; (10009f2c <sms_ble_connected_fn+0x2c>)
10009f04:	781b      	ldrb	r3, [r3, #0]
10009f06:	2b20      	cmp	r3, #32
10009f08:	d10c      	bne.n	10009f24 <sms_ble_connected_fn+0x24>
        at_ble_connected_t *connected = (at_ble_connected_t *)params;
        sms_ble_conn_handle = connected->handle;
10009f0a:	8902      	ldrh	r2, [r0, #8]
10009f0c:	4b08      	ldr	r3, [pc, #32]	; (10009f30 <sms_ble_connected_fn+0x30>)
10009f0e:	801a      	strh	r2, [r3, #0]
        ble_current_state = BLE_STATE_CONNECTED;
10009f10:	2221      	movs	r2, #33	; 0x21
10009f12:	4b06      	ldr	r3, [pc, #24]	; (10009f2c <sms_ble_connected_fn+0x2c>)
10009f14:	701a      	strb	r2, [r3, #0]
        DBG_LOG_DEV("[sms_ble_connected_fn]\t\tDevices connected...");
10009f16:	4807      	ldr	r0, [pc, #28]	; (10009f34 <sms_ble_connected_fn+0x34>)
10009f18:	4b07      	ldr	r3, [pc, #28]	; (10009f38 <sms_ble_connected_fn+0x38>)
10009f1a:	4798      	blx	r3
10009f1c:	4807      	ldr	r0, [pc, #28]	; (10009f3c <sms_ble_connected_fn+0x3c>)
10009f1e:	4b08      	ldr	r3, [pc, #32]	; (10009f40 <sms_ble_connected_fn+0x40>)
10009f20:	4798      	blx	r3
10009f22:	e001      	b.n	10009f28 <sms_ble_connected_fn+0x28>
        //for(uint8_t i = 0; i < AT_BLE_ADDR_LEN; i++) {
            //DBG_LOG_CONT_DEV("%02x",connected->peer_addr.addr[AT_BLE_ADDR_LEN - (i+1)]);
        //}            
    }
    else {
        sms_ble_power_down();
10009f24:	4b07      	ldr	r3, [pc, #28]	; (10009f44 <sms_ble_connected_fn+0x44>)
10009f26:	4798      	blx	r3
    }    
    return AT_BLE_SUCCESS;
}
10009f28:	2000      	movs	r0, #0
10009f2a:	bd10      	pop	{r4, pc}
10009f2c:	10019c18 	.word	0x10019c18
10009f30:	10019c0e 	.word	0x10019c0e
10009f34:	10015f9c 	.word	0x10015f9c
10009f38:	10014df5 	.word	0x10014df5
10009f3c:	1001640c 	.word	0x1001640c
10009f40:	10014cd5 	.word	0x10014cd5
10009f44:	10009dc5 	.word	0x10009dc5

10009f48 <sms_ble_paired_fn>:
    return AT_BLE_SUCCESS;
}

/* AT_BLE_PAIR_DONE (#9) */
at_ble_status_t sms_ble_paired_fn(void *params)
{
10009f48:	b510      	push	{r4, lr}
    if(ble_current_state == BLE_STATE_CONNECTED) {
10009f4a:	4b09      	ldr	r3, [pc, #36]	; (10009f70 <sms_ble_paired_fn+0x28>)
10009f4c:	781b      	ldrb	r3, [r3, #0]
10009f4e:	2b21      	cmp	r3, #33	; 0x21
10009f50:	d10a      	bne.n	10009f68 <sms_ble_paired_fn+0x20>
        ble_current_state = BLE_STATE_PAIRED;
10009f52:	2222      	movs	r2, #34	; 0x22
10009f54:	4b06      	ldr	r3, [pc, #24]	; (10009f70 <sms_ble_paired_fn+0x28>)
10009f56:	701a      	strb	r2, [r3, #0]
        at_ble_pair_done_t *pair_status = (at_ble_pair_done_t *)params;
        sms_monitor_get_states("[sms_ble_paired_fn]");
10009f58:	4806      	ldr	r0, [pc, #24]	; (10009f74 <sms_ble_paired_fn+0x2c>)
10009f5a:	4b07      	ldr	r3, [pc, #28]	; (10009f78 <sms_ble_paired_fn+0x30>)
10009f5c:	4798      	blx	r3
        //DBG_LOG_DEV("[sms_ble_paired_fn]\t\tDevices paired... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
        //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- authorization: 0x%02x\r\n- status: 0x%02x", pair_status->handle, pair_status->auth, pair_status->status);
        sms_sensors_switch(true, true); // ! Release sleep lock & enable buttons interrupt after reset done!
10009f5e:	2101      	movs	r1, #1
10009f60:	2001      	movs	r0, #1
10009f62:	4b06      	ldr	r3, [pc, #24]	; (10009f7c <sms_ble_paired_fn+0x34>)
10009f64:	4798      	blx	r3
10009f66:	e001      	b.n	10009f6c <sms_ble_paired_fn+0x24>
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
    }
    else {
        sms_ble_power_down();
10009f68:	4b05      	ldr	r3, [pc, #20]	; (10009f80 <sms_ble_paired_fn+0x38>)
10009f6a:	4798      	blx	r3
    }        
    return AT_BLE_SUCCESS;
}
10009f6c:	2000      	movs	r0, #0
10009f6e:	bd10      	pop	{r4, pc}
10009f70:	10019c18 	.word	0x10019c18
10009f74:	1001643c 	.word	0x1001643c
10009f78:	1000a7a1 	.word	0x1000a7a1
10009f7c:	1000a889 	.word	0x1000a889
10009f80:	10009dc5 	.word	0x10009dc5

10009f84 <sms_ble_advertise>:
        sms_led_blink_start(SMS_LED_0_PIN);
    }
}

at_ble_status_t sms_ble_advertise(void)
{
10009f84:	b510      	push	{r4, lr}
10009f86:	b084      	sub	sp, #16
    at_ble_status_t status = AT_BLE_FAILURE;
    ble_current_state = BLE_STATE_ADVERTISING;
10009f88:	2220      	movs	r2, #32
10009f8a:	4b17      	ldr	r3, [pc, #92]	; (10009fe8 <sms_ble_advertise+0x64>)
10009f8c:	701a      	strb	r2, [r3, #0]

    /* Set the advertisement data */
    if((status = ble_advertisement_data_set()) != AT_BLE_SUCCESS) {
10009f8e:	4b17      	ldr	r3, [pc, #92]	; (10009fec <sms_ble_advertise+0x68>)
10009f90:	4798      	blx	r3
10009f92:	1e04      	subs	r4, r0, #0
10009f94:	d007      	beq.n	10009fa6 <sms_ble_advertise+0x22>
        DBG_LOG("[sms_ble_advertise]\tAdvertisement data set failed!");
10009f96:	4816      	ldr	r0, [pc, #88]	; (10009ff0 <sms_ble_advertise+0x6c>)
10009f98:	4b16      	ldr	r3, [pc, #88]	; (10009ff4 <sms_ble_advertise+0x70>)
10009f9a:	4798      	blx	r3
10009f9c:	4816      	ldr	r0, [pc, #88]	; (10009ff8 <sms_ble_advertise+0x74>)
10009f9e:	4b17      	ldr	r3, [pc, #92]	; (10009ffc <sms_ble_advertise+0x78>)
10009fa0:	4798      	blx	r3
        return status;
10009fa2:	0020      	movs	r0, r4
10009fa4:	e01e      	b.n	10009fe4 <sms_ble_advertise+0x60>
    }

    /* Start of advertisement */
    if((status = at_ble_adv_start(AT_BLE_ADV_TYPE_UNDIRECTED, AT_BLE_ADV_GEN_DISCOVERABLE, NULL, AT_BLE_ADV_FP_ANY, APP_FAST_ADV, APP_ADV_TIMEOUT, 0)) == AT_BLE_SUCCESS)
10009fa6:	2300      	movs	r3, #0
10009fa8:	9302      	str	r3, [sp, #8]
10009faa:	4b15      	ldr	r3, [pc, #84]	; (1000a000 <sms_ble_advertise+0x7c>)
10009fac:	9301      	str	r3, [sp, #4]
10009fae:	23c8      	movs	r3, #200	; 0xc8
10009fb0:	00db      	lsls	r3, r3, #3
10009fb2:	9300      	str	r3, [sp, #0]
10009fb4:	2300      	movs	r3, #0
10009fb6:	2200      	movs	r2, #0
10009fb8:	2101      	movs	r1, #1
10009fba:	2000      	movs	r0, #0
10009fbc:	4c11      	ldr	r4, [pc, #68]	; (1000a004 <sms_ble_advertise+0x80>)
10009fbe:	47a0      	blx	r4
10009fc0:	1e04      	subs	r4, r0, #0
10009fc2:	d107      	bne.n	10009fd4 <sms_ble_advertise+0x50>
    {
        DBG_LOG_DEV("[sms_ble_advertise]\t\tBLE Started Advertisement");
10009fc4:	480a      	ldr	r0, [pc, #40]	; (10009ff0 <sms_ble_advertise+0x6c>)
10009fc6:	4b0b      	ldr	r3, [pc, #44]	; (10009ff4 <sms_ble_advertise+0x70>)
10009fc8:	4798      	blx	r3
10009fca:	480f      	ldr	r0, [pc, #60]	; (1000a008 <sms_ble_advertise+0x84>)
10009fcc:	4b0b      	ldr	r3, [pc, #44]	; (10009ffc <sms_ble_advertise+0x78>)
10009fce:	4798      	blx	r3
        return AT_BLE_SUCCESS;
10009fd0:	2000      	movs	r0, #0
10009fd2:	e007      	b.n	10009fe4 <sms_ble_advertise+0x60>
    } 
    else {
        DBG_LOG("[sms_service_advertise]\tBLE Advertisement start failed: reason 0x%x", status);
10009fd4:	4806      	ldr	r0, [pc, #24]	; (10009ff0 <sms_ble_advertise+0x6c>)
10009fd6:	4b07      	ldr	r3, [pc, #28]	; (10009ff4 <sms_ble_advertise+0x70>)
10009fd8:	4798      	blx	r3
10009fda:	0021      	movs	r1, r4
10009fdc:	480b      	ldr	r0, [pc, #44]	; (1000a00c <sms_ble_advertise+0x88>)
10009fde:	4b07      	ldr	r3, [pc, #28]	; (10009ffc <sms_ble_advertise+0x78>)
10009fe0:	4798      	blx	r3
    }
    return AT_BLE_FAILURE;
10009fe2:	20e2      	movs	r0, #226	; 0xe2
}
10009fe4:	b004      	add	sp, #16
10009fe6:	bd10      	pop	{r4, pc}
10009fe8:	10019c18 	.word	0x10019c18
10009fec:	1000e9cd 	.word	0x1000e9cd
10009ff0:	10015f9c 	.word	0x10015f9c
10009ff4:	10014df5 	.word	0x10014df5
10009ff8:	10016450 	.word	0x10016450
10009ffc:	10014cd5 	.word	0x10014cd5
1000a000:	0000028f 	.word	0x0000028f
1000a004:	100105d1 	.word	0x100105d1
1000a008:	10016484 	.word	0x10016484
1000a00c:	100164b4 	.word	0x100164b4

1000a010 <sms_ble_disconnected_fn>:
    return AT_BLE_SUCCESS;
}

/* AT_BLE_DISCONNECTED (#6) */
at_ble_status_t sms_ble_disconnected_fn(void *params)
{
1000a010:	b530      	push	{r4, r5, lr}
1000a012:	b083      	sub	sp, #12
1000a014:	0005      	movs	r5, r0
    at_ble_disconnected_t *disconnect = (at_ble_disconnected_t *)params;
    if(ble_current_state == BLE_STATE_PAIRED) {
1000a016:	4b1c      	ldr	r3, [pc, #112]	; (1000a088 <sms_ble_disconnected_fn+0x78>)
1000a018:	781b      	ldrb	r3, [r3, #0]
1000a01a:	2b22      	cmp	r3, #34	; 0x22
1000a01c:	d10a      	bne.n	1000a034 <sms_ble_disconnected_fn+0x24>
        pressure_device.state = PRESSURE_STATE_OFF;
1000a01e:	2100      	movs	r1, #0
1000a020:	3306      	adds	r3, #6
1000a022:	4a1a      	ldr	r2, [pc, #104]	; (1000a08c <sms_ble_disconnected_fn+0x7c>)
1000a024:	54d1      	strb	r1, [r2, r3]
        sms_sensors_interrupt_toggle(false, false);
1000a026:	2000      	movs	r0, #0
1000a028:	4b19      	ldr	r3, [pc, #100]	; (1000a090 <sms_ble_disconnected_fn+0x80>)
1000a02a:	4798      	blx	r3
        sms_sensors_switch(false, false);
1000a02c:	2100      	movs	r1, #0
1000a02e:	2000      	movs	r0, #0
1000a030:	4b18      	ldr	r3, [pc, #96]	; (1000a094 <sms_ble_disconnected_fn+0x84>)
1000a032:	4798      	blx	r3
    }
    ble_current_state = BLE_STATE_DISCONNECTED;
1000a034:	4c14      	ldr	r4, [pc, #80]	; (1000a088 <sms_ble_disconnected_fn+0x78>)
1000a036:	2311      	movs	r3, #17
1000a038:	7023      	strb	r3, [r4, #0]
    DBG_LOG_DEV("[sms_ble_disconnected_fn]\tPeer disconnected... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
1000a03a:	4817      	ldr	r0, [pc, #92]	; (1000a098 <sms_ble_disconnected_fn+0x88>)
1000a03c:	4b17      	ldr	r3, [pc, #92]	; (1000a09c <sms_ble_disconnected_fn+0x8c>)
1000a03e:	4798      	blx	r3
1000a040:	7822      	ldrb	r2, [r4, #0]
1000a042:	b2d2      	uxtb	r2, r2
1000a044:	4b16      	ldr	r3, [pc, #88]	; (1000a0a0 <sms_ble_disconnected_fn+0x90>)
1000a046:	781b      	ldrb	r3, [r3, #0]
1000a048:	b2db      	uxtb	r3, r3
1000a04a:	4916      	ldr	r1, [pc, #88]	; (1000a0a4 <sms_ble_disconnected_fn+0x94>)
1000a04c:	7808      	ldrb	r0, [r1, #0]
1000a04e:	4916      	ldr	r1, [pc, #88]	; (1000a0a8 <sms_ble_disconnected_fn+0x98>)
1000a050:	7849      	ldrb	r1, [r1, #1]
1000a052:	9000      	str	r0, [sp, #0]
1000a054:	4815      	ldr	r0, [pc, #84]	; (1000a0ac <sms_ble_disconnected_fn+0x9c>)
1000a056:	4c16      	ldr	r4, [pc, #88]	; (1000a0b0 <sms_ble_disconnected_fn+0xa0>)
1000a058:	47a0      	blx	r4
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- reason: 0x%02x", disconnect->handle, disconnect->reason);
    switch(disconnect->reason) {
1000a05a:	78ab      	ldrb	r3, [r5, #2]
1000a05c:	2b1a      	cmp	r3, #26
1000a05e:	d00b      	beq.n	1000a078 <sms_ble_disconnected_fn+0x68>
1000a060:	b2da      	uxtb	r2, r3
1000a062:	2a1a      	cmp	r2, #26
1000a064:	d804      	bhi.n	1000a070 <sms_ble_disconnected_fn+0x60>
1000a066:	2b05      	cmp	r3, #5
1000a068:	d006      	beq.n	1000a078 <sms_ble_disconnected_fn+0x68>
1000a06a:	2b08      	cmp	r3, #8
1000a06c:	d107      	bne.n	1000a07e <sms_ble_disconnected_fn+0x6e>
1000a06e:	e003      	b.n	1000a078 <sms_ble_disconnected_fn+0x68>
1000a070:	2b29      	cmp	r3, #41	; 0x29
1000a072:	d001      	beq.n	1000a078 <sms_ble_disconnected_fn+0x68>
1000a074:	2b3b      	cmp	r3, #59	; 0x3b
1000a076:	d102      	bne.n	1000a07e <sms_ble_disconnected_fn+0x6e>
        case AT_BLE_AUTH_FAILURE: //0x05
        case AT_BLE_SUPERVISION_TIMEOUT: //0x08
        case AT_BLE_UNSUPPORTED_REMOTE_FEATURE: // 0x1A
        case AT_BLE_PAIRING_WITH_UNIT_KEY_NOT_SUP: // 0x29
        case AT_BLE_UNACCEPTABLE_INTERVAL: // 0x3B
        sms_ble_advertise();
1000a078:	4b0e      	ldr	r3, [pc, #56]	; (1000a0b4 <sms_ble_disconnected_fn+0xa4>)
1000a07a:	4798      	blx	r3
        break;
1000a07c:	e001      	b.n	1000a082 <sms_ble_disconnected_fn+0x72>
        case AT_BLE_TERMINATED_BY_USER: // 0x13
        case AT_BLE_REMOTE_DEV_TERM_LOW_RESOURCES: //0x14
        case AT_BLE_REMOTE_DEV_POWER_OFF: //0x15
        case AT_BLE_CON_TERM_BY_LOCAL_HOST: //0x16
        default:
        sms_ble_power_down();
1000a07e:	4b0e      	ldr	r3, [pc, #56]	; (1000a0b8 <sms_ble_disconnected_fn+0xa8>)
1000a080:	4798      	blx	r3
        break;
    }
    
    return AT_BLE_SUCCESS;
}
1000a082:	2000      	movs	r0, #0
1000a084:	b003      	add	sp, #12
1000a086:	bd30      	pop	{r4, r5, pc}
1000a088:	10019c18 	.word	0x10019c18
1000a08c:	10019b7c 	.word	0x10019b7c
1000a090:	1000a7fd 	.word	0x1000a7fd
1000a094:	1000a889 	.word	0x1000a889
1000a098:	10015f9c 	.word	0x10015f9c
1000a09c:	10014df5 	.word	0x10014df5
1000a0a0:	10019a74 	.word	0x10019a74
1000a0a4:	10019c19 	.word	0x10019c19
1000a0a8:	10019b08 	.word	0x10019b08
1000a0ac:	100164f8 	.word	0x100164f8
1000a0b0:	10014cd5 	.word	0x10014cd5
1000a0b4:	10009f85 	.word	0x10009f85
1000a0b8:	10009dc5 	.word	0x10009dc5

1000a0bc <sms_ble_send_characteristic>:
    NULL, //ble_characteristic_write_cmd_cmp
    NULL //ble_read_authorize_request_handler
};

at_ble_status_t sms_ble_send_characteristic(enum sms_ble_char_type ch)
{
1000a0bc:	b570      	push	{r4, r5, r6, lr}
1000a0be:	b084      	sub	sp, #16
    at_ble_status_t status = AT_BLE_SUCCESS;
    at_ble_handle_t val_handle = 0;
    uint8_t length = 0;
    uint8_t char_size = 0;
    uint8_t send_val[BLE_CHAR_SIZE_MAX];
    ble_current_state = BLE_STATE_INDICATING;
1000a0c0:	2223      	movs	r2, #35	; 0x23
1000a0c2:	4b36      	ldr	r3, [pc, #216]	; (1000a19c <sms_ble_send_characteristic+0xe0>)
1000a0c4:	701a      	strb	r2, [r3, #0]

    
    sms_ble_send_cnt++;
1000a0c6:	4a36      	ldr	r2, [pc, #216]	; (1000a1a0 <sms_ble_send_characteristic+0xe4>)
1000a0c8:	8813      	ldrh	r3, [r2, #0]
1000a0ca:	3301      	adds	r3, #1
1000a0cc:	8013      	strh	r3, [r2, #0]
    
    switch(ch) {
1000a0ce:	2801      	cmp	r0, #1
1000a0d0:	d013      	beq.n	1000a0fa <sms_ble_send_characteristic+0x3e>
1000a0d2:	2800      	cmp	r0, #0
1000a0d4:	d002      	beq.n	1000a0dc <sms_ble_send_characteristic+0x20>
1000a0d6:	2802      	cmp	r0, #2
1000a0d8:	d020      	beq.n	1000a11c <sms_ble_send_characteristic+0x60>
1000a0da:	e035      	b.n	1000a148 <sms_ble_send_characteristic+0x8c>
        case BLE_CHAR_BTN0:
        btn0_instance.char_value = ((btn0_instance.char_value >= 0x7f) ? 0 : (btn0_instance.char_value + 1));
1000a0dc:	4b31      	ldr	r3, [pc, #196]	; (1000a1a4 <sms_ble_send_characteristic+0xe8>)
1000a0de:	78da      	ldrb	r2, [r3, #3]
1000a0e0:	2300      	movs	r3, #0
1000a0e2:	2a7e      	cmp	r2, #126	; 0x7e
1000a0e4:	d801      	bhi.n	1000a0ea <sms_ble_send_characteristic+0x2e>
1000a0e6:	3201      	adds	r2, #1
1000a0e8:	b2d3      	uxtb	r3, r2
1000a0ea:	4a2e      	ldr	r2, [pc, #184]	; (1000a1a4 <sms_ble_send_characteristic+0xe8>)
1000a0ec:	70d3      	strb	r3, [r2, #3]
        send_val[0] = btn0_instance.char_value;
1000a0ee:	aa01      	add	r2, sp, #4
1000a0f0:	7013      	strb	r3, [r2, #0]
        val_handle = button_instance.service_handler.serv_chars.char_val_handle;
1000a0f2:	4b2d      	ldr	r3, [pc, #180]	; (1000a1a8 <sms_ble_send_characteristic+0xec>)
1000a0f4:	8b1d      	ldrh	r5, [r3, #24]
        length = 1;
1000a0f6:	2201      	movs	r2, #1
        break;
1000a0f8:	e028      	b.n	1000a14c <sms_ble_send_characteristic+0x90>
        
        case BLE_CHAR_BTN1:
        btn1_instance.char_value = ((btn1_instance.char_value >= 0xff) ? 0 : (btn1_instance.char_value + 1));
1000a0fa:	4b2c      	ldr	r3, [pc, #176]	; (1000a1ac <sms_ble_send_characteristic+0xf0>)
1000a0fc:	78db      	ldrb	r3, [r3, #3]
1000a0fe:	2bff      	cmp	r3, #255	; 0xff
1000a100:	d002      	beq.n	1000a108 <sms_ble_send_characteristic+0x4c>
1000a102:	3301      	adds	r3, #1
1000a104:	b2db      	uxtb	r3, r3
1000a106:	e000      	b.n	1000a10a <sms_ble_send_characteristic+0x4e>
1000a108:	2300      	movs	r3, #0
1000a10a:	4a28      	ldr	r2, [pc, #160]	; (1000a1ac <sms_ble_send_characteristic+0xf0>)
1000a10c:	70d3      	strb	r3, [r2, #3]
        send_val[0] = btn1_instance.char_value + 0x80;
1000a10e:	3b80      	subs	r3, #128	; 0x80
1000a110:	aa01      	add	r2, sp, #4
1000a112:	7013      	strb	r3, [r2, #0]
        val_handle = button_instance.service_handler.serv_chars.char_val_handle;
1000a114:	4b24      	ldr	r3, [pc, #144]	; (1000a1a8 <sms_ble_send_characteristic+0xec>)
1000a116:	8b1d      	ldrh	r5, [r3, #24]
        length = 1;
1000a118:	2201      	movs	r2, #1
        break;
1000a11a:	e017      	b.n	1000a14c <sms_ble_send_characteristic+0x90>
        
        case BLE_CHAR_PRESS:
        send_val[0] = (uint8_t)(pressure_device.ms58_device.temperature & 0xff);
1000a11c:	4a24      	ldr	r2, [pc, #144]	; (1000a1b0 <sms_ble_send_characteristic+0xf4>)
1000a11e:	6a13      	ldr	r3, [r2, #32]
1000a120:	a901      	add	r1, sp, #4
1000a122:	700b      	strb	r3, [r1, #0]
        send_val[1] = (uint8_t)((pressure_device.ms58_device.temperature >> 8) & 0xff);
1000a124:	1218      	asrs	r0, r3, #8
1000a126:	7048      	strb	r0, [r1, #1]
        send_val[2] = (uint8_t)((pressure_device.ms58_device.temperature >> 16) & 0xff);
1000a128:	1418      	asrs	r0, r3, #16
1000a12a:	7088      	strb	r0, [r1, #2]
        send_val[3] = (uint8_t)((pressure_device.ms58_device.temperature >> 24) & 0xff);
1000a12c:	161b      	asrs	r3, r3, #24
1000a12e:	70cb      	strb	r3, [r1, #3]
        send_val[4] = (uint8_t)(pressure_device.ms58_device.pressure & 0xff);
1000a130:	69d3      	ldr	r3, [r2, #28]
1000a132:	710b      	strb	r3, [r1, #4]
        send_val[5] = (uint8_t)((pressure_device.ms58_device.pressure >> 8) & 0xff);
1000a134:	1218      	asrs	r0, r3, #8
1000a136:	7148      	strb	r0, [r1, #5]
        send_val[6] = (uint8_t)((pressure_device.ms58_device.pressure >> 16) & 0xff);
1000a138:	1418      	asrs	r0, r3, #16
1000a13a:	7188      	strb	r0, [r1, #6]
        send_val[7] = (uint8_t)((pressure_device.ms58_device.pressure >> 24) & 0xff);
1000a13c:	161b      	asrs	r3, r3, #24
1000a13e:	71cb      	strb	r3, [r1, #7]
        val_handle = pressure_device.service_handler.serv_chars.char_val_handle;
1000a140:	2340      	movs	r3, #64	; 0x40
1000a142:	5ad5      	ldrh	r5, [r2, r3]
        length = 8;
1000a144:	2208      	movs	r2, #8
        break;
1000a146:	e001      	b.n	1000a14c <sms_ble_send_characteristic+0x90>

at_ble_status_t sms_ble_send_characteristic(enum sms_ble_char_type ch)
{
    at_ble_status_t status = AT_BLE_SUCCESS;
    at_ble_handle_t val_handle = 0;
    uint8_t length = 0;
1000a148:	2200      	movs	r2, #0
};

at_ble_status_t sms_ble_send_characteristic(enum sms_ble_char_type ch)
{
    at_ble_status_t status = AT_BLE_SUCCESS;
    at_ble_handle_t val_handle = 0;
1000a14a:	2500      	movs	r5, #0
        
        case BLE_CHAR_IMU:
        break;
    }
    
    status = at_ble_characteristic_value_set(val_handle, send_val, (length * sizeof(uint8_t)));
1000a14c:	b292      	uxth	r2, r2
1000a14e:	a901      	add	r1, sp, #4
1000a150:	0028      	movs	r0, r5
1000a152:	4b18      	ldr	r3, [pc, #96]	; (1000a1b4 <sms_ble_send_characteristic+0xf8>)
1000a154:	4798      	blx	r3
1000a156:	1e04      	subs	r4, r0, #0
    if(status == AT_BLE_SUCCESS) {
1000a158:	d11d      	bne.n	1000a196 <sms_ble_send_characteristic+0xda>
        //for(uint8_t i = 0; i < AT_BLE_UUID_128_LEN; i++) {
        //DBG_LOG_CONT_DEV("%02x", sms_button_service_handler.serv_uuid.uuid[(i)]);
        //}
        //DBG_LOG_DEV("- char value handle: 0x%04x\r\n- char value: 0x%02x", sms_button_service_handler.serv_chars.char_val_handle, send_val);
        
        printf("\r\ncnt: %d", sms_ble_send_cnt);
1000a15a:	4b11      	ldr	r3, [pc, #68]	; (1000a1a0 <sms_ble_send_characteristic+0xe4>)
1000a15c:	8819      	ldrh	r1, [r3, #0]
1000a15e:	4816      	ldr	r0, [pc, #88]	; (1000a1b8 <sms_ble_send_characteristic+0xfc>)
1000a160:	4b16      	ldr	r3, [pc, #88]	; (1000a1bc <sms_ble_send_characteristic+0x100>)
1000a162:	4798      	blx	r3
        gpio_pin_set_output_level(DBG_PIN_1, DBG_PIN_HIGH);
1000a164:	2101      	movs	r1, #1
1000a166:	2002      	movs	r0, #2
1000a168:	4e15      	ldr	r6, [pc, #84]	; (1000a1c0 <sms_ble_send_characteristic+0x104>)
1000a16a:	47b0      	blx	r6
#   if SMS_SENDING_WITH_ACK == true
        sms_ble_ind_retry = 0;
1000a16c:	2200      	movs	r2, #0
1000a16e:	4b15      	ldr	r3, [pc, #84]	; (1000a1c4 <sms_ble_send_characteristic+0x108>)
1000a170:	701a      	strb	r2, [r3, #0]
        status = at_ble_indication_send(sms_connection_handle, val_handle);
1000a172:	4b15      	ldr	r3, [pc, #84]	; (1000a1c8 <sms_ble_send_characteristic+0x10c>)
1000a174:	8818      	ldrh	r0, [r3, #0]
1000a176:	0029      	movs	r1, r5
1000a178:	4b14      	ldr	r3, [pc, #80]	; (1000a1cc <sms_ble_send_characteristic+0x110>)
1000a17a:	4798      	blx	r3
1000a17c:	0004      	movs	r4, r0
#   else
        status = at_ble_notification_send(sms_connection_handle, val_handle);
#   endif
        gpio_pin_set_output_level(DBG_PIN_1, DBG_PIN_LOW);
1000a17e:	2100      	movs	r1, #0
1000a180:	2002      	movs	r0, #2
1000a182:	47b0      	blx	r6
        //register int n41 asm("sp");
        //register int n42 asm("lr");
        //register int n43 asm("r15");
        //printf("\r\n\@ sending: sp 0x%x, lr 0x%x", n41, n42);
        
        if(status == AT_BLE_SUCCESS) {
1000a184:	2c00      	cmp	r4, #0
1000a186:	d106      	bne.n	1000a196 <sms_ble_send_characteristic+0xda>
            timer2_current_mode = TIMER2_MODE_INDICATION_TOUT;
1000a188:	2201      	movs	r2, #1
1000a18a:	4b11      	ldr	r3, [pc, #68]	; (1000a1d0 <sms_ble_send_characteristic+0x114>)
1000a18c:	701a      	strb	r2, [r3, #0]
            sms_dualtimer_start(TIMER_UNIT_MS, BLE_INDICATION_TOUT_MS, DUALTIMER_TIMER2);
1000a18e:	2164      	movs	r1, #100	; 0x64
1000a190:	2001      	movs	r0, #1
1000a192:	4b10      	ldr	r3, [pc, #64]	; (1000a1d4 <sms_ble_send_characteristic+0x118>)
1000a194:	4798      	blx	r3
        else {
            //#pragma TBD: handle sending error...
        }
    }
    return status;
}
1000a196:	0020      	movs	r0, r4
1000a198:	b004      	add	sp, #16
1000a19a:	bd70      	pop	{r4, r5, r6, pc}
1000a19c:	10019c18 	.word	0x10019c18
1000a1a0:	10019c34 	.word	0x10019c34
1000a1a4:	10019a70 	.word	0x10019a70
1000a1a8:	10019b08 	.word	0x10019b08
1000a1ac:	10019b04 	.word	0x10019b04
1000a1b0:	10019b7c 	.word	0x10019b7c
1000a1b4:	10010eb5 	.word	0x10010eb5
1000a1b8:	1001654c 	.word	0x1001654c
1000a1bc:	10014cd5 	.word	0x10014cd5
1000a1c0:	1000c05d 	.word	0x1000c05d
1000a1c4:	10019c0d 	.word	0x10019c0d
1000a1c8:	10019b02 	.word	0x10019b02
1000a1cc:	10011055 	.word	0x10011055
1000a1d0:	10019c19 	.word	0x10019c19
1000a1d4:	1000b285 	.word	0x1000b285

1000a1d8 <sms_ble_primary_service_define>:


at_ble_status_t sms_ble_primary_service_define(gatt_service_handler_t *service)
{
1000a1d8:	b510      	push	{r4, lr}
1000a1da:	b082      	sub	sp, #8
    //DBG_LOG_DEV("[sms_ble_primary_service_define]\n\r  defining primary service\r\n- uuid: 0x%02x\r\n- handle: 0x%02x\r\n- char uuid: 0x%02x%02x\r\n- char init value: %d", (unsigned int)service->serv_uuid.uuid, service->serv_handle, service->serv_chars.uuid.uuid[1], service->serv_chars.uuid.uuid[0], service->serv_chars.value_init_len);
    return(at_ble_primary_service_define(&service->serv_uuid, &service->serv_handle, NULL, 0, &service->serv_chars, 1));
1000a1dc:	0001      	movs	r1, r0
1000a1de:	3112      	adds	r1, #18
1000a1e0:	2301      	movs	r3, #1
1000a1e2:	9301      	str	r3, [sp, #4]
1000a1e4:	0003      	movs	r3, r0
1000a1e6:	3314      	adds	r3, #20
1000a1e8:	9300      	str	r3, [sp, #0]
1000a1ea:	2300      	movs	r3, #0
1000a1ec:	2200      	movs	r2, #0
1000a1ee:	4c02      	ldr	r4, [pc, #8]	; (1000a1f8 <sms_ble_primary_service_define+0x20>)
1000a1f0:	47a0      	blx	r4
}
1000a1f2:	b002      	add	sp, #8
1000a1f4:	bd10      	pop	{r4, pc}
1000a1f6:	46c0      	nop			; (mov r8, r8)
1000a1f8:	10010e95 	.word	0x10010e95

1000a1fc <sms_ble_service_init>:


void sms_ble_service_init(enum sms_ble_serv_type type, gatt_service_handler_t *service, uint8_t *value)
{
1000a1fc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a1fe:	464f      	mov	r7, r9
1000a200:	4646      	mov	r6, r8
1000a202:	b4c0      	push	{r6, r7}
1000a204:	b083      	sub	sp, #12
1000a206:	4694      	mov	ip, r2
    at_ble_handle_t handle = 0;
    uint8_t uuid[16] = {0};
    uint8_t char_size = 0;
    switch(type) {
1000a208:	2801      	cmp	r0, #1
1000a20a:	d010      	beq.n	1000a22e <sms_ble_service_init+0x32>
1000a20c:	2800      	cmp	r0, #0
1000a20e:	d002      	beq.n	1000a216 <sms_ble_service_init+0x1a>
1000a210:	2802      	cmp	r0, #2
1000a212:	d019      	beq.n	1000a248 <sms_ble_service_init+0x4c>
1000a214:	e023      	b.n	1000a25e <sms_ble_service_init+0x62>
        uuid[9] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3 >> 8) & 0xFF);
        uuid[10] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3 >> 16) & 0xFF);
        uuid[11] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3 >> 24) & 0xFF);
        uuid[12] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 16) & 0xFF);
1000a216:	24bb      	movs	r4, #187	; 0xbb
        uuid[6] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[7] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[8] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3) & 0xFF);
        uuid[9] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3 >> 8) & 0xFF);
        uuid[10] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3 >> 16) & 0xFF);
        uuid[11] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3 >> 24) & 0xFF);
1000a218:	2550      	movs	r5, #80	; 0x50
        uuid[5] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 8) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[7] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[8] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3) & 0xFF);
        uuid[9] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3 >> 8) & 0xFF);
        uuid[10] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3 >> 16) & 0xFF);
1000a21a:	2630      	movs	r6, #48	; 0x30
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 8) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[7] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
1000a21c:	275a      	movs	r7, #90	; 0x5a
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 8) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 16) & 0xFF);
1000a21e:	20be      	movs	r0, #190	; 0xbe
        case BLE_SERV_BUTTON:
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
1000a220:	231c      	movs	r3, #28
1000a222:	4698      	mov	r8, r3
    switch(type) {
        case BLE_SERV_BUTTON:
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
1000a224:	333b      	adds	r3, #59	; 0x3b
1000a226:	4699      	mov	r9, r3
        uuid[11] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3 >> 24) & 0xFF);
        uuid[12] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 24) & 0xFF);
        char_size = 1;
1000a228:	3b56      	subs	r3, #86	; 0x56
1000a22a:	9301      	str	r3, [sp, #4]
1000a22c:	e020      	b.n	1000a270 <sms_ble_service_init+0x74>
        uuid[9] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3 >> 8) & 0xFF);
        uuid[10] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3 >> 16) & 0xFF);
        uuid[11] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3 >> 24) & 0xFF);
        uuid[12] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 16) & 0xFF);
1000a22e:	24ee      	movs	r4, #238	; 0xee
        uuid[6] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[7] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[8] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3) & 0xFF);
        uuid[9] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3 >> 8) & 0xFF);
        uuid[10] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3 >> 16) & 0xFF);
        uuid[11] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3 >> 24) & 0xFF);
1000a230:	2550      	movs	r5, #80	; 0x50
        uuid[5] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 8) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[7] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[8] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3) & 0xFF);
        uuid[9] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3 >> 8) & 0xFF);
        uuid[10] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3 >> 16) & 0xFF);
1000a232:	2630      	movs	r6, #48	; 0x30
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 8) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[7] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 24) & 0xFF);
1000a234:	275a      	movs	r7, #90	; 0x5a
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 8) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 16) & 0xFF);
1000a236:	20be      	movs	r0, #190	; 0xbe
        case BLE_SERV_PRESSURE:
        handle = 2;
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
1000a238:	231c      	movs	r3, #28
1000a23a:	4698      	mov	r8, r3
        
        case BLE_SERV_PRESSURE:
        handle = 2;
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
1000a23c:	333b      	adds	r3, #59	; 0x3b
1000a23e:	4699      	mov	r9, r3
        uuid[11] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3 >> 24) & 0xFF);
        uuid[12] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 24) & 0xFF);
        char_size = 8;
1000a240:	3b4f      	subs	r3, #79	; 0x4f
1000a242:	9301      	str	r3, [sp, #4]
        uuid[15] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 24) & 0xFF);
        char_size = 1;
        break;
        
        case BLE_SERV_PRESSURE:
        handle = 2;
1000a244:	3b06      	subs	r3, #6
        uuid[12] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 24) & 0xFF);
        char_size = 8;
        break;
1000a246:	e013      	b.n	1000a270 <sms_ble_service_init+0x74>


void sms_ble_service_init(enum sms_ble_serv_type type, gatt_service_handler_t *service, uint8_t *value)
{
    at_ble_handle_t handle = 0;
    uint8_t uuid[16] = {0};
1000a248:	2400      	movs	r4, #0
1000a24a:	2500      	movs	r5, #0
1000a24c:	2600      	movs	r6, #0
1000a24e:	2700      	movs	r7, #0
1000a250:	2000      	movs	r0, #0
1000a252:	2300      	movs	r3, #0
1000a254:	4698      	mov	r8, r3
1000a256:	4699      	mov	r9, r3
    uint8_t char_size = 0;
1000a258:	9301      	str	r3, [sp, #4]
        uuid[15] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 24) & 0xFF);
        char_size = 8;
        break;
        
        case BLE_SERV_IMU:
        handle = 3;
1000a25a:	3303      	adds	r3, #3
        break;
1000a25c:	e008      	b.n	1000a270 <sms_ble_service_init+0x74>


void sms_ble_service_init(enum sms_ble_serv_type type, gatt_service_handler_t *service, uint8_t *value)
{
    at_ble_handle_t handle = 0;
    uint8_t uuid[16] = {0};
1000a25e:	2400      	movs	r4, #0
1000a260:	2500      	movs	r5, #0
1000a262:	2600      	movs	r6, #0
1000a264:	2700      	movs	r7, #0
1000a266:	2000      	movs	r0, #0
1000a268:	2300      	movs	r3, #0
1000a26a:	4698      	mov	r8, r3
1000a26c:	4699      	mov	r9, r3
    uint8_t char_size = 0;
1000a26e:	9301      	str	r3, [sp, #4]
        
        default:
        break;
    }
    //SMS button service characteristic
    service->serv_handle = handle;
1000a270:	824b      	strh	r3, [r1, #18]
    service->serv_uuid.type = AT_BLE_UUID_128;
1000a272:	2302      	movs	r3, #2
1000a274:	700b      	strb	r3, [r1, #0]
    service->serv_uuid.uuid[0] = uuid[0];
1000a276:	2300      	movs	r3, #0
1000a278:	704b      	strb	r3, [r1, #1]
    service->serv_uuid.uuid[1] = uuid[1];
1000a27a:	708b      	strb	r3, [r1, #2]
    service->serv_uuid.uuid[2] = uuid[2];
1000a27c:	464a      	mov	r2, r9
1000a27e:	70ca      	strb	r2, [r1, #3]
    service->serv_uuid.uuid[3] = uuid[3];
1000a280:	4642      	mov	r2, r8
1000a282:	710a      	strb	r2, [r1, #4]
    service->serv_uuid.uuid[4] = uuid[4];
1000a284:	714b      	strb	r3, [r1, #5]
    service->serv_uuid.uuid[5] = uuid[5];
1000a286:	718b      	strb	r3, [r1, #6]
    service->serv_uuid.uuid[6] = uuid[6];
1000a288:	71c8      	strb	r0, [r1, #7]
    service->serv_uuid.uuid[7] = uuid[7];
1000a28a:	720f      	strb	r7, [r1, #8]
    service->serv_uuid.uuid[8] = uuid[8];
1000a28c:	724b      	strb	r3, [r1, #9]
    service->serv_uuid.uuid[9] = uuid[9];
1000a28e:	728b      	strb	r3, [r1, #10]
    service->serv_uuid.uuid[10] = uuid[10];
1000a290:	72ce      	strb	r6, [r1, #11]
    service->serv_uuid.uuid[11] = uuid[11];
1000a292:	730d      	strb	r5, [r1, #12]
    service->serv_uuid.uuid[12] = uuid[12];
1000a294:	734b      	strb	r3, [r1, #13]
    service->serv_uuid.uuid[13] = uuid[13];
1000a296:	738b      	strb	r3, [r1, #14]
    service->serv_uuid.uuid[14] = uuid[14];
1000a298:	73cc      	strb	r4, [r1, #15]
    service->serv_uuid.uuid[15] = uuid[15];
1000a29a:	740c      	strb	r4, [r1, #16]
    
    #   if SMS_SENDING_WITH_ACK == true
    service->serv_chars.properties = (AT_BLE_CHAR_READ | AT_BLE_CHAR_INDICATE); // properties
1000a29c:	2422      	movs	r4, #34	; 0x22
1000a29e:	850c      	strh	r4, [r1, #40]	; 0x28
    #   else
    service->serv_chars.properties = (AT_BLE_CHAR_READ | AT_BLE_CHAR_NOTIFY); // properties
    #   endif
    service->serv_chars.init_value = value; // value
1000a2a0:	4662      	mov	r2, ip
1000a2a2:	62ca      	str	r2, [r1, #44]	; 0x2c
    service->serv_chars.value_init_len = char_size * sizeof(uint8_t);
1000a2a4:	466a      	mov	r2, sp
1000a2a6:	8892      	ldrh	r2, [r2, #4]
1000a2a8:	860a      	strh	r2, [r1, #48]	; 0x30
    service->serv_chars.value_max_len = char_size * sizeof(uint8_t);
1000a2aa:	864a      	strh	r2, [r1, #50]	; 0x32
    service->serv_chars.value_permissions = (AT_BLE_ATTR_READABLE_NO_AUTHN_NO_AUTHR | AT_BLE_ATTR_WRITABLE_NO_AUTHN_NO_AUTHR); // permissions
1000a2ac:	2011      	movs	r0, #17
1000a2ae:	2234      	movs	r2, #52	; 0x34
1000a2b0:	5488      	strb	r0, [r1, r2]
    service->serv_chars.user_desc = NULL; //user defined name
1000a2b2:	638b      	str	r3, [r1, #56]	; 0x38
    service->serv_chars.user_desc_len = 0;
1000a2b4:	2200      	movs	r2, #0
1000a2b6:	878b      	strh	r3, [r1, #60]	; 0x3c
    service->serv_chars.user_desc_max_len = 0;
1000a2b8:	87cb      	strh	r3, [r1, #62]	; 0x3e
    service->serv_chars.user_desc_permissions = AT_BLE_ATTR_NO_PERMISSIONS; // user description permissions
1000a2ba:	3033      	adds	r0, #51	; 0x33
1000a2bc:	540a      	strb	r2, [r1, r0]
    service->serv_chars.client_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS; // client config permissions
1000a2be:	3001      	adds	r0, #1
1000a2c0:	540a      	strb	r2, [r1, r0]
    service->serv_chars.server_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS; // server config permissions
1000a2c2:	3001      	adds	r0, #1
1000a2c4:	540a      	strb	r2, [r1, r0]
    service->serv_chars.user_desc_handle = 0; // user description handles
1000a2c6:	2248      	movs	r2, #72	; 0x48
1000a2c8:	528b      	strh	r3, [r1, r2]
    service->serv_chars.client_config_handle = 0; // client config handles
1000a2ca:	3202      	adds	r2, #2
1000a2cc:	528b      	strh	r3, [r1, r2]
    service->serv_chars.server_config_handle = 0; // server config handles
1000a2ce:	3202      	adds	r2, #2
1000a2d0:	528b      	strh	r3, [r1, r2]
    
    service->serv_chars.presentation_format = NULL; //presentation format
1000a2d2:	640b      	str	r3, [r1, #64]	; 0x40
1000a2d4:	b003      	add	sp, #12
1000a2d6:	bc0c      	pop	{r2, r3}
1000a2d8:	4690      	mov	r8, r2
1000a2da:	4699      	mov	r9, r3
1000a2dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a2de:	46c0      	nop			; (mov r8, r8)

1000a2e0 <sms_button_bt0_callback>:
        gpio_disable_callback(btn1_instance.gpio_pin);
    }
}
/* Callbacks --> sending interrupt message to platform */
void sms_button_bt0_callback(void)
{
1000a2e0:	b510      	push	{r4, lr}
    //gpio_disable_callback(SMS_BTN_0_PIN);
    sms_current_interrupt.source = INT_BTN0;
1000a2e2:	2201      	movs	r2, #1
1000a2e4:	4b04      	ldr	r3, [pc, #16]	; (1000a2f8 <sms_button_bt0_callback+0x18>)
1000a2e6:	701a      	strb	r2, [r3, #0]
    send_plf_int_msg_ind(btn0_instance.gpio_pin, GPIO_CALLBACK_RISING, NULL, 0);
1000a2e8:	4b04      	ldr	r3, [pc, #16]	; (1000a2fc <sms_button_bt0_callback+0x1c>)
1000a2ea:	7858      	ldrb	r0, [r3, #1]
1000a2ec:	2300      	movs	r3, #0
1000a2ee:	2200      	movs	r2, #0
1000a2f0:	2102      	movs	r1, #2
1000a2f2:	4c03      	ldr	r4, [pc, #12]	; (1000a300 <sms_button_bt0_callback+0x20>)
1000a2f4:	47a0      	blx	r4
}
1000a2f6:	bd10      	pop	{r4, pc}
1000a2f8:	10019c00 	.word	0x10019c00
1000a2fc:	10019a70 	.word	0x10019a70
1000a300:	1000f0c5 	.word	0x1000f0c5

1000a304 <sms_button_bt1_callback>:
void sms_button_bt1_callback(void)
{
1000a304:	b510      	push	{r4, lr}
    //gpio_disable_callback(SMS_BTN_1_PIN);
    sms_current_interrupt.source = INT_BTN1;
1000a306:	2202      	movs	r2, #2
1000a308:	4b04      	ldr	r3, [pc, #16]	; (1000a31c <sms_button_bt1_callback+0x18>)
1000a30a:	701a      	strb	r2, [r3, #0]
    send_plf_int_msg_ind(btn1_instance.gpio_pin, GPIO_CALLBACK_RISING, NULL, 0);
1000a30c:	4b04      	ldr	r3, [pc, #16]	; (1000a320 <sms_button_bt1_callback+0x1c>)
1000a30e:	7858      	ldrb	r0, [r3, #1]
1000a310:	2300      	movs	r3, #0
1000a312:	2200      	movs	r2, #0
1000a314:	2102      	movs	r1, #2
1000a316:	4c03      	ldr	r4, [pc, #12]	; (1000a324 <sms_button_bt1_callback+0x20>)
1000a318:	47a0      	blx	r4
}
1000a31a:	bd10      	pop	{r4, pc}
1000a31c:	10019c00 	.word	0x10019c00
1000a320:	10019b04 	.word	0x10019b04
1000a324:	1000f0c5 	.word	0x1000f0c5

1000a328 <sms_button_configure_gpio>:
/* Callback functions --> doing things                                  */
/************************************************************************/

/* Initialize gpio for button inputs */
void sms_button_configure_gpio(void)
{
1000a328:	b510      	push	{r4, lr}
1000a32a:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;

    /* Button0 @ PIN_AO_GPIO_0 */
    gpio_get_config_defaults(&config_gpio_pin);
1000a32c:	ac01      	add	r4, sp, #4
1000a32e:	0020      	movs	r0, r4
1000a330:	4b20      	ldr	r3, [pc, #128]	; (1000a3b4 <sms_button_configure_gpio+0x8c>)
1000a332:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
1000a334:	2300      	movs	r3, #0
1000a336:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
1000a338:	3302      	adds	r3, #2
1000a33a:	7063      	strb	r3, [r4, #1]
    config_gpio_pin.aon_wakeup = true;
1000a33c:	3b01      	subs	r3, #1
1000a33e:	70e3      	strb	r3, [r4, #3]
    if(gpio_pin_set_config(btn0_instance.gpio_pin, &config_gpio_pin) != STATUS_OK) {
1000a340:	4b1d      	ldr	r3, [pc, #116]	; (1000a3b8 <sms_button_configure_gpio+0x90>)
1000a342:	7858      	ldrb	r0, [r3, #1]
1000a344:	0021      	movs	r1, r4
1000a346:	4b1d      	ldr	r3, [pc, #116]	; (1000a3bc <sms_button_configure_gpio+0x94>)
1000a348:	4798      	blx	r3
1000a34a:	2800      	cmp	r0, #0
1000a34c:	d005      	beq.n	1000a35a <sms_button_configure_gpio+0x32>
        DBG_LOG_DEV("[sms_button_configure]\tproblem while setting up button0");
1000a34e:	481c      	ldr	r0, [pc, #112]	; (1000a3c0 <sms_button_configure_gpio+0x98>)
1000a350:	4b1c      	ldr	r3, [pc, #112]	; (1000a3c4 <sms_button_configure_gpio+0x9c>)
1000a352:	4798      	blx	r3
1000a354:	481c      	ldr	r0, [pc, #112]	; (1000a3c8 <sms_button_configure_gpio+0xa0>)
1000a356:	4b1d      	ldr	r3, [pc, #116]	; (1000a3cc <sms_button_configure_gpio+0xa4>)
1000a358:	4798      	blx	r3
    }
    
    /* Button1 @ PIN_AO_GPIO_2 */
    gpio_get_config_defaults(&config_gpio_pin);
1000a35a:	ac01      	add	r4, sp, #4
1000a35c:	0020      	movs	r0, r4
1000a35e:	4b15      	ldr	r3, [pc, #84]	; (1000a3b4 <sms_button_configure_gpio+0x8c>)
1000a360:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
1000a362:	2300      	movs	r3, #0
1000a364:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
1000a366:	3302      	adds	r3, #2
1000a368:	7063      	strb	r3, [r4, #1]
    config_gpio_pin.aon_wakeup = true;
1000a36a:	3b01      	subs	r3, #1
1000a36c:	70e3      	strb	r3, [r4, #3]
    if(gpio_pin_set_config(btn1_instance.gpio_pin, &config_gpio_pin) != STATUS_OK) {
1000a36e:	4b18      	ldr	r3, [pc, #96]	; (1000a3d0 <sms_button_configure_gpio+0xa8>)
1000a370:	7858      	ldrb	r0, [r3, #1]
1000a372:	0021      	movs	r1, r4
1000a374:	4b11      	ldr	r3, [pc, #68]	; (1000a3bc <sms_button_configure_gpio+0x94>)
1000a376:	4798      	blx	r3
1000a378:	2800      	cmp	r0, #0
1000a37a:	d005      	beq.n	1000a388 <sms_button_configure_gpio+0x60>
        DBG_LOG("[sms_button_configure]\tProblem while setting up button1");
1000a37c:	4810      	ldr	r0, [pc, #64]	; (1000a3c0 <sms_button_configure_gpio+0x98>)
1000a37e:	4b11      	ldr	r3, [pc, #68]	; (1000a3c4 <sms_button_configure_gpio+0x9c>)
1000a380:	4798      	blx	r3
1000a382:	4814      	ldr	r0, [pc, #80]	; (1000a3d4 <sms_button_configure_gpio+0xac>)
1000a384:	4b11      	ldr	r3, [pc, #68]	; (1000a3cc <sms_button_configure_gpio+0xa4>)
1000a386:	4798      	blx	r3
    }

    /* Button 0 on SAMB11 XPLAINED */
    gpio_get_config_defaults(&config_gpio_pin);
1000a388:	ac01      	add	r4, sp, #4
1000a38a:	0020      	movs	r0, r4
1000a38c:	4b09      	ldr	r3, [pc, #36]	; (1000a3b4 <sms_button_configure_gpio+0x8c>)
1000a38e:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
1000a390:	2300      	movs	r3, #0
1000a392:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_NONE;
1000a394:	7063      	strb	r3, [r4, #1]
    if(gpio_pin_set_config(BUTTON_0_PIN, &config_gpio_pin) != STATUS_OK) {
1000a396:	0021      	movs	r1, r4
1000a398:	2017      	movs	r0, #23
1000a39a:	4b08      	ldr	r3, [pc, #32]	; (1000a3bc <sms_button_configure_gpio+0x94>)
1000a39c:	4798      	blx	r3
1000a39e:	2800      	cmp	r0, #0
1000a3a0:	d005      	beq.n	1000a3ae <sms_button_configure_gpio+0x86>
        DBG_LOG("[sms_button_configure]\tProblem while setting up XPLAINED user button");
1000a3a2:	4807      	ldr	r0, [pc, #28]	; (1000a3c0 <sms_button_configure_gpio+0x98>)
1000a3a4:	4b07      	ldr	r3, [pc, #28]	; (1000a3c4 <sms_button_configure_gpio+0x9c>)
1000a3a6:	4798      	blx	r3
1000a3a8:	480b      	ldr	r0, [pc, #44]	; (1000a3d8 <sms_button_configure_gpio+0xb0>)
1000a3aa:	4b08      	ldr	r3, [pc, #32]	; (1000a3cc <sms_button_configure_gpio+0xa4>)
1000a3ac:	4798      	blx	r3
    }
}
1000a3ae:	b002      	add	sp, #8
1000a3b0:	bd10      	pop	{r4, pc}
1000a3b2:	46c0      	nop			; (mov r8, r8)
1000a3b4:	1000bdf5 	.word	0x1000bdf5
1000a3b8:	10019a70 	.word	0x10019a70
1000a3bc:	1000be05 	.word	0x1000be05
1000a3c0:	10015f9c 	.word	0x10015f9c
1000a3c4:	10014df5 	.word	0x10014df5
1000a3c8:	100165cc 	.word	0x100165cc
1000a3cc:	10014cd5 	.word	0x10014cd5
1000a3d0:	10019b04 	.word	0x10019b04
1000a3d4:	10016604 	.word	0x10016604
1000a3d8:	1001663c 	.word	0x1001663c

1000a3dc <sms_button_register_callbacks>:

/* Register button input callbacks */
void sms_button_register_callbacks(void)
{
1000a3dc:	b510      	push	{r4, lr}
    /* Button0 callback */
    gpio_register_callback(btn0_instance.gpio_pin, sms_button_bt0_callback, GPIO_CALLBACK_RISING);
1000a3de:	4b06      	ldr	r3, [pc, #24]	; (1000a3f8 <sms_button_register_callbacks+0x1c>)
1000a3e0:	7858      	ldrb	r0, [r3, #1]
1000a3e2:	2202      	movs	r2, #2
1000a3e4:	4905      	ldr	r1, [pc, #20]	; (1000a3fc <sms_button_register_callbacks+0x20>)
1000a3e6:	4c06      	ldr	r4, [pc, #24]	; (1000a400 <sms_button_register_callbacks+0x24>)
1000a3e8:	47a0      	blx	r4
    //gpio_enable_callback(SMS_BTN_0_PIN);
    
    /* Button1 callback */
    gpio_register_callback(btn1_instance.gpio_pin, sms_button_bt1_callback, GPIO_CALLBACK_RISING);
1000a3ea:	4b06      	ldr	r3, [pc, #24]	; (1000a404 <sms_button_register_callbacks+0x28>)
1000a3ec:	7858      	ldrb	r0, [r3, #1]
1000a3ee:	2202      	movs	r2, #2
1000a3f0:	4905      	ldr	r1, [pc, #20]	; (1000a408 <sms_button_register_callbacks+0x2c>)
1000a3f2:	47a0      	blx	r4
    //gpio_enable_callback(SMS_BTN_1_PIN);
    
    /* User button callback */
}
1000a3f4:	bd10      	pop	{r4, pc}
1000a3f6:	46c0      	nop			; (mov r8, r8)
1000a3f8:	10019a70 	.word	0x10019a70
1000a3fc:	1000a2e1 	.word	0x1000a2e1
1000a400:	1000c235 	.word	0x1000c235
1000a404:	10019b04 	.word	0x10019b04
1000a408:	1000a305 	.word	0x1000a305

1000a40c <sms_button_get_state>:
    gpio_disable_callback(SMS_BTN_1_PIN);
}

/* Get current buttons state */
enum sms_button_state sms_button_get_state(void)
{
1000a40c:	b570      	push	{r4, r5, r6, lr}
    bool b0 = gpio_pin_get_input_level(SMS_BTN_0_PIN);
1000a40e:	201f      	movs	r0, #31
1000a410:	4d0c      	ldr	r5, [pc, #48]	; (1000a444 <sms_button_get_state+0x38>)
1000a412:	47a8      	blx	r5
1000a414:	0004      	movs	r4, r0
    bool b1 = gpio_pin_get_input_level(SMS_BTN_1_PIN);
1000a416:	201d      	movs	r0, #29
1000a418:	47a8      	blx	r5
1000a41a:	0005      	movs	r5, r0
1000a41c:	0006      	movs	r6, r0
    DBG_LOG("[sms_button_get_state]\t\tButton state: %d %d", b1, b0);
1000a41e:	480a      	ldr	r0, [pc, #40]	; (1000a448 <sms_button_get_state+0x3c>)
1000a420:	4b0a      	ldr	r3, [pc, #40]	; (1000a44c <sms_button_get_state+0x40>)
1000a422:	4798      	blx	r3
1000a424:	0022      	movs	r2, r4
1000a426:	0029      	movs	r1, r5
1000a428:	4809      	ldr	r0, [pc, #36]	; (1000a450 <sms_button_get_state+0x44>)
1000a42a:	4b0a      	ldr	r3, [pc, #40]	; (1000a454 <sms_button_get_state+0x48>)
1000a42c:	4798      	blx	r3
    if(b0 && b1) return BUTTON_STATE_BOTH;
1000a42e:	2c00      	cmp	r4, #0
1000a430:	d004      	beq.n	1000a43c <sms_button_get_state+0x30>
1000a432:	2003      	movs	r0, #3
1000a434:	2d00      	cmp	r5, #0
1000a436:	d104      	bne.n	1000a442 <sms_button_get_state+0x36>
    else if(b0 && !b1) return BUTTON_STATE_B0;
1000a438:	3802      	subs	r0, #2
1000a43a:	e002      	b.n	1000a442 <sms_button_get_state+0x36>
    else if(!b0 && b1) return BUTTON_STATE_B1;
    else return BUTTON_STATE_NONE;
1000a43c:	1e70      	subs	r0, r6, #1
1000a43e:	4186      	sbcs	r6, r0
1000a440:	0070      	lsls	r0, r6, #1
}
1000a442:	bd70      	pop	{r4, r5, r6, pc}
1000a444:	1000bfbd 	.word	0x1000bfbd
1000a448:	10015f9c 	.word	0x10015f9c
1000a44c:	10014df5 	.word	0x10014df5
1000a450:	10016684 	.word	0x10016684
1000a454:	10014cd5 	.word	0x10014cd5

1000a458 <sms_button_fn>:
/************************************************************************/
/* Callback functions --> doing things                                  */
/************************************************************************/
/* BUTTON_0 */
int sms_button_fn(enum sms_btn_ids btn)
{
1000a458:	b570      	push	{r4, r5, r6, lr}
1000a45a:	0005      	movs	r5, r0
    button_instance.previous_state = button_instance.current_state;
1000a45c:	4c78      	ldr	r4, [pc, #480]	; (1000a640 <sms_button_fn+0x1e8>)
1000a45e:	7863      	ldrb	r3, [r4, #1]
1000a460:	7023      	strb	r3, [r4, #0]
    button_instance.current_state = sms_button_get_state();
1000a462:	4b78      	ldr	r3, [pc, #480]	; (1000a644 <sms_button_fn+0x1ec>)
1000a464:	4798      	blx	r3
1000a466:	7060      	strb	r0, [r4, #1]
    
    if(btn == SMS_BTN_0) sms_monitor_get_states("[sms_button_fn]-0");
1000a468:	2d00      	cmp	r5, #0
1000a46a:	d103      	bne.n	1000a474 <sms_button_fn+0x1c>
1000a46c:	4876      	ldr	r0, [pc, #472]	; (1000a648 <sms_button_fn+0x1f0>)
1000a46e:	4b77      	ldr	r3, [pc, #476]	; (1000a64c <sms_button_fn+0x1f4>)
1000a470:	4798      	blx	r3
1000a472:	e005      	b.n	1000a480 <sms_button_fn+0x28>
    else if(btn == SMS_BTN_1) sms_monitor_get_states("[sms_button_fn]-1");
1000a474:	2d01      	cmp	r5, #1
1000a476:	d000      	beq.n	1000a47a <sms_button_fn+0x22>
1000a478:	e0d4      	b.n	1000a624 <sms_button_fn+0x1cc>
1000a47a:	4875      	ldr	r0, [pc, #468]	; (1000a650 <sms_button_fn+0x1f8>)
1000a47c:	4b73      	ldr	r3, [pc, #460]	; (1000a64c <sms_button_fn+0x1f4>)
1000a47e:	4798      	blx	r3
    else return -1;
    
    switch(button_instance.current_state) {
1000a480:	4b6f      	ldr	r3, [pc, #444]	; (1000a640 <sms_button_fn+0x1e8>)
1000a482:	785b      	ldrb	r3, [r3, #1]
1000a484:	2b01      	cmp	r3, #1
1000a486:	d008      	beq.n	1000a49a <sms_button_fn+0x42>
1000a488:	2b00      	cmp	r3, #0
1000a48a:	d100      	bne.n	1000a48e <sms_button_fn+0x36>
1000a48c:	e0c5      	b.n	1000a61a <sms_button_fn+0x1c2>
1000a48e:	2b02      	cmp	r3, #2
1000a490:	d04b      	beq.n	1000a52a <sms_button_fn+0xd2>
1000a492:	2b03      	cmp	r3, #3
1000a494:	d100      	bne.n	1000a498 <sms_button_fn+0x40>
1000a496:	e08f      	b.n	1000a5b8 <sms_button_fn+0x160>
1000a498:	e0c7      	b.n	1000a62a <sms_button_fn+0x1d2>
        // --- current state ---
        case BUTTON_STATE_B0:
        switch(ble_current_state) {
1000a49a:	4b6e      	ldr	r3, [pc, #440]	; (1000a654 <sms_button_fn+0x1fc>)
1000a49c:	781b      	ldrb	r3, [r3, #0]
1000a49e:	b2db      	uxtb	r3, r3
1000a4a0:	2b00      	cmp	r3, #0
1000a4a2:	d003      	beq.n	1000a4ac <sms_button_fn+0x54>
1000a4a4:	3b22      	subs	r3, #34	; 0x22
1000a4a6:	2b01      	cmp	r3, #1
1000a4a8:	d836      	bhi.n	1000a518 <sms_button_fn+0xc0>
1000a4aa:	e00e      	b.n	1000a4ca <sms_button_fn+0x72>
            case BLE_STATE_POWEROFF:
            timer1_current_mode = TIMER1_MODE_STARTUP;
1000a4ac:	2201      	movs	r2, #1
1000a4ae:	4b6a      	ldr	r3, [pc, #424]	; (1000a658 <sms_button_fn+0x200>)
1000a4b0:	701a      	strb	r2, [r3, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
1000a4b2:	2300      	movs	r3, #0
1000a4b4:	4a69      	ldr	r2, [pc, #420]	; (1000a65c <sms_button_fn+0x204>)
1000a4b6:	7013      	strb	r3, [r2, #0]
            sms_btn_cnt = 0;
1000a4b8:	4a69      	ldr	r2, [pc, #420]	; (1000a660 <sms_button_fn+0x208>)
1000a4ba:	7013      	strb	r3, [r2, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
1000a4bc:	2200      	movs	r2, #0
1000a4be:	21fa      	movs	r1, #250	; 0xfa
1000a4c0:	2001      	movs	r0, #1
1000a4c2:	4b68      	ldr	r3, [pc, #416]	; (1000a664 <sms_button_fn+0x20c>)
1000a4c4:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a4c6:	2000      	movs	r0, #0
            timer1_current_mode = TIMER1_MODE_STARTUP;
            timer2_current_mode = TIMER2_MODE_NONE;
            sms_btn_cnt = 0;
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
            break;
1000a4c8:	e0b9      	b.n	1000a63e <sms_button_fn+0x1e6>
            
            case BLE_STATE_PAIRED:
            case BLE_STATE_INDICATING:
            if(pressure_device.state == PRESSURE_STATE_STDBY) {
1000a4ca:	2328      	movs	r3, #40	; 0x28
1000a4cc:	4a66      	ldr	r2, [pc, #408]	; (1000a668 <sms_button_fn+0x210>)
1000a4ce:	5cd3      	ldrb	r3, [r2, r3]
1000a4d0:	2b01      	cmp	r3, #1
1000a4d2:	d109      	bne.n	1000a4e8 <sms_button_fn+0x90>
                DBG_LOG_DEV("[sms_button_fn]\t\tStarting sensors (B0)");
1000a4d4:	4865      	ldr	r0, [pc, #404]	; (1000a66c <sms_button_fn+0x214>)
1000a4d6:	4b66      	ldr	r3, [pc, #408]	; (1000a670 <sms_button_fn+0x218>)
1000a4d8:	4798      	blx	r3
1000a4da:	4866      	ldr	r0, [pc, #408]	; (1000a674 <sms_button_fn+0x21c>)
1000a4dc:	4b66      	ldr	r3, [pc, #408]	; (1000a678 <sms_button_fn+0x220>)
1000a4de:	4798      	blx	r3
                sms_sensors_interrupt_toggle(false, true);
1000a4e0:	2101      	movs	r1, #1
1000a4e2:	2000      	movs	r0, #0
1000a4e4:	4b65      	ldr	r3, [pc, #404]	; (1000a67c <sms_button_fn+0x224>)
1000a4e6:	4798      	blx	r3
            }
            timer1_current_mode = TIMER1_MODE_NONE;
1000a4e8:	2300      	movs	r3, #0
1000a4ea:	4a5b      	ldr	r2, [pc, #364]	; (1000a658 <sms_button_fn+0x200>)
1000a4ec:	7013      	strb	r3, [r2, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
1000a4ee:	4a5b      	ldr	r2, [pc, #364]	; (1000a65c <sms_button_fn+0x204>)
1000a4f0:	7013      	strb	r3, [r2, #0]
            if(btn == btn0_instance.id) sms_ble_send_characteristic(BLE_CHAR_BTN0);
1000a4f2:	4b63      	ldr	r3, [pc, #396]	; (1000a680 <sms_button_fn+0x228>)
1000a4f4:	781b      	ldrb	r3, [r3, #0]
1000a4f6:	42ab      	cmp	r3, r5
1000a4f8:	d104      	bne.n	1000a504 <sms_button_fn+0xac>
1000a4fa:	2000      	movs	r0, #0
1000a4fc:	4b61      	ldr	r3, [pc, #388]	; (1000a684 <sms_button_fn+0x22c>)
1000a4fe:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a500:	2000      	movs	r0, #0
1000a502:	e09c      	b.n	1000a63e <sms_button_fn+0x1e6>
                sms_sensors_interrupt_toggle(false, true);
            }
            timer1_current_mode = TIMER1_MODE_NONE;
            timer2_current_mode = TIMER2_MODE_NONE;
            if(btn == btn0_instance.id) sms_ble_send_characteristic(BLE_CHAR_BTN0);
            else if(btn == btn1_instance.id) sms_ble_send_characteristic(BLE_CHAR_BTN1);
1000a504:	4b60      	ldr	r3, [pc, #384]	; (1000a688 <sms_button_fn+0x230>)
1000a506:	781b      	ldrb	r3, [r3, #0]
1000a508:	42ab      	cmp	r3, r5
1000a50a:	d000      	beq.n	1000a50e <sms_button_fn+0xb6>
1000a50c:	e08f      	b.n	1000a62e <sms_button_fn+0x1d6>
1000a50e:	2001      	movs	r0, #1
1000a510:	4b5c      	ldr	r3, [pc, #368]	; (1000a684 <sms_button_fn+0x22c>)
1000a512:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a514:	2000      	movs	r0, #0
1000a516:	e092      	b.n	1000a63e <sms_button_fn+0x1e6>
            
            case BLE_STATE_DISCONNECTED:
            case BLE_STATE_ADVERTISING:
            case BLE_STATE_CONNECTED:
            default:
            DBG_LOG_DEV("[sms_button_fn]\t\t\tNot used states...");
1000a518:	4854      	ldr	r0, [pc, #336]	; (1000a66c <sms_button_fn+0x214>)
1000a51a:	4b55      	ldr	r3, [pc, #340]	; (1000a670 <sms_button_fn+0x218>)
1000a51c:	4798      	blx	r3
1000a51e:	485b      	ldr	r0, [pc, #364]	; (1000a68c <sms_button_fn+0x234>)
1000a520:	4b55      	ldr	r3, [pc, #340]	; (1000a678 <sms_button_fn+0x220>)
1000a522:	4798      	blx	r3
            return -1;
1000a524:	2001      	movs	r0, #1
1000a526:	4240      	negs	r0, r0
1000a528:	e089      	b.n	1000a63e <sms_button_fn+0x1e6>
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        break;
        
        // --- current state ---
        case BUTTON_STATE_B1:
        switch(ble_current_state) {
1000a52a:	4b4a      	ldr	r3, [pc, #296]	; (1000a654 <sms_button_fn+0x1fc>)
1000a52c:	781b      	ldrb	r3, [r3, #0]
1000a52e:	b2db      	uxtb	r3, r3
1000a530:	2b22      	cmp	r3, #34	; 0x22
1000a532:	d012      	beq.n	1000a55a <sms_button_fn+0x102>
1000a534:	2b23      	cmp	r3, #35	; 0x23
1000a536:	d036      	beq.n	1000a5a6 <sms_button_fn+0x14e>
1000a538:	2b00      	cmp	r3, #0
1000a53a:	d17b      	bne.n	1000a634 <sms_button_fn+0x1dc>
            case BLE_STATE_POWEROFF:
            timer1_current_mode = TIMER1_MODE_STARTUP;
1000a53c:	2201      	movs	r2, #1
1000a53e:	4b46      	ldr	r3, [pc, #280]	; (1000a658 <sms_button_fn+0x200>)
1000a540:	701a      	strb	r2, [r3, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
1000a542:	2300      	movs	r3, #0
1000a544:	4a45      	ldr	r2, [pc, #276]	; (1000a65c <sms_button_fn+0x204>)
1000a546:	7013      	strb	r3, [r2, #0]
            sms_btn_cnt = 0;
1000a548:	4a45      	ldr	r2, [pc, #276]	; (1000a660 <sms_button_fn+0x208>)
1000a54a:	7013      	strb	r3, [r2, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
1000a54c:	2200      	movs	r2, #0
1000a54e:	21fa      	movs	r1, #250	; 0xfa
1000a550:	2001      	movs	r0, #1
1000a552:	4b44      	ldr	r3, [pc, #272]	; (1000a664 <sms_button_fn+0x20c>)
1000a554:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a556:	2000      	movs	r0, #0
            timer1_current_mode = TIMER1_MODE_STARTUP;
            timer2_current_mode = TIMER2_MODE_NONE;
            sms_btn_cnt = 0;
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
            break;
1000a558:	e071      	b.n	1000a63e <sms_button_fn+0x1e6>
            
            case BLE_STATE_PAIRED:
            if(pressure_device.state == PRESSURE_STATE_STDBY) {
1000a55a:	2328      	movs	r3, #40	; 0x28
1000a55c:	4a42      	ldr	r2, [pc, #264]	; (1000a668 <sms_button_fn+0x210>)
1000a55e:	5cd3      	ldrb	r3, [r2, r3]
1000a560:	2b01      	cmp	r3, #1
1000a562:	d109      	bne.n	1000a578 <sms_button_fn+0x120>
                DBG_LOG_DEV("[sms_button_fn]\t\tStarting sensors (B1)");
1000a564:	4841      	ldr	r0, [pc, #260]	; (1000a66c <sms_button_fn+0x214>)
1000a566:	4b42      	ldr	r3, [pc, #264]	; (1000a670 <sms_button_fn+0x218>)
1000a568:	4798      	blx	r3
1000a56a:	4849      	ldr	r0, [pc, #292]	; (1000a690 <sms_button_fn+0x238>)
1000a56c:	4b42      	ldr	r3, [pc, #264]	; (1000a678 <sms_button_fn+0x220>)
1000a56e:	4798      	blx	r3
                sms_sensors_interrupt_toggle(false, true);
1000a570:	2101      	movs	r1, #1
1000a572:	2000      	movs	r0, #0
1000a574:	4b41      	ldr	r3, [pc, #260]	; (1000a67c <sms_button_fn+0x224>)
1000a576:	4798      	blx	r3
            }
            timer1_current_mode = TIMER1_MODE_NONE;
1000a578:	2300      	movs	r3, #0
1000a57a:	4a37      	ldr	r2, [pc, #220]	; (1000a658 <sms_button_fn+0x200>)
1000a57c:	7013      	strb	r3, [r2, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
1000a57e:	4a37      	ldr	r2, [pc, #220]	; (1000a65c <sms_button_fn+0x204>)
1000a580:	7013      	strb	r3, [r2, #0]
            //sms_ble_ind_retry = 0;
            if(btn == btn0_instance.id) sms_ble_send_characteristic(BLE_CHAR_BTN0);
1000a582:	4b3f      	ldr	r3, [pc, #252]	; (1000a680 <sms_button_fn+0x228>)
1000a584:	781b      	ldrb	r3, [r3, #0]
1000a586:	42ab      	cmp	r3, r5
1000a588:	d104      	bne.n	1000a594 <sms_button_fn+0x13c>
1000a58a:	2000      	movs	r0, #0
1000a58c:	4b3d      	ldr	r3, [pc, #244]	; (1000a684 <sms_button_fn+0x22c>)
1000a58e:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a590:	2000      	movs	r0, #0
1000a592:	e054      	b.n	1000a63e <sms_button_fn+0x1e6>
            }
            timer1_current_mode = TIMER1_MODE_NONE;
            timer2_current_mode = TIMER2_MODE_NONE;
            //sms_ble_ind_retry = 0;
            if(btn == btn0_instance.id) sms_ble_send_characteristic(BLE_CHAR_BTN0);
            else if(btn == btn1_instance.id) sms_ble_send_characteristic(BLE_CHAR_BTN1);
1000a594:	4b3c      	ldr	r3, [pc, #240]	; (1000a688 <sms_button_fn+0x230>)
1000a596:	781b      	ldrb	r3, [r3, #0]
1000a598:	42ab      	cmp	r3, r5
1000a59a:	d14e      	bne.n	1000a63a <sms_button_fn+0x1e2>
1000a59c:	2001      	movs	r0, #1
1000a59e:	4b39      	ldr	r3, [pc, #228]	; (1000a684 <sms_button_fn+0x22c>)
1000a5a0:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a5a2:	2000      	movs	r0, #0
1000a5a4:	e04b      	b.n	1000a63e <sms_button_fn+0x1e6>
            else if(btn == btn1_instance.id) sms_ble_send_characteristic(BLE_CHAR_BTN1);
            else return -1;
            break;
            
            case BLE_STATE_INDICATING:
            DBG_LOG_DEV("[sms_button_fn]\tStill indicating...");
1000a5a6:	4831      	ldr	r0, [pc, #196]	; (1000a66c <sms_button_fn+0x214>)
1000a5a8:	4b31      	ldr	r3, [pc, #196]	; (1000a670 <sms_button_fn+0x218>)
1000a5aa:	4798      	blx	r3
1000a5ac:	4839      	ldr	r0, [pc, #228]	; (1000a694 <sms_button_fn+0x23c>)
1000a5ae:	4b32      	ldr	r3, [pc, #200]	; (1000a678 <sms_button_fn+0x220>)
1000a5b0:	4798      	blx	r3
            return -1;
1000a5b2:	2001      	movs	r0, #1
1000a5b4:	4240      	negs	r0, r0
1000a5b6:	e042      	b.n	1000a63e <sms_button_fn+0x1e6>
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        break;
        
        // --- current state ---
        case BUTTON_STATE_BOTH:
        if(ble_current_state == BLE_STATE_POWEROFF) {
1000a5b8:	4b26      	ldr	r3, [pc, #152]	; (1000a654 <sms_button_fn+0x1fc>)
1000a5ba:	781b      	ldrb	r3, [r3, #0]
1000a5bc:	2b00      	cmp	r3, #0
1000a5be:	d108      	bne.n	1000a5d2 <sms_button_fn+0x17a>
            timer1_current_mode = TIMER1_MODE_NONE;
1000a5c0:	4a25      	ldr	r2, [pc, #148]	; (1000a658 <sms_button_fn+0x200>)
1000a5c2:	7013      	strb	r3, [r2, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
1000a5c4:	4a25      	ldr	r2, [pc, #148]	; (1000a65c <sms_button_fn+0x204>)
1000a5c6:	7013      	strb	r3, [r2, #0]
            ulp_ready = true;
1000a5c8:	2201      	movs	r2, #1
1000a5ca:	4b33      	ldr	r3, [pc, #204]	; (1000a698 <sms_button_fn+0x240>)
1000a5cc:	701a      	strb	r2, [r3, #0]
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a5ce:	2000      	movs	r0, #0
1000a5d0:	e035      	b.n	1000a63e <sms_button_fn+0x1e6>
            ulp_ready = true;
            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
            //release_sleep_lock();
        }
        else {
            if((ble_current_state == BLE_STATE_PAIRED) || (ble_current_state == BLE_STATE_INDICATING)) {
1000a5d2:	4b20      	ldr	r3, [pc, #128]	; (1000a654 <sms_button_fn+0x1fc>)
1000a5d4:	781b      	ldrb	r3, [r3, #0]
1000a5d6:	2b22      	cmp	r3, #34	; 0x22
1000a5d8:	d003      	beq.n	1000a5e2 <sms_button_fn+0x18a>
1000a5da:	4b1e      	ldr	r3, [pc, #120]	; (1000a654 <sms_button_fn+0x1fc>)
1000a5dc:	781b      	ldrb	r3, [r3, #0]
1000a5de:	2b23      	cmp	r3, #35	; 0x23
1000a5e0:	d104      	bne.n	1000a5ec <sms_button_fn+0x194>
                pressure_device.state = PRESSURE_STATE_STDBY;
1000a5e2:	2101      	movs	r1, #1
1000a5e4:	2328      	movs	r3, #40	; 0x28
1000a5e6:	4a20      	ldr	r2, [pc, #128]	; (1000a668 <sms_button_fn+0x210>)
1000a5e8:	54d1      	strb	r1, [r2, r3]
1000a5ea:	e003      	b.n	1000a5f4 <sms_button_fn+0x19c>
            }
            else {
                pressure_device.state = PRESSURE_STATE_OFF;
1000a5ec:	2100      	movs	r1, #0
1000a5ee:	2328      	movs	r3, #40	; 0x28
1000a5f0:	4a1d      	ldr	r2, [pc, #116]	; (1000a668 <sms_button_fn+0x210>)
1000a5f2:	54d1      	strb	r1, [r2, r3]
            }
            sms_sensors_interrupt_toggle(false, false);
1000a5f4:	2100      	movs	r1, #0
1000a5f6:	2000      	movs	r0, #0
1000a5f8:	4b20      	ldr	r3, [pc, #128]	; (1000a67c <sms_button_fn+0x224>)
1000a5fa:	4798      	blx	r3
            timer1_current_mode = TIMER1_MODE_SHUTDOWN;
1000a5fc:	2203      	movs	r2, #3
1000a5fe:	4b16      	ldr	r3, [pc, #88]	; (1000a658 <sms_button_fn+0x200>)
1000a600:	701a      	strb	r2, [r3, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
1000a602:	2300      	movs	r3, #0
1000a604:	4a15      	ldr	r2, [pc, #84]	; (1000a65c <sms_button_fn+0x204>)
1000a606:	7013      	strb	r3, [r2, #0]
            sms_btn_cnt = 0;
1000a608:	4a15      	ldr	r2, [pc, #84]	; (1000a660 <sms_button_fn+0x208>)
1000a60a:	7013      	strb	r3, [r2, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_SHTDWN_MS, DUALTIMER_TIMER1);
1000a60c:	2200      	movs	r2, #0
1000a60e:	21fa      	movs	r1, #250	; 0xfa
1000a610:	2001      	movs	r0, #1
1000a612:	4b14      	ldr	r3, [pc, #80]	; (1000a664 <sms_button_fn+0x20c>)
1000a614:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a616:	2000      	movs	r0, #0
1000a618:	e011      	b.n	1000a63e <sms_button_fn+0x1e6>
        }
        break;
        
        // --- current state ---
        case BUTTON_STATE_NONE:
        ulp_ready = true;
1000a61a:	2201      	movs	r2, #1
1000a61c:	4b1e      	ldr	r3, [pc, #120]	; (1000a698 <sms_button_fn+0x240>)
1000a61e:	701a      	strb	r2, [r3, #0]
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a620:	2000      	movs	r0, #0
        // --- current state ---
        case BUTTON_STATE_NONE:
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
1000a622:	e00c      	b.n	1000a63e <sms_button_fn+0x1e6>
    button_instance.previous_state = button_instance.current_state;
    button_instance.current_state = sms_button_get_state();
    
    if(btn == SMS_BTN_0) sms_monitor_get_states("[sms_button_fn]-0");
    else if(btn == SMS_BTN_1) sms_monitor_get_states("[sms_button_fn]-1");
    else return -1;
1000a624:	2001      	movs	r0, #1
1000a626:	4240      	negs	r0, r0
1000a628:	e009      	b.n	1000a63e <sms_button_fn+0x1e6>
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a62a:	2000      	movs	r0, #0
1000a62c:	e007      	b.n	1000a63e <sms_button_fn+0x1e6>
            }
            timer1_current_mode = TIMER1_MODE_NONE;
            timer2_current_mode = TIMER2_MODE_NONE;
            if(btn == btn0_instance.id) sms_ble_send_characteristic(BLE_CHAR_BTN0);
            else if(btn == btn1_instance.id) sms_ble_send_characteristic(BLE_CHAR_BTN1);
            else return -1;
1000a62e:	2001      	movs	r0, #1
1000a630:	4240      	negs	r0, r0
1000a632:	e004      	b.n	1000a63e <sms_button_fn+0x1e6>
            
            case BLE_STATE_DISCONNECTED:
            case BLE_STATE_ADVERTISING:
            case BLE_STATE_CONNECTED:
            default:
            return -1;
1000a634:	2001      	movs	r0, #1
1000a636:	4240      	negs	r0, r0
1000a638:	e001      	b.n	1000a63e <sms_button_fn+0x1e6>
            timer1_current_mode = TIMER1_MODE_NONE;
            timer2_current_mode = TIMER2_MODE_NONE;
            //sms_ble_ind_retry = 0;
            if(btn == btn0_instance.id) sms_ble_send_characteristic(BLE_CHAR_BTN0);
            else if(btn == btn1_instance.id) sms_ble_send_characteristic(BLE_CHAR_BTN1);
            else return -1;
1000a63a:	2001      	movs	r0, #1
1000a63c:	4240      	negs	r0, r0
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
}
1000a63e:	bd70      	pop	{r4, r5, r6, pc}
1000a640:	10019b08 	.word	0x10019b08
1000a644:	1000a40d 	.word	0x1000a40d
1000a648:	100166b0 	.word	0x100166b0
1000a64c:	1000a7a1 	.word	0x1000a7a1
1000a650:	100166c4 	.word	0x100166c4
1000a654:	10019c18 	.word	0x10019c18
1000a658:	10019a74 	.word	0x10019a74
1000a65c:	10019c19 	.word	0x10019c19
1000a660:	10019c36 	.word	0x10019c36
1000a664:	1000b285 	.word	0x1000b285
1000a668:	10019b7c 	.word	0x10019b7c
1000a66c:	10015f9c 	.word	0x10015f9c
1000a670:	10014df5 	.word	0x10014df5
1000a674:	100166d8 	.word	0x100166d8
1000a678:	10014cd5 	.word	0x10014cd5
1000a67c:	1000a7fd 	.word	0x1000a7fd
1000a680:	10019a70 	.word	0x10019a70
1000a684:	1000a0bd 	.word	0x1000a0bd
1000a688:	10019b04 	.word	0x10019b04
1000a68c:	10016700 	.word	0x10016700
1000a690:	10016728 	.word	0x10016728
1000a694:	10016750 	.word	0x10016750
1000a698:	10019b01 	.word	0x10019b01

1000a69c <sms_button_toggle_interrupt>:
    else return BUTTON_STATE_NONE;
}

/* En- or disable button interrupts */
void sms_button_toggle_interrupt(enum sms_btn_int_tog tog0, enum sms_btn_int_tog tog1)
{
1000a69c:	b510      	push	{r4, lr}
1000a69e:	000c      	movs	r4, r1
    if(tog0 == SMS_BTN_INT_ENABLE) {
1000a6a0:	2800      	cmp	r0, #0
1000a6a2:	d104      	bne.n	1000a6ae <sms_button_toggle_interrupt+0x12>
        gpio_enable_callback(btn0_instance.gpio_pin);
1000a6a4:	4b0c      	ldr	r3, [pc, #48]	; (1000a6d8 <sms_button_toggle_interrupt+0x3c>)
1000a6a6:	7858      	ldrb	r0, [r3, #1]
1000a6a8:	4b0c      	ldr	r3, [pc, #48]	; (1000a6dc <sms_button_toggle_interrupt+0x40>)
1000a6aa:	4798      	blx	r3
1000a6ac:	e005      	b.n	1000a6ba <sms_button_toggle_interrupt+0x1e>
    }
    else if(tog0 == SMS_BTN_INT_DISABLE) {
1000a6ae:	2801      	cmp	r0, #1
1000a6b0:	d103      	bne.n	1000a6ba <sms_button_toggle_interrupt+0x1e>
        gpio_disable_callback(btn0_instance.gpio_pin);
1000a6b2:	4b09      	ldr	r3, [pc, #36]	; (1000a6d8 <sms_button_toggle_interrupt+0x3c>)
1000a6b4:	7858      	ldrb	r0, [r3, #1]
1000a6b6:	4b0a      	ldr	r3, [pc, #40]	; (1000a6e0 <sms_button_toggle_interrupt+0x44>)
1000a6b8:	4798      	blx	r3
    }
    
    if(tog1 == SMS_BTN_INT_ENABLE) {
1000a6ba:	2c00      	cmp	r4, #0
1000a6bc:	d104      	bne.n	1000a6c8 <sms_button_toggle_interrupt+0x2c>
        gpio_enable_callback(btn1_instance.gpio_pin);
1000a6be:	4b09      	ldr	r3, [pc, #36]	; (1000a6e4 <sms_button_toggle_interrupt+0x48>)
1000a6c0:	7858      	ldrb	r0, [r3, #1]
1000a6c2:	4b06      	ldr	r3, [pc, #24]	; (1000a6dc <sms_button_toggle_interrupt+0x40>)
1000a6c4:	4798      	blx	r3
1000a6c6:	e005      	b.n	1000a6d4 <sms_button_toggle_interrupt+0x38>
    }
    else if(tog1 == SMS_BTN_INT_DISABLE) {
1000a6c8:	2c01      	cmp	r4, #1
1000a6ca:	d103      	bne.n	1000a6d4 <sms_button_toggle_interrupt+0x38>
        gpio_disable_callback(btn1_instance.gpio_pin);
1000a6cc:	4b05      	ldr	r3, [pc, #20]	; (1000a6e4 <sms_button_toggle_interrupt+0x48>)
1000a6ce:	7858      	ldrb	r0, [r3, #1]
1000a6d0:	4b03      	ldr	r3, [pc, #12]	; (1000a6e0 <sms_button_toggle_interrupt+0x44>)
1000a6d2:	4798      	blx	r3
    }
}
1000a6d4:	bd10      	pop	{r4, pc}
1000a6d6:	46c0      	nop			; (mov r8, r8)
1000a6d8:	10019a70 	.word	0x10019a70
1000a6dc:	1000c305 	.word	0x1000c305
1000a6e0:	1000c361 	.word	0x1000c361
1000a6e4:	10019b04 	.word	0x10019b04

1000a6e8 <sms_button_define_services>:
    send_plf_int_msg_ind(btn1_instance.gpio_pin, GPIO_CALLBACK_RISING, NULL, 0);
}

/* Define BLE service for buttons */
void sms_button_define_services(void)
{
1000a6e8:	b510      	push	{r4, lr}
1000a6ea:	b082      	sub	sp, #8
    at_ble_status_t status;
    uint8_t init_value = 0;
1000a6ec:	466b      	mov	r3, sp
1000a6ee:	1dda      	adds	r2, r3, #7
1000a6f0:	2300      	movs	r3, #0
1000a6f2:	7013      	strb	r3, [r2, #0]
    sms_ble_service_init(BLE_SERV_BUTTON, &button_instance.service_handler, &init_value);
1000a6f4:	4c0d      	ldr	r4, [pc, #52]	; (1000a72c <sms_button_define_services+0x44>)
1000a6f6:	0021      	movs	r1, r4
1000a6f8:	2000      	movs	r0, #0
1000a6fa:	4b0d      	ldr	r3, [pc, #52]	; (1000a730 <sms_button_define_services+0x48>)
1000a6fc:	4798      	blx	r3
    if((status = sms_ble_primary_service_define(&button_instance.service_handler)) != AT_BLE_SUCCESS) {
1000a6fe:	0020      	movs	r0, r4
1000a700:	4b0c      	ldr	r3, [pc, #48]	; (1000a734 <sms_button_define_services+0x4c>)
1000a702:	4798      	blx	r3
1000a704:	1e04      	subs	r4, r0, #0
1000a706:	d007      	beq.n	1000a718 <sms_button_define_services+0x30>
        DBG_LOG("[sms_button_define_services]\tServices defining failed, reason 0x%x", status);
1000a708:	480b      	ldr	r0, [pc, #44]	; (1000a738 <sms_button_define_services+0x50>)
1000a70a:	4b0c      	ldr	r3, [pc, #48]	; (1000a73c <sms_button_define_services+0x54>)
1000a70c:	4798      	blx	r3
1000a70e:	0021      	movs	r1, r4
1000a710:	480b      	ldr	r0, [pc, #44]	; (1000a740 <sms_button_define_services+0x58>)
1000a712:	4b0c      	ldr	r3, [pc, #48]	; (1000a744 <sms_button_define_services+0x5c>)
1000a714:	4798      	blx	r3
1000a716:	e007      	b.n	1000a728 <sms_button_define_services+0x40>
    }
    else {
        DBG_LOG_DEV("[sms_button_define_services]\tServices defined, SMS button handle: %d", button_instance.service_handler.serv_handle);
1000a718:	4807      	ldr	r0, [pc, #28]	; (1000a738 <sms_button_define_services+0x50>)
1000a71a:	4b08      	ldr	r3, [pc, #32]	; (1000a73c <sms_button_define_services+0x54>)
1000a71c:	4798      	blx	r3
1000a71e:	4b0a      	ldr	r3, [pc, #40]	; (1000a748 <sms_button_define_services+0x60>)
1000a720:	8ad9      	ldrh	r1, [r3, #22]
1000a722:	480a      	ldr	r0, [pc, #40]	; (1000a74c <sms_button_define_services+0x64>)
1000a724:	4b07      	ldr	r3, [pc, #28]	; (1000a744 <sms_button_define_services+0x5c>)
1000a726:	4798      	blx	r3
    }
1000a728:	b002      	add	sp, #8
1000a72a:	bd10      	pop	{r4, pc}
1000a72c:	10019b0c 	.word	0x10019b0c
1000a730:	1000a1fd 	.word	0x1000a1fd
1000a734:	1000a1d9 	.word	0x1000a1d9
1000a738:	10015f9c 	.word	0x10015f9c
1000a73c:	10014df5 	.word	0x10014df5
1000a740:	10016774 	.word	0x10016774
1000a744:	10014cd5 	.word	0x10014cd5
1000a748:	10019b08 	.word	0x10019b08
1000a74c:	100167b8 	.word	0x100167b8

1000a750 <sms_monitor_configure_gpio>:

#include "sms_common.h"

/* General functions */
void sms_monitor_configure_gpio(void)
{
1000a750:	b510      	push	{r4, lr}
1000a752:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;
    gpio_get_config_defaults(&config_gpio_pin);
1000a754:	ac01      	add	r4, sp, #4
1000a756:	0020      	movs	r0, r4
1000a758:	4b0a      	ldr	r3, [pc, #40]	; (1000a784 <sms_monitor_configure_gpio+0x34>)
1000a75a:	4798      	blx	r3
    config_gpio_pin.direction  = GPIO_PIN_DIR_OUTPUT;
1000a75c:	2301      	movs	r3, #1
1000a75e:	7023      	strb	r3, [r4, #0]
    if(gpio_pin_set_config(DBG_PIN_1, &config_gpio_pin) != STATUS_OK) {
1000a760:	0021      	movs	r1, r4
1000a762:	2002      	movs	r0, #2
1000a764:	4b08      	ldr	r3, [pc, #32]	; (1000a788 <sms_monitor_configure_gpio+0x38>)
1000a766:	4798      	blx	r3
1000a768:	2800      	cmp	r0, #0
1000a76a:	d005      	beq.n	1000a778 <sms_monitor_configure_gpio+0x28>
        DBG_LOG("Problem while setting gpio pin");
1000a76c:	4807      	ldr	r0, [pc, #28]	; (1000a78c <sms_monitor_configure_gpio+0x3c>)
1000a76e:	4b08      	ldr	r3, [pc, #32]	; (1000a790 <sms_monitor_configure_gpio+0x40>)
1000a770:	4798      	blx	r3
1000a772:	4808      	ldr	r0, [pc, #32]	; (1000a794 <sms_monitor_configure_gpio+0x44>)
1000a774:	4b08      	ldr	r3, [pc, #32]	; (1000a798 <sms_monitor_configure_gpio+0x48>)
1000a776:	4798      	blx	r3
    }
    gpio_pin_set_output_level(DBG_PIN_1, DBG_PIN_LOW);
1000a778:	2100      	movs	r1, #0
1000a77a:	2002      	movs	r0, #2
1000a77c:	4b07      	ldr	r3, [pc, #28]	; (1000a79c <sms_monitor_configure_gpio+0x4c>)
1000a77e:	4798      	blx	r3
}
1000a780:	b002      	add	sp, #8
1000a782:	bd10      	pop	{r4, pc}
1000a784:	1000bdf5 	.word	0x1000bdf5
1000a788:	1000be05 	.word	0x1000be05
1000a78c:	10015f9c 	.word	0x10015f9c
1000a790:	10014df5 	.word	0x10014df5
1000a794:	10016800 	.word	0x10016800
1000a798:	10014cd5 	.word	0x10014cd5
1000a79c:	1000c05d 	.word	0x1000c05d

1000a7a0 <sms_monitor_get_states>:

void sms_monitor_get_states(const char *label)
{
1000a7a0:	b570      	push	{r4, r5, r6, lr}
1000a7a2:	b084      	sub	sp, #16
1000a7a4:	0004      	movs	r4, r0
    DBG_LOG_DEV("%s...\t\tB-prev %d, B-cur %d, BLE 0x%02x, T1 %d, T2 %d, SMS %d", label, button_instance.previous_state, button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode, sms_working_mode);
1000a7a6:	480c      	ldr	r0, [pc, #48]	; (1000a7d8 <sms_monitor_get_states+0x38>)
1000a7a8:	4b0c      	ldr	r3, [pc, #48]	; (1000a7dc <sms_monitor_get_states+0x3c>)
1000a7aa:	4798      	blx	r3
1000a7ac:	4b0c      	ldr	r3, [pc, #48]	; (1000a7e0 <sms_monitor_get_states+0x40>)
1000a7ae:	7819      	ldrb	r1, [r3, #0]
1000a7b0:	4b0c      	ldr	r3, [pc, #48]	; (1000a7e4 <sms_monitor_get_states+0x44>)
1000a7b2:	7818      	ldrb	r0, [r3, #0]
1000a7b4:	4b0c      	ldr	r3, [pc, #48]	; (1000a7e8 <sms_monitor_get_states+0x48>)
1000a7b6:	781d      	ldrb	r5, [r3, #0]
1000a7b8:	4b0c      	ldr	r3, [pc, #48]	; (1000a7ec <sms_monitor_get_states+0x4c>)
1000a7ba:	781e      	ldrb	r6, [r3, #0]
1000a7bc:	4a0c      	ldr	r2, [pc, #48]	; (1000a7f0 <sms_monitor_get_states+0x50>)
1000a7be:	7853      	ldrb	r3, [r2, #1]
1000a7c0:	7812      	ldrb	r2, [r2, #0]
1000a7c2:	9603      	str	r6, [sp, #12]
1000a7c4:	9502      	str	r5, [sp, #8]
1000a7c6:	9001      	str	r0, [sp, #4]
1000a7c8:	9100      	str	r1, [sp, #0]
1000a7ca:	0021      	movs	r1, r4
1000a7cc:	4809      	ldr	r0, [pc, #36]	; (1000a7f4 <sms_monitor_get_states+0x54>)
1000a7ce:	4c0a      	ldr	r4, [pc, #40]	; (1000a7f8 <sms_monitor_get_states+0x58>)
1000a7d0:	47a0      	blx	r4
}
1000a7d2:	b004      	add	sp, #16
1000a7d4:	bd70      	pop	{r4, r5, r6, pc}
1000a7d6:	46c0      	nop			; (mov r8, r8)
1000a7d8:	10015f9c 	.word	0x10015f9c
1000a7dc:	10014df5 	.word	0x10014df5
1000a7e0:	10019c18 	.word	0x10019c18
1000a7e4:	10019a74 	.word	0x10019a74
1000a7e8:	10019c19 	.word	0x10019c19
1000a7ec:	10019b00 	.word	0x10019b00
1000a7f0:	10019b08 	.word	0x10019b08
1000a7f4:	10016820 	.word	0x10016820
1000a7f8:	10014cd5 	.word	0x10014cd5

1000a7fc <sms_sensors_interrupt_toggle>:



/* Sensors-related functions */
void sms_sensors_interrupt_toggle(bool mpu_int, bool press_int) {
1000a7fc:	b510      	push	{r4, lr}
1000a7fe:	000c      	movs	r4, r1
    /* IMU --> IMU_DRDY */
    if(mpu_int) {
1000a800:	2800      	cmp	r0, #0
1000a802:	d007      	beq.n	1000a814 <sms_sensors_interrupt_toggle+0x18>
        mpu_device.state = MPU_STATE_ON;
1000a804:	2102      	movs	r1, #2
1000a806:	2328      	movs	r3, #40	; 0x28
1000a808:	4a15      	ldr	r2, [pc, #84]	; (1000a860 <sms_sensors_interrupt_toggle+0x64>)
1000a80a:	54d1      	strb	r1, [r2, r3]
        gpio_enable_callback(SMS_MPU_DRDY_PIN);
1000a80c:	201e      	movs	r0, #30
1000a80e:	4b15      	ldr	r3, [pc, #84]	; (1000a864 <sms_sensors_interrupt_toggle+0x68>)
1000a810:	4798      	blx	r3
1000a812:	e006      	b.n	1000a822 <sms_sensors_interrupt_toggle+0x26>
    }
    else {
        mpu_device.state = MPU_STATE_OFF;
1000a814:	2100      	movs	r1, #0
1000a816:	2328      	movs	r3, #40	; 0x28
1000a818:	4a11      	ldr	r2, [pc, #68]	; (1000a860 <sms_sensors_interrupt_toggle+0x64>)
1000a81a:	54d1      	strb	r1, [r2, r3]
        gpio_disable_callback(SMS_MPU_DRDY_PIN);
1000a81c:	201e      	movs	r0, #30
1000a81e:	4b12      	ldr	r3, [pc, #72]	; (1000a868 <sms_sensors_interrupt_toggle+0x6c>)
1000a820:	4798      	blx	r3
     * Note: Since there is no direct mechanism to simply enable and disable
     *       the AON sleep timer interruption, we have to initialize it each
     *       time (and it starts running) and register the corresponding
     *       callback (and it enables the interrupt)
     */
    if(press_int) {
1000a822:	2c00      	cmp	r4, #0
1000a824:	d010      	beq.n	1000a848 <sms_sensors_interrupt_toggle+0x4c>
        pressure_device.ms58_device.current_state = MS58_STATE_CONV_PRESSURE;
1000a826:	4b11      	ldr	r3, [pc, #68]	; (1000a86c <sms_sensors_interrupt_toggle+0x70>)
1000a828:	2103      	movs	r1, #3
1000a82a:	2225      	movs	r2, #37	; 0x25
1000a82c:	5499      	strb	r1, [r3, r2]
        pressure_device.state = PRESSURE_STATE_ON;
1000a82e:	3901      	subs	r1, #1
1000a830:	3203      	adds	r2, #3
1000a832:	5499      	strb	r1, [r3, r2]
        sms_timer_aon_init(SMS_PRESSURE_CONVERT_MS, AON_SLEEP_TIMER_RELOAD_MODE);
1000a834:	2100      	movs	r1, #0
1000a836:	480e      	ldr	r0, [pc, #56]	; (1000a870 <sms_sensors_interrupt_toggle+0x74>)
1000a838:	4b0e      	ldr	r3, [pc, #56]	; (1000a874 <sms_sensors_interrupt_toggle+0x78>)
1000a83a:	4798      	blx	r3
        sms_timer_aon_register_callback();
1000a83c:	4b0e      	ldr	r3, [pc, #56]	; (1000a878 <sms_sensors_interrupt_toggle+0x7c>)
1000a83e:	4798      	blx	r3
        sensors_active = true;
1000a840:	2201      	movs	r2, #1
1000a842:	4b0e      	ldr	r3, [pc, #56]	; (1000a87c <sms_sensors_interrupt_toggle+0x80>)
1000a844:	701a      	strb	r2, [r3, #0]
1000a846:	e00a      	b.n	1000a85e <sms_sensors_interrupt_toggle+0x62>
    }
    else {
        pressure_device.ms58_device.current_state = MS58_STATE_READY;
1000a848:	2102      	movs	r1, #2
1000a84a:	2325      	movs	r3, #37	; 0x25
1000a84c:	4a07      	ldr	r2, [pc, #28]	; (1000a86c <sms_sensors_interrupt_toggle+0x70>)
1000a84e:	54d1      	strb	r1, [r2, r3]
        sms_timer_aon_disable();
1000a850:	4b0b      	ldr	r3, [pc, #44]	; (1000a880 <sms_sensors_interrupt_toggle+0x84>)
1000a852:	4798      	blx	r3
        sms_timer_aon_unregister_callback();
1000a854:	4b0b      	ldr	r3, [pc, #44]	; (1000a884 <sms_sensors_interrupt_toggle+0x88>)
1000a856:	4798      	blx	r3
        sensors_active = false;
1000a858:	2200      	movs	r2, #0
1000a85a:	4b08      	ldr	r3, [pc, #32]	; (1000a87c <sms_sensors_interrupt_toggle+0x80>)
1000a85c:	701a      	strb	r2, [r3, #0]
    }
}
1000a85e:	bd10      	pop	{r4, pc}
1000a860:	10019a78 	.word	0x10019a78
1000a864:	1000c305 	.word	0x1000c305
1000a868:	1000c361 	.word	0x1000c361
1000a86c:	10019b7c 	.word	0x10019b7c
1000a870:	00000cc6 	.word	0x00000cc6
1000a874:	1000b1bd 	.word	0x1000b1bd
1000a878:	1000b1f1 	.word	0x1000b1f1
1000a87c:	10019c0c 	.word	0x10019c0c
1000a880:	1000b1e5 	.word	0x1000b1e5
1000a884:	1000b211 	.word	0x1000b211

1000a888 <sms_sensors_switch>:
    

void sms_sensors_switch(bool mpu_en, bool press_en)
{
1000a888:	b510      	push	{r4, lr}
1000a88a:	000c      	movs	r4, r1
    /* IMU */
    if(mpu_en) {
1000a88c:	2800      	cmp	r0, #0
1000a88e:	d001      	beq.n	1000a894 <sms_sensors_switch+0xc>
        sms_mpu_initialize();
1000a890:	4b09      	ldr	r3, [pc, #36]	; (1000a8b8 <sms_sensors_switch+0x30>)
1000a892:	4798      	blx	r3
    else {
        //gpio_pin_set_output_level(SMS_IMU_VCC_PIN, false);
    }
    
    /* Pressure */
    if(press_en) {                
1000a894:	2c00      	cmp	r4, #0
1000a896:	d009      	beq.n	1000a8ac <sms_sensors_switch+0x24>
        pressure_device.ms58_device.current_state = MS58_STATE_RESETTING;
1000a898:	4b08      	ldr	r3, [pc, #32]	; (1000a8bc <sms_sensors_switch+0x34>)
1000a89a:	2101      	movs	r1, #1
1000a89c:	2225      	movs	r2, #37	; 0x25
1000a89e:	5499      	strb	r1, [r3, r2]
        pressure_device.ms58_device.reset_done = false;
1000a8a0:	2200      	movs	r2, #0
1000a8a2:	705a      	strb	r2, [r3, #1]
        pressure_device.ms58_device.init_ok = false;
1000a8a4:	709a      	strb	r2, [r3, #2]
        sms_pressure_startup();
1000a8a6:	4b06      	ldr	r3, [pc, #24]	; (1000a8c0 <sms_sensors_switch+0x38>)
1000a8a8:	4798      	blx	r3
1000a8aa:	e003      	b.n	1000a8b4 <sms_sensors_switch+0x2c>
    }
    else {
        gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, false);
1000a8ac:	2100      	movs	r1, #0
1000a8ae:	2007      	movs	r0, #7
1000a8b0:	4b04      	ldr	r3, [pc, #16]	; (1000a8c4 <sms_sensors_switch+0x3c>)
1000a8b2:	4798      	blx	r3
    }
}
1000a8b4:	bd10      	pop	{r4, pc}
1000a8b6:	46c0      	nop			; (mov r8, r8)
1000a8b8:	1000aaed 	.word	0x1000aaed
1000a8bc:	10019b7c 	.word	0x10019b7c
1000a8c0:	1000acfd 	.word	0x1000acfd
1000a8c4:	1000c05d 	.word	0x1000c05d

1000a8c8 <sms_i2c_master_configure>:
#include <stdlib.h>
#include "sms_i2c.h"


void sms_i2c_master_configure(void)
{
1000a8c8:	b530      	push	{r4, r5, lr}
1000a8ca:	b087      	sub	sp, #28
    i2c_wpacket.data = malloc(I2C_DATA_LENGTH * sizeof(uint8_t));
1000a8cc:	2010      	movs	r0, #16
1000a8ce:	4c14      	ldr	r4, [pc, #80]	; (1000a920 <sms_i2c_master_configure+0x58>)
1000a8d0:	47a0      	blx	r4
1000a8d2:	4b14      	ldr	r3, [pc, #80]	; (1000a924 <sms_i2c_master_configure+0x5c>)
1000a8d4:	6058      	str	r0, [r3, #4]
    i2c_rpacket.data = malloc(I2C_DATA_LENGTH * sizeof(uint8_t));
1000a8d6:	2010      	movs	r0, #16
1000a8d8:	47a0      	blx	r4
1000a8da:	4b13      	ldr	r3, [pc, #76]	; (1000a928 <sms_i2c_master_configure+0x60>)
1000a8dc:	6058      	str	r0, [r3, #4]

    struct i2c_master_config config_i2c_master;
    i2c_master_get_config_defaults(&config_i2c_master);
1000a8de:	ac01      	add	r4, sp, #4
1000a8e0:	0020      	movs	r0, r4
1000a8e2:	4b12      	ldr	r3, [pc, #72]	; (1000a92c <sms_i2c_master_configure+0x64>)
1000a8e4:	4798      	blx	r3
    config_i2c_master.clock_source = SMS_I2C_MASTER_CLK_SRC;
1000a8e6:	2300      	movs	r3, #0
1000a8e8:	7023      	strb	r3, [r4, #0]
    config_i2c_master.clock_divider = SMS_I2C_MASTER_CLK_DIV;
1000a8ea:	3341      	adds	r3, #65	; 0x41
1000a8ec:	8063      	strh	r3, [r4, #2]
    config_i2c_master.pin_number_pad0 = SMS_I2C_MASTER_PIN_SDA;
1000a8ee:	3b33      	subs	r3, #51	; 0x33
1000a8f0:	6063      	str	r3, [r4, #4]
    config_i2c_master.pin_number_pad1 = SMS_I2C_MASTER_PIN_SCL;
1000a8f2:	3301      	adds	r3, #1
1000a8f4:	60e3      	str	r3, [r4, #12]
    config_i2c_master.pinmux_sel_pad0 = SMS_I2C_MASTER_MUX_SDA;
1000a8f6:	3b0b      	subs	r3, #11
1000a8f8:	60a3      	str	r3, [r4, #8]
    config_i2c_master.pinmux_sel_pad1 = SMS_I2C_MASTER_MUX_SCL;
1000a8fa:	6123      	str	r3, [r4, #16]
    while(i2c_master_init(&i2c_master_instance, SMS_I2C_MASTER_PORT, &config_i2c_master) != STATUS_OK);
1000a8fc:	4d0c      	ldr	r5, [pc, #48]	; (1000a930 <sms_i2c_master_configure+0x68>)
1000a8fe:	4c0d      	ldr	r4, [pc, #52]	; (1000a934 <sms_i2c_master_configure+0x6c>)
1000a900:	aa01      	add	r2, sp, #4
1000a902:	490d      	ldr	r1, [pc, #52]	; (1000a938 <sms_i2c_master_configure+0x70>)
1000a904:	0028      	movs	r0, r5
1000a906:	47a0      	blx	r4
1000a908:	2800      	cmp	r0, #0
1000a90a:	d1f9      	bne.n	1000a900 <sms_i2c_master_configure+0x38>

    i2c_enable(i2c_master_instance.hw);
1000a90c:	4b08      	ldr	r3, [pc, #32]	; (1000a930 <sms_i2c_master_configure+0x68>)
1000a90e:	681a      	ldr	r2, [r3, #0]
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2c *const i2c_module)
{
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
1000a910:	2128      	movs	r1, #40	; 0x28
1000a912:	5c53      	ldrb	r3, [r2, r1]
1000a914:	07db      	lsls	r3, r3, #31
1000a916:	d4fc      	bmi.n	1000a912 <sms_i2c_master_configure+0x4a>
static inline void i2c_enable(I2c *const i2c_module)
{
	/* Wait for module to sync. */
	i2c_wait_for_idle(i2c_module);
	/* Enable module. */
	i2c_module->I2C_MODULE_ENABLE.reg = (1 << I2C_MODULE_ENABLE_ENABLE_Pos);
1000a918:	2301      	movs	r3, #1
1000a91a:	7513      	strb	r3, [r2, #20]
}
1000a91c:	b007      	add	sp, #28
1000a91e:	bd30      	pop	{r4, r5, pc}
1000a920:	10014b49 	.word	0x10014b49
1000a924:	10019c20 	.word	0x10019c20
1000a928:	10019c04 	.word	0x10019c04
1000a92c:	10008369 	.word	0x10008369
1000a930:	10019c10 	.word	0x10019c10
1000a934:	10008381 	.word	0x10008381
1000a938:	40003400 	.word	0x40003400

1000a93c <sms_i2c_master_write>:

int sms_i2c_master_write(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t const *data)
{
1000a93c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    //DBG_LOG("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
1000a93e:	4c12      	ldr	r4, [pc, #72]	; (1000a988 <sms_i2c_master_write+0x4c>)
1000a940:	8020      	strh	r0, [r4, #0]
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
1000a942:	1c50      	adds	r0, r2, #1
1000a944:	b2c0      	uxtb	r0, r0
1000a946:	8060      	strh	r0, [r4, #2]
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
1000a948:	6860      	ldr	r0, [r4, #4]
1000a94a:	7001      	strb	r1, [r0, #0]
    for(uint8_t i = 0; i < data_len; i++) {
1000a94c:	2a00      	cmp	r2, #0
1000a94e:	d00e      	beq.n	1000a96e <sms_i2c_master_write+0x32>
1000a950:	2000      	movs	r0, #0
1000a952:	1c41      	adds	r1, r0, #1
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
1000a954:	5c18      	ldrb	r0, [r3, r0]
1000a956:	6865      	ldr	r5, [r4, #4]
1000a958:	5468      	strb	r0, [r5, r1]
1000a95a:	0008      	movs	r0, r1
    //DBG_LOG("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    for(uint8_t i = 0; i < data_len; i++) {
1000a95c:	b2c9      	uxtb	r1, r1
1000a95e:	428a      	cmp	r2, r1
1000a960:	d8f7      	bhi.n	1000a952 <sms_i2c_master_write+0x16>
1000a962:	e004      	b.n	1000a96e <sms_i2c_master_write+0x32>
1000a964:	3c01      	subs	r4, #1
1000a966:	b2a4      	uxth	r4, r4
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
        //DBG_LOG_CONT("0x%02x ", packet.data[i+1]);
    }
    while (i2c_master_write_packet_wait(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
        /* Increment timeout counter and check if timed out. */
        if (timeout++ >= I2C_TIMEOUT) {
1000a968:	2c00      	cmp	r4, #0
1000a96a:	d104      	bne.n	1000a976 <sms_i2c_master_write+0x3a>
1000a96c:	e009      	b.n	1000a982 <sms_i2c_master_write+0x46>
    //DBG_LOG("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    for(uint8_t i = 0; i < data_len; i++) {
1000a96e:	4c07      	ldr	r4, [pc, #28]	; (1000a98c <sms_i2c_master_write+0x50>)
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
        //DBG_LOG_CONT("0x%02x ", packet.data[i+1]);
    }
    while (i2c_master_write_packet_wait(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
1000a970:	4e05      	ldr	r6, [pc, #20]	; (1000a988 <sms_i2c_master_write+0x4c>)
1000a972:	4d07      	ldr	r5, [pc, #28]	; (1000a990 <sms_i2c_master_write+0x54>)
1000a974:	4f07      	ldr	r7, [pc, #28]	; (1000a994 <sms_i2c_master_write+0x58>)
1000a976:	0031      	movs	r1, r6
1000a978:	0028      	movs	r0, r5
1000a97a:	47b8      	blx	r7
1000a97c:	2800      	cmp	r0, #0
1000a97e:	d1f1      	bne.n	1000a964 <sms_i2c_master_write+0x28>
1000a980:	e001      	b.n	1000a986 <sms_i2c_master_write+0x4a>
        /* Increment timeout counter and check if timed out. */
        if (timeout++ >= I2C_TIMEOUT) {
            return -1;
1000a982:	2001      	movs	r0, #1
1000a984:	4240      	negs	r0, r0
        }
    }
    return 0;
}
1000a986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000a988:	10019c20 	.word	0x10019c20
1000a98c:	000003e9 	.word	0x000003e9
1000a990:	10019c10 	.word	0x10019c10
1000a994:	10008419 	.word	0x10008419

1000a998 <sms_i2c_master_read>:

int sms_i2c_master_read(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t *data)
{
1000a998:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a99a:	4647      	mov	r7, r8
1000a99c:	b480      	push	{r7}
1000a99e:	0017      	movs	r7, r2
1000a9a0:	4698      	mov	r8, r3
    //DBG_LOG("i2c reading from 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout;
    i2c_wpacket.address = (uint8_t)slave_addr;
1000a9a2:	b280      	uxth	r0, r0
1000a9a4:	4b1d      	ldr	r3, [pc, #116]	; (1000aa1c <sms_i2c_master_read+0x84>)
1000a9a6:	8018      	strh	r0, [r3, #0]
    i2c_wpacket.data_length = 1;
1000a9a8:	2201      	movs	r2, #1
1000a9aa:	805a      	strh	r2, [r3, #2]
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
1000a9ac:	685b      	ldr	r3, [r3, #4]
1000a9ae:	7019      	strb	r1, [r3, #0]
    i2c_rpacket.address = (uint8_t)slave_addr;
1000a9b0:	4b1b      	ldr	r3, [pc, #108]	; (1000aa20 <sms_i2c_master_read+0x88>)
1000a9b2:	8018      	strh	r0, [r3, #0]
    i2c_rpacket.data_length = (uint8_t)data_len;
1000a9b4:	805f      	strh	r7, [r3, #2]
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
1000a9b6:	4c1b      	ldr	r4, [pc, #108]	; (1000aa24 <sms_i2c_master_read+0x8c>)
1000a9b8:	4e18      	ldr	r6, [pc, #96]	; (1000aa1c <sms_i2c_master_read+0x84>)
1000a9ba:	4d1b      	ldr	r5, [pc, #108]	; (1000aa28 <sms_i2c_master_read+0x90>)
1000a9bc:	e003      	b.n	1000a9c6 <sms_i2c_master_read+0x2e>
1000a9be:	3c01      	subs	r4, #1
1000a9c0:	b2a4      	uxth	r4, r4
        if(timeout++ >= I2C_TIMEOUT) {
1000a9c2:	2c00      	cmp	r4, #0
1000a9c4:	d01f      	beq.n	1000aa06 <sms_i2c_master_read+0x6e>
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    i2c_rpacket.address = (uint8_t)slave_addr;
    i2c_rpacket.data_length = (uint8_t)data_len;
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
1000a9c6:	0031      	movs	r1, r6
1000a9c8:	4818      	ldr	r0, [pc, #96]	; (1000aa2c <sms_i2c_master_read+0x94>)
1000a9ca:	47a8      	blx	r5
1000a9cc:	2800      	cmp	r0, #0
1000a9ce:	d1f6      	bne.n	1000a9be <sms_i2c_master_read+0x26>
1000a9d0:	4e14      	ldr	r6, [pc, #80]	; (1000aa24 <sms_i2c_master_read+0x8c>)
            return -1;
        }
    }
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
1000a9d2:	4d13      	ldr	r5, [pc, #76]	; (1000aa20 <sms_i2c_master_read+0x88>)
1000a9d4:	4c16      	ldr	r4, [pc, #88]	; (1000aa30 <sms_i2c_master_read+0x98>)
1000a9d6:	e003      	b.n	1000a9e0 <sms_i2c_master_read+0x48>
1000a9d8:	3e01      	subs	r6, #1
1000a9da:	b2b6      	uxth	r6, r6
        if(timeout++ >= I2C_TIMEOUT) {
1000a9dc:	2e00      	cmp	r6, #0
1000a9de:	d015      	beq.n	1000aa0c <sms_i2c_master_read+0x74>
            return -1;
        }
    }
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
1000a9e0:	0029      	movs	r1, r5
1000a9e2:	4812      	ldr	r0, [pc, #72]	; (1000aa2c <sms_i2c_master_read+0x94>)
1000a9e4:	47a0      	blx	r4
1000a9e6:	2800      	cmp	r0, #0
1000a9e8:	d1f6      	bne.n	1000a9d8 <sms_i2c_master_read+0x40>
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
        }
    }
    for(uint8_t i = 0; i < data_len; i++) {
1000a9ea:	2f00      	cmp	r7, #0
1000a9ec:	d011      	beq.n	1000aa12 <sms_i2c_master_read+0x7a>
1000a9ee:	2300      	movs	r3, #0
        data[i] = i2c_rpacket.data[i];
1000a9f0:	490b      	ldr	r1, [pc, #44]	; (1000aa20 <sms_i2c_master_read+0x88>)
1000a9f2:	684a      	ldr	r2, [r1, #4]
1000a9f4:	5cd2      	ldrb	r2, [r2, r3]
1000a9f6:	4640      	mov	r0, r8
1000a9f8:	54c2      	strb	r2, [r0, r3]
1000a9fa:	3301      	adds	r3, #1
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
        }
    }
    for(uint8_t i = 0; i < data_len; i++) {
1000a9fc:	b2da      	uxtb	r2, r3
1000a9fe:	4297      	cmp	r7, r2
1000aa00:	d8f7      	bhi.n	1000a9f2 <sms_i2c_master_read+0x5a>
        data[i] = i2c_rpacket.data[i];
        //DBG_LOG("0x%02x ", data[i]);
    }
    return 0;
1000aa02:	2000      	movs	r0, #0
1000aa04:	e006      	b.n	1000aa14 <sms_i2c_master_read+0x7c>
    i2c_rpacket.data_length = (uint8_t)data_len;
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
1000aa06:	2001      	movs	r0, #1
1000aa08:	4240      	negs	r0, r0
1000aa0a:	e003      	b.n	1000aa14 <sms_i2c_master_read+0x7c>
    }
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
1000aa0c:	2001      	movs	r0, #1
1000aa0e:	4240      	negs	r0, r0
1000aa10:	e000      	b.n	1000aa14 <sms_i2c_master_read+0x7c>
    }
    for(uint8_t i = 0; i < data_len; i++) {
        data[i] = i2c_rpacket.data[i];
        //DBG_LOG("0x%02x ", data[i]);
    }
    return 0;
1000aa12:	2000      	movs	r0, #0
1000aa14:	bc04      	pop	{r2}
1000aa16:	4690      	mov	r8, r2
1000aa18:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000aa1a:	46c0      	nop			; (mov r8, r8)
1000aa1c:	10019c20 	.word	0x10019c20
1000aa20:	10019c04 	.word	0x10019c04
1000aa24:	000003e9 	.word	0x000003e9
1000aa28:	1000843d 	.word	0x1000843d
1000aa2c:	10019c10 	.word	0x10019c10
1000aa30:	100083f5 	.word	0x100083f5

1000aa34 <sms_mpu_interrupt_callback>:
    gpio_unregister_callback(SMS_MPU_DRDY_PIN, GPIO_CALLBACK_RISING);
}

/* Callback --> send interrupt message to platform */
void sms_mpu_interrupt_callback(void)
{
1000aa34:	b510      	push	{r4, lr}
    sms_current_interrupt.source = INT_MPU_DRDY;
1000aa36:	2203      	movs	r2, #3
1000aa38:	4b04      	ldr	r3, [pc, #16]	; (1000aa4c <sms_mpu_interrupt_callback+0x18>)
1000aa3a:	701a      	strb	r2, [r3, #0]
    send_plf_int_msg_ind(SMS_MPU_DRDY_PIN, GPIO_CALLBACK_RISING, NULL, 0);
1000aa3c:	2300      	movs	r3, #0
1000aa3e:	2200      	movs	r2, #0
1000aa40:	2102      	movs	r1, #2
1000aa42:	201e      	movs	r0, #30
1000aa44:	4c02      	ldr	r4, [pc, #8]	; (1000aa50 <sms_mpu_interrupt_callback+0x1c>)
1000aa46:	47a0      	blx	r4
}
1000aa48:	bd10      	pop	{r4, pc}
1000aa4a:	46c0      	nop			; (mov r8, r8)
1000aa4c:	10019c00 	.word	0x10019c00
1000aa50:	1000f0c5 	.word	0x1000f0c5

1000aa54 <sms_mpu_configure_gpio>:
#include "sms_peripheral1.h"

//static struct hal_s hal = {0};
    
void sms_mpu_configure_gpio(void)
{
1000aa54:	b510      	push	{r4, lr}
1000aa56:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;

    /* Data ready interrupt from IMU */
    gpio_get_config_defaults(&config_gpio_pin);
1000aa58:	ac01      	add	r4, sp, #4
1000aa5a:	0020      	movs	r0, r4
1000aa5c:	4b15      	ldr	r3, [pc, #84]	; (1000aab4 <sms_mpu_configure_gpio+0x60>)
1000aa5e:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
1000aa60:	2300      	movs	r3, #0
1000aa62:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
1000aa64:	3302      	adds	r3, #2
1000aa66:	7063      	strb	r3, [r4, #1]
    config_gpio_pin.aon_wakeup = true;
1000aa68:	3b01      	subs	r3, #1
1000aa6a:	70e3      	strb	r3, [r4, #3]
    if(gpio_pin_set_config(SMS_MPU_DRDY_PIN, &config_gpio_pin) != STATUS_OK) {
1000aa6c:	0021      	movs	r1, r4
1000aa6e:	201e      	movs	r0, #30
1000aa70:	4b11      	ldr	r3, [pc, #68]	; (1000aab8 <sms_mpu_configure_gpio+0x64>)
1000aa72:	4798      	blx	r3
1000aa74:	2800      	cmp	r0, #0
1000aa76:	d005      	beq.n	1000aa84 <sms_mpu_configure_gpio+0x30>
        DBG_LOG("[sms_imu_configure_gpio]\tProblem while setting up IMU DRDY pin");
1000aa78:	4810      	ldr	r0, [pc, #64]	; (1000aabc <sms_mpu_configure_gpio+0x68>)
1000aa7a:	4b11      	ldr	r3, [pc, #68]	; (1000aac0 <sms_mpu_configure_gpio+0x6c>)
1000aa7c:	4798      	blx	r3
1000aa7e:	4811      	ldr	r0, [pc, #68]	; (1000aac4 <sms_mpu_configure_gpio+0x70>)
1000aa80:	4b11      	ldr	r3, [pc, #68]	; (1000aac8 <sms_mpu_configure_gpio+0x74>)
1000aa82:	4798      	blx	r3
    }

    /* Pin output to supply IMU */
    gpio_get_config_defaults(&config_gpio_pin);
1000aa84:	ac01      	add	r4, sp, #4
1000aa86:	0020      	movs	r0, r4
1000aa88:	4b0a      	ldr	r3, [pc, #40]	; (1000aab4 <sms_mpu_configure_gpio+0x60>)
1000aa8a:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_OUTPUT;
1000aa8c:	2301      	movs	r3, #1
1000aa8e:	7023      	strb	r3, [r4, #0]
    if(!gpio_pin_set_config(SMS_MPU_VCC_PIN, &config_gpio_pin) != STATUS_OK) {
1000aa90:	0021      	movs	r1, r4
1000aa92:	2006      	movs	r0, #6
1000aa94:	4b08      	ldr	r3, [pc, #32]	; (1000aab8 <sms_mpu_configure_gpio+0x64>)
1000aa96:	4798      	blx	r3
1000aa98:	2800      	cmp	r0, #0
1000aa9a:	d105      	bne.n	1000aaa8 <sms_mpu_configure_gpio+0x54>
        DBG_LOG("[sms_imu_configure_gpio]\tProblem while setting up IMU VCC pin");
1000aa9c:	4807      	ldr	r0, [pc, #28]	; (1000aabc <sms_mpu_configure_gpio+0x68>)
1000aa9e:	4b08      	ldr	r3, [pc, #32]	; (1000aac0 <sms_mpu_configure_gpio+0x6c>)
1000aaa0:	4798      	blx	r3
1000aaa2:	480a      	ldr	r0, [pc, #40]	; (1000aacc <sms_mpu_configure_gpio+0x78>)
1000aaa4:	4b08      	ldr	r3, [pc, #32]	; (1000aac8 <sms_mpu_configure_gpio+0x74>)
1000aaa6:	4798      	blx	r3
    }
    gpio_pin_set_output_level(SMS_MPU_VCC_PIN, true);
1000aaa8:	2101      	movs	r1, #1
1000aaaa:	2006      	movs	r0, #6
1000aaac:	4b08      	ldr	r3, [pc, #32]	; (1000aad0 <sms_mpu_configure_gpio+0x7c>)
1000aaae:	4798      	blx	r3
}
1000aab0:	b002      	add	sp, #8
1000aab2:	bd10      	pop	{r4, pc}
1000aab4:	1000bdf5 	.word	0x1000bdf5
1000aab8:	1000be05 	.word	0x1000be05
1000aabc:	10015f9c 	.word	0x10015f9c
1000aac0:	10014df5 	.word	0x10014df5
1000aac4:	10016860 	.word	0x10016860
1000aac8:	10014cd5 	.word	0x10014cd5
1000aacc:	100168a0 	.word	0x100168a0
1000aad0:	1000c05d 	.word	0x1000c05d

1000aad4 <sms_mpu_register_callbacks>:

/* Register GPIO interrupt callback */
void sms_mpu_register_callbacks(void)
{
1000aad4:	b510      	push	{r4, lr}
    /* MPU-9250 interrupt callback */
    gpio_register_callback(SMS_MPU_DRDY_PIN, sms_mpu_interrupt_callback, GPIO_CALLBACK_RISING);
1000aad6:	2202      	movs	r2, #2
1000aad8:	4902      	ldr	r1, [pc, #8]	; (1000aae4 <sms_mpu_register_callbacks+0x10>)
1000aada:	201e      	movs	r0, #30
1000aadc:	4b02      	ldr	r3, [pc, #8]	; (1000aae8 <sms_mpu_register_callbacks+0x14>)
1000aade:	4798      	blx	r3
}
1000aae0:	bd10      	pop	{r4, pc}
1000aae2:	46c0      	nop			; (mov r8, r8)
1000aae4:	1000aa35 	.word	0x1000aa35
1000aae8:	1000c235 	.word	0x1000c235

1000aaec <sms_mpu_initialize>:
{
    sms_current_interrupt.source = INT_MPU_DRDY;
    send_plf_int_msg_ind(SMS_MPU_DRDY_PIN, GPIO_CALLBACK_RISING, NULL, 0);
}

int sms_mpu_initialize(void) {
1000aaec:	b570      	push	{r4, r5, r6, lr}
    int res;
    //unsigned char accel_fsr = 0;
    //unsigned short gyro_rate, gyro_fsr, compass_fsr;
    
    /* Initialize MPU-9250 without interrupt parameter since this has to be set independently */
    DBG_LOG_DEV("Initializing MPU...");
1000aaee:	4820      	ldr	r0, [pc, #128]	; (1000ab70 <sms_mpu_initialize+0x84>)
1000aaf0:	4b20      	ldr	r3, [pc, #128]	; (1000ab74 <sms_mpu_initialize+0x88>)
1000aaf2:	4798      	blx	r3
1000aaf4:	4820      	ldr	r0, [pc, #128]	; (1000ab78 <sms_mpu_initialize+0x8c>)
1000aaf6:	4b21      	ldr	r3, [pc, #132]	; (1000ab7c <sms_mpu_initialize+0x90>)
1000aaf8:	4798      	blx	r3
    res = mpu_init(NULL);
1000aafa:	2000      	movs	r0, #0
1000aafc:	4b20      	ldr	r3, [pc, #128]	; (1000ab80 <sms_mpu_initialize+0x94>)
1000aafe:	4798      	blx	r3
    if(res) {
1000ab00:	2800      	cmp	r0, #0
1000ab02:	d005      	beq.n	1000ab10 <sms_mpu_initialize+0x24>
        DBG_LOG_CONT_DEV(" failed!");
1000ab04:	481f      	ldr	r0, [pc, #124]	; (1000ab84 <sms_mpu_initialize+0x98>)
1000ab06:	4b1d      	ldr	r3, [pc, #116]	; (1000ab7c <sms_mpu_initialize+0x90>)
1000ab08:	4798      	blx	r3
        return -1;
1000ab0a:	2001      	movs	r0, #1
1000ab0c:	4240      	negs	r0, r0
1000ab0e:	e02e      	b.n	1000ab6e <sms_mpu_initialize+0x82>
    }
    DBG_LOG_DEV("Setting up MPU...");
1000ab10:	4817      	ldr	r0, [pc, #92]	; (1000ab70 <sms_mpu_initialize+0x84>)
1000ab12:	4b18      	ldr	r3, [pc, #96]	; (1000ab74 <sms_mpu_initialize+0x88>)
1000ab14:	4798      	blx	r3
1000ab16:	481c      	ldr	r0, [pc, #112]	; (1000ab88 <sms_mpu_initialize+0x9c>)
1000ab18:	4b18      	ldr	r3, [pc, #96]	; (1000ab7c <sms_mpu_initialize+0x90>)
1000ab1a:	4798      	blx	r3
    mpu_set_sensors(INV_XYZ_GYRO | INV_XYZ_ACCEL | INV_XYZ_COMPASS);
1000ab1c:	2079      	movs	r0, #121	; 0x79
1000ab1e:	4b1b      	ldr	r3, [pc, #108]	; (1000ab8c <sms_mpu_initialize+0xa0>)
1000ab20:	4798      	blx	r3
    mpu_configure_fifo(INV_XYZ_GYRO | INV_XYZ_ACCEL);
1000ab22:	2078      	movs	r0, #120	; 0x78
1000ab24:	4b1a      	ldr	r3, [pc, #104]	; (1000ab90 <sms_mpu_initialize+0xa4>)
1000ab26:	4798      	blx	r3
    mpu_set_sample_rate(SMS_MPU_SAMPLE_RATE_HZ);
1000ab28:	200a      	movs	r0, #10
1000ab2a:	4b1a      	ldr	r3, [pc, #104]	; (1000ab94 <sms_mpu_initialize+0xa8>)
1000ab2c:	4798      	blx	r3
    mpu_set_compass_sample_rate(SMS_MPU_COMPASS_RATE_HZ);
1000ab2e:	2001      	movs	r0, #1
1000ab30:	4b19      	ldr	r3, [pc, #100]	; (1000ab98 <sms_mpu_initialize+0xac>)
1000ab32:	4798      	blx	r3
    mpu_get_sample_rate(&mpu_device.hal.sample_rate);
1000ab34:	4c19      	ldr	r4, [pc, #100]	; (1000ab9c <sms_mpu_initialize+0xb0>)
1000ab36:	0020      	movs	r0, r4
1000ab38:	4b19      	ldr	r3, [pc, #100]	; (1000aba0 <sms_mpu_initialize+0xb4>)
1000ab3a:	4798      	blx	r3
    mpu_get_accel_fsr(&mpu_device.hal.accel_fsr);
1000ab3c:	1f60      	subs	r0, r4, #5
1000ab3e:	4b19      	ldr	r3, [pc, #100]	; (1000aba4 <sms_mpu_initialize+0xb8>)
1000ab40:	4798      	blx	r3
    mpu_get_compass_fsr(&mpu_device.hal.compass_fsr);
1000ab42:	1ea0      	subs	r0, r4, #2
1000ab44:	4b18      	ldr	r3, [pc, #96]	; (1000aba8 <sms_mpu_initialize+0xbc>)
1000ab46:	4798      	blx	r3
    
    mpu_device.hal.sensors = (SMS_MPU_ACCEL_ON | SMS_MPU_GYRO_ON | SMS_MPU_COMPASS_ON);
1000ab48:	0025      	movs	r5, r4
1000ab4a:	2307      	movs	r3, #7
1000ab4c:	7663      	strb	r3, [r4, #25]
    mpu_device.hal.dmp_features = (DMP_FEATURE_GYRO_CAL | DMP_FEATURE_SEND_RAW_ACCEL | DMP_FEATURE_SEND_ANY_GYRO);
1000ab4e:	20f0      	movs	r0, #240	; 0xf0
1000ab50:	0040      	lsls	r0, r0, #1
1000ab52:	83a0      	strh	r0, [r4, #28]
    mpu_set_compass_sample_rate(SMS_MPU_COMPASS_RATE_HZ);
    mpu_get_sample_rate(&mpu_device.hal.sample_rate);
    mpu_get_accel_fsr(&mpu_device.hal.accel_fsr);
    mpu_get_compass_fsr(&mpu_device.hal.compass_fsr);
    
    mpu_device.hal.sensors = (SMS_MPU_ACCEL_ON | SMS_MPU_GYRO_ON | SMS_MPU_COMPASS_ON);
1000ab54:	3d08      	subs	r5, #8
    mpu_device.hal.dmp_features = (DMP_FEATURE_GYRO_CAL | DMP_FEATURE_SEND_RAW_ACCEL | DMP_FEATURE_SEND_ANY_GYRO);
    dmp_enable_feature(mpu_device.hal.dmp_features);
1000ab56:	4b15      	ldr	r3, [pc, #84]	; (1000abac <sms_mpu_initialize+0xc0>)
1000ab58:	4798      	blx	r3
    dmp_set_fifo_rate(SMS_MPU_SAMPLE_RATE_HZ);
1000ab5a:	200a      	movs	r0, #10
1000ab5c:	4b14      	ldr	r3, [pc, #80]	; (1000abb0 <sms_mpu_initialize+0xc4>)
1000ab5e:	4798      	blx	r3
    mpu_set_dmp_state(1);
1000ab60:	2001      	movs	r0, #1
1000ab62:	4b14      	ldr	r3, [pc, #80]	; (1000abb4 <sms_mpu_initialize+0xc8>)
1000ab64:	4798      	blx	r3
    mpu_device.hal.dmp_on = 1;
1000ab66:	2201      	movs	r2, #1
1000ab68:	2322      	movs	r3, #34	; 0x22
1000ab6a:	54ea      	strb	r2, [r5, r3]
    
    return 0;
1000ab6c:	2000      	movs	r0, #0
}
1000ab6e:	bd70      	pop	{r4, r5, r6, pc}
1000ab70:	10015f9c 	.word	0x10015f9c
1000ab74:	10014df5 	.word	0x10014df5
1000ab78:	100168e0 	.word	0x100168e0
1000ab7c:	10014cd5 	.word	0x10014cd5
1000ab80:	100091f9 	.word	0x100091f9
1000ab84:	100168f4 	.word	0x100168f4
1000ab88:	10016900 	.word	0x10016900
1000ab8c:	10009011 	.word	0x10009011
1000ab90:	100089cd 	.word	0x100089cd
1000ab94:	10008f3d 	.word	0x10008f3d
1000ab98:	10008955 	.word	0x10008955
1000ab9c:	10019a80 	.word	0x10019a80
1000aba0:	10008939 	.word	0x10008939
1000aba4:	1000879d 	.word	0x1000879d
1000aba8:	10009645 	.word	0x10009645
1000abac:	10009ab5 	.word	0x10009ab5
1000abb0:	10009655 	.word	0x10009655
1000abb4:	100095a1 	.word	0x100095a1

1000abb8 <sms_mpu_poll_data>:

/* Extract available IMU data */
int sms_mpu_poll_data(void)
{
1000abb8:	b530      	push	{r4, r5, lr}
1000abba:	b085      	sub	sp, #20
    //st.chip_cfg.dmp_on = 1;
    short sensors;
    unsigned char more;
    unsigned long sensor_timestamp;
    int res;
    mpu_read_fifo(mpu_device.hal.gyro, mpu_device.hal.accel, &sensor_timestamp, &sensors, &more);
1000abbc:	4909      	ldr	r1, [pc, #36]	; (1000abe4 <sms_mpu_poll_data+0x2c>)
1000abbe:	1f88      	subs	r0, r1, #6
1000abc0:	240d      	movs	r4, #13
1000abc2:	446c      	add	r4, sp
1000abc4:	9400      	str	r4, [sp, #0]
1000abc6:	230e      	movs	r3, #14
1000abc8:	446b      	add	r3, sp
1000abca:	aa02      	add	r2, sp, #8
1000abcc:	4d06      	ldr	r5, [pc, #24]	; (1000abe8 <sms_mpu_poll_data+0x30>)
1000abce:	47a8      	blx	r5
    
    if(more) {
1000abd0:	7823      	ldrb	r3, [r4, #0]
1000abd2:	2b00      	cmp	r3, #0
1000abd4:	d003      	beq.n	1000abde <sms_mpu_poll_data+0x26>
        mpu_device.hal.new_data = 1;
1000abd6:	2101      	movs	r1, #1
1000abd8:	2320      	movs	r3, #32
1000abda:	4a04      	ldr	r2, [pc, #16]	; (1000abec <sms_mpu_poll_data+0x34>)
1000abdc:	54d1      	strb	r1, [r2, r3]
    //}
    //gpio_enable_callback(SMS_IMU_INTERRUPT_PIN);


    return 0;
}
1000abde:	2000      	movs	r0, #0
1000abe0:	b005      	add	sp, #20
1000abe2:	bd30      	pop	{r4, r5, pc}
1000abe4:	10019a88 	.word	0x10019a88
1000abe8:	10008a39 	.word	0x10008a39
1000abec:	10019a78 	.word	0x10019a78

1000abf0 <sms_led_switch_on>:
    sms_led_switch_off(SMS_LED_0_PIN);
}


void sms_led_switch_on(enum sms_leds led)
{
1000abf0:	b510      	push	{r4, lr}
    gpio_pin_set_output_level(led, SMS_LED_ACTIVE);
1000abf2:	2100      	movs	r1, #0
1000abf4:	4b01      	ldr	r3, [pc, #4]	; (1000abfc <sms_led_switch_on+0xc>)
1000abf6:	4798      	blx	r3
}
1000abf8:	bd10      	pop	{r4, pc}
1000abfa:	46c0      	nop			; (mov r8, r8)
1000abfc:	1000c05d 	.word	0x1000c05d

1000ac00 <sms_led_switch_off>:


void sms_led_switch_off(enum sms_leds led)
{
1000ac00:	b510      	push	{r4, lr}
    gpio_pin_set_output_level(led, SMS_LED_INACTIVE);
1000ac02:	2101      	movs	r1, #1
1000ac04:	4b01      	ldr	r3, [pc, #4]	; (1000ac0c <sms_led_switch_off+0xc>)
1000ac06:	4798      	blx	r3
}
1000ac08:	bd10      	pop	{r4, pc}
1000ac0a:	46c0      	nop			; (mov r8, r8)
1000ac0c:	1000c05d 	.word	0x1000c05d

1000ac10 <sms_led_gpio_init>:
 */ 

#include "sms_led.h"

void sms_led_gpio_init(void)
{
1000ac10:	b510      	push	{r4, lr}
1000ac12:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;

    /* LED0 @ GPIO_LP_GPIO_22 */
    gpio_get_config_defaults(&config_gpio_pin);
1000ac14:	ac01      	add	r4, sp, #4
1000ac16:	0020      	movs	r0, r4
1000ac18:	4b0a      	ldr	r3, [pc, #40]	; (1000ac44 <sms_led_gpio_init+0x34>)
1000ac1a:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_OUTPUT;
1000ac1c:	2301      	movs	r3, #1
1000ac1e:	7023      	strb	r3, [r4, #0]
    if(gpio_pin_set_config(SMS_LED_0_PIN, &config_gpio_pin) != STATUS_OK) {
1000ac20:	0021      	movs	r1, r4
1000ac22:	2016      	movs	r0, #22
1000ac24:	4b08      	ldr	r3, [pc, #32]	; (1000ac48 <sms_led_gpio_init+0x38>)
1000ac26:	4798      	blx	r3
1000ac28:	2800      	cmp	r0, #0
1000ac2a:	d005      	beq.n	1000ac38 <sms_led_gpio_init+0x28>
        DBG_LOG_DEV("[sms_led_gpio_init]\tproblem while setting up led0");
1000ac2c:	4807      	ldr	r0, [pc, #28]	; (1000ac4c <sms_led_gpio_init+0x3c>)
1000ac2e:	4b08      	ldr	r3, [pc, #32]	; (1000ac50 <sms_led_gpio_init+0x40>)
1000ac30:	4798      	blx	r3
1000ac32:	4808      	ldr	r0, [pc, #32]	; (1000ac54 <sms_led_gpio_init+0x44>)
1000ac34:	4b08      	ldr	r3, [pc, #32]	; (1000ac58 <sms_led_gpio_init+0x48>)
1000ac36:	4798      	blx	r3
    }
    sms_led_switch_off(SMS_LED_0_PIN);
1000ac38:	2016      	movs	r0, #22
1000ac3a:	4b08      	ldr	r3, [pc, #32]	; (1000ac5c <sms_led_gpio_init+0x4c>)
1000ac3c:	4798      	blx	r3
}
1000ac3e:	b002      	add	sp, #8
1000ac40:	bd10      	pop	{r4, pc}
1000ac42:	46c0      	nop			; (mov r8, r8)
1000ac44:	1000bdf5 	.word	0x1000bdf5
1000ac48:	1000be05 	.word	0x1000be05
1000ac4c:	10015f9c 	.word	0x10015f9c
1000ac50:	10014df5 	.word	0x10014df5
1000ac54:	10016914 	.word	0x10016914
1000ac58:	10014cd5 	.word	0x10014cd5
1000ac5c:	1000ac01 	.word	0x1000ac01

1000ac60 <sms_led_toggle>:
    gpio_pin_set_output_level(led, SMS_LED_INACTIVE);
}


void sms_led_toggle(enum sms_leds led)
{
1000ac60:	b510      	push	{r4, lr}
1000ac62:	0004      	movs	r4, r0
}


bool sms_led_get_state(enum sms_leds led)
{
    return gpio_pin_get_output_level(led);
1000ac64:	4b05      	ldr	r3, [pc, #20]	; (1000ac7c <sms_led_toggle+0x1c>)
1000ac66:	4798      	blx	r3


void sms_led_toggle(enum sms_leds led)
{
    bool state = sms_led_get_state(led);
    if(state == SMS_LED_ACTIVE) sms_led_switch_off(led);
1000ac68:	2800      	cmp	r0, #0
1000ac6a:	d103      	bne.n	1000ac74 <sms_led_toggle+0x14>
1000ac6c:	0020      	movs	r0, r4
1000ac6e:	4b04      	ldr	r3, [pc, #16]	; (1000ac80 <sms_led_toggle+0x20>)
1000ac70:	4798      	blx	r3
1000ac72:	e002      	b.n	1000ac7a <sms_led_toggle+0x1a>
    else sms_led_switch_on(led);
1000ac74:	0020      	movs	r0, r4
1000ac76:	4b03      	ldr	r3, [pc, #12]	; (1000ac84 <sms_led_toggle+0x24>)
1000ac78:	4798      	blx	r3
}
1000ac7a:	bd10      	pop	{r4, pc}
1000ac7c:	1000c00d 	.word	0x1000c00d
1000ac80:	1000ac01 	.word	0x1000ac01
1000ac84:	1000abf1 	.word	0x1000abf1

1000ac88 <sms_led_blink_start>:
    return gpio_pin_get_output_level(led);
}


void sms_led_blink_start(enum sms_leds led)
{
1000ac88:	b510      	push	{r4, lr}
    sms_led_switch_on(led);
1000ac8a:	4b0c      	ldr	r3, [pc, #48]	; (1000acbc <sms_led_blink_start+0x34>)
1000ac8c:	4798      	blx	r3
    sms_led_blink_cnt = 0;
1000ac8e:	2200      	movs	r2, #0
1000ac90:	4b0b      	ldr	r3, [pc, #44]	; (1000acc0 <sms_led_blink_start+0x38>)
1000ac92:	701a      	strb	r2, [r3, #0]
    uint32_t delay = 0;
    switch(timer2_current_mode) {
1000ac94:	4b0b      	ldr	r3, [pc, #44]	; (1000acc4 <sms_led_blink_start+0x3c>)
1000ac96:	781b      	ldrb	r3, [r3, #0]
1000ac98:	b2db      	uxtb	r3, r3
1000ac9a:	2b02      	cmp	r3, #2
1000ac9c:	d002      	beq.n	1000aca4 <sms_led_blink_start+0x1c>
1000ac9e:	2b03      	cmp	r3, #3
1000aca0:	d002      	beq.n	1000aca8 <sms_led_blink_start+0x20>
1000aca2:	e004      	b.n	1000acae <sms_led_blink_start+0x26>
        case TIMER2_MODE_LED_STARTUP:
        delay = SMS_BLINK_STARTUP_MS;
1000aca4:	2164      	movs	r1, #100	; 0x64
1000aca6:	e003      	b.n	1000acb0 <sms_led_blink_start+0x28>
        break;
        
        case TIMER2_MODE_LED_SHUTDOWN:
        delay = SMS_BLINK_SHTDWN_MS;
1000aca8:	21c8      	movs	r1, #200	; 0xc8
1000acaa:	0049      	lsls	r1, r1, #1
        break;
1000acac:	e000      	b.n	1000acb0 <sms_led_blink_start+0x28>

void sms_led_blink_start(enum sms_leds led)
{
    sms_led_switch_on(led);
    sms_led_blink_cnt = 0;
    uint32_t delay = 0;
1000acae:	2100      	movs	r1, #0
        
        default:
        break;
    }

    sms_dualtimer_start(TIMER_UNIT_MS, delay, DUALTIMER_TIMER2);
1000acb0:	2201      	movs	r2, #1
1000acb2:	2001      	movs	r0, #1
1000acb4:	4b04      	ldr	r3, [pc, #16]	; (1000acc8 <sms_led_blink_start+0x40>)
1000acb6:	4798      	blx	r3
}
1000acb8:	bd10      	pop	{r4, pc}
1000acba:	46c0      	nop			; (mov r8, r8)
1000acbc:	1000abf1 	.word	0x1000abf1
1000acc0:	10019c3c 	.word	0x10019c3c
1000acc4:	10019c19 	.word	0x10019c19
1000acc8:	1000b285 	.word	0x1000b285

1000accc <sms_pressure_ms58_reset>:
    }
    return STATUS_ERR_IO;
}

void sms_pressure_ms58_reset(void)
{
1000accc:	b510      	push	{r4, lr}
1000acce:	b082      	sub	sp, #8
    //DBG_LOG_DEV("[sms_pressure_ms58_reset]\twriting reset command");
    spi_wdata[0] = MS58_RESET;
1000acd0:	4a05      	ldr	r2, [pc, #20]	; (1000ace8 <sms_pressure_ms58_reset+0x1c>)
1000acd2:	231e      	movs	r3, #30
1000acd4:	7013      	strb	r3, [r2, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 1);
1000acd6:	3b1d      	subs	r3, #29
1000acd8:	9300      	str	r3, [sp, #0]
1000acda:	4b04      	ldr	r3, [pc, #16]	; (1000acec <sms_pressure_ms58_reset+0x20>)
1000acdc:	4904      	ldr	r1, [pc, #16]	; (1000acf0 <sms_pressure_ms58_reset+0x24>)
1000acde:	4805      	ldr	r0, [pc, #20]	; (1000acf4 <sms_pressure_ms58_reset+0x28>)
1000ace0:	4c05      	ldr	r4, [pc, #20]	; (1000acf8 <sms_pressure_ms58_reset+0x2c>)
1000ace2:	47a0      	blx	r4
}
1000ace4:	b002      	add	sp, #8
1000ace6:	bd10      	pop	{r4, pc}
1000ace8:	10019b6c 	.word	0x10019b6c
1000acec:	10019b5c 	.word	0x10019b5c
1000acf0:	10019c1c 	.word	0x10019c1c
1000acf4:	10019c28 	.word	0x10019c28
1000acf8:	1000b161 	.word	0x1000b161

1000acfc <sms_pressure_startup>:
    gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, false);
}


void sms_pressure_startup(void)
{
1000acfc:	b510      	push	{r4, lr}
    DBG_LOG_DEV("[sms_pressure_startup]\t\tStarting pressure sensor");
1000acfe:	480d      	ldr	r0, [pc, #52]	; (1000ad34 <sms_pressure_startup+0x38>)
1000ad00:	4b0d      	ldr	r3, [pc, #52]	; (1000ad38 <sms_pressure_startup+0x3c>)
1000ad02:	4798      	blx	r3
1000ad04:	480d      	ldr	r0, [pc, #52]	; (1000ad3c <sms_pressure_startup+0x40>)
1000ad06:	4b0e      	ldr	r3, [pc, #56]	; (1000ad40 <sms_pressure_startup+0x44>)
1000ad08:	4798      	blx	r3
    //gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, true); // switch on MS58 pressure sensor
    /* Disable buttons for reset time (~3 ms) to avoid conflict with dualtimer1 */
    sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
1000ad0a:	2101      	movs	r1, #1
1000ad0c:	2001      	movs	r0, #1
1000ad0e:	4b0d      	ldr	r3, [pc, #52]	; (1000ad44 <sms_pressure_startup+0x48>)
1000ad10:	4798      	blx	r3
    pressure_device.ms58_device.current_state = MS58_STATE_RESETTING;
1000ad12:	4b0d      	ldr	r3, [pc, #52]	; (1000ad48 <sms_pressure_startup+0x4c>)
1000ad14:	2101      	movs	r1, #1
1000ad16:	2225      	movs	r2, #37	; 0x25
1000ad18:	5499      	strb	r1, [r3, r2]
    pressure_device.ms58_device.reset_done = false;
1000ad1a:	2200      	movs	r2, #0
1000ad1c:	705a      	strb	r2, [r3, #1]
    /* Write the reset command to MS58 */
    sms_pressure_ms58_reset();
1000ad1e:	4b0b      	ldr	r3, [pc, #44]	; (1000ad4c <sms_pressure_startup+0x50>)
1000ad20:	4798      	blx	r3
    timer1_current_mode = TIMER1_MODE_MS58_RESET;
1000ad22:	2202      	movs	r2, #2
1000ad24:	4b0a      	ldr	r3, [pc, #40]	; (1000ad50 <sms_pressure_startup+0x54>)
1000ad26:	701a      	strb	r2, [r3, #0]
    //ulp_ready = false;
    sms_dualtimer_start(TIMER_UNIT_MS, MS58_RESET_WAIT_MS, DUALTIMER_TIMER1);
1000ad28:	2200      	movs	r2, #0
1000ad2a:	2103      	movs	r1, #3
1000ad2c:	2001      	movs	r0, #1
1000ad2e:	4b09      	ldr	r3, [pc, #36]	; (1000ad54 <sms_pressure_startup+0x58>)
1000ad30:	4798      	blx	r3
}
1000ad32:	bd10      	pop	{r4, pc}
1000ad34:	10015f9c 	.word	0x10015f9c
1000ad38:	10014df5 	.word	0x10014df5
1000ad3c:	10016988 	.word	0x10016988
1000ad40:	10014cd5 	.word	0x10014cd5
1000ad44:	1000a69d 	.word	0x1000a69d
1000ad48:	10019b7c 	.word	0x10019b7c
1000ad4c:	1000accd 	.word	0x1000accd
1000ad50:	10019a74 	.word	0x10019a74
1000ad54:	1000b285 	.word	0x1000b285

1000ad58 <sms_pressure_ms58_read_prom>:
    spi_wdata[0] = MS58_RESET;
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 1);
}

enum status_code sms_pressure_ms58_read_prom(void)
{
1000ad58:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ad5a:	4657      	mov	r7, sl
1000ad5c:	b480      	push	{r7}
1000ad5e:	b082      	sub	sp, #8
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] reading bytes... ");
    spi_wdata[0] = MS58_PROM_READ_1;
1000ad60:	4d37      	ldr	r5, [pc, #220]	; (1000ae40 <sms_pressure_ms58_read_prom+0xe8>)
1000ad62:	23a2      	movs	r3, #162	; 0xa2
1000ad64:	702b      	strb	r3, [r5, #0]
    spi_wdata[1] = 0x00;
1000ad66:	2300      	movs	r3, #0
1000ad68:	706b      	strb	r3, [r5, #1]
    spi_wdata[2] = 0x00;
1000ad6a:	70ab      	strb	r3, [r5, #2]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000ad6c:	4c35      	ldr	r4, [pc, #212]	; (1000ae44 <sms_pressure_ms58_read_prom+0xec>)
1000ad6e:	3303      	adds	r3, #3
1000ad70:	469a      	mov	sl, r3
1000ad72:	9300      	str	r3, [sp, #0]
1000ad74:	0023      	movs	r3, r4
1000ad76:	002a      	movs	r2, r5
1000ad78:	4933      	ldr	r1, [pc, #204]	; (1000ae48 <sms_pressure_ms58_read_prom+0xf0>)
1000ad7a:	4834      	ldr	r0, [pc, #208]	; (1000ae4c <sms_pressure_ms58_read_prom+0xf4>)
1000ad7c:	4f34      	ldr	r7, [pc, #208]	; (1000ae50 <sms_pressure_ms58_read_prom+0xf8>)
1000ad7e:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.ms58_device.prom_values[1] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000ad80:	4e34      	ldr	r6, [pc, #208]	; (1000ae54 <sms_pressure_ms58_read_prom+0xfc>)
1000ad82:	7863      	ldrb	r3, [r4, #1]
1000ad84:	021b      	lsls	r3, r3, #8
1000ad86:	78a2      	ldrb	r2, [r4, #2]
1000ad88:	4313      	orrs	r3, r2
1000ad8a:	80f3      	strh	r3, [r6, #6]

    spi_wdata[0] = MS58_PROM_READ_2;
1000ad8c:	23a4      	movs	r3, #164	; 0xa4
1000ad8e:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000ad90:	4653      	mov	r3, sl
1000ad92:	9300      	str	r3, [sp, #0]
1000ad94:	0023      	movs	r3, r4
1000ad96:	002a      	movs	r2, r5
1000ad98:	492b      	ldr	r1, [pc, #172]	; (1000ae48 <sms_pressure_ms58_read_prom+0xf0>)
1000ad9a:	482c      	ldr	r0, [pc, #176]	; (1000ae4c <sms_pressure_ms58_read_prom+0xf4>)
1000ad9c:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.ms58_device.prom_values[2] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000ad9e:	7863      	ldrb	r3, [r4, #1]
1000ada0:	021b      	lsls	r3, r3, #8
1000ada2:	78a2      	ldrb	r2, [r4, #2]
1000ada4:	4313      	orrs	r3, r2
1000ada6:	8133      	strh	r3, [r6, #8]

    spi_wdata[0] = MS58_PROM_READ_3;
1000ada8:	23a6      	movs	r3, #166	; 0xa6
1000adaa:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000adac:	4653      	mov	r3, sl
1000adae:	9300      	str	r3, [sp, #0]
1000adb0:	0023      	movs	r3, r4
1000adb2:	002a      	movs	r2, r5
1000adb4:	4924      	ldr	r1, [pc, #144]	; (1000ae48 <sms_pressure_ms58_read_prom+0xf0>)
1000adb6:	4825      	ldr	r0, [pc, #148]	; (1000ae4c <sms_pressure_ms58_read_prom+0xf4>)
1000adb8:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.ms58_device.prom_values[3] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000adba:	7863      	ldrb	r3, [r4, #1]
1000adbc:	021b      	lsls	r3, r3, #8
1000adbe:	78a2      	ldrb	r2, [r4, #2]
1000adc0:	4313      	orrs	r3, r2
1000adc2:	8173      	strh	r3, [r6, #10]

    spi_wdata[0] = MS58_PROM_READ_4;
1000adc4:	23a8      	movs	r3, #168	; 0xa8
1000adc6:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000adc8:	4653      	mov	r3, sl
1000adca:	9300      	str	r3, [sp, #0]
1000adcc:	0023      	movs	r3, r4
1000adce:	002a      	movs	r2, r5
1000add0:	491d      	ldr	r1, [pc, #116]	; (1000ae48 <sms_pressure_ms58_read_prom+0xf0>)
1000add2:	481e      	ldr	r0, [pc, #120]	; (1000ae4c <sms_pressure_ms58_read_prom+0xf4>)
1000add4:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.ms58_device.prom_values[4] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000add6:	7863      	ldrb	r3, [r4, #1]
1000add8:	021b      	lsls	r3, r3, #8
1000adda:	78a2      	ldrb	r2, [r4, #2]
1000addc:	4313      	orrs	r3, r2
1000adde:	81b3      	strh	r3, [r6, #12]

    spi_wdata[0] = MS58_PROM_READ_5;
1000ade0:	23aa      	movs	r3, #170	; 0xaa
1000ade2:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000ade4:	4653      	mov	r3, sl
1000ade6:	9300      	str	r3, [sp, #0]
1000ade8:	0023      	movs	r3, r4
1000adea:	002a      	movs	r2, r5
1000adec:	4916      	ldr	r1, [pc, #88]	; (1000ae48 <sms_pressure_ms58_read_prom+0xf0>)
1000adee:	4817      	ldr	r0, [pc, #92]	; (1000ae4c <sms_pressure_ms58_read_prom+0xf4>)
1000adf0:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.ms58_device.prom_values[5] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000adf2:	7863      	ldrb	r3, [r4, #1]
1000adf4:	021b      	lsls	r3, r3, #8
1000adf6:	78a2      	ldrb	r2, [r4, #2]
1000adf8:	4313      	orrs	r3, r2
1000adfa:	81f3      	strh	r3, [r6, #14]

    spi_wdata[0] = MS58_PROM_READ_6;
1000adfc:	23ac      	movs	r3, #172	; 0xac
1000adfe:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000ae00:	4653      	mov	r3, sl
1000ae02:	9300      	str	r3, [sp, #0]
1000ae04:	0023      	movs	r3, r4
1000ae06:	002a      	movs	r2, r5
1000ae08:	490f      	ldr	r1, [pc, #60]	; (1000ae48 <sms_pressure_ms58_read_prom+0xf0>)
1000ae0a:	4810      	ldr	r0, [pc, #64]	; (1000ae4c <sms_pressure_ms58_read_prom+0xf4>)
1000ae0c:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.ms58_device.prom_values[6] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000ae0e:	7863      	ldrb	r3, [r4, #1]
1000ae10:	021b      	lsls	r3, r3, #8
1000ae12:	78a2      	ldrb	r2, [r4, #2]
1000ae14:	4313      	orrs	r3, r2
1000ae16:	8233      	strh	r3, [r6, #16]

    spi_wdata[0] = MS58_PROM_READ_7;
1000ae18:	23ae      	movs	r3, #174	; 0xae
1000ae1a:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000ae1c:	4653      	mov	r3, sl
1000ae1e:	9300      	str	r3, [sp, #0]
1000ae20:	0023      	movs	r3, r4
1000ae22:	002a      	movs	r2, r5
1000ae24:	4908      	ldr	r1, [pc, #32]	; (1000ae48 <sms_pressure_ms58_read_prom+0xf0>)
1000ae26:	4809      	ldr	r0, [pc, #36]	; (1000ae4c <sms_pressure_ms58_read_prom+0xf4>)
1000ae28:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.ms58_device.prom_values[7] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000ae2a:	7863      	ldrb	r3, [r4, #1]
1000ae2c:	021b      	lsls	r3, r3, #8
1000ae2e:	78a2      	ldrb	r2, [r4, #2]
1000ae30:	4313      	orrs	r3, r2
1000ae32:	8273      	strh	r3, [r6, #18]
    //for(uint8_t i = 1; i < MS58_PROM_VALUES_MAX; i++) {
        //DBG_LOG_DEV("  C%d -> %d", (i+1), ms58_device.prom_values[i]);
    //}

    return STATUS_OK;
}
1000ae34:	2000      	movs	r0, #0
1000ae36:	b002      	add	sp, #8
1000ae38:	bc04      	pop	{r2}
1000ae3a:	4692      	mov	sl, r2
1000ae3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ae3e:	46c0      	nop			; (mov r8, r8)
1000ae40:	10019b6c 	.word	0x10019b6c
1000ae44:	10019b5c 	.word	0x10019b5c
1000ae48:	10019c1c 	.word	0x10019c1c
1000ae4c:	10019c28 	.word	0x10019c28
1000ae50:	1000b161 	.word	0x1000b161
1000ae54:	10019b7c 	.word	0x10019b7c

1000ae58 <sms_pressure_init>:
    //ulp_ready = false;
    sms_dualtimer_start(TIMER_UNIT_MS, MS58_RESET_WAIT_MS, DUALTIMER_TIMER1);
}

enum status_code sms_pressure_init(void)
{
1000ae58:	b510      	push	{r4, lr}
    /* Read the PROM values */
    if(sms_pressure_ms58_read_prom() == STATUS_OK) {
1000ae5a:	4b06      	ldr	r3, [pc, #24]	; (1000ae74 <sms_pressure_init+0x1c>)
1000ae5c:	4798      	blx	r3
1000ae5e:	2800      	cmp	r0, #0
1000ae60:	d106      	bne.n	1000ae70 <sms_pressure_init+0x18>
        pressure_device.ms58_device.init_ok = true;
1000ae62:	4b05      	ldr	r3, [pc, #20]	; (1000ae78 <sms_pressure_init+0x20>)
1000ae64:	2201      	movs	r2, #1
1000ae66:	709a      	strb	r2, [r3, #2]
        pressure_device.ms58_device.current_state = MS58_STATE_READY;
1000ae68:	2102      	movs	r1, #2
1000ae6a:	3224      	adds	r2, #36	; 0x24
1000ae6c:	5499      	strb	r1, [r3, r2]
        /* Enable buttons again */
        //sms_button_toggle_interrupts(SMS_EXTINT_ENABLE);
        return STATUS_OK;
1000ae6e:	e000      	b.n	1000ae72 <sms_pressure_init+0x1a>
    }
    return STATUS_ERR_IO;
1000ae70:	2010      	movs	r0, #16
}
1000ae72:	bd10      	pop	{r4, pc}
1000ae74:	1000ad59 	.word	0x1000ad59
1000ae78:	10019b7c 	.word	0x10019b7c

1000ae7c <sms_pressure_ms58_read_data>:
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
    }        
}

enum status_code sms_pressure_ms58_read_data(void)
{
1000ae7c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ae7e:	4657      	mov	r7, sl
1000ae80:	464e      	mov	r6, r9
1000ae82:	b4c0      	push	{r6, r7}
1000ae84:	b083      	sub	sp, #12
    switch(pressure_device.ms58_device.current_state) {
1000ae86:	2325      	movs	r3, #37	; 0x25
1000ae88:	4a2c      	ldr	r2, [pc, #176]	; (1000af3c <sms_pressure_ms58_read_data+0xc0>)
1000ae8a:	5cd3      	ldrb	r3, [r2, r3]
1000ae8c:	2b03      	cmp	r3, #3
1000ae8e:	d002      	beq.n	1000ae96 <sms_pressure_ms58_read_data+0x1a>
1000ae90:	2b04      	cmp	r3, #4
1000ae92:	d025      	beq.n	1000aee0 <sms_pressure_ms58_read_data+0x64>
1000ae94:	e04b      	b.n	1000af2e <sms_pressure_ms58_read_data+0xb2>
        case MS58_STATE_CONV_PRESSURE:
        //DBG_LOG_DEV("[sms_pressure_ms58_read_data] reading ADC pressure values...");
        spi_wdata[0] = MS58_ADC_READ;
1000ae96:	4c2a      	ldr	r4, [pc, #168]	; (1000af40 <sms_pressure_ms58_read_data+0xc4>)
1000ae98:	2300      	movs	r3, #0
1000ae9a:	7023      	strb	r3, [r4, #0]
        spi_wdata[1] = MS58_ADC_READ;
1000ae9c:	7063      	strb	r3, [r4, #1]
        spi_wdata[2] = MS58_ADC_READ;
1000ae9e:	70a3      	strb	r3, [r4, #2]
        spi_wdata[3] = MS58_ADC_READ;
1000aea0:	70e3      	strb	r3, [r4, #3]
        sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 4);
1000aea2:	4d28      	ldr	r5, [pc, #160]	; (1000af44 <sms_pressure_ms58_read_data+0xc8>)
1000aea4:	2704      	movs	r7, #4
1000aea6:	9700      	str	r7, [sp, #0]
1000aea8:	002b      	movs	r3, r5
1000aeaa:	0022      	movs	r2, r4
1000aeac:	4926      	ldr	r1, [pc, #152]	; (1000af48 <sms_pressure_ms58_read_data+0xcc>)
1000aeae:	4827      	ldr	r0, [pc, #156]	; (1000af4c <sms_pressure_ms58_read_data+0xd0>)
1000aeb0:	4e27      	ldr	r6, [pc, #156]	; (1000af50 <sms_pressure_ms58_read_data+0xd4>)
1000aeb2:	46b2      	mov	sl, r6
1000aeb4:	47b0      	blx	r6
        pressure_device.ms58_device.adc_values[MS58_TYPE_PRESS] = ((spi_rdata[1] << 16) | (spi_rdata[2] << 8) | (spi_rdata[3]));
1000aeb6:	4e21      	ldr	r6, [pc, #132]	; (1000af3c <sms_pressure_ms58_read_data+0xc0>)
1000aeb8:	786b      	ldrb	r3, [r5, #1]
1000aeba:	041a      	lsls	r2, r3, #16
1000aebc:	78ab      	ldrb	r3, [r5, #2]
1000aebe:	021b      	lsls	r3, r3, #8
1000aec0:	4313      	orrs	r3, r2
1000aec2:	78ea      	ldrb	r2, [r5, #3]
1000aec4:	4313      	orrs	r3, r2
1000aec6:	6173      	str	r3, [r6, #20]
        //DBG_LOG_DEV("[sms_pressure_ms58_read_data] D1 -> %ld", ms58_device.adc_values[MS58_TYPE_PRESS]);
        
        //DBG_LOG_DEV("[sms_pressure_ms58_read_data] starting D2 conversion");
        spi_wdata[0] = MS58_CONV_D2_512;
1000aec8:	2352      	movs	r3, #82	; 0x52
1000aeca:	7023      	strb	r3, [r4, #0]
        sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 1);
1000aecc:	3b51      	subs	r3, #81	; 0x51
1000aece:	9300      	str	r3, [sp, #0]
1000aed0:	002b      	movs	r3, r5
1000aed2:	0022      	movs	r2, r4
1000aed4:	491c      	ldr	r1, [pc, #112]	; (1000af48 <sms_pressure_ms58_read_data+0xcc>)
1000aed6:	481d      	ldr	r0, [pc, #116]	; (1000af4c <sms_pressure_ms58_read_data+0xd0>)
1000aed8:	47d0      	blx	sl
        pressure_device.ms58_device.current_state = MS58_STATE_CONV_TEMPERATURE;
1000aeda:	2325      	movs	r3, #37	; 0x25
1000aedc:	54f7      	strb	r7, [r6, r3]
        break;
1000aede:	e026      	b.n	1000af2e <sms_pressure_ms58_read_data+0xb2>
        
        case MS58_STATE_CONV_TEMPERATURE:
        //DBG_LOG_DEV("[sms_pressure_ms58_read_data] reading ADC temperature values...");
        spi_wdata[0] = MS58_ADC_READ;
1000aee0:	4c17      	ldr	r4, [pc, #92]	; (1000af40 <sms_pressure_ms58_read_data+0xc4>)
1000aee2:	2300      	movs	r3, #0
1000aee4:	7023      	strb	r3, [r4, #0]
        spi_wdata[1] = MS58_ADC_READ;
1000aee6:	7063      	strb	r3, [r4, #1]
        spi_wdata[2] = MS58_ADC_READ;
1000aee8:	70a3      	strb	r3, [r4, #2]
        spi_wdata[3] = MS58_ADC_READ;
1000aeea:	70e3      	strb	r3, [r4, #3]
        sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 4);
1000aeec:	4d15      	ldr	r5, [pc, #84]	; (1000af44 <sms_pressure_ms58_read_data+0xc8>)
1000aeee:	3304      	adds	r3, #4
1000aef0:	9300      	str	r3, [sp, #0]
1000aef2:	002b      	movs	r3, r5
1000aef4:	0022      	movs	r2, r4
1000aef6:	4914      	ldr	r1, [pc, #80]	; (1000af48 <sms_pressure_ms58_read_data+0xcc>)
1000aef8:	4814      	ldr	r0, [pc, #80]	; (1000af4c <sms_pressure_ms58_read_data+0xd0>)
1000aefa:	4e15      	ldr	r6, [pc, #84]	; (1000af50 <sms_pressure_ms58_read_data+0xd4>)
1000aefc:	46b1      	mov	r9, r6
1000aefe:	47b0      	blx	r6
        pressure_device.ms58_device.adc_values[MS58_TYPE_TEMP] = ((spi_rdata[1] << 16) | (spi_rdata[2] << 8) | (spi_rdata[3]));
1000af00:	4e0e      	ldr	r6, [pc, #56]	; (1000af3c <sms_pressure_ms58_read_data+0xc0>)
1000af02:	786b      	ldrb	r3, [r5, #1]
1000af04:	041a      	lsls	r2, r3, #16
1000af06:	78ab      	ldrb	r3, [r5, #2]
1000af08:	021b      	lsls	r3, r3, #8
1000af0a:	4313      	orrs	r3, r2
1000af0c:	78ea      	ldrb	r2, [r5, #3]
1000af0e:	4313      	orrs	r3, r2
1000af10:	61b3      	str	r3, [r6, #24]
        //DBG_LOG_DEV("[sms_pressure_ms58_read_data] D2 -> %ld", ms58_device.adc_values[MS58_TYPE_TEMP]);
        
        //DBG_LOG_DEV("[sms_pressure_ms58_read_data] starting D1 conversion");
        spi_wdata[0] = MS58_CONV_D1_512;
1000af12:	2342      	movs	r3, #66	; 0x42
1000af14:	7023      	strb	r3, [r4, #0]
        sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 1);
1000af16:	2701      	movs	r7, #1
1000af18:	9700      	str	r7, [sp, #0]
1000af1a:	002b      	movs	r3, r5
1000af1c:	0022      	movs	r2, r4
1000af1e:	490a      	ldr	r1, [pc, #40]	; (1000af48 <sms_pressure_ms58_read_data+0xcc>)
1000af20:	480a      	ldr	r0, [pc, #40]	; (1000af4c <sms_pressure_ms58_read_data+0xd0>)
1000af22:	47c8      	blx	r9
        pressure_device.ms58_device.current_state = MS58_STATE_CONV_PRESSURE;
1000af24:	2203      	movs	r2, #3
1000af26:	2325      	movs	r3, #37	; 0x25
1000af28:	54f2      	strb	r2, [r6, r3]
        pressure_device.ms58_device.data_complete = true;
1000af2a:	3b01      	subs	r3, #1
1000af2c:	54f7      	strb	r7, [r6, r3]
        case MS58_STATE_NONE:
        default:
        break;
    }
    return STATUS_OK;
}
1000af2e:	2000      	movs	r0, #0
1000af30:	b003      	add	sp, #12
1000af32:	bc0c      	pop	{r2, r3}
1000af34:	4691      	mov	r9, r2
1000af36:	469a      	mov	sl, r3
1000af38:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000af3a:	46c0      	nop			; (mov r8, r8)
1000af3c:	10019b7c 	.word	0x10019b7c
1000af40:	10019b6c 	.word	0x10019b6c
1000af44:	10019b5c 	.word	0x10019b5c
1000af48:	10019c1c 	.word	0x10019c1c
1000af4c:	10019c28 	.word	0x10019c28
1000af50:	1000b161 	.word	0x1000b161

1000af54 <sms_pressure_ms58_calculate>:

void sms_pressure_ms58_calculate(void)
{
1000af54:	b5f0      	push	{r4, r5, r6, r7, lr}
1000af56:	464f      	mov	r7, r9
1000af58:	b480      	push	{r7}
1000af5a:	b082      	sub	sp, #8
    ***************************/
    /* dT = D2 - Tref = D2 - C5*2^8 */
    /* tv1: 33464 * 2^8 = 8566784 */
    tv1 = ((int64_t)(pressure_device.ms58_device.prom_values[5]) << 8);
    /* deltaT: 8569150 - 8566784 = 2366 */
    deltaT = (int32_t)((int64_t)pressure_device.ms58_device.adc_values[MS58_TYPE_TEMP] - tv1);
1000af5c:	4d26      	ldr	r5, [pc, #152]	; (1000aff8 <sms_pressure_ms58_calculate+0xa4>)

    /* TEMP = 20°C + dT*TEMPSENS = 2000 + dT * C6/2^23 */
    /* tv1: 28312 * 2366 = 66986192 */
    tv1 = ((int64_t)pressure_device.ms58_device.prom_values[6] * (int64_t)deltaT);
1000af5e:	89ec      	ldrh	r4, [r5, #14]
1000af60:	0224      	lsls	r4, r4, #8
1000af62:	69ab      	ldr	r3, [r5, #24]
1000af64:	1b1c      	subs	r4, r3, r4
1000af66:	17e3      	asrs	r3, r4, #31
1000af68:	001e      	movs	r6, r3
    /* tv2: 66986192 / 2^23 = 7(.985376358) */
    tv2 = (tv1 >> 23);
    /* temp: 7 + 2000 = 2007 */
    pressure_device.ms58_device.temperature = (int32_t)(tv2 + 2000);
1000af6a:	8a28      	ldrh	r0, [r5, #16]
1000af6c:	4a23      	ldr	r2, [pc, #140]	; (1000affc <sms_pressure_ms58_calculate+0xa8>)
1000af6e:	4691      	mov	r9, r2
1000af70:	0022      	movs	r2, r4
1000af72:	2100      	movs	r1, #0
1000af74:	47c8      	blx	r9
1000af76:	0249      	lsls	r1, r1, #9
1000af78:	0dc0      	lsrs	r0, r0, #23
1000af7a:	4308      	orrs	r0, r1
1000af7c:	23fa      	movs	r3, #250	; 0xfa
1000af7e:	00db      	lsls	r3, r3, #3
1000af80:	469c      	mov	ip, r3
1000af82:	4460      	add	r0, ip
1000af84:	6228      	str	r0, [r5, #32]
    /* tv2: 23282 * 2366 = 55085212 */
    tv2 = ((int64_t)pressure_device.ms58_device.prom_values[4] * (int64_t)deltaT);
    /* tv3: 55085212 / 2^7 = 430353(.21875) */
    tv3 = (tv2 >> 7);
    /* offset: 2419851264 + 430353 = 2420281617 */
    offset = (tv1 + tv3);
1000af86:	89a8      	ldrh	r0, [r5, #12]
1000af88:	0022      	movs	r2, r4
1000af8a:	9601      	str	r6, [sp, #4]
1000af8c:	0033      	movs	r3, r6
1000af8e:	2100      	movs	r1, #0
1000af90:	47c8      	blx	r9
1000af92:	064e      	lsls	r6, r1, #25
1000af94:	09c2      	lsrs	r2, r0, #7
1000af96:	4332      	orrs	r2, r6
1000af98:	11cb      	asrs	r3, r1, #7
1000af9a:	892e      	ldrh	r6, [r5, #8]
1000af9c:	2100      	movs	r1, #0
1000af9e:	0430      	lsls	r0, r6, #16
1000afa0:	1812      	adds	r2, r2, r0
1000afa2:	414b      	adcs	r3, r1
1000afa4:	0016      	movs	r6, r2
1000afa6:	001f      	movs	r7, r3
    /* sensitivity: 1314881536 + 215500 = 1315097036 */
    sensitivity = (tv1 + tv3);

    /* P = D1*SENS - OFF = (D1*SENS/2^21 - OFF)/2^15 */
    /* tv1: (9085466 * 1315097036) / 2^21 = 5697378829(.612148284) */
    tv1 = (((int64_t)pressure_device.ms58_device.adc_values[MS58_TYPE_PRESS] * sensitivity) >> 21);
1000afa8:	8968      	ldrh	r0, [r5, #10]
1000afaa:	0022      	movs	r2, r4
1000afac:	9b01      	ldr	r3, [sp, #4]
1000afae:	2100      	movs	r1, #0
1000afb0:	47c8      	blx	r9
1000afb2:	060c      	lsls	r4, r1, #24
1000afb4:	0a02      	lsrs	r2, r0, #8
1000afb6:	4322      	orrs	r2, r4
1000afb8:	120b      	asrs	r3, r1, #8
1000afba:	88ec      	ldrh	r4, [r5, #6]
1000afbc:	2100      	movs	r1, #0
1000afbe:	03e0      	lsls	r0, r4, #15
1000afc0:	1880      	adds	r0, r0, r2
1000afc2:	4159      	adcs	r1, r3
1000afc4:	696a      	ldr	r2, [r5, #20]
1000afc6:	2300      	movs	r3, #0
1000afc8:	47c8      	blx	r9
    /* tv2: 5697378829 - 2420281617 = 3277097212 */
    tv2 = tv1 - offset;
    /* press: 3277097212 / 2^15 = 100009(.070190) */
    pressure_device.ms58_device.pressure = (int32_t)(tv2 >> 15);
1000afca:	02cc      	lsls	r4, r1, #11
1000afcc:	0d42      	lsrs	r2, r0, #21
1000afce:	4322      	orrs	r2, r4
1000afd0:	154b      	asrs	r3, r1, #21
1000afd2:	1b92      	subs	r2, r2, r6
1000afd4:	41bb      	sbcs	r3, r7
1000afd6:	0011      	movs	r1, r2
1000afd8:	045b      	lsls	r3, r3, #17
1000afda:	0bca      	lsrs	r2, r1, #15
1000afdc:	431a      	orrs	r2, r3
1000afde:	61ea      	str	r2, [r5, #28]

    DBG_LOG_DEV("[sms_pressure_ms58_calculate] temperature = %ld  pressure = %ld", pressure_device.ms58_device.temperature, pressure_device.ms58_device.pressure);
1000afe0:	4807      	ldr	r0, [pc, #28]	; (1000b000 <sms_pressure_ms58_calculate+0xac>)
1000afe2:	4b08      	ldr	r3, [pc, #32]	; (1000b004 <sms_pressure_ms58_calculate+0xb0>)
1000afe4:	4798      	blx	r3
1000afe6:	69ea      	ldr	r2, [r5, #28]
1000afe8:	6a29      	ldr	r1, [r5, #32]
1000afea:	4807      	ldr	r0, [pc, #28]	; (1000b008 <sms_pressure_ms58_calculate+0xb4>)
1000afec:	4b07      	ldr	r3, [pc, #28]	; (1000b00c <sms_pressure_ms58_calculate+0xb8>)
1000afee:	4798      	blx	r3
}
1000aff0:	b002      	add	sp, #8
1000aff2:	bc04      	pop	{r2}
1000aff4:	4691      	mov	r9, r2
1000aff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000aff8:	10019b7c 	.word	0x10019b7c
1000affc:	100131e1 	.word	0x100131e1
1000b000:	10015f9c 	.word	0x10015f9c
1000b004:	10014df5 	.word	0x10014df5
1000b008:	100169bc 	.word	0x100169bc
1000b00c:	10014cd5 	.word	0x10014cd5

1000b010 <sms_pressure_poll_data>:

    return STATUS_OK;
}

void sms_pressure_poll_data(void)
{
1000b010:	b510      	push	{r4, lr}
    static uint32_t temp = 0x12345678;
    static uint32_t press = 0xfedcba98;
    if(ble_current_state == BLE_STATE_PAIRED) {
1000b012:	4b11      	ldr	r3, [pc, #68]	; (1000b058 <sms_pressure_poll_data+0x48>)
1000b014:	781b      	ldrb	r3, [r3, #0]
1000b016:	2b22      	cmp	r3, #34	; 0x22
1000b018:	d11d      	bne.n	1000b056 <sms_pressure_poll_data+0x46>
        DBG_LOG_DEV("[sms_pressure_poll_data]\tStarting data polling");
1000b01a:	4810      	ldr	r0, [pc, #64]	; (1000b05c <sms_pressure_poll_data+0x4c>)
1000b01c:	4b10      	ldr	r3, [pc, #64]	; (1000b060 <sms_pressure_poll_data+0x50>)
1000b01e:	4798      	blx	r3
1000b020:	4810      	ldr	r0, [pc, #64]	; (1000b064 <sms_pressure_poll_data+0x54>)
1000b022:	4b11      	ldr	r3, [pc, #68]	; (1000b068 <sms_pressure_poll_data+0x58>)
1000b024:	4798      	blx	r3
        if(sms_pressure_ms58_read_data() != STATUS_OK) {
1000b026:	4b11      	ldr	r3, [pc, #68]	; (1000b06c <sms_pressure_poll_data+0x5c>)
1000b028:	4798      	blx	r3
1000b02a:	2800      	cmp	r0, #0
1000b02c:	d006      	beq.n	1000b03c <sms_pressure_poll_data+0x2c>
            DBG_LOG_DEV("[sms_pressure_ms58_poll_data] problem reading ms58 data");
1000b02e:	480b      	ldr	r0, [pc, #44]	; (1000b05c <sms_pressure_poll_data+0x4c>)
1000b030:	4b0b      	ldr	r3, [pc, #44]	; (1000b060 <sms_pressure_poll_data+0x50>)
1000b032:	4798      	blx	r3
1000b034:	480e      	ldr	r0, [pc, #56]	; (1000b070 <sms_pressure_poll_data+0x60>)
1000b036:	4b0c      	ldr	r3, [pc, #48]	; (1000b068 <sms_pressure_poll_data+0x58>)
1000b038:	4798      	blx	r3
1000b03a:	e00c      	b.n	1000b056 <sms_pressure_poll_data+0x46>
        }
        else {
            ////DBG_LOG_DEV("[sms_pressure_poll_data]\tDone");
            if(pressure_device.ms58_device.data_complete) {
1000b03c:	2324      	movs	r3, #36	; 0x24
1000b03e:	4a0d      	ldr	r2, [pc, #52]	; (1000b074 <sms_pressure_poll_data+0x64>)
1000b040:	5cd3      	ldrb	r3, [r2, r3]
1000b042:	2b00      	cmp	r3, #0
1000b044:	d007      	beq.n	1000b056 <sms_pressure_poll_data+0x46>
                pressure_device.ms58_device.data_complete = false;
1000b046:	2100      	movs	r1, #0
1000b048:	2324      	movs	r3, #36	; 0x24
1000b04a:	54d1      	strb	r1, [r2, r3]
                sms_pressure_ms58_calculate();
1000b04c:	4b0a      	ldr	r3, [pc, #40]	; (1000b078 <sms_pressure_poll_data+0x68>)
1000b04e:	4798      	blx	r3
                //ms58_device.temperature = ( (ms58_device.temperature >= (int32_t)0xffffffff) ? (ms58_device.temperature = 0) : (ms58_device.temperature + 1) );
                //ms58_device.pressure = ( (ms58_device.pressure < 0) ? (ms58_device.pressure = 0xffffffff) : (ms58_device.pressure - 1) );
                sms_ble_send_characteristic(BLE_CHAR_PRESS);
1000b050:	2002      	movs	r0, #2
1000b052:	4b0a      	ldr	r3, [pc, #40]	; (1000b07c <sms_pressure_poll_data+0x6c>)
1000b054:	4798      	blx	r3
        }
    }
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
    }        
}
1000b056:	bd10      	pop	{r4, pc}
1000b058:	10019c18 	.word	0x10019c18
1000b05c:	10015f9c 	.word	0x10015f9c
1000b060:	10014df5 	.word	0x10014df5
1000b064:	100169fc 	.word	0x100169fc
1000b068:	10014cd5 	.word	0x10014cd5
1000b06c:	1000ae7d 	.word	0x1000ae7d
1000b070:	10016a2c 	.word	0x10016a2c
1000b074:	10019b7c 	.word	0x10019b7c
1000b078:	1000af55 	.word	0x1000af55
1000b07c:	1000a0bd 	.word	0x1000a0bd

1000b080 <sms_pressure_define_services>:
    DBG_LOG_DEV("[sms_pressure_ms58_calculate] temperature = %ld  pressure = %ld", pressure_device.ms58_device.temperature, pressure_device.ms58_device.pressure);
}


void sms_pressure_define_services(void)
{
1000b080:	b510      	push	{r4, lr}
1000b082:	b082      	sub	sp, #8
    at_ble_status_t status;
    uint8_t init_value = 0;
1000b084:	466b      	mov	r3, sp
1000b086:	1dda      	adds	r2, r3, #7
1000b088:	2300      	movs	r3, #0
1000b08a:	7013      	strb	r3, [r2, #0]
    sms_ble_service_init(BLE_SERV_PRESSURE, &pressure_device.service_handler, &init_value);
1000b08c:	4c0d      	ldr	r4, [pc, #52]	; (1000b0c4 <sms_pressure_define_services+0x44>)
1000b08e:	0021      	movs	r1, r4
1000b090:	2001      	movs	r0, #1
1000b092:	4b0d      	ldr	r3, [pc, #52]	; (1000b0c8 <sms_pressure_define_services+0x48>)
1000b094:	4798      	blx	r3
    if((status = sms_ble_primary_service_define(&pressure_device.service_handler)) != AT_BLE_SUCCESS) {
1000b096:	0020      	movs	r0, r4
1000b098:	4b0c      	ldr	r3, [pc, #48]	; (1000b0cc <sms_pressure_define_services+0x4c>)
1000b09a:	4798      	blx	r3
1000b09c:	1e04      	subs	r4, r0, #0
1000b09e:	d007      	beq.n	1000b0b0 <sms_pressure_define_services+0x30>
        DBG_LOG("[sms_pressure_define_services]\tServices defining failed, reason 0x%x", status);
1000b0a0:	480b      	ldr	r0, [pc, #44]	; (1000b0d0 <sms_pressure_define_services+0x50>)
1000b0a2:	4b0c      	ldr	r3, [pc, #48]	; (1000b0d4 <sms_pressure_define_services+0x54>)
1000b0a4:	4798      	blx	r3
1000b0a6:	0021      	movs	r1, r4
1000b0a8:	480b      	ldr	r0, [pc, #44]	; (1000b0d8 <sms_pressure_define_services+0x58>)
1000b0aa:	4b0c      	ldr	r3, [pc, #48]	; (1000b0dc <sms_pressure_define_services+0x5c>)
1000b0ac:	4798      	blx	r3
1000b0ae:	e007      	b.n	1000b0c0 <sms_pressure_define_services+0x40>
    }
    else {
        DBG_LOG_DEV("[sms_pressure_define_services]\tServices defined, SMS pressure handle: %d", pressure_device.service_handler.serv_handle);
1000b0b0:	4807      	ldr	r0, [pc, #28]	; (1000b0d0 <sms_pressure_define_services+0x50>)
1000b0b2:	4b08      	ldr	r3, [pc, #32]	; (1000b0d4 <sms_pressure_define_services+0x54>)
1000b0b4:	4798      	blx	r3
1000b0b6:	4b0a      	ldr	r3, [pc, #40]	; (1000b0e0 <sms_pressure_define_services+0x60>)
1000b0b8:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
1000b0ba:	480a      	ldr	r0, [pc, #40]	; (1000b0e4 <sms_pressure_define_services+0x64>)
1000b0bc:	4b07      	ldr	r3, [pc, #28]	; (1000b0dc <sms_pressure_define_services+0x5c>)
1000b0be:	4798      	blx	r3
    }
1000b0c0:	b002      	add	sp, #8
1000b0c2:	bd10      	pop	{r4, pc}
1000b0c4:	10019ba8 	.word	0x10019ba8
1000b0c8:	1000a1fd 	.word	0x1000a1fd
1000b0cc:	1000a1d9 	.word	0x1000a1d9
1000b0d0:	10015f9c 	.word	0x10015f9c
1000b0d4:	10014df5 	.word	0x10014df5
1000b0d8:	10016a64 	.word	0x10016a64
1000b0dc:	10014cd5 	.word	0x10014cd5
1000b0e0:	10019b7c 	.word	0x10019b7c
1000b0e4:	10016aac 	.word	0x10016aac

1000b0e8 <sms_spi_master_configure>:
 *   + mode 3 on SPI0 @ 1 MHz for MPU-9250 IMU
 * - assign SS pin for each slave device
 * - enable SPI
 */ 
void sms_spi_master_configure(void)
{
1000b0e8:	b530      	push	{r4, r5, lr}
1000b0ea:	b08d      	sub	sp, #52	; 0x34
    //DBG_LOG_DEV("[spi_master_configure]\tconfiguring SPI masters and attaching slaves...");

    /* Initialize ms58 spi slave device */
    struct spi_config spi_master_config;
    struct spi_slave_inst_config spi_slave_ms58_config;
    spi_slave_inst_get_config_defaults(&spi_slave_ms58_config);
1000b0ec:	ac01      	add	r4, sp, #4
1000b0ee:	0020      	movs	r0, r4
1000b0f0:	4b13      	ldr	r3, [pc, #76]	; (1000b140 <sms_spi_master_configure+0x58>)
1000b0f2:	4798      	blx	r3
    spi_slave_ms58_config.ss_pin = SMS_PRESSURE_SPI_SS_PIN;
1000b0f4:	2310      	movs	r3, #16
1000b0f6:	7023      	strb	r3, [r4, #0]
    spi_attach_slave(&spi_slave_ms58_instance, &spi_slave_ms58_config);
1000b0f8:	0021      	movs	r1, r4
1000b0fa:	4812      	ldr	r0, [pc, #72]	; (1000b144 <sms_spi_master_configure+0x5c>)
1000b0fc:	4b12      	ldr	r3, [pc, #72]	; (1000b148 <sms_spi_master_configure+0x60>)
1000b0fe:	4798      	blx	r3
    

    /* Initialize SPI1 master for ms58 */
    spi_get_config_defaults(&spi_master_config);
1000b100:	ac02      	add	r4, sp, #8
1000b102:	0020      	movs	r0, r4
1000b104:	4b11      	ldr	r3, [pc, #68]	; (1000b14c <sms_spi_master_configure+0x64>)
1000b106:	4798      	blx	r3
    spi_master_config.clock_divider = SPI_MASTER_MS58_CLOCK_DIV;
1000b108:	2368      	movs	r3, #104	; 0x68
1000b10a:	7123      	strb	r3, [r4, #4]
    spi_master_config.transfer_mode = SPI_MASTER_MS58_MODE;
1000b10c:	2300      	movs	r3, #0
1000b10e:	70a3      	strb	r3, [r4, #2]
    spi_master_config.pin_number_pad[0] = SPI_MASTER_MS58_PIN_SCK;
1000b110:	3311      	adds	r3, #17
1000b112:	60a3      	str	r3, [r4, #8]
    spi_master_config.pinmux_sel_pad[0] = SPI_MASTER_MS58_MUX_SCK;
1000b114:	3b0d      	subs	r3, #13
1000b116:	61a3      	str	r3, [r4, #24]
    spi_master_config.pin_number_pad[1] = SPI_MASTER_MS58_PIN_MOSI;
1000b118:	2213      	movs	r2, #19
1000b11a:	60e2      	str	r2, [r4, #12]
    spi_master_config.pinmux_sel_pad[1] = SPI_MASTER_MS58_MUX_MOSI;
1000b11c:	61e3      	str	r3, [r4, #28]
    spi_master_config.pin_number_pad[2] = SPI_MASTER_MS58_PIN_SSN;
1000b11e:	3a14      	subs	r2, #20
1000b120:	6122      	str	r2, [r4, #16]
    spi_master_config.pinmux_sel_pad[2] = SPI_MASTER_MS58_MUX_SSN;
1000b122:	6222      	str	r2, [r4, #32]
    spi_master_config.pin_number_pad[3] = SPI_MASTER_MS58_MISO;
1000b124:	3213      	adds	r2, #19
1000b126:	6162      	str	r2, [r4, #20]
    spi_master_config.pinmux_sel_pad[3] = SPI_MASTER_MS58_MUX_MISO;
1000b128:	6263      	str	r3, [r4, #36]	; 0x24
    spi_init(&spi_master_ms58_instance, SPI_MASTER_MS58_PORT, &spi_master_config);
1000b12a:	4d09      	ldr	r5, [pc, #36]	; (1000b150 <sms_spi_master_configure+0x68>)
1000b12c:	0022      	movs	r2, r4
1000b12e:	4909      	ldr	r1, [pc, #36]	; (1000b154 <sms_spi_master_configure+0x6c>)
1000b130:	0028      	movs	r0, r5
1000b132:	4b09      	ldr	r3, [pc, #36]	; (1000b158 <sms_spi_master_configure+0x70>)
1000b134:	4798      	blx	r3
    spi_enable(&spi_master_ms58_instance);
1000b136:	0028      	movs	r0, r5
1000b138:	4b08      	ldr	r3, [pc, #32]	; (1000b15c <sms_spi_master_configure+0x74>)
1000b13a:	4798      	blx	r3
}
1000b13c:	b00d      	add	sp, #52	; 0x34
1000b13e:	bd30      	pop	{r4, r5, pc}
1000b140:	1000b7a1 	.word	0x1000b7a1
1000b144:	10019c1c 	.word	0x10019c1c
1000b148:	1000b7d9 	.word	0x1000b7d9
1000b14c:	1000b7ad 	.word	0x1000b7ad
1000b150:	10019c28 	.word	0x10019c28
1000b154:	40007000 	.word	0x40007000
1000b158:	1000b8a9 	.word	0x1000b8a9
1000b15c:	1000b819 	.word	0x1000b819

1000b160 <sms_spi_master_transceive>:
/* SPI transceive function:
 * - enable selected slave
 * - start transceive blocking job
 * - when job returned, disable selected slave
 */
enum status_code sms_spi_master_transceive(struct spi_module *const module, struct spi_slave_inst *const slave, uint8_t *tx_data, uint8_t *rx_data, uint16_t len) {
1000b160:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b162:	b083      	sub	sp, #12
1000b164:	0004      	movs	r4, r0
1000b166:	000d      	movs	r5, r1
1000b168:	9200      	str	r2, [sp, #0]
1000b16a:	9301      	str	r3, [sp, #4]
1000b16c:	ab08      	add	r3, sp, #32
1000b16e:	881e      	ldrh	r6, [r3, #0]
    enum status_code retVal;
    /* Enable slave */
    //DBG_LOG_CONT_DEV(" selecting slave...");
    spi_select_slave(module, slave, true);
1000b170:	2201      	movs	r2, #1
1000b172:	4f08      	ldr	r7, [pc, #32]	; (1000b194 <sms_spi_master_transceive+0x34>)
1000b174:	47b8      	blx	r7
    /* Write SPI data */
    //DBG_LOG_CONT_DEV(" writing data...");
    retVal = spi_transceive_buffer_wait(module, tx_data, rx_data, len);
1000b176:	0033      	movs	r3, r6
1000b178:	9a01      	ldr	r2, [sp, #4]
1000b17a:	9900      	ldr	r1, [sp, #0]
1000b17c:	0020      	movs	r0, r4
1000b17e:	4e06      	ldr	r6, [pc, #24]	; (1000b198 <sms_spi_master_transceive+0x38>)
1000b180:	47b0      	blx	r6
1000b182:	0006      	movs	r6, r0
    /* Disable slave */
    //DBG_LOG_CONT_DEV(" de-selecting slave...");
    spi_select_slave(module, slave, false);
1000b184:	2200      	movs	r2, #0
1000b186:	0029      	movs	r1, r5
1000b188:	0020      	movs	r0, r4
1000b18a:	47b8      	blx	r7
    //DBG_LOG_CONT_DEV(" done!");
    return retVal;
}
1000b18c:	0030      	movs	r0, r6
1000b18e:	b003      	add	sp, #12
1000b190:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b192:	46c0      	nop			; (mov r8, r8)
1000b194:	1000ba91 	.word	0x1000ba91
1000b198:	1000ba0d 	.word	0x1000ba0d

1000b19c <sms_timer_aon_callback>:

#include "sms_timer.h"

/* AON SLEEP TIMER */
void sms_timer_aon_callback(void)
{
1000b19c:	b510      	push	{r4, lr}
    sms_current_interrupt.source = INT_AON_TIMER;
1000b19e:	2204      	movs	r2, #4
1000b1a0:	4b04      	ldr	r3, [pc, #16]	; (1000b1b4 <sms_timer_aon_callback+0x18>)
1000b1a2:	701a      	strb	r2, [r3, #0]
    send_plf_int_msg_ind(AON_SLEEP_TIMER_EXPIRY_CALLBACK, AON_TIMER_EXPIRED, NULL, 0);
1000b1a4:	2300      	movs	r3, #0
1000b1a6:	2200      	movs	r2, #0
1000b1a8:	2103      	movs	r1, #3
1000b1aa:	2042      	movs	r0, #66	; 0x42
1000b1ac:	4c02      	ldr	r4, [pc, #8]	; (1000b1b8 <sms_timer_aon_callback+0x1c>)
1000b1ae:	47a0      	blx	r4
}
1000b1b0:	bd10      	pop	{r4, pc}
1000b1b2:	46c0      	nop			; (mov r8, r8)
1000b1b4:	10019c00 	.word	0x10019c00
1000b1b8:	1000f0c5 	.word	0x1000f0c5

1000b1bc <sms_timer_aon_init>:

void sms_timer_aon_init(uint32_t cnt, enum aon_sleep_timer_mode cnt_mode)
{
1000b1bc:	b530      	push	{r4, r5, lr}
1000b1be:	b083      	sub	sp, #12
1000b1c0:	0004      	movs	r4, r0
1000b1c2:	000d      	movs	r5, r1
    struct aon_sleep_timer_config config_aon_sleep_timer;
    aon_sleep_timer_get_config_defaults(&config_aon_sleep_timer);
1000b1c4:	4668      	mov	r0, sp
1000b1c6:	4b05      	ldr	r3, [pc, #20]	; (1000b1dc <sms_timer_aon_init+0x20>)
1000b1c8:	4798      	blx	r3
    config_aon_sleep_timer.mode = cnt_mode;
1000b1ca:	466b      	mov	r3, sp
1000b1cc:	705d      	strb	r5, [r3, #1]
    config_aon_sleep_timer.counter = cnt;
1000b1ce:	9401      	str	r4, [sp, #4]
    aon_sleep_timer_init(&config_aon_sleep_timer);
1000b1d0:	4668      	mov	r0, sp
1000b1d2:	4b03      	ldr	r3, [pc, #12]	; (1000b1e0 <sms_timer_aon_init+0x24>)
1000b1d4:	4798      	blx	r3
}
1000b1d6:	b003      	add	sp, #12
1000b1d8:	bd30      	pop	{r4, r5, pc}
1000b1da:	46c0      	nop			; (mov r8, r8)
1000b1dc:	10008155 	.word	0x10008155
1000b1e0:	100081c9 	.word	0x100081c9

1000b1e4 <sms_timer_aon_disable>:

void sms_timer_aon_disable(void)
{
1000b1e4:	b510      	push	{r4, lr}
    aon_sleep_timer_disable();
1000b1e6:	4b01      	ldr	r3, [pc, #4]	; (1000b1ec <sms_timer_aon_disable+0x8>)
1000b1e8:	4798      	blx	r3
}
1000b1ea:	bd10      	pop	{r4, pc}
1000b1ec:	10008165 	.word	0x10008165

1000b1f0 <sms_timer_aon_register_callback>:

void sms_timer_aon_register_callback(void)
{
1000b1f0:	b510      	push	{r4, lr}
    aon_sleep_timer_register_callback(sms_timer_aon_callback);
1000b1f2:	4804      	ldr	r0, [pc, #16]	; (1000b204 <sms_timer_aon_register_callback+0x14>)
1000b1f4:	4b04      	ldr	r3, [pc, #16]	; (1000b208 <sms_timer_aon_register_callback+0x18>)
1000b1f6:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000b1f8:	2280      	movs	r2, #128	; 0x80
1000b1fa:	0512      	lsls	r2, r2, #20
1000b1fc:	4b03      	ldr	r3, [pc, #12]	; (1000b20c <sms_timer_aon_register_callback+0x1c>)
1000b1fe:	601a      	str	r2, [r3, #0]
    NVIC_EnableIRQ(AON_SLEEP_TIMER0_IRQn);
}
1000b200:	bd10      	pop	{r4, pc}
1000b202:	46c0      	nop			; (mov r8, r8)
1000b204:	1000b19d 	.word	0x1000b19d
1000b208:	100081b1 	.word	0x100081b1
1000b20c:	e000e100 	.word	0xe000e100

1000b210 <sms_timer_aon_unregister_callback>:

void sms_timer_aon_unregister_callback(void)
{
1000b210:	b510      	push	{r4, lr}
    aon_sleep_timer_unregister_callback();
1000b212:	4b04      	ldr	r3, [pc, #16]	; (1000b224 <sms_timer_aon_unregister_callback+0x14>)
1000b214:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000b216:	2180      	movs	r1, #128	; 0x80
1000b218:	0509      	lsls	r1, r1, #20
1000b21a:	2380      	movs	r3, #128	; 0x80
1000b21c:	4a02      	ldr	r2, [pc, #8]	; (1000b228 <sms_timer_aon_unregister_callback+0x18>)
1000b21e:	50d1      	str	r1, [r2, r3]
    NVIC_DisableIRQ(AON_SLEEP_TIMER0_IRQn);
}
1000b220:	bd10      	pop	{r4, pc}
1000b222:	46c0      	nop			; (mov r8, r8)
1000b224:	100081bd 	.word	0x100081bd
1000b228:	e000e100 	.word	0xe000e100

1000b22c <sms_timer_aon_get_ms>:

void sms_timer_aon_get_ms(uint32_t *count)
{
    count = (uint32_t *)0;
}
1000b22c:	4770      	bx	lr
1000b22e:	46c0      	nop			; (mov r8, r8)

1000b230 <sms_dualtimer_init>:

/* DUALTIMER */
void sms_dualtimer_init(void)
{
1000b230:	b510      	push	{r4, lr}
1000b232:	b088      	sub	sp, #32
    struct dualtimer_config config_dualtimer;
    dualtimer_get_config_defaults(&config_dualtimer);
1000b234:	ac01      	add	r4, sp, #4
1000b236:	0020      	movs	r0, r4
1000b238:	4b08      	ldr	r3, [pc, #32]	; (1000b25c <sms_dualtimer_init+0x2c>)
1000b23a:	4798      	blx	r3

    config_dualtimer.timer1.load_value = SMS_DUALTIMER_LOAD_S;
1000b23c:	4a08      	ldr	r2, [pc, #32]	; (1000b260 <sms_dualtimer_init+0x30>)
1000b23e:	60a2      	str	r2, [r4, #8]
    config_dualtimer.timer1.counter_mode = DUALTIMER_ONE_SHOT_MODE;
1000b240:	2300      	movs	r3, #0
1000b242:	7063      	strb	r3, [r4, #1]
    config_dualtimer.timer2.load_value = SMS_DUALTIMER_LOAD_S;
1000b244:	6162      	str	r2, [r4, #20]
    config_dualtimer.timer2.counter_mode = DUALTIMER_ONE_SHOT_MODE;
1000b246:	7363      	strb	r3, [r4, #13]

    dualtimer_init(&config_dualtimer);
1000b248:	0020      	movs	r0, r4
1000b24a:	4b06      	ldr	r3, [pc, #24]	; (1000b264 <sms_dualtimer_init+0x34>)
1000b24c:	4798      	blx	r3
    dualtimer_disable(DUALTIMER_TIMER1);
1000b24e:	2000      	movs	r0, #0
1000b250:	4c05      	ldr	r4, [pc, #20]	; (1000b268 <sms_dualtimer_init+0x38>)
1000b252:	47a0      	blx	r4
    dualtimer_disable(DUALTIMER_TIMER2);
1000b254:	2001      	movs	r0, #1
1000b256:	47a0      	blx	r4
}
1000b258:	b008      	add	sp, #32
1000b25a:	bd10      	pop	{r4, pc}
1000b25c:	1000baf5 	.word	0x1000baf5
1000b260:	018cba80 	.word	0x018cba80
1000b264:	1000bb89 	.word	0x1000bb89
1000b268:	1000bb65 	.word	0x1000bb65

1000b26c <sms_dualtimer_register_callback>:

void sms_dualtimer_register_callback(enum dualtimer_timer tmr, sms_dualtimer_callback_t cb_handler)
{
1000b26c:	b510      	push	{r4, lr}
1000b26e:	0004      	movs	r4, r0
    dualtimer_register_callback(tmr, cb_handler);
1000b270:	4b02      	ldr	r3, [pc, #8]	; (1000b27c <sms_dualtimer_register_callback+0x10>)
1000b272:	4798      	blx	r3
    NVIC_EnableIRQ(DUALTIMER0_IRQn);
}

void sms_dualtimer_stop(enum dualtimer_timer tmr)
{
    dualtimer_disable(tmr);
1000b274:	0020      	movs	r0, r4
1000b276:	4b02      	ldr	r3, [pc, #8]	; (1000b280 <sms_dualtimer_register_callback+0x14>)
1000b278:	4798      	blx	r3

void sms_dualtimer_register_callback(enum dualtimer_timer tmr, sms_dualtimer_callback_t cb_handler)
{
    dualtimer_register_callback(tmr, cb_handler);
    sms_dualtimer_stop(tmr);
}
1000b27a:	bd10      	pop	{r4, pc}
1000b27c:	1000bc8d 	.word	0x1000bc8d
1000b280:	1000bb65 	.word	0x1000bb65

1000b284 <sms_dualtimer_start>:

void sms_dualtimer_start(timer_unit_type_t unit, uint32_t delay, enum dualtimer_timer tmr)
{
1000b284:	b510      	push	{r4, lr}
1000b286:	0014      	movs	r4, r2
    uint32_t timer_load = 1;
    switch(unit) {
1000b288:	2801      	cmp	r0, #1
1000b28a:	d006      	beq.n	1000b29a <sms_dualtimer_start+0x16>
1000b28c:	2800      	cmp	r0, #0
1000b28e:	d002      	beq.n	1000b296 <sms_dualtimer_start+0x12>
1000b290:	2802      	cmp	r0, #2
1000b292:	d004      	beq.n	1000b29e <sms_dualtimer_start+0x1a>
1000b294:	e005      	b.n	1000b2a2 <sms_dualtimer_start+0x1e>
        case TIMER_UNIT_US:
        timer_load = SMS_DUALTIMER_LOAD_US;
1000b296:	221a      	movs	r2, #26
1000b298:	e004      	b.n	1000b2a4 <sms_dualtimer_start+0x20>
        break;
        
        case TIMER_UNIT_MS:
        timer_load = SMS_DUALTIMER_LOAD_MS;
1000b29a:	4a0c      	ldr	r2, [pc, #48]	; (1000b2cc <sms_dualtimer_start+0x48>)
        break;
1000b29c:	e002      	b.n	1000b2a4 <sms_dualtimer_start+0x20>
        
        case TIMER_UNIT_S:
        timer_load = SMS_DUALTIMER_LOAD_S;
1000b29e:	4a0c      	ldr	r2, [pc, #48]	; (1000b2d0 <sms_dualtimer_start+0x4c>)
        break;
1000b2a0:	e000      	b.n	1000b2a4 <sms_dualtimer_start+0x20>
    sms_dualtimer_stop(tmr);
}

void sms_dualtimer_start(timer_unit_type_t unit, uint32_t delay, enum dualtimer_timer tmr)
{
    uint32_t timer_load = 1;
1000b2a2:	2201      	movs	r2, #1
        
        default:
        break;
    }
    
    if(delay <= 0) {
1000b2a4:	2900      	cmp	r1, #0
1000b2a6:	d101      	bne.n	1000b2ac <sms_dualtimer_start+0x28>
        //DBG_LOG("[sms_dualtimer_start]\tWarning! Delay value < 0... setting to 1000");
        delay = 1000;
1000b2a8:	21fa      	movs	r1, #250	; 0xfa
1000b2aa:	0089      	lsls	r1, r1, #2
    }
    
    ulp_ready = false;
1000b2ac:	2000      	movs	r0, #0
1000b2ae:	4b09      	ldr	r3, [pc, #36]	; (1000b2d4 <sms_dualtimer_start+0x50>)
1000b2b0:	7018      	strb	r0, [r3, #0]
    //DBG_LOG_DEV("[sms_dualtimer_start]\t\tStarting timer%d... load: %ld, delay: %ld", (tmr+1), timer_load, delay);
    dualtimer_set_counter(tmr, DUALTIMER_SET_CURRUNT_REG, timer_load * delay);
1000b2b2:	434a      	muls	r2, r1
1000b2b4:	2100      	movs	r1, #0
1000b2b6:	0020      	movs	r0, r4
1000b2b8:	4b07      	ldr	r3, [pc, #28]	; (1000b2d8 <sms_dualtimer_start+0x54>)
1000b2ba:	4798      	blx	r3
    dualtimer_enable(tmr);
1000b2bc:	0020      	movs	r0, r4
1000b2be:	4b07      	ldr	r3, [pc, #28]	; (1000b2dc <sms_dualtimer_start+0x58>)
1000b2c0:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000b2c2:	2280      	movs	r2, #128	; 0x80
1000b2c4:	01d2      	lsls	r2, r2, #7
1000b2c6:	4b06      	ldr	r3, [pc, #24]	; (1000b2e0 <sms_dualtimer_start+0x5c>)
1000b2c8:	601a      	str	r2, [r3, #0]
    NVIC_EnableIRQ(DUALTIMER0_IRQn);
}
1000b2ca:	bd10      	pop	{r4, pc}
1000b2cc:	00006590 	.word	0x00006590
1000b2d0:	018cba80 	.word	0x018cba80
1000b2d4:	10019b01 	.word	0x10019b01
1000b2d8:	1000bb19 	.word	0x1000bb19
1000b2dc:	1000bb41 	.word	0x1000bb41
1000b2e0:	e000e100 	.word	0xe000e100

1000b2e4 <sms_dualtimer_stop>:

void sms_dualtimer_stop(enum dualtimer_timer tmr)
{
1000b2e4:	b510      	push	{r4, lr}
    dualtimer_disable(tmr);
1000b2e6:	4b01      	ldr	r3, [pc, #4]	; (1000b2ec <sms_dualtimer_stop+0x8>)
1000b2e8:	4798      	blx	r3
}
1000b2ea:	bd10      	pop	{r4, pc}
1000b2ec:	1000bb65 	.word	0x1000bb65

1000b2f0 <sms_dualtimer1_cb>:

void sms_dualtimer1_cb(void)
{
1000b2f0:	b510      	push	{r4, lr}
    sms_current_interrupt.source = INT_DUALTIMER1;
1000b2f2:	2205      	movs	r2, #5
1000b2f4:	4b04      	ldr	r3, [pc, #16]	; (1000b308 <sms_dualtimer1_cb+0x18>)
1000b2f6:	701a      	strb	r2, [r3, #0]
    send_plf_int_msg_ind(DUALTIMER_TIMER1_CALLBACK, TIMER_EXPIRED_CALLBACK_TYPE_DETECT, NULL, 0);
1000b2f8:	2300      	movs	r3, #0
1000b2fa:	2200      	movs	r2, #0
1000b2fc:	2101      	movs	r1, #1
1000b2fe:	2040      	movs	r0, #64	; 0x40
1000b300:	4c02      	ldr	r4, [pc, #8]	; (1000b30c <sms_dualtimer1_cb+0x1c>)
1000b302:	47a0      	blx	r4
}
1000b304:	bd10      	pop	{r4, pc}
1000b306:	46c0      	nop			; (mov r8, r8)
1000b308:	10019c00 	.word	0x10019c00
1000b30c:	1000f0c5 	.word	0x1000f0c5

1000b310 <sms_dualtimer2_cb>:

void sms_dualtimer2_cb(void)
{
1000b310:	b510      	push	{r4, lr}
    sms_current_interrupt.source = INT_DUALTIMER2;
1000b312:	2206      	movs	r2, #6
1000b314:	4b04      	ldr	r3, [pc, #16]	; (1000b328 <sms_dualtimer2_cb+0x18>)
1000b316:	701a      	strb	r2, [r3, #0]
    send_plf_int_msg_ind(DUALTIMER_TIMER2_CALLBACK, TIMER_EXPIRED_CALLBACK_TYPE_DETECT, NULL, 0);
1000b318:	2300      	movs	r3, #0
1000b31a:	2200      	movs	r2, #0
1000b31c:	2101      	movs	r1, #1
1000b31e:	2041      	movs	r0, #65	; 0x41
1000b320:	4c02      	ldr	r4, [pc, #8]	; (1000b32c <sms_dualtimer2_cb+0x1c>)
1000b322:	47a0      	blx	r4
}
1000b324:	bd10      	pop	{r4, pc}
1000b326:	46c0      	nop			; (mov r8, r8)
1000b328:	10019c00 	.word	0x10019c00
1000b32c:	1000f0c5 	.word	0x1000f0c5

1000b330 <sms_dualtimer1_fn>:


void sms_dualtimer1_fn(void)
{
1000b330:	b510      	push	{r4, lr}
    //sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
    switch(timer1_current_mode) {
1000b332:	4ba7      	ldr	r3, [pc, #668]	; (1000b5d0 <sms_dualtimer1_fn+0x2a0>)
1000b334:	781b      	ldrb	r3, [r3, #0]
1000b336:	b2db      	uxtb	r3, r3
1000b338:	2b02      	cmp	r3, #2
1000b33a:	d006      	beq.n	1000b34a <sms_dualtimer1_fn+0x1a>
1000b33c:	2b03      	cmp	r3, #3
1000b33e:	d100      	bne.n	1000b342 <sms_dualtimer1_fn+0x12>
1000b340:	e103      	b.n	1000b54a <sms_dualtimer1_fn+0x21a>
1000b342:	2b01      	cmp	r3, #1
1000b344:	d000      	beq.n	1000b348 <sms_dualtimer1_fn+0x18>
1000b346:	e13a      	b.n	1000b5be <sms_dualtimer1_fn+0x28e>
1000b348:	e051      	b.n	1000b3ee <sms_dualtimer1_fn+0xbe>
        /* Timer1 mode = MS58_RESET */
        case TIMER1_MODE_MS58_RESET:
        {
            timer1_current_mode = TIMER1_MODE_NONE;
1000b34a:	2200      	movs	r2, #0
1000b34c:	4ba0      	ldr	r3, [pc, #640]	; (1000b5d0 <sms_dualtimer1_fn+0x2a0>)
1000b34e:	701a      	strb	r2, [r3, #0]
            pressure_device.ms58_device.reset_done = true;
1000b350:	4ba0      	ldr	r3, [pc, #640]	; (1000b5d4 <sms_dualtimer1_fn+0x2a4>)
1000b352:	2101      	movs	r1, #1
1000b354:	7059      	strb	r1, [r3, #1]
            pressure_device.ms58_device.init_retry = 0;
1000b356:	3125      	adds	r1, #37	; 0x25
1000b358:	545a      	strb	r2, [r3, r1]
            if(sms_pressure_init() != STATUS_OK) {
1000b35a:	4b9f      	ldr	r3, [pc, #636]	; (1000b5d8 <sms_dualtimer1_fn+0x2a8>)
1000b35c:	4798      	blx	r3
1000b35e:	2800      	cmp	r0, #0
1000b360:	d02b      	beq.n	1000b3ba <sms_dualtimer1_fn+0x8a>
                DBG_LOG_DEV("[sms_dualtimer1_fn]\tFailed to init ms58 device");
1000b362:	489e      	ldr	r0, [pc, #632]	; (1000b5dc <sms_dualtimer1_fn+0x2ac>)
1000b364:	4b9e      	ldr	r3, [pc, #632]	; (1000b5e0 <sms_dualtimer1_fn+0x2b0>)
1000b366:	4798      	blx	r3
1000b368:	489e      	ldr	r0, [pc, #632]	; (1000b5e4 <sms_dualtimer1_fn+0x2b4>)
1000b36a:	4b9f      	ldr	r3, [pc, #636]	; (1000b5e8 <sms_dualtimer1_fn+0x2b8>)
1000b36c:	4798      	blx	r3
                pressure_device.ms58_device.init_retry++;
1000b36e:	4999      	ldr	r1, [pc, #612]	; (1000b5d4 <sms_dualtimer1_fn+0x2a4>)
1000b370:	2226      	movs	r2, #38	; 0x26
1000b372:	5c8b      	ldrb	r3, [r1, r2]
1000b374:	3301      	adds	r3, #1
1000b376:	b2db      	uxtb	r3, r3
1000b378:	548b      	strb	r3, [r1, r2]
                if(pressure_device.ms58_device.init_retry >= MS58_INIT_RETRY_MAX) {
1000b37a:	2b03      	cmp	r3, #3
1000b37c:	d914      	bls.n	1000b3a8 <sms_dualtimer1_fn+0x78>
                    DBG_LOG_DEV("[sms_dualtimer1_fn]\tFailed to initialize pressure sensor. Working mode = BUTTON_SOLO");
1000b37e:	4897      	ldr	r0, [pc, #604]	; (1000b5dc <sms_dualtimer1_fn+0x2ac>)
1000b380:	4b97      	ldr	r3, [pc, #604]	; (1000b5e0 <sms_dualtimer1_fn+0x2b0>)
1000b382:	4798      	blx	r3
1000b384:	4899      	ldr	r0, [pc, #612]	; (1000b5ec <sms_dualtimer1_fn+0x2bc>)
1000b386:	4b98      	ldr	r3, [pc, #608]	; (1000b5e8 <sms_dualtimer1_fn+0x2b8>)
1000b388:	4798      	blx	r3
                    pressure_device.ms58_device.current_state = MS58_STATE_NONE;
1000b38a:	2100      	movs	r1, #0
1000b38c:	2325      	movs	r3, #37	; 0x25
1000b38e:	4a91      	ldr	r2, [pc, #580]	; (1000b5d4 <sms_dualtimer1_fn+0x2a4>)
1000b390:	54d1      	strb	r1, [r2, r3]
                    sms_working_mode = SMS_MODE_BUTTON_SOLO;
1000b392:	2201      	movs	r2, #1
1000b394:	4b96      	ldr	r3, [pc, #600]	; (1000b5f0 <sms_dualtimer1_fn+0x2c0>)
1000b396:	701a      	strb	r2, [r3, #0]
                    // Init IMU device...
                    //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                    if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b398:	4b96      	ldr	r3, [pc, #600]	; (1000b5f4 <sms_dualtimer1_fn+0x2c4>)
1000b39a:	781b      	ldrb	r3, [r3, #0]
1000b39c:	2b00      	cmp	r3, #0
1000b39e:	d000      	beq.n	1000b3a2 <sms_dualtimer1_fn+0x72>
1000b3a0:	e114      	b.n	1000b5cc <sms_dualtimer1_fn+0x29c>
                        //release_sleep_lock();
                        ulp_ready = true;
1000b3a2:	4b95      	ldr	r3, [pc, #596]	; (1000b5f8 <sms_dualtimer1_fn+0x2c8>)
1000b3a4:	701a      	strb	r2, [r3, #0]
1000b3a6:	e111      	b.n	1000b5cc <sms_dualtimer1_fn+0x29c>
                    }                        
                }
                else {
                    timer1_current_mode = TIMER1_MODE_MS58_RESET;
1000b3a8:	2202      	movs	r2, #2
1000b3aa:	4b89      	ldr	r3, [pc, #548]	; (1000b5d0 <sms_dualtimer1_fn+0x2a0>)
1000b3ac:	701a      	strb	r2, [r3, #0]
                    //ulp_ready = false;
                    sms_dualtimer_start(TIMER_UNIT_MS, MS58_RESET_WAIT_MS, DUALTIMER_TIMER1);
1000b3ae:	2200      	movs	r2, #0
1000b3b0:	2103      	movs	r1, #3
1000b3b2:	2001      	movs	r0, #1
1000b3b4:	4b91      	ldr	r3, [pc, #580]	; (1000b5fc <sms_dualtimer1_fn+0x2cc>)
1000b3b6:	4798      	blx	r3
1000b3b8:	e108      	b.n	1000b5cc <sms_dualtimer1_fn+0x29c>
                }
            }
            else {
                pressure_device.ms58_device.current_state = MS58_STATE_READY;
1000b3ba:	2102      	movs	r1, #2
1000b3bc:	2325      	movs	r3, #37	; 0x25
1000b3be:	4a85      	ldr	r2, [pc, #532]	; (1000b5d4 <sms_dualtimer1_fn+0x2a4>)
1000b3c0:	54d1      	strb	r1, [r2, r3]
                sms_working_mode = SMS_MODE_BUTTON_PRESSURE;
1000b3c2:	2205      	movs	r2, #5
1000b3c4:	4b8a      	ldr	r3, [pc, #552]	; (1000b5f0 <sms_dualtimer1_fn+0x2c0>)
1000b3c6:	701a      	strb	r2, [r3, #0]
                //DBG_LOG_DEV("[sms_dualtimer1_fn]\tPressure sensor initialized. Working mode = BUTTON_PRESSURE");
                DBG_LOG_DEV("[sms_dualtimer1_fn]\t\tStarting sensors (MS58 reset)...");
1000b3c8:	4884      	ldr	r0, [pc, #528]	; (1000b5dc <sms_dualtimer1_fn+0x2ac>)
1000b3ca:	4b85      	ldr	r3, [pc, #532]	; (1000b5e0 <sms_dualtimer1_fn+0x2b0>)
1000b3cc:	4798      	blx	r3
1000b3ce:	488c      	ldr	r0, [pc, #560]	; (1000b600 <sms_dualtimer1_fn+0x2d0>)
1000b3d0:	4b85      	ldr	r3, [pc, #532]	; (1000b5e8 <sms_dualtimer1_fn+0x2b8>)
1000b3d2:	4798      	blx	r3
                sms_sensors_interrupt_toggle(false, true);
1000b3d4:	2101      	movs	r1, #1
1000b3d6:	2000      	movs	r0, #0
1000b3d8:	4b8a      	ldr	r3, [pc, #552]	; (1000b604 <sms_dualtimer1_fn+0x2d4>)
1000b3da:	4798      	blx	r3
                // Init IMU device...
                //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b3dc:	4b85      	ldr	r3, [pc, #532]	; (1000b5f4 <sms_dualtimer1_fn+0x2c4>)
1000b3de:	781b      	ldrb	r3, [r3, #0]
1000b3e0:	2b00      	cmp	r3, #0
1000b3e2:	d000      	beq.n	1000b3e6 <sms_dualtimer1_fn+0xb6>
1000b3e4:	e0f2      	b.n	1000b5cc <sms_dualtimer1_fn+0x29c>
                    //release_sleep_lock();
                    ulp_ready = true;
1000b3e6:	2201      	movs	r2, #1
1000b3e8:	4b83      	ldr	r3, [pc, #524]	; (1000b5f8 <sms_dualtimer1_fn+0x2c8>)
1000b3ea:	701a      	strb	r2, [r3, #0]
1000b3ec:	e0ee      	b.n	1000b5cc <sms_dualtimer1_fn+0x29c>
        }
        
        /* Timer1 mode = STARTUP */
        case TIMER1_MODE_STARTUP:
        {
            timer1_current_mode = TIMER1_MODE_NONE;
1000b3ee:	2200      	movs	r2, #0
1000b3f0:	4b77      	ldr	r3, [pc, #476]	; (1000b5d0 <sms_dualtimer1_fn+0x2a0>)
1000b3f2:	701a      	strb	r2, [r3, #0]
            button_instance.previous_state = button_instance.current_state;
1000b3f4:	4c84      	ldr	r4, [pc, #528]	; (1000b608 <sms_dualtimer1_fn+0x2d8>)
1000b3f6:	7863      	ldrb	r3, [r4, #1]
1000b3f8:	7023      	strb	r3, [r4, #0]
            button_instance.current_state = sms_button_get_state();
1000b3fa:	4b84      	ldr	r3, [pc, #528]	; (1000b60c <sms_dualtimer1_fn+0x2dc>)
1000b3fc:	4798      	blx	r3
1000b3fe:	7060      	strb	r0, [r4, #1]
            sms_monitor_get_states("[sms_dualtimer1_fn]");
1000b400:	4883      	ldr	r0, [pc, #524]	; (1000b610 <sms_dualtimer1_fn+0x2e0>)
1000b402:	4b84      	ldr	r3, [pc, #528]	; (1000b614 <sms_dualtimer1_fn+0x2e4>)
1000b404:	4798      	blx	r3
            
            switch(button_instance.previous_state) {
1000b406:	7823      	ldrb	r3, [r4, #0]
1000b408:	2b01      	cmp	r3, #1
1000b40a:	d002      	beq.n	1000b412 <sms_dualtimer1_fn+0xe2>
1000b40c:	2b02      	cmp	r3, #2
1000b40e:	d04c      	beq.n	1000b4aa <sms_dualtimer1_fn+0x17a>
1000b410:	e093      	b.n	1000b53a <sms_dualtimer1_fn+0x20a>
                // --- Timer1 mode = STARTUP: switch prev_state ---
                case BUTTON_STATE_B0:
                switch(button_instance.current_state) {
1000b412:	4b7d      	ldr	r3, [pc, #500]	; (1000b608 <sms_dualtimer1_fn+0x2d8>)
1000b414:	785b      	ldrb	r3, [r3, #1]
1000b416:	2b01      	cmp	r3, #1
1000b418:	d002      	beq.n	1000b420 <sms_dualtimer1_fn+0xf0>
1000b41a:	2b02      	cmp	r3, #2
1000b41c:	d023      	beq.n	1000b466 <sms_dualtimer1_fn+0x136>
1000b41e:	e03b      	b.n	1000b498 <sms_dualtimer1_fn+0x168>
                    // --- prev_state = b0: switch current_state ---
                    case BUTTON_STATE_B0:
                    if(ble_current_state == BLE_STATE_POWEROFF) {
1000b420:	4b7d      	ldr	r3, [pc, #500]	; (1000b618 <sms_dualtimer1_fn+0x2e8>)
1000b422:	781b      	ldrb	r3, [r3, #0]
1000b424:	2b00      	cmp	r3, #0
1000b426:	d115      	bne.n	1000b454 <sms_dualtimer1_fn+0x124>
                        sms_btn_cnt++;
1000b428:	4a7c      	ldr	r2, [pc, #496]	; (1000b61c <sms_dualtimer1_fn+0x2ec>)
1000b42a:	7813      	ldrb	r3, [r2, #0]
1000b42c:	3301      	adds	r3, #1
1000b42e:	b2db      	uxtb	r3, r3
1000b430:	7013      	strb	r3, [r2, #0]
                        if(sms_btn_cnt >= SMS_BTN_STARTUP_CNT) {
1000b432:	2b0f      	cmp	r3, #15
1000b434:	d905      	bls.n	1000b442 <sms_dualtimer1_fn+0x112>
                            timer1_current_mode = TIMER1_MODE_NONE;
1000b436:	2200      	movs	r2, #0
1000b438:	4b65      	ldr	r3, [pc, #404]	; (1000b5d0 <sms_dualtimer1_fn+0x2a0>)
1000b43a:	701a      	strb	r2, [r3, #0]
                            sms_ble_startup();
1000b43c:	4b78      	ldr	r3, [pc, #480]	; (1000b620 <sms_dualtimer1_fn+0x2f0>)
1000b43e:	4798      	blx	r3
1000b440:	e0c4      	b.n	1000b5cc <sms_dualtimer1_fn+0x29c>
                        }
                        else {
                            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                            timer1_current_mode = TIMER1_MODE_STARTUP;
1000b442:	2201      	movs	r2, #1
1000b444:	4b62      	ldr	r3, [pc, #392]	; (1000b5d0 <sms_dualtimer1_fn+0x2a0>)
1000b446:	701a      	strb	r2, [r3, #0]
                            //ulp_ready = false;
                            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
1000b448:	2200      	movs	r2, #0
1000b44a:	21fa      	movs	r1, #250	; 0xfa
1000b44c:	2001      	movs	r0, #1
1000b44e:	4b6b      	ldr	r3, [pc, #428]	; (1000b5fc <sms_dualtimer1_fn+0x2cc>)
1000b450:	4798      	blx	r3
1000b452:	e0bb      	b.n	1000b5cc <sms_dualtimer1_fn+0x29c>
                        }
                    }
                    else {
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b454:	4b67      	ldr	r3, [pc, #412]	; (1000b5f4 <sms_dualtimer1_fn+0x2c4>)
1000b456:	781b      	ldrb	r3, [r3, #0]
1000b458:	2b00      	cmp	r3, #0
1000b45a:	d000      	beq.n	1000b45e <sms_dualtimer1_fn+0x12e>
1000b45c:	e0b6      	b.n	1000b5cc <sms_dualtimer1_fn+0x29c>
                            //release_sleep_lock();
                            ulp_ready = true;
1000b45e:	2201      	movs	r2, #1
1000b460:	4b65      	ldr	r3, [pc, #404]	; (1000b5f8 <sms_dualtimer1_fn+0x2c8>)
1000b462:	701a      	strb	r2, [r3, #0]
1000b464:	e0b2      	b.n	1000b5cc <sms_dualtimer1_fn+0x29c>
                    }
                    break;
                    
                    // --- prev_state = b0: switch current_state ---
                    case BUTTON_STATE_B1:
                    if(ble_current_state == BLE_STATE_POWEROFF) {
1000b466:	4b6c      	ldr	r3, [pc, #432]	; (1000b618 <sms_dualtimer1_fn+0x2e8>)
1000b468:	781b      	ldrb	r3, [r3, #0]
1000b46a:	2b00      	cmp	r3, #0
1000b46c:	d10b      	bne.n	1000b486 <sms_dualtimer1_fn+0x156>
                        sms_btn_cnt = 0;
1000b46e:	2200      	movs	r2, #0
1000b470:	4b6a      	ldr	r3, [pc, #424]	; (1000b61c <sms_dualtimer1_fn+0x2ec>)
1000b472:	701a      	strb	r2, [r3, #0]
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        timer1_current_mode = TIMER1_MODE_STARTUP;
1000b474:	3201      	adds	r2, #1
1000b476:	4b56      	ldr	r3, [pc, #344]	; (1000b5d0 <sms_dualtimer1_fn+0x2a0>)
1000b478:	701a      	strb	r2, [r3, #0]
                        //ulp_ready = false;
                        sms_dualtimer_start(TIMER_UNIT_MS, SMS_BLINK_STARTUP_MS, DUALTIMER_TIMER1);
1000b47a:	2200      	movs	r2, #0
1000b47c:	2164      	movs	r1, #100	; 0x64
1000b47e:	2001      	movs	r0, #1
1000b480:	4b5e      	ldr	r3, [pc, #376]	; (1000b5fc <sms_dualtimer1_fn+0x2cc>)
1000b482:	4798      	blx	r3
1000b484:	e0a2      	b.n	1000b5cc <sms_dualtimer1_fn+0x29c>
                    }
                    else {
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b486:	4b5b      	ldr	r3, [pc, #364]	; (1000b5f4 <sms_dualtimer1_fn+0x2c4>)
1000b488:	781b      	ldrb	r3, [r3, #0]
1000b48a:	2b00      	cmp	r3, #0
1000b48c:	d000      	beq.n	1000b490 <sms_dualtimer1_fn+0x160>
1000b48e:	e09d      	b.n	1000b5cc <sms_dualtimer1_fn+0x29c>
                            //release_sleep_lock();
                            ulp_ready = true;
1000b490:	2201      	movs	r2, #1
1000b492:	4b59      	ldr	r3, [pc, #356]	; (1000b5f8 <sms_dualtimer1_fn+0x2c8>)
1000b494:	701a      	strb	r2, [r3, #0]
1000b496:	e099      	b.n	1000b5cc <sms_dualtimer1_fn+0x29c>
                    // --- prev_state = b0: switch current_state ---
                    case BUTTON_STATE_BOTH:
                    case BUTTON_STATE_NONE:
                    default:
                    //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                    if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b498:	4b56      	ldr	r3, [pc, #344]	; (1000b5f4 <sms_dualtimer1_fn+0x2c4>)
1000b49a:	781b      	ldrb	r3, [r3, #0]
1000b49c:	2b00      	cmp	r3, #0
1000b49e:	d000      	beq.n	1000b4a2 <sms_dualtimer1_fn+0x172>
1000b4a0:	e094      	b.n	1000b5cc <sms_dualtimer1_fn+0x29c>
                        //release_sleep_lock();
                        ulp_ready = true;
1000b4a2:	2201      	movs	r2, #1
1000b4a4:	4b54      	ldr	r3, [pc, #336]	; (1000b5f8 <sms_dualtimer1_fn+0x2c8>)
1000b4a6:	701a      	strb	r2, [r3, #0]
1000b4a8:	e090      	b.n	1000b5cc <sms_dualtimer1_fn+0x29c>
                }
                break;
                
                // --- Timer1 mode = STARTUP: switch prev_state ---
                case BUTTON_STATE_B1:
                switch(button_instance.current_state) {
1000b4aa:	4b57      	ldr	r3, [pc, #348]	; (1000b608 <sms_dualtimer1_fn+0x2d8>)
1000b4ac:	785b      	ldrb	r3, [r3, #1]
1000b4ae:	2b01      	cmp	r3, #1
1000b4b0:	d023      	beq.n	1000b4fa <sms_dualtimer1_fn+0x1ca>
1000b4b2:	2b02      	cmp	r3, #2
1000b4b4:	d139      	bne.n	1000b52a <sms_dualtimer1_fn+0x1fa>
                    // --- prev_state = b1: switch current_state ---
                    case BUTTON_STATE_B1:
                    if(ble_current_state == BLE_STATE_POWEROFF) {
1000b4b6:	4b58      	ldr	r3, [pc, #352]	; (1000b618 <sms_dualtimer1_fn+0x2e8>)
1000b4b8:	781b      	ldrb	r3, [r3, #0]
1000b4ba:	2b00      	cmp	r3, #0
1000b4bc:	d115      	bne.n	1000b4ea <sms_dualtimer1_fn+0x1ba>
                        sms_btn_cnt++;
1000b4be:	4a57      	ldr	r2, [pc, #348]	; (1000b61c <sms_dualtimer1_fn+0x2ec>)
1000b4c0:	7813      	ldrb	r3, [r2, #0]
1000b4c2:	3301      	adds	r3, #1
1000b4c4:	b2db      	uxtb	r3, r3
1000b4c6:	7013      	strb	r3, [r2, #0]
                        if(sms_btn_cnt >= SMS_BTN_STARTUP_CNT) {
1000b4c8:	2b0f      	cmp	r3, #15
1000b4ca:	d905      	bls.n	1000b4d8 <sms_dualtimer1_fn+0x1a8>
                            timer1_current_mode = TIMER1_MODE_NONE;
1000b4cc:	2200      	movs	r2, #0
1000b4ce:	4b40      	ldr	r3, [pc, #256]	; (1000b5d0 <sms_dualtimer1_fn+0x2a0>)
1000b4d0:	701a      	strb	r2, [r3, #0]
                            sms_ble_startup();
1000b4d2:	4b53      	ldr	r3, [pc, #332]	; (1000b620 <sms_dualtimer1_fn+0x2f0>)
1000b4d4:	4798      	blx	r3
1000b4d6:	e079      	b.n	1000b5cc <sms_dualtimer1_fn+0x29c>
                        }
                        else {
                            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                            timer1_current_mode = TIMER1_MODE_STARTUP;
1000b4d8:	2201      	movs	r2, #1
1000b4da:	4b3d      	ldr	r3, [pc, #244]	; (1000b5d0 <sms_dualtimer1_fn+0x2a0>)
1000b4dc:	701a      	strb	r2, [r3, #0]
                            //ulp_ready = false;
                            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
1000b4de:	2200      	movs	r2, #0
1000b4e0:	21fa      	movs	r1, #250	; 0xfa
1000b4e2:	2001      	movs	r0, #1
1000b4e4:	4b45      	ldr	r3, [pc, #276]	; (1000b5fc <sms_dualtimer1_fn+0x2cc>)
1000b4e6:	4798      	blx	r3
1000b4e8:	e070      	b.n	1000b5cc <sms_dualtimer1_fn+0x29c>
                        }
                    }
                    else {
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b4ea:	4b42      	ldr	r3, [pc, #264]	; (1000b5f4 <sms_dualtimer1_fn+0x2c4>)
1000b4ec:	781b      	ldrb	r3, [r3, #0]
1000b4ee:	2b00      	cmp	r3, #0
1000b4f0:	d16c      	bne.n	1000b5cc <sms_dualtimer1_fn+0x29c>
                            //release_sleep_lock();
                            ulp_ready = true;
1000b4f2:	2201      	movs	r2, #1
1000b4f4:	4b40      	ldr	r3, [pc, #256]	; (1000b5f8 <sms_dualtimer1_fn+0x2c8>)
1000b4f6:	701a      	strb	r2, [r3, #0]
1000b4f8:	e068      	b.n	1000b5cc <sms_dualtimer1_fn+0x29c>
                    }
                    break;
                    
                    // --- prev_state = b1: switch current_state ---
                    case BUTTON_STATE_B0:
                    if(ble_current_state == BLE_STATE_POWEROFF) {
1000b4fa:	4b47      	ldr	r3, [pc, #284]	; (1000b618 <sms_dualtimer1_fn+0x2e8>)
1000b4fc:	781b      	ldrb	r3, [r3, #0]
1000b4fe:	2b00      	cmp	r3, #0
1000b500:	d10b      	bne.n	1000b51a <sms_dualtimer1_fn+0x1ea>
                        sms_btn_cnt = 0;
1000b502:	2200      	movs	r2, #0
1000b504:	4b45      	ldr	r3, [pc, #276]	; (1000b61c <sms_dualtimer1_fn+0x2ec>)
1000b506:	701a      	strb	r2, [r3, #0]
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        timer1_current_mode = TIMER1_MODE_STARTUP;
1000b508:	3201      	adds	r2, #1
1000b50a:	4b31      	ldr	r3, [pc, #196]	; (1000b5d0 <sms_dualtimer1_fn+0x2a0>)
1000b50c:	701a      	strb	r2, [r3, #0]
                        //ulp_ready = false;
                        sms_dualtimer_start(TIMER_UNIT_MS, SMS_BLINK_STARTUP_MS, DUALTIMER_TIMER1);
1000b50e:	2200      	movs	r2, #0
1000b510:	2164      	movs	r1, #100	; 0x64
1000b512:	2001      	movs	r0, #1
1000b514:	4b39      	ldr	r3, [pc, #228]	; (1000b5fc <sms_dualtimer1_fn+0x2cc>)
1000b516:	4798      	blx	r3
1000b518:	e058      	b.n	1000b5cc <sms_dualtimer1_fn+0x29c>
                    }
                    else {
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b51a:	4b36      	ldr	r3, [pc, #216]	; (1000b5f4 <sms_dualtimer1_fn+0x2c4>)
1000b51c:	781b      	ldrb	r3, [r3, #0]
1000b51e:	2b00      	cmp	r3, #0
1000b520:	d154      	bne.n	1000b5cc <sms_dualtimer1_fn+0x29c>
                            //release_sleep_lock();
                            ulp_ready = true;
1000b522:	2201      	movs	r2, #1
1000b524:	4b34      	ldr	r3, [pc, #208]	; (1000b5f8 <sms_dualtimer1_fn+0x2c8>)
1000b526:	701a      	strb	r2, [r3, #0]
1000b528:	e050      	b.n	1000b5cc <sms_dualtimer1_fn+0x29c>
                    // --- prev_state = b1: switch current_state ---
                    case BUTTON_STATE_NONE:
                    case BUTTON_STATE_BOTH:
                    default:
                    //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                    if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b52a:	4b32      	ldr	r3, [pc, #200]	; (1000b5f4 <sms_dualtimer1_fn+0x2c4>)
1000b52c:	781b      	ldrb	r3, [r3, #0]
1000b52e:	2b00      	cmp	r3, #0
1000b530:	d14c      	bne.n	1000b5cc <sms_dualtimer1_fn+0x29c>
                        //release_sleep_lock();
                        ulp_ready = true;
1000b532:	2201      	movs	r2, #1
1000b534:	4b30      	ldr	r3, [pc, #192]	; (1000b5f8 <sms_dualtimer1_fn+0x2c8>)
1000b536:	701a      	strb	r2, [r3, #0]
1000b538:	e048      	b.n	1000b5cc <sms_dualtimer1_fn+0x29c>
                case BUTTON_STATE_NONE:
                case BUTTON_STATE_BOTH:
                default:
                {
                    //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                    if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b53a:	4b2e      	ldr	r3, [pc, #184]	; (1000b5f4 <sms_dualtimer1_fn+0x2c4>)
1000b53c:	781b      	ldrb	r3, [r3, #0]
1000b53e:	2b00      	cmp	r3, #0
1000b540:	d144      	bne.n	1000b5cc <sms_dualtimer1_fn+0x29c>
                        //release_sleep_lock();
                        ulp_ready = true;
1000b542:	2201      	movs	r2, #1
1000b544:	4b2c      	ldr	r3, [pc, #176]	; (1000b5f8 <sms_dualtimer1_fn+0x2c8>)
1000b546:	701a      	strb	r2, [r3, #0]
1000b548:	e040      	b.n	1000b5cc <sms_dualtimer1_fn+0x29c>
        
        /* Timer1 mode = SHUTDOWN */
        case TIMER1_MODE_SHUTDOWN:
        {
            //timer1_current_mode = TIMER1_MODE_NONE;
            button_instance.previous_state = button_instance.current_state;
1000b54a:	4c2f      	ldr	r4, [pc, #188]	; (1000b608 <sms_dualtimer1_fn+0x2d8>)
1000b54c:	7863      	ldrb	r3, [r4, #1]
1000b54e:	7023      	strb	r3, [r4, #0]
            button_instance.current_state = sms_button_get_state();
1000b550:	4b2e      	ldr	r3, [pc, #184]	; (1000b60c <sms_dualtimer1_fn+0x2dc>)
1000b552:	4798      	blx	r3
1000b554:	7060      	strb	r0, [r4, #1]
            sms_monitor_get_states("[sms_dualtimer1_fn]");
1000b556:	482e      	ldr	r0, [pc, #184]	; (1000b610 <sms_dualtimer1_fn+0x2e0>)
1000b558:	4b2e      	ldr	r3, [pc, #184]	; (1000b614 <sms_dualtimer1_fn+0x2e4>)
1000b55a:	4798      	blx	r3
            
            if((button_instance.previous_state == BUTTON_STATE_BOTH) && (button_instance.current_state == BUTTON_STATE_BOTH)) {
1000b55c:	8822      	ldrh	r2, [r4, #0]
1000b55e:	4b31      	ldr	r3, [pc, #196]	; (1000b624 <sms_dualtimer1_fn+0x2f4>)
1000b560:	429a      	cmp	r2, r3
1000b562:	d112      	bne.n	1000b58a <sms_dualtimer1_fn+0x25a>
                sms_btn_cnt++;
1000b564:	4a2d      	ldr	r2, [pc, #180]	; (1000b61c <sms_dualtimer1_fn+0x2ec>)
1000b566:	7813      	ldrb	r3, [r2, #0]
1000b568:	3301      	adds	r3, #1
1000b56a:	b2db      	uxtb	r3, r3
1000b56c:	7013      	strb	r3, [r2, #0]
                if(sms_btn_cnt >= SMS_BTN_SHTDWN_CNT) {
1000b56e:	2b09      	cmp	r3, #9
1000b570:	d902      	bls.n	1000b578 <sms_dualtimer1_fn+0x248>
                    sms_ble_power_down();
1000b572:	4b2d      	ldr	r3, [pc, #180]	; (1000b628 <sms_dualtimer1_fn+0x2f8>)
1000b574:	4798      	blx	r3
1000b576:	e029      	b.n	1000b5cc <sms_dualtimer1_fn+0x29c>
                }
                else {
                    //sms_sensors_toggle_interrupt(SMS_EXTINT_DISABLE);
                    timer1_current_mode = TIMER1_MODE_SHUTDOWN;
1000b578:	2203      	movs	r2, #3
1000b57a:	4b15      	ldr	r3, [pc, #84]	; (1000b5d0 <sms_dualtimer1_fn+0x2a0>)
1000b57c:	701a      	strb	r2, [r3, #0]
                    sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_SHTDWN_MS, DUALTIMER_TIMER1);
1000b57e:	2200      	movs	r2, #0
1000b580:	21fa      	movs	r1, #250	; 0xfa
1000b582:	2001      	movs	r0, #1
1000b584:	4b1d      	ldr	r3, [pc, #116]	; (1000b5fc <sms_dualtimer1_fn+0x2cc>)
1000b586:	4798      	blx	r3
1000b588:	e020      	b.n	1000b5cc <sms_dualtimer1_fn+0x29c>
                }
            }
            else {
                if(pressure_device.state == PRESSURE_STATE_STDBY) {
1000b58a:	2328      	movs	r3, #40	; 0x28
1000b58c:	4a11      	ldr	r2, [pc, #68]	; (1000b5d4 <sms_dualtimer1_fn+0x2a4>)
1000b58e:	5cd3      	ldrb	r3, [r2, r3]
1000b590:	2b01      	cmp	r3, #1
1000b592:	d109      	bne.n	1000b5a8 <sms_dualtimer1_fn+0x278>
                    DBG_LOG_DEV("[sms_dualtimer1_fn]\t\tStarting sensors (shutting down)...");
1000b594:	4811      	ldr	r0, [pc, #68]	; (1000b5dc <sms_dualtimer1_fn+0x2ac>)
1000b596:	4b12      	ldr	r3, [pc, #72]	; (1000b5e0 <sms_dualtimer1_fn+0x2b0>)
1000b598:	4798      	blx	r3
1000b59a:	4824      	ldr	r0, [pc, #144]	; (1000b62c <sms_dualtimer1_fn+0x2fc>)
1000b59c:	4b12      	ldr	r3, [pc, #72]	; (1000b5e8 <sms_dualtimer1_fn+0x2b8>)
1000b59e:	4798      	blx	r3
                    sms_sensors_interrupt_toggle(false, true);
1000b5a0:	2101      	movs	r1, #1
1000b5a2:	2000      	movs	r0, #0
1000b5a4:	4b17      	ldr	r3, [pc, #92]	; (1000b604 <sms_dualtimer1_fn+0x2d4>)
1000b5a6:	4798      	blx	r3
                }                    
                timer1_current_mode = TIMER1_MODE_NONE;
1000b5a8:	2200      	movs	r2, #0
1000b5aa:	4b09      	ldr	r3, [pc, #36]	; (1000b5d0 <sms_dualtimer1_fn+0x2a0>)
1000b5ac:	701a      	strb	r2, [r3, #0]
                if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b5ae:	4b11      	ldr	r3, [pc, #68]	; (1000b5f4 <sms_dualtimer1_fn+0x2c4>)
1000b5b0:	781b      	ldrb	r3, [r3, #0]
1000b5b2:	2b00      	cmp	r3, #0
1000b5b4:	d10a      	bne.n	1000b5cc <sms_dualtimer1_fn+0x29c>
                    ulp_ready = true;
1000b5b6:	3201      	adds	r2, #1
1000b5b8:	4b0f      	ldr	r3, [pc, #60]	; (1000b5f8 <sms_dualtimer1_fn+0x2c8>)
1000b5ba:	701a      	strb	r2, [r3, #0]
1000b5bc:	e006      	b.n	1000b5cc <sms_dualtimer1_fn+0x29c>
        }
        
        case TIMER1_MODE_NONE:
        default:
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
        if(timer2_current_mode == TIMER2_MODE_NONE) {
1000b5be:	4b0d      	ldr	r3, [pc, #52]	; (1000b5f4 <sms_dualtimer1_fn+0x2c4>)
1000b5c0:	781b      	ldrb	r3, [r3, #0]
1000b5c2:	2b00      	cmp	r3, #0
1000b5c4:	d102      	bne.n	1000b5cc <sms_dualtimer1_fn+0x29c>
            //release_sleep_lock();
            ulp_ready = true;
1000b5c6:	2201      	movs	r2, #1
1000b5c8:	4b0b      	ldr	r3, [pc, #44]	; (1000b5f8 <sms_dualtimer1_fn+0x2c8>)
1000b5ca:	701a      	strb	r2, [r3, #0]
        }            
        break;
    } // switch(timer1_current_mode)
}
1000b5cc:	bd10      	pop	{r4, pc}
1000b5ce:	46c0      	nop			; (mov r8, r8)
1000b5d0:	10019a74 	.word	0x10019a74
1000b5d4:	10019b7c 	.word	0x10019b7c
1000b5d8:	1000ae59 	.word	0x1000ae59
1000b5dc:	10015f9c 	.word	0x10015f9c
1000b5e0:	10014df5 	.word	0x10014df5
1000b5e4:	10016af8 	.word	0x10016af8
1000b5e8:	10014cd5 	.word	0x10014cd5
1000b5ec:	10016b28 	.word	0x10016b28
1000b5f0:	10019b00 	.word	0x10019b00
1000b5f4:	10019c19 	.word	0x10019c19
1000b5f8:	10019b01 	.word	0x10019b01
1000b5fc:	1000b285 	.word	0x1000b285
1000b600:	10016b80 	.word	0x10016b80
1000b604:	1000a7fd 	.word	0x1000a7fd
1000b608:	10019b08 	.word	0x10019b08
1000b60c:	1000a40d 	.word	0x1000a40d
1000b610:	10016bb8 	.word	0x10016bb8
1000b614:	1000a7a1 	.word	0x1000a7a1
1000b618:	10019c18 	.word	0x10019c18
1000b61c:	10019c36 	.word	0x10019c36
1000b620:	10009dad 	.word	0x10009dad
1000b624:	00000303 	.word	0x00000303
1000b628:	10009dc5 	.word	0x10009dc5
1000b62c:	10016bcc 	.word	0x10016bcc

1000b630 <sms_dualtimer2_fn>:

void sms_dualtimer2_fn(void)
{
1000b630:	b510      	push	{r4, lr}
    //sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
    sms_monitor_get_states("[sms_dualtimer2_fn]");
1000b632:	4846      	ldr	r0, [pc, #280]	; (1000b74c <sms_dualtimer2_fn+0x11c>)
1000b634:	4b46      	ldr	r3, [pc, #280]	; (1000b750 <sms_dualtimer2_fn+0x120>)
1000b636:	4798      	blx	r3
    switch(timer2_current_mode) {
1000b638:	4b46      	ldr	r3, [pc, #280]	; (1000b754 <sms_dualtimer2_fn+0x124>)
1000b63a:	781b      	ldrb	r3, [r3, #0]
1000b63c:	b2db      	uxtb	r3, r3
1000b63e:	2b02      	cmp	r3, #2
1000b640:	d02f      	beq.n	1000b6a2 <sms_dualtimer2_fn+0x72>
1000b642:	2b03      	cmp	r3, #3
1000b644:	d054      	beq.n	1000b6f0 <sms_dualtimer2_fn+0xc0>
1000b646:	2b01      	cmp	r3, #1
1000b648:	d17f      	bne.n	1000b74a <sms_dualtimer2_fn+0x11a>
        case TIMER2_MODE_INDICATION_TOUT:
        timer2_current_mode = TIMER2_MODE_NONE;
1000b64a:	2200      	movs	r2, #0
1000b64c:	4b41      	ldr	r3, [pc, #260]	; (1000b754 <sms_dualtimer2_fn+0x124>)
1000b64e:	701a      	strb	r2, [r3, #0]
        if(ble_current_state == BLE_STATE_PAIRED) {
1000b650:	4b41      	ldr	r3, [pc, #260]	; (1000b758 <sms_dualtimer2_fn+0x128>)
1000b652:	781b      	ldrb	r3, [r3, #0]
1000b654:	2b22      	cmp	r3, #34	; 0x22
1000b656:	d107      	bne.n	1000b668 <sms_dualtimer2_fn+0x38>
            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
            if(timer1_current_mode == TIMER1_MODE_NONE) {
1000b658:	4b40      	ldr	r3, [pc, #256]	; (1000b75c <sms_dualtimer2_fn+0x12c>)
1000b65a:	781b      	ldrb	r3, [r3, #0]
1000b65c:	2b00      	cmp	r3, #0
1000b65e:	d174      	bne.n	1000b74a <sms_dualtimer2_fn+0x11a>
                //release_sleep_lock();
                ulp_ready = true;
1000b660:	3201      	adds	r2, #1
1000b662:	4b3f      	ldr	r3, [pc, #252]	; (1000b760 <sms_dualtimer2_fn+0x130>)
1000b664:	701a      	strb	r2, [r3, #0]
1000b666:	e070      	b.n	1000b74a <sms_dualtimer2_fn+0x11a>
            }                
        }
        else {
            sms_ble_ind_retry++;
1000b668:	4a3e      	ldr	r2, [pc, #248]	; (1000b764 <sms_dualtimer2_fn+0x134>)
1000b66a:	7813      	ldrb	r3, [r2, #0]
1000b66c:	3301      	adds	r3, #1
1000b66e:	b2db      	uxtb	r3, r3
1000b670:	7013      	strb	r3, [r2, #0]
            if(sms_ble_ind_retry >= BLE_INDICATION_RETRY_MAX) {
1000b672:	2b00      	cmp	r3, #0
1000b674:	d009      	beq.n	1000b68a <sms_dualtimer2_fn+0x5a>
                DBG_LOG_CONT_DEV(" ...giving up!");
1000b676:	483c      	ldr	r0, [pc, #240]	; (1000b768 <sms_dualtimer2_fn+0x138>)
1000b678:	4b3c      	ldr	r3, [pc, #240]	; (1000b76c <sms_dualtimer2_fn+0x13c>)
1000b67a:	4798      	blx	r3
                //DBG_LOG_DEV("[sms_dualtimer2_fn]\tTimer1 mode: %d", timer1_current_mode);
                timer2_current_mode = TIMER2_MODE_NONE;
1000b67c:	2200      	movs	r2, #0
1000b67e:	4b35      	ldr	r3, [pc, #212]	; (1000b754 <sms_dualtimer2_fn+0x124>)
1000b680:	701a      	strb	r2, [r3, #0]
                ble_current_state = BLE_STATE_PAIRED;
1000b682:	3222      	adds	r2, #34	; 0x22
1000b684:	4b34      	ldr	r3, [pc, #208]	; (1000b758 <sms_dualtimer2_fn+0x128>)
1000b686:	701a      	strb	r2, [r3, #0]
1000b688:	e05f      	b.n	1000b74a <sms_dualtimer2_fn+0x11a>
                //DBG_LOG_DEV("[sms_dualtimer2_fn]\t\tStarting sensors...");
                //sms_sensors_toggle_interrupt(SMS_EXTINT_ENABLE);
                //if(timer1_current_mode == TIMER1_MODE_NONE) release_sleep_lock();
            }
            else {
                DBG_LOG_CONT_DEV(" ...waiting... counter: %d", sms_ble_ind_retry);
1000b68a:	2100      	movs	r1, #0
1000b68c:	4838      	ldr	r0, [pc, #224]	; (1000b770 <sms_dualtimer2_fn+0x140>)
1000b68e:	4b37      	ldr	r3, [pc, #220]	; (1000b76c <sms_dualtimer2_fn+0x13c>)
1000b690:	4798      	blx	r3
                //sms_ble_send_characteristic(BLE_CHAR_PRESSURE);
                timer2_current_mode = TIMER2_MODE_INDICATION_TOUT;
1000b692:	2201      	movs	r2, #1
1000b694:	4b2f      	ldr	r3, [pc, #188]	; (1000b754 <sms_dualtimer2_fn+0x124>)
1000b696:	701a      	strb	r2, [r3, #0]
                //ulp_ready = false;
                sms_dualtimer_start(TIMER_UNIT_MS, BLE_INDICATION_TOUT_MS, DUALTIMER_TIMER2);
1000b698:	2164      	movs	r1, #100	; 0x64
1000b69a:	2001      	movs	r0, #1
1000b69c:	4b35      	ldr	r3, [pc, #212]	; (1000b774 <sms_dualtimer2_fn+0x144>)
1000b69e:	4798      	blx	r3
1000b6a0:	e053      	b.n	1000b74a <sms_dualtimer2_fn+0x11a>
            }
        }
        break;
        
        case TIMER2_MODE_LED_STARTUP:
        DBG_LOG_DEV("[sms_dualtimer2_fn]\t\tBlinking startup...");
1000b6a2:	4835      	ldr	r0, [pc, #212]	; (1000b778 <sms_dualtimer2_fn+0x148>)
1000b6a4:	4b35      	ldr	r3, [pc, #212]	; (1000b77c <sms_dualtimer2_fn+0x14c>)
1000b6a6:	4798      	blx	r3
1000b6a8:	4835      	ldr	r0, [pc, #212]	; (1000b780 <sms_dualtimer2_fn+0x150>)
1000b6aa:	4b30      	ldr	r3, [pc, #192]	; (1000b76c <sms_dualtimer2_fn+0x13c>)
1000b6ac:	4798      	blx	r3
        timer2_current_mode = TIMER2_MODE_NONE;
1000b6ae:	2200      	movs	r2, #0
1000b6b0:	4b28      	ldr	r3, [pc, #160]	; (1000b754 <sms_dualtimer2_fn+0x124>)
1000b6b2:	701a      	strb	r2, [r3, #0]
        sms_led_blink_cnt++;
1000b6b4:	4a33      	ldr	r2, [pc, #204]	; (1000b784 <sms_dualtimer2_fn+0x154>)
1000b6b6:	7813      	ldrb	r3, [r2, #0]
1000b6b8:	3301      	adds	r3, #1
1000b6ba:	b2db      	uxtb	r3, r3
1000b6bc:	7013      	strb	r3, [r2, #0]
        if(sms_led_blink_cnt >= SMS_BLINK_STARTUP_CNT) {
1000b6be:	7813      	ldrb	r3, [r2, #0]
1000b6c0:	b2db      	uxtb	r3, r3
1000b6c2:	2b07      	cmp	r3, #7
1000b6c4:	d908      	bls.n	1000b6d8 <sms_dualtimer2_fn+0xa8>
            sms_led_switch_off(SMS_LED_0_PIN);
1000b6c6:	2016      	movs	r0, #22
1000b6c8:	4b2f      	ldr	r3, [pc, #188]	; (1000b788 <sms_dualtimer2_fn+0x158>)
1000b6ca:	4798      	blx	r3
            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
            /* Blinking done... starting ble advertisement */
            //DBG_LOG_DEV("[sms_dualtimer2_fn]\tSMS awake... starting advertisement");
            sms_ble_advertise();
1000b6cc:	4b2f      	ldr	r3, [pc, #188]	; (1000b78c <sms_dualtimer2_fn+0x15c>)
1000b6ce:	4798      	blx	r3
            ulp_ready = true;
1000b6d0:	2201      	movs	r2, #1
1000b6d2:	4b23      	ldr	r3, [pc, #140]	; (1000b760 <sms_dualtimer2_fn+0x130>)
1000b6d4:	701a      	strb	r2, [r3, #0]
1000b6d6:	e038      	b.n	1000b74a <sms_dualtimer2_fn+0x11a>
        }
        else {
            //DBG_LOG_DEV("[sms_dualtimer2_fn]\tBlinking up... cnt = %d", sms_led_blink_cnt);
            sms_led_toggle(SMS_LED_0_PIN);
1000b6d8:	2016      	movs	r0, #22
1000b6da:	4b2d      	ldr	r3, [pc, #180]	; (1000b790 <sms_dualtimer2_fn+0x160>)
1000b6dc:	4798      	blx	r3
            timer2_current_mode = TIMER2_MODE_LED_STARTUP;
1000b6de:	2202      	movs	r2, #2
1000b6e0:	4b1c      	ldr	r3, [pc, #112]	; (1000b754 <sms_dualtimer2_fn+0x124>)
1000b6e2:	701a      	strb	r2, [r3, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BLINK_STARTUP_MS, DUALTIMER_TIMER2);
1000b6e4:	3a01      	subs	r2, #1
1000b6e6:	2164      	movs	r1, #100	; 0x64
1000b6e8:	2001      	movs	r0, #1
1000b6ea:	4b22      	ldr	r3, [pc, #136]	; (1000b774 <sms_dualtimer2_fn+0x144>)
1000b6ec:	4798      	blx	r3
1000b6ee:	e02c      	b.n	1000b74a <sms_dualtimer2_fn+0x11a>
        }
        break;
        
        case TIMER2_MODE_LED_SHUTDOWN:
        DBG_LOG_DEV("[sms_dualtimer2_fn]\t\tBlinking shutdown...");
1000b6f0:	4821      	ldr	r0, [pc, #132]	; (1000b778 <sms_dualtimer2_fn+0x148>)
1000b6f2:	4b22      	ldr	r3, [pc, #136]	; (1000b77c <sms_dualtimer2_fn+0x14c>)
1000b6f4:	4798      	blx	r3
1000b6f6:	4827      	ldr	r0, [pc, #156]	; (1000b794 <sms_dualtimer2_fn+0x164>)
1000b6f8:	4b1c      	ldr	r3, [pc, #112]	; (1000b76c <sms_dualtimer2_fn+0x13c>)
1000b6fa:	4798      	blx	r3
        timer2_current_mode = TIMER2_MODE_NONE;
1000b6fc:	2200      	movs	r2, #0
1000b6fe:	4b15      	ldr	r3, [pc, #84]	; (1000b754 <sms_dualtimer2_fn+0x124>)
1000b700:	701a      	strb	r2, [r3, #0]
        sms_led_blink_cnt++;
1000b702:	4a20      	ldr	r2, [pc, #128]	; (1000b784 <sms_dualtimer2_fn+0x154>)
1000b704:	7813      	ldrb	r3, [r2, #0]
1000b706:	3301      	adds	r3, #1
1000b708:	b2db      	uxtb	r3, r3
1000b70a:	7013      	strb	r3, [r2, #0]
        if(sms_led_blink_cnt >= SMS_BLINK_SHTDWN_CNT) {
1000b70c:	7813      	ldrb	r3, [r2, #0]
1000b70e:	b2db      	uxtb	r3, r3
1000b710:	2b03      	cmp	r3, #3
1000b712:	d90e      	bls.n	1000b732 <sms_dualtimer2_fn+0x102>
            sms_led_switch_off(SMS_LED_0_PIN);
1000b714:	2016      	movs	r0, #22
1000b716:	4b1c      	ldr	r3, [pc, #112]	; (1000b788 <sms_dualtimer2_fn+0x158>)
1000b718:	4798      	blx	r3
            DBG_LOG_DEV("[sms_dualtimer2_fn]\t\tPowering off...");
1000b71a:	4817      	ldr	r0, [pc, #92]	; (1000b778 <sms_dualtimer2_fn+0x148>)
1000b71c:	4b17      	ldr	r3, [pc, #92]	; (1000b77c <sms_dualtimer2_fn+0x14c>)
1000b71e:	4798      	blx	r3
1000b720:	481d      	ldr	r0, [pc, #116]	; (1000b798 <sms_dualtimer2_fn+0x168>)
1000b722:	4b12      	ldr	r3, [pc, #72]	; (1000b76c <sms_dualtimer2_fn+0x13c>)
1000b724:	4798      	blx	r3
            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
            sms_init_variables();
1000b726:	4b1d      	ldr	r3, [pc, #116]	; (1000b79c <sms_dualtimer2_fn+0x16c>)
1000b728:	4798      	blx	r3
            ulp_ready = true;
1000b72a:	2201      	movs	r2, #1
1000b72c:	4b0c      	ldr	r3, [pc, #48]	; (1000b760 <sms_dualtimer2_fn+0x130>)
1000b72e:	701a      	strb	r2, [r3, #0]
1000b730:	e00b      	b.n	1000b74a <sms_dualtimer2_fn+0x11a>
            //release_sleep_lock();
        }
        else {
            //DBG_LOG_DEV("[sms_dualtimer2_fn]\tBLinking off... cnt = %d", sms_led_blink_cnt);
            sms_led_toggle(SMS_LED_0_PIN);
1000b732:	2016      	movs	r0, #22
1000b734:	4b16      	ldr	r3, [pc, #88]	; (1000b790 <sms_dualtimer2_fn+0x160>)
1000b736:	4798      	blx	r3
            timer2_current_mode = TIMER2_MODE_LED_SHUTDOWN;
1000b738:	2203      	movs	r2, #3
1000b73a:	4b06      	ldr	r3, [pc, #24]	; (1000b754 <sms_dualtimer2_fn+0x124>)
1000b73c:	701a      	strb	r2, [r3, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BLINK_SHTDWN_MS, DUALTIMER_TIMER2);
1000b73e:	3a02      	subs	r2, #2
1000b740:	21c8      	movs	r1, #200	; 0xc8
1000b742:	0049      	lsls	r1, r1, #1
1000b744:	2001      	movs	r0, #1
1000b746:	4b0b      	ldr	r3, [pc, #44]	; (1000b774 <sms_dualtimer2_fn+0x144>)
1000b748:	4798      	blx	r3
        case TIMER2_MODE_LED_CONNECTION_LOST:
        case TIMER2_MODE_NONE:
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
        break;
    }
1000b74a:	bd10      	pop	{r4, pc}
1000b74c:	10016c08 	.word	0x10016c08
1000b750:	1000a7a1 	.word	0x1000a7a1
1000b754:	10019c19 	.word	0x10019c19
1000b758:	10019c18 	.word	0x10019c18
1000b75c:	10019a74 	.word	0x10019a74
1000b760:	10019b01 	.word	0x10019b01
1000b764:	10019c0d 	.word	0x10019c0d
1000b768:	10016c1c 	.word	0x10016c1c
1000b76c:	10014cd5 	.word	0x10014cd5
1000b770:	10016c2c 	.word	0x10016c2c
1000b774:	1000b285 	.word	0x1000b285
1000b778:	10015f9c 	.word	0x10015f9c
1000b77c:	10014df5 	.word	0x10014df5
1000b780:	10016c48 	.word	0x10016c48
1000b784:	10019c3c 	.word	0x10019c3c
1000b788:	1000ac01 	.word	0x1000ac01
1000b78c:	10009f85 	.word	0x10009f85
1000b790:	1000ac61 	.word	0x1000ac61
1000b794:	10016c74 	.word	0x10016c74
1000b798:	10016ca0 	.word	0x10016ca0
1000b79c:	1000f5b5 	.word	0x1000f5b5

1000b7a0 <spi_slave_inst_get_config_defaults>:
void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
	Assert(config);

	config->ss_pin          = PIN_LP_GPIO_12;
1000b7a0:	230c      	movs	r3, #12
1000b7a2:	7003      	strb	r3, [r0, #0]
	config->address_enabled = false;
1000b7a4:	2300      	movs	r3, #0
1000b7a6:	7043      	strb	r3, [r0, #1]
	config->address         = 0;
1000b7a8:	7083      	strb	r3, [r0, #2]
}
1000b7aa:	4770      	bx	lr

1000b7ac <spi_get_config_defaults>:
void spi_get_config_defaults(
		struct spi_config *const config)
{
	Assert(config);

	config->mode             = SPI_MODE_MASTER;
1000b7ac:	2301      	movs	r3, #1
1000b7ae:	7003      	strb	r3, [r0, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
1000b7b0:	2300      	movs	r3, #0
1000b7b2:	7043      	strb	r3, [r0, #1]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
1000b7b4:	7083      	strb	r3, [r0, #2]
	config->clock_source     = SPI_CLK_INPUT_0;
1000b7b6:	70c3      	strb	r3, [r0, #3]
	config->clock_divider    = 129;
1000b7b8:	3381      	adds	r3, #129	; 0x81
1000b7ba:	7103      	strb	r3, [r0, #4]

	config->pin_number_pad[0] = PIN_LP_GPIO_10;
1000b7bc:	3b77      	subs	r3, #119	; 0x77
1000b7be:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_11;
1000b7c0:	3301      	adds	r3, #1
1000b7c2:	60c3      	str	r3, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_12;
1000b7c4:	3301      	adds	r3, #1
1000b7c6:	6103      	str	r3, [r0, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_13;
1000b7c8:	3301      	adds	r3, #1
1000b7ca:	6143      	str	r3, [r0, #20]

	config->pinmux_sel_pad[0] = MUX_LP_GPIO_10_SPI0_SCK;
1000b7cc:	3b0b      	subs	r3, #11
1000b7ce:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_11_SPI0_MOSI;
1000b7d0:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_12_SPI0_SSN;
1000b7d2:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_13_SPI0_MISO;
1000b7d4:	6243      	str	r3, [r0, #36]	; 0x24
};
1000b7d6:	4770      	bx	lr

1000b7d8 <spi_attach_slave>:
 *
 */
void spi_attach_slave(
		struct spi_slave_inst *const slave,
		struct spi_slave_inst_config *const config)
{
1000b7d8:	b530      	push	{r4, r5, lr}
1000b7da:	b083      	sub	sp, #12
1000b7dc:	0004      	movs	r4, r0
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
1000b7de:	780b      	ldrb	r3, [r1, #0]
1000b7e0:	7003      	strb	r3, [r0, #0]
	slave->address_enabled = config->address_enabled;
1000b7e2:	784b      	ldrb	r3, [r1, #1]
1000b7e4:	7043      	strb	r3, [r0, #1]
	slave->address         = config->address;
1000b7e6:	788b      	ldrb	r3, [r1, #2]
1000b7e8:	7083      	strb	r3, [r0, #2]

	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);
1000b7ea:	ad01      	add	r5, sp, #4
1000b7ec:	0028      	movs	r0, r5
1000b7ee:	4b07      	ldr	r3, [pc, #28]	; (1000b80c <spi_attach_slave+0x34>)
1000b7f0:	4798      	blx	r3
	config_gpio.direction = GPIO_PIN_DIR_OUTPUT;
1000b7f2:	2301      	movs	r3, #1
1000b7f4:	702b      	strb	r3, [r5, #0]
	gpio_pin_set_config(slave->ss_pin, &config_gpio);
1000b7f6:	7820      	ldrb	r0, [r4, #0]
1000b7f8:	0029      	movs	r1, r5
1000b7fa:	4b05      	ldr	r3, [pc, #20]	; (1000b810 <spi_attach_slave+0x38>)
1000b7fc:	4798      	blx	r3

	gpio_pin_set_output_level(slave->ss_pin, true);
1000b7fe:	7820      	ldrb	r0, [r4, #0]
1000b800:	2101      	movs	r1, #1
1000b802:	4b04      	ldr	r3, [pc, #16]	; (1000b814 <spi_attach_slave+0x3c>)
1000b804:	4798      	blx	r3
}
1000b806:	b003      	add	sp, #12
1000b808:	bd30      	pop	{r4, r5, pc}
1000b80a:	46c0      	nop			; (mov r8, r8)
1000b80c:	1000bdf5 	.word	0x1000bdf5
1000b810:	1000be05 	.word	0x1000be05
1000b814:	1000c05d 	.word	0x1000c05d

1000b818 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void spi_enable(struct spi_module *const module)
{
	Spi *const spi_module = (module->hw);
1000b818:	6803      	ldr	r3, [r0, #0]
		NVIC_EnableIRQ(SPI1_TX_IRQn);
	}
#endif

	/* Enable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = SPI_MODULE_ENABLE_ENABLE;
1000b81a:	2201      	movs	r2, #1
1000b81c:	761a      	strb	r2, [r3, #24]
}
1000b81e:	4770      	bx	lr

1000b820 <spi_disable>:
 * This function will disable the SPI module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void spi_disable(struct spi_module *const module)
{
1000b820:	b510      	push	{r4, lr}
		NVIC_DisableIRQ(SPI1_TX_IRQn);
	}
#  endif

	/* Disable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
1000b822:	2300      	movs	r3, #0
1000b824:	6802      	ldr	r2, [r0, #0]
1000b826:	7613      	strb	r3, [r2, #24]
 */
static void _spi_clock_disable(struct spi_module *const module)
{
	Assert(module);

	Spi *const spi_module = (module->hw);
1000b828:	6803      	ldr	r3, [r0, #0]

	if (spi_module == (void *)SPI0) {
1000b82a:	4a0d      	ldr	r2, [pc, #52]	; (1000b860 <spi_disable+0x40>)
1000b82c:	4293      	cmp	r3, r2
1000b82e:	d109      	bne.n	1000b844 <spi_disable+0x24>
		system_clock_peripheral_disable(PERIPHERAL_SPI0_SCK_CLK);
1000b830:	2041      	movs	r0, #65	; 0x41
1000b832:	4c0c      	ldr	r4, [pc, #48]	; (1000b864 <spi_disable+0x44>)
1000b834:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_SCK_PHASE);
1000b836:	2026      	movs	r0, #38	; 0x26
1000b838:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_IF);
1000b83a:	2038      	movs	r0, #56	; 0x38
1000b83c:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_CORE);
1000b83e:	2001      	movs	r0, #1
1000b840:	47a0      	blx	r4
1000b842:	e00b      	b.n	1000b85c <spi_disable+0x3c>
	} else if (spi_module == (void *)SPI1) {
1000b844:	4a08      	ldr	r2, [pc, #32]	; (1000b868 <spi_disable+0x48>)
1000b846:	4293      	cmp	r3, r2
1000b848:	d108      	bne.n	1000b85c <spi_disable+0x3c>
		system_clock_peripheral_disable(PERIPHERAL_SPI1_SCK_CLK);
1000b84a:	2042      	movs	r0, #66	; 0x42
1000b84c:	4c05      	ldr	r4, [pc, #20]	; (1000b864 <spi_disable+0x44>)
1000b84e:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_SCK_PHASE);
1000b850:	2027      	movs	r0, #39	; 0x27
1000b852:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_IF);
1000b854:	2039      	movs	r0, #57	; 0x39
1000b856:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_CORE);
1000b858:	2002      	movs	r0, #2
1000b85a:	47a0      	blx	r4
#  endif

	/* Disable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
	_spi_clock_disable(module);
}
1000b85c:	bd10      	pop	{r4, pc}
1000b85e:	46c0      	nop			; (mov r8, r8)
1000b860:	40006000 	.word	0x40006000
1000b864:	1000c7f5 	.word	0x1000c7f5
1000b868:	40007000 	.word	0x40007000

1000b86c <spi_reset>:
 * disable it.
 *
 * \param[in,out] module Pointer to the software instance struct
 */
void spi_reset(struct spi_module *const module)
{
1000b86c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Spi *const spi_module = (module->hw);
1000b86e:	6804      	ldr	r4, [r0, #0]

	/* Disable the module */
	spi_disable(module);
1000b870:	4b09      	ldr	r3, [pc, #36]	; (1000b898 <spi_reset+0x2c>)
1000b872:	4798      	blx	r3

	/* Software reset the module */
	if(spi_module == (void *)SPI0) {
1000b874:	4b09      	ldr	r3, [pc, #36]	; (1000b89c <spi_reset+0x30>)
1000b876:	429c      	cmp	r4, r3
1000b878:	d105      	bne.n	1000b886 <spi_reset+0x1a>
		system_peripheral_reset(PERIPHERAL_SPI0_CORE);
1000b87a:	2001      	movs	r0, #1
1000b87c:	4c08      	ldr	r4, [pc, #32]	; (1000b8a0 <spi_reset+0x34>)
1000b87e:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_SPI0_IF);
1000b880:	2038      	movs	r0, #56	; 0x38
1000b882:	47a0      	blx	r4
1000b884:	e007      	b.n	1000b896 <spi_reset+0x2a>
	} else if (spi_module == (void *)SPI1) {
1000b886:	4b07      	ldr	r3, [pc, #28]	; (1000b8a4 <spi_reset+0x38>)
1000b888:	429c      	cmp	r4, r3
1000b88a:	d104      	bne.n	1000b896 <spi_reset+0x2a>
		system_peripheral_reset(PERIPHERAL_SPI1_CORE);
1000b88c:	2002      	movs	r0, #2
1000b88e:	4c04      	ldr	r4, [pc, #16]	; (1000b8a0 <spi_reset+0x34>)
1000b890:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_SPI1_IF);
1000b892:	2039      	movs	r0, #57	; 0x39
1000b894:	47a0      	blx	r4
	}
}
1000b896:	bd10      	pop	{r4, pc}
1000b898:	1000b821 	.word	0x1000b821
1000b89c:	40006000 	.word	0x40006000
1000b8a0:	1000cb61 	.word	0x1000cb61
1000b8a4:	40007000 	.word	0x40007000

1000b8a8 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Spi *const hw,
		const struct spi_config *const config)
{
1000b8a8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b8aa:	465f      	mov	r7, fp
1000b8ac:	4646      	mov	r6, r8
1000b8ae:	b4c0      	push	{r6, r7}
1000b8b0:	b083      	sub	sp, #12
1000b8b2:	0006      	movs	r6, r0
1000b8b4:	4688      	mov	r8, r1
1000b8b6:	0015      	movs	r5, r2
	Assert(config);

	uint8_t idx;

	/* Initialize device instance */
	module->hw = hw;
1000b8b8:	6031      	str	r1, [r6, #0]

	Spi *const spi_module = (module->hw);

	/* Check if module is enabled. */
	if (spi_module->SPI_MODULE_ENABLE.reg & SPI_MODULE_ENABLE_MASK) {
1000b8ba:	7e0b      	ldrb	r3, [r1, #24]
1000b8bc:	07db      	lsls	r3, r3, #31
1000b8be:	d501      	bpl.n	1000b8c4 <spi_init+0x1c>
		spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
1000b8c0:	2300      	movs	r3, #0
1000b8c2:	760b      	strb	r3, [r1, #24]
	}

	spi_reset(module);
1000b8c4:	0030      	movs	r0, r6
1000b8c6:	4b4a      	ldr	r3, [pc, #296]	; (1000b9f0 <spi_init+0x148>)
1000b8c8:	4798      	blx	r3
 */
static void _spi_clock_enable(struct spi_module *const module)
{
	Assert(module);

	Spi *const spi_module = (module->hw);
1000b8ca:	6833      	ldr	r3, [r6, #0]

	if (spi_module == (void *)SPI0) {
1000b8cc:	4a49      	ldr	r2, [pc, #292]	; (1000b9f4 <spi_init+0x14c>)
1000b8ce:	4293      	cmp	r3, r2
1000b8d0:	d109      	bne.n	1000b8e6 <spi_init+0x3e>
		system_clock_peripheral_enable(PERIPHERAL_SPI0_SCK_CLK);
1000b8d2:	2041      	movs	r0, #65	; 0x41
1000b8d4:	4c48      	ldr	r4, [pc, #288]	; (1000b9f8 <spi_init+0x150>)
1000b8d6:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_SCK_PHASE);
1000b8d8:	2026      	movs	r0, #38	; 0x26
1000b8da:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_IF);
1000b8dc:	2038      	movs	r0, #56	; 0x38
1000b8de:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_CORE);
1000b8e0:	2001      	movs	r0, #1
1000b8e2:	47a0      	blx	r4
1000b8e4:	e00b      	b.n	1000b8fe <spi_init+0x56>
	} else if (spi_module == (void *)SPI1) {
1000b8e6:	4a45      	ldr	r2, [pc, #276]	; (1000b9fc <spi_init+0x154>)
1000b8e8:	4293      	cmp	r3, r2
1000b8ea:	d108      	bne.n	1000b8fe <spi_init+0x56>
		system_clock_peripheral_enable(PERIPHERAL_SPI1_SCK_CLK);
1000b8ec:	2042      	movs	r0, #66	; 0x42
1000b8ee:	4c42      	ldr	r4, [pc, #264]	; (1000b9f8 <spi_init+0x150>)
1000b8f0:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_SCK_PHASE);
1000b8f2:	2027      	movs	r0, #39	; 0x27
1000b8f4:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_IF);
1000b8f6:	2039      	movs	r0, #57	; 0x39
1000b8f8:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_CORE);
1000b8fa:	2002      	movs	r0, #2
1000b8fc:	47a0      	blx	r4
	}
#endif

	//Program the pinmux.
	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);
1000b8fe:	a801      	add	r0, sp, #4
1000b900:	4b3f      	ldr	r3, [pc, #252]	; (1000ba00 <spi_init+0x158>)
1000b902:	4798      	blx	r3
1000b904:	002c      	movs	r4, r5
1000b906:	3408      	adds	r4, #8
1000b908:	2318      	movs	r3, #24
1000b90a:	469b      	mov	fp, r3
1000b90c:	44ab      	add	fp, r5
1000b90e:	0027      	movs	r7, r4

	/* Set the pinmux for this spi module. */
	for(idx = 0; idx < 4; idx++) {
		if (config->pin_number_pad[idx] != PINMUX_UNUSED) {
1000b910:	6820      	ldr	r0, [r4, #0]
1000b912:	1c43      	adds	r3, r0, #1
1000b914:	d011      	beq.n	1000b93a <spi_init+0x92>
			if (config->mode == SPI_MODE_MASTER) {
1000b916:	782b      	ldrb	r3, [r5, #0]
1000b918:	2b01      	cmp	r3, #1
1000b91a:	d102      	bne.n	1000b922 <spi_init+0x7a>
				config_gpio.direction = GPIO_PIN_DIR_OUTPUT;
1000b91c:	466a      	mov	r2, sp
1000b91e:	7113      	strb	r3, [r2, #4]
1000b920:	e003      	b.n	1000b92a <spi_init+0x82>
			} else if (config->mode == SPI_MODE_SLAVE) {
1000b922:	2b00      	cmp	r3, #0
1000b924:	d101      	bne.n	1000b92a <spi_init+0x82>
				config_gpio.direction = GPIO_PIN_DIR_INPUT;
1000b926:	466a      	mov	r2, sp
1000b928:	7113      	strb	r3, [r2, #4]
			}
			gpio_pin_set_config(config->pin_number_pad[idx], &config_gpio);
1000b92a:	b2c0      	uxtb	r0, r0
1000b92c:	a901      	add	r1, sp, #4
1000b92e:	4b35      	ldr	r3, [pc, #212]	; (1000ba04 <spi_init+0x15c>)
1000b930:	4798      	blx	r3
			gpio_pinmux_cofiguration(config->pin_number_pad[idx], \
1000b932:	8a39      	ldrh	r1, [r7, #16]
1000b934:	7838      	ldrb	r0, [r7, #0]
1000b936:	4b34      	ldr	r3, [pc, #208]	; (1000ba08 <spi_init+0x160>)
1000b938:	4798      	blx	r3
1000b93a:	3404      	adds	r4, #4
	//Program the pinmux.
	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);

	/* Set the pinmux for this spi module. */
	for(idx = 0; idx < 4; idx++) {
1000b93c:	455c      	cmp	r4, fp
1000b93e:	d1e6      	bne.n	1000b90e <spi_init+0x66>
						(uint16_t)(config->pinmux_sel_pad[idx]));
		}
	}

	/* Set up the input clock for the module */
	spi_module->CLOCK_SOURCE_SELECT.reg = config->clock_source;
1000b940:	78eb      	ldrb	r3, [r5, #3]
1000b942:	4642      	mov	r2, r8
1000b944:	7413      	strb	r3, [r2, #16]

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
1000b946:	782b      	ldrb	r3, [r5, #0]
1000b948:	2b01      	cmp	r3, #1
1000b94a:	d100      	bne.n	1000b94e <spi_init+0xa6>
		/* Set the mode in SPI master mode */
		spi_module->SPI_MASTER_MODE.reg = SPI_MODE_MASTER;
1000b94c:	7713      	strb	r3, [r2, #28]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
1000b94e:	782b      	ldrb	r3, [r5, #0]
1000b950:	2b00      	cmp	r3, #0
1000b952:	d101      	bne.n	1000b958 <spi_init+0xb0>
		/* Set the mode in SPI slave mode */
		spi_module->SPI_MASTER_MODE.reg = SPI_MODE_SLAVE;
1000b954:	4642      	mov	r2, r8
1000b956:	7713      	strb	r3, [r2, #28]
		const struct spi_config *const config)
{
	Assert(module);
	Assert(config);

	Spi *const spi_module = (module->hw);
1000b958:	6833      	ldr	r3, [r6, #0]

	module->mode  = config->mode;
1000b95a:	782a      	ldrb	r2, [r5, #0]
1000b95c:	7172      	strb	r2, [r6, #5]

#if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
1000b95e:	782a      	ldrb	r2, [r5, #0]
1000b960:	2a01      	cmp	r2, #1
1000b962:	d101      	bne.n	1000b968 <spi_init+0xc0>
		spi_module->SPI_CLK_DIVIDER.reg = config->clock_divider;
1000b964:	792a      	ldrb	r2, [r5, #4]
1000b966:	829a      	strh	r2, [r3, #20]
	}
#endif

	/* Set data order */
	if (config->data_order == SPI_DATA_ORDER_LSB) {
1000b968:	786a      	ldrb	r2, [r5, #1]
1000b96a:	2a04      	cmp	r2, #4
1000b96c:	d104      	bne.n	1000b978 <spi_init+0xd0>
		spi_module->SPI_CONFIGURATION.bit.LSB_FIRST_ENABLE = 0x1;
1000b96e:	2124      	movs	r1, #36	; 0x24
1000b970:	5c58      	ldrb	r0, [r3, r1]
1000b972:	4302      	orrs	r2, r0
1000b974:	545a      	strb	r2, [r3, r1]
1000b976:	e004      	b.n	1000b982 <spi_init+0xda>
	} else {
		spi_module->SPI_CONFIGURATION.bit.LSB_FIRST_ENABLE = 0x0;
1000b978:	2124      	movs	r1, #36	; 0x24
1000b97a:	5c5a      	ldrb	r2, [r3, r1]
1000b97c:	2004      	movs	r0, #4
1000b97e:	4382      	bics	r2, r0
1000b980:	545a      	strb	r2, [r3, r1]
	}

	/* Set clock polarity and clock phase */
	switch(config->transfer_mode)
1000b982:	78aa      	ldrb	r2, [r5, #2]
1000b984:	2a01      	cmp	r2, #1
1000b986:	d01a      	beq.n	1000b9be <spi_init+0x116>
1000b988:	2a00      	cmp	r2, #0
1000b98a:	d004      	beq.n	1000b996 <spi_init+0xee>
1000b98c:	2a02      	cmp	r2, #2
1000b98e:	d00c      	beq.n	1000b9aa <spi_init+0x102>
1000b990:	2a03      	cmp	r2, #3
1000b992:	d01e      	beq.n	1000b9d2 <spi_init+0x12a>
1000b994:	e026      	b.n	1000b9e4 <spi_init+0x13c>
	{
		case SPI_TRANSFER_MODE_0:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x0;
1000b996:	2224      	movs	r2, #36	; 0x24
1000b998:	5c99      	ldrb	r1, [r3, r2]
1000b99a:	2002      	movs	r0, #2
1000b99c:	4381      	bics	r1, r0
1000b99e:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x0;
1000b9a0:	5c99      	ldrb	r1, [r3, r2]
1000b9a2:	3801      	subs	r0, #1
1000b9a4:	4381      	bics	r1, r0
1000b9a6:	5499      	strb	r1, [r3, r2]
1000b9a8:	e01c      	b.n	1000b9e4 <spi_init+0x13c>
			break;
		case SPI_TRANSFER_MODE_1:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x1;
1000b9aa:	2224      	movs	r2, #36	; 0x24
1000b9ac:	5c98      	ldrb	r0, [r3, r2]
1000b9ae:	2102      	movs	r1, #2
1000b9b0:	4301      	orrs	r1, r0
1000b9b2:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x0;
1000b9b4:	5c99      	ldrb	r1, [r3, r2]
1000b9b6:	2001      	movs	r0, #1
1000b9b8:	4381      	bics	r1, r0
1000b9ba:	5499      	strb	r1, [r3, r2]
1000b9bc:	e012      	b.n	1000b9e4 <spi_init+0x13c>
			break;
		case SPI_TRANSFER_MODE_2:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x0;
1000b9be:	2224      	movs	r2, #36	; 0x24
1000b9c0:	5c99      	ldrb	r1, [r3, r2]
1000b9c2:	2002      	movs	r0, #2
1000b9c4:	4381      	bics	r1, r0
1000b9c6:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x1;
1000b9c8:	5c98      	ldrb	r0, [r3, r2]
1000b9ca:	2101      	movs	r1, #1
1000b9cc:	4301      	orrs	r1, r0
1000b9ce:	5499      	strb	r1, [r3, r2]
1000b9d0:	e008      	b.n	1000b9e4 <spi_init+0x13c>
			break;
		case SPI_TRANSFER_MODE_3:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x1;
1000b9d2:	2224      	movs	r2, #36	; 0x24
1000b9d4:	5c98      	ldrb	r0, [r3, r2]
1000b9d6:	2102      	movs	r1, #2
1000b9d8:	4301      	orrs	r1, r0
1000b9da:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x1;
1000b9dc:	5c98      	ldrb	r0, [r3, r2]
1000b9de:	2101      	movs	r1, #1
1000b9e0:	4301      	orrs	r1, r0
1000b9e2:	5499      	strb	r1, [r3, r2]
	module->locked                     = 0;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
1000b9e4:	2000      	movs	r0, #0
1000b9e6:	b003      	add	sp, #12
1000b9e8:	bc0c      	pop	{r2, r3}
1000b9ea:	4690      	mov	r8, r2
1000b9ec:	469b      	mov	fp, r3
1000b9ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b9f0:	1000b86d 	.word	0x1000b86d
1000b9f4:	40006000 	.word	0x40006000
1000b9f8:	1000c499 	.word	0x1000c499
1000b9fc:	40007000 	.word	0x40007000
1000ba00:	1000bdf5 	.word	0x1000bdf5
1000ba04:	1000be05 	.word	0x1000be05
1000ba08:	1000c0e9 	.word	0x1000c0e9

1000ba0c <spi_transceive_buffer_wait>:
enum status_code spi_transceive_buffer_wait(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
1000ba0c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ba0e:	b083      	sub	sp, #12
	Spi *spi_module = module->hw;
1000ba10:	6804      	ldr	r4, [r0, #0]
	uint8_t dummy = 0;
1000ba12:	2600      	movs	r6, #0
1000ba14:	466d      	mov	r5, sp
1000ba16:	71ee      	strb	r6, [r5, #7]
1000ba18:	3507      	adds	r5, #7
	uint8_t skip_mosi = 0;
	uint8_t skip_miso = 0;
	uint8_t status;
	uint16_t transfer_len = 0;

	if(spi_module == 0) {
1000ba1a:	2c00      	cmp	r4, #0
1000ba1c:	d034      	beq.n	1000ba88 <spi_transceive_buffer_wait+0x7c>
		return STATUS_ERR_NOT_INITIALIZED;
	}
	if(!tx_data) {
1000ba1e:	2900      	cmp	r1, #0
1000ba20:	d104      	bne.n	1000ba2c <spi_transceive_buffer_wait+0x20>
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
1000ba22:	0029      	movs	r1, r5
1000ba24:	7980      	ldrb	r0, [r0, #6]
1000ba26:	7028      	strb	r0, [r5, #0]
		skip_mosi = 1;
1000ba28:	2701      	movs	r7, #1
1000ba2a:	e00b      	b.n	1000ba44 <spi_transceive_buffer_wait+0x38>
	} else if(!rx_data) {
1000ba2c:	2a00      	cmp	r2, #0
1000ba2e:	d005      	beq.n	1000ba3c <spi_transceive_buffer_wait+0x30>
		rx_data = &dummy;
		skip_miso = 1;
	} else if(length == 0) {
		return STATUS_ERR_INVALID_ARG;
1000ba30:	2017      	movs	r0, #23
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
		skip_miso = 1;
	} else if(length == 0) {
1000ba32:	2b00      	cmp	r3, #0
1000ba34:	d029      	beq.n	1000ba8a <spi_transceive_buffer_wait+0x7e>
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
	uint8_t skip_miso = 0;
1000ba36:	2600      	movs	r6, #0
		uint8_t *rx_data,
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
1000ba38:	2700      	movs	r7, #0
1000ba3a:	e003      	b.n	1000ba44 <spi_transceive_buffer_wait+0x38>
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
		skip_miso = 1;
1000ba3c:	2601      	movs	r6, #1
		uint8_t *rx_data,
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
1000ba3e:	2700      	movs	r7, #0
	if(!tx_data) {
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
1000ba40:	466a      	mov	r2, sp
1000ba42:	3207      	adds	r2, #7
 */
static bool _spi_is_active(Spi *const spi_module)
{
	Assert(spi_module);

	return spi_module->SPI_BUS_STATUS.bit.SPI_ACTIVE;
1000ba44:	2528      	movs	r5, #40	; 0x28
1000ba46:	5d60      	ldrb	r0, [r4, r5]
	}

	/* Check for Idle */
	do {
		status = _spi_is_active(spi_module);
	}while(status);
1000ba48:	07c0      	lsls	r0, r0, #31
1000ba4a:	d4fc      	bmi.n	1000ba46 <spi_transceive_buffer_wait+0x3a>

	/* Clear all status registers */
	spi_module->RECEIVE_STATUS.reg;
1000ba4c:	7b20      	ldrb	r0, [r4, #12]
	spi_module->TRANSMIT_STATUS.reg;
1000ba4e:	7a20      	ldrb	r0, [r4, #8]

	/* Start transfer */
	while(transfer_len < length) {
1000ba50:	2b00      	cmp	r3, #0
1000ba52:	d014      	beq.n	1000ba7e <spi_transceive_buffer_wait+0x72>
1000ba54:	2500      	movs	r5, #0
		/* Read data shifted from MISO */
		while(!_spi_is_ready_to_read(spi_module));
		*rx_data = spi_module->RECEIVE_DATA.reg;
		transfer_len++;
		if (!skip_mosi) {
			tx_data++;
1000ba56:	4278      	negs	r0, r7
1000ba58:	4147      	adcs	r7, r0
		}
		if (!skip_miso) {
			rx_data++;
1000ba5a:	4270      	negs	r0, r6
1000ba5c:	4146      	adcs	r6, r0
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->TRANSMIT_STATUS.bit.TX_FIFO_NOT_FULL);
1000ba5e:	7a20      	ldrb	r0, [r4, #8]
	spi_module->TRANSMIT_STATUS.reg;

	/* Start transfer */
	while(transfer_len < length) {
		/* Write data to MOSI */
		while(!_spi_is_ready_to_write(spi_module));
1000ba60:	07c0      	lsls	r0, r0, #31
1000ba62:	d5fc      	bpl.n	1000ba5e <spi_transceive_buffer_wait+0x52>
		spi_module->TRANSMIT_DATA.reg = *tx_data;
1000ba64:	7808      	ldrb	r0, [r1, #0]
1000ba66:	7020      	strb	r0, [r4, #0]
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->RECEIVE_STATUS.bit.RX_FIFO_NOT_EMPTY);
1000ba68:	7b20      	ldrb	r0, [r4, #12]
	while(transfer_len < length) {
		/* Write data to MOSI */
		while(!_spi_is_ready_to_write(spi_module));
		spi_module->TRANSMIT_DATA.reg = *tx_data;
		/* Read data shifted from MISO */
		while(!_spi_is_ready_to_read(spi_module));
1000ba6a:	07c0      	lsls	r0, r0, #31
1000ba6c:	d5fc      	bpl.n	1000ba68 <spi_transceive_buffer_wait+0x5c>
		*rx_data = spi_module->RECEIVE_DATA.reg;
1000ba6e:	7920      	ldrb	r0, [r4, #4]
1000ba70:	7010      	strb	r0, [r2, #0]
		transfer_len++;
1000ba72:	3501      	adds	r5, #1
1000ba74:	b2ad      	uxth	r5, r5
		if (!skip_mosi) {
			tx_data++;
1000ba76:	19c9      	adds	r1, r1, r7
		}
		if (!skip_miso) {
			rx_data++;
1000ba78:	1992      	adds	r2, r2, r6
	/* Clear all status registers */
	spi_module->RECEIVE_STATUS.reg;
	spi_module->TRANSMIT_STATUS.reg;

	/* Start transfer */
	while(transfer_len < length) {
1000ba7a:	42ab      	cmp	r3, r5
1000ba7c:	d1ef      	bne.n	1000ba5e <spi_transceive_buffer_wait+0x52>
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->TRANSMIT_STATUS.bit.TX_FIFO_EMPTY);
1000ba7e:	7a23      	ldrb	r3, [r4, #8]
		}
	}
	/* check TXFIFO is empty */
	do {
		status = _spi_is_write_complete(spi_module);
	}while(!status);
1000ba80:	06db      	lsls	r3, r3, #27
1000ba82:	d5fc      	bpl.n	1000ba7e <spi_transceive_buffer_wait+0x72>

	return STATUS_OK;
1000ba84:	2000      	movs	r0, #0
1000ba86:	e000      	b.n	1000ba8a <spi_transceive_buffer_wait+0x7e>
	uint8_t skip_miso = 0;
	uint8_t status;
	uint16_t transfer_len = 0;

	if(spi_module == 0) {
		return STATUS_ERR_NOT_INITIALIZED;
1000ba88:	201f      	movs	r0, #31
		status = _spi_is_write_complete(spi_module);
	}while(!status);

	return STATUS_OK;

}
1000ba8a:	b003      	add	sp, #12
1000ba8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ba8e:	46c0      	nop			; (mov r8, r8)

1000ba90 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		bool select)
{
1000ba90:	b510      	push	{r4, lr}
	uint8_t gpio_num = slave->ss_pin;
1000ba92:	7808      	ldrb	r0, [r1, #0]
	if(select) {
1000ba94:	2a00      	cmp	r2, #0
1000ba96:	d003      	beq.n	1000baa0 <spi_select_slave+0x10>
		/* ASSERT Slave select pin */
		gpio_pin_set_output_level(gpio_num, false);
1000ba98:	2100      	movs	r1, #0
1000ba9a:	4b04      	ldr	r3, [pc, #16]	; (1000baac <spi_select_slave+0x1c>)
1000ba9c:	4798      	blx	r3
1000ba9e:	e002      	b.n	1000baa6 <spi_select_slave+0x16>
	} else {
		/* DEASSERT Slave select pin */
		gpio_pin_set_output_level(gpio_num, true);
1000baa0:	2101      	movs	r1, #1
1000baa2:	4b02      	ldr	r3, [pc, #8]	; (1000baac <spi_select_slave+0x1c>)
1000baa4:	4798      	blx	r3
	}

	return STATUS_OK;
}
1000baa6:	2000      	movs	r0, #0
1000baa8:	bd10      	pop	{r4, pc}
1000baaa:	46c0      	nop			; (mov r8, r8)
1000baac:	1000c05d 	.word	0x1000c05d

1000bab0 <dualtimer_isr_handler>:
 *
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
1000bab0:	b510      	push	{r4, lr}
 * \retval The interrupt status of timer1/timer2
 */
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
1000bab2:	4b0d      	ldr	r3, [pc, #52]	; (1000bae8 <dualtimer_isr_handler+0x38>)
1000bab4:	7d1b      	ldrb	r3, [r3, #20]
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
1000bab6:	2b00      	cmp	r3, #0
1000bab8:	d007      	beq.n	1000baca <dualtimer_isr_handler+0x1a>
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
1000baba:	2201      	movs	r2, #1
1000babc:	4b0a      	ldr	r3, [pc, #40]	; (1000bae8 <dualtimer_isr_handler+0x38>)
1000babe:	731a      	strb	r2, [r3, #12]
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
1000bac0:	4b0a      	ldr	r3, [pc, #40]	; (1000baec <dualtimer_isr_handler+0x3c>)
1000bac2:	681b      	ldr	r3, [r3, #0]
1000bac4:	2b00      	cmp	r3, #0
1000bac6:	d000      	beq.n	1000baca <dualtimer_isr_handler+0x1a>
			dualtimer_callback_timer1();
1000bac8:	4798      	blx	r3
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
	} else {
		return DUALTIMER0->TIMER2MIS.reg;
1000baca:	2334      	movs	r3, #52	; 0x34
1000bacc:	4a06      	ldr	r2, [pc, #24]	; (1000bae8 <dualtimer_isr_handler+0x38>)
1000bace:	5cd3      	ldrb	r3, [r2, r3]
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
1000bad0:	2b00      	cmp	r3, #0
1000bad2:	d007      	beq.n	1000bae4 <dualtimer_isr_handler+0x34>
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
	} else {
		DUALTIMER0->TIMER2INTCLR.reg = 1;
1000bad4:	2101      	movs	r1, #1
1000bad6:	232c      	movs	r3, #44	; 0x2c
1000bad8:	54d1      	strb	r1, [r2, r3]
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER2);
		if (dualtimer_callback_timer2)
1000bada:	4b05      	ldr	r3, [pc, #20]	; (1000baf0 <dualtimer_isr_handler+0x40>)
1000badc:	681b      	ldr	r3, [r3, #0]
1000bade:	2b00      	cmp	r3, #0
1000bae0:	d000      	beq.n	1000bae4 <dualtimer_isr_handler+0x34>
			dualtimer_callback_timer2();
1000bae2:	4798      	blx	r3
	}
}
1000bae4:	bd10      	pop	{r4, pc}
1000bae6:	46c0      	nop			; (mov r8, r8)
1000bae8:	40001000 	.word	0x40001000
1000baec:	10017fcc 	.word	0x10017fcc
1000baf0:	10017fd0 	.word	0x10017fd0

1000baf4 <dualtimer_get_config_defaults>:
 *
 * \param[out]  config  Pointer to a DUALTIMER module configuration structure to set
 */
void dualtimer_get_config_defaults(struct dualtimer_config *config)
{
	config->timer1.timer_enable = true;
1000baf4:	2301      	movs	r3, #1
1000baf6:	7003      	strb	r3, [r0, #0]
	config->timer2.timer_enable = true;
1000baf8:	7303      	strb	r3, [r0, #12]

	config->timer1.counter_mode = DUALTIMER_PERIODIC_MODE;
1000bafa:	2202      	movs	r2, #2
1000bafc:	7042      	strb	r2, [r0, #1]
	config->timer2.counter_mode = DUALTIMER_PERIODIC_MODE;
1000bafe:	7342      	strb	r2, [r0, #13]

	config->timer1.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
1000bb00:	7083      	strb	r3, [r0, #2]
	config->timer2.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
1000bb02:	7383      	strb	r3, [r0, #14]

	config->timer1.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
1000bb04:	2200      	movs	r2, #0
1000bb06:	70c2      	strb	r2, [r0, #3]
	config->timer2.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
1000bb08:	73c2      	strb	r2, [r0, #15]

	config->timer1.interrup_enable = true;
1000bb0a:	7103      	strb	r3, [r0, #4]
	config->timer2.interrup_enable = true;
1000bb0c:	7403      	strb	r3, [r0, #16]

	config->timer1.load_value = 0;
1000bb0e:	6082      	str	r2, [r0, #8]
	config->timer2.load_value = 0;
1000bb10:	6142      	str	r2, [r0, #20]

	config->clock_source = DUALTIMER_CLK_INPUT_0;
1000bb12:	7602      	strb	r2, [r0, #24]
}
1000bb14:	4770      	bx	lr
1000bb16:	46c0      	nop			; (mov r8, r8)

1000bb18 <dualtimer_set_counter>:
 * \param[in]     value        Load value
 */
void dualtimer_set_counter(enum dualtimer_timer timer,
		enum dualtimer_set_register cur_bg, uint32_t value)
{
	if (timer == DUALTIMER_TIMER1) {
1000bb18:	2800      	cmp	r0, #0
1000bb1a:	d107      	bne.n	1000bb2c <dualtimer_set_counter+0x14>
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
1000bb1c:	2900      	cmp	r1, #0
1000bb1e:	d102      	bne.n	1000bb26 <dualtimer_set_counter+0xe>
			DUALTIMER0->TIMER1LOAD.reg = value;
1000bb20:	4b06      	ldr	r3, [pc, #24]	; (1000bb3c <dualtimer_set_counter+0x24>)
1000bb22:	601a      	str	r2, [r3, #0]
1000bb24:	e009      	b.n	1000bb3a <dualtimer_set_counter+0x22>
		} else {
			DUALTIMER0->TIMER1BGLOAD.reg = value;
1000bb26:	4b05      	ldr	r3, [pc, #20]	; (1000bb3c <dualtimer_set_counter+0x24>)
1000bb28:	619a      	str	r2, [r3, #24]
1000bb2a:	e006      	b.n	1000bb3a <dualtimer_set_counter+0x22>
		}
	} else {
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
1000bb2c:	2900      	cmp	r1, #0
1000bb2e:	d102      	bne.n	1000bb36 <dualtimer_set_counter+0x1e>
			DUALTIMER0->TIMER2LOAD.reg = value;
1000bb30:	4b02      	ldr	r3, [pc, #8]	; (1000bb3c <dualtimer_set_counter+0x24>)
1000bb32:	621a      	str	r2, [r3, #32]
1000bb34:	e001      	b.n	1000bb3a <dualtimer_set_counter+0x22>
			} else {
			DUALTIMER0->TIMER2BGLOAD.reg = value;
1000bb36:	4b01      	ldr	r3, [pc, #4]	; (1000bb3c <dualtimer_set_counter+0x24>)
1000bb38:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
}
1000bb3a:	4770      	bx	lr
1000bb3c:	40001000 	.word	0x40001000

1000bb40 <dualtimer_enable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_enable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
1000bb40:	2800      	cmp	r0, #0
1000bb42:	d105      	bne.n	1000bb50 <dualtimer_enable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg |= DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
1000bb44:	4a06      	ldr	r2, [pc, #24]	; (1000bb60 <dualtimer_enable+0x20>)
1000bb46:	7a11      	ldrb	r1, [r2, #8]
1000bb48:	2380      	movs	r3, #128	; 0x80
1000bb4a:	430b      	orrs	r3, r1
1000bb4c:	7213      	strb	r3, [r2, #8]
1000bb4e:	e005      	b.n	1000bb5c <dualtimer_enable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg |= DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
1000bb50:	4903      	ldr	r1, [pc, #12]	; (1000bb60 <dualtimer_enable+0x20>)
1000bb52:	2228      	movs	r2, #40	; 0x28
1000bb54:	5c88      	ldrb	r0, [r1, r2]
1000bb56:	2380      	movs	r3, #128	; 0x80
1000bb58:	4303      	orrs	r3, r0
1000bb5a:	548b      	strb	r3, [r1, r2]
	}
}
1000bb5c:	4770      	bx	lr
1000bb5e:	46c0      	nop			; (mov r8, r8)
1000bb60:	40001000 	.word	0x40001000

1000bb64 <dualtimer_disable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_disable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
1000bb64:	2800      	cmp	r0, #0
1000bb66:	d105      	bne.n	1000bb74 <dualtimer_disable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg &= ~DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
1000bb68:	4a06      	ldr	r2, [pc, #24]	; (1000bb84 <dualtimer_disable+0x20>)
1000bb6a:	7a11      	ldrb	r1, [r2, #8]
1000bb6c:	237f      	movs	r3, #127	; 0x7f
1000bb6e:	400b      	ands	r3, r1
1000bb70:	7213      	strb	r3, [r2, #8]
1000bb72:	e005      	b.n	1000bb80 <dualtimer_disable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg &= ~DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
1000bb74:	4903      	ldr	r1, [pc, #12]	; (1000bb84 <dualtimer_disable+0x20>)
1000bb76:	2228      	movs	r2, #40	; 0x28
1000bb78:	5c88      	ldrb	r0, [r1, r2]
1000bb7a:	237f      	movs	r3, #127	; 0x7f
1000bb7c:	4003      	ands	r3, r0
1000bb7e:	548b      	strb	r3, [r1, r2]
	}
}
1000bb80:	4770      	bx	lr
1000bb82:	46c0      	nop			; (mov r8, r8)
1000bb84:	40001000 	.word	0x40001000

1000bb88 <dualtimer_init>:
 * \param[in]     config       Pointer to the Dualtimer configuration options struct
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
1000bb88:	b570      	push	{r4, r5, r6, lr}
1000bb8a:	0004      	movs	r4, r0
	uint8_t regval = 0;

	/* Global reset */
	system_peripheral_reset(PERIPHERAL_DUALT_TIMER);
1000bb8c:	2004      	movs	r0, #4
1000bb8e:	4b39      	ldr	r3, [pc, #228]	; (1000bc74 <dualtimer_init+0xec>)
1000bb90:	4798      	blx	r3

	/* Common config */
	if (config->timer1.timer_enable || config->timer2.timer_enable) {
1000bb92:	7823      	ldrb	r3, [r4, #0]
1000bb94:	2b00      	cmp	r3, #0
1000bb96:	d102      	bne.n	1000bb9e <dualtimer_init+0x16>
1000bb98:	7b23      	ldrb	r3, [r4, #12]
1000bb9a:	2b00      	cmp	r3, #0
1000bb9c:	d065      	beq.n	1000bc6a <dualtimer_init+0xe2>
		LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |=
1000bb9e:	4936      	ldr	r1, [pc, #216]	; (1000bc78 <dualtimer_init+0xf0>)
1000bba0:	68ca      	ldr	r2, [r1, #12]
1000bba2:	2320      	movs	r3, #32
1000bba4:	4313      	orrs	r3, r2
1000bba6:	60cb      	str	r3, [r1, #12]
		LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
1000bba8:	7e22      	ldrb	r2, [r4, #24]
1000bbaa:	698b      	ldr	r3, [r1, #24]
1000bbac:	2003      	movs	r0, #3
1000bbae:	4002      	ands	r2, r0
1000bbb0:	0112      	lsls	r2, r2, #4
1000bbb2:	302d      	adds	r0, #45	; 0x2d
1000bbb4:	4383      	bics	r3, r0
1000bbb6:	4313      	orrs	r3, r2
1000bbb8:	618b      	str	r3, [r1, #24]
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
1000bbba:	7823      	ldrb	r3, [r4, #0]
1000bbbc:	2b00      	cmp	r3, #0
1000bbbe:	d026      	beq.n	1000bc0e <dualtimer_init+0x86>
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000bbc0:	7863      	ldrb	r3, [r4, #1]
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
1000bbc2:	2101      	movs	r1, #1
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000bbc4:	2b00      	cmp	r3, #0
1000bbc6:	d003      	beq.n	1000bbd0 <dualtimer_init+0x48>
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer1.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_0;
		} else if (config->timer1.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_1;
1000bbc8:	3b02      	subs	r3, #2
1000bbca:	425d      	negs	r5, r3
1000bbcc:	415d      	adcs	r5, r3
1000bbce:	01a9      	lsls	r1, r5, #6
		}
		regval |= (DUALTIMER_TIMER1CONTROL_TIMER_SIZE &
1000bbd0:	78a2      	ldrb	r2, [r4, #2]
1000bbd2:	0052      	lsls	r2, r2, #1
1000bbd4:	2502      	movs	r5, #2
1000bbd6:	402a      	ands	r2, r5
1000bbd8:	78e3      	ldrb	r3, [r4, #3]
1000bbda:	009b      	lsls	r3, r3, #2
1000bbdc:	350a      	adds	r5, #10
1000bbde:	402b      	ands	r3, r5
1000bbe0:	431a      	orrs	r2, r3
1000bbe2:	0015      	movs	r5, r2
1000bbe4:	430d      	orrs	r5, r1
				((config->timer1.counter_size) << DUALTIMER_TIMER1CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER1CONTROL_TIMERPRE(config->timer1.clock_prescaler);
		if (config->timer1.interrup_enable) {
1000bbe6:	7923      	ldrb	r3, [r4, #4]
1000bbe8:	2b00      	cmp	r3, #0
1000bbea:	d001      	beq.n	1000bbf0 <dualtimer_init+0x68>
			regval |= DUALTIMER_TIMER1CONTROL_INTERRUPT_ENABLE;
1000bbec:	2320      	movs	r3, #32
1000bbee:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER1LOAD.reg = config->timer1.load_value;
1000bbf0:	4b22      	ldr	r3, [pc, #136]	; (1000bc7c <dualtimer_init+0xf4>)
1000bbf2:	68a2      	ldr	r2, [r4, #8]
1000bbf4:	601a      	str	r2, [r3, #0]
		DUALTIMER0->TIMER1CONTROL.reg = regval;
1000bbf6:	721d      	strb	r5, [r3, #8]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
1000bbf8:	491f      	ldr	r1, [pc, #124]	; (1000bc78 <dualtimer_init+0xf0>)
1000bbfa:	22c4      	movs	r2, #196	; 0xc4
1000bbfc:	0052      	lsls	r2, r2, #1
1000bbfe:	5c88      	ldrb	r0, [r1, r2]
1000bc00:	2301      	movs	r3, #1
1000bc02:	4303      	orrs	r3, r0
1000bc04:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER1);
1000bc06:	2000      	movs	r0, #0
1000bc08:	4b1d      	ldr	r3, [pc, #116]	; (1000bc80 <dualtimer_init+0xf8>)
1000bc0a:	4798      	blx	r3
1000bc0c:	e000      	b.n	1000bc10 <dualtimer_init+0x88>
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
	uint8_t regval = 0;
1000bc0e:	2500      	movs	r5, #0
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
		dualtimer_enable(DUALTIMER_TIMER1);
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
1000bc10:	7b23      	ldrb	r3, [r4, #12]
1000bc12:	2b00      	cmp	r3, #0
1000bc14:	d029      	beq.n	1000bc6a <dualtimer_init+0xe2>
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000bc16:	7b63      	ldrb	r3, [r4, #13]
1000bc18:	2b00      	cmp	r3, #0
1000bc1a:	d005      	beq.n	1000bc28 <dualtimer_init+0xa0>
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
1000bc1c:	2b01      	cmp	r3, #1
1000bc1e:	d005      	beq.n	1000bc2c <dualtimer_init+0xa4>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
1000bc20:	2b02      	cmp	r3, #2
1000bc22:	d104      	bne.n	1000bc2e <dualtimer_init+0xa6>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
1000bc24:	2540      	movs	r5, #64	; 0x40
1000bc26:	e002      	b.n	1000bc2e <dualtimer_init+0xa6>
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
1000bc28:	2501      	movs	r5, #1
1000bc2a:	e000      	b.n	1000bc2e <dualtimer_init+0xa6>
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
1000bc2c:	2500      	movs	r5, #0
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
		}
		regval |= (DUALTIMER_TIMER2CONTROL_TIMER_SIZE &
1000bc2e:	7ba3      	ldrb	r3, [r4, #14]
1000bc30:	005b      	lsls	r3, r3, #1
1000bc32:	2102      	movs	r1, #2
1000bc34:	4019      	ands	r1, r3
1000bc36:	7be2      	ldrb	r2, [r4, #15]
1000bc38:	0092      	lsls	r2, r2, #2
1000bc3a:	230c      	movs	r3, #12
1000bc3c:	4013      	ands	r3, r2
1000bc3e:	430b      	orrs	r3, r1
1000bc40:	431d      	orrs	r5, r3
				((config->timer2.counter_size) << DUALTIMER_TIMER2CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER2CONTROL_TIMERPRE(config->timer2.clock_prescaler);
		if (config->timer2.interrup_enable) {
1000bc42:	7c23      	ldrb	r3, [r4, #16]
1000bc44:	2b00      	cmp	r3, #0
1000bc46:	d001      	beq.n	1000bc4c <dualtimer_init+0xc4>
			regval |= DUALTIMER_TIMER2CONTROL_INTERRUPT_ENABLE;
1000bc48:	2320      	movs	r3, #32
1000bc4a:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER2LOAD.reg = config->timer2.load_value;
1000bc4c:	6962      	ldr	r2, [r4, #20]
1000bc4e:	4b0b      	ldr	r3, [pc, #44]	; (1000bc7c <dualtimer_init+0xf4>)
1000bc50:	621a      	str	r2, [r3, #32]
		DUALTIMER0->TIMER2CONTROL.reg = regval;
1000bc52:	2228      	movs	r2, #40	; 0x28
1000bc54:	549d      	strb	r5, [r3, r2]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_2_ENABLE;
1000bc56:	4908      	ldr	r1, [pc, #32]	; (1000bc78 <dualtimer_init+0xf0>)
1000bc58:	3261      	adds	r2, #97	; 0x61
1000bc5a:	32ff      	adds	r2, #255	; 0xff
1000bc5c:	5c88      	ldrb	r0, [r1, r2]
1000bc5e:	2302      	movs	r3, #2
1000bc60:	4303      	orrs	r3, r0
1000bc62:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER2);
1000bc64:	2001      	movs	r0, #1
1000bc66:	4b06      	ldr	r3, [pc, #24]	; (1000bc80 <dualtimer_init+0xf8>)
1000bc68:	4798      	blx	r3
	}

	system_register_isr(RAM_ISR_TABLE_DUALTIMER_INDEX, (uint32_t)dualtimer_isr_handler);
1000bc6a:	4906      	ldr	r1, [pc, #24]	; (1000bc84 <dualtimer_init+0xfc>)
1000bc6c:	201e      	movs	r0, #30
1000bc6e:	4b06      	ldr	r3, [pc, #24]	; (1000bc88 <dualtimer_init+0x100>)
1000bc70:	4798      	blx	r3
}
1000bc72:	bd70      	pop	{r4, r5, r6, pc}
1000bc74:	1000cb61 	.word	0x1000cb61
1000bc78:	4000b000 	.word	0x4000b000
1000bc7c:	40001000 	.word	0x40001000
1000bc80:	1000bb41 	.word	0x1000bb41
1000bc84:	1000bab1 	.word	0x1000bab1
1000bc88:	1000cfc9 	.word	0x1000cfc9

1000bc8c <dualtimer_register_callback>:
 *
 * \param[in]     callback_func Pointer to callback function
 */
void dualtimer_register_callback(enum dualtimer_timer timer, dualtimer_callback_t fun)
{
	if (timer == DUALTIMER_TIMER1) {
1000bc8c:	2800      	cmp	r0, #0
1000bc8e:	d102      	bne.n	1000bc96 <dualtimer_register_callback+0xa>
		dualtimer_callback_timer1 = fun;
1000bc90:	4b02      	ldr	r3, [pc, #8]	; (1000bc9c <dualtimer_register_callback+0x10>)
1000bc92:	6019      	str	r1, [r3, #0]
1000bc94:	e001      	b.n	1000bc9a <dualtimer_register_callback+0xe>
	} else {
		dualtimer_callback_timer2 = fun;
1000bc96:	4b02      	ldr	r3, [pc, #8]	; (1000bca0 <dualtimer_register_callback+0x14>)
1000bc98:	6019      	str	r1, [r3, #0]
	}
}
1000bc9a:	4770      	bx	lr
1000bc9c:	10017fcc 	.word	0x10017fcc
1000bca0:	10017fd0 	.word	0x10017fd0

1000bca4 <gpio_port0_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port0_isr_handler(void)
{
1000bca4:	b570      	push	{r4, r5, r6, lr}
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;
1000bca6:	4b16      	ldr	r3, [pc, #88]	; (1000bd00 <gpio_port0_isr_handler+0x5c>)
1000bca8:	681d      	ldr	r5, [r3, #0]
1000bcaa:	8f29      	ldrh	r1, [r5, #56]	; 0x38
1000bcac:	b289      	uxth	r1, r1

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
1000bcae:	07cb      	lsls	r3, r1, #31
1000bcb0:	d407      	bmi.n	1000bcc2 <gpio_port0_isr_handler+0x1e>
1000bcb2:	2301      	movs	r3, #1
1000bcb4:	2401      	movs	r4, #1
1000bcb6:	0018      	movs	r0, r3
1000bcb8:	0022      	movs	r2, r4
1000bcba:	409a      	lsls	r2, r3
1000bcbc:	4211      	tst	r1, r2
1000bcbe:	d014      	beq.n	1000bcea <gpio_port0_isr_handler+0x46>
1000bcc0:	e001      	b.n	1000bcc6 <gpio_port0_isr_handler+0x22>
1000bcc2:	2201      	movs	r2, #1
1000bcc4:	2000      	movs	r0, #0
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
1000bcc6:	b292      	uxth	r2, r2
1000bcc8:	872a      	strh	r2, [r5, #56]	; 0x38
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
1000bcca:	2346      	movs	r3, #70	; 0x46
1000bccc:	4a0c      	ldr	r2, [pc, #48]	; (1000bd00 <gpio_port0_isr_handler+0x5c>)
1000bcce:	5ad3      	ldrh	r3, [r2, r3]
1000bcd0:	4103      	asrs	r3, r0
1000bcd2:	07db      	lsls	r3, r3, #31
1000bcd4:	d50c      	bpl.n	1000bcf0 <gpio_port0_isr_handler+0x4c>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
1000bcd6:	2344      	movs	r3, #68	; 0x44

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
1000bcd8:	5ad3      	ldrh	r3, [r2, r3]
1000bcda:	4103      	asrs	r3, r0
1000bcdc:	07db      	lsls	r3, r3, #31
1000bcde:	d507      	bpl.n	1000bcf0 <gpio_port0_isr_handler+0x4c>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
                _gpio_instances[0].callback[i]();
1000bce0:	0080      	lsls	r0, r0, #2
1000bce2:	1810      	adds	r0, r2, r0
1000bce4:	6843      	ldr	r3, [r0, #4]
1000bce6:	4798      	blx	r3
1000bce8:	e002      	b.n	1000bcf0 <gpio_port0_isr_handler+0x4c>
1000bcea:	3301      	adds	r3, #1
 */
static void gpio_port0_isr_handler(void)
{
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
1000bcec:	2b10      	cmp	r3, #16
1000bcee:	d1e2      	bne.n	1000bcb6 <gpio_port0_isr_handler+0x12>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000bcf0:	2180      	movs	r1, #128	; 0x80
1000bcf2:	0409      	lsls	r1, r1, #16
1000bcf4:	23c0      	movs	r3, #192	; 0xc0
1000bcf6:	005b      	lsls	r3, r3, #1
1000bcf8:	4a02      	ldr	r2, [pc, #8]	; (1000bd04 <gpio_port0_isr_handler+0x60>)
1000bcfa:	50d1      	str	r1, [r2, r3]
                _gpio_instances[0].callback[i]();
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO0_IRQn);
}
1000bcfc:	bd70      	pop	{r4, r5, r6, pc}
1000bcfe:	46c0      	nop			; (mov r8, r8)
1000bd00:	10019c40 	.word	0x10019c40
1000bd04:	e000e100 	.word	0xe000e100

1000bd08 <gpio_port1_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port1_isr_handler(void)
{
1000bd08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;
1000bd0a:	4b18      	ldr	r3, [pc, #96]	; (1000bd6c <gpio_port1_isr_handler+0x64>)
1000bd0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
1000bd0e:	8f1e      	ldrh	r6, [r3, #56]	; 0x38
1000bd10:	b2b6      	uxth	r6, r6
1000bd12:	0037      	movs	r7, r6
1000bd14:	2400      	movs	r4, #0

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
1000bd16:	0b76      	lsrs	r6, r6, #13
1000bd18:	0376      	lsls	r6, r6, #13
			aon_handle_ext_wakeup_isr();
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
1000bd1a:	4d14      	ldr	r5, [pc, #80]	; (1000bd6c <gpio_port1_isr_handler+0x64>)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
1000bd1c:	2e00      	cmp	r6, #0
1000bd1e:	d001      	beq.n	1000bd24 <gpio_port1_isr_handler+0x1c>
			aon_handle_ext_wakeup_isr();
1000bd20:	4b13      	ldr	r3, [pc, #76]	; (1000bd70 <gpio_port1_isr_handler+0x68>)
1000bd22:	4798      	blx	r3
		}

		if (flag & (1 << i)) {
1000bd24:	0022      	movs	r2, r4
1000bd26:	2301      	movs	r3, #1
1000bd28:	40a3      	lsls	r3, r4
1000bd2a:	421f      	tst	r7, r3
1000bd2c:	d013      	beq.n	1000bd56 <gpio_port1_isr_handler+0x4e>
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
1000bd2e:	b29b      	uxth	r3, r3
1000bd30:	6ca9      	ldr	r1, [r5, #72]	; 0x48
1000bd32:	870b      	strh	r3, [r1, #56]	; 0x38
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
1000bd34:	238e      	movs	r3, #142	; 0x8e
1000bd36:	5aeb      	ldrh	r3, [r5, r3]
1000bd38:	4123      	asrs	r3, r4
1000bd3a:	07db      	lsls	r3, r3, #31
1000bd3c:	d50b      	bpl.n	1000bd56 <gpio_port1_isr_handler+0x4e>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
1000bd3e:	238c      	movs	r3, #140	; 0x8c
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
1000bd40:	490a      	ldr	r1, [pc, #40]	; (1000bd6c <gpio_port1_isr_handler+0x64>)
1000bd42:	5acb      	ldrh	r3, [r1, r3]
1000bd44:	4123      	asrs	r3, r4
1000bd46:	07db      	lsls	r3, r3, #31
1000bd48:	d505      	bpl.n	1000bd56 <gpio_port1_isr_handler+0x4e>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
				_gpio_instances[1].callback[i]();
1000bd4a:	3212      	adds	r2, #18
1000bd4c:	0092      	lsls	r2, r2, #2
1000bd4e:	188a      	adds	r2, r1, r2
1000bd50:	6853      	ldr	r3, [r2, #4]
1000bd52:	4798      	blx	r3
				break;
1000bd54:	e002      	b.n	1000bd5c <gpio_port1_isr_handler+0x54>
1000bd56:	3401      	adds	r4, #1
 */
static void gpio_port1_isr_handler(void)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
1000bd58:	2c10      	cmp	r4, #16
1000bd5a:	d1df      	bne.n	1000bd1c <gpio_port1_isr_handler+0x14>
1000bd5c:	2180      	movs	r1, #128	; 0x80
1000bd5e:	0449      	lsls	r1, r1, #17
1000bd60:	23c0      	movs	r3, #192	; 0xc0
1000bd62:	005b      	lsls	r3, r3, #1
1000bd64:	4a03      	ldr	r2, [pc, #12]	; (1000bd74 <gpio_port1_isr_handler+0x6c>)
1000bd66:	50d1      	str	r1, [r2, r3]
				break;
			}
		}
	}
	NVIC_ClearPendingIRQ(GPIO1_IRQn);
}
1000bd68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000bd6a:	46c0      	nop			; (mov r8, r8)
1000bd6c:	10019c40 	.word	0x10019c40
1000bd70:	0001bc51 	.word	0x0001bc51
1000bd74:	e000e100 	.word	0xe000e100

1000bd78 <gpio_port2_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port2_isr_handler(void)
{
1000bd78:	b510      	push	{r4, lr}
	uint32_t flag = _gpio_instances[2].hw->INTSTATUSCLEAR.reg;
1000bd7a:	2390      	movs	r3, #144	; 0x90
1000bd7c:	4a1b      	ldr	r2, [pc, #108]	; (1000bdec <gpio_port2_isr_handler+0x74>)
1000bd7e:	58d2      	ldr	r2, [r2, r3]
1000bd80:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000bd82:	b29b      	uxth	r3, r3

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
1000bd84:	04d9      	lsls	r1, r3, #19
1000bd86:	d414      	bmi.n	1000bdb2 <gpio_port2_isr_handler+0x3a>
1000bd88:	0499      	lsls	r1, r3, #18
1000bd8a:	d40a      	bmi.n	1000bda2 <gpio_port2_isr_handler+0x2a>
1000bd8c:	0459      	lsls	r1, r3, #17
1000bd8e:	d40c      	bmi.n	1000bdaa <gpio_port2_isr_handler+0x32>
1000bd90:	0bdb      	lsrs	r3, r3, #15
1000bd92:	03db      	lsls	r3, r3, #15
1000bd94:	b29b      	uxth	r3, r3
1000bd96:	2b00      	cmp	r3, #0
1000bd98:	d020      	beq.n	1000bddc <gpio_port2_isr_handler+0x64>
1000bd9a:	2380      	movs	r3, #128	; 0x80
1000bd9c:	021b      	lsls	r3, r3, #8
1000bd9e:	210f      	movs	r1, #15
1000bda0:	e00a      	b.n	1000bdb8 <gpio_port2_isr_handler+0x40>
1000bda2:	2380      	movs	r3, #128	; 0x80
1000bda4:	019b      	lsls	r3, r3, #6
1000bda6:	210d      	movs	r1, #13
1000bda8:	e006      	b.n	1000bdb8 <gpio_port2_isr_handler+0x40>
1000bdaa:	2380      	movs	r3, #128	; 0x80
1000bdac:	01db      	lsls	r3, r3, #7
1000bdae:	210e      	movs	r1, #14
1000bdb0:	e002      	b.n	1000bdb8 <gpio_port2_isr_handler+0x40>
1000bdb2:	2380      	movs	r3, #128	; 0x80
1000bdb4:	015b      	lsls	r3, r3, #5
1000bdb6:	210c      	movs	r1, #12
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
1000bdb8:	b29b      	uxth	r3, r3
1000bdba:	8713      	strh	r3, [r2, #56]	; 0x38
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
1000bdbc:	23d6      	movs	r3, #214	; 0xd6
1000bdbe:	4a0b      	ldr	r2, [pc, #44]	; (1000bdec <gpio_port2_isr_handler+0x74>)
1000bdc0:	5ad3      	ldrh	r3, [r2, r3]
1000bdc2:	410b      	asrs	r3, r1
1000bdc4:	07db      	lsls	r3, r3, #31
1000bdc6:	d509      	bpl.n	1000bddc <gpio_port2_isr_handler+0x64>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
1000bdc8:	23d4      	movs	r3, #212	; 0xd4

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
1000bdca:	5ad3      	ldrh	r3, [r2, r3]
1000bdcc:	410b      	asrs	r3, r1
1000bdce:	07db      	lsls	r3, r3, #31
1000bdd0:	d504      	bpl.n	1000bddc <gpio_port2_isr_handler+0x64>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
                _gpio_instances[2].callback[i]();
1000bdd2:	3124      	adds	r1, #36	; 0x24
1000bdd4:	0089      	lsls	r1, r1, #2
1000bdd6:	1851      	adds	r1, r2, r1
1000bdd8:	684b      	ldr	r3, [r1, #4]
1000bdda:	4798      	blx	r3
1000bddc:	2180      	movs	r1, #128	; 0x80
1000bdde:	0489      	lsls	r1, r1, #18
1000bde0:	23c0      	movs	r3, #192	; 0xc0
1000bde2:	005b      	lsls	r3, r3, #1
1000bde4:	4a02      	ldr	r2, [pc, #8]	; (1000bdf0 <gpio_port2_isr_handler+0x78>)
1000bde6:	50d1      	str	r1, [r2, r3]
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO2_IRQn);
}
1000bde8:	bd10      	pop	{r4, pc}
1000bdea:	46c0      	nop			; (mov r8, r8)
1000bdec:	10019c40 	.word	0x10019c40
1000bdf0:	e000e100 	.word	0xe000e100

1000bdf4 <gpio_get_config_defaults>:
 *  \param[out] config  Configuration structure to initialize to default values.
 */
void gpio_get_config_defaults(struct gpio_config *const config)
{
	/* Default configuration values */
	config->direction  = GPIO_PIN_DIR_INPUT;
1000bdf4:	2300      	movs	r3, #0
1000bdf6:	7003      	strb	r3, [r0, #0]
	config->input_pull = GPIO_PIN_PULL_UP;
1000bdf8:	2201      	movs	r2, #1
1000bdfa:	7042      	strb	r2, [r0, #1]
	config->powersave  = false;
1000bdfc:	7083      	strb	r3, [r0, #2]
	config->aon_wakeup = false;
1000bdfe:	70c3      	strb	r3, [r0, #3]
}
1000be00:	4770      	bx	lr
1000be02:	46c0      	nop			; (mov r8, r8)

1000be04 <gpio_pin_set_config>:
 *  \retval STATUS_RESOURCE_NOT_AVAILABLE   Requested gpio is already in use.
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
1000be04:	b570      	push	{r4, r5, r6, lr}
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
1000be06:	2317      	movs	r3, #23
	enum status_code status = STATUS_OK;

	/* Following GPIO's should never be modified by user.
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
1000be08:	2801      	cmp	r0, #1
1000be0a:	d800      	bhi.n	1000be0e <gpio_pin_set_config+0xa>
1000be0c:	e0c8      	b.n	1000bfa0 <gpio_pin_set_config+0x19c>
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
	} else {
		if (gpio_pin <= 7) {
1000be0e:	2807      	cmp	r0, #7
1000be10:	d809      	bhi.n	1000be26 <gpio_pin_set_config+0x22>
			LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000be12:	4d64      	ldr	r5, [pc, #400]	; (1000bfa4 <gpio_pin_set_config+0x1a0>)
1000be14:	6c6a      	ldr	r2, [r5, #68]	; 0x44
1000be16:	3b10      	subs	r3, #16
1000be18:	4003      	ands	r3, r0
1000be1a:	009b      	lsls	r3, r3, #2
1000be1c:	2407      	movs	r4, #7
1000be1e:	409c      	lsls	r4, r3
1000be20:	43a2      	bics	r2, r4
1000be22:	646a      	str	r2, [r5, #68]	; 0x44
1000be24:	e029      	b.n	1000be7a <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 15) {
1000be26:	280f      	cmp	r0, #15
1000be28:	d809      	bhi.n	1000be3e <gpio_pin_set_config+0x3a>
			LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000be2a:	4d5e      	ldr	r5, [pc, #376]	; (1000bfa4 <gpio_pin_set_config+0x1a0>)
1000be2c:	6caa      	ldr	r2, [r5, #72]	; 0x48
1000be2e:	2307      	movs	r3, #7
1000be30:	4003      	ands	r3, r0
1000be32:	009b      	lsls	r3, r3, #2
1000be34:	2407      	movs	r4, #7
1000be36:	409c      	lsls	r4, r3
1000be38:	43a2      	bics	r2, r4
1000be3a:	64aa      	str	r2, [r5, #72]	; 0x48
1000be3c:	e01d      	b.n	1000be7a <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 23) {
1000be3e:	2817      	cmp	r0, #23
1000be40:	d809      	bhi.n	1000be56 <gpio_pin_set_config+0x52>
			LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000be42:	4d58      	ldr	r5, [pc, #352]	; (1000bfa4 <gpio_pin_set_config+0x1a0>)
1000be44:	6cea      	ldr	r2, [r5, #76]	; 0x4c
1000be46:	2307      	movs	r3, #7
1000be48:	4003      	ands	r3, r0
1000be4a:	009b      	lsls	r3, r3, #2
1000be4c:	2407      	movs	r4, #7
1000be4e:	409c      	lsls	r4, r3
1000be50:	43a2      	bics	r2, r4
1000be52:	64ea      	str	r2, [r5, #76]	; 0x4c
1000be54:	e011      	b.n	1000be7a <gpio_pin_set_config+0x76>
		} else if (44 <= gpio_pin  && gpio_pin < 48) {
1000be56:	0003      	movs	r3, r0
1000be58:	3b2c      	subs	r3, #44	; 0x2c
1000be5a:	2b03      	cmp	r3, #3
1000be5c:	d80d      	bhi.n	1000be7a <gpio_pin_set_config+0x76>
			/* Set GPIO_MSx as digital mode */
			AON_GP_REGS0->MS_GPIO_MODE.vec.ANALOG_ENABLE_ &= ~(1 << (gpio_pin - PIN_GPIO_MS4));
1000be5e:	4d52      	ldr	r5, [pc, #328]	; (1000bfa8 <gpio_pin_set_config+0x1a4>)
1000be60:	2482      	movs	r4, #130	; 0x82
1000be62:	00e4      	lsls	r4, r4, #3
1000be64:	5d2a      	ldrb	r2, [r5, r4]
1000be66:	0712      	lsls	r2, r2, #28
1000be68:	2601      	movs	r6, #1
1000be6a:	409e      	lsls	r6, r3
1000be6c:	0f12      	lsrs	r2, r2, #28
1000be6e:	5d2b      	ldrb	r3, [r5, r4]
1000be70:	43b2      	bics	r2, r6
1000be72:	260f      	movs	r6, #15
1000be74:	43b3      	bics	r3, r6
1000be76:	4313      	orrs	r3, r2
1000be78:	552b      	strb	r3, [r5, r4]
		}
	
		if ((gpio_pin == PIN_AO_GPIO_0) || (gpio_pin == PIN_AO_GPIO_1) ||
1000be7a:	0003      	movs	r3, r0
1000be7c:	3b1d      	subs	r3, #29
1000be7e:	2b02      	cmp	r3, #2
1000be80:	d829      	bhi.n	1000bed6 <gpio_pin_set_config+0xd2>
				(gpio_pin == PIN_AO_GPIO_2)) {
			/* Active Low, Always On Pull Enable Control */
			if (config->input_pull == GPIO_PIN_PULL_UP) {
1000be82:	784b      	ldrb	r3, [r1, #1]
1000be84:	2b01      	cmp	r3, #1
1000be86:	d108      	bne.n	1000be9a <gpio_pin_set_config+0x96>
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
1000be88:	4d47      	ldr	r5, [pc, #284]	; (1000bfa8 <gpio_pin_set_config+0x1a4>)
1000be8a:	7d2b      	ldrb	r3, [r5, #20]
1000be8c:	241f      	movs	r4, #31
1000be8e:	1a24      	subs	r4, r4, r0
1000be90:	2201      	movs	r2, #1
1000be92:	40a2      	lsls	r2, r4
1000be94:	4393      	bics	r3, r2
1000be96:	752b      	strb	r3, [r5, #20]
1000be98:	e008      	b.n	1000beac <gpio_pin_set_config+0xa8>
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
1000be9a:	4c43      	ldr	r4, [pc, #268]	; (1000bfa8 <gpio_pin_set_config+0x1a4>)
1000be9c:	7d25      	ldrb	r5, [r4, #20]
1000be9e:	221f      	movs	r2, #31
1000bea0:	1a12      	subs	r2, r2, r0
1000bea2:	2301      	movs	r3, #1
1000bea4:	4093      	lsls	r3, r2
1000bea6:	432b      	orrs	r3, r5
1000bea8:	b2db      	uxtb	r3, r3
1000beaa:	7523      	strb	r3, [r4, #20]
			}
			if (config->aon_wakeup) {
1000beac:	78ca      	ldrb	r2, [r1, #3]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000beae:	2300      	movs	r3, #0
			if (config->input_pull == GPIO_PIN_PULL_UP) {
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
			}
			if (config->aon_wakeup) {
1000beb0:	2a00      	cmp	r2, #0
1000beb2:	d075      	beq.n	1000bfa0 <gpio_pin_set_config+0x19c>
				/* Enable AON_GPIO_x to be a wakeup MCU from sleep mode */
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
1000beb4:	493c      	ldr	r1, [pc, #240]	; (1000bfa8 <gpio_pin_set_config+0x1a4>)
1000beb6:	880c      	ldrh	r4, [r1, #0]
1000beb8:	221f      	movs	r2, #31
1000beba:	1a10      	subs	r0, r2, r0
1000bebc:	0080      	lsls	r0, r0, #2
1000bebe:	3301      	adds	r3, #1
1000bec0:	4083      	lsls	r3, r0
1000bec2:	4323      	orrs	r3, r4
1000bec4:	b29b      	uxth	r3, r3
1000bec6:	800b      	strh	r3, [r1, #0]
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
1000bec8:	4a38      	ldr	r2, [pc, #224]	; (1000bfac <gpio_pin_set_config+0x1a8>)
1000beca:	7811      	ldrb	r1, [r2, #0]
1000becc:	2302      	movs	r3, #2
1000bece:	430b      	orrs	r3, r1
1000bed0:	7013      	strb	r3, [r2, #0]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000bed2:	2300      	movs	r3, #0
1000bed4:	e064      	b.n	1000bfa0 <gpio_pin_set_config+0x19c>
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
1000bed6:	780a      	ldrb	r2, [r1, #0]
1000bed8:	2a00      	cmp	r2, #0
1000beda:	d140      	bne.n	1000bf5e <gpio_pin_set_config+0x15a>
				if(gpio_pin < 16) {
1000bedc:	280f      	cmp	r0, #15
1000bede:	d808      	bhi.n	1000bef2 <gpio_pin_set_config+0xee>
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
1000bee0:	2301      	movs	r3, #1
1000bee2:	4083      	lsls	r3, r0
1000bee4:	b29b      	uxth	r3, r3
1000bee6:	4a32      	ldr	r2, [pc, #200]	; (1000bfb0 <gpio_pin_set_config+0x1ac>)
1000bee8:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000beea:	2300      	movs	r3, #0
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
1000beec:	281f      	cmp	r0, #31
1000beee:	d857      	bhi.n	1000bfa0 <gpio_pin_set_config+0x19c>
1000bef0:	e012      	b.n	1000bf18 <gpio_pin_set_config+0x114>
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
				if(gpio_pin < 16) {
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32){
1000bef2:	281f      	cmp	r0, #31
1000bef4:	d807      	bhi.n	1000bf06 <gpio_pin_set_config+0x102>
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000bef6:	220f      	movs	r2, #15
1000bef8:	4002      	ands	r2, r0
1000befa:	2301      	movs	r3, #1
1000befc:	4093      	lsls	r3, r2
1000befe:	b29b      	uxth	r3, r3
1000bf00:	4a2c      	ldr	r2, [pc, #176]	; (1000bfb4 <gpio_pin_set_config+0x1b0>)
1000bf02:	8293      	strh	r3, [r2, #20]
1000bf04:	e008      	b.n	1000bf18 <gpio_pin_set_config+0x114>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000bf06:	230f      	movs	r3, #15
1000bf08:	4018      	ands	r0, r3
1000bf0a:	3b0e      	subs	r3, #14
1000bf0c:	4083      	lsls	r3, r0
1000bf0e:	b29b      	uxth	r3, r3
1000bf10:	4a29      	ldr	r2, [pc, #164]	; (1000bfb8 <gpio_pin_set_config+0x1b4>)
1000bf12:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000bf14:	2300      	movs	r3, #0
1000bf16:	e043      	b.n	1000bfa0 <gpio_pin_set_config+0x19c>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
1000bf18:	784b      	ldrb	r3, [r1, #1]
1000bf1a:	2b01      	cmp	r3, #1
1000bf1c:	d00c      	beq.n	1000bf38 <gpio_pin_set_config+0x134>
1000bf1e:	2b00      	cmp	r3, #0
1000bf20:	d002      	beq.n	1000bf28 <gpio_pin_set_config+0x124>
1000bf22:	2b02      	cmp	r3, #2
1000bf24:	d010      	beq.n	1000bf48 <gpio_pin_set_config+0x144>
1000bf26:	e03a      	b.n	1000bf9e <gpio_pin_set_config+0x19a>
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
1000bf28:	491e      	ldr	r1, [pc, #120]	; (1000bfa4 <gpio_pin_set_config+0x1a0>)
1000bf2a:	6d0a      	ldr	r2, [r1, #80]	; 0x50
1000bf2c:	2301      	movs	r3, #1
1000bf2e:	4083      	lsls	r3, r0
1000bf30:	4313      	orrs	r3, r2
1000bf32:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000bf34:	2300      	movs	r3, #0
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
1000bf36:	e033      	b.n	1000bfa0 <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000bf38:	491a      	ldr	r1, [pc, #104]	; (1000bfa4 <gpio_pin_set_config+0x1a0>)
1000bf3a:	6d0b      	ldr	r3, [r1, #80]	; 0x50
1000bf3c:	2201      	movs	r2, #1
1000bf3e:	4082      	lsls	r2, r0
1000bf40:	4393      	bics	r3, r2
1000bf42:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000bf44:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
1000bf46:	e02b      	b.n	1000bfa0 <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
1000bf48:	4b16      	ldr	r3, [pc, #88]	; (1000bfa4 <gpio_pin_set_config+0x1a0>)
1000bf4a:	6d59      	ldr	r1, [r3, #84]	; 0x54
1000bf4c:	2201      	movs	r2, #1
1000bf4e:	4082      	lsls	r2, r0
1000bf50:	4311      	orrs	r1, r2
1000bf52:	6559      	str	r1, [r3, #84]	; 0x54
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000bf54:	6d19      	ldr	r1, [r3, #80]	; 0x50
1000bf56:	4391      	bics	r1, r2
1000bf58:	6519      	str	r1, [r3, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000bf5a:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
1000bf5c:	e020      	b.n	1000bfa0 <gpio_pin_set_config+0x19c>
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000bf5e:	2300      	movs	r3, #0
						default:
							status = STATUS_ERR_INVALID_ARG;
							break;
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
1000bf60:	2a01      	cmp	r2, #1
1000bf62:	d11d      	bne.n	1000bfa0 <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
1000bf64:	280f      	cmp	r0, #15
1000bf66:	d806      	bhi.n	1000bf76 <gpio_pin_set_config+0x172>
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
1000bf68:	3301      	adds	r3, #1
1000bf6a:	4083      	lsls	r3, r0
1000bf6c:	b29b      	uxth	r3, r3
1000bf6e:	4a10      	ldr	r2, [pc, #64]	; (1000bfb0 <gpio_pin_set_config+0x1ac>)
1000bf70:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000bf72:	2300      	movs	r3, #0
1000bf74:	e014      	b.n	1000bfa0 <gpio_pin_set_config+0x19c>
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
1000bf76:	281f      	cmp	r0, #31
1000bf78:	d808      	bhi.n	1000bf8c <gpio_pin_set_config+0x188>
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
1000bf7a:	230f      	movs	r3, #15
1000bf7c:	4018      	ands	r0, r3
1000bf7e:	3b0e      	subs	r3, #14
1000bf80:	4083      	lsls	r3, r0
1000bf82:	b29b      	uxth	r3, r3
1000bf84:	4a0b      	ldr	r2, [pc, #44]	; (1000bfb4 <gpio_pin_set_config+0x1b0>)
1000bf86:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000bf88:	2300      	movs	r3, #0
1000bf8a:	e009      	b.n	1000bfa0 <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENSET.reg = (1 << (gpio_pin % 16));
1000bf8c:	230f      	movs	r3, #15
1000bf8e:	4018      	ands	r0, r3
1000bf90:	3b0e      	subs	r3, #14
1000bf92:	4083      	lsls	r3, r0
1000bf94:	b29b      	uxth	r3, r3
1000bf96:	4a08      	ldr	r2, [pc, #32]	; (1000bfb8 <gpio_pin_set_config+0x1b4>)
1000bf98:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000bf9a:	2300      	movs	r3, #0
1000bf9c:	e000      	b.n	1000bfa0 <gpio_pin_set_config+0x19c>
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
						default:
							status = STATUS_ERR_INVALID_ARG;
1000bf9e:	2317      	movs	r3, #23
				}
			}
		}
	}
	return status;
}
1000bfa0:	0018      	movs	r0, r3
1000bfa2:	bd70      	pop	{r4, r5, r6, pc}
1000bfa4:	4000b000 	.word	0x4000b000
1000bfa8:	4000f000 	.word	0x4000f000
1000bfac:	4000e000 	.word	0x4000e000
1000bfb0:	40010000 	.word	0x40010000
1000bfb4:	40011000 	.word	0x40011000
1000bfb8:	40013000 	.word	0x40013000

1000bfbc <gpio_pin_get_input_level>:
 */
bool gpio_pin_get_input_level(const uint8_t gpio_pin)
{
	uint32_t regval = 0;

	if (gpio_pin < 16) {
1000bfbc:	280f      	cmp	r0, #15
1000bfbe:	d806      	bhi.n	1000bfce <gpio_pin_get_input_level+0x12>
		regval = GPIO0->DATA.reg;
1000bfc0:	4b0f      	ldr	r3, [pc, #60]	; (1000c000 <gpio_pin_get_input_level+0x44>)
1000bfc2:	8819      	ldrh	r1, [r3, #0]
		regval &= (1 << gpio_pin);
1000bfc4:	2301      	movs	r3, #1
1000bfc6:	4083      	lsls	r3, r0
1000bfc8:	0018      	movs	r0, r3
1000bfca:	4008      	ands	r0, r1
1000bfcc:	e014      	b.n	1000bff8 <gpio_pin_get_input_level+0x3c>
	} else if (gpio_pin < 32) {
1000bfce:	281f      	cmp	r0, #31
1000bfd0:	d809      	bhi.n	1000bfe6 <gpio_pin_get_input_level+0x2a>
		regval = GPIO1->DATA.reg;
1000bfd2:	4b0c      	ldr	r3, [pc, #48]	; (1000c004 <gpio_pin_get_input_level+0x48>)
1000bfd4:	8819      	ldrh	r1, [r3, #0]
		regval &= (1 << (gpio_pin % 16));
1000bfd6:	230f      	movs	r3, #15
1000bfd8:	4003      	ands	r3, r0
1000bfda:	001a      	movs	r2, r3
1000bfdc:	2301      	movs	r3, #1
1000bfde:	4093      	lsls	r3, r2
1000bfe0:	0018      	movs	r0, r3
1000bfe2:	4008      	ands	r0, r1
1000bfe4:	e008      	b.n	1000bff8 <gpio_pin_get_input_level+0x3c>
	} else {
		regval = GPIO2->DATA.reg;
1000bfe6:	4b08      	ldr	r3, [pc, #32]	; (1000c008 <gpio_pin_get_input_level+0x4c>)
1000bfe8:	8819      	ldrh	r1, [r3, #0]
		regval &= (1 << (gpio_pin % 16));
1000bfea:	230f      	movs	r3, #15
1000bfec:	4003      	ands	r3, r0
1000bfee:	001a      	movs	r2, r3
1000bff0:	2301      	movs	r3, #1
1000bff2:	4093      	lsls	r3, r2
1000bff4:	0018      	movs	r0, r3
1000bff6:	4008      	ands	r0, r1
	}

	return regval;
1000bff8:	1e43      	subs	r3, r0, #1
1000bffa:	4198      	sbcs	r0, r3
1000bffc:	b2c0      	uxtb	r0, r0
}
1000bffe:	4770      	bx	lr
1000c000:	40010000 	.word	0x40010000
1000c004:	40011000 	.word	0x40011000
1000c008:	40013000 	.word	0x40013000

1000c00c <gpio_pin_get_output_level>:
 */
bool gpio_pin_get_output_level(const uint8_t gpio_pin)
{
	uint32_t regval = 0;

	if (gpio_pin < 16) {
1000c00c:	280f      	cmp	r0, #15
1000c00e:	d806      	bhi.n	1000c01e <gpio_pin_get_output_level+0x12>
		regval = GPIO0->DATAOUT.reg;
1000c010:	4b0f      	ldr	r3, [pc, #60]	; (1000c050 <gpio_pin_get_output_level+0x44>)
1000c012:	8899      	ldrh	r1, [r3, #4]
		regval &= (1 << gpio_pin);
1000c014:	2301      	movs	r3, #1
1000c016:	4083      	lsls	r3, r0
1000c018:	0018      	movs	r0, r3
1000c01a:	4008      	ands	r0, r1
1000c01c:	e014      	b.n	1000c048 <gpio_pin_get_output_level+0x3c>
	} else if (gpio_pin < 32) {
1000c01e:	281f      	cmp	r0, #31
1000c020:	d809      	bhi.n	1000c036 <gpio_pin_get_output_level+0x2a>
		regval = GPIO1->DATAOUT.reg;
1000c022:	4b0c      	ldr	r3, [pc, #48]	; (1000c054 <gpio_pin_get_output_level+0x48>)
1000c024:	8899      	ldrh	r1, [r3, #4]
		regval &= (1 << (gpio_pin % 16));
1000c026:	230f      	movs	r3, #15
1000c028:	4003      	ands	r3, r0
1000c02a:	001a      	movs	r2, r3
1000c02c:	2301      	movs	r3, #1
1000c02e:	4093      	lsls	r3, r2
1000c030:	0018      	movs	r0, r3
1000c032:	4008      	ands	r0, r1
1000c034:	e008      	b.n	1000c048 <gpio_pin_get_output_level+0x3c>
	} else {
		regval = GPIO2->DATAOUT.reg;
1000c036:	4b08      	ldr	r3, [pc, #32]	; (1000c058 <gpio_pin_get_output_level+0x4c>)
1000c038:	8899      	ldrh	r1, [r3, #4]
		regval &= (1 << (gpio_pin % 16));
1000c03a:	230f      	movs	r3, #15
1000c03c:	4003      	ands	r3, r0
1000c03e:	001a      	movs	r2, r3
1000c040:	2301      	movs	r3, #1
1000c042:	4093      	lsls	r3, r2
1000c044:	0018      	movs	r0, r3
1000c046:	4008      	ands	r0, r1
	}

	return regval;
1000c048:	1e43      	subs	r3, r0, #1
1000c04a:	4198      	sbcs	r0, r3
1000c04c:	b2c0      	uxtb	r0, r0
}
1000c04e:	4770      	bx	lr
1000c050:	40010000 	.word	0x40010000
1000c054:	40011000 	.word	0x40011000
1000c058:	40013000 	.word	0x40013000

1000c05c <gpio_pin_set_output_level>:
 *
 *  \param[in] gpio_pin  Index of the GPIO pin to write to.
 *  \param[in] level     Logical level to set the given pin to.
 */
void gpio_pin_set_output_level(const uint8_t gpio_pin, const bool level)
{
1000c05c:	b510      	push	{r4, lr}
	if (gpio_pin < 16) {
1000c05e:	280f      	cmp	r0, #15
1000c060:	d810      	bhi.n	1000c084 <gpio_pin_set_output_level+0x28>
		if(level) {
1000c062:	2900      	cmp	r1, #0
1000c064:	d007      	beq.n	1000c076 <gpio_pin_set_output_level+0x1a>
			GPIO0->DATAOUT.reg |= (1 << gpio_pin);
1000c066:	4a1d      	ldr	r2, [pc, #116]	; (1000c0dc <gpio_pin_set_output_level+0x80>)
1000c068:	8891      	ldrh	r1, [r2, #4]
1000c06a:	2301      	movs	r3, #1
1000c06c:	4083      	lsls	r3, r0
1000c06e:	430b      	orrs	r3, r1
1000c070:	b29b      	uxth	r3, r3
1000c072:	8093      	strh	r3, [r2, #4]
1000c074:	e031      	b.n	1000c0da <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO0->DATAOUT.reg &= ~(1 << gpio_pin);
1000c076:	4919      	ldr	r1, [pc, #100]	; (1000c0dc <gpio_pin_set_output_level+0x80>)
1000c078:	888b      	ldrh	r3, [r1, #4]
1000c07a:	2201      	movs	r2, #1
1000c07c:	4082      	lsls	r2, r0
1000c07e:	4393      	bics	r3, r2
1000c080:	808b      	strh	r3, [r1, #4]
1000c082:	e02a      	b.n	1000c0da <gpio_pin_set_output_level+0x7e>
		}
	} else if (gpio_pin < 32) {
1000c084:	281f      	cmp	r0, #31
1000c086:	d814      	bhi.n	1000c0b2 <gpio_pin_set_output_level+0x56>
		if(level) {
1000c088:	2900      	cmp	r1, #0
1000c08a:	d009      	beq.n	1000c0a0 <gpio_pin_set_output_level+0x44>
			GPIO1->DATAOUT.reg |= (1 << (gpio_pin % 16));
1000c08c:	4914      	ldr	r1, [pc, #80]	; (1000c0e0 <gpio_pin_set_output_level+0x84>)
1000c08e:	888c      	ldrh	r4, [r1, #4]
1000c090:	220f      	movs	r2, #15
1000c092:	4010      	ands	r0, r2
1000c094:	2301      	movs	r3, #1
1000c096:	4083      	lsls	r3, r0
1000c098:	4323      	orrs	r3, r4
1000c09a:	b29b      	uxth	r3, r3
1000c09c:	808b      	strh	r3, [r1, #4]
1000c09e:	e01c      	b.n	1000c0da <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO1->DATAOUT.reg &= ~(1 << (gpio_pin % 16));
1000c0a0:	490f      	ldr	r1, [pc, #60]	; (1000c0e0 <gpio_pin_set_output_level+0x84>)
1000c0a2:	888b      	ldrh	r3, [r1, #4]
1000c0a4:	220f      	movs	r2, #15
1000c0a6:	4010      	ands	r0, r2
1000c0a8:	3a0e      	subs	r2, #14
1000c0aa:	4082      	lsls	r2, r0
1000c0ac:	4393      	bics	r3, r2
1000c0ae:	808b      	strh	r3, [r1, #4]
1000c0b0:	e013      	b.n	1000c0da <gpio_pin_set_output_level+0x7e>
		}
	} else {
		if(level) {
1000c0b2:	2900      	cmp	r1, #0
1000c0b4:	d009      	beq.n	1000c0ca <gpio_pin_set_output_level+0x6e>
			GPIO2->DATAOUT.reg |= (1 << (gpio_pin % 16));
1000c0b6:	490b      	ldr	r1, [pc, #44]	; (1000c0e4 <gpio_pin_set_output_level+0x88>)
1000c0b8:	888c      	ldrh	r4, [r1, #4]
1000c0ba:	220f      	movs	r2, #15
1000c0bc:	4010      	ands	r0, r2
1000c0be:	2301      	movs	r3, #1
1000c0c0:	4083      	lsls	r3, r0
1000c0c2:	4323      	orrs	r3, r4
1000c0c4:	b29b      	uxth	r3, r3
1000c0c6:	808b      	strh	r3, [r1, #4]
1000c0c8:	e007      	b.n	1000c0da <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO2->DATAOUT.reg &= ~(1 << (gpio_pin % 16));
1000c0ca:	4906      	ldr	r1, [pc, #24]	; (1000c0e4 <gpio_pin_set_output_level+0x88>)
1000c0cc:	888b      	ldrh	r3, [r1, #4]
1000c0ce:	220f      	movs	r2, #15
1000c0d0:	4010      	ands	r0, r2
1000c0d2:	3a0e      	subs	r2, #14
1000c0d4:	4082      	lsls	r2, r0
1000c0d6:	4393      	bics	r3, r2
1000c0d8:	808b      	strh	r3, [r1, #4]
		}
	}
}
1000c0da:	bd10      	pop	{r4, pc}
1000c0dc:	40010000 	.word	0x40010000
1000c0e0:	40011000 	.word	0x40011000
1000c0e4:	40013000 	.word	0x40013000

1000c0e8 <gpio_pinmux_cofiguration>:
 *
 *  \param[in] gpio_pin   Index of the GPIO pin to toggle.
 *  \param[in] pinmux_sel PINMUX selection.
 */
void gpio_pinmux_cofiguration(const uint8_t gpio_pin, uint16_t pinmux_sel)
{
1000c0e8:	b570      	push	{r4, r5, r6, lr}
	uint8_t megamux_sel = (pinmux_sel >> 8) & 0xFF;
1000c0ea:	0a0d      	lsrs	r5, r1, #8

	pinmux_sel &= 0xFF;
1000c0ec:	23ff      	movs	r3, #255	; 0xff
1000c0ee:	4019      	ands	r1, r3

	if (gpio_pin <= 7) {
1000c0f0:	2807      	cmp	r0, #7
1000c0f2:	d833      	bhi.n	1000c15c <gpio_pinmux_cofiguration+0x74>
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000c0f4:	4a4e      	ldr	r2, [pc, #312]	; (1000c230 <gpio_pinmux_cofiguration+0x148>)
1000c0f6:	6c54      	ldr	r4, [r2, #68]	; 0x44
1000c0f8:	3bf8      	subs	r3, #248	; 0xf8
1000c0fa:	4003      	ands	r3, r0
1000c0fc:	009b      	lsls	r3, r3, #2
1000c0fe:	2607      	movs	r6, #7
1000c100:	409e      	lsls	r6, r3
1000c102:	43b4      	bics	r4, r6
1000c104:	6454      	str	r4, [r2, #68]	; 0x44
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000c106:	6c54      	ldr	r4, [r2, #68]	; 0x44
1000c108:	000e      	movs	r6, r1
1000c10a:	409e      	lsls	r6, r3
1000c10c:	0033      	movs	r3, r6
1000c10e:	4323      	orrs	r3, r4
1000c110:	6453      	str	r3, [r2, #68]	; 0x44
		if (pinmux_sel == 0x01) {
1000c112:	2901      	cmp	r1, #1
1000c114:	d000      	beq.n	1000c118 <gpio_pinmux_cofiguration+0x30>
1000c116:	e08a      	b.n	1000c22e <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 3) {
1000c118:	2803      	cmp	r0, #3
1000c11a:	d80f      	bhi.n	1000c13c <gpio_pinmux_cofiguration+0x54>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000c11c:	0011      	movs	r1, r2
1000c11e:	22d0      	movs	r2, #208	; 0xd0
1000c120:	0052      	lsls	r2, r2, #1
1000c122:	588c      	ldr	r4, [r1, r2]
1000c124:	2303      	movs	r3, #3
1000c126:	4018      	ands	r0, r3
1000c128:	00c0      	lsls	r0, r0, #3
1000c12a:	333c      	adds	r3, #60	; 0x3c
1000c12c:	4083      	lsls	r3, r0
1000c12e:	439c      	bics	r4, r3
1000c130:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000c132:	588b      	ldr	r3, [r1, r2]
1000c134:	4085      	lsls	r5, r0
1000c136:	431d      	orrs	r5, r3
1000c138:	508d      	str	r5, [r1, r2]
1000c13a:	e078      	b.n	1000c22e <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 7) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000c13c:	493c      	ldr	r1, [pc, #240]	; (1000c230 <gpio_pinmux_cofiguration+0x148>)
1000c13e:	22d2      	movs	r2, #210	; 0xd2
1000c140:	0052      	lsls	r2, r2, #1
1000c142:	588c      	ldr	r4, [r1, r2]
1000c144:	2303      	movs	r3, #3
1000c146:	4018      	ands	r0, r3
1000c148:	00c0      	lsls	r0, r0, #3
1000c14a:	333c      	adds	r3, #60	; 0x3c
1000c14c:	4083      	lsls	r3, r0
1000c14e:	439c      	bics	r4, r3
1000c150:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000c152:	588b      	ldr	r3, [r1, r2]
1000c154:	4085      	lsls	r5, r0
1000c156:	431d      	orrs	r5, r3
1000c158:	508d      	str	r5, [r1, r2]
1000c15a:	e068      	b.n	1000c22e <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 15) {
1000c15c:	280f      	cmp	r0, #15
1000c15e:	d832      	bhi.n	1000c1c6 <gpio_pinmux_cofiguration+0xde>
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000c160:	4a33      	ldr	r2, [pc, #204]	; (1000c230 <gpio_pinmux_cofiguration+0x148>)
1000c162:	6c94      	ldr	r4, [r2, #72]	; 0x48
1000c164:	2307      	movs	r3, #7
1000c166:	4003      	ands	r3, r0
1000c168:	009b      	lsls	r3, r3, #2
1000c16a:	2607      	movs	r6, #7
1000c16c:	409e      	lsls	r6, r3
1000c16e:	43b4      	bics	r4, r6
1000c170:	6494      	str	r4, [r2, #72]	; 0x48
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000c172:	6c94      	ldr	r4, [r2, #72]	; 0x48
1000c174:	000e      	movs	r6, r1
1000c176:	409e      	lsls	r6, r3
1000c178:	0033      	movs	r3, r6
1000c17a:	4323      	orrs	r3, r4
1000c17c:	6493      	str	r3, [r2, #72]	; 0x48
		if (pinmux_sel == 0x01) {
1000c17e:	2901      	cmp	r1, #1
1000c180:	d155      	bne.n	1000c22e <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 11) {
1000c182:	280b      	cmp	r0, #11
1000c184:	d80f      	bhi.n	1000c1a6 <gpio_pinmux_cofiguration+0xbe>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000c186:	0011      	movs	r1, r2
1000c188:	22d4      	movs	r2, #212	; 0xd4
1000c18a:	0052      	lsls	r2, r2, #1
1000c18c:	588c      	ldr	r4, [r1, r2]
1000c18e:	2303      	movs	r3, #3
1000c190:	4018      	ands	r0, r3
1000c192:	00c0      	lsls	r0, r0, #3
1000c194:	333c      	adds	r3, #60	; 0x3c
1000c196:	4083      	lsls	r3, r0
1000c198:	439c      	bics	r4, r3
1000c19a:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000c19c:	588b      	ldr	r3, [r1, r2]
1000c19e:	4085      	lsls	r5, r0
1000c1a0:	431d      	orrs	r5, r3
1000c1a2:	508d      	str	r5, [r1, r2]
1000c1a4:	e043      	b.n	1000c22e <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 15) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000c1a6:	4922      	ldr	r1, [pc, #136]	; (1000c230 <gpio_pinmux_cofiguration+0x148>)
1000c1a8:	22d6      	movs	r2, #214	; 0xd6
1000c1aa:	0052      	lsls	r2, r2, #1
1000c1ac:	588c      	ldr	r4, [r1, r2]
1000c1ae:	2303      	movs	r3, #3
1000c1b0:	4018      	ands	r0, r3
1000c1b2:	00c0      	lsls	r0, r0, #3
1000c1b4:	333c      	adds	r3, #60	; 0x3c
1000c1b6:	4083      	lsls	r3, r0
1000c1b8:	439c      	bics	r4, r3
1000c1ba:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000c1bc:	588b      	ldr	r3, [r1, r2]
1000c1be:	4085      	lsls	r5, r0
1000c1c0:	431d      	orrs	r5, r3
1000c1c2:	508d      	str	r5, [r1, r2]
1000c1c4:	e033      	b.n	1000c22e <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 23) {
1000c1c6:	2817      	cmp	r0, #23
1000c1c8:	d831      	bhi.n	1000c22e <gpio_pinmux_cofiguration+0x146>
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000c1ca:	4a19      	ldr	r2, [pc, #100]	; (1000c230 <gpio_pinmux_cofiguration+0x148>)
1000c1cc:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
1000c1ce:	2307      	movs	r3, #7
1000c1d0:	4003      	ands	r3, r0
1000c1d2:	009b      	lsls	r3, r3, #2
1000c1d4:	2607      	movs	r6, #7
1000c1d6:	409e      	lsls	r6, r3
1000c1d8:	43b4      	bics	r4, r6
1000c1da:	64d4      	str	r4, [r2, #76]	; 0x4c
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000c1dc:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
1000c1de:	000e      	movs	r6, r1
1000c1e0:	409e      	lsls	r6, r3
1000c1e2:	0033      	movs	r3, r6
1000c1e4:	4323      	orrs	r3, r4
1000c1e6:	64d3      	str	r3, [r2, #76]	; 0x4c
		if (pinmux_sel == 0x01) {
1000c1e8:	2901      	cmp	r1, #1
1000c1ea:	d120      	bne.n	1000c22e <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 19) {
1000c1ec:	2813      	cmp	r0, #19
1000c1ee:	d80f      	bhi.n	1000c210 <gpio_pinmux_cofiguration+0x128>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000c1f0:	0011      	movs	r1, r2
1000c1f2:	22d8      	movs	r2, #216	; 0xd8
1000c1f4:	0052      	lsls	r2, r2, #1
1000c1f6:	588c      	ldr	r4, [r1, r2]
1000c1f8:	2303      	movs	r3, #3
1000c1fa:	4018      	ands	r0, r3
1000c1fc:	00c0      	lsls	r0, r0, #3
1000c1fe:	333c      	adds	r3, #60	; 0x3c
1000c200:	4083      	lsls	r3, r0
1000c202:	439c      	bics	r4, r3
1000c204:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000c206:	588b      	ldr	r3, [r1, r2]
1000c208:	4085      	lsls	r5, r0
1000c20a:	431d      	orrs	r5, r3
1000c20c:	508d      	str	r5, [r1, r2]
1000c20e:	e00e      	b.n	1000c22e <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 23) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000c210:	4a07      	ldr	r2, [pc, #28]	; (1000c230 <gpio_pinmux_cofiguration+0x148>)
1000c212:	23da      	movs	r3, #218	; 0xda
1000c214:	005b      	lsls	r3, r3, #1
1000c216:	58d1      	ldr	r1, [r2, r3]
1000c218:	2403      	movs	r4, #3
1000c21a:	4020      	ands	r0, r4
1000c21c:	00c0      	lsls	r0, r0, #3
1000c21e:	343c      	adds	r4, #60	; 0x3c
1000c220:	4084      	lsls	r4, r0
1000c222:	43a1      	bics	r1, r4
1000c224:	50d1      	str	r1, [r2, r3]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000c226:	58d1      	ldr	r1, [r2, r3]
1000c228:	4085      	lsls	r5, r0
1000c22a:	430d      	orrs	r5, r1
1000c22c:	50d5      	str	r5, [r2, r3]
			}
		}
	}
}
1000c22e:	bd70      	pop	{r4, r5, r6, pc}
1000c230:	4000b000 	.word	0x4000b000

1000c234 <gpio_register_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 *
 */
void gpio_register_callback(uint8_t gpio_pin, gpio_callback_t callback_func,
				enum gpio_callback callback_type)
{
1000c234:	b5f0      	push	{r4, r5, r6, r7, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
		gpio_port = 0;
1000c236:	2300      	movs	r3, #0
	Assert(callback_func);
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000c238:	280f      	cmp	r0, #15
1000c23a:	d904      	bls.n	1000c246 <gpio_register_callback+0x12>
		gpio_port = 0;
	} else if (gpio_pin < 32) {
		gpio_port = 1;
	} else {
		gpio_port = 2;
1000c23c:	241f      	movs	r4, #31
1000c23e:	4284      	cmp	r4, r0
1000c240:	415b      	adcs	r3, r3
1000c242:	3c1d      	subs	r4, #29
1000c244:	1ae3      	subs	r3, r4, r3
	}
	switch (callback_type) {
1000c246:	2a01      	cmp	r2, #1
1000c248:	d016      	beq.n	1000c278 <gpio_register_callback+0x44>
1000c24a:	2a00      	cmp	r2, #0
1000c24c:	d004      	beq.n	1000c258 <gpio_register_callback+0x24>
1000c24e:	2a02      	cmp	r2, #2
1000c250:	d022      	beq.n	1000c298 <gpio_register_callback+0x64>
1000c252:	2a03      	cmp	r2, #3
1000c254:	d030      	beq.n	1000c2b8 <gpio_register_callback+0x84>
1000c256:	e03e      	b.n	1000c2d6 <gpio_register_callback+0xa2>
	case GPIO_CALLBACK_LOW:
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
1000c258:	4e29      	ldr	r6, [pc, #164]	; (1000c300 <gpio_register_callback+0xcc>)
1000c25a:	00dc      	lsls	r4, r3, #3
1000c25c:	18e2      	adds	r2, r4, r3
1000c25e:	00d2      	lsls	r2, r2, #3
1000c260:	5997      	ldr	r7, [r2, r6]
1000c262:	250f      	movs	r5, #15
1000c264:	4005      	ands	r5, r0
1000c266:	2201      	movs	r2, #1
1000c268:	40aa      	lsls	r2, r5
1000c26a:	b292      	uxth	r2, r2
1000c26c:	85ba      	strh	r2, [r7, #44]	; 0x2c
		_gpio_instances[gpio_port].hw->INTPOLCLR.reg = 1 << (gpio_pin % 16);
1000c26e:	18e4      	adds	r4, r4, r3
1000c270:	00e4      	lsls	r4, r4, #3
1000c272:	59a4      	ldr	r4, [r4, r6]
1000c274:	86a2      	strh	r2, [r4, #52]	; 0x34
		break;
1000c276:	e02e      	b.n	1000c2d6 <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_HIGH:
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
1000c278:	4e21      	ldr	r6, [pc, #132]	; (1000c300 <gpio_register_callback+0xcc>)
1000c27a:	00dc      	lsls	r4, r3, #3
1000c27c:	18e2      	adds	r2, r4, r3
1000c27e:	00d2      	lsls	r2, r2, #3
1000c280:	5997      	ldr	r7, [r2, r6]
1000c282:	250f      	movs	r5, #15
1000c284:	4005      	ands	r5, r0
1000c286:	2201      	movs	r2, #1
1000c288:	40aa      	lsls	r2, r5
1000c28a:	b292      	uxth	r2, r2
1000c28c:	85ba      	strh	r2, [r7, #44]	; 0x2c
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
1000c28e:	18e4      	adds	r4, r4, r3
1000c290:	00e4      	lsls	r4, r4, #3
1000c292:	59a4      	ldr	r4, [r4, r6]
1000c294:	8622      	strh	r2, [r4, #48]	; 0x30
		break;
1000c296:	e01e      	b.n	1000c2d6 <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_RISING:
		_gpio_instances[gpio_port].hw->INTTYPESET.reg = 1 << (gpio_pin % 16);
1000c298:	4e19      	ldr	r6, [pc, #100]	; (1000c300 <gpio_register_callback+0xcc>)
1000c29a:	00dc      	lsls	r4, r3, #3
1000c29c:	18e2      	adds	r2, r4, r3
1000c29e:	00d2      	lsls	r2, r2, #3
1000c2a0:	5997      	ldr	r7, [r2, r6]
1000c2a2:	250f      	movs	r5, #15
1000c2a4:	4005      	ands	r5, r0
1000c2a6:	2201      	movs	r2, #1
1000c2a8:	40aa      	lsls	r2, r5
1000c2aa:	b292      	uxth	r2, r2
1000c2ac:	853a      	strh	r2, [r7, #40]	; 0x28
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
1000c2ae:	18e4      	adds	r4, r4, r3
1000c2b0:	00e4      	lsls	r4, r4, #3
1000c2b2:	59a4      	ldr	r4, [r4, r6]
1000c2b4:	8622      	strh	r2, [r4, #48]	; 0x30
		break;
1000c2b6:	e00e      	b.n	1000c2d6 <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_FALLING:
		_gpio_instances[gpio_port].hw->INTTYPESET.reg = 1 << (gpio_pin % 16);
1000c2b8:	4e11      	ldr	r6, [pc, #68]	; (1000c300 <gpio_register_callback+0xcc>)
1000c2ba:	00dc      	lsls	r4, r3, #3
1000c2bc:	18e2      	adds	r2, r4, r3
1000c2be:	00d2      	lsls	r2, r2, #3
1000c2c0:	5997      	ldr	r7, [r2, r6]
1000c2c2:	250f      	movs	r5, #15
1000c2c4:	4005      	ands	r5, r0
1000c2c6:	2201      	movs	r2, #1
1000c2c8:	40aa      	lsls	r2, r5
1000c2ca:	b292      	uxth	r2, r2
1000c2cc:	853a      	strh	r2, [r7, #40]	; 0x28
		_gpio_instances[gpio_port].hw->INTPOLCLR.reg = (1 << (gpio_pin % 16));
1000c2ce:	18e4      	adds	r4, r4, r3
1000c2d0:	00e4      	lsls	r4, r4, #3
1000c2d2:	59a4      	ldr	r4, [r4, r6]
1000c2d4:	86a2      	strh	r2, [r4, #52]	; 0x34

	case GPIO_CALLBACK_N:
		break;
	}
	/* Register callback function */
	_gpio_instances[gpio_port].callback[gpio_pin % 16] = callback_func;
1000c2d6:	220f      	movs	r2, #15
1000c2d8:	4010      	ands	r0, r2
1000c2da:	4c09      	ldr	r4, [pc, #36]	; (1000c300 <gpio_register_callback+0xcc>)
1000c2dc:	00dd      	lsls	r5, r3, #3
1000c2de:	18ea      	adds	r2, r5, r3
1000c2e0:	0052      	lsls	r2, r2, #1
1000c2e2:	1812      	adds	r2, r2, r0
1000c2e4:	0092      	lsls	r2, r2, #2
1000c2e6:	18a2      	adds	r2, r4, r2
1000c2e8:	6051      	str	r1, [r2, #4]
	/* Set the bit corresponding to the gpio pin */
	_gpio_instances[gpio_port].callback_reg_mask |= (1 << (gpio_pin % 16));
1000c2ea:	18ea      	adds	r2, r5, r3
1000c2ec:	00d2      	lsls	r2, r2, #3
1000c2ee:	18a2      	adds	r2, r4, r2
1000c2f0:	3244      	adds	r2, #68	; 0x44
1000c2f2:	2101      	movs	r1, #1
1000c2f4:	4081      	lsls	r1, r0
1000c2f6:	8813      	ldrh	r3, [r2, #0]
1000c2f8:	430b      	orrs	r3, r1
1000c2fa:	8013      	strh	r3, [r2, #0]
}
1000c2fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c2fe:	46c0      	nop			; (mov r8, r8)
1000c300:	10019c40 	.word	0x10019c40

1000c304 <gpio_enable_callback>:
 * conditions for the callback type are met.
 *
 * \param[in]  gpio_pin   GPIO pin
 */
void gpio_enable_callback(uint8_t gpio_pin)
{
1000c304:	b530      	push	{r4, r5, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000c306:	280f      	cmp	r0, #15
1000c308:	d805      	bhi.n	1000c316 <gpio_enable_callback+0x12>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000c30a:	2280      	movs	r2, #128	; 0x80
1000c30c:	0412      	lsls	r2, r2, #16
1000c30e:	4b12      	ldr	r3, [pc, #72]	; (1000c358 <gpio_enable_callback+0x54>)
1000c310:	601a      	str	r2, [r3, #0]
		gpio_port = 0;
1000c312:	2200      	movs	r2, #0
1000c314:	e00c      	b.n	1000c330 <gpio_enable_callback+0x2c>
		NVIC_EnableIRQ(GPIO0_IRQn);
	} else if (gpio_pin < 32) {
1000c316:	281f      	cmp	r0, #31
1000c318:	d805      	bhi.n	1000c326 <gpio_enable_callback+0x22>
1000c31a:	2280      	movs	r2, #128	; 0x80
1000c31c:	0452      	lsls	r2, r2, #17
1000c31e:	4b0e      	ldr	r3, [pc, #56]	; (1000c358 <gpio_enable_callback+0x54>)
1000c320:	601a      	str	r2, [r3, #0]
		gpio_port = 1;
1000c322:	2201      	movs	r2, #1
1000c324:	e004      	b.n	1000c330 <gpio_enable_callback+0x2c>
1000c326:	2280      	movs	r2, #128	; 0x80
1000c328:	0492      	lsls	r2, r2, #18
1000c32a:	4b0b      	ldr	r3, [pc, #44]	; (1000c358 <gpio_enable_callback+0x54>)
1000c32c:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(GPIO1_IRQn);
	} else {
		gpio_port = 2;
1000c32e:	2202      	movs	r2, #2
		NVIC_EnableIRQ(GPIO2_IRQn);
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask |= (1 << (gpio_pin % 16));
1000c330:	230f      	movs	r3, #15
1000c332:	4018      	ands	r0, r3
1000c334:	2101      	movs	r1, #1
1000c336:	4081      	lsls	r1, r0
1000c338:	4c08      	ldr	r4, [pc, #32]	; (1000c35c <gpio_enable_callback+0x58>)
1000c33a:	00d5      	lsls	r5, r2, #3
1000c33c:	18ab      	adds	r3, r5, r2
1000c33e:	00db      	lsls	r3, r3, #3
1000c340:	18e3      	adds	r3, r4, r3
1000c342:	3346      	adds	r3, #70	; 0x46
1000c344:	8818      	ldrh	r0, [r3, #0]
1000c346:	4308      	orrs	r0, r1
1000c348:	8018      	strh	r0, [r3, #0]
	_gpio_instances[gpio_port].hw->INTENSET.reg = (1 << (gpio_pin % 16));
1000c34a:	18aa      	adds	r2, r5, r2
1000c34c:	00d2      	lsls	r2, r2, #3
1000c34e:	5913      	ldr	r3, [r2, r4]
1000c350:	b289      	uxth	r1, r1
1000c352:	8419      	strh	r1, [r3, #32]
}
1000c354:	bd30      	pop	{r4, r5, pc}
1000c356:	46c0      	nop			; (mov r8, r8)
1000c358:	e000e100 	.word	0xe000e100
1000c35c:	10019c40 	.word	0x10019c40

1000c360 <gpio_disable_callback>:
 * The callback function will not be called from the interrupt handler.
 *
 * \param[in]  gpio_pin   GPIO pin
 */
void gpio_disable_callback(uint8_t gpio_pin)
{
1000c360:	b530      	push	{r4, r5, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
		gpio_port = 0;
1000c362:	2300      	movs	r3, #0
{
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000c364:	280f      	cmp	r0, #15
1000c366:	d904      	bls.n	1000c372 <gpio_disable_callback+0x12>
		gpio_port = 0;
	} else if (gpio_pin < 32) {
		gpio_port = 1;
	} else {
		gpio_port = 2;
1000c368:	221f      	movs	r2, #31
1000c36a:	4282      	cmp	r2, r0
1000c36c:	415b      	adcs	r3, r3
1000c36e:	3a1d      	subs	r2, #29
1000c370:	1ad3      	subs	r3, r2, r3
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask &= ~(1 << (gpio_pin % 16));
1000c372:	220f      	movs	r2, #15
1000c374:	4010      	ands	r0, r2
1000c376:	2101      	movs	r1, #1
1000c378:	4081      	lsls	r1, r0
1000c37a:	4c07      	ldr	r4, [pc, #28]	; (1000c398 <gpio_disable_callback+0x38>)
1000c37c:	00dd      	lsls	r5, r3, #3
1000c37e:	18ea      	adds	r2, r5, r3
1000c380:	00d2      	lsls	r2, r2, #3
1000c382:	18a2      	adds	r2, r4, r2
1000c384:	3246      	adds	r2, #70	; 0x46
1000c386:	8810      	ldrh	r0, [r2, #0]
1000c388:	4388      	bics	r0, r1
1000c38a:	8010      	strh	r0, [r2, #0]
	_gpio_instances[gpio_port].hw->INTENCLR.reg = (1 << (gpio_pin % 16));
1000c38c:	18eb      	adds	r3, r5, r3
1000c38e:	00db      	lsls	r3, r3, #3
1000c390:	591b      	ldr	r3, [r3, r4]
1000c392:	b289      	uxth	r1, r1
1000c394:	8499      	strh	r1, [r3, #36]	; 0x24
}
1000c396:	bd30      	pop	{r4, r5, pc}
1000c398:	10019c40 	.word	0x10019c40

1000c39c <gpio_init>:
 *
 * This function will init GPIO callback.
 *
 */
void gpio_init(void)
{
1000c39c:	b510      	push	{r4, lr}
1000c39e:	4a11      	ldr	r2, [pc, #68]	; (1000c3e4 <gpio_init+0x48>)
1000c3a0:	0010      	movs	r0, r2
1000c3a2:	30d8      	adds	r0, #216	; 0xd8
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
			_gpio_instances[i].callback[j] = NULL;
1000c3a4:	2100      	movs	r1, #0
1000c3a6:	e007      	b.n	1000c3b8 <gpio_init+0x1c>
1000c3a8:	c302      	stmia	r3!, {r1}
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
1000c3aa:	4293      	cmp	r3, r2
1000c3ac:	d1fc      	bne.n	1000c3a8 <gpio_init+0xc>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
1000c3ae:	8051      	strh	r1, [r2, #2]
		_gpio_instances[i].callback_reg_mask = 0;
1000c3b0:	8011      	strh	r1, [r2, #0]
1000c3b2:	3248      	adds	r2, #72	; 0x48
 */
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
1000c3b4:	4282      	cmp	r2, r0
1000c3b6:	d002      	beq.n	1000c3be <gpio_init+0x22>
1000c3b8:	0013      	movs	r3, r2
1000c3ba:	3b40      	subs	r3, #64	; 0x40
1000c3bc:	e7f4      	b.n	1000c3a8 <gpio_init+0xc>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
		_gpio_instances[i].callback_reg_mask = 0;
	}
	_gpio_instances[0].hw = (void *)GPIO0;
1000c3be:	4b0a      	ldr	r3, [pc, #40]	; (1000c3e8 <gpio_init+0x4c>)
1000c3c0:	4a0a      	ldr	r2, [pc, #40]	; (1000c3ec <gpio_init+0x50>)
1000c3c2:	601a      	str	r2, [r3, #0]
	_gpio_instances[1].hw = (void *)GPIO1;
1000c3c4:	4a0a      	ldr	r2, [pc, #40]	; (1000c3f0 <gpio_init+0x54>)
1000c3c6:	649a      	str	r2, [r3, #72]	; 0x48
	_gpio_instances[2].hw = (void *)GPIO2;
1000c3c8:	490a      	ldr	r1, [pc, #40]	; (1000c3f4 <gpio_init+0x58>)
1000c3ca:	2290      	movs	r2, #144	; 0x90
1000c3cc:	5099      	str	r1, [r3, r2]
	system_register_isr(RAM_ISR_TABLE_PORT0_COMB_INDEX, (uint32_t)gpio_port0_isr_handler);
1000c3ce:	490a      	ldr	r1, [pc, #40]	; (1000c3f8 <gpio_init+0x5c>)
1000c3d0:	2027      	movs	r0, #39	; 0x27
1000c3d2:	4c0a      	ldr	r4, [pc, #40]	; (1000c3fc <gpio_init+0x60>)
1000c3d4:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT1_COMB_INDEX, (uint32_t)gpio_port1_isr_handler);
1000c3d6:	490a      	ldr	r1, [pc, #40]	; (1000c400 <gpio_init+0x64>)
1000c3d8:	2028      	movs	r0, #40	; 0x28
1000c3da:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT2_COMB_INDEX, (uint32_t)gpio_port2_isr_handler);
1000c3dc:	4909      	ldr	r1, [pc, #36]	; (1000c404 <gpio_init+0x68>)
1000c3de:	2029      	movs	r0, #41	; 0x29
1000c3e0:	47a0      	blx	r4
}
1000c3e2:	bd10      	pop	{r4, pc}
1000c3e4:	10019c84 	.word	0x10019c84
1000c3e8:	10019c40 	.word	0x10019c40
1000c3ec:	40010000 	.word	0x40010000
1000c3f0:	40011000 	.word	0x40011000
1000c3f4:	40013000 	.word	0x40013000
1000c3f8:	1000bca5 	.word	0x1000bca5
1000c3fc:	1000cfc9 	.word	0x1000cfc9
1000c400:	1000bd09 	.word	0x1000bd09
1000c404:	1000bd79 	.word	0x1000bd79

1000c408 <system_clock_config>:
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_config(enum system_clock_resource resoure, \
				enum system_clock_freq freq)
{
	switch (resoure) {
1000c408:	2801      	cmp	r0, #1
1000c40a:	d00d      	beq.n	1000c428 <system_clock_config+0x20>
1000c40c:	2800      	cmp	r0, #0
1000c40e:	d002      	beq.n	1000c416 <system_clock_config+0xe>
1000c410:	2802      	cmp	r0, #2
1000c412:	d01c      	beq.n	1000c44e <system_clock_config+0x46>
1000c414:	e02e      	b.n	1000c474 <system_clock_config+0x6c>
		case CLOCK_RESOURCE_XO_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000c416:	4a18      	ldr	r2, [pc, #96]	; (1000c478 <system_clock_config+0x70>)
1000c418:	6990      	ldr	r0, [r2, #24]
1000c41a:	230c      	movs	r3, #12
1000c41c:	4303      	orrs	r3, r0
1000c41e:	6193      	str	r3, [r2, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			system_clock_value = 26000000;
1000c420:	4a16      	ldr	r2, [pc, #88]	; (1000c47c <system_clock_config+0x74>)
1000c422:	4b17      	ldr	r3, [pc, #92]	; (1000c480 <system_clock_config+0x78>)
1000c424:	601a      	str	r2, [r3, #0]
			break;
1000c426:	e01a      	b.n	1000c45e <system_clock_config+0x56>

		case CLOCK_RESOURCE_LP_2_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000c428:	4b13      	ldr	r3, [pc, #76]	; (1000c478 <system_clock_config+0x70>)
1000c42a:	6998      	ldr	r0, [r3, #24]
1000c42c:	2208      	movs	r2, #8
1000c42e:	4302      	orrs	r2, r0
1000c430:	619a      	str	r2, [r3, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000c432:	699a      	ldr	r2, [r3, #24]
1000c434:	2004      	movs	r0, #4
1000c436:	4382      	bics	r2, r0
1000c438:	619a      	str	r2, [r3, #24]
					~LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK;
			AON_GP_REGS0->AON_PMU_CTRL.reg |= \
1000c43a:	4a12      	ldr	r2, [pc, #72]	; (1000c484 <system_clock_config+0x7c>)
1000c43c:	6853      	ldr	r3, [r2, #4]
1000c43e:	2080      	movs	r0, #128	; 0x80
1000c440:	0300      	lsls	r0, r0, #12
1000c442:	4303      	orrs	r3, r0
1000c444:	6053      	str	r3, [r2, #4]
					AON_GP_REGS_AON_PMU_CTRL_PMU_2MHZ_CLK_EN;
			system_clock_value = 2000000;
1000c446:	4a10      	ldr	r2, [pc, #64]	; (1000c488 <system_clock_config+0x80>)
1000c448:	4b0d      	ldr	r3, [pc, #52]	; (1000c480 <system_clock_config+0x78>)
1000c44a:	601a      	str	r2, [r3, #0]
			break;
1000c44c:	e007      	b.n	1000c45e <system_clock_config+0x56>

		case CLOCK_RESOURCE_RC_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000c44e:	4a0a      	ldr	r2, [pc, #40]	; (1000c478 <system_clock_config+0x70>)
1000c450:	6993      	ldr	r3, [r2, #24]
1000c452:	200c      	movs	r0, #12
1000c454:	4383      	bics	r3, r0
1000c456:	6193      	str	r3, [r2, #24]
					~(LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
1000c458:	4a08      	ldr	r2, [pc, #32]	; (1000c47c <system_clock_config+0x74>)
1000c45a:	4b09      	ldr	r3, [pc, #36]	; (1000c480 <system_clock_config+0x78>)
1000c45c:	601a      	str	r2, [r3, #0]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000c45e:	4b06      	ldr	r3, [pc, #24]	; (1000c478 <system_clock_config+0x70>)
1000c460:	699a      	ldr	r2, [r3, #24]
1000c462:	2003      	movs	r0, #3
1000c464:	4382      	bics	r2, r0
1000c466:	619a      	str	r2, [r3, #24]
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000c468:	699a      	ldr	r2, [r3, #24]
1000c46a:	4001      	ands	r1, r0
1000c46c:	4311      	orrs	r1, r2
1000c46e:	6199      	str	r1, [r3, #24]
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
1000c470:	2000      	movs	r0, #0
1000c472:	e000      	b.n	1000c476 <system_clock_config+0x6e>
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
			break;

		default:
			return STATUS_ERR_INVALID_ARG;
1000c474:	2017      	movs	r0, #23
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
}
1000c476:	4770      	bx	lr
1000c478:	4000b000 	.word	0x4000b000
1000c47c:	018cba80 	.word	0x018cba80
1000c480:	10019d18 	.word	0x10019d18
1000c484:	4000f000 	.word	0x4000f000
1000c488:	001e8480 	.word	0x001e8480

1000c48c <system_clock_get_value>:
 *
 * \return system clock value.
 */
uint32_t system_clock_get_value(void)
{
	return system_clock_value;
1000c48c:	4b01      	ldr	r3, [pc, #4]	; (1000c494 <system_clock_get_value+0x8>)
1000c48e:	6818      	ldr	r0, [r3, #0]
}
1000c490:	4770      	bx	lr
1000c492:	46c0      	nop			; (mov r8, r8)
1000c494:	10019d18 	.word	0x10019d18

1000c498 <system_clock_peripheral_enable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_enable(enum system_peripheral peripheral)
{
1000c498:	b500      	push	{lr}
	switch (peripheral) {
1000c49a:	2835      	cmp	r0, #53	; 0x35
1000c49c:	d900      	bls.n	1000c4a0 <system_clock_peripheral_enable+0x8>
1000c49e:	e1a2      	b.n	1000c7e6 <system_clock_peripheral_enable+0x34e>
1000c4a0:	0080      	lsls	r0, r0, #2
1000c4a2:	4bd2      	ldr	r3, [pc, #840]	; (1000c7ec <system_clock_peripheral_enable+0x354>)
1000c4a4:	581b      	ldr	r3, [r3, r0]
1000c4a6:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c4a8:	4ad1      	ldr	r2, [pc, #836]	; (1000c7f0 <system_clock_peripheral_enable+0x358>)
1000c4aa:	68d1      	ldr	r1, [r2, #12]
1000c4ac:	2302      	movs	r3, #2
1000c4ae:	430b      	orrs	r3, r1
1000c4b0:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c4b2:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;
1000c4b4:	e198      	b.n	1000c7e8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c4b6:	4ace      	ldr	r2, [pc, #824]	; (1000c7f0 <system_clock_peripheral_enable+0x358>)
1000c4b8:	68d1      	ldr	r1, [r2, #12]
1000c4ba:	2304      	movs	r3, #4
1000c4bc:	430b      	orrs	r3, r1
1000c4be:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c4c0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;
1000c4c2:	e191      	b.n	1000c7e8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c4c4:	4aca      	ldr	r2, [pc, #808]	; (1000c7f0 <system_clock_peripheral_enable+0x358>)
1000c4c6:	68d1      	ldr	r1, [r2, #12]
1000c4c8:	2308      	movs	r3, #8
1000c4ca:	430b      	orrs	r3, r1
1000c4cc:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c4ce:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;
1000c4d0:	e18a      	b.n	1000c7e8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c4d2:	4ac7      	ldr	r2, [pc, #796]	; (1000c7f0 <system_clock_peripheral_enable+0x358>)
1000c4d4:	68d1      	ldr	r1, [r2, #12]
1000c4d6:	2310      	movs	r3, #16
1000c4d8:	430b      	orrs	r3, r1
1000c4da:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c4dc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;
1000c4de:	e183      	b.n	1000c7e8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c4e0:	4ac3      	ldr	r2, [pc, #780]	; (1000c7f0 <system_clock_peripheral_enable+0x358>)
1000c4e2:	68d1      	ldr	r1, [r2, #12]
1000c4e4:	2320      	movs	r3, #32
1000c4e6:	430b      	orrs	r3, r1
1000c4e8:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c4ea:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;
1000c4ec:	e17c      	b.n	1000c7e8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c4ee:	4ac0      	ldr	r2, [pc, #768]	; (1000c7f0 <system_clock_peripheral_enable+0x358>)
1000c4f0:	68d1      	ldr	r1, [r2, #12]
1000c4f2:	2380      	movs	r3, #128	; 0x80
1000c4f4:	430b      	orrs	r3, r1
1000c4f6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c4f8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
1000c4fa:	e175      	b.n	1000c7e8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c4fc:	4abc      	ldr	r2, [pc, #752]	; (1000c7f0 <system_clock_peripheral_enable+0x358>)
1000c4fe:	68d3      	ldr	r3, [r2, #12]
1000c500:	2180      	movs	r1, #128	; 0x80
1000c502:	0049      	lsls	r1, r1, #1
1000c504:	430b      	orrs	r3, r1
1000c506:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c508:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN;
		break;
1000c50a:	e16d      	b.n	1000c7e8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c50c:	4ab8      	ldr	r2, [pc, #736]	; (1000c7f0 <system_clock_peripheral_enable+0x358>)
1000c50e:	68d3      	ldr	r3, [r2, #12]
1000c510:	2180      	movs	r1, #128	; 0x80
1000c512:	0109      	lsls	r1, r1, #4
1000c514:	430b      	orrs	r3, r1
1000c516:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c518:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN;
		break;
1000c51a:	e165      	b.n	1000c7e8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c51c:	4ab4      	ldr	r2, [pc, #720]	; (1000c7f0 <system_clock_peripheral_enable+0x358>)
1000c51e:	68d3      	ldr	r3, [r2, #12]
1000c520:	2180      	movs	r1, #128	; 0x80
1000c522:	0149      	lsls	r1, r1, #5
1000c524:	430b      	orrs	r3, r1
1000c526:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c528:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN;
		break;
1000c52a:	e15d      	b.n	1000c7e8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c52c:	4ab0      	ldr	r2, [pc, #704]	; (1000c7f0 <system_clock_peripheral_enable+0x358>)
1000c52e:	68d3      	ldr	r3, [r2, #12]
1000c530:	2180      	movs	r1, #128	; 0x80
1000c532:	0189      	lsls	r1, r1, #6
1000c534:	430b      	orrs	r3, r1
1000c536:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c538:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN;
		break;
1000c53a:	e155      	b.n	1000c7e8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c53c:	4aac      	ldr	r2, [pc, #688]	; (1000c7f0 <system_clock_peripheral_enable+0x358>)
1000c53e:	68d3      	ldr	r3, [r2, #12]
1000c540:	2180      	movs	r1, #128	; 0x80
1000c542:	01c9      	lsls	r1, r1, #7
1000c544:	430b      	orrs	r3, r1
1000c546:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c548:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN;
		break;
1000c54a:	e14d      	b.n	1000c7e8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c54c:	4aa8      	ldr	r2, [pc, #672]	; (1000c7f0 <system_clock_peripheral_enable+0x358>)
1000c54e:	68d3      	ldr	r3, [r2, #12]
1000c550:	2180      	movs	r1, #128	; 0x80
1000c552:	0209      	lsls	r1, r1, #8
1000c554:	430b      	orrs	r3, r1
1000c556:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c558:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN;
		break;
1000c55a:	e145      	b.n	1000c7e8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c55c:	4aa4      	ldr	r2, [pc, #656]	; (1000c7f0 <system_clock_peripheral_enable+0x358>)
1000c55e:	68d3      	ldr	r3, [r2, #12]
1000c560:	2180      	movs	r1, #128	; 0x80
1000c562:	0249      	lsls	r1, r1, #9
1000c564:	430b      	orrs	r3, r1
1000c566:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c568:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN;
		break;
1000c56a:	e13d      	b.n	1000c7e8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c56c:	4aa0      	ldr	r2, [pc, #640]	; (1000c7f0 <system_clock_peripheral_enable+0x358>)
1000c56e:	68d3      	ldr	r3, [r2, #12]
1000c570:	2180      	movs	r1, #128	; 0x80
1000c572:	0289      	lsls	r1, r1, #10
1000c574:	430b      	orrs	r3, r1
1000c576:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c578:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
1000c57a:	e135      	b.n	1000c7e8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c57c:	4a9c      	ldr	r2, [pc, #624]	; (1000c7f0 <system_clock_peripheral_enable+0x358>)
1000c57e:	68d3      	ldr	r3, [r2, #12]
1000c580:	2180      	movs	r1, #128	; 0x80
1000c582:	02c9      	lsls	r1, r1, #11
1000c584:	430b      	orrs	r3, r1
1000c586:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c588:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
1000c58a:	e12d      	b.n	1000c7e8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c58c:	4a98      	ldr	r2, [pc, #608]	; (1000c7f0 <system_clock_peripheral_enable+0x358>)
1000c58e:	68d3      	ldr	r3, [r2, #12]
1000c590:	2180      	movs	r1, #128	; 0x80
1000c592:	0309      	lsls	r1, r1, #12
1000c594:	430b      	orrs	r3, r1
1000c596:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c598:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
1000c59a:	e125      	b.n	1000c7e8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c59c:	4a94      	ldr	r2, [pc, #592]	; (1000c7f0 <system_clock_peripheral_enable+0x358>)
1000c59e:	68d3      	ldr	r3, [r2, #12]
1000c5a0:	2180      	movs	r1, #128	; 0x80
1000c5a2:	0349      	lsls	r1, r1, #13
1000c5a4:	430b      	orrs	r3, r1
1000c5a6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c5a8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
1000c5aa:	e11d      	b.n	1000c7e8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c5ac:	4a90      	ldr	r2, [pc, #576]	; (1000c7f0 <system_clock_peripheral_enable+0x358>)
1000c5ae:	68d3      	ldr	r3, [r2, #12]
1000c5b0:	2180      	movs	r1, #128	; 0x80
1000c5b2:	0389      	lsls	r1, r1, #14
1000c5b4:	430b      	orrs	r3, r1
1000c5b6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c5b8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
1000c5ba:	e115      	b.n	1000c7e8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c5bc:	4a8c      	ldr	r2, [pc, #560]	; (1000c7f0 <system_clock_peripheral_enable+0x358>)
1000c5be:	68d3      	ldr	r3, [r2, #12]
1000c5c0:	2180      	movs	r1, #128	; 0x80
1000c5c2:	03c9      	lsls	r1, r1, #15
1000c5c4:	430b      	orrs	r3, r1
1000c5c6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c5c8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
1000c5ca:	e10d      	b.n	1000c7e8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c5cc:	4a88      	ldr	r2, [pc, #544]	; (1000c7f0 <system_clock_peripheral_enable+0x358>)
1000c5ce:	68d3      	ldr	r3, [r2, #12]
1000c5d0:	2180      	movs	r1, #128	; 0x80
1000c5d2:	0409      	lsls	r1, r1, #16
1000c5d4:	430b      	orrs	r3, r1
1000c5d6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c5d8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
1000c5da:	e105      	b.n	1000c7e8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c5dc:	4a84      	ldr	r2, [pc, #528]	; (1000c7f0 <system_clock_peripheral_enable+0x358>)
1000c5de:	68d3      	ldr	r3, [r2, #12]
1000c5e0:	2180      	movs	r1, #128	; 0x80
1000c5e2:	0449      	lsls	r1, r1, #17
1000c5e4:	430b      	orrs	r3, r1
1000c5e6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c5e8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
1000c5ea:	e0fd      	b.n	1000c7e8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c5ec:	4a80      	ldr	r2, [pc, #512]	; (1000c7f0 <system_clock_peripheral_enable+0x358>)
1000c5ee:	68d3      	ldr	r3, [r2, #12]
1000c5f0:	2180      	movs	r1, #128	; 0x80
1000c5f2:	0489      	lsls	r1, r1, #18
1000c5f4:	430b      	orrs	r3, r1
1000c5f6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c5f8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
1000c5fa:	e0f5      	b.n	1000c7e8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c5fc:	4a7c      	ldr	r2, [pc, #496]	; (1000c7f0 <system_clock_peripheral_enable+0x358>)
1000c5fe:	68d3      	ldr	r3, [r2, #12]
1000c600:	2180      	movs	r1, #128	; 0x80
1000c602:	04c9      	lsls	r1, r1, #19
1000c604:	430b      	orrs	r3, r1
1000c606:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c608:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN;
		break;
1000c60a:	e0ed      	b.n	1000c7e8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c60c:	4a78      	ldr	r2, [pc, #480]	; (1000c7f0 <system_clock_peripheral_enable+0x358>)
1000c60e:	68d3      	ldr	r3, [r2, #12]
1000c610:	2180      	movs	r1, #128	; 0x80
1000c612:	0509      	lsls	r1, r1, #20
1000c614:	430b      	orrs	r3, r1
1000c616:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c618:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN;
		break;
1000c61a:	e0e5      	b.n	1000c7e8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c61c:	4a74      	ldr	r2, [pc, #464]	; (1000c7f0 <system_clock_peripheral_enable+0x358>)
1000c61e:	68d3      	ldr	r3, [r2, #12]
1000c620:	2180      	movs	r1, #128	; 0x80
1000c622:	0549      	lsls	r1, r1, #21
1000c624:	430b      	orrs	r3, r1
1000c626:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c628:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN;
		break;
1000c62a:	e0dd      	b.n	1000c7e8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c62c:	4a70      	ldr	r2, [pc, #448]	; (1000c7f0 <system_clock_peripheral_enable+0x358>)
1000c62e:	68d3      	ldr	r3, [r2, #12]
1000c630:	2180      	movs	r1, #128	; 0x80
1000c632:	0589      	lsls	r1, r1, #22
1000c634:	430b      	orrs	r3, r1
1000c636:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c638:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN;
		break;
1000c63a:	e0d5      	b.n	1000c7e8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c63c:	4a6c      	ldr	r2, [pc, #432]	; (1000c7f0 <system_clock_peripheral_enable+0x358>)
1000c63e:	68d3      	ldr	r3, [r2, #12]
1000c640:	2180      	movs	r1, #128	; 0x80
1000c642:	05c9      	lsls	r1, r1, #23
1000c644:	430b      	orrs	r3, r1
1000c646:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c648:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
1000c64a:	e0cd      	b.n	1000c7e8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c64c:	4a68      	ldr	r2, [pc, #416]	; (1000c7f0 <system_clock_peripheral_enable+0x358>)
1000c64e:	6911      	ldr	r1, [r2, #16]
1000c650:	2301      	movs	r3, #1
1000c652:	430b      	orrs	r3, r1
1000c654:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c656:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;
1000c658:	e0c6      	b.n	1000c7e8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c65a:	4a65      	ldr	r2, [pc, #404]	; (1000c7f0 <system_clock_peripheral_enable+0x358>)
1000c65c:	6911      	ldr	r1, [r2, #16]
1000c65e:	2302      	movs	r3, #2
1000c660:	430b      	orrs	r3, r1
1000c662:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c664:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;
1000c666:	e0bf      	b.n	1000c7e8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c668:	4a61      	ldr	r2, [pc, #388]	; (1000c7f0 <system_clock_peripheral_enable+0x358>)
1000c66a:	6911      	ldr	r1, [r2, #16]
1000c66c:	2304      	movs	r3, #4
1000c66e:	430b      	orrs	r3, r1
1000c670:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c672:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;
1000c674:	e0b8      	b.n	1000c7e8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c676:	4a5e      	ldr	r2, [pc, #376]	; (1000c7f0 <system_clock_peripheral_enable+0x358>)
1000c678:	6911      	ldr	r1, [r2, #16]
1000c67a:	2308      	movs	r3, #8
1000c67c:	430b      	orrs	r3, r1
1000c67e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c680:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;
1000c682:	e0b1      	b.n	1000c7e8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c684:	4a5a      	ldr	r2, [pc, #360]	; (1000c7f0 <system_clock_peripheral_enable+0x358>)
1000c686:	6911      	ldr	r1, [r2, #16]
1000c688:	2310      	movs	r3, #16
1000c68a:	430b      	orrs	r3, r1
1000c68c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c68e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;
1000c690:	e0aa      	b.n	1000c7e8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c692:	4a57      	ldr	r2, [pc, #348]	; (1000c7f0 <system_clock_peripheral_enable+0x358>)
1000c694:	6911      	ldr	r1, [r2, #16]
1000c696:	2320      	movs	r3, #32
1000c698:	430b      	orrs	r3, r1
1000c69a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c69c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;
1000c69e:	e0a3      	b.n	1000c7e8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c6a0:	4a53      	ldr	r2, [pc, #332]	; (1000c7f0 <system_clock_peripheral_enable+0x358>)
1000c6a2:	6911      	ldr	r1, [r2, #16]
1000c6a4:	2340      	movs	r3, #64	; 0x40
1000c6a6:	430b      	orrs	r3, r1
1000c6a8:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c6aa:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;
1000c6ac:	e09c      	b.n	1000c7e8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c6ae:	4a50      	ldr	r2, [pc, #320]	; (1000c7f0 <system_clock_peripheral_enable+0x358>)
1000c6b0:	6911      	ldr	r1, [r2, #16]
1000c6b2:	2380      	movs	r3, #128	; 0x80
1000c6b4:	430b      	orrs	r3, r1
1000c6b6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c6b8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN;
		break;
1000c6ba:	e095      	b.n	1000c7e8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c6bc:	4a4c      	ldr	r2, [pc, #304]	; (1000c7f0 <system_clock_peripheral_enable+0x358>)
1000c6be:	6913      	ldr	r3, [r2, #16]
1000c6c0:	2180      	movs	r1, #128	; 0x80
1000c6c2:	0049      	lsls	r1, r1, #1
1000c6c4:	430b      	orrs	r3, r1
1000c6c6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c6c8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN;
		break;
1000c6ca:	e08d      	b.n	1000c7e8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c6cc:	4a48      	ldr	r2, [pc, #288]	; (1000c7f0 <system_clock_peripheral_enable+0x358>)
1000c6ce:	6913      	ldr	r3, [r2, #16]
1000c6d0:	2180      	movs	r1, #128	; 0x80
1000c6d2:	0089      	lsls	r1, r1, #2
1000c6d4:	430b      	orrs	r3, r1
1000c6d6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c6d8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN;
		break;
1000c6da:	e085      	b.n	1000c7e8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c6dc:	4a44      	ldr	r2, [pc, #272]	; (1000c7f0 <system_clock_peripheral_enable+0x358>)
1000c6de:	6913      	ldr	r3, [r2, #16]
1000c6e0:	2180      	movs	r1, #128	; 0x80
1000c6e2:	00c9      	lsls	r1, r1, #3
1000c6e4:	430b      	orrs	r3, r1
1000c6e6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c6e8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
1000c6ea:	e07d      	b.n	1000c7e8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c6ec:	4a40      	ldr	r2, [pc, #256]	; (1000c7f0 <system_clock_peripheral_enable+0x358>)
1000c6ee:	6913      	ldr	r3, [r2, #16]
1000c6f0:	2180      	movs	r1, #128	; 0x80
1000c6f2:	0109      	lsls	r1, r1, #4
1000c6f4:	430b      	orrs	r3, r1
1000c6f6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c6f8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
1000c6fa:	e075      	b.n	1000c7e8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c6fc:	4a3c      	ldr	r2, [pc, #240]	; (1000c7f0 <system_clock_peripheral_enable+0x358>)
1000c6fe:	6913      	ldr	r3, [r2, #16]
1000c700:	2180      	movs	r1, #128	; 0x80
1000c702:	0149      	lsls	r1, r1, #5
1000c704:	430b      	orrs	r3, r1
1000c706:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c708:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
1000c70a:	e06d      	b.n	1000c7e8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c70c:	4a38      	ldr	r2, [pc, #224]	; (1000c7f0 <system_clock_peripheral_enable+0x358>)
1000c70e:	6913      	ldr	r3, [r2, #16]
1000c710:	2180      	movs	r1, #128	; 0x80
1000c712:	0189      	lsls	r1, r1, #6
1000c714:	430b      	orrs	r3, r1
1000c716:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c718:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
1000c71a:	e065      	b.n	1000c7e8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c71c:	4a34      	ldr	r2, [pc, #208]	; (1000c7f0 <system_clock_peripheral_enable+0x358>)
1000c71e:	6913      	ldr	r3, [r2, #16]
1000c720:	2180      	movs	r1, #128	; 0x80
1000c722:	01c9      	lsls	r1, r1, #7
1000c724:	430b      	orrs	r3, r1
1000c726:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c728:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN;
		break;
1000c72a:	e05d      	b.n	1000c7e8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c72c:	4a30      	ldr	r2, [pc, #192]	; (1000c7f0 <system_clock_peripheral_enable+0x358>)
1000c72e:	6913      	ldr	r3, [r2, #16]
1000c730:	2180      	movs	r1, #128	; 0x80
1000c732:	0209      	lsls	r1, r1, #8
1000c734:	430b      	orrs	r3, r1
1000c736:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c738:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
1000c73a:	e055      	b.n	1000c7e8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c73c:	4a2c      	ldr	r2, [pc, #176]	; (1000c7f0 <system_clock_peripheral_enable+0x358>)
1000c73e:	6913      	ldr	r3, [r2, #16]
1000c740:	2180      	movs	r1, #128	; 0x80
1000c742:	0249      	lsls	r1, r1, #9
1000c744:	430b      	orrs	r3, r1
1000c746:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c748:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
1000c74a:	e04d      	b.n	1000c7e8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c74c:	4a28      	ldr	r2, [pc, #160]	; (1000c7f0 <system_clock_peripheral_enable+0x358>)
1000c74e:	6913      	ldr	r3, [r2, #16]
1000c750:	2180      	movs	r1, #128	; 0x80
1000c752:	0289      	lsls	r1, r1, #10
1000c754:	430b      	orrs	r3, r1
1000c756:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c758:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
1000c75a:	e045      	b.n	1000c7e8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c75c:	4a24      	ldr	r2, [pc, #144]	; (1000c7f0 <system_clock_peripheral_enable+0x358>)
1000c75e:	6913      	ldr	r3, [r2, #16]
1000c760:	2180      	movs	r1, #128	; 0x80
1000c762:	02c9      	lsls	r1, r1, #11
1000c764:	430b      	orrs	r3, r1
1000c766:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c768:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
1000c76a:	e03d      	b.n	1000c7e8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c76c:	4a20      	ldr	r2, [pc, #128]	; (1000c7f0 <system_clock_peripheral_enable+0x358>)
1000c76e:	6913      	ldr	r3, [r2, #16]
1000c770:	2180      	movs	r1, #128	; 0x80
1000c772:	0309      	lsls	r1, r1, #12
1000c774:	430b      	orrs	r3, r1
1000c776:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c778:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
1000c77a:	e035      	b.n	1000c7e8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c77c:	4a1c      	ldr	r2, [pc, #112]	; (1000c7f0 <system_clock_peripheral_enable+0x358>)
1000c77e:	6913      	ldr	r3, [r2, #16]
1000c780:	2180      	movs	r1, #128	; 0x80
1000c782:	0349      	lsls	r1, r1, #13
1000c784:	430b      	orrs	r3, r1
1000c786:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c788:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
1000c78a:	e02d      	b.n	1000c7e8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c78c:	4a18      	ldr	r2, [pc, #96]	; (1000c7f0 <system_clock_peripheral_enable+0x358>)
1000c78e:	6913      	ldr	r3, [r2, #16]
1000c790:	2180      	movs	r1, #128	; 0x80
1000c792:	0389      	lsls	r1, r1, #14
1000c794:	430b      	orrs	r3, r1
1000c796:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c798:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
1000c79a:	e025      	b.n	1000c7e8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c79c:	4a14      	ldr	r2, [pc, #80]	; (1000c7f0 <system_clock_peripheral_enable+0x358>)
1000c79e:	6913      	ldr	r3, [r2, #16]
1000c7a0:	2180      	movs	r1, #128	; 0x80
1000c7a2:	03c9      	lsls	r1, r1, #15
1000c7a4:	430b      	orrs	r3, r1
1000c7a6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c7a8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
1000c7aa:	e01d      	b.n	1000c7e8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c7ac:	4a10      	ldr	r2, [pc, #64]	; (1000c7f0 <system_clock_peripheral_enable+0x358>)
1000c7ae:	6913      	ldr	r3, [r2, #16]
1000c7b0:	2180      	movs	r1, #128	; 0x80
1000c7b2:	0409      	lsls	r1, r1, #16
1000c7b4:	430b      	orrs	r3, r1
1000c7b6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c7b8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
1000c7ba:	e015      	b.n	1000c7e8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000c7bc:	4a0c      	ldr	r2, [pc, #48]	; (1000c7f0 <system_clock_peripheral_enable+0x358>)
1000c7be:	7d11      	ldrb	r1, [r2, #20]
1000c7c0:	2301      	movs	r3, #1
1000c7c2:	430b      	orrs	r3, r1
1000c7c4:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c7c6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;
1000c7c8:	e00e      	b.n	1000c7e8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000c7ca:	4a09      	ldr	r2, [pc, #36]	; (1000c7f0 <system_clock_peripheral_enable+0x358>)
1000c7cc:	7d11      	ldrb	r1, [r2, #20]
1000c7ce:	2302      	movs	r3, #2
1000c7d0:	430b      	orrs	r3, r1
1000c7d2:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c7d4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;
1000c7d6:	e007      	b.n	1000c7e8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000c7d8:	4a05      	ldr	r2, [pc, #20]	; (1000c7f0 <system_clock_peripheral_enable+0x358>)
1000c7da:	7d11      	ldrb	r1, [r2, #20]
1000c7dc:	2304      	movs	r3, #4
1000c7de:	430b      	orrs	r3, r1
1000c7e0:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c7e2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_PERIPH_REGS_CLK_EN;
		break;
1000c7e4:	e000      	b.n	1000c7e8 <system_clock_peripheral_enable+0x350>

		default:
			return STATUS_ERR_INVALID_ARG;
1000c7e6:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000c7e8:	bd00      	pop	{pc}
1000c7ea:	46c0      	nop			; (mov r8, r8)
1000c7ec:	10016cc8 	.word	0x10016cc8
1000c7f0:	4000b000 	.word	0x4000b000

1000c7f4 <system_clock_peripheral_disable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_disable(enum system_peripheral peripheral)
{
1000c7f4:	b500      	push	{lr}
	switch (peripheral) {
1000c7f6:	2835      	cmp	r0, #53	; 0x35
1000c7f8:	d900      	bls.n	1000c7fc <system_clock_peripheral_disable+0x8>
1000c7fa:	e17d      	b.n	1000caf8 <system_clock_peripheral_disable+0x304>
1000c7fc:	0080      	lsls	r0, r0, #2
1000c7fe:	4bbf      	ldr	r3, [pc, #764]	; (1000cafc <system_clock_peripheral_disable+0x308>)
1000c800:	581b      	ldr	r3, [r3, r0]
1000c802:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c804:	4abe      	ldr	r2, [pc, #760]	; (1000cb00 <system_clock_peripheral_disable+0x30c>)
1000c806:	68d3      	ldr	r3, [r2, #12]
1000c808:	2102      	movs	r1, #2
1000c80a:	438b      	bics	r3, r1
1000c80c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c80e:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;
1000c810:	e173      	b.n	1000cafa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c812:	4abb      	ldr	r2, [pc, #748]	; (1000cb00 <system_clock_peripheral_disable+0x30c>)
1000c814:	68d3      	ldr	r3, [r2, #12]
1000c816:	2104      	movs	r1, #4
1000c818:	438b      	bics	r3, r1
1000c81a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c81c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;
1000c81e:	e16c      	b.n	1000cafa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c820:	4ab7      	ldr	r2, [pc, #732]	; (1000cb00 <system_clock_peripheral_disable+0x30c>)
1000c822:	68d3      	ldr	r3, [r2, #12]
1000c824:	2108      	movs	r1, #8
1000c826:	438b      	bics	r3, r1
1000c828:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c82a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;
1000c82c:	e165      	b.n	1000cafa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c82e:	4ab4      	ldr	r2, [pc, #720]	; (1000cb00 <system_clock_peripheral_disable+0x30c>)
1000c830:	68d3      	ldr	r3, [r2, #12]
1000c832:	2110      	movs	r1, #16
1000c834:	438b      	bics	r3, r1
1000c836:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c838:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;
1000c83a:	e15e      	b.n	1000cafa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c83c:	4ab0      	ldr	r2, [pc, #704]	; (1000cb00 <system_clock_peripheral_disable+0x30c>)
1000c83e:	68d3      	ldr	r3, [r2, #12]
1000c840:	2120      	movs	r1, #32
1000c842:	438b      	bics	r3, r1
1000c844:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c846:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;
1000c848:	e157      	b.n	1000cafa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c84a:	4aad      	ldr	r2, [pc, #692]	; (1000cb00 <system_clock_peripheral_disable+0x30c>)
1000c84c:	68d3      	ldr	r3, [r2, #12]
1000c84e:	2180      	movs	r1, #128	; 0x80
1000c850:	438b      	bics	r3, r1
1000c852:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c854:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
1000c856:	e150      	b.n	1000cafa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c858:	4aa9      	ldr	r2, [pc, #676]	; (1000cb00 <system_clock_peripheral_disable+0x30c>)
1000c85a:	68d1      	ldr	r1, [r2, #12]
1000c85c:	4ba9      	ldr	r3, [pc, #676]	; (1000cb04 <system_clock_peripheral_disable+0x310>)
1000c85e:	400b      	ands	r3, r1
1000c860:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c862:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN;
		break;
1000c864:	e149      	b.n	1000cafa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c866:	4aa6      	ldr	r2, [pc, #664]	; (1000cb00 <system_clock_peripheral_disable+0x30c>)
1000c868:	68d1      	ldr	r1, [r2, #12]
1000c86a:	4ba7      	ldr	r3, [pc, #668]	; (1000cb08 <system_clock_peripheral_disable+0x314>)
1000c86c:	400b      	ands	r3, r1
1000c86e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c870:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN;
		break;
1000c872:	e142      	b.n	1000cafa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c874:	4aa2      	ldr	r2, [pc, #648]	; (1000cb00 <system_clock_peripheral_disable+0x30c>)
1000c876:	68d1      	ldr	r1, [r2, #12]
1000c878:	4ba4      	ldr	r3, [pc, #656]	; (1000cb0c <system_clock_peripheral_disable+0x318>)
1000c87a:	400b      	ands	r3, r1
1000c87c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c87e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN;
		break;
1000c880:	e13b      	b.n	1000cafa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c882:	4a9f      	ldr	r2, [pc, #636]	; (1000cb00 <system_clock_peripheral_disable+0x30c>)
1000c884:	68d1      	ldr	r1, [r2, #12]
1000c886:	4ba2      	ldr	r3, [pc, #648]	; (1000cb10 <system_clock_peripheral_disable+0x31c>)
1000c888:	400b      	ands	r3, r1
1000c88a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c88c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN;
		break;
1000c88e:	e134      	b.n	1000cafa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c890:	4a9b      	ldr	r2, [pc, #620]	; (1000cb00 <system_clock_peripheral_disable+0x30c>)
1000c892:	68d1      	ldr	r1, [r2, #12]
1000c894:	4b9f      	ldr	r3, [pc, #636]	; (1000cb14 <system_clock_peripheral_disable+0x320>)
1000c896:	400b      	ands	r3, r1
1000c898:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c89a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN;
		break;
1000c89c:	e12d      	b.n	1000cafa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c89e:	4a98      	ldr	r2, [pc, #608]	; (1000cb00 <system_clock_peripheral_disable+0x30c>)
1000c8a0:	68d1      	ldr	r1, [r2, #12]
1000c8a2:	4b9d      	ldr	r3, [pc, #628]	; (1000cb18 <system_clock_peripheral_disable+0x324>)
1000c8a4:	400b      	ands	r3, r1
1000c8a6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c8a8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN;
		break;
1000c8aa:	e126      	b.n	1000cafa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c8ac:	4a94      	ldr	r2, [pc, #592]	; (1000cb00 <system_clock_peripheral_disable+0x30c>)
1000c8ae:	68d1      	ldr	r1, [r2, #12]
1000c8b0:	4b9a      	ldr	r3, [pc, #616]	; (1000cb1c <system_clock_peripheral_disable+0x328>)
1000c8b2:	400b      	ands	r3, r1
1000c8b4:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c8b6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN;
		break;
1000c8b8:	e11f      	b.n	1000cafa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c8ba:	4a91      	ldr	r2, [pc, #580]	; (1000cb00 <system_clock_peripheral_disable+0x30c>)
1000c8bc:	68d1      	ldr	r1, [r2, #12]
1000c8be:	4b98      	ldr	r3, [pc, #608]	; (1000cb20 <system_clock_peripheral_disable+0x32c>)
1000c8c0:	400b      	ands	r3, r1
1000c8c2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c8c4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
1000c8c6:	e118      	b.n	1000cafa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c8c8:	4a8d      	ldr	r2, [pc, #564]	; (1000cb00 <system_clock_peripheral_disable+0x30c>)
1000c8ca:	68d1      	ldr	r1, [r2, #12]
1000c8cc:	4b95      	ldr	r3, [pc, #596]	; (1000cb24 <system_clock_peripheral_disable+0x330>)
1000c8ce:	400b      	ands	r3, r1
1000c8d0:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c8d2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
1000c8d4:	e111      	b.n	1000cafa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c8d6:	4a8a      	ldr	r2, [pc, #552]	; (1000cb00 <system_clock_peripheral_disable+0x30c>)
1000c8d8:	68d1      	ldr	r1, [r2, #12]
1000c8da:	4b93      	ldr	r3, [pc, #588]	; (1000cb28 <system_clock_peripheral_disable+0x334>)
1000c8dc:	400b      	ands	r3, r1
1000c8de:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c8e0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
1000c8e2:	e10a      	b.n	1000cafa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c8e4:	4a86      	ldr	r2, [pc, #536]	; (1000cb00 <system_clock_peripheral_disable+0x30c>)
1000c8e6:	68d1      	ldr	r1, [r2, #12]
1000c8e8:	4b90      	ldr	r3, [pc, #576]	; (1000cb2c <system_clock_peripheral_disable+0x338>)
1000c8ea:	400b      	ands	r3, r1
1000c8ec:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c8ee:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
1000c8f0:	e103      	b.n	1000cafa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c8f2:	4a83      	ldr	r2, [pc, #524]	; (1000cb00 <system_clock_peripheral_disable+0x30c>)
1000c8f4:	68d1      	ldr	r1, [r2, #12]
1000c8f6:	4b8e      	ldr	r3, [pc, #568]	; (1000cb30 <system_clock_peripheral_disable+0x33c>)
1000c8f8:	400b      	ands	r3, r1
1000c8fa:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c8fc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
1000c8fe:	e0fc      	b.n	1000cafa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c900:	4a7f      	ldr	r2, [pc, #508]	; (1000cb00 <system_clock_peripheral_disable+0x30c>)
1000c902:	68d1      	ldr	r1, [r2, #12]
1000c904:	4b8b      	ldr	r3, [pc, #556]	; (1000cb34 <system_clock_peripheral_disable+0x340>)
1000c906:	400b      	ands	r3, r1
1000c908:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c90a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
1000c90c:	e0f5      	b.n	1000cafa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c90e:	4a7c      	ldr	r2, [pc, #496]	; (1000cb00 <system_clock_peripheral_disable+0x30c>)
1000c910:	68d1      	ldr	r1, [r2, #12]
1000c912:	4b89      	ldr	r3, [pc, #548]	; (1000cb38 <system_clock_peripheral_disable+0x344>)
1000c914:	400b      	ands	r3, r1
1000c916:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c918:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
1000c91a:	e0ee      	b.n	1000cafa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c91c:	4a78      	ldr	r2, [pc, #480]	; (1000cb00 <system_clock_peripheral_disable+0x30c>)
1000c91e:	68d1      	ldr	r1, [r2, #12]
1000c920:	4b86      	ldr	r3, [pc, #536]	; (1000cb3c <system_clock_peripheral_disable+0x348>)
1000c922:	400b      	ands	r3, r1
1000c924:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c926:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
1000c928:	e0e7      	b.n	1000cafa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c92a:	4a75      	ldr	r2, [pc, #468]	; (1000cb00 <system_clock_peripheral_disable+0x30c>)
1000c92c:	68d1      	ldr	r1, [r2, #12]
1000c92e:	4b84      	ldr	r3, [pc, #528]	; (1000cb40 <system_clock_peripheral_disable+0x34c>)
1000c930:	400b      	ands	r3, r1
1000c932:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c934:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
1000c936:	e0e0      	b.n	1000cafa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c938:	4a71      	ldr	r2, [pc, #452]	; (1000cb00 <system_clock_peripheral_disable+0x30c>)
1000c93a:	68d1      	ldr	r1, [r2, #12]
1000c93c:	4b81      	ldr	r3, [pc, #516]	; (1000cb44 <system_clock_peripheral_disable+0x350>)
1000c93e:	400b      	ands	r3, r1
1000c940:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c942:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN;
		break;
1000c944:	e0d9      	b.n	1000cafa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c946:	4a6e      	ldr	r2, [pc, #440]	; (1000cb00 <system_clock_peripheral_disable+0x30c>)
1000c948:	68d1      	ldr	r1, [r2, #12]
1000c94a:	4b7f      	ldr	r3, [pc, #508]	; (1000cb48 <system_clock_peripheral_disable+0x354>)
1000c94c:	400b      	ands	r3, r1
1000c94e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c950:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN;
		break;
1000c952:	e0d2      	b.n	1000cafa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c954:	4a6a      	ldr	r2, [pc, #424]	; (1000cb00 <system_clock_peripheral_disable+0x30c>)
1000c956:	68d1      	ldr	r1, [r2, #12]
1000c958:	4b7c      	ldr	r3, [pc, #496]	; (1000cb4c <system_clock_peripheral_disable+0x358>)
1000c95a:	400b      	ands	r3, r1
1000c95c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c95e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN;
		break;
1000c960:	e0cb      	b.n	1000cafa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c962:	4a67      	ldr	r2, [pc, #412]	; (1000cb00 <system_clock_peripheral_disable+0x30c>)
1000c964:	68d1      	ldr	r1, [r2, #12]
1000c966:	4b7a      	ldr	r3, [pc, #488]	; (1000cb50 <system_clock_peripheral_disable+0x35c>)
1000c968:	400b      	ands	r3, r1
1000c96a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c96c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN;
		break;
1000c96e:	e0c4      	b.n	1000cafa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c970:	4a63      	ldr	r2, [pc, #396]	; (1000cb00 <system_clock_peripheral_disable+0x30c>)
1000c972:	68d1      	ldr	r1, [r2, #12]
1000c974:	4b77      	ldr	r3, [pc, #476]	; (1000cb54 <system_clock_peripheral_disable+0x360>)
1000c976:	400b      	ands	r3, r1
1000c978:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c97a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
1000c97c:	e0bd      	b.n	1000cafa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c97e:	4a60      	ldr	r2, [pc, #384]	; (1000cb00 <system_clock_peripheral_disable+0x30c>)
1000c980:	6913      	ldr	r3, [r2, #16]
1000c982:	2101      	movs	r1, #1
1000c984:	438b      	bics	r3, r1
1000c986:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c988:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;
1000c98a:	e0b6      	b.n	1000cafa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c98c:	4a5c      	ldr	r2, [pc, #368]	; (1000cb00 <system_clock_peripheral_disable+0x30c>)
1000c98e:	6913      	ldr	r3, [r2, #16]
1000c990:	2102      	movs	r1, #2
1000c992:	438b      	bics	r3, r1
1000c994:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c996:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;
1000c998:	e0af      	b.n	1000cafa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c99a:	4a59      	ldr	r2, [pc, #356]	; (1000cb00 <system_clock_peripheral_disable+0x30c>)
1000c99c:	6913      	ldr	r3, [r2, #16]
1000c99e:	2104      	movs	r1, #4
1000c9a0:	438b      	bics	r3, r1
1000c9a2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c9a4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;
1000c9a6:	e0a8      	b.n	1000cafa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c9a8:	4a55      	ldr	r2, [pc, #340]	; (1000cb00 <system_clock_peripheral_disable+0x30c>)
1000c9aa:	6913      	ldr	r3, [r2, #16]
1000c9ac:	2108      	movs	r1, #8
1000c9ae:	438b      	bics	r3, r1
1000c9b0:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c9b2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;
1000c9b4:	e0a1      	b.n	1000cafa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c9b6:	4a52      	ldr	r2, [pc, #328]	; (1000cb00 <system_clock_peripheral_disable+0x30c>)
1000c9b8:	6913      	ldr	r3, [r2, #16]
1000c9ba:	2110      	movs	r1, #16
1000c9bc:	438b      	bics	r3, r1
1000c9be:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c9c0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;
1000c9c2:	e09a      	b.n	1000cafa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c9c4:	4a4e      	ldr	r2, [pc, #312]	; (1000cb00 <system_clock_peripheral_disable+0x30c>)
1000c9c6:	6913      	ldr	r3, [r2, #16]
1000c9c8:	2120      	movs	r1, #32
1000c9ca:	438b      	bics	r3, r1
1000c9cc:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c9ce:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;
1000c9d0:	e093      	b.n	1000cafa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c9d2:	4a4b      	ldr	r2, [pc, #300]	; (1000cb00 <system_clock_peripheral_disable+0x30c>)
1000c9d4:	6913      	ldr	r3, [r2, #16]
1000c9d6:	2140      	movs	r1, #64	; 0x40
1000c9d8:	438b      	bics	r3, r1
1000c9da:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c9dc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;
1000c9de:	e08c      	b.n	1000cafa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c9e0:	4a47      	ldr	r2, [pc, #284]	; (1000cb00 <system_clock_peripheral_disable+0x30c>)
1000c9e2:	6913      	ldr	r3, [r2, #16]
1000c9e4:	2180      	movs	r1, #128	; 0x80
1000c9e6:	438b      	bics	r3, r1
1000c9e8:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c9ea:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN;
		break;
1000c9ec:	e085      	b.n	1000cafa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c9ee:	4a44      	ldr	r2, [pc, #272]	; (1000cb00 <system_clock_peripheral_disable+0x30c>)
1000c9f0:	6911      	ldr	r1, [r2, #16]
1000c9f2:	4b44      	ldr	r3, [pc, #272]	; (1000cb04 <system_clock_peripheral_disable+0x310>)
1000c9f4:	400b      	ands	r3, r1
1000c9f6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c9f8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN;
		break;
1000c9fa:	e07e      	b.n	1000cafa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c9fc:	4a40      	ldr	r2, [pc, #256]	; (1000cb00 <system_clock_peripheral_disable+0x30c>)
1000c9fe:	6911      	ldr	r1, [r2, #16]
1000ca00:	4b55      	ldr	r3, [pc, #340]	; (1000cb58 <system_clock_peripheral_disable+0x364>)
1000ca02:	400b      	ands	r3, r1
1000ca04:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca06:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN;
		break;
1000ca08:	e077      	b.n	1000cafa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000ca0a:	4a3d      	ldr	r2, [pc, #244]	; (1000cb00 <system_clock_peripheral_disable+0x30c>)
1000ca0c:	6911      	ldr	r1, [r2, #16]
1000ca0e:	4b53      	ldr	r3, [pc, #332]	; (1000cb5c <system_clock_peripheral_disable+0x368>)
1000ca10:	400b      	ands	r3, r1
1000ca12:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca14:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
1000ca16:	e070      	b.n	1000cafa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000ca18:	4a39      	ldr	r2, [pc, #228]	; (1000cb00 <system_clock_peripheral_disable+0x30c>)
1000ca1a:	6911      	ldr	r1, [r2, #16]
1000ca1c:	4b3a      	ldr	r3, [pc, #232]	; (1000cb08 <system_clock_peripheral_disable+0x314>)
1000ca1e:	400b      	ands	r3, r1
1000ca20:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca22:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
1000ca24:	e069      	b.n	1000cafa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000ca26:	4a36      	ldr	r2, [pc, #216]	; (1000cb00 <system_clock_peripheral_disable+0x30c>)
1000ca28:	6911      	ldr	r1, [r2, #16]
1000ca2a:	4b38      	ldr	r3, [pc, #224]	; (1000cb0c <system_clock_peripheral_disable+0x318>)
1000ca2c:	400b      	ands	r3, r1
1000ca2e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca30:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
1000ca32:	e062      	b.n	1000cafa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000ca34:	4a32      	ldr	r2, [pc, #200]	; (1000cb00 <system_clock_peripheral_disable+0x30c>)
1000ca36:	6911      	ldr	r1, [r2, #16]
1000ca38:	4b35      	ldr	r3, [pc, #212]	; (1000cb10 <system_clock_peripheral_disable+0x31c>)
1000ca3a:	400b      	ands	r3, r1
1000ca3c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca3e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
1000ca40:	e05b      	b.n	1000cafa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000ca42:	4a2f      	ldr	r2, [pc, #188]	; (1000cb00 <system_clock_peripheral_disable+0x30c>)
1000ca44:	6911      	ldr	r1, [r2, #16]
1000ca46:	4b33      	ldr	r3, [pc, #204]	; (1000cb14 <system_clock_peripheral_disable+0x320>)
1000ca48:	400b      	ands	r3, r1
1000ca4a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca4c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN;
		break;
1000ca4e:	e054      	b.n	1000cafa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000ca50:	4a2b      	ldr	r2, [pc, #172]	; (1000cb00 <system_clock_peripheral_disable+0x30c>)
1000ca52:	6911      	ldr	r1, [r2, #16]
1000ca54:	4b30      	ldr	r3, [pc, #192]	; (1000cb18 <system_clock_peripheral_disable+0x324>)
1000ca56:	400b      	ands	r3, r1
1000ca58:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca5a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
1000ca5c:	e04d      	b.n	1000cafa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000ca5e:	4a28      	ldr	r2, [pc, #160]	; (1000cb00 <system_clock_peripheral_disable+0x30c>)
1000ca60:	6911      	ldr	r1, [r2, #16]
1000ca62:	4b2e      	ldr	r3, [pc, #184]	; (1000cb1c <system_clock_peripheral_disable+0x328>)
1000ca64:	400b      	ands	r3, r1
1000ca66:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca68:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
1000ca6a:	e046      	b.n	1000cafa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000ca6c:	4a24      	ldr	r2, [pc, #144]	; (1000cb00 <system_clock_peripheral_disable+0x30c>)
1000ca6e:	6911      	ldr	r1, [r2, #16]
1000ca70:	4b2b      	ldr	r3, [pc, #172]	; (1000cb20 <system_clock_peripheral_disable+0x32c>)
1000ca72:	400b      	ands	r3, r1
1000ca74:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca76:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
1000ca78:	e03f      	b.n	1000cafa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000ca7a:	4a21      	ldr	r2, [pc, #132]	; (1000cb00 <system_clock_peripheral_disable+0x30c>)
1000ca7c:	6911      	ldr	r1, [r2, #16]
1000ca7e:	4b29      	ldr	r3, [pc, #164]	; (1000cb24 <system_clock_peripheral_disable+0x330>)
1000ca80:	400b      	ands	r3, r1
1000ca82:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca84:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
1000ca86:	e038      	b.n	1000cafa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000ca88:	4a1d      	ldr	r2, [pc, #116]	; (1000cb00 <system_clock_peripheral_disable+0x30c>)
1000ca8a:	6911      	ldr	r1, [r2, #16]
1000ca8c:	4b26      	ldr	r3, [pc, #152]	; (1000cb28 <system_clock_peripheral_disable+0x334>)
1000ca8e:	400b      	ands	r3, r1
1000ca90:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ca92:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
1000ca94:	e031      	b.n	1000cafa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000ca96:	4a1a      	ldr	r2, [pc, #104]	; (1000cb00 <system_clock_peripheral_disable+0x30c>)
1000ca98:	6911      	ldr	r1, [r2, #16]
1000ca9a:	4b24      	ldr	r3, [pc, #144]	; (1000cb2c <system_clock_peripheral_disable+0x338>)
1000ca9c:	400b      	ands	r3, r1
1000ca9e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000caa0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
1000caa2:	e02a      	b.n	1000cafa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000caa4:	4a16      	ldr	r2, [pc, #88]	; (1000cb00 <system_clock_peripheral_disable+0x30c>)
1000caa6:	6911      	ldr	r1, [r2, #16]
1000caa8:	4b21      	ldr	r3, [pc, #132]	; (1000cb30 <system_clock_peripheral_disable+0x33c>)
1000caaa:	400b      	ands	r3, r1
1000caac:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000caae:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
1000cab0:	e023      	b.n	1000cafa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cab2:	4a13      	ldr	r2, [pc, #76]	; (1000cb00 <system_clock_peripheral_disable+0x30c>)
1000cab4:	6911      	ldr	r1, [r2, #16]
1000cab6:	4b1f      	ldr	r3, [pc, #124]	; (1000cb34 <system_clock_peripheral_disable+0x340>)
1000cab8:	400b      	ands	r3, r1
1000caba:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cabc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
1000cabe:	e01c      	b.n	1000cafa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000cac0:	4a0f      	ldr	r2, [pc, #60]	; (1000cb00 <system_clock_peripheral_disable+0x30c>)
1000cac2:	6911      	ldr	r1, [r2, #16]
1000cac4:	4b1c      	ldr	r3, [pc, #112]	; (1000cb38 <system_clock_peripheral_disable+0x344>)
1000cac6:	400b      	ands	r3, r1
1000cac8:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000caca:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
1000cacc:	e015      	b.n	1000cafa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
1000cace:	4a0c      	ldr	r2, [pc, #48]	; (1000cb00 <system_clock_peripheral_disable+0x30c>)
1000cad0:	7d13      	ldrb	r3, [r2, #20]
1000cad2:	2101      	movs	r1, #1
1000cad4:	438b      	bics	r3, r1
1000cad6:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cad8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;
1000cada:	e00e      	b.n	1000cafa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
1000cadc:	4a08      	ldr	r2, [pc, #32]	; (1000cb00 <system_clock_peripheral_disable+0x30c>)
1000cade:	7d13      	ldrb	r3, [r2, #20]
1000cae0:	2102      	movs	r1, #2
1000cae2:	438b      	bics	r3, r1
1000cae4:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cae6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;
1000cae8:	e007      	b.n	1000cafa <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
1000caea:	4a05      	ldr	r2, [pc, #20]	; (1000cb00 <system_clock_peripheral_disable+0x30c>)
1000caec:	7d13      	ldrb	r3, [r2, #20]
1000caee:	2104      	movs	r1, #4
1000caf0:	438b      	bics	r3, r1
1000caf2:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000caf4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_PERIPH_REGS_CLK_EN;
		break;
1000caf6:	e000      	b.n	1000cafa <system_clock_peripheral_disable+0x306>

		default:
			return STATUS_ERR_INVALID_ARG;
1000caf8:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000cafa:	bd00      	pop	{pc}
1000cafc:	10016da0 	.word	0x10016da0
1000cb00:	4000b000 	.word	0x4000b000
1000cb04:	fffffeff 	.word	0xfffffeff
1000cb08:	fffff7ff 	.word	0xfffff7ff
1000cb0c:	ffffefff 	.word	0xffffefff
1000cb10:	ffffdfff 	.word	0xffffdfff
1000cb14:	ffffbfff 	.word	0xffffbfff
1000cb18:	ffff7fff 	.word	0xffff7fff
1000cb1c:	fffeffff 	.word	0xfffeffff
1000cb20:	fffdffff 	.word	0xfffdffff
1000cb24:	fffbffff 	.word	0xfffbffff
1000cb28:	fff7ffff 	.word	0xfff7ffff
1000cb2c:	ffefffff 	.word	0xffefffff
1000cb30:	ffdfffff 	.word	0xffdfffff
1000cb34:	ffbfffff 	.word	0xffbfffff
1000cb38:	ff7fffff 	.word	0xff7fffff
1000cb3c:	feffffff 	.word	0xfeffffff
1000cb40:	fdffffff 	.word	0xfdffffff
1000cb44:	fbffffff 	.word	0xfbffffff
1000cb48:	f7ffffff 	.word	0xf7ffffff
1000cb4c:	efffffff 	.word	0xefffffff
1000cb50:	dfffffff 	.word	0xdfffffff
1000cb54:	bfffffff 	.word	0xbfffffff
1000cb58:	fffffdff 	.word	0xfffffdff
1000cb5c:	fffffbff 	.word	0xfffffbff

1000cb60 <system_peripheral_reset>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_peripheral_reset(enum system_peripheral peripheral)
{
1000cb60:	b500      	push	{lr}
	switch (peripheral) {
1000cb62:	2843      	cmp	r0, #67	; 0x43
1000cb64:	d900      	bls.n	1000cb68 <system_peripheral_reset+0x8>
1000cb66:	e223      	b.n	1000cfb0 <system_peripheral_reset+0x450>
1000cb68:	0080      	lsls	r0, r0, #2
1000cb6a:	4be0      	ldr	r3, [pc, #896]	; (1000ceec <system_peripheral_reset+0x38c>)
1000cb6c:	581b      	ldr	r3, [r3, r0]
1000cb6e:	469f      	mov	pc, r3
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cb70:	4bdf      	ldr	r3, [pc, #892]	; (1000cef0 <system_peripheral_reset+0x390>)
1000cb72:	6859      	ldr	r1, [r3, #4]
1000cb74:	2202      	movs	r2, #2
1000cb76:	4391      	bics	r1, r2
1000cb78:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cb7a:	6859      	ldr	r1, [r3, #4]
1000cb7c:	430a      	orrs	r2, r1
1000cb7e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cb80:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
		break;
1000cb82:	e216      	b.n	1000cfb2 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cb84:	4bda      	ldr	r3, [pc, #872]	; (1000cef0 <system_peripheral_reset+0x390>)
1000cb86:	6859      	ldr	r1, [r3, #4]
1000cb88:	2204      	movs	r2, #4
1000cb8a:	4391      	bics	r1, r2
1000cb8c:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cb8e:	6859      	ldr	r1, [r3, #4]
1000cb90:	430a      	orrs	r2, r1
1000cb92:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cb94:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
		break;
1000cb96:	e20c      	b.n	1000cfb2 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cb98:	4bd5      	ldr	r3, [pc, #852]	; (1000cef0 <system_peripheral_reset+0x390>)
1000cb9a:	6859      	ldr	r1, [r3, #4]
1000cb9c:	2208      	movs	r2, #8
1000cb9e:	4391      	bics	r1, r2
1000cba0:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cba2:	6859      	ldr	r1, [r3, #4]
1000cba4:	430a      	orrs	r2, r1
1000cba6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cba8:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
		break;
1000cbaa:	e202      	b.n	1000cfb2 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cbac:	4bd0      	ldr	r3, [pc, #832]	; (1000cef0 <system_peripheral_reset+0x390>)
1000cbae:	6859      	ldr	r1, [r3, #4]
1000cbb0:	2210      	movs	r2, #16
1000cbb2:	4391      	bics	r1, r2
1000cbb4:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cbb6:	6859      	ldr	r1, [r3, #4]
1000cbb8:	430a      	orrs	r2, r1
1000cbba:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cbbc:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
		break;
1000cbbe:	e1f8      	b.n	1000cfb2 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cbc0:	4bcb      	ldr	r3, [pc, #812]	; (1000cef0 <system_peripheral_reset+0x390>)
1000cbc2:	6859      	ldr	r1, [r3, #4]
1000cbc4:	2220      	movs	r2, #32
1000cbc6:	4391      	bics	r1, r2
1000cbc8:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cbca:	6859      	ldr	r1, [r3, #4]
1000cbcc:	430a      	orrs	r2, r1
1000cbce:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cbd0:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
		break;
1000cbd2:	e1ee      	b.n	1000cfb2 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cbd4:	4bc6      	ldr	r3, [pc, #792]	; (1000cef0 <system_peripheral_reset+0x390>)
1000cbd6:	6859      	ldr	r1, [r3, #4]
1000cbd8:	2240      	movs	r2, #64	; 0x40
1000cbda:	4391      	bics	r1, r2
1000cbdc:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cbde:	6859      	ldr	r1, [r3, #4]
1000cbe0:	430a      	orrs	r2, r1
1000cbe2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cbe4:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
		break;
1000cbe6:	e1e4      	b.n	1000cfb2 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cbe8:	4bc1      	ldr	r3, [pc, #772]	; (1000cef0 <system_peripheral_reset+0x390>)
1000cbea:	6859      	ldr	r1, [r3, #4]
1000cbec:	2280      	movs	r2, #128	; 0x80
1000cbee:	4391      	bics	r1, r2
1000cbf0:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cbf2:	6859      	ldr	r1, [r3, #4]
1000cbf4:	430a      	orrs	r2, r1
1000cbf6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cbf8:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
		break;
1000cbfa:	e1da      	b.n	1000cfb2 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cbfc:	4bbc      	ldr	r3, [pc, #752]	; (1000cef0 <system_peripheral_reset+0x390>)
1000cbfe:	6859      	ldr	r1, [r3, #4]
1000cc00:	4abc      	ldr	r2, [pc, #752]	; (1000cef4 <system_peripheral_reset+0x394>)
1000cc02:	400a      	ands	r2, r1
1000cc04:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cc06:	685a      	ldr	r2, [r3, #4]
1000cc08:	2180      	movs	r1, #128	; 0x80
1000cc0a:	0049      	lsls	r1, r1, #1
1000cc0c:	430a      	orrs	r2, r1
1000cc0e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc10:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
		break;
1000cc12:	e1ce      	b.n	1000cfb2 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cc14:	4bb6      	ldr	r3, [pc, #728]	; (1000cef0 <system_peripheral_reset+0x390>)
1000cc16:	6859      	ldr	r1, [r3, #4]
1000cc18:	4ab7      	ldr	r2, [pc, #732]	; (1000cef8 <system_peripheral_reset+0x398>)
1000cc1a:	400a      	ands	r2, r1
1000cc1c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cc1e:	685a      	ldr	r2, [r3, #4]
1000cc20:	2180      	movs	r1, #128	; 0x80
1000cc22:	0089      	lsls	r1, r1, #2
1000cc24:	430a      	orrs	r2, r1
1000cc26:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc28:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
		break;
1000cc2a:	e1c2      	b.n	1000cfb2 <system_peripheral_reset+0x452>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cc2c:	4bb0      	ldr	r3, [pc, #704]	; (1000cef0 <system_peripheral_reset+0x390>)
1000cc2e:	6859      	ldr	r1, [r3, #4]
1000cc30:	4ab2      	ldr	r2, [pc, #712]	; (1000cefc <system_peripheral_reset+0x39c>)
1000cc32:	400a      	ands	r2, r1
1000cc34:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cc36:	685a      	ldr	r2, [r3, #4]
1000cc38:	2180      	movs	r1, #128	; 0x80
1000cc3a:	00c9      	lsls	r1, r1, #3
1000cc3c:	430a      	orrs	r2, r1
1000cc3e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc40:	2000      	movs	r0, #0
		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
		break;
1000cc42:	e1b6      	b.n	1000cfb2 <system_peripheral_reset+0x452>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cc44:	4baa      	ldr	r3, [pc, #680]	; (1000cef0 <system_peripheral_reset+0x390>)
1000cc46:	6859      	ldr	r1, [r3, #4]
1000cc48:	4aad      	ldr	r2, [pc, #692]	; (1000cf00 <system_peripheral_reset+0x3a0>)
1000cc4a:	400a      	ands	r2, r1
1000cc4c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cc4e:	685a      	ldr	r2, [r3, #4]
1000cc50:	2180      	movs	r1, #128	; 0x80
1000cc52:	0109      	lsls	r1, r1, #4
1000cc54:	430a      	orrs	r2, r1
1000cc56:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc58:	2000      	movs	r0, #0
		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
		break;
1000cc5a:	e1aa      	b.n	1000cfb2 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cc5c:	4ba4      	ldr	r3, [pc, #656]	; (1000cef0 <system_peripheral_reset+0x390>)
1000cc5e:	6859      	ldr	r1, [r3, #4]
1000cc60:	4aa8      	ldr	r2, [pc, #672]	; (1000cf04 <system_peripheral_reset+0x3a4>)
1000cc62:	400a      	ands	r2, r1
1000cc64:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cc66:	685a      	ldr	r2, [r3, #4]
1000cc68:	2180      	movs	r1, #128	; 0x80
1000cc6a:	0149      	lsls	r1, r1, #5
1000cc6c:	430a      	orrs	r2, r1
1000cc6e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc70:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
		break;
1000cc72:	e19e      	b.n	1000cfb2 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cc74:	4b9e      	ldr	r3, [pc, #632]	; (1000cef0 <system_peripheral_reset+0x390>)
1000cc76:	6859      	ldr	r1, [r3, #4]
1000cc78:	4aa3      	ldr	r2, [pc, #652]	; (1000cf08 <system_peripheral_reset+0x3a8>)
1000cc7a:	400a      	ands	r2, r1
1000cc7c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cc7e:	685a      	ldr	r2, [r3, #4]
1000cc80:	2180      	movs	r1, #128	; 0x80
1000cc82:	0189      	lsls	r1, r1, #6
1000cc84:	430a      	orrs	r2, r1
1000cc86:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cc88:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
		break;
1000cc8a:	e192      	b.n	1000cfb2 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cc8c:	4b98      	ldr	r3, [pc, #608]	; (1000cef0 <system_peripheral_reset+0x390>)
1000cc8e:	6859      	ldr	r1, [r3, #4]
1000cc90:	4a9e      	ldr	r2, [pc, #632]	; (1000cf0c <system_peripheral_reset+0x3ac>)
1000cc92:	400a      	ands	r2, r1
1000cc94:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cc96:	685a      	ldr	r2, [r3, #4]
1000cc98:	2180      	movs	r1, #128	; 0x80
1000cc9a:	01c9      	lsls	r1, r1, #7
1000cc9c:	430a      	orrs	r2, r1
1000cc9e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cca0:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
		break;
1000cca2:	e186      	b.n	1000cfb2 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cca4:	4b92      	ldr	r3, [pc, #584]	; (1000cef0 <system_peripheral_reset+0x390>)
1000cca6:	6859      	ldr	r1, [r3, #4]
1000cca8:	4a99      	ldr	r2, [pc, #612]	; (1000cf10 <system_peripheral_reset+0x3b0>)
1000ccaa:	400a      	ands	r2, r1
1000ccac:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ccae:	685a      	ldr	r2, [r3, #4]
1000ccb0:	2180      	movs	r1, #128	; 0x80
1000ccb2:	0209      	lsls	r1, r1, #8
1000ccb4:	430a      	orrs	r2, r1
1000ccb6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ccb8:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
		break;
1000ccba:	e17a      	b.n	1000cfb2 <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ccbc:	4b8c      	ldr	r3, [pc, #560]	; (1000cef0 <system_peripheral_reset+0x390>)
1000ccbe:	6859      	ldr	r1, [r3, #4]
1000ccc0:	4a94      	ldr	r2, [pc, #592]	; (1000cf14 <system_peripheral_reset+0x3b4>)
1000ccc2:	400a      	ands	r2, r1
1000ccc4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ccc6:	685a      	ldr	r2, [r3, #4]
1000ccc8:	2180      	movs	r1, #128	; 0x80
1000ccca:	0249      	lsls	r1, r1, #9
1000cccc:	430a      	orrs	r2, r1
1000ccce:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ccd0:	2000      	movs	r0, #0
		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
		break;
1000ccd2:	e16e      	b.n	1000cfb2 <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ccd4:	4b86      	ldr	r3, [pc, #536]	; (1000cef0 <system_peripheral_reset+0x390>)
1000ccd6:	6859      	ldr	r1, [r3, #4]
1000ccd8:	4a8f      	ldr	r2, [pc, #572]	; (1000cf18 <system_peripheral_reset+0x3b8>)
1000ccda:	400a      	ands	r2, r1
1000ccdc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ccde:	685a      	ldr	r2, [r3, #4]
1000cce0:	2180      	movs	r1, #128	; 0x80
1000cce2:	0289      	lsls	r1, r1, #10
1000cce4:	430a      	orrs	r2, r1
1000cce6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cce8:	2000      	movs	r0, #0
		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
		break;
1000ccea:	e162      	b.n	1000cfb2 <system_peripheral_reset+0x452>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ccec:	4b80      	ldr	r3, [pc, #512]	; (1000cef0 <system_peripheral_reset+0x390>)
1000ccee:	6859      	ldr	r1, [r3, #4]
1000ccf0:	4a8a      	ldr	r2, [pc, #552]	; (1000cf1c <system_peripheral_reset+0x3bc>)
1000ccf2:	400a      	ands	r2, r1
1000ccf4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ccf6:	685a      	ldr	r2, [r3, #4]
1000ccf8:	2180      	movs	r1, #128	; 0x80
1000ccfa:	02c9      	lsls	r1, r1, #11
1000ccfc:	430a      	orrs	r2, r1
1000ccfe:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cd00:	2000      	movs	r0, #0
		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
		break;
1000cd02:	e156      	b.n	1000cfb2 <system_peripheral_reset+0x452>

		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cd04:	4b7a      	ldr	r3, [pc, #488]	; (1000cef0 <system_peripheral_reset+0x390>)
1000cd06:	6859      	ldr	r1, [r3, #4]
1000cd08:	4a85      	ldr	r2, [pc, #532]	; (1000cf20 <system_peripheral_reset+0x3c0>)
1000cd0a:	400a      	ands	r2, r1
1000cd0c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cd0e:	685a      	ldr	r2, [r3, #4]
1000cd10:	2180      	movs	r1, #128	; 0x80
1000cd12:	0309      	lsls	r1, r1, #12
1000cd14:	430a      	orrs	r2, r1
1000cd16:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cd18:	2000      	movs	r0, #0
		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
		break;
1000cd1a:	e14a      	b.n	1000cfb2 <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cd1c:	4b74      	ldr	r3, [pc, #464]	; (1000cef0 <system_peripheral_reset+0x390>)
1000cd1e:	6859      	ldr	r1, [r3, #4]
1000cd20:	4a80      	ldr	r2, [pc, #512]	; (1000cf24 <system_peripheral_reset+0x3c4>)
1000cd22:	400a      	ands	r2, r1
1000cd24:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cd26:	685a      	ldr	r2, [r3, #4]
1000cd28:	2180      	movs	r1, #128	; 0x80
1000cd2a:	0349      	lsls	r1, r1, #13
1000cd2c:	430a      	orrs	r2, r1
1000cd2e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cd30:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
		break;
1000cd32:	e13e      	b.n	1000cfb2 <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cd34:	4b6e      	ldr	r3, [pc, #440]	; (1000cef0 <system_peripheral_reset+0x390>)
1000cd36:	6859      	ldr	r1, [r3, #4]
1000cd38:	4a7b      	ldr	r2, [pc, #492]	; (1000cf28 <system_peripheral_reset+0x3c8>)
1000cd3a:	400a      	ands	r2, r1
1000cd3c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cd3e:	685a      	ldr	r2, [r3, #4]
1000cd40:	2180      	movs	r1, #128	; 0x80
1000cd42:	0389      	lsls	r1, r1, #14
1000cd44:	430a      	orrs	r2, r1
1000cd46:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cd48:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
		break;
1000cd4a:	e132      	b.n	1000cfb2 <system_peripheral_reset+0x452>

		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cd4c:	4b68      	ldr	r3, [pc, #416]	; (1000cef0 <system_peripheral_reset+0x390>)
1000cd4e:	6859      	ldr	r1, [r3, #4]
1000cd50:	4a76      	ldr	r2, [pc, #472]	; (1000cf2c <system_peripheral_reset+0x3cc>)
1000cd52:	400a      	ands	r2, r1
1000cd54:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cd56:	685a      	ldr	r2, [r3, #4]
1000cd58:	2180      	movs	r1, #128	; 0x80
1000cd5a:	03c9      	lsls	r1, r1, #15
1000cd5c:	430a      	orrs	r2, r1
1000cd5e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cd60:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
		break;
1000cd62:	e126      	b.n	1000cfb2 <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cd64:	4b62      	ldr	r3, [pc, #392]	; (1000cef0 <system_peripheral_reset+0x390>)
1000cd66:	6859      	ldr	r1, [r3, #4]
1000cd68:	4a71      	ldr	r2, [pc, #452]	; (1000cf30 <system_peripheral_reset+0x3d0>)
1000cd6a:	400a      	ands	r2, r1
1000cd6c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cd6e:	685a      	ldr	r2, [r3, #4]
1000cd70:	2180      	movs	r1, #128	; 0x80
1000cd72:	0409      	lsls	r1, r1, #16
1000cd74:	430a      	orrs	r2, r1
1000cd76:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cd78:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
		break;
1000cd7a:	e11a      	b.n	1000cfb2 <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cd7c:	4b5c      	ldr	r3, [pc, #368]	; (1000cef0 <system_peripheral_reset+0x390>)
1000cd7e:	6859      	ldr	r1, [r3, #4]
1000cd80:	4a6c      	ldr	r2, [pc, #432]	; (1000cf34 <system_peripheral_reset+0x3d4>)
1000cd82:	400a      	ands	r2, r1
1000cd84:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cd86:	685a      	ldr	r2, [r3, #4]
1000cd88:	2180      	movs	r1, #128	; 0x80
1000cd8a:	0449      	lsls	r1, r1, #17
1000cd8c:	430a      	orrs	r2, r1
1000cd8e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cd90:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
		break;
1000cd92:	e10e      	b.n	1000cfb2 <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cd94:	4b56      	ldr	r3, [pc, #344]	; (1000cef0 <system_peripheral_reset+0x390>)
1000cd96:	6859      	ldr	r1, [r3, #4]
1000cd98:	4a67      	ldr	r2, [pc, #412]	; (1000cf38 <system_peripheral_reset+0x3d8>)
1000cd9a:	400a      	ands	r2, r1
1000cd9c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cd9e:	685a      	ldr	r2, [r3, #4]
1000cda0:	2180      	movs	r1, #128	; 0x80
1000cda2:	0489      	lsls	r1, r1, #18
1000cda4:	430a      	orrs	r2, r1
1000cda6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cda8:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
		break;
1000cdaa:	e102      	b.n	1000cfb2 <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cdac:	4b50      	ldr	r3, [pc, #320]	; (1000cef0 <system_peripheral_reset+0x390>)
1000cdae:	6859      	ldr	r1, [r3, #4]
1000cdb0:	4a62      	ldr	r2, [pc, #392]	; (1000cf3c <system_peripheral_reset+0x3dc>)
1000cdb2:	400a      	ands	r2, r1
1000cdb4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cdb6:	685a      	ldr	r2, [r3, #4]
1000cdb8:	2180      	movs	r1, #128	; 0x80
1000cdba:	04c9      	lsls	r1, r1, #19
1000cdbc:	430a      	orrs	r2, r1
1000cdbe:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cdc0:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
		break;
1000cdc2:	e0f6      	b.n	1000cfb2 <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cdc4:	4b4a      	ldr	r3, [pc, #296]	; (1000cef0 <system_peripheral_reset+0x390>)
1000cdc6:	6859      	ldr	r1, [r3, #4]
1000cdc8:	4a5d      	ldr	r2, [pc, #372]	; (1000cf40 <system_peripheral_reset+0x3e0>)
1000cdca:	400a      	ands	r2, r1
1000cdcc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cdce:	685a      	ldr	r2, [r3, #4]
1000cdd0:	2180      	movs	r1, #128	; 0x80
1000cdd2:	0509      	lsls	r1, r1, #20
1000cdd4:	430a      	orrs	r2, r1
1000cdd6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cdd8:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
		break;
1000cdda:	e0ea      	b.n	1000cfb2 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cddc:	4b44      	ldr	r3, [pc, #272]	; (1000cef0 <system_peripheral_reset+0x390>)
1000cdde:	6859      	ldr	r1, [r3, #4]
1000cde0:	4a58      	ldr	r2, [pc, #352]	; (1000cf44 <system_peripheral_reset+0x3e4>)
1000cde2:	400a      	ands	r2, r1
1000cde4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cde6:	685a      	ldr	r2, [r3, #4]
1000cde8:	2180      	movs	r1, #128	; 0x80
1000cdea:	0549      	lsls	r1, r1, #21
1000cdec:	430a      	orrs	r2, r1
1000cdee:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cdf0:	2000      	movs	r0, #0
		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
		break;
1000cdf2:	e0de      	b.n	1000cfb2 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000cdf4:	4b3e      	ldr	r3, [pc, #248]	; (1000cef0 <system_peripheral_reset+0x390>)
1000cdf6:	6859      	ldr	r1, [r3, #4]
1000cdf8:	4a53      	ldr	r2, [pc, #332]	; (1000cf48 <system_peripheral_reset+0x3e8>)
1000cdfa:	400a      	ands	r2, r1
1000cdfc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000cdfe:	685a      	ldr	r2, [r3, #4]
1000ce00:	2180      	movs	r1, #128	; 0x80
1000ce02:	0589      	lsls	r1, r1, #22
1000ce04:	430a      	orrs	r2, r1
1000ce06:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ce08:	2000      	movs	r0, #0
		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
		break;
1000ce0a:	e0d2      	b.n	1000cfb2 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ce0c:	4b38      	ldr	r3, [pc, #224]	; (1000cef0 <system_peripheral_reset+0x390>)
1000ce0e:	6859      	ldr	r1, [r3, #4]
1000ce10:	4a4e      	ldr	r2, [pc, #312]	; (1000cf4c <system_peripheral_reset+0x3ec>)
1000ce12:	400a      	ands	r2, r1
1000ce14:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ce16:	685a      	ldr	r2, [r3, #4]
1000ce18:	2180      	movs	r1, #128	; 0x80
1000ce1a:	05c9      	lsls	r1, r1, #23
1000ce1c:	430a      	orrs	r2, r1
1000ce1e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ce20:	2000      	movs	r0, #0
		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
		break;
1000ce22:	e0c6      	b.n	1000cfb2 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ce24:	4a32      	ldr	r2, [pc, #200]	; (1000cef0 <system_peripheral_reset+0x390>)
1000ce26:	6853      	ldr	r3, [r2, #4]
1000ce28:	005b      	lsls	r3, r3, #1
1000ce2a:	085b      	lsrs	r3, r3, #1
1000ce2c:	6053      	str	r3, [r2, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ce2e:	6853      	ldr	r3, [r2, #4]
1000ce30:	2180      	movs	r1, #128	; 0x80
1000ce32:	0609      	lsls	r1, r1, #24
1000ce34:	430b      	orrs	r3, r1
1000ce36:	6053      	str	r3, [r2, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ce38:	2000      	movs	r0, #0
		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
		break;
1000ce3a:	e0ba      	b.n	1000cfb2 <system_peripheral_reset+0x452>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000ce3c:	4b2c      	ldr	r3, [pc, #176]	; (1000cef0 <system_peripheral_reset+0x390>)
1000ce3e:	891a      	ldrh	r2, [r3, #8]
1000ce40:	2101      	movs	r1, #1
1000ce42:	438a      	bics	r2, r1
1000ce44:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000ce46:	8919      	ldrh	r1, [r3, #8]
1000ce48:	2201      	movs	r2, #1
1000ce4a:	430a      	orrs	r2, r1
1000ce4c:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ce4e:	2000      	movs	r0, #0
		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
		break;
1000ce50:	e0af      	b.n	1000cfb2 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000ce52:	4b27      	ldr	r3, [pc, #156]	; (1000cef0 <system_peripheral_reset+0x390>)
1000ce54:	891a      	ldrh	r2, [r3, #8]
1000ce56:	2102      	movs	r1, #2
1000ce58:	438a      	bics	r2, r1
1000ce5a:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000ce5c:	8919      	ldrh	r1, [r3, #8]
1000ce5e:	2202      	movs	r2, #2
1000ce60:	430a      	orrs	r2, r1
1000ce62:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ce64:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
		break;
1000ce66:	e0a4      	b.n	1000cfb2 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000ce68:	4b21      	ldr	r3, [pc, #132]	; (1000cef0 <system_peripheral_reset+0x390>)
1000ce6a:	891a      	ldrh	r2, [r3, #8]
1000ce6c:	2104      	movs	r1, #4
1000ce6e:	438a      	bics	r2, r1
1000ce70:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000ce72:	8919      	ldrh	r1, [r3, #8]
1000ce74:	2204      	movs	r2, #4
1000ce76:	430a      	orrs	r2, r1
1000ce78:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ce7a:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
		break;
1000ce7c:	e099      	b.n	1000cfb2 <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000ce7e:	4b1c      	ldr	r3, [pc, #112]	; (1000cef0 <system_peripheral_reset+0x390>)
1000ce80:	891a      	ldrh	r2, [r3, #8]
1000ce82:	2108      	movs	r1, #8
1000ce84:	438a      	bics	r2, r1
1000ce86:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000ce88:	8919      	ldrh	r1, [r3, #8]
1000ce8a:	2208      	movs	r2, #8
1000ce8c:	430a      	orrs	r2, r1
1000ce8e:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ce90:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
		break;
1000ce92:	e08e      	b.n	1000cfb2 <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000ce94:	4b16      	ldr	r3, [pc, #88]	; (1000cef0 <system_peripheral_reset+0x390>)
1000ce96:	891a      	ldrh	r2, [r3, #8]
1000ce98:	2110      	movs	r1, #16
1000ce9a:	438a      	bics	r2, r1
1000ce9c:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000ce9e:	8919      	ldrh	r1, [r3, #8]
1000cea0:	2210      	movs	r2, #16
1000cea2:	430a      	orrs	r2, r1
1000cea4:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cea6:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
		break;
1000cea8:	e083      	b.n	1000cfb2 <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000ceaa:	4b11      	ldr	r3, [pc, #68]	; (1000cef0 <system_peripheral_reset+0x390>)
1000ceac:	891a      	ldrh	r2, [r3, #8]
1000ceae:	2120      	movs	r1, #32
1000ceb0:	438a      	bics	r2, r1
1000ceb2:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000ceb4:	8919      	ldrh	r1, [r3, #8]
1000ceb6:	2220      	movs	r2, #32
1000ceb8:	430a      	orrs	r2, r1
1000ceba:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cebc:	2000      	movs	r0, #0
		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
		break;
1000cebe:	e078      	b.n	1000cfb2 <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000cec0:	4b0b      	ldr	r3, [pc, #44]	; (1000cef0 <system_peripheral_reset+0x390>)
1000cec2:	891a      	ldrh	r2, [r3, #8]
1000cec4:	2140      	movs	r1, #64	; 0x40
1000cec6:	438a      	bics	r2, r1
1000cec8:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000ceca:	8919      	ldrh	r1, [r3, #8]
1000cecc:	2240      	movs	r2, #64	; 0x40
1000cece:	430a      	orrs	r2, r1
1000ced0:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ced2:	2000      	movs	r0, #0
		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
		break;
1000ced4:	e06d      	b.n	1000cfb2 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000ced6:	4b06      	ldr	r3, [pc, #24]	; (1000cef0 <system_peripheral_reset+0x390>)
1000ced8:	891a      	ldrh	r2, [r3, #8]
1000ceda:	2180      	movs	r1, #128	; 0x80
1000cedc:	438a      	bics	r2, r1
1000cede:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000cee0:	8919      	ldrh	r1, [r3, #8]
1000cee2:	2280      	movs	r2, #128	; 0x80
1000cee4:	430a      	orrs	r2, r1
1000cee6:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cee8:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
		break;
1000ceea:	e062      	b.n	1000cfb2 <system_peripheral_reset+0x452>
1000ceec:	10016e78 	.word	0x10016e78
1000cef0:	4000b000 	.word	0x4000b000
1000cef4:	fffffeff 	.word	0xfffffeff
1000cef8:	fffffdff 	.word	0xfffffdff
1000cefc:	fffffbff 	.word	0xfffffbff
1000cf00:	fffff7ff 	.word	0xfffff7ff
1000cf04:	ffffefff 	.word	0xffffefff
1000cf08:	ffffdfff 	.word	0xffffdfff
1000cf0c:	ffffbfff 	.word	0xffffbfff
1000cf10:	ffff7fff 	.word	0xffff7fff
1000cf14:	fffeffff 	.word	0xfffeffff
1000cf18:	fffdffff 	.word	0xfffdffff
1000cf1c:	fffbffff 	.word	0xfffbffff
1000cf20:	fff7ffff 	.word	0xfff7ffff
1000cf24:	ffefffff 	.word	0xffefffff
1000cf28:	ffdfffff 	.word	0xffdfffff
1000cf2c:	ffbfffff 	.word	0xffbfffff
1000cf30:	ff7fffff 	.word	0xff7fffff
1000cf34:	feffffff 	.word	0xfeffffff
1000cf38:	fdffffff 	.word	0xfdffffff
1000cf3c:	fbffffff 	.word	0xfbffffff
1000cf40:	f7ffffff 	.word	0xf7ffffff
1000cf44:	efffffff 	.word	0xefffffff
1000cf48:	dfffffff 	.word	0xdfffffff
1000cf4c:	bfffffff 	.word	0xbfffffff

		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000cf50:	4b18      	ldr	r3, [pc, #96]	; (1000cfb4 <system_peripheral_reset+0x454>)
1000cf52:	8919      	ldrh	r1, [r3, #8]
1000cf54:	4a18      	ldr	r2, [pc, #96]	; (1000cfb8 <system_peripheral_reset+0x458>)
1000cf56:	400a      	ands	r2, r1
1000cf58:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000cf5a:	8919      	ldrh	r1, [r3, #8]
1000cf5c:	2280      	movs	r2, #128	; 0x80
1000cf5e:	0052      	lsls	r2, r2, #1
1000cf60:	430a      	orrs	r2, r1
1000cf62:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cf64:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
		break;
1000cf66:	e024      	b.n	1000cfb2 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000cf68:	4b12      	ldr	r3, [pc, #72]	; (1000cfb4 <system_peripheral_reset+0x454>)
1000cf6a:	8919      	ldrh	r1, [r3, #8]
1000cf6c:	4a13      	ldr	r2, [pc, #76]	; (1000cfbc <system_peripheral_reset+0x45c>)
1000cf6e:	400a      	ands	r2, r1
1000cf70:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000cf72:	8919      	ldrh	r1, [r3, #8]
1000cf74:	2280      	movs	r2, #128	; 0x80
1000cf76:	0092      	lsls	r2, r2, #2
1000cf78:	430a      	orrs	r2, r1
1000cf7a:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cf7c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
		break;
1000cf7e:	e018      	b.n	1000cfb2 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000cf80:	4b0c      	ldr	r3, [pc, #48]	; (1000cfb4 <system_peripheral_reset+0x454>)
1000cf82:	8919      	ldrh	r1, [r3, #8]
1000cf84:	4a0e      	ldr	r2, [pc, #56]	; (1000cfc0 <system_peripheral_reset+0x460>)
1000cf86:	400a      	ands	r2, r1
1000cf88:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000cf8a:	8919      	ldrh	r1, [r3, #8]
1000cf8c:	2280      	movs	r2, #128	; 0x80
1000cf8e:	00d2      	lsls	r2, r2, #3
1000cf90:	430a      	orrs	r2, r1
1000cf92:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cf94:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
		break;
1000cf96:	e00c      	b.n	1000cfb2 <system_peripheral_reset+0x452>

		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000cf98:	4b06      	ldr	r3, [pc, #24]	; (1000cfb4 <system_peripheral_reset+0x454>)
1000cf9a:	8919      	ldrh	r1, [r3, #8]
1000cf9c:	4a09      	ldr	r2, [pc, #36]	; (1000cfc4 <system_peripheral_reset+0x464>)
1000cf9e:	400a      	ands	r2, r1
1000cfa0:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000cfa2:	8919      	ldrh	r1, [r3, #8]
1000cfa4:	2280      	movs	r2, #128	; 0x80
1000cfa6:	0112      	lsls	r2, r2, #4
1000cfa8:	430a      	orrs	r2, r1
1000cfaa:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000cfac:	2000      	movs	r0, #0
		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
		break;
1000cfae:	e000      	b.n	1000cfb2 <system_peripheral_reset+0x452>

		default:
			return STATUS_ERR_INVALID_ARG;
1000cfb0:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000cfb2:	bd00      	pop	{pc}
1000cfb4:	4000b000 	.word	0x4000b000
1000cfb8:	fffffeff 	.word	0xfffffeff
1000cfbc:	fffffdff 	.word	0xfffffdff
1000cfc0:	fffffbff 	.word	0xfffffbff
1000cfc4:	fffff7ff 	.word	0xfffff7ff

1000cfc8 <system_register_isr>:
void system_register_isr(enum ram_isr_table_index isr_index,
		uint32_t isr_address)
{
	uint32_t *temp;
	temp = (uint32_t *)(isr_index * 4 + ISR_RAM_MAP_START_ADDRESS);
	*temp = isr_address;
1000cfc8:	2380      	movs	r3, #128	; 0x80
1000cfca:	04db      	lsls	r3, r3, #19
1000cfcc:	469c      	mov	ip, r3
1000cfce:	4460      	add	r0, ip
1000cfd0:	0080      	lsls	r0, r0, #2
1000cfd2:	6001      	str	r1, [r0, #0]
}
1000cfd4:	4770      	bx	lr
1000cfd6:	46c0      	nop			; (mov r8, r8)

1000cfd8 <uart_rx0_isr_handler>:
	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
}

static void uart_rx0_isr_handler(void)
{
1000cfd8:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
1000cfda:	4b20      	ldr	r3, [pc, #128]	; (1000d05c <uart_rx0_isr_handler+0x84>)
1000cfdc:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000cfde:	6823      	ldr	r3, [r4, #0]
1000cfe0:	7d1d      	ldrb	r5, [r3, #20]
1000cfe2:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000cfe4:	066a      	lsls	r2, r5, #25
1000cfe6:	d513      	bpl.n	1000d010 <uart_rx0_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000cfe8:	211e      	movs	r1, #30
1000cfea:	2222      	movs	r2, #34	; 0x22
1000cfec:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000cfee:	7e1a      	ldrb	r2, [r3, #24]
1000cff0:	3123      	adds	r1, #35	; 0x23
1000cff2:	438a      	bics	r2, r1
1000cff4:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000cff6:	2321      	movs	r3, #33	; 0x21
1000cff8:	5ce3      	ldrb	r3, [r4, r3]
1000cffa:	071b      	lsls	r3, r3, #28
1000cffc:	d506      	bpl.n	1000d00c <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000cffe:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000d000:	5ce3      	ldrb	r3, [r4, r3]
1000d002:	071b      	lsls	r3, r3, #28
1000d004:	d502      	bpl.n	1000d00c <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000d006:	0020      	movs	r0, r4
1000d008:	6923      	ldr	r3, [r4, #16]
1000d00a:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000d00c:	6823      	ldr	r3, [r4, #0]
1000d00e:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000d010:	07eb      	lsls	r3, r5, #31
1000d012:	d522      	bpl.n	1000d05a <uart_rx0_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000d014:	6823      	ldr	r3, [r4, #0]
1000d016:	7c1b      	ldrb	r3, [r3, #16]
1000d018:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000d01a:	6962      	ldr	r2, [r4, #20]
1000d01c:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000d01e:	6963      	ldr	r3, [r4, #20]
1000d020:	3301      	adds	r3, #1
1000d022:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000d024:	8ba3      	ldrh	r3, [r4, #28]
1000d026:	3b01      	subs	r3, #1
1000d028:	b29b      	uxth	r3, r3
1000d02a:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
1000d02c:	8ba3      	ldrh	r3, [r4, #28]
1000d02e:	b29b      	uxth	r3, r3
1000d030:	2b00      	cmp	r3, #0
1000d032:	d112      	bne.n	1000d05a <uart_rx0_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000d034:	3321      	adds	r3, #33	; 0x21
1000d036:	5ce3      	ldrb	r3, [r4, r3]
1000d038:	075b      	lsls	r3, r3, #29
1000d03a:	d50e      	bpl.n	1000d05a <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000d03c:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000d03e:	5ce3      	ldrb	r3, [r4, r3]
1000d040:	075b      	lsls	r3, r3, #29
1000d042:	d50a      	bpl.n	1000d05a <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000d044:	2200      	movs	r2, #0
1000d046:	2322      	movs	r3, #34	; 0x22
1000d048:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000d04a:	6822      	ldr	r2, [r4, #0]
1000d04c:	7e13      	ldrb	r3, [r2, #24]
1000d04e:	2101      	movs	r1, #1
1000d050:	438b      	bics	r3, r1
1000d052:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000d054:	68e3      	ldr	r3, [r4, #12]
1000d056:	0020      	movs	r0, r4
1000d058:	4798      	blx	r3
			}
		}
	}
}
1000d05a:	bd70      	pop	{r4, r5, r6, pc}
1000d05c:	10019d1c 	.word	0x10019d1c

1000d060 <uart_tx0_isr_handler>:

static void uart_tx0_isr_handler(void)
{
1000d060:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
1000d062:	4b21      	ldr	r3, [pc, #132]	; (1000d0e8 <uart_tx0_isr_handler+0x88>)
1000d064:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000d066:	6823      	ldr	r3, [r4, #0]
1000d068:	791d      	ldrb	r5, [r3, #4]
1000d06a:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000d06c:	07ea      	lsls	r2, r5, #31
1000d06e:	d517      	bpl.n	1000d0a0 <uart_tx0_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000d070:	69a2      	ldr	r2, [r4, #24]
1000d072:	7811      	ldrb	r1, [r2, #0]
1000d074:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000d076:	3201      	adds	r2, #1
1000d078:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000d07a:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000d07c:	8be3      	ldrh	r3, [r4, #30]
1000d07e:	3b01      	subs	r3, #1
1000d080:	b29b      	uxth	r3, r3
1000d082:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[0];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
1000d084:	8be3      	ldrh	r3, [r4, #30]
1000d086:	b29b      	uxth	r3, r3
1000d088:	2b00      	cmp	r3, #0
1000d08a:	d109      	bne.n	1000d0a0 <uart_tx0_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
1000d08c:	6822      	ldr	r2, [r4, #0]
1000d08e:	7a13      	ldrb	r3, [r2, #8]
1000d090:	2101      	movs	r1, #1
1000d092:	438b      	bics	r3, r1
1000d094:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000d096:	6822      	ldr	r2, [r4, #0]
1000d098:	7a11      	ldrb	r1, [r2, #8]
1000d09a:	2310      	movs	r3, #16
1000d09c:	430b      	orrs	r3, r1
1000d09e:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000d0a0:	06eb      	lsls	r3, r5, #27
1000d0a2:	d512      	bpl.n	1000d0ca <uart_tx0_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000d0a4:	2321      	movs	r3, #33	; 0x21
1000d0a6:	5ce3      	ldrb	r3, [r4, r3]
1000d0a8:	07db      	lsls	r3, r3, #31
1000d0aa:	d50e      	bpl.n	1000d0ca <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000d0ac:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000d0ae:	5ce3      	ldrb	r3, [r4, r3]
1000d0b0:	07db      	lsls	r3, r3, #31
1000d0b2:	d50a      	bpl.n	1000d0ca <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000d0b4:	2200      	movs	r2, #0
1000d0b6:	2322      	movs	r3, #34	; 0x22
1000d0b8:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000d0ba:	6822      	ldr	r2, [r4, #0]
1000d0bc:	7a13      	ldrb	r3, [r2, #8]
1000d0be:	2110      	movs	r1, #16
1000d0c0:	438b      	bics	r3, r1
1000d0c2:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000d0c4:	0020      	movs	r0, r4
1000d0c6:	6863      	ldr	r3, [r4, #4]
1000d0c8:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000d0ca:	06ab      	lsls	r3, r5, #26
1000d0cc:	d50a      	bpl.n	1000d0e4 <uart_tx0_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000d0ce:	2321      	movs	r3, #33	; 0x21
1000d0d0:	5ce3      	ldrb	r3, [r4, r3]
1000d0d2:	079b      	lsls	r3, r3, #30
1000d0d4:	d506      	bpl.n	1000d0e4 <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
1000d0d6:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000d0d8:	5ce3      	ldrb	r3, [r4, r3]
1000d0da:	079b      	lsls	r3, r3, #30
1000d0dc:	d502      	bpl.n	1000d0e4 <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000d0de:	68a3      	ldr	r3, [r4, #8]
1000d0e0:	0020      	movs	r0, r4
1000d0e2:	4798      	blx	r3
		}

	}
}
1000d0e4:	bd70      	pop	{r4, r5, r6, pc}
1000d0e6:	46c0      	nop			; (mov r8, r8)
1000d0e8:	10019d1c 	.word	0x10019d1c

1000d0ec <uart_rx1_isr_handler>:

static void uart_rx1_isr_handler(void)
{
1000d0ec:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
1000d0ee:	4b20      	ldr	r3, [pc, #128]	; (1000d170 <uart_rx1_isr_handler+0x84>)
1000d0f0:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000d0f2:	6823      	ldr	r3, [r4, #0]
1000d0f4:	7d1d      	ldrb	r5, [r3, #20]
1000d0f6:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000d0f8:	066a      	lsls	r2, r5, #25
1000d0fa:	d513      	bpl.n	1000d124 <uart_rx1_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000d0fc:	211e      	movs	r1, #30
1000d0fe:	2222      	movs	r2, #34	; 0x22
1000d100:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000d102:	7e1a      	ldrb	r2, [r3, #24]
1000d104:	3123      	adds	r1, #35	; 0x23
1000d106:	438a      	bics	r2, r1
1000d108:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000d10a:	2321      	movs	r3, #33	; 0x21
1000d10c:	5ce3      	ldrb	r3, [r4, r3]
1000d10e:	071b      	lsls	r3, r3, #28
1000d110:	d506      	bpl.n	1000d120 <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000d112:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000d114:	5ce3      	ldrb	r3, [r4, r3]
1000d116:	071b      	lsls	r3, r3, #28
1000d118:	d502      	bpl.n	1000d120 <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000d11a:	0020      	movs	r0, r4
1000d11c:	6923      	ldr	r3, [r4, #16]
1000d11e:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000d120:	6823      	ldr	r3, [r4, #0]
1000d122:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000d124:	07eb      	lsls	r3, r5, #31
1000d126:	d522      	bpl.n	1000d16e <uart_rx1_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000d128:	6823      	ldr	r3, [r4, #0]
1000d12a:	7c1b      	ldrb	r3, [r3, #16]
1000d12c:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000d12e:	6962      	ldr	r2, [r4, #20]
1000d130:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000d132:	6963      	ldr	r3, [r4, #20]
1000d134:	3301      	adds	r3, #1
1000d136:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000d138:	8ba3      	ldrh	r3, [r4, #28]
1000d13a:	3b01      	subs	r3, #1
1000d13c:	b29b      	uxth	r3, r3
1000d13e:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
1000d140:	8ba3      	ldrh	r3, [r4, #28]
1000d142:	b29b      	uxth	r3, r3
1000d144:	2b00      	cmp	r3, #0
1000d146:	d112      	bne.n	1000d16e <uart_rx1_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000d148:	3321      	adds	r3, #33	; 0x21
1000d14a:	5ce3      	ldrb	r3, [r4, r3]
1000d14c:	075b      	lsls	r3, r3, #29
1000d14e:	d50e      	bpl.n	1000d16e <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000d150:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000d152:	5ce3      	ldrb	r3, [r4, r3]
1000d154:	075b      	lsls	r3, r3, #29
1000d156:	d50a      	bpl.n	1000d16e <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000d158:	2200      	movs	r2, #0
1000d15a:	2322      	movs	r3, #34	; 0x22
1000d15c:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000d15e:	6822      	ldr	r2, [r4, #0]
1000d160:	7e13      	ldrb	r3, [r2, #24]
1000d162:	2101      	movs	r1, #1
1000d164:	438b      	bics	r3, r1
1000d166:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000d168:	68e3      	ldr	r3, [r4, #12]
1000d16a:	0020      	movs	r0, r4
1000d16c:	4798      	blx	r3
			}
		}
	}
}
1000d16e:	bd70      	pop	{r4, r5, r6, pc}
1000d170:	10019d1c 	.word	0x10019d1c

1000d174 <uart_tx1_isr_handler>:

static void uart_tx1_isr_handler(void)
{
1000d174:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
1000d176:	4b21      	ldr	r3, [pc, #132]	; (1000d1fc <uart_tx1_isr_handler+0x88>)
1000d178:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000d17a:	6823      	ldr	r3, [r4, #0]
1000d17c:	791d      	ldrb	r5, [r3, #4]
1000d17e:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000d180:	07ea      	lsls	r2, r5, #31
1000d182:	d517      	bpl.n	1000d1b4 <uart_tx1_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000d184:	69a2      	ldr	r2, [r4, #24]
1000d186:	7811      	ldrb	r1, [r2, #0]
1000d188:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000d18a:	3201      	adds	r2, #1
1000d18c:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000d18e:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000d190:	8be3      	ldrh	r3, [r4, #30]
1000d192:	3b01      	subs	r3, #1
1000d194:	b29b      	uxth	r3, r3
1000d196:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[1];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
1000d198:	8be3      	ldrh	r3, [r4, #30]
1000d19a:	b29b      	uxth	r3, r3
1000d19c:	2b00      	cmp	r3, #0
1000d19e:	d109      	bne.n	1000d1b4 <uart_tx1_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
1000d1a0:	6822      	ldr	r2, [r4, #0]
1000d1a2:	7a13      	ldrb	r3, [r2, #8]
1000d1a4:	2101      	movs	r1, #1
1000d1a6:	438b      	bics	r3, r1
1000d1a8:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000d1aa:	6822      	ldr	r2, [r4, #0]
1000d1ac:	7a11      	ldrb	r1, [r2, #8]
1000d1ae:	2310      	movs	r3, #16
1000d1b0:	430b      	orrs	r3, r1
1000d1b2:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000d1b4:	06eb      	lsls	r3, r5, #27
1000d1b6:	d512      	bpl.n	1000d1de <uart_tx1_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000d1b8:	2321      	movs	r3, #33	; 0x21
1000d1ba:	5ce3      	ldrb	r3, [r4, r3]
1000d1bc:	07db      	lsls	r3, r3, #31
1000d1be:	d50e      	bpl.n	1000d1de <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000d1c0:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000d1c2:	5ce3      	ldrb	r3, [r4, r3]
1000d1c4:	07db      	lsls	r3, r3, #31
1000d1c6:	d50a      	bpl.n	1000d1de <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000d1c8:	2200      	movs	r2, #0
1000d1ca:	2322      	movs	r3, #34	; 0x22
1000d1cc:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000d1ce:	6822      	ldr	r2, [r4, #0]
1000d1d0:	7a13      	ldrb	r3, [r2, #8]
1000d1d2:	2110      	movs	r1, #16
1000d1d4:	438b      	bics	r3, r1
1000d1d6:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000d1d8:	0020      	movs	r0, r4
1000d1da:	6863      	ldr	r3, [r4, #4]
1000d1dc:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000d1de:	06ab      	lsls	r3, r5, #26
1000d1e0:	d50a      	bpl.n	1000d1f8 <uart_tx1_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000d1e2:	2321      	movs	r3, #33	; 0x21
1000d1e4:	5ce3      	ldrb	r3, [r4, r3]
1000d1e6:	079b      	lsls	r3, r3, #30
1000d1e8:	d506      	bpl.n	1000d1f8 <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
1000d1ea:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000d1ec:	5ce3      	ldrb	r3, [r4, r3]
1000d1ee:	079b      	lsls	r3, r3, #30
1000d1f0:	d502      	bpl.n	1000d1f8 <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000d1f2:	68a3      	ldr	r3, [r4, #8]
1000d1f4:	0020      	movs	r0, r4
1000d1f6:	4798      	blx	r3
		}

	}
}
1000d1f8:	bd70      	pop	{r4, r5, r6, pc}
1000d1fa:	46c0      	nop			; (mov r8, r8)
1000d1fc:	10019d1c 	.word	0x10019d1c

1000d200 <uart_get_config_defaults>:
 * \param[out] config  Pointer to configuration structure to be initiated
 */
void uart_get_config_defaults(
		struct uart_config *const config)
{
	config->baud_rate = 115200;
1000d200:	23e1      	movs	r3, #225	; 0xe1
1000d202:	025b      	lsls	r3, r3, #9
1000d204:	6003      	str	r3, [r0, #0]
	config->data_bits = UART_8_BITS;
1000d206:	2300      	movs	r3, #0
1000d208:	7103      	strb	r3, [r0, #4]
	config->stop_bits = UART_1_STOP_BIT;
1000d20a:	7143      	strb	r3, [r0, #5]
	config->parity = UART_NO_PARITY;
1000d20c:	7183      	strb	r3, [r0, #6]
	config->flow_control = false;
1000d20e:	71c3      	strb	r3, [r0, #7]

	config->pin_number_pad[0] = PIN_LP_GPIO_2;
1000d210:	3302      	adds	r3, #2
1000d212:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_3;
1000d214:	2203      	movs	r2, #3
1000d216:	60c2      	str	r2, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_4;
1000d218:	3201      	adds	r2, #1
1000d21a:	6102      	str	r2, [r0, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_5;
1000d21c:	3201      	adds	r2, #1
1000d21e:	6142      	str	r2, [r0, #20]

	config->pinmux_sel_pad[0] = MUX_LP_GPIO_2_UART0_RXD;
1000d220:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_3_UART0_TXD;
1000d222:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_4_UART0_CTS;
1000d224:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_5_UART0_RTS;
1000d226:	6243      	str	r3, [r0, #36]	; 0x24
}
1000d228:	4770      	bx	lr
1000d22a:	46c0      	nop			; (mov r8, r8)

1000d22c <uart_init>:
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000d22c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000d22e:	464f      	mov	r7, r9
1000d230:	4646      	mov	r6, r8
1000d232:	b4c0      	push	{r6, r7}
1000d234:	0005      	movs	r5, r0
1000d236:	0017      	movs	r7, r2

	uint8_t config_temp = 0;
	uint8_t i,index;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
1000d238:	6001      	str	r1, [r0, #0]

	for (i = 0; i < UART_CALLBACK_N; i++) {
		module->callback[i] = NULL;
1000d23a:	2300      	movs	r3, #0
1000d23c:	6043      	str	r3, [r0, #4]
1000d23e:	6083      	str	r3, [r0, #8]
1000d240:	60c3      	str	r3, [r0, #12]
1000d242:	6103      	str	r3, [r0, #16]
	}
	module->rx_buffer_ptr = NULL;
1000d244:	6143      	str	r3, [r0, #20]
	module->tx_buffer_ptr = NULL;
1000d246:	6183      	str	r3, [r0, #24]
	module->remaining_rx_buffer_length = 0;
1000d248:	2200      	movs	r2, #0
1000d24a:	8383      	strh	r3, [r0, #28]
	module->remaining_tx_buffer_length = 0;
1000d24c:	83c3      	strh	r3, [r0, #30]
	module->callback_reg_mask = 0;
1000d24e:	3320      	adds	r3, #32
1000d250:	54c2      	strb	r2, [r0, r3]
	module->callback_enable_mask = 0;
1000d252:	3301      	adds	r3, #1
1000d254:	54c2      	strb	r2, [r0, r3]
	module->status = STATUS_OK;
1000d256:	3301      	adds	r3, #1
1000d258:	54c2      	strb	r2, [r0, r3]

	if (hw == UART0) {
1000d25a:	4b55      	ldr	r3, [pc, #340]	; (1000d3b0 <uart_init+0x184>)
1000d25c:	4299      	cmp	r1, r3
1000d25e:	d118      	bne.n	1000d292 <uart_init+0x66>
		system_peripheral_reset(PERIPHERAL_UART0_CORE);
1000d260:	2009      	movs	r0, #9
1000d262:	4c54      	ldr	r4, [pc, #336]	; (1000d3b4 <uart_init+0x188>)
1000d264:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART0_IF);
1000d266:	200a      	movs	r0, #10
1000d268:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_CORE);
1000d26a:	2009      	movs	r0, #9
1000d26c:	4c52      	ldr	r4, [pc, #328]	; (1000d3b8 <uart_init+0x18c>)
1000d26e:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_IF);
1000d270:	200a      	movs	r0, #10
1000d272:	47a0      	blx	r4
		_uart_instances[0] = module;
1000d274:	4b51      	ldr	r3, [pc, #324]	; (1000d3bc <uart_init+0x190>)
1000d276:	601d      	str	r5, [r3, #0]
		system_register_isr(RAM_ISR_TABLE_UARTRX0_INDEX, (uint32_t)uart_rx0_isr_handler);
1000d278:	4951      	ldr	r1, [pc, #324]	; (1000d3c0 <uart_init+0x194>)
1000d27a:	2010      	movs	r0, #16
1000d27c:	4c51      	ldr	r4, [pc, #324]	; (1000d3c4 <uart_init+0x198>)
1000d27e:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX0_INDEX, (uint32_t)uart_tx0_isr_handler);
1000d280:	4951      	ldr	r1, [pc, #324]	; (1000d3c8 <uart_init+0x19c>)
1000d282:	2011      	movs	r0, #17
1000d284:	47a0      	blx	r4
1000d286:	4b51      	ldr	r3, [pc, #324]	; (1000d3cc <uart_init+0x1a0>)
1000d288:	2201      	movs	r2, #1
1000d28a:	601a      	str	r2, [r3, #0]
1000d28c:	3201      	adds	r2, #1
1000d28e:	601a      	str	r2, [r3, #0]
1000d290:	e01a      	b.n	1000d2c8 <uart_init+0x9c>
		NVIC_EnableIRQ(UART0_RX_IRQn);
		NVIC_EnableIRQ(UART0_TX_IRQn);
	} else if (hw == UART1) {
1000d292:	4b4f      	ldr	r3, [pc, #316]	; (1000d3d0 <uart_init+0x1a4>)
1000d294:	4299      	cmp	r1, r3
1000d296:	d117      	bne.n	1000d2c8 <uart_init+0x9c>
		system_peripheral_reset(PERIPHERAL_UART1_CORE);
1000d298:	200b      	movs	r0, #11
1000d29a:	4c46      	ldr	r4, [pc, #280]	; (1000d3b4 <uart_init+0x188>)
1000d29c:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART1_IF);
1000d29e:	200c      	movs	r0, #12
1000d2a0:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_CORE);
1000d2a2:	200b      	movs	r0, #11
1000d2a4:	4c44      	ldr	r4, [pc, #272]	; (1000d3b8 <uart_init+0x18c>)
1000d2a6:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_IF);
1000d2a8:	200c      	movs	r0, #12
1000d2aa:	47a0      	blx	r4
		_uart_instances[1] = module;
1000d2ac:	4b43      	ldr	r3, [pc, #268]	; (1000d3bc <uart_init+0x190>)
1000d2ae:	605d      	str	r5, [r3, #4]
		system_register_isr(RAM_ISR_TABLE_UARTRX1_INDEX, (uint32_t)uart_rx1_isr_handler);
1000d2b0:	4948      	ldr	r1, [pc, #288]	; (1000d3d4 <uart_init+0x1a8>)
1000d2b2:	2012      	movs	r0, #18
1000d2b4:	4c43      	ldr	r4, [pc, #268]	; (1000d3c4 <uart_init+0x198>)
1000d2b6:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX1_INDEX, (uint32_t)uart_tx1_isr_handler);
1000d2b8:	4947      	ldr	r1, [pc, #284]	; (1000d3d8 <uart_init+0x1ac>)
1000d2ba:	2013      	movs	r0, #19
1000d2bc:	47a0      	blx	r4
1000d2be:	4b43      	ldr	r3, [pc, #268]	; (1000d3cc <uart_init+0x1a0>)
1000d2c0:	2204      	movs	r2, #4
1000d2c2:	601a      	str	r2, [r3, #0]
1000d2c4:	3204      	adds	r2, #4
1000d2c6:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000d2c8:	79fb      	ldrb	r3, [r7, #7]
		index = 4;
1000d2ca:	2204      	movs	r2, #4
1000d2cc:	4690      	mov	r8, r2
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000d2ce:	2b00      	cmp	r3, #0
1000d2d0:	d152      	bne.n	1000d378 <uart_init+0x14c>
		index = 4;
	} else {
		index = 2;
1000d2d2:	3302      	adds	r3, #2
1000d2d4:	4698      	mov	r8, r3
1000d2d6:	e04f      	b.n	1000d378 <uart_init+0x14c>
#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000d2d8:	8a31      	ldrh	r1, [r6, #16]
1000d2da:	ce01      	ldmia	r6!, {r0}
1000d2dc:	b2c0      	uxtb	r0, r0
1000d2de:	47c8      	blx	r9

#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
1000d2e0:	3401      	adds	r4, #1
1000d2e2:	b2e4      	uxtb	r4, r4
1000d2e4:	4544      	cmp	r4, r8
1000d2e6:	d3f7      	bcc.n	1000d2d8 <uart_init+0xac>
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000d2e8:	682b      	ldr	r3, [r5, #0]
1000d2ea:	7d1a      	ldrb	r2, [r3, #20]
1000d2ec:	07d2      	lsls	r2, r2, #31
1000d2ee:	d504      	bpl.n	1000d2fa <uart_init+0xce>
1000d2f0:	2101      	movs	r1, #1
		i = module->hw->RECEIVE_DATA.reg;
1000d2f2:	7c1a      	ldrb	r2, [r3, #16]
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000d2f4:	7d1a      	ldrb	r2, [r3, #20]
1000d2f6:	420a      	tst	r2, r1
1000d2f8:	d1fb      	bne.n	1000d2f2 <uart_init+0xc6>
		i = module->hw->RECEIVE_DATA.reg;
	}
	
	/* reset configuration register */
	module->hw->UART_CONFIGURATION.reg = 0;
1000d2fa:	2100      	movs	r1, #0
1000d2fc:	2220      	movs	r2, #32
1000d2fe:	5499      	strb	r1, [r3, r2]

	/* program the uart configuration. */
	if(config->flow_control) {
1000d300:	79fb      	ldrb	r3, [r7, #7]
		config_temp |= UART_CONFIGURATION_CTS_ENABLE_1;
1000d302:	1e59      	subs	r1, r3, #1
1000d304:	418b      	sbcs	r3, r1
1000d306:	0159      	lsls	r1, r3, #5
	}
	config_temp |= config->data_bits;
	config_temp |= config->stop_bits;
1000d308:	793b      	ldrb	r3, [r7, #4]
1000d30a:	797a      	ldrb	r2, [r7, #5]
1000d30c:	4313      	orrs	r3, r2
1000d30e:	430b      	orrs	r3, r1
	switch(config->parity) {
1000d310:	79ba      	ldrb	r2, [r7, #6]
1000d312:	2a02      	cmp	r2, #2
1000d314:	d00d      	beq.n	1000d332 <uart_init+0x106>
1000d316:	b2d1      	uxtb	r1, r2
1000d318:	2902      	cmp	r1, #2
1000d31a:	d802      	bhi.n	1000d322 <uart_init+0xf6>
1000d31c:	2a01      	cmp	r2, #1
1000d31e:	d005      	beq.n	1000d32c <uart_init+0x100>
1000d320:	e00f      	b.n	1000d342 <uart_init+0x116>
1000d322:	2a03      	cmp	r2, #3
1000d324:	d008      	beq.n	1000d338 <uart_init+0x10c>
1000d326:	2a04      	cmp	r2, #4
1000d328:	d009      	beq.n	1000d33e <uart_init+0x112>
1000d32a:	e00a      	b.n	1000d342 <uart_init+0x116>
		case UART_NO_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_0;
			break;

		case UART_EVEN_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
1000d32c:	2202      	movs	r2, #2
1000d32e:	4313      	orrs	r3, r2
			config_temp |= UART_CONFIGURATION_PARITY_MODE_0;
			break;
1000d330:	e007      	b.n	1000d342 <uart_init+0x116>

		case UART_ODD_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_1;
1000d332:	2206      	movs	r2, #6
1000d334:	4313      	orrs	r3, r2
			break;
1000d336:	e004      	b.n	1000d342 <uart_init+0x116>

		case UART_SPACE_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_2;
1000d338:	220a      	movs	r2, #10
1000d33a:	4313      	orrs	r3, r2
			break;
1000d33c:	e001      	b.n	1000d342 <uart_init+0x116>

		case UART_MARK_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_3;
1000d33e:	220e      	movs	r2, #14
1000d340:	4313      	orrs	r3, r2
			break;

		default:
			break;
	}	
	module->hw->UART_CONFIGURATION.reg = config_temp;
1000d342:	2220      	movs	r2, #32
1000d344:	6829      	ldr	r1, [r5, #0]
1000d346:	548b      	strb	r3, [r1, r2]

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);
1000d348:	683e      	ldr	r6, [r7, #0]
	uint16_t integerpart = 0;
	uint8_t fractionalpart = 0;
	uint32_t diff;
	uint8_t i = 0;

	clock = system_clock_get_value();
1000d34a:	4b24      	ldr	r3, [pc, #144]	; (1000d3dc <uart_init+0x1b0>)
1000d34c:	4798      	blx	r3
1000d34e:	0004      	movs	r4, r0
	integerpart = clock / baud_rate;
1000d350:	0031      	movs	r1, r6
1000d352:	4b23      	ldr	r3, [pc, #140]	; (1000d3e0 <uart_init+0x1b4>)
1000d354:	4798      	blx	r3
1000d356:	b282      	uxth	r2, r0
	diff = clock - (baud_rate * integerpart);
1000d358:	0400      	lsls	r0, r0, #16
1000d35a:	0c00      	lsrs	r0, r0, #16
1000d35c:	4370      	muls	r0, r6
1000d35e:	1a20      	subs	r0, r4, r0
	i = 0;
	while(diff > (baud_rate / 16)) {
1000d360:	0931      	lsrs	r1, r6, #4
1000d362:	4288      	cmp	r0, r1
1000d364:	d906      	bls.n	1000d374 <uart_init+0x148>
1000d366:	2300      	movs	r3, #0
		i++;
1000d368:	3301      	adds	r3, #1
1000d36a:	b2db      	uxtb	r3, r3
		diff -= (baud_rate / 16);
1000d36c:	1a40      	subs	r0, r0, r1

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
	while(diff > (baud_rate / 16)) {
1000d36e:	4288      	cmp	r0, r1
1000d370:	d8fa      	bhi.n	1000d368 <uart_init+0x13c>
1000d372:	e007      	b.n	1000d384 <uart_init+0x158>
	uint8_t i = 0;

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
1000d374:	2300      	movs	r3, #0
1000d376:	e005      	b.n	1000d384 <uart_init+0x158>
1000d378:	003e      	movs	r6, r7
1000d37a:	3608      	adds	r6, #8
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000d37c:	2400      	movs	r4, #0
#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000d37e:	4b19      	ldr	r3, [pc, #100]	; (1000d3e4 <uart_init+0x1b8>)
1000d380:	4699      	mov	r9, r3
1000d382:	e7a9      	b.n	1000d2d8 <uart_init+0xac>
		i++;
		diff -= (baud_rate / 16);
	}
	fractionalpart = (i + 1) / 2;

	module->hw->UART_CLOCK_SOURCE.reg = UART_CLOCK_SOURCE_CLOCK_SELECT_0;
1000d384:	2100      	movs	r1, #0
1000d386:	2028      	movs	r0, #40	; 0x28
1000d388:	682c      	ldr	r4, [r5, #0]
1000d38a:	5421      	strb	r1, [r4, r0]
	module->hw->UART_BAUD_RATE.reg =
1000d38c:	3301      	adds	r3, #1
1000d38e:	071b      	lsls	r3, r3, #28
1000d390:	0f5b      	lsrs	r3, r3, #29
1000d392:	00d2      	lsls	r2, r2, #3
1000d394:	4313      	orrs	r3, r2
1000d396:	b29b      	uxth	r3, r3
1000d398:	682a      	ldr	r2, [r5, #0]
1000d39a:	8493      	strh	r3, [r2, #36]	; 0x24
	module->hw->UART_CONFIGURATION.reg = config_temp;

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);

	module->hw->RX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at read time
1000d39c:	682b      	ldr	r3, [r5, #0]
1000d39e:	7619      	strb	r1, [r3, #24]
	module->hw->TX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at write time
1000d3a0:	682b      	ldr	r3, [r5, #0]
1000d3a2:	7219      	strb	r1, [r3, #8]
	
	return STATUS_OK;
}
1000d3a4:	2000      	movs	r0, #0
1000d3a6:	bc0c      	pop	{r2, r3}
1000d3a8:	4690      	mov	r8, r2
1000d3aa:	4699      	mov	r9, r3
1000d3ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000d3ae:	46c0      	nop			; (mov r8, r8)
1000d3b0:	40004000 	.word	0x40004000
1000d3b4:	1000cb61 	.word	0x1000cb61
1000d3b8:	1000c499 	.word	0x1000c499
1000d3bc:	10019d1c 	.word	0x10019d1c
1000d3c0:	1000cfd9 	.word	0x1000cfd9
1000d3c4:	1000cfc9 	.word	0x1000cfc9
1000d3c8:	1000d061 	.word	0x1000d061
1000d3cc:	e000e100 	.word	0xe000e100
1000d3d0:	40005000 	.word	0x40005000
1000d3d4:	1000d0ed 	.word	0x1000d0ed
1000d3d8:	1000d175 	.word	0x1000d175
1000d3dc:	1000c48d 	.word	0x1000c48d
1000d3e0:	10012e05 	.word	0x10012e05
1000d3e4:	1000c0e9 	.word	0x1000c0e9

1000d3e8 <uart_write_wait>:
* \retval STATUS_OK         If the operation was completed
*/
enum status_code uart_write_wait(struct uart_module *const module,
		const uint8_t tx_data)
{
	while (!(module->hw->TRANSMIT_STATUS.reg & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL));
1000d3e8:	6802      	ldr	r2, [r0, #0]
1000d3ea:	2001      	movs	r0, #1
1000d3ec:	7913      	ldrb	r3, [r2, #4]
1000d3ee:	4203      	tst	r3, r0
1000d3f0:	d0fc      	beq.n	1000d3ec <uart_write_wait+0x4>

	module->hw->TRANSMIT_DATA.reg = tx_data;
1000d3f2:	7011      	strb	r1, [r2, #0]
	
	return STATUS_OK;
}
1000d3f4:	2000      	movs	r0, #0
1000d3f6:	4770      	bx	lr

1000d3f8 <uart_read_wait>:
* \retval STATUS_OK                If the operation was completed
*/
enum status_code uart_read_wait(struct uart_module *const module,
		uint8_t *const rx_data)
{
	while (!(module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY));
1000d3f8:	6802      	ldr	r2, [r0, #0]
1000d3fa:	2001      	movs	r0, #1
1000d3fc:	7d13      	ldrb	r3, [r2, #20]
1000d3fe:	4203      	tst	r3, r0
1000d400:	d0fc      	beq.n	1000d3fc <uart_read_wait+0x4>

	*rx_data = module->hw->RECEIVE_DATA.reg;
1000d402:	7c13      	ldrb	r3, [r2, #16]
1000d404:	700b      	strb	r3, [r1, #0]
	
	return STATUS_OK;
}
1000d406:	2000      	movs	r0, #0
1000d408:	4770      	bx	lr
1000d40a:	46c0      	nop			; (mov r8, r8)

1000d40c <uart_read_buffer_job>:
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
1000d40c:	2317      	movs	r3, #23
{
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
1000d40e:	2a00      	cmp	r2, #0
1000d410:	d00d      	beq.n	1000d42e <uart_read_buffer_job+0x22>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check if the UART is busy transmitting or slave waiting for TXC*/
	if (module->status == STATUS_BUSY) {
1000d412:	330b      	adds	r3, #11
1000d414:	5cc3      	ldrb	r3, [r0, r3]
1000d416:	b2db      	uxtb	r3, r3
1000d418:	2b05      	cmp	r3, #5
1000d41a:	d008      	beq.n	1000d42e <uart_read_buffer_job+0x22>
	Assert(module);
	Assert(rx_data);

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
1000d41c:	8382      	strh	r2, [r0, #28]
	module->rx_buffer_ptr = rx_data;
1000d41e:	6141      	str	r1, [r0, #20]
	module->status = STATUS_BUSY;
1000d420:	2205      	movs	r2, #5
1000d422:	2322      	movs	r3, #34	; 0x22
1000d424:	54c2      	strb	r2, [r0, r3]

	module->hw->RX_INTERRUPT_MASK.reg = UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK;
1000d426:	6803      	ldr	r3, [r0, #0]
1000d428:	3a04      	subs	r2, #4
1000d42a:	761a      	strb	r2, [r3, #24]
		return STATUS_BUSY;
	}

	/* Issue internal read */
	_uart_read_buffer(module, rx_data, length);
	return STATUS_OK;
1000d42c:	2300      	movs	r3, #0
}
1000d42e:	0018      	movs	r0, r3
1000d430:	4770      	bx	lr
1000d432:	46c0      	nop			; (mov r8, r8)

1000d434 <uart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
1000d434:	0093      	lsls	r3, r2, #2
1000d436:	18c3      	adds	r3, r0, r3
1000d438:	6059      	str	r1, [r3, #4]
	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
1000d43a:	2120      	movs	r1, #32
1000d43c:	2301      	movs	r3, #1
1000d43e:	4093      	lsls	r3, r2
1000d440:	5c42      	ldrb	r2, [r0, r1]
1000d442:	4313      	orrs	r3, r2
1000d444:	5443      	strb	r3, [r0, r1]
}
1000d446:	4770      	bx	lr

1000d448 <uart_enable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_enable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000d448:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
1000d44a:	2221      	movs	r2, #33	; 0x21
1000d44c:	2301      	movs	r3, #1
1000d44e:	408b      	lsls	r3, r1
1000d450:	5c84      	ldrb	r4, [r0, r2]
1000d452:	4323      	orrs	r3, r4
1000d454:	5483      	strb	r3, [r0, r2]

	if (callback_type == UART_CTS_ACTIVE) {
1000d456:	2901      	cmp	r1, #1
1000d458:	d104      	bne.n	1000d464 <uart_enable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg |= UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000d45a:	6802      	ldr	r2, [r0, #0]
1000d45c:	7a11      	ldrb	r1, [r2, #8]
1000d45e:	2320      	movs	r3, #32
1000d460:	430b      	orrs	r3, r1
1000d462:	7213      	strb	r3, [r2, #8]
	}
}
1000d464:	bd10      	pop	{r4, pc}
1000d466:	46c0      	nop			; (mov r8, r8)

1000d468 <uart_disable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_disable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000d468:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
1000d46a:	2201      	movs	r2, #1
1000d46c:	408a      	lsls	r2, r1
1000d46e:	2421      	movs	r4, #33	; 0x21
1000d470:	5d03      	ldrb	r3, [r0, r4]
1000d472:	4393      	bics	r3, r2
1000d474:	5503      	strb	r3, [r0, r4]

	if (callback_type == UART_CTS_ACTIVE) {
1000d476:	2901      	cmp	r1, #1
1000d478:	d104      	bne.n	1000d484 <uart_disable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg &= ~UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000d47a:	6802      	ldr	r2, [r0, #0]
1000d47c:	7a13      	ldrb	r3, [r2, #8]
1000d47e:	311f      	adds	r1, #31
1000d480:	438b      	bics	r3, r1
1000d482:	7213      	strb	r3, [r2, #8]
	}

}
1000d484:	bd10      	pop	{r4, pc}
1000d486:	46c0      	nop			; (mov r8, r8)

1000d488 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
1000d488:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d48a:	4647      	mov	r7, r8
1000d48c:	b480      	push	{r7}
1000d48e:	000c      	movs	r4, r1
1000d490:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
1000d492:	2800      	cmp	r0, #0
1000d494:	d10d      	bne.n	1000d4b2 <_read+0x2a>
		return -1;
	}

	for (; len > 0; --len) {
1000d496:	2a00      	cmp	r2, #0
1000d498:	dd0e      	ble.n	1000d4b8 <_read+0x30>
1000d49a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
1000d49c:	4e08      	ldr	r6, [pc, #32]	; (1000d4c0 <_read+0x38>)
1000d49e:	4d09      	ldr	r5, [pc, #36]	; (1000d4c4 <_read+0x3c>)
1000d4a0:	6830      	ldr	r0, [r6, #0]
1000d4a2:	0021      	movs	r1, r4
1000d4a4:	682b      	ldr	r3, [r5, #0]
1000d4a6:	4798      	blx	r3
		ptr++;
1000d4a8:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
1000d4aa:	42a7      	cmp	r7, r4
1000d4ac:	d1f8      	bne.n	1000d4a0 <_read+0x18>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
1000d4ae:	4640      	mov	r0, r8
1000d4b0:	e003      	b.n	1000d4ba <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
1000d4b2:	2001      	movs	r0, #1
1000d4b4:	4240      	negs	r0, r0
1000d4b6:	e000      	b.n	1000d4ba <_read+0x32>
	}

	for (; len > 0; --len) {
1000d4b8:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
1000d4ba:	bc04      	pop	{r2}
1000d4bc:	4690      	mov	r8, r2
1000d4be:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d4c0:	10019d2c 	.word	0x10019d2c
1000d4c4:	10019d24 	.word	0x10019d24

1000d4c8 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
1000d4c8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d4ca:	4647      	mov	r7, r8
1000d4cc:	b480      	push	{r7}
1000d4ce:	000e      	movs	r6, r1
1000d4d0:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
1000d4d2:	3801      	subs	r0, #1
1000d4d4:	2802      	cmp	r0, #2
1000d4d6:	d811      	bhi.n	1000d4fc <_write+0x34>
		return -1;
	}

	for (; len != 0; --len) {
1000d4d8:	2a00      	cmp	r2, #0
1000d4da:	d012      	beq.n	1000d502 <_write+0x3a>
1000d4dc:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
1000d4de:	4b0c      	ldr	r3, [pc, #48]	; (1000d510 <_write+0x48>)
1000d4e0:	4698      	mov	r8, r3
1000d4e2:	4f0c      	ldr	r7, [pc, #48]	; (1000d514 <_write+0x4c>)
1000d4e4:	4643      	mov	r3, r8
1000d4e6:	6818      	ldr	r0, [r3, #0]
1000d4e8:	5d31      	ldrb	r1, [r6, r4]
1000d4ea:	683b      	ldr	r3, [r7, #0]
1000d4ec:	4798      	blx	r3
1000d4ee:	2800      	cmp	r0, #0
1000d4f0:	db09      	blt.n	1000d506 <_write+0x3e>
			return -1;
		}
		++nChars;
1000d4f2:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
1000d4f4:	42a5      	cmp	r5, r4
1000d4f6:	d1f5      	bne.n	1000d4e4 <_write+0x1c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
1000d4f8:	0020      	movs	r0, r4
1000d4fa:	e006      	b.n	1000d50a <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
1000d4fc:	2001      	movs	r0, #1
1000d4fe:	4240      	negs	r0, r0
1000d500:	e003      	b.n	1000d50a <_write+0x42>
	}

	for (; len != 0; --len) {
1000d502:	2000      	movs	r0, #0
1000d504:	e001      	b.n	1000d50a <_write+0x42>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
1000d506:	2001      	movs	r0, #1
1000d508:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
1000d50a:	bc04      	pop	{r2}
1000d50c:	4690      	mov	r8, r2
1000d50e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d510:	10019d2c 	.word	0x10019d2c
1000d514:	10019d28 	.word	0x10019d28

1000d518 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
1000d518:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
1000d51a:	4a06      	ldr	r2, [pc, #24]	; (1000d534 <_sbrk+0x1c>)
1000d51c:	6812      	ldr	r2, [r2, #0]
1000d51e:	2a00      	cmp	r2, #0
1000d520:	d102      	bne.n	1000d528 <_sbrk+0x10>
		heap = (unsigned char *)&_end;
1000d522:	4905      	ldr	r1, [pc, #20]	; (1000d538 <_sbrk+0x20>)
1000d524:	4a03      	ldr	r2, [pc, #12]	; (1000d534 <_sbrk+0x1c>)
1000d526:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
1000d528:	4a02      	ldr	r2, [pc, #8]	; (1000d534 <_sbrk+0x1c>)
1000d52a:	6810      	ldr	r0, [r2, #0]

	heap += incr;
1000d52c:	18c3      	adds	r3, r0, r3
1000d52e:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
1000d530:	4770      	bx	lr
1000d532:	46c0      	nop			; (mov r8, r8)
1000d534:	10017fd4 	.word	0x10017fd4
1000d538:	1001c638 	.word	0x1001c638

1000d53c <_close>:
}

extern int _close(int file)
{
	return -1;
}
1000d53c:	2001      	movs	r0, #1
1000d53e:	4240      	negs	r0, r0
1000d540:	4770      	bx	lr
1000d542:	46c0      	nop			; (mov r8, r8)

1000d544 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
1000d544:	2380      	movs	r3, #128	; 0x80
1000d546:	019b      	lsls	r3, r3, #6
1000d548:	604b      	str	r3, [r1, #4]

	return 0;
}
1000d54a:	2000      	movs	r0, #0
1000d54c:	4770      	bx	lr
1000d54e:	46c0      	nop			; (mov r8, r8)

1000d550 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
1000d550:	2001      	movs	r0, #1
1000d552:	4770      	bx	lr

1000d554 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
1000d554:	2000      	movs	r0, #0
1000d556:	4770      	bx	lr

1000d558 <ble_undefined_event_handler>:
	}
	return status;
}

at_ble_status_t ble_undefined_event_handler(void *params)
{
1000d558:	b510      	push	{r4, lr}
	DBG_LOG_DEV("Undefined Event Received");
1000d55a:	4804      	ldr	r0, [pc, #16]	; (1000d56c <ble_undefined_event_handler+0x14>)
1000d55c:	4b04      	ldr	r3, [pc, #16]	; (1000d570 <ble_undefined_event_handler+0x18>)
1000d55e:	4798      	blx	r3
1000d560:	4804      	ldr	r0, [pc, #16]	; (1000d574 <ble_undefined_event_handler+0x1c>)
1000d562:	4b05      	ldr	r3, [pc, #20]	; (1000d578 <ble_undefined_event_handler+0x20>)
1000d564:	4798      	blx	r3
    ALL_UNUSED(params);
	return AT_BLE_SUCCESS;
}
1000d566:	2000      	movs	r0, #0
1000d568:	bd10      	pop	{r4, pc}
1000d56a:	46c0      	nop			; (mov r8, r8)
1000d56c:	10015f9c 	.word	0x10015f9c
1000d570:	10014df5 	.word	0x10014df5
1000d574:	100170ec 	.word	0x100170ec
1000d578:	10014cd5 	.word	0x10014cd5

1000d57c <ble_scan_report_handler>:
	}
}

/** @brief function handles scan report */
at_ble_status_t ble_scan_report_handler(void *params)
{
1000d57c:	b510      	push	{r4, lr}
	at_ble_scan_report_t *scan_report;
	scan_report = (at_ble_scan_report_t *)params;
	if (scan_report->status == AT_BLE_SUCCESS)
1000d57e:	7800      	ldrb	r0, [r0, #0]
1000d580:	2800      	cmp	r0, #0
1000d582:	d006      	beq.n	1000d592 <ble_scan_report_handler+0x16>
		/* All scan data should be handled */
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Scanning  failed");
1000d584:	4803      	ldr	r0, [pc, #12]	; (1000d594 <ble_scan_report_handler+0x18>)
1000d586:	4b04      	ldr	r3, [pc, #16]	; (1000d598 <ble_scan_report_handler+0x1c>)
1000d588:	4798      	blx	r3
1000d58a:	4804      	ldr	r0, [pc, #16]	; (1000d59c <ble_scan_report_handler+0x20>)
1000d58c:	4b04      	ldr	r3, [pc, #16]	; (1000d5a0 <ble_scan_report_handler+0x24>)
1000d58e:	4798      	blx	r3
	}
	return AT_BLE_FAILURE;
1000d590:	20e2      	movs	r0, #226	; 0xe2
}
1000d592:	bd10      	pop	{r4, pc}
1000d594:	10015f9c 	.word	0x10015f9c
1000d598:	10014df5 	.word	0x10014df5
1000d59c:	10017108 	.word	0x10017108
1000d5a0:	10014cd5 	.word	0x10014cd5

1000d5a4 <ble_adv_report_handler>:

/** @brief function handles advertising report */
at_ble_status_t ble_adv_report_handler(void *params)
{
1000d5a4:	b510      	push	{r4, lr}
    at_ble_adv_report_t *adv_report;
    adv_report = (at_ble_adv_report_t *)params;
    if(adv_report->status == AT_BLE_SUCCESS)
1000d5a6:	7800      	ldrb	r0, [r0, #0]
1000d5a8:	2800      	cmp	r0, #0
1000d5aa:	d006      	beq.n	1000d5ba <ble_adv_report_handler+0x16>
    {
        return AT_BLE_SUCCESS;
    }
    else 
    {
        DBG_LOG("Advertising failed");
1000d5ac:	4803      	ldr	r0, [pc, #12]	; (1000d5bc <ble_adv_report_handler+0x18>)
1000d5ae:	4b04      	ldr	r3, [pc, #16]	; (1000d5c0 <ble_adv_report_handler+0x1c>)
1000d5b0:	4798      	blx	r3
1000d5b2:	4804      	ldr	r0, [pc, #16]	; (1000d5c4 <ble_adv_report_handler+0x20>)
1000d5b4:	4b04      	ldr	r3, [pc, #16]	; (1000d5c8 <ble_adv_report_handler+0x24>)
1000d5b6:	4798      	blx	r3
    }
    return AT_BLE_FAILURE;
1000d5b8:	20e2      	movs	r0, #226	; 0xe2
}
1000d5ba:	bd10      	pop	{r4, pc}
1000d5bc:	10015f9c 	.word	0x10015f9c
1000d5c0:	10014df5 	.word	0x10014df5
1000d5c4:	1001711c 	.word	0x1001711c
1000d5c8:	10014cd5 	.word	0x10014cd5

1000d5cc <ble_mtu_changed_indication_handler>:
	return AT_BLE_SUCCESS;
	
}

at_ble_status_t ble_mtu_changed_indication_handler(void *params)
{
1000d5cc:	b510      	push	{r4, lr}
1000d5ce:	0004      	movs	r4, r0
	at_ble_mtu_changed_ind_t *mtu_changed_ind;
	mtu_changed_ind = (at_ble_mtu_changed_ind_t *)params;
	DBG_LOG_DEV("BLE-MTU Changed, Connection Handle: %d, New Value: %d", 
1000d5d0:	4804      	ldr	r0, [pc, #16]	; (1000d5e4 <ble_mtu_changed_indication_handler+0x18>)
1000d5d2:	4b05      	ldr	r3, [pc, #20]	; (1000d5e8 <ble_mtu_changed_indication_handler+0x1c>)
1000d5d4:	4798      	blx	r3
1000d5d6:	8862      	ldrh	r2, [r4, #2]
1000d5d8:	8821      	ldrh	r1, [r4, #0]
1000d5da:	4804      	ldr	r0, [pc, #16]	; (1000d5ec <ble_mtu_changed_indication_handler+0x20>)
1000d5dc:	4b04      	ldr	r3, [pc, #16]	; (1000d5f0 <ble_mtu_changed_indication_handler+0x24>)
1000d5de:	4798      	blx	r3
										mtu_changed_ind->conhdl, 
										mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
}
1000d5e0:	2000      	movs	r0, #0
1000d5e2:	bd10      	pop	{r4, pc}
1000d5e4:	10015f9c 	.word	0x10015f9c
1000d5e8:	10014df5 	.word	0x10014df5
1000d5ec:	10017130 	.word	0x10017130
1000d5f0:	10014cd5 	.word	0x10014cd5

1000d5f4 <ble_mtu_changed_cmd_complete_handler>:

at_ble_status_t ble_mtu_changed_cmd_complete_handler(void *params)
{
1000d5f4:	b570      	push	{r4, r5, r6, lr}
1000d5f6:	0004      	movs	r4, r0
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
1000d5f8:	78c5      	ldrb	r5, [r0, #3]
1000d5fa:	2d00      	cmp	r5, #0
1000d5fc:	d108      	bne.n	1000d610 <ble_mtu_changed_cmd_complete_handler+0x1c>
	{
		DBG_LOG_DEV("MTU Changed, Connection Handle:%d, Operation:%d", 
1000d5fe:	480a      	ldr	r0, [pc, #40]	; (1000d628 <ble_mtu_changed_cmd_complete_handler+0x34>)
1000d600:	4b0a      	ldr	r3, [pc, #40]	; (1000d62c <ble_mtu_changed_cmd_complete_handler+0x38>)
1000d602:	4798      	blx	r3
1000d604:	78a2      	ldrb	r2, [r4, #2]
1000d606:	8821      	ldrh	r1, [r4, #0]
1000d608:	4809      	ldr	r0, [pc, #36]	; (1000d630 <ble_mtu_changed_cmd_complete_handler+0x3c>)
1000d60a:	4b0a      	ldr	r3, [pc, #40]	; (1000d634 <ble_mtu_changed_cmd_complete_handler+0x40>)
1000d60c:	4798      	blx	r3
		cmd_complete_event->conn_handle, 
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
1000d60e:	e008      	b.n	1000d622 <ble_mtu_changed_cmd_complete_handler+0x2e>
	}
	else
	{
		DBG_LOG("MTU Change Failed, Connection Handle:%d, Operation:%d",
1000d610:	4805      	ldr	r0, [pc, #20]	; (1000d628 <ble_mtu_changed_cmd_complete_handler+0x34>)
1000d612:	4b06      	ldr	r3, [pc, #24]	; (1000d62c <ble_mtu_changed_cmd_complete_handler+0x38>)
1000d614:	4798      	blx	r3
1000d616:	78a2      	ldrb	r2, [r4, #2]
1000d618:	8821      	ldrh	r1, [r4, #0]
1000d61a:	4807      	ldr	r0, [pc, #28]	; (1000d638 <ble_mtu_changed_cmd_complete_handler+0x44>)
1000d61c:	4b05      	ldr	r3, [pc, #20]	; (1000d634 <ble_mtu_changed_cmd_complete_handler+0x40>)
1000d61e:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
1000d620:	25e2      	movs	r5, #226	; 0xe2
}
1000d622:	0028      	movs	r0, r5
1000d624:	bd70      	pop	{r4, r5, r6, pc}
1000d626:	46c0      	nop			; (mov r8, r8)
1000d628:	10015f9c 	.word	0x10015f9c
1000d62c:	10014df5 	.word	0x10014df5
1000d630:	10017168 	.word	0x10017168
1000d634:	10014cd5 	.word	0x10014cd5
1000d638:	10017198 	.word	0x10017198

1000d63c <ble_characteristic_write_cmd_complete_handler>:

at_ble_status_t ble_characteristic_write_cmd_complete_handler(void *params)
{
1000d63c:	b570      	push	{r4, r5, r6, lr}
1000d63e:	0004      	movs	r4, r0
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
1000d640:	78c5      	ldrb	r5, [r0, #3]
1000d642:	2d00      	cmp	r5, #0
1000d644:	d108      	bne.n	1000d658 <ble_characteristic_write_cmd_complete_handler+0x1c>
	{
		DBG_LOG_DEV("Char Write Cmd Complete, Connection Handle:%d, Operation:%d",
1000d646:	480a      	ldr	r0, [pc, #40]	; (1000d670 <ble_characteristic_write_cmd_complete_handler+0x34>)
1000d648:	4b0a      	ldr	r3, [pc, #40]	; (1000d674 <ble_characteristic_write_cmd_complete_handler+0x38>)
1000d64a:	4798      	blx	r3
1000d64c:	78a2      	ldrb	r2, [r4, #2]
1000d64e:	8821      	ldrh	r1, [r4, #0]
1000d650:	4809      	ldr	r0, [pc, #36]	; (1000d678 <ble_characteristic_write_cmd_complete_handler+0x3c>)
1000d652:	4b0a      	ldr	r3, [pc, #40]	; (1000d67c <ble_characteristic_write_cmd_complete_handler+0x40>)
1000d654:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
1000d656:	e008      	b.n	1000d66a <ble_characteristic_write_cmd_complete_handler+0x2e>
	}
	else
	{
		DBG_LOG_DEV("Char Write Cmd Failed, Connection Handle:%d, Operation:%d",
1000d658:	4805      	ldr	r0, [pc, #20]	; (1000d670 <ble_characteristic_write_cmd_complete_handler+0x34>)
1000d65a:	4b06      	ldr	r3, [pc, #24]	; (1000d674 <ble_characteristic_write_cmd_complete_handler+0x38>)
1000d65c:	4798      	blx	r3
1000d65e:	78a2      	ldrb	r2, [r4, #2]
1000d660:	8821      	ldrh	r1, [r4, #0]
1000d662:	4807      	ldr	r0, [pc, #28]	; (1000d680 <ble_characteristic_write_cmd_complete_handler+0x44>)
1000d664:	4b05      	ldr	r3, [pc, #20]	; (1000d67c <ble_characteristic_write_cmd_complete_handler+0x40>)
1000d666:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
1000d668:	25e2      	movs	r5, #226	; 0xe2
}
1000d66a:	0028      	movs	r0, r5
1000d66c:	bd70      	pop	{r4, r5, r6, pc}
1000d66e:	46c0      	nop			; (mov r8, r8)
1000d670:	10015f9c 	.word	0x10015f9c
1000d674:	10014df5 	.word	0x10014df5
1000d678:	100171d0 	.word	0x100171d0
1000d67c:	10014cd5 	.word	0x10014cd5
1000d680:	1001720c 	.word	0x1001720c

1000d684 <ble_disconnected_state_handler>:

/** @brief function handles disconnection event received from stack */
at_ble_status_t ble_disconnected_state_handler(void *params)
{
1000d684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000d686:	0006      	movs	r6, r0
1000d688:	4c1d      	ldr	r4, [pc, #116]	; (1000d700 <ble_disconnected_state_handler+0x7c>)
1000d68a:	239b      	movs	r3, #155	; 0x9b
1000d68c:	009b      	lsls	r3, r3, #2
1000d68e:	18e7      	adds	r7, r4, r3
1000d690:	0025      	movs	r5, r4
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
1000d692:	0023      	movs	r3, r4
1000d694:	3b56      	subs	r3, #86	; 0x56
1000d696:	881a      	ldrh	r2, [r3, #0]
1000d698:	8833      	ldrh	r3, [r6, #0]
1000d69a:	429a      	cmp	r2, r3
1000d69c:	d122      	bne.n	1000d6e4 <ble_disconnected_state_handler+0x60>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
1000d69e:	7823      	ldrb	r3, [r4, #0]
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
1000d6a0:	2b05      	cmp	r3, #5
1000d6a2:	d001      	beq.n	1000d6a8 <ble_disconnected_state_handler+0x24>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
1000d6a4:	2b08      	cmp	r3, #8
1000d6a6:	d102      	bne.n	1000d6ae <ble_disconnected_state_handler+0x2a>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
1000d6a8:	2301      	movs	r3, #1
1000d6aa:	702b      	strb	r3, [r5, #0]
1000d6ac:	e01a      	b.n	1000d6e4 <ble_disconnected_state_handler+0x60>
		}		
		else if(ble_dev_info[idx].conn_info.handle == disconnect->handle)
		{
			switch (ble_dev_info[idx].conn_state)
1000d6ae:	2b07      	cmp	r3, #7
1000d6b0:	d80f      	bhi.n	1000d6d2 <ble_disconnected_state_handler+0x4e>
1000d6b2:	009b      	lsls	r3, r3, #2
1000d6b4:	4a13      	ldr	r2, [pc, #76]	; (1000d704 <ble_disconnected_state_handler+0x80>)
1000d6b6:	58d3      	ldr	r3, [r2, r3]
1000d6b8:	469f      	mov	pc, r3
				case BLE_DEVICE_PAIRING_FAILED:
				case BLE_DEVICE_ENCRYPTION_STATE:
				case BLE_DEVICE_ENCRYPTION_FAILED:
				{
					/* Device is not paired so remove the device information */
					ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000d6ba:	2300      	movs	r3, #0
1000d6bc:	7023      	strb	r3, [r4, #0]
					if (ble_device_count > 0)
1000d6be:	4b12      	ldr	r3, [pc, #72]	; (1000d708 <ble_disconnected_state_handler+0x84>)
1000d6c0:	781b      	ldrb	r3, [r3, #0]
1000d6c2:	2b00      	cmp	r3, #0
1000d6c4:	d00e      	beq.n	1000d6e4 <ble_disconnected_state_handler+0x60>
					{
						ble_device_count--;
1000d6c6:	4a10      	ldr	r2, [pc, #64]	; (1000d708 <ble_disconnected_state_handler+0x84>)
1000d6c8:	7813      	ldrb	r3, [r2, #0]
1000d6ca:	3b01      	subs	r3, #1
1000d6cc:	b2db      	uxtb	r3, r3
1000d6ce:	7013      	strb	r3, [r2, #0]
1000d6d0:	e008      	b.n	1000d6e4 <ble_disconnected_state_handler+0x60>
				
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
1000d6d2:	480e      	ldr	r0, [pc, #56]	; (1000d70c <ble_disconnected_state_handler+0x88>)
1000d6d4:	4b0e      	ldr	r3, [pc, #56]	; (1000d710 <ble_disconnected_state_handler+0x8c>)
1000d6d6:	4798      	blx	r3
1000d6d8:	7829      	ldrb	r1, [r5, #0]
1000d6da:	480e      	ldr	r0, [pc, #56]	; (1000d714 <ble_disconnected_state_handler+0x90>)
1000d6dc:	4b0e      	ldr	r3, [pc, #56]	; (1000d718 <ble_disconnected_state_handler+0x94>)
1000d6de:	4798      	blx	r3
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000d6e0:	2300      	movs	r3, #0
1000d6e2:	702b      	strb	r3, [r5, #0]
1000d6e4:	347c      	adds	r4, #124	; 0x7c
{
	at_ble_disconnected_t *disconnect;
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d6e6:	42bc      	cmp	r4, r7
1000d6e8:	d1d2      	bne.n	1000d690 <ble_disconnected_state_handler+0xc>
				break;				
			}
		} 
	}
	
	DBG_LOG("Device disconnected Reason:0x%02x Handle=0x%x", disconnect->reason, disconnect->handle);
1000d6ea:	4808      	ldr	r0, [pc, #32]	; (1000d70c <ble_disconnected_state_handler+0x88>)
1000d6ec:	4b08      	ldr	r3, [pc, #32]	; (1000d710 <ble_disconnected_state_handler+0x8c>)
1000d6ee:	4798      	blx	r3
1000d6f0:	8832      	ldrh	r2, [r6, #0]
1000d6f2:	78b1      	ldrb	r1, [r6, #2]
1000d6f4:	4809      	ldr	r0, [pc, #36]	; (1000d71c <ble_disconnected_state_handler+0x98>)
1000d6f6:	4b08      	ldr	r3, [pc, #32]	; (1000d718 <ble_disconnected_state_handler+0x94>)
1000d6f8:	4798      	blx	r3
	return AT_BLE_SUCCESS;
}
1000d6fa:	2000      	movs	r0, #0
1000d6fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000d6fe:	46c0      	nop			; (mov r8, r8)
1000d700:	10019da6 	.word	0x10019da6
1000d704:	10016f88 	.word	0x10016f88
1000d708:	10019fb4 	.word	0x10019fb4
1000d70c:	10015f9c 	.word	0x10015f9c
1000d710:	10014df5 	.word	0x10014df5
1000d714:	10017248 	.word	0x10017248
1000d718:	10014cd5 	.word	0x10014cd5
1000d71c:	10017260 	.word	0x10017260

1000d720 <ble_conn_param_update>:

/** @brief connection update parameter function */
at_ble_status_t ble_conn_param_update(void *params)
{
1000d720:	b510      	push	{r4, lr}
	at_ble_conn_param_update_done_t * conn_param_update;
	conn_param_update = (at_ble_conn_param_update_done_t *)params;
	DBG_LOG_DEV("AT_BLE_CONN_PARAM_UPDATE ");
1000d722:	4804      	ldr	r0, [pc, #16]	; (1000d734 <ble_conn_param_update+0x14>)
1000d724:	4b04      	ldr	r3, [pc, #16]	; (1000d738 <ble_conn_param_update+0x18>)
1000d726:	4798      	blx	r3
1000d728:	4804      	ldr	r0, [pc, #16]	; (1000d73c <ble_conn_param_update+0x1c>)
1000d72a:	4b05      	ldr	r3, [pc, #20]	; (1000d740 <ble_conn_param_update+0x20>)
1000d72c:	4798      	blx	r3
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}
1000d72e:	2000      	movs	r0, #0
1000d730:	bd10      	pop	{r4, pc}
1000d732:	46c0      	nop			; (mov r8, r8)
1000d734:	10015f9c 	.word	0x10015f9c
1000d738:	10014df5 	.word	0x10014df5
1000d73c:	10017290 	.word	0x10017290
1000d740:	10014cd5 	.word	0x10014cd5

1000d744 <ble_encryption_status_change_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption status change */
at_ble_status_t ble_encryption_status_change_handler(void *params)
{
1000d744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000d746:	0006      	movs	r6, r0
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
1000d748:	8801      	ldrh	r1, [r0, #0]
1000d74a:	4b28      	ldr	r3, [pc, #160]	; (1000d7ec <ble_encryption_status_change_handler+0xa8>)
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d74c:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
1000d74e:	891a      	ldrh	r2, [r3, #8]
1000d750:	428a      	cmp	r2, r1
1000d752:	d104      	bne.n	1000d75e <ble_encryption_status_change_handler+0x1a>
1000d754:	001a      	movs	r2, r3
1000d756:	325e      	adds	r2, #94	; 0x5e
1000d758:	7812      	ldrb	r2, [r2, #0]
1000d75a:	2a06      	cmp	r2, #6
1000d75c:	d02e      	beq.n	1000d7bc <ble_encryption_status_change_handler+0x78>
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d75e:	3401      	adds	r4, #1
1000d760:	b2e4      	uxtb	r4, r4
1000d762:	337c      	adds	r3, #124	; 0x7c
1000d764:	2c05      	cmp	r4, #5
1000d766:	d1f2      	bne.n	1000d74e <ble_encryption_status_change_handler+0xa>
1000d768:	e039      	b.n	1000d7de <ble_encryption_status_change_handler+0x9a>
			return AT_BLE_FAILURE;
		}
	}
	else
	{
		ble_dev_info[idx].bond_info.status = enc_status->status;
1000d76a:	4920      	ldr	r1, [pc, #128]	; (1000d7ec <ble_encryption_status_change_handler+0xa8>)
1000d76c:	0163      	lsls	r3, r4, #5
1000d76e:	1b1a      	subs	r2, r3, r4
1000d770:	0092      	lsls	r2, r2, #2
1000d772:	188a      	adds	r2, r1, r2
1000d774:	7615      	strb	r5, [r2, #24]
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
1000d776:	0014      	movs	r4, r2
1000d778:	345e      	adds	r4, #94	; 0x5e
1000d77a:	2307      	movs	r3, #7
1000d77c:	7023      	strb	r3, [r4, #0]
		DBG_LOG("Encryption failed");
1000d77e:	481c      	ldr	r0, [pc, #112]	; (1000d7f0 <ble_encryption_status_change_handler+0xac>)
1000d780:	4b1c      	ldr	r3, [pc, #112]	; (1000d7f4 <ble_encryption_status_change_handler+0xb0>)
1000d782:	4798      	blx	r3
1000d784:	481c      	ldr	r0, [pc, #112]	; (1000d7f8 <ble_encryption_status_change_handler+0xb4>)
1000d786:	4b1d      	ldr	r3, [pc, #116]	; (1000d7fc <ble_encryption_status_change_handler+0xb8>)
1000d788:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000d78a:	25e2      	movs	r5, #226	; 0xe2
1000d78c:	e02b      	b.n	1000d7e6 <ble_encryption_status_change_handler+0xa2>
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Encryption completed successfully");
1000d78e:	4818      	ldr	r0, [pc, #96]	; (1000d7f0 <ble_encryption_status_change_handler+0xac>)
1000d790:	4b18      	ldr	r3, [pc, #96]	; (1000d7f4 <ble_encryption_status_change_handler+0xb0>)
1000d792:	4798      	blx	r3
1000d794:	481a      	ldr	r0, [pc, #104]	; (1000d800 <ble_encryption_status_change_handler+0xbc>)
1000d796:	4b19      	ldr	r3, [pc, #100]	; (1000d7fc <ble_encryption_status_change_handler+0xb8>)
1000d798:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_COMPLETED;
1000d79a:	4914      	ldr	r1, [pc, #80]	; (1000d7ec <ble_encryption_status_change_handler+0xa8>)
1000d79c:	0163      	lsls	r3, r4, #5
1000d79e:	1b1a      	subs	r2, r3, r4
1000d7a0:	0092      	lsls	r2, r2, #2
1000d7a2:	188a      	adds	r2, r1, r2
1000d7a4:	0010      	movs	r0, r2
1000d7a6:	305e      	adds	r0, #94	; 0x5e
1000d7a8:	2708      	movs	r7, #8
1000d7aa:	7007      	strb	r7, [r0, #0]
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
1000d7ac:	78f0      	ldrb	r0, [r6, #3]
1000d7ae:	7510      	strb	r0, [r2, #20]
			ble_dev_info[idx].bond_info.status = enc_status->status;
1000d7b0:	78b2      	ldrb	r2, [r6, #2]
1000d7b2:	1b1c      	subs	r4, r3, r4
1000d7b4:	00a4      	lsls	r4, r4, #2
1000d7b6:	190c      	adds	r4, r1, r4
1000d7b8:	7622      	strb	r2, [r4, #24]
		ble_dev_info[idx].bond_info.status = enc_status->status;
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
1000d7ba:	e014      	b.n	1000d7e6 <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
1000d7bc:	78b5      	ldrb	r5, [r6, #2]
1000d7be:	2d00      	cmp	r5, #0
1000d7c0:	d0e5      	beq.n	1000d78e <ble_encryption_status_change_handler+0x4a>
1000d7c2:	e7d2      	b.n	1000d76a <ble_encryption_status_change_handler+0x26>
	{
		DBG_LOG("Encryption completed successfully");
1000d7c4:	4e0a      	ldr	r6, [pc, #40]	; (1000d7f0 <ble_encryption_status_change_handler+0xac>)
1000d7c6:	0030      	movs	r0, r6
1000d7c8:	4d0a      	ldr	r5, [pc, #40]	; (1000d7f4 <ble_encryption_status_change_handler+0xb0>)
1000d7ca:	47a8      	blx	r5
1000d7cc:	480c      	ldr	r0, [pc, #48]	; (1000d800 <ble_encryption_status_change_handler+0xbc>)
1000d7ce:	4c0b      	ldr	r4, [pc, #44]	; (1000d7fc <ble_encryption_status_change_handler+0xb8>)
1000d7d0:	47a0      	blx	r4
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
			ble_dev_info[idx].bond_info.status = enc_status->status;
		}
		else
		{
			DBG_LOG("BLE Device not found encryption info");
1000d7d2:	0030      	movs	r0, r6
1000d7d4:	47a8      	blx	r5
1000d7d6:	480b      	ldr	r0, [pc, #44]	; (1000d804 <ble_encryption_status_change_handler+0xc0>)
1000d7d8:	47a0      	blx	r4
			return AT_BLE_FAILURE;
1000d7da:	25e2      	movs	r5, #226	; 0xe2
1000d7dc:	e003      	b.n	1000d7e6 <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
1000d7de:	78b5      	ldrb	r5, [r6, #2]
1000d7e0:	2d00      	cmp	r5, #0
1000d7e2:	d1c2      	bne.n	1000d76a <ble_encryption_status_change_handler+0x26>
1000d7e4:	e7ee      	b.n	1000d7c4 <ble_encryption_status_change_handler+0x80>
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
}
1000d7e6:	0028      	movs	r0, r5
1000d7e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000d7ea:	46c0      	nop			; (mov r8, r8)
1000d7ec:	10019d48 	.word	0x10019d48
1000d7f0:	10015f9c 	.word	0x10015f9c
1000d7f4:	10014df5 	.word	0x10014df5
1000d7f8:	100172ac 	.word	0x100172ac
1000d7fc:	10014cd5 	.word	0x10014cd5
1000d800:	100172c0 	.word	0x100172c0
1000d804:	100172e4 	.word	0x100172e4

1000d808 <ble_scan_info_handler>:
	return found;
}
#endif
/** @brief function handling scaned information */
at_ble_status_t ble_scan_info_handler(void *params)
{
1000d808:	b530      	push	{r4, r5, lr}
1000d80a:	b085      	sub	sp, #20
1000d80c:	0004      	movs	r4, r0
	at_ble_scan_info_t *scan_param;
	scan_param = (at_ble_scan_info_t *)params;
	if(scan_response_count < MAX_SCAN_DEVICE)
1000d80e:	4b1f      	ldr	r3, [pc, #124]	; (1000d88c <ble_scan_info_handler+0x84>)
1000d810:	781b      	ldrb	r3, [r3, #0]
1000d812:	b2db      	uxtb	r3, r3
1000d814:	2b13      	cmp	r3, #19
1000d816:	d824      	bhi.n	1000d862 <ble_scan_info_handler+0x5a>
	{
		memcpy((uint8_t *)&scan_info[scan_response_count], scan_param, sizeof(at_ble_scan_info_t));
1000d818:	4d1c      	ldr	r5, [pc, #112]	; (1000d88c <ble_scan_info_handler+0x84>)
1000d81a:	782b      	ldrb	r3, [r5, #0]
1000d81c:	b2db      	uxtb	r3, r3
1000d81e:	0098      	lsls	r0, r3, #2
1000d820:	18c0      	adds	r0, r0, r3
1000d822:	00c0      	lsls	r0, r0, #3
1000d824:	18c3      	adds	r3, r0, r3
1000d826:	481a      	ldr	r0, [pc, #104]	; (1000d890 <ble_scan_info_handler+0x88>)
1000d828:	1818      	adds	r0, r3, r0
1000d82a:	2229      	movs	r2, #41	; 0x29
1000d82c:	0021      	movs	r1, r4
1000d82e:	4b19      	ldr	r3, [pc, #100]	; (1000d894 <ble_scan_info_handler+0x8c>)
1000d830:	4798      	blx	r3
		DBG_LOG_DEV("Info:Device found address [%d]  0x%02X%02X%02X%02X%02X%02X ",
1000d832:	4819      	ldr	r0, [pc, #100]	; (1000d898 <ble_scan_info_handler+0x90>)
1000d834:	4b19      	ldr	r3, [pc, #100]	; (1000d89c <ble_scan_info_handler+0x94>)
1000d836:	4798      	blx	r3
1000d838:	7829      	ldrb	r1, [r5, #0]
1000d83a:	b2c9      	uxtb	r1, r1
1000d83c:	79a3      	ldrb	r3, [r4, #6]
1000d83e:	79e2      	ldrb	r2, [r4, #7]
1000d840:	78a0      	ldrb	r0, [r4, #2]
1000d842:	9003      	str	r0, [sp, #12]
1000d844:	78e0      	ldrb	r0, [r4, #3]
1000d846:	9002      	str	r0, [sp, #8]
1000d848:	7920      	ldrb	r0, [r4, #4]
1000d84a:	9001      	str	r0, [sp, #4]
1000d84c:	7960      	ldrb	r0, [r4, #5]
1000d84e:	9000      	str	r0, [sp, #0]
1000d850:	4813      	ldr	r0, [pc, #76]	; (1000d8a0 <ble_scan_info_handler+0x98>)
1000d852:	4c14      	ldr	r4, [pc, #80]	; (1000d8a4 <ble_scan_info_handler+0x9c>)
1000d854:	47a0      	blx	r4
		scan_param->dev_addr.addr[4],
		scan_param->dev_addr.addr[3],
		scan_param->dev_addr.addr[2],
		scan_param->dev_addr.addr[1],
		scan_param->dev_addr.addr[0]);
		scan_response_count++;
1000d856:	782b      	ldrb	r3, [r5, #0]
1000d858:	3301      	adds	r3, #1
1000d85a:	b2db      	uxtb	r3, r3
1000d85c:	702b      	strb	r3, [r5, #0]
		return AT_BLE_SUCCESS;
1000d85e:	2300      	movs	r3, #0
1000d860:	e011      	b.n	1000d886 <ble_scan_info_handler+0x7e>
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
1000d862:	480d      	ldr	r0, [pc, #52]	; (1000d898 <ble_scan_info_handler+0x90>)
1000d864:	4b0d      	ldr	r3, [pc, #52]	; (1000d89c <ble_scan_info_handler+0x94>)
1000d866:	4798      	blx	r3
1000d868:	480f      	ldr	r0, [pc, #60]	; (1000d8a8 <ble_scan_info_handler+0xa0>)
1000d86a:	4b0e      	ldr	r3, [pc, #56]	; (1000d8a4 <ble_scan_info_handler+0x9c>)
1000d86c:	4798      	blx	r3
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
1000d86e:	4b0f      	ldr	r3, [pc, #60]	; (1000d8ac <ble_scan_info_handler+0xa4>)
1000d870:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
1000d872:	23e2      	movs	r3, #226	; 0xe2
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
1000d874:	2800      	cmp	r0, #0
1000d876:	d006      	beq.n	1000d886 <ble_scan_info_handler+0x7e>
		{
			DBG_LOG("Failed to stop scanning");
1000d878:	4807      	ldr	r0, [pc, #28]	; (1000d898 <ble_scan_info_handler+0x90>)
1000d87a:	4b08      	ldr	r3, [pc, #32]	; (1000d89c <ble_scan_info_handler+0x94>)
1000d87c:	4798      	blx	r3
1000d87e:	480c      	ldr	r0, [pc, #48]	; (1000d8b0 <ble_scan_info_handler+0xa8>)
1000d880:	4b08      	ldr	r3, [pc, #32]	; (1000d8a4 <ble_scan_info_handler+0x9c>)
1000d882:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
1000d884:	23e2      	movs	r3, #226	; 0xe2
	}
}
1000d886:	0018      	movs	r0, r3
1000d888:	b005      	add	sp, #20
1000d88a:	bd30      	pop	{r4, r5, pc}
1000d88c:	100188bc 	.word	0x100188bc
1000d890:	1001a02c 	.word	0x1001a02c
1000d894:	10014b7b 	.word	0x10014b7b
1000d898:	10015f9c 	.word	0x10015f9c
1000d89c:	10014df5 	.word	0x10014df5
1000d8a0:	1001730c 	.word	0x1001730c
1000d8a4:	10014cd5 	.word	0x10014cd5
1000d8a8:	10017348 	.word	0x10017348
1000d8ac:	10010719 	.word	0x10010719
1000d8b0:	10017380 	.word	0x10017380

1000d8b4 <ble_pair_done_handler>:
	return AT_BLE_SUCCESS;	
}

/** @brief function handles pair done event */
at_ble_status_t ble_pair_done_handler(void *params)
{
1000d8b4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d8b6:	465f      	mov	r7, fp
1000d8b8:	4656      	mov	r6, sl
1000d8ba:	464d      	mov	r5, r9
1000d8bc:	4644      	mov	r4, r8
1000d8be:	b4f0      	push	{r4, r5, r6, r7}
1000d8c0:	b083      	sub	sp, #12
1000d8c2:	0005      	movs	r5, r0
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1000d8c4:	8841      	ldrh	r1, [r0, #2]
1000d8c6:	4b59      	ldr	r3, [pc, #356]	; (1000da2c <ble_pair_done_handler+0x178>)
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d8c8:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1000d8ca:	891a      	ldrh	r2, [r3, #8]
1000d8cc:	428a      	cmp	r2, r1
1000d8ce:	d105      	bne.n	1000d8dc <ble_pair_done_handler+0x28>
1000d8d0:	001a      	movs	r2, r3
1000d8d2:	325e      	adds	r2, #94	; 0x5e
1000d8d4:	7812      	ldrb	r2, [r2, #0]
1000d8d6:	2a03      	cmp	r2, #3
1000d8d8:	d100      	bne.n	1000d8dc <ble_pair_done_handler+0x28>
1000d8da:	e09a      	b.n	1000da12 <ble_pair_done_handler+0x15e>
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d8dc:	3401      	adds	r4, #1
1000d8de:	b2e4      	uxtb	r4, r4
1000d8e0:	337c      	adds	r3, #124	; 0x7c
1000d8e2:	2c05      	cmp	r4, #5
1000d8e4:	d1f1      	bne.n	1000d8ca <ble_pair_done_handler+0x16>
1000d8e6:	e057      	b.n	1000d998 <ble_pair_done_handler+0xe4>
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
			
			DBG_LOG_DEV("LTK: ");
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
1000d8e8:	7821      	ldrb	r1, [r4, #0]
1000d8ea:	0030      	movs	r0, r6
1000d8ec:	47b8      	blx	r7
1000d8ee:	3401      	adds	r4, #1
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
			
			DBG_LOG_DEV("LTK: ");
			for (idx = 0; idx < 16; idx++)
1000d8f0:	454c      	cmp	r4, r9
1000d8f2:	d1f9      	bne.n	1000d8e8 <ble_pair_done_handler+0x34>
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
				
			}
			DBG_LOG_DEV("CSRK: ");
1000d8f4:	484e      	ldr	r0, [pc, #312]	; (1000da30 <ble_pair_done_handler+0x17c>)
1000d8f6:	4b4f      	ldr	r3, [pc, #316]	; (1000da34 <ble_pair_done_handler+0x180>)
1000d8f8:	4798      	blx	r3
1000d8fa:	484f      	ldr	r0, [pc, #316]	; (1000da38 <ble_pair_done_handler+0x184>)
1000d8fc:	4b4f      	ldr	r3, [pc, #316]	; (1000da3c <ble_pair_done_handler+0x188>)
1000d8fe:	4798      	blx	r3
1000d900:	002e      	movs	r6, r5
1000d902:	3622      	adds	r6, #34	; 0x22
1000d904:	002c      	movs	r4, r5
1000d906:	3432      	adds	r4, #50	; 0x32
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_csrk.key[idx]);
1000d908:	4f4c      	ldr	r7, [pc, #304]	; (1000da3c <ble_pair_done_handler+0x188>)
1000d90a:	7831      	ldrb	r1, [r6, #0]
1000d90c:	484c      	ldr	r0, [pc, #304]	; (1000da40 <ble_pair_done_handler+0x18c>)
1000d90e:	47b8      	blx	r7
1000d910:	3601      	adds	r6, #1
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
				
			}
			DBG_LOG_DEV("CSRK: ");
			for (idx = 0; idx < 16; idx++)
1000d912:	42a6      	cmp	r6, r4
1000d914:	d1f9      	bne.n	1000d90a <ble_pair_done_handler+0x56>
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_csrk.key[idx]);
				
			}
			DBG_LOG_DEV("IRK:");
1000d916:	4846      	ldr	r0, [pc, #280]	; (1000da30 <ble_pair_done_handler+0x17c>)
1000d918:	4b46      	ldr	r3, [pc, #280]	; (1000da34 <ble_pair_done_handler+0x180>)
1000d91a:	4798      	blx	r3
1000d91c:	4849      	ldr	r0, [pc, #292]	; (1000da44 <ble_pair_done_handler+0x190>)
1000d91e:	4b47      	ldr	r3, [pc, #284]	; (1000da3c <ble_pair_done_handler+0x188>)
1000d920:	4798      	blx	r3
1000d922:	3542      	adds	r5, #66	; 0x42
1000d924:	002f      	movs	r7, r5
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_irk.key[idx]);
1000d926:	4e46      	ldr	r6, [pc, #280]	; (1000da40 <ble_pair_done_handler+0x18c>)
1000d928:	4d44      	ldr	r5, [pc, #272]	; (1000da3c <ble_pair_done_handler+0x188>)
1000d92a:	7821      	ldrb	r1, [r4, #0]
1000d92c:	0030      	movs	r0, r6
1000d92e:	47a8      	blx	r5
1000d930:	3401      	adds	r4, #1
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_csrk.key[idx]);
				
			}
			DBG_LOG_DEV("IRK:");
			for (idx = 0; idx < 16; idx++)
1000d932:	42bc      	cmp	r4, r7
1000d934:	d1f9      	bne.n	1000d92a <ble_pair_done_handler+0x76>
1000d936:	e071      	b.n	1000da1c <ble_pair_done_handler+0x168>
			return AT_BLE_FAILURE;
		}		
	}
	else
	{
		if(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE && ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) {
1000d938:	0163      	lsls	r3, r4, #5
1000d93a:	1b1c      	subs	r4, r3, r4
1000d93c:	00a4      	lsls	r4, r4, #2
1000d93e:	4b3b      	ldr	r3, [pc, #236]	; (1000da2c <ble_pair_done_handler+0x178>)
1000d940:	191c      	adds	r4, r3, r4
1000d942:	345e      	adds	r4, #94	; 0x5e
1000d944:	7823      	ldrb	r3, [r4, #0]
1000d946:	2b01      	cmp	r3, #1
1000d948:	d915      	bls.n	1000d976 <ble_pair_done_handler+0xc2>
			DBG_LOG("Pairing failed...Disconnecting");
1000d94a:	4839      	ldr	r0, [pc, #228]	; (1000da30 <ble_pair_done_handler+0x17c>)
1000d94c:	4b39      	ldr	r3, [pc, #228]	; (1000da34 <ble_pair_done_handler+0x180>)
1000d94e:	4798      	blx	r3
1000d950:	483d      	ldr	r0, [pc, #244]	; (1000da48 <ble_pair_done_handler+0x194>)
1000d952:	4b3a      	ldr	r3, [pc, #232]	; (1000da3c <ble_pair_done_handler+0x188>)
1000d954:	4798      	blx	r3
			if(!(at_ble_disconnect(pairing_params->handle, AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS))
1000d956:	8868      	ldrh	r0, [r5, #2]
1000d958:	2113      	movs	r1, #19
1000d95a:	4b3c      	ldr	r3, [pc, #240]	; (1000da4c <ble_pair_done_handler+0x198>)
1000d95c:	4798      	blx	r3
1000d95e:	9001      	str	r0, [sp, #4]
1000d960:	2800      	cmp	r0, #0
1000d962:	d05b      	beq.n	1000da1c <ble_pair_done_handler+0x168>
			{
				DBG_LOG("Disconnect Request Failed");
1000d964:	4832      	ldr	r0, [pc, #200]	; (1000da30 <ble_pair_done_handler+0x17c>)
1000d966:	4b33      	ldr	r3, [pc, #204]	; (1000da34 <ble_pair_done_handler+0x180>)
1000d968:	4798      	blx	r3
1000d96a:	4839      	ldr	r0, [pc, #228]	; (1000da50 <ble_pair_done_handler+0x19c>)
1000d96c:	4b33      	ldr	r3, [pc, #204]	; (1000da3c <ble_pair_done_handler+0x188>)
1000d96e:	4798      	blx	r3
				return AT_BLE_FAILURE;
1000d970:	23e2      	movs	r3, #226	; 0xe2
1000d972:	9301      	str	r3, [sp, #4]
1000d974:	e052      	b.n	1000da1c <ble_pair_done_handler+0x168>
			}
		}
	}
	return AT_BLE_SUCCESS;
1000d976:	2300      	movs	r3, #0
1000d978:	9301      	str	r3, [sp, #4]
1000d97a:	e04f      	b.n	1000da1c <ble_pair_done_handler+0x168>
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Pairing procedure completed successfully");
1000d97c:	4e2c      	ldr	r6, [pc, #176]	; (1000da30 <ble_pair_done_handler+0x17c>)
1000d97e:	0030      	movs	r0, r6
1000d980:	4d2c      	ldr	r5, [pc, #176]	; (1000da34 <ble_pair_done_handler+0x180>)
1000d982:	47a8      	blx	r5
1000d984:	4833      	ldr	r0, [pc, #204]	; (1000da54 <ble_pair_done_handler+0x1a0>)
1000d986:	4c2d      	ldr	r4, [pc, #180]	; (1000da3c <ble_pair_done_handler+0x188>)
1000d988:	47a0      	blx	r4
				
			}
		}
		else
		{
			DBG_LOG("BLE Device not found to store the pairing info");
1000d98a:	0030      	movs	r0, r6
1000d98c:	47a8      	blx	r5
1000d98e:	4832      	ldr	r0, [pc, #200]	; (1000da58 <ble_pair_done_handler+0x1a4>)
1000d990:	47a0      	blx	r4
			return AT_BLE_FAILURE;
1000d992:	23e2      	movs	r3, #226	; 0xe2
1000d994:	9301      	str	r3, [sp, #4]
1000d996:	e041      	b.n	1000da1c <ble_pair_done_handler+0x168>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
1000d998:	792b      	ldrb	r3, [r5, #4]
1000d99a:	2b00      	cmp	r3, #0
1000d99c:	d1cc      	bne.n	1000d938 <ble_pair_done_handler+0x84>
1000d99e:	e7ed      	b.n	1000d97c <ble_pair_done_handler+0xc8>
	{
		DBG_LOG("Pairing procedure completed successfully");
1000d9a0:	4823      	ldr	r0, [pc, #140]	; (1000da30 <ble_pair_done_handler+0x17c>)
1000d9a2:	4b24      	ldr	r3, [pc, #144]	; (1000da34 <ble_pair_done_handler+0x180>)
1000d9a4:	469b      	mov	fp, r3
1000d9a6:	4798      	blx	r3
1000d9a8:	482a      	ldr	r0, [pc, #168]	; (1000da54 <ble_pair_done_handler+0x1a0>)
1000d9aa:	4b24      	ldr	r3, [pc, #144]	; (1000da3c <ble_pair_done_handler+0x188>)
1000d9ac:	469a      	mov	sl, r3
1000d9ae:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].bond_info.auth = pairing_params->auth;
1000d9b0:	782a      	ldrb	r2, [r5, #0]
1000d9b2:	4b1e      	ldr	r3, [pc, #120]	; (1000da2c <ble_pair_done_handler+0x178>)
1000d9b4:	4698      	mov	r8, r3
1000d9b6:	0167      	lsls	r7, r4, #5
1000d9b8:	1b3b      	subs	r3, r7, r4
1000d9ba:	009b      	lsls	r3, r3, #2
1000d9bc:	4443      	add	r3, r8
1000d9be:	751a      	strb	r2, [r3, #20]
			ble_dev_info[idx].bond_info.status = pairing_params->status;
1000d9c0:	792a      	ldrb	r2, [r5, #4]
1000d9c2:	761a      	strb	r2, [r3, #24]
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRED;
1000d9c4:	335e      	adds	r3, #94	; 0x5e
1000d9c6:	2205      	movs	r2, #5
1000d9c8:	701a      	strb	r2, [r3, #0]
			
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
1000d9ca:	1b38      	subs	r0, r7, r4
1000d9cc:	0080      	lsls	r0, r0, #2
1000d9ce:	4440      	add	r0, r8
1000d9d0:	3036      	adds	r0, #54	; 0x36
1000d9d2:	320b      	adds	r2, #11
1000d9d4:	0029      	movs	r1, r5
1000d9d6:	3122      	adds	r1, #34	; 0x22
1000d9d8:	4b20      	ldr	r3, [pc, #128]	; (1000da5c <ble_pair_done_handler+0x1a8>)
1000d9da:	4699      	mov	r9, r3
1000d9dc:	4798      	blx	r3
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
1000d9de:	1b38      	subs	r0, r7, r4
1000d9e0:	0080      	lsls	r0, r0, #2
1000d9e2:	4440      	add	r0, r8
1000d9e4:	3046      	adds	r0, #70	; 0x46
1000d9e6:	2217      	movs	r2, #23
1000d9e8:	0029      	movs	r1, r5
1000d9ea:	3132      	adds	r1, #50	; 0x32
1000d9ec:	47c8      	blx	r9
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
1000d9ee:	1b38      	subs	r0, r7, r4
1000d9f0:	0080      	lsls	r0, r0, #2
1000d9f2:	4440      	add	r0, r8
1000d9f4:	301a      	adds	r0, #26
1000d9f6:	1dac      	adds	r4, r5, #6
1000d9f8:	221c      	movs	r2, #28
1000d9fa:	0021      	movs	r1, r4
1000d9fc:	47c8      	blx	r9
			
			DBG_LOG_DEV("LTK: ");
1000d9fe:	480c      	ldr	r0, [pc, #48]	; (1000da30 <ble_pair_done_handler+0x17c>)
1000da00:	47d8      	blx	fp
1000da02:	4817      	ldr	r0, [pc, #92]	; (1000da60 <ble_pair_done_handler+0x1ac>)
1000da04:	47d0      	blx	sl
1000da06:	2316      	movs	r3, #22
1000da08:	4699      	mov	r9, r3
1000da0a:	44a9      	add	r9, r5
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
1000da0c:	4e0c      	ldr	r6, [pc, #48]	; (1000da40 <ble_pair_done_handler+0x18c>)
1000da0e:	4f0b      	ldr	r7, [pc, #44]	; (1000da3c <ble_pair_done_handler+0x188>)
1000da10:	e76a      	b.n	1000d8e8 <ble_pair_done_handler+0x34>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
1000da12:	792b      	ldrb	r3, [r5, #4]
1000da14:	9301      	str	r3, [sp, #4]
1000da16:	2b00      	cmp	r3, #0
1000da18:	d0c2      	beq.n	1000d9a0 <ble_pair_done_handler+0xec>
1000da1a:	e78d      	b.n	1000d938 <ble_pair_done_handler+0x84>
				return AT_BLE_FAILURE;
			}
		}
	}
	return AT_BLE_SUCCESS;
}
1000da1c:	9801      	ldr	r0, [sp, #4]
1000da1e:	b003      	add	sp, #12
1000da20:	bc3c      	pop	{r2, r3, r4, r5}
1000da22:	4690      	mov	r8, r2
1000da24:	4699      	mov	r9, r3
1000da26:	46a2      	mov	sl, r4
1000da28:	46ab      	mov	fp, r5
1000da2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000da2c:	10019d48 	.word	0x10019d48
1000da30:	10015f9c 	.word	0x10015f9c
1000da34:	10014df5 	.word	0x10014df5
1000da38:	100173a4 	.word	0x100173a4
1000da3c:	10014cd5 	.word	0x10014cd5
1000da40:	10017398 	.word	0x10017398
1000da44:	100173ac 	.word	0x100173ac
1000da48:	100173b4 	.word	0x100173b4
1000da4c:	10010739 	.word	0x10010739
1000da50:	100173d4 	.word	0x100173d4
1000da54:	100173f0 	.word	0x100173f0
1000da58:	1001741c 	.word	0x1001741c
1000da5c:	10014b7b 	.word	0x10014b7b
1000da60:	1001744c 	.word	0x1001744c

1000da64 <ble_conn_param_update_req>:
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_conn_param_update_req(void *params)
{
1000da64:	b510      	push	{r4, lr}
	at_ble_conn_param_update_request_t * conn_param_req;
	conn_param_req = (at_ble_conn_param_update_request_t *)params;
	at_ble_conn_update_reply(conn_param_req->handle, true, 1, 120);
1000da66:	8800      	ldrh	r0, [r0, #0]
1000da68:	2378      	movs	r3, #120	; 0x78
1000da6a:	2201      	movs	r2, #1
1000da6c:	2101      	movs	r1, #1
1000da6e:	4c02      	ldr	r4, [pc, #8]	; (1000da78 <ble_conn_param_update_req+0x14>)
1000da70:	47a0      	blx	r4
	return AT_BLE_SUCCESS;
}
1000da72:	2000      	movs	r0, #0
1000da74:	bd10      	pop	{r4, pc}
1000da76:	46c0      	nop			; (mov r8, r8)
1000da78:	10010759 	.word	0x10010759

1000da7c <ble_slave_security_request_handler>:

at_ble_status_t ble_slave_security_request_handler(void* params)
{
1000da7c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000da7e:	4657      	mov	r7, sl
1000da80:	464e      	mov	r6, r9
1000da82:	4645      	mov	r5, r8
1000da84:	b4e0      	push	{r5, r6, r7}
1000da86:	b084      	sub	sp, #16
1000da88:	0004      	movs	r4, r0
	uint8_t i = 0, idx;
	at_ble_slave_sec_request_t* slave_sec_req;
	bool device_found = false;
	
	slave_sec_req = (at_ble_slave_sec_request_t*)params;	
	memset(&features, 0x00, sizeof(at_ble_pair_features_t));
1000da8a:	2209      	movs	r2, #9
1000da8c:	2100      	movs	r1, #0
1000da8e:	a801      	add	r0, sp, #4
1000da90:	4b6a      	ldr	r3, [pc, #424]	; (1000dc3c <ble_slave_security_request_handler+0x1c0>)
1000da92:	4798      	blx	r3
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000da94:	8825      	ldrh	r5, [r4, #0]
1000da96:	496a      	ldr	r1, [pc, #424]	; (1000dc40 <ble_slave_security_request_handler+0x1c4>)
1000da98:	000a      	movs	r2, r1
1000da9a:	2300      	movs	r3, #0
1000da9c:	8910      	ldrh	r0, [r2, #8]
1000da9e:	42a8      	cmp	r0, r5
1000daa0:	d116      	bne.n	1000dad0 <ble_slave_security_request_handler+0x54>
1000daa2:	0010      	movs	r0, r2
1000daa4:	305e      	adds	r0, #94	; 0x5e
1000daa6:	7800      	ldrb	r0, [r0, #0]
1000daa8:	2802      	cmp	r0, #2
1000daaa:	d111      	bne.n	1000dad0 <ble_slave_security_request_handler+0x54>
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000daac:	4864      	ldr	r0, [pc, #400]	; (1000dc40 <ble_slave_security_request_handler+0x1c4>)
1000daae:	015a      	lsls	r2, r3, #5
1000dab0:	1ad6      	subs	r6, r2, r3
1000dab2:	00b6      	lsls	r6, r6, #2
1000dab4:	1986      	adds	r6, r0, r6
1000dab6:	365e      	adds	r6, #94	; 0x5e
1000dab8:	2206      	movs	r2, #6
1000daba:	7032      	strb	r2, [r6, #0]
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
1000dabc:	32f9      	adds	r2, #249	; 0xf9
1000dabe:	4013      	ands	r3, r2
1000dac0:	015a      	lsls	r2, r3, #5
1000dac2:	1ad2      	subs	r2, r2, r3
1000dac4:	0092      	lsls	r2, r2, #2
1000dac6:	1882      	adds	r2, r0, r2
1000dac8:	7d12      	ldrb	r2, [r2, #20]
1000daca:	07d0      	lsls	r0, r2, #31
1000dacc:	d405      	bmi.n	1000dada <ble_slave_security_request_handler+0x5e>
1000dace:	e01b      	b.n	1000db08 <ble_slave_security_request_handler+0x8c>
1000dad0:	3301      	adds	r3, #1
1000dad2:	327c      	adds	r2, #124	; 0x7c
		//at_ble_disconnect(slave_sec_req->handle, AT_BLE_AUTH_FAILURE);		
		//return AT_BLE_FAILURE;
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000dad4:	2b05      	cmp	r3, #5
1000dad6:	d1e1      	bne.n	1000da9c <ble_slave_security_request_handler+0x20>
1000dad8:	e01e      	b.n	1000db18 <ble_slave_security_request_handler+0x9c>
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
1000dada:	78e0      	ldrb	r0, [r4, #3]
1000dadc:	2800      	cmp	r0, #0
1000dade:	d013      	beq.n	1000db08 <ble_slave_security_request_handler+0x8c>
		{
			if(at_ble_encryption_start(slave_sec_req->handle, &ble_dev_info[idx].bond_info.peer_ltk, ble_dev_info[idx].bond_info.auth) == AT_BLE_SUCCESS)
1000dae0:	0159      	lsls	r1, r3, #5
1000dae2:	1ac9      	subs	r1, r1, r3
1000dae4:	008b      	lsls	r3, r1, #2
1000dae6:	4956      	ldr	r1, [pc, #344]	; (1000dc40 <ble_slave_security_request_handler+0x1c4>)
1000dae8:	18c9      	adds	r1, r1, r3
1000daea:	311a      	adds	r1, #26
1000daec:	8820      	ldrh	r0, [r4, #0]
1000daee:	4b55      	ldr	r3, [pc, #340]	; (1000dc44 <ble_slave_security_request_handler+0x1c8>)
1000daf0:	4798      	blx	r3
1000daf2:	2800      	cmp	r0, #0
1000daf4:	d100      	bne.n	1000daf8 <ble_slave_security_request_handler+0x7c>
1000daf6:	e09b      	b.n	1000dc30 <ble_slave_security_request_handler+0x1b4>
			{
				return  AT_BLE_SUCCESS;
			}
			else
			{
				DBG_LOG("Encryption Not started");
1000daf8:	4853      	ldr	r0, [pc, #332]	; (1000dc48 <ble_slave_security_request_handler+0x1cc>)
1000dafa:	4b54      	ldr	r3, [pc, #336]	; (1000dc4c <ble_slave_security_request_handler+0x1d0>)
1000dafc:	4798      	blx	r3
1000dafe:	4854      	ldr	r0, [pc, #336]	; (1000dc50 <ble_slave_security_request_handler+0x1d4>)
1000db00:	4b54      	ldr	r3, [pc, #336]	; (1000dc54 <ble_slave_security_request_handler+0x1d8>)
1000db02:	4798      	blx	r3
				return AT_BLE_FAILURE;
1000db04:	20e2      	movs	r0, #226	; 0xe2
1000db06:	e093      	b.n	1000dc30 <ble_slave_security_request_handler+0x1b4>
			}			
		}
		else
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000db08:	015a      	lsls	r2, r3, #5
1000db0a:	1ad3      	subs	r3, r2, r3
1000db0c:	009b      	lsls	r3, r3, #2
1000db0e:	4a4c      	ldr	r2, [pc, #304]	; (1000dc40 <ble_slave_security_request_handler+0x1c4>)
1000db10:	18d3      	adds	r3, r2, r3
1000db12:	335e      	adds	r3, #94	; 0x5e
1000db14:	2202      	movs	r2, #2
1000db16:	701a      	strb	r2, [r3, #0]
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000db18:	8825      	ldrh	r5, [r4, #0]
1000db1a:	2200      	movs	r2, #0
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000db1c:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000db1e:	0016      	movs	r6, r2
1000db20:	8908      	ldrh	r0, [r1, #8]
1000db22:	42a8      	cmp	r0, r5
1000db24:	d10d      	bne.n	1000db42 <ble_slave_security_request_handler+0xc6>
1000db26:	0008      	movs	r0, r1
1000db28:	305e      	adds	r0, #94	; 0x5e
1000db2a:	7800      	ldrb	r0, [r0, #0]
1000db2c:	2802      	cmp	r0, #2
1000db2e:	d108      	bne.n	1000db42 <ble_slave_security_request_handler+0xc6>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000db30:	0152      	lsls	r2, r2, #5
1000db32:	1b92      	subs	r2, r2, r6
1000db34:	0096      	lsls	r6, r2, #2
1000db36:	4a42      	ldr	r2, [pc, #264]	; (1000dc40 <ble_slave_security_request_handler+0x1c4>)
1000db38:	1992      	adds	r2, r2, r6
1000db3a:	325e      	adds	r2, #94	; 0x5e
1000db3c:	2103      	movs	r1, #3
1000db3e:	7011      	strb	r1, [r2, #0]
			break;
1000db40:	e005      	b.n	1000db4e <ble_slave_security_request_handler+0xd2>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000db42:	3301      	adds	r3, #1
1000db44:	b2db      	uxtb	r3, r3
1000db46:	3201      	adds	r2, #1
1000db48:	317c      	adds	r1, #124	; 0x7c
1000db4a:	2b05      	cmp	r3, #5
1000db4c:	d1e7      	bne.n	1000db1e <ble_slave_security_request_handler+0xa2>
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
	features.bond = slave_sec_req->bond;
1000db4e:	aa01      	add	r2, sp, #4
1000db50:	78e1      	ldrb	r1, [r4, #3]
1000db52:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = true;
1000db54:	2101      	movs	r1, #1
1000db56:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = AT_BLE_IO_CAP_KB_DISPLAY;
1000db58:	3103      	adds	r1, #3
1000db5a:	7011      	strb	r1, [r2, #0]

	features.oob_avaiable = false;
			
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000db5c:	001f      	movs	r7, r3
1000db5e:	015a      	lsls	r2, r3, #5
1000db60:	1ad2      	subs	r2, r2, r3
1000db62:	0092      	lsls	r2, r2, #2
1000db64:	4936      	ldr	r1, [pc, #216]	; (1000dc40 <ble_slave_security_request_handler+0x1c4>)
1000db66:	5c52      	ldrb	r2, [r2, r1]
1000db68:	2a02      	cmp	r2, #2
1000db6a:	d104      	bne.n	1000db76 <ble_slave_security_request_handler+0xfa>
	{
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000db6c:	aa01      	add	r2, sp, #4
1000db6e:	2103      	movs	r1, #3
1000db70:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000db72:	71d1      	strb	r1, [r2, #7]
1000db74:	e003      	b.n	1000db7e <ble_slave_security_request_handler+0x102>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000db76:	aa01      	add	r2, sp, #4
1000db78:	2101      	movs	r1, #1
1000db7a:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000db7c:	71d1      	strb	r1, [r2, #7]
	}
	features.max_key_size = 16;
1000db7e:	aa01      	add	r2, sp, #4
1000db80:	2110      	movs	r1, #16
1000db82:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
1000db84:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000db86:	017a      	lsls	r2, r7, #5
1000db88:	1bd2      	subs	r2, r2, r7
1000db8a:	0092      	lsls	r2, r2, #2
1000db8c:	492c      	ldr	r1, [pc, #176]	; (1000dc40 <ble_slave_security_request_handler+0x1c4>)
1000db8e:	188a      	adds	r2, r1, r2
1000db90:	7e12      	ldrb	r2, [r2, #24]
1000db92:	2a40      	cmp	r2, #64	; 0x40
1000db94:	d134      	bne.n	1000dc00 <ble_slave_security_request_handler+0x184>
1000db96:	015a      	lsls	r2, r3, #5
1000db98:	1ad3      	subs	r3, r2, r3
1000db9a:	009b      	lsls	r3, r3, #2
1000db9c:	469a      	mov	sl, r3
1000db9e:	001e      	movs	r6, r3
1000dba0:	3660      	adds	r6, #96	; 0x60
1000dba2:	1876      	adds	r6, r6, r1
1000dba4:	4655      	mov	r5, sl
1000dba6:	3568      	adds	r5, #104	; 0x68
1000dba8:	186d      	adds	r5, r5, r1
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000dbaa:	4b2b      	ldr	r3, [pc, #172]	; (1000dc58 <ble_slave_security_request_handler+0x1dc>)
1000dbac:	4699      	mov	r9, r3
1000dbae:	230f      	movs	r3, #15
1000dbb0:	4698      	mov	r8, r3
1000dbb2:	47c8      	blx	r9
1000dbb4:	4643      	mov	r3, r8
1000dbb6:	4018      	ands	r0, r3
1000dbb8:	7030      	strb	r0, [r6, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000dbba:	47c8      	blx	r9
1000dbbc:	4643      	mov	r3, r8
1000dbbe:	4018      	ands	r0, r3
1000dbc0:	74b0      	strb	r0, [r6, #18]
1000dbc2:	3601      	adds	r6, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000dbc4:	42ae      	cmp	r6, r5
1000dbc6:	d1f4      	bne.n	1000dbb2 <ble_slave_security_request_handler+0x136>
1000dbc8:	4656      	mov	r6, sl
1000dbca:	3670      	adds	r6, #112	; 0x70
1000dbcc:	4a1c      	ldr	r2, [pc, #112]	; (1000dc40 <ble_slave_security_request_handler+0x1c4>)
1000dbce:	18b6      	adds	r6, r6, r2
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000dbd0:	4b21      	ldr	r3, [pc, #132]	; (1000dc58 <ble_slave_security_request_handler+0x1dc>)
1000dbd2:	4699      	mov	r9, r3
1000dbd4:	230f      	movs	r3, #15
1000dbd6:	4698      	mov	r8, r3
1000dbd8:	47c8      	blx	r9
1000dbda:	4643      	mov	r3, r8
1000dbdc:	4018      	ands	r0, r3
1000dbde:	7028      	strb	r0, [r5, #0]
1000dbe0:	3501      	adds	r5, #1
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000dbe2:	42b5      	cmp	r5, r6
1000dbe4:	d1f8      	bne.n	1000dbd8 <ble_slave_security_request_handler+0x15c>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000dbe6:	4b1c      	ldr	r3, [pc, #112]	; (1000dc58 <ble_slave_security_request_handler+0x1dc>)
1000dbe8:	4798      	blx	r3
1000dbea:	017b      	lsls	r3, r7, #5
1000dbec:	1bdb      	subs	r3, r3, r7
1000dbee:	009b      	lsls	r3, r3, #2
1000dbf0:	4a13      	ldr	r2, [pc, #76]	; (1000dc40 <ble_slave_security_request_handler+0x1c4>)
1000dbf2:	18d3      	adds	r3, r2, r3
1000dbf4:	001a      	movs	r2, r3
1000dbf6:	3270      	adds	r2, #112	; 0x70
1000dbf8:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000dbfa:	337a      	adds	r3, #122	; 0x7a
1000dbfc:	2210      	movs	r2, #16
1000dbfe:	701a      	strb	r2, [r3, #0]
	{
		/* Bonding information already exists */
		
	}

	if(at_ble_authenticate(slave_sec_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000dc00:	017a      	lsls	r2, r7, #5
1000dc02:	1bd7      	subs	r7, r2, r7
1000dc04:	00bf      	lsls	r7, r7, #2
1000dc06:	3760      	adds	r7, #96	; 0x60
1000dc08:	4a0d      	ldr	r2, [pc, #52]	; (1000dc40 <ble_slave_security_request_handler+0x1c4>)
1000dc0a:	18ba      	adds	r2, r7, r2
1000dc0c:	8820      	ldrh	r0, [r4, #0]
1000dc0e:	2300      	movs	r3, #0
1000dc10:	a901      	add	r1, sp, #4
1000dc12:	4c12      	ldr	r4, [pc, #72]	; (1000dc5c <ble_slave_security_request_handler+0x1e0>)
1000dc14:	47a0      	blx	r4
1000dc16:	2800      	cmp	r0, #0
1000dc18:	d00a      	beq.n	1000dc30 <ble_slave_security_request_handler+0x1b4>
	{
		features.bond = false;
1000dc1a:	ab01      	add	r3, sp, #4
1000dc1c:	2200      	movs	r2, #0
1000dc1e:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000dc20:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Slave Security Req - Authentication Failed");
1000dc22:	4809      	ldr	r0, [pc, #36]	; (1000dc48 <ble_slave_security_request_handler+0x1cc>)
1000dc24:	4b09      	ldr	r3, [pc, #36]	; (1000dc4c <ble_slave_security_request_handler+0x1d0>)
1000dc26:	4798      	blx	r3
1000dc28:	480d      	ldr	r0, [pc, #52]	; (1000dc60 <ble_slave_security_request_handler+0x1e4>)
1000dc2a:	4b0a      	ldr	r3, [pc, #40]	; (1000dc54 <ble_slave_security_request_handler+0x1d8>)
1000dc2c:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000dc2e:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000dc30:	b004      	add	sp, #16
1000dc32:	bc1c      	pop	{r2, r3, r4}
1000dc34:	4690      	mov	r8, r2
1000dc36:	4699      	mov	r9, r3
1000dc38:	46a2      	mov	sl, r4
1000dc3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000dc3c:	10014b8d 	.word	0x10014b8d
1000dc40:	10019d48 	.word	0x10019d48
1000dc44:	1001131d 	.word	0x1001131d
1000dc48:	10015f9c 	.word	0x10015f9c
1000dc4c:	10014df5 	.word	0x10014df5
1000dc50:	10017454 	.word	0x10017454
1000dc54:	10014cd5 	.word	0x10014cd5
1000dc58:	10014e09 	.word	0x10014e09
1000dc5c:	10011131 	.word	0x10011131
1000dc60:	1001746c 	.word	0x1001746c

1000dc64 <ble_pair_request_handler>:

/** @brief function handles pair request */
at_ble_status_t ble_pair_request_handler(void *params)
{
1000dc64:	b5f0      	push	{r4, r5, r6, r7, lr}
1000dc66:	465f      	mov	r7, fp
1000dc68:	4656      	mov	r6, sl
1000dc6a:	464d      	mov	r5, r9
1000dc6c:	4644      	mov	r4, r8
1000dc6e:	b4f0      	push	{r4, r5, r6, r7}
1000dc70:	b085      	sub	sp, #20
1000dc72:	4680      	mov	r8, r0
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000dc74:	8804      	ldrh	r4, [r0, #0]
1000dc76:	4a54      	ldr	r2, [pc, #336]	; (1000ddc8 <ble_pair_request_handler+0x164>)
1000dc78:	2100      	movs	r1, #0
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000dc7a:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000dc7c:	8910      	ldrh	r0, [r2, #8]
1000dc7e:	42a0      	cmp	r0, r4
1000dc80:	d10d      	bne.n	1000dc9e <ble_pair_request_handler+0x3a>
1000dc82:	0010      	movs	r0, r2
1000dc84:	305e      	adds	r0, #94	; 0x5e
1000dc86:	7800      	ldrb	r0, [r0, #0]
1000dc88:	2802      	cmp	r0, #2
1000dc8a:	d108      	bne.n	1000dc9e <ble_pair_request_handler+0x3a>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000dc8c:	014a      	lsls	r2, r1, #5
1000dc8e:	1a52      	subs	r2, r2, r1
1000dc90:	0095      	lsls	r5, r2, #2
1000dc92:	4a4d      	ldr	r2, [pc, #308]	; (1000ddc8 <ble_pair_request_handler+0x164>)
1000dc94:	1952      	adds	r2, r2, r5
1000dc96:	325e      	adds	r2, #94	; 0x5e
1000dc98:	2103      	movs	r1, #3
1000dc9a:	7011      	strb	r1, [r2, #0]
			break;
1000dc9c:	e005      	b.n	1000dcaa <ble_pair_request_handler+0x46>
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000dc9e:	3301      	adds	r3, #1
1000dca0:	b2db      	uxtb	r3, r3
1000dca2:	3101      	adds	r1, #1
1000dca4:	327c      	adds	r2, #124	; 0x7c
1000dca6:	2b05      	cmp	r3, #5
1000dca8:	d1e8      	bne.n	1000dc7c <ble_pair_request_handler+0x18>
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
1000dcaa:	aa01      	add	r2, sp, #4
1000dcac:	2100      	movs	r1, #0
1000dcae:	7211      	strb	r1, [r2, #8]
	features.bond = BLE_BOND_REQ;
1000dcb0:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = BLE_MITM_REQ;
1000dcb2:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = BLE_IO_CAPABALITIES;
1000dcb4:	2003      	movs	r0, #3
1000dcb6:	7010      	strb	r0, [r2, #0]
	features.oob_avaiable = BLE_OOB_REQ;
1000dcb8:	70d1      	strb	r1, [r2, #3]
	
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000dcba:	001e      	movs	r6, r3
1000dcbc:	015a      	lsls	r2, r3, #5
1000dcbe:	1ad2      	subs	r2, r2, r3
1000dcc0:	0092      	lsls	r2, r2, #2
1000dcc2:	4941      	ldr	r1, [pc, #260]	; (1000ddc8 <ble_pair_request_handler+0x164>)
1000dcc4:	5c52      	ldrb	r2, [r2, r1]
1000dcc6:	2a02      	cmp	r2, #2
1000dcc8:	d104      	bne.n	1000dcd4 <ble_pair_request_handler+0x70>
	{
		/* Distribution of IRK is required */
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000dcca:	aa01      	add	r2, sp, #4
1000dccc:	2103      	movs	r1, #3
1000dcce:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000dcd0:	71d1      	strb	r1, [r2, #7]
1000dcd2:	e003      	b.n	1000dcdc <ble_pair_request_handler+0x78>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000dcd4:	aa01      	add	r2, sp, #4
1000dcd6:	2101      	movs	r1, #1
1000dcd8:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000dcda:	71d1      	strb	r1, [r2, #7]
	}
			
	features.max_key_size = 16;
1000dcdc:	aa01      	add	r2, sp, #4
1000dcde:	2110      	movs	r1, #16
1000dce0:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
1000dce2:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000dce4:	0172      	lsls	r2, r6, #5
1000dce6:	1b92      	subs	r2, r2, r6
1000dce8:	0092      	lsls	r2, r2, #2
1000dcea:	4937      	ldr	r1, [pc, #220]	; (1000ddc8 <ble_pair_request_handler+0x164>)
1000dcec:	188a      	adds	r2, r1, r2
1000dcee:	7e12      	ldrb	r2, [r2, #24]
1000dcf0:	2a40      	cmp	r2, #64	; 0x40
1000dcf2:	d142      	bne.n	1000dd7a <ble_pair_request_handler+0x116>
1000dcf4:	015f      	lsls	r7, r3, #5
1000dcf6:	1afb      	subs	r3, r7, r3
1000dcf8:	009b      	lsls	r3, r3, #2
1000dcfa:	469b      	mov	fp, r3
1000dcfc:	001c      	movs	r4, r3
1000dcfe:	3460      	adds	r4, #96	; 0x60
1000dd00:	1864      	adds	r4, r4, r1
1000dd02:	465d      	mov	r5, fp
1000dd04:	3568      	adds	r5, #104	; 0x68
1000dd06:	186d      	adds	r5, r5, r1
1000dd08:	0027      	movs	r7, r4
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000dd0a:	4b30      	ldr	r3, [pc, #192]	; (1000ddcc <ble_pair_request_handler+0x168>)
1000dd0c:	469a      	mov	sl, r3
1000dd0e:	230f      	movs	r3, #15
1000dd10:	4699      	mov	r9, r3
1000dd12:	47d0      	blx	sl
1000dd14:	464b      	mov	r3, r9
1000dd16:	4018      	ands	r0, r3
1000dd18:	7038      	strb	r0, [r7, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000dd1a:	47d0      	blx	sl
1000dd1c:	464b      	mov	r3, r9
1000dd1e:	4018      	ands	r0, r3
1000dd20:	74b8      	strb	r0, [r7, #18]
1000dd22:	3701      	adds	r7, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000dd24:	42af      	cmp	r7, r5
1000dd26:	d1f4      	bne.n	1000dd12 <ble_pair_request_handler+0xae>
1000dd28:	465b      	mov	r3, fp
1000dd2a:	3370      	adds	r3, #112	; 0x70
1000dd2c:	4f26      	ldr	r7, [pc, #152]	; (1000ddc8 <ble_pair_request_handler+0x164>)
1000dd2e:	19df      	adds	r7, r3, r7
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000dd30:	4b26      	ldr	r3, [pc, #152]	; (1000ddcc <ble_pair_request_handler+0x168>)
1000dd32:	469a      	mov	sl, r3
1000dd34:	230f      	movs	r3, #15
1000dd36:	4699      	mov	r9, r3
1000dd38:	47d0      	blx	sl
1000dd3a:	464b      	mov	r3, r9
1000dd3c:	4018      	ands	r0, r3
1000dd3e:	7028      	strb	r0, [r5, #0]
1000dd40:	3501      	adds	r5, #1
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000dd42:	42bd      	cmp	r5, r7
1000dd44:	d1f8      	bne.n	1000dd38 <ble_pair_request_handler+0xd4>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		DBG_LOG_DEV("Generated LTK: ");
1000dd46:	4822      	ldr	r0, [pc, #136]	; (1000ddd0 <ble_pair_request_handler+0x16c>)
1000dd48:	4b22      	ldr	r3, [pc, #136]	; (1000ddd4 <ble_pair_request_handler+0x170>)
1000dd4a:	4798      	blx	r3
1000dd4c:	4822      	ldr	r0, [pc, #136]	; (1000ddd8 <ble_pair_request_handler+0x174>)
1000dd4e:	4b23      	ldr	r3, [pc, #140]	; (1000dddc <ble_pair_request_handler+0x178>)
1000dd50:	4798      	blx	r3
		for (i = 0; i < 16; i++)
		{
			DBG_LOG_CONT_DEV("0x%02X ", ble_dev_info[idx].host_ltk.key[i]);
1000dd52:	4d22      	ldr	r5, [pc, #136]	; (1000dddc <ble_pair_request_handler+0x178>)
1000dd54:	7821      	ldrb	r1, [r4, #0]
1000dd56:	4822      	ldr	r0, [pc, #136]	; (1000dde0 <ble_pair_request_handler+0x17c>)
1000dd58:	47a8      	blx	r5
1000dd5a:	3401      	adds	r4, #1
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		DBG_LOG_DEV("Generated LTK: ");
		for (i = 0; i < 16; i++)
1000dd5c:	42bc      	cmp	r4, r7
1000dd5e:	d1f9      	bne.n	1000dd54 <ble_pair_request_handler+0xf0>
		{
			DBG_LOG_CONT_DEV("0x%02X ", ble_dev_info[idx].host_ltk.key[i]);
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000dd60:	4b1a      	ldr	r3, [pc, #104]	; (1000ddcc <ble_pair_request_handler+0x168>)
1000dd62:	4798      	blx	r3
1000dd64:	0173      	lsls	r3, r6, #5
1000dd66:	1b9b      	subs	r3, r3, r6
1000dd68:	009b      	lsls	r3, r3, #2
1000dd6a:	4a17      	ldr	r2, [pc, #92]	; (1000ddc8 <ble_pair_request_handler+0x164>)
1000dd6c:	18d3      	adds	r3, r2, r3
1000dd6e:	001a      	movs	r2, r3
1000dd70:	3270      	adds	r2, #112	; 0x70
1000dd72:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000dd74:	337a      	adds	r3, #122	; 0x7a
1000dd76:	2210      	movs	r2, #16
1000dd78:	701a      	strb	r2, [r3, #0]
		/* Bonding information already exists */
		
	}

	/* Send pairing response */
	DBG_LOG_DEV("Sending pairing response");
1000dd7a:	4815      	ldr	r0, [pc, #84]	; (1000ddd0 <ble_pair_request_handler+0x16c>)
1000dd7c:	4b15      	ldr	r3, [pc, #84]	; (1000ddd4 <ble_pair_request_handler+0x170>)
1000dd7e:	4798      	blx	r3
1000dd80:	4818      	ldr	r0, [pc, #96]	; (1000dde4 <ble_pair_request_handler+0x180>)
1000dd82:	4b16      	ldr	r3, [pc, #88]	; (1000dddc <ble_pair_request_handler+0x178>)
1000dd84:	4798      	blx	r3

	if(at_ble_authenticate(pair_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000dd86:	0173      	lsls	r3, r6, #5
1000dd88:	1b9b      	subs	r3, r3, r6
1000dd8a:	009b      	lsls	r3, r3, #2
1000dd8c:	3360      	adds	r3, #96	; 0x60
1000dd8e:	4a0e      	ldr	r2, [pc, #56]	; (1000ddc8 <ble_pair_request_handler+0x164>)
1000dd90:	189a      	adds	r2, r3, r2
1000dd92:	4643      	mov	r3, r8
1000dd94:	8818      	ldrh	r0, [r3, #0]
1000dd96:	2300      	movs	r3, #0
1000dd98:	a901      	add	r1, sp, #4
1000dd9a:	4c13      	ldr	r4, [pc, #76]	; (1000dde8 <ble_pair_request_handler+0x184>)
1000dd9c:	47a0      	blx	r4
1000dd9e:	2800      	cmp	r0, #0
1000dda0:	d00a      	beq.n	1000ddb8 <ble_pair_request_handler+0x154>
	{
		features.bond = false;
1000dda2:	ab01      	add	r3, sp, #4
1000dda4:	2200      	movs	r2, #0
1000dda6:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000dda8:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Pair Request - Authentication Failed");
1000ddaa:	4809      	ldr	r0, [pc, #36]	; (1000ddd0 <ble_pair_request_handler+0x16c>)
1000ddac:	4b09      	ldr	r3, [pc, #36]	; (1000ddd4 <ble_pair_request_handler+0x170>)
1000ddae:	4798      	blx	r3
1000ddb0:	480e      	ldr	r0, [pc, #56]	; (1000ddec <ble_pair_request_handler+0x188>)
1000ddb2:	4b0a      	ldr	r3, [pc, #40]	; (1000dddc <ble_pair_request_handler+0x178>)
1000ddb4:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000ddb6:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000ddb8:	b005      	add	sp, #20
1000ddba:	bc3c      	pop	{r2, r3, r4, r5}
1000ddbc:	4690      	mov	r8, r2
1000ddbe:	4699      	mov	r9, r3
1000ddc0:	46a2      	mov	sl, r4
1000ddc2:	46ab      	mov	fp, r5
1000ddc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ddc6:	46c0      	nop			; (mov r8, r8)
1000ddc8:	10019d48 	.word	0x10019d48
1000ddcc:	10014e09 	.word	0x10014e09
1000ddd0:	10015f9c 	.word	0x10015f9c
1000ddd4:	10014df5 	.word	0x10014df5
1000ddd8:	10017498 	.word	0x10017498
1000dddc:	10014cd5 	.word	0x10014cd5
1000dde0:	100174a8 	.word	0x100174a8
1000dde4:	100174b0 	.word	0x100174b0
1000dde8:	10011131 	.word	0x10011131
1000ddec:	100174cc 	.word	0x100174cc

1000ddf0 <ble_pair_key_request_handler>:

/** @brief function handles pair key request */
at_ble_status_t ble_pair_key_request_handler (void *params)
{
1000ddf0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ddf2:	b085      	sub	sp, #20
1000ddf4:	0005      	movs	r5, r0
	at_ble_pair_key_request_t *pair_key;
	pair_key = (at_ble_pair_key_request_t *)params;
	/* Passkey has fixed value in this example MSB */
	uint8_t passkey[6]={'1','2','3','4','5','6'};
1000ddf6:	2206      	movs	r2, #6
1000ddf8:	493d      	ldr	r1, [pc, #244]	; (1000def0 <ble_pair_key_request_handler+0x100>)
1000ddfa:	a802      	add	r0, sp, #8
1000ddfc:	4e3d      	ldr	r6, [pc, #244]	; (1000def4 <ble_pair_key_request_handler+0x104>)
1000ddfe:	47b0      	blx	r6
	uint8_t idx = 0;
        uint8_t pin;
        
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
1000de00:	ac01      	add	r4, sp, #4
1000de02:	2204      	movs	r2, #4
1000de04:	0029      	movs	r1, r5
1000de06:	0020      	movs	r0, r4
1000de08:	47b0      	blx	r6
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
1000de0a:	78e3      	ldrb	r3, [r4, #3]
1000de0c:	2b00      	cmp	r3, #0
1000de0e:	d162      	bne.n	1000ded6 <ble_pair_key_request_handler+0xe6>
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000de10:	4839      	ldr	r0, [pc, #228]	; (1000def8 <ble_pair_key_request_handler+0x108>)
1000de12:	4b3a      	ldr	r3, [pc, #232]	; (1000defc <ble_pair_key_request_handler+0x10c>)
1000de14:	4798      	blx	r3
1000de16:	483a      	ldr	r0, [pc, #232]	; (1000df00 <ble_pair_key_request_handler+0x110>)
1000de18:	4b3a      	ldr	r3, [pc, #232]	; (1000df04 <ble_pair_key_request_handler+0x114>)
1000de1a:	4798      	blx	r3
1000de1c:	2600      	movs	r6, #0
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000de1e:	4c3a      	ldr	r4, [pc, #232]	; (1000df08 <ble_pair_key_request_handler+0x118>)
				return AT_BLE_FAILURE;
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
			  passkey[idx++] = pin;
			  DBG_LOG_CONT("%c", pin);
1000de20:	27ff      	movs	r7, #255	; 0xff
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000de22:	201e      	movs	r0, #30
1000de24:	47a0      	blx	r4
1000de26:	b2c3      	uxtb	r3, r0

			if (!pin) {
1000de28:	2b00      	cmp	r3, #0
1000de2a:	d11a      	bne.n	1000de62 <ble_pair_key_request_handler+0x72>
			DBG_LOG("Pin Timeout");
1000de2c:	4f32      	ldr	r7, [pc, #200]	; (1000def8 <ble_pair_key_request_handler+0x108>)
1000de2e:	0038      	movs	r0, r7
1000de30:	4e32      	ldr	r6, [pc, #200]	; (1000defc <ble_pair_key_request_handler+0x10c>)
1000de32:	47b0      	blx	r6
1000de34:	4835      	ldr	r0, [pc, #212]	; (1000df0c <ble_pair_key_request_handler+0x11c>)
1000de36:	4c33      	ldr	r4, [pc, #204]	; (1000df04 <ble_pair_key_request_handler+0x114>)
1000de38:	47a0      	blx	r4
				DBG_LOG("Disconnecting ...");
1000de3a:	0038      	movs	r0, r7
1000de3c:	47b0      	blx	r6
1000de3e:	4834      	ldr	r0, [pc, #208]	; (1000df10 <ble_pair_key_request_handler+0x120>)
1000de40:	47a0      	blx	r4
				if (!(at_ble_disconnect(pair_key->handle,
1000de42:	8828      	ldrh	r0, [r5, #0]
1000de44:	2113      	movs	r1, #19
1000de46:	4b33      	ldr	r3, [pc, #204]	; (1000df14 <ble_pair_key_request_handler+0x124>)
1000de48:	4798      	blx	r3
1000de4a:	0003      	movs	r3, r0
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
				}
				return AT_BLE_FAILURE;
1000de4c:	20e2      	movs	r0, #226	; 0xe2
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);

			if (!pin) {
			DBG_LOG("Pin Timeout");
				DBG_LOG("Disconnecting ...");
				if (!(at_ble_disconnect(pair_key->handle,
1000de4e:	2b00      	cmp	r3, #0
1000de50:	d04c      	beq.n	1000deec <ble_pair_key_request_handler+0xfc>
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
1000de52:	4829      	ldr	r0, [pc, #164]	; (1000def8 <ble_pair_key_request_handler+0x108>)
1000de54:	4b29      	ldr	r3, [pc, #164]	; (1000defc <ble_pair_key_request_handler+0x10c>)
1000de56:	4798      	blx	r3
1000de58:	482f      	ldr	r0, [pc, #188]	; (1000df18 <ble_pair_key_request_handler+0x128>)
1000de5a:	4b2a      	ldr	r3, [pc, #168]	; (1000df04 <ble_pair_key_request_handler+0x114>)
1000de5c:	4798      	blx	r3
				}
				return AT_BLE_FAILURE;
1000de5e:	20e2      	movs	r0, #226	; 0xe2
1000de60:	e044      	b.n	1000deec <ble_pair_key_request_handler+0xfc>
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
1000de62:	001a      	movs	r2, r3
1000de64:	3a30      	subs	r2, #48	; 0x30
1000de66:	2a09      	cmp	r2, #9
1000de68:	d8db      	bhi.n	1000de22 <ble_pair_key_request_handler+0x32>
			  passkey[idx++] = pin;
1000de6a:	aa02      	add	r2, sp, #8
1000de6c:	54b3      	strb	r3, [r6, r2]
			  DBG_LOG_CONT("%c", pin);
1000de6e:	4038      	ands	r0, r7
1000de70:	4b2a      	ldr	r3, [pc, #168]	; (1000df1c <ble_pair_key_request_handler+0x12c>)
1000de72:	4798      	blx	r3
1000de74:	3601      	adds	r6, #1
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
1000de76:	2e06      	cmp	r6, #6
1000de78:	d026      	beq.n	1000dec8 <ble_pair_key_request_handler+0xd8>
1000de7a:	e7d2      	b.n	1000de22 <ble_pair_key_request_handler+0x32>
          {
            DBG_LOG("Entered Pass-code:");
          }
          else
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
1000de7c:	481e      	ldr	r0, [pc, #120]	; (1000def8 <ble_pair_key_request_handler+0x108>)
1000de7e:	4b1f      	ldr	r3, [pc, #124]	; (1000defc <ble_pair_key_request_handler+0x10c>)
1000de80:	4798      	blx	r3
1000de82:	4827      	ldr	r0, [pc, #156]	; (1000df20 <ble_pair_key_request_handler+0x130>)
1000de84:	4b1f      	ldr	r3, [pc, #124]	; (1000df04 <ble_pair_key_request_handler+0x114>)
1000de86:	4798      	blx	r3
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000de88:	2400      	movs	r4, #0
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
1000de8a:	4e24      	ldr	r6, [pc, #144]	; (1000df1c <ble_pair_key_request_handler+0x12c>)
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
1000de8c:	ab02      	add	r3, sp, #8
                  DBG_LOG_CONT("%c",passkey[idx]);
1000de8e:	5ce0      	ldrb	r0, [r4, r3]
1000de90:	47b0      	blx	r6
1000de92:	3401      	adds	r4, #1
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
1000de94:	2c06      	cmp	r4, #6
1000de96:	d1f9      	bne.n	1000de8c <ble_pair_key_request_handler+0x9c>
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
          }		
          
          if(!((at_ble_pair_key_reply(pair_key->handle, pair_key_request.type, passkey)) == AT_BLE_SUCCESS))
1000de98:	ab01      	add	r3, sp, #4
1000de9a:	7899      	ldrb	r1, [r3, #2]
1000de9c:	8828      	ldrh	r0, [r5, #0]
1000de9e:	aa02      	add	r2, sp, #8
1000dea0:	4b20      	ldr	r3, [pc, #128]	; (1000df24 <ble_pair_key_request_handler+0x134>)
1000dea2:	4798      	blx	r3
1000dea4:	2800      	cmp	r0, #0
1000dea6:	d021      	beq.n	1000deec <ble_pair_key_request_handler+0xfc>
          {
                  DBG_LOG("Pair-key reply failed");
1000dea8:	4813      	ldr	r0, [pc, #76]	; (1000def8 <ble_pair_key_request_handler+0x108>)
1000deaa:	4b14      	ldr	r3, [pc, #80]	; (1000defc <ble_pair_key_request_handler+0x10c>)
1000deac:	4798      	blx	r3
1000deae:	481e      	ldr	r0, [pc, #120]	; (1000df28 <ble_pair_key_request_handler+0x138>)
1000deb0:	4b14      	ldr	r3, [pc, #80]	; (1000df04 <ble_pair_key_request_handler+0x114>)
1000deb2:	4798      	blx	r3
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000deb4:	2000      	movs	r0, #0
1000deb6:	e019      	b.n	1000deec <ble_pair_key_request_handler+0xfc>
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
1000deb8:	480f      	ldr	r0, [pc, #60]	; (1000def8 <ble_pair_key_request_handler+0x108>)
1000deba:	4b10      	ldr	r3, [pc, #64]	; (1000defc <ble_pair_key_request_handler+0x10c>)
1000debc:	4798      	blx	r3
1000debe:	481b      	ldr	r0, [pc, #108]	; (1000df2c <ble_pair_key_request_handler+0x13c>)
1000dec0:	4b10      	ldr	r3, [pc, #64]	; (1000df04 <ble_pair_key_request_handler+0x114>)
1000dec2:	4798      	blx	r3
		}
	}
	return AT_BLE_SUCCESS;	
1000dec4:	2000      	movs	r0, #0
1000dec6:	e011      	b.n	1000deec <ble_pair_key_request_handler+0xfc>
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
	   (pair_key_request.type == AT_BLE_PAIR_PASSKEY)) || (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY))
	{
          if(pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY)
          {
            DBG_LOG("Entered Pass-code:");
1000dec8:	480b      	ldr	r0, [pc, #44]	; (1000def8 <ble_pair_key_request_handler+0x108>)
1000deca:	4b0c      	ldr	r3, [pc, #48]	; (1000defc <ble_pair_key_request_handler+0x10c>)
1000decc:	4798      	blx	r3
1000dece:	4818      	ldr	r0, [pc, #96]	; (1000df30 <ble_pair_key_request_handler+0x140>)
1000ded0:	4b0c      	ldr	r3, [pc, #48]	; (1000df04 <ble_pair_key_request_handler+0x114>)
1000ded2:	4798      	blx	r3
1000ded4:	e7d8      	b.n	1000de88 <ble_pair_key_request_handler+0x98>
			} 
	  }
	}	
	
	/* Display passkey */
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
1000ded6:	ab01      	add	r3, sp, #4
1000ded8:	885a      	ldrh	r2, [r3, #2]
1000deda:	2380      	movs	r3, #128	; 0x80
1000dedc:	005b      	lsls	r3, r3, #1
1000dede:	429a      	cmp	r2, r3
1000dee0:	d0cc      	beq.n	1000de7c <ble_pair_key_request_handler+0x8c>
                  DBG_LOG("Pair-key reply failed");
          }
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
1000dee2:	ab01      	add	r3, sp, #4
1000dee4:	789b      	ldrb	r3, [r3, #2]
1000dee6:	2b01      	cmp	r3, #1
1000dee8:	d0e6      	beq.n	1000deb8 <ble_pair_key_request_handler+0xc8>
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000deea:	2000      	movs	r0, #0
}
1000deec:	b005      	add	sp, #20
1000deee:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000def0:	100170b4 	.word	0x100170b4
1000def4:	10014b7b 	.word	0x10014b7b
1000def8:	10015f9c 	.word	0x10015f9c
1000defc:	10014df5 	.word	0x10014df5
1000df00:	100174f4 	.word	0x100174f4
1000df04:	10014cd5 	.word	0x10014cd5
1000df08:	1000ec19 	.word	0x1000ec19
1000df0c:	1001751c 	.word	0x1001751c
1000df10:	10017528 	.word	0x10017528
1000df14:	10010739 	.word	0x10010739
1000df18:	100173d4 	.word	0x100173d4
1000df1c:	10014d09 	.word	0x10014d09
1000df20:	1001753c 	.word	0x1001753c
1000df24:	10011261 	.word	0x10011261
1000df28:	10017574 	.word	0x10017574
1000df2c:	1001758c 	.word	0x1001758c
1000df30:	100175a8 	.word	0x100175a8

1000df34 <ble_encryption_request_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption requests */
at_ble_status_t ble_encryption_request_handler(void *params)
{
1000df34:	b5f0      	push	{r4, r5, r6, r7, lr}
1000df36:	465f      	mov	r7, fp
1000df38:	4656      	mov	r6, sl
1000df3a:	464d      	mov	r5, r9
1000df3c:	b4e0      	push	{r5, r6, r7}
1000df3e:	0006      	movs	r6, r0
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000df40:	8800      	ldrh	r0, [r0, #0]
1000df42:	4b49      	ldr	r3, [pc, #292]	; (1000e068 <ble_encryption_request_handler+0x134>)
1000df44:	2200      	movs	r2, #0
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000df46:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000df48:	8919      	ldrh	r1, [r3, #8]
1000df4a:	4281      	cmp	r1, r0
1000df4c:	d137      	bne.n	1000dfbe <ble_encryption_request_handler+0x8a>
1000df4e:	0019      	movs	r1, r3
1000df50:	315e      	adds	r1, #94	; 0x5e
1000df52:	7809      	ldrb	r1, [r1, #0]
1000df54:	2901      	cmp	r1, #1
1000df56:	d932      	bls.n	1000dfbe <ble_encryption_request_handler+0x8a>
		(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE))
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000df58:	4f43      	ldr	r7, [pc, #268]	; (1000e068 <ble_encryption_request_handler+0x134>)
1000df5a:	0153      	lsls	r3, r2, #5
1000df5c:	1a9d      	subs	r5, r3, r2
1000df5e:	00ad      	lsls	r5, r5, #2
1000df60:	197d      	adds	r5, r7, r5
1000df62:	355e      	adds	r5, #94	; 0x5e
1000df64:	2306      	movs	r3, #6
1000df66:	702b      	strb	r3, [r5, #0]
			DBG_LOG_DEV("ENC-Req: Conn Handle Device Found:hdl:%d", enc_req->handle);
1000df68:	4840      	ldr	r0, [pc, #256]	; (1000e06c <ble_encryption_request_handler+0x138>)
1000df6a:	4b41      	ldr	r3, [pc, #260]	; (1000e070 <ble_encryption_request_handler+0x13c>)
1000df6c:	469a      	mov	sl, r3
1000df6e:	4798      	blx	r3
1000df70:	8831      	ldrh	r1, [r6, #0]
1000df72:	4840      	ldr	r0, [pc, #256]	; (1000e074 <ble_encryption_request_handler+0x140>)
1000df74:	4b40      	ldr	r3, [pc, #256]	; (1000e078 <ble_encryption_request_handler+0x144>)
1000df76:	4699      	mov	r9, r3
1000df78:	4798      	blx	r3
		}
	}
	
	if (device_found)
	{
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
1000df7a:	483c      	ldr	r0, [pc, #240]	; (1000e06c <ble_encryption_request_handler+0x138>)
1000df7c:	47d0      	blx	sl
1000df7e:	0163      	lsls	r3, r4, #5
1000df80:	1b1b      	subs	r3, r3, r4
1000df82:	009b      	lsls	r3, r3, #2
1000df84:	18ff      	adds	r7, r7, r3
1000df86:	2370      	movs	r3, #112	; 0x70
1000df88:	469b      	mov	fp, r3
1000df8a:	44bb      	add	fp, r7
1000df8c:	465b      	mov	r3, fp
1000df8e:	8819      	ldrh	r1, [r3, #0]
1000df90:	483a      	ldr	r0, [pc, #232]	; (1000e07c <ble_encryption_request_handler+0x148>)
1000df92:	47c8      	blx	r9
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
1000df94:	4835      	ldr	r0, [pc, #212]	; (1000e06c <ble_encryption_request_handler+0x138>)
1000df96:	47d0      	blx	sl
1000df98:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
1000df9a:	4839      	ldr	r0, [pc, #228]	; (1000e080 <ble_encryption_request_handler+0x14c>)
1000df9c:	47c8      	blx	r9
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
1000df9e:	4833      	ldr	r0, [pc, #204]	; (1000e06c <ble_encryption_request_handler+0x138>)
1000dfa0:	47d0      	blx	sl
1000dfa2:	8871      	ldrh	r1, [r6, #2]
1000dfa4:	4837      	ldr	r0, [pc, #220]	; (1000e084 <ble_encryption_request_handler+0x150>)
1000dfa6:	47c8      	blx	r9
		DBG_LOG_DEV("The index is %d",idx);
1000dfa8:	4830      	ldr	r0, [pc, #192]	; (1000e06c <ble_encryption_request_handler+0x138>)
1000dfaa:	47d0      	blx	sl
1000dfac:	0021      	movs	r1, r4
1000dfae:	4836      	ldr	r0, [pc, #216]	; (1000e088 <ble_encryption_request_handler+0x154>)
1000dfb0:	47c8      	blx	r9
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
1000dfb2:	465b      	mov	r3, fp
1000dfb4:	881a      	ldrh	r2, [r3, #0]
1000dfb6:	8873      	ldrh	r3, [r6, #2]
1000dfb8:	429a      	cmp	r2, r3
1000dfba:	d12a      	bne.n	1000e012 <ble_encryption_request_handler+0xde>
1000dfbc:	e006      	b.n	1000dfcc <ble_encryption_request_handler+0x98>
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000dfbe:	3401      	adds	r4, #1
1000dfc0:	b2e4      	uxtb	r4, r4
1000dfc2:	3201      	adds	r2, #1
1000dfc4:	337c      	adds	r3, #124	; 0x7c
1000dfc6:	2c05      	cmp	r4, #5
1000dfc8:	d1be      	bne.n	1000df48 <ble_encryption_request_handler+0x14>
1000dfca:	e022      	b.n	1000e012 <ble_encryption_request_handler+0xde>
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
		DBG_LOG_DEV("The index is %d",idx);
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
		&& !memcmp(&enc_req->nb[0],&ble_dev_info[idx].host_ltk.nb[0],8))
1000dfcc:	0161      	lsls	r1, r4, #5
1000dfce:	1b09      	subs	r1, r1, r4
1000dfd0:	0089      	lsls	r1, r1, #2
1000dfd2:	4b25      	ldr	r3, [pc, #148]	; (1000e068 <ble_encryption_request_handler+0x134>)
1000dfd4:	1859      	adds	r1, r3, r1
1000dfd6:	3172      	adds	r1, #114	; 0x72
1000dfd8:	1d30      	adds	r0, r6, #4
1000dfda:	2208      	movs	r2, #8
1000dfdc:	4b2b      	ldr	r3, [pc, #172]	; (1000e08c <ble_encryption_request_handler+0x158>)
1000dfde:	4798      	blx	r3
1000dfe0:	2800      	cmp	r0, #0
1000dfe2:	d116      	bne.n	1000e012 <ble_encryption_request_handler+0xde>
		{
			key_found = true;
			DBG_LOG_DEV("ENC-Req: Key Found");
1000dfe4:	4821      	ldr	r0, [pc, #132]	; (1000e06c <ble_encryption_request_handler+0x138>)
1000dfe6:	4b22      	ldr	r3, [pc, #136]	; (1000e070 <ble_encryption_request_handler+0x13c>)
1000dfe8:	4798      	blx	r3
1000dfea:	4829      	ldr	r0, [pc, #164]	; (1000e090 <ble_encryption_request_handler+0x15c>)
1000dfec:	4b22      	ldr	r3, [pc, #136]	; (1000e078 <ble_encryption_request_handler+0x144>)
1000dfee:	4798      	blx	r3
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
		return AT_BLE_FAILURE;
    }

	if(!(at_ble_encryption_request_reply(enc_req->handle, ble_dev_info[idx].bond_info.auth, key_found, &ble_dev_info[idx].host_ltk) == AT_BLE_SUCCESS))
1000dff0:	0162      	lsls	r2, r4, #5
1000dff2:	1b13      	subs	r3, r2, r4
1000dff4:	009b      	lsls	r3, r3, #2
1000dff6:	3360      	adds	r3, #96	; 0x60
1000dff8:	491b      	ldr	r1, [pc, #108]	; (1000e068 <ble_encryption_request_handler+0x134>)
1000dffa:	185b      	adds	r3, r3, r1
1000dffc:	1b12      	subs	r2, r2, r4
1000dffe:	0092      	lsls	r2, r2, #2
1000e000:	188a      	adds	r2, r1, r2
1000e002:	7d11      	ldrb	r1, [r2, #20]
1000e004:	8830      	ldrh	r0, [r6, #0]
1000e006:	2201      	movs	r2, #1
1000e008:	4c22      	ldr	r4, [pc, #136]	; (1000e094 <ble_encryption_request_handler+0x160>)
1000e00a:	47a0      	blx	r4
1000e00c:	1e04      	subs	r4, r0, #0
1000e00e:	d01e      	beq.n	1000e04e <ble_encryption_request_handler+0x11a>
1000e010:	e015      	b.n	1000e03e <ble_encryption_request_handler+0x10a>
	}
	
	
    if(key_found == false)
    {
	    DBG_LOG("Pairing information of peer device is not available.");
1000e012:	4f16      	ldr	r7, [pc, #88]	; (1000e06c <ble_encryption_request_handler+0x138>)
1000e014:	0038      	movs	r0, r7
1000e016:	4e16      	ldr	r6, [pc, #88]	; (1000e070 <ble_encryption_request_handler+0x13c>)
1000e018:	47b0      	blx	r6
1000e01a:	481f      	ldr	r0, [pc, #124]	; (1000e098 <ble_encryption_request_handler+0x164>)
1000e01c:	4d16      	ldr	r5, [pc, #88]	; (1000e078 <ble_encryption_request_handler+0x144>)
1000e01e:	47a8      	blx	r5
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
1000e020:	0038      	movs	r0, r7
1000e022:	47b0      	blx	r6
1000e024:	481d      	ldr	r0, [pc, #116]	; (1000e09c <ble_encryption_request_handler+0x168>)
1000e026:	47a8      	blx	r5
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
1000e028:	0163      	lsls	r3, r4, #5
1000e02a:	1b1c      	subs	r4, r3, r4
1000e02c:	00a4      	lsls	r4, r4, #2
1000e02e:	4b0e      	ldr	r3, [pc, #56]	; (1000e068 <ble_encryption_request_handler+0x134>)
1000e030:	191c      	adds	r4, r3, r4
1000e032:	8920      	ldrh	r0, [r4, #8]
1000e034:	2105      	movs	r1, #5
1000e036:	4b1a      	ldr	r3, [pc, #104]	; (1000e0a0 <ble_encryption_request_handler+0x16c>)
1000e038:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000e03a:	24e2      	movs	r4, #226	; 0xe2
1000e03c:	e00d      	b.n	1000e05a <ble_encryption_request_handler+0x126>
    }

	if(!(at_ble_encryption_request_reply(enc_req->handle, ble_dev_info[idx].bond_info.auth, key_found, &ble_dev_info[idx].host_ltk) == AT_BLE_SUCCESS))
	{
		DBG_LOG("Encryption Request Reply Failed");
1000e03e:	480b      	ldr	r0, [pc, #44]	; (1000e06c <ble_encryption_request_handler+0x138>)
1000e040:	4b0b      	ldr	r3, [pc, #44]	; (1000e070 <ble_encryption_request_handler+0x13c>)
1000e042:	4798      	blx	r3
1000e044:	4817      	ldr	r0, [pc, #92]	; (1000e0a4 <ble_encryption_request_handler+0x170>)
1000e046:	4b0c      	ldr	r3, [pc, #48]	; (1000e078 <ble_encryption_request_handler+0x144>)
1000e048:	4798      	blx	r3
	}
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
	}
	return AT_BLE_SUCCESS;
1000e04a:	2400      	movs	r4, #0
1000e04c:	e005      	b.n	1000e05a <ble_encryption_request_handler+0x126>
	{
		DBG_LOG("Encryption Request Reply Failed");
	}
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
1000e04e:	4807      	ldr	r0, [pc, #28]	; (1000e06c <ble_encryption_request_handler+0x138>)
1000e050:	4b07      	ldr	r3, [pc, #28]	; (1000e070 <ble_encryption_request_handler+0x13c>)
1000e052:	4798      	blx	r3
1000e054:	4814      	ldr	r0, [pc, #80]	; (1000e0a8 <ble_encryption_request_handler+0x174>)
1000e056:	4b08      	ldr	r3, [pc, #32]	; (1000e078 <ble_encryption_request_handler+0x144>)
1000e058:	4798      	blx	r3
	}
	return AT_BLE_SUCCESS;
}
1000e05a:	0020      	movs	r0, r4
1000e05c:	bc1c      	pop	{r2, r3, r4}
1000e05e:	4691      	mov	r9, r2
1000e060:	469a      	mov	sl, r3
1000e062:	46a3      	mov	fp, r4
1000e064:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e066:	46c0      	nop			; (mov r8, r8)
1000e068:	10019d48 	.word	0x10019d48
1000e06c:	10015f9c 	.word	0x10015f9c
1000e070:	10014df5 	.word	0x10014df5
1000e074:	100175bc 	.word	0x100175bc
1000e078:	10014cd5 	.word	0x10014cd5
1000e07c:	100175e8 	.word	0x100175e8
1000e080:	100175fc 	.word	0x100175fc
1000e084:	10017610 	.word	0x10017610
1000e088:	10017620 	.word	0x10017620
1000e08c:	10014b5d 	.word	0x10014b5d
1000e090:	10017630 	.word	0x10017630
1000e094:	10011395 	.word	0x10011395
1000e098:	10017644 	.word	0x10017644
1000e09c:	1001767c 	.word	0x1001767c
1000e0a0:	10010739 	.word	0x10010739
1000e0a4:	100176d4 	.word	0x100176d4
1000e0a8:	100176f4 	.word	0x100176f4

1000e0ac <ble_mgr_events_callback_handler>:
}

bool ble_mgr_events_callback_handler(ble_mgr_event_cb_t event_cb_type, 
									ble_mgr_event_t event_type,
									const ble_event_callback_t *ble_event_handler)
{
1000e0ac:	b530      	push	{r4, r5, lr}
	uint8_t idx;
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
1000e0ae:	2a00      	cmp	r2, #0
1000e0b0:	d047      	beq.n	1000e142 <ble_mgr_events_callback_handler+0x96>
	{
		switch(event_type)
1000e0b2:	2906      	cmp	r1, #6
1000e0b4:	d847      	bhi.n	1000e146 <ble_mgr_events_callback_handler+0x9a>
1000e0b6:	0089      	lsls	r1, r1, #2
1000e0b8:	4b28      	ldr	r3, [pc, #160]	; (1000e15c <ble_mgr_events_callback_handler+0xb0>)
1000e0ba:	585b      	ldr	r3, [r3, r1]
1000e0bc:	469f      	mov	pc, r3
			}
			break;
			
			case BLE_GATT_SERVER_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_server_event_cb;
1000e0be:	4b28      	ldr	r3, [pc, #160]	; (1000e160 <ble_mgr_events_callback_handler+0xb4>)
				max_event_handler = MAX_GATT_SERVER_SUBSCRIBERS;
1000e0c0:	2405      	movs	r4, #5
1000e0c2:	e00a      	b.n	1000e0da <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_GATT_HTPT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_htpt_event_cb;
1000e0c4:	4b27      	ldr	r3, [pc, #156]	; (1000e164 <ble_mgr_events_callback_handler+0xb8>)
				max_event_handler = MAX_HTPT_EVENT_SUBSCRIBERS;
1000e0c6:	2401      	movs	r4, #1
			}
			break;
1000e0c8:	e007      	b.n	1000e0da <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_DTM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_dtm_event_cb;
1000e0ca:	4b27      	ldr	r3, [pc, #156]	; (1000e168 <ble_mgr_events_callback_handler+0xbc>)
				max_event_handler = MAX_DTM_EVENT_SUBSCRIBERS;
1000e0cc:	2405      	movs	r4, #5
			}
			break;
1000e0ce:	e004      	b.n	1000e0da <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_CUSTOM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_custom_event_cb;
1000e0d0:	4b26      	ldr	r3, [pc, #152]	; (1000e16c <ble_mgr_events_callback_handler+0xc0>)
				max_event_handler = MAX_CUSTOM_EVENT_SUBSCRIBERS;
1000e0d2:	2401      	movs	r4, #1
			}
			break;
1000e0d4:	e001      	b.n	1000e0da <ble_mgr_events_callback_handler+0x2e>
	{
		switch(event_type)
		{
			case BLE_GAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gap_event_cb;
1000e0d6:	4b26      	ldr	r3, [pc, #152]	; (1000e170 <ble_mgr_events_callback_handler+0xc4>)
				max_event_handler = MAX_GAP_EVENT_SUBSCRIBERS;
1000e0d8:	2405      	movs	r4, #5
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
1000e0da:	2800      	cmp	r0, #0
1000e0dc:	d116      	bne.n	1000e10c <ble_mgr_events_callback_handler+0x60>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000e0de:	6819      	ldr	r1, [r3, #0]
1000e0e0:	2900      	cmp	r1, #0
1000e0e2:	d10b      	bne.n	1000e0fc <ble_mgr_events_callback_handler+0x50>
1000e0e4:	e006      	b.n	1000e0f4 <ble_mgr_events_callback_handler+0x48>
1000e0e6:	001d      	movs	r5, r3
1000e0e8:	3304      	adds	r3, #4
1000e0ea:	1f18      	subs	r0, r3, #4
1000e0ec:	6800      	ldr	r0, [r0, #0]
1000e0ee:	2800      	cmp	r0, #0
1000e0f0:	d106      	bne.n	1000e100 <ble_mgr_events_callback_handler+0x54>
1000e0f2:	e000      	b.n	1000e0f6 <ble_mgr_events_callback_handler+0x4a>
1000e0f4:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = ble_event_handler;
1000e0f6:	602a      	str	r2, [r5, #0]
						status = true; //Successfully registered to table
1000e0f8:	2101      	movs	r1, #1
						break;
1000e0fa:	e02c      	b.n	1000e156 <ble_mgr_events_callback_handler+0xaa>
1000e0fc:	3304      	adds	r3, #4
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000e0fe:	2100      	movs	r1, #0
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000e100:	3101      	adds	r1, #1
1000e102:	b2c9      	uxtb	r1, r1
1000e104:	42a1      	cmp	r1, r4
1000e106:	d3ee      	bcc.n	1000e0e6 <ble_mgr_events_callback_handler+0x3a>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000e108:	2100      	movs	r1, #0
1000e10a:	e024      	b.n	1000e156 <ble_mgr_events_callback_handler+0xaa>
1000e10c:	2100      	movs	r1, #0
						status = true; //Successfully registered to table
						break;
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
1000e10e:	2801      	cmp	r0, #1
1000e110:	d121      	bne.n	1000e156 <ble_mgr_events_callback_handler+0xaa>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000e112:	6819      	ldr	r1, [r3, #0]
1000e114:	428a      	cmp	r2, r1
1000e116:	d10c      	bne.n	1000e132 <ble_mgr_events_callback_handler+0x86>
1000e118:	e006      	b.n	1000e128 <ble_mgr_events_callback_handler+0x7c>
1000e11a:	001d      	movs	r5, r3
1000e11c:	3304      	adds	r3, #4
1000e11e:	1f18      	subs	r0, r3, #4
1000e120:	6800      	ldr	r0, [r0, #0]
1000e122:	4282      	cmp	r2, r0
1000e124:	d107      	bne.n	1000e136 <ble_mgr_events_callback_handler+0x8a>
1000e126:	e000      	b.n	1000e12a <ble_mgr_events_callback_handler+0x7e>
1000e128:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = NULL;
1000e12a:	2300      	movs	r3, #0
1000e12c:	602b      	str	r3, [r5, #0]
						status = true;//Successfully unregistered from table
1000e12e:	2101      	movs	r1, #1
						break;
1000e130:	e011      	b.n	1000e156 <ble_mgr_events_callback_handler+0xaa>
1000e132:	3304      	adds	r3, #4
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000e134:	2100      	movs	r1, #0
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000e136:	3101      	adds	r1, #1
1000e138:	b2c9      	uxtb	r1, r1
1000e13a:	42a1      	cmp	r1, r4
1000e13c:	d3ed      	bcc.n	1000e11a <ble_mgr_events_callback_handler+0x6e>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000e13e:	2100      	movs	r1, #0
1000e140:	e009      	b.n	1000e156 <ble_mgr_events_callback_handler+0xaa>
			}			
		}
	}
	else
	{
		status = false; //Invalid parameter
1000e142:	2100      	movs	r1, #0
1000e144:	e007      	b.n	1000e156 <ble_mgr_events_callback_handler+0xaa>
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
	{
		switch(event_type)
1000e146:	2100      	movs	r1, #0
1000e148:	e005      	b.n	1000e156 <ble_mgr_events_callback_handler+0xaa>
			}
			break;
			
			case BLE_GATT_CLIENT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_client_event_cb;
1000e14a:	4b0a      	ldr	r3, [pc, #40]	; (1000e174 <ble_mgr_events_callback_handler+0xc8>)
				max_event_handler = MAX_GATT_CLIENT_SUBSCRIBERS;
1000e14c:	2405      	movs	r4, #5
1000e14e:	e7c4      	b.n	1000e0da <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_L2CAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_l2cap_event_cb;
1000e150:	4b09      	ldr	r3, [pc, #36]	; (1000e178 <ble_mgr_events_callback_handler+0xcc>)
				max_event_handler = MAX_L2CAP_EVENT_SUBSCRIBERS;
1000e152:	2401      	movs	r4, #1
1000e154:	e7c1      	b.n	1000e0da <ble_mgr_events_callback_handler+0x2e>
	else
	{
		status = false; //Invalid parameter
	}
	return status;
}
1000e156:	0008      	movs	r0, r1
1000e158:	bd30      	pop	{r4, r5, pc}
1000e15a:	46c0      	nop			; (mov r8, r8)
1000e15c:	10016fa8 	.word	0x10016fa8
1000e160:	10019d34 	.word	0x10019d34
1000e164:	10019d30 	.word	0x10019d30
1000e168:	10019fb8 	.word	0x10019fb8
1000e16c:	1001a56c 	.word	0x1001a56c
1000e170:	10019fcc 	.word	0x10019fcc
1000e174:	10019fe0 	.word	0x10019fe0
1000e178:	1001a028 	.word	0x1001a028

1000e17c <ble_device_init>:
volatile uint32_t 	event_params_memory[1024] 	= {0};


/** @brief BLE device initialization */
void ble_device_init(at_ble_addr_t *addr)
{
1000e17c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e17e:	465f      	mov	r7, fp
1000e180:	4656      	mov	r6, sl
1000e182:	464d      	mov	r5, r9
1000e184:	4644      	mov	r4, r8
1000e186:	b4f0      	push	{r4, r5, r6, r7}
1000e188:	b091      	sub	sp, #68	; 0x44
1000e18a:	0005      	movs	r5, r0
static bool ble_scan_duplication_check(at_ble_scan_info_t * info);
#endif

static void init_global_var(void)
{
	ble_user_event_cb = 0;
1000e18c:	2400      	movs	r4, #0
1000e18e:	4b7e      	ldr	r3, [pc, #504]	; (1000e388 <ble_device_init+0x20c>)
1000e190:	601c      	str	r4, [r3, #0]
	
	memset(&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000e192:	2207      	movs	r2, #7
1000e194:	2100      	movs	r1, #0
1000e196:	487d      	ldr	r0, [pc, #500]	; (1000e38c <ble_device_init+0x210>)
1000e198:	4e7d      	ldr	r6, [pc, #500]	; (1000e390 <ble_device_init+0x214>)
1000e19a:	47b0      	blx	r6
	memset(&connected_state_info, 0, sizeof(at_ble_connected_t));
1000e19c:	2212      	movs	r2, #18
1000e19e:	2100      	movs	r1, #0
1000e1a0:	487c      	ldr	r0, [pc, #496]	; (1000e394 <ble_device_init+0x218>)
1000e1a2:	47b0      	blx	r6
		
#if defined ATT_DB_MEMORY
	memset(att_db_data, 0, sizeof(uint32_t) * BLE_ATT_DB_MEMORY_SIZE/4);
1000e1a4:	4a7c      	ldr	r2, [pc, #496]	; (1000e398 <ble_device_init+0x21c>)
1000e1a6:	2100      	movs	r1, #0
1000e1a8:	487c      	ldr	r0, [pc, #496]	; (1000e39c <ble_device_init+0x220>)
1000e1aa:	47b0      	blx	r6
#endif

	scan_response_count = 0;
1000e1ac:	4b7c      	ldr	r3, [pc, #496]	; (1000e3a0 <ble_device_init+0x224>)
1000e1ae:	701c      	strb	r4, [r3, #0]
	memset(scan_info, 0, sizeof(scan_info));
1000e1b0:	22cd      	movs	r2, #205	; 0xcd
1000e1b2:	0092      	lsls	r2, r2, #2
1000e1b4:	2100      	movs	r1, #0
1000e1b6:	487b      	ldr	r0, [pc, #492]	; (1000e3a4 <ble_device_init+0x228>)
1000e1b8:	47b0      	blx	r6

	event = AT_BLE_UNDEFINED_EVENT;
1000e1ba:	4b7b      	ldr	r3, [pc, #492]	; (1000e3a8 <ble_device_init+0x22c>)
1000e1bc:	701c      	strb	r4, [r3, #0]
	memset(ble_event_params, 0, BLE_EVENT_PARAM_MAX_SIZE);
1000e1be:	2283      	movs	r2, #131	; 0x83
1000e1c0:	0092      	lsls	r2, r2, #2
1000e1c2:	2100      	movs	r1, #0
1000e1c4:	4879      	ldr	r0, [pc, #484]	; (1000e3ac <ble_device_init+0x230>)
1000e1c6:	47b0      	blx	r6
{
	uint8_t idx;	
	char *dev_name = NULL;
	init_global_var();

	memset((uint8_t *)event_pool_memory, 0, sizeof(event_pool_memory));
1000e1c8:	4b79      	ldr	r3, [pc, #484]	; (1000e3b0 <ble_device_init+0x234>)
1000e1ca:	469b      	mov	fp, r3
1000e1cc:	2380      	movs	r3, #128	; 0x80
1000e1ce:	00db      	lsls	r3, r3, #3
1000e1d0:	469a      	mov	sl, r3
1000e1d2:	001a      	movs	r2, r3
1000e1d4:	2100      	movs	r1, #0
1000e1d6:	4658      	mov	r0, fp
1000e1d8:	47b0      	blx	r6
	memset((uint8_t *)event_params_memory, 0, sizeof(event_params_memory));
1000e1da:	4b76      	ldr	r3, [pc, #472]	; (1000e3b4 <ble_device_init+0x238>)
1000e1dc:	4699      	mov	r9, r3
1000e1de:	2380      	movs	r3, #128	; 0x80
1000e1e0:	015b      	lsls	r3, r3, #5
1000e1e2:	4698      	mov	r8, r3
1000e1e4:	001a      	movs	r2, r3
1000e1e6:	2100      	movs	r1, #0
1000e1e8:	4648      	mov	r0, r9
1000e1ea:	47b0      	blx	r6

	memset(&pf_cfg, 0, sizeof(pf_cfg));
1000e1ec:	4f72      	ldr	r7, [pc, #456]	; (1000e3b8 <ble_device_init+0x23c>)
1000e1ee:	221c      	movs	r2, #28
1000e1f0:	2100      	movs	r1, #0
1000e1f2:	0038      	movs	r0, r7
1000e1f4:	47b0      	blx	r6

	pf_cfg.event_mem_pool.memStartAdd        = (uint8_t *)event_pool_memory;
1000e1f6:	465b      	mov	r3, fp
1000e1f8:	60bb      	str	r3, [r7, #8]
	pf_cfg.event_mem_pool.memSize            = sizeof(event_pool_memory);
1000e1fa:	4653      	mov	r3, sl
1000e1fc:	60fb      	str	r3, [r7, #12]
	pf_cfg.event_params_mem_pool.memStartAdd = (uint8_t *)event_params_memory;
1000e1fe:	464b      	mov	r3, r9
1000e200:	613b      	str	r3, [r7, #16]
	pf_cfg.event_params_mem_pool.memSize     = sizeof(event_params_memory);
1000e202:	4643      	mov	r3, r8
1000e204:	617b      	str	r3, [r7, #20]

	/* Initialize the BLE Event callbacks */
	for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gap_event_cb[idx] = NULL;
1000e206:	4b6d      	ldr	r3, [pc, #436]	; (1000e3bc <ble_device_init+0x240>)
1000e208:	601c      	str	r4, [r3, #0]
1000e20a:	605c      	str	r4, [r3, #4]
1000e20c:	609c      	str	r4, [r3, #8]
1000e20e:	60dc      	str	r4, [r3, #12]
1000e210:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_client_event_cb[idx] = NULL;
1000e212:	4b6b      	ldr	r3, [pc, #428]	; (1000e3c0 <ble_device_init+0x244>)
1000e214:	601c      	str	r4, [r3, #0]
1000e216:	605c      	str	r4, [r3, #4]
1000e218:	609c      	str	r4, [r3, #8]
1000e21a:	60dc      	str	r4, [r3, #12]
1000e21c:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_server_event_cb[idx] = NULL;
1000e21e:	4b69      	ldr	r3, [pc, #420]	; (1000e3c4 <ble_device_init+0x248>)
1000e220:	601c      	str	r4, [r3, #0]
1000e222:	605c      	str	r4, [r3, #4]
1000e224:	609c      	str	r4, [r3, #8]
1000e226:	60dc      	str	r4, [r3, #12]
1000e228:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_l2cap_event_cb[idx] = NULL;
1000e22a:	4b67      	ldr	r3, [pc, #412]	; (1000e3c8 <ble_device_init+0x24c>)
1000e22c:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_htpt_event_cb[idx] = NULL;
1000e22e:	4b67      	ldr	r3, [pc, #412]	; (1000e3cc <ble_device_init+0x250>)
1000e230:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_dtm_event_cb[idx] = NULL;
1000e232:	4b67      	ldr	r3, [pc, #412]	; (1000e3d0 <ble_device_init+0x254>)
1000e234:	601c      	str	r4, [r3, #0]
1000e236:	605c      	str	r4, [r3, #4]
1000e238:	609c      	str	r4, [r3, #8]
1000e23a:	60dc      	str	r4, [r3, #12]
1000e23c:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_custom_event_cb[idx] = NULL;
1000e23e:	4b65      	ldr	r3, [pc, #404]	; (1000e3d4 <ble_device_init+0x258>)
1000e240:	601c      	str	r4, [r3, #0]
1000e242:	4c65      	ldr	r4, [pc, #404]	; (1000e3d8 <ble_device_init+0x25c>)
1000e244:	239b      	movs	r3, #155	; 0x9b
1000e246:	009b      	lsls	r3, r3, #2
1000e248:	4698      	mov	r8, r3
1000e24a:	44a0      	add	r8, r4
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000e24c:	4f50      	ldr	r7, [pc, #320]	; (1000e390 <ble_device_init+0x214>)
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000e24e:	2640      	movs	r6, #64	; 0x40
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000e250:	227c      	movs	r2, #124	; 0x7c
1000e252:	2100      	movs	r1, #0
1000e254:	0020      	movs	r0, r4
1000e256:	47b8      	blx	r7
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000e258:	0023      	movs	r3, r4
1000e25a:	335e      	adds	r3, #94	; 0x5e
1000e25c:	2200      	movs	r2, #0
1000e25e:	701a      	strb	r2, [r3, #0]
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000e260:	7626      	strb	r6, [r4, #24]
1000e262:	347c      	adds	r4, #124	; 0x7c
	{
		ble_mgr_custom_event_cb[idx] = NULL;
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000e264:	45a0      	cmp	r8, r4
1000e266:	d1f3      	bne.n	1000e250 <ble_device_init+0xd4>
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
    }
	/* Need to reset the count to 0 for storing it only in SRAM */
	ble_device_count = 0; 
1000e268:	4b5c      	ldr	r3, [pc, #368]	; (1000e3dc <ble_device_init+0x260>)
1000e26a:	701a      	strb	r2, [r3, #0]
	
	
#if defined ATT_DB_MEMORY
	pf_cfg.memPool.memSize = BLE_ATT_DB_MEMORY_SIZE;
1000e26c:	4c52      	ldr	r4, [pc, #328]	; (1000e3b8 <ble_device_init+0x23c>)
1000e26e:	4b4a      	ldr	r3, [pc, #296]	; (1000e398 <ble_device_init+0x21c>)
1000e270:	6063      	str	r3, [r4, #4]
	pf_cfg.memPool.memStartAdd = (uint8_t *)att_db_data;
1000e272:	4b4a      	ldr	r3, [pc, #296]	; (1000e39c <ble_device_init+0x220>)
1000e274:	6023      	str	r3, [r4, #0]

/* Initialize the BLE */
static void ble_init(at_ble_init_config_t * args)
{
	/* Initialize the platform */
	DBG_LOG("[ble_init]\t\t\tInitializing SAMB11");
1000e276:	485a      	ldr	r0, [pc, #360]	; (1000e3e0 <ble_device_init+0x264>)
1000e278:	4b5a      	ldr	r3, [pc, #360]	; (1000e3e4 <ble_device_init+0x268>)
1000e27a:	4798      	blx	r3
1000e27c:	485a      	ldr	r0, [pc, #360]	; (1000e3e8 <ble_device_init+0x26c>)
1000e27e:	4b5b      	ldr	r3, [pc, #364]	; (1000e3ec <ble_device_init+0x270>)
1000e280:	4798      	blx	r3
	
	/* Init BLE device */
	if(at_ble_init(args) != AT_BLE_SUCCESS)
1000e282:	0020      	movs	r0, r4
1000e284:	4b5a      	ldr	r3, [pc, #360]	; (1000e3f0 <ble_device_init+0x274>)
1000e286:	4798      	blx	r3
1000e288:	2800      	cmp	r0, #0
1000e28a:	d00b      	beq.n	1000e2a4 <ble_device_init+0x128>
	{
		DBG_LOG("[ble_init]\t\tSAMB11 Initialization failed");
1000e28c:	4e54      	ldr	r6, [pc, #336]	; (1000e3e0 <ble_device_init+0x264>)
1000e28e:	0030      	movs	r0, r6
1000e290:	4d54      	ldr	r5, [pc, #336]	; (1000e3e4 <ble_device_init+0x268>)
1000e292:	47a8      	blx	r5
1000e294:	4857      	ldr	r0, [pc, #348]	; (1000e3f4 <ble_device_init+0x278>)
1000e296:	4c55      	ldr	r4, [pc, #340]	; (1000e3ec <ble_device_init+0x270>)
1000e298:	47a0      	blx	r4
		DBG_LOG("[ble_init]\t\tPlease check the power and connection / hardware connector");	
1000e29a:	0030      	movs	r0, r6
1000e29c:	47a8      	blx	r5
1000e29e:	4856      	ldr	r0, [pc, #344]	; (1000e3f8 <ble_device_init+0x27c>)
1000e2a0:	47a0      	blx	r4
1000e2a2:	e7fe      	b.n	1000e2a2 <ble_device_init+0x126>
#endif
	
	ble_init(&pf_cfg);

	/* Register it in first index of callback handler */
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, 
1000e2a4:	4a55      	ldr	r2, [pc, #340]	; (1000e3fc <ble_device_init+0x280>)
1000e2a6:	2100      	movs	r1, #0
1000e2a8:	2000      	movs	r0, #0
1000e2aa:	4c55      	ldr	r4, [pc, #340]	; (1000e400 <ble_device_init+0x284>)
1000e2ac:	47a0      	blx	r4
									BLE_GAP_EVENT_TYPE, 
									ble_mgr_gap_handle);
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
1000e2ae:	4a55      	ldr	r2, [pc, #340]	; (1000e404 <ble_device_init+0x288>)
1000e2b0:	2102      	movs	r1, #2
1000e2b2:	2000      	movs	r0, #0
1000e2b4:	47a0      	blx	r4
{
	if ((name == NULL) || (name_len < 1))
	{
		return AT_BLE_INVALID_PARAM;
	}
	return at_ble_device_name_set(name, name_len);
1000e2b6:	2109      	movs	r1, #9
1000e2b8:	4853      	ldr	r0, [pc, #332]	; (1000e408 <ble_device_init+0x28c>)
1000e2ba:	4b54      	ldr	r3, [pc, #336]	; (1000e40c <ble_device_init+0x290>)
1000e2bc:	4798      	blx	r3
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
									BLE_GATT_SERVER_EVENT_TYPE,
									ble_mgr_gatt_server_handle);
									
	dev_name = (char *)BLE_DEVICE_NAME;
	if (ble_set_device_name((uint8_t *)dev_name, strlen(dev_name)) != AT_BLE_SUCCESS)
1000e2be:	2800      	cmp	r0, #0
1000e2c0:	d005      	beq.n	1000e2ce <ble_device_init+0x152>
	{
		DBG_LOG("Device name set failed");
1000e2c2:	4847      	ldr	r0, [pc, #284]	; (1000e3e0 <ble_device_init+0x264>)
1000e2c4:	4b47      	ldr	r3, [pc, #284]	; (1000e3e4 <ble_device_init+0x268>)
1000e2c6:	4798      	blx	r3
1000e2c8:	4851      	ldr	r0, [pc, #324]	; (1000e410 <ble_device_init+0x294>)
1000e2ca:	4b48      	ldr	r3, [pc, #288]	; (1000e3ec <ble_device_init+0x270>)
1000e2cc:	4798      	blx	r3

/* Set BLE Address and device configuration, If address is NULL then it will use BD public address */
static void ble_set_dev_config(at_ble_addr_t *addr)
{
	at_ble_dev_config_t stDevConfig;
	at_ble_addr_t address = {AT_BLE_ADDRESS_PUBLIC, {0xAB, 0xCD, 0xEF, 0xAB, 0xCD, 0xEF}};
1000e2ce:	2207      	movs	r2, #7
1000e2d0:	4950      	ldr	r1, [pc, #320]	; (1000e414 <ble_device_init+0x298>)
1000e2d2:	3108      	adds	r1, #8
1000e2d4:	a804      	add	r0, sp, #16
1000e2d6:	4b50      	ldr	r3, [pc, #320]	; (1000e418 <ble_device_init+0x29c>)
1000e2d8:	4798      	blx	r3
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
1000e2da:	2226      	movs	r2, #38	; 0x26
1000e2dc:	2100      	movs	r1, #0
1000e2de:	a806      	add	r0, sp, #24
1000e2e0:	4b2b      	ldr	r3, [pc, #172]	; (1000e390 <ble_device_init+0x214>)
1000e2e2:	4798      	blx	r3
	
	if (addr == NULL)
1000e2e4:	2d00      	cmp	r5, #0
1000e2e6:	d10c      	bne.n	1000e302 <ble_device_init+0x186>
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000e2e8:	a804      	add	r0, sp, #16
1000e2ea:	4b4c      	ldr	r3, [pc, #304]	; (1000e41c <ble_device_init+0x2a0>)
1000e2ec:	4798      	blx	r3
		{
			DBG_LOG("[ble_set_dev_config]\t\tBD address get failed");
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000e2ee:	ad04      	add	r5, sp, #16
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
	
	if (addr == NULL)
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000e2f0:	2800      	cmp	r0, #0
1000e2f2:	d006      	beq.n	1000e302 <ble_device_init+0x186>
		{
			DBG_LOG("[ble_set_dev_config]\t\tBD address get failed");
1000e2f4:	483a      	ldr	r0, [pc, #232]	; (1000e3e0 <ble_device_init+0x264>)
1000e2f6:	4b3b      	ldr	r3, [pc, #236]	; (1000e3e4 <ble_device_init+0x268>)
1000e2f8:	4798      	blx	r3
1000e2fa:	4849      	ldr	r0, [pc, #292]	; (1000e420 <ble_device_init+0x2a4>)
1000e2fc:	4b3b      	ldr	r3, [pc, #236]	; (1000e3ec <ble_device_init+0x270>)
1000e2fe:	4798      	blx	r3
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000e300:	ad04      	add	r5, sp, #16
	}
	
	DBG_LOG("[ble_set_dev_config]\t\tBD Address:0x%02X%02X%02X%02X%02X%02X, Address Type:%d",
1000e302:	4837      	ldr	r0, [pc, #220]	; (1000e3e0 <ble_device_init+0x264>)
1000e304:	4b37      	ldr	r3, [pc, #220]	; (1000e3e4 <ble_device_init+0x268>)
1000e306:	4798      	blx	r3
1000e308:	792b      	ldrb	r3, [r5, #4]
1000e30a:	796a      	ldrb	r2, [r5, #5]
1000e30c:	79a9      	ldrb	r1, [r5, #6]
1000e30e:	7828      	ldrb	r0, [r5, #0]
1000e310:	9003      	str	r0, [sp, #12]
1000e312:	7868      	ldrb	r0, [r5, #1]
1000e314:	9002      	str	r0, [sp, #8]
1000e316:	78a8      	ldrb	r0, [r5, #2]
1000e318:	9001      	str	r0, [sp, #4]
1000e31a:	78e8      	ldrb	r0, [r5, #3]
1000e31c:	9000      	str	r0, [sp, #0]
1000e31e:	4841      	ldr	r0, [pc, #260]	; (1000e424 <ble_device_init+0x2a8>)
1000e320:	4c32      	ldr	r4, [pc, #200]	; (1000e3ec <ble_device_init+0x270>)
1000e322:	47a0      	blx	r4
	addr->addr[1],
	addr->addr[0], addr->type);
	
	/* Set device configuration */
	/* Device role */
	stDevConfig.role = (at_ble_dev_role_t)BLE_DEVICE_ROLE;
1000e324:	ac06      	add	r4, sp, #24
1000e326:	230a      	movs	r3, #10
1000e328:	7023      	strb	r3, [r4, #0]
	/* device renew duration */
	stDevConfig.renew_dur = AT_RENEW_DUR_VAL_MIN;
1000e32a:	4b3f      	ldr	r3, [pc, #252]	; (1000e428 <ble_device_init+0x2ac>)
1000e32c:	8063      	strh	r3, [r4, #2]
	/* device address type */
	memcpy((uint8_t *)&stDevConfig.address, (uint8_t *)addr, sizeof(at_ble_addr_t));
1000e32e:	2207      	movs	r2, #7
1000e330:	0029      	movs	r1, r5
1000e332:	a807      	add	r0, sp, #28
1000e334:	4b38      	ldr	r3, [pc, #224]	; (1000e418 <ble_device_init+0x29c>)
1000e336:	4798      	blx	r3
	/* Attributes */
	stDevConfig.att_cfg.b2NamePerm = AT_BLE_WRITE_DISABLE;
1000e338:	2300      	movs	r3, #0
1000e33a:	76e3      	strb	r3, [r4, #27]
	stDevConfig.att_cfg.b2AppearancePerm = AT_BLE_WRITE_DISABLE;
1000e33c:	7723      	strb	r3, [r4, #28]
	stDevConfig.att_cfg.b1EnableSpcs = 0;
1000e33e:	7763      	strb	r3, [r4, #29]
	stDevConfig.att_cfg.b1EnableServiceChanged = 0;
1000e340:	77a3      	strb	r3, [r4, #30]
	stDevConfig.att_cfg.b2Rfu = AT_BLE_WRITE_DISABLE;
1000e342:	77e3      	strb	r3, [r4, #31]
	/* Handles */
	stDevConfig.gap_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000e344:	8423      	strh	r3, [r4, #32]
	stDevConfig.gatt_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000e346:	8463      	strh	r3, [r4, #34]	; 0x22
	/* MTU */
	stDevConfig.max_mtu = AT_MTU_VAL_RECOMMENDED;
1000e348:	2380      	movs	r3, #128	; 0x80
1000e34a:	009b      	lsls	r3, r3, #2
1000e34c:	84a3      	strh	r3, [r4, #36]	; 0x24
	
	if(at_ble_set_dev_config(&stDevConfig) != AT_BLE_SUCCESS)
1000e34e:	0020      	movs	r0, r4
1000e350:	4b36      	ldr	r3, [pc, #216]	; (1000e42c <ble_device_init+0x2b0>)
1000e352:	4798      	blx	r3
1000e354:	2800      	cmp	r0, #0
1000e356:	d005      	beq.n	1000e364 <ble_device_init+0x1e8>
	{
		DBG_LOG("[ble_set_dev_config]\tSet BLE Device configuration failed");
1000e358:	4821      	ldr	r0, [pc, #132]	; (1000e3e0 <ble_device_init+0x264>)
1000e35a:	4b22      	ldr	r3, [pc, #136]	; (1000e3e4 <ble_device_init+0x268>)
1000e35c:	4798      	blx	r3
1000e35e:	4834      	ldr	r0, [pc, #208]	; (1000e430 <ble_device_init+0x2b4>)
1000e360:	4b22      	ldr	r3, [pc, #136]	; (1000e3ec <ble_device_init+0x270>)
1000e362:	4798      	blx	r3
	}
	
	if (at_ble_addr_set(addr) != AT_BLE_SUCCESS)
1000e364:	0028      	movs	r0, r5
1000e366:	4b33      	ldr	r3, [pc, #204]	; (1000e434 <ble_device_init+0x2b8>)
1000e368:	4798      	blx	r3
1000e36a:	2800      	cmp	r0, #0
1000e36c:	d005      	beq.n	1000e37a <ble_device_init+0x1fe>
	{
		DBG_LOG("[ble_set_dev_config]\tSet BLE Device Address failed");
1000e36e:	481c      	ldr	r0, [pc, #112]	; (1000e3e0 <ble_device_init+0x264>)
1000e370:	4b1c      	ldr	r3, [pc, #112]	; (1000e3e4 <ble_device_init+0x268>)
1000e372:	4798      	blx	r3
1000e374:	4830      	ldr	r0, [pc, #192]	; (1000e438 <ble_device_init+0x2bc>)
1000e376:	4b1d      	ldr	r3, [pc, #116]	; (1000e3ec <ble_device_init+0x270>)
1000e378:	4798      	blx	r3
	{
		DBG_LOG("Device name set failed");
	}
	
	ble_set_dev_config(addr);	
}
1000e37a:	b011      	add	sp, #68	; 0x44
1000e37c:	bc3c      	pop	{r2, r3, r4, r5}
1000e37e:	4690      	mov	r8, r2
1000e380:	4699      	mov	r9, r3
1000e382:	46a2      	mov	sl, r4
1000e384:	46ab      	mov	fp, r5
1000e386:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e388:	100188b8 	.word	0x100188b8
1000e38c:	100188c0 	.word	0x100188c0
1000e390:	10014b8d 	.word	0x10014b8d
1000e394:	10019ff4 	.word	0x10019ff4
1000e398:	000004e2 	.word	0x000004e2
1000e39c:	100183d8 	.word	0x100183d8
1000e3a0:	100188bc 	.word	0x100188bc
1000e3a4:	1001a02c 	.word	0x1001a02c
1000e3a8:	1001a024 	.word	0x1001a024
1000e3ac:	1001a360 	.word	0x1001a360
1000e3b0:	10017fd8 	.word	0x10017fd8
1000e3b4:	100188c8 	.word	0x100188c8
1000e3b8:	1001a008 	.word	0x1001a008
1000e3bc:	10019fcc 	.word	0x10019fcc
1000e3c0:	10019fe0 	.word	0x10019fe0
1000e3c4:	10019d34 	.word	0x10019d34
1000e3c8:	1001a028 	.word	0x1001a028
1000e3cc:	10019d30 	.word	0x10019d30
1000e3d0:	10019fb8 	.word	0x10019fb8
1000e3d4:	1001a56c 	.word	0x1001a56c
1000e3d8:	10019d48 	.word	0x10019d48
1000e3dc:	10019fb4 	.word	0x10019fb4
1000e3e0:	10015f9c 	.word	0x10015f9c
1000e3e4:	10014df5 	.word	0x10014df5
1000e3e8:	10017710 	.word	0x10017710
1000e3ec:	10014cd5 	.word	0x10014cd5
1000e3f0:	10010345 	.word	0x10010345
1000e3f4:	10017734 	.word	0x10017734
1000e3f8:	10017760 	.word	0x10017760
1000e3fc:	10017b10 	.word	0x10017b10
1000e400:	1000e0ad 	.word	0x1000e0ad
1000e404:	100170c4 	.word	0x100170c4
1000e408:	100177a8 	.word	0x100177a8
1000e40c:	1001025d 	.word	0x1001025d
1000e410:	100177b4 	.word	0x100177b4
1000e414:	100170b4 	.word	0x100170b4
1000e418:	10014b7b 	.word	0x10014b7b
1000e41c:	10010291 	.word	0x10010291
1000e420:	100177cc 	.word	0x100177cc
1000e424:	100177f8 	.word	0x100177f8
1000e428:	00003a98 	.word	0x00003a98
1000e42c:	100102b5 	.word	0x100102b5
1000e430:	10017848 	.word	0x10017848
1000e434:	100104f9 	.word	0x100104f9
1000e438:	10017884 	.word	0x10017884

1000e43c <ble_send_slave_sec_request>:
	return AT_BLE_FAILURE;
}

/** @brief function to send slave security request */
at_ble_status_t ble_send_slave_sec_request(at_ble_handle_t conn_handle)
{
1000e43c:	b510      	push	{r4, lr}
	#if BLE_PAIR_ENABLE
		if (at_ble_send_slave_sec_request(conn_handle, BLE_MITM_REQ, BLE_BOND_REQ) == AT_BLE_SUCCESS)
1000e43e:	2200      	movs	r2, #0
1000e440:	2100      	movs	r1, #0
1000e442:	4b0a      	ldr	r3, [pc, #40]	; (1000e46c <ble_send_slave_sec_request+0x30>)
1000e444:	4798      	blx	r3
1000e446:	1e04      	subs	r4, r0, #0
1000e448:	d106      	bne.n	1000e458 <ble_send_slave_sec_request+0x1c>
		{
			DBG_LOG_DEV("Slave security request successful");
1000e44a:	4809      	ldr	r0, [pc, #36]	; (1000e470 <ble_send_slave_sec_request+0x34>)
1000e44c:	4b09      	ldr	r3, [pc, #36]	; (1000e474 <ble_send_slave_sec_request+0x38>)
1000e44e:	4798      	blx	r3
1000e450:	4809      	ldr	r0, [pc, #36]	; (1000e478 <ble_send_slave_sec_request+0x3c>)
1000e452:	4b0a      	ldr	r3, [pc, #40]	; (1000e47c <ble_send_slave_sec_request+0x40>)
1000e454:	4798      	blx	r3
			return AT_BLE_SUCCESS;
1000e456:	e006      	b.n	1000e466 <ble_send_slave_sec_request+0x2a>
		}
		else
		{
			DBG_LOG("Slave security request failed");
1000e458:	4805      	ldr	r0, [pc, #20]	; (1000e470 <ble_send_slave_sec_request+0x34>)
1000e45a:	4b06      	ldr	r3, [pc, #24]	; (1000e474 <ble_send_slave_sec_request+0x38>)
1000e45c:	4798      	blx	r3
1000e45e:	4808      	ldr	r0, [pc, #32]	; (1000e480 <ble_send_slave_sec_request+0x44>)
1000e460:	4b06      	ldr	r3, [pc, #24]	; (1000e47c <ble_send_slave_sec_request+0x40>)
1000e462:	4798      	blx	r3
		}
	#endif
	return AT_BLE_FAILURE;
1000e464:	24e2      	movs	r4, #226	; 0xe2
}
1000e466:	0020      	movs	r0, r4
1000e468:	bd10      	pop	{r4, pc}
1000e46a:	46c0      	nop			; (mov r8, r8)
1000e46c:	100112dd 	.word	0x100112dd
1000e470:	10015f9c 	.word	0x10015f9c
1000e474:	10014df5 	.word	0x10014df5
1000e478:	100178d4 	.word	0x100178d4
1000e47c:	10014cd5 	.word	0x10014cd5
1000e480:	100178f8 	.word	0x100178f8

1000e484 <ble_connected_state_handler>:
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000e484:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e486:	465f      	mov	r7, fp
1000e488:	464e      	mov	r6, r9
1000e48a:	4645      	mov	r5, r8
1000e48c:	b4e0      	push	{r5, r6, r7}
1000e48e:	b09a      	sub	sp, #104	; 0x68
1000e490:	0005      	movs	r5, r0
	at_ble_connected_t *conn_params;
	uint8_t idx = 0;
	conn_params = (at_ble_connected_t *)params;
	bool peripheral_device_added = false;
	
	if (conn_params->conn_status == AT_BLE_SUCCESS)
1000e492:	7a86      	ldrb	r6, [r0, #10]
1000e494:	2e00      	cmp	r6, #0
1000e496:	d000      	beq.n	1000e49a <ble_connected_state_handler+0x16>
1000e498:	e0cc      	b.n	1000e634 <ble_connected_state_handler+0x1b0>
	{
		DBG_LOG("Connected to peer device with address 0x%02x%02x%02x%02x%02x%02x",
1000e49a:	4878      	ldr	r0, [pc, #480]	; (1000e67c <ble_connected_state_handler+0x1f8>)
1000e49c:	4f78      	ldr	r7, [pc, #480]	; (1000e680 <ble_connected_state_handler+0x1fc>)
1000e49e:	47b8      	blx	r7
1000e4a0:	792b      	ldrb	r3, [r5, #4]
1000e4a2:	796a      	ldrb	r2, [r5, #5]
1000e4a4:	79a9      	ldrb	r1, [r5, #6]
1000e4a6:	7868      	ldrb	r0, [r5, #1]
1000e4a8:	9002      	str	r0, [sp, #8]
1000e4aa:	78a8      	ldrb	r0, [r5, #2]
1000e4ac:	9001      	str	r0, [sp, #4]
1000e4ae:	78e8      	ldrb	r0, [r5, #3]
1000e4b0:	9000      	str	r0, [sp, #0]
1000e4b2:	4874      	ldr	r0, [pc, #464]	; (1000e684 <ble_connected_state_handler+0x200>)
1000e4b4:	4c74      	ldr	r4, [pc, #464]	; (1000e688 <ble_connected_state_handler+0x204>)
1000e4b6:	47a0      	blx	r4
		conn_params->peer_addr.addr[3],
		conn_params->peer_addr.addr[2],
		conn_params->peer_addr.addr[1],
		conn_params->peer_addr.addr[0]);
		
		DBG_LOG("Connection Handle %d", conn_params->handle);
1000e4b8:	4870      	ldr	r0, [pc, #448]	; (1000e67c <ble_connected_state_handler+0x1f8>)
1000e4ba:	47b8      	blx	r7
1000e4bc:	8929      	ldrh	r1, [r5, #8]
1000e4be:	4873      	ldr	r0, [pc, #460]	; (1000e68c <ble_connected_state_handler+0x208>)
1000e4c0:	47a0      	blx	r4
		
		memcpy((uint8_t *)&connected_state_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));	
1000e4c2:	2212      	movs	r2, #18
1000e4c4:	0029      	movs	r1, r5
1000e4c6:	4872      	ldr	r0, [pc, #456]	; (1000e690 <ble_connected_state_handler+0x20c>)
1000e4c8:	4b72      	ldr	r3, [pc, #456]	; (1000e694 <ble_connected_state_handler+0x210>)
1000e4ca:	4798      	blx	r3
		if(memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000e4cc:	9504      	str	r5, [sp, #16]
1000e4ce:	2207      	movs	r2, #7
1000e4d0:	0029      	movs	r1, r5
1000e4d2:	4871      	ldr	r0, [pc, #452]	; (1000e698 <ble_connected_state_handler+0x214>)
1000e4d4:	4b71      	ldr	r3, [pc, #452]	; (1000e69c <ble_connected_state_handler+0x218>)
1000e4d6:	4798      	blx	r3
1000e4d8:	2800      	cmp	r0, #0
1000e4da:	d100      	bne.n	1000e4de <ble_connected_state_handler+0x5a>
1000e4dc:	e0b3      	b.n	1000e646 <ble_connected_state_handler+0x1c2>
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
1000e4de:	782b      	ldrb	r3, [r5, #0]
1000e4e0:	2b02      	cmp	r3, #2
1000e4e2:	d000      	beq.n	1000e4e6 <ble_connected_state_handler+0x62>
1000e4e4:	e0af      	b.n	1000e646 <ble_connected_state_handler+0x1c2>
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
1000e4e6:	2250      	movs	r2, #80	; 0x50
1000e4e8:	2100      	movs	r1, #0
1000e4ea:	a806      	add	r0, sp, #24
1000e4ec:	4b6c      	ldr	r3, [pc, #432]	; (1000e6a0 <ble_connected_state_handler+0x21c>)
1000e4ee:	4798      	blx	r3
1000e4f0:	4f6c      	ldr	r7, [pc, #432]	; (1000e6a4 <ble_connected_state_handler+0x220>)
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
1000e4f2:	2300      	movs	r3, #0
1000e4f4:	e00b      	b.n	1000e50e <ble_connected_state_handler+0x8a>
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000e4f6:	1c59      	adds	r1, r3, #1
1000e4f8:	7814      	ldrb	r4, [r2, #0]
1000e4fa:	a806      	add	r0, sp, #24
1000e4fc:	54c4      	strb	r4, [r0, r3]
1000e4fe:	3201      	adds	r2, #1
1000e500:	b28b      	uxth	r3, r1
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
1000e502:	42b3      	cmp	r3, r6
1000e504:	d1f7      	bne.n	1000e4f6 <ble_connected_state_handler+0x72>
1000e506:	377c      	adds	r7, #124	; 0x7c
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000e508:	1e33      	subs	r3, r6, #0
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
1000e50a:	2b50      	cmp	r3, #80	; 0x50
1000e50c:	d004      	beq.n	1000e518 <ble_connected_state_handler+0x94>
1000e50e:	001e      	movs	r6, r3
1000e510:	3610      	adds	r6, #16
1000e512:	b2b6      	uxth	r6, r6
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000e514:	003a      	movs	r2, r7
1000e516:	e7ee      	b.n	1000e4f6 <ble_connected_state_handler+0x72>
					}
					
				}
				if (nb_keys)
				{
					if(at_ble_random_address_resolve(BLE_MAX_DEVICE_CONNECTED, &conn_params->peer_addr, irk_key) == AT_BLE_SUCCESS)
1000e518:	aa06      	add	r2, sp, #24
1000e51a:	0029      	movs	r1, r5
1000e51c:	2005      	movs	r0, #5
1000e51e:	4b62      	ldr	r3, [pc, #392]	; (1000e6a8 <ble_connected_state_handler+0x224>)
1000e520:	4798      	blx	r3
1000e522:	1e06      	subs	r6, r0, #0
1000e524:	d106      	bne.n	1000e534 <ble_connected_state_handler+0xb0>
					{
						DBG_LOG_DEV("Resolving Random address success**");
1000e526:	4855      	ldr	r0, [pc, #340]	; (1000e67c <ble_connected_state_handler+0x1f8>)
1000e528:	4b55      	ldr	r3, [pc, #340]	; (1000e680 <ble_connected_state_handler+0x1fc>)
1000e52a:	4798      	blx	r3
1000e52c:	485f      	ldr	r0, [pc, #380]	; (1000e6ac <ble_connected_state_handler+0x228>)
1000e52e:	4b56      	ldr	r3, [pc, #344]	; (1000e688 <ble_connected_state_handler+0x204>)
1000e530:	4798      	blx	r3
						return AT_BLE_SUCCESS;
1000e532:	e09c      	b.n	1000e66e <ble_connected_state_handler+0x1ea>
					}
					else
					{
						DBG_LOG("Resolving Random address failed**");
1000e534:	4851      	ldr	r0, [pc, #324]	; (1000e67c <ble_connected_state_handler+0x1f8>)
1000e536:	4b52      	ldr	r3, [pc, #328]	; (1000e680 <ble_connected_state_handler+0x1fc>)
1000e538:	4798      	blx	r3
1000e53a:	485d      	ldr	r0, [pc, #372]	; (1000e6b0 <ble_connected_state_handler+0x22c>)
1000e53c:	4b52      	ldr	r3, [pc, #328]	; (1000e688 <ble_connected_state_handler+0x204>)
1000e53e:	4798      	blx	r3
						return AT_BLE_FAILURE;
1000e540:	26e2      	movs	r6, #226	; 0xe2
1000e542:	e094      	b.n	1000e66e <ble_connected_state_handler+0x1ea>
1000e544:	b2e7      	uxtb	r7, r4
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000e546:	9405      	str	r4, [sp, #20]
1000e548:	2207      	movs	r2, #7
1000e54a:	9904      	ldr	r1, [sp, #16]
1000e54c:	4648      	mov	r0, r9
1000e54e:	47d8      	blx	fp
1000e550:	2800      	cmp	r0, #0
1000e552:	d109      	bne.n	1000e568 <ble_connected_state_handler+0xe4>
				{
					ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000e554:	9a05      	ldr	r2, [sp, #20]
1000e556:	0153      	lsls	r3, r2, #5
1000e558:	1a9b      	subs	r3, r3, r2
1000e55a:	009a      	lsls	r2, r3, #2
1000e55c:	4b55      	ldr	r3, [pc, #340]	; (1000e6b4 <ble_connected_state_handler+0x230>)
1000e55e:	189b      	adds	r3, r3, r2
1000e560:	335e      	adds	r3, #94	; 0x5e
1000e562:	2202      	movs	r2, #2
1000e564:	701a      	strb	r2, [r3, #0]
1000e566:	e02b      	b.n	1000e5c0 <ble_connected_state_handler+0x13c>
1000e568:	3401      	adds	r4, #1
1000e56a:	237c      	movs	r3, #124	; 0x7c
1000e56c:	469c      	mov	ip, r3
1000e56e:	44e1      	add	r9, ip
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000e570:	2c05      	cmp	r4, #5
1000e572:	d1e7      	bne.n	1000e544 <ble_connected_state_handler+0xc0>
1000e574:	e072      	b.n	1000e65c <ble_connected_state_handler+0x1d8>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000e576:	001c      	movs	r4, r3
1000e578:	7811      	ldrb	r1, [r2, #0]
1000e57a:	2900      	cmp	r1, #0
1000e57c:	d11a      	bne.n	1000e5b4 <ble_connected_state_handler+0x130>
1000e57e:	e001      	b.n	1000e584 <ble_connected_state_handler+0x100>
1000e580:	2400      	movs	r4, #0
1000e582:	2700      	movs	r7, #0
					{
						/* @Todo Need to Handle Random Address */
						memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));
1000e584:	0163      	lsls	r3, r4, #5
1000e586:	4699      	mov	r9, r3
1000e588:	1b18      	subs	r0, r3, r4
1000e58a:	0080      	lsls	r0, r0, #2
1000e58c:	4b49      	ldr	r3, [pc, #292]	; (1000e6b4 <ble_connected_state_handler+0x230>)
1000e58e:	4698      	mov	r8, r3
1000e590:	4440      	add	r0, r8
1000e592:	2212      	movs	r2, #18
1000e594:	0029      	movs	r1, r5
1000e596:	4b3f      	ldr	r3, [pc, #252]	; (1000e694 <ble_connected_state_handler+0x210>)
1000e598:	4798      	blx	r3
						ble_device_count++;
1000e59a:	4a47      	ldr	r2, [pc, #284]	; (1000e6b8 <ble_connected_state_handler+0x234>)
1000e59c:	7813      	ldrb	r3, [r2, #0]
1000e59e:	3301      	adds	r3, #1
1000e5a0:	b2db      	uxtb	r3, r3
1000e5a2:	7013      	strb	r3, [r2, #0]
						ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000e5a4:	464b      	mov	r3, r9
1000e5a6:	1b1b      	subs	r3, r3, r4
1000e5a8:	009b      	lsls	r3, r3, #2
1000e5aa:	4443      	add	r3, r8
1000e5ac:	335e      	adds	r3, #94	; 0x5e
1000e5ae:	2202      	movs	r2, #2
1000e5b0:	701a      	strb	r2, [r3, #0]
						break;
1000e5b2:	e005      	b.n	1000e5c0 <ble_connected_state_handler+0x13c>
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000e5b4:	1c79      	adds	r1, r7, #1
1000e5b6:	b2cf      	uxtb	r7, r1
1000e5b8:	3301      	adds	r3, #1
1000e5ba:	327c      	adds	r2, #124	; 0x7c
1000e5bc:	2f05      	cmp	r7, #5
1000e5be:	d1da      	bne.n	1000e576 <ble_connected_state_handler+0xf2>
						break;
					}
				}
			}
			
			if(!memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000e5c0:	2207      	movs	r2, #7
1000e5c2:	0029      	movs	r1, r5
1000e5c4:	4834      	ldr	r0, [pc, #208]	; (1000e698 <ble_connected_state_handler+0x214>)
1000e5c6:	4b35      	ldr	r3, [pc, #212]	; (1000e69c <ble_connected_state_handler+0x218>)
1000e5c8:	4798      	blx	r3
1000e5ca:	2800      	cmp	r0, #0
1000e5cc:	d10c      	bne.n	1000e5e8 <ble_connected_state_handler+0x164>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
1000e5ce:	017b      	lsls	r3, r7, #5
1000e5d0:	1bdb      	subs	r3, r3, r7
1000e5d2:	009b      	lsls	r3, r3, #2
1000e5d4:	4a37      	ldr	r2, [pc, #220]	; (1000e6b4 <ble_connected_state_handler+0x230>)
1000e5d6:	18d3      	adds	r3, r2, r3
1000e5d8:	2205      	movs	r2, #5
1000e5da:	749a      	strb	r2, [r3, #18]
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000e5dc:	3202      	adds	r2, #2
1000e5de:	2100      	movs	r1, #0
1000e5e0:	482d      	ldr	r0, [pc, #180]	; (1000e698 <ble_connected_state_handler+0x214>)
1000e5e2:	4b2f      	ldr	r3, [pc, #188]	; (1000e6a0 <ble_connected_state_handler+0x21c>)
1000e5e4:	4798      	blx	r3
1000e5e6:	e042      	b.n	1000e66e <ble_connected_state_handler+0x1ea>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
			}
			else
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000e5e8:	4b32      	ldr	r3, [pc, #200]	; (1000e6b4 <ble_connected_state_handler+0x230>)
1000e5ea:	4698      	mov	r8, r3
1000e5ec:	017c      	lsls	r4, r7, #5
1000e5ee:	1be3      	subs	r3, r4, r7
1000e5f0:	009b      	lsls	r3, r3, #2
1000e5f2:	4443      	add	r3, r8
1000e5f4:	220a      	movs	r2, #10
1000e5f6:	749a      	strb	r2, [r3, #18]
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000e5f8:	3a03      	subs	r2, #3
1000e5fa:	2100      	movs	r1, #0
1000e5fc:	4826      	ldr	r0, [pc, #152]	; (1000e698 <ble_connected_state_handler+0x214>)
1000e5fe:	4b28      	ldr	r3, [pc, #160]	; (1000e6a0 <ble_connected_state_handler+0x21c>)
1000e600:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
		}		
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000e602:	1be4      	subs	r4, r4, r7
1000e604:	00a4      	lsls	r4, r4, #2
1000e606:	4444      	add	r4, r8
1000e608:	7ca3      	ldrb	r3, [r4, #18]
1000e60a:	2b0a      	cmp	r3, #10
1000e60c:	d12f      	bne.n	1000e66e <ble_connected_state_handler+0x1ea>
1000e60e:	e00d      	b.n	1000e62c <ble_connected_state_handler+0x1a8>
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
					
		}
		else
		{
			DBG_LOG("Max number of connection reached: %d ===>Disconnecting...", ble_device_count);
1000e610:	481a      	ldr	r0, [pc, #104]	; (1000e67c <ble_connected_state_handler+0x1f8>)
1000e612:	4b1b      	ldr	r3, [pc, #108]	; (1000e680 <ble_connected_state_handler+0x1fc>)
1000e614:	4798      	blx	r3
1000e616:	4b28      	ldr	r3, [pc, #160]	; (1000e6b8 <ble_connected_state_handler+0x234>)
1000e618:	7819      	ldrb	r1, [r3, #0]
1000e61a:	b2c9      	uxtb	r1, r1
1000e61c:	4827      	ldr	r0, [pc, #156]	; (1000e6bc <ble_connected_state_handler+0x238>)
1000e61e:	4b1a      	ldr	r3, [pc, #104]	; (1000e688 <ble_connected_state_handler+0x204>)
1000e620:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
1000e622:	8928      	ldrh	r0, [r5, #8]
1000e624:	2113      	movs	r1, #19
1000e626:	4b26      	ldr	r3, [pc, #152]	; (1000e6c0 <ble_connected_state_handler+0x23c>)
1000e628:	4798      	blx	r3
1000e62a:	e020      	b.n	1000e66e <ble_connected_state_handler+0x1ea>
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
        {
	 		ble_send_slave_sec_request(conn_params->handle);
1000e62c:	8928      	ldrh	r0, [r5, #8]
1000e62e:	4b25      	ldr	r3, [pc, #148]	; (1000e6c4 <ble_connected_state_handler+0x240>)
1000e630:	4798      	blx	r3
1000e632:	e01c      	b.n	1000e66e <ble_connected_state_handler+0x1ea>
        }
#endif
	} 
	else
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
1000e634:	4811      	ldr	r0, [pc, #68]	; (1000e67c <ble_connected_state_handler+0x1f8>)
1000e636:	4b12      	ldr	r3, [pc, #72]	; (1000e680 <ble_connected_state_handler+0x1fc>)
1000e638:	4798      	blx	r3
1000e63a:	7aa9      	ldrb	r1, [r5, #10]
1000e63c:	4822      	ldr	r0, [pc, #136]	; (1000e6c8 <ble_connected_state_handler+0x244>)
1000e63e:	4b12      	ldr	r3, [pc, #72]	; (1000e688 <ble_connected_state_handler+0x204>)
1000e640:	4798      	blx	r3
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
1000e642:	2600      	movs	r6, #0
1000e644:	e013      	b.n	1000e66e <ble_connected_state_handler+0x1ea>
					DBG_LOG_DEV("New Connection");
				}				
			}
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
1000e646:	4b1c      	ldr	r3, [pc, #112]	; (1000e6b8 <ble_connected_state_handler+0x234>)
1000e648:	781b      	ldrb	r3, [r3, #0]
1000e64a:	b2db      	uxtb	r3, r3
1000e64c:	2b04      	cmp	r3, #4
1000e64e:	d8df      	bhi.n	1000e610 <ble_connected_state_handler+0x18c>
1000e650:	4b18      	ldr	r3, [pc, #96]	; (1000e6b4 <ble_connected_state_handler+0x230>)
1000e652:	4699      	mov	r9, r3
1000e654:	2400      	movs	r4, #0
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000e656:	4b11      	ldr	r3, [pc, #68]	; (1000e69c <ble_connected_state_handler+0x218>)
1000e658:	469b      	mov	fp, r3
1000e65a:	e773      	b.n	1000e544 <ble_connected_state_handler+0xc0>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000e65c:	235e      	movs	r3, #94	; 0x5e
1000e65e:	4a15      	ldr	r2, [pc, #84]	; (1000e6b4 <ble_connected_state_handler+0x230>)
1000e660:	5cd3      	ldrb	r3, [r2, r3]
1000e662:	2b00      	cmp	r3, #0
1000e664:	d08c      	beq.n	1000e580 <ble_connected_state_handler+0xfc>
1000e666:	4a19      	ldr	r2, [pc, #100]	; (1000e6cc <ble_connected_state_handler+0x248>)
1000e668:	2301      	movs	r3, #1
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000e66a:	2701      	movs	r7, #1
1000e66c:	e783      	b.n	1000e576 <ble_connected_state_handler+0xf2>
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
}
1000e66e:	0030      	movs	r0, r6
1000e670:	b01a      	add	sp, #104	; 0x68
1000e672:	bc1c      	pop	{r2, r3, r4}
1000e674:	4690      	mov	r8, r2
1000e676:	4699      	mov	r9, r3
1000e678:	46a3      	mov	fp, r4
1000e67a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e67c:	10015f9c 	.word	0x10015f9c
1000e680:	10014df5 	.word	0x10014df5
1000e684:	10017918 	.word	0x10017918
1000e688:	10014cd5 	.word	0x10014cd5
1000e68c:	1001795c 	.word	0x1001795c
1000e690:	10019ff4 	.word	0x10019ff4
1000e694:	10014b7b 	.word	0x10014b7b
1000e698:	100188c0 	.word	0x100188c0
1000e69c:	10014b5d 	.word	0x10014b5d
1000e6a0:	10014b8d 	.word	0x10014b8d
1000e6a4:	10019d8e 	.word	0x10019d8e
1000e6a8:	10010765 	.word	0x10010765
1000e6ac:	10017974 	.word	0x10017974
1000e6b0:	10017998 	.word	0x10017998
1000e6b4:	10019d48 	.word	0x10019d48
1000e6b8:	10019fb4 	.word	0x10019fb4
1000e6bc:	100179bc 	.word	0x100179bc
1000e6c0:	10010739 	.word	0x10010739
1000e6c4:	1000e43d 	.word	0x1000e43d
1000e6c8:	100179f8 	.word	0x100179f8
1000e6cc:	10019e22 	.word	0x10019e22

1000e6d0 <ble_resolv_rand_addr_handler>:

at_ble_status_t ble_resolv_rand_addr_handler(void *params)
{
1000e6d0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e6d2:	4647      	mov	r7, r8
1000e6d4:	b480      	push	{r7}
	uint8_t idx;	
	bool device_found = false;
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
1000e6d6:	7803      	ldrb	r3, [r0, #0]
1000e6d8:	2b00      	cmp	r3, #0
1000e6da:	d152      	bne.n	1000e782 <ble_resolv_rand_addr_handler+0xb2>
1000e6dc:	4d3e      	ldr	r5, [pc, #248]	; (1000e7d8 <ble_resolv_rand_addr_handler+0x108>)
1000e6de:	2400      	movs	r4, #0
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			/* Check the Resolved Address */
			if (!memcmp((uint8_t *)ble_resolv_rand_addr_status->irk, (uint8_t *)ble_dev_info[idx].bond_info.peer_irk.key, AT_BLE_MAX_KEY_LEN))
1000e6e0:	1c46      	adds	r6, r0, #1
1000e6e2:	4f3e      	ldr	r7, [pc, #248]	; (1000e7dc <ble_resolv_rand_addr_handler+0x10c>)
1000e6e4:	2210      	movs	r2, #16
1000e6e6:	0029      	movs	r1, r5
1000e6e8:	0030      	movs	r0, r6
1000e6ea:	47b8      	blx	r7
1000e6ec:	2800      	cmp	r0, #0
1000e6ee:	d031      	beq.n	1000e754 <ble_resolv_rand_addr_handler+0x84>
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000e6f0:	3401      	adds	r4, #1
1000e6f2:	b2e4      	uxtb	r4, r4
1000e6f4:	357c      	adds	r5, #124	; 0x7c
1000e6f6:	2c05      	cmp	r4, #5
1000e6f8:	d1f4      	bne.n	1000e6e4 <ble_resolv_rand_addr_handler+0x14>
1000e6fa:	e042      	b.n	1000e782 <ble_resolv_rand_addr_handler+0xb2>
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000e6fc:	001d      	movs	r5, r3
1000e6fe:	7811      	ldrb	r1, [r2, #0]
1000e700:	2900      	cmp	r1, #0
1000e702:	d11b      	bne.n	1000e73c <ble_resolv_rand_addr_handler+0x6c>
1000e704:	e001      	b.n	1000e70a <ble_resolv_rand_addr_handler+0x3a>
1000e706:	2500      	movs	r5, #0
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000e708:	2400      	movs	r4, #0
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
			{
				memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000e70a:	4b35      	ldr	r3, [pc, #212]	; (1000e7e0 <ble_resolv_rand_addr_handler+0x110>)
1000e70c:	4698      	mov	r8, r3
1000e70e:	016e      	lsls	r6, r5, #5
1000e710:	1b77      	subs	r7, r6, r5
1000e712:	00bf      	lsls	r7, r7, #2
1000e714:	4447      	add	r7, r8
1000e716:	2212      	movs	r2, #18
1000e718:	4932      	ldr	r1, [pc, #200]	; (1000e7e4 <ble_resolv_rand_addr_handler+0x114>)
1000e71a:	0038      	movs	r0, r7
1000e71c:	4b32      	ldr	r3, [pc, #200]	; (1000e7e8 <ble_resolv_rand_addr_handler+0x118>)
1000e71e:	4798      	blx	r3
				ble_device_count++;
1000e720:	4a32      	ldr	r2, [pc, #200]	; (1000e7ec <ble_resolv_rand_addr_handler+0x11c>)
1000e722:	7813      	ldrb	r3, [r2, #0]
1000e724:	3301      	adds	r3, #1
1000e726:	b2db      	uxtb	r3, r3
1000e728:	7013      	strb	r3, [r2, #0]
				ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000e72a:	375e      	adds	r7, #94	; 0x5e
1000e72c:	2302      	movs	r3, #2
1000e72e:	703b      	strb	r3, [r7, #0]
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000e730:	1b75      	subs	r5, r6, r5
1000e732:	00ad      	lsls	r5, r5, #2
1000e734:	4445      	add	r5, r8
1000e736:	3308      	adds	r3, #8
1000e738:	74ab      	strb	r3, [r5, #18]
				peripheral_device_added = true;
				break;
1000e73a:	e031      	b.n	1000e7a0 <ble_resolv_rand_addr_handler+0xd0>
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000e73c:	3401      	adds	r4, #1
1000e73e:	b2e4      	uxtb	r4, r4
1000e740:	3301      	adds	r3, #1
1000e742:	327c      	adds	r2, #124	; 0x7c
1000e744:	2c05      	cmp	r4, #5
1000e746:	d1d9      	bne.n	1000e6fc <ble_resolv_rand_addr_handler+0x2c>
1000e748:	e03a      	b.n	1000e7c0 <ble_resolv_rand_addr_handler+0xf0>
	}
	DBG_LOG_DEV("Device idx:%d",idx);
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
	{
		ble_send_slave_sec_request(connected_state_info.handle);
1000e74a:	4b26      	ldr	r3, [pc, #152]	; (1000e7e4 <ble_resolv_rand_addr_handler+0x114>)
1000e74c:	8918      	ldrh	r0, [r3, #8]
1000e74e:	4b28      	ldr	r3, [pc, #160]	; (1000e7f0 <ble_resolv_rand_addr_handler+0x120>)
1000e750:	4798      	blx	r3
1000e752:	e03c      	b.n	1000e7ce <ble_resolv_rand_addr_handler+0xfe>
		
	}
	
	if (device_found)
	{
		DBG_LOG_DEV("##########Device Found");
1000e754:	4827      	ldr	r0, [pc, #156]	; (1000e7f4 <ble_resolv_rand_addr_handler+0x124>)
1000e756:	4b28      	ldr	r3, [pc, #160]	; (1000e7f8 <ble_resolv_rand_addr_handler+0x128>)
1000e758:	4798      	blx	r3
1000e75a:	4828      	ldr	r0, [pc, #160]	; (1000e7fc <ble_resolv_rand_addr_handler+0x12c>)
1000e75c:	4b28      	ldr	r3, [pc, #160]	; (1000e800 <ble_resolv_rand_addr_handler+0x130>)
1000e75e:	4798      	blx	r3
		ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000e760:	481f      	ldr	r0, [pc, #124]	; (1000e7e0 <ble_resolv_rand_addr_handler+0x110>)
1000e762:	0163      	lsls	r3, r4, #5
1000e764:	1b1a      	subs	r2, r3, r4
1000e766:	0092      	lsls	r2, r2, #2
1000e768:	1882      	adds	r2, r0, r2
1000e76a:	0011      	movs	r1, r2
1000e76c:	315e      	adds	r1, #94	; 0x5e
1000e76e:	2502      	movs	r5, #2
1000e770:	700d      	strb	r5, [r1, #0]
		ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000e772:	210a      	movs	r1, #10
1000e774:	7491      	strb	r1, [r2, #18]
		memcpy((uint8_t *)&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000e776:	0010      	movs	r0, r2
1000e778:	2212      	movs	r2, #18
1000e77a:	491a      	ldr	r1, [pc, #104]	; (1000e7e4 <ble_resolv_rand_addr_handler+0x114>)
1000e77c:	4b1a      	ldr	r3, [pc, #104]	; (1000e7e8 <ble_resolv_rand_addr_handler+0x118>)
1000e77e:	4798      	blx	r3
1000e780:	e00e      	b.n	1000e7a0 <ble_resolv_rand_addr_handler+0xd0>
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
1000e782:	481c      	ldr	r0, [pc, #112]	; (1000e7f4 <ble_resolv_rand_addr_handler+0x124>)
1000e784:	4b1c      	ldr	r3, [pc, #112]	; (1000e7f8 <ble_resolv_rand_addr_handler+0x128>)
1000e786:	4798      	blx	r3
1000e788:	481e      	ldr	r0, [pc, #120]	; (1000e804 <ble_resolv_rand_addr_handler+0x134>)
1000e78a:	4b1d      	ldr	r3, [pc, #116]	; (1000e800 <ble_resolv_rand_addr_handler+0x130>)
1000e78c:	4798      	blx	r3
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000e78e:	235e      	movs	r3, #94	; 0x5e
1000e790:	4a13      	ldr	r2, [pc, #76]	; (1000e7e0 <ble_resolv_rand_addr_handler+0x110>)
1000e792:	5cd3      	ldrb	r3, [r2, r3]
1000e794:	2b00      	cmp	r3, #0
1000e796:	d0b6      	beq.n	1000e706 <ble_resolv_rand_addr_handler+0x36>
1000e798:	4a1b      	ldr	r2, [pc, #108]	; (1000e808 <ble_resolv_rand_addr_handler+0x138>)
1000e79a:	2301      	movs	r3, #1
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000e79c:	2401      	movs	r4, #1
1000e79e:	e7ad      	b.n	1000e6fc <ble_resolv_rand_addr_handler+0x2c>
				peripheral_device_added = true;
				break;
			}
		}
	}
	DBG_LOG_DEV("Device idx:%d",idx);
1000e7a0:	4814      	ldr	r0, [pc, #80]	; (1000e7f4 <ble_resolv_rand_addr_handler+0x124>)
1000e7a2:	4b15      	ldr	r3, [pc, #84]	; (1000e7f8 <ble_resolv_rand_addr_handler+0x128>)
1000e7a4:	4798      	blx	r3
1000e7a6:	0021      	movs	r1, r4
1000e7a8:	4818      	ldr	r0, [pc, #96]	; (1000e80c <ble_resolv_rand_addr_handler+0x13c>)
1000e7aa:	4b15      	ldr	r3, [pc, #84]	; (1000e800 <ble_resolv_rand_addr_handler+0x130>)
1000e7ac:	4798      	blx	r3
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000e7ae:	0163      	lsls	r3, r4, #5
1000e7b0:	1b1c      	subs	r4, r3, r4
1000e7b2:	00a4      	lsls	r4, r4, #2
1000e7b4:	4b0a      	ldr	r3, [pc, #40]	; (1000e7e0 <ble_resolv_rand_addr_handler+0x110>)
1000e7b6:	191c      	adds	r4, r3, r4
1000e7b8:	7ca3      	ldrb	r3, [r4, #18]
1000e7ba:	2b0a      	cmp	r3, #10
1000e7bc:	d107      	bne.n	1000e7ce <ble_resolv_rand_addr_handler+0xfe>
1000e7be:	e7c4      	b.n	1000e74a <ble_resolv_rand_addr_handler+0x7a>
				peripheral_device_added = true;
				break;
			}
		}
	}
	DBG_LOG_DEV("Device idx:%d",idx);
1000e7c0:	480c      	ldr	r0, [pc, #48]	; (1000e7f4 <ble_resolv_rand_addr_handler+0x124>)
1000e7c2:	4b0d      	ldr	r3, [pc, #52]	; (1000e7f8 <ble_resolv_rand_addr_handler+0x128>)
1000e7c4:	4798      	blx	r3
1000e7c6:	2105      	movs	r1, #5
1000e7c8:	4810      	ldr	r0, [pc, #64]	; (1000e80c <ble_resolv_rand_addr_handler+0x13c>)
1000e7ca:	4b0d      	ldr	r3, [pc, #52]	; (1000e800 <ble_resolv_rand_addr_handler+0x130>)
1000e7cc:	4798      	blx	r3
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
	
}
1000e7ce:	2000      	movs	r0, #0
1000e7d0:	bc04      	pop	{r2}
1000e7d2:	4690      	mov	r8, r2
1000e7d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e7d6:	46c0      	nop			; (mov r8, r8)
1000e7d8:	10019d8e 	.word	0x10019d8e
1000e7dc:	10014b5d 	.word	0x10014b5d
1000e7e0:	10019d48 	.word	0x10019d48
1000e7e4:	10019ff4 	.word	0x10019ff4
1000e7e8:	10014b7b 	.word	0x10014b7b
1000e7ec:	10019fb4 	.word	0x10019fb4
1000e7f0:	1000e43d 	.word	0x1000e43d
1000e7f4:	10015f9c 	.word	0x10015f9c
1000e7f8:	10014df5 	.word	0x10014df5
1000e7fc:	10017a20 	.word	0x10017a20
1000e800:	10014cd5 	.word	0x10014cd5
1000e804:	10017a38 	.word	0x10017a38
1000e808:	10019e22 	.word	0x10019e22
1000e80c:	10017a54 	.word	0x10017a54

1000e810 <ble_event_manager>:
	}
	return AT_BLE_SUCCESS;
}

void ble_event_manager(at_ble_events_t events, void *event_params)
{
1000e810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000e812:	0004      	movs	r4, r0
1000e814:	000d      	movs	r5, r1
	DBG_LOG_DEV("BLE-Event:%d", events);
1000e816:	4848      	ldr	r0, [pc, #288]	; (1000e938 <ble_event_manager+0x128>)
1000e818:	4b48      	ldr	r3, [pc, #288]	; (1000e93c <ble_event_manager+0x12c>)
1000e81a:	4798      	blx	r3
1000e81c:	0021      	movs	r1, r4
1000e81e:	4848      	ldr	r0, [pc, #288]	; (1000e940 <ble_event_manager+0x130>)
1000e820:	4b48      	ldr	r3, [pc, #288]	; (1000e944 <ble_event_manager+0x134>)
1000e822:	4798      	blx	r3
	switch(events)
1000e824:	2c3b      	cmp	r4, #59	; 0x3b
1000e826:	d879      	bhi.n	1000e91c <ble_event_manager+0x10c>
1000e828:	00a3      	lsls	r3, r4, #2
1000e82a:	4a47      	ldr	r2, [pc, #284]	; (1000e948 <ble_event_manager+0x138>)
1000e82c:	58d3      	ldr	r3, [r2, r3]
1000e82e:	469f      	mov	pc, r3
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000e830:	00a4      	lsls	r4, r4, #2
1000e832:	2600      	movs	r6, #0
		}
		#endif			
		
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
1000e834:	4f45      	ldr	r7, [pc, #276]	; (1000e94c <ble_event_manager+0x13c>)
1000e836:	59bb      	ldr	r3, [r7, r6]
1000e838:	2b00      	cmp	r3, #0
1000e83a:	d004      	beq.n	1000e846 <ble_event_manager+0x36>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000e83c:	591b      	ldr	r3, [r3, r4]
1000e83e:	2b00      	cmp	r3, #0
1000e840:	d001      	beq.n	1000e846 <ble_event_manager+0x36>
				{
					event_cb_fn[events](event_params);		
1000e842:	0028      	movs	r0, r5
1000e844:	4798      	blx	r3
1000e846:	3604      	adds	r6, #4
			if( ble_scan_duplication_check((at_ble_scan_info_t*)event_params) )
				return;
		}
		#endif			
		
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
1000e848:	2e14      	cmp	r6, #20
1000e84a:	d1f4      	bne.n	1000e836 <ble_event_manager+0x26>
1000e84c:	e072      	b.n	1000e934 <ble_event_manager+0x124>
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000e84e:	3c13      	subs	r4, #19
1000e850:	b2e4      	uxtb	r4, r4
1000e852:	00a4      	lsls	r4, r4, #2
1000e854:	2600      	movs	r6, #0
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
1000e856:	4f3e      	ldr	r7, [pc, #248]	; (1000e950 <ble_event_manager+0x140>)
1000e858:	59bb      	ldr	r3, [r7, r6]
1000e85a:	2b00      	cmp	r3, #0
1000e85c:	d004      	beq.n	1000e868 <ble_event_manager+0x58>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000e85e:	591b      	ldr	r3, [r3, r4]
1000e860:	2b00      	cmp	r3, #0
1000e862:	d001      	beq.n	1000e868 <ble_event_manager+0x58>
				{
					event_cb_fn[events](event_params);
1000e864:	0028      	movs	r0, r5
1000e866:	4798      	blx	r3
1000e868:	3604      	adds	r6, #4
	case AT_BLE_NOTIFICATION_RECIEVED:
	case AT_BLE_INDICATION_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
1000e86a:	2e14      	cmp	r6, #20
1000e86c:	d1f4      	bne.n	1000e858 <ble_event_manager+0x48>
1000e86e:	e061      	b.n	1000e934 <ble_event_manager+0x124>
	case AT_BLE_MTU_CHANGED_CMD_COMPLETE:
	case AT_BLE_CHARACTERISTIC_WRITE_CMD_CMP:
	case AT_BLE_READ_AUTHORIZE_REQUEST:
	{
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
1000e870:	3c1d      	subs	r4, #29
1000e872:	b2e4      	uxtb	r4, r4
		DBG_LOG_DEV("GATT_Server Event:%d", events);
1000e874:	4830      	ldr	r0, [pc, #192]	; (1000e938 <ble_event_manager+0x128>)
1000e876:	4b31      	ldr	r3, [pc, #196]	; (1000e93c <ble_event_manager+0x12c>)
1000e878:	4798      	blx	r3
1000e87a:	0021      	movs	r1, r4
1000e87c:	4835      	ldr	r0, [pc, #212]	; (1000e954 <ble_event_manager+0x144>)
1000e87e:	4b31      	ldr	r3, [pc, #196]	; (1000e944 <ble_event_manager+0x134>)
1000e880:	4798      	blx	r3
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000e882:	00a4      	lsls	r4, r4, #2
1000e884:	2600      	movs	r6, #0
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
1000e886:	4f34      	ldr	r7, [pc, #208]	; (1000e958 <ble_event_manager+0x148>)
1000e888:	59bb      	ldr	r3, [r7, r6]
1000e88a:	2b00      	cmp	r3, #0
1000e88c:	d004      	beq.n	1000e898 <ble_event_manager+0x88>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000e88e:	591b      	ldr	r3, [r3, r4]
1000e890:	2b00      	cmp	r3, #0
1000e892:	d001      	beq.n	1000e898 <ble_event_manager+0x88>
				{
					event_cb_fn[events](event_params);
1000e894:	0028      	movs	r0, r5
1000e896:	4798      	blx	r3
1000e898:	3604      	adds	r6, #4
	case AT_BLE_READ_AUTHORIZE_REQUEST:
	{
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
1000e89a:	2e14      	cmp	r6, #20
1000e89c:	d1f4      	bne.n	1000e888 <ble_event_manager+0x78>
1000e89e:	e049      	b.n	1000e934 <ble_event_manager+0x124>
	case AT_BLE_LECB_ADD_CREDIT_IND:
	case AT_BLE_LECB_SEND_RESP:
	case AT_BLE_LECB_DATA_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_READ_AUTHORIZE_REQUEST + 1);
1000e8a0:	3c27      	subs	r4, #39	; 0x27
1000e8a2:	b2e4      	uxtb	r4, r4
		for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_l2cap_event_cb[idx] != NULL)
1000e8a4:	4b2d      	ldr	r3, [pc, #180]	; (1000e95c <ble_event_manager+0x14c>)
1000e8a6:	681b      	ldr	r3, [r3, #0]
1000e8a8:	2b00      	cmp	r3, #0
1000e8aa:	d043      	beq.n	1000e934 <ble_event_manager+0x124>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_l2cap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000e8ac:	00a4      	lsls	r4, r4, #2
1000e8ae:	58e3      	ldr	r3, [r4, r3]
1000e8b0:	2b00      	cmp	r3, #0
1000e8b2:	d03f      	beq.n	1000e934 <ble_event_manager+0x124>
				{
					event_cb_fn[events](event_params);
1000e8b4:	0028      	movs	r0, r5
1000e8b6:	4798      	blx	r3
1000e8b8:	e03c      	b.n	1000e934 <ble_event_manager+0x124>
	case AT_BLE_HTPT_ENABLE_RSP:
	case AT_BLE_HTPT_MEAS_INTV_UPD_RSP:
	case AT_BLE_HTPT_MEAS_INTV_CHG_REQ:
	{
		uint8_t idx;
		events -= (AT_BLE_LECB_DATA_RECIEVED + 1);
1000e8ba:	3c2d      	subs	r4, #45	; 0x2d
1000e8bc:	b2e4      	uxtb	r4, r4
		for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_htpt_event_cb[idx] != NULL)
1000e8be:	4b28      	ldr	r3, [pc, #160]	; (1000e960 <ble_event_manager+0x150>)
1000e8c0:	681b      	ldr	r3, [r3, #0]
1000e8c2:	2b00      	cmp	r3, #0
1000e8c4:	d036      	beq.n	1000e934 <ble_event_manager+0x124>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_htpt_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000e8c6:	00a4      	lsls	r4, r4, #2
1000e8c8:	58e3      	ldr	r3, [r4, r3]
1000e8ca:	2b00      	cmp	r3, #0
1000e8cc:	d032      	beq.n	1000e934 <ble_event_manager+0x124>
				{
					event_cb_fn[events](event_params);
1000e8ce:	0028      	movs	r0, r5
1000e8d0:	4798      	blx	r3
1000e8d2:	e02f      	b.n	1000e934 <ble_event_manager+0x124>
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000e8d4:	3c36      	subs	r4, #54	; 0x36
1000e8d6:	b2e4      	uxtb	r4, r4
1000e8d8:	00a4      	lsls	r4, r4, #2
1000e8da:	2600      	movs	r6, #0
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
1000e8dc:	4f21      	ldr	r7, [pc, #132]	; (1000e964 <ble_event_manager+0x154>)
1000e8de:	59bb      	ldr	r3, [r7, r6]
1000e8e0:	2b00      	cmp	r3, #0
1000e8e2:	d004      	beq.n	1000e8ee <ble_event_manager+0xde>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000e8e4:	591b      	ldr	r3, [r3, r4]
1000e8e6:	2b00      	cmp	r3, #0
1000e8e8:	d001      	beq.n	1000e8ee <ble_event_manager+0xde>
				{
					event_cb_fn[events](event_params);
1000e8ea:	0028      	movs	r0, r5
1000e8ec:	4798      	blx	r3
1000e8ee:	3604      	adds	r6, #4
	case AT_BLE_LE_TEST_STATUS:
	case AT_BLE_LE_PACKET_REPORT:
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
1000e8f0:	2e14      	cmp	r6, #20
1000e8f2:	d1f4      	bne.n	1000e8de <ble_event_manager+0xce>
1000e8f4:	e01e      	b.n	1000e934 <ble_event_manager+0x124>
	case AT_BLE_CUSTOM_EVENT:
	case AT_BLE_DEVICE_READY:
	case AT_BLE_EVENT_MAX:
	{
		uint8_t idx;
		events -= (AT_BLE_LE_PACKET_REPORT + 1);
1000e8f6:	3c38      	subs	r4, #56	; 0x38
1000e8f8:	b2e4      	uxtb	r4, r4
		for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_custom_event_cb[idx] != NULL)
1000e8fa:	4b1b      	ldr	r3, [pc, #108]	; (1000e968 <ble_event_manager+0x158>)
1000e8fc:	681b      	ldr	r3, [r3, #0]
1000e8fe:	2b00      	cmp	r3, #0
1000e900:	d018      	beq.n	1000e934 <ble_event_manager+0x124>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_custom_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000e902:	00a4      	lsls	r4, r4, #2
1000e904:	58e3      	ldr	r3, [r4, r3]
1000e906:	2b00      	cmp	r3, #0
1000e908:	d014      	beq.n	1000e934 <ble_event_manager+0x124>
				{
					event_cb_fn[events](event_params);
1000e90a:	0028      	movs	r0, r5
1000e90c:	4798      	blx	r3
1000e90e:	e011      	b.n	1000e934 <ble_event_manager+0x124>
	}
	break;

	case AT_PLATFORM_EVENT:
	{
		if (ble_user_event_cb) {
1000e910:	4b16      	ldr	r3, [pc, #88]	; (1000e96c <ble_event_manager+0x15c>)
1000e912:	681b      	ldr	r3, [r3, #0]
1000e914:	2b00      	cmp	r3, #0
1000e916:	d00d      	beq.n	1000e934 <ble_event_manager+0x124>
			ble_user_event_cb();
1000e918:	4798      	blx	r3
1000e91a:	e00b      	b.n	1000e934 <ble_event_manager+0x124>
	}
	break;

	default:
	{
		DBG_LOG_DEV("BLE-Manager:Unknown Event=0x%X", events);
1000e91c:	4e06      	ldr	r6, [pc, #24]	; (1000e938 <ble_event_manager+0x128>)
1000e91e:	0030      	movs	r0, r6
1000e920:	4d06      	ldr	r5, [pc, #24]	; (1000e93c <ble_event_manager+0x12c>)
1000e922:	47a8      	blx	r5
1000e924:	0021      	movs	r1, r4
1000e926:	4812      	ldr	r0, [pc, #72]	; (1000e970 <ble_event_manager+0x160>)
1000e928:	4b06      	ldr	r3, [pc, #24]	; (1000e944 <ble_event_manager+0x134>)
1000e92a:	4798      	blx	r3
		DBG_LOG("\r\n");
1000e92c:	0030      	movs	r0, r6
1000e92e:	47a8      	blx	r5
1000e930:	0030      	movs	r0, r6
1000e932:	47a8      	blx	r5
	}
	break;		
	}
}
1000e934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000e936:	46c0      	nop			; (mov r8, r8)
1000e938:	10015f9c 	.word	0x10015f9c
1000e93c:	10014df5 	.word	0x10014df5
1000e940:	10017a64 	.word	0x10017a64
1000e944:	10014cd5 	.word	0x10014cd5
1000e948:	10016fc4 	.word	0x10016fc4
1000e94c:	10019fcc 	.word	0x10019fcc
1000e950:	10019fe0 	.word	0x10019fe0
1000e954:	10017a74 	.word	0x10017a74
1000e958:	10019d34 	.word	0x10019d34
1000e95c:	1001a028 	.word	0x1001a028
1000e960:	10019d30 	.word	0x10019d30
1000e964:	10019fb8 	.word	0x10019fb8
1000e968:	1001a56c 	.word	0x1001a56c
1000e96c:	100188b8 	.word	0x100188b8
1000e970:	10017a8c 	.word	0x10017a8c

1000e974 <ble_event_task>:
	return ulp_status;
}

/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
1000e974:	b570      	push	{r4, r5, r6, lr}
1000e976:	0004      	movs	r4, r0
	return status;
}

ble_ulp_mode_t ble_get_ulp_status(void)
{
	return ulp_status;
1000e978:	4b0d      	ldr	r3, [pc, #52]	; (1000e9b0 <ble_event_task+0x3c>)
1000e97a:	781b      	ldrb	r3, [r3, #0]
/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
	at_ble_status_t status;
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
1000e97c:	2b01      	cmp	r3, #1
1000e97e:	d101      	bne.n	1000e984 <ble_event_task+0x10>
	{
		release_sleep_lock();
1000e980:	4b0c      	ldr	r3, [pc, #48]	; (1000e9b4 <ble_event_task+0x40>)
1000e982:	4798      	blx	r3
	}	
	status = at_ble_event_get(&event, ble_event_params, timeout);
1000e984:	0022      	movs	r2, r4
1000e986:	490c      	ldr	r1, [pc, #48]	; (1000e9b8 <ble_event_task+0x44>)
1000e988:	480c      	ldr	r0, [pc, #48]	; (1000e9bc <ble_event_task+0x48>)
1000e98a:	4b0d      	ldr	r3, [pc, #52]	; (1000e9c0 <ble_event_task+0x4c>)
1000e98c:	4798      	blx	r3
1000e98e:	0004      	movs	r4, r0
1000e990:	0005      	movs	r5, r0
	return status;
}

ble_ulp_mode_t ble_get_ulp_status(void)
{
	return ulp_status;
1000e992:	4b07      	ldr	r3, [pc, #28]	; (1000e9b0 <ble_event_task+0x3c>)
1000e994:	781b      	ldrb	r3, [r3, #0]
	{
		release_sleep_lock();
	}	
	status = at_ble_event_get(&event, ble_event_params, timeout);
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
1000e996:	2b01      	cmp	r3, #1
1000e998:	d101      	bne.n	1000e99e <ble_event_task+0x2a>
	{
		acquire_sleep_lock();
1000e99a:	4b0a      	ldr	r3, [pc, #40]	; (1000e9c4 <ble_event_task+0x50>)
1000e99c:	4798      	blx	r3
	}
	
    if (status == AT_BLE_SUCCESS) 
1000e99e:	2d00      	cmp	r5, #0
1000e9a0:	d104      	bne.n	1000e9ac <ble_event_task+0x38>
    {		
            ble_event_manager(event, ble_event_params);
1000e9a2:	4b06      	ldr	r3, [pc, #24]	; (1000e9bc <ble_event_task+0x48>)
1000e9a4:	7818      	ldrb	r0, [r3, #0]
1000e9a6:	4904      	ldr	r1, [pc, #16]	; (1000e9b8 <ble_event_task+0x44>)
1000e9a8:	4b07      	ldr	r3, [pc, #28]	; (1000e9c8 <ble_event_task+0x54>)
1000e9aa:	4798      	blx	r3
    }
    
    return status;
}
1000e9ac:	0020      	movs	r0, r4
1000e9ae:	bd70      	pop	{r4, r5, r6, pc}
1000e9b0:	100188c7 	.word	0x100188c7
1000e9b4:	1000f391 	.word	0x1000f391
1000e9b8:	1001a360 	.word	0x1001a360
1000e9bc:	1001a024 	.word	0x1001a024
1000e9c0:	1000faed 	.word	0x1000faed
1000e9c4:	1000f369 	.word	0x1000f369
1000e9c8:	1000e811 	.word	0x1000e811

1000e9cc <ble_advertisement_data_set>:
	}
}

/* Advertisement Data will be set based on the advertisement configuration */
at_ble_status_t ble_advertisement_data_set(void)
{
1000e9cc:	b530      	push	{r4, r5, lr}
1000e9ce:	b091      	sub	sp, #68	; 0x44
		uint8_t length_field_ind;
		uint8_t adv_element_len;
		adv_buf[adv_data_element.len] = adv_data_element.len;
		length_field_ind = adv_data_element.len;
		adv_data_element.len++;
		adv_buf[adv_data_element.len++] = COMPLETE_LIST_16BIT_SERV_UUIDS;
1000e9d0:	ac08      	add	r4, sp, #32
1000e9d2:	2203      	movs	r2, #3
1000e9d4:	7062      	strb	r2, [r4, #1]
		MREPEAT(SERVICE_UUID16_MAX_NUM, _CONF_SERVICE_16BIT_UUID, &adv_data_element);
1000e9d6:	2302      	movs	r3, #2
1000e9d8:	70a3      	strb	r3, [r4, #2]
1000e9da:	3316      	adds	r3, #22
1000e9dc:	70e3      	strb	r3, [r4, #3]
1000e9de:	7122      	strb	r2, [r4, #4]
1000e9e0:	7163      	strb	r3, [r4, #5]
1000e9e2:	3201      	adds	r2, #1
1000e9e4:	71a2      	strb	r2, [r4, #6]
1000e9e6:	71e3      	strb	r3, [r4, #7]
1000e9e8:	320b      	adds	r2, #11
1000e9ea:	7222      	strb	r2, [r4, #8]
1000e9ec:	7263      	strb	r3, [r4, #9]
		adv_element_len = adv_data_element.len - (length_field_ind + ADV_ELEMENT_SIZE);
		if(adv_element_len) 
		{			
			adv_buf[length_field_ind] = adv_element_len+ADV_TYPE_SIZE;
1000e9ee:	2509      	movs	r5, #9
1000e9f0:	7025      	strb	r5, [r4, #0]
	#endif
	
	#if (BLE_GAP_ADV_COMPLETE_LOCAL_NAME_ENABLE && !BLE_GAP_ADV_SHORTENED_LOCAL_NAME_ENABLE)
	#if (BLE_GAP_ADV_COMPLETE_LOCAL_NAME_SCN_RSP_ENABLE != SCAN_RESPONSE_ONLY_ENABLE)
	if((adv_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_TYPE_FLAG_SIZE + ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH))) {
		adv_buf[adv_data_element.len++] = BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH + ADV_TYPE_SIZE;
1000e9f2:	3b0e      	subs	r3, #14
1000e9f4:	72a3      	strb	r3, [r4, #10]
		adv_buf[adv_data_element.len++] = COMPLETE_LOCAL_NAME;
1000e9f6:	72e5      	strb	r5, [r4, #11]
		memcpy(&adv_buf[adv_data_element.len], BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME, BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH);
1000e9f8:	aa0b      	add	r2, sp, #44	; 0x2c
1000e9fa:	4b16      	ldr	r3, [pc, #88]	; (1000ea54 <ble_advertisement_data_set+0x88>)
1000e9fc:	cb03      	ldmia	r3!, {r0, r1}
1000e9fe:	c203      	stmia	r2!, {r0, r1}
1000ea00:	781b      	ldrb	r3, [r3, #0]
1000ea02:	7013      	strb	r3, [r2, #0]
	#endif
	#if ((BLE_GAP_ADV_SERVICE_SOLTN_128BIT_UUID_SCN_RSP_ENABLE == SCAN_RESPONSE_ENABLE) || (BLE_GAP_ADV_SERVICE_SOLTN_128BIT_UUID_SCN_RSP_ENABLE == SCAN_RESPONSE_ONLY_ENABLE))
	else if((scan_resp_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_ELEMENT_SIZE + BLE_GAP_ADV_SERVICE_128BIT_UUID_LENGTH))) {
		uint8_t length_field_ind;
		uint8_t scan_resp_element_len;
		scn_resp[scan_resp_data_element.len] = scan_resp_data_element.len;
1000ea04:	2300      	movs	r3, #0
1000ea06:	466a      	mov	r2, sp
1000ea08:	7013      	strb	r3, [r2, #0]
		length_field_ind = scan_resp_data_element.len;
		scan_resp_data_element.len++;
		scn_resp[scan_resp_data_element.len++] = LIST_128BIT_SERV_SOLICITATION_UUIDS;
1000ea0a:	3315      	adds	r3, #21
1000ea0c:	7053      	strb	r3, [r2, #1]
		return AT_BLE_GAP_INVALID_PARAM;
	}
	#endif
	
	#if BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_ENABLE
    DBG_LOG_DEV("[ble_manager]\t\t\tManufacturer specific data enabled");
1000ea0e:	4812      	ldr	r0, [pc, #72]	; (1000ea58 <ble_advertisement_data_set+0x8c>)
1000ea10:	4b12      	ldr	r3, [pc, #72]	; (1000ea5c <ble_advertisement_data_set+0x90>)
1000ea12:	4798      	blx	r3
1000ea14:	4812      	ldr	r0, [pc, #72]	; (1000ea60 <ble_advertisement_data_set+0x94>)
1000ea16:	4b13      	ldr	r3, [pc, #76]	; (1000ea64 <ble_advertisement_data_set+0x98>)
1000ea18:	4798      	blx	r3
    DBG_LOG_DEV("[ble_manager]\t\tManufacturer specific data NOT enabled");
	if(false){}
	#endif
	#if ((BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_SCN_RSP_ENABLE == SCAN_RESPONSE_ENABLE) || (BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_SCN_RSP_ENABLE == SCAN_RESPONSE_ONLY_ENABLE))
	else if((scan_resp_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE))) {
		scn_resp[scan_resp_data_element.len++] = BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE + ADV_TYPE_SIZE;
1000ea1a:	466b      	mov	r3, sp
1000ea1c:	701d      	strb	r5, [r3, #0]
		scn_resp[scan_resp_data_element.len++] = MANUFACTURER_SPECIFIC_DATA;
1000ea1e:	23ff      	movs	r3, #255	; 0xff
1000ea20:	466a      	mov	r2, sp
1000ea22:	7053      	strb	r3, [r2, #1]
		memcpy(&scn_resp[scan_resp_data_element.len], BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA, BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE);
1000ea24:	2208      	movs	r2, #8
1000ea26:	4910      	ldr	r1, [pc, #64]	; (1000ea68 <ble_advertisement_data_set+0x9c>)
1000ea28:	466b      	mov	r3, sp
1000ea2a:	1c98      	adds	r0, r3, #2
1000ea2c:	4b0f      	ldr	r3, [pc, #60]	; (1000ea6c <ble_advertisement_data_set+0xa0>)
1000ea2e:	4798      	blx	r3
		DBG_LOG_ADV("Failed to add Manufacturer specific data");
		return AT_BLE_GAP_INVALID_PARAM;
	}
	#endif
	
	if (at_ble_adv_data_set(adv_buf, adv_data_element.len, scn_resp,
1000ea30:	230a      	movs	r3, #10
1000ea32:	466a      	mov	r2, sp
1000ea34:	2115      	movs	r1, #21
1000ea36:	0020      	movs	r0, r4
1000ea38:	4c0d      	ldr	r4, [pc, #52]	; (1000ea70 <ble_advertisement_data_set+0xa4>)
1000ea3a:	47a0      	blx	r4
1000ea3c:	2800      	cmp	r0, #0
1000ea3e:	d005      	beq.n	1000ea4c <ble_advertisement_data_set+0x80>
	scan_resp_data_element.len) != AT_BLE_SUCCESS) {
		DBG_LOG("BLE Advertisement data set failed");
1000ea40:	4805      	ldr	r0, [pc, #20]	; (1000ea58 <ble_advertisement_data_set+0x8c>)
1000ea42:	4b06      	ldr	r3, [pc, #24]	; (1000ea5c <ble_advertisement_data_set+0x90>)
1000ea44:	4798      	blx	r3
1000ea46:	480b      	ldr	r0, [pc, #44]	; (1000ea74 <ble_advertisement_data_set+0xa8>)
1000ea48:	4b06      	ldr	r3, [pc, #24]	; (1000ea64 <ble_advertisement_data_set+0x98>)
1000ea4a:	4798      	blx	r3
            //DBG_LOG_ADV("- 0x%02x(%c) ", adv_buf[i], adv_buf[i]);
        //}
		//DBG_LOG_ADV("BLE Advertisement data set success");
		return AT_BLE_SUCCESS;
    }
}
1000ea4c:	2000      	movs	r0, #0
1000ea4e:	b011      	add	sp, #68	; 0x44
1000ea50:	bd30      	pop	{r4, r5, pc}
1000ea52:	46c0      	nop			; (mov r8, r8)
1000ea54:	100177a8 	.word	0x100177a8
1000ea58:	10015f9c 	.word	0x10015f9c
1000ea5c:	10014df5 	.word	0x10014df5
1000ea60:	10017aac 	.word	0x10017aac
1000ea64:	10014cd5 	.word	0x10014cd5
1000ea68:	10017ae0 	.word	0x10017ae0
1000ea6c:	10014b7b 	.word	0x10014b7b
1000ea70:	1001054d 	.word	0x1001054d
1000ea74:	10017aec 	.word	0x10017aec

1000ea78 <register_ble_user_event_cb>:

/** @brief function to register callback to be called when AT_BLE_PLATFORM_EVENT event triggered from stack */
void register_ble_user_event_cb(ble_user_event_callback_t cb_fn)
{
	ble_user_event_cb = cb_fn;
1000ea78:	4b01      	ldr	r3, [pc, #4]	; (1000ea80 <register_ble_user_event_cb+0x8>)
1000ea7a:	6018      	str	r0, [r3, #0]
}
1000ea7c:	4770      	bx	lr
1000ea7e:	46c0      	nop			; (mov r8, r8)
1000ea80:	100188b8 	.word	0x100188b8

1000ea84 <uart_read_complete_callback>:

void _time_start(unsigned int sec);
unsigned int _time_done(void);

static void uart_read_complete_callback(struct uart_module *const module)
{
1000ea84:	b510      	push	{r4, lr}
	if(read_status == UART_READ_WAITING) {
1000ea86:	4b0e      	ldr	r3, [pc, #56]	; (1000eac0 <uart_read_complete_callback+0x3c>)
1000ea88:	781b      	ldrb	r3, [r3, #0]
1000ea8a:	2b01      	cmp	r3, #1
1000ea8c:	d10b      	bne.n	1000eaa6 <uart_read_complete_callback+0x22>
		read_status = UART_READ_DONE;
1000ea8e:	2202      	movs	r2, #2
1000ea90:	4b0b      	ldr	r3, [pc, #44]	; (1000eac0 <uart_read_complete_callback+0x3c>)
1000ea92:	701a      	strb	r2, [r3, #0]
		
		if(user_callback_func == NULL)
1000ea94:	4b0b      	ldr	r3, [pc, #44]	; (1000eac4 <uart_read_complete_callback+0x40>)
1000ea96:	681b      	ldr	r3, [r3, #0]
1000ea98:	2b00      	cmp	r3, #0
1000ea9a:	d110      	bne.n	1000eabe <uart_read_complete_callback+0x3a>
			uart_disable_callback(&uart_instance, UART_RX_COMPLETE);
1000ea9c:	2102      	movs	r1, #2
1000ea9e:	480a      	ldr	r0, [pc, #40]	; (1000eac8 <uart_read_complete_callback+0x44>)
1000eaa0:	4b0a      	ldr	r3, [pc, #40]	; (1000eacc <uart_read_complete_callback+0x48>)
1000eaa2:	4798      	blx	r3
1000eaa4:	e00b      	b.n	1000eabe <uart_read_complete_callback+0x3a>
	}
	else if(user_callback_func != NULL) {
1000eaa6:	4b07      	ldr	r3, [pc, #28]	; (1000eac4 <uart_read_complete_callback+0x40>)
1000eaa8:	681b      	ldr	r3, [r3, #0]
1000eaaa:	2b00      	cmp	r3, #0
1000eaac:	d007      	beq.n	1000eabe <uart_read_complete_callback+0x3a>
		user_callback_func(string_input[0]);
1000eaae:	4c08      	ldr	r4, [pc, #32]	; (1000ead0 <uart_read_complete_callback+0x4c>)
1000eab0:	7820      	ldrb	r0, [r4, #0]
1000eab2:	4798      	blx	r3
		uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000eab4:	2201      	movs	r2, #1
1000eab6:	0021      	movs	r1, r4
1000eab8:	4803      	ldr	r0, [pc, #12]	; (1000eac8 <uart_read_complete_callback+0x44>)
1000eaba:	4b06      	ldr	r3, [pc, #24]	; (1000ead4 <uart_read_complete_callback+0x50>)
1000eabc:	4798      	blx	r3
	}
	else {
		//Nothing to do.
	}
}
1000eabe:	bd10      	pop	{r4, pc}
1000eac0:	100198cc 	.word	0x100198cc
1000eac4:	100198d4 	.word	0x100198d4
1000eac8:	1001a570 	.word	0x1001a570
1000eacc:	1000d469 	.word	0x1000d469
1000ead0:	100198d0 	.word	0x100198d0
1000ead4:	1000d40d 	.word	0x1000d40d

1000ead8 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct uart_module *const module,
		uint8_t *c)
{
1000ead8:	b570      	push	{r4, r5, r6, lr}
1000eada:	0006      	movs	r6, r0
1000eadc:	000d      	movs	r5, r1
	while(STATUS_OK != uart_read_wait(module, c));
1000eade:	4c03      	ldr	r4, [pc, #12]	; (1000eaec <usart_serial_getchar+0x14>)
1000eae0:	0029      	movs	r1, r5
1000eae2:	0030      	movs	r0, r6
1000eae4:	47a0      	blx	r4
1000eae6:	2800      	cmp	r0, #0
1000eae8:	d1fa      	bne.n	1000eae0 <usart_serial_getchar+0x8>
}
1000eaea:	bd70      	pop	{r4, r5, r6, pc}
1000eaec:	1000d3f9 	.word	0x1000d3f9

1000eaf0 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct uart_module *const module,
		uint8_t c)
{
1000eaf0:	b570      	push	{r4, r5, r6, lr}
1000eaf2:	0006      	movs	r6, r0
1000eaf4:	000d      	movs	r5, r1
	while(STATUS_OK !=uart_write_wait(module, c));
1000eaf6:	4c03      	ldr	r4, [pc, #12]	; (1000eb04 <usart_serial_putchar+0x14>)
1000eaf8:	0029      	movs	r1, r5
1000eafa:	0030      	movs	r0, r6
1000eafc:	47a0      	blx	r4
1000eafe:	2800      	cmp	r0, #0
1000eb00:	d1fa      	bne.n	1000eaf8 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
1000eb02:	bd70      	pop	{r4, r5, r6, pc}
1000eb04:	1000d3e9 	.word	0x1000d3e9

1000eb08 <serial_console_init>:

void serial_console_init(void)
{
1000eb08:	b570      	push	{r4, r5, r6, lr}
	system_clock_config(CLOCK_RESOURCE_XO_26_MHZ, CLOCK_FREQ_26_MHZ);
1000eb0a:	2100      	movs	r1, #0
1000eb0c:	2000      	movs	r0, #0
1000eb0e:	4b19      	ldr	r3, [pc, #100]	; (1000eb74 <serial_console_init+0x6c>)
1000eb10:	4798      	blx	r3

	uart_get_config_defaults(&config_uart);
1000eb12:	4c19      	ldr	r4, [pc, #100]	; (1000eb78 <serial_console_init+0x70>)
1000eb14:	0020      	movs	r0, r4
1000eb16:	4b19      	ldr	r3, [pc, #100]	; (1000eb7c <serial_console_init+0x74>)
1000eb18:	4798      	blx	r3

	config_uart.baud_rate = CONF_STDIO_BAUDRATE;
1000eb1a:	23e1      	movs	r3, #225	; 0xe1
1000eb1c:	025b      	lsls	r3, r3, #9
1000eb1e:	6023      	str	r3, [r4, #0]
	config_uart.pin_number_pad[0] = EDBG_CDC_PIN_PAD0;
1000eb20:	2302      	movs	r3, #2
1000eb22:	60a3      	str	r3, [r4, #8]
	config_uart.pin_number_pad[1] = EDBG_CDC_PIN_PAD1;
1000eb24:	2203      	movs	r2, #3
1000eb26:	60e2      	str	r2, [r4, #12]
	config_uart.pin_number_pad[2] = EDBG_CDC_PIN_PAD2;
1000eb28:	3201      	adds	r2, #1
1000eb2a:	6122      	str	r2, [r4, #16]
	config_uart.pin_number_pad[3] = EDBG_CDC_PIN_PAD3;
1000eb2c:	3201      	adds	r2, #1
1000eb2e:	6162      	str	r2, [r4, #20]
	
	config_uart.pinmux_sel_pad[0] = EDBG_CDC_MUX_PAD0;
1000eb30:	61a3      	str	r3, [r4, #24]
	config_uart.pinmux_sel_pad[1] = EDBG_CDC_MUX_PAD1;
1000eb32:	61e3      	str	r3, [r4, #28]
	config_uart.pinmux_sel_pad[2] = EDBG_CDC_MUX_PAD2;
1000eb34:	6223      	str	r3, [r4, #32]
	config_uart.pinmux_sel_pad[3] = EDBG_CDC_MUX_PAD3;
1000eb36:	6263      	str	r3, [r4, #36]	; 0x24
static inline void stdio_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	stdio_base = (void *)module;
1000eb38:	4d11      	ldr	r5, [pc, #68]	; (1000eb80 <serial_console_init+0x78>)
1000eb3a:	4b12      	ldr	r3, [pc, #72]	; (1000eb84 <serial_console_init+0x7c>)
1000eb3c:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
1000eb3e:	4a12      	ldr	r2, [pc, #72]	; (1000eb88 <serial_console_init+0x80>)
1000eb40:	4b12      	ldr	r3, [pc, #72]	; (1000eb8c <serial_console_init+0x84>)
1000eb42:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
1000eb44:	4a12      	ldr	r2, [pc, #72]	; (1000eb90 <serial_console_init+0x88>)
1000eb46:	4b13      	ldr	r3, [pc, #76]	; (1000eb94 <serial_console_init+0x8c>)
1000eb48:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	if (uart_init(module, hw, config) == STATUS_OK) {
1000eb4a:	0022      	movs	r2, r4
1000eb4c:	4912      	ldr	r1, [pc, #72]	; (1000eb98 <serial_console_init+0x90>)
1000eb4e:	0028      	movs	r0, r5
1000eb50:	4b12      	ldr	r3, [pc, #72]	; (1000eb9c <serial_console_init+0x94>)
1000eb52:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
1000eb54:	4e12      	ldr	r6, [pc, #72]	; (1000eba0 <serial_console_init+0x98>)
1000eb56:	6833      	ldr	r3, [r6, #0]
1000eb58:	6898      	ldr	r0, [r3, #8]
1000eb5a:	2100      	movs	r1, #0
1000eb5c:	4c11      	ldr	r4, [pc, #68]	; (1000eba4 <serial_console_init+0x9c>)
1000eb5e:	47a0      	blx	r4
	setbuf(stdin, NULL);
1000eb60:	6833      	ldr	r3, [r6, #0]
1000eb62:	6858      	ldr	r0, [r3, #4]
1000eb64:	2100      	movs	r1, #0
1000eb66:	47a0      	blx	r4

	stdio_serial_init(&uart_instance, CONF_STDIO_USART_MODULE, &config_uart);
	
	uart_register_callback(&uart_instance, uart_read_complete_callback, UART_RX_COMPLETE);
1000eb68:	2202      	movs	r2, #2
1000eb6a:	490f      	ldr	r1, [pc, #60]	; (1000eba8 <serial_console_init+0xa0>)
1000eb6c:	0028      	movs	r0, r5
1000eb6e:	4b0f      	ldr	r3, [pc, #60]	; (1000ebac <serial_console_init+0xa4>)
1000eb70:	4798      	blx	r3
}
1000eb72:	bd70      	pop	{r4, r5, r6, pc}
1000eb74:	1000c409 	.word	0x1000c409
1000eb78:	1001a594 	.word	0x1001a594
1000eb7c:	1000d201 	.word	0x1000d201
1000eb80:	1001a570 	.word	0x1001a570
1000eb84:	10019d2c 	.word	0x10019d2c
1000eb88:	1000eaf1 	.word	0x1000eaf1
1000eb8c:	10019d28 	.word	0x10019d28
1000eb90:	1000ead9 	.word	0x1000ead9
1000eb94:	10019d24 	.word	0x10019d24
1000eb98:	40004000 	.word	0x40004000
1000eb9c:	1000d22d 	.word	0x1000d22d
1000eba0:	10017f98 	.word	0x10017f98
1000eba4:	10014ea5 	.word	0x10014ea5
1000eba8:	1000ea85 	.word	0x1000ea85
1000ebac:	1000d435 	.word	0x1000d435

1000ebb0 <_time_start>:

void _time_start(unsigned int sec)
{
1000ebb0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ebb2:	b083      	sub	sp, #12
1000ebb4:	0005      	movs	r5, r0
	system_clock_get_value();
1000ebb6:	4c0d      	ldr	r4, [pc, #52]	; (1000ebec <_time_start+0x3c>)
1000ebb8:	47a0      	blx	r4
	unsigned int main_clk = system_clock_get_value();
1000ebba:	47a0      	blx	r4

	tick = (((double)(main_clk)) * ((double)0.0000493)) * (sec * 1000);
1000ebbc:	4f0c      	ldr	r7, [pc, #48]	; (1000ebf0 <_time_start+0x40>)
1000ebbe:	47b8      	blx	r7
1000ebc0:	4e0c      	ldr	r6, [pc, #48]	; (1000ebf4 <_time_start+0x44>)
1000ebc2:	4a0d      	ldr	r2, [pc, #52]	; (1000ebf8 <_time_start+0x48>)
1000ebc4:	4b0d      	ldr	r3, [pc, #52]	; (1000ebfc <_time_start+0x4c>)
1000ebc6:	47b0      	blx	r6
1000ebc8:	9000      	str	r0, [sp, #0]
1000ebca:	9101      	str	r1, [sp, #4]
1000ebcc:	20fa      	movs	r0, #250	; 0xfa
1000ebce:	0080      	lsls	r0, r0, #2
1000ebd0:	4368      	muls	r0, r5
1000ebd2:	47b8      	blx	r7
1000ebd4:	0002      	movs	r2, r0
1000ebd6:	000b      	movs	r3, r1
1000ebd8:	9800      	ldr	r0, [sp, #0]
1000ebda:	9901      	ldr	r1, [sp, #4]
1000ebdc:	47b0      	blx	r6
1000ebde:	4b08      	ldr	r3, [pc, #32]	; (1000ec00 <_time_start+0x50>)
1000ebe0:	4798      	blx	r3
1000ebe2:	4b08      	ldr	r3, [pc, #32]	; (1000ec04 <_time_start+0x54>)
1000ebe4:	6018      	str	r0, [r3, #0]
}
1000ebe6:	b003      	add	sp, #12
1000ebe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ebea:	46c0      	nop			; (mov r8, r8)
1000ebec:	1000c48d 	.word	0x1000c48d
1000ebf0:	10014a51 	.word	0x10014a51
1000ebf4:	10013e49 	.word	0x10013e49
1000ebf8:	19feaec7 	.word	0x19feaec7
1000ebfc:	3f09d8ef 	.word	0x3f09d8ef
1000ec00:	10013269 	.word	0x10013269
1000ec04:	100198c8 	.word	0x100198c8

1000ec08 <_time_done>:

unsigned int _time_done()
{
	return --tick;
1000ec08:	4b02      	ldr	r3, [pc, #8]	; (1000ec14 <_time_done+0xc>)
1000ec0a:	681a      	ldr	r2, [r3, #0]
1000ec0c:	1e50      	subs	r0, r2, #1
1000ec0e:	6018      	str	r0, [r3, #0]
}
1000ec10:	4770      	bx	lr
1000ec12:	46c0      	nop			; (mov r8, r8)
1000ec14:	100198c8 	.word	0x100198c8

1000ec18 <getchar_b11_timeout>:

int getchar_b11_timeout(unsigned int sec)
{
1000ec18:	b570      	push	{r4, r5, r6, lr}
1000ec1a:	0004      	movs	r4, r0
	read_status = UART_READ_WAITING;
1000ec1c:	2201      	movs	r2, #1
1000ec1e:	4b11      	ldr	r3, [pc, #68]	; (1000ec64 <getchar_b11_timeout+0x4c>)
1000ec20:	701a      	strb	r2, [r3, #0]
	
	if(user_callback_func == NULL)
1000ec22:	4b11      	ldr	r3, [pc, #68]	; (1000ec68 <getchar_b11_timeout+0x50>)
1000ec24:	681b      	ldr	r3, [r3, #0]
1000ec26:	2b00      	cmp	r3, #0
1000ec28:	d103      	bne.n	1000ec32 <getchar_b11_timeout+0x1a>
		uart_enable_callback(&uart_instance, UART_RX_COMPLETE);
1000ec2a:	2102      	movs	r1, #2
1000ec2c:	480f      	ldr	r0, [pc, #60]	; (1000ec6c <getchar_b11_timeout+0x54>)
1000ec2e:	4b10      	ldr	r3, [pc, #64]	; (1000ec70 <getchar_b11_timeout+0x58>)
1000ec30:	4798      	blx	r3

	_time_start(sec);
1000ec32:	0020      	movs	r0, r4
1000ec34:	4b0f      	ldr	r3, [pc, #60]	; (1000ec74 <getchar_b11_timeout+0x5c>)
1000ec36:	4798      	blx	r3
	
	string_input[0] = 0;
1000ec38:	490f      	ldr	r1, [pc, #60]	; (1000ec78 <getchar_b11_timeout+0x60>)
1000ec3a:	2300      	movs	r3, #0
1000ec3c:	700b      	strb	r3, [r1, #0]
	uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000ec3e:	2201      	movs	r2, #1
1000ec40:	480a      	ldr	r0, [pc, #40]	; (1000ec6c <getchar_b11_timeout+0x54>)
1000ec42:	4b0e      	ldr	r3, [pc, #56]	; (1000ec7c <getchar_b11_timeout+0x64>)
1000ec44:	4798      	blx	r3
	
	while (read_status != UART_READ_DONE && _time_done() > 0 );
1000ec46:	4c07      	ldr	r4, [pc, #28]	; (1000ec64 <getchar_b11_timeout+0x4c>)
1000ec48:	4d0d      	ldr	r5, [pc, #52]	; (1000ec80 <getchar_b11_timeout+0x68>)
1000ec4a:	7823      	ldrb	r3, [r4, #0]
1000ec4c:	2b02      	cmp	r3, #2
1000ec4e:	d002      	beq.n	1000ec56 <getchar_b11_timeout+0x3e>
1000ec50:	47a8      	blx	r5
1000ec52:	2800      	cmp	r0, #0
1000ec54:	d1f9      	bne.n	1000ec4a <getchar_b11_timeout+0x32>
	
	read_status = UART_READ_NONE;
1000ec56:	2200      	movs	r2, #0
1000ec58:	4b02      	ldr	r3, [pc, #8]	; (1000ec64 <getchar_b11_timeout+0x4c>)
1000ec5a:	701a      	strb	r2, [r3, #0]

	return string_input[0];
1000ec5c:	4b06      	ldr	r3, [pc, #24]	; (1000ec78 <getchar_b11_timeout+0x60>)
1000ec5e:	7818      	ldrb	r0, [r3, #0]
}
1000ec60:	bd70      	pop	{r4, r5, r6, pc}
1000ec62:	46c0      	nop			; (mov r8, r8)
1000ec64:	100198cc 	.word	0x100198cc
1000ec68:	100198d4 	.word	0x100198d4
1000ec6c:	1001a570 	.word	0x1001a570
1000ec70:	1000d449 	.word	0x1000d449
1000ec74:	1000ebb1 	.word	0x1000ebb1
1000ec78:	100198d0 	.word	0x100198d0
1000ec7c:	1000d40d 	.word	0x1000d40d
1000ec80:	1000ec09 	.word	0x1000ec09

1000ec84 <platform_event_free>:
void platform_event_free(struct platform_event* event);
//struct str_watched_event watched_event;

void platform_event_free(struct platform_event* event)
{
	event->next = platform_event_free_list;
1000ec84:	4b02      	ldr	r3, [pc, #8]	; (1000ec90 <platform_event_free+0xc>)
1000ec86:	681a      	ldr	r2, [r3, #0]
1000ec88:	6002      	str	r2, [r0, #0]
	platform_event_free_list = event;
1000ec8a:	6018      	str	r0, [r3, #0]
}
1000ec8c:	4770      	bx	lr
1000ec8e:	46c0      	nop			; (mov r8, r8)
1000ec90:	100198dc 	.word	0x100198dc

1000ec94 <platform_event_post>:

void platform_event_post(uint16_t event_type, void * data, uint16_t data_len)
{
1000ec94:	b530      	push	{r4, r5, lr}
	// get a free event object
	struct platform_event* evt = platform_event_free_list;
1000ec96:	4b0b      	ldr	r3, [pc, #44]	; (1000ecc4 <platform_event_post+0x30>)
1000ec98:	681c      	ldr	r4, [r3, #0]
	if(evt != NULL)
1000ec9a:	2c00      	cmp	r4, #0
1000ec9c:	d011      	beq.n	1000ecc2 <platform_event_post+0x2e>
	{
		platform_event_free_list = evt->next;
1000ec9e:	6825      	ldr	r5, [r4, #0]
1000eca0:	601d      	str	r5, [r3, #0]
		
		evt->next = NULL;
1000eca2:	2300      	movs	r3, #0
1000eca4:	6023      	str	r3, [r4, #0]
		evt->data = data;
1000eca6:	60a1      	str	r1, [r4, #8]
		evt->data_len = data_len;
1000eca8:	80e2      	strh	r2, [r4, #6]
		evt->event_type = event_type;
1000ecaa:	80a0      	strh	r0, [r4, #4]

		if(platform_event_pending_list == NULL)
1000ecac:	4b06      	ldr	r3, [pc, #24]	; (1000ecc8 <platform_event_post+0x34>)
1000ecae:	681a      	ldr	r2, [r3, #0]
1000ecb0:	2a00      	cmp	r2, #0
1000ecb2:	d102      	bne.n	1000ecba <platform_event_post+0x26>
		{
			platform_event_pending_list = evt;
1000ecb4:	601c      	str	r4, [r3, #0]
1000ecb6:	e004      	b.n	1000ecc2 <platform_event_post+0x2e>
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
			{
				cur = cur->next;
1000ecb8:	001a      	movs	r2, r3
			platform_event_pending_list = evt;
		}
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
1000ecba:	6813      	ldr	r3, [r2, #0]
1000ecbc:	2b00      	cmp	r3, #0
1000ecbe:	d1fb      	bne.n	1000ecb8 <platform_event_post+0x24>
			{
				cur = cur->next;
			}
			cur->next = evt;
1000ecc0:	6014      	str	r4, [r2, #0]
		}
		
		//platform_event_signal();
	}
	
}
1000ecc2:	bd30      	pop	{r4, r5, pc}
1000ecc4:	100198dc 	.word	0x100198dc
1000ecc8:	100198d8 	.word	0x100198d8

1000eccc <platform_event_init>:
	return status;
	
}

void platform_event_init()
{
1000eccc:	b570      	push	{r4, r5, r6, lr}
	uint32_t i;
	platform_event_free_list = NULL;
1000ecce:	2300      	movs	r3, #0
1000ecd0:	4a06      	ldr	r2, [pc, #24]	; (1000ecec <platform_event_init+0x20>)
1000ecd2:	6013      	str	r3, [r2, #0]
	platform_event_pending_list = NULL;
1000ecd4:	4a06      	ldr	r2, [pc, #24]	; (1000ecf0 <platform_event_init+0x24>)
1000ecd6:	6013      	str	r3, [r2, #0]
1000ecd8:	4c06      	ldr	r4, [pc, #24]	; (1000ecf4 <platform_event_init+0x28>)
1000ecda:	0026      	movs	r6, r4
1000ecdc:	3678      	adds	r6, #120	; 0x78
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
	{
		platform_event_free(&platform_event_pool[i]);
1000ecde:	4d06      	ldr	r5, [pc, #24]	; (1000ecf8 <platform_event_init+0x2c>)
1000ece0:	0020      	movs	r0, r4
1000ece2:	47a8      	blx	r5
1000ece4:	340c      	adds	r4, #12
{
	uint32_t i;
	platform_event_free_list = NULL;
	platform_event_pending_list = NULL;
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
1000ece6:	42b4      	cmp	r4, r6
1000ece8:	d1fa      	bne.n	1000ece0 <platform_event_init+0x14>
	{
		platform_event_free(&platform_event_pool[i]);
	}
}
1000ecea:	bd70      	pop	{r4, r5, r6, pc}
1000ecec:	100198dc 	.word	0x100198dc
1000ecf0:	100198d8 	.word	0x100198d8
1000ecf4:	100198e0 	.word	0x100198e0
1000ecf8:	1000ec85 	.word	0x1000ec85

1000ecfc <at_ke_msg_send>:
	}
	return status;
}

static void at_ke_msg_send(void const * param_ptr)
{
1000ecfc:	b570      	push	{r4, r5, r6, lr}
1000ecfe:	0004      	movs	r4, r0
	struct ke_msg *kemsg;
	uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
1000ed00:	4b13      	ldr	r3, [pc, #76]	; (1000ed50 <at_ke_msg_send+0x54>)
1000ed02:	681d      	ldr	r5, [r3, #0]
	ke_msg_send(param_ptr);
1000ed04:	4b13      	ldr	r3, [pc, #76]	; (1000ed54 <at_ke_msg_send+0x58>)
1000ed06:	681b      	ldr	r3, [r3, #0]
1000ed08:	4798      	blx	r3
	kemsg = ke_param2msg(param_ptr);

	if((kemsg != NULL) && (kemsg->dest_id != TASK_INTERNAL_APP)) {
1000ed0a:	2c0c      	cmp	r4, #12
1000ed0c:	d01f      	beq.n	1000ed4e <at_ke_msg_send+0x52>
1000ed0e:	3c0c      	subs	r4, #12
1000ed10:	88e3      	ldrh	r3, [r4, #6]
1000ed12:	2b05      	cmp	r3, #5
1000ed14:	d01b      	beq.n	1000ed4e <at_ke_msg_send+0x52>
		if(osc_en == 0)
1000ed16:	07eb      	lsls	r3, r5, #31
1000ed18:	d414      	bmi.n	1000ed44 <at_ke_msg_send+0x48>
		{
			/* BLE Core is off, issue a wakeup request*/
			/* First, make sure PD4 is powered up and out of reset */
			pwr_enable_arm_wakeup(1<<1);
1000ed1a:	4b0f      	ldr	r3, [pc, #60]	; (1000ed58 <at_ke_msg_send+0x5c>)
1000ed1c:	681b      	ldr	r3, [r3, #0]
1000ed1e:	2002      	movs	r0, #2
1000ed20:	4798      	blx	r3
			pwr_arm_wakeup_req();
1000ed22:	4b0e      	ldr	r3, [pc, #56]	; (1000ed5c <at_ke_msg_send+0x60>)
1000ed24:	681b      	ldr	r3, [r3, #0]
1000ed26:	4798      	blx	r3
			while (pwr_wait_BLE_out_of_reset(3));
1000ed28:	4c0d      	ldr	r4, [pc, #52]	; (1000ed60 <at_ke_msg_send+0x64>)
1000ed2a:	2003      	movs	r0, #3
1000ed2c:	6823      	ldr	r3, [r4, #0]
1000ed2e:	4798      	blx	r3
1000ed30:	2800      	cmp	r0, #0
1000ed32:	d1fa      	bne.n	1000ed2a <at_ke_msg_send+0x2e>
			pwr_disable_arm_wakeup(1<<1);
1000ed34:	4b0b      	ldr	r3, [pc, #44]	; (1000ed64 <at_ke_msg_send+0x68>)
1000ed36:	681b      	ldr	r3, [r3, #0]
1000ed38:	3002      	adds	r0, #2
1000ed3a:	4798      	blx	r3
			REG_PL_WR(0x4000B020, 1);
1000ed3c:	2201      	movs	r2, #1
1000ed3e:	4b0a      	ldr	r3, [pc, #40]	; (1000ed68 <at_ke_msg_send+0x6c>)
1000ed40:	601a      	str	r2, [r3, #0]
1000ed42:	e004      	b.n	1000ed4e <at_ke_msg_send+0x52>
#endif	//CHIPVERSION_B0
		}
		else
		{
			/*  */
			os_sem_up(gstrFwSem);
1000ed44:	4b09      	ldr	r3, [pc, #36]	; (1000ed6c <at_ke_msg_send+0x70>)
1000ed46:	6818      	ldr	r0, [r3, #0]
1000ed48:	4b09      	ldr	r3, [pc, #36]	; (1000ed70 <at_ke_msg_send+0x74>)
1000ed4a:	681b      	ldr	r3, [r3, #0]
1000ed4c:	4798      	blx	r3
		}
	}
}
1000ed4e:	bd70      	pop	{r4, r5, r6, pc}
1000ed50:	4000b1ec 	.word	0x4000b1ec
1000ed54:	10019988 	.word	0x10019988
1000ed58:	10019980 	.word	0x10019980
1000ed5c:	10019994 	.word	0x10019994
1000ed60:	10019968 	.word	0x10019968
1000ed64:	10019970 	.word	0x10019970
1000ed68:	4000b020 	.word	0x4000b020
1000ed6c:	10019974 	.word	0x10019974
1000ed70:	10019964 	.word	0x10019964

1000ed74 <samb11_plf_resume_callback>:
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
	return status;
}

void samb11_plf_resume_callback(void)
{
1000ed74:	b510      	push	{r4, lr}
	//spi_flash_turn_off();
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,default_samb11_clock_init[0]);
1000ed76:	4b06      	ldr	r3, [pc, #24]	; (1000ed90 <samb11_plf_resume_callback+0x1c>)
1000ed78:	4a06      	ldr	r2, [pc, #24]	; (1000ed94 <samb11_plf_resume_callback+0x20>)
1000ed7a:	6819      	ldr	r1, [r3, #0]
1000ed7c:	6011      	str	r1, [r2, #0]
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,default_samb11_clock_init[1]);
1000ed7e:	685a      	ldr	r2, [r3, #4]
1000ed80:	4b05      	ldr	r3, [pc, #20]	; (1000ed98 <samb11_plf_resume_callback+0x24>)
1000ed82:	601a      	str	r2, [r3, #0]
	if(samb11_app_resume_cb != NULL)
1000ed84:	4b05      	ldr	r3, [pc, #20]	; (1000ed9c <samb11_plf_resume_callback+0x28>)
1000ed86:	681b      	ldr	r3, [r3, #0]
1000ed88:	2b00      	cmp	r3, #0
1000ed8a:	d000      	beq.n	1000ed8e <samb11_plf_resume_callback+0x1a>
	{
		samb11_app_resume_cb();
1000ed8c:	4798      	blx	r3
	}
}
1000ed8e:	bd10      	pop	{r4, pc}
1000ed90:	1001a5bc 	.word	0x1001a5bc
1000ed94:	4000b00c 	.word	0x4000b00c
1000ed98:	4000b010 	.word	0x4000b010
1000ed9c:	1001a898 	.word	0x1001a898

1000eda0 <init_port_list>:
port port_list[LPGPIO_MAX];
uint32_t default_samb11_clock_init[2];
void samb11_plf_resume_callback(void);

void init_port_list(void)
{
1000eda0:	b570      	push	{r4, r5, r6, lr}
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
1000eda2:	2232      	movs	r2, #50	; 0x32
1000eda4:	2100      	movs	r1, #0
1000eda6:	480d      	ldr	r0, [pc, #52]	; (1000eddc <init_port_list+0x3c>)
1000eda8:	4b0d      	ldr	r3, [pc, #52]	; (1000ede0 <init_port_list+0x40>)
1000edaa:	4798      	blx	r3
1000edac:	2100      	movs	r1, #0
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000edae:	480b      	ldr	r0, [pc, #44]	; (1000eddc <init_port_list+0x3c>)
		port_list[i].bit.available = 1;
1000edb0:	2501      	movs	r5, #1
		port_list[i].bit.configured = 0;
1000edb2:	2402      	movs	r4, #2
void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000edb4:	004a      	lsls	r2, r1, #1
1000edb6:	5411      	strb	r1, [r2, r0]
		port_list[i].bit.available = 1;
1000edb8:	1882      	adds	r2, r0, r2
1000edba:	7853      	ldrb	r3, [r2, #1]
1000edbc:	432b      	orrs	r3, r5
		port_list[i].bit.configured = 0;
1000edbe:	b2db      	uxtb	r3, r3
1000edc0:	43a3      	bics	r3, r4
1000edc2:	7053      	strb	r3, [r2, #1]
1000edc4:	3101      	adds	r1, #1

void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
1000edc6:	2919      	cmp	r1, #25
1000edc8:	d1f4      	bne.n	1000edb4 <init_port_list+0x14>
		port_list[i].bit.gpio_num = i;
		port_list[i].bit.available = 1;
		port_list[i].bit.configured = 0;
	}
	//Set the GPIO for SWD is not available
	port_list[0].bit.available = 0;
1000edca:	4b04      	ldr	r3, [pc, #16]	; (1000eddc <init_port_list+0x3c>)
1000edcc:	785a      	ldrb	r2, [r3, #1]
1000edce:	3918      	subs	r1, #24
1000edd0:	438a      	bics	r2, r1
1000edd2:	705a      	strb	r2, [r3, #1]
	port_list[1].bit.available = 0;
1000edd4:	78da      	ldrb	r2, [r3, #3]
1000edd6:	438a      	bics	r2, r1
1000edd8:	70da      	strb	r2, [r3, #3]
	//GPIO 14 is used for Coex and controlled by Firmware
	//port_list[14].bit.available = 0;
}
1000edda:	bd70      	pop	{r4, r5, r6, pc}
1000eddc:	1001a5d8 	.word	0x1001a5d8
1000ede0:	10014b8d 	.word	0x10014b8d

1000ede4 <init_clock>:

void init_clock(void)
{
	uint32_t regval;
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0);
1000ede4:	4a06      	ldr	r2, [pc, #24]	; (1000ee00 <init_clock+0x1c>)
1000ede6:	6811      	ldr	r1, [r2, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_1_CLK_EN);
	//disable UART core & interface clocks
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_IF_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN);
1000ede8:	4b06      	ldr	r3, [pc, #24]	; (1000ee04 <init_clock+0x20>)
1000edea:	400b      	ands	r3, r1
	//disable I2C core 1 clocks
	//regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C1_CORE_CLK_EN);		//do not disable I2C because I2C driver in ASF will not enable.
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,regval);
1000edec:	6013      	str	r3, [r2, #0]
	default_samb11_clock_init[0] = regval;
1000edee:	4a06      	ldr	r2, [pc, #24]	; (1000ee08 <init_clock+0x24>)
1000edf0:	6013      	str	r3, [r2, #0]
	
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1);
1000edf2:	4906      	ldr	r1, [pc, #24]	; (1000ee0c <init_clock+0x28>)
1000edf4:	6808      	ldr	r0, [r1, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_4_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_5_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_6_CLK_EN);
	//disable SPI SCK Phase int clock 
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN);
1000edf6:	4b06      	ldr	r3, [pc, #24]	; (1000ee10 <init_clock+0x2c>)
1000edf8:	4003      	ands	r3, r0
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,regval);
1000edfa:	600b      	str	r3, [r1, #0]
	default_samb11_clock_init[1] = regval;
1000edfc:	6053      	str	r3, [r2, #4]
	//ARM debugger
	
	//store default values
}
1000edfe:	4770      	bx	lr
1000ee00:	4000b00c 	.word	0x4000b00c
1000ee04:	fffe0fd3 	.word	0xfffe0fd3
1000ee08:	1001a5bc 	.word	0x1001a5bc
1000ee0c:	4000b010 	.word	0x4000b010
1000ee10:	ffffe7c0 	.word	0xffffe7c0

1000ee14 <platform_driver_init>:

plf_drv_status platform_driver_init()
{
1000ee14:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ee16:	4657      	mov	r7, sl
1000ee18:	464e      	mov	r6, r9
1000ee1a:	4645      	mov	r5, r8
1000ee1c:	b4e0      	push	{r5, r6, r7}
	plf_drv_status status = STATUS_NOT_INITIALIZED;
	if((platform_initialized == 0) || (platform_initialized != 1)) {
1000ee1e:	4b4f      	ldr	r3, [pc, #316]	; (1000ef5c <platform_driver_init+0x148>)
1000ee20:	781b      	ldrb	r3, [r3, #0]
1000ee22:	2b00      	cmp	r3, #0
1000ee24:	d004      	beq.n	1000ee30 <platform_driver_init+0x1c>
1000ee26:	4b4d      	ldr	r3, [pc, #308]	; (1000ef5c <platform_driver_init+0x148>)
1000ee28:	781b      	ldrb	r3, [r3, #0]
1000ee2a:	2b01      	cmp	r3, #1
1000ee2c:	d100      	bne.n	1000ee30 <platform_driver_init+0x1c>
1000ee2e:	e08c      	b.n	1000ef4a <platform_driver_init+0x136>
		init_port_list();
1000ee30:	4b4b      	ldr	r3, [pc, #300]	; (1000ef60 <platform_driver_init+0x14c>)
1000ee32:	4798      	blx	r3
		init_clock();
1000ee34:	4b4b      	ldr	r3, [pc, #300]	; (1000ef64 <platform_driver_init+0x150>)
1000ee36:	4798      	blx	r3
		// Initialize the ble stack message handler to NULL
		ble_stack_message_handler = NULL;
1000ee38:	2300      	movs	r3, #0
1000ee3a:	4698      	mov	r8, r3
1000ee3c:	4b4a      	ldr	r3, [pc, #296]	; (1000ef68 <platform_driver_init+0x154>)
1000ee3e:	4642      	mov	r2, r8
1000ee40:	601a      	str	r2, [r3, #0]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000ee42:	4c4a      	ldr	r4, [pc, #296]	; (1000ef6c <platform_driver_init+0x158>)
1000ee44:	2380      	movs	r3, #128	; 0x80
1000ee46:	2280      	movs	r2, #128	; 0x80
1000ee48:	0412      	lsls	r2, r2, #16
1000ee4a:	4692      	mov	sl, r2
1000ee4c:	50e2      	str	r2, [r4, r3]
1000ee4e:	2280      	movs	r2, #128	; 0x80
1000ee50:	0452      	lsls	r2, r2, #17
1000ee52:	4691      	mov	r9, r2
1000ee54:	50e2      	str	r2, [r4, r3]
#ifdef CHIPVERSION_B0
		NVIC_DisableIRQ(GPIO0_IRQn);
		NVIC_DisableIRQ(GPIO1_IRQn);
		/* NVIC_DisableIRQ(PORT0_COMB_IRQn); */
		/* NVIC_DisableIRQ(PORT1_COMB_IRQn); */
		platform_register_isr = (uint8_t (*)(uint8_t ,void *))0x000007d7;
1000ee56:	4d46      	ldr	r5, [pc, #280]	; (1000ef70 <platform_driver_init+0x15c>)
1000ee58:	4b46      	ldr	r3, [pc, #280]	; (1000ef74 <platform_driver_init+0x160>)
1000ee5a:	602b      	str	r3, [r5, #0]
		platform_unregister_isr = (uint8_t (*)(uint8_t ))0x000007bd;
1000ee5c:	4b46      	ldr	r3, [pc, #280]	; (1000ef78 <platform_driver_init+0x164>)
1000ee5e:	4a47      	ldr	r2, [pc, #284]	; (1000ef7c <platform_driver_init+0x168>)
1000ee60:	6013      	str	r3, [r2, #0]
		handle_ext_wakeup_isr = (void (*)(void))0x1bc51;
1000ee62:	4947      	ldr	r1, [pc, #284]	; (1000ef80 <platform_driver_init+0x16c>)
1000ee64:	4a47      	ldr	r2, [pc, #284]	; (1000ef84 <platform_driver_init+0x170>)
1000ee66:	6011      	str	r1, [r2, #0]
		gapm_get_task_from_id = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400bc));
1000ee68:	4a47      	ldr	r2, [pc, #284]	; (1000ef88 <platform_driver_init+0x174>)
1000ee6a:	6811      	ldr	r1, [r2, #0]
1000ee6c:	4a47      	ldr	r2, [pc, #284]	; (1000ef8c <platform_driver_init+0x178>)
1000ee6e:	6011      	str	r1, [r2, #0]
		gapm_get_id_from_task = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400b8));
1000ee70:	4a47      	ldr	r2, [pc, #284]	; (1000ef90 <platform_driver_init+0x17c>)
1000ee72:	6811      	ldr	r1, [r2, #0]
1000ee74:	4a47      	ldr	r2, [pc, #284]	; (1000ef94 <platform_driver_init+0x180>)
1000ee76:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_set = (void (*)(uint16_t))0x0001b99f;
1000ee78:	4947      	ldr	r1, [pc, #284]	; (1000ef98 <platform_driver_init+0x184>)
1000ee7a:	4a48      	ldr	r2, [pc, #288]	; (1000ef9c <platform_driver_init+0x188>)
1000ee7c:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_clear = (void (*)(uint16_t))0x0001b9db;
1000ee7e:	4948      	ldr	r1, [pc, #288]	; (1000efa0 <platform_driver_init+0x18c>)
1000ee80:	4a48      	ldr	r2, [pc, #288]	; (1000efa4 <platform_driver_init+0x190>)
1000ee82:	6011      	str	r1, [r2, #0]
		apps_resume_cb = (uint32_t *)0x1004003c;
1000ee84:	4f48      	ldr	r7, [pc, #288]	; (1000efa8 <platform_driver_init+0x194>)
1000ee86:	4a49      	ldr	r2, [pc, #292]	; (1000efac <platform_driver_init+0x198>)
1000ee88:	603a      	str	r2, [r7, #0]
		actualfreq = (uint32_t *)0x10041FC0; /* set to NULL for now as clock calibration is disabled for the time being */  /*(uint32_t *)0x10006bd8;*/
1000ee8a:	4949      	ldr	r1, [pc, #292]	; (1000efb0 <platform_driver_init+0x19c>)
1000ee8c:	4a49      	ldr	r2, [pc, #292]	; (1000efb4 <platform_driver_init+0x1a0>)
1000ee8e:	6011      	str	r1, [r2, #0]
		updateuartbr_fp = (void (*)())0x10041FC4;
1000ee90:	4949      	ldr	r1, [pc, #292]	; (1000efb8 <platform_driver_init+0x1a4>)
1000ee92:	4a4a      	ldr	r2, [pc, #296]	; (1000efbc <platform_driver_init+0x1a8>)
1000ee94:	6011      	str	r1, [r2, #0]
		wakeup_source_active_cb = (uint32_t *)0x10041FD4;
1000ee96:	4e4a      	ldr	r6, [pc, #296]	; (1000efc0 <platform_driver_init+0x1ac>)
1000ee98:	4a4a      	ldr	r2, [pc, #296]	; (1000efc4 <platform_driver_init+0x1b0>)
1000ee9a:	6032      	str	r2, [r6, #0]
		wakeup_event_pending = (uint32_t *)0x10041FD8;
1000ee9c:	494a      	ldr	r1, [pc, #296]	; (1000efc8 <platform_driver_init+0x1b4>)
1000ee9e:	4a4b      	ldr	r2, [pc, #300]	; (1000efcc <platform_driver_init+0x1b8>)
1000eea0:	6011      	str	r1, [r2, #0]
		/* power APIs */
		pwr_enable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cbe9;
1000eea2:	494b      	ldr	r1, [pc, #300]	; (1000efd0 <platform_driver_init+0x1bc>)
1000eea4:	4a4b      	ldr	r2, [pc, #300]	; (1000efd4 <platform_driver_init+0x1c0>)
1000eea6:	6011      	str	r1, [r2, #0]
		pwr_disable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cd8f;
1000eea8:	494b      	ldr	r1, [pc, #300]	; (1000efd8 <platform_driver_init+0x1c4>)
1000eeaa:	4a4c      	ldr	r2, [pc, #304]	; (1000efdc <platform_driver_init+0x1c8>)
1000eeac:	6011      	str	r1, [r2, #0]
		pwr_arm_wakeup_req = (int (*)(void))0x0001cea3;
1000eeae:	494c      	ldr	r1, [pc, #304]	; (1000efe0 <platform_driver_init+0x1cc>)
1000eeb0:	4a4c      	ldr	r2, [pc, #304]	; (1000efe4 <platform_driver_init+0x1d0>)
1000eeb2:	6011      	str	r1, [r2, #0]
		pwr_wait_BLE_out_of_reset = (int (*)(uint32_t threshold))0x0001cbcf;
1000eeb4:	494c      	ldr	r1, [pc, #304]	; (1000efe8 <platform_driver_init+0x1d4>)
1000eeb6:	4a4d      	ldr	r2, [pc, #308]	; (1000efec <platform_driver_init+0x1d8>)
1000eeb8:	6011      	str	r1, [r2, #0]
		NVIC_DisableIRQ(PORT1_ALL_IRQn);
		platform_register_isr = register_isr;
		platform_unregister_isr = unregister_isr;
		handle_ext_wakeup_isr = (void (*)(void))0x14085;
#endif
		platform_unregister_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX);
1000eeba:	2028      	movs	r0, #40	; 0x28
1000eebc:	4798      	blx	r3
		platform_register_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX,(void*)PORT1_COMB_Handler);
1000eebe:	494c      	ldr	r1, [pc, #304]	; (1000eff0 <platform_driver_init+0x1dc>)
1000eec0:	2028      	movs	r0, #40	; 0x28
1000eec2:	682b      	ldr	r3, [r5, #0]
1000eec4:	4798      	blx	r3
		platform_register_isr(GPIO0_COMBINED_VECTOR_TABLE_INDEX,(void*)gpio0_combined_isr_handler);
1000eec6:	682b      	ldr	r3, [r5, #0]
1000eec8:	494a      	ldr	r1, [pc, #296]	; (1000eff4 <platform_driver_init+0x1e0>)
1000eeca:	2027      	movs	r0, #39	; 0x27
1000eecc:	4798      	blx	r3
		//gstrFwSem               = (void *)0x100004e4;
		//NMI_MsgQueueRecv = (int (*)(void *, void ** )) 0x00017f67;
		//InternalAppMsgQHandle = (void *)0x10001158;
		//ke_free = (void (*)(void *)) 0x00015e3d;
#elif CHIPVERSION_B0
		ke_msg_send 	= (void (*)(void const *))(*((unsigned int *)0x100400e4));
1000eece:	4b4a      	ldr	r3, [pc, #296]	; (1000eff8 <platform_driver_init+0x1e4>)
1000eed0:	681a      	ldr	r2, [r3, #0]
1000eed2:	4b4a      	ldr	r3, [pc, #296]	; (1000effc <platform_driver_init+0x1e8>)
1000eed4:	601a      	str	r2, [r3, #0]
		ke_msg_alloc 	= (void* (*)(ke_msg_id_t const id, ke_task_id_t const dest_id,
1000eed6:	4a4a      	ldr	r2, [pc, #296]	; (1000f000 <platform_driver_init+0x1ec>)
1000eed8:	4b4a      	ldr	r3, [pc, #296]	; (1000f004 <platform_driver_init+0x1f0>)
1000eeda:	601a      	str	r2, [r3, #0]
										ke_task_id_t const src_id, uint16_t const param_len) )0x00019fe9;
		os_sem_up 		= (int (*)(void*))0x0001dbdd;
1000eedc:	4a4a      	ldr	r2, [pc, #296]	; (1000f008 <platform_driver_init+0x1f4>)
1000eede:	4b4b      	ldr	r3, [pc, #300]	; (1000f00c <platform_driver_init+0x1f8>)
1000eee0:	601a      	str	r2, [r3, #0]
		os_sem_down		= (int (*)(void*))0x0001dc5b;
1000eee2:	4a4b      	ldr	r2, [pc, #300]	; (1000f010 <platform_driver_init+0x1fc>)
1000eee4:	4b4b      	ldr	r3, [pc, #300]	; (1000f014 <platform_driver_init+0x200>)
1000eee6:	601a      	str	r2, [r3, #0]
		gstrFwSem 		= (void*)0x100405ec;
1000eee8:	4a4b      	ldr	r2, [pc, #300]	; (1000f018 <platform_driver_init+0x204>)
1000eeea:	4b4c      	ldr	r3, [pc, #304]	; (1000f01c <platform_driver_init+0x208>)
1000eeec:	601a      	str	r2, [r3, #0]
		NMI_MsgQueueRecv = (int(*)(void*, void ** ))0x0001d5e3;
1000eeee:	4a4c      	ldr	r2, [pc, #304]	; (1000f020 <platform_driver_init+0x20c>)
1000eef0:	4b4c      	ldr	r3, [pc, #304]	; (1000f024 <platform_driver_init+0x210>)
1000eef2:	601a      	str	r2, [r3, #0]
		InternalAppMsgQHandle = (void*)0x10040c20;
1000eef4:	4a4c      	ldr	r2, [pc, #304]	; (1000f028 <platform_driver_init+0x214>)
1000eef6:	4b4d      	ldr	r3, [pc, #308]	; (1000f02c <platform_driver_init+0x218>)
1000eef8:	601a      	str	r2, [r3, #0]
		ke_free = (void(*)(void*))0x00019f09;
1000eefa:	4a4d      	ldr	r2, [pc, #308]	; (1000f030 <platform_driver_init+0x21c>)
1000eefc:	4b4d      	ldr	r3, [pc, #308]	; (1000f034 <platform_driver_init+0x220>)
1000eefe:	601a      	str	r2, [r3, #0]
#endif
		memset(rx_buffer,0,sizeof(rx_buffer));
1000ef00:	22a0      	movs	r2, #160	; 0xa0
1000ef02:	0092      	lsls	r2, r2, #2
1000ef04:	2100      	movs	r1, #0
1000ef06:	484c      	ldr	r0, [pc, #304]	; (1000f038 <platform_driver_init+0x224>)
1000ef08:	4b4c      	ldr	r3, [pc, #304]	; (1000f03c <platform_driver_init+0x228>)
1000ef0a:	4798      	blx	r3
		plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000ef0c:	2280      	movs	r2, #128	; 0x80
1000ef0e:	0092      	lsls	r2, r2, #2
1000ef10:	4b4b      	ldr	r3, [pc, #300]	; (1000f040 <platform_driver_init+0x22c>)
1000ef12:	801a      	strh	r2, [r3, #0]
		platform_event_init();
1000ef14:	4b4b      	ldr	r3, [pc, #300]	; (1000f044 <platform_driver_init+0x230>)
1000ef16:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000ef18:	4653      	mov	r3, sl
1000ef1a:	6023      	str	r3, [r4, #0]
1000ef1c:	464b      	mov	r3, r9
1000ef1e:	6023      	str	r3, [r4, #0]
		
#ifndef CHIPVERSION_B0		
		// spi_flash clock fix.
		spi_flash_clock_init();
#endif
		samb11_app_resume_cb = NULL;
1000ef20:	4b49      	ldr	r3, [pc, #292]	; (1000f048 <platform_driver_init+0x234>)
1000ef22:	4642      	mov	r2, r8
1000ef24:	601a      	str	r2, [r3, #0]
		*apps_resume_cb = (uint32_t)((resume_callback)samb11_plf_resume_callback);
1000ef26:	683b      	ldr	r3, [r7, #0]
1000ef28:	4a48      	ldr	r2, [pc, #288]	; (1000f04c <platform_driver_init+0x238>)
1000ef2a:	601a      	str	r2, [r3, #0]
		*wakeup_source_active_cb = (uint32_t)((wakeup_source_active_callback)wakeup_active_event_callback);
1000ef2c:	6833      	ldr	r3, [r6, #0]
1000ef2e:	4a48      	ldr	r2, [pc, #288]	; (1000f050 <platform_driver_init+0x23c>)
1000ef30:	601a      	str	r2, [r3, #0]
		wakeup_int_unregister_callback(0);
1000ef32:	2000      	movs	r0, #0
1000ef34:	4c47      	ldr	r4, [pc, #284]	; (1000f054 <platform_driver_init+0x240>)
1000ef36:	47a0      	blx	r4
		wakeup_int_unregister_callback(1);
1000ef38:	2001      	movs	r0, #1
1000ef3a:	47a0      	blx	r4
		wakeup_int_unregister_callback(2);
1000ef3c:	2002      	movs	r0, #2
1000ef3e:	47a0      	blx	r4
		platform_initialized = 1;
1000ef40:	2201      	movs	r2, #1
1000ef42:	4b06      	ldr	r3, [pc, #24]	; (1000ef5c <platform_driver_init+0x148>)
1000ef44:	701a      	strb	r2, [r3, #0]
		status = STATUS_SUCCESS;
1000ef46:	2000      	movs	r0, #0
1000ef48:	e003      	b.n	1000ef52 <platform_driver_init+0x13e>
	}
	else {
		platform_initialized = 1;
1000ef4a:	2201      	movs	r2, #1
1000ef4c:	4b03      	ldr	r3, [pc, #12]	; (1000ef5c <platform_driver_init+0x148>)
1000ef4e:	701a      	strb	r2, [r3, #0]
		status = STATUS_ALREADY_INITIALIZED;
1000ef50:	2001      	movs	r0, #1
	}
	return status;
}
1000ef52:	bc1c      	pop	{r2, r3, r4}
1000ef54:	4690      	mov	r8, r2
1000ef56:	4699      	mov	r9, r3
1000ef58:	46a2      	mov	sl, r4
1000ef5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ef5c:	1001996c 	.word	0x1001996c
1000ef60:	1000eda1 	.word	0x1000eda1
1000ef64:	1000ede5 	.word	0x1000ede5
1000ef68:	1001998c 	.word	0x1001998c
1000ef6c:	e000e100 	.word	0xe000e100
1000ef70:	1001a88c 	.word	0x1001a88c
1000ef74:	000007d7 	.word	0x000007d7
1000ef78:	000007bd 	.word	0x000007bd
1000ef7c:	1001a5c8 	.word	0x1001a5c8
1000ef80:	0001bc51 	.word	0x0001bc51
1000ef84:	1001a890 	.word	0x1001a890
1000ef88:	100400bc 	.word	0x100400bc
1000ef8c:	10019960 	.word	0x10019960
1000ef90:	100400b8 	.word	0x100400b8
1000ef94:	1001995c 	.word	0x1001995c
1000ef98:	0001b99f 	.word	0x0001b99f
1000ef9c:	1001a5c4 	.word	0x1001a5c4
1000efa0:	0001b9db 	.word	0x0001b9db
1000efa4:	1001a5d0 	.word	0x1001a5d0
1000efa8:	1001a8a0 	.word	0x1001a8a0
1000efac:	1004003c 	.word	0x1004003c
1000efb0:	10041fc0 	.word	0x10041fc0
1000efb4:	1001a5d4 	.word	0x1001a5d4
1000efb8:	10041fc4 	.word	0x10041fc4
1000efbc:	1001a89c 	.word	0x1001a89c
1000efc0:	1001a894 	.word	0x1001a894
1000efc4:	10041fd4 	.word	0x10041fd4
1000efc8:	10041fd8 	.word	0x10041fd8
1000efcc:	1001a5cc 	.word	0x1001a5cc
1000efd0:	0001cbe9 	.word	0x0001cbe9
1000efd4:	10019980 	.word	0x10019980
1000efd8:	0001cd8f 	.word	0x0001cd8f
1000efdc:	10019970 	.word	0x10019970
1000efe0:	0001cea3 	.word	0x0001cea3
1000efe4:	10019994 	.word	0x10019994
1000efe8:	0001cbcf 	.word	0x0001cbcf
1000efec:	10019968 	.word	0x10019968
1000eff0:	1000f49d 	.word	0x1000f49d
1000eff4:	1000f431 	.word	0x1000f431
1000eff8:	100400e4 	.word	0x100400e4
1000effc:	10019988 	.word	0x10019988
1000f000:	00019fe9 	.word	0x00019fe9
1000f004:	10019998 	.word	0x10019998
1000f008:	0001dbdd 	.word	0x0001dbdd
1000f00c:	10019964 	.word	0x10019964
1000f010:	0001dc5b 	.word	0x0001dc5b
1000f014:	10019978 	.word	0x10019978
1000f018:	100405ec 	.word	0x100405ec
1000f01c:	10019974 	.word	0x10019974
1000f020:	0001d5e3 	.word	0x0001d5e3
1000f024:	10019984 	.word	0x10019984
1000f028:	10040c20 	.word	0x10040c20
1000f02c:	1001999c 	.word	0x1001999c
1000f030:	00019f09 	.word	0x00019f09
1000f034:	10019958 	.word	0x10019958
1000f038:	1001a60c 	.word	0x1001a60c
1000f03c:	10014b8d 	.word	0x10014b8d
1000f040:	1001a8a4 	.word	0x1001a8a4
1000f044:	1000eccd 	.word	0x1000eccd
1000f048:	1001a898 	.word	0x1001a898
1000f04c:	1000ed75 	.word	0x1000ed75
1000f050:	1000f4f9 	.word	0x1000f4f9
1000f054:	1000f4e1 	.word	0x1000f4e1

1000f058 <platform_register_ble_msg_handler>:


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000f058:	4b04      	ldr	r3, [pc, #16]	; (1000f06c <platform_register_ble_msg_handler+0x14>)
1000f05a:	781a      	ldrb	r2, [r3, #0]
		ble_stack_message_handler = fp;
		status = STATUS_SUCCESS;
	}
	else {
		status = STATUS_NOT_INITIALIZED;
1000f05c:	2305      	movs	r3, #5


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000f05e:	2a01      	cmp	r2, #1
1000f060:	d102      	bne.n	1000f068 <platform_register_ble_msg_handler+0x10>
		ble_stack_message_handler = fp;
1000f062:	4b03      	ldr	r3, [pc, #12]	; (1000f070 <platform_register_ble_msg_handler+0x18>)
1000f064:	6018      	str	r0, [r3, #0]
		status = STATUS_SUCCESS;
1000f066:	2300      	movs	r3, #0
	}
	else {
		status = STATUS_NOT_INITIALIZED;
	}
	return status;
}
1000f068:	0018      	movs	r0, r3
1000f06a:	4770      	bx	lr
1000f06c:	1001996c 	.word	0x1001996c
1000f070:	1001998c 	.word	0x1001998c

1000f074 <platform_interface_send>:


//Sends a message through RW kernel messaging API
//struct ke_msg * p_msg;
void platform_interface_send(uint8_t* data, uint32_t len)
{
1000f074:	b570      	push	{r4, r5, r6, lr}
1000f076:	0004      	movs	r4, r0
	void* params;
	
	#if (CHIPVERSION_B0)
	ke_task_id_t dest_id;
	dest_id = p_msg_hdr->dest_id;
	if(gapm_get_task_from_id != NULL)
1000f078:	4b0e      	ldr	r3, [pc, #56]	; (1000f0b4 <platform_interface_send+0x40>)
1000f07a:	681b      	ldr	r3, [r3, #0]
1000f07c:	2b00      	cmp	r3, #0
1000f07e:	d002      	beq.n	1000f086 <platform_interface_send+0x12>
		p_msg_hdr->dest_id = gapm_get_task_from_id(dest_id);
1000f080:	8840      	ldrh	r0, [r0, #2]
1000f082:	4798      	blx	r3
1000f084:	8060      	strh	r0, [r4, #2]
	#endif	//CHIPVERSION_B0
	// Allocate the kernel message
	params = ke_msg_alloc(p_msg_hdr->id, p_msg_hdr->dest_id, p_msg_hdr->src_id, p_msg_hdr->param_len);
1000f086:	88e3      	ldrh	r3, [r4, #6]
1000f088:	88a2      	ldrh	r2, [r4, #4]
1000f08a:	8861      	ldrh	r1, [r4, #2]
1000f08c:	8820      	ldrh	r0, [r4, #0]
1000f08e:	4d0a      	ldr	r5, [pc, #40]	; (1000f0b8 <platform_interface_send+0x44>)
1000f090:	682d      	ldr	r5, [r5, #0]
1000f092:	47a8      	blx	r5
1000f094:	0005      	movs	r5, r0
											
	//no params
	if (p_msg_hdr->param_len == 0)
1000f096:	88e2      	ldrh	r2, [r4, #6]
1000f098:	2a00      	cmp	r2, #0
1000f09a:	d102      	bne.n	1000f0a2 <platform_interface_send+0x2e>
	{
		// Send message directly
		at_ke_msg_send(params);
1000f09c:	4b07      	ldr	r3, [pc, #28]	; (1000f0bc <platform_interface_send+0x48>)
1000f09e:	4798      	blx	r3
1000f0a0:	e006      	b.n	1000f0b0 <platform_interface_send+0x3c>
	}
	else
	{
		//copy params
		memcpy(params,&(data[KE_MSG_HDR_LENGTH]),p_msg_hdr->param_len);
1000f0a2:	0021      	movs	r1, r4
1000f0a4:	3108      	adds	r1, #8
1000f0a6:	4b06      	ldr	r3, [pc, #24]	; (1000f0c0 <platform_interface_send+0x4c>)
1000f0a8:	4798      	blx	r3
		// Send the kernel message
		at_ke_msg_send(params);
1000f0aa:	0028      	movs	r0, r5
1000f0ac:	4b03      	ldr	r3, [pc, #12]	; (1000f0bc <platform_interface_send+0x48>)
1000f0ae:	4798      	blx	r3
	}
}
1000f0b0:	bd70      	pop	{r4, r5, r6, pc}
1000f0b2:	46c0      	nop			; (mov r8, r8)
1000f0b4:	10019960 	.word	0x10019960
1000f0b8:	10019998 	.word	0x10019998
1000f0bc:	1000ecfd 	.word	0x1000ecfd
1000f0c0:	10014b7b 	.word	0x10014b7b

1000f0c4 <send_plf_int_msg_ind>:

void send_plf_int_msg_ind(uint8_t intr_index, uint8_t callback_id, void *data, uint16_t data_len)
{
1000f0c4:	b570      	push	{r4, r5, r6, lr}
1000f0c6:	0015      	movs	r5, r2
1000f0c8:	001c      	movs	r4, r3
	void* params;
//#if (CHIPVERSION_A4)	
	//os_sem_up(gstrFwSem);
//#endif
	// Allocate the kernel message
	params = ke_msg_alloc(PERIPHERAL_INTERRUPT_EVENT, TASK_INTERNAL_APP, BUILD_INTR_SRCID(callback_id,intr_index), data_len);
1000f0ca:	020a      	lsls	r2, r1, #8
1000f0cc:	4302      	orrs	r2, r0
1000f0ce:	4b0a      	ldr	r3, [pc, #40]	; (1000f0f8 <send_plf_int_msg_ind+0x34>)
1000f0d0:	681e      	ldr	r6, [r3, #0]
1000f0d2:	0023      	movs	r3, r4
1000f0d4:	2105      	movs	r1, #5
1000f0d6:	20a0      	movs	r0, #160	; 0xa0
1000f0d8:	00c0      	lsls	r0, r0, #3
1000f0da:	47b0      	blx	r6
1000f0dc:	1e06      	subs	r6, r0, #0
											
	//no params
	if(params != NULL) {
1000f0de:	d00a      	beq.n	1000f0f6 <send_plf_int_msg_ind+0x32>
		if((data_len != 0) && (NULL != data))
1000f0e0:	2c00      	cmp	r4, #0
1000f0e2:	d005      	beq.n	1000f0f0 <send_plf_int_msg_ind+0x2c>
1000f0e4:	2d00      	cmp	r5, #0
1000f0e6:	d003      	beq.n	1000f0f0 <send_plf_int_msg_ind+0x2c>
		{
			//copy params
			memcpy(params, data, data_len);
1000f0e8:	0022      	movs	r2, r4
1000f0ea:	0029      	movs	r1, r5
1000f0ec:	4b03      	ldr	r3, [pc, #12]	; (1000f0fc <send_plf_int_msg_ind+0x38>)
1000f0ee:	4798      	blx	r3
		}
		// Send the kernel message
		at_ke_msg_send(params);
1000f0f0:	0030      	movs	r0, r6
1000f0f2:	4b03      	ldr	r3, [pc, #12]	; (1000f100 <send_plf_int_msg_ind+0x3c>)
1000f0f4:	4798      	blx	r3
	}
}
1000f0f6:	bd70      	pop	{r4, r5, r6, pc}
1000f0f8:	10019998 	.word	0x10019998
1000f0fc:	10014b7b 	.word	0x10014b7b
1000f100:	1000ecfd 	.word	0x1000ecfd

1000f104 <platform_event_wait>:
//Waits on InternalAppMsgQHandle Queue
// This function won't busy wait if nothing on queue but will down the semaphore and go to a blocking state
// The OS then will move control to other higher priority tasks and will only return if these tasks finish processing AND the queue has received 
//a msg
plf_drv_status platform_event_wait(uint32_t timeout)
{
1000f104:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f106:	465f      	mov	r7, fp
1000f108:	4656      	mov	r6, sl
1000f10a:	464d      	mov	r5, r9
1000f10c:	4644      	mov	r4, r8
1000f10e:	b4f0      	push	{r4, r5, r6, r7}
1000f110:	b087      	sub	sp, #28
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000f112:	1e44      	subs	r4, r0, #1
plf_drv_status platform_event_wait(uint32_t timeout)
{
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
1000f114:	2300      	movs	r3, #0
1000f116:	4699      	mov	r9, r3
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000f118:	1ce3      	adds	r3, r4, #3
1000f11a:	d81c      	bhi.n	1000f156 <platform_event_wait+0x52>
	return num_of_freed;
}

static void platform_start_event_timeout(uint32_t timeout)
{
	uint8_t msg[8+5] = {0};
1000f11c:	220d      	movs	r2, #13
1000f11e:	2100      	movs	r1, #0
1000f120:	a802      	add	r0, sp, #8
1000f122:	4b82      	ldr	r3, [pc, #520]	; (1000f32c <platform_event_wait+0x228>)
1000f124:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000f126:	2333      	movs	r3, #51	; 0x33
1000f128:	aa02      	add	r2, sp, #8
1000f12a:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000f12c:	3b30      	subs	r3, #48	; 0x30
1000f12e:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000f130:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000f132:	3302      	adds	r3, #2
1000f134:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000f136:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (((5)>>8) & 0x00FF );
	
	msg[u16TxLen++] = (uint8_t)((timeout) & 0x00FF );
1000f138:	7214      	strb	r4, [r2, #8]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 8) & 0x00FF) ;
1000f13a:	0a23      	lsrs	r3, r4, #8
1000f13c:	7253      	strb	r3, [r2, #9]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 16) & 0x00FF);
1000f13e:	0c23      	lsrs	r3, r4, #16
1000f140:	7293      	strb	r3, [r2, #10]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 24) & 0x00FF);
1000f142:	0e24      	lsrs	r4, r4, #24
1000f144:	72d4      	strb	r4, [r2, #11]
	
	msg[u16TxLen++] = ((1) & 0x00FF );
1000f146:	2301      	movs	r3, #1
1000f148:	7313      	strb	r3, [r2, #12]
	
	platform_interface_send(msg, u16TxLen);
1000f14a:	210d      	movs	r1, #13
1000f14c:	0010      	movs	r0, r2
1000f14e:	4b78      	ldr	r3, [pc, #480]	; (1000f330 <platform_event_wait+0x22c>)
1000f150:	4798      	blx	r3
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
	{			
		platform_start_event_timeout(timeout-1);
		bEventTimeoutFlag = 1;
1000f152:	2301      	movs	r3, #1
1000f154:	4699      	mov	r9, r3
1000f156:	2400      	movs	r4, #0
1000f158:	2500      	movs	r5, #0
	}

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
1000f15a:	4f76      	ldr	r7, [pc, #472]	; (1000f334 <platform_event_wait+0x230>)
1000f15c:	4e76      	ldr	r6, [pc, #472]	; (1000f338 <platform_event_wait+0x234>)
1000f15e:	4977      	ldr	r1, [pc, #476]	; (1000f33c <platform_event_wait+0x238>)
1000f160:	6838      	ldr	r0, [r7, #0]
1000f162:	6833      	ldr	r3, [r6, #0]
1000f164:	4798      	blx	r3
1000f166:	2800      	cmp	r0, #0
1000f168:	d000      	beq.n	1000f16c <platform_event_wait+0x68>
1000f16a:	e088      	b.n	1000f27e <platform_event_wait+0x17a>
		{
			uint16_t msg_id = rcv_msg->id;
1000f16c:	4b73      	ldr	r3, [pc, #460]	; (1000f33c <platform_event_wait+0x238>)
1000f16e:	681c      	ldr	r4, [r3, #0]
1000f170:	88a3      	ldrh	r3, [r4, #4]
1000f172:	469a      	mov	sl, r3
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000f174:	23cd      	movs	r3, #205	; 0xcd
1000f176:	009b      	lsls	r3, r3, #2
1000f178:	459a      	cmp	sl, r3
1000f17a:	d100      	bne.n	1000f17e <platform_event_wait+0x7a>
1000f17c:	e0c7      	b.n	1000f30e <platform_event_wait+0x20a>

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
1000f17e:	8923      	ldrh	r3, [r4, #8]
1000f180:	469b      	mov	fp, r3
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
1000f182:	8963      	ldrh	r3, [r4, #10]
1000f184:	4698      	mov	r8, r3
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000f186:	464b      	mov	r3, r9
1000f188:	2b00      	cmp	r3, #0
1000f18a:	d011      	beq.n	1000f1b0 <platform_event_wait+0xac>
	platform_interface_send(msg, u16TxLen);
}

static void platform_stop_event_timeout(void)
{
	uint8_t msg[8+5] = {0};
1000f18c:	220d      	movs	r2, #13
1000f18e:	2100      	movs	r1, #0
1000f190:	a802      	add	r0, sp, #8
1000f192:	4b66      	ldr	r3, [pc, #408]	; (1000f32c <platform_event_wait+0x228>)
1000f194:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000f196:	2333      	movs	r3, #51	; 0x33
1000f198:	aa02      	add	r2, sp, #8
1000f19a:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000f19c:	3b30      	subs	r3, #48	; 0x30
1000f19e:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000f1a0:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000f1a2:	3302      	adds	r3, #2
1000f1a4:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000f1a6:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (uint8_t)(( (0) >> 16) & 0x00FF);
	msg[u16TxLen++] = (uint8_t)(( (0) >> 24) & 0x00FF);
	
	msg[u16TxLen++] = ((0) & 0x00FF );
	
	platform_interface_send(msg, u16TxLen);
1000f1a8:	210d      	movs	r1, #13
1000f1aa:	0010      	movs	r0, r2
1000f1ac:	4b60      	ldr	r3, [pc, #384]	; (1000f330 <platform_event_wait+0x22c>)
1000f1ae:	4798      	blx	r3
			{
				//Stop timer if it is still running
				platform_stop_event_timeout();
			}
				
			if(msg_id == PERIPHERAL_INTERRUPT_EVENT)
1000f1b0:	23a0      	movs	r3, #160	; 0xa0
1000f1b2:	00db      	lsls	r3, r3, #3
1000f1b4:	459a      	cmp	sl, r3
1000f1b6:	d121      	bne.n	1000f1fc <platform_event_wait+0xf8>
			{
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
1000f1b8:	4b61      	ldr	r3, [pc, #388]	; (1000f340 <platform_event_wait+0x23c>)
1000f1ba:	881b      	ldrh	r3, [r3, #0]
1000f1bc:	4443      	add	r3, r8
1000f1be:	22a0      	movs	r2, #160	; 0xa0
1000f1c0:	0092      	lsls	r2, r2, #2
1000f1c2:	4293      	cmp	r3, r2
1000f1c4:	dd02      	ble.n	1000f1cc <platform_event_wait+0xc8>
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000f1c6:	3a80      	subs	r2, #128	; 0x80
1000f1c8:	4b5d      	ldr	r3, [pc, #372]	; (1000f340 <platform_event_wait+0x23c>)
1000f1ca:	801a      	strh	r2, [r3, #0]
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
1000f1cc:	4b5c      	ldr	r3, [pc, #368]	; (1000f340 <platform_event_wait+0x23c>)
1000f1ce:	469a      	mov	sl, r3
1000f1d0:	881d      	ldrh	r5, [r3, #0]
1000f1d2:	4b5c      	ldr	r3, [pc, #368]	; (1000f344 <platform_event_wait+0x240>)
1000f1d4:	18ed      	adds	r5, r5, r3
1000f1d6:	0021      	movs	r1, r4
1000f1d8:	310c      	adds	r1, #12
1000f1da:	4642      	mov	r2, r8
1000f1dc:	0028      	movs	r0, r5
1000f1de:	4b5a      	ldr	r3, [pc, #360]	; (1000f348 <platform_event_wait+0x244>)
1000f1e0:	4798      	blx	r3
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
1000f1e2:	4642      	mov	r2, r8
1000f1e4:	0029      	movs	r1, r5
1000f1e6:	4658      	mov	r0, fp
1000f1e8:	4b58      	ldr	r3, [pc, #352]	; (1000f34c <platform_event_wait+0x248>)
1000f1ea:	4798      	blx	r3
				plf_event_buff_index += len;
1000f1ec:	4653      	mov	r3, sl
1000f1ee:	881b      	ldrh	r3, [r3, #0]
1000f1f0:	4443      	add	r3, r8
1000f1f2:	4652      	mov	r2, sl
1000f1f4:	8013      	strh	r3, [r2, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000f1f6:	2400      	movs	r4, #0
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
				plf_event_buff_index += len;
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
1000f1f8:	2502      	movs	r5, #2
1000f1fa:	e03a      	b.n	1000f272 <platform_event_wait+0x16e>
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000f1fc:	4b54      	ldr	r3, [pc, #336]	; (1000f350 <platform_event_wait+0x24c>)
1000f1fe:	681b      	ldr	r3, [r3, #0]
1000f200:	2b00      	cmp	r3, #0
1000f202:	d032      	beq.n	1000f26a <platform_event_wait+0x166>
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
1000f204:	4b4d      	ldr	r3, [pc, #308]	; (1000f33c <platform_event_wait+0x238>)
1000f206:	681a      	ldr	r2, [r3, #0]
1000f208:	8893      	ldrh	r3, [r2, #4]
1000f20a:	21cd      	movs	r1, #205	; 0xcd
1000f20c:	0089      	lsls	r1, r1, #2
1000f20e:	428b      	cmp	r3, r1
1000f210:	d104      	bne.n	1000f21c <platform_event_wait+0x118>
					{
						if(bEventTimeoutFlag)
1000f212:	464b      	mov	r3, r9
						{
							status = STATUS_TIMEOUT;	
						}
						else
						{
							bLoopAgain = 1;
1000f214:	2401      	movs	r4, #1
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
1000f216:	2b00      	cmp	r3, #0
1000f218:	d02b      	beq.n	1000f272 <platform_event_wait+0x16e>
1000f21a:	e028      	b.n	1000f26e <platform_event_wait+0x16a>
							bLoopAgain = 1;
						}
					}
					else
					{
						ke_msg_hdr = (struct ke_msghdr *)((void *)(rx_buffer+BLE_EVENT_BUFFER_START_INDEX));
1000f21c:	4c4d      	ldr	r4, [pc, #308]	; (1000f354 <platform_event_wait+0x250>)
1000f21e:	4d49      	ldr	r5, [pc, #292]	; (1000f344 <platform_event_wait+0x240>)
1000f220:	6025      	str	r5, [r4, #0]
						ke_msg_hdr->id = rcv_msg->id;
1000f222:	702b      	strb	r3, [r5, #0]
1000f224:	0a1b      	lsrs	r3, r3, #8
1000f226:	706b      	strb	r3, [r5, #1]
//#if (CHIPVERSION_A3 || CHIPVERSION_A4)
					//ke_msg_hdr->src_id = rcv_msg->src_id;
//#else
					ke_msg_hdr->src_id = gapm_get_id_from_task(rcv_msg->src_id);
1000f228:	8910      	ldrh	r0, [r2, #8]
1000f22a:	4b4b      	ldr	r3, [pc, #300]	; (1000f358 <platform_event_wait+0x254>)
1000f22c:	681b      	ldr	r3, [r3, #0]
1000f22e:	4798      	blx	r3
1000f230:	7128      	strb	r0, [r5, #4]
1000f232:	0a00      	lsrs	r0, r0, #8
1000f234:	7168      	strb	r0, [r5, #5]
//#endif  /* (CHIPVERSION_A3 || CHIPVERSION_A4) */
						ke_msg_hdr->dest_id = rcv_msg->dest_id;
1000f236:	6820      	ldr	r0, [r4, #0]
1000f238:	4b40      	ldr	r3, [pc, #256]	; (1000f33c <platform_event_wait+0x238>)
1000f23a:	681a      	ldr	r2, [r3, #0]
1000f23c:	88d2      	ldrh	r2, [r2, #6]
1000f23e:	8042      	strh	r2, [r0, #2]
						ke_msg_hdr->param_len = rcv_msg->param_len;
1000f240:	681d      	ldr	r5, [r3, #0]
1000f242:	896b      	ldrh	r3, [r5, #10]
1000f244:	80c3      	strh	r3, [r0, #6]
						ke_msg_hdr++;
1000f246:	3008      	adds	r0, #8
1000f248:	6020      	str	r0, [r4, #0]
						if(rcv_msg->param_len > 0) {
1000f24a:	896a      	ldrh	r2, [r5, #10]
1000f24c:	2a00      	cmp	r2, #0
1000f24e:	d003      	beq.n	1000f258 <platform_event_wait+0x154>
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
1000f250:	0029      	movs	r1, r5
1000f252:	310c      	adds	r1, #12
1000f254:	4b3c      	ldr	r3, [pc, #240]	; (1000f348 <platform_event_wait+0x244>)
1000f256:	4798      	blx	r3
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
1000f258:	8969      	ldrh	r1, [r5, #10]
1000f25a:	3108      	adds	r1, #8
1000f25c:	4b3c      	ldr	r3, [pc, #240]	; (1000f350 <platform_event_wait+0x24c>)
1000f25e:	681b      	ldr	r3, [r3, #0]
1000f260:	4838      	ldr	r0, [pc, #224]	; (1000f344 <platform_event_wait+0x240>)
1000f262:	4798      	blx	r3
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000f264:	2400      	movs	r4, #0
						ke_msg_hdr++;
						if(rcv_msg->param_len > 0) {
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
1000f266:	2503      	movs	r5, #3
1000f268:	e003      	b.n	1000f272 <platform_event_wait+0x16e>
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000f26a:	2400      	movs	r4, #0
1000f26c:	e001      	b.n	1000f272 <platform_event_wait+0x16e>
1000f26e:	2400      	movs	r4, #0
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
						{
							status = STATUS_TIMEOUT;	
1000f270:	25d0      	movs	r5, #208	; 0xd0
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
					}
				}
			}
			ke_free(rcv_msg);
1000f272:	4b32      	ldr	r3, [pc, #200]	; (1000f33c <platform_event_wait+0x238>)
1000f274:	6818      	ldr	r0, [r3, #0]
1000f276:	4b39      	ldr	r3, [pc, #228]	; (1000f35c <platform_event_wait+0x258>)
1000f278:	681b      	ldr	r3, [r3, #0]
1000f27a:	4798      	blx	r3
1000f27c:	e000      	b.n	1000f280 <platform_event_wait+0x17c>
		}
		else
		{
			status = STATUS_FAILURE;
1000f27e:	2507      	movs	r5, #7
		}
	}while(bLoopAgain);
1000f280:	2c00      	cmp	r4, #0
1000f282:	d000      	beq.n	1000f286 <platform_event_wait+0x182>
1000f284:	e76b      	b.n	1000f15e <platform_event_wait+0x5a>
	
	if(bEventTimeoutFlag)
1000f286:	464b      	mov	r3, r9
1000f288:	2b00      	cmp	r3, #0
1000f28a:	d046      	beq.n	1000f31a <platform_event_wait+0x216>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
1000f28c:	4b29      	ldr	r3, [pc, #164]	; (1000f334 <platform_event_wait+0x230>)
1000f28e:	681e      	ldr	r6, [r3, #0]
#endif 
static int NMI_MsgQueueDestroyOnKeID(NMI_MsgQueueHandle* pHandle, ke_msg_id_t u16KeMsgId)
{
	int num_of_freed=0;
	Message * current , *prev = NULL;
	if((NULL == pHandle) && (NULL == pHandle->pstrMessageList))
1000f290:	2e00      	cmp	r6, #0
1000f292:	d104      	bne.n	1000f29e <platform_event_wait+0x19a>
1000f294:	2300      	movs	r3, #0
1000f296:	6a1c      	ldr	r4, [r3, #32]
1000f298:	2c00      	cmp	r4, #0
1000f29a:	d131      	bne.n	1000f300 <platform_event_wait+0x1fc>
1000f29c:	e03d      	b.n	1000f31a <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
1000f29e:	6a34      	ldr	r4, [r6, #32]
	os_sem_down(&pHandle->strCriticalSection);
1000f2a0:	2314      	movs	r3, #20
1000f2a2:	469c      	mov	ip, r3
1000f2a4:	44b4      	add	ip, r6
1000f2a6:	4663      	mov	r3, ip
1000f2a8:	4660      	mov	r0, ip
1000f2aa:	9300      	str	r3, [sp, #0]
1000f2ac:	4b2c      	ldr	r3, [pc, #176]	; (1000f360 <platform_event_wait+0x25c>)
1000f2ae:	681b      	ldr	r3, [r3, #0]
1000f2b0:	4798      	blx	r3
	while(NULL != current)
1000f2b2:	2c00      	cmp	r4, #0
1000f2b4:	d01f      	beq.n	1000f2f6 <platform_event_wait+0x1f2>
			}
			ke_free(rcv_msg);
		}
		else
		{
			status = STATUS_FAILURE;
1000f2b6:	2700      	movs	r7, #0

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000f2b8:	23cd      	movs	r3, #205	; 0xcd
1000f2ba:	009b      	lsls	r3, r3, #2
1000f2bc:	4698      	mov	r8, r3
		{
			num_of_freed++;
			if(NULL != prev)
			{
				prev->pstrNext = current->pstrNext;
				ke_free(current);
1000f2be:	4b27      	ldr	r3, [pc, #156]	; (1000f35c <platform_event_wait+0x258>)
1000f2c0:	469a      	mov	sl, r3
1000f2c2:	0020      	movs	r0, r4

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000f2c4:	6803      	ldr	r3, [r0, #0]
1000f2c6:	889b      	ldrh	r3, [r3, #4]
1000f2c8:	4543      	cmp	r3, r8
1000f2ca:	d110      	bne.n	1000f2ee <platform_event_wait+0x1ea>
		{
			num_of_freed++;
			if(NULL != prev)
1000f2cc:	2f00      	cmp	r7, #0
1000f2ce:	d006      	beq.n	1000f2de <platform_event_wait+0x1da>
			{
				prev->pstrNext = current->pstrNext;
1000f2d0:	6883      	ldr	r3, [r0, #8]
1000f2d2:	60bb      	str	r3, [r7, #8]
				ke_free(current);
1000f2d4:	4653      	mov	r3, sl
1000f2d6:	681b      	ldr	r3, [r3, #0]
1000f2d8:	4798      	blx	r3
				current = prev->pstrNext;
1000f2da:	68b8      	ldr	r0, [r7, #8]
1000f2dc:	e009      	b.n	1000f2f2 <platform_event_wait+0x1ee>
			}
			else
			{
				pHandle->pstrMessageList = current->pstrNext;
1000f2de:	6883      	ldr	r3, [r0, #8]
1000f2e0:	6233      	str	r3, [r6, #32]
				ke_free(current);
1000f2e2:	4b1e      	ldr	r3, [pc, #120]	; (1000f35c <platform_event_wait+0x258>)
1000f2e4:	681b      	ldr	r3, [r3, #0]
1000f2e6:	9301      	str	r3, [sp, #4]
1000f2e8:	4798      	blx	r3
				current = pHandle->pstrMessageList;
1000f2ea:	6a30      	ldr	r0, [r6, #32]
1000f2ec:	e001      	b.n	1000f2f2 <platform_event_wait+0x1ee>
			}
		}
		else
		{
			prev = current;
			current = current ->pstrNext;
1000f2ee:	0007      	movs	r7, r0
1000f2f0:	6880      	ldr	r0, [r0, #8]
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
1000f2f2:	2800      	cmp	r0, #0
1000f2f4:	d1e6      	bne.n	1000f2c4 <platform_event_wait+0x1c0>
		{
			prev = current;
			current = current ->pstrNext;
		}
	}
	os_sem_up(&pHandle->strCriticalSection);
1000f2f6:	4b1b      	ldr	r3, [pc, #108]	; (1000f364 <platform_event_wait+0x260>)
1000f2f8:	681b      	ldr	r3, [r3, #0]
1000f2fa:	9800      	ldr	r0, [sp, #0]
1000f2fc:	4798      	blx	r3
	if(bEventTimeoutFlag)
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
1000f2fe:	e00c      	b.n	1000f31a <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
1000f300:	2314      	movs	r3, #20
1000f302:	9300      	str	r3, [sp, #0]
1000f304:	4b16      	ldr	r3, [pc, #88]	; (1000f360 <platform_event_wait+0x25c>)
1000f306:	681b      	ldr	r3, [r3, #0]
1000f308:	2014      	movs	r0, #20
1000f30a:	4798      	blx	r3
1000f30c:	e7d3      	b.n	1000f2b6 <platform_event_wait+0x1b2>
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000f30e:	4b10      	ldr	r3, [pc, #64]	; (1000f350 <platform_event_wait+0x24c>)
1000f310:	681b      	ldr	r3, [r3, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000f312:	2400      	movs	r4, #0
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000f314:	2b00      	cmp	r3, #0
1000f316:	d0ac      	beq.n	1000f272 <platform_event_wait+0x16e>
1000f318:	e77b      	b.n	1000f212 <platform_event_wait+0x10e>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
}
1000f31a:	0028      	movs	r0, r5
1000f31c:	b007      	add	sp, #28
1000f31e:	bc3c      	pop	{r2, r3, r4, r5}
1000f320:	4690      	mov	r8, r2
1000f322:	4699      	mov	r9, r3
1000f324:	46a2      	mov	sl, r4
1000f326:	46ab      	mov	fp, r5
1000f328:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f32a:	46c0      	nop			; (mov r8, r8)
1000f32c:	10014b8d 	.word	0x10014b8d
1000f330:	1000f075 	.word	0x1000f075
1000f334:	1001999c 	.word	0x1001999c
1000f338:	10019984 	.word	0x10019984
1000f33c:	10019990 	.word	0x10019990
1000f340:	1001a8a4 	.word	0x1001a8a4
1000f344:	1001a60c 	.word	0x1001a60c
1000f348:	10014b7b 	.word	0x10014b7b
1000f34c:	1000ec95 	.word	0x1000ec95
1000f350:	1001998c 	.word	0x1001998c
1000f354:	1001997c 	.word	0x1001997c
1000f358:	1001995c 	.word	0x1001995c
1000f35c:	10019958 	.word	0x10019958
1000f360:	10019978 	.word	0x10019978
1000f364:	10019964 	.word	0x10019964

1000f368 <acquire_sleep_lock>:

plf_drv_status acquire_sleep_lock()
{
1000f368:	b510      	push	{r4, lr}
    //DBG_LOG_DEV("[acquire_sleep_lock]\tDisabling ULP");
	plf_drv_status status = STATUS_RESOURCE_BUSY;
	//uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
	
	rwip_prevent_sleep_set(APP_PREVENT_SLEEP);
1000f36a:	4b03      	ldr	r3, [pc, #12]	; (1000f378 <acquire_sleep_lock+0x10>)
1000f36c:	681b      	ldr	r3, [r3, #0]
1000f36e:	2080      	movs	r0, #128	; 0x80
1000f370:	0200      	lsls	r0, r0, #8
1000f372:	4798      	blx	r3
		/*  */
		os_sem_up(gstrFwSem);
	}
#endif	//0
	return status;
}
1000f374:	2008      	movs	r0, #8
1000f376:	bd10      	pop	{r4, pc}
1000f378:	1001a5c4 	.word	0x1001a5c4

1000f37c <release_message_lock>:

plf_drv_status release_message_lock()
{
1000f37c:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000f37e:	4b03      	ldr	r3, [pc, #12]	; (1000f38c <release_message_lock+0x10>)
1000f380:	681b      	ldr	r3, [r3, #0]
1000f382:	2080      	movs	r0, #128	; 0x80
1000f384:	01c0      	lsls	r0, r0, #7
1000f386:	4798      	blx	r3
	return status;
}
1000f388:	2000      	movs	r0, #0
1000f38a:	bd10      	pop	{r4, pc}
1000f38c:	1001a5d0 	.word	0x1001a5d0

1000f390 <release_sleep_lock>:

plf_drv_status release_sleep_lock()
{
1000f390:	b510      	push	{r4, lr}
    //DBG_LOG_DEV("[release_sleep_lock]\tEnabling ULP");
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000f392:	4c05      	ldr	r4, [pc, #20]	; (1000f3a8 <release_sleep_lock+0x18>)
1000f394:	2080      	movs	r0, #128	; 0x80
1000f396:	01c0      	lsls	r0, r0, #7
1000f398:	6823      	ldr	r3, [r4, #0]
1000f39a:	4798      	blx	r3
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
1000f39c:	6823      	ldr	r3, [r4, #0]
1000f39e:	2080      	movs	r0, #128	; 0x80
1000f3a0:	0200      	lsls	r0, r0, #8
1000f3a2:	4798      	blx	r3
	return status;
}
1000f3a4:	2000      	movs	r0, #0
1000f3a6:	bd10      	pop	{r4, pc}
1000f3a8:	1001a5d0 	.word	0x1001a5d0

1000f3ac <register_resume_callback>:
}

plf_drv_status register_resume_callback(resume_callback cb)
{
	plf_drv_status status = STATUS_SUCCESS;
	if(cb == NULL)
1000f3ac:	2800      	cmp	r0, #0
1000f3ae:	d003      	beq.n	1000f3b8 <register_resume_callback+0xc>
	{
		status = STATUS_INVALID_ARGUMENT;
	}
	else 
	{
		samb11_app_resume_cb = cb;
1000f3b0:	4b02      	ldr	r3, [pc, #8]	; (1000f3bc <register_resume_callback+0x10>)
1000f3b2:	6018      	str	r0, [r3, #0]
	}
}

plf_drv_status register_resume_callback(resume_callback cb)
{
	plf_drv_status status = STATUS_SUCCESS;
1000f3b4:	2000      	movs	r0, #0
1000f3b6:	e000      	b.n	1000f3ba <register_resume_callback+0xe>
	if(cb == NULL)
	{
		status = STATUS_INVALID_ARGUMENT;
1000f3b8:	2009      	movs	r0, #9
	{
		samb11_app_resume_cb = cb;
		//*apps_resume_cb = (uint32_t)cb;
	}
	return status;
}
1000f3ba:	4770      	bx	lr
1000f3bc:	1001a898 	.word	0x1001a898

1000f3c0 <gpio1_combined_isr_handler>:

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source);
void wakeup_active_event_callback(uint32_t wakeup_source);

void gpio1_combined_isr_handler(void)
{
1000f3c0:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio1 = LPGPIO_16;
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
1000f3c2:	4a18      	ldr	r2, [pc, #96]	; (1000f424 <gpio1_combined_isr_handler+0x64>)
1000f3c4:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000f3c6:	b29b      	uxth	r3, r3
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000f3c8:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000f3ca:	2180      	movs	r1, #128	; 0x80
1000f3cc:	0209      	lsls	r1, r1, #8
1000f3ce:	4301      	orrs	r1, r0
1000f3d0:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000f3d2:	0010      	movs	r0, r2
1000f3d4:	4d14      	ldr	r5, [pc, #80]	; (1000f428 <gpio1_combined_isr_handler+0x68>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000f3d6:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000f3d8:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000f3da:	05db      	lsls	r3, r3, #23
1000f3dc:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000f3de:	d011      	beq.n	1000f404 <gpio1_combined_isr_handler+0x44>
			port_gpio1 = (intstatus & ~(intstatus - 1));
1000f3e0:	b2db      	uxtb	r3, r3
1000f3e2:	4259      	negs	r1, r3
1000f3e4:	400b      	ands	r3, r1
			while (!(port_gpio1 == 1)) {
1000f3e6:	2b01      	cmp	r3, #1
1000f3e8:	d006      	beq.n	1000f3f8 <gpio1_combined_isr_handler+0x38>
1000f3ea:	0011      	movs	r1, r2
				port_gpio1 = port_gpio1 >> 1;
1000f3ec:	085b      	lsrs	r3, r3, #1
				index++;
1000f3ee:	3101      	adds	r1, #1
1000f3f0:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio1 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio1 == 1)) {
1000f3f2:	2b01      	cmp	r3, #1
1000f3f4:	d1fa      	bne.n	1000f3ec <gpio1_combined_isr_handler+0x2c>
1000f3f6:	e000      	b.n	1000f3fa <gpio1_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000f3f8:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000f3fa:	0023      	movs	r3, r4
1000f3fc:	408b      	lsls	r3, r1
1000f3fe:	b29b      	uxth	r3, r3
1000f400:	8703      	strh	r3, [r0, #56]	; 0x38
1000f402:	e003      	b.n	1000f40c <gpio1_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000f404:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000f406:	432b      	orrs	r3, r5
1000f408:	b29b      	uxth	r3, r3
1000f40a:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO1->INTSTATUSCLEAR.reg;
1000f40c:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000f40e:	05db      	lsls	r3, r3, #23
1000f410:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000f412:	d1e2      	bne.n	1000f3da <gpio1_combined_isr_handler+0x1a>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000f414:	2180      	movs	r1, #128	; 0x80
1000f416:	0049      	lsls	r1, r1, #1
1000f418:	3381      	adds	r3, #129	; 0x81
1000f41a:	33ff      	adds	r3, #255	; 0xff
1000f41c:	4a03      	ldr	r2, [pc, #12]	; (1000f42c <gpio1_combined_isr_handler+0x6c>)
1000f41e:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(8);
}
1000f420:	bd30      	pop	{r4, r5, pc}
1000f422:	46c0      	nop			; (mov r8, r8)
1000f424:	40011000 	.word	0x40011000
1000f428:	ffff8000 	.word	0xffff8000
1000f42c:	e000e100 	.word	0xe000e100

1000f430 <gpio0_combined_isr_handler>:

void gpio0_combined_isr_handler(void)
{
1000f430:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio0 = LPGPIO_0;
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
1000f432:	4a17      	ldr	r2, [pc, #92]	; (1000f490 <gpio0_combined_isr_handler+0x60>)
1000f434:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000f436:	b29b      	uxth	r3, r3
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000f438:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000f43a:	2180      	movs	r1, #128	; 0x80
1000f43c:	0209      	lsls	r1, r1, #8
1000f43e:	4301      	orrs	r1, r0
1000f440:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000f442:	0010      	movs	r0, r2
1000f444:	4d13      	ldr	r5, [pc, #76]	; (1000f494 <gpio0_combined_isr_handler+0x64>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000f446:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000f448:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000f44a:	05db      	lsls	r3, r3, #23
1000f44c:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000f44e:	d011      	beq.n	1000f474 <gpio0_combined_isr_handler+0x44>
			port_gpio0 = (intstatus & ~(intstatus - 1));
1000f450:	b2db      	uxtb	r3, r3
1000f452:	4259      	negs	r1, r3
1000f454:	400b      	ands	r3, r1
			while (!(port_gpio0 == 1)) {
1000f456:	2b01      	cmp	r3, #1
1000f458:	d006      	beq.n	1000f468 <gpio0_combined_isr_handler+0x38>
1000f45a:	0011      	movs	r1, r2
				port_gpio0 = port_gpio0 >> 1;
1000f45c:	085b      	lsrs	r3, r3, #1
				index++;
1000f45e:	3101      	adds	r1, #1
1000f460:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio0 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio0 == 1)) {
1000f462:	2b01      	cmp	r3, #1
1000f464:	d1fa      	bne.n	1000f45c <gpio0_combined_isr_handler+0x2c>
1000f466:	e000      	b.n	1000f46a <gpio0_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000f468:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000f46a:	0023      	movs	r3, r4
1000f46c:	408b      	lsls	r3, r1
1000f46e:	b29b      	uxth	r3, r3
1000f470:	8703      	strh	r3, [r0, #56]	; 0x38
1000f472:	e003      	b.n	1000f47c <gpio0_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000f474:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000f476:	432b      	orrs	r3, r5
1000f478:	b29b      	uxth	r3, r3
1000f47a:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO0->INTSTATUSCLEAR.reg;
1000f47c:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000f47e:	05db      	lsls	r3, r3, #23
1000f480:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000f482:	d1e2      	bne.n	1000f44a <gpio0_combined_isr_handler+0x1a>
1000f484:	2180      	movs	r1, #128	; 0x80
1000f486:	3381      	adds	r3, #129	; 0x81
1000f488:	33ff      	adds	r3, #255	; 0xff
1000f48a:	4a03      	ldr	r2, [pc, #12]	; (1000f498 <gpio0_combined_isr_handler+0x68>)
1000f48c:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(7);
}
1000f48e:	bd30      	pop	{r4, r5, pc}
1000f490:	40010000 	.word	0x40010000
1000f494:	ffff8000 	.word	0xffff8000
1000f498:	e000e100 	.word	0xe000e100

1000f49c <PORT1_COMB_Handler>:

#ifdef CHIPVERSION_B0
void PORT1_COMB_Handler(void)
{
1000f49c:	b510      	push	{r4, lr}
	/* if(CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13))) { */
	if (GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13))) {
1000f49e:	4b0c      	ldr	r3, [pc, #48]	; (1000f4d0 <PORT1_COMB_Handler+0x34>)
1000f4a0:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
1000f4a2:	0b5b      	lsrs	r3, r3, #13
1000f4a4:	d010      	beq.n	1000f4c8 <PORT1_COMB_Handler+0x2c>
		handle_ext_wakeup_isr();
1000f4a6:	4b0b      	ldr	r3, [pc, #44]	; (1000f4d4 <PORT1_COMB_Handler+0x38>)
1000f4a8:	681b      	ldr	r3, [r3, #0]
1000f4aa:	4798      	blx	r3

		/* clear specific int pin status that caused the Interrupt */
		/* CMSDK_GPIO1->INTCLEAR |= CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13)); */
		GPIO1->INTSTATUSCLEAR.reg |= GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13));
1000f4ac:	4a08      	ldr	r2, [pc, #32]	; (1000f4d0 <PORT1_COMB_Handler+0x34>)
1000f4ae:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000f4b0:	8f11      	ldrh	r1, [r2, #56]	; 0x38
1000f4b2:	0b5b      	lsrs	r3, r3, #13
1000f4b4:	035b      	lsls	r3, r3, #13
1000f4b6:	430b      	orrs	r3, r1
1000f4b8:	8713      	strh	r3, [r2, #56]	; 0x38
1000f4ba:	2180      	movs	r1, #128	; 0x80
1000f4bc:	0049      	lsls	r1, r1, #1
1000f4be:	23c0      	movs	r3, #192	; 0xc0
1000f4c0:	005b      	lsls	r3, r3, #1
1000f4c2:	4a05      	ldr	r2, [pc, #20]	; (1000f4d8 <PORT1_COMB_Handler+0x3c>)
1000f4c4:	50d1      	str	r1, [r2, r3]
1000f4c6:	e001      	b.n	1000f4cc <PORT1_COMB_Handler+0x30>
		/* NVIC_ClearPendingIRQ(PORT1_COMB_IRQn); */
		NVIC_ClearPendingIRQ(8);
	} else {
		gpio1_combined_isr_handler();
1000f4c8:	4b04      	ldr	r3, [pc, #16]	; (1000f4dc <PORT1_COMB_Handler+0x40>)
1000f4ca:	4798      	blx	r3
	}
}
1000f4cc:	bd10      	pop	{r4, pc}
1000f4ce:	46c0      	nop			; (mov r8, r8)
1000f4d0:	40011000 	.word	0x40011000
1000f4d4:	1001a890 	.word	0x1001a890
1000f4d8:	e000e100 	.word	0xe000e100
1000f4dc:	1000f3c1 	.word	0x1000f3c1

1000f4e0 <wakeup_int_unregister_callback>:
	{
		wakeup_source_callback[wakeup_source] = 0;
	}
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
1000f4e0:	2303      	movs	r3, #3
#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
	if(	(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_0) || 
1000f4e2:	2802      	cmp	r0, #2
1000f4e4:	d804      	bhi.n	1000f4f0 <wakeup_int_unregister_callback+0x10>
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_1) || 
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_2) ) 
	{
		wakeup_source_callback[wakeup_source] = 0;
1000f4e6:	0080      	lsls	r0, r0, #2
1000f4e8:	2200      	movs	r2, #0
1000f4ea:	4b02      	ldr	r3, [pc, #8]	; (1000f4f4 <wakeup_int_unregister_callback+0x14>)
1000f4ec:	50c2      	str	r2, [r0, r3]

#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
1000f4ee:	2300      	movs	r3, #0
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
	}
	return status;
}
1000f4f0:	0018      	movs	r0, r3
1000f4f2:	4770      	bx	lr
1000f4f4:	1001a8a8 	.word	0x1001a8a8

1000f4f8 <wakeup_active_event_callback>:

void wakeup_active_event_callback(uint32_t wakeup_source)
{
1000f4f8:	b510      	push	{r4, lr}
1000f4fa:	0004      	movs	r4, r0
	portint_callback_t callback;
	uint32_t *pu32WakeSource = (uint32_t *)wakeup_source;
	if((*pu32WakeSource & 0xFF) == 1)
1000f4fc:	7803      	ldrb	r3, [r0, #0]
1000f4fe:	2b01      	cmp	r3, #1
1000f500:	d108      	bne.n	1000f514 <wakeup_active_event_callback+0x1c>
	{
		if(wakeup_source_callback[0] != NULL) {
1000f502:	4b11      	ldr	r3, [pc, #68]	; (1000f548 <wakeup_active_event_callback+0x50>)
1000f504:	681b      	ldr	r3, [r3, #0]
1000f506:	2b00      	cmp	r3, #0
1000f508:	d000      	beq.n	1000f50c <wakeup_active_event_callback+0x14>
			callback = wakeup_source_callback[0];
			callback();
1000f50a:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF);
1000f50c:	23ff      	movs	r3, #255	; 0xff
1000f50e:	6822      	ldr	r2, [r4, #0]
1000f510:	439a      	bics	r2, r3
1000f512:	6022      	str	r2, [r4, #0]
	}
	if(((*pu32WakeSource >> 8) & 0xFF) == 1)
1000f514:	7863      	ldrb	r3, [r4, #1]
1000f516:	2b01      	cmp	r3, #1
1000f518:	d108      	bne.n	1000f52c <wakeup_active_event_callback+0x34>
	{
		if(wakeup_source_callback[1] != NULL) {
1000f51a:	4b0b      	ldr	r3, [pc, #44]	; (1000f548 <wakeup_active_event_callback+0x50>)
1000f51c:	685b      	ldr	r3, [r3, #4]
1000f51e:	2b00      	cmp	r3, #0
1000f520:	d000      	beq.n	1000f524 <wakeup_active_event_callback+0x2c>
			callback = wakeup_source_callback[1];
			callback();
1000f522:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 8);
1000f524:	4b09      	ldr	r3, [pc, #36]	; (1000f54c <wakeup_active_event_callback+0x54>)
1000f526:	6822      	ldr	r2, [r4, #0]
1000f528:	4013      	ands	r3, r2
1000f52a:	6023      	str	r3, [r4, #0]
	}
	if(((*pu32WakeSource >> 16) & 0xFF) == 1)
1000f52c:	78a3      	ldrb	r3, [r4, #2]
1000f52e:	2b01      	cmp	r3, #1
1000f530:	d108      	bne.n	1000f544 <wakeup_active_event_callback+0x4c>
	{
		if(wakeup_source_callback[2] != NULL) {
1000f532:	4b05      	ldr	r3, [pc, #20]	; (1000f548 <wakeup_active_event_callback+0x50>)
1000f534:	689b      	ldr	r3, [r3, #8]
1000f536:	2b00      	cmp	r3, #0
1000f538:	d000      	beq.n	1000f53c <wakeup_active_event_callback+0x44>
			callback = wakeup_source_callback[2];
			callback();
1000f53a:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 16);
1000f53c:	4b04      	ldr	r3, [pc, #16]	; (1000f550 <wakeup_active_event_callback+0x58>)
1000f53e:	6822      	ldr	r2, [r4, #0]
1000f540:	4013      	ands	r3, r2
1000f542:	6023      	str	r3, [r4, #0]
	}
}
1000f544:	bd10      	pop	{r4, pc}
1000f546:	46c0      	nop			; (mov r8, r8)
1000f548:	1001a8a8 	.word	0x1001a8a8
1000f54c:	ffff00ff 	.word	0xffff00ff
1000f550:	ff00ffff 	.word	0xff00ffff

1000f554 <sms_plf_event_cb>:
    //gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, true);
}

static void sms_plf_event_cb(void)
{
    sms_current_interrupt.int_on = true;
1000f554:	2201      	movs	r2, #1
1000f556:	4b01      	ldr	r3, [pc, #4]	; (1000f55c <sms_plf_event_cb+0x8>)
1000f558:	705a      	strb	r2, [r3, #1]
}
1000f55a:	4770      	bx	lr
1000f55c:	10019c00 	.word	0x10019c00

1000f560 <resume_cb>:
    sms_ble_send_cnt = 0;
}


static void resume_cb(void)
{
1000f560:	b510      	push	{r4, lr}
    init_port_list(); // re-initialize all ports
1000f562:	4b0a      	ldr	r3, [pc, #40]	; (1000f58c <resume_cb+0x2c>)
1000f564:	4798      	blx	r3
    serial_console_init(); // GPIO (UART) for the console
1000f566:	4b0a      	ldr	r3, [pc, #40]	; (1000f590 <resume_cb+0x30>)
1000f568:	4798      	blx	r3
    sms_dualtimer_init();
1000f56a:	4b0a      	ldr	r3, [pc, #40]	; (1000f594 <resume_cb+0x34>)
1000f56c:	4798      	blx	r3
    delay_init();
1000f56e:	4b0a      	ldr	r3, [pc, #40]	; (1000f598 <resume_cb+0x38>)
1000f570:	4798      	blx	r3
    sms_button_configure_gpio(); // GPIO (AO_0 & AO_1) for the buttons
1000f572:	4b0a      	ldr	r3, [pc, #40]	; (1000f59c <resume_cb+0x3c>)
1000f574:	4798      	blx	r3
    sms_led_gpio_init();
1000f576:	4b0a      	ldr	r3, [pc, #40]	; (1000f5a0 <resume_cb+0x40>)
1000f578:	4798      	blx	r3
    sms_spi_master_configure();
1000f57a:	4b0a      	ldr	r3, [pc, #40]	; (1000f5a4 <resume_cb+0x44>)
1000f57c:	4798      	blx	r3
    sms_i2c_master_configure();
1000f57e:	4b0a      	ldr	r3, [pc, #40]	; (1000f5a8 <resume_cb+0x48>)
1000f580:	4798      	blx	r3
    sms_mpu_configure_gpio();
1000f582:	4b0a      	ldr	r3, [pc, #40]	; (1000f5ac <resume_cb+0x4c>)
1000f584:	4798      	blx	r3
    sms_monitor_configure_gpio();
1000f586:	4b0a      	ldr	r3, [pc, #40]	; (1000f5b0 <resume_cb+0x50>)
1000f588:	4798      	blx	r3
    //gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, true);
}
1000f58a:	bd10      	pop	{r4, pc}
1000f58c:	1000eda1 	.word	0x1000eda1
1000f590:	1000eb09 	.word	0x1000eb09
1000f594:	1000b231 	.word	0x1000b231
1000f598:	100080e9 	.word	0x100080e9
1000f59c:	1000a329 	.word	0x1000a329
1000f5a0:	1000ac11 	.word	0x1000ac11
1000f5a4:	1000b0e9 	.word	0x1000b0e9
1000f5a8:	1000a8c9 	.word	0x1000a8c9
1000f5ac:	1000aa55 	.word	0x1000aa55
1000f5b0:	1000a751 	.word	0x1000a751

1000f5b4 <sms_init_variables>:
 */
/*- Includes ---------------------------------------------------------------*/
#include "sms_peripheral1.h"

void sms_init_variables(void)
{
1000f5b4:	b510      	push	{r4, lr}
    // states
    ble_current_state = BLE_STATE_POWEROFF;
1000f5b6:	2300      	movs	r3, #0
1000f5b8:	4a10      	ldr	r2, [pc, #64]	; (1000f5fc <sms_init_variables+0x48>)
1000f5ba:	7013      	strb	r3, [r2, #0]
    button_instance.current_state = BUTTON_STATE_NONE;
1000f5bc:	4a10      	ldr	r2, [pc, #64]	; (1000f600 <sms_init_variables+0x4c>)
1000f5be:	7053      	strb	r3, [r2, #1]
    pressure_device.ms58_device.current_state = MS58_STATE_NONE;
1000f5c0:	4810      	ldr	r0, [pc, #64]	; (1000f604 <sms_init_variables+0x50>)
1000f5c2:	2225      	movs	r2, #37	; 0x25
1000f5c4:	5483      	strb	r3, [r0, r2]
    timer1_current_mode = TIMER1_MODE_NONE;
1000f5c6:	4a10      	ldr	r2, [pc, #64]	; (1000f608 <sms_init_variables+0x54>)
1000f5c8:	7013      	strb	r3, [r2, #0]
    timer2_current_mode = TIMER2_MODE_NONE;
1000f5ca:	4a10      	ldr	r2, [pc, #64]	; (1000f60c <sms_init_variables+0x58>)
1000f5cc:	7013      	strb	r3, [r2, #0]
    sms_working_mode = SMS_MODE_BUTTON_SOLO;
1000f5ce:	2101      	movs	r1, #1
1000f5d0:	4a0f      	ldr	r2, [pc, #60]	; (1000f610 <sms_init_variables+0x5c>)
1000f5d2:	7011      	strb	r1, [r2, #0]
    
    // button
    btn0_instance.id = SMS_BTN_0;
1000f5d4:	4a0f      	ldr	r2, [pc, #60]	; (1000f614 <sms_init_variables+0x60>)
1000f5d6:	7013      	strb	r3, [r2, #0]
    btn0_instance.gpio_pin = SMS_BTN_0_PIN;
1000f5d8:	241f      	movs	r4, #31
1000f5da:	7054      	strb	r4, [r2, #1]
    btn0_instance.int_enabled = true;
1000f5dc:	7091      	strb	r1, [r2, #2]
    btn0_instance.char_value = 0;
1000f5de:	70d3      	strb	r3, [r2, #3]
    
    pressure_device.state = PRESSURE_STATE_OFF;
1000f5e0:	2228      	movs	r2, #40	; 0x28
1000f5e2:	5483      	strb	r3, [r0, r2]
    ulp_ready = false;
1000f5e4:	4a0c      	ldr	r2, [pc, #48]	; (1000f618 <sms_init_variables+0x64>)
1000f5e6:	7013      	strb	r3, [r2, #0]
    
    
    btn1_instance.id = SMS_BTN_1;
1000f5e8:	4a0c      	ldr	r2, [pc, #48]	; (1000f61c <sms_init_variables+0x68>)
1000f5ea:	7011      	strb	r1, [r2, #0]
    btn1_instance.gpio_pin = SMS_BTN_1_PIN;
1000f5ec:	201d      	movs	r0, #29
1000f5ee:	7050      	strb	r0, [r2, #1]
    btn1_instance.int_enabled = true;
1000f5f0:	7091      	strb	r1, [r2, #2]
    btn1_instance.char_value = 0;
1000f5f2:	70d3      	strb	r3, [r2, #3]
    
    sms_ble_send_cnt = 0;
1000f5f4:	4a0a      	ldr	r2, [pc, #40]	; (1000f620 <sms_init_variables+0x6c>)
1000f5f6:	8013      	strh	r3, [r2, #0]
}
1000f5f8:	bd10      	pop	{r4, pc}
1000f5fa:	46c0      	nop			; (mov r8, r8)
1000f5fc:	10019c18 	.word	0x10019c18
1000f600:	10019b08 	.word	0x10019b08
1000f604:	10019b7c 	.word	0x10019b7c
1000f608:	10019a74 	.word	0x10019a74
1000f60c:	10019c19 	.word	0x10019c19
1000f610:	10019b00 	.word	0x10019b00
1000f614:	10019a70 	.word	0x10019a70
1000f618:	10019b01 	.word	0x10019b01
1000f61c:	10019b04 	.word	0x10019b04
1000f620:	10019c34 	.word	0x10019c34

1000f624 <main>:
    sms_current_interrupt.int_on = true;
}


int main(void)
{
1000f624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int res;
    
    /* Define current BLE state
     * ------------------------ */
    ble_current_state = BLE_STATE_STARTING;
1000f626:	2210      	movs	r2, #16
1000f628:	4ba6      	ldr	r3, [pc, #664]	; (1000f8c4 <main+0x2a0>)
1000f62a:	701a      	strb	r2, [r3, #0]
    
    /* Initialize platform
     * ------------------- */
	platform_driver_init();
1000f62c:	4ba6      	ldr	r3, [pc, #664]	; (1000f8c8 <main+0x2a4>)
1000f62e:	4798      	blx	r3
	gpio_init(); // GPIO
1000f630:	4ba6      	ldr	r3, [pc, #664]	; (1000f8cc <main+0x2a8>)
1000f632:	4798      	blx	r3
	serial_console_init(); // serial console for debugging
1000f634:	4ba6      	ldr	r3, [pc, #664]	; (1000f8d0 <main+0x2ac>)
1000f636:	4798      	blx	r3
    
    /* Disable ULP
     * ----------- */
	acquire_sleep_lock();
1000f638:	4ba6      	ldr	r3, [pc, #664]	; (1000f8d4 <main+0x2b0>)
1000f63a:	4798      	blx	r3
    

    /* Initialize SMS flags
     * -------------------- */
    sms_init_variables();
1000f63c:	4ba6      	ldr	r3, [pc, #664]	; (1000f8d8 <main+0x2b4>)
1000f63e:	4798      	blx	r3
    
    
    /* Initialize hardware components
     * ------------------------------ */
    // Dualtimer
    sms_dualtimer_init();
1000f640:	4ba6      	ldr	r3, [pc, #664]	; (1000f8dc <main+0x2b8>)
1000f642:	4798      	blx	r3
	
    // Blocking delay (hacked from other SAM platforms)
    delay_init();
1000f644:	4ba6      	ldr	r3, [pc, #664]	; (1000f8e0 <main+0x2bc>)
1000f646:	4798      	blx	r3

	// Buttons
    sms_button_configure_gpio();
1000f648:	4ba6      	ldr	r3, [pc, #664]	; (1000f8e4 <main+0x2c0>)
1000f64a:	4798      	blx	r3
    
    // LED
    sms_led_gpio_init();
1000f64c:	4ba6      	ldr	r3, [pc, #664]	; (1000f8e8 <main+0x2c4>)
1000f64e:	4798      	blx	r3
    
    // I2C
    sms_i2c_master_configure();
1000f650:	4ba6      	ldr	r3, [pc, #664]	; (1000f8ec <main+0x2c8>)
1000f652:	4798      	blx	r3
    
    // SPI
    sms_spi_master_configure();
1000f654:	4ba6      	ldr	r3, [pc, #664]	; (1000f8f0 <main+0x2cc>)
1000f656:	4798      	blx	r3
    
    // MPU
    sms_mpu_configure_gpio();
1000f658:	4ba6      	ldr	r3, [pc, #664]	; (1000f8f4 <main+0x2d0>)
1000f65a:	4798      	blx	r3
    
    // MS58
    pressure_device.ms58_device.current_state = MS58_STATE_NONE;
1000f65c:	2100      	movs	r1, #0
1000f65e:	2325      	movs	r3, #37	; 0x25
1000f660:	4aa5      	ldr	r2, [pc, #660]	; (1000f8f8 <main+0x2d4>)
1000f662:	54d1      	strb	r1, [r2, r3]
    //ms58_device.reset_done = false;
    //ms58_device.init_ok = false;
    
    sms_monitor_configure_gpio();
1000f664:	4ba5      	ldr	r3, [pc, #660]	; (1000f8fc <main+0x2d8>)
1000f666:	4798      	blx	r3
    
    /* Initialize the BLE module
     * ------------------------- */
	ble_device_init(NULL); // initialize the BLE chip and set the device address 
1000f668:	2000      	movs	r0, #0
1000f66a:	4ba5      	ldr	r3, [pc, #660]	; (1000f900 <main+0x2dc>)
1000f66c:	4798      	blx	r3
	
    
    /* Define BLE services
     * ------------------- */
    sms_button_define_services();
1000f66e:	4ba5      	ldr	r3, [pc, #660]	; (1000f904 <main+0x2e0>)
1000f670:	4798      	blx	r3
    sms_pressure_define_services();
1000f672:	4ba5      	ldr	r3, [pc, #660]	; (1000f908 <main+0x2e4>)
1000f674:	4798      	blx	r3
    
    
    /* Register callbacks
     * ------------------ */
    // Recovering from ULP
    register_resume_callback(resume_cb); // register resume callback
1000f676:	48a5      	ldr	r0, [pc, #660]	; (1000f90c <main+0x2e8>)
1000f678:	4ba5      	ldr	r3, [pc, #660]	; (1000f910 <main+0x2ec>)
1000f67a:	4798      	blx	r3

    // Dualtimer (AON timer enables on registration... so do it later)    
    sms_dualtimer_register_callback(DUALTIMER_TIMER1, sms_dualtimer1_cb); // button pressing timer
1000f67c:	49a5      	ldr	r1, [pc, #660]	; (1000f914 <main+0x2f0>)
1000f67e:	2000      	movs	r0, #0
1000f680:	4ca5      	ldr	r4, [pc, #660]	; (1000f918 <main+0x2f4>)
1000f682:	47a0      	blx	r4
    sms_dualtimer_register_callback(DUALTIMER_TIMER2, sms_dualtimer2_cb); // LED blinking timer
1000f684:	49a5      	ldr	r1, [pc, #660]	; (1000f91c <main+0x2f8>)
1000f686:	2001      	movs	r0, #1
1000f688:	47a0      	blx	r4

    // Buttons
    sms_button_register_callbacks();
1000f68a:	4ba5      	ldr	r3, [pc, #660]	; (1000f920 <main+0x2fc>)
1000f68c:	4798      	blx	r3
    
    // MPU
    sms_mpu_register_callbacks();
1000f68e:	4ba5      	ldr	r3, [pc, #660]	; (1000f924 <main+0x300>)
1000f690:	4798      	blx	r3

    // BLE
    ble_mgr_events_callback_handler(REGISTER_CALL_BACK, BLE_GAP_EVENT_TYPE, sms_ble_gap_cb);
1000f692:	4aa5      	ldr	r2, [pc, #660]	; (1000f928 <main+0x304>)
1000f694:	2100      	movs	r1, #0
1000f696:	2000      	movs	r0, #0
1000f698:	4ca4      	ldr	r4, [pc, #656]	; (1000f92c <main+0x308>)
1000f69a:	47a0      	blx	r4
    ble_mgr_events_callback_handler(REGISTER_CALL_BACK, BLE_GATT_SERVER_EVENT_TYPE, sms_ble_gatt_server_cb);
1000f69c:	4aa4      	ldr	r2, [pc, #656]	; (1000f930 <main+0x30c>)
1000f69e:	2102      	movs	r1, #2
1000f6a0:	2000      	movs	r0, #0
1000f6a2:	47a0      	blx	r4
    register_ble_user_event_cb(sms_plf_event_cb);
1000f6a4:	48a3      	ldr	r0, [pc, #652]	; (1000f934 <main+0x310>)
1000f6a6:	4ba4      	ldr	r3, [pc, #656]	; (1000f938 <main+0x314>)
1000f6a8:	4798      	blx	r3

    //ble_set_ulp_mode(BLE_ULP_MODE_SET);
    
    /* Enable buttons interrupts
     * ------------------------- */
    sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
1000f6aa:	2100      	movs	r1, #0
1000f6ac:	2000      	movs	r0, #0
1000f6ae:	4ba3      	ldr	r3, [pc, #652]	; (1000f93c <main+0x318>)
1000f6b0:	4798      	blx	r3
    //register int n21 asm("sp");
    //register int n22 asm("lr");
    //register int n23 asm("r15");
    //DBG_LOG("at post-init: sp 0x%x, lr 0x%x", n21, n22);
    
    res = sms_mpu_initialize();
1000f6b2:	4ba3      	ldr	r3, [pc, #652]	; (1000f940 <main+0x31c>)
1000f6b4:	4798      	blx	r3
    if(res) {
1000f6b6:	2800      	cmp	r0, #0
1000f6b8:	d006      	beq.n	1000f6c8 <main+0xa4>
        DBG_LOG("Could not initialize MPU!");
1000f6ba:	48a2      	ldr	r0, [pc, #648]	; (1000f944 <main+0x320>)
1000f6bc:	4ba2      	ldr	r3, [pc, #648]	; (1000f948 <main+0x324>)
1000f6be:	4798      	blx	r3
1000f6c0:	48a2      	ldr	r0, [pc, #648]	; (1000f94c <main+0x328>)
1000f6c2:	4ba3      	ldr	r3, [pc, #652]	; (1000f950 <main+0x32c>)
1000f6c4:	4798      	blx	r3
1000f6c6:	e7fe      	b.n	1000f6c6 <main+0xa2>
        while(1) {}
    }
    sms_sensors_interrupt_toggle(true, false);
1000f6c8:	2100      	movs	r1, #0
1000f6ca:	2001      	movs	r0, #1
1000f6cc:	4ba1      	ldr	r3, [pc, #644]	; (1000f954 <main+0x330>)
1000f6ce:	4798      	blx	r3

    
	while(true)
	{
		/* BLE Event task */
		ble_event_task(BLE_EVENT_TIMEOUT);
1000f6d0:	4da1      	ldr	r5, [pc, #644]	; (1000f958 <main+0x334>)
		
		/* Write application task */
        if(sms_current_interrupt.int_on)
1000f6d2:	4ca2      	ldr	r4, [pc, #648]	; (1000f95c <main+0x338>)
        {
            if(ulp_active) {
1000f6d4:	4ea2      	ldr	r6, [pc, #648]	; (1000f960 <main+0x33c>)

    
	while(true)
	{
		/* BLE Event task */
		ble_event_task(BLE_EVENT_TIMEOUT);
1000f6d6:	2001      	movs	r0, #1
1000f6d8:	4240      	negs	r0, r0
1000f6da:	47a8      	blx	r5
		
		/* Write application task */
        if(sms_current_interrupt.int_on)
1000f6dc:	7863      	ldrb	r3, [r4, #1]
1000f6de:	2b00      	cmp	r3, #0
1000f6e0:	d100      	bne.n	1000f6e4 <main+0xc0>
1000f6e2:	e0db      	b.n	1000f89c <main+0x278>
        {
            if(ulp_active) {
1000f6e4:	7833      	ldrb	r3, [r6, #0]
1000f6e6:	2b00      	cmp	r3, #0
1000f6e8:	d009      	beq.n	1000f6fe <main+0xda>
                DBG_LOG_DEV("[main]\t\t\t\tWaking up...");
1000f6ea:	4896      	ldr	r0, [pc, #600]	; (1000f944 <main+0x320>)
1000f6ec:	4b96      	ldr	r3, [pc, #600]	; (1000f948 <main+0x324>)
1000f6ee:	4798      	blx	r3
1000f6f0:	489c      	ldr	r0, [pc, #624]	; (1000f964 <main+0x340>)
1000f6f2:	4f97      	ldr	r7, [pc, #604]	; (1000f950 <main+0x32c>)
1000f6f4:	47b8      	blx	r7
                acquire_sleep_lock();
1000f6f6:	4b77      	ldr	r3, [pc, #476]	; (1000f8d4 <main+0x2b0>)
1000f6f8:	4798      	blx	r3
                DBG_LOG_CONT_DEV(" done!");
1000f6fa:	489b      	ldr	r0, [pc, #620]	; (1000f968 <main+0x344>)
1000f6fc:	47b8      	blx	r7
            }                
            //ulp_ready = false;
            DBG_LOG_DEV("[main]\t\t\t\tDisabling button int...");
1000f6fe:	4891      	ldr	r0, [pc, #580]	; (1000f944 <main+0x320>)
1000f700:	4b91      	ldr	r3, [pc, #580]	; (1000f948 <main+0x324>)
1000f702:	4798      	blx	r3
1000f704:	4899      	ldr	r0, [pc, #612]	; (1000f96c <main+0x348>)
1000f706:	4f92      	ldr	r7, [pc, #584]	; (1000f950 <main+0x32c>)
1000f708:	47b8      	blx	r7
            sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
1000f70a:	2101      	movs	r1, #1
1000f70c:	2001      	movs	r0, #1
1000f70e:	4b8b      	ldr	r3, [pc, #556]	; (1000f93c <main+0x318>)
1000f710:	4798      	blx	r3
            DBG_LOG_CONT_DEV(" done!");
1000f712:	4895      	ldr	r0, [pc, #596]	; (1000f968 <main+0x344>)
1000f714:	47b8      	blx	r7
            //psp = __get_PSP();
            //msp = __get_MSP();
            //printf("\r\n\@ main: psp 0x%lx, msp 0x%lx", psp, msp);
            switch(sms_current_interrupt.source)
1000f716:	4b91      	ldr	r3, [pc, #580]	; (1000f95c <main+0x338>)
1000f718:	781b      	ldrb	r3, [r3, #0]
1000f71a:	b2db      	uxtb	r3, r3
1000f71c:	2b06      	cmp	r3, #6
1000f71e:	d900      	bls.n	1000f722 <main+0xfe>
1000f720:	e0a6      	b.n	1000f870 <main+0x24c>
1000f722:	009b      	lsls	r3, r3, #2
1000f724:	4a92      	ldr	r2, [pc, #584]	; (1000f970 <main+0x34c>)
1000f726:	58d3      	ldr	r3, [r2, r3]
1000f728:	469f      	mov	pc, r3
            {
                case INT_NONE:
                //sms_monitor_states("NONE");
                DBG_LOG_DEV("\n\r...NO SOURCE!!");
1000f72a:	4886      	ldr	r0, [pc, #536]	; (1000f944 <main+0x320>)
1000f72c:	4b86      	ldr	r3, [pc, #536]	; (1000f948 <main+0x324>)
1000f72e:	4798      	blx	r3
1000f730:	4890      	ldr	r0, [pc, #576]	; (1000f974 <main+0x350>)
1000f732:	4b87      	ldr	r3, [pc, #540]	; (1000f950 <main+0x32c>)
1000f734:	4798      	blx	r3
                //if(ulp_ready) {
                    //DBG_LOG_DEV("[main]\t\t\tULP...");
                    //release_sleep_lock();
                //}
                //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
                break;
1000f736:	e0a1      	b.n	1000f87c <main+0x258>
                
                case INT_BTN0:
                //sms_monitor_states("INT_BTN0");
                DBG_LOG_DEV("\n\r...BTN0");
1000f738:	4882      	ldr	r0, [pc, #520]	; (1000f944 <main+0x320>)
1000f73a:	4b83      	ldr	r3, [pc, #524]	; (1000f948 <main+0x324>)
1000f73c:	4798      	blx	r3
1000f73e:	488e      	ldr	r0, [pc, #568]	; (1000f978 <main+0x354>)
1000f740:	4b83      	ldr	r3, [pc, #524]	; (1000f950 <main+0x32c>)
1000f742:	4798      	blx	r3
                if((sms_working_mode == SMS_MODE_BUTTON_MPU) || (sms_working_mode == SMS_MODE_COMPLETE) || (sms_working_mode == SMS_MODE_BUTTON_SOLO) || (sms_working_mode == SMS_MODE_BUTTON_PRESSURE)) {
1000f744:	4b8d      	ldr	r3, [pc, #564]	; (1000f97c <main+0x358>)
1000f746:	781b      	ldrb	r3, [r3, #0]
1000f748:	2b04      	cmp	r3, #4
1000f74a:	d00c      	beq.n	1000f766 <main+0x142>
1000f74c:	4b8b      	ldr	r3, [pc, #556]	; (1000f97c <main+0x358>)
1000f74e:	781b      	ldrb	r3, [r3, #0]
1000f750:	2b07      	cmp	r3, #7
1000f752:	d008      	beq.n	1000f766 <main+0x142>
1000f754:	4b89      	ldr	r3, [pc, #548]	; (1000f97c <main+0x358>)
1000f756:	781b      	ldrb	r3, [r3, #0]
1000f758:	2b01      	cmp	r3, #1
1000f75a:	d004      	beq.n	1000f766 <main+0x142>
1000f75c:	4b87      	ldr	r3, [pc, #540]	; (1000f97c <main+0x358>)
1000f75e:	781b      	ldrb	r3, [r3, #0]
1000f760:	2b05      	cmp	r3, #5
1000f762:	d000      	beq.n	1000f766 <main+0x142>
1000f764:	e08a      	b.n	1000f87c <main+0x258>
                        //DBG_LOG_DEV("[main]\t\t\t\tDisabling sensor int...");
                        //sms_sensors_toggle_interrupt(SMS_EXTINT_DISABLE);
                        //DBG_LOG_CONT_DEV(" done!");
                    //}                        
                    //sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
                    if(sms_button_fn(SMS_BTN_0) < 0) {
1000f766:	2000      	movs	r0, #0
1000f768:	4b85      	ldr	r3, [pc, #532]	; (1000f980 <main+0x35c>)
1000f76a:	4798      	blx	r3
1000f76c:	2800      	cmp	r0, #0
1000f76e:	db00      	blt.n	1000f772 <main+0x14e>
1000f770:	e084      	b.n	1000f87c <main+0x258>
                        DBG_LOG("[main]\t\t\t\tError in sms_button_fn()!");
1000f772:	4874      	ldr	r0, [pc, #464]	; (1000f944 <main+0x320>)
1000f774:	4b74      	ldr	r3, [pc, #464]	; (1000f948 <main+0x324>)
1000f776:	4798      	blx	r3
1000f778:	4882      	ldr	r0, [pc, #520]	; (1000f984 <main+0x360>)
1000f77a:	4b75      	ldr	r3, [pc, #468]	; (1000f950 <main+0x32c>)
1000f77c:	4798      	blx	r3
1000f77e:	e07d      	b.n	1000f87c <main+0x258>
                }                    
                break;
                
                case INT_BTN1:
                //sms_monitor_states("INT_BTN1");
                DBG_LOG_DEV("\n\r...BTN1");
1000f780:	4870      	ldr	r0, [pc, #448]	; (1000f944 <main+0x320>)
1000f782:	4b71      	ldr	r3, [pc, #452]	; (1000f948 <main+0x324>)
1000f784:	4798      	blx	r3
1000f786:	4880      	ldr	r0, [pc, #512]	; (1000f988 <main+0x364>)
1000f788:	4b71      	ldr	r3, [pc, #452]	; (1000f950 <main+0x32c>)
1000f78a:	4798      	blx	r3
                if((sms_working_mode == SMS_MODE_BUTTON_MPU) || (sms_working_mode == SMS_MODE_COMPLETE) || (sms_working_mode == SMS_MODE_BUTTON_SOLO) || (sms_working_mode == SMS_MODE_BUTTON_PRESSURE)) {
1000f78c:	4b7b      	ldr	r3, [pc, #492]	; (1000f97c <main+0x358>)
1000f78e:	781b      	ldrb	r3, [r3, #0]
1000f790:	2b04      	cmp	r3, #4
1000f792:	d00b      	beq.n	1000f7ac <main+0x188>
1000f794:	4b79      	ldr	r3, [pc, #484]	; (1000f97c <main+0x358>)
1000f796:	781b      	ldrb	r3, [r3, #0]
1000f798:	2b07      	cmp	r3, #7
1000f79a:	d007      	beq.n	1000f7ac <main+0x188>
1000f79c:	4b77      	ldr	r3, [pc, #476]	; (1000f97c <main+0x358>)
1000f79e:	781b      	ldrb	r3, [r3, #0]
1000f7a0:	2b01      	cmp	r3, #1
1000f7a2:	d003      	beq.n	1000f7ac <main+0x188>
1000f7a4:	4b75      	ldr	r3, [pc, #468]	; (1000f97c <main+0x358>)
1000f7a6:	781b      	ldrb	r3, [r3, #0]
1000f7a8:	2b05      	cmp	r3, #5
1000f7aa:	d167      	bne.n	1000f87c <main+0x258>
                        //DBG_LOG_DEV("[main]\t\t\t\tDisabling sensor int...");
                        //sms_sensors_toggle_interrupt(SMS_EXTINT_DISABLE);
                        //DBG_LOG_CONT_DEV(" done!");
                    //}                        
                    //sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
                    if(sms_button_fn(SMS_BTN_1) < 0) {
1000f7ac:	2001      	movs	r0, #1
1000f7ae:	4b74      	ldr	r3, [pc, #464]	; (1000f980 <main+0x35c>)
1000f7b0:	4798      	blx	r3
1000f7b2:	2800      	cmp	r0, #0
1000f7b4:	da62      	bge.n	1000f87c <main+0x258>
                        DBG_LOG("[main]\t\t\t\tError in sms_button_fn()!");
1000f7b6:	4863      	ldr	r0, [pc, #396]	; (1000f944 <main+0x320>)
1000f7b8:	4b63      	ldr	r3, [pc, #396]	; (1000f948 <main+0x324>)
1000f7ba:	4798      	blx	r3
1000f7bc:	4871      	ldr	r0, [pc, #452]	; (1000f984 <main+0x360>)
1000f7be:	4b64      	ldr	r3, [pc, #400]	; (1000f950 <main+0x32c>)
1000f7c0:	4798      	blx	r3
1000f7c2:	e05b      	b.n	1000f87c <main+0x258>
                }                    
                break;
                
                case INT_MPU_DRDY:
                //sms_monitor_states("INT_IMU_DRDY");
                DBG_LOG_DEV("\n\r...MPU_DRDY");
1000f7c4:	485f      	ldr	r0, [pc, #380]	; (1000f944 <main+0x320>)
1000f7c6:	4b60      	ldr	r3, [pc, #384]	; (1000f948 <main+0x324>)
1000f7c8:	4798      	blx	r3
1000f7ca:	4870      	ldr	r0, [pc, #448]	; (1000f98c <main+0x368>)
1000f7cc:	4b60      	ldr	r3, [pc, #384]	; (1000f950 <main+0x32c>)
1000f7ce:	4798      	blx	r3
                //if((sms_working_mode == SMS_MODE_BUTTON_MPU) || (sms_working_mode == SMS_MODE_COMPLETE) || (sms_working_mode == SMS_MODE_MPU_SOLO) || (sms_working_mode == SMS_MODE_MPU_PRESSURE)) {
                    sms_mpu_poll_data();
1000f7d0:	4b6f      	ldr	r3, [pc, #444]	; (1000f990 <main+0x36c>)
1000f7d2:	4798      	blx	r3
                //}                    
                break;
1000f7d4:	e052      	b.n	1000f87c <main+0x258>
                
                case INT_AON_TIMER:
                //sms_monitor_states("INT_AON_TIMER");
                DBG_LOG_DEV("\n\r...AON_TIMER");
1000f7d6:	485b      	ldr	r0, [pc, #364]	; (1000f944 <main+0x320>)
1000f7d8:	4b5b      	ldr	r3, [pc, #364]	; (1000f948 <main+0x324>)
1000f7da:	4798      	blx	r3
1000f7dc:	486d      	ldr	r0, [pc, #436]	; (1000f994 <main+0x370>)
1000f7de:	4b5c      	ldr	r3, [pc, #368]	; (1000f950 <main+0x32c>)
1000f7e0:	4798      	blx	r3
                if((sms_working_mode == SMS_MODE_BUTTON_PRESSURE) || (sms_working_mode == SMS_MODE_COMPLETE) || (sms_working_mode == SMS_MODE_PRESSURE_SOLO) || (sms_working_mode == SMS_MODE_MPU_PRESSURE)) {
1000f7e2:	4b66      	ldr	r3, [pc, #408]	; (1000f97c <main+0x358>)
1000f7e4:	781b      	ldrb	r3, [r3, #0]
1000f7e6:	2b05      	cmp	r3, #5
1000f7e8:	d00b      	beq.n	1000f802 <main+0x1de>
1000f7ea:	4b64      	ldr	r3, [pc, #400]	; (1000f97c <main+0x358>)
1000f7ec:	781b      	ldrb	r3, [r3, #0]
1000f7ee:	2b07      	cmp	r3, #7
1000f7f0:	d007      	beq.n	1000f802 <main+0x1de>
1000f7f2:	4b62      	ldr	r3, [pc, #392]	; (1000f97c <main+0x358>)
1000f7f4:	781b      	ldrb	r3, [r3, #0]
1000f7f6:	2b03      	cmp	r3, #3
1000f7f8:	d003      	beq.n	1000f802 <main+0x1de>
1000f7fa:	4b60      	ldr	r3, [pc, #384]	; (1000f97c <main+0x358>)
1000f7fc:	781b      	ldrb	r3, [r3, #0]
1000f7fe:	2b06      	cmp	r3, #6
1000f800:	d13c      	bne.n	1000f87c <main+0x258>
                    if(ble_current_state == BLE_STATE_PAIRED) {
1000f802:	4b30      	ldr	r3, [pc, #192]	; (1000f8c4 <main+0x2a0>)
1000f804:	781b      	ldrb	r3, [r3, #0]
1000f806:	2b22      	cmp	r3, #34	; 0x22
1000f808:	d10a      	bne.n	1000f820 <main+0x1fc>
                        //DBG_LOG_DEV("[main]\t\t\tDisabling button int...");
                        //sms_button_toggle_interrupt(SMS_EXTINT_DISABLE);
                        //DBG_LOG_CONT_DEV(" done!");
                        DBG_LOG_DEV("[main]\t\t\t\tPolling pressure data...");
1000f80a:	484e      	ldr	r0, [pc, #312]	; (1000f944 <main+0x320>)
1000f80c:	4b4e      	ldr	r3, [pc, #312]	; (1000f948 <main+0x324>)
1000f80e:	4798      	blx	r3
1000f810:	4861      	ldr	r0, [pc, #388]	; (1000f998 <main+0x374>)
1000f812:	4f4f      	ldr	r7, [pc, #316]	; (1000f950 <main+0x32c>)
1000f814:	47b8      	blx	r7
                        sms_pressure_poll_data();
1000f816:	4b61      	ldr	r3, [pc, #388]	; (1000f99c <main+0x378>)
1000f818:	4798      	blx	r3
                        DBG_LOG_CONT_DEV(" done!");
1000f81a:	4853      	ldr	r0, [pc, #332]	; (1000f968 <main+0x344>)
1000f81c:	47b8      	blx	r7
1000f81e:	e02d      	b.n	1000f87c <main+0x258>
                        //DBG_LOG_DEV("[main]\t\t\tEnabling button int...");
                        //sms_button_toggle_interrupt(SMS_EXTINT_ENABLE);
                        //DBG_LOG_CONT_DEV(" done!");
                    }
                    else if(ble_current_state == BLE_STATE_INDICATING) {
1000f820:	4b28      	ldr	r3, [pc, #160]	; (1000f8c4 <main+0x2a0>)
1000f822:	781b      	ldrb	r3, [r3, #0]
1000f824:	2b23      	cmp	r3, #35	; 0x23
1000f826:	d106      	bne.n	1000f836 <main+0x212>
                        DBG_LOG_DEV("[main]\t\t\t\tAON timer ready while indicating... skipping");
1000f828:	4846      	ldr	r0, [pc, #280]	; (1000f944 <main+0x320>)
1000f82a:	4b47      	ldr	r3, [pc, #284]	; (1000f948 <main+0x324>)
1000f82c:	4798      	blx	r3
1000f82e:	485c      	ldr	r0, [pc, #368]	; (1000f9a0 <main+0x37c>)
1000f830:	4b47      	ldr	r3, [pc, #284]	; (1000f950 <main+0x32c>)
1000f832:	4798      	blx	r3
1000f834:	e022      	b.n	1000f87c <main+0x258>
                    }
                    else {
                        sms_timer_aon_disable();
1000f836:	4b5b      	ldr	r3, [pc, #364]	; (1000f9a4 <main+0x380>)
1000f838:	4798      	blx	r3
                        sms_ble_power_down();
1000f83a:	4b5b      	ldr	r3, [pc, #364]	; (1000f9a8 <main+0x384>)
1000f83c:	4798      	blx	r3
1000f83e:	e01d      	b.n	1000f87c <main+0x258>
                }                    
                break;
                
                case INT_DUALTIMER1:
                //sms_monitor_states("INT_DUALTIMER1");
                DBG_LOG_DEV("\n\r...DUALTIMER1");
1000f840:	4840      	ldr	r0, [pc, #256]	; (1000f944 <main+0x320>)
1000f842:	4b41      	ldr	r3, [pc, #260]	; (1000f948 <main+0x324>)
1000f844:	4798      	blx	r3
1000f846:	4859      	ldr	r0, [pc, #356]	; (1000f9ac <main+0x388>)
1000f848:	4b41      	ldr	r3, [pc, #260]	; (1000f950 <main+0x32c>)
1000f84a:	4798      	blx	r3
                sms_dualtimer_stop(DUALTIMER_TIMER1);
1000f84c:	2000      	movs	r0, #0
1000f84e:	4b58      	ldr	r3, [pc, #352]	; (1000f9b0 <main+0x38c>)
1000f850:	4798      	blx	r3
                sms_dualtimer1_fn();
1000f852:	4b58      	ldr	r3, [pc, #352]	; (1000f9b4 <main+0x390>)
1000f854:	4798      	blx	r3
                break;
1000f856:	e011      	b.n	1000f87c <main+0x258>
                
                case INT_DUALTIMER2:
                //sms_monitor_states("INT_DUALTIMER2");
                DBG_LOG_DEV("\n\r...DUALTIMER2");
1000f858:	483a      	ldr	r0, [pc, #232]	; (1000f944 <main+0x320>)
1000f85a:	4b3b      	ldr	r3, [pc, #236]	; (1000f948 <main+0x324>)
1000f85c:	4798      	blx	r3
1000f85e:	4856      	ldr	r0, [pc, #344]	; (1000f9b8 <main+0x394>)
1000f860:	4b3b      	ldr	r3, [pc, #236]	; (1000f950 <main+0x32c>)
1000f862:	4798      	blx	r3
                sms_dualtimer_stop(DUALTIMER_TIMER2);
1000f864:	2001      	movs	r0, #1
1000f866:	4b52      	ldr	r3, [pc, #328]	; (1000f9b0 <main+0x38c>)
1000f868:	4798      	blx	r3
                sms_dualtimer2_fn();
1000f86a:	4b54      	ldr	r3, [pc, #336]	; (1000f9bc <main+0x398>)
1000f86c:	4798      	blx	r3
                break;
1000f86e:	e005      	b.n	1000f87c <main+0x258>
                
                default:
                DBG_LOG_DEV("\n\r...??");
1000f870:	4834      	ldr	r0, [pc, #208]	; (1000f944 <main+0x320>)
1000f872:	4b35      	ldr	r3, [pc, #212]	; (1000f948 <main+0x324>)
1000f874:	4798      	blx	r3
1000f876:	4852      	ldr	r0, [pc, #328]	; (1000f9c0 <main+0x39c>)
1000f878:	4b35      	ldr	r3, [pc, #212]	; (1000f950 <main+0x32c>)
1000f87a:	4798      	blx	r3
                //sms_monitor_states("ERROR!!");
                break;
            }
            
            DBG_LOG_DEV("[main]\t\t\t\tEnabling button int...");
1000f87c:	4831      	ldr	r0, [pc, #196]	; (1000f944 <main+0x320>)
1000f87e:	4b32      	ldr	r3, [pc, #200]	; (1000f948 <main+0x324>)
1000f880:	4798      	blx	r3
1000f882:	4850      	ldr	r0, [pc, #320]	; (1000f9c4 <main+0x3a0>)
1000f884:	4f32      	ldr	r7, [pc, #200]	; (1000f950 <main+0x32c>)
1000f886:	47b8      	blx	r7
            sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
1000f888:	2100      	movs	r1, #0
1000f88a:	2000      	movs	r0, #0
1000f88c:	4b2b      	ldr	r3, [pc, #172]	; (1000f93c <main+0x318>)
1000f88e:	4798      	blx	r3
            DBG_LOG_CONT_DEV(" done!");
1000f890:	4835      	ldr	r0, [pc, #212]	; (1000f968 <main+0x344>)
1000f892:	47b8      	blx	r7
            sms_current_interrupt.int_on = false;
1000f894:	4b31      	ldr	r3, [pc, #196]	; (1000f95c <main+0x338>)
1000f896:	2200      	movs	r2, #0
1000f898:	705a      	strb	r2, [r3, #1]
            sms_current_interrupt.source = INT_NONE;
1000f89a:	701a      	strb	r2, [r3, #0]
        }
        
        
        if(ulp_ready) {
1000f89c:	4b4a      	ldr	r3, [pc, #296]	; (1000f9c8 <main+0x3a4>)
1000f89e:	781b      	ldrb	r3, [r3, #0]
1000f8a0:	2b00      	cmp	r3, #0
1000f8a2:	d00b      	beq.n	1000f8bc <main+0x298>
            DBG_LOG_DEV("[main]\t\t\t\tULP...");
1000f8a4:	4827      	ldr	r0, [pc, #156]	; (1000f944 <main+0x320>)
1000f8a6:	4b28      	ldr	r3, [pc, #160]	; (1000f948 <main+0x324>)
1000f8a8:	4798      	blx	r3
1000f8aa:	4848      	ldr	r0, [pc, #288]	; (1000f9cc <main+0x3a8>)
1000f8ac:	4f28      	ldr	r7, [pc, #160]	; (1000f950 <main+0x32c>)
1000f8ae:	47b8      	blx	r7
            ulp_active = true;
1000f8b0:	2201      	movs	r2, #1
1000f8b2:	4b2b      	ldr	r3, [pc, #172]	; (1000f960 <main+0x33c>)
1000f8b4:	701a      	strb	r2, [r3, #0]
            //release_sleep_lock();
            //DBG_LOG_CONT_DEV(" zzzz");
            DBG_LOG_CONT_DEV(" !!");
1000f8b6:	4846      	ldr	r0, [pc, #280]	; (1000f9d0 <main+0x3ac>)
1000f8b8:	47b8      	blx	r7
1000f8ba:	e70c      	b.n	1000f6d6 <main+0xb2>
        }            
        else {
            ulp_active = false;
1000f8bc:	2200      	movs	r2, #0
1000f8be:	4b28      	ldr	r3, [pc, #160]	; (1000f960 <main+0x33c>)
1000f8c0:	701a      	strb	r2, [r3, #0]
1000f8c2:	e708      	b.n	1000f6d6 <main+0xb2>
1000f8c4:	10019c18 	.word	0x10019c18
1000f8c8:	1000ee15 	.word	0x1000ee15
1000f8cc:	1000c39d 	.word	0x1000c39d
1000f8d0:	1000eb09 	.word	0x1000eb09
1000f8d4:	1000f369 	.word	0x1000f369
1000f8d8:	1000f5b5 	.word	0x1000f5b5
1000f8dc:	1000b231 	.word	0x1000b231
1000f8e0:	100080e9 	.word	0x100080e9
1000f8e4:	1000a329 	.word	0x1000a329
1000f8e8:	1000ac11 	.word	0x1000ac11
1000f8ec:	1000a8c9 	.word	0x1000a8c9
1000f8f0:	1000b0e9 	.word	0x1000b0e9
1000f8f4:	1000aa55 	.word	0x1000aa55
1000f8f8:	10019b7c 	.word	0x10019b7c
1000f8fc:	1000a751 	.word	0x1000a751
1000f900:	1000e17d 	.word	0x1000e17d
1000f904:	1000a6e9 	.word	0x1000a6e9
1000f908:	1000b081 	.word	0x1000b081
1000f90c:	1000f561 	.word	0x1000f561
1000f910:	1000f3ad 	.word	0x1000f3ad
1000f914:	1000b2f1 	.word	0x1000b2f1
1000f918:	1000b26d 	.word	0x1000b26d
1000f91c:	1000b311 	.word	0x1000b311
1000f920:	1000a3dd 	.word	0x1000a3dd
1000f924:	1000aad5 	.word	0x1000aad5
1000f928:	10016558 	.word	0x10016558
1000f92c:	1000e0ad 	.word	0x1000e0ad
1000f930:	100165a4 	.word	0x100165a4
1000f934:	1000f555 	.word	0x1000f555
1000f938:	1000ea79 	.word	0x1000ea79
1000f93c:	1000a69d 	.word	0x1000a69d
1000f940:	1000aaed 	.word	0x1000aaed
1000f944:	10015f9c 	.word	0x10015f9c
1000f948:	10014df5 	.word	0x10014df5
1000f94c:	10017b78 	.word	0x10017b78
1000f950:	10014cd5 	.word	0x10014cd5
1000f954:	1000a7fd 	.word	0x1000a7fd
1000f958:	1000e975 	.word	0x1000e975
1000f95c:	10019c00 	.word	0x10019c00
1000f960:	10019c1f 	.word	0x10019c1f
1000f964:	10017b94 	.word	0x10017b94
1000f968:	10017bac 	.word	0x10017bac
1000f96c:	10017bb4 	.word	0x10017bb4
1000f970:	10017b5c 	.word	0x10017b5c
1000f974:	10017bd8 	.word	0x10017bd8
1000f978:	10017bec 	.word	0x10017bec
1000f97c:	10019b00 	.word	0x10019b00
1000f980:	1000a459 	.word	0x1000a459
1000f984:	10017bf8 	.word	0x10017bf8
1000f988:	10017c1c 	.word	0x10017c1c
1000f98c:	10017c28 	.word	0x10017c28
1000f990:	1000abb9 	.word	0x1000abb9
1000f994:	10017c38 	.word	0x10017c38
1000f998:	10017c48 	.word	0x10017c48
1000f99c:	1000b011 	.word	0x1000b011
1000f9a0:	10017c6c 	.word	0x10017c6c
1000f9a4:	1000b1e5 	.word	0x1000b1e5
1000f9a8:	10009dc5 	.word	0x10009dc5
1000f9ac:	10017ca4 	.word	0x10017ca4
1000f9b0:	1000b2e5 	.word	0x1000b2e5
1000f9b4:	1000b331 	.word	0x1000b331
1000f9b8:	10017cb4 	.word	0x10017cb4
1000f9bc:	1000b631 	.word	0x1000b631
1000f9c0:	10017cc4 	.word	0x10017cc4
1000f9c4:	10017ccc 	.word	0x10017ccc
1000f9c8:	10019b01 	.word	0x10019b01
1000f9cc:	10017cf0 	.word	0x10017cf0
1000f9d0:	10017d04 	.word	0x10017d04

1000f9d4 <internal_event_post>:
1000f9d4:	b570      	push	{r4, r5, r6, lr}
1000f9d6:	4d12      	ldr	r5, [pc, #72]	; (1000fa20 <internal_event_post+0x4c>)
1000f9d8:	682c      	ldr	r4, [r5, #0]
1000f9da:	2c00      	cmp	r4, #0
1000f9dc:	d014      	beq.n	1000fa08 <internal_event_post+0x34>
1000f9de:	6826      	ldr	r6, [r4, #0]
1000f9e0:	60e2      	str	r2, [r4, #12]
1000f9e2:	602e      	str	r6, [r5, #0]
1000f9e4:	2500      	movs	r5, #0
1000f9e6:	4a0f      	ldr	r2, [pc, #60]	; (1000fa24 <internal_event_post+0x50>)
1000f9e8:	8123      	strh	r3, [r4, #8]
1000f9ea:	6813      	ldr	r3, [r2, #0]
1000f9ec:	6025      	str	r5, [r4, #0]
1000f9ee:	80a0      	strh	r0, [r4, #4]
1000f9f0:	80e1      	strh	r1, [r4, #6]
1000f9f2:	42ab      	cmp	r3, r5
1000f9f4:	d101      	bne.n	1000f9fa <internal_event_post+0x26>
1000f9f6:	6014      	str	r4, [r2, #0]
1000f9f8:	e011      	b.n	1000fa1e <internal_event_post+0x4a>
1000f9fa:	681a      	ldr	r2, [r3, #0]
1000f9fc:	2a00      	cmp	r2, #0
1000f9fe:	d001      	beq.n	1000fa04 <internal_event_post+0x30>
1000fa00:	1c13      	adds	r3, r2, #0
1000fa02:	e7fa      	b.n	1000f9fa <internal_event_post+0x26>
1000fa04:	601c      	str	r4, [r3, #0]
1000fa06:	e00a      	b.n	1000fa1e <internal_event_post+0x4a>
1000fa08:	b2c4      	uxtb	r4, r0
1000fa0a:	2c00      	cmp	r4, #0
1000fa0c:	d107      	bne.n	1000fa1e <internal_event_post+0x4a>
1000fa0e:	4c06      	ldr	r4, [pc, #24]	; (1000fa28 <internal_event_post+0x54>)
1000fa10:	60e2      	str	r2, [r4, #12]
1000fa12:	2201      	movs	r2, #1
1000fa14:	8123      	strh	r3, [r4, #8]
1000fa16:	4b05      	ldr	r3, [pc, #20]	; (1000fa2c <internal_event_post+0x58>)
1000fa18:	80a0      	strh	r0, [r4, #4]
1000fa1a:	80e1      	strh	r1, [r4, #6]
1000fa1c:	701a      	strb	r2, [r3, #0]
1000fa1e:	bd70      	pop	{r4, r5, r6, pc}
1000fa20:	100199b8 	.word	0x100199b8
1000fa24:	100199b4 	.word	0x100199b4
1000fa28:	100199a0 	.word	0x100199a0
1000fa2c:	100199b0 	.word	0x100199b0

1000fa30 <internal_event_init>:
1000fa30:	b510      	push	{r4, lr}
1000fa32:	4b08      	ldr	r3, [pc, #32]	; (1000fa54 <internal_event_init+0x24>)
1000fa34:	0900      	lsrs	r0, r0, #4
1000fa36:	0100      	lsls	r0, r0, #4
1000fa38:	681a      	ldr	r2, [r3, #0]
1000fa3a:	1808      	adds	r0, r1, r0
1000fa3c:	4281      	cmp	r1, r0
1000fa3e:	d003      	beq.n	1000fa48 <internal_event_init+0x18>
1000fa40:	600a      	str	r2, [r1, #0]
1000fa42:	1c0a      	adds	r2, r1, #0
1000fa44:	3110      	adds	r1, #16
1000fa46:	e7f9      	b.n	1000fa3c <internal_event_init+0xc>
1000fa48:	601a      	str	r2, [r3, #0]
1000fa4a:	2200      	movs	r2, #0
1000fa4c:	4b02      	ldr	r3, [pc, #8]	; (1000fa58 <internal_event_init+0x28>)
1000fa4e:	601a      	str	r2, [r3, #0]
1000fa50:	bd10      	pop	{r4, pc}
1000fa52:	46c0      	nop			; (mov r8, r8)
1000fa54:	100199b8 	.word	0x100199b8
1000fa58:	100199b4 	.word	0x100199b4

1000fa5c <special_events_handler>:
1000fa5c:	b538      	push	{r3, r4, r5, lr}
1000fa5e:	4c1b      	ldr	r4, [pc, #108]	; (1000facc <special_events_handler+0x70>)
1000fa60:	1c03      	adds	r3, r0, #0
1000fa62:	8825      	ldrh	r5, [r4, #0]
1000fa64:	1c08      	adds	r0, r1, #0
1000fa66:	1c21      	adds	r1, r4, #0
1000fa68:	429d      	cmp	r5, r3
1000fa6a:	d107      	bne.n	1000fa7c <special_events_handler+0x20>
1000fa6c:	88a5      	ldrh	r5, [r4, #4]
1000fa6e:	4285      	cmp	r5, r0
1000fa70:	d104      	bne.n	1000fa7c <special_events_handler+0x20>
1000fa72:	2301      	movs	r3, #1
1000fa74:	425b      	negs	r3, r3
1000fa76:	8023      	strh	r3, [r4, #0]
1000fa78:	60a2      	str	r2, [r4, #8]
1000fa7a:	e009      	b.n	1000fa90 <special_events_handler+0x34>
1000fa7c:	884c      	ldrh	r4, [r1, #2]
1000fa7e:	429c      	cmp	r4, r3
1000fa80:	d10a      	bne.n	1000fa98 <special_events_handler+0x3c>
1000fa82:	888c      	ldrh	r4, [r1, #4]
1000fa84:	4284      	cmp	r4, r0
1000fa86:	d107      	bne.n	1000fa98 <special_events_handler+0x3c>
1000fa88:	2301      	movs	r3, #1
1000fa8a:	425b      	negs	r3, r3
1000fa8c:	804b      	strh	r3, [r1, #2]
1000fa8e:	608a      	str	r2, [r1, #8]
1000fa90:	4b0f      	ldr	r3, [pc, #60]	; (1000fad0 <special_events_handler+0x74>)
1000fa92:	4798      	blx	r3
1000fa94:	2001      	movs	r0, #1
1000fa96:	e017      	b.n	1000fac8 <special_events_handler+0x6c>
1000fa98:	490e      	ldr	r1, [pc, #56]	; (1000fad4 <special_events_handler+0x78>)
1000fa9a:	428b      	cmp	r3, r1
1000fa9c:	d00e      	beq.n	1000fabc <special_events_handler+0x60>
1000fa9e:	490e      	ldr	r1, [pc, #56]	; (1000fad8 <special_events_handler+0x7c>)
1000faa0:	428b      	cmp	r3, r1
1000faa2:	d007      	beq.n	1000fab4 <special_events_handler+0x58>
1000faa4:	490d      	ldr	r1, [pc, #52]	; (1000fadc <special_events_handler+0x80>)
1000faa6:	2000      	movs	r0, #0
1000faa8:	428b      	cmp	r3, r1
1000faaa:	d10d      	bne.n	1000fac8 <special_events_handler+0x6c>
1000faac:	1c10      	adds	r0, r2, #0
1000faae:	4b0c      	ldr	r3, [pc, #48]	; (1000fae0 <special_events_handler+0x84>)
1000fab0:	4798      	blx	r3
1000fab2:	e7ef      	b.n	1000fa94 <special_events_handler+0x38>
1000fab4:	1c11      	adds	r1, r2, #0
1000fab6:	4b0b      	ldr	r3, [pc, #44]	; (1000fae4 <special_events_handler+0x88>)
1000fab8:	2200      	movs	r2, #0
1000faba:	e002      	b.n	1000fac2 <special_events_handler+0x66>
1000fabc:	1c11      	adds	r1, r2, #0
1000fabe:	2200      	movs	r2, #0
1000fac0:	4b09      	ldr	r3, [pc, #36]	; (1000fae8 <special_events_handler+0x8c>)
1000fac2:	4798      	blx	r3
1000fac4:	4243      	negs	r3, r0
1000fac6:	4158      	adcs	r0, r3
1000fac8:	bd38      	pop	{r3, r4, r5, pc}
1000faca:	46c0      	nop			; (mov r8, r8)
1000facc:	1001a8b4 	.word	0x1001a8b4
1000fad0:	100114b9 	.word	0x100114b9
1000fad4:	00000e13 	.word	0x00000e13
1000fad8:	00000e15 	.word	0x00000e15
1000fadc:	00000e01 	.word	0x00000e01
1000fae0:	10011829 	.word	0x10011829
1000fae4:	100119e9 	.word	0x100119e9
1000fae8:	10011ac1 	.word	0x10011ac1

1000faec <at_ble_event_get>:
1000faec:	2300      	movs	r3, #0
1000faee:	b5f0      	push	{r4, r5, r6, r7, lr}
1000faf0:	b087      	sub	sp, #28
1000faf2:	9204      	str	r2, [sp, #16]
1000faf4:	7003      	strb	r3, [r0, #0]
1000faf6:	9b04      	ldr	r3, [sp, #16]
1000faf8:	9003      	str	r0, [sp, #12]
1000fafa:	3b01      	subs	r3, #1
1000fafc:	1c0d      	adds	r5, r1, #0
1000fafe:	9305      	str	r3, [sp, #20]
1000fb00:	3303      	adds	r3, #3
1000fb02:	d802      	bhi.n	1000fb0a <at_ble_event_get+0x1e>
1000fb04:	9804      	ldr	r0, [sp, #16]
1000fb06:	4bae      	ldr	r3, [pc, #696]	; (1000fdc0 <at_ble_event_get+0x2d4>)
1000fb08:	4798      	blx	r3
1000fb0a:	9b05      	ldr	r3, [sp, #20]
1000fb0c:	4cad      	ldr	r4, [pc, #692]	; (1000fdc4 <at_ble_event_get+0x2d8>)
1000fb0e:	3303      	adds	r3, #3
1000fb10:	d902      	bls.n	1000fb18 <at_ble_event_get+0x2c>
1000fb12:	2300      	movs	r3, #0
1000fb14:	9302      	str	r3, [sp, #8]
1000fb16:	e015      	b.n	1000fb44 <at_ble_event_get+0x58>
1000fb18:	2300      	movs	r3, #0
1000fb1a:	9302      	str	r3, [sp, #8]
1000fb1c:	6823      	ldr	r3, [r4, #0]
1000fb1e:	2b00      	cmp	r3, #0
1000fb20:	d113      	bne.n	1000fb4a <at_ble_event_get+0x5e>
1000fb22:	9b02      	ldr	r3, [sp, #8]
1000fb24:	2bd0      	cmp	r3, #208	; 0xd0
1000fb26:	d100      	bne.n	1000fb2a <at_ble_event_get+0x3e>
1000fb28:	e2da      	b.n	100100e0 <at_ble_event_get+0x5f4>
1000fb2a:	9804      	ldr	r0, [sp, #16]
1000fb2c:	4ba6      	ldr	r3, [pc, #664]	; (1000fdc8 <at_ble_event_get+0x2dc>)
1000fb2e:	4798      	blx	r3
1000fb30:	9002      	str	r0, [sp, #8]
1000fb32:	2802      	cmp	r0, #2
1000fb34:	d1f2      	bne.n	1000fb1c <at_ble_event_get+0x30>
1000fb36:	e03f      	b.n	1000fbb8 <at_ble_event_get+0xcc>
1000fb38:	9804      	ldr	r0, [sp, #16]
1000fb3a:	4ba3      	ldr	r3, [pc, #652]	; (1000fdc8 <at_ble_event_get+0x2dc>)
1000fb3c:	4798      	blx	r3
1000fb3e:	9002      	str	r0, [sp, #8]
1000fb40:	2802      	cmp	r0, #2
1000fb42:	d039      	beq.n	1000fbb8 <at_ble_event_get+0xcc>
1000fb44:	6823      	ldr	r3, [r4, #0]
1000fb46:	2b00      	cmp	r3, #0
1000fb48:	d0f6      	beq.n	1000fb38 <at_ble_event_get+0x4c>
1000fb4a:	9b02      	ldr	r3, [sp, #8]
1000fb4c:	2bd0      	cmp	r3, #208	; 0xd0
1000fb4e:	d100      	bne.n	1000fb52 <at_ble_event_get+0x66>
1000fb50:	e2c6      	b.n	100100e0 <at_ble_event_get+0x5f4>
1000fb52:	9b02      	ldr	r3, [sp, #8]
1000fb54:	3b03      	subs	r3, #3
1000fb56:	1e5a      	subs	r2, r3, #1
1000fb58:	4193      	sbcs	r3, r2
1000fb5a:	9a02      	ldr	r2, [sp, #8]
1000fb5c:	425b      	negs	r3, r3
1000fb5e:	401a      	ands	r2, r3
1000fb60:	6823      	ldr	r3, [r4, #0]
1000fb62:	9202      	str	r2, [sp, #8]
1000fb64:	2b00      	cmp	r3, #0
1000fb66:	d100      	bne.n	1000fb6a <at_ble_event_get+0x7e>
1000fb68:	e2c2      	b.n	100100f0 <at_ble_event_get+0x604>
1000fb6a:	681a      	ldr	r2, [r3, #0]
1000fb6c:	68de      	ldr	r6, [r3, #12]
1000fb6e:	6022      	str	r2, [r4, #0]
1000fb70:	88da      	ldrh	r2, [r3, #6]
1000fb72:	9201      	str	r2, [sp, #4]
1000fb74:	4a95      	ldr	r2, [pc, #596]	; (1000fdcc <at_ble_event_get+0x2e0>)
1000fb76:	889c      	ldrh	r4, [r3, #4]
1000fb78:	6811      	ldr	r1, [r2, #0]
1000fb7a:	6013      	str	r3, [r2, #0]
1000fb7c:	6019      	str	r1, [r3, #0]
1000fb7e:	4b94      	ldr	r3, [pc, #592]	; (1000fdd0 <at_ble_event_get+0x2e4>)
1000fb80:	781b      	ldrb	r3, [r3, #0]
1000fb82:	2b01      	cmp	r3, #1
1000fb84:	d10f      	bne.n	1000fba6 <at_ble_event_get+0xba>
1000fb86:	4b93      	ldr	r3, [pc, #588]	; (1000fdd4 <at_ble_event_get+0x2e8>)
1000fb88:	4a92      	ldr	r2, [pc, #584]	; (1000fdd4 <at_ble_event_get+0x2e8>)
1000fb8a:	8898      	ldrh	r0, [r3, #4]
1000fb8c:	88d9      	ldrh	r1, [r3, #6]
1000fb8e:	68d2      	ldr	r2, [r2, #12]
1000fb90:	891b      	ldrh	r3, [r3, #8]
1000fb92:	4f91      	ldr	r7, [pc, #580]	; (1000fdd8 <at_ble_event_get+0x2ec>)
1000fb94:	47b8      	blx	r7
1000fb96:	2210      	movs	r2, #16
1000fb98:	4b90      	ldr	r3, [pc, #576]	; (1000fddc <at_ble_event_get+0x2f0>)
1000fb9a:	488e      	ldr	r0, [pc, #568]	; (1000fdd4 <at_ble_event_get+0x2e8>)
1000fb9c:	2100      	movs	r1, #0
1000fb9e:	4798      	blx	r3
1000fba0:	2300      	movs	r3, #0
1000fba2:	4a8b      	ldr	r2, [pc, #556]	; (1000fdd0 <at_ble_event_get+0x2e4>)
1000fba4:	7013      	strb	r3, [r2, #0]
1000fba6:	9b02      	ldr	r3, [sp, #8]
1000fba8:	2b00      	cmp	r3, #0
1000fbaa:	d114      	bne.n	1000fbd6 <at_ble_event_get+0xea>
1000fbac:	4b8c      	ldr	r3, [pc, #560]	; (1000fde0 <at_ble_event_get+0x2f4>)
1000fbae:	429c      	cmp	r4, r3
1000fbb0:	d009      	beq.n	1000fbc6 <at_ble_event_get+0xda>
1000fbb2:	4b8c      	ldr	r3, [pc, #560]	; (1000fde4 <at_ble_event_get+0x2f8>)
1000fbb4:	429c      	cmp	r4, r3
1000fbb6:	d127      	bne.n	1000fc08 <at_ble_event_get+0x11c>
1000fbb8:	233a      	movs	r3, #58	; 0x3a
1000fbba:	9a03      	ldr	r2, [sp, #12]
1000fbbc:	7013      	strb	r3, [r2, #0]
1000fbbe:	2300      	movs	r3, #0
1000fbc0:	9302      	str	r3, [sp, #8]
1000fbc2:	1c1d      	adds	r5, r3, #0
1000fbc4:	e007      	b.n	1000fbd6 <at_ble_event_get+0xea>
1000fbc6:	9b01      	ldr	r3, [sp, #4]
1000fbc8:	42a3      	cmp	r3, r4
1000fbca:	d000      	beq.n	1000fbce <at_ble_event_get+0xe2>
1000fbcc:	e28a      	b.n	100100e4 <at_ble_event_get+0x5f8>
1000fbce:	2338      	movs	r3, #56	; 0x38
1000fbd0:	9a03      	ldr	r2, [sp, #12]
1000fbd2:	7013      	strb	r3, [r2, #0]
1000fbd4:	602e      	str	r6, [r5, #0]
1000fbd6:	9b03      	ldr	r3, [sp, #12]
1000fbd8:	781b      	ldrb	r3, [r3, #0]
1000fbda:	2b3b      	cmp	r3, #59	; 0x3b
1000fbdc:	d101      	bne.n	1000fbe2 <at_ble_event_get+0xf6>
1000fbde:	4b82      	ldr	r3, [pc, #520]	; (1000fde8 <at_ble_event_get+0x2fc>)
1000fbe0:	4798      	blx	r3
1000fbe2:	9b03      	ldr	r3, [sp, #12]
1000fbe4:	781b      	ldrb	r3, [r3, #0]
1000fbe6:	2b3b      	cmp	r3, #59	; 0x3b
1000fbe8:	d003      	beq.n	1000fbf2 <at_ble_event_get+0x106>
1000fbea:	9b05      	ldr	r3, [sp, #20]
1000fbec:	3303      	adds	r3, #3
1000fbee:	d904      	bls.n	1000fbfa <at_ble_event_get+0x10e>
1000fbf0:	e283      	b.n	100100fa <at_ble_event_get+0x60e>
1000fbf2:	9b02      	ldr	r3, [sp, #8]
1000fbf4:	2b00      	cmp	r3, #0
1000fbf6:	d088      	beq.n	1000fb0a <at_ble_event_get+0x1e>
1000fbf8:	e7f7      	b.n	1000fbea <at_ble_event_get+0xfe>
1000fbfa:	9b02      	ldr	r3, [sp, #8]
1000fbfc:	2bd0      	cmp	r3, #208	; 0xd0
1000fbfe:	d100      	bne.n	1000fc02 <at_ble_event_get+0x116>
1000fc00:	e27b      	b.n	100100fa <at_ble_event_get+0x60e>
1000fc02:	4b7a      	ldr	r3, [pc, #488]	; (1000fdec <at_ble_event_get+0x300>)
1000fc04:	4798      	blx	r3
1000fc06:	e278      	b.n	100100fa <at_ble_event_get+0x60e>
1000fc08:	9b01      	ldr	r3, [sp, #4]
1000fc0a:	2bbb      	cmp	r3, #187	; 0xbb
1000fc0c:	d125      	bne.n	1000fc5a <at_ble_event_get+0x16e>
1000fc0e:	2cbb      	cmp	r4, #187	; 0xbb
1000fc10:	d123      	bne.n	1000fc5a <at_ble_event_get+0x16e>
1000fc12:	466b      	mov	r3, sp
1000fc14:	891b      	ldrh	r3, [r3, #8]
1000fc16:	80ab      	strh	r3, [r5, #4]
1000fc18:	78b3      	ldrb	r3, [r6, #2]
1000fc1a:	7872      	ldrb	r2, [r6, #1]
1000fc1c:	78f0      	ldrb	r0, [r6, #3]
1000fc1e:	021b      	lsls	r3, r3, #8
1000fc20:	4313      	orrs	r3, r2
1000fc22:	7971      	ldrb	r1, [r6, #5]
1000fc24:	7932      	ldrb	r2, [r6, #4]
1000fc26:	70a8      	strb	r0, [r5, #2]
1000fc28:	4871      	ldr	r0, [pc, #452]	; (1000fdf0 <at_ble_event_get+0x304>)
1000fc2a:	802b      	strh	r3, [r5, #0]
1000fc2c:	4283      	cmp	r3, r0
1000fc2e:	d806      	bhi.n	1000fc3e <at_ble_event_get+0x152>
1000fc30:	4a70      	ldr	r2, [pc, #448]	; (1000fdf4 <at_ble_event_get+0x308>)
1000fc32:	4293      	cmp	r3, r2
1000fc34:	d20b      	bcs.n	1000fc4e <at_ble_event_get+0x162>
1000fc36:	4a70      	ldr	r2, [pc, #448]	; (1000fdf8 <at_ble_event_get+0x30c>)
1000fc38:	4293      	cmp	r3, r2
1000fc3a:	d008      	beq.n	1000fc4e <at_ble_event_get+0x162>
1000fc3c:	e009      	b.n	1000fc52 <at_ble_event_get+0x166>
1000fc3e:	486f      	ldr	r0, [pc, #444]	; (1000fdfc <at_ble_event_get+0x310>)
1000fc40:	4283      	cmp	r3, r0
1000fc42:	d106      	bne.n	1000fc52 <at_ble_event_get+0x166>
1000fc44:	020b      	lsls	r3, r1, #8
1000fc46:	4313      	orrs	r3, r2
1000fc48:	80ab      	strh	r3, [r5, #4]
1000fc4a:	2337      	movs	r3, #55	; 0x37
1000fc4c:	e002      	b.n	1000fc54 <at_ble_event_get+0x168>
1000fc4e:	2336      	movs	r3, #54	; 0x36
1000fc50:	e000      	b.n	1000fc54 <at_ble_event_get+0x168>
1000fc52:	2300      	movs	r3, #0
1000fc54:	9a03      	ldr	r2, [sp, #12]
1000fc56:	7013      	strb	r3, [r2, #0]
1000fc58:	e7bd      	b.n	1000fbd6 <at_ble_event_get+0xea>
1000fc5a:	4b69      	ldr	r3, [pc, #420]	; (1000fe00 <at_ble_event_get+0x314>)
1000fc5c:	429c      	cmp	r4, r3
1000fc5e:	d100      	bne.n	1000fc62 <at_ble_event_get+0x176>
1000fc60:	e144      	b.n	1000feec <at_ble_event_get+0x400>
1000fc62:	d865      	bhi.n	1000fd30 <at_ble_event_get+0x244>
1000fc64:	4b67      	ldr	r3, [pc, #412]	; (1000fe04 <at_ble_event_get+0x318>)
1000fc66:	429c      	cmp	r4, r3
1000fc68:	d100      	bne.n	1000fc6c <at_ble_event_get+0x180>
1000fc6a:	e1d5      	b.n	10010018 <at_ble_event_get+0x52c>
1000fc6c:	d82f      	bhi.n	1000fcce <at_ble_event_get+0x1e2>
1000fc6e:	4b66      	ldr	r3, [pc, #408]	; (1000fe08 <at_ble_event_get+0x31c>)
1000fc70:	429c      	cmp	r4, r3
1000fc72:	d100      	bne.n	1000fc76 <at_ble_event_get+0x18a>
1000fc74:	e1e0      	b.n	10010038 <at_ble_event_get+0x54c>
1000fc76:	d813      	bhi.n	1000fca0 <at_ble_event_get+0x1b4>
1000fc78:	4b64      	ldr	r3, [pc, #400]	; (1000fe0c <at_ble_event_get+0x320>)
1000fc7a:	429c      	cmp	r4, r3
1000fc7c:	d100      	bne.n	1000fc80 <at_ble_event_get+0x194>
1000fc7e:	e1a3      	b.n	1000ffc8 <at_ble_event_get+0x4dc>
1000fc80:	d804      	bhi.n	1000fc8c <at_ble_event_get+0x1a0>
1000fc82:	2638      	movs	r6, #56	; 0x38
1000fc84:	42b4      	cmp	r4, r6
1000fc86:	d100      	bne.n	1000fc8a <at_ble_event_get+0x19e>
1000fc88:	e225      	b.n	100100d6 <at_ble_event_get+0x5ea>
1000fc8a:	e117      	b.n	1000febc <at_ble_event_get+0x3d0>
1000fc8c:	4b60      	ldr	r3, [pc, #384]	; (1000fe10 <at_ble_event_get+0x324>)
1000fc8e:	429c      	cmp	r4, r3
1000fc90:	d100      	bne.n	1000fc94 <at_ble_event_get+0x1a8>
1000fc92:	e19f      	b.n	1000ffd4 <at_ble_event_get+0x4e8>
1000fc94:	33fe      	adds	r3, #254	; 0xfe
1000fc96:	33ff      	adds	r3, #255	; 0xff
1000fc98:	429c      	cmp	r4, r3
1000fc9a:	d100      	bne.n	1000fc9e <at_ble_event_get+0x1b2>
1000fc9c:	e1d3      	b.n	10010046 <at_ble_event_get+0x55a>
1000fc9e:	e10d      	b.n	1000febc <at_ble_event_get+0x3d0>
1000fca0:	4b5c      	ldr	r3, [pc, #368]	; (1000fe14 <at_ble_event_get+0x328>)
1000fca2:	429c      	cmp	r4, r3
1000fca4:	d100      	bne.n	1000fca8 <at_ble_event_get+0x1bc>
1000fca6:	e1a9      	b.n	1000fffc <at_ble_event_get+0x510>
1000fca8:	d808      	bhi.n	1000fcbc <at_ble_event_get+0x1d0>
1000fcaa:	4b5b      	ldr	r3, [pc, #364]	; (1000fe18 <at_ble_event_get+0x32c>)
1000fcac:	429c      	cmp	r4, r3
1000fcae:	d100      	bne.n	1000fcb2 <at_ble_event_get+0x1c6>
1000fcb0:	e196      	b.n	1000ffe0 <at_ble_event_get+0x4f4>
1000fcb2:	4b5a      	ldr	r3, [pc, #360]	; (1000fe1c <at_ble_event_get+0x330>)
1000fcb4:	429c      	cmp	r4, r3
1000fcb6:	d100      	bne.n	1000fcba <at_ble_event_get+0x1ce>
1000fcb8:	e199      	b.n	1000ffee <at_ble_event_get+0x502>
1000fcba:	e0ff      	b.n	1000febc <at_ble_event_get+0x3d0>
1000fcbc:	4b58      	ldr	r3, [pc, #352]	; (1000fe20 <at_ble_event_get+0x334>)
1000fcbe:	429c      	cmp	r4, r3
1000fcc0:	d100      	bne.n	1000fcc4 <at_ble_event_get+0x1d8>
1000fcc2:	e1a2      	b.n	1001000a <at_ble_event_get+0x51e>
1000fcc4:	4b57      	ldr	r3, [pc, #348]	; (1000fe24 <at_ble_event_get+0x338>)
1000fcc6:	429c      	cmp	r4, r3
1000fcc8:	d100      	bne.n	1000fccc <at_ble_event_get+0x1e0>
1000fcca:	e1d4      	b.n	10010076 <at_ble_event_get+0x58a>
1000fccc:	e0f6      	b.n	1000febc <at_ble_event_get+0x3d0>
1000fcce:	4b56      	ldr	r3, [pc, #344]	; (1000fe28 <at_ble_event_get+0x33c>)
1000fcd0:	429c      	cmp	r4, r3
1000fcd2:	d100      	bne.n	1000fcd6 <at_ble_event_get+0x1ea>
1000fcd4:	e1c8      	b.n	10010068 <at_ble_event_get+0x57c>
1000fcd6:	d812      	bhi.n	1000fcfe <at_ble_event_get+0x212>
1000fcd8:	4b54      	ldr	r3, [pc, #336]	; (1000fe2c <at_ble_event_get+0x340>)
1000fcda:	429c      	cmp	r4, r3
1000fcdc:	d100      	bne.n	1000fce0 <at_ble_event_get+0x1f4>
1000fcde:	e1d1      	b.n	10010084 <at_ble_event_get+0x598>
1000fce0:	d804      	bhi.n	1000fcec <at_ble_event_get+0x200>
1000fce2:	4b53      	ldr	r3, [pc, #332]	; (1000fe30 <at_ble_event_get+0x344>)
1000fce4:	429c      	cmp	r4, r3
1000fce6:	d100      	bne.n	1000fcea <at_ble_event_get+0x1fe>
1000fce8:	e19b      	b.n	10010022 <at_ble_event_get+0x536>
1000fcea:	e0e7      	b.n	1000febc <at_ble_event_get+0x3d0>
1000fcec:	4b51      	ldr	r3, [pc, #324]	; (1000fe34 <at_ble_event_get+0x348>)
1000fcee:	429c      	cmp	r4, r3
1000fcf0:	d100      	bne.n	1000fcf4 <at_ble_event_get+0x208>
1000fcf2:	e1ad      	b.n	10010050 <at_ble_event_get+0x564>
1000fcf4:	4b50      	ldr	r3, [pc, #320]	; (1000fe38 <at_ble_event_get+0x34c>)
1000fcf6:	429c      	cmp	r4, r3
1000fcf8:	d100      	bne.n	1000fcfc <at_ble_event_get+0x210>
1000fcfa:	e1b0      	b.n	1001005e <at_ble_event_get+0x572>
1000fcfc:	e0de      	b.n	1000febc <at_ble_event_get+0x3d0>
1000fcfe:	4b4f      	ldr	r3, [pc, #316]	; (1000fe3c <at_ble_event_get+0x350>)
1000fd00:	429c      	cmp	r4, r3
1000fd02:	d100      	bne.n	1000fd06 <at_ble_event_get+0x21a>
1000fd04:	e0e0      	b.n	1000fec8 <at_ble_event_get+0x3dc>
1000fd06:	d809      	bhi.n	1000fd1c <at_ble_event_get+0x230>
1000fd08:	3b08      	subs	r3, #8
1000fd0a:	429c      	cmp	r4, r3
1000fd0c:	d100      	bne.n	1000fd10 <at_ble_event_get+0x224>
1000fd0e:	e0d7      	b.n	1000fec0 <at_ble_event_get+0x3d4>
1000fd10:	4b4b      	ldr	r3, [pc, #300]	; (1000fe40 <at_ble_event_get+0x354>)
1000fd12:	2639      	movs	r6, #57	; 0x39
1000fd14:	429c      	cmp	r4, r3
1000fd16:	d100      	bne.n	1000fd1a <at_ble_event_get+0x22e>
1000fd18:	e1dd      	b.n	100100d6 <at_ble_event_get+0x5ea>
1000fd1a:	e0cf      	b.n	1000febc <at_ble_event_get+0x3d0>
1000fd1c:	23d1      	movs	r3, #209	; 0xd1
1000fd1e:	011b      	lsls	r3, r3, #4
1000fd20:	429c      	cmp	r4, r3
1000fd22:	d100      	bne.n	1000fd26 <at_ble_event_get+0x23a>
1000fd24:	e0d6      	b.n	1000fed4 <at_ble_event_get+0x3e8>
1000fd26:	4b47      	ldr	r3, [pc, #284]	; (1000fe44 <at_ble_event_get+0x358>)
1000fd28:	429c      	cmp	r4, r3
1000fd2a:	d100      	bne.n	1000fd2e <at_ble_event_get+0x242>
1000fd2c:	e0d8      	b.n	1000fee0 <at_ble_event_get+0x3f4>
1000fd2e:	e0c5      	b.n	1000febc <at_ble_event_get+0x3d0>
1000fd30:	4b45      	ldr	r3, [pc, #276]	; (1000fe48 <at_ble_event_get+0x35c>)
1000fd32:	429c      	cmp	r4, r3
1000fd34:	d100      	bne.n	1000fd38 <at_ble_event_get+0x24c>
1000fd36:	e117      	b.n	1000ff68 <at_ble_event_get+0x47c>
1000fd38:	d82e      	bhi.n	1000fd98 <at_ble_event_get+0x2ac>
1000fd3a:	4b44      	ldr	r3, [pc, #272]	; (1000fe4c <at_ble_event_get+0x360>)
1000fd3c:	429c      	cmp	r4, r3
1000fd3e:	d100      	bne.n	1000fd42 <at_ble_event_get+0x256>
1000fd40:	e13d      	b.n	1000ffbe <at_ble_event_get+0x4d2>
1000fd42:	d812      	bhi.n	1000fd6a <at_ble_event_get+0x27e>
1000fd44:	4b42      	ldr	r3, [pc, #264]	; (1000fe50 <at_ble_event_get+0x364>)
1000fd46:	429c      	cmp	r4, r3
1000fd48:	d100      	bne.n	1000fd4c <at_ble_event_get+0x260>
1000fd4a:	e0e8      	b.n	1000ff1e <at_ble_event_get+0x432>
1000fd4c:	d804      	bhi.n	1000fd58 <at_ble_event_get+0x26c>
1000fd4e:	3b03      	subs	r3, #3
1000fd50:	429c      	cmp	r4, r3
1000fd52:	d100      	bne.n	1000fd56 <at_ble_event_get+0x26a>
1000fd54:	e0d0      	b.n	1000fef8 <at_ble_event_get+0x40c>
1000fd56:	e0b1      	b.n	1000febc <at_ble_event_get+0x3d0>
1000fd58:	4b3e      	ldr	r3, [pc, #248]	; (1000fe54 <at_ble_event_get+0x368>)
1000fd5a:	429c      	cmp	r4, r3
1000fd5c:	d100      	bne.n	1000fd60 <at_ble_event_get+0x274>
1000fd5e:	e0d0      	b.n	1000ff02 <at_ble_event_get+0x416>
1000fd60:	4b3d      	ldr	r3, [pc, #244]	; (1000fe58 <at_ble_event_get+0x36c>)
1000fd62:	429c      	cmp	r4, r3
1000fd64:	d100      	bne.n	1000fd68 <at_ble_event_get+0x27c>
1000fd66:	e0f9      	b.n	1000ff5c <at_ble_event_get+0x470>
1000fd68:	e0a8      	b.n	1000febc <at_ble_event_get+0x3d0>
1000fd6a:	4b3c      	ldr	r3, [pc, #240]	; (1000fe5c <at_ble_event_get+0x370>)
1000fd6c:	429c      	cmp	r4, r3
1000fd6e:	d100      	bne.n	1000fd72 <at_ble_event_get+0x286>
1000fd70:	e0db      	b.n	1000ff2a <at_ble_event_get+0x43e>
1000fd72:	d808      	bhi.n	1000fd86 <at_ble_event_get+0x29a>
1000fd74:	4b3a      	ldr	r3, [pc, #232]	; (1000fe60 <at_ble_event_get+0x374>)
1000fd76:	429c      	cmp	r4, r3
1000fd78:	d100      	bne.n	1000fd7c <at_ble_event_get+0x290>
1000fd7a:	e11b      	b.n	1000ffb4 <at_ble_event_get+0x4c8>
1000fd7c:	4b39      	ldr	r3, [pc, #228]	; (1000fe64 <at_ble_event_get+0x378>)
1000fd7e:	429c      	cmp	r4, r3
1000fd80:	d100      	bne.n	1000fd84 <at_ble_event_get+0x298>
1000fd82:	e0d8      	b.n	1000ff36 <at_ble_event_get+0x44a>
1000fd84:	e09a      	b.n	1000febc <at_ble_event_get+0x3d0>
1000fd86:	4b38      	ldr	r3, [pc, #224]	; (1000fe68 <at_ble_event_get+0x37c>)
1000fd88:	429c      	cmp	r4, r3
1000fd8a:	d100      	bne.n	1000fd8e <at_ble_event_get+0x2a2>
1000fd8c:	e0d8      	b.n	1000ff40 <at_ble_event_get+0x454>
1000fd8e:	4b37      	ldr	r3, [pc, #220]	; (1000fe6c <at_ble_event_get+0x380>)
1000fd90:	429c      	cmp	r4, r3
1000fd92:	d100      	bne.n	1000fd96 <at_ble_event_get+0x2aa>
1000fd94:	e0db      	b.n	1000ff4e <at_ble_event_get+0x462>
1000fd96:	e091      	b.n	1000febc <at_ble_event_get+0x3d0>
1000fd98:	4b35      	ldr	r3, [pc, #212]	; (1000fe70 <at_ble_event_get+0x384>)
1000fd9a:	429c      	cmp	r4, r3
1000fd9c:	d100      	bne.n	1000fda0 <at_ble_event_get+0x2b4>
1000fd9e:	e0f7      	b.n	1000ff90 <at_ble_event_get+0x4a4>
1000fda0:	d876      	bhi.n	1000fe90 <at_ble_event_get+0x3a4>
1000fda2:	4b34      	ldr	r3, [pc, #208]	; (1000fe74 <at_ble_event_get+0x388>)
1000fda4:	429c      	cmp	r4, r3
1000fda6:	d100      	bne.n	1000fdaa <at_ble_event_get+0x2be>
1000fda8:	e0f8      	b.n	1000ff9c <at_ble_event_get+0x4b0>
1000fdaa:	d869      	bhi.n	1000fe80 <at_ble_event_get+0x394>
1000fdac:	4b32      	ldr	r3, [pc, #200]	; (1000fe78 <at_ble_event_get+0x38c>)
1000fdae:	429c      	cmp	r4, r3
1000fdb0:	d100      	bne.n	1000fdb4 <at_ble_event_get+0x2c8>
1000fdb2:	e0e0      	b.n	1000ff76 <at_ble_event_get+0x48a>
1000fdb4:	4b31      	ldr	r3, [pc, #196]	; (1000fe7c <at_ble_event_get+0x390>)
1000fdb6:	429c      	cmp	r4, r3
1000fdb8:	d100      	bne.n	1000fdbc <at_ble_event_get+0x2d0>
1000fdba:	e0a9      	b.n	1000ff10 <at_ble_event_get+0x424>
1000fdbc:	e07e      	b.n	1000febc <at_ble_event_get+0x3d0>
1000fdbe:	46c0      	nop			; (mov r8, r8)
1000fdc0:	100114f1 	.word	0x100114f1
1000fdc4:	100199b4 	.word	0x100199b4
1000fdc8:	1000f105 	.word	0x1000f105
1000fdcc:	100199b8 	.word	0x100199b8
1000fdd0:	100199b0 	.word	0x100199b0
1000fdd4:	100199a0 	.word	0x100199a0
1000fdd8:	1000f9d5 	.word	0x1000f9d5
1000fddc:	10014b8d 	.word	0x10014b8d
1000fde0:	0000ffff 	.word	0x0000ffff
1000fde4:	0000fffe 	.word	0x0000fffe
1000fde8:	1000f37d 	.word	0x1000f37d
1000fdec:	100114f3 	.word	0x100114f3
1000fdf0:	0000201e 	.word	0x0000201e
1000fdf4:	0000201d 	.word	0x0000201d
1000fdf8:	00000c03 	.word	0x00000c03
1000fdfc:	0000201f 	.word	0x0000201f
1000fe00:	00000d1c 	.word	0x00000d1c
1000fe04:	00000c0c 	.word	0x00000c0c
1000fe08:	00000c02 	.word	0x00000c02
1000fe0c:	00000a02 	.word	0x00000a02
1000fe10:	00000a03 	.word	0x00000a03
1000fe14:	00000c06 	.word	0x00000c06
1000fe18:	00000c04 	.word	0x00000c04
1000fe1c:	00000c05 	.word	0x00000c05
1000fe20:	00000c07 	.word	0x00000c07
1000fe24:	00000c09 	.word	0x00000c09
1000fe28:	00000c17 	.word	0x00000c17
1000fe2c:	00000c12 	.word	0x00000c12
1000fe30:	00000c0d 	.word	0x00000c0d
1000fe34:	00000c13 	.word	0x00000c13
1000fe38:	00000c15 	.word	0x00000c15
1000fe3c:	00000d08 	.word	0x00000d08
1000fe40:	00000d01 	.word	0x00000d01
1000fe44:	00000d15 	.word	0x00000d15
1000fe48:	00000e1b 	.word	0x00000e1b
1000fe4c:	00000e0f 	.word	0x00000e0f
1000fe50:	00000e03 	.word	0x00000e03
1000fe54:	00000e06 	.word	0x00000e06
1000fe58:	00000e0a 	.word	0x00000e0a
1000fe5c:	00000e15 	.word	0x00000e15
1000fe60:	00000e11 	.word	0x00000e11
1000fe64:	00000e13 	.word	0x00000e13
1000fe68:	00000e17 	.word	0x00000e17
1000fe6c:	00000e19 	.word	0x00000e19
1000fe70:	00000e27 	.word	0x00000e27
1000fe74:	00000e21 	.word	0x00000e21
1000fe78:	00000e1c 	.word	0x00000e1c
1000fe7c:	00000e1d 	.word	0x00000e1d
1000fe80:	4b9f      	ldr	r3, [pc, #636]	; (10010100 <at_ble_event_get+0x614>)
1000fe82:	429c      	cmp	r4, r3
1000fe84:	d07e      	beq.n	1000ff84 <at_ble_event_get+0x498>
1000fe86:	4b9f      	ldr	r3, [pc, #636]	; (10010104 <at_ble_event_get+0x618>)
1000fe88:	429c      	cmp	r4, r3
1000fe8a:	d100      	bne.n	1000fe8e <at_ble_event_get+0x3a2>
1000fe8c:	e08c      	b.n	1000ffa8 <at_ble_event_get+0x4bc>
1000fe8e:	e015      	b.n	1000febc <at_ble_event_get+0x3d0>
1000fe90:	4b9d      	ldr	r3, [pc, #628]	; (10010108 <at_ble_event_get+0x61c>)
1000fe92:	429c      	cmp	r4, r3
1000fe94:	d100      	bne.n	1000fe98 <at_ble_event_get+0x3ac>
1000fe96:	e10a      	b.n	100100ae <at_ble_event_get+0x5c2>
1000fe98:	d808      	bhi.n	1000feac <at_ble_event_get+0x3c0>
1000fe9a:	4b9c      	ldr	r3, [pc, #624]	; (1001010c <at_ble_event_get+0x620>)
1000fe9c:	429c      	cmp	r4, r3
1000fe9e:	d100      	bne.n	1000fea2 <at_ble_event_get+0x3b6>
1000fea0:	e0f7      	b.n	10010092 <at_ble_event_get+0x5a6>
1000fea2:	4b9b      	ldr	r3, [pc, #620]	; (10010110 <at_ble_event_get+0x624>)
1000fea4:	429c      	cmp	r4, r3
1000fea6:	d100      	bne.n	1000feaa <at_ble_event_get+0x3be>
1000fea8:	e0fa      	b.n	100100a0 <at_ble_event_get+0x5b4>
1000feaa:	e007      	b.n	1000febc <at_ble_event_get+0x3d0>
1000feac:	4b99      	ldr	r3, [pc, #612]	; (10010114 <at_ble_event_get+0x628>)
1000feae:	429c      	cmp	r4, r3
1000feb0:	d100      	bne.n	1000feb4 <at_ble_event_get+0x3c8>
1000feb2:	e103      	b.n	100100bc <at_ble_event_get+0x5d0>
1000feb4:	4b98      	ldr	r3, [pc, #608]	; (10010118 <at_ble_event_get+0x62c>)
1000feb6:	429c      	cmp	r4, r3
1000feb8:	d100      	bne.n	1000febc <at_ble_event_get+0x3d0>
1000feba:	e106      	b.n	100100ca <at_ble_event_get+0x5de>
1000febc:	2600      	movs	r6, #0
1000febe:	e10a      	b.n	100100d6 <at_ble_event_get+0x5ea>
1000fec0:	1c30      	adds	r0, r6, #0
1000fec2:	1c29      	adds	r1, r5, #0
1000fec4:	4b95      	ldr	r3, [pc, #596]	; (1001011c <at_ble_event_get+0x630>)
1000fec6:	e014      	b.n	1000fef2 <at_ble_event_get+0x406>
1000fec8:	1c30      	adds	r0, r6, #0
1000feca:	1c29      	adds	r1, r5, #0
1000fecc:	4b94      	ldr	r3, [pc, #592]	; (10010120 <at_ble_event_get+0x634>)
1000fece:	4798      	blx	r3
1000fed0:	2604      	movs	r6, #4
1000fed2:	e100      	b.n	100100d6 <at_ble_event_get+0x5ea>
1000fed4:	1c30      	adds	r0, r6, #0
1000fed6:	1c29      	adds	r1, r5, #0
1000fed8:	4b92      	ldr	r3, [pc, #584]	; (10010124 <at_ble_event_get+0x638>)
1000feda:	4798      	blx	r3
1000fedc:	2601      	movs	r6, #1
1000fede:	e0fa      	b.n	100100d6 <at_ble_event_get+0x5ea>
1000fee0:	1c30      	adds	r0, r6, #0
1000fee2:	1c29      	adds	r1, r5, #0
1000fee4:	4b90      	ldr	r3, [pc, #576]	; (10010128 <at_ble_event_get+0x63c>)
1000fee6:	4798      	blx	r3
1000fee8:	260f      	movs	r6, #15
1000feea:	e0f4      	b.n	100100d6 <at_ble_event_get+0x5ea>
1000feec:	1c30      	adds	r0, r6, #0
1000feee:	1c29      	adds	r1, r5, #0
1000fef0:	4b8e      	ldr	r3, [pc, #568]	; (1001012c <at_ble_event_get+0x640>)
1000fef2:	4798      	blx	r3
1000fef4:	1c06      	adds	r6, r0, #0
1000fef6:	e0ee      	b.n	100100d6 <at_ble_event_get+0x5ea>
1000fef8:	9801      	ldr	r0, [sp, #4]
1000fefa:	1c31      	adds	r1, r6, #0
1000fefc:	1c2a      	adds	r2, r5, #0
1000fefe:	4b8c      	ldr	r3, [pc, #560]	; (10010130 <at_ble_event_get+0x644>)
1000ff00:	e017      	b.n	1000ff32 <at_ble_event_get+0x446>
1000ff02:	1c31      	adds	r1, r6, #0
1000ff04:	9801      	ldr	r0, [sp, #4]
1000ff06:	1c2a      	adds	r2, r5, #0
1000ff08:	4b8a      	ldr	r3, [pc, #552]	; (10010134 <at_ble_event_get+0x648>)
1000ff0a:	4798      	blx	r3
1000ff0c:	2611      	movs	r6, #17
1000ff0e:	e0e2      	b.n	100100d6 <at_ble_event_get+0x5ea>
1000ff10:	1c31      	adds	r1, r6, #0
1000ff12:	9801      	ldr	r0, [sp, #4]
1000ff14:	1c2a      	adds	r2, r5, #0
1000ff16:	4b88      	ldr	r3, [pc, #544]	; (10010138 <at_ble_event_get+0x64c>)
1000ff18:	4798      	blx	r3
1000ff1a:	2612      	movs	r6, #18
1000ff1c:	e0db      	b.n	100100d6 <at_ble_event_get+0x5ea>
1000ff1e:	1c30      	adds	r0, r6, #0
1000ff20:	1c29      	adds	r1, r5, #0
1000ff22:	4b86      	ldr	r3, [pc, #536]	; (1001013c <at_ble_event_get+0x650>)
1000ff24:	4798      	blx	r3
1000ff26:	2606      	movs	r6, #6
1000ff28:	e0d5      	b.n	100100d6 <at_ble_event_get+0x5ea>
1000ff2a:	1c31      	adds	r1, r6, #0
1000ff2c:	1c2a      	adds	r2, r5, #0
1000ff2e:	9801      	ldr	r0, [sp, #4]
1000ff30:	4b83      	ldr	r3, [pc, #524]	; (10010140 <at_ble_event_get+0x654>)
1000ff32:	4798      	blx	r3
1000ff34:	e7de      	b.n	1000fef4 <at_ble_event_get+0x408>
1000ff36:	9801      	ldr	r0, [sp, #4]
1000ff38:	1c31      	adds	r1, r6, #0
1000ff3a:	1c2a      	adds	r2, r5, #0
1000ff3c:	4b81      	ldr	r3, [pc, #516]	; (10010144 <at_ble_event_get+0x658>)
1000ff3e:	e7f8      	b.n	1000ff32 <at_ble_event_get+0x446>
1000ff40:	1c31      	adds	r1, r6, #0
1000ff42:	9801      	ldr	r0, [sp, #4]
1000ff44:	1c2a      	adds	r2, r5, #0
1000ff46:	4b80      	ldr	r3, [pc, #512]	; (10010148 <at_ble_event_get+0x65c>)
1000ff48:	4798      	blx	r3
1000ff4a:	260d      	movs	r6, #13
1000ff4c:	e0c3      	b.n	100100d6 <at_ble_event_get+0x5ea>
1000ff4e:	1c31      	adds	r1, r6, #0
1000ff50:	9801      	ldr	r0, [sp, #4]
1000ff52:	1c2a      	adds	r2, r5, #0
1000ff54:	4b7d      	ldr	r3, [pc, #500]	; (1001014c <at_ble_event_get+0x660>)
1000ff56:	4798      	blx	r3
1000ff58:	260e      	movs	r6, #14
1000ff5a:	e0bc      	b.n	100100d6 <at_ble_event_get+0x5ea>
1000ff5c:	9801      	ldr	r0, [sp, #4]
1000ff5e:	1c31      	adds	r1, r6, #0
1000ff60:	1c2a      	adds	r2, r5, #0
1000ff62:	4b7b      	ldr	r3, [pc, #492]	; (10010150 <at_ble_event_get+0x664>)
1000ff64:	4798      	blx	r3
1000ff66:	e084      	b.n	10010072 <at_ble_event_get+0x586>
1000ff68:	1c31      	adds	r1, r6, #0
1000ff6a:	9801      	ldr	r0, [sp, #4]
1000ff6c:	1c2a      	adds	r2, r5, #0
1000ff6e:	4b79      	ldr	r3, [pc, #484]	; (10010154 <at_ble_event_get+0x668>)
1000ff70:	4798      	blx	r3
1000ff72:	260b      	movs	r6, #11
1000ff74:	e0af      	b.n	100100d6 <at_ble_event_get+0x5ea>
1000ff76:	1c31      	adds	r1, r6, #0
1000ff78:	9801      	ldr	r0, [sp, #4]
1000ff7a:	1c2a      	adds	r2, r5, #0
1000ff7c:	4b76      	ldr	r3, [pc, #472]	; (10010158 <at_ble_event_get+0x66c>)
1000ff7e:	4798      	blx	r3
1000ff80:	2610      	movs	r6, #16
1000ff82:	e0a8      	b.n	100100d6 <at_ble_event_get+0x5ea>
1000ff84:	1c30      	adds	r0, r6, #0
1000ff86:	1c29      	adds	r1, r5, #0
1000ff88:	4b74      	ldr	r3, [pc, #464]	; (1001015c <at_ble_event_get+0x670>)
1000ff8a:	4798      	blx	r3
1000ff8c:	2628      	movs	r6, #40	; 0x28
1000ff8e:	e0a2      	b.n	100100d6 <at_ble_event_get+0x5ea>
1000ff90:	1c30      	adds	r0, r6, #0
1000ff92:	1c29      	adds	r1, r5, #0
1000ff94:	4b72      	ldr	r3, [pc, #456]	; (10010160 <at_ble_event_get+0x674>)
1000ff96:	4798      	blx	r3
1000ff98:	2629      	movs	r6, #41	; 0x29
1000ff9a:	e09c      	b.n	100100d6 <at_ble_event_get+0x5ea>
1000ff9c:	1c30      	adds	r0, r6, #0
1000ff9e:	1c29      	adds	r1, r5, #0
1000ffa0:	4b70      	ldr	r3, [pc, #448]	; (10010164 <at_ble_event_get+0x678>)
1000ffa2:	4798      	blx	r3
1000ffa4:	2627      	movs	r6, #39	; 0x27
1000ffa6:	e096      	b.n	100100d6 <at_ble_event_get+0x5ea>
1000ffa8:	1c30      	adds	r0, r6, #0
1000ffaa:	1c29      	adds	r1, r5, #0
1000ffac:	4b6e      	ldr	r3, [pc, #440]	; (10010168 <at_ble_event_get+0x67c>)
1000ffae:	4798      	blx	r3
1000ffb0:	262a      	movs	r6, #42	; 0x2a
1000ffb2:	e090      	b.n	100100d6 <at_ble_event_get+0x5ea>
1000ffb4:	9801      	ldr	r0, [sp, #4]
1000ffb6:	1c31      	adds	r1, r6, #0
1000ffb8:	1c2a      	adds	r2, r5, #0
1000ffba:	4b6c      	ldr	r3, [pc, #432]	; (1001016c <at_ble_event_get+0x680>)
1000ffbc:	e7b9      	b.n	1000ff32 <at_ble_event_get+0x446>
1000ffbe:	9801      	ldr	r0, [sp, #4]
1000ffc0:	1c31      	adds	r1, r6, #0
1000ffc2:	1c2a      	adds	r2, r5, #0
1000ffc4:	4b6a      	ldr	r3, [pc, #424]	; (10010170 <at_ble_event_get+0x684>)
1000ffc6:	e7b4      	b.n	1000ff32 <at_ble_event_get+0x446>
1000ffc8:	1c30      	adds	r0, r6, #0
1000ffca:	1c29      	adds	r1, r5, #0
1000ffcc:	4b69      	ldr	r3, [pc, #420]	; (10010174 <at_ble_event_get+0x688>)
1000ffce:	4798      	blx	r3
1000ffd0:	262b      	movs	r6, #43	; 0x2b
1000ffd2:	e080      	b.n	100100d6 <at_ble_event_get+0x5ea>
1000ffd4:	1c30      	adds	r0, r6, #0
1000ffd6:	1c29      	adds	r1, r5, #0
1000ffd8:	4b67      	ldr	r3, [pc, #412]	; (10010178 <at_ble_event_get+0x68c>)
1000ffda:	4798      	blx	r3
1000ffdc:	262c      	movs	r6, #44	; 0x2c
1000ffde:	e07a      	b.n	100100d6 <at_ble_event_get+0x5ea>
1000ffe0:	1c31      	adds	r1, r6, #0
1000ffe2:	9801      	ldr	r0, [sp, #4]
1000ffe4:	1c2a      	adds	r2, r5, #0
1000ffe6:	4b65      	ldr	r3, [pc, #404]	; (1001017c <at_ble_event_get+0x690>)
1000ffe8:	4798      	blx	r3
1000ffea:	2613      	movs	r6, #19
1000ffec:	e073      	b.n	100100d6 <at_ble_event_get+0x5ea>
1000ffee:	1c31      	adds	r1, r6, #0
1000fff0:	9801      	ldr	r0, [sp, #4]
1000fff2:	1c2a      	adds	r2, r5, #0
1000fff4:	4b62      	ldr	r3, [pc, #392]	; (10010180 <at_ble_event_get+0x694>)
1000fff6:	4798      	blx	r3
1000fff8:	2614      	movs	r6, #20
1000fffa:	e06c      	b.n	100100d6 <at_ble_event_get+0x5ea>
1000fffc:	1c31      	adds	r1, r6, #0
1000fffe:	9801      	ldr	r0, [sp, #4]
10010000:	1c2a      	adds	r2, r5, #0
10010002:	4b60      	ldr	r3, [pc, #384]	; (10010184 <at_ble_event_get+0x698>)
10010004:	4798      	blx	r3
10010006:	2615      	movs	r6, #21
10010008:	e065      	b.n	100100d6 <at_ble_event_get+0x5ea>
1001000a:	1c31      	adds	r1, r6, #0
1001000c:	9801      	ldr	r0, [sp, #4]
1001000e:	1c2a      	adds	r2, r5, #0
10010010:	4b5d      	ldr	r3, [pc, #372]	; (10010188 <at_ble_event_get+0x69c>)
10010012:	4798      	blx	r3
10010014:	2616      	movs	r6, #22
10010016:	e05e      	b.n	100100d6 <at_ble_event_get+0x5ea>
10010018:	9801      	ldr	r0, [sp, #4]
1001001a:	1c31      	adds	r1, r6, #0
1001001c:	1c2a      	adds	r2, r5, #0
1001001e:	4b5b      	ldr	r3, [pc, #364]	; (1001018c <at_ble_event_get+0x6a0>)
10010020:	e787      	b.n	1000ff32 <at_ble_event_get+0x446>
10010022:	1c31      	adds	r1, r6, #0
10010024:	9801      	ldr	r0, [sp, #4]
10010026:	1c2a      	adds	r2, r5, #0
10010028:	4b58      	ldr	r3, [pc, #352]	; (1001018c <at_ble_event_get+0x6a0>)
1001002a:	4798      	blx	r3
1001002c:	88a9      	ldrh	r1, [r5, #4]
1001002e:	1c06      	adds	r6, r0, #0
10010030:	4b57      	ldr	r3, [pc, #348]	; (10010190 <at_ble_event_get+0x6a4>)
10010032:	8828      	ldrh	r0, [r5, #0]
10010034:	4798      	blx	r3
10010036:	e04e      	b.n	100100d6 <at_ble_event_get+0x5ea>
10010038:	1c31      	adds	r1, r6, #0
1001003a:	9801      	ldr	r0, [sp, #4]
1001003c:	1c2a      	adds	r2, r5, #0
1001003e:	4b55      	ldr	r3, [pc, #340]	; (10010194 <at_ble_event_get+0x6a8>)
10010040:	4798      	blx	r3
10010042:	2623      	movs	r6, #35	; 0x23
10010044:	e047      	b.n	100100d6 <at_ble_event_get+0x5ea>
10010046:	9801      	ldr	r0, [sp, #4]
10010048:	1c31      	adds	r1, r6, #0
1001004a:	1c2a      	adds	r2, r5, #0
1001004c:	4b52      	ldr	r3, [pc, #328]	; (10010198 <at_ble_event_get+0x6ac>)
1001004e:	e770      	b.n	1000ff32 <at_ble_event_get+0x446>
10010050:	9b01      	ldr	r3, [sp, #4]
10010052:	1c30      	adds	r0, r6, #0
10010054:	0a1f      	lsrs	r7, r3, #8
10010056:	802f      	strh	r7, [r5, #0]
10010058:	1c29      	adds	r1, r5, #0
1001005a:	4b50      	ldr	r3, [pc, #320]	; (1001019c <at_ble_event_get+0x6b0>)
1001005c:	e749      	b.n	1000fef2 <at_ble_event_get+0x406>
1001005e:	9801      	ldr	r0, [sp, #4]
10010060:	1c31      	adds	r1, r6, #0
10010062:	1c2a      	adds	r2, r5, #0
10010064:	4b4e      	ldr	r3, [pc, #312]	; (100101a0 <at_ble_event_get+0x6b4>)
10010066:	e764      	b.n	1000ff32 <at_ble_event_get+0x446>
10010068:	1c30      	adds	r0, r6, #0
1001006a:	1c29      	adds	r1, r5, #0
1001006c:	9a01      	ldr	r2, [sp, #4]
1001006e:	4b4d      	ldr	r3, [pc, #308]	; (100101a4 <at_ble_event_get+0x6b8>)
10010070:	4798      	blx	r3
10010072:	263b      	movs	r6, #59	; 0x3b
10010074:	e02f      	b.n	100100d6 <at_ble_event_get+0x5ea>
10010076:	1c31      	adds	r1, r6, #0
10010078:	9801      	ldr	r0, [sp, #4]
1001007a:	1c2a      	adds	r2, r5, #0
1001007c:	4b4a      	ldr	r3, [pc, #296]	; (100101a8 <at_ble_event_get+0x6bc>)
1001007e:	4798      	blx	r3
10010080:	2618      	movs	r6, #24
10010082:	e028      	b.n	100100d6 <at_ble_event_get+0x5ea>
10010084:	1c31      	adds	r1, r6, #0
10010086:	9801      	ldr	r0, [sp, #4]
10010088:	1c2a      	adds	r2, r5, #0
1001008a:	4b48      	ldr	r3, [pc, #288]	; (100101ac <at_ble_event_get+0x6c0>)
1001008c:	4798      	blx	r3
1001008e:	2620      	movs	r6, #32
10010090:	e021      	b.n	100100d6 <at_ble_event_get+0x5ea>
10010092:	1c31      	adds	r1, r6, #0
10010094:	9801      	ldr	r0, [sp, #4]
10010096:	1c2a      	adds	r2, r5, #0
10010098:	4b45      	ldr	r3, [pc, #276]	; (100101b0 <at_ble_event_get+0x6c4>)
1001009a:	4798      	blx	r3
1001009c:	2633      	movs	r6, #51	; 0x33
1001009e:	e01a      	b.n	100100d6 <at_ble_event_get+0x5ea>
100100a0:	1c31      	adds	r1, r6, #0
100100a2:	9801      	ldr	r0, [sp, #4]
100100a4:	1c2a      	adds	r2, r5, #0
100100a6:	4b43      	ldr	r3, [pc, #268]	; (100101b4 <at_ble_event_get+0x6c8>)
100100a8:	4798      	blx	r3
100100aa:	2630      	movs	r6, #48	; 0x30
100100ac:	e013      	b.n	100100d6 <at_ble_event_get+0x5ea>
100100ae:	1c31      	adds	r1, r6, #0
100100b0:	9801      	ldr	r0, [sp, #4]
100100b2:	1c2a      	adds	r2, r5, #0
100100b4:	4b40      	ldr	r3, [pc, #256]	; (100101b8 <at_ble_event_get+0x6cc>)
100100b6:	4798      	blx	r3
100100b8:	2634      	movs	r6, #52	; 0x34
100100ba:	e00c      	b.n	100100d6 <at_ble_event_get+0x5ea>
100100bc:	1c31      	adds	r1, r6, #0
100100be:	9801      	ldr	r0, [sp, #4]
100100c0:	1c2a      	adds	r2, r5, #0
100100c2:	4b3e      	ldr	r3, [pc, #248]	; (100101bc <at_ble_event_get+0x6d0>)
100100c4:	4798      	blx	r3
100100c6:	2635      	movs	r6, #53	; 0x35
100100c8:	e005      	b.n	100100d6 <at_ble_event_get+0x5ea>
100100ca:	1c31      	adds	r1, r6, #0
100100cc:	9801      	ldr	r0, [sp, #4]
100100ce:	1c2a      	adds	r2, r5, #0
100100d0:	4b3b      	ldr	r3, [pc, #236]	; (100101c0 <at_ble_event_get+0x6d4>)
100100d2:	4798      	blx	r3
100100d4:	2632      	movs	r6, #50	; 0x32
100100d6:	9b03      	ldr	r3, [sp, #12]
100100d8:	701e      	strb	r6, [r3, #0]
100100da:	2300      	movs	r3, #0
100100dc:	9302      	str	r3, [sp, #8]
100100de:	e57a      	b.n	1000fbd6 <at_ble_event_get+0xea>
100100e0:	23d0      	movs	r3, #208	; 0xd0
100100e2:	e7fb      	b.n	100100dc <at_ble_event_get+0x5f0>
100100e4:	9b01      	ldr	r3, [sp, #4]
100100e6:	9e02      	ldr	r6, [sp, #8]
100100e8:	2bbb      	cmp	r3, #187	; 0xbb
100100ea:	d000      	beq.n	100100ee <at_ble_event_get+0x602>
100100ec:	e6e6      	b.n	1000febc <at_ble_event_get+0x3d0>
100100ee:	e7f2      	b.n	100100d6 <at_ble_event_get+0x5ea>
100100f0:	9b02      	ldr	r3, [sp, #8]
100100f2:	2b00      	cmp	r3, #0
100100f4:	d000      	beq.n	100100f8 <at_ble_event_get+0x60c>
100100f6:	e56e      	b.n	1000fbd6 <at_ble_event_get+0xea>
100100f8:	e6e0      	b.n	1000febc <at_ble_event_get+0x3d0>
100100fa:	9802      	ldr	r0, [sp, #8]
100100fc:	b007      	add	sp, #28
100100fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010100:	00000e22 	.word	0x00000e22
10010104:	00000e25 	.word	0x00000e25
10010108:	00001b05 	.word	0x00001b05
1001010c:	00001b01 	.word	0x00001b01
10010110:	00001b03 	.word	0x00001b03
10010114:	00001b06 	.word	0x00001b06
10010118:	00001b08 	.word	0x00001b08
1001011c:	1001231d 	.word	0x1001231d
10010120:	10012301 	.word	0x10012301
10010124:	1001259d 	.word	0x1001259d
10010128:	1001268d 	.word	0x1001268d
1001012c:	100126b1 	.word	0x100126b1
10010130:	10011695 	.word	0x10011695
10010134:	10011f15 	.word	0x10011f15
10010138:	10011f91 	.word	0x10011f91
1001013c:	1001194d 	.word	0x1001194d
10010140:	100119e9 	.word	0x100119e9
10010144:	10011ac1 	.word	0x10011ac1
10010148:	10011d49 	.word	0x10011d49
1001014c:	10011de9 	.word	0x10011de9
10010150:	10011ea1 	.word	0x10011ea1
10010154:	10011ec9 	.word	0x10011ec9
10010158:	10011edf 	.word	0x10011edf
1001015c:	10011fa9 	.word	0x10011fa9
10010160:	10011fd7 	.word	0x10011fd7
10010164:	10011fed 	.word	0x10011fed
10010168:	10012017 	.word	0x10012017
1001016c:	10011e45 	.word	0x10011e45
10010170:	10011e6f 	.word	0x10011e6f
10010174:	100110d5 	.word	0x100110d5
10010178:	10011101 	.word	0x10011101
1001017c:	100128d1 	.word	0x100128d1
10010180:	1001290d 	.word	0x1001290d
10010184:	10012955 	.word	0x10012955
10010188:	10012999 	.word	0x10012999
1001018c:	100129cd 	.word	0x100129cd
10010190:	10012891 	.word	0x10012891
10010194:	10012a99 	.word	0x10012a99
10010198:	10012a21 	.word	0x10012a21
1001019c:	10010fb9 	.word	0x10010fb9
100101a0:	10011025 	.word	0x10011025
100101a4:	10010fe9 	.word	0x10010fe9
100101a8:	10012aa9 	.word	0x10012aa9
100101ac:	10012ae9 	.word	0x10012ae9
100101b0:	10012db1 	.word	0x10012db1
100101b4:	10012dbb 	.word	0x10012dbb
100101b8:	10012dc1 	.word	0x10012dc1
100101bc:	10012dc7 	.word	0x10012dc7
100101c0:	10012dd3 	.word	0x10012dd3

100101c4 <internal_event_flush>:
100101c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100101c6:	490e      	ldr	r1, [pc, #56]	; (10010200 <internal_event_flush+0x3c>)
100101c8:	2400      	movs	r4, #0
100101ca:	680b      	ldr	r3, [r1, #0]
100101cc:	1c0f      	adds	r7, r1, #0
100101ce:	1c1e      	adds	r6, r3, #0
100101d0:	4a0c      	ldr	r2, [pc, #48]	; (10010204 <internal_event_flush+0x40>)
100101d2:	6815      	ldr	r5, [r2, #0]
100101d4:	9201      	str	r2, [sp, #4]
100101d6:	2b00      	cmp	r3, #0
100101d8:	d00e      	beq.n	100101f8 <internal_event_flush+0x34>
100101da:	889a      	ldrh	r2, [r3, #4]
100101dc:	6819      	ldr	r1, [r3, #0]
100101de:	4282      	cmp	r2, r0
100101e0:	d107      	bne.n	100101f2 <internal_event_flush+0x2e>
100101e2:	2c00      	cmp	r4, #0
100101e4:	d001      	beq.n	100101ea <internal_event_flush+0x26>
100101e6:	6021      	str	r1, [r4, #0]
100101e8:	e000      	b.n	100101ec <internal_event_flush+0x28>
100101ea:	1c0e      	adds	r6, r1, #0
100101ec:	601d      	str	r5, [r3, #0]
100101ee:	1c1d      	adds	r5, r3, #0
100101f0:	1c23      	adds	r3, r4, #0
100101f2:	1c1c      	adds	r4, r3, #0
100101f4:	1c0b      	adds	r3, r1, #0
100101f6:	e7ee      	b.n	100101d6 <internal_event_flush+0x12>
100101f8:	9b01      	ldr	r3, [sp, #4]
100101fa:	603e      	str	r6, [r7, #0]
100101fc:	601d      	str	r5, [r3, #0]
100101fe:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10010200:	100199b4 	.word	0x100199b4
10010204:	100199b8 	.word	0x100199b8

10010208 <internal_conn_flush>:
10010208:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001020a:	4a12      	ldr	r2, [pc, #72]	; (10010254 <internal_conn_flush+0x4c>)
1001020c:	9000      	str	r0, [sp, #0]
1001020e:	6813      	ldr	r3, [r2, #0]
10010210:	4811      	ldr	r0, [pc, #68]	; (10010258 <internal_conn_flush+0x50>)
10010212:	1c1f      	adds	r7, r3, #0
10010214:	2100      	movs	r1, #0
10010216:	4684      	mov	ip, r0
10010218:	6804      	ldr	r4, [r0, #0]
1001021a:	9201      	str	r2, [sp, #4]
1001021c:	2b00      	cmp	r3, #0
1001021e:	d014      	beq.n	1001024a <internal_conn_flush+0x42>
10010220:	88d8      	ldrh	r0, [r3, #6]
10010222:	9a00      	ldr	r2, [sp, #0]
10010224:	681d      	ldr	r5, [r3, #0]
10010226:	0a06      	lsrs	r6, r0, #8
10010228:	4296      	cmp	r6, r2
1001022a:	d10b      	bne.n	10010244 <internal_conn_flush+0x3c>
1001022c:	26fd      	movs	r6, #253	; 0xfd
1001022e:	4006      	ands	r6, r0
10010230:	2e0c      	cmp	r6, #12
10010232:	d107      	bne.n	10010244 <internal_conn_flush+0x3c>
10010234:	2900      	cmp	r1, #0
10010236:	d001      	beq.n	1001023c <internal_conn_flush+0x34>
10010238:	600d      	str	r5, [r1, #0]
1001023a:	e000      	b.n	1001023e <internal_conn_flush+0x36>
1001023c:	1c2f      	adds	r7, r5, #0
1001023e:	601c      	str	r4, [r3, #0]
10010240:	1c1c      	adds	r4, r3, #0
10010242:	1c0b      	adds	r3, r1, #0
10010244:	1c19      	adds	r1, r3, #0
10010246:	1c2b      	adds	r3, r5, #0
10010248:	e7e8      	b.n	1001021c <internal_conn_flush+0x14>
1001024a:	9b01      	ldr	r3, [sp, #4]
1001024c:	601f      	str	r7, [r3, #0]
1001024e:	4663      	mov	r3, ip
10010250:	601c      	str	r4, [r3, #0]
10010252:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10010254:	100199b4 	.word	0x100199b4
10010258:	100199b8 	.word	0x100199b8

1001025c <at_ble_device_name_set>:
1001025c:	b530      	push	{r4, r5, lr}
1001025e:	23cf      	movs	r3, #207	; 0xcf
10010260:	2800      	cmp	r0, #0
10010262:	d010      	beq.n	10010286 <at_ble_device_name_set+0x2a>
10010264:	1e4a      	subs	r2, r1, #1
10010266:	2a1f      	cmp	r2, #31
10010268:	d80d      	bhi.n	10010286 <at_ble_device_name_set+0x2a>
1001026a:	4a08      	ldr	r2, [pc, #32]	; (1001028c <at_ble_device_name_set+0x30>)
1001026c:	1c13      	adds	r3, r2, #0
1001026e:	33aa      	adds	r3, #170	; 0xaa
10010270:	8019      	strh	r1, [r3, #0]
10010272:	2300      	movs	r3, #0
10010274:	1c1c      	adds	r4, r3, #0
10010276:	5cc5      	ldrb	r5, [r0, r3]
10010278:	34ac      	adds	r4, #172	; 0xac
1001027a:	3301      	adds	r3, #1
1001027c:	5515      	strb	r5, [r2, r4]
1001027e:	b2dc      	uxtb	r4, r3
10010280:	428c      	cmp	r4, r1
10010282:	d3f7      	bcc.n	10010274 <at_ble_device_name_set+0x18>
10010284:	2300      	movs	r3, #0
10010286:	1c18      	adds	r0, r3, #0
10010288:	bd30      	pop	{r4, r5, pc}
1001028a:	46c0      	nop			; (mov r8, r8)
1001028c:	1001a952 	.word	0x1001a952

10010290 <at_ble_addr_get>:
10010290:	b510      	push	{r4, lr}
10010292:	1c04      	adds	r4, r0, #0
10010294:	20cf      	movs	r0, #207	; 0xcf
10010296:	2c00      	cmp	r4, #0
10010298:	d006      	beq.n	100102a8 <at_ble_addr_get+0x18>
1001029a:	4b04      	ldr	r3, [pc, #16]	; (100102ac <at_ble_addr_get+0x1c>)
1001029c:	38ce      	subs	r0, #206	; 0xce
1001029e:	1c21      	adds	r1, r4, #0
100102a0:	4798      	blx	r3
100102a2:	4b03      	ldr	r3, [pc, #12]	; (100102b0 <at_ble_addr_get+0x20>)
100102a4:	791b      	ldrb	r3, [r3, #4]
100102a6:	7023      	strb	r3, [r4, #0]
100102a8:	bd10      	pop	{r4, pc}
100102aa:	46c0      	nop			; (mov r8, r8)
100102ac:	100121b1 	.word	0x100121b1
100102b0:	1001a952 	.word	0x1001a952

100102b4 <at_ble_set_dev_config>:
100102b4:	b5f0      	push	{r4, r5, r6, r7, lr}
100102b6:	7906      	ldrb	r6, [r0, #4]
100102b8:	b089      	sub	sp, #36	; 0x24
100102ba:	25cf      	movs	r5, #207	; 0xcf
100102bc:	2e03      	cmp	r6, #3
100102be:	d838      	bhi.n	10010332 <at_ble_set_dev_config+0x7e>
100102c0:	7803      	ldrb	r3, [r0, #0]
100102c2:	3511      	adds	r5, #17
100102c4:	2b0f      	cmp	r3, #15
100102c6:	d834      	bhi.n	10010332 <at_ble_set_dev_config+0x7e>
100102c8:	2380      	movs	r3, #128	; 0x80
100102ca:	8c87      	ldrh	r7, [r0, #36]	; 0x24
100102cc:	3d11      	subs	r5, #17
100102ce:	009b      	lsls	r3, r3, #2
100102d0:	429f      	cmp	r7, r3
100102d2:	d82e      	bhi.n	10010332 <at_ble_set_dev_config+0x7e>
100102d4:	7fc5      	ldrb	r5, [r0, #31]
100102d6:	7f83      	ldrb	r3, [r0, #30]
100102d8:	01ad      	lsls	r5, r5, #6
100102da:	015b      	lsls	r3, r3, #5
100102dc:	431d      	orrs	r5, r3
100102de:	7ec3      	ldrb	r3, [r0, #27]
100102e0:	431d      	orrs	r5, r3
100102e2:	7f43      	ldrb	r3, [r0, #29]
100102e4:	011b      	lsls	r3, r3, #4
100102e6:	431d      	orrs	r5, r3
100102e8:	7f03      	ldrb	r3, [r0, #28]
100102ea:	009b      	lsls	r3, r3, #2
100102ec:	431d      	orrs	r5, r3
100102ee:	4b12      	ldr	r3, [pc, #72]	; (10010338 <at_ble_set_dev_config+0x84>)
100102f0:	b2ed      	uxtb	r5, r5
100102f2:	711e      	strb	r6, [r3, #4]
100102f4:	7903      	ldrb	r3, [r0, #4]
100102f6:	3b02      	subs	r3, #2
100102f8:	2b01      	cmp	r3, #1
100102fa:	d801      	bhi.n	10010300 <at_ble_set_dev_config+0x4c>
100102fc:	2302      	movs	r3, #2
100102fe:	7103      	strb	r3, [r0, #4]
10010300:	1c04      	adds	r4, r0, #0
10010302:	1c23      	adds	r3, r4, #0
10010304:	330b      	adds	r3, #11
10010306:	8861      	ldrh	r1, [r4, #2]
10010308:	9307      	str	r3, [sp, #28]
1001030a:	7923      	ldrb	r3, [r4, #4]
1001030c:	7800      	ldrb	r0, [r0, #0]
1001030e:	9300      	str	r3, [sp, #0]
10010310:	9501      	str	r5, [sp, #4]
10010312:	8c25      	ldrh	r5, [r4, #32]
10010314:	1d62      	adds	r2, r4, #5
10010316:	9502      	str	r5, [sp, #8]
10010318:	8c65      	ldrh	r5, [r4, #34]	; 0x22
1001031a:	9b07      	ldr	r3, [sp, #28]
1001031c:	9503      	str	r5, [sp, #12]
1001031e:	9704      	str	r7, [sp, #16]
10010320:	4d06      	ldr	r5, [pc, #24]	; (1001033c <at_ble_set_dev_config+0x88>)
10010322:	47a8      	blx	r5
10010324:	7126      	strb	r6, [r4, #4]
10010326:	1c05      	adds	r5, r0, #0
10010328:	1c21      	adds	r1, r4, #0
1001032a:	4803      	ldr	r0, [pc, #12]	; (10010338 <at_ble_set_dev_config+0x84>)
1001032c:	2226      	movs	r2, #38	; 0x26
1001032e:	4b04      	ldr	r3, [pc, #16]	; (10010340 <at_ble_set_dev_config+0x8c>)
10010330:	4798      	blx	r3
10010332:	1c28      	adds	r0, r5, #0
10010334:	b009      	add	sp, #36	; 0x24
10010336:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010338:	1001a952 	.word	0x1001a952
1001033c:	100120a9 	.word	0x100120a9
10010340:	10014b7b 	.word	0x10014b7b

10010344 <at_ble_init>:
10010344:	b5f0      	push	{r4, r5, r6, r7, lr}
10010346:	b087      	sub	sp, #28
10010348:	af03      	add	r7, sp, #12
1001034a:	4954      	ldr	r1, [pc, #336]	; (1001049c <at_ble_init+0x158>)
1001034c:	220b      	movs	r2, #11
1001034e:	4b54      	ldr	r3, [pc, #336]	; (100104a0 <at_ble_init+0x15c>)
10010350:	1c04      	adds	r4, r0, #0
10010352:	1c38      	adds	r0, r7, #0
10010354:	4798      	blx	r3
10010356:	2205      	movs	r2, #5
10010358:	4b52      	ldr	r3, [pc, #328]	; (100104a4 <at_ble_init+0x160>)
1001035a:	2640      	movs	r6, #64	; 0x40
1001035c:	801a      	strh	r2, [r3, #0]
1001035e:	2300      	movs	r3, #0
10010360:	4a51      	ldr	r2, [pc, #324]	; (100104a8 <at_ble_init+0x164>)
10010362:	6013      	str	r3, [r2, #0]
10010364:	4a51      	ldr	r2, [pc, #324]	; (100104ac <at_ble_init+0x168>)
10010366:	7013      	strb	r3, [r2, #0]
10010368:	4a51      	ldr	r2, [pc, #324]	; (100104b0 <at_ble_init+0x16c>)
1001036a:	7013      	strb	r3, [r2, #0]
1001036c:	4b51      	ldr	r3, [pc, #324]	; (100104b4 <at_ble_init+0x170>)
1001036e:	4798      	blx	r3
10010370:	4b51      	ldr	r3, [pc, #324]	; (100104b8 <at_ble_init+0x174>)
10010372:	4798      	blx	r3
10010374:	4b51      	ldr	r3, [pc, #324]	; (100104bc <at_ble_init+0x178>)
10010376:	4798      	blx	r3
10010378:	4b51      	ldr	r3, [pc, #324]	; (100104c0 <at_ble_init+0x17c>)
1001037a:	4798      	blx	r3
1001037c:	2c00      	cmp	r4, #0
1001037e:	d100      	bne.n	10010382 <at_ble_init+0x3e>
10010380:	e089      	b.n	10010496 <at_ble_init+0x152>
10010382:	68a3      	ldr	r3, [r4, #8]
10010384:	2b00      	cmp	r3, #0
10010386:	d100      	bne.n	1001038a <at_ble_init+0x46>
10010388:	e085      	b.n	10010496 <at_ble_init+0x152>
1001038a:	6923      	ldr	r3, [r4, #16]
1001038c:	2b00      	cmp	r3, #0
1001038e:	d100      	bne.n	10010392 <at_ble_init+0x4e>
10010390:	e081      	b.n	10010496 <at_ble_init+0x152>
10010392:	6820      	ldr	r0, [r4, #0]
10010394:	2800      	cmp	r0, #0
10010396:	d102      	bne.n	1001039e <at_ble_init+0x5a>
10010398:	6863      	ldr	r3, [r4, #4]
1001039a:	2b00      	cmp	r3, #0
1001039c:	d17b      	bne.n	10010496 <at_ble_init+0x152>
1001039e:	4b49      	ldr	r3, [pc, #292]	; (100104c4 <at_ble_init+0x180>)
100103a0:	6861      	ldr	r1, [r4, #4]
100103a2:	4798      	blx	r3
100103a4:	4b48      	ldr	r3, [pc, #288]	; (100104c8 <at_ble_init+0x184>)
100103a6:	4798      	blx	r3
100103a8:	2801      	cmp	r0, #1
100103aa:	d901      	bls.n	100103b0 <at_ble_init+0x6c>
100103ac:	26e2      	movs	r6, #226	; 0xe2
100103ae:	e072      	b.n	10010496 <at_ble_init+0x152>
100103b0:	4846      	ldr	r0, [pc, #280]	; (100104cc <at_ble_init+0x188>)
100103b2:	4b47      	ldr	r3, [pc, #284]	; (100104d0 <at_ble_init+0x18c>)
100103b4:	4798      	blx	r3
100103b6:	2800      	cmp	r0, #0
100103b8:	d1f8      	bne.n	100103ac <at_ble_init+0x68>
100103ba:	1c20      	adds	r0, r4, #0
100103bc:	4b45      	ldr	r3, [pc, #276]	; (100104d4 <at_ble_init+0x190>)
100103be:	4798      	blx	r3
100103c0:	68e0      	ldr	r0, [r4, #12]
100103c2:	68a1      	ldr	r1, [r4, #8]
100103c4:	4b44      	ldr	r3, [pc, #272]	; (100104d8 <at_ble_init+0x194>)
100103c6:	4798      	blx	r3
100103c8:	466b      	mov	r3, sp
100103ca:	2201      	movs	r2, #1
100103cc:	1cdc      	adds	r4, r3, #3
100103ce:	1c20      	adds	r0, r4, #0
100103d0:	a901      	add	r1, sp, #4
100103d2:	4252      	negs	r2, r2
100103d4:	4b41      	ldr	r3, [pc, #260]	; (100104dc <at_ble_init+0x198>)
100103d6:	4798      	blx	r3
100103d8:	2800      	cmp	r0, #0
100103da:	d102      	bne.n	100103e2 <at_ble_init+0x9e>
100103dc:	7823      	ldrb	r3, [r4, #0]
100103de:	2b39      	cmp	r3, #57	; 0x39
100103e0:	d1f2      	bne.n	100103c8 <at_ble_init+0x84>
100103e2:	4b3f      	ldr	r3, [pc, #252]	; (100104e0 <at_ble_init+0x19c>)
100103e4:	4798      	blx	r3
100103e6:	1e06      	subs	r6, r0, #0
100103e8:	d155      	bne.n	10010496 <at_ble_init+0x152>
100103ea:	1c03      	adds	r3, r0, #0
100103ec:	2101      	movs	r1, #1
100103ee:	4a3d      	ldr	r2, [pc, #244]	; (100104e4 <at_ble_init+0x1a0>)
100103f0:	4249      	negs	r1, r1
100103f2:	189a      	adds	r2, r3, r2
100103f4:	3312      	adds	r3, #18
100103f6:	8151      	strh	r1, [r2, #10]
100103f8:	2b90      	cmp	r3, #144	; 0x90
100103fa:	d1f7      	bne.n	100103ec <at_ble_init+0xa8>
100103fc:	4c3a      	ldr	r4, [pc, #232]	; (100104e8 <at_ble_init+0x1a4>)
100103fe:	3b81      	subs	r3, #129	; 0x81
10010400:	7023      	strb	r3, [r4, #0]
10010402:	4b3a      	ldr	r3, [pc, #232]	; (100104ec <at_ble_init+0x1a8>)
10010404:	4a3a      	ldr	r2, [pc, #232]	; (100104f0 <at_ble_init+0x1ac>)
10010406:	8063      	strh	r3, [r4, #2]
10010408:	2300      	movs	r3, #0
1001040a:	7123      	strb	r3, [r4, #4]
1001040c:	3301      	adds	r3, #1
1001040e:	1e58      	subs	r0, r3, #1
10010410:	0119      	lsls	r1, r3, #4
10010412:	4301      	orrs	r1, r0
10010414:	3302      	adds	r3, #2
10010416:	7011      	strb	r1, [r2, #0]
10010418:	3201      	adds	r2, #1
1001041a:	2b21      	cmp	r3, #33	; 0x21
1001041c:	d1f7      	bne.n	1001040e <at_ble_init+0xca>
1001041e:	33e0      	adds	r3, #224	; 0xe0
10010420:	33ff      	adds	r3, #255	; 0xff
10010422:	84a3      	strh	r3, [r4, #36]	; 0x24
10010424:	1c23      	adds	r3, r4, #0
10010426:	2500      	movs	r5, #0
10010428:	3373      	adds	r3, #115	; 0x73
1001042a:	701d      	strb	r5, [r3, #0]
1001042c:	1c23      	adds	r3, r4, #0
1001042e:	3372      	adds	r3, #114	; 0x72
10010430:	701d      	strb	r5, [r3, #0]
10010432:	1c23      	adds	r3, r4, #0
10010434:	3376      	adds	r3, #118	; 0x76
10010436:	701d      	strb	r5, [r3, #0]
10010438:	1c23      	adds	r3, r4, #0
1001043a:	33cc      	adds	r3, #204	; 0xcc
1001043c:	801d      	strh	r5, [r3, #0]
1001043e:	1c22      	adds	r2, r4, #0
10010440:	23a0      	movs	r3, #160	; 0xa0
10010442:	32d0      	adds	r2, #208	; 0xd0
10010444:	005b      	lsls	r3, r3, #1
10010446:	8013      	strh	r3, [r2, #0]
10010448:	1c22      	adds	r2, r4, #0
1001044a:	32ce      	adds	r2, #206	; 0xce
1001044c:	8013      	strh	r3, [r2, #0]
1001044e:	1c23      	adds	r3, r4, #0
10010450:	33d2      	adds	r3, #210	; 0xd2
10010452:	801d      	strh	r5, [r3, #0]
10010454:	22fa      	movs	r2, #250	; 0xfa
10010456:	1c23      	adds	r3, r4, #0
10010458:	0052      	lsls	r2, r2, #1
1001045a:	33d4      	adds	r3, #212	; 0xd4
1001045c:	801a      	strh	r2, [r3, #0]
1001045e:	1c23      	adds	r3, r4, #0
10010460:	33d6      	adds	r3, #214	; 0xd6
10010462:	701d      	strb	r5, [r3, #0]
10010464:	1c20      	adds	r0, r4, #0
10010466:	4b23      	ldr	r3, [pc, #140]	; (100104f4 <at_ble_init+0x1b0>)
10010468:	76e5      	strb	r5, [r4, #27]
1001046a:	7725      	strb	r5, [r4, #28]
1001046c:	7765      	strb	r5, [r4, #29]
1001046e:	77a5      	strb	r5, [r4, #30]
10010470:	77e5      	strb	r5, [r4, #31]
10010472:	8425      	strh	r5, [r4, #32]
10010474:	8465      	strh	r5, [r4, #34]	; 0x22
10010476:	4798      	blx	r3
10010478:	1c23      	adds	r3, r4, #0
1001047a:	2207      	movs	r2, #7
1001047c:	3374      	adds	r3, #116	; 0x74
1001047e:	701a      	strb	r2, [r3, #0]
10010480:	1c23      	adds	r3, r4, #0
10010482:	3204      	adds	r2, #4
10010484:	33aa      	adds	r3, #170	; 0xaa
10010486:	801a      	strh	r2, [r3, #0]
10010488:	1c2b      	adds	r3, r5, #0
1001048a:	5d7a      	ldrb	r2, [r7, r5]
1001048c:	33ac      	adds	r3, #172	; 0xac
1001048e:	3501      	adds	r5, #1
10010490:	54e2      	strb	r2, [r4, r3]
10010492:	2d0b      	cmp	r5, #11
10010494:	d1f8      	bne.n	10010488 <at_ble_init+0x144>
10010496:	1c30      	adds	r0, r6, #0
10010498:	b007      	add	sp, #28
1001049a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001049c:	10017d08 	.word	0x10017d08
100104a0:	10014b7b 	.word	0x10014b7b
100104a4:	1001a8c0 	.word	0x1001a8c0
100104a8:	10019a64 	.word	0x10019a64
100104ac:	100199c4 	.word	0x100199c4
100104b0:	10017f30 	.word	0x10017f30
100104b4:	10012af9 	.word	0x10012af9
100104b8:	100107b5 	.word	0x100107b5
100104bc:	10010e15 	.word	0x10010e15
100104c0:	100110c9 	.word	0x100110c9
100104c4:	10010e51 	.word	0x10010e51
100104c8:	1000ee15 	.word	0x1000ee15
100104cc:	100113c9 	.word	0x100113c9
100104d0:	1000f059 	.word	0x1000f059
100104d4:	10011471 	.word	0x10011471
100104d8:	1000fa31 	.word	0x1000fa31
100104dc:	1000faed 	.word	0x1000faed
100104e0:	10012039 	.word	0x10012039
100104e4:	1001a8c2 	.word	0x1001a8c2
100104e8:	1001a952 	.word	0x1001a952
100104ec:	00003a98 	.word	0x00003a98
100104f0:	1001a95d 	.word	0x1001a95d
100104f4:	100102b5 	.word	0x100102b5

100104f8 <at_ble_addr_set>:
100104f8:	b538      	push	{r3, r4, r5, lr}
100104fa:	1c45      	adds	r5, r0, #1
100104fc:	1c03      	adds	r3, r0, #0
100104fe:	20cf      	movs	r0, #207	; 0xcf
10010500:	2d00      	cmp	r5, #0
10010502:	d018      	beq.n	10010536 <at_ble_addr_set+0x3e>
10010504:	781a      	ldrb	r2, [r3, #0]
10010506:	2a03      	cmp	r2, #3
10010508:	d815      	bhi.n	10010536 <at_ble_addr_set+0x3e>
1001050a:	2a01      	cmp	r2, #1
1001050c:	d102      	bne.n	10010514 <at_ble_addr_set+0x1c>
1001050e:	785a      	ldrb	r2, [r3, #1]
10010510:	2a00      	cmp	r2, #0
10010512:	d010      	beq.n	10010536 <at_ble_addr_set+0x3e>
10010514:	1c1c      	adds	r4, r3, #0
10010516:	1c29      	adds	r1, r5, #0
10010518:	2206      	movs	r2, #6
1001051a:	4b07      	ldr	r3, [pc, #28]	; (10010538 <at_ble_addr_set+0x40>)
1001051c:	4807      	ldr	r0, [pc, #28]	; (1001053c <at_ble_addr_set+0x44>)
1001051e:	4798      	blx	r3
10010520:	7823      	ldrb	r3, [r4, #0]
10010522:	4807      	ldr	r0, [pc, #28]	; (10010540 <at_ble_addr_set+0x48>)
10010524:	7103      	strb	r3, [r0, #4]
10010526:	4b07      	ldr	r3, [pc, #28]	; (10010544 <at_ble_addr_set+0x4c>)
10010528:	4798      	blx	r3
1001052a:	7823      	ldrb	r3, [r4, #0]
1001052c:	2b00      	cmp	r3, #0
1001052e:	d102      	bne.n	10010536 <at_ble_addr_set+0x3e>
10010530:	1c28      	adds	r0, r5, #0
10010532:	4b05      	ldr	r3, [pc, #20]	; (10010548 <at_ble_addr_set+0x50>)
10010534:	4798      	blx	r3
10010536:	bd38      	pop	{r3, r4, r5, pc}
10010538:	10014b7b 	.word	0x10014b7b
1001053c:	1001a957 	.word	0x1001a957
10010540:	1001a952 	.word	0x1001a952
10010544:	100102b5 	.word	0x100102b5
10010548:	100114f5 	.word	0x100114f5

1001054c <at_ble_adv_data_set>:
1001054c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001054e:	4684      	mov	ip, r0
10010550:	1c0f      	adds	r7, r1, #0
10010552:	1c16      	adds	r6, r2, #0
10010554:	1c1c      	adds	r4, r3, #0
10010556:	2800      	cmp	r0, #0
10010558:	d102      	bne.n	10010560 <at_ble_adv_data_set+0x14>
1001055a:	20e2      	movs	r0, #226	; 0xe2
1001055c:	2a00      	cmp	r2, #0
1001055e:	d02b      	beq.n	100105b8 <at_ble_adv_data_set+0x6c>
10010560:	20cf      	movs	r0, #207	; 0xcf
10010562:	2f1f      	cmp	r7, #31
10010564:	d828      	bhi.n	100105b8 <at_ble_adv_data_set+0x6c>
10010566:	2c1f      	cmp	r4, #31
10010568:	d826      	bhi.n	100105b8 <at_ble_adv_data_set+0x6c>
1001056a:	4663      	mov	r3, ip
1001056c:	2b00      	cmp	r3, #0
1001056e:	d00e      	beq.n	1001058e <at_ble_adv_data_set+0x42>
10010570:	4812      	ldr	r0, [pc, #72]	; (100105bc <at_ble_adv_data_set+0x70>)
10010572:	4d13      	ldr	r5, [pc, #76]	; (100105c0 <at_ble_adv_data_set+0x74>)
10010574:	2f00      	cmp	r7, #0
10010576:	d104      	bne.n	10010582 <at_ble_adv_data_set+0x36>
10010578:	1c39      	adds	r1, r7, #0
1001057a:	221f      	movs	r2, #31
1001057c:	4b11      	ldr	r3, [pc, #68]	; (100105c4 <at_ble_adv_data_set+0x78>)
1001057e:	4798      	blx	r3
10010580:	e003      	b.n	1001058a <at_ble_adv_data_set+0x3e>
10010582:	4661      	mov	r1, ip
10010584:	1c3a      	adds	r2, r7, #0
10010586:	4b10      	ldr	r3, [pc, #64]	; (100105c8 <at_ble_adv_data_set+0x7c>)
10010588:	4798      	blx	r3
1001058a:	3572      	adds	r5, #114	; 0x72
1001058c:	702f      	strb	r7, [r5, #0]
1001058e:	1e30      	subs	r0, r6, #0
10010590:	d012      	beq.n	100105b8 <at_ble_adv_data_set+0x6c>
10010592:	4d0b      	ldr	r5, [pc, #44]	; (100105c0 <at_ble_adv_data_set+0x74>)
10010594:	480d      	ldr	r0, [pc, #52]	; (100105cc <at_ble_adv_data_set+0x80>)
10010596:	2c00      	cmp	r4, #0
10010598:	d107      	bne.n	100105aa <at_ble_adv_data_set+0x5e>
1001059a:	1c21      	adds	r1, r4, #0
1001059c:	221f      	movs	r2, #31
1001059e:	4b09      	ldr	r3, [pc, #36]	; (100105c4 <at_ble_adv_data_set+0x78>)
100105a0:	3573      	adds	r5, #115	; 0x73
100105a2:	4798      	blx	r3
100105a4:	702c      	strb	r4, [r5, #0]
100105a6:	1c20      	adds	r0, r4, #0
100105a8:	e006      	b.n	100105b8 <at_ble_adv_data_set+0x6c>
100105aa:	1c31      	adds	r1, r6, #0
100105ac:	1c22      	adds	r2, r4, #0
100105ae:	4b06      	ldr	r3, [pc, #24]	; (100105c8 <at_ble_adv_data_set+0x7c>)
100105b0:	4798      	blx	r3
100105b2:	2000      	movs	r0, #0
100105b4:	3573      	adds	r5, #115	; 0x73
100105b6:	702c      	strb	r4, [r5, #0]
100105b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100105ba:	46c0      	nop			; (mov r8, r8)
100105bc:	1001a986 	.word	0x1001a986
100105c0:	1001a952 	.word	0x1001a952
100105c4:	10014b8d 	.word	0x10014b8d
100105c8:	10014b7b 	.word	0x10014b7b
100105cc:	1001a9a5 	.word	0x1001a9a5

100105d0 <at_ble_adv_start>:
100105d0:	b5f0      	push	{r4, r5, r6, r7, lr}
100105d2:	b091      	sub	sp, #68	; 0x44
100105d4:	1c1f      	adds	r7, r3, #0
100105d6:	ab16      	add	r3, sp, #88	; 0x58
100105d8:	881d      	ldrh	r5, [r3, #0]
100105da:	ab17      	add	r3, sp, #92	; 0x5c
100105dc:	881b      	ldrh	r3, [r3, #0]
100105de:	910d      	str	r1, [sp, #52]	; 0x34
100105e0:	930e      	str	r3, [sp, #56]	; 0x38
100105e2:	ab18      	add	r3, sp, #96	; 0x60
100105e4:	781b      	ldrb	r3, [r3, #0]
100105e6:	1c04      	adds	r4, r0, #0
100105e8:	930f      	str	r3, [sp, #60]	; 0x3c
100105ea:	4b42      	ldr	r3, [pc, #264]	; (100106f4 <at_ble_adv_start+0x124>)
100105ec:	1c16      	adds	r6, r2, #0
100105ee:	3373      	adds	r3, #115	; 0x73
100105f0:	781b      	ldrb	r3, [r3, #0]
100105f2:	20cf      	movs	r0, #207	; 0xcf
100105f4:	930c      	str	r3, [sp, #48]	; 0x30
100105f6:	2c01      	cmp	r4, #1
100105f8:	d103      	bne.n	10010602 <at_ble_adv_start+0x32>
100105fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
100105fc:	2b00      	cmp	r3, #0
100105fe:	d176      	bne.n	100106ee <at_ble_adv_start+0x11e>
10010600:	e024      	b.n	1001064c <at_ble_adv_start+0x7c>
10010602:	2c04      	cmp	r4, #4
10010604:	d873      	bhi.n	100106ee <at_ble_adv_start+0x11e>
10010606:	2380      	movs	r3, #128	; 0x80
10010608:	01db      	lsls	r3, r3, #7
1001060a:	429d      	cmp	r5, r3
1001060c:	d86f      	bhi.n	100106ee <at_ble_adv_start+0x11e>
1001060e:	2c00      	cmp	r4, #0
10010610:	d102      	bne.n	10010618 <at_ble_adv_start+0x48>
10010612:	2d1f      	cmp	r5, #31
10010614:	d96b      	bls.n	100106ee <at_ble_adv_start+0x11e>
10010616:	e003      	b.n	10010620 <at_ble_adv_start+0x50>
10010618:	2d9f      	cmp	r5, #159	; 0x9f
1001061a:	d801      	bhi.n	10010620 <at_ble_adv_start+0x50>
1001061c:	2c01      	cmp	r4, #1
1001061e:	d166      	bne.n	100106ee <at_ble_adv_start+0x11e>
10010620:	2f00      	cmp	r7, #0
10010622:	d009      	beq.n	10010638 <at_ble_adv_start+0x68>
10010624:	9b0d      	ldr	r3, [sp, #52]	; 0x34
10010626:	20cf      	movs	r0, #207	; 0xcf
10010628:	3b01      	subs	r3, #1
1001062a:	2b01      	cmp	r3, #1
1001062c:	d95f      	bls.n	100106ee <at_ble_adv_start+0x11e>
1001062e:	2c01      	cmp	r4, #1
10010630:	d102      	bne.n	10010638 <at_ble_adv_start+0x68>
10010632:	2d00      	cmp	r5, #0
10010634:	d100      	bne.n	10010638 <at_ble_adv_start+0x68>
10010636:	3520      	adds	r5, #32
10010638:	4b2f      	ldr	r3, [pc, #188]	; (100106f8 <at_ble_adv_start+0x128>)
1001063a:	4798      	blx	r3
1001063c:	1c01      	adds	r1, r0, #0
1001063e:	2e00      	cmp	r6, #0
10010640:	d043      	beq.n	100106ca <at_ble_adv_start+0xfa>
10010642:	7833      	ldrb	r3, [r6, #0]
10010644:	1e60      	subs	r0, r4, #1
10010646:	2b00      	cmp	r3, #0
10010648:	d109      	bne.n	1001065e <at_ble_adv_start+0x8e>
1001064a:	e03b      	b.n	100106c4 <at_ble_adv_start+0xf4>
1001064c:	2380      	movs	r3, #128	; 0x80
1001064e:	01db      	lsls	r3, r3, #7
10010650:	429d      	cmp	r5, r3
10010652:	d84c      	bhi.n	100106ee <at_ble_adv_start+0x11e>
10010654:	2e00      	cmp	r6, #0
10010656:	d04a      	beq.n	100106ee <at_ble_adv_start+0x11e>
10010658:	2f00      	cmp	r7, #0
1001065a:	d1e3      	bne.n	10010624 <at_ble_adv_start+0x54>
1001065c:	e02b      	b.n	100106b6 <at_ble_adv_start+0xe6>
1001065e:	2301      	movs	r3, #1
10010660:	2803      	cmp	r0, #3
10010662:	d93a      	bls.n	100106da <at_ble_adv_start+0x10a>
10010664:	200d      	movs	r0, #13
10010666:	1c72      	adds	r2, r6, #1
10010668:	e002      	b.n	10010670 <at_ble_adv_start+0xa0>
1001066a:	200e      	movs	r0, #14
1001066c:	1e32      	subs	r2, r6, #0
1001066e:	d1fa      	bne.n	10010666 <at_ble_adv_start+0x96>
10010670:	4c20      	ldr	r4, [pc, #128]	; (100106f4 <at_ble_adv_start+0x124>)
10010672:	3474      	adds	r4, #116	; 0x74
10010674:	7826      	ldrb	r6, [r4, #0]
10010676:	2407      	movs	r4, #7
10010678:	2e00      	cmp	r6, #0
1001067a:	d000      	beq.n	1001067e <at_ble_adv_start+0xae>
1001067c:	1c34      	adds	r4, r6, #0
1001067e:	9200      	str	r2, [sp, #0]
10010680:	9a0d      	ldr	r2, [sp, #52]	; 0x34
10010682:	9403      	str	r4, [sp, #12]
10010684:	9204      	str	r2, [sp, #16]
10010686:	4a1b      	ldr	r2, [pc, #108]	; (100106f4 <at_ble_adv_start+0x124>)
10010688:	9501      	str	r5, [sp, #4]
1001068a:	9502      	str	r5, [sp, #8]
1001068c:	9705      	str	r7, [sp, #20]
1001068e:	3272      	adds	r2, #114	; 0x72
10010690:	7812      	ldrb	r2, [r2, #0]
10010692:	9c0e      	ldr	r4, [sp, #56]	; 0x38
10010694:	9206      	str	r2, [sp, #24]
10010696:	4a19      	ldr	r2, [pc, #100]	; (100106fc <at_ble_adv_start+0x12c>)
10010698:	9207      	str	r2, [sp, #28]
1001069a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1001069c:	9208      	str	r2, [sp, #32]
1001069e:	4a18      	ldr	r2, [pc, #96]	; (10010700 <at_ble_adv_start+0x130>)
100106a0:	9209      	str	r2, [sp, #36]	; 0x24
100106a2:	2264      	movs	r2, #100	; 0x64
100106a4:	4362      	muls	r2, r4
100106a6:	b292      	uxth	r2, r2
100106a8:	920a      	str	r2, [sp, #40]	; 0x28
100106aa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
100106ac:	4c15      	ldr	r4, [pc, #84]	; (10010704 <at_ble_adv_start+0x134>)
100106ae:	920b      	str	r2, [sp, #44]	; 0x2c
100106b0:	4a15      	ldr	r2, [pc, #84]	; (10010708 <at_ble_adv_start+0x138>)
100106b2:	47a0      	blx	r4
100106b4:	e01b      	b.n	100106ee <at_ble_adv_start+0x11e>
100106b6:	2d00      	cmp	r5, #0
100106b8:	d1be      	bne.n	10010638 <at_ble_adv_start+0x68>
100106ba:	4b0f      	ldr	r3, [pc, #60]	; (100106f8 <at_ble_adv_start+0x128>)
100106bc:	4798      	blx	r3
100106be:	2520      	movs	r5, #32
100106c0:	1c01      	adds	r1, r0, #0
100106c2:	e7be      	b.n	10010642 <at_ble_adv_start+0x72>
100106c4:	2803      	cmp	r0, #3
100106c6:	d8cd      	bhi.n	10010664 <at_ble_adv_start+0x94>
100106c8:	e006      	b.n	100106d8 <at_ble_adv_start+0x108>
100106ca:	1e60      	subs	r0, r4, #1
100106cc:	2803      	cmp	r0, #3
100106ce:	d903      	bls.n	100106d8 <at_ble_adv_start+0x108>
100106d0:	1c33      	adds	r3, r6, #0
100106d2:	200d      	movs	r0, #13
100106d4:	1c32      	adds	r2, r6, #0
100106d6:	e7cb      	b.n	10010670 <at_ble_adv_start+0xa0>
100106d8:	2300      	movs	r3, #0
100106da:	f002 fb7f 	bl	10012ddc <__gnu_thumb1_case_sqi>
100106de:	06c6      	.short	0x06c6
100106e0:	0204      	.short	0x0204
100106e2:	200f      	movs	r0, #15
100106e4:	e7c2      	b.n	1001066c <at_ble_adv_start+0x9c>
100106e6:	2200      	movs	r2, #0
100106e8:	920c      	str	r2, [sp, #48]	; 0x30
100106ea:	200c      	movs	r0, #12
100106ec:	e7be      	b.n	1001066c <at_ble_adv_start+0x9c>
100106ee:	b011      	add	sp, #68	; 0x44
100106f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100106f2:	46c0      	nop			; (mov r8, r8)
100106f4:	1001a952 	.word	0x1001a952
100106f8:	10012585 	.word	0x10012585
100106fc:	1001a986 	.word	0x1001a986
10010700:	1001a9a5 	.word	0x1001a9a5
10010704:	10012465 	.word	0x10012465
10010708:	00003a98 	.word	0x00003a98

1001070c <at_ble_adv_stop>:
1001070c:	b508      	push	{r3, lr}
1001070e:	4b01      	ldr	r3, [pc, #4]	; (10010714 <at_ble_adv_stop+0x8>)
10010710:	4798      	blx	r3
10010712:	bd08      	pop	{r3, pc}
10010714:	10012291 	.word	0x10012291

10010718 <at_ble_scan_stop>:
10010718:	b510      	push	{r4, lr}
1001071a:	4b05      	ldr	r3, [pc, #20]	; (10010730 <at_ble_scan_stop+0x18>)
1001071c:	4798      	blx	r3
1001071e:	1e04      	subs	r4, r0, #0
10010720:	d103      	bne.n	1001072a <at_ble_scan_stop+0x12>
10010722:	20d1      	movs	r0, #209	; 0xd1
10010724:	4b03      	ldr	r3, [pc, #12]	; (10010734 <at_ble_scan_stop+0x1c>)
10010726:	0100      	lsls	r0, r0, #4
10010728:	4798      	blx	r3
1001072a:	1c20      	adds	r0, r4, #0
1001072c:	bd10      	pop	{r4, pc}
1001072e:	46c0      	nop			; (mov r8, r8)
10010730:	10012291 	.word	0x10012291
10010734:	100101c5 	.word	0x100101c5

10010738 <at_ble_disconnect>:
10010738:	b538      	push	{r3, r4, r5, lr}
1001073a:	1c04      	adds	r4, r0, #0
1001073c:	4b04      	ldr	r3, [pc, #16]	; (10010750 <at_ble_disconnect+0x18>)
1001073e:	1c08      	adds	r0, r1, #0
10010740:	1c21      	adds	r1, r4, #0
10010742:	4798      	blx	r3
10010744:	1c05      	adds	r5, r0, #0
10010746:	4b03      	ldr	r3, [pc, #12]	; (10010754 <at_ble_disconnect+0x1c>)
10010748:	1c20      	adds	r0, r4, #0
1001074a:	4798      	blx	r3
1001074c:	1c28      	adds	r0, r5, #0
1001074e:	bd38      	pop	{r3, r4, r5, pc}
10010750:	10011909 	.word	0x10011909
10010754:	10010209 	.word	0x10010209

10010758 <at_ble_conn_update_reply>:
10010758:	b510      	push	{r4, lr}
1001075a:	4c01      	ldr	r4, [pc, #4]	; (10010760 <at_ble_conn_update_reply+0x8>)
1001075c:	47a0      	blx	r4
1001075e:	bd10      	pop	{r4, pc}
10010760:	10011df9 	.word	0x10011df9

10010764 <at_ble_random_address_resolve>:
10010764:	b510      	push	{r4, lr}
10010766:	23cf      	movs	r3, #207	; 0xcf
10010768:	2800      	cmp	r0, #0
1001076a:	d00a      	beq.n	10010782 <at_ble_random_address_resolve+0x1e>
1001076c:	2900      	cmp	r1, #0
1001076e:	d008      	beq.n	10010782 <at_ble_random_address_resolve+0x1e>
10010770:	2a00      	cmp	r2, #0
10010772:	d006      	beq.n	10010782 <at_ble_random_address_resolve+0x1e>
10010774:	780c      	ldrb	r4, [r1, #0]
10010776:	2c02      	cmp	r4, #2
10010778:	d103      	bne.n	10010782 <at_ble_random_address_resolve+0x1e>
1001077a:	4b03      	ldr	r3, [pc, #12]	; (10010788 <at_ble_random_address_resolve+0x24>)
1001077c:	3101      	adds	r1, #1
1001077e:	4798      	blx	r3
10010780:	2300      	movs	r3, #0
10010782:	1c18      	adds	r0, r3, #0
10010784:	bd10      	pop	{r4, pc}
10010786:	46c0      	nop			; (mov r8, r8)
10010788:	10012625 	.word	0x10012625

1001078c <at_ble_uuid_type2len>:
1001078c:	23cf      	movs	r3, #207	; 0xcf
1001078e:	2802      	cmp	r0, #2
10010790:	d801      	bhi.n	10010796 <at_ble_uuid_type2len+0xa>
10010792:	4b02      	ldr	r3, [pc, #8]	; (1001079c <at_ble_uuid_type2len+0x10>)
10010794:	5c1b      	ldrb	r3, [r3, r0]
10010796:	1c18      	adds	r0, r3, #0
10010798:	4770      	bx	lr
1001079a:	46c0      	nop			; (mov r8, r8)
1001079c:	10017d13 	.word	0x10017d13

100107a0 <at_ble_uuid_len2type>:
100107a0:	1e83      	subs	r3, r0, #2
100107a2:	b2db      	uxtb	r3, r3
100107a4:	2003      	movs	r0, #3
100107a6:	2b0e      	cmp	r3, #14
100107a8:	d801      	bhi.n	100107ae <at_ble_uuid_len2type+0xe>
100107aa:	4a01      	ldr	r2, [pc, #4]	; (100107b0 <at_ble_uuid_len2type+0x10>)
100107ac:	5cd0      	ldrb	r0, [r2, r3]
100107ae:	4770      	bx	lr
100107b0:	10017d16 	.word	0x10017d16

100107b4 <init_gatt_client_module>:
100107b4:	2200      	movs	r2, #0
100107b6:	4b01      	ldr	r3, [pc, #4]	; (100107bc <init_gatt_client_module+0x8>)
100107b8:	801a      	strh	r2, [r3, #0]
100107ba:	4770      	bx	lr
100107bc:	100199bc 	.word	0x100199bc

100107c0 <db_searchATT>:
100107c0:	b570      	push	{r4, r5, r6, lr}
100107c2:	1c05      	adds	r5, r0, #0
100107c4:	2400      	movs	r4, #0
100107c6:	4b0c      	ldr	r3, [pc, #48]	; (100107f8 <db_searchATT+0x38>)
100107c8:	6819      	ldr	r1, [r3, #0]
100107ca:	4b0c      	ldr	r3, [pc, #48]	; (100107fc <db_searchATT+0x3c>)
100107cc:	681e      	ldr	r6, [r3, #0]
100107ce:	428c      	cmp	r4, r1
100107d0:	dc10      	bgt.n	100107f4 <db_searchATT+0x34>
100107d2:	200c      	movs	r0, #12
100107d4:	1863      	adds	r3, r4, r1
100107d6:	0fda      	lsrs	r2, r3, #31
100107d8:	18d3      	adds	r3, r2, r3
100107da:	1c02      	adds	r2, r0, #0
100107dc:	105b      	asrs	r3, r3, #1
100107de:	435a      	muls	r2, r3
100107e0:	18b0      	adds	r0, r6, r2
100107e2:	8802      	ldrh	r2, [r0, #0]
100107e4:	42aa      	cmp	r2, r5
100107e6:	d201      	bcs.n	100107ec <db_searchATT+0x2c>
100107e8:	1e59      	subs	r1, r3, #1
100107ea:	e7f0      	b.n	100107ce <db_searchATT+0xe>
100107ec:	42aa      	cmp	r2, r5
100107ee:	d902      	bls.n	100107f6 <db_searchATT+0x36>
100107f0:	1c5c      	adds	r4, r3, #1
100107f2:	e7ec      	b.n	100107ce <db_searchATT+0xe>
100107f4:	2000      	movs	r0, #0
100107f6:	bd70      	pop	{r4, r5, r6, pc}
100107f8:	100199d0 	.word	0x100199d0
100107fc:	100199c8 	.word	0x100199c8

10010800 <att_permissions>:
10010800:	b530      	push	{r4, r5, lr}
10010802:	2403      	movs	r4, #3
10010804:	1c05      	adds	r5, r0, #0
10010806:	2301      	movs	r3, #1
10010808:	4025      	ands	r5, r4
1001080a:	42a5      	cmp	r5, r4
1001080c:	d009      	beq.n	10010822 <att_permissions+0x22>
1001080e:	1c23      	adds	r3, r4, #0
10010810:	1924      	adds	r4, r4, r4
10010812:	4220      	tst	r0, r4
10010814:	d105      	bne.n	10010822 <att_permissions+0x22>
10010816:	3b02      	subs	r3, #2
10010818:	4218      	tst	r0, r3
1001081a:	d102      	bne.n	10010822 <att_permissions+0x22>
1001081c:	1e4b      	subs	r3, r1, #1
1001081e:	4199      	sbcs	r1, r3
10010820:	b28b      	uxth	r3, r1
10010822:	2130      	movs	r1, #48	; 0x30
10010824:	4001      	ands	r1, r0
10010826:	2930      	cmp	r1, #48	; 0x30
10010828:	d007      	beq.n	1001083a <att_permissions+0x3a>
1001082a:	0641      	lsls	r1, r0, #25
1001082c:	d401      	bmi.n	10010832 <att_permissions+0x32>
1001082e:	0681      	lsls	r1, r0, #26
10010830:	d501      	bpl.n	10010836 <att_permissions+0x36>
10010832:	4807      	ldr	r0, [pc, #28]	; (10010850 <att_permissions+0x50>)
10010834:	e009      	b.n	1001084a <att_permissions+0x4a>
10010836:	06c1      	lsls	r1, r0, #27
10010838:	d501      	bpl.n	1001083e <att_permissions+0x3e>
1001083a:	4806      	ldr	r0, [pc, #24]	; (10010854 <att_permissions+0x54>)
1001083c:	e005      	b.n	1001084a <att_permissions+0x4a>
1001083e:	2a00      	cmp	r2, #0
10010840:	d001      	beq.n	10010846 <att_permissions+0x46>
10010842:	2204      	movs	r2, #4
10010844:	4313      	orrs	r3, r2
10010846:	2080      	movs	r0, #128	; 0x80
10010848:	0180      	lsls	r0, r0, #6
1001084a:	4318      	orrs	r0, r3
1001084c:	bd30      	pop	{r4, r5, pc}
1001084e:	46c0      	nop			; (mov r8, r8)
10010850:	0000200c 	.word	0x0000200c
10010854:	00002004 	.word	0x00002004

10010858 <char_permissions>:
10010858:	b530      	push	{r4, r5, lr}
1001085a:	2300      	movs	r3, #0
1001085c:	0784      	lsls	r4, r0, #30
1001085e:	d503      	bpl.n	10010868 <char_permissions+0x10>
10010860:	3301      	adds	r3, #1
10010862:	4219      	tst	r1, r3
10010864:	d100      	bne.n	10010868 <char_permissions+0x10>
10010866:	3302      	adds	r3, #2
10010868:	0704      	lsls	r4, r0, #28
1001086a:	d508      	bpl.n	1001087e <char_permissions+0x26>
1001086c:	06cc      	lsls	r4, r1, #27
1001086e:	d501      	bpl.n	10010874 <char_permissions+0x1c>
10010870:	2404      	movs	r4, #4
10010872:	e000      	b.n	10010876 <char_permissions+0x1e>
10010874:	240c      	movs	r4, #12
10010876:	4323      	orrs	r3, r4
10010878:	2480      	movs	r4, #128	; 0x80
1001087a:	01a4      	lsls	r4, r4, #6
1001087c:	4323      	orrs	r3, r4
1001087e:	0684      	lsls	r4, r0, #26
10010880:	d506      	bpl.n	10010890 <char_permissions+0x38>
10010882:	2406      	movs	r4, #6
10010884:	4221      	tst	r1, r4
10010886:	d101      	bne.n	1001088c <char_permissions+0x34>
10010888:	340a      	adds	r4, #10
1001088a:	e000      	b.n	1001088e <char_permissions+0x36>
1001088c:	2430      	movs	r4, #48	; 0x30
1001088e:	4323      	orrs	r3, r4
10010890:	06c4      	lsls	r4, r0, #27
10010892:	d506      	bpl.n	100108a2 <char_permissions+0x4a>
10010894:	2406      	movs	r4, #6
10010896:	4221      	tst	r1, r4
10010898:	d101      	bne.n	1001089e <char_permissions+0x46>
1001089a:	343a      	adds	r4, #58	; 0x3a
1001089c:	e000      	b.n	100108a0 <char_permissions+0x48>
1001089e:	24c0      	movs	r4, #192	; 0xc0
100108a0:	4323      	orrs	r3, r4
100108a2:	2480      	movs	r4, #128	; 0x80
100108a4:	0064      	lsls	r4, r4, #1
100108a6:	4220      	tst	r0, r4
100108a8:	d000      	beq.n	100108ac <char_permissions+0x54>
100108aa:	4323      	orrs	r3, r4
100108ac:	07c4      	lsls	r4, r0, #31
100108ae:	d502      	bpl.n	100108b6 <char_permissions+0x5e>
100108b0:	2480      	movs	r4, #128	; 0x80
100108b2:	00a4      	lsls	r4, r4, #2
100108b4:	4323      	orrs	r3, r4
100108b6:	2404      	movs	r4, #4
100108b8:	4220      	tst	r0, r4
100108ba:	d006      	beq.n	100108ca <char_permissions+0x72>
100108bc:	06cd      	lsls	r5, r1, #27
100108be:	d400      	bmi.n	100108c2 <char_permissions+0x6a>
100108c0:	240c      	movs	r4, #12
100108c2:	4323      	orrs	r3, r4
100108c4:	2480      	movs	r4, #128	; 0x80
100108c6:	0124      	lsls	r4, r4, #4
100108c8:	4323      	orrs	r3, r4
100108ca:	0644      	lsls	r4, r0, #25
100108cc:	d501      	bpl.n	100108d2 <char_permissions+0x7a>
100108ce:	4c08      	ldr	r4, [pc, #32]	; (100108f0 <char_permissions+0x98>)
100108d0:	4323      	orrs	r3, r4
100108d2:	0600      	lsls	r0, r0, #24
100108d4:	d507      	bpl.n	100108e6 <char_permissions+0x8e>
100108d6:	2004      	movs	r0, #4
100108d8:	06c9      	lsls	r1, r1, #27
100108da:	d400      	bmi.n	100108de <char_permissions+0x86>
100108dc:	200c      	movs	r0, #12
100108de:	4303      	orrs	r3, r0
100108e0:	2084      	movs	r0, #132	; 0x84
100108e2:	0180      	lsls	r0, r0, #6
100108e4:	4303      	orrs	r3, r0
100108e6:	0390      	lsls	r0, r2, #14
100108e8:	4303      	orrs	r3, r0
100108ea:	b298      	uxth	r0, r3
100108ec:	bd30      	pop	{r4, r5, pc}
100108ee:	46c0      	nop			; (mov r8, r8)
100108f0:	00001004 	.word	0x00001004

100108f4 <presentation_format_define>:
100108f4:	b507      	push	{r0, r1, r2, lr}
100108f6:	466a      	mov	r2, sp
100108f8:	780b      	ldrb	r3, [r1, #0]
100108fa:	7013      	strb	r3, [r2, #0]
100108fc:	784b      	ldrb	r3, [r1, #1]
100108fe:	7053      	strb	r3, [r2, #1]
10010900:	884b      	ldrh	r3, [r1, #2]
10010902:	7093      	strb	r3, [r2, #2]
10010904:	0a1b      	lsrs	r3, r3, #8
10010906:	70d3      	strb	r3, [r2, #3]
10010908:	790b      	ldrb	r3, [r1, #4]
1001090a:	7113      	strb	r3, [r2, #4]
1001090c:	88cb      	ldrh	r3, [r1, #6]
1001090e:	2107      	movs	r1, #7
10010910:	7153      	strb	r3, [r2, #5]
10010912:	0a1b      	lsrs	r3, r3, #8
10010914:	7193      	strb	r3, [r2, #6]
10010916:	4b01      	ldr	r3, [pc, #4]	; (1001091c <presentation_format_define+0x28>)
10010918:	4798      	blx	r3
1001091a:	bd0e      	pop	{r1, r2, r3, pc}
1001091c:	10012c89 	.word	0x10012c89

10010920 <db_addATT>:
10010920:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010922:	4c29      	ldr	r4, [pc, #164]	; (100109c8 <db_addATT+0xa8>)
10010924:	1c1d      	adds	r5, r3, #0
10010926:	6823      	ldr	r3, [r4, #0]
10010928:	9001      	str	r0, [sp, #4]
1001092a:	26d3      	movs	r6, #211	; 0xd3
1001092c:	2b00      	cmp	r3, #0
1001092e:	d048      	beq.n	100109c2 <db_addATT+0xa2>
10010930:	1c1e      	adds	r6, r3, #0
10010932:	3e0c      	subs	r6, #12
10010934:	6026      	str	r6, [r4, #0]
10010936:	2900      	cmp	r1, #0
10010938:	d005      	beq.n	10010946 <db_addATT+0x26>
1001093a:	4f24      	ldr	r7, [pc, #144]	; (100109cc <db_addATT+0xac>)
1001093c:	46bc      	mov	ip, r7
1001093e:	4660      	mov	r0, ip
10010940:	683f      	ldr	r7, [r7, #0]
10010942:	18bf      	adds	r7, r7, r2
10010944:	6007      	str	r7, [r0, #0]
10010946:	4821      	ldr	r0, [pc, #132]	; (100109cc <db_addATT+0xac>)
10010948:	6807      	ldr	r7, [r0, #0]
1001094a:	4684      	mov	ip, r0
1001094c:	42be      	cmp	r6, r7
1001094e:	d932      	bls.n	100109b6 <db_addATT+0x96>
10010950:	4668      	mov	r0, sp
10010952:	8880      	ldrh	r0, [r0, #4]
10010954:	3b0c      	subs	r3, #12
10010956:	8018      	strh	r0, [r3, #0]
10010958:	6823      	ldr	r3, [r4, #0]
1001095a:	2900      	cmp	r1, #0
1001095c:	d009      	beq.n	10010972 <db_addATT+0x52>
1001095e:	2a00      	cmp	r2, #0
10010960:	d007      	beq.n	10010972 <db_addATT+0x52>
10010962:	4660      	mov	r0, ip
10010964:	6800      	ldr	r0, [r0, #0]
10010966:	809a      	strh	r2, [r3, #4]
10010968:	1a80      	subs	r0, r0, r2
1001096a:	6098      	str	r0, [r3, #8]
1001096c:	4b18      	ldr	r3, [pc, #96]	; (100109d0 <db_addATT+0xb0>)
1001096e:	4798      	blx	r3
10010970:	e002      	b.n	10010978 <db_addATT+0x58>
10010972:	2100      	movs	r1, #0
10010974:	809a      	strh	r2, [r3, #4]
10010976:	6099      	str	r1, [r3, #8]
10010978:	2300      	movs	r3, #0
1001097a:	6822      	ldr	r2, [r4, #0]
1001097c:	7093      	strb	r3, [r2, #2]
1001097e:	3303      	adds	r3, #3
10010980:	402b      	ands	r3, r5
10010982:	2b03      	cmp	r3, #3
10010984:	d001      	beq.n	1001098a <db_addATT+0x6a>
10010986:	076b      	lsls	r3, r5, #29
10010988:	d504      	bpl.n	10010994 <db_addATT+0x74>
1001098a:	2101      	movs	r1, #1
1001098c:	6822      	ldr	r2, [r4, #0]
1001098e:	7893      	ldrb	r3, [r2, #2]
10010990:	430b      	orrs	r3, r1
10010992:	7093      	strb	r3, [r2, #2]
10010994:	2330      	movs	r3, #48	; 0x30
10010996:	402b      	ands	r3, r5
10010998:	2b30      	cmp	r3, #48	; 0x30
1001099a:	d001      	beq.n	100109a0 <db_addATT+0x80>
1001099c:	066b      	lsls	r3, r5, #25
1001099e:	d504      	bpl.n	100109aa <db_addATT+0x8a>
100109a0:	2102      	movs	r1, #2
100109a2:	6822      	ldr	r2, [r4, #0]
100109a4:	7893      	ldrb	r3, [r2, #2]
100109a6:	430b      	orrs	r3, r1
100109a8:	7093      	strb	r3, [r2, #2]
100109aa:	4a0a      	ldr	r2, [pc, #40]	; (100109d4 <db_addATT+0xb4>)
100109ac:	2600      	movs	r6, #0
100109ae:	6813      	ldr	r3, [r2, #0]
100109b0:	3301      	adds	r3, #1
100109b2:	6013      	str	r3, [r2, #0]
100109b4:	e005      	b.n	100109c2 <db_addATT+0xa2>
100109b6:	6023      	str	r3, [r4, #0]
100109b8:	2611      	movs	r6, #17
100109ba:	2900      	cmp	r1, #0
100109bc:	d001      	beq.n	100109c2 <db_addATT+0xa2>
100109be:	1aba      	subs	r2, r7, r2
100109c0:	6002      	str	r2, [r0, #0]
100109c2:	1c30      	adds	r0, r6, #0
100109c4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100109c6:	46c0      	nop			; (mov r8, r8)
100109c8:	100199c8 	.word	0x100199c8
100109cc:	100199cc 	.word	0x100199cc
100109d0:	10014b7b 	.word	0x10014b7b
100109d4:	100199d0 	.word	0x100199d0

100109d8 <user_description_define>:
100109d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100109da:	1c05      	adds	r5, r0, #0
100109dc:	20cf      	movs	r0, #207	; 0xcf
100109de:	2a00      	cmp	r2, #0
100109e0:	d01c      	beq.n	10010a1c <user_description_define+0x44>
100109e2:	1c14      	adds	r4, r2, #0
100109e4:	2203      	movs	r2, #3
100109e6:	1c1e      	adds	r6, r3, #0
100109e8:	400a      	ands	r2, r1
100109ea:	1c0b      	adds	r3, r1, #0
100109ec:	3a03      	subs	r2, #3
100109ee:	4251      	negs	r1, r2
100109f0:	4151      	adcs	r1, r2
100109f2:	075a      	lsls	r2, r3, #29
100109f4:	0fd2      	lsrs	r2, r2, #31
100109f6:	430a      	orrs	r2, r1
100109f8:	03d2      	lsls	r2, r2, #15
100109fa:	4f09      	ldr	r7, [pc, #36]	; (10010a20 <user_description_define+0x48>)
100109fc:	1c28      	adds	r0, r5, #0
100109fe:	2a00      	cmp	r2, #0
10010a00:	d003      	beq.n	10010a0a <user_description_define+0x32>
10010a02:	1c21      	adds	r1, r4, #0
10010a04:	1c32      	adds	r2, r6, #0
10010a06:	47b8      	blx	r7
10010a08:	e008      	b.n	10010a1c <user_description_define+0x44>
10010a0a:	1c11      	adds	r1, r2, #0
10010a0c:	47b8      	blx	r7
10010a0e:	2800      	cmp	r0, #0
10010a10:	d104      	bne.n	10010a1c <user_description_define+0x44>
10010a12:	1c28      	adds	r0, r5, #0
10010a14:	1c31      	adds	r1, r6, #0
10010a16:	1c22      	adds	r2, r4, #0
10010a18:	4b02      	ldr	r3, [pc, #8]	; (10010a24 <user_description_define+0x4c>)
10010a1a:	4798      	blx	r3
10010a1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10010a1e:	46c0      	nop			; (mov r8, r8)
10010a20:	10010921 	.word	0x10010921
10010a24:	10012c89 	.word	0x10012c89

10010a28 <at_ble_read_authorize_reply.part.1>:
10010a28:	b537      	push	{r0, r1, r2, r4, r5, lr}
10010a2a:	4b09      	ldr	r3, [pc, #36]	; (10010a50 <at_ble_read_authorize_reply.part.1+0x28>)
10010a2c:	1c05      	adds	r5, r0, #0
10010a2e:	1c08      	adds	r0, r1, #0
10010a30:	1c0c      	adds	r4, r1, #0
10010a32:	4798      	blx	r3
10010a34:	2800      	cmp	r0, #0
10010a36:	d009      	beq.n	10010a4c <at_ble_read_authorize_reply.part.1+0x24>
10010a38:	6882      	ldr	r2, [r0, #8]
10010a3a:	2a00      	cmp	r2, #0
10010a3c:	d006      	beq.n	10010a4c <at_ble_read_authorize_reply.part.1+0x24>
10010a3e:	8883      	ldrh	r3, [r0, #4]
10010a40:	1c29      	adds	r1, r5, #0
10010a42:	9200      	str	r2, [sp, #0]
10010a44:	1c20      	adds	r0, r4, #0
10010a46:	2200      	movs	r2, #0
10010a48:	4c02      	ldr	r4, [pc, #8]	; (10010a54 <at_ble_read_authorize_reply.part.1+0x2c>)
10010a4a:	47a0      	blx	r4
10010a4c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
10010a4e:	46c0      	nop			; (mov r8, r8)
10010a50:	100107c1 	.word	0x100107c1
10010a54:	10012721 	.word	0x10012721

10010a58 <internal_at_ble_service_define>:
10010a58:	b5f0      	push	{r4, r5, r6, r7, lr}
10010a5a:	b08b      	sub	sp, #44	; 0x2c
10010a5c:	9306      	str	r3, [sp, #24]
10010a5e:	ab10      	add	r3, sp, #64	; 0x40
10010a60:	9202      	str	r2, [sp, #8]
10010a62:	cb04      	ldmia	r3!, {r2}
10010a64:	1c05      	adds	r5, r0, #0
10010a66:	881b      	ldrh	r3, [r3, #0]
10010a68:	9105      	str	r1, [sp, #20]
10010a6a:	9303      	str	r3, [sp, #12]
10010a6c:	ab12      	add	r3, sp, #72	; 0x48
10010a6e:	781b      	ldrb	r3, [r3, #0]
10010a70:	20cf      	movs	r0, #207	; 0xcf
10010a72:	9304      	str	r3, [sp, #16]
10010a74:	2d00      	cmp	r5, #0
10010a76:	d100      	bne.n	10010a7a <internal_at_ble_service_define+0x22>
10010a78:	e1ca      	b.n	10010e10 <internal_at_ble_service_define+0x3b8>
10010a7a:	2900      	cmp	r1, #0
10010a7c:	d100      	bne.n	10010a80 <internal_at_ble_service_define+0x28>
10010a7e:	e1c7      	b.n	10010e10 <internal_at_ble_service_define+0x3b8>
10010a80:	2a00      	cmp	r2, #0
10010a82:	d100      	bne.n	10010a86 <internal_at_ble_service_define+0x2e>
10010a84:	e1c4      	b.n	10010e10 <internal_at_ble_service_define+0x3b8>
10010a86:	9b03      	ldr	r3, [sp, #12]
10010a88:	2b00      	cmp	r3, #0
10010a8a:	d100      	bne.n	10010a8e <internal_at_ble_service_define+0x36>
10010a8c:	e1c0      	b.n	10010e10 <internal_at_ble_service_define+0x3b8>
10010a8e:	4bc9      	ldr	r3, [pc, #804]	; (10010db4 <internal_at_ble_service_define+0x35c>)
10010a90:	3004      	adds	r0, #4
10010a92:	681e      	ldr	r6, [r3, #0]
10010a94:	2e00      	cmp	r6, #0
10010a96:	d100      	bne.n	10010a9a <internal_at_ble_service_define+0x42>
10010a98:	e1ba      	b.n	10010e10 <internal_at_ble_service_define+0x3b8>
10010a9a:	2400      	movs	r4, #0
10010a9c:	4bc6      	ldr	r3, [pc, #792]	; (10010db8 <internal_at_ble_service_define+0x360>)
10010a9e:	8034      	strh	r4, [r6, #0]
10010aa0:	881b      	ldrh	r3, [r3, #0]
10010aa2:	1db7      	adds	r7, r6, #6
10010aa4:	1c21      	adds	r1, r4, #0
10010aa6:	2210      	movs	r2, #16
10010aa8:	8073      	strh	r3, [r6, #2]
10010aaa:	1c38      	adds	r0, r7, #0
10010aac:	4bc3      	ldr	r3, [pc, #780]	; (10010dbc <internal_at_ble_service_define+0x364>)
10010aae:	4798      	blx	r3
10010ab0:	7828      	ldrb	r0, [r5, #0]
10010ab2:	4bc3      	ldr	r3, [pc, #780]	; (10010dc0 <internal_at_ble_service_define+0x368>)
10010ab4:	4798      	blx	r3
10010ab6:	1c69      	adds	r1, r5, #1
10010ab8:	1c02      	adds	r2, r0, #0
10010aba:	4bc2      	ldr	r3, [pc, #776]	; (10010dc4 <internal_at_ble_service_define+0x36c>)
10010abc:	1c38      	adds	r0, r7, #0
10010abe:	4798      	blx	r3
10010ac0:	2204      	movs	r2, #4
10010ac2:	782b      	ldrb	r3, [r5, #0]
10010ac4:	9d02      	ldr	r5, [sp, #8]
10010ac6:	011b      	lsls	r3, r3, #4
10010ac8:	4313      	orrs	r3, r2
10010aca:	9a04      	ldr	r2, [sp, #16]
10010acc:	7174      	strb	r4, [r6, #5]
10010ace:	0192      	lsls	r2, r2, #6
10010ad0:	4313      	orrs	r3, r2
10010ad2:	7133      	strb	r3, [r6, #4]
10010ad4:	2316      	movs	r3, #22
10010ad6:	9a06      	ldr	r2, [sp, #24]
10010ad8:	3512      	adds	r5, #18
10010ada:	4353      	muls	r3, r2
10010adc:	9a02      	ldr	r2, [sp, #8]
10010ade:	3312      	adds	r3, #18
10010ae0:	18d7      	adds	r7, r2, r3
10010ae2:	42bd      	cmp	r5, r7
10010ae4:	d00f      	beq.n	10010b06 <internal_at_ble_service_define+0xae>
10010ae6:	4bb8      	ldr	r3, [pc, #736]	; (10010dc8 <internal_at_ble_service_define+0x370>)
10010ae8:	8829      	ldrh	r1, [r5, #0]
10010aea:	9300      	str	r3, [sp, #0]
10010aec:	230e      	movs	r3, #14
10010aee:	aa06      	add	r2, sp, #24
10010af0:	189b      	adds	r3, r3, r2
10010af2:	9301      	str	r3, [sp, #4]
10010af4:	4cb5      	ldr	r4, [pc, #724]	; (10010dcc <internal_at_ble_service_define+0x374>)
10010af6:	1c30      	adds	r0, r6, #0
10010af8:	2201      	movs	r2, #1
10010afa:	2302      	movs	r3, #2
10010afc:	47a0      	blx	r4
10010afe:	3516      	adds	r5, #22
10010b00:	1e04      	subs	r4, r0, #0
10010b02:	d0ee      	beq.n	10010ae2 <internal_at_ble_service_define+0x8a>
10010b04:	e183      	b.n	10010e0e <internal_at_ble_service_define+0x3b6>
10010b06:	9f10      	ldr	r7, [sp, #64]	; 0x40
10010b08:	2300      	movs	r3, #0
10010b0a:	3714      	adds	r7, #20
10010b0c:	1c3d      	adds	r5, r7, #0
10010b0e:	9302      	str	r3, [sp, #8]
10010b10:	9b02      	ldr	r3, [sp, #8]
10010b12:	9a03      	ldr	r2, [sp, #12]
10010b14:	4293      	cmp	r3, r2
10010b16:	db00      	blt.n	10010b1a <internal_at_ble_service_define+0xc2>
10010b18:	e0bf      	b.n	10010c9a <internal_at_ble_service_define+0x242>
10010b1a:	4bad      	ldr	r3, [pc, #692]	; (10010dd0 <internal_at_ble_service_define+0x378>)
10010b1c:	aa06      	add	r2, sp, #24
10010b1e:	9300      	str	r3, [sp, #0]
10010b20:	230e      	movs	r3, #14
10010b22:	189b      	adds	r3, r3, r2
10010b24:	9301      	str	r3, [sp, #4]
10010b26:	4ca9      	ldr	r4, [pc, #676]	; (10010dcc <internal_at_ble_service_define+0x374>)
10010b28:	1c30      	adds	r0, r6, #0
10010b2a:	2104      	movs	r1, #4
10010b2c:	2201      	movs	r2, #1
10010b2e:	2302      	movs	r3, #2
10010b30:	47a0      	blx	r4
10010b32:	1e04      	subs	r4, r0, #0
10010b34:	d000      	beq.n	10010b38 <internal_at_ble_service_define+0xe0>
10010b36:	e16a      	b.n	10010e0e <internal_at_ble_service_define+0x3b6>
10010b38:	1c2b      	adds	r3, r5, #0
10010b3a:	3b12      	subs	r3, #18
10010b3c:	7b2c      	ldrb	r4, [r5, #12]
10010b3e:	781b      	ldrb	r3, [r3, #0]
10010b40:	1c21      	adds	r1, r4, #0
10010b42:	1c1a      	adds	r2, r3, #0
10010b44:	9304      	str	r3, [sp, #16]
10010b46:	8828      	ldrh	r0, [r5, #0]
10010b48:	4ba2      	ldr	r3, [pc, #648]	; (10010dd4 <internal_at_ble_service_define+0x37c>)
10010b4a:	4798      	blx	r3
10010b4c:	2303      	movs	r3, #3
10010b4e:	4023      	ands	r3, r4
10010b50:	3b03      	subs	r3, #3
10010b52:	4259      	negs	r1, r3
10010b54:	4159      	adcs	r1, r3
10010b56:	2301      	movs	r3, #1
10010b58:	08a4      	lsrs	r4, r4, #2
10010b5a:	401c      	ands	r4, r3
10010b5c:	430c      	orrs	r4, r1
10010b5e:	896b      	ldrh	r3, [r5, #10]
10010b60:	03e4      	lsls	r4, r4, #15
10010b62:	431c      	orrs	r4, r3
10010b64:	9007      	str	r0, [sp, #28]
10010b66:	4b96      	ldr	r3, [pc, #600]	; (10010dc0 <internal_at_ble_service_define+0x368>)
10010b68:	9804      	ldr	r0, [sp, #16]
10010b6a:	4798      	blx	r3
10010b6c:	1c2a      	adds	r2, r5, #0
10010b6e:	3a11      	subs	r2, #17
10010b70:	9200      	str	r2, [sp, #0]
10010b72:	3a03      	subs	r2, #3
10010b74:	1c03      	adds	r3, r0, #0
10010b76:	9201      	str	r2, [sp, #4]
10010b78:	1c21      	adds	r1, r4, #0
10010b7a:	1c30      	adds	r0, r6, #0
10010b7c:	4c93      	ldr	r4, [pc, #588]	; (10010dcc <internal_at_ble_service_define+0x374>)
10010b7e:	9a07      	ldr	r2, [sp, #28]
10010b80:	47a0      	blx	r4
10010b82:	1e04      	subs	r4, r0, #0
10010b84:	d000      	beq.n	10010b88 <internal_at_ble_service_define+0x130>
10010b86:	e142      	b.n	10010e0e <internal_at_ble_service_define+0x3b6>
10010b88:	22c0      	movs	r2, #192	; 0xc0
10010b8a:	882b      	ldrh	r3, [r5, #0]
10010b8c:	0052      	lsls	r2, r2, #1
10010b8e:	4213      	tst	r3, r2
10010b90:	d104      	bne.n	10010b9c <internal_at_ble_service_define+0x144>
10010b92:	8aab      	ldrh	r3, [r5, #20]
10010b94:	9304      	str	r3, [sp, #16]
10010b96:	2b00      	cmp	r3, #0
10010b98:	d116      	bne.n	10010bc8 <internal_at_ble_service_define+0x170>
10010b9a:	e03a      	b.n	10010c12 <internal_at_ble_service_define+0x1ba>
10010b9c:	2201      	movs	r2, #1
10010b9e:	09d9      	lsrs	r1, r3, #7
10010ba0:	4011      	ands	r1, r2
10010ba2:	05db      	lsls	r3, r3, #23
10010ba4:	d501      	bpl.n	10010baa <internal_at_ble_service_define+0x152>
10010ba6:	2302      	movs	r3, #2
10010ba8:	4319      	orrs	r1, r3
10010baa:	4b8b      	ldr	r3, [pc, #556]	; (10010dd8 <internal_at_ble_service_define+0x380>)
10010bac:	aa06      	add	r2, sp, #24
10010bae:	9300      	str	r3, [sp, #0]
10010bb0:	230e      	movs	r3, #14
10010bb2:	189b      	adds	r3, r3, r2
10010bb4:	9301      	str	r3, [sp, #4]
10010bb6:	4c85      	ldr	r4, [pc, #532]	; (10010dcc <internal_at_ble_service_define+0x374>)
10010bb8:	0209      	lsls	r1, r1, #8
10010bba:	1c30      	adds	r0, r6, #0
10010bbc:	2201      	movs	r2, #1
10010bbe:	2302      	movs	r3, #2
10010bc0:	47a0      	blx	r4
10010bc2:	1e04      	subs	r4, r0, #0
10010bc4:	d0e5      	beq.n	10010b92 <internal_at_ble_service_define+0x13a>
10010bc6:	e122      	b.n	10010e0e <internal_at_ble_service_define+0x3b6>
10010bc8:	2380      	movs	r3, #128	; 0x80
10010bca:	882a      	ldrh	r2, [r5, #0]
10010bcc:	7f2c      	ldrb	r4, [r5, #28]
10010bce:	005b      	lsls	r3, r3, #1
10010bd0:	401a      	ands	r2, r3
10010bd2:	1c20      	adds	r0, r4, #0
10010bd4:	2101      	movs	r1, #1
10010bd6:	2a00      	cmp	r2, #0
10010bd8:	d000      	beq.n	10010bdc <internal_at_ble_service_define+0x184>
10010bda:	1c0a      	adds	r2, r1, #0
10010bdc:	4b7f      	ldr	r3, [pc, #508]	; (10010ddc <internal_at_ble_service_define+0x384>)
10010bde:	4798      	blx	r3
10010be0:	2203      	movs	r2, #3
10010be2:	4022      	ands	r2, r4
10010be4:	3a03      	subs	r2, #3
10010be6:	4251      	negs	r1, r2
10010be8:	4151      	adcs	r1, r2
10010bea:	4b7d      	ldr	r3, [pc, #500]	; (10010de0 <internal_at_ble_service_define+0x388>)
10010bec:	1c0a      	adds	r2, r1, #0
10010bee:	9300      	str	r3, [sp, #0]
10010bf0:	1c2b      	adds	r3, r5, #0
10010bf2:	0764      	lsls	r4, r4, #29
10010bf4:	0fe4      	lsrs	r4, r4, #31
10010bf6:	4322      	orrs	r2, r4
10010bf8:	03d2      	lsls	r2, r2, #15
10010bfa:	4310      	orrs	r0, r2
10010bfc:	3320      	adds	r3, #32
10010bfe:	b282      	uxth	r2, r0
10010c00:	9301      	str	r3, [sp, #4]
10010c02:	4c72      	ldr	r4, [pc, #456]	; (10010dcc <internal_at_ble_service_define+0x374>)
10010c04:	1c30      	adds	r0, r6, #0
10010c06:	9904      	ldr	r1, [sp, #16]
10010c08:	2302      	movs	r3, #2
10010c0a:	47a0      	blx	r4
10010c0c:	1e04      	subs	r4, r0, #0
10010c0e:	d000      	beq.n	10010c12 <internal_at_ble_service_define+0x1ba>
10010c10:	e0fd      	b.n	10010e0e <internal_at_ble_service_define+0x3b6>
10010c12:	2101      	movs	r1, #1
10010c14:	882b      	ldrh	r3, [r5, #0]
10010c16:	420b      	tst	r3, r1
10010c18:	d011      	beq.n	10010c3e <internal_at_ble_service_define+0x1e6>
10010c1a:	7fa8      	ldrb	r0, [r5, #30]
10010c1c:	4b6f      	ldr	r3, [pc, #444]	; (10010ddc <internal_at_ble_service_define+0x384>)
10010c1e:	2200      	movs	r2, #0
10010c20:	4798      	blx	r3
10010c22:	4b70      	ldr	r3, [pc, #448]	; (10010de4 <internal_at_ble_service_define+0x38c>)
10010c24:	1c02      	adds	r2, r0, #0
10010c26:	9300      	str	r3, [sp, #0]
10010c28:	1c2b      	adds	r3, r5, #0
10010c2a:	3324      	adds	r3, #36	; 0x24
10010c2c:	9301      	str	r3, [sp, #4]
10010c2e:	4c67      	ldr	r4, [pc, #412]	; (10010dcc <internal_at_ble_service_define+0x374>)
10010c30:	1c30      	adds	r0, r6, #0
10010c32:	496d      	ldr	r1, [pc, #436]	; (10010de8 <internal_at_ble_service_define+0x390>)
10010c34:	2302      	movs	r3, #2
10010c36:	47a0      	blx	r4
10010c38:	1e04      	subs	r4, r0, #0
10010c3a:	d000      	beq.n	10010c3e <internal_at_ble_service_define+0x1e6>
10010c3c:	e0e7      	b.n	10010e0e <internal_at_ble_service_define+0x3b6>
10010c3e:	2330      	movs	r3, #48	; 0x30
10010c40:	882a      	ldrh	r2, [r5, #0]
10010c42:	421a      	tst	r2, r3
10010c44:	d012      	beq.n	10010c6c <internal_at_ble_service_define+0x214>
10010c46:	2101      	movs	r1, #1
10010c48:	7f68      	ldrb	r0, [r5, #29]
10010c4a:	1c0a      	adds	r2, r1, #0
10010c4c:	4b63      	ldr	r3, [pc, #396]	; (10010ddc <internal_at_ble_service_define+0x384>)
10010c4e:	4798      	blx	r3
10010c50:	4b66      	ldr	r3, [pc, #408]	; (10010dec <internal_at_ble_service_define+0x394>)
10010c52:	1c02      	adds	r2, r0, #0
10010c54:	9300      	str	r3, [sp, #0]
10010c56:	1c2b      	adds	r3, r5, #0
10010c58:	3322      	adds	r3, #34	; 0x22
10010c5a:	9301      	str	r3, [sp, #4]
10010c5c:	4c5b      	ldr	r4, [pc, #364]	; (10010dcc <internal_at_ble_service_define+0x374>)
10010c5e:	1c30      	adds	r0, r6, #0
10010c60:	4961      	ldr	r1, [pc, #388]	; (10010de8 <internal_at_ble_service_define+0x390>)
10010c62:	2302      	movs	r3, #2
10010c64:	47a0      	blx	r4
10010c66:	1e04      	subs	r4, r0, #0
10010c68:	d000      	beq.n	10010c6c <internal_at_ble_service_define+0x214>
10010c6a:	e0d0      	b.n	10010e0e <internal_at_ble_service_define+0x3b6>
10010c6c:	69ab      	ldr	r3, [r5, #24]
10010c6e:	2b00      	cmp	r3, #0
10010c70:	d00e      	beq.n	10010c90 <internal_at_ble_service_define+0x238>
10010c72:	4b5f      	ldr	r3, [pc, #380]	; (10010df0 <internal_at_ble_service_define+0x398>)
10010c74:	aa06      	add	r2, sp, #24
10010c76:	9300      	str	r3, [sp, #0]
10010c78:	230e      	movs	r3, #14
10010c7a:	189b      	adds	r3, r3, r2
10010c7c:	9301      	str	r3, [sp, #4]
10010c7e:	4c53      	ldr	r4, [pc, #332]	; (10010dcc <internal_at_ble_service_define+0x374>)
10010c80:	1c30      	adds	r0, r6, #0
10010c82:	2107      	movs	r1, #7
10010c84:	2201      	movs	r2, #1
10010c86:	2302      	movs	r3, #2
10010c88:	47a0      	blx	r4
10010c8a:	1e04      	subs	r4, r0, #0
10010c8c:	d000      	beq.n	10010c90 <internal_at_ble_service_define+0x238>
10010c8e:	e0be      	b.n	10010e0e <internal_at_ble_service_define+0x3b6>
10010c90:	9b02      	ldr	r3, [sp, #8]
10010c92:	353c      	adds	r5, #60	; 0x3c
10010c94:	3301      	adds	r3, #1
10010c96:	9302      	str	r3, [sp, #8]
10010c98:	e73a      	b.n	10010b10 <internal_at_ble_service_define+0xb8>
10010c9a:	1c30      	adds	r0, r6, #0
10010c9c:	4b55      	ldr	r3, [pc, #340]	; (10010df4 <internal_at_ble_service_define+0x39c>)
10010c9e:	4798      	blx	r3
10010ca0:	1e04      	subs	r4, r0, #0
10010ca2:	d000      	beq.n	10010ca6 <internal_at_ble_service_define+0x24e>
10010ca4:	e0b3      	b.n	10010e0e <internal_at_ble_service_define+0x3b6>
10010ca6:	8833      	ldrh	r3, [r6, #0]
10010ca8:	9a05      	ldr	r2, [sp, #20]
10010caa:	8013      	strh	r3, [r2, #0]
10010cac:	8836      	ldrh	r6, [r6, #0]
10010cae:	9b06      	ldr	r3, [sp, #24]
10010cb0:	9a03      	ldr	r2, [sp, #12]
10010cb2:	18f6      	adds	r6, r6, r3
10010cb4:	b2b3      	uxth	r3, r6
10010cb6:	9302      	str	r3, [sp, #8]
10010cb8:	233c      	movs	r3, #60	; 0x3c
10010cba:	4353      	muls	r3, r2
10010cbc:	9a10      	ldr	r2, [sp, #64]	; 0x40
10010cbe:	3314      	adds	r3, #20
10010cc0:	18d3      	adds	r3, r2, r3
10010cc2:	9304      	str	r3, [sp, #16]
10010cc4:	9b04      	ldr	r3, [sp, #16]
10010cc6:	429f      	cmp	r7, r3
10010cc8:	d100      	bne.n	10010ccc <internal_at_ble_service_define+0x274>
10010cca:	e0a0      	b.n	10010e0e <internal_at_ble_service_define+0x3b6>
10010ccc:	9b02      	ldr	r3, [sp, #8]
10010cce:	1c9d      	adds	r5, r3, #2
10010cd0:	1c3b      	adds	r3, r7, #0
10010cd2:	b2ad      	uxth	r5, r5
10010cd4:	3b14      	subs	r3, #20
10010cd6:	801d      	strh	r5, [r3, #0]
10010cd8:	9303      	str	r3, [sp, #12]
10010cda:	893b      	ldrh	r3, [r7, #8]
10010cdc:	2b00      	cmp	r3, #0
10010cde:	d108      	bne.n	10010cf2 <internal_at_ble_service_define+0x29a>
10010ce0:	23c0      	movs	r3, #192	; 0xc0
10010ce2:	883a      	ldrh	r2, [r7, #0]
10010ce4:	005b      	lsls	r3, r3, #1
10010ce6:	421a      	tst	r2, r3
10010ce8:	d026      	beq.n	10010d38 <internal_at_ble_service_define+0x2e0>
10010cea:	9e02      	ldr	r6, [sp, #8]
10010cec:	3603      	adds	r6, #3
10010cee:	b2b5      	uxth	r5, r6
10010cf0:	e022      	b.n	10010d38 <internal_at_ble_service_define+0x2e0>
10010cf2:	2103      	movs	r1, #3
10010cf4:	7b3b      	ldrb	r3, [r7, #12]
10010cf6:	4019      	ands	r1, r3
10010cf8:	3903      	subs	r1, #3
10010cfa:	424a      	negs	r2, r1
10010cfc:	414a      	adcs	r2, r1
10010cfe:	0759      	lsls	r1, r3, #29
10010d00:	0fc9      	lsrs	r1, r1, #31
10010d02:	4311      	orrs	r1, r2
10010d04:	03c9      	lsls	r1, r1, #15
10010d06:	897a      	ldrh	r2, [r7, #10]
10010d08:	2900      	cmp	r1, #0
10010d0a:	d007      	beq.n	10010d1c <internal_at_ble_service_define+0x2c4>
10010d0c:	6879      	ldr	r1, [r7, #4]
10010d0e:	2900      	cmp	r1, #0
10010d10:	d100      	bne.n	10010d14 <internal_at_ble_service_define+0x2bc>
10010d12:	4939      	ldr	r1, [pc, #228]	; (10010df8 <internal_at_ble_service_define+0x3a0>)
10010d14:	1c28      	adds	r0, r5, #0
10010d16:	4e39      	ldr	r6, [pc, #228]	; (10010dfc <internal_at_ble_service_define+0x3a4>)
10010d18:	47b0      	blx	r6
10010d1a:	e00a      	b.n	10010d32 <internal_at_ble_service_define+0x2da>
10010d1c:	1c28      	adds	r0, r5, #0
10010d1e:	4e37      	ldr	r6, [pc, #220]	; (10010dfc <internal_at_ble_service_define+0x3a4>)
10010d20:	47b0      	blx	r6
10010d22:	2800      	cmp	r0, #0
10010d24:	d172      	bne.n	10010e0c <internal_at_ble_service_define+0x3b4>
10010d26:	9b03      	ldr	r3, [sp, #12]
10010d28:	8939      	ldrh	r1, [r7, #8]
10010d2a:	8818      	ldrh	r0, [r3, #0]
10010d2c:	687a      	ldr	r2, [r7, #4]
10010d2e:	4b34      	ldr	r3, [pc, #208]	; (10010e00 <internal_at_ble_service_define+0x3a8>)
10010d30:	4798      	blx	r3
10010d32:	2800      	cmp	r0, #0
10010d34:	d0d4      	beq.n	10010ce0 <internal_at_ble_service_define+0x288>
10010d36:	e069      	b.n	10010e0c <internal_at_ble_service_define+0x3b4>
10010d38:	8abb      	ldrh	r3, [r7, #20]
10010d3a:	2b00      	cmp	r3, #0
10010d3c:	d00a      	beq.n	10010d54 <internal_at_ble_service_define+0x2fc>
10010d3e:	3501      	adds	r5, #1
10010d40:	b2ad      	uxth	r5, r5
10010d42:	843d      	strh	r5, [r7, #32]
10010d44:	7f39      	ldrb	r1, [r7, #28]
10010d46:	8afb      	ldrh	r3, [r7, #22]
10010d48:	1c28      	adds	r0, r5, #0
10010d4a:	693a      	ldr	r2, [r7, #16]
10010d4c:	4e2d      	ldr	r6, [pc, #180]	; (10010e04 <internal_at_ble_service_define+0x3ac>)
10010d4e:	47b0      	blx	r6
10010d50:	2800      	cmp	r0, #0
10010d52:	d15b      	bne.n	10010e0c <internal_at_ble_service_define+0x3b4>
10010d54:	883b      	ldrh	r3, [r7, #0]
10010d56:	07db      	lsls	r3, r3, #31
10010d58:	d50d      	bpl.n	10010d76 <internal_at_ble_service_define+0x31e>
10010d5a:	2200      	movs	r2, #0
10010d5c:	3501      	adds	r5, #1
10010d5e:	b2ad      	uxth	r5, r5
10010d60:	a909      	add	r1, sp, #36	; 0x24
10010d62:	84bd      	strh	r5, [r7, #36]	; 0x24
10010d64:	7fbb      	ldrb	r3, [r7, #30]
10010d66:	1c28      	adds	r0, r5, #0
10010d68:	700a      	strb	r2, [r1, #0]
10010d6a:	704a      	strb	r2, [r1, #1]
10010d6c:	4e23      	ldr	r6, [pc, #140]	; (10010dfc <internal_at_ble_service_define+0x3a4>)
10010d6e:	3202      	adds	r2, #2
10010d70:	47b0      	blx	r6
10010d72:	2800      	cmp	r0, #0
10010d74:	d14a      	bne.n	10010e0c <internal_at_ble_service_define+0x3b4>
10010d76:	2330      	movs	r3, #48	; 0x30
10010d78:	883a      	ldrh	r2, [r7, #0]
10010d7a:	421a      	tst	r2, r3
10010d7c:	d00d      	beq.n	10010d9a <internal_at_ble_service_define+0x342>
10010d7e:	2200      	movs	r2, #0
10010d80:	3501      	adds	r5, #1
10010d82:	b2ad      	uxth	r5, r5
10010d84:	a909      	add	r1, sp, #36	; 0x24
10010d86:	847d      	strh	r5, [r7, #34]	; 0x22
10010d88:	7f7b      	ldrb	r3, [r7, #29]
10010d8a:	1c28      	adds	r0, r5, #0
10010d8c:	700a      	strb	r2, [r1, #0]
10010d8e:	704a      	strb	r2, [r1, #1]
10010d90:	4e1a      	ldr	r6, [pc, #104]	; (10010dfc <internal_at_ble_service_define+0x3a4>)
10010d92:	3202      	adds	r2, #2
10010d94:	47b0      	blx	r6
10010d96:	2800      	cmp	r0, #0
10010d98:	d138      	bne.n	10010e0c <internal_at_ble_service_define+0x3b4>
10010d9a:	69b9      	ldr	r1, [r7, #24]
10010d9c:	2900      	cmp	r1, #0
10010d9e:	d006      	beq.n	10010dae <internal_at_ble_service_define+0x356>
10010da0:	3501      	adds	r5, #1
10010da2:	b2ad      	uxth	r5, r5
10010da4:	1c28      	adds	r0, r5, #0
10010da6:	4b18      	ldr	r3, [pc, #96]	; (10010e08 <internal_at_ble_service_define+0x3b0>)
10010da8:	4798      	blx	r3
10010daa:	2800      	cmp	r0, #0
10010dac:	d12e      	bne.n	10010e0c <internal_at_ble_service_define+0x3b4>
10010dae:	373c      	adds	r7, #60	; 0x3c
10010db0:	9502      	str	r5, [sp, #8]
10010db2:	e787      	b.n	10010cc4 <internal_at_ble_service_define+0x26c>
10010db4:	100199d8 	.word	0x100199d8
10010db8:	1001a8c0 	.word	0x1001a8c0
10010dbc:	10014b8d 	.word	0x10014b8d
10010dc0:	1001078d 	.word	0x1001078d
10010dc4:	10014b7b 	.word	0x10014b7b
10010dc8:	10017d2f 	.word	0x10017d2f
10010dcc:	10012c19 	.word	0x10012c19
10010dd0:	10017d31 	.word	0x10017d31
10010dd4:	10010859 	.word	0x10010859
10010dd8:	10017d2d 	.word	0x10017d2d
10010ddc:	10010801 	.word	0x10010801
10010de0:	10017d29 	.word	0x10017d29
10010de4:	10017d2b 	.word	0x10017d2b
10010de8:	00008002 	.word	0x00008002
10010dec:	10017d25 	.word	0x10017d25
10010df0:	10017d27 	.word	0x10017d27
10010df4:	10012b0d 	.word	0x10012b0d
10010df8:	100199c4 	.word	0x100199c4
10010dfc:	10010921 	.word	0x10010921
10010e00:	10012c89 	.word	0x10012c89
10010e04:	100109d9 	.word	0x100109d9
10010e08:	100108f5 	.word	0x100108f5
10010e0c:	1c04      	adds	r4, r0, #0
10010e0e:	1c20      	adds	r0, r4, #0
10010e10:	b00b      	add	sp, #44	; 0x2c
10010e12:	bdf0      	pop	{r4, r5, r6, r7, pc}

10010e14 <initi_gatt_server_module>:
10010e14:	2300      	movs	r3, #0
10010e16:	4a07      	ldr	r2, [pc, #28]	; (10010e34 <initi_gatt_server_module+0x20>)
10010e18:	7013      	strb	r3, [r2, #0]
10010e1a:	4a07      	ldr	r2, [pc, #28]	; (10010e38 <initi_gatt_server_module+0x24>)
10010e1c:	6013      	str	r3, [r2, #0]
10010e1e:	4a07      	ldr	r2, [pc, #28]	; (10010e3c <initi_gatt_server_module+0x28>)
10010e20:	6013      	str	r3, [r2, #0]
10010e22:	4a07      	ldr	r2, [pc, #28]	; (10010e40 <initi_gatt_server_module+0x2c>)
10010e24:	6013      	str	r3, [r2, #0]
10010e26:	4a07      	ldr	r2, [pc, #28]	; (10010e44 <initi_gatt_server_module+0x30>)
10010e28:	6013      	str	r3, [r2, #0]
10010e2a:	4a07      	ldr	r2, [pc, #28]	; (10010e48 <initi_gatt_server_module+0x34>)
10010e2c:	6013      	str	r3, [r2, #0]
10010e2e:	4a07      	ldr	r2, [pc, #28]	; (10010e4c <initi_gatt_server_module+0x38>)
10010e30:	6013      	str	r3, [r2, #0]
10010e32:	4770      	bx	lr
10010e34:	100199c4 	.word	0x100199c4
10010e38:	100199d4 	.word	0x100199d4
10010e3c:	100199d0 	.word	0x100199d0
10010e40:	100199c0 	.word	0x100199c0
10010e44:	100199cc 	.word	0x100199cc
10010e48:	100199c8 	.word	0x100199c8
10010e4c:	100199d8 	.word	0x100199d8

10010e50 <db_init>:
10010e50:	4b0a      	ldr	r3, [pc, #40]	; (10010e7c <db_init+0x2c>)
10010e52:	4a0b      	ldr	r2, [pc, #44]	; (10010e80 <db_init+0x30>)
10010e54:	6018      	str	r0, [r3, #0]
10010e56:	084b      	lsrs	r3, r1, #1
10010e58:	6013      	str	r3, [r2, #0]
10010e5a:	4a0a      	ldr	r2, [pc, #40]	; (10010e84 <db_init+0x34>)
10010e5c:	18c3      	adds	r3, r0, r3
10010e5e:	6013      	str	r3, [r2, #0]
10010e60:	4a09      	ldr	r2, [pc, #36]	; (10010e88 <db_init+0x38>)
10010e62:	1841      	adds	r1, r0, r1
10010e64:	6013      	str	r3, [r2, #0]
10010e66:	2303      	movs	r3, #3
10010e68:	2200      	movs	r2, #0
10010e6a:	3103      	adds	r1, #3
10010e6c:	4399      	bics	r1, r3
10010e6e:	4b07      	ldr	r3, [pc, #28]	; (10010e8c <db_init+0x3c>)
10010e70:	3904      	subs	r1, #4
10010e72:	6019      	str	r1, [r3, #0]
10010e74:	4b06      	ldr	r3, [pc, #24]	; (10010e90 <db_init+0x40>)
10010e76:	601a      	str	r2, [r3, #0]
10010e78:	4770      	bx	lr
10010e7a:	46c0      	nop			; (mov r8, r8)
10010e7c:	100199d8 	.word	0x100199d8
10010e80:	100199d4 	.word	0x100199d4
10010e84:	100199c0 	.word	0x100199c0
10010e88:	100199cc 	.word	0x100199cc
10010e8c:	100199c8 	.word	0x100199c8
10010e90:	100199d0 	.word	0x100199d0

10010e94 <at_ble_primary_service_define>:
10010e94:	b530      	push	{r4, r5, lr}
10010e96:	b085      	sub	sp, #20
10010e98:	ac08      	add	r4, sp, #32
10010e9a:	cc20      	ldmia	r4!, {r5}
10010e9c:	8824      	ldrh	r4, [r4, #0]
10010e9e:	9500      	str	r5, [sp, #0]
10010ea0:	9401      	str	r4, [sp, #4]
10010ea2:	2401      	movs	r4, #1
10010ea4:	9402      	str	r4, [sp, #8]
10010ea6:	4c02      	ldr	r4, [pc, #8]	; (10010eb0 <at_ble_primary_service_define+0x1c>)
10010ea8:	47a0      	blx	r4
10010eaa:	b005      	add	sp, #20
10010eac:	bd30      	pop	{r4, r5, pc}
10010eae:	46c0      	nop			; (mov r8, r8)
10010eb0:	10010a59 	.word	0x10010a59

10010eb4 <at_ble_characteristic_value_set>:
10010eb4:	b570      	push	{r4, r5, r6, lr}
10010eb6:	4b0b      	ldr	r3, [pc, #44]	; (10010ee4 <at_ble_characteristic_value_set+0x30>)
10010eb8:	1c06      	adds	r6, r0, #0
10010eba:	1c0c      	adds	r4, r1, #0
10010ebc:	1c15      	adds	r5, r2, #0
10010ebe:	4798      	blx	r3
10010ec0:	2800      	cmp	r0, #0
10010ec2:	d008      	beq.n	10010ed6 <at_ble_characteristic_value_set+0x22>
10010ec4:	6880      	ldr	r0, [r0, #8]
10010ec6:	2800      	cmp	r0, #0
10010ec8:	d005      	beq.n	10010ed6 <at_ble_characteristic_value_set+0x22>
10010eca:	1c21      	adds	r1, r4, #0
10010ecc:	1c2a      	adds	r2, r5, #0
10010ece:	4b06      	ldr	r3, [pc, #24]	; (10010ee8 <at_ble_characteristic_value_set+0x34>)
10010ed0:	4798      	blx	r3
10010ed2:	2000      	movs	r0, #0
10010ed4:	e004      	b.n	10010ee0 <at_ble_characteristic_value_set+0x2c>
10010ed6:	1c30      	adds	r0, r6, #0
10010ed8:	1c29      	adds	r1, r5, #0
10010eda:	1c22      	adds	r2, r4, #0
10010edc:	4b03      	ldr	r3, [pc, #12]	; (10010eec <at_ble_characteristic_value_set+0x38>)
10010ede:	4798      	blx	r3
10010ee0:	bd70      	pop	{r4, r5, r6, pc}
10010ee2:	46c0      	nop			; (mov r8, r8)
10010ee4:	100107c1 	.word	0x100107c1
10010ee8:	10014b7b 	.word	0x10014b7b
10010eec:	10012c89 	.word	0x10012c89

10010ef0 <at_ble_characteristic_value_get>:
10010ef0:	b570      	push	{r4, r5, r6, lr}
10010ef2:	4b0c      	ldr	r3, [pc, #48]	; (10010f24 <at_ble_characteristic_value_get+0x34>)
10010ef4:	1c06      	adds	r6, r0, #0
10010ef6:	1c0c      	adds	r4, r1, #0
10010ef8:	1c15      	adds	r5, r2, #0
10010efa:	4798      	blx	r3
10010efc:	2800      	cmp	r0, #0
10010efe:	d00b      	beq.n	10010f18 <at_ble_characteristic_value_get+0x28>
10010f00:	6883      	ldr	r3, [r0, #8]
10010f02:	2b00      	cmp	r3, #0
10010f04:	d008      	beq.n	10010f18 <at_ble_characteristic_value_get+0x28>
10010f06:	8883      	ldrh	r3, [r0, #4]
10010f08:	802b      	strh	r3, [r5, #0]
10010f0a:	8882      	ldrh	r2, [r0, #4]
10010f0c:	6881      	ldr	r1, [r0, #8]
10010f0e:	4b06      	ldr	r3, [pc, #24]	; (10010f28 <at_ble_characteristic_value_get+0x38>)
10010f10:	1c20      	adds	r0, r4, #0
10010f12:	4798      	blx	r3
10010f14:	2000      	movs	r0, #0
10010f16:	e004      	b.n	10010f22 <at_ble_characteristic_value_get+0x32>
10010f18:	1c30      	adds	r0, r6, #0
10010f1a:	1c29      	adds	r1, r5, #0
10010f1c:	1c22      	adds	r2, r4, #0
10010f1e:	4b03      	ldr	r3, [pc, #12]	; (10010f2c <at_ble_characteristic_value_get+0x3c>)
10010f20:	4798      	blx	r3
10010f22:	bd70      	pop	{r4, r5, r6, pc}
10010f24:	100107c1 	.word	0x100107c1
10010f28:	10014b7b 	.word	0x10014b7b
10010f2c:	10012d15 	.word	0x10012d15

10010f30 <at_ble_write_authorize_reply>:
10010f30:	b5f0      	push	{r4, r5, r6, r7, lr}
10010f32:	b085      	sub	sp, #20
10010f34:	1c04      	adds	r4, r0, #0
10010f36:	9101      	str	r1, [sp, #4]
10010f38:	2900      	cmp	r1, #0
10010f3a:	d128      	bne.n	10010f8e <at_ble_write_authorize_reply+0x5e>
10010f3c:	8843      	ldrh	r3, [r0, #2]
10010f3e:	1c27      	adds	r7, r4, #0
10010f40:	9300      	str	r3, [sp, #0]
10010f42:	1c18      	adds	r0, r3, #0
10010f44:	4b16      	ldr	r3, [pc, #88]	; (10010fa0 <at_ble_write_authorize_reply+0x70>)
10010f46:	4798      	blx	r3
10010f48:	3708      	adds	r7, #8
10010f4a:	2800      	cmp	r0, #0
10010f4c:	d009      	beq.n	10010f62 <at_ble_write_authorize_reply+0x32>
10010f4e:	6880      	ldr	r0, [r0, #8]
10010f50:	2800      	cmp	r0, #0
10010f52:	d006      	beq.n	10010f62 <at_ble_write_authorize_reply+0x32>
10010f54:	88a3      	ldrh	r3, [r4, #4]
10010f56:	88e2      	ldrh	r2, [r4, #6]
10010f58:	18c0      	adds	r0, r0, r3
10010f5a:	1c39      	adds	r1, r7, #0
10010f5c:	4b11      	ldr	r3, [pc, #68]	; (10010fa4 <at_ble_write_authorize_reply+0x74>)
10010f5e:	4798      	blx	r3
10010f60:	e015      	b.n	10010f8e <at_ble_write_authorize_reply+0x5e>
10010f62:	ab02      	add	r3, sp, #8
10010f64:	1d9e      	adds	r6, r3, #6
10010f66:	2300      	movs	r3, #0
10010f68:	4d0f      	ldr	r5, [pc, #60]	; (10010fa8 <at_ble_write_authorize_reply+0x78>)
10010f6a:	8033      	strh	r3, [r6, #0]
10010f6c:	6829      	ldr	r1, [r5, #0]
10010f6e:	1c32      	adds	r2, r6, #0
10010f70:	4b0e      	ldr	r3, [pc, #56]	; (10010fac <at_ble_write_authorize_reply+0x7c>)
10010f72:	9800      	ldr	r0, [sp, #0]
10010f74:	4798      	blx	r3
10010f76:	682b      	ldr	r3, [r5, #0]
10010f78:	88a0      	ldrh	r0, [r4, #4]
10010f7a:	88e2      	ldrh	r2, [r4, #6]
10010f7c:	1818      	adds	r0, r3, r0
10010f7e:	1c39      	adds	r1, r7, #0
10010f80:	4b08      	ldr	r3, [pc, #32]	; (10010fa4 <at_ble_write_authorize_reply+0x74>)
10010f82:	4798      	blx	r3
10010f84:	8860      	ldrh	r0, [r4, #2]
10010f86:	8832      	ldrh	r2, [r6, #0]
10010f88:	6829      	ldr	r1, [r5, #0]
10010f8a:	4b09      	ldr	r3, [pc, #36]	; (10010fb0 <at_ble_write_authorize_reply+0x80>)
10010f8c:	4798      	blx	r3
10010f8e:	8860      	ldrh	r0, [r4, #2]
10010f90:	8821      	ldrh	r1, [r4, #0]
10010f92:	9a01      	ldr	r2, [sp, #4]
10010f94:	4b07      	ldr	r3, [pc, #28]	; (10010fb4 <at_ble_write_authorize_reply+0x84>)
10010f96:	4798      	blx	r3
10010f98:	2000      	movs	r0, #0
10010f9a:	b005      	add	sp, #20
10010f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010f9e:	46c0      	nop			; (mov r8, r8)
10010fa0:	100107c1 	.word	0x100107c1
10010fa4:	10014b7b 	.word	0x10014b7b
10010fa8:	10017f34 	.word	0x10017f34
10010fac:	10010ef1 	.word	0x10010ef1
10010fb0:	10010eb5 	.word	0x10010eb5
10010fb4:	1001278d 	.word	0x1001278d

10010fb8 <gatts_handle_read_req>:
10010fb8:	b538      	push	{r3, r4, r5, lr}
10010fba:	1c0c      	adds	r4, r1, #0
10010fbc:	4b07      	ldr	r3, [pc, #28]	; (10010fdc <gatts_handle_read_req+0x24>)
10010fbe:	4798      	blx	r3
10010fc0:	8865      	ldrh	r5, [r4, #2]
10010fc2:	4b07      	ldr	r3, [pc, #28]	; (10010fe0 <gatts_handle_read_req+0x28>)
10010fc4:	1c28      	adds	r0, r5, #0
10010fc6:	4798      	blx	r3
10010fc8:	7883      	ldrb	r3, [r0, #2]
10010fca:	2026      	movs	r0, #38	; 0x26
10010fcc:	07db      	lsls	r3, r3, #31
10010fce:	d404      	bmi.n	10010fda <gatts_handle_read_req+0x22>
10010fd0:	8820      	ldrh	r0, [r4, #0]
10010fd2:	1c29      	adds	r1, r5, #0
10010fd4:	4b03      	ldr	r3, [pc, #12]	; (10010fe4 <gatts_handle_read_req+0x2c>)
10010fd6:	4798      	blx	r3
10010fd8:	203b      	movs	r0, #59	; 0x3b
10010fda:	bd38      	pop	{r3, r4, r5, pc}
10010fdc:	100126d1 	.word	0x100126d1
10010fe0:	100107c1 	.word	0x100107c1
10010fe4:	10010a29 	.word	0x10010a29

10010fe8 <gatts_handle_att_info_req>:
10010fe8:	b538      	push	{r3, r4, r5, lr}
10010fea:	1c0d      	adds	r5, r1, #0
10010fec:	4b0a      	ldr	r3, [pc, #40]	; (10011018 <gatts_handle_att_info_req+0x30>)
10010fee:	1c14      	adds	r4, r2, #0
10010ff0:	4798      	blx	r3
10010ff2:	882d      	ldrh	r5, [r5, #0]
10010ff4:	4b09      	ldr	r3, [pc, #36]	; (1001101c <gatts_handle_att_info_req+0x34>)
10010ff6:	1c28      	adds	r0, r5, #0
10010ff8:	4798      	blx	r3
10010ffa:	0a22      	lsrs	r2, r4, #8
10010ffc:	1c03      	adds	r3, r0, #0
10010ffe:	4c08      	ldr	r4, [pc, #32]	; (10011020 <gatts_handle_att_info_req+0x38>)
10011000:	b291      	uxth	r1, r2
10011002:	2800      	cmp	r0, #0
10011004:	d003      	beq.n	1001100e <gatts_handle_att_info_req+0x26>
10011006:	8882      	ldrh	r2, [r0, #4]
10011008:	2300      	movs	r3, #0
1001100a:	1c28      	adds	r0, r5, #0
1001100c:	e001      	b.n	10011012 <gatts_handle_att_info_req+0x2a>
1001100e:	1c28      	adds	r0, r5, #0
10011010:	2201      	movs	r2, #1
10011012:	47a0      	blx	r4
10011014:	203b      	movs	r0, #59	; 0x3b
10011016:	bd38      	pop	{r3, r4, r5, pc}
10011018:	10012715 	.word	0x10012715
1001101c:	100107c1 	.word	0x100107c1
10011020:	100127d1 	.word	0x100127d1

10011024 <gatts_handle_write_req>:
10011024:	b510      	push	{r4, lr}
10011026:	1c14      	adds	r4, r2, #0
10011028:	4b07      	ldr	r3, [pc, #28]	; (10011048 <gatts_handle_write_req+0x24>)
1001102a:	4798      	blx	r3
1001102c:	4b07      	ldr	r3, [pc, #28]	; (1001104c <gatts_handle_write_req+0x28>)
1001102e:	8860      	ldrh	r0, [r4, #2]
10011030:	4798      	blx	r3
10011032:	2302      	movs	r3, #2
10011034:	7881      	ldrb	r1, [r0, #2]
10011036:	2022      	movs	r0, #34	; 0x22
10011038:	4019      	ands	r1, r3
1001103a:	d103      	bne.n	10011044 <gatts_handle_write_req+0x20>
1001103c:	1c20      	adds	r0, r4, #0
1001103e:	4b04      	ldr	r3, [pc, #16]	; (10011050 <gatts_handle_write_req+0x2c>)
10011040:	4798      	blx	r3
10011042:	201f      	movs	r0, #31
10011044:	bd10      	pop	{r4, pc}
10011046:	46c0      	nop			; (mov r8, r8)
10011048:	100126dd 	.word	0x100126dd
1001104c:	100107c1 	.word	0x100107c1
10011050:	10010f31 	.word	0x10010f31

10011054 <at_ble_indication_send>:
10011054:	b5f0      	push	{r4, r5, r6, r7, lr}
10011056:	4d17      	ldr	r5, [pc, #92]	; (100110b4 <at_ble_indication_send+0x60>)
10011058:	4c17      	ldr	r4, [pc, #92]	; (100110b8 <at_ble_indication_send+0x64>)
1001105a:	682a      	ldr	r2, [r5, #0]
1001105c:	44a5      	add	sp, r4
1001105e:	23d2      	movs	r3, #210	; 0xd2
10011060:	2a04      	cmp	r2, #4
10011062:	d822      	bhi.n	100110aa <at_ble_indication_send+0x56>
10011064:	1c06      	adds	r6, r0, #0
10011066:	4b15      	ldr	r3, [pc, #84]	; (100110bc <at_ble_indication_send+0x68>)
10011068:	1c08      	adds	r0, r1, #0
1001106a:	1c0c      	adds	r4, r1, #0
1001106c:	4798      	blx	r3
1001106e:	2800      	cmp	r0, #0
10011070:	d008      	beq.n	10011084 <at_ble_indication_send+0x30>
10011072:	6883      	ldr	r3, [r0, #8]
10011074:	2b00      	cmp	r3, #0
10011076:	d005      	beq.n	10011084 <at_ble_indication_send+0x30>
10011078:	8882      	ldrh	r2, [r0, #4]
1001107a:	1c21      	adds	r1, r4, #0
1001107c:	9200      	str	r2, [sp, #0]
1001107e:	2013      	movs	r0, #19
10011080:	1c32      	adds	r2, r6, #0
10011082:	e00c      	b.n	1001109e <at_ble_indication_send+0x4a>
10011084:	270e      	movs	r7, #14
10011086:	446f      	add	r7, sp
10011088:	1c39      	adds	r1, r7, #0
1001108a:	aa04      	add	r2, sp, #16
1001108c:	4b0c      	ldr	r3, [pc, #48]	; (100110c0 <at_ble_indication_send+0x6c>)
1001108e:	1c20      	adds	r0, r4, #0
10011090:	4798      	blx	r3
10011092:	2013      	movs	r0, #19
10011094:	1c21      	adds	r1, r4, #0
10011096:	1c32      	adds	r2, r6, #0
10011098:	883b      	ldrh	r3, [r7, #0]
1001109a:	9300      	str	r3, [sp, #0]
1001109c:	ab04      	add	r3, sp, #16
1001109e:	4c09      	ldr	r4, [pc, #36]	; (100110c4 <at_ble_indication_send+0x70>)
100110a0:	47a0      	blx	r4
100110a2:	682b      	ldr	r3, [r5, #0]
100110a4:	3301      	adds	r3, #1
100110a6:	602b      	str	r3, [r5, #0]
100110a8:	2300      	movs	r3, #0
100110aa:	1c18      	adds	r0, r3, #0
100110ac:	2385      	movs	r3, #133	; 0x85
100110ae:	009b      	lsls	r3, r3, #2
100110b0:	449d      	add	sp, r3
100110b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
100110b4:	10019a64 	.word	0x10019a64
100110b8:	fffffdec 	.word	0xfffffdec
100110bc:	100107c1 	.word	0x100107c1
100110c0:	10012d15 	.word	0x10012d15
100110c4:	10012819 	.word	0x10012819

100110c8 <init_l2cc_task_module>:
100110c8:	220a      	movs	r2, #10
100110ca:	4b01      	ldr	r3, [pc, #4]	; (100110d0 <init_l2cc_task_module+0x8>)
100110cc:	701a      	strb	r2, [r3, #0]
100110ce:	4770      	bx	lr
100110d0:	10017f30 	.word	0x10017f30

100110d4 <l2cc_data_send_rsp_handler>:
100110d4:	b510      	push	{r4, lr}
100110d6:	7802      	ldrb	r2, [r0, #0]
100110d8:	700a      	strb	r2, [r1, #0]
100110da:	7883      	ldrb	r3, [r0, #2]
100110dc:	7844      	ldrb	r4, [r0, #1]
100110de:	021b      	lsls	r3, r3, #8
100110e0:	4323      	orrs	r3, r4
100110e2:	804b      	strh	r3, [r1, #2]
100110e4:	7903      	ldrb	r3, [r0, #4]
100110e6:	78c0      	ldrb	r0, [r0, #3]
100110e8:	021b      	lsls	r3, r3, #8
100110ea:	4303      	orrs	r3, r0
100110ec:	808b      	strh	r3, [r1, #4]
100110ee:	2a00      	cmp	r2, #0
100110f0:	d103      	bne.n	100110fa <l2cc_data_send_rsp_handler+0x26>
100110f2:	4a02      	ldr	r2, [pc, #8]	; (100110fc <l2cc_data_send_rsp_handler+0x28>)
100110f4:	7813      	ldrb	r3, [r2, #0]
100110f6:	3301      	adds	r3, #1
100110f8:	7013      	strb	r3, [r2, #0]
100110fa:	bd10      	pop	{r4, pc}
100110fc:	10017f30 	.word	0x10017f30

10011100 <l2cc_data_received_handler>:
10011100:	b508      	push	{r3, lr}
10011102:	1c03      	adds	r3, r0, #0
10011104:	7842      	ldrb	r2, [r0, #1]
10011106:	7800      	ldrb	r0, [r0, #0]
10011108:	0212      	lsls	r2, r2, #8
1001110a:	4302      	orrs	r2, r0
1001110c:	800a      	strh	r2, [r1, #0]
1001110e:	78da      	ldrb	r2, [r3, #3]
10011110:	7898      	ldrb	r0, [r3, #2]
10011112:	0212      	lsls	r2, r2, #8
10011114:	4302      	orrs	r2, r0
10011116:	804a      	strh	r2, [r1, #2]
10011118:	795a      	ldrb	r2, [r3, #5]
1001111a:	7918      	ldrb	r0, [r3, #4]
1001111c:	0212      	lsls	r2, r2, #8
1001111e:	4302      	orrs	r2, r0
10011120:	808a      	strh	r2, [r1, #4]
10011122:	1d88      	adds	r0, r1, #6
10011124:	1d99      	adds	r1, r3, #6
10011126:	4b01      	ldr	r3, [pc, #4]	; (1001112c <l2cc_data_received_handler+0x2c>)
10011128:	4798      	blx	r3
1001112a:	bd08      	pop	{r3, pc}
1001112c:	10014b7b 	.word	0x10014b7b

10011130 <at_ble_authenticate>:
10011130:	b5f0      	push	{r4, r5, r6, r7, lr}
10011132:	1c0c      	adds	r4, r1, #0
10011134:	211f      	movs	r1, #31
10011136:	b08b      	sub	sp, #44	; 0x2c
10011138:	9307      	str	r3, [sp, #28]
1001113a:	ab02      	add	r3, sp, #8
1001113c:	18c9      	adds	r1, r1, r3
1001113e:	230f      	movs	r3, #15
10011140:	700b      	strb	r3, [r1, #0]
10011142:	4b40      	ldr	r3, [pc, #256]	; (10011244 <at_ble_authenticate+0x114>)
10011144:	1c05      	adds	r5, r0, #0
10011146:	1c16      	adds	r6, r2, #0
10011148:	4798      	blx	r3
1001114a:	1c07      	adds	r7, r0, #0
1001114c:	2001      	movs	r0, #1
1001114e:	2f07      	cmp	r7, #7
10011150:	d875      	bhi.n	1001123e <at_ble_authenticate+0x10e>
10011152:	2c00      	cmp	r4, #0
10011154:	d113      	bne.n	1001117e <at_ble_authenticate+0x4e>
10011156:	2312      	movs	r3, #18
10011158:	435f      	muls	r7, r3
1001115a:	4b3b      	ldr	r3, [pc, #236]	; (10011248 <at_ble_authenticate+0x118>)
1001115c:	5cfb      	ldrb	r3, [r7, r3]
1001115e:	4283      	cmp	r3, r0
10011160:	d001      	beq.n	10011166 <at_ble_authenticate+0x36>
10011162:	20cf      	movs	r0, #207	; 0xcf
10011164:	e06b      	b.n	1001123e <at_ble_authenticate+0x10e>
10011166:	9504      	str	r5, [sp, #16]
10011168:	9400      	str	r4, [sp, #0]
1001116a:	9401      	str	r4, [sp, #4]
1001116c:	9402      	str	r4, [sp, #8]
1001116e:	9403      	str	r4, [sp, #12]
10011170:	1c20      	adds	r0, r4, #0
10011172:	1c21      	adds	r1, r4, #0
10011174:	1c22      	adds	r2, r4, #0
10011176:	1c23      	adds	r3, r4, #0
10011178:	4d34      	ldr	r5, [pc, #208]	; (1001124c <at_ble_authenticate+0x11c>)
1001117a:	47a8      	blx	r5
1001117c:	e05e      	b.n	1001123c <at_ble_authenticate+0x10c>
1001117e:	7922      	ldrb	r2, [r4, #4]
10011180:	2a06      	cmp	r2, #6
10011182:	d9ee      	bls.n	10011162 <at_ble_authenticate+0x32>
10011184:	7963      	ldrb	r3, [r4, #5]
10011186:	2b10      	cmp	r3, #16
10011188:	d8eb      	bhi.n	10011162 <at_ble_authenticate+0x32>
1001118a:	429a      	cmp	r2, r3
1001118c:	d8e9      	bhi.n	10011162 <at_ble_authenticate+0x32>
1001118e:	7a23      	ldrb	r3, [r4, #8]
10011190:	2b04      	cmp	r3, #4
10011192:	d8e6      	bhi.n	10011162 <at_ble_authenticate+0x32>
10011194:	79a3      	ldrb	r3, [r4, #6]
10011196:	2b07      	cmp	r3, #7
10011198:	d8e3      	bhi.n	10011162 <at_ble_authenticate+0x32>
1001119a:	79e3      	ldrb	r3, [r4, #7]
1001119c:	2b07      	cmp	r3, #7
1001119e:	d8e0      	bhi.n	10011162 <at_ble_authenticate+0x32>
100111a0:	78a3      	ldrb	r3, [r4, #2]
100111a2:	2b00      	cmp	r3, #0
100111a4:	d006      	beq.n	100111b4 <at_ble_authenticate+0x84>
100111a6:	2e00      	cmp	r6, #0
100111a8:	d0db      	beq.n	10011162 <at_ble_authenticate+0x32>
100111aa:	4829      	ldr	r0, [pc, #164]	; (10011250 <at_ble_authenticate+0x120>)
100111ac:	1c31      	adds	r1, r6, #0
100111ae:	221c      	movs	r2, #28
100111b0:	4b28      	ldr	r3, [pc, #160]	; (10011254 <at_ble_authenticate+0x124>)
100111b2:	4798      	blx	r3
100111b4:	9b07      	ldr	r3, [sp, #28]
100111b6:	2b00      	cmp	r3, #0
100111b8:	d005      	beq.n	100111c6 <at_ble_authenticate+0x96>
100111ba:	4827      	ldr	r0, [pc, #156]	; (10011258 <at_ble_authenticate+0x128>)
100111bc:	1c19      	adds	r1, r3, #0
100111be:	309a      	adds	r0, #154	; 0x9a
100111c0:	2210      	movs	r2, #16
100111c2:	4b24      	ldr	r3, [pc, #144]	; (10011254 <at_ble_authenticate+0x124>)
100111c4:	4798      	blx	r3
100111c6:	7863      	ldrb	r3, [r4, #1]
100111c8:	78a2      	ldrb	r2, [r4, #2]
100111ca:	009b      	lsls	r3, r3, #2
100111cc:	4313      	orrs	r3, r2
100111ce:	2212      	movs	r2, #18
100111d0:	4357      	muls	r7, r2
100111d2:	4a1d      	ldr	r2, [pc, #116]	; (10011248 <at_ble_authenticate+0x118>)
100111d4:	b2db      	uxtb	r3, r3
100111d6:	5cba      	ldrb	r2, [r7, r2]
100111d8:	2a00      	cmp	r2, #0
100111da:	d116      	bne.n	1001120a <at_ble_authenticate+0xda>
100111dc:	79a0      	ldrb	r0, [r4, #6]
100111de:	0742      	lsls	r2, r0, #29
100111e0:	d502      	bpl.n	100111e8 <at_ble_authenticate+0xb8>
100111e2:	9a07      	ldr	r2, [sp, #28]
100111e4:	2a00      	cmp	r2, #0
100111e6:	d0bc      	beq.n	10011162 <at_ble_authenticate+0x32>
100111e8:	07c2      	lsls	r2, r0, #31
100111ea:	d501      	bpl.n	100111f0 <at_ble_authenticate+0xc0>
100111ec:	2e00      	cmp	r6, #0
100111ee:	d0b8      	beq.n	10011162 <at_ble_authenticate+0x32>
100111f0:	7966      	ldrb	r6, [r4, #5]
100111f2:	7821      	ldrb	r1, [r4, #0]
100111f4:	78e2      	ldrb	r2, [r4, #3]
100111f6:	9600      	str	r6, [sp, #0]
100111f8:	9001      	str	r0, [sp, #4]
100111fa:	79e0      	ldrb	r0, [r4, #7]
100111fc:	9002      	str	r0, [sp, #8]
100111fe:	7a20      	ldrb	r0, [r4, #8]
10011200:	4c16      	ldr	r4, [pc, #88]	; (1001125c <at_ble_authenticate+0x12c>)
10011202:	9003      	str	r0, [sp, #12]
10011204:	1c28      	adds	r0, r5, #0
10011206:	47a0      	blx	r4
10011208:	e018      	b.n	1001123c <at_ble_authenticate+0x10c>
1001120a:	2a01      	cmp	r2, #1
1001120c:	d1a9      	bne.n	10011162 <at_ble_authenticate+0x32>
1001120e:	79e0      	ldrb	r0, [r4, #7]
10011210:	0742      	lsls	r2, r0, #29
10011212:	d502      	bpl.n	1001121a <at_ble_authenticate+0xea>
10011214:	9a07      	ldr	r2, [sp, #28]
10011216:	2a00      	cmp	r2, #0
10011218:	d0a3      	beq.n	10011162 <at_ble_authenticate+0x32>
1001121a:	07c2      	lsls	r2, r0, #31
1001121c:	d501      	bpl.n	10011222 <at_ble_authenticate+0xf2>
1001121e:	2e00      	cmp	r6, #0
10011220:	d09f      	beq.n	10011162 <at_ble_authenticate+0x32>
10011222:	7966      	ldrb	r6, [r4, #5]
10011224:	7821      	ldrb	r1, [r4, #0]
10011226:	78e2      	ldrb	r2, [r4, #3]
10011228:	9600      	str	r6, [sp, #0]
1001122a:	79a6      	ldrb	r6, [r4, #6]
1001122c:	9002      	str	r0, [sp, #8]
1001122e:	9601      	str	r6, [sp, #4]
10011230:	7a20      	ldrb	r0, [r4, #8]
10011232:	9504      	str	r5, [sp, #16]
10011234:	9003      	str	r0, [sp, #12]
10011236:	4c05      	ldr	r4, [pc, #20]	; (1001124c <at_ble_authenticate+0x11c>)
10011238:	2001      	movs	r0, #1
1001123a:	47a0      	blx	r4
1001123c:	2000      	movs	r0, #0
1001123e:	b00b      	add	sp, #44	; 0x2c
10011240:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011242:	46c0      	nop			; (mov r8, r8)
10011244:	10011631 	.word	0x10011631
10011248:	1001a8c2 	.word	0x1001a8c2
1001124c:	10011ba1 	.word	0x10011ba1
10011250:	1001a9d0 	.word	0x1001a9d0
10011254:	10014b7b 	.word	0x10014b7b
10011258:	1001a952 	.word	0x1001a952
1001125c:	10011981 	.word	0x10011981

10011260 <at_ble_pair_key_reply>:
10011260:	b5f0      	push	{r4, r5, r6, r7, lr}
10011262:	b085      	sub	sp, #20
10011264:	1c05      	adds	r5, r0, #0
10011266:	1c0c      	adds	r4, r1, #0
10011268:	1c16      	adds	r6, r2, #0
1001126a:	2100      	movs	r1, #0
1001126c:	4668      	mov	r0, sp
1001126e:	2210      	movs	r2, #16
10011270:	4b18      	ldr	r3, [pc, #96]	; (100112d4 <at_ble_pair_key_reply+0x74>)
10011272:	4798      	blx	r3
10011274:	2101      	movs	r1, #1
10011276:	2e00      	cmp	r6, #0
10011278:	d101      	bne.n	1001127e <at_ble_pair_key_reply+0x1e>
1001127a:	1c31      	adds	r1, r6, #0
1001127c:	466e      	mov	r6, sp
1001127e:	2c00      	cmp	r4, #0
10011280:	d116      	bne.n	100112b0 <at_ble_pair_key_reply+0x50>
10011282:	2701      	movs	r7, #1
10011284:	1c23      	adds	r3, r4, #0
10011286:	1d70      	adds	r0, r6, #5
10011288:	3e01      	subs	r6, #1
1001128a:	7802      	ldrb	r2, [r0, #0]
1001128c:	3801      	subs	r0, #1
1001128e:	3a30      	subs	r2, #48	; 0x30
10011290:	437a      	muls	r2, r7
10011292:	189b      	adds	r3, r3, r2
10011294:	220a      	movs	r2, #10
10011296:	4357      	muls	r7, r2
10011298:	42b0      	cmp	r0, r6
1001129a:	d1f6      	bne.n	1001128a <at_ble_pair_key_reply+0x2a>
1001129c:	466a      	mov	r2, sp
1001129e:	4668      	mov	r0, sp
100112a0:	7013      	strb	r3, [r2, #0]
100112a2:	0a1a      	lsrs	r2, r3, #8
100112a4:	7042      	strb	r2, [r0, #1]
100112a6:	0c1a      	lsrs	r2, r3, #16
100112a8:	0e1b      	lsrs	r3, r3, #24
100112aa:	7082      	strb	r2, [r0, #2]
100112ac:	70c3      	strb	r3, [r0, #3]
100112ae:	e009      	b.n	100112c4 <at_ble_pair_key_reply+0x64>
100112b0:	20cf      	movs	r0, #207	; 0xcf
100112b2:	2c01      	cmp	r4, #1
100112b4:	d10c      	bne.n	100112d0 <at_ble_pair_key_reply+0x70>
100112b6:	2300      	movs	r3, #0
100112b8:	4668      	mov	r0, sp
100112ba:	5cf2      	ldrb	r2, [r6, r3]
100112bc:	54c2      	strb	r2, [r0, r3]
100112be:	3301      	adds	r3, #1
100112c0:	2b10      	cmp	r3, #16
100112c2:	d1f9      	bne.n	100112b8 <at_ble_pair_key_reply+0x58>
100112c4:	2004      	movs	r0, #4
100112c6:	466a      	mov	r2, sp
100112c8:	1c2b      	adds	r3, r5, #0
100112ca:	4c03      	ldr	r4, [pc, #12]	; (100112d8 <at_ble_pair_key_reply+0x78>)
100112cc:	47a0      	blx	r4
100112ce:	2000      	movs	r0, #0
100112d0:	b005      	add	sp, #20
100112d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
100112d4:	10014b8d 	.word	0x10014b8d
100112d8:	10011c1d 	.word	0x10011c1d

100112dc <at_ble_send_slave_sec_request>:
100112dc:	b570      	push	{r4, r5, r6, lr}
100112de:	4b0c      	ldr	r3, [pc, #48]	; (10011310 <at_ble_send_slave_sec_request+0x34>)
100112e0:	1c0e      	adds	r6, r1, #0
100112e2:	2100      	movs	r1, #0
100112e4:	1c05      	adds	r5, r0, #0
100112e6:	1c14      	adds	r4, r2, #0
100112e8:	4798      	blx	r3
100112ea:	2301      	movs	r3, #1
100112ec:	2807      	cmp	r0, #7
100112ee:	d80d      	bhi.n	1001130c <at_ble_send_slave_sec_request+0x30>
100112f0:	3311      	adds	r3, #17
100112f2:	4358      	muls	r0, r3
100112f4:	4b07      	ldr	r3, [pc, #28]	; (10011314 <at_ble_send_slave_sec_request+0x38>)
100112f6:	5cc2      	ldrb	r2, [r0, r3]
100112f8:	23e0      	movs	r3, #224	; 0xe0
100112fa:	2a01      	cmp	r2, #1
100112fc:	d106      	bne.n	1001130c <at_ble_send_slave_sec_request+0x30>
100112fe:	00b1      	lsls	r1, r6, #2
10011300:	430c      	orrs	r4, r1
10011302:	4b05      	ldr	r3, [pc, #20]	; (10011318 <at_ble_send_slave_sec_request+0x3c>)
10011304:	b2e1      	uxtb	r1, r4
10011306:	1c28      	adds	r0, r5, #0
10011308:	4798      	blx	r3
1001130a:	2300      	movs	r3, #0
1001130c:	1c18      	adds	r0, r3, #0
1001130e:	bd70      	pop	{r4, r5, r6, pc}
10011310:	10011631 	.word	0x10011631
10011314:	1001a8c2 	.word	0x1001a8c2
10011318:	10011c6d 	.word	0x10011c6d

1001131c <at_ble_encryption_start>:
1001131c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001131e:	23cf      	movs	r3, #207	; 0xcf
10011320:	2900      	cmp	r1, #0
10011322:	d02b      	beq.n	1001137c <at_ble_encryption_start+0x60>
10011324:	2a05      	cmp	r2, #5
10011326:	d829      	bhi.n	1001137c <at_ble_encryption_start+0x60>
10011328:	2701      	movs	r7, #1
1001132a:	1c3d      	adds	r5, r7, #0
1001132c:	2433      	movs	r4, #51	; 0x33
1001132e:	4095      	lsls	r5, r2
10011330:	4225      	tst	r5, r4
10011332:	d023      	beq.n	1001137c <at_ble_encryption_start+0x60>
10011334:	7e8c      	ldrb	r4, [r1, #26]
10011336:	3c07      	subs	r4, #7
10011338:	2c09      	cmp	r4, #9
1001133a:	d81f      	bhi.n	1001137c <at_ble_encryption_start+0x60>
1001133c:	4b10      	ldr	r3, [pc, #64]	; (10011380 <at_ble_encryption_start+0x64>)
1001133e:	1c0c      	adds	r4, r1, #0
10011340:	2100      	movs	r1, #0
10011342:	1c15      	adds	r5, r2, #0
10011344:	1c06      	adds	r6, r0, #0
10011346:	4798      	blx	r3
10011348:	1c3b      	adds	r3, r7, #0
1001134a:	2807      	cmp	r0, #7
1001134c:	d816      	bhi.n	1001137c <at_ble_encryption_start+0x60>
1001134e:	2312      	movs	r3, #18
10011350:	4358      	muls	r0, r3
10011352:	4b0c      	ldr	r3, [pc, #48]	; (10011384 <at_ble_encryption_start+0x68>)
10011354:	5cc7      	ldrb	r7, [r0, r3]
10011356:	23e0      	movs	r3, #224	; 0xe0
10011358:	2f00      	cmp	r7, #0
1001135a:	d10f      	bne.n	1001137c <at_ble_encryption_start+0x60>
1001135c:	1c21      	adds	r1, r4, #0
1001135e:	221c      	movs	r2, #28
10011360:	4b09      	ldr	r3, [pc, #36]	; (10011388 <at_ble_encryption_start+0x6c>)
10011362:	480a      	ldr	r0, [pc, #40]	; (1001138c <at_ble_encryption_start+0x70>)
10011364:	4798      	blx	r3
10011366:	1c23      	adds	r3, r4, #0
10011368:	7ea1      	ldrb	r1, [r4, #26]
1001136a:	8a22      	ldrh	r2, [r4, #16]
1001136c:	3312      	adds	r3, #18
1001136e:	9100      	str	r1, [sp, #0]
10011370:	9501      	str	r5, [sp, #4]
10011372:	1c21      	adds	r1, r4, #0
10011374:	1c30      	adds	r0, r6, #0
10011376:	4c06      	ldr	r4, [pc, #24]	; (10011390 <at_ble_encryption_start+0x74>)
10011378:	47a0      	blx	r4
1001137a:	1c3b      	adds	r3, r7, #0
1001137c:	1c18      	adds	r0, r3, #0
1001137e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10011380:	10011631 	.word	0x10011631
10011384:	1001a8c2 	.word	0x1001a8c2
10011388:	10014b7b 	.word	0x10014b7b
1001138c:	1001a9d0 	.word	0x1001a9d0
10011390:	10011cad 	.word	0x10011cad

10011394 <at_ble_encryption_request_reply>:
10011394:	b573      	push	{r0, r1, r4, r5, r6, lr}
10011396:	24cf      	movs	r4, #207	; 0xcf
10011398:	2b00      	cmp	r3, #0
1001139a:	d011      	beq.n	100113c0 <at_ble_encryption_request_reply+0x2c>
1001139c:	2a00      	cmp	r2, #0
1001139e:	d00a      	beq.n	100113b6 <at_ble_encryption_request_reply+0x22>
100113a0:	2905      	cmp	r1, #5
100113a2:	d80d      	bhi.n	100113c0 <at_ble_encryption_request_reply+0x2c>
100113a4:	2501      	movs	r5, #1
100113a6:	2633      	movs	r6, #51	; 0x33
100113a8:	408d      	lsls	r5, r1
100113aa:	4235      	tst	r5, r6
100113ac:	d008      	beq.n	100113c0 <at_ble_encryption_request_reply+0x2c>
100113ae:	7e9d      	ldrb	r5, [r3, #26]
100113b0:	3d07      	subs	r5, #7
100113b2:	2d09      	cmp	r5, #9
100113b4:	d804      	bhi.n	100113c0 <at_ble_encryption_request_reply+0x2c>
100113b6:	7e9c      	ldrb	r4, [r3, #26]
100113b8:	9400      	str	r4, [sp, #0]
100113ba:	4c02      	ldr	r4, [pc, #8]	; (100113c4 <at_ble_encryption_request_reply+0x30>)
100113bc:	47a0      	blx	r4
100113be:	2400      	movs	r4, #0
100113c0:	1c20      	adds	r0, r4, #0
100113c2:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
100113c4:	10011d69 	.word	0x10011d69

100113c8 <rx_callback>:
100113c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100113ca:	8883      	ldrh	r3, [r0, #4]
100113cc:	1c01      	adds	r1, r0, #0
100113ce:	9301      	str	r3, [sp, #4]
100113d0:	88c5      	ldrh	r5, [r0, #6]
100113d2:	8806      	ldrh	r6, [r0, #0]
100113d4:	2d00      	cmp	r5, #0
100113d6:	d10f      	bne.n	100113f8 <rx_callback+0x30>
100113d8:	1c19      	adds	r1, r3, #0
100113da:	1c30      	adds	r0, r6, #0
100113dc:	4b19      	ldr	r3, [pc, #100]	; (10011444 <rx_callback+0x7c>)
100113de:	1c2a      	adds	r2, r5, #0
100113e0:	4798      	blx	r3
100113e2:	1e03      	subs	r3, r0, #0
100113e4:	d105      	bne.n	100113f2 <rx_callback+0x2a>
100113e6:	1c30      	adds	r0, r6, #0
100113e8:	9901      	ldr	r1, [sp, #4]
100113ea:	1c1a      	adds	r2, r3, #0
100113ec:	4c16      	ldr	r4, [pc, #88]	; (10011448 <rx_callback+0x80>)
100113ee:	47a0      	blx	r4
100113f0:	e027      	b.n	10011442 <rx_callback+0x7a>
100113f2:	4b16      	ldr	r3, [pc, #88]	; (1001144c <rx_callback+0x84>)
100113f4:	4798      	blx	r3
100113f6:	e024      	b.n	10011442 <rx_callback+0x7a>
100113f8:	4c15      	ldr	r4, [pc, #84]	; (10011450 <rx_callback+0x88>)
100113fa:	4a16      	ldr	r2, [pc, #88]	; (10011454 <rx_callback+0x8c>)
100113fc:	6823      	ldr	r3, [r4, #0]
100113fe:	6812      	ldr	r2, [r2, #0]
10011400:	18eb      	adds	r3, r5, r3
10011402:	4293      	cmp	r3, r2
10011404:	d901      	bls.n	1001140a <rx_callback+0x42>
10011406:	2300      	movs	r3, #0
10011408:	6023      	str	r3, [r4, #0]
1001140a:	4f13      	ldr	r7, [pc, #76]	; (10011458 <rx_callback+0x90>)
1001140c:	6822      	ldr	r2, [r4, #0]
1001140e:	683b      	ldr	r3, [r7, #0]
10011410:	3108      	adds	r1, #8
10011412:	1898      	adds	r0, r3, r2
10011414:	1c2a      	adds	r2, r5, #0
10011416:	4b11      	ldr	r3, [pc, #68]	; (1001145c <rx_callback+0x94>)
10011418:	4798      	blx	r3
1001141a:	683b      	ldr	r3, [r7, #0]
1001141c:	6822      	ldr	r2, [r4, #0]
1001141e:	1c30      	adds	r0, r6, #0
10011420:	189a      	adds	r2, r3, r2
10011422:	9901      	ldr	r1, [sp, #4]
10011424:	4b07      	ldr	r3, [pc, #28]	; (10011444 <rx_callback+0x7c>)
10011426:	4798      	blx	r3
10011428:	2800      	cmp	r0, #0
1001142a:	d1e2      	bne.n	100113f2 <rx_callback+0x2a>
1001142c:	6823      	ldr	r3, [r4, #0]
1001142e:	683a      	ldr	r2, [r7, #0]
10011430:	1c30      	adds	r0, r6, #0
10011432:	18d2      	adds	r2, r2, r3
10011434:	9901      	ldr	r1, [sp, #4]
10011436:	1c2b      	adds	r3, r5, #0
10011438:	4e03      	ldr	r6, [pc, #12]	; (10011448 <rx_callback+0x80>)
1001143a:	47b0      	blx	r6
1001143c:	6823      	ldr	r3, [r4, #0]
1001143e:	18ed      	adds	r5, r5, r3
10011440:	6025      	str	r5, [r4, #0]
10011442:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10011444:	1000fa5d 	.word	0x1000fa5d
10011448:	1000f9d5 	.word	0x1000f9d5
1001144c:	1000f37d 	.word	0x1000f37d
10011450:	1001aa2c 	.word	0x1001aa2c
10011454:	100199e0 	.word	0x100199e0
10011458:	100199dc 	.word	0x100199dc
1001145c:	10014b7b 	.word	0x10014b7b

10011460 <interface_send>:
10011460:	b508      	push	{r3, lr}
10011462:	4b02      	ldr	r3, [pc, #8]	; (1001146c <interface_send+0xc>)
10011464:	4798      	blx	r3
10011466:	2000      	movs	r0, #0
10011468:	bd08      	pop	{r3, pc}
1001146a:	46c0      	nop			; (mov r8, r8)
1001146c:	1000f075 	.word	0x1000f075

10011470 <interface_init>:
10011470:	2280      	movs	r2, #128	; 0x80
10011472:	b510      	push	{r4, lr}
10011474:	2100      	movs	r1, #0
10011476:	1c04      	adds	r4, r0, #0
10011478:	0092      	lsls	r2, r2, #2
1001147a:	4b08      	ldr	r3, [pc, #32]	; (1001149c <interface_init+0x2c>)
1001147c:	4808      	ldr	r0, [pc, #32]	; (100114a0 <interface_init+0x30>)
1001147e:	4798      	blx	r3
10011480:	2200      	movs	r2, #0
10011482:	4b08      	ldr	r3, [pc, #32]	; (100114a4 <interface_init+0x34>)
10011484:	601a      	str	r2, [r3, #0]
10011486:	4a08      	ldr	r2, [pc, #32]	; (100114a8 <interface_init+0x38>)
10011488:	4b08      	ldr	r3, [pc, #32]	; (100114ac <interface_init+0x3c>)
1001148a:	601a      	str	r2, [r3, #0]
1001148c:	4b08      	ldr	r3, [pc, #32]	; (100114b0 <interface_init+0x40>)
1001148e:	6922      	ldr	r2, [r4, #16]
10011490:	601a      	str	r2, [r3, #0]
10011492:	6962      	ldr	r2, [r4, #20]
10011494:	4b07      	ldr	r3, [pc, #28]	; (100114b4 <interface_init+0x44>)
10011496:	601a      	str	r2, [r3, #0]
10011498:	bd10      	pop	{r4, pc}
1001149a:	46c0      	nop			; (mov r8, r8)
1001149c:	10014b8d 	.word	0x10014b8d
100114a0:	1001ac30 	.word	0x1001ac30
100114a4:	1001aa2c 	.word	0x1001aa2c
100114a8:	1001aa30 	.word	0x1001aa30
100114ac:	10017f34 	.word	0x10017f34
100114b0:	100199dc 	.word	0x100199dc
100114b4:	100199e0 	.word	0x100199e0

100114b8 <platform_cmd_cmpl_signal>:
100114b8:	2201      	movs	r2, #1
100114ba:	4b01      	ldr	r3, [pc, #4]	; (100114c0 <platform_cmd_cmpl_signal+0x8>)
100114bc:	601a      	str	r2, [r3, #0]
100114be:	4770      	bx	lr
100114c0:	100199e4 	.word	0x100199e4

100114c4 <platform_cmd_cmpl_wait>:
100114c4:	b510      	push	{r4, lr}
100114c6:	1c04      	adds	r4, r0, #0
100114c8:	4b07      	ldr	r3, [pc, #28]	; (100114e8 <platform_cmd_cmpl_wait+0x24>)
100114ca:	681a      	ldr	r2, [r3, #0]
100114cc:	2a01      	cmp	r2, #1
100114ce:	d003      	beq.n	100114d8 <platform_cmd_cmpl_wait+0x14>
100114d0:	4b06      	ldr	r3, [pc, #24]	; (100114ec <platform_cmd_cmpl_wait+0x28>)
100114d2:	2000      	movs	r0, #0
100114d4:	4798      	blx	r3
100114d6:	e7f7      	b.n	100114c8 <platform_cmd_cmpl_wait+0x4>
100114d8:	6819      	ldr	r1, [r3, #0]
100114da:	2901      	cmp	r1, #1
100114dc:	d102      	bne.n	100114e4 <platform_cmd_cmpl_wait+0x20>
100114de:	2200      	movs	r2, #0
100114e0:	601a      	str	r2, [r3, #0]
100114e2:	e000      	b.n	100114e6 <platform_cmd_cmpl_wait+0x22>
100114e4:	7022      	strb	r2, [r4, #0]
100114e6:	bd10      	pop	{r4, pc}
100114e8:	100199e4 	.word	0x100199e4
100114ec:	1000f105 	.word	0x1000f105

100114f0 <start_timer>:
100114f0:	4770      	bx	lr

100114f2 <stop_timer>:
100114f2:	4770      	bx	lr

100114f4 <dbg_le_set_bd_addr_req_handler>:
100114f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100114f6:	466b      	mov	r3, sp
100114f8:	1dde      	adds	r6, r3, #7
100114fa:	2300      	movs	r3, #0
100114fc:	7033      	strb	r3, [r6, #0]
100114fe:	230f      	movs	r3, #15
10011500:	4c13      	ldr	r4, [pc, #76]	; (10011550 <dbg_le_set_bd_addr_req_handler+0x5c>)
10011502:	2703      	movs	r7, #3
10011504:	7023      	strb	r3, [r4, #0]
10011506:	2300      	movs	r3, #0
10011508:	70e3      	strb	r3, [r4, #3]
1001150a:	4b12      	ldr	r3, [pc, #72]	; (10011554 <dbg_le_set_bd_addr_req_handler+0x60>)
1001150c:	1c01      	adds	r1, r0, #0
1001150e:	881a      	ldrh	r2, [r3, #0]
10011510:	881b      	ldrh	r3, [r3, #0]
10011512:	7122      	strb	r2, [r4, #4]
10011514:	0a1b      	lsrs	r3, r3, #8
10011516:	2206      	movs	r2, #6
10011518:	7163      	strb	r3, [r4, #5]
1001151a:	480f      	ldr	r0, [pc, #60]	; (10011558 <dbg_le_set_bd_addr_req_handler+0x64>)
1001151c:	4b0f      	ldr	r3, [pc, #60]	; (1001155c <dbg_le_set_bd_addr_req_handler+0x68>)
1001151e:	7067      	strb	r7, [r4, #1]
10011520:	70a7      	strb	r7, [r4, #2]
10011522:	4798      	blx	r3
10011524:	4d0e      	ldr	r5, [pc, #56]	; (10011560 <dbg_le_set_bd_addr_req_handler+0x6c>)
10011526:	4b0f      	ldr	r3, [pc, #60]	; (10011564 <dbg_le_set_bd_addr_req_handler+0x70>)
10011528:	210e      	movs	r1, #14
1001152a:	802b      	strh	r3, [r5, #0]
1001152c:	2306      	movs	r3, #6
1001152e:	71a3      	strb	r3, [r4, #6]
10011530:	2300      	movs	r3, #0
10011532:	1c20      	adds	r0, r4, #0
10011534:	71e3      	strb	r3, [r4, #7]
10011536:	4b0c      	ldr	r3, [pc, #48]	; (10011568 <dbg_le_set_bd_addr_req_handler+0x74>)
10011538:	80af      	strh	r7, [r5, #4]
1001153a:	4798      	blx	r3
1001153c:	1c30      	adds	r0, r6, #0
1001153e:	4b0b      	ldr	r3, [pc, #44]	; (1001156c <dbg_le_set_bd_addr_req_handler+0x78>)
10011540:	4798      	blx	r3
10011542:	7833      	ldrb	r3, [r6, #0]
10011544:	20e2      	movs	r0, #226	; 0xe2
10011546:	2b00      	cmp	r3, #0
10011548:	d101      	bne.n	1001154e <dbg_le_set_bd_addr_req_handler+0x5a>
1001154a:	68ab      	ldr	r3, [r5, #8]
1001154c:	7818      	ldrb	r0, [r3, #0]
1001154e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10011550:	1001ac30 	.word	0x1001ac30
10011554:	1001a8c0 	.word	0x1001a8c0
10011558:	1001ac38 	.word	0x1001ac38
1001155c:	10014b7b 	.word	0x10014b7b
10011560:	1001a8b4 	.word	0x1001a8b4
10011564:	00000329 	.word	0x00000329
10011568:	10011461 	.word	0x10011461
1001156c:	100114c5 	.word	0x100114c5

10011570 <gapc_get_dev_info_cfm.constprop.1>:
10011570:	b538      	push	{r3, r4, r5, lr}
10011572:	230b      	movs	r3, #11
10011574:	4c27      	ldr	r4, [pc, #156]	; (10011614 <gapc_get_dev_info_cfm.constprop.1+0xa4>)
10011576:	7023      	strb	r3, [r4, #0]
10011578:	3303      	adds	r3, #3
1001157a:	7063      	strb	r3, [r4, #1]
1001157c:	3329      	adds	r3, #41	; 0x29
1001157e:	70a3      	strb	r3, [r4, #2]
10011580:	4b25      	ldr	r3, [pc, #148]	; (10011618 <gapc_get_dev_info_cfm.constprop.1+0xa8>)
10011582:	70e1      	strb	r1, [r4, #3]
10011584:	881a      	ldrh	r2, [r3, #0]
10011586:	881b      	ldrh	r3, [r3, #0]
10011588:	7122      	strb	r2, [r4, #4]
1001158a:	0a1b      	lsrs	r3, r3, #8
1001158c:	7163      	strb	r3, [r4, #5]
1001158e:	2300      	movs	r3, #0
10011590:	7220      	strb	r0, [r4, #8]
10011592:	7263      	strb	r3, [r4, #9]
10011594:	2801      	cmp	r0, #1
10011596:	d02b      	beq.n	100115f0 <gapc_get_dev_info_cfm.constprop.1+0x80>
10011598:	4298      	cmp	r0, r3
1001159a:	d01b      	beq.n	100115d4 <gapc_get_dev_info_cfm.constprop.1+0x64>
1001159c:	2802      	cmp	r0, #2
1001159e:	d12f      	bne.n	10011600 <gapc_get_dev_info_cfm.constprop.1+0x90>
100115a0:	4b1e      	ldr	r3, [pc, #120]	; (1001161c <gapc_get_dev_info_cfm.constprop.1+0xac>)
100115a2:	2112      	movs	r1, #18
100115a4:	1c1a      	adds	r2, r3, #0
100115a6:	32ce      	adds	r2, #206	; 0xce
100115a8:	8812      	ldrh	r2, [r2, #0]
100115aa:	72a2      	strb	r2, [r4, #10]
100115ac:	0a12      	lsrs	r2, r2, #8
100115ae:	72e2      	strb	r2, [r4, #11]
100115b0:	1c1a      	adds	r2, r3, #0
100115b2:	32d0      	adds	r2, #208	; 0xd0
100115b4:	8812      	ldrh	r2, [r2, #0]
100115b6:	7322      	strb	r2, [r4, #12]
100115b8:	0a12      	lsrs	r2, r2, #8
100115ba:	7362      	strb	r2, [r4, #13]
100115bc:	1c1a      	adds	r2, r3, #0
100115be:	32d2      	adds	r2, #210	; 0xd2
100115c0:	8812      	ldrh	r2, [r2, #0]
100115c2:	33d4      	adds	r3, #212	; 0xd4
100115c4:	73a2      	strb	r2, [r4, #14]
100115c6:	0a12      	lsrs	r2, r2, #8
100115c8:	73e2      	strb	r2, [r4, #15]
100115ca:	881b      	ldrh	r3, [r3, #0]
100115cc:	7423      	strb	r3, [r4, #16]
100115ce:	0a1b      	lsrs	r3, r3, #8
100115d0:	7463      	strb	r3, [r4, #17]
100115d2:	e016      	b.n	10011602 <gapc_get_dev_info_cfm.constprop.1+0x92>
100115d4:	4b11      	ldr	r3, [pc, #68]	; (1001161c <gapc_get_dev_info_cfm.constprop.1+0xac>)
100115d6:	4912      	ldr	r1, [pc, #72]	; (10011620 <gapc_get_dev_info_cfm.constprop.1+0xb0>)
100115d8:	33aa      	adds	r3, #170	; 0xaa
100115da:	881d      	ldrh	r5, [r3, #0]
100115dc:	4811      	ldr	r0, [pc, #68]	; (10011624 <gapc_get_dev_info_cfm.constprop.1+0xb4>)
100115de:	0a2b      	lsrs	r3, r5, #8
100115e0:	72a5      	strb	r5, [r4, #10]
100115e2:	72e3      	strb	r3, [r4, #11]
100115e4:	1c2a      	adds	r2, r5, #0
100115e6:	4b10      	ldr	r3, [pc, #64]	; (10011628 <gapc_get_dev_info_cfm.constprop.1+0xb8>)
100115e8:	350c      	adds	r5, #12
100115ea:	4798      	blx	r3
100115ec:	b2a9      	uxth	r1, r5
100115ee:	e008      	b.n	10011602 <gapc_get_dev_info_cfm.constprop.1+0x92>
100115f0:	4b0a      	ldr	r3, [pc, #40]	; (1001161c <gapc_get_dev_info_cfm.constprop.1+0xac>)
100115f2:	210c      	movs	r1, #12
100115f4:	33cc      	adds	r3, #204	; 0xcc
100115f6:	881b      	ldrh	r3, [r3, #0]
100115f8:	72a3      	strb	r3, [r4, #10]
100115fa:	0a1b      	lsrs	r3, r3, #8
100115fc:	72e3      	strb	r3, [r4, #11]
100115fe:	e000      	b.n	10011602 <gapc_get_dev_info_cfm.constprop.1+0x92>
10011600:	210a      	movs	r1, #10
10011602:	1c0b      	adds	r3, r1, #0
10011604:	3b08      	subs	r3, #8
10011606:	71a3      	strb	r3, [r4, #6]
10011608:	121b      	asrs	r3, r3, #8
1001160a:	71e3      	strb	r3, [r4, #7]
1001160c:	1c20      	adds	r0, r4, #0
1001160e:	4b07      	ldr	r3, [pc, #28]	; (1001162c <gapc_get_dev_info_cfm.constprop.1+0xbc>)
10011610:	4798      	blx	r3
10011612:	bd38      	pop	{r3, r4, r5, pc}
10011614:	1001ac30 	.word	0x1001ac30
10011618:	1001a8c0 	.word	0x1001a8c0
1001161c:	1001a952 	.word	0x1001a952
10011620:	1001a9fe 	.word	0x1001a9fe
10011624:	1001ac3c 	.word	0x1001ac3c
10011628:	10014b7b 	.word	0x10014b7b
1001162c:	10011461 	.word	0x10011461

10011630 <check_ConnData_idx_role>:
10011630:	4b0c      	ldr	r3, [pc, #48]	; (10011664 <check_ConnData_idx_role+0x34>)
10011632:	b570      	push	{r4, r5, r6, lr}
10011634:	1c04      	adds	r4, r0, #0
10011636:	2008      	movs	r0, #8
10011638:	429c      	cmp	r4, r3
1001163a:	d011      	beq.n	10011660 <check_ConnData_idx_role+0x30>
1001163c:	2300      	movs	r3, #0
1001163e:	2212      	movs	r2, #18
10011640:	435a      	muls	r2, r3
10011642:	4d09      	ldr	r5, [pc, #36]	; (10011668 <check_ConnData_idx_role+0x38>)
10011644:	b2d8      	uxtb	r0, r3
10011646:	1956      	adds	r6, r2, r5
10011648:	8976      	ldrh	r6, [r6, #10]
1001164a:	42a6      	cmp	r6, r4
1001164c:	d104      	bne.n	10011658 <check_ConnData_idx_role+0x28>
1001164e:	2900      	cmp	r1, #0
10011650:	d006      	beq.n	10011660 <check_ConnData_idx_role+0x30>
10011652:	5d53      	ldrb	r3, [r2, r5]
10011654:	700b      	strb	r3, [r1, #0]
10011656:	e003      	b.n	10011660 <check_ConnData_idx_role+0x30>
10011658:	3301      	adds	r3, #1
1001165a:	2b08      	cmp	r3, #8
1001165c:	d1ef      	bne.n	1001163e <check_ConnData_idx_role+0xe>
1001165e:	1c18      	adds	r0, r3, #0
10011660:	bd70      	pop	{r4, r5, r6, pc}
10011662:	46c0      	nop			; (mov r8, r8)
10011664:	0000ffff 	.word	0x0000ffff
10011668:	1001a8c2 	.word	0x1001a8c2

1001166c <check_ConnData_emptyEntry>:
1001166c:	2300      	movs	r3, #0
1001166e:	2212      	movs	r2, #18
10011670:	435a      	muls	r2, r3
10011672:	4906      	ldr	r1, [pc, #24]	; (1001168c <check_ConnData_emptyEntry+0x20>)
10011674:	b2d8      	uxtb	r0, r3
10011676:	1852      	adds	r2, r2, r1
10011678:	8951      	ldrh	r1, [r2, #10]
1001167a:	4a05      	ldr	r2, [pc, #20]	; (10011690 <check_ConnData_emptyEntry+0x24>)
1001167c:	4291      	cmp	r1, r2
1001167e:	d003      	beq.n	10011688 <check_ConnData_emptyEntry+0x1c>
10011680:	3301      	adds	r3, #1
10011682:	2b08      	cmp	r3, #8
10011684:	d1f3      	bne.n	1001166e <check_ConnData_emptyEntry+0x2>
10011686:	1c18      	adds	r0, r3, #0
10011688:	4770      	bx	lr
1001168a:	46c0      	nop			; (mov r8, r8)
1001168c:	1001a8c2 	.word	0x1001a8c2
10011690:	0000ffff 	.word	0x0000ffff

10011694 <gapc_cmp_evt>:
10011694:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10011696:	780b      	ldrb	r3, [r1, #0]
10011698:	1c05      	adds	r5, r0, #0
1001169a:	1e58      	subs	r0, r3, #1
1001169c:	784e      	ldrb	r6, [r1, #1]
1001169e:	280f      	cmp	r0, #15
100116a0:	d85a      	bhi.n	10011758 <gapc_cmp_evt+0xc4>
100116a2:	1c14      	adds	r4, r2, #0
100116a4:	f001 fba4 	bl	10012df0 <__gnu_thumb1_case_uqi>
100116a8:	5858440a 	.word	0x5858440a
100116ac:	4b584444 	.word	0x4b584444
100116b0:	0825122d 	.word	0x0825122d
100116b4:	3e395858 	.word	0x3e395858
100116b8:	203b      	movs	r0, #59	; 0x3b
100116ba:	e04e      	b.n	1001175a <gapc_cmp_evt+0xc6>
100116bc:	203b      	movs	r0, #59	; 0x3b
100116be:	2e00      	cmp	r6, #0
100116c0:	d04b      	beq.n	1001175a <gapc_cmp_evt+0xc6>
100116c2:	0a2d      	lsrs	r5, r5, #8
100116c4:	8015      	strh	r5, [r2, #0]
100116c6:	7096      	strb	r6, [r2, #2]
100116c8:	3835      	subs	r0, #53	; 0x35
100116ca:	e046      	b.n	1001175a <gapc_cmp_evt+0xc6>
100116cc:	466b      	mov	r3, sp
100116ce:	1ddf      	adds	r7, r3, #7
100116d0:	2301      	movs	r3, #1
100116d2:	0a2d      	lsrs	r5, r5, #8
100116d4:	703b      	strb	r3, [r7, #0]
100116d6:	1c28      	adds	r0, r5, #0
100116d8:	1c39      	adds	r1, r7, #0
100116da:	4b20      	ldr	r3, [pc, #128]	; (1001175c <gapc_cmp_evt+0xc8>)
100116dc:	4798      	blx	r3
100116de:	2807      	cmp	r0, #7
100116e0:	d803      	bhi.n	100116ea <gapc_cmp_evt+0x56>
100116e2:	783b      	ldrb	r3, [r7, #0]
100116e4:	203b      	movs	r0, #59	; 0x3b
100116e6:	2b00      	cmp	r3, #0
100116e8:	d037      	beq.n	1001175a <gapc_cmp_evt+0xc6>
100116ea:	8065      	strh	r5, [r4, #2]
100116ec:	7126      	strb	r6, [r4, #4]
100116ee:	2009      	movs	r0, #9
100116f0:	e033      	b.n	1001175a <gapc_cmp_evt+0xc6>
100116f2:	203b      	movs	r0, #59	; 0x3b
100116f4:	2e00      	cmp	r6, #0
100116f6:	d030      	beq.n	1001175a <gapc_cmp_evt+0xc6>
100116f8:	0a2d      	lsrs	r5, r5, #8
100116fa:	8015      	strh	r5, [r2, #0]
100116fc:	7096      	strb	r6, [r2, #2]
100116fe:	382d      	subs	r0, #45	; 0x2d
10011700:	e02b      	b.n	1001175a <gapc_cmp_evt+0xc6>
10011702:	203b      	movs	r0, #59	; 0x3b
10011704:	2e00      	cmp	r6, #0
10011706:	d028      	beq.n	1001175a <gapc_cmp_evt+0xc6>
10011708:	2300      	movs	r3, #0
1001170a:	0a2d      	lsrs	r5, r5, #8
1001170c:	8015      	strh	r5, [r2, #0]
1001170e:	7096      	strb	r6, [r2, #2]
10011710:	8093      	strh	r3, [r2, #4]
10011712:	80d3      	strh	r3, [r2, #6]
10011714:	8113      	strh	r3, [r2, #8]
10011716:	3834      	subs	r0, #52	; 0x34
10011718:	e01f      	b.n	1001175a <gapc_cmp_evt+0xc6>
1001171a:	203b      	movs	r0, #59	; 0x3b
1001171c:	2e00      	cmp	r6, #0
1001171e:	d01c      	beq.n	1001175a <gapc_cmp_evt+0xc6>
10011720:	7216      	strb	r6, [r2, #8]
10011722:	e003      	b.n	1001172c <gapc_cmp_evt+0x98>
10011724:	203b      	movs	r0, #59	; 0x3b
10011726:	2e00      	cmp	r6, #0
10011728:	d017      	beq.n	1001175a <gapc_cmp_evt+0xc6>
1001172a:	7116      	strb	r6, [r2, #4]
1001172c:	3812      	subs	r0, #18
1001172e:	e014      	b.n	1001175a <gapc_cmp_evt+0xc6>
10011730:	203b      	movs	r0, #59	; 0x3b
10011732:	2e00      	cmp	r6, #0
10011734:	d011      	beq.n	1001175a <gapc_cmp_evt+0xc6>
10011736:	7093      	strb	r3, [r2, #2]
10011738:	70d6      	strb	r6, [r2, #3]
1001173a:	382a      	subs	r0, #42	; 0x2a
1001173c:	e00d      	b.n	1001175a <gapc_cmp_evt+0xc6>
1001173e:	203b      	movs	r0, #59	; 0x3b
10011740:	2e00      	cmp	r6, #0
10011742:	d00a      	beq.n	1001175a <gapc_cmp_evt+0xc6>
10011744:	0a2d      	lsrs	r5, r5, #8
10011746:	7016      	strb	r6, [r2, #0]
10011748:	8055      	strh	r5, [r2, #2]
1001174a:	1d10      	adds	r0, r2, #4
1001174c:	2100      	movs	r1, #0
1001174e:	2205      	movs	r2, #5
10011750:	4b03      	ldr	r3, [pc, #12]	; (10011760 <gapc_cmp_evt+0xcc>)
10011752:	4798      	blx	r3
10011754:	2012      	movs	r0, #18
10011756:	e000      	b.n	1001175a <gapc_cmp_evt+0xc6>
10011758:	2000      	movs	r0, #0
1001175a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1001175c:	10011631 	.word	0x10011631
10011760:	10014b8d 	.word	0x10014b8d

10011764 <gapc_connection_cfm_handler>:
10011764:	b5f0      	push	{r4, r5, r6, r7, lr}
10011766:	b085      	sub	sp, #20
10011768:	1c1d      	adds	r5, r3, #0
1001176a:	ab0a      	add	r3, sp, #40	; 0x28
1001176c:	781b      	ldrb	r3, [r3, #0]
1001176e:	9201      	str	r2, [sp, #4]
10011770:	9302      	str	r3, [sp, #8]
10011772:	ab0b      	add	r3, sp, #44	; 0x2c
10011774:	781b      	ldrb	r3, [r3, #0]
10011776:	1c07      	adds	r7, r0, #0
10011778:	9303      	str	r3, [sp, #12]
1001177a:	ab0c      	add	r3, sp, #48	; 0x30
1001177c:	881a      	ldrh	r2, [r3, #0]
1001177e:	2302      	movs	r3, #2
10011780:	1c0e      	adds	r6, r1, #0
10011782:	4c23      	ldr	r4, [pc, #140]	; (10011810 <gapc_connection_cfm_handler+0xac>)
10011784:	1c39      	adds	r1, r7, #0
10011786:	7023      	strb	r3, [r4, #0]
10011788:	330c      	adds	r3, #12
1001178a:	7063      	strb	r3, [r4, #1]
1001178c:	70a3      	strb	r3, [r4, #2]
1001178e:	4b21      	ldr	r3, [pc, #132]	; (10011814 <gapc_connection_cfm_handler+0xb0>)
10011790:	70e2      	strb	r2, [r4, #3]
10011792:	881a      	ldrh	r2, [r3, #0]
10011794:	881b      	ldrh	r3, [r3, #0]
10011796:	7122      	strb	r2, [r4, #4]
10011798:	0a1b      	lsrs	r3, r3, #8
1001179a:	4f1f      	ldr	r7, [pc, #124]	; (10011818 <gapc_connection_cfm_handler+0xb4>)
1001179c:	2210      	movs	r2, #16
1001179e:	481f      	ldr	r0, [pc, #124]	; (1001181c <gapc_connection_cfm_handler+0xb8>)
100117a0:	7163      	strb	r3, [r4, #5]
100117a2:	47b8      	blx	r7
100117a4:	0a33      	lsrs	r3, r6, #8
100117a6:	7626      	strb	r6, [r4, #24]
100117a8:	7663      	strb	r3, [r4, #25]
100117aa:	9901      	ldr	r1, [sp, #4]
100117ac:	0c33      	lsrs	r3, r6, #16
100117ae:	2210      	movs	r2, #16
100117b0:	0e36      	lsrs	r6, r6, #24
100117b2:	481b      	ldr	r0, [pc, #108]	; (10011820 <gapc_connection_cfm_handler+0xbc>)
100117b4:	76a3      	strb	r3, [r4, #26]
100117b6:	76e6      	strb	r6, [r4, #27]
100117b8:	47b8      	blx	r7
100117ba:	1c23      	adds	r3, r4, #0
100117bc:	332c      	adds	r3, #44	; 0x2c
100117be:	701d      	strb	r5, [r3, #0]
100117c0:	1c23      	adds	r3, r4, #0
100117c2:	0a2a      	lsrs	r2, r5, #8
100117c4:	332d      	adds	r3, #45	; 0x2d
100117c6:	701a      	strb	r2, [r3, #0]
100117c8:	1c23      	adds	r3, r4, #0
100117ca:	0c2a      	lsrs	r2, r5, #16
100117cc:	332e      	adds	r3, #46	; 0x2e
100117ce:	701a      	strb	r2, [r3, #0]
100117d0:	1c23      	adds	r3, r4, #0
100117d2:	0e2d      	lsrs	r5, r5, #24
100117d4:	332f      	adds	r3, #47	; 0x2f
100117d6:	466a      	mov	r2, sp
100117d8:	701d      	strb	r5, [r3, #0]
100117da:	1c23      	adds	r3, r4, #0
100117dc:	7a12      	ldrb	r2, [r2, #8]
100117de:	3330      	adds	r3, #48	; 0x30
100117e0:	701a      	strb	r2, [r3, #0]
100117e2:	1c23      	adds	r3, r4, #0
100117e4:	2500      	movs	r5, #0
100117e6:	3331      	adds	r3, #49	; 0x31
100117e8:	466a      	mov	r2, sp
100117ea:	701d      	strb	r5, [r3, #0]
100117ec:	1c23      	adds	r3, r4, #0
100117ee:	7b12      	ldrb	r2, [r2, #12]
100117f0:	3332      	adds	r3, #50	; 0x32
100117f2:	701a      	strb	r2, [r3, #0]
100117f4:	1c23      	adds	r3, r4, #0
100117f6:	3333      	adds	r3, #51	; 0x33
100117f8:	701d      	strb	r5, [r3, #0]
100117fa:	232c      	movs	r3, #44	; 0x2c
100117fc:	1c20      	adds	r0, r4, #0
100117fe:	71a3      	strb	r3, [r4, #6]
10011800:	2134      	movs	r1, #52	; 0x34
10011802:	4b08      	ldr	r3, [pc, #32]	; (10011824 <gapc_connection_cfm_handler+0xc0>)
10011804:	71e5      	strb	r5, [r4, #7]
10011806:	4798      	blx	r3
10011808:	1c28      	adds	r0, r5, #0
1001180a:	b005      	add	sp, #20
1001180c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001180e:	46c0      	nop			; (mov r8, r8)
10011810:	1001ac30 	.word	0x1001ac30
10011814:	1001a8c0 	.word	0x1001a8c0
10011818:	10014b7b 	.word	0x10014b7b
1001181c:	1001ac38 	.word	0x1001ac38
10011820:	1001ac4c 	.word	0x1001ac4c
10011824:	10011461 	.word	0x10011461

10011828 <gapc_con_req_ind>:
10011828:	b5f0      	push	{r4, r5, r6, r7, lr}
1001182a:	7845      	ldrb	r5, [r0, #1]
1001182c:	7803      	ldrb	r3, [r0, #0]
1001182e:	4c30      	ldr	r4, [pc, #192]	; (100118f0 <gapc_con_req_ind+0xc8>)
10011830:	022d      	lsls	r5, r5, #8
10011832:	431d      	orrs	r5, r3
10011834:	85a5      	strh	r5, [r4, #44]	; 0x2c
10011836:	78c3      	ldrb	r3, [r0, #3]
10011838:	7882      	ldrb	r2, [r0, #2]
1001183a:	b08b      	sub	sp, #44	; 0x2c
1001183c:	021b      	lsls	r3, r3, #8
1001183e:	431a      	orrs	r2, r3
10011840:	466b      	mov	r3, sp
10011842:	9205      	str	r2, [sp, #20]
10011844:	8a9b      	ldrh	r3, [r3, #20]
10011846:	2120      	movs	r1, #32
10011848:	85e3      	strh	r3, [r4, #46]	; 0x2e
1001184a:	7943      	ldrb	r3, [r0, #5]
1001184c:	7902      	ldrb	r2, [r0, #4]
1001184e:	021b      	lsls	r3, r3, #8
10011850:	431a      	orrs	r2, r3
10011852:	466b      	mov	r3, sp
10011854:	9206      	str	r2, [sp, #24]
10011856:	8b1b      	ldrh	r3, [r3, #24]
10011858:	1c06      	adds	r6, r0, #0
1001185a:	8623      	strh	r3, [r4, #48]	; 0x30
1001185c:	79c3      	ldrb	r3, [r0, #7]
1001185e:	7982      	ldrb	r2, [r0, #6]
10011860:	021b      	lsls	r3, r3, #8
10011862:	431a      	orrs	r2, r3
10011864:	466b      	mov	r3, sp
10011866:	9207      	str	r2, [sp, #28]
10011868:	466a      	mov	r2, sp
1001186a:	8b9b      	ldrh	r3, [r3, #28]
1001186c:	1852      	adds	r2, r2, r1
1001186e:	8663      	strh	r3, [r4, #50]	; 0x32
10011870:	7a43      	ldrb	r3, [r0, #9]
10011872:	1c01      	adds	r1, r0, #0
10011874:	9308      	str	r3, [sp, #32]
10011876:	1c23      	adds	r3, r4, #0
10011878:	7812      	ldrb	r2, [r2, #0]
1001187a:	3377      	adds	r3, #119	; 0x77
1001187c:	3478      	adds	r4, #120	; 0x78
1001187e:	701a      	strb	r2, [r3, #0]
10011880:	310a      	adds	r1, #10
10011882:	2206      	movs	r2, #6
10011884:	4b1b      	ldr	r3, [pc, #108]	; (100118f4 <gapc_con_req_ind+0xcc>)
10011886:	1c20      	adds	r0, r4, #0
10011888:	4798      	blx	r3
1001188a:	7c33      	ldrb	r3, [r6, #16]
1001188c:	9309      	str	r3, [sp, #36]	; 0x24
1001188e:	4b1a      	ldr	r3, [pc, #104]	; (100118f8 <gapc_con_req_ind+0xd0>)
10011890:	4798      	blx	r3
10011892:	4e1a      	ldr	r6, [pc, #104]	; (100118fc <gapc_con_req_ind+0xd4>)
10011894:	1e07      	subs	r7, r0, #0
10011896:	2f07      	cmp	r7, #7
10011898:	d81b      	bhi.n	100118d2 <gapc_con_req_ind+0xaa>
1001189a:	2312      	movs	r3, #18
1001189c:	4343      	muls	r3, r0
1001189e:	18f0      	adds	r0, r6, r3
100118a0:	8145      	strh	r5, [r0, #10]
100118a2:	4669      	mov	r1, sp
100118a4:	2524      	movs	r5, #36	; 0x24
100118a6:	1949      	adds	r1, r1, r5
100118a8:	7809      	ldrb	r1, [r1, #0]
100118aa:	2206      	movs	r2, #6
100118ac:	54f1      	strb	r1, [r6, r3]
100118ae:	2120      	movs	r1, #32
100118b0:	466b      	mov	r3, sp
100118b2:	185b      	adds	r3, r3, r1
100118b4:	781b      	ldrb	r3, [r3, #0]
100118b6:	1c21      	adds	r1, r4, #0
100118b8:	7043      	strb	r3, [r0, #1]
100118ba:	466b      	mov	r3, sp
100118bc:	8a9b      	ldrh	r3, [r3, #20]
100118be:	3002      	adds	r0, #2
100118c0:	8143      	strh	r3, [r0, #10]
100118c2:	466b      	mov	r3, sp
100118c4:	8b1b      	ldrh	r3, [r3, #24]
100118c6:	8183      	strh	r3, [r0, #12]
100118c8:	466b      	mov	r3, sp
100118ca:	8b9b      	ldrh	r3, [r3, #28]
100118cc:	81c3      	strh	r3, [r0, #14]
100118ce:	4b09      	ldr	r3, [pc, #36]	; (100118f4 <gapc_con_req_ind+0xcc>)
100118d0:	4798      	blx	r3
100118d2:	2112      	movs	r1, #18
100118d4:	2300      	movs	r3, #0
100118d6:	434f      	muls	r7, r1
100118d8:	9300      	str	r3, [sp, #0]
100118da:	9301      	str	r3, [sp, #4]
100118dc:	19f6      	adds	r6, r6, r7
100118de:	8971      	ldrh	r1, [r6, #10]
100118e0:	4a07      	ldr	r2, [pc, #28]	; (10011900 <gapc_con_req_ind+0xd8>)
100118e2:	9102      	str	r1, [sp, #8]
100118e4:	1c10      	adds	r0, r2, #0
100118e6:	1c19      	adds	r1, r3, #0
100118e8:	4c06      	ldr	r4, [pc, #24]	; (10011904 <gapc_con_req_ind+0xdc>)
100118ea:	47a0      	blx	r4
100118ec:	b00b      	add	sp, #44	; 0x2c
100118ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
100118f0:	1001a952 	.word	0x1001a952
100118f4:	10014b7b 	.word	0x10014b7b
100118f8:	1001166d 	.word	0x1001166d
100118fc:	1001a8c2 	.word	0x1001a8c2
10011900:	100199e8 	.word	0x100199e8
10011904:	10011765 	.word	0x10011765

10011908 <gapc_disconnect_cmd_handler>:
10011908:	2204      	movs	r2, #4
1001190a:	b510      	push	{r4, lr}
1001190c:	4b0c      	ldr	r3, [pc, #48]	; (10011940 <gapc_disconnect_cmd_handler+0x38>)
1001190e:	2400      	movs	r4, #0
10011910:	701a      	strb	r2, [r3, #0]
10011912:	320a      	adds	r2, #10
10011914:	705a      	strb	r2, [r3, #1]
10011916:	709a      	strb	r2, [r3, #2]
10011918:	4a0a      	ldr	r2, [pc, #40]	; (10011944 <gapc_disconnect_cmd_handler+0x3c>)
1001191a:	70d9      	strb	r1, [r3, #3]
1001191c:	8811      	ldrh	r1, [r2, #0]
1001191e:	8812      	ldrh	r2, [r2, #0]
10011920:	7119      	strb	r1, [r3, #4]
10011922:	0a12      	lsrs	r2, r2, #8
10011924:	715a      	strb	r2, [r3, #5]
10011926:	2201      	movs	r2, #1
10011928:	721a      	strb	r2, [r3, #8]
1001192a:	1892      	adds	r2, r2, r2
1001192c:	7258      	strb	r0, [r3, #9]
1001192e:	719a      	strb	r2, [r3, #6]
10011930:	71dc      	strb	r4, [r3, #7]
10011932:	1c18      	adds	r0, r3, #0
10011934:	210a      	movs	r1, #10
10011936:	4b04      	ldr	r3, [pc, #16]	; (10011948 <gapc_disconnect_cmd_handler+0x40>)
10011938:	4798      	blx	r3
1001193a:	1c20      	adds	r0, r4, #0
1001193c:	bd10      	pop	{r4, pc}
1001193e:	46c0      	nop			; (mov r8, r8)
10011940:	1001ac30 	.word	0x1001ac30
10011944:	1001a8c0 	.word	0x1001a8c0
10011948:	10011461 	.word	0x10011461

1001194c <gapc_disconnect_ind>:
1001194c:	1c02      	adds	r2, r0, #0
1001194e:	b508      	push	{r3, lr}
10011950:	7843      	ldrb	r3, [r0, #1]
10011952:	7800      	ldrb	r0, [r0, #0]
10011954:	021b      	lsls	r3, r3, #8
10011956:	4318      	orrs	r0, r3
10011958:	8008      	strh	r0, [r1, #0]
1001195a:	7893      	ldrb	r3, [r2, #2]
1001195c:	708b      	strb	r3, [r1, #2]
1001195e:	2100      	movs	r1, #0
10011960:	4b05      	ldr	r3, [pc, #20]	; (10011978 <gapc_disconnect_ind+0x2c>)
10011962:	4798      	blx	r3
10011964:	2807      	cmp	r0, #7
10011966:	d806      	bhi.n	10011976 <gapc_disconnect_ind+0x2a>
10011968:	2312      	movs	r3, #18
1001196a:	4358      	muls	r0, r3
1001196c:	4b03      	ldr	r3, [pc, #12]	; (1001197c <gapc_disconnect_ind+0x30>)
1001196e:	1818      	adds	r0, r3, r0
10011970:	2301      	movs	r3, #1
10011972:	425b      	negs	r3, r3
10011974:	8143      	strh	r3, [r0, #10]
10011976:	bd08      	pop	{r3, pc}
10011978:	10011631 	.word	0x10011631
1001197c:	1001a8c2 	.word	0x1001a8c2

10011980 <gapc_bond_cmd_handler>:
10011980:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10011982:	9300      	str	r3, [sp, #0]
10011984:	2312      	movs	r3, #18
10011986:	1c04      	adds	r4, r0, #0
10011988:	a808      	add	r0, sp, #32
1001198a:	7807      	ldrb	r7, [r0, #0]
1001198c:	a809      	add	r0, sp, #36	; 0x24
1001198e:	7806      	ldrb	r6, [r0, #0]
10011990:	a80a      	add	r0, sp, #40	; 0x28
10011992:	7805      	ldrb	r5, [r0, #0]
10011994:	a80b      	add	r0, sp, #44	; 0x2c
10011996:	7800      	ldrb	r0, [r0, #0]
10011998:	9001      	str	r0, [sp, #4]
1001199a:	4810      	ldr	r0, [pc, #64]	; (100119dc <gapc_bond_cmd_handler+0x5c>)
1001199c:	7003      	strb	r3, [r0, #0]
1001199e:	230e      	movs	r3, #14
100119a0:	70c4      	strb	r4, [r0, #3]
100119a2:	4c0f      	ldr	r4, [pc, #60]	; (100119e0 <gapc_bond_cmd_handler+0x60>)
100119a4:	7043      	strb	r3, [r0, #1]
100119a6:	7083      	strb	r3, [r0, #2]
100119a8:	8823      	ldrh	r3, [r4, #0]
100119aa:	8824      	ldrh	r4, [r4, #0]
100119ac:	7103      	strb	r3, [r0, #4]
100119ae:	466b      	mov	r3, sp
100119b0:	781b      	ldrb	r3, [r3, #0]
100119b2:	0a24      	lsrs	r4, r4, #8
100119b4:	72c3      	strb	r3, [r0, #11]
100119b6:	466b      	mov	r3, sp
100119b8:	791b      	ldrb	r3, [r3, #4]
100119ba:	7144      	strb	r4, [r0, #5]
100119bc:	73c3      	strb	r3, [r0, #15]
100119be:	2308      	movs	r3, #8
100119c0:	7183      	strb	r3, [r0, #6]
100119c2:	2300      	movs	r3, #0
100119c4:	240a      	movs	r4, #10
100119c6:	7241      	strb	r1, [r0, #9]
100119c8:	71c3      	strb	r3, [r0, #7]
100119ca:	2110      	movs	r1, #16
100119cc:	4b05      	ldr	r3, [pc, #20]	; (100119e4 <gapc_bond_cmd_handler+0x64>)
100119ce:	7307      	strb	r7, [r0, #12]
100119d0:	7346      	strb	r6, [r0, #13]
100119d2:	7385      	strb	r5, [r0, #14]
100119d4:	7204      	strb	r4, [r0, #8]
100119d6:	7282      	strb	r2, [r0, #10]
100119d8:	4798      	blx	r3
100119da:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
100119dc:	1001ac30 	.word	0x1001ac30
100119e0:	1001a8c0 	.word	0x1001a8c0
100119e4:	10011461 	.word	0x10011461

100119e8 <gapc_bond_ind>:
100119e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100119ea:	780e      	ldrb	r6, [r1, #0]
100119ec:	1c03      	adds	r3, r0, #0
100119ee:	1eb0      	subs	r0, r6, #2
100119f0:	2805      	cmp	r0, #5
100119f2:	d85d      	bhi.n	10011ab0 <gapc_bond_ind+0xc8>
100119f4:	1c15      	adds	r5, r2, #0
100119f6:	1c0c      	adds	r4, r1, #0
100119f8:	f001 f9fa 	bl	10012df0 <__gnu_thumb1_case_uqi>
100119fc:	2f5a030d 	.word	0x2f5a030d
10011a00:	4740      	.short	0x4740
10011a02:	2009      	movs	r0, #9
10011a04:	2a00      	cmp	r2, #0
10011a06:	d054      	beq.n	10011ab2 <gapc_bond_ind+0xca>
10011a08:	0a1b      	lsrs	r3, r3, #8
10011a0a:	8053      	strh	r3, [r2, #2]
10011a0c:	788b      	ldrb	r3, [r1, #2]
10011a0e:	4829      	ldr	r0, [pc, #164]	; (10011ab4 <gapc_bond_ind+0xcc>)
10011a10:	7113      	strb	r3, [r2, #4]
10011a12:	2100      	movs	r1, #0
10011a14:	e01c      	b.n	10011a50 <gapc_bond_ind+0x68>
10011a16:	2009      	movs	r0, #9
10011a18:	2a00      	cmp	r2, #0
10011a1a:	d04a      	beq.n	10011ab2 <gapc_bond_ind+0xca>
10011a1c:	4c25      	ldr	r4, [pc, #148]	; (10011ab4 <gapc_bond_ind+0xcc>)
10011a1e:	0a1b      	lsrs	r3, r3, #8
10011a20:	8053      	strh	r3, [r2, #2]
10011a22:	788b      	ldrb	r3, [r1, #2]
10011a24:	2700      	movs	r7, #0
10011a26:	1c10      	adds	r0, r2, #0
10011a28:	1c21      	adds	r1, r4, #0
10011a2a:	7013      	strb	r3, [r2, #0]
10011a2c:	4e22      	ldr	r6, [pc, #136]	; (10011ab8 <gapc_bond_ind+0xd0>)
10011a2e:	7117      	strb	r7, [r2, #4]
10011a30:	312e      	adds	r1, #46	; 0x2e
10011a32:	2217      	movs	r2, #23
10011a34:	3032      	adds	r0, #50	; 0x32
10011a36:	47b0      	blx	r6
10011a38:	1c28      	adds	r0, r5, #0
10011a3a:	1c21      	adds	r1, r4, #0
10011a3c:	2210      	movs	r2, #16
10011a3e:	311e      	adds	r1, #30
10011a40:	3022      	adds	r0, #34	; 0x22
10011a42:	47b0      	blx	r6
10011a44:	1ca1      	adds	r1, r4, #2
10011a46:	1da8      	adds	r0, r5, #6
10011a48:	221c      	movs	r2, #28
10011a4a:	47b0      	blx	r6
10011a4c:	1c20      	adds	r0, r4, #0
10011a4e:	1c39      	adds	r1, r7, #0
10011a50:	2246      	movs	r2, #70	; 0x46
10011a52:	4b1a      	ldr	r3, [pc, #104]	; (10011abc <gapc_bond_ind+0xd4>)
10011a54:	4798      	blx	r3
10011a56:	2009      	movs	r0, #9
10011a58:	e02b      	b.n	10011ab2 <gapc_bond_ind+0xca>
10011a5a:	4d16      	ldr	r5, [pc, #88]	; (10011ab4 <gapc_bond_ind+0xcc>)
10011a5c:	3102      	adds	r1, #2
10011a5e:	1c28      	adds	r0, r5, #0
10011a60:	2210      	movs	r2, #16
10011a62:	4e15      	ldr	r6, [pc, #84]	; (10011ab8 <gapc_bond_ind+0xd0>)
10011a64:	302e      	adds	r0, #46	; 0x2e
10011a66:	47b0      	blx	r6
10011a68:	1c28      	adds	r0, r5, #0
10011a6a:	1c21      	adds	r1, r4, #0
10011a6c:	303f      	adds	r0, #63	; 0x3f
10011a6e:	3112      	adds	r1, #18
10011a70:	2206      	movs	r2, #6
10011a72:	47b0      	blx	r6
10011a74:	7e23      	ldrb	r3, [r4, #24]
10011a76:	353e      	adds	r5, #62	; 0x3e
10011a78:	702b      	strb	r3, [r5, #0]
10011a7a:	e019      	b.n	10011ab0 <gapc_bond_ind+0xc8>
10011a7c:	480d      	ldr	r0, [pc, #52]	; (10011ab4 <gapc_bond_ind+0xcc>)
10011a7e:	3102      	adds	r1, #2
10011a80:	2210      	movs	r2, #16
10011a82:	4b0d      	ldr	r3, [pc, #52]	; (10011ab8 <gapc_bond_ind+0xd0>)
10011a84:	301e      	adds	r0, #30
10011a86:	4798      	blx	r3
10011a88:	e012      	b.n	10011ab0 <gapc_bond_ind+0xc8>
10011a8a:	4d0a      	ldr	r5, [pc, #40]	; (10011ab4 <gapc_bond_ind+0xcc>)
10011a8c:	3102      	adds	r1, #2
10011a8e:	2210      	movs	r2, #16
10011a90:	4e09      	ldr	r6, [pc, #36]	; (10011ab8 <gapc_bond_ind+0xd0>)
10011a92:	1ca8      	adds	r0, r5, #2
10011a94:	47b0      	blx	r6
10011a96:	1c28      	adds	r0, r5, #0
10011a98:	1c21      	adds	r1, r4, #0
10011a9a:	7ce3      	ldrb	r3, [r4, #19]
10011a9c:	7ca2      	ldrb	r2, [r4, #18]
10011a9e:	021b      	lsls	r3, r3, #8
10011aa0:	4313      	orrs	r3, r2
10011aa2:	3014      	adds	r0, #20
10011aa4:	3114      	adds	r1, #20
10011aa6:	2208      	movs	r2, #8
10011aa8:	826b      	strh	r3, [r5, #18]
10011aaa:	47b0      	blx	r6
10011aac:	7f23      	ldrb	r3, [r4, #28]
10011aae:	772b      	strb	r3, [r5, #28]
10011ab0:	2000      	movs	r0, #0
10011ab2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10011ab4:	10019a18 	.word	0x10019a18
10011ab8:	10014b7b 	.word	0x10014b7b
10011abc:	10014b8d 	.word	0x10014b8d

10011ac0 <gapc_bond_req_ind>:
10011ac0:	b570      	push	{r4, r5, r6, lr}
10011ac2:	780c      	ldrb	r4, [r1, #0]
10011ac4:	1c03      	adds	r3, r0, #0
10011ac6:	7849      	ldrb	r1, [r1, #1]
10011ac8:	2c07      	cmp	r4, #7
10011aca:	d85c      	bhi.n	10011b86 <gapc_bond_req_ind+0xc6>
10011acc:	1c20      	adds	r0, r4, #0
10011ace:	f001 f98f 	bl	10012df0 <__gnu_thumb1_case_uqi>
10011ad2:	5a04      	.short	0x5a04
10011ad4:	5a0b5a5a 	.word	0x5a0b5a5a
10011ad8:	1f1f      	.short	0x1f1f
10011ada:	200a      	movs	r0, #10
10011adc:	2a00      	cmp	r2, #0
10011ade:	d053      	beq.n	10011b88 <gapc_bond_req_ind+0xc8>
10011ae0:	0a1b      	lsrs	r3, r3, #8
10011ae2:	8013      	strh	r3, [r2, #0]
10011ae4:	7091      	strb	r1, [r2, #2]
10011ae6:	e04f      	b.n	10011b88 <gapc_bond_req_ind+0xc8>
10011ae8:	2a00      	cmp	r2, #0
10011aea:	d00b      	beq.n	10011b04 <gapc_bond_req_ind+0x44>
10011aec:	0a1b      	lsrs	r3, r3, #8
10011aee:	8013      	strh	r3, [r2, #0]
10011af0:	2900      	cmp	r1, #0
10011af2:	d102      	bne.n	10011afa <gapc_bond_req_ind+0x3a>
10011af4:	2301      	movs	r3, #1
10011af6:	7093      	strb	r3, [r2, #2]
10011af8:	e004      	b.n	10011b04 <gapc_bond_req_ind+0x44>
10011afa:	2300      	movs	r3, #0
10011afc:	7093      	strb	r3, [r2, #2]
10011afe:	2902      	cmp	r1, #2
10011b00:	d102      	bne.n	10011b08 <gapc_bond_req_ind+0x48>
10011b02:	70d3      	strb	r3, [r2, #3]
10011b04:	200c      	movs	r0, #12
10011b06:	e03f      	b.n	10011b88 <gapc_bond_req_ind+0xc8>
10011b08:	2901      	cmp	r1, #1
10011b0a:	d1fb      	bne.n	10011b04 <gapc_bond_req_ind+0x44>
10011b0c:	70d1      	strb	r1, [r2, #3]
10011b0e:	e7f9      	b.n	10011b04 <gapc_bond_req_ind+0x44>
10011b10:	2214      	movs	r2, #20
10011b12:	481e      	ldr	r0, [pc, #120]	; (10011b8c <gapc_bond_req_ind+0xcc>)
10011b14:	0a1b      	lsrs	r3, r3, #8
10011b16:	70c3      	strb	r3, [r0, #3]
10011b18:	4b1d      	ldr	r3, [pc, #116]	; (10011b90 <gapc_bond_req_ind+0xd0>)
10011b1a:	7002      	strb	r2, [r0, #0]
10011b1c:	3a06      	subs	r2, #6
10011b1e:	7042      	strb	r2, [r0, #1]
10011b20:	7082      	strb	r2, [r0, #2]
10011b22:	881a      	ldrh	r2, [r3, #0]
10011b24:	881b      	ldrh	r3, [r3, #0]
10011b26:	4e1b      	ldr	r6, [pc, #108]	; (10011b94 <gapc_bond_req_ind+0xd4>)
10011b28:	0a1b      	lsrs	r3, r3, #8
10011b2a:	7143      	strb	r3, [r0, #5]
10011b2c:	2301      	movs	r3, #1
10011b2e:	7102      	strb	r2, [r0, #4]
10011b30:	7204      	strb	r4, [r0, #8]
10011b32:	7243      	strb	r3, [r0, #9]
10011b34:	1c05      	adds	r5, r0, #0
10011b36:	1c31      	adds	r1, r6, #0
10011b38:	300a      	adds	r0, #10
10011b3a:	2c07      	cmp	r4, #7
10011b3c:	d116      	bne.n	10011b6c <gapc_bond_req_ind+0xac>
10011b3e:	317e      	adds	r1, #126	; 0x7e
10011b40:	2210      	movs	r2, #16
10011b42:	4c15      	ldr	r4, [pc, #84]	; (10011b98 <gapc_bond_req_ind+0xd8>)
10011b44:	47a0      	blx	r4
10011b46:	1c33      	adds	r3, r6, #0
10011b48:	1c31      	adds	r1, r6, #0
10011b4a:	1c28      	adds	r0, r5, #0
10011b4c:	338e      	adds	r3, #142	; 0x8e
10011b4e:	881b      	ldrh	r3, [r3, #0]
10011b50:	3190      	adds	r1, #144	; 0x90
10011b52:	76ab      	strb	r3, [r5, #26]
10011b54:	2208      	movs	r2, #8
10011b56:	0a1b      	lsrs	r3, r3, #8
10011b58:	301c      	adds	r0, #28
10011b5a:	76eb      	strb	r3, [r5, #27]
10011b5c:	47a0      	blx	r4
10011b5e:	1c31      	adds	r1, r6, #0
10011b60:	3198      	adds	r1, #152	; 0x98
10011b62:	780a      	ldrb	r2, [r1, #0]
10011b64:	1d6b      	adds	r3, r5, #5
10011b66:	77da      	strb	r2, [r3, #31]
10011b68:	2125      	movs	r1, #37	; 0x25
10011b6a:	e004      	b.n	10011b76 <gapc_bond_req_ind+0xb6>
10011b6c:	319a      	adds	r1, #154	; 0x9a
10011b6e:	2210      	movs	r2, #16
10011b70:	4b09      	ldr	r3, [pc, #36]	; (10011b98 <gapc_bond_req_ind+0xd8>)
10011b72:	4798      	blx	r3
10011b74:	211a      	movs	r1, #26
10011b76:	1c0b      	adds	r3, r1, #0
10011b78:	2400      	movs	r4, #0
10011b7a:	3b08      	subs	r3, #8
10011b7c:	71ab      	strb	r3, [r5, #6]
10011b7e:	1c28      	adds	r0, r5, #0
10011b80:	4b06      	ldr	r3, [pc, #24]	; (10011b9c <gapc_bond_req_ind+0xdc>)
10011b82:	71ec      	strb	r4, [r5, #7]
10011b84:	4798      	blx	r3
10011b86:	2000      	movs	r0, #0
10011b88:	bd70      	pop	{r4, r5, r6, pc}
10011b8a:	46c0      	nop			; (mov r8, r8)
10011b8c:	1001ac30 	.word	0x1001ac30
10011b90:	1001a8c0 	.word	0x1001a8c0
10011b94:	1001a952 	.word	0x1001a952
10011b98:	10014b7b 	.word	0x10014b7b
10011b9c:	10011461 	.word	0x10011461

10011ba0 <gapc_bond_cfm_handler_pair_resp>:
10011ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
10011ba2:	b085      	sub	sp, #20
10011ba4:	1c07      	adds	r7, r0, #0
10011ba6:	a80a      	add	r0, sp, #40	; 0x28
10011ba8:	7806      	ldrb	r6, [r0, #0]
10011baa:	a80b      	add	r0, sp, #44	; 0x2c
10011bac:	7805      	ldrb	r5, [r0, #0]
10011bae:	a80c      	add	r0, sp, #48	; 0x30
10011bb0:	7800      	ldrb	r0, [r0, #0]
10011bb2:	2414      	movs	r4, #20
10011bb4:	9002      	str	r0, [sp, #8]
10011bb6:	a80d      	add	r0, sp, #52	; 0x34
10011bb8:	7800      	ldrb	r0, [r0, #0]
10011bba:	9301      	str	r3, [sp, #4]
10011bbc:	9003      	str	r0, [sp, #12]
10011bbe:	a80e      	add	r0, sp, #56	; 0x38
10011bc0:	8800      	ldrh	r0, [r0, #0]
10011bc2:	4684      	mov	ip, r0
10011bc4:	4812      	ldr	r0, [pc, #72]	; (10011c10 <gapc_bond_cfm_handler_pair_resp+0x70>)
10011bc6:	7004      	strb	r4, [r0, #0]
10011bc8:	3c06      	subs	r4, #6
10011bca:	7044      	strb	r4, [r0, #1]
10011bcc:	7084      	strb	r4, [r0, #2]
10011bce:	4664      	mov	r4, ip
10011bd0:	70c4      	strb	r4, [r0, #3]
10011bd2:	4c10      	ldr	r4, [pc, #64]	; (10011c14 <gapc_bond_cfm_handler_pair_resp+0x74>)
10011bd4:	7247      	strb	r7, [r0, #9]
10011bd6:	8823      	ldrh	r3, [r4, #0]
10011bd8:	8824      	ldrh	r4, [r4, #0]
10011bda:	7103      	strb	r3, [r0, #4]
10011bdc:	466b      	mov	r3, sp
10011bde:	791b      	ldrb	r3, [r3, #4]
10011be0:	0a24      	lsrs	r4, r4, #8
10011be2:	7303      	strb	r3, [r0, #12]
10011be4:	466b      	mov	r3, sp
10011be6:	7a1b      	ldrb	r3, [r3, #8]
10011be8:	7144      	strb	r4, [r0, #5]
10011bea:	73c3      	strb	r3, [r0, #15]
10011bec:	466b      	mov	r3, sp
10011bee:	7b1b      	ldrb	r3, [r3, #12]
10011bf0:	2401      	movs	r4, #1
10011bf2:	7403      	strb	r3, [r0, #16]
10011bf4:	2309      	movs	r3, #9
10011bf6:	7183      	strb	r3, [r0, #6]
10011bf8:	2300      	movs	r3, #0
10011bfa:	7204      	strb	r4, [r0, #8]
10011bfc:	7281      	strb	r1, [r0, #10]
10011bfe:	72c2      	strb	r2, [r0, #11]
10011c00:	7346      	strb	r6, [r0, #13]
10011c02:	7385      	strb	r5, [r0, #14]
10011c04:	71c3      	strb	r3, [r0, #7]
10011c06:	2111      	movs	r1, #17
10011c08:	4b03      	ldr	r3, [pc, #12]	; (10011c18 <gapc_bond_cfm_handler_pair_resp+0x78>)
10011c0a:	4798      	blx	r3
10011c0c:	b005      	add	sp, #20
10011c0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011c10:	1001ac30 	.word	0x1001ac30
10011c14:	1001a8c0 	.word	0x1001a8c0
10011c18:	10011461 	.word	0x10011461

10011c1c <gapc_bond_cfm_handler_key_exch>:
10011c1c:	b538      	push	{r3, r4, r5, lr}
10011c1e:	2514      	movs	r5, #20
10011c20:	4c0d      	ldr	r4, [pc, #52]	; (10011c58 <gapc_bond_cfm_handler_key_exch+0x3c>)
10011c22:	70e3      	strb	r3, [r4, #3]
10011c24:	4b0d      	ldr	r3, [pc, #52]	; (10011c5c <gapc_bond_cfm_handler_key_exch+0x40>)
10011c26:	7025      	strb	r5, [r4, #0]
10011c28:	3d06      	subs	r5, #6
10011c2a:	7065      	strb	r5, [r4, #1]
10011c2c:	70a5      	strb	r5, [r4, #2]
10011c2e:	881d      	ldrh	r5, [r3, #0]
10011c30:	881b      	ldrh	r3, [r3, #0]
10011c32:	7220      	strb	r0, [r4, #8]
10011c34:	0a1b      	lsrs	r3, r3, #8
10011c36:	7163      	strb	r3, [r4, #5]
10011c38:	7261      	strb	r1, [r4, #9]
10011c3a:	4b09      	ldr	r3, [pc, #36]	; (10011c60 <gapc_bond_cfm_handler_key_exch+0x44>)
10011c3c:	1c11      	adds	r1, r2, #0
10011c3e:	4809      	ldr	r0, [pc, #36]	; (10011c64 <gapc_bond_cfm_handler_key_exch+0x48>)
10011c40:	2210      	movs	r2, #16
10011c42:	7125      	strb	r5, [r4, #4]
10011c44:	4798      	blx	r3
10011c46:	2312      	movs	r3, #18
10011c48:	71a3      	strb	r3, [r4, #6]
10011c4a:	2300      	movs	r3, #0
10011c4c:	1c20      	adds	r0, r4, #0
10011c4e:	71e3      	strb	r3, [r4, #7]
10011c50:	211a      	movs	r1, #26
10011c52:	4b05      	ldr	r3, [pc, #20]	; (10011c68 <gapc_bond_cfm_handler_key_exch+0x4c>)
10011c54:	4798      	blx	r3
10011c56:	bd38      	pop	{r3, r4, r5, pc}
10011c58:	1001ac30 	.word	0x1001ac30
10011c5c:	1001a8c0 	.word	0x1001a8c0
10011c60:	10014b7b 	.word	0x10014b7b
10011c64:	1001ac3a 	.word	0x1001ac3a
10011c68:	10011461 	.word	0x10011461

10011c6c <gapc_security_cmd_handler>:
10011c6c:	221a      	movs	r2, #26
10011c6e:	b508      	push	{r3, lr}
10011c70:	4b0b      	ldr	r3, [pc, #44]	; (10011ca0 <gapc_security_cmd_handler+0x34>)
10011c72:	701a      	strb	r2, [r3, #0]
10011c74:	3a0c      	subs	r2, #12
10011c76:	705a      	strb	r2, [r3, #1]
10011c78:	709a      	strb	r2, [r3, #2]
10011c7a:	4a0a      	ldr	r2, [pc, #40]	; (10011ca4 <gapc_security_cmd_handler+0x38>)
10011c7c:	70d8      	strb	r0, [r3, #3]
10011c7e:	8810      	ldrh	r0, [r2, #0]
10011c80:	8812      	ldrh	r2, [r2, #0]
10011c82:	7118      	strb	r0, [r3, #4]
10011c84:	0a12      	lsrs	r2, r2, #8
10011c86:	715a      	strb	r2, [r3, #5]
10011c88:	220c      	movs	r2, #12
10011c8a:	721a      	strb	r2, [r3, #8]
10011c8c:	3a0a      	subs	r2, #10
10011c8e:	719a      	strb	r2, [r3, #6]
10011c90:	2200      	movs	r2, #0
10011c92:	7259      	strb	r1, [r3, #9]
10011c94:	71da      	strb	r2, [r3, #7]
10011c96:	1c18      	adds	r0, r3, #0
10011c98:	210a      	movs	r1, #10
10011c9a:	4b03      	ldr	r3, [pc, #12]	; (10011ca8 <gapc_security_cmd_handler+0x3c>)
10011c9c:	4798      	blx	r3
10011c9e:	bd08      	pop	{r3, pc}
10011ca0:	1001ac30 	.word	0x1001ac30
10011ca4:	1001a8c0 	.word	0x1001a8c0
10011ca8:	10011461 	.word	0x10011461

10011cac <gapc_encrypt_cmd_handler>:
10011cac:	b5f0      	push	{r4, r5, r6, r7, lr}
10011cae:	2500      	movs	r5, #0
10011cb0:	b089      	sub	sp, #36	; 0x24
10011cb2:	9306      	str	r3, [sp, #24]
10011cb4:	ab0e      	add	r3, sp, #56	; 0x38
10011cb6:	781b      	ldrb	r3, [r3, #0]
10011cb8:	1c17      	adds	r7, r2, #0
10011cba:	9307      	str	r3, [sp, #28]
10011cbc:	ab0f      	add	r3, sp, #60	; 0x3c
10011cbe:	781b      	ldrb	r3, [r3, #0]
10011cc0:	4a19      	ldr	r2, [pc, #100]	; (10011d28 <gapc_encrypt_cmd_handler+0x7c>)
10011cc2:	1c06      	adds	r6, r0, #0
10011cc4:	9105      	str	r1, [sp, #20]
10011cc6:	9300      	str	r3, [sp, #0]
10011cc8:	9002      	str	r0, [sp, #8]
10011cca:	1c29      	adds	r1, r5, #0
10011ccc:	1c2b      	adds	r3, r5, #0
10011cce:	9501      	str	r5, [sp, #4]
10011cd0:	1c10      	adds	r0, r2, #0
10011cd2:	4c16      	ldr	r4, [pc, #88]	; (10011d2c <gapc_encrypt_cmd_handler+0x80>)
10011cd4:	47a0      	blx	r4
10011cd6:	2316      	movs	r3, #22
10011cd8:	4c15      	ldr	r4, [pc, #84]	; (10011d30 <gapc_encrypt_cmd_handler+0x84>)
10011cda:	9905      	ldr	r1, [sp, #20]
10011cdc:	7023      	strb	r3, [r4, #0]
10011cde:	3b08      	subs	r3, #8
10011ce0:	7063      	strb	r3, [r4, #1]
10011ce2:	70a3      	strb	r3, [r4, #2]
10011ce4:	4b13      	ldr	r3, [pc, #76]	; (10011d34 <gapc_encrypt_cmd_handler+0x88>)
10011ce6:	70e6      	strb	r6, [r4, #3]
10011ce8:	881a      	ldrh	r2, [r3, #0]
10011cea:	881b      	ldrh	r3, [r3, #0]
10011cec:	7122      	strb	r2, [r4, #4]
10011cee:	0a1b      	lsrs	r3, r3, #8
10011cf0:	7163      	strb	r3, [r4, #5]
10011cf2:	230b      	movs	r3, #11
10011cf4:	4e10      	ldr	r6, [pc, #64]	; (10011d38 <gapc_encrypt_cmd_handler+0x8c>)
10011cf6:	2210      	movs	r2, #16
10011cf8:	4810      	ldr	r0, [pc, #64]	; (10011d3c <gapc_encrypt_cmd_handler+0x90>)
10011cfa:	7223      	strb	r3, [r4, #8]
10011cfc:	7265      	strb	r5, [r4, #9]
10011cfe:	47b0      	blx	r6
10011d00:	0a3b      	lsrs	r3, r7, #8
10011d02:	9906      	ldr	r1, [sp, #24]
10011d04:	2208      	movs	r2, #8
10011d06:	480e      	ldr	r0, [pc, #56]	; (10011d40 <gapc_encrypt_cmd_handler+0x94>)
10011d08:	76e3      	strb	r3, [r4, #27]
10011d0a:	76a7      	strb	r7, [r4, #26]
10011d0c:	47b0      	blx	r6
10011d0e:	466a      	mov	r2, sp
10011d10:	7f12      	ldrb	r2, [r2, #28]
10011d12:	1d63      	adds	r3, r4, #5
10011d14:	77da      	strb	r2, [r3, #31]
10011d16:	231d      	movs	r3, #29
10011d18:	1c20      	adds	r0, r4, #0
10011d1a:	71a3      	strb	r3, [r4, #6]
10011d1c:	2125      	movs	r1, #37	; 0x25
10011d1e:	4b09      	ldr	r3, [pc, #36]	; (10011d44 <gapc_encrypt_cmd_handler+0x98>)
10011d20:	71e5      	strb	r5, [r4, #7]
10011d22:	4798      	blx	r3
10011d24:	b009      	add	sp, #36	; 0x24
10011d26:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011d28:	100199f8 	.word	0x100199f8
10011d2c:	10011765 	.word	0x10011765
10011d30:	1001ac30 	.word	0x1001ac30
10011d34:	1001a8c0 	.word	0x1001a8c0
10011d38:	10014b7b 	.word	0x10014b7b
10011d3c:	1001ac3a 	.word	0x1001ac3a
10011d40:	1001ac4c 	.word	0x1001ac4c
10011d44:	10011461 	.word	0x10011461

10011d48 <gapc_encrypt_req_ind>:
10011d48:	b508      	push	{r3, lr}
10011d4a:	0a00      	lsrs	r0, r0, #8
10011d4c:	8010      	strh	r0, [r2, #0]
10011d4e:	784b      	ldrb	r3, [r1, #1]
10011d50:	7808      	ldrb	r0, [r1, #0]
10011d52:	021b      	lsls	r3, r3, #8
10011d54:	4303      	orrs	r3, r0
10011d56:	8053      	strh	r3, [r2, #2]
10011d58:	1d10      	adds	r0, r2, #4
10011d5a:	3102      	adds	r1, #2
10011d5c:	2208      	movs	r2, #8
10011d5e:	4b01      	ldr	r3, [pc, #4]	; (10011d64 <gapc_encrypt_req_ind+0x1c>)
10011d60:	4798      	blx	r3
10011d62:	bd08      	pop	{r3, pc}
10011d64:	10014b7b 	.word	0x10014b7b

10011d68 <gapc_encrypt_cfm_handler>:
10011d68:	b5f0      	push	{r4, r5, r6, r7, lr}
10011d6a:	2500      	movs	r5, #0
10011d6c:	b087      	sub	sp, #28
10011d6e:	9304      	str	r3, [sp, #16]
10011d70:	ab0c      	add	r3, sp, #48	; 0x30
10011d72:	781b      	ldrb	r3, [r3, #0]
10011d74:	1c17      	adds	r7, r2, #0
10011d76:	4a15      	ldr	r2, [pc, #84]	; (10011dcc <gapc_encrypt_cfm_handler+0x64>)
10011d78:	1c06      	adds	r6, r0, #0
10011d7a:	9305      	str	r3, [sp, #20]
10011d7c:	9100      	str	r1, [sp, #0]
10011d7e:	9002      	str	r0, [sp, #8]
10011d80:	1c29      	adds	r1, r5, #0
10011d82:	1c2b      	adds	r3, r5, #0
10011d84:	9501      	str	r5, [sp, #4]
10011d86:	1c10      	adds	r0, r2, #0
10011d88:	4c11      	ldr	r4, [pc, #68]	; (10011dd0 <gapc_encrypt_cfm_handler+0x68>)
10011d8a:	47a0      	blx	r4
10011d8c:	2318      	movs	r3, #24
10011d8e:	4c11      	ldr	r4, [pc, #68]	; (10011dd4 <gapc_encrypt_cfm_handler+0x6c>)
10011d90:	9904      	ldr	r1, [sp, #16]
10011d92:	7023      	strb	r3, [r4, #0]
10011d94:	3b0a      	subs	r3, #10
10011d96:	7063      	strb	r3, [r4, #1]
10011d98:	70a3      	strb	r3, [r4, #2]
10011d9a:	4b0f      	ldr	r3, [pc, #60]	; (10011dd8 <gapc_encrypt_cfm_handler+0x70>)
10011d9c:	480f      	ldr	r0, [pc, #60]	; (10011ddc <gapc_encrypt_cfm_handler+0x74>)
10011d9e:	881a      	ldrh	r2, [r3, #0]
10011da0:	881b      	ldrh	r3, [r3, #0]
10011da2:	7122      	strb	r2, [r4, #4]
10011da4:	0a1b      	lsrs	r3, r3, #8
10011da6:	7163      	strb	r3, [r4, #5]
10011da8:	2210      	movs	r2, #16
10011daa:	4b0d      	ldr	r3, [pc, #52]	; (10011de0 <gapc_encrypt_cfm_handler+0x78>)
10011dac:	70e6      	strb	r6, [r4, #3]
10011dae:	7227      	strb	r7, [r4, #8]
10011db0:	4798      	blx	r3
10011db2:	466b      	mov	r3, sp
10011db4:	7d1b      	ldrb	r3, [r3, #20]
10011db6:	1c20      	adds	r0, r4, #0
10011db8:	7663      	strb	r3, [r4, #25]
10011dba:	2312      	movs	r3, #18
10011dbc:	211a      	movs	r1, #26
10011dbe:	71a3      	strb	r3, [r4, #6]
10011dc0:	4b08      	ldr	r3, [pc, #32]	; (10011de4 <gapc_encrypt_cfm_handler+0x7c>)
10011dc2:	71e5      	strb	r5, [r4, #7]
10011dc4:	4798      	blx	r3
10011dc6:	b007      	add	sp, #28
10011dc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011dca:	46c0      	nop			; (mov r8, r8)
10011dcc:	10019a08 	.word	0x10019a08
10011dd0:	10011765 	.word	0x10011765
10011dd4:	1001ac30 	.word	0x1001ac30
10011dd8:	1001a8c0 	.word	0x1001a8c0
10011ddc:	1001ac39 	.word	0x1001ac39
10011de0:	10014b7b 	.word	0x10014b7b
10011de4:	10011461 	.word	0x10011461

10011de8 <gapc_encrypt_ind>:
10011de8:	780b      	ldrb	r3, [r1, #0]
10011dea:	0a00      	lsrs	r0, r0, #8
10011dec:	70d3      	strb	r3, [r2, #3]
10011dee:	2300      	movs	r3, #0
10011df0:	8010      	strh	r0, [r2, #0]
10011df2:	7093      	strb	r3, [r2, #2]
10011df4:	4770      	bx	lr
	...

10011df8 <gapc_param_update_cfm_handler>:
10011df8:	b538      	push	{r3, r4, r5, lr}
10011dfa:	2410      	movs	r4, #16
10011dfc:	1c05      	adds	r5, r0, #0
10011dfe:	480e      	ldr	r0, [pc, #56]	; (10011e38 <gapc_param_update_cfm_handler+0x40>)
10011e00:	7004      	strb	r4, [r0, #0]
10011e02:	3c02      	subs	r4, #2
10011e04:	7044      	strb	r4, [r0, #1]
10011e06:	7084      	strb	r4, [r0, #2]
10011e08:	4c0c      	ldr	r4, [pc, #48]	; (10011e3c <gapc_param_update_cfm_handler+0x44>)
10011e0a:	70c5      	strb	r5, [r0, #3]
10011e0c:	8825      	ldrh	r5, [r4, #0]
10011e0e:	8824      	ldrh	r4, [r4, #0]
10011e10:	72c3      	strb	r3, [r0, #11]
10011e12:	0a1b      	lsrs	r3, r3, #8
10011e14:	0a24      	lsrs	r4, r4, #8
10011e16:	7303      	strb	r3, [r0, #12]
10011e18:	2305      	movs	r3, #5
10011e1a:	7144      	strb	r4, [r0, #5]
10011e1c:	2400      	movs	r4, #0
10011e1e:	7201      	strb	r1, [r0, #8]
10011e20:	7242      	strb	r2, [r0, #9]
10011e22:	7183      	strb	r3, [r0, #6]
10011e24:	0a12      	lsrs	r2, r2, #8
10011e26:	210d      	movs	r1, #13
10011e28:	4b05      	ldr	r3, [pc, #20]	; (10011e40 <gapc_param_update_cfm_handler+0x48>)
10011e2a:	7105      	strb	r5, [r0, #4]
10011e2c:	7282      	strb	r2, [r0, #10]
10011e2e:	71c4      	strb	r4, [r0, #7]
10011e30:	4798      	blx	r3
10011e32:	1c20      	adds	r0, r4, #0
10011e34:	bd38      	pop	{r3, r4, r5, pc}
10011e36:	46c0      	nop			; (mov r8, r8)
10011e38:	1001ac30 	.word	0x1001ac30
10011e3c:	1001a8c0 	.word	0x1001a8c0
10011e40:	10011461 	.word	0x10011461

10011e44 <gapc_param_updated_ind>:
10011e44:	2300      	movs	r3, #0
10011e46:	0a00      	lsrs	r0, r0, #8
10011e48:	8010      	strh	r0, [r2, #0]
10011e4a:	7093      	strb	r3, [r2, #2]
10011e4c:	784b      	ldrb	r3, [r1, #1]
10011e4e:	7808      	ldrb	r0, [r1, #0]
10011e50:	021b      	lsls	r3, r3, #8
10011e52:	4303      	orrs	r3, r0
10011e54:	8093      	strh	r3, [r2, #4]
10011e56:	78cb      	ldrb	r3, [r1, #3]
10011e58:	7888      	ldrb	r0, [r1, #2]
10011e5a:	021b      	lsls	r3, r3, #8
10011e5c:	4303      	orrs	r3, r0
10011e5e:	80d3      	strh	r3, [r2, #6]
10011e60:	794b      	ldrb	r3, [r1, #5]
10011e62:	7909      	ldrb	r1, [r1, #4]
10011e64:	021b      	lsls	r3, r3, #8
10011e66:	430b      	orrs	r3, r1
10011e68:	2007      	movs	r0, #7
10011e6a:	8113      	strh	r3, [r2, #8]
10011e6c:	4770      	bx	lr

10011e6e <gapc_param_updated_req_ind>:
10011e6e:	0a00      	lsrs	r0, r0, #8
10011e70:	8010      	strh	r0, [r2, #0]
10011e72:	784b      	ldrb	r3, [r1, #1]
10011e74:	7808      	ldrb	r0, [r1, #0]
10011e76:	021b      	lsls	r3, r3, #8
10011e78:	4303      	orrs	r3, r0
10011e7a:	8053      	strh	r3, [r2, #2]
10011e7c:	78cb      	ldrb	r3, [r1, #3]
10011e7e:	7888      	ldrb	r0, [r1, #2]
10011e80:	021b      	lsls	r3, r3, #8
10011e82:	4303      	orrs	r3, r0
10011e84:	8093      	strh	r3, [r2, #4]
10011e86:	794b      	ldrb	r3, [r1, #5]
10011e88:	7908      	ldrb	r0, [r1, #4]
10011e8a:	021b      	lsls	r3, r3, #8
10011e8c:	4303      	orrs	r3, r0
10011e8e:	80d3      	strh	r3, [r2, #6]
10011e90:	79cb      	ldrb	r3, [r1, #7]
10011e92:	7989      	ldrb	r1, [r1, #6]
10011e94:	021b      	lsls	r3, r3, #8
10011e96:	430b      	orrs	r3, r1
10011e98:	2008      	movs	r0, #8
10011e9a:	8113      	strh	r3, [r2, #8]
10011e9c:	4770      	bx	lr
	...

10011ea0 <gapc_dev_info_req_ind_handler>:
10011ea0:	b508      	push	{r3, lr}
10011ea2:	1c0b      	adds	r3, r1, #0
10011ea4:	0a01      	lsrs	r1, r0, #8
10011ea6:	8011      	strh	r1, [r2, #0]
10011ea8:	7818      	ldrb	r0, [r3, #0]
10011eaa:	7090      	strb	r0, [r2, #2]
10011eac:	2800      	cmp	r0, #0
10011eae:	d104      	bne.n	10011eba <gapc_dev_info_req_ind_handler+0x1a>
10011eb0:	4b03      	ldr	r3, [pc, #12]	; (10011ec0 <gapc_dev_info_req_ind_handler+0x20>)
10011eb2:	33aa      	adds	r3, #170	; 0xaa
10011eb4:	881b      	ldrh	r3, [r3, #0]
10011eb6:	2b00      	cmp	r3, #0
10011eb8:	d001      	beq.n	10011ebe <gapc_dev_info_req_ind_handler+0x1e>
10011eba:	4b02      	ldr	r3, [pc, #8]	; (10011ec4 <gapc_dev_info_req_ind_handler+0x24>)
10011ebc:	4798      	blx	r3
10011ebe:	bd08      	pop	{r3, pc}
10011ec0:	1001a952 	.word	0x1001a952
10011ec4:	10011571 	.word	0x10011571

10011ec8 <gapc_sec_req_ind>:
10011ec8:	0a00      	lsrs	r0, r0, #8
10011eca:	8010      	strh	r0, [r2, #0]
10011ecc:	7809      	ldrb	r1, [r1, #0]
10011ece:	2301      	movs	r3, #1
10011ed0:	1c08      	adds	r0, r1, #0
10011ed2:	0889      	lsrs	r1, r1, #2
10011ed4:	4018      	ands	r0, r3
10011ed6:	400b      	ands	r3, r1
10011ed8:	70d0      	strb	r0, [r2, #3]
10011eda:	7113      	strb	r3, [r2, #4]
10011edc:	4770      	bx	lr

10011ede <gapc_sign_counter_ind_handler>:
10011ede:	0a00      	lsrs	r0, r0, #8
10011ee0:	8010      	strh	r0, [r2, #0]
10011ee2:	784b      	ldrb	r3, [r1, #1]
10011ee4:	0218      	lsls	r0, r3, #8
10011ee6:	788b      	ldrb	r3, [r1, #2]
10011ee8:	041b      	lsls	r3, r3, #16
10011eea:	4303      	orrs	r3, r0
10011eec:	7808      	ldrb	r0, [r1, #0]
10011eee:	4303      	orrs	r3, r0
10011ef0:	78c8      	ldrb	r0, [r1, #3]
10011ef2:	0600      	lsls	r0, r0, #24
10011ef4:	4303      	orrs	r3, r0
10011ef6:	6053      	str	r3, [r2, #4]
10011ef8:	794b      	ldrb	r3, [r1, #5]
10011efa:	0218      	lsls	r0, r3, #8
10011efc:	798b      	ldrb	r3, [r1, #6]
10011efe:	041b      	lsls	r3, r3, #16
10011f00:	4303      	orrs	r3, r0
10011f02:	7908      	ldrb	r0, [r1, #4]
10011f04:	79c9      	ldrb	r1, [r1, #7]
10011f06:	4303      	orrs	r3, r0
10011f08:	0609      	lsls	r1, r1, #24
10011f0a:	430b      	orrs	r3, r1
10011f0c:	2000      	movs	r0, #0
10011f0e:	6093      	str	r3, [r2, #8]
10011f10:	4770      	bx	lr
	...

10011f14 <gapc_peer_att_info_ind_handler>:
10011f14:	b510      	push	{r4, lr}
10011f16:	0a00      	lsrs	r0, r0, #8
10011f18:	8010      	strh	r0, [r2, #0]
10011f1a:	7808      	ldrb	r0, [r1, #0]
10011f1c:	7090      	strb	r0, [r2, #2]
10011f1e:	788b      	ldrb	r3, [r1, #2]
10011f20:	784c      	ldrb	r4, [r1, #1]
10011f22:	021b      	lsls	r3, r3, #8
10011f24:	4323      	orrs	r3, r4
10011f26:	8093      	strh	r3, [r2, #4]
10011f28:	2801      	cmp	r0, #1
10011f2a:	d027      	beq.n	10011f7c <gapc_peer_att_info_ind_handler+0x68>
10011f2c:	2800      	cmp	r0, #0
10011f2e:	d017      	beq.n	10011f60 <gapc_peer_att_info_ind_handler+0x4c>
10011f30:	2802      	cmp	r0, #2
10011f32:	d12a      	bne.n	10011f8a <gapc_peer_att_info_ind_handler+0x76>
10011f34:	790b      	ldrb	r3, [r1, #4]
10011f36:	78c8      	ldrb	r0, [r1, #3]
10011f38:	021b      	lsls	r3, r3, #8
10011f3a:	4303      	orrs	r3, r0
10011f3c:	8113      	strh	r3, [r2, #8]
10011f3e:	798b      	ldrb	r3, [r1, #6]
10011f40:	7948      	ldrb	r0, [r1, #5]
10011f42:	021b      	lsls	r3, r3, #8
10011f44:	4303      	orrs	r3, r0
10011f46:	80d3      	strh	r3, [r2, #6]
10011f48:	7a0b      	ldrb	r3, [r1, #8]
10011f4a:	79c8      	ldrb	r0, [r1, #7]
10011f4c:	021b      	lsls	r3, r3, #8
10011f4e:	4303      	orrs	r3, r0
10011f50:	8193      	strh	r3, [r2, #12]
10011f52:	7a8b      	ldrb	r3, [r1, #10]
10011f54:	7a49      	ldrb	r1, [r1, #9]
10011f56:	021b      	lsls	r3, r3, #8
10011f58:	430b      	orrs	r3, r1
10011f5a:	8153      	strh	r3, [r2, #10]
10011f5c:	2306      	movs	r3, #6
10011f5e:	e013      	b.n	10011f88 <gapc_peer_att_info_ind_handler+0x74>
10011f60:	1c14      	adds	r4, r2, #0
10011f62:	1c20      	adds	r0, r4, #0
10011f64:	790a      	ldrb	r2, [r1, #4]
10011f66:	78cb      	ldrb	r3, [r1, #3]
10011f68:	0212      	lsls	r2, r2, #8
10011f6a:	431a      	orrs	r2, r3
10011f6c:	80e2      	strh	r2, [r4, #6]
10011f6e:	4b07      	ldr	r3, [pc, #28]	; (10011f8c <gapc_peer_att_info_ind_handler+0x78>)
10011f70:	3008      	adds	r0, #8
10011f72:	3105      	adds	r1, #5
10011f74:	4798      	blx	r3
10011f76:	2302      	movs	r3, #2
10011f78:	70a3      	strb	r3, [r4, #2]
10011f7a:	e006      	b.n	10011f8a <gapc_peer_att_info_ind_handler+0x76>
10011f7c:	790b      	ldrb	r3, [r1, #4]
10011f7e:	78c9      	ldrb	r1, [r1, #3]
10011f80:	021b      	lsls	r3, r3, #8
10011f82:	430b      	orrs	r3, r1
10011f84:	80d3      	strh	r3, [r2, #6]
10011f86:	2305      	movs	r3, #5
10011f88:	7093      	strb	r3, [r2, #2]
10011f8a:	bd10      	pop	{r4, pc}
10011f8c:	10014b7b 	.word	0x10014b7b

10011f90 <gapc_con_channel_map_ind_handler>:
10011f90:	b508      	push	{r3, lr}
10011f92:	2300      	movs	r3, #0
10011f94:	0a00      	lsrs	r0, r0, #8
10011f96:	7013      	strb	r3, [r2, #0]
10011f98:	8050      	strh	r0, [r2, #2]
10011f9a:	4b02      	ldr	r3, [pc, #8]	; (10011fa4 <gapc_con_channel_map_ind_handler+0x14>)
10011f9c:	1d10      	adds	r0, r2, #4
10011f9e:	2205      	movs	r2, #5
10011fa0:	4798      	blx	r3
10011fa2:	bd08      	pop	{r3, pc}
10011fa4:	10014b7b 	.word	0x10014b7b

10011fa8 <gapc_lecb_connected>:
10011fa8:	7843      	ldrb	r3, [r0, #1]
10011faa:	7802      	ldrb	r2, [r0, #0]
10011fac:	021b      	lsls	r3, r3, #8
10011fae:	4313      	orrs	r3, r2
10011fb0:	800b      	strh	r3, [r1, #0]
10011fb2:	78c3      	ldrb	r3, [r0, #3]
10011fb4:	7882      	ldrb	r2, [r0, #2]
10011fb6:	021b      	lsls	r3, r3, #8
10011fb8:	4313      	orrs	r3, r2
10011fba:	804b      	strh	r3, [r1, #2]
10011fbc:	7943      	ldrb	r3, [r0, #5]
10011fbe:	7902      	ldrb	r2, [r0, #4]
10011fc0:	021b      	lsls	r3, r3, #8
10011fc2:	4313      	orrs	r3, r2
10011fc4:	808b      	strh	r3, [r1, #4]
10011fc6:	79c3      	ldrb	r3, [r0, #7]
10011fc8:	7982      	ldrb	r2, [r0, #6]
10011fca:	021b      	lsls	r3, r3, #8
10011fcc:	4313      	orrs	r3, r2
10011fce:	80cb      	strh	r3, [r1, #6]
10011fd0:	2300      	movs	r3, #0
10011fd2:	720b      	strb	r3, [r1, #8]
10011fd4:	4770      	bx	lr

10011fd6 <gapc_lecb_disconnected>:
10011fd6:	7843      	ldrb	r3, [r0, #1]
10011fd8:	7802      	ldrb	r2, [r0, #0]
10011fda:	021b      	lsls	r3, r3, #8
10011fdc:	4313      	orrs	r3, r2
10011fde:	800b      	strh	r3, [r1, #0]
10011fe0:	78c3      	ldrb	r3, [r0, #3]
10011fe2:	7882      	ldrb	r2, [r0, #2]
10011fe4:	021b      	lsls	r3, r3, #8
10011fe6:	4313      	orrs	r3, r2
10011fe8:	804b      	strh	r3, [r1, #2]
10011fea:	4770      	bx	lr

10011fec <gapc_lecb_connect_req_ind>:
10011fec:	7843      	ldrb	r3, [r0, #1]
10011fee:	7802      	ldrb	r2, [r0, #0]
10011ff0:	021b      	lsls	r3, r3, #8
10011ff2:	4313      	orrs	r3, r2
10011ff4:	800b      	strh	r3, [r1, #0]
10011ff6:	78c3      	ldrb	r3, [r0, #3]
10011ff8:	7882      	ldrb	r2, [r0, #2]
10011ffa:	021b      	lsls	r3, r3, #8
10011ffc:	4313      	orrs	r3, r2
10011ffe:	804b      	strh	r3, [r1, #2]
10012000:	7943      	ldrb	r3, [r0, #5]
10012002:	7902      	ldrb	r2, [r0, #4]
10012004:	021b      	lsls	r3, r3, #8
10012006:	4313      	orrs	r3, r2
10012008:	808b      	strh	r3, [r1, #4]
1001200a:	79c3      	ldrb	r3, [r0, #7]
1001200c:	7982      	ldrb	r2, [r0, #6]
1001200e:	021b      	lsls	r3, r3, #8
10012010:	4313      	orrs	r3, r2
10012012:	80cb      	strh	r3, [r1, #6]
10012014:	4770      	bx	lr

10012016 <gapc_lecb_add_credit_resp_handler>:
10012016:	7843      	ldrb	r3, [r0, #1]
10012018:	7802      	ldrb	r2, [r0, #0]
1001201a:	021b      	lsls	r3, r3, #8
1001201c:	4313      	orrs	r3, r2
1001201e:	800b      	strh	r3, [r1, #0]
10012020:	78c3      	ldrb	r3, [r0, #3]
10012022:	7882      	ldrb	r2, [r0, #2]
10012024:	021b      	lsls	r3, r3, #8
10012026:	4313      	orrs	r3, r2
10012028:	804b      	strh	r3, [r1, #2]
1001202a:	7943      	ldrb	r3, [r0, #5]
1001202c:	7902      	ldrb	r2, [r0, #4]
1001202e:	021b      	lsls	r3, r3, #8
10012030:	4313      	orrs	r3, r2
10012032:	808b      	strh	r3, [r1, #4]
10012034:	4770      	bx	lr
	...

10012038 <gapm_reset_req_handler>:
10012038:	b573      	push	{r0, r1, r4, r5, r6, lr}
1001203a:	466b      	mov	r3, sp
1001203c:	4915      	ldr	r1, [pc, #84]	; (10012094 <gapm_reset_req_handler+0x5c>)
1001203e:	4816      	ldr	r0, [pc, #88]	; (10012098 <gapm_reset_req_handler+0x60>)
10012040:	880c      	ldrh	r4, [r1, #0]
10012042:	8809      	ldrh	r1, [r1, #0]
10012044:	1ddd      	adds	r5, r3, #7
10012046:	0a09      	lsrs	r1, r1, #8
10012048:	2300      	movs	r3, #0
1001204a:	2202      	movs	r2, #2
1001204c:	7141      	strb	r1, [r0, #5]
1001204e:	26d0      	movs	r6, #208	; 0xd0
10012050:	2101      	movs	r1, #1
10012052:	7104      	strb	r4, [r0, #4]
10012054:	4c11      	ldr	r4, [pc, #68]	; (1001209c <gapm_reset_req_handler+0x64>)
10012056:	702b      	strb	r3, [r5, #0]
10012058:	7002      	strb	r2, [r0, #0]
1001205a:	70c3      	strb	r3, [r0, #3]
1001205c:	320b      	adds	r2, #11
1001205e:	7201      	strb	r1, [r0, #8]
10012060:	7181      	strb	r1, [r0, #6]
10012062:	71c3      	strb	r3, [r0, #7]
10012064:	3108      	adds	r1, #8
10012066:	4b0e      	ldr	r3, [pc, #56]	; (100120a0 <gapm_reset_req_handler+0x68>)
10012068:	0136      	lsls	r6, r6, #4
1001206a:	7042      	strb	r2, [r0, #1]
1001206c:	7082      	strb	r2, [r0, #2]
1001206e:	80a2      	strh	r2, [r4, #4]
10012070:	8026      	strh	r6, [r4, #0]
10012072:	4798      	blx	r3
10012074:	1c28      	adds	r0, r5, #0
10012076:	4b0b      	ldr	r3, [pc, #44]	; (100120a4 <gapm_reset_req_handler+0x6c>)
10012078:	4798      	blx	r3
1001207a:	782b      	ldrb	r3, [r5, #0]
1001207c:	20e2      	movs	r0, #226	; 0xe2
1001207e:	2b00      	cmp	r3, #0
10012080:	d106      	bne.n	10012090 <gapm_reset_req_handler+0x58>
10012082:	68a3      	ldr	r3, [r4, #8]
10012084:	20e2      	movs	r0, #226	; 0xe2
10012086:	781a      	ldrb	r2, [r3, #0]
10012088:	785b      	ldrb	r3, [r3, #1]
1001208a:	2a01      	cmp	r2, #1
1001208c:	d100      	bne.n	10012090 <gapm_reset_req_handler+0x58>
1001208e:	1c18      	adds	r0, r3, #0
10012090:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
10012092:	46c0      	nop			; (mov r8, r8)
10012094:	1001a8c0 	.word	0x1001a8c0
10012098:	1001ac30 	.word	0x1001ac30
1001209c:	1001a8b4 	.word	0x1001a8b4
100120a0:	10011461 	.word	0x10011461
100120a4:	100114c5 	.word	0x100114c5

100120a8 <gapm_set_dev_config_cmd_handler>:
100120a8:	b5f0      	push	{r4, r5, r6, r7, lr}
100120aa:	b089      	sub	sp, #36	; 0x24
100120ac:	9303      	str	r3, [sp, #12]
100120ae:	ab0e      	add	r3, sp, #56	; 0x38
100120b0:	781b      	ldrb	r3, [r3, #0]
100120b2:	4c37      	ldr	r4, [pc, #220]	; (10012190 <gapm_set_dev_config_cmd_handler+0xe8>)
100120b4:	9304      	str	r3, [sp, #16]
100120b6:	ab0f      	add	r3, sp, #60	; 0x3c
100120b8:	781b      	ldrb	r3, [r3, #0]
100120ba:	270d      	movs	r7, #13
100120bc:	9305      	str	r3, [sp, #20]
100120be:	ab10      	add	r3, sp, #64	; 0x40
100120c0:	881b      	ldrh	r3, [r3, #0]
100120c2:	72a1      	strb	r1, [r4, #10]
100120c4:	9300      	str	r3, [sp, #0]
100120c6:	ab11      	add	r3, sp, #68	; 0x44
100120c8:	881b      	ldrh	r3, [r3, #0]
100120ca:	0a09      	lsrs	r1, r1, #8
100120cc:	9301      	str	r3, [sp, #4]
100120ce:	ab12      	add	r3, sp, #72	; 0x48
100120d0:	881b      	ldrh	r3, [r3, #0]
100120d2:	7260      	strb	r0, [r4, #9]
100120d4:	9302      	str	r3, [sp, #8]
100120d6:	ab06      	add	r3, sp, #24
100120d8:	1dde      	adds	r6, r3, #7
100120da:	2300      	movs	r3, #0
100120dc:	7033      	strb	r3, [r6, #0]
100120de:	2304      	movs	r3, #4
100120e0:	7023      	strb	r3, [r4, #0]
100120e2:	2300      	movs	r3, #0
100120e4:	70e3      	strb	r3, [r4, #3]
100120e6:	4b2b      	ldr	r3, [pc, #172]	; (10012194 <gapm_set_dev_config_cmd_handler+0xec>)
100120e8:	72e1      	strb	r1, [r4, #11]
100120ea:	881d      	ldrh	r5, [r3, #0]
100120ec:	881b      	ldrh	r3, [r3, #0]
100120ee:	1c11      	adds	r1, r2, #0
100120f0:	0a1b      	lsrs	r3, r3, #8
100120f2:	7163      	strb	r3, [r4, #5]
100120f4:	2303      	movs	r3, #3
100120f6:	7125      	strb	r5, [r4, #4]
100120f8:	2206      	movs	r2, #6
100120fa:	4d27      	ldr	r5, [pc, #156]	; (10012198 <gapm_set_dev_config_cmd_handler+0xf0>)
100120fc:	4827      	ldr	r0, [pc, #156]	; (1001219c <gapm_set_dev_config_cmd_handler+0xf4>)
100120fe:	7223      	strb	r3, [r4, #8]
10012100:	7067      	strb	r7, [r4, #1]
10012102:	70a7      	strb	r7, [r4, #2]
10012104:	47a8      	blx	r5
10012106:	9903      	ldr	r1, [sp, #12]
10012108:	2210      	movs	r2, #16
1001210a:	4825      	ldr	r0, [pc, #148]	; (100121a0 <gapm_set_dev_config_cmd_handler+0xf8>)
1001210c:	47a8      	blx	r5
1001210e:	466a      	mov	r2, sp
10012110:	7c12      	ldrb	r2, [r2, #16]
10012112:	1ce3      	adds	r3, r4, #3
10012114:	77da      	strb	r2, [r3, #31]
10012116:	466a      	mov	r2, sp
10012118:	7d12      	ldrb	r2, [r2, #20]
1001211a:	1d23      	adds	r3, r4, #4
1001211c:	77da      	strb	r2, [r3, #31]
1001211e:	466a      	mov	r2, sp
10012120:	7812      	ldrb	r2, [r2, #0]
10012122:	1d63      	adds	r3, r4, #5
10012124:	77da      	strb	r2, [r3, #31]
10012126:	9b00      	ldr	r3, [sp, #0]
10012128:	1da2      	adds	r2, r4, #6
1001212a:	0a1b      	lsrs	r3, r3, #8
1001212c:	77d3      	strb	r3, [r2, #31]
1001212e:	466a      	mov	r2, sp
10012130:	7912      	ldrb	r2, [r2, #4]
10012132:	1de3      	adds	r3, r4, #7
10012134:	77da      	strb	r2, [r3, #31]
10012136:	1c22      	adds	r2, r4, #0
10012138:	9b01      	ldr	r3, [sp, #4]
1001213a:	3208      	adds	r2, #8
1001213c:	0a1b      	lsrs	r3, r3, #8
1001213e:	77d3      	strb	r3, [r2, #31]
10012140:	466a      	mov	r2, sp
10012142:	1c23      	adds	r3, r4, #0
10012144:	7a12      	ldrb	r2, [r2, #8]
10012146:	3328      	adds	r3, #40	; 0x28
10012148:	701a      	strb	r2, [r3, #0]
1001214a:	1c22      	adds	r2, r4, #0
1001214c:	9b02      	ldr	r3, [sp, #8]
1001214e:	3229      	adds	r2, #41	; 0x29
10012150:	0a1b      	lsrs	r3, r3, #8
10012152:	7013      	strb	r3, [r2, #0]
10012154:	23d0      	movs	r3, #208	; 0xd0
10012156:	4d13      	ldr	r5, [pc, #76]	; (100121a4 <gapm_set_dev_config_cmd_handler+0xfc>)
10012158:	011b      	lsls	r3, r3, #4
1001215a:	802b      	strh	r3, [r5, #0]
1001215c:	2322      	movs	r3, #34	; 0x22
1001215e:	71a3      	strb	r3, [r4, #6]
10012160:	2300      	movs	r3, #0
10012162:	212a      	movs	r1, #42	; 0x2a
10012164:	71e3      	strb	r3, [r4, #7]
10012166:	1c20      	adds	r0, r4, #0
10012168:	4b0f      	ldr	r3, [pc, #60]	; (100121a8 <gapm_set_dev_config_cmd_handler+0x100>)
1001216a:	80af      	strh	r7, [r5, #4]
1001216c:	4798      	blx	r3
1001216e:	1c30      	adds	r0, r6, #0
10012170:	4b0e      	ldr	r3, [pc, #56]	; (100121ac <gapm_set_dev_config_cmd_handler+0x104>)
10012172:	4798      	blx	r3
10012174:	7833      	ldrb	r3, [r6, #0]
10012176:	20e2      	movs	r0, #226	; 0xe2
10012178:	2b00      	cmp	r3, #0
1001217a:	d106      	bne.n	1001218a <gapm_set_dev_config_cmd_handler+0xe2>
1001217c:	68ab      	ldr	r3, [r5, #8]
1001217e:	20e2      	movs	r0, #226	; 0xe2
10012180:	781a      	ldrb	r2, [r3, #0]
10012182:	785b      	ldrb	r3, [r3, #1]
10012184:	2a03      	cmp	r2, #3
10012186:	d100      	bne.n	1001218a <gapm_set_dev_config_cmd_handler+0xe2>
10012188:	1c18      	adds	r0, r3, #0
1001218a:	b009      	add	sp, #36	; 0x24
1001218c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001218e:	46c0      	nop			; (mov r8, r8)
10012190:	1001ac30 	.word	0x1001ac30
10012194:	1001a8c0 	.word	0x1001a8c0
10012198:	10014b7b 	.word	0x10014b7b
1001219c:	1001ac3c 	.word	0x1001ac3c
100121a0:	1001ac42 	.word	0x1001ac42
100121a4:	1001a8b4 	.word	0x1001a8b4
100121a8:	10011461 	.word	0x10011461
100121ac:	100114c5 	.word	0x100114c5

100121b0 <gapm_get_dev_config_cmd_handler>:
100121b0:	4684      	mov	ip, r0
100121b2:	4663      	mov	r3, ip
100121b4:	b5f0      	push	{r4, r5, r6, r7, lr}
100121b6:	b085      	sub	sp, #20
100121b8:	9100      	str	r1, [sp, #0]
100121ba:	20cf      	movs	r0, #207	; 0xcf
100121bc:	2b01      	cmp	r3, #1
100121be:	d854      	bhi.n	1001226a <gapm_get_dev_config_cmd_handler+0xba>
100121c0:	2900      	cmp	r1, #0
100121c2:	d052      	beq.n	1001226a <gapm_get_dev_config_cmd_handler+0xba>
100121c4:	2200      	movs	r2, #0
100121c6:	492a      	ldr	r1, [pc, #168]	; (10012270 <gapm_get_dev_config_cmd_handler+0xc0>)
100121c8:	ab02      	add	r3, sp, #8
100121ca:	880c      	ldrh	r4, [r1, #0]
100121cc:	8809      	ldrh	r1, [r1, #0]
100121ce:	1d9f      	adds	r7, r3, #6
100121d0:	719a      	strb	r2, [r3, #6]
100121d2:	4b28      	ldr	r3, [pc, #160]	; (10012274 <gapm_get_dev_config_cmd_handler+0xc4>)
100121d4:	0a09      	lsrs	r1, r1, #8
100121d6:	250d      	movs	r5, #13
100121d8:	2606      	movs	r6, #6
100121da:	7159      	strb	r1, [r3, #5]
100121dc:	4661      	mov	r1, ip
100121de:	701e      	strb	r6, [r3, #0]
100121e0:	705d      	strb	r5, [r3, #1]
100121e2:	709d      	strb	r5, [r3, #2]
100121e4:	70da      	strb	r2, [r3, #3]
100121e6:	711c      	strb	r4, [r3, #4]
100121e8:	2901      	cmp	r1, #1
100121ea:	d13e      	bne.n	1001226a <gapm_get_dev_config_cmd_handler+0xba>
100121ec:	21d0      	movs	r1, #208	; 0xd0
100121ee:	4c22      	ldr	r4, [pc, #136]	; (10012278 <gapm_get_dev_config_cmd_handler+0xc8>)
100121f0:	0109      	lsls	r1, r1, #4
100121f2:	8061      	strh	r1, [r4, #2]
100121f4:	4921      	ldr	r1, [pc, #132]	; (1001227c <gapm_get_dev_config_cmd_handler+0xcc>)
100121f6:	71da      	strb	r2, [r3, #7]
100121f8:	8021      	strh	r1, [r4, #0]
100121fa:	4661      	mov	r1, ip
100121fc:	721e      	strb	r6, [r3, #8]
100121fe:	7199      	strb	r1, [r3, #6]
10012200:	1c18      	adds	r0, r3, #0
10012202:	2109      	movs	r1, #9
10012204:	4b1e      	ldr	r3, [pc, #120]	; (10012280 <gapm_get_dev_config_cmd_handler+0xd0>)
10012206:	80a5      	strh	r5, [r4, #4]
10012208:	4798      	blx	r3
1001220a:	1c38      	adds	r0, r7, #0
1001220c:	4b1d      	ldr	r3, [pc, #116]	; (10012284 <gapm_get_dev_config_cmd_handler+0xd4>)
1001220e:	4798      	blx	r3
10012210:	783b      	ldrb	r3, [r7, #0]
10012212:	20e2      	movs	r0, #226	; 0xe2
10012214:	9301      	str	r3, [sp, #4]
10012216:	2b00      	cmp	r3, #0
10012218:	d127      	bne.n	1001226a <gapm_get_dev_config_cmd_handler+0xba>
1001221a:	8821      	ldrh	r1, [r4, #0]
1001221c:	4a1a      	ldr	r2, [pc, #104]	; (10012288 <gapm_get_dev_config_cmd_handler+0xd8>)
1001221e:	68a7      	ldr	r7, [r4, #8]
10012220:	3b01      	subs	r3, #1
10012222:	4291      	cmp	r1, r2
10012224:	d001      	beq.n	1001222a <gapm_get_dev_config_cmd_handler+0x7a>
10012226:	8023      	strh	r3, [r4, #0]
10012228:	e01a      	b.n	10012260 <gapm_get_dev_config_cmd_handler+0xb0>
1001222a:	8063      	strh	r3, [r4, #2]
1001222c:	9b00      	ldr	r3, [sp, #0]
1001222e:	1c39      	adds	r1, r7, #0
10012230:	1c58      	adds	r0, r3, #1
10012232:	1c32      	adds	r2, r6, #0
10012234:	4b15      	ldr	r3, [pc, #84]	; (1001228c <gapm_get_dev_config_cmd_handler+0xdc>)
10012236:	4798      	blx	r3
10012238:	79bb      	ldrb	r3, [r7, #6]
1001223a:	9a00      	ldr	r2, [sp, #0]
1001223c:	7013      	strb	r3, [r2, #0]
1001223e:	23d0      	movs	r3, #208	; 0xd0
10012240:	011b      	lsls	r3, r3, #4
10012242:	8023      	strh	r3, [r4, #0]
10012244:	ab02      	add	r3, sp, #8
10012246:	80a5      	strh	r5, [r4, #4]
10012248:	1ddd      	adds	r5, r3, #7
1001224a:	466b      	mov	r3, sp
1001224c:	791b      	ldrb	r3, [r3, #4]
1001224e:	1c28      	adds	r0, r5, #0
10012250:	702b      	strb	r3, [r5, #0]
10012252:	4b0c      	ldr	r3, [pc, #48]	; (10012284 <gapm_get_dev_config_cmd_handler+0xd4>)
10012254:	4798      	blx	r3
10012256:	782b      	ldrb	r3, [r5, #0]
10012258:	20d0      	movs	r0, #208	; 0xd0
1001225a:	2b00      	cmp	r3, #0
1001225c:	d105      	bne.n	1001226a <gapm_get_dev_config_cmd_handler+0xba>
1001225e:	68a7      	ldr	r7, [r4, #8]
10012260:	783b      	ldrb	r3, [r7, #0]
10012262:	7878      	ldrb	r0, [r7, #1]
10012264:	2b06      	cmp	r3, #6
10012266:	d000      	beq.n	1001226a <gapm_get_dev_config_cmd_handler+0xba>
10012268:	20e2      	movs	r0, #226	; 0xe2
1001226a:	b005      	add	sp, #20
1001226c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001226e:	46c0      	nop			; (mov r8, r8)
10012270:	1001a8c0 	.word	0x1001a8c0
10012274:	1001ac30 	.word	0x1001ac30
10012278:	1001a8b4 	.word	0x1001a8b4
1001227c:	00000d08 	.word	0x00000d08
10012280:	10011461 	.word	0x10011461
10012284:	100114c5 	.word	0x100114c5
10012288:	0000ffff 	.word	0x0000ffff
1001228c:	10014b7b 	.word	0x10014b7b

10012290 <gapm_cancel_cmd_handler>:
10012290:	b537      	push	{r0, r1, r2, r4, r5, lr}
10012292:	4916      	ldr	r1, [pc, #88]	; (100122ec <gapm_cancel_cmd_handler+0x5c>)
10012294:	4816      	ldr	r0, [pc, #88]	; (100122f0 <gapm_cancel_cmd_handler+0x60>)
10012296:	880c      	ldrh	r4, [r1, #0]
10012298:	8809      	ldrh	r1, [r1, #0]
1001229a:	466b      	mov	r3, sp
1001229c:	0a09      	lsrs	r1, r1, #8
1001229e:	7141      	strb	r1, [r0, #5]
100122a0:	2102      	movs	r1, #2
100122a2:	2203      	movs	r2, #3
100122a4:	7201      	strb	r1, [r0, #8]
100122a6:	21d0      	movs	r1, #208	; 0xd0
100122a8:	1ddd      	adds	r5, r3, #7
100122aa:	2300      	movs	r3, #0
100122ac:	7104      	strb	r4, [r0, #4]
100122ae:	4c11      	ldr	r4, [pc, #68]	; (100122f4 <gapm_cancel_cmd_handler+0x64>)
100122b0:	7002      	strb	r2, [r0, #0]
100122b2:	0109      	lsls	r1, r1, #4
100122b4:	320a      	adds	r2, #10
100122b6:	702b      	strb	r3, [r5, #0]
100122b8:	7042      	strb	r2, [r0, #1]
100122ba:	7082      	strb	r2, [r0, #2]
100122bc:	70c3      	strb	r3, [r0, #3]
100122be:	8021      	strh	r1, [r4, #0]
100122c0:	80a2      	strh	r2, [r4, #4]
100122c2:	71c3      	strb	r3, [r0, #7]
100122c4:	3a0c      	subs	r2, #12
100122c6:	2109      	movs	r1, #9
100122c8:	4b0b      	ldr	r3, [pc, #44]	; (100122f8 <gapm_cancel_cmd_handler+0x68>)
100122ca:	7182      	strb	r2, [r0, #6]
100122cc:	4798      	blx	r3
100122ce:	1c28      	adds	r0, r5, #0
100122d0:	4b0a      	ldr	r3, [pc, #40]	; (100122fc <gapm_cancel_cmd_handler+0x6c>)
100122d2:	4798      	blx	r3
100122d4:	7828      	ldrb	r0, [r5, #0]
100122d6:	2800      	cmp	r0, #0
100122d8:	d001      	beq.n	100122de <gapm_cancel_cmd_handler+0x4e>
100122da:	20e2      	movs	r0, #226	; 0xe2
100122dc:	e004      	b.n	100122e8 <gapm_cancel_cmd_handler+0x58>
100122de:	68a3      	ldr	r3, [r4, #8]
100122e0:	785b      	ldrb	r3, [r3, #1]
100122e2:	2b44      	cmp	r3, #68	; 0x44
100122e4:	d000      	beq.n	100122e8 <gapm_cancel_cmd_handler+0x58>
100122e6:	1c18      	adds	r0, r3, #0
100122e8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
100122ea:	46c0      	nop			; (mov r8, r8)
100122ec:	1001a8c0 	.word	0x1001a8c0
100122f0:	1001ac30 	.word	0x1001ac30
100122f4:	1001a8b4 	.word	0x1001a8b4
100122f8:	10011461 	.word	0x10011461
100122fc:	100114c5 	.word	0x100114c5

10012300 <gapm_dev_bdaddr_ind_handler>:
10012300:	b538      	push	{r3, r4, r5, lr}
10012302:	1c05      	adds	r5, r0, #0
10012304:	1c0c      	adds	r4, r1, #0
10012306:	1c48      	adds	r0, r1, #1
10012308:	2206      	movs	r2, #6
1001230a:	1c29      	adds	r1, r5, #0
1001230c:	4b02      	ldr	r3, [pc, #8]	; (10012318 <gapm_dev_bdaddr_ind_handler+0x18>)
1001230e:	4798      	blx	r3
10012310:	79ab      	ldrb	r3, [r5, #6]
10012312:	2000      	movs	r0, #0
10012314:	7023      	strb	r3, [r4, #0]
10012316:	bd38      	pop	{r3, r4, r5, pc}
10012318:	10014b7b 	.word	0x10014b7b

1001231c <gapm_cmp_evt>:
1001231c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001231e:	7803      	ldrb	r3, [r0, #0]
10012320:	7845      	ldrb	r5, [r0, #1]
10012322:	3b0c      	subs	r3, #12
10012324:	1e18      	subs	r0, r3, #0
10012326:	280b      	cmp	r0, #11
10012328:	d900      	bls.n	1001232c <gapm_cmp_evt+0x10>
1001232a:	e08d      	b.n	10012448 <gapm_cmp_evt+0x12c>
1001232c:	1c0c      	adds	r4, r1, #0
1001232e:	f000 fd5f 	bl	10012df0 <__gnu_thumb1_case_uqi>
10012332:	1952      	.short	0x1952
10012334:	068b1919 	.word	0x068b1919
10012338:	8b595906 	.word	0x8b595906
1001233c:	0d8b      	.short	0x0d8b
1001233e:	2300      	movs	r3, #0
10012340:	2d45      	cmp	r5, #69	; 0x45
10012342:	d000      	beq.n	10012346 <gapm_cmp_evt+0x2a>
10012344:	1c2b      	adds	r3, r5, #0
10012346:	7023      	strb	r3, [r4, #0]
10012348:	2002      	movs	r0, #2
1001234a:	e07e      	b.n	1001244a <gapm_cmp_evt+0x12e>
1001234c:	203b      	movs	r0, #59	; 0x3b
1001234e:	2d00      	cmp	r5, #0
10012350:	d100      	bne.n	10012354 <gapm_cmp_evt+0x38>
10012352:	e07a      	b.n	1001244a <gapm_cmp_evt+0x12e>
10012354:	700d      	strb	r5, [r1, #0]
10012356:	1c48      	adds	r0, r1, #1
10012358:	2210      	movs	r2, #16
1001235a:	2100      	movs	r1, #0
1001235c:	4b3b      	ldr	r3, [pc, #236]	; (1001244c <gapm_cmp_evt+0x130>)
1001235e:	4798      	blx	r3
10012360:	200f      	movs	r0, #15
10012362:	e072      	b.n	1001244a <gapm_cmp_evt+0x12e>
10012364:	2d00      	cmp	r5, #0
10012366:	d134      	bne.n	100123d2 <gapm_cmp_evt+0xb6>
10012368:	4b39      	ldr	r3, [pc, #228]	; (10012450 <gapm_cmp_evt+0x134>)
1001236a:	4798      	blx	r3
1001236c:	1e43      	subs	r3, r0, #1
1001236e:	b2db      	uxtb	r3, r3
10012370:	1c28      	adds	r0, r5, #0
10012372:	2b06      	cmp	r3, #6
10012374:	d869      	bhi.n	1001244a <gapm_cmp_evt+0x12e>
10012376:	466b      	mov	r3, sp
10012378:	4e36      	ldr	r6, [pc, #216]	; (10012454 <gapm_cmp_evt+0x138>)
1001237a:	1dd9      	adds	r1, r3, #7
1001237c:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
1001237e:	4b36      	ldr	r3, [pc, #216]	; (10012458 <gapm_cmp_evt+0x13c>)
10012380:	4798      	blx	r3
10012382:	2312      	movs	r3, #18
10012384:	4358      	muls	r0, r3
10012386:	4935      	ldr	r1, [pc, #212]	; (1001245c <gapm_cmp_evt+0x140>)
10012388:	1809      	adds	r1, r1, r0
1001238a:	1c0b      	adds	r3, r1, #0
1001238c:	894a      	ldrh	r2, [r1, #10]
1001238e:	3308      	adds	r3, #8
10012390:	8122      	strh	r2, [r4, #8]
10012392:	784f      	ldrb	r7, [r1, #1]
10012394:	72a5      	strb	r5, [r4, #10]
10012396:	7027      	strb	r7, [r4, #0]
10012398:	898a      	ldrh	r2, [r1, #12]
1001239a:	1c60      	adds	r0, r4, #1
1001239c:	81a2      	strh	r2, [r4, #12]
1001239e:	88db      	ldrh	r3, [r3, #6]
100123a0:	3102      	adds	r1, #2
100123a2:	81e3      	strh	r3, [r4, #14]
100123a4:	89cb      	ldrh	r3, [r1, #14]
100123a6:	2206      	movs	r2, #6
100123a8:	8223      	strh	r3, [r4, #16]
100123aa:	4b2d      	ldr	r3, [pc, #180]	; (10012460 <gapm_cmp_evt+0x144>)
100123ac:	4798      	blx	r3
100123ae:	2f00      	cmp	r7, #0
100123b0:	d00a      	beq.n	100123c8 <gapm_cmp_evt+0xac>
100123b2:	79a3      	ldrb	r3, [r4, #6]
100123b4:	223f      	movs	r2, #63	; 0x3f
100123b6:	1c19      	adds	r1, r3, #0
100123b8:	3501      	adds	r5, #1
100123ba:	4391      	bics	r1, r2
100123bc:	29c0      	cmp	r1, #192	; 0xc0
100123be:	d003      	beq.n	100123c8 <gapm_cmp_evt+0xac>
100123c0:	065b      	lsls	r3, r3, #25
100123c2:	0fdb      	lsrs	r3, r3, #31
100123c4:	3502      	adds	r5, #2
100123c6:	1aed      	subs	r5, r5, r3
100123c8:	2301      	movs	r3, #1
100123ca:	425b      	negs	r3, r3
100123cc:	7025      	strb	r5, [r4, #0]
100123ce:	85b3      	strh	r3, [r6, #44]	; 0x2c
100123d0:	e038      	b.n	10012444 <gapm_cmp_evt+0x128>
100123d2:	700d      	strb	r5, [r1, #0]
100123d4:	e004      	b.n	100123e0 <gapm_cmp_evt+0xc4>
100123d6:	2300      	movs	r3, #0
100123d8:	2d45      	cmp	r5, #69	; 0x45
100123da:	d000      	beq.n	100123de <gapm_cmp_evt+0xc2>
100123dc:	1c2b      	adds	r3, r5, #0
100123de:	7023      	strb	r3, [r4, #0]
100123e0:	2003      	movs	r0, #3
100123e2:	e032      	b.n	1001244a <gapm_cmp_evt+0x12e>
100123e4:	4e1b      	ldr	r6, [pc, #108]	; (10012454 <gapm_cmp_evt+0x138>)
100123e6:	2100      	movs	r1, #0
100123e8:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
100123ea:	4b1b      	ldr	r3, [pc, #108]	; (10012458 <gapm_cmp_evt+0x13c>)
100123ec:	4798      	blx	r3
100123ee:	2807      	cmp	r0, #7
100123f0:	d818      	bhi.n	10012424 <gapm_cmp_evt+0x108>
100123f2:	2301      	movs	r3, #1
100123f4:	425b      	negs	r3, r3
100123f6:	85b3      	strh	r3, [r6, #44]	; 0x2c
100123f8:	3313      	adds	r3, #19
100123fa:	4358      	muls	r0, r3
100123fc:	4917      	ldr	r1, [pc, #92]	; (1001245c <gapm_cmp_evt+0x140>)
100123fe:	1809      	adds	r1, r1, r0
10012400:	1c0b      	adds	r3, r1, #0
10012402:	894a      	ldrh	r2, [r1, #10]
10012404:	3308      	adds	r3, #8
10012406:	8122      	strh	r2, [r4, #8]
10012408:	784a      	ldrb	r2, [r1, #1]
1001240a:	72a5      	strb	r5, [r4, #10]
1001240c:	7022      	strb	r2, [r4, #0]
1001240e:	898a      	ldrh	r2, [r1, #12]
10012410:	1c60      	adds	r0, r4, #1
10012412:	81a2      	strh	r2, [r4, #12]
10012414:	88db      	ldrh	r3, [r3, #6]
10012416:	3102      	adds	r1, #2
10012418:	81e3      	strh	r3, [r4, #14]
1001241a:	89cb      	ldrh	r3, [r1, #14]
1001241c:	2206      	movs	r2, #6
1001241e:	8223      	strh	r3, [r4, #16]
10012420:	4b0f      	ldr	r3, [pc, #60]	; (10012460 <gapm_cmp_evt+0x144>)
10012422:	4798      	blx	r3
10012424:	2200      	movs	r2, #0
10012426:	7823      	ldrb	r3, [r4, #0]
10012428:	4293      	cmp	r3, r2
1001242a:	d00a      	beq.n	10012442 <gapm_cmp_evt+0x126>
1001242c:	79a3      	ldrb	r3, [r4, #6]
1001242e:	323f      	adds	r2, #63	; 0x3f
10012430:	1c19      	adds	r1, r3, #0
10012432:	4391      	bics	r1, r2
10012434:	3a3e      	subs	r2, #62	; 0x3e
10012436:	29c0      	cmp	r1, #192	; 0xc0
10012438:	d003      	beq.n	10012442 <gapm_cmp_evt+0x126>
1001243a:	065b      	lsls	r3, r3, #25
1001243c:	0fdb      	lsrs	r3, r3, #31
1001243e:	3202      	adds	r2, #2
10012440:	1ad2      	subs	r2, r2, r3
10012442:	7022      	strb	r2, [r4, #0]
10012444:	2005      	movs	r0, #5
10012446:	e000      	b.n	1001244a <gapm_cmp_evt+0x12e>
10012448:	2000      	movs	r0, #0
1001244a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1001244c:	10014b8d 	.word	0x10014b8d
10012450:	1001166d 	.word	0x1001166d
10012454:	1001a952 	.word	0x1001a952
10012458:	10011631 	.word	0x10011631
1001245c:	1001a8c2 	.word	0x1001a8c2
10012460:	10014b7b 	.word	0x10014b7b

10012464 <gapm_start_adv_cmd_handler>:
10012464:	b5f0      	push	{r4, r5, r6, r7, lr}
10012466:	b089      	sub	sp, #36	; 0x24
10012468:	9303      	str	r3, [sp, #12]
1001246a:	ab0e      	add	r3, sp, #56	; 0x38
1001246c:	9102      	str	r1, [sp, #8]
1001246e:	cb02      	ldmia	r3!, {r1}
10012470:	aa08      	add	r2, sp, #32
10012472:	881b      	ldrh	r3, [r3, #0]
10012474:	4e3c      	ldr	r6, [pc, #240]	; (10012568 <gapm_start_adv_cmd_handler+0x104>)
10012476:	9300      	str	r3, [sp, #0]
10012478:	ab10      	add	r3, sp, #64	; 0x40
1001247a:	881b      	ldrh	r3, [r3, #0]
1001247c:	240d      	movs	r4, #13
1001247e:	469c      	mov	ip, r3
10012480:	ab11      	add	r3, sp, #68	; 0x44
10012482:	781b      	ldrb	r3, [r3, #0]
10012484:	9304      	str	r3, [sp, #16]
10012486:	ab12      	add	r3, sp, #72	; 0x48
10012488:	781b      	ldrb	r3, [r3, #0]
1001248a:	9305      	str	r3, [sp, #20]
1001248c:	ab13      	add	r3, sp, #76	; 0x4c
1001248e:	781b      	ldrb	r3, [r3, #0]
10012490:	9306      	str	r3, [sp, #24]
10012492:	ab14      	add	r3, sp, #80	; 0x50
10012494:	781b      	ldrb	r3, [r3, #0]
10012496:	9301      	str	r3, [sp, #4]
10012498:	2319      	movs	r3, #25
1001249a:	189b      	adds	r3, r3, r2
1001249c:	7fdd      	ldrb	r5, [r3, #31]
1001249e:	ab18      	add	r3, sp, #96	; 0x60
100124a0:	881f      	ldrh	r7, [r3, #0]
100124a2:	ab19      	add	r3, sp, #100	; 0x64
100124a4:	781b      	ldrb	r3, [r3, #0]
100124a6:	8832      	ldrh	r2, [r6, #0]
100124a8:	9307      	str	r3, [sp, #28]
100124aa:	4b30      	ldr	r3, [pc, #192]	; (1001256c <gapm_start_adv_cmd_handler+0x108>)
100124ac:	8836      	ldrh	r6, [r6, #0]
100124ae:	711a      	strb	r2, [r3, #4]
100124b0:	466a      	mov	r2, sp
100124b2:	7a12      	ldrb	r2, [r2, #8]
100124b4:	701c      	strb	r4, [r3, #0]
100124b6:	705c      	strb	r4, [r3, #1]
100124b8:	709c      	strb	r4, [r3, #2]
100124ba:	725a      	strb	r2, [r3, #9]
100124bc:	2400      	movs	r4, #0
100124be:	466a      	mov	r2, sp
100124c0:	0a36      	lsrs	r6, r6, #8
100124c2:	70dc      	strb	r4, [r3, #3]
100124c4:	7218      	strb	r0, [r3, #8]
100124c6:	729c      	strb	r4, [r3, #10]
100124c8:	715e      	strb	r6, [r3, #5]
100124ca:	72dc      	strb	r4, [r3, #11]
100124cc:	7812      	ldrb	r2, [r2, #0]
100124ce:	380e      	subs	r0, #14
100124d0:	731a      	strb	r2, [r3, #12]
100124d2:	9a00      	ldr	r2, [sp, #0]
100124d4:	0a14      	lsrs	r4, r2, #8
100124d6:	4662      	mov	r2, ip
100124d8:	739a      	strb	r2, [r3, #14]
100124da:	4662      	mov	r2, ip
100124dc:	735c      	strb	r4, [r3, #13]
100124de:	0a14      	lsrs	r4, r2, #8
100124e0:	466a      	mov	r2, sp
100124e2:	7c12      	ldrb	r2, [r2, #16]
100124e4:	73dc      	strb	r4, [r3, #15]
100124e6:	741a      	strb	r2, [r3, #16]
100124e8:	1c1c      	adds	r4, r3, #0
100124ea:	2801      	cmp	r0, #1
100124ec:	d809      	bhi.n	10012502 <gapm_start_adv_cmd_handler+0x9e>
100124ee:	2900      	cmp	r1, #0
100124f0:	d003      	beq.n	100124fa <gapm_start_adv_cmd_handler+0x96>
100124f2:	481f      	ldr	r0, [pc, #124]	; (10012570 <gapm_start_adv_cmd_handler+0x10c>)
100124f4:	2206      	movs	r2, #6
100124f6:	4b1f      	ldr	r3, [pc, #124]	; (10012574 <gapm_start_adv_cmd_handler+0x110>)
100124f8:	4798      	blx	r3
100124fa:	466b      	mov	r3, sp
100124fc:	7b1b      	ldrb	r3, [r3, #12]
100124fe:	75e3      	strb	r3, [r4, #23]
10012500:	e014      	b.n	1001252c <gapm_start_adv_cmd_handler+0xc8>
10012502:	466b      	mov	r3, sp
10012504:	7d1b      	ldrb	r3, [r3, #20]
10012506:	9915      	ldr	r1, [sp, #84]	; 0x54
10012508:	7463      	strb	r3, [r4, #17]
1001250a:	466b      	mov	r3, sp
1001250c:	7e1b      	ldrb	r3, [r3, #24]
1001250e:	9a01      	ldr	r2, [sp, #4]
10012510:	74a3      	strb	r3, [r4, #18]
10012512:	466b      	mov	r3, sp
10012514:	791b      	ldrb	r3, [r3, #4]
10012516:	4818      	ldr	r0, [pc, #96]	; (10012578 <gapm_start_adv_cmd_handler+0x114>)
10012518:	4e16      	ldr	r6, [pc, #88]	; (10012574 <gapm_start_adv_cmd_handler+0x110>)
1001251a:	74e3      	strb	r3, [r4, #19]
1001251c:	47b0      	blx	r6
1001251e:	1c23      	adds	r3, r4, #0
10012520:	4816      	ldr	r0, [pc, #88]	; (1001257c <gapm_start_adv_cmd_handler+0x118>)
10012522:	3330      	adds	r3, #48	; 0x30
10012524:	9917      	ldr	r1, [sp, #92]	; 0x5c
10012526:	1c2a      	adds	r2, r5, #0
10012528:	701d      	strb	r5, [r3, #0]
1001252a:	47b0      	blx	r6
1001252c:	1c22      	adds	r2, r4, #0
1001252e:	23a5      	movs	r3, #165	; 0xa5
10012530:	3250      	adds	r2, #80	; 0x50
10012532:	7013      	strb	r3, [r2, #0]
10012534:	1c22      	adds	r2, r4, #0
10012536:	3251      	adds	r2, #81	; 0x51
10012538:	7013      	strb	r3, [r2, #0]
1001253a:	1c23      	adds	r3, r4, #0
1001253c:	1c22      	adds	r2, r4, #0
1001253e:	3352      	adds	r3, #82	; 0x52
10012540:	701f      	strb	r7, [r3, #0]
10012542:	3253      	adds	r2, #83	; 0x53
10012544:	0a3b      	lsrs	r3, r7, #8
10012546:	7013      	strb	r3, [r2, #0]
10012548:	466a      	mov	r2, sp
1001254a:	1c23      	adds	r3, r4, #0
1001254c:	7f12      	ldrb	r2, [r2, #28]
1001254e:	3354      	adds	r3, #84	; 0x54
10012550:	701a      	strb	r2, [r3, #0]
10012552:	234d      	movs	r3, #77	; 0x4d
10012554:	2500      	movs	r5, #0
10012556:	71a3      	strb	r3, [r4, #6]
10012558:	1c20      	adds	r0, r4, #0
1001255a:	2155      	movs	r1, #85	; 0x55
1001255c:	4b08      	ldr	r3, [pc, #32]	; (10012580 <gapm_start_adv_cmd_handler+0x11c>)
1001255e:	71e5      	strb	r5, [r4, #7]
10012560:	4798      	blx	r3
10012562:	1c28      	adds	r0, r5, #0
10012564:	b009      	add	sp, #36	; 0x24
10012566:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012568:	1001a8c0 	.word	0x1001a8c0
1001256c:	1001ac30 	.word	0x1001ac30
10012570:	1001ac41 	.word	0x1001ac41
10012574:	10014b7b 	.word	0x10014b7b
10012578:	1001ac44 	.word	0x1001ac44
1001257c:	1001ac61 	.word	0x1001ac61
10012580:	10011461 	.word	0x10011461

10012584 <get_gap_local_addr_type>:
10012584:	4b04      	ldr	r3, [pc, #16]	; (10012598 <get_gap_local_addr_type+0x14>)
10012586:	2001      	movs	r0, #1
10012588:	791b      	ldrb	r3, [r3, #4]
1001258a:	2b02      	cmp	r3, #2
1001258c:	d003      	beq.n	10012596 <get_gap_local_addr_type+0x12>
1001258e:	3b03      	subs	r3, #3
10012590:	4258      	negs	r0, r3
10012592:	4158      	adcs	r0, r3
10012594:	0040      	lsls	r0, r0, #1
10012596:	4770      	bx	lr
10012598:	1001a952 	.word	0x1001a952

1001259c <gapm_adv_report_evt_handler>:
1001259c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001259e:	7843      	ldrb	r3, [r0, #1]
100125a0:	1c05      	adds	r5, r0, #0
100125a2:	9301      	str	r3, [sp, #4]
100125a4:	466b      	mov	r3, sp
100125a6:	1c0c      	adds	r4, r1, #0
100125a8:	791b      	ldrb	r3, [r3, #4]
100125aa:	7806      	ldrb	r6, [r0, #0]
100125ac:	2206      	movs	r2, #6
100125ae:	704b      	strb	r3, [r1, #1]
100125b0:	1c88      	adds	r0, r1, #2
100125b2:	4f1b      	ldr	r7, [pc, #108]	; (10012620 <gapm_adv_report_evt_handler+0x84>)
100125b4:	1ca9      	adds	r1, r5, #2
100125b6:	47b8      	blx	r7
100125b8:	1c20      	adds	r0, r4, #0
100125ba:	1c29      	adds	r1, r5, #0
100125bc:	7a2a      	ldrb	r2, [r5, #8]
100125be:	3008      	adds	r0, #8
100125c0:	77c2      	strb	r2, [r0, #31]
100125c2:	3109      	adds	r1, #9
100125c4:	3528      	adds	r5, #40	; 0x28
100125c6:	47b8      	blx	r7
100125c8:	782b      	ldrb	r3, [r5, #0]
100125ca:	b25a      	sxtb	r2, r3
100125cc:	2a00      	cmp	r2, #0
100125ce:	da01      	bge.n	100125d4 <gapm_adv_report_evt_handler+0x38>
100125d0:	3301      	adds	r3, #1
100125d2:	b2db      	uxtb	r3, r3
100125d4:	1c22      	adds	r2, r4, #0
100125d6:	3228      	adds	r2, #40	; 0x28
100125d8:	7013      	strb	r3, [r2, #0]
100125da:	2200      	movs	r2, #0
100125dc:	9b01      	ldr	r3, [sp, #4]
100125de:	4293      	cmp	r3, r2
100125e0:	d00a      	beq.n	100125f8 <gapm_adv_report_evt_handler+0x5c>
100125e2:	79e3      	ldrb	r3, [r4, #7]
100125e4:	323f      	adds	r2, #63	; 0x3f
100125e6:	1c19      	adds	r1, r3, #0
100125e8:	4391      	bics	r1, r2
100125ea:	3a3e      	subs	r2, #62	; 0x3e
100125ec:	29c0      	cmp	r1, #192	; 0xc0
100125ee:	d003      	beq.n	100125f8 <gapm_adv_report_evt_handler+0x5c>
100125f0:	065b      	lsls	r3, r3, #25
100125f2:	0fdb      	lsrs	r3, r3, #31
100125f4:	3202      	adds	r2, #2
100125f6:	1ad2      	subs	r2, r2, r3
100125f8:	7062      	strb	r2, [r4, #1]
100125fa:	2e04      	cmp	r6, #4
100125fc:	d80f      	bhi.n	1001261e <gapm_adv_report_evt_handler+0x82>
100125fe:	1c30      	adds	r0, r6, #0
10012600:	f000 fbf6 	bl	10012df0 <__gnu_thumb1_case_uqi>
10012604:	09070503 	.word	0x09070503
10012608:	0b          	.byte	0x0b
10012609:	00          	.byte	0x00
1001260a:	2300      	movs	r3, #0
1001260c:	e006      	b.n	1001261c <gapm_adv_report_evt_handler+0x80>
1001260e:	2301      	movs	r3, #1
10012610:	e004      	b.n	1001261c <gapm_adv_report_evt_handler+0x80>
10012612:	2302      	movs	r3, #2
10012614:	e002      	b.n	1001261c <gapm_adv_report_evt_handler+0x80>
10012616:	2303      	movs	r3, #3
10012618:	e000      	b.n	1001261c <gapm_adv_report_evt_handler+0x80>
1001261a:	2305      	movs	r3, #5
1001261c:	7023      	strb	r3, [r4, #0]
1001261e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10012620:	10014b7b 	.word	0x10014b7b

10012624 <gapm_resolv_addr_cmd_handler>:
10012624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10012626:	2314      	movs	r3, #20
10012628:	4c12      	ldr	r4, [pc, #72]	; (10012674 <gapm_resolv_addr_cmd_handler+0x50>)
1001262a:	1c17      	adds	r7, r2, #0
1001262c:	7023      	strb	r3, [r4, #0]
1001262e:	3b07      	subs	r3, #7
10012630:	7063      	strb	r3, [r4, #1]
10012632:	70a3      	strb	r3, [r4, #2]
10012634:	2300      	movs	r3, #0
10012636:	70e3      	strb	r3, [r4, #3]
10012638:	4b0f      	ldr	r3, [pc, #60]	; (10012678 <gapm_resolv_addr_cmd_handler+0x54>)
1001263a:	1c05      	adds	r5, r0, #0
1001263c:	881a      	ldrh	r2, [r3, #0]
1001263e:	881b      	ldrh	r3, [r3, #0]
10012640:	4e0e      	ldr	r6, [pc, #56]	; (1001267c <gapm_resolv_addr_cmd_handler+0x58>)
10012642:	0a1b      	lsrs	r3, r3, #8
10012644:	7163      	strb	r3, [r4, #5]
10012646:	2317      	movs	r3, #23
10012648:	012d      	lsls	r5, r5, #4
1001264a:	7122      	strb	r2, [r4, #4]
1001264c:	7260      	strb	r0, [r4, #9]
1001264e:	2206      	movs	r2, #6
10012650:	480b      	ldr	r0, [pc, #44]	; (10012680 <gapm_resolv_addr_cmd_handler+0x5c>)
10012652:	7223      	strb	r3, [r4, #8]
10012654:	47b0      	blx	r6
10012656:	1c39      	adds	r1, r7, #0
10012658:	1c2a      	adds	r2, r5, #0
1001265a:	480a      	ldr	r0, [pc, #40]	; (10012684 <gapm_resolv_addr_cmd_handler+0x60>)
1001265c:	47b0      	blx	r6
1001265e:	1c29      	adds	r1, r5, #0
10012660:	3110      	adds	r1, #16
10012662:	1c0b      	adds	r3, r1, #0
10012664:	3b08      	subs	r3, #8
10012666:	71a3      	strb	r3, [r4, #6]
10012668:	121b      	asrs	r3, r3, #8
1001266a:	71e3      	strb	r3, [r4, #7]
1001266c:	1c20      	adds	r0, r4, #0
1001266e:	4b06      	ldr	r3, [pc, #24]	; (10012688 <gapm_resolv_addr_cmd_handler+0x64>)
10012670:	4798      	blx	r3
10012672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10012674:	1001ac30 	.word	0x1001ac30
10012678:	1001a8c0 	.word	0x1001a8c0
1001267c:	10014b7b 	.word	0x10014b7b
10012680:	1001ac3a 	.word	0x1001ac3a
10012684:	1001ac40 	.word	0x1001ac40
10012688:	10011461 	.word	0x10011461

1001268c <gapm_addr_solved_ind_handler>:
1001268c:	b570      	push	{r4, r5, r6, lr}
1001268e:	1c04      	adds	r4, r0, #0
10012690:	1c08      	adds	r0, r1, #0
10012692:	1c0d      	adds	r5, r1, #0
10012694:	4e05      	ldr	r6, [pc, #20]	; (100126ac <gapm_addr_solved_ind_handler+0x20>)
10012696:	1c21      	adds	r1, r4, #0
10012698:	2206      	movs	r2, #6
1001269a:	3011      	adds	r0, #17
1001269c:	47b0      	blx	r6
1001269e:	1c68      	adds	r0, r5, #1
100126a0:	1da1      	adds	r1, r4, #6
100126a2:	2210      	movs	r2, #16
100126a4:	47b0      	blx	r6
100126a6:	2300      	movs	r3, #0
100126a8:	702b      	strb	r3, [r5, #0]
100126aa:	bd70      	pop	{r4, r5, r6, pc}
100126ac:	10014b7b 	.word	0x10014b7b

100126b0 <gapm_profile_added_ind_handler>:
100126b0:	b510      	push	{r4, lr}
100126b2:	7843      	ldrb	r3, [r0, #1]
100126b4:	7902      	ldrb	r2, [r0, #4]
100126b6:	7944      	ldrb	r4, [r0, #5]
100126b8:	7800      	ldrb	r0, [r0, #0]
100126ba:	021b      	lsls	r3, r3, #8
100126bc:	4303      	orrs	r3, r0
100126be:	2b1b      	cmp	r3, #27
100126c0:	d104      	bne.n	100126cc <gapm_profile_added_ind_handler+0x1c>
100126c2:	2300      	movs	r3, #0
100126c4:	700b      	strb	r3, [r1, #0]
100126c6:	0223      	lsls	r3, r4, #8
100126c8:	4313      	orrs	r3, r2
100126ca:	804b      	strh	r3, [r1, #2]
100126cc:	203b      	movs	r0, #59	; 0x3b
100126ce:	bd10      	pop	{r4, pc}

100126d0 <gattc_read_req_ind_parser>:
100126d0:	7843      	ldrb	r3, [r0, #1]
100126d2:	7802      	ldrb	r2, [r0, #0]
100126d4:	021b      	lsls	r3, r3, #8
100126d6:	4313      	orrs	r3, r2
100126d8:	804b      	strh	r3, [r1, #2]
100126da:	4770      	bx	lr

100126dc <gattc_write_req_ind_parser>:
100126dc:	b508      	push	{r3, lr}
100126de:	1c13      	adds	r3, r2, #0
100126e0:	0a00      	lsrs	r0, r0, #8
100126e2:	8010      	strh	r0, [r2, #0]
100126e4:	784a      	ldrb	r2, [r1, #1]
100126e6:	7808      	ldrb	r0, [r1, #0]
100126e8:	0212      	lsls	r2, r2, #8
100126ea:	4302      	orrs	r2, r0
100126ec:	805a      	strh	r2, [r3, #2]
100126ee:	78ca      	ldrb	r2, [r1, #3]
100126f0:	7888      	ldrb	r0, [r1, #2]
100126f2:	0212      	lsls	r2, r2, #8
100126f4:	4302      	orrs	r2, r0
100126f6:	809a      	strh	r2, [r3, #4]
100126f8:	794a      	ldrb	r2, [r1, #5]
100126fa:	7908      	ldrb	r0, [r1, #4]
100126fc:	0212      	lsls	r2, r2, #8
100126fe:	4302      	orrs	r2, r0
10012700:	80da      	strh	r2, [r3, #6]
10012702:	3308      	adds	r3, #8
10012704:	1c18      	adds	r0, r3, #0
10012706:	3106      	adds	r1, #6
10012708:	4b01      	ldr	r3, [pc, #4]	; (10012710 <gattc_write_req_ind_parser+0x34>)
1001270a:	4798      	blx	r3
1001270c:	bd08      	pop	{r3, pc}
1001270e:	46c0      	nop			; (mov r8, r8)
10012710:	10014b7b 	.word	0x10014b7b

10012714 <gattc_att_info_req_parser>:
10012714:	7843      	ldrb	r3, [r0, #1]
10012716:	7802      	ldrb	r2, [r0, #0]
10012718:	021b      	lsls	r3, r3, #8
1001271a:	4313      	orrs	r3, r2
1001271c:	800b      	strh	r3, [r1, #0]
1001271e:	4770      	bx	lr

10012720 <gattc_read_cfm>:
10012720:	b538      	push	{r3, r4, r5, lr}
10012722:	2514      	movs	r5, #20
10012724:	1c1c      	adds	r4, r3, #0
10012726:	4b14      	ldr	r3, [pc, #80]	; (10012778 <gattc_read_cfm+0x58>)
10012728:	70d9      	strb	r1, [r3, #3]
1001272a:	4914      	ldr	r1, [pc, #80]	; (1001277c <gattc_read_cfm+0x5c>)
1001272c:	701d      	strb	r5, [r3, #0]
1001272e:	3d08      	subs	r5, #8
10012730:	705d      	strb	r5, [r3, #1]
10012732:	709d      	strb	r5, [r3, #2]
10012734:	880d      	ldrh	r5, [r1, #0]
10012736:	8809      	ldrh	r1, [r1, #0]
10012738:	7218      	strb	r0, [r3, #8]
1001273a:	0a09      	lsrs	r1, r1, #8
1001273c:	7159      	strb	r1, [r3, #5]
1001273e:	0a00      	lsrs	r0, r0, #8
10012740:	0a21      	lsrs	r1, r4, #8
10012742:	711d      	strb	r5, [r3, #4]
10012744:	7258      	strb	r0, [r3, #9]
10012746:	729c      	strb	r4, [r3, #10]
10012748:	72d9      	strb	r1, [r3, #11]
1001274a:	731a      	strb	r2, [r3, #12]
1001274c:	1c1d      	adds	r5, r3, #0
1001274e:	2c00      	cmp	r4, #0
10012750:	d007      	beq.n	10012762 <gattc_read_cfm+0x42>
10012752:	9904      	ldr	r1, [sp, #16]
10012754:	1c22      	adds	r2, r4, #0
10012756:	480a      	ldr	r0, [pc, #40]	; (10012780 <gattc_read_cfm+0x60>)
10012758:	4b0a      	ldr	r3, [pc, #40]	; (10012784 <gattc_read_cfm+0x64>)
1001275a:	340d      	adds	r4, #13
1001275c:	4798      	blx	r3
1001275e:	b2a1      	uxth	r1, r4
10012760:	e001      	b.n	10012766 <gattc_read_cfm+0x46>
10012762:	210e      	movs	r1, #14
10012764:	735c      	strb	r4, [r3, #13]
10012766:	1c0b      	adds	r3, r1, #0
10012768:	3b08      	subs	r3, #8
1001276a:	71ab      	strb	r3, [r5, #6]
1001276c:	121b      	asrs	r3, r3, #8
1001276e:	71eb      	strb	r3, [r5, #7]
10012770:	1c28      	adds	r0, r5, #0
10012772:	4b05      	ldr	r3, [pc, #20]	; (10012788 <gattc_read_cfm+0x68>)
10012774:	4798      	blx	r3
10012776:	bd38      	pop	{r3, r4, r5, pc}
10012778:	1001ac30 	.word	0x1001ac30
1001277c:	1001a8c0 	.word	0x1001a8c0
10012780:	1001ac3d 	.word	0x1001ac3d
10012784:	10014b7b 	.word	0x10014b7b
10012788:	10011461 	.word	0x10011461

1001278c <gattc_write_cfm>:
1001278c:	4b0d      	ldr	r3, [pc, #52]	; (100127c4 <gattc_write_cfm+0x38>)
1001278e:	b510      	push	{r4, lr}
10012790:	729a      	strb	r2, [r3, #10]
10012792:	2203      	movs	r2, #3
10012794:	2416      	movs	r4, #22
10012796:	719a      	strb	r2, [r3, #6]
10012798:	2200      	movs	r2, #0
1001279a:	70d9      	strb	r1, [r3, #3]
1001279c:	490a      	ldr	r1, [pc, #40]	; (100127c8 <gattc_write_cfm+0x3c>)
1001279e:	701c      	strb	r4, [r3, #0]
100127a0:	3c0a      	subs	r4, #10
100127a2:	705c      	strb	r4, [r3, #1]
100127a4:	709c      	strb	r4, [r3, #2]
100127a6:	880c      	ldrh	r4, [r1, #0]
100127a8:	8809      	ldrh	r1, [r1, #0]
100127aa:	7218      	strb	r0, [r3, #8]
100127ac:	0a09      	lsrs	r1, r1, #8
100127ae:	0a00      	lsrs	r0, r0, #8
100127b0:	711c      	strb	r4, [r3, #4]
100127b2:	7159      	strb	r1, [r3, #5]
100127b4:	7258      	strb	r0, [r3, #9]
100127b6:	71da      	strb	r2, [r3, #7]
100127b8:	1c18      	adds	r0, r3, #0
100127ba:	210b      	movs	r1, #11
100127bc:	4b03      	ldr	r3, [pc, #12]	; (100127cc <gattc_write_cfm+0x40>)
100127be:	4798      	blx	r3
100127c0:	bd10      	pop	{r4, pc}
100127c2:	46c0      	nop			; (mov r8, r8)
100127c4:	1001ac30 	.word	0x1001ac30
100127c8:	1001a8c0 	.word	0x1001a8c0
100127cc:	10011461 	.word	0x10011461

100127d0 <gattc_att_info_cfm>:
100127d0:	b538      	push	{r3, r4, r5, lr}
100127d2:	4c0e      	ldr	r4, [pc, #56]	; (1001280c <gattc_att_info_cfm+0x3c>)
100127d4:	2518      	movs	r5, #24
100127d6:	7323      	strb	r3, [r4, #12]
100127d8:	2305      	movs	r3, #5
100127da:	71a3      	strb	r3, [r4, #6]
100127dc:	2300      	movs	r3, #0
100127de:	70e1      	strb	r1, [r4, #3]
100127e0:	490b      	ldr	r1, [pc, #44]	; (10012810 <gattc_att_info_cfm+0x40>)
100127e2:	7025      	strb	r5, [r4, #0]
100127e4:	3d0c      	subs	r5, #12
100127e6:	7065      	strb	r5, [r4, #1]
100127e8:	70a5      	strb	r5, [r4, #2]
100127ea:	880d      	ldrh	r5, [r1, #0]
100127ec:	8809      	ldrh	r1, [r1, #0]
100127ee:	7220      	strb	r0, [r4, #8]
100127f0:	0a09      	lsrs	r1, r1, #8
100127f2:	0a00      	lsrs	r0, r0, #8
100127f4:	7161      	strb	r1, [r4, #5]
100127f6:	7260      	strb	r0, [r4, #9]
100127f8:	72a2      	strb	r2, [r4, #10]
100127fa:	71e3      	strb	r3, [r4, #7]
100127fc:	0a12      	lsrs	r2, r2, #8
100127fe:	1c20      	adds	r0, r4, #0
10012800:	210d      	movs	r1, #13
10012802:	4b04      	ldr	r3, [pc, #16]	; (10012814 <gattc_att_info_cfm+0x44>)
10012804:	7125      	strb	r5, [r4, #4]
10012806:	72e2      	strb	r2, [r4, #11]
10012808:	4798      	blx	r3
1001280a:	bd38      	pop	{r3, r4, r5, pc}
1001280c:	1001ac30 	.word	0x1001ac30
10012810:	1001a8c0 	.word	0x1001a8c0
10012814:	10011461 	.word	0x10011461

10012818 <gattc_send_evt_cmd_handler>:
10012818:	b570      	push	{r4, r5, r6, lr}
1001281a:	2610      	movs	r6, #16
1001281c:	ac04      	add	r4, sp, #16
1001281e:	8825      	ldrh	r5, [r4, #0]
10012820:	4c15      	ldr	r4, [pc, #84]	; (10012878 <gattc_send_evt_cmd_handler+0x60>)
10012822:	70e2      	strb	r2, [r4, #3]
10012824:	4a15      	ldr	r2, [pc, #84]	; (1001287c <gattc_send_evt_cmd_handler+0x64>)
10012826:	7026      	strb	r6, [r4, #0]
10012828:	3e04      	subs	r6, #4
1001282a:	7066      	strb	r6, [r4, #1]
1001282c:	70a6      	strb	r6, [r4, #2]
1001282e:	8816      	ldrh	r6, [r2, #0]
10012830:	8812      	ldrh	r2, [r2, #0]
10012832:	7220      	strb	r0, [r4, #8]
10012834:	0a12      	lsrs	r2, r2, #8
10012836:	7162      	strb	r2, [r4, #5]
10012838:	4a11      	ldr	r2, [pc, #68]	; (10012880 <gattc_send_evt_cmd_handler+0x68>)
1001283a:	7321      	strb	r1, [r4, #12]
1001283c:	8812      	ldrh	r2, [r2, #0]
1001283e:	73a5      	strb	r5, [r4, #14]
10012840:	3201      	adds	r2, #1
10012842:	7262      	strb	r2, [r4, #9]
10012844:	1212      	asrs	r2, r2, #8
10012846:	72a2      	strb	r2, [r4, #10]
10012848:	2200      	movs	r2, #0
1001284a:	72e2      	strb	r2, [r4, #11]
1001284c:	0a0a      	lsrs	r2, r1, #8
1001284e:	7362      	strb	r2, [r4, #13]
10012850:	0a2a      	lsrs	r2, r5, #8
10012852:	73e2      	strb	r2, [r4, #15]
10012854:	1c19      	adds	r1, r3, #0
10012856:	1c2a      	adds	r2, r5, #0
10012858:	4b0a      	ldr	r3, [pc, #40]	; (10012884 <gattc_send_evt_cmd_handler+0x6c>)
1001285a:	3510      	adds	r5, #16
1001285c:	480a      	ldr	r0, [pc, #40]	; (10012888 <gattc_send_evt_cmd_handler+0x70>)
1001285e:	7126      	strb	r6, [r4, #4]
10012860:	4798      	blx	r3
10012862:	b2a9      	uxth	r1, r5
10012864:	1c0b      	adds	r3, r1, #0
10012866:	3b08      	subs	r3, #8
10012868:	71a3      	strb	r3, [r4, #6]
1001286a:	121b      	asrs	r3, r3, #8
1001286c:	71e3      	strb	r3, [r4, #7]
1001286e:	1c20      	adds	r0, r4, #0
10012870:	4b06      	ldr	r3, [pc, #24]	; (1001288c <gattc_send_evt_cmd_handler+0x74>)
10012872:	4798      	blx	r3
10012874:	bd70      	pop	{r4, r5, r6, pc}
10012876:	46c0      	nop			; (mov r8, r8)
10012878:	1001ac30 	.word	0x1001ac30
1001287c:	1001a8c0 	.word	0x1001a8c0
10012880:	10019a60 	.word	0x10019a60
10012884:	10014b7b 	.word	0x10014b7b
10012888:	1001ac40 	.word	0x1001ac40
1001288c:	10011461 	.word	0x10011461

10012890 <gattc_event_cfm_handler>:
10012890:	220e      	movs	r2, #14
10012892:	b508      	push	{r3, lr}
10012894:	4b0b      	ldr	r3, [pc, #44]	; (100128c4 <gattc_event_cfm_handler+0x34>)
10012896:	701a      	strb	r2, [r3, #0]
10012898:	3a02      	subs	r2, #2
1001289a:	705a      	strb	r2, [r3, #1]
1001289c:	709a      	strb	r2, [r3, #2]
1001289e:	4a0a      	ldr	r2, [pc, #40]	; (100128c8 <gattc_event_cfm_handler+0x38>)
100128a0:	70d8      	strb	r0, [r3, #3]
100128a2:	8810      	ldrh	r0, [r2, #0]
100128a4:	8812      	ldrh	r2, [r2, #0]
100128a6:	7219      	strb	r1, [r3, #8]
100128a8:	0a12      	lsrs	r2, r2, #8
100128aa:	715a      	strb	r2, [r3, #5]
100128ac:	2202      	movs	r2, #2
100128ae:	719a      	strb	r2, [r3, #6]
100128b0:	2200      	movs	r2, #0
100128b2:	0a09      	lsrs	r1, r1, #8
100128b4:	7118      	strb	r0, [r3, #4]
100128b6:	7259      	strb	r1, [r3, #9]
100128b8:	71da      	strb	r2, [r3, #7]
100128ba:	1c18      	adds	r0, r3, #0
100128bc:	210a      	movs	r1, #10
100128be:	4b03      	ldr	r3, [pc, #12]	; (100128cc <gattc_event_cfm_handler+0x3c>)
100128c0:	4798      	blx	r3
100128c2:	bd08      	pop	{r3, pc}
100128c4:	1001ac30 	.word	0x1001ac30
100128c8:	1001a8c0 	.word	0x1001a8c0
100128cc:	10011461 	.word	0x10011461

100128d0 <gattc_disc_svc_ind_parser>:
100128d0:	b570      	push	{r4, r5, r6, lr}
100128d2:	1c15      	adds	r5, r2, #0
100128d4:	0a00      	lsrs	r0, r0, #8
100128d6:	8010      	strh	r0, [r2, #0]
100128d8:	784b      	ldrb	r3, [r1, #1]
100128da:	780a      	ldrb	r2, [r1, #0]
100128dc:	021b      	lsls	r3, r3, #8
100128de:	4313      	orrs	r3, r2
100128e0:	806b      	strh	r3, [r5, #2]
100128e2:	78cb      	ldrb	r3, [r1, #3]
100128e4:	788a      	ldrb	r2, [r1, #2]
100128e6:	021b      	lsls	r3, r3, #8
100128e8:	4313      	orrs	r3, r2
100128ea:	80ab      	strh	r3, [r5, #4]
100128ec:	790e      	ldrb	r6, [r1, #4]
100128ee:	4b05      	ldr	r3, [pc, #20]	; (10012904 <gattc_disc_svc_ind_parser+0x34>)
100128f0:	1c30      	adds	r0, r6, #0
100128f2:	1c0c      	adds	r4, r1, #0
100128f4:	4798      	blx	r3
100128f6:	1c32      	adds	r2, r6, #0
100128f8:	71a8      	strb	r0, [r5, #6]
100128fa:	1d61      	adds	r1, r4, #5
100128fc:	1de8      	adds	r0, r5, #7
100128fe:	4b02      	ldr	r3, [pc, #8]	; (10012908 <gattc_disc_svc_ind_parser+0x38>)
10012900:	4798      	blx	r3
10012902:	bd70      	pop	{r4, r5, r6, pc}
10012904:	100107a1 	.word	0x100107a1
10012908:	10014b7b 	.word	0x10014b7b

1001290c <gattc_disc_svc_incl_ind_parser>:
1001290c:	b570      	push	{r4, r5, r6, lr}
1001290e:	1c15      	adds	r5, r2, #0
10012910:	0a00      	lsrs	r0, r0, #8
10012912:	8010      	strh	r0, [r2, #0]
10012914:	784b      	ldrb	r3, [r1, #1]
10012916:	780a      	ldrb	r2, [r1, #0]
10012918:	021b      	lsls	r3, r3, #8
1001291a:	4313      	orrs	r3, r2
1001291c:	806b      	strh	r3, [r5, #2]
1001291e:	78cb      	ldrb	r3, [r1, #3]
10012920:	788a      	ldrb	r2, [r1, #2]
10012922:	021b      	lsls	r3, r3, #8
10012924:	4313      	orrs	r3, r2
10012926:	80ab      	strh	r3, [r5, #4]
10012928:	794b      	ldrb	r3, [r1, #5]
1001292a:	790a      	ldrb	r2, [r1, #4]
1001292c:	021b      	lsls	r3, r3, #8
1001292e:	4313      	orrs	r3, r2
10012930:	80eb      	strh	r3, [r5, #6]
10012932:	798e      	ldrb	r6, [r1, #6]
10012934:	4b05      	ldr	r3, [pc, #20]	; (1001294c <gattc_disc_svc_incl_ind_parser+0x40>)
10012936:	1c30      	adds	r0, r6, #0
10012938:	1c0c      	adds	r4, r1, #0
1001293a:	4798      	blx	r3
1001293c:	7228      	strb	r0, [r5, #8]
1001293e:	1c28      	adds	r0, r5, #0
10012940:	1c32      	adds	r2, r6, #0
10012942:	1de1      	adds	r1, r4, #7
10012944:	4b02      	ldr	r3, [pc, #8]	; (10012950 <gattc_disc_svc_incl_ind_parser+0x44>)
10012946:	3009      	adds	r0, #9
10012948:	4798      	blx	r3
1001294a:	bd70      	pop	{r4, r5, r6, pc}
1001294c:	100107a1 	.word	0x100107a1
10012950:	10014b7b 	.word	0x10014b7b

10012954 <gattc_disc_char_ind_parser>:
10012954:	b570      	push	{r4, r5, r6, lr}
10012956:	1c15      	adds	r5, r2, #0
10012958:	0a00      	lsrs	r0, r0, #8
1001295a:	8010      	strh	r0, [r2, #0]
1001295c:	784b      	ldrb	r3, [r1, #1]
1001295e:	780a      	ldrb	r2, [r1, #0]
10012960:	021b      	lsls	r3, r3, #8
10012962:	4313      	orrs	r3, r2
10012964:	806b      	strh	r3, [r5, #2]
10012966:	78cb      	ldrb	r3, [r1, #3]
10012968:	788a      	ldrb	r2, [r1, #2]
1001296a:	021b      	lsls	r3, r3, #8
1001296c:	4313      	orrs	r3, r2
1001296e:	80ab      	strh	r3, [r5, #4]
10012970:	790b      	ldrb	r3, [r1, #4]
10012972:	1c0c      	adds	r4, r1, #0
10012974:	71ab      	strb	r3, [r5, #6]
10012976:	794e      	ldrb	r6, [r1, #5]
10012978:	4b05      	ldr	r3, [pc, #20]	; (10012990 <gattc_disc_char_ind_parser+0x3c>)
1001297a:	1c30      	adds	r0, r6, #0
1001297c:	4798      	blx	r3
1001297e:	71e8      	strb	r0, [r5, #7]
10012980:	1c28      	adds	r0, r5, #0
10012982:	1c32      	adds	r2, r6, #0
10012984:	1da1      	adds	r1, r4, #6
10012986:	4b03      	ldr	r3, [pc, #12]	; (10012994 <gattc_disc_char_ind_parser+0x40>)
10012988:	3008      	adds	r0, #8
1001298a:	4798      	blx	r3
1001298c:	bd70      	pop	{r4, r5, r6, pc}
1001298e:	46c0      	nop			; (mov r8, r8)
10012990:	100107a1 	.word	0x100107a1
10012994:	10014b7b 	.word	0x10014b7b

10012998 <gattc_disc_char_desc_ind_parser>:
10012998:	b570      	push	{r4, r5, r6, lr}
1001299a:	1c15      	adds	r5, r2, #0
1001299c:	0a00      	lsrs	r0, r0, #8
1001299e:	8010      	strh	r0, [r2, #0]
100129a0:	784b      	ldrb	r3, [r1, #1]
100129a2:	780a      	ldrb	r2, [r1, #0]
100129a4:	021b      	lsls	r3, r3, #8
100129a6:	4313      	orrs	r3, r2
100129a8:	806b      	strh	r3, [r5, #2]
100129aa:	788e      	ldrb	r6, [r1, #2]
100129ac:	4b05      	ldr	r3, [pc, #20]	; (100129c4 <gattc_disc_char_desc_ind_parser+0x2c>)
100129ae:	1c30      	adds	r0, r6, #0
100129b0:	1c0c      	adds	r4, r1, #0
100129b2:	4798      	blx	r3
100129b4:	1c32      	adds	r2, r6, #0
100129b6:	7128      	strb	r0, [r5, #4]
100129b8:	1ce1      	adds	r1, r4, #3
100129ba:	1d68      	adds	r0, r5, #5
100129bc:	4b02      	ldr	r3, [pc, #8]	; (100129c8 <gattc_disc_char_desc_ind_parser+0x30>)
100129be:	4798      	blx	r3
100129c0:	bd70      	pop	{r4, r5, r6, pc}
100129c2:	46c0      	nop			; (mov r8, r8)
100129c4:	100107a1 	.word	0x100107a1
100129c8:	10014b7b 	.word	0x10014b7b

100129cc <gattc_event_ind_and_notification_parser>:
100129cc:	b510      	push	{r4, lr}
100129ce:	780c      	ldrb	r4, [r1, #0]
100129d0:	1c13      	adds	r3, r2, #0
100129d2:	2c12      	cmp	r4, #18
100129d4:	d10e      	bne.n	100129f4 <gattc_event_ind_and_notification_parser+0x28>
100129d6:	0a00      	lsrs	r0, r0, #8
100129d8:	8010      	strh	r0, [r2, #0]
100129da:	788a      	ldrb	r2, [r1, #2]
100129dc:	709a      	strb	r2, [r3, #2]
100129de:	7948      	ldrb	r0, [r1, #5]
100129e0:	790c      	ldrb	r4, [r1, #4]
100129e2:	0200      	lsls	r0, r0, #8
100129e4:	4320      	orrs	r0, r4
100129e6:	8098      	strh	r0, [r3, #4]
100129e8:	3106      	adds	r1, #6
100129ea:	1d98      	adds	r0, r3, #6
100129ec:	4b0b      	ldr	r3, [pc, #44]	; (10012a1c <gattc_event_ind_and_notification_parser+0x50>)
100129ee:	4798      	blx	r3
100129f0:	221b      	movs	r2, #27
100129f2:	e010      	b.n	10012a16 <gattc_event_ind_and_notification_parser+0x4a>
100129f4:	2200      	movs	r2, #0
100129f6:	2c13      	cmp	r4, #19
100129f8:	d10d      	bne.n	10012a16 <gattc_event_ind_and_notification_parser+0x4a>
100129fa:	0a00      	lsrs	r0, r0, #8
100129fc:	8018      	strh	r0, [r3, #0]
100129fe:	788a      	ldrb	r2, [r1, #2]
10012a00:	709a      	strb	r2, [r3, #2]
10012a02:	7908      	ldrb	r0, [r1, #4]
10012a04:	78cc      	ldrb	r4, [r1, #3]
10012a06:	0200      	lsls	r0, r0, #8
10012a08:	4320      	orrs	r0, r4
10012a0a:	8098      	strh	r0, [r3, #4]
10012a0c:	3106      	adds	r1, #6
10012a0e:	1d98      	adds	r0, r3, #6
10012a10:	4b02      	ldr	r3, [pc, #8]	; (10012a1c <gattc_event_ind_and_notification_parser+0x50>)
10012a12:	4798      	blx	r3
10012a14:	221c      	movs	r2, #28
10012a16:	1c10      	adds	r0, r2, #0
10012a18:	bd10      	pop	{r4, pc}
10012a1a:	46c0      	nop			; (mov r8, r8)
10012a1c:	10014b7b 	.word	0x10014b7b

10012a20 <gattc_complete_evt_handler>:
10012a20:	b500      	push	{lr}
10012a22:	0a00      	lsrs	r0, r0, #8
10012a24:	8010      	strh	r0, [r2, #0]
10012a26:	7808      	ldrb	r0, [r1, #0]
10012a28:	7090      	strb	r0, [r2, #2]
10012a2a:	784b      	ldrb	r3, [r1, #1]
10012a2c:	3801      	subs	r0, #1
10012a2e:	70d3      	strb	r3, [r2, #3]
10012a30:	2813      	cmp	r0, #19
10012a32:	d82c      	bhi.n	10012a8e <gattc_complete_evt_handler+0x6e>
10012a34:	f000 f9dc 	bl	10012df0 <__gnu_thumb1_case_uqi>
10012a38:	0a0a0a0c 	.word	0x0a0a0a0c
10012a3c:	210a0a0a 	.word	0x210a0a0a
10012a40:	111f2121 	.word	0x111f2121
10012a44:	2b111111 	.word	0x2b111111
10012a48:	2919132b 	.word	0x2919132b
10012a4c:	2017      	movs	r0, #23
10012a4e:	e01f      	b.n	10012a90 <gattc_complete_evt_handler+0x70>
10012a50:	2024      	movs	r0, #36	; 0x24
10012a52:	2b00      	cmp	r3, #0
10012a54:	d11c      	bne.n	10012a90 <gattc_complete_evt_handler+0x70>
10012a56:	3017      	adds	r0, #23
10012a58:	e01a      	b.n	10012a90 <gattc_complete_evt_handler+0x70>
10012a5a:	2025      	movs	r0, #37	; 0x25
10012a5c:	e018      	b.n	10012a90 <gattc_complete_evt_handler+0x70>
10012a5e:	4a0d      	ldr	r2, [pc, #52]	; (10012a94 <gattc_complete_evt_handler+0x74>)
10012a60:	201d      	movs	r0, #29
10012a62:	6813      	ldr	r3, [r2, #0]
10012a64:	3b01      	subs	r3, #1
10012a66:	6013      	str	r3, [r2, #0]
10012a68:	e012      	b.n	10012a90 <gattc_complete_evt_handler+0x70>
10012a6a:	4a0a      	ldr	r2, [pc, #40]	; (10012a94 <gattc_complete_evt_handler+0x74>)
10012a6c:	201e      	movs	r0, #30
10012a6e:	6813      	ldr	r3, [r2, #0]
10012a70:	3b01      	subs	r3, #1
10012a72:	6013      	str	r3, [r2, #0]
10012a74:	e00c      	b.n	10012a90 <gattc_complete_evt_handler+0x70>
10012a76:	2019      	movs	r0, #25
10012a78:	e00a      	b.n	10012a90 <gattc_complete_evt_handler+0x70>
10012a7a:	203b      	movs	r0, #59	; 0x3b
10012a7c:	2b00      	cmp	r3, #0
10012a7e:	d007      	beq.n	10012a90 <gattc_complete_evt_handler+0x70>
10012a80:	2182      	movs	r1, #130	; 0x82
10012a82:	0089      	lsls	r1, r1, #2
10012a84:	5453      	strb	r3, [r2, r1]
10012a86:	3823      	subs	r0, #35	; 0x23
10012a88:	e002      	b.n	10012a90 <gattc_complete_evt_handler+0x70>
10012a8a:	2021      	movs	r0, #33	; 0x21
10012a8c:	e000      	b.n	10012a90 <gattc_complete_evt_handler+0x70>
10012a8e:	2000      	movs	r0, #0
10012a90:	bd00      	pop	{pc}
10012a92:	46c0      	nop			; (mov r8, r8)
10012a94:	10019a64 	.word	0x10019a64

10012a98 <gattc_event_mtu_changed_ind_parser>:
10012a98:	0a00      	lsrs	r0, r0, #8
10012a9a:	8010      	strh	r0, [r2, #0]
10012a9c:	784b      	ldrb	r3, [r1, #1]
10012a9e:	7809      	ldrb	r1, [r1, #0]
10012aa0:	021b      	lsls	r3, r3, #8
10012aa2:	430b      	orrs	r3, r1
10012aa4:	8053      	strh	r3, [r2, #2]
10012aa6:	4770      	bx	lr

10012aa8 <gattc_read_ind_parser>:
10012aa8:	0a00      	lsrs	r0, r0, #8
10012aaa:	b508      	push	{r3, lr}
10012aac:	8010      	strh	r0, [r2, #0]
10012aae:	1c13      	adds	r3, r2, #0
10012ab0:	2282      	movs	r2, #130	; 0x82
10012ab2:	2000      	movs	r0, #0
10012ab4:	0092      	lsls	r2, r2, #2
10012ab6:	5498      	strb	r0, [r3, r2]
10012ab8:	784a      	ldrb	r2, [r1, #1]
10012aba:	7808      	ldrb	r0, [r1, #0]
10012abc:	0212      	lsls	r2, r2, #8
10012abe:	4302      	orrs	r2, r0
10012ac0:	805a      	strh	r2, [r3, #2]
10012ac2:	78ca      	ldrb	r2, [r1, #3]
10012ac4:	7888      	ldrb	r0, [r1, #2]
10012ac6:	0212      	lsls	r2, r2, #8
10012ac8:	4302      	orrs	r2, r0
10012aca:	80da      	strh	r2, [r3, #6]
10012acc:	794a      	ldrb	r2, [r1, #5]
10012ace:	7908      	ldrb	r0, [r1, #4]
10012ad0:	0212      	lsls	r2, r2, #8
10012ad2:	4302      	orrs	r2, r0
10012ad4:	809a      	strh	r2, [r3, #4]
10012ad6:	3308      	adds	r3, #8
10012ad8:	1c18      	adds	r0, r3, #0
10012ada:	3106      	adds	r1, #6
10012adc:	4b01      	ldr	r3, [pc, #4]	; (10012ae4 <gattc_read_ind_parser+0x3c>)
10012ade:	4798      	blx	r3
10012ae0:	bd08      	pop	{r3, pc}
10012ae2:	46c0      	nop			; (mov r8, r8)
10012ae4:	10014b7b 	.word	0x10014b7b

10012ae8 <gattc_svc_changed_cfg_ind_parser>:
10012ae8:	0a00      	lsrs	r0, r0, #8
10012aea:	8010      	strh	r0, [r2, #0]
10012aec:	784b      	ldrb	r3, [r1, #1]
10012aee:	7809      	ldrb	r1, [r1, #0]
10012af0:	021b      	lsls	r3, r3, #8
10012af2:	430b      	orrs	r3, r1
10012af4:	8053      	strh	r3, [r2, #2]
10012af6:	4770      	bx	lr

10012af8 <init_gattc_task_module>:
10012af8:	2300      	movs	r3, #0
10012afa:	4a02      	ldr	r2, [pc, #8]	; (10012b04 <init_gattc_task_module+0xc>)
10012afc:	8013      	strh	r3, [r2, #0]
10012afe:	4a02      	ldr	r2, [pc, #8]	; (10012b08 <init_gattc_task_module+0x10>)
10012b00:	8013      	strh	r3, [r2, #0]
10012b02:	4770      	bx	lr
10012b04:	10019a5e 	.word	0x10019a5e
10012b08:	10019a60 	.word	0x10019a60

10012b0c <gattm_add_svc_req_handler>:
10012b0c:	2200      	movs	r2, #0
10012b0e:	210b      	movs	r1, #11
10012b10:	b5f0      	push	{r4, r5, r6, r7, lr}
10012b12:	1c04      	adds	r4, r0, #0
10012b14:	7943      	ldrb	r3, [r0, #5]
10012b16:	b085      	sub	sp, #20
10012b18:	9301      	str	r3, [sp, #4]
10012b1a:	ab02      	add	r3, sp, #8
10012b1c:	71da      	strb	r2, [r3, #7]
10012b1e:	4b37      	ldr	r3, [pc, #220]	; (10012bfc <gattm_add_svc_req_handler+0xf0>)
10012b20:	7059      	strb	r1, [r3, #1]
10012b22:	7099      	strb	r1, [r3, #2]
10012b24:	4936      	ldr	r1, [pc, #216]	; (10012c00 <gattm_add_svc_req_handler+0xf4>)
10012b26:	701a      	strb	r2, [r3, #0]
10012b28:	8808      	ldrh	r0, [r1, #0]
10012b2a:	8809      	ldrh	r1, [r1, #0]
10012b2c:	70da      	strb	r2, [r3, #3]
10012b2e:	0a09      	lsrs	r1, r1, #8
10012b30:	7118      	strb	r0, [r3, #4]
10012b32:	7159      	strb	r1, [r3, #5]
10012b34:	8821      	ldrh	r1, [r4, #0]
10012b36:	7219      	strb	r1, [r3, #8]
10012b38:	8821      	ldrh	r1, [r4, #0]
10012b3a:	0a09      	lsrs	r1, r1, #8
10012b3c:	7259      	strb	r1, [r3, #9]
10012b3e:	8861      	ldrh	r1, [r4, #2]
10012b40:	7299      	strb	r1, [r3, #10]
10012b42:	8861      	ldrh	r1, [r4, #2]
10012b44:	0a09      	lsrs	r1, r1, #8
10012b46:	72d9      	strb	r1, [r3, #11]
10012b48:	7921      	ldrb	r1, [r4, #4]
10012b4a:	7319      	strb	r1, [r3, #12]
10012b4c:	4669      	mov	r1, sp
10012b4e:	7909      	ldrb	r1, [r1, #4]
10012b50:	7359      	strb	r1, [r3, #13]
10012b52:	18a1      	adds	r1, r4, r2
10012b54:	7988      	ldrb	r0, [r1, #6]
10012b56:	1899      	adds	r1, r3, r2
10012b58:	3201      	adds	r2, #1
10012b5a:	7388      	strb	r0, [r1, #14]
10012b5c:	2a10      	cmp	r2, #16
10012b5e:	d1f8      	bne.n	10012b52 <gattm_add_svc_req_handler+0x46>
10012b60:	1c27      	adds	r7, r4, #0
10012b62:	2300      	movs	r3, #0
10012b64:	251e      	movs	r5, #30
10012b66:	3716      	adds	r7, #22
10012b68:	9300      	str	r3, [sp, #0]
10012b6a:	9b00      	ldr	r3, [sp, #0]
10012b6c:	9a01      	ldr	r2, [sp, #4]
10012b6e:	4e23      	ldr	r6, [pc, #140]	; (10012bfc <gattm_add_svc_req_handler+0xf0>)
10012b70:	4293      	cmp	r3, r2
10012b72:	da21      	bge.n	10012bb8 <gattm_add_svc_req_handler+0xac>
10012b74:	1c39      	adds	r1, r7, #0
10012b76:	1970      	adds	r0, r6, r5
10012b78:	2210      	movs	r2, #16
10012b7a:	4b22      	ldr	r3, [pc, #136]	; (10012c04 <gattm_add_svc_req_handler+0xf8>)
10012b7c:	4798      	blx	r3
10012b7e:	1c2b      	adds	r3, r5, #0
10012b80:	8a3a      	ldrh	r2, [r7, #16]
10012b82:	3310      	adds	r3, #16
10012b84:	b29b      	uxth	r3, r3
10012b86:	54f2      	strb	r2, [r6, r3]
10012b88:	1c2b      	adds	r3, r5, #0
10012b8a:	8a3a      	ldrh	r2, [r7, #16]
10012b8c:	3311      	adds	r3, #17
10012b8e:	b29b      	uxth	r3, r3
10012b90:	0a12      	lsrs	r2, r2, #8
10012b92:	54f2      	strb	r2, [r6, r3]
10012b94:	1c2a      	adds	r2, r5, #0
10012b96:	1c2b      	adds	r3, r5, #0
10012b98:	8a79      	ldrh	r1, [r7, #18]
10012b9a:	3212      	adds	r2, #18
10012b9c:	b292      	uxth	r2, r2
10012b9e:	54b1      	strb	r1, [r6, r2]
10012ba0:	8a7a      	ldrh	r2, [r7, #18]
10012ba2:	3313      	adds	r3, #19
10012ba4:	b29b      	uxth	r3, r3
10012ba6:	0a12      	lsrs	r2, r2, #8
10012ba8:	54f2      	strb	r2, [r6, r3]
10012baa:	9b00      	ldr	r3, [sp, #0]
10012bac:	3514      	adds	r5, #20
10012bae:	3301      	adds	r3, #1
10012bb0:	b2ad      	uxth	r5, r5
10012bb2:	9300      	str	r3, [sp, #0]
10012bb4:	3714      	adds	r7, #20
10012bb6:	e7d8      	b.n	10012b6a <gattm_add_svc_req_handler+0x5e>
10012bb8:	2114      	movs	r1, #20
10012bba:	4d13      	ldr	r5, [pc, #76]	; (10012c08 <gattm_add_svc_req_handler+0xfc>)
10012bbc:	4b13      	ldr	r3, [pc, #76]	; (10012c0c <gattm_add_svc_req_handler+0x100>)
10012bbe:	4351      	muls	r1, r2
10012bc0:	802b      	strh	r3, [r5, #0]
10012bc2:	230b      	movs	r3, #11
10012bc4:	311e      	adds	r1, #30
10012bc6:	80ab      	strh	r3, [r5, #4]
10012bc8:	1c0b      	adds	r3, r1, #0
10012bca:	3b08      	subs	r3, #8
10012bcc:	71b3      	strb	r3, [r6, #6]
10012bce:	121b      	asrs	r3, r3, #8
10012bd0:	71f3      	strb	r3, [r6, #7]
10012bd2:	1c30      	adds	r0, r6, #0
10012bd4:	4b0e      	ldr	r3, [pc, #56]	; (10012c10 <gattm_add_svc_req_handler+0x104>)
10012bd6:	4798      	blx	r3
10012bd8:	ab02      	add	r3, sp, #8
10012bda:	1dde      	adds	r6, r3, #7
10012bdc:	1c30      	adds	r0, r6, #0
10012bde:	4b0d      	ldr	r3, [pc, #52]	; (10012c14 <gattm_add_svc_req_handler+0x108>)
10012be0:	4798      	blx	r3
10012be2:	7833      	ldrb	r3, [r6, #0]
10012be4:	20e2      	movs	r0, #226	; 0xe2
10012be6:	2b00      	cmp	r3, #0
10012be8:	d106      	bne.n	10012bf8 <gattm_add_svc_req_handler+0xec>
10012bea:	68aa      	ldr	r2, [r5, #8]
10012bec:	7853      	ldrb	r3, [r2, #1]
10012bee:	7811      	ldrb	r1, [r2, #0]
10012bf0:	021b      	lsls	r3, r3, #8
10012bf2:	430b      	orrs	r3, r1
10012bf4:	8023      	strh	r3, [r4, #0]
10012bf6:	7890      	ldrb	r0, [r2, #2]
10012bf8:	b005      	add	sp, #20
10012bfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012bfc:	1001ac30 	.word	0x1001ac30
10012c00:	1001a8c0 	.word	0x1001a8c0
10012c04:	10014b7b 	.word	0x10014b7b
10012c08:	1001a8b4 	.word	0x1001a8b4
10012c0c:	00000b01 	.word	0x00000b01
10012c10:	10011461 	.word	0x10011461
10012c14:	100114c5 	.word	0x100114c5

10012c18 <gattm_add_attribute_req_handler>:
10012c18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10012c1a:	1c1f      	adds	r7, r3, #0
10012c1c:	4b16      	ldr	r3, [pc, #88]	; (10012c78 <gattm_add_attribute_req_handler+0x60>)
10012c1e:	9100      	str	r1, [sp, #0]
10012c20:	9201      	str	r2, [sp, #4]
10012c22:	1c05      	adds	r5, r0, #0
10012c24:	7946      	ldrb	r6, [r0, #5]
10012c26:	6818      	ldr	r0, [r3, #0]
10012c28:	2114      	movs	r1, #20
10012c2a:	4b14      	ldr	r3, [pc, #80]	; (10012c7c <gattm_add_attribute_req_handler+0x64>)
10012c2c:	382a      	subs	r0, #42	; 0x2a
10012c2e:	4798      	blx	r3
10012c30:	2311      	movs	r3, #17
10012c32:	4286      	cmp	r6, r0
10012c34:	d21e      	bcs.n	10012c74 <gattm_add_attribute_req_handler+0x5c>
10012c36:	2414      	movs	r4, #20
10012c38:	4366      	muls	r6, r4
10012c3a:	19a8      	adds	r0, r5, r6
10012c3c:	2100      	movs	r1, #0
10012c3e:	2210      	movs	r2, #16
10012c40:	4b0f      	ldr	r3, [pc, #60]	; (10012c80 <gattm_add_attribute_req_handler+0x68>)
10012c42:	3016      	adds	r0, #22
10012c44:	4798      	blx	r3
10012c46:	7968      	ldrb	r0, [r5, #5]
10012c48:	1c3a      	adds	r2, r7, #0
10012c4a:	4360      	muls	r0, r4
10012c4c:	1828      	adds	r0, r5, r0
10012c4e:	4b0d      	ldr	r3, [pc, #52]	; (10012c84 <gattm_add_attribute_req_handler+0x6c>)
10012c50:	3016      	adds	r0, #22
10012c52:	9908      	ldr	r1, [sp, #32]
10012c54:	4798      	blx	r3
10012c56:	466a      	mov	r2, sp
10012c58:	796b      	ldrb	r3, [r5, #5]
10012c5a:	8812      	ldrh	r2, [r2, #0]
10012c5c:	435c      	muls	r4, r3
10012c5e:	192c      	adds	r4, r5, r4
10012c60:	8522      	strh	r2, [r4, #40]	; 0x28
10012c62:	466a      	mov	r2, sp
10012c64:	8892      	ldrh	r2, [r2, #4]
10012c66:	84e2      	strh	r2, [r4, #38]	; 0x26
10012c68:	9a09      	ldr	r2, [sp, #36]	; 0x24
10012c6a:	8013      	strh	r3, [r2, #0]
10012c6c:	796b      	ldrb	r3, [r5, #5]
10012c6e:	3301      	adds	r3, #1
10012c70:	716b      	strb	r3, [r5, #5]
10012c72:	2300      	movs	r3, #0
10012c74:	1c18      	adds	r0, r3, #0
10012c76:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10012c78:	100199d4 	.word	0x100199d4
10012c7c:	10012e05 	.word	0x10012e05
10012c80:	10014b8d 	.word	0x10014b8d
10012c84:	10014b7b 	.word	0x10014b7b

10012c88 <gattm_att_set_value_req_handler>:
10012c88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10012c8a:	466b      	mov	r3, sp
10012c8c:	1dde      	adds	r6, r3, #7
10012c8e:	2300      	movs	r3, #0
10012c90:	1c0d      	adds	r5, r1, #0
10012c92:	210c      	movs	r1, #12
10012c94:	270b      	movs	r7, #11
10012c96:	4c17      	ldr	r4, [pc, #92]	; (10012cf4 <gattm_att_set_value_req_handler+0x6c>)
10012c98:	7033      	strb	r3, [r6, #0]
10012c9a:	70e3      	strb	r3, [r4, #3]
10012c9c:	4b16      	ldr	r3, [pc, #88]	; (10012cf8 <gattm_att_set_value_req_handler+0x70>)
10012c9e:	7021      	strb	r1, [r4, #0]
10012ca0:	8819      	ldrh	r1, [r3, #0]
10012ca2:	881b      	ldrh	r3, [r3, #0]
10012ca4:	7220      	strb	r0, [r4, #8]
10012ca6:	0a1b      	lsrs	r3, r3, #8
10012ca8:	7163      	strb	r3, [r4, #5]
10012caa:	0a00      	lsrs	r0, r0, #8
10012cac:	0a2b      	lsrs	r3, r5, #8
10012cae:	7121      	strb	r1, [r4, #4]
10012cb0:	7260      	strb	r0, [r4, #9]
10012cb2:	1c11      	adds	r1, r2, #0
10012cb4:	72a5      	strb	r5, [r4, #10]
10012cb6:	1c2a      	adds	r2, r5, #0
10012cb8:	72e3      	strb	r3, [r4, #11]
10012cba:	350c      	adds	r5, #12
10012cbc:	4b0f      	ldr	r3, [pc, #60]	; (10012cfc <gattm_att_set_value_req_handler+0x74>)
10012cbe:	4810      	ldr	r0, [pc, #64]	; (10012d00 <gattm_att_set_value_req_handler+0x78>)
10012cc0:	7067      	strb	r7, [r4, #1]
10012cc2:	70a7      	strb	r7, [r4, #2]
10012cc4:	4798      	blx	r3
10012cc6:	b2a9      	uxth	r1, r5
10012cc8:	4b0e      	ldr	r3, [pc, #56]	; (10012d04 <gattm_att_set_value_req_handler+0x7c>)
10012cca:	4d0f      	ldr	r5, [pc, #60]	; (10012d08 <gattm_att_set_value_req_handler+0x80>)
10012ccc:	1c20      	adds	r0, r4, #0
10012cce:	802b      	strh	r3, [r5, #0]
10012cd0:	1c0b      	adds	r3, r1, #0
10012cd2:	3b08      	subs	r3, #8
10012cd4:	71a3      	strb	r3, [r4, #6]
10012cd6:	121b      	asrs	r3, r3, #8
10012cd8:	71e3      	strb	r3, [r4, #7]
10012cda:	4b0c      	ldr	r3, [pc, #48]	; (10012d0c <gattm_att_set_value_req_handler+0x84>)
10012cdc:	80af      	strh	r7, [r5, #4]
10012cde:	4798      	blx	r3
10012ce0:	1c30      	adds	r0, r6, #0
10012ce2:	4b0b      	ldr	r3, [pc, #44]	; (10012d10 <gattm_att_set_value_req_handler+0x88>)
10012ce4:	4798      	blx	r3
10012ce6:	7833      	ldrb	r3, [r6, #0]
10012ce8:	20e2      	movs	r0, #226	; 0xe2
10012cea:	2b00      	cmp	r3, #0
10012cec:	d101      	bne.n	10012cf2 <gattm_att_set_value_req_handler+0x6a>
10012cee:	68ab      	ldr	r3, [r5, #8]
10012cf0:	7898      	ldrb	r0, [r3, #2]
10012cf2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10012cf4:	1001ac30 	.word	0x1001ac30
10012cf8:	1001a8c0 	.word	0x1001a8c0
10012cfc:	10014b7b 	.word	0x10014b7b
10012d00:	1001ac3c 	.word	0x1001ac3c
10012d04:	00000b0d 	.word	0x00000b0d
10012d08:	1001a8b4 	.word	0x1001a8b4
10012d0c:	10011461 	.word	0x10011461
10012d10:	100114c5 	.word	0x100114c5

10012d14 <gattm_att_get_value_req_handler>:
10012d14:	b5f0      	push	{r4, r5, r6, r7, lr}
10012d16:	b085      	sub	sp, #20
10012d18:	9201      	str	r2, [sp, #4]
10012d1a:	220a      	movs	r2, #10
10012d1c:	1c04      	adds	r4, r0, #0
10012d1e:	481d      	ldr	r0, [pc, #116]	; (10012d94 <gattm_att_get_value_req_handler+0x80>)
10012d20:	ab02      	add	r3, sp, #8
10012d22:	1dde      	adds	r6, r3, #7
10012d24:	7002      	strb	r2, [r0, #0]
10012d26:	2300      	movs	r3, #0
10012d28:	220b      	movs	r2, #11
10012d2a:	4d1b      	ldr	r5, [pc, #108]	; (10012d98 <gattm_att_get_value_req_handler+0x84>)
10012d2c:	1c0f      	adds	r7, r1, #0
10012d2e:	8829      	ldrh	r1, [r5, #0]
10012d30:	882d      	ldrh	r5, [r5, #0]
10012d32:	7101      	strb	r1, [r0, #4]
10012d34:	0a2d      	lsrs	r5, r5, #8
10012d36:	7145      	strb	r5, [r0, #5]
10012d38:	0a25      	lsrs	r5, r4, #8
10012d3a:	7245      	strb	r5, [r0, #9]
10012d3c:	4917      	ldr	r1, [pc, #92]	; (10012d9c <gattm_att_get_value_req_handler+0x88>)
10012d3e:	4d18      	ldr	r5, [pc, #96]	; (10012da0 <gattm_att_get_value_req_handler+0x8c>)
10012d40:	7033      	strb	r3, [r6, #0]
10012d42:	7042      	strb	r2, [r0, #1]
10012d44:	7082      	strb	r2, [r0, #2]
10012d46:	70c3      	strb	r3, [r0, #3]
10012d48:	8029      	strh	r1, [r5, #0]
10012d4a:	80aa      	strh	r2, [r5, #4]
10012d4c:	71c3      	strb	r3, [r0, #7]
10012d4e:	3a09      	subs	r2, #9
10012d50:	210a      	movs	r1, #10
10012d52:	4b14      	ldr	r3, [pc, #80]	; (10012da4 <gattm_att_get_value_req_handler+0x90>)
10012d54:	7182      	strb	r2, [r0, #6]
10012d56:	7204      	strb	r4, [r0, #8]
10012d58:	4798      	blx	r3
10012d5a:	1c30      	adds	r0, r6, #0
10012d5c:	4b12      	ldr	r3, [pc, #72]	; (10012da8 <gattm_att_get_value_req_handler+0x94>)
10012d5e:	4798      	blx	r3
10012d60:	7833      	ldrb	r3, [r6, #0]
10012d62:	20e2      	movs	r0, #226	; 0xe2
10012d64:	2b00      	cmp	r3, #0
10012d66:	d112      	bne.n	10012d8e <gattm_att_get_value_req_handler+0x7a>
10012d68:	68a9      	ldr	r1, [r5, #8]
10012d6a:	9801      	ldr	r0, [sp, #4]
10012d6c:	784d      	ldrb	r5, [r1, #1]
10012d6e:	780b      	ldrb	r3, [r1, #0]
10012d70:	78ca      	ldrb	r2, [r1, #3]
10012d72:	022d      	lsls	r5, r5, #8
10012d74:	431d      	orrs	r5, r3
10012d76:	788b      	ldrb	r3, [r1, #2]
10012d78:	0212      	lsls	r2, r2, #8
10012d7a:	431a      	orrs	r2, r3
10012d7c:	803a      	strh	r2, [r7, #0]
10012d7e:	790e      	ldrb	r6, [r1, #4]
10012d80:	4b0a      	ldr	r3, [pc, #40]	; (10012dac <gattm_att_get_value_req_handler+0x98>)
10012d82:	3105      	adds	r1, #5
10012d84:	4798      	blx	r3
10012d86:	20e2      	movs	r0, #226	; 0xe2
10012d88:	42ac      	cmp	r4, r5
10012d8a:	d100      	bne.n	10012d8e <gattm_att_get_value_req_handler+0x7a>
10012d8c:	1c30      	adds	r0, r6, #0
10012d8e:	b005      	add	sp, #20
10012d90:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012d92:	46c0      	nop			; (mov r8, r8)
10012d94:	1001ac30 	.word	0x1001ac30
10012d98:	1001a8c0 	.word	0x1001a8c0
10012d9c:	00000b0b 	.word	0x00000b0b
10012da0:	1001a8b4 	.word	0x1001a8b4
10012da4:	10011461 	.word	0x10011461
10012da8:	100114c5 	.word	0x100114c5
10012dac:	10014b7b 	.word	0x10014b7b

10012db0 <htpt_enable_rsp_handler>:
10012db0:	780b      	ldrb	r3, [r1, #0]
10012db2:	7013      	strb	r3, [r2, #0]
10012db4:	784b      	ldrb	r3, [r1, #1]
10012db6:	7053      	strb	r3, [r2, #1]
10012db8:	4770      	bx	lr

10012dba <htpt_temp_send_rsp_handler>:
10012dba:	780b      	ldrb	r3, [r1, #0]
10012dbc:	7013      	strb	r3, [r2, #0]
10012dbe:	4770      	bx	lr

10012dc0 <htpt_meas_intv_upd_rsp_handler>:
10012dc0:	780b      	ldrb	r3, [r1, #0]
10012dc2:	7013      	strb	r3, [r2, #0]
10012dc4:	4770      	bx	lr

10012dc6 <htpt_meas_intv_chg_req_ind_handler>:
10012dc6:	78cb      	ldrb	r3, [r1, #3]
10012dc8:	7889      	ldrb	r1, [r1, #2]
10012dca:	021b      	lsls	r3, r3, #8
10012dcc:	430b      	orrs	r3, r1
10012dce:	8013      	strh	r3, [r2, #0]
10012dd0:	4770      	bx	lr

10012dd2 <htpt_cfg_indntf_ind_handler>:
10012dd2:	780b      	ldrb	r3, [r1, #0]
10012dd4:	7013      	strb	r3, [r2, #0]
10012dd6:	784b      	ldrb	r3, [r1, #1]
10012dd8:	7053      	strb	r3, [r2, #1]
10012dda:	4770      	bx	lr

10012ddc <__gnu_thumb1_case_sqi>:
10012ddc:	b402      	push	{r1}
10012dde:	4671      	mov	r1, lr
10012de0:	0849      	lsrs	r1, r1, #1
10012de2:	0049      	lsls	r1, r1, #1
10012de4:	5609      	ldrsb	r1, [r1, r0]
10012de6:	0049      	lsls	r1, r1, #1
10012de8:	448e      	add	lr, r1
10012dea:	bc02      	pop	{r1}
10012dec:	4770      	bx	lr
10012dee:	46c0      	nop			; (mov r8, r8)

10012df0 <__gnu_thumb1_case_uqi>:
10012df0:	b402      	push	{r1}
10012df2:	4671      	mov	r1, lr
10012df4:	0849      	lsrs	r1, r1, #1
10012df6:	0049      	lsls	r1, r1, #1
10012df8:	5c09      	ldrb	r1, [r1, r0]
10012dfa:	0049      	lsls	r1, r1, #1
10012dfc:	448e      	add	lr, r1
10012dfe:	bc02      	pop	{r1}
10012e00:	4770      	bx	lr
10012e02:	46c0      	nop			; (mov r8, r8)

10012e04 <__aeabi_uidiv>:
10012e04:	2200      	movs	r2, #0
10012e06:	0843      	lsrs	r3, r0, #1
10012e08:	428b      	cmp	r3, r1
10012e0a:	d374      	bcc.n	10012ef6 <__aeabi_uidiv+0xf2>
10012e0c:	0903      	lsrs	r3, r0, #4
10012e0e:	428b      	cmp	r3, r1
10012e10:	d35f      	bcc.n	10012ed2 <__aeabi_uidiv+0xce>
10012e12:	0a03      	lsrs	r3, r0, #8
10012e14:	428b      	cmp	r3, r1
10012e16:	d344      	bcc.n	10012ea2 <__aeabi_uidiv+0x9e>
10012e18:	0b03      	lsrs	r3, r0, #12
10012e1a:	428b      	cmp	r3, r1
10012e1c:	d328      	bcc.n	10012e70 <__aeabi_uidiv+0x6c>
10012e1e:	0c03      	lsrs	r3, r0, #16
10012e20:	428b      	cmp	r3, r1
10012e22:	d30d      	bcc.n	10012e40 <__aeabi_uidiv+0x3c>
10012e24:	22ff      	movs	r2, #255	; 0xff
10012e26:	0209      	lsls	r1, r1, #8
10012e28:	ba12      	rev	r2, r2
10012e2a:	0c03      	lsrs	r3, r0, #16
10012e2c:	428b      	cmp	r3, r1
10012e2e:	d302      	bcc.n	10012e36 <__aeabi_uidiv+0x32>
10012e30:	1212      	asrs	r2, r2, #8
10012e32:	0209      	lsls	r1, r1, #8
10012e34:	d065      	beq.n	10012f02 <__aeabi_uidiv+0xfe>
10012e36:	0b03      	lsrs	r3, r0, #12
10012e38:	428b      	cmp	r3, r1
10012e3a:	d319      	bcc.n	10012e70 <__aeabi_uidiv+0x6c>
10012e3c:	e000      	b.n	10012e40 <__aeabi_uidiv+0x3c>
10012e3e:	0a09      	lsrs	r1, r1, #8
10012e40:	0bc3      	lsrs	r3, r0, #15
10012e42:	428b      	cmp	r3, r1
10012e44:	d301      	bcc.n	10012e4a <__aeabi_uidiv+0x46>
10012e46:	03cb      	lsls	r3, r1, #15
10012e48:	1ac0      	subs	r0, r0, r3
10012e4a:	4152      	adcs	r2, r2
10012e4c:	0b83      	lsrs	r3, r0, #14
10012e4e:	428b      	cmp	r3, r1
10012e50:	d301      	bcc.n	10012e56 <__aeabi_uidiv+0x52>
10012e52:	038b      	lsls	r3, r1, #14
10012e54:	1ac0      	subs	r0, r0, r3
10012e56:	4152      	adcs	r2, r2
10012e58:	0b43      	lsrs	r3, r0, #13
10012e5a:	428b      	cmp	r3, r1
10012e5c:	d301      	bcc.n	10012e62 <__aeabi_uidiv+0x5e>
10012e5e:	034b      	lsls	r3, r1, #13
10012e60:	1ac0      	subs	r0, r0, r3
10012e62:	4152      	adcs	r2, r2
10012e64:	0b03      	lsrs	r3, r0, #12
10012e66:	428b      	cmp	r3, r1
10012e68:	d301      	bcc.n	10012e6e <__aeabi_uidiv+0x6a>
10012e6a:	030b      	lsls	r3, r1, #12
10012e6c:	1ac0      	subs	r0, r0, r3
10012e6e:	4152      	adcs	r2, r2
10012e70:	0ac3      	lsrs	r3, r0, #11
10012e72:	428b      	cmp	r3, r1
10012e74:	d301      	bcc.n	10012e7a <__aeabi_uidiv+0x76>
10012e76:	02cb      	lsls	r3, r1, #11
10012e78:	1ac0      	subs	r0, r0, r3
10012e7a:	4152      	adcs	r2, r2
10012e7c:	0a83      	lsrs	r3, r0, #10
10012e7e:	428b      	cmp	r3, r1
10012e80:	d301      	bcc.n	10012e86 <__aeabi_uidiv+0x82>
10012e82:	028b      	lsls	r3, r1, #10
10012e84:	1ac0      	subs	r0, r0, r3
10012e86:	4152      	adcs	r2, r2
10012e88:	0a43      	lsrs	r3, r0, #9
10012e8a:	428b      	cmp	r3, r1
10012e8c:	d301      	bcc.n	10012e92 <__aeabi_uidiv+0x8e>
10012e8e:	024b      	lsls	r3, r1, #9
10012e90:	1ac0      	subs	r0, r0, r3
10012e92:	4152      	adcs	r2, r2
10012e94:	0a03      	lsrs	r3, r0, #8
10012e96:	428b      	cmp	r3, r1
10012e98:	d301      	bcc.n	10012e9e <__aeabi_uidiv+0x9a>
10012e9a:	020b      	lsls	r3, r1, #8
10012e9c:	1ac0      	subs	r0, r0, r3
10012e9e:	4152      	adcs	r2, r2
10012ea0:	d2cd      	bcs.n	10012e3e <__aeabi_uidiv+0x3a>
10012ea2:	09c3      	lsrs	r3, r0, #7
10012ea4:	428b      	cmp	r3, r1
10012ea6:	d301      	bcc.n	10012eac <__aeabi_uidiv+0xa8>
10012ea8:	01cb      	lsls	r3, r1, #7
10012eaa:	1ac0      	subs	r0, r0, r3
10012eac:	4152      	adcs	r2, r2
10012eae:	0983      	lsrs	r3, r0, #6
10012eb0:	428b      	cmp	r3, r1
10012eb2:	d301      	bcc.n	10012eb8 <__aeabi_uidiv+0xb4>
10012eb4:	018b      	lsls	r3, r1, #6
10012eb6:	1ac0      	subs	r0, r0, r3
10012eb8:	4152      	adcs	r2, r2
10012eba:	0943      	lsrs	r3, r0, #5
10012ebc:	428b      	cmp	r3, r1
10012ebe:	d301      	bcc.n	10012ec4 <__aeabi_uidiv+0xc0>
10012ec0:	014b      	lsls	r3, r1, #5
10012ec2:	1ac0      	subs	r0, r0, r3
10012ec4:	4152      	adcs	r2, r2
10012ec6:	0903      	lsrs	r3, r0, #4
10012ec8:	428b      	cmp	r3, r1
10012eca:	d301      	bcc.n	10012ed0 <__aeabi_uidiv+0xcc>
10012ecc:	010b      	lsls	r3, r1, #4
10012ece:	1ac0      	subs	r0, r0, r3
10012ed0:	4152      	adcs	r2, r2
10012ed2:	08c3      	lsrs	r3, r0, #3
10012ed4:	428b      	cmp	r3, r1
10012ed6:	d301      	bcc.n	10012edc <__aeabi_uidiv+0xd8>
10012ed8:	00cb      	lsls	r3, r1, #3
10012eda:	1ac0      	subs	r0, r0, r3
10012edc:	4152      	adcs	r2, r2
10012ede:	0883      	lsrs	r3, r0, #2
10012ee0:	428b      	cmp	r3, r1
10012ee2:	d301      	bcc.n	10012ee8 <__aeabi_uidiv+0xe4>
10012ee4:	008b      	lsls	r3, r1, #2
10012ee6:	1ac0      	subs	r0, r0, r3
10012ee8:	4152      	adcs	r2, r2
10012eea:	0843      	lsrs	r3, r0, #1
10012eec:	428b      	cmp	r3, r1
10012eee:	d301      	bcc.n	10012ef4 <__aeabi_uidiv+0xf0>
10012ef0:	004b      	lsls	r3, r1, #1
10012ef2:	1ac0      	subs	r0, r0, r3
10012ef4:	4152      	adcs	r2, r2
10012ef6:	1a41      	subs	r1, r0, r1
10012ef8:	d200      	bcs.n	10012efc <__aeabi_uidiv+0xf8>
10012efa:	4601      	mov	r1, r0
10012efc:	4152      	adcs	r2, r2
10012efe:	4610      	mov	r0, r2
10012f00:	4770      	bx	lr
10012f02:	e7ff      	b.n	10012f04 <__aeabi_uidiv+0x100>
10012f04:	b501      	push	{r0, lr}
10012f06:	2000      	movs	r0, #0
10012f08:	f000 f8f0 	bl	100130ec <__aeabi_idiv0>
10012f0c:	bd02      	pop	{r1, pc}
10012f0e:	46c0      	nop			; (mov r8, r8)

10012f10 <__aeabi_uidivmod>:
10012f10:	2900      	cmp	r1, #0
10012f12:	d0f7      	beq.n	10012f04 <__aeabi_uidiv+0x100>
10012f14:	e776      	b.n	10012e04 <__aeabi_uidiv>
10012f16:	4770      	bx	lr

10012f18 <__aeabi_idiv>:
10012f18:	4603      	mov	r3, r0
10012f1a:	430b      	orrs	r3, r1
10012f1c:	d47f      	bmi.n	1001301e <__aeabi_idiv+0x106>
10012f1e:	2200      	movs	r2, #0
10012f20:	0843      	lsrs	r3, r0, #1
10012f22:	428b      	cmp	r3, r1
10012f24:	d374      	bcc.n	10013010 <__aeabi_idiv+0xf8>
10012f26:	0903      	lsrs	r3, r0, #4
10012f28:	428b      	cmp	r3, r1
10012f2a:	d35f      	bcc.n	10012fec <__aeabi_idiv+0xd4>
10012f2c:	0a03      	lsrs	r3, r0, #8
10012f2e:	428b      	cmp	r3, r1
10012f30:	d344      	bcc.n	10012fbc <__aeabi_idiv+0xa4>
10012f32:	0b03      	lsrs	r3, r0, #12
10012f34:	428b      	cmp	r3, r1
10012f36:	d328      	bcc.n	10012f8a <__aeabi_idiv+0x72>
10012f38:	0c03      	lsrs	r3, r0, #16
10012f3a:	428b      	cmp	r3, r1
10012f3c:	d30d      	bcc.n	10012f5a <__aeabi_idiv+0x42>
10012f3e:	22ff      	movs	r2, #255	; 0xff
10012f40:	0209      	lsls	r1, r1, #8
10012f42:	ba12      	rev	r2, r2
10012f44:	0c03      	lsrs	r3, r0, #16
10012f46:	428b      	cmp	r3, r1
10012f48:	d302      	bcc.n	10012f50 <__aeabi_idiv+0x38>
10012f4a:	1212      	asrs	r2, r2, #8
10012f4c:	0209      	lsls	r1, r1, #8
10012f4e:	d065      	beq.n	1001301c <__aeabi_idiv+0x104>
10012f50:	0b03      	lsrs	r3, r0, #12
10012f52:	428b      	cmp	r3, r1
10012f54:	d319      	bcc.n	10012f8a <__aeabi_idiv+0x72>
10012f56:	e000      	b.n	10012f5a <__aeabi_idiv+0x42>
10012f58:	0a09      	lsrs	r1, r1, #8
10012f5a:	0bc3      	lsrs	r3, r0, #15
10012f5c:	428b      	cmp	r3, r1
10012f5e:	d301      	bcc.n	10012f64 <__aeabi_idiv+0x4c>
10012f60:	03cb      	lsls	r3, r1, #15
10012f62:	1ac0      	subs	r0, r0, r3
10012f64:	4152      	adcs	r2, r2
10012f66:	0b83      	lsrs	r3, r0, #14
10012f68:	428b      	cmp	r3, r1
10012f6a:	d301      	bcc.n	10012f70 <__aeabi_idiv+0x58>
10012f6c:	038b      	lsls	r3, r1, #14
10012f6e:	1ac0      	subs	r0, r0, r3
10012f70:	4152      	adcs	r2, r2
10012f72:	0b43      	lsrs	r3, r0, #13
10012f74:	428b      	cmp	r3, r1
10012f76:	d301      	bcc.n	10012f7c <__aeabi_idiv+0x64>
10012f78:	034b      	lsls	r3, r1, #13
10012f7a:	1ac0      	subs	r0, r0, r3
10012f7c:	4152      	adcs	r2, r2
10012f7e:	0b03      	lsrs	r3, r0, #12
10012f80:	428b      	cmp	r3, r1
10012f82:	d301      	bcc.n	10012f88 <__aeabi_idiv+0x70>
10012f84:	030b      	lsls	r3, r1, #12
10012f86:	1ac0      	subs	r0, r0, r3
10012f88:	4152      	adcs	r2, r2
10012f8a:	0ac3      	lsrs	r3, r0, #11
10012f8c:	428b      	cmp	r3, r1
10012f8e:	d301      	bcc.n	10012f94 <__aeabi_idiv+0x7c>
10012f90:	02cb      	lsls	r3, r1, #11
10012f92:	1ac0      	subs	r0, r0, r3
10012f94:	4152      	adcs	r2, r2
10012f96:	0a83      	lsrs	r3, r0, #10
10012f98:	428b      	cmp	r3, r1
10012f9a:	d301      	bcc.n	10012fa0 <__aeabi_idiv+0x88>
10012f9c:	028b      	lsls	r3, r1, #10
10012f9e:	1ac0      	subs	r0, r0, r3
10012fa0:	4152      	adcs	r2, r2
10012fa2:	0a43      	lsrs	r3, r0, #9
10012fa4:	428b      	cmp	r3, r1
10012fa6:	d301      	bcc.n	10012fac <__aeabi_idiv+0x94>
10012fa8:	024b      	lsls	r3, r1, #9
10012faa:	1ac0      	subs	r0, r0, r3
10012fac:	4152      	adcs	r2, r2
10012fae:	0a03      	lsrs	r3, r0, #8
10012fb0:	428b      	cmp	r3, r1
10012fb2:	d301      	bcc.n	10012fb8 <__aeabi_idiv+0xa0>
10012fb4:	020b      	lsls	r3, r1, #8
10012fb6:	1ac0      	subs	r0, r0, r3
10012fb8:	4152      	adcs	r2, r2
10012fba:	d2cd      	bcs.n	10012f58 <__aeabi_idiv+0x40>
10012fbc:	09c3      	lsrs	r3, r0, #7
10012fbe:	428b      	cmp	r3, r1
10012fc0:	d301      	bcc.n	10012fc6 <__aeabi_idiv+0xae>
10012fc2:	01cb      	lsls	r3, r1, #7
10012fc4:	1ac0      	subs	r0, r0, r3
10012fc6:	4152      	adcs	r2, r2
10012fc8:	0983      	lsrs	r3, r0, #6
10012fca:	428b      	cmp	r3, r1
10012fcc:	d301      	bcc.n	10012fd2 <__aeabi_idiv+0xba>
10012fce:	018b      	lsls	r3, r1, #6
10012fd0:	1ac0      	subs	r0, r0, r3
10012fd2:	4152      	adcs	r2, r2
10012fd4:	0943      	lsrs	r3, r0, #5
10012fd6:	428b      	cmp	r3, r1
10012fd8:	d301      	bcc.n	10012fde <__aeabi_idiv+0xc6>
10012fda:	014b      	lsls	r3, r1, #5
10012fdc:	1ac0      	subs	r0, r0, r3
10012fde:	4152      	adcs	r2, r2
10012fe0:	0903      	lsrs	r3, r0, #4
10012fe2:	428b      	cmp	r3, r1
10012fe4:	d301      	bcc.n	10012fea <__aeabi_idiv+0xd2>
10012fe6:	010b      	lsls	r3, r1, #4
10012fe8:	1ac0      	subs	r0, r0, r3
10012fea:	4152      	adcs	r2, r2
10012fec:	08c3      	lsrs	r3, r0, #3
10012fee:	428b      	cmp	r3, r1
10012ff0:	d301      	bcc.n	10012ff6 <__aeabi_idiv+0xde>
10012ff2:	00cb      	lsls	r3, r1, #3
10012ff4:	1ac0      	subs	r0, r0, r3
10012ff6:	4152      	adcs	r2, r2
10012ff8:	0883      	lsrs	r3, r0, #2
10012ffa:	428b      	cmp	r3, r1
10012ffc:	d301      	bcc.n	10013002 <__aeabi_idiv+0xea>
10012ffe:	008b      	lsls	r3, r1, #2
10013000:	1ac0      	subs	r0, r0, r3
10013002:	4152      	adcs	r2, r2
10013004:	0843      	lsrs	r3, r0, #1
10013006:	428b      	cmp	r3, r1
10013008:	d301      	bcc.n	1001300e <__aeabi_idiv+0xf6>
1001300a:	004b      	lsls	r3, r1, #1
1001300c:	1ac0      	subs	r0, r0, r3
1001300e:	4152      	adcs	r2, r2
10013010:	1a41      	subs	r1, r0, r1
10013012:	d200      	bcs.n	10013016 <__aeabi_idiv+0xfe>
10013014:	4601      	mov	r1, r0
10013016:	4152      	adcs	r2, r2
10013018:	4610      	mov	r0, r2
1001301a:	4770      	bx	lr
1001301c:	e05d      	b.n	100130da <__aeabi_idiv+0x1c2>
1001301e:	0fca      	lsrs	r2, r1, #31
10013020:	d000      	beq.n	10013024 <__aeabi_idiv+0x10c>
10013022:	4249      	negs	r1, r1
10013024:	1003      	asrs	r3, r0, #32
10013026:	d300      	bcc.n	1001302a <__aeabi_idiv+0x112>
10013028:	4240      	negs	r0, r0
1001302a:	4053      	eors	r3, r2
1001302c:	2200      	movs	r2, #0
1001302e:	469c      	mov	ip, r3
10013030:	0903      	lsrs	r3, r0, #4
10013032:	428b      	cmp	r3, r1
10013034:	d32d      	bcc.n	10013092 <__aeabi_idiv+0x17a>
10013036:	0a03      	lsrs	r3, r0, #8
10013038:	428b      	cmp	r3, r1
1001303a:	d312      	bcc.n	10013062 <__aeabi_idiv+0x14a>
1001303c:	22fc      	movs	r2, #252	; 0xfc
1001303e:	0189      	lsls	r1, r1, #6
10013040:	ba12      	rev	r2, r2
10013042:	0a03      	lsrs	r3, r0, #8
10013044:	428b      	cmp	r3, r1
10013046:	d30c      	bcc.n	10013062 <__aeabi_idiv+0x14a>
10013048:	0189      	lsls	r1, r1, #6
1001304a:	1192      	asrs	r2, r2, #6
1001304c:	428b      	cmp	r3, r1
1001304e:	d308      	bcc.n	10013062 <__aeabi_idiv+0x14a>
10013050:	0189      	lsls	r1, r1, #6
10013052:	1192      	asrs	r2, r2, #6
10013054:	428b      	cmp	r3, r1
10013056:	d304      	bcc.n	10013062 <__aeabi_idiv+0x14a>
10013058:	0189      	lsls	r1, r1, #6
1001305a:	d03a      	beq.n	100130d2 <__aeabi_idiv+0x1ba>
1001305c:	1192      	asrs	r2, r2, #6
1001305e:	e000      	b.n	10013062 <__aeabi_idiv+0x14a>
10013060:	0989      	lsrs	r1, r1, #6
10013062:	09c3      	lsrs	r3, r0, #7
10013064:	428b      	cmp	r3, r1
10013066:	d301      	bcc.n	1001306c <__aeabi_idiv+0x154>
10013068:	01cb      	lsls	r3, r1, #7
1001306a:	1ac0      	subs	r0, r0, r3
1001306c:	4152      	adcs	r2, r2
1001306e:	0983      	lsrs	r3, r0, #6
10013070:	428b      	cmp	r3, r1
10013072:	d301      	bcc.n	10013078 <__aeabi_idiv+0x160>
10013074:	018b      	lsls	r3, r1, #6
10013076:	1ac0      	subs	r0, r0, r3
10013078:	4152      	adcs	r2, r2
1001307a:	0943      	lsrs	r3, r0, #5
1001307c:	428b      	cmp	r3, r1
1001307e:	d301      	bcc.n	10013084 <__aeabi_idiv+0x16c>
10013080:	014b      	lsls	r3, r1, #5
10013082:	1ac0      	subs	r0, r0, r3
10013084:	4152      	adcs	r2, r2
10013086:	0903      	lsrs	r3, r0, #4
10013088:	428b      	cmp	r3, r1
1001308a:	d301      	bcc.n	10013090 <__aeabi_idiv+0x178>
1001308c:	010b      	lsls	r3, r1, #4
1001308e:	1ac0      	subs	r0, r0, r3
10013090:	4152      	adcs	r2, r2
10013092:	08c3      	lsrs	r3, r0, #3
10013094:	428b      	cmp	r3, r1
10013096:	d301      	bcc.n	1001309c <__aeabi_idiv+0x184>
10013098:	00cb      	lsls	r3, r1, #3
1001309a:	1ac0      	subs	r0, r0, r3
1001309c:	4152      	adcs	r2, r2
1001309e:	0883      	lsrs	r3, r0, #2
100130a0:	428b      	cmp	r3, r1
100130a2:	d301      	bcc.n	100130a8 <__aeabi_idiv+0x190>
100130a4:	008b      	lsls	r3, r1, #2
100130a6:	1ac0      	subs	r0, r0, r3
100130a8:	4152      	adcs	r2, r2
100130aa:	d2d9      	bcs.n	10013060 <__aeabi_idiv+0x148>
100130ac:	0843      	lsrs	r3, r0, #1
100130ae:	428b      	cmp	r3, r1
100130b0:	d301      	bcc.n	100130b6 <__aeabi_idiv+0x19e>
100130b2:	004b      	lsls	r3, r1, #1
100130b4:	1ac0      	subs	r0, r0, r3
100130b6:	4152      	adcs	r2, r2
100130b8:	1a41      	subs	r1, r0, r1
100130ba:	d200      	bcs.n	100130be <__aeabi_idiv+0x1a6>
100130bc:	4601      	mov	r1, r0
100130be:	4663      	mov	r3, ip
100130c0:	4152      	adcs	r2, r2
100130c2:	105b      	asrs	r3, r3, #1
100130c4:	4610      	mov	r0, r2
100130c6:	d301      	bcc.n	100130cc <__aeabi_idiv+0x1b4>
100130c8:	4240      	negs	r0, r0
100130ca:	2b00      	cmp	r3, #0
100130cc:	d500      	bpl.n	100130d0 <__aeabi_idiv+0x1b8>
100130ce:	4249      	negs	r1, r1
100130d0:	4770      	bx	lr
100130d2:	4663      	mov	r3, ip
100130d4:	105b      	asrs	r3, r3, #1
100130d6:	d300      	bcc.n	100130da <__aeabi_idiv+0x1c2>
100130d8:	4240      	negs	r0, r0
100130da:	b501      	push	{r0, lr}
100130dc:	2000      	movs	r0, #0
100130de:	f000 f805 	bl	100130ec <__aeabi_idiv0>
100130e2:	bd02      	pop	{r1, pc}

100130e4 <__aeabi_idivmod>:
100130e4:	2900      	cmp	r1, #0
100130e6:	d0f8      	beq.n	100130da <__aeabi_idiv+0x1c2>
100130e8:	e716      	b.n	10012f18 <__aeabi_idiv>
100130ea:	4770      	bx	lr

100130ec <__aeabi_idiv0>:
100130ec:	4770      	bx	lr
100130ee:	46c0      	nop			; (mov r8, r8)

100130f0 <__aeabi_cdrcmple>:
100130f0:	4684      	mov	ip, r0
100130f2:	1c10      	adds	r0, r2, #0
100130f4:	4662      	mov	r2, ip
100130f6:	468c      	mov	ip, r1
100130f8:	1c19      	adds	r1, r3, #0
100130fa:	4663      	mov	r3, ip
100130fc:	e000      	b.n	10013100 <__aeabi_cdcmpeq>
100130fe:	46c0      	nop			; (mov r8, r8)

10013100 <__aeabi_cdcmpeq>:
10013100:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10013102:	f000 fe37 	bl	10013d74 <__ledf2>
10013106:	2800      	cmp	r0, #0
10013108:	d401      	bmi.n	1001310e <__aeabi_cdcmpeq+0xe>
1001310a:	2100      	movs	r1, #0
1001310c:	42c8      	cmn	r0, r1
1001310e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10013110 <__aeabi_dcmpeq>:
10013110:	b510      	push	{r4, lr}
10013112:	f000 fd8b 	bl	10013c2c <__eqdf2>
10013116:	4240      	negs	r0, r0
10013118:	3001      	adds	r0, #1
1001311a:	bd10      	pop	{r4, pc}

1001311c <__aeabi_dcmplt>:
1001311c:	b510      	push	{r4, lr}
1001311e:	f000 fe29 	bl	10013d74 <__ledf2>
10013122:	2800      	cmp	r0, #0
10013124:	db01      	blt.n	1001312a <__aeabi_dcmplt+0xe>
10013126:	2000      	movs	r0, #0
10013128:	bd10      	pop	{r4, pc}
1001312a:	2001      	movs	r0, #1
1001312c:	bd10      	pop	{r4, pc}
1001312e:	46c0      	nop			; (mov r8, r8)

10013130 <__aeabi_dcmple>:
10013130:	b510      	push	{r4, lr}
10013132:	f000 fe1f 	bl	10013d74 <__ledf2>
10013136:	2800      	cmp	r0, #0
10013138:	dd01      	ble.n	1001313e <__aeabi_dcmple+0xe>
1001313a:	2000      	movs	r0, #0
1001313c:	bd10      	pop	{r4, pc}
1001313e:	2001      	movs	r0, #1
10013140:	bd10      	pop	{r4, pc}
10013142:	46c0      	nop			; (mov r8, r8)

10013144 <__aeabi_dcmpgt>:
10013144:	b510      	push	{r4, lr}
10013146:	f000 fdb1 	bl	10013cac <__gedf2>
1001314a:	2800      	cmp	r0, #0
1001314c:	dc01      	bgt.n	10013152 <__aeabi_dcmpgt+0xe>
1001314e:	2000      	movs	r0, #0
10013150:	bd10      	pop	{r4, pc}
10013152:	2001      	movs	r0, #1
10013154:	bd10      	pop	{r4, pc}
10013156:	46c0      	nop			; (mov r8, r8)

10013158 <__aeabi_dcmpge>:
10013158:	b510      	push	{r4, lr}
1001315a:	f000 fda7 	bl	10013cac <__gedf2>
1001315e:	2800      	cmp	r0, #0
10013160:	da01      	bge.n	10013166 <__aeabi_dcmpge+0xe>
10013162:	2000      	movs	r0, #0
10013164:	bd10      	pop	{r4, pc}
10013166:	2001      	movs	r0, #1
10013168:	bd10      	pop	{r4, pc}
1001316a:	46c0      	nop			; (mov r8, r8)

1001316c <__aeabi_cfrcmple>:
1001316c:	4684      	mov	ip, r0
1001316e:	1c08      	adds	r0, r1, #0
10013170:	4661      	mov	r1, ip
10013172:	e7ff      	b.n	10013174 <__aeabi_cfcmpeq>

10013174 <__aeabi_cfcmpeq>:
10013174:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10013176:	f000 fa1b 	bl	100135b0 <__lesf2>
1001317a:	2800      	cmp	r0, #0
1001317c:	d401      	bmi.n	10013182 <__aeabi_cfcmpeq+0xe>
1001317e:	2100      	movs	r1, #0
10013180:	42c8      	cmn	r0, r1
10013182:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10013184 <__aeabi_fcmpeq>:
10013184:	b510      	push	{r4, lr}
10013186:	f000 f9a7 	bl	100134d8 <__eqsf2>
1001318a:	4240      	negs	r0, r0
1001318c:	3001      	adds	r0, #1
1001318e:	bd10      	pop	{r4, pc}

10013190 <__aeabi_fcmplt>:
10013190:	b510      	push	{r4, lr}
10013192:	f000 fa0d 	bl	100135b0 <__lesf2>
10013196:	2800      	cmp	r0, #0
10013198:	db01      	blt.n	1001319e <__aeabi_fcmplt+0xe>
1001319a:	2000      	movs	r0, #0
1001319c:	bd10      	pop	{r4, pc}
1001319e:	2001      	movs	r0, #1
100131a0:	bd10      	pop	{r4, pc}
100131a2:	46c0      	nop			; (mov r8, r8)

100131a4 <__aeabi_fcmple>:
100131a4:	b510      	push	{r4, lr}
100131a6:	f000 fa03 	bl	100135b0 <__lesf2>
100131aa:	2800      	cmp	r0, #0
100131ac:	dd01      	ble.n	100131b2 <__aeabi_fcmple+0xe>
100131ae:	2000      	movs	r0, #0
100131b0:	bd10      	pop	{r4, pc}
100131b2:	2001      	movs	r0, #1
100131b4:	bd10      	pop	{r4, pc}
100131b6:	46c0      	nop			; (mov r8, r8)

100131b8 <__aeabi_fcmpgt>:
100131b8:	b510      	push	{r4, lr}
100131ba:	f000 f9b5 	bl	10013528 <__gesf2>
100131be:	2800      	cmp	r0, #0
100131c0:	dc01      	bgt.n	100131c6 <__aeabi_fcmpgt+0xe>
100131c2:	2000      	movs	r0, #0
100131c4:	bd10      	pop	{r4, pc}
100131c6:	2001      	movs	r0, #1
100131c8:	bd10      	pop	{r4, pc}
100131ca:	46c0      	nop			; (mov r8, r8)

100131cc <__aeabi_fcmpge>:
100131cc:	b510      	push	{r4, lr}
100131ce:	f000 f9ab 	bl	10013528 <__gesf2>
100131d2:	2800      	cmp	r0, #0
100131d4:	da01      	bge.n	100131da <__aeabi_fcmpge+0xe>
100131d6:	2000      	movs	r0, #0
100131d8:	bd10      	pop	{r4, pc}
100131da:	2001      	movs	r0, #1
100131dc:	bd10      	pop	{r4, pc}
100131de:	46c0      	nop			; (mov r8, r8)

100131e0 <__aeabi_lmul>:
100131e0:	b5f0      	push	{r4, r5, r6, r7, lr}
100131e2:	464f      	mov	r7, r9
100131e4:	4646      	mov	r6, r8
100131e6:	b4c0      	push	{r6, r7}
100131e8:	0416      	lsls	r6, r2, #16
100131ea:	0c36      	lsrs	r6, r6, #16
100131ec:	4699      	mov	r9, r3
100131ee:	0033      	movs	r3, r6
100131f0:	0405      	lsls	r5, r0, #16
100131f2:	0c2c      	lsrs	r4, r5, #16
100131f4:	0c07      	lsrs	r7, r0, #16
100131f6:	0c15      	lsrs	r5, r2, #16
100131f8:	4363      	muls	r3, r4
100131fa:	437e      	muls	r6, r7
100131fc:	436f      	muls	r7, r5
100131fe:	4365      	muls	r5, r4
10013200:	0c1c      	lsrs	r4, r3, #16
10013202:	19ad      	adds	r5, r5, r6
10013204:	1964      	adds	r4, r4, r5
10013206:	469c      	mov	ip, r3
10013208:	42a6      	cmp	r6, r4
1001320a:	d903      	bls.n	10013214 <__aeabi_lmul+0x34>
1001320c:	2380      	movs	r3, #128	; 0x80
1001320e:	025b      	lsls	r3, r3, #9
10013210:	4698      	mov	r8, r3
10013212:	4447      	add	r7, r8
10013214:	4663      	mov	r3, ip
10013216:	0c25      	lsrs	r5, r4, #16
10013218:	19ef      	adds	r7, r5, r7
1001321a:	041d      	lsls	r5, r3, #16
1001321c:	464b      	mov	r3, r9
1001321e:	434a      	muls	r2, r1
10013220:	4343      	muls	r3, r0
10013222:	0c2d      	lsrs	r5, r5, #16
10013224:	0424      	lsls	r4, r4, #16
10013226:	1964      	adds	r4, r4, r5
10013228:	1899      	adds	r1, r3, r2
1001322a:	19c9      	adds	r1, r1, r7
1001322c:	0020      	movs	r0, r4
1001322e:	bc0c      	pop	{r2, r3}
10013230:	4690      	mov	r8, r2
10013232:	4699      	mov	r9, r3
10013234:	bdf0      	pop	{r4, r5, r6, r7, pc}
10013236:	46c0      	nop			; (mov r8, r8)

10013238 <__aeabi_f2uiz>:
10013238:	219e      	movs	r1, #158	; 0x9e
1001323a:	b510      	push	{r4, lr}
1001323c:	05c9      	lsls	r1, r1, #23
1001323e:	1c04      	adds	r4, r0, #0
10013240:	f7ff ffc4 	bl	100131cc <__aeabi_fcmpge>
10013244:	2800      	cmp	r0, #0
10013246:	d103      	bne.n	10013250 <__aeabi_f2uiz+0x18>
10013248:	1c20      	adds	r0, r4, #0
1001324a:	f000 fc8f 	bl	10013b6c <__aeabi_f2iz>
1001324e:	bd10      	pop	{r4, pc}
10013250:	219e      	movs	r1, #158	; 0x9e
10013252:	1c20      	adds	r0, r4, #0
10013254:	05c9      	lsls	r1, r1, #23
10013256:	f000 fb03 	bl	10013860 <__aeabi_fsub>
1001325a:	f000 fc87 	bl	10013b6c <__aeabi_f2iz>
1001325e:	2380      	movs	r3, #128	; 0x80
10013260:	061b      	lsls	r3, r3, #24
10013262:	469c      	mov	ip, r3
10013264:	4460      	add	r0, ip
10013266:	e7f2      	b.n	1001324e <__aeabi_f2uiz+0x16>

10013268 <__aeabi_d2uiz>:
10013268:	b570      	push	{r4, r5, r6, lr}
1001326a:	2200      	movs	r2, #0
1001326c:	4b0c      	ldr	r3, [pc, #48]	; (100132a0 <__aeabi_d2uiz+0x38>)
1001326e:	0004      	movs	r4, r0
10013270:	000d      	movs	r5, r1
10013272:	f7ff ff71 	bl	10013158 <__aeabi_dcmpge>
10013276:	2800      	cmp	r0, #0
10013278:	d104      	bne.n	10013284 <__aeabi_d2uiz+0x1c>
1001327a:	0020      	movs	r0, r4
1001327c:	0029      	movs	r1, r5
1001327e:	f001 fbb1 	bl	100149e4 <__aeabi_d2iz>
10013282:	bd70      	pop	{r4, r5, r6, pc}
10013284:	4b06      	ldr	r3, [pc, #24]	; (100132a0 <__aeabi_d2uiz+0x38>)
10013286:	2200      	movs	r2, #0
10013288:	0020      	movs	r0, r4
1001328a:	0029      	movs	r1, r5
1001328c:	f001 f856 	bl	1001433c <__aeabi_dsub>
10013290:	f001 fba8 	bl	100149e4 <__aeabi_d2iz>
10013294:	2380      	movs	r3, #128	; 0x80
10013296:	061b      	lsls	r3, r3, #24
10013298:	469c      	mov	ip, r3
1001329a:	4460      	add	r0, ip
1001329c:	e7f1      	b.n	10013282 <__aeabi_d2uiz+0x1a>
1001329e:	46c0      	nop			; (mov r8, r8)
100132a0:	41e00000 	.word	0x41e00000

100132a4 <__aeabi_fdiv>:
100132a4:	b5f0      	push	{r4, r5, r6, r7, lr}
100132a6:	4656      	mov	r6, sl
100132a8:	4644      	mov	r4, r8
100132aa:	465f      	mov	r7, fp
100132ac:	464d      	mov	r5, r9
100132ae:	b4f0      	push	{r4, r5, r6, r7}
100132b0:	0244      	lsls	r4, r0, #9
100132b2:	0046      	lsls	r6, r0, #1
100132b4:	0fc7      	lsrs	r7, r0, #31
100132b6:	b083      	sub	sp, #12
100132b8:	4688      	mov	r8, r1
100132ba:	0a65      	lsrs	r5, r4, #9
100132bc:	0e36      	lsrs	r6, r6, #24
100132be:	46ba      	mov	sl, r7
100132c0:	d03d      	beq.n	1001333e <__aeabi_fdiv+0x9a>
100132c2:	2eff      	cmp	r6, #255	; 0xff
100132c4:	d022      	beq.n	1001330c <__aeabi_fdiv+0x68>
100132c6:	2300      	movs	r3, #0
100132c8:	00ec      	lsls	r4, r5, #3
100132ca:	2580      	movs	r5, #128	; 0x80
100132cc:	4699      	mov	r9, r3
100132ce:	469b      	mov	fp, r3
100132d0:	04ed      	lsls	r5, r5, #19
100132d2:	4325      	orrs	r5, r4
100132d4:	3e7f      	subs	r6, #127	; 0x7f
100132d6:	4643      	mov	r3, r8
100132d8:	025c      	lsls	r4, r3, #9
100132da:	0058      	lsls	r0, r3, #1
100132dc:	0fdb      	lsrs	r3, r3, #31
100132de:	0a64      	lsrs	r4, r4, #9
100132e0:	0e00      	lsrs	r0, r0, #24
100132e2:	4698      	mov	r8, r3
100132e4:	d036      	beq.n	10013354 <__aeabi_fdiv+0xb0>
100132e6:	28ff      	cmp	r0, #255	; 0xff
100132e8:	d030      	beq.n	1001334c <__aeabi_fdiv+0xa8>
100132ea:	2380      	movs	r3, #128	; 0x80
100132ec:	2100      	movs	r1, #0
100132ee:	00e4      	lsls	r4, r4, #3
100132f0:	04db      	lsls	r3, r3, #19
100132f2:	431c      	orrs	r4, r3
100132f4:	387f      	subs	r0, #127	; 0x7f
100132f6:	1a30      	subs	r0, r6, r0
100132f8:	9001      	str	r0, [sp, #4]
100132fa:	4648      	mov	r0, r9
100132fc:	4642      	mov	r2, r8
100132fe:	4308      	orrs	r0, r1
10013300:	4e72      	ldr	r6, [pc, #456]	; (100134cc <__aeabi_fdiv+0x228>)
10013302:	0080      	lsls	r0, r0, #2
10013304:	5830      	ldr	r0, [r6, r0]
10013306:	407a      	eors	r2, r7
10013308:	0013      	movs	r3, r2
1001330a:	4687      	mov	pc, r0
1001330c:	2d00      	cmp	r5, #0
1001330e:	d144      	bne.n	1001339a <__aeabi_fdiv+0xf6>
10013310:	2308      	movs	r3, #8
10013312:	4699      	mov	r9, r3
10013314:	3b06      	subs	r3, #6
10013316:	469b      	mov	fp, r3
10013318:	e7dd      	b.n	100132d6 <__aeabi_fdiv+0x32>
1001331a:	2201      	movs	r2, #1
1001331c:	20ff      	movs	r0, #255	; 0xff
1001331e:	2400      	movs	r4, #0
10013320:	401a      	ands	r2, r3
10013322:	0264      	lsls	r4, r4, #9
10013324:	05c3      	lsls	r3, r0, #23
10013326:	0a64      	lsrs	r4, r4, #9
10013328:	07d2      	lsls	r2, r2, #31
1001332a:	431c      	orrs	r4, r3
1001332c:	4314      	orrs	r4, r2
1001332e:	0020      	movs	r0, r4
10013330:	b003      	add	sp, #12
10013332:	bc3c      	pop	{r2, r3, r4, r5}
10013334:	4690      	mov	r8, r2
10013336:	4699      	mov	r9, r3
10013338:	46a2      	mov	sl, r4
1001333a:	46ab      	mov	fp, r5
1001333c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001333e:	2d00      	cmp	r5, #0
10013340:	d120      	bne.n	10013384 <__aeabi_fdiv+0xe0>
10013342:	2304      	movs	r3, #4
10013344:	4699      	mov	r9, r3
10013346:	3b03      	subs	r3, #3
10013348:	469b      	mov	fp, r3
1001334a:	e7c4      	b.n	100132d6 <__aeabi_fdiv+0x32>
1001334c:	2c00      	cmp	r4, #0
1001334e:	d117      	bne.n	10013380 <__aeabi_fdiv+0xdc>
10013350:	2102      	movs	r1, #2
10013352:	e002      	b.n	1001335a <__aeabi_fdiv+0xb6>
10013354:	2c00      	cmp	r4, #0
10013356:	d10a      	bne.n	1001336e <__aeabi_fdiv+0xca>
10013358:	2101      	movs	r1, #1
1001335a:	1a32      	subs	r2, r6, r0
1001335c:	9201      	str	r2, [sp, #4]
1001335e:	464a      	mov	r2, r9
10013360:	4643      	mov	r3, r8
10013362:	430a      	orrs	r2, r1
10013364:	485a      	ldr	r0, [pc, #360]	; (100134d0 <__aeabi_fdiv+0x22c>)
10013366:	0092      	lsls	r2, r2, #2
10013368:	5882      	ldr	r2, [r0, r2]
1001336a:	407b      	eors	r3, r7
1001336c:	4697      	mov	pc, r2
1001336e:	0020      	movs	r0, r4
10013370:	f001 fba6 	bl	10014ac0 <__clzsi2>
10013374:	1f43      	subs	r3, r0, #5
10013376:	3076      	adds	r0, #118	; 0x76
10013378:	409c      	lsls	r4, r3
1001337a:	4240      	negs	r0, r0
1001337c:	2100      	movs	r1, #0
1001337e:	e7ba      	b.n	100132f6 <__aeabi_fdiv+0x52>
10013380:	2103      	movs	r1, #3
10013382:	e7b8      	b.n	100132f6 <__aeabi_fdiv+0x52>
10013384:	0028      	movs	r0, r5
10013386:	f001 fb9b 	bl	10014ac0 <__clzsi2>
1001338a:	1f43      	subs	r3, r0, #5
1001338c:	409d      	lsls	r5, r3
1001338e:	2300      	movs	r3, #0
10013390:	3076      	adds	r0, #118	; 0x76
10013392:	4246      	negs	r6, r0
10013394:	4699      	mov	r9, r3
10013396:	469b      	mov	fp, r3
10013398:	e79d      	b.n	100132d6 <__aeabi_fdiv+0x32>
1001339a:	230c      	movs	r3, #12
1001339c:	4699      	mov	r9, r3
1001339e:	3b09      	subs	r3, #9
100133a0:	469b      	mov	fp, r3
100133a2:	e798      	b.n	100132d6 <__aeabi_fdiv+0x32>
100133a4:	2480      	movs	r4, #128	; 0x80
100133a6:	2200      	movs	r2, #0
100133a8:	03e4      	lsls	r4, r4, #15
100133aa:	20ff      	movs	r0, #255	; 0xff
100133ac:	e7b9      	b.n	10013322 <__aeabi_fdiv+0x7e>
100133ae:	2400      	movs	r4, #0
100133b0:	46c2      	mov	sl, r8
100133b2:	468b      	mov	fp, r1
100133b4:	465a      	mov	r2, fp
100133b6:	4653      	mov	r3, sl
100133b8:	2a02      	cmp	r2, #2
100133ba:	d0ae      	beq.n	1001331a <__aeabi_fdiv+0x76>
100133bc:	2a03      	cmp	r2, #3
100133be:	d07d      	beq.n	100134bc <__aeabi_fdiv+0x218>
100133c0:	2a01      	cmp	r2, #1
100133c2:	d131      	bne.n	10013428 <__aeabi_fdiv+0x184>
100133c4:	2201      	movs	r2, #1
100133c6:	2000      	movs	r0, #0
100133c8:	401a      	ands	r2, r3
100133ca:	2400      	movs	r4, #0
100133cc:	e7a9      	b.n	10013322 <__aeabi_fdiv+0x7e>
100133ce:	2201      	movs	r2, #1
100133d0:	1a10      	subs	r0, r2, r0
100133d2:	281b      	cmp	r0, #27
100133d4:	dd56      	ble.n	10013484 <__aeabi_fdiv+0x1e0>
100133d6:	401a      	ands	r2, r3
100133d8:	2000      	movs	r0, #0
100133da:	2400      	movs	r4, #0
100133dc:	e7a1      	b.n	10013322 <__aeabi_fdiv+0x7e>
100133de:	2380      	movs	r3, #128	; 0x80
100133e0:	03db      	lsls	r3, r3, #15
100133e2:	421d      	tst	r5, r3
100133e4:	d14b      	bne.n	1001347e <__aeabi_fdiv+0x1da>
100133e6:	2380      	movs	r3, #128	; 0x80
100133e8:	03db      	lsls	r3, r3, #15
100133ea:	432b      	orrs	r3, r5
100133ec:	025c      	lsls	r4, r3, #9
100133ee:	0a64      	lsrs	r4, r4, #9
100133f0:	003a      	movs	r2, r7
100133f2:	20ff      	movs	r0, #255	; 0xff
100133f4:	e795      	b.n	10013322 <__aeabi_fdiv+0x7e>
100133f6:	016d      	lsls	r5, r5, #5
100133f8:	0160      	lsls	r0, r4, #5
100133fa:	4285      	cmp	r5, r0
100133fc:	d230      	bcs.n	10013460 <__aeabi_fdiv+0x1bc>
100133fe:	9a01      	ldr	r2, [sp, #4]
10013400:	2400      	movs	r4, #0
10013402:	3a01      	subs	r2, #1
10013404:	9201      	str	r2, [sp, #4]
10013406:	221b      	movs	r2, #27
10013408:	2701      	movs	r7, #1
1001340a:	0029      	movs	r1, r5
1001340c:	0064      	lsls	r4, r4, #1
1001340e:	006d      	lsls	r5, r5, #1
10013410:	2900      	cmp	r1, #0
10013412:	db01      	blt.n	10013418 <__aeabi_fdiv+0x174>
10013414:	42a8      	cmp	r0, r5
10013416:	d801      	bhi.n	1001341c <__aeabi_fdiv+0x178>
10013418:	1a2d      	subs	r5, r5, r0
1001341a:	433c      	orrs	r4, r7
1001341c:	3a01      	subs	r2, #1
1001341e:	2a00      	cmp	r2, #0
10013420:	d1f3      	bne.n	1001340a <__aeabi_fdiv+0x166>
10013422:	1e6a      	subs	r2, r5, #1
10013424:	4195      	sbcs	r5, r2
10013426:	432c      	orrs	r4, r5
10013428:	9801      	ldr	r0, [sp, #4]
1001342a:	307f      	adds	r0, #127	; 0x7f
1001342c:	2800      	cmp	r0, #0
1001342e:	ddce      	ble.n	100133ce <__aeabi_fdiv+0x12a>
10013430:	0762      	lsls	r2, r4, #29
10013432:	d004      	beq.n	1001343e <__aeabi_fdiv+0x19a>
10013434:	220f      	movs	r2, #15
10013436:	4022      	ands	r2, r4
10013438:	2a04      	cmp	r2, #4
1001343a:	d000      	beq.n	1001343e <__aeabi_fdiv+0x19a>
1001343c:	3404      	adds	r4, #4
1001343e:	0122      	lsls	r2, r4, #4
10013440:	d503      	bpl.n	1001344a <__aeabi_fdiv+0x1a6>
10013442:	4a24      	ldr	r2, [pc, #144]	; (100134d4 <__aeabi_fdiv+0x230>)
10013444:	9801      	ldr	r0, [sp, #4]
10013446:	4014      	ands	r4, r2
10013448:	3080      	adds	r0, #128	; 0x80
1001344a:	28fe      	cmp	r0, #254	; 0xfe
1001344c:	dd00      	ble.n	10013450 <__aeabi_fdiv+0x1ac>
1001344e:	e764      	b.n	1001331a <__aeabi_fdiv+0x76>
10013450:	2201      	movs	r2, #1
10013452:	01a4      	lsls	r4, r4, #6
10013454:	0a64      	lsrs	r4, r4, #9
10013456:	b2c0      	uxtb	r0, r0
10013458:	401a      	ands	r2, r3
1001345a:	e762      	b.n	10013322 <__aeabi_fdiv+0x7e>
1001345c:	002c      	movs	r4, r5
1001345e:	e7a9      	b.n	100133b4 <__aeabi_fdiv+0x110>
10013460:	1a2d      	subs	r5, r5, r0
10013462:	221a      	movs	r2, #26
10013464:	2401      	movs	r4, #1
10013466:	e7cf      	b.n	10013408 <__aeabi_fdiv+0x164>
10013468:	026b      	lsls	r3, r5, #9
1001346a:	d5bc      	bpl.n	100133e6 <__aeabi_fdiv+0x142>
1001346c:	2400      	movs	r4, #0
1001346e:	2380      	movs	r3, #128	; 0x80
10013470:	03db      	lsls	r3, r3, #15
10013472:	431c      	orrs	r4, r3
10013474:	0264      	lsls	r4, r4, #9
10013476:	0a64      	lsrs	r4, r4, #9
10013478:	4642      	mov	r2, r8
1001347a:	20ff      	movs	r0, #255	; 0xff
1001347c:	e751      	b.n	10013322 <__aeabi_fdiv+0x7e>
1001347e:	421c      	tst	r4, r3
10013480:	d1b3      	bne.n	100133ea <__aeabi_fdiv+0x146>
10013482:	e7f4      	b.n	1001346e <__aeabi_fdiv+0x1ca>
10013484:	0021      	movs	r1, r4
10013486:	2220      	movs	r2, #32
10013488:	40c1      	lsrs	r1, r0
1001348a:	1a10      	subs	r0, r2, r0
1001348c:	4084      	lsls	r4, r0
1001348e:	1e62      	subs	r2, r4, #1
10013490:	4194      	sbcs	r4, r2
10013492:	430c      	orrs	r4, r1
10013494:	0762      	lsls	r2, r4, #29
10013496:	d004      	beq.n	100134a2 <__aeabi_fdiv+0x1fe>
10013498:	220f      	movs	r2, #15
1001349a:	4022      	ands	r2, r4
1001349c:	2a04      	cmp	r2, #4
1001349e:	d000      	beq.n	100134a2 <__aeabi_fdiv+0x1fe>
100134a0:	3404      	adds	r4, #4
100134a2:	0162      	lsls	r2, r4, #5
100134a4:	d504      	bpl.n	100134b0 <__aeabi_fdiv+0x20c>
100134a6:	2201      	movs	r2, #1
100134a8:	2001      	movs	r0, #1
100134aa:	401a      	ands	r2, r3
100134ac:	2400      	movs	r4, #0
100134ae:	e738      	b.n	10013322 <__aeabi_fdiv+0x7e>
100134b0:	2201      	movs	r2, #1
100134b2:	01a4      	lsls	r4, r4, #6
100134b4:	0a64      	lsrs	r4, r4, #9
100134b6:	401a      	ands	r2, r3
100134b8:	2000      	movs	r0, #0
100134ba:	e732      	b.n	10013322 <__aeabi_fdiv+0x7e>
100134bc:	2380      	movs	r3, #128	; 0x80
100134be:	03db      	lsls	r3, r3, #15
100134c0:	431c      	orrs	r4, r3
100134c2:	0264      	lsls	r4, r4, #9
100134c4:	0a64      	lsrs	r4, r4, #9
100134c6:	4652      	mov	r2, sl
100134c8:	20ff      	movs	r0, #255	; 0xff
100134ca:	e72a      	b.n	10013322 <__aeabi_fdiv+0x7e>
100134cc:	10017d34 	.word	0x10017d34
100134d0:	10017d74 	.word	0x10017d74
100134d4:	f7ffffff 	.word	0xf7ffffff

100134d8 <__eqsf2>:
100134d8:	0243      	lsls	r3, r0, #9
100134da:	b570      	push	{r4, r5, r6, lr}
100134dc:	0042      	lsls	r2, r0, #1
100134de:	004c      	lsls	r4, r1, #1
100134e0:	0a5d      	lsrs	r5, r3, #9
100134e2:	0fc3      	lsrs	r3, r0, #31
100134e4:	0248      	lsls	r0, r1, #9
100134e6:	0e12      	lsrs	r2, r2, #24
100134e8:	0a46      	lsrs	r6, r0, #9
100134ea:	0e24      	lsrs	r4, r4, #24
100134ec:	0fc9      	lsrs	r1, r1, #31
100134ee:	2aff      	cmp	r2, #255	; 0xff
100134f0:	d00f      	beq.n	10013512 <__eqsf2+0x3a>
100134f2:	2cff      	cmp	r4, #255	; 0xff
100134f4:	d011      	beq.n	1001351a <__eqsf2+0x42>
100134f6:	2001      	movs	r0, #1
100134f8:	42a2      	cmp	r2, r4
100134fa:	d000      	beq.n	100134fe <__eqsf2+0x26>
100134fc:	bd70      	pop	{r4, r5, r6, pc}
100134fe:	42b5      	cmp	r5, r6
10013500:	d1fc      	bne.n	100134fc <__eqsf2+0x24>
10013502:	428b      	cmp	r3, r1
10013504:	d00d      	beq.n	10013522 <__eqsf2+0x4a>
10013506:	2a00      	cmp	r2, #0
10013508:	d1f8      	bne.n	100134fc <__eqsf2+0x24>
1001350a:	0028      	movs	r0, r5
1001350c:	1e43      	subs	r3, r0, #1
1001350e:	4198      	sbcs	r0, r3
10013510:	e7f4      	b.n	100134fc <__eqsf2+0x24>
10013512:	2001      	movs	r0, #1
10013514:	2d00      	cmp	r5, #0
10013516:	d1f1      	bne.n	100134fc <__eqsf2+0x24>
10013518:	e7eb      	b.n	100134f2 <__eqsf2+0x1a>
1001351a:	2001      	movs	r0, #1
1001351c:	2e00      	cmp	r6, #0
1001351e:	d1ed      	bne.n	100134fc <__eqsf2+0x24>
10013520:	e7e9      	b.n	100134f6 <__eqsf2+0x1e>
10013522:	2000      	movs	r0, #0
10013524:	e7ea      	b.n	100134fc <__eqsf2+0x24>
10013526:	46c0      	nop			; (mov r8, r8)

10013528 <__gesf2>:
10013528:	0243      	lsls	r3, r0, #9
1001352a:	b5f0      	push	{r4, r5, r6, r7, lr}
1001352c:	0042      	lsls	r2, r0, #1
1001352e:	0a5d      	lsrs	r5, r3, #9
10013530:	0fc3      	lsrs	r3, r0, #31
10013532:	0248      	lsls	r0, r1, #9
10013534:	0a44      	lsrs	r4, r0, #9
10013536:	0048      	lsls	r0, r1, #1
10013538:	0e12      	lsrs	r2, r2, #24
1001353a:	0e00      	lsrs	r0, r0, #24
1001353c:	0fc9      	lsrs	r1, r1, #31
1001353e:	2aff      	cmp	r2, #255	; 0xff
10013540:	d01f      	beq.n	10013582 <__gesf2+0x5a>
10013542:	28ff      	cmp	r0, #255	; 0xff
10013544:	d022      	beq.n	1001358c <__gesf2+0x64>
10013546:	2a00      	cmp	r2, #0
10013548:	d109      	bne.n	1001355e <__gesf2+0x36>
1001354a:	426e      	negs	r6, r5
1001354c:	416e      	adcs	r6, r5
1001354e:	2800      	cmp	r0, #0
10013550:	d10f      	bne.n	10013572 <__gesf2+0x4a>
10013552:	2c00      	cmp	r4, #0
10013554:	d10d      	bne.n	10013572 <__gesf2+0x4a>
10013556:	2000      	movs	r0, #0
10013558:	2d00      	cmp	r5, #0
1001355a:	d009      	beq.n	10013570 <__gesf2+0x48>
1001355c:	e005      	b.n	1001356a <__gesf2+0x42>
1001355e:	2800      	cmp	r0, #0
10013560:	d101      	bne.n	10013566 <__gesf2+0x3e>
10013562:	2c00      	cmp	r4, #0
10013564:	d001      	beq.n	1001356a <__gesf2+0x42>
10013566:	428b      	cmp	r3, r1
10013568:	d013      	beq.n	10013592 <__gesf2+0x6a>
1001356a:	4258      	negs	r0, r3
1001356c:	2301      	movs	r3, #1
1001356e:	4318      	orrs	r0, r3
10013570:	bdf0      	pop	{r4, r5, r6, r7, pc}
10013572:	2e00      	cmp	r6, #0
10013574:	d0f7      	beq.n	10013566 <__gesf2+0x3e>
10013576:	4248      	negs	r0, r1
10013578:	4141      	adcs	r1, r0
1001357a:	2001      	movs	r0, #1
1001357c:	4249      	negs	r1, r1
1001357e:	4308      	orrs	r0, r1
10013580:	e7f6      	b.n	10013570 <__gesf2+0x48>
10013582:	2d00      	cmp	r5, #0
10013584:	d0dd      	beq.n	10013542 <__gesf2+0x1a>
10013586:	2002      	movs	r0, #2
10013588:	4240      	negs	r0, r0
1001358a:	e7f1      	b.n	10013570 <__gesf2+0x48>
1001358c:	2c00      	cmp	r4, #0
1001358e:	d0da      	beq.n	10013546 <__gesf2+0x1e>
10013590:	e7f9      	b.n	10013586 <__gesf2+0x5e>
10013592:	4282      	cmp	r2, r0
10013594:	dce9      	bgt.n	1001356a <__gesf2+0x42>
10013596:	db04      	blt.n	100135a2 <__gesf2+0x7a>
10013598:	42a5      	cmp	r5, r4
1001359a:	d8e6      	bhi.n	1001356a <__gesf2+0x42>
1001359c:	2000      	movs	r0, #0
1001359e:	42a5      	cmp	r5, r4
100135a0:	d2e6      	bcs.n	10013570 <__gesf2+0x48>
100135a2:	4258      	negs	r0, r3
100135a4:	4143      	adcs	r3, r0
100135a6:	2001      	movs	r0, #1
100135a8:	425b      	negs	r3, r3
100135aa:	4318      	orrs	r0, r3
100135ac:	e7e0      	b.n	10013570 <__gesf2+0x48>
100135ae:	46c0      	nop			; (mov r8, r8)

100135b0 <__lesf2>:
100135b0:	0243      	lsls	r3, r0, #9
100135b2:	b5f0      	push	{r4, r5, r6, r7, lr}
100135b4:	0042      	lsls	r2, r0, #1
100135b6:	004c      	lsls	r4, r1, #1
100135b8:	0a5e      	lsrs	r6, r3, #9
100135ba:	0fc3      	lsrs	r3, r0, #31
100135bc:	0248      	lsls	r0, r1, #9
100135be:	0e12      	lsrs	r2, r2, #24
100135c0:	0a45      	lsrs	r5, r0, #9
100135c2:	0e24      	lsrs	r4, r4, #24
100135c4:	0fc9      	lsrs	r1, r1, #31
100135c6:	2aff      	cmp	r2, #255	; 0xff
100135c8:	d017      	beq.n	100135fa <__lesf2+0x4a>
100135ca:	2cff      	cmp	r4, #255	; 0xff
100135cc:	d019      	beq.n	10013602 <__lesf2+0x52>
100135ce:	2a00      	cmp	r2, #0
100135d0:	d10b      	bne.n	100135ea <__lesf2+0x3a>
100135d2:	4270      	negs	r0, r6
100135d4:	4170      	adcs	r0, r6
100135d6:	2c00      	cmp	r4, #0
100135d8:	d017      	beq.n	1001360a <__lesf2+0x5a>
100135da:	2800      	cmp	r0, #0
100135dc:	d007      	beq.n	100135ee <__lesf2+0x3e>
100135de:	4248      	negs	r0, r1
100135e0:	4141      	adcs	r1, r0
100135e2:	2001      	movs	r0, #1
100135e4:	4249      	negs	r1, r1
100135e6:	4308      	orrs	r0, r1
100135e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100135ea:	2c00      	cmp	r4, #0
100135ec:	d013      	beq.n	10013616 <__lesf2+0x66>
100135ee:	428b      	cmp	r3, r1
100135f0:	d014      	beq.n	1001361c <__lesf2+0x6c>
100135f2:	4258      	negs	r0, r3
100135f4:	2301      	movs	r3, #1
100135f6:	4318      	orrs	r0, r3
100135f8:	e7f6      	b.n	100135e8 <__lesf2+0x38>
100135fa:	2002      	movs	r0, #2
100135fc:	2e00      	cmp	r6, #0
100135fe:	d1f3      	bne.n	100135e8 <__lesf2+0x38>
10013600:	e7e3      	b.n	100135ca <__lesf2+0x1a>
10013602:	2002      	movs	r0, #2
10013604:	2d00      	cmp	r5, #0
10013606:	d1ef      	bne.n	100135e8 <__lesf2+0x38>
10013608:	e7e1      	b.n	100135ce <__lesf2+0x1e>
1001360a:	2d00      	cmp	r5, #0
1001360c:	d1e5      	bne.n	100135da <__lesf2+0x2a>
1001360e:	2000      	movs	r0, #0
10013610:	2e00      	cmp	r6, #0
10013612:	d0e9      	beq.n	100135e8 <__lesf2+0x38>
10013614:	e7ed      	b.n	100135f2 <__lesf2+0x42>
10013616:	2d00      	cmp	r5, #0
10013618:	d1e9      	bne.n	100135ee <__lesf2+0x3e>
1001361a:	e7ea      	b.n	100135f2 <__lesf2+0x42>
1001361c:	42a2      	cmp	r2, r4
1001361e:	dce8      	bgt.n	100135f2 <__lesf2+0x42>
10013620:	db04      	blt.n	1001362c <__lesf2+0x7c>
10013622:	42ae      	cmp	r6, r5
10013624:	d8e5      	bhi.n	100135f2 <__lesf2+0x42>
10013626:	2000      	movs	r0, #0
10013628:	42ae      	cmp	r6, r5
1001362a:	d2dd      	bcs.n	100135e8 <__lesf2+0x38>
1001362c:	4258      	negs	r0, r3
1001362e:	4143      	adcs	r3, r0
10013630:	2001      	movs	r0, #1
10013632:	425b      	negs	r3, r3
10013634:	4318      	orrs	r0, r3
10013636:	e7d7      	b.n	100135e8 <__lesf2+0x38>

10013638 <__aeabi_fmul>:
10013638:	b5f0      	push	{r4, r5, r6, r7, lr}
1001363a:	4657      	mov	r7, sl
1001363c:	464e      	mov	r6, r9
1001363e:	4645      	mov	r5, r8
10013640:	0043      	lsls	r3, r0, #1
10013642:	b4e0      	push	{r5, r6, r7}
10013644:	0246      	lsls	r6, r0, #9
10013646:	4688      	mov	r8, r1
10013648:	0a76      	lsrs	r6, r6, #9
1001364a:	0e1f      	lsrs	r7, r3, #24
1001364c:	0fc4      	lsrs	r4, r0, #31
1001364e:	2f00      	cmp	r7, #0
10013650:	d047      	beq.n	100136e2 <__aeabi_fmul+0xaa>
10013652:	2fff      	cmp	r7, #255	; 0xff
10013654:	d025      	beq.n	100136a2 <__aeabi_fmul+0x6a>
10013656:	2300      	movs	r3, #0
10013658:	2580      	movs	r5, #128	; 0x80
1001365a:	469a      	mov	sl, r3
1001365c:	4699      	mov	r9, r3
1001365e:	00f6      	lsls	r6, r6, #3
10013660:	04ed      	lsls	r5, r5, #19
10013662:	432e      	orrs	r6, r5
10013664:	3f7f      	subs	r7, #127	; 0x7f
10013666:	4643      	mov	r3, r8
10013668:	4642      	mov	r2, r8
1001366a:	025d      	lsls	r5, r3, #9
1001366c:	0fd2      	lsrs	r2, r2, #31
1001366e:	005b      	lsls	r3, r3, #1
10013670:	0a6d      	lsrs	r5, r5, #9
10013672:	0e1b      	lsrs	r3, r3, #24
10013674:	4690      	mov	r8, r2
10013676:	d040      	beq.n	100136fa <__aeabi_fmul+0xc2>
10013678:	2bff      	cmp	r3, #255	; 0xff
1001367a:	d039      	beq.n	100136f0 <__aeabi_fmul+0xb8>
1001367c:	2280      	movs	r2, #128	; 0x80
1001367e:	2000      	movs	r0, #0
10013680:	00ed      	lsls	r5, r5, #3
10013682:	04d2      	lsls	r2, r2, #19
10013684:	4315      	orrs	r5, r2
10013686:	3b7f      	subs	r3, #127	; 0x7f
10013688:	18fb      	adds	r3, r7, r3
1001368a:	4642      	mov	r2, r8
1001368c:	4657      	mov	r7, sl
1001368e:	1c59      	adds	r1, r3, #1
10013690:	4062      	eors	r2, r4
10013692:	468c      	mov	ip, r1
10013694:	4307      	orrs	r7, r0
10013696:	2f0f      	cmp	r7, #15
10013698:	d85c      	bhi.n	10013754 <__aeabi_fmul+0x11c>
1001369a:	496f      	ldr	r1, [pc, #444]	; (10013858 <__aeabi_fmul+0x220>)
1001369c:	00bf      	lsls	r7, r7, #2
1001369e:	59c9      	ldr	r1, [r1, r7]
100136a0:	468f      	mov	pc, r1
100136a2:	2e00      	cmp	r6, #0
100136a4:	d145      	bne.n	10013732 <__aeabi_fmul+0xfa>
100136a6:	2308      	movs	r3, #8
100136a8:	469a      	mov	sl, r3
100136aa:	3b06      	subs	r3, #6
100136ac:	4699      	mov	r9, r3
100136ae:	e7da      	b.n	10013666 <__aeabi_fmul+0x2e>
100136b0:	4642      	mov	r2, r8
100136b2:	2802      	cmp	r0, #2
100136b4:	d02d      	beq.n	10013712 <__aeabi_fmul+0xda>
100136b6:	2803      	cmp	r0, #3
100136b8:	d100      	bne.n	100136bc <__aeabi_fmul+0x84>
100136ba:	e0c3      	b.n	10013844 <__aeabi_fmul+0x20c>
100136bc:	2801      	cmp	r0, #1
100136be:	d000      	beq.n	100136c2 <__aeabi_fmul+0x8a>
100136c0:	e0a2      	b.n	10013808 <__aeabi_fmul+0x1d0>
100136c2:	2500      	movs	r5, #0
100136c4:	2600      	movs	r6, #0
100136c6:	4002      	ands	r2, r0
100136c8:	b2d4      	uxtb	r4, r2
100136ca:	0276      	lsls	r6, r6, #9
100136cc:	05ed      	lsls	r5, r5, #23
100136ce:	0a76      	lsrs	r6, r6, #9
100136d0:	432e      	orrs	r6, r5
100136d2:	07e4      	lsls	r4, r4, #31
100136d4:	4326      	orrs	r6, r4
100136d6:	0030      	movs	r0, r6
100136d8:	bc1c      	pop	{r2, r3, r4}
100136da:	4690      	mov	r8, r2
100136dc:	4699      	mov	r9, r3
100136de:	46a2      	mov	sl, r4
100136e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100136e2:	2e00      	cmp	r6, #0
100136e4:	d11a      	bne.n	1001371c <__aeabi_fmul+0xe4>
100136e6:	2304      	movs	r3, #4
100136e8:	469a      	mov	sl, r3
100136ea:	3b03      	subs	r3, #3
100136ec:	4699      	mov	r9, r3
100136ee:	e7ba      	b.n	10013666 <__aeabi_fmul+0x2e>
100136f0:	002a      	movs	r2, r5
100136f2:	1e51      	subs	r1, r2, #1
100136f4:	418a      	sbcs	r2, r1
100136f6:	1c90      	adds	r0, r2, #2
100136f8:	e7c6      	b.n	10013688 <__aeabi_fmul+0x50>
100136fa:	2001      	movs	r0, #1
100136fc:	2d00      	cmp	r5, #0
100136fe:	d0c3      	beq.n	10013688 <__aeabi_fmul+0x50>
10013700:	0028      	movs	r0, r5
10013702:	f001 f9dd 	bl	10014ac0 <__clzsi2>
10013706:	1f43      	subs	r3, r0, #5
10013708:	3076      	adds	r0, #118	; 0x76
1001370a:	409d      	lsls	r5, r3
1001370c:	4243      	negs	r3, r0
1001370e:	2000      	movs	r0, #0
10013710:	e7ba      	b.n	10013688 <__aeabi_fmul+0x50>
10013712:	2401      	movs	r4, #1
10013714:	25ff      	movs	r5, #255	; 0xff
10013716:	4014      	ands	r4, r2
10013718:	2600      	movs	r6, #0
1001371a:	e7d6      	b.n	100136ca <__aeabi_fmul+0x92>
1001371c:	0030      	movs	r0, r6
1001371e:	f001 f9cf 	bl	10014ac0 <__clzsi2>
10013722:	1f43      	subs	r3, r0, #5
10013724:	409e      	lsls	r6, r3
10013726:	2300      	movs	r3, #0
10013728:	3076      	adds	r0, #118	; 0x76
1001372a:	4247      	negs	r7, r0
1001372c:	469a      	mov	sl, r3
1001372e:	4699      	mov	r9, r3
10013730:	e799      	b.n	10013666 <__aeabi_fmul+0x2e>
10013732:	230c      	movs	r3, #12
10013734:	469a      	mov	sl, r3
10013736:	3b09      	subs	r3, #9
10013738:	4699      	mov	r9, r3
1001373a:	e794      	b.n	10013666 <__aeabi_fmul+0x2e>
1001373c:	2680      	movs	r6, #128	; 0x80
1001373e:	2400      	movs	r4, #0
10013740:	03f6      	lsls	r6, r6, #15
10013742:	25ff      	movs	r5, #255	; 0xff
10013744:	e7c1      	b.n	100136ca <__aeabi_fmul+0x92>
10013746:	0035      	movs	r5, r6
10013748:	4648      	mov	r0, r9
1001374a:	e7b2      	b.n	100136b2 <__aeabi_fmul+0x7a>
1001374c:	0035      	movs	r5, r6
1001374e:	0022      	movs	r2, r4
10013750:	4648      	mov	r0, r9
10013752:	e7ae      	b.n	100136b2 <__aeabi_fmul+0x7a>
10013754:	0429      	lsls	r1, r5, #16
10013756:	0c09      	lsrs	r1, r1, #16
10013758:	0008      	movs	r0, r1
1001375a:	0c37      	lsrs	r7, r6, #16
1001375c:	0436      	lsls	r6, r6, #16
1001375e:	0c36      	lsrs	r6, r6, #16
10013760:	0c2c      	lsrs	r4, r5, #16
10013762:	4379      	muls	r1, r7
10013764:	4370      	muls	r0, r6
10013766:	4367      	muls	r7, r4
10013768:	4374      	muls	r4, r6
1001376a:	0c06      	lsrs	r6, r0, #16
1001376c:	1864      	adds	r4, r4, r1
1001376e:	1936      	adds	r6, r6, r4
10013770:	42b1      	cmp	r1, r6
10013772:	d903      	bls.n	1001377c <__aeabi_fmul+0x144>
10013774:	2180      	movs	r1, #128	; 0x80
10013776:	0249      	lsls	r1, r1, #9
10013778:	4688      	mov	r8, r1
1001377a:	4447      	add	r7, r8
1001377c:	0400      	lsls	r0, r0, #16
1001377e:	0c00      	lsrs	r0, r0, #16
10013780:	0431      	lsls	r1, r6, #16
10013782:	1809      	adds	r1, r1, r0
10013784:	018d      	lsls	r5, r1, #6
10013786:	1e68      	subs	r0, r5, #1
10013788:	4185      	sbcs	r5, r0
1001378a:	0e89      	lsrs	r1, r1, #26
1001378c:	4329      	orrs	r1, r5
1001378e:	0c35      	lsrs	r5, r6, #16
10013790:	19ed      	adds	r5, r5, r7
10013792:	01ad      	lsls	r5, r5, #6
10013794:	430d      	orrs	r5, r1
10013796:	0129      	lsls	r1, r5, #4
10013798:	d504      	bpl.n	100137a4 <__aeabi_fmul+0x16c>
1001379a:	2301      	movs	r3, #1
1001379c:	0869      	lsrs	r1, r5, #1
1001379e:	401d      	ands	r5, r3
100137a0:	4663      	mov	r3, ip
100137a2:	430d      	orrs	r5, r1
100137a4:	0019      	movs	r1, r3
100137a6:	317f      	adds	r1, #127	; 0x7f
100137a8:	2900      	cmp	r1, #0
100137aa:	dd25      	ble.n	100137f8 <__aeabi_fmul+0x1c0>
100137ac:	0768      	lsls	r0, r5, #29
100137ae:	d004      	beq.n	100137ba <__aeabi_fmul+0x182>
100137b0:	200f      	movs	r0, #15
100137b2:	4028      	ands	r0, r5
100137b4:	2804      	cmp	r0, #4
100137b6:	d000      	beq.n	100137ba <__aeabi_fmul+0x182>
100137b8:	3504      	adds	r5, #4
100137ba:	0128      	lsls	r0, r5, #4
100137bc:	d503      	bpl.n	100137c6 <__aeabi_fmul+0x18e>
100137be:	4927      	ldr	r1, [pc, #156]	; (1001385c <__aeabi_fmul+0x224>)
100137c0:	3380      	adds	r3, #128	; 0x80
100137c2:	400d      	ands	r5, r1
100137c4:	0019      	movs	r1, r3
100137c6:	29fe      	cmp	r1, #254	; 0xfe
100137c8:	dca3      	bgt.n	10013712 <__aeabi_fmul+0xda>
100137ca:	2401      	movs	r4, #1
100137cc:	01ad      	lsls	r5, r5, #6
100137ce:	0a6e      	lsrs	r6, r5, #9
100137d0:	4014      	ands	r4, r2
100137d2:	b2cd      	uxtb	r5, r1
100137d4:	e779      	b.n	100136ca <__aeabi_fmul+0x92>
100137d6:	2080      	movs	r0, #128	; 0x80
100137d8:	03c0      	lsls	r0, r0, #15
100137da:	4206      	tst	r6, r0
100137dc:	d007      	beq.n	100137ee <__aeabi_fmul+0x1b6>
100137de:	4205      	tst	r5, r0
100137e0:	d105      	bne.n	100137ee <__aeabi_fmul+0x1b6>
100137e2:	4328      	orrs	r0, r5
100137e4:	0246      	lsls	r6, r0, #9
100137e6:	0a76      	lsrs	r6, r6, #9
100137e8:	4644      	mov	r4, r8
100137ea:	25ff      	movs	r5, #255	; 0xff
100137ec:	e76d      	b.n	100136ca <__aeabi_fmul+0x92>
100137ee:	4306      	orrs	r6, r0
100137f0:	0276      	lsls	r6, r6, #9
100137f2:	0a76      	lsrs	r6, r6, #9
100137f4:	25ff      	movs	r5, #255	; 0xff
100137f6:	e768      	b.n	100136ca <__aeabi_fmul+0x92>
100137f8:	2401      	movs	r4, #1
100137fa:	1a61      	subs	r1, r4, r1
100137fc:	291b      	cmp	r1, #27
100137fe:	dd05      	ble.n	1001380c <__aeabi_fmul+0x1d4>
10013800:	4014      	ands	r4, r2
10013802:	2500      	movs	r5, #0
10013804:	2600      	movs	r6, #0
10013806:	e760      	b.n	100136ca <__aeabi_fmul+0x92>
10013808:	4663      	mov	r3, ip
1001380a:	e7cb      	b.n	100137a4 <__aeabi_fmul+0x16c>
1001380c:	002e      	movs	r6, r5
1001380e:	2320      	movs	r3, #32
10013810:	40ce      	lsrs	r6, r1
10013812:	1a59      	subs	r1, r3, r1
10013814:	408d      	lsls	r5, r1
10013816:	1e6b      	subs	r3, r5, #1
10013818:	419d      	sbcs	r5, r3
1001381a:	432e      	orrs	r6, r5
1001381c:	0773      	lsls	r3, r6, #29
1001381e:	d004      	beq.n	1001382a <__aeabi_fmul+0x1f2>
10013820:	230f      	movs	r3, #15
10013822:	4033      	ands	r3, r6
10013824:	2b04      	cmp	r3, #4
10013826:	d000      	beq.n	1001382a <__aeabi_fmul+0x1f2>
10013828:	3604      	adds	r6, #4
1001382a:	0173      	lsls	r3, r6, #5
1001382c:	d504      	bpl.n	10013838 <__aeabi_fmul+0x200>
1001382e:	2401      	movs	r4, #1
10013830:	2501      	movs	r5, #1
10013832:	4014      	ands	r4, r2
10013834:	2600      	movs	r6, #0
10013836:	e748      	b.n	100136ca <__aeabi_fmul+0x92>
10013838:	2401      	movs	r4, #1
1001383a:	01b6      	lsls	r6, r6, #6
1001383c:	0a76      	lsrs	r6, r6, #9
1001383e:	4014      	ands	r4, r2
10013840:	2500      	movs	r5, #0
10013842:	e742      	b.n	100136ca <__aeabi_fmul+0x92>
10013844:	2680      	movs	r6, #128	; 0x80
10013846:	2401      	movs	r4, #1
10013848:	03f6      	lsls	r6, r6, #15
1001384a:	432e      	orrs	r6, r5
1001384c:	0276      	lsls	r6, r6, #9
1001384e:	0a76      	lsrs	r6, r6, #9
10013850:	4014      	ands	r4, r2
10013852:	25ff      	movs	r5, #255	; 0xff
10013854:	e739      	b.n	100136ca <__aeabi_fmul+0x92>
10013856:	46c0      	nop			; (mov r8, r8)
10013858:	10017db4 	.word	0x10017db4
1001385c:	f7ffffff 	.word	0xf7ffffff

10013860 <__aeabi_fsub>:
10013860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10013862:	024a      	lsls	r2, r1, #9
10013864:	004e      	lsls	r6, r1, #1
10013866:	0243      	lsls	r3, r0, #9
10013868:	0044      	lsls	r4, r0, #1
1001386a:	0e24      	lsrs	r4, r4, #24
1001386c:	0fc5      	lsrs	r5, r0, #31
1001386e:	099b      	lsrs	r3, r3, #6
10013870:	0e36      	lsrs	r6, r6, #24
10013872:	0fc9      	lsrs	r1, r1, #31
10013874:	0992      	lsrs	r2, r2, #6
10013876:	2eff      	cmp	r6, #255	; 0xff
10013878:	d100      	bne.n	1001387c <__aeabi_fsub+0x1c>
1001387a:	e083      	b.n	10013984 <__aeabi_fsub+0x124>
1001387c:	2001      	movs	r0, #1
1001387e:	4041      	eors	r1, r0
10013880:	1ba0      	subs	r0, r4, r6
10013882:	42a9      	cmp	r1, r5
10013884:	d05c      	beq.n	10013940 <__aeabi_fsub+0xe0>
10013886:	2800      	cmp	r0, #0
10013888:	dc00      	bgt.n	1001388c <__aeabi_fsub+0x2c>
1001388a:	e095      	b.n	100139b8 <__aeabi_fsub+0x158>
1001388c:	2e00      	cmp	r6, #0
1001388e:	d11c      	bne.n	100138ca <__aeabi_fsub+0x6a>
10013890:	2a00      	cmp	r2, #0
10013892:	d000      	beq.n	10013896 <__aeabi_fsub+0x36>
10013894:	e081      	b.n	1001399a <__aeabi_fsub+0x13a>
10013896:	075a      	lsls	r2, r3, #29
10013898:	d004      	beq.n	100138a4 <__aeabi_fsub+0x44>
1001389a:	220f      	movs	r2, #15
1001389c:	401a      	ands	r2, r3
1001389e:	2a04      	cmp	r2, #4
100138a0:	d000      	beq.n	100138a4 <__aeabi_fsub+0x44>
100138a2:	3304      	adds	r3, #4
100138a4:	015a      	lsls	r2, r3, #5
100138a6:	d53b      	bpl.n	10013920 <__aeabi_fsub+0xc0>
100138a8:	3401      	adds	r4, #1
100138aa:	2cff      	cmp	r4, #255	; 0xff
100138ac:	d100      	bne.n	100138b0 <__aeabi_fsub+0x50>
100138ae:	e091      	b.n	100139d4 <__aeabi_fsub+0x174>
100138b0:	2001      	movs	r0, #1
100138b2:	019b      	lsls	r3, r3, #6
100138b4:	0a5b      	lsrs	r3, r3, #9
100138b6:	b2e4      	uxtb	r4, r4
100138b8:	4005      	ands	r5, r0
100138ba:	025b      	lsls	r3, r3, #9
100138bc:	05e4      	lsls	r4, r4, #23
100138be:	0a5b      	lsrs	r3, r3, #9
100138c0:	07ed      	lsls	r5, r5, #31
100138c2:	4323      	orrs	r3, r4
100138c4:	432b      	orrs	r3, r5
100138c6:	0018      	movs	r0, r3
100138c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100138ca:	2cff      	cmp	r4, #255	; 0xff
100138cc:	d0e3      	beq.n	10013896 <__aeabi_fsub+0x36>
100138ce:	2180      	movs	r1, #128	; 0x80
100138d0:	04c9      	lsls	r1, r1, #19
100138d2:	430a      	orrs	r2, r1
100138d4:	281b      	cmp	r0, #27
100138d6:	dd00      	ble.n	100138da <__aeabi_fsub+0x7a>
100138d8:	e090      	b.n	100139fc <__aeabi_fsub+0x19c>
100138da:	0016      	movs	r6, r2
100138dc:	2120      	movs	r1, #32
100138de:	40c6      	lsrs	r6, r0
100138e0:	1a08      	subs	r0, r1, r0
100138e2:	4082      	lsls	r2, r0
100138e4:	1e51      	subs	r1, r2, #1
100138e6:	418a      	sbcs	r2, r1
100138e8:	4332      	orrs	r2, r6
100138ea:	1a9b      	subs	r3, r3, r2
100138ec:	015a      	lsls	r2, r3, #5
100138ee:	d515      	bpl.n	1001391c <__aeabi_fsub+0xbc>
100138f0:	019b      	lsls	r3, r3, #6
100138f2:	099e      	lsrs	r6, r3, #6
100138f4:	0030      	movs	r0, r6
100138f6:	f001 f8e3 	bl	10014ac0 <__clzsi2>
100138fa:	3805      	subs	r0, #5
100138fc:	4086      	lsls	r6, r0
100138fe:	4284      	cmp	r4, r0
10013900:	dc6c      	bgt.n	100139dc <__aeabi_fsub+0x17c>
10013902:	1b04      	subs	r4, r0, r4
10013904:	0033      	movs	r3, r6
10013906:	2020      	movs	r0, #32
10013908:	3401      	adds	r4, #1
1001390a:	40e3      	lsrs	r3, r4
1001390c:	1b04      	subs	r4, r0, r4
1001390e:	40a6      	lsls	r6, r4
10013910:	1e72      	subs	r2, r6, #1
10013912:	4196      	sbcs	r6, r2
10013914:	2400      	movs	r4, #0
10013916:	4333      	orrs	r3, r6
10013918:	e7bd      	b.n	10013896 <__aeabi_fsub+0x36>
1001391a:	000d      	movs	r5, r1
1001391c:	075a      	lsls	r2, r3, #29
1001391e:	d1bc      	bne.n	1001389a <__aeabi_fsub+0x3a>
10013920:	08df      	lsrs	r7, r3, #3
10013922:	2301      	movs	r3, #1
10013924:	401d      	ands	r5, r3
10013926:	2cff      	cmp	r4, #255	; 0xff
10013928:	d133      	bne.n	10013992 <__aeabi_fsub+0x132>
1001392a:	2f00      	cmp	r7, #0
1001392c:	d100      	bne.n	10013930 <__aeabi_fsub+0xd0>
1001392e:	e090      	b.n	10013a52 <__aeabi_fsub+0x1f2>
10013930:	2280      	movs	r2, #128	; 0x80
10013932:	03d2      	lsls	r2, r2, #15
10013934:	0013      	movs	r3, r2
10013936:	433b      	orrs	r3, r7
10013938:	025b      	lsls	r3, r3, #9
1001393a:	0a5b      	lsrs	r3, r3, #9
1001393c:	24ff      	movs	r4, #255	; 0xff
1001393e:	e7bc      	b.n	100138ba <__aeabi_fsub+0x5a>
10013940:	2800      	cmp	r0, #0
10013942:	dd4f      	ble.n	100139e4 <__aeabi_fsub+0x184>
10013944:	2e00      	cmp	r6, #0
10013946:	d02e      	beq.n	100139a6 <__aeabi_fsub+0x146>
10013948:	2cff      	cmp	r4, #255	; 0xff
1001394a:	d0a4      	beq.n	10013896 <__aeabi_fsub+0x36>
1001394c:	2580      	movs	r5, #128	; 0x80
1001394e:	04ed      	lsls	r5, r5, #19
10013950:	432a      	orrs	r2, r5
10013952:	281b      	cmp	r0, #27
10013954:	dd00      	ble.n	10013958 <__aeabi_fsub+0xf8>
10013956:	e097      	b.n	10013a88 <__aeabi_fsub+0x228>
10013958:	0016      	movs	r6, r2
1001395a:	2520      	movs	r5, #32
1001395c:	40c6      	lsrs	r6, r0
1001395e:	1a28      	subs	r0, r5, r0
10013960:	4082      	lsls	r2, r0
10013962:	1e50      	subs	r0, r2, #1
10013964:	4182      	sbcs	r2, r0
10013966:	4332      	orrs	r2, r6
10013968:	189b      	adds	r3, r3, r2
1001396a:	015a      	lsls	r2, r3, #5
1001396c:	d5d5      	bpl.n	1001391a <__aeabi_fsub+0xba>
1001396e:	3401      	adds	r4, #1
10013970:	2cff      	cmp	r4, #255	; 0xff
10013972:	d06d      	beq.n	10013a50 <__aeabi_fsub+0x1f0>
10013974:	2201      	movs	r2, #1
10013976:	487b      	ldr	r0, [pc, #492]	; (10013b64 <__aeabi_fsub+0x304>)
10013978:	401a      	ands	r2, r3
1001397a:	085b      	lsrs	r3, r3, #1
1001397c:	4003      	ands	r3, r0
1001397e:	4313      	orrs	r3, r2
10013980:	000d      	movs	r5, r1
10013982:	e788      	b.n	10013896 <__aeabi_fsub+0x36>
10013984:	2a00      	cmp	r2, #0
10013986:	d000      	beq.n	1001398a <__aeabi_fsub+0x12a>
10013988:	e77a      	b.n	10013880 <__aeabi_fsub+0x20>
1001398a:	e777      	b.n	1001387c <__aeabi_fsub+0x1c>
1001398c:	1e03      	subs	r3, r0, #0
1001398e:	d1c5      	bne.n	1001391c <__aeabi_fsub+0xbc>
10013990:	2500      	movs	r5, #0
10013992:	027b      	lsls	r3, r7, #9
10013994:	0a5b      	lsrs	r3, r3, #9
10013996:	b2e4      	uxtb	r4, r4
10013998:	e78f      	b.n	100138ba <__aeabi_fsub+0x5a>
1001399a:	3801      	subs	r0, #1
1001399c:	2800      	cmp	r0, #0
1001399e:	d0a4      	beq.n	100138ea <__aeabi_fsub+0x8a>
100139a0:	2cff      	cmp	r4, #255	; 0xff
100139a2:	d197      	bne.n	100138d4 <__aeabi_fsub+0x74>
100139a4:	e777      	b.n	10013896 <__aeabi_fsub+0x36>
100139a6:	2a00      	cmp	r2, #0
100139a8:	d100      	bne.n	100139ac <__aeabi_fsub+0x14c>
100139aa:	e774      	b.n	10013896 <__aeabi_fsub+0x36>
100139ac:	3801      	subs	r0, #1
100139ae:	2800      	cmp	r0, #0
100139b0:	d0da      	beq.n	10013968 <__aeabi_fsub+0x108>
100139b2:	2cff      	cmp	r4, #255	; 0xff
100139b4:	d1cd      	bne.n	10013952 <__aeabi_fsub+0xf2>
100139b6:	e76e      	b.n	10013896 <__aeabi_fsub+0x36>
100139b8:	2800      	cmp	r0, #0
100139ba:	d121      	bne.n	10013a00 <__aeabi_fsub+0x1a0>
100139bc:	1c60      	adds	r0, r4, #1
100139be:	b2c0      	uxtb	r0, r0
100139c0:	2801      	cmp	r0, #1
100139c2:	dd58      	ble.n	10013a76 <__aeabi_fsub+0x216>
100139c4:	2780      	movs	r7, #128	; 0x80
100139c6:	1a9e      	subs	r6, r3, r2
100139c8:	04ff      	lsls	r7, r7, #19
100139ca:	4037      	ands	r7, r6
100139cc:	d02f      	beq.n	10013a2e <__aeabi_fsub+0x1ce>
100139ce:	1ad6      	subs	r6, r2, r3
100139d0:	000d      	movs	r5, r1
100139d2:	e78f      	b.n	100138f4 <__aeabi_fsub+0x94>
100139d4:	2301      	movs	r3, #1
100139d6:	401d      	ands	r5, r3
100139d8:	2300      	movs	r3, #0
100139da:	e76e      	b.n	100138ba <__aeabi_fsub+0x5a>
100139dc:	4b62      	ldr	r3, [pc, #392]	; (10013b68 <__aeabi_fsub+0x308>)
100139de:	1a24      	subs	r4, r4, r0
100139e0:	4033      	ands	r3, r6
100139e2:	e758      	b.n	10013896 <__aeabi_fsub+0x36>
100139e4:	2800      	cmp	r0, #0
100139e6:	d151      	bne.n	10013a8c <__aeabi_fsub+0x22c>
100139e8:	1c60      	adds	r0, r4, #1
100139ea:	b2c6      	uxtb	r6, r0
100139ec:	2e01      	cmp	r6, #1
100139ee:	dd33      	ble.n	10013a58 <__aeabi_fsub+0x1f8>
100139f0:	28ff      	cmp	r0, #255	; 0xff
100139f2:	d02d      	beq.n	10013a50 <__aeabi_fsub+0x1f0>
100139f4:	189b      	adds	r3, r3, r2
100139f6:	085b      	lsrs	r3, r3, #1
100139f8:	0004      	movs	r4, r0
100139fa:	e74c      	b.n	10013896 <__aeabi_fsub+0x36>
100139fc:	2201      	movs	r2, #1
100139fe:	e774      	b.n	100138ea <__aeabi_fsub+0x8a>
10013a00:	2c00      	cmp	r4, #0
10013a02:	d01a      	beq.n	10013a3a <__aeabi_fsub+0x1da>
10013a04:	2eff      	cmp	r6, #255	; 0xff
10013a06:	d01f      	beq.n	10013a48 <__aeabi_fsub+0x1e8>
10013a08:	2480      	movs	r4, #128	; 0x80
10013a0a:	04e4      	lsls	r4, r4, #19
10013a0c:	4240      	negs	r0, r0
10013a0e:	4323      	orrs	r3, r4
10013a10:	281b      	cmp	r0, #27
10013a12:	dd00      	ble.n	10013a16 <__aeabi_fsub+0x1b6>
10013a14:	e096      	b.n	10013b44 <__aeabi_fsub+0x2e4>
10013a16:	001d      	movs	r5, r3
10013a18:	2420      	movs	r4, #32
10013a1a:	40c5      	lsrs	r5, r0
10013a1c:	1a20      	subs	r0, r4, r0
10013a1e:	4083      	lsls	r3, r0
10013a20:	1e58      	subs	r0, r3, #1
10013a22:	4183      	sbcs	r3, r0
10013a24:	432b      	orrs	r3, r5
10013a26:	1ad3      	subs	r3, r2, r3
10013a28:	0034      	movs	r4, r6
10013a2a:	000d      	movs	r5, r1
10013a2c:	e75e      	b.n	100138ec <__aeabi_fsub+0x8c>
10013a2e:	2e00      	cmp	r6, #0
10013a30:	d000      	beq.n	10013a34 <__aeabi_fsub+0x1d4>
10013a32:	e75f      	b.n	100138f4 <__aeabi_fsub+0x94>
10013a34:	2500      	movs	r5, #0
10013a36:	2400      	movs	r4, #0
10013a38:	e7ab      	b.n	10013992 <__aeabi_fsub+0x132>
10013a3a:	2b00      	cmp	r3, #0
10013a3c:	d044      	beq.n	10013ac8 <__aeabi_fsub+0x268>
10013a3e:	43c0      	mvns	r0, r0
10013a40:	2800      	cmp	r0, #0
10013a42:	d0f0      	beq.n	10013a26 <__aeabi_fsub+0x1c6>
10013a44:	2eff      	cmp	r6, #255	; 0xff
10013a46:	d1e3      	bne.n	10013a10 <__aeabi_fsub+0x1b0>
10013a48:	0013      	movs	r3, r2
10013a4a:	24ff      	movs	r4, #255	; 0xff
10013a4c:	000d      	movs	r5, r1
10013a4e:	e722      	b.n	10013896 <__aeabi_fsub+0x36>
10013a50:	000d      	movs	r5, r1
10013a52:	24ff      	movs	r4, #255	; 0xff
10013a54:	2300      	movs	r3, #0
10013a56:	e730      	b.n	100138ba <__aeabi_fsub+0x5a>
10013a58:	2c00      	cmp	r4, #0
10013a5a:	d15d      	bne.n	10013b18 <__aeabi_fsub+0x2b8>
10013a5c:	2b00      	cmp	r3, #0
10013a5e:	d07d      	beq.n	10013b5c <__aeabi_fsub+0x2fc>
10013a60:	2a00      	cmp	r2, #0
10013a62:	d100      	bne.n	10013a66 <__aeabi_fsub+0x206>
10013a64:	e717      	b.n	10013896 <__aeabi_fsub+0x36>
10013a66:	189b      	adds	r3, r3, r2
10013a68:	015a      	lsls	r2, r3, #5
10013a6a:	d400      	bmi.n	10013a6e <__aeabi_fsub+0x20e>
10013a6c:	e756      	b.n	1001391c <__aeabi_fsub+0xbc>
10013a6e:	4a3e      	ldr	r2, [pc, #248]	; (10013b68 <__aeabi_fsub+0x308>)
10013a70:	0004      	movs	r4, r0
10013a72:	4013      	ands	r3, r2
10013a74:	e70f      	b.n	10013896 <__aeabi_fsub+0x36>
10013a76:	2c00      	cmp	r4, #0
10013a78:	d11e      	bne.n	10013ab8 <__aeabi_fsub+0x258>
10013a7a:	2b00      	cmp	r3, #0
10013a7c:	d12f      	bne.n	10013ade <__aeabi_fsub+0x27e>
10013a7e:	2a00      	cmp	r2, #0
10013a80:	d065      	beq.n	10013b4e <__aeabi_fsub+0x2ee>
10013a82:	0013      	movs	r3, r2
10013a84:	000d      	movs	r5, r1
10013a86:	e706      	b.n	10013896 <__aeabi_fsub+0x36>
10013a88:	2201      	movs	r2, #1
10013a8a:	e76d      	b.n	10013968 <__aeabi_fsub+0x108>
10013a8c:	2c00      	cmp	r4, #0
10013a8e:	d11f      	bne.n	10013ad0 <__aeabi_fsub+0x270>
10013a90:	2b00      	cmp	r3, #0
10013a92:	d059      	beq.n	10013b48 <__aeabi_fsub+0x2e8>
10013a94:	43c0      	mvns	r0, r0
10013a96:	2800      	cmp	r0, #0
10013a98:	d00b      	beq.n	10013ab2 <__aeabi_fsub+0x252>
10013a9a:	2eff      	cmp	r6, #255	; 0xff
10013a9c:	d04f      	beq.n	10013b3e <__aeabi_fsub+0x2de>
10013a9e:	281b      	cmp	r0, #27
10013aa0:	dc5e      	bgt.n	10013b60 <__aeabi_fsub+0x300>
10013aa2:	001d      	movs	r5, r3
10013aa4:	2420      	movs	r4, #32
10013aa6:	40c5      	lsrs	r5, r0
10013aa8:	1a20      	subs	r0, r4, r0
10013aaa:	4083      	lsls	r3, r0
10013aac:	1e58      	subs	r0, r3, #1
10013aae:	4183      	sbcs	r3, r0
10013ab0:	432b      	orrs	r3, r5
10013ab2:	189b      	adds	r3, r3, r2
10013ab4:	0034      	movs	r4, r6
10013ab6:	e758      	b.n	1001396a <__aeabi_fsub+0x10a>
10013ab8:	2b00      	cmp	r3, #0
10013aba:	d11c      	bne.n	10013af6 <__aeabi_fsub+0x296>
10013abc:	2a00      	cmp	r2, #0
10013abe:	d049      	beq.n	10013b54 <__aeabi_fsub+0x2f4>
10013ac0:	0013      	movs	r3, r2
10013ac2:	000d      	movs	r5, r1
10013ac4:	24ff      	movs	r4, #255	; 0xff
10013ac6:	e6e6      	b.n	10013896 <__aeabi_fsub+0x36>
10013ac8:	0013      	movs	r3, r2
10013aca:	0034      	movs	r4, r6
10013acc:	000d      	movs	r5, r1
10013ace:	e6e2      	b.n	10013896 <__aeabi_fsub+0x36>
10013ad0:	2eff      	cmp	r6, #255	; 0xff
10013ad2:	d034      	beq.n	10013b3e <__aeabi_fsub+0x2de>
10013ad4:	2480      	movs	r4, #128	; 0x80
10013ad6:	04e4      	lsls	r4, r4, #19
10013ad8:	4240      	negs	r0, r0
10013ada:	4323      	orrs	r3, r4
10013adc:	e7df      	b.n	10013a9e <__aeabi_fsub+0x23e>
10013ade:	2a00      	cmp	r2, #0
10013ae0:	d100      	bne.n	10013ae4 <__aeabi_fsub+0x284>
10013ae2:	e6d8      	b.n	10013896 <__aeabi_fsub+0x36>
10013ae4:	2780      	movs	r7, #128	; 0x80
10013ae6:	1a98      	subs	r0, r3, r2
10013ae8:	04ff      	lsls	r7, r7, #19
10013aea:	4007      	ands	r7, r0
10013aec:	d100      	bne.n	10013af0 <__aeabi_fsub+0x290>
10013aee:	e74d      	b.n	1001398c <__aeabi_fsub+0x12c>
10013af0:	1ad3      	subs	r3, r2, r3
10013af2:	000d      	movs	r5, r1
10013af4:	e6cf      	b.n	10013896 <__aeabi_fsub+0x36>
10013af6:	24ff      	movs	r4, #255	; 0xff
10013af8:	2a00      	cmp	r2, #0
10013afa:	d100      	bne.n	10013afe <__aeabi_fsub+0x29e>
10013afc:	e6cb      	b.n	10013896 <__aeabi_fsub+0x36>
10013afe:	2080      	movs	r0, #128	; 0x80
10013b00:	08db      	lsrs	r3, r3, #3
10013b02:	03c0      	lsls	r0, r0, #15
10013b04:	4203      	tst	r3, r0
10013b06:	d004      	beq.n	10013b12 <__aeabi_fsub+0x2b2>
10013b08:	08d2      	lsrs	r2, r2, #3
10013b0a:	4202      	tst	r2, r0
10013b0c:	d101      	bne.n	10013b12 <__aeabi_fsub+0x2b2>
10013b0e:	0013      	movs	r3, r2
10013b10:	000d      	movs	r5, r1
10013b12:	00db      	lsls	r3, r3, #3
10013b14:	24ff      	movs	r4, #255	; 0xff
10013b16:	e6be      	b.n	10013896 <__aeabi_fsub+0x36>
10013b18:	2b00      	cmp	r3, #0
10013b1a:	d010      	beq.n	10013b3e <__aeabi_fsub+0x2de>
10013b1c:	24ff      	movs	r4, #255	; 0xff
10013b1e:	2a00      	cmp	r2, #0
10013b20:	d100      	bne.n	10013b24 <__aeabi_fsub+0x2c4>
10013b22:	e6b8      	b.n	10013896 <__aeabi_fsub+0x36>
10013b24:	2080      	movs	r0, #128	; 0x80
10013b26:	08db      	lsrs	r3, r3, #3
10013b28:	03c0      	lsls	r0, r0, #15
10013b2a:	4203      	tst	r3, r0
10013b2c:	d003      	beq.n	10013b36 <__aeabi_fsub+0x2d6>
10013b2e:	08d2      	lsrs	r2, r2, #3
10013b30:	4202      	tst	r2, r0
10013b32:	d100      	bne.n	10013b36 <__aeabi_fsub+0x2d6>
10013b34:	0013      	movs	r3, r2
10013b36:	00db      	lsls	r3, r3, #3
10013b38:	000d      	movs	r5, r1
10013b3a:	24ff      	movs	r4, #255	; 0xff
10013b3c:	e6ab      	b.n	10013896 <__aeabi_fsub+0x36>
10013b3e:	0013      	movs	r3, r2
10013b40:	24ff      	movs	r4, #255	; 0xff
10013b42:	e6a8      	b.n	10013896 <__aeabi_fsub+0x36>
10013b44:	2301      	movs	r3, #1
10013b46:	e76e      	b.n	10013a26 <__aeabi_fsub+0x1c6>
10013b48:	0013      	movs	r3, r2
10013b4a:	0034      	movs	r4, r6
10013b4c:	e6a3      	b.n	10013896 <__aeabi_fsub+0x36>
10013b4e:	2700      	movs	r7, #0
10013b50:	2500      	movs	r5, #0
10013b52:	e71e      	b.n	10013992 <__aeabi_fsub+0x132>
10013b54:	2780      	movs	r7, #128	; 0x80
10013b56:	2500      	movs	r5, #0
10013b58:	03ff      	lsls	r7, r7, #15
10013b5a:	e6e9      	b.n	10013930 <__aeabi_fsub+0xd0>
10013b5c:	0013      	movs	r3, r2
10013b5e:	e69a      	b.n	10013896 <__aeabi_fsub+0x36>
10013b60:	2301      	movs	r3, #1
10013b62:	e7a6      	b.n	10013ab2 <__aeabi_fsub+0x252>
10013b64:	7dffffff 	.word	0x7dffffff
10013b68:	fbffffff 	.word	0xfbffffff

10013b6c <__aeabi_f2iz>:
10013b6c:	0243      	lsls	r3, r0, #9
10013b6e:	0a59      	lsrs	r1, r3, #9
10013b70:	0043      	lsls	r3, r0, #1
10013b72:	0fc2      	lsrs	r2, r0, #31
10013b74:	0e1b      	lsrs	r3, r3, #24
10013b76:	2000      	movs	r0, #0
10013b78:	2b7e      	cmp	r3, #126	; 0x7e
10013b7a:	dd0e      	ble.n	10013b9a <__aeabi_f2iz+0x2e>
10013b7c:	2b9d      	cmp	r3, #157	; 0x9d
10013b7e:	dc0d      	bgt.n	10013b9c <__aeabi_f2iz+0x30>
10013b80:	2080      	movs	r0, #128	; 0x80
10013b82:	0400      	lsls	r0, r0, #16
10013b84:	4301      	orrs	r1, r0
10013b86:	2b95      	cmp	r3, #149	; 0x95
10013b88:	dc0b      	bgt.n	10013ba2 <__aeabi_f2iz+0x36>
10013b8a:	2096      	movs	r0, #150	; 0x96
10013b8c:	1ac3      	subs	r3, r0, r3
10013b8e:	40d9      	lsrs	r1, r3
10013b90:	000b      	movs	r3, r1
10013b92:	4258      	negs	r0, r3
10013b94:	2a00      	cmp	r2, #0
10013b96:	d100      	bne.n	10013b9a <__aeabi_f2iz+0x2e>
10013b98:	0018      	movs	r0, r3
10013b9a:	4770      	bx	lr
10013b9c:	4b03      	ldr	r3, [pc, #12]	; (10013bac <__aeabi_f2iz+0x40>)
10013b9e:	18d0      	adds	r0, r2, r3
10013ba0:	e7fb      	b.n	10013b9a <__aeabi_f2iz+0x2e>
10013ba2:	3b96      	subs	r3, #150	; 0x96
10013ba4:	4099      	lsls	r1, r3
10013ba6:	000b      	movs	r3, r1
10013ba8:	e7f3      	b.n	10013b92 <__aeabi_f2iz+0x26>
10013baa:	46c0      	nop			; (mov r8, r8)
10013bac:	7fffffff 	.word	0x7fffffff

10013bb0 <__aeabi_ui2f>:
10013bb0:	b570      	push	{r4, r5, r6, lr}
10013bb2:	1e04      	subs	r4, r0, #0
10013bb4:	d028      	beq.n	10013c08 <__aeabi_ui2f+0x58>
10013bb6:	f000 ff83 	bl	10014ac0 <__clzsi2>
10013bba:	239e      	movs	r3, #158	; 0x9e
10013bbc:	1a1b      	subs	r3, r3, r0
10013bbe:	2b96      	cmp	r3, #150	; 0x96
10013bc0:	dc0a      	bgt.n	10013bd8 <__aeabi_ui2f+0x28>
10013bc2:	2296      	movs	r2, #150	; 0x96
10013bc4:	1ad2      	subs	r2, r2, r3
10013bc6:	4094      	lsls	r4, r2
10013bc8:	0262      	lsls	r2, r4, #9
10013bca:	0a52      	lsrs	r2, r2, #9
10013bcc:	b2d8      	uxtb	r0, r3
10013bce:	0252      	lsls	r2, r2, #9
10013bd0:	0a52      	lsrs	r2, r2, #9
10013bd2:	05c0      	lsls	r0, r0, #23
10013bd4:	4310      	orrs	r0, r2
10013bd6:	bd70      	pop	{r4, r5, r6, pc}
10013bd8:	2b99      	cmp	r3, #153	; 0x99
10013bda:	dc18      	bgt.n	10013c0e <__aeabi_ui2f+0x5e>
10013bdc:	2299      	movs	r2, #153	; 0x99
10013bde:	1ad2      	subs	r2, r2, r3
10013be0:	4094      	lsls	r4, r2
10013be2:	4a11      	ldr	r2, [pc, #68]	; (10013c28 <__aeabi_ui2f+0x78>)
10013be4:	4022      	ands	r2, r4
10013be6:	0761      	lsls	r1, r4, #29
10013be8:	d004      	beq.n	10013bf4 <__aeabi_ui2f+0x44>
10013bea:	210f      	movs	r1, #15
10013bec:	400c      	ands	r4, r1
10013bee:	2c04      	cmp	r4, #4
10013bf0:	d000      	beq.n	10013bf4 <__aeabi_ui2f+0x44>
10013bf2:	3204      	adds	r2, #4
10013bf4:	0151      	lsls	r1, r2, #5
10013bf6:	d503      	bpl.n	10013c00 <__aeabi_ui2f+0x50>
10013bf8:	4b0b      	ldr	r3, [pc, #44]	; (10013c28 <__aeabi_ui2f+0x78>)
10013bfa:	401a      	ands	r2, r3
10013bfc:	239f      	movs	r3, #159	; 0x9f
10013bfe:	1a1b      	subs	r3, r3, r0
10013c00:	0192      	lsls	r2, r2, #6
10013c02:	0a52      	lsrs	r2, r2, #9
10013c04:	b2d8      	uxtb	r0, r3
10013c06:	e7e2      	b.n	10013bce <__aeabi_ui2f+0x1e>
10013c08:	2000      	movs	r0, #0
10013c0a:	2200      	movs	r2, #0
10013c0c:	e7df      	b.n	10013bce <__aeabi_ui2f+0x1e>
10013c0e:	2205      	movs	r2, #5
10013c10:	0025      	movs	r5, r4
10013c12:	1a12      	subs	r2, r2, r0
10013c14:	21b9      	movs	r1, #185	; 0xb9
10013c16:	40d5      	lsrs	r5, r2
10013c18:	0022      	movs	r2, r4
10013c1a:	1ac9      	subs	r1, r1, r3
10013c1c:	408a      	lsls	r2, r1
10013c1e:	1e54      	subs	r4, r2, #1
10013c20:	41a2      	sbcs	r2, r4
10013c22:	002c      	movs	r4, r5
10013c24:	4314      	orrs	r4, r2
10013c26:	e7dc      	b.n	10013be2 <__aeabi_ui2f+0x32>
10013c28:	fbffffff 	.word	0xfbffffff

10013c2c <__eqdf2>:
10013c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
10013c2e:	465f      	mov	r7, fp
10013c30:	4656      	mov	r6, sl
10013c32:	464d      	mov	r5, r9
10013c34:	4644      	mov	r4, r8
10013c36:	b4f0      	push	{r4, r5, r6, r7}
10013c38:	031f      	lsls	r7, r3, #12
10013c3a:	005c      	lsls	r4, r3, #1
10013c3c:	0fdb      	lsrs	r3, r3, #31
10013c3e:	469a      	mov	sl, r3
10013c40:	4b19      	ldr	r3, [pc, #100]	; (10013ca8 <__eqdf2+0x7c>)
10013c42:	030e      	lsls	r6, r1, #12
10013c44:	004d      	lsls	r5, r1, #1
10013c46:	0fc9      	lsrs	r1, r1, #31
10013c48:	4680      	mov	r8, r0
10013c4a:	0b36      	lsrs	r6, r6, #12
10013c4c:	0d6d      	lsrs	r5, r5, #21
10013c4e:	468b      	mov	fp, r1
10013c50:	4691      	mov	r9, r2
10013c52:	0b3f      	lsrs	r7, r7, #12
10013c54:	0d64      	lsrs	r4, r4, #21
10013c56:	429d      	cmp	r5, r3
10013c58:	d019      	beq.n	10013c8e <__eqdf2+0x62>
10013c5a:	4b13      	ldr	r3, [pc, #76]	; (10013ca8 <__eqdf2+0x7c>)
10013c5c:	429c      	cmp	r4, r3
10013c5e:	d01b      	beq.n	10013c98 <__eqdf2+0x6c>
10013c60:	2301      	movs	r3, #1
10013c62:	42a5      	cmp	r5, r4
10013c64:	d006      	beq.n	10013c74 <__eqdf2+0x48>
10013c66:	0018      	movs	r0, r3
10013c68:	bc3c      	pop	{r2, r3, r4, r5}
10013c6a:	4690      	mov	r8, r2
10013c6c:	4699      	mov	r9, r3
10013c6e:	46a2      	mov	sl, r4
10013c70:	46ab      	mov	fp, r5
10013c72:	bdf0      	pop	{r4, r5, r6, r7, pc}
10013c74:	42be      	cmp	r6, r7
10013c76:	d1f6      	bne.n	10013c66 <__eqdf2+0x3a>
10013c78:	45c8      	cmp	r8, r9
10013c7a:	d1f4      	bne.n	10013c66 <__eqdf2+0x3a>
10013c7c:	45d3      	cmp	fp, sl
10013c7e:	d010      	beq.n	10013ca2 <__eqdf2+0x76>
10013c80:	2d00      	cmp	r5, #0
10013c82:	d1f0      	bne.n	10013c66 <__eqdf2+0x3a>
10013c84:	4330      	orrs	r0, r6
10013c86:	0003      	movs	r3, r0
10013c88:	1e5a      	subs	r2, r3, #1
10013c8a:	4193      	sbcs	r3, r2
10013c8c:	e7eb      	b.n	10013c66 <__eqdf2+0x3a>
10013c8e:	0031      	movs	r1, r6
10013c90:	2301      	movs	r3, #1
10013c92:	4301      	orrs	r1, r0
10013c94:	d1e7      	bne.n	10013c66 <__eqdf2+0x3a>
10013c96:	e7e0      	b.n	10013c5a <__eqdf2+0x2e>
10013c98:	433a      	orrs	r2, r7
10013c9a:	2301      	movs	r3, #1
10013c9c:	2a00      	cmp	r2, #0
10013c9e:	d1e2      	bne.n	10013c66 <__eqdf2+0x3a>
10013ca0:	e7de      	b.n	10013c60 <__eqdf2+0x34>
10013ca2:	2300      	movs	r3, #0
10013ca4:	e7df      	b.n	10013c66 <__eqdf2+0x3a>
10013ca6:	46c0      	nop			; (mov r8, r8)
10013ca8:	000007ff 	.word	0x000007ff

10013cac <__gedf2>:
10013cac:	b5f0      	push	{r4, r5, r6, r7, lr}
10013cae:	465f      	mov	r7, fp
10013cb0:	4644      	mov	r4, r8
10013cb2:	4656      	mov	r6, sl
10013cb4:	464d      	mov	r5, r9
10013cb6:	b4f0      	push	{r4, r5, r6, r7}
10013cb8:	031f      	lsls	r7, r3, #12
10013cba:	0b3c      	lsrs	r4, r7, #12
10013cbc:	4f2c      	ldr	r7, [pc, #176]	; (10013d70 <__gedf2+0xc4>)
10013cbe:	030e      	lsls	r6, r1, #12
10013cc0:	004d      	lsls	r5, r1, #1
10013cc2:	46a3      	mov	fp, r4
10013cc4:	005c      	lsls	r4, r3, #1
10013cc6:	4684      	mov	ip, r0
10013cc8:	0b36      	lsrs	r6, r6, #12
10013cca:	0d6d      	lsrs	r5, r5, #21
10013ccc:	0fc9      	lsrs	r1, r1, #31
10013cce:	4690      	mov	r8, r2
10013cd0:	0d64      	lsrs	r4, r4, #21
10013cd2:	0fdb      	lsrs	r3, r3, #31
10013cd4:	42bd      	cmp	r5, r7
10013cd6:	d02b      	beq.n	10013d30 <__gedf2+0x84>
10013cd8:	4f25      	ldr	r7, [pc, #148]	; (10013d70 <__gedf2+0xc4>)
10013cda:	42bc      	cmp	r4, r7
10013cdc:	d02e      	beq.n	10013d3c <__gedf2+0x90>
10013cde:	2d00      	cmp	r5, #0
10013ce0:	d10e      	bne.n	10013d00 <__gedf2+0x54>
10013ce2:	4330      	orrs	r0, r6
10013ce4:	0007      	movs	r7, r0
10013ce6:	4681      	mov	r9, r0
10013ce8:	4278      	negs	r0, r7
10013cea:	4178      	adcs	r0, r7
10013cec:	2c00      	cmp	r4, #0
10013cee:	d117      	bne.n	10013d20 <__gedf2+0x74>
10013cf0:	465f      	mov	r7, fp
10013cf2:	433a      	orrs	r2, r7
10013cf4:	d114      	bne.n	10013d20 <__gedf2+0x74>
10013cf6:	464b      	mov	r3, r9
10013cf8:	2000      	movs	r0, #0
10013cfa:	2b00      	cmp	r3, #0
10013cfc:	d00a      	beq.n	10013d14 <__gedf2+0x68>
10013cfe:	e006      	b.n	10013d0e <__gedf2+0x62>
10013d00:	2c00      	cmp	r4, #0
10013d02:	d102      	bne.n	10013d0a <__gedf2+0x5e>
10013d04:	4658      	mov	r0, fp
10013d06:	4302      	orrs	r2, r0
10013d08:	d001      	beq.n	10013d0e <__gedf2+0x62>
10013d0a:	4299      	cmp	r1, r3
10013d0c:	d01a      	beq.n	10013d44 <__gedf2+0x98>
10013d0e:	2301      	movs	r3, #1
10013d10:	4248      	negs	r0, r1
10013d12:	4318      	orrs	r0, r3
10013d14:	bc3c      	pop	{r2, r3, r4, r5}
10013d16:	4690      	mov	r8, r2
10013d18:	4699      	mov	r9, r3
10013d1a:	46a2      	mov	sl, r4
10013d1c:	46ab      	mov	fp, r5
10013d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10013d20:	2800      	cmp	r0, #0
10013d22:	d0f2      	beq.n	10013d0a <__gedf2+0x5e>
10013d24:	4258      	negs	r0, r3
10013d26:	4158      	adcs	r0, r3
10013d28:	2201      	movs	r2, #1
10013d2a:	4240      	negs	r0, r0
10013d2c:	4310      	orrs	r0, r2
10013d2e:	e7f1      	b.n	10013d14 <__gedf2+0x68>
10013d30:	0037      	movs	r7, r6
10013d32:	4307      	orrs	r7, r0
10013d34:	d0d0      	beq.n	10013cd8 <__gedf2+0x2c>
10013d36:	2002      	movs	r0, #2
10013d38:	4240      	negs	r0, r0
10013d3a:	e7eb      	b.n	10013d14 <__gedf2+0x68>
10013d3c:	465f      	mov	r7, fp
10013d3e:	4317      	orrs	r7, r2
10013d40:	d0cd      	beq.n	10013cde <__gedf2+0x32>
10013d42:	e7f8      	b.n	10013d36 <__gedf2+0x8a>
10013d44:	42a5      	cmp	r5, r4
10013d46:	dce2      	bgt.n	10013d0e <__gedf2+0x62>
10013d48:	db05      	blt.n	10013d56 <__gedf2+0xaa>
10013d4a:	455e      	cmp	r6, fp
10013d4c:	d8df      	bhi.n	10013d0e <__gedf2+0x62>
10013d4e:	d008      	beq.n	10013d62 <__gedf2+0xb6>
10013d50:	2000      	movs	r0, #0
10013d52:	455e      	cmp	r6, fp
10013d54:	d2de      	bcs.n	10013d14 <__gedf2+0x68>
10013d56:	4248      	negs	r0, r1
10013d58:	4148      	adcs	r0, r1
10013d5a:	2301      	movs	r3, #1
10013d5c:	4240      	negs	r0, r0
10013d5e:	4318      	orrs	r0, r3
10013d60:	e7d8      	b.n	10013d14 <__gedf2+0x68>
10013d62:	45c4      	cmp	ip, r8
10013d64:	d8d3      	bhi.n	10013d0e <__gedf2+0x62>
10013d66:	2000      	movs	r0, #0
10013d68:	45c4      	cmp	ip, r8
10013d6a:	d3f4      	bcc.n	10013d56 <__gedf2+0xaa>
10013d6c:	e7d2      	b.n	10013d14 <__gedf2+0x68>
10013d6e:	46c0      	nop			; (mov r8, r8)
10013d70:	000007ff 	.word	0x000007ff

10013d74 <__ledf2>:
10013d74:	b5f0      	push	{r4, r5, r6, r7, lr}
10013d76:	465f      	mov	r7, fp
10013d78:	464d      	mov	r5, r9
10013d7a:	4644      	mov	r4, r8
10013d7c:	4656      	mov	r6, sl
10013d7e:	b4f0      	push	{r4, r5, r6, r7}
10013d80:	031c      	lsls	r4, r3, #12
10013d82:	0b24      	lsrs	r4, r4, #12
10013d84:	46a4      	mov	ip, r4
10013d86:	4c2f      	ldr	r4, [pc, #188]	; (10013e44 <__ledf2+0xd0>)
10013d88:	030f      	lsls	r7, r1, #12
10013d8a:	004d      	lsls	r5, r1, #1
10013d8c:	005e      	lsls	r6, r3, #1
10013d8e:	0fc9      	lsrs	r1, r1, #31
10013d90:	4680      	mov	r8, r0
10013d92:	0b3f      	lsrs	r7, r7, #12
10013d94:	0d6d      	lsrs	r5, r5, #21
10013d96:	468b      	mov	fp, r1
10013d98:	4691      	mov	r9, r2
10013d9a:	0d76      	lsrs	r6, r6, #21
10013d9c:	0fdb      	lsrs	r3, r3, #31
10013d9e:	42a5      	cmp	r5, r4
10013da0:	d020      	beq.n	10013de4 <__ledf2+0x70>
10013da2:	4c28      	ldr	r4, [pc, #160]	; (10013e44 <__ledf2+0xd0>)
10013da4:	42a6      	cmp	r6, r4
10013da6:	d022      	beq.n	10013dee <__ledf2+0x7a>
10013da8:	2d00      	cmp	r5, #0
10013daa:	d112      	bne.n	10013dd2 <__ledf2+0x5e>
10013dac:	4338      	orrs	r0, r7
10013dae:	4244      	negs	r4, r0
10013db0:	4144      	adcs	r4, r0
10013db2:	2e00      	cmp	r6, #0
10013db4:	d020      	beq.n	10013df8 <__ledf2+0x84>
10013db6:	2c00      	cmp	r4, #0
10013db8:	d00d      	beq.n	10013dd6 <__ledf2+0x62>
10013dba:	425c      	negs	r4, r3
10013dbc:	4163      	adcs	r3, r4
10013dbe:	2401      	movs	r4, #1
10013dc0:	425b      	negs	r3, r3
10013dc2:	431c      	orrs	r4, r3
10013dc4:	0020      	movs	r0, r4
10013dc6:	bc3c      	pop	{r2, r3, r4, r5}
10013dc8:	4690      	mov	r8, r2
10013dca:	4699      	mov	r9, r3
10013dcc:	46a2      	mov	sl, r4
10013dce:	46ab      	mov	fp, r5
10013dd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
10013dd2:	2e00      	cmp	r6, #0
10013dd4:	d017      	beq.n	10013e06 <__ledf2+0x92>
10013dd6:	455b      	cmp	r3, fp
10013dd8:	d019      	beq.n	10013e0e <__ledf2+0x9a>
10013dda:	465b      	mov	r3, fp
10013ddc:	425c      	negs	r4, r3
10013dde:	2301      	movs	r3, #1
10013de0:	431c      	orrs	r4, r3
10013de2:	e7ef      	b.n	10013dc4 <__ledf2+0x50>
10013de4:	0039      	movs	r1, r7
10013de6:	2402      	movs	r4, #2
10013de8:	4301      	orrs	r1, r0
10013dea:	d1eb      	bne.n	10013dc4 <__ledf2+0x50>
10013dec:	e7d9      	b.n	10013da2 <__ledf2+0x2e>
10013dee:	4661      	mov	r1, ip
10013df0:	2402      	movs	r4, #2
10013df2:	4311      	orrs	r1, r2
10013df4:	d1e6      	bne.n	10013dc4 <__ledf2+0x50>
10013df6:	e7d7      	b.n	10013da8 <__ledf2+0x34>
10013df8:	4661      	mov	r1, ip
10013dfa:	430a      	orrs	r2, r1
10013dfc:	d1db      	bne.n	10013db6 <__ledf2+0x42>
10013dfe:	2400      	movs	r4, #0
10013e00:	2800      	cmp	r0, #0
10013e02:	d0df      	beq.n	10013dc4 <__ledf2+0x50>
10013e04:	e7e9      	b.n	10013dda <__ledf2+0x66>
10013e06:	4661      	mov	r1, ip
10013e08:	430a      	orrs	r2, r1
10013e0a:	d1e4      	bne.n	10013dd6 <__ledf2+0x62>
10013e0c:	e7e5      	b.n	10013dda <__ledf2+0x66>
10013e0e:	42b5      	cmp	r5, r6
10013e10:	dd03      	ble.n	10013e1a <__ledf2+0xa6>
10013e12:	2201      	movs	r2, #1
10013e14:	425c      	negs	r4, r3
10013e16:	4314      	orrs	r4, r2
10013e18:	e7d4      	b.n	10013dc4 <__ledf2+0x50>
10013e1a:	42b5      	cmp	r5, r6
10013e1c:	dbcd      	blt.n	10013dba <__ledf2+0x46>
10013e1e:	4567      	cmp	r7, ip
10013e20:	d8db      	bhi.n	10013dda <__ledf2+0x66>
10013e22:	d009      	beq.n	10013e38 <__ledf2+0xc4>
10013e24:	2400      	movs	r4, #0
10013e26:	4567      	cmp	r7, ip
10013e28:	d2cc      	bcs.n	10013dc4 <__ledf2+0x50>
10013e2a:	4659      	mov	r1, fp
10013e2c:	424c      	negs	r4, r1
10013e2e:	4161      	adcs	r1, r4
10013e30:	2401      	movs	r4, #1
10013e32:	4249      	negs	r1, r1
10013e34:	430c      	orrs	r4, r1
10013e36:	e7c5      	b.n	10013dc4 <__ledf2+0x50>
10013e38:	45c8      	cmp	r8, r9
10013e3a:	d8ce      	bhi.n	10013dda <__ledf2+0x66>
10013e3c:	2400      	movs	r4, #0
10013e3e:	45c8      	cmp	r8, r9
10013e40:	d3f3      	bcc.n	10013e2a <__ledf2+0xb6>
10013e42:	e7bf      	b.n	10013dc4 <__ledf2+0x50>
10013e44:	000007ff 	.word	0x000007ff

10013e48 <__aeabi_dmul>:
10013e48:	b5f0      	push	{r4, r5, r6, r7, lr}
10013e4a:	465f      	mov	r7, fp
10013e4c:	4656      	mov	r6, sl
10013e4e:	464d      	mov	r5, r9
10013e50:	4644      	mov	r4, r8
10013e52:	b4f0      	push	{r4, r5, r6, r7}
10013e54:	030d      	lsls	r5, r1, #12
10013e56:	4699      	mov	r9, r3
10013e58:	004e      	lsls	r6, r1, #1
10013e5a:	0b2b      	lsrs	r3, r5, #12
10013e5c:	b087      	sub	sp, #28
10013e5e:	0007      	movs	r7, r0
10013e60:	4692      	mov	sl, r2
10013e62:	4680      	mov	r8, r0
10013e64:	469b      	mov	fp, r3
10013e66:	0d76      	lsrs	r6, r6, #21
10013e68:	0fcc      	lsrs	r4, r1, #31
10013e6a:	2e00      	cmp	r6, #0
10013e6c:	d069      	beq.n	10013f42 <__aeabi_dmul+0xfa>
10013e6e:	4b6d      	ldr	r3, [pc, #436]	; (10014024 <__aeabi_dmul+0x1dc>)
10013e70:	429e      	cmp	r6, r3
10013e72:	d035      	beq.n	10013ee0 <__aeabi_dmul+0x98>
10013e74:	465b      	mov	r3, fp
10013e76:	2280      	movs	r2, #128	; 0x80
10013e78:	00dd      	lsls	r5, r3, #3
10013e7a:	0412      	lsls	r2, r2, #16
10013e7c:	0f43      	lsrs	r3, r0, #29
10013e7e:	4313      	orrs	r3, r2
10013e80:	432b      	orrs	r3, r5
10013e82:	469b      	mov	fp, r3
10013e84:	00c3      	lsls	r3, r0, #3
10013e86:	4698      	mov	r8, r3
10013e88:	4b67      	ldr	r3, [pc, #412]	; (10014028 <__aeabi_dmul+0x1e0>)
10013e8a:	2700      	movs	r7, #0
10013e8c:	469c      	mov	ip, r3
10013e8e:	2300      	movs	r3, #0
10013e90:	4466      	add	r6, ip
10013e92:	9301      	str	r3, [sp, #4]
10013e94:	464a      	mov	r2, r9
10013e96:	0315      	lsls	r5, r2, #12
10013e98:	0050      	lsls	r0, r2, #1
10013e9a:	0fd2      	lsrs	r2, r2, #31
10013e9c:	4653      	mov	r3, sl
10013e9e:	0b2d      	lsrs	r5, r5, #12
10013ea0:	0d40      	lsrs	r0, r0, #21
10013ea2:	4691      	mov	r9, r2
10013ea4:	d100      	bne.n	10013ea8 <__aeabi_dmul+0x60>
10013ea6:	e076      	b.n	10013f96 <__aeabi_dmul+0x14e>
10013ea8:	4a5e      	ldr	r2, [pc, #376]	; (10014024 <__aeabi_dmul+0x1dc>)
10013eaa:	4290      	cmp	r0, r2
10013eac:	d06c      	beq.n	10013f88 <__aeabi_dmul+0x140>
10013eae:	2280      	movs	r2, #128	; 0x80
10013eb0:	0f5b      	lsrs	r3, r3, #29
10013eb2:	0412      	lsls	r2, r2, #16
10013eb4:	4313      	orrs	r3, r2
10013eb6:	4a5c      	ldr	r2, [pc, #368]	; (10014028 <__aeabi_dmul+0x1e0>)
10013eb8:	00ed      	lsls	r5, r5, #3
10013eba:	4694      	mov	ip, r2
10013ebc:	431d      	orrs	r5, r3
10013ebe:	4653      	mov	r3, sl
10013ec0:	2200      	movs	r2, #0
10013ec2:	00db      	lsls	r3, r3, #3
10013ec4:	4460      	add	r0, ip
10013ec6:	4649      	mov	r1, r9
10013ec8:	1836      	adds	r6, r6, r0
10013eca:	1c70      	adds	r0, r6, #1
10013ecc:	4061      	eors	r1, r4
10013ece:	9002      	str	r0, [sp, #8]
10013ed0:	4317      	orrs	r7, r2
10013ed2:	2f0f      	cmp	r7, #15
10013ed4:	d900      	bls.n	10013ed8 <__aeabi_dmul+0x90>
10013ed6:	e0af      	b.n	10014038 <__aeabi_dmul+0x1f0>
10013ed8:	4854      	ldr	r0, [pc, #336]	; (1001402c <__aeabi_dmul+0x1e4>)
10013eda:	00bf      	lsls	r7, r7, #2
10013edc:	59c7      	ldr	r7, [r0, r7]
10013ede:	46bf      	mov	pc, r7
10013ee0:	465b      	mov	r3, fp
10013ee2:	431f      	orrs	r7, r3
10013ee4:	d000      	beq.n	10013ee8 <__aeabi_dmul+0xa0>
10013ee6:	e088      	b.n	10013ffa <__aeabi_dmul+0x1b2>
10013ee8:	2300      	movs	r3, #0
10013eea:	469b      	mov	fp, r3
10013eec:	4698      	mov	r8, r3
10013eee:	3302      	adds	r3, #2
10013ef0:	2708      	movs	r7, #8
10013ef2:	9301      	str	r3, [sp, #4]
10013ef4:	e7ce      	b.n	10013e94 <__aeabi_dmul+0x4c>
10013ef6:	4649      	mov	r1, r9
10013ef8:	2a02      	cmp	r2, #2
10013efa:	d06a      	beq.n	10013fd2 <__aeabi_dmul+0x18a>
10013efc:	2a03      	cmp	r2, #3
10013efe:	d100      	bne.n	10013f02 <__aeabi_dmul+0xba>
10013f00:	e209      	b.n	10014316 <__aeabi_dmul+0x4ce>
10013f02:	2a01      	cmp	r2, #1
10013f04:	d000      	beq.n	10013f08 <__aeabi_dmul+0xc0>
10013f06:	e1bb      	b.n	10014280 <__aeabi_dmul+0x438>
10013f08:	4011      	ands	r1, r2
10013f0a:	2200      	movs	r2, #0
10013f0c:	2300      	movs	r3, #0
10013f0e:	2500      	movs	r5, #0
10013f10:	4690      	mov	r8, r2
10013f12:	b2cc      	uxtb	r4, r1
10013f14:	2100      	movs	r1, #0
10013f16:	032d      	lsls	r5, r5, #12
10013f18:	0d0a      	lsrs	r2, r1, #20
10013f1a:	0512      	lsls	r2, r2, #20
10013f1c:	0b2d      	lsrs	r5, r5, #12
10013f1e:	4315      	orrs	r5, r2
10013f20:	4a43      	ldr	r2, [pc, #268]	; (10014030 <__aeabi_dmul+0x1e8>)
10013f22:	051b      	lsls	r3, r3, #20
10013f24:	4015      	ands	r5, r2
10013f26:	431d      	orrs	r5, r3
10013f28:	006d      	lsls	r5, r5, #1
10013f2a:	07e4      	lsls	r4, r4, #31
10013f2c:	086d      	lsrs	r5, r5, #1
10013f2e:	4325      	orrs	r5, r4
10013f30:	4640      	mov	r0, r8
10013f32:	0029      	movs	r1, r5
10013f34:	b007      	add	sp, #28
10013f36:	bc3c      	pop	{r2, r3, r4, r5}
10013f38:	4690      	mov	r8, r2
10013f3a:	4699      	mov	r9, r3
10013f3c:	46a2      	mov	sl, r4
10013f3e:	46ab      	mov	fp, r5
10013f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
10013f42:	4303      	orrs	r3, r0
10013f44:	d052      	beq.n	10013fec <__aeabi_dmul+0x1a4>
10013f46:	465b      	mov	r3, fp
10013f48:	2b00      	cmp	r3, #0
10013f4a:	d100      	bne.n	10013f4e <__aeabi_dmul+0x106>
10013f4c:	e18a      	b.n	10014264 <__aeabi_dmul+0x41c>
10013f4e:	4658      	mov	r0, fp
10013f50:	f000 fdb6 	bl	10014ac0 <__clzsi2>
10013f54:	0003      	movs	r3, r0
10013f56:	3b0b      	subs	r3, #11
10013f58:	2b1c      	cmp	r3, #28
10013f5a:	dd00      	ble.n	10013f5e <__aeabi_dmul+0x116>
10013f5c:	e17b      	b.n	10014256 <__aeabi_dmul+0x40e>
10013f5e:	221d      	movs	r2, #29
10013f60:	1ad3      	subs	r3, r2, r3
10013f62:	003a      	movs	r2, r7
10013f64:	0001      	movs	r1, r0
10013f66:	465d      	mov	r5, fp
10013f68:	40da      	lsrs	r2, r3
10013f6a:	3908      	subs	r1, #8
10013f6c:	408d      	lsls	r5, r1
10013f6e:	0013      	movs	r3, r2
10013f70:	408f      	lsls	r7, r1
10013f72:	432b      	orrs	r3, r5
10013f74:	469b      	mov	fp, r3
10013f76:	46b8      	mov	r8, r7
10013f78:	4b2e      	ldr	r3, [pc, #184]	; (10014034 <__aeabi_dmul+0x1ec>)
10013f7a:	2700      	movs	r7, #0
10013f7c:	469c      	mov	ip, r3
10013f7e:	2300      	movs	r3, #0
10013f80:	4460      	add	r0, ip
10013f82:	4246      	negs	r6, r0
10013f84:	9301      	str	r3, [sp, #4]
10013f86:	e785      	b.n	10013e94 <__aeabi_dmul+0x4c>
10013f88:	4652      	mov	r2, sl
10013f8a:	432a      	orrs	r2, r5
10013f8c:	d12c      	bne.n	10013fe8 <__aeabi_dmul+0x1a0>
10013f8e:	2500      	movs	r5, #0
10013f90:	2300      	movs	r3, #0
10013f92:	2202      	movs	r2, #2
10013f94:	e797      	b.n	10013ec6 <__aeabi_dmul+0x7e>
10013f96:	4652      	mov	r2, sl
10013f98:	432a      	orrs	r2, r5
10013f9a:	d021      	beq.n	10013fe0 <__aeabi_dmul+0x198>
10013f9c:	2d00      	cmp	r5, #0
10013f9e:	d100      	bne.n	10013fa2 <__aeabi_dmul+0x15a>
10013fa0:	e154      	b.n	1001424c <__aeabi_dmul+0x404>
10013fa2:	0028      	movs	r0, r5
10013fa4:	f000 fd8c 	bl	10014ac0 <__clzsi2>
10013fa8:	0003      	movs	r3, r0
10013faa:	3b0b      	subs	r3, #11
10013fac:	2b1c      	cmp	r3, #28
10013fae:	dd00      	ble.n	10013fb2 <__aeabi_dmul+0x16a>
10013fb0:	e146      	b.n	10014240 <__aeabi_dmul+0x3f8>
10013fb2:	211d      	movs	r1, #29
10013fb4:	1acb      	subs	r3, r1, r3
10013fb6:	4651      	mov	r1, sl
10013fb8:	0002      	movs	r2, r0
10013fba:	40d9      	lsrs	r1, r3
10013fbc:	4653      	mov	r3, sl
10013fbe:	3a08      	subs	r2, #8
10013fc0:	4095      	lsls	r5, r2
10013fc2:	4093      	lsls	r3, r2
10013fc4:	430d      	orrs	r5, r1
10013fc6:	4a1b      	ldr	r2, [pc, #108]	; (10014034 <__aeabi_dmul+0x1ec>)
10013fc8:	4694      	mov	ip, r2
10013fca:	4460      	add	r0, ip
10013fcc:	4240      	negs	r0, r0
10013fce:	2200      	movs	r2, #0
10013fd0:	e779      	b.n	10013ec6 <__aeabi_dmul+0x7e>
10013fd2:	2401      	movs	r4, #1
10013fd4:	2200      	movs	r2, #0
10013fd6:	400c      	ands	r4, r1
10013fd8:	4b12      	ldr	r3, [pc, #72]	; (10014024 <__aeabi_dmul+0x1dc>)
10013fda:	2500      	movs	r5, #0
10013fdc:	4690      	mov	r8, r2
10013fde:	e799      	b.n	10013f14 <__aeabi_dmul+0xcc>
10013fe0:	2500      	movs	r5, #0
10013fe2:	2300      	movs	r3, #0
10013fe4:	2201      	movs	r2, #1
10013fe6:	e76e      	b.n	10013ec6 <__aeabi_dmul+0x7e>
10013fe8:	2203      	movs	r2, #3
10013fea:	e76c      	b.n	10013ec6 <__aeabi_dmul+0x7e>
10013fec:	2300      	movs	r3, #0
10013fee:	469b      	mov	fp, r3
10013ff0:	4698      	mov	r8, r3
10013ff2:	3301      	adds	r3, #1
10013ff4:	2704      	movs	r7, #4
10013ff6:	9301      	str	r3, [sp, #4]
10013ff8:	e74c      	b.n	10013e94 <__aeabi_dmul+0x4c>
10013ffa:	2303      	movs	r3, #3
10013ffc:	270c      	movs	r7, #12
10013ffe:	9301      	str	r3, [sp, #4]
10014000:	e748      	b.n	10013e94 <__aeabi_dmul+0x4c>
10014002:	2300      	movs	r3, #0
10014004:	2580      	movs	r5, #128	; 0x80
10014006:	4698      	mov	r8, r3
10014008:	2400      	movs	r4, #0
1001400a:	032d      	lsls	r5, r5, #12
1001400c:	4b05      	ldr	r3, [pc, #20]	; (10014024 <__aeabi_dmul+0x1dc>)
1001400e:	e781      	b.n	10013f14 <__aeabi_dmul+0xcc>
10014010:	465d      	mov	r5, fp
10014012:	4643      	mov	r3, r8
10014014:	9a01      	ldr	r2, [sp, #4]
10014016:	e76f      	b.n	10013ef8 <__aeabi_dmul+0xb0>
10014018:	465d      	mov	r5, fp
1001401a:	4643      	mov	r3, r8
1001401c:	0021      	movs	r1, r4
1001401e:	9a01      	ldr	r2, [sp, #4]
10014020:	e76a      	b.n	10013ef8 <__aeabi_dmul+0xb0>
10014022:	46c0      	nop			; (mov r8, r8)
10014024:	000007ff 	.word	0x000007ff
10014028:	fffffc01 	.word	0xfffffc01
1001402c:	10017df4 	.word	0x10017df4
10014030:	800fffff 	.word	0x800fffff
10014034:	000003f3 	.word	0x000003f3
10014038:	4642      	mov	r2, r8
1001403a:	0c12      	lsrs	r2, r2, #16
1001403c:	4691      	mov	r9, r2
1001403e:	0c1a      	lsrs	r2, r3, #16
10014040:	4694      	mov	ip, r2
10014042:	4642      	mov	r2, r8
10014044:	0417      	lsls	r7, r2, #16
10014046:	464a      	mov	r2, r9
10014048:	041b      	lsls	r3, r3, #16
1001404a:	0c1b      	lsrs	r3, r3, #16
1001404c:	435a      	muls	r2, r3
1001404e:	4660      	mov	r0, ip
10014050:	4690      	mov	r8, r2
10014052:	464a      	mov	r2, r9
10014054:	4342      	muls	r2, r0
10014056:	0010      	movs	r0, r2
10014058:	9203      	str	r2, [sp, #12]
1001405a:	4662      	mov	r2, ip
1001405c:	001c      	movs	r4, r3
1001405e:	0c3f      	lsrs	r7, r7, #16
10014060:	437a      	muls	r2, r7
10014062:	437c      	muls	r4, r7
10014064:	4442      	add	r2, r8
10014066:	9201      	str	r2, [sp, #4]
10014068:	0c22      	lsrs	r2, r4, #16
1001406a:	4692      	mov	sl, r2
1001406c:	9a01      	ldr	r2, [sp, #4]
1001406e:	4452      	add	r2, sl
10014070:	4590      	cmp	r8, r2
10014072:	d906      	bls.n	10014082 <__aeabi_dmul+0x23a>
10014074:	4682      	mov	sl, r0
10014076:	2080      	movs	r0, #128	; 0x80
10014078:	0240      	lsls	r0, r0, #9
1001407a:	4680      	mov	r8, r0
1001407c:	44c2      	add	sl, r8
1001407e:	4650      	mov	r0, sl
10014080:	9003      	str	r0, [sp, #12]
10014082:	0c10      	lsrs	r0, r2, #16
10014084:	9004      	str	r0, [sp, #16]
10014086:	4648      	mov	r0, r9
10014088:	0424      	lsls	r4, r4, #16
1001408a:	0c24      	lsrs	r4, r4, #16
1001408c:	0412      	lsls	r2, r2, #16
1001408e:	1912      	adds	r2, r2, r4
10014090:	9205      	str	r2, [sp, #20]
10014092:	0c2a      	lsrs	r2, r5, #16
10014094:	042d      	lsls	r5, r5, #16
10014096:	0c2d      	lsrs	r5, r5, #16
10014098:	4368      	muls	r0, r5
1001409a:	002c      	movs	r4, r5
1001409c:	4682      	mov	sl, r0
1001409e:	4648      	mov	r0, r9
100140a0:	437c      	muls	r4, r7
100140a2:	4350      	muls	r0, r2
100140a4:	4681      	mov	r9, r0
100140a6:	0c20      	lsrs	r0, r4, #16
100140a8:	4680      	mov	r8, r0
100140aa:	4357      	muls	r7, r2
100140ac:	4457      	add	r7, sl
100140ae:	4447      	add	r7, r8
100140b0:	45ba      	cmp	sl, r7
100140b2:	d903      	bls.n	100140bc <__aeabi_dmul+0x274>
100140b4:	2080      	movs	r0, #128	; 0x80
100140b6:	0240      	lsls	r0, r0, #9
100140b8:	4680      	mov	r8, r0
100140ba:	44c1      	add	r9, r8
100140bc:	0c38      	lsrs	r0, r7, #16
100140be:	043f      	lsls	r7, r7, #16
100140c0:	46b8      	mov	r8, r7
100140c2:	4448      	add	r0, r9
100140c4:	0424      	lsls	r4, r4, #16
100140c6:	0c24      	lsrs	r4, r4, #16
100140c8:	9001      	str	r0, [sp, #4]
100140ca:	9804      	ldr	r0, [sp, #16]
100140cc:	44a0      	add	r8, r4
100140ce:	4440      	add	r0, r8
100140d0:	9004      	str	r0, [sp, #16]
100140d2:	4658      	mov	r0, fp
100140d4:	0c00      	lsrs	r0, r0, #16
100140d6:	4681      	mov	r9, r0
100140d8:	4658      	mov	r0, fp
100140da:	0404      	lsls	r4, r0, #16
100140dc:	0c20      	lsrs	r0, r4, #16
100140de:	4682      	mov	sl, r0
100140e0:	0007      	movs	r7, r0
100140e2:	4648      	mov	r0, r9
100140e4:	435f      	muls	r7, r3
100140e6:	464c      	mov	r4, r9
100140e8:	4343      	muls	r3, r0
100140ea:	4660      	mov	r0, ip
100140ec:	4360      	muls	r0, r4
100140ee:	4664      	mov	r4, ip
100140f0:	4683      	mov	fp, r0
100140f2:	4650      	mov	r0, sl
100140f4:	4344      	muls	r4, r0
100140f6:	0c38      	lsrs	r0, r7, #16
100140f8:	4684      	mov	ip, r0
100140fa:	18e4      	adds	r4, r4, r3
100140fc:	4464      	add	r4, ip
100140fe:	42a3      	cmp	r3, r4
10014100:	d903      	bls.n	1001410a <__aeabi_dmul+0x2c2>
10014102:	2380      	movs	r3, #128	; 0x80
10014104:	025b      	lsls	r3, r3, #9
10014106:	469c      	mov	ip, r3
10014108:	44e3      	add	fp, ip
1001410a:	4648      	mov	r0, r9
1001410c:	043f      	lsls	r7, r7, #16
1001410e:	0c23      	lsrs	r3, r4, #16
10014110:	0c3f      	lsrs	r7, r7, #16
10014112:	0424      	lsls	r4, r4, #16
10014114:	19e4      	adds	r4, r4, r7
10014116:	4657      	mov	r7, sl
10014118:	4368      	muls	r0, r5
1001411a:	436f      	muls	r7, r5
1001411c:	4684      	mov	ip, r0
1001411e:	464d      	mov	r5, r9
10014120:	4650      	mov	r0, sl
10014122:	4355      	muls	r5, r2
10014124:	4342      	muls	r2, r0
10014126:	0c38      	lsrs	r0, r7, #16
10014128:	4681      	mov	r9, r0
1001412a:	4462      	add	r2, ip
1001412c:	444a      	add	r2, r9
1001412e:	445b      	add	r3, fp
10014130:	4594      	cmp	ip, r2
10014132:	d903      	bls.n	1001413c <__aeabi_dmul+0x2f4>
10014134:	2080      	movs	r0, #128	; 0x80
10014136:	0240      	lsls	r0, r0, #9
10014138:	4684      	mov	ip, r0
1001413a:	4465      	add	r5, ip
1001413c:	9803      	ldr	r0, [sp, #12]
1001413e:	043f      	lsls	r7, r7, #16
10014140:	4683      	mov	fp, r0
10014142:	9804      	ldr	r0, [sp, #16]
10014144:	0c3f      	lsrs	r7, r7, #16
10014146:	4684      	mov	ip, r0
10014148:	44e3      	add	fp, ip
1001414a:	45c3      	cmp	fp, r8
1001414c:	4180      	sbcs	r0, r0
1001414e:	4240      	negs	r0, r0
10014150:	4682      	mov	sl, r0
10014152:	0410      	lsls	r0, r2, #16
10014154:	4684      	mov	ip, r0
10014156:	9801      	ldr	r0, [sp, #4]
10014158:	4467      	add	r7, ip
1001415a:	4684      	mov	ip, r0
1001415c:	4467      	add	r7, ip
1001415e:	44a3      	add	fp, r4
10014160:	46bc      	mov	ip, r7
10014162:	45a3      	cmp	fp, r4
10014164:	41a4      	sbcs	r4, r4
10014166:	4699      	mov	r9, r3
10014168:	44d4      	add	ip, sl
1001416a:	4264      	negs	r4, r4
1001416c:	4287      	cmp	r7, r0
1001416e:	41bf      	sbcs	r7, r7
10014170:	45d4      	cmp	ip, sl
10014172:	4180      	sbcs	r0, r0
10014174:	44e1      	add	r9, ip
10014176:	46a0      	mov	r8, r4
10014178:	4599      	cmp	r9, r3
1001417a:	419b      	sbcs	r3, r3
1001417c:	427f      	negs	r7, r7
1001417e:	4240      	negs	r0, r0
10014180:	44c8      	add	r8, r9
10014182:	4307      	orrs	r7, r0
10014184:	0c12      	lsrs	r2, r2, #16
10014186:	18ba      	adds	r2, r7, r2
10014188:	45a0      	cmp	r8, r4
1001418a:	41a4      	sbcs	r4, r4
1001418c:	425f      	negs	r7, r3
1001418e:	003b      	movs	r3, r7
10014190:	4264      	negs	r4, r4
10014192:	4323      	orrs	r3, r4
10014194:	18d7      	adds	r7, r2, r3
10014196:	4643      	mov	r3, r8
10014198:	197d      	adds	r5, r7, r5
1001419a:	0ddb      	lsrs	r3, r3, #23
1001419c:	026d      	lsls	r5, r5, #9
1001419e:	431d      	orrs	r5, r3
100141a0:	465b      	mov	r3, fp
100141a2:	025a      	lsls	r2, r3, #9
100141a4:	9b05      	ldr	r3, [sp, #20]
100141a6:	431a      	orrs	r2, r3
100141a8:	1e53      	subs	r3, r2, #1
100141aa:	419a      	sbcs	r2, r3
100141ac:	465b      	mov	r3, fp
100141ae:	0ddb      	lsrs	r3, r3, #23
100141b0:	431a      	orrs	r2, r3
100141b2:	4643      	mov	r3, r8
100141b4:	025b      	lsls	r3, r3, #9
100141b6:	4313      	orrs	r3, r2
100141b8:	01ea      	lsls	r2, r5, #7
100141ba:	d507      	bpl.n	100141cc <__aeabi_dmul+0x384>
100141bc:	2201      	movs	r2, #1
100141be:	085c      	lsrs	r4, r3, #1
100141c0:	4013      	ands	r3, r2
100141c2:	4323      	orrs	r3, r4
100141c4:	07ea      	lsls	r2, r5, #31
100141c6:	9e02      	ldr	r6, [sp, #8]
100141c8:	4313      	orrs	r3, r2
100141ca:	086d      	lsrs	r5, r5, #1
100141cc:	4a57      	ldr	r2, [pc, #348]	; (1001432c <__aeabi_dmul+0x4e4>)
100141ce:	18b2      	adds	r2, r6, r2
100141d0:	2a00      	cmp	r2, #0
100141d2:	dd4b      	ble.n	1001426c <__aeabi_dmul+0x424>
100141d4:	0758      	lsls	r0, r3, #29
100141d6:	d009      	beq.n	100141ec <__aeabi_dmul+0x3a4>
100141d8:	200f      	movs	r0, #15
100141da:	4018      	ands	r0, r3
100141dc:	2804      	cmp	r0, #4
100141de:	d005      	beq.n	100141ec <__aeabi_dmul+0x3a4>
100141e0:	1d18      	adds	r0, r3, #4
100141e2:	4298      	cmp	r0, r3
100141e4:	419b      	sbcs	r3, r3
100141e6:	425b      	negs	r3, r3
100141e8:	18ed      	adds	r5, r5, r3
100141ea:	0003      	movs	r3, r0
100141ec:	01e8      	lsls	r0, r5, #7
100141ee:	d504      	bpl.n	100141fa <__aeabi_dmul+0x3b2>
100141f0:	4a4f      	ldr	r2, [pc, #316]	; (10014330 <__aeabi_dmul+0x4e8>)
100141f2:	4015      	ands	r5, r2
100141f4:	2280      	movs	r2, #128	; 0x80
100141f6:	00d2      	lsls	r2, r2, #3
100141f8:	18b2      	adds	r2, r6, r2
100141fa:	484e      	ldr	r0, [pc, #312]	; (10014334 <__aeabi_dmul+0x4ec>)
100141fc:	4282      	cmp	r2, r0
100141fe:	dd00      	ble.n	10014202 <__aeabi_dmul+0x3ba>
10014200:	e6e7      	b.n	10013fd2 <__aeabi_dmul+0x18a>
10014202:	2401      	movs	r4, #1
10014204:	08db      	lsrs	r3, r3, #3
10014206:	0768      	lsls	r0, r5, #29
10014208:	4318      	orrs	r0, r3
1001420a:	026d      	lsls	r5, r5, #9
1001420c:	0553      	lsls	r3, r2, #21
1001420e:	4680      	mov	r8, r0
10014210:	0b2d      	lsrs	r5, r5, #12
10014212:	0d5b      	lsrs	r3, r3, #21
10014214:	400c      	ands	r4, r1
10014216:	e67d      	b.n	10013f14 <__aeabi_dmul+0xcc>
10014218:	2280      	movs	r2, #128	; 0x80
1001421a:	4659      	mov	r1, fp
1001421c:	0312      	lsls	r2, r2, #12
1001421e:	4211      	tst	r1, r2
10014220:	d008      	beq.n	10014234 <__aeabi_dmul+0x3ec>
10014222:	4215      	tst	r5, r2
10014224:	d106      	bne.n	10014234 <__aeabi_dmul+0x3ec>
10014226:	4315      	orrs	r5, r2
10014228:	032d      	lsls	r5, r5, #12
1001422a:	4698      	mov	r8, r3
1001422c:	0b2d      	lsrs	r5, r5, #12
1001422e:	464c      	mov	r4, r9
10014230:	4b41      	ldr	r3, [pc, #260]	; (10014338 <__aeabi_dmul+0x4f0>)
10014232:	e66f      	b.n	10013f14 <__aeabi_dmul+0xcc>
10014234:	465d      	mov	r5, fp
10014236:	4315      	orrs	r5, r2
10014238:	032d      	lsls	r5, r5, #12
1001423a:	0b2d      	lsrs	r5, r5, #12
1001423c:	4b3e      	ldr	r3, [pc, #248]	; (10014338 <__aeabi_dmul+0x4f0>)
1001423e:	e669      	b.n	10013f14 <__aeabi_dmul+0xcc>
10014240:	0003      	movs	r3, r0
10014242:	4655      	mov	r5, sl
10014244:	3b28      	subs	r3, #40	; 0x28
10014246:	409d      	lsls	r5, r3
10014248:	2300      	movs	r3, #0
1001424a:	e6bc      	b.n	10013fc6 <__aeabi_dmul+0x17e>
1001424c:	4650      	mov	r0, sl
1001424e:	f000 fc37 	bl	10014ac0 <__clzsi2>
10014252:	3020      	adds	r0, #32
10014254:	e6a8      	b.n	10013fa8 <__aeabi_dmul+0x160>
10014256:	0003      	movs	r3, r0
10014258:	3b28      	subs	r3, #40	; 0x28
1001425a:	409f      	lsls	r7, r3
1001425c:	2300      	movs	r3, #0
1001425e:	46bb      	mov	fp, r7
10014260:	4698      	mov	r8, r3
10014262:	e689      	b.n	10013f78 <__aeabi_dmul+0x130>
10014264:	f000 fc2c 	bl	10014ac0 <__clzsi2>
10014268:	3020      	adds	r0, #32
1001426a:	e673      	b.n	10013f54 <__aeabi_dmul+0x10c>
1001426c:	2401      	movs	r4, #1
1001426e:	1aa6      	subs	r6, r4, r2
10014270:	2e38      	cmp	r6, #56	; 0x38
10014272:	dd07      	ble.n	10014284 <__aeabi_dmul+0x43c>
10014274:	2200      	movs	r2, #0
10014276:	400c      	ands	r4, r1
10014278:	2300      	movs	r3, #0
1001427a:	2500      	movs	r5, #0
1001427c:	4690      	mov	r8, r2
1001427e:	e649      	b.n	10013f14 <__aeabi_dmul+0xcc>
10014280:	9e02      	ldr	r6, [sp, #8]
10014282:	e7a3      	b.n	100141cc <__aeabi_dmul+0x384>
10014284:	2e1f      	cmp	r6, #31
10014286:	dc20      	bgt.n	100142ca <__aeabi_dmul+0x482>
10014288:	2220      	movs	r2, #32
1001428a:	002c      	movs	r4, r5
1001428c:	0018      	movs	r0, r3
1001428e:	1b92      	subs	r2, r2, r6
10014290:	40f0      	lsrs	r0, r6
10014292:	4094      	lsls	r4, r2
10014294:	4093      	lsls	r3, r2
10014296:	4304      	orrs	r4, r0
10014298:	1e58      	subs	r0, r3, #1
1001429a:	4183      	sbcs	r3, r0
1001429c:	431c      	orrs	r4, r3
1001429e:	40f5      	lsrs	r5, r6
100142a0:	0763      	lsls	r3, r4, #29
100142a2:	d009      	beq.n	100142b8 <__aeabi_dmul+0x470>
100142a4:	230f      	movs	r3, #15
100142a6:	4023      	ands	r3, r4
100142a8:	2b04      	cmp	r3, #4
100142aa:	d005      	beq.n	100142b8 <__aeabi_dmul+0x470>
100142ac:	0023      	movs	r3, r4
100142ae:	1d1c      	adds	r4, r3, #4
100142b0:	429c      	cmp	r4, r3
100142b2:	4192      	sbcs	r2, r2
100142b4:	4252      	negs	r2, r2
100142b6:	18ad      	adds	r5, r5, r2
100142b8:	022b      	lsls	r3, r5, #8
100142ba:	d51f      	bpl.n	100142fc <__aeabi_dmul+0x4b4>
100142bc:	2401      	movs	r4, #1
100142be:	2200      	movs	r2, #0
100142c0:	400c      	ands	r4, r1
100142c2:	2301      	movs	r3, #1
100142c4:	2500      	movs	r5, #0
100142c6:	4690      	mov	r8, r2
100142c8:	e624      	b.n	10013f14 <__aeabi_dmul+0xcc>
100142ca:	201f      	movs	r0, #31
100142cc:	002c      	movs	r4, r5
100142ce:	4240      	negs	r0, r0
100142d0:	1a82      	subs	r2, r0, r2
100142d2:	40d4      	lsrs	r4, r2
100142d4:	2e20      	cmp	r6, #32
100142d6:	d01c      	beq.n	10014312 <__aeabi_dmul+0x4ca>
100142d8:	2240      	movs	r2, #64	; 0x40
100142da:	1b96      	subs	r6, r2, r6
100142dc:	40b5      	lsls	r5, r6
100142de:	432b      	orrs	r3, r5
100142e0:	1e58      	subs	r0, r3, #1
100142e2:	4183      	sbcs	r3, r0
100142e4:	2007      	movs	r0, #7
100142e6:	4323      	orrs	r3, r4
100142e8:	4018      	ands	r0, r3
100142ea:	2500      	movs	r5, #0
100142ec:	2800      	cmp	r0, #0
100142ee:	d009      	beq.n	10014304 <__aeabi_dmul+0x4bc>
100142f0:	220f      	movs	r2, #15
100142f2:	2500      	movs	r5, #0
100142f4:	401a      	ands	r2, r3
100142f6:	001c      	movs	r4, r3
100142f8:	2a04      	cmp	r2, #4
100142fa:	d1d8      	bne.n	100142ae <__aeabi_dmul+0x466>
100142fc:	0023      	movs	r3, r4
100142fe:	0768      	lsls	r0, r5, #29
10014300:	026d      	lsls	r5, r5, #9
10014302:	0b2d      	lsrs	r5, r5, #12
10014304:	2401      	movs	r4, #1
10014306:	08db      	lsrs	r3, r3, #3
10014308:	4303      	orrs	r3, r0
1001430a:	4698      	mov	r8, r3
1001430c:	400c      	ands	r4, r1
1001430e:	2300      	movs	r3, #0
10014310:	e600      	b.n	10013f14 <__aeabi_dmul+0xcc>
10014312:	2500      	movs	r5, #0
10014314:	e7e3      	b.n	100142de <__aeabi_dmul+0x496>
10014316:	2280      	movs	r2, #128	; 0x80
10014318:	2401      	movs	r4, #1
1001431a:	0312      	lsls	r2, r2, #12
1001431c:	4315      	orrs	r5, r2
1001431e:	032d      	lsls	r5, r5, #12
10014320:	4698      	mov	r8, r3
10014322:	0b2d      	lsrs	r5, r5, #12
10014324:	400c      	ands	r4, r1
10014326:	4b04      	ldr	r3, [pc, #16]	; (10014338 <__aeabi_dmul+0x4f0>)
10014328:	e5f4      	b.n	10013f14 <__aeabi_dmul+0xcc>
1001432a:	46c0      	nop			; (mov r8, r8)
1001432c:	000003ff 	.word	0x000003ff
10014330:	feffffff 	.word	0xfeffffff
10014334:	000007fe 	.word	0x000007fe
10014338:	000007ff 	.word	0x000007ff

1001433c <__aeabi_dsub>:
1001433c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001433e:	4657      	mov	r7, sl
10014340:	464e      	mov	r6, r9
10014342:	4645      	mov	r5, r8
10014344:	b4e0      	push	{r5, r6, r7}
10014346:	000e      	movs	r6, r1
10014348:	0011      	movs	r1, r2
1001434a:	0ff2      	lsrs	r2, r6, #31
1001434c:	4692      	mov	sl, r2
1001434e:	00c5      	lsls	r5, r0, #3
10014350:	0f42      	lsrs	r2, r0, #29
10014352:	0318      	lsls	r0, r3, #12
10014354:	0337      	lsls	r7, r6, #12
10014356:	0074      	lsls	r4, r6, #1
10014358:	0a40      	lsrs	r0, r0, #9
1001435a:	0f4e      	lsrs	r6, r1, #29
1001435c:	0a7f      	lsrs	r7, r7, #9
1001435e:	4330      	orrs	r0, r6
10014360:	4ecf      	ldr	r6, [pc, #828]	; (100146a0 <__aeabi_dsub+0x364>)
10014362:	4317      	orrs	r7, r2
10014364:	005a      	lsls	r2, r3, #1
10014366:	0d64      	lsrs	r4, r4, #21
10014368:	0d52      	lsrs	r2, r2, #21
1001436a:	0fdb      	lsrs	r3, r3, #31
1001436c:	00c9      	lsls	r1, r1, #3
1001436e:	42b2      	cmp	r2, r6
10014370:	d100      	bne.n	10014374 <__aeabi_dsub+0x38>
10014372:	e0e5      	b.n	10014540 <__aeabi_dsub+0x204>
10014374:	2601      	movs	r6, #1
10014376:	4073      	eors	r3, r6
10014378:	1aa6      	subs	r6, r4, r2
1001437a:	46b4      	mov	ip, r6
1001437c:	4553      	cmp	r3, sl
1001437e:	d100      	bne.n	10014382 <__aeabi_dsub+0x46>
10014380:	e0af      	b.n	100144e2 <__aeabi_dsub+0x1a6>
10014382:	2e00      	cmp	r6, #0
10014384:	dc00      	bgt.n	10014388 <__aeabi_dsub+0x4c>
10014386:	e10d      	b.n	100145a4 <__aeabi_dsub+0x268>
10014388:	2a00      	cmp	r2, #0
1001438a:	d13a      	bne.n	10014402 <__aeabi_dsub+0xc6>
1001438c:	0003      	movs	r3, r0
1001438e:	430b      	orrs	r3, r1
10014390:	d000      	beq.n	10014394 <__aeabi_dsub+0x58>
10014392:	e0e4      	b.n	1001455e <__aeabi_dsub+0x222>
10014394:	076b      	lsls	r3, r5, #29
10014396:	d009      	beq.n	100143ac <__aeabi_dsub+0x70>
10014398:	230f      	movs	r3, #15
1001439a:	402b      	ands	r3, r5
1001439c:	2b04      	cmp	r3, #4
1001439e:	d005      	beq.n	100143ac <__aeabi_dsub+0x70>
100143a0:	1d2b      	adds	r3, r5, #4
100143a2:	42ab      	cmp	r3, r5
100143a4:	41ad      	sbcs	r5, r5
100143a6:	426d      	negs	r5, r5
100143a8:	197f      	adds	r7, r7, r5
100143aa:	001d      	movs	r5, r3
100143ac:	023b      	lsls	r3, r7, #8
100143ae:	d400      	bmi.n	100143b2 <__aeabi_dsub+0x76>
100143b0:	e088      	b.n	100144c4 <__aeabi_dsub+0x188>
100143b2:	4bbb      	ldr	r3, [pc, #748]	; (100146a0 <__aeabi_dsub+0x364>)
100143b4:	3401      	adds	r4, #1
100143b6:	429c      	cmp	r4, r3
100143b8:	d100      	bne.n	100143bc <__aeabi_dsub+0x80>
100143ba:	e110      	b.n	100145de <__aeabi_dsub+0x2a2>
100143bc:	003a      	movs	r2, r7
100143be:	4bb9      	ldr	r3, [pc, #740]	; (100146a4 <__aeabi_dsub+0x368>)
100143c0:	4651      	mov	r1, sl
100143c2:	401a      	ands	r2, r3
100143c4:	2301      	movs	r3, #1
100143c6:	0750      	lsls	r0, r2, #29
100143c8:	08ed      	lsrs	r5, r5, #3
100143ca:	0252      	lsls	r2, r2, #9
100143cc:	0564      	lsls	r4, r4, #21
100143ce:	4305      	orrs	r5, r0
100143d0:	0b12      	lsrs	r2, r2, #12
100143d2:	0d64      	lsrs	r4, r4, #21
100143d4:	400b      	ands	r3, r1
100143d6:	2100      	movs	r1, #0
100143d8:	0028      	movs	r0, r5
100143da:	0312      	lsls	r2, r2, #12
100143dc:	0d0d      	lsrs	r5, r1, #20
100143de:	0b12      	lsrs	r2, r2, #12
100143e0:	0564      	lsls	r4, r4, #21
100143e2:	052d      	lsls	r5, r5, #20
100143e4:	4315      	orrs	r5, r2
100143e6:	0862      	lsrs	r2, r4, #1
100143e8:	4caf      	ldr	r4, [pc, #700]	; (100146a8 <__aeabi_dsub+0x36c>)
100143ea:	07db      	lsls	r3, r3, #31
100143ec:	402c      	ands	r4, r5
100143ee:	4314      	orrs	r4, r2
100143f0:	0064      	lsls	r4, r4, #1
100143f2:	0864      	lsrs	r4, r4, #1
100143f4:	431c      	orrs	r4, r3
100143f6:	0021      	movs	r1, r4
100143f8:	bc1c      	pop	{r2, r3, r4}
100143fa:	4690      	mov	r8, r2
100143fc:	4699      	mov	r9, r3
100143fe:	46a2      	mov	sl, r4
10014400:	bdf0      	pop	{r4, r5, r6, r7, pc}
10014402:	4ba7      	ldr	r3, [pc, #668]	; (100146a0 <__aeabi_dsub+0x364>)
10014404:	429c      	cmp	r4, r3
10014406:	d0c5      	beq.n	10014394 <__aeabi_dsub+0x58>
10014408:	2380      	movs	r3, #128	; 0x80
1001440a:	041b      	lsls	r3, r3, #16
1001440c:	4318      	orrs	r0, r3
1001440e:	4663      	mov	r3, ip
10014410:	2b38      	cmp	r3, #56	; 0x38
10014412:	dd00      	ble.n	10014416 <__aeabi_dsub+0xda>
10014414:	e0fd      	b.n	10014612 <__aeabi_dsub+0x2d6>
10014416:	2b1f      	cmp	r3, #31
10014418:	dd00      	ble.n	1001441c <__aeabi_dsub+0xe0>
1001441a:	e130      	b.n	1001467e <__aeabi_dsub+0x342>
1001441c:	4662      	mov	r2, ip
1001441e:	2320      	movs	r3, #32
10014420:	1a9b      	subs	r3, r3, r2
10014422:	0002      	movs	r2, r0
10014424:	409a      	lsls	r2, r3
10014426:	4666      	mov	r6, ip
10014428:	4690      	mov	r8, r2
1001442a:	000a      	movs	r2, r1
1001442c:	4099      	lsls	r1, r3
1001442e:	40f2      	lsrs	r2, r6
10014430:	4646      	mov	r6, r8
10014432:	1e4b      	subs	r3, r1, #1
10014434:	4199      	sbcs	r1, r3
10014436:	4332      	orrs	r2, r6
10014438:	4311      	orrs	r1, r2
1001443a:	4663      	mov	r3, ip
1001443c:	0002      	movs	r2, r0
1001443e:	40da      	lsrs	r2, r3
10014440:	1a69      	subs	r1, r5, r1
10014442:	428d      	cmp	r5, r1
10014444:	419b      	sbcs	r3, r3
10014446:	000d      	movs	r5, r1
10014448:	1aba      	subs	r2, r7, r2
1001444a:	425b      	negs	r3, r3
1001444c:	1ad7      	subs	r7, r2, r3
1001444e:	023b      	lsls	r3, r7, #8
10014450:	d535      	bpl.n	100144be <__aeabi_dsub+0x182>
10014452:	027a      	lsls	r2, r7, #9
10014454:	0a53      	lsrs	r3, r2, #9
10014456:	4698      	mov	r8, r3
10014458:	4643      	mov	r3, r8
1001445a:	2b00      	cmp	r3, #0
1001445c:	d100      	bne.n	10014460 <__aeabi_dsub+0x124>
1001445e:	e0c4      	b.n	100145ea <__aeabi_dsub+0x2ae>
10014460:	4640      	mov	r0, r8
10014462:	f000 fb2d 	bl	10014ac0 <__clzsi2>
10014466:	0003      	movs	r3, r0
10014468:	3b08      	subs	r3, #8
1001446a:	2b1f      	cmp	r3, #31
1001446c:	dd00      	ble.n	10014470 <__aeabi_dsub+0x134>
1001446e:	e0c5      	b.n	100145fc <__aeabi_dsub+0x2c0>
10014470:	2220      	movs	r2, #32
10014472:	0029      	movs	r1, r5
10014474:	1ad2      	subs	r2, r2, r3
10014476:	4647      	mov	r7, r8
10014478:	40d1      	lsrs	r1, r2
1001447a:	409f      	lsls	r7, r3
1001447c:	000a      	movs	r2, r1
1001447e:	409d      	lsls	r5, r3
10014480:	433a      	orrs	r2, r7
10014482:	429c      	cmp	r4, r3
10014484:	dd00      	ble.n	10014488 <__aeabi_dsub+0x14c>
10014486:	e0c0      	b.n	1001460a <__aeabi_dsub+0x2ce>
10014488:	1b1c      	subs	r4, r3, r4
1001448a:	1c63      	adds	r3, r4, #1
1001448c:	2b1f      	cmp	r3, #31
1001448e:	dd00      	ble.n	10014492 <__aeabi_dsub+0x156>
10014490:	e0e4      	b.n	1001465c <__aeabi_dsub+0x320>
10014492:	2120      	movs	r1, #32
10014494:	0014      	movs	r4, r2
10014496:	0028      	movs	r0, r5
10014498:	1ac9      	subs	r1, r1, r3
1001449a:	40d8      	lsrs	r0, r3
1001449c:	408c      	lsls	r4, r1
1001449e:	408d      	lsls	r5, r1
100144a0:	4304      	orrs	r4, r0
100144a2:	40da      	lsrs	r2, r3
100144a4:	1e68      	subs	r0, r5, #1
100144a6:	4185      	sbcs	r5, r0
100144a8:	0017      	movs	r7, r2
100144aa:	4325      	orrs	r5, r4
100144ac:	2400      	movs	r4, #0
100144ae:	e771      	b.n	10014394 <__aeabi_dsub+0x58>
100144b0:	4642      	mov	r2, r8
100144b2:	4663      	mov	r3, ip
100144b4:	431a      	orrs	r2, r3
100144b6:	d100      	bne.n	100144ba <__aeabi_dsub+0x17e>
100144b8:	e24c      	b.n	10014954 <__aeabi_dsub+0x618>
100144ba:	4667      	mov	r7, ip
100144bc:	4645      	mov	r5, r8
100144be:	076b      	lsls	r3, r5, #29
100144c0:	d000      	beq.n	100144c4 <__aeabi_dsub+0x188>
100144c2:	e769      	b.n	10014398 <__aeabi_dsub+0x5c>
100144c4:	2301      	movs	r3, #1
100144c6:	4651      	mov	r1, sl
100144c8:	0778      	lsls	r0, r7, #29
100144ca:	08ed      	lsrs	r5, r5, #3
100144cc:	08fa      	lsrs	r2, r7, #3
100144ce:	400b      	ands	r3, r1
100144d0:	4305      	orrs	r5, r0
100144d2:	4973      	ldr	r1, [pc, #460]	; (100146a0 <__aeabi_dsub+0x364>)
100144d4:	428c      	cmp	r4, r1
100144d6:	d038      	beq.n	1001454a <__aeabi_dsub+0x20e>
100144d8:	0312      	lsls	r2, r2, #12
100144da:	0564      	lsls	r4, r4, #21
100144dc:	0b12      	lsrs	r2, r2, #12
100144de:	0d64      	lsrs	r4, r4, #21
100144e0:	e779      	b.n	100143d6 <__aeabi_dsub+0x9a>
100144e2:	2e00      	cmp	r6, #0
100144e4:	dc00      	bgt.n	100144e8 <__aeabi_dsub+0x1ac>
100144e6:	e09a      	b.n	1001461e <__aeabi_dsub+0x2e2>
100144e8:	2a00      	cmp	r2, #0
100144ea:	d047      	beq.n	1001457c <__aeabi_dsub+0x240>
100144ec:	4a6c      	ldr	r2, [pc, #432]	; (100146a0 <__aeabi_dsub+0x364>)
100144ee:	4294      	cmp	r4, r2
100144f0:	d100      	bne.n	100144f4 <__aeabi_dsub+0x1b8>
100144f2:	e74f      	b.n	10014394 <__aeabi_dsub+0x58>
100144f4:	2280      	movs	r2, #128	; 0x80
100144f6:	0412      	lsls	r2, r2, #16
100144f8:	4310      	orrs	r0, r2
100144fa:	4662      	mov	r2, ip
100144fc:	2a38      	cmp	r2, #56	; 0x38
100144fe:	dc00      	bgt.n	10014502 <__aeabi_dsub+0x1c6>
10014500:	e108      	b.n	10014714 <__aeabi_dsub+0x3d8>
10014502:	4301      	orrs	r1, r0
10014504:	1e48      	subs	r0, r1, #1
10014506:	4181      	sbcs	r1, r0
10014508:	2200      	movs	r2, #0
1001450a:	b2c9      	uxtb	r1, r1
1001450c:	1949      	adds	r1, r1, r5
1001450e:	19d2      	adds	r2, r2, r7
10014510:	42a9      	cmp	r1, r5
10014512:	41bf      	sbcs	r7, r7
10014514:	000d      	movs	r5, r1
10014516:	427f      	negs	r7, r7
10014518:	18bf      	adds	r7, r7, r2
1001451a:	023a      	lsls	r2, r7, #8
1001451c:	d400      	bmi.n	10014520 <__aeabi_dsub+0x1e4>
1001451e:	e142      	b.n	100147a6 <__aeabi_dsub+0x46a>
10014520:	4a5f      	ldr	r2, [pc, #380]	; (100146a0 <__aeabi_dsub+0x364>)
10014522:	3401      	adds	r4, #1
10014524:	4294      	cmp	r4, r2
10014526:	d100      	bne.n	1001452a <__aeabi_dsub+0x1ee>
10014528:	e14e      	b.n	100147c8 <__aeabi_dsub+0x48c>
1001452a:	2001      	movs	r0, #1
1001452c:	4a5d      	ldr	r2, [pc, #372]	; (100146a4 <__aeabi_dsub+0x368>)
1001452e:	0869      	lsrs	r1, r5, #1
10014530:	403a      	ands	r2, r7
10014532:	4028      	ands	r0, r5
10014534:	4308      	orrs	r0, r1
10014536:	07d5      	lsls	r5, r2, #31
10014538:	4305      	orrs	r5, r0
1001453a:	0857      	lsrs	r7, r2, #1
1001453c:	469a      	mov	sl, r3
1001453e:	e729      	b.n	10014394 <__aeabi_dsub+0x58>
10014540:	0006      	movs	r6, r0
10014542:	430e      	orrs	r6, r1
10014544:	d000      	beq.n	10014548 <__aeabi_dsub+0x20c>
10014546:	e717      	b.n	10014378 <__aeabi_dsub+0x3c>
10014548:	e714      	b.n	10014374 <__aeabi_dsub+0x38>
1001454a:	0029      	movs	r1, r5
1001454c:	4311      	orrs	r1, r2
1001454e:	d100      	bne.n	10014552 <__aeabi_dsub+0x216>
10014550:	e1f9      	b.n	10014946 <__aeabi_dsub+0x60a>
10014552:	2180      	movs	r1, #128	; 0x80
10014554:	0309      	lsls	r1, r1, #12
10014556:	430a      	orrs	r2, r1
10014558:	0312      	lsls	r2, r2, #12
1001455a:	0b12      	lsrs	r2, r2, #12
1001455c:	e73b      	b.n	100143d6 <__aeabi_dsub+0x9a>
1001455e:	2301      	movs	r3, #1
10014560:	425b      	negs	r3, r3
10014562:	4698      	mov	r8, r3
10014564:	44c4      	add	ip, r8
10014566:	4663      	mov	r3, ip
10014568:	2b00      	cmp	r3, #0
1001456a:	d172      	bne.n	10014652 <__aeabi_dsub+0x316>
1001456c:	1a69      	subs	r1, r5, r1
1001456e:	428d      	cmp	r5, r1
10014570:	419b      	sbcs	r3, r3
10014572:	1a3f      	subs	r7, r7, r0
10014574:	425b      	negs	r3, r3
10014576:	1aff      	subs	r7, r7, r3
10014578:	000d      	movs	r5, r1
1001457a:	e768      	b.n	1001444e <__aeabi_dsub+0x112>
1001457c:	0002      	movs	r2, r0
1001457e:	430a      	orrs	r2, r1
10014580:	d100      	bne.n	10014584 <__aeabi_dsub+0x248>
10014582:	e707      	b.n	10014394 <__aeabi_dsub+0x58>
10014584:	2201      	movs	r2, #1
10014586:	4252      	negs	r2, r2
10014588:	4690      	mov	r8, r2
1001458a:	44c4      	add	ip, r8
1001458c:	4662      	mov	r2, ip
1001458e:	2a00      	cmp	r2, #0
10014590:	d000      	beq.n	10014594 <__aeabi_dsub+0x258>
10014592:	e0e6      	b.n	10014762 <__aeabi_dsub+0x426>
10014594:	1869      	adds	r1, r5, r1
10014596:	42a9      	cmp	r1, r5
10014598:	41b6      	sbcs	r6, r6
1001459a:	183f      	adds	r7, r7, r0
1001459c:	4276      	negs	r6, r6
1001459e:	19f7      	adds	r7, r6, r7
100145a0:	000d      	movs	r5, r1
100145a2:	e7ba      	b.n	1001451a <__aeabi_dsub+0x1de>
100145a4:	2e00      	cmp	r6, #0
100145a6:	d000      	beq.n	100145aa <__aeabi_dsub+0x26e>
100145a8:	e080      	b.n	100146ac <__aeabi_dsub+0x370>
100145aa:	1c62      	adds	r2, r4, #1
100145ac:	0552      	lsls	r2, r2, #21
100145ae:	0d52      	lsrs	r2, r2, #21
100145b0:	2a01      	cmp	r2, #1
100145b2:	dc00      	bgt.n	100145b6 <__aeabi_dsub+0x27a>
100145b4:	e0f9      	b.n	100147aa <__aeabi_dsub+0x46e>
100145b6:	1a6a      	subs	r2, r5, r1
100145b8:	4691      	mov	r9, r2
100145ba:	454d      	cmp	r5, r9
100145bc:	41b6      	sbcs	r6, r6
100145be:	1a3a      	subs	r2, r7, r0
100145c0:	4276      	negs	r6, r6
100145c2:	1b92      	subs	r2, r2, r6
100145c4:	4690      	mov	r8, r2
100145c6:	0212      	lsls	r2, r2, #8
100145c8:	d400      	bmi.n	100145cc <__aeabi_dsub+0x290>
100145ca:	e099      	b.n	10014700 <__aeabi_dsub+0x3c4>
100145cc:	1b4d      	subs	r5, r1, r5
100145ce:	42a9      	cmp	r1, r5
100145d0:	4189      	sbcs	r1, r1
100145d2:	1bc7      	subs	r7, r0, r7
100145d4:	4249      	negs	r1, r1
100145d6:	1a7a      	subs	r2, r7, r1
100145d8:	4690      	mov	r8, r2
100145da:	469a      	mov	sl, r3
100145dc:	e73c      	b.n	10014458 <__aeabi_dsub+0x11c>
100145de:	4652      	mov	r2, sl
100145e0:	2301      	movs	r3, #1
100145e2:	2500      	movs	r5, #0
100145e4:	4013      	ands	r3, r2
100145e6:	2200      	movs	r2, #0
100145e8:	e6f5      	b.n	100143d6 <__aeabi_dsub+0x9a>
100145ea:	0028      	movs	r0, r5
100145ec:	f000 fa68 	bl	10014ac0 <__clzsi2>
100145f0:	3020      	adds	r0, #32
100145f2:	0003      	movs	r3, r0
100145f4:	3b08      	subs	r3, #8
100145f6:	2b1f      	cmp	r3, #31
100145f8:	dc00      	bgt.n	100145fc <__aeabi_dsub+0x2c0>
100145fa:	e739      	b.n	10014470 <__aeabi_dsub+0x134>
100145fc:	002a      	movs	r2, r5
100145fe:	3828      	subs	r0, #40	; 0x28
10014600:	4082      	lsls	r2, r0
10014602:	2500      	movs	r5, #0
10014604:	429c      	cmp	r4, r3
10014606:	dc00      	bgt.n	1001460a <__aeabi_dsub+0x2ce>
10014608:	e73e      	b.n	10014488 <__aeabi_dsub+0x14c>
1001460a:	4f26      	ldr	r7, [pc, #152]	; (100146a4 <__aeabi_dsub+0x368>)
1001460c:	1ae4      	subs	r4, r4, r3
1001460e:	4017      	ands	r7, r2
10014610:	e6c0      	b.n	10014394 <__aeabi_dsub+0x58>
10014612:	4301      	orrs	r1, r0
10014614:	1e48      	subs	r0, r1, #1
10014616:	4181      	sbcs	r1, r0
10014618:	2200      	movs	r2, #0
1001461a:	b2c9      	uxtb	r1, r1
1001461c:	e710      	b.n	10014440 <__aeabi_dsub+0x104>
1001461e:	2e00      	cmp	r6, #0
10014620:	d000      	beq.n	10014624 <__aeabi_dsub+0x2e8>
10014622:	e0f1      	b.n	10014808 <__aeabi_dsub+0x4cc>
10014624:	1c62      	adds	r2, r4, #1
10014626:	4694      	mov	ip, r2
10014628:	0552      	lsls	r2, r2, #21
1001462a:	0d52      	lsrs	r2, r2, #21
1001462c:	2a01      	cmp	r2, #1
1001462e:	dc00      	bgt.n	10014632 <__aeabi_dsub+0x2f6>
10014630:	e0a0      	b.n	10014774 <__aeabi_dsub+0x438>
10014632:	4a1b      	ldr	r2, [pc, #108]	; (100146a0 <__aeabi_dsub+0x364>)
10014634:	4594      	cmp	ip, r2
10014636:	d100      	bne.n	1001463a <__aeabi_dsub+0x2fe>
10014638:	e0c5      	b.n	100147c6 <__aeabi_dsub+0x48a>
1001463a:	1869      	adds	r1, r5, r1
1001463c:	42a9      	cmp	r1, r5
1001463e:	4192      	sbcs	r2, r2
10014640:	183f      	adds	r7, r7, r0
10014642:	4252      	negs	r2, r2
10014644:	19d2      	adds	r2, r2, r7
10014646:	0849      	lsrs	r1, r1, #1
10014648:	07d5      	lsls	r5, r2, #31
1001464a:	430d      	orrs	r5, r1
1001464c:	0857      	lsrs	r7, r2, #1
1001464e:	4664      	mov	r4, ip
10014650:	e6a0      	b.n	10014394 <__aeabi_dsub+0x58>
10014652:	4b13      	ldr	r3, [pc, #76]	; (100146a0 <__aeabi_dsub+0x364>)
10014654:	429c      	cmp	r4, r3
10014656:	d000      	beq.n	1001465a <__aeabi_dsub+0x31e>
10014658:	e6d9      	b.n	1001440e <__aeabi_dsub+0xd2>
1001465a:	e69b      	b.n	10014394 <__aeabi_dsub+0x58>
1001465c:	0011      	movs	r1, r2
1001465e:	3c1f      	subs	r4, #31
10014660:	40e1      	lsrs	r1, r4
10014662:	000c      	movs	r4, r1
10014664:	2b20      	cmp	r3, #32
10014666:	d100      	bne.n	1001466a <__aeabi_dsub+0x32e>
10014668:	e080      	b.n	1001476c <__aeabi_dsub+0x430>
1001466a:	2140      	movs	r1, #64	; 0x40
1001466c:	1acb      	subs	r3, r1, r3
1001466e:	409a      	lsls	r2, r3
10014670:	4315      	orrs	r5, r2
10014672:	1e6a      	subs	r2, r5, #1
10014674:	4195      	sbcs	r5, r2
10014676:	2700      	movs	r7, #0
10014678:	4325      	orrs	r5, r4
1001467a:	2400      	movs	r4, #0
1001467c:	e71f      	b.n	100144be <__aeabi_dsub+0x182>
1001467e:	4663      	mov	r3, ip
10014680:	0002      	movs	r2, r0
10014682:	3b20      	subs	r3, #32
10014684:	40da      	lsrs	r2, r3
10014686:	4663      	mov	r3, ip
10014688:	2b20      	cmp	r3, #32
1001468a:	d071      	beq.n	10014770 <__aeabi_dsub+0x434>
1001468c:	2340      	movs	r3, #64	; 0x40
1001468e:	4666      	mov	r6, ip
10014690:	1b9b      	subs	r3, r3, r6
10014692:	4098      	lsls	r0, r3
10014694:	4301      	orrs	r1, r0
10014696:	1e48      	subs	r0, r1, #1
10014698:	4181      	sbcs	r1, r0
1001469a:	4311      	orrs	r1, r2
1001469c:	2200      	movs	r2, #0
1001469e:	e6cf      	b.n	10014440 <__aeabi_dsub+0x104>
100146a0:	000007ff 	.word	0x000007ff
100146a4:	ff7fffff 	.word	0xff7fffff
100146a8:	800fffff 	.word	0x800fffff
100146ac:	2c00      	cmp	r4, #0
100146ae:	d048      	beq.n	10014742 <__aeabi_dsub+0x406>
100146b0:	4cca      	ldr	r4, [pc, #808]	; (100149dc <__aeabi_dsub+0x6a0>)
100146b2:	42a2      	cmp	r2, r4
100146b4:	d100      	bne.n	100146b8 <__aeabi_dsub+0x37c>
100146b6:	e0a2      	b.n	100147fe <__aeabi_dsub+0x4c2>
100146b8:	4274      	negs	r4, r6
100146ba:	46a1      	mov	r9, r4
100146bc:	2480      	movs	r4, #128	; 0x80
100146be:	0424      	lsls	r4, r4, #16
100146c0:	4327      	orrs	r7, r4
100146c2:	464c      	mov	r4, r9
100146c4:	2c38      	cmp	r4, #56	; 0x38
100146c6:	dd00      	ble.n	100146ca <__aeabi_dsub+0x38e>
100146c8:	e0db      	b.n	10014882 <__aeabi_dsub+0x546>
100146ca:	2c1f      	cmp	r4, #31
100146cc:	dd00      	ble.n	100146d0 <__aeabi_dsub+0x394>
100146ce:	e144      	b.n	1001495a <__aeabi_dsub+0x61e>
100146d0:	464e      	mov	r6, r9
100146d2:	2420      	movs	r4, #32
100146d4:	1ba4      	subs	r4, r4, r6
100146d6:	003e      	movs	r6, r7
100146d8:	40a6      	lsls	r6, r4
100146da:	46a2      	mov	sl, r4
100146dc:	46b0      	mov	r8, r6
100146de:	464c      	mov	r4, r9
100146e0:	002e      	movs	r6, r5
100146e2:	40e6      	lsrs	r6, r4
100146e4:	46b4      	mov	ip, r6
100146e6:	4646      	mov	r6, r8
100146e8:	4664      	mov	r4, ip
100146ea:	4326      	orrs	r6, r4
100146ec:	4654      	mov	r4, sl
100146ee:	40a5      	lsls	r5, r4
100146f0:	1e6c      	subs	r4, r5, #1
100146f2:	41a5      	sbcs	r5, r4
100146f4:	0034      	movs	r4, r6
100146f6:	432c      	orrs	r4, r5
100146f8:	464d      	mov	r5, r9
100146fa:	40ef      	lsrs	r7, r5
100146fc:	1b0d      	subs	r5, r1, r4
100146fe:	e028      	b.n	10014752 <__aeabi_dsub+0x416>
10014700:	464a      	mov	r2, r9
10014702:	4643      	mov	r3, r8
10014704:	464d      	mov	r5, r9
10014706:	431a      	orrs	r2, r3
10014708:	d000      	beq.n	1001470c <__aeabi_dsub+0x3d0>
1001470a:	e6a5      	b.n	10014458 <__aeabi_dsub+0x11c>
1001470c:	2300      	movs	r3, #0
1001470e:	2400      	movs	r4, #0
10014710:	2500      	movs	r5, #0
10014712:	e6de      	b.n	100144d2 <__aeabi_dsub+0x196>
10014714:	2a1f      	cmp	r2, #31
10014716:	dc5a      	bgt.n	100147ce <__aeabi_dsub+0x492>
10014718:	4666      	mov	r6, ip
1001471a:	2220      	movs	r2, #32
1001471c:	1b92      	subs	r2, r2, r6
1001471e:	0006      	movs	r6, r0
10014720:	4096      	lsls	r6, r2
10014722:	4691      	mov	r9, r2
10014724:	46b0      	mov	r8, r6
10014726:	4662      	mov	r2, ip
10014728:	000e      	movs	r6, r1
1001472a:	40d6      	lsrs	r6, r2
1001472c:	4642      	mov	r2, r8
1001472e:	4316      	orrs	r6, r2
10014730:	464a      	mov	r2, r9
10014732:	4091      	lsls	r1, r2
10014734:	1e4a      	subs	r2, r1, #1
10014736:	4191      	sbcs	r1, r2
10014738:	0002      	movs	r2, r0
1001473a:	4660      	mov	r0, ip
1001473c:	4331      	orrs	r1, r6
1001473e:	40c2      	lsrs	r2, r0
10014740:	e6e4      	b.n	1001450c <__aeabi_dsub+0x1d0>
10014742:	003c      	movs	r4, r7
10014744:	432c      	orrs	r4, r5
10014746:	d05a      	beq.n	100147fe <__aeabi_dsub+0x4c2>
10014748:	43f4      	mvns	r4, r6
1001474a:	46a1      	mov	r9, r4
1001474c:	2c00      	cmp	r4, #0
1001474e:	d152      	bne.n	100147f6 <__aeabi_dsub+0x4ba>
10014750:	1b4d      	subs	r5, r1, r5
10014752:	42a9      	cmp	r1, r5
10014754:	4189      	sbcs	r1, r1
10014756:	1bc7      	subs	r7, r0, r7
10014758:	4249      	negs	r1, r1
1001475a:	1a7f      	subs	r7, r7, r1
1001475c:	0014      	movs	r4, r2
1001475e:	469a      	mov	sl, r3
10014760:	e675      	b.n	1001444e <__aeabi_dsub+0x112>
10014762:	4a9e      	ldr	r2, [pc, #632]	; (100149dc <__aeabi_dsub+0x6a0>)
10014764:	4294      	cmp	r4, r2
10014766:	d000      	beq.n	1001476a <__aeabi_dsub+0x42e>
10014768:	e6c7      	b.n	100144fa <__aeabi_dsub+0x1be>
1001476a:	e613      	b.n	10014394 <__aeabi_dsub+0x58>
1001476c:	2200      	movs	r2, #0
1001476e:	e77f      	b.n	10014670 <__aeabi_dsub+0x334>
10014770:	2000      	movs	r0, #0
10014772:	e78f      	b.n	10014694 <__aeabi_dsub+0x358>
10014774:	2c00      	cmp	r4, #0
10014776:	d000      	beq.n	1001477a <__aeabi_dsub+0x43e>
10014778:	e0c8      	b.n	1001490c <__aeabi_dsub+0x5d0>
1001477a:	003b      	movs	r3, r7
1001477c:	432b      	orrs	r3, r5
1001477e:	d100      	bne.n	10014782 <__aeabi_dsub+0x446>
10014780:	e10f      	b.n	100149a2 <__aeabi_dsub+0x666>
10014782:	0003      	movs	r3, r0
10014784:	430b      	orrs	r3, r1
10014786:	d100      	bne.n	1001478a <__aeabi_dsub+0x44e>
10014788:	e604      	b.n	10014394 <__aeabi_dsub+0x58>
1001478a:	1869      	adds	r1, r5, r1
1001478c:	42a9      	cmp	r1, r5
1001478e:	419b      	sbcs	r3, r3
10014790:	183f      	adds	r7, r7, r0
10014792:	425b      	negs	r3, r3
10014794:	19df      	adds	r7, r3, r7
10014796:	023b      	lsls	r3, r7, #8
10014798:	d400      	bmi.n	1001479c <__aeabi_dsub+0x460>
1001479a:	e11a      	b.n	100149d2 <__aeabi_dsub+0x696>
1001479c:	4b90      	ldr	r3, [pc, #576]	; (100149e0 <__aeabi_dsub+0x6a4>)
1001479e:	000d      	movs	r5, r1
100147a0:	401f      	ands	r7, r3
100147a2:	4664      	mov	r4, ip
100147a4:	e5f6      	b.n	10014394 <__aeabi_dsub+0x58>
100147a6:	469a      	mov	sl, r3
100147a8:	e689      	b.n	100144be <__aeabi_dsub+0x182>
100147aa:	003a      	movs	r2, r7
100147ac:	432a      	orrs	r2, r5
100147ae:	2c00      	cmp	r4, #0
100147b0:	d15c      	bne.n	1001486c <__aeabi_dsub+0x530>
100147b2:	2a00      	cmp	r2, #0
100147b4:	d175      	bne.n	100148a2 <__aeabi_dsub+0x566>
100147b6:	0002      	movs	r2, r0
100147b8:	430a      	orrs	r2, r1
100147ba:	d100      	bne.n	100147be <__aeabi_dsub+0x482>
100147bc:	e0ca      	b.n	10014954 <__aeabi_dsub+0x618>
100147be:	0007      	movs	r7, r0
100147c0:	000d      	movs	r5, r1
100147c2:	469a      	mov	sl, r3
100147c4:	e5e6      	b.n	10014394 <__aeabi_dsub+0x58>
100147c6:	4664      	mov	r4, ip
100147c8:	2200      	movs	r2, #0
100147ca:	2500      	movs	r5, #0
100147cc:	e681      	b.n	100144d2 <__aeabi_dsub+0x196>
100147ce:	4662      	mov	r2, ip
100147d0:	0006      	movs	r6, r0
100147d2:	3a20      	subs	r2, #32
100147d4:	40d6      	lsrs	r6, r2
100147d6:	4662      	mov	r2, ip
100147d8:	46b0      	mov	r8, r6
100147da:	2a20      	cmp	r2, #32
100147dc:	d100      	bne.n	100147e0 <__aeabi_dsub+0x4a4>
100147de:	e0b7      	b.n	10014950 <__aeabi_dsub+0x614>
100147e0:	2240      	movs	r2, #64	; 0x40
100147e2:	4666      	mov	r6, ip
100147e4:	1b92      	subs	r2, r2, r6
100147e6:	4090      	lsls	r0, r2
100147e8:	4301      	orrs	r1, r0
100147ea:	4642      	mov	r2, r8
100147ec:	1e48      	subs	r0, r1, #1
100147ee:	4181      	sbcs	r1, r0
100147f0:	4311      	orrs	r1, r2
100147f2:	2200      	movs	r2, #0
100147f4:	e68a      	b.n	1001450c <__aeabi_dsub+0x1d0>
100147f6:	4c79      	ldr	r4, [pc, #484]	; (100149dc <__aeabi_dsub+0x6a0>)
100147f8:	42a2      	cmp	r2, r4
100147fa:	d000      	beq.n	100147fe <__aeabi_dsub+0x4c2>
100147fc:	e761      	b.n	100146c2 <__aeabi_dsub+0x386>
100147fe:	0007      	movs	r7, r0
10014800:	000d      	movs	r5, r1
10014802:	0014      	movs	r4, r2
10014804:	469a      	mov	sl, r3
10014806:	e5c5      	b.n	10014394 <__aeabi_dsub+0x58>
10014808:	2c00      	cmp	r4, #0
1001480a:	d141      	bne.n	10014890 <__aeabi_dsub+0x554>
1001480c:	003c      	movs	r4, r7
1001480e:	432c      	orrs	r4, r5
10014810:	d078      	beq.n	10014904 <__aeabi_dsub+0x5c8>
10014812:	43f4      	mvns	r4, r6
10014814:	46a1      	mov	r9, r4
10014816:	2c00      	cmp	r4, #0
10014818:	d020      	beq.n	1001485c <__aeabi_dsub+0x520>
1001481a:	4c70      	ldr	r4, [pc, #448]	; (100149dc <__aeabi_dsub+0x6a0>)
1001481c:	42a2      	cmp	r2, r4
1001481e:	d071      	beq.n	10014904 <__aeabi_dsub+0x5c8>
10014820:	464c      	mov	r4, r9
10014822:	2c38      	cmp	r4, #56	; 0x38
10014824:	dd00      	ble.n	10014828 <__aeabi_dsub+0x4ec>
10014826:	e0b2      	b.n	1001498e <__aeabi_dsub+0x652>
10014828:	2c1f      	cmp	r4, #31
1001482a:	dd00      	ble.n	1001482e <__aeabi_dsub+0x4f2>
1001482c:	e0bc      	b.n	100149a8 <__aeabi_dsub+0x66c>
1001482e:	2620      	movs	r6, #32
10014830:	1b34      	subs	r4, r6, r4
10014832:	46a2      	mov	sl, r4
10014834:	003c      	movs	r4, r7
10014836:	4656      	mov	r6, sl
10014838:	40b4      	lsls	r4, r6
1001483a:	464e      	mov	r6, r9
1001483c:	46a0      	mov	r8, r4
1001483e:	002c      	movs	r4, r5
10014840:	40f4      	lsrs	r4, r6
10014842:	46a4      	mov	ip, r4
10014844:	4644      	mov	r4, r8
10014846:	4666      	mov	r6, ip
10014848:	4334      	orrs	r4, r6
1001484a:	46a4      	mov	ip, r4
1001484c:	4654      	mov	r4, sl
1001484e:	40a5      	lsls	r5, r4
10014850:	4664      	mov	r4, ip
10014852:	1e6e      	subs	r6, r5, #1
10014854:	41b5      	sbcs	r5, r6
10014856:	4325      	orrs	r5, r4
10014858:	464c      	mov	r4, r9
1001485a:	40e7      	lsrs	r7, r4
1001485c:	186d      	adds	r5, r5, r1
1001485e:	428d      	cmp	r5, r1
10014860:	4189      	sbcs	r1, r1
10014862:	183f      	adds	r7, r7, r0
10014864:	4249      	negs	r1, r1
10014866:	19cf      	adds	r7, r1, r7
10014868:	0014      	movs	r4, r2
1001486a:	e656      	b.n	1001451a <__aeabi_dsub+0x1de>
1001486c:	2a00      	cmp	r2, #0
1001486e:	d12f      	bne.n	100148d0 <__aeabi_dsub+0x594>
10014870:	0002      	movs	r2, r0
10014872:	430a      	orrs	r2, r1
10014874:	d100      	bne.n	10014878 <__aeabi_dsub+0x53c>
10014876:	e084      	b.n	10014982 <__aeabi_dsub+0x646>
10014878:	0007      	movs	r7, r0
1001487a:	000d      	movs	r5, r1
1001487c:	469a      	mov	sl, r3
1001487e:	4c57      	ldr	r4, [pc, #348]	; (100149dc <__aeabi_dsub+0x6a0>)
10014880:	e588      	b.n	10014394 <__aeabi_dsub+0x58>
10014882:	433d      	orrs	r5, r7
10014884:	1e6f      	subs	r7, r5, #1
10014886:	41bd      	sbcs	r5, r7
10014888:	b2ec      	uxtb	r4, r5
1001488a:	2700      	movs	r7, #0
1001488c:	1b0d      	subs	r5, r1, r4
1001488e:	e760      	b.n	10014752 <__aeabi_dsub+0x416>
10014890:	4c52      	ldr	r4, [pc, #328]	; (100149dc <__aeabi_dsub+0x6a0>)
10014892:	42a2      	cmp	r2, r4
10014894:	d036      	beq.n	10014904 <__aeabi_dsub+0x5c8>
10014896:	4274      	negs	r4, r6
10014898:	2680      	movs	r6, #128	; 0x80
1001489a:	0436      	lsls	r6, r6, #16
1001489c:	46a1      	mov	r9, r4
1001489e:	4337      	orrs	r7, r6
100148a0:	e7be      	b.n	10014820 <__aeabi_dsub+0x4e4>
100148a2:	0002      	movs	r2, r0
100148a4:	430a      	orrs	r2, r1
100148a6:	d100      	bne.n	100148aa <__aeabi_dsub+0x56e>
100148a8:	e574      	b.n	10014394 <__aeabi_dsub+0x58>
100148aa:	1a6a      	subs	r2, r5, r1
100148ac:	4690      	mov	r8, r2
100148ae:	4545      	cmp	r5, r8
100148b0:	41b6      	sbcs	r6, r6
100148b2:	1a3a      	subs	r2, r7, r0
100148b4:	4276      	negs	r6, r6
100148b6:	1b92      	subs	r2, r2, r6
100148b8:	4694      	mov	ip, r2
100148ba:	0212      	lsls	r2, r2, #8
100148bc:	d400      	bmi.n	100148c0 <__aeabi_dsub+0x584>
100148be:	e5f7      	b.n	100144b0 <__aeabi_dsub+0x174>
100148c0:	1b4d      	subs	r5, r1, r5
100148c2:	42a9      	cmp	r1, r5
100148c4:	4189      	sbcs	r1, r1
100148c6:	1bc7      	subs	r7, r0, r7
100148c8:	4249      	negs	r1, r1
100148ca:	1a7f      	subs	r7, r7, r1
100148cc:	469a      	mov	sl, r3
100148ce:	e561      	b.n	10014394 <__aeabi_dsub+0x58>
100148d0:	0002      	movs	r2, r0
100148d2:	430a      	orrs	r2, r1
100148d4:	d03a      	beq.n	1001494c <__aeabi_dsub+0x610>
100148d6:	08ed      	lsrs	r5, r5, #3
100148d8:	077c      	lsls	r4, r7, #29
100148da:	432c      	orrs	r4, r5
100148dc:	2580      	movs	r5, #128	; 0x80
100148de:	08fa      	lsrs	r2, r7, #3
100148e0:	032d      	lsls	r5, r5, #12
100148e2:	422a      	tst	r2, r5
100148e4:	d008      	beq.n	100148f8 <__aeabi_dsub+0x5bc>
100148e6:	08c7      	lsrs	r7, r0, #3
100148e8:	422f      	tst	r7, r5
100148ea:	d105      	bne.n	100148f8 <__aeabi_dsub+0x5bc>
100148ec:	0745      	lsls	r5, r0, #29
100148ee:	002c      	movs	r4, r5
100148f0:	003a      	movs	r2, r7
100148f2:	469a      	mov	sl, r3
100148f4:	08c9      	lsrs	r1, r1, #3
100148f6:	430c      	orrs	r4, r1
100148f8:	0f67      	lsrs	r7, r4, #29
100148fa:	00d2      	lsls	r2, r2, #3
100148fc:	00e5      	lsls	r5, r4, #3
100148fe:	4317      	orrs	r7, r2
10014900:	4c36      	ldr	r4, [pc, #216]	; (100149dc <__aeabi_dsub+0x6a0>)
10014902:	e547      	b.n	10014394 <__aeabi_dsub+0x58>
10014904:	0007      	movs	r7, r0
10014906:	000d      	movs	r5, r1
10014908:	0014      	movs	r4, r2
1001490a:	e543      	b.n	10014394 <__aeabi_dsub+0x58>
1001490c:	003a      	movs	r2, r7
1001490e:	432a      	orrs	r2, r5
10014910:	d043      	beq.n	1001499a <__aeabi_dsub+0x65e>
10014912:	0002      	movs	r2, r0
10014914:	430a      	orrs	r2, r1
10014916:	d019      	beq.n	1001494c <__aeabi_dsub+0x610>
10014918:	08ed      	lsrs	r5, r5, #3
1001491a:	077c      	lsls	r4, r7, #29
1001491c:	432c      	orrs	r4, r5
1001491e:	2580      	movs	r5, #128	; 0x80
10014920:	08fa      	lsrs	r2, r7, #3
10014922:	032d      	lsls	r5, r5, #12
10014924:	422a      	tst	r2, r5
10014926:	d007      	beq.n	10014938 <__aeabi_dsub+0x5fc>
10014928:	08c6      	lsrs	r6, r0, #3
1001492a:	422e      	tst	r6, r5
1001492c:	d104      	bne.n	10014938 <__aeabi_dsub+0x5fc>
1001492e:	0747      	lsls	r7, r0, #29
10014930:	003c      	movs	r4, r7
10014932:	0032      	movs	r2, r6
10014934:	08c9      	lsrs	r1, r1, #3
10014936:	430c      	orrs	r4, r1
10014938:	00d7      	lsls	r7, r2, #3
1001493a:	0f62      	lsrs	r2, r4, #29
1001493c:	00e5      	lsls	r5, r4, #3
1001493e:	4317      	orrs	r7, r2
10014940:	469a      	mov	sl, r3
10014942:	4c26      	ldr	r4, [pc, #152]	; (100149dc <__aeabi_dsub+0x6a0>)
10014944:	e526      	b.n	10014394 <__aeabi_dsub+0x58>
10014946:	2200      	movs	r2, #0
10014948:	2500      	movs	r5, #0
1001494a:	e544      	b.n	100143d6 <__aeabi_dsub+0x9a>
1001494c:	4c23      	ldr	r4, [pc, #140]	; (100149dc <__aeabi_dsub+0x6a0>)
1001494e:	e521      	b.n	10014394 <__aeabi_dsub+0x58>
10014950:	2000      	movs	r0, #0
10014952:	e749      	b.n	100147e8 <__aeabi_dsub+0x4ac>
10014954:	2300      	movs	r3, #0
10014956:	2500      	movs	r5, #0
10014958:	e5bb      	b.n	100144d2 <__aeabi_dsub+0x196>
1001495a:	464c      	mov	r4, r9
1001495c:	003e      	movs	r6, r7
1001495e:	3c20      	subs	r4, #32
10014960:	40e6      	lsrs	r6, r4
10014962:	464c      	mov	r4, r9
10014964:	46b4      	mov	ip, r6
10014966:	2c20      	cmp	r4, #32
10014968:	d031      	beq.n	100149ce <__aeabi_dsub+0x692>
1001496a:	2440      	movs	r4, #64	; 0x40
1001496c:	464e      	mov	r6, r9
1001496e:	1ba6      	subs	r6, r4, r6
10014970:	40b7      	lsls	r7, r6
10014972:	433d      	orrs	r5, r7
10014974:	1e6c      	subs	r4, r5, #1
10014976:	41a5      	sbcs	r5, r4
10014978:	4664      	mov	r4, ip
1001497a:	432c      	orrs	r4, r5
1001497c:	2700      	movs	r7, #0
1001497e:	1b0d      	subs	r5, r1, r4
10014980:	e6e7      	b.n	10014752 <__aeabi_dsub+0x416>
10014982:	2280      	movs	r2, #128	; 0x80
10014984:	2300      	movs	r3, #0
10014986:	0312      	lsls	r2, r2, #12
10014988:	4c14      	ldr	r4, [pc, #80]	; (100149dc <__aeabi_dsub+0x6a0>)
1001498a:	2500      	movs	r5, #0
1001498c:	e5a1      	b.n	100144d2 <__aeabi_dsub+0x196>
1001498e:	433d      	orrs	r5, r7
10014990:	1e6f      	subs	r7, r5, #1
10014992:	41bd      	sbcs	r5, r7
10014994:	2700      	movs	r7, #0
10014996:	b2ed      	uxtb	r5, r5
10014998:	e760      	b.n	1001485c <__aeabi_dsub+0x520>
1001499a:	0007      	movs	r7, r0
1001499c:	000d      	movs	r5, r1
1001499e:	4c0f      	ldr	r4, [pc, #60]	; (100149dc <__aeabi_dsub+0x6a0>)
100149a0:	e4f8      	b.n	10014394 <__aeabi_dsub+0x58>
100149a2:	0007      	movs	r7, r0
100149a4:	000d      	movs	r5, r1
100149a6:	e4f5      	b.n	10014394 <__aeabi_dsub+0x58>
100149a8:	464e      	mov	r6, r9
100149aa:	003c      	movs	r4, r7
100149ac:	3e20      	subs	r6, #32
100149ae:	40f4      	lsrs	r4, r6
100149b0:	46a0      	mov	r8, r4
100149b2:	464c      	mov	r4, r9
100149b4:	2c20      	cmp	r4, #32
100149b6:	d00e      	beq.n	100149d6 <__aeabi_dsub+0x69a>
100149b8:	2440      	movs	r4, #64	; 0x40
100149ba:	464e      	mov	r6, r9
100149bc:	1ba4      	subs	r4, r4, r6
100149be:	40a7      	lsls	r7, r4
100149c0:	433d      	orrs	r5, r7
100149c2:	1e6f      	subs	r7, r5, #1
100149c4:	41bd      	sbcs	r5, r7
100149c6:	4644      	mov	r4, r8
100149c8:	2700      	movs	r7, #0
100149ca:	4325      	orrs	r5, r4
100149cc:	e746      	b.n	1001485c <__aeabi_dsub+0x520>
100149ce:	2700      	movs	r7, #0
100149d0:	e7cf      	b.n	10014972 <__aeabi_dsub+0x636>
100149d2:	000d      	movs	r5, r1
100149d4:	e573      	b.n	100144be <__aeabi_dsub+0x182>
100149d6:	2700      	movs	r7, #0
100149d8:	e7f2      	b.n	100149c0 <__aeabi_dsub+0x684>
100149da:	46c0      	nop			; (mov r8, r8)
100149dc:	000007ff 	.word	0x000007ff
100149e0:	ff7fffff 	.word	0xff7fffff

100149e4 <__aeabi_d2iz>:
100149e4:	030b      	lsls	r3, r1, #12
100149e6:	b530      	push	{r4, r5, lr}
100149e8:	4d13      	ldr	r5, [pc, #76]	; (10014a38 <__aeabi_d2iz+0x54>)
100149ea:	0b1a      	lsrs	r2, r3, #12
100149ec:	004b      	lsls	r3, r1, #1
100149ee:	0d5b      	lsrs	r3, r3, #21
100149f0:	0fc9      	lsrs	r1, r1, #31
100149f2:	2400      	movs	r4, #0
100149f4:	42ab      	cmp	r3, r5
100149f6:	dd11      	ble.n	10014a1c <__aeabi_d2iz+0x38>
100149f8:	4c10      	ldr	r4, [pc, #64]	; (10014a3c <__aeabi_d2iz+0x58>)
100149fa:	42a3      	cmp	r3, r4
100149fc:	dc10      	bgt.n	10014a20 <__aeabi_d2iz+0x3c>
100149fe:	2480      	movs	r4, #128	; 0x80
10014a00:	0364      	lsls	r4, r4, #13
10014a02:	4322      	orrs	r2, r4
10014a04:	4c0e      	ldr	r4, [pc, #56]	; (10014a40 <__aeabi_d2iz+0x5c>)
10014a06:	1ae4      	subs	r4, r4, r3
10014a08:	2c1f      	cmp	r4, #31
10014a0a:	dd0c      	ble.n	10014a26 <__aeabi_d2iz+0x42>
10014a0c:	480d      	ldr	r0, [pc, #52]	; (10014a44 <__aeabi_d2iz+0x60>)
10014a0e:	1ac3      	subs	r3, r0, r3
10014a10:	40da      	lsrs	r2, r3
10014a12:	0013      	movs	r3, r2
10014a14:	425c      	negs	r4, r3
10014a16:	2900      	cmp	r1, #0
10014a18:	d100      	bne.n	10014a1c <__aeabi_d2iz+0x38>
10014a1a:	001c      	movs	r4, r3
10014a1c:	0020      	movs	r0, r4
10014a1e:	bd30      	pop	{r4, r5, pc}
10014a20:	4b09      	ldr	r3, [pc, #36]	; (10014a48 <__aeabi_d2iz+0x64>)
10014a22:	18cc      	adds	r4, r1, r3
10014a24:	e7fa      	b.n	10014a1c <__aeabi_d2iz+0x38>
10014a26:	40e0      	lsrs	r0, r4
10014a28:	4c08      	ldr	r4, [pc, #32]	; (10014a4c <__aeabi_d2iz+0x68>)
10014a2a:	46a4      	mov	ip, r4
10014a2c:	4463      	add	r3, ip
10014a2e:	409a      	lsls	r2, r3
10014a30:	0013      	movs	r3, r2
10014a32:	4303      	orrs	r3, r0
10014a34:	e7ee      	b.n	10014a14 <__aeabi_d2iz+0x30>
10014a36:	46c0      	nop			; (mov r8, r8)
10014a38:	000003fe 	.word	0x000003fe
10014a3c:	0000041d 	.word	0x0000041d
10014a40:	00000433 	.word	0x00000433
10014a44:	00000413 	.word	0x00000413
10014a48:	7fffffff 	.word	0x7fffffff
10014a4c:	fffffbed 	.word	0xfffffbed

10014a50 <__aeabi_ui2d>:
10014a50:	b570      	push	{r4, r5, r6, lr}
10014a52:	1e05      	subs	r5, r0, #0
10014a54:	d028      	beq.n	10014aa8 <__aeabi_ui2d+0x58>
10014a56:	f000 f833 	bl	10014ac0 <__clzsi2>
10014a5a:	4b15      	ldr	r3, [pc, #84]	; (10014ab0 <__aeabi_ui2d+0x60>)
10014a5c:	4a15      	ldr	r2, [pc, #84]	; (10014ab4 <__aeabi_ui2d+0x64>)
10014a5e:	1a1b      	subs	r3, r3, r0
10014a60:	1ad2      	subs	r2, r2, r3
10014a62:	2a1f      	cmp	r2, #31
10014a64:	dd16      	ble.n	10014a94 <__aeabi_ui2d+0x44>
10014a66:	002c      	movs	r4, r5
10014a68:	4a13      	ldr	r2, [pc, #76]	; (10014ab8 <__aeabi_ui2d+0x68>)
10014a6a:	2500      	movs	r5, #0
10014a6c:	1ad2      	subs	r2, r2, r3
10014a6e:	4094      	lsls	r4, r2
10014a70:	055a      	lsls	r2, r3, #21
10014a72:	0324      	lsls	r4, r4, #12
10014a74:	0b24      	lsrs	r4, r4, #12
10014a76:	0d52      	lsrs	r2, r2, #21
10014a78:	2100      	movs	r1, #0
10014a7a:	0324      	lsls	r4, r4, #12
10014a7c:	0d0b      	lsrs	r3, r1, #20
10014a7e:	0b24      	lsrs	r4, r4, #12
10014a80:	051b      	lsls	r3, r3, #20
10014a82:	4323      	orrs	r3, r4
10014a84:	4c0d      	ldr	r4, [pc, #52]	; (10014abc <__aeabi_ui2d+0x6c>)
10014a86:	0512      	lsls	r2, r2, #20
10014a88:	4023      	ands	r3, r4
10014a8a:	4313      	orrs	r3, r2
10014a8c:	005b      	lsls	r3, r3, #1
10014a8e:	0028      	movs	r0, r5
10014a90:	0859      	lsrs	r1, r3, #1
10014a92:	bd70      	pop	{r4, r5, r6, pc}
10014a94:	210b      	movs	r1, #11
10014a96:	002c      	movs	r4, r5
10014a98:	1a08      	subs	r0, r1, r0
10014a9a:	40c4      	lsrs	r4, r0
10014a9c:	4095      	lsls	r5, r2
10014a9e:	0324      	lsls	r4, r4, #12
10014aa0:	055a      	lsls	r2, r3, #21
10014aa2:	0b24      	lsrs	r4, r4, #12
10014aa4:	0d52      	lsrs	r2, r2, #21
10014aa6:	e7e7      	b.n	10014a78 <__aeabi_ui2d+0x28>
10014aa8:	2200      	movs	r2, #0
10014aaa:	2400      	movs	r4, #0
10014aac:	e7e4      	b.n	10014a78 <__aeabi_ui2d+0x28>
10014aae:	46c0      	nop			; (mov r8, r8)
10014ab0:	0000041e 	.word	0x0000041e
10014ab4:	00000433 	.word	0x00000433
10014ab8:	00000413 	.word	0x00000413
10014abc:	800fffff 	.word	0x800fffff

10014ac0 <__clzsi2>:
10014ac0:	211c      	movs	r1, #28
10014ac2:	2301      	movs	r3, #1
10014ac4:	041b      	lsls	r3, r3, #16
10014ac6:	4298      	cmp	r0, r3
10014ac8:	d301      	bcc.n	10014ace <__clzsi2+0xe>
10014aca:	0c00      	lsrs	r0, r0, #16
10014acc:	3910      	subs	r1, #16
10014ace:	0a1b      	lsrs	r3, r3, #8
10014ad0:	4298      	cmp	r0, r3
10014ad2:	d301      	bcc.n	10014ad8 <__clzsi2+0x18>
10014ad4:	0a00      	lsrs	r0, r0, #8
10014ad6:	3908      	subs	r1, #8
10014ad8:	091b      	lsrs	r3, r3, #4
10014ada:	4298      	cmp	r0, r3
10014adc:	d301      	bcc.n	10014ae2 <__clzsi2+0x22>
10014ade:	0900      	lsrs	r0, r0, #4
10014ae0:	3904      	subs	r1, #4
10014ae2:	a202      	add	r2, pc, #8	; (adr r2, 10014aec <__clzsi2+0x2c>)
10014ae4:	5c10      	ldrb	r0, [r2, r0]
10014ae6:	1840      	adds	r0, r0, r1
10014ae8:	4770      	bx	lr
10014aea:	46c0      	nop			; (mov r8, r8)
10014aec:	02020304 	.word	0x02020304
10014af0:	01010101 	.word	0x01010101
	...

10014afc <__libc_init_array>:
10014afc:	4b0e      	ldr	r3, [pc, #56]	; (10014b38 <__libc_init_array+0x3c>)
10014afe:	b570      	push	{r4, r5, r6, lr}
10014b00:	2500      	movs	r5, #0
10014b02:	001e      	movs	r6, r3
10014b04:	4c0d      	ldr	r4, [pc, #52]	; (10014b3c <__libc_init_array+0x40>)
10014b06:	1ae4      	subs	r4, r4, r3
10014b08:	10a4      	asrs	r4, r4, #2
10014b0a:	42a5      	cmp	r5, r4
10014b0c:	d004      	beq.n	10014b18 <__libc_init_array+0x1c>
10014b0e:	00ab      	lsls	r3, r5, #2
10014b10:	58f3      	ldr	r3, [r6, r3]
10014b12:	4798      	blx	r3
10014b14:	3501      	adds	r5, #1
10014b16:	e7f8      	b.n	10014b0a <__libc_init_array+0xe>
10014b18:	f003 f9da 	bl	10017ed0 <_init>
10014b1c:	4b08      	ldr	r3, [pc, #32]	; (10014b40 <__libc_init_array+0x44>)
10014b1e:	2500      	movs	r5, #0
10014b20:	001e      	movs	r6, r3
10014b22:	4c08      	ldr	r4, [pc, #32]	; (10014b44 <__libc_init_array+0x48>)
10014b24:	1ae4      	subs	r4, r4, r3
10014b26:	10a4      	asrs	r4, r4, #2
10014b28:	42a5      	cmp	r5, r4
10014b2a:	d004      	beq.n	10014b36 <__libc_init_array+0x3a>
10014b2c:	00ab      	lsls	r3, r5, #2
10014b2e:	58f3      	ldr	r3, [r6, r3]
10014b30:	4798      	blx	r3
10014b32:	3501      	adds	r5, #1
10014b34:	e7f8      	b.n	10014b28 <__libc_init_array+0x2c>
10014b36:	bd70      	pop	{r4, r5, r6, pc}
10014b38:	10017edc 	.word	0x10017edc
10014b3c:	10017edc 	.word	0x10017edc
10014b40:	10017edc 	.word	0x10017edc
10014b44:	10017ee0 	.word	0x10017ee0

10014b48 <malloc>:
10014b48:	b510      	push	{r4, lr}
10014b4a:	4b03      	ldr	r3, [pc, #12]	; (10014b58 <malloc+0x10>)
10014b4c:	0001      	movs	r1, r0
10014b4e:	6818      	ldr	r0, [r3, #0]
10014b50:	f000 f86a 	bl	10014c28 <_malloc_r>
10014b54:	bd10      	pop	{r4, pc}
10014b56:	46c0      	nop			; (mov r8, r8)
10014b58:	10017f98 	.word	0x10017f98

10014b5c <memcmp>:
10014b5c:	b530      	push	{r4, r5, lr}
10014b5e:	2400      	movs	r4, #0
10014b60:	42a2      	cmp	r2, r4
10014b62:	d008      	beq.n	10014b76 <memcmp+0x1a>
10014b64:	5d03      	ldrb	r3, [r0, r4]
10014b66:	1c65      	adds	r5, r4, #1
10014b68:	5d0c      	ldrb	r4, [r1, r4]
10014b6a:	42a3      	cmp	r3, r4
10014b6c:	d001      	beq.n	10014b72 <memcmp+0x16>
10014b6e:	1b18      	subs	r0, r3, r4
10014b70:	e002      	b.n	10014b78 <memcmp+0x1c>
10014b72:	002c      	movs	r4, r5
10014b74:	e7f4      	b.n	10014b60 <memcmp+0x4>
10014b76:	2000      	movs	r0, #0
10014b78:	bd30      	pop	{r4, r5, pc}

10014b7a <memcpy>:
10014b7a:	2300      	movs	r3, #0
10014b7c:	b510      	push	{r4, lr}
10014b7e:	429a      	cmp	r2, r3
10014b80:	d003      	beq.n	10014b8a <memcpy+0x10>
10014b82:	5ccc      	ldrb	r4, [r1, r3]
10014b84:	54c4      	strb	r4, [r0, r3]
10014b86:	3301      	adds	r3, #1
10014b88:	e7f9      	b.n	10014b7e <memcpy+0x4>
10014b8a:	bd10      	pop	{r4, pc}

10014b8c <memset>:
10014b8c:	0003      	movs	r3, r0
10014b8e:	1882      	adds	r2, r0, r2
10014b90:	4293      	cmp	r3, r2
10014b92:	d002      	beq.n	10014b9a <memset+0xe>
10014b94:	7019      	strb	r1, [r3, #0]
10014b96:	3301      	adds	r3, #1
10014b98:	e7fa      	b.n	10014b90 <memset+0x4>
10014b9a:	4770      	bx	lr

10014b9c <_free_r>:
10014b9c:	b530      	push	{r4, r5, lr}
10014b9e:	2900      	cmp	r1, #0
10014ba0:	d03e      	beq.n	10014c20 <_free_r+0x84>
10014ba2:	3904      	subs	r1, #4
10014ba4:	680b      	ldr	r3, [r1, #0]
10014ba6:	2b00      	cmp	r3, #0
10014ba8:	da00      	bge.n	10014bac <_free_r+0x10>
10014baa:	18c9      	adds	r1, r1, r3
10014bac:	4a1d      	ldr	r2, [pc, #116]	; (10014c24 <_free_r+0x88>)
10014bae:	6813      	ldr	r3, [r2, #0]
10014bb0:	0014      	movs	r4, r2
10014bb2:	2b00      	cmp	r3, #0
10014bb4:	d102      	bne.n	10014bbc <_free_r+0x20>
10014bb6:	604b      	str	r3, [r1, #4]
10014bb8:	6011      	str	r1, [r2, #0]
10014bba:	e031      	b.n	10014c20 <_free_r+0x84>
10014bbc:	428b      	cmp	r3, r1
10014bbe:	d90d      	bls.n	10014bdc <_free_r+0x40>
10014bc0:	680a      	ldr	r2, [r1, #0]
10014bc2:	1888      	adds	r0, r1, r2
10014bc4:	4283      	cmp	r3, r0
10014bc6:	d103      	bne.n	10014bd0 <_free_r+0x34>
10014bc8:	6818      	ldr	r0, [r3, #0]
10014bca:	685b      	ldr	r3, [r3, #4]
10014bcc:	1882      	adds	r2, r0, r2
10014bce:	600a      	str	r2, [r1, #0]
10014bd0:	604b      	str	r3, [r1, #4]
10014bd2:	6021      	str	r1, [r4, #0]
10014bd4:	e024      	b.n	10014c20 <_free_r+0x84>
10014bd6:	428a      	cmp	r2, r1
10014bd8:	d803      	bhi.n	10014be2 <_free_r+0x46>
10014bda:	0013      	movs	r3, r2
10014bdc:	685a      	ldr	r2, [r3, #4]
10014bde:	2a00      	cmp	r2, #0
10014be0:	d1f9      	bne.n	10014bd6 <_free_r+0x3a>
10014be2:	681d      	ldr	r5, [r3, #0]
10014be4:	195c      	adds	r4, r3, r5
10014be6:	428c      	cmp	r4, r1
10014be8:	d10b      	bne.n	10014c02 <_free_r+0x66>
10014bea:	6809      	ldr	r1, [r1, #0]
10014bec:	1869      	adds	r1, r5, r1
10014bee:	1858      	adds	r0, r3, r1
10014bf0:	6019      	str	r1, [r3, #0]
10014bf2:	4282      	cmp	r2, r0
10014bf4:	d114      	bne.n	10014c20 <_free_r+0x84>
10014bf6:	6810      	ldr	r0, [r2, #0]
10014bf8:	6852      	ldr	r2, [r2, #4]
10014bfa:	1841      	adds	r1, r0, r1
10014bfc:	6019      	str	r1, [r3, #0]
10014bfe:	605a      	str	r2, [r3, #4]
10014c00:	e00e      	b.n	10014c20 <_free_r+0x84>
10014c02:	428c      	cmp	r4, r1
10014c04:	d902      	bls.n	10014c0c <_free_r+0x70>
10014c06:	230c      	movs	r3, #12
10014c08:	6003      	str	r3, [r0, #0]
10014c0a:	e009      	b.n	10014c20 <_free_r+0x84>
10014c0c:	6808      	ldr	r0, [r1, #0]
10014c0e:	180c      	adds	r4, r1, r0
10014c10:	42a2      	cmp	r2, r4
10014c12:	d103      	bne.n	10014c1c <_free_r+0x80>
10014c14:	6814      	ldr	r4, [r2, #0]
10014c16:	6852      	ldr	r2, [r2, #4]
10014c18:	1820      	adds	r0, r4, r0
10014c1a:	6008      	str	r0, [r1, #0]
10014c1c:	604a      	str	r2, [r1, #4]
10014c1e:	6059      	str	r1, [r3, #4]
10014c20:	bd30      	pop	{r4, r5, pc}
10014c22:	46c0      	nop			; (mov r8, r8)
10014c24:	10019a6c 	.word	0x10019a6c

10014c28 <_malloc_r>:
10014c28:	2303      	movs	r3, #3
10014c2a:	b570      	push	{r4, r5, r6, lr}
10014c2c:	1ccd      	adds	r5, r1, #3
10014c2e:	439d      	bics	r5, r3
10014c30:	3508      	adds	r5, #8
10014c32:	0006      	movs	r6, r0
10014c34:	2d0c      	cmp	r5, #12
10014c36:	d201      	bcs.n	10014c3c <_malloc_r+0x14>
10014c38:	250c      	movs	r5, #12
10014c3a:	e005      	b.n	10014c48 <_malloc_r+0x20>
10014c3c:	2d00      	cmp	r5, #0
10014c3e:	da03      	bge.n	10014c48 <_malloc_r+0x20>
10014c40:	230c      	movs	r3, #12
10014c42:	2000      	movs	r0, #0
10014c44:	6033      	str	r3, [r6, #0]
10014c46:	e040      	b.n	10014cca <_malloc_r+0xa2>
10014c48:	42a9      	cmp	r1, r5
10014c4a:	d8f9      	bhi.n	10014c40 <_malloc_r+0x18>
10014c4c:	4b1f      	ldr	r3, [pc, #124]	; (10014ccc <_malloc_r+0xa4>)
10014c4e:	681c      	ldr	r4, [r3, #0]
10014c50:	001a      	movs	r2, r3
10014c52:	0021      	movs	r1, r4
10014c54:	2900      	cmp	r1, #0
10014c56:	d013      	beq.n	10014c80 <_malloc_r+0x58>
10014c58:	680b      	ldr	r3, [r1, #0]
10014c5a:	1b5b      	subs	r3, r3, r5
10014c5c:	d40d      	bmi.n	10014c7a <_malloc_r+0x52>
10014c5e:	2b0b      	cmp	r3, #11
10014c60:	d902      	bls.n	10014c68 <_malloc_r+0x40>
10014c62:	600b      	str	r3, [r1, #0]
10014c64:	18cc      	adds	r4, r1, r3
10014c66:	e01e      	b.n	10014ca6 <_malloc_r+0x7e>
10014c68:	428c      	cmp	r4, r1
10014c6a:	d102      	bne.n	10014c72 <_malloc_r+0x4a>
10014c6c:	6863      	ldr	r3, [r4, #4]
10014c6e:	6013      	str	r3, [r2, #0]
10014c70:	e01a      	b.n	10014ca8 <_malloc_r+0x80>
10014c72:	684b      	ldr	r3, [r1, #4]
10014c74:	6063      	str	r3, [r4, #4]
10014c76:	000c      	movs	r4, r1
10014c78:	e016      	b.n	10014ca8 <_malloc_r+0x80>
10014c7a:	000c      	movs	r4, r1
10014c7c:	6849      	ldr	r1, [r1, #4]
10014c7e:	e7e9      	b.n	10014c54 <_malloc_r+0x2c>
10014c80:	4c13      	ldr	r4, [pc, #76]	; (10014cd0 <_malloc_r+0xa8>)
10014c82:	6823      	ldr	r3, [r4, #0]
10014c84:	2b00      	cmp	r3, #0
10014c86:	d103      	bne.n	10014c90 <_malloc_r+0x68>
10014c88:	0030      	movs	r0, r6
10014c8a:	f000 f8f9 	bl	10014e80 <_sbrk_r>
10014c8e:	6020      	str	r0, [r4, #0]
10014c90:	0029      	movs	r1, r5
10014c92:	0030      	movs	r0, r6
10014c94:	f000 f8f4 	bl	10014e80 <_sbrk_r>
10014c98:	1c43      	adds	r3, r0, #1
10014c9a:	d0d1      	beq.n	10014c40 <_malloc_r+0x18>
10014c9c:	2303      	movs	r3, #3
10014c9e:	1cc4      	adds	r4, r0, #3
10014ca0:	439c      	bics	r4, r3
10014ca2:	42a0      	cmp	r0, r4
10014ca4:	d10a      	bne.n	10014cbc <_malloc_r+0x94>
10014ca6:	6025      	str	r5, [r4, #0]
10014ca8:	0020      	movs	r0, r4
10014caa:	2207      	movs	r2, #7
10014cac:	300b      	adds	r0, #11
10014cae:	1d23      	adds	r3, r4, #4
10014cb0:	4390      	bics	r0, r2
10014cb2:	1ac3      	subs	r3, r0, r3
10014cb4:	d009      	beq.n	10014cca <_malloc_r+0xa2>
10014cb6:	425a      	negs	r2, r3
10014cb8:	50e2      	str	r2, [r4, r3]
10014cba:	e006      	b.n	10014cca <_malloc_r+0xa2>
10014cbc:	1a21      	subs	r1, r4, r0
10014cbe:	0030      	movs	r0, r6
10014cc0:	f000 f8de 	bl	10014e80 <_sbrk_r>
10014cc4:	1c43      	adds	r3, r0, #1
10014cc6:	d1ee      	bne.n	10014ca6 <_malloc_r+0x7e>
10014cc8:	e7ba      	b.n	10014c40 <_malloc_r+0x18>
10014cca:	bd70      	pop	{r4, r5, r6, pc}
10014ccc:	10019a6c 	.word	0x10019a6c
10014cd0:	10019a68 	.word	0x10019a68

10014cd4 <iprintf>:
10014cd4:	b40f      	push	{r0, r1, r2, r3}
10014cd6:	4b0b      	ldr	r3, [pc, #44]	; (10014d04 <iprintf+0x30>)
10014cd8:	b513      	push	{r0, r1, r4, lr}
10014cda:	681c      	ldr	r4, [r3, #0]
10014cdc:	2c00      	cmp	r4, #0
10014cde:	d005      	beq.n	10014cec <iprintf+0x18>
10014ce0:	69a3      	ldr	r3, [r4, #24]
10014ce2:	2b00      	cmp	r3, #0
10014ce4:	d102      	bne.n	10014cec <iprintf+0x18>
10014ce6:	0020      	movs	r0, r4
10014ce8:	f000 fb58 	bl	1001539c <__sinit>
10014cec:	ab05      	add	r3, sp, #20
10014cee:	9a04      	ldr	r2, [sp, #16]
10014cf0:	68a1      	ldr	r1, [r4, #8]
10014cf2:	0020      	movs	r0, r4
10014cf4:	9301      	str	r3, [sp, #4]
10014cf6:	f000 fc71 	bl	100155dc <_vfiprintf_r>
10014cfa:	bc16      	pop	{r1, r2, r4}
10014cfc:	bc08      	pop	{r3}
10014cfe:	b004      	add	sp, #16
10014d00:	4718      	bx	r3
10014d02:	46c0      	nop			; (mov r8, r8)
10014d04:	10017f98 	.word	0x10017f98

10014d08 <putchar>:
10014d08:	4b08      	ldr	r3, [pc, #32]	; (10014d2c <putchar+0x24>)
10014d0a:	b570      	push	{r4, r5, r6, lr}
10014d0c:	681c      	ldr	r4, [r3, #0]
10014d0e:	0005      	movs	r5, r0
10014d10:	2c00      	cmp	r4, #0
10014d12:	d005      	beq.n	10014d20 <putchar+0x18>
10014d14:	69a3      	ldr	r3, [r4, #24]
10014d16:	2b00      	cmp	r3, #0
10014d18:	d102      	bne.n	10014d20 <putchar+0x18>
10014d1a:	0020      	movs	r0, r4
10014d1c:	f000 fb3e 	bl	1001539c <__sinit>
10014d20:	0029      	movs	r1, r5
10014d22:	68a2      	ldr	r2, [r4, #8]
10014d24:	0020      	movs	r0, r4
10014d26:	f000 ff05 	bl	10015b34 <_putc_r>
10014d2a:	bd70      	pop	{r4, r5, r6, pc}
10014d2c:	10017f98 	.word	0x10017f98

10014d30 <_puts_r>:
10014d30:	b570      	push	{r4, r5, r6, lr}
10014d32:	0005      	movs	r5, r0
10014d34:	000e      	movs	r6, r1
10014d36:	2800      	cmp	r0, #0
10014d38:	d004      	beq.n	10014d44 <_puts_r+0x14>
10014d3a:	6983      	ldr	r3, [r0, #24]
10014d3c:	2b00      	cmp	r3, #0
10014d3e:	d101      	bne.n	10014d44 <_puts_r+0x14>
10014d40:	f000 fb2c 	bl	1001539c <__sinit>
10014d44:	69ab      	ldr	r3, [r5, #24]
10014d46:	68ac      	ldr	r4, [r5, #8]
10014d48:	2b00      	cmp	r3, #0
10014d4a:	d102      	bne.n	10014d52 <_puts_r+0x22>
10014d4c:	0028      	movs	r0, r5
10014d4e:	f000 fb25 	bl	1001539c <__sinit>
10014d52:	4b25      	ldr	r3, [pc, #148]	; (10014de8 <_puts_r+0xb8>)
10014d54:	429c      	cmp	r4, r3
10014d56:	d101      	bne.n	10014d5c <_puts_r+0x2c>
10014d58:	686c      	ldr	r4, [r5, #4]
10014d5a:	e008      	b.n	10014d6e <_puts_r+0x3e>
10014d5c:	4b23      	ldr	r3, [pc, #140]	; (10014dec <_puts_r+0xbc>)
10014d5e:	429c      	cmp	r4, r3
10014d60:	d101      	bne.n	10014d66 <_puts_r+0x36>
10014d62:	68ac      	ldr	r4, [r5, #8]
10014d64:	e003      	b.n	10014d6e <_puts_r+0x3e>
10014d66:	4b22      	ldr	r3, [pc, #136]	; (10014df0 <_puts_r+0xc0>)
10014d68:	429c      	cmp	r4, r3
10014d6a:	d100      	bne.n	10014d6e <_puts_r+0x3e>
10014d6c:	68ec      	ldr	r4, [r5, #12]
10014d6e:	89a3      	ldrh	r3, [r4, #12]
10014d70:	071b      	lsls	r3, r3, #28
10014d72:	d502      	bpl.n	10014d7a <_puts_r+0x4a>
10014d74:	6923      	ldr	r3, [r4, #16]
10014d76:	2b00      	cmp	r3, #0
10014d78:	d111      	bne.n	10014d9e <_puts_r+0x6e>
10014d7a:	0021      	movs	r1, r4
10014d7c:	0028      	movs	r0, r5
10014d7e:	f000 f9a3 	bl	100150c8 <__swsetup_r>
10014d82:	2800      	cmp	r0, #0
10014d84:	d00b      	beq.n	10014d9e <_puts_r+0x6e>
10014d86:	2001      	movs	r0, #1
10014d88:	4240      	negs	r0, r0
10014d8a:	e02b      	b.n	10014de4 <_puts_r+0xb4>
10014d8c:	3b01      	subs	r3, #1
10014d8e:	3601      	adds	r6, #1
10014d90:	60a3      	str	r3, [r4, #8]
10014d92:	2b00      	cmp	r3, #0
10014d94:	db08      	blt.n	10014da8 <_puts_r+0x78>
10014d96:	6823      	ldr	r3, [r4, #0]
10014d98:	1c5a      	adds	r2, r3, #1
10014d9a:	6022      	str	r2, [r4, #0]
10014d9c:	7019      	strb	r1, [r3, #0]
10014d9e:	7831      	ldrb	r1, [r6, #0]
10014da0:	68a3      	ldr	r3, [r4, #8]
10014da2:	2900      	cmp	r1, #0
10014da4:	d1f2      	bne.n	10014d8c <_puts_r+0x5c>
10014da6:	e00b      	b.n	10014dc0 <_puts_r+0x90>
10014da8:	69a2      	ldr	r2, [r4, #24]
10014daa:	4293      	cmp	r3, r2
10014dac:	db01      	blt.n	10014db2 <_puts_r+0x82>
10014dae:	290a      	cmp	r1, #10
10014db0:	d1f1      	bne.n	10014d96 <_puts_r+0x66>
10014db2:	0022      	movs	r2, r4
10014db4:	0028      	movs	r0, r5
10014db6:	f000 f92f 	bl	10015018 <__swbuf_r>
10014dba:	1c43      	adds	r3, r0, #1
10014dbc:	d1ef      	bne.n	10014d9e <_puts_r+0x6e>
10014dbe:	e7e2      	b.n	10014d86 <_puts_r+0x56>
10014dc0:	3b01      	subs	r3, #1
10014dc2:	60a3      	str	r3, [r4, #8]
10014dc4:	2b00      	cmp	r3, #0
10014dc6:	da08      	bge.n	10014dda <_puts_r+0xaa>
10014dc8:	0022      	movs	r2, r4
10014dca:	310a      	adds	r1, #10
10014dcc:	0028      	movs	r0, r5
10014dce:	f000 f923 	bl	10015018 <__swbuf_r>
10014dd2:	1c43      	adds	r3, r0, #1
10014dd4:	d0d7      	beq.n	10014d86 <_puts_r+0x56>
10014dd6:	200a      	movs	r0, #10
10014dd8:	e004      	b.n	10014de4 <_puts_r+0xb4>
10014dda:	200a      	movs	r0, #10
10014ddc:	6823      	ldr	r3, [r4, #0]
10014dde:	1c5a      	adds	r2, r3, #1
10014de0:	6022      	str	r2, [r4, #0]
10014de2:	7018      	strb	r0, [r3, #0]
10014de4:	bd70      	pop	{r4, r5, r6, pc}
10014de6:	46c0      	nop			; (mov r8, r8)
10014de8:	10017e3c 	.word	0x10017e3c
10014dec:	10017e5c 	.word	0x10017e5c
10014df0:	10017e7c 	.word	0x10017e7c

10014df4 <puts>:
10014df4:	b510      	push	{r4, lr}
10014df6:	4b03      	ldr	r3, [pc, #12]	; (10014e04 <puts+0x10>)
10014df8:	0001      	movs	r1, r0
10014dfa:	6818      	ldr	r0, [r3, #0]
10014dfc:	f7ff ff98 	bl	10014d30 <_puts_r>
10014e00:	bd10      	pop	{r4, pc}
10014e02:	46c0      	nop			; (mov r8, r8)
10014e04:	10017f98 	.word	0x10017f98

10014e08 <rand>:
10014e08:	4b15      	ldr	r3, [pc, #84]	; (10014e60 <rand+0x58>)
10014e0a:	b510      	push	{r4, lr}
10014e0c:	681c      	ldr	r4, [r3, #0]
10014e0e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
10014e10:	2b00      	cmp	r3, #0
10014e12:	d115      	bne.n	10014e40 <rand+0x38>
10014e14:	2018      	movs	r0, #24
10014e16:	f7ff fe97 	bl	10014b48 <malloc>
10014e1a:	4b12      	ldr	r3, [pc, #72]	; (10014e64 <rand+0x5c>)
10014e1c:	63a0      	str	r0, [r4, #56]	; 0x38
10014e1e:	8003      	strh	r3, [r0, #0]
10014e20:	4b11      	ldr	r3, [pc, #68]	; (10014e68 <rand+0x60>)
10014e22:	2201      	movs	r2, #1
10014e24:	8043      	strh	r3, [r0, #2]
10014e26:	4b11      	ldr	r3, [pc, #68]	; (10014e6c <rand+0x64>)
10014e28:	8083      	strh	r3, [r0, #4]
10014e2a:	4b11      	ldr	r3, [pc, #68]	; (10014e70 <rand+0x68>)
10014e2c:	80c3      	strh	r3, [r0, #6]
10014e2e:	4b11      	ldr	r3, [pc, #68]	; (10014e74 <rand+0x6c>)
10014e30:	8103      	strh	r3, [r0, #8]
10014e32:	2305      	movs	r3, #5
10014e34:	8143      	strh	r3, [r0, #10]
10014e36:	3306      	adds	r3, #6
10014e38:	8183      	strh	r3, [r0, #12]
10014e3a:	2300      	movs	r3, #0
10014e3c:	6102      	str	r2, [r0, #16]
10014e3e:	6143      	str	r3, [r0, #20]
10014e40:	6ba4      	ldr	r4, [r4, #56]	; 0x38
10014e42:	4a0d      	ldr	r2, [pc, #52]	; (10014e78 <rand+0x70>)
10014e44:	6920      	ldr	r0, [r4, #16]
10014e46:	6961      	ldr	r1, [r4, #20]
10014e48:	4b0c      	ldr	r3, [pc, #48]	; (10014e7c <rand+0x74>)
10014e4a:	f7fe f9c9 	bl	100131e0 <__aeabi_lmul>
10014e4e:	2201      	movs	r2, #1
10014e50:	2300      	movs	r3, #0
10014e52:	1880      	adds	r0, r0, r2
10014e54:	4159      	adcs	r1, r3
10014e56:	6120      	str	r0, [r4, #16]
10014e58:	6161      	str	r1, [r4, #20]
10014e5a:	0048      	lsls	r0, r1, #1
10014e5c:	0840      	lsrs	r0, r0, #1
10014e5e:	bd10      	pop	{r4, pc}
10014e60:	10017f98 	.word	0x10017f98
10014e64:	0000330e 	.word	0x0000330e
10014e68:	ffffabcd 	.word	0xffffabcd
10014e6c:	00001234 	.word	0x00001234
10014e70:	ffffe66d 	.word	0xffffe66d
10014e74:	ffffdeec 	.word	0xffffdeec
10014e78:	4c957f2d 	.word	0x4c957f2d
10014e7c:	5851f42d 	.word	0x5851f42d

10014e80 <_sbrk_r>:
10014e80:	2300      	movs	r3, #0
10014e82:	b570      	push	{r4, r5, r6, lr}
10014e84:	4c06      	ldr	r4, [pc, #24]	; (10014ea0 <_sbrk_r+0x20>)
10014e86:	0005      	movs	r5, r0
10014e88:	0008      	movs	r0, r1
10014e8a:	6023      	str	r3, [r4, #0]
10014e8c:	f7f8 fb44 	bl	1000d518 <_sbrk>
10014e90:	1c43      	adds	r3, r0, #1
10014e92:	d103      	bne.n	10014e9c <_sbrk_r+0x1c>
10014e94:	6823      	ldr	r3, [r4, #0]
10014e96:	2b00      	cmp	r3, #0
10014e98:	d000      	beq.n	10014e9c <_sbrk_r+0x1c>
10014e9a:	602b      	str	r3, [r5, #0]
10014e9c:	bd70      	pop	{r4, r5, r6, pc}
10014e9e:	46c0      	nop			; (mov r8, r8)
10014ea0:	1001ae30 	.word	0x1001ae30

10014ea4 <setbuf>:
10014ea4:	424a      	negs	r2, r1
10014ea6:	414a      	adcs	r2, r1
10014ea8:	2380      	movs	r3, #128	; 0x80
10014eaa:	b510      	push	{r4, lr}
10014eac:	0052      	lsls	r2, r2, #1
10014eae:	00db      	lsls	r3, r3, #3
10014eb0:	f000 f802 	bl	10014eb8 <setvbuf>
10014eb4:	bd10      	pop	{r4, pc}
	...

10014eb8 <setvbuf>:
10014eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
10014eba:	001d      	movs	r5, r3
10014ebc:	4b51      	ldr	r3, [pc, #324]	; (10015004 <setvbuf+0x14c>)
10014ebe:	b085      	sub	sp, #20
10014ec0:	681e      	ldr	r6, [r3, #0]
10014ec2:	0004      	movs	r4, r0
10014ec4:	000f      	movs	r7, r1
10014ec6:	9200      	str	r2, [sp, #0]
10014ec8:	2e00      	cmp	r6, #0
10014eca:	d005      	beq.n	10014ed8 <setvbuf+0x20>
10014ecc:	69b3      	ldr	r3, [r6, #24]
10014ece:	2b00      	cmp	r3, #0
10014ed0:	d102      	bne.n	10014ed8 <setvbuf+0x20>
10014ed2:	0030      	movs	r0, r6
10014ed4:	f000 fa62 	bl	1001539c <__sinit>
10014ed8:	4b4b      	ldr	r3, [pc, #300]	; (10015008 <setvbuf+0x150>)
10014eda:	429c      	cmp	r4, r3
10014edc:	d101      	bne.n	10014ee2 <setvbuf+0x2a>
10014ede:	6874      	ldr	r4, [r6, #4]
10014ee0:	e008      	b.n	10014ef4 <setvbuf+0x3c>
10014ee2:	4b4a      	ldr	r3, [pc, #296]	; (1001500c <setvbuf+0x154>)
10014ee4:	429c      	cmp	r4, r3
10014ee6:	d101      	bne.n	10014eec <setvbuf+0x34>
10014ee8:	68b4      	ldr	r4, [r6, #8]
10014eea:	e003      	b.n	10014ef4 <setvbuf+0x3c>
10014eec:	4b48      	ldr	r3, [pc, #288]	; (10015010 <setvbuf+0x158>)
10014eee:	429c      	cmp	r4, r3
10014ef0:	d100      	bne.n	10014ef4 <setvbuf+0x3c>
10014ef2:	68f4      	ldr	r4, [r6, #12]
10014ef4:	9b00      	ldr	r3, [sp, #0]
10014ef6:	2b02      	cmp	r3, #2
10014ef8:	d005      	beq.n	10014f06 <setvbuf+0x4e>
10014efa:	2b01      	cmp	r3, #1
10014efc:	d900      	bls.n	10014f00 <setvbuf+0x48>
10014efe:	e07c      	b.n	10014ffa <setvbuf+0x142>
10014f00:	2d00      	cmp	r5, #0
10014f02:	da00      	bge.n	10014f06 <setvbuf+0x4e>
10014f04:	e079      	b.n	10014ffa <setvbuf+0x142>
10014f06:	0021      	movs	r1, r4
10014f08:	0030      	movs	r0, r6
10014f0a:	f000 f9d9 	bl	100152c0 <_fflush_r>
10014f0e:	6b61      	ldr	r1, [r4, #52]	; 0x34
10014f10:	2900      	cmp	r1, #0
10014f12:	d008      	beq.n	10014f26 <setvbuf+0x6e>
10014f14:	0023      	movs	r3, r4
10014f16:	3344      	adds	r3, #68	; 0x44
10014f18:	4299      	cmp	r1, r3
10014f1a:	d002      	beq.n	10014f22 <setvbuf+0x6a>
10014f1c:	0030      	movs	r0, r6
10014f1e:	f7ff fe3d 	bl	10014b9c <_free_r>
10014f22:	2300      	movs	r3, #0
10014f24:	6363      	str	r3, [r4, #52]	; 0x34
10014f26:	2300      	movs	r3, #0
10014f28:	61a3      	str	r3, [r4, #24]
10014f2a:	6063      	str	r3, [r4, #4]
10014f2c:	89a3      	ldrh	r3, [r4, #12]
10014f2e:	061b      	lsls	r3, r3, #24
10014f30:	d503      	bpl.n	10014f3a <setvbuf+0x82>
10014f32:	6921      	ldr	r1, [r4, #16]
10014f34:	0030      	movs	r0, r6
10014f36:	f7ff fe31 	bl	10014b9c <_free_r>
10014f3a:	89a2      	ldrh	r2, [r4, #12]
10014f3c:	4b35      	ldr	r3, [pc, #212]	; (10015014 <setvbuf+0x15c>)
10014f3e:	4013      	ands	r3, r2
10014f40:	81a3      	strh	r3, [r4, #12]
10014f42:	9b00      	ldr	r3, [sp, #0]
10014f44:	2b02      	cmp	r3, #2
10014f46:	d021      	beq.n	10014f8c <setvbuf+0xd4>
10014f48:	ab03      	add	r3, sp, #12
10014f4a:	aa02      	add	r2, sp, #8
10014f4c:	0021      	movs	r1, r4
10014f4e:	0030      	movs	r0, r6
10014f50:	f000 fab8 	bl	100154c4 <__swhatbuf_r>
10014f54:	89a3      	ldrh	r3, [r4, #12]
10014f56:	4318      	orrs	r0, r3
10014f58:	81a0      	strh	r0, [r4, #12]
10014f5a:	2d00      	cmp	r5, #0
10014f5c:	d101      	bne.n	10014f62 <setvbuf+0xaa>
10014f5e:	9d02      	ldr	r5, [sp, #8]
10014f60:	e001      	b.n	10014f66 <setvbuf+0xae>
10014f62:	2f00      	cmp	r7, #0
10014f64:	d125      	bne.n	10014fb2 <setvbuf+0xfa>
10014f66:	0028      	movs	r0, r5
10014f68:	f7ff fdee 	bl	10014b48 <malloc>
10014f6c:	9501      	str	r5, [sp, #4]
10014f6e:	1e07      	subs	r7, r0, #0
10014f70:	d11a      	bne.n	10014fa8 <setvbuf+0xf0>
10014f72:	9b02      	ldr	r3, [sp, #8]
10014f74:	9301      	str	r3, [sp, #4]
10014f76:	42ab      	cmp	r3, r5
10014f78:	d102      	bne.n	10014f80 <setvbuf+0xc8>
10014f7a:	2001      	movs	r0, #1
10014f7c:	4240      	negs	r0, r0
10014f7e:	e006      	b.n	10014f8e <setvbuf+0xd6>
10014f80:	9801      	ldr	r0, [sp, #4]
10014f82:	f7ff fde1 	bl	10014b48 <malloc>
10014f86:	1e07      	subs	r7, r0, #0
10014f88:	d10e      	bne.n	10014fa8 <setvbuf+0xf0>
10014f8a:	e7f6      	b.n	10014f7a <setvbuf+0xc2>
10014f8c:	2000      	movs	r0, #0
10014f8e:	2202      	movs	r2, #2
10014f90:	89a3      	ldrh	r3, [r4, #12]
10014f92:	4313      	orrs	r3, r2
10014f94:	81a3      	strh	r3, [r4, #12]
10014f96:	2300      	movs	r3, #0
10014f98:	60a3      	str	r3, [r4, #8]
10014f9a:	0023      	movs	r3, r4
10014f9c:	3347      	adds	r3, #71	; 0x47
10014f9e:	6023      	str	r3, [r4, #0]
10014fa0:	6123      	str	r3, [r4, #16]
10014fa2:	2301      	movs	r3, #1
10014fa4:	6163      	str	r3, [r4, #20]
10014fa6:	e02a      	b.n	10014ffe <setvbuf+0x146>
10014fa8:	2280      	movs	r2, #128	; 0x80
10014faa:	89a3      	ldrh	r3, [r4, #12]
10014fac:	9d01      	ldr	r5, [sp, #4]
10014fae:	4313      	orrs	r3, r2
10014fb0:	81a3      	strh	r3, [r4, #12]
10014fb2:	69b3      	ldr	r3, [r6, #24]
10014fb4:	2b00      	cmp	r3, #0
10014fb6:	d102      	bne.n	10014fbe <setvbuf+0x106>
10014fb8:	0030      	movs	r0, r6
10014fba:	f000 f9ef 	bl	1001539c <__sinit>
10014fbe:	9b00      	ldr	r3, [sp, #0]
10014fc0:	2b01      	cmp	r3, #1
10014fc2:	d103      	bne.n	10014fcc <setvbuf+0x114>
10014fc4:	89a3      	ldrh	r3, [r4, #12]
10014fc6:	9a00      	ldr	r2, [sp, #0]
10014fc8:	431a      	orrs	r2, r3
10014fca:	81a2      	strh	r2, [r4, #12]
10014fcc:	2308      	movs	r3, #8
10014fce:	89a2      	ldrh	r2, [r4, #12]
10014fd0:	6027      	str	r7, [r4, #0]
10014fd2:	4013      	ands	r3, r2
10014fd4:	6127      	str	r7, [r4, #16]
10014fd6:	6165      	str	r5, [r4, #20]
10014fd8:	1e18      	subs	r0, r3, #0
10014fda:	d00c      	beq.n	10014ff6 <setvbuf+0x13e>
10014fdc:	2301      	movs	r3, #1
10014fde:	401a      	ands	r2, r3
10014fe0:	2300      	movs	r3, #0
10014fe2:	1e10      	subs	r0, r2, #0
10014fe4:	4298      	cmp	r0, r3
10014fe6:	d004      	beq.n	10014ff2 <setvbuf+0x13a>
10014fe8:	426d      	negs	r5, r5
10014fea:	60a3      	str	r3, [r4, #8]
10014fec:	61a5      	str	r5, [r4, #24]
10014fee:	0018      	movs	r0, r3
10014ff0:	e005      	b.n	10014ffe <setvbuf+0x146>
10014ff2:	60a5      	str	r5, [r4, #8]
10014ff4:	e003      	b.n	10014ffe <setvbuf+0x146>
10014ff6:	60a3      	str	r3, [r4, #8]
10014ff8:	e001      	b.n	10014ffe <setvbuf+0x146>
10014ffa:	2001      	movs	r0, #1
10014ffc:	4240      	negs	r0, r0
10014ffe:	b005      	add	sp, #20
10015000:	bdf0      	pop	{r4, r5, r6, r7, pc}
10015002:	46c0      	nop			; (mov r8, r8)
10015004:	10017f98 	.word	0x10017f98
10015008:	10017e3c 	.word	0x10017e3c
1001500c:	10017e5c 	.word	0x10017e5c
10015010:	10017e7c 	.word	0x10017e7c
10015014:	fffff35c 	.word	0xfffff35c

10015018 <__swbuf_r>:
10015018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001501a:	0005      	movs	r5, r0
1001501c:	000f      	movs	r7, r1
1001501e:	0014      	movs	r4, r2
10015020:	2800      	cmp	r0, #0
10015022:	d004      	beq.n	1001502e <__swbuf_r+0x16>
10015024:	6983      	ldr	r3, [r0, #24]
10015026:	2b00      	cmp	r3, #0
10015028:	d101      	bne.n	1001502e <__swbuf_r+0x16>
1001502a:	f000 f9b7 	bl	1001539c <__sinit>
1001502e:	4b23      	ldr	r3, [pc, #140]	; (100150bc <__swbuf_r+0xa4>)
10015030:	429c      	cmp	r4, r3
10015032:	d101      	bne.n	10015038 <__swbuf_r+0x20>
10015034:	686c      	ldr	r4, [r5, #4]
10015036:	e008      	b.n	1001504a <__swbuf_r+0x32>
10015038:	4b21      	ldr	r3, [pc, #132]	; (100150c0 <__swbuf_r+0xa8>)
1001503a:	429c      	cmp	r4, r3
1001503c:	d101      	bne.n	10015042 <__swbuf_r+0x2a>
1001503e:	68ac      	ldr	r4, [r5, #8]
10015040:	e003      	b.n	1001504a <__swbuf_r+0x32>
10015042:	4b20      	ldr	r3, [pc, #128]	; (100150c4 <__swbuf_r+0xac>)
10015044:	429c      	cmp	r4, r3
10015046:	d100      	bne.n	1001504a <__swbuf_r+0x32>
10015048:	68ec      	ldr	r4, [r5, #12]
1001504a:	69a3      	ldr	r3, [r4, #24]
1001504c:	60a3      	str	r3, [r4, #8]
1001504e:	89a3      	ldrh	r3, [r4, #12]
10015050:	071b      	lsls	r3, r3, #28
10015052:	d50a      	bpl.n	1001506a <__swbuf_r+0x52>
10015054:	6923      	ldr	r3, [r4, #16]
10015056:	2b00      	cmp	r3, #0
10015058:	d007      	beq.n	1001506a <__swbuf_r+0x52>
1001505a:	6823      	ldr	r3, [r4, #0]
1001505c:	6922      	ldr	r2, [r4, #16]
1001505e:	b2fe      	uxtb	r6, r7
10015060:	1a98      	subs	r0, r3, r2
10015062:	6963      	ldr	r3, [r4, #20]
10015064:	4298      	cmp	r0, r3
10015066:	db0f      	blt.n	10015088 <__swbuf_r+0x70>
10015068:	e008      	b.n	1001507c <__swbuf_r+0x64>
1001506a:	0021      	movs	r1, r4
1001506c:	0028      	movs	r0, r5
1001506e:	f000 f82b 	bl	100150c8 <__swsetup_r>
10015072:	2800      	cmp	r0, #0
10015074:	d0f1      	beq.n	1001505a <__swbuf_r+0x42>
10015076:	2001      	movs	r0, #1
10015078:	4240      	negs	r0, r0
1001507a:	e01d      	b.n	100150b8 <__swbuf_r+0xa0>
1001507c:	0021      	movs	r1, r4
1001507e:	0028      	movs	r0, r5
10015080:	f000 f91e 	bl	100152c0 <_fflush_r>
10015084:	2800      	cmp	r0, #0
10015086:	d1f6      	bne.n	10015076 <__swbuf_r+0x5e>
10015088:	68a3      	ldr	r3, [r4, #8]
1001508a:	3001      	adds	r0, #1
1001508c:	3b01      	subs	r3, #1
1001508e:	60a3      	str	r3, [r4, #8]
10015090:	6823      	ldr	r3, [r4, #0]
10015092:	1c5a      	adds	r2, r3, #1
10015094:	6022      	str	r2, [r4, #0]
10015096:	701f      	strb	r7, [r3, #0]
10015098:	6963      	ldr	r3, [r4, #20]
1001509a:	4298      	cmp	r0, r3
1001509c:	d005      	beq.n	100150aa <__swbuf_r+0x92>
1001509e:	89a3      	ldrh	r3, [r4, #12]
100150a0:	0030      	movs	r0, r6
100150a2:	07db      	lsls	r3, r3, #31
100150a4:	d508      	bpl.n	100150b8 <__swbuf_r+0xa0>
100150a6:	2e0a      	cmp	r6, #10
100150a8:	d106      	bne.n	100150b8 <__swbuf_r+0xa0>
100150aa:	0021      	movs	r1, r4
100150ac:	0028      	movs	r0, r5
100150ae:	f000 f907 	bl	100152c0 <_fflush_r>
100150b2:	2800      	cmp	r0, #0
100150b4:	d1df      	bne.n	10015076 <__swbuf_r+0x5e>
100150b6:	0030      	movs	r0, r6
100150b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100150ba:	46c0      	nop			; (mov r8, r8)
100150bc:	10017e3c 	.word	0x10017e3c
100150c0:	10017e5c 	.word	0x10017e5c
100150c4:	10017e7c 	.word	0x10017e7c

100150c8 <__swsetup_r>:
100150c8:	4b36      	ldr	r3, [pc, #216]	; (100151a4 <__swsetup_r+0xdc>)
100150ca:	b570      	push	{r4, r5, r6, lr}
100150cc:	681d      	ldr	r5, [r3, #0]
100150ce:	0006      	movs	r6, r0
100150d0:	000c      	movs	r4, r1
100150d2:	2d00      	cmp	r5, #0
100150d4:	d005      	beq.n	100150e2 <__swsetup_r+0x1a>
100150d6:	69ab      	ldr	r3, [r5, #24]
100150d8:	2b00      	cmp	r3, #0
100150da:	d102      	bne.n	100150e2 <__swsetup_r+0x1a>
100150dc:	0028      	movs	r0, r5
100150de:	f000 f95d 	bl	1001539c <__sinit>
100150e2:	4b31      	ldr	r3, [pc, #196]	; (100151a8 <__swsetup_r+0xe0>)
100150e4:	429c      	cmp	r4, r3
100150e6:	d101      	bne.n	100150ec <__swsetup_r+0x24>
100150e8:	686c      	ldr	r4, [r5, #4]
100150ea:	e008      	b.n	100150fe <__swsetup_r+0x36>
100150ec:	4b2f      	ldr	r3, [pc, #188]	; (100151ac <__swsetup_r+0xe4>)
100150ee:	429c      	cmp	r4, r3
100150f0:	d101      	bne.n	100150f6 <__swsetup_r+0x2e>
100150f2:	68ac      	ldr	r4, [r5, #8]
100150f4:	e003      	b.n	100150fe <__swsetup_r+0x36>
100150f6:	4b2e      	ldr	r3, [pc, #184]	; (100151b0 <__swsetup_r+0xe8>)
100150f8:	429c      	cmp	r4, r3
100150fa:	d100      	bne.n	100150fe <__swsetup_r+0x36>
100150fc:	68ec      	ldr	r4, [r5, #12]
100150fe:	220c      	movs	r2, #12
10015100:	5ea3      	ldrsh	r3, [r4, r2]
10015102:	b29a      	uxth	r2, r3
10015104:	0711      	lsls	r1, r2, #28
10015106:	d423      	bmi.n	10015150 <__swsetup_r+0x88>
10015108:	06d1      	lsls	r1, r2, #27
1001510a:	d407      	bmi.n	1001511c <__swsetup_r+0x54>
1001510c:	2209      	movs	r2, #9
1001510e:	2001      	movs	r0, #1
10015110:	6032      	str	r2, [r6, #0]
10015112:	3237      	adds	r2, #55	; 0x37
10015114:	4313      	orrs	r3, r2
10015116:	81a3      	strh	r3, [r4, #12]
10015118:	4240      	negs	r0, r0
1001511a:	e042      	b.n	100151a2 <__swsetup_r+0xda>
1001511c:	0753      	lsls	r3, r2, #29
1001511e:	d513      	bpl.n	10015148 <__swsetup_r+0x80>
10015120:	6b61      	ldr	r1, [r4, #52]	; 0x34
10015122:	2900      	cmp	r1, #0
10015124:	d008      	beq.n	10015138 <__swsetup_r+0x70>
10015126:	0023      	movs	r3, r4
10015128:	3344      	adds	r3, #68	; 0x44
1001512a:	4299      	cmp	r1, r3
1001512c:	d002      	beq.n	10015134 <__swsetup_r+0x6c>
1001512e:	0030      	movs	r0, r6
10015130:	f7ff fd34 	bl	10014b9c <_free_r>
10015134:	2300      	movs	r3, #0
10015136:	6363      	str	r3, [r4, #52]	; 0x34
10015138:	2224      	movs	r2, #36	; 0x24
1001513a:	89a3      	ldrh	r3, [r4, #12]
1001513c:	4393      	bics	r3, r2
1001513e:	81a3      	strh	r3, [r4, #12]
10015140:	2300      	movs	r3, #0
10015142:	6063      	str	r3, [r4, #4]
10015144:	6923      	ldr	r3, [r4, #16]
10015146:	6023      	str	r3, [r4, #0]
10015148:	2208      	movs	r2, #8
1001514a:	89a3      	ldrh	r3, [r4, #12]
1001514c:	4313      	orrs	r3, r2
1001514e:	81a3      	strh	r3, [r4, #12]
10015150:	6923      	ldr	r3, [r4, #16]
10015152:	2b00      	cmp	r3, #0
10015154:	d10b      	bne.n	1001516e <__swsetup_r+0xa6>
10015156:	23a0      	movs	r3, #160	; 0xa0
10015158:	89a2      	ldrh	r2, [r4, #12]
1001515a:	009b      	lsls	r3, r3, #2
1001515c:	4013      	ands	r3, r2
1001515e:	2280      	movs	r2, #128	; 0x80
10015160:	0092      	lsls	r2, r2, #2
10015162:	4293      	cmp	r3, r2
10015164:	d003      	beq.n	1001516e <__swsetup_r+0xa6>
10015166:	0021      	movs	r1, r4
10015168:	0030      	movs	r0, r6
1001516a:	f000 f9d1 	bl	10015510 <__smakebuf_r>
1001516e:	2301      	movs	r3, #1
10015170:	89a2      	ldrh	r2, [r4, #12]
10015172:	4013      	ands	r3, r2
10015174:	d005      	beq.n	10015182 <__swsetup_r+0xba>
10015176:	2300      	movs	r3, #0
10015178:	60a3      	str	r3, [r4, #8]
1001517a:	6963      	ldr	r3, [r4, #20]
1001517c:	425b      	negs	r3, r3
1001517e:	61a3      	str	r3, [r4, #24]
10015180:	e003      	b.n	1001518a <__swsetup_r+0xc2>
10015182:	0792      	lsls	r2, r2, #30
10015184:	d400      	bmi.n	10015188 <__swsetup_r+0xc0>
10015186:	6963      	ldr	r3, [r4, #20]
10015188:	60a3      	str	r3, [r4, #8]
1001518a:	2000      	movs	r0, #0
1001518c:	6923      	ldr	r3, [r4, #16]
1001518e:	4283      	cmp	r3, r0
10015190:	d107      	bne.n	100151a2 <__swsetup_r+0xda>
10015192:	220c      	movs	r2, #12
10015194:	5ea3      	ldrsh	r3, [r4, r2]
10015196:	061a      	lsls	r2, r3, #24
10015198:	d503      	bpl.n	100151a2 <__swsetup_r+0xda>
1001519a:	2240      	movs	r2, #64	; 0x40
1001519c:	4313      	orrs	r3, r2
1001519e:	81a3      	strh	r3, [r4, #12]
100151a0:	3801      	subs	r0, #1
100151a2:	bd70      	pop	{r4, r5, r6, pc}
100151a4:	10017f98 	.word	0x10017f98
100151a8:	10017e3c 	.word	0x10017e3c
100151ac:	10017e5c 	.word	0x10017e5c
100151b0:	10017e7c 	.word	0x10017e7c

100151b4 <__sflush_r>:
100151b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100151b6:	898a      	ldrh	r2, [r1, #12]
100151b8:	0005      	movs	r5, r0
100151ba:	000c      	movs	r4, r1
100151bc:	0713      	lsls	r3, r2, #28
100151be:	d45a      	bmi.n	10015276 <__sflush_r+0xc2>
100151c0:	684b      	ldr	r3, [r1, #4]
100151c2:	2b00      	cmp	r3, #0
100151c4:	dc02      	bgt.n	100151cc <__sflush_r+0x18>
100151c6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
100151c8:	2b00      	cmp	r3, #0
100151ca:	dd19      	ble.n	10015200 <__sflush_r+0x4c>
100151cc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
100151ce:	2f00      	cmp	r7, #0
100151d0:	d016      	beq.n	10015200 <__sflush_r+0x4c>
100151d2:	2300      	movs	r3, #0
100151d4:	682e      	ldr	r6, [r5, #0]
100151d6:	602b      	str	r3, [r5, #0]
100151d8:	2380      	movs	r3, #128	; 0x80
100151da:	015b      	lsls	r3, r3, #5
100151dc:	401a      	ands	r2, r3
100151de:	d001      	beq.n	100151e4 <__sflush_r+0x30>
100151e0:	6d60      	ldr	r0, [r4, #84]	; 0x54
100151e2:	e014      	b.n	1001520e <__sflush_r+0x5a>
100151e4:	2301      	movs	r3, #1
100151e6:	6a21      	ldr	r1, [r4, #32]
100151e8:	0028      	movs	r0, r5
100151ea:	47b8      	blx	r7
100151ec:	1c43      	adds	r3, r0, #1
100151ee:	d10e      	bne.n	1001520e <__sflush_r+0x5a>
100151f0:	682b      	ldr	r3, [r5, #0]
100151f2:	2b00      	cmp	r3, #0
100151f4:	d00b      	beq.n	1001520e <__sflush_r+0x5a>
100151f6:	2b1d      	cmp	r3, #29
100151f8:	d001      	beq.n	100151fe <__sflush_r+0x4a>
100151fa:	2b16      	cmp	r3, #22
100151fc:	d102      	bne.n	10015204 <__sflush_r+0x50>
100151fe:	602e      	str	r6, [r5, #0]
10015200:	2000      	movs	r0, #0
10015202:	e05a      	b.n	100152ba <__sflush_r+0x106>
10015204:	2240      	movs	r2, #64	; 0x40
10015206:	89a3      	ldrh	r3, [r4, #12]
10015208:	4313      	orrs	r3, r2
1001520a:	81a3      	strh	r3, [r4, #12]
1001520c:	e055      	b.n	100152ba <__sflush_r+0x106>
1001520e:	89a3      	ldrh	r3, [r4, #12]
10015210:	075b      	lsls	r3, r3, #29
10015212:	d506      	bpl.n	10015222 <__sflush_r+0x6e>
10015214:	6863      	ldr	r3, [r4, #4]
10015216:	1ac0      	subs	r0, r0, r3
10015218:	6b63      	ldr	r3, [r4, #52]	; 0x34
1001521a:	2b00      	cmp	r3, #0
1001521c:	d001      	beq.n	10015222 <__sflush_r+0x6e>
1001521e:	6c23      	ldr	r3, [r4, #64]	; 0x40
10015220:	1ac0      	subs	r0, r0, r3
10015222:	2300      	movs	r3, #0
10015224:	0002      	movs	r2, r0
10015226:	6a21      	ldr	r1, [r4, #32]
10015228:	0028      	movs	r0, r5
1001522a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
1001522c:	47b8      	blx	r7
1001522e:	89a3      	ldrh	r3, [r4, #12]
10015230:	1c42      	adds	r2, r0, #1
10015232:	d106      	bne.n	10015242 <__sflush_r+0x8e>
10015234:	6829      	ldr	r1, [r5, #0]
10015236:	291d      	cmp	r1, #29
10015238:	d83a      	bhi.n	100152b0 <__sflush_r+0xfc>
1001523a:	4a20      	ldr	r2, [pc, #128]	; (100152bc <__sflush_r+0x108>)
1001523c:	40ca      	lsrs	r2, r1
1001523e:	07d2      	lsls	r2, r2, #31
10015240:	d536      	bpl.n	100152b0 <__sflush_r+0xfc>
10015242:	2200      	movs	r2, #0
10015244:	6062      	str	r2, [r4, #4]
10015246:	6922      	ldr	r2, [r4, #16]
10015248:	6022      	str	r2, [r4, #0]
1001524a:	04db      	lsls	r3, r3, #19
1001524c:	d505      	bpl.n	1001525a <__sflush_r+0xa6>
1001524e:	1c43      	adds	r3, r0, #1
10015250:	d102      	bne.n	10015258 <__sflush_r+0xa4>
10015252:	682b      	ldr	r3, [r5, #0]
10015254:	2b00      	cmp	r3, #0
10015256:	d100      	bne.n	1001525a <__sflush_r+0xa6>
10015258:	6560      	str	r0, [r4, #84]	; 0x54
1001525a:	6b61      	ldr	r1, [r4, #52]	; 0x34
1001525c:	602e      	str	r6, [r5, #0]
1001525e:	2900      	cmp	r1, #0
10015260:	d0ce      	beq.n	10015200 <__sflush_r+0x4c>
10015262:	0023      	movs	r3, r4
10015264:	3344      	adds	r3, #68	; 0x44
10015266:	4299      	cmp	r1, r3
10015268:	d002      	beq.n	10015270 <__sflush_r+0xbc>
1001526a:	0028      	movs	r0, r5
1001526c:	f7ff fc96 	bl	10014b9c <_free_r>
10015270:	2000      	movs	r0, #0
10015272:	6360      	str	r0, [r4, #52]	; 0x34
10015274:	e021      	b.n	100152ba <__sflush_r+0x106>
10015276:	690f      	ldr	r7, [r1, #16]
10015278:	2f00      	cmp	r7, #0
1001527a:	d0c1      	beq.n	10015200 <__sflush_r+0x4c>
1001527c:	680b      	ldr	r3, [r1, #0]
1001527e:	600f      	str	r7, [r1, #0]
10015280:	1bdb      	subs	r3, r3, r7
10015282:	9301      	str	r3, [sp, #4]
10015284:	2300      	movs	r3, #0
10015286:	0792      	lsls	r2, r2, #30
10015288:	d100      	bne.n	1001528c <__sflush_r+0xd8>
1001528a:	694b      	ldr	r3, [r1, #20]
1001528c:	60a3      	str	r3, [r4, #8]
1001528e:	e003      	b.n	10015298 <__sflush_r+0xe4>
10015290:	9b01      	ldr	r3, [sp, #4]
10015292:	183f      	adds	r7, r7, r0
10015294:	1a1b      	subs	r3, r3, r0
10015296:	9301      	str	r3, [sp, #4]
10015298:	9b01      	ldr	r3, [sp, #4]
1001529a:	2b00      	cmp	r3, #0
1001529c:	ddb0      	ble.n	10015200 <__sflush_r+0x4c>
1001529e:	9b01      	ldr	r3, [sp, #4]
100152a0:	003a      	movs	r2, r7
100152a2:	6a21      	ldr	r1, [r4, #32]
100152a4:	0028      	movs	r0, r5
100152a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
100152a8:	47b0      	blx	r6
100152aa:	2800      	cmp	r0, #0
100152ac:	dcf0      	bgt.n	10015290 <__sflush_r+0xdc>
100152ae:	89a3      	ldrh	r3, [r4, #12]
100152b0:	2240      	movs	r2, #64	; 0x40
100152b2:	2001      	movs	r0, #1
100152b4:	4313      	orrs	r3, r2
100152b6:	81a3      	strh	r3, [r4, #12]
100152b8:	4240      	negs	r0, r0
100152ba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100152bc:	20400001 	.word	0x20400001

100152c0 <_fflush_r>:
100152c0:	690b      	ldr	r3, [r1, #16]
100152c2:	b570      	push	{r4, r5, r6, lr}
100152c4:	0005      	movs	r5, r0
100152c6:	000c      	movs	r4, r1
100152c8:	2b00      	cmp	r3, #0
100152ca:	d101      	bne.n	100152d0 <_fflush_r+0x10>
100152cc:	2000      	movs	r0, #0
100152ce:	e01c      	b.n	1001530a <_fflush_r+0x4a>
100152d0:	2800      	cmp	r0, #0
100152d2:	d004      	beq.n	100152de <_fflush_r+0x1e>
100152d4:	6983      	ldr	r3, [r0, #24]
100152d6:	2b00      	cmp	r3, #0
100152d8:	d101      	bne.n	100152de <_fflush_r+0x1e>
100152da:	f000 f85f 	bl	1001539c <__sinit>
100152de:	4b0b      	ldr	r3, [pc, #44]	; (1001530c <_fflush_r+0x4c>)
100152e0:	429c      	cmp	r4, r3
100152e2:	d101      	bne.n	100152e8 <_fflush_r+0x28>
100152e4:	686c      	ldr	r4, [r5, #4]
100152e6:	e008      	b.n	100152fa <_fflush_r+0x3a>
100152e8:	4b09      	ldr	r3, [pc, #36]	; (10015310 <_fflush_r+0x50>)
100152ea:	429c      	cmp	r4, r3
100152ec:	d101      	bne.n	100152f2 <_fflush_r+0x32>
100152ee:	68ac      	ldr	r4, [r5, #8]
100152f0:	e003      	b.n	100152fa <_fflush_r+0x3a>
100152f2:	4b08      	ldr	r3, [pc, #32]	; (10015314 <_fflush_r+0x54>)
100152f4:	429c      	cmp	r4, r3
100152f6:	d100      	bne.n	100152fa <_fflush_r+0x3a>
100152f8:	68ec      	ldr	r4, [r5, #12]
100152fa:	220c      	movs	r2, #12
100152fc:	5ea3      	ldrsh	r3, [r4, r2]
100152fe:	2b00      	cmp	r3, #0
10015300:	d0e4      	beq.n	100152cc <_fflush_r+0xc>
10015302:	0021      	movs	r1, r4
10015304:	0028      	movs	r0, r5
10015306:	f7ff ff55 	bl	100151b4 <__sflush_r>
1001530a:	bd70      	pop	{r4, r5, r6, pc}
1001530c:	10017e3c 	.word	0x10017e3c
10015310:	10017e5c 	.word	0x10017e5c
10015314:	10017e7c 	.word	0x10017e7c

10015318 <_cleanup_r>:
10015318:	b510      	push	{r4, lr}
1001531a:	4902      	ldr	r1, [pc, #8]	; (10015324 <_cleanup_r+0xc>)
1001531c:	f000 f8b0 	bl	10015480 <_fwalk_reent>
10015320:	bd10      	pop	{r4, pc}
10015322:	46c0      	nop			; (mov r8, r8)
10015324:	100152c1 	.word	0x100152c1

10015328 <std.isra.0>:
10015328:	2300      	movs	r3, #0
1001532a:	b510      	push	{r4, lr}
1001532c:	0004      	movs	r4, r0
1001532e:	6003      	str	r3, [r0, #0]
10015330:	6043      	str	r3, [r0, #4]
10015332:	6083      	str	r3, [r0, #8]
10015334:	8181      	strh	r1, [r0, #12]
10015336:	6643      	str	r3, [r0, #100]	; 0x64
10015338:	81c2      	strh	r2, [r0, #14]
1001533a:	6103      	str	r3, [r0, #16]
1001533c:	6143      	str	r3, [r0, #20]
1001533e:	6183      	str	r3, [r0, #24]
10015340:	0019      	movs	r1, r3
10015342:	2208      	movs	r2, #8
10015344:	305c      	adds	r0, #92	; 0x5c
10015346:	f7ff fc21 	bl	10014b8c <memset>
1001534a:	4b05      	ldr	r3, [pc, #20]	; (10015360 <std.isra.0+0x38>)
1001534c:	6224      	str	r4, [r4, #32]
1001534e:	6263      	str	r3, [r4, #36]	; 0x24
10015350:	4b04      	ldr	r3, [pc, #16]	; (10015364 <std.isra.0+0x3c>)
10015352:	62a3      	str	r3, [r4, #40]	; 0x28
10015354:	4b04      	ldr	r3, [pc, #16]	; (10015368 <std.isra.0+0x40>)
10015356:	62e3      	str	r3, [r4, #44]	; 0x2c
10015358:	4b04      	ldr	r3, [pc, #16]	; (1001536c <std.isra.0+0x44>)
1001535a:	6323      	str	r3, [r4, #48]	; 0x30
1001535c:	bd10      	pop	{r4, pc}
1001535e:	46c0      	nop			; (mov r8, r8)
10015360:	10015ba1 	.word	0x10015ba1
10015364:	10015bc9 	.word	0x10015bc9
10015368:	10015c01 	.word	0x10015c01
1001536c:	10015c2d 	.word	0x10015c2d

10015370 <__sfmoreglue>:
10015370:	b570      	push	{r4, r5, r6, lr}
10015372:	2568      	movs	r5, #104	; 0x68
10015374:	1e4b      	subs	r3, r1, #1
10015376:	435d      	muls	r5, r3
10015378:	000e      	movs	r6, r1
1001537a:	0029      	movs	r1, r5
1001537c:	3174      	adds	r1, #116	; 0x74
1001537e:	f7ff fc53 	bl	10014c28 <_malloc_r>
10015382:	1e04      	subs	r4, r0, #0
10015384:	d008      	beq.n	10015398 <__sfmoreglue+0x28>
10015386:	2100      	movs	r1, #0
10015388:	002a      	movs	r2, r5
1001538a:	6001      	str	r1, [r0, #0]
1001538c:	6046      	str	r6, [r0, #4]
1001538e:	300c      	adds	r0, #12
10015390:	60a0      	str	r0, [r4, #8]
10015392:	3268      	adds	r2, #104	; 0x68
10015394:	f7ff fbfa 	bl	10014b8c <memset>
10015398:	0020      	movs	r0, r4
1001539a:	bd70      	pop	{r4, r5, r6, pc}

1001539c <__sinit>:
1001539c:	6983      	ldr	r3, [r0, #24]
1001539e:	b513      	push	{r0, r1, r4, lr}
100153a0:	0004      	movs	r4, r0
100153a2:	2b00      	cmp	r3, #0
100153a4:	d128      	bne.n	100153f8 <__sinit+0x5c>
100153a6:	6483      	str	r3, [r0, #72]	; 0x48
100153a8:	64c3      	str	r3, [r0, #76]	; 0x4c
100153aa:	6503      	str	r3, [r0, #80]	; 0x50
100153ac:	4b13      	ldr	r3, [pc, #76]	; (100153fc <__sinit+0x60>)
100153ae:	4a14      	ldr	r2, [pc, #80]	; (10015400 <__sinit+0x64>)
100153b0:	681b      	ldr	r3, [r3, #0]
100153b2:	6282      	str	r2, [r0, #40]	; 0x28
100153b4:	9301      	str	r3, [sp, #4]
100153b6:	4298      	cmp	r0, r3
100153b8:	d101      	bne.n	100153be <__sinit+0x22>
100153ba:	2301      	movs	r3, #1
100153bc:	6183      	str	r3, [r0, #24]
100153be:	0020      	movs	r0, r4
100153c0:	f000 f820 	bl	10015404 <__sfp>
100153c4:	6060      	str	r0, [r4, #4]
100153c6:	0020      	movs	r0, r4
100153c8:	f000 f81c 	bl	10015404 <__sfp>
100153cc:	60a0      	str	r0, [r4, #8]
100153ce:	0020      	movs	r0, r4
100153d0:	f000 f818 	bl	10015404 <__sfp>
100153d4:	2200      	movs	r2, #0
100153d6:	60e0      	str	r0, [r4, #12]
100153d8:	2104      	movs	r1, #4
100153da:	6860      	ldr	r0, [r4, #4]
100153dc:	f7ff ffa4 	bl	10015328 <std.isra.0>
100153e0:	2201      	movs	r2, #1
100153e2:	2109      	movs	r1, #9
100153e4:	68a0      	ldr	r0, [r4, #8]
100153e6:	f7ff ff9f 	bl	10015328 <std.isra.0>
100153ea:	2202      	movs	r2, #2
100153ec:	2112      	movs	r1, #18
100153ee:	68e0      	ldr	r0, [r4, #12]
100153f0:	f7ff ff9a 	bl	10015328 <std.isra.0>
100153f4:	2301      	movs	r3, #1
100153f6:	61a3      	str	r3, [r4, #24]
100153f8:	bd13      	pop	{r0, r1, r4, pc}
100153fa:	46c0      	nop			; (mov r8, r8)
100153fc:	10017e38 	.word	0x10017e38
10015400:	10015319 	.word	0x10015319

10015404 <__sfp>:
10015404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10015406:	4b1d      	ldr	r3, [pc, #116]	; (1001547c <__sfp+0x78>)
10015408:	0006      	movs	r6, r0
1001540a:	681d      	ldr	r5, [r3, #0]
1001540c:	69ab      	ldr	r3, [r5, #24]
1001540e:	2b00      	cmp	r3, #0
10015410:	d102      	bne.n	10015418 <__sfp+0x14>
10015412:	0028      	movs	r0, r5
10015414:	f7ff ffc2 	bl	1001539c <__sinit>
10015418:	3548      	adds	r5, #72	; 0x48
1001541a:	68ac      	ldr	r4, [r5, #8]
1001541c:	686b      	ldr	r3, [r5, #4]
1001541e:	3b01      	subs	r3, #1
10015420:	d405      	bmi.n	1001542e <__sfp+0x2a>
10015422:	220c      	movs	r2, #12
10015424:	5ea7      	ldrsh	r7, [r4, r2]
10015426:	2f00      	cmp	r7, #0
10015428:	d010      	beq.n	1001544c <__sfp+0x48>
1001542a:	3468      	adds	r4, #104	; 0x68
1001542c:	e7f7      	b.n	1001541e <__sfp+0x1a>
1001542e:	682b      	ldr	r3, [r5, #0]
10015430:	2b00      	cmp	r3, #0
10015432:	d001      	beq.n	10015438 <__sfp+0x34>
10015434:	682d      	ldr	r5, [r5, #0]
10015436:	e7f0      	b.n	1001541a <__sfp+0x16>
10015438:	2104      	movs	r1, #4
1001543a:	0030      	movs	r0, r6
1001543c:	f7ff ff98 	bl	10015370 <__sfmoreglue>
10015440:	6028      	str	r0, [r5, #0]
10015442:	2800      	cmp	r0, #0
10015444:	d1f6      	bne.n	10015434 <__sfp+0x30>
10015446:	230c      	movs	r3, #12
10015448:	6033      	str	r3, [r6, #0]
1001544a:	e016      	b.n	1001547a <__sfp+0x76>
1001544c:	2301      	movs	r3, #1
1001544e:	0020      	movs	r0, r4
10015450:	425b      	negs	r3, r3
10015452:	81e3      	strh	r3, [r4, #14]
10015454:	3302      	adds	r3, #2
10015456:	81a3      	strh	r3, [r4, #12]
10015458:	6667      	str	r7, [r4, #100]	; 0x64
1001545a:	6027      	str	r7, [r4, #0]
1001545c:	60a7      	str	r7, [r4, #8]
1001545e:	6067      	str	r7, [r4, #4]
10015460:	6127      	str	r7, [r4, #16]
10015462:	6167      	str	r7, [r4, #20]
10015464:	61a7      	str	r7, [r4, #24]
10015466:	305c      	adds	r0, #92	; 0x5c
10015468:	2208      	movs	r2, #8
1001546a:	0039      	movs	r1, r7
1001546c:	f7ff fb8e 	bl	10014b8c <memset>
10015470:	0020      	movs	r0, r4
10015472:	6367      	str	r7, [r4, #52]	; 0x34
10015474:	63a7      	str	r7, [r4, #56]	; 0x38
10015476:	64a7      	str	r7, [r4, #72]	; 0x48
10015478:	64e7      	str	r7, [r4, #76]	; 0x4c
1001547a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1001547c:	10017e38 	.word	0x10017e38

10015480 <_fwalk_reent>:
10015480:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10015482:	0004      	movs	r4, r0
10015484:	0007      	movs	r7, r0
10015486:	2600      	movs	r6, #0
10015488:	9101      	str	r1, [sp, #4]
1001548a:	3448      	adds	r4, #72	; 0x48
1001548c:	2c00      	cmp	r4, #0
1001548e:	d016      	beq.n	100154be <_fwalk_reent+0x3e>
10015490:	6863      	ldr	r3, [r4, #4]
10015492:	68a5      	ldr	r5, [r4, #8]
10015494:	9300      	str	r3, [sp, #0]
10015496:	9b00      	ldr	r3, [sp, #0]
10015498:	3b01      	subs	r3, #1
1001549a:	9300      	str	r3, [sp, #0]
1001549c:	d40d      	bmi.n	100154ba <_fwalk_reent+0x3a>
1001549e:	89ab      	ldrh	r3, [r5, #12]
100154a0:	2b01      	cmp	r3, #1
100154a2:	d908      	bls.n	100154b6 <_fwalk_reent+0x36>
100154a4:	220e      	movs	r2, #14
100154a6:	5eab      	ldrsh	r3, [r5, r2]
100154a8:	3301      	adds	r3, #1
100154aa:	d004      	beq.n	100154b6 <_fwalk_reent+0x36>
100154ac:	0029      	movs	r1, r5
100154ae:	0038      	movs	r0, r7
100154b0:	9b01      	ldr	r3, [sp, #4]
100154b2:	4798      	blx	r3
100154b4:	4306      	orrs	r6, r0
100154b6:	3568      	adds	r5, #104	; 0x68
100154b8:	e7ed      	b.n	10015496 <_fwalk_reent+0x16>
100154ba:	6824      	ldr	r4, [r4, #0]
100154bc:	e7e6      	b.n	1001548c <_fwalk_reent+0xc>
100154be:	0030      	movs	r0, r6
100154c0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

100154c4 <__swhatbuf_r>:
100154c4:	b570      	push	{r4, r5, r6, lr}
100154c6:	000e      	movs	r6, r1
100154c8:	001d      	movs	r5, r3
100154ca:	230e      	movs	r3, #14
100154cc:	5ec9      	ldrsh	r1, [r1, r3]
100154ce:	b090      	sub	sp, #64	; 0x40
100154d0:	0014      	movs	r4, r2
100154d2:	2900      	cmp	r1, #0
100154d4:	da06      	bge.n	100154e4 <__swhatbuf_r+0x20>
100154d6:	2300      	movs	r3, #0
100154d8:	602b      	str	r3, [r5, #0]
100154da:	89b3      	ldrh	r3, [r6, #12]
100154dc:	061b      	lsls	r3, r3, #24
100154de:	d50f      	bpl.n	10015500 <__swhatbuf_r+0x3c>
100154e0:	2340      	movs	r3, #64	; 0x40
100154e2:	e00f      	b.n	10015504 <__swhatbuf_r+0x40>
100154e4:	aa01      	add	r2, sp, #4
100154e6:	f000 fbcd 	bl	10015c84 <_fstat_r>
100154ea:	2800      	cmp	r0, #0
100154ec:	dbf3      	blt.n	100154d6 <__swhatbuf_r+0x12>
100154ee:	23f0      	movs	r3, #240	; 0xf0
100154f0:	9a02      	ldr	r2, [sp, #8]
100154f2:	021b      	lsls	r3, r3, #8
100154f4:	4013      	ands	r3, r2
100154f6:	4a05      	ldr	r2, [pc, #20]	; (1001550c <__swhatbuf_r+0x48>)
100154f8:	189b      	adds	r3, r3, r2
100154fa:	425a      	negs	r2, r3
100154fc:	4153      	adcs	r3, r2
100154fe:	602b      	str	r3, [r5, #0]
10015500:	2380      	movs	r3, #128	; 0x80
10015502:	00db      	lsls	r3, r3, #3
10015504:	2000      	movs	r0, #0
10015506:	6023      	str	r3, [r4, #0]
10015508:	b010      	add	sp, #64	; 0x40
1001550a:	bd70      	pop	{r4, r5, r6, pc}
1001550c:	ffffe000 	.word	0xffffe000

10015510 <__smakebuf_r>:
10015510:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10015512:	2602      	movs	r6, #2
10015514:	898b      	ldrh	r3, [r1, #12]
10015516:	0005      	movs	r5, r0
10015518:	000c      	movs	r4, r1
1001551a:	4233      	tst	r3, r6
1001551c:	d110      	bne.n	10015540 <__smakebuf_r+0x30>
1001551e:	ab01      	add	r3, sp, #4
10015520:	466a      	mov	r2, sp
10015522:	f7ff ffcf 	bl	100154c4 <__swhatbuf_r>
10015526:	9900      	ldr	r1, [sp, #0]
10015528:	0007      	movs	r7, r0
1001552a:	0028      	movs	r0, r5
1001552c:	f7ff fb7c 	bl	10014c28 <_malloc_r>
10015530:	2800      	cmp	r0, #0
10015532:	d10c      	bne.n	1001554e <__smakebuf_r+0x3e>
10015534:	220c      	movs	r2, #12
10015536:	5ea3      	ldrsh	r3, [r4, r2]
10015538:	059a      	lsls	r2, r3, #22
1001553a:	d423      	bmi.n	10015584 <__smakebuf_r+0x74>
1001553c:	4333      	orrs	r3, r6
1001553e:	81a3      	strh	r3, [r4, #12]
10015540:	0023      	movs	r3, r4
10015542:	3347      	adds	r3, #71	; 0x47
10015544:	6023      	str	r3, [r4, #0]
10015546:	6123      	str	r3, [r4, #16]
10015548:	2301      	movs	r3, #1
1001554a:	6163      	str	r3, [r4, #20]
1001554c:	e01a      	b.n	10015584 <__smakebuf_r+0x74>
1001554e:	2280      	movs	r2, #128	; 0x80
10015550:	4b0d      	ldr	r3, [pc, #52]	; (10015588 <__smakebuf_r+0x78>)
10015552:	62ab      	str	r3, [r5, #40]	; 0x28
10015554:	89a3      	ldrh	r3, [r4, #12]
10015556:	6020      	str	r0, [r4, #0]
10015558:	4313      	orrs	r3, r2
1001555a:	81a3      	strh	r3, [r4, #12]
1001555c:	9b00      	ldr	r3, [sp, #0]
1001555e:	6120      	str	r0, [r4, #16]
10015560:	6163      	str	r3, [r4, #20]
10015562:	9b01      	ldr	r3, [sp, #4]
10015564:	2b00      	cmp	r3, #0
10015566:	d00a      	beq.n	1001557e <__smakebuf_r+0x6e>
10015568:	230e      	movs	r3, #14
1001556a:	5ee1      	ldrsh	r1, [r4, r3]
1001556c:	0028      	movs	r0, r5
1001556e:	f000 fb9b 	bl	10015ca8 <_isatty_r>
10015572:	2800      	cmp	r0, #0
10015574:	d003      	beq.n	1001557e <__smakebuf_r+0x6e>
10015576:	2201      	movs	r2, #1
10015578:	89a3      	ldrh	r3, [r4, #12]
1001557a:	4313      	orrs	r3, r2
1001557c:	81a3      	strh	r3, [r4, #12]
1001557e:	89a3      	ldrh	r3, [r4, #12]
10015580:	431f      	orrs	r7, r3
10015582:	81a7      	strh	r7, [r4, #12]
10015584:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10015586:	46c0      	nop			; (mov r8, r8)
10015588:	10015319 	.word	0x10015319

1001558c <__sfputc_r>:
1001558c:	6893      	ldr	r3, [r2, #8]
1001558e:	b510      	push	{r4, lr}
10015590:	3b01      	subs	r3, #1
10015592:	6093      	str	r3, [r2, #8]
10015594:	2b00      	cmp	r3, #0
10015596:	da05      	bge.n	100155a4 <__sfputc_r+0x18>
10015598:	6994      	ldr	r4, [r2, #24]
1001559a:	42a3      	cmp	r3, r4
1001559c:	db08      	blt.n	100155b0 <__sfputc_r+0x24>
1001559e:	b2cb      	uxtb	r3, r1
100155a0:	2b0a      	cmp	r3, #10
100155a2:	d005      	beq.n	100155b0 <__sfputc_r+0x24>
100155a4:	6813      	ldr	r3, [r2, #0]
100155a6:	1c58      	adds	r0, r3, #1
100155a8:	6010      	str	r0, [r2, #0]
100155aa:	7019      	strb	r1, [r3, #0]
100155ac:	b2c8      	uxtb	r0, r1
100155ae:	e001      	b.n	100155b4 <__sfputc_r+0x28>
100155b0:	f7ff fd32 	bl	10015018 <__swbuf_r>
100155b4:	bd10      	pop	{r4, pc}

100155b6 <__sfputs_r>:
100155b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100155b8:	0006      	movs	r6, r0
100155ba:	000f      	movs	r7, r1
100155bc:	0014      	movs	r4, r2
100155be:	18d5      	adds	r5, r2, r3
100155c0:	42ac      	cmp	r4, r5
100155c2:	d008      	beq.n	100155d6 <__sfputs_r+0x20>
100155c4:	7821      	ldrb	r1, [r4, #0]
100155c6:	003a      	movs	r2, r7
100155c8:	0030      	movs	r0, r6
100155ca:	f7ff ffdf 	bl	1001558c <__sfputc_r>
100155ce:	3401      	adds	r4, #1
100155d0:	1c43      	adds	r3, r0, #1
100155d2:	d1f5      	bne.n	100155c0 <__sfputs_r+0xa>
100155d4:	e000      	b.n	100155d8 <__sfputs_r+0x22>
100155d6:	2000      	movs	r0, #0
100155d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

100155dc <_vfiprintf_r>:
100155dc:	b5f0      	push	{r4, r5, r6, r7, lr}
100155de:	b09f      	sub	sp, #124	; 0x7c
100155e0:	0006      	movs	r6, r0
100155e2:	000f      	movs	r7, r1
100155e4:	9202      	str	r2, [sp, #8]
100155e6:	9305      	str	r3, [sp, #20]
100155e8:	2800      	cmp	r0, #0
100155ea:	d004      	beq.n	100155f6 <_vfiprintf_r+0x1a>
100155ec:	6983      	ldr	r3, [r0, #24]
100155ee:	2b00      	cmp	r3, #0
100155f0:	d101      	bne.n	100155f6 <_vfiprintf_r+0x1a>
100155f2:	f7ff fed3 	bl	1001539c <__sinit>
100155f6:	4b7f      	ldr	r3, [pc, #508]	; (100157f4 <_vfiprintf_r+0x218>)
100155f8:	429f      	cmp	r7, r3
100155fa:	d101      	bne.n	10015600 <_vfiprintf_r+0x24>
100155fc:	6877      	ldr	r7, [r6, #4]
100155fe:	e008      	b.n	10015612 <_vfiprintf_r+0x36>
10015600:	4b7d      	ldr	r3, [pc, #500]	; (100157f8 <_vfiprintf_r+0x21c>)
10015602:	429f      	cmp	r7, r3
10015604:	d101      	bne.n	1001560a <_vfiprintf_r+0x2e>
10015606:	68b7      	ldr	r7, [r6, #8]
10015608:	e003      	b.n	10015612 <_vfiprintf_r+0x36>
1001560a:	4b7c      	ldr	r3, [pc, #496]	; (100157fc <_vfiprintf_r+0x220>)
1001560c:	429f      	cmp	r7, r3
1001560e:	d100      	bne.n	10015612 <_vfiprintf_r+0x36>
10015610:	68f7      	ldr	r7, [r6, #12]
10015612:	89bb      	ldrh	r3, [r7, #12]
10015614:	071b      	lsls	r3, r3, #28
10015616:	d50a      	bpl.n	1001562e <_vfiprintf_r+0x52>
10015618:	693b      	ldr	r3, [r7, #16]
1001561a:	2b00      	cmp	r3, #0
1001561c:	d007      	beq.n	1001562e <_vfiprintf_r+0x52>
1001561e:	2300      	movs	r3, #0
10015620:	ad06      	add	r5, sp, #24
10015622:	616b      	str	r3, [r5, #20]
10015624:	3320      	adds	r3, #32
10015626:	766b      	strb	r3, [r5, #25]
10015628:	3310      	adds	r3, #16
1001562a:	76ab      	strb	r3, [r5, #26]
1001562c:	e03d      	b.n	100156aa <_vfiprintf_r+0xce>
1001562e:	0039      	movs	r1, r7
10015630:	0030      	movs	r0, r6
10015632:	f7ff fd49 	bl	100150c8 <__swsetup_r>
10015636:	2800      	cmp	r0, #0
10015638:	d0f1      	beq.n	1001561e <_vfiprintf_r+0x42>
1001563a:	2001      	movs	r0, #1
1001563c:	4240      	negs	r0, r0
1001563e:	e0d6      	b.n	100157ee <_vfiprintf_r+0x212>
10015640:	9a05      	ldr	r2, [sp, #20]
10015642:	1d11      	adds	r1, r2, #4
10015644:	6812      	ldr	r2, [r2, #0]
10015646:	9105      	str	r1, [sp, #20]
10015648:	2a00      	cmp	r2, #0
1001564a:	da00      	bge.n	1001564e <_vfiprintf_r+0x72>
1001564c:	e07f      	b.n	1001574e <_vfiprintf_r+0x172>
1001564e:	9209      	str	r2, [sp, #36]	; 0x24
10015650:	3401      	adds	r4, #1
10015652:	7823      	ldrb	r3, [r4, #0]
10015654:	2b2e      	cmp	r3, #46	; 0x2e
10015656:	d100      	bne.n	1001565a <_vfiprintf_r+0x7e>
10015658:	e08d      	b.n	10015776 <_vfiprintf_r+0x19a>
1001565a:	7821      	ldrb	r1, [r4, #0]
1001565c:	2203      	movs	r2, #3
1001565e:	4868      	ldr	r0, [pc, #416]	; (10015800 <_vfiprintf_r+0x224>)
10015660:	f000 fb48 	bl	10015cf4 <memchr>
10015664:	2800      	cmp	r0, #0
10015666:	d007      	beq.n	10015678 <_vfiprintf_r+0x9c>
10015668:	4b65      	ldr	r3, [pc, #404]	; (10015800 <_vfiprintf_r+0x224>)
1001566a:	682a      	ldr	r2, [r5, #0]
1001566c:	1ac0      	subs	r0, r0, r3
1001566e:	2340      	movs	r3, #64	; 0x40
10015670:	4083      	lsls	r3, r0
10015672:	4313      	orrs	r3, r2
10015674:	602b      	str	r3, [r5, #0]
10015676:	3401      	adds	r4, #1
10015678:	7821      	ldrb	r1, [r4, #0]
1001567a:	1c63      	adds	r3, r4, #1
1001567c:	2206      	movs	r2, #6
1001567e:	4861      	ldr	r0, [pc, #388]	; (10015804 <_vfiprintf_r+0x228>)
10015680:	9302      	str	r3, [sp, #8]
10015682:	7629      	strb	r1, [r5, #24]
10015684:	f000 fb36 	bl	10015cf4 <memchr>
10015688:	2800      	cmp	r0, #0
1001568a:	d100      	bne.n	1001568e <_vfiprintf_r+0xb2>
1001568c:	e09d      	b.n	100157ca <_vfiprintf_r+0x1ee>
1001568e:	4b5e      	ldr	r3, [pc, #376]	; (10015808 <_vfiprintf_r+0x22c>)
10015690:	2b00      	cmp	r3, #0
10015692:	d000      	beq.n	10015696 <_vfiprintf_r+0xba>
10015694:	e090      	b.n	100157b8 <_vfiprintf_r+0x1dc>
10015696:	2207      	movs	r2, #7
10015698:	9b05      	ldr	r3, [sp, #20]
1001569a:	3307      	adds	r3, #7
1001569c:	4393      	bics	r3, r2
1001569e:	3308      	adds	r3, #8
100156a0:	9305      	str	r3, [sp, #20]
100156a2:	696b      	ldr	r3, [r5, #20]
100156a4:	9a03      	ldr	r2, [sp, #12]
100156a6:	189b      	adds	r3, r3, r2
100156a8:	616b      	str	r3, [r5, #20]
100156aa:	9c02      	ldr	r4, [sp, #8]
100156ac:	7823      	ldrb	r3, [r4, #0]
100156ae:	2b00      	cmp	r3, #0
100156b0:	d104      	bne.n	100156bc <_vfiprintf_r+0xe0>
100156b2:	9b02      	ldr	r3, [sp, #8]
100156b4:	1ae3      	subs	r3, r4, r3
100156b6:	9304      	str	r3, [sp, #16]
100156b8:	d012      	beq.n	100156e0 <_vfiprintf_r+0x104>
100156ba:	e003      	b.n	100156c4 <_vfiprintf_r+0xe8>
100156bc:	2b25      	cmp	r3, #37	; 0x25
100156be:	d0f8      	beq.n	100156b2 <_vfiprintf_r+0xd6>
100156c0:	3401      	adds	r4, #1
100156c2:	e7f3      	b.n	100156ac <_vfiprintf_r+0xd0>
100156c4:	9b04      	ldr	r3, [sp, #16]
100156c6:	9a02      	ldr	r2, [sp, #8]
100156c8:	0039      	movs	r1, r7
100156ca:	0030      	movs	r0, r6
100156cc:	f7ff ff73 	bl	100155b6 <__sfputs_r>
100156d0:	1c43      	adds	r3, r0, #1
100156d2:	d100      	bne.n	100156d6 <_vfiprintf_r+0xfa>
100156d4:	e086      	b.n	100157e4 <_vfiprintf_r+0x208>
100156d6:	696a      	ldr	r2, [r5, #20]
100156d8:	9b04      	ldr	r3, [sp, #16]
100156da:	4694      	mov	ip, r2
100156dc:	4463      	add	r3, ip
100156de:	616b      	str	r3, [r5, #20]
100156e0:	7823      	ldrb	r3, [r4, #0]
100156e2:	2b00      	cmp	r3, #0
100156e4:	d07e      	beq.n	100157e4 <_vfiprintf_r+0x208>
100156e6:	2201      	movs	r2, #1
100156e8:	2300      	movs	r3, #0
100156ea:	4252      	negs	r2, r2
100156ec:	606a      	str	r2, [r5, #4]
100156ee:	a902      	add	r1, sp, #8
100156f0:	3254      	adds	r2, #84	; 0x54
100156f2:	1852      	adds	r2, r2, r1
100156f4:	3401      	adds	r4, #1
100156f6:	602b      	str	r3, [r5, #0]
100156f8:	60eb      	str	r3, [r5, #12]
100156fa:	60ab      	str	r3, [r5, #8]
100156fc:	7013      	strb	r3, [r2, #0]
100156fe:	65ab      	str	r3, [r5, #88]	; 0x58
10015700:	7821      	ldrb	r1, [r4, #0]
10015702:	2205      	movs	r2, #5
10015704:	4841      	ldr	r0, [pc, #260]	; (1001580c <_vfiprintf_r+0x230>)
10015706:	f000 faf5 	bl	10015cf4 <memchr>
1001570a:	2800      	cmp	r0, #0
1001570c:	d008      	beq.n	10015720 <_vfiprintf_r+0x144>
1001570e:	4b3f      	ldr	r3, [pc, #252]	; (1001580c <_vfiprintf_r+0x230>)
10015710:	682a      	ldr	r2, [r5, #0]
10015712:	1ac0      	subs	r0, r0, r3
10015714:	2301      	movs	r3, #1
10015716:	4083      	lsls	r3, r0
10015718:	4313      	orrs	r3, r2
1001571a:	602b      	str	r3, [r5, #0]
1001571c:	3401      	adds	r4, #1
1001571e:	e7ef      	b.n	10015700 <_vfiprintf_r+0x124>
10015720:	682b      	ldr	r3, [r5, #0]
10015722:	06da      	lsls	r2, r3, #27
10015724:	d504      	bpl.n	10015730 <_vfiprintf_r+0x154>
10015726:	2253      	movs	r2, #83	; 0x53
10015728:	2120      	movs	r1, #32
1001572a:	a802      	add	r0, sp, #8
1001572c:	1812      	adds	r2, r2, r0
1001572e:	7011      	strb	r1, [r2, #0]
10015730:	071a      	lsls	r2, r3, #28
10015732:	d504      	bpl.n	1001573e <_vfiprintf_r+0x162>
10015734:	2253      	movs	r2, #83	; 0x53
10015736:	212b      	movs	r1, #43	; 0x2b
10015738:	a802      	add	r0, sp, #8
1001573a:	1812      	adds	r2, r2, r0
1001573c:	7011      	strb	r1, [r2, #0]
1001573e:	7822      	ldrb	r2, [r4, #0]
10015740:	2a2a      	cmp	r2, #42	; 0x2a
10015742:	d100      	bne.n	10015746 <_vfiprintf_r+0x16a>
10015744:	e77c      	b.n	10015640 <_vfiprintf_r+0x64>
10015746:	9b09      	ldr	r3, [sp, #36]	; 0x24
10015748:	2000      	movs	r0, #0
1001574a:	210a      	movs	r1, #10
1001574c:	e005      	b.n	1001575a <_vfiprintf_r+0x17e>
1001574e:	4252      	negs	r2, r2
10015750:	60ea      	str	r2, [r5, #12]
10015752:	2202      	movs	r2, #2
10015754:	4313      	orrs	r3, r2
10015756:	602b      	str	r3, [r5, #0]
10015758:	e77a      	b.n	10015650 <_vfiprintf_r+0x74>
1001575a:	7822      	ldrb	r2, [r4, #0]
1001575c:	3a30      	subs	r2, #48	; 0x30
1001575e:	2a09      	cmp	r2, #9
10015760:	d804      	bhi.n	1001576c <_vfiprintf_r+0x190>
10015762:	434b      	muls	r3, r1
10015764:	3401      	adds	r4, #1
10015766:	189b      	adds	r3, r3, r2
10015768:	2001      	movs	r0, #1
1001576a:	e7f6      	b.n	1001575a <_vfiprintf_r+0x17e>
1001576c:	2800      	cmp	r0, #0
1001576e:	d100      	bne.n	10015772 <_vfiprintf_r+0x196>
10015770:	e76f      	b.n	10015652 <_vfiprintf_r+0x76>
10015772:	9309      	str	r3, [sp, #36]	; 0x24
10015774:	e76d      	b.n	10015652 <_vfiprintf_r+0x76>
10015776:	7863      	ldrb	r3, [r4, #1]
10015778:	2b2a      	cmp	r3, #42	; 0x2a
1001577a:	d10a      	bne.n	10015792 <_vfiprintf_r+0x1b6>
1001577c:	9b05      	ldr	r3, [sp, #20]
1001577e:	3402      	adds	r4, #2
10015780:	1d1a      	adds	r2, r3, #4
10015782:	681b      	ldr	r3, [r3, #0]
10015784:	9205      	str	r2, [sp, #20]
10015786:	2b00      	cmp	r3, #0
10015788:	da01      	bge.n	1001578e <_vfiprintf_r+0x1b2>
1001578a:	2301      	movs	r3, #1
1001578c:	425b      	negs	r3, r3
1001578e:	9307      	str	r3, [sp, #28]
10015790:	e763      	b.n	1001565a <_vfiprintf_r+0x7e>
10015792:	2300      	movs	r3, #0
10015794:	200a      	movs	r0, #10
10015796:	001a      	movs	r2, r3
10015798:	3401      	adds	r4, #1
1001579a:	606b      	str	r3, [r5, #4]
1001579c:	7821      	ldrb	r1, [r4, #0]
1001579e:	3930      	subs	r1, #48	; 0x30
100157a0:	2909      	cmp	r1, #9
100157a2:	d804      	bhi.n	100157ae <_vfiprintf_r+0x1d2>
100157a4:	4342      	muls	r2, r0
100157a6:	3401      	adds	r4, #1
100157a8:	1852      	adds	r2, r2, r1
100157aa:	2301      	movs	r3, #1
100157ac:	e7f6      	b.n	1001579c <_vfiprintf_r+0x1c0>
100157ae:	2b00      	cmp	r3, #0
100157b0:	d100      	bne.n	100157b4 <_vfiprintf_r+0x1d8>
100157b2:	e752      	b.n	1001565a <_vfiprintf_r+0x7e>
100157b4:	9207      	str	r2, [sp, #28]
100157b6:	e750      	b.n	1001565a <_vfiprintf_r+0x7e>
100157b8:	ab05      	add	r3, sp, #20
100157ba:	9300      	str	r3, [sp, #0]
100157bc:	003a      	movs	r2, r7
100157be:	4b14      	ldr	r3, [pc, #80]	; (10015810 <_vfiprintf_r+0x234>)
100157c0:	0029      	movs	r1, r5
100157c2:	0030      	movs	r0, r6
100157c4:	e000      	b.n	100157c8 <_vfiprintf_r+0x1ec>
100157c6:	bf00      	nop
100157c8:	e007      	b.n	100157da <_vfiprintf_r+0x1fe>
100157ca:	ab05      	add	r3, sp, #20
100157cc:	9300      	str	r3, [sp, #0]
100157ce:	003a      	movs	r2, r7
100157d0:	4b0f      	ldr	r3, [pc, #60]	; (10015810 <_vfiprintf_r+0x234>)
100157d2:	0029      	movs	r1, r5
100157d4:	0030      	movs	r0, r6
100157d6:	f000 f88b 	bl	100158f0 <_printf_i>
100157da:	9003      	str	r0, [sp, #12]
100157dc:	9b03      	ldr	r3, [sp, #12]
100157de:	3301      	adds	r3, #1
100157e0:	d000      	beq.n	100157e4 <_vfiprintf_r+0x208>
100157e2:	e75e      	b.n	100156a2 <_vfiprintf_r+0xc6>
100157e4:	89bb      	ldrh	r3, [r7, #12]
100157e6:	065b      	lsls	r3, r3, #25
100157e8:	d500      	bpl.n	100157ec <_vfiprintf_r+0x210>
100157ea:	e726      	b.n	1001563a <_vfiprintf_r+0x5e>
100157ec:	980b      	ldr	r0, [sp, #44]	; 0x2c
100157ee:	b01f      	add	sp, #124	; 0x7c
100157f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100157f2:	46c0      	nop			; (mov r8, r8)
100157f4:	10017e3c 	.word	0x10017e3c
100157f8:	10017e5c 	.word	0x10017e5c
100157fc:	10017e7c 	.word	0x10017e7c
10015800:	10017ea2 	.word	0x10017ea2
10015804:	10017ea6 	.word	0x10017ea6
10015808:	00000000 	.word	0x00000000
1001580c:	10017e9c 	.word	0x10017e9c
10015810:	100155b7 	.word	0x100155b7

10015814 <_printf_common>:
10015814:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10015816:	0017      	movs	r7, r2
10015818:	9301      	str	r3, [sp, #4]
1001581a:	688a      	ldr	r2, [r1, #8]
1001581c:	690b      	ldr	r3, [r1, #16]
1001581e:	9000      	str	r0, [sp, #0]
10015820:	000c      	movs	r4, r1
10015822:	4293      	cmp	r3, r2
10015824:	da00      	bge.n	10015828 <_printf_common+0x14>
10015826:	0013      	movs	r3, r2
10015828:	0022      	movs	r2, r4
1001582a:	603b      	str	r3, [r7, #0]
1001582c:	3243      	adds	r2, #67	; 0x43
1001582e:	7812      	ldrb	r2, [r2, #0]
10015830:	2a00      	cmp	r2, #0
10015832:	d001      	beq.n	10015838 <_printf_common+0x24>
10015834:	3301      	adds	r3, #1
10015836:	603b      	str	r3, [r7, #0]
10015838:	6823      	ldr	r3, [r4, #0]
1001583a:	069b      	lsls	r3, r3, #26
1001583c:	d502      	bpl.n	10015844 <_printf_common+0x30>
1001583e:	683b      	ldr	r3, [r7, #0]
10015840:	3302      	adds	r3, #2
10015842:	603b      	str	r3, [r7, #0]
10015844:	2506      	movs	r5, #6
10015846:	6823      	ldr	r3, [r4, #0]
10015848:	401d      	ands	r5, r3
1001584a:	d01e      	beq.n	1001588a <_printf_common+0x76>
1001584c:	0023      	movs	r3, r4
1001584e:	3343      	adds	r3, #67	; 0x43
10015850:	781b      	ldrb	r3, [r3, #0]
10015852:	1e5a      	subs	r2, r3, #1
10015854:	4193      	sbcs	r3, r2
10015856:	6822      	ldr	r2, [r4, #0]
10015858:	0692      	lsls	r2, r2, #26
1001585a:	d51c      	bpl.n	10015896 <_printf_common+0x82>
1001585c:	2030      	movs	r0, #48	; 0x30
1001585e:	18e1      	adds	r1, r4, r3
10015860:	3143      	adds	r1, #67	; 0x43
10015862:	7008      	strb	r0, [r1, #0]
10015864:	0021      	movs	r1, r4
10015866:	1c5a      	adds	r2, r3, #1
10015868:	3145      	adds	r1, #69	; 0x45
1001586a:	7809      	ldrb	r1, [r1, #0]
1001586c:	18a2      	adds	r2, r4, r2
1001586e:	3243      	adds	r2, #67	; 0x43
10015870:	3302      	adds	r3, #2
10015872:	7011      	strb	r1, [r2, #0]
10015874:	e00f      	b.n	10015896 <_printf_common+0x82>
10015876:	0022      	movs	r2, r4
10015878:	2301      	movs	r3, #1
1001587a:	3219      	adds	r2, #25
1001587c:	9901      	ldr	r1, [sp, #4]
1001587e:	9800      	ldr	r0, [sp, #0]
10015880:	9e08      	ldr	r6, [sp, #32]
10015882:	47b0      	blx	r6
10015884:	1c43      	adds	r3, r0, #1
10015886:	d00e      	beq.n	100158a6 <_printf_common+0x92>
10015888:	3501      	adds	r5, #1
1001588a:	68e3      	ldr	r3, [r4, #12]
1001588c:	683a      	ldr	r2, [r7, #0]
1001588e:	1a9b      	subs	r3, r3, r2
10015890:	429d      	cmp	r5, r3
10015892:	dbf0      	blt.n	10015876 <_printf_common+0x62>
10015894:	e7da      	b.n	1001584c <_printf_common+0x38>
10015896:	0022      	movs	r2, r4
10015898:	9901      	ldr	r1, [sp, #4]
1001589a:	3243      	adds	r2, #67	; 0x43
1001589c:	9800      	ldr	r0, [sp, #0]
1001589e:	9d08      	ldr	r5, [sp, #32]
100158a0:	47a8      	blx	r5
100158a2:	1c43      	adds	r3, r0, #1
100158a4:	d102      	bne.n	100158ac <_printf_common+0x98>
100158a6:	2001      	movs	r0, #1
100158a8:	4240      	negs	r0, r0
100158aa:	e020      	b.n	100158ee <_printf_common+0xda>
100158ac:	2306      	movs	r3, #6
100158ae:	6820      	ldr	r0, [r4, #0]
100158b0:	68e1      	ldr	r1, [r4, #12]
100158b2:	683a      	ldr	r2, [r7, #0]
100158b4:	4003      	ands	r3, r0
100158b6:	2500      	movs	r5, #0
100158b8:	2b04      	cmp	r3, #4
100158ba:	d103      	bne.n	100158c4 <_printf_common+0xb0>
100158bc:	1a8d      	subs	r5, r1, r2
100158be:	43eb      	mvns	r3, r5
100158c0:	17db      	asrs	r3, r3, #31
100158c2:	401d      	ands	r5, r3
100158c4:	68a3      	ldr	r3, [r4, #8]
100158c6:	6922      	ldr	r2, [r4, #16]
100158c8:	4293      	cmp	r3, r2
100158ca:	dd01      	ble.n	100158d0 <_printf_common+0xbc>
100158cc:	1a9b      	subs	r3, r3, r2
100158ce:	18ed      	adds	r5, r5, r3
100158d0:	2700      	movs	r7, #0
100158d2:	42bd      	cmp	r5, r7
100158d4:	d00a      	beq.n	100158ec <_printf_common+0xd8>
100158d6:	0022      	movs	r2, r4
100158d8:	2301      	movs	r3, #1
100158da:	321a      	adds	r2, #26
100158dc:	9901      	ldr	r1, [sp, #4]
100158de:	9800      	ldr	r0, [sp, #0]
100158e0:	9e08      	ldr	r6, [sp, #32]
100158e2:	47b0      	blx	r6
100158e4:	1c43      	adds	r3, r0, #1
100158e6:	d0de      	beq.n	100158a6 <_printf_common+0x92>
100158e8:	3701      	adds	r7, #1
100158ea:	e7f2      	b.n	100158d2 <_printf_common+0xbe>
100158ec:	2000      	movs	r0, #0
100158ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

100158f0 <_printf_i>:
100158f0:	b5f0      	push	{r4, r5, r6, r7, lr}
100158f2:	b08b      	sub	sp, #44	; 0x2c
100158f4:	9206      	str	r2, [sp, #24]
100158f6:	000a      	movs	r2, r1
100158f8:	3243      	adds	r2, #67	; 0x43
100158fa:	9307      	str	r3, [sp, #28]
100158fc:	9005      	str	r0, [sp, #20]
100158fe:	9204      	str	r2, [sp, #16]
10015900:	7e0a      	ldrb	r2, [r1, #24]
10015902:	000c      	movs	r4, r1
10015904:	9b10      	ldr	r3, [sp, #64]	; 0x40
10015906:	2a6e      	cmp	r2, #110	; 0x6e
10015908:	d100      	bne.n	1001590c <_printf_i+0x1c>
1001590a:	e0ab      	b.n	10015a64 <_printf_i+0x174>
1001590c:	d811      	bhi.n	10015932 <_printf_i+0x42>
1001590e:	2a63      	cmp	r2, #99	; 0x63
10015910:	d022      	beq.n	10015958 <_printf_i+0x68>
10015912:	d809      	bhi.n	10015928 <_printf_i+0x38>
10015914:	2a00      	cmp	r2, #0
10015916:	d100      	bne.n	1001591a <_printf_i+0x2a>
10015918:	e0b5      	b.n	10015a86 <_printf_i+0x196>
1001591a:	2a58      	cmp	r2, #88	; 0x58
1001591c:	d000      	beq.n	10015920 <_printf_i+0x30>
1001591e:	e0c5      	b.n	10015aac <_printf_i+0x1bc>
10015920:	3145      	adds	r1, #69	; 0x45
10015922:	700a      	strb	r2, [r1, #0]
10015924:	4a81      	ldr	r2, [pc, #516]	; (10015b2c <_printf_i+0x23c>)
10015926:	e04f      	b.n	100159c8 <_printf_i+0xd8>
10015928:	2a64      	cmp	r2, #100	; 0x64
1001592a:	d01d      	beq.n	10015968 <_printf_i+0x78>
1001592c:	2a69      	cmp	r2, #105	; 0x69
1001592e:	d01b      	beq.n	10015968 <_printf_i+0x78>
10015930:	e0bc      	b.n	10015aac <_printf_i+0x1bc>
10015932:	2a73      	cmp	r2, #115	; 0x73
10015934:	d100      	bne.n	10015938 <_printf_i+0x48>
10015936:	e0aa      	b.n	10015a8e <_printf_i+0x19e>
10015938:	d809      	bhi.n	1001594e <_printf_i+0x5e>
1001593a:	2a6f      	cmp	r2, #111	; 0x6f
1001593c:	d029      	beq.n	10015992 <_printf_i+0xa2>
1001593e:	2a70      	cmp	r2, #112	; 0x70
10015940:	d000      	beq.n	10015944 <_printf_i+0x54>
10015942:	e0b3      	b.n	10015aac <_printf_i+0x1bc>
10015944:	2220      	movs	r2, #32
10015946:	6809      	ldr	r1, [r1, #0]
10015948:	430a      	orrs	r2, r1
1001594a:	6022      	str	r2, [r4, #0]
1001594c:	e037      	b.n	100159be <_printf_i+0xce>
1001594e:	2a75      	cmp	r2, #117	; 0x75
10015950:	d01f      	beq.n	10015992 <_printf_i+0xa2>
10015952:	2a78      	cmp	r2, #120	; 0x78
10015954:	d033      	beq.n	100159be <_printf_i+0xce>
10015956:	e0a9      	b.n	10015aac <_printf_i+0x1bc>
10015958:	000e      	movs	r6, r1
1001595a:	681a      	ldr	r2, [r3, #0]
1001595c:	3642      	adds	r6, #66	; 0x42
1001595e:	1d11      	adds	r1, r2, #4
10015960:	6019      	str	r1, [r3, #0]
10015962:	6813      	ldr	r3, [r2, #0]
10015964:	7033      	strb	r3, [r6, #0]
10015966:	e0a4      	b.n	10015ab2 <_printf_i+0x1c2>
10015968:	6821      	ldr	r1, [r4, #0]
1001596a:	681a      	ldr	r2, [r3, #0]
1001596c:	0608      	lsls	r0, r1, #24
1001596e:	d406      	bmi.n	1001597e <_printf_i+0x8e>
10015970:	0649      	lsls	r1, r1, #25
10015972:	d504      	bpl.n	1001597e <_printf_i+0x8e>
10015974:	1d11      	adds	r1, r2, #4
10015976:	6019      	str	r1, [r3, #0]
10015978:	2300      	movs	r3, #0
1001597a:	5ed5      	ldrsh	r5, [r2, r3]
1001597c:	e002      	b.n	10015984 <_printf_i+0x94>
1001597e:	1d11      	adds	r1, r2, #4
10015980:	6019      	str	r1, [r3, #0]
10015982:	6815      	ldr	r5, [r2, #0]
10015984:	2d00      	cmp	r5, #0
10015986:	da3b      	bge.n	10015a00 <_printf_i+0x110>
10015988:	232d      	movs	r3, #45	; 0x2d
1001598a:	9a04      	ldr	r2, [sp, #16]
1001598c:	426d      	negs	r5, r5
1001598e:	7013      	strb	r3, [r2, #0]
10015990:	e036      	b.n	10015a00 <_printf_i+0x110>
10015992:	6821      	ldr	r1, [r4, #0]
10015994:	681a      	ldr	r2, [r3, #0]
10015996:	0608      	lsls	r0, r1, #24
10015998:	d406      	bmi.n	100159a8 <_printf_i+0xb8>
1001599a:	0649      	lsls	r1, r1, #25
1001599c:	d504      	bpl.n	100159a8 <_printf_i+0xb8>
1001599e:	6815      	ldr	r5, [r2, #0]
100159a0:	1d11      	adds	r1, r2, #4
100159a2:	6019      	str	r1, [r3, #0]
100159a4:	b2ad      	uxth	r5, r5
100159a6:	e002      	b.n	100159ae <_printf_i+0xbe>
100159a8:	1d11      	adds	r1, r2, #4
100159aa:	6019      	str	r1, [r3, #0]
100159ac:	6815      	ldr	r5, [r2, #0]
100159ae:	4b5f      	ldr	r3, [pc, #380]	; (10015b2c <_printf_i+0x23c>)
100159b0:	7e22      	ldrb	r2, [r4, #24]
100159b2:	9303      	str	r3, [sp, #12]
100159b4:	2708      	movs	r7, #8
100159b6:	2a6f      	cmp	r2, #111	; 0x6f
100159b8:	d01d      	beq.n	100159f6 <_printf_i+0x106>
100159ba:	270a      	movs	r7, #10
100159bc:	e01b      	b.n	100159f6 <_printf_i+0x106>
100159be:	0022      	movs	r2, r4
100159c0:	2178      	movs	r1, #120	; 0x78
100159c2:	3245      	adds	r2, #69	; 0x45
100159c4:	7011      	strb	r1, [r2, #0]
100159c6:	4a5a      	ldr	r2, [pc, #360]	; (10015b30 <_printf_i+0x240>)
100159c8:	6819      	ldr	r1, [r3, #0]
100159ca:	9203      	str	r2, [sp, #12]
100159cc:	1d08      	adds	r0, r1, #4
100159ce:	6822      	ldr	r2, [r4, #0]
100159d0:	6018      	str	r0, [r3, #0]
100159d2:	680d      	ldr	r5, [r1, #0]
100159d4:	0610      	lsls	r0, r2, #24
100159d6:	d402      	bmi.n	100159de <_printf_i+0xee>
100159d8:	0650      	lsls	r0, r2, #25
100159da:	d500      	bpl.n	100159de <_printf_i+0xee>
100159dc:	b2ad      	uxth	r5, r5
100159de:	07d3      	lsls	r3, r2, #31
100159e0:	d502      	bpl.n	100159e8 <_printf_i+0xf8>
100159e2:	2320      	movs	r3, #32
100159e4:	431a      	orrs	r2, r3
100159e6:	6022      	str	r2, [r4, #0]
100159e8:	2710      	movs	r7, #16
100159ea:	2d00      	cmp	r5, #0
100159ec:	d103      	bne.n	100159f6 <_printf_i+0x106>
100159ee:	2320      	movs	r3, #32
100159f0:	6822      	ldr	r2, [r4, #0]
100159f2:	439a      	bics	r2, r3
100159f4:	6022      	str	r2, [r4, #0]
100159f6:	0023      	movs	r3, r4
100159f8:	2200      	movs	r2, #0
100159fa:	3343      	adds	r3, #67	; 0x43
100159fc:	701a      	strb	r2, [r3, #0]
100159fe:	e002      	b.n	10015a06 <_printf_i+0x116>
10015a00:	270a      	movs	r7, #10
10015a02:	4b4a      	ldr	r3, [pc, #296]	; (10015b2c <_printf_i+0x23c>)
10015a04:	9303      	str	r3, [sp, #12]
10015a06:	6863      	ldr	r3, [r4, #4]
10015a08:	60a3      	str	r3, [r4, #8]
10015a0a:	2b00      	cmp	r3, #0
10015a0c:	db09      	blt.n	10015a22 <_printf_i+0x132>
10015a0e:	2204      	movs	r2, #4
10015a10:	6821      	ldr	r1, [r4, #0]
10015a12:	4391      	bics	r1, r2
10015a14:	6021      	str	r1, [r4, #0]
10015a16:	2d00      	cmp	r5, #0
10015a18:	d105      	bne.n	10015a26 <_printf_i+0x136>
10015a1a:	9e04      	ldr	r6, [sp, #16]
10015a1c:	2b00      	cmp	r3, #0
10015a1e:	d011      	beq.n	10015a44 <_printf_i+0x154>
10015a20:	e07b      	b.n	10015b1a <_printf_i+0x22a>
10015a22:	2d00      	cmp	r5, #0
10015a24:	d079      	beq.n	10015b1a <_printf_i+0x22a>
10015a26:	9e04      	ldr	r6, [sp, #16]
10015a28:	0028      	movs	r0, r5
10015a2a:	0039      	movs	r1, r7
10015a2c:	f7fd fa70 	bl	10012f10 <__aeabi_uidivmod>
10015a30:	9b03      	ldr	r3, [sp, #12]
10015a32:	3e01      	subs	r6, #1
10015a34:	5c5b      	ldrb	r3, [r3, r1]
10015a36:	0028      	movs	r0, r5
10015a38:	7033      	strb	r3, [r6, #0]
10015a3a:	0039      	movs	r1, r7
10015a3c:	f7fd f9e2 	bl	10012e04 <__aeabi_uidiv>
10015a40:	1e05      	subs	r5, r0, #0
10015a42:	d1f1      	bne.n	10015a28 <_printf_i+0x138>
10015a44:	2f08      	cmp	r7, #8
10015a46:	d109      	bne.n	10015a5c <_printf_i+0x16c>
10015a48:	6823      	ldr	r3, [r4, #0]
10015a4a:	07db      	lsls	r3, r3, #31
10015a4c:	d506      	bpl.n	10015a5c <_printf_i+0x16c>
10015a4e:	6863      	ldr	r3, [r4, #4]
10015a50:	6922      	ldr	r2, [r4, #16]
10015a52:	4293      	cmp	r3, r2
10015a54:	dc02      	bgt.n	10015a5c <_printf_i+0x16c>
10015a56:	2330      	movs	r3, #48	; 0x30
10015a58:	3e01      	subs	r6, #1
10015a5a:	7033      	strb	r3, [r6, #0]
10015a5c:	9b04      	ldr	r3, [sp, #16]
10015a5e:	1b9b      	subs	r3, r3, r6
10015a60:	6123      	str	r3, [r4, #16]
10015a62:	e02b      	b.n	10015abc <_printf_i+0x1cc>
10015a64:	6809      	ldr	r1, [r1, #0]
10015a66:	681a      	ldr	r2, [r3, #0]
10015a68:	0608      	lsls	r0, r1, #24
10015a6a:	d407      	bmi.n	10015a7c <_printf_i+0x18c>
10015a6c:	0649      	lsls	r1, r1, #25
10015a6e:	d505      	bpl.n	10015a7c <_printf_i+0x18c>
10015a70:	1d11      	adds	r1, r2, #4
10015a72:	6019      	str	r1, [r3, #0]
10015a74:	6813      	ldr	r3, [r2, #0]
10015a76:	8aa2      	ldrh	r2, [r4, #20]
10015a78:	801a      	strh	r2, [r3, #0]
10015a7a:	e004      	b.n	10015a86 <_printf_i+0x196>
10015a7c:	1d11      	adds	r1, r2, #4
10015a7e:	6019      	str	r1, [r3, #0]
10015a80:	6813      	ldr	r3, [r2, #0]
10015a82:	6962      	ldr	r2, [r4, #20]
10015a84:	601a      	str	r2, [r3, #0]
10015a86:	2300      	movs	r3, #0
10015a88:	9e04      	ldr	r6, [sp, #16]
10015a8a:	6123      	str	r3, [r4, #16]
10015a8c:	e016      	b.n	10015abc <_printf_i+0x1cc>
10015a8e:	681a      	ldr	r2, [r3, #0]
10015a90:	1d11      	adds	r1, r2, #4
10015a92:	6019      	str	r1, [r3, #0]
10015a94:	6816      	ldr	r6, [r2, #0]
10015a96:	2100      	movs	r1, #0
10015a98:	6862      	ldr	r2, [r4, #4]
10015a9a:	0030      	movs	r0, r6
10015a9c:	f000 f92a 	bl	10015cf4 <memchr>
10015aa0:	2800      	cmp	r0, #0
10015aa2:	d001      	beq.n	10015aa8 <_printf_i+0x1b8>
10015aa4:	1b80      	subs	r0, r0, r6
10015aa6:	6060      	str	r0, [r4, #4]
10015aa8:	6863      	ldr	r3, [r4, #4]
10015aaa:	e003      	b.n	10015ab4 <_printf_i+0x1c4>
10015aac:	0026      	movs	r6, r4
10015aae:	3642      	adds	r6, #66	; 0x42
10015ab0:	7032      	strb	r2, [r6, #0]
10015ab2:	2301      	movs	r3, #1
10015ab4:	6123      	str	r3, [r4, #16]
10015ab6:	2300      	movs	r3, #0
10015ab8:	9a04      	ldr	r2, [sp, #16]
10015aba:	7013      	strb	r3, [r2, #0]
10015abc:	9b07      	ldr	r3, [sp, #28]
10015abe:	aa09      	add	r2, sp, #36	; 0x24
10015ac0:	9300      	str	r3, [sp, #0]
10015ac2:	0021      	movs	r1, r4
10015ac4:	9b06      	ldr	r3, [sp, #24]
10015ac6:	9805      	ldr	r0, [sp, #20]
10015ac8:	f7ff fea4 	bl	10015814 <_printf_common>
10015acc:	1c43      	adds	r3, r0, #1
10015ace:	d102      	bne.n	10015ad6 <_printf_i+0x1e6>
10015ad0:	2001      	movs	r0, #1
10015ad2:	4240      	negs	r0, r0
10015ad4:	e027      	b.n	10015b26 <_printf_i+0x236>
10015ad6:	6923      	ldr	r3, [r4, #16]
10015ad8:	0032      	movs	r2, r6
10015ada:	9906      	ldr	r1, [sp, #24]
10015adc:	9805      	ldr	r0, [sp, #20]
10015ade:	9d07      	ldr	r5, [sp, #28]
10015ae0:	47a8      	blx	r5
10015ae2:	1c43      	adds	r3, r0, #1
10015ae4:	d0f4      	beq.n	10015ad0 <_printf_i+0x1e0>
10015ae6:	6823      	ldr	r3, [r4, #0]
10015ae8:	2500      	movs	r5, #0
10015aea:	079b      	lsls	r3, r3, #30
10015aec:	d40f      	bmi.n	10015b0e <_printf_i+0x21e>
10015aee:	9b09      	ldr	r3, [sp, #36]	; 0x24
10015af0:	68e0      	ldr	r0, [r4, #12]
10015af2:	4298      	cmp	r0, r3
10015af4:	da17      	bge.n	10015b26 <_printf_i+0x236>
10015af6:	0018      	movs	r0, r3
10015af8:	e015      	b.n	10015b26 <_printf_i+0x236>
10015afa:	0022      	movs	r2, r4
10015afc:	2301      	movs	r3, #1
10015afe:	3219      	adds	r2, #25
10015b00:	9906      	ldr	r1, [sp, #24]
10015b02:	9805      	ldr	r0, [sp, #20]
10015b04:	9e07      	ldr	r6, [sp, #28]
10015b06:	47b0      	blx	r6
10015b08:	1c43      	adds	r3, r0, #1
10015b0a:	d0e1      	beq.n	10015ad0 <_printf_i+0x1e0>
10015b0c:	3501      	adds	r5, #1
10015b0e:	68e3      	ldr	r3, [r4, #12]
10015b10:	9a09      	ldr	r2, [sp, #36]	; 0x24
10015b12:	1a9b      	subs	r3, r3, r2
10015b14:	429d      	cmp	r5, r3
10015b16:	dbf0      	blt.n	10015afa <_printf_i+0x20a>
10015b18:	e7e9      	b.n	10015aee <_printf_i+0x1fe>
10015b1a:	0026      	movs	r6, r4
10015b1c:	9b03      	ldr	r3, [sp, #12]
10015b1e:	3642      	adds	r6, #66	; 0x42
10015b20:	781b      	ldrb	r3, [r3, #0]
10015b22:	7033      	strb	r3, [r6, #0]
10015b24:	e78e      	b.n	10015a44 <_printf_i+0x154>
10015b26:	b00b      	add	sp, #44	; 0x2c
10015b28:	bdf0      	pop	{r4, r5, r6, r7, pc}
10015b2a:	46c0      	nop			; (mov r8, r8)
10015b2c:	10017ead 	.word	0x10017ead
10015b30:	10017ebe 	.word	0x10017ebe

10015b34 <_putc_r>:
10015b34:	b570      	push	{r4, r5, r6, lr}
10015b36:	0006      	movs	r6, r0
10015b38:	000d      	movs	r5, r1
10015b3a:	0014      	movs	r4, r2
10015b3c:	2800      	cmp	r0, #0
10015b3e:	d004      	beq.n	10015b4a <_putc_r+0x16>
10015b40:	6983      	ldr	r3, [r0, #24]
10015b42:	2b00      	cmp	r3, #0
10015b44:	d101      	bne.n	10015b4a <_putc_r+0x16>
10015b46:	f7ff fc29 	bl	1001539c <__sinit>
10015b4a:	4b12      	ldr	r3, [pc, #72]	; (10015b94 <_putc_r+0x60>)
10015b4c:	429c      	cmp	r4, r3
10015b4e:	d101      	bne.n	10015b54 <_putc_r+0x20>
10015b50:	6874      	ldr	r4, [r6, #4]
10015b52:	e008      	b.n	10015b66 <_putc_r+0x32>
10015b54:	4b10      	ldr	r3, [pc, #64]	; (10015b98 <_putc_r+0x64>)
10015b56:	429c      	cmp	r4, r3
10015b58:	d101      	bne.n	10015b5e <_putc_r+0x2a>
10015b5a:	68b4      	ldr	r4, [r6, #8]
10015b5c:	e003      	b.n	10015b66 <_putc_r+0x32>
10015b5e:	4b0f      	ldr	r3, [pc, #60]	; (10015b9c <_putc_r+0x68>)
10015b60:	429c      	cmp	r4, r3
10015b62:	d100      	bne.n	10015b66 <_putc_r+0x32>
10015b64:	68f4      	ldr	r4, [r6, #12]
10015b66:	68a3      	ldr	r3, [r4, #8]
10015b68:	3b01      	subs	r3, #1
10015b6a:	60a3      	str	r3, [r4, #8]
10015b6c:	2b00      	cmp	r3, #0
10015b6e:	da05      	bge.n	10015b7c <_putc_r+0x48>
10015b70:	69a2      	ldr	r2, [r4, #24]
10015b72:	4293      	cmp	r3, r2
10015b74:	db08      	blt.n	10015b88 <_putc_r+0x54>
10015b76:	b2eb      	uxtb	r3, r5
10015b78:	2b0a      	cmp	r3, #10
10015b7a:	d005      	beq.n	10015b88 <_putc_r+0x54>
10015b7c:	6823      	ldr	r3, [r4, #0]
10015b7e:	b2e8      	uxtb	r0, r5
10015b80:	1c5a      	adds	r2, r3, #1
10015b82:	6022      	str	r2, [r4, #0]
10015b84:	701d      	strb	r5, [r3, #0]
10015b86:	e004      	b.n	10015b92 <_putc_r+0x5e>
10015b88:	0022      	movs	r2, r4
10015b8a:	0029      	movs	r1, r5
10015b8c:	0030      	movs	r0, r6
10015b8e:	f7ff fa43 	bl	10015018 <__swbuf_r>
10015b92:	bd70      	pop	{r4, r5, r6, pc}
10015b94:	10017e3c 	.word	0x10017e3c
10015b98:	10017e5c 	.word	0x10017e5c
10015b9c:	10017e7c 	.word	0x10017e7c

10015ba0 <__sread>:
10015ba0:	b570      	push	{r4, r5, r6, lr}
10015ba2:	000c      	movs	r4, r1
10015ba4:	250e      	movs	r5, #14
10015ba6:	5f49      	ldrsh	r1, [r1, r5]
10015ba8:	f000 f8b0 	bl	10015d0c <_read_r>
10015bac:	2800      	cmp	r0, #0
10015bae:	db03      	blt.n	10015bb8 <__sread+0x18>
10015bb0:	6d63      	ldr	r3, [r4, #84]	; 0x54
10015bb2:	181b      	adds	r3, r3, r0
10015bb4:	6563      	str	r3, [r4, #84]	; 0x54
10015bb6:	e003      	b.n	10015bc0 <__sread+0x20>
10015bb8:	89a2      	ldrh	r2, [r4, #12]
10015bba:	4b02      	ldr	r3, [pc, #8]	; (10015bc4 <__sread+0x24>)
10015bbc:	4013      	ands	r3, r2
10015bbe:	81a3      	strh	r3, [r4, #12]
10015bc0:	bd70      	pop	{r4, r5, r6, pc}
10015bc2:	46c0      	nop			; (mov r8, r8)
10015bc4:	ffffefff 	.word	0xffffefff

10015bc8 <__swrite>:
10015bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10015bca:	001f      	movs	r7, r3
10015bcc:	898b      	ldrh	r3, [r1, #12]
10015bce:	0005      	movs	r5, r0
10015bd0:	000c      	movs	r4, r1
10015bd2:	0016      	movs	r6, r2
10015bd4:	05db      	lsls	r3, r3, #23
10015bd6:	d505      	bpl.n	10015be4 <__swrite+0x1c>
10015bd8:	230e      	movs	r3, #14
10015bda:	5ec9      	ldrsh	r1, [r1, r3]
10015bdc:	2200      	movs	r2, #0
10015bde:	2302      	movs	r3, #2
10015be0:	f000 f874 	bl	10015ccc <_lseek_r>
10015be4:	89a2      	ldrh	r2, [r4, #12]
10015be6:	4b05      	ldr	r3, [pc, #20]	; (10015bfc <__swrite+0x34>)
10015be8:	0028      	movs	r0, r5
10015bea:	4013      	ands	r3, r2
10015bec:	81a3      	strh	r3, [r4, #12]
10015bee:	0032      	movs	r2, r6
10015bf0:	230e      	movs	r3, #14
10015bf2:	5ee1      	ldrsh	r1, [r4, r3]
10015bf4:	003b      	movs	r3, r7
10015bf6:	f000 f81f 	bl	10015c38 <_write_r>
10015bfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10015bfc:	ffffefff 	.word	0xffffefff

10015c00 <__sseek>:
10015c00:	b570      	push	{r4, r5, r6, lr}
10015c02:	000c      	movs	r4, r1
10015c04:	250e      	movs	r5, #14
10015c06:	5f49      	ldrsh	r1, [r1, r5]
10015c08:	f000 f860 	bl	10015ccc <_lseek_r>
10015c0c:	89a3      	ldrh	r3, [r4, #12]
10015c0e:	1c42      	adds	r2, r0, #1
10015c10:	d103      	bne.n	10015c1a <__sseek+0x1a>
10015c12:	4a05      	ldr	r2, [pc, #20]	; (10015c28 <__sseek+0x28>)
10015c14:	4013      	ands	r3, r2
10015c16:	81a3      	strh	r3, [r4, #12]
10015c18:	e004      	b.n	10015c24 <__sseek+0x24>
10015c1a:	2280      	movs	r2, #128	; 0x80
10015c1c:	0152      	lsls	r2, r2, #5
10015c1e:	4313      	orrs	r3, r2
10015c20:	81a3      	strh	r3, [r4, #12]
10015c22:	6560      	str	r0, [r4, #84]	; 0x54
10015c24:	bd70      	pop	{r4, r5, r6, pc}
10015c26:	46c0      	nop			; (mov r8, r8)
10015c28:	ffffefff 	.word	0xffffefff

10015c2c <__sclose>:
10015c2c:	b510      	push	{r4, lr}
10015c2e:	230e      	movs	r3, #14
10015c30:	5ec9      	ldrsh	r1, [r1, r3]
10015c32:	f000 f815 	bl	10015c60 <_close_r>
10015c36:	bd10      	pop	{r4, pc}

10015c38 <_write_r>:
10015c38:	b570      	push	{r4, r5, r6, lr}
10015c3a:	0005      	movs	r5, r0
10015c3c:	0008      	movs	r0, r1
10015c3e:	0011      	movs	r1, r2
10015c40:	2200      	movs	r2, #0
10015c42:	4c06      	ldr	r4, [pc, #24]	; (10015c5c <_write_r+0x24>)
10015c44:	6022      	str	r2, [r4, #0]
10015c46:	001a      	movs	r2, r3
10015c48:	f7f7 fc3e 	bl	1000d4c8 <_write>
10015c4c:	1c43      	adds	r3, r0, #1
10015c4e:	d103      	bne.n	10015c58 <_write_r+0x20>
10015c50:	6823      	ldr	r3, [r4, #0]
10015c52:	2b00      	cmp	r3, #0
10015c54:	d000      	beq.n	10015c58 <_write_r+0x20>
10015c56:	602b      	str	r3, [r5, #0]
10015c58:	bd70      	pop	{r4, r5, r6, pc}
10015c5a:	46c0      	nop			; (mov r8, r8)
10015c5c:	1001ae30 	.word	0x1001ae30

10015c60 <_close_r>:
10015c60:	2300      	movs	r3, #0
10015c62:	b570      	push	{r4, r5, r6, lr}
10015c64:	4c06      	ldr	r4, [pc, #24]	; (10015c80 <_close_r+0x20>)
10015c66:	0005      	movs	r5, r0
10015c68:	0008      	movs	r0, r1
10015c6a:	6023      	str	r3, [r4, #0]
10015c6c:	f7f7 fc66 	bl	1000d53c <_close>
10015c70:	1c43      	adds	r3, r0, #1
10015c72:	d103      	bne.n	10015c7c <_close_r+0x1c>
10015c74:	6823      	ldr	r3, [r4, #0]
10015c76:	2b00      	cmp	r3, #0
10015c78:	d000      	beq.n	10015c7c <_close_r+0x1c>
10015c7a:	602b      	str	r3, [r5, #0]
10015c7c:	bd70      	pop	{r4, r5, r6, pc}
10015c7e:	46c0      	nop			; (mov r8, r8)
10015c80:	1001ae30 	.word	0x1001ae30

10015c84 <_fstat_r>:
10015c84:	2300      	movs	r3, #0
10015c86:	b570      	push	{r4, r5, r6, lr}
10015c88:	4c06      	ldr	r4, [pc, #24]	; (10015ca4 <_fstat_r+0x20>)
10015c8a:	0005      	movs	r5, r0
10015c8c:	0008      	movs	r0, r1
10015c8e:	0011      	movs	r1, r2
10015c90:	6023      	str	r3, [r4, #0]
10015c92:	f7f7 fc57 	bl	1000d544 <_fstat>
10015c96:	1c43      	adds	r3, r0, #1
10015c98:	d103      	bne.n	10015ca2 <_fstat_r+0x1e>
10015c9a:	6823      	ldr	r3, [r4, #0]
10015c9c:	2b00      	cmp	r3, #0
10015c9e:	d000      	beq.n	10015ca2 <_fstat_r+0x1e>
10015ca0:	602b      	str	r3, [r5, #0]
10015ca2:	bd70      	pop	{r4, r5, r6, pc}
10015ca4:	1001ae30 	.word	0x1001ae30

10015ca8 <_isatty_r>:
10015ca8:	2300      	movs	r3, #0
10015caa:	b570      	push	{r4, r5, r6, lr}
10015cac:	4c06      	ldr	r4, [pc, #24]	; (10015cc8 <_isatty_r+0x20>)
10015cae:	0005      	movs	r5, r0
10015cb0:	0008      	movs	r0, r1
10015cb2:	6023      	str	r3, [r4, #0]
10015cb4:	f7f7 fc4c 	bl	1000d550 <_isatty>
10015cb8:	1c43      	adds	r3, r0, #1
10015cba:	d103      	bne.n	10015cc4 <_isatty_r+0x1c>
10015cbc:	6823      	ldr	r3, [r4, #0]
10015cbe:	2b00      	cmp	r3, #0
10015cc0:	d000      	beq.n	10015cc4 <_isatty_r+0x1c>
10015cc2:	602b      	str	r3, [r5, #0]
10015cc4:	bd70      	pop	{r4, r5, r6, pc}
10015cc6:	46c0      	nop			; (mov r8, r8)
10015cc8:	1001ae30 	.word	0x1001ae30

10015ccc <_lseek_r>:
10015ccc:	b570      	push	{r4, r5, r6, lr}
10015cce:	0005      	movs	r5, r0
10015cd0:	0008      	movs	r0, r1
10015cd2:	0011      	movs	r1, r2
10015cd4:	2200      	movs	r2, #0
10015cd6:	4c06      	ldr	r4, [pc, #24]	; (10015cf0 <_lseek_r+0x24>)
10015cd8:	6022      	str	r2, [r4, #0]
10015cda:	001a      	movs	r2, r3
10015cdc:	f7f7 fc3a 	bl	1000d554 <_lseek>
10015ce0:	1c43      	adds	r3, r0, #1
10015ce2:	d103      	bne.n	10015cec <_lseek_r+0x20>
10015ce4:	6823      	ldr	r3, [r4, #0]
10015ce6:	2b00      	cmp	r3, #0
10015ce8:	d000      	beq.n	10015cec <_lseek_r+0x20>
10015cea:	602b      	str	r3, [r5, #0]
10015cec:	bd70      	pop	{r4, r5, r6, pc}
10015cee:	46c0      	nop			; (mov r8, r8)
10015cf0:	1001ae30 	.word	0x1001ae30

10015cf4 <memchr>:
10015cf4:	b2c9      	uxtb	r1, r1
10015cf6:	1882      	adds	r2, r0, r2
10015cf8:	4290      	cmp	r0, r2
10015cfa:	d004      	beq.n	10015d06 <memchr+0x12>
10015cfc:	7803      	ldrb	r3, [r0, #0]
10015cfe:	428b      	cmp	r3, r1
10015d00:	d002      	beq.n	10015d08 <memchr+0x14>
10015d02:	3001      	adds	r0, #1
10015d04:	e7f8      	b.n	10015cf8 <memchr+0x4>
10015d06:	2000      	movs	r0, #0
10015d08:	4770      	bx	lr
	...

10015d0c <_read_r>:
10015d0c:	b570      	push	{r4, r5, r6, lr}
10015d0e:	0005      	movs	r5, r0
10015d10:	0008      	movs	r0, r1
10015d12:	0011      	movs	r1, r2
10015d14:	2200      	movs	r2, #0
10015d16:	4c06      	ldr	r4, [pc, #24]	; (10015d30 <_read_r+0x24>)
10015d18:	6022      	str	r2, [r4, #0]
10015d1a:	001a      	movs	r2, r3
10015d1c:	f7f7 fbb4 	bl	1000d488 <_read>
10015d20:	1c43      	adds	r3, r0, #1
10015d22:	d103      	bne.n	10015d2c <_read_r+0x20>
10015d24:	6823      	ldr	r3, [r4, #0]
10015d26:	2b00      	cmp	r3, #0
10015d28:	d000      	beq.n	10015d2c <_read_r+0x20>
10015d2a:	602b      	str	r3, [r5, #0]
10015d2c:	bd70      	pop	{r4, r5, r6, pc}
10015d2e:	46c0      	nop			; (mov r8, r8)
10015d30:	1001ae30 	.word	0x1001ae30
10015d34:	000003e8 	.word	0x000003e8

10015d38 <test>:
10015d38:	00000083 00004000 00000200 00c800c8     .....@..........
10015d48:	41a00000 42700000 3f000000 3e666666     ...A..pB...?fff>
10015d58:	3f2ccccd 3f000000 3f000000 0000000a     ..,?...?...?....
10015d68:	72617453 676e6974 61694220 6f4c2073     Starting Bias Lo
10015d78:	5220706f 73646165 00000000 706d6153     op Reads....Samp
10015d88:	3a73656c 0a642520 00000000 65636341     les: %d.....Acce
10015d98:	666f206c 74657366 74616420 57482061     l offset data HW
10015da8:	62205453 253d7469 25203a64 66342e37     ST bit=%d: %7.4f
10015db8:	2e372520 25206634 66342e37 00000a0d      %7.4f %7.4f....
10015dc8:	6f727947 66666f20 20746573 61746164     Gyro offset data
10015dd8:	53574820 69622054 64253d74 3725203a      HWST bit=%d: %7
10015de8:	2066342e 342e3725 37252066 0d66342e     .4f %7.4f %7.4f.
10015df8:	0000000a 78352325 2325203a 0a0d7835     ....%#5x: %#5x..
10015e08:	00000000 706d6f43 20737361 20746f6e     ....Compass not 
10015e18:	6e756f66 00002e64 72617453 676e6974     found...Starting
10015e28:	55504d20 30303536 53574820 000d2154      MPU6500 HWST!..
10015e38:	72746552 69766569 4220676e 65736169     Retrieving Biase
10015e48:	00000d73 72746552 69766569 4220676e     s...Retrieving B
10015e58:	65736169 72452073 20726f72 6f70202d     iases Error - po
10015e68:	62697373 4920656c 65204332 726f7272     ssible I2C error
10015e78:	00000000 72746552 69766569 5320676e     ....Retrieving S
10015e88:	69422054 73657361 00000000 72746552     T Biases....Retr
10015e98:	69766569 5320676e 69422054 73657361     ieving ST Biases
10015ea8:	72724520 2d20726f 736f7020 6c626973      Error - possibl
10015eb8:	32492065 72652043 00726f72 64616552     e I2C error.Read
10015ec8:	20676e69 2050544f 69676552 72657473     ing OTP Register
10015ed8:	72724520 002e726f 65636341 544f206c      Error..Accel OT
10015ee8:	64253a50 6425202c 6425202c 0000000a     P:%d, %d, %d....
10015ef8:	45434341 52433a4c 52455449 41204149     ACCEL:CRITERIA A
10015f08:	00000000 73616942 6968535f 253d7466     ....Bias_Shift=%
10015f18:	66342e37 6942202c 525f7361 253d6765     7.4f, Bias_Reg=%
10015f28:	66342e37 6942202c 485f7361 3d545357     7.4f, Bias_HWST=
10015f38:	342e3725 000a0d66 2050544f 756c6176     %7.4f...OTP valu
10015f48:	25203a65 66342e37 00000a0d 69746172     e: %7.4f....rati
10015f58:	37253d6f 2c66342e 72687420 6f687365     o=%7.4f, thresho
10015f68:	253d646c 66342e37 00000a0d 45434341     ld=%7.4f....ACCE
10015f78:	6146204c 41206c69 20736978 6425203d     L Fail Axis = %d
10015f88:	0000000a 45434341 52433a4c 52455449     ....ACCEL:CRITER
10015f98:	42204149 0000000d 206e694d 203a474d     IA B....Min MG: 
10015fa8:	342e3725 000a0d66 2078614d 203a474d     %7.4f...Max MG: 
10015fb8:	342e3725 000a0d66 73616942 6968735f     %7.4f...Bias_shi
10015fc8:	253d7466 66342e37 7473202c 2e37253d     ft=%7.4f, st=%7.
10015fd8:	202c6634 3d676572 342e3725 00000a66     4f, reg=%7.4f...
10015fe8:	65636341 4146206c 61204c49 3a736978     Accel FAIL axis:
10015ff8:	3c206425 3232203d 20676d35 3e20726f     %d <= 225mg or >
10016008:	3736203d 0a676d35 00000000 65636341     = 675mg.....Acce
10016018:	52433a6c 52455449 43204149 6962203a     l:CRITERIA C: bi
10016028:	6c207361 20737365 6e616874 2e372520     as less than %7.
10016038:	000a6634 4c494146 203a4445 65636341     4f..FAILED: Acce
10016048:	7861206c 253a7369 203d2064 20646c25     l axis:%d = %ld 
10016058:	3035203e 0a676d30 00000000 65636341     > 500mg.....Acce
10016068:	6553206c 5420666c 20747365 75736552     l Self Test Resu
10016078:	3a73746c 0a642520 00000000 6f727947     lts: %d.....Gyro
10016088:	50544f20 2c64253a 2c642520 0d642520      OTP:%d, %d, %d.
10016098:	0000000a 4f525947 4952433a 49524554     ....GYRO:CRITERI
100160a8:	00412041 6f727947 69614620 7841206c     A A.Gyro Fail Ax
100160b8:	3d207369 0a642520 00000000 4f525947     is = %d.....GYRO
100160c8:	4952433a 49524554 0d422041 00000000     :CRITERIA B.....
100160d8:	2078614d 3a535044 2e372520 0a0d6634     Max DPS: %7.4f..
100160e8:	00000000 4f525947 49414620 7861204c     ....GYRO FAIL ax
100160f8:	253a7369 72672064 65746165 68742072     is:%d greater th
10016108:	36206e61 73706430 0000000a 6f727947     an 60dps....Gyro
10016118:	4952433a 49524554 3a432041 61696220     :CRITERIA C: bia
10016128:	656c2073 74207373 206e6168 342e3725     s less than %7.4
10016138:	00000a66 4c494146 203a4445 6f727947     f...FAILED: Gyro
10016148:	69786120 64253a73 25203d20 3e20646c      axis:%d = %ld >
10016158:	64303220 000a7370 6f727947 6c655320      20dps..Gyro Sel
10016168:	65542066 52207473 6c757365 203a7374     f Test Results: 
10016178:	000a6425 706d6f43 20737361 666c6553     %d..Compass Self
10016188:	73655420 65522074 746c7573 25203a73      Test Results: %
10016198:	00000a64 74697845 20676e69 54535748     d...Exiting HWST
100161a8:	00000000                                ....

100161ac <hw>:
100161ac:	04000069 01410080 01000000 00001333     i.....A.....3...

100161bc <reg>:
100161bc:	0c1a1975 1c1b236a 201f1e1d 3b437472     u...j#..... rtC;
100161cc:	3a393841 376c6b69 6d24776f 2625706e     A89:ikl7ow$mnp%&
100161dc:	2a292827 67646334 00000049 006ccd4c     '()*4cdgI...L.l.
100161ec:	002cc90c 00765636 00664626 c4abf2fe     ..,.6Vv.&Ff.....
100161fc:	dfdff1aa dfdfafbb 8db3aab8 350d98b4     ...............5
1001620c:	0000005d aaaaaab8 c5c388b0 000000c7     ]...............
1001621c:	f3b9b1d8 b691a38b 00d9b409 f3b9b1da     ................
1001622c:	b691a38b 00dab4da 736d735b 656c625f     ........[sms_ble
1001623c:	6961705f 65725f72 73657571 6e665f74     _pair_request_fn
1001624c:	6150095d 6e697269 65722067 73657571     ].Pairing reques
1001625c:	2e2e2e74 656e4220 64252077 4c42202c     t... Bnew %d, BL
1001626c:	78302045 78323025 3154202c 2c642520     E 0x%02x, T1 %d,
1001627c:	20325420 00006425 656d6954 63203172      T2 %d..Timer1 c
1001628c:	65727275 6d20746e 3a65646f 00642520     urrent mode: %d.
1001629c:	736d735b 656c625f 776f705f 645f7265     [sms_ble_power_d
100162ac:	5d6e776f 00000000 736d735b 656c625f     own]....[sms_ble
100162bc:	776f705f 645f7265 5d6e776f 6f745309     _power_down].Sto
100162cc:	6e697070 6f632067 6e616d6d 65722064     pping command re
100162dc:	76696563 64206465 6e697275 64612067     ceived during ad
100162ec:	74726576 6d657369 2e746e65 6f745320     vertisement. Sto
100162fc:	6e697070 2e2e2e67 00000020 6c696166     pping... ...fail
1001630c:	21216465 00000021 656e6f64 00000021     ed!!!...done!...
1001631c:	736d735b 656c625f 776f705f 645f7265     [sms_ble_power_d
1001632c:	5d6e776f 65440909 65636976 69617020     own]..Device pai
1001633c:	2e646572 64202e2e 62617369 676e696c     red... disabling
1001634c:	746e6920 75727265 20737470 77732026      interrupts & sw
1001635c:	68637469 20676e69 6e776f64 6e657320     itching down sen
1001636c:	73726f73 00000000 736d735b 656c625f     sors....[sms_ble
1001637c:	776f705f 645f7265 5d6e776f 75430909     _power_down]..Cu
1001638c:	6e657272 20796c74 69646e69 69746163     rrently indicati
1001639c:	0000676e 736d735b 656c625f 776f705f     ng..[sms_ble_pow
100163ac:	645f7265 5d6e776f 65440909 65636976     er_down]..Device
100163bc:	6e6f6320 7463656e 2e2e6465 6964202e      connected... di
100163cc:	6e6f6373 7463656e 00676e69 736d735b     sconnecting.[sms
100163dc:	656c625f 7664615f 7065725f 5f74726f     _ble_adv_report_
100163ec:	095d6e66 65766441 73697472 6e656d65     fn].Advertisemen
100163fc:	69742074 756f656d 2e2e2e74 00000000     t timeout.......
1001640c:	736d735b 656c625f 6e6f635f 7463656e     [sms_ble_connect
1001641c:	665f6465 09095d6e 69766544 20736563     ed_fn]..Devices 
1001642c:	6e6e6f63 65746365 2e2e2e64 00000000     connected.......
1001643c:	736d735b 656c625f 6961705f 5f646572     [sms_ble_paired_
1001644c:	005d6e66 736d735b 656c625f 7664615f     fn].[sms_ble_adv
1001645c:	69747265 095d6573 65766441 73697472     ertise].Advertis
1001646c:	6e656d65 61642074 73206174 66207465     ement data set f
1001647c:	656c6961 00002164 736d735b 656c625f     ailed!..[sms_ble
1001648c:	7664615f 69747265 095d6573 454c4209     _advertise]..BLE
1001649c:	61745320 64657472 76644120 69747265      Started Adverti
100164ac:	656d6573 0000746e 736d735b 7265735f     sement..[sms_ser
100164bc:	65636976 7664615f 69747265 095d6573     vice_advertise].
100164cc:	20454c42 65766441 73697472 6e656d65     BLE Advertisemen
100164dc:	74732074 20747261 6c696166 203a6465     t start failed: 
100164ec:	73616572 30206e6f 00782578 736d735b     reason 0x%x.[sms
100164fc:	656c625f 7369645f 6e6e6f63 65746365     _ble_disconnecte
1001650c:	6e665f64 6550095d 64207265 6f637369     d_fn].Peer disco
1001651c:	63656e6e 2e646574 42202e2e 2077656e     nnected... Bnew 
1001652c:	202c6425 20454c42 30257830 202c7832     %d, BLE 0x%02x, 
1001653c:	25203154 54202c64 64252032 00000000     T1 %d, T2 %d....
1001654c:	6e630a0d 25203a74 00000064              ..cnt: %d...

10016558 <sms_ble_gap_cb>:
	...
10016564:	10009ecd 00000000 10009f01 1000a011     ................
	...
1001657c:	10009f49 10009cc9 00000000 00000000     I...............
	...

100165a4 <sms_ble_gatt_server_cb>:
100165a4:	10009d15 10009d71 00000000 00000000     ....q...........
	...
100165cc:	736d735b 7475625f 5f6e6f74 666e6f63     [sms_button_conf
100165dc:	72756769 70095d65 6c626f72 77206d65     igure].problem w
100165ec:	656c6968 74657320 676e6974 20707520     hile setting up 
100165fc:	74747562 00306e6f 736d735b 7475625f     button0.[sms_but
1001660c:	5f6e6f74 666e6f63 72756769 50095d65     ton_configure].P
1001661c:	6c626f72 77206d65 656c6968 74657320     roblem while set
1001662c:	676e6974 20707520 74747562 00316e6f     ting up button1.
1001663c:	736d735b 7475625f 5f6e6f74 666e6f63     [sms_button_conf
1001664c:	72756769 50095d65 6c626f72 77206d65     igure].Problem w
1001665c:	656c6968 74657320 676e6974 20707520     hile setting up 
1001666c:	414c5058 44454e49 65737520 75622072     XPLAINED user bu
1001667c:	6e6f7474 00000000 736d735b 7475625f     tton....[sms_but
1001668c:	5f6e6f74 5f746567 74617473 09095d65     ton_get_state]..
1001669c:	74747542 73206e6f 65746174 6425203a     Button state: %d
100166ac:	00642520 736d735b 7475625f 5f6e6f74      %d.[sms_button_
100166bc:	2d5d6e66 00000030 736d735b 7475625f     fn]-0...[sms_but
100166cc:	5f6e6f74 2d5d6e66 00000031 736d735b     ton_fn]-1...[sms
100166dc:	7475625f 5f6e6f74 095d6e66 61745309     _button_fn]..Sta
100166ec:	6e697472 65732067 726f736e 42282073     rting sensors (B
100166fc:	00002930 736d735b 7475625f 5f6e6f74     0)..[sms_button_
1001670c:	095d6e66 6f4e0909 73752074 73206465     fn]...Not used s
1001671c:	65746174 2e2e2e73 00000000 736d735b     tates.......[sms
1001672c:	7475625f 5f6e6f74 095d6e66 61745309     _button_fn]..Sta
1001673c:	6e697472 65732067 726f736e 42282073     rting sensors (B
1001674c:	00002931 736d735b 7475625f 5f6e6f74     1)..[sms_button_
1001675c:	095d6e66 6c697453 6e69206c 61636964     fn].Still indica
1001676c:	676e6974 002e2e2e 736d735b 7475625f     ting....[sms_but
1001677c:	5f6e6f74 69666564 735f656e 69767265     ton_define_servi
1001678c:	5d736563 72655309 65636976 65642073     ces].Services de
1001679c:	696e6966 6620676e 656c6961 72202c64     fining failed, r
100167ac:	6f736165 7830206e 00007825 736d735b     eason 0x%x..[sms
100167bc:	7475625f 5f6e6f74 69666564 735f656e     _button_define_s
100167cc:	69767265 5d736563 72655309 65636976     ervices].Service
100167dc:	65642073 656e6966 53202c64 6220534d     s defined, SMS b
100167ec:	6f747475 6168206e 656c646e 6425203a     utton handle: %d
100167fc:	00000000 626f7250 206d656c 6c696877     ....Problem whil
1001680c:	65732065 6e697474 70672067 70206f69     e setting gpio p
1001681c:	00006e69 2e2e7325 4209092e 6572702d     in..%s.....B-pre
1001682c:	64252076 2d42202c 20727563 202c6425     v %d, B-cur %d, 
1001683c:	20454c42 30257830 202c7832 25203154     BLE 0x%02x, T1 %
1001684c:	54202c64 64252032 4d53202c 64252053     d, T2 %d, SMS %d
1001685c:	00000000 736d735b 756d695f 6e6f635f     ....[sms_imu_con
1001686c:	75676966 675f6572 5d6f6970 6f725009     figure_gpio].Pro
1001687c:	6d656c62 69687720 7320656c 69747465     blem while setti
1001688c:	7520676e 4d492070 52442055 70205944     ng up IMU DRDY p
1001689c:	00006e69 736d735b 756d695f 6e6f635f     in..[sms_imu_con
100168ac:	75676966 675f6572 5d6f6970 6f725009     figure_gpio].Pro
100168bc:	6d656c62 69687720 7320656c 69747465     blem while setti
100168cc:	7520676e 4d492070 43562055 69702043     ng up IMU VCC pi
100168dc:	0000006e 74696e49 696c6169 676e697a     n...Initializing
100168ec:	55504d20 002e2e2e 69616620 2164656c      MPU.... failed!
100168fc:	00000000 74746553 20676e69 4d207075     ....Setting up M
1001690c:	2e2e5550 0000002e 736d735b 64656c5f     PU......[sms_led
1001691c:	6970675f 6e695f6f 095d7469 626f7270     _gpio_init].prob
1001692c:	206d656c 6c696877 65732065 6e697474     lem while settin
1001693c:	70752067 64656c20 00000030 736d735b     g up led0...[sms
1001694c:	6572705f 72757373 6f635f65 6769666e     _pressure_config
1001695c:	5f657275 6f697067 7270095d 656c626f     ure_gpio].proble
1001696c:	6877206d 20656c69 74746573 20676e69     m while setting 
1001697c:	56207075 70206363 00006e69 736d735b     up Vcc pin..[sms
1001698c:	6572705f 72757373 74735f65 75747261     _pressure_startu
1001699c:	09095d70 72617453 676e6974 65727020     p]..Starting pre
100169ac:	72757373 65732065 726f736e 00000000     ssure sensor....
100169bc:	736d735b 6572705f 72757373 736d5f65     [sms_pressure_ms
100169cc:	635f3835 75636c61 6574616c 6574205d     58_calculate] te
100169dc:	7265706d 72757461 203d2065 20646c25     mperature = %ld 
100169ec:	65727020 72757373 203d2065 00646c25      pressure = %ld.
100169fc:	736d735b 6572705f 72757373 6f705f65     [sms_pressure_po
10016a0c:	645f6c6c 5d617461 61745309 6e697472     ll_data].Startin
10016a1c:	61642067 70206174 696c6c6f 0000676e     g data polling..
10016a2c:	736d735b 6572705f 72757373 736d5f65     [sms_pressure_ms
10016a3c:	705f3835 5f6c6c6f 61746164 7270205d     58_poll_data] pr
10016a4c:	656c626f 6572206d 6e696461 736d2067     oblem reading ms
10016a5c:	64203835 00617461 736d735b 6572705f     58 data.[sms_pre
10016a6c:	72757373 65645f65 656e6966 7265735f     ssure_define_ser
10016a7c:	65636976 53095d73 69767265 20736563     vices].Services 
10016a8c:	69666564 676e696e 69616620 2c64656c     defining failed,
10016a9c:	61657220 206e6f73 78257830 00000000      reason 0x%x....
10016aac:	736d735b 6572705f 72757373 65645f65     [sms_pressure_de
10016abc:	656e6966 7265735f 65636976 53095d73     fine_services].S
10016acc:	69767265 20736563 69666564 2c64656e     ervices defined,
10016adc:	534d5320 65727020 72757373 61682065      SMS pressure ha
10016aec:	656c646e 6425203a 00000000 736d735b     ndle: %d....[sms
10016afc:	6175645f 6d69746c 5f317265 095d6e66     _dualtimer1_fn].
10016b0c:	6c696146 74206465 6e69206f 6d207469     Failed to init m
10016b1c:	20383573 69766564 00006563 736d735b     s58 device..[sms
10016b2c:	6175645f 6d69746c 5f317265 095d6e66     _dualtimer1_fn].
10016b3c:	6c696146 74206465 6e69206f 61697469     Failed to initia
10016b4c:	657a696c 65727020 72757373 65732065     lize pressure se
10016b5c:	726f736e 6f57202e 6e696b72 6f6d2067     nsor. Working mo
10016b6c:	3d206564 54554220 5f4e4f54 4f4c4f53     de = BUTTON_SOLO
10016b7c:	00000000 736d735b 6175645f 6d69746c     ....[sms_dualtim
10016b8c:	5f317265 095d6e66 61745309 6e697472     er1_fn]..Startin
10016b9c:	65732067 726f736e 4d282073 20383553     g sensors (MS58 
10016bac:	65736572 2e2e2974 0000002e 736d735b     reset)......[sms
10016bbc:	6175645f 6d69746c 5f317265 005d6e66     _dualtimer1_fn].
10016bcc:	736d735b 6175645f 6d69746c 5f317265     [sms_dualtimer1_
10016bdc:	095d6e66 61745309 6e697472 65732067     fn]..Starting se
10016bec:	726f736e 73282073 74747568 20676e69     nsors (shutting 
10016bfc:	6e776f64 2e2e2e29 00000000 736d735b     down).......[sms
10016c0c:	6175645f 6d69746c 5f327265 005d6e66     _dualtimer2_fn].
10016c1c:	2e2e2e20 69766967 7520676e 00002170      ...giving up!..
10016c2c:	2e2e2e20 74696177 2e676e69 63202e2e      ...waiting... c
10016c3c:	746e756f 203a7265 00006425 736d735b     ounter: %d..[sms
10016c4c:	6175645f 6d69746c 5f327265 095d6e66     _dualtimer2_fn].
10016c5c:	696c4209 6e696b6e 74732067 75747261     .Blinking startu
10016c6c:	2e2e2e70 00000000 736d735b 6175645f     p.......[sms_dua
10016c7c:	6d69746c 5f327265 095d6e66 696c4209     ltimer2_fn]..Bli
10016c8c:	6e696b6e 68732067 6f647475 2e2e6e77     nking shutdown..
10016c9c:	0000002e 736d735b 6175645f 6d69746c     ....[sms_dualtim
10016cac:	5f327265 095d6e66 776f5009 6e697265     er2_fn]..Powerin
10016cbc:	666f2067 2e2e2e66 00000000 1000c4a8     g off...........
10016ccc:	1000c4b6 1000c4c4 1000c4d2 1000c4e0     ................
10016cdc:	1000c4ee 1000c4fc 1000c50c 1000c51c     ................
10016cec:	1000c52c 1000c53c 1000c54c 1000c55c     ,...<...L...\...
10016cfc:	1000c56c 1000c57c 1000c58c 1000c59c     l...|...........
10016d0c:	1000c5ac 1000c5bc 1000c5cc 1000c5dc     ................
10016d1c:	1000c5ec 1000c5fc 1000c60c 1000c61c     ................
10016d2c:	1000c62c 1000c63c 1000c64c 1000c65a     ,...<...L...Z...
10016d3c:	1000c668 1000c676 1000c684 1000c692     h...v...........
10016d4c:	1000c6a0 1000c6ae 1000c6bc 1000c6cc     ................
10016d5c:	1000c6dc 1000c6ec 1000c6fc 1000c70c     ................
10016d6c:	1000c71c 1000c72c 1000c73c 1000c74c     ....,...<...L...
10016d7c:	1000c75c 1000c76c 1000c77c 1000c78c     \...l...|.......
10016d8c:	1000c79c 1000c7ac 1000c7bc 1000c7ca     ................
10016d9c:	1000c7d8 1000c804 1000c812 1000c820     ............ ...
10016dac:	1000c82e 1000c83c 1000c84a 1000c858     ....<...J...X...
10016dbc:	1000c866 1000c874 1000c882 1000c890     f...t...........
10016dcc:	1000c89e 1000c8ac 1000c8ba 1000c8c8     ................
10016ddc:	1000c8d6 1000c8e4 1000c8f2 1000c900     ................
10016dec:	1000c90e 1000c91c 1000c92a 1000c938     ........*...8...
10016dfc:	1000c946 1000c954 1000c962 1000c970     F...T...b...p...
10016e0c:	1000c97e 1000c98c 1000c99a 1000c9a8     ~...............
10016e1c:	1000c9b6 1000c9c4 1000c9d2 1000c9e0     ................
10016e2c:	1000c9ee 1000c9fc 1000ca0a 1000ca18     ................
10016e3c:	1000ca26 1000ca34 1000ca42 1000ca50     &...4...B...P...
10016e4c:	1000ca5e 1000ca6c 1000ca7a 1000ca88     ^...l...z.......
10016e5c:	1000ca96 1000caa4 1000cab2 1000cac0     ................
10016e6c:	1000cace 1000cadc 1000caea 1000cb84     ................
10016e7c:	1000cbac 1000cbd4 1000cbfc 1000ce3c     ............<...
10016e8c:	1000cc2c 1000cc44 1000ccbc 1000ccd4     ,...D...........
10016e9c:	1000cc5c 1000cc74 1000cc8c 1000cca4     \...t...........
10016eac:	1000ccec 1000cfb0 1000cfb0 1000cfb0     ................
10016ebc:	1000cfb0 1000cfb0 1000cfb0 1000cfb0     ................
10016ecc:	1000cfb0 1000cd94 1000cdac 1000cdc4     ................
10016edc:	1000ce52 1000cd1c 1000cfb0 1000cfb0     R...............
10016eec:	1000cfb0 1000cfb0 1000cfb0 1000cfb0     ................
10016efc:	1000cddc 1000cdf4 1000ce0c 1000ce24     ............$...
10016f0c:	1000cfb0 1000cf68 1000cf80 1000cfb0     ....h...........
10016f1c:	1000cfb0 1000ce7e 1000ce94 1000ceaa     ....~...........
10016f2c:	1000cec0 1000cfb0 1000cfb0 1000cfb0     ................
10016f3c:	1000cfb0 1000cfb0 1000cfb0 1000cfb0     ................
10016f4c:	1000cfb0 1000cb70 1000cb98 1000cbc0     ....p...........
10016f5c:	1000cbe8 1000cc14 1000cd04 1000cd34     ............4...
10016f6c:	1000cd4c 1000cd64 1000cd7c 1000ce68     L...d...|...h...
10016f7c:	1000ced6 1000cf50 1000cf98 1000d6d2     ....P...........
10016f8c:	1000d6e4 1000d6ba 1000d6ba 1000d6ba     ................
10016f9c:	1000d6d2 1000d6ba 1000d6ba 1000e0d6     ................
10016fac:	1000e14a 1000e0be 1000e150 1000e0c4     J.......P.......
10016fbc:	1000e0ca 1000e0d0 1000e830 1000e830     ........0...0...
10016fcc:	1000e830 1000e830 1000e830 1000e830     0...0...0...0...
10016fdc:	1000e830 1000e830 1000e830 1000e830     0...0...0...0...
10016fec:	1000e830 1000e830 1000e830 1000e830     0...0...0...0...
10016ffc:	1000e830 1000e830 1000e830 1000e830     0...0...0...0...
1001700c:	1000e830 1000e84e 1000e84e 1000e84e     0...N...N...N...
1001701c:	1000e84e 1000e84e 1000e84e 1000e84e     N...N...N...N...
1001702c:	1000e84e 1000e84e 1000e84e 1000e870     N...N...N...p...
1001703c:	1000e870 1000e870 1000e870 1000e870     p...p...p...p...
1001704c:	1000e870 1000e870 1000e870 1000e870     p...p...p...p...
1001705c:	1000e870 1000e8a0 1000e8a0 1000e8a0     p...............
1001706c:	1000e8a0 1000e8a0 1000e8a0 1000e8ba     ................
1001707c:	1000e8ba 1000e8ba 1000e8ba 1000e8ba     ................
1001708c:	1000e8ba 1000e8ba 1000e8ba 1000e8ba     ................
1001709c:	1000e8d4 1000e8d4 1000e8f6 1000e8f6     ................
100170ac:	1000e910 1000e8f6 34333231 00003635     ........123456..
100170bc:	efcdab00 00efcdab                       ........

100170c4 <ble_mgr_gatt_server_handle>:
	...
100170dc:	1000d5cd 1000d5f5 1000d63d 00000000     ........=.......
100170ec:	65646e55 656e6966 76452064 20746e65     Undefined Event 
100170fc:	65636552 64657669 00000000 6e616353     Received....Scan
1001710c:	676e696e 61662020 64656c69 00000000     ning  failed....
1001711c:	65766441 73697472 20676e69 6c696166     Advertising fail
1001712c:	00006465 2d454c42 2055544d 6e616843     ed..BLE-MTU Chan
1001713c:	2c646567 6e6f4320 7463656e 206e6f69     ged, Connection 
1001714c:	646e6148 203a656c 202c6425 2077654e     Handle: %d, New 
1001715c:	756c6156 25203a65 00000064 2055544d     Value: %d...MTU 
1001716c:	6e616843 2c646567 6e6f4320 7463656e     Changed, Connect
1001717c:	206e6f69 646e6148 253a656c 4f202c64     ion Handle:%d, O
1001718c:	61726570 6e6f6974 0064253a 2055544d     peration:%d.MTU 
1001719c:	6e616843 46206567 656c6961 43202c64     Change Failed, C
100171ac:	656e6e6f 6f697463 6148206e 656c646e     onnection Handle
100171bc:	2c64253a 65704f20 69746172 253a6e6f     :%d, Operation:%
100171cc:	00000064 72616843 69725720 43206574     d...Char Write C
100171dc:	4320646d 6c706d6f 2c657465 6e6f4320     md Complete, Con
100171ec:	7463656e 206e6f69 646e6148 253a656c     nection Handle:%
100171fc:	4f202c64 61726570 6e6f6974 0064253a     d, Operation:%d.
1001720c:	72616843 69725720 43206574 4620646d     Char Write Cmd F
1001721c:	656c6961 43202c64 656e6e6f 6f697463     ailed, Connectio
1001722c:	6148206e 656c646e 2c64253a 65704f20     n Handle:%d, Ope
1001723c:	69746172 253a6e6f 00000064 74617453     ration:%d...Stat
1001724c:	6f4e2065 61482074 656c646e 64252064     e Not Handled %d
1001725c:	00000000 69766544 64206563 6f637369     ....Device disco
1001726c:	63656e6e 20646574 73616552 303a6e6f     nnected Reason:0
1001727c:	32302578 61482078 656c646e 2578303d     x%02x Handle=0x%
1001728c:	00000078 425f5441 435f454c 5f4e4e4f     x...AT_BLE_CONN_
1001729c:	41524150 50555f4d 45544144 00000020     PARAM_UPDATE ...
100172ac:	72636e45 69747079 66206e6f 656c6961     Encryption faile
100172bc:	00000064 72636e45 69747079 63206e6f     d...Encryption c
100172cc:	6c706d6f 64657465 63757320 73736563     ompleted success
100172dc:	6c6c7566 00000079 20454c42 69766544     fully...BLE Devi
100172ec:	6e206563 6620746f 646e756f 636e6520     ce not found enc
100172fc:	74707972 206e6f69 6f666e69 00000000     ryption info....
1001730c:	6f666e49 7665443a 20656369 6e756f66     Info:Device foun
1001731c:	64612064 73657264 255b2073 20205d64     d address [%d]  
1001732c:	30257830 30255832 30255832 30255832     0x%02X%02X%02X%0
1001733c:	30255832 30255832 00205832 6f666e49     2X%02X%02X .Info
1001734c:	78616d3a 6d756d69 2e6f6e20 7320666f     :maximum no.of s
1001735c:	206e6163 69766564 72206563 68636165     can device reach
1001736c:	2e2e6465 6f74532e 6e697070 63532067     ed...Stopping Sc
1001737c:	00006e61 6c696146 74206465 7473206f     an..Failed to st
1001738c:	7320706f 6e6e6163 00676e69 30257830     op scanning.0x%0
1001739c:	202c5832 00000000 4b525343 0000203a     2X, ....CSRK: ..
100173ac:	3a4b5249 00000000 72696150 20676e69     IRK:....Pairing 
100173bc:	6c696166 2e2e6465 7369442e 6e6e6f63     failed...Disconn
100173cc:	69746365 0000676e 63736944 656e6e6f     ecting..Disconne
100173dc:	52207463 65757165 46207473 656c6961     ct Request Faile
100173ec:	00000064 72696150 20676e69 636f7270     d...Pairing proc
100173fc:	72756465 6f632065 656c706d 20646574     edure completed 
1001740c:	63637573 66737365 796c6c75 00000000     successfully....
1001741c:	20454c42 69766544 6e206563 6620746f     BLE Device not f
1001742c:	646e756f 206f7420 726f7473 68742065     ound to store th
1001743c:	61702065 6e697269 6e692067 00006f66     e pairing info..
1001744c:	3a4b544c 00000020 72636e45 69747079     LTK: ...Encrypti
1001745c:	4e206e6f 7320746f 74726174 00006465     on Not started..
1001746c:	76616c53 65532065 69727563 52207974     Slave Security R
1001747c:	2d207165 74754120 746e6568 74616369     eq - Authenticat
1001748c:	206e6f69 6c696146 00006465 656e6547     ion Failed..Gene
1001749c:	65746172 544c2064 00203a4b 30257830     rated LTK: .0x%0
100174ac:	00205832 646e6553 20676e69 72696170     2X .Sending pair
100174bc:	20676e69 70736572 65736e6f 00000000     ing response....
100174cc:	72696150 71655220 74736575 41202d20     Pair Request - A
100174dc:	65687475 6369746e 6f697461 6146206e     uthentication Fa
100174ec:	64656c69 00000000 65746e45 68742072     iled....Enter th
100174fc:	61502065 656b7373 2d362879 69676944     e Passkey(6-Digi
1001750c:	69202974 6554206e 6e696d72 003a6c61     t) in Terminal:.
1001751c:	206e6950 656d6954 0074756f 63736944     Pin Timeout.Disc
1001752c:	656e6e6f 6e697463 2e2e2067 0000002e     onnecting ......
1001753c:	61656c50 45206573 7265746e 65687420     Please Enter the
1001754c:	6c6f6620 69776f6c 5020676e 2d737361      following Pass-
1001755c:	65646f63 206e6f28 6568746f 65442072     code(on other De
1001756c:	65636976 00003a29 72696150 79656b2d     vice):..Pair-key
1001757c:	70657220 6620796c 656c6961 00000064      reply failed...
1001758c:	20424f4f 74616546 20657275 20746f4e     OOB Feature Not 
1001759c:	70707573 6574726f 00000064 65746e45     supported...Ente
100175ac:	20646572 73736150 646f632d 00003a65     red Pass-code:..
100175bc:	2d434e45 3a716552 6e6f4320 6148206e     ENC-Req: Conn Ha
100175cc:	656c646e 76654420 20656369 6e756f46     ndle Device Foun
100175dc:	64683a64 64253a6c 00000000 74736f68     d:hdl:%d....host
100175ec:	76656420 20656369 76696465 00782520      device ediv %x.
100175fc:	72656570 76656420 20656369 76696465     peer device ediv
1001760c:	00782520 5f636e65 20716572 76696465      %x.enc_req ediv
1001761c:	00782520 20656854 65646e69 73692078      %x.The index is
1001762c:	00642520 2d434e45 3a716552 79654b20      %d.ENC-Req: Key
1001763c:	756f4620 0000646e 72696150 20676e69      Found..Pairing 
1001764c:	6f666e69 74616d72 206e6f69 7020666f     information of p
1001765c:	20726565 69766564 69206563 6f6e2073     eer device is no
1001766c:	76612074 616c6961 2e656c62 00000000     t available.....
1001767c:	61656c50 75206573 6961706e 68742072     Please unpair th
1001768c:	65642065 65636976 6f726620 6570206d     e device from pe
1001769c:	64207265 63697665 6f6d2865 656c6962     er device(mobile
100176ac:	65732029 6e697474 6d207367 20756e65     ) settings menu 
100176bc:	20646e61 72617473 61702074 6e697269     and start pairin
100176cc:	67612067 006e6961 72636e45 69747079     g again.Encrypti
100176dc:	52206e6f 65757165 52207473 796c7065     on Request Reply
100176ec:	69614620 0064656c 72636e45 69747079      Failed.Encrypti
100176fc:	52206e6f 65757165 52207473 796c7065     on Request Reply
1001770c:	00000000 656c625b 696e695f 09095d74     ....[ble_init]..
1001771c:	696e4909 6c616974 6e697a69 41532067     .Initializing SA
1001772c:	3131424d 00000000 656c625b 696e695f     MB11....[ble_ini
1001773c:	09095d74 424d4153 49203131 6974696e     t]..SAMB11 Initi
1001774c:	7a696c61 6f697461 6166206e 64656c69     alization failed
1001775c:	00000000 656c625b 696e695f 09095d74     ....[ble_init]..
1001776c:	61656c50 63206573 6b636568 65687420     Please check the
1001777c:	776f7020 61207265 6320646e 656e6e6f      power and conne
1001778c:	6f697463 202f206e 64726168 65726177     ction / hardware
1001779c:	6e6f6320 7463656e 0000726f 52424153      connector..SABR
100177ac:	4d532d65 00000053 69766544 6e206563     e-SMS...Device n
100177bc:	20656d61 20746573 6c696166 00006465     ame set failed..
100177cc:	656c625b 7465735f 7665645f 6e6f635f     [ble_set_dev_con
100177dc:	5d676966 44420909 64646120 73736572     fig]..BD address
100177ec:	74656720 69616620 0064656c 656c625b      get failed.[ble
100177fc:	7465735f 7665645f 6e6f635f 5d676966     _set_dev_config]
1001780c:	44420909 64644120 73736572 2578303a     ..BD Address:0x%
1001781c:	25583230 25583230 25583230 25583230     02X%02X%02X%02X%
1001782c:	25583230 2c583230 64644120 73736572     02X%02X, Address
1001783c:	70795420 64253a65 00000000 656c625b      Type:%d....[ble
1001784c:	7465735f 7665645f 6e6f635f 5d676966     _set_dev_config]
1001785c:	74655309 454c4220 76654420 20656369     .Set BLE Device 
1001786c:	666e6f63 72756769 6f697461 6166206e     configuration fa
1001787c:	64656c69 00000000 656c625b 7465735f     iled....[ble_set
1001788c:	7665645f 6e6f635f 5d676966 74655309     _dev_config].Set
1001789c:	454c4220 76654420 20656369 72646441      BLE Device Addr
100178ac:	20737365 6c696166 00006465 6e616353     ess failed..Scan
100178bc:	676e696e 502e2e2e 7361656c 61772065     ning...Please wa
100178cc:	2e2e7469 0000002e 76616c53 65732065     it......Slave se
100178dc:	69727563 72207974 65757165 73207473     curity request s
100178ec:	65636375 75667373 0000006c 76616c53     uccessful...Slav
100178fc:	65732065 69727563 72207974 65757165     e security reque
1001790c:	66207473 656c6961 00000064 6e6e6f43     st failed...Conn
1001791c:	65746365 6f742064 65657020 65642072     ected to peer de
1001792c:	65636976 74697720 64612068 73657264     vice with addres
1001793c:	78302073 78323025 78323025 78323025     s 0x%02x%02x%02x
1001794c:	78323025 78323025 78323025 00000000     %02x%02x%02x....
1001795c:	6e6e6f43 69746365 48206e6f 6c646e61     Connection Handl
1001796c:	64252065 00000000 6f736552 6e69766c     e %d....Resolvin
1001797c:	61522067 6d6f646e 64646120 73736572     g Random address
1001798c:	63757320 73736563 00002a2a 6f736552      success**..Reso
1001799c:	6e69766c 61522067 6d6f646e 64646120     lving Random add
100179ac:	73736572 69616620 2a64656c 0000002a     ress failed**...
100179bc:	2078614d 626d756e 6f207265 6f632066     Max number of co
100179cc:	63656e6e 6e6f6974 61657220 64656863     nnection reached
100179dc:	6425203a 3d3d3d20 7369443e 6e6e6f63     : %d ===>Disconn
100179ec:	69746365 2e2e676e 0000002e 69766544     ecting......Devi
100179fc:	43206563 656e6e6f 6f697463 6146206e     ce Connection Fa
10017a0c:	64656c69 53202d20 75746174 25203a73     iled - Status: %
10017a1c:	00000064 23232323 23232323 65442323     d...##########De
10017a2c:	65636976 756f4620 0000646e 23232323     vice Found..####
10017a3c:	23232323 65442323 65636976 746f4e20     ######Device Not
10017a4c:	756f4620 0000646e 69766544 69206563      Found..Device i
10017a5c:	253a7864 00000064 2d454c42 6e657645     dx:%d...BLE-Even
10017a6c:	64253a74 00000000 54544147 7265535f     t:%d....GATT_Ser
10017a7c:	20726576 6e657645 64253a74 00000000     ver Event:%d....
10017a8c:	2d454c42 616e614d 3a726567 6e6b6e55     BLE-Manager:Unkn
10017a9c:	206e776f 6e657645 78303d74 00005825     own Event=0x%X..
10017aac:	656c625b 6e616d5f 72656761 0909095d     [ble_manager]...
10017abc:	756e614d 74636166 72657275 65707320     Manufacturer spe
10017acc:	69666963 61642063 65206174 6c62616e     cific data enabl
10017adc:	00006465 5a2d571c 50532dbe 00000000     ed...W-Z.-SP....
10017aec:	20454c42 65766441 73697472 6e656d65     BLE Advertisemen
10017afc:	61642074 73206174 66207465 656c6961     t data set faile
10017b0c:	00000064                                d...

10017b10 <ble_mgr_gap_handle>:
10017b10:	1000d559 1000d809 1000d57d 1000d5a5     Y.......}.......
10017b20:	00000000 1000e485 1000d685 1000d721     ............!...
10017b30:	1000da65 1000d8b5 1000dc65 1000da7d     e.......e...}...
10017b40:	1000ddf1 1000df35 1000d745 1000e6d1     ....5...E.......
	...
10017b5c:	1000f72a 1000f738 1000f780 1000f7c4     *...8...........
10017b6c:	1000f7d6 1000f840 1000f858 6c756f43     ....@...X...Coul
10017b7c:	6f6e2064 6e692074 61697469 657a696c     d not initialize
10017b8c:	55504d20 00000021 69616d5b 09095d6e      MPU!...[main]..
10017b9c:	61570909 676e696b 2e707520 00002e2e     ..Waking up.....
10017bac:	6e6f6420 00002165 69616d5b 09095d6e      done!..[main]..
10017bbc:	69440909 6c626173 20676e69 74747562     ..Disabling butt
10017bcc:	69206e6f 2e2e746e 0000002e 2e2e0d0a     on int..........
10017bdc:	204f4e2e 52554f53 21214543 00000000     .NO SOURCE!!....
10017bec:	2e2e0d0a 4e54422e 00000030 69616d5b     .....BTN0...[mai
10017bfc:	09095d6e 72450909 20726f72 73206e69     n]....Error in s
10017c0c:	625f736d 6f747475 6e665f6e 00212928     ms_button_fn()!.
10017c1c:	2e2e0d0a 4e54422e 00000031 2e2e0d0a     .....BTN1.......
10017c2c:	55504d2e 4452445f 00000059 2e2e0d0a     .MPU_DRDY.......
10017c3c:	4e4f412e 4d49545f 00005245 69616d5b     .AON_TIMER..[mai
10017c4c:	09095d6e 6f500909 6e696c6c 72702067     n]....Polling pr
10017c5c:	75737365 64206572 2e617461 00002e2e     essure data.....
10017c6c:	69616d5b 09095d6e 4f410909 6974204e     [main]....AON ti
10017c7c:	2072656d 64616572 68772079 20656c69     mer ready while 
10017c8c:	69646e69 69746163 2e2e676e 6b73202e     indicating... sk
10017c9c:	69707069 0000676e 2e2e0d0a 4155442e     ipping.......DUA
10017cac:	4d49544c 00315245 2e2e0d0a 4155442e     LTIMER1......DUA
10017cbc:	4d49544c 00325245 2e2e0d0a 003f3f2e     LTIMER2......??.
10017ccc:	69616d5b 09095d6e 6e450909 696c6261     [main]....Enabli
10017cdc:	6220676e 6f747475 6e69206e 2e2e2e74     ng button int...
10017cec:	00000000 69616d5b 09095d6e 4c550909     ....[main]....UL
10017cfc:	2e2e2e50 00000000 00212120 656d7441     P....... !!.Atme
10017d0c:	6f43206c 022e7072                                l Corp.

10017d13 <CSWTCH.45>:
10017d13:	00100402                                         ...

10017d16 <CSWTCH.47>:
10017d16:	03010300 03030303 03030303 02020303              ...............

10017d25 <client_conf_uuid>:
10017d25:	29042902                                         .)

10017d27 <presentation_format_uuid>:
10017d27:	29012904                                         .)

10017d29 <user_desc_uuid>:
10017d29:	29032901                                         .)

10017d2b <server_conf_uuid>:
10017d2b:	29002903                                         .)

10017d2d <extended_props_uuid>:
10017d2d:	28022900                                         .)

10017d2f <include_uuid>:
10017d2f:	28032802                                         .(

10017d31 <char_uuid>:
10017d31:	f6002803 1a100133 d8100133 b0100133     .(..3...3...3...
10017d41:	d8100133 a4100133 d8100133 b0100133     3...3...3...3...
10017d51:	1a100133 1a100133 a4100133 b0100133     3...3...3...3...
10017d61:	5c100133 5c100134 5c100134 de100134     3..\4..\4..\4...
10017d71:	1a100133 1a100133 c4100133 ae100133     3...3...3...3...
10017d81:	c4100133 a4100133 c4100133 ae100133     3...3...3...3...
10017d91:	1a100133 1a100133 a4100133 ae100133     3...3...3...3...
10017da1:	5c100133 5c100134 5c100134 68100134     3..\4..\4..\4..h
10017db1:	54100134 b2100137 b2100136 b0100136     4..T7...6...6...
10017dc1:	46100136 46100137 3c100137 b0100137     6..F7..F7..<7...
10017dd1:	46100136 3c100137 46100137 b0100137     6..F7..<7..F7...
10017de1:	4c100136 4c100137 4c100137 d6100137     6..L7..L7..L7...
10017df1:	38100137 f8100140 f810013e f610013e     7..8@...>...>...
10017e01:	1010013e 10100140 02100140 f6100140     >...@...@...@...
10017e11:	1010013e 02100140 10100140 f6100140     >...@...@...@...
10017e21:	1810013e 18100140 18100140 18100140     >...@...@...@...
10017e31:	43100142 38000000                                B..C...

10017e38 <_global_impure_ptr>:
10017e38:	10017f38                                8...

10017e3c <__sf_fake_stdin>:
	...

10017e5c <__sf_fake_stdout>:
	...

10017e7c <__sf_fake_stderr>:
	...
10017e9c:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
10017eac:	32313000 36353433 41393837 45444342     .0123456789ABCDE
10017ebc:	31300046 35343332 39383736 64636261     F.0123456789abcd
10017ecc:	00006665                                ef..

10017ed0 <_init>:
10017ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10017ed2:	46c0      	nop			; (mov r8, r8)
10017ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
10017ed6:	bc08      	pop	{r3}
10017ed8:	469e      	mov	lr, r3
10017eda:	4770      	bx	lr

10017edc <__init_array_start>:
10017edc:	100080b1 	.word	0x100080b1

10017ee0 <_fini>:
10017ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10017ee2:	46c0      	nop			; (mov r8, r8)
10017ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
10017ee6:	bc08      	pop	{r3}
10017ee8:	469e      	mov	lr, r3
10017eea:	4770      	bx	lr

10017eec <__fini_array_start>:
10017eec:	10008089 	.word	0x10008089
