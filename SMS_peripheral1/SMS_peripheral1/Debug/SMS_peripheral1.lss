
SMS_peripheral1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000d358  10008000  10008000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000ac  10015358  10015358  00015358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00002e00  10015404  10015404  00015404  2**2
                  ALLOC
  3 .stack        00001804  10018204  10018204  00015404  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00015404  2**0
                  CONTENTS, READONLY
  5 .comment      000000b4  00000000  00000000  0001542c  2**0
                  CONTENTS, READONLY
  6 .debug_info   00048f34  00000000  00000000  000154e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005204  00000000  00000000  0005e414  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000a80f  00000000  00000000  00063618  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000c58  00000000  00000000  0006de27  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000cf0  00000000  00000000  0006ea7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000268f1  00000000  00000000  0006f76f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00016b88  00000000  00000000  00096060  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    001420ff  00000000  00000000  000acbe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002a90  00000000  00000000  001eece8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

10008000 <app_entry>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void app_entry(void)
{
10008000:	b510      	push	{r4, lr}

    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
10008002:	4b18      	ldr	r3, [pc, #96]	; (10008064 <app_entry+0x64>)
10008004:	4a18      	ldr	r2, [pc, #96]	; (10008068 <app_entry+0x68>)
10008006:	429a      	cmp	r2, r3
10008008:	d003      	beq.n	10008012 <app_entry+0x12>
        for (; pDest < &_erelocate;) {
1000800a:	4b18      	ldr	r3, [pc, #96]	; (1000806c <app_entry+0x6c>)
1000800c:	4a15      	ldr	r2, [pc, #84]	; (10008064 <app_entry+0x64>)
1000800e:	429a      	cmp	r2, r3
10008010:	d304      	bcc.n	1000801c <app_entry+0x1c>
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008012:	4b17      	ldr	r3, [pc, #92]	; (10008070 <app_entry+0x70>)
10008014:	4a17      	ldr	r2, [pc, #92]	; (10008074 <app_entry+0x74>)
10008016:	429a      	cmp	r2, r3
10008018:	d310      	bcc.n	1000803c <app_entry+0x3c>
1000801a:	e01e      	b.n	1000805a <app_entry+0x5a>
1000801c:	4b16      	ldr	r3, [pc, #88]	; (10008078 <app_entry+0x78>)
1000801e:	4a13      	ldr	r2, [pc, #76]	; (1000806c <app_entry+0x6c>)
10008020:	3203      	adds	r2, #3
10008022:	1ad2      	subs	r2, r2, r3
10008024:	0892      	lsrs	r2, r2, #2
10008026:	3201      	adds	r2, #1
10008028:	0092      	lsls	r2, r2, #2
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
1000802a:	2300      	movs	r3, #0
            *pDest++ = *pSrc++;
1000802c:	480d      	ldr	r0, [pc, #52]	; (10008064 <app_entry+0x64>)
1000802e:	490e      	ldr	r1, [pc, #56]	; (10008068 <app_entry+0x68>)
10008030:	58cc      	ldr	r4, [r1, r3]
10008032:	50c4      	str	r4, [r0, r3]
10008034:	3304      	adds	r3, #4
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
10008036:	4293      	cmp	r3, r2
10008038:	d1fa      	bne.n	10008030 <app_entry+0x30>
1000803a:	e7ea      	b.n	10008012 <app_entry+0x12>
1000803c:	4b0f      	ldr	r3, [pc, #60]	; (1000807c <app_entry+0x7c>)
1000803e:	490c      	ldr	r1, [pc, #48]	; (10008070 <app_entry+0x70>)
10008040:	3103      	adds	r1, #3
10008042:	1ac9      	subs	r1, r1, r3
10008044:	0889      	lsrs	r1, r1, #2
10008046:	3101      	adds	r1, #1
10008048:	0089      	lsls	r1, r1, #2
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
1000804a:	2300      	movs	r3, #0
        *pDest++ = 0;
1000804c:	4c09      	ldr	r4, [pc, #36]	; (10008074 <app_entry+0x74>)
1000804e:	2000      	movs	r0, #0
10008050:	191a      	adds	r2, r3, r4
10008052:	6010      	str	r0, [r2, #0]
10008054:	3304      	adds	r3, #4
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008056:	428b      	cmp	r3, r1
10008058:	d1fa      	bne.n	10008050 <app_entry+0x50>
        *pDest++ = 0;
    }

    /* Initialize the C library */
    __libc_init_array();
1000805a:	4b09      	ldr	r3, [pc, #36]	; (10008080 <app_entry+0x80>)
1000805c:	4798      	blx	r3

    /* Branch to main function */
    main();
1000805e:	4b09      	ldr	r3, [pc, #36]	; (10008084 <app_entry+0x84>)
10008060:	4798      	blx	r3

    /* return to BLE OS*/
    return;
}
10008062:	bd10      	pop	{r4, pc}
10008064:	10015358 	.word	0x10015358
10008068:	10015358 	.word	0x10015358
1000806c:	10015404 	.word	0x10015404
10008070:	10018204 	.word	0x10018204
10008074:	10015404 	.word	0x10015404
10008078:	1001535c 	.word	0x1001535c
1000807c:	10015408 	.word	0x10015408
10008080:	100124e1 	.word	0x100124e1
10008084:	1000ddbd 	.word	0x1000ddbd

10008088 <__do_global_dtors_aux>:
10008088:	b510      	push	{r4, lr}
1000808a:	4c06      	ldr	r4, [pc, #24]	; (100080a4 <__do_global_dtors_aux+0x1c>)
1000808c:	7823      	ldrb	r3, [r4, #0]
1000808e:	2b00      	cmp	r3, #0
10008090:	d107      	bne.n	100080a2 <__do_global_dtors_aux+0x1a>
10008092:	4b05      	ldr	r3, [pc, #20]	; (100080a8 <__do_global_dtors_aux+0x20>)
10008094:	2b00      	cmp	r3, #0
10008096:	d002      	beq.n	1000809e <__do_global_dtors_aux+0x16>
10008098:	4804      	ldr	r0, [pc, #16]	; (100080ac <__do_global_dtors_aux+0x24>)
1000809a:	e000      	b.n	1000809e <__do_global_dtors_aux+0x16>
1000809c:	bf00      	nop
1000809e:	2301      	movs	r3, #1
100080a0:	7023      	strb	r3, [r4, #0]
100080a2:	bd10      	pop	{r4, pc}
100080a4:	10015404 	.word	0x10015404
100080a8:	00000000 	.word	0x00000000
100080ac:	10015358 	.word	0x10015358

100080b0 <frame_dummy>:
100080b0:	4b08      	ldr	r3, [pc, #32]	; (100080d4 <frame_dummy+0x24>)
100080b2:	b510      	push	{r4, lr}
100080b4:	2b00      	cmp	r3, #0
100080b6:	d003      	beq.n	100080c0 <frame_dummy+0x10>
100080b8:	4907      	ldr	r1, [pc, #28]	; (100080d8 <frame_dummy+0x28>)
100080ba:	4808      	ldr	r0, [pc, #32]	; (100080dc <frame_dummy+0x2c>)
100080bc:	e000      	b.n	100080c0 <frame_dummy+0x10>
100080be:	bf00      	nop
100080c0:	4807      	ldr	r0, [pc, #28]	; (100080e0 <frame_dummy+0x30>)
100080c2:	6803      	ldr	r3, [r0, #0]
100080c4:	2b00      	cmp	r3, #0
100080c6:	d100      	bne.n	100080ca <frame_dummy+0x1a>
100080c8:	bd10      	pop	{r4, pc}
100080ca:	4b06      	ldr	r3, [pc, #24]	; (100080e4 <frame_dummy+0x34>)
100080cc:	2b00      	cmp	r3, #0
100080ce:	d0fb      	beq.n	100080c8 <frame_dummy+0x18>
100080d0:	4798      	blx	r3
100080d2:	e7f9      	b.n	100080c8 <frame_dummy+0x18>
100080d4:	00000000 	.word	0x00000000
100080d8:	10015408 	.word	0x10015408
100080dc:	10015358 	.word	0x10015358
100080e0:	10015358 	.word	0x10015358
100080e4:	00000000 	.word	0x00000000

100080e8 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
100080e8:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_clock_get_value();
100080ea:	4b09      	ldr	r3, [pc, #36]	; (10008110 <delay_init+0x28>)
100080ec:	4798      	blx	r3
100080ee:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
100080f0:	4c08      	ldr	r4, [pc, #32]	; (10008114 <delay_init+0x2c>)
100080f2:	21fa      	movs	r1, #250	; 0xfa
100080f4:	0089      	lsls	r1, r1, #2
100080f6:	47a0      	blx	r4
100080f8:	4b07      	ldr	r3, [pc, #28]	; (10008118 <delay_init+0x30>)
100080fa:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
100080fc:	4907      	ldr	r1, [pc, #28]	; (1000811c <delay_init+0x34>)
100080fe:	0028      	movs	r0, r5
10008100:	47a0      	blx	r4
10008102:	4b07      	ldr	r3, [pc, #28]	; (10008120 <delay_init+0x38>)
10008104:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
10008106:	2205      	movs	r2, #5
10008108:	4b06      	ldr	r3, [pc, #24]	; (10008124 <delay_init+0x3c>)
1000810a:	601a      	str	r2, [r3, #0]
}
1000810c:	bd70      	pop	{r4, r5, r6, pc}
1000810e:	46c0      	nop			; (mov r8, r8)
10008110:	1000ade1 	.word	0x1000ade1
10008114:	10011215 	.word	0x10011215
10008118:	1001535c 	.word	0x1001535c
1000811c:	000f4240 	.word	0x000f4240
10008120:	10015358 	.word	0x10015358
10008124:	e000e010 	.word	0xe000e010

10008128 <delay_cycles_ms>:
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(uint32_t n)
{
10008128:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
1000812a:	4b08      	ldr	r3, [pc, #32]	; (1000814c <delay_cycles_ms+0x24>)
1000812c:	681c      	ldr	r4, [r3, #0]
 * \param n Number of cycles
 */
static inline void delay_cycles(const uint32_t n)
{
    if(n > 0) {
        SysTick->LOAD = n;
1000812e:	4a08      	ldr	r2, [pc, #32]	; (10008150 <delay_cycles_ms+0x28>)
        SysTick->VAL = 0;
10008130:	2500      	movs	r5, #0
        while(!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
10008132:	2180      	movs	r1, #128	; 0x80
10008134:	0249      	lsls	r1, r1, #9
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(uint32_t n)
{
	while (n--) {
10008136:	e006      	b.n	10008146 <delay_cycles_ms+0x1e>
 *
 * \param n Number of cycles
 */
static inline void delay_cycles(const uint32_t n)
{
    if(n > 0) {
10008138:	2c00      	cmp	r4, #0
1000813a:	d004      	beq.n	10008146 <delay_cycles_ms+0x1e>
        SysTick->LOAD = n;
1000813c:	6054      	str	r4, [r2, #4]
        SysTick->VAL = 0;
1000813e:	6095      	str	r5, [r2, #8]
        while(!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
10008140:	6813      	ldr	r3, [r2, #0]
10008142:	420b      	tst	r3, r1
10008144:	d0fc      	beq.n	10008140 <delay_cycles_ms+0x18>
10008146:	3801      	subs	r0, #1
10008148:	d2f6      	bcs.n	10008138 <delay_cycles_ms+0x10>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
	}
}
1000814a:	bd30      	pop	{r4, r5, pc}
1000814c:	1001535c 	.word	0x1001535c
10008150:	e000e010 	.word	0xe000e010

10008154 <aon_sleep_timer_get_config_defaults>:
 * \param[out]  config  Pointer to a AON Sleep Timer module configuration structure to set
 */
void aon_sleep_timer_get_config_defaults(struct aon_sleep_timer_config *config)
{
	/* Default configuration values */
	config->wakeup = AON_SLEEP_TIMER_WAKEUP_ARM;
10008154:	2301      	movs	r3, #1
10008156:	7003      	strb	r3, [r0, #0]
	config->mode = AON_SLEEP_TIMER_SINGLE_MODE;
10008158:	7043      	strb	r3, [r0, #1]
	config->counter = 32000;
1000815a:	23fa      	movs	r3, #250	; 0xfa
1000815c:	01db      	lsls	r3, r3, #7
1000815e:	6043      	str	r3, [r0, #4]
}
10008160:	4770      	bx	lr
10008162:	46c0      	nop			; (mov r8, r8)

10008164 <aon_sleep_timer_disable>:
 */
void aon_sleep_timer_disable(void)
{
	uint32_t regval;

	AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = 0;
10008164:	4b06      	ldr	r3, [pc, #24]	; (10008180 <aon_sleep_timer_disable+0x1c>)
10008166:	2200      	movs	r2, #0
10008168:	605a      	str	r2, [r3, #4]
	regval = AON_SLEEP_TIMER0->CONTROL.reg;
1000816a:	681a      	ldr	r2, [r3, #0]
	regval &= ~AON_SLEEP_TIMER_CONTROL_RELOAD_ENABLE;
	regval &= ~AON_SLEEP_TIMER_CONTROL_SINGLE_COUNT_ENABLE;
1000816c:	2103      	movs	r1, #3
1000816e:	438a      	bics	r2, r1
	AON_SLEEP_TIMER0->CONTROL.reg = regval;
10008170:	601a      	str	r2, [r3, #0]

	while (AON_SLEEP_TIMER0->CONTROL.reg & (1 << 14)) {
10008172:	0019      	movs	r1, r3
10008174:	2280      	movs	r2, #128	; 0x80
10008176:	01d2      	lsls	r2, r2, #7
10008178:	680b      	ldr	r3, [r1, #0]
1000817a:	4213      	tst	r3, r2
1000817c:	d1fc      	bne.n	10008178 <aon_sleep_timer_disable+0x14>
	}
}
1000817e:	4770      	bx	lr
10008180:	4000d000 	.word	0x4000d000

10008184 <aon_sleep_timer_clear_interrup>:
 * This flag will be cleared automatically once the IRQ
 * has been seen on the sleep clock.
 */
void aon_sleep_timer_clear_interrup(void)
{
	AON_SLEEP_TIMER0->CONTROL.reg |= AON_SLEEP_TIMER_CONTROL_IRQ_CLEAR;
10008184:	4a02      	ldr	r2, [pc, #8]	; (10008190 <aon_sleep_timer_clear_interrup+0xc>)
10008186:	6811      	ldr	r1, [r2, #0]
10008188:	2310      	movs	r3, #16
1000818a:	430b      	orrs	r3, r1
1000818c:	6013      	str	r3, [r2, #0]
}
1000818e:	4770      	bx	lr
10008190:	4000d000 	.word	0x4000d000

10008194 <aon_sleep_timer_isr_handler>:
 *
 * Timer ISR handler.
 *
 */
static void aon_sleep_timer_isr_handler(void)
{
10008194:	b510      	push	{r4, lr}
	aon_sleep_timer_clear_interrup();
10008196:	4b04      	ldr	r3, [pc, #16]	; (100081a8 <aon_sleep_timer_isr_handler+0x14>)
10008198:	4798      	blx	r3

	if (aon_sleep_timer_callback) {
1000819a:	4b04      	ldr	r3, [pc, #16]	; (100081ac <aon_sleep_timer_isr_handler+0x18>)
1000819c:	681b      	ldr	r3, [r3, #0]
1000819e:	2b00      	cmp	r3, #0
100081a0:	d000      	beq.n	100081a4 <aon_sleep_timer_isr_handler+0x10>
		aon_sleep_timer_callback();
100081a2:	4798      	blx	r3
	}
}
100081a4:	bd10      	pop	{r4, pc}
100081a6:	46c0      	nop			; (mov r8, r8)
100081a8:	10008185 	.word	0x10008185
100081ac:	10015420 	.word	0x10015420

100081b0 <aon_sleep_timer_register_callback>:
 *
 * \param[in]     callback_func Pointer to callback function
 */
void aon_sleep_timer_register_callback(aon_sleep_timer_callback_t fun)
{
	aon_sleep_timer_callback = fun;
100081b0:	4b01      	ldr	r3, [pc, #4]	; (100081b8 <aon_sleep_timer_register_callback+0x8>)
100081b2:	6018      	str	r0, [r3, #0]
}
100081b4:	4770      	bx	lr
100081b6:	46c0      	nop			; (mov r8, r8)
100081b8:	10015420 	.word	0x10015420

100081bc <aon_sleep_timer_unregister_callback>:
 * Unregisters and disable a callback function implemented by the user.
 *
 */
void aon_sleep_timer_unregister_callback(void)
{
	aon_sleep_timer_callback = NULL;
100081bc:	2200      	movs	r2, #0
100081be:	4b01      	ldr	r3, [pc, #4]	; (100081c4 <aon_sleep_timer_unregister_callback+0x8>)
100081c0:	601a      	str	r2, [r3, #0]
}
100081c2:	4770      	bx	lr
100081c4:	10015420 	.word	0x10015420

100081c8 <aon_sleep_timer_init>:
 *
 * \param[in]     config       Pointer to the AON Sleep Timer configuration options struct
 *
 */
void aon_sleep_timer_init(const struct aon_sleep_timer_config *config)
{
100081c8:	b5f0      	push	{r4, r5, r6, r7, lr}
100081ca:	b083      	sub	sp, #12
	uint32_t aon_st_ctrl = 0;

	AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg = AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_RESETVALUE;
100081cc:	2200      	movs	r2, #0
100081ce:	4b2b      	ldr	r3, [pc, #172]	; (1000827c <aon_sleep_timer_init+0xb4>)
100081d0:	731a      	strb	r2, [r3, #12]
	if (config->wakeup == AON_SLEEP_TIMER_WAKEUP_ARM_BLE) {
100081d2:	7803      	ldrb	r3, [r0, #0]
100081d4:	2b02      	cmp	r3, #2
100081d6:	d105      	bne.n	100081e4 <aon_sleep_timer_init+0x1c>
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
100081d8:	4a28      	ldr	r2, [pc, #160]	; (1000827c <aon_sleep_timer_init+0xb4>)
100081da:	7b11      	ldrb	r1, [r2, #12]
100081dc:	3301      	adds	r3, #1
100081de:	430b      	orrs	r3, r1
100081e0:	7313      	strb	r3, [r2, #12]
100081e2:	e005      	b.n	100081f0 <aon_sleep_timer_init+0x28>
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE |
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_BLE_ENABLE;
	} else if (config->wakeup == AON_SLEEP_TIMER_WAKEUP_ARM) {
100081e4:	2b01      	cmp	r3, #1
100081e6:	d103      	bne.n	100081f0 <aon_sleep_timer_init+0x28>
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
100081e8:	4a24      	ldr	r2, [pc, #144]	; (1000827c <aon_sleep_timer_init+0xb4>)
100081ea:	7b11      	ldrb	r1, [r2, #12]
100081ec:	430b      	orrs	r3, r1
100081ee:	7313      	strb	r3, [r2, #12]
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
100081f0:	4b23      	ldr	r3, [pc, #140]	; (10008280 <aon_sleep_timer_init+0xb8>)
100081f2:	681a      	ldr	r2, [r3, #0]
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
100081f4:	0053      	lsls	r3, r2, #1
100081f6:	d01f      	beq.n	10008238 <aon_sleep_timer_init+0x70>
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
100081f8:	4d21      	ldr	r5, [pc, #132]	; (10008280 <aon_sleep_timer_init+0xb8>)
100081fa:	2700      	movs	r7, #0

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;

	for (i = 0; i < cycles*100; i++) {
100081fc:	262c      	movs	r6, #44	; 0x2c
100081fe:	36ff      	adds	r6, #255	; 0xff
10008200:	2180      	movs	r1, #128	; 0x80
10008202:	01c9      	lsls	r1, r1, #7
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
10008204:	602f      	str	r7, [r5, #0]

static aon_sleep_timer_callback_t aon_sleep_timer_callback = NULL;

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;
10008206:	9701      	str	r7, [sp, #4]

	for (i = 0; i < cycles*100; i++) {
10008208:	9701      	str	r7, [sp, #4]
1000820a:	9b01      	ldr	r3, [sp, #4]
1000820c:	42b3      	cmp	r3, r6
1000820e:	d806      	bhi.n	1000821e <aon_sleep_timer_init+0x56>
		asm volatile ("nop");
10008210:	46c0      	nop			; (mov r8, r8)

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;

	for (i = 0; i < cycles*100; i++) {
10008212:	9b01      	ldr	r3, [sp, #4]
10008214:	3301      	adds	r3, #1
10008216:	9301      	str	r3, [sp, #4]
10008218:	9b01      	ldr	r3, [sp, #4]
1000821a:	42b3      	cmp	r3, r6
1000821c:	d9f8      	bls.n	10008210 <aon_sleep_timer_init+0x48>
1000821e:	7844      	ldrb	r4, [r0, #1]
10008220:	000b      	movs	r3, r1
10008222:	2c00      	cmp	r4, #0
10008224:	d103      	bne.n	1000822e <aon_sleep_timer_init+0x66>
10008226:	2380      	movs	r3, #128	; 0x80
10008228:	009b      	lsls	r3, r3, #2
1000822a:	e000      	b.n	1000822e <aon_sleep_timer_init+0x66>
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
		delay_cycle(3);
		while (aon_st_ctrl & ((config->mode == AON_SLEEP_TIMER_RELOAD_MODE) ?
				(1 << 9) : (1 << 14))) {
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
1000822c:	682a      	ldr	r2, [r5, #0]

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
		delay_cycle(3);
		while (aon_st_ctrl & ((config->mode == AON_SLEEP_TIMER_RELOAD_MODE) ?
1000822e:	4213      	tst	r3, r2
10008230:	d1fc      	bne.n	1000822c <aon_sleep_timer_init+0x64>
				(1 << 9) : (1 << 14))) {
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
		}
		aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
10008232:	682a      	ldr	r2, [r5, #0]
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
10008234:	0053      	lsls	r3, r2, #1
10008236:	d1e5      	bne.n	10008204 <aon_sleep_timer_init+0x3c>
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
		}
		aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	}

	if (config->mode == AON_SLEEP_TIMER_RELOAD_MODE) {
10008238:	7843      	ldrb	r3, [r0, #1]
1000823a:	2b00      	cmp	r3, #0
1000823c:	d105      	bne.n	1000824a <aon_sleep_timer_init+0x82>
		/* Reload counter will start here */
		AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = config->counter;
1000823e:	4b10      	ldr	r3, [pc, #64]	; (10008280 <aon_sleep_timer_init+0xb8>)
10008240:	6842      	ldr	r2, [r0, #4]
10008242:	605a      	str	r2, [r3, #4]
		AON_SLEEP_TIMER0->CONTROL.reg = AON_SLEEP_TIMER_CONTROL_RELOAD_ENABLE;
10008244:	2201      	movs	r2, #1
10008246:	601a      	str	r2, [r3, #0]
10008248:	e004      	b.n	10008254 <aon_sleep_timer_init+0x8c>
	} else {
		/* Single counter will start here */
		AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = config->counter;
1000824a:	4b0d      	ldr	r3, [pc, #52]	; (10008280 <aon_sleep_timer_init+0xb8>)
1000824c:	6842      	ldr	r2, [r0, #4]
1000824e:	605a      	str	r2, [r3, #4]
		AON_SLEEP_TIMER0->CONTROL.reg = AON_SLEEP_TIMER_CONTROL_SINGLE_COUNT_ENABLE;
10008250:	2202      	movs	r2, #2
10008252:	601a      	str	r2, [r3, #0]
	}

	if (config->mode == AON_SLEEP_TIMER_SINGLE_MODE) {
10008254:	7843      	ldrb	r3, [r0, #1]
10008256:	2b01      	cmp	r3, #1
10008258:	d109      	bne.n	1000826e <aon_sleep_timer_init+0xa6>
		while ((AON_SLEEP_TIMER0->CONTROL.reg &
1000825a:	4909      	ldr	r1, [pc, #36]	; (10008280 <aon_sleep_timer_init+0xb8>)
1000825c:	22e0      	movs	r2, #224	; 0xe0
1000825e:	01d2      	lsls	r2, r2, #7
10008260:	680b      	ldr	r3, [r1, #0]
10008262:	4013      	ands	r3, r2
10008264:	4293      	cmp	r3, r2
10008266:	d1fb      	bne.n	10008260 <aon_sleep_timer_init+0x98>
				AON_SLEEP_TIMER_CONTROL_SLP_TIMER_SINGLE_COUNT_ENABLE_DLY_Msk)
				!= AON_SLEEP_TIMER_CONTROL_SLP_TIMER_SINGLE_COUNT_ENABLE_DLY_Msk) {
		}
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
10008268:	2200      	movs	r2, #0
1000826a:	4b05      	ldr	r3, [pc, #20]	; (10008280 <aon_sleep_timer_init+0xb8>)
1000826c:	601a      	str	r2, [r3, #0]
	}

	system_register_isr(RAM_ISR_TABLE_AON_SLEEP_TIMER_INDEX, (uint32_t)aon_sleep_timer_isr_handler);
1000826e:	4905      	ldr	r1, [pc, #20]	; (10008284 <aon_sleep_timer_init+0xbc>)
10008270:	202b      	movs	r0, #43	; 0x2b
10008272:	4b05      	ldr	r3, [pc, #20]	; (10008288 <aon_sleep_timer_init+0xc0>)
10008274:	4798      	blx	r3
}
10008276:	b003      	add	sp, #12
10008278:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000827a:	46c0      	nop			; (mov r8, r8)
1000827c:	4000e000 	.word	0x4000e000
10008280:	4000d000 	.word	0x4000d000
10008284:	10008195 	.word	0x10008195
10008288:	1000b91d 	.word	0x1000b91d

1000828c <_i2c_master_read_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000828c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000828e:	464f      	mov	r7, r9
10008290:	4646      	mov	r6, r8
10008292:	b4c0      	push	{r6, r7}
10008294:	4681      	mov	r9, r0
	Assert(config);
	
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
	uint16_t length = packet->data_length;
10008296:	884d      	ldrh	r5, [r1, #2]

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
10008298:	2317      	movs	r3, #23
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
	uint16_t length = packet->data_length;

	if (length == 0) {
1000829a:	2d00      	cmp	r5, #0
1000829c:	d02f      	beq.n	100082fe <_i2c_master_read_packet+0x72>
	Assert(module->hw);
	Assert(config);
	
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
1000829e:	6802      	ldr	r2, [r0, #0]
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2c *const i2c_module)
{
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
100082a0:	2428      	movs	r4, #40	; 0x28
100082a2:	5d13      	ldrb	r3, [r2, r4]
100082a4:	07db      	lsls	r3, r3, #31
100082a6:	d4fc      	bmi.n	100082a2 <_i2c_master_read_packet+0x16>
	}

	i2c_wait_for_idle(i2c_module);

	/* Flush the FIFO */
	i2c_module->I2C_FLUSH.reg = 1;
100082a8:	2301      	movs	r3, #1
100082aa:	2434      	movs	r4, #52	; 0x34
100082ac:	5513      	strb	r3, [r2, r4]

	/* Enable I2C on bus (start condition). */
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
100082ae:	3c14      	subs	r4, #20
100082b0:	5513      	strb	r3, [r2, r4]
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
100082b2:	880b      	ldrh	r3, [r1, #0]
100082b4:	005b      	lsls	r3, r3, #1
100082b6:	2402      	movs	r4, #2
100082b8:	34ff      	adds	r4, #255	; 0xff
100082ba:	4323      	orrs	r3, r4
100082bc:	b29b      	uxth	r3, r3
100082be:	8013      	strh	r3, [r2, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);
	
	uint16_t counter = 0;
100082c0:	2400      	movs	r4, #0
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
			(packet->address << 1) | I2C_TRANSFER_READ;
	do {
		status = i2c_module->RECEIVE_STATUS.reg;
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
100082c2:	2301      	movs	r3, #1
100082c4:	4698      	mov	r8, r3
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
			(packet->address << 1) | I2C_TRANSFER_READ;
	do {
		status = i2c_module->RECEIVE_STATUS.reg;
100082c6:	7b13      	ldrb	r3, [r2, #12]
100082c8:	b2db      	uxtb	r3, r3
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
100082ca:	4640      	mov	r0, r8
100082cc:	4218      	tst	r0, r3
100082ce:	d006      	beq.n	100082de <_i2c_master_read_packet+0x52>
			packet->data[counter++] = i2c_module->RECEIVE_DATA.reg;
100082d0:	1c67      	adds	r7, r4, #1
100082d2:	7910      	ldrb	r0, [r2, #4]
100082d4:	4684      	mov	ip, r0
100082d6:	6848      	ldr	r0, [r1, #4]
100082d8:	4666      	mov	r6, ip
100082da:	5506      	strb	r6, [r0, r4]
100082dc:	b2bc      	uxth	r4, r7
	} while (counter < length); 
100082de:	42ac      	cmp	r4, r5
100082e0:	d3f1      	bcc.n	100082c6 <_i2c_master_read_packet+0x3a>

	/* Now check whether the core has sent the data out and free the bus. */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
100082e2:	06db      	lsls	r3, r3, #27
100082e4:	d403      	bmi.n	100082ee <_i2c_master_read_packet+0x62>
100082e6:	2110      	movs	r1, #16
		status = i2c_module->TRANSMIT_STATUS.reg;
100082e8:	7a13      	ldrb	r3, [r2, #8]
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
			packet->data[counter++] = i2c_module->RECEIVE_DATA.reg;
	} while (counter < length); 

	/* Now check whether the core has sent the data out and free the bus. */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
100082ea:	420b      	tst	r3, r1
100082ec:	d0fc      	beq.n	100082e8 <_i2c_master_read_packet+0x5c>
		status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition. */
	if (!module->no_stop) {
100082ee:	464b      	mov	r3, r9
100082f0:	7959      	ldrb	r1, [r3, #5]
		i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
	}

	return STATUS_OK;
100082f2:	2300      	movs	r3, #0
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
		status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition. */
	if (!module->no_stop) {
100082f4:	2900      	cmp	r1, #0
100082f6:	d102      	bne.n	100082fe <_i2c_master_read_packet+0x72>
		i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
100082f8:	3320      	adds	r3, #32
100082fa:	54d1      	strb	r1, [r2, r3]
	}

	return STATUS_OK;
100082fc:	2300      	movs	r3, #0
}
100082fe:	0018      	movs	r0, r3
10008300:	bc0c      	pop	{r2, r3}
10008302:	4690      	mov	r8, r2
10008304:	4699      	mov	r9, r3
10008306:	bdf0      	pop	{r4, r5, r6, r7, pc}

10008308 <_i2c_master_write_packet>:
 * \retval STATUS_OK                    The packet was write successfully
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
10008308:	b5f0      	push	{r4, r5, r6, r7, lr}
1000830a:	4684      	mov	ip, r0
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);
	
	I2c *const i2c_module = (module->hw);
1000830c:	6802      	ldr	r2, [r0, #0]
	uint16_t counter = 0;
	uint32_t status  = 0;

	uint16_t length = packet->data_length;
1000830e:	884e      	ldrh	r6, [r1, #2]
10008310:	2428      	movs	r4, #40	; 0x28
10008312:	5d13      	ldrb	r3, [r2, r4]
10008314:	07db      	lsls	r3, r3, #31
10008316:	d4fc      	bmi.n	10008312 <_i2c_master_write_packet+0xa>

	i2c_wait_for_idle(i2c_module);

	/* Flush the FIFO */
	i2c_module->I2C_FLUSH.reg = 1;
10008318:	2301      	movs	r3, #1
1000831a:	2434      	movs	r4, #52	; 0x34
1000831c:	5513      	strb	r3, [r2, r4]

	/* Enable I2C on bus (start condition) */
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
1000831e:	3c14      	subs	r4, #20
10008320:	5513      	strb	r3, [r2, r4]

	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
10008322:	880b      	ldrh	r3, [r1, #0]
10008324:	005b      	lsls	r3, r3, #1
10008326:	34e0      	adds	r4, #224	; 0xe0
10008328:	4323      	orrs	r3, r4
1000832a:	b29b      	uxth	r3, r3
1000832c:	8013      	strh	r3, [r2, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);
	
	I2c *const i2c_module = (module->hw);
	uint16_t counter = 0;
1000832e:	2400      	movs	r4, #0
	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
			((packet->address) << 1) | I2C_TRANSFER_WRITE;
	do {
		status = i2c_module->TRANSMIT_STATUS.reg;
		if (status & I2C_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_Msk) {
10008330:	2501      	movs	r5, #1

	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
			((packet->address) << 1) | I2C_TRANSFER_WRITE;
	do {
		status = i2c_module->TRANSMIT_STATUS.reg;
10008332:	7a13      	ldrb	r3, [r2, #8]
10008334:	b2db      	uxtb	r3, r3
		if (status & I2C_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_Msk) {
10008336:	421d      	tst	r5, r3
10008338:	d004      	beq.n	10008344 <_i2c_master_write_packet+0x3c>
			i2c_module->TRANSMIT_DATA.reg = packet->data[counter++];
1000833a:	1c67      	adds	r7, r4, #1
1000833c:	6848      	ldr	r0, [r1, #4]
1000833e:	5d04      	ldrb	r4, [r0, r4]
10008340:	8014      	strh	r4, [r2, #0]
10008342:	b2bc      	uxth	r4, r7
		}
	} while (counter < length); 
10008344:	42b4      	cmp	r4, r6
10008346:	d3f4      	bcc.n	10008332 <_i2c_master_write_packet+0x2a>

	/* Now check whether the core has sent the data out and free the bus */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
10008348:	06db      	lsls	r3, r3, #27
1000834a:	d403      	bmi.n	10008354 <_i2c_master_write_packet+0x4c>
1000834c:	2110      	movs	r1, #16
			status = i2c_module->TRANSMIT_STATUS.reg;
1000834e:	7a13      	ldrb	r3, [r2, #8]
			i2c_module->TRANSMIT_DATA.reg = packet->data[counter++];
		}
	} while (counter < length); 

	/* Now check whether the core has sent the data out and free the bus */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
10008350:	420b      	tst	r3, r1
10008352:	d0fc      	beq.n	1000834e <_i2c_master_write_packet+0x46>
			status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition */
	if (!module->no_stop) {
10008354:	4663      	mov	r3, ip
10008356:	795b      	ldrb	r3, [r3, #5]
10008358:	2b00      	cmp	r3, #0
1000835a:	d102      	bne.n	10008362 <_i2c_master_write_packet+0x5a>
		i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
1000835c:	2100      	movs	r1, #0
1000835e:	3320      	adds	r3, #32
10008360:	54d1      	strb	r1, [r2, r3]
	}

	return STATUS_OK;
}
10008362:	2000      	movs	r0, #0
10008364:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008366:	46c0      	nop			; (mov r8, r8)

10008368 <i2c_master_get_config_defaults>:
		struct i2c_master_config *const config)
{
	/* Sanity check */
	Assert(config);
	
	config->clock_source    = I2C_CLK_INPUT_3;
10008368:	2303      	movs	r3, #3
1000836a:	7003      	strb	r3, [r0, #0]
	config->clock_divider   = 0x10;
1000836c:	330d      	adds	r3, #13
1000836e:	8043      	strh	r3, [r0, #2]
	config->pin_number_pad0 = PIN_LP_GPIO_8;
10008370:	3b08      	subs	r3, #8
10008372:	6043      	str	r3, [r0, #4]
	config->pin_number_pad1 = PIN_LP_GPIO_9;
10008374:	3301      	adds	r3, #1
10008376:	60c3      	str	r3, [r0, #12]
	config->pinmux_sel_pad0 = MUX_LP_GPIO_8_I2C0_SDA;
10008378:	3b07      	subs	r3, #7
1000837a:	6083      	str	r3, [r0, #8]
	config->pinmux_sel_pad1 = MUX_LP_GPIO_9_I2C0_SCL;
1000837c:	6103      	str	r3, [r0, #16]
}
1000837e:	4770      	bx	lr

10008380 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		I2c *const hw,
		const struct i2c_master_config *const config)
{
10008380:	b570      	push	{r4, r5, r6, lr}
10008382:	0004      	movs	r4, r0
10008384:	0015      	movs	r5, r2
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);
	
	module->hw = hw;
10008386:	6001      	str	r1, [r0, #0]

	/* Sanity check arguments. */
	if ((module == NULL) || (config == NULL))
10008388:	2800      	cmp	r0, #0
1000838a:	d026      	beq.n	100083da <i2c_master_init+0x5a>
1000838c:	2a00      	cmp	r2, #0
1000838e:	d026      	beq.n	100083de <i2c_master_init+0x5e>
10008390:	2228      	movs	r2, #40	; 0x28
10008392:	5c8b      	ldrb	r3, [r1, r2]
10008394:	07db      	lsls	r3, r3, #31
10008396:	d4fc      	bmi.n	10008392 <i2c_master_init+0x12>
 *
 */
static inline void i2c_disable(I2c *const i2c_module)
{
	i2c_wait_for_idle(i2c_module);
	i2c_module->I2C_MODULE_ENABLE.reg = 0;
10008398:	2300      	movs	r3, #0
1000839a:	750b      	strb	r3, [r1, #20]
		return STATUS_ERR_INVALID_ARG;

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
1000839c:	6823      	ldr	r3, [r4, #0]
1000839e:	4a11      	ldr	r2, [pc, #68]	; (100083e4 <i2c_master_init+0x64>)
100083a0:	4293      	cmp	r3, r2
100083a2:	d103      	bne.n	100083ac <i2c_master_init+0x2c>
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
100083a4:	2003      	movs	r0, #3
100083a6:	4b10      	ldr	r3, [pc, #64]	; (100083e8 <i2c_master_init+0x68>)
100083a8:	4798      	blx	r3
100083aa:	e006      	b.n	100083ba <i2c_master_init+0x3a>
	} else if (module->hw == I2C1) {
		system_peripheral_reset(PERIPHERAL_I2C1_CORE);
	} else {
		return STATUS_ERR_INVALID_ARG;
100083ac:	2017      	movs	r0, #23
		return STATUS_ERR_INVALID_ARG;

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
	} else if (module->hw == I2C1) {
100083ae:	4a0f      	ldr	r2, [pc, #60]	; (100083ec <i2c_master_init+0x6c>)
100083b0:	4293      	cmp	r3, r2
100083b2:	d115      	bne.n	100083e0 <i2c_master_init+0x60>
		system_peripheral_reset(PERIPHERAL_I2C1_CORE);
100083b4:	3002      	adds	r0, #2
100083b6:	4b0c      	ldr	r3, [pc, #48]	; (100083e8 <i2c_master_init+0x68>)
100083b8:	4798      	blx	r3
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);

	I2c *const i2c_module = (module->hw);
100083ba:	6824      	ldr	r4, [r4, #0]

	/* Set the pinmux for this i2c module. */
	gpio_pinmux_cofiguration(config->pin_number_pad0, (uint16_t)(config->pinmux_sel_pad0));
100083bc:	8929      	ldrh	r1, [r5, #8]
100083be:	7928      	ldrb	r0, [r5, #4]
100083c0:	4e0b      	ldr	r6, [pc, #44]	; (100083f0 <i2c_master_init+0x70>)
100083c2:	47b0      	blx	r6
	gpio_pinmux_cofiguration(config->pin_number_pad1, (uint16_t)(config->pinmux_sel_pad1));
100083c4:	8a29      	ldrh	r1, [r5, #16]
100083c6:	7b28      	ldrb	r0, [r5, #12]
100083c8:	47b0      	blx	r6
	/* Set clock. */
	i2c_module->CLOCK_SOURCE_SELECT.reg = config->clock_source;
100083ca:	782b      	ldrb	r3, [r5, #0]
100083cc:	7423      	strb	r3, [r4, #16]
	i2c_module->I2C_CLK_DIVIDER.reg = I2C_CLK_DIVIDER_I2C_DIVIDE_RATIO(config->clock_divider);
100083ce:	886b      	ldrh	r3, [r5, #2]
100083d0:	8323      	strh	r3, [r4, #24]
	/* Enable master mode. */
	i2c_module->I2C_MASTER_MODE.reg = I2C_MASTER_MODE_MASTER_ENABLE_1;
100083d2:	2301      	movs	r3, #1
100083d4:	7723      	strb	r3, [r4, #28]
#endif

	/* Set config and return status. */
	_i2c_master_set_config(module, config);

	return STATUS_OK;
100083d6:	2000      	movs	r0, #0
100083d8:	e002      	b.n	100083e0 <i2c_master_init+0x60>
	
	module->hw = hw;

	/* Sanity check arguments. */
	if ((module == NULL) || (config == NULL))
		return STATUS_ERR_INVALID_ARG;
100083da:	2017      	movs	r0, #23
100083dc:	e000      	b.n	100083e0 <i2c_master_init+0x60>
100083de:	2017      	movs	r0, #23

	/* Set config and return status. */
	_i2c_master_set_config(module, config);

	return STATUS_OK;
}
100083e0:	bd70      	pop	{r4, r5, r6, pc}
100083e2:	46c0      	nop			; (mov r8, r8)
100083e4:	40003000 	.word	0x40003000
100083e8:	1000b4b5 	.word	0x1000b4b5
100083ec:	40003400 	.word	0x40003400
100083f0:	1000aa3d 	.word	0x1000aa3d

100083f4 <i2c_master_read_packet_wait>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
100083f4:	b510      	push	{r4, lr}
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
100083f6:	2800      	cmp	r0, #0
100083f8:	d008      	beq.n	1000840c <i2c_master_read_packet_wait+0x18>
		return STATUS_ERR_INVALID_ARG;
100083fa:	2317      	movs	r3, #23
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
100083fc:	2900      	cmp	r1, #0
100083fe:	d006      	beq.n	1000840e <i2c_master_read_packet_wait+0x1a>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
10008400:	2300      	movs	r3, #0
10008402:	7143      	strb	r3, [r0, #5]

	return _i2c_master_read_packet(module, packet);
10008404:	4b03      	ldr	r3, [pc, #12]	; (10008414 <i2c_master_read_packet_wait+0x20>)
10008406:	4798      	blx	r3
10008408:	0003      	movs	r3, r0
1000840a:	e000      	b.n	1000840e <i2c_master_read_packet_wait+0x1a>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
		return STATUS_ERR_INVALID_ARG;
1000840c:	2317      	movs	r3, #23
#endif

	module->no_stop = false;

	return _i2c_master_read_packet(module, packet);
}
1000840e:	0018      	movs	r0, r3
10008410:	bd10      	pop	{r4, pc}
10008412:	46c0      	nop			; (mov r8, r8)
10008414:	1000828d 	.word	0x1000828d

10008418 <i2c_master_write_packet_wait>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
10008418:	b510      	push	{r4, lr}
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
1000841a:	2800      	cmp	r0, #0
1000841c:	d008      	beq.n	10008430 <i2c_master_write_packet_wait+0x18>
		return STATUS_ERR_INVALID_ARG;
1000841e:	2317      	movs	r3, #23
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
10008420:	2900      	cmp	r1, #0
10008422:	d006      	beq.n	10008432 <i2c_master_write_packet_wait+0x1a>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
10008424:	2300      	movs	r3, #0
10008426:	7143      	strb	r3, [r0, #5]

	return _i2c_master_write_packet(module, packet);
10008428:	4b03      	ldr	r3, [pc, #12]	; (10008438 <i2c_master_write_packet_wait+0x20>)
1000842a:	4798      	blx	r3
1000842c:	0003      	movs	r3, r0
1000842e:	e000      	b.n	10008432 <i2c_master_write_packet_wait+0x1a>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
10008430:	2317      	movs	r3, #23
#endif

	module->no_stop = false;

	return _i2c_master_write_packet(module, packet);
}
10008432:	0018      	movs	r0, r3
10008434:	bd10      	pop	{r4, pc}
10008436:	46c0      	nop			; (mov r8, r8)
10008438:	10008309 	.word	0x10008309

1000843c <i2c_master_write_packet_wait_no_stop>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000843c:	b510      	push	{r4, lr}
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
1000843e:	2800      	cmp	r0, #0
10008440:	d008      	beq.n	10008454 <i2c_master_write_packet_wait_no_stop+0x18>
		return STATUS_ERR_INVALID_ARG;
10008442:	2317      	movs	r3, #23
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
10008444:	2900      	cmp	r1, #0
10008446:	d006      	beq.n	10008456 <i2c_master_write_packet_wait_no_stop+0x1a>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = true;
10008448:	3b16      	subs	r3, #22
1000844a:	7143      	strb	r3, [r0, #5]

	return _i2c_master_write_packet(module, packet);
1000844c:	4b03      	ldr	r3, [pc, #12]	; (1000845c <i2c_master_write_packet_wait_no_stop+0x20>)
1000844e:	4798      	blx	r3
10008450:	0003      	movs	r3, r0
10008452:	e000      	b.n	10008456 <i2c_master_write_packet_wait_no_stop+0x1a>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
10008454:	2317      	movs	r3, #23
#endif

	module->no_stop = true;

	return _i2c_master_write_packet(module, packet);
}
10008456:	0018      	movs	r0, r3
10008458:	bd10      	pop	{r4, pc}
1000845a:	46c0      	nop			; (mov r8, r8)
1000845c:	10008309 	.word	0x10008309

10008460 <set_int_enable>:
 *  interrupt is used.
 *  @param[in]  enable      1 to enable interrupt.
 *  @return     0 if successful.
 */
static int set_int_enable(unsigned char enable)
{
10008460:	b510      	push	{r4, lr}
10008462:	b082      	sub	sp, #8
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
10008464:	2324      	movs	r3, #36	; 0x24
10008466:	4a25      	ldr	r2, [pc, #148]	; (100084fc <set_int_enable+0x9c>)
10008468:	5cd3      	ldrb	r3, [r2, r3]
1000846a:	2b00      	cmp	r3, #0
1000846c:	d019      	beq.n	100084a2 <set_int_enable+0x42>
        if (enable)
1000846e:	2800      	cmp	r0, #0
10008470:	d003      	beq.n	1000847a <set_int_enable+0x1a>
            tmp = BIT_DMP_INT_EN;
10008472:	2202      	movs	r2, #2
10008474:	466b      	mov	r3, sp
10008476:	71da      	strb	r2, [r3, #7]
10008478:	e002      	b.n	10008480 <set_int_enable+0x20>
        else
            tmp = 0x00;
1000847a:	2200      	movs	r2, #0
1000847c:	466b      	mov	r3, sp
1000847e:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
10008480:	4b1e      	ldr	r3, [pc, #120]	; (100084fc <set_int_enable+0x9c>)
10008482:	681a      	ldr	r2, [r3, #0]
10008484:	7c51      	ldrb	r1, [r2, #17]
10008486:	685b      	ldr	r3, [r3, #4]
10008488:	7818      	ldrb	r0, [r3, #0]
1000848a:	466b      	mov	r3, sp
1000848c:	3307      	adds	r3, #7
1000848e:	2201      	movs	r2, #1
10008490:	4c1b      	ldr	r4, [pc, #108]	; (10008500 <set_int_enable+0xa0>)
10008492:	47a0      	blx	r4
10008494:	2800      	cmp	r0, #0
10008496:	d127      	bne.n	100084e8 <set_int_enable+0x88>
            return -1;
        st.chip_cfg.int_enable = tmp;
10008498:	466b      	mov	r3, sp
1000849a:	79da      	ldrb	r2, [r3, #7]
1000849c:	4b17      	ldr	r3, [pc, #92]	; (100084fc <set_int_enable+0x9c>)
1000849e:	745a      	strb	r2, [r3, #17]
100084a0:	e02a      	b.n	100084f8 <set_int_enable+0x98>
    } else {
        if (!st.chip_cfg.sensors)
100084a2:	4b16      	ldr	r3, [pc, #88]	; (100084fc <set_int_enable+0x9c>)
100084a4:	7a9b      	ldrb	r3, [r3, #10]
100084a6:	2b00      	cmp	r3, #0
100084a8:	d021      	beq.n	100084ee <set_int_enable+0x8e>
            return -1;
        if (enable && st.chip_cfg.int_enable)
100084aa:	2800      	cmp	r0, #0
100084ac:	d008      	beq.n	100084c0 <set_int_enable+0x60>
100084ae:	4b13      	ldr	r3, [pc, #76]	; (100084fc <set_int_enable+0x9c>)
100084b0:	7c5b      	ldrb	r3, [r3, #17]
            return 0;
100084b2:	2000      	movs	r0, #0
            return -1;
        st.chip_cfg.int_enable = tmp;
    } else {
        if (!st.chip_cfg.sensors)
            return -1;
        if (enable && st.chip_cfg.int_enable)
100084b4:	2b00      	cmp	r3, #0
100084b6:	d11f      	bne.n	100084f8 <set_int_enable+0x98>
            return 0;
        if (enable)
            tmp = BIT_DATA_RDY_EN;
100084b8:	2201      	movs	r2, #1
100084ba:	466b      	mov	r3, sp
100084bc:	71da      	strb	r2, [r3, #7]
100084be:	e002      	b.n	100084c6 <set_int_enable+0x66>
        else
            tmp = 0x00;
100084c0:	2200      	movs	r2, #0
100084c2:	466b      	mov	r3, sp
100084c4:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
100084c6:	4b0d      	ldr	r3, [pc, #52]	; (100084fc <set_int_enable+0x9c>)
100084c8:	681a      	ldr	r2, [r3, #0]
100084ca:	7c51      	ldrb	r1, [r2, #17]
100084cc:	685b      	ldr	r3, [r3, #4]
100084ce:	7818      	ldrb	r0, [r3, #0]
100084d0:	466b      	mov	r3, sp
100084d2:	3307      	adds	r3, #7
100084d4:	2201      	movs	r2, #1
100084d6:	4c0a      	ldr	r4, [pc, #40]	; (10008500 <set_int_enable+0xa0>)
100084d8:	47a0      	blx	r4
100084da:	2800      	cmp	r0, #0
100084dc:	d10a      	bne.n	100084f4 <set_int_enable+0x94>
            return -1;
        st.chip_cfg.int_enable = tmp;
100084de:	466b      	mov	r3, sp
100084e0:	79da      	ldrb	r2, [r3, #7]
100084e2:	4b06      	ldr	r3, [pc, #24]	; (100084fc <set_int_enable+0x9c>)
100084e4:	745a      	strb	r2, [r3, #17]
100084e6:	e007      	b.n	100084f8 <set_int_enable+0x98>
        if (enable)
            tmp = BIT_DMP_INT_EN;
        else
            tmp = 0x00;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
            return -1;
100084e8:	2001      	movs	r0, #1
100084ea:	4240      	negs	r0, r0
100084ec:	e004      	b.n	100084f8 <set_int_enable+0x98>
        st.chip_cfg.int_enable = tmp;
    } else {
        if (!st.chip_cfg.sensors)
            return -1;
100084ee:	2001      	movs	r0, #1
100084f0:	4240      	negs	r0, r0
100084f2:	e001      	b.n	100084f8 <set_int_enable+0x98>
        if (enable)
            tmp = BIT_DATA_RDY_EN;
        else
            tmp = 0x00;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
            return -1;
100084f4:	2001      	movs	r0, #1
100084f6:	4240      	negs	r0, r0
        st.chip_cfg.int_enable = tmp;
    }
    return 0;
}
100084f8:	b002      	add	sp, #8
100084fa:	bd10      	pop	{r4, pc}
100084fc:	10015360 	.word	0x10015360
10008500:	10009ba5 	.word	0x10009ba5

10008504 <mpu_reset_fifo>:
/**
 *  @brief  Reset FIFO read/write pointers.
 *  @return 0 if successful.
 */
int mpu_reset_fifo(void)
{
10008504:	b510      	push	{r4, lr}
10008506:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
10008508:	4b79      	ldr	r3, [pc, #484]	; (100086f0 <mpu_reset_fifo+0x1ec>)
1000850a:	7a9b      	ldrb	r3, [r3, #10]
1000850c:	2b00      	cmp	r3, #0
1000850e:	d100      	bne.n	10008512 <mpu_reset_fifo+0xe>
10008510:	e0ce      	b.n	100086b0 <mpu_reset_fifo+0x1ac>
        return -1;

    data = 0;
10008512:	466b      	mov	r3, sp
10008514:	3307      	adds	r3, #7
10008516:	2200      	movs	r2, #0
10008518:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
1000851a:	4a75      	ldr	r2, [pc, #468]	; (100086f0 <mpu_reset_fifo+0x1ec>)
1000851c:	6811      	ldr	r1, [r2, #0]
1000851e:	7c49      	ldrb	r1, [r1, #17]
10008520:	6852      	ldr	r2, [r2, #4]
10008522:	7810      	ldrb	r0, [r2, #0]
10008524:	2201      	movs	r2, #1
10008526:	4c73      	ldr	r4, [pc, #460]	; (100086f4 <mpu_reset_fifo+0x1f0>)
10008528:	47a0      	blx	r4
1000852a:	2800      	cmp	r0, #0
1000852c:	d000      	beq.n	10008530 <mpu_reset_fifo+0x2c>
1000852e:	e0c2      	b.n	100086b6 <mpu_reset_fifo+0x1b2>
        return -1;
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
10008530:	4b6f      	ldr	r3, [pc, #444]	; (100086f0 <mpu_reset_fifo+0x1ec>)
10008532:	681a      	ldr	r2, [r3, #0]
10008534:	7951      	ldrb	r1, [r2, #5]
10008536:	685b      	ldr	r3, [r3, #4]
10008538:	7818      	ldrb	r0, [r3, #0]
1000853a:	466b      	mov	r3, sp
1000853c:	3307      	adds	r3, #7
1000853e:	2201      	movs	r2, #1
10008540:	4c6c      	ldr	r4, [pc, #432]	; (100086f4 <mpu_reset_fifo+0x1f0>)
10008542:	47a0      	blx	r4
10008544:	2800      	cmp	r0, #0
10008546:	d000      	beq.n	1000854a <mpu_reset_fifo+0x46>
10008548:	e0b8      	b.n	100086bc <mpu_reset_fifo+0x1b8>
        return -1;
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
1000854a:	4b69      	ldr	r3, [pc, #420]	; (100086f0 <mpu_reset_fifo+0x1ec>)
1000854c:	681a      	ldr	r2, [r3, #0]
1000854e:	7911      	ldrb	r1, [r2, #4]
10008550:	685b      	ldr	r3, [r3, #4]
10008552:	7818      	ldrb	r0, [r3, #0]
10008554:	466b      	mov	r3, sp
10008556:	3307      	adds	r3, #7
10008558:	2201      	movs	r2, #1
1000855a:	4c66      	ldr	r4, [pc, #408]	; (100086f4 <mpu_reset_fifo+0x1f0>)
1000855c:	47a0      	blx	r4
1000855e:	2800      	cmp	r0, #0
10008560:	d000      	beq.n	10008564 <mpu_reset_fifo+0x60>
10008562:	e0ae      	b.n	100086c2 <mpu_reset_fifo+0x1be>
        return -1;

    if (st.chip_cfg.dmp_on) {
10008564:	2324      	movs	r3, #36	; 0x24
10008566:	4a62      	ldr	r2, [pc, #392]	; (100086f0 <mpu_reset_fifo+0x1ec>)
10008568:	5cd3      	ldrb	r3, [r2, r3]
1000856a:	2b00      	cmp	r3, #0
1000856c:	d04f      	beq.n	1000860e <mpu_reset_fifo+0x10a>
        data = BIT_FIFO_RST | BIT_DMP_RST;
1000856e:	466b      	mov	r3, sp
10008570:	3307      	adds	r3, #7
10008572:	220c      	movs	r2, #12
10008574:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
10008576:	4a5e      	ldr	r2, [pc, #376]	; (100086f0 <mpu_reset_fifo+0x1ec>)
10008578:	6811      	ldr	r1, [r2, #0]
1000857a:	7909      	ldrb	r1, [r1, #4]
1000857c:	6852      	ldr	r2, [r2, #4]
1000857e:	7810      	ldrb	r0, [r2, #0]
10008580:	2201      	movs	r2, #1
10008582:	4c5c      	ldr	r4, [pc, #368]	; (100086f4 <mpu_reset_fifo+0x1f0>)
10008584:	47a0      	blx	r4
10008586:	2800      	cmp	r0, #0
10008588:	d000      	beq.n	1000858c <mpu_reset_fifo+0x88>
1000858a:	e09d      	b.n	100086c8 <mpu_reset_fifo+0x1c4>
            return -1;
        delay_ms(50);
1000858c:	3032      	adds	r0, #50	; 0x32
1000858e:	4b5a      	ldr	r3, [pc, #360]	; (100086f8 <mpu_reset_fifo+0x1f4>)
10008590:	4798      	blx	r3
        data = BIT_DMP_EN | BIT_FIFO_EN;
10008592:	22c0      	movs	r2, #192	; 0xc0
10008594:	466b      	mov	r3, sp
10008596:	71da      	strb	r2, [r3, #7]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
10008598:	4b55      	ldr	r3, [pc, #340]	; (100086f0 <mpu_reset_fifo+0x1ec>)
1000859a:	7a9b      	ldrb	r3, [r3, #10]
1000859c:	07db      	lsls	r3, r3, #31
1000859e:	d502      	bpl.n	100085a6 <mpu_reset_fifo+0xa2>
            data |= BIT_AUX_IF_EN;
100085a0:	3220      	adds	r2, #32
100085a2:	466b      	mov	r3, sp
100085a4:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
100085a6:	4b52      	ldr	r3, [pc, #328]	; (100086f0 <mpu_reset_fifo+0x1ec>)
100085a8:	681a      	ldr	r2, [r3, #0]
100085aa:	7911      	ldrb	r1, [r2, #4]
100085ac:	685b      	ldr	r3, [r3, #4]
100085ae:	7818      	ldrb	r0, [r3, #0]
100085b0:	466b      	mov	r3, sp
100085b2:	3307      	adds	r3, #7
100085b4:	2201      	movs	r2, #1
100085b6:	4c4f      	ldr	r4, [pc, #316]	; (100086f4 <mpu_reset_fifo+0x1f0>)
100085b8:	47a0      	blx	r4
100085ba:	2800      	cmp	r0, #0
100085bc:	d000      	beq.n	100085c0 <mpu_reset_fifo+0xbc>
100085be:	e086      	b.n	100086ce <mpu_reset_fifo+0x1ca>
            return -1;
        if (st.chip_cfg.int_enable)
100085c0:	4b4b      	ldr	r3, [pc, #300]	; (100086f0 <mpu_reset_fifo+0x1ec>)
100085c2:	7c5b      	ldrb	r3, [r3, #17]
100085c4:	2b00      	cmp	r3, #0
100085c6:	d003      	beq.n	100085d0 <mpu_reset_fifo+0xcc>
            data = BIT_DMP_INT_EN;
100085c8:	2202      	movs	r2, #2
100085ca:	466b      	mov	r3, sp
100085cc:	71da      	strb	r2, [r3, #7]
100085ce:	e002      	b.n	100085d6 <mpu_reset_fifo+0xd2>
        else
            data = 0;
100085d0:	2200      	movs	r2, #0
100085d2:	466b      	mov	r3, sp
100085d4:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
100085d6:	4b46      	ldr	r3, [pc, #280]	; (100086f0 <mpu_reset_fifo+0x1ec>)
100085d8:	681a      	ldr	r2, [r3, #0]
100085da:	7c51      	ldrb	r1, [r2, #17]
100085dc:	685b      	ldr	r3, [r3, #4]
100085de:	7818      	ldrb	r0, [r3, #0]
100085e0:	466b      	mov	r3, sp
100085e2:	3307      	adds	r3, #7
100085e4:	2201      	movs	r2, #1
100085e6:	4c43      	ldr	r4, [pc, #268]	; (100086f4 <mpu_reset_fifo+0x1f0>)
100085e8:	47a0      	blx	r4
100085ea:	2800      	cmp	r0, #0
100085ec:	d172      	bne.n	100086d4 <mpu_reset_fifo+0x1d0>
            return -1;
        data = 0;
100085ee:	466b      	mov	r3, sp
100085f0:	3307      	adds	r3, #7
100085f2:	2200      	movs	r2, #0
100085f4:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
100085f6:	4a3e      	ldr	r2, [pc, #248]	; (100086f0 <mpu_reset_fifo+0x1ec>)
100085f8:	6811      	ldr	r1, [r2, #0]
100085fa:	7949      	ldrb	r1, [r1, #5]
100085fc:	6852      	ldr	r2, [r2, #4]
100085fe:	7810      	ldrb	r0, [r2, #0]
10008600:	2201      	movs	r2, #1
10008602:	4c3c      	ldr	r4, [pc, #240]	; (100086f4 <mpu_reset_fifo+0x1f0>)
10008604:	47a0      	blx	r4
10008606:	1e43      	subs	r3, r0, #1
10008608:	4198      	sbcs	r0, r3
1000860a:	4240      	negs	r0, r0
1000860c:	e06d      	b.n	100086ea <mpu_reset_fifo+0x1e6>
            return -1;
    } else {
        data = BIT_FIFO_RST;
1000860e:	466b      	mov	r3, sp
10008610:	3307      	adds	r3, #7
10008612:	2204      	movs	r2, #4
10008614:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
10008616:	4a36      	ldr	r2, [pc, #216]	; (100086f0 <mpu_reset_fifo+0x1ec>)
10008618:	6811      	ldr	r1, [r2, #0]
1000861a:	7909      	ldrb	r1, [r1, #4]
1000861c:	6852      	ldr	r2, [r2, #4]
1000861e:	7810      	ldrb	r0, [r2, #0]
10008620:	2201      	movs	r2, #1
10008622:	4c34      	ldr	r4, [pc, #208]	; (100086f4 <mpu_reset_fifo+0x1f0>)
10008624:	47a0      	blx	r4
10008626:	2800      	cmp	r0, #0
10008628:	d157      	bne.n	100086da <mpu_reset_fifo+0x1d6>
            return -1;
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
1000862a:	4b31      	ldr	r3, [pc, #196]	; (100086f0 <mpu_reset_fifo+0x1ec>)
1000862c:	7c9b      	ldrb	r3, [r3, #18]
1000862e:	2b00      	cmp	r3, #0
10008630:	d103      	bne.n	1000863a <mpu_reset_fifo+0x136>
10008632:	4b2f      	ldr	r3, [pc, #188]	; (100086f0 <mpu_reset_fifo+0x1ec>)
10008634:	7a9b      	ldrb	r3, [r3, #10]
10008636:	07db      	lsls	r3, r3, #31
10008638:	d403      	bmi.n	10008642 <mpu_reset_fifo+0x13e>
            data = BIT_FIFO_EN;
1000863a:	2240      	movs	r2, #64	; 0x40
1000863c:	466b      	mov	r3, sp
1000863e:	71da      	strb	r2, [r3, #7]
10008640:	e002      	b.n	10008648 <mpu_reset_fifo+0x144>
        else
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
10008642:	2260      	movs	r2, #96	; 0x60
10008644:	466b      	mov	r3, sp
10008646:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
10008648:	4b29      	ldr	r3, [pc, #164]	; (100086f0 <mpu_reset_fifo+0x1ec>)
1000864a:	681a      	ldr	r2, [r3, #0]
1000864c:	7911      	ldrb	r1, [r2, #4]
1000864e:	685b      	ldr	r3, [r3, #4]
10008650:	7818      	ldrb	r0, [r3, #0]
10008652:	466b      	mov	r3, sp
10008654:	3307      	adds	r3, #7
10008656:	2201      	movs	r2, #1
10008658:	4c26      	ldr	r4, [pc, #152]	; (100086f4 <mpu_reset_fifo+0x1f0>)
1000865a:	47a0      	blx	r4
1000865c:	2800      	cmp	r0, #0
1000865e:	d13f      	bne.n	100086e0 <mpu_reset_fifo+0x1dc>
            return -1;
        delay_ms(50);
10008660:	3032      	adds	r0, #50	; 0x32
10008662:	4b25      	ldr	r3, [pc, #148]	; (100086f8 <mpu_reset_fifo+0x1f4>)
10008664:	4798      	blx	r3
        if (st.chip_cfg.int_enable)
10008666:	4b22      	ldr	r3, [pc, #136]	; (100086f0 <mpu_reset_fifo+0x1ec>)
10008668:	7c5b      	ldrb	r3, [r3, #17]
1000866a:	2b00      	cmp	r3, #0
1000866c:	d003      	beq.n	10008676 <mpu_reset_fifo+0x172>
            data = BIT_DATA_RDY_EN;
1000866e:	2201      	movs	r2, #1
10008670:	466b      	mov	r3, sp
10008672:	71da      	strb	r2, [r3, #7]
10008674:	e002      	b.n	1000867c <mpu_reset_fifo+0x178>
        else
            data = 0;
10008676:	2200      	movs	r2, #0
10008678:	466b      	mov	r3, sp
1000867a:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
1000867c:	4b1c      	ldr	r3, [pc, #112]	; (100086f0 <mpu_reset_fifo+0x1ec>)
1000867e:	681a      	ldr	r2, [r3, #0]
10008680:	7c51      	ldrb	r1, [r2, #17]
10008682:	685b      	ldr	r3, [r3, #4]
10008684:	7818      	ldrb	r0, [r3, #0]
10008686:	466b      	mov	r3, sp
10008688:	3307      	adds	r3, #7
1000868a:	2201      	movs	r2, #1
1000868c:	4c19      	ldr	r4, [pc, #100]	; (100086f4 <mpu_reset_fifo+0x1f0>)
1000868e:	47a0      	blx	r4
10008690:	2800      	cmp	r0, #0
10008692:	d128      	bne.n	100086e6 <mpu_reset_fifo+0x1e2>
            return -1;
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
10008694:	4a16      	ldr	r2, [pc, #88]	; (100086f0 <mpu_reset_fifo+0x1ec>)
10008696:	0013      	movs	r3, r2
10008698:	3310      	adds	r3, #16
1000869a:	6811      	ldr	r1, [r2, #0]
1000869c:	7949      	ldrb	r1, [r1, #5]
1000869e:	6852      	ldr	r2, [r2, #4]
100086a0:	7810      	ldrb	r0, [r2, #0]
100086a2:	2201      	movs	r2, #1
100086a4:	4c13      	ldr	r4, [pc, #76]	; (100086f4 <mpu_reset_fifo+0x1f0>)
100086a6:	47a0      	blx	r4
100086a8:	1e43      	subs	r3, r0, #1
100086aa:	4198      	sbcs	r0, r3
100086ac:	4240      	negs	r0, r0
100086ae:	e01c      	b.n	100086ea <mpu_reset_fifo+0x1e6>
int mpu_reset_fifo(void)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
100086b0:	2001      	movs	r0, #1
100086b2:	4240      	negs	r0, r0
100086b4:	e019      	b.n	100086ea <mpu_reset_fifo+0x1e6>

    data = 0;
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
        return -1;
100086b6:	2001      	movs	r0, #1
100086b8:	4240      	negs	r0, r0
100086ba:	e016      	b.n	100086ea <mpu_reset_fifo+0x1e6>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
        return -1;
100086bc:	2001      	movs	r0, #1
100086be:	4240      	negs	r0, r0
100086c0:	e013      	b.n	100086ea <mpu_reset_fifo+0x1e6>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
        return -1;
100086c2:	2001      	movs	r0, #1
100086c4:	4240      	negs	r0, r0
100086c6:	e010      	b.n	100086ea <mpu_reset_fifo+0x1e6>

    if (st.chip_cfg.dmp_on) {
        data = BIT_FIFO_RST | BIT_DMP_RST;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
            return -1;
100086c8:	2001      	movs	r0, #1
100086ca:	4240      	negs	r0, r0
100086cc:	e00d      	b.n	100086ea <mpu_reset_fifo+0x1e6>
        delay_ms(50);
        data = BIT_DMP_EN | BIT_FIFO_EN;
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
            data |= BIT_AUX_IF_EN;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
            return -1;
100086ce:	2001      	movs	r0, #1
100086d0:	4240      	negs	r0, r0
100086d2:	e00a      	b.n	100086ea <mpu_reset_fifo+0x1e6>
        if (st.chip_cfg.int_enable)
            data = BIT_DMP_INT_EN;
        else
            data = 0;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
            return -1;
100086d4:	2001      	movs	r0, #1
100086d6:	4240      	negs	r0, r0
100086d8:	e007      	b.n	100086ea <mpu_reset_fifo+0x1e6>
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
            return -1;
    } else {
        data = BIT_FIFO_RST;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
            return -1;
100086da:	2001      	movs	r0, #1
100086dc:	4240      	negs	r0, r0
100086de:	e004      	b.n	100086ea <mpu_reset_fifo+0x1e6>
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
            data = BIT_FIFO_EN;
        else
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
            return -1;
100086e0:	2001      	movs	r0, #1
100086e2:	4240      	negs	r0, r0
100086e4:	e001      	b.n	100086ea <mpu_reset_fifo+0x1e6>
        if (st.chip_cfg.int_enable)
            data = BIT_DATA_RDY_EN;
        else
            data = 0;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
            return -1;
100086e6:	2001      	movs	r0, #1
100086e8:	4240      	negs	r0, r0
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
            return -1;
    }
    return 0;
}
100086ea:	b002      	add	sp, #8
100086ec:	bd10      	pop	{r4, pc}
100086ee:	46c0      	nop			; (mov r8, r8)
100086f0:	10015360 	.word	0x10015360
100086f4:	10009ba5 	.word	0x10009ba5
100086f8:	10008129 	.word	0x10008129

100086fc <mpu_set_gyro_fsr>:
 *  @brief      Set the gyro full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_gyro_fsr(unsigned short fsr)
{
100086fc:	b510      	push	{r4, lr}
100086fe:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
10008700:	4b24      	ldr	r3, [pc, #144]	; (10008794 <mpu_set_gyro_fsr+0x98>)
10008702:	7a9b      	ldrb	r3, [r3, #10]
10008704:	2b00      	cmp	r3, #0
10008706:	d03b      	beq.n	10008780 <mpu_set_gyro_fsr+0x84>
        return -1;

    switch (fsr) {
10008708:	23fa      	movs	r3, #250	; 0xfa
1000870a:	005b      	lsls	r3, r3, #1
1000870c:	4298      	cmp	r0, r3
1000870e:	d010      	beq.n	10008732 <mpu_set_gyro_fsr+0x36>
10008710:	d802      	bhi.n	10008718 <mpu_set_gyro_fsr+0x1c>
10008712:	28fa      	cmp	r0, #250	; 0xfa
10008714:	d009      	beq.n	1000872a <mpu_set_gyro_fsr+0x2e>
10008716:	e036      	b.n	10008786 <mpu_set_gyro_fsr+0x8a>
10008718:	23fa      	movs	r3, #250	; 0xfa
1000871a:	009b      	lsls	r3, r3, #2
1000871c:	4298      	cmp	r0, r3
1000871e:	d00c      	beq.n	1000873a <mpu_set_gyro_fsr+0x3e>
10008720:	23fa      	movs	r3, #250	; 0xfa
10008722:	00db      	lsls	r3, r3, #3
10008724:	4298      	cmp	r0, r3
10008726:	d00c      	beq.n	10008742 <mpu_set_gyro_fsr+0x46>
10008728:	e02d      	b.n	10008786 <mpu_set_gyro_fsr+0x8a>
    case 250:
        data = INV_FSR_250DPS << 3;
1000872a:	2200      	movs	r2, #0
1000872c:	466b      	mov	r3, sp
1000872e:	71da      	strb	r2, [r3, #7]
        break;
10008730:	e00a      	b.n	10008748 <mpu_set_gyro_fsr+0x4c>
    case 500:
        data = INV_FSR_500DPS << 3;
10008732:	2208      	movs	r2, #8
10008734:	466b      	mov	r3, sp
10008736:	71da      	strb	r2, [r3, #7]
        break;
10008738:	e006      	b.n	10008748 <mpu_set_gyro_fsr+0x4c>
    case 1000:
        data = INV_FSR_1000DPS << 3;
1000873a:	2210      	movs	r2, #16
1000873c:	466b      	mov	r3, sp
1000873e:	71da      	strb	r2, [r3, #7]
        break;
10008740:	e002      	b.n	10008748 <mpu_set_gyro_fsr+0x4c>
    case 2000:
        data = INV_FSR_2000DPS << 3;
10008742:	2218      	movs	r2, #24
10008744:	466b      	mov	r3, sp
10008746:	71da      	strb	r2, [r3, #7]
        break;
    default:
        return -1;
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
10008748:	466b      	mov	r3, sp
1000874a:	3307      	adds	r3, #7
1000874c:	781b      	ldrb	r3, [r3, #0]
1000874e:	4a11      	ldr	r2, [pc, #68]	; (10008794 <mpu_set_gyro_fsr+0x98>)
10008750:	7a12      	ldrb	r2, [r2, #8]
10008752:	08db      	lsrs	r3, r3, #3
        return 0;
10008754:	2000      	movs	r0, #0
        break;
    default:
        return -1;
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
10008756:	429a      	cmp	r2, r3
10008758:	d01a      	beq.n	10008790 <mpu_set_gyro_fsr+0x94>
        return 0;
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
1000875a:	4b0e      	ldr	r3, [pc, #56]	; (10008794 <mpu_set_gyro_fsr+0x98>)
1000875c:	681a      	ldr	r2, [r3, #0]
1000875e:	7991      	ldrb	r1, [r2, #6]
10008760:	685b      	ldr	r3, [r3, #4]
10008762:	7818      	ldrb	r0, [r3, #0]
10008764:	466b      	mov	r3, sp
10008766:	3307      	adds	r3, #7
10008768:	2201      	movs	r2, #1
1000876a:	4c0b      	ldr	r4, [pc, #44]	; (10008798 <mpu_set_gyro_fsr+0x9c>)
1000876c:	47a0      	blx	r4
1000876e:	2800      	cmp	r0, #0
10008770:	d10c      	bne.n	1000878c <mpu_set_gyro_fsr+0x90>
        return -1;
    st.chip_cfg.gyro_fsr = data >> 3;
10008772:	466b      	mov	r3, sp
10008774:	3307      	adds	r3, #7
10008776:	781b      	ldrb	r3, [r3, #0]
10008778:	08db      	lsrs	r3, r3, #3
1000877a:	4a06      	ldr	r2, [pc, #24]	; (10008794 <mpu_set_gyro_fsr+0x98>)
1000877c:	7213      	strb	r3, [r2, #8]
    return 0;
1000877e:	e007      	b.n	10008790 <mpu_set_gyro_fsr+0x94>
int mpu_set_gyro_fsr(unsigned short fsr)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
10008780:	2001      	movs	r0, #1
10008782:	4240      	negs	r0, r0
10008784:	e004      	b.n	10008790 <mpu_set_gyro_fsr+0x94>
        break;
    case 2000:
        data = INV_FSR_2000DPS << 3;
        break;
    default:
        return -1;
10008786:	2001      	movs	r0, #1
10008788:	4240      	negs	r0, r0
1000878a:	e001      	b.n	10008790 <mpu_set_gyro_fsr+0x94>
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
        return 0;
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
        return -1;
1000878c:	2001      	movs	r0, #1
1000878e:	4240      	negs	r0, r0
    st.chip_cfg.gyro_fsr = data >> 3;
    return 0;
}
10008790:	b002      	add	sp, #8
10008792:	bd10      	pop	{r4, pc}
10008794:	10015360 	.word	0x10015360
10008798:	10009ba5 	.word	0x10009ba5

1000879c <mpu_set_accel_fsr>:
 *  @brief      Set the accel full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_accel_fsr(unsigned char fsr)
{
1000879c:	b510      	push	{r4, lr}
1000879e:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
100087a0:	4b21      	ldr	r3, [pc, #132]	; (10008828 <mpu_set_accel_fsr+0x8c>)
100087a2:	7a9b      	ldrb	r3, [r3, #10]
100087a4:	2b00      	cmp	r3, #0
100087a6:	d035      	beq.n	10008814 <mpu_set_accel_fsr+0x78>
        return -1;

    switch (fsr) {
100087a8:	2804      	cmp	r0, #4
100087aa:	d00c      	beq.n	100087c6 <mpu_set_accel_fsr+0x2a>
100087ac:	d802      	bhi.n	100087b4 <mpu_set_accel_fsr+0x18>
100087ae:	2802      	cmp	r0, #2
100087b0:	d005      	beq.n	100087be <mpu_set_accel_fsr+0x22>
100087b2:	e032      	b.n	1000881a <mpu_set_accel_fsr+0x7e>
100087b4:	2808      	cmp	r0, #8
100087b6:	d00a      	beq.n	100087ce <mpu_set_accel_fsr+0x32>
100087b8:	2810      	cmp	r0, #16
100087ba:	d00c      	beq.n	100087d6 <mpu_set_accel_fsr+0x3a>
100087bc:	e02d      	b.n	1000881a <mpu_set_accel_fsr+0x7e>
    case 2:
        data = INV_FSR_2G << 3;
100087be:	2200      	movs	r2, #0
100087c0:	466b      	mov	r3, sp
100087c2:	71da      	strb	r2, [r3, #7]
        break;
100087c4:	e00a      	b.n	100087dc <mpu_set_accel_fsr+0x40>
    case 4:
        data = INV_FSR_4G << 3;
100087c6:	2208      	movs	r2, #8
100087c8:	466b      	mov	r3, sp
100087ca:	71da      	strb	r2, [r3, #7]
        break;
100087cc:	e006      	b.n	100087dc <mpu_set_accel_fsr+0x40>
    case 8:
        data = INV_FSR_8G << 3;
100087ce:	2210      	movs	r2, #16
100087d0:	466b      	mov	r3, sp
100087d2:	71da      	strb	r2, [r3, #7]
        break;
100087d4:	e002      	b.n	100087dc <mpu_set_accel_fsr+0x40>
    case 16:
        data = INV_FSR_16G << 3;
100087d6:	2218      	movs	r2, #24
100087d8:	466b      	mov	r3, sp
100087da:	71da      	strb	r2, [r3, #7]
        break;
    default:
        return -1;
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
100087dc:	466b      	mov	r3, sp
100087de:	3307      	adds	r3, #7
100087e0:	781b      	ldrb	r3, [r3, #0]
100087e2:	4a11      	ldr	r2, [pc, #68]	; (10008828 <mpu_set_accel_fsr+0x8c>)
100087e4:	7a52      	ldrb	r2, [r2, #9]
100087e6:	08db      	lsrs	r3, r3, #3
        return 0;
100087e8:	2000      	movs	r0, #0
        break;
    default:
        return -1;
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
100087ea:	429a      	cmp	r2, r3
100087ec:	d01a      	beq.n	10008824 <mpu_set_accel_fsr+0x88>
        return 0;
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
100087ee:	4b0e      	ldr	r3, [pc, #56]	; (10008828 <mpu_set_accel_fsr+0x8c>)
100087f0:	681a      	ldr	r2, [r3, #0]
100087f2:	79d1      	ldrb	r1, [r2, #7]
100087f4:	685b      	ldr	r3, [r3, #4]
100087f6:	7818      	ldrb	r0, [r3, #0]
100087f8:	466b      	mov	r3, sp
100087fa:	3307      	adds	r3, #7
100087fc:	2201      	movs	r2, #1
100087fe:	4c0b      	ldr	r4, [pc, #44]	; (1000882c <mpu_set_accel_fsr+0x90>)
10008800:	47a0      	blx	r4
10008802:	2800      	cmp	r0, #0
10008804:	d10c      	bne.n	10008820 <mpu_set_accel_fsr+0x84>
        return -1;
    st.chip_cfg.accel_fsr = data >> 3;
10008806:	466b      	mov	r3, sp
10008808:	3307      	adds	r3, #7
1000880a:	781b      	ldrb	r3, [r3, #0]
1000880c:	08db      	lsrs	r3, r3, #3
1000880e:	4a06      	ldr	r2, [pc, #24]	; (10008828 <mpu_set_accel_fsr+0x8c>)
10008810:	7253      	strb	r3, [r2, #9]
    return 0;
10008812:	e007      	b.n	10008824 <mpu_set_accel_fsr+0x88>
int mpu_set_accel_fsr(unsigned char fsr)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
10008814:	2001      	movs	r0, #1
10008816:	4240      	negs	r0, r0
10008818:	e004      	b.n	10008824 <mpu_set_accel_fsr+0x88>
        break;
    case 16:
        data = INV_FSR_16G << 3;
        break;
    default:
        return -1;
1000881a:	2001      	movs	r0, #1
1000881c:	4240      	negs	r0, r0
1000881e:	e001      	b.n	10008824 <mpu_set_accel_fsr+0x88>
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
        return 0;
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
        return -1;
10008820:	2001      	movs	r0, #1
10008822:	4240      	negs	r0, r0
    st.chip_cfg.accel_fsr = data >> 3;
    return 0;
}
10008824:	b002      	add	sp, #8
10008826:	bd10      	pop	{r4, pc}
10008828:	10015360 	.word	0x10015360
1000882c:	10009ba5 	.word	0x10009ba5

10008830 <mpu_set_lpf>:
 *  The following LPF settings are supported: 188, 98, 42, 20, 10, 5.
 *  @param[in]  lpf Desired LPF setting.
 *  @return     0 if successful.
 */
int mpu_set_lpf(unsigned short lpf)
{
10008830:	b510      	push	{r4, lr}
10008832:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
10008834:	4b2b      	ldr	r3, [pc, #172]	; (100088e4 <mpu_set_lpf+0xb4>)
10008836:	7a9b      	ldrb	r3, [r3, #10]
10008838:	2b00      	cmp	r3, #0
1000883a:	d049      	beq.n	100088d0 <mpu_set_lpf+0xa0>
        return -1;

    if (lpf >= 188)
1000883c:	28bb      	cmp	r0, #187	; 0xbb
1000883e:	d903      	bls.n	10008848 <mpu_set_lpf+0x18>
        data = INV_FILTER_188HZ;
10008840:	2201      	movs	r2, #1
10008842:	466b      	mov	r3, sp
10008844:	71da      	strb	r2, [r3, #7]
10008846:	e01a      	b.n	1000887e <mpu_set_lpf+0x4e>
    else if (lpf >= 98)
10008848:	2861      	cmp	r0, #97	; 0x61
1000884a:	d903      	bls.n	10008854 <mpu_set_lpf+0x24>
        data = INV_FILTER_98HZ;
1000884c:	2202      	movs	r2, #2
1000884e:	466b      	mov	r3, sp
10008850:	71da      	strb	r2, [r3, #7]
10008852:	e014      	b.n	1000887e <mpu_set_lpf+0x4e>
    else if (lpf >= 42)
10008854:	2829      	cmp	r0, #41	; 0x29
10008856:	d903      	bls.n	10008860 <mpu_set_lpf+0x30>
        data = INV_FILTER_42HZ;
10008858:	2203      	movs	r2, #3
1000885a:	466b      	mov	r3, sp
1000885c:	71da      	strb	r2, [r3, #7]
1000885e:	e00e      	b.n	1000887e <mpu_set_lpf+0x4e>
    else if (lpf >= 20)
10008860:	2813      	cmp	r0, #19
10008862:	d903      	bls.n	1000886c <mpu_set_lpf+0x3c>
        data = INV_FILTER_20HZ;
10008864:	2204      	movs	r2, #4
10008866:	466b      	mov	r3, sp
10008868:	71da      	strb	r2, [r3, #7]
1000886a:	e008      	b.n	1000887e <mpu_set_lpf+0x4e>
    else if (lpf >= 10)
1000886c:	2809      	cmp	r0, #9
1000886e:	d903      	bls.n	10008878 <mpu_set_lpf+0x48>
        data = INV_FILTER_10HZ;
10008870:	2205      	movs	r2, #5
10008872:	466b      	mov	r3, sp
10008874:	71da      	strb	r2, [r3, #7]
10008876:	e002      	b.n	1000887e <mpu_set_lpf+0x4e>
    else
        data = INV_FILTER_5HZ;
10008878:	2206      	movs	r2, #6
1000887a:	466b      	mov	r3, sp
1000887c:	71da      	strb	r2, [r3, #7]

    if (st.chip_cfg.lpf == data)
1000887e:	4b19      	ldr	r3, [pc, #100]	; (100088e4 <mpu_set_lpf+0xb4>)
10008880:	7ada      	ldrb	r2, [r3, #11]
10008882:	466b      	mov	r3, sp
10008884:	3307      	adds	r3, #7
10008886:	781b      	ldrb	r3, [r3, #0]
        return 0;
10008888:	2000      	movs	r0, #0
    else if (lpf >= 10)
        data = INV_FILTER_10HZ;
    else
        data = INV_FILTER_5HZ;

    if (st.chip_cfg.lpf == data)
1000888a:	429a      	cmp	r2, r3
1000888c:	d028      	beq.n	100088e0 <mpu_set_lpf+0xb0>
        return 0;
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
1000888e:	4b15      	ldr	r3, [pc, #84]	; (100088e4 <mpu_set_lpf+0xb4>)
10008890:	681a      	ldr	r2, [r3, #0]
10008892:	7891      	ldrb	r1, [r2, #2]
10008894:	685b      	ldr	r3, [r3, #4]
10008896:	7818      	ldrb	r0, [r3, #0]
10008898:	466b      	mov	r3, sp
1000889a:	3307      	adds	r3, #7
1000889c:	2201      	movs	r2, #1
1000889e:	4c12      	ldr	r4, [pc, #72]	; (100088e8 <mpu_set_lpf+0xb8>)
100088a0:	47a0      	blx	r4
100088a2:	2800      	cmp	r0, #0
100088a4:	d117      	bne.n	100088d6 <mpu_set_lpf+0xa6>
        return -1;
#ifdef MPU6500
    data = BIT_FIFO_SIZE_1024 | data;
100088a6:	466b      	mov	r3, sp
100088a8:	3307      	adds	r3, #7
100088aa:	7819      	ldrb	r1, [r3, #0]
100088ac:	2240      	movs	r2, #64	; 0x40
100088ae:	430a      	orrs	r2, r1
100088b0:	701a      	strb	r2, [r3, #0]

    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, &data))
100088b2:	4a0c      	ldr	r2, [pc, #48]	; (100088e4 <mpu_set_lpf+0xb4>)
100088b4:	6811      	ldr	r1, [r2, #0]
100088b6:	7a09      	ldrb	r1, [r1, #8]
100088b8:	6852      	ldr	r2, [r2, #4]
100088ba:	7810      	ldrb	r0, [r2, #0]
100088bc:	2201      	movs	r2, #1
100088be:	4c0a      	ldr	r4, [pc, #40]	; (100088e8 <mpu_set_lpf+0xb8>)
100088c0:	47a0      	blx	r4
100088c2:	2800      	cmp	r0, #0
100088c4:	d10a      	bne.n	100088dc <mpu_set_lpf+0xac>
            return -1;
#endif
    st.chip_cfg.lpf = data;
100088c6:	466b      	mov	r3, sp
100088c8:	79da      	ldrb	r2, [r3, #7]
100088ca:	4b06      	ldr	r3, [pc, #24]	; (100088e4 <mpu_set_lpf+0xb4>)
100088cc:	72da      	strb	r2, [r3, #11]
    return 0;
100088ce:	e007      	b.n	100088e0 <mpu_set_lpf+0xb0>
int mpu_set_lpf(unsigned short lpf)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
100088d0:	2001      	movs	r0, #1
100088d2:	4240      	negs	r0, r0
100088d4:	e004      	b.n	100088e0 <mpu_set_lpf+0xb0>
        data = INV_FILTER_5HZ;

    if (st.chip_cfg.lpf == data)
        return 0;
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
        return -1;
100088d6:	2001      	movs	r0, #1
100088d8:	4240      	negs	r0, r0
100088da:	e001      	b.n	100088e0 <mpu_set_lpf+0xb0>
#ifdef MPU6500
    data = BIT_FIFO_SIZE_1024 | data;

    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, &data))
            return -1;
100088dc:	2001      	movs	r0, #1
100088de:	4240      	negs	r0, r0
#endif
    st.chip_cfg.lpf = data;
    return 0;
}
100088e0:	b002      	add	sp, #8
100088e2:	bd10      	pop	{r4, pc}
100088e4:	10015360 	.word	0x10015360
100088e8:	10009ba5 	.word	0x10009ba5

100088ec <mpu_set_compass_sample_rate>:
 *  mpu_get_compass_sample_rate to check the actual setting.
 *  @param[in]  rate    Desired compass sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_compass_sample_rate(unsigned short rate)
{
100088ec:	b530      	push	{r4, r5, lr}
100088ee:	b083      	sub	sp, #12
100088f0:	1e01      	subs	r1, r0, #0
#ifdef AK89xx_SECONDARY
    unsigned char div;
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
100088f2:	d020      	beq.n	10008936 <mpu_set_compass_sample_rate+0x4a>
100088f4:	4b17      	ldr	r3, [pc, #92]	; (10008954 <mpu_set_compass_sample_rate+0x68>)
100088f6:	89d8      	ldrh	r0, [r3, #14]
100088f8:	4281      	cmp	r1, r0
100088fa:	d81f      	bhi.n	1000893c <mpu_set_compass_sample_rate+0x50>
100088fc:	2964      	cmp	r1, #100	; 0x64
100088fe:	d820      	bhi.n	10008942 <mpu_set_compass_sample_rate+0x56>
        return -1;

    div = st.chip_cfg.sample_rate / rate - 1;
10008900:	466b      	mov	r3, sp
10008902:	1ddc      	adds	r4, r3, #7
10008904:	4b14      	ldr	r3, [pc, #80]	; (10008958 <mpu_set_compass_sample_rate+0x6c>)
10008906:	4798      	blx	r3
10008908:	3801      	subs	r0, #1
1000890a:	7020      	strb	r0, [r4, #0]
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
1000890c:	4b11      	ldr	r3, [pc, #68]	; (10008954 <mpu_set_compass_sample_rate+0x68>)
1000890e:	2224      	movs	r2, #36	; 0x24
10008910:	6819      	ldr	r1, [r3, #0]
10008912:	5c89      	ldrb	r1, [r1, r2]
10008914:	685b      	ldr	r3, [r3, #4]
10008916:	7818      	ldrb	r0, [r3, #0]
10008918:	0023      	movs	r3, r4
1000891a:	3a23      	subs	r2, #35	; 0x23
1000891c:	4c0f      	ldr	r4, [pc, #60]	; (1000895c <mpu_set_compass_sample_rate+0x70>)
1000891e:	47a0      	blx	r4
10008920:	1e04      	subs	r4, r0, #0
10008922:	d111      	bne.n	10008948 <mpu_set_compass_sample_rate+0x5c>
        return -1;
    st.chip_cfg.compass_sample_rate = st.chip_cfg.sample_rate / (div + 1);
10008924:	4d0b      	ldr	r5, [pc, #44]	; (10008954 <mpu_set_compass_sample_rate+0x68>)
10008926:	89e8      	ldrh	r0, [r5, #14]
10008928:	466b      	mov	r3, sp
1000892a:	79d9      	ldrb	r1, [r3, #7]
1000892c:	3101      	adds	r1, #1
1000892e:	4b0c      	ldr	r3, [pc, #48]	; (10008960 <mpu_set_compass_sample_rate+0x74>)
10008930:	4798      	blx	r3
10008932:	8528      	strh	r0, [r5, #40]	; 0x28
    return 0;
10008934:	e00a      	b.n	1000894c <mpu_set_compass_sample_rate+0x60>
int mpu_set_compass_sample_rate(unsigned short rate)
{
#ifdef AK89xx_SECONDARY
    unsigned char div;
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
        return -1;
10008936:	2401      	movs	r4, #1
10008938:	4264      	negs	r4, r4
1000893a:	e007      	b.n	1000894c <mpu_set_compass_sample_rate+0x60>
1000893c:	2401      	movs	r4, #1
1000893e:	4264      	negs	r4, r4
10008940:	e004      	b.n	1000894c <mpu_set_compass_sample_rate+0x60>
10008942:	2401      	movs	r4, #1
10008944:	4264      	negs	r4, r4
10008946:	e001      	b.n	1000894c <mpu_set_compass_sample_rate+0x60>

    div = st.chip_cfg.sample_rate / rate - 1;
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
        return -1;
10008948:	2401      	movs	r4, #1
1000894a:	4264      	negs	r4, r4
    st.chip_cfg.compass_sample_rate = st.chip_cfg.sample_rate / (div + 1);
    return 0;
#else
    return -1;
#endif
}
1000894c:	0020      	movs	r0, r4
1000894e:	b003      	add	sp, #12
10008950:	bd30      	pop	{r4, r5, pc}
10008952:	46c0      	nop			; (mov r8, r8)
10008954:	10015360 	.word	0x10015360
10008958:	10011215 	.word	0x10011215
1000895c:	10009ba5 	.word	0x10009ba5
10008960:	10011329 	.word	0x10011329

10008964 <mpu_configure_fifo>:
 *  \n INV_XYZ_ACCEL
 *  @param[in]  sensors Mask of sensors to push to FIFO.
 *  @return     0 if successful.
 */
int mpu_configure_fifo(unsigned char sensors)
{
10008964:	b570      	push	{r4, r5, r6, lr}
    int result = 0;

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;

    if (st.chip_cfg.dmp_on)
10008966:	2324      	movs	r3, #36	; 0x24
10008968:	4a16      	ldr	r2, [pc, #88]	; (100089c4 <mpu_configure_fifo+0x60>)
1000896a:	5cd3      	ldrb	r3, [r2, r3]
        return 0;
1000896c:	2400      	movs	r4, #0
    int result = 0;

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;

    if (st.chip_cfg.dmp_on)
1000896e:	2b00      	cmp	r3, #0
10008970:	d126      	bne.n	100089c0 <mpu_configure_fifo+0x5c>
        return 0;
    else {
        if (!(st.chip_cfg.sensors))
10008972:	7a94      	ldrb	r4, [r2, #10]
10008974:	2c00      	cmp	r4, #0
10008976:	d015      	beq.n	100089a4 <mpu_configure_fifo+0x40>
{
    unsigned char prev;
    int result = 0;

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;
10008978:	2301      	movs	r3, #1
1000897a:	4398      	bics	r0, r3
    if (st.chip_cfg.dmp_on)
        return 0;
    else {
        if (!(st.chip_cfg.sensors))
            return -1;
        prev = st.chip_cfg.fifo_enable;
1000897c:	7c15      	ldrb	r5, [r2, #16]
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
1000897e:	4004      	ands	r4, r0
10008980:	7414      	strb	r4, [r2, #16]
        if (st.chip_cfg.fifo_enable != sensors)
10008982:	1b04      	subs	r4, r0, r4
10008984:	1e63      	subs	r3, r4, #1
10008986:	419c      	sbcs	r4, r3
10008988:	4264      	negs	r4, r4
             * asleep.
             */
            result = -1;
        else
            result = 0;
        if (sensors || st.chip_cfg.lp_accel_mode)
1000898a:	2800      	cmp	r0, #0
1000898c:	d10d      	bne.n	100089aa <mpu_configure_fifo+0x46>
1000898e:	7d13      	ldrb	r3, [r2, #20]
10008990:	2b00      	cmp	r3, #0
10008992:	d112      	bne.n	100089ba <mpu_configure_fifo+0x56>
            set_int_enable(1);
        else
            set_int_enable(0);
10008994:	4b0c      	ldr	r3, [pc, #48]	; (100089c8 <mpu_configure_fifo+0x64>)
10008996:	4798      	blx	r3
10008998:	e012      	b.n	100089c0 <mpu_configure_fifo+0x5c>
        if (sensors) {
            if (mpu_reset_fifo()) {
                st.chip_cfg.fifo_enable = prev;
1000899a:	4b0a      	ldr	r3, [pc, #40]	; (100089c4 <mpu_configure_fifo+0x60>)
1000899c:	741d      	strb	r5, [r3, #16]
                return -1;
1000899e:	2401      	movs	r4, #1
100089a0:	4264      	negs	r4, r4
100089a2:	e00d      	b.n	100089c0 <mpu_configure_fifo+0x5c>

    if (st.chip_cfg.dmp_on)
        return 0;
    else {
        if (!(st.chip_cfg.sensors))
            return -1;
100089a4:	2401      	movs	r4, #1
100089a6:	4264      	negs	r4, r4
100089a8:	e00a      	b.n	100089c0 <mpu_configure_fifo+0x5c>
             */
            result = -1;
        else
            result = 0;
        if (sensors || st.chip_cfg.lp_accel_mode)
            set_int_enable(1);
100089aa:	2001      	movs	r0, #1
100089ac:	4b06      	ldr	r3, [pc, #24]	; (100089c8 <mpu_configure_fifo+0x64>)
100089ae:	4798      	blx	r3
        else
            set_int_enable(0);
        if (sensors) {
            if (mpu_reset_fifo()) {
100089b0:	4b06      	ldr	r3, [pc, #24]	; (100089cc <mpu_configure_fifo+0x68>)
100089b2:	4798      	blx	r3
100089b4:	2800      	cmp	r0, #0
100089b6:	d003      	beq.n	100089c0 <mpu_configure_fifo+0x5c>
100089b8:	e7ef      	b.n	1000899a <mpu_configure_fifo+0x36>
             */
            result = -1;
        else
            result = 0;
        if (sensors || st.chip_cfg.lp_accel_mode)
            set_int_enable(1);
100089ba:	2001      	movs	r0, #1
100089bc:	4b02      	ldr	r3, [pc, #8]	; (100089c8 <mpu_configure_fifo+0x64>)
100089be:	4798      	blx	r3
            }
        }
    }

    return result;
}
100089c0:	0020      	movs	r0, r4
100089c2:	bd70      	pop	{r4, r5, r6, pc}
100089c4:	10015360 	.word	0x10015360
100089c8:	10008461 	.word	0x10008461
100089cc:	10008505 	.word	0x10008505

100089d0 <mpu_set_bypass>:
 *  @brief      Set device to bypass mode.
 *  @param[in]  bypass_on   1 to enable bypass mode.
 *  @return     0 if successful.
 */
int mpu_set_bypass(unsigned char bypass_on)
{
100089d0:	b530      	push	{r4, r5, lr}
100089d2:	b083      	sub	sp, #12
100089d4:	0004      	movs	r4, r0
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
100089d6:	4b59      	ldr	r3, [pc, #356]	; (10008b3c <mpu_set_bypass+0x16c>)
100089d8:	7c9b      	ldrb	r3, [r3, #18]
100089da:	4283      	cmp	r3, r0
100089dc:	d100      	bne.n	100089e0 <mpu_set_bypass+0x10>
100089de:	e097      	b.n	10008b10 <mpu_set_bypass+0x140>
        return 0;

    if (bypass_on) {
100089e0:	2800      	cmp	r0, #0
100089e2:	d042      	beq.n	10008a6a <mpu_set_bypass+0x9a>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
100089e4:	4b55      	ldr	r3, [pc, #340]	; (10008b3c <mpu_set_bypass+0x16c>)
100089e6:	681a      	ldr	r2, [r3, #0]
100089e8:	7911      	ldrb	r1, [r2, #4]
100089ea:	685b      	ldr	r3, [r3, #4]
100089ec:	7818      	ldrb	r0, [r3, #0]
100089ee:	466b      	mov	r3, sp
100089f0:	3307      	adds	r3, #7
100089f2:	2201      	movs	r2, #1
100089f4:	4d52      	ldr	r5, [pc, #328]	; (10008b40 <mpu_set_bypass+0x170>)
100089f6:	47a8      	blx	r5
100089f8:	2800      	cmp	r0, #0
100089fa:	d000      	beq.n	100089fe <mpu_set_bypass+0x2e>
100089fc:	e08a      	b.n	10008b14 <mpu_set_bypass+0x144>
            return -1;
        tmp &= ~BIT_AUX_IF_EN;
100089fe:	466b      	mov	r3, sp
10008a00:	3307      	adds	r3, #7
10008a02:	781a      	ldrb	r2, [r3, #0]
10008a04:	2120      	movs	r1, #32
10008a06:	438a      	bics	r2, r1
10008a08:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008a0a:	4a4c      	ldr	r2, [pc, #304]	; (10008b3c <mpu_set_bypass+0x16c>)
10008a0c:	6811      	ldr	r1, [r2, #0]
10008a0e:	7909      	ldrb	r1, [r1, #4]
10008a10:	6852      	ldr	r2, [r2, #4]
10008a12:	7810      	ldrb	r0, [r2, #0]
10008a14:	2201      	movs	r2, #1
10008a16:	4d4b      	ldr	r5, [pc, #300]	; (10008b44 <mpu_set_bypass+0x174>)
10008a18:	47a8      	blx	r5
10008a1a:	2800      	cmp	r0, #0
10008a1c:	d17d      	bne.n	10008b1a <mpu_set_bypass+0x14a>
            return -1;
        delay_ms(3);
10008a1e:	3003      	adds	r0, #3
10008a20:	4b49      	ldr	r3, [pc, #292]	; (10008b48 <mpu_set_bypass+0x178>)
10008a22:	4798      	blx	r3
        tmp = BIT_BYPASS_EN;
10008a24:	2202      	movs	r2, #2
10008a26:	466b      	mov	r3, sp
10008a28:	71da      	strb	r2, [r3, #7]
        if (st.chip_cfg.active_low_int)
10008a2a:	2322      	movs	r3, #34	; 0x22
10008a2c:	4a43      	ldr	r2, [pc, #268]	; (10008b3c <mpu_set_bypass+0x16c>)
10008a2e:	5cd3      	ldrb	r3, [r2, r3]
10008a30:	2b00      	cmp	r3, #0
10008a32:	d002      	beq.n	10008a3a <mpu_set_bypass+0x6a>
            tmp |= BIT_ACTL;
10008a34:	2282      	movs	r2, #130	; 0x82
10008a36:	466b      	mov	r3, sp
10008a38:	71da      	strb	r2, [r3, #7]
        if (st.chip_cfg.latched_int)
10008a3a:	2323      	movs	r3, #35	; 0x23
10008a3c:	4a3f      	ldr	r2, [pc, #252]	; (10008b3c <mpu_set_bypass+0x16c>)
10008a3e:	5cd3      	ldrb	r3, [r2, r3]
10008a40:	2b00      	cmp	r3, #0
10008a42:	d005      	beq.n	10008a50 <mpu_set_bypass+0x80>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
10008a44:	466b      	mov	r3, sp
10008a46:	1dda      	adds	r2, r3, #7
10008a48:	79d9      	ldrb	r1, [r3, #7]
10008a4a:	2330      	movs	r3, #48	; 0x30
10008a4c:	430b      	orrs	r3, r1
10008a4e:	7013      	strb	r3, [r2, #0]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
10008a50:	4b3a      	ldr	r3, [pc, #232]	; (10008b3c <mpu_set_bypass+0x16c>)
10008a52:	681a      	ldr	r2, [r3, #0]
10008a54:	7dd1      	ldrb	r1, [r2, #23]
10008a56:	685b      	ldr	r3, [r3, #4]
10008a58:	7818      	ldrb	r0, [r3, #0]
10008a5a:	466b      	mov	r3, sp
10008a5c:	3307      	adds	r3, #7
10008a5e:	2201      	movs	r2, #1
10008a60:	4d38      	ldr	r5, [pc, #224]	; (10008b44 <mpu_set_bypass+0x174>)
10008a62:	47a8      	blx	r5
10008a64:	2800      	cmp	r0, #0
10008a66:	d04f      	beq.n	10008b08 <mpu_set_bypass+0x138>
10008a68:	e05a      	b.n	10008b20 <mpu_set_bypass+0x150>
            return -1;
    } else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008a6a:	4b34      	ldr	r3, [pc, #208]	; (10008b3c <mpu_set_bypass+0x16c>)
10008a6c:	681a      	ldr	r2, [r3, #0]
10008a6e:	7911      	ldrb	r1, [r2, #4]
10008a70:	685b      	ldr	r3, [r3, #4]
10008a72:	7818      	ldrb	r0, [r3, #0]
10008a74:	466b      	mov	r3, sp
10008a76:	3307      	adds	r3, #7
10008a78:	2201      	movs	r2, #1
10008a7a:	4d31      	ldr	r5, [pc, #196]	; (10008b40 <mpu_set_bypass+0x170>)
10008a7c:	47a8      	blx	r5
10008a7e:	2800      	cmp	r0, #0
10008a80:	d151      	bne.n	10008b26 <mpu_set_bypass+0x156>
            return -1;
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
10008a82:	4b2e      	ldr	r3, [pc, #184]	; (10008b3c <mpu_set_bypass+0x16c>)
10008a84:	7a9b      	ldrb	r3, [r3, #10]
10008a86:	07db      	lsls	r3, r3, #31
10008a88:	d506      	bpl.n	10008a98 <mpu_set_bypass+0xc8>
            tmp |= BIT_AUX_IF_EN;
10008a8a:	466b      	mov	r3, sp
10008a8c:	1dda      	adds	r2, r3, #7
10008a8e:	79d9      	ldrb	r1, [r3, #7]
10008a90:	2320      	movs	r3, #32
10008a92:	430b      	orrs	r3, r1
10008a94:	7013      	strb	r3, [r2, #0]
10008a96:	e005      	b.n	10008aa4 <mpu_set_bypass+0xd4>
        else
            tmp &= ~BIT_AUX_IF_EN;
10008a98:	466b      	mov	r3, sp
10008a9a:	1dda      	adds	r2, r3, #7
10008a9c:	79db      	ldrb	r3, [r3, #7]
10008a9e:	2120      	movs	r1, #32
10008aa0:	438b      	bics	r3, r1
10008aa2:	7013      	strb	r3, [r2, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008aa4:	4b25      	ldr	r3, [pc, #148]	; (10008b3c <mpu_set_bypass+0x16c>)
10008aa6:	681a      	ldr	r2, [r3, #0]
10008aa8:	7911      	ldrb	r1, [r2, #4]
10008aaa:	685b      	ldr	r3, [r3, #4]
10008aac:	7818      	ldrb	r0, [r3, #0]
10008aae:	466b      	mov	r3, sp
10008ab0:	3307      	adds	r3, #7
10008ab2:	2201      	movs	r2, #1
10008ab4:	4d23      	ldr	r5, [pc, #140]	; (10008b44 <mpu_set_bypass+0x174>)
10008ab6:	47a8      	blx	r5
10008ab8:	2800      	cmp	r0, #0
10008aba:	d137      	bne.n	10008b2c <mpu_set_bypass+0x15c>
            return -1;
        delay_ms(3);
10008abc:	3003      	adds	r0, #3
10008abe:	4b22      	ldr	r3, [pc, #136]	; (10008b48 <mpu_set_bypass+0x178>)
10008ac0:	4798      	blx	r3
        if (st.chip_cfg.active_low_int)
10008ac2:	2322      	movs	r3, #34	; 0x22
10008ac4:	4a1d      	ldr	r2, [pc, #116]	; (10008b3c <mpu_set_bypass+0x16c>)
10008ac6:	5cd3      	ldrb	r3, [r2, r3]
10008ac8:	2b00      	cmp	r3, #0
10008aca:	d003      	beq.n	10008ad4 <mpu_set_bypass+0x104>
            tmp = BIT_ACTL;
10008acc:	2280      	movs	r2, #128	; 0x80
10008ace:	466b      	mov	r3, sp
10008ad0:	71da      	strb	r2, [r3, #7]
10008ad2:	e002      	b.n	10008ada <mpu_set_bypass+0x10a>
        else
            tmp = 0;
10008ad4:	2200      	movs	r2, #0
10008ad6:	466b      	mov	r3, sp
10008ad8:	71da      	strb	r2, [r3, #7]
        if (st.chip_cfg.latched_int)
10008ada:	2323      	movs	r3, #35	; 0x23
10008adc:	4a17      	ldr	r2, [pc, #92]	; (10008b3c <mpu_set_bypass+0x16c>)
10008ade:	5cd3      	ldrb	r3, [r2, r3]
10008ae0:	2b00      	cmp	r3, #0
10008ae2:	d005      	beq.n	10008af0 <mpu_set_bypass+0x120>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
10008ae4:	466b      	mov	r3, sp
10008ae6:	1dda      	adds	r2, r3, #7
10008ae8:	79d9      	ldrb	r1, [r3, #7]
10008aea:	2330      	movs	r3, #48	; 0x30
10008aec:	430b      	orrs	r3, r1
10008aee:	7013      	strb	r3, [r2, #0]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
10008af0:	4b12      	ldr	r3, [pc, #72]	; (10008b3c <mpu_set_bypass+0x16c>)
10008af2:	681a      	ldr	r2, [r3, #0]
10008af4:	7dd1      	ldrb	r1, [r2, #23]
10008af6:	685b      	ldr	r3, [r3, #4]
10008af8:	7818      	ldrb	r0, [r3, #0]
10008afa:	466b      	mov	r3, sp
10008afc:	3307      	adds	r3, #7
10008afe:	2201      	movs	r2, #1
10008b00:	4d10      	ldr	r5, [pc, #64]	; (10008b44 <mpu_set_bypass+0x174>)
10008b02:	47a8      	blx	r5
10008b04:	2800      	cmp	r0, #0
10008b06:	d114      	bne.n	10008b32 <mpu_set_bypass+0x162>
            return -1;
    }
    st.chip_cfg.bypass_mode = bypass_on;
10008b08:	4b0c      	ldr	r3, [pc, #48]	; (10008b3c <mpu_set_bypass+0x16c>)
10008b0a:	749c      	strb	r4, [r3, #18]
    return 0;
10008b0c:	2000      	movs	r0, #0
10008b0e:	e012      	b.n	10008b36 <mpu_set_bypass+0x166>
int mpu_set_bypass(unsigned char bypass_on)
{
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
        return 0;
10008b10:	2000      	movs	r0, #0
10008b12:	e010      	b.n	10008b36 <mpu_set_bypass+0x166>

    if (bypass_on) {
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
            return -1;
10008b14:	2001      	movs	r0, #1
10008b16:	4240      	negs	r0, r0
10008b18:	e00d      	b.n	10008b36 <mpu_set_bypass+0x166>
        tmp &= ~BIT_AUX_IF_EN;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
            return -1;
10008b1a:	2001      	movs	r0, #1
10008b1c:	4240      	negs	r0, r0
10008b1e:	e00a      	b.n	10008b36 <mpu_set_bypass+0x166>
        if (st.chip_cfg.active_low_int)
            tmp |= BIT_ACTL;
        if (st.chip_cfg.latched_int)
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
            return -1;
10008b20:	2001      	movs	r0, #1
10008b22:	4240      	negs	r0, r0
10008b24:	e007      	b.n	10008b36 <mpu_set_bypass+0x166>
    } else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
            return -1;
10008b26:	2001      	movs	r0, #1
10008b28:	4240      	negs	r0, r0
10008b2a:	e004      	b.n	10008b36 <mpu_set_bypass+0x166>
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
            tmp |= BIT_AUX_IF_EN;
        else
            tmp &= ~BIT_AUX_IF_EN;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
            return -1;
10008b2c:	2001      	movs	r0, #1
10008b2e:	4240      	negs	r0, r0
10008b30:	e001      	b.n	10008b36 <mpu_set_bypass+0x166>
        else
            tmp = 0;
        if (st.chip_cfg.latched_int)
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
            return -1;
10008b32:	2001      	movs	r0, #1
10008b34:	4240      	negs	r0, r0
    }
    st.chip_cfg.bypass_mode = bypass_on;
    return 0;
}
10008b36:	b003      	add	sp, #12
10008b38:	bd30      	pop	{r4, r5, pc}
10008b3a:	46c0      	nop			; (mov r8, r8)
10008b3c:	10015360 	.word	0x10015360
10008b40:	10009c01 	.word	0x10009c01
10008b44:	10009ba5 	.word	0x10009ba5
10008b48:	10008129 	.word	0x10008129

10008b4c <mpu_set_int_latched>:
 *  Any MPU register will clear the interrupt.
 *  @param[in]  enable  1 to enable, 0 to disable.
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
10008b4c:	b530      	push	{r4, r5, lr}
10008b4e:	b083      	sub	sp, #12
10008b50:	0004      	movs	r4, r0
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
10008b52:	2323      	movs	r3, #35	; 0x23
10008b54:	4a1c      	ldr	r2, [pc, #112]	; (10008bc8 <mpu_set_int_latched+0x7c>)
10008b56:	5cd3      	ldrb	r3, [r2, r3]
10008b58:	4283      	cmp	r3, r0
10008b5a:	d02e      	beq.n	10008bba <mpu_set_int_latched+0x6e>
        return 0;

    if (enable)
10008b5c:	2800      	cmp	r0, #0
10008b5e:	d003      	beq.n	10008b68 <mpu_set_int_latched+0x1c>
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
10008b60:	2230      	movs	r2, #48	; 0x30
10008b62:	466b      	mov	r3, sp
10008b64:	71da      	strb	r2, [r3, #7]
10008b66:	e002      	b.n	10008b6e <mpu_set_int_latched+0x22>
    else
        tmp = 0;
10008b68:	2200      	movs	r2, #0
10008b6a:	466b      	mov	r3, sp
10008b6c:	71da      	strb	r2, [r3, #7]
    if (st.chip_cfg.bypass_mode)
10008b6e:	4b16      	ldr	r3, [pc, #88]	; (10008bc8 <mpu_set_int_latched+0x7c>)
10008b70:	7c9b      	ldrb	r3, [r3, #18]
10008b72:	2b00      	cmp	r3, #0
10008b74:	d005      	beq.n	10008b82 <mpu_set_int_latched+0x36>
        tmp |= BIT_BYPASS_EN;
10008b76:	466b      	mov	r3, sp
10008b78:	1dda      	adds	r2, r3, #7
10008b7a:	79d9      	ldrb	r1, [r3, #7]
10008b7c:	2302      	movs	r3, #2
10008b7e:	430b      	orrs	r3, r1
10008b80:	7013      	strb	r3, [r2, #0]
    if (st.chip_cfg.active_low_int)
10008b82:	2322      	movs	r3, #34	; 0x22
10008b84:	4a10      	ldr	r2, [pc, #64]	; (10008bc8 <mpu_set_int_latched+0x7c>)
10008b86:	5cd3      	ldrb	r3, [r2, r3]
10008b88:	2b00      	cmp	r3, #0
10008b8a:	d006      	beq.n	10008b9a <mpu_set_int_latched+0x4e>
        tmp |= BIT_ACTL;
10008b8c:	466b      	mov	r3, sp
10008b8e:	1dda      	adds	r2, r3, #7
10008b90:	79db      	ldrb	r3, [r3, #7]
10008b92:	2180      	movs	r1, #128	; 0x80
10008b94:	4249      	negs	r1, r1
10008b96:	430b      	orrs	r3, r1
10008b98:	7013      	strb	r3, [r2, #0]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
10008b9a:	4b0b      	ldr	r3, [pc, #44]	; (10008bc8 <mpu_set_int_latched+0x7c>)
10008b9c:	681a      	ldr	r2, [r3, #0]
10008b9e:	7dd1      	ldrb	r1, [r2, #23]
10008ba0:	685b      	ldr	r3, [r3, #4]
10008ba2:	7818      	ldrb	r0, [r3, #0]
10008ba4:	466b      	mov	r3, sp
10008ba6:	3307      	adds	r3, #7
10008ba8:	2201      	movs	r2, #1
10008baa:	4d08      	ldr	r5, [pc, #32]	; (10008bcc <mpu_set_int_latched+0x80>)
10008bac:	47a8      	blx	r5
10008bae:	2800      	cmp	r0, #0
10008bb0:	d105      	bne.n	10008bbe <mpu_set_int_latched+0x72>
        return -1;
    st.chip_cfg.latched_int = enable;
10008bb2:	2323      	movs	r3, #35	; 0x23
10008bb4:	4a04      	ldr	r2, [pc, #16]	; (10008bc8 <mpu_set_int_latched+0x7c>)
10008bb6:	54d4      	strb	r4, [r2, r3]
    return 0;
10008bb8:	e003      	b.n	10008bc2 <mpu_set_int_latched+0x76>
 */
int mpu_set_int_latched(unsigned char enable)
{
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
        return 0;
10008bba:	2000      	movs	r0, #0
10008bbc:	e001      	b.n	10008bc2 <mpu_set_int_latched+0x76>
    if (st.chip_cfg.bypass_mode)
        tmp |= BIT_BYPASS_EN;
    if (st.chip_cfg.active_low_int)
        tmp |= BIT_ACTL;
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
        return -1;
10008bbe:	2001      	movs	r0, #1
10008bc0:	4240      	negs	r0, r0
    st.chip_cfg.latched_int = enable;
    return 0;
}
10008bc2:	b003      	add	sp, #12
10008bc4:	bd30      	pop	{r4, r5, pc}
10008bc6:	46c0      	nop			; (mov r8, r8)
10008bc8:	10015360 	.word	0x10015360
10008bcc:	10009ba5 	.word	0x10009ba5

10008bd0 <mpu_lp_accel_mode>:
 *  @param[in]  rate        Minimum sampling rate, or zero to disable LP
 *                          accel mode.
 *  @return     0 if successful.
 */
int mpu_lp_accel_mode(unsigned short rate)
{
10008bd0:	b510      	push	{r4, lr}
10008bd2:	b082      	sub	sp, #8
10008bd4:	1e04      	subs	r4, r0, #0
    unsigned char tmp[2];

    if (rate > 40)
10008bd6:	2c28      	cmp	r4, #40	; 0x28
10008bd8:	d878      	bhi.n	10008ccc <mpu_lp_accel_mode+0xfc>
        return -1;

    if (!rate) {
10008bda:	2800      	cmp	r0, #0
10008bdc:	d115      	bne.n	10008c0a <mpu_lp_accel_mode+0x3a>
        mpu_set_int_latched(0);
10008bde:	2000      	movs	r0, #0
10008be0:	4b44      	ldr	r3, [pc, #272]	; (10008cf4 <mpu_lp_accel_mode+0x124>)
10008be2:	4798      	blx	r3
        tmp[0] = 0;
10008be4:	ab01      	add	r3, sp, #4
10008be6:	2200      	movs	r2, #0
10008be8:	701a      	strb	r2, [r3, #0]
        tmp[1] = BIT_STBY_XYZG;
10008bea:	3207      	adds	r2, #7
10008bec:	705a      	strb	r2, [r3, #1]
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
10008bee:	4a42      	ldr	r2, [pc, #264]	; (10008cf8 <mpu_lp_accel_mode+0x128>)
10008bf0:	6811      	ldr	r1, [r2, #0]
10008bf2:	7d49      	ldrb	r1, [r1, #21]
10008bf4:	6852      	ldr	r2, [r2, #4]
10008bf6:	7810      	ldrb	r0, [r2, #0]
10008bf8:	2202      	movs	r2, #2
10008bfa:	4c40      	ldr	r4, [pc, #256]	; (10008cfc <mpu_lp_accel_mode+0x12c>)
10008bfc:	47a0      	blx	r4
10008bfe:	1e04      	subs	r4, r0, #0
10008c00:	d167      	bne.n	10008cd2 <mpu_lp_accel_mode+0x102>
            return -1;
        st.chip_cfg.lp_accel_mode = 0;
10008c02:	2200      	movs	r2, #0
10008c04:	4b3c      	ldr	r3, [pc, #240]	; (10008cf8 <mpu_lp_accel_mode+0x128>)
10008c06:	751a      	strb	r2, [r3, #20]
        return 0;
10008c08:	e071      	b.n	10008cee <mpu_lp_accel_mode+0x11e>
     * it gets a chance to deassert the interrupt pin; therefore, we shift this
     * responsibility over to the MCU.
     *
     * Any register read will clear the interrupt.
     */
    mpu_set_int_latched(1);
10008c0a:	2001      	movs	r0, #1
10008c0c:	4b39      	ldr	r3, [pc, #228]	; (10008cf4 <mpu_lp_accel_mode+0x124>)
10008c0e:	4798      	blx	r3
    tmp[1] = (tmp[1] << 6) | BIT_STBY_XYZG;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
        return -1;
#elif defined MPU6500
    /* Set wake frequency. */
    if (rate == 1)
10008c10:	2c01      	cmp	r4, #1
10008c12:	d103      	bne.n	10008c1c <mpu_lp_accel_mode+0x4c>
        tmp[0] = INV_LPA_1_25HZ;
10008c14:	2202      	movs	r2, #2
10008c16:	ab01      	add	r3, sp, #4
10008c18:	701a      	strb	r2, [r3, #0]
10008c1a:	e01a      	b.n	10008c52 <mpu_lp_accel_mode+0x82>
    else if (rate == 2)
10008c1c:	2c02      	cmp	r4, #2
10008c1e:	d103      	bne.n	10008c28 <mpu_lp_accel_mode+0x58>
        tmp[0] = INV_LPA_2_5HZ;
10008c20:	2203      	movs	r2, #3
10008c22:	ab01      	add	r3, sp, #4
10008c24:	701a      	strb	r2, [r3, #0]
10008c26:	e014      	b.n	10008c52 <mpu_lp_accel_mode+0x82>
    else if (rate <= 5)
10008c28:	2c05      	cmp	r4, #5
10008c2a:	d803      	bhi.n	10008c34 <mpu_lp_accel_mode+0x64>
        tmp[0] = INV_LPA_5HZ;
10008c2c:	2204      	movs	r2, #4
10008c2e:	ab01      	add	r3, sp, #4
10008c30:	701a      	strb	r2, [r3, #0]
10008c32:	e00e      	b.n	10008c52 <mpu_lp_accel_mode+0x82>
    else if (rate <= 10)
10008c34:	2c0a      	cmp	r4, #10
10008c36:	d803      	bhi.n	10008c40 <mpu_lp_accel_mode+0x70>
        tmp[0] = INV_LPA_10HZ;
10008c38:	2205      	movs	r2, #5
10008c3a:	ab01      	add	r3, sp, #4
10008c3c:	701a      	strb	r2, [r3, #0]
10008c3e:	e008      	b.n	10008c52 <mpu_lp_accel_mode+0x82>
    else if (rate <= 20)
10008c40:	2c14      	cmp	r4, #20
10008c42:	d803      	bhi.n	10008c4c <mpu_lp_accel_mode+0x7c>
        tmp[0] = INV_LPA_20HZ;
10008c44:	2206      	movs	r2, #6
10008c46:	ab01      	add	r3, sp, #4
10008c48:	701a      	strb	r2, [r3, #0]
10008c4a:	e002      	b.n	10008c52 <mpu_lp_accel_mode+0x82>
    else if (rate <= 40)
        tmp[0] = INV_LPA_40HZ;
10008c4c:	2207      	movs	r2, #7
10008c4e:	ab01      	add	r3, sp, #4
10008c50:	701a      	strb	r2, [r3, #0]
        tmp[0] = INV_LPA_160HZ;
    else if (rate <= 320)
        tmp[0] = INV_LPA_320HZ;
    else
        tmp[0] = INV_LPA_640HZ;
    if (i2c_write(st.hw->addr, st.reg->lp_accel_odr, 1, tmp))
10008c52:	4b29      	ldr	r3, [pc, #164]	; (10008cf8 <mpu_lp_accel_mode+0x128>)
10008c54:	681a      	ldr	r2, [r3, #0]
10008c56:	7a51      	ldrb	r1, [r2, #9]
10008c58:	685b      	ldr	r3, [r3, #4]
10008c5a:	7818      	ldrb	r0, [r3, #0]
10008c5c:	ab01      	add	r3, sp, #4
10008c5e:	2201      	movs	r2, #1
10008c60:	4c26      	ldr	r4, [pc, #152]	; (10008cfc <mpu_lp_accel_mode+0x12c>)
10008c62:	47a0      	blx	r4
10008c64:	2800      	cmp	r0, #0
10008c66:	d137      	bne.n	10008cd8 <mpu_lp_accel_mode+0x108>
        return -1;
    /* Enable LP ACCEL mode, ACCEL_FCHOICE_B=1*/
    if (i2c_read(st.hw->addr, st.reg->accel_cfg2, 1, tmp))
10008c68:	4b23      	ldr	r3, [pc, #140]	; (10008cf8 <mpu_lp_accel_mode+0x128>)
10008c6a:	681a      	ldr	r2, [r3, #0]
10008c6c:	7a11      	ldrb	r1, [r2, #8]
10008c6e:	685b      	ldr	r3, [r3, #4]
10008c70:	7818      	ldrb	r0, [r3, #0]
10008c72:	ab01      	add	r3, sp, #4
10008c74:	2201      	movs	r2, #1
10008c76:	4c22      	ldr	r4, [pc, #136]	; (10008d00 <mpu_lp_accel_mode+0x130>)
10008c78:	47a0      	blx	r4
10008c7a:	2800      	cmp	r0, #0
10008c7c:	d12f      	bne.n	10008cde <mpu_lp_accel_mode+0x10e>
       	return -1;

    tmp[0] = BIT_ACCL_FC_B | tmp[0];
10008c7e:	ab01      	add	r3, sp, #4
10008c80:	7819      	ldrb	r1, [r3, #0]
10008c82:	2208      	movs	r2, #8
10008c84:	430a      	orrs	r2, r1
10008c86:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, tmp))
10008c88:	4a1b      	ldr	r2, [pc, #108]	; (10008cf8 <mpu_lp_accel_mode+0x128>)
10008c8a:	6811      	ldr	r1, [r2, #0]
10008c8c:	7a09      	ldrb	r1, [r1, #8]
10008c8e:	6852      	ldr	r2, [r2, #4]
10008c90:	7810      	ldrb	r0, [r2, #0]
10008c92:	2201      	movs	r2, #1
10008c94:	4c19      	ldr	r4, [pc, #100]	; (10008cfc <mpu_lp_accel_mode+0x12c>)
10008c96:	47a0      	blx	r4
10008c98:	2800      	cmp	r0, #0
10008c9a:	d123      	bne.n	10008ce4 <mpu_lp_accel_mode+0x114>
    	return -1;
    tmp[0] = BIT_LPA_CYCLE;
10008c9c:	ab01      	add	r3, sp, #4
10008c9e:	2220      	movs	r2, #32
10008ca0:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
10008ca2:	4a15      	ldr	r2, [pc, #84]	; (10008cf8 <mpu_lp_accel_mode+0x128>)
10008ca4:	6811      	ldr	r1, [r2, #0]
10008ca6:	7d49      	ldrb	r1, [r1, #21]
10008ca8:	6852      	ldr	r2, [r2, #4]
10008caa:	7810      	ldrb	r0, [r2, #0]
10008cac:	2201      	movs	r2, #1
10008cae:	4c13      	ldr	r4, [pc, #76]	; (10008cfc <mpu_lp_accel_mode+0x12c>)
10008cb0:	47a0      	blx	r4
10008cb2:	1e04      	subs	r4, r0, #0
10008cb4:	d119      	bne.n	10008cea <mpu_lp_accel_mode+0x11a>
        return -1;
#endif
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
10008cb6:	4b10      	ldr	r3, [pc, #64]	; (10008cf8 <mpu_lp_accel_mode+0x128>)
10008cb8:	2208      	movs	r2, #8
10008cba:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.clk_src = 0;
10008cbc:	2200      	movs	r2, #0
10008cbe:	731a      	strb	r2, [r3, #12]
    st.chip_cfg.lp_accel_mode = 1;
10008cc0:	3201      	adds	r2, #1
10008cc2:	751a      	strb	r2, [r3, #20]
    mpu_configure_fifo(0);
10008cc4:	2000      	movs	r0, #0
10008cc6:	4b0f      	ldr	r3, [pc, #60]	; (10008d04 <mpu_lp_accel_mode+0x134>)
10008cc8:	4798      	blx	r3

    return 0;
10008cca:	e010      	b.n	10008cee <mpu_lp_accel_mode+0x11e>
int mpu_lp_accel_mode(unsigned short rate)
{
    unsigned char tmp[2];

    if (rate > 40)
        return -1;
10008ccc:	2401      	movs	r4, #1
10008cce:	4264      	negs	r4, r4
10008cd0:	e00d      	b.n	10008cee <mpu_lp_accel_mode+0x11e>
    if (!rate) {
        mpu_set_int_latched(0);
        tmp[0] = 0;
        tmp[1] = BIT_STBY_XYZG;
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
            return -1;
10008cd2:	2401      	movs	r4, #1
10008cd4:	4264      	negs	r4, r4
10008cd6:	e00a      	b.n	10008cee <mpu_lp_accel_mode+0x11e>
    else if (rate <= 320)
        tmp[0] = INV_LPA_320HZ;
    else
        tmp[0] = INV_LPA_640HZ;
    if (i2c_write(st.hw->addr, st.reg->lp_accel_odr, 1, tmp))
        return -1;
10008cd8:	2401      	movs	r4, #1
10008cda:	4264      	negs	r4, r4
10008cdc:	e007      	b.n	10008cee <mpu_lp_accel_mode+0x11e>
    /* Enable LP ACCEL mode, ACCEL_FCHOICE_B=1*/
    if (i2c_read(st.hw->addr, st.reg->accel_cfg2, 1, tmp))
       	return -1;
10008cde:	2401      	movs	r4, #1
10008ce0:	4264      	negs	r4, r4
10008ce2:	e004      	b.n	10008cee <mpu_lp_accel_mode+0x11e>

    tmp[0] = BIT_ACCL_FC_B | tmp[0];
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, tmp))
    	return -1;
10008ce4:	2401      	movs	r4, #1
10008ce6:	4264      	negs	r4, r4
10008ce8:	e001      	b.n	10008cee <mpu_lp_accel_mode+0x11e>
    tmp[0] = BIT_LPA_CYCLE;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
        return -1;
10008cea:	2401      	movs	r4, #1
10008cec:	4264      	negs	r4, r4
    st.chip_cfg.clk_src = 0;
    st.chip_cfg.lp_accel_mode = 1;
    mpu_configure_fifo(0);

    return 0;
}
10008cee:	0020      	movs	r0, r4
10008cf0:	b002      	add	sp, #8
10008cf2:	bd10      	pop	{r4, pc}
10008cf4:	10008b4d 	.word	0x10008b4d
10008cf8:	10015360 	.word	0x10015360
10008cfc:	10009ba5 	.word	0x10009ba5
10008d00:	10009c01 	.word	0x10009c01
10008d04:	10008965 	.word	0x10008965

10008d08 <mpu_set_sample_rate>:
 *  Sampling rate must be between 4Hz and 1kHz.
 *  @param[in]  rate    Desired sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_sample_rate(unsigned short rate)
{
10008d08:	b530      	push	{r4, r5, lr}
10008d0a:	b083      	sub	sp, #12
10008d0c:	0004      	movs	r4, r0
    unsigned char data;

    if (!(st.chip_cfg.sensors))
10008d0e:	4b2c      	ldr	r3, [pc, #176]	; (10008dc0 <mpu_set_sample_rate+0xb8>)
10008d10:	7a9b      	ldrb	r3, [r3, #10]
10008d12:	2b00      	cmp	r3, #0
10008d14:	d048      	beq.n	10008da8 <mpu_set_sample_rate+0xa0>
        return -1;

    if (st.chip_cfg.dmp_on)
10008d16:	2324      	movs	r3, #36	; 0x24
10008d18:	4a29      	ldr	r2, [pc, #164]	; (10008dc0 <mpu_set_sample_rate+0xb8>)
10008d1a:	5cd3      	ldrb	r3, [r2, r3]
10008d1c:	2b00      	cmp	r3, #0
10008d1e:	d146      	bne.n	10008dae <mpu_set_sample_rate+0xa6>
        return -1;
    else {
        if (st.chip_cfg.lp_accel_mode) {
10008d20:	7d13      	ldrb	r3, [r2, #20]
10008d22:	2b00      	cmp	r3, #0
10008d24:	d00a      	beq.n	10008d3c <mpu_set_sample_rate+0x34>
            if (rate && (rate <= 40)) {
10008d26:	1e43      	subs	r3, r0, #1
10008d28:	b29b      	uxth	r3, r3
10008d2a:	2b27      	cmp	r3, #39	; 0x27
10008d2c:	d803      	bhi.n	10008d36 <mpu_set_sample_rate+0x2e>
                /* Just stay in low-power accel mode. */
                mpu_lp_accel_mode(rate);
10008d2e:	4b25      	ldr	r3, [pc, #148]	; (10008dc4 <mpu_set_sample_rate+0xbc>)
10008d30:	4798      	blx	r3
                return 0;
10008d32:	2400      	movs	r4, #0
10008d34:	e040      	b.n	10008db8 <mpu_set_sample_rate+0xb0>
            }
            /* Requested rate exceeds the allowed frequencies in LP accel mode,
             * switch back to full-power mode.
             */
            mpu_lp_accel_mode(0);
10008d36:	2000      	movs	r0, #0
10008d38:	4b22      	ldr	r3, [pc, #136]	; (10008dc4 <mpu_set_sample_rate+0xbc>)
10008d3a:	4798      	blx	r3
        }
        if (rate < 4)
            rate = 4;
10008d3c:	2104      	movs	r1, #4
            /* Requested rate exceeds the allowed frequencies in LP accel mode,
             * switch back to full-power mode.
             */
            mpu_lp_accel_mode(0);
        }
        if (rate < 4)
10008d3e:	2c03      	cmp	r4, #3
10008d40:	d907      	bls.n	10008d52 <mpu_set_sample_rate+0x4a>
10008d42:	1c21      	adds	r1, r4, #0
10008d44:	23fa      	movs	r3, #250	; 0xfa
10008d46:	009b      	lsls	r3, r3, #2
10008d48:	429c      	cmp	r4, r3
10008d4a:	d901      	bls.n	10008d50 <mpu_set_sample_rate+0x48>
10008d4c:	4b1e      	ldr	r3, [pc, #120]	; (10008dc8 <mpu_set_sample_rate+0xc0>)
10008d4e:	8819      	ldrh	r1, [r3, #0]
10008d50:	b289      	uxth	r1, r1
            rate = 4;
        else if (rate > 1000)
            rate = 1000;

        data = 1000 / rate - 1;
10008d52:	466b      	mov	r3, sp
10008d54:	1ddc      	adds	r4, r3, #7
10008d56:	20fa      	movs	r0, #250	; 0xfa
10008d58:	0080      	lsls	r0, r0, #2
10008d5a:	4b1c      	ldr	r3, [pc, #112]	; (10008dcc <mpu_set_sample_rate+0xc4>)
10008d5c:	4798      	blx	r3
10008d5e:	3801      	subs	r0, #1
10008d60:	7020      	strb	r0, [r4, #0]
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
10008d62:	4b17      	ldr	r3, [pc, #92]	; (10008dc0 <mpu_set_sample_rate+0xb8>)
10008d64:	681a      	ldr	r2, [r3, #0]
10008d66:	7851      	ldrb	r1, [r2, #1]
10008d68:	685b      	ldr	r3, [r3, #4]
10008d6a:	7818      	ldrb	r0, [r3, #0]
10008d6c:	0023      	movs	r3, r4
10008d6e:	2201      	movs	r2, #1
10008d70:	4c17      	ldr	r4, [pc, #92]	; (10008dd0 <mpu_set_sample_rate+0xc8>)
10008d72:	47a0      	blx	r4
10008d74:	1e04      	subs	r4, r0, #0
10008d76:	d11d      	bne.n	10008db4 <mpu_set_sample_rate+0xac>
            return -1;

        st.chip_cfg.sample_rate = 1000 / (1 + data);
10008d78:	4d11      	ldr	r5, [pc, #68]	; (10008dc0 <mpu_set_sample_rate+0xb8>)
10008d7a:	466b      	mov	r3, sp
10008d7c:	79d9      	ldrb	r1, [r3, #7]
10008d7e:	3101      	adds	r1, #1
10008d80:	20fa      	movs	r0, #250	; 0xfa
10008d82:	0080      	lsls	r0, r0, #2
10008d84:	4b11      	ldr	r3, [pc, #68]	; (10008dcc <mpu_set_sample_rate+0xc4>)
10008d86:	4798      	blx	r3
10008d88:	81e8      	strh	r0, [r5, #14]

#ifdef AK89xx_SECONDARY
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
10008d8a:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
10008d8c:	1c18      	adds	r0, r3, #0
10008d8e:	b29b      	uxth	r3, r3
10008d90:	2b64      	cmp	r3, #100	; 0x64
10008d92:	d900      	bls.n	10008d96 <mpu_set_sample_rate+0x8e>
10008d94:	2064      	movs	r0, #100	; 0x64
10008d96:	b280      	uxth	r0, r0
10008d98:	4b0e      	ldr	r3, [pc, #56]	; (10008dd4 <mpu_set_sample_rate+0xcc>)
10008d9a:	4798      	blx	r3
#endif

        /* Automatically set LPF to 1/2 sampling rate. */
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
10008d9c:	4b08      	ldr	r3, [pc, #32]	; (10008dc0 <mpu_set_sample_rate+0xb8>)
10008d9e:	89d8      	ldrh	r0, [r3, #14]
10008da0:	0840      	lsrs	r0, r0, #1
10008da2:	4b0d      	ldr	r3, [pc, #52]	; (10008dd8 <mpu_set_sample_rate+0xd0>)
10008da4:	4798      	blx	r3
        return 0;
10008da6:	e007      	b.n	10008db8 <mpu_set_sample_rate+0xb0>
int mpu_set_sample_rate(unsigned short rate)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
10008da8:	2401      	movs	r4, #1
10008daa:	4264      	negs	r4, r4
10008dac:	e004      	b.n	10008db8 <mpu_set_sample_rate+0xb0>

    if (st.chip_cfg.dmp_on)
        return -1;
10008dae:	2401      	movs	r4, #1
10008db0:	4264      	negs	r4, r4
10008db2:	e001      	b.n	10008db8 <mpu_set_sample_rate+0xb0>
        else if (rate > 1000)
            rate = 1000;

        data = 1000 / rate - 1;
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
            return -1;
10008db4:	2401      	movs	r4, #1
10008db6:	4264      	negs	r4, r4

        /* Automatically set LPF to 1/2 sampling rate. */
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
        return 0;
    }
}
10008db8:	0020      	movs	r0, r4
10008dba:	b003      	add	sp, #12
10008dbc:	bd30      	pop	{r4, r5, pc}
10008dbe:	46c0      	nop			; (mov r8, r8)
10008dc0:	10015360 	.word	0x10015360
10008dc4:	10008bd1 	.word	0x10008bd1
10008dc8:	10013718 	.word	0x10013718
10008dcc:	10011329 	.word	0x10011329
10008dd0:	10009ba5 	.word	0x10009ba5
10008dd4:	100088ed 	.word	0x100088ed
10008dd8:	10008831 	.word	0x10008831

10008ddc <mpu_set_sensors>:
 *  \n INV_XYZ_COMPASS
 *  @param[in]  sensors    Mask of sensors to wake.
 *  @return     0 if successful.
 */
int mpu_set_sensors(unsigned char sensors)
{
10008ddc:	b530      	push	{r4, r5, lr}
10008dde:	b083      	sub	sp, #12
10008de0:	0004      	movs	r4, r0
    unsigned char data;
#ifdef AK89xx_SECONDARY
    unsigned char user_ctrl;
#endif

    if (sensors & INV_XYZ_GYRO)
10008de2:	2370      	movs	r3, #112	; 0x70
10008de4:	4203      	tst	r3, r0
10008de6:	d003      	beq.n	10008df0 <mpu_set_sensors+0x14>
        data = INV_CLK_PLL;
10008de8:	2201      	movs	r2, #1
10008dea:	466b      	mov	r3, sp
10008dec:	71da      	strb	r2, [r3, #7]
10008dee:	e015      	b.n	10008e1c <mpu_set_sensors+0x40>
    else if (sensors)
10008df0:	2800      	cmp	r0, #0
10008df2:	d003      	beq.n	10008dfc <mpu_set_sensors+0x20>
        data = 0;
10008df4:	2200      	movs	r2, #0
10008df6:	466b      	mov	r3, sp
10008df8:	71da      	strb	r2, [r3, #7]
10008dfa:	e00f      	b.n	10008e1c <mpu_set_sensors+0x40>
    else
        data = BIT_SLEEP;
10008dfc:	466b      	mov	r3, sp
10008dfe:	3307      	adds	r3, #7
10008e00:	2240      	movs	r2, #64	; 0x40
10008e02:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
10008e04:	4a6a      	ldr	r2, [pc, #424]	; (10008fb0 <mpu_set_sensors+0x1d4>)
10008e06:	6811      	ldr	r1, [r2, #0]
10008e08:	7d49      	ldrb	r1, [r1, #21]
10008e0a:	6852      	ldr	r2, [r2, #4]
10008e0c:	7810      	ldrb	r0, [r2, #0]
10008e0e:	2201      	movs	r2, #1
10008e10:	4d68      	ldr	r5, [pc, #416]	; (10008fb4 <mpu_set_sensors+0x1d8>)
10008e12:	47a8      	blx	r5
10008e14:	2800      	cmp	r0, #0
10008e16:	d100      	bne.n	10008e1a <mpu_set_sensors+0x3e>
10008e18:	e0b2      	b.n	10008f80 <mpu_set_sensors+0x1a4>
10008e1a:	e00b      	b.n	10008e34 <mpu_set_sensors+0x58>
10008e1c:	4b64      	ldr	r3, [pc, #400]	; (10008fb0 <mpu_set_sensors+0x1d4>)
10008e1e:	681a      	ldr	r2, [r3, #0]
10008e20:	7d51      	ldrb	r1, [r2, #21]
10008e22:	685b      	ldr	r3, [r3, #4]
10008e24:	7818      	ldrb	r0, [r3, #0]
10008e26:	466b      	mov	r3, sp
10008e28:	3307      	adds	r3, #7
10008e2a:	2201      	movs	r2, #1
10008e2c:	4d61      	ldr	r5, [pc, #388]	; (10008fb4 <mpu_set_sensors+0x1d8>)
10008e2e:	47a8      	blx	r5
10008e30:	2800      	cmp	r0, #0
10008e32:	d005      	beq.n	10008e40 <mpu_set_sensors+0x64>
        st.chip_cfg.sensors = 0;
10008e34:	2200      	movs	r2, #0
10008e36:	4b5e      	ldr	r3, [pc, #376]	; (10008fb0 <mpu_set_sensors+0x1d4>)
10008e38:	729a      	strb	r2, [r3, #10]
        return -1;
10008e3a:	2501      	movs	r5, #1
10008e3c:	426d      	negs	r5, r5
10008e3e:	e0b4      	b.n	10008faa <mpu_set_sensors+0x1ce>
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
10008e40:	466b      	mov	r3, sp
10008e42:	1dda      	adds	r2, r3, #7
10008e44:	79db      	ldrb	r3, [r3, #7]
10008e46:	2140      	movs	r1, #64	; 0x40
10008e48:	438b      	bics	r3, r1
10008e4a:	4959      	ldr	r1, [pc, #356]	; (10008fb0 <mpu_set_sensors+0x1d4>)
10008e4c:	730b      	strb	r3, [r1, #12]

    data = 0;
10008e4e:	2300      	movs	r3, #0
10008e50:	7013      	strb	r3, [r2, #0]
    if (!(sensors & INV_X_GYRO))
10008e52:	0663      	lsls	r3, r4, #25
10008e54:	d402      	bmi.n	10008e5c <mpu_set_sensors+0x80>
        data |= BIT_STBY_XG;
10008e56:	2204      	movs	r2, #4
10008e58:	466b      	mov	r3, sp
10008e5a:	71da      	strb	r2, [r3, #7]
    if (!(sensors & INV_Y_GYRO))
10008e5c:	06a3      	lsls	r3, r4, #26
10008e5e:	d405      	bmi.n	10008e6c <mpu_set_sensors+0x90>
        data |= BIT_STBY_YG;
10008e60:	466b      	mov	r3, sp
10008e62:	1dda      	adds	r2, r3, #7
10008e64:	79d9      	ldrb	r1, [r3, #7]
10008e66:	2302      	movs	r3, #2
10008e68:	430b      	orrs	r3, r1
10008e6a:	7013      	strb	r3, [r2, #0]
    if (!(sensors & INV_Z_GYRO))
10008e6c:	06e3      	lsls	r3, r4, #27
10008e6e:	d405      	bmi.n	10008e7c <mpu_set_sensors+0xa0>
        data |= BIT_STBY_ZG;
10008e70:	466b      	mov	r3, sp
10008e72:	1dda      	adds	r2, r3, #7
10008e74:	79d9      	ldrb	r1, [r3, #7]
10008e76:	2301      	movs	r3, #1
10008e78:	430b      	orrs	r3, r1
10008e7a:	7013      	strb	r3, [r2, #0]
    if (!(sensors & INV_XYZ_ACCEL))
10008e7c:	0723      	lsls	r3, r4, #28
10008e7e:	d405      	bmi.n	10008e8c <mpu_set_sensors+0xb0>
        data |= BIT_STBY_XYZA;
10008e80:	466b      	mov	r3, sp
10008e82:	1dda      	adds	r2, r3, #7
10008e84:	79d9      	ldrb	r1, [r3, #7]
10008e86:	2338      	movs	r3, #56	; 0x38
10008e88:	430b      	orrs	r3, r1
10008e8a:	7013      	strb	r3, [r2, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
10008e8c:	4b48      	ldr	r3, [pc, #288]	; (10008fb0 <mpu_set_sensors+0x1d4>)
10008e8e:	681a      	ldr	r2, [r3, #0]
10008e90:	7d91      	ldrb	r1, [r2, #22]
10008e92:	685b      	ldr	r3, [r3, #4]
10008e94:	7818      	ldrb	r0, [r3, #0]
10008e96:	466b      	mov	r3, sp
10008e98:	3307      	adds	r3, #7
10008e9a:	2201      	movs	r2, #1
10008e9c:	4d45      	ldr	r5, [pc, #276]	; (10008fb4 <mpu_set_sensors+0x1d8>)
10008e9e:	47a8      	blx	r5
10008ea0:	2800      	cmp	r0, #0
10008ea2:	d005      	beq.n	10008eb0 <mpu_set_sensors+0xd4>
        st.chip_cfg.sensors = 0;
10008ea4:	2200      	movs	r2, #0
10008ea6:	4b42      	ldr	r3, [pc, #264]	; (10008fb0 <mpu_set_sensors+0x1d4>)
10008ea8:	729a      	strb	r2, [r3, #10]
        return -1;
10008eaa:	2501      	movs	r5, #1
10008eac:	426d      	negs	r5, r5
10008eae:	e07c      	b.n	10008faa <mpu_set_sensors+0x1ce>
    }

    if (sensors && (sensors != INV_XYZ_ACCEL))
10008eb0:	2308      	movs	r3, #8
10008eb2:	0022      	movs	r2, r4
10008eb4:	439a      	bics	r2, r3
10008eb6:	d06b      	beq.n	10008f90 <mpu_set_sensors+0x1b4>
        /* Latched interrupts only used in LP accel mode. */
        mpu_set_int_latched(0);
10008eb8:	2000      	movs	r0, #0
10008eba:	4b3f      	ldr	r3, [pc, #252]	; (10008fb8 <mpu_set_sensors+0x1dc>)
10008ebc:	4798      	blx	r3
    if (sensors & INV_XYZ_COMPASS)
        mpu_set_bypass(1);
    else
        mpu_set_bypass(0);
#else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
10008ebe:	4b3c      	ldr	r3, [pc, #240]	; (10008fb0 <mpu_set_sensors+0x1d4>)
10008ec0:	681a      	ldr	r2, [r3, #0]
10008ec2:	7911      	ldrb	r1, [r2, #4]
10008ec4:	685b      	ldr	r3, [r3, #4]
10008ec6:	7818      	ldrb	r0, [r3, #0]
10008ec8:	466b      	mov	r3, sp
10008eca:	3306      	adds	r3, #6
10008ecc:	2201      	movs	r2, #1
10008ece:	4d3b      	ldr	r5, [pc, #236]	; (10008fbc <mpu_set_sensors+0x1e0>)
10008ed0:	47a8      	blx	r5
10008ed2:	2800      	cmp	r0, #0
10008ed4:	d148      	bne.n	10008f68 <mpu_set_sensors+0x18c>
        return -1;
    /* Handle AKM power management. */
    if (sensors & INV_XYZ_COMPASS) {
10008ed6:	07e3      	lsls	r3, r4, #31
10008ed8:	d509      	bpl.n	10008eee <mpu_set_sensors+0x112>
        data = AKM_SINGLE_MEASUREMENT;
10008eda:	2211      	movs	r2, #17
10008edc:	466b      	mov	r3, sp
10008ede:	71da      	strb	r2, [r3, #7]
        user_ctrl |= BIT_AUX_IF_EN;
10008ee0:	466b      	mov	r3, sp
10008ee2:	1d9a      	adds	r2, r3, #6
10008ee4:	7999      	ldrb	r1, [r3, #6]
10008ee6:	2320      	movs	r3, #32
10008ee8:	430b      	orrs	r3, r1
10008eea:	7013      	strb	r3, [r2, #0]
10008eec:	e008      	b.n	10008f00 <mpu_set_sensors+0x124>
    } else {
        data = AKM_POWER_DOWN;
10008eee:	2210      	movs	r2, #16
10008ef0:	466b      	mov	r3, sp
10008ef2:	71da      	strb	r2, [r3, #7]
        user_ctrl &= ~BIT_AUX_IF_EN;
10008ef4:	466b      	mov	r3, sp
10008ef6:	1d9a      	adds	r2, r3, #6
10008ef8:	799b      	ldrb	r3, [r3, #6]
10008efa:	2120      	movs	r1, #32
10008efc:	438b      	bics	r3, r1
10008efe:	7013      	strb	r3, [r2, #0]
    }
    if (st.chip_cfg.dmp_on)
10008f00:	2324      	movs	r3, #36	; 0x24
10008f02:	4a2b      	ldr	r2, [pc, #172]	; (10008fb0 <mpu_set_sensors+0x1d4>)
10008f04:	5cd3      	ldrb	r3, [r2, r3]
10008f06:	2b00      	cmp	r3, #0
10008f08:	d007      	beq.n	10008f1a <mpu_set_sensors+0x13e>
        user_ctrl |= BIT_DMP_EN;
10008f0a:	466b      	mov	r3, sp
10008f0c:	1d9a      	adds	r2, r3, #6
10008f0e:	799b      	ldrb	r3, [r3, #6]
10008f10:	2180      	movs	r1, #128	; 0x80
10008f12:	4249      	negs	r1, r1
10008f14:	430b      	orrs	r3, r1
10008f16:	7013      	strb	r3, [r2, #0]
10008f18:	e005      	b.n	10008f26 <mpu_set_sensors+0x14a>
    else
        user_ctrl &= ~BIT_DMP_EN;
10008f1a:	466b      	mov	r3, sp
10008f1c:	1d9a      	adds	r2, r3, #6
10008f1e:	799b      	ldrb	r3, [r3, #6]
10008f20:	217f      	movs	r1, #127	; 0x7f
10008f22:	400b      	ands	r3, r1
10008f24:	7013      	strb	r3, [r2, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, &data))
10008f26:	4b22      	ldr	r3, [pc, #136]	; (10008fb0 <mpu_set_sensors+0x1d4>)
10008f28:	2226      	movs	r2, #38	; 0x26
10008f2a:	6819      	ldr	r1, [r3, #0]
10008f2c:	5c89      	ldrb	r1, [r1, r2]
10008f2e:	685b      	ldr	r3, [r3, #4]
10008f30:	7818      	ldrb	r0, [r3, #0]
10008f32:	466b      	mov	r3, sp
10008f34:	3307      	adds	r3, #7
10008f36:	3a25      	subs	r2, #37	; 0x25
10008f38:	4d1e      	ldr	r5, [pc, #120]	; (10008fb4 <mpu_set_sensors+0x1d8>)
10008f3a:	47a8      	blx	r5
10008f3c:	2800      	cmp	r0, #0
10008f3e:	d116      	bne.n	10008f6e <mpu_set_sensors+0x192>
        return -1;
    /* Enable/disable I2C master mode. */
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
10008f40:	4b1b      	ldr	r3, [pc, #108]	; (10008fb0 <mpu_set_sensors+0x1d4>)
10008f42:	681a      	ldr	r2, [r3, #0]
10008f44:	7911      	ldrb	r1, [r2, #4]
10008f46:	685b      	ldr	r3, [r3, #4]
10008f48:	7818      	ldrb	r0, [r3, #0]
10008f4a:	466b      	mov	r3, sp
10008f4c:	3306      	adds	r3, #6
10008f4e:	2201      	movs	r2, #1
10008f50:	4d18      	ldr	r5, [pc, #96]	; (10008fb4 <mpu_set_sensors+0x1d8>)
10008f52:	47a8      	blx	r5
10008f54:	1e05      	subs	r5, r0, #0
10008f56:	d10d      	bne.n	10008f74 <mpu_set_sensors+0x198>
        return -1;
#endif
#endif

    st.chip_cfg.sensors = sensors;
10008f58:	4b15      	ldr	r3, [pc, #84]	; (10008fb0 <mpu_set_sensors+0x1d4>)
10008f5a:	729c      	strb	r4, [r3, #10]
    st.chip_cfg.lp_accel_mode = 0;
10008f5c:	2200      	movs	r2, #0
10008f5e:	751a      	strb	r2, [r3, #20]
    delay_ms(50);
10008f60:	2032      	movs	r0, #50	; 0x32
10008f62:	4b17      	ldr	r3, [pc, #92]	; (10008fc0 <mpu_set_sensors+0x1e4>)
10008f64:	4798      	blx	r3
    return 0;
10008f66:	e020      	b.n	10008faa <mpu_set_sensors+0x1ce>
        mpu_set_bypass(1);
    else
        mpu_set_bypass(0);
#else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
        return -1;
10008f68:	2501      	movs	r5, #1
10008f6a:	426d      	negs	r5, r5
10008f6c:	e01d      	b.n	10008faa <mpu_set_sensors+0x1ce>
    if (st.chip_cfg.dmp_on)
        user_ctrl |= BIT_DMP_EN;
    else
        user_ctrl &= ~BIT_DMP_EN;
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, &data))
        return -1;
10008f6e:	2501      	movs	r5, #1
10008f70:	426d      	negs	r5, r5
10008f72:	e01a      	b.n	10008faa <mpu_set_sensors+0x1ce>
    /* Enable/disable I2C master mode. */
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
        return -1;
10008f74:	2501      	movs	r5, #1
10008f76:	426d      	negs	r5, r5
10008f78:	e017      	b.n	10008faa <mpu_set_sensors+0x1ce>
        mpu_set_bypass(1);
    else
        mpu_set_bypass(0);
#else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
        return -1;
10008f7a:	2501      	movs	r5, #1
10008f7c:	426d      	negs	r5, r5
10008f7e:	e014      	b.n	10008faa <mpu_set_sensors+0x1ce>
        data = BIT_SLEEP;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
        st.chip_cfg.sensors = 0;
        return -1;
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
10008f80:	466b      	mov	r3, sp
10008f82:	3307      	adds	r3, #7
10008f84:	781b      	ldrb	r3, [r3, #0]
10008f86:	2240      	movs	r2, #64	; 0x40
10008f88:	4393      	bics	r3, r2
10008f8a:	4a09      	ldr	r2, [pc, #36]	; (10008fb0 <mpu_set_sensors+0x1d4>)
10008f8c:	7313      	strb	r3, [r2, #12]
10008f8e:	e762      	b.n	10008e56 <mpu_set_sensors+0x7a>
    if (sensors & INV_XYZ_COMPASS)
        mpu_set_bypass(1);
    else
        mpu_set_bypass(0);
#else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
10008f90:	4b07      	ldr	r3, [pc, #28]	; (10008fb0 <mpu_set_sensors+0x1d4>)
10008f92:	681a      	ldr	r2, [r3, #0]
10008f94:	7911      	ldrb	r1, [r2, #4]
10008f96:	685b      	ldr	r3, [r3, #4]
10008f98:	7818      	ldrb	r0, [r3, #0]
10008f9a:	466b      	mov	r3, sp
10008f9c:	3306      	adds	r3, #6
10008f9e:	2201      	movs	r2, #1
10008fa0:	4d06      	ldr	r5, [pc, #24]	; (10008fbc <mpu_set_sensors+0x1e0>)
10008fa2:	47a8      	blx	r5
10008fa4:	2800      	cmp	r0, #0
10008fa6:	d0a2      	beq.n	10008eee <mpu_set_sensors+0x112>
10008fa8:	e7e7      	b.n	10008f7a <mpu_set_sensors+0x19e>

    st.chip_cfg.sensors = sensors;
    st.chip_cfg.lp_accel_mode = 0;
    delay_ms(50);
    return 0;
}
10008faa:	0028      	movs	r0, r5
10008fac:	b003      	add	sp, #12
10008fae:	bd30      	pop	{r4, r5, pc}
10008fb0:	10015360 	.word	0x10015360
10008fb4:	10009ba5 	.word	0x10009ba5
10008fb8:	10008b4d 	.word	0x10008b4d
10008fbc:	10009c01 	.word	0x10009c01
10008fc0:	10008129 	.word	0x10008129

10008fc4 <mpu_init>:
 *  Data ready interrupt: Disabled, active low, unlatched.
 *  @param[in]  int_param   Platform-specific parameters to interrupt API.
 *  @return     0 if successful.
 */
int mpu_init(struct int_param_s *int_param)
{
10008fc4:	b570      	push	{r4, r5, r6, lr}
10008fc6:	b084      	sub	sp, #16
10008fc8:	0006      	movs	r6, r0
    unsigned char data[6];

    /* Reset device. */
    data[0] = BIT_RESET;
10008fca:	ab02      	add	r3, sp, #8
10008fcc:	2280      	movs	r2, #128	; 0x80
10008fce:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
10008fd0:	4abc      	ldr	r2, [pc, #752]	; (100092c4 <mpu_init+0x300>)
10008fd2:	6811      	ldr	r1, [r2, #0]
10008fd4:	7d49      	ldrb	r1, [r1, #21]
10008fd6:	6852      	ldr	r2, [r2, #4]
10008fd8:	7810      	ldrb	r0, [r2, #0]
10008fda:	2201      	movs	r2, #1
10008fdc:	4cba      	ldr	r4, [pc, #744]	; (100092c8 <mpu_init+0x304>)
10008fde:	47a0      	blx	r4
10008fe0:	2800      	cmp	r0, #0
10008fe2:	d000      	beq.n	10008fe6 <mpu_init+0x22>
10008fe4:	e150      	b.n	10009288 <mpu_init+0x2c4>
        return -1;
    delay_ms(100);
10008fe6:	3064      	adds	r0, #100	; 0x64
10008fe8:	4bb8      	ldr	r3, [pc, #736]	; (100092cc <mpu_init+0x308>)
10008fea:	4798      	blx	r3

    /* Wake up chip. */
    data[0] = 0x00;
10008fec:	ab02      	add	r3, sp, #8
10008fee:	2200      	movs	r2, #0
10008ff0:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
10008ff2:	4ab4      	ldr	r2, [pc, #720]	; (100092c4 <mpu_init+0x300>)
10008ff4:	6811      	ldr	r1, [r2, #0]
10008ff6:	7d49      	ldrb	r1, [r1, #21]
10008ff8:	6852      	ldr	r2, [r2, #4]
10008ffa:	7810      	ldrb	r0, [r2, #0]
10008ffc:	2201      	movs	r2, #1
10008ffe:	4cb2      	ldr	r4, [pc, #712]	; (100092c8 <mpu_init+0x304>)
10009000:	47a0      	blx	r4
10009002:	2800      	cmp	r0, #0
10009004:	d000      	beq.n	10009008 <mpu_init+0x44>
10009006:	e142      	b.n	1000928e <mpu_init+0x2ca>
        return -1;

   st.chip_cfg.accel_half = 0;
10009008:	4aae      	ldr	r2, [pc, #696]	; (100092c4 <mpu_init+0x300>)
1000900a:	2300      	movs	r3, #0
1000900c:	74d3      	strb	r3, [r2, #19]

#ifdef MPU6500
    /* MPU6500 shares 4kB of memory between the DMP and the FIFO. Since the
     * first 3kB are needed by the DMP, we'll use the last 1kB for the FIFO.
     */
    data[0] = BIT_FIFO_SIZE_1024;
1000900e:	ab02      	add	r3, sp, #8
10009010:	2140      	movs	r1, #64	; 0x40
10009012:	7019      	strb	r1, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
10009014:	6811      	ldr	r1, [r2, #0]
10009016:	7a09      	ldrb	r1, [r1, #8]
10009018:	6852      	ldr	r2, [r2, #4]
1000901a:	7810      	ldrb	r0, [r2, #0]
1000901c:	2201      	movs	r2, #1
1000901e:	4caa      	ldr	r4, [pc, #680]	; (100092c8 <mpu_init+0x304>)
10009020:	47a0      	blx	r4
10009022:	2800      	cmp	r0, #0
10009024:	d000      	beq.n	10009028 <mpu_init+0x64>
10009026:	e135      	b.n	10009294 <mpu_init+0x2d0>
        return -1;
#endif

    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.sensors = 0xFF;
10009028:	4ca6      	ldr	r4, [pc, #664]	; (100092c4 <mpu_init+0x300>)
1000902a:	23ff      	movs	r3, #255	; 0xff
1000902c:	72a3      	strb	r3, [r4, #10]
    st.chip_cfg.gyro_fsr = 0xFF;
1000902e:	7223      	strb	r3, [r4, #8]
    st.chip_cfg.accel_fsr = 0xFF;
10009030:	7263      	strb	r3, [r4, #9]
    st.chip_cfg.lpf = 0xFF;
10009032:	72e3      	strb	r3, [r4, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
10009034:	2201      	movs	r2, #1
10009036:	4252      	negs	r2, r2
10009038:	81e2      	strh	r2, [r4, #14]
    st.chip_cfg.fifo_enable = 0xFF;
1000903a:	7423      	strb	r3, [r4, #16]
    st.chip_cfg.bypass_mode = 0xFF;
1000903c:	74a3      	strb	r3, [r4, #18]
#ifdef AK89xx_SECONDARY
    st.chip_cfg.compass_sample_rate = 0xFFFF;
1000903e:	8522      	strh	r2, [r4, #40]	; 0x28
#endif
    /* mpu_set_sensors always preserves this setting. */
    st.chip_cfg.clk_src = INV_CLK_PLL;
10009040:	3bfe      	subs	r3, #254	; 0xfe
10009042:	7323      	strb	r3, [r4, #12]
    /* Handled in next call to mpu_set_bypass. */
    st.chip_cfg.active_low_int = 0; // --> interrupt active high!!
10009044:	2500      	movs	r5, #0
10009046:	3321      	adds	r3, #33	; 0x21
10009048:	54e5      	strb	r5, [r4, r3]
    st.chip_cfg.latched_int = 0;
1000904a:	3301      	adds	r3, #1
1000904c:	54e5      	strb	r5, [r4, r3]
    st.chip_cfg.int_motion_only = 0;
1000904e:	7565      	strb	r5, [r4, #21]
    st.chip_cfg.lp_accel_mode = 0;
10009050:	7525      	strb	r5, [r4, #20]
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
10009052:	0020      	movs	r0, r4
10009054:	3016      	adds	r0, #22
10009056:	320d      	adds	r2, #13
10009058:	2100      	movs	r1, #0
1000905a:	4b9d      	ldr	r3, [pc, #628]	; (100092d0 <mpu_init+0x30c>)
1000905c:	4798      	blx	r3
    st.chip_cfg.dmp_on = 0;
1000905e:	2324      	movs	r3, #36	; 0x24
10009060:	54e5      	strb	r5, [r4, r3]
    st.chip_cfg.dmp_loaded = 0;
10009062:	3301      	adds	r3, #1
10009064:	54e5      	strb	r5, [r4, r3]
    st.chip_cfg.dmp_sample_rate = 0;
10009066:	84e5      	strh	r5, [r4, #38]	; 0x26

    if (mpu_set_gyro_fsr(2000))
10009068:	20fa      	movs	r0, #250	; 0xfa
1000906a:	00c0      	lsls	r0, r0, #3
1000906c:	4b99      	ldr	r3, [pc, #612]	; (100092d4 <mpu_init+0x310>)
1000906e:	4798      	blx	r3
10009070:	2800      	cmp	r0, #0
10009072:	d000      	beq.n	10009076 <mpu_init+0xb2>
10009074:	e111      	b.n	1000929a <mpu_init+0x2d6>
        return -1;
    if (mpu_set_accel_fsr(2))
10009076:	3002      	adds	r0, #2
10009078:	4b97      	ldr	r3, [pc, #604]	; (100092d8 <mpu_init+0x314>)
1000907a:	4798      	blx	r3
1000907c:	2800      	cmp	r0, #0
1000907e:	d000      	beq.n	10009082 <mpu_init+0xbe>
10009080:	e10e      	b.n	100092a0 <mpu_init+0x2dc>
        return -1;
    if (mpu_set_lpf(42))
10009082:	302a      	adds	r0, #42	; 0x2a
10009084:	4b95      	ldr	r3, [pc, #596]	; (100092dc <mpu_init+0x318>)
10009086:	4798      	blx	r3
10009088:	2800      	cmp	r0, #0
1000908a:	d000      	beq.n	1000908e <mpu_init+0xca>
1000908c:	e10b      	b.n	100092a6 <mpu_init+0x2e2>
        return -1;
    if (mpu_set_sample_rate(50))
1000908e:	3032      	adds	r0, #50	; 0x32
10009090:	4b93      	ldr	r3, [pc, #588]	; (100092e0 <mpu_init+0x31c>)
10009092:	4798      	blx	r3
10009094:	2800      	cmp	r0, #0
10009096:	d000      	beq.n	1000909a <mpu_init+0xd6>
10009098:	e108      	b.n	100092ac <mpu_init+0x2e8>
        return -1;
    if (mpu_configure_fifo(0))
1000909a:	4b92      	ldr	r3, [pc, #584]	; (100092e4 <mpu_init+0x320>)
1000909c:	4798      	blx	r3
1000909e:	2800      	cmp	r0, #0
100090a0:	d000      	beq.n	100090a4 <mpu_init+0xe0>
100090a2:	e106      	b.n	100092b2 <mpu_init+0x2ee>
        return -1;

    if (int_param)
100090a4:	2e00      	cmp	r6, #0
100090a6:	d004      	beq.n	100090b2 <mpu_init+0xee>
    volatile uint32_t load = (uint32_t)(0xffffffff - dualtimer_get_value(DUALTIMER_TIMER2));
    count = (uint32_t *)(load / 26000);
}
static inline int reg_int_cb(struct int_param_s *int_param)
{
    gpio_register_callback(int_param->pin, int_param->cb, GPIO_CALLBACK_RISING);
100090a8:	6871      	ldr	r1, [r6, #4]
100090aa:	7830      	ldrb	r0, [r6, #0]
100090ac:	2202      	movs	r2, #2
100090ae:	4b8e      	ldr	r3, [pc, #568]	; (100092e8 <mpu_init+0x324>)
100090b0:	4798      	blx	r3
/* This initialization is similar to the one in ak8975.c. */
static int setup_compass(void)
{
    unsigned char data[4], akm_addr;

    mpu_set_bypass(1);
100090b2:	2001      	movs	r0, #1
100090b4:	4b8d      	ldr	r3, [pc, #564]	; (100092ec <mpu_init+0x328>)
100090b6:	4798      	blx	r3

    /* Find compass. Possible addresses range from 0x0C to 0x0F. */
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
100090b8:	240c      	movs	r4, #12
        int result;
        result = i2c_read(akm_addr, AKM_REG_WHOAMI, 1, data);
100090ba:	4d8d      	ldr	r5, [pc, #564]	; (100092f0 <mpu_init+0x32c>)
100090bc:	ab01      	add	r3, sp, #4
100090be:	2201      	movs	r2, #1
100090c0:	2100      	movs	r1, #0
100090c2:	0020      	movs	r0, r4
100090c4:	47a8      	blx	r5
        if (!result && (data[0] == AKM_WHOAMI))
100090c6:	2800      	cmp	r0, #0
100090c8:	d103      	bne.n	100090d2 <mpu_init+0x10e>
100090ca:	466b      	mov	r3, sp
100090cc:	791b      	ldrb	r3, [r3, #4]
100090ce:	2b48      	cmp	r3, #72	; 0x48
100090d0:	d004      	beq.n	100090dc <mpu_init+0x118>
    unsigned char data[4], akm_addr;

    mpu_set_bypass(1);

    /* Find compass. Possible addresses range from 0x0C to 0x0F. */
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
100090d2:	3401      	adds	r4, #1
100090d4:	b2e4      	uxtb	r4, r4
100090d6:	2c10      	cmp	r4, #16
100090d8:	d1f0      	bne.n	100090bc <mpu_init+0xf8>
100090da:	e001      	b.n	100090e0 <mpu_init+0x11c>
        result = i2c_read(akm_addr, AKM_REG_WHOAMI, 1, data);
        if (!result && (data[0] == AKM_WHOAMI))
            break;
    }

    if (akm_addr > 0x0F) {
100090dc:	2c0f      	cmp	r4, #15
100090de:	d905      	bls.n	100090ec <mpu_init+0x128>
        /* TODO: Handle this case in all compass-related functions. */
        log_e("Compass not found.\n");
100090e0:	4884      	ldr	r0, [pc, #528]	; (100092f4 <mpu_init+0x330>)
100090e2:	4c85      	ldr	r4, [pc, #532]	; (100092f8 <mpu_init+0x334>)
100090e4:	47a0      	blx	r4
100090e6:	4885      	ldr	r0, [pc, #532]	; (100092fc <mpu_init+0x338>)
100090e8:	47a0      	blx	r4
100090ea:	e0c4      	b.n	10009276 <mpu_init+0x2b2>
        return -1;
    }

    st.chip_cfg.compass_addr = akm_addr;
100090ec:	232a      	movs	r3, #42	; 0x2a
100090ee:	4a75      	ldr	r2, [pc, #468]	; (100092c4 <mpu_init+0x300>)
100090f0:	54d4      	strb	r4, [r2, r3]

    data[0] = AKM_POWER_DOWN;
100090f2:	ab01      	add	r3, sp, #4
100090f4:	2210      	movs	r2, #16
100090f6:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
100090f8:	3a0f      	subs	r2, #15
100090fa:	210a      	movs	r1, #10
100090fc:	0020      	movs	r0, r4
100090fe:	4c72      	ldr	r4, [pc, #456]	; (100092c8 <mpu_init+0x304>)
10009100:	47a0      	blx	r4
10009102:	2800      	cmp	r0, #0
10009104:	d000      	beq.n	10009108 <mpu_init+0x144>
10009106:	e0b6      	b.n	10009276 <mpu_init+0x2b2>
        return -1;
    delay_ms(1);
10009108:	3001      	adds	r0, #1
1000910a:	4b70      	ldr	r3, [pc, #448]	; (100092cc <mpu_init+0x308>)
1000910c:	4798      	blx	r3

    data[0] = AKM_FUSE_ROM_ACCESS;
1000910e:	ab01      	add	r3, sp, #4
10009110:	221f      	movs	r2, #31
10009112:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
10009114:	320b      	adds	r2, #11
10009116:	496b      	ldr	r1, [pc, #428]	; (100092c4 <mpu_init+0x300>)
10009118:	5c88      	ldrb	r0, [r1, r2]
1000911a:	3a29      	subs	r2, #41	; 0x29
1000911c:	210a      	movs	r1, #10
1000911e:	4c6a      	ldr	r4, [pc, #424]	; (100092c8 <mpu_init+0x304>)
10009120:	47a0      	blx	r4
10009122:	2800      	cmp	r0, #0
10009124:	d000      	beq.n	10009128 <mpu_init+0x164>
10009126:	e0a6      	b.n	10009276 <mpu_init+0x2b2>
        return -1;
    delay_ms(1);
10009128:	3001      	adds	r0, #1
1000912a:	4b68      	ldr	r3, [pc, #416]	; (100092cc <mpu_init+0x308>)
1000912c:	4798      	blx	r3

    /* Get sensitivity adjustment data from fuse ROM. */
    if (i2c_read(st.chip_cfg.compass_addr, AKM_REG_ASAX, 3, data))
1000912e:	232a      	movs	r3, #42	; 0x2a
10009130:	4a64      	ldr	r2, [pc, #400]	; (100092c4 <mpu_init+0x300>)
10009132:	5cd0      	ldrb	r0, [r2, r3]
10009134:	ab01      	add	r3, sp, #4
10009136:	2203      	movs	r2, #3
10009138:	2110      	movs	r1, #16
1000913a:	4c6d      	ldr	r4, [pc, #436]	; (100092f0 <mpu_init+0x32c>)
1000913c:	47a0      	blx	r4
1000913e:	2800      	cmp	r0, #0
10009140:	d000      	beq.n	10009144 <mpu_init+0x180>
10009142:	e098      	b.n	10009276 <mpu_init+0x2b2>
        return -1;
    st.chip_cfg.mag_sens_adj[0] = (long)data[0] + 128;
10009144:	4a5f      	ldr	r2, [pc, #380]	; (100092c4 <mpu_init+0x300>)
10009146:	ab01      	add	r3, sp, #4
10009148:	7819      	ldrb	r1, [r3, #0]
1000914a:	3180      	adds	r1, #128	; 0x80
1000914c:	8591      	strh	r1, [r2, #44]	; 0x2c
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
1000914e:	7859      	ldrb	r1, [r3, #1]
10009150:	3180      	adds	r1, #128	; 0x80
10009152:	85d1      	strh	r1, [r2, #46]	; 0x2e
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;
10009154:	7899      	ldrb	r1, [r3, #2]
10009156:	3180      	adds	r1, #128	; 0x80
10009158:	8611      	strh	r1, [r2, #48]	; 0x30

    data[0] = AKM_POWER_DOWN;
1000915a:	2110      	movs	r1, #16
1000915c:	7019      	strb	r1, [r3, #0]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
1000915e:	311a      	adds	r1, #26
10009160:	5c50      	ldrb	r0, [r2, r1]
10009162:	2201      	movs	r2, #1
10009164:	3920      	subs	r1, #32
10009166:	4c58      	ldr	r4, [pc, #352]	; (100092c8 <mpu_init+0x304>)
10009168:	47a0      	blx	r4
1000916a:	2800      	cmp	r0, #0
1000916c:	d000      	beq.n	10009170 <mpu_init+0x1ac>
1000916e:	e082      	b.n	10009276 <mpu_init+0x2b2>
        return -1;
    delay_ms(1);
10009170:	3001      	adds	r0, #1
10009172:	4b56      	ldr	r3, [pc, #344]	; (100092cc <mpu_init+0x308>)
10009174:	4798      	blx	r3

    mpu_set_bypass(0);
10009176:	2000      	movs	r0, #0
10009178:	4b5c      	ldr	r3, [pc, #368]	; (100092ec <mpu_init+0x328>)
1000917a:	4798      	blx	r3

    /* Set up master mode, master clock, and ES bit. */
    data[0] = 0x40;
1000917c:	ab01      	add	r3, sp, #4
1000917e:	2240      	movs	r2, #64	; 0x40
10009180:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
10009182:	4a50      	ldr	r2, [pc, #320]	; (100092c4 <mpu_init+0x300>)
10009184:	6811      	ldr	r1, [r2, #0]
10009186:	7e89      	ldrb	r1, [r1, #26]
10009188:	6852      	ldr	r2, [r2, #4]
1000918a:	7810      	ldrb	r0, [r2, #0]
1000918c:	2201      	movs	r2, #1
1000918e:	4c4e      	ldr	r4, [pc, #312]	; (100092c8 <mpu_init+0x304>)
10009190:	47a0      	blx	r4
10009192:	2800      	cmp	r0, #0
10009194:	d16f      	bne.n	10009276 <mpu_init+0x2b2>
        return -1;

    /* Slave 0 reads from AKM data registers. */
    data[0] = BIT_I2C_READ | st.chip_cfg.compass_addr;
10009196:	ab01      	add	r3, sp, #4
10009198:	4a4a      	ldr	r2, [pc, #296]	; (100092c4 <mpu_init+0x300>)
1000919a:	212a      	movs	r1, #42	; 0x2a
1000919c:	5c51      	ldrb	r1, [r2, r1]
1000919e:	3880      	subs	r0, #128	; 0x80
100091a0:	4301      	orrs	r1, r0
100091a2:	7019      	strb	r1, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s0_addr, 1, data))
100091a4:	6811      	ldr	r1, [r2, #0]
100091a6:	7f89      	ldrb	r1, [r1, #30]
100091a8:	6852      	ldr	r2, [r2, #4]
100091aa:	7810      	ldrb	r0, [r2, #0]
100091ac:	2201      	movs	r2, #1
100091ae:	4c46      	ldr	r4, [pc, #280]	; (100092c8 <mpu_init+0x304>)
100091b0:	47a0      	blx	r4
100091b2:	2800      	cmp	r0, #0
100091b4:	d15f      	bne.n	10009276 <mpu_init+0x2b2>
        return -1;

    /* Compass reads start at this register. */
    data[0] = AKM_REG_ST1;
100091b6:	ab01      	add	r3, sp, #4
100091b8:	2202      	movs	r2, #2
100091ba:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s0_reg, 1, data))
100091bc:	4a41      	ldr	r2, [pc, #260]	; (100092c4 <mpu_init+0x300>)
100091be:	6811      	ldr	r1, [r2, #0]
100091c0:	7fc9      	ldrb	r1, [r1, #31]
100091c2:	6852      	ldr	r2, [r2, #4]
100091c4:	7810      	ldrb	r0, [r2, #0]
100091c6:	2201      	movs	r2, #1
100091c8:	4c3f      	ldr	r4, [pc, #252]	; (100092c8 <mpu_init+0x304>)
100091ca:	47a0      	blx	r4
100091cc:	2800      	cmp	r0, #0
100091ce:	d152      	bne.n	10009276 <mpu_init+0x2b2>
        return -1;

    /* Enable slave 0, 8-byte reads. */
    data[0] = BIT_SLAVE_EN | 8;
100091d0:	ab01      	add	r3, sp, #4
100091d2:	2288      	movs	r2, #136	; 0x88
100091d4:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s0_ctrl, 1, data))
100091d6:	4a3b      	ldr	r2, [pc, #236]	; (100092c4 <mpu_init+0x300>)
100091d8:	2120      	movs	r1, #32
100091da:	6810      	ldr	r0, [r2, #0]
100091dc:	5c41      	ldrb	r1, [r0, r1]
100091de:	6852      	ldr	r2, [r2, #4]
100091e0:	7810      	ldrb	r0, [r2, #0]
100091e2:	2201      	movs	r2, #1
100091e4:	4c38      	ldr	r4, [pc, #224]	; (100092c8 <mpu_init+0x304>)
100091e6:	47a0      	blx	r4
100091e8:	2800      	cmp	r0, #0
100091ea:	d144      	bne.n	10009276 <mpu_init+0x2b2>
        return -1;

    /* Slave 1 changes AKM measurement mode. */
    data[0] = st.chip_cfg.compass_addr;
100091ec:	ab01      	add	r3, sp, #4
100091ee:	4a35      	ldr	r2, [pc, #212]	; (100092c4 <mpu_init+0x300>)
100091f0:	212a      	movs	r1, #42	; 0x2a
100091f2:	5c51      	ldrb	r1, [r2, r1]
100091f4:	7019      	strb	r1, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_addr, 1, data))
100091f6:	2121      	movs	r1, #33	; 0x21
100091f8:	6810      	ldr	r0, [r2, #0]
100091fa:	5c41      	ldrb	r1, [r0, r1]
100091fc:	6852      	ldr	r2, [r2, #4]
100091fe:	7810      	ldrb	r0, [r2, #0]
10009200:	2201      	movs	r2, #1
10009202:	4c31      	ldr	r4, [pc, #196]	; (100092c8 <mpu_init+0x304>)
10009204:	47a0      	blx	r4
10009206:	2800      	cmp	r0, #0
10009208:	d135      	bne.n	10009276 <mpu_init+0x2b2>
        return -1;

    /* AKM measurement mode register. */
    data[0] = AKM_REG_CNTL;
1000920a:	ab01      	add	r3, sp, #4
1000920c:	220a      	movs	r2, #10
1000920e:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_reg, 1, data))
10009210:	4a2c      	ldr	r2, [pc, #176]	; (100092c4 <mpu_init+0x300>)
10009212:	2122      	movs	r1, #34	; 0x22
10009214:	6810      	ldr	r0, [r2, #0]
10009216:	5c41      	ldrb	r1, [r0, r1]
10009218:	6852      	ldr	r2, [r2, #4]
1000921a:	7810      	ldrb	r0, [r2, #0]
1000921c:	2201      	movs	r2, #1
1000921e:	4c2a      	ldr	r4, [pc, #168]	; (100092c8 <mpu_init+0x304>)
10009220:	47a0      	blx	r4
10009222:	2800      	cmp	r0, #0
10009224:	d127      	bne.n	10009276 <mpu_init+0x2b2>
        return -1;

    /* Enable slave 1, 1-byte writes. */
    data[0] = BIT_SLAVE_EN | 1;
10009226:	ab01      	add	r3, sp, #4
10009228:	2281      	movs	r2, #129	; 0x81
1000922a:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_ctrl, 1, data))
1000922c:	4a25      	ldr	r2, [pc, #148]	; (100092c4 <mpu_init+0x300>)
1000922e:	2123      	movs	r1, #35	; 0x23
10009230:	6810      	ldr	r0, [r2, #0]
10009232:	5c41      	ldrb	r1, [r0, r1]
10009234:	6852      	ldr	r2, [r2, #4]
10009236:	7810      	ldrb	r0, [r2, #0]
10009238:	2201      	movs	r2, #1
1000923a:	4c23      	ldr	r4, [pc, #140]	; (100092c8 <mpu_init+0x304>)
1000923c:	47a0      	blx	r4
1000923e:	2800      	cmp	r0, #0
10009240:	d119      	bne.n	10009276 <mpu_init+0x2b2>
        return -1;

    /* Set slave 1 data. */
    data[0] = AKM_SINGLE_MEASUREMENT;
10009242:	ab01      	add	r3, sp, #4
10009244:	2211      	movs	r2, #17
10009246:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, data))
10009248:	4a1e      	ldr	r2, [pc, #120]	; (100092c4 <mpu_init+0x300>)
1000924a:	2126      	movs	r1, #38	; 0x26
1000924c:	6810      	ldr	r0, [r2, #0]
1000924e:	5c41      	ldrb	r1, [r0, r1]
10009250:	6852      	ldr	r2, [r2, #4]
10009252:	7810      	ldrb	r0, [r2, #0]
10009254:	2201      	movs	r2, #1
10009256:	4c1c      	ldr	r4, [pc, #112]	; (100092c8 <mpu_init+0x304>)
10009258:	47a0      	blx	r4
1000925a:	2800      	cmp	r0, #0
1000925c:	d10b      	bne.n	10009276 <mpu_init+0x2b2>
        return -1;

    /* Trigger slave 0 and slave 1 actions at each sample. */
    data[0] = 0x03;
1000925e:	ab01      	add	r3, sp, #4
10009260:	2203      	movs	r2, #3
10009262:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->i2c_delay_ctrl, 1, data))
10009264:	4a17      	ldr	r2, [pc, #92]	; (100092c4 <mpu_init+0x300>)
10009266:	2127      	movs	r1, #39	; 0x27
10009268:	6810      	ldr	r0, [r2, #0]
1000926a:	5c41      	ldrb	r1, [r0, r1]
1000926c:	6852      	ldr	r2, [r2, #4]
1000926e:	7810      	ldrb	r0, [r2, #0]
10009270:	2201      	movs	r2, #1
10009272:	4c15      	ldr	r4, [pc, #84]	; (100092c8 <mpu_init+0x304>)
10009274:	47a0      	blx	r4
    if (int_param)
        reg_int_cb(int_param);

#ifdef AK89xx_SECONDARY
    setup_compass();
    if (mpu_set_compass_sample_rate(10))
10009276:	200a      	movs	r0, #10
10009278:	4b21      	ldr	r3, [pc, #132]	; (10009300 <mpu_init+0x33c>)
1000927a:	4798      	blx	r3
1000927c:	1e04      	subs	r4, r0, #0
1000927e:	d11b      	bne.n	100092b8 <mpu_init+0x2f4>
    /* Already disabled by setup_compass. */
    if (mpu_set_bypass(0))
        return -1;
#endif

    mpu_set_sensors(0);
10009280:	2000      	movs	r0, #0
10009282:	4b20      	ldr	r3, [pc, #128]	; (10009304 <mpu_init+0x340>)
10009284:	4798      	blx	r3
    return 0;
10009286:	e019      	b.n	100092bc <mpu_init+0x2f8>
    unsigned char data[6];

    /* Reset device. */
    data[0] = BIT_RESET;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
        return -1;
10009288:	2401      	movs	r4, #1
1000928a:	4264      	negs	r4, r4
1000928c:	e016      	b.n	100092bc <mpu_init+0x2f8>
    delay_ms(100);

    /* Wake up chip. */
    data[0] = 0x00;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
        return -1;
1000928e:	2401      	movs	r4, #1
10009290:	4264      	negs	r4, r4
10009292:	e013      	b.n	100092bc <mpu_init+0x2f8>
    /* MPU6500 shares 4kB of memory between the DMP and the FIFO. Since the
     * first 3kB are needed by the DMP, we'll use the last 1kB for the FIFO.
     */
    data[0] = BIT_FIFO_SIZE_1024;
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
        return -1;
10009294:	2401      	movs	r4, #1
10009296:	4264      	negs	r4, r4
10009298:	e010      	b.n	100092bc <mpu_init+0x2f8>
    st.chip_cfg.dmp_on = 0;
    st.chip_cfg.dmp_loaded = 0;
    st.chip_cfg.dmp_sample_rate = 0;

    if (mpu_set_gyro_fsr(2000))
        return -1;
1000929a:	2401      	movs	r4, #1
1000929c:	4264      	negs	r4, r4
1000929e:	e00d      	b.n	100092bc <mpu_init+0x2f8>
    if (mpu_set_accel_fsr(2))
        return -1;
100092a0:	2401      	movs	r4, #1
100092a2:	4264      	negs	r4, r4
100092a4:	e00a      	b.n	100092bc <mpu_init+0x2f8>
    if (mpu_set_lpf(42))
        return -1;
100092a6:	2401      	movs	r4, #1
100092a8:	4264      	negs	r4, r4
100092aa:	e007      	b.n	100092bc <mpu_init+0x2f8>
    if (mpu_set_sample_rate(50))
        return -1;
100092ac:	2401      	movs	r4, #1
100092ae:	4264      	negs	r4, r4
100092b0:	e004      	b.n	100092bc <mpu_init+0x2f8>
    if (mpu_configure_fifo(0))
        return -1;
100092b2:	2401      	movs	r4, #1
100092b4:	4264      	negs	r4, r4
100092b6:	e001      	b.n	100092bc <mpu_init+0x2f8>
        reg_int_cb(int_param);

#ifdef AK89xx_SECONDARY
    setup_compass();
    if (mpu_set_compass_sample_rate(10))
        return -1;
100092b8:	2401      	movs	r4, #1
100092ba:	4264      	negs	r4, r4
        return -1;
#endif

    mpu_set_sensors(0);
    return 0;
}
100092bc:	0020      	movs	r0, r4
100092be:	b004      	add	sp, #16
100092c0:	bd70      	pop	{r4, r5, r6, pc}
100092c2:	46c0      	nop			; (mov r8, r8)
100092c4:	10015360 	.word	0x10015360
100092c8:	10009ba5 	.word	0x10009ba5
100092cc:	10008129 	.word	0x10008129
100092d0:	10012571 	.word	0x10012571
100092d4:	100086fd 	.word	0x100086fd
100092d8:	1000879d 	.word	0x1000879d
100092dc:	10008831 	.word	0x10008831
100092e0:	10008d09 	.word	0x10008d09
100092e4:	10008965 	.word	0x10008965
100092e8:	1000ab89 	.word	0x1000ab89
100092ec:	100089d1 	.word	0x100089d1
100092f0:	10009c01 	.word	0x10009c01
100092f4:	10013980 	.word	0x10013980
100092f8:	100127d9 	.word	0x100127d9
100092fc:	100137f0 	.word	0x100137f0
10009300:	100088ed 	.word	0x100088ed
10009304:	10008ddd 	.word	0x10008ddd

10009308 <sms_ble_pair_request_fn>:
    return AT_BLE_SUCCESS;
}

/* AT_BLE_PAIR_REQUEST (#10) */
at_ble_status_t sms_ble_pair_request_fn(void *params)
{
10009308:	b510      	push	{r4, lr}
1000930a:	b082      	sub	sp, #8
    at_ble_pair_request_t *request = (at_ble_pair_request_t *)params;
    DBG_LOG_DEV("[sms_ble_pair_request_fn]\tPairing request... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
1000930c:	4809      	ldr	r0, [pc, #36]	; (10009334 <sms_ble_pair_request_fn+0x2c>)
1000930e:	4b0a      	ldr	r3, [pc, #40]	; (10009338 <sms_ble_pair_request_fn+0x30>)
10009310:	4798      	blx	r3
10009312:	4b0a      	ldr	r3, [pc, #40]	; (1000933c <sms_ble_pair_request_fn+0x34>)
10009314:	781a      	ldrb	r2, [r3, #0]
10009316:	b2d2      	uxtb	r2, r2
10009318:	4b09      	ldr	r3, [pc, #36]	; (10009340 <sms_ble_pair_request_fn+0x38>)
1000931a:	781b      	ldrb	r3, [r3, #0]
1000931c:	b2db      	uxtb	r3, r3
1000931e:	4909      	ldr	r1, [pc, #36]	; (10009344 <sms_ble_pair_request_fn+0x3c>)
10009320:	7808      	ldrb	r0, [r1, #0]
10009322:	4909      	ldr	r1, [pc, #36]	; (10009348 <sms_ble_pair_request_fn+0x40>)
10009324:	7849      	ldrb	r1, [r1, #1]
10009326:	9000      	str	r0, [sp, #0]
10009328:	4808      	ldr	r0, [pc, #32]	; (1000934c <sms_ble_pair_request_fn+0x44>)
1000932a:	4c09      	ldr	r4, [pc, #36]	; (10009350 <sms_ble_pair_request_fn+0x48>)
1000932c:	47a0      	blx	r4
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- peer features: 0x%02x", request->handle, request->peer_features);
    return AT_BLE_SUCCESS;
}
1000932e:	2000      	movs	r0, #0
10009330:	b002      	add	sp, #8
10009332:	bd10      	pop	{r4, pc}
10009334:	10013980 	.word	0x10013980
10009338:	100127d9 	.word	0x100127d9
1000933c:	10016fe8 	.word	0x10016fe8
10009340:	10016ecc 	.word	0x10016ecc
10009344:	10016fe9 	.word	0x10016fe9
10009348:	10016ed8 	.word	0x10016ed8
1000934c:	10013bcc 	.word	0x10013bcc
10009350:	100126b9 	.word	0x100126b9

10009354 <sms_ble_notification_confirmed_fn>:

/* AT_BLE_NOTIFICATION_CONFIRMED (#29) */
at_ble_status_t sms_ble_notification_confirmed_fn(void *params)
{
10009354:	b510      	push	{r4, lr}
    
    at_ble_cmd_complete_event_t *notification_status = (at_ble_cmd_complete_event_t *)params;
    //button_instance.current_state = sms_button_get_state();
    //DBG_LOG_DEV("[sms_ble_notification_confirmed_fn]\tNotification sent... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- operation: 0x%02x\r\n- status: 0x%02x", notification_status->conn_handle, notification_status->operation, notification_status->status);
    sms_dualtimer_stop(DUALTIMER_TIMER2);
10009356:	2001      	movs	r0, #1
10009358:	4b0c      	ldr	r3, [pc, #48]	; (1000938c <sms_ble_notification_confirmed_fn+0x38>)
1000935a:	4798      	blx	r3
    timer2_current_mode = TIMER2_MODE_NONE;
1000935c:	2200      	movs	r2, #0
1000935e:	4b0c      	ldr	r3, [pc, #48]	; (10009390 <sms_ble_notification_confirmed_fn+0x3c>)
10009360:	701a      	strb	r2, [r3, #0]
    ble_current_state = BLE_STATE_PAIRED;
10009362:	3222      	adds	r2, #34	; 0x22
10009364:	4b0b      	ldr	r3, [pc, #44]	; (10009394 <sms_ble_notification_confirmed_fn+0x40>)
10009366:	701a      	strb	r2, [r3, #0]
    //sms_sensors_toggle_interrupt(SMS_EXTINT_ENABLE);
    //DBG_LOG_CONT_DEV(" done!");

    //gpio_pin_set_output_level(dbg_pin, DBG_PIN_LOW);
    
    DBG_LOG_DEV("Timer1 current mode: %d", timer1_current_mode);
10009368:	480b      	ldr	r0, [pc, #44]	; (10009398 <sms_ble_notification_confirmed_fn+0x44>)
1000936a:	4b0c      	ldr	r3, [pc, #48]	; (1000939c <sms_ble_notification_confirmed_fn+0x48>)
1000936c:	4798      	blx	r3
1000936e:	4c0c      	ldr	r4, [pc, #48]	; (100093a0 <sms_ble_notification_confirmed_fn+0x4c>)
10009370:	7821      	ldrb	r1, [r4, #0]
10009372:	b2c9      	uxtb	r1, r1
10009374:	480b      	ldr	r0, [pc, #44]	; (100093a4 <sms_ble_notification_confirmed_fn+0x50>)
10009376:	4b0c      	ldr	r3, [pc, #48]	; (100093a8 <sms_ble_notification_confirmed_fn+0x54>)
10009378:	4798      	blx	r3
    if(timer1_current_mode == TIMER1_MODE_NONE) {
1000937a:	7823      	ldrb	r3, [r4, #0]
1000937c:	2b00      	cmp	r3, #0
1000937e:	d102      	bne.n	10009386 <sms_ble_notification_confirmed_fn+0x32>
        ulp_ready = true;
10009380:	2201      	movs	r2, #1
10009382:	4b0a      	ldr	r3, [pc, #40]	; (100093ac <sms_ble_notification_confirmed_fn+0x58>)
10009384:	701a      	strb	r2, [r3, #0]
    }
    return AT_BLE_SUCCESS;
}
10009386:	2000      	movs	r0, #0
10009388:	bd10      	pop	{r4, pc}
1000938a:	46c0      	nop			; (mov r8, r8)
1000938c:	1000a149 	.word	0x1000a149
10009390:	10016fe9 	.word	0x10016fe9
10009394:	10016fe8 	.word	0x10016fe8
10009398:	10013980 	.word	0x10013980
1000939c:	100127d9 	.word	0x100127d9
100093a0:	10016ecc 	.word	0x10016ecc
100093a4:	10013c1c 	.word	0x10013c1c
100093a8:	100126b9 	.word	0x100126b9
100093ac:	10016ece 	.word	0x10016ece

100093b0 <sms_ble_indication_confirmed_fn>:

/* AT_BLE_INDICATION_CONFIRMED (#30) */
at_ble_status_t sms_ble_indication_confirmed_fn(void *params)
{
100093b0:	b510      	push	{r4, lr}
    
    at_ble_indication_confirmed_t *indication_status = (at_ble_indication_confirmed_t *)params;
    //button_instance.current_state = sms_button_get_state();
    //DBG_LOG_DEV("[sms_ble_indication_confirmed]\tIndication confirmed... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- char handle: 0x%04x\r\n- status: 0x%02x", indication_status->conn_handle, indication_status->char_handle, indication_status->status);
    sms_dualtimer_stop(DUALTIMER_TIMER2);
100093b2:	2001      	movs	r0, #1
100093b4:	4b08      	ldr	r3, [pc, #32]	; (100093d8 <sms_ble_indication_confirmed_fn+0x28>)
100093b6:	4798      	blx	r3
    timer2_current_mode = TIMER2_MODE_NONE;
100093b8:	2200      	movs	r2, #0
100093ba:	4b08      	ldr	r3, [pc, #32]	; (100093dc <sms_ble_indication_confirmed_fn+0x2c>)
100093bc:	701a      	strb	r2, [r3, #0]
    ble_current_state = BLE_STATE_PAIRED;
100093be:	3222      	adds	r2, #34	; 0x22
100093c0:	4b07      	ldr	r3, [pc, #28]	; (100093e0 <sms_ble_indication_confirmed_fn+0x30>)
100093c2:	701a      	strb	r2, [r3, #0]
    //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
    //sms_sensors_toggle_interrupt(SMS_EXTINT_ENABLE);
    
    //gpio_pin_set_output_level(dbg_pin, DBG_PIN_LOW);
    
    if(timer1_current_mode == TIMER1_MODE_NONE) {
100093c4:	4b07      	ldr	r3, [pc, #28]	; (100093e4 <sms_ble_indication_confirmed_fn+0x34>)
100093c6:	781b      	ldrb	r3, [r3, #0]
100093c8:	2b00      	cmp	r3, #0
100093ca:	d102      	bne.n	100093d2 <sms_ble_indication_confirmed_fn+0x22>
        ulp_ready = true;
100093cc:	3a21      	subs	r2, #33	; 0x21
100093ce:	4b06      	ldr	r3, [pc, #24]	; (100093e8 <sms_ble_indication_confirmed_fn+0x38>)
100093d0:	701a      	strb	r2, [r3, #0]
    }        
    return AT_BLE_SUCCESS;
}
100093d2:	2000      	movs	r0, #0
100093d4:	bd10      	pop	{r4, pc}
100093d6:	46c0      	nop			; (mov r8, r8)
100093d8:	1000a149 	.word	0x1000a149
100093dc:	10016fe9 	.word	0x10016fe9
100093e0:	10016fe8 	.word	0x10016fe8
100093e4:	10016ecc 	.word	0x10016ecc
100093e8:	10016ece 	.word	0x10016ece

100093ec <sms_ble_power_down>:
    timer2_current_mode = TIMER2_MODE_LED_STARTUP;
    sms_led_blink_start(SMS_LED_0_PIN);
}

void sms_ble_power_down(void)
{
100093ec:	b510      	push	{r4, lr}
    sms_monitor_get_states("[sms_ble_power_down]");
100093ee:	482c      	ldr	r0, [pc, #176]	; (100094a0 <sms_ble_power_down+0xb4>)
100093f0:	4b2c      	ldr	r3, [pc, #176]	; (100094a4 <sms_ble_power_down+0xb8>)
100093f2:	4798      	blx	r3
    if(ble_current_state == BLE_STATE_POWEROFF) {
100093f4:	4b2c      	ldr	r3, [pc, #176]	; (100094a8 <sms_ble_power_down+0xbc>)
100093f6:	781b      	ldrb	r3, [r3, #0]
100093f8:	2b00      	cmp	r3, #0
100093fa:	d105      	bne.n	10009408 <sms_ble_power_down+0x1c>
        /* If already power off state, then go back sleeping */
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        ulp_ready = true;
100093fc:	2201      	movs	r2, #1
100093fe:	4b2b      	ldr	r3, [pc, #172]	; (100094ac <sms_ble_power_down+0xc0>)
10009400:	701a      	strb	r2, [r3, #0]
        release_sleep_lock();
10009402:	4b2b      	ldr	r3, [pc, #172]	; (100094b0 <sms_ble_power_down+0xc4>)
10009404:	4798      	blx	r3
10009406:	e049      	b.n	1000949c <sms_ble_power_down+0xb0>
    }
    else {
        /* Disable button interrupts */
        //sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);        
        /* Disconnect if necessary from BLE network */
        switch(ble_current_state) {
10009408:	4b27      	ldr	r3, [pc, #156]	; (100094a8 <sms_ble_power_down+0xbc>)
1000940a:	781b      	ldrb	r3, [r3, #0]
1000940c:	b2db      	uxtb	r3, r3
1000940e:	2b21      	cmp	r3, #33	; 0x21
10009410:	d030      	beq.n	10009474 <sms_ble_power_down+0x88>
10009412:	d802      	bhi.n	1000941a <sms_ble_power_down+0x2e>
10009414:	2b20      	cmp	r3, #32
10009416:	d005      	beq.n	10009424 <sms_ble_power_down+0x38>
10009418:	e037      	b.n	1000948a <sms_ble_power_down+0x9e>
1000941a:	2b22      	cmp	r3, #34	; 0x22
1000941c:	d017      	beq.n	1000944e <sms_ble_power_down+0x62>
1000941e:	2b23      	cmp	r3, #35	; 0x23
10009420:	d01b      	beq.n	1000945a <sms_ble_power_down+0x6e>
10009422:	e032      	b.n	1000948a <sms_ble_power_down+0x9e>
            case BLE_STATE_ADVERTISING:
            DBG_LOG_DEV("[sms_ble_power_down]\tStopping command received during advertisement. Stopping... ");
10009424:	4823      	ldr	r0, [pc, #140]	; (100094b4 <sms_ble_power_down+0xc8>)
10009426:	4b24      	ldr	r3, [pc, #144]	; (100094b8 <sms_ble_power_down+0xcc>)
10009428:	4798      	blx	r3
1000942a:	4824      	ldr	r0, [pc, #144]	; (100094bc <sms_ble_power_down+0xd0>)
1000942c:	4b24      	ldr	r3, [pc, #144]	; (100094c0 <sms_ble_power_down+0xd4>)
1000942e:	4798      	blx	r3
            if(at_ble_adv_stop() != AT_BLE_SUCCESS) {
10009430:	4b24      	ldr	r3, [pc, #144]	; (100094c4 <sms_ble_power_down+0xd8>)
10009432:	4798      	blx	r3
10009434:	2800      	cmp	r0, #0
10009436:	d003      	beq.n	10009440 <sms_ble_power_down+0x54>
                DBG_LOG_CONT_DEV("failed!!!");
10009438:	4823      	ldr	r0, [pc, #140]	; (100094c8 <sms_ble_power_down+0xdc>)
1000943a:	4b21      	ldr	r3, [pc, #132]	; (100094c0 <sms_ble_power_down+0xd4>)
1000943c:	4798      	blx	r3
1000943e:	e024      	b.n	1000948a <sms_ble_power_down+0x9e>
                //#pragma TBD: manage adv_stop failure
            }
            else {
                DBG_LOG_CONT_DEV("done!");
10009440:	4822      	ldr	r0, [pc, #136]	; (100094cc <sms_ble_power_down+0xe0>)
10009442:	4b1f      	ldr	r3, [pc, #124]	; (100094c0 <sms_ble_power_down+0xd4>)
10009444:	4798      	blx	r3
                ble_current_state = BLE_STATE_DISCONNECTED;
10009446:	2211      	movs	r2, #17
10009448:	4b17      	ldr	r3, [pc, #92]	; (100094a8 <sms_ble_power_down+0xbc>)
1000944a:	701a      	strb	r2, [r3, #0]
1000944c:	e01d      	b.n	1000948a <sms_ble_power_down+0x9e>
            }
            break;
            
            case BLE_STATE_PAIRED:
            DBG_LOG_DEV("[sms_ble_power_down]\t\tDevice paired... disabling interrupts & switching down sensors");
1000944e:	4819      	ldr	r0, [pc, #100]	; (100094b4 <sms_ble_power_down+0xc8>)
10009450:	4b19      	ldr	r3, [pc, #100]	; (100094b8 <sms_ble_power_down+0xcc>)
10009452:	4798      	blx	r3
10009454:	481e      	ldr	r0, [pc, #120]	; (100094d0 <sms_ble_power_down+0xe4>)
10009456:	4b1a      	ldr	r3, [pc, #104]	; (100094c0 <sms_ble_power_down+0xd4>)
10009458:	4798      	blx	r3
            
            case BLE_STATE_INDICATING:
            DBG_LOG_DEV("[sms_ble_power_down]\t\tCurrently indicating");
1000945a:	4816      	ldr	r0, [pc, #88]	; (100094b4 <sms_ble_power_down+0xc8>)
1000945c:	4b16      	ldr	r3, [pc, #88]	; (100094b8 <sms_ble_power_down+0xcc>)
1000945e:	4798      	blx	r3
10009460:	481c      	ldr	r0, [pc, #112]	; (100094d4 <sms_ble_power_down+0xe8>)
10009462:	4b17      	ldr	r3, [pc, #92]	; (100094c0 <sms_ble_power_down+0xd4>)
10009464:	4798      	blx	r3
            pressure_device.state = PRESSURE_STATE_OFF;
10009466:	2100      	movs	r1, #0
10009468:	2328      	movs	r3, #40	; 0x28
1000946a:	4a1b      	ldr	r2, [pc, #108]	; (100094d8 <sms_ble_power_down+0xec>)
1000946c:	54d1      	strb	r1, [r2, r3]
            sms_sensors_interrupt_toggle(false, false);
1000946e:	2000      	movs	r0, #0
10009470:	4b1a      	ldr	r3, [pc, #104]	; (100094dc <sms_ble_power_down+0xf0>)
10009472:	4798      	blx	r3
            //#pragma TBD: switch-off sensors to save current
            //sms_sensors_switch(false);
            
            case BLE_STATE_CONNECTED:
            DBG_LOG_DEV("[sms_ble_power_down]\t\tDevice connected... disconnecting");
10009474:	480f      	ldr	r0, [pc, #60]	; (100094b4 <sms_ble_power_down+0xc8>)
10009476:	4b10      	ldr	r3, [pc, #64]	; (100094b8 <sms_ble_power_down+0xcc>)
10009478:	4798      	blx	r3
1000947a:	4819      	ldr	r0, [pc, #100]	; (100094e0 <sms_ble_power_down+0xf4>)
1000947c:	4b10      	ldr	r3, [pc, #64]	; (100094c0 <sms_ble_power_down+0xd4>)
1000947e:	4798      	blx	r3
            at_ble_disconnect(sms_connection_handle, AT_BLE_TERMINATED_BY_USER);
10009480:	4b18      	ldr	r3, [pc, #96]	; (100094e4 <sms_ble_power_down+0xf8>)
10009482:	8818      	ldrh	r0, [r3, #0]
10009484:	2113      	movs	r1, #19
10009486:	4b18      	ldr	r3, [pc, #96]	; (100094e8 <sms_ble_power_down+0xfc>)
10009488:	4798      	blx	r3
            
            default:
            break;
        }
        
        ble_current_state = BLE_STATE_DISCONNECTED;
1000948a:	2211      	movs	r2, #17
1000948c:	4b06      	ldr	r3, [pc, #24]	; (100094a8 <sms_ble_power_down+0xbc>)
1000948e:	701a      	strb	r2, [r3, #0]
        timer2_current_mode = TIMER2_MODE_LED_SHUTDOWN;
10009490:	3a0e      	subs	r2, #14
10009492:	4b16      	ldr	r3, [pc, #88]	; (100094ec <sms_ble_power_down+0x100>)
10009494:	701a      	strb	r2, [r3, #0]
        sms_led_blink_start(SMS_LED_0_PIN);
10009496:	2016      	movs	r0, #22
10009498:	4b15      	ldr	r3, [pc, #84]	; (100094f0 <sms_ble_power_down+0x104>)
1000949a:	4798      	blx	r3
    }
}
1000949c:	bd10      	pop	{r4, pc}
1000949e:	46c0      	nop			; (mov r8, r8)
100094a0:	10013c34 	.word	0x10013c34
100094a4:	10009a1d 	.word	0x10009a1d
100094a8:	10016fe8 	.word	0x10016fe8
100094ac:	10016ece 	.word	0x10016ece
100094b0:	1000db29 	.word	0x1000db29
100094b4:	10013980 	.word	0x10013980
100094b8:	100127d9 	.word	0x100127d9
100094bc:	10013c4c 	.word	0x10013c4c
100094c0:	100126b9 	.word	0x100126b9
100094c4:	1000ec09 	.word	0x1000ec09
100094c8:	10013ca0 	.word	0x10013ca0
100094cc:	10013cac 	.word	0x10013cac
100094d0:	10013cb4 	.word	0x10013cb4
100094d4:	10013d0c 	.word	0x10013d0c
100094d8:	10016f4c 	.word	0x10016f4c
100094dc:	10009a79 	.word	0x10009a79
100094e0:	10013d38 	.word	0x10013d38
100094e4:	10016ed0 	.word	0x10016ed0
100094e8:	1000ec35 	.word	0x1000ec35
100094ec:	10016fe9 	.word	0x10016fe9
100094f0:	10009e19 	.word	0x10009e19

100094f4 <sms_ble_adv_report_fn>:
    return AT_BLE_FAILURE;
}

/* AT_BLE_ADV_REPORT (#3) */
at_ble_status_t sms_ble_adv_report_fn(void *params)
{
100094f4:	b510      	push	{r4, lr}
    at_ble_adv_report_t *adv_report = (at_ble_adv_report_t *)params;
    ble_current_state = BLE_STATE_DISCONNECTED;
100094f6:	2211      	movs	r2, #17
100094f8:	4b05      	ldr	r3, [pc, #20]	; (10009510 <sms_ble_adv_report_fn+0x1c>)
100094fa:	701a      	strb	r2, [r3, #0]
    DBG_LOG_DEV("[sms_ble_adv_report_fn]\tAdvertisement timeout...");
100094fc:	4805      	ldr	r0, [pc, #20]	; (10009514 <sms_ble_adv_report_fn+0x20>)
100094fe:	4b06      	ldr	r3, [pc, #24]	; (10009518 <sms_ble_adv_report_fn+0x24>)
10009500:	4798      	blx	r3
10009502:	4806      	ldr	r0, [pc, #24]	; (1000951c <sms_ble_adv_report_fn+0x28>)
10009504:	4b06      	ldr	r3, [pc, #24]	; (10009520 <sms_ble_adv_report_fn+0x2c>)
10009506:	4798      	blx	r3
    //DBG_LOG_DEV("- status: 0x%02x", adv_report->status);
    sms_ble_power_down();
10009508:	4b06      	ldr	r3, [pc, #24]	; (10009524 <sms_ble_adv_report_fn+0x30>)
1000950a:	4798      	blx	r3
    return AT_BLE_SUCCESS;
}
1000950c:	2000      	movs	r0, #0
1000950e:	bd10      	pop	{r4, pc}
10009510:	10016fe8 	.word	0x10016fe8
10009514:	10013980 	.word	0x10013980
10009518:	100127d9 	.word	0x100127d9
1000951c:	10013d70 	.word	0x10013d70
10009520:	100126b9 	.word	0x100126b9
10009524:	100093ed 	.word	0x100093ed

10009528 <sms_ble_connected_fn>:

/* AT_BLE_CONNECTED (#5) */
at_ble_status_t sms_ble_connected_fn(void *params)
{
10009528:	b510      	push	{r4, lr}
    if(ble_current_state == BLE_STATE_ADVERTISING) {
1000952a:	4b0a      	ldr	r3, [pc, #40]	; (10009554 <sms_ble_connected_fn+0x2c>)
1000952c:	781b      	ldrb	r3, [r3, #0]
1000952e:	2b20      	cmp	r3, #32
10009530:	d10c      	bne.n	1000954c <sms_ble_connected_fn+0x24>
        at_ble_connected_t *connected = (at_ble_connected_t *)params;
        sms_ble_conn_handle = connected->handle;
10009532:	8902      	ldrh	r2, [r0, #8]
10009534:	4b08      	ldr	r3, [pc, #32]	; (10009558 <sms_ble_connected_fn+0x30>)
10009536:	801a      	strh	r2, [r3, #0]
        ble_current_state = BLE_STATE_CONNECTED;
10009538:	2221      	movs	r2, #33	; 0x21
1000953a:	4b06      	ldr	r3, [pc, #24]	; (10009554 <sms_ble_connected_fn+0x2c>)
1000953c:	701a      	strb	r2, [r3, #0]
        DBG_LOG_DEV("[sms_ble_connected_fn]\t\tDevices connected...");
1000953e:	4807      	ldr	r0, [pc, #28]	; (1000955c <sms_ble_connected_fn+0x34>)
10009540:	4b07      	ldr	r3, [pc, #28]	; (10009560 <sms_ble_connected_fn+0x38>)
10009542:	4798      	blx	r3
10009544:	4807      	ldr	r0, [pc, #28]	; (10009564 <sms_ble_connected_fn+0x3c>)
10009546:	4b08      	ldr	r3, [pc, #32]	; (10009568 <sms_ble_connected_fn+0x40>)
10009548:	4798      	blx	r3
1000954a:	e001      	b.n	10009550 <sms_ble_connected_fn+0x28>
        //for(uint8_t i = 0; i < AT_BLE_ADDR_LEN; i++) {
            //DBG_LOG_CONT_DEV("%02x",connected->peer_addr.addr[AT_BLE_ADDR_LEN - (i+1)]);
        //}            
    }
    else {
        sms_ble_power_down();
1000954c:	4b07      	ldr	r3, [pc, #28]	; (1000956c <sms_ble_connected_fn+0x44>)
1000954e:	4798      	blx	r3
    }    
    return AT_BLE_SUCCESS;
}
10009550:	2000      	movs	r0, #0
10009552:	bd10      	pop	{r4, pc}
10009554:	10016fe8 	.word	0x10016fe8
10009558:	10016fde 	.word	0x10016fde
1000955c:	10013980 	.word	0x10013980
10009560:	100127d9 	.word	0x100127d9
10009564:	10013da4 	.word	0x10013da4
10009568:	100126b9 	.word	0x100126b9
1000956c:	100093ed 	.word	0x100093ed

10009570 <sms_ble_paired_fn>:
    return AT_BLE_SUCCESS;
}

/* AT_BLE_PAIR_DONE (#9) */
at_ble_status_t sms_ble_paired_fn(void *params)
{
10009570:	b510      	push	{r4, lr}
    if(ble_current_state == BLE_STATE_CONNECTED) {
10009572:	4b09      	ldr	r3, [pc, #36]	; (10009598 <sms_ble_paired_fn+0x28>)
10009574:	781b      	ldrb	r3, [r3, #0]
10009576:	2b21      	cmp	r3, #33	; 0x21
10009578:	d10a      	bne.n	10009590 <sms_ble_paired_fn+0x20>
        ble_current_state = BLE_STATE_PAIRED;
1000957a:	2222      	movs	r2, #34	; 0x22
1000957c:	4b06      	ldr	r3, [pc, #24]	; (10009598 <sms_ble_paired_fn+0x28>)
1000957e:	701a      	strb	r2, [r3, #0]
        at_ble_pair_done_t *pair_status = (at_ble_pair_done_t *)params;
        sms_monitor_get_states("[sms_ble_paired_fn]");
10009580:	4806      	ldr	r0, [pc, #24]	; (1000959c <sms_ble_paired_fn+0x2c>)
10009582:	4b07      	ldr	r3, [pc, #28]	; (100095a0 <sms_ble_paired_fn+0x30>)
10009584:	4798      	blx	r3
        //DBG_LOG_DEV("[sms_ble_paired_fn]\t\tDevices paired... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
        //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- authorization: 0x%02x\r\n- status: 0x%02x", pair_status->handle, pair_status->auth, pair_status->status);
        sms_sensors_switch(true, true); // ! Release sleep lock & enable buttons interrupt after reset done!
10009586:	2101      	movs	r1, #1
10009588:	2001      	movs	r0, #1
1000958a:	4b06      	ldr	r3, [pc, #24]	; (100095a4 <sms_ble_paired_fn+0x34>)
1000958c:	4798      	blx	r3
1000958e:	e001      	b.n	10009594 <sms_ble_paired_fn+0x24>
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
    }
    else {
        sms_ble_power_down();
10009590:	4b05      	ldr	r3, [pc, #20]	; (100095a8 <sms_ble_paired_fn+0x38>)
10009592:	4798      	blx	r3
    }        
    return AT_BLE_SUCCESS;
}
10009594:	2000      	movs	r0, #0
10009596:	bd10      	pop	{r4, pc}
10009598:	10016fe8 	.word	0x10016fe8
1000959c:	10013dd4 	.word	0x10013dd4
100095a0:	10009a1d 	.word	0x10009a1d
100095a4:	10009af1 	.word	0x10009af1
100095a8:	100093ed 	.word	0x100093ed

100095ac <sms_ble_advertise>:
        sms_led_blink_start(SMS_LED_0_PIN);
    }
}

at_ble_status_t sms_ble_advertise(void)
{
100095ac:	b510      	push	{r4, lr}
100095ae:	b084      	sub	sp, #16
    at_ble_status_t status = AT_BLE_FAILURE;
    ble_current_state = BLE_STATE_ADVERTISING;
100095b0:	2220      	movs	r2, #32
100095b2:	4b17      	ldr	r3, [pc, #92]	; (10009610 <sms_ble_advertise+0x64>)
100095b4:	701a      	strb	r2, [r3, #0]

    /* Set the advertisement data */
    if((status = ble_advertisement_data_set()) != AT_BLE_SUCCESS) {
100095b6:	4b17      	ldr	r3, [pc, #92]	; (10009614 <sms_ble_advertise+0x68>)
100095b8:	4798      	blx	r3
100095ba:	1e04      	subs	r4, r0, #0
100095bc:	d007      	beq.n	100095ce <sms_ble_advertise+0x22>
        DBG_LOG("[sms_ble_advertise]\tAdvertisement data set failed!");
100095be:	4816      	ldr	r0, [pc, #88]	; (10009618 <sms_ble_advertise+0x6c>)
100095c0:	4b16      	ldr	r3, [pc, #88]	; (1000961c <sms_ble_advertise+0x70>)
100095c2:	4798      	blx	r3
100095c4:	4816      	ldr	r0, [pc, #88]	; (10009620 <sms_ble_advertise+0x74>)
100095c6:	4b17      	ldr	r3, [pc, #92]	; (10009624 <sms_ble_advertise+0x78>)
100095c8:	4798      	blx	r3
        return status;
100095ca:	0020      	movs	r0, r4
100095cc:	e01e      	b.n	1000960c <sms_ble_advertise+0x60>
    }

    /* Start of advertisement */
    if((status = at_ble_adv_start(AT_BLE_ADV_TYPE_UNDIRECTED, AT_BLE_ADV_GEN_DISCOVERABLE, NULL, AT_BLE_ADV_FP_ANY, APP_FAST_ADV, APP_ADV_TIMEOUT, 0)) == AT_BLE_SUCCESS)
100095ce:	2300      	movs	r3, #0
100095d0:	9302      	str	r3, [sp, #8]
100095d2:	4b15      	ldr	r3, [pc, #84]	; (10009628 <sms_ble_advertise+0x7c>)
100095d4:	9301      	str	r3, [sp, #4]
100095d6:	23c8      	movs	r3, #200	; 0xc8
100095d8:	00db      	lsls	r3, r3, #3
100095da:	9300      	str	r3, [sp, #0]
100095dc:	2300      	movs	r3, #0
100095de:	2200      	movs	r2, #0
100095e0:	2101      	movs	r1, #1
100095e2:	2000      	movs	r0, #0
100095e4:	4c11      	ldr	r4, [pc, #68]	; (1000962c <sms_ble_advertise+0x80>)
100095e6:	47a0      	blx	r4
100095e8:	1e04      	subs	r4, r0, #0
100095ea:	d107      	bne.n	100095fc <sms_ble_advertise+0x50>
    {
        DBG_LOG_DEV("[sms_ble_advertise]\t\tBLE Started Advertisement");
100095ec:	480a      	ldr	r0, [pc, #40]	; (10009618 <sms_ble_advertise+0x6c>)
100095ee:	4b0b      	ldr	r3, [pc, #44]	; (1000961c <sms_ble_advertise+0x70>)
100095f0:	4798      	blx	r3
100095f2:	480f      	ldr	r0, [pc, #60]	; (10009630 <sms_ble_advertise+0x84>)
100095f4:	4b0b      	ldr	r3, [pc, #44]	; (10009624 <sms_ble_advertise+0x78>)
100095f6:	4798      	blx	r3
        return AT_BLE_SUCCESS;
100095f8:	2000      	movs	r0, #0
100095fa:	e007      	b.n	1000960c <sms_ble_advertise+0x60>
    } 
    else {
        DBG_LOG("[sms_service_advertise]\tBLE Advertisement start failed: reason 0x%x", status);
100095fc:	4806      	ldr	r0, [pc, #24]	; (10009618 <sms_ble_advertise+0x6c>)
100095fe:	4b07      	ldr	r3, [pc, #28]	; (1000961c <sms_ble_advertise+0x70>)
10009600:	4798      	blx	r3
10009602:	0021      	movs	r1, r4
10009604:	480b      	ldr	r0, [pc, #44]	; (10009634 <sms_ble_advertise+0x88>)
10009606:	4b07      	ldr	r3, [pc, #28]	; (10009624 <sms_ble_advertise+0x78>)
10009608:	4798      	blx	r3
    }
    return AT_BLE_FAILURE;
1000960a:	20e2      	movs	r0, #226	; 0xe2
}
1000960c:	b004      	add	sp, #16
1000960e:	bd10      	pop	{r4, pc}
10009610:	10016fe8 	.word	0x10016fe8
10009614:	1000d165 	.word	0x1000d165
10009618:	10013980 	.word	0x10013980
1000961c:	100127d9 	.word	0x100127d9
10009620:	10013de8 	.word	0x10013de8
10009624:	100126b9 	.word	0x100126b9
10009628:	0000028f 	.word	0x0000028f
1000962c:	1000eacd 	.word	0x1000eacd
10009630:	10013e1c 	.word	0x10013e1c
10009634:	10013e4c 	.word	0x10013e4c

10009638 <sms_ble_disconnected_fn>:
    return AT_BLE_SUCCESS;
}

/* AT_BLE_DISCONNECTED (#6) */
at_ble_status_t sms_ble_disconnected_fn(void *params)
{
10009638:	b530      	push	{r4, r5, lr}
1000963a:	b083      	sub	sp, #12
1000963c:	0005      	movs	r5, r0
    at_ble_disconnected_t *disconnect = (at_ble_disconnected_t *)params;
    if(ble_current_state == BLE_STATE_PAIRED) {
1000963e:	4b1c      	ldr	r3, [pc, #112]	; (100096b0 <sms_ble_disconnected_fn+0x78>)
10009640:	781b      	ldrb	r3, [r3, #0]
10009642:	2b22      	cmp	r3, #34	; 0x22
10009644:	d10a      	bne.n	1000965c <sms_ble_disconnected_fn+0x24>
        pressure_device.state = PRESSURE_STATE_OFF;
10009646:	2100      	movs	r1, #0
10009648:	3306      	adds	r3, #6
1000964a:	4a1a      	ldr	r2, [pc, #104]	; (100096b4 <sms_ble_disconnected_fn+0x7c>)
1000964c:	54d1      	strb	r1, [r2, r3]
        sms_sensors_interrupt_toggle(false, false);
1000964e:	2000      	movs	r0, #0
10009650:	4b19      	ldr	r3, [pc, #100]	; (100096b8 <sms_ble_disconnected_fn+0x80>)
10009652:	4798      	blx	r3
        sms_sensors_switch(false, false);
10009654:	2100      	movs	r1, #0
10009656:	2000      	movs	r0, #0
10009658:	4b18      	ldr	r3, [pc, #96]	; (100096bc <sms_ble_disconnected_fn+0x84>)
1000965a:	4798      	blx	r3
    }
    ble_current_state = BLE_STATE_DISCONNECTED;
1000965c:	4c14      	ldr	r4, [pc, #80]	; (100096b0 <sms_ble_disconnected_fn+0x78>)
1000965e:	2311      	movs	r3, #17
10009660:	7023      	strb	r3, [r4, #0]
    DBG_LOG_DEV("[sms_ble_disconnected_fn]\tPeer disconnected... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
10009662:	4817      	ldr	r0, [pc, #92]	; (100096c0 <sms_ble_disconnected_fn+0x88>)
10009664:	4b17      	ldr	r3, [pc, #92]	; (100096c4 <sms_ble_disconnected_fn+0x8c>)
10009666:	4798      	blx	r3
10009668:	7822      	ldrb	r2, [r4, #0]
1000966a:	b2d2      	uxtb	r2, r2
1000966c:	4b16      	ldr	r3, [pc, #88]	; (100096c8 <sms_ble_disconnected_fn+0x90>)
1000966e:	781b      	ldrb	r3, [r3, #0]
10009670:	b2db      	uxtb	r3, r3
10009672:	4916      	ldr	r1, [pc, #88]	; (100096cc <sms_ble_disconnected_fn+0x94>)
10009674:	7808      	ldrb	r0, [r1, #0]
10009676:	4916      	ldr	r1, [pc, #88]	; (100096d0 <sms_ble_disconnected_fn+0x98>)
10009678:	7849      	ldrb	r1, [r1, #1]
1000967a:	9000      	str	r0, [sp, #0]
1000967c:	4815      	ldr	r0, [pc, #84]	; (100096d4 <sms_ble_disconnected_fn+0x9c>)
1000967e:	4c16      	ldr	r4, [pc, #88]	; (100096d8 <sms_ble_disconnected_fn+0xa0>)
10009680:	47a0      	blx	r4
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- reason: 0x%02x", disconnect->handle, disconnect->reason);
    switch(disconnect->reason) {
10009682:	78ab      	ldrb	r3, [r5, #2]
10009684:	2b1a      	cmp	r3, #26
10009686:	d00b      	beq.n	100096a0 <sms_ble_disconnected_fn+0x68>
10009688:	b2da      	uxtb	r2, r3
1000968a:	2a1a      	cmp	r2, #26
1000968c:	d804      	bhi.n	10009698 <sms_ble_disconnected_fn+0x60>
1000968e:	2b05      	cmp	r3, #5
10009690:	d006      	beq.n	100096a0 <sms_ble_disconnected_fn+0x68>
10009692:	2b08      	cmp	r3, #8
10009694:	d107      	bne.n	100096a6 <sms_ble_disconnected_fn+0x6e>
10009696:	e003      	b.n	100096a0 <sms_ble_disconnected_fn+0x68>
10009698:	2b29      	cmp	r3, #41	; 0x29
1000969a:	d001      	beq.n	100096a0 <sms_ble_disconnected_fn+0x68>
1000969c:	2b3b      	cmp	r3, #59	; 0x3b
1000969e:	d102      	bne.n	100096a6 <sms_ble_disconnected_fn+0x6e>
        case AT_BLE_AUTH_FAILURE: //0x05
        case AT_BLE_SUPERVISION_TIMEOUT: //0x08
        case AT_BLE_UNSUPPORTED_REMOTE_FEATURE: // 0x1A
        case AT_BLE_PAIRING_WITH_UNIT_KEY_NOT_SUP: // 0x29
        case AT_BLE_UNACCEPTABLE_INTERVAL: // 0x3B
        sms_ble_advertise();
100096a0:	4b0e      	ldr	r3, [pc, #56]	; (100096dc <sms_ble_disconnected_fn+0xa4>)
100096a2:	4798      	blx	r3
        break;
100096a4:	e001      	b.n	100096aa <sms_ble_disconnected_fn+0x72>
        case AT_BLE_TERMINATED_BY_USER: // 0x13
        case AT_BLE_REMOTE_DEV_TERM_LOW_RESOURCES: //0x14
        case AT_BLE_REMOTE_DEV_POWER_OFF: //0x15
        case AT_BLE_CON_TERM_BY_LOCAL_HOST: //0x16
        default:
        sms_ble_power_down();
100096a6:	4b0e      	ldr	r3, [pc, #56]	; (100096e0 <sms_ble_disconnected_fn+0xa8>)
100096a8:	4798      	blx	r3
        break;
    }
    
    return AT_BLE_SUCCESS;
}
100096aa:	2000      	movs	r0, #0
100096ac:	b003      	add	sp, #12
100096ae:	bd30      	pop	{r4, r5, pc}
100096b0:	10016fe8 	.word	0x10016fe8
100096b4:	10016f4c 	.word	0x10016f4c
100096b8:	10009a79 	.word	0x10009a79
100096bc:	10009af1 	.word	0x10009af1
100096c0:	10013980 	.word	0x10013980
100096c4:	100127d9 	.word	0x100127d9
100096c8:	10016ecc 	.word	0x10016ecc
100096cc:	10016fe9 	.word	0x10016fe9
100096d0:	10016ed8 	.word	0x10016ed8
100096d4:	10013e90 	.word	0x10013e90
100096d8:	100126b9 	.word	0x100126b9
100096dc:	100095ad 	.word	0x100095ad
100096e0:	100093ed 	.word	0x100093ed

100096e4 <sms_ble_primary_service_define>:
    return status;
}


at_ble_status_t sms_ble_primary_service_define(gatt_service_handler_t *service)
{
100096e4:	b510      	push	{r4, lr}
100096e6:	b082      	sub	sp, #8
    //DBG_LOG_DEV("[sms_ble_primary_service_define]\n\r  defining primary service\r\n- uuid: 0x%02x\r\n- handle: 0x%02x\r\n- char uuid: 0x%02x%02x\r\n- char init value: %d", (unsigned int)service->serv_uuid.uuid, service->serv_handle, service->serv_chars.uuid.uuid[1], service->serv_chars.uuid.uuid[0], service->serv_chars.value_init_len);
    return(at_ble_primary_service_define(&service->serv_uuid, &service->serv_handle, NULL, 0, &service->serv_chars, 1));
100096e8:	0001      	movs	r1, r0
100096ea:	3112      	adds	r1, #18
100096ec:	2301      	movs	r3, #1
100096ee:	9301      	str	r3, [sp, #4]
100096f0:	0003      	movs	r3, r0
100096f2:	3314      	adds	r3, #20
100096f4:	9300      	str	r3, [sp, #0]
100096f6:	2300      	movs	r3, #0
100096f8:	2200      	movs	r2, #0
100096fa:	4c02      	ldr	r4, [pc, #8]	; (10009704 <sms_ble_primary_service_define+0x20>)
100096fc:	47a0      	blx	r4
}
100096fe:	b002      	add	sp, #8
10009700:	bd10      	pop	{r4, pc}
10009702:	46c0      	nop			; (mov r8, r8)
10009704:	1000f391 	.word	0x1000f391

10009708 <sms_ble_service_init>:


void sms_ble_service_init(enum sms_ble_serv_type type, gatt_service_handler_t *service, uint8_t *value)
{
10009708:	b5f0      	push	{r4, r5, r6, r7, lr}
1000970a:	464f      	mov	r7, r9
1000970c:	4646      	mov	r6, r8
1000970e:	b4c0      	push	{r6, r7}
10009710:	b083      	sub	sp, #12
10009712:	4694      	mov	ip, r2
    at_ble_handle_t handle = 0;
    uint8_t uuid[16] = {0};
    uint8_t char_size = 0;
    switch(type) {
10009714:	2801      	cmp	r0, #1
10009716:	d010      	beq.n	1000973a <sms_ble_service_init+0x32>
10009718:	2800      	cmp	r0, #0
1000971a:	d002      	beq.n	10009722 <sms_ble_service_init+0x1a>
1000971c:	2802      	cmp	r0, #2
1000971e:	d019      	beq.n	10009754 <sms_ble_service_init+0x4c>
10009720:	e023      	b.n	1000976a <sms_ble_service_init+0x62>
        uuid[9] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3 >> 8) & 0xFF);
        uuid[10] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3 >> 16) & 0xFF);
        uuid[11] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3 >> 24) & 0xFF);
        uuid[12] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 16) & 0xFF);
10009722:	24bb      	movs	r4, #187	; 0xbb
        uuid[6] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[7] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[8] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3) & 0xFF);
        uuid[9] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3 >> 8) & 0xFF);
        uuid[10] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3 >> 16) & 0xFF);
        uuid[11] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3 >> 24) & 0xFF);
10009724:	2550      	movs	r5, #80	; 0x50
        uuid[5] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 8) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[7] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[8] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3) & 0xFF);
        uuid[9] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3 >> 8) & 0xFF);
        uuid[10] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3 >> 16) & 0xFF);
10009726:	2630      	movs	r6, #48	; 0x30
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 8) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[7] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
10009728:	275a      	movs	r7, #90	; 0x5a
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 8) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 16) & 0xFF);
1000972a:	20be      	movs	r0, #190	; 0xbe
        case BLE_SERV_BUTTON:
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
1000972c:	231c      	movs	r3, #28
1000972e:	4698      	mov	r8, r3
    switch(type) {
        case BLE_SERV_BUTTON:
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
10009730:	333b      	adds	r3, #59	; 0x3b
10009732:	4699      	mov	r9, r3
        uuid[11] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3 >> 24) & 0xFF);
        uuid[12] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 24) & 0xFF);
        char_size = 1;
10009734:	3b56      	subs	r3, #86	; 0x56
10009736:	9301      	str	r3, [sp, #4]
10009738:	e020      	b.n	1000977c <sms_ble_service_init+0x74>
        uuid[9] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3 >> 8) & 0xFF);
        uuid[10] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3 >> 16) & 0xFF);
        uuid[11] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3 >> 24) & 0xFF);
        uuid[12] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 16) & 0xFF);
1000973a:	24ee      	movs	r4, #238	; 0xee
        uuid[6] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[7] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[8] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3) & 0xFF);
        uuid[9] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3 >> 8) & 0xFF);
        uuid[10] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3 >> 16) & 0xFF);
        uuid[11] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3 >> 24) & 0xFF);
1000973c:	2550      	movs	r5, #80	; 0x50
        uuid[5] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 8) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[7] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[8] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3) & 0xFF);
        uuid[9] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3 >> 8) & 0xFF);
        uuid[10] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3 >> 16) & 0xFF);
1000973e:	2630      	movs	r6, #48	; 0x30
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 8) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[7] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 24) & 0xFF);
10009740:	275a      	movs	r7, #90	; 0x5a
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 8) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 16) & 0xFF);
10009742:	20be      	movs	r0, #190	; 0xbe
        case BLE_SERV_PRESSURE:
        handle = 2;
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
10009744:	231c      	movs	r3, #28
10009746:	4698      	mov	r8, r3
        
        case BLE_SERV_PRESSURE:
        handle = 2;
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
10009748:	333b      	adds	r3, #59	; 0x3b
1000974a:	4699      	mov	r9, r3
        uuid[11] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3 >> 24) & 0xFF);
        uuid[12] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 24) & 0xFF);
        char_size = 8;
1000974c:	3b4f      	subs	r3, #79	; 0x4f
1000974e:	9301      	str	r3, [sp, #4]
        uuid[15] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 24) & 0xFF);
        char_size = 1;
        break;
        
        case BLE_SERV_PRESSURE:
        handle = 2;
10009750:	3b06      	subs	r3, #6
        uuid[12] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 24) & 0xFF);
        char_size = 8;
        break;
10009752:	e013      	b.n	1000977c <sms_ble_service_init+0x74>


void sms_ble_service_init(enum sms_ble_serv_type type, gatt_service_handler_t *service, uint8_t *value)
{
    at_ble_handle_t handle = 0;
    uint8_t uuid[16] = {0};
10009754:	2400      	movs	r4, #0
10009756:	2500      	movs	r5, #0
10009758:	2600      	movs	r6, #0
1000975a:	2700      	movs	r7, #0
1000975c:	2000      	movs	r0, #0
1000975e:	2300      	movs	r3, #0
10009760:	4698      	mov	r8, r3
10009762:	4699      	mov	r9, r3
    uint8_t char_size = 0;
10009764:	9301      	str	r3, [sp, #4]
        uuid[15] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 24) & 0xFF);
        char_size = 8;
        break;
        
        case BLE_SERV_IMU:
        handle = 3;
10009766:	3303      	adds	r3, #3
        break;
10009768:	e008      	b.n	1000977c <sms_ble_service_init+0x74>


void sms_ble_service_init(enum sms_ble_serv_type type, gatt_service_handler_t *service, uint8_t *value)
{
    at_ble_handle_t handle = 0;
    uint8_t uuid[16] = {0};
1000976a:	2400      	movs	r4, #0
1000976c:	2500      	movs	r5, #0
1000976e:	2600      	movs	r6, #0
10009770:	2700      	movs	r7, #0
10009772:	2000      	movs	r0, #0
10009774:	2300      	movs	r3, #0
10009776:	4698      	mov	r8, r3
10009778:	4699      	mov	r9, r3
    uint8_t char_size = 0;
1000977a:	9301      	str	r3, [sp, #4]
        
        default:
        break;
    }
    //SMS button service characteristic
    service->serv_handle = handle;
1000977c:	824b      	strh	r3, [r1, #18]
    service->serv_uuid.type = AT_BLE_UUID_128;
1000977e:	2302      	movs	r3, #2
10009780:	700b      	strb	r3, [r1, #0]
    service->serv_uuid.uuid[0] = uuid[0];
10009782:	2300      	movs	r3, #0
10009784:	704b      	strb	r3, [r1, #1]
    service->serv_uuid.uuid[1] = uuid[1];
10009786:	708b      	strb	r3, [r1, #2]
    service->serv_uuid.uuid[2] = uuid[2];
10009788:	464a      	mov	r2, r9
1000978a:	70ca      	strb	r2, [r1, #3]
    service->serv_uuid.uuid[3] = uuid[3];
1000978c:	4642      	mov	r2, r8
1000978e:	710a      	strb	r2, [r1, #4]
    service->serv_uuid.uuid[4] = uuid[4];
10009790:	714b      	strb	r3, [r1, #5]
    service->serv_uuid.uuid[5] = uuid[5];
10009792:	718b      	strb	r3, [r1, #6]
    service->serv_uuid.uuid[6] = uuid[6];
10009794:	71c8      	strb	r0, [r1, #7]
    service->serv_uuid.uuid[7] = uuid[7];
10009796:	720f      	strb	r7, [r1, #8]
    service->serv_uuid.uuid[8] = uuid[8];
10009798:	724b      	strb	r3, [r1, #9]
    service->serv_uuid.uuid[9] = uuid[9];
1000979a:	728b      	strb	r3, [r1, #10]
    service->serv_uuid.uuid[10] = uuid[10];
1000979c:	72ce      	strb	r6, [r1, #11]
    service->serv_uuid.uuid[11] = uuid[11];
1000979e:	730d      	strb	r5, [r1, #12]
    service->serv_uuid.uuid[12] = uuid[12];
100097a0:	734b      	strb	r3, [r1, #13]
    service->serv_uuid.uuid[13] = uuid[13];
100097a2:	738b      	strb	r3, [r1, #14]
    service->serv_uuid.uuid[14] = uuid[14];
100097a4:	73cc      	strb	r4, [r1, #15]
    service->serv_uuid.uuid[15] = uuid[15];
100097a6:	740c      	strb	r4, [r1, #16]
    
    #   if SMS_SENDING_WITH_ACK == true
    service->serv_chars.properties = (AT_BLE_CHAR_READ | AT_BLE_CHAR_INDICATE); // properties
100097a8:	2422      	movs	r4, #34	; 0x22
100097aa:	850c      	strh	r4, [r1, #40]	; 0x28
    #   else
    service->serv_chars.properties = (AT_BLE_CHAR_READ | AT_BLE_CHAR_NOTIFY); // properties
    #   endif
    service->serv_chars.init_value = value; // value
100097ac:	4662      	mov	r2, ip
100097ae:	62ca      	str	r2, [r1, #44]	; 0x2c
    service->serv_chars.value_init_len = char_size * sizeof(uint8_t);
100097b0:	466a      	mov	r2, sp
100097b2:	8892      	ldrh	r2, [r2, #4]
100097b4:	860a      	strh	r2, [r1, #48]	; 0x30
    service->serv_chars.value_max_len = char_size * sizeof(uint8_t);
100097b6:	864a      	strh	r2, [r1, #50]	; 0x32
    service->serv_chars.value_permissions = (AT_BLE_ATTR_READABLE_NO_AUTHN_NO_AUTHR | AT_BLE_ATTR_WRITABLE_NO_AUTHN_NO_AUTHR); // permissions
100097b8:	2011      	movs	r0, #17
100097ba:	2234      	movs	r2, #52	; 0x34
100097bc:	5488      	strb	r0, [r1, r2]
    service->serv_chars.user_desc = NULL; //user defined name
100097be:	638b      	str	r3, [r1, #56]	; 0x38
    service->serv_chars.user_desc_len = 0;
100097c0:	2200      	movs	r2, #0
100097c2:	878b      	strh	r3, [r1, #60]	; 0x3c
    service->serv_chars.user_desc_max_len = 0;
100097c4:	87cb      	strh	r3, [r1, #62]	; 0x3e
    service->serv_chars.user_desc_permissions = AT_BLE_ATTR_NO_PERMISSIONS; // user description permissions
100097c6:	3033      	adds	r0, #51	; 0x33
100097c8:	540a      	strb	r2, [r1, r0]
    service->serv_chars.client_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS; // client config permissions
100097ca:	3001      	adds	r0, #1
100097cc:	540a      	strb	r2, [r1, r0]
    service->serv_chars.server_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS; // server config permissions
100097ce:	3001      	adds	r0, #1
100097d0:	540a      	strb	r2, [r1, r0]
    service->serv_chars.user_desc_handle = 0; // user description handles
100097d2:	2248      	movs	r2, #72	; 0x48
100097d4:	528b      	strh	r3, [r1, r2]
    service->serv_chars.client_config_handle = 0; // client config handles
100097d6:	3202      	adds	r2, #2
100097d8:	528b      	strh	r3, [r1, r2]
    service->serv_chars.server_config_handle = 0; // server config handles
100097da:	3202      	adds	r2, #2
100097dc:	528b      	strh	r3, [r1, r2]
    
    service->serv_chars.presentation_format = NULL; //presentation format
100097de:	640b      	str	r3, [r1, #64]	; 0x40
100097e0:	b003      	add	sp, #12
100097e2:	bc0c      	pop	{r2, r3}
100097e4:	4690      	mov	r8, r2
100097e6:	4699      	mov	r9, r3
100097e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100097ea:	46c0      	nop			; (mov r8, r8)

100097ec <sms_button_bt0_callback>:
        gpio_disable_callback(btn1_instance.gpio_pin);
    }
}
/* Callbacks --> sending interrupt message to platform */
void sms_button_bt0_callback(void)
{
100097ec:	b510      	push	{r4, lr}
    //gpio_disable_callback(SMS_BTN_0_PIN);
    sms_current_interrupt.source = INT_BTN0;
100097ee:	2201      	movs	r2, #1
100097f0:	4b04      	ldr	r3, [pc, #16]	; (10009804 <sms_button_bt0_callback+0x18>)
100097f2:	701a      	strb	r2, [r3, #0]
    send_plf_int_msg_ind(btn0_instance.gpio_pin, GPIO_CALLBACK_RISING, NULL, 0);
100097f4:	4b04      	ldr	r3, [pc, #16]	; (10009808 <sms_button_bt0_callback+0x1c>)
100097f6:	7858      	ldrb	r0, [r3, #1]
100097f8:	2300      	movs	r3, #0
100097fa:	2200      	movs	r2, #0
100097fc:	2102      	movs	r1, #2
100097fe:	4c03      	ldr	r4, [pc, #12]	; (1000980c <sms_button_bt0_callback+0x20>)
10009800:	47a0      	blx	r4
}
10009802:	bd10      	pop	{r4, pc}
10009804:	10016fd0 	.word	0x10016fd0
10009808:	10016ec8 	.word	0x10016ec8
1000980c:	1000d85d 	.word	0x1000d85d

10009810 <sms_button_bt1_callback>:
void sms_button_bt1_callback(void)
{
10009810:	b510      	push	{r4, lr}
    //gpio_disable_callback(SMS_BTN_1_PIN);
    sms_current_interrupt.source = INT_BTN1;
10009812:	2202      	movs	r2, #2
10009814:	4b04      	ldr	r3, [pc, #16]	; (10009828 <sms_button_bt1_callback+0x18>)
10009816:	701a      	strb	r2, [r3, #0]
    send_plf_int_msg_ind(btn1_instance.gpio_pin, GPIO_CALLBACK_RISING, NULL, 0);
10009818:	4b04      	ldr	r3, [pc, #16]	; (1000982c <sms_button_bt1_callback+0x1c>)
1000981a:	7858      	ldrb	r0, [r3, #1]
1000981c:	2300      	movs	r3, #0
1000981e:	2200      	movs	r2, #0
10009820:	2102      	movs	r1, #2
10009822:	4c03      	ldr	r4, [pc, #12]	; (10009830 <sms_button_bt1_callback+0x20>)
10009824:	47a0      	blx	r4
}
10009826:	bd10      	pop	{r4, pc}
10009828:	10016fd0 	.word	0x10016fd0
1000982c:	10016ed4 	.word	0x10016ed4
10009830:	1000d85d 	.word	0x1000d85d

10009834 <sms_button_configure_gpio>:
/* Callback functions --> doing things                                  */
/************************************************************************/

/* Initialize gpio for button inputs */
void sms_button_configure_gpio(void)
{
10009834:	b510      	push	{r4, lr}
10009836:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;

    /* Button0 @ PIN_AO_GPIO_0 */
    gpio_get_config_defaults(&config_gpio_pin);
10009838:	ac01      	add	r4, sp, #4
1000983a:	0020      	movs	r0, r4
1000983c:	4b20      	ldr	r3, [pc, #128]	; (100098c0 <sms_button_configure_gpio+0x8c>)
1000983e:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
10009840:	2300      	movs	r3, #0
10009842:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
10009844:	3302      	adds	r3, #2
10009846:	7063      	strb	r3, [r4, #1]
    config_gpio_pin.aon_wakeup = true;
10009848:	3b01      	subs	r3, #1
1000984a:	70e3      	strb	r3, [r4, #3]
    if(gpio_pin_set_config(btn0_instance.gpio_pin, &config_gpio_pin) != STATUS_OK) {
1000984c:	4b1d      	ldr	r3, [pc, #116]	; (100098c4 <sms_button_configure_gpio+0x90>)
1000984e:	7858      	ldrb	r0, [r3, #1]
10009850:	0021      	movs	r1, r4
10009852:	4b1d      	ldr	r3, [pc, #116]	; (100098c8 <sms_button_configure_gpio+0x94>)
10009854:	4798      	blx	r3
10009856:	2800      	cmp	r0, #0
10009858:	d005      	beq.n	10009866 <sms_button_configure_gpio+0x32>
        DBG_LOG_DEV("[sms_button_configure]\tproblem while setting up button0");
1000985a:	481c      	ldr	r0, [pc, #112]	; (100098cc <sms_button_configure_gpio+0x98>)
1000985c:	4b1c      	ldr	r3, [pc, #112]	; (100098d0 <sms_button_configure_gpio+0x9c>)
1000985e:	4798      	blx	r3
10009860:	481c      	ldr	r0, [pc, #112]	; (100098d4 <sms_button_configure_gpio+0xa0>)
10009862:	4b1d      	ldr	r3, [pc, #116]	; (100098d8 <sms_button_configure_gpio+0xa4>)
10009864:	4798      	blx	r3
    }
    
    /* Button1 @ PIN_AO_GPIO_2 */
    gpio_get_config_defaults(&config_gpio_pin);
10009866:	ac01      	add	r4, sp, #4
10009868:	0020      	movs	r0, r4
1000986a:	4b15      	ldr	r3, [pc, #84]	; (100098c0 <sms_button_configure_gpio+0x8c>)
1000986c:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
1000986e:	2300      	movs	r3, #0
10009870:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
10009872:	3302      	adds	r3, #2
10009874:	7063      	strb	r3, [r4, #1]
    config_gpio_pin.aon_wakeup = true;
10009876:	3b01      	subs	r3, #1
10009878:	70e3      	strb	r3, [r4, #3]
    if(gpio_pin_set_config(btn1_instance.gpio_pin, &config_gpio_pin) != STATUS_OK) {
1000987a:	4b18      	ldr	r3, [pc, #96]	; (100098dc <sms_button_configure_gpio+0xa8>)
1000987c:	7858      	ldrb	r0, [r3, #1]
1000987e:	0021      	movs	r1, r4
10009880:	4b11      	ldr	r3, [pc, #68]	; (100098c8 <sms_button_configure_gpio+0x94>)
10009882:	4798      	blx	r3
10009884:	2800      	cmp	r0, #0
10009886:	d005      	beq.n	10009894 <sms_button_configure_gpio+0x60>
        DBG_LOG("[sms_button_configure]\tProblem while setting up button1");
10009888:	4810      	ldr	r0, [pc, #64]	; (100098cc <sms_button_configure_gpio+0x98>)
1000988a:	4b11      	ldr	r3, [pc, #68]	; (100098d0 <sms_button_configure_gpio+0x9c>)
1000988c:	4798      	blx	r3
1000988e:	4814      	ldr	r0, [pc, #80]	; (100098e0 <sms_button_configure_gpio+0xac>)
10009890:	4b11      	ldr	r3, [pc, #68]	; (100098d8 <sms_button_configure_gpio+0xa4>)
10009892:	4798      	blx	r3
    }

    /* Button 0 on SAMB11 XPLAINED */
    gpio_get_config_defaults(&config_gpio_pin);
10009894:	ac01      	add	r4, sp, #4
10009896:	0020      	movs	r0, r4
10009898:	4b09      	ldr	r3, [pc, #36]	; (100098c0 <sms_button_configure_gpio+0x8c>)
1000989a:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
1000989c:	2300      	movs	r3, #0
1000989e:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_NONE;
100098a0:	7063      	strb	r3, [r4, #1]
    if(gpio_pin_set_config(BUTTON_0_PIN, &config_gpio_pin) != STATUS_OK) {
100098a2:	0021      	movs	r1, r4
100098a4:	2017      	movs	r0, #23
100098a6:	4b08      	ldr	r3, [pc, #32]	; (100098c8 <sms_button_configure_gpio+0x94>)
100098a8:	4798      	blx	r3
100098aa:	2800      	cmp	r0, #0
100098ac:	d005      	beq.n	100098ba <sms_button_configure_gpio+0x86>
        DBG_LOG("[sms_button_configure]\tProblem while setting up XPLAINED user button");
100098ae:	4807      	ldr	r0, [pc, #28]	; (100098cc <sms_button_configure_gpio+0x98>)
100098b0:	4b07      	ldr	r3, [pc, #28]	; (100098d0 <sms_button_configure_gpio+0x9c>)
100098b2:	4798      	blx	r3
100098b4:	480b      	ldr	r0, [pc, #44]	; (100098e4 <sms_button_configure_gpio+0xb0>)
100098b6:	4b08      	ldr	r3, [pc, #32]	; (100098d8 <sms_button_configure_gpio+0xa4>)
100098b8:	4798      	blx	r3
    }
}
100098ba:	b002      	add	sp, #8
100098bc:	bd10      	pop	{r4, pc}
100098be:	46c0      	nop			; (mov r8, r8)
100098c0:	1000a7e9 	.word	0x1000a7e9
100098c4:	10016ec8 	.word	0x10016ec8
100098c8:	1000a7f9 	.word	0x1000a7f9
100098cc:	10013980 	.word	0x10013980
100098d0:	100127d9 	.word	0x100127d9
100098d4:	10013f64 	.word	0x10013f64
100098d8:	100126b9 	.word	0x100126b9
100098dc:	10016ed4 	.word	0x10016ed4
100098e0:	10013f9c 	.word	0x10013f9c
100098e4:	10013fd4 	.word	0x10013fd4

100098e8 <sms_button_register_callbacks>:

/* Register button input callbacks */
void sms_button_register_callbacks(void)
{
100098e8:	b510      	push	{r4, lr}
    /* Button0 callback */
    gpio_register_callback(btn0_instance.gpio_pin, sms_button_bt0_callback, GPIO_CALLBACK_RISING);
100098ea:	4b06      	ldr	r3, [pc, #24]	; (10009904 <sms_button_register_callbacks+0x1c>)
100098ec:	7858      	ldrb	r0, [r3, #1]
100098ee:	2202      	movs	r2, #2
100098f0:	4905      	ldr	r1, [pc, #20]	; (10009908 <sms_button_register_callbacks+0x20>)
100098f2:	4c06      	ldr	r4, [pc, #24]	; (1000990c <sms_button_register_callbacks+0x24>)
100098f4:	47a0      	blx	r4
    //gpio_enable_callback(SMS_BTN_0_PIN);
    
    /* Button1 callback */
    gpio_register_callback(btn1_instance.gpio_pin, sms_button_bt1_callback, GPIO_CALLBACK_RISING);
100098f6:	4b06      	ldr	r3, [pc, #24]	; (10009910 <sms_button_register_callbacks+0x28>)
100098f8:	7858      	ldrb	r0, [r3, #1]
100098fa:	2202      	movs	r2, #2
100098fc:	4905      	ldr	r1, [pc, #20]	; (10009914 <sms_button_register_callbacks+0x2c>)
100098fe:	47a0      	blx	r4
    //gpio_enable_callback(SMS_BTN_1_PIN);
    
    /* User button callback */
}
10009900:	bd10      	pop	{r4, pc}
10009902:	46c0      	nop			; (mov r8, r8)
10009904:	10016ec8 	.word	0x10016ec8
10009908:	100097ed 	.word	0x100097ed
1000990c:	1000ab89 	.word	0x1000ab89
10009910:	10016ed4 	.word	0x10016ed4
10009914:	10009811 	.word	0x10009811

10009918 <sms_button_toggle_interrupt>:
    else return BUTTON_STATE_NONE;
}

/* En- or disable button interrupts */
void sms_button_toggle_interrupt(enum sms_btn_int_tog tog0, enum sms_btn_int_tog tog1)
{
10009918:	b510      	push	{r4, lr}
1000991a:	000c      	movs	r4, r1
    if(tog0 == SMS_BTN_INT_ENABLE) {
1000991c:	2800      	cmp	r0, #0
1000991e:	d104      	bne.n	1000992a <sms_button_toggle_interrupt+0x12>
        gpio_enable_callback(btn0_instance.gpio_pin);
10009920:	4b0c      	ldr	r3, [pc, #48]	; (10009954 <sms_button_toggle_interrupt+0x3c>)
10009922:	7858      	ldrb	r0, [r3, #1]
10009924:	4b0c      	ldr	r3, [pc, #48]	; (10009958 <sms_button_toggle_interrupt+0x40>)
10009926:	4798      	blx	r3
10009928:	e005      	b.n	10009936 <sms_button_toggle_interrupt+0x1e>
    }
    else if(tog0 == SMS_BTN_INT_DISABLE) {
1000992a:	2801      	cmp	r0, #1
1000992c:	d103      	bne.n	10009936 <sms_button_toggle_interrupt+0x1e>
        gpio_disable_callback(btn0_instance.gpio_pin);
1000992e:	4b09      	ldr	r3, [pc, #36]	; (10009954 <sms_button_toggle_interrupt+0x3c>)
10009930:	7858      	ldrb	r0, [r3, #1]
10009932:	4b0a      	ldr	r3, [pc, #40]	; (1000995c <sms_button_toggle_interrupt+0x44>)
10009934:	4798      	blx	r3
    }
    
    if(tog1 == SMS_BTN_INT_ENABLE) {
10009936:	2c00      	cmp	r4, #0
10009938:	d104      	bne.n	10009944 <sms_button_toggle_interrupt+0x2c>
        gpio_enable_callback(btn1_instance.gpio_pin);
1000993a:	4b09      	ldr	r3, [pc, #36]	; (10009960 <sms_button_toggle_interrupt+0x48>)
1000993c:	7858      	ldrb	r0, [r3, #1]
1000993e:	4b06      	ldr	r3, [pc, #24]	; (10009958 <sms_button_toggle_interrupt+0x40>)
10009940:	4798      	blx	r3
10009942:	e005      	b.n	10009950 <sms_button_toggle_interrupt+0x38>
    }
    else if(tog1 == SMS_BTN_INT_DISABLE) {
10009944:	2c01      	cmp	r4, #1
10009946:	d103      	bne.n	10009950 <sms_button_toggle_interrupt+0x38>
        gpio_disable_callback(btn1_instance.gpio_pin);
10009948:	4b05      	ldr	r3, [pc, #20]	; (10009960 <sms_button_toggle_interrupt+0x48>)
1000994a:	7858      	ldrb	r0, [r3, #1]
1000994c:	4b03      	ldr	r3, [pc, #12]	; (1000995c <sms_button_toggle_interrupt+0x44>)
1000994e:	4798      	blx	r3
    }
}
10009950:	bd10      	pop	{r4, pc}
10009952:	46c0      	nop			; (mov r8, r8)
10009954:	10016ec8 	.word	0x10016ec8
10009958:	1000ac59 	.word	0x1000ac59
1000995c:	1000acb5 	.word	0x1000acb5
10009960:	10016ed4 	.word	0x10016ed4

10009964 <sms_button_define_services>:
    send_plf_int_msg_ind(btn1_instance.gpio_pin, GPIO_CALLBACK_RISING, NULL, 0);
}

/* Define BLE service for buttons */
void sms_button_define_services(void)
{
10009964:	b510      	push	{r4, lr}
10009966:	b082      	sub	sp, #8
    at_ble_status_t status;
    uint8_t init_value = 0;
10009968:	466b      	mov	r3, sp
1000996a:	1dda      	adds	r2, r3, #7
1000996c:	2300      	movs	r3, #0
1000996e:	7013      	strb	r3, [r2, #0]
    sms_ble_service_init(BLE_SERV_BUTTON, &button_instance.service_handler, &init_value);
10009970:	4c0d      	ldr	r4, [pc, #52]	; (100099a8 <sms_button_define_services+0x44>)
10009972:	0021      	movs	r1, r4
10009974:	2000      	movs	r0, #0
10009976:	4b0d      	ldr	r3, [pc, #52]	; (100099ac <sms_button_define_services+0x48>)
10009978:	4798      	blx	r3
    if((status = sms_ble_primary_service_define(&button_instance.service_handler)) != AT_BLE_SUCCESS) {
1000997a:	0020      	movs	r0, r4
1000997c:	4b0c      	ldr	r3, [pc, #48]	; (100099b0 <sms_button_define_services+0x4c>)
1000997e:	4798      	blx	r3
10009980:	1e04      	subs	r4, r0, #0
10009982:	d007      	beq.n	10009994 <sms_button_define_services+0x30>
        DBG_LOG("[sms_button_define_services]\tServices defining failed, reason 0x%x", status);
10009984:	480b      	ldr	r0, [pc, #44]	; (100099b4 <sms_button_define_services+0x50>)
10009986:	4b0c      	ldr	r3, [pc, #48]	; (100099b8 <sms_button_define_services+0x54>)
10009988:	4798      	blx	r3
1000998a:	0021      	movs	r1, r4
1000998c:	480b      	ldr	r0, [pc, #44]	; (100099bc <sms_button_define_services+0x58>)
1000998e:	4b0c      	ldr	r3, [pc, #48]	; (100099c0 <sms_button_define_services+0x5c>)
10009990:	4798      	blx	r3
10009992:	e007      	b.n	100099a4 <sms_button_define_services+0x40>
    }
    else {
        DBG_LOG_DEV("[sms_button_define_services]\tServices defined, SMS button handle: %d", button_instance.service_handler.serv_handle);
10009994:	4807      	ldr	r0, [pc, #28]	; (100099b4 <sms_button_define_services+0x50>)
10009996:	4b08      	ldr	r3, [pc, #32]	; (100099b8 <sms_button_define_services+0x54>)
10009998:	4798      	blx	r3
1000999a:	4b0a      	ldr	r3, [pc, #40]	; (100099c4 <sms_button_define_services+0x60>)
1000999c:	8ad9      	ldrh	r1, [r3, #22]
1000999e:	480a      	ldr	r0, [pc, #40]	; (100099c8 <sms_button_define_services+0x64>)
100099a0:	4b07      	ldr	r3, [pc, #28]	; (100099c0 <sms_button_define_services+0x5c>)
100099a2:	4798      	blx	r3
    }
100099a4:	b002      	add	sp, #8
100099a6:	bd10      	pop	{r4, pc}
100099a8:	10016edc 	.word	0x10016edc
100099ac:	10009709 	.word	0x10009709
100099b0:	100096e5 	.word	0x100096e5
100099b4:	10013980 	.word	0x10013980
100099b8:	100127d9 	.word	0x100127d9
100099bc:	1001410c 	.word	0x1001410c
100099c0:	100126b9 	.word	0x100126b9
100099c4:	10016ed8 	.word	0x10016ed8
100099c8:	10014150 	.word	0x10014150

100099cc <sms_monitor_configure_gpio>:

#include "sms_common.h"

/* General functions */
void sms_monitor_configure_gpio(void)
{
100099cc:	b510      	push	{r4, lr}
100099ce:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;
    gpio_get_config_defaults(&config_gpio_pin);
100099d0:	ac01      	add	r4, sp, #4
100099d2:	0020      	movs	r0, r4
100099d4:	4b0a      	ldr	r3, [pc, #40]	; (10009a00 <sms_monitor_configure_gpio+0x34>)
100099d6:	4798      	blx	r3
    config_gpio_pin.direction  = GPIO_PIN_DIR_OUTPUT;
100099d8:	2301      	movs	r3, #1
100099da:	7023      	strb	r3, [r4, #0]
    if(gpio_pin_set_config(DBG_PIN_1, &config_gpio_pin) != STATUS_OK) {
100099dc:	0021      	movs	r1, r4
100099de:	2002      	movs	r0, #2
100099e0:	4b08      	ldr	r3, [pc, #32]	; (10009a04 <sms_monitor_configure_gpio+0x38>)
100099e2:	4798      	blx	r3
100099e4:	2800      	cmp	r0, #0
100099e6:	d005      	beq.n	100099f4 <sms_monitor_configure_gpio+0x28>
        DBG_LOG("Problem while setting gpio pin");
100099e8:	4807      	ldr	r0, [pc, #28]	; (10009a08 <sms_monitor_configure_gpio+0x3c>)
100099ea:	4b08      	ldr	r3, [pc, #32]	; (10009a0c <sms_monitor_configure_gpio+0x40>)
100099ec:	4798      	blx	r3
100099ee:	4808      	ldr	r0, [pc, #32]	; (10009a10 <sms_monitor_configure_gpio+0x44>)
100099f0:	4b08      	ldr	r3, [pc, #32]	; (10009a14 <sms_monitor_configure_gpio+0x48>)
100099f2:	4798      	blx	r3
    }
    gpio_pin_set_output_level(DBG_PIN_1, DBG_PIN_LOW);
100099f4:	2100      	movs	r1, #0
100099f6:	2002      	movs	r0, #2
100099f8:	4b07      	ldr	r3, [pc, #28]	; (10009a18 <sms_monitor_configure_gpio+0x4c>)
100099fa:	4798      	blx	r3
}
100099fc:	b002      	add	sp, #8
100099fe:	bd10      	pop	{r4, pc}
10009a00:	1000a7e9 	.word	0x1000a7e9
10009a04:	1000a7f9 	.word	0x1000a7f9
10009a08:	10013980 	.word	0x10013980
10009a0c:	100127d9 	.word	0x100127d9
10009a10:	10014198 	.word	0x10014198
10009a14:	100126b9 	.word	0x100126b9
10009a18:	1000a9b1 	.word	0x1000a9b1

10009a1c <sms_monitor_get_states>:

void sms_monitor_get_states(const char *label)
{
10009a1c:	b570      	push	{r4, r5, r6, lr}
10009a1e:	b084      	sub	sp, #16
10009a20:	0004      	movs	r4, r0
    DBG_LOG_DEV("%s...\t\tB-prev %d, B-cur %d, BLE 0x%02x, T1 %d, T2 %d, SMS %d", label, button_instance.previous_state, button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode, sms_working_mode);
10009a22:	480c      	ldr	r0, [pc, #48]	; (10009a54 <sms_monitor_get_states+0x38>)
10009a24:	4b0c      	ldr	r3, [pc, #48]	; (10009a58 <sms_monitor_get_states+0x3c>)
10009a26:	4798      	blx	r3
10009a28:	4b0c      	ldr	r3, [pc, #48]	; (10009a5c <sms_monitor_get_states+0x40>)
10009a2a:	7819      	ldrb	r1, [r3, #0]
10009a2c:	4b0c      	ldr	r3, [pc, #48]	; (10009a60 <sms_monitor_get_states+0x44>)
10009a2e:	7818      	ldrb	r0, [r3, #0]
10009a30:	4b0c      	ldr	r3, [pc, #48]	; (10009a64 <sms_monitor_get_states+0x48>)
10009a32:	781d      	ldrb	r5, [r3, #0]
10009a34:	4b0c      	ldr	r3, [pc, #48]	; (10009a68 <sms_monitor_get_states+0x4c>)
10009a36:	781e      	ldrb	r6, [r3, #0]
10009a38:	4a0c      	ldr	r2, [pc, #48]	; (10009a6c <sms_monitor_get_states+0x50>)
10009a3a:	7853      	ldrb	r3, [r2, #1]
10009a3c:	7812      	ldrb	r2, [r2, #0]
10009a3e:	9603      	str	r6, [sp, #12]
10009a40:	9502      	str	r5, [sp, #8]
10009a42:	9001      	str	r0, [sp, #4]
10009a44:	9100      	str	r1, [sp, #0]
10009a46:	0021      	movs	r1, r4
10009a48:	4809      	ldr	r0, [pc, #36]	; (10009a70 <sms_monitor_get_states+0x54>)
10009a4a:	4c0a      	ldr	r4, [pc, #40]	; (10009a74 <sms_monitor_get_states+0x58>)
10009a4c:	47a0      	blx	r4
}
10009a4e:	b004      	add	sp, #16
10009a50:	bd70      	pop	{r4, r5, r6, pc}
10009a52:	46c0      	nop			; (mov r8, r8)
10009a54:	10013980 	.word	0x10013980
10009a58:	100127d9 	.word	0x100127d9
10009a5c:	10016fe8 	.word	0x10016fe8
10009a60:	10016ecc 	.word	0x10016ecc
10009a64:	10016fe9 	.word	0x10016fe9
10009a68:	10016ecd 	.word	0x10016ecd
10009a6c:	10016ed8 	.word	0x10016ed8
10009a70:	100141b8 	.word	0x100141b8
10009a74:	100126b9 	.word	0x100126b9

10009a78 <sms_sensors_interrupt_toggle>:



/* Sensors-related functions */
void sms_sensors_interrupt_toggle(bool mpu_int, bool press_int) {
10009a78:	b510      	push	{r4, lr}
10009a7a:	000c      	movs	r4, r1
    /* IMU --> IMU_DRDY */
    if(mpu_int) {
10009a7c:	2800      	cmp	r0, #0
10009a7e:	d003      	beq.n	10009a88 <sms_sensors_interrupt_toggle+0x10>
        gpio_enable_callback(SMS_MPU_DRDY_PIN);
10009a80:	201e      	movs	r0, #30
10009a82:	4b12      	ldr	r3, [pc, #72]	; (10009acc <sms_sensors_interrupt_toggle+0x54>)
10009a84:	4798      	blx	r3
10009a86:	e002      	b.n	10009a8e <sms_sensors_interrupt_toggle+0x16>
    }
    else {
        gpio_disable_callback(SMS_MPU_DRDY_PIN);
10009a88:	201e      	movs	r0, #30
10009a8a:	4b11      	ldr	r3, [pc, #68]	; (10009ad0 <sms_sensors_interrupt_toggle+0x58>)
10009a8c:	4798      	blx	r3
     * Note: Since there is no direct mechanism to simply enable and disable
     *       the AON sleep timer interruption, we have to initialize it each
     *       time (and it starts running) and register the corresponding
     *       callback (and it enables the interrupt)
     */
    if(press_int) {
10009a8e:	2c00      	cmp	r4, #0
10009a90:	d010      	beq.n	10009ab4 <sms_sensors_interrupt_toggle+0x3c>
        pressure_device.ms58_device.current_state = MS58_STATE_CONV_PRESSURE;
10009a92:	4b10      	ldr	r3, [pc, #64]	; (10009ad4 <sms_sensors_interrupt_toggle+0x5c>)
10009a94:	2103      	movs	r1, #3
10009a96:	2225      	movs	r2, #37	; 0x25
10009a98:	5499      	strb	r1, [r3, r2]
        pressure_device.state = PRESSURE_STATE_ON;
10009a9a:	3901      	subs	r1, #1
10009a9c:	3203      	adds	r2, #3
10009a9e:	5499      	strb	r1, [r3, r2]
        sms_timer_aon_init(SMS_PRESSURE_CONVERT_MS, AON_SLEEP_TIMER_RELOAD_MODE);
10009aa0:	2100      	movs	r1, #0
10009aa2:	480d      	ldr	r0, [pc, #52]	; (10009ad8 <sms_sensors_interrupt_toggle+0x60>)
10009aa4:	4b0d      	ldr	r3, [pc, #52]	; (10009adc <sms_sensors_interrupt_toggle+0x64>)
10009aa6:	4798      	blx	r3
        sms_timer_aon_register_callback();
10009aa8:	4b0d      	ldr	r3, [pc, #52]	; (10009ae0 <sms_sensors_interrupt_toggle+0x68>)
10009aaa:	4798      	blx	r3
        sensors_active = true;
10009aac:	2201      	movs	r2, #1
10009aae:	4b0d      	ldr	r3, [pc, #52]	; (10009ae4 <sms_sensors_interrupt_toggle+0x6c>)
10009ab0:	701a      	strb	r2, [r3, #0]
10009ab2:	e00a      	b.n	10009aca <sms_sensors_interrupt_toggle+0x52>
    }
    else {
        pressure_device.ms58_device.current_state = MS58_STATE_READY;
10009ab4:	2102      	movs	r1, #2
10009ab6:	2325      	movs	r3, #37	; 0x25
10009ab8:	4a06      	ldr	r2, [pc, #24]	; (10009ad4 <sms_sensors_interrupt_toggle+0x5c>)
10009aba:	54d1      	strb	r1, [r2, r3]
        sms_timer_aon_disable();
10009abc:	4b0a      	ldr	r3, [pc, #40]	; (10009ae8 <sms_sensors_interrupt_toggle+0x70>)
10009abe:	4798      	blx	r3
        sms_timer_aon_unregister_callback();
10009ac0:	4b0a      	ldr	r3, [pc, #40]	; (10009aec <sms_sensors_interrupt_toggle+0x74>)
10009ac2:	4798      	blx	r3
        sensors_active = false;
10009ac4:	2200      	movs	r2, #0
10009ac6:	4b07      	ldr	r3, [pc, #28]	; (10009ae4 <sms_sensors_interrupt_toggle+0x6c>)
10009ac8:	701a      	strb	r2, [r3, #0]
    }
}
10009aca:	bd10      	pop	{r4, pc}
10009acc:	1000ac59 	.word	0x1000ac59
10009ad0:	1000acb5 	.word	0x1000acb5
10009ad4:	10016f4c 	.word	0x10016f4c
10009ad8:	00000cc6 	.word	0x00000cc6
10009adc:	1000a025 	.word	0x1000a025
10009ae0:	1000a059 	.word	0x1000a059
10009ae4:	10016fdc 	.word	0x10016fdc
10009ae8:	1000a04d 	.word	0x1000a04d
10009aec:	1000a079 	.word	0x1000a079

10009af0 <sms_sensors_switch>:
    

void sms_sensors_switch(bool mpu_en, bool press_en)
{
10009af0:	b510      	push	{r4, lr}
10009af2:	000c      	movs	r4, r1
    /* IMU */
    if(mpu_en) {
10009af4:	2800      	cmp	r0, #0
10009af6:	d001      	beq.n	10009afc <sms_sensors_switch+0xc>
        sms_mpu_startup();
10009af8:	4b09      	ldr	r3, [pc, #36]	; (10009b20 <sms_sensors_switch+0x30>)
10009afa:	4798      	blx	r3
    else {
        //gpio_pin_set_output_level(SMS_IMU_VCC_PIN, false);
    }
    
    /* Pressure */
    if(press_en) {                
10009afc:	2c00      	cmp	r4, #0
10009afe:	d009      	beq.n	10009b14 <sms_sensors_switch+0x24>
        pressure_device.ms58_device.current_state = MS58_STATE_RESETTING;
10009b00:	4b08      	ldr	r3, [pc, #32]	; (10009b24 <sms_sensors_switch+0x34>)
10009b02:	2101      	movs	r1, #1
10009b04:	2225      	movs	r2, #37	; 0x25
10009b06:	5499      	strb	r1, [r3, r2]
        pressure_device.ms58_device.reset_done = false;
10009b08:	2200      	movs	r2, #0
10009b0a:	705a      	strb	r2, [r3, #1]
        pressure_device.ms58_device.init_ok = false;
10009b0c:	709a      	strb	r2, [r3, #2]
        sms_pressure_startup();
10009b0e:	4b06      	ldr	r3, [pc, #24]	; (10009b28 <sms_sensors_switch+0x38>)
10009b10:	4798      	blx	r3
10009b12:	e003      	b.n	10009b1c <sms_sensors_switch+0x2c>
    }
    else {
        gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, false);
10009b14:	2100      	movs	r1, #0
10009b16:	2007      	movs	r0, #7
10009b18:	4b04      	ldr	r3, [pc, #16]	; (10009b2c <sms_sensors_switch+0x3c>)
10009b1a:	4798      	blx	r3
    }
}
10009b1c:	bd10      	pop	{r4, pc}
10009b1e:	46c0      	nop			; (mov r8, r8)
10009b20:	10009d55 	.word	0x10009d55
10009b24:	10016f4c 	.word	0x10016f4c
10009b28:	10009e8d 	.word	0x10009e8d
10009b2c:	1000a9b1 	.word	0x1000a9b1

10009b30 <sms_i2c_master_configure>:
#include <stdlib.h>
#include "sms_i2c.h"


void sms_i2c_master_configure(void)
{
10009b30:	b530      	push	{r4, r5, lr}
10009b32:	b087      	sub	sp, #28
    i2c_wpacket.data = malloc(I2C_DATA_LENGTH * sizeof(uint8_t));
10009b34:	2010      	movs	r0, #16
10009b36:	4c14      	ldr	r4, [pc, #80]	; (10009b88 <sms_i2c_master_configure+0x58>)
10009b38:	47a0      	blx	r4
10009b3a:	4b14      	ldr	r3, [pc, #80]	; (10009b8c <sms_i2c_master_configure+0x5c>)
10009b3c:	6058      	str	r0, [r3, #4]
    i2c_rpacket.data = malloc(I2C_DATA_LENGTH * sizeof(uint8_t));
10009b3e:	2010      	movs	r0, #16
10009b40:	47a0      	blx	r4
10009b42:	4b13      	ldr	r3, [pc, #76]	; (10009b90 <sms_i2c_master_configure+0x60>)
10009b44:	6058      	str	r0, [r3, #4]

    struct i2c_master_config config_i2c_master;
    i2c_master_get_config_defaults(&config_i2c_master);
10009b46:	ac01      	add	r4, sp, #4
10009b48:	0020      	movs	r0, r4
10009b4a:	4b12      	ldr	r3, [pc, #72]	; (10009b94 <sms_i2c_master_configure+0x64>)
10009b4c:	4798      	blx	r3
    config_i2c_master.clock_source = SMS_I2C_MASTER_CLK_SRC;
10009b4e:	2300      	movs	r3, #0
10009b50:	7023      	strb	r3, [r4, #0]
    config_i2c_master.clock_divider = SMS_I2C_MASTER_CLK_DIV;
10009b52:	3341      	adds	r3, #65	; 0x41
10009b54:	8063      	strh	r3, [r4, #2]
    config_i2c_master.pin_number_pad0 = SMS_I2C_MASTER_PIN_SDA;
10009b56:	3b33      	subs	r3, #51	; 0x33
10009b58:	6063      	str	r3, [r4, #4]
    config_i2c_master.pin_number_pad1 = SMS_I2C_MASTER_PIN_SCL;
10009b5a:	3301      	adds	r3, #1
10009b5c:	60e3      	str	r3, [r4, #12]
    config_i2c_master.pinmux_sel_pad0 = SMS_I2C_MASTER_MUX_SDA;
10009b5e:	3b0b      	subs	r3, #11
10009b60:	60a3      	str	r3, [r4, #8]
    config_i2c_master.pinmux_sel_pad1 = SMS_I2C_MASTER_MUX_SCL;
10009b62:	6123      	str	r3, [r4, #16]
    while(i2c_master_init(&i2c_master_instance, SMS_I2C_MASTER_PORT, &config_i2c_master) != STATUS_OK);
10009b64:	4d0c      	ldr	r5, [pc, #48]	; (10009b98 <sms_i2c_master_configure+0x68>)
10009b66:	4c0d      	ldr	r4, [pc, #52]	; (10009b9c <sms_i2c_master_configure+0x6c>)
10009b68:	aa01      	add	r2, sp, #4
10009b6a:	490d      	ldr	r1, [pc, #52]	; (10009ba0 <sms_i2c_master_configure+0x70>)
10009b6c:	0028      	movs	r0, r5
10009b6e:	47a0      	blx	r4
10009b70:	2800      	cmp	r0, #0
10009b72:	d1f9      	bne.n	10009b68 <sms_i2c_master_configure+0x38>

    i2c_enable(i2c_master_instance.hw);
10009b74:	4b08      	ldr	r3, [pc, #32]	; (10009b98 <sms_i2c_master_configure+0x68>)
10009b76:	681a      	ldr	r2, [r3, #0]
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2c *const i2c_module)
{
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
10009b78:	2128      	movs	r1, #40	; 0x28
10009b7a:	5c53      	ldrb	r3, [r2, r1]
10009b7c:	07db      	lsls	r3, r3, #31
10009b7e:	d4fc      	bmi.n	10009b7a <sms_i2c_master_configure+0x4a>
static inline void i2c_enable(I2c *const i2c_module)
{
	/* Wait for module to sync. */
	i2c_wait_for_idle(i2c_module);
	/* Enable module. */
	i2c_module->I2C_MODULE_ENABLE.reg = (1 << I2C_MODULE_ENABLE_ENABLE_Pos);
10009b80:	2301      	movs	r3, #1
10009b82:	7513      	strb	r3, [r2, #20]
}
10009b84:	b007      	add	sp, #28
10009b86:	bd30      	pop	{r4, r5, pc}
10009b88:	1001252d 	.word	0x1001252d
10009b8c:	10016ff0 	.word	0x10016ff0
10009b90:	10016fd4 	.word	0x10016fd4
10009b94:	10008369 	.word	0x10008369
10009b98:	10016fe0 	.word	0x10016fe0
10009b9c:	10008381 	.word	0x10008381
10009ba0:	40003400 	.word	0x40003400

10009ba4 <sms_i2c_master_write>:

int sms_i2c_master_write(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t const *data)
{
10009ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    //DBG_LOG("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
10009ba6:	4c12      	ldr	r4, [pc, #72]	; (10009bf0 <sms_i2c_master_write+0x4c>)
10009ba8:	8020      	strh	r0, [r4, #0]
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
10009baa:	1c50      	adds	r0, r2, #1
10009bac:	b2c0      	uxtb	r0, r0
10009bae:	8060      	strh	r0, [r4, #2]
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
10009bb0:	6860      	ldr	r0, [r4, #4]
10009bb2:	7001      	strb	r1, [r0, #0]
    for(uint8_t i = 0; i < data_len; i++) {
10009bb4:	2a00      	cmp	r2, #0
10009bb6:	d00e      	beq.n	10009bd6 <sms_i2c_master_write+0x32>
10009bb8:	2000      	movs	r0, #0
10009bba:	1c41      	adds	r1, r0, #1
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
10009bbc:	5c18      	ldrb	r0, [r3, r0]
10009bbe:	6865      	ldr	r5, [r4, #4]
10009bc0:	5468      	strb	r0, [r5, r1]
10009bc2:	0008      	movs	r0, r1
    //DBG_LOG("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    for(uint8_t i = 0; i < data_len; i++) {
10009bc4:	b2c9      	uxtb	r1, r1
10009bc6:	428a      	cmp	r2, r1
10009bc8:	d8f7      	bhi.n	10009bba <sms_i2c_master_write+0x16>
10009bca:	e004      	b.n	10009bd6 <sms_i2c_master_write+0x32>
10009bcc:	3c01      	subs	r4, #1
10009bce:	b2a4      	uxth	r4, r4
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
        //DBG_LOG_CONT("0x%02x ", packet.data[i+1]);
    }
    while (i2c_master_write_packet_wait(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
        /* Increment timeout counter and check if timed out. */
        if (timeout++ >= I2C_TIMEOUT) {
10009bd0:	2c00      	cmp	r4, #0
10009bd2:	d104      	bne.n	10009bde <sms_i2c_master_write+0x3a>
10009bd4:	e009      	b.n	10009bea <sms_i2c_master_write+0x46>
    //DBG_LOG("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    for(uint8_t i = 0; i < data_len; i++) {
10009bd6:	4c07      	ldr	r4, [pc, #28]	; (10009bf4 <sms_i2c_master_write+0x50>)
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
        //DBG_LOG_CONT("0x%02x ", packet.data[i+1]);
    }
    while (i2c_master_write_packet_wait(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
10009bd8:	4e05      	ldr	r6, [pc, #20]	; (10009bf0 <sms_i2c_master_write+0x4c>)
10009bda:	4d07      	ldr	r5, [pc, #28]	; (10009bf8 <sms_i2c_master_write+0x54>)
10009bdc:	4f07      	ldr	r7, [pc, #28]	; (10009bfc <sms_i2c_master_write+0x58>)
10009bde:	0031      	movs	r1, r6
10009be0:	0028      	movs	r0, r5
10009be2:	47b8      	blx	r7
10009be4:	2800      	cmp	r0, #0
10009be6:	d1f1      	bne.n	10009bcc <sms_i2c_master_write+0x28>
10009be8:	e001      	b.n	10009bee <sms_i2c_master_write+0x4a>
        /* Increment timeout counter and check if timed out. */
        if (timeout++ >= I2C_TIMEOUT) {
            return -1;
10009bea:	2001      	movs	r0, #1
10009bec:	4240      	negs	r0, r0
        }
    }
    return 0;
}
10009bee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10009bf0:	10016ff0 	.word	0x10016ff0
10009bf4:	000003e9 	.word	0x000003e9
10009bf8:	10016fe0 	.word	0x10016fe0
10009bfc:	10008419 	.word	0x10008419

10009c00 <sms_i2c_master_read>:

int sms_i2c_master_read(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t *data)
{
10009c00:	b5f0      	push	{r4, r5, r6, r7, lr}
10009c02:	4647      	mov	r7, r8
10009c04:	b480      	push	{r7}
10009c06:	0017      	movs	r7, r2
10009c08:	4698      	mov	r8, r3
    //DBG_LOG("i2c reading from 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout;
    i2c_wpacket.address = (uint8_t)slave_addr;
10009c0a:	b280      	uxth	r0, r0
10009c0c:	4b1d      	ldr	r3, [pc, #116]	; (10009c84 <sms_i2c_master_read+0x84>)
10009c0e:	8018      	strh	r0, [r3, #0]
    i2c_wpacket.data_length = 1;
10009c10:	2201      	movs	r2, #1
10009c12:	805a      	strh	r2, [r3, #2]
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
10009c14:	685b      	ldr	r3, [r3, #4]
10009c16:	7019      	strb	r1, [r3, #0]
    i2c_rpacket.address = (uint8_t)slave_addr;
10009c18:	4b1b      	ldr	r3, [pc, #108]	; (10009c88 <sms_i2c_master_read+0x88>)
10009c1a:	8018      	strh	r0, [r3, #0]
    i2c_rpacket.data_length = (uint8_t)data_len;
10009c1c:	805f      	strh	r7, [r3, #2]
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
10009c1e:	4c1b      	ldr	r4, [pc, #108]	; (10009c8c <sms_i2c_master_read+0x8c>)
10009c20:	4e18      	ldr	r6, [pc, #96]	; (10009c84 <sms_i2c_master_read+0x84>)
10009c22:	4d1b      	ldr	r5, [pc, #108]	; (10009c90 <sms_i2c_master_read+0x90>)
10009c24:	e003      	b.n	10009c2e <sms_i2c_master_read+0x2e>
10009c26:	3c01      	subs	r4, #1
10009c28:	b2a4      	uxth	r4, r4
        if(timeout++ >= I2C_TIMEOUT) {
10009c2a:	2c00      	cmp	r4, #0
10009c2c:	d01f      	beq.n	10009c6e <sms_i2c_master_read+0x6e>
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    i2c_rpacket.address = (uint8_t)slave_addr;
    i2c_rpacket.data_length = (uint8_t)data_len;
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
10009c2e:	0031      	movs	r1, r6
10009c30:	4818      	ldr	r0, [pc, #96]	; (10009c94 <sms_i2c_master_read+0x94>)
10009c32:	47a8      	blx	r5
10009c34:	2800      	cmp	r0, #0
10009c36:	d1f6      	bne.n	10009c26 <sms_i2c_master_read+0x26>
10009c38:	4e14      	ldr	r6, [pc, #80]	; (10009c8c <sms_i2c_master_read+0x8c>)
            return -1;
        }
    }
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
10009c3a:	4d13      	ldr	r5, [pc, #76]	; (10009c88 <sms_i2c_master_read+0x88>)
10009c3c:	4c16      	ldr	r4, [pc, #88]	; (10009c98 <sms_i2c_master_read+0x98>)
10009c3e:	e003      	b.n	10009c48 <sms_i2c_master_read+0x48>
10009c40:	3e01      	subs	r6, #1
10009c42:	b2b6      	uxth	r6, r6
        if(timeout++ >= I2C_TIMEOUT) {
10009c44:	2e00      	cmp	r6, #0
10009c46:	d015      	beq.n	10009c74 <sms_i2c_master_read+0x74>
            return -1;
        }
    }
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
10009c48:	0029      	movs	r1, r5
10009c4a:	4812      	ldr	r0, [pc, #72]	; (10009c94 <sms_i2c_master_read+0x94>)
10009c4c:	47a0      	blx	r4
10009c4e:	2800      	cmp	r0, #0
10009c50:	d1f6      	bne.n	10009c40 <sms_i2c_master_read+0x40>
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
        }
    }
    for(uint8_t i = 0; i < data_len; i++) {
10009c52:	2f00      	cmp	r7, #0
10009c54:	d011      	beq.n	10009c7a <sms_i2c_master_read+0x7a>
10009c56:	2300      	movs	r3, #0
        data[i] = i2c_rpacket.data[i];
10009c58:	490b      	ldr	r1, [pc, #44]	; (10009c88 <sms_i2c_master_read+0x88>)
10009c5a:	684a      	ldr	r2, [r1, #4]
10009c5c:	5cd2      	ldrb	r2, [r2, r3]
10009c5e:	4640      	mov	r0, r8
10009c60:	54c2      	strb	r2, [r0, r3]
10009c62:	3301      	adds	r3, #1
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
        }
    }
    for(uint8_t i = 0; i < data_len; i++) {
10009c64:	b2da      	uxtb	r2, r3
10009c66:	4297      	cmp	r7, r2
10009c68:	d8f7      	bhi.n	10009c5a <sms_i2c_master_read+0x5a>
        data[i] = i2c_rpacket.data[i];
        //DBG_LOG("0x%02x ", data[i]);
    }
    return 0;
10009c6a:	2000      	movs	r0, #0
10009c6c:	e006      	b.n	10009c7c <sms_i2c_master_read+0x7c>
    i2c_rpacket.data_length = (uint8_t)data_len;
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
10009c6e:	2001      	movs	r0, #1
10009c70:	4240      	negs	r0, r0
10009c72:	e003      	b.n	10009c7c <sms_i2c_master_read+0x7c>
    }
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
10009c74:	2001      	movs	r0, #1
10009c76:	4240      	negs	r0, r0
10009c78:	e000      	b.n	10009c7c <sms_i2c_master_read+0x7c>
    }
    for(uint8_t i = 0; i < data_len; i++) {
        data[i] = i2c_rpacket.data[i];
        //DBG_LOG("0x%02x ", data[i]);
    }
    return 0;
10009c7a:	2000      	movs	r0, #0
10009c7c:	bc04      	pop	{r2}
10009c7e:	4690      	mov	r8, r2
10009c80:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009c82:	46c0      	nop			; (mov r8, r8)
10009c84:	10016ff0 	.word	0x10016ff0
10009c88:	10016fd4 	.word	0x10016fd4
10009c8c:	000003e9 	.word	0x000003e9
10009c90:	1000843d 	.word	0x1000843d
10009c94:	10016fe0 	.word	0x10016fe0
10009c98:	100083f5 	.word	0x100083f5

10009c9c <sms_mpu_interrupt_callback>:
    gpio_unregister_callback(SMS_MPU_DRDY_PIN, GPIO_CALLBACK_RISING);
}

/* Callback --> send interrupt message to platform */
void sms_mpu_interrupt_callback(void)
{
10009c9c:	b510      	push	{r4, lr}
    sms_current_interrupt.source = INT_MPU_DRDY;
10009c9e:	2203      	movs	r2, #3
10009ca0:	4b04      	ldr	r3, [pc, #16]	; (10009cb4 <sms_mpu_interrupt_callback+0x18>)
10009ca2:	701a      	strb	r2, [r3, #0]
    send_plf_int_msg_ind(SMS_MPU_DRDY_PIN, GPIO_CALLBACK_RISING, NULL, 0);
10009ca4:	2300      	movs	r3, #0
10009ca6:	2200      	movs	r2, #0
10009ca8:	2102      	movs	r1, #2
10009caa:	201e      	movs	r0, #30
10009cac:	4c02      	ldr	r4, [pc, #8]	; (10009cb8 <sms_mpu_interrupt_callback+0x1c>)
10009cae:	47a0      	blx	r4
}
10009cb0:	bd10      	pop	{r4, pc}
10009cb2:	46c0      	nop			; (mov r8, r8)
10009cb4:	10016fd0 	.word	0x10016fd0
10009cb8:	1000d85d 	.word	0x1000d85d

10009cbc <sms_mpu_configure_gpio>:
*/

#include "sms_peripheral1.h"

void sms_mpu_configure_gpio(void)
{
10009cbc:	b510      	push	{r4, lr}
10009cbe:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;

    /* Data ready interrupt from IMU */
    gpio_get_config_defaults(&config_gpio_pin);
10009cc0:	ac01      	add	r4, sp, #4
10009cc2:	0020      	movs	r0, r4
10009cc4:	4b15      	ldr	r3, [pc, #84]	; (10009d1c <sms_mpu_configure_gpio+0x60>)
10009cc6:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
10009cc8:	2300      	movs	r3, #0
10009cca:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
10009ccc:	3302      	adds	r3, #2
10009cce:	7063      	strb	r3, [r4, #1]
    config_gpio_pin.aon_wakeup = true;
10009cd0:	3b01      	subs	r3, #1
10009cd2:	70e3      	strb	r3, [r4, #3]
    if(gpio_pin_set_config(SMS_MPU_DRDY_PIN, &config_gpio_pin) != STATUS_OK) {
10009cd4:	0021      	movs	r1, r4
10009cd6:	201e      	movs	r0, #30
10009cd8:	4b11      	ldr	r3, [pc, #68]	; (10009d20 <sms_mpu_configure_gpio+0x64>)
10009cda:	4798      	blx	r3
10009cdc:	2800      	cmp	r0, #0
10009cde:	d005      	beq.n	10009cec <sms_mpu_configure_gpio+0x30>
        DBG_LOG("[sms_imu_configure_gpio]\tProblem while setting up IMU DRDY pin");
10009ce0:	4810      	ldr	r0, [pc, #64]	; (10009d24 <sms_mpu_configure_gpio+0x68>)
10009ce2:	4b11      	ldr	r3, [pc, #68]	; (10009d28 <sms_mpu_configure_gpio+0x6c>)
10009ce4:	4798      	blx	r3
10009ce6:	4811      	ldr	r0, [pc, #68]	; (10009d2c <sms_mpu_configure_gpio+0x70>)
10009ce8:	4b11      	ldr	r3, [pc, #68]	; (10009d30 <sms_mpu_configure_gpio+0x74>)
10009cea:	4798      	blx	r3
    }

    /* Pin output to supply IMU */
    gpio_get_config_defaults(&config_gpio_pin);
10009cec:	ac01      	add	r4, sp, #4
10009cee:	0020      	movs	r0, r4
10009cf0:	4b0a      	ldr	r3, [pc, #40]	; (10009d1c <sms_mpu_configure_gpio+0x60>)
10009cf2:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_OUTPUT;
10009cf4:	2301      	movs	r3, #1
10009cf6:	7023      	strb	r3, [r4, #0]
    if(!gpio_pin_set_config(SMS_MPU_VCC_PIN, &config_gpio_pin) != STATUS_OK) {
10009cf8:	0021      	movs	r1, r4
10009cfa:	2006      	movs	r0, #6
10009cfc:	4b08      	ldr	r3, [pc, #32]	; (10009d20 <sms_mpu_configure_gpio+0x64>)
10009cfe:	4798      	blx	r3
10009d00:	2800      	cmp	r0, #0
10009d02:	d105      	bne.n	10009d10 <sms_mpu_configure_gpio+0x54>
        DBG_LOG("[sms_imu_configure_gpio]\tProblem while setting up IMU VCC pin");
10009d04:	4807      	ldr	r0, [pc, #28]	; (10009d24 <sms_mpu_configure_gpio+0x68>)
10009d06:	4b08      	ldr	r3, [pc, #32]	; (10009d28 <sms_mpu_configure_gpio+0x6c>)
10009d08:	4798      	blx	r3
10009d0a:	480a      	ldr	r0, [pc, #40]	; (10009d34 <sms_mpu_configure_gpio+0x78>)
10009d0c:	4b08      	ldr	r3, [pc, #32]	; (10009d30 <sms_mpu_configure_gpio+0x74>)
10009d0e:	4798      	blx	r3
    }
    gpio_pin_set_output_level(SMS_MPU_VCC_PIN, true);
10009d10:	2101      	movs	r1, #1
10009d12:	2006      	movs	r0, #6
10009d14:	4b08      	ldr	r3, [pc, #32]	; (10009d38 <sms_mpu_configure_gpio+0x7c>)
10009d16:	4798      	blx	r3
}
10009d18:	b002      	add	sp, #8
10009d1a:	bd10      	pop	{r4, pc}
10009d1c:	1000a7e9 	.word	0x1000a7e9
10009d20:	1000a7f9 	.word	0x1000a7f9
10009d24:	10013980 	.word	0x10013980
10009d28:	100127d9 	.word	0x100127d9
10009d2c:	100141f8 	.word	0x100141f8
10009d30:	100126b9 	.word	0x100126b9
10009d34:	10014238 	.word	0x10014238
10009d38:	1000a9b1 	.word	0x1000a9b1

10009d3c <sms_mpu_register_callbacks>:

/* Register GPIO interrupt callback */
void sms_mpu_register_callbacks(void)
{
10009d3c:	b510      	push	{r4, lr}
    /* MPU-9250 interrupt callback */
    gpio_register_callback(SMS_MPU_DRDY_PIN, sms_mpu_interrupt_callback, GPIO_CALLBACK_RISING);
10009d3e:	2202      	movs	r2, #2
10009d40:	4902      	ldr	r1, [pc, #8]	; (10009d4c <sms_mpu_register_callbacks+0x10>)
10009d42:	201e      	movs	r0, #30
10009d44:	4b02      	ldr	r3, [pc, #8]	; (10009d50 <sms_mpu_register_callbacks+0x14>)
10009d46:	4798      	blx	r3
}
10009d48:	bd10      	pop	{r4, pc}
10009d4a:	46c0      	nop			; (mov r8, r8)
10009d4c:	10009c9d 	.word	0x10009c9d
10009d50:	1000ab89 	.word	0x1000ab89

10009d54 <sms_mpu_startup>:
{
    sms_current_interrupt.source = INT_MPU_DRDY;
    send_plf_int_msg_ind(SMS_MPU_DRDY_PIN, GPIO_CALLBACK_RISING, NULL, 0);
}

void sms_mpu_startup(void) {
10009d54:	b510      	push	{r4, lr}
10009d56:	b084      	sub	sp, #16
    /* Initialize & configure MPU-9250 */
    struct int_param_s int_param;
    int_param.cb = (void*)sms_mpu_interrupt_callback;
10009d58:	ac01      	add	r4, sp, #4
10009d5a:	4b0c      	ldr	r3, [pc, #48]	; (10009d8c <sms_mpu_startup+0x38>)
10009d5c:	9302      	str	r3, [sp, #8]
    int_param.pin = SMS_MPU_DRDY_PIN;
10009d5e:	231e      	movs	r3, #30
10009d60:	8023      	strh	r3, [r4, #0]
    DBG_LOG("Starting up MPU...");
10009d62:	480b      	ldr	r0, [pc, #44]	; (10009d90 <sms_mpu_startup+0x3c>)
10009d64:	4b0b      	ldr	r3, [pc, #44]	; (10009d94 <sms_mpu_startup+0x40>)
10009d66:	4798      	blx	r3
10009d68:	480b      	ldr	r0, [pc, #44]	; (10009d98 <sms_mpu_startup+0x44>)
10009d6a:	4b0c      	ldr	r3, [pc, #48]	; (10009d9c <sms_mpu_startup+0x48>)
10009d6c:	4798      	blx	r3
    int result = mpu_init(&int_param);
10009d6e:	0020      	movs	r0, r4
10009d70:	4b0b      	ldr	r3, [pc, #44]	; (10009da0 <sms_mpu_startup+0x4c>)
10009d72:	4798      	blx	r3
    if(result) {
10009d74:	2800      	cmp	r0, #0
10009d76:	d006      	beq.n	10009d86 <sms_mpu_startup+0x32>
        DBG_LOG("Could not initialize MPU");
10009d78:	4805      	ldr	r0, [pc, #20]	; (10009d90 <sms_mpu_startup+0x3c>)
10009d7a:	4b06      	ldr	r3, [pc, #24]	; (10009d94 <sms_mpu_startup+0x40>)
10009d7c:	4798      	blx	r3
10009d7e:	4809      	ldr	r0, [pc, #36]	; (10009da4 <sms_mpu_startup+0x50>)
10009d80:	4b06      	ldr	r3, [pc, #24]	; (10009d9c <sms_mpu_startup+0x48>)
10009d82:	4798      	blx	r3
10009d84:	e7fe      	b.n	10009d84 <sms_mpu_startup+0x30>
        while(1) {}
    }
}
10009d86:	b004      	add	sp, #16
10009d88:	bd10      	pop	{r4, pc}
10009d8a:	46c0      	nop			; (mov r8, r8)
10009d8c:	10009c9d 	.word	0x10009c9d
10009d90:	10013980 	.word	0x10013980
10009d94:	100127d9 	.word	0x100127d9
10009d98:	10014278 	.word	0x10014278
10009d9c:	100126b9 	.word	0x100126b9
10009da0:	10008fc5 	.word	0x10008fc5
10009da4:	1001428c 	.word	0x1001428c

10009da8 <sms_led_switch_on>:
    sms_led_switch_off(SMS_LED_0_PIN);
}


void sms_led_switch_on(enum sms_leds led)
{
10009da8:	b510      	push	{r4, lr}
    gpio_pin_set_output_level(led, SMS_LED_ACTIVE);
10009daa:	2100      	movs	r1, #0
10009dac:	4b01      	ldr	r3, [pc, #4]	; (10009db4 <sms_led_switch_on+0xc>)
10009dae:	4798      	blx	r3
}
10009db0:	bd10      	pop	{r4, pc}
10009db2:	46c0      	nop			; (mov r8, r8)
10009db4:	1000a9b1 	.word	0x1000a9b1

10009db8 <sms_led_switch_off>:


void sms_led_switch_off(enum sms_leds led)
{
10009db8:	b510      	push	{r4, lr}
    gpio_pin_set_output_level(led, SMS_LED_INACTIVE);
10009dba:	2101      	movs	r1, #1
10009dbc:	4b01      	ldr	r3, [pc, #4]	; (10009dc4 <sms_led_switch_off+0xc>)
10009dbe:	4798      	blx	r3
}
10009dc0:	bd10      	pop	{r4, pc}
10009dc2:	46c0      	nop			; (mov r8, r8)
10009dc4:	1000a9b1 	.word	0x1000a9b1

10009dc8 <sms_led_gpio_init>:
 */ 

#include "sms_led.h"

void sms_led_gpio_init(void)
{
10009dc8:	b510      	push	{r4, lr}
10009dca:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;

    /* LED0 @ GPIO_LP_GPIO_22 */
    gpio_get_config_defaults(&config_gpio_pin);
10009dcc:	ac01      	add	r4, sp, #4
10009dce:	0020      	movs	r0, r4
10009dd0:	4b0a      	ldr	r3, [pc, #40]	; (10009dfc <sms_led_gpio_init+0x34>)
10009dd2:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_OUTPUT;
10009dd4:	2301      	movs	r3, #1
10009dd6:	7023      	strb	r3, [r4, #0]
    if(gpio_pin_set_config(SMS_LED_0_PIN, &config_gpio_pin) != STATUS_OK) {
10009dd8:	0021      	movs	r1, r4
10009dda:	2016      	movs	r0, #22
10009ddc:	4b08      	ldr	r3, [pc, #32]	; (10009e00 <sms_led_gpio_init+0x38>)
10009dde:	4798      	blx	r3
10009de0:	2800      	cmp	r0, #0
10009de2:	d005      	beq.n	10009df0 <sms_led_gpio_init+0x28>
        DBG_LOG_DEV("[sms_led_gpio_init]\tproblem while setting up led0");
10009de4:	4807      	ldr	r0, [pc, #28]	; (10009e04 <sms_led_gpio_init+0x3c>)
10009de6:	4b08      	ldr	r3, [pc, #32]	; (10009e08 <sms_led_gpio_init+0x40>)
10009de8:	4798      	blx	r3
10009dea:	4808      	ldr	r0, [pc, #32]	; (10009e0c <sms_led_gpio_init+0x44>)
10009dec:	4b08      	ldr	r3, [pc, #32]	; (10009e10 <sms_led_gpio_init+0x48>)
10009dee:	4798      	blx	r3
    }
    sms_led_switch_off(SMS_LED_0_PIN);
10009df0:	2016      	movs	r0, #22
10009df2:	4b08      	ldr	r3, [pc, #32]	; (10009e14 <sms_led_gpio_init+0x4c>)
10009df4:	4798      	blx	r3
}
10009df6:	b002      	add	sp, #8
10009df8:	bd10      	pop	{r4, pc}
10009dfa:	46c0      	nop			; (mov r8, r8)
10009dfc:	1000a7e9 	.word	0x1000a7e9
10009e00:	1000a7f9 	.word	0x1000a7f9
10009e04:	10013980 	.word	0x10013980
10009e08:	100127d9 	.word	0x100127d9
10009e0c:	100142a8 	.word	0x100142a8
10009e10:	100126b9 	.word	0x100126b9
10009e14:	10009db9 	.word	0x10009db9

10009e18 <sms_led_blink_start>:
    return gpio_pin_get_output_level(led);
}


void sms_led_blink_start(enum sms_leds led)
{
10009e18:	b510      	push	{r4, lr}
    sms_led_switch_on(led);
10009e1a:	4b0c      	ldr	r3, [pc, #48]	; (10009e4c <sms_led_blink_start+0x34>)
10009e1c:	4798      	blx	r3
    sms_led_blink_cnt = 0;
10009e1e:	2200      	movs	r2, #0
10009e20:	4b0b      	ldr	r3, [pc, #44]	; (10009e50 <sms_led_blink_start+0x38>)
10009e22:	701a      	strb	r2, [r3, #0]
    uint32_t delay = 0;
    switch(timer2_current_mode) {
10009e24:	4b0b      	ldr	r3, [pc, #44]	; (10009e54 <sms_led_blink_start+0x3c>)
10009e26:	781b      	ldrb	r3, [r3, #0]
10009e28:	b2db      	uxtb	r3, r3
10009e2a:	2b02      	cmp	r3, #2
10009e2c:	d002      	beq.n	10009e34 <sms_led_blink_start+0x1c>
10009e2e:	2b03      	cmp	r3, #3
10009e30:	d002      	beq.n	10009e38 <sms_led_blink_start+0x20>
10009e32:	e004      	b.n	10009e3e <sms_led_blink_start+0x26>
        case TIMER2_MODE_LED_STARTUP:
        delay = SMS_BLINK_STARTUP_MS;
10009e34:	2164      	movs	r1, #100	; 0x64
10009e36:	e003      	b.n	10009e40 <sms_led_blink_start+0x28>
        break;
        
        case TIMER2_MODE_LED_SHUTDOWN:
        delay = SMS_BLINK_SHTDWN_MS;
10009e38:	21c8      	movs	r1, #200	; 0xc8
10009e3a:	0049      	lsls	r1, r1, #1
        break;
10009e3c:	e000      	b.n	10009e40 <sms_led_blink_start+0x28>

void sms_led_blink_start(enum sms_leds led)
{
    sms_led_switch_on(led);
    sms_led_blink_cnt = 0;
    uint32_t delay = 0;
10009e3e:	2100      	movs	r1, #0
        
        default:
        break;
    }

    sms_dualtimer_start(TIMER_UNIT_MS, delay, DUALTIMER_TIMER2);
10009e40:	2201      	movs	r2, #1
10009e42:	2001      	movs	r0, #1
10009e44:	4b04      	ldr	r3, [pc, #16]	; (10009e58 <sms_led_blink_start+0x40>)
10009e46:	4798      	blx	r3
}
10009e48:	bd10      	pop	{r4, pc}
10009e4a:	46c0      	nop			; (mov r8, r8)
10009e4c:	10009da9 	.word	0x10009da9
10009e50:	1001700c 	.word	0x1001700c
10009e54:	10016fe9 	.word	0x10016fe9
10009e58:	1000a0e9 	.word	0x1000a0e9

10009e5c <sms_pressure_ms58_reset>:
    }
    return STATUS_ERR_IO;
}

void sms_pressure_ms58_reset(void)
{
10009e5c:	b510      	push	{r4, lr}
10009e5e:	b082      	sub	sp, #8
    //DBG_LOG_DEV("[sms_pressure_ms58_reset]\twriting reset command");
    spi_wdata[0] = MS58_RESET;
10009e60:	4a05      	ldr	r2, [pc, #20]	; (10009e78 <sms_pressure_ms58_reset+0x1c>)
10009e62:	231e      	movs	r3, #30
10009e64:	7013      	strb	r3, [r2, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 1);
10009e66:	3b1d      	subs	r3, #29
10009e68:	9300      	str	r3, [sp, #0]
10009e6a:	4b04      	ldr	r3, [pc, #16]	; (10009e7c <sms_pressure_ms58_reset+0x20>)
10009e6c:	4904      	ldr	r1, [pc, #16]	; (10009e80 <sms_pressure_ms58_reset+0x24>)
10009e6e:	4805      	ldr	r0, [pc, #20]	; (10009e84 <sms_pressure_ms58_reset+0x28>)
10009e70:	4c05      	ldr	r4, [pc, #20]	; (10009e88 <sms_pressure_ms58_reset+0x2c>)
10009e72:	47a0      	blx	r4
}
10009e74:	b002      	add	sp, #8
10009e76:	bd10      	pop	{r4, pc}
10009e78:	10016f3c 	.word	0x10016f3c
10009e7c:	10016f2c 	.word	0x10016f2c
10009e80:	10016fec 	.word	0x10016fec
10009e84:	10016ff8 	.word	0x10016ff8
10009e88:	10009fc9 	.word	0x10009fc9

10009e8c <sms_pressure_startup>:
    gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, false);
}


void sms_pressure_startup(void)
{
10009e8c:	b510      	push	{r4, lr}
    DBG_LOG_DEV("[sms_pressure_startup]\t\tStarting pressure sensor");
10009e8e:	480d      	ldr	r0, [pc, #52]	; (10009ec4 <sms_pressure_startup+0x38>)
10009e90:	4b0d      	ldr	r3, [pc, #52]	; (10009ec8 <sms_pressure_startup+0x3c>)
10009e92:	4798      	blx	r3
10009e94:	480d      	ldr	r0, [pc, #52]	; (10009ecc <sms_pressure_startup+0x40>)
10009e96:	4b0e      	ldr	r3, [pc, #56]	; (10009ed0 <sms_pressure_startup+0x44>)
10009e98:	4798      	blx	r3
    //gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, true); // switch on MS58 pressure sensor
    /* Disable buttons for reset time (~3 ms) to avoid conflict with dualtimer1 */
    sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
10009e9a:	2101      	movs	r1, #1
10009e9c:	2001      	movs	r0, #1
10009e9e:	4b0d      	ldr	r3, [pc, #52]	; (10009ed4 <sms_pressure_startup+0x48>)
10009ea0:	4798      	blx	r3
    pressure_device.ms58_device.current_state = MS58_STATE_RESETTING;
10009ea2:	4b0d      	ldr	r3, [pc, #52]	; (10009ed8 <sms_pressure_startup+0x4c>)
10009ea4:	2101      	movs	r1, #1
10009ea6:	2225      	movs	r2, #37	; 0x25
10009ea8:	5499      	strb	r1, [r3, r2]
    pressure_device.ms58_device.reset_done = false;
10009eaa:	2200      	movs	r2, #0
10009eac:	705a      	strb	r2, [r3, #1]
    /* Write the reset command to MS58 */
    sms_pressure_ms58_reset();
10009eae:	4b0b      	ldr	r3, [pc, #44]	; (10009edc <sms_pressure_startup+0x50>)
10009eb0:	4798      	blx	r3
    timer1_current_mode = TIMER1_MODE_MS58_RESET;
10009eb2:	2202      	movs	r2, #2
10009eb4:	4b0a      	ldr	r3, [pc, #40]	; (10009ee0 <sms_pressure_startup+0x54>)
10009eb6:	701a      	strb	r2, [r3, #0]
    //ulp_ready = false;
    sms_dualtimer_start(TIMER_UNIT_MS, MS58_RESET_WAIT_MS, DUALTIMER_TIMER1);
10009eb8:	2200      	movs	r2, #0
10009eba:	2103      	movs	r1, #3
10009ebc:	2001      	movs	r0, #1
10009ebe:	4b09      	ldr	r3, [pc, #36]	; (10009ee4 <sms_pressure_startup+0x58>)
10009ec0:	4798      	blx	r3
}
10009ec2:	bd10      	pop	{r4, pc}
10009ec4:	10013980 	.word	0x10013980
10009ec8:	100127d9 	.word	0x100127d9
10009ecc:	1001431c 	.word	0x1001431c
10009ed0:	100126b9 	.word	0x100126b9
10009ed4:	10009919 	.word	0x10009919
10009ed8:	10016f4c 	.word	0x10016f4c
10009edc:	10009e5d 	.word	0x10009e5d
10009ee0:	10016ecc 	.word	0x10016ecc
10009ee4:	1000a0e9 	.word	0x1000a0e9

10009ee8 <sms_pressure_define_services>:
    DBG_LOG_DEV("[sms_pressure_ms58_calculate] temperature = %ld  pressure = %ld", pressure_device.ms58_device.temperature, pressure_device.ms58_device.pressure);
}


void sms_pressure_define_services(void)
{
10009ee8:	b510      	push	{r4, lr}
10009eea:	b082      	sub	sp, #8
    at_ble_status_t status;
    uint8_t init_value = 0;
10009eec:	466b      	mov	r3, sp
10009eee:	1dda      	adds	r2, r3, #7
10009ef0:	2300      	movs	r3, #0
10009ef2:	7013      	strb	r3, [r2, #0]
    sms_ble_service_init(BLE_SERV_PRESSURE, &pressure_device.service_handler, &init_value);
10009ef4:	4c0d      	ldr	r4, [pc, #52]	; (10009f2c <sms_pressure_define_services+0x44>)
10009ef6:	0021      	movs	r1, r4
10009ef8:	2001      	movs	r0, #1
10009efa:	4b0d      	ldr	r3, [pc, #52]	; (10009f30 <sms_pressure_define_services+0x48>)
10009efc:	4798      	blx	r3
    if((status = sms_ble_primary_service_define(&pressure_device.service_handler)) != AT_BLE_SUCCESS) {
10009efe:	0020      	movs	r0, r4
10009f00:	4b0c      	ldr	r3, [pc, #48]	; (10009f34 <sms_pressure_define_services+0x4c>)
10009f02:	4798      	blx	r3
10009f04:	1e04      	subs	r4, r0, #0
10009f06:	d007      	beq.n	10009f18 <sms_pressure_define_services+0x30>
        DBG_LOG("[sms_pressure_define_services]\tServices defining failed, reason 0x%x", status);
10009f08:	480b      	ldr	r0, [pc, #44]	; (10009f38 <sms_pressure_define_services+0x50>)
10009f0a:	4b0c      	ldr	r3, [pc, #48]	; (10009f3c <sms_pressure_define_services+0x54>)
10009f0c:	4798      	blx	r3
10009f0e:	0021      	movs	r1, r4
10009f10:	480b      	ldr	r0, [pc, #44]	; (10009f40 <sms_pressure_define_services+0x58>)
10009f12:	4b0c      	ldr	r3, [pc, #48]	; (10009f44 <sms_pressure_define_services+0x5c>)
10009f14:	4798      	blx	r3
10009f16:	e007      	b.n	10009f28 <sms_pressure_define_services+0x40>
    }
    else {
        DBG_LOG_DEV("[sms_pressure_define_services]\tServices defined, SMS pressure handle: %d", pressure_device.service_handler.serv_handle);
10009f18:	4807      	ldr	r0, [pc, #28]	; (10009f38 <sms_pressure_define_services+0x50>)
10009f1a:	4b08      	ldr	r3, [pc, #32]	; (10009f3c <sms_pressure_define_services+0x54>)
10009f1c:	4798      	blx	r3
10009f1e:	4b0a      	ldr	r3, [pc, #40]	; (10009f48 <sms_pressure_define_services+0x60>)
10009f20:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
10009f22:	480a      	ldr	r0, [pc, #40]	; (10009f4c <sms_pressure_define_services+0x64>)
10009f24:	4b07      	ldr	r3, [pc, #28]	; (10009f44 <sms_pressure_define_services+0x5c>)
10009f26:	4798      	blx	r3
    }
10009f28:	b002      	add	sp, #8
10009f2a:	bd10      	pop	{r4, pc}
10009f2c:	10016f78 	.word	0x10016f78
10009f30:	10009709 	.word	0x10009709
10009f34:	100096e5 	.word	0x100096e5
10009f38:	10013980 	.word	0x10013980
10009f3c:	100127d9 	.word	0x100127d9
10009f40:	100143f8 	.word	0x100143f8
10009f44:	100126b9 	.word	0x100126b9
10009f48:	10016f4c 	.word	0x10016f4c
10009f4c:	10014440 	.word	0x10014440

10009f50 <sms_spi_master_configure>:
 *   + mode 3 on SPI0 @ 1 MHz for MPU-9250 IMU
 * - assign SS pin for each slave device
 * - enable SPI
 */ 
void sms_spi_master_configure(void)
{
10009f50:	b530      	push	{r4, r5, lr}
10009f52:	b08d      	sub	sp, #52	; 0x34
    //DBG_LOG_DEV("[spi_master_configure]\tconfiguring SPI masters and attaching slaves...");

    /* Initialize ms58 spi slave device */
    struct spi_config spi_master_config;
    struct spi_slave_inst_config spi_slave_ms58_config;
    spi_slave_inst_get_config_defaults(&spi_slave_ms58_config);
10009f54:	ac01      	add	r4, sp, #4
10009f56:	0020      	movs	r0, r4
10009f58:	4b13      	ldr	r3, [pc, #76]	; (10009fa8 <sms_spi_master_configure+0x58>)
10009f5a:	4798      	blx	r3
    spi_slave_ms58_config.ss_pin = SMS_PRESSURE_SPI_SS_PIN;
10009f5c:	2310      	movs	r3, #16
10009f5e:	7023      	strb	r3, [r4, #0]
    spi_attach_slave(&spi_slave_ms58_instance, &spi_slave_ms58_config);
10009f60:	0021      	movs	r1, r4
10009f62:	4812      	ldr	r0, [pc, #72]	; (10009fac <sms_spi_master_configure+0x5c>)
10009f64:	4b12      	ldr	r3, [pc, #72]	; (10009fb0 <sms_spi_master_configure+0x60>)
10009f66:	4798      	blx	r3
    

    /* Initialize SPI1 master for ms58 */
    spi_get_config_defaults(&spi_master_config);
10009f68:	ac02      	add	r4, sp, #8
10009f6a:	0020      	movs	r0, r4
10009f6c:	4b11      	ldr	r3, [pc, #68]	; (10009fb4 <sms_spi_master_configure+0x64>)
10009f6e:	4798      	blx	r3
    spi_master_config.clock_divider = SPI_MASTER_MS58_CLOCK_DIV;
10009f70:	2368      	movs	r3, #104	; 0x68
10009f72:	7123      	strb	r3, [r4, #4]
    spi_master_config.transfer_mode = SPI_MASTER_MS58_MODE;
10009f74:	2300      	movs	r3, #0
10009f76:	70a3      	strb	r3, [r4, #2]
    spi_master_config.pin_number_pad[0] = SPI_MASTER_MS58_PIN_SCK;
10009f78:	3311      	adds	r3, #17
10009f7a:	60a3      	str	r3, [r4, #8]
    spi_master_config.pinmux_sel_pad[0] = SPI_MASTER_MS58_MUX_SCK;
10009f7c:	3b0d      	subs	r3, #13
10009f7e:	61a3      	str	r3, [r4, #24]
    spi_master_config.pin_number_pad[1] = SPI_MASTER_MS58_PIN_MOSI;
10009f80:	2213      	movs	r2, #19
10009f82:	60e2      	str	r2, [r4, #12]
    spi_master_config.pinmux_sel_pad[1] = SPI_MASTER_MS58_MUX_MOSI;
10009f84:	61e3      	str	r3, [r4, #28]
    spi_master_config.pin_number_pad[2] = SPI_MASTER_MS58_PIN_SSN;
10009f86:	3a14      	subs	r2, #20
10009f88:	6122      	str	r2, [r4, #16]
    spi_master_config.pinmux_sel_pad[2] = SPI_MASTER_MS58_MUX_SSN;
10009f8a:	6222      	str	r2, [r4, #32]
    spi_master_config.pin_number_pad[3] = SPI_MASTER_MS58_MISO;
10009f8c:	3213      	adds	r2, #19
10009f8e:	6162      	str	r2, [r4, #20]
    spi_master_config.pinmux_sel_pad[3] = SPI_MASTER_MS58_MUX_MISO;
10009f90:	6263      	str	r3, [r4, #36]	; 0x24
    spi_init(&spi_master_ms58_instance, SPI_MASTER_MS58_PORT, &spi_master_config);
10009f92:	4d09      	ldr	r5, [pc, #36]	; (10009fb8 <sms_spi_master_configure+0x68>)
10009f94:	0022      	movs	r2, r4
10009f96:	4909      	ldr	r1, [pc, #36]	; (10009fbc <sms_spi_master_configure+0x6c>)
10009f98:	0028      	movs	r0, r5
10009f9a:	4b09      	ldr	r3, [pc, #36]	; (10009fc0 <sms_spi_master_configure+0x70>)
10009f9c:	4798      	blx	r3
    spi_enable(&spi_master_ms58_instance);
10009f9e:	0028      	movs	r0, r5
10009fa0:	4b08      	ldr	r3, [pc, #32]	; (10009fc4 <sms_spi_master_configure+0x74>)
10009fa2:	4798      	blx	r3
}
10009fa4:	b00d      	add	sp, #52	; 0x34
10009fa6:	bd30      	pop	{r4, r5, pc}
10009fa8:	1000a195 	.word	0x1000a195
10009fac:	10016fec 	.word	0x10016fec
10009fb0:	1000a1cd 	.word	0x1000a1cd
10009fb4:	1000a1a1 	.word	0x1000a1a1
10009fb8:	10016ff8 	.word	0x10016ff8
10009fbc:	40007000 	.word	0x40007000
10009fc0:	1000a29d 	.word	0x1000a29d
10009fc4:	1000a20d 	.word	0x1000a20d

10009fc8 <sms_spi_master_transceive>:
/* SPI transceive function:
 * - enable selected slave
 * - start transceive blocking job
 * - when job returned, disable selected slave
 */
enum status_code sms_spi_master_transceive(struct spi_module *const module, struct spi_slave_inst *const slave, uint8_t *tx_data, uint8_t *rx_data, uint16_t len) {
10009fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
10009fca:	b083      	sub	sp, #12
10009fcc:	0004      	movs	r4, r0
10009fce:	000d      	movs	r5, r1
10009fd0:	9200      	str	r2, [sp, #0]
10009fd2:	9301      	str	r3, [sp, #4]
10009fd4:	ab08      	add	r3, sp, #32
10009fd6:	881e      	ldrh	r6, [r3, #0]
    enum status_code retVal;
    /* Enable slave */
    //DBG_LOG_CONT_DEV(" selecting slave...");
    spi_select_slave(module, slave, true);
10009fd8:	2201      	movs	r2, #1
10009fda:	4f08      	ldr	r7, [pc, #32]	; (10009ffc <sms_spi_master_transceive+0x34>)
10009fdc:	47b8      	blx	r7
    /* Write SPI data */
    //DBG_LOG_CONT_DEV(" writing data...");
    retVal = spi_transceive_buffer_wait(module, tx_data, rx_data, len);
10009fde:	0033      	movs	r3, r6
10009fe0:	9a01      	ldr	r2, [sp, #4]
10009fe2:	9900      	ldr	r1, [sp, #0]
10009fe4:	0020      	movs	r0, r4
10009fe6:	4e06      	ldr	r6, [pc, #24]	; (1000a000 <sms_spi_master_transceive+0x38>)
10009fe8:	47b0      	blx	r6
10009fea:	0006      	movs	r6, r0
    /* Disable slave */
    //DBG_LOG_CONT_DEV(" de-selecting slave...");
    spi_select_slave(module, slave, false);
10009fec:	2200      	movs	r2, #0
10009fee:	0029      	movs	r1, r5
10009ff0:	0020      	movs	r0, r4
10009ff2:	47b8      	blx	r7
    //DBG_LOG_CONT_DEV(" done!");
    return retVal;
}
10009ff4:	0030      	movs	r0, r6
10009ff6:	b003      	add	sp, #12
10009ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009ffa:	46c0      	nop			; (mov r8, r8)
10009ffc:	1000a485 	.word	0x1000a485
1000a000:	1000a401 	.word	0x1000a401

1000a004 <sms_timer_aon_callback>:

#include "sms_timer.h"

/* AON SLEEP TIMER */
void sms_timer_aon_callback(void)
{
1000a004:	b510      	push	{r4, lr}
    sms_current_interrupt.source = INT_AON_TIMER;
1000a006:	2204      	movs	r2, #4
1000a008:	4b04      	ldr	r3, [pc, #16]	; (1000a01c <sms_timer_aon_callback+0x18>)
1000a00a:	701a      	strb	r2, [r3, #0]
    send_plf_int_msg_ind(AON_SLEEP_TIMER_EXPIRY_CALLBACK, AON_TIMER_EXPIRED, NULL, 0);
1000a00c:	2300      	movs	r3, #0
1000a00e:	2200      	movs	r2, #0
1000a010:	2103      	movs	r1, #3
1000a012:	2042      	movs	r0, #66	; 0x42
1000a014:	4c02      	ldr	r4, [pc, #8]	; (1000a020 <sms_timer_aon_callback+0x1c>)
1000a016:	47a0      	blx	r4
}
1000a018:	bd10      	pop	{r4, pc}
1000a01a:	46c0      	nop			; (mov r8, r8)
1000a01c:	10016fd0 	.word	0x10016fd0
1000a020:	1000d85d 	.word	0x1000d85d

1000a024 <sms_timer_aon_init>:

void sms_timer_aon_init(uint32_t cnt, enum aon_sleep_timer_mode cnt_mode)
{
1000a024:	b530      	push	{r4, r5, lr}
1000a026:	b083      	sub	sp, #12
1000a028:	0004      	movs	r4, r0
1000a02a:	000d      	movs	r5, r1
    struct aon_sleep_timer_config config_aon_sleep_timer;
    aon_sleep_timer_get_config_defaults(&config_aon_sleep_timer);
1000a02c:	4668      	mov	r0, sp
1000a02e:	4b05      	ldr	r3, [pc, #20]	; (1000a044 <sms_timer_aon_init+0x20>)
1000a030:	4798      	blx	r3
    config_aon_sleep_timer.mode = cnt_mode;
1000a032:	466b      	mov	r3, sp
1000a034:	705d      	strb	r5, [r3, #1]
    config_aon_sleep_timer.counter = cnt;
1000a036:	9401      	str	r4, [sp, #4]
    aon_sleep_timer_init(&config_aon_sleep_timer);
1000a038:	4668      	mov	r0, sp
1000a03a:	4b03      	ldr	r3, [pc, #12]	; (1000a048 <sms_timer_aon_init+0x24>)
1000a03c:	4798      	blx	r3
}
1000a03e:	b003      	add	sp, #12
1000a040:	bd30      	pop	{r4, r5, pc}
1000a042:	46c0      	nop			; (mov r8, r8)
1000a044:	10008155 	.word	0x10008155
1000a048:	100081c9 	.word	0x100081c9

1000a04c <sms_timer_aon_disable>:

void sms_timer_aon_disable(void)
{
1000a04c:	b510      	push	{r4, lr}
    aon_sleep_timer_disable();
1000a04e:	4b01      	ldr	r3, [pc, #4]	; (1000a054 <sms_timer_aon_disable+0x8>)
1000a050:	4798      	blx	r3
}
1000a052:	bd10      	pop	{r4, pc}
1000a054:	10008165 	.word	0x10008165

1000a058 <sms_timer_aon_register_callback>:

void sms_timer_aon_register_callback(void)
{
1000a058:	b510      	push	{r4, lr}
    aon_sleep_timer_register_callback(sms_timer_aon_callback);
1000a05a:	4804      	ldr	r0, [pc, #16]	; (1000a06c <sms_timer_aon_register_callback+0x14>)
1000a05c:	4b04      	ldr	r3, [pc, #16]	; (1000a070 <sms_timer_aon_register_callback+0x18>)
1000a05e:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000a060:	2280      	movs	r2, #128	; 0x80
1000a062:	0512      	lsls	r2, r2, #20
1000a064:	4b03      	ldr	r3, [pc, #12]	; (1000a074 <sms_timer_aon_register_callback+0x1c>)
1000a066:	601a      	str	r2, [r3, #0]
    NVIC_EnableIRQ(AON_SLEEP_TIMER0_IRQn);
}
1000a068:	bd10      	pop	{r4, pc}
1000a06a:	46c0      	nop			; (mov r8, r8)
1000a06c:	1000a005 	.word	0x1000a005
1000a070:	100081b1 	.word	0x100081b1
1000a074:	e000e100 	.word	0xe000e100

1000a078 <sms_timer_aon_unregister_callback>:

void sms_timer_aon_unregister_callback(void)
{
1000a078:	b510      	push	{r4, lr}
    aon_sleep_timer_unregister_callback();
1000a07a:	4b04      	ldr	r3, [pc, #16]	; (1000a08c <sms_timer_aon_unregister_callback+0x14>)
1000a07c:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000a07e:	2180      	movs	r1, #128	; 0x80
1000a080:	0509      	lsls	r1, r1, #20
1000a082:	2380      	movs	r3, #128	; 0x80
1000a084:	4a02      	ldr	r2, [pc, #8]	; (1000a090 <sms_timer_aon_unregister_callback+0x18>)
1000a086:	50d1      	str	r1, [r2, r3]
    NVIC_DisableIRQ(AON_SLEEP_TIMER0_IRQn);
}
1000a088:	bd10      	pop	{r4, pc}
1000a08a:	46c0      	nop			; (mov r8, r8)
1000a08c:	100081bd 	.word	0x100081bd
1000a090:	e000e100 	.word	0xe000e100

1000a094 <sms_dualtimer_init>:
    count = (uint32_t *)0;
}

/* DUALTIMER */
void sms_dualtimer_init(void)
{
1000a094:	b510      	push	{r4, lr}
1000a096:	b088      	sub	sp, #32
    struct dualtimer_config config_dualtimer;
    dualtimer_get_config_defaults(&config_dualtimer);
1000a098:	ac01      	add	r4, sp, #4
1000a09a:	0020      	movs	r0, r4
1000a09c:	4b08      	ldr	r3, [pc, #32]	; (1000a0c0 <sms_dualtimer_init+0x2c>)
1000a09e:	4798      	blx	r3

    config_dualtimer.timer1.load_value = SMS_DUALTIMER_LOAD_S;
1000a0a0:	4a08      	ldr	r2, [pc, #32]	; (1000a0c4 <sms_dualtimer_init+0x30>)
1000a0a2:	60a2      	str	r2, [r4, #8]
    config_dualtimer.timer1.counter_mode = DUALTIMER_ONE_SHOT_MODE;
1000a0a4:	2300      	movs	r3, #0
1000a0a6:	7063      	strb	r3, [r4, #1]
    config_dualtimer.timer2.load_value = SMS_DUALTIMER_LOAD_S;
1000a0a8:	6162      	str	r2, [r4, #20]
    config_dualtimer.timer2.counter_mode = DUALTIMER_ONE_SHOT_MODE;
1000a0aa:	7363      	strb	r3, [r4, #13]

    dualtimer_init(&config_dualtimer);
1000a0ac:	0020      	movs	r0, r4
1000a0ae:	4b06      	ldr	r3, [pc, #24]	; (1000a0c8 <sms_dualtimer_init+0x34>)
1000a0b0:	4798      	blx	r3
    dualtimer_disable(DUALTIMER_TIMER1);
1000a0b2:	2000      	movs	r0, #0
1000a0b4:	4c05      	ldr	r4, [pc, #20]	; (1000a0cc <sms_dualtimer_init+0x38>)
1000a0b6:	47a0      	blx	r4
    dualtimer_disable(DUALTIMER_TIMER2);
1000a0b8:	2001      	movs	r0, #1
1000a0ba:	47a0      	blx	r4
}
1000a0bc:	b008      	add	sp, #32
1000a0be:	bd10      	pop	{r4, pc}
1000a0c0:	1000a4e9 	.word	0x1000a4e9
1000a0c4:	018cba80 	.word	0x018cba80
1000a0c8:	1000a57d 	.word	0x1000a57d
1000a0cc:	1000a559 	.word	0x1000a559

1000a0d0 <sms_dualtimer_register_callback>:

void sms_dualtimer_register_callback(enum dualtimer_timer tmr, sms_dualtimer_callback_t cb_handler)
{
1000a0d0:	b510      	push	{r4, lr}
1000a0d2:	0004      	movs	r4, r0
    dualtimer_register_callback(tmr, cb_handler);
1000a0d4:	4b02      	ldr	r3, [pc, #8]	; (1000a0e0 <sms_dualtimer_register_callback+0x10>)
1000a0d6:	4798      	blx	r3
    NVIC_EnableIRQ(DUALTIMER0_IRQn);
}

void sms_dualtimer_stop(enum dualtimer_timer tmr)
{
    dualtimer_disable(tmr);
1000a0d8:	0020      	movs	r0, r4
1000a0da:	4b02      	ldr	r3, [pc, #8]	; (1000a0e4 <sms_dualtimer_register_callback+0x14>)
1000a0dc:	4798      	blx	r3

void sms_dualtimer_register_callback(enum dualtimer_timer tmr, sms_dualtimer_callback_t cb_handler)
{
    dualtimer_register_callback(tmr, cb_handler);
    sms_dualtimer_stop(tmr);
}
1000a0de:	bd10      	pop	{r4, pc}
1000a0e0:	1000a681 	.word	0x1000a681
1000a0e4:	1000a559 	.word	0x1000a559

1000a0e8 <sms_dualtimer_start>:

void sms_dualtimer_start(timer_unit_type_t unit, uint32_t delay, enum dualtimer_timer tmr)
{
1000a0e8:	b510      	push	{r4, lr}
1000a0ea:	0014      	movs	r4, r2
    uint32_t timer_load = 1;
    switch(unit) {
1000a0ec:	2801      	cmp	r0, #1
1000a0ee:	d006      	beq.n	1000a0fe <sms_dualtimer_start+0x16>
1000a0f0:	2800      	cmp	r0, #0
1000a0f2:	d002      	beq.n	1000a0fa <sms_dualtimer_start+0x12>
1000a0f4:	2802      	cmp	r0, #2
1000a0f6:	d004      	beq.n	1000a102 <sms_dualtimer_start+0x1a>
1000a0f8:	e005      	b.n	1000a106 <sms_dualtimer_start+0x1e>
        case TIMER_UNIT_US:
        timer_load = SMS_DUALTIMER_LOAD_US;
1000a0fa:	221a      	movs	r2, #26
1000a0fc:	e004      	b.n	1000a108 <sms_dualtimer_start+0x20>
        break;
        
        case TIMER_UNIT_MS:
        timer_load = SMS_DUALTIMER_LOAD_MS;
1000a0fe:	4a0c      	ldr	r2, [pc, #48]	; (1000a130 <sms_dualtimer_start+0x48>)
        break;
1000a100:	e002      	b.n	1000a108 <sms_dualtimer_start+0x20>
        
        case TIMER_UNIT_S:
        timer_load = SMS_DUALTIMER_LOAD_S;
1000a102:	4a0c      	ldr	r2, [pc, #48]	; (1000a134 <sms_dualtimer_start+0x4c>)
        break;
1000a104:	e000      	b.n	1000a108 <sms_dualtimer_start+0x20>
    sms_dualtimer_stop(tmr);
}

void sms_dualtimer_start(timer_unit_type_t unit, uint32_t delay, enum dualtimer_timer tmr)
{
    uint32_t timer_load = 1;
1000a106:	2201      	movs	r2, #1
        
        default:
        break;
    }
    
    if(delay <= 0) {
1000a108:	2900      	cmp	r1, #0
1000a10a:	d101      	bne.n	1000a110 <sms_dualtimer_start+0x28>
        //DBG_LOG("[sms_dualtimer_start]\tWarning! Delay value < 0... setting to 1000");
        delay = 1000;
1000a10c:	21fa      	movs	r1, #250	; 0xfa
1000a10e:	0089      	lsls	r1, r1, #2
    }
    
    ulp_ready = false;
1000a110:	2000      	movs	r0, #0
1000a112:	4b09      	ldr	r3, [pc, #36]	; (1000a138 <sms_dualtimer_start+0x50>)
1000a114:	7018      	strb	r0, [r3, #0]
    //DBG_LOG_DEV("[sms_dualtimer_start]\t\tStarting timer%d... load: %ld, delay: %ld", (tmr+1), timer_load, delay);
    dualtimer_set_counter(tmr, DUALTIMER_SET_CURRUNT_REG, timer_load * delay);
1000a116:	434a      	muls	r2, r1
1000a118:	2100      	movs	r1, #0
1000a11a:	0020      	movs	r0, r4
1000a11c:	4b07      	ldr	r3, [pc, #28]	; (1000a13c <sms_dualtimer_start+0x54>)
1000a11e:	4798      	blx	r3
    dualtimer_enable(tmr);
1000a120:	0020      	movs	r0, r4
1000a122:	4b07      	ldr	r3, [pc, #28]	; (1000a140 <sms_dualtimer_start+0x58>)
1000a124:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000a126:	2280      	movs	r2, #128	; 0x80
1000a128:	01d2      	lsls	r2, r2, #7
1000a12a:	4b06      	ldr	r3, [pc, #24]	; (1000a144 <sms_dualtimer_start+0x5c>)
1000a12c:	601a      	str	r2, [r3, #0]
    NVIC_EnableIRQ(DUALTIMER0_IRQn);
}
1000a12e:	bd10      	pop	{r4, pc}
1000a130:	00006590 	.word	0x00006590
1000a134:	018cba80 	.word	0x018cba80
1000a138:	10016ece 	.word	0x10016ece
1000a13c:	1000a50d 	.word	0x1000a50d
1000a140:	1000a535 	.word	0x1000a535
1000a144:	e000e100 	.word	0xe000e100

1000a148 <sms_dualtimer_stop>:

void sms_dualtimer_stop(enum dualtimer_timer tmr)
{
1000a148:	b510      	push	{r4, lr}
    dualtimer_disable(tmr);
1000a14a:	4b01      	ldr	r3, [pc, #4]	; (1000a150 <sms_dualtimer_stop+0x8>)
1000a14c:	4798      	blx	r3
}
1000a14e:	bd10      	pop	{r4, pc}
1000a150:	1000a559 	.word	0x1000a559

1000a154 <sms_dualtimer1_cb>:

void sms_dualtimer1_cb(void)
{
1000a154:	b510      	push	{r4, lr}
    sms_current_interrupt.source = INT_DUALTIMER1;
1000a156:	2205      	movs	r2, #5
1000a158:	4b04      	ldr	r3, [pc, #16]	; (1000a16c <sms_dualtimer1_cb+0x18>)
1000a15a:	701a      	strb	r2, [r3, #0]
    send_plf_int_msg_ind(DUALTIMER_TIMER1_CALLBACK, TIMER_EXPIRED_CALLBACK_TYPE_DETECT, NULL, 0);
1000a15c:	2300      	movs	r3, #0
1000a15e:	2200      	movs	r2, #0
1000a160:	2101      	movs	r1, #1
1000a162:	2040      	movs	r0, #64	; 0x40
1000a164:	4c02      	ldr	r4, [pc, #8]	; (1000a170 <sms_dualtimer1_cb+0x1c>)
1000a166:	47a0      	blx	r4
}
1000a168:	bd10      	pop	{r4, pc}
1000a16a:	46c0      	nop			; (mov r8, r8)
1000a16c:	10016fd0 	.word	0x10016fd0
1000a170:	1000d85d 	.word	0x1000d85d

1000a174 <sms_dualtimer2_cb>:

void sms_dualtimer2_cb(void)
{
1000a174:	b510      	push	{r4, lr}
    sms_current_interrupt.source = INT_DUALTIMER2;
1000a176:	2206      	movs	r2, #6
1000a178:	4b04      	ldr	r3, [pc, #16]	; (1000a18c <sms_dualtimer2_cb+0x18>)
1000a17a:	701a      	strb	r2, [r3, #0]
    send_plf_int_msg_ind(DUALTIMER_TIMER2_CALLBACK, TIMER_EXPIRED_CALLBACK_TYPE_DETECT, NULL, 0);
1000a17c:	2300      	movs	r3, #0
1000a17e:	2200      	movs	r2, #0
1000a180:	2101      	movs	r1, #1
1000a182:	2041      	movs	r0, #65	; 0x41
1000a184:	4c02      	ldr	r4, [pc, #8]	; (1000a190 <sms_dualtimer2_cb+0x1c>)
1000a186:	47a0      	blx	r4
}
1000a188:	bd10      	pop	{r4, pc}
1000a18a:	46c0      	nop			; (mov r8, r8)
1000a18c:	10016fd0 	.word	0x10016fd0
1000a190:	1000d85d 	.word	0x1000d85d

1000a194 <spi_slave_inst_get_config_defaults>:
void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
	Assert(config);

	config->ss_pin          = PIN_LP_GPIO_12;
1000a194:	230c      	movs	r3, #12
1000a196:	7003      	strb	r3, [r0, #0]
	config->address_enabled = false;
1000a198:	2300      	movs	r3, #0
1000a19a:	7043      	strb	r3, [r0, #1]
	config->address         = 0;
1000a19c:	7083      	strb	r3, [r0, #2]
}
1000a19e:	4770      	bx	lr

1000a1a0 <spi_get_config_defaults>:
void spi_get_config_defaults(
		struct spi_config *const config)
{
	Assert(config);

	config->mode             = SPI_MODE_MASTER;
1000a1a0:	2301      	movs	r3, #1
1000a1a2:	7003      	strb	r3, [r0, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
1000a1a4:	2300      	movs	r3, #0
1000a1a6:	7043      	strb	r3, [r0, #1]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
1000a1a8:	7083      	strb	r3, [r0, #2]
	config->clock_source     = SPI_CLK_INPUT_0;
1000a1aa:	70c3      	strb	r3, [r0, #3]
	config->clock_divider    = 129;
1000a1ac:	3381      	adds	r3, #129	; 0x81
1000a1ae:	7103      	strb	r3, [r0, #4]

	config->pin_number_pad[0] = PIN_LP_GPIO_10;
1000a1b0:	3b77      	subs	r3, #119	; 0x77
1000a1b2:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_11;
1000a1b4:	3301      	adds	r3, #1
1000a1b6:	60c3      	str	r3, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_12;
1000a1b8:	3301      	adds	r3, #1
1000a1ba:	6103      	str	r3, [r0, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_13;
1000a1bc:	3301      	adds	r3, #1
1000a1be:	6143      	str	r3, [r0, #20]

	config->pinmux_sel_pad[0] = MUX_LP_GPIO_10_SPI0_SCK;
1000a1c0:	3b0b      	subs	r3, #11
1000a1c2:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_11_SPI0_MOSI;
1000a1c4:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_12_SPI0_SSN;
1000a1c6:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_13_SPI0_MISO;
1000a1c8:	6243      	str	r3, [r0, #36]	; 0x24
};
1000a1ca:	4770      	bx	lr

1000a1cc <spi_attach_slave>:
 *
 */
void spi_attach_slave(
		struct spi_slave_inst *const slave,
		struct spi_slave_inst_config *const config)
{
1000a1cc:	b530      	push	{r4, r5, lr}
1000a1ce:	b083      	sub	sp, #12
1000a1d0:	0004      	movs	r4, r0
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
1000a1d2:	780b      	ldrb	r3, [r1, #0]
1000a1d4:	7003      	strb	r3, [r0, #0]
	slave->address_enabled = config->address_enabled;
1000a1d6:	784b      	ldrb	r3, [r1, #1]
1000a1d8:	7043      	strb	r3, [r0, #1]
	slave->address         = config->address;
1000a1da:	788b      	ldrb	r3, [r1, #2]
1000a1dc:	7083      	strb	r3, [r0, #2]

	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);
1000a1de:	ad01      	add	r5, sp, #4
1000a1e0:	0028      	movs	r0, r5
1000a1e2:	4b07      	ldr	r3, [pc, #28]	; (1000a200 <spi_attach_slave+0x34>)
1000a1e4:	4798      	blx	r3
	config_gpio.direction = GPIO_PIN_DIR_OUTPUT;
1000a1e6:	2301      	movs	r3, #1
1000a1e8:	702b      	strb	r3, [r5, #0]
	gpio_pin_set_config(slave->ss_pin, &config_gpio);
1000a1ea:	7820      	ldrb	r0, [r4, #0]
1000a1ec:	0029      	movs	r1, r5
1000a1ee:	4b05      	ldr	r3, [pc, #20]	; (1000a204 <spi_attach_slave+0x38>)
1000a1f0:	4798      	blx	r3

	gpio_pin_set_output_level(slave->ss_pin, true);
1000a1f2:	7820      	ldrb	r0, [r4, #0]
1000a1f4:	2101      	movs	r1, #1
1000a1f6:	4b04      	ldr	r3, [pc, #16]	; (1000a208 <spi_attach_slave+0x3c>)
1000a1f8:	4798      	blx	r3
}
1000a1fa:	b003      	add	sp, #12
1000a1fc:	bd30      	pop	{r4, r5, pc}
1000a1fe:	46c0      	nop			; (mov r8, r8)
1000a200:	1000a7e9 	.word	0x1000a7e9
1000a204:	1000a7f9 	.word	0x1000a7f9
1000a208:	1000a9b1 	.word	0x1000a9b1

1000a20c <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void spi_enable(struct spi_module *const module)
{
	Spi *const spi_module = (module->hw);
1000a20c:	6803      	ldr	r3, [r0, #0]
		NVIC_EnableIRQ(SPI1_TX_IRQn);
	}
#endif

	/* Enable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = SPI_MODULE_ENABLE_ENABLE;
1000a20e:	2201      	movs	r2, #1
1000a210:	761a      	strb	r2, [r3, #24]
}
1000a212:	4770      	bx	lr

1000a214 <spi_disable>:
 * This function will disable the SPI module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void spi_disable(struct spi_module *const module)
{
1000a214:	b510      	push	{r4, lr}
		NVIC_DisableIRQ(SPI1_TX_IRQn);
	}
#  endif

	/* Disable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
1000a216:	2300      	movs	r3, #0
1000a218:	6802      	ldr	r2, [r0, #0]
1000a21a:	7613      	strb	r3, [r2, #24]
 */
static void _spi_clock_disable(struct spi_module *const module)
{
	Assert(module);

	Spi *const spi_module = (module->hw);
1000a21c:	6803      	ldr	r3, [r0, #0]

	if (spi_module == (void *)SPI0) {
1000a21e:	4a0d      	ldr	r2, [pc, #52]	; (1000a254 <spi_disable+0x40>)
1000a220:	4293      	cmp	r3, r2
1000a222:	d109      	bne.n	1000a238 <spi_disable+0x24>
		system_clock_peripheral_disable(PERIPHERAL_SPI0_SCK_CLK);
1000a224:	2041      	movs	r0, #65	; 0x41
1000a226:	4c0c      	ldr	r4, [pc, #48]	; (1000a258 <spi_disable+0x44>)
1000a228:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_SCK_PHASE);
1000a22a:	2026      	movs	r0, #38	; 0x26
1000a22c:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_IF);
1000a22e:	2038      	movs	r0, #56	; 0x38
1000a230:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_CORE);
1000a232:	2001      	movs	r0, #1
1000a234:	47a0      	blx	r4
1000a236:	e00b      	b.n	1000a250 <spi_disable+0x3c>
	} else if (spi_module == (void *)SPI1) {
1000a238:	4a08      	ldr	r2, [pc, #32]	; (1000a25c <spi_disable+0x48>)
1000a23a:	4293      	cmp	r3, r2
1000a23c:	d108      	bne.n	1000a250 <spi_disable+0x3c>
		system_clock_peripheral_disable(PERIPHERAL_SPI1_SCK_CLK);
1000a23e:	2042      	movs	r0, #66	; 0x42
1000a240:	4c05      	ldr	r4, [pc, #20]	; (1000a258 <spi_disable+0x44>)
1000a242:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_SCK_PHASE);
1000a244:	2027      	movs	r0, #39	; 0x27
1000a246:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_IF);
1000a248:	2039      	movs	r0, #57	; 0x39
1000a24a:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_CORE);
1000a24c:	2002      	movs	r0, #2
1000a24e:	47a0      	blx	r4
#  endif

	/* Disable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
	_spi_clock_disable(module);
}
1000a250:	bd10      	pop	{r4, pc}
1000a252:	46c0      	nop			; (mov r8, r8)
1000a254:	40006000 	.word	0x40006000
1000a258:	1000b149 	.word	0x1000b149
1000a25c:	40007000 	.word	0x40007000

1000a260 <spi_reset>:
 * disable it.
 *
 * \param[in,out] module Pointer to the software instance struct
 */
void spi_reset(struct spi_module *const module)
{
1000a260:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Spi *const spi_module = (module->hw);
1000a262:	6804      	ldr	r4, [r0, #0]

	/* Disable the module */
	spi_disable(module);
1000a264:	4b09      	ldr	r3, [pc, #36]	; (1000a28c <spi_reset+0x2c>)
1000a266:	4798      	blx	r3

	/* Software reset the module */
	if(spi_module == (void *)SPI0) {
1000a268:	4b09      	ldr	r3, [pc, #36]	; (1000a290 <spi_reset+0x30>)
1000a26a:	429c      	cmp	r4, r3
1000a26c:	d105      	bne.n	1000a27a <spi_reset+0x1a>
		system_peripheral_reset(PERIPHERAL_SPI0_CORE);
1000a26e:	2001      	movs	r0, #1
1000a270:	4c08      	ldr	r4, [pc, #32]	; (1000a294 <spi_reset+0x34>)
1000a272:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_SPI0_IF);
1000a274:	2038      	movs	r0, #56	; 0x38
1000a276:	47a0      	blx	r4
1000a278:	e007      	b.n	1000a28a <spi_reset+0x2a>
	} else if (spi_module == (void *)SPI1) {
1000a27a:	4b07      	ldr	r3, [pc, #28]	; (1000a298 <spi_reset+0x38>)
1000a27c:	429c      	cmp	r4, r3
1000a27e:	d104      	bne.n	1000a28a <spi_reset+0x2a>
		system_peripheral_reset(PERIPHERAL_SPI1_CORE);
1000a280:	2002      	movs	r0, #2
1000a282:	4c04      	ldr	r4, [pc, #16]	; (1000a294 <spi_reset+0x34>)
1000a284:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_SPI1_IF);
1000a286:	2039      	movs	r0, #57	; 0x39
1000a288:	47a0      	blx	r4
	}
}
1000a28a:	bd10      	pop	{r4, pc}
1000a28c:	1000a215 	.word	0x1000a215
1000a290:	40006000 	.word	0x40006000
1000a294:	1000b4b5 	.word	0x1000b4b5
1000a298:	40007000 	.word	0x40007000

1000a29c <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Spi *const hw,
		const struct spi_config *const config)
{
1000a29c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a29e:	465f      	mov	r7, fp
1000a2a0:	4646      	mov	r6, r8
1000a2a2:	b4c0      	push	{r6, r7}
1000a2a4:	b083      	sub	sp, #12
1000a2a6:	0006      	movs	r6, r0
1000a2a8:	4688      	mov	r8, r1
1000a2aa:	0015      	movs	r5, r2
	Assert(config);

	uint8_t idx;

	/* Initialize device instance */
	module->hw = hw;
1000a2ac:	6031      	str	r1, [r6, #0]

	Spi *const spi_module = (module->hw);

	/* Check if module is enabled. */
	if (spi_module->SPI_MODULE_ENABLE.reg & SPI_MODULE_ENABLE_MASK) {
1000a2ae:	7e0b      	ldrb	r3, [r1, #24]
1000a2b0:	07db      	lsls	r3, r3, #31
1000a2b2:	d501      	bpl.n	1000a2b8 <spi_init+0x1c>
		spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
1000a2b4:	2300      	movs	r3, #0
1000a2b6:	760b      	strb	r3, [r1, #24]
	}

	spi_reset(module);
1000a2b8:	0030      	movs	r0, r6
1000a2ba:	4b4a      	ldr	r3, [pc, #296]	; (1000a3e4 <spi_init+0x148>)
1000a2bc:	4798      	blx	r3
 */
static void _spi_clock_enable(struct spi_module *const module)
{
	Assert(module);

	Spi *const spi_module = (module->hw);
1000a2be:	6833      	ldr	r3, [r6, #0]

	if (spi_module == (void *)SPI0) {
1000a2c0:	4a49      	ldr	r2, [pc, #292]	; (1000a3e8 <spi_init+0x14c>)
1000a2c2:	4293      	cmp	r3, r2
1000a2c4:	d109      	bne.n	1000a2da <spi_init+0x3e>
		system_clock_peripheral_enable(PERIPHERAL_SPI0_SCK_CLK);
1000a2c6:	2041      	movs	r0, #65	; 0x41
1000a2c8:	4c48      	ldr	r4, [pc, #288]	; (1000a3ec <spi_init+0x150>)
1000a2ca:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_SCK_PHASE);
1000a2cc:	2026      	movs	r0, #38	; 0x26
1000a2ce:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_IF);
1000a2d0:	2038      	movs	r0, #56	; 0x38
1000a2d2:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_CORE);
1000a2d4:	2001      	movs	r0, #1
1000a2d6:	47a0      	blx	r4
1000a2d8:	e00b      	b.n	1000a2f2 <spi_init+0x56>
	} else if (spi_module == (void *)SPI1) {
1000a2da:	4a45      	ldr	r2, [pc, #276]	; (1000a3f0 <spi_init+0x154>)
1000a2dc:	4293      	cmp	r3, r2
1000a2de:	d108      	bne.n	1000a2f2 <spi_init+0x56>
		system_clock_peripheral_enable(PERIPHERAL_SPI1_SCK_CLK);
1000a2e0:	2042      	movs	r0, #66	; 0x42
1000a2e2:	4c42      	ldr	r4, [pc, #264]	; (1000a3ec <spi_init+0x150>)
1000a2e4:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_SCK_PHASE);
1000a2e6:	2027      	movs	r0, #39	; 0x27
1000a2e8:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_IF);
1000a2ea:	2039      	movs	r0, #57	; 0x39
1000a2ec:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_CORE);
1000a2ee:	2002      	movs	r0, #2
1000a2f0:	47a0      	blx	r4
	}
#endif

	//Program the pinmux.
	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);
1000a2f2:	a801      	add	r0, sp, #4
1000a2f4:	4b3f      	ldr	r3, [pc, #252]	; (1000a3f4 <spi_init+0x158>)
1000a2f6:	4798      	blx	r3
1000a2f8:	002c      	movs	r4, r5
1000a2fa:	3408      	adds	r4, #8
1000a2fc:	2318      	movs	r3, #24
1000a2fe:	469b      	mov	fp, r3
1000a300:	44ab      	add	fp, r5
1000a302:	0027      	movs	r7, r4

	/* Set the pinmux for this spi module. */
	for(idx = 0; idx < 4; idx++) {
		if (config->pin_number_pad[idx] != PINMUX_UNUSED) {
1000a304:	6820      	ldr	r0, [r4, #0]
1000a306:	1c43      	adds	r3, r0, #1
1000a308:	d011      	beq.n	1000a32e <spi_init+0x92>
			if (config->mode == SPI_MODE_MASTER) {
1000a30a:	782b      	ldrb	r3, [r5, #0]
1000a30c:	2b01      	cmp	r3, #1
1000a30e:	d102      	bne.n	1000a316 <spi_init+0x7a>
				config_gpio.direction = GPIO_PIN_DIR_OUTPUT;
1000a310:	466a      	mov	r2, sp
1000a312:	7113      	strb	r3, [r2, #4]
1000a314:	e003      	b.n	1000a31e <spi_init+0x82>
			} else if (config->mode == SPI_MODE_SLAVE) {
1000a316:	2b00      	cmp	r3, #0
1000a318:	d101      	bne.n	1000a31e <spi_init+0x82>
				config_gpio.direction = GPIO_PIN_DIR_INPUT;
1000a31a:	466a      	mov	r2, sp
1000a31c:	7113      	strb	r3, [r2, #4]
			}
			gpio_pin_set_config(config->pin_number_pad[idx], &config_gpio);
1000a31e:	b2c0      	uxtb	r0, r0
1000a320:	a901      	add	r1, sp, #4
1000a322:	4b35      	ldr	r3, [pc, #212]	; (1000a3f8 <spi_init+0x15c>)
1000a324:	4798      	blx	r3
			gpio_pinmux_cofiguration(config->pin_number_pad[idx], \
1000a326:	8a39      	ldrh	r1, [r7, #16]
1000a328:	7838      	ldrb	r0, [r7, #0]
1000a32a:	4b34      	ldr	r3, [pc, #208]	; (1000a3fc <spi_init+0x160>)
1000a32c:	4798      	blx	r3
1000a32e:	3404      	adds	r4, #4
	//Program the pinmux.
	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);

	/* Set the pinmux for this spi module. */
	for(idx = 0; idx < 4; idx++) {
1000a330:	455c      	cmp	r4, fp
1000a332:	d1e6      	bne.n	1000a302 <spi_init+0x66>
						(uint16_t)(config->pinmux_sel_pad[idx]));
		}
	}

	/* Set up the input clock for the module */
	spi_module->CLOCK_SOURCE_SELECT.reg = config->clock_source;
1000a334:	78eb      	ldrb	r3, [r5, #3]
1000a336:	4642      	mov	r2, r8
1000a338:	7413      	strb	r3, [r2, #16]

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
1000a33a:	782b      	ldrb	r3, [r5, #0]
1000a33c:	2b01      	cmp	r3, #1
1000a33e:	d100      	bne.n	1000a342 <spi_init+0xa6>
		/* Set the mode in SPI master mode */
		spi_module->SPI_MASTER_MODE.reg = SPI_MODE_MASTER;
1000a340:	7713      	strb	r3, [r2, #28]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
1000a342:	782b      	ldrb	r3, [r5, #0]
1000a344:	2b00      	cmp	r3, #0
1000a346:	d101      	bne.n	1000a34c <spi_init+0xb0>
		/* Set the mode in SPI slave mode */
		spi_module->SPI_MASTER_MODE.reg = SPI_MODE_SLAVE;
1000a348:	4642      	mov	r2, r8
1000a34a:	7713      	strb	r3, [r2, #28]
		const struct spi_config *const config)
{
	Assert(module);
	Assert(config);

	Spi *const spi_module = (module->hw);
1000a34c:	6833      	ldr	r3, [r6, #0]

	module->mode  = config->mode;
1000a34e:	782a      	ldrb	r2, [r5, #0]
1000a350:	7172      	strb	r2, [r6, #5]

#if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
1000a352:	782a      	ldrb	r2, [r5, #0]
1000a354:	2a01      	cmp	r2, #1
1000a356:	d101      	bne.n	1000a35c <spi_init+0xc0>
		spi_module->SPI_CLK_DIVIDER.reg = config->clock_divider;
1000a358:	792a      	ldrb	r2, [r5, #4]
1000a35a:	829a      	strh	r2, [r3, #20]
	}
#endif

	/* Set data order */
	if (config->data_order == SPI_DATA_ORDER_LSB) {
1000a35c:	786a      	ldrb	r2, [r5, #1]
1000a35e:	2a04      	cmp	r2, #4
1000a360:	d104      	bne.n	1000a36c <spi_init+0xd0>
		spi_module->SPI_CONFIGURATION.bit.LSB_FIRST_ENABLE = 0x1;
1000a362:	2124      	movs	r1, #36	; 0x24
1000a364:	5c58      	ldrb	r0, [r3, r1]
1000a366:	4302      	orrs	r2, r0
1000a368:	545a      	strb	r2, [r3, r1]
1000a36a:	e004      	b.n	1000a376 <spi_init+0xda>
	} else {
		spi_module->SPI_CONFIGURATION.bit.LSB_FIRST_ENABLE = 0x0;
1000a36c:	2124      	movs	r1, #36	; 0x24
1000a36e:	5c5a      	ldrb	r2, [r3, r1]
1000a370:	2004      	movs	r0, #4
1000a372:	4382      	bics	r2, r0
1000a374:	545a      	strb	r2, [r3, r1]
	}

	/* Set clock polarity and clock phase */
	switch(config->transfer_mode)
1000a376:	78aa      	ldrb	r2, [r5, #2]
1000a378:	2a01      	cmp	r2, #1
1000a37a:	d01a      	beq.n	1000a3b2 <spi_init+0x116>
1000a37c:	2a00      	cmp	r2, #0
1000a37e:	d004      	beq.n	1000a38a <spi_init+0xee>
1000a380:	2a02      	cmp	r2, #2
1000a382:	d00c      	beq.n	1000a39e <spi_init+0x102>
1000a384:	2a03      	cmp	r2, #3
1000a386:	d01e      	beq.n	1000a3c6 <spi_init+0x12a>
1000a388:	e026      	b.n	1000a3d8 <spi_init+0x13c>
	{
		case SPI_TRANSFER_MODE_0:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x0;
1000a38a:	2224      	movs	r2, #36	; 0x24
1000a38c:	5c99      	ldrb	r1, [r3, r2]
1000a38e:	2002      	movs	r0, #2
1000a390:	4381      	bics	r1, r0
1000a392:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x0;
1000a394:	5c99      	ldrb	r1, [r3, r2]
1000a396:	3801      	subs	r0, #1
1000a398:	4381      	bics	r1, r0
1000a39a:	5499      	strb	r1, [r3, r2]
1000a39c:	e01c      	b.n	1000a3d8 <spi_init+0x13c>
			break;
		case SPI_TRANSFER_MODE_1:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x1;
1000a39e:	2224      	movs	r2, #36	; 0x24
1000a3a0:	5c98      	ldrb	r0, [r3, r2]
1000a3a2:	2102      	movs	r1, #2
1000a3a4:	4301      	orrs	r1, r0
1000a3a6:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x0;
1000a3a8:	5c99      	ldrb	r1, [r3, r2]
1000a3aa:	2001      	movs	r0, #1
1000a3ac:	4381      	bics	r1, r0
1000a3ae:	5499      	strb	r1, [r3, r2]
1000a3b0:	e012      	b.n	1000a3d8 <spi_init+0x13c>
			break;
		case SPI_TRANSFER_MODE_2:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x0;
1000a3b2:	2224      	movs	r2, #36	; 0x24
1000a3b4:	5c99      	ldrb	r1, [r3, r2]
1000a3b6:	2002      	movs	r0, #2
1000a3b8:	4381      	bics	r1, r0
1000a3ba:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x1;
1000a3bc:	5c98      	ldrb	r0, [r3, r2]
1000a3be:	2101      	movs	r1, #1
1000a3c0:	4301      	orrs	r1, r0
1000a3c2:	5499      	strb	r1, [r3, r2]
1000a3c4:	e008      	b.n	1000a3d8 <spi_init+0x13c>
			break;
		case SPI_TRANSFER_MODE_3:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x1;
1000a3c6:	2224      	movs	r2, #36	; 0x24
1000a3c8:	5c98      	ldrb	r0, [r3, r2]
1000a3ca:	2102      	movs	r1, #2
1000a3cc:	4301      	orrs	r1, r0
1000a3ce:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x1;
1000a3d0:	5c98      	ldrb	r0, [r3, r2]
1000a3d2:	2101      	movs	r1, #1
1000a3d4:	4301      	orrs	r1, r0
1000a3d6:	5499      	strb	r1, [r3, r2]
	module->locked                     = 0;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
1000a3d8:	2000      	movs	r0, #0
1000a3da:	b003      	add	sp, #12
1000a3dc:	bc0c      	pop	{r2, r3}
1000a3de:	4690      	mov	r8, r2
1000a3e0:	469b      	mov	fp, r3
1000a3e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a3e4:	1000a261 	.word	0x1000a261
1000a3e8:	40006000 	.word	0x40006000
1000a3ec:	1000aded 	.word	0x1000aded
1000a3f0:	40007000 	.word	0x40007000
1000a3f4:	1000a7e9 	.word	0x1000a7e9
1000a3f8:	1000a7f9 	.word	0x1000a7f9
1000a3fc:	1000aa3d 	.word	0x1000aa3d

1000a400 <spi_transceive_buffer_wait>:
enum status_code spi_transceive_buffer_wait(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
1000a400:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a402:	b083      	sub	sp, #12
	Spi *spi_module = module->hw;
1000a404:	6804      	ldr	r4, [r0, #0]
	uint8_t dummy = 0;
1000a406:	2600      	movs	r6, #0
1000a408:	466d      	mov	r5, sp
1000a40a:	71ee      	strb	r6, [r5, #7]
1000a40c:	3507      	adds	r5, #7
	uint8_t skip_mosi = 0;
	uint8_t skip_miso = 0;
	uint8_t status;
	uint16_t transfer_len = 0;

	if(spi_module == 0) {
1000a40e:	2c00      	cmp	r4, #0
1000a410:	d034      	beq.n	1000a47c <spi_transceive_buffer_wait+0x7c>
		return STATUS_ERR_NOT_INITIALIZED;
	}
	if(!tx_data) {
1000a412:	2900      	cmp	r1, #0
1000a414:	d104      	bne.n	1000a420 <spi_transceive_buffer_wait+0x20>
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
1000a416:	0029      	movs	r1, r5
1000a418:	7980      	ldrb	r0, [r0, #6]
1000a41a:	7028      	strb	r0, [r5, #0]
		skip_mosi = 1;
1000a41c:	2701      	movs	r7, #1
1000a41e:	e00b      	b.n	1000a438 <spi_transceive_buffer_wait+0x38>
	} else if(!rx_data) {
1000a420:	2a00      	cmp	r2, #0
1000a422:	d005      	beq.n	1000a430 <spi_transceive_buffer_wait+0x30>
		rx_data = &dummy;
		skip_miso = 1;
	} else if(length == 0) {
		return STATUS_ERR_INVALID_ARG;
1000a424:	2017      	movs	r0, #23
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
		skip_miso = 1;
	} else if(length == 0) {
1000a426:	2b00      	cmp	r3, #0
1000a428:	d029      	beq.n	1000a47e <spi_transceive_buffer_wait+0x7e>
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
	uint8_t skip_miso = 0;
1000a42a:	2600      	movs	r6, #0
		uint8_t *rx_data,
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
1000a42c:	2700      	movs	r7, #0
1000a42e:	e003      	b.n	1000a438 <spi_transceive_buffer_wait+0x38>
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
		skip_miso = 1;
1000a430:	2601      	movs	r6, #1
		uint8_t *rx_data,
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
1000a432:	2700      	movs	r7, #0
	if(!tx_data) {
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
1000a434:	466a      	mov	r2, sp
1000a436:	3207      	adds	r2, #7
 */
static bool _spi_is_active(Spi *const spi_module)
{
	Assert(spi_module);

	return spi_module->SPI_BUS_STATUS.bit.SPI_ACTIVE;
1000a438:	2528      	movs	r5, #40	; 0x28
1000a43a:	5d60      	ldrb	r0, [r4, r5]
	}

	/* Check for Idle */
	do {
		status = _spi_is_active(spi_module);
	}while(status);
1000a43c:	07c0      	lsls	r0, r0, #31
1000a43e:	d4fc      	bmi.n	1000a43a <spi_transceive_buffer_wait+0x3a>

	/* Clear all status registers */
	spi_module->RECEIVE_STATUS.reg;
1000a440:	7b20      	ldrb	r0, [r4, #12]
	spi_module->TRANSMIT_STATUS.reg;
1000a442:	7a20      	ldrb	r0, [r4, #8]

	/* Start transfer */
	while(transfer_len < length) {
1000a444:	2b00      	cmp	r3, #0
1000a446:	d014      	beq.n	1000a472 <spi_transceive_buffer_wait+0x72>
1000a448:	2500      	movs	r5, #0
		/* Read data shifted from MISO */
		while(!_spi_is_ready_to_read(spi_module));
		*rx_data = spi_module->RECEIVE_DATA.reg;
		transfer_len++;
		if (!skip_mosi) {
			tx_data++;
1000a44a:	4278      	negs	r0, r7
1000a44c:	4147      	adcs	r7, r0
		}
		if (!skip_miso) {
			rx_data++;
1000a44e:	4270      	negs	r0, r6
1000a450:	4146      	adcs	r6, r0
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->TRANSMIT_STATUS.bit.TX_FIFO_NOT_FULL);
1000a452:	7a20      	ldrb	r0, [r4, #8]
	spi_module->TRANSMIT_STATUS.reg;

	/* Start transfer */
	while(transfer_len < length) {
		/* Write data to MOSI */
		while(!_spi_is_ready_to_write(spi_module));
1000a454:	07c0      	lsls	r0, r0, #31
1000a456:	d5fc      	bpl.n	1000a452 <spi_transceive_buffer_wait+0x52>
		spi_module->TRANSMIT_DATA.reg = *tx_data;
1000a458:	7808      	ldrb	r0, [r1, #0]
1000a45a:	7020      	strb	r0, [r4, #0]
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->RECEIVE_STATUS.bit.RX_FIFO_NOT_EMPTY);
1000a45c:	7b20      	ldrb	r0, [r4, #12]
	while(transfer_len < length) {
		/* Write data to MOSI */
		while(!_spi_is_ready_to_write(spi_module));
		spi_module->TRANSMIT_DATA.reg = *tx_data;
		/* Read data shifted from MISO */
		while(!_spi_is_ready_to_read(spi_module));
1000a45e:	07c0      	lsls	r0, r0, #31
1000a460:	d5fc      	bpl.n	1000a45c <spi_transceive_buffer_wait+0x5c>
		*rx_data = spi_module->RECEIVE_DATA.reg;
1000a462:	7920      	ldrb	r0, [r4, #4]
1000a464:	7010      	strb	r0, [r2, #0]
		transfer_len++;
1000a466:	3501      	adds	r5, #1
1000a468:	b2ad      	uxth	r5, r5
		if (!skip_mosi) {
			tx_data++;
1000a46a:	19c9      	adds	r1, r1, r7
		}
		if (!skip_miso) {
			rx_data++;
1000a46c:	1992      	adds	r2, r2, r6
	/* Clear all status registers */
	spi_module->RECEIVE_STATUS.reg;
	spi_module->TRANSMIT_STATUS.reg;

	/* Start transfer */
	while(transfer_len < length) {
1000a46e:	42ab      	cmp	r3, r5
1000a470:	d1ef      	bne.n	1000a452 <spi_transceive_buffer_wait+0x52>
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->TRANSMIT_STATUS.bit.TX_FIFO_EMPTY);
1000a472:	7a23      	ldrb	r3, [r4, #8]
		}
	}
	/* check TXFIFO is empty */
	do {
		status = _spi_is_write_complete(spi_module);
	}while(!status);
1000a474:	06db      	lsls	r3, r3, #27
1000a476:	d5fc      	bpl.n	1000a472 <spi_transceive_buffer_wait+0x72>

	return STATUS_OK;
1000a478:	2000      	movs	r0, #0
1000a47a:	e000      	b.n	1000a47e <spi_transceive_buffer_wait+0x7e>
	uint8_t skip_miso = 0;
	uint8_t status;
	uint16_t transfer_len = 0;

	if(spi_module == 0) {
		return STATUS_ERR_NOT_INITIALIZED;
1000a47c:	201f      	movs	r0, #31
		status = _spi_is_write_complete(spi_module);
	}while(!status);

	return STATUS_OK;

}
1000a47e:	b003      	add	sp, #12
1000a480:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a482:	46c0      	nop			; (mov r8, r8)

1000a484 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		bool select)
{
1000a484:	b510      	push	{r4, lr}
	uint8_t gpio_num = slave->ss_pin;
1000a486:	7808      	ldrb	r0, [r1, #0]
	if(select) {
1000a488:	2a00      	cmp	r2, #0
1000a48a:	d003      	beq.n	1000a494 <spi_select_slave+0x10>
		/* ASSERT Slave select pin */
		gpio_pin_set_output_level(gpio_num, false);
1000a48c:	2100      	movs	r1, #0
1000a48e:	4b04      	ldr	r3, [pc, #16]	; (1000a4a0 <spi_select_slave+0x1c>)
1000a490:	4798      	blx	r3
1000a492:	e002      	b.n	1000a49a <spi_select_slave+0x16>
	} else {
		/* DEASSERT Slave select pin */
		gpio_pin_set_output_level(gpio_num, true);
1000a494:	2101      	movs	r1, #1
1000a496:	4b02      	ldr	r3, [pc, #8]	; (1000a4a0 <spi_select_slave+0x1c>)
1000a498:	4798      	blx	r3
	}

	return STATUS_OK;
}
1000a49a:	2000      	movs	r0, #0
1000a49c:	bd10      	pop	{r4, pc}
1000a49e:	46c0      	nop			; (mov r8, r8)
1000a4a0:	1000a9b1 	.word	0x1000a9b1

1000a4a4 <dualtimer_isr_handler>:
 *
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
1000a4a4:	b510      	push	{r4, lr}
 * \retval The interrupt status of timer1/timer2
 */
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
1000a4a6:	4b0d      	ldr	r3, [pc, #52]	; (1000a4dc <dualtimer_isr_handler+0x38>)
1000a4a8:	7d1b      	ldrb	r3, [r3, #20]
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
1000a4aa:	2b00      	cmp	r3, #0
1000a4ac:	d007      	beq.n	1000a4be <dualtimer_isr_handler+0x1a>
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
1000a4ae:	2201      	movs	r2, #1
1000a4b0:	4b0a      	ldr	r3, [pc, #40]	; (1000a4dc <dualtimer_isr_handler+0x38>)
1000a4b2:	731a      	strb	r2, [r3, #12]
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
1000a4b4:	4b0a      	ldr	r3, [pc, #40]	; (1000a4e0 <dualtimer_isr_handler+0x3c>)
1000a4b6:	681b      	ldr	r3, [r3, #0]
1000a4b8:	2b00      	cmp	r3, #0
1000a4ba:	d000      	beq.n	1000a4be <dualtimer_isr_handler+0x1a>
			dualtimer_callback_timer1();
1000a4bc:	4798      	blx	r3
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
	} else {
		return DUALTIMER0->TIMER2MIS.reg;
1000a4be:	2334      	movs	r3, #52	; 0x34
1000a4c0:	4a06      	ldr	r2, [pc, #24]	; (1000a4dc <dualtimer_isr_handler+0x38>)
1000a4c2:	5cd3      	ldrb	r3, [r2, r3]
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
1000a4c4:	2b00      	cmp	r3, #0
1000a4c6:	d007      	beq.n	1000a4d8 <dualtimer_isr_handler+0x34>
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
	} else {
		DUALTIMER0->TIMER2INTCLR.reg = 1;
1000a4c8:	2101      	movs	r1, #1
1000a4ca:	232c      	movs	r3, #44	; 0x2c
1000a4cc:	54d1      	strb	r1, [r2, r3]
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER2);
		if (dualtimer_callback_timer2)
1000a4ce:	4b05      	ldr	r3, [pc, #20]	; (1000a4e4 <dualtimer_isr_handler+0x40>)
1000a4d0:	681b      	ldr	r3, [r3, #0]
1000a4d2:	2b00      	cmp	r3, #0
1000a4d4:	d000      	beq.n	1000a4d8 <dualtimer_isr_handler+0x34>
			dualtimer_callback_timer2();
1000a4d6:	4798      	blx	r3
	}
}
1000a4d8:	bd10      	pop	{r4, pc}
1000a4da:	46c0      	nop			; (mov r8, r8)
1000a4dc:	40001000 	.word	0x40001000
1000a4e0:	10015424 	.word	0x10015424
1000a4e4:	10015428 	.word	0x10015428

1000a4e8 <dualtimer_get_config_defaults>:
 *
 * \param[out]  config  Pointer to a DUALTIMER module configuration structure to set
 */
void dualtimer_get_config_defaults(struct dualtimer_config *config)
{
	config->timer1.timer_enable = true;
1000a4e8:	2301      	movs	r3, #1
1000a4ea:	7003      	strb	r3, [r0, #0]
	config->timer2.timer_enable = true;
1000a4ec:	7303      	strb	r3, [r0, #12]

	config->timer1.counter_mode = DUALTIMER_PERIODIC_MODE;
1000a4ee:	2202      	movs	r2, #2
1000a4f0:	7042      	strb	r2, [r0, #1]
	config->timer2.counter_mode = DUALTIMER_PERIODIC_MODE;
1000a4f2:	7342      	strb	r2, [r0, #13]

	config->timer1.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
1000a4f4:	7083      	strb	r3, [r0, #2]
	config->timer2.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
1000a4f6:	7383      	strb	r3, [r0, #14]

	config->timer1.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
1000a4f8:	2200      	movs	r2, #0
1000a4fa:	70c2      	strb	r2, [r0, #3]
	config->timer2.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
1000a4fc:	73c2      	strb	r2, [r0, #15]

	config->timer1.interrup_enable = true;
1000a4fe:	7103      	strb	r3, [r0, #4]
	config->timer2.interrup_enable = true;
1000a500:	7403      	strb	r3, [r0, #16]

	config->timer1.load_value = 0;
1000a502:	6082      	str	r2, [r0, #8]
	config->timer2.load_value = 0;
1000a504:	6142      	str	r2, [r0, #20]

	config->clock_source = DUALTIMER_CLK_INPUT_0;
1000a506:	7602      	strb	r2, [r0, #24]
}
1000a508:	4770      	bx	lr
1000a50a:	46c0      	nop			; (mov r8, r8)

1000a50c <dualtimer_set_counter>:
 * \param[in]     value        Load value
 */
void dualtimer_set_counter(enum dualtimer_timer timer,
		enum dualtimer_set_register cur_bg, uint32_t value)
{
	if (timer == DUALTIMER_TIMER1) {
1000a50c:	2800      	cmp	r0, #0
1000a50e:	d107      	bne.n	1000a520 <dualtimer_set_counter+0x14>
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
1000a510:	2900      	cmp	r1, #0
1000a512:	d102      	bne.n	1000a51a <dualtimer_set_counter+0xe>
			DUALTIMER0->TIMER1LOAD.reg = value;
1000a514:	4b06      	ldr	r3, [pc, #24]	; (1000a530 <dualtimer_set_counter+0x24>)
1000a516:	601a      	str	r2, [r3, #0]
1000a518:	e009      	b.n	1000a52e <dualtimer_set_counter+0x22>
		} else {
			DUALTIMER0->TIMER1BGLOAD.reg = value;
1000a51a:	4b05      	ldr	r3, [pc, #20]	; (1000a530 <dualtimer_set_counter+0x24>)
1000a51c:	619a      	str	r2, [r3, #24]
1000a51e:	e006      	b.n	1000a52e <dualtimer_set_counter+0x22>
		}
	} else {
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
1000a520:	2900      	cmp	r1, #0
1000a522:	d102      	bne.n	1000a52a <dualtimer_set_counter+0x1e>
			DUALTIMER0->TIMER2LOAD.reg = value;
1000a524:	4b02      	ldr	r3, [pc, #8]	; (1000a530 <dualtimer_set_counter+0x24>)
1000a526:	621a      	str	r2, [r3, #32]
1000a528:	e001      	b.n	1000a52e <dualtimer_set_counter+0x22>
			} else {
			DUALTIMER0->TIMER2BGLOAD.reg = value;
1000a52a:	4b01      	ldr	r3, [pc, #4]	; (1000a530 <dualtimer_set_counter+0x24>)
1000a52c:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
}
1000a52e:	4770      	bx	lr
1000a530:	40001000 	.word	0x40001000

1000a534 <dualtimer_enable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_enable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
1000a534:	2800      	cmp	r0, #0
1000a536:	d105      	bne.n	1000a544 <dualtimer_enable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg |= DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
1000a538:	4a06      	ldr	r2, [pc, #24]	; (1000a554 <dualtimer_enable+0x20>)
1000a53a:	7a11      	ldrb	r1, [r2, #8]
1000a53c:	2380      	movs	r3, #128	; 0x80
1000a53e:	430b      	orrs	r3, r1
1000a540:	7213      	strb	r3, [r2, #8]
1000a542:	e005      	b.n	1000a550 <dualtimer_enable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg |= DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
1000a544:	4903      	ldr	r1, [pc, #12]	; (1000a554 <dualtimer_enable+0x20>)
1000a546:	2228      	movs	r2, #40	; 0x28
1000a548:	5c88      	ldrb	r0, [r1, r2]
1000a54a:	2380      	movs	r3, #128	; 0x80
1000a54c:	4303      	orrs	r3, r0
1000a54e:	548b      	strb	r3, [r1, r2]
	}
}
1000a550:	4770      	bx	lr
1000a552:	46c0      	nop			; (mov r8, r8)
1000a554:	40001000 	.word	0x40001000

1000a558 <dualtimer_disable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_disable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
1000a558:	2800      	cmp	r0, #0
1000a55a:	d105      	bne.n	1000a568 <dualtimer_disable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg &= ~DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
1000a55c:	4a06      	ldr	r2, [pc, #24]	; (1000a578 <dualtimer_disable+0x20>)
1000a55e:	7a11      	ldrb	r1, [r2, #8]
1000a560:	237f      	movs	r3, #127	; 0x7f
1000a562:	400b      	ands	r3, r1
1000a564:	7213      	strb	r3, [r2, #8]
1000a566:	e005      	b.n	1000a574 <dualtimer_disable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg &= ~DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
1000a568:	4903      	ldr	r1, [pc, #12]	; (1000a578 <dualtimer_disable+0x20>)
1000a56a:	2228      	movs	r2, #40	; 0x28
1000a56c:	5c88      	ldrb	r0, [r1, r2]
1000a56e:	237f      	movs	r3, #127	; 0x7f
1000a570:	4003      	ands	r3, r0
1000a572:	548b      	strb	r3, [r1, r2]
	}
}
1000a574:	4770      	bx	lr
1000a576:	46c0      	nop			; (mov r8, r8)
1000a578:	40001000 	.word	0x40001000

1000a57c <dualtimer_init>:
 * \param[in]     config       Pointer to the Dualtimer configuration options struct
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
1000a57c:	b570      	push	{r4, r5, r6, lr}
1000a57e:	0004      	movs	r4, r0
	uint8_t regval = 0;

	/* Global reset */
	system_peripheral_reset(PERIPHERAL_DUALT_TIMER);
1000a580:	2004      	movs	r0, #4
1000a582:	4b39      	ldr	r3, [pc, #228]	; (1000a668 <dualtimer_init+0xec>)
1000a584:	4798      	blx	r3

	/* Common config */
	if (config->timer1.timer_enable || config->timer2.timer_enable) {
1000a586:	7823      	ldrb	r3, [r4, #0]
1000a588:	2b00      	cmp	r3, #0
1000a58a:	d102      	bne.n	1000a592 <dualtimer_init+0x16>
1000a58c:	7b23      	ldrb	r3, [r4, #12]
1000a58e:	2b00      	cmp	r3, #0
1000a590:	d065      	beq.n	1000a65e <dualtimer_init+0xe2>
		LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |=
1000a592:	4936      	ldr	r1, [pc, #216]	; (1000a66c <dualtimer_init+0xf0>)
1000a594:	68ca      	ldr	r2, [r1, #12]
1000a596:	2320      	movs	r3, #32
1000a598:	4313      	orrs	r3, r2
1000a59a:	60cb      	str	r3, [r1, #12]
		LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
1000a59c:	7e22      	ldrb	r2, [r4, #24]
1000a59e:	698b      	ldr	r3, [r1, #24]
1000a5a0:	2003      	movs	r0, #3
1000a5a2:	4002      	ands	r2, r0
1000a5a4:	0112      	lsls	r2, r2, #4
1000a5a6:	302d      	adds	r0, #45	; 0x2d
1000a5a8:	4383      	bics	r3, r0
1000a5aa:	4313      	orrs	r3, r2
1000a5ac:	618b      	str	r3, [r1, #24]
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
1000a5ae:	7823      	ldrb	r3, [r4, #0]
1000a5b0:	2b00      	cmp	r3, #0
1000a5b2:	d026      	beq.n	1000a602 <dualtimer_init+0x86>
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000a5b4:	7863      	ldrb	r3, [r4, #1]
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
1000a5b6:	2101      	movs	r1, #1
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000a5b8:	2b00      	cmp	r3, #0
1000a5ba:	d003      	beq.n	1000a5c4 <dualtimer_init+0x48>
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer1.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_0;
		} else if (config->timer1.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_1;
1000a5bc:	3b02      	subs	r3, #2
1000a5be:	425d      	negs	r5, r3
1000a5c0:	415d      	adcs	r5, r3
1000a5c2:	01a9      	lsls	r1, r5, #6
		}
		regval |= (DUALTIMER_TIMER1CONTROL_TIMER_SIZE &
1000a5c4:	78a2      	ldrb	r2, [r4, #2]
1000a5c6:	0052      	lsls	r2, r2, #1
1000a5c8:	2502      	movs	r5, #2
1000a5ca:	402a      	ands	r2, r5
1000a5cc:	78e3      	ldrb	r3, [r4, #3]
1000a5ce:	009b      	lsls	r3, r3, #2
1000a5d0:	350a      	adds	r5, #10
1000a5d2:	402b      	ands	r3, r5
1000a5d4:	431a      	orrs	r2, r3
1000a5d6:	0015      	movs	r5, r2
1000a5d8:	430d      	orrs	r5, r1
				((config->timer1.counter_size) << DUALTIMER_TIMER1CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER1CONTROL_TIMERPRE(config->timer1.clock_prescaler);
		if (config->timer1.interrup_enable) {
1000a5da:	7923      	ldrb	r3, [r4, #4]
1000a5dc:	2b00      	cmp	r3, #0
1000a5de:	d001      	beq.n	1000a5e4 <dualtimer_init+0x68>
			regval |= DUALTIMER_TIMER1CONTROL_INTERRUPT_ENABLE;
1000a5e0:	2320      	movs	r3, #32
1000a5e2:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER1LOAD.reg = config->timer1.load_value;
1000a5e4:	4b22      	ldr	r3, [pc, #136]	; (1000a670 <dualtimer_init+0xf4>)
1000a5e6:	68a2      	ldr	r2, [r4, #8]
1000a5e8:	601a      	str	r2, [r3, #0]
		DUALTIMER0->TIMER1CONTROL.reg = regval;
1000a5ea:	721d      	strb	r5, [r3, #8]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
1000a5ec:	491f      	ldr	r1, [pc, #124]	; (1000a66c <dualtimer_init+0xf0>)
1000a5ee:	22c4      	movs	r2, #196	; 0xc4
1000a5f0:	0052      	lsls	r2, r2, #1
1000a5f2:	5c88      	ldrb	r0, [r1, r2]
1000a5f4:	2301      	movs	r3, #1
1000a5f6:	4303      	orrs	r3, r0
1000a5f8:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER1);
1000a5fa:	2000      	movs	r0, #0
1000a5fc:	4b1d      	ldr	r3, [pc, #116]	; (1000a674 <dualtimer_init+0xf8>)
1000a5fe:	4798      	blx	r3
1000a600:	e000      	b.n	1000a604 <dualtimer_init+0x88>
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
	uint8_t regval = 0;
1000a602:	2500      	movs	r5, #0
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
		dualtimer_enable(DUALTIMER_TIMER1);
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
1000a604:	7b23      	ldrb	r3, [r4, #12]
1000a606:	2b00      	cmp	r3, #0
1000a608:	d029      	beq.n	1000a65e <dualtimer_init+0xe2>
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000a60a:	7b63      	ldrb	r3, [r4, #13]
1000a60c:	2b00      	cmp	r3, #0
1000a60e:	d005      	beq.n	1000a61c <dualtimer_init+0xa0>
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
1000a610:	2b01      	cmp	r3, #1
1000a612:	d005      	beq.n	1000a620 <dualtimer_init+0xa4>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
1000a614:	2b02      	cmp	r3, #2
1000a616:	d104      	bne.n	1000a622 <dualtimer_init+0xa6>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
1000a618:	2540      	movs	r5, #64	; 0x40
1000a61a:	e002      	b.n	1000a622 <dualtimer_init+0xa6>
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
1000a61c:	2501      	movs	r5, #1
1000a61e:	e000      	b.n	1000a622 <dualtimer_init+0xa6>
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
1000a620:	2500      	movs	r5, #0
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
		}
		regval |= (DUALTIMER_TIMER2CONTROL_TIMER_SIZE &
1000a622:	7ba3      	ldrb	r3, [r4, #14]
1000a624:	005b      	lsls	r3, r3, #1
1000a626:	2102      	movs	r1, #2
1000a628:	4019      	ands	r1, r3
1000a62a:	7be2      	ldrb	r2, [r4, #15]
1000a62c:	0092      	lsls	r2, r2, #2
1000a62e:	230c      	movs	r3, #12
1000a630:	4013      	ands	r3, r2
1000a632:	430b      	orrs	r3, r1
1000a634:	431d      	orrs	r5, r3
				((config->timer2.counter_size) << DUALTIMER_TIMER2CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER2CONTROL_TIMERPRE(config->timer2.clock_prescaler);
		if (config->timer2.interrup_enable) {
1000a636:	7c23      	ldrb	r3, [r4, #16]
1000a638:	2b00      	cmp	r3, #0
1000a63a:	d001      	beq.n	1000a640 <dualtimer_init+0xc4>
			regval |= DUALTIMER_TIMER2CONTROL_INTERRUPT_ENABLE;
1000a63c:	2320      	movs	r3, #32
1000a63e:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER2LOAD.reg = config->timer2.load_value;
1000a640:	6962      	ldr	r2, [r4, #20]
1000a642:	4b0b      	ldr	r3, [pc, #44]	; (1000a670 <dualtimer_init+0xf4>)
1000a644:	621a      	str	r2, [r3, #32]
		DUALTIMER0->TIMER2CONTROL.reg = regval;
1000a646:	2228      	movs	r2, #40	; 0x28
1000a648:	549d      	strb	r5, [r3, r2]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_2_ENABLE;
1000a64a:	4908      	ldr	r1, [pc, #32]	; (1000a66c <dualtimer_init+0xf0>)
1000a64c:	3261      	adds	r2, #97	; 0x61
1000a64e:	32ff      	adds	r2, #255	; 0xff
1000a650:	5c88      	ldrb	r0, [r1, r2]
1000a652:	2302      	movs	r3, #2
1000a654:	4303      	orrs	r3, r0
1000a656:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER2);
1000a658:	2001      	movs	r0, #1
1000a65a:	4b06      	ldr	r3, [pc, #24]	; (1000a674 <dualtimer_init+0xf8>)
1000a65c:	4798      	blx	r3
	}

	system_register_isr(RAM_ISR_TABLE_DUALTIMER_INDEX, (uint32_t)dualtimer_isr_handler);
1000a65e:	4906      	ldr	r1, [pc, #24]	; (1000a678 <dualtimer_init+0xfc>)
1000a660:	201e      	movs	r0, #30
1000a662:	4b06      	ldr	r3, [pc, #24]	; (1000a67c <dualtimer_init+0x100>)
1000a664:	4798      	blx	r3
}
1000a666:	bd70      	pop	{r4, r5, r6, pc}
1000a668:	1000b4b5 	.word	0x1000b4b5
1000a66c:	4000b000 	.word	0x4000b000
1000a670:	40001000 	.word	0x40001000
1000a674:	1000a535 	.word	0x1000a535
1000a678:	1000a4a5 	.word	0x1000a4a5
1000a67c:	1000b91d 	.word	0x1000b91d

1000a680 <dualtimer_register_callback>:
 *
 * \param[in]     callback_func Pointer to callback function
 */
void dualtimer_register_callback(enum dualtimer_timer timer, dualtimer_callback_t fun)
{
	if (timer == DUALTIMER_TIMER1) {
1000a680:	2800      	cmp	r0, #0
1000a682:	d102      	bne.n	1000a68a <dualtimer_register_callback+0xa>
		dualtimer_callback_timer1 = fun;
1000a684:	4b02      	ldr	r3, [pc, #8]	; (1000a690 <dualtimer_register_callback+0x10>)
1000a686:	6019      	str	r1, [r3, #0]
1000a688:	e001      	b.n	1000a68e <dualtimer_register_callback+0xe>
	} else {
		dualtimer_callback_timer2 = fun;
1000a68a:	4b02      	ldr	r3, [pc, #8]	; (1000a694 <dualtimer_register_callback+0x14>)
1000a68c:	6019      	str	r1, [r3, #0]
	}
}
1000a68e:	4770      	bx	lr
1000a690:	10015424 	.word	0x10015424
1000a694:	10015428 	.word	0x10015428

1000a698 <gpio_port0_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port0_isr_handler(void)
{
1000a698:	b570      	push	{r4, r5, r6, lr}
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;
1000a69a:	4b16      	ldr	r3, [pc, #88]	; (1000a6f4 <gpio_port0_isr_handler+0x5c>)
1000a69c:	681d      	ldr	r5, [r3, #0]
1000a69e:	8f29      	ldrh	r1, [r5, #56]	; 0x38
1000a6a0:	b289      	uxth	r1, r1

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
1000a6a2:	07cb      	lsls	r3, r1, #31
1000a6a4:	d407      	bmi.n	1000a6b6 <gpio_port0_isr_handler+0x1e>
1000a6a6:	2301      	movs	r3, #1
1000a6a8:	2401      	movs	r4, #1
1000a6aa:	0018      	movs	r0, r3
1000a6ac:	0022      	movs	r2, r4
1000a6ae:	409a      	lsls	r2, r3
1000a6b0:	4211      	tst	r1, r2
1000a6b2:	d014      	beq.n	1000a6de <gpio_port0_isr_handler+0x46>
1000a6b4:	e001      	b.n	1000a6ba <gpio_port0_isr_handler+0x22>
1000a6b6:	2201      	movs	r2, #1
1000a6b8:	2000      	movs	r0, #0
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
1000a6ba:	b292      	uxth	r2, r2
1000a6bc:	872a      	strh	r2, [r5, #56]	; 0x38
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
1000a6be:	2346      	movs	r3, #70	; 0x46
1000a6c0:	4a0c      	ldr	r2, [pc, #48]	; (1000a6f4 <gpio_port0_isr_handler+0x5c>)
1000a6c2:	5ad3      	ldrh	r3, [r2, r3]
1000a6c4:	4103      	asrs	r3, r0
1000a6c6:	07db      	lsls	r3, r3, #31
1000a6c8:	d50c      	bpl.n	1000a6e4 <gpio_port0_isr_handler+0x4c>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
1000a6ca:	2344      	movs	r3, #68	; 0x44

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
1000a6cc:	5ad3      	ldrh	r3, [r2, r3]
1000a6ce:	4103      	asrs	r3, r0
1000a6d0:	07db      	lsls	r3, r3, #31
1000a6d2:	d507      	bpl.n	1000a6e4 <gpio_port0_isr_handler+0x4c>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
                _gpio_instances[0].callback[i]();
1000a6d4:	0080      	lsls	r0, r0, #2
1000a6d6:	1810      	adds	r0, r2, r0
1000a6d8:	6843      	ldr	r3, [r0, #4]
1000a6da:	4798      	blx	r3
1000a6dc:	e002      	b.n	1000a6e4 <gpio_port0_isr_handler+0x4c>
1000a6de:	3301      	adds	r3, #1
 */
static void gpio_port0_isr_handler(void)
{
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
1000a6e0:	2b10      	cmp	r3, #16
1000a6e2:	d1e2      	bne.n	1000a6aa <gpio_port0_isr_handler+0x12>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000a6e4:	2180      	movs	r1, #128	; 0x80
1000a6e6:	0409      	lsls	r1, r1, #16
1000a6e8:	23c0      	movs	r3, #192	; 0xc0
1000a6ea:	005b      	lsls	r3, r3, #1
1000a6ec:	4a02      	ldr	r2, [pc, #8]	; (1000a6f8 <gpio_port0_isr_handler+0x60>)
1000a6ee:	50d1      	str	r1, [r2, r3]
                _gpio_instances[0].callback[i]();
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO0_IRQn);
}
1000a6f0:	bd70      	pop	{r4, r5, r6, pc}
1000a6f2:	46c0      	nop			; (mov r8, r8)
1000a6f4:	10017010 	.word	0x10017010
1000a6f8:	e000e100 	.word	0xe000e100

1000a6fc <gpio_port1_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port1_isr_handler(void)
{
1000a6fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;
1000a6fe:	4b18      	ldr	r3, [pc, #96]	; (1000a760 <gpio_port1_isr_handler+0x64>)
1000a700:	6c9b      	ldr	r3, [r3, #72]	; 0x48
1000a702:	8f1e      	ldrh	r6, [r3, #56]	; 0x38
1000a704:	b2b6      	uxth	r6, r6
1000a706:	0037      	movs	r7, r6
1000a708:	2400      	movs	r4, #0

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
1000a70a:	0b76      	lsrs	r6, r6, #13
1000a70c:	0376      	lsls	r6, r6, #13
			aon_handle_ext_wakeup_isr();
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
1000a70e:	4d14      	ldr	r5, [pc, #80]	; (1000a760 <gpio_port1_isr_handler+0x64>)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
1000a710:	2e00      	cmp	r6, #0
1000a712:	d001      	beq.n	1000a718 <gpio_port1_isr_handler+0x1c>
			aon_handle_ext_wakeup_isr();
1000a714:	4b13      	ldr	r3, [pc, #76]	; (1000a764 <gpio_port1_isr_handler+0x68>)
1000a716:	4798      	blx	r3
		}

		if (flag & (1 << i)) {
1000a718:	0022      	movs	r2, r4
1000a71a:	2301      	movs	r3, #1
1000a71c:	40a3      	lsls	r3, r4
1000a71e:	421f      	tst	r7, r3
1000a720:	d013      	beq.n	1000a74a <gpio_port1_isr_handler+0x4e>
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
1000a722:	b29b      	uxth	r3, r3
1000a724:	6ca9      	ldr	r1, [r5, #72]	; 0x48
1000a726:	870b      	strh	r3, [r1, #56]	; 0x38
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
1000a728:	238e      	movs	r3, #142	; 0x8e
1000a72a:	5aeb      	ldrh	r3, [r5, r3]
1000a72c:	4123      	asrs	r3, r4
1000a72e:	07db      	lsls	r3, r3, #31
1000a730:	d50b      	bpl.n	1000a74a <gpio_port1_isr_handler+0x4e>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
1000a732:	238c      	movs	r3, #140	; 0x8c
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
1000a734:	490a      	ldr	r1, [pc, #40]	; (1000a760 <gpio_port1_isr_handler+0x64>)
1000a736:	5acb      	ldrh	r3, [r1, r3]
1000a738:	4123      	asrs	r3, r4
1000a73a:	07db      	lsls	r3, r3, #31
1000a73c:	d505      	bpl.n	1000a74a <gpio_port1_isr_handler+0x4e>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
				_gpio_instances[1].callback[i]();
1000a73e:	3212      	adds	r2, #18
1000a740:	0092      	lsls	r2, r2, #2
1000a742:	188a      	adds	r2, r1, r2
1000a744:	6853      	ldr	r3, [r2, #4]
1000a746:	4798      	blx	r3
				break;
1000a748:	e002      	b.n	1000a750 <gpio_port1_isr_handler+0x54>
1000a74a:	3401      	adds	r4, #1
 */
static void gpio_port1_isr_handler(void)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
1000a74c:	2c10      	cmp	r4, #16
1000a74e:	d1df      	bne.n	1000a710 <gpio_port1_isr_handler+0x14>
1000a750:	2180      	movs	r1, #128	; 0x80
1000a752:	0449      	lsls	r1, r1, #17
1000a754:	23c0      	movs	r3, #192	; 0xc0
1000a756:	005b      	lsls	r3, r3, #1
1000a758:	4a03      	ldr	r2, [pc, #12]	; (1000a768 <gpio_port1_isr_handler+0x6c>)
1000a75a:	50d1      	str	r1, [r2, r3]
				break;
			}
		}
	}
	NVIC_ClearPendingIRQ(GPIO1_IRQn);
}
1000a75c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000a75e:	46c0      	nop			; (mov r8, r8)
1000a760:	10017010 	.word	0x10017010
1000a764:	0001bc51 	.word	0x0001bc51
1000a768:	e000e100 	.word	0xe000e100

1000a76c <gpio_port2_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port2_isr_handler(void)
{
1000a76c:	b510      	push	{r4, lr}
	uint32_t flag = _gpio_instances[2].hw->INTSTATUSCLEAR.reg;
1000a76e:	2390      	movs	r3, #144	; 0x90
1000a770:	4a1b      	ldr	r2, [pc, #108]	; (1000a7e0 <gpio_port2_isr_handler+0x74>)
1000a772:	58d2      	ldr	r2, [r2, r3]
1000a774:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000a776:	b29b      	uxth	r3, r3

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
1000a778:	04d9      	lsls	r1, r3, #19
1000a77a:	d414      	bmi.n	1000a7a6 <gpio_port2_isr_handler+0x3a>
1000a77c:	0499      	lsls	r1, r3, #18
1000a77e:	d40a      	bmi.n	1000a796 <gpio_port2_isr_handler+0x2a>
1000a780:	0459      	lsls	r1, r3, #17
1000a782:	d40c      	bmi.n	1000a79e <gpio_port2_isr_handler+0x32>
1000a784:	0bdb      	lsrs	r3, r3, #15
1000a786:	03db      	lsls	r3, r3, #15
1000a788:	b29b      	uxth	r3, r3
1000a78a:	2b00      	cmp	r3, #0
1000a78c:	d020      	beq.n	1000a7d0 <gpio_port2_isr_handler+0x64>
1000a78e:	2380      	movs	r3, #128	; 0x80
1000a790:	021b      	lsls	r3, r3, #8
1000a792:	210f      	movs	r1, #15
1000a794:	e00a      	b.n	1000a7ac <gpio_port2_isr_handler+0x40>
1000a796:	2380      	movs	r3, #128	; 0x80
1000a798:	019b      	lsls	r3, r3, #6
1000a79a:	210d      	movs	r1, #13
1000a79c:	e006      	b.n	1000a7ac <gpio_port2_isr_handler+0x40>
1000a79e:	2380      	movs	r3, #128	; 0x80
1000a7a0:	01db      	lsls	r3, r3, #7
1000a7a2:	210e      	movs	r1, #14
1000a7a4:	e002      	b.n	1000a7ac <gpio_port2_isr_handler+0x40>
1000a7a6:	2380      	movs	r3, #128	; 0x80
1000a7a8:	015b      	lsls	r3, r3, #5
1000a7aa:	210c      	movs	r1, #12
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
1000a7ac:	b29b      	uxth	r3, r3
1000a7ae:	8713      	strh	r3, [r2, #56]	; 0x38
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
1000a7b0:	23d6      	movs	r3, #214	; 0xd6
1000a7b2:	4a0b      	ldr	r2, [pc, #44]	; (1000a7e0 <gpio_port2_isr_handler+0x74>)
1000a7b4:	5ad3      	ldrh	r3, [r2, r3]
1000a7b6:	410b      	asrs	r3, r1
1000a7b8:	07db      	lsls	r3, r3, #31
1000a7ba:	d509      	bpl.n	1000a7d0 <gpio_port2_isr_handler+0x64>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
1000a7bc:	23d4      	movs	r3, #212	; 0xd4

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
1000a7be:	5ad3      	ldrh	r3, [r2, r3]
1000a7c0:	410b      	asrs	r3, r1
1000a7c2:	07db      	lsls	r3, r3, #31
1000a7c4:	d504      	bpl.n	1000a7d0 <gpio_port2_isr_handler+0x64>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
                _gpio_instances[2].callback[i]();
1000a7c6:	3124      	adds	r1, #36	; 0x24
1000a7c8:	0089      	lsls	r1, r1, #2
1000a7ca:	1851      	adds	r1, r2, r1
1000a7cc:	684b      	ldr	r3, [r1, #4]
1000a7ce:	4798      	blx	r3
1000a7d0:	2180      	movs	r1, #128	; 0x80
1000a7d2:	0489      	lsls	r1, r1, #18
1000a7d4:	23c0      	movs	r3, #192	; 0xc0
1000a7d6:	005b      	lsls	r3, r3, #1
1000a7d8:	4a02      	ldr	r2, [pc, #8]	; (1000a7e4 <gpio_port2_isr_handler+0x78>)
1000a7da:	50d1      	str	r1, [r2, r3]
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO2_IRQn);
}
1000a7dc:	bd10      	pop	{r4, pc}
1000a7de:	46c0      	nop			; (mov r8, r8)
1000a7e0:	10017010 	.word	0x10017010
1000a7e4:	e000e100 	.word	0xe000e100

1000a7e8 <gpio_get_config_defaults>:
 *  \param[out] config  Configuration structure to initialize to default values.
 */
void gpio_get_config_defaults(struct gpio_config *const config)
{
	/* Default configuration values */
	config->direction  = GPIO_PIN_DIR_INPUT;
1000a7e8:	2300      	movs	r3, #0
1000a7ea:	7003      	strb	r3, [r0, #0]
	config->input_pull = GPIO_PIN_PULL_UP;
1000a7ec:	2201      	movs	r2, #1
1000a7ee:	7042      	strb	r2, [r0, #1]
	config->powersave  = false;
1000a7f0:	7083      	strb	r3, [r0, #2]
	config->aon_wakeup = false;
1000a7f2:	70c3      	strb	r3, [r0, #3]
}
1000a7f4:	4770      	bx	lr
1000a7f6:	46c0      	nop			; (mov r8, r8)

1000a7f8 <gpio_pin_set_config>:
 *  \retval STATUS_RESOURCE_NOT_AVAILABLE   Requested gpio is already in use.
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
1000a7f8:	b570      	push	{r4, r5, r6, lr}
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
1000a7fa:	2317      	movs	r3, #23
	enum status_code status = STATUS_OK;

	/* Following GPIO's should never be modified by user.
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
1000a7fc:	2801      	cmp	r0, #1
1000a7fe:	d800      	bhi.n	1000a802 <gpio_pin_set_config+0xa>
1000a800:	e0c8      	b.n	1000a994 <gpio_pin_set_config+0x19c>
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
	} else {
		if (gpio_pin <= 7) {
1000a802:	2807      	cmp	r0, #7
1000a804:	d809      	bhi.n	1000a81a <gpio_pin_set_config+0x22>
			LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000a806:	4d64      	ldr	r5, [pc, #400]	; (1000a998 <gpio_pin_set_config+0x1a0>)
1000a808:	6c6a      	ldr	r2, [r5, #68]	; 0x44
1000a80a:	3b10      	subs	r3, #16
1000a80c:	4003      	ands	r3, r0
1000a80e:	009b      	lsls	r3, r3, #2
1000a810:	2407      	movs	r4, #7
1000a812:	409c      	lsls	r4, r3
1000a814:	43a2      	bics	r2, r4
1000a816:	646a      	str	r2, [r5, #68]	; 0x44
1000a818:	e029      	b.n	1000a86e <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 15) {
1000a81a:	280f      	cmp	r0, #15
1000a81c:	d809      	bhi.n	1000a832 <gpio_pin_set_config+0x3a>
			LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000a81e:	4d5e      	ldr	r5, [pc, #376]	; (1000a998 <gpio_pin_set_config+0x1a0>)
1000a820:	6caa      	ldr	r2, [r5, #72]	; 0x48
1000a822:	2307      	movs	r3, #7
1000a824:	4003      	ands	r3, r0
1000a826:	009b      	lsls	r3, r3, #2
1000a828:	2407      	movs	r4, #7
1000a82a:	409c      	lsls	r4, r3
1000a82c:	43a2      	bics	r2, r4
1000a82e:	64aa      	str	r2, [r5, #72]	; 0x48
1000a830:	e01d      	b.n	1000a86e <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 23) {
1000a832:	2817      	cmp	r0, #23
1000a834:	d809      	bhi.n	1000a84a <gpio_pin_set_config+0x52>
			LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000a836:	4d58      	ldr	r5, [pc, #352]	; (1000a998 <gpio_pin_set_config+0x1a0>)
1000a838:	6cea      	ldr	r2, [r5, #76]	; 0x4c
1000a83a:	2307      	movs	r3, #7
1000a83c:	4003      	ands	r3, r0
1000a83e:	009b      	lsls	r3, r3, #2
1000a840:	2407      	movs	r4, #7
1000a842:	409c      	lsls	r4, r3
1000a844:	43a2      	bics	r2, r4
1000a846:	64ea      	str	r2, [r5, #76]	; 0x4c
1000a848:	e011      	b.n	1000a86e <gpio_pin_set_config+0x76>
		} else if (44 <= gpio_pin  && gpio_pin < 48) {
1000a84a:	0003      	movs	r3, r0
1000a84c:	3b2c      	subs	r3, #44	; 0x2c
1000a84e:	2b03      	cmp	r3, #3
1000a850:	d80d      	bhi.n	1000a86e <gpio_pin_set_config+0x76>
			/* Set GPIO_MSx as digital mode */
			AON_GP_REGS0->MS_GPIO_MODE.vec.ANALOG_ENABLE_ &= ~(1 << (gpio_pin - PIN_GPIO_MS4));
1000a852:	4d52      	ldr	r5, [pc, #328]	; (1000a99c <gpio_pin_set_config+0x1a4>)
1000a854:	2482      	movs	r4, #130	; 0x82
1000a856:	00e4      	lsls	r4, r4, #3
1000a858:	5d2a      	ldrb	r2, [r5, r4]
1000a85a:	0712      	lsls	r2, r2, #28
1000a85c:	2601      	movs	r6, #1
1000a85e:	409e      	lsls	r6, r3
1000a860:	0f12      	lsrs	r2, r2, #28
1000a862:	5d2b      	ldrb	r3, [r5, r4]
1000a864:	43b2      	bics	r2, r6
1000a866:	260f      	movs	r6, #15
1000a868:	43b3      	bics	r3, r6
1000a86a:	4313      	orrs	r3, r2
1000a86c:	552b      	strb	r3, [r5, r4]
		}
	
		if ((gpio_pin == PIN_AO_GPIO_0) || (gpio_pin == PIN_AO_GPIO_1) ||
1000a86e:	0003      	movs	r3, r0
1000a870:	3b1d      	subs	r3, #29
1000a872:	2b02      	cmp	r3, #2
1000a874:	d829      	bhi.n	1000a8ca <gpio_pin_set_config+0xd2>
				(gpio_pin == PIN_AO_GPIO_2)) {
			/* Active Low, Always On Pull Enable Control */
			if (config->input_pull == GPIO_PIN_PULL_UP) {
1000a876:	784b      	ldrb	r3, [r1, #1]
1000a878:	2b01      	cmp	r3, #1
1000a87a:	d108      	bne.n	1000a88e <gpio_pin_set_config+0x96>
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
1000a87c:	4d47      	ldr	r5, [pc, #284]	; (1000a99c <gpio_pin_set_config+0x1a4>)
1000a87e:	7d2b      	ldrb	r3, [r5, #20]
1000a880:	241f      	movs	r4, #31
1000a882:	1a24      	subs	r4, r4, r0
1000a884:	2201      	movs	r2, #1
1000a886:	40a2      	lsls	r2, r4
1000a888:	4393      	bics	r3, r2
1000a88a:	752b      	strb	r3, [r5, #20]
1000a88c:	e008      	b.n	1000a8a0 <gpio_pin_set_config+0xa8>
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
1000a88e:	4c43      	ldr	r4, [pc, #268]	; (1000a99c <gpio_pin_set_config+0x1a4>)
1000a890:	7d25      	ldrb	r5, [r4, #20]
1000a892:	221f      	movs	r2, #31
1000a894:	1a12      	subs	r2, r2, r0
1000a896:	2301      	movs	r3, #1
1000a898:	4093      	lsls	r3, r2
1000a89a:	432b      	orrs	r3, r5
1000a89c:	b2db      	uxtb	r3, r3
1000a89e:	7523      	strb	r3, [r4, #20]
			}
			if (config->aon_wakeup) {
1000a8a0:	78ca      	ldrb	r2, [r1, #3]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000a8a2:	2300      	movs	r3, #0
			if (config->input_pull == GPIO_PIN_PULL_UP) {
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
			}
			if (config->aon_wakeup) {
1000a8a4:	2a00      	cmp	r2, #0
1000a8a6:	d075      	beq.n	1000a994 <gpio_pin_set_config+0x19c>
				/* Enable AON_GPIO_x to be a wakeup MCU from sleep mode */
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
1000a8a8:	493c      	ldr	r1, [pc, #240]	; (1000a99c <gpio_pin_set_config+0x1a4>)
1000a8aa:	880c      	ldrh	r4, [r1, #0]
1000a8ac:	221f      	movs	r2, #31
1000a8ae:	1a10      	subs	r0, r2, r0
1000a8b0:	0080      	lsls	r0, r0, #2
1000a8b2:	3301      	adds	r3, #1
1000a8b4:	4083      	lsls	r3, r0
1000a8b6:	4323      	orrs	r3, r4
1000a8b8:	b29b      	uxth	r3, r3
1000a8ba:	800b      	strh	r3, [r1, #0]
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
1000a8bc:	4a38      	ldr	r2, [pc, #224]	; (1000a9a0 <gpio_pin_set_config+0x1a8>)
1000a8be:	7811      	ldrb	r1, [r2, #0]
1000a8c0:	2302      	movs	r3, #2
1000a8c2:	430b      	orrs	r3, r1
1000a8c4:	7013      	strb	r3, [r2, #0]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000a8c6:	2300      	movs	r3, #0
1000a8c8:	e064      	b.n	1000a994 <gpio_pin_set_config+0x19c>
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
1000a8ca:	780a      	ldrb	r2, [r1, #0]
1000a8cc:	2a00      	cmp	r2, #0
1000a8ce:	d140      	bne.n	1000a952 <gpio_pin_set_config+0x15a>
				if(gpio_pin < 16) {
1000a8d0:	280f      	cmp	r0, #15
1000a8d2:	d808      	bhi.n	1000a8e6 <gpio_pin_set_config+0xee>
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
1000a8d4:	2301      	movs	r3, #1
1000a8d6:	4083      	lsls	r3, r0
1000a8d8:	b29b      	uxth	r3, r3
1000a8da:	4a32      	ldr	r2, [pc, #200]	; (1000a9a4 <gpio_pin_set_config+0x1ac>)
1000a8dc:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000a8de:	2300      	movs	r3, #0
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
1000a8e0:	281f      	cmp	r0, #31
1000a8e2:	d857      	bhi.n	1000a994 <gpio_pin_set_config+0x19c>
1000a8e4:	e012      	b.n	1000a90c <gpio_pin_set_config+0x114>
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
				if(gpio_pin < 16) {
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32){
1000a8e6:	281f      	cmp	r0, #31
1000a8e8:	d807      	bhi.n	1000a8fa <gpio_pin_set_config+0x102>
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000a8ea:	220f      	movs	r2, #15
1000a8ec:	4002      	ands	r2, r0
1000a8ee:	2301      	movs	r3, #1
1000a8f0:	4093      	lsls	r3, r2
1000a8f2:	b29b      	uxth	r3, r3
1000a8f4:	4a2c      	ldr	r2, [pc, #176]	; (1000a9a8 <gpio_pin_set_config+0x1b0>)
1000a8f6:	8293      	strh	r3, [r2, #20]
1000a8f8:	e008      	b.n	1000a90c <gpio_pin_set_config+0x114>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000a8fa:	230f      	movs	r3, #15
1000a8fc:	4018      	ands	r0, r3
1000a8fe:	3b0e      	subs	r3, #14
1000a900:	4083      	lsls	r3, r0
1000a902:	b29b      	uxth	r3, r3
1000a904:	4a29      	ldr	r2, [pc, #164]	; (1000a9ac <gpio_pin_set_config+0x1b4>)
1000a906:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000a908:	2300      	movs	r3, #0
1000a90a:	e043      	b.n	1000a994 <gpio_pin_set_config+0x19c>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
1000a90c:	784b      	ldrb	r3, [r1, #1]
1000a90e:	2b01      	cmp	r3, #1
1000a910:	d00c      	beq.n	1000a92c <gpio_pin_set_config+0x134>
1000a912:	2b00      	cmp	r3, #0
1000a914:	d002      	beq.n	1000a91c <gpio_pin_set_config+0x124>
1000a916:	2b02      	cmp	r3, #2
1000a918:	d010      	beq.n	1000a93c <gpio_pin_set_config+0x144>
1000a91a:	e03a      	b.n	1000a992 <gpio_pin_set_config+0x19a>
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
1000a91c:	491e      	ldr	r1, [pc, #120]	; (1000a998 <gpio_pin_set_config+0x1a0>)
1000a91e:	6d0a      	ldr	r2, [r1, #80]	; 0x50
1000a920:	2301      	movs	r3, #1
1000a922:	4083      	lsls	r3, r0
1000a924:	4313      	orrs	r3, r2
1000a926:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000a928:	2300      	movs	r3, #0
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
1000a92a:	e033      	b.n	1000a994 <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000a92c:	491a      	ldr	r1, [pc, #104]	; (1000a998 <gpio_pin_set_config+0x1a0>)
1000a92e:	6d0b      	ldr	r3, [r1, #80]	; 0x50
1000a930:	2201      	movs	r2, #1
1000a932:	4082      	lsls	r2, r0
1000a934:	4393      	bics	r3, r2
1000a936:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000a938:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
1000a93a:	e02b      	b.n	1000a994 <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
1000a93c:	4b16      	ldr	r3, [pc, #88]	; (1000a998 <gpio_pin_set_config+0x1a0>)
1000a93e:	6d59      	ldr	r1, [r3, #84]	; 0x54
1000a940:	2201      	movs	r2, #1
1000a942:	4082      	lsls	r2, r0
1000a944:	4311      	orrs	r1, r2
1000a946:	6559      	str	r1, [r3, #84]	; 0x54
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000a948:	6d19      	ldr	r1, [r3, #80]	; 0x50
1000a94a:	4391      	bics	r1, r2
1000a94c:	6519      	str	r1, [r3, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000a94e:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
1000a950:	e020      	b.n	1000a994 <gpio_pin_set_config+0x19c>
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000a952:	2300      	movs	r3, #0
						default:
							status = STATUS_ERR_INVALID_ARG;
							break;
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
1000a954:	2a01      	cmp	r2, #1
1000a956:	d11d      	bne.n	1000a994 <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
1000a958:	280f      	cmp	r0, #15
1000a95a:	d806      	bhi.n	1000a96a <gpio_pin_set_config+0x172>
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
1000a95c:	3301      	adds	r3, #1
1000a95e:	4083      	lsls	r3, r0
1000a960:	b29b      	uxth	r3, r3
1000a962:	4a10      	ldr	r2, [pc, #64]	; (1000a9a4 <gpio_pin_set_config+0x1ac>)
1000a964:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000a966:	2300      	movs	r3, #0
1000a968:	e014      	b.n	1000a994 <gpio_pin_set_config+0x19c>
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
1000a96a:	281f      	cmp	r0, #31
1000a96c:	d808      	bhi.n	1000a980 <gpio_pin_set_config+0x188>
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
1000a96e:	230f      	movs	r3, #15
1000a970:	4018      	ands	r0, r3
1000a972:	3b0e      	subs	r3, #14
1000a974:	4083      	lsls	r3, r0
1000a976:	b29b      	uxth	r3, r3
1000a978:	4a0b      	ldr	r2, [pc, #44]	; (1000a9a8 <gpio_pin_set_config+0x1b0>)
1000a97a:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000a97c:	2300      	movs	r3, #0
1000a97e:	e009      	b.n	1000a994 <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENSET.reg = (1 << (gpio_pin % 16));
1000a980:	230f      	movs	r3, #15
1000a982:	4018      	ands	r0, r3
1000a984:	3b0e      	subs	r3, #14
1000a986:	4083      	lsls	r3, r0
1000a988:	b29b      	uxth	r3, r3
1000a98a:	4a08      	ldr	r2, [pc, #32]	; (1000a9ac <gpio_pin_set_config+0x1b4>)
1000a98c:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000a98e:	2300      	movs	r3, #0
1000a990:	e000      	b.n	1000a994 <gpio_pin_set_config+0x19c>
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
						default:
							status = STATUS_ERR_INVALID_ARG;
1000a992:	2317      	movs	r3, #23
				}
			}
		}
	}
	return status;
}
1000a994:	0018      	movs	r0, r3
1000a996:	bd70      	pop	{r4, r5, r6, pc}
1000a998:	4000b000 	.word	0x4000b000
1000a99c:	4000f000 	.word	0x4000f000
1000a9a0:	4000e000 	.word	0x4000e000
1000a9a4:	40010000 	.word	0x40010000
1000a9a8:	40011000 	.word	0x40011000
1000a9ac:	40013000 	.word	0x40013000

1000a9b0 <gpio_pin_set_output_level>:
 *
 *  \param[in] gpio_pin  Index of the GPIO pin to write to.
 *  \param[in] level     Logical level to set the given pin to.
 */
void gpio_pin_set_output_level(const uint8_t gpio_pin, const bool level)
{
1000a9b0:	b510      	push	{r4, lr}
	if (gpio_pin < 16) {
1000a9b2:	280f      	cmp	r0, #15
1000a9b4:	d810      	bhi.n	1000a9d8 <gpio_pin_set_output_level+0x28>
		if(level) {
1000a9b6:	2900      	cmp	r1, #0
1000a9b8:	d007      	beq.n	1000a9ca <gpio_pin_set_output_level+0x1a>
			GPIO0->DATAOUT.reg |= (1 << gpio_pin);
1000a9ba:	4a1d      	ldr	r2, [pc, #116]	; (1000aa30 <gpio_pin_set_output_level+0x80>)
1000a9bc:	8891      	ldrh	r1, [r2, #4]
1000a9be:	2301      	movs	r3, #1
1000a9c0:	4083      	lsls	r3, r0
1000a9c2:	430b      	orrs	r3, r1
1000a9c4:	b29b      	uxth	r3, r3
1000a9c6:	8093      	strh	r3, [r2, #4]
1000a9c8:	e031      	b.n	1000aa2e <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO0->DATAOUT.reg &= ~(1 << gpio_pin);
1000a9ca:	4919      	ldr	r1, [pc, #100]	; (1000aa30 <gpio_pin_set_output_level+0x80>)
1000a9cc:	888b      	ldrh	r3, [r1, #4]
1000a9ce:	2201      	movs	r2, #1
1000a9d0:	4082      	lsls	r2, r0
1000a9d2:	4393      	bics	r3, r2
1000a9d4:	808b      	strh	r3, [r1, #4]
1000a9d6:	e02a      	b.n	1000aa2e <gpio_pin_set_output_level+0x7e>
		}
	} else if (gpio_pin < 32) {
1000a9d8:	281f      	cmp	r0, #31
1000a9da:	d814      	bhi.n	1000aa06 <gpio_pin_set_output_level+0x56>
		if(level) {
1000a9dc:	2900      	cmp	r1, #0
1000a9de:	d009      	beq.n	1000a9f4 <gpio_pin_set_output_level+0x44>
			GPIO1->DATAOUT.reg |= (1 << (gpio_pin % 16));
1000a9e0:	4914      	ldr	r1, [pc, #80]	; (1000aa34 <gpio_pin_set_output_level+0x84>)
1000a9e2:	888c      	ldrh	r4, [r1, #4]
1000a9e4:	220f      	movs	r2, #15
1000a9e6:	4010      	ands	r0, r2
1000a9e8:	2301      	movs	r3, #1
1000a9ea:	4083      	lsls	r3, r0
1000a9ec:	4323      	orrs	r3, r4
1000a9ee:	b29b      	uxth	r3, r3
1000a9f0:	808b      	strh	r3, [r1, #4]
1000a9f2:	e01c      	b.n	1000aa2e <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO1->DATAOUT.reg &= ~(1 << (gpio_pin % 16));
1000a9f4:	490f      	ldr	r1, [pc, #60]	; (1000aa34 <gpio_pin_set_output_level+0x84>)
1000a9f6:	888b      	ldrh	r3, [r1, #4]
1000a9f8:	220f      	movs	r2, #15
1000a9fa:	4010      	ands	r0, r2
1000a9fc:	3a0e      	subs	r2, #14
1000a9fe:	4082      	lsls	r2, r0
1000aa00:	4393      	bics	r3, r2
1000aa02:	808b      	strh	r3, [r1, #4]
1000aa04:	e013      	b.n	1000aa2e <gpio_pin_set_output_level+0x7e>
		}
	} else {
		if(level) {
1000aa06:	2900      	cmp	r1, #0
1000aa08:	d009      	beq.n	1000aa1e <gpio_pin_set_output_level+0x6e>
			GPIO2->DATAOUT.reg |= (1 << (gpio_pin % 16));
1000aa0a:	490b      	ldr	r1, [pc, #44]	; (1000aa38 <gpio_pin_set_output_level+0x88>)
1000aa0c:	888c      	ldrh	r4, [r1, #4]
1000aa0e:	220f      	movs	r2, #15
1000aa10:	4010      	ands	r0, r2
1000aa12:	2301      	movs	r3, #1
1000aa14:	4083      	lsls	r3, r0
1000aa16:	4323      	orrs	r3, r4
1000aa18:	b29b      	uxth	r3, r3
1000aa1a:	808b      	strh	r3, [r1, #4]
1000aa1c:	e007      	b.n	1000aa2e <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO2->DATAOUT.reg &= ~(1 << (gpio_pin % 16));
1000aa1e:	4906      	ldr	r1, [pc, #24]	; (1000aa38 <gpio_pin_set_output_level+0x88>)
1000aa20:	888b      	ldrh	r3, [r1, #4]
1000aa22:	220f      	movs	r2, #15
1000aa24:	4010      	ands	r0, r2
1000aa26:	3a0e      	subs	r2, #14
1000aa28:	4082      	lsls	r2, r0
1000aa2a:	4393      	bics	r3, r2
1000aa2c:	808b      	strh	r3, [r1, #4]
		}
	}
}
1000aa2e:	bd10      	pop	{r4, pc}
1000aa30:	40010000 	.word	0x40010000
1000aa34:	40011000 	.word	0x40011000
1000aa38:	40013000 	.word	0x40013000

1000aa3c <gpio_pinmux_cofiguration>:
 *
 *  \param[in] gpio_pin   Index of the GPIO pin to toggle.
 *  \param[in] pinmux_sel PINMUX selection.
 */
void gpio_pinmux_cofiguration(const uint8_t gpio_pin, uint16_t pinmux_sel)
{
1000aa3c:	b570      	push	{r4, r5, r6, lr}
	uint8_t megamux_sel = (pinmux_sel >> 8) & 0xFF;
1000aa3e:	0a0d      	lsrs	r5, r1, #8

	pinmux_sel &= 0xFF;
1000aa40:	23ff      	movs	r3, #255	; 0xff
1000aa42:	4019      	ands	r1, r3

	if (gpio_pin <= 7) {
1000aa44:	2807      	cmp	r0, #7
1000aa46:	d833      	bhi.n	1000aab0 <gpio_pinmux_cofiguration+0x74>
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000aa48:	4a4e      	ldr	r2, [pc, #312]	; (1000ab84 <gpio_pinmux_cofiguration+0x148>)
1000aa4a:	6c54      	ldr	r4, [r2, #68]	; 0x44
1000aa4c:	3bf8      	subs	r3, #248	; 0xf8
1000aa4e:	4003      	ands	r3, r0
1000aa50:	009b      	lsls	r3, r3, #2
1000aa52:	2607      	movs	r6, #7
1000aa54:	409e      	lsls	r6, r3
1000aa56:	43b4      	bics	r4, r6
1000aa58:	6454      	str	r4, [r2, #68]	; 0x44
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000aa5a:	6c54      	ldr	r4, [r2, #68]	; 0x44
1000aa5c:	000e      	movs	r6, r1
1000aa5e:	409e      	lsls	r6, r3
1000aa60:	0033      	movs	r3, r6
1000aa62:	4323      	orrs	r3, r4
1000aa64:	6453      	str	r3, [r2, #68]	; 0x44
		if (pinmux_sel == 0x01) {
1000aa66:	2901      	cmp	r1, #1
1000aa68:	d000      	beq.n	1000aa6c <gpio_pinmux_cofiguration+0x30>
1000aa6a:	e08a      	b.n	1000ab82 <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 3) {
1000aa6c:	2803      	cmp	r0, #3
1000aa6e:	d80f      	bhi.n	1000aa90 <gpio_pinmux_cofiguration+0x54>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000aa70:	0011      	movs	r1, r2
1000aa72:	22d0      	movs	r2, #208	; 0xd0
1000aa74:	0052      	lsls	r2, r2, #1
1000aa76:	588c      	ldr	r4, [r1, r2]
1000aa78:	2303      	movs	r3, #3
1000aa7a:	4018      	ands	r0, r3
1000aa7c:	00c0      	lsls	r0, r0, #3
1000aa7e:	333c      	adds	r3, #60	; 0x3c
1000aa80:	4083      	lsls	r3, r0
1000aa82:	439c      	bics	r4, r3
1000aa84:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000aa86:	588b      	ldr	r3, [r1, r2]
1000aa88:	4085      	lsls	r5, r0
1000aa8a:	431d      	orrs	r5, r3
1000aa8c:	508d      	str	r5, [r1, r2]
1000aa8e:	e078      	b.n	1000ab82 <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 7) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000aa90:	493c      	ldr	r1, [pc, #240]	; (1000ab84 <gpio_pinmux_cofiguration+0x148>)
1000aa92:	22d2      	movs	r2, #210	; 0xd2
1000aa94:	0052      	lsls	r2, r2, #1
1000aa96:	588c      	ldr	r4, [r1, r2]
1000aa98:	2303      	movs	r3, #3
1000aa9a:	4018      	ands	r0, r3
1000aa9c:	00c0      	lsls	r0, r0, #3
1000aa9e:	333c      	adds	r3, #60	; 0x3c
1000aaa0:	4083      	lsls	r3, r0
1000aaa2:	439c      	bics	r4, r3
1000aaa4:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000aaa6:	588b      	ldr	r3, [r1, r2]
1000aaa8:	4085      	lsls	r5, r0
1000aaaa:	431d      	orrs	r5, r3
1000aaac:	508d      	str	r5, [r1, r2]
1000aaae:	e068      	b.n	1000ab82 <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 15) {
1000aab0:	280f      	cmp	r0, #15
1000aab2:	d832      	bhi.n	1000ab1a <gpio_pinmux_cofiguration+0xde>
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000aab4:	4a33      	ldr	r2, [pc, #204]	; (1000ab84 <gpio_pinmux_cofiguration+0x148>)
1000aab6:	6c94      	ldr	r4, [r2, #72]	; 0x48
1000aab8:	2307      	movs	r3, #7
1000aaba:	4003      	ands	r3, r0
1000aabc:	009b      	lsls	r3, r3, #2
1000aabe:	2607      	movs	r6, #7
1000aac0:	409e      	lsls	r6, r3
1000aac2:	43b4      	bics	r4, r6
1000aac4:	6494      	str	r4, [r2, #72]	; 0x48
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000aac6:	6c94      	ldr	r4, [r2, #72]	; 0x48
1000aac8:	000e      	movs	r6, r1
1000aaca:	409e      	lsls	r6, r3
1000aacc:	0033      	movs	r3, r6
1000aace:	4323      	orrs	r3, r4
1000aad0:	6493      	str	r3, [r2, #72]	; 0x48
		if (pinmux_sel == 0x01) {
1000aad2:	2901      	cmp	r1, #1
1000aad4:	d155      	bne.n	1000ab82 <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 11) {
1000aad6:	280b      	cmp	r0, #11
1000aad8:	d80f      	bhi.n	1000aafa <gpio_pinmux_cofiguration+0xbe>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000aada:	0011      	movs	r1, r2
1000aadc:	22d4      	movs	r2, #212	; 0xd4
1000aade:	0052      	lsls	r2, r2, #1
1000aae0:	588c      	ldr	r4, [r1, r2]
1000aae2:	2303      	movs	r3, #3
1000aae4:	4018      	ands	r0, r3
1000aae6:	00c0      	lsls	r0, r0, #3
1000aae8:	333c      	adds	r3, #60	; 0x3c
1000aaea:	4083      	lsls	r3, r0
1000aaec:	439c      	bics	r4, r3
1000aaee:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000aaf0:	588b      	ldr	r3, [r1, r2]
1000aaf2:	4085      	lsls	r5, r0
1000aaf4:	431d      	orrs	r5, r3
1000aaf6:	508d      	str	r5, [r1, r2]
1000aaf8:	e043      	b.n	1000ab82 <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 15) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000aafa:	4922      	ldr	r1, [pc, #136]	; (1000ab84 <gpio_pinmux_cofiguration+0x148>)
1000aafc:	22d6      	movs	r2, #214	; 0xd6
1000aafe:	0052      	lsls	r2, r2, #1
1000ab00:	588c      	ldr	r4, [r1, r2]
1000ab02:	2303      	movs	r3, #3
1000ab04:	4018      	ands	r0, r3
1000ab06:	00c0      	lsls	r0, r0, #3
1000ab08:	333c      	adds	r3, #60	; 0x3c
1000ab0a:	4083      	lsls	r3, r0
1000ab0c:	439c      	bics	r4, r3
1000ab0e:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000ab10:	588b      	ldr	r3, [r1, r2]
1000ab12:	4085      	lsls	r5, r0
1000ab14:	431d      	orrs	r5, r3
1000ab16:	508d      	str	r5, [r1, r2]
1000ab18:	e033      	b.n	1000ab82 <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 23) {
1000ab1a:	2817      	cmp	r0, #23
1000ab1c:	d831      	bhi.n	1000ab82 <gpio_pinmux_cofiguration+0x146>
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000ab1e:	4a19      	ldr	r2, [pc, #100]	; (1000ab84 <gpio_pinmux_cofiguration+0x148>)
1000ab20:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
1000ab22:	2307      	movs	r3, #7
1000ab24:	4003      	ands	r3, r0
1000ab26:	009b      	lsls	r3, r3, #2
1000ab28:	2607      	movs	r6, #7
1000ab2a:	409e      	lsls	r6, r3
1000ab2c:	43b4      	bics	r4, r6
1000ab2e:	64d4      	str	r4, [r2, #76]	; 0x4c
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000ab30:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
1000ab32:	000e      	movs	r6, r1
1000ab34:	409e      	lsls	r6, r3
1000ab36:	0033      	movs	r3, r6
1000ab38:	4323      	orrs	r3, r4
1000ab3a:	64d3      	str	r3, [r2, #76]	; 0x4c
		if (pinmux_sel == 0x01) {
1000ab3c:	2901      	cmp	r1, #1
1000ab3e:	d120      	bne.n	1000ab82 <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 19) {
1000ab40:	2813      	cmp	r0, #19
1000ab42:	d80f      	bhi.n	1000ab64 <gpio_pinmux_cofiguration+0x128>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000ab44:	0011      	movs	r1, r2
1000ab46:	22d8      	movs	r2, #216	; 0xd8
1000ab48:	0052      	lsls	r2, r2, #1
1000ab4a:	588c      	ldr	r4, [r1, r2]
1000ab4c:	2303      	movs	r3, #3
1000ab4e:	4018      	ands	r0, r3
1000ab50:	00c0      	lsls	r0, r0, #3
1000ab52:	333c      	adds	r3, #60	; 0x3c
1000ab54:	4083      	lsls	r3, r0
1000ab56:	439c      	bics	r4, r3
1000ab58:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000ab5a:	588b      	ldr	r3, [r1, r2]
1000ab5c:	4085      	lsls	r5, r0
1000ab5e:	431d      	orrs	r5, r3
1000ab60:	508d      	str	r5, [r1, r2]
1000ab62:	e00e      	b.n	1000ab82 <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 23) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000ab64:	4a07      	ldr	r2, [pc, #28]	; (1000ab84 <gpio_pinmux_cofiguration+0x148>)
1000ab66:	23da      	movs	r3, #218	; 0xda
1000ab68:	005b      	lsls	r3, r3, #1
1000ab6a:	58d1      	ldr	r1, [r2, r3]
1000ab6c:	2403      	movs	r4, #3
1000ab6e:	4020      	ands	r0, r4
1000ab70:	00c0      	lsls	r0, r0, #3
1000ab72:	343c      	adds	r4, #60	; 0x3c
1000ab74:	4084      	lsls	r4, r0
1000ab76:	43a1      	bics	r1, r4
1000ab78:	50d1      	str	r1, [r2, r3]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000ab7a:	58d1      	ldr	r1, [r2, r3]
1000ab7c:	4085      	lsls	r5, r0
1000ab7e:	430d      	orrs	r5, r1
1000ab80:	50d5      	str	r5, [r2, r3]
			}
		}
	}
}
1000ab82:	bd70      	pop	{r4, r5, r6, pc}
1000ab84:	4000b000 	.word	0x4000b000

1000ab88 <gpio_register_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 *
 */
void gpio_register_callback(uint8_t gpio_pin, gpio_callback_t callback_func,
				enum gpio_callback callback_type)
{
1000ab88:	b5f0      	push	{r4, r5, r6, r7, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
		gpio_port = 0;
1000ab8a:	2300      	movs	r3, #0
	Assert(callback_func);
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000ab8c:	280f      	cmp	r0, #15
1000ab8e:	d904      	bls.n	1000ab9a <gpio_register_callback+0x12>
		gpio_port = 0;
	} else if (gpio_pin < 32) {
		gpio_port = 1;
	} else {
		gpio_port = 2;
1000ab90:	241f      	movs	r4, #31
1000ab92:	4284      	cmp	r4, r0
1000ab94:	415b      	adcs	r3, r3
1000ab96:	3c1d      	subs	r4, #29
1000ab98:	1ae3      	subs	r3, r4, r3
	}
	switch (callback_type) {
1000ab9a:	2a01      	cmp	r2, #1
1000ab9c:	d016      	beq.n	1000abcc <gpio_register_callback+0x44>
1000ab9e:	2a00      	cmp	r2, #0
1000aba0:	d004      	beq.n	1000abac <gpio_register_callback+0x24>
1000aba2:	2a02      	cmp	r2, #2
1000aba4:	d022      	beq.n	1000abec <gpio_register_callback+0x64>
1000aba6:	2a03      	cmp	r2, #3
1000aba8:	d030      	beq.n	1000ac0c <gpio_register_callback+0x84>
1000abaa:	e03e      	b.n	1000ac2a <gpio_register_callback+0xa2>
	case GPIO_CALLBACK_LOW:
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
1000abac:	4e29      	ldr	r6, [pc, #164]	; (1000ac54 <gpio_register_callback+0xcc>)
1000abae:	00dc      	lsls	r4, r3, #3
1000abb0:	18e2      	adds	r2, r4, r3
1000abb2:	00d2      	lsls	r2, r2, #3
1000abb4:	5997      	ldr	r7, [r2, r6]
1000abb6:	250f      	movs	r5, #15
1000abb8:	4005      	ands	r5, r0
1000abba:	2201      	movs	r2, #1
1000abbc:	40aa      	lsls	r2, r5
1000abbe:	b292      	uxth	r2, r2
1000abc0:	85ba      	strh	r2, [r7, #44]	; 0x2c
		_gpio_instances[gpio_port].hw->INTPOLCLR.reg = 1 << (gpio_pin % 16);
1000abc2:	18e4      	adds	r4, r4, r3
1000abc4:	00e4      	lsls	r4, r4, #3
1000abc6:	59a4      	ldr	r4, [r4, r6]
1000abc8:	86a2      	strh	r2, [r4, #52]	; 0x34
		break;
1000abca:	e02e      	b.n	1000ac2a <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_HIGH:
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
1000abcc:	4e21      	ldr	r6, [pc, #132]	; (1000ac54 <gpio_register_callback+0xcc>)
1000abce:	00dc      	lsls	r4, r3, #3
1000abd0:	18e2      	adds	r2, r4, r3
1000abd2:	00d2      	lsls	r2, r2, #3
1000abd4:	5997      	ldr	r7, [r2, r6]
1000abd6:	250f      	movs	r5, #15
1000abd8:	4005      	ands	r5, r0
1000abda:	2201      	movs	r2, #1
1000abdc:	40aa      	lsls	r2, r5
1000abde:	b292      	uxth	r2, r2
1000abe0:	85ba      	strh	r2, [r7, #44]	; 0x2c
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
1000abe2:	18e4      	adds	r4, r4, r3
1000abe4:	00e4      	lsls	r4, r4, #3
1000abe6:	59a4      	ldr	r4, [r4, r6]
1000abe8:	8622      	strh	r2, [r4, #48]	; 0x30
		break;
1000abea:	e01e      	b.n	1000ac2a <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_RISING:
		_gpio_instances[gpio_port].hw->INTTYPESET.reg = 1 << (gpio_pin % 16);
1000abec:	4e19      	ldr	r6, [pc, #100]	; (1000ac54 <gpio_register_callback+0xcc>)
1000abee:	00dc      	lsls	r4, r3, #3
1000abf0:	18e2      	adds	r2, r4, r3
1000abf2:	00d2      	lsls	r2, r2, #3
1000abf4:	5997      	ldr	r7, [r2, r6]
1000abf6:	250f      	movs	r5, #15
1000abf8:	4005      	ands	r5, r0
1000abfa:	2201      	movs	r2, #1
1000abfc:	40aa      	lsls	r2, r5
1000abfe:	b292      	uxth	r2, r2
1000ac00:	853a      	strh	r2, [r7, #40]	; 0x28
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
1000ac02:	18e4      	adds	r4, r4, r3
1000ac04:	00e4      	lsls	r4, r4, #3
1000ac06:	59a4      	ldr	r4, [r4, r6]
1000ac08:	8622      	strh	r2, [r4, #48]	; 0x30
		break;
1000ac0a:	e00e      	b.n	1000ac2a <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_FALLING:
		_gpio_instances[gpio_port].hw->INTTYPESET.reg = 1 << (gpio_pin % 16);
1000ac0c:	4e11      	ldr	r6, [pc, #68]	; (1000ac54 <gpio_register_callback+0xcc>)
1000ac0e:	00dc      	lsls	r4, r3, #3
1000ac10:	18e2      	adds	r2, r4, r3
1000ac12:	00d2      	lsls	r2, r2, #3
1000ac14:	5997      	ldr	r7, [r2, r6]
1000ac16:	250f      	movs	r5, #15
1000ac18:	4005      	ands	r5, r0
1000ac1a:	2201      	movs	r2, #1
1000ac1c:	40aa      	lsls	r2, r5
1000ac1e:	b292      	uxth	r2, r2
1000ac20:	853a      	strh	r2, [r7, #40]	; 0x28
		_gpio_instances[gpio_port].hw->INTPOLCLR.reg = (1 << (gpio_pin % 16));
1000ac22:	18e4      	adds	r4, r4, r3
1000ac24:	00e4      	lsls	r4, r4, #3
1000ac26:	59a4      	ldr	r4, [r4, r6]
1000ac28:	86a2      	strh	r2, [r4, #52]	; 0x34

	case GPIO_CALLBACK_N:
		break;
	}
	/* Register callback function */
	_gpio_instances[gpio_port].callback[gpio_pin % 16] = callback_func;
1000ac2a:	220f      	movs	r2, #15
1000ac2c:	4010      	ands	r0, r2
1000ac2e:	4c09      	ldr	r4, [pc, #36]	; (1000ac54 <gpio_register_callback+0xcc>)
1000ac30:	00dd      	lsls	r5, r3, #3
1000ac32:	18ea      	adds	r2, r5, r3
1000ac34:	0052      	lsls	r2, r2, #1
1000ac36:	1812      	adds	r2, r2, r0
1000ac38:	0092      	lsls	r2, r2, #2
1000ac3a:	18a2      	adds	r2, r4, r2
1000ac3c:	6051      	str	r1, [r2, #4]
	/* Set the bit corresponding to the gpio pin */
	_gpio_instances[gpio_port].callback_reg_mask |= (1 << (gpio_pin % 16));
1000ac3e:	18ea      	adds	r2, r5, r3
1000ac40:	00d2      	lsls	r2, r2, #3
1000ac42:	18a2      	adds	r2, r4, r2
1000ac44:	3244      	adds	r2, #68	; 0x44
1000ac46:	2101      	movs	r1, #1
1000ac48:	4081      	lsls	r1, r0
1000ac4a:	8813      	ldrh	r3, [r2, #0]
1000ac4c:	430b      	orrs	r3, r1
1000ac4e:	8013      	strh	r3, [r2, #0]
}
1000ac50:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ac52:	46c0      	nop			; (mov r8, r8)
1000ac54:	10017010 	.word	0x10017010

1000ac58 <gpio_enable_callback>:
 * conditions for the callback type are met.
 *
 * \param[in]  gpio_pin   GPIO pin
 */
void gpio_enable_callback(uint8_t gpio_pin)
{
1000ac58:	b530      	push	{r4, r5, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000ac5a:	280f      	cmp	r0, #15
1000ac5c:	d805      	bhi.n	1000ac6a <gpio_enable_callback+0x12>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000ac5e:	2280      	movs	r2, #128	; 0x80
1000ac60:	0412      	lsls	r2, r2, #16
1000ac62:	4b12      	ldr	r3, [pc, #72]	; (1000acac <gpio_enable_callback+0x54>)
1000ac64:	601a      	str	r2, [r3, #0]
		gpio_port = 0;
1000ac66:	2200      	movs	r2, #0
1000ac68:	e00c      	b.n	1000ac84 <gpio_enable_callback+0x2c>
		NVIC_EnableIRQ(GPIO0_IRQn);
	} else if (gpio_pin < 32) {
1000ac6a:	281f      	cmp	r0, #31
1000ac6c:	d805      	bhi.n	1000ac7a <gpio_enable_callback+0x22>
1000ac6e:	2280      	movs	r2, #128	; 0x80
1000ac70:	0452      	lsls	r2, r2, #17
1000ac72:	4b0e      	ldr	r3, [pc, #56]	; (1000acac <gpio_enable_callback+0x54>)
1000ac74:	601a      	str	r2, [r3, #0]
		gpio_port = 1;
1000ac76:	2201      	movs	r2, #1
1000ac78:	e004      	b.n	1000ac84 <gpio_enable_callback+0x2c>
1000ac7a:	2280      	movs	r2, #128	; 0x80
1000ac7c:	0492      	lsls	r2, r2, #18
1000ac7e:	4b0b      	ldr	r3, [pc, #44]	; (1000acac <gpio_enable_callback+0x54>)
1000ac80:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(GPIO1_IRQn);
	} else {
		gpio_port = 2;
1000ac82:	2202      	movs	r2, #2
		NVIC_EnableIRQ(GPIO2_IRQn);
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask |= (1 << (gpio_pin % 16));
1000ac84:	230f      	movs	r3, #15
1000ac86:	4018      	ands	r0, r3
1000ac88:	2101      	movs	r1, #1
1000ac8a:	4081      	lsls	r1, r0
1000ac8c:	4c08      	ldr	r4, [pc, #32]	; (1000acb0 <gpio_enable_callback+0x58>)
1000ac8e:	00d5      	lsls	r5, r2, #3
1000ac90:	18ab      	adds	r3, r5, r2
1000ac92:	00db      	lsls	r3, r3, #3
1000ac94:	18e3      	adds	r3, r4, r3
1000ac96:	3346      	adds	r3, #70	; 0x46
1000ac98:	8818      	ldrh	r0, [r3, #0]
1000ac9a:	4308      	orrs	r0, r1
1000ac9c:	8018      	strh	r0, [r3, #0]
	_gpio_instances[gpio_port].hw->INTENSET.reg = (1 << (gpio_pin % 16));
1000ac9e:	18aa      	adds	r2, r5, r2
1000aca0:	00d2      	lsls	r2, r2, #3
1000aca2:	5913      	ldr	r3, [r2, r4]
1000aca4:	b289      	uxth	r1, r1
1000aca6:	8419      	strh	r1, [r3, #32]
}
1000aca8:	bd30      	pop	{r4, r5, pc}
1000acaa:	46c0      	nop			; (mov r8, r8)
1000acac:	e000e100 	.word	0xe000e100
1000acb0:	10017010 	.word	0x10017010

1000acb4 <gpio_disable_callback>:
 * The callback function will not be called from the interrupt handler.
 *
 * \param[in]  gpio_pin   GPIO pin
 */
void gpio_disable_callback(uint8_t gpio_pin)
{
1000acb4:	b530      	push	{r4, r5, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
		gpio_port = 0;
1000acb6:	2300      	movs	r3, #0
{
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000acb8:	280f      	cmp	r0, #15
1000acba:	d904      	bls.n	1000acc6 <gpio_disable_callback+0x12>
		gpio_port = 0;
	} else if (gpio_pin < 32) {
		gpio_port = 1;
	} else {
		gpio_port = 2;
1000acbc:	221f      	movs	r2, #31
1000acbe:	4282      	cmp	r2, r0
1000acc0:	415b      	adcs	r3, r3
1000acc2:	3a1d      	subs	r2, #29
1000acc4:	1ad3      	subs	r3, r2, r3
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask &= ~(1 << (gpio_pin % 16));
1000acc6:	220f      	movs	r2, #15
1000acc8:	4010      	ands	r0, r2
1000acca:	2101      	movs	r1, #1
1000accc:	4081      	lsls	r1, r0
1000acce:	4c07      	ldr	r4, [pc, #28]	; (1000acec <gpio_disable_callback+0x38>)
1000acd0:	00dd      	lsls	r5, r3, #3
1000acd2:	18ea      	adds	r2, r5, r3
1000acd4:	00d2      	lsls	r2, r2, #3
1000acd6:	18a2      	adds	r2, r4, r2
1000acd8:	3246      	adds	r2, #70	; 0x46
1000acda:	8810      	ldrh	r0, [r2, #0]
1000acdc:	4388      	bics	r0, r1
1000acde:	8010      	strh	r0, [r2, #0]
	_gpio_instances[gpio_port].hw->INTENCLR.reg = (1 << (gpio_pin % 16));
1000ace0:	18eb      	adds	r3, r5, r3
1000ace2:	00db      	lsls	r3, r3, #3
1000ace4:	591b      	ldr	r3, [r3, r4]
1000ace6:	b289      	uxth	r1, r1
1000ace8:	8499      	strh	r1, [r3, #36]	; 0x24
}
1000acea:	bd30      	pop	{r4, r5, pc}
1000acec:	10017010 	.word	0x10017010

1000acf0 <gpio_init>:
 *
 * This function will init GPIO callback.
 *
 */
void gpio_init(void)
{
1000acf0:	b510      	push	{r4, lr}
1000acf2:	4a11      	ldr	r2, [pc, #68]	; (1000ad38 <gpio_init+0x48>)
1000acf4:	0010      	movs	r0, r2
1000acf6:	30d8      	adds	r0, #216	; 0xd8
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
			_gpio_instances[i].callback[j] = NULL;
1000acf8:	2100      	movs	r1, #0
1000acfa:	e007      	b.n	1000ad0c <gpio_init+0x1c>
1000acfc:	c302      	stmia	r3!, {r1}
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
1000acfe:	4293      	cmp	r3, r2
1000ad00:	d1fc      	bne.n	1000acfc <gpio_init+0xc>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
1000ad02:	8051      	strh	r1, [r2, #2]
		_gpio_instances[i].callback_reg_mask = 0;
1000ad04:	8011      	strh	r1, [r2, #0]
1000ad06:	3248      	adds	r2, #72	; 0x48
 */
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
1000ad08:	4282      	cmp	r2, r0
1000ad0a:	d002      	beq.n	1000ad12 <gpio_init+0x22>
1000ad0c:	0013      	movs	r3, r2
1000ad0e:	3b40      	subs	r3, #64	; 0x40
1000ad10:	e7f4      	b.n	1000acfc <gpio_init+0xc>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
		_gpio_instances[i].callback_reg_mask = 0;
	}
	_gpio_instances[0].hw = (void *)GPIO0;
1000ad12:	4b0a      	ldr	r3, [pc, #40]	; (1000ad3c <gpio_init+0x4c>)
1000ad14:	4a0a      	ldr	r2, [pc, #40]	; (1000ad40 <gpio_init+0x50>)
1000ad16:	601a      	str	r2, [r3, #0]
	_gpio_instances[1].hw = (void *)GPIO1;
1000ad18:	4a0a      	ldr	r2, [pc, #40]	; (1000ad44 <gpio_init+0x54>)
1000ad1a:	649a      	str	r2, [r3, #72]	; 0x48
	_gpio_instances[2].hw = (void *)GPIO2;
1000ad1c:	490a      	ldr	r1, [pc, #40]	; (1000ad48 <gpio_init+0x58>)
1000ad1e:	2290      	movs	r2, #144	; 0x90
1000ad20:	5099      	str	r1, [r3, r2]
	system_register_isr(RAM_ISR_TABLE_PORT0_COMB_INDEX, (uint32_t)gpio_port0_isr_handler);
1000ad22:	490a      	ldr	r1, [pc, #40]	; (1000ad4c <gpio_init+0x5c>)
1000ad24:	2027      	movs	r0, #39	; 0x27
1000ad26:	4c0a      	ldr	r4, [pc, #40]	; (1000ad50 <gpio_init+0x60>)
1000ad28:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT1_COMB_INDEX, (uint32_t)gpio_port1_isr_handler);
1000ad2a:	490a      	ldr	r1, [pc, #40]	; (1000ad54 <gpio_init+0x64>)
1000ad2c:	2028      	movs	r0, #40	; 0x28
1000ad2e:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT2_COMB_INDEX, (uint32_t)gpio_port2_isr_handler);
1000ad30:	4909      	ldr	r1, [pc, #36]	; (1000ad58 <gpio_init+0x68>)
1000ad32:	2029      	movs	r0, #41	; 0x29
1000ad34:	47a0      	blx	r4
}
1000ad36:	bd10      	pop	{r4, pc}
1000ad38:	10017054 	.word	0x10017054
1000ad3c:	10017010 	.word	0x10017010
1000ad40:	40010000 	.word	0x40010000
1000ad44:	40011000 	.word	0x40011000
1000ad48:	40013000 	.word	0x40013000
1000ad4c:	1000a699 	.word	0x1000a699
1000ad50:	1000b91d 	.word	0x1000b91d
1000ad54:	1000a6fd 	.word	0x1000a6fd
1000ad58:	1000a76d 	.word	0x1000a76d

1000ad5c <system_clock_config>:
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_config(enum system_clock_resource resoure, \
				enum system_clock_freq freq)
{
	switch (resoure) {
1000ad5c:	2801      	cmp	r0, #1
1000ad5e:	d00d      	beq.n	1000ad7c <system_clock_config+0x20>
1000ad60:	2800      	cmp	r0, #0
1000ad62:	d002      	beq.n	1000ad6a <system_clock_config+0xe>
1000ad64:	2802      	cmp	r0, #2
1000ad66:	d01c      	beq.n	1000ada2 <system_clock_config+0x46>
1000ad68:	e02e      	b.n	1000adc8 <system_clock_config+0x6c>
		case CLOCK_RESOURCE_XO_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000ad6a:	4a18      	ldr	r2, [pc, #96]	; (1000adcc <system_clock_config+0x70>)
1000ad6c:	6990      	ldr	r0, [r2, #24]
1000ad6e:	230c      	movs	r3, #12
1000ad70:	4303      	orrs	r3, r0
1000ad72:	6193      	str	r3, [r2, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			system_clock_value = 26000000;
1000ad74:	4a16      	ldr	r2, [pc, #88]	; (1000add0 <system_clock_config+0x74>)
1000ad76:	4b17      	ldr	r3, [pc, #92]	; (1000add4 <system_clock_config+0x78>)
1000ad78:	601a      	str	r2, [r3, #0]
			break;
1000ad7a:	e01a      	b.n	1000adb2 <system_clock_config+0x56>

		case CLOCK_RESOURCE_LP_2_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000ad7c:	4b13      	ldr	r3, [pc, #76]	; (1000adcc <system_clock_config+0x70>)
1000ad7e:	6998      	ldr	r0, [r3, #24]
1000ad80:	2208      	movs	r2, #8
1000ad82:	4302      	orrs	r2, r0
1000ad84:	619a      	str	r2, [r3, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000ad86:	699a      	ldr	r2, [r3, #24]
1000ad88:	2004      	movs	r0, #4
1000ad8a:	4382      	bics	r2, r0
1000ad8c:	619a      	str	r2, [r3, #24]
					~LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK;
			AON_GP_REGS0->AON_PMU_CTRL.reg |= \
1000ad8e:	4a12      	ldr	r2, [pc, #72]	; (1000add8 <system_clock_config+0x7c>)
1000ad90:	6853      	ldr	r3, [r2, #4]
1000ad92:	2080      	movs	r0, #128	; 0x80
1000ad94:	0300      	lsls	r0, r0, #12
1000ad96:	4303      	orrs	r3, r0
1000ad98:	6053      	str	r3, [r2, #4]
					AON_GP_REGS_AON_PMU_CTRL_PMU_2MHZ_CLK_EN;
			system_clock_value = 2000000;
1000ad9a:	4a10      	ldr	r2, [pc, #64]	; (1000addc <system_clock_config+0x80>)
1000ad9c:	4b0d      	ldr	r3, [pc, #52]	; (1000add4 <system_clock_config+0x78>)
1000ad9e:	601a      	str	r2, [r3, #0]
			break;
1000ada0:	e007      	b.n	1000adb2 <system_clock_config+0x56>

		case CLOCK_RESOURCE_RC_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000ada2:	4a0a      	ldr	r2, [pc, #40]	; (1000adcc <system_clock_config+0x70>)
1000ada4:	6993      	ldr	r3, [r2, #24]
1000ada6:	200c      	movs	r0, #12
1000ada8:	4383      	bics	r3, r0
1000adaa:	6193      	str	r3, [r2, #24]
					~(LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
1000adac:	4a08      	ldr	r2, [pc, #32]	; (1000add0 <system_clock_config+0x74>)
1000adae:	4b09      	ldr	r3, [pc, #36]	; (1000add4 <system_clock_config+0x78>)
1000adb0:	601a      	str	r2, [r3, #0]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000adb2:	4b06      	ldr	r3, [pc, #24]	; (1000adcc <system_clock_config+0x70>)
1000adb4:	699a      	ldr	r2, [r3, #24]
1000adb6:	2003      	movs	r0, #3
1000adb8:	4382      	bics	r2, r0
1000adba:	619a      	str	r2, [r3, #24]
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000adbc:	699a      	ldr	r2, [r3, #24]
1000adbe:	4001      	ands	r1, r0
1000adc0:	4311      	orrs	r1, r2
1000adc2:	6199      	str	r1, [r3, #24]
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
1000adc4:	2000      	movs	r0, #0
1000adc6:	e000      	b.n	1000adca <system_clock_config+0x6e>
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
			break;

		default:
			return STATUS_ERR_INVALID_ARG;
1000adc8:	2017      	movs	r0, #23
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
}
1000adca:	4770      	bx	lr
1000adcc:	4000b000 	.word	0x4000b000
1000add0:	018cba80 	.word	0x018cba80
1000add4:	100170e8 	.word	0x100170e8
1000add8:	4000f000 	.word	0x4000f000
1000addc:	001e8480 	.word	0x001e8480

1000ade0 <system_clock_get_value>:
 *
 * \return system clock value.
 */
uint32_t system_clock_get_value(void)
{
	return system_clock_value;
1000ade0:	4b01      	ldr	r3, [pc, #4]	; (1000ade8 <system_clock_get_value+0x8>)
1000ade2:	6818      	ldr	r0, [r3, #0]
}
1000ade4:	4770      	bx	lr
1000ade6:	46c0      	nop			; (mov r8, r8)
1000ade8:	100170e8 	.word	0x100170e8

1000adec <system_clock_peripheral_enable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_enable(enum system_peripheral peripheral)
{
1000adec:	b500      	push	{lr}
	switch (peripheral) {
1000adee:	2835      	cmp	r0, #53	; 0x35
1000adf0:	d900      	bls.n	1000adf4 <system_clock_peripheral_enable+0x8>
1000adf2:	e1a2      	b.n	1000b13a <system_clock_peripheral_enable+0x34e>
1000adf4:	0080      	lsls	r0, r0, #2
1000adf6:	4bd2      	ldr	r3, [pc, #840]	; (1000b140 <system_clock_peripheral_enable+0x354>)
1000adf8:	581b      	ldr	r3, [r3, r0]
1000adfa:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000adfc:	4ad1      	ldr	r2, [pc, #836]	; (1000b144 <system_clock_peripheral_enable+0x358>)
1000adfe:	68d1      	ldr	r1, [r2, #12]
1000ae00:	2302      	movs	r3, #2
1000ae02:	430b      	orrs	r3, r1
1000ae04:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ae06:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;
1000ae08:	e198      	b.n	1000b13c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000ae0a:	4ace      	ldr	r2, [pc, #824]	; (1000b144 <system_clock_peripheral_enable+0x358>)
1000ae0c:	68d1      	ldr	r1, [r2, #12]
1000ae0e:	2304      	movs	r3, #4
1000ae10:	430b      	orrs	r3, r1
1000ae12:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ae14:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;
1000ae16:	e191      	b.n	1000b13c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000ae18:	4aca      	ldr	r2, [pc, #808]	; (1000b144 <system_clock_peripheral_enable+0x358>)
1000ae1a:	68d1      	ldr	r1, [r2, #12]
1000ae1c:	2308      	movs	r3, #8
1000ae1e:	430b      	orrs	r3, r1
1000ae20:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ae22:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;
1000ae24:	e18a      	b.n	1000b13c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000ae26:	4ac7      	ldr	r2, [pc, #796]	; (1000b144 <system_clock_peripheral_enable+0x358>)
1000ae28:	68d1      	ldr	r1, [r2, #12]
1000ae2a:	2310      	movs	r3, #16
1000ae2c:	430b      	orrs	r3, r1
1000ae2e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ae30:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;
1000ae32:	e183      	b.n	1000b13c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000ae34:	4ac3      	ldr	r2, [pc, #780]	; (1000b144 <system_clock_peripheral_enable+0x358>)
1000ae36:	68d1      	ldr	r1, [r2, #12]
1000ae38:	2320      	movs	r3, #32
1000ae3a:	430b      	orrs	r3, r1
1000ae3c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ae3e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;
1000ae40:	e17c      	b.n	1000b13c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000ae42:	4ac0      	ldr	r2, [pc, #768]	; (1000b144 <system_clock_peripheral_enable+0x358>)
1000ae44:	68d1      	ldr	r1, [r2, #12]
1000ae46:	2380      	movs	r3, #128	; 0x80
1000ae48:	430b      	orrs	r3, r1
1000ae4a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ae4c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
1000ae4e:	e175      	b.n	1000b13c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000ae50:	4abc      	ldr	r2, [pc, #752]	; (1000b144 <system_clock_peripheral_enable+0x358>)
1000ae52:	68d3      	ldr	r3, [r2, #12]
1000ae54:	2180      	movs	r1, #128	; 0x80
1000ae56:	0049      	lsls	r1, r1, #1
1000ae58:	430b      	orrs	r3, r1
1000ae5a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ae5c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN;
		break;
1000ae5e:	e16d      	b.n	1000b13c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000ae60:	4ab8      	ldr	r2, [pc, #736]	; (1000b144 <system_clock_peripheral_enable+0x358>)
1000ae62:	68d3      	ldr	r3, [r2, #12]
1000ae64:	2180      	movs	r1, #128	; 0x80
1000ae66:	0109      	lsls	r1, r1, #4
1000ae68:	430b      	orrs	r3, r1
1000ae6a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ae6c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN;
		break;
1000ae6e:	e165      	b.n	1000b13c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000ae70:	4ab4      	ldr	r2, [pc, #720]	; (1000b144 <system_clock_peripheral_enable+0x358>)
1000ae72:	68d3      	ldr	r3, [r2, #12]
1000ae74:	2180      	movs	r1, #128	; 0x80
1000ae76:	0149      	lsls	r1, r1, #5
1000ae78:	430b      	orrs	r3, r1
1000ae7a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ae7c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN;
		break;
1000ae7e:	e15d      	b.n	1000b13c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000ae80:	4ab0      	ldr	r2, [pc, #704]	; (1000b144 <system_clock_peripheral_enable+0x358>)
1000ae82:	68d3      	ldr	r3, [r2, #12]
1000ae84:	2180      	movs	r1, #128	; 0x80
1000ae86:	0189      	lsls	r1, r1, #6
1000ae88:	430b      	orrs	r3, r1
1000ae8a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ae8c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN;
		break;
1000ae8e:	e155      	b.n	1000b13c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000ae90:	4aac      	ldr	r2, [pc, #688]	; (1000b144 <system_clock_peripheral_enable+0x358>)
1000ae92:	68d3      	ldr	r3, [r2, #12]
1000ae94:	2180      	movs	r1, #128	; 0x80
1000ae96:	01c9      	lsls	r1, r1, #7
1000ae98:	430b      	orrs	r3, r1
1000ae9a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ae9c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN;
		break;
1000ae9e:	e14d      	b.n	1000b13c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000aea0:	4aa8      	ldr	r2, [pc, #672]	; (1000b144 <system_clock_peripheral_enable+0x358>)
1000aea2:	68d3      	ldr	r3, [r2, #12]
1000aea4:	2180      	movs	r1, #128	; 0x80
1000aea6:	0209      	lsls	r1, r1, #8
1000aea8:	430b      	orrs	r3, r1
1000aeaa:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aeac:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN;
		break;
1000aeae:	e145      	b.n	1000b13c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000aeb0:	4aa4      	ldr	r2, [pc, #656]	; (1000b144 <system_clock_peripheral_enable+0x358>)
1000aeb2:	68d3      	ldr	r3, [r2, #12]
1000aeb4:	2180      	movs	r1, #128	; 0x80
1000aeb6:	0249      	lsls	r1, r1, #9
1000aeb8:	430b      	orrs	r3, r1
1000aeba:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aebc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN;
		break;
1000aebe:	e13d      	b.n	1000b13c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000aec0:	4aa0      	ldr	r2, [pc, #640]	; (1000b144 <system_clock_peripheral_enable+0x358>)
1000aec2:	68d3      	ldr	r3, [r2, #12]
1000aec4:	2180      	movs	r1, #128	; 0x80
1000aec6:	0289      	lsls	r1, r1, #10
1000aec8:	430b      	orrs	r3, r1
1000aeca:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aecc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
1000aece:	e135      	b.n	1000b13c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000aed0:	4a9c      	ldr	r2, [pc, #624]	; (1000b144 <system_clock_peripheral_enable+0x358>)
1000aed2:	68d3      	ldr	r3, [r2, #12]
1000aed4:	2180      	movs	r1, #128	; 0x80
1000aed6:	02c9      	lsls	r1, r1, #11
1000aed8:	430b      	orrs	r3, r1
1000aeda:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aedc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
1000aede:	e12d      	b.n	1000b13c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000aee0:	4a98      	ldr	r2, [pc, #608]	; (1000b144 <system_clock_peripheral_enable+0x358>)
1000aee2:	68d3      	ldr	r3, [r2, #12]
1000aee4:	2180      	movs	r1, #128	; 0x80
1000aee6:	0309      	lsls	r1, r1, #12
1000aee8:	430b      	orrs	r3, r1
1000aeea:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aeec:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
1000aeee:	e125      	b.n	1000b13c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000aef0:	4a94      	ldr	r2, [pc, #592]	; (1000b144 <system_clock_peripheral_enable+0x358>)
1000aef2:	68d3      	ldr	r3, [r2, #12]
1000aef4:	2180      	movs	r1, #128	; 0x80
1000aef6:	0349      	lsls	r1, r1, #13
1000aef8:	430b      	orrs	r3, r1
1000aefa:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aefc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
1000aefe:	e11d      	b.n	1000b13c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000af00:	4a90      	ldr	r2, [pc, #576]	; (1000b144 <system_clock_peripheral_enable+0x358>)
1000af02:	68d3      	ldr	r3, [r2, #12]
1000af04:	2180      	movs	r1, #128	; 0x80
1000af06:	0389      	lsls	r1, r1, #14
1000af08:	430b      	orrs	r3, r1
1000af0a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000af0c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
1000af0e:	e115      	b.n	1000b13c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000af10:	4a8c      	ldr	r2, [pc, #560]	; (1000b144 <system_clock_peripheral_enable+0x358>)
1000af12:	68d3      	ldr	r3, [r2, #12]
1000af14:	2180      	movs	r1, #128	; 0x80
1000af16:	03c9      	lsls	r1, r1, #15
1000af18:	430b      	orrs	r3, r1
1000af1a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000af1c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
1000af1e:	e10d      	b.n	1000b13c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000af20:	4a88      	ldr	r2, [pc, #544]	; (1000b144 <system_clock_peripheral_enable+0x358>)
1000af22:	68d3      	ldr	r3, [r2, #12]
1000af24:	2180      	movs	r1, #128	; 0x80
1000af26:	0409      	lsls	r1, r1, #16
1000af28:	430b      	orrs	r3, r1
1000af2a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000af2c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
1000af2e:	e105      	b.n	1000b13c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000af30:	4a84      	ldr	r2, [pc, #528]	; (1000b144 <system_clock_peripheral_enable+0x358>)
1000af32:	68d3      	ldr	r3, [r2, #12]
1000af34:	2180      	movs	r1, #128	; 0x80
1000af36:	0449      	lsls	r1, r1, #17
1000af38:	430b      	orrs	r3, r1
1000af3a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000af3c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
1000af3e:	e0fd      	b.n	1000b13c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000af40:	4a80      	ldr	r2, [pc, #512]	; (1000b144 <system_clock_peripheral_enable+0x358>)
1000af42:	68d3      	ldr	r3, [r2, #12]
1000af44:	2180      	movs	r1, #128	; 0x80
1000af46:	0489      	lsls	r1, r1, #18
1000af48:	430b      	orrs	r3, r1
1000af4a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000af4c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
1000af4e:	e0f5      	b.n	1000b13c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000af50:	4a7c      	ldr	r2, [pc, #496]	; (1000b144 <system_clock_peripheral_enable+0x358>)
1000af52:	68d3      	ldr	r3, [r2, #12]
1000af54:	2180      	movs	r1, #128	; 0x80
1000af56:	04c9      	lsls	r1, r1, #19
1000af58:	430b      	orrs	r3, r1
1000af5a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000af5c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN;
		break;
1000af5e:	e0ed      	b.n	1000b13c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000af60:	4a78      	ldr	r2, [pc, #480]	; (1000b144 <system_clock_peripheral_enable+0x358>)
1000af62:	68d3      	ldr	r3, [r2, #12]
1000af64:	2180      	movs	r1, #128	; 0x80
1000af66:	0509      	lsls	r1, r1, #20
1000af68:	430b      	orrs	r3, r1
1000af6a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000af6c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN;
		break;
1000af6e:	e0e5      	b.n	1000b13c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000af70:	4a74      	ldr	r2, [pc, #464]	; (1000b144 <system_clock_peripheral_enable+0x358>)
1000af72:	68d3      	ldr	r3, [r2, #12]
1000af74:	2180      	movs	r1, #128	; 0x80
1000af76:	0549      	lsls	r1, r1, #21
1000af78:	430b      	orrs	r3, r1
1000af7a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000af7c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN;
		break;
1000af7e:	e0dd      	b.n	1000b13c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000af80:	4a70      	ldr	r2, [pc, #448]	; (1000b144 <system_clock_peripheral_enable+0x358>)
1000af82:	68d3      	ldr	r3, [r2, #12]
1000af84:	2180      	movs	r1, #128	; 0x80
1000af86:	0589      	lsls	r1, r1, #22
1000af88:	430b      	orrs	r3, r1
1000af8a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000af8c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN;
		break;
1000af8e:	e0d5      	b.n	1000b13c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000af90:	4a6c      	ldr	r2, [pc, #432]	; (1000b144 <system_clock_peripheral_enable+0x358>)
1000af92:	68d3      	ldr	r3, [r2, #12]
1000af94:	2180      	movs	r1, #128	; 0x80
1000af96:	05c9      	lsls	r1, r1, #23
1000af98:	430b      	orrs	r3, r1
1000af9a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000af9c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
1000af9e:	e0cd      	b.n	1000b13c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000afa0:	4a68      	ldr	r2, [pc, #416]	; (1000b144 <system_clock_peripheral_enable+0x358>)
1000afa2:	6911      	ldr	r1, [r2, #16]
1000afa4:	2301      	movs	r3, #1
1000afa6:	430b      	orrs	r3, r1
1000afa8:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000afaa:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;
1000afac:	e0c6      	b.n	1000b13c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000afae:	4a65      	ldr	r2, [pc, #404]	; (1000b144 <system_clock_peripheral_enable+0x358>)
1000afb0:	6911      	ldr	r1, [r2, #16]
1000afb2:	2302      	movs	r3, #2
1000afb4:	430b      	orrs	r3, r1
1000afb6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000afb8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;
1000afba:	e0bf      	b.n	1000b13c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000afbc:	4a61      	ldr	r2, [pc, #388]	; (1000b144 <system_clock_peripheral_enable+0x358>)
1000afbe:	6911      	ldr	r1, [r2, #16]
1000afc0:	2304      	movs	r3, #4
1000afc2:	430b      	orrs	r3, r1
1000afc4:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000afc6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;
1000afc8:	e0b8      	b.n	1000b13c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000afca:	4a5e      	ldr	r2, [pc, #376]	; (1000b144 <system_clock_peripheral_enable+0x358>)
1000afcc:	6911      	ldr	r1, [r2, #16]
1000afce:	2308      	movs	r3, #8
1000afd0:	430b      	orrs	r3, r1
1000afd2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000afd4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;
1000afd6:	e0b1      	b.n	1000b13c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000afd8:	4a5a      	ldr	r2, [pc, #360]	; (1000b144 <system_clock_peripheral_enable+0x358>)
1000afda:	6911      	ldr	r1, [r2, #16]
1000afdc:	2310      	movs	r3, #16
1000afde:	430b      	orrs	r3, r1
1000afe0:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000afe2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;
1000afe4:	e0aa      	b.n	1000b13c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000afe6:	4a57      	ldr	r2, [pc, #348]	; (1000b144 <system_clock_peripheral_enable+0x358>)
1000afe8:	6911      	ldr	r1, [r2, #16]
1000afea:	2320      	movs	r3, #32
1000afec:	430b      	orrs	r3, r1
1000afee:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aff0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;
1000aff2:	e0a3      	b.n	1000b13c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000aff4:	4a53      	ldr	r2, [pc, #332]	; (1000b144 <system_clock_peripheral_enable+0x358>)
1000aff6:	6911      	ldr	r1, [r2, #16]
1000aff8:	2340      	movs	r3, #64	; 0x40
1000affa:	430b      	orrs	r3, r1
1000affc:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000affe:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;
1000b000:	e09c      	b.n	1000b13c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b002:	4a50      	ldr	r2, [pc, #320]	; (1000b144 <system_clock_peripheral_enable+0x358>)
1000b004:	6911      	ldr	r1, [r2, #16]
1000b006:	2380      	movs	r3, #128	; 0x80
1000b008:	430b      	orrs	r3, r1
1000b00a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b00c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN;
		break;
1000b00e:	e095      	b.n	1000b13c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b010:	4a4c      	ldr	r2, [pc, #304]	; (1000b144 <system_clock_peripheral_enable+0x358>)
1000b012:	6913      	ldr	r3, [r2, #16]
1000b014:	2180      	movs	r1, #128	; 0x80
1000b016:	0049      	lsls	r1, r1, #1
1000b018:	430b      	orrs	r3, r1
1000b01a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b01c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN;
		break;
1000b01e:	e08d      	b.n	1000b13c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b020:	4a48      	ldr	r2, [pc, #288]	; (1000b144 <system_clock_peripheral_enable+0x358>)
1000b022:	6913      	ldr	r3, [r2, #16]
1000b024:	2180      	movs	r1, #128	; 0x80
1000b026:	0089      	lsls	r1, r1, #2
1000b028:	430b      	orrs	r3, r1
1000b02a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b02c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN;
		break;
1000b02e:	e085      	b.n	1000b13c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b030:	4a44      	ldr	r2, [pc, #272]	; (1000b144 <system_clock_peripheral_enable+0x358>)
1000b032:	6913      	ldr	r3, [r2, #16]
1000b034:	2180      	movs	r1, #128	; 0x80
1000b036:	00c9      	lsls	r1, r1, #3
1000b038:	430b      	orrs	r3, r1
1000b03a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b03c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
1000b03e:	e07d      	b.n	1000b13c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b040:	4a40      	ldr	r2, [pc, #256]	; (1000b144 <system_clock_peripheral_enable+0x358>)
1000b042:	6913      	ldr	r3, [r2, #16]
1000b044:	2180      	movs	r1, #128	; 0x80
1000b046:	0109      	lsls	r1, r1, #4
1000b048:	430b      	orrs	r3, r1
1000b04a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b04c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
1000b04e:	e075      	b.n	1000b13c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b050:	4a3c      	ldr	r2, [pc, #240]	; (1000b144 <system_clock_peripheral_enable+0x358>)
1000b052:	6913      	ldr	r3, [r2, #16]
1000b054:	2180      	movs	r1, #128	; 0x80
1000b056:	0149      	lsls	r1, r1, #5
1000b058:	430b      	orrs	r3, r1
1000b05a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b05c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
1000b05e:	e06d      	b.n	1000b13c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b060:	4a38      	ldr	r2, [pc, #224]	; (1000b144 <system_clock_peripheral_enable+0x358>)
1000b062:	6913      	ldr	r3, [r2, #16]
1000b064:	2180      	movs	r1, #128	; 0x80
1000b066:	0189      	lsls	r1, r1, #6
1000b068:	430b      	orrs	r3, r1
1000b06a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b06c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
1000b06e:	e065      	b.n	1000b13c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b070:	4a34      	ldr	r2, [pc, #208]	; (1000b144 <system_clock_peripheral_enable+0x358>)
1000b072:	6913      	ldr	r3, [r2, #16]
1000b074:	2180      	movs	r1, #128	; 0x80
1000b076:	01c9      	lsls	r1, r1, #7
1000b078:	430b      	orrs	r3, r1
1000b07a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b07c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN;
		break;
1000b07e:	e05d      	b.n	1000b13c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b080:	4a30      	ldr	r2, [pc, #192]	; (1000b144 <system_clock_peripheral_enable+0x358>)
1000b082:	6913      	ldr	r3, [r2, #16]
1000b084:	2180      	movs	r1, #128	; 0x80
1000b086:	0209      	lsls	r1, r1, #8
1000b088:	430b      	orrs	r3, r1
1000b08a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b08c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
1000b08e:	e055      	b.n	1000b13c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b090:	4a2c      	ldr	r2, [pc, #176]	; (1000b144 <system_clock_peripheral_enable+0x358>)
1000b092:	6913      	ldr	r3, [r2, #16]
1000b094:	2180      	movs	r1, #128	; 0x80
1000b096:	0249      	lsls	r1, r1, #9
1000b098:	430b      	orrs	r3, r1
1000b09a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b09c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
1000b09e:	e04d      	b.n	1000b13c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b0a0:	4a28      	ldr	r2, [pc, #160]	; (1000b144 <system_clock_peripheral_enable+0x358>)
1000b0a2:	6913      	ldr	r3, [r2, #16]
1000b0a4:	2180      	movs	r1, #128	; 0x80
1000b0a6:	0289      	lsls	r1, r1, #10
1000b0a8:	430b      	orrs	r3, r1
1000b0aa:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b0ac:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
1000b0ae:	e045      	b.n	1000b13c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b0b0:	4a24      	ldr	r2, [pc, #144]	; (1000b144 <system_clock_peripheral_enable+0x358>)
1000b0b2:	6913      	ldr	r3, [r2, #16]
1000b0b4:	2180      	movs	r1, #128	; 0x80
1000b0b6:	02c9      	lsls	r1, r1, #11
1000b0b8:	430b      	orrs	r3, r1
1000b0ba:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b0bc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
1000b0be:	e03d      	b.n	1000b13c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b0c0:	4a20      	ldr	r2, [pc, #128]	; (1000b144 <system_clock_peripheral_enable+0x358>)
1000b0c2:	6913      	ldr	r3, [r2, #16]
1000b0c4:	2180      	movs	r1, #128	; 0x80
1000b0c6:	0309      	lsls	r1, r1, #12
1000b0c8:	430b      	orrs	r3, r1
1000b0ca:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b0cc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
1000b0ce:	e035      	b.n	1000b13c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b0d0:	4a1c      	ldr	r2, [pc, #112]	; (1000b144 <system_clock_peripheral_enable+0x358>)
1000b0d2:	6913      	ldr	r3, [r2, #16]
1000b0d4:	2180      	movs	r1, #128	; 0x80
1000b0d6:	0349      	lsls	r1, r1, #13
1000b0d8:	430b      	orrs	r3, r1
1000b0da:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b0dc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
1000b0de:	e02d      	b.n	1000b13c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b0e0:	4a18      	ldr	r2, [pc, #96]	; (1000b144 <system_clock_peripheral_enable+0x358>)
1000b0e2:	6913      	ldr	r3, [r2, #16]
1000b0e4:	2180      	movs	r1, #128	; 0x80
1000b0e6:	0389      	lsls	r1, r1, #14
1000b0e8:	430b      	orrs	r3, r1
1000b0ea:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b0ec:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
1000b0ee:	e025      	b.n	1000b13c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b0f0:	4a14      	ldr	r2, [pc, #80]	; (1000b144 <system_clock_peripheral_enable+0x358>)
1000b0f2:	6913      	ldr	r3, [r2, #16]
1000b0f4:	2180      	movs	r1, #128	; 0x80
1000b0f6:	03c9      	lsls	r1, r1, #15
1000b0f8:	430b      	orrs	r3, r1
1000b0fa:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b0fc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
1000b0fe:	e01d      	b.n	1000b13c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b100:	4a10      	ldr	r2, [pc, #64]	; (1000b144 <system_clock_peripheral_enable+0x358>)
1000b102:	6913      	ldr	r3, [r2, #16]
1000b104:	2180      	movs	r1, #128	; 0x80
1000b106:	0409      	lsls	r1, r1, #16
1000b108:	430b      	orrs	r3, r1
1000b10a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b10c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
1000b10e:	e015      	b.n	1000b13c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000b110:	4a0c      	ldr	r2, [pc, #48]	; (1000b144 <system_clock_peripheral_enable+0x358>)
1000b112:	7d11      	ldrb	r1, [r2, #20]
1000b114:	2301      	movs	r3, #1
1000b116:	430b      	orrs	r3, r1
1000b118:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b11a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;
1000b11c:	e00e      	b.n	1000b13c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000b11e:	4a09      	ldr	r2, [pc, #36]	; (1000b144 <system_clock_peripheral_enable+0x358>)
1000b120:	7d11      	ldrb	r1, [r2, #20]
1000b122:	2302      	movs	r3, #2
1000b124:	430b      	orrs	r3, r1
1000b126:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b128:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;
1000b12a:	e007      	b.n	1000b13c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000b12c:	4a05      	ldr	r2, [pc, #20]	; (1000b144 <system_clock_peripheral_enable+0x358>)
1000b12e:	7d11      	ldrb	r1, [r2, #20]
1000b130:	2304      	movs	r3, #4
1000b132:	430b      	orrs	r3, r1
1000b134:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b136:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_PERIPH_REGS_CLK_EN;
		break;
1000b138:	e000      	b.n	1000b13c <system_clock_peripheral_enable+0x350>

		default:
			return STATUS_ERR_INVALID_ARG;
1000b13a:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000b13c:	bd00      	pop	{pc}
1000b13e:	46c0      	nop			; (mov r8, r8)
1000b140:	1001448c 	.word	0x1001448c
1000b144:	4000b000 	.word	0x4000b000

1000b148 <system_clock_peripheral_disable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_disable(enum system_peripheral peripheral)
{
1000b148:	b500      	push	{lr}
	switch (peripheral) {
1000b14a:	2835      	cmp	r0, #53	; 0x35
1000b14c:	d900      	bls.n	1000b150 <system_clock_peripheral_disable+0x8>
1000b14e:	e17d      	b.n	1000b44c <system_clock_peripheral_disable+0x304>
1000b150:	0080      	lsls	r0, r0, #2
1000b152:	4bbf      	ldr	r3, [pc, #764]	; (1000b450 <system_clock_peripheral_disable+0x308>)
1000b154:	581b      	ldr	r3, [r3, r0]
1000b156:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b158:	4abe      	ldr	r2, [pc, #760]	; (1000b454 <system_clock_peripheral_disable+0x30c>)
1000b15a:	68d3      	ldr	r3, [r2, #12]
1000b15c:	2102      	movs	r1, #2
1000b15e:	438b      	bics	r3, r1
1000b160:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b162:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;
1000b164:	e173      	b.n	1000b44e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b166:	4abb      	ldr	r2, [pc, #748]	; (1000b454 <system_clock_peripheral_disable+0x30c>)
1000b168:	68d3      	ldr	r3, [r2, #12]
1000b16a:	2104      	movs	r1, #4
1000b16c:	438b      	bics	r3, r1
1000b16e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b170:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;
1000b172:	e16c      	b.n	1000b44e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b174:	4ab7      	ldr	r2, [pc, #732]	; (1000b454 <system_clock_peripheral_disable+0x30c>)
1000b176:	68d3      	ldr	r3, [r2, #12]
1000b178:	2108      	movs	r1, #8
1000b17a:	438b      	bics	r3, r1
1000b17c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b17e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;
1000b180:	e165      	b.n	1000b44e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b182:	4ab4      	ldr	r2, [pc, #720]	; (1000b454 <system_clock_peripheral_disable+0x30c>)
1000b184:	68d3      	ldr	r3, [r2, #12]
1000b186:	2110      	movs	r1, #16
1000b188:	438b      	bics	r3, r1
1000b18a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b18c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;
1000b18e:	e15e      	b.n	1000b44e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b190:	4ab0      	ldr	r2, [pc, #704]	; (1000b454 <system_clock_peripheral_disable+0x30c>)
1000b192:	68d3      	ldr	r3, [r2, #12]
1000b194:	2120      	movs	r1, #32
1000b196:	438b      	bics	r3, r1
1000b198:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b19a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;
1000b19c:	e157      	b.n	1000b44e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b19e:	4aad      	ldr	r2, [pc, #692]	; (1000b454 <system_clock_peripheral_disable+0x30c>)
1000b1a0:	68d3      	ldr	r3, [r2, #12]
1000b1a2:	2180      	movs	r1, #128	; 0x80
1000b1a4:	438b      	bics	r3, r1
1000b1a6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b1a8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
1000b1aa:	e150      	b.n	1000b44e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b1ac:	4aa9      	ldr	r2, [pc, #676]	; (1000b454 <system_clock_peripheral_disable+0x30c>)
1000b1ae:	68d1      	ldr	r1, [r2, #12]
1000b1b0:	4ba9      	ldr	r3, [pc, #676]	; (1000b458 <system_clock_peripheral_disable+0x310>)
1000b1b2:	400b      	ands	r3, r1
1000b1b4:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b1b6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN;
		break;
1000b1b8:	e149      	b.n	1000b44e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b1ba:	4aa6      	ldr	r2, [pc, #664]	; (1000b454 <system_clock_peripheral_disable+0x30c>)
1000b1bc:	68d1      	ldr	r1, [r2, #12]
1000b1be:	4ba7      	ldr	r3, [pc, #668]	; (1000b45c <system_clock_peripheral_disable+0x314>)
1000b1c0:	400b      	ands	r3, r1
1000b1c2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b1c4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN;
		break;
1000b1c6:	e142      	b.n	1000b44e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b1c8:	4aa2      	ldr	r2, [pc, #648]	; (1000b454 <system_clock_peripheral_disable+0x30c>)
1000b1ca:	68d1      	ldr	r1, [r2, #12]
1000b1cc:	4ba4      	ldr	r3, [pc, #656]	; (1000b460 <system_clock_peripheral_disable+0x318>)
1000b1ce:	400b      	ands	r3, r1
1000b1d0:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b1d2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN;
		break;
1000b1d4:	e13b      	b.n	1000b44e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b1d6:	4a9f      	ldr	r2, [pc, #636]	; (1000b454 <system_clock_peripheral_disable+0x30c>)
1000b1d8:	68d1      	ldr	r1, [r2, #12]
1000b1da:	4ba2      	ldr	r3, [pc, #648]	; (1000b464 <system_clock_peripheral_disable+0x31c>)
1000b1dc:	400b      	ands	r3, r1
1000b1de:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b1e0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN;
		break;
1000b1e2:	e134      	b.n	1000b44e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b1e4:	4a9b      	ldr	r2, [pc, #620]	; (1000b454 <system_clock_peripheral_disable+0x30c>)
1000b1e6:	68d1      	ldr	r1, [r2, #12]
1000b1e8:	4b9f      	ldr	r3, [pc, #636]	; (1000b468 <system_clock_peripheral_disable+0x320>)
1000b1ea:	400b      	ands	r3, r1
1000b1ec:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b1ee:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN;
		break;
1000b1f0:	e12d      	b.n	1000b44e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b1f2:	4a98      	ldr	r2, [pc, #608]	; (1000b454 <system_clock_peripheral_disable+0x30c>)
1000b1f4:	68d1      	ldr	r1, [r2, #12]
1000b1f6:	4b9d      	ldr	r3, [pc, #628]	; (1000b46c <system_clock_peripheral_disable+0x324>)
1000b1f8:	400b      	ands	r3, r1
1000b1fa:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b1fc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN;
		break;
1000b1fe:	e126      	b.n	1000b44e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b200:	4a94      	ldr	r2, [pc, #592]	; (1000b454 <system_clock_peripheral_disable+0x30c>)
1000b202:	68d1      	ldr	r1, [r2, #12]
1000b204:	4b9a      	ldr	r3, [pc, #616]	; (1000b470 <system_clock_peripheral_disable+0x328>)
1000b206:	400b      	ands	r3, r1
1000b208:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b20a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN;
		break;
1000b20c:	e11f      	b.n	1000b44e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b20e:	4a91      	ldr	r2, [pc, #580]	; (1000b454 <system_clock_peripheral_disable+0x30c>)
1000b210:	68d1      	ldr	r1, [r2, #12]
1000b212:	4b98      	ldr	r3, [pc, #608]	; (1000b474 <system_clock_peripheral_disable+0x32c>)
1000b214:	400b      	ands	r3, r1
1000b216:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b218:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
1000b21a:	e118      	b.n	1000b44e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b21c:	4a8d      	ldr	r2, [pc, #564]	; (1000b454 <system_clock_peripheral_disable+0x30c>)
1000b21e:	68d1      	ldr	r1, [r2, #12]
1000b220:	4b95      	ldr	r3, [pc, #596]	; (1000b478 <system_clock_peripheral_disable+0x330>)
1000b222:	400b      	ands	r3, r1
1000b224:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b226:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
1000b228:	e111      	b.n	1000b44e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b22a:	4a8a      	ldr	r2, [pc, #552]	; (1000b454 <system_clock_peripheral_disable+0x30c>)
1000b22c:	68d1      	ldr	r1, [r2, #12]
1000b22e:	4b93      	ldr	r3, [pc, #588]	; (1000b47c <system_clock_peripheral_disable+0x334>)
1000b230:	400b      	ands	r3, r1
1000b232:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b234:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
1000b236:	e10a      	b.n	1000b44e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b238:	4a86      	ldr	r2, [pc, #536]	; (1000b454 <system_clock_peripheral_disable+0x30c>)
1000b23a:	68d1      	ldr	r1, [r2, #12]
1000b23c:	4b90      	ldr	r3, [pc, #576]	; (1000b480 <system_clock_peripheral_disable+0x338>)
1000b23e:	400b      	ands	r3, r1
1000b240:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b242:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
1000b244:	e103      	b.n	1000b44e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b246:	4a83      	ldr	r2, [pc, #524]	; (1000b454 <system_clock_peripheral_disable+0x30c>)
1000b248:	68d1      	ldr	r1, [r2, #12]
1000b24a:	4b8e      	ldr	r3, [pc, #568]	; (1000b484 <system_clock_peripheral_disable+0x33c>)
1000b24c:	400b      	ands	r3, r1
1000b24e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b250:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
1000b252:	e0fc      	b.n	1000b44e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b254:	4a7f      	ldr	r2, [pc, #508]	; (1000b454 <system_clock_peripheral_disable+0x30c>)
1000b256:	68d1      	ldr	r1, [r2, #12]
1000b258:	4b8b      	ldr	r3, [pc, #556]	; (1000b488 <system_clock_peripheral_disable+0x340>)
1000b25a:	400b      	ands	r3, r1
1000b25c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b25e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
1000b260:	e0f5      	b.n	1000b44e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b262:	4a7c      	ldr	r2, [pc, #496]	; (1000b454 <system_clock_peripheral_disable+0x30c>)
1000b264:	68d1      	ldr	r1, [r2, #12]
1000b266:	4b89      	ldr	r3, [pc, #548]	; (1000b48c <system_clock_peripheral_disable+0x344>)
1000b268:	400b      	ands	r3, r1
1000b26a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b26c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
1000b26e:	e0ee      	b.n	1000b44e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b270:	4a78      	ldr	r2, [pc, #480]	; (1000b454 <system_clock_peripheral_disable+0x30c>)
1000b272:	68d1      	ldr	r1, [r2, #12]
1000b274:	4b86      	ldr	r3, [pc, #536]	; (1000b490 <system_clock_peripheral_disable+0x348>)
1000b276:	400b      	ands	r3, r1
1000b278:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b27a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
1000b27c:	e0e7      	b.n	1000b44e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b27e:	4a75      	ldr	r2, [pc, #468]	; (1000b454 <system_clock_peripheral_disable+0x30c>)
1000b280:	68d1      	ldr	r1, [r2, #12]
1000b282:	4b84      	ldr	r3, [pc, #528]	; (1000b494 <system_clock_peripheral_disable+0x34c>)
1000b284:	400b      	ands	r3, r1
1000b286:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b288:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
1000b28a:	e0e0      	b.n	1000b44e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b28c:	4a71      	ldr	r2, [pc, #452]	; (1000b454 <system_clock_peripheral_disable+0x30c>)
1000b28e:	68d1      	ldr	r1, [r2, #12]
1000b290:	4b81      	ldr	r3, [pc, #516]	; (1000b498 <system_clock_peripheral_disable+0x350>)
1000b292:	400b      	ands	r3, r1
1000b294:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b296:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN;
		break;
1000b298:	e0d9      	b.n	1000b44e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b29a:	4a6e      	ldr	r2, [pc, #440]	; (1000b454 <system_clock_peripheral_disable+0x30c>)
1000b29c:	68d1      	ldr	r1, [r2, #12]
1000b29e:	4b7f      	ldr	r3, [pc, #508]	; (1000b49c <system_clock_peripheral_disable+0x354>)
1000b2a0:	400b      	ands	r3, r1
1000b2a2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b2a4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN;
		break;
1000b2a6:	e0d2      	b.n	1000b44e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b2a8:	4a6a      	ldr	r2, [pc, #424]	; (1000b454 <system_clock_peripheral_disable+0x30c>)
1000b2aa:	68d1      	ldr	r1, [r2, #12]
1000b2ac:	4b7c      	ldr	r3, [pc, #496]	; (1000b4a0 <system_clock_peripheral_disable+0x358>)
1000b2ae:	400b      	ands	r3, r1
1000b2b0:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b2b2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN;
		break;
1000b2b4:	e0cb      	b.n	1000b44e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b2b6:	4a67      	ldr	r2, [pc, #412]	; (1000b454 <system_clock_peripheral_disable+0x30c>)
1000b2b8:	68d1      	ldr	r1, [r2, #12]
1000b2ba:	4b7a      	ldr	r3, [pc, #488]	; (1000b4a4 <system_clock_peripheral_disable+0x35c>)
1000b2bc:	400b      	ands	r3, r1
1000b2be:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b2c0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN;
		break;
1000b2c2:	e0c4      	b.n	1000b44e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b2c4:	4a63      	ldr	r2, [pc, #396]	; (1000b454 <system_clock_peripheral_disable+0x30c>)
1000b2c6:	68d1      	ldr	r1, [r2, #12]
1000b2c8:	4b77      	ldr	r3, [pc, #476]	; (1000b4a8 <system_clock_peripheral_disable+0x360>)
1000b2ca:	400b      	ands	r3, r1
1000b2cc:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b2ce:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
1000b2d0:	e0bd      	b.n	1000b44e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b2d2:	4a60      	ldr	r2, [pc, #384]	; (1000b454 <system_clock_peripheral_disable+0x30c>)
1000b2d4:	6913      	ldr	r3, [r2, #16]
1000b2d6:	2101      	movs	r1, #1
1000b2d8:	438b      	bics	r3, r1
1000b2da:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b2dc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;
1000b2de:	e0b6      	b.n	1000b44e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b2e0:	4a5c      	ldr	r2, [pc, #368]	; (1000b454 <system_clock_peripheral_disable+0x30c>)
1000b2e2:	6913      	ldr	r3, [r2, #16]
1000b2e4:	2102      	movs	r1, #2
1000b2e6:	438b      	bics	r3, r1
1000b2e8:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b2ea:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;
1000b2ec:	e0af      	b.n	1000b44e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b2ee:	4a59      	ldr	r2, [pc, #356]	; (1000b454 <system_clock_peripheral_disable+0x30c>)
1000b2f0:	6913      	ldr	r3, [r2, #16]
1000b2f2:	2104      	movs	r1, #4
1000b2f4:	438b      	bics	r3, r1
1000b2f6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b2f8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;
1000b2fa:	e0a8      	b.n	1000b44e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b2fc:	4a55      	ldr	r2, [pc, #340]	; (1000b454 <system_clock_peripheral_disable+0x30c>)
1000b2fe:	6913      	ldr	r3, [r2, #16]
1000b300:	2108      	movs	r1, #8
1000b302:	438b      	bics	r3, r1
1000b304:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b306:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;
1000b308:	e0a1      	b.n	1000b44e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b30a:	4a52      	ldr	r2, [pc, #328]	; (1000b454 <system_clock_peripheral_disable+0x30c>)
1000b30c:	6913      	ldr	r3, [r2, #16]
1000b30e:	2110      	movs	r1, #16
1000b310:	438b      	bics	r3, r1
1000b312:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b314:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;
1000b316:	e09a      	b.n	1000b44e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b318:	4a4e      	ldr	r2, [pc, #312]	; (1000b454 <system_clock_peripheral_disable+0x30c>)
1000b31a:	6913      	ldr	r3, [r2, #16]
1000b31c:	2120      	movs	r1, #32
1000b31e:	438b      	bics	r3, r1
1000b320:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b322:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;
1000b324:	e093      	b.n	1000b44e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b326:	4a4b      	ldr	r2, [pc, #300]	; (1000b454 <system_clock_peripheral_disable+0x30c>)
1000b328:	6913      	ldr	r3, [r2, #16]
1000b32a:	2140      	movs	r1, #64	; 0x40
1000b32c:	438b      	bics	r3, r1
1000b32e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b330:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;
1000b332:	e08c      	b.n	1000b44e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b334:	4a47      	ldr	r2, [pc, #284]	; (1000b454 <system_clock_peripheral_disable+0x30c>)
1000b336:	6913      	ldr	r3, [r2, #16]
1000b338:	2180      	movs	r1, #128	; 0x80
1000b33a:	438b      	bics	r3, r1
1000b33c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b33e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN;
		break;
1000b340:	e085      	b.n	1000b44e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b342:	4a44      	ldr	r2, [pc, #272]	; (1000b454 <system_clock_peripheral_disable+0x30c>)
1000b344:	6911      	ldr	r1, [r2, #16]
1000b346:	4b44      	ldr	r3, [pc, #272]	; (1000b458 <system_clock_peripheral_disable+0x310>)
1000b348:	400b      	ands	r3, r1
1000b34a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b34c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN;
		break;
1000b34e:	e07e      	b.n	1000b44e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b350:	4a40      	ldr	r2, [pc, #256]	; (1000b454 <system_clock_peripheral_disable+0x30c>)
1000b352:	6911      	ldr	r1, [r2, #16]
1000b354:	4b55      	ldr	r3, [pc, #340]	; (1000b4ac <system_clock_peripheral_disable+0x364>)
1000b356:	400b      	ands	r3, r1
1000b358:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b35a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN;
		break;
1000b35c:	e077      	b.n	1000b44e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b35e:	4a3d      	ldr	r2, [pc, #244]	; (1000b454 <system_clock_peripheral_disable+0x30c>)
1000b360:	6911      	ldr	r1, [r2, #16]
1000b362:	4b53      	ldr	r3, [pc, #332]	; (1000b4b0 <system_clock_peripheral_disable+0x368>)
1000b364:	400b      	ands	r3, r1
1000b366:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b368:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
1000b36a:	e070      	b.n	1000b44e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b36c:	4a39      	ldr	r2, [pc, #228]	; (1000b454 <system_clock_peripheral_disable+0x30c>)
1000b36e:	6911      	ldr	r1, [r2, #16]
1000b370:	4b3a      	ldr	r3, [pc, #232]	; (1000b45c <system_clock_peripheral_disable+0x314>)
1000b372:	400b      	ands	r3, r1
1000b374:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b376:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
1000b378:	e069      	b.n	1000b44e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b37a:	4a36      	ldr	r2, [pc, #216]	; (1000b454 <system_clock_peripheral_disable+0x30c>)
1000b37c:	6911      	ldr	r1, [r2, #16]
1000b37e:	4b38      	ldr	r3, [pc, #224]	; (1000b460 <system_clock_peripheral_disable+0x318>)
1000b380:	400b      	ands	r3, r1
1000b382:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b384:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
1000b386:	e062      	b.n	1000b44e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b388:	4a32      	ldr	r2, [pc, #200]	; (1000b454 <system_clock_peripheral_disable+0x30c>)
1000b38a:	6911      	ldr	r1, [r2, #16]
1000b38c:	4b35      	ldr	r3, [pc, #212]	; (1000b464 <system_clock_peripheral_disable+0x31c>)
1000b38e:	400b      	ands	r3, r1
1000b390:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b392:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
1000b394:	e05b      	b.n	1000b44e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b396:	4a2f      	ldr	r2, [pc, #188]	; (1000b454 <system_clock_peripheral_disable+0x30c>)
1000b398:	6911      	ldr	r1, [r2, #16]
1000b39a:	4b33      	ldr	r3, [pc, #204]	; (1000b468 <system_clock_peripheral_disable+0x320>)
1000b39c:	400b      	ands	r3, r1
1000b39e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b3a0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN;
		break;
1000b3a2:	e054      	b.n	1000b44e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b3a4:	4a2b      	ldr	r2, [pc, #172]	; (1000b454 <system_clock_peripheral_disable+0x30c>)
1000b3a6:	6911      	ldr	r1, [r2, #16]
1000b3a8:	4b30      	ldr	r3, [pc, #192]	; (1000b46c <system_clock_peripheral_disable+0x324>)
1000b3aa:	400b      	ands	r3, r1
1000b3ac:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b3ae:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
1000b3b0:	e04d      	b.n	1000b44e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b3b2:	4a28      	ldr	r2, [pc, #160]	; (1000b454 <system_clock_peripheral_disable+0x30c>)
1000b3b4:	6911      	ldr	r1, [r2, #16]
1000b3b6:	4b2e      	ldr	r3, [pc, #184]	; (1000b470 <system_clock_peripheral_disable+0x328>)
1000b3b8:	400b      	ands	r3, r1
1000b3ba:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b3bc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
1000b3be:	e046      	b.n	1000b44e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b3c0:	4a24      	ldr	r2, [pc, #144]	; (1000b454 <system_clock_peripheral_disable+0x30c>)
1000b3c2:	6911      	ldr	r1, [r2, #16]
1000b3c4:	4b2b      	ldr	r3, [pc, #172]	; (1000b474 <system_clock_peripheral_disable+0x32c>)
1000b3c6:	400b      	ands	r3, r1
1000b3c8:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b3ca:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
1000b3cc:	e03f      	b.n	1000b44e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b3ce:	4a21      	ldr	r2, [pc, #132]	; (1000b454 <system_clock_peripheral_disable+0x30c>)
1000b3d0:	6911      	ldr	r1, [r2, #16]
1000b3d2:	4b29      	ldr	r3, [pc, #164]	; (1000b478 <system_clock_peripheral_disable+0x330>)
1000b3d4:	400b      	ands	r3, r1
1000b3d6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b3d8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
1000b3da:	e038      	b.n	1000b44e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b3dc:	4a1d      	ldr	r2, [pc, #116]	; (1000b454 <system_clock_peripheral_disable+0x30c>)
1000b3de:	6911      	ldr	r1, [r2, #16]
1000b3e0:	4b26      	ldr	r3, [pc, #152]	; (1000b47c <system_clock_peripheral_disable+0x334>)
1000b3e2:	400b      	ands	r3, r1
1000b3e4:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b3e6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
1000b3e8:	e031      	b.n	1000b44e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b3ea:	4a1a      	ldr	r2, [pc, #104]	; (1000b454 <system_clock_peripheral_disable+0x30c>)
1000b3ec:	6911      	ldr	r1, [r2, #16]
1000b3ee:	4b24      	ldr	r3, [pc, #144]	; (1000b480 <system_clock_peripheral_disable+0x338>)
1000b3f0:	400b      	ands	r3, r1
1000b3f2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b3f4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
1000b3f6:	e02a      	b.n	1000b44e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b3f8:	4a16      	ldr	r2, [pc, #88]	; (1000b454 <system_clock_peripheral_disable+0x30c>)
1000b3fa:	6911      	ldr	r1, [r2, #16]
1000b3fc:	4b21      	ldr	r3, [pc, #132]	; (1000b484 <system_clock_peripheral_disable+0x33c>)
1000b3fe:	400b      	ands	r3, r1
1000b400:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b402:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
1000b404:	e023      	b.n	1000b44e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b406:	4a13      	ldr	r2, [pc, #76]	; (1000b454 <system_clock_peripheral_disable+0x30c>)
1000b408:	6911      	ldr	r1, [r2, #16]
1000b40a:	4b1f      	ldr	r3, [pc, #124]	; (1000b488 <system_clock_peripheral_disable+0x340>)
1000b40c:	400b      	ands	r3, r1
1000b40e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b410:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
1000b412:	e01c      	b.n	1000b44e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b414:	4a0f      	ldr	r2, [pc, #60]	; (1000b454 <system_clock_peripheral_disable+0x30c>)
1000b416:	6911      	ldr	r1, [r2, #16]
1000b418:	4b1c      	ldr	r3, [pc, #112]	; (1000b48c <system_clock_peripheral_disable+0x344>)
1000b41a:	400b      	ands	r3, r1
1000b41c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b41e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
1000b420:	e015      	b.n	1000b44e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
1000b422:	4a0c      	ldr	r2, [pc, #48]	; (1000b454 <system_clock_peripheral_disable+0x30c>)
1000b424:	7d13      	ldrb	r3, [r2, #20]
1000b426:	2101      	movs	r1, #1
1000b428:	438b      	bics	r3, r1
1000b42a:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b42c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;
1000b42e:	e00e      	b.n	1000b44e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
1000b430:	4a08      	ldr	r2, [pc, #32]	; (1000b454 <system_clock_peripheral_disable+0x30c>)
1000b432:	7d13      	ldrb	r3, [r2, #20]
1000b434:	2102      	movs	r1, #2
1000b436:	438b      	bics	r3, r1
1000b438:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b43a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;
1000b43c:	e007      	b.n	1000b44e <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
1000b43e:	4a05      	ldr	r2, [pc, #20]	; (1000b454 <system_clock_peripheral_disable+0x30c>)
1000b440:	7d13      	ldrb	r3, [r2, #20]
1000b442:	2104      	movs	r1, #4
1000b444:	438b      	bics	r3, r1
1000b446:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b448:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_PERIPH_REGS_CLK_EN;
		break;
1000b44a:	e000      	b.n	1000b44e <system_clock_peripheral_disable+0x306>

		default:
			return STATUS_ERR_INVALID_ARG;
1000b44c:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000b44e:	bd00      	pop	{pc}
1000b450:	10014564 	.word	0x10014564
1000b454:	4000b000 	.word	0x4000b000
1000b458:	fffffeff 	.word	0xfffffeff
1000b45c:	fffff7ff 	.word	0xfffff7ff
1000b460:	ffffefff 	.word	0xffffefff
1000b464:	ffffdfff 	.word	0xffffdfff
1000b468:	ffffbfff 	.word	0xffffbfff
1000b46c:	ffff7fff 	.word	0xffff7fff
1000b470:	fffeffff 	.word	0xfffeffff
1000b474:	fffdffff 	.word	0xfffdffff
1000b478:	fffbffff 	.word	0xfffbffff
1000b47c:	fff7ffff 	.word	0xfff7ffff
1000b480:	ffefffff 	.word	0xffefffff
1000b484:	ffdfffff 	.word	0xffdfffff
1000b488:	ffbfffff 	.word	0xffbfffff
1000b48c:	ff7fffff 	.word	0xff7fffff
1000b490:	feffffff 	.word	0xfeffffff
1000b494:	fdffffff 	.word	0xfdffffff
1000b498:	fbffffff 	.word	0xfbffffff
1000b49c:	f7ffffff 	.word	0xf7ffffff
1000b4a0:	efffffff 	.word	0xefffffff
1000b4a4:	dfffffff 	.word	0xdfffffff
1000b4a8:	bfffffff 	.word	0xbfffffff
1000b4ac:	fffffdff 	.word	0xfffffdff
1000b4b0:	fffffbff 	.word	0xfffffbff

1000b4b4 <system_peripheral_reset>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_peripheral_reset(enum system_peripheral peripheral)
{
1000b4b4:	b500      	push	{lr}
	switch (peripheral) {
1000b4b6:	2843      	cmp	r0, #67	; 0x43
1000b4b8:	d900      	bls.n	1000b4bc <system_peripheral_reset+0x8>
1000b4ba:	e223      	b.n	1000b904 <system_peripheral_reset+0x450>
1000b4bc:	0080      	lsls	r0, r0, #2
1000b4be:	4be0      	ldr	r3, [pc, #896]	; (1000b840 <system_peripheral_reset+0x38c>)
1000b4c0:	581b      	ldr	r3, [r3, r0]
1000b4c2:	469f      	mov	pc, r3
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b4c4:	4bdf      	ldr	r3, [pc, #892]	; (1000b844 <system_peripheral_reset+0x390>)
1000b4c6:	6859      	ldr	r1, [r3, #4]
1000b4c8:	2202      	movs	r2, #2
1000b4ca:	4391      	bics	r1, r2
1000b4cc:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b4ce:	6859      	ldr	r1, [r3, #4]
1000b4d0:	430a      	orrs	r2, r1
1000b4d2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b4d4:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
		break;
1000b4d6:	e216      	b.n	1000b906 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b4d8:	4bda      	ldr	r3, [pc, #872]	; (1000b844 <system_peripheral_reset+0x390>)
1000b4da:	6859      	ldr	r1, [r3, #4]
1000b4dc:	2204      	movs	r2, #4
1000b4de:	4391      	bics	r1, r2
1000b4e0:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b4e2:	6859      	ldr	r1, [r3, #4]
1000b4e4:	430a      	orrs	r2, r1
1000b4e6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b4e8:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
		break;
1000b4ea:	e20c      	b.n	1000b906 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b4ec:	4bd5      	ldr	r3, [pc, #852]	; (1000b844 <system_peripheral_reset+0x390>)
1000b4ee:	6859      	ldr	r1, [r3, #4]
1000b4f0:	2208      	movs	r2, #8
1000b4f2:	4391      	bics	r1, r2
1000b4f4:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b4f6:	6859      	ldr	r1, [r3, #4]
1000b4f8:	430a      	orrs	r2, r1
1000b4fa:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b4fc:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
		break;
1000b4fe:	e202      	b.n	1000b906 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b500:	4bd0      	ldr	r3, [pc, #832]	; (1000b844 <system_peripheral_reset+0x390>)
1000b502:	6859      	ldr	r1, [r3, #4]
1000b504:	2210      	movs	r2, #16
1000b506:	4391      	bics	r1, r2
1000b508:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b50a:	6859      	ldr	r1, [r3, #4]
1000b50c:	430a      	orrs	r2, r1
1000b50e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b510:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
		break;
1000b512:	e1f8      	b.n	1000b906 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b514:	4bcb      	ldr	r3, [pc, #812]	; (1000b844 <system_peripheral_reset+0x390>)
1000b516:	6859      	ldr	r1, [r3, #4]
1000b518:	2220      	movs	r2, #32
1000b51a:	4391      	bics	r1, r2
1000b51c:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b51e:	6859      	ldr	r1, [r3, #4]
1000b520:	430a      	orrs	r2, r1
1000b522:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b524:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
		break;
1000b526:	e1ee      	b.n	1000b906 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b528:	4bc6      	ldr	r3, [pc, #792]	; (1000b844 <system_peripheral_reset+0x390>)
1000b52a:	6859      	ldr	r1, [r3, #4]
1000b52c:	2240      	movs	r2, #64	; 0x40
1000b52e:	4391      	bics	r1, r2
1000b530:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b532:	6859      	ldr	r1, [r3, #4]
1000b534:	430a      	orrs	r2, r1
1000b536:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b538:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
		break;
1000b53a:	e1e4      	b.n	1000b906 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b53c:	4bc1      	ldr	r3, [pc, #772]	; (1000b844 <system_peripheral_reset+0x390>)
1000b53e:	6859      	ldr	r1, [r3, #4]
1000b540:	2280      	movs	r2, #128	; 0x80
1000b542:	4391      	bics	r1, r2
1000b544:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b546:	6859      	ldr	r1, [r3, #4]
1000b548:	430a      	orrs	r2, r1
1000b54a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b54c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
		break;
1000b54e:	e1da      	b.n	1000b906 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b550:	4bbc      	ldr	r3, [pc, #752]	; (1000b844 <system_peripheral_reset+0x390>)
1000b552:	6859      	ldr	r1, [r3, #4]
1000b554:	4abc      	ldr	r2, [pc, #752]	; (1000b848 <system_peripheral_reset+0x394>)
1000b556:	400a      	ands	r2, r1
1000b558:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b55a:	685a      	ldr	r2, [r3, #4]
1000b55c:	2180      	movs	r1, #128	; 0x80
1000b55e:	0049      	lsls	r1, r1, #1
1000b560:	430a      	orrs	r2, r1
1000b562:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b564:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
		break;
1000b566:	e1ce      	b.n	1000b906 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b568:	4bb6      	ldr	r3, [pc, #728]	; (1000b844 <system_peripheral_reset+0x390>)
1000b56a:	6859      	ldr	r1, [r3, #4]
1000b56c:	4ab7      	ldr	r2, [pc, #732]	; (1000b84c <system_peripheral_reset+0x398>)
1000b56e:	400a      	ands	r2, r1
1000b570:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b572:	685a      	ldr	r2, [r3, #4]
1000b574:	2180      	movs	r1, #128	; 0x80
1000b576:	0089      	lsls	r1, r1, #2
1000b578:	430a      	orrs	r2, r1
1000b57a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b57c:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
		break;
1000b57e:	e1c2      	b.n	1000b906 <system_peripheral_reset+0x452>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b580:	4bb0      	ldr	r3, [pc, #704]	; (1000b844 <system_peripheral_reset+0x390>)
1000b582:	6859      	ldr	r1, [r3, #4]
1000b584:	4ab2      	ldr	r2, [pc, #712]	; (1000b850 <system_peripheral_reset+0x39c>)
1000b586:	400a      	ands	r2, r1
1000b588:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b58a:	685a      	ldr	r2, [r3, #4]
1000b58c:	2180      	movs	r1, #128	; 0x80
1000b58e:	00c9      	lsls	r1, r1, #3
1000b590:	430a      	orrs	r2, r1
1000b592:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b594:	2000      	movs	r0, #0
		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
		break;
1000b596:	e1b6      	b.n	1000b906 <system_peripheral_reset+0x452>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b598:	4baa      	ldr	r3, [pc, #680]	; (1000b844 <system_peripheral_reset+0x390>)
1000b59a:	6859      	ldr	r1, [r3, #4]
1000b59c:	4aad      	ldr	r2, [pc, #692]	; (1000b854 <system_peripheral_reset+0x3a0>)
1000b59e:	400a      	ands	r2, r1
1000b5a0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b5a2:	685a      	ldr	r2, [r3, #4]
1000b5a4:	2180      	movs	r1, #128	; 0x80
1000b5a6:	0109      	lsls	r1, r1, #4
1000b5a8:	430a      	orrs	r2, r1
1000b5aa:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b5ac:	2000      	movs	r0, #0
		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
		break;
1000b5ae:	e1aa      	b.n	1000b906 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b5b0:	4ba4      	ldr	r3, [pc, #656]	; (1000b844 <system_peripheral_reset+0x390>)
1000b5b2:	6859      	ldr	r1, [r3, #4]
1000b5b4:	4aa8      	ldr	r2, [pc, #672]	; (1000b858 <system_peripheral_reset+0x3a4>)
1000b5b6:	400a      	ands	r2, r1
1000b5b8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b5ba:	685a      	ldr	r2, [r3, #4]
1000b5bc:	2180      	movs	r1, #128	; 0x80
1000b5be:	0149      	lsls	r1, r1, #5
1000b5c0:	430a      	orrs	r2, r1
1000b5c2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b5c4:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
		break;
1000b5c6:	e19e      	b.n	1000b906 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b5c8:	4b9e      	ldr	r3, [pc, #632]	; (1000b844 <system_peripheral_reset+0x390>)
1000b5ca:	6859      	ldr	r1, [r3, #4]
1000b5cc:	4aa3      	ldr	r2, [pc, #652]	; (1000b85c <system_peripheral_reset+0x3a8>)
1000b5ce:	400a      	ands	r2, r1
1000b5d0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b5d2:	685a      	ldr	r2, [r3, #4]
1000b5d4:	2180      	movs	r1, #128	; 0x80
1000b5d6:	0189      	lsls	r1, r1, #6
1000b5d8:	430a      	orrs	r2, r1
1000b5da:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b5dc:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
		break;
1000b5de:	e192      	b.n	1000b906 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b5e0:	4b98      	ldr	r3, [pc, #608]	; (1000b844 <system_peripheral_reset+0x390>)
1000b5e2:	6859      	ldr	r1, [r3, #4]
1000b5e4:	4a9e      	ldr	r2, [pc, #632]	; (1000b860 <system_peripheral_reset+0x3ac>)
1000b5e6:	400a      	ands	r2, r1
1000b5e8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b5ea:	685a      	ldr	r2, [r3, #4]
1000b5ec:	2180      	movs	r1, #128	; 0x80
1000b5ee:	01c9      	lsls	r1, r1, #7
1000b5f0:	430a      	orrs	r2, r1
1000b5f2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b5f4:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
		break;
1000b5f6:	e186      	b.n	1000b906 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b5f8:	4b92      	ldr	r3, [pc, #584]	; (1000b844 <system_peripheral_reset+0x390>)
1000b5fa:	6859      	ldr	r1, [r3, #4]
1000b5fc:	4a99      	ldr	r2, [pc, #612]	; (1000b864 <system_peripheral_reset+0x3b0>)
1000b5fe:	400a      	ands	r2, r1
1000b600:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b602:	685a      	ldr	r2, [r3, #4]
1000b604:	2180      	movs	r1, #128	; 0x80
1000b606:	0209      	lsls	r1, r1, #8
1000b608:	430a      	orrs	r2, r1
1000b60a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b60c:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
		break;
1000b60e:	e17a      	b.n	1000b906 <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b610:	4b8c      	ldr	r3, [pc, #560]	; (1000b844 <system_peripheral_reset+0x390>)
1000b612:	6859      	ldr	r1, [r3, #4]
1000b614:	4a94      	ldr	r2, [pc, #592]	; (1000b868 <system_peripheral_reset+0x3b4>)
1000b616:	400a      	ands	r2, r1
1000b618:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b61a:	685a      	ldr	r2, [r3, #4]
1000b61c:	2180      	movs	r1, #128	; 0x80
1000b61e:	0249      	lsls	r1, r1, #9
1000b620:	430a      	orrs	r2, r1
1000b622:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b624:	2000      	movs	r0, #0
		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
		break;
1000b626:	e16e      	b.n	1000b906 <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b628:	4b86      	ldr	r3, [pc, #536]	; (1000b844 <system_peripheral_reset+0x390>)
1000b62a:	6859      	ldr	r1, [r3, #4]
1000b62c:	4a8f      	ldr	r2, [pc, #572]	; (1000b86c <system_peripheral_reset+0x3b8>)
1000b62e:	400a      	ands	r2, r1
1000b630:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b632:	685a      	ldr	r2, [r3, #4]
1000b634:	2180      	movs	r1, #128	; 0x80
1000b636:	0289      	lsls	r1, r1, #10
1000b638:	430a      	orrs	r2, r1
1000b63a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b63c:	2000      	movs	r0, #0
		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
		break;
1000b63e:	e162      	b.n	1000b906 <system_peripheral_reset+0x452>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b640:	4b80      	ldr	r3, [pc, #512]	; (1000b844 <system_peripheral_reset+0x390>)
1000b642:	6859      	ldr	r1, [r3, #4]
1000b644:	4a8a      	ldr	r2, [pc, #552]	; (1000b870 <system_peripheral_reset+0x3bc>)
1000b646:	400a      	ands	r2, r1
1000b648:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b64a:	685a      	ldr	r2, [r3, #4]
1000b64c:	2180      	movs	r1, #128	; 0x80
1000b64e:	02c9      	lsls	r1, r1, #11
1000b650:	430a      	orrs	r2, r1
1000b652:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b654:	2000      	movs	r0, #0
		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
		break;
1000b656:	e156      	b.n	1000b906 <system_peripheral_reset+0x452>

		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b658:	4b7a      	ldr	r3, [pc, #488]	; (1000b844 <system_peripheral_reset+0x390>)
1000b65a:	6859      	ldr	r1, [r3, #4]
1000b65c:	4a85      	ldr	r2, [pc, #532]	; (1000b874 <system_peripheral_reset+0x3c0>)
1000b65e:	400a      	ands	r2, r1
1000b660:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b662:	685a      	ldr	r2, [r3, #4]
1000b664:	2180      	movs	r1, #128	; 0x80
1000b666:	0309      	lsls	r1, r1, #12
1000b668:	430a      	orrs	r2, r1
1000b66a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b66c:	2000      	movs	r0, #0
		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
		break;
1000b66e:	e14a      	b.n	1000b906 <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b670:	4b74      	ldr	r3, [pc, #464]	; (1000b844 <system_peripheral_reset+0x390>)
1000b672:	6859      	ldr	r1, [r3, #4]
1000b674:	4a80      	ldr	r2, [pc, #512]	; (1000b878 <system_peripheral_reset+0x3c4>)
1000b676:	400a      	ands	r2, r1
1000b678:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b67a:	685a      	ldr	r2, [r3, #4]
1000b67c:	2180      	movs	r1, #128	; 0x80
1000b67e:	0349      	lsls	r1, r1, #13
1000b680:	430a      	orrs	r2, r1
1000b682:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b684:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
		break;
1000b686:	e13e      	b.n	1000b906 <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b688:	4b6e      	ldr	r3, [pc, #440]	; (1000b844 <system_peripheral_reset+0x390>)
1000b68a:	6859      	ldr	r1, [r3, #4]
1000b68c:	4a7b      	ldr	r2, [pc, #492]	; (1000b87c <system_peripheral_reset+0x3c8>)
1000b68e:	400a      	ands	r2, r1
1000b690:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b692:	685a      	ldr	r2, [r3, #4]
1000b694:	2180      	movs	r1, #128	; 0x80
1000b696:	0389      	lsls	r1, r1, #14
1000b698:	430a      	orrs	r2, r1
1000b69a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b69c:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
		break;
1000b69e:	e132      	b.n	1000b906 <system_peripheral_reset+0x452>

		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b6a0:	4b68      	ldr	r3, [pc, #416]	; (1000b844 <system_peripheral_reset+0x390>)
1000b6a2:	6859      	ldr	r1, [r3, #4]
1000b6a4:	4a76      	ldr	r2, [pc, #472]	; (1000b880 <system_peripheral_reset+0x3cc>)
1000b6a6:	400a      	ands	r2, r1
1000b6a8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b6aa:	685a      	ldr	r2, [r3, #4]
1000b6ac:	2180      	movs	r1, #128	; 0x80
1000b6ae:	03c9      	lsls	r1, r1, #15
1000b6b0:	430a      	orrs	r2, r1
1000b6b2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b6b4:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
		break;
1000b6b6:	e126      	b.n	1000b906 <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b6b8:	4b62      	ldr	r3, [pc, #392]	; (1000b844 <system_peripheral_reset+0x390>)
1000b6ba:	6859      	ldr	r1, [r3, #4]
1000b6bc:	4a71      	ldr	r2, [pc, #452]	; (1000b884 <system_peripheral_reset+0x3d0>)
1000b6be:	400a      	ands	r2, r1
1000b6c0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b6c2:	685a      	ldr	r2, [r3, #4]
1000b6c4:	2180      	movs	r1, #128	; 0x80
1000b6c6:	0409      	lsls	r1, r1, #16
1000b6c8:	430a      	orrs	r2, r1
1000b6ca:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b6cc:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
		break;
1000b6ce:	e11a      	b.n	1000b906 <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b6d0:	4b5c      	ldr	r3, [pc, #368]	; (1000b844 <system_peripheral_reset+0x390>)
1000b6d2:	6859      	ldr	r1, [r3, #4]
1000b6d4:	4a6c      	ldr	r2, [pc, #432]	; (1000b888 <system_peripheral_reset+0x3d4>)
1000b6d6:	400a      	ands	r2, r1
1000b6d8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b6da:	685a      	ldr	r2, [r3, #4]
1000b6dc:	2180      	movs	r1, #128	; 0x80
1000b6de:	0449      	lsls	r1, r1, #17
1000b6e0:	430a      	orrs	r2, r1
1000b6e2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b6e4:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
		break;
1000b6e6:	e10e      	b.n	1000b906 <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b6e8:	4b56      	ldr	r3, [pc, #344]	; (1000b844 <system_peripheral_reset+0x390>)
1000b6ea:	6859      	ldr	r1, [r3, #4]
1000b6ec:	4a67      	ldr	r2, [pc, #412]	; (1000b88c <system_peripheral_reset+0x3d8>)
1000b6ee:	400a      	ands	r2, r1
1000b6f0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b6f2:	685a      	ldr	r2, [r3, #4]
1000b6f4:	2180      	movs	r1, #128	; 0x80
1000b6f6:	0489      	lsls	r1, r1, #18
1000b6f8:	430a      	orrs	r2, r1
1000b6fa:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b6fc:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
		break;
1000b6fe:	e102      	b.n	1000b906 <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b700:	4b50      	ldr	r3, [pc, #320]	; (1000b844 <system_peripheral_reset+0x390>)
1000b702:	6859      	ldr	r1, [r3, #4]
1000b704:	4a62      	ldr	r2, [pc, #392]	; (1000b890 <system_peripheral_reset+0x3dc>)
1000b706:	400a      	ands	r2, r1
1000b708:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b70a:	685a      	ldr	r2, [r3, #4]
1000b70c:	2180      	movs	r1, #128	; 0x80
1000b70e:	04c9      	lsls	r1, r1, #19
1000b710:	430a      	orrs	r2, r1
1000b712:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b714:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
		break;
1000b716:	e0f6      	b.n	1000b906 <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b718:	4b4a      	ldr	r3, [pc, #296]	; (1000b844 <system_peripheral_reset+0x390>)
1000b71a:	6859      	ldr	r1, [r3, #4]
1000b71c:	4a5d      	ldr	r2, [pc, #372]	; (1000b894 <system_peripheral_reset+0x3e0>)
1000b71e:	400a      	ands	r2, r1
1000b720:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b722:	685a      	ldr	r2, [r3, #4]
1000b724:	2180      	movs	r1, #128	; 0x80
1000b726:	0509      	lsls	r1, r1, #20
1000b728:	430a      	orrs	r2, r1
1000b72a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b72c:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
		break;
1000b72e:	e0ea      	b.n	1000b906 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b730:	4b44      	ldr	r3, [pc, #272]	; (1000b844 <system_peripheral_reset+0x390>)
1000b732:	6859      	ldr	r1, [r3, #4]
1000b734:	4a58      	ldr	r2, [pc, #352]	; (1000b898 <system_peripheral_reset+0x3e4>)
1000b736:	400a      	ands	r2, r1
1000b738:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b73a:	685a      	ldr	r2, [r3, #4]
1000b73c:	2180      	movs	r1, #128	; 0x80
1000b73e:	0549      	lsls	r1, r1, #21
1000b740:	430a      	orrs	r2, r1
1000b742:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b744:	2000      	movs	r0, #0
		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
		break;
1000b746:	e0de      	b.n	1000b906 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b748:	4b3e      	ldr	r3, [pc, #248]	; (1000b844 <system_peripheral_reset+0x390>)
1000b74a:	6859      	ldr	r1, [r3, #4]
1000b74c:	4a53      	ldr	r2, [pc, #332]	; (1000b89c <system_peripheral_reset+0x3e8>)
1000b74e:	400a      	ands	r2, r1
1000b750:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b752:	685a      	ldr	r2, [r3, #4]
1000b754:	2180      	movs	r1, #128	; 0x80
1000b756:	0589      	lsls	r1, r1, #22
1000b758:	430a      	orrs	r2, r1
1000b75a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b75c:	2000      	movs	r0, #0
		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
		break;
1000b75e:	e0d2      	b.n	1000b906 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b760:	4b38      	ldr	r3, [pc, #224]	; (1000b844 <system_peripheral_reset+0x390>)
1000b762:	6859      	ldr	r1, [r3, #4]
1000b764:	4a4e      	ldr	r2, [pc, #312]	; (1000b8a0 <system_peripheral_reset+0x3ec>)
1000b766:	400a      	ands	r2, r1
1000b768:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b76a:	685a      	ldr	r2, [r3, #4]
1000b76c:	2180      	movs	r1, #128	; 0x80
1000b76e:	05c9      	lsls	r1, r1, #23
1000b770:	430a      	orrs	r2, r1
1000b772:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b774:	2000      	movs	r0, #0
		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
		break;
1000b776:	e0c6      	b.n	1000b906 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b778:	4a32      	ldr	r2, [pc, #200]	; (1000b844 <system_peripheral_reset+0x390>)
1000b77a:	6853      	ldr	r3, [r2, #4]
1000b77c:	005b      	lsls	r3, r3, #1
1000b77e:	085b      	lsrs	r3, r3, #1
1000b780:	6053      	str	r3, [r2, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b782:	6853      	ldr	r3, [r2, #4]
1000b784:	2180      	movs	r1, #128	; 0x80
1000b786:	0609      	lsls	r1, r1, #24
1000b788:	430b      	orrs	r3, r1
1000b78a:	6053      	str	r3, [r2, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b78c:	2000      	movs	r0, #0
		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
		break;
1000b78e:	e0ba      	b.n	1000b906 <system_peripheral_reset+0x452>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000b790:	4b2c      	ldr	r3, [pc, #176]	; (1000b844 <system_peripheral_reset+0x390>)
1000b792:	891a      	ldrh	r2, [r3, #8]
1000b794:	2101      	movs	r1, #1
1000b796:	438a      	bics	r2, r1
1000b798:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000b79a:	8919      	ldrh	r1, [r3, #8]
1000b79c:	2201      	movs	r2, #1
1000b79e:	430a      	orrs	r2, r1
1000b7a0:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b7a2:	2000      	movs	r0, #0
		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
		break;
1000b7a4:	e0af      	b.n	1000b906 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000b7a6:	4b27      	ldr	r3, [pc, #156]	; (1000b844 <system_peripheral_reset+0x390>)
1000b7a8:	891a      	ldrh	r2, [r3, #8]
1000b7aa:	2102      	movs	r1, #2
1000b7ac:	438a      	bics	r2, r1
1000b7ae:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000b7b0:	8919      	ldrh	r1, [r3, #8]
1000b7b2:	2202      	movs	r2, #2
1000b7b4:	430a      	orrs	r2, r1
1000b7b6:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b7b8:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
		break;
1000b7ba:	e0a4      	b.n	1000b906 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000b7bc:	4b21      	ldr	r3, [pc, #132]	; (1000b844 <system_peripheral_reset+0x390>)
1000b7be:	891a      	ldrh	r2, [r3, #8]
1000b7c0:	2104      	movs	r1, #4
1000b7c2:	438a      	bics	r2, r1
1000b7c4:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000b7c6:	8919      	ldrh	r1, [r3, #8]
1000b7c8:	2204      	movs	r2, #4
1000b7ca:	430a      	orrs	r2, r1
1000b7cc:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b7ce:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
		break;
1000b7d0:	e099      	b.n	1000b906 <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000b7d2:	4b1c      	ldr	r3, [pc, #112]	; (1000b844 <system_peripheral_reset+0x390>)
1000b7d4:	891a      	ldrh	r2, [r3, #8]
1000b7d6:	2108      	movs	r1, #8
1000b7d8:	438a      	bics	r2, r1
1000b7da:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000b7dc:	8919      	ldrh	r1, [r3, #8]
1000b7de:	2208      	movs	r2, #8
1000b7e0:	430a      	orrs	r2, r1
1000b7e2:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b7e4:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
		break;
1000b7e6:	e08e      	b.n	1000b906 <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000b7e8:	4b16      	ldr	r3, [pc, #88]	; (1000b844 <system_peripheral_reset+0x390>)
1000b7ea:	891a      	ldrh	r2, [r3, #8]
1000b7ec:	2110      	movs	r1, #16
1000b7ee:	438a      	bics	r2, r1
1000b7f0:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000b7f2:	8919      	ldrh	r1, [r3, #8]
1000b7f4:	2210      	movs	r2, #16
1000b7f6:	430a      	orrs	r2, r1
1000b7f8:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b7fa:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
		break;
1000b7fc:	e083      	b.n	1000b906 <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000b7fe:	4b11      	ldr	r3, [pc, #68]	; (1000b844 <system_peripheral_reset+0x390>)
1000b800:	891a      	ldrh	r2, [r3, #8]
1000b802:	2120      	movs	r1, #32
1000b804:	438a      	bics	r2, r1
1000b806:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000b808:	8919      	ldrh	r1, [r3, #8]
1000b80a:	2220      	movs	r2, #32
1000b80c:	430a      	orrs	r2, r1
1000b80e:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b810:	2000      	movs	r0, #0
		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
		break;
1000b812:	e078      	b.n	1000b906 <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000b814:	4b0b      	ldr	r3, [pc, #44]	; (1000b844 <system_peripheral_reset+0x390>)
1000b816:	891a      	ldrh	r2, [r3, #8]
1000b818:	2140      	movs	r1, #64	; 0x40
1000b81a:	438a      	bics	r2, r1
1000b81c:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000b81e:	8919      	ldrh	r1, [r3, #8]
1000b820:	2240      	movs	r2, #64	; 0x40
1000b822:	430a      	orrs	r2, r1
1000b824:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b826:	2000      	movs	r0, #0
		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
		break;
1000b828:	e06d      	b.n	1000b906 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000b82a:	4b06      	ldr	r3, [pc, #24]	; (1000b844 <system_peripheral_reset+0x390>)
1000b82c:	891a      	ldrh	r2, [r3, #8]
1000b82e:	2180      	movs	r1, #128	; 0x80
1000b830:	438a      	bics	r2, r1
1000b832:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000b834:	8919      	ldrh	r1, [r3, #8]
1000b836:	2280      	movs	r2, #128	; 0x80
1000b838:	430a      	orrs	r2, r1
1000b83a:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b83c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
		break;
1000b83e:	e062      	b.n	1000b906 <system_peripheral_reset+0x452>
1000b840:	1001463c 	.word	0x1001463c
1000b844:	4000b000 	.word	0x4000b000
1000b848:	fffffeff 	.word	0xfffffeff
1000b84c:	fffffdff 	.word	0xfffffdff
1000b850:	fffffbff 	.word	0xfffffbff
1000b854:	fffff7ff 	.word	0xfffff7ff
1000b858:	ffffefff 	.word	0xffffefff
1000b85c:	ffffdfff 	.word	0xffffdfff
1000b860:	ffffbfff 	.word	0xffffbfff
1000b864:	ffff7fff 	.word	0xffff7fff
1000b868:	fffeffff 	.word	0xfffeffff
1000b86c:	fffdffff 	.word	0xfffdffff
1000b870:	fffbffff 	.word	0xfffbffff
1000b874:	fff7ffff 	.word	0xfff7ffff
1000b878:	ffefffff 	.word	0xffefffff
1000b87c:	ffdfffff 	.word	0xffdfffff
1000b880:	ffbfffff 	.word	0xffbfffff
1000b884:	ff7fffff 	.word	0xff7fffff
1000b888:	feffffff 	.word	0xfeffffff
1000b88c:	fdffffff 	.word	0xfdffffff
1000b890:	fbffffff 	.word	0xfbffffff
1000b894:	f7ffffff 	.word	0xf7ffffff
1000b898:	efffffff 	.word	0xefffffff
1000b89c:	dfffffff 	.word	0xdfffffff
1000b8a0:	bfffffff 	.word	0xbfffffff

		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000b8a4:	4b18      	ldr	r3, [pc, #96]	; (1000b908 <system_peripheral_reset+0x454>)
1000b8a6:	8919      	ldrh	r1, [r3, #8]
1000b8a8:	4a18      	ldr	r2, [pc, #96]	; (1000b90c <system_peripheral_reset+0x458>)
1000b8aa:	400a      	ands	r2, r1
1000b8ac:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000b8ae:	8919      	ldrh	r1, [r3, #8]
1000b8b0:	2280      	movs	r2, #128	; 0x80
1000b8b2:	0052      	lsls	r2, r2, #1
1000b8b4:	430a      	orrs	r2, r1
1000b8b6:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b8b8:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
		break;
1000b8ba:	e024      	b.n	1000b906 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000b8bc:	4b12      	ldr	r3, [pc, #72]	; (1000b908 <system_peripheral_reset+0x454>)
1000b8be:	8919      	ldrh	r1, [r3, #8]
1000b8c0:	4a13      	ldr	r2, [pc, #76]	; (1000b910 <system_peripheral_reset+0x45c>)
1000b8c2:	400a      	ands	r2, r1
1000b8c4:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000b8c6:	8919      	ldrh	r1, [r3, #8]
1000b8c8:	2280      	movs	r2, #128	; 0x80
1000b8ca:	0092      	lsls	r2, r2, #2
1000b8cc:	430a      	orrs	r2, r1
1000b8ce:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b8d0:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
		break;
1000b8d2:	e018      	b.n	1000b906 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000b8d4:	4b0c      	ldr	r3, [pc, #48]	; (1000b908 <system_peripheral_reset+0x454>)
1000b8d6:	8919      	ldrh	r1, [r3, #8]
1000b8d8:	4a0e      	ldr	r2, [pc, #56]	; (1000b914 <system_peripheral_reset+0x460>)
1000b8da:	400a      	ands	r2, r1
1000b8dc:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000b8de:	8919      	ldrh	r1, [r3, #8]
1000b8e0:	2280      	movs	r2, #128	; 0x80
1000b8e2:	00d2      	lsls	r2, r2, #3
1000b8e4:	430a      	orrs	r2, r1
1000b8e6:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b8e8:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
		break;
1000b8ea:	e00c      	b.n	1000b906 <system_peripheral_reset+0x452>

		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000b8ec:	4b06      	ldr	r3, [pc, #24]	; (1000b908 <system_peripheral_reset+0x454>)
1000b8ee:	8919      	ldrh	r1, [r3, #8]
1000b8f0:	4a09      	ldr	r2, [pc, #36]	; (1000b918 <system_peripheral_reset+0x464>)
1000b8f2:	400a      	ands	r2, r1
1000b8f4:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000b8f6:	8919      	ldrh	r1, [r3, #8]
1000b8f8:	2280      	movs	r2, #128	; 0x80
1000b8fa:	0112      	lsls	r2, r2, #4
1000b8fc:	430a      	orrs	r2, r1
1000b8fe:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b900:	2000      	movs	r0, #0
		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
		break;
1000b902:	e000      	b.n	1000b906 <system_peripheral_reset+0x452>

		default:
			return STATUS_ERR_INVALID_ARG;
1000b904:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000b906:	bd00      	pop	{pc}
1000b908:	4000b000 	.word	0x4000b000
1000b90c:	fffffeff 	.word	0xfffffeff
1000b910:	fffffdff 	.word	0xfffffdff
1000b914:	fffffbff 	.word	0xfffffbff
1000b918:	fffff7ff 	.word	0xfffff7ff

1000b91c <system_register_isr>:
void system_register_isr(enum ram_isr_table_index isr_index,
		uint32_t isr_address)
{
	uint32_t *temp;
	temp = (uint32_t *)(isr_index * 4 + ISR_RAM_MAP_START_ADDRESS);
	*temp = isr_address;
1000b91c:	2380      	movs	r3, #128	; 0x80
1000b91e:	04db      	lsls	r3, r3, #19
1000b920:	469c      	mov	ip, r3
1000b922:	4460      	add	r0, ip
1000b924:	0080      	lsls	r0, r0, #2
1000b926:	6001      	str	r1, [r0, #0]
}
1000b928:	4770      	bx	lr
1000b92a:	46c0      	nop			; (mov r8, r8)

1000b92c <uart_rx0_isr_handler>:
	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
}

static void uart_rx0_isr_handler(void)
{
1000b92c:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
1000b92e:	4b20      	ldr	r3, [pc, #128]	; (1000b9b0 <uart_rx0_isr_handler+0x84>)
1000b930:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000b932:	6823      	ldr	r3, [r4, #0]
1000b934:	7d1d      	ldrb	r5, [r3, #20]
1000b936:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000b938:	066a      	lsls	r2, r5, #25
1000b93a:	d513      	bpl.n	1000b964 <uart_rx0_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000b93c:	211e      	movs	r1, #30
1000b93e:	2222      	movs	r2, #34	; 0x22
1000b940:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000b942:	7e1a      	ldrb	r2, [r3, #24]
1000b944:	3123      	adds	r1, #35	; 0x23
1000b946:	438a      	bics	r2, r1
1000b948:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000b94a:	2321      	movs	r3, #33	; 0x21
1000b94c:	5ce3      	ldrb	r3, [r4, r3]
1000b94e:	071b      	lsls	r3, r3, #28
1000b950:	d506      	bpl.n	1000b960 <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000b952:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000b954:	5ce3      	ldrb	r3, [r4, r3]
1000b956:	071b      	lsls	r3, r3, #28
1000b958:	d502      	bpl.n	1000b960 <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000b95a:	0020      	movs	r0, r4
1000b95c:	6923      	ldr	r3, [r4, #16]
1000b95e:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000b960:	6823      	ldr	r3, [r4, #0]
1000b962:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000b964:	07eb      	lsls	r3, r5, #31
1000b966:	d522      	bpl.n	1000b9ae <uart_rx0_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000b968:	6823      	ldr	r3, [r4, #0]
1000b96a:	7c1b      	ldrb	r3, [r3, #16]
1000b96c:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000b96e:	6962      	ldr	r2, [r4, #20]
1000b970:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000b972:	6963      	ldr	r3, [r4, #20]
1000b974:	3301      	adds	r3, #1
1000b976:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000b978:	8ba3      	ldrh	r3, [r4, #28]
1000b97a:	3b01      	subs	r3, #1
1000b97c:	b29b      	uxth	r3, r3
1000b97e:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
1000b980:	8ba3      	ldrh	r3, [r4, #28]
1000b982:	b29b      	uxth	r3, r3
1000b984:	2b00      	cmp	r3, #0
1000b986:	d112      	bne.n	1000b9ae <uart_rx0_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000b988:	3321      	adds	r3, #33	; 0x21
1000b98a:	5ce3      	ldrb	r3, [r4, r3]
1000b98c:	075b      	lsls	r3, r3, #29
1000b98e:	d50e      	bpl.n	1000b9ae <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000b990:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000b992:	5ce3      	ldrb	r3, [r4, r3]
1000b994:	075b      	lsls	r3, r3, #29
1000b996:	d50a      	bpl.n	1000b9ae <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000b998:	2200      	movs	r2, #0
1000b99a:	2322      	movs	r3, #34	; 0x22
1000b99c:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000b99e:	6822      	ldr	r2, [r4, #0]
1000b9a0:	7e13      	ldrb	r3, [r2, #24]
1000b9a2:	2101      	movs	r1, #1
1000b9a4:	438b      	bics	r3, r1
1000b9a6:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000b9a8:	68e3      	ldr	r3, [r4, #12]
1000b9aa:	0020      	movs	r0, r4
1000b9ac:	4798      	blx	r3
			}
		}
	}
}
1000b9ae:	bd70      	pop	{r4, r5, r6, pc}
1000b9b0:	100170ec 	.word	0x100170ec

1000b9b4 <uart_tx0_isr_handler>:

static void uart_tx0_isr_handler(void)
{
1000b9b4:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
1000b9b6:	4b21      	ldr	r3, [pc, #132]	; (1000ba3c <uart_tx0_isr_handler+0x88>)
1000b9b8:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000b9ba:	6823      	ldr	r3, [r4, #0]
1000b9bc:	791d      	ldrb	r5, [r3, #4]
1000b9be:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000b9c0:	07ea      	lsls	r2, r5, #31
1000b9c2:	d517      	bpl.n	1000b9f4 <uart_tx0_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000b9c4:	69a2      	ldr	r2, [r4, #24]
1000b9c6:	7811      	ldrb	r1, [r2, #0]
1000b9c8:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000b9ca:	3201      	adds	r2, #1
1000b9cc:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000b9ce:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000b9d0:	8be3      	ldrh	r3, [r4, #30]
1000b9d2:	3b01      	subs	r3, #1
1000b9d4:	b29b      	uxth	r3, r3
1000b9d6:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[0];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
1000b9d8:	8be3      	ldrh	r3, [r4, #30]
1000b9da:	b29b      	uxth	r3, r3
1000b9dc:	2b00      	cmp	r3, #0
1000b9de:	d109      	bne.n	1000b9f4 <uart_tx0_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
1000b9e0:	6822      	ldr	r2, [r4, #0]
1000b9e2:	7a13      	ldrb	r3, [r2, #8]
1000b9e4:	2101      	movs	r1, #1
1000b9e6:	438b      	bics	r3, r1
1000b9e8:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000b9ea:	6822      	ldr	r2, [r4, #0]
1000b9ec:	7a11      	ldrb	r1, [r2, #8]
1000b9ee:	2310      	movs	r3, #16
1000b9f0:	430b      	orrs	r3, r1
1000b9f2:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000b9f4:	06eb      	lsls	r3, r5, #27
1000b9f6:	d512      	bpl.n	1000ba1e <uart_tx0_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000b9f8:	2321      	movs	r3, #33	; 0x21
1000b9fa:	5ce3      	ldrb	r3, [r4, r3]
1000b9fc:	07db      	lsls	r3, r3, #31
1000b9fe:	d50e      	bpl.n	1000ba1e <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000ba00:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000ba02:	5ce3      	ldrb	r3, [r4, r3]
1000ba04:	07db      	lsls	r3, r3, #31
1000ba06:	d50a      	bpl.n	1000ba1e <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000ba08:	2200      	movs	r2, #0
1000ba0a:	2322      	movs	r3, #34	; 0x22
1000ba0c:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000ba0e:	6822      	ldr	r2, [r4, #0]
1000ba10:	7a13      	ldrb	r3, [r2, #8]
1000ba12:	2110      	movs	r1, #16
1000ba14:	438b      	bics	r3, r1
1000ba16:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000ba18:	0020      	movs	r0, r4
1000ba1a:	6863      	ldr	r3, [r4, #4]
1000ba1c:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000ba1e:	06ab      	lsls	r3, r5, #26
1000ba20:	d50a      	bpl.n	1000ba38 <uart_tx0_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000ba22:	2321      	movs	r3, #33	; 0x21
1000ba24:	5ce3      	ldrb	r3, [r4, r3]
1000ba26:	079b      	lsls	r3, r3, #30
1000ba28:	d506      	bpl.n	1000ba38 <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
1000ba2a:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000ba2c:	5ce3      	ldrb	r3, [r4, r3]
1000ba2e:	079b      	lsls	r3, r3, #30
1000ba30:	d502      	bpl.n	1000ba38 <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000ba32:	68a3      	ldr	r3, [r4, #8]
1000ba34:	0020      	movs	r0, r4
1000ba36:	4798      	blx	r3
		}

	}
}
1000ba38:	bd70      	pop	{r4, r5, r6, pc}
1000ba3a:	46c0      	nop			; (mov r8, r8)
1000ba3c:	100170ec 	.word	0x100170ec

1000ba40 <uart_rx1_isr_handler>:

static void uart_rx1_isr_handler(void)
{
1000ba40:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
1000ba42:	4b20      	ldr	r3, [pc, #128]	; (1000bac4 <uart_rx1_isr_handler+0x84>)
1000ba44:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000ba46:	6823      	ldr	r3, [r4, #0]
1000ba48:	7d1d      	ldrb	r5, [r3, #20]
1000ba4a:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000ba4c:	066a      	lsls	r2, r5, #25
1000ba4e:	d513      	bpl.n	1000ba78 <uart_rx1_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000ba50:	211e      	movs	r1, #30
1000ba52:	2222      	movs	r2, #34	; 0x22
1000ba54:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000ba56:	7e1a      	ldrb	r2, [r3, #24]
1000ba58:	3123      	adds	r1, #35	; 0x23
1000ba5a:	438a      	bics	r2, r1
1000ba5c:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000ba5e:	2321      	movs	r3, #33	; 0x21
1000ba60:	5ce3      	ldrb	r3, [r4, r3]
1000ba62:	071b      	lsls	r3, r3, #28
1000ba64:	d506      	bpl.n	1000ba74 <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000ba66:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000ba68:	5ce3      	ldrb	r3, [r4, r3]
1000ba6a:	071b      	lsls	r3, r3, #28
1000ba6c:	d502      	bpl.n	1000ba74 <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000ba6e:	0020      	movs	r0, r4
1000ba70:	6923      	ldr	r3, [r4, #16]
1000ba72:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000ba74:	6823      	ldr	r3, [r4, #0]
1000ba76:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000ba78:	07eb      	lsls	r3, r5, #31
1000ba7a:	d522      	bpl.n	1000bac2 <uart_rx1_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000ba7c:	6823      	ldr	r3, [r4, #0]
1000ba7e:	7c1b      	ldrb	r3, [r3, #16]
1000ba80:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000ba82:	6962      	ldr	r2, [r4, #20]
1000ba84:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000ba86:	6963      	ldr	r3, [r4, #20]
1000ba88:	3301      	adds	r3, #1
1000ba8a:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000ba8c:	8ba3      	ldrh	r3, [r4, #28]
1000ba8e:	3b01      	subs	r3, #1
1000ba90:	b29b      	uxth	r3, r3
1000ba92:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
1000ba94:	8ba3      	ldrh	r3, [r4, #28]
1000ba96:	b29b      	uxth	r3, r3
1000ba98:	2b00      	cmp	r3, #0
1000ba9a:	d112      	bne.n	1000bac2 <uart_rx1_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000ba9c:	3321      	adds	r3, #33	; 0x21
1000ba9e:	5ce3      	ldrb	r3, [r4, r3]
1000baa0:	075b      	lsls	r3, r3, #29
1000baa2:	d50e      	bpl.n	1000bac2 <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000baa4:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000baa6:	5ce3      	ldrb	r3, [r4, r3]
1000baa8:	075b      	lsls	r3, r3, #29
1000baaa:	d50a      	bpl.n	1000bac2 <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000baac:	2200      	movs	r2, #0
1000baae:	2322      	movs	r3, #34	; 0x22
1000bab0:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000bab2:	6822      	ldr	r2, [r4, #0]
1000bab4:	7e13      	ldrb	r3, [r2, #24]
1000bab6:	2101      	movs	r1, #1
1000bab8:	438b      	bics	r3, r1
1000baba:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000babc:	68e3      	ldr	r3, [r4, #12]
1000babe:	0020      	movs	r0, r4
1000bac0:	4798      	blx	r3
			}
		}
	}
}
1000bac2:	bd70      	pop	{r4, r5, r6, pc}
1000bac4:	100170ec 	.word	0x100170ec

1000bac8 <uart_tx1_isr_handler>:

static void uart_tx1_isr_handler(void)
{
1000bac8:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
1000baca:	4b21      	ldr	r3, [pc, #132]	; (1000bb50 <uart_tx1_isr_handler+0x88>)
1000bacc:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000bace:	6823      	ldr	r3, [r4, #0]
1000bad0:	791d      	ldrb	r5, [r3, #4]
1000bad2:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000bad4:	07ea      	lsls	r2, r5, #31
1000bad6:	d517      	bpl.n	1000bb08 <uart_tx1_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000bad8:	69a2      	ldr	r2, [r4, #24]
1000bada:	7811      	ldrb	r1, [r2, #0]
1000badc:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000bade:	3201      	adds	r2, #1
1000bae0:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000bae2:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000bae4:	8be3      	ldrh	r3, [r4, #30]
1000bae6:	3b01      	subs	r3, #1
1000bae8:	b29b      	uxth	r3, r3
1000baea:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[1];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
1000baec:	8be3      	ldrh	r3, [r4, #30]
1000baee:	b29b      	uxth	r3, r3
1000baf0:	2b00      	cmp	r3, #0
1000baf2:	d109      	bne.n	1000bb08 <uart_tx1_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
1000baf4:	6822      	ldr	r2, [r4, #0]
1000baf6:	7a13      	ldrb	r3, [r2, #8]
1000baf8:	2101      	movs	r1, #1
1000bafa:	438b      	bics	r3, r1
1000bafc:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000bafe:	6822      	ldr	r2, [r4, #0]
1000bb00:	7a11      	ldrb	r1, [r2, #8]
1000bb02:	2310      	movs	r3, #16
1000bb04:	430b      	orrs	r3, r1
1000bb06:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000bb08:	06eb      	lsls	r3, r5, #27
1000bb0a:	d512      	bpl.n	1000bb32 <uart_tx1_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000bb0c:	2321      	movs	r3, #33	; 0x21
1000bb0e:	5ce3      	ldrb	r3, [r4, r3]
1000bb10:	07db      	lsls	r3, r3, #31
1000bb12:	d50e      	bpl.n	1000bb32 <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000bb14:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000bb16:	5ce3      	ldrb	r3, [r4, r3]
1000bb18:	07db      	lsls	r3, r3, #31
1000bb1a:	d50a      	bpl.n	1000bb32 <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000bb1c:	2200      	movs	r2, #0
1000bb1e:	2322      	movs	r3, #34	; 0x22
1000bb20:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000bb22:	6822      	ldr	r2, [r4, #0]
1000bb24:	7a13      	ldrb	r3, [r2, #8]
1000bb26:	2110      	movs	r1, #16
1000bb28:	438b      	bics	r3, r1
1000bb2a:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000bb2c:	0020      	movs	r0, r4
1000bb2e:	6863      	ldr	r3, [r4, #4]
1000bb30:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000bb32:	06ab      	lsls	r3, r5, #26
1000bb34:	d50a      	bpl.n	1000bb4c <uart_tx1_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000bb36:	2321      	movs	r3, #33	; 0x21
1000bb38:	5ce3      	ldrb	r3, [r4, r3]
1000bb3a:	079b      	lsls	r3, r3, #30
1000bb3c:	d506      	bpl.n	1000bb4c <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
1000bb3e:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000bb40:	5ce3      	ldrb	r3, [r4, r3]
1000bb42:	079b      	lsls	r3, r3, #30
1000bb44:	d502      	bpl.n	1000bb4c <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000bb46:	68a3      	ldr	r3, [r4, #8]
1000bb48:	0020      	movs	r0, r4
1000bb4a:	4798      	blx	r3
		}

	}
}
1000bb4c:	bd70      	pop	{r4, r5, r6, pc}
1000bb4e:	46c0      	nop			; (mov r8, r8)
1000bb50:	100170ec 	.word	0x100170ec

1000bb54 <uart_get_config_defaults>:
 * \param[out] config  Pointer to configuration structure to be initiated
 */
void uart_get_config_defaults(
		struct uart_config *const config)
{
	config->baud_rate = 115200;
1000bb54:	23e1      	movs	r3, #225	; 0xe1
1000bb56:	025b      	lsls	r3, r3, #9
1000bb58:	6003      	str	r3, [r0, #0]
	config->data_bits = UART_8_BITS;
1000bb5a:	2300      	movs	r3, #0
1000bb5c:	7103      	strb	r3, [r0, #4]
	config->stop_bits = UART_1_STOP_BIT;
1000bb5e:	7143      	strb	r3, [r0, #5]
	config->parity = UART_NO_PARITY;
1000bb60:	7183      	strb	r3, [r0, #6]
	config->flow_control = false;
1000bb62:	71c3      	strb	r3, [r0, #7]

	config->pin_number_pad[0] = PIN_LP_GPIO_2;
1000bb64:	3302      	adds	r3, #2
1000bb66:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_3;
1000bb68:	2203      	movs	r2, #3
1000bb6a:	60c2      	str	r2, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_4;
1000bb6c:	3201      	adds	r2, #1
1000bb6e:	6102      	str	r2, [r0, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_5;
1000bb70:	3201      	adds	r2, #1
1000bb72:	6142      	str	r2, [r0, #20]

	config->pinmux_sel_pad[0] = MUX_LP_GPIO_2_UART0_RXD;
1000bb74:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_3_UART0_TXD;
1000bb76:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_4_UART0_CTS;
1000bb78:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_5_UART0_RTS;
1000bb7a:	6243      	str	r3, [r0, #36]	; 0x24
}
1000bb7c:	4770      	bx	lr
1000bb7e:	46c0      	nop			; (mov r8, r8)

1000bb80 <uart_init>:
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000bb80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000bb82:	464f      	mov	r7, r9
1000bb84:	4646      	mov	r6, r8
1000bb86:	b4c0      	push	{r6, r7}
1000bb88:	0005      	movs	r5, r0
1000bb8a:	0017      	movs	r7, r2

	uint8_t config_temp = 0;
	uint8_t i,index;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
1000bb8c:	6001      	str	r1, [r0, #0]

	for (i = 0; i < UART_CALLBACK_N; i++) {
		module->callback[i] = NULL;
1000bb8e:	2300      	movs	r3, #0
1000bb90:	6043      	str	r3, [r0, #4]
1000bb92:	6083      	str	r3, [r0, #8]
1000bb94:	60c3      	str	r3, [r0, #12]
1000bb96:	6103      	str	r3, [r0, #16]
	}
	module->rx_buffer_ptr = NULL;
1000bb98:	6143      	str	r3, [r0, #20]
	module->tx_buffer_ptr = NULL;
1000bb9a:	6183      	str	r3, [r0, #24]
	module->remaining_rx_buffer_length = 0;
1000bb9c:	2200      	movs	r2, #0
1000bb9e:	8383      	strh	r3, [r0, #28]
	module->remaining_tx_buffer_length = 0;
1000bba0:	83c3      	strh	r3, [r0, #30]
	module->callback_reg_mask = 0;
1000bba2:	3320      	adds	r3, #32
1000bba4:	54c2      	strb	r2, [r0, r3]
	module->callback_enable_mask = 0;
1000bba6:	3301      	adds	r3, #1
1000bba8:	54c2      	strb	r2, [r0, r3]
	module->status = STATUS_OK;
1000bbaa:	3301      	adds	r3, #1
1000bbac:	54c2      	strb	r2, [r0, r3]

	if (hw == UART0) {
1000bbae:	4b55      	ldr	r3, [pc, #340]	; (1000bd04 <uart_init+0x184>)
1000bbb0:	4299      	cmp	r1, r3
1000bbb2:	d118      	bne.n	1000bbe6 <uart_init+0x66>
		system_peripheral_reset(PERIPHERAL_UART0_CORE);
1000bbb4:	2009      	movs	r0, #9
1000bbb6:	4c54      	ldr	r4, [pc, #336]	; (1000bd08 <uart_init+0x188>)
1000bbb8:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART0_IF);
1000bbba:	200a      	movs	r0, #10
1000bbbc:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_CORE);
1000bbbe:	2009      	movs	r0, #9
1000bbc0:	4c52      	ldr	r4, [pc, #328]	; (1000bd0c <uart_init+0x18c>)
1000bbc2:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_IF);
1000bbc4:	200a      	movs	r0, #10
1000bbc6:	47a0      	blx	r4
		_uart_instances[0] = module;
1000bbc8:	4b51      	ldr	r3, [pc, #324]	; (1000bd10 <uart_init+0x190>)
1000bbca:	601d      	str	r5, [r3, #0]
		system_register_isr(RAM_ISR_TABLE_UARTRX0_INDEX, (uint32_t)uart_rx0_isr_handler);
1000bbcc:	4951      	ldr	r1, [pc, #324]	; (1000bd14 <uart_init+0x194>)
1000bbce:	2010      	movs	r0, #16
1000bbd0:	4c51      	ldr	r4, [pc, #324]	; (1000bd18 <uart_init+0x198>)
1000bbd2:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX0_INDEX, (uint32_t)uart_tx0_isr_handler);
1000bbd4:	4951      	ldr	r1, [pc, #324]	; (1000bd1c <uart_init+0x19c>)
1000bbd6:	2011      	movs	r0, #17
1000bbd8:	47a0      	blx	r4
1000bbda:	4b51      	ldr	r3, [pc, #324]	; (1000bd20 <uart_init+0x1a0>)
1000bbdc:	2201      	movs	r2, #1
1000bbde:	601a      	str	r2, [r3, #0]
1000bbe0:	3201      	adds	r2, #1
1000bbe2:	601a      	str	r2, [r3, #0]
1000bbe4:	e01a      	b.n	1000bc1c <uart_init+0x9c>
		NVIC_EnableIRQ(UART0_RX_IRQn);
		NVIC_EnableIRQ(UART0_TX_IRQn);
	} else if (hw == UART1) {
1000bbe6:	4b4f      	ldr	r3, [pc, #316]	; (1000bd24 <uart_init+0x1a4>)
1000bbe8:	4299      	cmp	r1, r3
1000bbea:	d117      	bne.n	1000bc1c <uart_init+0x9c>
		system_peripheral_reset(PERIPHERAL_UART1_CORE);
1000bbec:	200b      	movs	r0, #11
1000bbee:	4c46      	ldr	r4, [pc, #280]	; (1000bd08 <uart_init+0x188>)
1000bbf0:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART1_IF);
1000bbf2:	200c      	movs	r0, #12
1000bbf4:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_CORE);
1000bbf6:	200b      	movs	r0, #11
1000bbf8:	4c44      	ldr	r4, [pc, #272]	; (1000bd0c <uart_init+0x18c>)
1000bbfa:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_IF);
1000bbfc:	200c      	movs	r0, #12
1000bbfe:	47a0      	blx	r4
		_uart_instances[1] = module;
1000bc00:	4b43      	ldr	r3, [pc, #268]	; (1000bd10 <uart_init+0x190>)
1000bc02:	605d      	str	r5, [r3, #4]
		system_register_isr(RAM_ISR_TABLE_UARTRX1_INDEX, (uint32_t)uart_rx1_isr_handler);
1000bc04:	4948      	ldr	r1, [pc, #288]	; (1000bd28 <uart_init+0x1a8>)
1000bc06:	2012      	movs	r0, #18
1000bc08:	4c43      	ldr	r4, [pc, #268]	; (1000bd18 <uart_init+0x198>)
1000bc0a:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX1_INDEX, (uint32_t)uart_tx1_isr_handler);
1000bc0c:	4947      	ldr	r1, [pc, #284]	; (1000bd2c <uart_init+0x1ac>)
1000bc0e:	2013      	movs	r0, #19
1000bc10:	47a0      	blx	r4
1000bc12:	4b43      	ldr	r3, [pc, #268]	; (1000bd20 <uart_init+0x1a0>)
1000bc14:	2204      	movs	r2, #4
1000bc16:	601a      	str	r2, [r3, #0]
1000bc18:	3204      	adds	r2, #4
1000bc1a:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000bc1c:	79fb      	ldrb	r3, [r7, #7]
		index = 4;
1000bc1e:	2204      	movs	r2, #4
1000bc20:	4690      	mov	r8, r2
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000bc22:	2b00      	cmp	r3, #0
1000bc24:	d152      	bne.n	1000bccc <uart_init+0x14c>
		index = 4;
	} else {
		index = 2;
1000bc26:	3302      	adds	r3, #2
1000bc28:	4698      	mov	r8, r3
1000bc2a:	e04f      	b.n	1000bccc <uart_init+0x14c>
#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000bc2c:	8a31      	ldrh	r1, [r6, #16]
1000bc2e:	ce01      	ldmia	r6!, {r0}
1000bc30:	b2c0      	uxtb	r0, r0
1000bc32:	47c8      	blx	r9

#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
1000bc34:	3401      	adds	r4, #1
1000bc36:	b2e4      	uxtb	r4, r4
1000bc38:	4544      	cmp	r4, r8
1000bc3a:	d3f7      	bcc.n	1000bc2c <uart_init+0xac>
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000bc3c:	682b      	ldr	r3, [r5, #0]
1000bc3e:	7d1a      	ldrb	r2, [r3, #20]
1000bc40:	07d2      	lsls	r2, r2, #31
1000bc42:	d504      	bpl.n	1000bc4e <uart_init+0xce>
1000bc44:	2101      	movs	r1, #1
		i = module->hw->RECEIVE_DATA.reg;
1000bc46:	7c1a      	ldrb	r2, [r3, #16]
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000bc48:	7d1a      	ldrb	r2, [r3, #20]
1000bc4a:	420a      	tst	r2, r1
1000bc4c:	d1fb      	bne.n	1000bc46 <uart_init+0xc6>
		i = module->hw->RECEIVE_DATA.reg;
	}
	
	/* reset configuration register */
	module->hw->UART_CONFIGURATION.reg = 0;
1000bc4e:	2100      	movs	r1, #0
1000bc50:	2220      	movs	r2, #32
1000bc52:	5499      	strb	r1, [r3, r2]

	/* program the uart configuration. */
	if(config->flow_control) {
1000bc54:	79fb      	ldrb	r3, [r7, #7]
		config_temp |= UART_CONFIGURATION_CTS_ENABLE_1;
1000bc56:	1e59      	subs	r1, r3, #1
1000bc58:	418b      	sbcs	r3, r1
1000bc5a:	0159      	lsls	r1, r3, #5
	}
	config_temp |= config->data_bits;
	config_temp |= config->stop_bits;
1000bc5c:	793b      	ldrb	r3, [r7, #4]
1000bc5e:	797a      	ldrb	r2, [r7, #5]
1000bc60:	4313      	orrs	r3, r2
1000bc62:	430b      	orrs	r3, r1
	switch(config->parity) {
1000bc64:	79ba      	ldrb	r2, [r7, #6]
1000bc66:	2a02      	cmp	r2, #2
1000bc68:	d00d      	beq.n	1000bc86 <uart_init+0x106>
1000bc6a:	b2d1      	uxtb	r1, r2
1000bc6c:	2902      	cmp	r1, #2
1000bc6e:	d802      	bhi.n	1000bc76 <uart_init+0xf6>
1000bc70:	2a01      	cmp	r2, #1
1000bc72:	d005      	beq.n	1000bc80 <uart_init+0x100>
1000bc74:	e00f      	b.n	1000bc96 <uart_init+0x116>
1000bc76:	2a03      	cmp	r2, #3
1000bc78:	d008      	beq.n	1000bc8c <uart_init+0x10c>
1000bc7a:	2a04      	cmp	r2, #4
1000bc7c:	d009      	beq.n	1000bc92 <uart_init+0x112>
1000bc7e:	e00a      	b.n	1000bc96 <uart_init+0x116>
		case UART_NO_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_0;
			break;

		case UART_EVEN_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
1000bc80:	2202      	movs	r2, #2
1000bc82:	4313      	orrs	r3, r2
			config_temp |= UART_CONFIGURATION_PARITY_MODE_0;
			break;
1000bc84:	e007      	b.n	1000bc96 <uart_init+0x116>

		case UART_ODD_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_1;
1000bc86:	2206      	movs	r2, #6
1000bc88:	4313      	orrs	r3, r2
			break;
1000bc8a:	e004      	b.n	1000bc96 <uart_init+0x116>

		case UART_SPACE_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_2;
1000bc8c:	220a      	movs	r2, #10
1000bc8e:	4313      	orrs	r3, r2
			break;
1000bc90:	e001      	b.n	1000bc96 <uart_init+0x116>

		case UART_MARK_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_3;
1000bc92:	220e      	movs	r2, #14
1000bc94:	4313      	orrs	r3, r2
			break;

		default:
			break;
	}	
	module->hw->UART_CONFIGURATION.reg = config_temp;
1000bc96:	2220      	movs	r2, #32
1000bc98:	6829      	ldr	r1, [r5, #0]
1000bc9a:	548b      	strb	r3, [r1, r2]

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);
1000bc9c:	683e      	ldr	r6, [r7, #0]
	uint16_t integerpart = 0;
	uint8_t fractionalpart = 0;
	uint32_t diff;
	uint8_t i = 0;

	clock = system_clock_get_value();
1000bc9e:	4b24      	ldr	r3, [pc, #144]	; (1000bd30 <uart_init+0x1b0>)
1000bca0:	4798      	blx	r3
1000bca2:	0004      	movs	r4, r0
	integerpart = clock / baud_rate;
1000bca4:	0031      	movs	r1, r6
1000bca6:	4b23      	ldr	r3, [pc, #140]	; (1000bd34 <uart_init+0x1b4>)
1000bca8:	4798      	blx	r3
1000bcaa:	b282      	uxth	r2, r0
	diff = clock - (baud_rate * integerpart);
1000bcac:	0400      	lsls	r0, r0, #16
1000bcae:	0c00      	lsrs	r0, r0, #16
1000bcb0:	4370      	muls	r0, r6
1000bcb2:	1a20      	subs	r0, r4, r0
	i = 0;
	while(diff > (baud_rate / 16)) {
1000bcb4:	0931      	lsrs	r1, r6, #4
1000bcb6:	4288      	cmp	r0, r1
1000bcb8:	d906      	bls.n	1000bcc8 <uart_init+0x148>
1000bcba:	2300      	movs	r3, #0
		i++;
1000bcbc:	3301      	adds	r3, #1
1000bcbe:	b2db      	uxtb	r3, r3
		diff -= (baud_rate / 16);
1000bcc0:	1a40      	subs	r0, r0, r1

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
	while(diff > (baud_rate / 16)) {
1000bcc2:	4288      	cmp	r0, r1
1000bcc4:	d8fa      	bhi.n	1000bcbc <uart_init+0x13c>
1000bcc6:	e007      	b.n	1000bcd8 <uart_init+0x158>
	uint8_t i = 0;

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
1000bcc8:	2300      	movs	r3, #0
1000bcca:	e005      	b.n	1000bcd8 <uart_init+0x158>
1000bccc:	003e      	movs	r6, r7
1000bcce:	3608      	adds	r6, #8
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000bcd0:	2400      	movs	r4, #0
#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000bcd2:	4b19      	ldr	r3, [pc, #100]	; (1000bd38 <uart_init+0x1b8>)
1000bcd4:	4699      	mov	r9, r3
1000bcd6:	e7a9      	b.n	1000bc2c <uart_init+0xac>
		i++;
		diff -= (baud_rate / 16);
	}
	fractionalpart = (i + 1) / 2;

	module->hw->UART_CLOCK_SOURCE.reg = UART_CLOCK_SOURCE_CLOCK_SELECT_0;
1000bcd8:	2100      	movs	r1, #0
1000bcda:	2028      	movs	r0, #40	; 0x28
1000bcdc:	682c      	ldr	r4, [r5, #0]
1000bcde:	5421      	strb	r1, [r4, r0]
	module->hw->UART_BAUD_RATE.reg =
1000bce0:	3301      	adds	r3, #1
1000bce2:	071b      	lsls	r3, r3, #28
1000bce4:	0f5b      	lsrs	r3, r3, #29
1000bce6:	00d2      	lsls	r2, r2, #3
1000bce8:	4313      	orrs	r3, r2
1000bcea:	b29b      	uxth	r3, r3
1000bcec:	682a      	ldr	r2, [r5, #0]
1000bcee:	8493      	strh	r3, [r2, #36]	; 0x24
	module->hw->UART_CONFIGURATION.reg = config_temp;

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);

	module->hw->RX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at read time
1000bcf0:	682b      	ldr	r3, [r5, #0]
1000bcf2:	7619      	strb	r1, [r3, #24]
	module->hw->TX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at write time
1000bcf4:	682b      	ldr	r3, [r5, #0]
1000bcf6:	7219      	strb	r1, [r3, #8]
	
	return STATUS_OK;
}
1000bcf8:	2000      	movs	r0, #0
1000bcfa:	bc0c      	pop	{r2, r3}
1000bcfc:	4690      	mov	r8, r2
1000bcfe:	4699      	mov	r9, r3
1000bd00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000bd02:	46c0      	nop			; (mov r8, r8)
1000bd04:	40004000 	.word	0x40004000
1000bd08:	1000b4b5 	.word	0x1000b4b5
1000bd0c:	1000aded 	.word	0x1000aded
1000bd10:	100170ec 	.word	0x100170ec
1000bd14:	1000b92d 	.word	0x1000b92d
1000bd18:	1000b91d 	.word	0x1000b91d
1000bd1c:	1000b9b5 	.word	0x1000b9b5
1000bd20:	e000e100 	.word	0xe000e100
1000bd24:	40005000 	.word	0x40005000
1000bd28:	1000ba41 	.word	0x1000ba41
1000bd2c:	1000bac9 	.word	0x1000bac9
1000bd30:	1000ade1 	.word	0x1000ade1
1000bd34:	10011215 	.word	0x10011215
1000bd38:	1000aa3d 	.word	0x1000aa3d

1000bd3c <uart_write_wait>:
* \retval STATUS_OK         If the operation was completed
*/
enum status_code uart_write_wait(struct uart_module *const module,
		const uint8_t tx_data)
{
	while (!(module->hw->TRANSMIT_STATUS.reg & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL));
1000bd3c:	6802      	ldr	r2, [r0, #0]
1000bd3e:	2001      	movs	r0, #1
1000bd40:	7913      	ldrb	r3, [r2, #4]
1000bd42:	4203      	tst	r3, r0
1000bd44:	d0fc      	beq.n	1000bd40 <uart_write_wait+0x4>

	module->hw->TRANSMIT_DATA.reg = tx_data;
1000bd46:	7011      	strb	r1, [r2, #0]
	
	return STATUS_OK;
}
1000bd48:	2000      	movs	r0, #0
1000bd4a:	4770      	bx	lr

1000bd4c <uart_read_wait>:
* \retval STATUS_OK                If the operation was completed
*/
enum status_code uart_read_wait(struct uart_module *const module,
		uint8_t *const rx_data)
{
	while (!(module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY));
1000bd4c:	6802      	ldr	r2, [r0, #0]
1000bd4e:	2001      	movs	r0, #1
1000bd50:	7d13      	ldrb	r3, [r2, #20]
1000bd52:	4203      	tst	r3, r0
1000bd54:	d0fc      	beq.n	1000bd50 <uart_read_wait+0x4>

	*rx_data = module->hw->RECEIVE_DATA.reg;
1000bd56:	7c13      	ldrb	r3, [r2, #16]
1000bd58:	700b      	strb	r3, [r1, #0]
	
	return STATUS_OK;
}
1000bd5a:	2000      	movs	r0, #0
1000bd5c:	4770      	bx	lr
1000bd5e:	46c0      	nop			; (mov r8, r8)

1000bd60 <uart_read_buffer_job>:
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
1000bd60:	2317      	movs	r3, #23
{
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
1000bd62:	2a00      	cmp	r2, #0
1000bd64:	d00d      	beq.n	1000bd82 <uart_read_buffer_job+0x22>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check if the UART is busy transmitting or slave waiting for TXC*/
	if (module->status == STATUS_BUSY) {
1000bd66:	330b      	adds	r3, #11
1000bd68:	5cc3      	ldrb	r3, [r0, r3]
1000bd6a:	b2db      	uxtb	r3, r3
1000bd6c:	2b05      	cmp	r3, #5
1000bd6e:	d008      	beq.n	1000bd82 <uart_read_buffer_job+0x22>
	Assert(module);
	Assert(rx_data);

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
1000bd70:	8382      	strh	r2, [r0, #28]
	module->rx_buffer_ptr = rx_data;
1000bd72:	6141      	str	r1, [r0, #20]
	module->status = STATUS_BUSY;
1000bd74:	2205      	movs	r2, #5
1000bd76:	2322      	movs	r3, #34	; 0x22
1000bd78:	54c2      	strb	r2, [r0, r3]

	module->hw->RX_INTERRUPT_MASK.reg = UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK;
1000bd7a:	6803      	ldr	r3, [r0, #0]
1000bd7c:	3a04      	subs	r2, #4
1000bd7e:	761a      	strb	r2, [r3, #24]
		return STATUS_BUSY;
	}

	/* Issue internal read */
	_uart_read_buffer(module, rx_data, length);
	return STATUS_OK;
1000bd80:	2300      	movs	r3, #0
}
1000bd82:	0018      	movs	r0, r3
1000bd84:	4770      	bx	lr
1000bd86:	46c0      	nop			; (mov r8, r8)

1000bd88 <uart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
1000bd88:	0093      	lsls	r3, r2, #2
1000bd8a:	18c3      	adds	r3, r0, r3
1000bd8c:	6059      	str	r1, [r3, #4]
	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
1000bd8e:	2120      	movs	r1, #32
1000bd90:	2301      	movs	r3, #1
1000bd92:	4093      	lsls	r3, r2
1000bd94:	5c42      	ldrb	r2, [r0, r1]
1000bd96:	4313      	orrs	r3, r2
1000bd98:	5443      	strb	r3, [r0, r1]
}
1000bd9a:	4770      	bx	lr

1000bd9c <uart_enable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_enable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000bd9c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
1000bd9e:	2221      	movs	r2, #33	; 0x21
1000bda0:	2301      	movs	r3, #1
1000bda2:	408b      	lsls	r3, r1
1000bda4:	5c84      	ldrb	r4, [r0, r2]
1000bda6:	4323      	orrs	r3, r4
1000bda8:	5483      	strb	r3, [r0, r2]

	if (callback_type == UART_CTS_ACTIVE) {
1000bdaa:	2901      	cmp	r1, #1
1000bdac:	d104      	bne.n	1000bdb8 <uart_enable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg |= UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000bdae:	6802      	ldr	r2, [r0, #0]
1000bdb0:	7a11      	ldrb	r1, [r2, #8]
1000bdb2:	2320      	movs	r3, #32
1000bdb4:	430b      	orrs	r3, r1
1000bdb6:	7213      	strb	r3, [r2, #8]
	}
}
1000bdb8:	bd10      	pop	{r4, pc}
1000bdba:	46c0      	nop			; (mov r8, r8)

1000bdbc <uart_disable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_disable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000bdbc:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
1000bdbe:	2201      	movs	r2, #1
1000bdc0:	408a      	lsls	r2, r1
1000bdc2:	2421      	movs	r4, #33	; 0x21
1000bdc4:	5d03      	ldrb	r3, [r0, r4]
1000bdc6:	4393      	bics	r3, r2
1000bdc8:	5503      	strb	r3, [r0, r4]

	if (callback_type == UART_CTS_ACTIVE) {
1000bdca:	2901      	cmp	r1, #1
1000bdcc:	d104      	bne.n	1000bdd8 <uart_disable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg &= ~UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000bdce:	6802      	ldr	r2, [r0, #0]
1000bdd0:	7a13      	ldrb	r3, [r2, #8]
1000bdd2:	311f      	adds	r1, #31
1000bdd4:	438b      	bics	r3, r1
1000bdd6:	7213      	strb	r3, [r2, #8]
	}

}
1000bdd8:	bd10      	pop	{r4, pc}
1000bdda:	46c0      	nop			; (mov r8, r8)

1000bddc <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
1000bddc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000bdde:	4647      	mov	r7, r8
1000bde0:	b480      	push	{r7}
1000bde2:	000c      	movs	r4, r1
1000bde4:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
1000bde6:	2800      	cmp	r0, #0
1000bde8:	d10d      	bne.n	1000be06 <_read+0x2a>
		return -1;
	}

	for (; len > 0; --len) {
1000bdea:	2a00      	cmp	r2, #0
1000bdec:	dd0e      	ble.n	1000be0c <_read+0x30>
1000bdee:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
1000bdf0:	4e08      	ldr	r6, [pc, #32]	; (1000be14 <_read+0x38>)
1000bdf2:	4d09      	ldr	r5, [pc, #36]	; (1000be18 <_read+0x3c>)
1000bdf4:	6830      	ldr	r0, [r6, #0]
1000bdf6:	0021      	movs	r1, r4
1000bdf8:	682b      	ldr	r3, [r5, #0]
1000bdfa:	4798      	blx	r3
		ptr++;
1000bdfc:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
1000bdfe:	42a7      	cmp	r7, r4
1000be00:	d1f8      	bne.n	1000bdf4 <_read+0x18>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
1000be02:	4640      	mov	r0, r8
1000be04:	e003      	b.n	1000be0e <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
1000be06:	2001      	movs	r0, #1
1000be08:	4240      	negs	r0, r0
1000be0a:	e000      	b.n	1000be0e <_read+0x32>
	}

	for (; len > 0; --len) {
1000be0c:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
1000be0e:	bc04      	pop	{r2}
1000be10:	4690      	mov	r8, r2
1000be12:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000be14:	100170fc 	.word	0x100170fc
1000be18:	100170f4 	.word	0x100170f4

1000be1c <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
1000be1c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000be1e:	4647      	mov	r7, r8
1000be20:	b480      	push	{r7}
1000be22:	000e      	movs	r6, r1
1000be24:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
1000be26:	3801      	subs	r0, #1
1000be28:	2802      	cmp	r0, #2
1000be2a:	d811      	bhi.n	1000be50 <_write+0x34>
		return -1;
	}

	for (; len != 0; --len) {
1000be2c:	2a00      	cmp	r2, #0
1000be2e:	d012      	beq.n	1000be56 <_write+0x3a>
1000be30:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
1000be32:	4b0c      	ldr	r3, [pc, #48]	; (1000be64 <_write+0x48>)
1000be34:	4698      	mov	r8, r3
1000be36:	4f0c      	ldr	r7, [pc, #48]	; (1000be68 <_write+0x4c>)
1000be38:	4643      	mov	r3, r8
1000be3a:	6818      	ldr	r0, [r3, #0]
1000be3c:	5d31      	ldrb	r1, [r6, r4]
1000be3e:	683b      	ldr	r3, [r7, #0]
1000be40:	4798      	blx	r3
1000be42:	2800      	cmp	r0, #0
1000be44:	db09      	blt.n	1000be5a <_write+0x3e>
			return -1;
		}
		++nChars;
1000be46:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
1000be48:	42a5      	cmp	r5, r4
1000be4a:	d1f5      	bne.n	1000be38 <_write+0x1c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
1000be4c:	0020      	movs	r0, r4
1000be4e:	e006      	b.n	1000be5e <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
1000be50:	2001      	movs	r0, #1
1000be52:	4240      	negs	r0, r0
1000be54:	e003      	b.n	1000be5e <_write+0x42>
	}

	for (; len != 0; --len) {
1000be56:	2000      	movs	r0, #0
1000be58:	e001      	b.n	1000be5e <_write+0x42>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
1000be5a:	2001      	movs	r0, #1
1000be5c:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
1000be5e:	bc04      	pop	{r2}
1000be60:	4690      	mov	r8, r2
1000be62:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000be64:	100170fc 	.word	0x100170fc
1000be68:	100170f8 	.word	0x100170f8

1000be6c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
1000be6c:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
1000be6e:	4a06      	ldr	r2, [pc, #24]	; (1000be88 <_sbrk+0x1c>)
1000be70:	6812      	ldr	r2, [r2, #0]
1000be72:	2a00      	cmp	r2, #0
1000be74:	d102      	bne.n	1000be7c <_sbrk+0x10>
		heap = (unsigned char *)&_end;
1000be76:	4905      	ldr	r1, [pc, #20]	; (1000be8c <_sbrk+0x20>)
1000be78:	4a03      	ldr	r2, [pc, #12]	; (1000be88 <_sbrk+0x1c>)
1000be7a:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
1000be7c:	4a02      	ldr	r2, [pc, #8]	; (1000be88 <_sbrk+0x1c>)
1000be7e:	6810      	ldr	r0, [r2, #0]

	heap += incr;
1000be80:	18c3      	adds	r3, r0, r3
1000be82:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
1000be84:	4770      	bx	lr
1000be86:	46c0      	nop			; (mov r8, r8)
1000be88:	1001542c 	.word	0x1001542c
1000be8c:	10019a08 	.word	0x10019a08

1000be90 <_close>:
}

extern int _close(int file)
{
	return -1;
}
1000be90:	2001      	movs	r0, #1
1000be92:	4240      	negs	r0, r0
1000be94:	4770      	bx	lr
1000be96:	46c0      	nop			; (mov r8, r8)

1000be98 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
1000be98:	2380      	movs	r3, #128	; 0x80
1000be9a:	019b      	lsls	r3, r3, #6
1000be9c:	604b      	str	r3, [r1, #4]

	return 0;
}
1000be9e:	2000      	movs	r0, #0
1000bea0:	4770      	bx	lr
1000bea2:	46c0      	nop			; (mov r8, r8)

1000bea4 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
1000bea4:	2001      	movs	r0, #1
1000bea6:	4770      	bx	lr

1000bea8 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
1000bea8:	2000      	movs	r0, #0
1000beaa:	4770      	bx	lr

1000beac <ble_undefined_event_handler>:
	}
	return status;
}

at_ble_status_t ble_undefined_event_handler(void *params)
{
1000beac:	b510      	push	{r4, lr}
	DBG_LOG_DEV("Undefined Event Received");
1000beae:	4804      	ldr	r0, [pc, #16]	; (1000bec0 <ble_undefined_event_handler+0x14>)
1000beb0:	4b04      	ldr	r3, [pc, #16]	; (1000bec4 <ble_undefined_event_handler+0x18>)
1000beb2:	4798      	blx	r3
1000beb4:	4804      	ldr	r0, [pc, #16]	; (1000bec8 <ble_undefined_event_handler+0x1c>)
1000beb6:	4b05      	ldr	r3, [pc, #20]	; (1000becc <ble_undefined_event_handler+0x20>)
1000beb8:	4798      	blx	r3
    ALL_UNUSED(params);
	return AT_BLE_SUCCESS;
}
1000beba:	2000      	movs	r0, #0
1000bebc:	bd10      	pop	{r4, pc}
1000bebe:	46c0      	nop			; (mov r8, r8)
1000bec0:	10013980 	.word	0x10013980
1000bec4:	100127d9 	.word	0x100127d9
1000bec8:	100147c0 	.word	0x100147c0
1000becc:	100126b9 	.word	0x100126b9

1000bed0 <ble_scan_report_handler>:
	}
}

/** @brief function handles scan report */
at_ble_status_t ble_scan_report_handler(void *params)
{
1000bed0:	b510      	push	{r4, lr}
	at_ble_scan_report_t *scan_report;
	scan_report = (at_ble_scan_report_t *)params;
	if (scan_report->status == AT_BLE_SUCCESS)
1000bed2:	7800      	ldrb	r0, [r0, #0]
1000bed4:	2800      	cmp	r0, #0
1000bed6:	d006      	beq.n	1000bee6 <ble_scan_report_handler+0x16>
		/* All scan data should be handled */
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Scanning  failed");
1000bed8:	4803      	ldr	r0, [pc, #12]	; (1000bee8 <ble_scan_report_handler+0x18>)
1000beda:	4b04      	ldr	r3, [pc, #16]	; (1000beec <ble_scan_report_handler+0x1c>)
1000bedc:	4798      	blx	r3
1000bede:	4804      	ldr	r0, [pc, #16]	; (1000bef0 <ble_scan_report_handler+0x20>)
1000bee0:	4b04      	ldr	r3, [pc, #16]	; (1000bef4 <ble_scan_report_handler+0x24>)
1000bee2:	4798      	blx	r3
	}
	return AT_BLE_FAILURE;
1000bee4:	20e2      	movs	r0, #226	; 0xe2
}
1000bee6:	bd10      	pop	{r4, pc}
1000bee8:	10013980 	.word	0x10013980
1000beec:	100127d9 	.word	0x100127d9
1000bef0:	100147dc 	.word	0x100147dc
1000bef4:	100126b9 	.word	0x100126b9

1000bef8 <ble_adv_report_handler>:

/** @brief function handles advertising report */
at_ble_status_t ble_adv_report_handler(void *params)
{
1000bef8:	b510      	push	{r4, lr}
    at_ble_adv_report_t *adv_report;
    adv_report = (at_ble_adv_report_t *)params;
    if(adv_report->status == AT_BLE_SUCCESS)
1000befa:	7800      	ldrb	r0, [r0, #0]
1000befc:	2800      	cmp	r0, #0
1000befe:	d006      	beq.n	1000bf0e <ble_adv_report_handler+0x16>
    {
        return AT_BLE_SUCCESS;
    }
    else 
    {
        DBG_LOG("Advertising failed");
1000bf00:	4803      	ldr	r0, [pc, #12]	; (1000bf10 <ble_adv_report_handler+0x18>)
1000bf02:	4b04      	ldr	r3, [pc, #16]	; (1000bf14 <ble_adv_report_handler+0x1c>)
1000bf04:	4798      	blx	r3
1000bf06:	4804      	ldr	r0, [pc, #16]	; (1000bf18 <ble_adv_report_handler+0x20>)
1000bf08:	4b04      	ldr	r3, [pc, #16]	; (1000bf1c <ble_adv_report_handler+0x24>)
1000bf0a:	4798      	blx	r3
    }
    return AT_BLE_FAILURE;
1000bf0c:	20e2      	movs	r0, #226	; 0xe2
}
1000bf0e:	bd10      	pop	{r4, pc}
1000bf10:	10013980 	.word	0x10013980
1000bf14:	100127d9 	.word	0x100127d9
1000bf18:	100147f0 	.word	0x100147f0
1000bf1c:	100126b9 	.word	0x100126b9

1000bf20 <ble_mtu_changed_indication_handler>:
	return AT_BLE_SUCCESS;
	
}

at_ble_status_t ble_mtu_changed_indication_handler(void *params)
{
1000bf20:	b510      	push	{r4, lr}
1000bf22:	0004      	movs	r4, r0
	at_ble_mtu_changed_ind_t *mtu_changed_ind;
	mtu_changed_ind = (at_ble_mtu_changed_ind_t *)params;
	DBG_LOG_DEV("BLE-MTU Changed, Connection Handle: %d, New Value: %d", 
1000bf24:	4804      	ldr	r0, [pc, #16]	; (1000bf38 <ble_mtu_changed_indication_handler+0x18>)
1000bf26:	4b05      	ldr	r3, [pc, #20]	; (1000bf3c <ble_mtu_changed_indication_handler+0x1c>)
1000bf28:	4798      	blx	r3
1000bf2a:	8862      	ldrh	r2, [r4, #2]
1000bf2c:	8821      	ldrh	r1, [r4, #0]
1000bf2e:	4804      	ldr	r0, [pc, #16]	; (1000bf40 <ble_mtu_changed_indication_handler+0x20>)
1000bf30:	4b04      	ldr	r3, [pc, #16]	; (1000bf44 <ble_mtu_changed_indication_handler+0x24>)
1000bf32:	4798      	blx	r3
										mtu_changed_ind->conhdl, 
										mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
}
1000bf34:	2000      	movs	r0, #0
1000bf36:	bd10      	pop	{r4, pc}
1000bf38:	10013980 	.word	0x10013980
1000bf3c:	100127d9 	.word	0x100127d9
1000bf40:	10014804 	.word	0x10014804
1000bf44:	100126b9 	.word	0x100126b9

1000bf48 <ble_mtu_changed_cmd_complete_handler>:

at_ble_status_t ble_mtu_changed_cmd_complete_handler(void *params)
{
1000bf48:	b570      	push	{r4, r5, r6, lr}
1000bf4a:	0004      	movs	r4, r0
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
1000bf4c:	78c5      	ldrb	r5, [r0, #3]
1000bf4e:	2d00      	cmp	r5, #0
1000bf50:	d108      	bne.n	1000bf64 <ble_mtu_changed_cmd_complete_handler+0x1c>
	{
		DBG_LOG_DEV("MTU Changed, Connection Handle:%d, Operation:%d", 
1000bf52:	480a      	ldr	r0, [pc, #40]	; (1000bf7c <ble_mtu_changed_cmd_complete_handler+0x34>)
1000bf54:	4b0a      	ldr	r3, [pc, #40]	; (1000bf80 <ble_mtu_changed_cmd_complete_handler+0x38>)
1000bf56:	4798      	blx	r3
1000bf58:	78a2      	ldrb	r2, [r4, #2]
1000bf5a:	8821      	ldrh	r1, [r4, #0]
1000bf5c:	4809      	ldr	r0, [pc, #36]	; (1000bf84 <ble_mtu_changed_cmd_complete_handler+0x3c>)
1000bf5e:	4b0a      	ldr	r3, [pc, #40]	; (1000bf88 <ble_mtu_changed_cmd_complete_handler+0x40>)
1000bf60:	4798      	blx	r3
		cmd_complete_event->conn_handle, 
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
1000bf62:	e008      	b.n	1000bf76 <ble_mtu_changed_cmd_complete_handler+0x2e>
	}
	else
	{
		DBG_LOG("MTU Change Failed, Connection Handle:%d, Operation:%d",
1000bf64:	4805      	ldr	r0, [pc, #20]	; (1000bf7c <ble_mtu_changed_cmd_complete_handler+0x34>)
1000bf66:	4b06      	ldr	r3, [pc, #24]	; (1000bf80 <ble_mtu_changed_cmd_complete_handler+0x38>)
1000bf68:	4798      	blx	r3
1000bf6a:	78a2      	ldrb	r2, [r4, #2]
1000bf6c:	8821      	ldrh	r1, [r4, #0]
1000bf6e:	4807      	ldr	r0, [pc, #28]	; (1000bf8c <ble_mtu_changed_cmd_complete_handler+0x44>)
1000bf70:	4b05      	ldr	r3, [pc, #20]	; (1000bf88 <ble_mtu_changed_cmd_complete_handler+0x40>)
1000bf72:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
1000bf74:	25e2      	movs	r5, #226	; 0xe2
}
1000bf76:	0028      	movs	r0, r5
1000bf78:	bd70      	pop	{r4, r5, r6, pc}
1000bf7a:	46c0      	nop			; (mov r8, r8)
1000bf7c:	10013980 	.word	0x10013980
1000bf80:	100127d9 	.word	0x100127d9
1000bf84:	1001483c 	.word	0x1001483c
1000bf88:	100126b9 	.word	0x100126b9
1000bf8c:	1001486c 	.word	0x1001486c

1000bf90 <ble_characteristic_write_cmd_complete_handler>:

at_ble_status_t ble_characteristic_write_cmd_complete_handler(void *params)
{
1000bf90:	b570      	push	{r4, r5, r6, lr}
1000bf92:	0004      	movs	r4, r0
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
1000bf94:	78c5      	ldrb	r5, [r0, #3]
1000bf96:	2d00      	cmp	r5, #0
1000bf98:	d108      	bne.n	1000bfac <ble_characteristic_write_cmd_complete_handler+0x1c>
	{
		DBG_LOG_DEV("Char Write Cmd Complete, Connection Handle:%d, Operation:%d",
1000bf9a:	480a      	ldr	r0, [pc, #40]	; (1000bfc4 <ble_characteristic_write_cmd_complete_handler+0x34>)
1000bf9c:	4b0a      	ldr	r3, [pc, #40]	; (1000bfc8 <ble_characteristic_write_cmd_complete_handler+0x38>)
1000bf9e:	4798      	blx	r3
1000bfa0:	78a2      	ldrb	r2, [r4, #2]
1000bfa2:	8821      	ldrh	r1, [r4, #0]
1000bfa4:	4809      	ldr	r0, [pc, #36]	; (1000bfcc <ble_characteristic_write_cmd_complete_handler+0x3c>)
1000bfa6:	4b0a      	ldr	r3, [pc, #40]	; (1000bfd0 <ble_characteristic_write_cmd_complete_handler+0x40>)
1000bfa8:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
1000bfaa:	e008      	b.n	1000bfbe <ble_characteristic_write_cmd_complete_handler+0x2e>
	}
	else
	{
		DBG_LOG_DEV("Char Write Cmd Failed, Connection Handle:%d, Operation:%d",
1000bfac:	4805      	ldr	r0, [pc, #20]	; (1000bfc4 <ble_characteristic_write_cmd_complete_handler+0x34>)
1000bfae:	4b06      	ldr	r3, [pc, #24]	; (1000bfc8 <ble_characteristic_write_cmd_complete_handler+0x38>)
1000bfb0:	4798      	blx	r3
1000bfb2:	78a2      	ldrb	r2, [r4, #2]
1000bfb4:	8821      	ldrh	r1, [r4, #0]
1000bfb6:	4807      	ldr	r0, [pc, #28]	; (1000bfd4 <ble_characteristic_write_cmd_complete_handler+0x44>)
1000bfb8:	4b05      	ldr	r3, [pc, #20]	; (1000bfd0 <ble_characteristic_write_cmd_complete_handler+0x40>)
1000bfba:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
1000bfbc:	25e2      	movs	r5, #226	; 0xe2
}
1000bfbe:	0028      	movs	r0, r5
1000bfc0:	bd70      	pop	{r4, r5, r6, pc}
1000bfc2:	46c0      	nop			; (mov r8, r8)
1000bfc4:	10013980 	.word	0x10013980
1000bfc8:	100127d9 	.word	0x100127d9
1000bfcc:	100148a4 	.word	0x100148a4
1000bfd0:	100126b9 	.word	0x100126b9
1000bfd4:	100148e0 	.word	0x100148e0

1000bfd8 <ble_disconnected_state_handler>:

/** @brief function handles disconnection event received from stack */
at_ble_status_t ble_disconnected_state_handler(void *params)
{
1000bfd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000bfda:	0006      	movs	r6, r0
1000bfdc:	4c1d      	ldr	r4, [pc, #116]	; (1000c054 <ble_disconnected_state_handler+0x7c>)
1000bfde:	239b      	movs	r3, #155	; 0x9b
1000bfe0:	009b      	lsls	r3, r3, #2
1000bfe2:	18e7      	adds	r7, r4, r3
1000bfe4:	0025      	movs	r5, r4
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
1000bfe6:	0023      	movs	r3, r4
1000bfe8:	3b56      	subs	r3, #86	; 0x56
1000bfea:	881a      	ldrh	r2, [r3, #0]
1000bfec:	8833      	ldrh	r3, [r6, #0]
1000bfee:	429a      	cmp	r2, r3
1000bff0:	d122      	bne.n	1000c038 <ble_disconnected_state_handler+0x60>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
1000bff2:	7823      	ldrb	r3, [r4, #0]
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
1000bff4:	2b05      	cmp	r3, #5
1000bff6:	d001      	beq.n	1000bffc <ble_disconnected_state_handler+0x24>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
1000bff8:	2b08      	cmp	r3, #8
1000bffa:	d102      	bne.n	1000c002 <ble_disconnected_state_handler+0x2a>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
1000bffc:	2301      	movs	r3, #1
1000bffe:	702b      	strb	r3, [r5, #0]
1000c000:	e01a      	b.n	1000c038 <ble_disconnected_state_handler+0x60>
		}		
		else if(ble_dev_info[idx].conn_info.handle == disconnect->handle)
		{
			switch (ble_dev_info[idx].conn_state)
1000c002:	2b07      	cmp	r3, #7
1000c004:	d80f      	bhi.n	1000c026 <ble_disconnected_state_handler+0x4e>
1000c006:	009b      	lsls	r3, r3, #2
1000c008:	4a13      	ldr	r2, [pc, #76]	; (1000c058 <ble_disconnected_state_handler+0x80>)
1000c00a:	58d3      	ldr	r3, [r2, r3]
1000c00c:	469f      	mov	pc, r3
				case BLE_DEVICE_PAIRING_FAILED:
				case BLE_DEVICE_ENCRYPTION_STATE:
				case BLE_DEVICE_ENCRYPTION_FAILED:
				{
					/* Device is not paired so remove the device information */
					ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000c00e:	2300      	movs	r3, #0
1000c010:	7023      	strb	r3, [r4, #0]
					if (ble_device_count > 0)
1000c012:	4b12      	ldr	r3, [pc, #72]	; (1000c05c <ble_disconnected_state_handler+0x84>)
1000c014:	781b      	ldrb	r3, [r3, #0]
1000c016:	2b00      	cmp	r3, #0
1000c018:	d00e      	beq.n	1000c038 <ble_disconnected_state_handler+0x60>
					{
						ble_device_count--;
1000c01a:	4a10      	ldr	r2, [pc, #64]	; (1000c05c <ble_disconnected_state_handler+0x84>)
1000c01c:	7813      	ldrb	r3, [r2, #0]
1000c01e:	3b01      	subs	r3, #1
1000c020:	b2db      	uxtb	r3, r3
1000c022:	7013      	strb	r3, [r2, #0]
1000c024:	e008      	b.n	1000c038 <ble_disconnected_state_handler+0x60>
				
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
1000c026:	480e      	ldr	r0, [pc, #56]	; (1000c060 <ble_disconnected_state_handler+0x88>)
1000c028:	4b0e      	ldr	r3, [pc, #56]	; (1000c064 <ble_disconnected_state_handler+0x8c>)
1000c02a:	4798      	blx	r3
1000c02c:	7829      	ldrb	r1, [r5, #0]
1000c02e:	480e      	ldr	r0, [pc, #56]	; (1000c068 <ble_disconnected_state_handler+0x90>)
1000c030:	4b0e      	ldr	r3, [pc, #56]	; (1000c06c <ble_disconnected_state_handler+0x94>)
1000c032:	4798      	blx	r3
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000c034:	2300      	movs	r3, #0
1000c036:	702b      	strb	r3, [r5, #0]
1000c038:	347c      	adds	r4, #124	; 0x7c
{
	at_ble_disconnected_t *disconnect;
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c03a:	42bc      	cmp	r4, r7
1000c03c:	d1d2      	bne.n	1000bfe4 <ble_disconnected_state_handler+0xc>
				break;				
			}
		} 
	}
	
	DBG_LOG("Device disconnected Reason:0x%02x Handle=0x%x", disconnect->reason, disconnect->handle);
1000c03e:	4808      	ldr	r0, [pc, #32]	; (1000c060 <ble_disconnected_state_handler+0x88>)
1000c040:	4b08      	ldr	r3, [pc, #32]	; (1000c064 <ble_disconnected_state_handler+0x8c>)
1000c042:	4798      	blx	r3
1000c044:	8832      	ldrh	r2, [r6, #0]
1000c046:	78b1      	ldrb	r1, [r6, #2]
1000c048:	4809      	ldr	r0, [pc, #36]	; (1000c070 <ble_disconnected_state_handler+0x98>)
1000c04a:	4b08      	ldr	r3, [pc, #32]	; (1000c06c <ble_disconnected_state_handler+0x94>)
1000c04c:	4798      	blx	r3
	return AT_BLE_SUCCESS;
}
1000c04e:	2000      	movs	r0, #0
1000c050:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000c052:	46c0      	nop			; (mov r8, r8)
1000c054:	10017176 	.word	0x10017176
1000c058:	1001474c 	.word	0x1001474c
1000c05c:	10017384 	.word	0x10017384
1000c060:	10013980 	.word	0x10013980
1000c064:	100127d9 	.word	0x100127d9
1000c068:	1001491c 	.word	0x1001491c
1000c06c:	100126b9 	.word	0x100126b9
1000c070:	10014934 	.word	0x10014934

1000c074 <ble_conn_param_update>:

/** @brief connection update parameter function */
at_ble_status_t ble_conn_param_update(void *params)
{
1000c074:	b510      	push	{r4, lr}
	at_ble_conn_param_update_done_t * conn_param_update;
	conn_param_update = (at_ble_conn_param_update_done_t *)params;
	DBG_LOG_DEV("AT_BLE_CONN_PARAM_UPDATE ");
1000c076:	4804      	ldr	r0, [pc, #16]	; (1000c088 <ble_conn_param_update+0x14>)
1000c078:	4b04      	ldr	r3, [pc, #16]	; (1000c08c <ble_conn_param_update+0x18>)
1000c07a:	4798      	blx	r3
1000c07c:	4804      	ldr	r0, [pc, #16]	; (1000c090 <ble_conn_param_update+0x1c>)
1000c07e:	4b05      	ldr	r3, [pc, #20]	; (1000c094 <ble_conn_param_update+0x20>)
1000c080:	4798      	blx	r3
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}
1000c082:	2000      	movs	r0, #0
1000c084:	bd10      	pop	{r4, pc}
1000c086:	46c0      	nop			; (mov r8, r8)
1000c088:	10013980 	.word	0x10013980
1000c08c:	100127d9 	.word	0x100127d9
1000c090:	10014964 	.word	0x10014964
1000c094:	100126b9 	.word	0x100126b9

1000c098 <ble_encryption_status_change_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption status change */
at_ble_status_t ble_encryption_status_change_handler(void *params)
{
1000c098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000c09a:	0006      	movs	r6, r0
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
1000c09c:	8801      	ldrh	r1, [r0, #0]
1000c09e:	4b28      	ldr	r3, [pc, #160]	; (1000c140 <ble_encryption_status_change_handler+0xa8>)
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c0a0:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
1000c0a2:	891a      	ldrh	r2, [r3, #8]
1000c0a4:	428a      	cmp	r2, r1
1000c0a6:	d104      	bne.n	1000c0b2 <ble_encryption_status_change_handler+0x1a>
1000c0a8:	001a      	movs	r2, r3
1000c0aa:	325e      	adds	r2, #94	; 0x5e
1000c0ac:	7812      	ldrb	r2, [r2, #0]
1000c0ae:	2a06      	cmp	r2, #6
1000c0b0:	d02e      	beq.n	1000c110 <ble_encryption_status_change_handler+0x78>
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c0b2:	3401      	adds	r4, #1
1000c0b4:	b2e4      	uxtb	r4, r4
1000c0b6:	337c      	adds	r3, #124	; 0x7c
1000c0b8:	2c05      	cmp	r4, #5
1000c0ba:	d1f2      	bne.n	1000c0a2 <ble_encryption_status_change_handler+0xa>
1000c0bc:	e039      	b.n	1000c132 <ble_encryption_status_change_handler+0x9a>
			return AT_BLE_FAILURE;
		}
	}
	else
	{
		ble_dev_info[idx].bond_info.status = enc_status->status;
1000c0be:	4920      	ldr	r1, [pc, #128]	; (1000c140 <ble_encryption_status_change_handler+0xa8>)
1000c0c0:	0163      	lsls	r3, r4, #5
1000c0c2:	1b1a      	subs	r2, r3, r4
1000c0c4:	0092      	lsls	r2, r2, #2
1000c0c6:	188a      	adds	r2, r1, r2
1000c0c8:	7615      	strb	r5, [r2, #24]
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
1000c0ca:	0014      	movs	r4, r2
1000c0cc:	345e      	adds	r4, #94	; 0x5e
1000c0ce:	2307      	movs	r3, #7
1000c0d0:	7023      	strb	r3, [r4, #0]
		DBG_LOG("Encryption failed");
1000c0d2:	481c      	ldr	r0, [pc, #112]	; (1000c144 <ble_encryption_status_change_handler+0xac>)
1000c0d4:	4b1c      	ldr	r3, [pc, #112]	; (1000c148 <ble_encryption_status_change_handler+0xb0>)
1000c0d6:	4798      	blx	r3
1000c0d8:	481c      	ldr	r0, [pc, #112]	; (1000c14c <ble_encryption_status_change_handler+0xb4>)
1000c0da:	4b1d      	ldr	r3, [pc, #116]	; (1000c150 <ble_encryption_status_change_handler+0xb8>)
1000c0dc:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000c0de:	25e2      	movs	r5, #226	; 0xe2
1000c0e0:	e02b      	b.n	1000c13a <ble_encryption_status_change_handler+0xa2>
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Encryption completed successfully");
1000c0e2:	4818      	ldr	r0, [pc, #96]	; (1000c144 <ble_encryption_status_change_handler+0xac>)
1000c0e4:	4b18      	ldr	r3, [pc, #96]	; (1000c148 <ble_encryption_status_change_handler+0xb0>)
1000c0e6:	4798      	blx	r3
1000c0e8:	481a      	ldr	r0, [pc, #104]	; (1000c154 <ble_encryption_status_change_handler+0xbc>)
1000c0ea:	4b19      	ldr	r3, [pc, #100]	; (1000c150 <ble_encryption_status_change_handler+0xb8>)
1000c0ec:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_COMPLETED;
1000c0ee:	4914      	ldr	r1, [pc, #80]	; (1000c140 <ble_encryption_status_change_handler+0xa8>)
1000c0f0:	0163      	lsls	r3, r4, #5
1000c0f2:	1b1a      	subs	r2, r3, r4
1000c0f4:	0092      	lsls	r2, r2, #2
1000c0f6:	188a      	adds	r2, r1, r2
1000c0f8:	0010      	movs	r0, r2
1000c0fa:	305e      	adds	r0, #94	; 0x5e
1000c0fc:	2708      	movs	r7, #8
1000c0fe:	7007      	strb	r7, [r0, #0]
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
1000c100:	78f0      	ldrb	r0, [r6, #3]
1000c102:	7510      	strb	r0, [r2, #20]
			ble_dev_info[idx].bond_info.status = enc_status->status;
1000c104:	78b2      	ldrb	r2, [r6, #2]
1000c106:	1b1c      	subs	r4, r3, r4
1000c108:	00a4      	lsls	r4, r4, #2
1000c10a:	190c      	adds	r4, r1, r4
1000c10c:	7622      	strb	r2, [r4, #24]
		ble_dev_info[idx].bond_info.status = enc_status->status;
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
1000c10e:	e014      	b.n	1000c13a <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
1000c110:	78b5      	ldrb	r5, [r6, #2]
1000c112:	2d00      	cmp	r5, #0
1000c114:	d0e5      	beq.n	1000c0e2 <ble_encryption_status_change_handler+0x4a>
1000c116:	e7d2      	b.n	1000c0be <ble_encryption_status_change_handler+0x26>
	{
		DBG_LOG("Encryption completed successfully");
1000c118:	4e0a      	ldr	r6, [pc, #40]	; (1000c144 <ble_encryption_status_change_handler+0xac>)
1000c11a:	0030      	movs	r0, r6
1000c11c:	4d0a      	ldr	r5, [pc, #40]	; (1000c148 <ble_encryption_status_change_handler+0xb0>)
1000c11e:	47a8      	blx	r5
1000c120:	480c      	ldr	r0, [pc, #48]	; (1000c154 <ble_encryption_status_change_handler+0xbc>)
1000c122:	4c0b      	ldr	r4, [pc, #44]	; (1000c150 <ble_encryption_status_change_handler+0xb8>)
1000c124:	47a0      	blx	r4
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
			ble_dev_info[idx].bond_info.status = enc_status->status;
		}
		else
		{
			DBG_LOG("BLE Device not found encryption info");
1000c126:	0030      	movs	r0, r6
1000c128:	47a8      	blx	r5
1000c12a:	480b      	ldr	r0, [pc, #44]	; (1000c158 <ble_encryption_status_change_handler+0xc0>)
1000c12c:	47a0      	blx	r4
			return AT_BLE_FAILURE;
1000c12e:	25e2      	movs	r5, #226	; 0xe2
1000c130:	e003      	b.n	1000c13a <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
1000c132:	78b5      	ldrb	r5, [r6, #2]
1000c134:	2d00      	cmp	r5, #0
1000c136:	d1c2      	bne.n	1000c0be <ble_encryption_status_change_handler+0x26>
1000c138:	e7ee      	b.n	1000c118 <ble_encryption_status_change_handler+0x80>
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
}
1000c13a:	0028      	movs	r0, r5
1000c13c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000c13e:	46c0      	nop			; (mov r8, r8)
1000c140:	10017118 	.word	0x10017118
1000c144:	10013980 	.word	0x10013980
1000c148:	100127d9 	.word	0x100127d9
1000c14c:	10014980 	.word	0x10014980
1000c150:	100126b9 	.word	0x100126b9
1000c154:	10014994 	.word	0x10014994
1000c158:	100149b8 	.word	0x100149b8

1000c15c <ble_scan_info_handler>:
	return found;
}
#endif
/** @brief function handling scaned information */
at_ble_status_t ble_scan_info_handler(void *params)
{
1000c15c:	b530      	push	{r4, r5, lr}
1000c15e:	b085      	sub	sp, #20
1000c160:	0004      	movs	r4, r0
	at_ble_scan_info_t *scan_param;
	scan_param = (at_ble_scan_info_t *)params;
	if(scan_response_count < MAX_SCAN_DEVICE)
1000c162:	4b1f      	ldr	r3, [pc, #124]	; (1000c1e0 <ble_scan_info_handler+0x84>)
1000c164:	781b      	ldrb	r3, [r3, #0]
1000c166:	b2db      	uxtb	r3, r3
1000c168:	2b13      	cmp	r3, #19
1000c16a:	d824      	bhi.n	1000c1b6 <ble_scan_info_handler+0x5a>
	{
		memcpy((uint8_t *)&scan_info[scan_response_count], scan_param, sizeof(at_ble_scan_info_t));
1000c16c:	4d1c      	ldr	r5, [pc, #112]	; (1000c1e0 <ble_scan_info_handler+0x84>)
1000c16e:	782b      	ldrb	r3, [r5, #0]
1000c170:	b2db      	uxtb	r3, r3
1000c172:	0098      	lsls	r0, r3, #2
1000c174:	18c0      	adds	r0, r0, r3
1000c176:	00c0      	lsls	r0, r0, #3
1000c178:	18c3      	adds	r3, r0, r3
1000c17a:	481a      	ldr	r0, [pc, #104]	; (1000c1e4 <ble_scan_info_handler+0x88>)
1000c17c:	1818      	adds	r0, r3, r0
1000c17e:	2229      	movs	r2, #41	; 0x29
1000c180:	0021      	movs	r1, r4
1000c182:	4b19      	ldr	r3, [pc, #100]	; (1000c1e8 <ble_scan_info_handler+0x8c>)
1000c184:	4798      	blx	r3
		DBG_LOG_DEV("Info:Device found address [%d]  0x%02X%02X%02X%02X%02X%02X ",
1000c186:	4819      	ldr	r0, [pc, #100]	; (1000c1ec <ble_scan_info_handler+0x90>)
1000c188:	4b19      	ldr	r3, [pc, #100]	; (1000c1f0 <ble_scan_info_handler+0x94>)
1000c18a:	4798      	blx	r3
1000c18c:	7829      	ldrb	r1, [r5, #0]
1000c18e:	b2c9      	uxtb	r1, r1
1000c190:	79a3      	ldrb	r3, [r4, #6]
1000c192:	79e2      	ldrb	r2, [r4, #7]
1000c194:	78a0      	ldrb	r0, [r4, #2]
1000c196:	9003      	str	r0, [sp, #12]
1000c198:	78e0      	ldrb	r0, [r4, #3]
1000c19a:	9002      	str	r0, [sp, #8]
1000c19c:	7920      	ldrb	r0, [r4, #4]
1000c19e:	9001      	str	r0, [sp, #4]
1000c1a0:	7960      	ldrb	r0, [r4, #5]
1000c1a2:	9000      	str	r0, [sp, #0]
1000c1a4:	4813      	ldr	r0, [pc, #76]	; (1000c1f4 <ble_scan_info_handler+0x98>)
1000c1a6:	4c14      	ldr	r4, [pc, #80]	; (1000c1f8 <ble_scan_info_handler+0x9c>)
1000c1a8:	47a0      	blx	r4
		scan_param->dev_addr.addr[4],
		scan_param->dev_addr.addr[3],
		scan_param->dev_addr.addr[2],
		scan_param->dev_addr.addr[1],
		scan_param->dev_addr.addr[0]);
		scan_response_count++;
1000c1aa:	782b      	ldrb	r3, [r5, #0]
1000c1ac:	3301      	adds	r3, #1
1000c1ae:	b2db      	uxtb	r3, r3
1000c1b0:	702b      	strb	r3, [r5, #0]
		return AT_BLE_SUCCESS;
1000c1b2:	2300      	movs	r3, #0
1000c1b4:	e011      	b.n	1000c1da <ble_scan_info_handler+0x7e>
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
1000c1b6:	480d      	ldr	r0, [pc, #52]	; (1000c1ec <ble_scan_info_handler+0x90>)
1000c1b8:	4b0d      	ldr	r3, [pc, #52]	; (1000c1f0 <ble_scan_info_handler+0x94>)
1000c1ba:	4798      	blx	r3
1000c1bc:	480f      	ldr	r0, [pc, #60]	; (1000c1fc <ble_scan_info_handler+0xa0>)
1000c1be:	4b0e      	ldr	r3, [pc, #56]	; (1000c1f8 <ble_scan_info_handler+0x9c>)
1000c1c0:	4798      	blx	r3
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
1000c1c2:	4b0f      	ldr	r3, [pc, #60]	; (1000c200 <ble_scan_info_handler+0xa4>)
1000c1c4:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
1000c1c6:	23e2      	movs	r3, #226	; 0xe2
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
1000c1c8:	2800      	cmp	r0, #0
1000c1ca:	d006      	beq.n	1000c1da <ble_scan_info_handler+0x7e>
		{
			DBG_LOG("Failed to stop scanning");
1000c1cc:	4807      	ldr	r0, [pc, #28]	; (1000c1ec <ble_scan_info_handler+0x90>)
1000c1ce:	4b08      	ldr	r3, [pc, #32]	; (1000c1f0 <ble_scan_info_handler+0x94>)
1000c1d0:	4798      	blx	r3
1000c1d2:	480c      	ldr	r0, [pc, #48]	; (1000c204 <ble_scan_info_handler+0xa8>)
1000c1d4:	4b08      	ldr	r3, [pc, #32]	; (1000c1f8 <ble_scan_info_handler+0x9c>)
1000c1d6:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
1000c1d8:	23e2      	movs	r3, #226	; 0xe2
	}
}
1000c1da:	0018      	movs	r0, r3
1000c1dc:	b005      	add	sp, #20
1000c1de:	bd30      	pop	{r4, r5, pc}
1000c1e0:	10015d14 	.word	0x10015d14
1000c1e4:	100173fc 	.word	0x100173fc
1000c1e8:	1001255f 	.word	0x1001255f
1000c1ec:	10013980 	.word	0x10013980
1000c1f0:	100127d9 	.word	0x100127d9
1000c1f4:	100149e0 	.word	0x100149e0
1000c1f8:	100126b9 	.word	0x100126b9
1000c1fc:	10014a1c 	.word	0x10014a1c
1000c200:	1000ec15 	.word	0x1000ec15
1000c204:	10014a54 	.word	0x10014a54

1000c208 <ble_pair_done_handler>:
	return AT_BLE_SUCCESS;	
}

/** @brief function handles pair done event */
at_ble_status_t ble_pair_done_handler(void *params)
{
1000c208:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c20a:	465f      	mov	r7, fp
1000c20c:	4656      	mov	r6, sl
1000c20e:	464d      	mov	r5, r9
1000c210:	4644      	mov	r4, r8
1000c212:	b4f0      	push	{r4, r5, r6, r7}
1000c214:	b083      	sub	sp, #12
1000c216:	0005      	movs	r5, r0
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1000c218:	8841      	ldrh	r1, [r0, #2]
1000c21a:	4b59      	ldr	r3, [pc, #356]	; (1000c380 <ble_pair_done_handler+0x178>)
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c21c:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1000c21e:	891a      	ldrh	r2, [r3, #8]
1000c220:	428a      	cmp	r2, r1
1000c222:	d105      	bne.n	1000c230 <ble_pair_done_handler+0x28>
1000c224:	001a      	movs	r2, r3
1000c226:	325e      	adds	r2, #94	; 0x5e
1000c228:	7812      	ldrb	r2, [r2, #0]
1000c22a:	2a03      	cmp	r2, #3
1000c22c:	d100      	bne.n	1000c230 <ble_pair_done_handler+0x28>
1000c22e:	e09a      	b.n	1000c366 <ble_pair_done_handler+0x15e>
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c230:	3401      	adds	r4, #1
1000c232:	b2e4      	uxtb	r4, r4
1000c234:	337c      	adds	r3, #124	; 0x7c
1000c236:	2c05      	cmp	r4, #5
1000c238:	d1f1      	bne.n	1000c21e <ble_pair_done_handler+0x16>
1000c23a:	e057      	b.n	1000c2ec <ble_pair_done_handler+0xe4>
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
			
			DBG_LOG_DEV("LTK: ");
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
1000c23c:	7821      	ldrb	r1, [r4, #0]
1000c23e:	0030      	movs	r0, r6
1000c240:	47b8      	blx	r7
1000c242:	3401      	adds	r4, #1
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
			
			DBG_LOG_DEV("LTK: ");
			for (idx = 0; idx < 16; idx++)
1000c244:	454c      	cmp	r4, r9
1000c246:	d1f9      	bne.n	1000c23c <ble_pair_done_handler+0x34>
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
				
			}
			DBG_LOG_DEV("CSRK: ");
1000c248:	484e      	ldr	r0, [pc, #312]	; (1000c384 <ble_pair_done_handler+0x17c>)
1000c24a:	4b4f      	ldr	r3, [pc, #316]	; (1000c388 <ble_pair_done_handler+0x180>)
1000c24c:	4798      	blx	r3
1000c24e:	484f      	ldr	r0, [pc, #316]	; (1000c38c <ble_pair_done_handler+0x184>)
1000c250:	4b4f      	ldr	r3, [pc, #316]	; (1000c390 <ble_pair_done_handler+0x188>)
1000c252:	4798      	blx	r3
1000c254:	002e      	movs	r6, r5
1000c256:	3622      	adds	r6, #34	; 0x22
1000c258:	002c      	movs	r4, r5
1000c25a:	3432      	adds	r4, #50	; 0x32
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_csrk.key[idx]);
1000c25c:	4f4c      	ldr	r7, [pc, #304]	; (1000c390 <ble_pair_done_handler+0x188>)
1000c25e:	7831      	ldrb	r1, [r6, #0]
1000c260:	484c      	ldr	r0, [pc, #304]	; (1000c394 <ble_pair_done_handler+0x18c>)
1000c262:	47b8      	blx	r7
1000c264:	3601      	adds	r6, #1
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
				
			}
			DBG_LOG_DEV("CSRK: ");
			for (idx = 0; idx < 16; idx++)
1000c266:	42a6      	cmp	r6, r4
1000c268:	d1f9      	bne.n	1000c25e <ble_pair_done_handler+0x56>
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_csrk.key[idx]);
				
			}
			DBG_LOG_DEV("IRK:");
1000c26a:	4846      	ldr	r0, [pc, #280]	; (1000c384 <ble_pair_done_handler+0x17c>)
1000c26c:	4b46      	ldr	r3, [pc, #280]	; (1000c388 <ble_pair_done_handler+0x180>)
1000c26e:	4798      	blx	r3
1000c270:	4849      	ldr	r0, [pc, #292]	; (1000c398 <ble_pair_done_handler+0x190>)
1000c272:	4b47      	ldr	r3, [pc, #284]	; (1000c390 <ble_pair_done_handler+0x188>)
1000c274:	4798      	blx	r3
1000c276:	3542      	adds	r5, #66	; 0x42
1000c278:	002f      	movs	r7, r5
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_irk.key[idx]);
1000c27a:	4e46      	ldr	r6, [pc, #280]	; (1000c394 <ble_pair_done_handler+0x18c>)
1000c27c:	4d44      	ldr	r5, [pc, #272]	; (1000c390 <ble_pair_done_handler+0x188>)
1000c27e:	7821      	ldrb	r1, [r4, #0]
1000c280:	0030      	movs	r0, r6
1000c282:	47a8      	blx	r5
1000c284:	3401      	adds	r4, #1
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_csrk.key[idx]);
				
			}
			DBG_LOG_DEV("IRK:");
			for (idx = 0; idx < 16; idx++)
1000c286:	42bc      	cmp	r4, r7
1000c288:	d1f9      	bne.n	1000c27e <ble_pair_done_handler+0x76>
1000c28a:	e071      	b.n	1000c370 <ble_pair_done_handler+0x168>
			return AT_BLE_FAILURE;
		}		
	}
	else
	{
		if(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE && ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) {
1000c28c:	0163      	lsls	r3, r4, #5
1000c28e:	1b1c      	subs	r4, r3, r4
1000c290:	00a4      	lsls	r4, r4, #2
1000c292:	4b3b      	ldr	r3, [pc, #236]	; (1000c380 <ble_pair_done_handler+0x178>)
1000c294:	191c      	adds	r4, r3, r4
1000c296:	345e      	adds	r4, #94	; 0x5e
1000c298:	7823      	ldrb	r3, [r4, #0]
1000c29a:	2b01      	cmp	r3, #1
1000c29c:	d915      	bls.n	1000c2ca <ble_pair_done_handler+0xc2>
			DBG_LOG("Pairing failed...Disconnecting");
1000c29e:	4839      	ldr	r0, [pc, #228]	; (1000c384 <ble_pair_done_handler+0x17c>)
1000c2a0:	4b39      	ldr	r3, [pc, #228]	; (1000c388 <ble_pair_done_handler+0x180>)
1000c2a2:	4798      	blx	r3
1000c2a4:	483d      	ldr	r0, [pc, #244]	; (1000c39c <ble_pair_done_handler+0x194>)
1000c2a6:	4b3a      	ldr	r3, [pc, #232]	; (1000c390 <ble_pair_done_handler+0x188>)
1000c2a8:	4798      	blx	r3
			if(!(at_ble_disconnect(pairing_params->handle, AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS))
1000c2aa:	8868      	ldrh	r0, [r5, #2]
1000c2ac:	2113      	movs	r1, #19
1000c2ae:	4b3c      	ldr	r3, [pc, #240]	; (1000c3a0 <ble_pair_done_handler+0x198>)
1000c2b0:	4798      	blx	r3
1000c2b2:	9001      	str	r0, [sp, #4]
1000c2b4:	2800      	cmp	r0, #0
1000c2b6:	d05b      	beq.n	1000c370 <ble_pair_done_handler+0x168>
			{
				DBG_LOG("Disconnect Request Failed");
1000c2b8:	4832      	ldr	r0, [pc, #200]	; (1000c384 <ble_pair_done_handler+0x17c>)
1000c2ba:	4b33      	ldr	r3, [pc, #204]	; (1000c388 <ble_pair_done_handler+0x180>)
1000c2bc:	4798      	blx	r3
1000c2be:	4839      	ldr	r0, [pc, #228]	; (1000c3a4 <ble_pair_done_handler+0x19c>)
1000c2c0:	4b33      	ldr	r3, [pc, #204]	; (1000c390 <ble_pair_done_handler+0x188>)
1000c2c2:	4798      	blx	r3
				return AT_BLE_FAILURE;
1000c2c4:	23e2      	movs	r3, #226	; 0xe2
1000c2c6:	9301      	str	r3, [sp, #4]
1000c2c8:	e052      	b.n	1000c370 <ble_pair_done_handler+0x168>
			}
		}
	}
	return AT_BLE_SUCCESS;
1000c2ca:	2300      	movs	r3, #0
1000c2cc:	9301      	str	r3, [sp, #4]
1000c2ce:	e04f      	b.n	1000c370 <ble_pair_done_handler+0x168>
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Pairing procedure completed successfully");
1000c2d0:	4e2c      	ldr	r6, [pc, #176]	; (1000c384 <ble_pair_done_handler+0x17c>)
1000c2d2:	0030      	movs	r0, r6
1000c2d4:	4d2c      	ldr	r5, [pc, #176]	; (1000c388 <ble_pair_done_handler+0x180>)
1000c2d6:	47a8      	blx	r5
1000c2d8:	4833      	ldr	r0, [pc, #204]	; (1000c3a8 <ble_pair_done_handler+0x1a0>)
1000c2da:	4c2d      	ldr	r4, [pc, #180]	; (1000c390 <ble_pair_done_handler+0x188>)
1000c2dc:	47a0      	blx	r4
				
			}
		}
		else
		{
			DBG_LOG("BLE Device not found to store the pairing info");
1000c2de:	0030      	movs	r0, r6
1000c2e0:	47a8      	blx	r5
1000c2e2:	4832      	ldr	r0, [pc, #200]	; (1000c3ac <ble_pair_done_handler+0x1a4>)
1000c2e4:	47a0      	blx	r4
			return AT_BLE_FAILURE;
1000c2e6:	23e2      	movs	r3, #226	; 0xe2
1000c2e8:	9301      	str	r3, [sp, #4]
1000c2ea:	e041      	b.n	1000c370 <ble_pair_done_handler+0x168>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
1000c2ec:	792b      	ldrb	r3, [r5, #4]
1000c2ee:	2b00      	cmp	r3, #0
1000c2f0:	d1cc      	bne.n	1000c28c <ble_pair_done_handler+0x84>
1000c2f2:	e7ed      	b.n	1000c2d0 <ble_pair_done_handler+0xc8>
	{
		DBG_LOG("Pairing procedure completed successfully");
1000c2f4:	4823      	ldr	r0, [pc, #140]	; (1000c384 <ble_pair_done_handler+0x17c>)
1000c2f6:	4b24      	ldr	r3, [pc, #144]	; (1000c388 <ble_pair_done_handler+0x180>)
1000c2f8:	469b      	mov	fp, r3
1000c2fa:	4798      	blx	r3
1000c2fc:	482a      	ldr	r0, [pc, #168]	; (1000c3a8 <ble_pair_done_handler+0x1a0>)
1000c2fe:	4b24      	ldr	r3, [pc, #144]	; (1000c390 <ble_pair_done_handler+0x188>)
1000c300:	469a      	mov	sl, r3
1000c302:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].bond_info.auth = pairing_params->auth;
1000c304:	782a      	ldrb	r2, [r5, #0]
1000c306:	4b1e      	ldr	r3, [pc, #120]	; (1000c380 <ble_pair_done_handler+0x178>)
1000c308:	4698      	mov	r8, r3
1000c30a:	0167      	lsls	r7, r4, #5
1000c30c:	1b3b      	subs	r3, r7, r4
1000c30e:	009b      	lsls	r3, r3, #2
1000c310:	4443      	add	r3, r8
1000c312:	751a      	strb	r2, [r3, #20]
			ble_dev_info[idx].bond_info.status = pairing_params->status;
1000c314:	792a      	ldrb	r2, [r5, #4]
1000c316:	761a      	strb	r2, [r3, #24]
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRED;
1000c318:	335e      	adds	r3, #94	; 0x5e
1000c31a:	2205      	movs	r2, #5
1000c31c:	701a      	strb	r2, [r3, #0]
			
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
1000c31e:	1b38      	subs	r0, r7, r4
1000c320:	0080      	lsls	r0, r0, #2
1000c322:	4440      	add	r0, r8
1000c324:	3036      	adds	r0, #54	; 0x36
1000c326:	320b      	adds	r2, #11
1000c328:	0029      	movs	r1, r5
1000c32a:	3122      	adds	r1, #34	; 0x22
1000c32c:	4b20      	ldr	r3, [pc, #128]	; (1000c3b0 <ble_pair_done_handler+0x1a8>)
1000c32e:	4699      	mov	r9, r3
1000c330:	4798      	blx	r3
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
1000c332:	1b38      	subs	r0, r7, r4
1000c334:	0080      	lsls	r0, r0, #2
1000c336:	4440      	add	r0, r8
1000c338:	3046      	adds	r0, #70	; 0x46
1000c33a:	2217      	movs	r2, #23
1000c33c:	0029      	movs	r1, r5
1000c33e:	3132      	adds	r1, #50	; 0x32
1000c340:	47c8      	blx	r9
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
1000c342:	1b38      	subs	r0, r7, r4
1000c344:	0080      	lsls	r0, r0, #2
1000c346:	4440      	add	r0, r8
1000c348:	301a      	adds	r0, #26
1000c34a:	1dac      	adds	r4, r5, #6
1000c34c:	221c      	movs	r2, #28
1000c34e:	0021      	movs	r1, r4
1000c350:	47c8      	blx	r9
			
			DBG_LOG_DEV("LTK: ");
1000c352:	480c      	ldr	r0, [pc, #48]	; (1000c384 <ble_pair_done_handler+0x17c>)
1000c354:	47d8      	blx	fp
1000c356:	4817      	ldr	r0, [pc, #92]	; (1000c3b4 <ble_pair_done_handler+0x1ac>)
1000c358:	47d0      	blx	sl
1000c35a:	2316      	movs	r3, #22
1000c35c:	4699      	mov	r9, r3
1000c35e:	44a9      	add	r9, r5
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
1000c360:	4e0c      	ldr	r6, [pc, #48]	; (1000c394 <ble_pair_done_handler+0x18c>)
1000c362:	4f0b      	ldr	r7, [pc, #44]	; (1000c390 <ble_pair_done_handler+0x188>)
1000c364:	e76a      	b.n	1000c23c <ble_pair_done_handler+0x34>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
1000c366:	792b      	ldrb	r3, [r5, #4]
1000c368:	9301      	str	r3, [sp, #4]
1000c36a:	2b00      	cmp	r3, #0
1000c36c:	d0c2      	beq.n	1000c2f4 <ble_pair_done_handler+0xec>
1000c36e:	e78d      	b.n	1000c28c <ble_pair_done_handler+0x84>
				return AT_BLE_FAILURE;
			}
		}
	}
	return AT_BLE_SUCCESS;
}
1000c370:	9801      	ldr	r0, [sp, #4]
1000c372:	b003      	add	sp, #12
1000c374:	bc3c      	pop	{r2, r3, r4, r5}
1000c376:	4690      	mov	r8, r2
1000c378:	4699      	mov	r9, r3
1000c37a:	46a2      	mov	sl, r4
1000c37c:	46ab      	mov	fp, r5
1000c37e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c380:	10017118 	.word	0x10017118
1000c384:	10013980 	.word	0x10013980
1000c388:	100127d9 	.word	0x100127d9
1000c38c:	10014a78 	.word	0x10014a78
1000c390:	100126b9 	.word	0x100126b9
1000c394:	10014a6c 	.word	0x10014a6c
1000c398:	10014a80 	.word	0x10014a80
1000c39c:	10014a88 	.word	0x10014a88
1000c3a0:	1000ec35 	.word	0x1000ec35
1000c3a4:	10014aa8 	.word	0x10014aa8
1000c3a8:	10014ac4 	.word	0x10014ac4
1000c3ac:	10014af0 	.word	0x10014af0
1000c3b0:	1001255f 	.word	0x1001255f
1000c3b4:	10014b20 	.word	0x10014b20

1000c3b8 <ble_conn_param_update_req>:
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_conn_param_update_req(void *params)
{
1000c3b8:	b510      	push	{r4, lr}
	at_ble_conn_param_update_request_t * conn_param_req;
	conn_param_req = (at_ble_conn_param_update_request_t *)params;
	at_ble_conn_update_reply(conn_param_req->handle, true, 1, 120);
1000c3ba:	8800      	ldrh	r0, [r0, #0]
1000c3bc:	2378      	movs	r3, #120	; 0x78
1000c3be:	2201      	movs	r2, #1
1000c3c0:	2101      	movs	r1, #1
1000c3c2:	4c02      	ldr	r4, [pc, #8]	; (1000c3cc <ble_conn_param_update_req+0x14>)
1000c3c4:	47a0      	blx	r4
	return AT_BLE_SUCCESS;
}
1000c3c6:	2000      	movs	r0, #0
1000c3c8:	bd10      	pop	{r4, pc}
1000c3ca:	46c0      	nop			; (mov r8, r8)
1000c3cc:	1000ec55 	.word	0x1000ec55

1000c3d0 <ble_slave_security_request_handler>:

at_ble_status_t ble_slave_security_request_handler(void* params)
{
1000c3d0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c3d2:	4657      	mov	r7, sl
1000c3d4:	464e      	mov	r6, r9
1000c3d6:	4645      	mov	r5, r8
1000c3d8:	b4e0      	push	{r5, r6, r7}
1000c3da:	b084      	sub	sp, #16
1000c3dc:	0004      	movs	r4, r0
	uint8_t i = 0, idx;
	at_ble_slave_sec_request_t* slave_sec_req;
	bool device_found = false;
	
	slave_sec_req = (at_ble_slave_sec_request_t*)params;	
	memset(&features, 0x00, sizeof(at_ble_pair_features_t));
1000c3de:	2209      	movs	r2, #9
1000c3e0:	2100      	movs	r1, #0
1000c3e2:	a801      	add	r0, sp, #4
1000c3e4:	4b6a      	ldr	r3, [pc, #424]	; (1000c590 <ble_slave_security_request_handler+0x1c0>)
1000c3e6:	4798      	blx	r3
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000c3e8:	8825      	ldrh	r5, [r4, #0]
1000c3ea:	496a      	ldr	r1, [pc, #424]	; (1000c594 <ble_slave_security_request_handler+0x1c4>)
1000c3ec:	000a      	movs	r2, r1
1000c3ee:	2300      	movs	r3, #0
1000c3f0:	8910      	ldrh	r0, [r2, #8]
1000c3f2:	42a8      	cmp	r0, r5
1000c3f4:	d116      	bne.n	1000c424 <ble_slave_security_request_handler+0x54>
1000c3f6:	0010      	movs	r0, r2
1000c3f8:	305e      	adds	r0, #94	; 0x5e
1000c3fa:	7800      	ldrb	r0, [r0, #0]
1000c3fc:	2802      	cmp	r0, #2
1000c3fe:	d111      	bne.n	1000c424 <ble_slave_security_request_handler+0x54>
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000c400:	4864      	ldr	r0, [pc, #400]	; (1000c594 <ble_slave_security_request_handler+0x1c4>)
1000c402:	015a      	lsls	r2, r3, #5
1000c404:	1ad6      	subs	r6, r2, r3
1000c406:	00b6      	lsls	r6, r6, #2
1000c408:	1986      	adds	r6, r0, r6
1000c40a:	365e      	adds	r6, #94	; 0x5e
1000c40c:	2206      	movs	r2, #6
1000c40e:	7032      	strb	r2, [r6, #0]
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
1000c410:	32f9      	adds	r2, #249	; 0xf9
1000c412:	4013      	ands	r3, r2
1000c414:	015a      	lsls	r2, r3, #5
1000c416:	1ad2      	subs	r2, r2, r3
1000c418:	0092      	lsls	r2, r2, #2
1000c41a:	1882      	adds	r2, r0, r2
1000c41c:	7d12      	ldrb	r2, [r2, #20]
1000c41e:	07d0      	lsls	r0, r2, #31
1000c420:	d405      	bmi.n	1000c42e <ble_slave_security_request_handler+0x5e>
1000c422:	e01b      	b.n	1000c45c <ble_slave_security_request_handler+0x8c>
1000c424:	3301      	adds	r3, #1
1000c426:	327c      	adds	r2, #124	; 0x7c
		//at_ble_disconnect(slave_sec_req->handle, AT_BLE_AUTH_FAILURE);		
		//return AT_BLE_FAILURE;
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c428:	2b05      	cmp	r3, #5
1000c42a:	d1e1      	bne.n	1000c3f0 <ble_slave_security_request_handler+0x20>
1000c42c:	e01e      	b.n	1000c46c <ble_slave_security_request_handler+0x9c>
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
1000c42e:	78e0      	ldrb	r0, [r4, #3]
1000c430:	2800      	cmp	r0, #0
1000c432:	d013      	beq.n	1000c45c <ble_slave_security_request_handler+0x8c>
		{
			if(at_ble_encryption_start(slave_sec_req->handle, &ble_dev_info[idx].bond_info.peer_ltk, ble_dev_info[idx].bond_info.auth) == AT_BLE_SUCCESS)
1000c434:	0159      	lsls	r1, r3, #5
1000c436:	1ac9      	subs	r1, r1, r3
1000c438:	008b      	lsls	r3, r1, #2
1000c43a:	4956      	ldr	r1, [pc, #344]	; (1000c594 <ble_slave_security_request_handler+0x1c4>)
1000c43c:	18c9      	adds	r1, r1, r3
1000c43e:	311a      	adds	r1, #26
1000c440:	8820      	ldrh	r0, [r4, #0]
1000c442:	4b55      	ldr	r3, [pc, #340]	; (1000c598 <ble_slave_security_request_handler+0x1c8>)
1000c444:	4798      	blx	r3
1000c446:	2800      	cmp	r0, #0
1000c448:	d100      	bne.n	1000c44c <ble_slave_security_request_handler+0x7c>
1000c44a:	e09b      	b.n	1000c584 <ble_slave_security_request_handler+0x1b4>
			{
				return  AT_BLE_SUCCESS;
			}
			else
			{
				DBG_LOG("Encryption Not started");
1000c44c:	4853      	ldr	r0, [pc, #332]	; (1000c59c <ble_slave_security_request_handler+0x1cc>)
1000c44e:	4b54      	ldr	r3, [pc, #336]	; (1000c5a0 <ble_slave_security_request_handler+0x1d0>)
1000c450:	4798      	blx	r3
1000c452:	4854      	ldr	r0, [pc, #336]	; (1000c5a4 <ble_slave_security_request_handler+0x1d4>)
1000c454:	4b54      	ldr	r3, [pc, #336]	; (1000c5a8 <ble_slave_security_request_handler+0x1d8>)
1000c456:	4798      	blx	r3
				return AT_BLE_FAILURE;
1000c458:	20e2      	movs	r0, #226	; 0xe2
1000c45a:	e093      	b.n	1000c584 <ble_slave_security_request_handler+0x1b4>
			}			
		}
		else
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000c45c:	015a      	lsls	r2, r3, #5
1000c45e:	1ad3      	subs	r3, r2, r3
1000c460:	009b      	lsls	r3, r3, #2
1000c462:	4a4c      	ldr	r2, [pc, #304]	; (1000c594 <ble_slave_security_request_handler+0x1c4>)
1000c464:	18d3      	adds	r3, r2, r3
1000c466:	335e      	adds	r3, #94	; 0x5e
1000c468:	2202      	movs	r2, #2
1000c46a:	701a      	strb	r2, [r3, #0]
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000c46c:	8825      	ldrh	r5, [r4, #0]
1000c46e:	2200      	movs	r2, #0
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c470:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000c472:	0016      	movs	r6, r2
1000c474:	8908      	ldrh	r0, [r1, #8]
1000c476:	42a8      	cmp	r0, r5
1000c478:	d10d      	bne.n	1000c496 <ble_slave_security_request_handler+0xc6>
1000c47a:	0008      	movs	r0, r1
1000c47c:	305e      	adds	r0, #94	; 0x5e
1000c47e:	7800      	ldrb	r0, [r0, #0]
1000c480:	2802      	cmp	r0, #2
1000c482:	d108      	bne.n	1000c496 <ble_slave_security_request_handler+0xc6>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000c484:	0152      	lsls	r2, r2, #5
1000c486:	1b92      	subs	r2, r2, r6
1000c488:	0096      	lsls	r6, r2, #2
1000c48a:	4a42      	ldr	r2, [pc, #264]	; (1000c594 <ble_slave_security_request_handler+0x1c4>)
1000c48c:	1992      	adds	r2, r2, r6
1000c48e:	325e      	adds	r2, #94	; 0x5e
1000c490:	2103      	movs	r1, #3
1000c492:	7011      	strb	r1, [r2, #0]
			break;
1000c494:	e005      	b.n	1000c4a2 <ble_slave_security_request_handler+0xd2>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c496:	3301      	adds	r3, #1
1000c498:	b2db      	uxtb	r3, r3
1000c49a:	3201      	adds	r2, #1
1000c49c:	317c      	adds	r1, #124	; 0x7c
1000c49e:	2b05      	cmp	r3, #5
1000c4a0:	d1e7      	bne.n	1000c472 <ble_slave_security_request_handler+0xa2>
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
	features.bond = slave_sec_req->bond;
1000c4a2:	aa01      	add	r2, sp, #4
1000c4a4:	78e1      	ldrb	r1, [r4, #3]
1000c4a6:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = true;
1000c4a8:	2101      	movs	r1, #1
1000c4aa:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = AT_BLE_IO_CAP_KB_DISPLAY;
1000c4ac:	3103      	adds	r1, #3
1000c4ae:	7011      	strb	r1, [r2, #0]

	features.oob_avaiable = false;
			
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000c4b0:	001f      	movs	r7, r3
1000c4b2:	015a      	lsls	r2, r3, #5
1000c4b4:	1ad2      	subs	r2, r2, r3
1000c4b6:	0092      	lsls	r2, r2, #2
1000c4b8:	4936      	ldr	r1, [pc, #216]	; (1000c594 <ble_slave_security_request_handler+0x1c4>)
1000c4ba:	5c52      	ldrb	r2, [r2, r1]
1000c4bc:	2a02      	cmp	r2, #2
1000c4be:	d104      	bne.n	1000c4ca <ble_slave_security_request_handler+0xfa>
	{
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000c4c0:	aa01      	add	r2, sp, #4
1000c4c2:	2103      	movs	r1, #3
1000c4c4:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000c4c6:	71d1      	strb	r1, [r2, #7]
1000c4c8:	e003      	b.n	1000c4d2 <ble_slave_security_request_handler+0x102>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000c4ca:	aa01      	add	r2, sp, #4
1000c4cc:	2101      	movs	r1, #1
1000c4ce:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000c4d0:	71d1      	strb	r1, [r2, #7]
	}
	features.max_key_size = 16;
1000c4d2:	aa01      	add	r2, sp, #4
1000c4d4:	2110      	movs	r1, #16
1000c4d6:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
1000c4d8:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000c4da:	017a      	lsls	r2, r7, #5
1000c4dc:	1bd2      	subs	r2, r2, r7
1000c4de:	0092      	lsls	r2, r2, #2
1000c4e0:	492c      	ldr	r1, [pc, #176]	; (1000c594 <ble_slave_security_request_handler+0x1c4>)
1000c4e2:	188a      	adds	r2, r1, r2
1000c4e4:	7e12      	ldrb	r2, [r2, #24]
1000c4e6:	2a40      	cmp	r2, #64	; 0x40
1000c4e8:	d134      	bne.n	1000c554 <ble_slave_security_request_handler+0x184>
1000c4ea:	015a      	lsls	r2, r3, #5
1000c4ec:	1ad3      	subs	r3, r2, r3
1000c4ee:	009b      	lsls	r3, r3, #2
1000c4f0:	469a      	mov	sl, r3
1000c4f2:	001e      	movs	r6, r3
1000c4f4:	3660      	adds	r6, #96	; 0x60
1000c4f6:	1876      	adds	r6, r6, r1
1000c4f8:	4655      	mov	r5, sl
1000c4fa:	3568      	adds	r5, #104	; 0x68
1000c4fc:	186d      	adds	r5, r5, r1
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000c4fe:	4b2b      	ldr	r3, [pc, #172]	; (1000c5ac <ble_slave_security_request_handler+0x1dc>)
1000c500:	4699      	mov	r9, r3
1000c502:	230f      	movs	r3, #15
1000c504:	4698      	mov	r8, r3
1000c506:	47c8      	blx	r9
1000c508:	4643      	mov	r3, r8
1000c50a:	4018      	ands	r0, r3
1000c50c:	7030      	strb	r0, [r6, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000c50e:	47c8      	blx	r9
1000c510:	4643      	mov	r3, r8
1000c512:	4018      	ands	r0, r3
1000c514:	74b0      	strb	r0, [r6, #18]
1000c516:	3601      	adds	r6, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000c518:	42ae      	cmp	r6, r5
1000c51a:	d1f4      	bne.n	1000c506 <ble_slave_security_request_handler+0x136>
1000c51c:	4656      	mov	r6, sl
1000c51e:	3670      	adds	r6, #112	; 0x70
1000c520:	4a1c      	ldr	r2, [pc, #112]	; (1000c594 <ble_slave_security_request_handler+0x1c4>)
1000c522:	18b6      	adds	r6, r6, r2
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000c524:	4b21      	ldr	r3, [pc, #132]	; (1000c5ac <ble_slave_security_request_handler+0x1dc>)
1000c526:	4699      	mov	r9, r3
1000c528:	230f      	movs	r3, #15
1000c52a:	4698      	mov	r8, r3
1000c52c:	47c8      	blx	r9
1000c52e:	4643      	mov	r3, r8
1000c530:	4018      	ands	r0, r3
1000c532:	7028      	strb	r0, [r5, #0]
1000c534:	3501      	adds	r5, #1
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000c536:	42b5      	cmp	r5, r6
1000c538:	d1f8      	bne.n	1000c52c <ble_slave_security_request_handler+0x15c>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000c53a:	4b1c      	ldr	r3, [pc, #112]	; (1000c5ac <ble_slave_security_request_handler+0x1dc>)
1000c53c:	4798      	blx	r3
1000c53e:	017b      	lsls	r3, r7, #5
1000c540:	1bdb      	subs	r3, r3, r7
1000c542:	009b      	lsls	r3, r3, #2
1000c544:	4a13      	ldr	r2, [pc, #76]	; (1000c594 <ble_slave_security_request_handler+0x1c4>)
1000c546:	18d3      	adds	r3, r2, r3
1000c548:	001a      	movs	r2, r3
1000c54a:	3270      	adds	r2, #112	; 0x70
1000c54c:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000c54e:	337a      	adds	r3, #122	; 0x7a
1000c550:	2210      	movs	r2, #16
1000c552:	701a      	strb	r2, [r3, #0]
	{
		/* Bonding information already exists */
		
	}

	if(at_ble_authenticate(slave_sec_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000c554:	017a      	lsls	r2, r7, #5
1000c556:	1bd7      	subs	r7, r2, r7
1000c558:	00bf      	lsls	r7, r7, #2
1000c55a:	3760      	adds	r7, #96	; 0x60
1000c55c:	4a0d      	ldr	r2, [pc, #52]	; (1000c594 <ble_slave_security_request_handler+0x1c4>)
1000c55e:	18ba      	adds	r2, r7, r2
1000c560:	8820      	ldrh	r0, [r4, #0]
1000c562:	2300      	movs	r3, #0
1000c564:	a901      	add	r1, sp, #4
1000c566:	4c12      	ldr	r4, [pc, #72]	; (1000c5b0 <ble_slave_security_request_handler+0x1e0>)
1000c568:	47a0      	blx	r4
1000c56a:	2800      	cmp	r0, #0
1000c56c:	d00a      	beq.n	1000c584 <ble_slave_security_request_handler+0x1b4>
	{
		features.bond = false;
1000c56e:	ab01      	add	r3, sp, #4
1000c570:	2200      	movs	r2, #0
1000c572:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000c574:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Slave Security Req - Authentication Failed");
1000c576:	4809      	ldr	r0, [pc, #36]	; (1000c59c <ble_slave_security_request_handler+0x1cc>)
1000c578:	4b09      	ldr	r3, [pc, #36]	; (1000c5a0 <ble_slave_security_request_handler+0x1d0>)
1000c57a:	4798      	blx	r3
1000c57c:	480d      	ldr	r0, [pc, #52]	; (1000c5b4 <ble_slave_security_request_handler+0x1e4>)
1000c57e:	4b0a      	ldr	r3, [pc, #40]	; (1000c5a8 <ble_slave_security_request_handler+0x1d8>)
1000c580:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000c582:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000c584:	b004      	add	sp, #16
1000c586:	bc1c      	pop	{r2, r3, r4}
1000c588:	4690      	mov	r8, r2
1000c58a:	4699      	mov	r9, r3
1000c58c:	46a2      	mov	sl, r4
1000c58e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c590:	10012571 	.word	0x10012571
1000c594:	10017118 	.word	0x10017118
1000c598:	1000f7a5 	.word	0x1000f7a5
1000c59c:	10013980 	.word	0x10013980
1000c5a0:	100127d9 	.word	0x100127d9
1000c5a4:	10014b28 	.word	0x10014b28
1000c5a8:	100126b9 	.word	0x100126b9
1000c5ac:	100127ed 	.word	0x100127ed
1000c5b0:	1000f5b9 	.word	0x1000f5b9
1000c5b4:	10014b40 	.word	0x10014b40

1000c5b8 <ble_pair_request_handler>:

/** @brief function handles pair request */
at_ble_status_t ble_pair_request_handler(void *params)
{
1000c5b8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c5ba:	465f      	mov	r7, fp
1000c5bc:	4656      	mov	r6, sl
1000c5be:	464d      	mov	r5, r9
1000c5c0:	4644      	mov	r4, r8
1000c5c2:	b4f0      	push	{r4, r5, r6, r7}
1000c5c4:	b085      	sub	sp, #20
1000c5c6:	4680      	mov	r8, r0
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000c5c8:	8804      	ldrh	r4, [r0, #0]
1000c5ca:	4a54      	ldr	r2, [pc, #336]	; (1000c71c <ble_pair_request_handler+0x164>)
1000c5cc:	2100      	movs	r1, #0
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c5ce:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000c5d0:	8910      	ldrh	r0, [r2, #8]
1000c5d2:	42a0      	cmp	r0, r4
1000c5d4:	d10d      	bne.n	1000c5f2 <ble_pair_request_handler+0x3a>
1000c5d6:	0010      	movs	r0, r2
1000c5d8:	305e      	adds	r0, #94	; 0x5e
1000c5da:	7800      	ldrb	r0, [r0, #0]
1000c5dc:	2802      	cmp	r0, #2
1000c5de:	d108      	bne.n	1000c5f2 <ble_pair_request_handler+0x3a>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000c5e0:	014a      	lsls	r2, r1, #5
1000c5e2:	1a52      	subs	r2, r2, r1
1000c5e4:	0095      	lsls	r5, r2, #2
1000c5e6:	4a4d      	ldr	r2, [pc, #308]	; (1000c71c <ble_pair_request_handler+0x164>)
1000c5e8:	1952      	adds	r2, r2, r5
1000c5ea:	325e      	adds	r2, #94	; 0x5e
1000c5ec:	2103      	movs	r1, #3
1000c5ee:	7011      	strb	r1, [r2, #0]
			break;
1000c5f0:	e005      	b.n	1000c5fe <ble_pair_request_handler+0x46>
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c5f2:	3301      	adds	r3, #1
1000c5f4:	b2db      	uxtb	r3, r3
1000c5f6:	3101      	adds	r1, #1
1000c5f8:	327c      	adds	r2, #124	; 0x7c
1000c5fa:	2b05      	cmp	r3, #5
1000c5fc:	d1e8      	bne.n	1000c5d0 <ble_pair_request_handler+0x18>
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
1000c5fe:	aa01      	add	r2, sp, #4
1000c600:	2100      	movs	r1, #0
1000c602:	7211      	strb	r1, [r2, #8]
	features.bond = BLE_BOND_REQ;
1000c604:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = BLE_MITM_REQ;
1000c606:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = BLE_IO_CAPABALITIES;
1000c608:	2003      	movs	r0, #3
1000c60a:	7010      	strb	r0, [r2, #0]
	features.oob_avaiable = BLE_OOB_REQ;
1000c60c:	70d1      	strb	r1, [r2, #3]
	
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000c60e:	001e      	movs	r6, r3
1000c610:	015a      	lsls	r2, r3, #5
1000c612:	1ad2      	subs	r2, r2, r3
1000c614:	0092      	lsls	r2, r2, #2
1000c616:	4941      	ldr	r1, [pc, #260]	; (1000c71c <ble_pair_request_handler+0x164>)
1000c618:	5c52      	ldrb	r2, [r2, r1]
1000c61a:	2a02      	cmp	r2, #2
1000c61c:	d104      	bne.n	1000c628 <ble_pair_request_handler+0x70>
	{
		/* Distribution of IRK is required */
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000c61e:	aa01      	add	r2, sp, #4
1000c620:	2103      	movs	r1, #3
1000c622:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000c624:	71d1      	strb	r1, [r2, #7]
1000c626:	e003      	b.n	1000c630 <ble_pair_request_handler+0x78>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000c628:	aa01      	add	r2, sp, #4
1000c62a:	2101      	movs	r1, #1
1000c62c:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000c62e:	71d1      	strb	r1, [r2, #7]
	}
			
	features.max_key_size = 16;
1000c630:	aa01      	add	r2, sp, #4
1000c632:	2110      	movs	r1, #16
1000c634:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
1000c636:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000c638:	0172      	lsls	r2, r6, #5
1000c63a:	1b92      	subs	r2, r2, r6
1000c63c:	0092      	lsls	r2, r2, #2
1000c63e:	4937      	ldr	r1, [pc, #220]	; (1000c71c <ble_pair_request_handler+0x164>)
1000c640:	188a      	adds	r2, r1, r2
1000c642:	7e12      	ldrb	r2, [r2, #24]
1000c644:	2a40      	cmp	r2, #64	; 0x40
1000c646:	d142      	bne.n	1000c6ce <ble_pair_request_handler+0x116>
1000c648:	015f      	lsls	r7, r3, #5
1000c64a:	1afb      	subs	r3, r7, r3
1000c64c:	009b      	lsls	r3, r3, #2
1000c64e:	469b      	mov	fp, r3
1000c650:	001c      	movs	r4, r3
1000c652:	3460      	adds	r4, #96	; 0x60
1000c654:	1864      	adds	r4, r4, r1
1000c656:	465d      	mov	r5, fp
1000c658:	3568      	adds	r5, #104	; 0x68
1000c65a:	186d      	adds	r5, r5, r1
1000c65c:	0027      	movs	r7, r4
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000c65e:	4b30      	ldr	r3, [pc, #192]	; (1000c720 <ble_pair_request_handler+0x168>)
1000c660:	469a      	mov	sl, r3
1000c662:	230f      	movs	r3, #15
1000c664:	4699      	mov	r9, r3
1000c666:	47d0      	blx	sl
1000c668:	464b      	mov	r3, r9
1000c66a:	4018      	ands	r0, r3
1000c66c:	7038      	strb	r0, [r7, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000c66e:	47d0      	blx	sl
1000c670:	464b      	mov	r3, r9
1000c672:	4018      	ands	r0, r3
1000c674:	74b8      	strb	r0, [r7, #18]
1000c676:	3701      	adds	r7, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000c678:	42af      	cmp	r7, r5
1000c67a:	d1f4      	bne.n	1000c666 <ble_pair_request_handler+0xae>
1000c67c:	465b      	mov	r3, fp
1000c67e:	3370      	adds	r3, #112	; 0x70
1000c680:	4f26      	ldr	r7, [pc, #152]	; (1000c71c <ble_pair_request_handler+0x164>)
1000c682:	19df      	adds	r7, r3, r7
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000c684:	4b26      	ldr	r3, [pc, #152]	; (1000c720 <ble_pair_request_handler+0x168>)
1000c686:	469a      	mov	sl, r3
1000c688:	230f      	movs	r3, #15
1000c68a:	4699      	mov	r9, r3
1000c68c:	47d0      	blx	sl
1000c68e:	464b      	mov	r3, r9
1000c690:	4018      	ands	r0, r3
1000c692:	7028      	strb	r0, [r5, #0]
1000c694:	3501      	adds	r5, #1
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000c696:	42bd      	cmp	r5, r7
1000c698:	d1f8      	bne.n	1000c68c <ble_pair_request_handler+0xd4>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		DBG_LOG_DEV("Generated LTK: ");
1000c69a:	4822      	ldr	r0, [pc, #136]	; (1000c724 <ble_pair_request_handler+0x16c>)
1000c69c:	4b22      	ldr	r3, [pc, #136]	; (1000c728 <ble_pair_request_handler+0x170>)
1000c69e:	4798      	blx	r3
1000c6a0:	4822      	ldr	r0, [pc, #136]	; (1000c72c <ble_pair_request_handler+0x174>)
1000c6a2:	4b23      	ldr	r3, [pc, #140]	; (1000c730 <ble_pair_request_handler+0x178>)
1000c6a4:	4798      	blx	r3
		for (i = 0; i < 16; i++)
		{
			DBG_LOG_CONT_DEV("0x%02X ", ble_dev_info[idx].host_ltk.key[i]);
1000c6a6:	4d22      	ldr	r5, [pc, #136]	; (1000c730 <ble_pair_request_handler+0x178>)
1000c6a8:	7821      	ldrb	r1, [r4, #0]
1000c6aa:	4822      	ldr	r0, [pc, #136]	; (1000c734 <ble_pair_request_handler+0x17c>)
1000c6ac:	47a8      	blx	r5
1000c6ae:	3401      	adds	r4, #1
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		DBG_LOG_DEV("Generated LTK: ");
		for (i = 0; i < 16; i++)
1000c6b0:	42bc      	cmp	r4, r7
1000c6b2:	d1f9      	bne.n	1000c6a8 <ble_pair_request_handler+0xf0>
		{
			DBG_LOG_CONT_DEV("0x%02X ", ble_dev_info[idx].host_ltk.key[i]);
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000c6b4:	4b1a      	ldr	r3, [pc, #104]	; (1000c720 <ble_pair_request_handler+0x168>)
1000c6b6:	4798      	blx	r3
1000c6b8:	0173      	lsls	r3, r6, #5
1000c6ba:	1b9b      	subs	r3, r3, r6
1000c6bc:	009b      	lsls	r3, r3, #2
1000c6be:	4a17      	ldr	r2, [pc, #92]	; (1000c71c <ble_pair_request_handler+0x164>)
1000c6c0:	18d3      	adds	r3, r2, r3
1000c6c2:	001a      	movs	r2, r3
1000c6c4:	3270      	adds	r2, #112	; 0x70
1000c6c6:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000c6c8:	337a      	adds	r3, #122	; 0x7a
1000c6ca:	2210      	movs	r2, #16
1000c6cc:	701a      	strb	r2, [r3, #0]
		/* Bonding information already exists */
		
	}

	/* Send pairing response */
	DBG_LOG_DEV("Sending pairing response");
1000c6ce:	4815      	ldr	r0, [pc, #84]	; (1000c724 <ble_pair_request_handler+0x16c>)
1000c6d0:	4b15      	ldr	r3, [pc, #84]	; (1000c728 <ble_pair_request_handler+0x170>)
1000c6d2:	4798      	blx	r3
1000c6d4:	4818      	ldr	r0, [pc, #96]	; (1000c738 <ble_pair_request_handler+0x180>)
1000c6d6:	4b16      	ldr	r3, [pc, #88]	; (1000c730 <ble_pair_request_handler+0x178>)
1000c6d8:	4798      	blx	r3

	if(at_ble_authenticate(pair_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000c6da:	0173      	lsls	r3, r6, #5
1000c6dc:	1b9b      	subs	r3, r3, r6
1000c6de:	009b      	lsls	r3, r3, #2
1000c6e0:	3360      	adds	r3, #96	; 0x60
1000c6e2:	4a0e      	ldr	r2, [pc, #56]	; (1000c71c <ble_pair_request_handler+0x164>)
1000c6e4:	189a      	adds	r2, r3, r2
1000c6e6:	4643      	mov	r3, r8
1000c6e8:	8818      	ldrh	r0, [r3, #0]
1000c6ea:	2300      	movs	r3, #0
1000c6ec:	a901      	add	r1, sp, #4
1000c6ee:	4c13      	ldr	r4, [pc, #76]	; (1000c73c <ble_pair_request_handler+0x184>)
1000c6f0:	47a0      	blx	r4
1000c6f2:	2800      	cmp	r0, #0
1000c6f4:	d00a      	beq.n	1000c70c <ble_pair_request_handler+0x154>
	{
		features.bond = false;
1000c6f6:	ab01      	add	r3, sp, #4
1000c6f8:	2200      	movs	r2, #0
1000c6fa:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000c6fc:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Pair Request - Authentication Failed");
1000c6fe:	4809      	ldr	r0, [pc, #36]	; (1000c724 <ble_pair_request_handler+0x16c>)
1000c700:	4b09      	ldr	r3, [pc, #36]	; (1000c728 <ble_pair_request_handler+0x170>)
1000c702:	4798      	blx	r3
1000c704:	480e      	ldr	r0, [pc, #56]	; (1000c740 <ble_pair_request_handler+0x188>)
1000c706:	4b0a      	ldr	r3, [pc, #40]	; (1000c730 <ble_pair_request_handler+0x178>)
1000c708:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000c70a:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000c70c:	b005      	add	sp, #20
1000c70e:	bc3c      	pop	{r2, r3, r4, r5}
1000c710:	4690      	mov	r8, r2
1000c712:	4699      	mov	r9, r3
1000c714:	46a2      	mov	sl, r4
1000c716:	46ab      	mov	fp, r5
1000c718:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c71a:	46c0      	nop			; (mov r8, r8)
1000c71c:	10017118 	.word	0x10017118
1000c720:	100127ed 	.word	0x100127ed
1000c724:	10013980 	.word	0x10013980
1000c728:	100127d9 	.word	0x100127d9
1000c72c:	10014b6c 	.word	0x10014b6c
1000c730:	100126b9 	.word	0x100126b9
1000c734:	10014b7c 	.word	0x10014b7c
1000c738:	10014b84 	.word	0x10014b84
1000c73c:	1000f5b9 	.word	0x1000f5b9
1000c740:	10014ba0 	.word	0x10014ba0

1000c744 <ble_pair_key_request_handler>:

/** @brief function handles pair key request */
at_ble_status_t ble_pair_key_request_handler (void *params)
{
1000c744:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c746:	b085      	sub	sp, #20
1000c748:	0005      	movs	r5, r0
	at_ble_pair_key_request_t *pair_key;
	pair_key = (at_ble_pair_key_request_t *)params;
	/* Passkey has fixed value in this example MSB */
	uint8_t passkey[6]={'1','2','3','4','5','6'};
1000c74a:	2206      	movs	r2, #6
1000c74c:	493d      	ldr	r1, [pc, #244]	; (1000c844 <ble_pair_key_request_handler+0x100>)
1000c74e:	a802      	add	r0, sp, #8
1000c750:	4e3d      	ldr	r6, [pc, #244]	; (1000c848 <ble_pair_key_request_handler+0x104>)
1000c752:	47b0      	blx	r6
	uint8_t idx = 0;
        uint8_t pin;
        
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
1000c754:	ac01      	add	r4, sp, #4
1000c756:	2204      	movs	r2, #4
1000c758:	0029      	movs	r1, r5
1000c75a:	0020      	movs	r0, r4
1000c75c:	47b0      	blx	r6
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
1000c75e:	78e3      	ldrb	r3, [r4, #3]
1000c760:	2b00      	cmp	r3, #0
1000c762:	d162      	bne.n	1000c82a <ble_pair_key_request_handler+0xe6>
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000c764:	4839      	ldr	r0, [pc, #228]	; (1000c84c <ble_pair_key_request_handler+0x108>)
1000c766:	4b3a      	ldr	r3, [pc, #232]	; (1000c850 <ble_pair_key_request_handler+0x10c>)
1000c768:	4798      	blx	r3
1000c76a:	483a      	ldr	r0, [pc, #232]	; (1000c854 <ble_pair_key_request_handler+0x110>)
1000c76c:	4b3a      	ldr	r3, [pc, #232]	; (1000c858 <ble_pair_key_request_handler+0x114>)
1000c76e:	4798      	blx	r3
1000c770:	2600      	movs	r6, #0
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000c772:	4c3a      	ldr	r4, [pc, #232]	; (1000c85c <ble_pair_key_request_handler+0x118>)
				return AT_BLE_FAILURE;
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
			  passkey[idx++] = pin;
			  DBG_LOG_CONT("%c", pin);
1000c774:	27ff      	movs	r7, #255	; 0xff
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000c776:	201e      	movs	r0, #30
1000c778:	47a0      	blx	r4
1000c77a:	b2c3      	uxtb	r3, r0

			if (!pin) {
1000c77c:	2b00      	cmp	r3, #0
1000c77e:	d11a      	bne.n	1000c7b6 <ble_pair_key_request_handler+0x72>
			DBG_LOG("Pin Timeout");
1000c780:	4f32      	ldr	r7, [pc, #200]	; (1000c84c <ble_pair_key_request_handler+0x108>)
1000c782:	0038      	movs	r0, r7
1000c784:	4e32      	ldr	r6, [pc, #200]	; (1000c850 <ble_pair_key_request_handler+0x10c>)
1000c786:	47b0      	blx	r6
1000c788:	4835      	ldr	r0, [pc, #212]	; (1000c860 <ble_pair_key_request_handler+0x11c>)
1000c78a:	4c33      	ldr	r4, [pc, #204]	; (1000c858 <ble_pair_key_request_handler+0x114>)
1000c78c:	47a0      	blx	r4
				DBG_LOG("Disconnecting ...");
1000c78e:	0038      	movs	r0, r7
1000c790:	47b0      	blx	r6
1000c792:	4834      	ldr	r0, [pc, #208]	; (1000c864 <ble_pair_key_request_handler+0x120>)
1000c794:	47a0      	blx	r4
				if (!(at_ble_disconnect(pair_key->handle,
1000c796:	8828      	ldrh	r0, [r5, #0]
1000c798:	2113      	movs	r1, #19
1000c79a:	4b33      	ldr	r3, [pc, #204]	; (1000c868 <ble_pair_key_request_handler+0x124>)
1000c79c:	4798      	blx	r3
1000c79e:	0003      	movs	r3, r0
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
				}
				return AT_BLE_FAILURE;
1000c7a0:	20e2      	movs	r0, #226	; 0xe2
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);

			if (!pin) {
			DBG_LOG("Pin Timeout");
				DBG_LOG("Disconnecting ...");
				if (!(at_ble_disconnect(pair_key->handle,
1000c7a2:	2b00      	cmp	r3, #0
1000c7a4:	d04c      	beq.n	1000c840 <ble_pair_key_request_handler+0xfc>
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
1000c7a6:	4829      	ldr	r0, [pc, #164]	; (1000c84c <ble_pair_key_request_handler+0x108>)
1000c7a8:	4b29      	ldr	r3, [pc, #164]	; (1000c850 <ble_pair_key_request_handler+0x10c>)
1000c7aa:	4798      	blx	r3
1000c7ac:	482f      	ldr	r0, [pc, #188]	; (1000c86c <ble_pair_key_request_handler+0x128>)
1000c7ae:	4b2a      	ldr	r3, [pc, #168]	; (1000c858 <ble_pair_key_request_handler+0x114>)
1000c7b0:	4798      	blx	r3
				}
				return AT_BLE_FAILURE;
1000c7b2:	20e2      	movs	r0, #226	; 0xe2
1000c7b4:	e044      	b.n	1000c840 <ble_pair_key_request_handler+0xfc>
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
1000c7b6:	001a      	movs	r2, r3
1000c7b8:	3a30      	subs	r2, #48	; 0x30
1000c7ba:	2a09      	cmp	r2, #9
1000c7bc:	d8db      	bhi.n	1000c776 <ble_pair_key_request_handler+0x32>
			  passkey[idx++] = pin;
1000c7be:	aa02      	add	r2, sp, #8
1000c7c0:	54b3      	strb	r3, [r6, r2]
			  DBG_LOG_CONT("%c", pin);
1000c7c2:	4038      	ands	r0, r7
1000c7c4:	4b2a      	ldr	r3, [pc, #168]	; (1000c870 <ble_pair_key_request_handler+0x12c>)
1000c7c6:	4798      	blx	r3
1000c7c8:	3601      	adds	r6, #1
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
1000c7ca:	2e06      	cmp	r6, #6
1000c7cc:	d026      	beq.n	1000c81c <ble_pair_key_request_handler+0xd8>
1000c7ce:	e7d2      	b.n	1000c776 <ble_pair_key_request_handler+0x32>
          {
            DBG_LOG("Entered Pass-code:");
          }
          else
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
1000c7d0:	481e      	ldr	r0, [pc, #120]	; (1000c84c <ble_pair_key_request_handler+0x108>)
1000c7d2:	4b1f      	ldr	r3, [pc, #124]	; (1000c850 <ble_pair_key_request_handler+0x10c>)
1000c7d4:	4798      	blx	r3
1000c7d6:	4827      	ldr	r0, [pc, #156]	; (1000c874 <ble_pair_key_request_handler+0x130>)
1000c7d8:	4b1f      	ldr	r3, [pc, #124]	; (1000c858 <ble_pair_key_request_handler+0x114>)
1000c7da:	4798      	blx	r3
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000c7dc:	2400      	movs	r4, #0
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
1000c7de:	4e24      	ldr	r6, [pc, #144]	; (1000c870 <ble_pair_key_request_handler+0x12c>)
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
1000c7e0:	ab02      	add	r3, sp, #8
                  DBG_LOG_CONT("%c",passkey[idx]);
1000c7e2:	5ce0      	ldrb	r0, [r4, r3]
1000c7e4:	47b0      	blx	r6
1000c7e6:	3401      	adds	r4, #1
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
1000c7e8:	2c06      	cmp	r4, #6
1000c7ea:	d1f9      	bne.n	1000c7e0 <ble_pair_key_request_handler+0x9c>
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
          }		
          
          if(!((at_ble_pair_key_reply(pair_key->handle, pair_key_request.type, passkey)) == AT_BLE_SUCCESS))
1000c7ec:	ab01      	add	r3, sp, #4
1000c7ee:	7899      	ldrb	r1, [r3, #2]
1000c7f0:	8828      	ldrh	r0, [r5, #0]
1000c7f2:	aa02      	add	r2, sp, #8
1000c7f4:	4b20      	ldr	r3, [pc, #128]	; (1000c878 <ble_pair_key_request_handler+0x134>)
1000c7f6:	4798      	blx	r3
1000c7f8:	2800      	cmp	r0, #0
1000c7fa:	d021      	beq.n	1000c840 <ble_pair_key_request_handler+0xfc>
          {
                  DBG_LOG("Pair-key reply failed");
1000c7fc:	4813      	ldr	r0, [pc, #76]	; (1000c84c <ble_pair_key_request_handler+0x108>)
1000c7fe:	4b14      	ldr	r3, [pc, #80]	; (1000c850 <ble_pair_key_request_handler+0x10c>)
1000c800:	4798      	blx	r3
1000c802:	481e      	ldr	r0, [pc, #120]	; (1000c87c <ble_pair_key_request_handler+0x138>)
1000c804:	4b14      	ldr	r3, [pc, #80]	; (1000c858 <ble_pair_key_request_handler+0x114>)
1000c806:	4798      	blx	r3
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000c808:	2000      	movs	r0, #0
1000c80a:	e019      	b.n	1000c840 <ble_pair_key_request_handler+0xfc>
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
1000c80c:	480f      	ldr	r0, [pc, #60]	; (1000c84c <ble_pair_key_request_handler+0x108>)
1000c80e:	4b10      	ldr	r3, [pc, #64]	; (1000c850 <ble_pair_key_request_handler+0x10c>)
1000c810:	4798      	blx	r3
1000c812:	481b      	ldr	r0, [pc, #108]	; (1000c880 <ble_pair_key_request_handler+0x13c>)
1000c814:	4b10      	ldr	r3, [pc, #64]	; (1000c858 <ble_pair_key_request_handler+0x114>)
1000c816:	4798      	blx	r3
		}
	}
	return AT_BLE_SUCCESS;	
1000c818:	2000      	movs	r0, #0
1000c81a:	e011      	b.n	1000c840 <ble_pair_key_request_handler+0xfc>
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
	   (pair_key_request.type == AT_BLE_PAIR_PASSKEY)) || (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY))
	{
          if(pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY)
          {
            DBG_LOG("Entered Pass-code:");
1000c81c:	480b      	ldr	r0, [pc, #44]	; (1000c84c <ble_pair_key_request_handler+0x108>)
1000c81e:	4b0c      	ldr	r3, [pc, #48]	; (1000c850 <ble_pair_key_request_handler+0x10c>)
1000c820:	4798      	blx	r3
1000c822:	4818      	ldr	r0, [pc, #96]	; (1000c884 <ble_pair_key_request_handler+0x140>)
1000c824:	4b0c      	ldr	r3, [pc, #48]	; (1000c858 <ble_pair_key_request_handler+0x114>)
1000c826:	4798      	blx	r3
1000c828:	e7d8      	b.n	1000c7dc <ble_pair_key_request_handler+0x98>
			} 
	  }
	}	
	
	/* Display passkey */
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
1000c82a:	ab01      	add	r3, sp, #4
1000c82c:	885a      	ldrh	r2, [r3, #2]
1000c82e:	2380      	movs	r3, #128	; 0x80
1000c830:	005b      	lsls	r3, r3, #1
1000c832:	429a      	cmp	r2, r3
1000c834:	d0cc      	beq.n	1000c7d0 <ble_pair_key_request_handler+0x8c>
                  DBG_LOG("Pair-key reply failed");
          }
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
1000c836:	ab01      	add	r3, sp, #4
1000c838:	789b      	ldrb	r3, [r3, #2]
1000c83a:	2b01      	cmp	r3, #1
1000c83c:	d0e6      	beq.n	1000c80c <ble_pair_key_request_handler+0xc8>
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000c83e:	2000      	movs	r0, #0
}
1000c840:	b005      	add	sp, #20
1000c842:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c844:	10014788 	.word	0x10014788
1000c848:	1001255f 	.word	0x1001255f
1000c84c:	10013980 	.word	0x10013980
1000c850:	100127d9 	.word	0x100127d9
1000c854:	10014bc8 	.word	0x10014bc8
1000c858:	100126b9 	.word	0x100126b9
1000c85c:	1000d3b1 	.word	0x1000d3b1
1000c860:	10014bf0 	.word	0x10014bf0
1000c864:	10014bfc 	.word	0x10014bfc
1000c868:	1000ec35 	.word	0x1000ec35
1000c86c:	10014aa8 	.word	0x10014aa8
1000c870:	100126ed 	.word	0x100126ed
1000c874:	10014c10 	.word	0x10014c10
1000c878:	1000f6e9 	.word	0x1000f6e9
1000c87c:	10014c48 	.word	0x10014c48
1000c880:	10014c60 	.word	0x10014c60
1000c884:	10014c7c 	.word	0x10014c7c

1000c888 <ble_encryption_request_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption requests */
at_ble_status_t ble_encryption_request_handler(void *params)
{
1000c888:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c88a:	465f      	mov	r7, fp
1000c88c:	4656      	mov	r6, sl
1000c88e:	464d      	mov	r5, r9
1000c890:	b4e0      	push	{r5, r6, r7}
1000c892:	0006      	movs	r6, r0
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000c894:	8800      	ldrh	r0, [r0, #0]
1000c896:	4b49      	ldr	r3, [pc, #292]	; (1000c9bc <ble_encryption_request_handler+0x134>)
1000c898:	2200      	movs	r2, #0
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c89a:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000c89c:	8919      	ldrh	r1, [r3, #8]
1000c89e:	4281      	cmp	r1, r0
1000c8a0:	d137      	bne.n	1000c912 <ble_encryption_request_handler+0x8a>
1000c8a2:	0019      	movs	r1, r3
1000c8a4:	315e      	adds	r1, #94	; 0x5e
1000c8a6:	7809      	ldrb	r1, [r1, #0]
1000c8a8:	2901      	cmp	r1, #1
1000c8aa:	d932      	bls.n	1000c912 <ble_encryption_request_handler+0x8a>
		(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE))
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000c8ac:	4f43      	ldr	r7, [pc, #268]	; (1000c9bc <ble_encryption_request_handler+0x134>)
1000c8ae:	0153      	lsls	r3, r2, #5
1000c8b0:	1a9d      	subs	r5, r3, r2
1000c8b2:	00ad      	lsls	r5, r5, #2
1000c8b4:	197d      	adds	r5, r7, r5
1000c8b6:	355e      	adds	r5, #94	; 0x5e
1000c8b8:	2306      	movs	r3, #6
1000c8ba:	702b      	strb	r3, [r5, #0]
			DBG_LOG_DEV("ENC-Req: Conn Handle Device Found:hdl:%d", enc_req->handle);
1000c8bc:	4840      	ldr	r0, [pc, #256]	; (1000c9c0 <ble_encryption_request_handler+0x138>)
1000c8be:	4b41      	ldr	r3, [pc, #260]	; (1000c9c4 <ble_encryption_request_handler+0x13c>)
1000c8c0:	469a      	mov	sl, r3
1000c8c2:	4798      	blx	r3
1000c8c4:	8831      	ldrh	r1, [r6, #0]
1000c8c6:	4840      	ldr	r0, [pc, #256]	; (1000c9c8 <ble_encryption_request_handler+0x140>)
1000c8c8:	4b40      	ldr	r3, [pc, #256]	; (1000c9cc <ble_encryption_request_handler+0x144>)
1000c8ca:	4699      	mov	r9, r3
1000c8cc:	4798      	blx	r3
		}
	}
	
	if (device_found)
	{
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
1000c8ce:	483c      	ldr	r0, [pc, #240]	; (1000c9c0 <ble_encryption_request_handler+0x138>)
1000c8d0:	47d0      	blx	sl
1000c8d2:	0163      	lsls	r3, r4, #5
1000c8d4:	1b1b      	subs	r3, r3, r4
1000c8d6:	009b      	lsls	r3, r3, #2
1000c8d8:	18ff      	adds	r7, r7, r3
1000c8da:	2370      	movs	r3, #112	; 0x70
1000c8dc:	469b      	mov	fp, r3
1000c8de:	44bb      	add	fp, r7
1000c8e0:	465b      	mov	r3, fp
1000c8e2:	8819      	ldrh	r1, [r3, #0]
1000c8e4:	483a      	ldr	r0, [pc, #232]	; (1000c9d0 <ble_encryption_request_handler+0x148>)
1000c8e6:	47c8      	blx	r9
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
1000c8e8:	4835      	ldr	r0, [pc, #212]	; (1000c9c0 <ble_encryption_request_handler+0x138>)
1000c8ea:	47d0      	blx	sl
1000c8ec:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
1000c8ee:	4839      	ldr	r0, [pc, #228]	; (1000c9d4 <ble_encryption_request_handler+0x14c>)
1000c8f0:	47c8      	blx	r9
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
1000c8f2:	4833      	ldr	r0, [pc, #204]	; (1000c9c0 <ble_encryption_request_handler+0x138>)
1000c8f4:	47d0      	blx	sl
1000c8f6:	8871      	ldrh	r1, [r6, #2]
1000c8f8:	4837      	ldr	r0, [pc, #220]	; (1000c9d8 <ble_encryption_request_handler+0x150>)
1000c8fa:	47c8      	blx	r9
		DBG_LOG_DEV("The index is %d",idx);
1000c8fc:	4830      	ldr	r0, [pc, #192]	; (1000c9c0 <ble_encryption_request_handler+0x138>)
1000c8fe:	47d0      	blx	sl
1000c900:	0021      	movs	r1, r4
1000c902:	4836      	ldr	r0, [pc, #216]	; (1000c9dc <ble_encryption_request_handler+0x154>)
1000c904:	47c8      	blx	r9
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
1000c906:	465b      	mov	r3, fp
1000c908:	881a      	ldrh	r2, [r3, #0]
1000c90a:	8873      	ldrh	r3, [r6, #2]
1000c90c:	429a      	cmp	r2, r3
1000c90e:	d12a      	bne.n	1000c966 <ble_encryption_request_handler+0xde>
1000c910:	e006      	b.n	1000c920 <ble_encryption_request_handler+0x98>
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c912:	3401      	adds	r4, #1
1000c914:	b2e4      	uxtb	r4, r4
1000c916:	3201      	adds	r2, #1
1000c918:	337c      	adds	r3, #124	; 0x7c
1000c91a:	2c05      	cmp	r4, #5
1000c91c:	d1be      	bne.n	1000c89c <ble_encryption_request_handler+0x14>
1000c91e:	e022      	b.n	1000c966 <ble_encryption_request_handler+0xde>
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
		DBG_LOG_DEV("The index is %d",idx);
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
		&& !memcmp(&enc_req->nb[0],&ble_dev_info[idx].host_ltk.nb[0],8))
1000c920:	0161      	lsls	r1, r4, #5
1000c922:	1b09      	subs	r1, r1, r4
1000c924:	0089      	lsls	r1, r1, #2
1000c926:	4b25      	ldr	r3, [pc, #148]	; (1000c9bc <ble_encryption_request_handler+0x134>)
1000c928:	1859      	adds	r1, r3, r1
1000c92a:	3172      	adds	r1, #114	; 0x72
1000c92c:	1d30      	adds	r0, r6, #4
1000c92e:	2208      	movs	r2, #8
1000c930:	4b2b      	ldr	r3, [pc, #172]	; (1000c9e0 <ble_encryption_request_handler+0x158>)
1000c932:	4798      	blx	r3
1000c934:	2800      	cmp	r0, #0
1000c936:	d116      	bne.n	1000c966 <ble_encryption_request_handler+0xde>
		{
			key_found = true;
			DBG_LOG_DEV("ENC-Req: Key Found");
1000c938:	4821      	ldr	r0, [pc, #132]	; (1000c9c0 <ble_encryption_request_handler+0x138>)
1000c93a:	4b22      	ldr	r3, [pc, #136]	; (1000c9c4 <ble_encryption_request_handler+0x13c>)
1000c93c:	4798      	blx	r3
1000c93e:	4829      	ldr	r0, [pc, #164]	; (1000c9e4 <ble_encryption_request_handler+0x15c>)
1000c940:	4b22      	ldr	r3, [pc, #136]	; (1000c9cc <ble_encryption_request_handler+0x144>)
1000c942:	4798      	blx	r3
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
		return AT_BLE_FAILURE;
    }

	if(!(at_ble_encryption_request_reply(enc_req->handle, ble_dev_info[idx].bond_info.auth, key_found, &ble_dev_info[idx].host_ltk) == AT_BLE_SUCCESS))
1000c944:	0162      	lsls	r2, r4, #5
1000c946:	1b13      	subs	r3, r2, r4
1000c948:	009b      	lsls	r3, r3, #2
1000c94a:	3360      	adds	r3, #96	; 0x60
1000c94c:	491b      	ldr	r1, [pc, #108]	; (1000c9bc <ble_encryption_request_handler+0x134>)
1000c94e:	185b      	adds	r3, r3, r1
1000c950:	1b12      	subs	r2, r2, r4
1000c952:	0092      	lsls	r2, r2, #2
1000c954:	188a      	adds	r2, r1, r2
1000c956:	7d11      	ldrb	r1, [r2, #20]
1000c958:	8830      	ldrh	r0, [r6, #0]
1000c95a:	2201      	movs	r2, #1
1000c95c:	4c22      	ldr	r4, [pc, #136]	; (1000c9e8 <ble_encryption_request_handler+0x160>)
1000c95e:	47a0      	blx	r4
1000c960:	1e04      	subs	r4, r0, #0
1000c962:	d01e      	beq.n	1000c9a2 <ble_encryption_request_handler+0x11a>
1000c964:	e015      	b.n	1000c992 <ble_encryption_request_handler+0x10a>
	}
	
	
    if(key_found == false)
    {
	    DBG_LOG("Pairing information of peer device is not available.");
1000c966:	4f16      	ldr	r7, [pc, #88]	; (1000c9c0 <ble_encryption_request_handler+0x138>)
1000c968:	0038      	movs	r0, r7
1000c96a:	4e16      	ldr	r6, [pc, #88]	; (1000c9c4 <ble_encryption_request_handler+0x13c>)
1000c96c:	47b0      	blx	r6
1000c96e:	481f      	ldr	r0, [pc, #124]	; (1000c9ec <ble_encryption_request_handler+0x164>)
1000c970:	4d16      	ldr	r5, [pc, #88]	; (1000c9cc <ble_encryption_request_handler+0x144>)
1000c972:	47a8      	blx	r5
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
1000c974:	0038      	movs	r0, r7
1000c976:	47b0      	blx	r6
1000c978:	481d      	ldr	r0, [pc, #116]	; (1000c9f0 <ble_encryption_request_handler+0x168>)
1000c97a:	47a8      	blx	r5
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
1000c97c:	0163      	lsls	r3, r4, #5
1000c97e:	1b1c      	subs	r4, r3, r4
1000c980:	00a4      	lsls	r4, r4, #2
1000c982:	4b0e      	ldr	r3, [pc, #56]	; (1000c9bc <ble_encryption_request_handler+0x134>)
1000c984:	191c      	adds	r4, r3, r4
1000c986:	8920      	ldrh	r0, [r4, #8]
1000c988:	2105      	movs	r1, #5
1000c98a:	4b1a      	ldr	r3, [pc, #104]	; (1000c9f4 <ble_encryption_request_handler+0x16c>)
1000c98c:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000c98e:	24e2      	movs	r4, #226	; 0xe2
1000c990:	e00d      	b.n	1000c9ae <ble_encryption_request_handler+0x126>
    }

	if(!(at_ble_encryption_request_reply(enc_req->handle, ble_dev_info[idx].bond_info.auth, key_found, &ble_dev_info[idx].host_ltk) == AT_BLE_SUCCESS))
	{
		DBG_LOG("Encryption Request Reply Failed");
1000c992:	480b      	ldr	r0, [pc, #44]	; (1000c9c0 <ble_encryption_request_handler+0x138>)
1000c994:	4b0b      	ldr	r3, [pc, #44]	; (1000c9c4 <ble_encryption_request_handler+0x13c>)
1000c996:	4798      	blx	r3
1000c998:	4817      	ldr	r0, [pc, #92]	; (1000c9f8 <ble_encryption_request_handler+0x170>)
1000c99a:	4b0c      	ldr	r3, [pc, #48]	; (1000c9cc <ble_encryption_request_handler+0x144>)
1000c99c:	4798      	blx	r3
	}
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
	}
	return AT_BLE_SUCCESS;
1000c99e:	2400      	movs	r4, #0
1000c9a0:	e005      	b.n	1000c9ae <ble_encryption_request_handler+0x126>
	{
		DBG_LOG("Encryption Request Reply Failed");
	}
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
1000c9a2:	4807      	ldr	r0, [pc, #28]	; (1000c9c0 <ble_encryption_request_handler+0x138>)
1000c9a4:	4b07      	ldr	r3, [pc, #28]	; (1000c9c4 <ble_encryption_request_handler+0x13c>)
1000c9a6:	4798      	blx	r3
1000c9a8:	4814      	ldr	r0, [pc, #80]	; (1000c9fc <ble_encryption_request_handler+0x174>)
1000c9aa:	4b08      	ldr	r3, [pc, #32]	; (1000c9cc <ble_encryption_request_handler+0x144>)
1000c9ac:	4798      	blx	r3
	}
	return AT_BLE_SUCCESS;
}
1000c9ae:	0020      	movs	r0, r4
1000c9b0:	bc1c      	pop	{r2, r3, r4}
1000c9b2:	4691      	mov	r9, r2
1000c9b4:	469a      	mov	sl, r3
1000c9b6:	46a3      	mov	fp, r4
1000c9b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c9ba:	46c0      	nop			; (mov r8, r8)
1000c9bc:	10017118 	.word	0x10017118
1000c9c0:	10013980 	.word	0x10013980
1000c9c4:	100127d9 	.word	0x100127d9
1000c9c8:	10014c90 	.word	0x10014c90
1000c9cc:	100126b9 	.word	0x100126b9
1000c9d0:	10014cbc 	.word	0x10014cbc
1000c9d4:	10014cd0 	.word	0x10014cd0
1000c9d8:	10014ce4 	.word	0x10014ce4
1000c9dc:	10014cf4 	.word	0x10014cf4
1000c9e0:	10012541 	.word	0x10012541
1000c9e4:	10014d04 	.word	0x10014d04
1000c9e8:	1000f81d 	.word	0x1000f81d
1000c9ec:	10014d18 	.word	0x10014d18
1000c9f0:	10014d50 	.word	0x10014d50
1000c9f4:	1000ec35 	.word	0x1000ec35
1000c9f8:	10014da8 	.word	0x10014da8
1000c9fc:	10014dc8 	.word	0x10014dc8

1000ca00 <ble_mgr_events_callback_handler>:
}

bool ble_mgr_events_callback_handler(ble_mgr_event_cb_t event_cb_type, 
									ble_mgr_event_t event_type,
									const ble_event_callback_t *ble_event_handler)
{
1000ca00:	b530      	push	{r4, r5, lr}
	uint8_t idx;
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
1000ca02:	2a00      	cmp	r2, #0
1000ca04:	d047      	beq.n	1000ca96 <ble_mgr_events_callback_handler+0x96>
	{
		switch(event_type)
1000ca06:	2906      	cmp	r1, #6
1000ca08:	d847      	bhi.n	1000ca9a <ble_mgr_events_callback_handler+0x9a>
1000ca0a:	0089      	lsls	r1, r1, #2
1000ca0c:	4b28      	ldr	r3, [pc, #160]	; (1000cab0 <ble_mgr_events_callback_handler+0xb0>)
1000ca0e:	585b      	ldr	r3, [r3, r1]
1000ca10:	469f      	mov	pc, r3
			}
			break;
			
			case BLE_GATT_SERVER_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_server_event_cb;
1000ca12:	4b28      	ldr	r3, [pc, #160]	; (1000cab4 <ble_mgr_events_callback_handler+0xb4>)
				max_event_handler = MAX_GATT_SERVER_SUBSCRIBERS;
1000ca14:	2405      	movs	r4, #5
1000ca16:	e00a      	b.n	1000ca2e <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_GATT_HTPT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_htpt_event_cb;
1000ca18:	4b27      	ldr	r3, [pc, #156]	; (1000cab8 <ble_mgr_events_callback_handler+0xb8>)
				max_event_handler = MAX_HTPT_EVENT_SUBSCRIBERS;
1000ca1a:	2401      	movs	r4, #1
			}
			break;
1000ca1c:	e007      	b.n	1000ca2e <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_DTM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_dtm_event_cb;
1000ca1e:	4b27      	ldr	r3, [pc, #156]	; (1000cabc <ble_mgr_events_callback_handler+0xbc>)
				max_event_handler = MAX_DTM_EVENT_SUBSCRIBERS;
1000ca20:	2405      	movs	r4, #5
			}
			break;
1000ca22:	e004      	b.n	1000ca2e <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_CUSTOM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_custom_event_cb;
1000ca24:	4b26      	ldr	r3, [pc, #152]	; (1000cac0 <ble_mgr_events_callback_handler+0xc0>)
				max_event_handler = MAX_CUSTOM_EVENT_SUBSCRIBERS;
1000ca26:	2401      	movs	r4, #1
			}
			break;
1000ca28:	e001      	b.n	1000ca2e <ble_mgr_events_callback_handler+0x2e>
	{
		switch(event_type)
		{
			case BLE_GAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gap_event_cb;
1000ca2a:	4b26      	ldr	r3, [pc, #152]	; (1000cac4 <ble_mgr_events_callback_handler+0xc4>)
				max_event_handler = MAX_GAP_EVENT_SUBSCRIBERS;
1000ca2c:	2405      	movs	r4, #5
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
1000ca2e:	2800      	cmp	r0, #0
1000ca30:	d116      	bne.n	1000ca60 <ble_mgr_events_callback_handler+0x60>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000ca32:	6819      	ldr	r1, [r3, #0]
1000ca34:	2900      	cmp	r1, #0
1000ca36:	d10b      	bne.n	1000ca50 <ble_mgr_events_callback_handler+0x50>
1000ca38:	e006      	b.n	1000ca48 <ble_mgr_events_callback_handler+0x48>
1000ca3a:	001d      	movs	r5, r3
1000ca3c:	3304      	adds	r3, #4
1000ca3e:	1f18      	subs	r0, r3, #4
1000ca40:	6800      	ldr	r0, [r0, #0]
1000ca42:	2800      	cmp	r0, #0
1000ca44:	d106      	bne.n	1000ca54 <ble_mgr_events_callback_handler+0x54>
1000ca46:	e000      	b.n	1000ca4a <ble_mgr_events_callback_handler+0x4a>
1000ca48:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = ble_event_handler;
1000ca4a:	602a      	str	r2, [r5, #0]
						status = true; //Successfully registered to table
1000ca4c:	2101      	movs	r1, #1
						break;
1000ca4e:	e02c      	b.n	1000caaa <ble_mgr_events_callback_handler+0xaa>
1000ca50:	3304      	adds	r3, #4
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000ca52:	2100      	movs	r1, #0
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000ca54:	3101      	adds	r1, #1
1000ca56:	b2c9      	uxtb	r1, r1
1000ca58:	42a1      	cmp	r1, r4
1000ca5a:	d3ee      	bcc.n	1000ca3a <ble_mgr_events_callback_handler+0x3a>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000ca5c:	2100      	movs	r1, #0
1000ca5e:	e024      	b.n	1000caaa <ble_mgr_events_callback_handler+0xaa>
1000ca60:	2100      	movs	r1, #0
						status = true; //Successfully registered to table
						break;
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
1000ca62:	2801      	cmp	r0, #1
1000ca64:	d121      	bne.n	1000caaa <ble_mgr_events_callback_handler+0xaa>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000ca66:	6819      	ldr	r1, [r3, #0]
1000ca68:	428a      	cmp	r2, r1
1000ca6a:	d10c      	bne.n	1000ca86 <ble_mgr_events_callback_handler+0x86>
1000ca6c:	e006      	b.n	1000ca7c <ble_mgr_events_callback_handler+0x7c>
1000ca6e:	001d      	movs	r5, r3
1000ca70:	3304      	adds	r3, #4
1000ca72:	1f18      	subs	r0, r3, #4
1000ca74:	6800      	ldr	r0, [r0, #0]
1000ca76:	4282      	cmp	r2, r0
1000ca78:	d107      	bne.n	1000ca8a <ble_mgr_events_callback_handler+0x8a>
1000ca7a:	e000      	b.n	1000ca7e <ble_mgr_events_callback_handler+0x7e>
1000ca7c:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = NULL;
1000ca7e:	2300      	movs	r3, #0
1000ca80:	602b      	str	r3, [r5, #0]
						status = true;//Successfully unregistered from table
1000ca82:	2101      	movs	r1, #1
						break;
1000ca84:	e011      	b.n	1000caaa <ble_mgr_events_callback_handler+0xaa>
1000ca86:	3304      	adds	r3, #4
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000ca88:	2100      	movs	r1, #0
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000ca8a:	3101      	adds	r1, #1
1000ca8c:	b2c9      	uxtb	r1, r1
1000ca8e:	42a1      	cmp	r1, r4
1000ca90:	d3ed      	bcc.n	1000ca6e <ble_mgr_events_callback_handler+0x6e>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000ca92:	2100      	movs	r1, #0
1000ca94:	e009      	b.n	1000caaa <ble_mgr_events_callback_handler+0xaa>
			}			
		}
	}
	else
	{
		status = false; //Invalid parameter
1000ca96:	2100      	movs	r1, #0
1000ca98:	e007      	b.n	1000caaa <ble_mgr_events_callback_handler+0xaa>
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
	{
		switch(event_type)
1000ca9a:	2100      	movs	r1, #0
1000ca9c:	e005      	b.n	1000caaa <ble_mgr_events_callback_handler+0xaa>
			}
			break;
			
			case BLE_GATT_CLIENT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_client_event_cb;
1000ca9e:	4b0a      	ldr	r3, [pc, #40]	; (1000cac8 <ble_mgr_events_callback_handler+0xc8>)
				max_event_handler = MAX_GATT_CLIENT_SUBSCRIBERS;
1000caa0:	2405      	movs	r4, #5
1000caa2:	e7c4      	b.n	1000ca2e <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_L2CAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_l2cap_event_cb;
1000caa4:	4b09      	ldr	r3, [pc, #36]	; (1000cacc <ble_mgr_events_callback_handler+0xcc>)
				max_event_handler = MAX_L2CAP_EVENT_SUBSCRIBERS;
1000caa6:	2401      	movs	r4, #1
1000caa8:	e7c1      	b.n	1000ca2e <ble_mgr_events_callback_handler+0x2e>
	else
	{
		status = false; //Invalid parameter
	}
	return status;
}
1000caaa:	0008      	movs	r0, r1
1000caac:	bd30      	pop	{r4, r5, pc}
1000caae:	46c0      	nop			; (mov r8, r8)
1000cab0:	1001476c 	.word	0x1001476c
1000cab4:	10017104 	.word	0x10017104
1000cab8:	10017100 	.word	0x10017100
1000cabc:	10017388 	.word	0x10017388
1000cac0:	1001793c 	.word	0x1001793c
1000cac4:	1001739c 	.word	0x1001739c
1000cac8:	100173b0 	.word	0x100173b0
1000cacc:	100173f8 	.word	0x100173f8

1000cad0 <ble_device_init>:
volatile uint32_t 	event_params_memory[1024] 	= {0};


/** @brief BLE device initialization */
void ble_device_init(at_ble_addr_t *addr)
{
1000cad0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000cad2:	465f      	mov	r7, fp
1000cad4:	4656      	mov	r6, sl
1000cad6:	464d      	mov	r5, r9
1000cad8:	4644      	mov	r4, r8
1000cada:	b4f0      	push	{r4, r5, r6, r7}
1000cadc:	b091      	sub	sp, #68	; 0x44
1000cade:	0005      	movs	r5, r0
static bool ble_scan_duplication_check(at_ble_scan_info_t * info);
#endif

static void init_global_var(void)
{
	ble_user_event_cb = 0;
1000cae0:	2400      	movs	r4, #0
1000cae2:	4b7e      	ldr	r3, [pc, #504]	; (1000ccdc <ble_device_init+0x20c>)
1000cae4:	601c      	str	r4, [r3, #0]
	
	memset(&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000cae6:	2207      	movs	r2, #7
1000cae8:	2100      	movs	r1, #0
1000caea:	487d      	ldr	r0, [pc, #500]	; (1000cce0 <ble_device_init+0x210>)
1000caec:	4e7d      	ldr	r6, [pc, #500]	; (1000cce4 <ble_device_init+0x214>)
1000caee:	47b0      	blx	r6
	memset(&connected_state_info, 0, sizeof(at_ble_connected_t));
1000caf0:	2212      	movs	r2, #18
1000caf2:	2100      	movs	r1, #0
1000caf4:	487c      	ldr	r0, [pc, #496]	; (1000cce8 <ble_device_init+0x218>)
1000caf6:	47b0      	blx	r6
		
#if defined ATT_DB_MEMORY
	memset(att_db_data, 0, sizeof(uint32_t) * BLE_ATT_DB_MEMORY_SIZE/4);
1000caf8:	4a7c      	ldr	r2, [pc, #496]	; (1000ccec <ble_device_init+0x21c>)
1000cafa:	2100      	movs	r1, #0
1000cafc:	487c      	ldr	r0, [pc, #496]	; (1000ccf0 <ble_device_init+0x220>)
1000cafe:	47b0      	blx	r6
#endif

	scan_response_count = 0;
1000cb00:	4b7c      	ldr	r3, [pc, #496]	; (1000ccf4 <ble_device_init+0x224>)
1000cb02:	701c      	strb	r4, [r3, #0]
	memset(scan_info, 0, sizeof(scan_info));
1000cb04:	22cd      	movs	r2, #205	; 0xcd
1000cb06:	0092      	lsls	r2, r2, #2
1000cb08:	2100      	movs	r1, #0
1000cb0a:	487b      	ldr	r0, [pc, #492]	; (1000ccf8 <ble_device_init+0x228>)
1000cb0c:	47b0      	blx	r6

	event = AT_BLE_UNDEFINED_EVENT;
1000cb0e:	4b7b      	ldr	r3, [pc, #492]	; (1000ccfc <ble_device_init+0x22c>)
1000cb10:	701c      	strb	r4, [r3, #0]
	memset(ble_event_params, 0, BLE_EVENT_PARAM_MAX_SIZE);
1000cb12:	2283      	movs	r2, #131	; 0x83
1000cb14:	0092      	lsls	r2, r2, #2
1000cb16:	2100      	movs	r1, #0
1000cb18:	4879      	ldr	r0, [pc, #484]	; (1000cd00 <ble_device_init+0x230>)
1000cb1a:	47b0      	blx	r6
{
	uint8_t idx;	
	char *dev_name = NULL;
	init_global_var();

	memset((uint8_t *)event_pool_memory, 0, sizeof(event_pool_memory));
1000cb1c:	4b79      	ldr	r3, [pc, #484]	; (1000cd04 <ble_device_init+0x234>)
1000cb1e:	469b      	mov	fp, r3
1000cb20:	2380      	movs	r3, #128	; 0x80
1000cb22:	00db      	lsls	r3, r3, #3
1000cb24:	469a      	mov	sl, r3
1000cb26:	001a      	movs	r2, r3
1000cb28:	2100      	movs	r1, #0
1000cb2a:	4658      	mov	r0, fp
1000cb2c:	47b0      	blx	r6
	memset((uint8_t *)event_params_memory, 0, sizeof(event_params_memory));
1000cb2e:	4b76      	ldr	r3, [pc, #472]	; (1000cd08 <ble_device_init+0x238>)
1000cb30:	4699      	mov	r9, r3
1000cb32:	2380      	movs	r3, #128	; 0x80
1000cb34:	015b      	lsls	r3, r3, #5
1000cb36:	4698      	mov	r8, r3
1000cb38:	001a      	movs	r2, r3
1000cb3a:	2100      	movs	r1, #0
1000cb3c:	4648      	mov	r0, r9
1000cb3e:	47b0      	blx	r6

	memset(&pf_cfg, 0, sizeof(pf_cfg));
1000cb40:	4f72      	ldr	r7, [pc, #456]	; (1000cd0c <ble_device_init+0x23c>)
1000cb42:	221c      	movs	r2, #28
1000cb44:	2100      	movs	r1, #0
1000cb46:	0038      	movs	r0, r7
1000cb48:	47b0      	blx	r6

	pf_cfg.event_mem_pool.memStartAdd        = (uint8_t *)event_pool_memory;
1000cb4a:	465b      	mov	r3, fp
1000cb4c:	60bb      	str	r3, [r7, #8]
	pf_cfg.event_mem_pool.memSize            = sizeof(event_pool_memory);
1000cb4e:	4653      	mov	r3, sl
1000cb50:	60fb      	str	r3, [r7, #12]
	pf_cfg.event_params_mem_pool.memStartAdd = (uint8_t *)event_params_memory;
1000cb52:	464b      	mov	r3, r9
1000cb54:	613b      	str	r3, [r7, #16]
	pf_cfg.event_params_mem_pool.memSize     = sizeof(event_params_memory);
1000cb56:	4643      	mov	r3, r8
1000cb58:	617b      	str	r3, [r7, #20]

	/* Initialize the BLE Event callbacks */
	for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gap_event_cb[idx] = NULL;
1000cb5a:	4b6d      	ldr	r3, [pc, #436]	; (1000cd10 <ble_device_init+0x240>)
1000cb5c:	601c      	str	r4, [r3, #0]
1000cb5e:	605c      	str	r4, [r3, #4]
1000cb60:	609c      	str	r4, [r3, #8]
1000cb62:	60dc      	str	r4, [r3, #12]
1000cb64:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_client_event_cb[idx] = NULL;
1000cb66:	4b6b      	ldr	r3, [pc, #428]	; (1000cd14 <ble_device_init+0x244>)
1000cb68:	601c      	str	r4, [r3, #0]
1000cb6a:	605c      	str	r4, [r3, #4]
1000cb6c:	609c      	str	r4, [r3, #8]
1000cb6e:	60dc      	str	r4, [r3, #12]
1000cb70:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_server_event_cb[idx] = NULL;
1000cb72:	4b69      	ldr	r3, [pc, #420]	; (1000cd18 <ble_device_init+0x248>)
1000cb74:	601c      	str	r4, [r3, #0]
1000cb76:	605c      	str	r4, [r3, #4]
1000cb78:	609c      	str	r4, [r3, #8]
1000cb7a:	60dc      	str	r4, [r3, #12]
1000cb7c:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_l2cap_event_cb[idx] = NULL;
1000cb7e:	4b67      	ldr	r3, [pc, #412]	; (1000cd1c <ble_device_init+0x24c>)
1000cb80:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_htpt_event_cb[idx] = NULL;
1000cb82:	4b67      	ldr	r3, [pc, #412]	; (1000cd20 <ble_device_init+0x250>)
1000cb84:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_dtm_event_cb[idx] = NULL;
1000cb86:	4b67      	ldr	r3, [pc, #412]	; (1000cd24 <ble_device_init+0x254>)
1000cb88:	601c      	str	r4, [r3, #0]
1000cb8a:	605c      	str	r4, [r3, #4]
1000cb8c:	609c      	str	r4, [r3, #8]
1000cb8e:	60dc      	str	r4, [r3, #12]
1000cb90:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_custom_event_cb[idx] = NULL;
1000cb92:	4b65      	ldr	r3, [pc, #404]	; (1000cd28 <ble_device_init+0x258>)
1000cb94:	601c      	str	r4, [r3, #0]
1000cb96:	4c65      	ldr	r4, [pc, #404]	; (1000cd2c <ble_device_init+0x25c>)
1000cb98:	239b      	movs	r3, #155	; 0x9b
1000cb9a:	009b      	lsls	r3, r3, #2
1000cb9c:	4698      	mov	r8, r3
1000cb9e:	44a0      	add	r8, r4
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000cba0:	4f50      	ldr	r7, [pc, #320]	; (1000cce4 <ble_device_init+0x214>)
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000cba2:	2640      	movs	r6, #64	; 0x40
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000cba4:	227c      	movs	r2, #124	; 0x7c
1000cba6:	2100      	movs	r1, #0
1000cba8:	0020      	movs	r0, r4
1000cbaa:	47b8      	blx	r7
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000cbac:	0023      	movs	r3, r4
1000cbae:	335e      	adds	r3, #94	; 0x5e
1000cbb0:	2200      	movs	r2, #0
1000cbb2:	701a      	strb	r2, [r3, #0]
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000cbb4:	7626      	strb	r6, [r4, #24]
1000cbb6:	347c      	adds	r4, #124	; 0x7c
	{
		ble_mgr_custom_event_cb[idx] = NULL;
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000cbb8:	45a0      	cmp	r8, r4
1000cbba:	d1f3      	bne.n	1000cba4 <ble_device_init+0xd4>
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
    }
	/* Need to reset the count to 0 for storing it only in SRAM */
	ble_device_count = 0; 
1000cbbc:	4b5c      	ldr	r3, [pc, #368]	; (1000cd30 <ble_device_init+0x260>)
1000cbbe:	701a      	strb	r2, [r3, #0]
	
	
#if defined ATT_DB_MEMORY
	pf_cfg.memPool.memSize = BLE_ATT_DB_MEMORY_SIZE;
1000cbc0:	4c52      	ldr	r4, [pc, #328]	; (1000cd0c <ble_device_init+0x23c>)
1000cbc2:	4b4a      	ldr	r3, [pc, #296]	; (1000ccec <ble_device_init+0x21c>)
1000cbc4:	6063      	str	r3, [r4, #4]
	pf_cfg.memPool.memStartAdd = (uint8_t *)att_db_data;
1000cbc6:	4b4a      	ldr	r3, [pc, #296]	; (1000ccf0 <ble_device_init+0x220>)
1000cbc8:	6023      	str	r3, [r4, #0]

/* Initialize the BLE */
static void ble_init(at_ble_init_config_t * args)
{
	/* Initialize the platform */
	DBG_LOG("[ble_init]\t\t\tInitializing SAMB11");
1000cbca:	485a      	ldr	r0, [pc, #360]	; (1000cd34 <ble_device_init+0x264>)
1000cbcc:	4b5a      	ldr	r3, [pc, #360]	; (1000cd38 <ble_device_init+0x268>)
1000cbce:	4798      	blx	r3
1000cbd0:	485a      	ldr	r0, [pc, #360]	; (1000cd3c <ble_device_init+0x26c>)
1000cbd2:	4b5b      	ldr	r3, [pc, #364]	; (1000cd40 <ble_device_init+0x270>)
1000cbd4:	4798      	blx	r3
	
	/* Init BLE device */
	if(at_ble_init(args) != AT_BLE_SUCCESS)
1000cbd6:	0020      	movs	r0, r4
1000cbd8:	4b5a      	ldr	r3, [pc, #360]	; (1000cd44 <ble_device_init+0x274>)
1000cbda:	4798      	blx	r3
1000cbdc:	2800      	cmp	r0, #0
1000cbde:	d00b      	beq.n	1000cbf8 <ble_device_init+0x128>
	{
		DBG_LOG("[ble_init]\t\tSAMB11 Initialization failed");
1000cbe0:	4e54      	ldr	r6, [pc, #336]	; (1000cd34 <ble_device_init+0x264>)
1000cbe2:	0030      	movs	r0, r6
1000cbe4:	4d54      	ldr	r5, [pc, #336]	; (1000cd38 <ble_device_init+0x268>)
1000cbe6:	47a8      	blx	r5
1000cbe8:	4857      	ldr	r0, [pc, #348]	; (1000cd48 <ble_device_init+0x278>)
1000cbea:	4c55      	ldr	r4, [pc, #340]	; (1000cd40 <ble_device_init+0x270>)
1000cbec:	47a0      	blx	r4
		DBG_LOG("[ble_init]\t\tPlease check the power and connection / hardware connector");	
1000cbee:	0030      	movs	r0, r6
1000cbf0:	47a8      	blx	r5
1000cbf2:	4856      	ldr	r0, [pc, #344]	; (1000cd4c <ble_device_init+0x27c>)
1000cbf4:	47a0      	blx	r4
1000cbf6:	e7fe      	b.n	1000cbf6 <ble_device_init+0x126>
#endif
	
	ble_init(&pf_cfg);

	/* Register it in first index of callback handler */
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, 
1000cbf8:	4a55      	ldr	r2, [pc, #340]	; (1000cd50 <ble_device_init+0x280>)
1000cbfa:	2100      	movs	r1, #0
1000cbfc:	2000      	movs	r0, #0
1000cbfe:	4c55      	ldr	r4, [pc, #340]	; (1000cd54 <ble_device_init+0x284>)
1000cc00:	47a0      	blx	r4
									BLE_GAP_EVENT_TYPE, 
									ble_mgr_gap_handle);
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
1000cc02:	4a55      	ldr	r2, [pc, #340]	; (1000cd58 <ble_device_init+0x288>)
1000cc04:	2102      	movs	r1, #2
1000cc06:	2000      	movs	r0, #0
1000cc08:	47a0      	blx	r4
{
	if ((name == NULL) || (name_len < 1))
	{
		return AT_BLE_INVALID_PARAM;
	}
	return at_ble_device_name_set(name, name_len);
1000cc0a:	2109      	movs	r1, #9
1000cc0c:	4853      	ldr	r0, [pc, #332]	; (1000cd5c <ble_device_init+0x28c>)
1000cc0e:	4b54      	ldr	r3, [pc, #336]	; (1000cd60 <ble_device_init+0x290>)
1000cc10:	4798      	blx	r3
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
									BLE_GATT_SERVER_EVENT_TYPE,
									ble_mgr_gatt_server_handle);
									
	dev_name = (char *)BLE_DEVICE_NAME;
	if (ble_set_device_name((uint8_t *)dev_name, strlen(dev_name)) != AT_BLE_SUCCESS)
1000cc12:	2800      	cmp	r0, #0
1000cc14:	d005      	beq.n	1000cc22 <ble_device_init+0x152>
	{
		DBG_LOG("Device name set failed");
1000cc16:	4847      	ldr	r0, [pc, #284]	; (1000cd34 <ble_device_init+0x264>)
1000cc18:	4b47      	ldr	r3, [pc, #284]	; (1000cd38 <ble_device_init+0x268>)
1000cc1a:	4798      	blx	r3
1000cc1c:	4851      	ldr	r0, [pc, #324]	; (1000cd64 <ble_device_init+0x294>)
1000cc1e:	4b48      	ldr	r3, [pc, #288]	; (1000cd40 <ble_device_init+0x270>)
1000cc20:	4798      	blx	r3

/* Set BLE Address and device configuration, If address is NULL then it will use BD public address */
static void ble_set_dev_config(at_ble_addr_t *addr)
{
	at_ble_dev_config_t stDevConfig;
	at_ble_addr_t address = {AT_BLE_ADDRESS_PUBLIC, {0xAB, 0xCD, 0xEF, 0xAB, 0xCD, 0xEF}};
1000cc22:	2207      	movs	r2, #7
1000cc24:	4950      	ldr	r1, [pc, #320]	; (1000cd68 <ble_device_init+0x298>)
1000cc26:	3108      	adds	r1, #8
1000cc28:	a804      	add	r0, sp, #16
1000cc2a:	4b50      	ldr	r3, [pc, #320]	; (1000cd6c <ble_device_init+0x29c>)
1000cc2c:	4798      	blx	r3
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
1000cc2e:	2226      	movs	r2, #38	; 0x26
1000cc30:	2100      	movs	r1, #0
1000cc32:	a806      	add	r0, sp, #24
1000cc34:	4b2b      	ldr	r3, [pc, #172]	; (1000cce4 <ble_device_init+0x214>)
1000cc36:	4798      	blx	r3
	
	if (addr == NULL)
1000cc38:	2d00      	cmp	r5, #0
1000cc3a:	d10c      	bne.n	1000cc56 <ble_device_init+0x186>
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000cc3c:	a804      	add	r0, sp, #16
1000cc3e:	4b4c      	ldr	r3, [pc, #304]	; (1000cd70 <ble_device_init+0x2a0>)
1000cc40:	4798      	blx	r3
		{
			DBG_LOG("[ble_set_dev_config]\t\tBD address get failed");
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000cc42:	ad04      	add	r5, sp, #16
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
	
	if (addr == NULL)
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000cc44:	2800      	cmp	r0, #0
1000cc46:	d006      	beq.n	1000cc56 <ble_device_init+0x186>
		{
			DBG_LOG("[ble_set_dev_config]\t\tBD address get failed");
1000cc48:	483a      	ldr	r0, [pc, #232]	; (1000cd34 <ble_device_init+0x264>)
1000cc4a:	4b3b      	ldr	r3, [pc, #236]	; (1000cd38 <ble_device_init+0x268>)
1000cc4c:	4798      	blx	r3
1000cc4e:	4849      	ldr	r0, [pc, #292]	; (1000cd74 <ble_device_init+0x2a4>)
1000cc50:	4b3b      	ldr	r3, [pc, #236]	; (1000cd40 <ble_device_init+0x270>)
1000cc52:	4798      	blx	r3
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000cc54:	ad04      	add	r5, sp, #16
	}
	
	DBG_LOG("[ble_set_dev_config]\t\tBD Address:0x%02X%02X%02X%02X%02X%02X, Address Type:%d",
1000cc56:	4837      	ldr	r0, [pc, #220]	; (1000cd34 <ble_device_init+0x264>)
1000cc58:	4b37      	ldr	r3, [pc, #220]	; (1000cd38 <ble_device_init+0x268>)
1000cc5a:	4798      	blx	r3
1000cc5c:	792b      	ldrb	r3, [r5, #4]
1000cc5e:	796a      	ldrb	r2, [r5, #5]
1000cc60:	79a9      	ldrb	r1, [r5, #6]
1000cc62:	7828      	ldrb	r0, [r5, #0]
1000cc64:	9003      	str	r0, [sp, #12]
1000cc66:	7868      	ldrb	r0, [r5, #1]
1000cc68:	9002      	str	r0, [sp, #8]
1000cc6a:	78a8      	ldrb	r0, [r5, #2]
1000cc6c:	9001      	str	r0, [sp, #4]
1000cc6e:	78e8      	ldrb	r0, [r5, #3]
1000cc70:	9000      	str	r0, [sp, #0]
1000cc72:	4841      	ldr	r0, [pc, #260]	; (1000cd78 <ble_device_init+0x2a8>)
1000cc74:	4c32      	ldr	r4, [pc, #200]	; (1000cd40 <ble_device_init+0x270>)
1000cc76:	47a0      	blx	r4
	addr->addr[1],
	addr->addr[0], addr->type);
	
	/* Set device configuration */
	/* Device role */
	stDevConfig.role = (at_ble_dev_role_t)BLE_DEVICE_ROLE;
1000cc78:	ac06      	add	r4, sp, #24
1000cc7a:	230a      	movs	r3, #10
1000cc7c:	7023      	strb	r3, [r4, #0]
	/* device renew duration */
	stDevConfig.renew_dur = AT_RENEW_DUR_VAL_MIN;
1000cc7e:	4b3f      	ldr	r3, [pc, #252]	; (1000cd7c <ble_device_init+0x2ac>)
1000cc80:	8063      	strh	r3, [r4, #2]
	/* device address type */
	memcpy((uint8_t *)&stDevConfig.address, (uint8_t *)addr, sizeof(at_ble_addr_t));
1000cc82:	2207      	movs	r2, #7
1000cc84:	0029      	movs	r1, r5
1000cc86:	a807      	add	r0, sp, #28
1000cc88:	4b38      	ldr	r3, [pc, #224]	; (1000cd6c <ble_device_init+0x29c>)
1000cc8a:	4798      	blx	r3
	/* Attributes */
	stDevConfig.att_cfg.b2NamePerm = AT_BLE_WRITE_DISABLE;
1000cc8c:	2300      	movs	r3, #0
1000cc8e:	76e3      	strb	r3, [r4, #27]
	stDevConfig.att_cfg.b2AppearancePerm = AT_BLE_WRITE_DISABLE;
1000cc90:	7723      	strb	r3, [r4, #28]
	stDevConfig.att_cfg.b1EnableSpcs = 0;
1000cc92:	7763      	strb	r3, [r4, #29]
	stDevConfig.att_cfg.b1EnableServiceChanged = 0;
1000cc94:	77a3      	strb	r3, [r4, #30]
	stDevConfig.att_cfg.b2Rfu = AT_BLE_WRITE_DISABLE;
1000cc96:	77e3      	strb	r3, [r4, #31]
	/* Handles */
	stDevConfig.gap_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000cc98:	8423      	strh	r3, [r4, #32]
	stDevConfig.gatt_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000cc9a:	8463      	strh	r3, [r4, #34]	; 0x22
	/* MTU */
	stDevConfig.max_mtu = AT_MTU_VAL_RECOMMENDED;
1000cc9c:	2380      	movs	r3, #128	; 0x80
1000cc9e:	009b      	lsls	r3, r3, #2
1000cca0:	84a3      	strh	r3, [r4, #36]	; 0x24
	
	if(at_ble_set_dev_config(&stDevConfig) != AT_BLE_SUCCESS)
1000cca2:	0020      	movs	r0, r4
1000cca4:	4b36      	ldr	r3, [pc, #216]	; (1000cd80 <ble_device_init+0x2b0>)
1000cca6:	4798      	blx	r3
1000cca8:	2800      	cmp	r0, #0
1000ccaa:	d005      	beq.n	1000ccb8 <ble_device_init+0x1e8>
	{
		DBG_LOG("[ble_set_dev_config]\tSet BLE Device configuration failed");
1000ccac:	4821      	ldr	r0, [pc, #132]	; (1000cd34 <ble_device_init+0x264>)
1000ccae:	4b22      	ldr	r3, [pc, #136]	; (1000cd38 <ble_device_init+0x268>)
1000ccb0:	4798      	blx	r3
1000ccb2:	4834      	ldr	r0, [pc, #208]	; (1000cd84 <ble_device_init+0x2b4>)
1000ccb4:	4b22      	ldr	r3, [pc, #136]	; (1000cd40 <ble_device_init+0x270>)
1000ccb6:	4798      	blx	r3
	}
	
	if (at_ble_addr_set(addr) != AT_BLE_SUCCESS)
1000ccb8:	0028      	movs	r0, r5
1000ccba:	4b33      	ldr	r3, [pc, #204]	; (1000cd88 <ble_device_init+0x2b8>)
1000ccbc:	4798      	blx	r3
1000ccbe:	2800      	cmp	r0, #0
1000ccc0:	d005      	beq.n	1000ccce <ble_device_init+0x1fe>
	{
		DBG_LOG("[ble_set_dev_config]\tSet BLE Device Address failed");
1000ccc2:	481c      	ldr	r0, [pc, #112]	; (1000cd34 <ble_device_init+0x264>)
1000ccc4:	4b1c      	ldr	r3, [pc, #112]	; (1000cd38 <ble_device_init+0x268>)
1000ccc6:	4798      	blx	r3
1000ccc8:	4830      	ldr	r0, [pc, #192]	; (1000cd8c <ble_device_init+0x2bc>)
1000ccca:	4b1d      	ldr	r3, [pc, #116]	; (1000cd40 <ble_device_init+0x270>)
1000cccc:	4798      	blx	r3
	{
		DBG_LOG("Device name set failed");
	}
	
	ble_set_dev_config(addr);	
}
1000ccce:	b011      	add	sp, #68	; 0x44
1000ccd0:	bc3c      	pop	{r2, r3, r4, r5}
1000ccd2:	4690      	mov	r8, r2
1000ccd4:	4699      	mov	r9, r3
1000ccd6:	46a2      	mov	sl, r4
1000ccd8:	46ab      	mov	fp, r5
1000ccda:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ccdc:	10015d10 	.word	0x10015d10
1000cce0:	10015d18 	.word	0x10015d18
1000cce4:	10012571 	.word	0x10012571
1000cce8:	100173c4 	.word	0x100173c4
1000ccec:	000004e2 	.word	0x000004e2
1000ccf0:	10015830 	.word	0x10015830
1000ccf4:	10015d14 	.word	0x10015d14
1000ccf8:	100173fc 	.word	0x100173fc
1000ccfc:	100173f4 	.word	0x100173f4
1000cd00:	10017730 	.word	0x10017730
1000cd04:	10015430 	.word	0x10015430
1000cd08:	10015d20 	.word	0x10015d20
1000cd0c:	100173d8 	.word	0x100173d8
1000cd10:	1001739c 	.word	0x1001739c
1000cd14:	100173b0 	.word	0x100173b0
1000cd18:	10017104 	.word	0x10017104
1000cd1c:	100173f8 	.word	0x100173f8
1000cd20:	10017100 	.word	0x10017100
1000cd24:	10017388 	.word	0x10017388
1000cd28:	1001793c 	.word	0x1001793c
1000cd2c:	10017118 	.word	0x10017118
1000cd30:	10017384 	.word	0x10017384
1000cd34:	10013980 	.word	0x10013980
1000cd38:	100127d9 	.word	0x100127d9
1000cd3c:	10014de4 	.word	0x10014de4
1000cd40:	100126b9 	.word	0x100126b9
1000cd44:	1000e841 	.word	0x1000e841
1000cd48:	10014e08 	.word	0x10014e08
1000cd4c:	10014e34 	.word	0x10014e34
1000cd50:	100151e4 	.word	0x100151e4
1000cd54:	1000ca01 	.word	0x1000ca01
1000cd58:	10014798 	.word	0x10014798
1000cd5c:	10014e7c 	.word	0x10014e7c
1000cd60:	1000e759 	.word	0x1000e759
1000cd64:	10014e88 	.word	0x10014e88
1000cd68:	10014788 	.word	0x10014788
1000cd6c:	1001255f 	.word	0x1001255f
1000cd70:	1000e78d 	.word	0x1000e78d
1000cd74:	10014ea0 	.word	0x10014ea0
1000cd78:	10014ecc 	.word	0x10014ecc
1000cd7c:	00003a98 	.word	0x00003a98
1000cd80:	1000e7b1 	.word	0x1000e7b1
1000cd84:	10014f1c 	.word	0x10014f1c
1000cd88:	1000e9f5 	.word	0x1000e9f5
1000cd8c:	10014f58 	.word	0x10014f58

1000cd90 <ble_send_slave_sec_request>:
	return AT_BLE_FAILURE;
}

/** @brief function to send slave security request */
at_ble_status_t ble_send_slave_sec_request(at_ble_handle_t conn_handle)
{
1000cd90:	b510      	push	{r4, lr}
	#if BLE_PAIR_ENABLE
		if (at_ble_send_slave_sec_request(conn_handle, BLE_MITM_REQ, BLE_BOND_REQ) == AT_BLE_SUCCESS)
1000cd92:	2200      	movs	r2, #0
1000cd94:	2100      	movs	r1, #0
1000cd96:	4b0a      	ldr	r3, [pc, #40]	; (1000cdc0 <ble_send_slave_sec_request+0x30>)
1000cd98:	4798      	blx	r3
1000cd9a:	1e04      	subs	r4, r0, #0
1000cd9c:	d106      	bne.n	1000cdac <ble_send_slave_sec_request+0x1c>
		{
			DBG_LOG_DEV("Slave security request successful");
1000cd9e:	4809      	ldr	r0, [pc, #36]	; (1000cdc4 <ble_send_slave_sec_request+0x34>)
1000cda0:	4b09      	ldr	r3, [pc, #36]	; (1000cdc8 <ble_send_slave_sec_request+0x38>)
1000cda2:	4798      	blx	r3
1000cda4:	4809      	ldr	r0, [pc, #36]	; (1000cdcc <ble_send_slave_sec_request+0x3c>)
1000cda6:	4b0a      	ldr	r3, [pc, #40]	; (1000cdd0 <ble_send_slave_sec_request+0x40>)
1000cda8:	4798      	blx	r3
			return AT_BLE_SUCCESS;
1000cdaa:	e006      	b.n	1000cdba <ble_send_slave_sec_request+0x2a>
		}
		else
		{
			DBG_LOG("Slave security request failed");
1000cdac:	4805      	ldr	r0, [pc, #20]	; (1000cdc4 <ble_send_slave_sec_request+0x34>)
1000cdae:	4b06      	ldr	r3, [pc, #24]	; (1000cdc8 <ble_send_slave_sec_request+0x38>)
1000cdb0:	4798      	blx	r3
1000cdb2:	4808      	ldr	r0, [pc, #32]	; (1000cdd4 <ble_send_slave_sec_request+0x44>)
1000cdb4:	4b06      	ldr	r3, [pc, #24]	; (1000cdd0 <ble_send_slave_sec_request+0x40>)
1000cdb6:	4798      	blx	r3
		}
	#endif
	return AT_BLE_FAILURE;
1000cdb8:	24e2      	movs	r4, #226	; 0xe2
}
1000cdba:	0020      	movs	r0, r4
1000cdbc:	bd10      	pop	{r4, pc}
1000cdbe:	46c0      	nop			; (mov r8, r8)
1000cdc0:	1000f765 	.word	0x1000f765
1000cdc4:	10013980 	.word	0x10013980
1000cdc8:	100127d9 	.word	0x100127d9
1000cdcc:	10014fa8 	.word	0x10014fa8
1000cdd0:	100126b9 	.word	0x100126b9
1000cdd4:	10014fcc 	.word	0x10014fcc

1000cdd8 <ble_connected_state_handler>:
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000cdd8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000cdda:	465f      	mov	r7, fp
1000cddc:	464e      	mov	r6, r9
1000cdde:	4645      	mov	r5, r8
1000cde0:	b4e0      	push	{r5, r6, r7}
1000cde2:	b09a      	sub	sp, #104	; 0x68
1000cde4:	0005      	movs	r5, r0
	at_ble_connected_t *conn_params;
	uint8_t idx = 0;
	conn_params = (at_ble_connected_t *)params;
	bool peripheral_device_added = false;
	
	if (conn_params->conn_status == AT_BLE_SUCCESS)
1000cde6:	7a86      	ldrb	r6, [r0, #10]
1000cde8:	2e00      	cmp	r6, #0
1000cdea:	d000      	beq.n	1000cdee <ble_connected_state_handler+0x16>
1000cdec:	e0cc      	b.n	1000cf88 <ble_connected_state_handler+0x1b0>
	{
		DBG_LOG("Connected to peer device with address 0x%02x%02x%02x%02x%02x%02x",
1000cdee:	4878      	ldr	r0, [pc, #480]	; (1000cfd0 <ble_connected_state_handler+0x1f8>)
1000cdf0:	4f78      	ldr	r7, [pc, #480]	; (1000cfd4 <ble_connected_state_handler+0x1fc>)
1000cdf2:	47b8      	blx	r7
1000cdf4:	792b      	ldrb	r3, [r5, #4]
1000cdf6:	796a      	ldrb	r2, [r5, #5]
1000cdf8:	79a9      	ldrb	r1, [r5, #6]
1000cdfa:	7868      	ldrb	r0, [r5, #1]
1000cdfc:	9002      	str	r0, [sp, #8]
1000cdfe:	78a8      	ldrb	r0, [r5, #2]
1000ce00:	9001      	str	r0, [sp, #4]
1000ce02:	78e8      	ldrb	r0, [r5, #3]
1000ce04:	9000      	str	r0, [sp, #0]
1000ce06:	4874      	ldr	r0, [pc, #464]	; (1000cfd8 <ble_connected_state_handler+0x200>)
1000ce08:	4c74      	ldr	r4, [pc, #464]	; (1000cfdc <ble_connected_state_handler+0x204>)
1000ce0a:	47a0      	blx	r4
		conn_params->peer_addr.addr[3],
		conn_params->peer_addr.addr[2],
		conn_params->peer_addr.addr[1],
		conn_params->peer_addr.addr[0]);
		
		DBG_LOG("Connection Handle %d", conn_params->handle);
1000ce0c:	4870      	ldr	r0, [pc, #448]	; (1000cfd0 <ble_connected_state_handler+0x1f8>)
1000ce0e:	47b8      	blx	r7
1000ce10:	8929      	ldrh	r1, [r5, #8]
1000ce12:	4873      	ldr	r0, [pc, #460]	; (1000cfe0 <ble_connected_state_handler+0x208>)
1000ce14:	47a0      	blx	r4
		
		memcpy((uint8_t *)&connected_state_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));	
1000ce16:	2212      	movs	r2, #18
1000ce18:	0029      	movs	r1, r5
1000ce1a:	4872      	ldr	r0, [pc, #456]	; (1000cfe4 <ble_connected_state_handler+0x20c>)
1000ce1c:	4b72      	ldr	r3, [pc, #456]	; (1000cfe8 <ble_connected_state_handler+0x210>)
1000ce1e:	4798      	blx	r3
		if(memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000ce20:	9504      	str	r5, [sp, #16]
1000ce22:	2207      	movs	r2, #7
1000ce24:	0029      	movs	r1, r5
1000ce26:	4871      	ldr	r0, [pc, #452]	; (1000cfec <ble_connected_state_handler+0x214>)
1000ce28:	4b71      	ldr	r3, [pc, #452]	; (1000cff0 <ble_connected_state_handler+0x218>)
1000ce2a:	4798      	blx	r3
1000ce2c:	2800      	cmp	r0, #0
1000ce2e:	d100      	bne.n	1000ce32 <ble_connected_state_handler+0x5a>
1000ce30:	e0b3      	b.n	1000cf9a <ble_connected_state_handler+0x1c2>
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
1000ce32:	782b      	ldrb	r3, [r5, #0]
1000ce34:	2b02      	cmp	r3, #2
1000ce36:	d000      	beq.n	1000ce3a <ble_connected_state_handler+0x62>
1000ce38:	e0af      	b.n	1000cf9a <ble_connected_state_handler+0x1c2>
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
1000ce3a:	2250      	movs	r2, #80	; 0x50
1000ce3c:	2100      	movs	r1, #0
1000ce3e:	a806      	add	r0, sp, #24
1000ce40:	4b6c      	ldr	r3, [pc, #432]	; (1000cff4 <ble_connected_state_handler+0x21c>)
1000ce42:	4798      	blx	r3
1000ce44:	4f6c      	ldr	r7, [pc, #432]	; (1000cff8 <ble_connected_state_handler+0x220>)
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
1000ce46:	2300      	movs	r3, #0
1000ce48:	e00b      	b.n	1000ce62 <ble_connected_state_handler+0x8a>
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000ce4a:	1c59      	adds	r1, r3, #1
1000ce4c:	7814      	ldrb	r4, [r2, #0]
1000ce4e:	a806      	add	r0, sp, #24
1000ce50:	54c4      	strb	r4, [r0, r3]
1000ce52:	3201      	adds	r2, #1
1000ce54:	b28b      	uxth	r3, r1
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
1000ce56:	42b3      	cmp	r3, r6
1000ce58:	d1f7      	bne.n	1000ce4a <ble_connected_state_handler+0x72>
1000ce5a:	377c      	adds	r7, #124	; 0x7c
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000ce5c:	1e33      	subs	r3, r6, #0
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
1000ce5e:	2b50      	cmp	r3, #80	; 0x50
1000ce60:	d004      	beq.n	1000ce6c <ble_connected_state_handler+0x94>
1000ce62:	001e      	movs	r6, r3
1000ce64:	3610      	adds	r6, #16
1000ce66:	b2b6      	uxth	r6, r6
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000ce68:	003a      	movs	r2, r7
1000ce6a:	e7ee      	b.n	1000ce4a <ble_connected_state_handler+0x72>
					}
					
				}
				if (nb_keys)
				{
					if(at_ble_random_address_resolve(BLE_MAX_DEVICE_CONNECTED, &conn_params->peer_addr, irk_key) == AT_BLE_SUCCESS)
1000ce6c:	aa06      	add	r2, sp, #24
1000ce6e:	0029      	movs	r1, r5
1000ce70:	2005      	movs	r0, #5
1000ce72:	4b62      	ldr	r3, [pc, #392]	; (1000cffc <ble_connected_state_handler+0x224>)
1000ce74:	4798      	blx	r3
1000ce76:	1e06      	subs	r6, r0, #0
1000ce78:	d106      	bne.n	1000ce88 <ble_connected_state_handler+0xb0>
					{
						DBG_LOG_DEV("Resolving Random address success**");
1000ce7a:	4855      	ldr	r0, [pc, #340]	; (1000cfd0 <ble_connected_state_handler+0x1f8>)
1000ce7c:	4b55      	ldr	r3, [pc, #340]	; (1000cfd4 <ble_connected_state_handler+0x1fc>)
1000ce7e:	4798      	blx	r3
1000ce80:	485f      	ldr	r0, [pc, #380]	; (1000d000 <ble_connected_state_handler+0x228>)
1000ce82:	4b56      	ldr	r3, [pc, #344]	; (1000cfdc <ble_connected_state_handler+0x204>)
1000ce84:	4798      	blx	r3
						return AT_BLE_SUCCESS;
1000ce86:	e09c      	b.n	1000cfc2 <ble_connected_state_handler+0x1ea>
					}
					else
					{
						DBG_LOG("Resolving Random address failed**");
1000ce88:	4851      	ldr	r0, [pc, #324]	; (1000cfd0 <ble_connected_state_handler+0x1f8>)
1000ce8a:	4b52      	ldr	r3, [pc, #328]	; (1000cfd4 <ble_connected_state_handler+0x1fc>)
1000ce8c:	4798      	blx	r3
1000ce8e:	485d      	ldr	r0, [pc, #372]	; (1000d004 <ble_connected_state_handler+0x22c>)
1000ce90:	4b52      	ldr	r3, [pc, #328]	; (1000cfdc <ble_connected_state_handler+0x204>)
1000ce92:	4798      	blx	r3
						return AT_BLE_FAILURE;
1000ce94:	26e2      	movs	r6, #226	; 0xe2
1000ce96:	e094      	b.n	1000cfc2 <ble_connected_state_handler+0x1ea>
1000ce98:	b2e7      	uxtb	r7, r4
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000ce9a:	9405      	str	r4, [sp, #20]
1000ce9c:	2207      	movs	r2, #7
1000ce9e:	9904      	ldr	r1, [sp, #16]
1000cea0:	4648      	mov	r0, r9
1000cea2:	47d8      	blx	fp
1000cea4:	2800      	cmp	r0, #0
1000cea6:	d109      	bne.n	1000cebc <ble_connected_state_handler+0xe4>
				{
					ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000cea8:	9a05      	ldr	r2, [sp, #20]
1000ceaa:	0153      	lsls	r3, r2, #5
1000ceac:	1a9b      	subs	r3, r3, r2
1000ceae:	009a      	lsls	r2, r3, #2
1000ceb0:	4b55      	ldr	r3, [pc, #340]	; (1000d008 <ble_connected_state_handler+0x230>)
1000ceb2:	189b      	adds	r3, r3, r2
1000ceb4:	335e      	adds	r3, #94	; 0x5e
1000ceb6:	2202      	movs	r2, #2
1000ceb8:	701a      	strb	r2, [r3, #0]
1000ceba:	e02b      	b.n	1000cf14 <ble_connected_state_handler+0x13c>
1000cebc:	3401      	adds	r4, #1
1000cebe:	237c      	movs	r3, #124	; 0x7c
1000cec0:	469c      	mov	ip, r3
1000cec2:	44e1      	add	r9, ip
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000cec4:	2c05      	cmp	r4, #5
1000cec6:	d1e7      	bne.n	1000ce98 <ble_connected_state_handler+0xc0>
1000cec8:	e072      	b.n	1000cfb0 <ble_connected_state_handler+0x1d8>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000ceca:	001c      	movs	r4, r3
1000cecc:	7811      	ldrb	r1, [r2, #0]
1000cece:	2900      	cmp	r1, #0
1000ced0:	d11a      	bne.n	1000cf08 <ble_connected_state_handler+0x130>
1000ced2:	e001      	b.n	1000ced8 <ble_connected_state_handler+0x100>
1000ced4:	2400      	movs	r4, #0
1000ced6:	2700      	movs	r7, #0
					{
						/* @Todo Need to Handle Random Address */
						memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));
1000ced8:	0163      	lsls	r3, r4, #5
1000ceda:	4699      	mov	r9, r3
1000cedc:	1b18      	subs	r0, r3, r4
1000cede:	0080      	lsls	r0, r0, #2
1000cee0:	4b49      	ldr	r3, [pc, #292]	; (1000d008 <ble_connected_state_handler+0x230>)
1000cee2:	4698      	mov	r8, r3
1000cee4:	4440      	add	r0, r8
1000cee6:	2212      	movs	r2, #18
1000cee8:	0029      	movs	r1, r5
1000ceea:	4b3f      	ldr	r3, [pc, #252]	; (1000cfe8 <ble_connected_state_handler+0x210>)
1000ceec:	4798      	blx	r3
						ble_device_count++;
1000ceee:	4a47      	ldr	r2, [pc, #284]	; (1000d00c <ble_connected_state_handler+0x234>)
1000cef0:	7813      	ldrb	r3, [r2, #0]
1000cef2:	3301      	adds	r3, #1
1000cef4:	b2db      	uxtb	r3, r3
1000cef6:	7013      	strb	r3, [r2, #0]
						ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000cef8:	464b      	mov	r3, r9
1000cefa:	1b1b      	subs	r3, r3, r4
1000cefc:	009b      	lsls	r3, r3, #2
1000cefe:	4443      	add	r3, r8
1000cf00:	335e      	adds	r3, #94	; 0x5e
1000cf02:	2202      	movs	r2, #2
1000cf04:	701a      	strb	r2, [r3, #0]
						break;
1000cf06:	e005      	b.n	1000cf14 <ble_connected_state_handler+0x13c>
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000cf08:	1c79      	adds	r1, r7, #1
1000cf0a:	b2cf      	uxtb	r7, r1
1000cf0c:	3301      	adds	r3, #1
1000cf0e:	327c      	adds	r2, #124	; 0x7c
1000cf10:	2f05      	cmp	r7, #5
1000cf12:	d1da      	bne.n	1000ceca <ble_connected_state_handler+0xf2>
						break;
					}
				}
			}
			
			if(!memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000cf14:	2207      	movs	r2, #7
1000cf16:	0029      	movs	r1, r5
1000cf18:	4834      	ldr	r0, [pc, #208]	; (1000cfec <ble_connected_state_handler+0x214>)
1000cf1a:	4b35      	ldr	r3, [pc, #212]	; (1000cff0 <ble_connected_state_handler+0x218>)
1000cf1c:	4798      	blx	r3
1000cf1e:	2800      	cmp	r0, #0
1000cf20:	d10c      	bne.n	1000cf3c <ble_connected_state_handler+0x164>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
1000cf22:	017b      	lsls	r3, r7, #5
1000cf24:	1bdb      	subs	r3, r3, r7
1000cf26:	009b      	lsls	r3, r3, #2
1000cf28:	4a37      	ldr	r2, [pc, #220]	; (1000d008 <ble_connected_state_handler+0x230>)
1000cf2a:	18d3      	adds	r3, r2, r3
1000cf2c:	2205      	movs	r2, #5
1000cf2e:	749a      	strb	r2, [r3, #18]
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000cf30:	3202      	adds	r2, #2
1000cf32:	2100      	movs	r1, #0
1000cf34:	482d      	ldr	r0, [pc, #180]	; (1000cfec <ble_connected_state_handler+0x214>)
1000cf36:	4b2f      	ldr	r3, [pc, #188]	; (1000cff4 <ble_connected_state_handler+0x21c>)
1000cf38:	4798      	blx	r3
1000cf3a:	e042      	b.n	1000cfc2 <ble_connected_state_handler+0x1ea>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
			}
			else
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000cf3c:	4b32      	ldr	r3, [pc, #200]	; (1000d008 <ble_connected_state_handler+0x230>)
1000cf3e:	4698      	mov	r8, r3
1000cf40:	017c      	lsls	r4, r7, #5
1000cf42:	1be3      	subs	r3, r4, r7
1000cf44:	009b      	lsls	r3, r3, #2
1000cf46:	4443      	add	r3, r8
1000cf48:	220a      	movs	r2, #10
1000cf4a:	749a      	strb	r2, [r3, #18]
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000cf4c:	3a03      	subs	r2, #3
1000cf4e:	2100      	movs	r1, #0
1000cf50:	4826      	ldr	r0, [pc, #152]	; (1000cfec <ble_connected_state_handler+0x214>)
1000cf52:	4b28      	ldr	r3, [pc, #160]	; (1000cff4 <ble_connected_state_handler+0x21c>)
1000cf54:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
		}		
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000cf56:	1be4      	subs	r4, r4, r7
1000cf58:	00a4      	lsls	r4, r4, #2
1000cf5a:	4444      	add	r4, r8
1000cf5c:	7ca3      	ldrb	r3, [r4, #18]
1000cf5e:	2b0a      	cmp	r3, #10
1000cf60:	d12f      	bne.n	1000cfc2 <ble_connected_state_handler+0x1ea>
1000cf62:	e00d      	b.n	1000cf80 <ble_connected_state_handler+0x1a8>
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
					
		}
		else
		{
			DBG_LOG("Max number of connection reached: %d ===>Disconnecting...", ble_device_count);
1000cf64:	481a      	ldr	r0, [pc, #104]	; (1000cfd0 <ble_connected_state_handler+0x1f8>)
1000cf66:	4b1b      	ldr	r3, [pc, #108]	; (1000cfd4 <ble_connected_state_handler+0x1fc>)
1000cf68:	4798      	blx	r3
1000cf6a:	4b28      	ldr	r3, [pc, #160]	; (1000d00c <ble_connected_state_handler+0x234>)
1000cf6c:	7819      	ldrb	r1, [r3, #0]
1000cf6e:	b2c9      	uxtb	r1, r1
1000cf70:	4827      	ldr	r0, [pc, #156]	; (1000d010 <ble_connected_state_handler+0x238>)
1000cf72:	4b1a      	ldr	r3, [pc, #104]	; (1000cfdc <ble_connected_state_handler+0x204>)
1000cf74:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
1000cf76:	8928      	ldrh	r0, [r5, #8]
1000cf78:	2113      	movs	r1, #19
1000cf7a:	4b26      	ldr	r3, [pc, #152]	; (1000d014 <ble_connected_state_handler+0x23c>)
1000cf7c:	4798      	blx	r3
1000cf7e:	e020      	b.n	1000cfc2 <ble_connected_state_handler+0x1ea>
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
        {
	 		ble_send_slave_sec_request(conn_params->handle);
1000cf80:	8928      	ldrh	r0, [r5, #8]
1000cf82:	4b25      	ldr	r3, [pc, #148]	; (1000d018 <ble_connected_state_handler+0x240>)
1000cf84:	4798      	blx	r3
1000cf86:	e01c      	b.n	1000cfc2 <ble_connected_state_handler+0x1ea>
        }
#endif
	} 
	else
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
1000cf88:	4811      	ldr	r0, [pc, #68]	; (1000cfd0 <ble_connected_state_handler+0x1f8>)
1000cf8a:	4b12      	ldr	r3, [pc, #72]	; (1000cfd4 <ble_connected_state_handler+0x1fc>)
1000cf8c:	4798      	blx	r3
1000cf8e:	7aa9      	ldrb	r1, [r5, #10]
1000cf90:	4822      	ldr	r0, [pc, #136]	; (1000d01c <ble_connected_state_handler+0x244>)
1000cf92:	4b12      	ldr	r3, [pc, #72]	; (1000cfdc <ble_connected_state_handler+0x204>)
1000cf94:	4798      	blx	r3
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
1000cf96:	2600      	movs	r6, #0
1000cf98:	e013      	b.n	1000cfc2 <ble_connected_state_handler+0x1ea>
					DBG_LOG_DEV("New Connection");
				}				
			}
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
1000cf9a:	4b1c      	ldr	r3, [pc, #112]	; (1000d00c <ble_connected_state_handler+0x234>)
1000cf9c:	781b      	ldrb	r3, [r3, #0]
1000cf9e:	b2db      	uxtb	r3, r3
1000cfa0:	2b04      	cmp	r3, #4
1000cfa2:	d8df      	bhi.n	1000cf64 <ble_connected_state_handler+0x18c>
1000cfa4:	4b18      	ldr	r3, [pc, #96]	; (1000d008 <ble_connected_state_handler+0x230>)
1000cfa6:	4699      	mov	r9, r3
1000cfa8:	2400      	movs	r4, #0
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000cfaa:	4b11      	ldr	r3, [pc, #68]	; (1000cff0 <ble_connected_state_handler+0x218>)
1000cfac:	469b      	mov	fp, r3
1000cfae:	e773      	b.n	1000ce98 <ble_connected_state_handler+0xc0>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000cfb0:	235e      	movs	r3, #94	; 0x5e
1000cfb2:	4a15      	ldr	r2, [pc, #84]	; (1000d008 <ble_connected_state_handler+0x230>)
1000cfb4:	5cd3      	ldrb	r3, [r2, r3]
1000cfb6:	2b00      	cmp	r3, #0
1000cfb8:	d08c      	beq.n	1000ced4 <ble_connected_state_handler+0xfc>
1000cfba:	4a19      	ldr	r2, [pc, #100]	; (1000d020 <ble_connected_state_handler+0x248>)
1000cfbc:	2301      	movs	r3, #1
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000cfbe:	2701      	movs	r7, #1
1000cfc0:	e783      	b.n	1000ceca <ble_connected_state_handler+0xf2>
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
}
1000cfc2:	0030      	movs	r0, r6
1000cfc4:	b01a      	add	sp, #104	; 0x68
1000cfc6:	bc1c      	pop	{r2, r3, r4}
1000cfc8:	4690      	mov	r8, r2
1000cfca:	4699      	mov	r9, r3
1000cfcc:	46a3      	mov	fp, r4
1000cfce:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000cfd0:	10013980 	.word	0x10013980
1000cfd4:	100127d9 	.word	0x100127d9
1000cfd8:	10014fec 	.word	0x10014fec
1000cfdc:	100126b9 	.word	0x100126b9
1000cfe0:	10015030 	.word	0x10015030
1000cfe4:	100173c4 	.word	0x100173c4
1000cfe8:	1001255f 	.word	0x1001255f
1000cfec:	10015d18 	.word	0x10015d18
1000cff0:	10012541 	.word	0x10012541
1000cff4:	10012571 	.word	0x10012571
1000cff8:	1001715e 	.word	0x1001715e
1000cffc:	1000ec61 	.word	0x1000ec61
1000d000:	10015048 	.word	0x10015048
1000d004:	1001506c 	.word	0x1001506c
1000d008:	10017118 	.word	0x10017118
1000d00c:	10017384 	.word	0x10017384
1000d010:	10015090 	.word	0x10015090
1000d014:	1000ec35 	.word	0x1000ec35
1000d018:	1000cd91 	.word	0x1000cd91
1000d01c:	100150cc 	.word	0x100150cc
1000d020:	100171f2 	.word	0x100171f2

1000d024 <ble_resolv_rand_addr_handler>:

at_ble_status_t ble_resolv_rand_addr_handler(void *params)
{
1000d024:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d026:	4647      	mov	r7, r8
1000d028:	b480      	push	{r7}
	uint8_t idx;	
	bool device_found = false;
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
1000d02a:	7803      	ldrb	r3, [r0, #0]
1000d02c:	2b00      	cmp	r3, #0
1000d02e:	d152      	bne.n	1000d0d6 <ble_resolv_rand_addr_handler+0xb2>
1000d030:	4d3e      	ldr	r5, [pc, #248]	; (1000d12c <ble_resolv_rand_addr_handler+0x108>)
1000d032:	2400      	movs	r4, #0
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			/* Check the Resolved Address */
			if (!memcmp((uint8_t *)ble_resolv_rand_addr_status->irk, (uint8_t *)ble_dev_info[idx].bond_info.peer_irk.key, AT_BLE_MAX_KEY_LEN))
1000d034:	1c46      	adds	r6, r0, #1
1000d036:	4f3e      	ldr	r7, [pc, #248]	; (1000d130 <ble_resolv_rand_addr_handler+0x10c>)
1000d038:	2210      	movs	r2, #16
1000d03a:	0029      	movs	r1, r5
1000d03c:	0030      	movs	r0, r6
1000d03e:	47b8      	blx	r7
1000d040:	2800      	cmp	r0, #0
1000d042:	d031      	beq.n	1000d0a8 <ble_resolv_rand_addr_handler+0x84>
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d044:	3401      	adds	r4, #1
1000d046:	b2e4      	uxtb	r4, r4
1000d048:	357c      	adds	r5, #124	; 0x7c
1000d04a:	2c05      	cmp	r4, #5
1000d04c:	d1f4      	bne.n	1000d038 <ble_resolv_rand_addr_handler+0x14>
1000d04e:	e042      	b.n	1000d0d6 <ble_resolv_rand_addr_handler+0xb2>
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000d050:	001d      	movs	r5, r3
1000d052:	7811      	ldrb	r1, [r2, #0]
1000d054:	2900      	cmp	r1, #0
1000d056:	d11b      	bne.n	1000d090 <ble_resolv_rand_addr_handler+0x6c>
1000d058:	e001      	b.n	1000d05e <ble_resolv_rand_addr_handler+0x3a>
1000d05a:	2500      	movs	r5, #0
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d05c:	2400      	movs	r4, #0
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
			{
				memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000d05e:	4b35      	ldr	r3, [pc, #212]	; (1000d134 <ble_resolv_rand_addr_handler+0x110>)
1000d060:	4698      	mov	r8, r3
1000d062:	016e      	lsls	r6, r5, #5
1000d064:	1b77      	subs	r7, r6, r5
1000d066:	00bf      	lsls	r7, r7, #2
1000d068:	4447      	add	r7, r8
1000d06a:	2212      	movs	r2, #18
1000d06c:	4932      	ldr	r1, [pc, #200]	; (1000d138 <ble_resolv_rand_addr_handler+0x114>)
1000d06e:	0038      	movs	r0, r7
1000d070:	4b32      	ldr	r3, [pc, #200]	; (1000d13c <ble_resolv_rand_addr_handler+0x118>)
1000d072:	4798      	blx	r3
				ble_device_count++;
1000d074:	4a32      	ldr	r2, [pc, #200]	; (1000d140 <ble_resolv_rand_addr_handler+0x11c>)
1000d076:	7813      	ldrb	r3, [r2, #0]
1000d078:	3301      	adds	r3, #1
1000d07a:	b2db      	uxtb	r3, r3
1000d07c:	7013      	strb	r3, [r2, #0]
				ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000d07e:	375e      	adds	r7, #94	; 0x5e
1000d080:	2302      	movs	r3, #2
1000d082:	703b      	strb	r3, [r7, #0]
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000d084:	1b75      	subs	r5, r6, r5
1000d086:	00ad      	lsls	r5, r5, #2
1000d088:	4445      	add	r5, r8
1000d08a:	3308      	adds	r3, #8
1000d08c:	74ab      	strb	r3, [r5, #18]
				peripheral_device_added = true;
				break;
1000d08e:	e031      	b.n	1000d0f4 <ble_resolv_rand_addr_handler+0xd0>
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d090:	3401      	adds	r4, #1
1000d092:	b2e4      	uxtb	r4, r4
1000d094:	3301      	adds	r3, #1
1000d096:	327c      	adds	r2, #124	; 0x7c
1000d098:	2c05      	cmp	r4, #5
1000d09a:	d1d9      	bne.n	1000d050 <ble_resolv_rand_addr_handler+0x2c>
1000d09c:	e03a      	b.n	1000d114 <ble_resolv_rand_addr_handler+0xf0>
	}
	DBG_LOG_DEV("Device idx:%d",idx);
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
	{
		ble_send_slave_sec_request(connected_state_info.handle);
1000d09e:	4b26      	ldr	r3, [pc, #152]	; (1000d138 <ble_resolv_rand_addr_handler+0x114>)
1000d0a0:	8918      	ldrh	r0, [r3, #8]
1000d0a2:	4b28      	ldr	r3, [pc, #160]	; (1000d144 <ble_resolv_rand_addr_handler+0x120>)
1000d0a4:	4798      	blx	r3
1000d0a6:	e03c      	b.n	1000d122 <ble_resolv_rand_addr_handler+0xfe>
		
	}
	
	if (device_found)
	{
		DBG_LOG_DEV("##########Device Found");
1000d0a8:	4827      	ldr	r0, [pc, #156]	; (1000d148 <ble_resolv_rand_addr_handler+0x124>)
1000d0aa:	4b28      	ldr	r3, [pc, #160]	; (1000d14c <ble_resolv_rand_addr_handler+0x128>)
1000d0ac:	4798      	blx	r3
1000d0ae:	4828      	ldr	r0, [pc, #160]	; (1000d150 <ble_resolv_rand_addr_handler+0x12c>)
1000d0b0:	4b28      	ldr	r3, [pc, #160]	; (1000d154 <ble_resolv_rand_addr_handler+0x130>)
1000d0b2:	4798      	blx	r3
		ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000d0b4:	481f      	ldr	r0, [pc, #124]	; (1000d134 <ble_resolv_rand_addr_handler+0x110>)
1000d0b6:	0163      	lsls	r3, r4, #5
1000d0b8:	1b1a      	subs	r2, r3, r4
1000d0ba:	0092      	lsls	r2, r2, #2
1000d0bc:	1882      	adds	r2, r0, r2
1000d0be:	0011      	movs	r1, r2
1000d0c0:	315e      	adds	r1, #94	; 0x5e
1000d0c2:	2502      	movs	r5, #2
1000d0c4:	700d      	strb	r5, [r1, #0]
		ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000d0c6:	210a      	movs	r1, #10
1000d0c8:	7491      	strb	r1, [r2, #18]
		memcpy((uint8_t *)&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000d0ca:	0010      	movs	r0, r2
1000d0cc:	2212      	movs	r2, #18
1000d0ce:	491a      	ldr	r1, [pc, #104]	; (1000d138 <ble_resolv_rand_addr_handler+0x114>)
1000d0d0:	4b1a      	ldr	r3, [pc, #104]	; (1000d13c <ble_resolv_rand_addr_handler+0x118>)
1000d0d2:	4798      	blx	r3
1000d0d4:	e00e      	b.n	1000d0f4 <ble_resolv_rand_addr_handler+0xd0>
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
1000d0d6:	481c      	ldr	r0, [pc, #112]	; (1000d148 <ble_resolv_rand_addr_handler+0x124>)
1000d0d8:	4b1c      	ldr	r3, [pc, #112]	; (1000d14c <ble_resolv_rand_addr_handler+0x128>)
1000d0da:	4798      	blx	r3
1000d0dc:	481e      	ldr	r0, [pc, #120]	; (1000d158 <ble_resolv_rand_addr_handler+0x134>)
1000d0de:	4b1d      	ldr	r3, [pc, #116]	; (1000d154 <ble_resolv_rand_addr_handler+0x130>)
1000d0e0:	4798      	blx	r3
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000d0e2:	235e      	movs	r3, #94	; 0x5e
1000d0e4:	4a13      	ldr	r2, [pc, #76]	; (1000d134 <ble_resolv_rand_addr_handler+0x110>)
1000d0e6:	5cd3      	ldrb	r3, [r2, r3]
1000d0e8:	2b00      	cmp	r3, #0
1000d0ea:	d0b6      	beq.n	1000d05a <ble_resolv_rand_addr_handler+0x36>
1000d0ec:	4a1b      	ldr	r2, [pc, #108]	; (1000d15c <ble_resolv_rand_addr_handler+0x138>)
1000d0ee:	2301      	movs	r3, #1
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d0f0:	2401      	movs	r4, #1
1000d0f2:	e7ad      	b.n	1000d050 <ble_resolv_rand_addr_handler+0x2c>
				peripheral_device_added = true;
				break;
			}
		}
	}
	DBG_LOG_DEV("Device idx:%d",idx);
1000d0f4:	4814      	ldr	r0, [pc, #80]	; (1000d148 <ble_resolv_rand_addr_handler+0x124>)
1000d0f6:	4b15      	ldr	r3, [pc, #84]	; (1000d14c <ble_resolv_rand_addr_handler+0x128>)
1000d0f8:	4798      	blx	r3
1000d0fa:	0021      	movs	r1, r4
1000d0fc:	4818      	ldr	r0, [pc, #96]	; (1000d160 <ble_resolv_rand_addr_handler+0x13c>)
1000d0fe:	4b15      	ldr	r3, [pc, #84]	; (1000d154 <ble_resolv_rand_addr_handler+0x130>)
1000d100:	4798      	blx	r3
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000d102:	0163      	lsls	r3, r4, #5
1000d104:	1b1c      	subs	r4, r3, r4
1000d106:	00a4      	lsls	r4, r4, #2
1000d108:	4b0a      	ldr	r3, [pc, #40]	; (1000d134 <ble_resolv_rand_addr_handler+0x110>)
1000d10a:	191c      	adds	r4, r3, r4
1000d10c:	7ca3      	ldrb	r3, [r4, #18]
1000d10e:	2b0a      	cmp	r3, #10
1000d110:	d107      	bne.n	1000d122 <ble_resolv_rand_addr_handler+0xfe>
1000d112:	e7c4      	b.n	1000d09e <ble_resolv_rand_addr_handler+0x7a>
				peripheral_device_added = true;
				break;
			}
		}
	}
	DBG_LOG_DEV("Device idx:%d",idx);
1000d114:	480c      	ldr	r0, [pc, #48]	; (1000d148 <ble_resolv_rand_addr_handler+0x124>)
1000d116:	4b0d      	ldr	r3, [pc, #52]	; (1000d14c <ble_resolv_rand_addr_handler+0x128>)
1000d118:	4798      	blx	r3
1000d11a:	2105      	movs	r1, #5
1000d11c:	4810      	ldr	r0, [pc, #64]	; (1000d160 <ble_resolv_rand_addr_handler+0x13c>)
1000d11e:	4b0d      	ldr	r3, [pc, #52]	; (1000d154 <ble_resolv_rand_addr_handler+0x130>)
1000d120:	4798      	blx	r3
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
	
}
1000d122:	2000      	movs	r0, #0
1000d124:	bc04      	pop	{r2}
1000d126:	4690      	mov	r8, r2
1000d128:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d12a:	46c0      	nop			; (mov r8, r8)
1000d12c:	1001715e 	.word	0x1001715e
1000d130:	10012541 	.word	0x10012541
1000d134:	10017118 	.word	0x10017118
1000d138:	100173c4 	.word	0x100173c4
1000d13c:	1001255f 	.word	0x1001255f
1000d140:	10017384 	.word	0x10017384
1000d144:	1000cd91 	.word	0x1000cd91
1000d148:	10013980 	.word	0x10013980
1000d14c:	100127d9 	.word	0x100127d9
1000d150:	100150f4 	.word	0x100150f4
1000d154:	100126b9 	.word	0x100126b9
1000d158:	1001510c 	.word	0x1001510c
1000d15c:	100171f2 	.word	0x100171f2
1000d160:	10015128 	.word	0x10015128

1000d164 <ble_advertisement_data_set>:
	}
}

/* Advertisement Data will be set based on the advertisement configuration */
at_ble_status_t ble_advertisement_data_set(void)
{
1000d164:	b530      	push	{r4, r5, lr}
1000d166:	b091      	sub	sp, #68	; 0x44
		uint8_t length_field_ind;
		uint8_t adv_element_len;
		adv_buf[adv_data_element.len] = adv_data_element.len;
		length_field_ind = adv_data_element.len;
		adv_data_element.len++;
		adv_buf[adv_data_element.len++] = COMPLETE_LIST_16BIT_SERV_UUIDS;
1000d168:	ac08      	add	r4, sp, #32
1000d16a:	2203      	movs	r2, #3
1000d16c:	7062      	strb	r2, [r4, #1]
		MREPEAT(SERVICE_UUID16_MAX_NUM, _CONF_SERVICE_16BIT_UUID, &adv_data_element);
1000d16e:	2302      	movs	r3, #2
1000d170:	70a3      	strb	r3, [r4, #2]
1000d172:	3316      	adds	r3, #22
1000d174:	70e3      	strb	r3, [r4, #3]
1000d176:	7122      	strb	r2, [r4, #4]
1000d178:	7163      	strb	r3, [r4, #5]
1000d17a:	3201      	adds	r2, #1
1000d17c:	71a2      	strb	r2, [r4, #6]
1000d17e:	71e3      	strb	r3, [r4, #7]
1000d180:	320b      	adds	r2, #11
1000d182:	7222      	strb	r2, [r4, #8]
1000d184:	7263      	strb	r3, [r4, #9]
		adv_element_len = adv_data_element.len - (length_field_ind + ADV_ELEMENT_SIZE);
		if(adv_element_len) 
		{			
			adv_buf[length_field_ind] = adv_element_len+ADV_TYPE_SIZE;
1000d186:	2509      	movs	r5, #9
1000d188:	7025      	strb	r5, [r4, #0]
	#endif
	
	#if (BLE_GAP_ADV_COMPLETE_LOCAL_NAME_ENABLE && !BLE_GAP_ADV_SHORTENED_LOCAL_NAME_ENABLE)
	#if (BLE_GAP_ADV_COMPLETE_LOCAL_NAME_SCN_RSP_ENABLE != SCAN_RESPONSE_ONLY_ENABLE)
	if((adv_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_TYPE_FLAG_SIZE + ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH))) {
		adv_buf[adv_data_element.len++] = BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH + ADV_TYPE_SIZE;
1000d18a:	3b0e      	subs	r3, #14
1000d18c:	72a3      	strb	r3, [r4, #10]
		adv_buf[adv_data_element.len++] = COMPLETE_LOCAL_NAME;
1000d18e:	72e5      	strb	r5, [r4, #11]
		memcpy(&adv_buf[adv_data_element.len], BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME, BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH);
1000d190:	aa0b      	add	r2, sp, #44	; 0x2c
1000d192:	4b16      	ldr	r3, [pc, #88]	; (1000d1ec <ble_advertisement_data_set+0x88>)
1000d194:	cb03      	ldmia	r3!, {r0, r1}
1000d196:	c203      	stmia	r2!, {r0, r1}
1000d198:	781b      	ldrb	r3, [r3, #0]
1000d19a:	7013      	strb	r3, [r2, #0]
	#endif
	#if ((BLE_GAP_ADV_SERVICE_SOLTN_128BIT_UUID_SCN_RSP_ENABLE == SCAN_RESPONSE_ENABLE) || (BLE_GAP_ADV_SERVICE_SOLTN_128BIT_UUID_SCN_RSP_ENABLE == SCAN_RESPONSE_ONLY_ENABLE))
	else if((scan_resp_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_ELEMENT_SIZE + BLE_GAP_ADV_SERVICE_128BIT_UUID_LENGTH))) {
		uint8_t length_field_ind;
		uint8_t scan_resp_element_len;
		scn_resp[scan_resp_data_element.len] = scan_resp_data_element.len;
1000d19c:	2300      	movs	r3, #0
1000d19e:	466a      	mov	r2, sp
1000d1a0:	7013      	strb	r3, [r2, #0]
		length_field_ind = scan_resp_data_element.len;
		scan_resp_data_element.len++;
		scn_resp[scan_resp_data_element.len++] = LIST_128BIT_SERV_SOLICITATION_UUIDS;
1000d1a2:	3315      	adds	r3, #21
1000d1a4:	7053      	strb	r3, [r2, #1]
		return AT_BLE_GAP_INVALID_PARAM;
	}
	#endif
	
	#if BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_ENABLE
    DBG_LOG_DEV("[ble_manager]\t\t\tManufacturer specific data enabled");
1000d1a6:	4812      	ldr	r0, [pc, #72]	; (1000d1f0 <ble_advertisement_data_set+0x8c>)
1000d1a8:	4b12      	ldr	r3, [pc, #72]	; (1000d1f4 <ble_advertisement_data_set+0x90>)
1000d1aa:	4798      	blx	r3
1000d1ac:	4812      	ldr	r0, [pc, #72]	; (1000d1f8 <ble_advertisement_data_set+0x94>)
1000d1ae:	4b13      	ldr	r3, [pc, #76]	; (1000d1fc <ble_advertisement_data_set+0x98>)
1000d1b0:	4798      	blx	r3
    DBG_LOG_DEV("[ble_manager]\t\tManufacturer specific data NOT enabled");
	if(false){}
	#endif
	#if ((BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_SCN_RSP_ENABLE == SCAN_RESPONSE_ENABLE) || (BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_SCN_RSP_ENABLE == SCAN_RESPONSE_ONLY_ENABLE))
	else if((scan_resp_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE))) {
		scn_resp[scan_resp_data_element.len++] = BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE + ADV_TYPE_SIZE;
1000d1b2:	466b      	mov	r3, sp
1000d1b4:	701d      	strb	r5, [r3, #0]
		scn_resp[scan_resp_data_element.len++] = MANUFACTURER_SPECIFIC_DATA;
1000d1b6:	23ff      	movs	r3, #255	; 0xff
1000d1b8:	466a      	mov	r2, sp
1000d1ba:	7053      	strb	r3, [r2, #1]
		memcpy(&scn_resp[scan_resp_data_element.len], BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA, BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE);
1000d1bc:	2208      	movs	r2, #8
1000d1be:	4910      	ldr	r1, [pc, #64]	; (1000d200 <ble_advertisement_data_set+0x9c>)
1000d1c0:	466b      	mov	r3, sp
1000d1c2:	1c98      	adds	r0, r3, #2
1000d1c4:	4b0f      	ldr	r3, [pc, #60]	; (1000d204 <ble_advertisement_data_set+0xa0>)
1000d1c6:	4798      	blx	r3
		DBG_LOG_ADV("Failed to add Manufacturer specific data");
		return AT_BLE_GAP_INVALID_PARAM;
	}
	#endif
	
	if (at_ble_adv_data_set(adv_buf, adv_data_element.len, scn_resp,
1000d1c8:	230a      	movs	r3, #10
1000d1ca:	466a      	mov	r2, sp
1000d1cc:	2115      	movs	r1, #21
1000d1ce:	0020      	movs	r0, r4
1000d1d0:	4c0d      	ldr	r4, [pc, #52]	; (1000d208 <ble_advertisement_data_set+0xa4>)
1000d1d2:	47a0      	blx	r4
1000d1d4:	2800      	cmp	r0, #0
1000d1d6:	d005      	beq.n	1000d1e4 <ble_advertisement_data_set+0x80>
	scan_resp_data_element.len) != AT_BLE_SUCCESS) {
		DBG_LOG("BLE Advertisement data set failed");
1000d1d8:	4805      	ldr	r0, [pc, #20]	; (1000d1f0 <ble_advertisement_data_set+0x8c>)
1000d1da:	4b06      	ldr	r3, [pc, #24]	; (1000d1f4 <ble_advertisement_data_set+0x90>)
1000d1dc:	4798      	blx	r3
1000d1de:	480b      	ldr	r0, [pc, #44]	; (1000d20c <ble_advertisement_data_set+0xa8>)
1000d1e0:	4b06      	ldr	r3, [pc, #24]	; (1000d1fc <ble_advertisement_data_set+0x98>)
1000d1e2:	4798      	blx	r3
            //DBG_LOG_ADV("- 0x%02x(%c) ", adv_buf[i], adv_buf[i]);
        //}
		//DBG_LOG_ADV("BLE Advertisement data set success");
		return AT_BLE_SUCCESS;
    }
}
1000d1e4:	2000      	movs	r0, #0
1000d1e6:	b011      	add	sp, #68	; 0x44
1000d1e8:	bd30      	pop	{r4, r5, pc}
1000d1ea:	46c0      	nop			; (mov r8, r8)
1000d1ec:	10014e7c 	.word	0x10014e7c
1000d1f0:	10013980 	.word	0x10013980
1000d1f4:	100127d9 	.word	0x100127d9
1000d1f8:	10015180 	.word	0x10015180
1000d1fc:	100126b9 	.word	0x100126b9
1000d200:	100151b4 	.word	0x100151b4
1000d204:	1001255f 	.word	0x1001255f
1000d208:	1000ea49 	.word	0x1000ea49
1000d20c:	100151c0 	.word	0x100151c0

1000d210 <register_ble_user_event_cb>:

/** @brief function to register callback to be called when AT_BLE_PLATFORM_EVENT event triggered from stack */
void register_ble_user_event_cb(ble_user_event_callback_t cb_fn)
{
	ble_user_event_cb = cb_fn;
1000d210:	4b01      	ldr	r3, [pc, #4]	; (1000d218 <register_ble_user_event_cb+0x8>)
1000d212:	6018      	str	r0, [r3, #0]
}
1000d214:	4770      	bx	lr
1000d216:	46c0      	nop			; (mov r8, r8)
1000d218:	10015d10 	.word	0x10015d10

1000d21c <uart_read_complete_callback>:

void _time_start(unsigned int sec);
unsigned int _time_done(void);

static void uart_read_complete_callback(struct uart_module *const module)
{
1000d21c:	b510      	push	{r4, lr}
	if(read_status == UART_READ_WAITING) {
1000d21e:	4b0e      	ldr	r3, [pc, #56]	; (1000d258 <uart_read_complete_callback+0x3c>)
1000d220:	781b      	ldrb	r3, [r3, #0]
1000d222:	2b01      	cmp	r3, #1
1000d224:	d10b      	bne.n	1000d23e <uart_read_complete_callback+0x22>
		read_status = UART_READ_DONE;
1000d226:	2202      	movs	r2, #2
1000d228:	4b0b      	ldr	r3, [pc, #44]	; (1000d258 <uart_read_complete_callback+0x3c>)
1000d22a:	701a      	strb	r2, [r3, #0]
		
		if(user_callback_func == NULL)
1000d22c:	4b0b      	ldr	r3, [pc, #44]	; (1000d25c <uart_read_complete_callback+0x40>)
1000d22e:	681b      	ldr	r3, [r3, #0]
1000d230:	2b00      	cmp	r3, #0
1000d232:	d110      	bne.n	1000d256 <uart_read_complete_callback+0x3a>
			uart_disable_callback(&uart_instance, UART_RX_COMPLETE);
1000d234:	2102      	movs	r1, #2
1000d236:	480a      	ldr	r0, [pc, #40]	; (1000d260 <uart_read_complete_callback+0x44>)
1000d238:	4b0a      	ldr	r3, [pc, #40]	; (1000d264 <uart_read_complete_callback+0x48>)
1000d23a:	4798      	blx	r3
1000d23c:	e00b      	b.n	1000d256 <uart_read_complete_callback+0x3a>
	}
	else if(user_callback_func != NULL) {
1000d23e:	4b07      	ldr	r3, [pc, #28]	; (1000d25c <uart_read_complete_callback+0x40>)
1000d240:	681b      	ldr	r3, [r3, #0]
1000d242:	2b00      	cmp	r3, #0
1000d244:	d007      	beq.n	1000d256 <uart_read_complete_callback+0x3a>
		user_callback_func(string_input[0]);
1000d246:	4c08      	ldr	r4, [pc, #32]	; (1000d268 <uart_read_complete_callback+0x4c>)
1000d248:	7820      	ldrb	r0, [r4, #0]
1000d24a:	4798      	blx	r3
		uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000d24c:	2201      	movs	r2, #1
1000d24e:	0021      	movs	r1, r4
1000d250:	4803      	ldr	r0, [pc, #12]	; (1000d260 <uart_read_complete_callback+0x44>)
1000d252:	4b06      	ldr	r3, [pc, #24]	; (1000d26c <uart_read_complete_callback+0x50>)
1000d254:	4798      	blx	r3
	}
	else {
		//Nothing to do.
	}
}
1000d256:	bd10      	pop	{r4, pc}
1000d258:	10016d24 	.word	0x10016d24
1000d25c:	10016d2c 	.word	0x10016d2c
1000d260:	10017940 	.word	0x10017940
1000d264:	1000bdbd 	.word	0x1000bdbd
1000d268:	10016d28 	.word	0x10016d28
1000d26c:	1000bd61 	.word	0x1000bd61

1000d270 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct uart_module *const module,
		uint8_t *c)
{
1000d270:	b570      	push	{r4, r5, r6, lr}
1000d272:	0006      	movs	r6, r0
1000d274:	000d      	movs	r5, r1
	while(STATUS_OK != uart_read_wait(module, c));
1000d276:	4c03      	ldr	r4, [pc, #12]	; (1000d284 <usart_serial_getchar+0x14>)
1000d278:	0029      	movs	r1, r5
1000d27a:	0030      	movs	r0, r6
1000d27c:	47a0      	blx	r4
1000d27e:	2800      	cmp	r0, #0
1000d280:	d1fa      	bne.n	1000d278 <usart_serial_getchar+0x8>
}
1000d282:	bd70      	pop	{r4, r5, r6, pc}
1000d284:	1000bd4d 	.word	0x1000bd4d

1000d288 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct uart_module *const module,
		uint8_t c)
{
1000d288:	b570      	push	{r4, r5, r6, lr}
1000d28a:	0006      	movs	r6, r0
1000d28c:	000d      	movs	r5, r1
	while(STATUS_OK !=uart_write_wait(module, c));
1000d28e:	4c03      	ldr	r4, [pc, #12]	; (1000d29c <usart_serial_putchar+0x14>)
1000d290:	0029      	movs	r1, r5
1000d292:	0030      	movs	r0, r6
1000d294:	47a0      	blx	r4
1000d296:	2800      	cmp	r0, #0
1000d298:	d1fa      	bne.n	1000d290 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
1000d29a:	bd70      	pop	{r4, r5, r6, pc}
1000d29c:	1000bd3d 	.word	0x1000bd3d

1000d2a0 <serial_console_init>:

void serial_console_init(void)
{
1000d2a0:	b570      	push	{r4, r5, r6, lr}
	system_clock_config(CLOCK_RESOURCE_XO_26_MHZ, CLOCK_FREQ_26_MHZ);
1000d2a2:	2100      	movs	r1, #0
1000d2a4:	2000      	movs	r0, #0
1000d2a6:	4b19      	ldr	r3, [pc, #100]	; (1000d30c <serial_console_init+0x6c>)
1000d2a8:	4798      	blx	r3

	uart_get_config_defaults(&config_uart);
1000d2aa:	4c19      	ldr	r4, [pc, #100]	; (1000d310 <serial_console_init+0x70>)
1000d2ac:	0020      	movs	r0, r4
1000d2ae:	4b19      	ldr	r3, [pc, #100]	; (1000d314 <serial_console_init+0x74>)
1000d2b0:	4798      	blx	r3

	config_uart.baud_rate = CONF_STDIO_BAUDRATE;
1000d2b2:	23e1      	movs	r3, #225	; 0xe1
1000d2b4:	025b      	lsls	r3, r3, #9
1000d2b6:	6023      	str	r3, [r4, #0]
	config_uart.pin_number_pad[0] = EDBG_CDC_PIN_PAD0;
1000d2b8:	2302      	movs	r3, #2
1000d2ba:	60a3      	str	r3, [r4, #8]
	config_uart.pin_number_pad[1] = EDBG_CDC_PIN_PAD1;
1000d2bc:	2203      	movs	r2, #3
1000d2be:	60e2      	str	r2, [r4, #12]
	config_uart.pin_number_pad[2] = EDBG_CDC_PIN_PAD2;
1000d2c0:	3201      	adds	r2, #1
1000d2c2:	6122      	str	r2, [r4, #16]
	config_uart.pin_number_pad[3] = EDBG_CDC_PIN_PAD3;
1000d2c4:	3201      	adds	r2, #1
1000d2c6:	6162      	str	r2, [r4, #20]
	
	config_uart.pinmux_sel_pad[0] = EDBG_CDC_MUX_PAD0;
1000d2c8:	61a3      	str	r3, [r4, #24]
	config_uart.pinmux_sel_pad[1] = EDBG_CDC_MUX_PAD1;
1000d2ca:	61e3      	str	r3, [r4, #28]
	config_uart.pinmux_sel_pad[2] = EDBG_CDC_MUX_PAD2;
1000d2cc:	6223      	str	r3, [r4, #32]
	config_uart.pinmux_sel_pad[3] = EDBG_CDC_MUX_PAD3;
1000d2ce:	6263      	str	r3, [r4, #36]	; 0x24
static inline void stdio_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	stdio_base = (void *)module;
1000d2d0:	4d11      	ldr	r5, [pc, #68]	; (1000d318 <serial_console_init+0x78>)
1000d2d2:	4b12      	ldr	r3, [pc, #72]	; (1000d31c <serial_console_init+0x7c>)
1000d2d4:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
1000d2d6:	4a12      	ldr	r2, [pc, #72]	; (1000d320 <serial_console_init+0x80>)
1000d2d8:	4b12      	ldr	r3, [pc, #72]	; (1000d324 <serial_console_init+0x84>)
1000d2da:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
1000d2dc:	4a12      	ldr	r2, [pc, #72]	; (1000d328 <serial_console_init+0x88>)
1000d2de:	4b13      	ldr	r3, [pc, #76]	; (1000d32c <serial_console_init+0x8c>)
1000d2e0:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	if (uart_init(module, hw, config) == STATUS_OK) {
1000d2e2:	0022      	movs	r2, r4
1000d2e4:	4912      	ldr	r1, [pc, #72]	; (1000d330 <serial_console_init+0x90>)
1000d2e6:	0028      	movs	r0, r5
1000d2e8:	4b12      	ldr	r3, [pc, #72]	; (1000d334 <serial_console_init+0x94>)
1000d2ea:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
1000d2ec:	4e12      	ldr	r6, [pc, #72]	; (1000d338 <serial_console_init+0x98>)
1000d2ee:	6833      	ldr	r3, [r6, #0]
1000d2f0:	6898      	ldr	r0, [r3, #8]
1000d2f2:	2100      	movs	r1, #0
1000d2f4:	4c11      	ldr	r4, [pc, #68]	; (1000d33c <serial_console_init+0x9c>)
1000d2f6:	47a0      	blx	r4
	setbuf(stdin, NULL);
1000d2f8:	6833      	ldr	r3, [r6, #0]
1000d2fa:	6858      	ldr	r0, [r3, #4]
1000d2fc:	2100      	movs	r1, #0
1000d2fe:	47a0      	blx	r4

	stdio_serial_init(&uart_instance, CONF_STDIO_USART_MODULE, &config_uart);
	
	uart_register_callback(&uart_instance, uart_read_complete_callback, UART_RX_COMPLETE);
1000d300:	2202      	movs	r2, #2
1000d302:	490f      	ldr	r1, [pc, #60]	; (1000d340 <serial_console_init+0xa0>)
1000d304:	0028      	movs	r0, r5
1000d306:	4b0f      	ldr	r3, [pc, #60]	; (1000d344 <serial_console_init+0xa4>)
1000d308:	4798      	blx	r3
}
1000d30a:	bd70      	pop	{r4, r5, r6, pc}
1000d30c:	1000ad5d 	.word	0x1000ad5d
1000d310:	10017964 	.word	0x10017964
1000d314:	1000bb55 	.word	0x1000bb55
1000d318:	10017940 	.word	0x10017940
1000d31c:	100170fc 	.word	0x100170fc
1000d320:	1000d289 	.word	0x1000d289
1000d324:	100170f8 	.word	0x100170f8
1000d328:	1000d271 	.word	0x1000d271
1000d32c:	100170f4 	.word	0x100170f4
1000d330:	40004000 	.word	0x40004000
1000d334:	1000bb81 	.word	0x1000bb81
1000d338:	10015400 	.word	0x10015400
1000d33c:	10012889 	.word	0x10012889
1000d340:	1000d21d 	.word	0x1000d21d
1000d344:	1000bd89 	.word	0x1000bd89

1000d348 <_time_start>:

void _time_start(unsigned int sec)
{
1000d348:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d34a:	b083      	sub	sp, #12
1000d34c:	0005      	movs	r5, r0
	system_clock_get_value();
1000d34e:	4c0d      	ldr	r4, [pc, #52]	; (1000d384 <_time_start+0x3c>)
1000d350:	47a0      	blx	r4
	unsigned int main_clk = system_clock_get_value();
1000d352:	47a0      	blx	r4

	tick = (((double)(main_clk)) * ((double)0.0000493)) * (sec * 1000);
1000d354:	4f0c      	ldr	r7, [pc, #48]	; (1000d388 <_time_start+0x40>)
1000d356:	47b8      	blx	r7
1000d358:	4e0c      	ldr	r6, [pc, #48]	; (1000d38c <_time_start+0x44>)
1000d35a:	4a0d      	ldr	r2, [pc, #52]	; (1000d390 <_time_start+0x48>)
1000d35c:	4b0d      	ldr	r3, [pc, #52]	; (1000d394 <_time_start+0x4c>)
1000d35e:	47b0      	blx	r6
1000d360:	9000      	str	r0, [sp, #0]
1000d362:	9101      	str	r1, [sp, #4]
1000d364:	20fa      	movs	r0, #250	; 0xfa
1000d366:	0080      	lsls	r0, r0, #2
1000d368:	4368      	muls	r0, r5
1000d36a:	47b8      	blx	r7
1000d36c:	0002      	movs	r2, r0
1000d36e:	000b      	movs	r3, r1
1000d370:	9800      	ldr	r0, [sp, #0]
1000d372:	9901      	ldr	r1, [sp, #4]
1000d374:	47b0      	blx	r6
1000d376:	4b08      	ldr	r3, [pc, #32]	; (1000d398 <_time_start+0x50>)
1000d378:	4798      	blx	r3
1000d37a:	4b08      	ldr	r3, [pc, #32]	; (1000d39c <_time_start+0x54>)
1000d37c:	6018      	str	r0, [r3, #0]
}
1000d37e:	b003      	add	sp, #12
1000d380:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d382:	46c0      	nop			; (mov r8, r8)
1000d384:	1000ade1 	.word	0x1000ade1
1000d388:	10012435 	.word	0x10012435
1000d38c:	1001182d 	.word	0x1001182d
1000d390:	19feaec7 	.word	0x19feaec7
1000d394:	3f09d8ef 	.word	0x3f09d8ef
1000d398:	100115d5 	.word	0x100115d5
1000d39c:	10016d20 	.word	0x10016d20

1000d3a0 <_time_done>:

unsigned int _time_done()
{
	return --tick;
1000d3a0:	4b02      	ldr	r3, [pc, #8]	; (1000d3ac <_time_done+0xc>)
1000d3a2:	681a      	ldr	r2, [r3, #0]
1000d3a4:	1e50      	subs	r0, r2, #1
1000d3a6:	6018      	str	r0, [r3, #0]
}
1000d3a8:	4770      	bx	lr
1000d3aa:	46c0      	nop			; (mov r8, r8)
1000d3ac:	10016d20 	.word	0x10016d20

1000d3b0 <getchar_b11_timeout>:

int getchar_b11_timeout(unsigned int sec)
{
1000d3b0:	b570      	push	{r4, r5, r6, lr}
1000d3b2:	0004      	movs	r4, r0
	read_status = UART_READ_WAITING;
1000d3b4:	2201      	movs	r2, #1
1000d3b6:	4b11      	ldr	r3, [pc, #68]	; (1000d3fc <getchar_b11_timeout+0x4c>)
1000d3b8:	701a      	strb	r2, [r3, #0]
	
	if(user_callback_func == NULL)
1000d3ba:	4b11      	ldr	r3, [pc, #68]	; (1000d400 <getchar_b11_timeout+0x50>)
1000d3bc:	681b      	ldr	r3, [r3, #0]
1000d3be:	2b00      	cmp	r3, #0
1000d3c0:	d103      	bne.n	1000d3ca <getchar_b11_timeout+0x1a>
		uart_enable_callback(&uart_instance, UART_RX_COMPLETE);
1000d3c2:	2102      	movs	r1, #2
1000d3c4:	480f      	ldr	r0, [pc, #60]	; (1000d404 <getchar_b11_timeout+0x54>)
1000d3c6:	4b10      	ldr	r3, [pc, #64]	; (1000d408 <getchar_b11_timeout+0x58>)
1000d3c8:	4798      	blx	r3

	_time_start(sec);
1000d3ca:	0020      	movs	r0, r4
1000d3cc:	4b0f      	ldr	r3, [pc, #60]	; (1000d40c <getchar_b11_timeout+0x5c>)
1000d3ce:	4798      	blx	r3
	
	string_input[0] = 0;
1000d3d0:	490f      	ldr	r1, [pc, #60]	; (1000d410 <getchar_b11_timeout+0x60>)
1000d3d2:	2300      	movs	r3, #0
1000d3d4:	700b      	strb	r3, [r1, #0]
	uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000d3d6:	2201      	movs	r2, #1
1000d3d8:	480a      	ldr	r0, [pc, #40]	; (1000d404 <getchar_b11_timeout+0x54>)
1000d3da:	4b0e      	ldr	r3, [pc, #56]	; (1000d414 <getchar_b11_timeout+0x64>)
1000d3dc:	4798      	blx	r3
	
	while (read_status != UART_READ_DONE && _time_done() > 0 );
1000d3de:	4c07      	ldr	r4, [pc, #28]	; (1000d3fc <getchar_b11_timeout+0x4c>)
1000d3e0:	4d0d      	ldr	r5, [pc, #52]	; (1000d418 <getchar_b11_timeout+0x68>)
1000d3e2:	7823      	ldrb	r3, [r4, #0]
1000d3e4:	2b02      	cmp	r3, #2
1000d3e6:	d002      	beq.n	1000d3ee <getchar_b11_timeout+0x3e>
1000d3e8:	47a8      	blx	r5
1000d3ea:	2800      	cmp	r0, #0
1000d3ec:	d1f9      	bne.n	1000d3e2 <getchar_b11_timeout+0x32>
	
	read_status = UART_READ_NONE;
1000d3ee:	2200      	movs	r2, #0
1000d3f0:	4b02      	ldr	r3, [pc, #8]	; (1000d3fc <getchar_b11_timeout+0x4c>)
1000d3f2:	701a      	strb	r2, [r3, #0]

	return string_input[0];
1000d3f4:	4b06      	ldr	r3, [pc, #24]	; (1000d410 <getchar_b11_timeout+0x60>)
1000d3f6:	7818      	ldrb	r0, [r3, #0]
}
1000d3f8:	bd70      	pop	{r4, r5, r6, pc}
1000d3fa:	46c0      	nop			; (mov r8, r8)
1000d3fc:	10016d24 	.word	0x10016d24
1000d400:	10016d2c 	.word	0x10016d2c
1000d404:	10017940 	.word	0x10017940
1000d408:	1000bd9d 	.word	0x1000bd9d
1000d40c:	1000d349 	.word	0x1000d349
1000d410:	10016d28 	.word	0x10016d28
1000d414:	1000bd61 	.word	0x1000bd61
1000d418:	1000d3a1 	.word	0x1000d3a1

1000d41c <platform_event_free>:
void platform_event_free(struct platform_event* event);
//struct str_watched_event watched_event;

void platform_event_free(struct platform_event* event)
{
	event->next = platform_event_free_list;
1000d41c:	4b02      	ldr	r3, [pc, #8]	; (1000d428 <platform_event_free+0xc>)
1000d41e:	681a      	ldr	r2, [r3, #0]
1000d420:	6002      	str	r2, [r0, #0]
	platform_event_free_list = event;
1000d422:	6018      	str	r0, [r3, #0]
}
1000d424:	4770      	bx	lr
1000d426:	46c0      	nop			; (mov r8, r8)
1000d428:	10016d34 	.word	0x10016d34

1000d42c <platform_event_post>:

void platform_event_post(uint16_t event_type, void * data, uint16_t data_len)
{
1000d42c:	b530      	push	{r4, r5, lr}
	// get a free event object
	struct platform_event* evt = platform_event_free_list;
1000d42e:	4b0b      	ldr	r3, [pc, #44]	; (1000d45c <platform_event_post+0x30>)
1000d430:	681c      	ldr	r4, [r3, #0]
	if(evt != NULL)
1000d432:	2c00      	cmp	r4, #0
1000d434:	d011      	beq.n	1000d45a <platform_event_post+0x2e>
	{
		platform_event_free_list = evt->next;
1000d436:	6825      	ldr	r5, [r4, #0]
1000d438:	601d      	str	r5, [r3, #0]
		
		evt->next = NULL;
1000d43a:	2300      	movs	r3, #0
1000d43c:	6023      	str	r3, [r4, #0]
		evt->data = data;
1000d43e:	60a1      	str	r1, [r4, #8]
		evt->data_len = data_len;
1000d440:	80e2      	strh	r2, [r4, #6]
		evt->event_type = event_type;
1000d442:	80a0      	strh	r0, [r4, #4]

		if(platform_event_pending_list == NULL)
1000d444:	4b06      	ldr	r3, [pc, #24]	; (1000d460 <platform_event_post+0x34>)
1000d446:	681a      	ldr	r2, [r3, #0]
1000d448:	2a00      	cmp	r2, #0
1000d44a:	d102      	bne.n	1000d452 <platform_event_post+0x26>
		{
			platform_event_pending_list = evt;
1000d44c:	601c      	str	r4, [r3, #0]
1000d44e:	e004      	b.n	1000d45a <platform_event_post+0x2e>
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
			{
				cur = cur->next;
1000d450:	001a      	movs	r2, r3
			platform_event_pending_list = evt;
		}
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
1000d452:	6813      	ldr	r3, [r2, #0]
1000d454:	2b00      	cmp	r3, #0
1000d456:	d1fb      	bne.n	1000d450 <platform_event_post+0x24>
			{
				cur = cur->next;
			}
			cur->next = evt;
1000d458:	6014      	str	r4, [r2, #0]
		}
		
		//platform_event_signal();
	}
	
}
1000d45a:	bd30      	pop	{r4, r5, pc}
1000d45c:	10016d34 	.word	0x10016d34
1000d460:	10016d30 	.word	0x10016d30

1000d464 <platform_event_init>:
	return status;
	
}

void platform_event_init()
{
1000d464:	b570      	push	{r4, r5, r6, lr}
	uint32_t i;
	platform_event_free_list = NULL;
1000d466:	2300      	movs	r3, #0
1000d468:	4a06      	ldr	r2, [pc, #24]	; (1000d484 <platform_event_init+0x20>)
1000d46a:	6013      	str	r3, [r2, #0]
	platform_event_pending_list = NULL;
1000d46c:	4a06      	ldr	r2, [pc, #24]	; (1000d488 <platform_event_init+0x24>)
1000d46e:	6013      	str	r3, [r2, #0]
1000d470:	4c06      	ldr	r4, [pc, #24]	; (1000d48c <platform_event_init+0x28>)
1000d472:	0026      	movs	r6, r4
1000d474:	3678      	adds	r6, #120	; 0x78
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
	{
		platform_event_free(&platform_event_pool[i]);
1000d476:	4d06      	ldr	r5, [pc, #24]	; (1000d490 <platform_event_init+0x2c>)
1000d478:	0020      	movs	r0, r4
1000d47a:	47a8      	blx	r5
1000d47c:	340c      	adds	r4, #12
{
	uint32_t i;
	platform_event_free_list = NULL;
	platform_event_pending_list = NULL;
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
1000d47e:	42b4      	cmp	r4, r6
1000d480:	d1fa      	bne.n	1000d478 <platform_event_init+0x14>
	{
		platform_event_free(&platform_event_pool[i]);
	}
}
1000d482:	bd70      	pop	{r4, r5, r6, pc}
1000d484:	10016d34 	.word	0x10016d34
1000d488:	10016d30 	.word	0x10016d30
1000d48c:	10016d38 	.word	0x10016d38
1000d490:	1000d41d 	.word	0x1000d41d

1000d494 <at_ke_msg_send>:
	}
	return status;
}

static void at_ke_msg_send(void const * param_ptr)
{
1000d494:	b570      	push	{r4, r5, r6, lr}
1000d496:	0004      	movs	r4, r0
	struct ke_msg *kemsg;
	uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
1000d498:	4b13      	ldr	r3, [pc, #76]	; (1000d4e8 <at_ke_msg_send+0x54>)
1000d49a:	681d      	ldr	r5, [r3, #0]
	ke_msg_send(param_ptr);
1000d49c:	4b13      	ldr	r3, [pc, #76]	; (1000d4ec <at_ke_msg_send+0x58>)
1000d49e:	681b      	ldr	r3, [r3, #0]
1000d4a0:	4798      	blx	r3
	kemsg = ke_param2msg(param_ptr);

	if((kemsg != NULL) && (kemsg->dest_id != TASK_INTERNAL_APP)) {
1000d4a2:	2c0c      	cmp	r4, #12
1000d4a4:	d01f      	beq.n	1000d4e6 <at_ke_msg_send+0x52>
1000d4a6:	3c0c      	subs	r4, #12
1000d4a8:	88e3      	ldrh	r3, [r4, #6]
1000d4aa:	2b05      	cmp	r3, #5
1000d4ac:	d01b      	beq.n	1000d4e6 <at_ke_msg_send+0x52>
		if(osc_en == 0)
1000d4ae:	07eb      	lsls	r3, r5, #31
1000d4b0:	d414      	bmi.n	1000d4dc <at_ke_msg_send+0x48>
		{
			/* BLE Core is off, issue a wakeup request*/
			/* First, make sure PD4 is powered up and out of reset */
			pwr_enable_arm_wakeup(1<<1);
1000d4b2:	4b0f      	ldr	r3, [pc, #60]	; (1000d4f0 <at_ke_msg_send+0x5c>)
1000d4b4:	681b      	ldr	r3, [r3, #0]
1000d4b6:	2002      	movs	r0, #2
1000d4b8:	4798      	blx	r3
			pwr_arm_wakeup_req();
1000d4ba:	4b0e      	ldr	r3, [pc, #56]	; (1000d4f4 <at_ke_msg_send+0x60>)
1000d4bc:	681b      	ldr	r3, [r3, #0]
1000d4be:	4798      	blx	r3
			while (pwr_wait_BLE_out_of_reset(3));
1000d4c0:	4c0d      	ldr	r4, [pc, #52]	; (1000d4f8 <at_ke_msg_send+0x64>)
1000d4c2:	2003      	movs	r0, #3
1000d4c4:	6823      	ldr	r3, [r4, #0]
1000d4c6:	4798      	blx	r3
1000d4c8:	2800      	cmp	r0, #0
1000d4ca:	d1fa      	bne.n	1000d4c2 <at_ke_msg_send+0x2e>
			pwr_disable_arm_wakeup(1<<1);
1000d4cc:	4b0b      	ldr	r3, [pc, #44]	; (1000d4fc <at_ke_msg_send+0x68>)
1000d4ce:	681b      	ldr	r3, [r3, #0]
1000d4d0:	3002      	adds	r0, #2
1000d4d2:	4798      	blx	r3
			REG_PL_WR(0x4000B020, 1);
1000d4d4:	2201      	movs	r2, #1
1000d4d6:	4b0a      	ldr	r3, [pc, #40]	; (1000d500 <at_ke_msg_send+0x6c>)
1000d4d8:	601a      	str	r2, [r3, #0]
1000d4da:	e004      	b.n	1000d4e6 <at_ke_msg_send+0x52>
#endif	//CHIPVERSION_B0
		}
		else
		{
			/*  */
			os_sem_up(gstrFwSem);
1000d4dc:	4b09      	ldr	r3, [pc, #36]	; (1000d504 <at_ke_msg_send+0x70>)
1000d4de:	6818      	ldr	r0, [r3, #0]
1000d4e0:	4b09      	ldr	r3, [pc, #36]	; (1000d508 <at_ke_msg_send+0x74>)
1000d4e2:	681b      	ldr	r3, [r3, #0]
1000d4e4:	4798      	blx	r3
		}
	}
}
1000d4e6:	bd70      	pop	{r4, r5, r6, pc}
1000d4e8:	4000b1ec 	.word	0x4000b1ec
1000d4ec:	10016de0 	.word	0x10016de0
1000d4f0:	10016dd8 	.word	0x10016dd8
1000d4f4:	10016dec 	.word	0x10016dec
1000d4f8:	10016dc0 	.word	0x10016dc0
1000d4fc:	10016dc8 	.word	0x10016dc8
1000d500:	4000b020 	.word	0x4000b020
1000d504:	10016dcc 	.word	0x10016dcc
1000d508:	10016dbc 	.word	0x10016dbc

1000d50c <samb11_plf_resume_callback>:
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
	return status;
}

void samb11_plf_resume_callback(void)
{
1000d50c:	b510      	push	{r4, lr}
	//spi_flash_turn_off();
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,default_samb11_clock_init[0]);
1000d50e:	4b06      	ldr	r3, [pc, #24]	; (1000d528 <samb11_plf_resume_callback+0x1c>)
1000d510:	4a06      	ldr	r2, [pc, #24]	; (1000d52c <samb11_plf_resume_callback+0x20>)
1000d512:	6819      	ldr	r1, [r3, #0]
1000d514:	6011      	str	r1, [r2, #0]
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,default_samb11_clock_init[1]);
1000d516:	685a      	ldr	r2, [r3, #4]
1000d518:	4b05      	ldr	r3, [pc, #20]	; (1000d530 <samb11_plf_resume_callback+0x24>)
1000d51a:	601a      	str	r2, [r3, #0]
	if(samb11_app_resume_cb != NULL)
1000d51c:	4b05      	ldr	r3, [pc, #20]	; (1000d534 <samb11_plf_resume_callback+0x28>)
1000d51e:	681b      	ldr	r3, [r3, #0]
1000d520:	2b00      	cmp	r3, #0
1000d522:	d000      	beq.n	1000d526 <samb11_plf_resume_callback+0x1a>
	{
		samb11_app_resume_cb();
1000d524:	4798      	blx	r3
	}
}
1000d526:	bd10      	pop	{r4, pc}
1000d528:	1001798c 	.word	0x1001798c
1000d52c:	4000b00c 	.word	0x4000b00c
1000d530:	4000b010 	.word	0x4000b010
1000d534:	10017c68 	.word	0x10017c68

1000d538 <init_port_list>:
port port_list[LPGPIO_MAX];
uint32_t default_samb11_clock_init[2];
void samb11_plf_resume_callback(void);

void init_port_list(void)
{
1000d538:	b570      	push	{r4, r5, r6, lr}
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
1000d53a:	2232      	movs	r2, #50	; 0x32
1000d53c:	2100      	movs	r1, #0
1000d53e:	480d      	ldr	r0, [pc, #52]	; (1000d574 <init_port_list+0x3c>)
1000d540:	4b0d      	ldr	r3, [pc, #52]	; (1000d578 <init_port_list+0x40>)
1000d542:	4798      	blx	r3
1000d544:	2100      	movs	r1, #0
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000d546:	480b      	ldr	r0, [pc, #44]	; (1000d574 <init_port_list+0x3c>)
		port_list[i].bit.available = 1;
1000d548:	2501      	movs	r5, #1
		port_list[i].bit.configured = 0;
1000d54a:	2402      	movs	r4, #2
void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000d54c:	004a      	lsls	r2, r1, #1
1000d54e:	5411      	strb	r1, [r2, r0]
		port_list[i].bit.available = 1;
1000d550:	1882      	adds	r2, r0, r2
1000d552:	7853      	ldrb	r3, [r2, #1]
1000d554:	432b      	orrs	r3, r5
		port_list[i].bit.configured = 0;
1000d556:	b2db      	uxtb	r3, r3
1000d558:	43a3      	bics	r3, r4
1000d55a:	7053      	strb	r3, [r2, #1]
1000d55c:	3101      	adds	r1, #1

void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
1000d55e:	2919      	cmp	r1, #25
1000d560:	d1f4      	bne.n	1000d54c <init_port_list+0x14>
		port_list[i].bit.gpio_num = i;
		port_list[i].bit.available = 1;
		port_list[i].bit.configured = 0;
	}
	//Set the GPIO for SWD is not available
	port_list[0].bit.available = 0;
1000d562:	4b04      	ldr	r3, [pc, #16]	; (1000d574 <init_port_list+0x3c>)
1000d564:	785a      	ldrb	r2, [r3, #1]
1000d566:	3918      	subs	r1, #24
1000d568:	438a      	bics	r2, r1
1000d56a:	705a      	strb	r2, [r3, #1]
	port_list[1].bit.available = 0;
1000d56c:	78da      	ldrb	r2, [r3, #3]
1000d56e:	438a      	bics	r2, r1
1000d570:	70da      	strb	r2, [r3, #3]
	//GPIO 14 is used for Coex and controlled by Firmware
	//port_list[14].bit.available = 0;
}
1000d572:	bd70      	pop	{r4, r5, r6, pc}
1000d574:	100179a8 	.word	0x100179a8
1000d578:	10012571 	.word	0x10012571

1000d57c <init_clock>:

void init_clock(void)
{
	uint32_t regval;
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0);
1000d57c:	4a06      	ldr	r2, [pc, #24]	; (1000d598 <init_clock+0x1c>)
1000d57e:	6811      	ldr	r1, [r2, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_1_CLK_EN);
	//disable UART core & interface clocks
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_IF_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN);
1000d580:	4b06      	ldr	r3, [pc, #24]	; (1000d59c <init_clock+0x20>)
1000d582:	400b      	ands	r3, r1
	//disable I2C core 1 clocks
	//regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C1_CORE_CLK_EN);		//do not disable I2C because I2C driver in ASF will not enable.
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,regval);
1000d584:	6013      	str	r3, [r2, #0]
	default_samb11_clock_init[0] = regval;
1000d586:	4a06      	ldr	r2, [pc, #24]	; (1000d5a0 <init_clock+0x24>)
1000d588:	6013      	str	r3, [r2, #0]
	
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1);
1000d58a:	4906      	ldr	r1, [pc, #24]	; (1000d5a4 <init_clock+0x28>)
1000d58c:	6808      	ldr	r0, [r1, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_4_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_5_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_6_CLK_EN);
	//disable SPI SCK Phase int clock 
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN);
1000d58e:	4b06      	ldr	r3, [pc, #24]	; (1000d5a8 <init_clock+0x2c>)
1000d590:	4003      	ands	r3, r0
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,regval);
1000d592:	600b      	str	r3, [r1, #0]
	default_samb11_clock_init[1] = regval;
1000d594:	6053      	str	r3, [r2, #4]
	//ARM debugger
	
	//store default values
}
1000d596:	4770      	bx	lr
1000d598:	4000b00c 	.word	0x4000b00c
1000d59c:	fffe0fd3 	.word	0xfffe0fd3
1000d5a0:	1001798c 	.word	0x1001798c
1000d5a4:	4000b010 	.word	0x4000b010
1000d5a8:	ffffe7c0 	.word	0xffffe7c0

1000d5ac <platform_driver_init>:

plf_drv_status platform_driver_init()
{
1000d5ac:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d5ae:	4657      	mov	r7, sl
1000d5b0:	464e      	mov	r6, r9
1000d5b2:	4645      	mov	r5, r8
1000d5b4:	b4e0      	push	{r5, r6, r7}
	plf_drv_status status = STATUS_NOT_INITIALIZED;
	if((platform_initialized == 0) || (platform_initialized != 1)) {
1000d5b6:	4b4f      	ldr	r3, [pc, #316]	; (1000d6f4 <platform_driver_init+0x148>)
1000d5b8:	781b      	ldrb	r3, [r3, #0]
1000d5ba:	2b00      	cmp	r3, #0
1000d5bc:	d004      	beq.n	1000d5c8 <platform_driver_init+0x1c>
1000d5be:	4b4d      	ldr	r3, [pc, #308]	; (1000d6f4 <platform_driver_init+0x148>)
1000d5c0:	781b      	ldrb	r3, [r3, #0]
1000d5c2:	2b01      	cmp	r3, #1
1000d5c4:	d100      	bne.n	1000d5c8 <platform_driver_init+0x1c>
1000d5c6:	e08c      	b.n	1000d6e2 <platform_driver_init+0x136>
		init_port_list();
1000d5c8:	4b4b      	ldr	r3, [pc, #300]	; (1000d6f8 <platform_driver_init+0x14c>)
1000d5ca:	4798      	blx	r3
		init_clock();
1000d5cc:	4b4b      	ldr	r3, [pc, #300]	; (1000d6fc <platform_driver_init+0x150>)
1000d5ce:	4798      	blx	r3
		// Initialize the ble stack message handler to NULL
		ble_stack_message_handler = NULL;
1000d5d0:	2300      	movs	r3, #0
1000d5d2:	4698      	mov	r8, r3
1000d5d4:	4b4a      	ldr	r3, [pc, #296]	; (1000d700 <platform_driver_init+0x154>)
1000d5d6:	4642      	mov	r2, r8
1000d5d8:	601a      	str	r2, [r3, #0]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000d5da:	4c4a      	ldr	r4, [pc, #296]	; (1000d704 <platform_driver_init+0x158>)
1000d5dc:	2380      	movs	r3, #128	; 0x80
1000d5de:	2280      	movs	r2, #128	; 0x80
1000d5e0:	0412      	lsls	r2, r2, #16
1000d5e2:	4692      	mov	sl, r2
1000d5e4:	50e2      	str	r2, [r4, r3]
1000d5e6:	2280      	movs	r2, #128	; 0x80
1000d5e8:	0452      	lsls	r2, r2, #17
1000d5ea:	4691      	mov	r9, r2
1000d5ec:	50e2      	str	r2, [r4, r3]
#ifdef CHIPVERSION_B0
		NVIC_DisableIRQ(GPIO0_IRQn);
		NVIC_DisableIRQ(GPIO1_IRQn);
		/* NVIC_DisableIRQ(PORT0_COMB_IRQn); */
		/* NVIC_DisableIRQ(PORT1_COMB_IRQn); */
		platform_register_isr = (uint8_t (*)(uint8_t ,void *))0x000007d7;
1000d5ee:	4d46      	ldr	r5, [pc, #280]	; (1000d708 <platform_driver_init+0x15c>)
1000d5f0:	4b46      	ldr	r3, [pc, #280]	; (1000d70c <platform_driver_init+0x160>)
1000d5f2:	602b      	str	r3, [r5, #0]
		platform_unregister_isr = (uint8_t (*)(uint8_t ))0x000007bd;
1000d5f4:	4b46      	ldr	r3, [pc, #280]	; (1000d710 <platform_driver_init+0x164>)
1000d5f6:	4a47      	ldr	r2, [pc, #284]	; (1000d714 <platform_driver_init+0x168>)
1000d5f8:	6013      	str	r3, [r2, #0]
		handle_ext_wakeup_isr = (void (*)(void))0x1bc51;
1000d5fa:	4947      	ldr	r1, [pc, #284]	; (1000d718 <platform_driver_init+0x16c>)
1000d5fc:	4a47      	ldr	r2, [pc, #284]	; (1000d71c <platform_driver_init+0x170>)
1000d5fe:	6011      	str	r1, [r2, #0]
		gapm_get_task_from_id = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400bc));
1000d600:	4a47      	ldr	r2, [pc, #284]	; (1000d720 <platform_driver_init+0x174>)
1000d602:	6811      	ldr	r1, [r2, #0]
1000d604:	4a47      	ldr	r2, [pc, #284]	; (1000d724 <platform_driver_init+0x178>)
1000d606:	6011      	str	r1, [r2, #0]
		gapm_get_id_from_task = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400b8));
1000d608:	4a47      	ldr	r2, [pc, #284]	; (1000d728 <platform_driver_init+0x17c>)
1000d60a:	6811      	ldr	r1, [r2, #0]
1000d60c:	4a47      	ldr	r2, [pc, #284]	; (1000d72c <platform_driver_init+0x180>)
1000d60e:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_set = (void (*)(uint16_t))0x0001b99f;
1000d610:	4947      	ldr	r1, [pc, #284]	; (1000d730 <platform_driver_init+0x184>)
1000d612:	4a48      	ldr	r2, [pc, #288]	; (1000d734 <platform_driver_init+0x188>)
1000d614:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_clear = (void (*)(uint16_t))0x0001b9db;
1000d616:	4948      	ldr	r1, [pc, #288]	; (1000d738 <platform_driver_init+0x18c>)
1000d618:	4a48      	ldr	r2, [pc, #288]	; (1000d73c <platform_driver_init+0x190>)
1000d61a:	6011      	str	r1, [r2, #0]
		apps_resume_cb = (uint32_t *)0x1004003c;
1000d61c:	4f48      	ldr	r7, [pc, #288]	; (1000d740 <platform_driver_init+0x194>)
1000d61e:	4a49      	ldr	r2, [pc, #292]	; (1000d744 <platform_driver_init+0x198>)
1000d620:	603a      	str	r2, [r7, #0]
		actualfreq = (uint32_t *)0x10041FC0; /* set to NULL for now as clock calibration is disabled for the time being */  /*(uint32_t *)0x10006bd8;*/
1000d622:	4949      	ldr	r1, [pc, #292]	; (1000d748 <platform_driver_init+0x19c>)
1000d624:	4a49      	ldr	r2, [pc, #292]	; (1000d74c <platform_driver_init+0x1a0>)
1000d626:	6011      	str	r1, [r2, #0]
		updateuartbr_fp = (void (*)())0x10041FC4;
1000d628:	4949      	ldr	r1, [pc, #292]	; (1000d750 <platform_driver_init+0x1a4>)
1000d62a:	4a4a      	ldr	r2, [pc, #296]	; (1000d754 <platform_driver_init+0x1a8>)
1000d62c:	6011      	str	r1, [r2, #0]
		wakeup_source_active_cb = (uint32_t *)0x10041FD4;
1000d62e:	4e4a      	ldr	r6, [pc, #296]	; (1000d758 <platform_driver_init+0x1ac>)
1000d630:	4a4a      	ldr	r2, [pc, #296]	; (1000d75c <platform_driver_init+0x1b0>)
1000d632:	6032      	str	r2, [r6, #0]
		wakeup_event_pending = (uint32_t *)0x10041FD8;
1000d634:	494a      	ldr	r1, [pc, #296]	; (1000d760 <platform_driver_init+0x1b4>)
1000d636:	4a4b      	ldr	r2, [pc, #300]	; (1000d764 <platform_driver_init+0x1b8>)
1000d638:	6011      	str	r1, [r2, #0]
		/* power APIs */
		pwr_enable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cbe9;
1000d63a:	494b      	ldr	r1, [pc, #300]	; (1000d768 <platform_driver_init+0x1bc>)
1000d63c:	4a4b      	ldr	r2, [pc, #300]	; (1000d76c <platform_driver_init+0x1c0>)
1000d63e:	6011      	str	r1, [r2, #0]
		pwr_disable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cd8f;
1000d640:	494b      	ldr	r1, [pc, #300]	; (1000d770 <platform_driver_init+0x1c4>)
1000d642:	4a4c      	ldr	r2, [pc, #304]	; (1000d774 <platform_driver_init+0x1c8>)
1000d644:	6011      	str	r1, [r2, #0]
		pwr_arm_wakeup_req = (int (*)(void))0x0001cea3;
1000d646:	494c      	ldr	r1, [pc, #304]	; (1000d778 <platform_driver_init+0x1cc>)
1000d648:	4a4c      	ldr	r2, [pc, #304]	; (1000d77c <platform_driver_init+0x1d0>)
1000d64a:	6011      	str	r1, [r2, #0]
		pwr_wait_BLE_out_of_reset = (int (*)(uint32_t threshold))0x0001cbcf;
1000d64c:	494c      	ldr	r1, [pc, #304]	; (1000d780 <platform_driver_init+0x1d4>)
1000d64e:	4a4d      	ldr	r2, [pc, #308]	; (1000d784 <platform_driver_init+0x1d8>)
1000d650:	6011      	str	r1, [r2, #0]
		NVIC_DisableIRQ(PORT1_ALL_IRQn);
		platform_register_isr = register_isr;
		platform_unregister_isr = unregister_isr;
		handle_ext_wakeup_isr = (void (*)(void))0x14085;
#endif
		platform_unregister_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX);
1000d652:	2028      	movs	r0, #40	; 0x28
1000d654:	4798      	blx	r3
		platform_register_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX,(void*)PORT1_COMB_Handler);
1000d656:	494c      	ldr	r1, [pc, #304]	; (1000d788 <platform_driver_init+0x1dc>)
1000d658:	2028      	movs	r0, #40	; 0x28
1000d65a:	682b      	ldr	r3, [r5, #0]
1000d65c:	4798      	blx	r3
		platform_register_isr(GPIO0_COMBINED_VECTOR_TABLE_INDEX,(void*)gpio0_combined_isr_handler);
1000d65e:	682b      	ldr	r3, [r5, #0]
1000d660:	494a      	ldr	r1, [pc, #296]	; (1000d78c <platform_driver_init+0x1e0>)
1000d662:	2027      	movs	r0, #39	; 0x27
1000d664:	4798      	blx	r3
		//gstrFwSem               = (void *)0x100004e4;
		//NMI_MsgQueueRecv = (int (*)(void *, void ** )) 0x00017f67;
		//InternalAppMsgQHandle = (void *)0x10001158;
		//ke_free = (void (*)(void *)) 0x00015e3d;
#elif CHIPVERSION_B0
		ke_msg_send 	= (void (*)(void const *))(*((unsigned int *)0x100400e4));
1000d666:	4b4a      	ldr	r3, [pc, #296]	; (1000d790 <platform_driver_init+0x1e4>)
1000d668:	681a      	ldr	r2, [r3, #0]
1000d66a:	4b4a      	ldr	r3, [pc, #296]	; (1000d794 <platform_driver_init+0x1e8>)
1000d66c:	601a      	str	r2, [r3, #0]
		ke_msg_alloc 	= (void* (*)(ke_msg_id_t const id, ke_task_id_t const dest_id,
1000d66e:	4a4a      	ldr	r2, [pc, #296]	; (1000d798 <platform_driver_init+0x1ec>)
1000d670:	4b4a      	ldr	r3, [pc, #296]	; (1000d79c <platform_driver_init+0x1f0>)
1000d672:	601a      	str	r2, [r3, #0]
										ke_task_id_t const src_id, uint16_t const param_len) )0x00019fe9;
		os_sem_up 		= (int (*)(void*))0x0001dbdd;
1000d674:	4a4a      	ldr	r2, [pc, #296]	; (1000d7a0 <platform_driver_init+0x1f4>)
1000d676:	4b4b      	ldr	r3, [pc, #300]	; (1000d7a4 <platform_driver_init+0x1f8>)
1000d678:	601a      	str	r2, [r3, #0]
		os_sem_down		= (int (*)(void*))0x0001dc5b;
1000d67a:	4a4b      	ldr	r2, [pc, #300]	; (1000d7a8 <platform_driver_init+0x1fc>)
1000d67c:	4b4b      	ldr	r3, [pc, #300]	; (1000d7ac <platform_driver_init+0x200>)
1000d67e:	601a      	str	r2, [r3, #0]
		gstrFwSem 		= (void*)0x100405ec;
1000d680:	4a4b      	ldr	r2, [pc, #300]	; (1000d7b0 <platform_driver_init+0x204>)
1000d682:	4b4c      	ldr	r3, [pc, #304]	; (1000d7b4 <platform_driver_init+0x208>)
1000d684:	601a      	str	r2, [r3, #0]
		NMI_MsgQueueRecv = (int(*)(void*, void ** ))0x0001d5e3;
1000d686:	4a4c      	ldr	r2, [pc, #304]	; (1000d7b8 <platform_driver_init+0x20c>)
1000d688:	4b4c      	ldr	r3, [pc, #304]	; (1000d7bc <platform_driver_init+0x210>)
1000d68a:	601a      	str	r2, [r3, #0]
		InternalAppMsgQHandle = (void*)0x10040c20;
1000d68c:	4a4c      	ldr	r2, [pc, #304]	; (1000d7c0 <platform_driver_init+0x214>)
1000d68e:	4b4d      	ldr	r3, [pc, #308]	; (1000d7c4 <platform_driver_init+0x218>)
1000d690:	601a      	str	r2, [r3, #0]
		ke_free = (void(*)(void*))0x00019f09;
1000d692:	4a4d      	ldr	r2, [pc, #308]	; (1000d7c8 <platform_driver_init+0x21c>)
1000d694:	4b4d      	ldr	r3, [pc, #308]	; (1000d7cc <platform_driver_init+0x220>)
1000d696:	601a      	str	r2, [r3, #0]
#endif
		memset(rx_buffer,0,sizeof(rx_buffer));
1000d698:	22a0      	movs	r2, #160	; 0xa0
1000d69a:	0092      	lsls	r2, r2, #2
1000d69c:	2100      	movs	r1, #0
1000d69e:	484c      	ldr	r0, [pc, #304]	; (1000d7d0 <platform_driver_init+0x224>)
1000d6a0:	4b4c      	ldr	r3, [pc, #304]	; (1000d7d4 <platform_driver_init+0x228>)
1000d6a2:	4798      	blx	r3
		plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000d6a4:	2280      	movs	r2, #128	; 0x80
1000d6a6:	0092      	lsls	r2, r2, #2
1000d6a8:	4b4b      	ldr	r3, [pc, #300]	; (1000d7d8 <platform_driver_init+0x22c>)
1000d6aa:	801a      	strh	r2, [r3, #0]
		platform_event_init();
1000d6ac:	4b4b      	ldr	r3, [pc, #300]	; (1000d7dc <platform_driver_init+0x230>)
1000d6ae:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000d6b0:	4653      	mov	r3, sl
1000d6b2:	6023      	str	r3, [r4, #0]
1000d6b4:	464b      	mov	r3, r9
1000d6b6:	6023      	str	r3, [r4, #0]
		
#ifndef CHIPVERSION_B0		
		// spi_flash clock fix.
		spi_flash_clock_init();
#endif
		samb11_app_resume_cb = NULL;
1000d6b8:	4b49      	ldr	r3, [pc, #292]	; (1000d7e0 <platform_driver_init+0x234>)
1000d6ba:	4642      	mov	r2, r8
1000d6bc:	601a      	str	r2, [r3, #0]
		*apps_resume_cb = (uint32_t)((resume_callback)samb11_plf_resume_callback);
1000d6be:	683b      	ldr	r3, [r7, #0]
1000d6c0:	4a48      	ldr	r2, [pc, #288]	; (1000d7e4 <platform_driver_init+0x238>)
1000d6c2:	601a      	str	r2, [r3, #0]
		*wakeup_source_active_cb = (uint32_t)((wakeup_source_active_callback)wakeup_active_event_callback);
1000d6c4:	6833      	ldr	r3, [r6, #0]
1000d6c6:	4a48      	ldr	r2, [pc, #288]	; (1000d7e8 <platform_driver_init+0x23c>)
1000d6c8:	601a      	str	r2, [r3, #0]
		wakeup_int_unregister_callback(0);
1000d6ca:	2000      	movs	r0, #0
1000d6cc:	4c47      	ldr	r4, [pc, #284]	; (1000d7ec <platform_driver_init+0x240>)
1000d6ce:	47a0      	blx	r4
		wakeup_int_unregister_callback(1);
1000d6d0:	2001      	movs	r0, #1
1000d6d2:	47a0      	blx	r4
		wakeup_int_unregister_callback(2);
1000d6d4:	2002      	movs	r0, #2
1000d6d6:	47a0      	blx	r4
		platform_initialized = 1;
1000d6d8:	2201      	movs	r2, #1
1000d6da:	4b06      	ldr	r3, [pc, #24]	; (1000d6f4 <platform_driver_init+0x148>)
1000d6dc:	701a      	strb	r2, [r3, #0]
		status = STATUS_SUCCESS;
1000d6de:	2000      	movs	r0, #0
1000d6e0:	e003      	b.n	1000d6ea <platform_driver_init+0x13e>
	}
	else {
		platform_initialized = 1;
1000d6e2:	2201      	movs	r2, #1
1000d6e4:	4b03      	ldr	r3, [pc, #12]	; (1000d6f4 <platform_driver_init+0x148>)
1000d6e6:	701a      	strb	r2, [r3, #0]
		status = STATUS_ALREADY_INITIALIZED;
1000d6e8:	2001      	movs	r0, #1
	}
	return status;
}
1000d6ea:	bc1c      	pop	{r2, r3, r4}
1000d6ec:	4690      	mov	r8, r2
1000d6ee:	4699      	mov	r9, r3
1000d6f0:	46a2      	mov	sl, r4
1000d6f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d6f4:	10016dc4 	.word	0x10016dc4
1000d6f8:	1000d539 	.word	0x1000d539
1000d6fc:	1000d57d 	.word	0x1000d57d
1000d700:	10016de4 	.word	0x10016de4
1000d704:	e000e100 	.word	0xe000e100
1000d708:	10017c5c 	.word	0x10017c5c
1000d70c:	000007d7 	.word	0x000007d7
1000d710:	000007bd 	.word	0x000007bd
1000d714:	10017998 	.word	0x10017998
1000d718:	0001bc51 	.word	0x0001bc51
1000d71c:	10017c60 	.word	0x10017c60
1000d720:	100400bc 	.word	0x100400bc
1000d724:	10016db8 	.word	0x10016db8
1000d728:	100400b8 	.word	0x100400b8
1000d72c:	10016db4 	.word	0x10016db4
1000d730:	0001b99f 	.word	0x0001b99f
1000d734:	10017994 	.word	0x10017994
1000d738:	0001b9db 	.word	0x0001b9db
1000d73c:	100179a0 	.word	0x100179a0
1000d740:	10017c70 	.word	0x10017c70
1000d744:	1004003c 	.word	0x1004003c
1000d748:	10041fc0 	.word	0x10041fc0
1000d74c:	100179a4 	.word	0x100179a4
1000d750:	10041fc4 	.word	0x10041fc4
1000d754:	10017c6c 	.word	0x10017c6c
1000d758:	10017c64 	.word	0x10017c64
1000d75c:	10041fd4 	.word	0x10041fd4
1000d760:	10041fd8 	.word	0x10041fd8
1000d764:	1001799c 	.word	0x1001799c
1000d768:	0001cbe9 	.word	0x0001cbe9
1000d76c:	10016dd8 	.word	0x10016dd8
1000d770:	0001cd8f 	.word	0x0001cd8f
1000d774:	10016dc8 	.word	0x10016dc8
1000d778:	0001cea3 	.word	0x0001cea3
1000d77c:	10016dec 	.word	0x10016dec
1000d780:	0001cbcf 	.word	0x0001cbcf
1000d784:	10016dc0 	.word	0x10016dc0
1000d788:	1000dc35 	.word	0x1000dc35
1000d78c:	1000dbc9 	.word	0x1000dbc9
1000d790:	100400e4 	.word	0x100400e4
1000d794:	10016de0 	.word	0x10016de0
1000d798:	00019fe9 	.word	0x00019fe9
1000d79c:	10016df0 	.word	0x10016df0
1000d7a0:	0001dbdd 	.word	0x0001dbdd
1000d7a4:	10016dbc 	.word	0x10016dbc
1000d7a8:	0001dc5b 	.word	0x0001dc5b
1000d7ac:	10016dd0 	.word	0x10016dd0
1000d7b0:	100405ec 	.word	0x100405ec
1000d7b4:	10016dcc 	.word	0x10016dcc
1000d7b8:	0001d5e3 	.word	0x0001d5e3
1000d7bc:	10016ddc 	.word	0x10016ddc
1000d7c0:	10040c20 	.word	0x10040c20
1000d7c4:	10016df4 	.word	0x10016df4
1000d7c8:	00019f09 	.word	0x00019f09
1000d7cc:	10016db0 	.word	0x10016db0
1000d7d0:	100179dc 	.word	0x100179dc
1000d7d4:	10012571 	.word	0x10012571
1000d7d8:	10017c74 	.word	0x10017c74
1000d7dc:	1000d465 	.word	0x1000d465
1000d7e0:	10017c68 	.word	0x10017c68
1000d7e4:	1000d50d 	.word	0x1000d50d
1000d7e8:	1000dc91 	.word	0x1000dc91
1000d7ec:	1000dc79 	.word	0x1000dc79

1000d7f0 <platform_register_ble_msg_handler>:


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000d7f0:	4b04      	ldr	r3, [pc, #16]	; (1000d804 <platform_register_ble_msg_handler+0x14>)
1000d7f2:	781a      	ldrb	r2, [r3, #0]
		ble_stack_message_handler = fp;
		status = STATUS_SUCCESS;
	}
	else {
		status = STATUS_NOT_INITIALIZED;
1000d7f4:	2305      	movs	r3, #5


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000d7f6:	2a01      	cmp	r2, #1
1000d7f8:	d102      	bne.n	1000d800 <platform_register_ble_msg_handler+0x10>
		ble_stack_message_handler = fp;
1000d7fa:	4b03      	ldr	r3, [pc, #12]	; (1000d808 <platform_register_ble_msg_handler+0x18>)
1000d7fc:	6018      	str	r0, [r3, #0]
		status = STATUS_SUCCESS;
1000d7fe:	2300      	movs	r3, #0
	}
	else {
		status = STATUS_NOT_INITIALIZED;
	}
	return status;
}
1000d800:	0018      	movs	r0, r3
1000d802:	4770      	bx	lr
1000d804:	10016dc4 	.word	0x10016dc4
1000d808:	10016de4 	.word	0x10016de4

1000d80c <platform_interface_send>:


//Sends a message through RW kernel messaging API
//struct ke_msg * p_msg;
void platform_interface_send(uint8_t* data, uint32_t len)
{
1000d80c:	b570      	push	{r4, r5, r6, lr}
1000d80e:	0004      	movs	r4, r0
	void* params;
	
	#if (CHIPVERSION_B0)
	ke_task_id_t dest_id;
	dest_id = p_msg_hdr->dest_id;
	if(gapm_get_task_from_id != NULL)
1000d810:	4b0e      	ldr	r3, [pc, #56]	; (1000d84c <platform_interface_send+0x40>)
1000d812:	681b      	ldr	r3, [r3, #0]
1000d814:	2b00      	cmp	r3, #0
1000d816:	d002      	beq.n	1000d81e <platform_interface_send+0x12>
		p_msg_hdr->dest_id = gapm_get_task_from_id(dest_id);
1000d818:	8840      	ldrh	r0, [r0, #2]
1000d81a:	4798      	blx	r3
1000d81c:	8060      	strh	r0, [r4, #2]
	#endif	//CHIPVERSION_B0
	// Allocate the kernel message
	params = ke_msg_alloc(p_msg_hdr->id, p_msg_hdr->dest_id, p_msg_hdr->src_id, p_msg_hdr->param_len);
1000d81e:	88e3      	ldrh	r3, [r4, #6]
1000d820:	88a2      	ldrh	r2, [r4, #4]
1000d822:	8861      	ldrh	r1, [r4, #2]
1000d824:	8820      	ldrh	r0, [r4, #0]
1000d826:	4d0a      	ldr	r5, [pc, #40]	; (1000d850 <platform_interface_send+0x44>)
1000d828:	682d      	ldr	r5, [r5, #0]
1000d82a:	47a8      	blx	r5
1000d82c:	0005      	movs	r5, r0
											
	//no params
	if (p_msg_hdr->param_len == 0)
1000d82e:	88e2      	ldrh	r2, [r4, #6]
1000d830:	2a00      	cmp	r2, #0
1000d832:	d102      	bne.n	1000d83a <platform_interface_send+0x2e>
	{
		// Send message directly
		at_ke_msg_send(params);
1000d834:	4b07      	ldr	r3, [pc, #28]	; (1000d854 <platform_interface_send+0x48>)
1000d836:	4798      	blx	r3
1000d838:	e006      	b.n	1000d848 <platform_interface_send+0x3c>
	}
	else
	{
		//copy params
		memcpy(params,&(data[KE_MSG_HDR_LENGTH]),p_msg_hdr->param_len);
1000d83a:	0021      	movs	r1, r4
1000d83c:	3108      	adds	r1, #8
1000d83e:	4b06      	ldr	r3, [pc, #24]	; (1000d858 <platform_interface_send+0x4c>)
1000d840:	4798      	blx	r3
		// Send the kernel message
		at_ke_msg_send(params);
1000d842:	0028      	movs	r0, r5
1000d844:	4b03      	ldr	r3, [pc, #12]	; (1000d854 <platform_interface_send+0x48>)
1000d846:	4798      	blx	r3
	}
}
1000d848:	bd70      	pop	{r4, r5, r6, pc}
1000d84a:	46c0      	nop			; (mov r8, r8)
1000d84c:	10016db8 	.word	0x10016db8
1000d850:	10016df0 	.word	0x10016df0
1000d854:	1000d495 	.word	0x1000d495
1000d858:	1001255f 	.word	0x1001255f

1000d85c <send_plf_int_msg_ind>:

void send_plf_int_msg_ind(uint8_t intr_index, uint8_t callback_id, void *data, uint16_t data_len)
{
1000d85c:	b570      	push	{r4, r5, r6, lr}
1000d85e:	0015      	movs	r5, r2
1000d860:	001c      	movs	r4, r3
	void* params;
//#if (CHIPVERSION_A4)	
	//os_sem_up(gstrFwSem);
//#endif
	// Allocate the kernel message
	params = ke_msg_alloc(PERIPHERAL_INTERRUPT_EVENT, TASK_INTERNAL_APP, BUILD_INTR_SRCID(callback_id,intr_index), data_len);
1000d862:	020a      	lsls	r2, r1, #8
1000d864:	4302      	orrs	r2, r0
1000d866:	4b0a      	ldr	r3, [pc, #40]	; (1000d890 <send_plf_int_msg_ind+0x34>)
1000d868:	681e      	ldr	r6, [r3, #0]
1000d86a:	0023      	movs	r3, r4
1000d86c:	2105      	movs	r1, #5
1000d86e:	20a0      	movs	r0, #160	; 0xa0
1000d870:	00c0      	lsls	r0, r0, #3
1000d872:	47b0      	blx	r6
1000d874:	1e06      	subs	r6, r0, #0
											
	//no params
	if(params != NULL) {
1000d876:	d00a      	beq.n	1000d88e <send_plf_int_msg_ind+0x32>
		if((data_len != 0) && (NULL != data))
1000d878:	2c00      	cmp	r4, #0
1000d87a:	d005      	beq.n	1000d888 <send_plf_int_msg_ind+0x2c>
1000d87c:	2d00      	cmp	r5, #0
1000d87e:	d003      	beq.n	1000d888 <send_plf_int_msg_ind+0x2c>
		{
			//copy params
			memcpy(params, data, data_len);
1000d880:	0022      	movs	r2, r4
1000d882:	0029      	movs	r1, r5
1000d884:	4b03      	ldr	r3, [pc, #12]	; (1000d894 <send_plf_int_msg_ind+0x38>)
1000d886:	4798      	blx	r3
		}
		// Send the kernel message
		at_ke_msg_send(params);
1000d888:	0030      	movs	r0, r6
1000d88a:	4b03      	ldr	r3, [pc, #12]	; (1000d898 <send_plf_int_msg_ind+0x3c>)
1000d88c:	4798      	blx	r3
	}
}
1000d88e:	bd70      	pop	{r4, r5, r6, pc}
1000d890:	10016df0 	.word	0x10016df0
1000d894:	1001255f 	.word	0x1001255f
1000d898:	1000d495 	.word	0x1000d495

1000d89c <platform_event_wait>:
//Waits on InternalAppMsgQHandle Queue
// This function won't busy wait if nothing on queue but will down the semaphore and go to a blocking state
// The OS then will move control to other higher priority tasks and will only return if these tasks finish processing AND the queue has received 
//a msg
plf_drv_status platform_event_wait(uint32_t timeout)
{
1000d89c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d89e:	465f      	mov	r7, fp
1000d8a0:	4656      	mov	r6, sl
1000d8a2:	464d      	mov	r5, r9
1000d8a4:	4644      	mov	r4, r8
1000d8a6:	b4f0      	push	{r4, r5, r6, r7}
1000d8a8:	b087      	sub	sp, #28
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000d8aa:	1e44      	subs	r4, r0, #1
plf_drv_status platform_event_wait(uint32_t timeout)
{
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
1000d8ac:	2300      	movs	r3, #0
1000d8ae:	4699      	mov	r9, r3
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000d8b0:	1ce3      	adds	r3, r4, #3
1000d8b2:	d81c      	bhi.n	1000d8ee <platform_event_wait+0x52>
	return num_of_freed;
}

static void platform_start_event_timeout(uint32_t timeout)
{
	uint8_t msg[8+5] = {0};
1000d8b4:	220d      	movs	r2, #13
1000d8b6:	2100      	movs	r1, #0
1000d8b8:	a802      	add	r0, sp, #8
1000d8ba:	4b82      	ldr	r3, [pc, #520]	; (1000dac4 <platform_event_wait+0x228>)
1000d8bc:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000d8be:	2333      	movs	r3, #51	; 0x33
1000d8c0:	aa02      	add	r2, sp, #8
1000d8c2:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000d8c4:	3b30      	subs	r3, #48	; 0x30
1000d8c6:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000d8c8:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000d8ca:	3302      	adds	r3, #2
1000d8cc:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000d8ce:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (((5)>>8) & 0x00FF );
	
	msg[u16TxLen++] = (uint8_t)((timeout) & 0x00FF );
1000d8d0:	7214      	strb	r4, [r2, #8]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 8) & 0x00FF) ;
1000d8d2:	0a23      	lsrs	r3, r4, #8
1000d8d4:	7253      	strb	r3, [r2, #9]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 16) & 0x00FF);
1000d8d6:	0c23      	lsrs	r3, r4, #16
1000d8d8:	7293      	strb	r3, [r2, #10]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 24) & 0x00FF);
1000d8da:	0e24      	lsrs	r4, r4, #24
1000d8dc:	72d4      	strb	r4, [r2, #11]
	
	msg[u16TxLen++] = ((1) & 0x00FF );
1000d8de:	2301      	movs	r3, #1
1000d8e0:	7313      	strb	r3, [r2, #12]
	
	platform_interface_send(msg, u16TxLen);
1000d8e2:	210d      	movs	r1, #13
1000d8e4:	0010      	movs	r0, r2
1000d8e6:	4b78      	ldr	r3, [pc, #480]	; (1000dac8 <platform_event_wait+0x22c>)
1000d8e8:	4798      	blx	r3
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
	{			
		platform_start_event_timeout(timeout-1);
		bEventTimeoutFlag = 1;
1000d8ea:	2301      	movs	r3, #1
1000d8ec:	4699      	mov	r9, r3
1000d8ee:	2400      	movs	r4, #0
1000d8f0:	2500      	movs	r5, #0
	}

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
1000d8f2:	4f76      	ldr	r7, [pc, #472]	; (1000dacc <platform_event_wait+0x230>)
1000d8f4:	4e76      	ldr	r6, [pc, #472]	; (1000dad0 <platform_event_wait+0x234>)
1000d8f6:	4977      	ldr	r1, [pc, #476]	; (1000dad4 <platform_event_wait+0x238>)
1000d8f8:	6838      	ldr	r0, [r7, #0]
1000d8fa:	6833      	ldr	r3, [r6, #0]
1000d8fc:	4798      	blx	r3
1000d8fe:	2800      	cmp	r0, #0
1000d900:	d000      	beq.n	1000d904 <platform_event_wait+0x68>
1000d902:	e088      	b.n	1000da16 <platform_event_wait+0x17a>
		{
			uint16_t msg_id = rcv_msg->id;
1000d904:	4b73      	ldr	r3, [pc, #460]	; (1000dad4 <platform_event_wait+0x238>)
1000d906:	681c      	ldr	r4, [r3, #0]
1000d908:	88a3      	ldrh	r3, [r4, #4]
1000d90a:	469a      	mov	sl, r3
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000d90c:	23cd      	movs	r3, #205	; 0xcd
1000d90e:	009b      	lsls	r3, r3, #2
1000d910:	459a      	cmp	sl, r3
1000d912:	d100      	bne.n	1000d916 <platform_event_wait+0x7a>
1000d914:	e0c7      	b.n	1000daa6 <platform_event_wait+0x20a>

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
1000d916:	8923      	ldrh	r3, [r4, #8]
1000d918:	469b      	mov	fp, r3
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
1000d91a:	8963      	ldrh	r3, [r4, #10]
1000d91c:	4698      	mov	r8, r3
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000d91e:	464b      	mov	r3, r9
1000d920:	2b00      	cmp	r3, #0
1000d922:	d011      	beq.n	1000d948 <platform_event_wait+0xac>
	platform_interface_send(msg, u16TxLen);
}

static void platform_stop_event_timeout(void)
{
	uint8_t msg[8+5] = {0};
1000d924:	220d      	movs	r2, #13
1000d926:	2100      	movs	r1, #0
1000d928:	a802      	add	r0, sp, #8
1000d92a:	4b66      	ldr	r3, [pc, #408]	; (1000dac4 <platform_event_wait+0x228>)
1000d92c:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000d92e:	2333      	movs	r3, #51	; 0x33
1000d930:	aa02      	add	r2, sp, #8
1000d932:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000d934:	3b30      	subs	r3, #48	; 0x30
1000d936:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000d938:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000d93a:	3302      	adds	r3, #2
1000d93c:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000d93e:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (uint8_t)(( (0) >> 16) & 0x00FF);
	msg[u16TxLen++] = (uint8_t)(( (0) >> 24) & 0x00FF);
	
	msg[u16TxLen++] = ((0) & 0x00FF );
	
	platform_interface_send(msg, u16TxLen);
1000d940:	210d      	movs	r1, #13
1000d942:	0010      	movs	r0, r2
1000d944:	4b60      	ldr	r3, [pc, #384]	; (1000dac8 <platform_event_wait+0x22c>)
1000d946:	4798      	blx	r3
			{
				//Stop timer if it is still running
				platform_stop_event_timeout();
			}
				
			if(msg_id == PERIPHERAL_INTERRUPT_EVENT)
1000d948:	23a0      	movs	r3, #160	; 0xa0
1000d94a:	00db      	lsls	r3, r3, #3
1000d94c:	459a      	cmp	sl, r3
1000d94e:	d121      	bne.n	1000d994 <platform_event_wait+0xf8>
			{
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
1000d950:	4b61      	ldr	r3, [pc, #388]	; (1000dad8 <platform_event_wait+0x23c>)
1000d952:	881b      	ldrh	r3, [r3, #0]
1000d954:	4443      	add	r3, r8
1000d956:	22a0      	movs	r2, #160	; 0xa0
1000d958:	0092      	lsls	r2, r2, #2
1000d95a:	4293      	cmp	r3, r2
1000d95c:	dd02      	ble.n	1000d964 <platform_event_wait+0xc8>
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000d95e:	3a80      	subs	r2, #128	; 0x80
1000d960:	4b5d      	ldr	r3, [pc, #372]	; (1000dad8 <platform_event_wait+0x23c>)
1000d962:	801a      	strh	r2, [r3, #0]
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
1000d964:	4b5c      	ldr	r3, [pc, #368]	; (1000dad8 <platform_event_wait+0x23c>)
1000d966:	469a      	mov	sl, r3
1000d968:	881d      	ldrh	r5, [r3, #0]
1000d96a:	4b5c      	ldr	r3, [pc, #368]	; (1000dadc <platform_event_wait+0x240>)
1000d96c:	18ed      	adds	r5, r5, r3
1000d96e:	0021      	movs	r1, r4
1000d970:	310c      	adds	r1, #12
1000d972:	4642      	mov	r2, r8
1000d974:	0028      	movs	r0, r5
1000d976:	4b5a      	ldr	r3, [pc, #360]	; (1000dae0 <platform_event_wait+0x244>)
1000d978:	4798      	blx	r3
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
1000d97a:	4642      	mov	r2, r8
1000d97c:	0029      	movs	r1, r5
1000d97e:	4658      	mov	r0, fp
1000d980:	4b58      	ldr	r3, [pc, #352]	; (1000dae4 <platform_event_wait+0x248>)
1000d982:	4798      	blx	r3
				plf_event_buff_index += len;
1000d984:	4653      	mov	r3, sl
1000d986:	881b      	ldrh	r3, [r3, #0]
1000d988:	4443      	add	r3, r8
1000d98a:	4652      	mov	r2, sl
1000d98c:	8013      	strh	r3, [r2, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000d98e:	2400      	movs	r4, #0
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
				plf_event_buff_index += len;
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
1000d990:	2502      	movs	r5, #2
1000d992:	e03a      	b.n	1000da0a <platform_event_wait+0x16e>
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000d994:	4b54      	ldr	r3, [pc, #336]	; (1000dae8 <platform_event_wait+0x24c>)
1000d996:	681b      	ldr	r3, [r3, #0]
1000d998:	2b00      	cmp	r3, #0
1000d99a:	d032      	beq.n	1000da02 <platform_event_wait+0x166>
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
1000d99c:	4b4d      	ldr	r3, [pc, #308]	; (1000dad4 <platform_event_wait+0x238>)
1000d99e:	681a      	ldr	r2, [r3, #0]
1000d9a0:	8893      	ldrh	r3, [r2, #4]
1000d9a2:	21cd      	movs	r1, #205	; 0xcd
1000d9a4:	0089      	lsls	r1, r1, #2
1000d9a6:	428b      	cmp	r3, r1
1000d9a8:	d104      	bne.n	1000d9b4 <platform_event_wait+0x118>
					{
						if(bEventTimeoutFlag)
1000d9aa:	464b      	mov	r3, r9
						{
							status = STATUS_TIMEOUT;	
						}
						else
						{
							bLoopAgain = 1;
1000d9ac:	2401      	movs	r4, #1
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
1000d9ae:	2b00      	cmp	r3, #0
1000d9b0:	d02b      	beq.n	1000da0a <platform_event_wait+0x16e>
1000d9b2:	e028      	b.n	1000da06 <platform_event_wait+0x16a>
							bLoopAgain = 1;
						}
					}
					else
					{
						ke_msg_hdr = (struct ke_msghdr *)((void *)(rx_buffer+BLE_EVENT_BUFFER_START_INDEX));
1000d9b4:	4c4d      	ldr	r4, [pc, #308]	; (1000daec <platform_event_wait+0x250>)
1000d9b6:	4d49      	ldr	r5, [pc, #292]	; (1000dadc <platform_event_wait+0x240>)
1000d9b8:	6025      	str	r5, [r4, #0]
						ke_msg_hdr->id = rcv_msg->id;
1000d9ba:	702b      	strb	r3, [r5, #0]
1000d9bc:	0a1b      	lsrs	r3, r3, #8
1000d9be:	706b      	strb	r3, [r5, #1]
//#if (CHIPVERSION_A3 || CHIPVERSION_A4)
					//ke_msg_hdr->src_id = rcv_msg->src_id;
//#else
					ke_msg_hdr->src_id = gapm_get_id_from_task(rcv_msg->src_id);
1000d9c0:	8910      	ldrh	r0, [r2, #8]
1000d9c2:	4b4b      	ldr	r3, [pc, #300]	; (1000daf0 <platform_event_wait+0x254>)
1000d9c4:	681b      	ldr	r3, [r3, #0]
1000d9c6:	4798      	blx	r3
1000d9c8:	7128      	strb	r0, [r5, #4]
1000d9ca:	0a00      	lsrs	r0, r0, #8
1000d9cc:	7168      	strb	r0, [r5, #5]
//#endif  /* (CHIPVERSION_A3 || CHIPVERSION_A4) */
						ke_msg_hdr->dest_id = rcv_msg->dest_id;
1000d9ce:	6820      	ldr	r0, [r4, #0]
1000d9d0:	4b40      	ldr	r3, [pc, #256]	; (1000dad4 <platform_event_wait+0x238>)
1000d9d2:	681a      	ldr	r2, [r3, #0]
1000d9d4:	88d2      	ldrh	r2, [r2, #6]
1000d9d6:	8042      	strh	r2, [r0, #2]
						ke_msg_hdr->param_len = rcv_msg->param_len;
1000d9d8:	681d      	ldr	r5, [r3, #0]
1000d9da:	896b      	ldrh	r3, [r5, #10]
1000d9dc:	80c3      	strh	r3, [r0, #6]
						ke_msg_hdr++;
1000d9de:	3008      	adds	r0, #8
1000d9e0:	6020      	str	r0, [r4, #0]
						if(rcv_msg->param_len > 0) {
1000d9e2:	896a      	ldrh	r2, [r5, #10]
1000d9e4:	2a00      	cmp	r2, #0
1000d9e6:	d003      	beq.n	1000d9f0 <platform_event_wait+0x154>
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
1000d9e8:	0029      	movs	r1, r5
1000d9ea:	310c      	adds	r1, #12
1000d9ec:	4b3c      	ldr	r3, [pc, #240]	; (1000dae0 <platform_event_wait+0x244>)
1000d9ee:	4798      	blx	r3
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
1000d9f0:	8969      	ldrh	r1, [r5, #10]
1000d9f2:	3108      	adds	r1, #8
1000d9f4:	4b3c      	ldr	r3, [pc, #240]	; (1000dae8 <platform_event_wait+0x24c>)
1000d9f6:	681b      	ldr	r3, [r3, #0]
1000d9f8:	4838      	ldr	r0, [pc, #224]	; (1000dadc <platform_event_wait+0x240>)
1000d9fa:	4798      	blx	r3
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000d9fc:	2400      	movs	r4, #0
						ke_msg_hdr++;
						if(rcv_msg->param_len > 0) {
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
1000d9fe:	2503      	movs	r5, #3
1000da00:	e003      	b.n	1000da0a <platform_event_wait+0x16e>
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000da02:	2400      	movs	r4, #0
1000da04:	e001      	b.n	1000da0a <platform_event_wait+0x16e>
1000da06:	2400      	movs	r4, #0
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
						{
							status = STATUS_TIMEOUT;	
1000da08:	25d0      	movs	r5, #208	; 0xd0
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
					}
				}
			}
			ke_free(rcv_msg);
1000da0a:	4b32      	ldr	r3, [pc, #200]	; (1000dad4 <platform_event_wait+0x238>)
1000da0c:	6818      	ldr	r0, [r3, #0]
1000da0e:	4b39      	ldr	r3, [pc, #228]	; (1000daf4 <platform_event_wait+0x258>)
1000da10:	681b      	ldr	r3, [r3, #0]
1000da12:	4798      	blx	r3
1000da14:	e000      	b.n	1000da18 <platform_event_wait+0x17c>
		}
		else
		{
			status = STATUS_FAILURE;
1000da16:	2507      	movs	r5, #7
		}
	}while(bLoopAgain);
1000da18:	2c00      	cmp	r4, #0
1000da1a:	d000      	beq.n	1000da1e <platform_event_wait+0x182>
1000da1c:	e76b      	b.n	1000d8f6 <platform_event_wait+0x5a>
	
	if(bEventTimeoutFlag)
1000da1e:	464b      	mov	r3, r9
1000da20:	2b00      	cmp	r3, #0
1000da22:	d046      	beq.n	1000dab2 <platform_event_wait+0x216>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
1000da24:	4b29      	ldr	r3, [pc, #164]	; (1000dacc <platform_event_wait+0x230>)
1000da26:	681e      	ldr	r6, [r3, #0]
#endif 
static int NMI_MsgQueueDestroyOnKeID(NMI_MsgQueueHandle* pHandle, ke_msg_id_t u16KeMsgId)
{
	int num_of_freed=0;
	Message * current , *prev = NULL;
	if((NULL == pHandle) && (NULL == pHandle->pstrMessageList))
1000da28:	2e00      	cmp	r6, #0
1000da2a:	d104      	bne.n	1000da36 <platform_event_wait+0x19a>
1000da2c:	2300      	movs	r3, #0
1000da2e:	6a1c      	ldr	r4, [r3, #32]
1000da30:	2c00      	cmp	r4, #0
1000da32:	d131      	bne.n	1000da98 <platform_event_wait+0x1fc>
1000da34:	e03d      	b.n	1000dab2 <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
1000da36:	6a34      	ldr	r4, [r6, #32]
	os_sem_down(&pHandle->strCriticalSection);
1000da38:	2314      	movs	r3, #20
1000da3a:	469c      	mov	ip, r3
1000da3c:	44b4      	add	ip, r6
1000da3e:	4663      	mov	r3, ip
1000da40:	4660      	mov	r0, ip
1000da42:	9300      	str	r3, [sp, #0]
1000da44:	4b2c      	ldr	r3, [pc, #176]	; (1000daf8 <platform_event_wait+0x25c>)
1000da46:	681b      	ldr	r3, [r3, #0]
1000da48:	4798      	blx	r3
	while(NULL != current)
1000da4a:	2c00      	cmp	r4, #0
1000da4c:	d01f      	beq.n	1000da8e <platform_event_wait+0x1f2>
			}
			ke_free(rcv_msg);
		}
		else
		{
			status = STATUS_FAILURE;
1000da4e:	2700      	movs	r7, #0

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000da50:	23cd      	movs	r3, #205	; 0xcd
1000da52:	009b      	lsls	r3, r3, #2
1000da54:	4698      	mov	r8, r3
		{
			num_of_freed++;
			if(NULL != prev)
			{
				prev->pstrNext = current->pstrNext;
				ke_free(current);
1000da56:	4b27      	ldr	r3, [pc, #156]	; (1000daf4 <platform_event_wait+0x258>)
1000da58:	469a      	mov	sl, r3
1000da5a:	0020      	movs	r0, r4

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000da5c:	6803      	ldr	r3, [r0, #0]
1000da5e:	889b      	ldrh	r3, [r3, #4]
1000da60:	4543      	cmp	r3, r8
1000da62:	d110      	bne.n	1000da86 <platform_event_wait+0x1ea>
		{
			num_of_freed++;
			if(NULL != prev)
1000da64:	2f00      	cmp	r7, #0
1000da66:	d006      	beq.n	1000da76 <platform_event_wait+0x1da>
			{
				prev->pstrNext = current->pstrNext;
1000da68:	6883      	ldr	r3, [r0, #8]
1000da6a:	60bb      	str	r3, [r7, #8]
				ke_free(current);
1000da6c:	4653      	mov	r3, sl
1000da6e:	681b      	ldr	r3, [r3, #0]
1000da70:	4798      	blx	r3
				current = prev->pstrNext;
1000da72:	68b8      	ldr	r0, [r7, #8]
1000da74:	e009      	b.n	1000da8a <platform_event_wait+0x1ee>
			}
			else
			{
				pHandle->pstrMessageList = current->pstrNext;
1000da76:	6883      	ldr	r3, [r0, #8]
1000da78:	6233      	str	r3, [r6, #32]
				ke_free(current);
1000da7a:	4b1e      	ldr	r3, [pc, #120]	; (1000daf4 <platform_event_wait+0x258>)
1000da7c:	681b      	ldr	r3, [r3, #0]
1000da7e:	9301      	str	r3, [sp, #4]
1000da80:	4798      	blx	r3
				current = pHandle->pstrMessageList;
1000da82:	6a30      	ldr	r0, [r6, #32]
1000da84:	e001      	b.n	1000da8a <platform_event_wait+0x1ee>
			}
		}
		else
		{
			prev = current;
			current = current ->pstrNext;
1000da86:	0007      	movs	r7, r0
1000da88:	6880      	ldr	r0, [r0, #8]
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
1000da8a:	2800      	cmp	r0, #0
1000da8c:	d1e6      	bne.n	1000da5c <platform_event_wait+0x1c0>
		{
			prev = current;
			current = current ->pstrNext;
		}
	}
	os_sem_up(&pHandle->strCriticalSection);
1000da8e:	4b1b      	ldr	r3, [pc, #108]	; (1000dafc <platform_event_wait+0x260>)
1000da90:	681b      	ldr	r3, [r3, #0]
1000da92:	9800      	ldr	r0, [sp, #0]
1000da94:	4798      	blx	r3
	if(bEventTimeoutFlag)
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
1000da96:	e00c      	b.n	1000dab2 <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
1000da98:	2314      	movs	r3, #20
1000da9a:	9300      	str	r3, [sp, #0]
1000da9c:	4b16      	ldr	r3, [pc, #88]	; (1000daf8 <platform_event_wait+0x25c>)
1000da9e:	681b      	ldr	r3, [r3, #0]
1000daa0:	2014      	movs	r0, #20
1000daa2:	4798      	blx	r3
1000daa4:	e7d3      	b.n	1000da4e <platform_event_wait+0x1b2>
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000daa6:	4b10      	ldr	r3, [pc, #64]	; (1000dae8 <platform_event_wait+0x24c>)
1000daa8:	681b      	ldr	r3, [r3, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000daaa:	2400      	movs	r4, #0
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000daac:	2b00      	cmp	r3, #0
1000daae:	d0ac      	beq.n	1000da0a <platform_event_wait+0x16e>
1000dab0:	e77b      	b.n	1000d9aa <platform_event_wait+0x10e>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
}
1000dab2:	0028      	movs	r0, r5
1000dab4:	b007      	add	sp, #28
1000dab6:	bc3c      	pop	{r2, r3, r4, r5}
1000dab8:	4690      	mov	r8, r2
1000daba:	4699      	mov	r9, r3
1000dabc:	46a2      	mov	sl, r4
1000dabe:	46ab      	mov	fp, r5
1000dac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000dac2:	46c0      	nop			; (mov r8, r8)
1000dac4:	10012571 	.word	0x10012571
1000dac8:	1000d80d 	.word	0x1000d80d
1000dacc:	10016df4 	.word	0x10016df4
1000dad0:	10016ddc 	.word	0x10016ddc
1000dad4:	10016de8 	.word	0x10016de8
1000dad8:	10017c74 	.word	0x10017c74
1000dadc:	100179dc 	.word	0x100179dc
1000dae0:	1001255f 	.word	0x1001255f
1000dae4:	1000d42d 	.word	0x1000d42d
1000dae8:	10016de4 	.word	0x10016de4
1000daec:	10016dd4 	.word	0x10016dd4
1000daf0:	10016db4 	.word	0x10016db4
1000daf4:	10016db0 	.word	0x10016db0
1000daf8:	10016dd0 	.word	0x10016dd0
1000dafc:	10016dbc 	.word	0x10016dbc

1000db00 <acquire_sleep_lock>:

plf_drv_status acquire_sleep_lock()
{
1000db00:	b510      	push	{r4, lr}
    //DBG_LOG_DEV("[acquire_sleep_lock]\tDisabling ULP");
	plf_drv_status status = STATUS_RESOURCE_BUSY;
	//uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
	
	rwip_prevent_sleep_set(APP_PREVENT_SLEEP);
1000db02:	4b03      	ldr	r3, [pc, #12]	; (1000db10 <acquire_sleep_lock+0x10>)
1000db04:	681b      	ldr	r3, [r3, #0]
1000db06:	2080      	movs	r0, #128	; 0x80
1000db08:	0200      	lsls	r0, r0, #8
1000db0a:	4798      	blx	r3
		/*  */
		os_sem_up(gstrFwSem);
	}
#endif	//0
	return status;
}
1000db0c:	2008      	movs	r0, #8
1000db0e:	bd10      	pop	{r4, pc}
1000db10:	10017994 	.word	0x10017994

1000db14 <release_message_lock>:

plf_drv_status release_message_lock()
{
1000db14:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000db16:	4b03      	ldr	r3, [pc, #12]	; (1000db24 <release_message_lock+0x10>)
1000db18:	681b      	ldr	r3, [r3, #0]
1000db1a:	2080      	movs	r0, #128	; 0x80
1000db1c:	01c0      	lsls	r0, r0, #7
1000db1e:	4798      	blx	r3
	return status;
}
1000db20:	2000      	movs	r0, #0
1000db22:	bd10      	pop	{r4, pc}
1000db24:	100179a0 	.word	0x100179a0

1000db28 <release_sleep_lock>:

plf_drv_status release_sleep_lock()
{
1000db28:	b510      	push	{r4, lr}
    //DBG_LOG_DEV("[release_sleep_lock]\tEnabling ULP");
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000db2a:	4c05      	ldr	r4, [pc, #20]	; (1000db40 <release_sleep_lock+0x18>)
1000db2c:	2080      	movs	r0, #128	; 0x80
1000db2e:	01c0      	lsls	r0, r0, #7
1000db30:	6823      	ldr	r3, [r4, #0]
1000db32:	4798      	blx	r3
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
1000db34:	6823      	ldr	r3, [r4, #0]
1000db36:	2080      	movs	r0, #128	; 0x80
1000db38:	0200      	lsls	r0, r0, #8
1000db3a:	4798      	blx	r3
	return status;
}
1000db3c:	2000      	movs	r0, #0
1000db3e:	bd10      	pop	{r4, pc}
1000db40:	100179a0 	.word	0x100179a0

1000db44 <register_resume_callback>:
}

plf_drv_status register_resume_callback(resume_callback cb)
{
	plf_drv_status status = STATUS_SUCCESS;
	if(cb == NULL)
1000db44:	2800      	cmp	r0, #0
1000db46:	d003      	beq.n	1000db50 <register_resume_callback+0xc>
	{
		status = STATUS_INVALID_ARGUMENT;
	}
	else 
	{
		samb11_app_resume_cb = cb;
1000db48:	4b02      	ldr	r3, [pc, #8]	; (1000db54 <register_resume_callback+0x10>)
1000db4a:	6018      	str	r0, [r3, #0]
	}
}

plf_drv_status register_resume_callback(resume_callback cb)
{
	plf_drv_status status = STATUS_SUCCESS;
1000db4c:	2000      	movs	r0, #0
1000db4e:	e000      	b.n	1000db52 <register_resume_callback+0xe>
	if(cb == NULL)
	{
		status = STATUS_INVALID_ARGUMENT;
1000db50:	2009      	movs	r0, #9
	{
		samb11_app_resume_cb = cb;
		//*apps_resume_cb = (uint32_t)cb;
	}
	return status;
}
1000db52:	4770      	bx	lr
1000db54:	10017c68 	.word	0x10017c68

1000db58 <gpio1_combined_isr_handler>:

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source);
void wakeup_active_event_callback(uint32_t wakeup_source);

void gpio1_combined_isr_handler(void)
{
1000db58:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio1 = LPGPIO_16;
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
1000db5a:	4a18      	ldr	r2, [pc, #96]	; (1000dbbc <gpio1_combined_isr_handler+0x64>)
1000db5c:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000db5e:	b29b      	uxth	r3, r3
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000db60:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000db62:	2180      	movs	r1, #128	; 0x80
1000db64:	0209      	lsls	r1, r1, #8
1000db66:	4301      	orrs	r1, r0
1000db68:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000db6a:	0010      	movs	r0, r2
1000db6c:	4d14      	ldr	r5, [pc, #80]	; (1000dbc0 <gpio1_combined_isr_handler+0x68>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000db6e:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000db70:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000db72:	05db      	lsls	r3, r3, #23
1000db74:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000db76:	d011      	beq.n	1000db9c <gpio1_combined_isr_handler+0x44>
			port_gpio1 = (intstatus & ~(intstatus - 1));
1000db78:	b2db      	uxtb	r3, r3
1000db7a:	4259      	negs	r1, r3
1000db7c:	400b      	ands	r3, r1
			while (!(port_gpio1 == 1)) {
1000db7e:	2b01      	cmp	r3, #1
1000db80:	d006      	beq.n	1000db90 <gpio1_combined_isr_handler+0x38>
1000db82:	0011      	movs	r1, r2
				port_gpio1 = port_gpio1 >> 1;
1000db84:	085b      	lsrs	r3, r3, #1
				index++;
1000db86:	3101      	adds	r1, #1
1000db88:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio1 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio1 == 1)) {
1000db8a:	2b01      	cmp	r3, #1
1000db8c:	d1fa      	bne.n	1000db84 <gpio1_combined_isr_handler+0x2c>
1000db8e:	e000      	b.n	1000db92 <gpio1_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000db90:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000db92:	0023      	movs	r3, r4
1000db94:	408b      	lsls	r3, r1
1000db96:	b29b      	uxth	r3, r3
1000db98:	8703      	strh	r3, [r0, #56]	; 0x38
1000db9a:	e003      	b.n	1000dba4 <gpio1_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000db9c:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000db9e:	432b      	orrs	r3, r5
1000dba0:	b29b      	uxth	r3, r3
1000dba2:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO1->INTSTATUSCLEAR.reg;
1000dba4:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000dba6:	05db      	lsls	r3, r3, #23
1000dba8:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000dbaa:	d1e2      	bne.n	1000db72 <gpio1_combined_isr_handler+0x1a>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000dbac:	2180      	movs	r1, #128	; 0x80
1000dbae:	0049      	lsls	r1, r1, #1
1000dbb0:	3381      	adds	r3, #129	; 0x81
1000dbb2:	33ff      	adds	r3, #255	; 0xff
1000dbb4:	4a03      	ldr	r2, [pc, #12]	; (1000dbc4 <gpio1_combined_isr_handler+0x6c>)
1000dbb6:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(8);
}
1000dbb8:	bd30      	pop	{r4, r5, pc}
1000dbba:	46c0      	nop			; (mov r8, r8)
1000dbbc:	40011000 	.word	0x40011000
1000dbc0:	ffff8000 	.word	0xffff8000
1000dbc4:	e000e100 	.word	0xe000e100

1000dbc8 <gpio0_combined_isr_handler>:

void gpio0_combined_isr_handler(void)
{
1000dbc8:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio0 = LPGPIO_0;
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
1000dbca:	4a17      	ldr	r2, [pc, #92]	; (1000dc28 <gpio0_combined_isr_handler+0x60>)
1000dbcc:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000dbce:	b29b      	uxth	r3, r3
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000dbd0:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000dbd2:	2180      	movs	r1, #128	; 0x80
1000dbd4:	0209      	lsls	r1, r1, #8
1000dbd6:	4301      	orrs	r1, r0
1000dbd8:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000dbda:	0010      	movs	r0, r2
1000dbdc:	4d13      	ldr	r5, [pc, #76]	; (1000dc2c <gpio0_combined_isr_handler+0x64>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000dbde:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000dbe0:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000dbe2:	05db      	lsls	r3, r3, #23
1000dbe4:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000dbe6:	d011      	beq.n	1000dc0c <gpio0_combined_isr_handler+0x44>
			port_gpio0 = (intstatus & ~(intstatus - 1));
1000dbe8:	b2db      	uxtb	r3, r3
1000dbea:	4259      	negs	r1, r3
1000dbec:	400b      	ands	r3, r1
			while (!(port_gpio0 == 1)) {
1000dbee:	2b01      	cmp	r3, #1
1000dbf0:	d006      	beq.n	1000dc00 <gpio0_combined_isr_handler+0x38>
1000dbf2:	0011      	movs	r1, r2
				port_gpio0 = port_gpio0 >> 1;
1000dbf4:	085b      	lsrs	r3, r3, #1
				index++;
1000dbf6:	3101      	adds	r1, #1
1000dbf8:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio0 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio0 == 1)) {
1000dbfa:	2b01      	cmp	r3, #1
1000dbfc:	d1fa      	bne.n	1000dbf4 <gpio0_combined_isr_handler+0x2c>
1000dbfe:	e000      	b.n	1000dc02 <gpio0_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000dc00:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000dc02:	0023      	movs	r3, r4
1000dc04:	408b      	lsls	r3, r1
1000dc06:	b29b      	uxth	r3, r3
1000dc08:	8703      	strh	r3, [r0, #56]	; 0x38
1000dc0a:	e003      	b.n	1000dc14 <gpio0_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000dc0c:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000dc0e:	432b      	orrs	r3, r5
1000dc10:	b29b      	uxth	r3, r3
1000dc12:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO0->INTSTATUSCLEAR.reg;
1000dc14:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000dc16:	05db      	lsls	r3, r3, #23
1000dc18:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000dc1a:	d1e2      	bne.n	1000dbe2 <gpio0_combined_isr_handler+0x1a>
1000dc1c:	2180      	movs	r1, #128	; 0x80
1000dc1e:	3381      	adds	r3, #129	; 0x81
1000dc20:	33ff      	adds	r3, #255	; 0xff
1000dc22:	4a03      	ldr	r2, [pc, #12]	; (1000dc30 <gpio0_combined_isr_handler+0x68>)
1000dc24:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(7);
}
1000dc26:	bd30      	pop	{r4, r5, pc}
1000dc28:	40010000 	.word	0x40010000
1000dc2c:	ffff8000 	.word	0xffff8000
1000dc30:	e000e100 	.word	0xe000e100

1000dc34 <PORT1_COMB_Handler>:

#ifdef CHIPVERSION_B0
void PORT1_COMB_Handler(void)
{
1000dc34:	b510      	push	{r4, lr}
	/* if(CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13))) { */
	if (GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13))) {
1000dc36:	4b0c      	ldr	r3, [pc, #48]	; (1000dc68 <PORT1_COMB_Handler+0x34>)
1000dc38:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
1000dc3a:	0b5b      	lsrs	r3, r3, #13
1000dc3c:	d010      	beq.n	1000dc60 <PORT1_COMB_Handler+0x2c>
		handle_ext_wakeup_isr();
1000dc3e:	4b0b      	ldr	r3, [pc, #44]	; (1000dc6c <PORT1_COMB_Handler+0x38>)
1000dc40:	681b      	ldr	r3, [r3, #0]
1000dc42:	4798      	blx	r3

		/* clear specific int pin status that caused the Interrupt */
		/* CMSDK_GPIO1->INTCLEAR |= CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13)); */
		GPIO1->INTSTATUSCLEAR.reg |= GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13));
1000dc44:	4a08      	ldr	r2, [pc, #32]	; (1000dc68 <PORT1_COMB_Handler+0x34>)
1000dc46:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000dc48:	8f11      	ldrh	r1, [r2, #56]	; 0x38
1000dc4a:	0b5b      	lsrs	r3, r3, #13
1000dc4c:	035b      	lsls	r3, r3, #13
1000dc4e:	430b      	orrs	r3, r1
1000dc50:	8713      	strh	r3, [r2, #56]	; 0x38
1000dc52:	2180      	movs	r1, #128	; 0x80
1000dc54:	0049      	lsls	r1, r1, #1
1000dc56:	23c0      	movs	r3, #192	; 0xc0
1000dc58:	005b      	lsls	r3, r3, #1
1000dc5a:	4a05      	ldr	r2, [pc, #20]	; (1000dc70 <PORT1_COMB_Handler+0x3c>)
1000dc5c:	50d1      	str	r1, [r2, r3]
1000dc5e:	e001      	b.n	1000dc64 <PORT1_COMB_Handler+0x30>
		/* NVIC_ClearPendingIRQ(PORT1_COMB_IRQn); */
		NVIC_ClearPendingIRQ(8);
	} else {
		gpio1_combined_isr_handler();
1000dc60:	4b04      	ldr	r3, [pc, #16]	; (1000dc74 <PORT1_COMB_Handler+0x40>)
1000dc62:	4798      	blx	r3
	}
}
1000dc64:	bd10      	pop	{r4, pc}
1000dc66:	46c0      	nop			; (mov r8, r8)
1000dc68:	40011000 	.word	0x40011000
1000dc6c:	10017c60 	.word	0x10017c60
1000dc70:	e000e100 	.word	0xe000e100
1000dc74:	1000db59 	.word	0x1000db59

1000dc78 <wakeup_int_unregister_callback>:
	{
		wakeup_source_callback[wakeup_source] = 0;
	}
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
1000dc78:	2303      	movs	r3, #3
#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
	if(	(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_0) || 
1000dc7a:	2802      	cmp	r0, #2
1000dc7c:	d804      	bhi.n	1000dc88 <wakeup_int_unregister_callback+0x10>
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_1) || 
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_2) ) 
	{
		wakeup_source_callback[wakeup_source] = 0;
1000dc7e:	0080      	lsls	r0, r0, #2
1000dc80:	2200      	movs	r2, #0
1000dc82:	4b02      	ldr	r3, [pc, #8]	; (1000dc8c <wakeup_int_unregister_callback+0x14>)
1000dc84:	50c2      	str	r2, [r0, r3]

#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
1000dc86:	2300      	movs	r3, #0
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
	}
	return status;
}
1000dc88:	0018      	movs	r0, r3
1000dc8a:	4770      	bx	lr
1000dc8c:	10017c78 	.word	0x10017c78

1000dc90 <wakeup_active_event_callback>:

void wakeup_active_event_callback(uint32_t wakeup_source)
{
1000dc90:	b510      	push	{r4, lr}
1000dc92:	0004      	movs	r4, r0
	portint_callback_t callback;
	uint32_t *pu32WakeSource = (uint32_t *)wakeup_source;
	if((*pu32WakeSource & 0xFF) == 1)
1000dc94:	7803      	ldrb	r3, [r0, #0]
1000dc96:	2b01      	cmp	r3, #1
1000dc98:	d108      	bne.n	1000dcac <wakeup_active_event_callback+0x1c>
	{
		if(wakeup_source_callback[0] != NULL) {
1000dc9a:	4b11      	ldr	r3, [pc, #68]	; (1000dce0 <wakeup_active_event_callback+0x50>)
1000dc9c:	681b      	ldr	r3, [r3, #0]
1000dc9e:	2b00      	cmp	r3, #0
1000dca0:	d000      	beq.n	1000dca4 <wakeup_active_event_callback+0x14>
			callback = wakeup_source_callback[0];
			callback();
1000dca2:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF);
1000dca4:	23ff      	movs	r3, #255	; 0xff
1000dca6:	6822      	ldr	r2, [r4, #0]
1000dca8:	439a      	bics	r2, r3
1000dcaa:	6022      	str	r2, [r4, #0]
	}
	if(((*pu32WakeSource >> 8) & 0xFF) == 1)
1000dcac:	7863      	ldrb	r3, [r4, #1]
1000dcae:	2b01      	cmp	r3, #1
1000dcb0:	d108      	bne.n	1000dcc4 <wakeup_active_event_callback+0x34>
	{
		if(wakeup_source_callback[1] != NULL) {
1000dcb2:	4b0b      	ldr	r3, [pc, #44]	; (1000dce0 <wakeup_active_event_callback+0x50>)
1000dcb4:	685b      	ldr	r3, [r3, #4]
1000dcb6:	2b00      	cmp	r3, #0
1000dcb8:	d000      	beq.n	1000dcbc <wakeup_active_event_callback+0x2c>
			callback = wakeup_source_callback[1];
			callback();
1000dcba:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 8);
1000dcbc:	4b09      	ldr	r3, [pc, #36]	; (1000dce4 <wakeup_active_event_callback+0x54>)
1000dcbe:	6822      	ldr	r2, [r4, #0]
1000dcc0:	4013      	ands	r3, r2
1000dcc2:	6023      	str	r3, [r4, #0]
	}
	if(((*pu32WakeSource >> 16) & 0xFF) == 1)
1000dcc4:	78a3      	ldrb	r3, [r4, #2]
1000dcc6:	2b01      	cmp	r3, #1
1000dcc8:	d108      	bne.n	1000dcdc <wakeup_active_event_callback+0x4c>
	{
		if(wakeup_source_callback[2] != NULL) {
1000dcca:	4b05      	ldr	r3, [pc, #20]	; (1000dce0 <wakeup_active_event_callback+0x50>)
1000dccc:	689b      	ldr	r3, [r3, #8]
1000dcce:	2b00      	cmp	r3, #0
1000dcd0:	d000      	beq.n	1000dcd4 <wakeup_active_event_callback+0x44>
			callback = wakeup_source_callback[2];
			callback();
1000dcd2:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 16);
1000dcd4:	4b04      	ldr	r3, [pc, #16]	; (1000dce8 <wakeup_active_event_callback+0x58>)
1000dcd6:	6822      	ldr	r2, [r4, #0]
1000dcd8:	4013      	ands	r3, r2
1000dcda:	6023      	str	r3, [r4, #0]
	}
}
1000dcdc:	bd10      	pop	{r4, pc}
1000dcde:	46c0      	nop			; (mov r8, r8)
1000dce0:	10017c78 	.word	0x10017c78
1000dce4:	ffff00ff 	.word	0xffff00ff
1000dce8:	ff00ffff 	.word	0xff00ffff

1000dcec <sms_plf_event_cb>:
    //gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, true);
}

static void sms_plf_event_cb(void)
{
    sms_current_interrupt.int_on = true;
1000dcec:	2201      	movs	r2, #1
1000dcee:	4b01      	ldr	r3, [pc, #4]	; (1000dcf4 <sms_plf_event_cb+0x8>)
1000dcf0:	705a      	strb	r2, [r3, #1]
}
1000dcf2:	4770      	bx	lr
1000dcf4:	10016fd0 	.word	0x10016fd0

1000dcf8 <resume_cb>:
    sms_ble_send_cnt = 0;
}


static void resume_cb(void)
{
1000dcf8:	b510      	push	{r4, lr}
    init_port_list(); // re-initialize all ports
1000dcfa:	4b0a      	ldr	r3, [pc, #40]	; (1000dd24 <resume_cb+0x2c>)
1000dcfc:	4798      	blx	r3
    serial_console_init(); // GPIO (UART) for the console
1000dcfe:	4b0a      	ldr	r3, [pc, #40]	; (1000dd28 <resume_cb+0x30>)
1000dd00:	4798      	blx	r3
    sms_dualtimer_init();
1000dd02:	4b0a      	ldr	r3, [pc, #40]	; (1000dd2c <resume_cb+0x34>)
1000dd04:	4798      	blx	r3
    delay_init();
1000dd06:	4b0a      	ldr	r3, [pc, #40]	; (1000dd30 <resume_cb+0x38>)
1000dd08:	4798      	blx	r3
    sms_button_configure_gpio(); // GPIO (AO_0 & AO_1) for the buttons
1000dd0a:	4b0a      	ldr	r3, [pc, #40]	; (1000dd34 <resume_cb+0x3c>)
1000dd0c:	4798      	blx	r3
    sms_led_gpio_init();
1000dd0e:	4b0a      	ldr	r3, [pc, #40]	; (1000dd38 <resume_cb+0x40>)
1000dd10:	4798      	blx	r3
    sms_spi_master_configure();
1000dd12:	4b0a      	ldr	r3, [pc, #40]	; (1000dd3c <resume_cb+0x44>)
1000dd14:	4798      	blx	r3
    sms_i2c_master_configure();
1000dd16:	4b0a      	ldr	r3, [pc, #40]	; (1000dd40 <resume_cb+0x48>)
1000dd18:	4798      	blx	r3
    sms_mpu_configure_gpio();
1000dd1a:	4b0a      	ldr	r3, [pc, #40]	; (1000dd44 <resume_cb+0x4c>)
1000dd1c:	4798      	blx	r3
    sms_monitor_configure_gpio();
1000dd1e:	4b0a      	ldr	r3, [pc, #40]	; (1000dd48 <resume_cb+0x50>)
1000dd20:	4798      	blx	r3
    //gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, true);
}
1000dd22:	bd10      	pop	{r4, pc}
1000dd24:	1000d539 	.word	0x1000d539
1000dd28:	1000d2a1 	.word	0x1000d2a1
1000dd2c:	1000a095 	.word	0x1000a095
1000dd30:	100080e9 	.word	0x100080e9
1000dd34:	10009835 	.word	0x10009835
1000dd38:	10009dc9 	.word	0x10009dc9
1000dd3c:	10009f51 	.word	0x10009f51
1000dd40:	10009b31 	.word	0x10009b31
1000dd44:	10009cbd 	.word	0x10009cbd
1000dd48:	100099cd 	.word	0x100099cd

1000dd4c <sms_init_variables>:
 */
/*- Includes ---------------------------------------------------------------*/
#include "sms_peripheral1.h"

void sms_init_variables(void)
{
1000dd4c:	b510      	push	{r4, lr}
    // states
    ble_current_state = BLE_STATE_POWEROFF;
1000dd4e:	2300      	movs	r3, #0
1000dd50:	4a10      	ldr	r2, [pc, #64]	; (1000dd94 <sms_init_variables+0x48>)
1000dd52:	7013      	strb	r3, [r2, #0]
    button_instance.current_state = BUTTON_STATE_NONE;
1000dd54:	4a10      	ldr	r2, [pc, #64]	; (1000dd98 <sms_init_variables+0x4c>)
1000dd56:	7053      	strb	r3, [r2, #1]
    pressure_device.ms58_device.current_state = MS58_STATE_NONE;
1000dd58:	4810      	ldr	r0, [pc, #64]	; (1000dd9c <sms_init_variables+0x50>)
1000dd5a:	2225      	movs	r2, #37	; 0x25
1000dd5c:	5483      	strb	r3, [r0, r2]
    timer1_current_mode = TIMER1_MODE_NONE;
1000dd5e:	4a10      	ldr	r2, [pc, #64]	; (1000dda0 <sms_init_variables+0x54>)
1000dd60:	7013      	strb	r3, [r2, #0]
    timer2_current_mode = TIMER2_MODE_NONE;
1000dd62:	4a10      	ldr	r2, [pc, #64]	; (1000dda4 <sms_init_variables+0x58>)
1000dd64:	7013      	strb	r3, [r2, #0]
    sms_working_mode = SMS_MODE_BUTTON_SOLO;
1000dd66:	2101      	movs	r1, #1
1000dd68:	4a0f      	ldr	r2, [pc, #60]	; (1000dda8 <sms_init_variables+0x5c>)
1000dd6a:	7011      	strb	r1, [r2, #0]
    
    // button
    btn0_instance.id = SMS_BTN_0;
1000dd6c:	4a0f      	ldr	r2, [pc, #60]	; (1000ddac <sms_init_variables+0x60>)
1000dd6e:	7013      	strb	r3, [r2, #0]
    btn0_instance.gpio_pin = SMS_BTN_0_PIN;
1000dd70:	241f      	movs	r4, #31
1000dd72:	7054      	strb	r4, [r2, #1]
    btn0_instance.int_enabled = true;
1000dd74:	7091      	strb	r1, [r2, #2]
    btn0_instance.char_value = 0;
1000dd76:	70d3      	strb	r3, [r2, #3]
    
    pressure_device.state = PRESSURE_STATE_OFF;
1000dd78:	2228      	movs	r2, #40	; 0x28
1000dd7a:	5483      	strb	r3, [r0, r2]
    ulp_ready = false;
1000dd7c:	4a0c      	ldr	r2, [pc, #48]	; (1000ddb0 <sms_init_variables+0x64>)
1000dd7e:	7013      	strb	r3, [r2, #0]
    
    
    btn1_instance.id = SMS_BTN_1;
1000dd80:	4a0c      	ldr	r2, [pc, #48]	; (1000ddb4 <sms_init_variables+0x68>)
1000dd82:	7011      	strb	r1, [r2, #0]
    btn1_instance.gpio_pin = SMS_BTN_1_PIN;
1000dd84:	201d      	movs	r0, #29
1000dd86:	7050      	strb	r0, [r2, #1]
    btn1_instance.int_enabled = true;
1000dd88:	7091      	strb	r1, [r2, #2]
    btn1_instance.char_value = 0;
1000dd8a:	70d3      	strb	r3, [r2, #3]
    
    sms_ble_send_cnt = 0;
1000dd8c:	4a0a      	ldr	r2, [pc, #40]	; (1000ddb8 <sms_init_variables+0x6c>)
1000dd8e:	8013      	strh	r3, [r2, #0]
}
1000dd90:	bd10      	pop	{r4, pc}
1000dd92:	46c0      	nop			; (mov r8, r8)
1000dd94:	10016fe8 	.word	0x10016fe8
1000dd98:	10016ed8 	.word	0x10016ed8
1000dd9c:	10016f4c 	.word	0x10016f4c
1000dda0:	10016ecc 	.word	0x10016ecc
1000dda4:	10016fe9 	.word	0x10016fe9
1000dda8:	10016ecd 	.word	0x10016ecd
1000ddac:	10016ec8 	.word	0x10016ec8
1000ddb0:	10016ece 	.word	0x10016ece
1000ddb4:	10016ed4 	.word	0x10016ed4
1000ddb8:	10017004 	.word	0x10017004

1000ddbc <main>:
    sms_current_interrupt.int_on = true;
}


int main(void)
{
1000ddbc:	b510      	push	{r4, lr}
    /* Define current BLE state
     * ------------------------ */
    ble_current_state = BLE_STATE_STARTING;
1000ddbe:	2210      	movs	r2, #16
1000ddc0:	4b23      	ldr	r3, [pc, #140]	; (1000de50 <main+0x94>)
1000ddc2:	701a      	strb	r2, [r3, #0]
    
    /* Initialize platform
     * ------------------- */
	platform_driver_init();
1000ddc4:	4b23      	ldr	r3, [pc, #140]	; (1000de54 <main+0x98>)
1000ddc6:	4798      	blx	r3
	gpio_init(); // GPIO
1000ddc8:	4b23      	ldr	r3, [pc, #140]	; (1000de58 <main+0x9c>)
1000ddca:	4798      	blx	r3
	serial_console_init(); // serial console for debugging
1000ddcc:	4b23      	ldr	r3, [pc, #140]	; (1000de5c <main+0xa0>)
1000ddce:	4798      	blx	r3
    
    /* Disable ULP
     * ----------- */
	acquire_sleep_lock();
1000ddd0:	4b23      	ldr	r3, [pc, #140]	; (1000de60 <main+0xa4>)
1000ddd2:	4798      	blx	r3
    

    /* Initialize SMS flags
     * -------------------- */
    sms_init_variables();
1000ddd4:	4b23      	ldr	r3, [pc, #140]	; (1000de64 <main+0xa8>)
1000ddd6:	4798      	blx	r3
    
    
    /* Initialize hardware components
     * ------------------------------ */
    // Dualtimer
    sms_dualtimer_init();
1000ddd8:	4b23      	ldr	r3, [pc, #140]	; (1000de68 <main+0xac>)
1000ddda:	4798      	blx	r3
	
    delay_init();
1000dddc:	4b23      	ldr	r3, [pc, #140]	; (1000de6c <main+0xb0>)
1000ddde:	4798      	blx	r3

	// Buttons
    sms_button_configure_gpio();
1000dde0:	4b23      	ldr	r3, [pc, #140]	; (1000de70 <main+0xb4>)
1000dde2:	4798      	blx	r3
    
    // LED
    sms_led_gpio_init();
1000dde4:	4b23      	ldr	r3, [pc, #140]	; (1000de74 <main+0xb8>)
1000dde6:	4798      	blx	r3
    
    // I2C
    sms_i2c_master_configure();
1000dde8:	4b23      	ldr	r3, [pc, #140]	; (1000de78 <main+0xbc>)
1000ddea:	4798      	blx	r3
    
    // SPI
    sms_spi_master_configure();
1000ddec:	4b23      	ldr	r3, [pc, #140]	; (1000de7c <main+0xc0>)
1000ddee:	4798      	blx	r3
    
    // MPU
    sms_mpu_configure_gpio();
1000ddf0:	4b23      	ldr	r3, [pc, #140]	; (1000de80 <main+0xc4>)
1000ddf2:	4798      	blx	r3
    
    // MS58
    pressure_device.ms58_device.current_state = MS58_STATE_NONE;
1000ddf4:	2100      	movs	r1, #0
1000ddf6:	2325      	movs	r3, #37	; 0x25
1000ddf8:	4a22      	ldr	r2, [pc, #136]	; (1000de84 <main+0xc8>)
1000ddfa:	54d1      	strb	r1, [r2, r3]
    //ms58_device.reset_done = false;
    //ms58_device.init_ok = false;
    
    sms_monitor_configure_gpio();
1000ddfc:	4b22      	ldr	r3, [pc, #136]	; (1000de88 <main+0xcc>)
1000ddfe:	4798      	blx	r3
    
    /* Initialize the BLE module
     * ------------------------- */
	ble_device_init(NULL); // initialize the BLE chip and set the device address 
1000de00:	2000      	movs	r0, #0
1000de02:	4b22      	ldr	r3, [pc, #136]	; (1000de8c <main+0xd0>)
1000de04:	4798      	blx	r3
	
    
    /* Define BLE services
     * ------------------- */
    sms_button_define_services();
1000de06:	4b22      	ldr	r3, [pc, #136]	; (1000de90 <main+0xd4>)
1000de08:	4798      	blx	r3
    sms_pressure_define_services();
1000de0a:	4b22      	ldr	r3, [pc, #136]	; (1000de94 <main+0xd8>)
1000de0c:	4798      	blx	r3
    
    
    /* Register callbacks
     * ------------------ */
    // Recovering from ULP
    register_resume_callback(resume_cb); // register resume callback
1000de0e:	4822      	ldr	r0, [pc, #136]	; (1000de98 <main+0xdc>)
1000de10:	4b22      	ldr	r3, [pc, #136]	; (1000de9c <main+0xe0>)
1000de12:	4798      	blx	r3

    // Dualtimer (AON timer enables on registration... so do it later)    
    sms_dualtimer_register_callback(DUALTIMER_TIMER1, sms_dualtimer1_cb); // button pressing timer
1000de14:	4922      	ldr	r1, [pc, #136]	; (1000dea0 <main+0xe4>)
1000de16:	2000      	movs	r0, #0
1000de18:	4c22      	ldr	r4, [pc, #136]	; (1000dea4 <main+0xe8>)
1000de1a:	47a0      	blx	r4
    sms_dualtimer_register_callback(DUALTIMER_TIMER2, sms_dualtimer2_cb); // LED blinking timer
1000de1c:	4922      	ldr	r1, [pc, #136]	; (1000dea8 <main+0xec>)
1000de1e:	2001      	movs	r0, #1
1000de20:	47a0      	blx	r4

    // Buttons
    sms_button_register_callbacks();
1000de22:	4b22      	ldr	r3, [pc, #136]	; (1000deac <main+0xf0>)
1000de24:	4798      	blx	r3
    
    // MPU
    sms_mpu_register_callbacks();
1000de26:	4b22      	ldr	r3, [pc, #136]	; (1000deb0 <main+0xf4>)
1000de28:	4798      	blx	r3

    // BLE
    ble_mgr_events_callback_handler(REGISTER_CALL_BACK, BLE_GAP_EVENT_TYPE, sms_ble_gap_cb);
1000de2a:	4a22      	ldr	r2, [pc, #136]	; (1000deb4 <main+0xf8>)
1000de2c:	2100      	movs	r1, #0
1000de2e:	2000      	movs	r0, #0
1000de30:	4c21      	ldr	r4, [pc, #132]	; (1000deb8 <main+0xfc>)
1000de32:	47a0      	blx	r4
    ble_mgr_events_callback_handler(REGISTER_CALL_BACK, BLE_GATT_SERVER_EVENT_TYPE, sms_ble_gatt_server_cb);
1000de34:	4a21      	ldr	r2, [pc, #132]	; (1000debc <main+0x100>)
1000de36:	2102      	movs	r1, #2
1000de38:	2000      	movs	r0, #0
1000de3a:	47a0      	blx	r4
    register_ble_user_event_cb(sms_plf_event_cb);
1000de3c:	4820      	ldr	r0, [pc, #128]	; (1000dec0 <main+0x104>)
1000de3e:	4b21      	ldr	r3, [pc, #132]	; (1000dec4 <main+0x108>)
1000de40:	4798      	blx	r3

    //ble_set_ulp_mode(BLE_ULP_MODE_SET);
    
    /* Enable buttons interrupts
     * ------------------------- */
    sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
1000de42:	2100      	movs	r1, #0
1000de44:	2000      	movs	r0, #0
1000de46:	4b20      	ldr	r3, [pc, #128]	; (1000dec8 <main+0x10c>)
1000de48:	4798      	blx	r3
    //register int n21 asm("sp");
    //register int n22 asm("lr");
    //register int n23 asm("r15");
    //DBG_LOG("at post-init: sp 0x%x, lr 0x%x", n21, n22);
    
    sms_mpu_startup();
1000de4a:	4b20      	ldr	r3, [pc, #128]	; (1000decc <main+0x110>)
1000de4c:	4798      	blx	r3
1000de4e:	e7fe      	b.n	1000de4e <main+0x92>
1000de50:	10016fe8 	.word	0x10016fe8
1000de54:	1000d5ad 	.word	0x1000d5ad
1000de58:	1000acf1 	.word	0x1000acf1
1000de5c:	1000d2a1 	.word	0x1000d2a1
1000de60:	1000db01 	.word	0x1000db01
1000de64:	1000dd4d 	.word	0x1000dd4d
1000de68:	1000a095 	.word	0x1000a095
1000de6c:	100080e9 	.word	0x100080e9
1000de70:	10009835 	.word	0x10009835
1000de74:	10009dc9 	.word	0x10009dc9
1000de78:	10009b31 	.word	0x10009b31
1000de7c:	10009f51 	.word	0x10009f51
1000de80:	10009cbd 	.word	0x10009cbd
1000de84:	10016f4c 	.word	0x10016f4c
1000de88:	100099cd 	.word	0x100099cd
1000de8c:	1000cad1 	.word	0x1000cad1
1000de90:	10009965 	.word	0x10009965
1000de94:	10009ee9 	.word	0x10009ee9
1000de98:	1000dcf9 	.word	0x1000dcf9
1000de9c:	1000db45 	.word	0x1000db45
1000dea0:	1000a155 	.word	0x1000a155
1000dea4:	1000a0d1 	.word	0x1000a0d1
1000dea8:	1000a175 	.word	0x1000a175
1000deac:	100098e9 	.word	0x100098e9
1000deb0:	10009d3d 	.word	0x10009d3d
1000deb4:	10013ef0 	.word	0x10013ef0
1000deb8:	1000ca01 	.word	0x1000ca01
1000debc:	10013f3c 	.word	0x10013f3c
1000dec0:	1000dced 	.word	0x1000dced
1000dec4:	1000d211 	.word	0x1000d211
1000dec8:	10009919 	.word	0x10009919
1000decc:	10009d55 	.word	0x10009d55

1000ded0 <internal_event_post>:
1000ded0:	b570      	push	{r4, r5, r6, lr}
1000ded2:	4d12      	ldr	r5, [pc, #72]	; (1000df1c <internal_event_post+0x4c>)
1000ded4:	682c      	ldr	r4, [r5, #0]
1000ded6:	2c00      	cmp	r4, #0
1000ded8:	d014      	beq.n	1000df04 <internal_event_post+0x34>
1000deda:	6826      	ldr	r6, [r4, #0]
1000dedc:	60e2      	str	r2, [r4, #12]
1000dede:	602e      	str	r6, [r5, #0]
1000dee0:	2500      	movs	r5, #0
1000dee2:	4a0f      	ldr	r2, [pc, #60]	; (1000df20 <internal_event_post+0x50>)
1000dee4:	8123      	strh	r3, [r4, #8]
1000dee6:	6813      	ldr	r3, [r2, #0]
1000dee8:	6025      	str	r5, [r4, #0]
1000deea:	80a0      	strh	r0, [r4, #4]
1000deec:	80e1      	strh	r1, [r4, #6]
1000deee:	42ab      	cmp	r3, r5
1000def0:	d101      	bne.n	1000def6 <internal_event_post+0x26>
1000def2:	6014      	str	r4, [r2, #0]
1000def4:	e011      	b.n	1000df1a <internal_event_post+0x4a>
1000def6:	681a      	ldr	r2, [r3, #0]
1000def8:	2a00      	cmp	r2, #0
1000defa:	d001      	beq.n	1000df00 <internal_event_post+0x30>
1000defc:	1c13      	adds	r3, r2, #0
1000defe:	e7fa      	b.n	1000def6 <internal_event_post+0x26>
1000df00:	601c      	str	r4, [r3, #0]
1000df02:	e00a      	b.n	1000df1a <internal_event_post+0x4a>
1000df04:	b2c4      	uxtb	r4, r0
1000df06:	2c00      	cmp	r4, #0
1000df08:	d107      	bne.n	1000df1a <internal_event_post+0x4a>
1000df0a:	4c06      	ldr	r4, [pc, #24]	; (1000df24 <internal_event_post+0x54>)
1000df0c:	60e2      	str	r2, [r4, #12]
1000df0e:	2201      	movs	r2, #1
1000df10:	8123      	strh	r3, [r4, #8]
1000df12:	4b05      	ldr	r3, [pc, #20]	; (1000df28 <internal_event_post+0x58>)
1000df14:	80a0      	strh	r0, [r4, #4]
1000df16:	80e1      	strh	r1, [r4, #6]
1000df18:	701a      	strb	r2, [r3, #0]
1000df1a:	bd70      	pop	{r4, r5, r6, pc}
1000df1c:	10016e10 	.word	0x10016e10
1000df20:	10016e0c 	.word	0x10016e0c
1000df24:	10016df8 	.word	0x10016df8
1000df28:	10016e08 	.word	0x10016e08

1000df2c <internal_event_init>:
1000df2c:	b510      	push	{r4, lr}
1000df2e:	4b08      	ldr	r3, [pc, #32]	; (1000df50 <internal_event_init+0x24>)
1000df30:	0900      	lsrs	r0, r0, #4
1000df32:	0100      	lsls	r0, r0, #4
1000df34:	681a      	ldr	r2, [r3, #0]
1000df36:	1808      	adds	r0, r1, r0
1000df38:	4281      	cmp	r1, r0
1000df3a:	d003      	beq.n	1000df44 <internal_event_init+0x18>
1000df3c:	600a      	str	r2, [r1, #0]
1000df3e:	1c0a      	adds	r2, r1, #0
1000df40:	3110      	adds	r1, #16
1000df42:	e7f9      	b.n	1000df38 <internal_event_init+0xc>
1000df44:	601a      	str	r2, [r3, #0]
1000df46:	2200      	movs	r2, #0
1000df48:	4b02      	ldr	r3, [pc, #8]	; (1000df54 <internal_event_init+0x28>)
1000df4a:	601a      	str	r2, [r3, #0]
1000df4c:	bd10      	pop	{r4, pc}
1000df4e:	46c0      	nop			; (mov r8, r8)
1000df50:	10016e10 	.word	0x10016e10
1000df54:	10016e0c 	.word	0x10016e0c

1000df58 <special_events_handler>:
1000df58:	b538      	push	{r3, r4, r5, lr}
1000df5a:	4c1b      	ldr	r4, [pc, #108]	; (1000dfc8 <special_events_handler+0x70>)
1000df5c:	1c03      	adds	r3, r0, #0
1000df5e:	8825      	ldrh	r5, [r4, #0]
1000df60:	1c08      	adds	r0, r1, #0
1000df62:	1c21      	adds	r1, r4, #0
1000df64:	429d      	cmp	r5, r3
1000df66:	d107      	bne.n	1000df78 <special_events_handler+0x20>
1000df68:	88a5      	ldrh	r5, [r4, #4]
1000df6a:	4285      	cmp	r5, r0
1000df6c:	d104      	bne.n	1000df78 <special_events_handler+0x20>
1000df6e:	2301      	movs	r3, #1
1000df70:	425b      	negs	r3, r3
1000df72:	8023      	strh	r3, [r4, #0]
1000df74:	60a2      	str	r2, [r4, #8]
1000df76:	e009      	b.n	1000df8c <special_events_handler+0x34>
1000df78:	884c      	ldrh	r4, [r1, #2]
1000df7a:	429c      	cmp	r4, r3
1000df7c:	d10a      	bne.n	1000df94 <special_events_handler+0x3c>
1000df7e:	888c      	ldrh	r4, [r1, #4]
1000df80:	4284      	cmp	r4, r0
1000df82:	d107      	bne.n	1000df94 <special_events_handler+0x3c>
1000df84:	2301      	movs	r3, #1
1000df86:	425b      	negs	r3, r3
1000df88:	804b      	strh	r3, [r1, #2]
1000df8a:	608a      	str	r2, [r1, #8]
1000df8c:	4b0f      	ldr	r3, [pc, #60]	; (1000dfcc <special_events_handler+0x74>)
1000df8e:	4798      	blx	r3
1000df90:	2001      	movs	r0, #1
1000df92:	e017      	b.n	1000dfc4 <special_events_handler+0x6c>
1000df94:	490e      	ldr	r1, [pc, #56]	; (1000dfd0 <special_events_handler+0x78>)
1000df96:	428b      	cmp	r3, r1
1000df98:	d00e      	beq.n	1000dfb8 <special_events_handler+0x60>
1000df9a:	490e      	ldr	r1, [pc, #56]	; (1000dfd4 <special_events_handler+0x7c>)
1000df9c:	428b      	cmp	r3, r1
1000df9e:	d007      	beq.n	1000dfb0 <special_events_handler+0x58>
1000dfa0:	490d      	ldr	r1, [pc, #52]	; (1000dfd8 <special_events_handler+0x80>)
1000dfa2:	2000      	movs	r0, #0
1000dfa4:	428b      	cmp	r3, r1
1000dfa6:	d10d      	bne.n	1000dfc4 <special_events_handler+0x6c>
1000dfa8:	1c10      	adds	r0, r2, #0
1000dfaa:	4b0c      	ldr	r3, [pc, #48]	; (1000dfdc <special_events_handler+0x84>)
1000dfac:	4798      	blx	r3
1000dfae:	e7ef      	b.n	1000df90 <special_events_handler+0x38>
1000dfb0:	1c11      	adds	r1, r2, #0
1000dfb2:	4b0b      	ldr	r3, [pc, #44]	; (1000dfe0 <special_events_handler+0x88>)
1000dfb4:	2200      	movs	r2, #0
1000dfb6:	e002      	b.n	1000dfbe <special_events_handler+0x66>
1000dfb8:	1c11      	adds	r1, r2, #0
1000dfba:	2200      	movs	r2, #0
1000dfbc:	4b09      	ldr	r3, [pc, #36]	; (1000dfe4 <special_events_handler+0x8c>)
1000dfbe:	4798      	blx	r3
1000dfc0:	4243      	negs	r3, r0
1000dfc2:	4158      	adcs	r0, r3
1000dfc4:	bd38      	pop	{r3, r4, r5, pc}
1000dfc6:	46c0      	nop			; (mov r8, r8)
1000dfc8:	10017c84 	.word	0x10017c84
1000dfcc:	1000f941 	.word	0x1000f941
1000dfd0:	00000e13 	.word	0x00000e13
1000dfd4:	00000e15 	.word	0x00000e15
1000dfd8:	00000e01 	.word	0x00000e01
1000dfdc:	1000fcb1 	.word	0x1000fcb1
1000dfe0:	1000fe71 	.word	0x1000fe71
1000dfe4:	1000ff49 	.word	0x1000ff49

1000dfe8 <at_ble_event_get>:
1000dfe8:	2300      	movs	r3, #0
1000dfea:	b5f0      	push	{r4, r5, r6, r7, lr}
1000dfec:	b087      	sub	sp, #28
1000dfee:	9204      	str	r2, [sp, #16]
1000dff0:	7003      	strb	r3, [r0, #0]
1000dff2:	9b04      	ldr	r3, [sp, #16]
1000dff4:	9003      	str	r0, [sp, #12]
1000dff6:	3b01      	subs	r3, #1
1000dff8:	1c0d      	adds	r5, r1, #0
1000dffa:	9305      	str	r3, [sp, #20]
1000dffc:	3303      	adds	r3, #3
1000dffe:	d802      	bhi.n	1000e006 <at_ble_event_get+0x1e>
1000e000:	9804      	ldr	r0, [sp, #16]
1000e002:	4bae      	ldr	r3, [pc, #696]	; (1000e2bc <at_ble_event_get+0x2d4>)
1000e004:	4798      	blx	r3
1000e006:	9b05      	ldr	r3, [sp, #20]
1000e008:	4cad      	ldr	r4, [pc, #692]	; (1000e2c0 <at_ble_event_get+0x2d8>)
1000e00a:	3303      	adds	r3, #3
1000e00c:	d902      	bls.n	1000e014 <at_ble_event_get+0x2c>
1000e00e:	2300      	movs	r3, #0
1000e010:	9302      	str	r3, [sp, #8]
1000e012:	e015      	b.n	1000e040 <at_ble_event_get+0x58>
1000e014:	2300      	movs	r3, #0
1000e016:	9302      	str	r3, [sp, #8]
1000e018:	6823      	ldr	r3, [r4, #0]
1000e01a:	2b00      	cmp	r3, #0
1000e01c:	d113      	bne.n	1000e046 <at_ble_event_get+0x5e>
1000e01e:	9b02      	ldr	r3, [sp, #8]
1000e020:	2bd0      	cmp	r3, #208	; 0xd0
1000e022:	d100      	bne.n	1000e026 <at_ble_event_get+0x3e>
1000e024:	e2da      	b.n	1000e5dc <at_ble_event_get+0x5f4>
1000e026:	9804      	ldr	r0, [sp, #16]
1000e028:	4ba6      	ldr	r3, [pc, #664]	; (1000e2c4 <at_ble_event_get+0x2dc>)
1000e02a:	4798      	blx	r3
1000e02c:	9002      	str	r0, [sp, #8]
1000e02e:	2802      	cmp	r0, #2
1000e030:	d1f2      	bne.n	1000e018 <at_ble_event_get+0x30>
1000e032:	e03f      	b.n	1000e0b4 <at_ble_event_get+0xcc>
1000e034:	9804      	ldr	r0, [sp, #16]
1000e036:	4ba3      	ldr	r3, [pc, #652]	; (1000e2c4 <at_ble_event_get+0x2dc>)
1000e038:	4798      	blx	r3
1000e03a:	9002      	str	r0, [sp, #8]
1000e03c:	2802      	cmp	r0, #2
1000e03e:	d039      	beq.n	1000e0b4 <at_ble_event_get+0xcc>
1000e040:	6823      	ldr	r3, [r4, #0]
1000e042:	2b00      	cmp	r3, #0
1000e044:	d0f6      	beq.n	1000e034 <at_ble_event_get+0x4c>
1000e046:	9b02      	ldr	r3, [sp, #8]
1000e048:	2bd0      	cmp	r3, #208	; 0xd0
1000e04a:	d100      	bne.n	1000e04e <at_ble_event_get+0x66>
1000e04c:	e2c6      	b.n	1000e5dc <at_ble_event_get+0x5f4>
1000e04e:	9b02      	ldr	r3, [sp, #8]
1000e050:	3b03      	subs	r3, #3
1000e052:	1e5a      	subs	r2, r3, #1
1000e054:	4193      	sbcs	r3, r2
1000e056:	9a02      	ldr	r2, [sp, #8]
1000e058:	425b      	negs	r3, r3
1000e05a:	401a      	ands	r2, r3
1000e05c:	6823      	ldr	r3, [r4, #0]
1000e05e:	9202      	str	r2, [sp, #8]
1000e060:	2b00      	cmp	r3, #0
1000e062:	d100      	bne.n	1000e066 <at_ble_event_get+0x7e>
1000e064:	e2c2      	b.n	1000e5ec <at_ble_event_get+0x604>
1000e066:	681a      	ldr	r2, [r3, #0]
1000e068:	68de      	ldr	r6, [r3, #12]
1000e06a:	6022      	str	r2, [r4, #0]
1000e06c:	88da      	ldrh	r2, [r3, #6]
1000e06e:	9201      	str	r2, [sp, #4]
1000e070:	4a95      	ldr	r2, [pc, #596]	; (1000e2c8 <at_ble_event_get+0x2e0>)
1000e072:	889c      	ldrh	r4, [r3, #4]
1000e074:	6811      	ldr	r1, [r2, #0]
1000e076:	6013      	str	r3, [r2, #0]
1000e078:	6019      	str	r1, [r3, #0]
1000e07a:	4b94      	ldr	r3, [pc, #592]	; (1000e2cc <at_ble_event_get+0x2e4>)
1000e07c:	781b      	ldrb	r3, [r3, #0]
1000e07e:	2b01      	cmp	r3, #1
1000e080:	d10f      	bne.n	1000e0a2 <at_ble_event_get+0xba>
1000e082:	4b93      	ldr	r3, [pc, #588]	; (1000e2d0 <at_ble_event_get+0x2e8>)
1000e084:	4a92      	ldr	r2, [pc, #584]	; (1000e2d0 <at_ble_event_get+0x2e8>)
1000e086:	8898      	ldrh	r0, [r3, #4]
1000e088:	88d9      	ldrh	r1, [r3, #6]
1000e08a:	68d2      	ldr	r2, [r2, #12]
1000e08c:	891b      	ldrh	r3, [r3, #8]
1000e08e:	4f91      	ldr	r7, [pc, #580]	; (1000e2d4 <at_ble_event_get+0x2ec>)
1000e090:	47b8      	blx	r7
1000e092:	2210      	movs	r2, #16
1000e094:	4b90      	ldr	r3, [pc, #576]	; (1000e2d8 <at_ble_event_get+0x2f0>)
1000e096:	488e      	ldr	r0, [pc, #568]	; (1000e2d0 <at_ble_event_get+0x2e8>)
1000e098:	2100      	movs	r1, #0
1000e09a:	4798      	blx	r3
1000e09c:	2300      	movs	r3, #0
1000e09e:	4a8b      	ldr	r2, [pc, #556]	; (1000e2cc <at_ble_event_get+0x2e4>)
1000e0a0:	7013      	strb	r3, [r2, #0]
1000e0a2:	9b02      	ldr	r3, [sp, #8]
1000e0a4:	2b00      	cmp	r3, #0
1000e0a6:	d114      	bne.n	1000e0d2 <at_ble_event_get+0xea>
1000e0a8:	4b8c      	ldr	r3, [pc, #560]	; (1000e2dc <at_ble_event_get+0x2f4>)
1000e0aa:	429c      	cmp	r4, r3
1000e0ac:	d009      	beq.n	1000e0c2 <at_ble_event_get+0xda>
1000e0ae:	4b8c      	ldr	r3, [pc, #560]	; (1000e2e0 <at_ble_event_get+0x2f8>)
1000e0b0:	429c      	cmp	r4, r3
1000e0b2:	d127      	bne.n	1000e104 <at_ble_event_get+0x11c>
1000e0b4:	233a      	movs	r3, #58	; 0x3a
1000e0b6:	9a03      	ldr	r2, [sp, #12]
1000e0b8:	7013      	strb	r3, [r2, #0]
1000e0ba:	2300      	movs	r3, #0
1000e0bc:	9302      	str	r3, [sp, #8]
1000e0be:	1c1d      	adds	r5, r3, #0
1000e0c0:	e007      	b.n	1000e0d2 <at_ble_event_get+0xea>
1000e0c2:	9b01      	ldr	r3, [sp, #4]
1000e0c4:	42a3      	cmp	r3, r4
1000e0c6:	d000      	beq.n	1000e0ca <at_ble_event_get+0xe2>
1000e0c8:	e28a      	b.n	1000e5e0 <at_ble_event_get+0x5f8>
1000e0ca:	2338      	movs	r3, #56	; 0x38
1000e0cc:	9a03      	ldr	r2, [sp, #12]
1000e0ce:	7013      	strb	r3, [r2, #0]
1000e0d0:	602e      	str	r6, [r5, #0]
1000e0d2:	9b03      	ldr	r3, [sp, #12]
1000e0d4:	781b      	ldrb	r3, [r3, #0]
1000e0d6:	2b3b      	cmp	r3, #59	; 0x3b
1000e0d8:	d101      	bne.n	1000e0de <at_ble_event_get+0xf6>
1000e0da:	4b82      	ldr	r3, [pc, #520]	; (1000e2e4 <at_ble_event_get+0x2fc>)
1000e0dc:	4798      	blx	r3
1000e0de:	9b03      	ldr	r3, [sp, #12]
1000e0e0:	781b      	ldrb	r3, [r3, #0]
1000e0e2:	2b3b      	cmp	r3, #59	; 0x3b
1000e0e4:	d003      	beq.n	1000e0ee <at_ble_event_get+0x106>
1000e0e6:	9b05      	ldr	r3, [sp, #20]
1000e0e8:	3303      	adds	r3, #3
1000e0ea:	d904      	bls.n	1000e0f6 <at_ble_event_get+0x10e>
1000e0ec:	e283      	b.n	1000e5f6 <at_ble_event_get+0x60e>
1000e0ee:	9b02      	ldr	r3, [sp, #8]
1000e0f0:	2b00      	cmp	r3, #0
1000e0f2:	d088      	beq.n	1000e006 <at_ble_event_get+0x1e>
1000e0f4:	e7f7      	b.n	1000e0e6 <at_ble_event_get+0xfe>
1000e0f6:	9b02      	ldr	r3, [sp, #8]
1000e0f8:	2bd0      	cmp	r3, #208	; 0xd0
1000e0fa:	d100      	bne.n	1000e0fe <at_ble_event_get+0x116>
1000e0fc:	e27b      	b.n	1000e5f6 <at_ble_event_get+0x60e>
1000e0fe:	4b7a      	ldr	r3, [pc, #488]	; (1000e2e8 <at_ble_event_get+0x300>)
1000e100:	4798      	blx	r3
1000e102:	e278      	b.n	1000e5f6 <at_ble_event_get+0x60e>
1000e104:	9b01      	ldr	r3, [sp, #4]
1000e106:	2bbb      	cmp	r3, #187	; 0xbb
1000e108:	d125      	bne.n	1000e156 <at_ble_event_get+0x16e>
1000e10a:	2cbb      	cmp	r4, #187	; 0xbb
1000e10c:	d123      	bne.n	1000e156 <at_ble_event_get+0x16e>
1000e10e:	466b      	mov	r3, sp
1000e110:	891b      	ldrh	r3, [r3, #8]
1000e112:	80ab      	strh	r3, [r5, #4]
1000e114:	78b3      	ldrb	r3, [r6, #2]
1000e116:	7872      	ldrb	r2, [r6, #1]
1000e118:	78f0      	ldrb	r0, [r6, #3]
1000e11a:	021b      	lsls	r3, r3, #8
1000e11c:	4313      	orrs	r3, r2
1000e11e:	7971      	ldrb	r1, [r6, #5]
1000e120:	7932      	ldrb	r2, [r6, #4]
1000e122:	70a8      	strb	r0, [r5, #2]
1000e124:	4871      	ldr	r0, [pc, #452]	; (1000e2ec <at_ble_event_get+0x304>)
1000e126:	802b      	strh	r3, [r5, #0]
1000e128:	4283      	cmp	r3, r0
1000e12a:	d806      	bhi.n	1000e13a <at_ble_event_get+0x152>
1000e12c:	4a70      	ldr	r2, [pc, #448]	; (1000e2f0 <at_ble_event_get+0x308>)
1000e12e:	4293      	cmp	r3, r2
1000e130:	d20b      	bcs.n	1000e14a <at_ble_event_get+0x162>
1000e132:	4a70      	ldr	r2, [pc, #448]	; (1000e2f4 <at_ble_event_get+0x30c>)
1000e134:	4293      	cmp	r3, r2
1000e136:	d008      	beq.n	1000e14a <at_ble_event_get+0x162>
1000e138:	e009      	b.n	1000e14e <at_ble_event_get+0x166>
1000e13a:	486f      	ldr	r0, [pc, #444]	; (1000e2f8 <at_ble_event_get+0x310>)
1000e13c:	4283      	cmp	r3, r0
1000e13e:	d106      	bne.n	1000e14e <at_ble_event_get+0x166>
1000e140:	020b      	lsls	r3, r1, #8
1000e142:	4313      	orrs	r3, r2
1000e144:	80ab      	strh	r3, [r5, #4]
1000e146:	2337      	movs	r3, #55	; 0x37
1000e148:	e002      	b.n	1000e150 <at_ble_event_get+0x168>
1000e14a:	2336      	movs	r3, #54	; 0x36
1000e14c:	e000      	b.n	1000e150 <at_ble_event_get+0x168>
1000e14e:	2300      	movs	r3, #0
1000e150:	9a03      	ldr	r2, [sp, #12]
1000e152:	7013      	strb	r3, [r2, #0]
1000e154:	e7bd      	b.n	1000e0d2 <at_ble_event_get+0xea>
1000e156:	4b69      	ldr	r3, [pc, #420]	; (1000e2fc <at_ble_event_get+0x314>)
1000e158:	429c      	cmp	r4, r3
1000e15a:	d100      	bne.n	1000e15e <at_ble_event_get+0x176>
1000e15c:	e144      	b.n	1000e3e8 <at_ble_event_get+0x400>
1000e15e:	d865      	bhi.n	1000e22c <at_ble_event_get+0x244>
1000e160:	4b67      	ldr	r3, [pc, #412]	; (1000e300 <at_ble_event_get+0x318>)
1000e162:	429c      	cmp	r4, r3
1000e164:	d100      	bne.n	1000e168 <at_ble_event_get+0x180>
1000e166:	e1d5      	b.n	1000e514 <at_ble_event_get+0x52c>
1000e168:	d82f      	bhi.n	1000e1ca <at_ble_event_get+0x1e2>
1000e16a:	4b66      	ldr	r3, [pc, #408]	; (1000e304 <at_ble_event_get+0x31c>)
1000e16c:	429c      	cmp	r4, r3
1000e16e:	d100      	bne.n	1000e172 <at_ble_event_get+0x18a>
1000e170:	e1e0      	b.n	1000e534 <at_ble_event_get+0x54c>
1000e172:	d813      	bhi.n	1000e19c <at_ble_event_get+0x1b4>
1000e174:	4b64      	ldr	r3, [pc, #400]	; (1000e308 <at_ble_event_get+0x320>)
1000e176:	429c      	cmp	r4, r3
1000e178:	d100      	bne.n	1000e17c <at_ble_event_get+0x194>
1000e17a:	e1a3      	b.n	1000e4c4 <at_ble_event_get+0x4dc>
1000e17c:	d804      	bhi.n	1000e188 <at_ble_event_get+0x1a0>
1000e17e:	2638      	movs	r6, #56	; 0x38
1000e180:	42b4      	cmp	r4, r6
1000e182:	d100      	bne.n	1000e186 <at_ble_event_get+0x19e>
1000e184:	e225      	b.n	1000e5d2 <at_ble_event_get+0x5ea>
1000e186:	e117      	b.n	1000e3b8 <at_ble_event_get+0x3d0>
1000e188:	4b60      	ldr	r3, [pc, #384]	; (1000e30c <at_ble_event_get+0x324>)
1000e18a:	429c      	cmp	r4, r3
1000e18c:	d100      	bne.n	1000e190 <at_ble_event_get+0x1a8>
1000e18e:	e19f      	b.n	1000e4d0 <at_ble_event_get+0x4e8>
1000e190:	33fe      	adds	r3, #254	; 0xfe
1000e192:	33ff      	adds	r3, #255	; 0xff
1000e194:	429c      	cmp	r4, r3
1000e196:	d100      	bne.n	1000e19a <at_ble_event_get+0x1b2>
1000e198:	e1d3      	b.n	1000e542 <at_ble_event_get+0x55a>
1000e19a:	e10d      	b.n	1000e3b8 <at_ble_event_get+0x3d0>
1000e19c:	4b5c      	ldr	r3, [pc, #368]	; (1000e310 <at_ble_event_get+0x328>)
1000e19e:	429c      	cmp	r4, r3
1000e1a0:	d100      	bne.n	1000e1a4 <at_ble_event_get+0x1bc>
1000e1a2:	e1a9      	b.n	1000e4f8 <at_ble_event_get+0x510>
1000e1a4:	d808      	bhi.n	1000e1b8 <at_ble_event_get+0x1d0>
1000e1a6:	4b5b      	ldr	r3, [pc, #364]	; (1000e314 <at_ble_event_get+0x32c>)
1000e1a8:	429c      	cmp	r4, r3
1000e1aa:	d100      	bne.n	1000e1ae <at_ble_event_get+0x1c6>
1000e1ac:	e196      	b.n	1000e4dc <at_ble_event_get+0x4f4>
1000e1ae:	4b5a      	ldr	r3, [pc, #360]	; (1000e318 <at_ble_event_get+0x330>)
1000e1b0:	429c      	cmp	r4, r3
1000e1b2:	d100      	bne.n	1000e1b6 <at_ble_event_get+0x1ce>
1000e1b4:	e199      	b.n	1000e4ea <at_ble_event_get+0x502>
1000e1b6:	e0ff      	b.n	1000e3b8 <at_ble_event_get+0x3d0>
1000e1b8:	4b58      	ldr	r3, [pc, #352]	; (1000e31c <at_ble_event_get+0x334>)
1000e1ba:	429c      	cmp	r4, r3
1000e1bc:	d100      	bne.n	1000e1c0 <at_ble_event_get+0x1d8>
1000e1be:	e1a2      	b.n	1000e506 <at_ble_event_get+0x51e>
1000e1c0:	4b57      	ldr	r3, [pc, #348]	; (1000e320 <at_ble_event_get+0x338>)
1000e1c2:	429c      	cmp	r4, r3
1000e1c4:	d100      	bne.n	1000e1c8 <at_ble_event_get+0x1e0>
1000e1c6:	e1d4      	b.n	1000e572 <at_ble_event_get+0x58a>
1000e1c8:	e0f6      	b.n	1000e3b8 <at_ble_event_get+0x3d0>
1000e1ca:	4b56      	ldr	r3, [pc, #344]	; (1000e324 <at_ble_event_get+0x33c>)
1000e1cc:	429c      	cmp	r4, r3
1000e1ce:	d100      	bne.n	1000e1d2 <at_ble_event_get+0x1ea>
1000e1d0:	e1c8      	b.n	1000e564 <at_ble_event_get+0x57c>
1000e1d2:	d812      	bhi.n	1000e1fa <at_ble_event_get+0x212>
1000e1d4:	4b54      	ldr	r3, [pc, #336]	; (1000e328 <at_ble_event_get+0x340>)
1000e1d6:	429c      	cmp	r4, r3
1000e1d8:	d100      	bne.n	1000e1dc <at_ble_event_get+0x1f4>
1000e1da:	e1d1      	b.n	1000e580 <at_ble_event_get+0x598>
1000e1dc:	d804      	bhi.n	1000e1e8 <at_ble_event_get+0x200>
1000e1de:	4b53      	ldr	r3, [pc, #332]	; (1000e32c <at_ble_event_get+0x344>)
1000e1e0:	429c      	cmp	r4, r3
1000e1e2:	d100      	bne.n	1000e1e6 <at_ble_event_get+0x1fe>
1000e1e4:	e19b      	b.n	1000e51e <at_ble_event_get+0x536>
1000e1e6:	e0e7      	b.n	1000e3b8 <at_ble_event_get+0x3d0>
1000e1e8:	4b51      	ldr	r3, [pc, #324]	; (1000e330 <at_ble_event_get+0x348>)
1000e1ea:	429c      	cmp	r4, r3
1000e1ec:	d100      	bne.n	1000e1f0 <at_ble_event_get+0x208>
1000e1ee:	e1ad      	b.n	1000e54c <at_ble_event_get+0x564>
1000e1f0:	4b50      	ldr	r3, [pc, #320]	; (1000e334 <at_ble_event_get+0x34c>)
1000e1f2:	429c      	cmp	r4, r3
1000e1f4:	d100      	bne.n	1000e1f8 <at_ble_event_get+0x210>
1000e1f6:	e1b0      	b.n	1000e55a <at_ble_event_get+0x572>
1000e1f8:	e0de      	b.n	1000e3b8 <at_ble_event_get+0x3d0>
1000e1fa:	4b4f      	ldr	r3, [pc, #316]	; (1000e338 <at_ble_event_get+0x350>)
1000e1fc:	429c      	cmp	r4, r3
1000e1fe:	d100      	bne.n	1000e202 <at_ble_event_get+0x21a>
1000e200:	e0e0      	b.n	1000e3c4 <at_ble_event_get+0x3dc>
1000e202:	d809      	bhi.n	1000e218 <at_ble_event_get+0x230>
1000e204:	3b08      	subs	r3, #8
1000e206:	429c      	cmp	r4, r3
1000e208:	d100      	bne.n	1000e20c <at_ble_event_get+0x224>
1000e20a:	e0d7      	b.n	1000e3bc <at_ble_event_get+0x3d4>
1000e20c:	4b4b      	ldr	r3, [pc, #300]	; (1000e33c <at_ble_event_get+0x354>)
1000e20e:	2639      	movs	r6, #57	; 0x39
1000e210:	429c      	cmp	r4, r3
1000e212:	d100      	bne.n	1000e216 <at_ble_event_get+0x22e>
1000e214:	e1dd      	b.n	1000e5d2 <at_ble_event_get+0x5ea>
1000e216:	e0cf      	b.n	1000e3b8 <at_ble_event_get+0x3d0>
1000e218:	23d1      	movs	r3, #209	; 0xd1
1000e21a:	011b      	lsls	r3, r3, #4
1000e21c:	429c      	cmp	r4, r3
1000e21e:	d100      	bne.n	1000e222 <at_ble_event_get+0x23a>
1000e220:	e0d6      	b.n	1000e3d0 <at_ble_event_get+0x3e8>
1000e222:	4b47      	ldr	r3, [pc, #284]	; (1000e340 <at_ble_event_get+0x358>)
1000e224:	429c      	cmp	r4, r3
1000e226:	d100      	bne.n	1000e22a <at_ble_event_get+0x242>
1000e228:	e0d8      	b.n	1000e3dc <at_ble_event_get+0x3f4>
1000e22a:	e0c5      	b.n	1000e3b8 <at_ble_event_get+0x3d0>
1000e22c:	4b45      	ldr	r3, [pc, #276]	; (1000e344 <at_ble_event_get+0x35c>)
1000e22e:	429c      	cmp	r4, r3
1000e230:	d100      	bne.n	1000e234 <at_ble_event_get+0x24c>
1000e232:	e117      	b.n	1000e464 <at_ble_event_get+0x47c>
1000e234:	d82e      	bhi.n	1000e294 <at_ble_event_get+0x2ac>
1000e236:	4b44      	ldr	r3, [pc, #272]	; (1000e348 <at_ble_event_get+0x360>)
1000e238:	429c      	cmp	r4, r3
1000e23a:	d100      	bne.n	1000e23e <at_ble_event_get+0x256>
1000e23c:	e13d      	b.n	1000e4ba <at_ble_event_get+0x4d2>
1000e23e:	d812      	bhi.n	1000e266 <at_ble_event_get+0x27e>
1000e240:	4b42      	ldr	r3, [pc, #264]	; (1000e34c <at_ble_event_get+0x364>)
1000e242:	429c      	cmp	r4, r3
1000e244:	d100      	bne.n	1000e248 <at_ble_event_get+0x260>
1000e246:	e0e8      	b.n	1000e41a <at_ble_event_get+0x432>
1000e248:	d804      	bhi.n	1000e254 <at_ble_event_get+0x26c>
1000e24a:	3b03      	subs	r3, #3
1000e24c:	429c      	cmp	r4, r3
1000e24e:	d100      	bne.n	1000e252 <at_ble_event_get+0x26a>
1000e250:	e0d0      	b.n	1000e3f4 <at_ble_event_get+0x40c>
1000e252:	e0b1      	b.n	1000e3b8 <at_ble_event_get+0x3d0>
1000e254:	4b3e      	ldr	r3, [pc, #248]	; (1000e350 <at_ble_event_get+0x368>)
1000e256:	429c      	cmp	r4, r3
1000e258:	d100      	bne.n	1000e25c <at_ble_event_get+0x274>
1000e25a:	e0d0      	b.n	1000e3fe <at_ble_event_get+0x416>
1000e25c:	4b3d      	ldr	r3, [pc, #244]	; (1000e354 <at_ble_event_get+0x36c>)
1000e25e:	429c      	cmp	r4, r3
1000e260:	d100      	bne.n	1000e264 <at_ble_event_get+0x27c>
1000e262:	e0f9      	b.n	1000e458 <at_ble_event_get+0x470>
1000e264:	e0a8      	b.n	1000e3b8 <at_ble_event_get+0x3d0>
1000e266:	4b3c      	ldr	r3, [pc, #240]	; (1000e358 <at_ble_event_get+0x370>)
1000e268:	429c      	cmp	r4, r3
1000e26a:	d100      	bne.n	1000e26e <at_ble_event_get+0x286>
1000e26c:	e0db      	b.n	1000e426 <at_ble_event_get+0x43e>
1000e26e:	d808      	bhi.n	1000e282 <at_ble_event_get+0x29a>
1000e270:	4b3a      	ldr	r3, [pc, #232]	; (1000e35c <at_ble_event_get+0x374>)
1000e272:	429c      	cmp	r4, r3
1000e274:	d100      	bne.n	1000e278 <at_ble_event_get+0x290>
1000e276:	e11b      	b.n	1000e4b0 <at_ble_event_get+0x4c8>
1000e278:	4b39      	ldr	r3, [pc, #228]	; (1000e360 <at_ble_event_get+0x378>)
1000e27a:	429c      	cmp	r4, r3
1000e27c:	d100      	bne.n	1000e280 <at_ble_event_get+0x298>
1000e27e:	e0d8      	b.n	1000e432 <at_ble_event_get+0x44a>
1000e280:	e09a      	b.n	1000e3b8 <at_ble_event_get+0x3d0>
1000e282:	4b38      	ldr	r3, [pc, #224]	; (1000e364 <at_ble_event_get+0x37c>)
1000e284:	429c      	cmp	r4, r3
1000e286:	d100      	bne.n	1000e28a <at_ble_event_get+0x2a2>
1000e288:	e0d8      	b.n	1000e43c <at_ble_event_get+0x454>
1000e28a:	4b37      	ldr	r3, [pc, #220]	; (1000e368 <at_ble_event_get+0x380>)
1000e28c:	429c      	cmp	r4, r3
1000e28e:	d100      	bne.n	1000e292 <at_ble_event_get+0x2aa>
1000e290:	e0db      	b.n	1000e44a <at_ble_event_get+0x462>
1000e292:	e091      	b.n	1000e3b8 <at_ble_event_get+0x3d0>
1000e294:	4b35      	ldr	r3, [pc, #212]	; (1000e36c <at_ble_event_get+0x384>)
1000e296:	429c      	cmp	r4, r3
1000e298:	d100      	bne.n	1000e29c <at_ble_event_get+0x2b4>
1000e29a:	e0f7      	b.n	1000e48c <at_ble_event_get+0x4a4>
1000e29c:	d876      	bhi.n	1000e38c <at_ble_event_get+0x3a4>
1000e29e:	4b34      	ldr	r3, [pc, #208]	; (1000e370 <at_ble_event_get+0x388>)
1000e2a0:	429c      	cmp	r4, r3
1000e2a2:	d100      	bne.n	1000e2a6 <at_ble_event_get+0x2be>
1000e2a4:	e0f8      	b.n	1000e498 <at_ble_event_get+0x4b0>
1000e2a6:	d869      	bhi.n	1000e37c <at_ble_event_get+0x394>
1000e2a8:	4b32      	ldr	r3, [pc, #200]	; (1000e374 <at_ble_event_get+0x38c>)
1000e2aa:	429c      	cmp	r4, r3
1000e2ac:	d100      	bne.n	1000e2b0 <at_ble_event_get+0x2c8>
1000e2ae:	e0e0      	b.n	1000e472 <at_ble_event_get+0x48a>
1000e2b0:	4b31      	ldr	r3, [pc, #196]	; (1000e378 <at_ble_event_get+0x390>)
1000e2b2:	429c      	cmp	r4, r3
1000e2b4:	d100      	bne.n	1000e2b8 <at_ble_event_get+0x2d0>
1000e2b6:	e0a9      	b.n	1000e40c <at_ble_event_get+0x424>
1000e2b8:	e07e      	b.n	1000e3b8 <at_ble_event_get+0x3d0>
1000e2ba:	46c0      	nop			; (mov r8, r8)
1000e2bc:	1000f979 	.word	0x1000f979
1000e2c0:	10016e0c 	.word	0x10016e0c
1000e2c4:	1000d89d 	.word	0x1000d89d
1000e2c8:	10016e10 	.word	0x10016e10
1000e2cc:	10016e08 	.word	0x10016e08
1000e2d0:	10016df8 	.word	0x10016df8
1000e2d4:	1000ded1 	.word	0x1000ded1
1000e2d8:	10012571 	.word	0x10012571
1000e2dc:	0000ffff 	.word	0x0000ffff
1000e2e0:	0000fffe 	.word	0x0000fffe
1000e2e4:	1000db15 	.word	0x1000db15
1000e2e8:	1000f97b 	.word	0x1000f97b
1000e2ec:	0000201e 	.word	0x0000201e
1000e2f0:	0000201d 	.word	0x0000201d
1000e2f4:	00000c03 	.word	0x00000c03
1000e2f8:	0000201f 	.word	0x0000201f
1000e2fc:	00000d1c 	.word	0x00000d1c
1000e300:	00000c0c 	.word	0x00000c0c
1000e304:	00000c02 	.word	0x00000c02
1000e308:	00000a02 	.word	0x00000a02
1000e30c:	00000a03 	.word	0x00000a03
1000e310:	00000c06 	.word	0x00000c06
1000e314:	00000c04 	.word	0x00000c04
1000e318:	00000c05 	.word	0x00000c05
1000e31c:	00000c07 	.word	0x00000c07
1000e320:	00000c09 	.word	0x00000c09
1000e324:	00000c17 	.word	0x00000c17
1000e328:	00000c12 	.word	0x00000c12
1000e32c:	00000c0d 	.word	0x00000c0d
1000e330:	00000c13 	.word	0x00000c13
1000e334:	00000c15 	.word	0x00000c15
1000e338:	00000d08 	.word	0x00000d08
1000e33c:	00000d01 	.word	0x00000d01
1000e340:	00000d15 	.word	0x00000d15
1000e344:	00000e1b 	.word	0x00000e1b
1000e348:	00000e0f 	.word	0x00000e0f
1000e34c:	00000e03 	.word	0x00000e03
1000e350:	00000e06 	.word	0x00000e06
1000e354:	00000e0a 	.word	0x00000e0a
1000e358:	00000e15 	.word	0x00000e15
1000e35c:	00000e11 	.word	0x00000e11
1000e360:	00000e13 	.word	0x00000e13
1000e364:	00000e17 	.word	0x00000e17
1000e368:	00000e19 	.word	0x00000e19
1000e36c:	00000e27 	.word	0x00000e27
1000e370:	00000e21 	.word	0x00000e21
1000e374:	00000e1c 	.word	0x00000e1c
1000e378:	00000e1d 	.word	0x00000e1d
1000e37c:	4b9f      	ldr	r3, [pc, #636]	; (1000e5fc <at_ble_event_get+0x614>)
1000e37e:	429c      	cmp	r4, r3
1000e380:	d07e      	beq.n	1000e480 <at_ble_event_get+0x498>
1000e382:	4b9f      	ldr	r3, [pc, #636]	; (1000e600 <at_ble_event_get+0x618>)
1000e384:	429c      	cmp	r4, r3
1000e386:	d100      	bne.n	1000e38a <at_ble_event_get+0x3a2>
1000e388:	e08c      	b.n	1000e4a4 <at_ble_event_get+0x4bc>
1000e38a:	e015      	b.n	1000e3b8 <at_ble_event_get+0x3d0>
1000e38c:	4b9d      	ldr	r3, [pc, #628]	; (1000e604 <at_ble_event_get+0x61c>)
1000e38e:	429c      	cmp	r4, r3
1000e390:	d100      	bne.n	1000e394 <at_ble_event_get+0x3ac>
1000e392:	e10a      	b.n	1000e5aa <at_ble_event_get+0x5c2>
1000e394:	d808      	bhi.n	1000e3a8 <at_ble_event_get+0x3c0>
1000e396:	4b9c      	ldr	r3, [pc, #624]	; (1000e608 <at_ble_event_get+0x620>)
1000e398:	429c      	cmp	r4, r3
1000e39a:	d100      	bne.n	1000e39e <at_ble_event_get+0x3b6>
1000e39c:	e0f7      	b.n	1000e58e <at_ble_event_get+0x5a6>
1000e39e:	4b9b      	ldr	r3, [pc, #620]	; (1000e60c <at_ble_event_get+0x624>)
1000e3a0:	429c      	cmp	r4, r3
1000e3a2:	d100      	bne.n	1000e3a6 <at_ble_event_get+0x3be>
1000e3a4:	e0fa      	b.n	1000e59c <at_ble_event_get+0x5b4>
1000e3a6:	e007      	b.n	1000e3b8 <at_ble_event_get+0x3d0>
1000e3a8:	4b99      	ldr	r3, [pc, #612]	; (1000e610 <at_ble_event_get+0x628>)
1000e3aa:	429c      	cmp	r4, r3
1000e3ac:	d100      	bne.n	1000e3b0 <at_ble_event_get+0x3c8>
1000e3ae:	e103      	b.n	1000e5b8 <at_ble_event_get+0x5d0>
1000e3b0:	4b98      	ldr	r3, [pc, #608]	; (1000e614 <at_ble_event_get+0x62c>)
1000e3b2:	429c      	cmp	r4, r3
1000e3b4:	d100      	bne.n	1000e3b8 <at_ble_event_get+0x3d0>
1000e3b6:	e106      	b.n	1000e5c6 <at_ble_event_get+0x5de>
1000e3b8:	2600      	movs	r6, #0
1000e3ba:	e10a      	b.n	1000e5d2 <at_ble_event_get+0x5ea>
1000e3bc:	1c30      	adds	r0, r6, #0
1000e3be:	1c29      	adds	r1, r5, #0
1000e3c0:	4b95      	ldr	r3, [pc, #596]	; (1000e618 <at_ble_event_get+0x630>)
1000e3c2:	e014      	b.n	1000e3ee <at_ble_event_get+0x406>
1000e3c4:	1c30      	adds	r0, r6, #0
1000e3c6:	1c29      	adds	r1, r5, #0
1000e3c8:	4b94      	ldr	r3, [pc, #592]	; (1000e61c <at_ble_event_get+0x634>)
1000e3ca:	4798      	blx	r3
1000e3cc:	2604      	movs	r6, #4
1000e3ce:	e100      	b.n	1000e5d2 <at_ble_event_get+0x5ea>
1000e3d0:	1c30      	adds	r0, r6, #0
1000e3d2:	1c29      	adds	r1, r5, #0
1000e3d4:	4b92      	ldr	r3, [pc, #584]	; (1000e620 <at_ble_event_get+0x638>)
1000e3d6:	4798      	blx	r3
1000e3d8:	2601      	movs	r6, #1
1000e3da:	e0fa      	b.n	1000e5d2 <at_ble_event_get+0x5ea>
1000e3dc:	1c30      	adds	r0, r6, #0
1000e3de:	1c29      	adds	r1, r5, #0
1000e3e0:	4b90      	ldr	r3, [pc, #576]	; (1000e624 <at_ble_event_get+0x63c>)
1000e3e2:	4798      	blx	r3
1000e3e4:	260f      	movs	r6, #15
1000e3e6:	e0f4      	b.n	1000e5d2 <at_ble_event_get+0x5ea>
1000e3e8:	1c30      	adds	r0, r6, #0
1000e3ea:	1c29      	adds	r1, r5, #0
1000e3ec:	4b8e      	ldr	r3, [pc, #568]	; (1000e628 <at_ble_event_get+0x640>)
1000e3ee:	4798      	blx	r3
1000e3f0:	1c06      	adds	r6, r0, #0
1000e3f2:	e0ee      	b.n	1000e5d2 <at_ble_event_get+0x5ea>
1000e3f4:	9801      	ldr	r0, [sp, #4]
1000e3f6:	1c31      	adds	r1, r6, #0
1000e3f8:	1c2a      	adds	r2, r5, #0
1000e3fa:	4b8c      	ldr	r3, [pc, #560]	; (1000e62c <at_ble_event_get+0x644>)
1000e3fc:	e017      	b.n	1000e42e <at_ble_event_get+0x446>
1000e3fe:	1c31      	adds	r1, r6, #0
1000e400:	9801      	ldr	r0, [sp, #4]
1000e402:	1c2a      	adds	r2, r5, #0
1000e404:	4b8a      	ldr	r3, [pc, #552]	; (1000e630 <at_ble_event_get+0x648>)
1000e406:	4798      	blx	r3
1000e408:	2611      	movs	r6, #17
1000e40a:	e0e2      	b.n	1000e5d2 <at_ble_event_get+0x5ea>
1000e40c:	1c31      	adds	r1, r6, #0
1000e40e:	9801      	ldr	r0, [sp, #4]
1000e410:	1c2a      	adds	r2, r5, #0
1000e412:	4b88      	ldr	r3, [pc, #544]	; (1000e634 <at_ble_event_get+0x64c>)
1000e414:	4798      	blx	r3
1000e416:	2612      	movs	r6, #18
1000e418:	e0db      	b.n	1000e5d2 <at_ble_event_get+0x5ea>
1000e41a:	1c30      	adds	r0, r6, #0
1000e41c:	1c29      	adds	r1, r5, #0
1000e41e:	4b86      	ldr	r3, [pc, #536]	; (1000e638 <at_ble_event_get+0x650>)
1000e420:	4798      	blx	r3
1000e422:	2606      	movs	r6, #6
1000e424:	e0d5      	b.n	1000e5d2 <at_ble_event_get+0x5ea>
1000e426:	1c31      	adds	r1, r6, #0
1000e428:	1c2a      	adds	r2, r5, #0
1000e42a:	9801      	ldr	r0, [sp, #4]
1000e42c:	4b83      	ldr	r3, [pc, #524]	; (1000e63c <at_ble_event_get+0x654>)
1000e42e:	4798      	blx	r3
1000e430:	e7de      	b.n	1000e3f0 <at_ble_event_get+0x408>
1000e432:	9801      	ldr	r0, [sp, #4]
1000e434:	1c31      	adds	r1, r6, #0
1000e436:	1c2a      	adds	r2, r5, #0
1000e438:	4b81      	ldr	r3, [pc, #516]	; (1000e640 <at_ble_event_get+0x658>)
1000e43a:	e7f8      	b.n	1000e42e <at_ble_event_get+0x446>
1000e43c:	1c31      	adds	r1, r6, #0
1000e43e:	9801      	ldr	r0, [sp, #4]
1000e440:	1c2a      	adds	r2, r5, #0
1000e442:	4b80      	ldr	r3, [pc, #512]	; (1000e644 <at_ble_event_get+0x65c>)
1000e444:	4798      	blx	r3
1000e446:	260d      	movs	r6, #13
1000e448:	e0c3      	b.n	1000e5d2 <at_ble_event_get+0x5ea>
1000e44a:	1c31      	adds	r1, r6, #0
1000e44c:	9801      	ldr	r0, [sp, #4]
1000e44e:	1c2a      	adds	r2, r5, #0
1000e450:	4b7d      	ldr	r3, [pc, #500]	; (1000e648 <at_ble_event_get+0x660>)
1000e452:	4798      	blx	r3
1000e454:	260e      	movs	r6, #14
1000e456:	e0bc      	b.n	1000e5d2 <at_ble_event_get+0x5ea>
1000e458:	9801      	ldr	r0, [sp, #4]
1000e45a:	1c31      	adds	r1, r6, #0
1000e45c:	1c2a      	adds	r2, r5, #0
1000e45e:	4b7b      	ldr	r3, [pc, #492]	; (1000e64c <at_ble_event_get+0x664>)
1000e460:	4798      	blx	r3
1000e462:	e084      	b.n	1000e56e <at_ble_event_get+0x586>
1000e464:	1c31      	adds	r1, r6, #0
1000e466:	9801      	ldr	r0, [sp, #4]
1000e468:	1c2a      	adds	r2, r5, #0
1000e46a:	4b79      	ldr	r3, [pc, #484]	; (1000e650 <at_ble_event_get+0x668>)
1000e46c:	4798      	blx	r3
1000e46e:	260b      	movs	r6, #11
1000e470:	e0af      	b.n	1000e5d2 <at_ble_event_get+0x5ea>
1000e472:	1c31      	adds	r1, r6, #0
1000e474:	9801      	ldr	r0, [sp, #4]
1000e476:	1c2a      	adds	r2, r5, #0
1000e478:	4b76      	ldr	r3, [pc, #472]	; (1000e654 <at_ble_event_get+0x66c>)
1000e47a:	4798      	blx	r3
1000e47c:	2610      	movs	r6, #16
1000e47e:	e0a8      	b.n	1000e5d2 <at_ble_event_get+0x5ea>
1000e480:	1c30      	adds	r0, r6, #0
1000e482:	1c29      	adds	r1, r5, #0
1000e484:	4b74      	ldr	r3, [pc, #464]	; (1000e658 <at_ble_event_get+0x670>)
1000e486:	4798      	blx	r3
1000e488:	2628      	movs	r6, #40	; 0x28
1000e48a:	e0a2      	b.n	1000e5d2 <at_ble_event_get+0x5ea>
1000e48c:	1c30      	adds	r0, r6, #0
1000e48e:	1c29      	adds	r1, r5, #0
1000e490:	4b72      	ldr	r3, [pc, #456]	; (1000e65c <at_ble_event_get+0x674>)
1000e492:	4798      	blx	r3
1000e494:	2629      	movs	r6, #41	; 0x29
1000e496:	e09c      	b.n	1000e5d2 <at_ble_event_get+0x5ea>
1000e498:	1c30      	adds	r0, r6, #0
1000e49a:	1c29      	adds	r1, r5, #0
1000e49c:	4b70      	ldr	r3, [pc, #448]	; (1000e660 <at_ble_event_get+0x678>)
1000e49e:	4798      	blx	r3
1000e4a0:	2627      	movs	r6, #39	; 0x27
1000e4a2:	e096      	b.n	1000e5d2 <at_ble_event_get+0x5ea>
1000e4a4:	1c30      	adds	r0, r6, #0
1000e4a6:	1c29      	adds	r1, r5, #0
1000e4a8:	4b6e      	ldr	r3, [pc, #440]	; (1000e664 <at_ble_event_get+0x67c>)
1000e4aa:	4798      	blx	r3
1000e4ac:	262a      	movs	r6, #42	; 0x2a
1000e4ae:	e090      	b.n	1000e5d2 <at_ble_event_get+0x5ea>
1000e4b0:	9801      	ldr	r0, [sp, #4]
1000e4b2:	1c31      	adds	r1, r6, #0
1000e4b4:	1c2a      	adds	r2, r5, #0
1000e4b6:	4b6c      	ldr	r3, [pc, #432]	; (1000e668 <at_ble_event_get+0x680>)
1000e4b8:	e7b9      	b.n	1000e42e <at_ble_event_get+0x446>
1000e4ba:	9801      	ldr	r0, [sp, #4]
1000e4bc:	1c31      	adds	r1, r6, #0
1000e4be:	1c2a      	adds	r2, r5, #0
1000e4c0:	4b6a      	ldr	r3, [pc, #424]	; (1000e66c <at_ble_event_get+0x684>)
1000e4c2:	e7b4      	b.n	1000e42e <at_ble_event_get+0x446>
1000e4c4:	1c30      	adds	r0, r6, #0
1000e4c6:	1c29      	adds	r1, r5, #0
1000e4c8:	4b69      	ldr	r3, [pc, #420]	; (1000e670 <at_ble_event_get+0x688>)
1000e4ca:	4798      	blx	r3
1000e4cc:	262b      	movs	r6, #43	; 0x2b
1000e4ce:	e080      	b.n	1000e5d2 <at_ble_event_get+0x5ea>
1000e4d0:	1c30      	adds	r0, r6, #0
1000e4d2:	1c29      	adds	r1, r5, #0
1000e4d4:	4b67      	ldr	r3, [pc, #412]	; (1000e674 <at_ble_event_get+0x68c>)
1000e4d6:	4798      	blx	r3
1000e4d8:	262c      	movs	r6, #44	; 0x2c
1000e4da:	e07a      	b.n	1000e5d2 <at_ble_event_get+0x5ea>
1000e4dc:	1c31      	adds	r1, r6, #0
1000e4de:	9801      	ldr	r0, [sp, #4]
1000e4e0:	1c2a      	adds	r2, r5, #0
1000e4e2:	4b65      	ldr	r3, [pc, #404]	; (1000e678 <at_ble_event_get+0x690>)
1000e4e4:	4798      	blx	r3
1000e4e6:	2613      	movs	r6, #19
1000e4e8:	e073      	b.n	1000e5d2 <at_ble_event_get+0x5ea>
1000e4ea:	1c31      	adds	r1, r6, #0
1000e4ec:	9801      	ldr	r0, [sp, #4]
1000e4ee:	1c2a      	adds	r2, r5, #0
1000e4f0:	4b62      	ldr	r3, [pc, #392]	; (1000e67c <at_ble_event_get+0x694>)
1000e4f2:	4798      	blx	r3
1000e4f4:	2614      	movs	r6, #20
1000e4f6:	e06c      	b.n	1000e5d2 <at_ble_event_get+0x5ea>
1000e4f8:	1c31      	adds	r1, r6, #0
1000e4fa:	9801      	ldr	r0, [sp, #4]
1000e4fc:	1c2a      	adds	r2, r5, #0
1000e4fe:	4b60      	ldr	r3, [pc, #384]	; (1000e680 <at_ble_event_get+0x698>)
1000e500:	4798      	blx	r3
1000e502:	2615      	movs	r6, #21
1000e504:	e065      	b.n	1000e5d2 <at_ble_event_get+0x5ea>
1000e506:	1c31      	adds	r1, r6, #0
1000e508:	9801      	ldr	r0, [sp, #4]
1000e50a:	1c2a      	adds	r2, r5, #0
1000e50c:	4b5d      	ldr	r3, [pc, #372]	; (1000e684 <at_ble_event_get+0x69c>)
1000e50e:	4798      	blx	r3
1000e510:	2616      	movs	r6, #22
1000e512:	e05e      	b.n	1000e5d2 <at_ble_event_get+0x5ea>
1000e514:	9801      	ldr	r0, [sp, #4]
1000e516:	1c31      	adds	r1, r6, #0
1000e518:	1c2a      	adds	r2, r5, #0
1000e51a:	4b5b      	ldr	r3, [pc, #364]	; (1000e688 <at_ble_event_get+0x6a0>)
1000e51c:	e787      	b.n	1000e42e <at_ble_event_get+0x446>
1000e51e:	1c31      	adds	r1, r6, #0
1000e520:	9801      	ldr	r0, [sp, #4]
1000e522:	1c2a      	adds	r2, r5, #0
1000e524:	4b58      	ldr	r3, [pc, #352]	; (1000e688 <at_ble_event_get+0x6a0>)
1000e526:	4798      	blx	r3
1000e528:	88a9      	ldrh	r1, [r5, #4]
1000e52a:	1c06      	adds	r6, r0, #0
1000e52c:	4b57      	ldr	r3, [pc, #348]	; (1000e68c <at_ble_event_get+0x6a4>)
1000e52e:	8828      	ldrh	r0, [r5, #0]
1000e530:	4798      	blx	r3
1000e532:	e04e      	b.n	1000e5d2 <at_ble_event_get+0x5ea>
1000e534:	1c31      	adds	r1, r6, #0
1000e536:	9801      	ldr	r0, [sp, #4]
1000e538:	1c2a      	adds	r2, r5, #0
1000e53a:	4b55      	ldr	r3, [pc, #340]	; (1000e690 <at_ble_event_get+0x6a8>)
1000e53c:	4798      	blx	r3
1000e53e:	2623      	movs	r6, #35	; 0x23
1000e540:	e047      	b.n	1000e5d2 <at_ble_event_get+0x5ea>
1000e542:	9801      	ldr	r0, [sp, #4]
1000e544:	1c31      	adds	r1, r6, #0
1000e546:	1c2a      	adds	r2, r5, #0
1000e548:	4b52      	ldr	r3, [pc, #328]	; (1000e694 <at_ble_event_get+0x6ac>)
1000e54a:	e770      	b.n	1000e42e <at_ble_event_get+0x446>
1000e54c:	9b01      	ldr	r3, [sp, #4]
1000e54e:	1c30      	adds	r0, r6, #0
1000e550:	0a1f      	lsrs	r7, r3, #8
1000e552:	802f      	strh	r7, [r5, #0]
1000e554:	1c29      	adds	r1, r5, #0
1000e556:	4b50      	ldr	r3, [pc, #320]	; (1000e698 <at_ble_event_get+0x6b0>)
1000e558:	e749      	b.n	1000e3ee <at_ble_event_get+0x406>
1000e55a:	9801      	ldr	r0, [sp, #4]
1000e55c:	1c31      	adds	r1, r6, #0
1000e55e:	1c2a      	adds	r2, r5, #0
1000e560:	4b4e      	ldr	r3, [pc, #312]	; (1000e69c <at_ble_event_get+0x6b4>)
1000e562:	e764      	b.n	1000e42e <at_ble_event_get+0x446>
1000e564:	1c30      	adds	r0, r6, #0
1000e566:	1c29      	adds	r1, r5, #0
1000e568:	9a01      	ldr	r2, [sp, #4]
1000e56a:	4b4d      	ldr	r3, [pc, #308]	; (1000e6a0 <at_ble_event_get+0x6b8>)
1000e56c:	4798      	blx	r3
1000e56e:	263b      	movs	r6, #59	; 0x3b
1000e570:	e02f      	b.n	1000e5d2 <at_ble_event_get+0x5ea>
1000e572:	1c31      	adds	r1, r6, #0
1000e574:	9801      	ldr	r0, [sp, #4]
1000e576:	1c2a      	adds	r2, r5, #0
1000e578:	4b4a      	ldr	r3, [pc, #296]	; (1000e6a4 <at_ble_event_get+0x6bc>)
1000e57a:	4798      	blx	r3
1000e57c:	2618      	movs	r6, #24
1000e57e:	e028      	b.n	1000e5d2 <at_ble_event_get+0x5ea>
1000e580:	1c31      	adds	r1, r6, #0
1000e582:	9801      	ldr	r0, [sp, #4]
1000e584:	1c2a      	adds	r2, r5, #0
1000e586:	4b48      	ldr	r3, [pc, #288]	; (1000e6a8 <at_ble_event_get+0x6c0>)
1000e588:	4798      	blx	r3
1000e58a:	2620      	movs	r6, #32
1000e58c:	e021      	b.n	1000e5d2 <at_ble_event_get+0x5ea>
1000e58e:	1c31      	adds	r1, r6, #0
1000e590:	9801      	ldr	r0, [sp, #4]
1000e592:	1c2a      	adds	r2, r5, #0
1000e594:	4b45      	ldr	r3, [pc, #276]	; (1000e6ac <at_ble_event_get+0x6c4>)
1000e596:	4798      	blx	r3
1000e598:	2633      	movs	r6, #51	; 0x33
1000e59a:	e01a      	b.n	1000e5d2 <at_ble_event_get+0x5ea>
1000e59c:	1c31      	adds	r1, r6, #0
1000e59e:	9801      	ldr	r0, [sp, #4]
1000e5a0:	1c2a      	adds	r2, r5, #0
1000e5a2:	4b43      	ldr	r3, [pc, #268]	; (1000e6b0 <at_ble_event_get+0x6c8>)
1000e5a4:	4798      	blx	r3
1000e5a6:	2630      	movs	r6, #48	; 0x30
1000e5a8:	e013      	b.n	1000e5d2 <at_ble_event_get+0x5ea>
1000e5aa:	1c31      	adds	r1, r6, #0
1000e5ac:	9801      	ldr	r0, [sp, #4]
1000e5ae:	1c2a      	adds	r2, r5, #0
1000e5b0:	4b40      	ldr	r3, [pc, #256]	; (1000e6b4 <at_ble_event_get+0x6cc>)
1000e5b2:	4798      	blx	r3
1000e5b4:	2634      	movs	r6, #52	; 0x34
1000e5b6:	e00c      	b.n	1000e5d2 <at_ble_event_get+0x5ea>
1000e5b8:	1c31      	adds	r1, r6, #0
1000e5ba:	9801      	ldr	r0, [sp, #4]
1000e5bc:	1c2a      	adds	r2, r5, #0
1000e5be:	4b3e      	ldr	r3, [pc, #248]	; (1000e6b8 <at_ble_event_get+0x6d0>)
1000e5c0:	4798      	blx	r3
1000e5c2:	2635      	movs	r6, #53	; 0x35
1000e5c4:	e005      	b.n	1000e5d2 <at_ble_event_get+0x5ea>
1000e5c6:	1c31      	adds	r1, r6, #0
1000e5c8:	9801      	ldr	r0, [sp, #4]
1000e5ca:	1c2a      	adds	r2, r5, #0
1000e5cc:	4b3b      	ldr	r3, [pc, #236]	; (1000e6bc <at_ble_event_get+0x6d4>)
1000e5ce:	4798      	blx	r3
1000e5d0:	2632      	movs	r6, #50	; 0x32
1000e5d2:	9b03      	ldr	r3, [sp, #12]
1000e5d4:	701e      	strb	r6, [r3, #0]
1000e5d6:	2300      	movs	r3, #0
1000e5d8:	9302      	str	r3, [sp, #8]
1000e5da:	e57a      	b.n	1000e0d2 <at_ble_event_get+0xea>
1000e5dc:	23d0      	movs	r3, #208	; 0xd0
1000e5de:	e7fb      	b.n	1000e5d8 <at_ble_event_get+0x5f0>
1000e5e0:	9b01      	ldr	r3, [sp, #4]
1000e5e2:	9e02      	ldr	r6, [sp, #8]
1000e5e4:	2bbb      	cmp	r3, #187	; 0xbb
1000e5e6:	d000      	beq.n	1000e5ea <at_ble_event_get+0x602>
1000e5e8:	e6e6      	b.n	1000e3b8 <at_ble_event_get+0x3d0>
1000e5ea:	e7f2      	b.n	1000e5d2 <at_ble_event_get+0x5ea>
1000e5ec:	9b02      	ldr	r3, [sp, #8]
1000e5ee:	2b00      	cmp	r3, #0
1000e5f0:	d000      	beq.n	1000e5f4 <at_ble_event_get+0x60c>
1000e5f2:	e56e      	b.n	1000e0d2 <at_ble_event_get+0xea>
1000e5f4:	e6e0      	b.n	1000e3b8 <at_ble_event_get+0x3d0>
1000e5f6:	9802      	ldr	r0, [sp, #8]
1000e5f8:	b007      	add	sp, #28
1000e5fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e5fc:	00000e22 	.word	0x00000e22
1000e600:	00000e25 	.word	0x00000e25
1000e604:	00001b05 	.word	0x00001b05
1000e608:	00001b01 	.word	0x00001b01
1000e60c:	00001b03 	.word	0x00001b03
1000e610:	00001b06 	.word	0x00001b06
1000e614:	00001b08 	.word	0x00001b08
1000e618:	100107a5 	.word	0x100107a5
1000e61c:	10010789 	.word	0x10010789
1000e620:	10010a25 	.word	0x10010a25
1000e624:	10010b15 	.word	0x10010b15
1000e628:	10010b39 	.word	0x10010b39
1000e62c:	1000fb1d 	.word	0x1000fb1d
1000e630:	1001039d 	.word	0x1001039d
1000e634:	10010419 	.word	0x10010419
1000e638:	1000fdd5 	.word	0x1000fdd5
1000e63c:	1000fe71 	.word	0x1000fe71
1000e640:	1000ff49 	.word	0x1000ff49
1000e644:	100101d1 	.word	0x100101d1
1000e648:	10010271 	.word	0x10010271
1000e64c:	10010329 	.word	0x10010329
1000e650:	10010351 	.word	0x10010351
1000e654:	10010367 	.word	0x10010367
1000e658:	10010431 	.word	0x10010431
1000e65c:	1001045f 	.word	0x1001045f
1000e660:	10010475 	.word	0x10010475
1000e664:	1001049f 	.word	0x1001049f
1000e668:	100102cd 	.word	0x100102cd
1000e66c:	100102f7 	.word	0x100102f7
1000e670:	1000f55d 	.word	0x1000f55d
1000e674:	1000f589 	.word	0x1000f589
1000e678:	10010ce1 	.word	0x10010ce1
1000e67c:	10010d1d 	.word	0x10010d1d
1000e680:	10010d65 	.word	0x10010d65
1000e684:	10010da9 	.word	0x10010da9
1000e688:	10010ddd 	.word	0x10010ddd
1000e68c:	10010ca1 	.word	0x10010ca1
1000e690:	10010ea9 	.word	0x10010ea9
1000e694:	10010e31 	.word	0x10010e31
1000e698:	1000f4b5 	.word	0x1000f4b5
1000e69c:	1000f521 	.word	0x1000f521
1000e6a0:	1000f4e5 	.word	0x1000f4e5
1000e6a4:	10010eb9 	.word	0x10010eb9
1000e6a8:	10010ef9 	.word	0x10010ef9
1000e6ac:	100111c1 	.word	0x100111c1
1000e6b0:	100111cb 	.word	0x100111cb
1000e6b4:	100111d1 	.word	0x100111d1
1000e6b8:	100111d7 	.word	0x100111d7
1000e6bc:	100111e3 	.word	0x100111e3

1000e6c0 <internal_event_flush>:
1000e6c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000e6c2:	490e      	ldr	r1, [pc, #56]	; (1000e6fc <internal_event_flush+0x3c>)
1000e6c4:	2400      	movs	r4, #0
1000e6c6:	680b      	ldr	r3, [r1, #0]
1000e6c8:	1c0f      	adds	r7, r1, #0
1000e6ca:	1c1e      	adds	r6, r3, #0
1000e6cc:	4a0c      	ldr	r2, [pc, #48]	; (1000e700 <internal_event_flush+0x40>)
1000e6ce:	6815      	ldr	r5, [r2, #0]
1000e6d0:	9201      	str	r2, [sp, #4]
1000e6d2:	2b00      	cmp	r3, #0
1000e6d4:	d00e      	beq.n	1000e6f4 <internal_event_flush+0x34>
1000e6d6:	889a      	ldrh	r2, [r3, #4]
1000e6d8:	6819      	ldr	r1, [r3, #0]
1000e6da:	4282      	cmp	r2, r0
1000e6dc:	d107      	bne.n	1000e6ee <internal_event_flush+0x2e>
1000e6de:	2c00      	cmp	r4, #0
1000e6e0:	d001      	beq.n	1000e6e6 <internal_event_flush+0x26>
1000e6e2:	6021      	str	r1, [r4, #0]
1000e6e4:	e000      	b.n	1000e6e8 <internal_event_flush+0x28>
1000e6e6:	1c0e      	adds	r6, r1, #0
1000e6e8:	601d      	str	r5, [r3, #0]
1000e6ea:	1c1d      	adds	r5, r3, #0
1000e6ec:	1c23      	adds	r3, r4, #0
1000e6ee:	1c1c      	adds	r4, r3, #0
1000e6f0:	1c0b      	adds	r3, r1, #0
1000e6f2:	e7ee      	b.n	1000e6d2 <internal_event_flush+0x12>
1000e6f4:	9b01      	ldr	r3, [sp, #4]
1000e6f6:	603e      	str	r6, [r7, #0]
1000e6f8:	601d      	str	r5, [r3, #0]
1000e6fa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000e6fc:	10016e0c 	.word	0x10016e0c
1000e700:	10016e10 	.word	0x10016e10

1000e704 <internal_conn_flush>:
1000e704:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000e706:	4a12      	ldr	r2, [pc, #72]	; (1000e750 <internal_conn_flush+0x4c>)
1000e708:	9000      	str	r0, [sp, #0]
1000e70a:	6813      	ldr	r3, [r2, #0]
1000e70c:	4811      	ldr	r0, [pc, #68]	; (1000e754 <internal_conn_flush+0x50>)
1000e70e:	1c1f      	adds	r7, r3, #0
1000e710:	2100      	movs	r1, #0
1000e712:	4684      	mov	ip, r0
1000e714:	6804      	ldr	r4, [r0, #0]
1000e716:	9201      	str	r2, [sp, #4]
1000e718:	2b00      	cmp	r3, #0
1000e71a:	d014      	beq.n	1000e746 <internal_conn_flush+0x42>
1000e71c:	88d8      	ldrh	r0, [r3, #6]
1000e71e:	9a00      	ldr	r2, [sp, #0]
1000e720:	681d      	ldr	r5, [r3, #0]
1000e722:	0a06      	lsrs	r6, r0, #8
1000e724:	4296      	cmp	r6, r2
1000e726:	d10b      	bne.n	1000e740 <internal_conn_flush+0x3c>
1000e728:	26fd      	movs	r6, #253	; 0xfd
1000e72a:	4006      	ands	r6, r0
1000e72c:	2e0c      	cmp	r6, #12
1000e72e:	d107      	bne.n	1000e740 <internal_conn_flush+0x3c>
1000e730:	2900      	cmp	r1, #0
1000e732:	d001      	beq.n	1000e738 <internal_conn_flush+0x34>
1000e734:	600d      	str	r5, [r1, #0]
1000e736:	e000      	b.n	1000e73a <internal_conn_flush+0x36>
1000e738:	1c2f      	adds	r7, r5, #0
1000e73a:	601c      	str	r4, [r3, #0]
1000e73c:	1c1c      	adds	r4, r3, #0
1000e73e:	1c0b      	adds	r3, r1, #0
1000e740:	1c19      	adds	r1, r3, #0
1000e742:	1c2b      	adds	r3, r5, #0
1000e744:	e7e8      	b.n	1000e718 <internal_conn_flush+0x14>
1000e746:	9b01      	ldr	r3, [sp, #4]
1000e748:	601f      	str	r7, [r3, #0]
1000e74a:	4663      	mov	r3, ip
1000e74c:	601c      	str	r4, [r3, #0]
1000e74e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000e750:	10016e0c 	.word	0x10016e0c
1000e754:	10016e10 	.word	0x10016e10

1000e758 <at_ble_device_name_set>:
1000e758:	b530      	push	{r4, r5, lr}
1000e75a:	23cf      	movs	r3, #207	; 0xcf
1000e75c:	2800      	cmp	r0, #0
1000e75e:	d010      	beq.n	1000e782 <at_ble_device_name_set+0x2a>
1000e760:	1e4a      	subs	r2, r1, #1
1000e762:	2a1f      	cmp	r2, #31
1000e764:	d80d      	bhi.n	1000e782 <at_ble_device_name_set+0x2a>
1000e766:	4a08      	ldr	r2, [pc, #32]	; (1000e788 <at_ble_device_name_set+0x30>)
1000e768:	1c13      	adds	r3, r2, #0
1000e76a:	33aa      	adds	r3, #170	; 0xaa
1000e76c:	8019      	strh	r1, [r3, #0]
1000e76e:	2300      	movs	r3, #0
1000e770:	1c1c      	adds	r4, r3, #0
1000e772:	5cc5      	ldrb	r5, [r0, r3]
1000e774:	34ac      	adds	r4, #172	; 0xac
1000e776:	3301      	adds	r3, #1
1000e778:	5515      	strb	r5, [r2, r4]
1000e77a:	b2dc      	uxtb	r4, r3
1000e77c:	428c      	cmp	r4, r1
1000e77e:	d3f7      	bcc.n	1000e770 <at_ble_device_name_set+0x18>
1000e780:	2300      	movs	r3, #0
1000e782:	1c18      	adds	r0, r3, #0
1000e784:	bd30      	pop	{r4, r5, pc}
1000e786:	46c0      	nop			; (mov r8, r8)
1000e788:	10017d22 	.word	0x10017d22

1000e78c <at_ble_addr_get>:
1000e78c:	b510      	push	{r4, lr}
1000e78e:	1c04      	adds	r4, r0, #0
1000e790:	20cf      	movs	r0, #207	; 0xcf
1000e792:	2c00      	cmp	r4, #0
1000e794:	d006      	beq.n	1000e7a4 <at_ble_addr_get+0x18>
1000e796:	4b04      	ldr	r3, [pc, #16]	; (1000e7a8 <at_ble_addr_get+0x1c>)
1000e798:	38ce      	subs	r0, #206	; 0xce
1000e79a:	1c21      	adds	r1, r4, #0
1000e79c:	4798      	blx	r3
1000e79e:	4b03      	ldr	r3, [pc, #12]	; (1000e7ac <at_ble_addr_get+0x20>)
1000e7a0:	791b      	ldrb	r3, [r3, #4]
1000e7a2:	7023      	strb	r3, [r4, #0]
1000e7a4:	bd10      	pop	{r4, pc}
1000e7a6:	46c0      	nop			; (mov r8, r8)
1000e7a8:	10010639 	.word	0x10010639
1000e7ac:	10017d22 	.word	0x10017d22

1000e7b0 <at_ble_set_dev_config>:
1000e7b0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e7b2:	7906      	ldrb	r6, [r0, #4]
1000e7b4:	b089      	sub	sp, #36	; 0x24
1000e7b6:	25cf      	movs	r5, #207	; 0xcf
1000e7b8:	2e03      	cmp	r6, #3
1000e7ba:	d838      	bhi.n	1000e82e <at_ble_set_dev_config+0x7e>
1000e7bc:	7803      	ldrb	r3, [r0, #0]
1000e7be:	3511      	adds	r5, #17
1000e7c0:	2b0f      	cmp	r3, #15
1000e7c2:	d834      	bhi.n	1000e82e <at_ble_set_dev_config+0x7e>
1000e7c4:	2380      	movs	r3, #128	; 0x80
1000e7c6:	8c87      	ldrh	r7, [r0, #36]	; 0x24
1000e7c8:	3d11      	subs	r5, #17
1000e7ca:	009b      	lsls	r3, r3, #2
1000e7cc:	429f      	cmp	r7, r3
1000e7ce:	d82e      	bhi.n	1000e82e <at_ble_set_dev_config+0x7e>
1000e7d0:	7fc5      	ldrb	r5, [r0, #31]
1000e7d2:	7f83      	ldrb	r3, [r0, #30]
1000e7d4:	01ad      	lsls	r5, r5, #6
1000e7d6:	015b      	lsls	r3, r3, #5
1000e7d8:	431d      	orrs	r5, r3
1000e7da:	7ec3      	ldrb	r3, [r0, #27]
1000e7dc:	431d      	orrs	r5, r3
1000e7de:	7f43      	ldrb	r3, [r0, #29]
1000e7e0:	011b      	lsls	r3, r3, #4
1000e7e2:	431d      	orrs	r5, r3
1000e7e4:	7f03      	ldrb	r3, [r0, #28]
1000e7e6:	009b      	lsls	r3, r3, #2
1000e7e8:	431d      	orrs	r5, r3
1000e7ea:	4b12      	ldr	r3, [pc, #72]	; (1000e834 <at_ble_set_dev_config+0x84>)
1000e7ec:	b2ed      	uxtb	r5, r5
1000e7ee:	711e      	strb	r6, [r3, #4]
1000e7f0:	7903      	ldrb	r3, [r0, #4]
1000e7f2:	3b02      	subs	r3, #2
1000e7f4:	2b01      	cmp	r3, #1
1000e7f6:	d801      	bhi.n	1000e7fc <at_ble_set_dev_config+0x4c>
1000e7f8:	2302      	movs	r3, #2
1000e7fa:	7103      	strb	r3, [r0, #4]
1000e7fc:	1c04      	adds	r4, r0, #0
1000e7fe:	1c23      	adds	r3, r4, #0
1000e800:	330b      	adds	r3, #11
1000e802:	8861      	ldrh	r1, [r4, #2]
1000e804:	9307      	str	r3, [sp, #28]
1000e806:	7923      	ldrb	r3, [r4, #4]
1000e808:	7800      	ldrb	r0, [r0, #0]
1000e80a:	9300      	str	r3, [sp, #0]
1000e80c:	9501      	str	r5, [sp, #4]
1000e80e:	8c25      	ldrh	r5, [r4, #32]
1000e810:	1d62      	adds	r2, r4, #5
1000e812:	9502      	str	r5, [sp, #8]
1000e814:	8c65      	ldrh	r5, [r4, #34]	; 0x22
1000e816:	9b07      	ldr	r3, [sp, #28]
1000e818:	9503      	str	r5, [sp, #12]
1000e81a:	9704      	str	r7, [sp, #16]
1000e81c:	4d06      	ldr	r5, [pc, #24]	; (1000e838 <at_ble_set_dev_config+0x88>)
1000e81e:	47a8      	blx	r5
1000e820:	7126      	strb	r6, [r4, #4]
1000e822:	1c05      	adds	r5, r0, #0
1000e824:	1c21      	adds	r1, r4, #0
1000e826:	4803      	ldr	r0, [pc, #12]	; (1000e834 <at_ble_set_dev_config+0x84>)
1000e828:	2226      	movs	r2, #38	; 0x26
1000e82a:	4b04      	ldr	r3, [pc, #16]	; (1000e83c <at_ble_set_dev_config+0x8c>)
1000e82c:	4798      	blx	r3
1000e82e:	1c28      	adds	r0, r5, #0
1000e830:	b009      	add	sp, #36	; 0x24
1000e832:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e834:	10017d22 	.word	0x10017d22
1000e838:	10010531 	.word	0x10010531
1000e83c:	1001255f 	.word	0x1001255f

1000e840 <at_ble_init>:
1000e840:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e842:	b087      	sub	sp, #28
1000e844:	af03      	add	r7, sp, #12
1000e846:	4954      	ldr	r1, [pc, #336]	; (1000e998 <at_ble_init+0x158>)
1000e848:	220b      	movs	r2, #11
1000e84a:	4b54      	ldr	r3, [pc, #336]	; (1000e99c <at_ble_init+0x15c>)
1000e84c:	1c04      	adds	r4, r0, #0
1000e84e:	1c38      	adds	r0, r7, #0
1000e850:	4798      	blx	r3
1000e852:	2205      	movs	r2, #5
1000e854:	4b52      	ldr	r3, [pc, #328]	; (1000e9a0 <at_ble_init+0x160>)
1000e856:	2640      	movs	r6, #64	; 0x40
1000e858:	801a      	strh	r2, [r3, #0]
1000e85a:	2300      	movs	r3, #0
1000e85c:	4a51      	ldr	r2, [pc, #324]	; (1000e9a4 <at_ble_init+0x164>)
1000e85e:	6013      	str	r3, [r2, #0]
1000e860:	4a51      	ldr	r2, [pc, #324]	; (1000e9a8 <at_ble_init+0x168>)
1000e862:	7013      	strb	r3, [r2, #0]
1000e864:	4a51      	ldr	r2, [pc, #324]	; (1000e9ac <at_ble_init+0x16c>)
1000e866:	7013      	strb	r3, [r2, #0]
1000e868:	4b51      	ldr	r3, [pc, #324]	; (1000e9b0 <at_ble_init+0x170>)
1000e86a:	4798      	blx	r3
1000e86c:	4b51      	ldr	r3, [pc, #324]	; (1000e9b4 <at_ble_init+0x174>)
1000e86e:	4798      	blx	r3
1000e870:	4b51      	ldr	r3, [pc, #324]	; (1000e9b8 <at_ble_init+0x178>)
1000e872:	4798      	blx	r3
1000e874:	4b51      	ldr	r3, [pc, #324]	; (1000e9bc <at_ble_init+0x17c>)
1000e876:	4798      	blx	r3
1000e878:	2c00      	cmp	r4, #0
1000e87a:	d100      	bne.n	1000e87e <at_ble_init+0x3e>
1000e87c:	e089      	b.n	1000e992 <at_ble_init+0x152>
1000e87e:	68a3      	ldr	r3, [r4, #8]
1000e880:	2b00      	cmp	r3, #0
1000e882:	d100      	bne.n	1000e886 <at_ble_init+0x46>
1000e884:	e085      	b.n	1000e992 <at_ble_init+0x152>
1000e886:	6923      	ldr	r3, [r4, #16]
1000e888:	2b00      	cmp	r3, #0
1000e88a:	d100      	bne.n	1000e88e <at_ble_init+0x4e>
1000e88c:	e081      	b.n	1000e992 <at_ble_init+0x152>
1000e88e:	6820      	ldr	r0, [r4, #0]
1000e890:	2800      	cmp	r0, #0
1000e892:	d102      	bne.n	1000e89a <at_ble_init+0x5a>
1000e894:	6863      	ldr	r3, [r4, #4]
1000e896:	2b00      	cmp	r3, #0
1000e898:	d17b      	bne.n	1000e992 <at_ble_init+0x152>
1000e89a:	4b49      	ldr	r3, [pc, #292]	; (1000e9c0 <at_ble_init+0x180>)
1000e89c:	6861      	ldr	r1, [r4, #4]
1000e89e:	4798      	blx	r3
1000e8a0:	4b48      	ldr	r3, [pc, #288]	; (1000e9c4 <at_ble_init+0x184>)
1000e8a2:	4798      	blx	r3
1000e8a4:	2801      	cmp	r0, #1
1000e8a6:	d901      	bls.n	1000e8ac <at_ble_init+0x6c>
1000e8a8:	26e2      	movs	r6, #226	; 0xe2
1000e8aa:	e072      	b.n	1000e992 <at_ble_init+0x152>
1000e8ac:	4846      	ldr	r0, [pc, #280]	; (1000e9c8 <at_ble_init+0x188>)
1000e8ae:	4b47      	ldr	r3, [pc, #284]	; (1000e9cc <at_ble_init+0x18c>)
1000e8b0:	4798      	blx	r3
1000e8b2:	2800      	cmp	r0, #0
1000e8b4:	d1f8      	bne.n	1000e8a8 <at_ble_init+0x68>
1000e8b6:	1c20      	adds	r0, r4, #0
1000e8b8:	4b45      	ldr	r3, [pc, #276]	; (1000e9d0 <at_ble_init+0x190>)
1000e8ba:	4798      	blx	r3
1000e8bc:	68e0      	ldr	r0, [r4, #12]
1000e8be:	68a1      	ldr	r1, [r4, #8]
1000e8c0:	4b44      	ldr	r3, [pc, #272]	; (1000e9d4 <at_ble_init+0x194>)
1000e8c2:	4798      	blx	r3
1000e8c4:	466b      	mov	r3, sp
1000e8c6:	2201      	movs	r2, #1
1000e8c8:	1cdc      	adds	r4, r3, #3
1000e8ca:	1c20      	adds	r0, r4, #0
1000e8cc:	a901      	add	r1, sp, #4
1000e8ce:	4252      	negs	r2, r2
1000e8d0:	4b41      	ldr	r3, [pc, #260]	; (1000e9d8 <at_ble_init+0x198>)
1000e8d2:	4798      	blx	r3
1000e8d4:	2800      	cmp	r0, #0
1000e8d6:	d102      	bne.n	1000e8de <at_ble_init+0x9e>
1000e8d8:	7823      	ldrb	r3, [r4, #0]
1000e8da:	2b39      	cmp	r3, #57	; 0x39
1000e8dc:	d1f2      	bne.n	1000e8c4 <at_ble_init+0x84>
1000e8de:	4b3f      	ldr	r3, [pc, #252]	; (1000e9dc <at_ble_init+0x19c>)
1000e8e0:	4798      	blx	r3
1000e8e2:	1e06      	subs	r6, r0, #0
1000e8e4:	d155      	bne.n	1000e992 <at_ble_init+0x152>
1000e8e6:	1c03      	adds	r3, r0, #0
1000e8e8:	2101      	movs	r1, #1
1000e8ea:	4a3d      	ldr	r2, [pc, #244]	; (1000e9e0 <at_ble_init+0x1a0>)
1000e8ec:	4249      	negs	r1, r1
1000e8ee:	189a      	adds	r2, r3, r2
1000e8f0:	3312      	adds	r3, #18
1000e8f2:	8151      	strh	r1, [r2, #10]
1000e8f4:	2b90      	cmp	r3, #144	; 0x90
1000e8f6:	d1f7      	bne.n	1000e8e8 <at_ble_init+0xa8>
1000e8f8:	4c3a      	ldr	r4, [pc, #232]	; (1000e9e4 <at_ble_init+0x1a4>)
1000e8fa:	3b81      	subs	r3, #129	; 0x81
1000e8fc:	7023      	strb	r3, [r4, #0]
1000e8fe:	4b3a      	ldr	r3, [pc, #232]	; (1000e9e8 <at_ble_init+0x1a8>)
1000e900:	4a3a      	ldr	r2, [pc, #232]	; (1000e9ec <at_ble_init+0x1ac>)
1000e902:	8063      	strh	r3, [r4, #2]
1000e904:	2300      	movs	r3, #0
1000e906:	7123      	strb	r3, [r4, #4]
1000e908:	3301      	adds	r3, #1
1000e90a:	1e58      	subs	r0, r3, #1
1000e90c:	0119      	lsls	r1, r3, #4
1000e90e:	4301      	orrs	r1, r0
1000e910:	3302      	adds	r3, #2
1000e912:	7011      	strb	r1, [r2, #0]
1000e914:	3201      	adds	r2, #1
1000e916:	2b21      	cmp	r3, #33	; 0x21
1000e918:	d1f7      	bne.n	1000e90a <at_ble_init+0xca>
1000e91a:	33e0      	adds	r3, #224	; 0xe0
1000e91c:	33ff      	adds	r3, #255	; 0xff
1000e91e:	84a3      	strh	r3, [r4, #36]	; 0x24
1000e920:	1c23      	adds	r3, r4, #0
1000e922:	2500      	movs	r5, #0
1000e924:	3373      	adds	r3, #115	; 0x73
1000e926:	701d      	strb	r5, [r3, #0]
1000e928:	1c23      	adds	r3, r4, #0
1000e92a:	3372      	adds	r3, #114	; 0x72
1000e92c:	701d      	strb	r5, [r3, #0]
1000e92e:	1c23      	adds	r3, r4, #0
1000e930:	3376      	adds	r3, #118	; 0x76
1000e932:	701d      	strb	r5, [r3, #0]
1000e934:	1c23      	adds	r3, r4, #0
1000e936:	33cc      	adds	r3, #204	; 0xcc
1000e938:	801d      	strh	r5, [r3, #0]
1000e93a:	1c22      	adds	r2, r4, #0
1000e93c:	23a0      	movs	r3, #160	; 0xa0
1000e93e:	32d0      	adds	r2, #208	; 0xd0
1000e940:	005b      	lsls	r3, r3, #1
1000e942:	8013      	strh	r3, [r2, #0]
1000e944:	1c22      	adds	r2, r4, #0
1000e946:	32ce      	adds	r2, #206	; 0xce
1000e948:	8013      	strh	r3, [r2, #0]
1000e94a:	1c23      	adds	r3, r4, #0
1000e94c:	33d2      	adds	r3, #210	; 0xd2
1000e94e:	801d      	strh	r5, [r3, #0]
1000e950:	22fa      	movs	r2, #250	; 0xfa
1000e952:	1c23      	adds	r3, r4, #0
1000e954:	0052      	lsls	r2, r2, #1
1000e956:	33d4      	adds	r3, #212	; 0xd4
1000e958:	801a      	strh	r2, [r3, #0]
1000e95a:	1c23      	adds	r3, r4, #0
1000e95c:	33d6      	adds	r3, #214	; 0xd6
1000e95e:	701d      	strb	r5, [r3, #0]
1000e960:	1c20      	adds	r0, r4, #0
1000e962:	4b23      	ldr	r3, [pc, #140]	; (1000e9f0 <at_ble_init+0x1b0>)
1000e964:	76e5      	strb	r5, [r4, #27]
1000e966:	7725      	strb	r5, [r4, #28]
1000e968:	7765      	strb	r5, [r4, #29]
1000e96a:	77a5      	strb	r5, [r4, #30]
1000e96c:	77e5      	strb	r5, [r4, #31]
1000e96e:	8425      	strh	r5, [r4, #32]
1000e970:	8465      	strh	r5, [r4, #34]	; 0x22
1000e972:	4798      	blx	r3
1000e974:	1c23      	adds	r3, r4, #0
1000e976:	2207      	movs	r2, #7
1000e978:	3374      	adds	r3, #116	; 0x74
1000e97a:	701a      	strb	r2, [r3, #0]
1000e97c:	1c23      	adds	r3, r4, #0
1000e97e:	3204      	adds	r2, #4
1000e980:	33aa      	adds	r3, #170	; 0xaa
1000e982:	801a      	strh	r2, [r3, #0]
1000e984:	1c2b      	adds	r3, r5, #0
1000e986:	5d7a      	ldrb	r2, [r7, r5]
1000e988:	33ac      	adds	r3, #172	; 0xac
1000e98a:	3501      	adds	r5, #1
1000e98c:	54e2      	strb	r2, [r4, r3]
1000e98e:	2d0b      	cmp	r5, #11
1000e990:	d1f8      	bne.n	1000e984 <at_ble_init+0x144>
1000e992:	1c30      	adds	r0, r6, #0
1000e994:	b007      	add	sp, #28
1000e996:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e998:	10015230 	.word	0x10015230
1000e99c:	1001255f 	.word	0x1001255f
1000e9a0:	10017c90 	.word	0x10017c90
1000e9a4:	10016ebc 	.word	0x10016ebc
1000e9a8:	10016e1c 	.word	0x10016e1c
1000e9ac:	10015398 	.word	0x10015398
1000e9b0:	10010f09 	.word	0x10010f09
1000e9b4:	1000ecb1 	.word	0x1000ecb1
1000e9b8:	1000f311 	.word	0x1000f311
1000e9bc:	1000f551 	.word	0x1000f551
1000e9c0:	1000f34d 	.word	0x1000f34d
1000e9c4:	1000d5ad 	.word	0x1000d5ad
1000e9c8:	1000f851 	.word	0x1000f851
1000e9cc:	1000d7f1 	.word	0x1000d7f1
1000e9d0:	1000f8f9 	.word	0x1000f8f9
1000e9d4:	1000df2d 	.word	0x1000df2d
1000e9d8:	1000dfe9 	.word	0x1000dfe9
1000e9dc:	100104c1 	.word	0x100104c1
1000e9e0:	10017c92 	.word	0x10017c92
1000e9e4:	10017d22 	.word	0x10017d22
1000e9e8:	00003a98 	.word	0x00003a98
1000e9ec:	10017d2d 	.word	0x10017d2d
1000e9f0:	1000e7b1 	.word	0x1000e7b1

1000e9f4 <at_ble_addr_set>:
1000e9f4:	b538      	push	{r3, r4, r5, lr}
1000e9f6:	1c45      	adds	r5, r0, #1
1000e9f8:	1c03      	adds	r3, r0, #0
1000e9fa:	20cf      	movs	r0, #207	; 0xcf
1000e9fc:	2d00      	cmp	r5, #0
1000e9fe:	d018      	beq.n	1000ea32 <at_ble_addr_set+0x3e>
1000ea00:	781a      	ldrb	r2, [r3, #0]
1000ea02:	2a03      	cmp	r2, #3
1000ea04:	d815      	bhi.n	1000ea32 <at_ble_addr_set+0x3e>
1000ea06:	2a01      	cmp	r2, #1
1000ea08:	d102      	bne.n	1000ea10 <at_ble_addr_set+0x1c>
1000ea0a:	785a      	ldrb	r2, [r3, #1]
1000ea0c:	2a00      	cmp	r2, #0
1000ea0e:	d010      	beq.n	1000ea32 <at_ble_addr_set+0x3e>
1000ea10:	1c1c      	adds	r4, r3, #0
1000ea12:	1c29      	adds	r1, r5, #0
1000ea14:	2206      	movs	r2, #6
1000ea16:	4b07      	ldr	r3, [pc, #28]	; (1000ea34 <at_ble_addr_set+0x40>)
1000ea18:	4807      	ldr	r0, [pc, #28]	; (1000ea38 <at_ble_addr_set+0x44>)
1000ea1a:	4798      	blx	r3
1000ea1c:	7823      	ldrb	r3, [r4, #0]
1000ea1e:	4807      	ldr	r0, [pc, #28]	; (1000ea3c <at_ble_addr_set+0x48>)
1000ea20:	7103      	strb	r3, [r0, #4]
1000ea22:	4b07      	ldr	r3, [pc, #28]	; (1000ea40 <at_ble_addr_set+0x4c>)
1000ea24:	4798      	blx	r3
1000ea26:	7823      	ldrb	r3, [r4, #0]
1000ea28:	2b00      	cmp	r3, #0
1000ea2a:	d102      	bne.n	1000ea32 <at_ble_addr_set+0x3e>
1000ea2c:	1c28      	adds	r0, r5, #0
1000ea2e:	4b05      	ldr	r3, [pc, #20]	; (1000ea44 <at_ble_addr_set+0x50>)
1000ea30:	4798      	blx	r3
1000ea32:	bd38      	pop	{r3, r4, r5, pc}
1000ea34:	1001255f 	.word	0x1001255f
1000ea38:	10017d27 	.word	0x10017d27
1000ea3c:	10017d22 	.word	0x10017d22
1000ea40:	1000e7b1 	.word	0x1000e7b1
1000ea44:	1000f97d 	.word	0x1000f97d

1000ea48 <at_ble_adv_data_set>:
1000ea48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000ea4a:	4684      	mov	ip, r0
1000ea4c:	1c0f      	adds	r7, r1, #0
1000ea4e:	1c16      	adds	r6, r2, #0
1000ea50:	1c1c      	adds	r4, r3, #0
1000ea52:	2800      	cmp	r0, #0
1000ea54:	d102      	bne.n	1000ea5c <at_ble_adv_data_set+0x14>
1000ea56:	20e2      	movs	r0, #226	; 0xe2
1000ea58:	2a00      	cmp	r2, #0
1000ea5a:	d02b      	beq.n	1000eab4 <at_ble_adv_data_set+0x6c>
1000ea5c:	20cf      	movs	r0, #207	; 0xcf
1000ea5e:	2f1f      	cmp	r7, #31
1000ea60:	d828      	bhi.n	1000eab4 <at_ble_adv_data_set+0x6c>
1000ea62:	2c1f      	cmp	r4, #31
1000ea64:	d826      	bhi.n	1000eab4 <at_ble_adv_data_set+0x6c>
1000ea66:	4663      	mov	r3, ip
1000ea68:	2b00      	cmp	r3, #0
1000ea6a:	d00e      	beq.n	1000ea8a <at_ble_adv_data_set+0x42>
1000ea6c:	4812      	ldr	r0, [pc, #72]	; (1000eab8 <at_ble_adv_data_set+0x70>)
1000ea6e:	4d13      	ldr	r5, [pc, #76]	; (1000eabc <at_ble_adv_data_set+0x74>)
1000ea70:	2f00      	cmp	r7, #0
1000ea72:	d104      	bne.n	1000ea7e <at_ble_adv_data_set+0x36>
1000ea74:	1c39      	adds	r1, r7, #0
1000ea76:	221f      	movs	r2, #31
1000ea78:	4b11      	ldr	r3, [pc, #68]	; (1000eac0 <at_ble_adv_data_set+0x78>)
1000ea7a:	4798      	blx	r3
1000ea7c:	e003      	b.n	1000ea86 <at_ble_adv_data_set+0x3e>
1000ea7e:	4661      	mov	r1, ip
1000ea80:	1c3a      	adds	r2, r7, #0
1000ea82:	4b10      	ldr	r3, [pc, #64]	; (1000eac4 <at_ble_adv_data_set+0x7c>)
1000ea84:	4798      	blx	r3
1000ea86:	3572      	adds	r5, #114	; 0x72
1000ea88:	702f      	strb	r7, [r5, #0]
1000ea8a:	1e30      	subs	r0, r6, #0
1000ea8c:	d012      	beq.n	1000eab4 <at_ble_adv_data_set+0x6c>
1000ea8e:	4d0b      	ldr	r5, [pc, #44]	; (1000eabc <at_ble_adv_data_set+0x74>)
1000ea90:	480d      	ldr	r0, [pc, #52]	; (1000eac8 <at_ble_adv_data_set+0x80>)
1000ea92:	2c00      	cmp	r4, #0
1000ea94:	d107      	bne.n	1000eaa6 <at_ble_adv_data_set+0x5e>
1000ea96:	1c21      	adds	r1, r4, #0
1000ea98:	221f      	movs	r2, #31
1000ea9a:	4b09      	ldr	r3, [pc, #36]	; (1000eac0 <at_ble_adv_data_set+0x78>)
1000ea9c:	3573      	adds	r5, #115	; 0x73
1000ea9e:	4798      	blx	r3
1000eaa0:	702c      	strb	r4, [r5, #0]
1000eaa2:	1c20      	adds	r0, r4, #0
1000eaa4:	e006      	b.n	1000eab4 <at_ble_adv_data_set+0x6c>
1000eaa6:	1c31      	adds	r1, r6, #0
1000eaa8:	1c22      	adds	r2, r4, #0
1000eaaa:	4b06      	ldr	r3, [pc, #24]	; (1000eac4 <at_ble_adv_data_set+0x7c>)
1000eaac:	4798      	blx	r3
1000eaae:	2000      	movs	r0, #0
1000eab0:	3573      	adds	r5, #115	; 0x73
1000eab2:	702c      	strb	r4, [r5, #0]
1000eab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000eab6:	46c0      	nop			; (mov r8, r8)
1000eab8:	10017d56 	.word	0x10017d56
1000eabc:	10017d22 	.word	0x10017d22
1000eac0:	10012571 	.word	0x10012571
1000eac4:	1001255f 	.word	0x1001255f
1000eac8:	10017d75 	.word	0x10017d75

1000eacc <at_ble_adv_start>:
1000eacc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000eace:	b091      	sub	sp, #68	; 0x44
1000ead0:	1c1f      	adds	r7, r3, #0
1000ead2:	ab16      	add	r3, sp, #88	; 0x58
1000ead4:	881d      	ldrh	r5, [r3, #0]
1000ead6:	ab17      	add	r3, sp, #92	; 0x5c
1000ead8:	881b      	ldrh	r3, [r3, #0]
1000eada:	910d      	str	r1, [sp, #52]	; 0x34
1000eadc:	930e      	str	r3, [sp, #56]	; 0x38
1000eade:	ab18      	add	r3, sp, #96	; 0x60
1000eae0:	781b      	ldrb	r3, [r3, #0]
1000eae2:	1c04      	adds	r4, r0, #0
1000eae4:	930f      	str	r3, [sp, #60]	; 0x3c
1000eae6:	4b42      	ldr	r3, [pc, #264]	; (1000ebf0 <at_ble_adv_start+0x124>)
1000eae8:	1c16      	adds	r6, r2, #0
1000eaea:	3373      	adds	r3, #115	; 0x73
1000eaec:	781b      	ldrb	r3, [r3, #0]
1000eaee:	20cf      	movs	r0, #207	; 0xcf
1000eaf0:	930c      	str	r3, [sp, #48]	; 0x30
1000eaf2:	2c01      	cmp	r4, #1
1000eaf4:	d103      	bne.n	1000eafe <at_ble_adv_start+0x32>
1000eaf6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1000eaf8:	2b00      	cmp	r3, #0
1000eafa:	d176      	bne.n	1000ebea <at_ble_adv_start+0x11e>
1000eafc:	e024      	b.n	1000eb48 <at_ble_adv_start+0x7c>
1000eafe:	2c04      	cmp	r4, #4
1000eb00:	d873      	bhi.n	1000ebea <at_ble_adv_start+0x11e>
1000eb02:	2380      	movs	r3, #128	; 0x80
1000eb04:	01db      	lsls	r3, r3, #7
1000eb06:	429d      	cmp	r5, r3
1000eb08:	d86f      	bhi.n	1000ebea <at_ble_adv_start+0x11e>
1000eb0a:	2c00      	cmp	r4, #0
1000eb0c:	d102      	bne.n	1000eb14 <at_ble_adv_start+0x48>
1000eb0e:	2d1f      	cmp	r5, #31
1000eb10:	d96b      	bls.n	1000ebea <at_ble_adv_start+0x11e>
1000eb12:	e003      	b.n	1000eb1c <at_ble_adv_start+0x50>
1000eb14:	2d9f      	cmp	r5, #159	; 0x9f
1000eb16:	d801      	bhi.n	1000eb1c <at_ble_adv_start+0x50>
1000eb18:	2c01      	cmp	r4, #1
1000eb1a:	d166      	bne.n	1000ebea <at_ble_adv_start+0x11e>
1000eb1c:	2f00      	cmp	r7, #0
1000eb1e:	d009      	beq.n	1000eb34 <at_ble_adv_start+0x68>
1000eb20:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000eb22:	20cf      	movs	r0, #207	; 0xcf
1000eb24:	3b01      	subs	r3, #1
1000eb26:	2b01      	cmp	r3, #1
1000eb28:	d95f      	bls.n	1000ebea <at_ble_adv_start+0x11e>
1000eb2a:	2c01      	cmp	r4, #1
1000eb2c:	d102      	bne.n	1000eb34 <at_ble_adv_start+0x68>
1000eb2e:	2d00      	cmp	r5, #0
1000eb30:	d100      	bne.n	1000eb34 <at_ble_adv_start+0x68>
1000eb32:	3520      	adds	r5, #32
1000eb34:	4b2f      	ldr	r3, [pc, #188]	; (1000ebf4 <at_ble_adv_start+0x128>)
1000eb36:	4798      	blx	r3
1000eb38:	1c01      	adds	r1, r0, #0
1000eb3a:	2e00      	cmp	r6, #0
1000eb3c:	d043      	beq.n	1000ebc6 <at_ble_adv_start+0xfa>
1000eb3e:	7833      	ldrb	r3, [r6, #0]
1000eb40:	1e60      	subs	r0, r4, #1
1000eb42:	2b00      	cmp	r3, #0
1000eb44:	d109      	bne.n	1000eb5a <at_ble_adv_start+0x8e>
1000eb46:	e03b      	b.n	1000ebc0 <at_ble_adv_start+0xf4>
1000eb48:	2380      	movs	r3, #128	; 0x80
1000eb4a:	01db      	lsls	r3, r3, #7
1000eb4c:	429d      	cmp	r5, r3
1000eb4e:	d84c      	bhi.n	1000ebea <at_ble_adv_start+0x11e>
1000eb50:	2e00      	cmp	r6, #0
1000eb52:	d04a      	beq.n	1000ebea <at_ble_adv_start+0x11e>
1000eb54:	2f00      	cmp	r7, #0
1000eb56:	d1e3      	bne.n	1000eb20 <at_ble_adv_start+0x54>
1000eb58:	e02b      	b.n	1000ebb2 <at_ble_adv_start+0xe6>
1000eb5a:	2301      	movs	r3, #1
1000eb5c:	2803      	cmp	r0, #3
1000eb5e:	d93a      	bls.n	1000ebd6 <at_ble_adv_start+0x10a>
1000eb60:	200d      	movs	r0, #13
1000eb62:	1c72      	adds	r2, r6, #1
1000eb64:	e002      	b.n	1000eb6c <at_ble_adv_start+0xa0>
1000eb66:	200e      	movs	r0, #14
1000eb68:	1e32      	subs	r2, r6, #0
1000eb6a:	d1fa      	bne.n	1000eb62 <at_ble_adv_start+0x96>
1000eb6c:	4c20      	ldr	r4, [pc, #128]	; (1000ebf0 <at_ble_adv_start+0x124>)
1000eb6e:	3474      	adds	r4, #116	; 0x74
1000eb70:	7826      	ldrb	r6, [r4, #0]
1000eb72:	2407      	movs	r4, #7
1000eb74:	2e00      	cmp	r6, #0
1000eb76:	d000      	beq.n	1000eb7a <at_ble_adv_start+0xae>
1000eb78:	1c34      	adds	r4, r6, #0
1000eb7a:	9200      	str	r2, [sp, #0]
1000eb7c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1000eb7e:	9403      	str	r4, [sp, #12]
1000eb80:	9204      	str	r2, [sp, #16]
1000eb82:	4a1b      	ldr	r2, [pc, #108]	; (1000ebf0 <at_ble_adv_start+0x124>)
1000eb84:	9501      	str	r5, [sp, #4]
1000eb86:	9502      	str	r5, [sp, #8]
1000eb88:	9705      	str	r7, [sp, #20]
1000eb8a:	3272      	adds	r2, #114	; 0x72
1000eb8c:	7812      	ldrb	r2, [r2, #0]
1000eb8e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
1000eb90:	9206      	str	r2, [sp, #24]
1000eb92:	4a19      	ldr	r2, [pc, #100]	; (1000ebf8 <at_ble_adv_start+0x12c>)
1000eb94:	9207      	str	r2, [sp, #28]
1000eb96:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1000eb98:	9208      	str	r2, [sp, #32]
1000eb9a:	4a18      	ldr	r2, [pc, #96]	; (1000ebfc <at_ble_adv_start+0x130>)
1000eb9c:	9209      	str	r2, [sp, #36]	; 0x24
1000eb9e:	2264      	movs	r2, #100	; 0x64
1000eba0:	4362      	muls	r2, r4
1000eba2:	b292      	uxth	r2, r2
1000eba4:	920a      	str	r2, [sp, #40]	; 0x28
1000eba6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
1000eba8:	4c15      	ldr	r4, [pc, #84]	; (1000ec00 <at_ble_adv_start+0x134>)
1000ebaa:	920b      	str	r2, [sp, #44]	; 0x2c
1000ebac:	4a15      	ldr	r2, [pc, #84]	; (1000ec04 <at_ble_adv_start+0x138>)
1000ebae:	47a0      	blx	r4
1000ebb0:	e01b      	b.n	1000ebea <at_ble_adv_start+0x11e>
1000ebb2:	2d00      	cmp	r5, #0
1000ebb4:	d1be      	bne.n	1000eb34 <at_ble_adv_start+0x68>
1000ebb6:	4b0f      	ldr	r3, [pc, #60]	; (1000ebf4 <at_ble_adv_start+0x128>)
1000ebb8:	4798      	blx	r3
1000ebba:	2520      	movs	r5, #32
1000ebbc:	1c01      	adds	r1, r0, #0
1000ebbe:	e7be      	b.n	1000eb3e <at_ble_adv_start+0x72>
1000ebc0:	2803      	cmp	r0, #3
1000ebc2:	d8cd      	bhi.n	1000eb60 <at_ble_adv_start+0x94>
1000ebc4:	e006      	b.n	1000ebd4 <at_ble_adv_start+0x108>
1000ebc6:	1e60      	subs	r0, r4, #1
1000ebc8:	2803      	cmp	r0, #3
1000ebca:	d903      	bls.n	1000ebd4 <at_ble_adv_start+0x108>
1000ebcc:	1c33      	adds	r3, r6, #0
1000ebce:	200d      	movs	r0, #13
1000ebd0:	1c32      	adds	r2, r6, #0
1000ebd2:	e7cb      	b.n	1000eb6c <at_ble_adv_start+0xa0>
1000ebd4:	2300      	movs	r3, #0
1000ebd6:	f002 fb09 	bl	100111ec <__gnu_thumb1_case_sqi>
1000ebda:	06c6      	.short	0x06c6
1000ebdc:	0204      	.short	0x0204
1000ebde:	200f      	movs	r0, #15
1000ebe0:	e7c2      	b.n	1000eb68 <at_ble_adv_start+0x9c>
1000ebe2:	2200      	movs	r2, #0
1000ebe4:	920c      	str	r2, [sp, #48]	; 0x30
1000ebe6:	200c      	movs	r0, #12
1000ebe8:	e7be      	b.n	1000eb68 <at_ble_adv_start+0x9c>
1000ebea:	b011      	add	sp, #68	; 0x44
1000ebec:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ebee:	46c0      	nop			; (mov r8, r8)
1000ebf0:	10017d22 	.word	0x10017d22
1000ebf4:	10010a0d 	.word	0x10010a0d
1000ebf8:	10017d56 	.word	0x10017d56
1000ebfc:	10017d75 	.word	0x10017d75
1000ec00:	100108ed 	.word	0x100108ed
1000ec04:	00003a98 	.word	0x00003a98

1000ec08 <at_ble_adv_stop>:
1000ec08:	b508      	push	{r3, lr}
1000ec0a:	4b01      	ldr	r3, [pc, #4]	; (1000ec10 <at_ble_adv_stop+0x8>)
1000ec0c:	4798      	blx	r3
1000ec0e:	bd08      	pop	{r3, pc}
1000ec10:	10010719 	.word	0x10010719

1000ec14 <at_ble_scan_stop>:
1000ec14:	b510      	push	{r4, lr}
1000ec16:	4b05      	ldr	r3, [pc, #20]	; (1000ec2c <at_ble_scan_stop+0x18>)
1000ec18:	4798      	blx	r3
1000ec1a:	1e04      	subs	r4, r0, #0
1000ec1c:	d103      	bne.n	1000ec26 <at_ble_scan_stop+0x12>
1000ec1e:	20d1      	movs	r0, #209	; 0xd1
1000ec20:	4b03      	ldr	r3, [pc, #12]	; (1000ec30 <at_ble_scan_stop+0x1c>)
1000ec22:	0100      	lsls	r0, r0, #4
1000ec24:	4798      	blx	r3
1000ec26:	1c20      	adds	r0, r4, #0
1000ec28:	bd10      	pop	{r4, pc}
1000ec2a:	46c0      	nop			; (mov r8, r8)
1000ec2c:	10010719 	.word	0x10010719
1000ec30:	1000e6c1 	.word	0x1000e6c1

1000ec34 <at_ble_disconnect>:
1000ec34:	b538      	push	{r3, r4, r5, lr}
1000ec36:	1c04      	adds	r4, r0, #0
1000ec38:	4b04      	ldr	r3, [pc, #16]	; (1000ec4c <at_ble_disconnect+0x18>)
1000ec3a:	1c08      	adds	r0, r1, #0
1000ec3c:	1c21      	adds	r1, r4, #0
1000ec3e:	4798      	blx	r3
1000ec40:	1c05      	adds	r5, r0, #0
1000ec42:	4b03      	ldr	r3, [pc, #12]	; (1000ec50 <at_ble_disconnect+0x1c>)
1000ec44:	1c20      	adds	r0, r4, #0
1000ec46:	4798      	blx	r3
1000ec48:	1c28      	adds	r0, r5, #0
1000ec4a:	bd38      	pop	{r3, r4, r5, pc}
1000ec4c:	1000fd91 	.word	0x1000fd91
1000ec50:	1000e705 	.word	0x1000e705

1000ec54 <at_ble_conn_update_reply>:
1000ec54:	b510      	push	{r4, lr}
1000ec56:	4c01      	ldr	r4, [pc, #4]	; (1000ec5c <at_ble_conn_update_reply+0x8>)
1000ec58:	47a0      	blx	r4
1000ec5a:	bd10      	pop	{r4, pc}
1000ec5c:	10010281 	.word	0x10010281

1000ec60 <at_ble_random_address_resolve>:
1000ec60:	b510      	push	{r4, lr}
1000ec62:	23cf      	movs	r3, #207	; 0xcf
1000ec64:	2800      	cmp	r0, #0
1000ec66:	d00a      	beq.n	1000ec7e <at_ble_random_address_resolve+0x1e>
1000ec68:	2900      	cmp	r1, #0
1000ec6a:	d008      	beq.n	1000ec7e <at_ble_random_address_resolve+0x1e>
1000ec6c:	2a00      	cmp	r2, #0
1000ec6e:	d006      	beq.n	1000ec7e <at_ble_random_address_resolve+0x1e>
1000ec70:	780c      	ldrb	r4, [r1, #0]
1000ec72:	2c02      	cmp	r4, #2
1000ec74:	d103      	bne.n	1000ec7e <at_ble_random_address_resolve+0x1e>
1000ec76:	4b03      	ldr	r3, [pc, #12]	; (1000ec84 <at_ble_random_address_resolve+0x24>)
1000ec78:	3101      	adds	r1, #1
1000ec7a:	4798      	blx	r3
1000ec7c:	2300      	movs	r3, #0
1000ec7e:	1c18      	adds	r0, r3, #0
1000ec80:	bd10      	pop	{r4, pc}
1000ec82:	46c0      	nop			; (mov r8, r8)
1000ec84:	10010aad 	.word	0x10010aad

1000ec88 <at_ble_uuid_type2len>:
1000ec88:	23cf      	movs	r3, #207	; 0xcf
1000ec8a:	2802      	cmp	r0, #2
1000ec8c:	d801      	bhi.n	1000ec92 <at_ble_uuid_type2len+0xa>
1000ec8e:	4b02      	ldr	r3, [pc, #8]	; (1000ec98 <at_ble_uuid_type2len+0x10>)
1000ec90:	5c1b      	ldrb	r3, [r3, r0]
1000ec92:	1c18      	adds	r0, r3, #0
1000ec94:	4770      	bx	lr
1000ec96:	46c0      	nop			; (mov r8, r8)
1000ec98:	1001523b 	.word	0x1001523b

1000ec9c <at_ble_uuid_len2type>:
1000ec9c:	1e83      	subs	r3, r0, #2
1000ec9e:	b2db      	uxtb	r3, r3
1000eca0:	2003      	movs	r0, #3
1000eca2:	2b0e      	cmp	r3, #14
1000eca4:	d801      	bhi.n	1000ecaa <at_ble_uuid_len2type+0xe>
1000eca6:	4a01      	ldr	r2, [pc, #4]	; (1000ecac <at_ble_uuid_len2type+0x10>)
1000eca8:	5cd0      	ldrb	r0, [r2, r3]
1000ecaa:	4770      	bx	lr
1000ecac:	1001523e 	.word	0x1001523e

1000ecb0 <init_gatt_client_module>:
1000ecb0:	2200      	movs	r2, #0
1000ecb2:	4b01      	ldr	r3, [pc, #4]	; (1000ecb8 <init_gatt_client_module+0x8>)
1000ecb4:	801a      	strh	r2, [r3, #0]
1000ecb6:	4770      	bx	lr
1000ecb8:	10016e14 	.word	0x10016e14

1000ecbc <db_searchATT>:
1000ecbc:	b570      	push	{r4, r5, r6, lr}
1000ecbe:	1c05      	adds	r5, r0, #0
1000ecc0:	2400      	movs	r4, #0
1000ecc2:	4b0c      	ldr	r3, [pc, #48]	; (1000ecf4 <db_searchATT+0x38>)
1000ecc4:	6819      	ldr	r1, [r3, #0]
1000ecc6:	4b0c      	ldr	r3, [pc, #48]	; (1000ecf8 <db_searchATT+0x3c>)
1000ecc8:	681e      	ldr	r6, [r3, #0]
1000ecca:	428c      	cmp	r4, r1
1000eccc:	dc10      	bgt.n	1000ecf0 <db_searchATT+0x34>
1000ecce:	200c      	movs	r0, #12
1000ecd0:	1863      	adds	r3, r4, r1
1000ecd2:	0fda      	lsrs	r2, r3, #31
1000ecd4:	18d3      	adds	r3, r2, r3
1000ecd6:	1c02      	adds	r2, r0, #0
1000ecd8:	105b      	asrs	r3, r3, #1
1000ecda:	435a      	muls	r2, r3
1000ecdc:	18b0      	adds	r0, r6, r2
1000ecde:	8802      	ldrh	r2, [r0, #0]
1000ece0:	42aa      	cmp	r2, r5
1000ece2:	d201      	bcs.n	1000ece8 <db_searchATT+0x2c>
1000ece4:	1e59      	subs	r1, r3, #1
1000ece6:	e7f0      	b.n	1000ecca <db_searchATT+0xe>
1000ece8:	42aa      	cmp	r2, r5
1000ecea:	d902      	bls.n	1000ecf2 <db_searchATT+0x36>
1000ecec:	1c5c      	adds	r4, r3, #1
1000ecee:	e7ec      	b.n	1000ecca <db_searchATT+0xe>
1000ecf0:	2000      	movs	r0, #0
1000ecf2:	bd70      	pop	{r4, r5, r6, pc}
1000ecf4:	10016e28 	.word	0x10016e28
1000ecf8:	10016e20 	.word	0x10016e20

1000ecfc <att_permissions>:
1000ecfc:	b530      	push	{r4, r5, lr}
1000ecfe:	2403      	movs	r4, #3
1000ed00:	1c05      	adds	r5, r0, #0
1000ed02:	2301      	movs	r3, #1
1000ed04:	4025      	ands	r5, r4
1000ed06:	42a5      	cmp	r5, r4
1000ed08:	d009      	beq.n	1000ed1e <att_permissions+0x22>
1000ed0a:	1c23      	adds	r3, r4, #0
1000ed0c:	1924      	adds	r4, r4, r4
1000ed0e:	4220      	tst	r0, r4
1000ed10:	d105      	bne.n	1000ed1e <att_permissions+0x22>
1000ed12:	3b02      	subs	r3, #2
1000ed14:	4218      	tst	r0, r3
1000ed16:	d102      	bne.n	1000ed1e <att_permissions+0x22>
1000ed18:	1e4b      	subs	r3, r1, #1
1000ed1a:	4199      	sbcs	r1, r3
1000ed1c:	b28b      	uxth	r3, r1
1000ed1e:	2130      	movs	r1, #48	; 0x30
1000ed20:	4001      	ands	r1, r0
1000ed22:	2930      	cmp	r1, #48	; 0x30
1000ed24:	d007      	beq.n	1000ed36 <att_permissions+0x3a>
1000ed26:	0641      	lsls	r1, r0, #25
1000ed28:	d401      	bmi.n	1000ed2e <att_permissions+0x32>
1000ed2a:	0681      	lsls	r1, r0, #26
1000ed2c:	d501      	bpl.n	1000ed32 <att_permissions+0x36>
1000ed2e:	4807      	ldr	r0, [pc, #28]	; (1000ed4c <att_permissions+0x50>)
1000ed30:	e009      	b.n	1000ed46 <att_permissions+0x4a>
1000ed32:	06c1      	lsls	r1, r0, #27
1000ed34:	d501      	bpl.n	1000ed3a <att_permissions+0x3e>
1000ed36:	4806      	ldr	r0, [pc, #24]	; (1000ed50 <att_permissions+0x54>)
1000ed38:	e005      	b.n	1000ed46 <att_permissions+0x4a>
1000ed3a:	2a00      	cmp	r2, #0
1000ed3c:	d001      	beq.n	1000ed42 <att_permissions+0x46>
1000ed3e:	2204      	movs	r2, #4
1000ed40:	4313      	orrs	r3, r2
1000ed42:	2080      	movs	r0, #128	; 0x80
1000ed44:	0180      	lsls	r0, r0, #6
1000ed46:	4318      	orrs	r0, r3
1000ed48:	bd30      	pop	{r4, r5, pc}
1000ed4a:	46c0      	nop			; (mov r8, r8)
1000ed4c:	0000200c 	.word	0x0000200c
1000ed50:	00002004 	.word	0x00002004

1000ed54 <char_permissions>:
1000ed54:	b530      	push	{r4, r5, lr}
1000ed56:	2300      	movs	r3, #0
1000ed58:	0784      	lsls	r4, r0, #30
1000ed5a:	d503      	bpl.n	1000ed64 <char_permissions+0x10>
1000ed5c:	3301      	adds	r3, #1
1000ed5e:	4219      	tst	r1, r3
1000ed60:	d100      	bne.n	1000ed64 <char_permissions+0x10>
1000ed62:	3302      	adds	r3, #2
1000ed64:	0704      	lsls	r4, r0, #28
1000ed66:	d508      	bpl.n	1000ed7a <char_permissions+0x26>
1000ed68:	06cc      	lsls	r4, r1, #27
1000ed6a:	d501      	bpl.n	1000ed70 <char_permissions+0x1c>
1000ed6c:	2404      	movs	r4, #4
1000ed6e:	e000      	b.n	1000ed72 <char_permissions+0x1e>
1000ed70:	240c      	movs	r4, #12
1000ed72:	4323      	orrs	r3, r4
1000ed74:	2480      	movs	r4, #128	; 0x80
1000ed76:	01a4      	lsls	r4, r4, #6
1000ed78:	4323      	orrs	r3, r4
1000ed7a:	0684      	lsls	r4, r0, #26
1000ed7c:	d506      	bpl.n	1000ed8c <char_permissions+0x38>
1000ed7e:	2406      	movs	r4, #6
1000ed80:	4221      	tst	r1, r4
1000ed82:	d101      	bne.n	1000ed88 <char_permissions+0x34>
1000ed84:	340a      	adds	r4, #10
1000ed86:	e000      	b.n	1000ed8a <char_permissions+0x36>
1000ed88:	2430      	movs	r4, #48	; 0x30
1000ed8a:	4323      	orrs	r3, r4
1000ed8c:	06c4      	lsls	r4, r0, #27
1000ed8e:	d506      	bpl.n	1000ed9e <char_permissions+0x4a>
1000ed90:	2406      	movs	r4, #6
1000ed92:	4221      	tst	r1, r4
1000ed94:	d101      	bne.n	1000ed9a <char_permissions+0x46>
1000ed96:	343a      	adds	r4, #58	; 0x3a
1000ed98:	e000      	b.n	1000ed9c <char_permissions+0x48>
1000ed9a:	24c0      	movs	r4, #192	; 0xc0
1000ed9c:	4323      	orrs	r3, r4
1000ed9e:	2480      	movs	r4, #128	; 0x80
1000eda0:	0064      	lsls	r4, r4, #1
1000eda2:	4220      	tst	r0, r4
1000eda4:	d000      	beq.n	1000eda8 <char_permissions+0x54>
1000eda6:	4323      	orrs	r3, r4
1000eda8:	07c4      	lsls	r4, r0, #31
1000edaa:	d502      	bpl.n	1000edb2 <char_permissions+0x5e>
1000edac:	2480      	movs	r4, #128	; 0x80
1000edae:	00a4      	lsls	r4, r4, #2
1000edb0:	4323      	orrs	r3, r4
1000edb2:	2404      	movs	r4, #4
1000edb4:	4220      	tst	r0, r4
1000edb6:	d006      	beq.n	1000edc6 <char_permissions+0x72>
1000edb8:	06cd      	lsls	r5, r1, #27
1000edba:	d400      	bmi.n	1000edbe <char_permissions+0x6a>
1000edbc:	240c      	movs	r4, #12
1000edbe:	4323      	orrs	r3, r4
1000edc0:	2480      	movs	r4, #128	; 0x80
1000edc2:	0124      	lsls	r4, r4, #4
1000edc4:	4323      	orrs	r3, r4
1000edc6:	0644      	lsls	r4, r0, #25
1000edc8:	d501      	bpl.n	1000edce <char_permissions+0x7a>
1000edca:	4c08      	ldr	r4, [pc, #32]	; (1000edec <char_permissions+0x98>)
1000edcc:	4323      	orrs	r3, r4
1000edce:	0600      	lsls	r0, r0, #24
1000edd0:	d507      	bpl.n	1000ede2 <char_permissions+0x8e>
1000edd2:	2004      	movs	r0, #4
1000edd4:	06c9      	lsls	r1, r1, #27
1000edd6:	d400      	bmi.n	1000edda <char_permissions+0x86>
1000edd8:	200c      	movs	r0, #12
1000edda:	4303      	orrs	r3, r0
1000eddc:	2084      	movs	r0, #132	; 0x84
1000edde:	0180      	lsls	r0, r0, #6
1000ede0:	4303      	orrs	r3, r0
1000ede2:	0390      	lsls	r0, r2, #14
1000ede4:	4303      	orrs	r3, r0
1000ede6:	b298      	uxth	r0, r3
1000ede8:	bd30      	pop	{r4, r5, pc}
1000edea:	46c0      	nop			; (mov r8, r8)
1000edec:	00001004 	.word	0x00001004

1000edf0 <presentation_format_define>:
1000edf0:	b507      	push	{r0, r1, r2, lr}
1000edf2:	466a      	mov	r2, sp
1000edf4:	780b      	ldrb	r3, [r1, #0]
1000edf6:	7013      	strb	r3, [r2, #0]
1000edf8:	784b      	ldrb	r3, [r1, #1]
1000edfa:	7053      	strb	r3, [r2, #1]
1000edfc:	884b      	ldrh	r3, [r1, #2]
1000edfe:	7093      	strb	r3, [r2, #2]
1000ee00:	0a1b      	lsrs	r3, r3, #8
1000ee02:	70d3      	strb	r3, [r2, #3]
1000ee04:	790b      	ldrb	r3, [r1, #4]
1000ee06:	7113      	strb	r3, [r2, #4]
1000ee08:	88cb      	ldrh	r3, [r1, #6]
1000ee0a:	2107      	movs	r1, #7
1000ee0c:	7153      	strb	r3, [r2, #5]
1000ee0e:	0a1b      	lsrs	r3, r3, #8
1000ee10:	7193      	strb	r3, [r2, #6]
1000ee12:	4b01      	ldr	r3, [pc, #4]	; (1000ee18 <presentation_format_define+0x28>)
1000ee14:	4798      	blx	r3
1000ee16:	bd0e      	pop	{r1, r2, r3, pc}
1000ee18:	10011099 	.word	0x10011099

1000ee1c <db_addATT>:
1000ee1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000ee1e:	4c29      	ldr	r4, [pc, #164]	; (1000eec4 <db_addATT+0xa8>)
1000ee20:	1c1d      	adds	r5, r3, #0
1000ee22:	6823      	ldr	r3, [r4, #0]
1000ee24:	9001      	str	r0, [sp, #4]
1000ee26:	26d3      	movs	r6, #211	; 0xd3
1000ee28:	2b00      	cmp	r3, #0
1000ee2a:	d048      	beq.n	1000eebe <db_addATT+0xa2>
1000ee2c:	1c1e      	adds	r6, r3, #0
1000ee2e:	3e0c      	subs	r6, #12
1000ee30:	6026      	str	r6, [r4, #0]
1000ee32:	2900      	cmp	r1, #0
1000ee34:	d005      	beq.n	1000ee42 <db_addATT+0x26>
1000ee36:	4f24      	ldr	r7, [pc, #144]	; (1000eec8 <db_addATT+0xac>)
1000ee38:	46bc      	mov	ip, r7
1000ee3a:	4660      	mov	r0, ip
1000ee3c:	683f      	ldr	r7, [r7, #0]
1000ee3e:	18bf      	adds	r7, r7, r2
1000ee40:	6007      	str	r7, [r0, #0]
1000ee42:	4821      	ldr	r0, [pc, #132]	; (1000eec8 <db_addATT+0xac>)
1000ee44:	6807      	ldr	r7, [r0, #0]
1000ee46:	4684      	mov	ip, r0
1000ee48:	42be      	cmp	r6, r7
1000ee4a:	d932      	bls.n	1000eeb2 <db_addATT+0x96>
1000ee4c:	4668      	mov	r0, sp
1000ee4e:	8880      	ldrh	r0, [r0, #4]
1000ee50:	3b0c      	subs	r3, #12
1000ee52:	8018      	strh	r0, [r3, #0]
1000ee54:	6823      	ldr	r3, [r4, #0]
1000ee56:	2900      	cmp	r1, #0
1000ee58:	d009      	beq.n	1000ee6e <db_addATT+0x52>
1000ee5a:	2a00      	cmp	r2, #0
1000ee5c:	d007      	beq.n	1000ee6e <db_addATT+0x52>
1000ee5e:	4660      	mov	r0, ip
1000ee60:	6800      	ldr	r0, [r0, #0]
1000ee62:	809a      	strh	r2, [r3, #4]
1000ee64:	1a80      	subs	r0, r0, r2
1000ee66:	6098      	str	r0, [r3, #8]
1000ee68:	4b18      	ldr	r3, [pc, #96]	; (1000eecc <db_addATT+0xb0>)
1000ee6a:	4798      	blx	r3
1000ee6c:	e002      	b.n	1000ee74 <db_addATT+0x58>
1000ee6e:	2100      	movs	r1, #0
1000ee70:	809a      	strh	r2, [r3, #4]
1000ee72:	6099      	str	r1, [r3, #8]
1000ee74:	2300      	movs	r3, #0
1000ee76:	6822      	ldr	r2, [r4, #0]
1000ee78:	7093      	strb	r3, [r2, #2]
1000ee7a:	3303      	adds	r3, #3
1000ee7c:	402b      	ands	r3, r5
1000ee7e:	2b03      	cmp	r3, #3
1000ee80:	d001      	beq.n	1000ee86 <db_addATT+0x6a>
1000ee82:	076b      	lsls	r3, r5, #29
1000ee84:	d504      	bpl.n	1000ee90 <db_addATT+0x74>
1000ee86:	2101      	movs	r1, #1
1000ee88:	6822      	ldr	r2, [r4, #0]
1000ee8a:	7893      	ldrb	r3, [r2, #2]
1000ee8c:	430b      	orrs	r3, r1
1000ee8e:	7093      	strb	r3, [r2, #2]
1000ee90:	2330      	movs	r3, #48	; 0x30
1000ee92:	402b      	ands	r3, r5
1000ee94:	2b30      	cmp	r3, #48	; 0x30
1000ee96:	d001      	beq.n	1000ee9c <db_addATT+0x80>
1000ee98:	066b      	lsls	r3, r5, #25
1000ee9a:	d504      	bpl.n	1000eea6 <db_addATT+0x8a>
1000ee9c:	2102      	movs	r1, #2
1000ee9e:	6822      	ldr	r2, [r4, #0]
1000eea0:	7893      	ldrb	r3, [r2, #2]
1000eea2:	430b      	orrs	r3, r1
1000eea4:	7093      	strb	r3, [r2, #2]
1000eea6:	4a0a      	ldr	r2, [pc, #40]	; (1000eed0 <db_addATT+0xb4>)
1000eea8:	2600      	movs	r6, #0
1000eeaa:	6813      	ldr	r3, [r2, #0]
1000eeac:	3301      	adds	r3, #1
1000eeae:	6013      	str	r3, [r2, #0]
1000eeb0:	e005      	b.n	1000eebe <db_addATT+0xa2>
1000eeb2:	6023      	str	r3, [r4, #0]
1000eeb4:	2611      	movs	r6, #17
1000eeb6:	2900      	cmp	r1, #0
1000eeb8:	d001      	beq.n	1000eebe <db_addATT+0xa2>
1000eeba:	1aba      	subs	r2, r7, r2
1000eebc:	6002      	str	r2, [r0, #0]
1000eebe:	1c30      	adds	r0, r6, #0
1000eec0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000eec2:	46c0      	nop			; (mov r8, r8)
1000eec4:	10016e20 	.word	0x10016e20
1000eec8:	10016e24 	.word	0x10016e24
1000eecc:	1001255f 	.word	0x1001255f
1000eed0:	10016e28 	.word	0x10016e28

1000eed4 <user_description_define>:
1000eed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000eed6:	1c05      	adds	r5, r0, #0
1000eed8:	20cf      	movs	r0, #207	; 0xcf
1000eeda:	2a00      	cmp	r2, #0
1000eedc:	d01c      	beq.n	1000ef18 <user_description_define+0x44>
1000eede:	1c14      	adds	r4, r2, #0
1000eee0:	2203      	movs	r2, #3
1000eee2:	1c1e      	adds	r6, r3, #0
1000eee4:	400a      	ands	r2, r1
1000eee6:	1c0b      	adds	r3, r1, #0
1000eee8:	3a03      	subs	r2, #3
1000eeea:	4251      	negs	r1, r2
1000eeec:	4151      	adcs	r1, r2
1000eeee:	075a      	lsls	r2, r3, #29
1000eef0:	0fd2      	lsrs	r2, r2, #31
1000eef2:	430a      	orrs	r2, r1
1000eef4:	03d2      	lsls	r2, r2, #15
1000eef6:	4f09      	ldr	r7, [pc, #36]	; (1000ef1c <user_description_define+0x48>)
1000eef8:	1c28      	adds	r0, r5, #0
1000eefa:	2a00      	cmp	r2, #0
1000eefc:	d003      	beq.n	1000ef06 <user_description_define+0x32>
1000eefe:	1c21      	adds	r1, r4, #0
1000ef00:	1c32      	adds	r2, r6, #0
1000ef02:	47b8      	blx	r7
1000ef04:	e008      	b.n	1000ef18 <user_description_define+0x44>
1000ef06:	1c11      	adds	r1, r2, #0
1000ef08:	47b8      	blx	r7
1000ef0a:	2800      	cmp	r0, #0
1000ef0c:	d104      	bne.n	1000ef18 <user_description_define+0x44>
1000ef0e:	1c28      	adds	r0, r5, #0
1000ef10:	1c31      	adds	r1, r6, #0
1000ef12:	1c22      	adds	r2, r4, #0
1000ef14:	4b02      	ldr	r3, [pc, #8]	; (1000ef20 <user_description_define+0x4c>)
1000ef16:	4798      	blx	r3
1000ef18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000ef1a:	46c0      	nop			; (mov r8, r8)
1000ef1c:	1000ee1d 	.word	0x1000ee1d
1000ef20:	10011099 	.word	0x10011099

1000ef24 <at_ble_read_authorize_reply.part.1>:
1000ef24:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000ef26:	4b09      	ldr	r3, [pc, #36]	; (1000ef4c <at_ble_read_authorize_reply.part.1+0x28>)
1000ef28:	1c05      	adds	r5, r0, #0
1000ef2a:	1c08      	adds	r0, r1, #0
1000ef2c:	1c0c      	adds	r4, r1, #0
1000ef2e:	4798      	blx	r3
1000ef30:	2800      	cmp	r0, #0
1000ef32:	d009      	beq.n	1000ef48 <at_ble_read_authorize_reply.part.1+0x24>
1000ef34:	6882      	ldr	r2, [r0, #8]
1000ef36:	2a00      	cmp	r2, #0
1000ef38:	d006      	beq.n	1000ef48 <at_ble_read_authorize_reply.part.1+0x24>
1000ef3a:	8883      	ldrh	r3, [r0, #4]
1000ef3c:	1c29      	adds	r1, r5, #0
1000ef3e:	9200      	str	r2, [sp, #0]
1000ef40:	1c20      	adds	r0, r4, #0
1000ef42:	2200      	movs	r2, #0
1000ef44:	4c02      	ldr	r4, [pc, #8]	; (1000ef50 <at_ble_read_authorize_reply.part.1+0x2c>)
1000ef46:	47a0      	blx	r4
1000ef48:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000ef4a:	46c0      	nop			; (mov r8, r8)
1000ef4c:	1000ecbd 	.word	0x1000ecbd
1000ef50:	10010ba9 	.word	0x10010ba9

1000ef54 <internal_at_ble_service_define>:
1000ef54:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ef56:	b08b      	sub	sp, #44	; 0x2c
1000ef58:	9306      	str	r3, [sp, #24]
1000ef5a:	ab10      	add	r3, sp, #64	; 0x40
1000ef5c:	9202      	str	r2, [sp, #8]
1000ef5e:	cb04      	ldmia	r3!, {r2}
1000ef60:	1c05      	adds	r5, r0, #0
1000ef62:	881b      	ldrh	r3, [r3, #0]
1000ef64:	9105      	str	r1, [sp, #20]
1000ef66:	9303      	str	r3, [sp, #12]
1000ef68:	ab12      	add	r3, sp, #72	; 0x48
1000ef6a:	781b      	ldrb	r3, [r3, #0]
1000ef6c:	20cf      	movs	r0, #207	; 0xcf
1000ef6e:	9304      	str	r3, [sp, #16]
1000ef70:	2d00      	cmp	r5, #0
1000ef72:	d100      	bne.n	1000ef76 <internal_at_ble_service_define+0x22>
1000ef74:	e1ca      	b.n	1000f30c <internal_at_ble_service_define+0x3b8>
1000ef76:	2900      	cmp	r1, #0
1000ef78:	d100      	bne.n	1000ef7c <internal_at_ble_service_define+0x28>
1000ef7a:	e1c7      	b.n	1000f30c <internal_at_ble_service_define+0x3b8>
1000ef7c:	2a00      	cmp	r2, #0
1000ef7e:	d100      	bne.n	1000ef82 <internal_at_ble_service_define+0x2e>
1000ef80:	e1c4      	b.n	1000f30c <internal_at_ble_service_define+0x3b8>
1000ef82:	9b03      	ldr	r3, [sp, #12]
1000ef84:	2b00      	cmp	r3, #0
1000ef86:	d100      	bne.n	1000ef8a <internal_at_ble_service_define+0x36>
1000ef88:	e1c0      	b.n	1000f30c <internal_at_ble_service_define+0x3b8>
1000ef8a:	4bc9      	ldr	r3, [pc, #804]	; (1000f2b0 <internal_at_ble_service_define+0x35c>)
1000ef8c:	3004      	adds	r0, #4
1000ef8e:	681e      	ldr	r6, [r3, #0]
1000ef90:	2e00      	cmp	r6, #0
1000ef92:	d100      	bne.n	1000ef96 <internal_at_ble_service_define+0x42>
1000ef94:	e1ba      	b.n	1000f30c <internal_at_ble_service_define+0x3b8>
1000ef96:	2400      	movs	r4, #0
1000ef98:	4bc6      	ldr	r3, [pc, #792]	; (1000f2b4 <internal_at_ble_service_define+0x360>)
1000ef9a:	8034      	strh	r4, [r6, #0]
1000ef9c:	881b      	ldrh	r3, [r3, #0]
1000ef9e:	1db7      	adds	r7, r6, #6
1000efa0:	1c21      	adds	r1, r4, #0
1000efa2:	2210      	movs	r2, #16
1000efa4:	8073      	strh	r3, [r6, #2]
1000efa6:	1c38      	adds	r0, r7, #0
1000efa8:	4bc3      	ldr	r3, [pc, #780]	; (1000f2b8 <internal_at_ble_service_define+0x364>)
1000efaa:	4798      	blx	r3
1000efac:	7828      	ldrb	r0, [r5, #0]
1000efae:	4bc3      	ldr	r3, [pc, #780]	; (1000f2bc <internal_at_ble_service_define+0x368>)
1000efb0:	4798      	blx	r3
1000efb2:	1c69      	adds	r1, r5, #1
1000efb4:	1c02      	adds	r2, r0, #0
1000efb6:	4bc2      	ldr	r3, [pc, #776]	; (1000f2c0 <internal_at_ble_service_define+0x36c>)
1000efb8:	1c38      	adds	r0, r7, #0
1000efba:	4798      	blx	r3
1000efbc:	2204      	movs	r2, #4
1000efbe:	782b      	ldrb	r3, [r5, #0]
1000efc0:	9d02      	ldr	r5, [sp, #8]
1000efc2:	011b      	lsls	r3, r3, #4
1000efc4:	4313      	orrs	r3, r2
1000efc6:	9a04      	ldr	r2, [sp, #16]
1000efc8:	7174      	strb	r4, [r6, #5]
1000efca:	0192      	lsls	r2, r2, #6
1000efcc:	4313      	orrs	r3, r2
1000efce:	7133      	strb	r3, [r6, #4]
1000efd0:	2316      	movs	r3, #22
1000efd2:	9a06      	ldr	r2, [sp, #24]
1000efd4:	3512      	adds	r5, #18
1000efd6:	4353      	muls	r3, r2
1000efd8:	9a02      	ldr	r2, [sp, #8]
1000efda:	3312      	adds	r3, #18
1000efdc:	18d7      	adds	r7, r2, r3
1000efde:	42bd      	cmp	r5, r7
1000efe0:	d00f      	beq.n	1000f002 <internal_at_ble_service_define+0xae>
1000efe2:	4bb8      	ldr	r3, [pc, #736]	; (1000f2c4 <internal_at_ble_service_define+0x370>)
1000efe4:	8829      	ldrh	r1, [r5, #0]
1000efe6:	9300      	str	r3, [sp, #0]
1000efe8:	230e      	movs	r3, #14
1000efea:	aa06      	add	r2, sp, #24
1000efec:	189b      	adds	r3, r3, r2
1000efee:	9301      	str	r3, [sp, #4]
1000eff0:	4cb5      	ldr	r4, [pc, #724]	; (1000f2c8 <internal_at_ble_service_define+0x374>)
1000eff2:	1c30      	adds	r0, r6, #0
1000eff4:	2201      	movs	r2, #1
1000eff6:	2302      	movs	r3, #2
1000eff8:	47a0      	blx	r4
1000effa:	3516      	adds	r5, #22
1000effc:	1e04      	subs	r4, r0, #0
1000effe:	d0ee      	beq.n	1000efde <internal_at_ble_service_define+0x8a>
1000f000:	e183      	b.n	1000f30a <internal_at_ble_service_define+0x3b6>
1000f002:	9f10      	ldr	r7, [sp, #64]	; 0x40
1000f004:	2300      	movs	r3, #0
1000f006:	3714      	adds	r7, #20
1000f008:	1c3d      	adds	r5, r7, #0
1000f00a:	9302      	str	r3, [sp, #8]
1000f00c:	9b02      	ldr	r3, [sp, #8]
1000f00e:	9a03      	ldr	r2, [sp, #12]
1000f010:	4293      	cmp	r3, r2
1000f012:	db00      	blt.n	1000f016 <internal_at_ble_service_define+0xc2>
1000f014:	e0bf      	b.n	1000f196 <internal_at_ble_service_define+0x242>
1000f016:	4bad      	ldr	r3, [pc, #692]	; (1000f2cc <internal_at_ble_service_define+0x378>)
1000f018:	aa06      	add	r2, sp, #24
1000f01a:	9300      	str	r3, [sp, #0]
1000f01c:	230e      	movs	r3, #14
1000f01e:	189b      	adds	r3, r3, r2
1000f020:	9301      	str	r3, [sp, #4]
1000f022:	4ca9      	ldr	r4, [pc, #676]	; (1000f2c8 <internal_at_ble_service_define+0x374>)
1000f024:	1c30      	adds	r0, r6, #0
1000f026:	2104      	movs	r1, #4
1000f028:	2201      	movs	r2, #1
1000f02a:	2302      	movs	r3, #2
1000f02c:	47a0      	blx	r4
1000f02e:	1e04      	subs	r4, r0, #0
1000f030:	d000      	beq.n	1000f034 <internal_at_ble_service_define+0xe0>
1000f032:	e16a      	b.n	1000f30a <internal_at_ble_service_define+0x3b6>
1000f034:	1c2b      	adds	r3, r5, #0
1000f036:	3b12      	subs	r3, #18
1000f038:	7b2c      	ldrb	r4, [r5, #12]
1000f03a:	781b      	ldrb	r3, [r3, #0]
1000f03c:	1c21      	adds	r1, r4, #0
1000f03e:	1c1a      	adds	r2, r3, #0
1000f040:	9304      	str	r3, [sp, #16]
1000f042:	8828      	ldrh	r0, [r5, #0]
1000f044:	4ba2      	ldr	r3, [pc, #648]	; (1000f2d0 <internal_at_ble_service_define+0x37c>)
1000f046:	4798      	blx	r3
1000f048:	2303      	movs	r3, #3
1000f04a:	4023      	ands	r3, r4
1000f04c:	3b03      	subs	r3, #3
1000f04e:	4259      	negs	r1, r3
1000f050:	4159      	adcs	r1, r3
1000f052:	2301      	movs	r3, #1
1000f054:	08a4      	lsrs	r4, r4, #2
1000f056:	401c      	ands	r4, r3
1000f058:	430c      	orrs	r4, r1
1000f05a:	896b      	ldrh	r3, [r5, #10]
1000f05c:	03e4      	lsls	r4, r4, #15
1000f05e:	431c      	orrs	r4, r3
1000f060:	9007      	str	r0, [sp, #28]
1000f062:	4b96      	ldr	r3, [pc, #600]	; (1000f2bc <internal_at_ble_service_define+0x368>)
1000f064:	9804      	ldr	r0, [sp, #16]
1000f066:	4798      	blx	r3
1000f068:	1c2a      	adds	r2, r5, #0
1000f06a:	3a11      	subs	r2, #17
1000f06c:	9200      	str	r2, [sp, #0]
1000f06e:	3a03      	subs	r2, #3
1000f070:	1c03      	adds	r3, r0, #0
1000f072:	9201      	str	r2, [sp, #4]
1000f074:	1c21      	adds	r1, r4, #0
1000f076:	1c30      	adds	r0, r6, #0
1000f078:	4c93      	ldr	r4, [pc, #588]	; (1000f2c8 <internal_at_ble_service_define+0x374>)
1000f07a:	9a07      	ldr	r2, [sp, #28]
1000f07c:	47a0      	blx	r4
1000f07e:	1e04      	subs	r4, r0, #0
1000f080:	d000      	beq.n	1000f084 <internal_at_ble_service_define+0x130>
1000f082:	e142      	b.n	1000f30a <internal_at_ble_service_define+0x3b6>
1000f084:	22c0      	movs	r2, #192	; 0xc0
1000f086:	882b      	ldrh	r3, [r5, #0]
1000f088:	0052      	lsls	r2, r2, #1
1000f08a:	4213      	tst	r3, r2
1000f08c:	d104      	bne.n	1000f098 <internal_at_ble_service_define+0x144>
1000f08e:	8aab      	ldrh	r3, [r5, #20]
1000f090:	9304      	str	r3, [sp, #16]
1000f092:	2b00      	cmp	r3, #0
1000f094:	d116      	bne.n	1000f0c4 <internal_at_ble_service_define+0x170>
1000f096:	e03a      	b.n	1000f10e <internal_at_ble_service_define+0x1ba>
1000f098:	2201      	movs	r2, #1
1000f09a:	09d9      	lsrs	r1, r3, #7
1000f09c:	4011      	ands	r1, r2
1000f09e:	05db      	lsls	r3, r3, #23
1000f0a0:	d501      	bpl.n	1000f0a6 <internal_at_ble_service_define+0x152>
1000f0a2:	2302      	movs	r3, #2
1000f0a4:	4319      	orrs	r1, r3
1000f0a6:	4b8b      	ldr	r3, [pc, #556]	; (1000f2d4 <internal_at_ble_service_define+0x380>)
1000f0a8:	aa06      	add	r2, sp, #24
1000f0aa:	9300      	str	r3, [sp, #0]
1000f0ac:	230e      	movs	r3, #14
1000f0ae:	189b      	adds	r3, r3, r2
1000f0b0:	9301      	str	r3, [sp, #4]
1000f0b2:	4c85      	ldr	r4, [pc, #532]	; (1000f2c8 <internal_at_ble_service_define+0x374>)
1000f0b4:	0209      	lsls	r1, r1, #8
1000f0b6:	1c30      	adds	r0, r6, #0
1000f0b8:	2201      	movs	r2, #1
1000f0ba:	2302      	movs	r3, #2
1000f0bc:	47a0      	blx	r4
1000f0be:	1e04      	subs	r4, r0, #0
1000f0c0:	d0e5      	beq.n	1000f08e <internal_at_ble_service_define+0x13a>
1000f0c2:	e122      	b.n	1000f30a <internal_at_ble_service_define+0x3b6>
1000f0c4:	2380      	movs	r3, #128	; 0x80
1000f0c6:	882a      	ldrh	r2, [r5, #0]
1000f0c8:	7f2c      	ldrb	r4, [r5, #28]
1000f0ca:	005b      	lsls	r3, r3, #1
1000f0cc:	401a      	ands	r2, r3
1000f0ce:	1c20      	adds	r0, r4, #0
1000f0d0:	2101      	movs	r1, #1
1000f0d2:	2a00      	cmp	r2, #0
1000f0d4:	d000      	beq.n	1000f0d8 <internal_at_ble_service_define+0x184>
1000f0d6:	1c0a      	adds	r2, r1, #0
1000f0d8:	4b7f      	ldr	r3, [pc, #508]	; (1000f2d8 <internal_at_ble_service_define+0x384>)
1000f0da:	4798      	blx	r3
1000f0dc:	2203      	movs	r2, #3
1000f0de:	4022      	ands	r2, r4
1000f0e0:	3a03      	subs	r2, #3
1000f0e2:	4251      	negs	r1, r2
1000f0e4:	4151      	adcs	r1, r2
1000f0e6:	4b7d      	ldr	r3, [pc, #500]	; (1000f2dc <internal_at_ble_service_define+0x388>)
1000f0e8:	1c0a      	adds	r2, r1, #0
1000f0ea:	9300      	str	r3, [sp, #0]
1000f0ec:	1c2b      	adds	r3, r5, #0
1000f0ee:	0764      	lsls	r4, r4, #29
1000f0f0:	0fe4      	lsrs	r4, r4, #31
1000f0f2:	4322      	orrs	r2, r4
1000f0f4:	03d2      	lsls	r2, r2, #15
1000f0f6:	4310      	orrs	r0, r2
1000f0f8:	3320      	adds	r3, #32
1000f0fa:	b282      	uxth	r2, r0
1000f0fc:	9301      	str	r3, [sp, #4]
1000f0fe:	4c72      	ldr	r4, [pc, #456]	; (1000f2c8 <internal_at_ble_service_define+0x374>)
1000f100:	1c30      	adds	r0, r6, #0
1000f102:	9904      	ldr	r1, [sp, #16]
1000f104:	2302      	movs	r3, #2
1000f106:	47a0      	blx	r4
1000f108:	1e04      	subs	r4, r0, #0
1000f10a:	d000      	beq.n	1000f10e <internal_at_ble_service_define+0x1ba>
1000f10c:	e0fd      	b.n	1000f30a <internal_at_ble_service_define+0x3b6>
1000f10e:	2101      	movs	r1, #1
1000f110:	882b      	ldrh	r3, [r5, #0]
1000f112:	420b      	tst	r3, r1
1000f114:	d011      	beq.n	1000f13a <internal_at_ble_service_define+0x1e6>
1000f116:	7fa8      	ldrb	r0, [r5, #30]
1000f118:	4b6f      	ldr	r3, [pc, #444]	; (1000f2d8 <internal_at_ble_service_define+0x384>)
1000f11a:	2200      	movs	r2, #0
1000f11c:	4798      	blx	r3
1000f11e:	4b70      	ldr	r3, [pc, #448]	; (1000f2e0 <internal_at_ble_service_define+0x38c>)
1000f120:	1c02      	adds	r2, r0, #0
1000f122:	9300      	str	r3, [sp, #0]
1000f124:	1c2b      	adds	r3, r5, #0
1000f126:	3324      	adds	r3, #36	; 0x24
1000f128:	9301      	str	r3, [sp, #4]
1000f12a:	4c67      	ldr	r4, [pc, #412]	; (1000f2c8 <internal_at_ble_service_define+0x374>)
1000f12c:	1c30      	adds	r0, r6, #0
1000f12e:	496d      	ldr	r1, [pc, #436]	; (1000f2e4 <internal_at_ble_service_define+0x390>)
1000f130:	2302      	movs	r3, #2
1000f132:	47a0      	blx	r4
1000f134:	1e04      	subs	r4, r0, #0
1000f136:	d000      	beq.n	1000f13a <internal_at_ble_service_define+0x1e6>
1000f138:	e0e7      	b.n	1000f30a <internal_at_ble_service_define+0x3b6>
1000f13a:	2330      	movs	r3, #48	; 0x30
1000f13c:	882a      	ldrh	r2, [r5, #0]
1000f13e:	421a      	tst	r2, r3
1000f140:	d012      	beq.n	1000f168 <internal_at_ble_service_define+0x214>
1000f142:	2101      	movs	r1, #1
1000f144:	7f68      	ldrb	r0, [r5, #29]
1000f146:	1c0a      	adds	r2, r1, #0
1000f148:	4b63      	ldr	r3, [pc, #396]	; (1000f2d8 <internal_at_ble_service_define+0x384>)
1000f14a:	4798      	blx	r3
1000f14c:	4b66      	ldr	r3, [pc, #408]	; (1000f2e8 <internal_at_ble_service_define+0x394>)
1000f14e:	1c02      	adds	r2, r0, #0
1000f150:	9300      	str	r3, [sp, #0]
1000f152:	1c2b      	adds	r3, r5, #0
1000f154:	3322      	adds	r3, #34	; 0x22
1000f156:	9301      	str	r3, [sp, #4]
1000f158:	4c5b      	ldr	r4, [pc, #364]	; (1000f2c8 <internal_at_ble_service_define+0x374>)
1000f15a:	1c30      	adds	r0, r6, #0
1000f15c:	4961      	ldr	r1, [pc, #388]	; (1000f2e4 <internal_at_ble_service_define+0x390>)
1000f15e:	2302      	movs	r3, #2
1000f160:	47a0      	blx	r4
1000f162:	1e04      	subs	r4, r0, #0
1000f164:	d000      	beq.n	1000f168 <internal_at_ble_service_define+0x214>
1000f166:	e0d0      	b.n	1000f30a <internal_at_ble_service_define+0x3b6>
1000f168:	69ab      	ldr	r3, [r5, #24]
1000f16a:	2b00      	cmp	r3, #0
1000f16c:	d00e      	beq.n	1000f18c <internal_at_ble_service_define+0x238>
1000f16e:	4b5f      	ldr	r3, [pc, #380]	; (1000f2ec <internal_at_ble_service_define+0x398>)
1000f170:	aa06      	add	r2, sp, #24
1000f172:	9300      	str	r3, [sp, #0]
1000f174:	230e      	movs	r3, #14
1000f176:	189b      	adds	r3, r3, r2
1000f178:	9301      	str	r3, [sp, #4]
1000f17a:	4c53      	ldr	r4, [pc, #332]	; (1000f2c8 <internal_at_ble_service_define+0x374>)
1000f17c:	1c30      	adds	r0, r6, #0
1000f17e:	2107      	movs	r1, #7
1000f180:	2201      	movs	r2, #1
1000f182:	2302      	movs	r3, #2
1000f184:	47a0      	blx	r4
1000f186:	1e04      	subs	r4, r0, #0
1000f188:	d000      	beq.n	1000f18c <internal_at_ble_service_define+0x238>
1000f18a:	e0be      	b.n	1000f30a <internal_at_ble_service_define+0x3b6>
1000f18c:	9b02      	ldr	r3, [sp, #8]
1000f18e:	353c      	adds	r5, #60	; 0x3c
1000f190:	3301      	adds	r3, #1
1000f192:	9302      	str	r3, [sp, #8]
1000f194:	e73a      	b.n	1000f00c <internal_at_ble_service_define+0xb8>
1000f196:	1c30      	adds	r0, r6, #0
1000f198:	4b55      	ldr	r3, [pc, #340]	; (1000f2f0 <internal_at_ble_service_define+0x39c>)
1000f19a:	4798      	blx	r3
1000f19c:	1e04      	subs	r4, r0, #0
1000f19e:	d000      	beq.n	1000f1a2 <internal_at_ble_service_define+0x24e>
1000f1a0:	e0b3      	b.n	1000f30a <internal_at_ble_service_define+0x3b6>
1000f1a2:	8833      	ldrh	r3, [r6, #0]
1000f1a4:	9a05      	ldr	r2, [sp, #20]
1000f1a6:	8013      	strh	r3, [r2, #0]
1000f1a8:	8836      	ldrh	r6, [r6, #0]
1000f1aa:	9b06      	ldr	r3, [sp, #24]
1000f1ac:	9a03      	ldr	r2, [sp, #12]
1000f1ae:	18f6      	adds	r6, r6, r3
1000f1b0:	b2b3      	uxth	r3, r6
1000f1b2:	9302      	str	r3, [sp, #8]
1000f1b4:	233c      	movs	r3, #60	; 0x3c
1000f1b6:	4353      	muls	r3, r2
1000f1b8:	9a10      	ldr	r2, [sp, #64]	; 0x40
1000f1ba:	3314      	adds	r3, #20
1000f1bc:	18d3      	adds	r3, r2, r3
1000f1be:	9304      	str	r3, [sp, #16]
1000f1c0:	9b04      	ldr	r3, [sp, #16]
1000f1c2:	429f      	cmp	r7, r3
1000f1c4:	d100      	bne.n	1000f1c8 <internal_at_ble_service_define+0x274>
1000f1c6:	e0a0      	b.n	1000f30a <internal_at_ble_service_define+0x3b6>
1000f1c8:	9b02      	ldr	r3, [sp, #8]
1000f1ca:	1c9d      	adds	r5, r3, #2
1000f1cc:	1c3b      	adds	r3, r7, #0
1000f1ce:	b2ad      	uxth	r5, r5
1000f1d0:	3b14      	subs	r3, #20
1000f1d2:	801d      	strh	r5, [r3, #0]
1000f1d4:	9303      	str	r3, [sp, #12]
1000f1d6:	893b      	ldrh	r3, [r7, #8]
1000f1d8:	2b00      	cmp	r3, #0
1000f1da:	d108      	bne.n	1000f1ee <internal_at_ble_service_define+0x29a>
1000f1dc:	23c0      	movs	r3, #192	; 0xc0
1000f1de:	883a      	ldrh	r2, [r7, #0]
1000f1e0:	005b      	lsls	r3, r3, #1
1000f1e2:	421a      	tst	r2, r3
1000f1e4:	d026      	beq.n	1000f234 <internal_at_ble_service_define+0x2e0>
1000f1e6:	9e02      	ldr	r6, [sp, #8]
1000f1e8:	3603      	adds	r6, #3
1000f1ea:	b2b5      	uxth	r5, r6
1000f1ec:	e022      	b.n	1000f234 <internal_at_ble_service_define+0x2e0>
1000f1ee:	2103      	movs	r1, #3
1000f1f0:	7b3b      	ldrb	r3, [r7, #12]
1000f1f2:	4019      	ands	r1, r3
1000f1f4:	3903      	subs	r1, #3
1000f1f6:	424a      	negs	r2, r1
1000f1f8:	414a      	adcs	r2, r1
1000f1fa:	0759      	lsls	r1, r3, #29
1000f1fc:	0fc9      	lsrs	r1, r1, #31
1000f1fe:	4311      	orrs	r1, r2
1000f200:	03c9      	lsls	r1, r1, #15
1000f202:	897a      	ldrh	r2, [r7, #10]
1000f204:	2900      	cmp	r1, #0
1000f206:	d007      	beq.n	1000f218 <internal_at_ble_service_define+0x2c4>
1000f208:	6879      	ldr	r1, [r7, #4]
1000f20a:	2900      	cmp	r1, #0
1000f20c:	d100      	bne.n	1000f210 <internal_at_ble_service_define+0x2bc>
1000f20e:	4939      	ldr	r1, [pc, #228]	; (1000f2f4 <internal_at_ble_service_define+0x3a0>)
1000f210:	1c28      	adds	r0, r5, #0
1000f212:	4e39      	ldr	r6, [pc, #228]	; (1000f2f8 <internal_at_ble_service_define+0x3a4>)
1000f214:	47b0      	blx	r6
1000f216:	e00a      	b.n	1000f22e <internal_at_ble_service_define+0x2da>
1000f218:	1c28      	adds	r0, r5, #0
1000f21a:	4e37      	ldr	r6, [pc, #220]	; (1000f2f8 <internal_at_ble_service_define+0x3a4>)
1000f21c:	47b0      	blx	r6
1000f21e:	2800      	cmp	r0, #0
1000f220:	d172      	bne.n	1000f308 <internal_at_ble_service_define+0x3b4>
1000f222:	9b03      	ldr	r3, [sp, #12]
1000f224:	8939      	ldrh	r1, [r7, #8]
1000f226:	8818      	ldrh	r0, [r3, #0]
1000f228:	687a      	ldr	r2, [r7, #4]
1000f22a:	4b34      	ldr	r3, [pc, #208]	; (1000f2fc <internal_at_ble_service_define+0x3a8>)
1000f22c:	4798      	blx	r3
1000f22e:	2800      	cmp	r0, #0
1000f230:	d0d4      	beq.n	1000f1dc <internal_at_ble_service_define+0x288>
1000f232:	e069      	b.n	1000f308 <internal_at_ble_service_define+0x3b4>
1000f234:	8abb      	ldrh	r3, [r7, #20]
1000f236:	2b00      	cmp	r3, #0
1000f238:	d00a      	beq.n	1000f250 <internal_at_ble_service_define+0x2fc>
1000f23a:	3501      	adds	r5, #1
1000f23c:	b2ad      	uxth	r5, r5
1000f23e:	843d      	strh	r5, [r7, #32]
1000f240:	7f39      	ldrb	r1, [r7, #28]
1000f242:	8afb      	ldrh	r3, [r7, #22]
1000f244:	1c28      	adds	r0, r5, #0
1000f246:	693a      	ldr	r2, [r7, #16]
1000f248:	4e2d      	ldr	r6, [pc, #180]	; (1000f300 <internal_at_ble_service_define+0x3ac>)
1000f24a:	47b0      	blx	r6
1000f24c:	2800      	cmp	r0, #0
1000f24e:	d15b      	bne.n	1000f308 <internal_at_ble_service_define+0x3b4>
1000f250:	883b      	ldrh	r3, [r7, #0]
1000f252:	07db      	lsls	r3, r3, #31
1000f254:	d50d      	bpl.n	1000f272 <internal_at_ble_service_define+0x31e>
1000f256:	2200      	movs	r2, #0
1000f258:	3501      	adds	r5, #1
1000f25a:	b2ad      	uxth	r5, r5
1000f25c:	a909      	add	r1, sp, #36	; 0x24
1000f25e:	84bd      	strh	r5, [r7, #36]	; 0x24
1000f260:	7fbb      	ldrb	r3, [r7, #30]
1000f262:	1c28      	adds	r0, r5, #0
1000f264:	700a      	strb	r2, [r1, #0]
1000f266:	704a      	strb	r2, [r1, #1]
1000f268:	4e23      	ldr	r6, [pc, #140]	; (1000f2f8 <internal_at_ble_service_define+0x3a4>)
1000f26a:	3202      	adds	r2, #2
1000f26c:	47b0      	blx	r6
1000f26e:	2800      	cmp	r0, #0
1000f270:	d14a      	bne.n	1000f308 <internal_at_ble_service_define+0x3b4>
1000f272:	2330      	movs	r3, #48	; 0x30
1000f274:	883a      	ldrh	r2, [r7, #0]
1000f276:	421a      	tst	r2, r3
1000f278:	d00d      	beq.n	1000f296 <internal_at_ble_service_define+0x342>
1000f27a:	2200      	movs	r2, #0
1000f27c:	3501      	adds	r5, #1
1000f27e:	b2ad      	uxth	r5, r5
1000f280:	a909      	add	r1, sp, #36	; 0x24
1000f282:	847d      	strh	r5, [r7, #34]	; 0x22
1000f284:	7f7b      	ldrb	r3, [r7, #29]
1000f286:	1c28      	adds	r0, r5, #0
1000f288:	700a      	strb	r2, [r1, #0]
1000f28a:	704a      	strb	r2, [r1, #1]
1000f28c:	4e1a      	ldr	r6, [pc, #104]	; (1000f2f8 <internal_at_ble_service_define+0x3a4>)
1000f28e:	3202      	adds	r2, #2
1000f290:	47b0      	blx	r6
1000f292:	2800      	cmp	r0, #0
1000f294:	d138      	bne.n	1000f308 <internal_at_ble_service_define+0x3b4>
1000f296:	69b9      	ldr	r1, [r7, #24]
1000f298:	2900      	cmp	r1, #0
1000f29a:	d006      	beq.n	1000f2aa <internal_at_ble_service_define+0x356>
1000f29c:	3501      	adds	r5, #1
1000f29e:	b2ad      	uxth	r5, r5
1000f2a0:	1c28      	adds	r0, r5, #0
1000f2a2:	4b18      	ldr	r3, [pc, #96]	; (1000f304 <internal_at_ble_service_define+0x3b0>)
1000f2a4:	4798      	blx	r3
1000f2a6:	2800      	cmp	r0, #0
1000f2a8:	d12e      	bne.n	1000f308 <internal_at_ble_service_define+0x3b4>
1000f2aa:	373c      	adds	r7, #60	; 0x3c
1000f2ac:	9502      	str	r5, [sp, #8]
1000f2ae:	e787      	b.n	1000f1c0 <internal_at_ble_service_define+0x26c>
1000f2b0:	10016e30 	.word	0x10016e30
1000f2b4:	10017c90 	.word	0x10017c90
1000f2b8:	10012571 	.word	0x10012571
1000f2bc:	1000ec89 	.word	0x1000ec89
1000f2c0:	1001255f 	.word	0x1001255f
1000f2c4:	10015257 	.word	0x10015257
1000f2c8:	10011029 	.word	0x10011029
1000f2cc:	10015259 	.word	0x10015259
1000f2d0:	1000ed55 	.word	0x1000ed55
1000f2d4:	10015255 	.word	0x10015255
1000f2d8:	1000ecfd 	.word	0x1000ecfd
1000f2dc:	10015251 	.word	0x10015251
1000f2e0:	10015253 	.word	0x10015253
1000f2e4:	00008002 	.word	0x00008002
1000f2e8:	1001524d 	.word	0x1001524d
1000f2ec:	1001524f 	.word	0x1001524f
1000f2f0:	10010f1d 	.word	0x10010f1d
1000f2f4:	10016e1c 	.word	0x10016e1c
1000f2f8:	1000ee1d 	.word	0x1000ee1d
1000f2fc:	10011099 	.word	0x10011099
1000f300:	1000eed5 	.word	0x1000eed5
1000f304:	1000edf1 	.word	0x1000edf1
1000f308:	1c04      	adds	r4, r0, #0
1000f30a:	1c20      	adds	r0, r4, #0
1000f30c:	b00b      	add	sp, #44	; 0x2c
1000f30e:	bdf0      	pop	{r4, r5, r6, r7, pc}

1000f310 <initi_gatt_server_module>:
1000f310:	2300      	movs	r3, #0
1000f312:	4a07      	ldr	r2, [pc, #28]	; (1000f330 <initi_gatt_server_module+0x20>)
1000f314:	7013      	strb	r3, [r2, #0]
1000f316:	4a07      	ldr	r2, [pc, #28]	; (1000f334 <initi_gatt_server_module+0x24>)
1000f318:	6013      	str	r3, [r2, #0]
1000f31a:	4a07      	ldr	r2, [pc, #28]	; (1000f338 <initi_gatt_server_module+0x28>)
1000f31c:	6013      	str	r3, [r2, #0]
1000f31e:	4a07      	ldr	r2, [pc, #28]	; (1000f33c <initi_gatt_server_module+0x2c>)
1000f320:	6013      	str	r3, [r2, #0]
1000f322:	4a07      	ldr	r2, [pc, #28]	; (1000f340 <initi_gatt_server_module+0x30>)
1000f324:	6013      	str	r3, [r2, #0]
1000f326:	4a07      	ldr	r2, [pc, #28]	; (1000f344 <initi_gatt_server_module+0x34>)
1000f328:	6013      	str	r3, [r2, #0]
1000f32a:	4a07      	ldr	r2, [pc, #28]	; (1000f348 <initi_gatt_server_module+0x38>)
1000f32c:	6013      	str	r3, [r2, #0]
1000f32e:	4770      	bx	lr
1000f330:	10016e1c 	.word	0x10016e1c
1000f334:	10016e2c 	.word	0x10016e2c
1000f338:	10016e28 	.word	0x10016e28
1000f33c:	10016e18 	.word	0x10016e18
1000f340:	10016e24 	.word	0x10016e24
1000f344:	10016e20 	.word	0x10016e20
1000f348:	10016e30 	.word	0x10016e30

1000f34c <db_init>:
1000f34c:	4b0a      	ldr	r3, [pc, #40]	; (1000f378 <db_init+0x2c>)
1000f34e:	4a0b      	ldr	r2, [pc, #44]	; (1000f37c <db_init+0x30>)
1000f350:	6018      	str	r0, [r3, #0]
1000f352:	084b      	lsrs	r3, r1, #1
1000f354:	6013      	str	r3, [r2, #0]
1000f356:	4a0a      	ldr	r2, [pc, #40]	; (1000f380 <db_init+0x34>)
1000f358:	18c3      	adds	r3, r0, r3
1000f35a:	6013      	str	r3, [r2, #0]
1000f35c:	4a09      	ldr	r2, [pc, #36]	; (1000f384 <db_init+0x38>)
1000f35e:	1841      	adds	r1, r0, r1
1000f360:	6013      	str	r3, [r2, #0]
1000f362:	2303      	movs	r3, #3
1000f364:	2200      	movs	r2, #0
1000f366:	3103      	adds	r1, #3
1000f368:	4399      	bics	r1, r3
1000f36a:	4b07      	ldr	r3, [pc, #28]	; (1000f388 <db_init+0x3c>)
1000f36c:	3904      	subs	r1, #4
1000f36e:	6019      	str	r1, [r3, #0]
1000f370:	4b06      	ldr	r3, [pc, #24]	; (1000f38c <db_init+0x40>)
1000f372:	601a      	str	r2, [r3, #0]
1000f374:	4770      	bx	lr
1000f376:	46c0      	nop			; (mov r8, r8)
1000f378:	10016e30 	.word	0x10016e30
1000f37c:	10016e2c 	.word	0x10016e2c
1000f380:	10016e18 	.word	0x10016e18
1000f384:	10016e24 	.word	0x10016e24
1000f388:	10016e20 	.word	0x10016e20
1000f38c:	10016e28 	.word	0x10016e28

1000f390 <at_ble_primary_service_define>:
1000f390:	b530      	push	{r4, r5, lr}
1000f392:	b085      	sub	sp, #20
1000f394:	ac08      	add	r4, sp, #32
1000f396:	cc20      	ldmia	r4!, {r5}
1000f398:	8824      	ldrh	r4, [r4, #0]
1000f39a:	9500      	str	r5, [sp, #0]
1000f39c:	9401      	str	r4, [sp, #4]
1000f39e:	2401      	movs	r4, #1
1000f3a0:	9402      	str	r4, [sp, #8]
1000f3a2:	4c02      	ldr	r4, [pc, #8]	; (1000f3ac <at_ble_primary_service_define+0x1c>)
1000f3a4:	47a0      	blx	r4
1000f3a6:	b005      	add	sp, #20
1000f3a8:	bd30      	pop	{r4, r5, pc}
1000f3aa:	46c0      	nop			; (mov r8, r8)
1000f3ac:	1000ef55 	.word	0x1000ef55

1000f3b0 <at_ble_characteristic_value_set>:
1000f3b0:	b570      	push	{r4, r5, r6, lr}
1000f3b2:	4b0b      	ldr	r3, [pc, #44]	; (1000f3e0 <at_ble_characteristic_value_set+0x30>)
1000f3b4:	1c06      	adds	r6, r0, #0
1000f3b6:	1c0c      	adds	r4, r1, #0
1000f3b8:	1c15      	adds	r5, r2, #0
1000f3ba:	4798      	blx	r3
1000f3bc:	2800      	cmp	r0, #0
1000f3be:	d008      	beq.n	1000f3d2 <at_ble_characteristic_value_set+0x22>
1000f3c0:	6880      	ldr	r0, [r0, #8]
1000f3c2:	2800      	cmp	r0, #0
1000f3c4:	d005      	beq.n	1000f3d2 <at_ble_characteristic_value_set+0x22>
1000f3c6:	1c21      	adds	r1, r4, #0
1000f3c8:	1c2a      	adds	r2, r5, #0
1000f3ca:	4b06      	ldr	r3, [pc, #24]	; (1000f3e4 <at_ble_characteristic_value_set+0x34>)
1000f3cc:	4798      	blx	r3
1000f3ce:	2000      	movs	r0, #0
1000f3d0:	e004      	b.n	1000f3dc <at_ble_characteristic_value_set+0x2c>
1000f3d2:	1c30      	adds	r0, r6, #0
1000f3d4:	1c29      	adds	r1, r5, #0
1000f3d6:	1c22      	adds	r2, r4, #0
1000f3d8:	4b03      	ldr	r3, [pc, #12]	; (1000f3e8 <at_ble_characteristic_value_set+0x38>)
1000f3da:	4798      	blx	r3
1000f3dc:	bd70      	pop	{r4, r5, r6, pc}
1000f3de:	46c0      	nop			; (mov r8, r8)
1000f3e0:	1000ecbd 	.word	0x1000ecbd
1000f3e4:	1001255f 	.word	0x1001255f
1000f3e8:	10011099 	.word	0x10011099

1000f3ec <at_ble_characteristic_value_get>:
1000f3ec:	b570      	push	{r4, r5, r6, lr}
1000f3ee:	4b0c      	ldr	r3, [pc, #48]	; (1000f420 <at_ble_characteristic_value_get+0x34>)
1000f3f0:	1c06      	adds	r6, r0, #0
1000f3f2:	1c0c      	adds	r4, r1, #0
1000f3f4:	1c15      	adds	r5, r2, #0
1000f3f6:	4798      	blx	r3
1000f3f8:	2800      	cmp	r0, #0
1000f3fa:	d00b      	beq.n	1000f414 <at_ble_characteristic_value_get+0x28>
1000f3fc:	6883      	ldr	r3, [r0, #8]
1000f3fe:	2b00      	cmp	r3, #0
1000f400:	d008      	beq.n	1000f414 <at_ble_characteristic_value_get+0x28>
1000f402:	8883      	ldrh	r3, [r0, #4]
1000f404:	802b      	strh	r3, [r5, #0]
1000f406:	8882      	ldrh	r2, [r0, #4]
1000f408:	6881      	ldr	r1, [r0, #8]
1000f40a:	4b06      	ldr	r3, [pc, #24]	; (1000f424 <at_ble_characteristic_value_get+0x38>)
1000f40c:	1c20      	adds	r0, r4, #0
1000f40e:	4798      	blx	r3
1000f410:	2000      	movs	r0, #0
1000f412:	e004      	b.n	1000f41e <at_ble_characteristic_value_get+0x32>
1000f414:	1c30      	adds	r0, r6, #0
1000f416:	1c29      	adds	r1, r5, #0
1000f418:	1c22      	adds	r2, r4, #0
1000f41a:	4b03      	ldr	r3, [pc, #12]	; (1000f428 <at_ble_characteristic_value_get+0x3c>)
1000f41c:	4798      	blx	r3
1000f41e:	bd70      	pop	{r4, r5, r6, pc}
1000f420:	1000ecbd 	.word	0x1000ecbd
1000f424:	1001255f 	.word	0x1001255f
1000f428:	10011125 	.word	0x10011125

1000f42c <at_ble_write_authorize_reply>:
1000f42c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f42e:	b085      	sub	sp, #20
1000f430:	1c04      	adds	r4, r0, #0
1000f432:	9101      	str	r1, [sp, #4]
1000f434:	2900      	cmp	r1, #0
1000f436:	d128      	bne.n	1000f48a <at_ble_write_authorize_reply+0x5e>
1000f438:	8843      	ldrh	r3, [r0, #2]
1000f43a:	1c27      	adds	r7, r4, #0
1000f43c:	9300      	str	r3, [sp, #0]
1000f43e:	1c18      	adds	r0, r3, #0
1000f440:	4b16      	ldr	r3, [pc, #88]	; (1000f49c <at_ble_write_authorize_reply+0x70>)
1000f442:	4798      	blx	r3
1000f444:	3708      	adds	r7, #8
1000f446:	2800      	cmp	r0, #0
1000f448:	d009      	beq.n	1000f45e <at_ble_write_authorize_reply+0x32>
1000f44a:	6880      	ldr	r0, [r0, #8]
1000f44c:	2800      	cmp	r0, #0
1000f44e:	d006      	beq.n	1000f45e <at_ble_write_authorize_reply+0x32>
1000f450:	88a3      	ldrh	r3, [r4, #4]
1000f452:	88e2      	ldrh	r2, [r4, #6]
1000f454:	18c0      	adds	r0, r0, r3
1000f456:	1c39      	adds	r1, r7, #0
1000f458:	4b11      	ldr	r3, [pc, #68]	; (1000f4a0 <at_ble_write_authorize_reply+0x74>)
1000f45a:	4798      	blx	r3
1000f45c:	e015      	b.n	1000f48a <at_ble_write_authorize_reply+0x5e>
1000f45e:	ab02      	add	r3, sp, #8
1000f460:	1d9e      	adds	r6, r3, #6
1000f462:	2300      	movs	r3, #0
1000f464:	4d0f      	ldr	r5, [pc, #60]	; (1000f4a4 <at_ble_write_authorize_reply+0x78>)
1000f466:	8033      	strh	r3, [r6, #0]
1000f468:	6829      	ldr	r1, [r5, #0]
1000f46a:	1c32      	adds	r2, r6, #0
1000f46c:	4b0e      	ldr	r3, [pc, #56]	; (1000f4a8 <at_ble_write_authorize_reply+0x7c>)
1000f46e:	9800      	ldr	r0, [sp, #0]
1000f470:	4798      	blx	r3
1000f472:	682b      	ldr	r3, [r5, #0]
1000f474:	88a0      	ldrh	r0, [r4, #4]
1000f476:	88e2      	ldrh	r2, [r4, #6]
1000f478:	1818      	adds	r0, r3, r0
1000f47a:	1c39      	adds	r1, r7, #0
1000f47c:	4b08      	ldr	r3, [pc, #32]	; (1000f4a0 <at_ble_write_authorize_reply+0x74>)
1000f47e:	4798      	blx	r3
1000f480:	8860      	ldrh	r0, [r4, #2]
1000f482:	8832      	ldrh	r2, [r6, #0]
1000f484:	6829      	ldr	r1, [r5, #0]
1000f486:	4b09      	ldr	r3, [pc, #36]	; (1000f4ac <at_ble_write_authorize_reply+0x80>)
1000f488:	4798      	blx	r3
1000f48a:	8860      	ldrh	r0, [r4, #2]
1000f48c:	8821      	ldrh	r1, [r4, #0]
1000f48e:	9a01      	ldr	r2, [sp, #4]
1000f490:	4b07      	ldr	r3, [pc, #28]	; (1000f4b0 <at_ble_write_authorize_reply+0x84>)
1000f492:	4798      	blx	r3
1000f494:	2000      	movs	r0, #0
1000f496:	b005      	add	sp, #20
1000f498:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f49a:	46c0      	nop			; (mov r8, r8)
1000f49c:	1000ecbd 	.word	0x1000ecbd
1000f4a0:	1001255f 	.word	0x1001255f
1000f4a4:	1001539c 	.word	0x1001539c
1000f4a8:	1000f3ed 	.word	0x1000f3ed
1000f4ac:	1000f3b1 	.word	0x1000f3b1
1000f4b0:	10010c15 	.word	0x10010c15

1000f4b4 <gatts_handle_read_req>:
1000f4b4:	b538      	push	{r3, r4, r5, lr}
1000f4b6:	1c0c      	adds	r4, r1, #0
1000f4b8:	4b07      	ldr	r3, [pc, #28]	; (1000f4d8 <gatts_handle_read_req+0x24>)
1000f4ba:	4798      	blx	r3
1000f4bc:	8865      	ldrh	r5, [r4, #2]
1000f4be:	4b07      	ldr	r3, [pc, #28]	; (1000f4dc <gatts_handle_read_req+0x28>)
1000f4c0:	1c28      	adds	r0, r5, #0
1000f4c2:	4798      	blx	r3
1000f4c4:	7883      	ldrb	r3, [r0, #2]
1000f4c6:	2026      	movs	r0, #38	; 0x26
1000f4c8:	07db      	lsls	r3, r3, #31
1000f4ca:	d404      	bmi.n	1000f4d6 <gatts_handle_read_req+0x22>
1000f4cc:	8820      	ldrh	r0, [r4, #0]
1000f4ce:	1c29      	adds	r1, r5, #0
1000f4d0:	4b03      	ldr	r3, [pc, #12]	; (1000f4e0 <gatts_handle_read_req+0x2c>)
1000f4d2:	4798      	blx	r3
1000f4d4:	203b      	movs	r0, #59	; 0x3b
1000f4d6:	bd38      	pop	{r3, r4, r5, pc}
1000f4d8:	10010b59 	.word	0x10010b59
1000f4dc:	1000ecbd 	.word	0x1000ecbd
1000f4e0:	1000ef25 	.word	0x1000ef25

1000f4e4 <gatts_handle_att_info_req>:
1000f4e4:	b538      	push	{r3, r4, r5, lr}
1000f4e6:	1c0d      	adds	r5, r1, #0
1000f4e8:	4b0a      	ldr	r3, [pc, #40]	; (1000f514 <gatts_handle_att_info_req+0x30>)
1000f4ea:	1c14      	adds	r4, r2, #0
1000f4ec:	4798      	blx	r3
1000f4ee:	882d      	ldrh	r5, [r5, #0]
1000f4f0:	4b09      	ldr	r3, [pc, #36]	; (1000f518 <gatts_handle_att_info_req+0x34>)
1000f4f2:	1c28      	adds	r0, r5, #0
1000f4f4:	4798      	blx	r3
1000f4f6:	0a22      	lsrs	r2, r4, #8
1000f4f8:	1c03      	adds	r3, r0, #0
1000f4fa:	4c08      	ldr	r4, [pc, #32]	; (1000f51c <gatts_handle_att_info_req+0x38>)
1000f4fc:	b291      	uxth	r1, r2
1000f4fe:	2800      	cmp	r0, #0
1000f500:	d003      	beq.n	1000f50a <gatts_handle_att_info_req+0x26>
1000f502:	8882      	ldrh	r2, [r0, #4]
1000f504:	2300      	movs	r3, #0
1000f506:	1c28      	adds	r0, r5, #0
1000f508:	e001      	b.n	1000f50e <gatts_handle_att_info_req+0x2a>
1000f50a:	1c28      	adds	r0, r5, #0
1000f50c:	2201      	movs	r2, #1
1000f50e:	47a0      	blx	r4
1000f510:	203b      	movs	r0, #59	; 0x3b
1000f512:	bd38      	pop	{r3, r4, r5, pc}
1000f514:	10010b9d 	.word	0x10010b9d
1000f518:	1000ecbd 	.word	0x1000ecbd
1000f51c:	10010c59 	.word	0x10010c59

1000f520 <gatts_handle_write_req>:
1000f520:	b510      	push	{r4, lr}
1000f522:	1c14      	adds	r4, r2, #0
1000f524:	4b07      	ldr	r3, [pc, #28]	; (1000f544 <gatts_handle_write_req+0x24>)
1000f526:	4798      	blx	r3
1000f528:	4b07      	ldr	r3, [pc, #28]	; (1000f548 <gatts_handle_write_req+0x28>)
1000f52a:	8860      	ldrh	r0, [r4, #2]
1000f52c:	4798      	blx	r3
1000f52e:	2302      	movs	r3, #2
1000f530:	7881      	ldrb	r1, [r0, #2]
1000f532:	2022      	movs	r0, #34	; 0x22
1000f534:	4019      	ands	r1, r3
1000f536:	d103      	bne.n	1000f540 <gatts_handle_write_req+0x20>
1000f538:	1c20      	adds	r0, r4, #0
1000f53a:	4b04      	ldr	r3, [pc, #16]	; (1000f54c <gatts_handle_write_req+0x2c>)
1000f53c:	4798      	blx	r3
1000f53e:	201f      	movs	r0, #31
1000f540:	bd10      	pop	{r4, pc}
1000f542:	46c0      	nop			; (mov r8, r8)
1000f544:	10010b65 	.word	0x10010b65
1000f548:	1000ecbd 	.word	0x1000ecbd
1000f54c:	1000f42d 	.word	0x1000f42d

1000f550 <init_l2cc_task_module>:
1000f550:	220a      	movs	r2, #10
1000f552:	4b01      	ldr	r3, [pc, #4]	; (1000f558 <init_l2cc_task_module+0x8>)
1000f554:	701a      	strb	r2, [r3, #0]
1000f556:	4770      	bx	lr
1000f558:	10015398 	.word	0x10015398

1000f55c <l2cc_data_send_rsp_handler>:
1000f55c:	b510      	push	{r4, lr}
1000f55e:	7802      	ldrb	r2, [r0, #0]
1000f560:	700a      	strb	r2, [r1, #0]
1000f562:	7883      	ldrb	r3, [r0, #2]
1000f564:	7844      	ldrb	r4, [r0, #1]
1000f566:	021b      	lsls	r3, r3, #8
1000f568:	4323      	orrs	r3, r4
1000f56a:	804b      	strh	r3, [r1, #2]
1000f56c:	7903      	ldrb	r3, [r0, #4]
1000f56e:	78c0      	ldrb	r0, [r0, #3]
1000f570:	021b      	lsls	r3, r3, #8
1000f572:	4303      	orrs	r3, r0
1000f574:	808b      	strh	r3, [r1, #4]
1000f576:	2a00      	cmp	r2, #0
1000f578:	d103      	bne.n	1000f582 <l2cc_data_send_rsp_handler+0x26>
1000f57a:	4a02      	ldr	r2, [pc, #8]	; (1000f584 <l2cc_data_send_rsp_handler+0x28>)
1000f57c:	7813      	ldrb	r3, [r2, #0]
1000f57e:	3301      	adds	r3, #1
1000f580:	7013      	strb	r3, [r2, #0]
1000f582:	bd10      	pop	{r4, pc}
1000f584:	10015398 	.word	0x10015398

1000f588 <l2cc_data_received_handler>:
1000f588:	b508      	push	{r3, lr}
1000f58a:	1c03      	adds	r3, r0, #0
1000f58c:	7842      	ldrb	r2, [r0, #1]
1000f58e:	7800      	ldrb	r0, [r0, #0]
1000f590:	0212      	lsls	r2, r2, #8
1000f592:	4302      	orrs	r2, r0
1000f594:	800a      	strh	r2, [r1, #0]
1000f596:	78da      	ldrb	r2, [r3, #3]
1000f598:	7898      	ldrb	r0, [r3, #2]
1000f59a:	0212      	lsls	r2, r2, #8
1000f59c:	4302      	orrs	r2, r0
1000f59e:	804a      	strh	r2, [r1, #2]
1000f5a0:	795a      	ldrb	r2, [r3, #5]
1000f5a2:	7918      	ldrb	r0, [r3, #4]
1000f5a4:	0212      	lsls	r2, r2, #8
1000f5a6:	4302      	orrs	r2, r0
1000f5a8:	808a      	strh	r2, [r1, #4]
1000f5aa:	1d88      	adds	r0, r1, #6
1000f5ac:	1d99      	adds	r1, r3, #6
1000f5ae:	4b01      	ldr	r3, [pc, #4]	; (1000f5b4 <l2cc_data_received_handler+0x2c>)
1000f5b0:	4798      	blx	r3
1000f5b2:	bd08      	pop	{r3, pc}
1000f5b4:	1001255f 	.word	0x1001255f

1000f5b8 <at_ble_authenticate>:
1000f5b8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f5ba:	1c0c      	adds	r4, r1, #0
1000f5bc:	211f      	movs	r1, #31
1000f5be:	b08b      	sub	sp, #44	; 0x2c
1000f5c0:	9307      	str	r3, [sp, #28]
1000f5c2:	ab02      	add	r3, sp, #8
1000f5c4:	18c9      	adds	r1, r1, r3
1000f5c6:	230f      	movs	r3, #15
1000f5c8:	700b      	strb	r3, [r1, #0]
1000f5ca:	4b40      	ldr	r3, [pc, #256]	; (1000f6cc <at_ble_authenticate+0x114>)
1000f5cc:	1c05      	adds	r5, r0, #0
1000f5ce:	1c16      	adds	r6, r2, #0
1000f5d0:	4798      	blx	r3
1000f5d2:	1c07      	adds	r7, r0, #0
1000f5d4:	2001      	movs	r0, #1
1000f5d6:	2f07      	cmp	r7, #7
1000f5d8:	d875      	bhi.n	1000f6c6 <at_ble_authenticate+0x10e>
1000f5da:	2c00      	cmp	r4, #0
1000f5dc:	d113      	bne.n	1000f606 <at_ble_authenticate+0x4e>
1000f5de:	2312      	movs	r3, #18
1000f5e0:	435f      	muls	r7, r3
1000f5e2:	4b3b      	ldr	r3, [pc, #236]	; (1000f6d0 <at_ble_authenticate+0x118>)
1000f5e4:	5cfb      	ldrb	r3, [r7, r3]
1000f5e6:	4283      	cmp	r3, r0
1000f5e8:	d001      	beq.n	1000f5ee <at_ble_authenticate+0x36>
1000f5ea:	20cf      	movs	r0, #207	; 0xcf
1000f5ec:	e06b      	b.n	1000f6c6 <at_ble_authenticate+0x10e>
1000f5ee:	9504      	str	r5, [sp, #16]
1000f5f0:	9400      	str	r4, [sp, #0]
1000f5f2:	9401      	str	r4, [sp, #4]
1000f5f4:	9402      	str	r4, [sp, #8]
1000f5f6:	9403      	str	r4, [sp, #12]
1000f5f8:	1c20      	adds	r0, r4, #0
1000f5fa:	1c21      	adds	r1, r4, #0
1000f5fc:	1c22      	adds	r2, r4, #0
1000f5fe:	1c23      	adds	r3, r4, #0
1000f600:	4d34      	ldr	r5, [pc, #208]	; (1000f6d4 <at_ble_authenticate+0x11c>)
1000f602:	47a8      	blx	r5
1000f604:	e05e      	b.n	1000f6c4 <at_ble_authenticate+0x10c>
1000f606:	7922      	ldrb	r2, [r4, #4]
1000f608:	2a06      	cmp	r2, #6
1000f60a:	d9ee      	bls.n	1000f5ea <at_ble_authenticate+0x32>
1000f60c:	7963      	ldrb	r3, [r4, #5]
1000f60e:	2b10      	cmp	r3, #16
1000f610:	d8eb      	bhi.n	1000f5ea <at_ble_authenticate+0x32>
1000f612:	429a      	cmp	r2, r3
1000f614:	d8e9      	bhi.n	1000f5ea <at_ble_authenticate+0x32>
1000f616:	7a23      	ldrb	r3, [r4, #8]
1000f618:	2b04      	cmp	r3, #4
1000f61a:	d8e6      	bhi.n	1000f5ea <at_ble_authenticate+0x32>
1000f61c:	79a3      	ldrb	r3, [r4, #6]
1000f61e:	2b07      	cmp	r3, #7
1000f620:	d8e3      	bhi.n	1000f5ea <at_ble_authenticate+0x32>
1000f622:	79e3      	ldrb	r3, [r4, #7]
1000f624:	2b07      	cmp	r3, #7
1000f626:	d8e0      	bhi.n	1000f5ea <at_ble_authenticate+0x32>
1000f628:	78a3      	ldrb	r3, [r4, #2]
1000f62a:	2b00      	cmp	r3, #0
1000f62c:	d006      	beq.n	1000f63c <at_ble_authenticate+0x84>
1000f62e:	2e00      	cmp	r6, #0
1000f630:	d0db      	beq.n	1000f5ea <at_ble_authenticate+0x32>
1000f632:	4829      	ldr	r0, [pc, #164]	; (1000f6d8 <at_ble_authenticate+0x120>)
1000f634:	1c31      	adds	r1, r6, #0
1000f636:	221c      	movs	r2, #28
1000f638:	4b28      	ldr	r3, [pc, #160]	; (1000f6dc <at_ble_authenticate+0x124>)
1000f63a:	4798      	blx	r3
1000f63c:	9b07      	ldr	r3, [sp, #28]
1000f63e:	2b00      	cmp	r3, #0
1000f640:	d005      	beq.n	1000f64e <at_ble_authenticate+0x96>
1000f642:	4827      	ldr	r0, [pc, #156]	; (1000f6e0 <at_ble_authenticate+0x128>)
1000f644:	1c19      	adds	r1, r3, #0
1000f646:	309a      	adds	r0, #154	; 0x9a
1000f648:	2210      	movs	r2, #16
1000f64a:	4b24      	ldr	r3, [pc, #144]	; (1000f6dc <at_ble_authenticate+0x124>)
1000f64c:	4798      	blx	r3
1000f64e:	7863      	ldrb	r3, [r4, #1]
1000f650:	78a2      	ldrb	r2, [r4, #2]
1000f652:	009b      	lsls	r3, r3, #2
1000f654:	4313      	orrs	r3, r2
1000f656:	2212      	movs	r2, #18
1000f658:	4357      	muls	r7, r2
1000f65a:	4a1d      	ldr	r2, [pc, #116]	; (1000f6d0 <at_ble_authenticate+0x118>)
1000f65c:	b2db      	uxtb	r3, r3
1000f65e:	5cba      	ldrb	r2, [r7, r2]
1000f660:	2a00      	cmp	r2, #0
1000f662:	d116      	bne.n	1000f692 <at_ble_authenticate+0xda>
1000f664:	79a0      	ldrb	r0, [r4, #6]
1000f666:	0742      	lsls	r2, r0, #29
1000f668:	d502      	bpl.n	1000f670 <at_ble_authenticate+0xb8>
1000f66a:	9a07      	ldr	r2, [sp, #28]
1000f66c:	2a00      	cmp	r2, #0
1000f66e:	d0bc      	beq.n	1000f5ea <at_ble_authenticate+0x32>
1000f670:	07c2      	lsls	r2, r0, #31
1000f672:	d501      	bpl.n	1000f678 <at_ble_authenticate+0xc0>
1000f674:	2e00      	cmp	r6, #0
1000f676:	d0b8      	beq.n	1000f5ea <at_ble_authenticate+0x32>
1000f678:	7966      	ldrb	r6, [r4, #5]
1000f67a:	7821      	ldrb	r1, [r4, #0]
1000f67c:	78e2      	ldrb	r2, [r4, #3]
1000f67e:	9600      	str	r6, [sp, #0]
1000f680:	9001      	str	r0, [sp, #4]
1000f682:	79e0      	ldrb	r0, [r4, #7]
1000f684:	9002      	str	r0, [sp, #8]
1000f686:	7a20      	ldrb	r0, [r4, #8]
1000f688:	4c16      	ldr	r4, [pc, #88]	; (1000f6e4 <at_ble_authenticate+0x12c>)
1000f68a:	9003      	str	r0, [sp, #12]
1000f68c:	1c28      	adds	r0, r5, #0
1000f68e:	47a0      	blx	r4
1000f690:	e018      	b.n	1000f6c4 <at_ble_authenticate+0x10c>
1000f692:	2a01      	cmp	r2, #1
1000f694:	d1a9      	bne.n	1000f5ea <at_ble_authenticate+0x32>
1000f696:	79e0      	ldrb	r0, [r4, #7]
1000f698:	0742      	lsls	r2, r0, #29
1000f69a:	d502      	bpl.n	1000f6a2 <at_ble_authenticate+0xea>
1000f69c:	9a07      	ldr	r2, [sp, #28]
1000f69e:	2a00      	cmp	r2, #0
1000f6a0:	d0a3      	beq.n	1000f5ea <at_ble_authenticate+0x32>
1000f6a2:	07c2      	lsls	r2, r0, #31
1000f6a4:	d501      	bpl.n	1000f6aa <at_ble_authenticate+0xf2>
1000f6a6:	2e00      	cmp	r6, #0
1000f6a8:	d09f      	beq.n	1000f5ea <at_ble_authenticate+0x32>
1000f6aa:	7966      	ldrb	r6, [r4, #5]
1000f6ac:	7821      	ldrb	r1, [r4, #0]
1000f6ae:	78e2      	ldrb	r2, [r4, #3]
1000f6b0:	9600      	str	r6, [sp, #0]
1000f6b2:	79a6      	ldrb	r6, [r4, #6]
1000f6b4:	9002      	str	r0, [sp, #8]
1000f6b6:	9601      	str	r6, [sp, #4]
1000f6b8:	7a20      	ldrb	r0, [r4, #8]
1000f6ba:	9504      	str	r5, [sp, #16]
1000f6bc:	9003      	str	r0, [sp, #12]
1000f6be:	4c05      	ldr	r4, [pc, #20]	; (1000f6d4 <at_ble_authenticate+0x11c>)
1000f6c0:	2001      	movs	r0, #1
1000f6c2:	47a0      	blx	r4
1000f6c4:	2000      	movs	r0, #0
1000f6c6:	b00b      	add	sp, #44	; 0x2c
1000f6c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f6ca:	46c0      	nop			; (mov r8, r8)
1000f6cc:	1000fab9 	.word	0x1000fab9
1000f6d0:	10017c92 	.word	0x10017c92
1000f6d4:	10010029 	.word	0x10010029
1000f6d8:	10017da0 	.word	0x10017da0
1000f6dc:	1001255f 	.word	0x1001255f
1000f6e0:	10017d22 	.word	0x10017d22
1000f6e4:	1000fe09 	.word	0x1000fe09

1000f6e8 <at_ble_pair_key_reply>:
1000f6e8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f6ea:	b085      	sub	sp, #20
1000f6ec:	1c05      	adds	r5, r0, #0
1000f6ee:	1c0c      	adds	r4, r1, #0
1000f6f0:	1c16      	adds	r6, r2, #0
1000f6f2:	2100      	movs	r1, #0
1000f6f4:	4668      	mov	r0, sp
1000f6f6:	2210      	movs	r2, #16
1000f6f8:	4b18      	ldr	r3, [pc, #96]	; (1000f75c <at_ble_pair_key_reply+0x74>)
1000f6fa:	4798      	blx	r3
1000f6fc:	2101      	movs	r1, #1
1000f6fe:	2e00      	cmp	r6, #0
1000f700:	d101      	bne.n	1000f706 <at_ble_pair_key_reply+0x1e>
1000f702:	1c31      	adds	r1, r6, #0
1000f704:	466e      	mov	r6, sp
1000f706:	2c00      	cmp	r4, #0
1000f708:	d116      	bne.n	1000f738 <at_ble_pair_key_reply+0x50>
1000f70a:	2701      	movs	r7, #1
1000f70c:	1c23      	adds	r3, r4, #0
1000f70e:	1d70      	adds	r0, r6, #5
1000f710:	3e01      	subs	r6, #1
1000f712:	7802      	ldrb	r2, [r0, #0]
1000f714:	3801      	subs	r0, #1
1000f716:	3a30      	subs	r2, #48	; 0x30
1000f718:	437a      	muls	r2, r7
1000f71a:	189b      	adds	r3, r3, r2
1000f71c:	220a      	movs	r2, #10
1000f71e:	4357      	muls	r7, r2
1000f720:	42b0      	cmp	r0, r6
1000f722:	d1f6      	bne.n	1000f712 <at_ble_pair_key_reply+0x2a>
1000f724:	466a      	mov	r2, sp
1000f726:	4668      	mov	r0, sp
1000f728:	7013      	strb	r3, [r2, #0]
1000f72a:	0a1a      	lsrs	r2, r3, #8
1000f72c:	7042      	strb	r2, [r0, #1]
1000f72e:	0c1a      	lsrs	r2, r3, #16
1000f730:	0e1b      	lsrs	r3, r3, #24
1000f732:	7082      	strb	r2, [r0, #2]
1000f734:	70c3      	strb	r3, [r0, #3]
1000f736:	e009      	b.n	1000f74c <at_ble_pair_key_reply+0x64>
1000f738:	20cf      	movs	r0, #207	; 0xcf
1000f73a:	2c01      	cmp	r4, #1
1000f73c:	d10c      	bne.n	1000f758 <at_ble_pair_key_reply+0x70>
1000f73e:	2300      	movs	r3, #0
1000f740:	4668      	mov	r0, sp
1000f742:	5cf2      	ldrb	r2, [r6, r3]
1000f744:	54c2      	strb	r2, [r0, r3]
1000f746:	3301      	adds	r3, #1
1000f748:	2b10      	cmp	r3, #16
1000f74a:	d1f9      	bne.n	1000f740 <at_ble_pair_key_reply+0x58>
1000f74c:	2004      	movs	r0, #4
1000f74e:	466a      	mov	r2, sp
1000f750:	1c2b      	adds	r3, r5, #0
1000f752:	4c03      	ldr	r4, [pc, #12]	; (1000f760 <at_ble_pair_key_reply+0x78>)
1000f754:	47a0      	blx	r4
1000f756:	2000      	movs	r0, #0
1000f758:	b005      	add	sp, #20
1000f75a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f75c:	10012571 	.word	0x10012571
1000f760:	100100a5 	.word	0x100100a5

1000f764 <at_ble_send_slave_sec_request>:
1000f764:	b570      	push	{r4, r5, r6, lr}
1000f766:	4b0c      	ldr	r3, [pc, #48]	; (1000f798 <at_ble_send_slave_sec_request+0x34>)
1000f768:	1c0e      	adds	r6, r1, #0
1000f76a:	2100      	movs	r1, #0
1000f76c:	1c05      	adds	r5, r0, #0
1000f76e:	1c14      	adds	r4, r2, #0
1000f770:	4798      	blx	r3
1000f772:	2301      	movs	r3, #1
1000f774:	2807      	cmp	r0, #7
1000f776:	d80d      	bhi.n	1000f794 <at_ble_send_slave_sec_request+0x30>
1000f778:	3311      	adds	r3, #17
1000f77a:	4358      	muls	r0, r3
1000f77c:	4b07      	ldr	r3, [pc, #28]	; (1000f79c <at_ble_send_slave_sec_request+0x38>)
1000f77e:	5cc2      	ldrb	r2, [r0, r3]
1000f780:	23e0      	movs	r3, #224	; 0xe0
1000f782:	2a01      	cmp	r2, #1
1000f784:	d106      	bne.n	1000f794 <at_ble_send_slave_sec_request+0x30>
1000f786:	00b1      	lsls	r1, r6, #2
1000f788:	430c      	orrs	r4, r1
1000f78a:	4b05      	ldr	r3, [pc, #20]	; (1000f7a0 <at_ble_send_slave_sec_request+0x3c>)
1000f78c:	b2e1      	uxtb	r1, r4
1000f78e:	1c28      	adds	r0, r5, #0
1000f790:	4798      	blx	r3
1000f792:	2300      	movs	r3, #0
1000f794:	1c18      	adds	r0, r3, #0
1000f796:	bd70      	pop	{r4, r5, r6, pc}
1000f798:	1000fab9 	.word	0x1000fab9
1000f79c:	10017c92 	.word	0x10017c92
1000f7a0:	100100f5 	.word	0x100100f5

1000f7a4 <at_ble_encryption_start>:
1000f7a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f7a6:	23cf      	movs	r3, #207	; 0xcf
1000f7a8:	2900      	cmp	r1, #0
1000f7aa:	d02b      	beq.n	1000f804 <at_ble_encryption_start+0x60>
1000f7ac:	2a05      	cmp	r2, #5
1000f7ae:	d829      	bhi.n	1000f804 <at_ble_encryption_start+0x60>
1000f7b0:	2701      	movs	r7, #1
1000f7b2:	1c3d      	adds	r5, r7, #0
1000f7b4:	2433      	movs	r4, #51	; 0x33
1000f7b6:	4095      	lsls	r5, r2
1000f7b8:	4225      	tst	r5, r4
1000f7ba:	d023      	beq.n	1000f804 <at_ble_encryption_start+0x60>
1000f7bc:	7e8c      	ldrb	r4, [r1, #26]
1000f7be:	3c07      	subs	r4, #7
1000f7c0:	2c09      	cmp	r4, #9
1000f7c2:	d81f      	bhi.n	1000f804 <at_ble_encryption_start+0x60>
1000f7c4:	4b10      	ldr	r3, [pc, #64]	; (1000f808 <at_ble_encryption_start+0x64>)
1000f7c6:	1c0c      	adds	r4, r1, #0
1000f7c8:	2100      	movs	r1, #0
1000f7ca:	1c15      	adds	r5, r2, #0
1000f7cc:	1c06      	adds	r6, r0, #0
1000f7ce:	4798      	blx	r3
1000f7d0:	1c3b      	adds	r3, r7, #0
1000f7d2:	2807      	cmp	r0, #7
1000f7d4:	d816      	bhi.n	1000f804 <at_ble_encryption_start+0x60>
1000f7d6:	2312      	movs	r3, #18
1000f7d8:	4358      	muls	r0, r3
1000f7da:	4b0c      	ldr	r3, [pc, #48]	; (1000f80c <at_ble_encryption_start+0x68>)
1000f7dc:	5cc7      	ldrb	r7, [r0, r3]
1000f7de:	23e0      	movs	r3, #224	; 0xe0
1000f7e0:	2f00      	cmp	r7, #0
1000f7e2:	d10f      	bne.n	1000f804 <at_ble_encryption_start+0x60>
1000f7e4:	1c21      	adds	r1, r4, #0
1000f7e6:	221c      	movs	r2, #28
1000f7e8:	4b09      	ldr	r3, [pc, #36]	; (1000f810 <at_ble_encryption_start+0x6c>)
1000f7ea:	480a      	ldr	r0, [pc, #40]	; (1000f814 <at_ble_encryption_start+0x70>)
1000f7ec:	4798      	blx	r3
1000f7ee:	1c23      	adds	r3, r4, #0
1000f7f0:	7ea1      	ldrb	r1, [r4, #26]
1000f7f2:	8a22      	ldrh	r2, [r4, #16]
1000f7f4:	3312      	adds	r3, #18
1000f7f6:	9100      	str	r1, [sp, #0]
1000f7f8:	9501      	str	r5, [sp, #4]
1000f7fa:	1c21      	adds	r1, r4, #0
1000f7fc:	1c30      	adds	r0, r6, #0
1000f7fe:	4c06      	ldr	r4, [pc, #24]	; (1000f818 <at_ble_encryption_start+0x74>)
1000f800:	47a0      	blx	r4
1000f802:	1c3b      	adds	r3, r7, #0
1000f804:	1c18      	adds	r0, r3, #0
1000f806:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000f808:	1000fab9 	.word	0x1000fab9
1000f80c:	10017c92 	.word	0x10017c92
1000f810:	1001255f 	.word	0x1001255f
1000f814:	10017da0 	.word	0x10017da0
1000f818:	10010135 	.word	0x10010135

1000f81c <at_ble_encryption_request_reply>:
1000f81c:	b573      	push	{r0, r1, r4, r5, r6, lr}
1000f81e:	24cf      	movs	r4, #207	; 0xcf
1000f820:	2b00      	cmp	r3, #0
1000f822:	d011      	beq.n	1000f848 <at_ble_encryption_request_reply+0x2c>
1000f824:	2a00      	cmp	r2, #0
1000f826:	d00a      	beq.n	1000f83e <at_ble_encryption_request_reply+0x22>
1000f828:	2905      	cmp	r1, #5
1000f82a:	d80d      	bhi.n	1000f848 <at_ble_encryption_request_reply+0x2c>
1000f82c:	2501      	movs	r5, #1
1000f82e:	2633      	movs	r6, #51	; 0x33
1000f830:	408d      	lsls	r5, r1
1000f832:	4235      	tst	r5, r6
1000f834:	d008      	beq.n	1000f848 <at_ble_encryption_request_reply+0x2c>
1000f836:	7e9d      	ldrb	r5, [r3, #26]
1000f838:	3d07      	subs	r5, #7
1000f83a:	2d09      	cmp	r5, #9
1000f83c:	d804      	bhi.n	1000f848 <at_ble_encryption_request_reply+0x2c>
1000f83e:	7e9c      	ldrb	r4, [r3, #26]
1000f840:	9400      	str	r4, [sp, #0]
1000f842:	4c02      	ldr	r4, [pc, #8]	; (1000f84c <at_ble_encryption_request_reply+0x30>)
1000f844:	47a0      	blx	r4
1000f846:	2400      	movs	r4, #0
1000f848:	1c20      	adds	r0, r4, #0
1000f84a:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
1000f84c:	100101f1 	.word	0x100101f1

1000f850 <rx_callback>:
1000f850:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f852:	8883      	ldrh	r3, [r0, #4]
1000f854:	1c01      	adds	r1, r0, #0
1000f856:	9301      	str	r3, [sp, #4]
1000f858:	88c5      	ldrh	r5, [r0, #6]
1000f85a:	8806      	ldrh	r6, [r0, #0]
1000f85c:	2d00      	cmp	r5, #0
1000f85e:	d10f      	bne.n	1000f880 <rx_callback+0x30>
1000f860:	1c19      	adds	r1, r3, #0
1000f862:	1c30      	adds	r0, r6, #0
1000f864:	4b19      	ldr	r3, [pc, #100]	; (1000f8cc <rx_callback+0x7c>)
1000f866:	1c2a      	adds	r2, r5, #0
1000f868:	4798      	blx	r3
1000f86a:	1e03      	subs	r3, r0, #0
1000f86c:	d105      	bne.n	1000f87a <rx_callback+0x2a>
1000f86e:	1c30      	adds	r0, r6, #0
1000f870:	9901      	ldr	r1, [sp, #4]
1000f872:	1c1a      	adds	r2, r3, #0
1000f874:	4c16      	ldr	r4, [pc, #88]	; (1000f8d0 <rx_callback+0x80>)
1000f876:	47a0      	blx	r4
1000f878:	e027      	b.n	1000f8ca <rx_callback+0x7a>
1000f87a:	4b16      	ldr	r3, [pc, #88]	; (1000f8d4 <rx_callback+0x84>)
1000f87c:	4798      	blx	r3
1000f87e:	e024      	b.n	1000f8ca <rx_callback+0x7a>
1000f880:	4c15      	ldr	r4, [pc, #84]	; (1000f8d8 <rx_callback+0x88>)
1000f882:	4a16      	ldr	r2, [pc, #88]	; (1000f8dc <rx_callback+0x8c>)
1000f884:	6823      	ldr	r3, [r4, #0]
1000f886:	6812      	ldr	r2, [r2, #0]
1000f888:	18eb      	adds	r3, r5, r3
1000f88a:	4293      	cmp	r3, r2
1000f88c:	d901      	bls.n	1000f892 <rx_callback+0x42>
1000f88e:	2300      	movs	r3, #0
1000f890:	6023      	str	r3, [r4, #0]
1000f892:	4f13      	ldr	r7, [pc, #76]	; (1000f8e0 <rx_callback+0x90>)
1000f894:	6822      	ldr	r2, [r4, #0]
1000f896:	683b      	ldr	r3, [r7, #0]
1000f898:	3108      	adds	r1, #8
1000f89a:	1898      	adds	r0, r3, r2
1000f89c:	1c2a      	adds	r2, r5, #0
1000f89e:	4b11      	ldr	r3, [pc, #68]	; (1000f8e4 <rx_callback+0x94>)
1000f8a0:	4798      	blx	r3
1000f8a2:	683b      	ldr	r3, [r7, #0]
1000f8a4:	6822      	ldr	r2, [r4, #0]
1000f8a6:	1c30      	adds	r0, r6, #0
1000f8a8:	189a      	adds	r2, r3, r2
1000f8aa:	9901      	ldr	r1, [sp, #4]
1000f8ac:	4b07      	ldr	r3, [pc, #28]	; (1000f8cc <rx_callback+0x7c>)
1000f8ae:	4798      	blx	r3
1000f8b0:	2800      	cmp	r0, #0
1000f8b2:	d1e2      	bne.n	1000f87a <rx_callback+0x2a>
1000f8b4:	6823      	ldr	r3, [r4, #0]
1000f8b6:	683a      	ldr	r2, [r7, #0]
1000f8b8:	1c30      	adds	r0, r6, #0
1000f8ba:	18d2      	adds	r2, r2, r3
1000f8bc:	9901      	ldr	r1, [sp, #4]
1000f8be:	1c2b      	adds	r3, r5, #0
1000f8c0:	4e03      	ldr	r6, [pc, #12]	; (1000f8d0 <rx_callback+0x80>)
1000f8c2:	47b0      	blx	r6
1000f8c4:	6823      	ldr	r3, [r4, #0]
1000f8c6:	18ed      	adds	r5, r5, r3
1000f8c8:	6025      	str	r5, [r4, #0]
1000f8ca:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000f8cc:	1000df59 	.word	0x1000df59
1000f8d0:	1000ded1 	.word	0x1000ded1
1000f8d4:	1000db15 	.word	0x1000db15
1000f8d8:	10017dfc 	.word	0x10017dfc
1000f8dc:	10016e38 	.word	0x10016e38
1000f8e0:	10016e34 	.word	0x10016e34
1000f8e4:	1001255f 	.word	0x1001255f

1000f8e8 <interface_send>:
1000f8e8:	b508      	push	{r3, lr}
1000f8ea:	4b02      	ldr	r3, [pc, #8]	; (1000f8f4 <interface_send+0xc>)
1000f8ec:	4798      	blx	r3
1000f8ee:	2000      	movs	r0, #0
1000f8f0:	bd08      	pop	{r3, pc}
1000f8f2:	46c0      	nop			; (mov r8, r8)
1000f8f4:	1000d80d 	.word	0x1000d80d

1000f8f8 <interface_init>:
1000f8f8:	2280      	movs	r2, #128	; 0x80
1000f8fa:	b510      	push	{r4, lr}
1000f8fc:	2100      	movs	r1, #0
1000f8fe:	1c04      	adds	r4, r0, #0
1000f900:	0092      	lsls	r2, r2, #2
1000f902:	4b08      	ldr	r3, [pc, #32]	; (1000f924 <interface_init+0x2c>)
1000f904:	4808      	ldr	r0, [pc, #32]	; (1000f928 <interface_init+0x30>)
1000f906:	4798      	blx	r3
1000f908:	2200      	movs	r2, #0
1000f90a:	4b08      	ldr	r3, [pc, #32]	; (1000f92c <interface_init+0x34>)
1000f90c:	601a      	str	r2, [r3, #0]
1000f90e:	4a08      	ldr	r2, [pc, #32]	; (1000f930 <interface_init+0x38>)
1000f910:	4b08      	ldr	r3, [pc, #32]	; (1000f934 <interface_init+0x3c>)
1000f912:	601a      	str	r2, [r3, #0]
1000f914:	4b08      	ldr	r3, [pc, #32]	; (1000f938 <interface_init+0x40>)
1000f916:	6922      	ldr	r2, [r4, #16]
1000f918:	601a      	str	r2, [r3, #0]
1000f91a:	6962      	ldr	r2, [r4, #20]
1000f91c:	4b07      	ldr	r3, [pc, #28]	; (1000f93c <interface_init+0x44>)
1000f91e:	601a      	str	r2, [r3, #0]
1000f920:	bd10      	pop	{r4, pc}
1000f922:	46c0      	nop			; (mov r8, r8)
1000f924:	10012571 	.word	0x10012571
1000f928:	10018000 	.word	0x10018000
1000f92c:	10017dfc 	.word	0x10017dfc
1000f930:	10017e00 	.word	0x10017e00
1000f934:	1001539c 	.word	0x1001539c
1000f938:	10016e34 	.word	0x10016e34
1000f93c:	10016e38 	.word	0x10016e38

1000f940 <platform_cmd_cmpl_signal>:
1000f940:	2201      	movs	r2, #1
1000f942:	4b01      	ldr	r3, [pc, #4]	; (1000f948 <platform_cmd_cmpl_signal+0x8>)
1000f944:	601a      	str	r2, [r3, #0]
1000f946:	4770      	bx	lr
1000f948:	10016e3c 	.word	0x10016e3c

1000f94c <platform_cmd_cmpl_wait>:
1000f94c:	b510      	push	{r4, lr}
1000f94e:	1c04      	adds	r4, r0, #0
1000f950:	4b07      	ldr	r3, [pc, #28]	; (1000f970 <platform_cmd_cmpl_wait+0x24>)
1000f952:	681a      	ldr	r2, [r3, #0]
1000f954:	2a01      	cmp	r2, #1
1000f956:	d003      	beq.n	1000f960 <platform_cmd_cmpl_wait+0x14>
1000f958:	4b06      	ldr	r3, [pc, #24]	; (1000f974 <platform_cmd_cmpl_wait+0x28>)
1000f95a:	2000      	movs	r0, #0
1000f95c:	4798      	blx	r3
1000f95e:	e7f7      	b.n	1000f950 <platform_cmd_cmpl_wait+0x4>
1000f960:	6819      	ldr	r1, [r3, #0]
1000f962:	2901      	cmp	r1, #1
1000f964:	d102      	bne.n	1000f96c <platform_cmd_cmpl_wait+0x20>
1000f966:	2200      	movs	r2, #0
1000f968:	601a      	str	r2, [r3, #0]
1000f96a:	e000      	b.n	1000f96e <platform_cmd_cmpl_wait+0x22>
1000f96c:	7022      	strb	r2, [r4, #0]
1000f96e:	bd10      	pop	{r4, pc}
1000f970:	10016e3c 	.word	0x10016e3c
1000f974:	1000d89d 	.word	0x1000d89d

1000f978 <start_timer>:
1000f978:	4770      	bx	lr

1000f97a <stop_timer>:
1000f97a:	4770      	bx	lr

1000f97c <dbg_le_set_bd_addr_req_handler>:
1000f97c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f97e:	466b      	mov	r3, sp
1000f980:	1dde      	adds	r6, r3, #7
1000f982:	2300      	movs	r3, #0
1000f984:	7033      	strb	r3, [r6, #0]
1000f986:	230f      	movs	r3, #15
1000f988:	4c13      	ldr	r4, [pc, #76]	; (1000f9d8 <dbg_le_set_bd_addr_req_handler+0x5c>)
1000f98a:	2703      	movs	r7, #3
1000f98c:	7023      	strb	r3, [r4, #0]
1000f98e:	2300      	movs	r3, #0
1000f990:	70e3      	strb	r3, [r4, #3]
1000f992:	4b12      	ldr	r3, [pc, #72]	; (1000f9dc <dbg_le_set_bd_addr_req_handler+0x60>)
1000f994:	1c01      	adds	r1, r0, #0
1000f996:	881a      	ldrh	r2, [r3, #0]
1000f998:	881b      	ldrh	r3, [r3, #0]
1000f99a:	7122      	strb	r2, [r4, #4]
1000f99c:	0a1b      	lsrs	r3, r3, #8
1000f99e:	2206      	movs	r2, #6
1000f9a0:	7163      	strb	r3, [r4, #5]
1000f9a2:	480f      	ldr	r0, [pc, #60]	; (1000f9e0 <dbg_le_set_bd_addr_req_handler+0x64>)
1000f9a4:	4b0f      	ldr	r3, [pc, #60]	; (1000f9e4 <dbg_le_set_bd_addr_req_handler+0x68>)
1000f9a6:	7067      	strb	r7, [r4, #1]
1000f9a8:	70a7      	strb	r7, [r4, #2]
1000f9aa:	4798      	blx	r3
1000f9ac:	4d0e      	ldr	r5, [pc, #56]	; (1000f9e8 <dbg_le_set_bd_addr_req_handler+0x6c>)
1000f9ae:	4b0f      	ldr	r3, [pc, #60]	; (1000f9ec <dbg_le_set_bd_addr_req_handler+0x70>)
1000f9b0:	210e      	movs	r1, #14
1000f9b2:	802b      	strh	r3, [r5, #0]
1000f9b4:	2306      	movs	r3, #6
1000f9b6:	71a3      	strb	r3, [r4, #6]
1000f9b8:	2300      	movs	r3, #0
1000f9ba:	1c20      	adds	r0, r4, #0
1000f9bc:	71e3      	strb	r3, [r4, #7]
1000f9be:	4b0c      	ldr	r3, [pc, #48]	; (1000f9f0 <dbg_le_set_bd_addr_req_handler+0x74>)
1000f9c0:	80af      	strh	r7, [r5, #4]
1000f9c2:	4798      	blx	r3
1000f9c4:	1c30      	adds	r0, r6, #0
1000f9c6:	4b0b      	ldr	r3, [pc, #44]	; (1000f9f4 <dbg_le_set_bd_addr_req_handler+0x78>)
1000f9c8:	4798      	blx	r3
1000f9ca:	7833      	ldrb	r3, [r6, #0]
1000f9cc:	20e2      	movs	r0, #226	; 0xe2
1000f9ce:	2b00      	cmp	r3, #0
1000f9d0:	d101      	bne.n	1000f9d6 <dbg_le_set_bd_addr_req_handler+0x5a>
1000f9d2:	68ab      	ldr	r3, [r5, #8]
1000f9d4:	7818      	ldrb	r0, [r3, #0]
1000f9d6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000f9d8:	10018000 	.word	0x10018000
1000f9dc:	10017c90 	.word	0x10017c90
1000f9e0:	10018008 	.word	0x10018008
1000f9e4:	1001255f 	.word	0x1001255f
1000f9e8:	10017c84 	.word	0x10017c84
1000f9ec:	00000329 	.word	0x00000329
1000f9f0:	1000f8e9 	.word	0x1000f8e9
1000f9f4:	1000f94d 	.word	0x1000f94d

1000f9f8 <gapc_get_dev_info_cfm.constprop.1>:
1000f9f8:	b538      	push	{r3, r4, r5, lr}
1000f9fa:	230b      	movs	r3, #11
1000f9fc:	4c27      	ldr	r4, [pc, #156]	; (1000fa9c <gapc_get_dev_info_cfm.constprop.1+0xa4>)
1000f9fe:	7023      	strb	r3, [r4, #0]
1000fa00:	3303      	adds	r3, #3
1000fa02:	7063      	strb	r3, [r4, #1]
1000fa04:	3329      	adds	r3, #41	; 0x29
1000fa06:	70a3      	strb	r3, [r4, #2]
1000fa08:	4b25      	ldr	r3, [pc, #148]	; (1000faa0 <gapc_get_dev_info_cfm.constprop.1+0xa8>)
1000fa0a:	70e1      	strb	r1, [r4, #3]
1000fa0c:	881a      	ldrh	r2, [r3, #0]
1000fa0e:	881b      	ldrh	r3, [r3, #0]
1000fa10:	7122      	strb	r2, [r4, #4]
1000fa12:	0a1b      	lsrs	r3, r3, #8
1000fa14:	7163      	strb	r3, [r4, #5]
1000fa16:	2300      	movs	r3, #0
1000fa18:	7220      	strb	r0, [r4, #8]
1000fa1a:	7263      	strb	r3, [r4, #9]
1000fa1c:	2801      	cmp	r0, #1
1000fa1e:	d02b      	beq.n	1000fa78 <gapc_get_dev_info_cfm.constprop.1+0x80>
1000fa20:	4298      	cmp	r0, r3
1000fa22:	d01b      	beq.n	1000fa5c <gapc_get_dev_info_cfm.constprop.1+0x64>
1000fa24:	2802      	cmp	r0, #2
1000fa26:	d12f      	bne.n	1000fa88 <gapc_get_dev_info_cfm.constprop.1+0x90>
1000fa28:	4b1e      	ldr	r3, [pc, #120]	; (1000faa4 <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000fa2a:	2112      	movs	r1, #18
1000fa2c:	1c1a      	adds	r2, r3, #0
1000fa2e:	32ce      	adds	r2, #206	; 0xce
1000fa30:	8812      	ldrh	r2, [r2, #0]
1000fa32:	72a2      	strb	r2, [r4, #10]
1000fa34:	0a12      	lsrs	r2, r2, #8
1000fa36:	72e2      	strb	r2, [r4, #11]
1000fa38:	1c1a      	adds	r2, r3, #0
1000fa3a:	32d0      	adds	r2, #208	; 0xd0
1000fa3c:	8812      	ldrh	r2, [r2, #0]
1000fa3e:	7322      	strb	r2, [r4, #12]
1000fa40:	0a12      	lsrs	r2, r2, #8
1000fa42:	7362      	strb	r2, [r4, #13]
1000fa44:	1c1a      	adds	r2, r3, #0
1000fa46:	32d2      	adds	r2, #210	; 0xd2
1000fa48:	8812      	ldrh	r2, [r2, #0]
1000fa4a:	33d4      	adds	r3, #212	; 0xd4
1000fa4c:	73a2      	strb	r2, [r4, #14]
1000fa4e:	0a12      	lsrs	r2, r2, #8
1000fa50:	73e2      	strb	r2, [r4, #15]
1000fa52:	881b      	ldrh	r3, [r3, #0]
1000fa54:	7423      	strb	r3, [r4, #16]
1000fa56:	0a1b      	lsrs	r3, r3, #8
1000fa58:	7463      	strb	r3, [r4, #17]
1000fa5a:	e016      	b.n	1000fa8a <gapc_get_dev_info_cfm.constprop.1+0x92>
1000fa5c:	4b11      	ldr	r3, [pc, #68]	; (1000faa4 <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000fa5e:	4912      	ldr	r1, [pc, #72]	; (1000faa8 <gapc_get_dev_info_cfm.constprop.1+0xb0>)
1000fa60:	33aa      	adds	r3, #170	; 0xaa
1000fa62:	881d      	ldrh	r5, [r3, #0]
1000fa64:	4811      	ldr	r0, [pc, #68]	; (1000faac <gapc_get_dev_info_cfm.constprop.1+0xb4>)
1000fa66:	0a2b      	lsrs	r3, r5, #8
1000fa68:	72a5      	strb	r5, [r4, #10]
1000fa6a:	72e3      	strb	r3, [r4, #11]
1000fa6c:	1c2a      	adds	r2, r5, #0
1000fa6e:	4b10      	ldr	r3, [pc, #64]	; (1000fab0 <gapc_get_dev_info_cfm.constprop.1+0xb8>)
1000fa70:	350c      	adds	r5, #12
1000fa72:	4798      	blx	r3
1000fa74:	b2a9      	uxth	r1, r5
1000fa76:	e008      	b.n	1000fa8a <gapc_get_dev_info_cfm.constprop.1+0x92>
1000fa78:	4b0a      	ldr	r3, [pc, #40]	; (1000faa4 <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000fa7a:	210c      	movs	r1, #12
1000fa7c:	33cc      	adds	r3, #204	; 0xcc
1000fa7e:	881b      	ldrh	r3, [r3, #0]
1000fa80:	72a3      	strb	r3, [r4, #10]
1000fa82:	0a1b      	lsrs	r3, r3, #8
1000fa84:	72e3      	strb	r3, [r4, #11]
1000fa86:	e000      	b.n	1000fa8a <gapc_get_dev_info_cfm.constprop.1+0x92>
1000fa88:	210a      	movs	r1, #10
1000fa8a:	1c0b      	adds	r3, r1, #0
1000fa8c:	3b08      	subs	r3, #8
1000fa8e:	71a3      	strb	r3, [r4, #6]
1000fa90:	121b      	asrs	r3, r3, #8
1000fa92:	71e3      	strb	r3, [r4, #7]
1000fa94:	1c20      	adds	r0, r4, #0
1000fa96:	4b07      	ldr	r3, [pc, #28]	; (1000fab4 <gapc_get_dev_info_cfm.constprop.1+0xbc>)
1000fa98:	4798      	blx	r3
1000fa9a:	bd38      	pop	{r3, r4, r5, pc}
1000fa9c:	10018000 	.word	0x10018000
1000faa0:	10017c90 	.word	0x10017c90
1000faa4:	10017d22 	.word	0x10017d22
1000faa8:	10017dce 	.word	0x10017dce
1000faac:	1001800c 	.word	0x1001800c
1000fab0:	1001255f 	.word	0x1001255f
1000fab4:	1000f8e9 	.word	0x1000f8e9

1000fab8 <check_ConnData_idx_role>:
1000fab8:	4b0c      	ldr	r3, [pc, #48]	; (1000faec <check_ConnData_idx_role+0x34>)
1000faba:	b570      	push	{r4, r5, r6, lr}
1000fabc:	1c04      	adds	r4, r0, #0
1000fabe:	2008      	movs	r0, #8
1000fac0:	429c      	cmp	r4, r3
1000fac2:	d011      	beq.n	1000fae8 <check_ConnData_idx_role+0x30>
1000fac4:	2300      	movs	r3, #0
1000fac6:	2212      	movs	r2, #18
1000fac8:	435a      	muls	r2, r3
1000faca:	4d09      	ldr	r5, [pc, #36]	; (1000faf0 <check_ConnData_idx_role+0x38>)
1000facc:	b2d8      	uxtb	r0, r3
1000face:	1956      	adds	r6, r2, r5
1000fad0:	8976      	ldrh	r6, [r6, #10]
1000fad2:	42a6      	cmp	r6, r4
1000fad4:	d104      	bne.n	1000fae0 <check_ConnData_idx_role+0x28>
1000fad6:	2900      	cmp	r1, #0
1000fad8:	d006      	beq.n	1000fae8 <check_ConnData_idx_role+0x30>
1000fada:	5d53      	ldrb	r3, [r2, r5]
1000fadc:	700b      	strb	r3, [r1, #0]
1000fade:	e003      	b.n	1000fae8 <check_ConnData_idx_role+0x30>
1000fae0:	3301      	adds	r3, #1
1000fae2:	2b08      	cmp	r3, #8
1000fae4:	d1ef      	bne.n	1000fac6 <check_ConnData_idx_role+0xe>
1000fae6:	1c18      	adds	r0, r3, #0
1000fae8:	bd70      	pop	{r4, r5, r6, pc}
1000faea:	46c0      	nop			; (mov r8, r8)
1000faec:	0000ffff 	.word	0x0000ffff
1000faf0:	10017c92 	.word	0x10017c92

1000faf4 <check_ConnData_emptyEntry>:
1000faf4:	2300      	movs	r3, #0
1000faf6:	2212      	movs	r2, #18
1000faf8:	435a      	muls	r2, r3
1000fafa:	4906      	ldr	r1, [pc, #24]	; (1000fb14 <check_ConnData_emptyEntry+0x20>)
1000fafc:	b2d8      	uxtb	r0, r3
1000fafe:	1852      	adds	r2, r2, r1
1000fb00:	8951      	ldrh	r1, [r2, #10]
1000fb02:	4a05      	ldr	r2, [pc, #20]	; (1000fb18 <check_ConnData_emptyEntry+0x24>)
1000fb04:	4291      	cmp	r1, r2
1000fb06:	d003      	beq.n	1000fb10 <check_ConnData_emptyEntry+0x1c>
1000fb08:	3301      	adds	r3, #1
1000fb0a:	2b08      	cmp	r3, #8
1000fb0c:	d1f3      	bne.n	1000faf6 <check_ConnData_emptyEntry+0x2>
1000fb0e:	1c18      	adds	r0, r3, #0
1000fb10:	4770      	bx	lr
1000fb12:	46c0      	nop			; (mov r8, r8)
1000fb14:	10017c92 	.word	0x10017c92
1000fb18:	0000ffff 	.word	0x0000ffff

1000fb1c <gapc_cmp_evt>:
1000fb1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000fb1e:	780b      	ldrb	r3, [r1, #0]
1000fb20:	1c05      	adds	r5, r0, #0
1000fb22:	1e58      	subs	r0, r3, #1
1000fb24:	784e      	ldrb	r6, [r1, #1]
1000fb26:	280f      	cmp	r0, #15
1000fb28:	d85a      	bhi.n	1000fbe0 <gapc_cmp_evt+0xc4>
1000fb2a:	1c14      	adds	r4, r2, #0
1000fb2c:	f001 fb68 	bl	10011200 <__gnu_thumb1_case_uqi>
1000fb30:	5858440a 	.word	0x5858440a
1000fb34:	4b584444 	.word	0x4b584444
1000fb38:	0825122d 	.word	0x0825122d
1000fb3c:	3e395858 	.word	0x3e395858
1000fb40:	203b      	movs	r0, #59	; 0x3b
1000fb42:	e04e      	b.n	1000fbe2 <gapc_cmp_evt+0xc6>
1000fb44:	203b      	movs	r0, #59	; 0x3b
1000fb46:	2e00      	cmp	r6, #0
1000fb48:	d04b      	beq.n	1000fbe2 <gapc_cmp_evt+0xc6>
1000fb4a:	0a2d      	lsrs	r5, r5, #8
1000fb4c:	8015      	strh	r5, [r2, #0]
1000fb4e:	7096      	strb	r6, [r2, #2]
1000fb50:	3835      	subs	r0, #53	; 0x35
1000fb52:	e046      	b.n	1000fbe2 <gapc_cmp_evt+0xc6>
1000fb54:	466b      	mov	r3, sp
1000fb56:	1ddf      	adds	r7, r3, #7
1000fb58:	2301      	movs	r3, #1
1000fb5a:	0a2d      	lsrs	r5, r5, #8
1000fb5c:	703b      	strb	r3, [r7, #0]
1000fb5e:	1c28      	adds	r0, r5, #0
1000fb60:	1c39      	adds	r1, r7, #0
1000fb62:	4b20      	ldr	r3, [pc, #128]	; (1000fbe4 <gapc_cmp_evt+0xc8>)
1000fb64:	4798      	blx	r3
1000fb66:	2807      	cmp	r0, #7
1000fb68:	d803      	bhi.n	1000fb72 <gapc_cmp_evt+0x56>
1000fb6a:	783b      	ldrb	r3, [r7, #0]
1000fb6c:	203b      	movs	r0, #59	; 0x3b
1000fb6e:	2b00      	cmp	r3, #0
1000fb70:	d037      	beq.n	1000fbe2 <gapc_cmp_evt+0xc6>
1000fb72:	8065      	strh	r5, [r4, #2]
1000fb74:	7126      	strb	r6, [r4, #4]
1000fb76:	2009      	movs	r0, #9
1000fb78:	e033      	b.n	1000fbe2 <gapc_cmp_evt+0xc6>
1000fb7a:	203b      	movs	r0, #59	; 0x3b
1000fb7c:	2e00      	cmp	r6, #0
1000fb7e:	d030      	beq.n	1000fbe2 <gapc_cmp_evt+0xc6>
1000fb80:	0a2d      	lsrs	r5, r5, #8
1000fb82:	8015      	strh	r5, [r2, #0]
1000fb84:	7096      	strb	r6, [r2, #2]
1000fb86:	382d      	subs	r0, #45	; 0x2d
1000fb88:	e02b      	b.n	1000fbe2 <gapc_cmp_evt+0xc6>
1000fb8a:	203b      	movs	r0, #59	; 0x3b
1000fb8c:	2e00      	cmp	r6, #0
1000fb8e:	d028      	beq.n	1000fbe2 <gapc_cmp_evt+0xc6>
1000fb90:	2300      	movs	r3, #0
1000fb92:	0a2d      	lsrs	r5, r5, #8
1000fb94:	8015      	strh	r5, [r2, #0]
1000fb96:	7096      	strb	r6, [r2, #2]
1000fb98:	8093      	strh	r3, [r2, #4]
1000fb9a:	80d3      	strh	r3, [r2, #6]
1000fb9c:	8113      	strh	r3, [r2, #8]
1000fb9e:	3834      	subs	r0, #52	; 0x34
1000fba0:	e01f      	b.n	1000fbe2 <gapc_cmp_evt+0xc6>
1000fba2:	203b      	movs	r0, #59	; 0x3b
1000fba4:	2e00      	cmp	r6, #0
1000fba6:	d01c      	beq.n	1000fbe2 <gapc_cmp_evt+0xc6>
1000fba8:	7216      	strb	r6, [r2, #8]
1000fbaa:	e003      	b.n	1000fbb4 <gapc_cmp_evt+0x98>
1000fbac:	203b      	movs	r0, #59	; 0x3b
1000fbae:	2e00      	cmp	r6, #0
1000fbb0:	d017      	beq.n	1000fbe2 <gapc_cmp_evt+0xc6>
1000fbb2:	7116      	strb	r6, [r2, #4]
1000fbb4:	3812      	subs	r0, #18
1000fbb6:	e014      	b.n	1000fbe2 <gapc_cmp_evt+0xc6>
1000fbb8:	203b      	movs	r0, #59	; 0x3b
1000fbba:	2e00      	cmp	r6, #0
1000fbbc:	d011      	beq.n	1000fbe2 <gapc_cmp_evt+0xc6>
1000fbbe:	7093      	strb	r3, [r2, #2]
1000fbc0:	70d6      	strb	r6, [r2, #3]
1000fbc2:	382a      	subs	r0, #42	; 0x2a
1000fbc4:	e00d      	b.n	1000fbe2 <gapc_cmp_evt+0xc6>
1000fbc6:	203b      	movs	r0, #59	; 0x3b
1000fbc8:	2e00      	cmp	r6, #0
1000fbca:	d00a      	beq.n	1000fbe2 <gapc_cmp_evt+0xc6>
1000fbcc:	0a2d      	lsrs	r5, r5, #8
1000fbce:	7016      	strb	r6, [r2, #0]
1000fbd0:	8055      	strh	r5, [r2, #2]
1000fbd2:	1d10      	adds	r0, r2, #4
1000fbd4:	2100      	movs	r1, #0
1000fbd6:	2205      	movs	r2, #5
1000fbd8:	4b03      	ldr	r3, [pc, #12]	; (1000fbe8 <gapc_cmp_evt+0xcc>)
1000fbda:	4798      	blx	r3
1000fbdc:	2012      	movs	r0, #18
1000fbde:	e000      	b.n	1000fbe2 <gapc_cmp_evt+0xc6>
1000fbe0:	2000      	movs	r0, #0
1000fbe2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000fbe4:	1000fab9 	.word	0x1000fab9
1000fbe8:	10012571 	.word	0x10012571

1000fbec <gapc_connection_cfm_handler>:
1000fbec:	b5f0      	push	{r4, r5, r6, r7, lr}
1000fbee:	b085      	sub	sp, #20
1000fbf0:	1c1d      	adds	r5, r3, #0
1000fbf2:	ab0a      	add	r3, sp, #40	; 0x28
1000fbf4:	781b      	ldrb	r3, [r3, #0]
1000fbf6:	9201      	str	r2, [sp, #4]
1000fbf8:	9302      	str	r3, [sp, #8]
1000fbfa:	ab0b      	add	r3, sp, #44	; 0x2c
1000fbfc:	781b      	ldrb	r3, [r3, #0]
1000fbfe:	1c07      	adds	r7, r0, #0
1000fc00:	9303      	str	r3, [sp, #12]
1000fc02:	ab0c      	add	r3, sp, #48	; 0x30
1000fc04:	881a      	ldrh	r2, [r3, #0]
1000fc06:	2302      	movs	r3, #2
1000fc08:	1c0e      	adds	r6, r1, #0
1000fc0a:	4c23      	ldr	r4, [pc, #140]	; (1000fc98 <gapc_connection_cfm_handler+0xac>)
1000fc0c:	1c39      	adds	r1, r7, #0
1000fc0e:	7023      	strb	r3, [r4, #0]
1000fc10:	330c      	adds	r3, #12
1000fc12:	7063      	strb	r3, [r4, #1]
1000fc14:	70a3      	strb	r3, [r4, #2]
1000fc16:	4b21      	ldr	r3, [pc, #132]	; (1000fc9c <gapc_connection_cfm_handler+0xb0>)
1000fc18:	70e2      	strb	r2, [r4, #3]
1000fc1a:	881a      	ldrh	r2, [r3, #0]
1000fc1c:	881b      	ldrh	r3, [r3, #0]
1000fc1e:	7122      	strb	r2, [r4, #4]
1000fc20:	0a1b      	lsrs	r3, r3, #8
1000fc22:	4f1f      	ldr	r7, [pc, #124]	; (1000fca0 <gapc_connection_cfm_handler+0xb4>)
1000fc24:	2210      	movs	r2, #16
1000fc26:	481f      	ldr	r0, [pc, #124]	; (1000fca4 <gapc_connection_cfm_handler+0xb8>)
1000fc28:	7163      	strb	r3, [r4, #5]
1000fc2a:	47b8      	blx	r7
1000fc2c:	0a33      	lsrs	r3, r6, #8
1000fc2e:	7626      	strb	r6, [r4, #24]
1000fc30:	7663      	strb	r3, [r4, #25]
1000fc32:	9901      	ldr	r1, [sp, #4]
1000fc34:	0c33      	lsrs	r3, r6, #16
1000fc36:	2210      	movs	r2, #16
1000fc38:	0e36      	lsrs	r6, r6, #24
1000fc3a:	481b      	ldr	r0, [pc, #108]	; (1000fca8 <gapc_connection_cfm_handler+0xbc>)
1000fc3c:	76a3      	strb	r3, [r4, #26]
1000fc3e:	76e6      	strb	r6, [r4, #27]
1000fc40:	47b8      	blx	r7
1000fc42:	1c23      	adds	r3, r4, #0
1000fc44:	332c      	adds	r3, #44	; 0x2c
1000fc46:	701d      	strb	r5, [r3, #0]
1000fc48:	1c23      	adds	r3, r4, #0
1000fc4a:	0a2a      	lsrs	r2, r5, #8
1000fc4c:	332d      	adds	r3, #45	; 0x2d
1000fc4e:	701a      	strb	r2, [r3, #0]
1000fc50:	1c23      	adds	r3, r4, #0
1000fc52:	0c2a      	lsrs	r2, r5, #16
1000fc54:	332e      	adds	r3, #46	; 0x2e
1000fc56:	701a      	strb	r2, [r3, #0]
1000fc58:	1c23      	adds	r3, r4, #0
1000fc5a:	0e2d      	lsrs	r5, r5, #24
1000fc5c:	332f      	adds	r3, #47	; 0x2f
1000fc5e:	466a      	mov	r2, sp
1000fc60:	701d      	strb	r5, [r3, #0]
1000fc62:	1c23      	adds	r3, r4, #0
1000fc64:	7a12      	ldrb	r2, [r2, #8]
1000fc66:	3330      	adds	r3, #48	; 0x30
1000fc68:	701a      	strb	r2, [r3, #0]
1000fc6a:	1c23      	adds	r3, r4, #0
1000fc6c:	2500      	movs	r5, #0
1000fc6e:	3331      	adds	r3, #49	; 0x31
1000fc70:	466a      	mov	r2, sp
1000fc72:	701d      	strb	r5, [r3, #0]
1000fc74:	1c23      	adds	r3, r4, #0
1000fc76:	7b12      	ldrb	r2, [r2, #12]
1000fc78:	3332      	adds	r3, #50	; 0x32
1000fc7a:	701a      	strb	r2, [r3, #0]
1000fc7c:	1c23      	adds	r3, r4, #0
1000fc7e:	3333      	adds	r3, #51	; 0x33
1000fc80:	701d      	strb	r5, [r3, #0]
1000fc82:	232c      	movs	r3, #44	; 0x2c
1000fc84:	1c20      	adds	r0, r4, #0
1000fc86:	71a3      	strb	r3, [r4, #6]
1000fc88:	2134      	movs	r1, #52	; 0x34
1000fc8a:	4b08      	ldr	r3, [pc, #32]	; (1000fcac <gapc_connection_cfm_handler+0xc0>)
1000fc8c:	71e5      	strb	r5, [r4, #7]
1000fc8e:	4798      	blx	r3
1000fc90:	1c28      	adds	r0, r5, #0
1000fc92:	b005      	add	sp, #20
1000fc94:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000fc96:	46c0      	nop			; (mov r8, r8)
1000fc98:	10018000 	.word	0x10018000
1000fc9c:	10017c90 	.word	0x10017c90
1000fca0:	1001255f 	.word	0x1001255f
1000fca4:	10018008 	.word	0x10018008
1000fca8:	1001801c 	.word	0x1001801c
1000fcac:	1000f8e9 	.word	0x1000f8e9

1000fcb0 <gapc_con_req_ind>:
1000fcb0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000fcb2:	7845      	ldrb	r5, [r0, #1]
1000fcb4:	7803      	ldrb	r3, [r0, #0]
1000fcb6:	4c30      	ldr	r4, [pc, #192]	; (1000fd78 <gapc_con_req_ind+0xc8>)
1000fcb8:	022d      	lsls	r5, r5, #8
1000fcba:	431d      	orrs	r5, r3
1000fcbc:	85a5      	strh	r5, [r4, #44]	; 0x2c
1000fcbe:	78c3      	ldrb	r3, [r0, #3]
1000fcc0:	7882      	ldrb	r2, [r0, #2]
1000fcc2:	b08b      	sub	sp, #44	; 0x2c
1000fcc4:	021b      	lsls	r3, r3, #8
1000fcc6:	431a      	orrs	r2, r3
1000fcc8:	466b      	mov	r3, sp
1000fcca:	9205      	str	r2, [sp, #20]
1000fccc:	8a9b      	ldrh	r3, [r3, #20]
1000fcce:	2120      	movs	r1, #32
1000fcd0:	85e3      	strh	r3, [r4, #46]	; 0x2e
1000fcd2:	7943      	ldrb	r3, [r0, #5]
1000fcd4:	7902      	ldrb	r2, [r0, #4]
1000fcd6:	021b      	lsls	r3, r3, #8
1000fcd8:	431a      	orrs	r2, r3
1000fcda:	466b      	mov	r3, sp
1000fcdc:	9206      	str	r2, [sp, #24]
1000fcde:	8b1b      	ldrh	r3, [r3, #24]
1000fce0:	1c06      	adds	r6, r0, #0
1000fce2:	8623      	strh	r3, [r4, #48]	; 0x30
1000fce4:	79c3      	ldrb	r3, [r0, #7]
1000fce6:	7982      	ldrb	r2, [r0, #6]
1000fce8:	021b      	lsls	r3, r3, #8
1000fcea:	431a      	orrs	r2, r3
1000fcec:	466b      	mov	r3, sp
1000fcee:	9207      	str	r2, [sp, #28]
1000fcf0:	466a      	mov	r2, sp
1000fcf2:	8b9b      	ldrh	r3, [r3, #28]
1000fcf4:	1852      	adds	r2, r2, r1
1000fcf6:	8663      	strh	r3, [r4, #50]	; 0x32
1000fcf8:	7a43      	ldrb	r3, [r0, #9]
1000fcfa:	1c01      	adds	r1, r0, #0
1000fcfc:	9308      	str	r3, [sp, #32]
1000fcfe:	1c23      	adds	r3, r4, #0
1000fd00:	7812      	ldrb	r2, [r2, #0]
1000fd02:	3377      	adds	r3, #119	; 0x77
1000fd04:	3478      	adds	r4, #120	; 0x78
1000fd06:	701a      	strb	r2, [r3, #0]
1000fd08:	310a      	adds	r1, #10
1000fd0a:	2206      	movs	r2, #6
1000fd0c:	4b1b      	ldr	r3, [pc, #108]	; (1000fd7c <gapc_con_req_ind+0xcc>)
1000fd0e:	1c20      	adds	r0, r4, #0
1000fd10:	4798      	blx	r3
1000fd12:	7c33      	ldrb	r3, [r6, #16]
1000fd14:	9309      	str	r3, [sp, #36]	; 0x24
1000fd16:	4b1a      	ldr	r3, [pc, #104]	; (1000fd80 <gapc_con_req_ind+0xd0>)
1000fd18:	4798      	blx	r3
1000fd1a:	4e1a      	ldr	r6, [pc, #104]	; (1000fd84 <gapc_con_req_ind+0xd4>)
1000fd1c:	1e07      	subs	r7, r0, #0
1000fd1e:	2f07      	cmp	r7, #7
1000fd20:	d81b      	bhi.n	1000fd5a <gapc_con_req_ind+0xaa>
1000fd22:	2312      	movs	r3, #18
1000fd24:	4343      	muls	r3, r0
1000fd26:	18f0      	adds	r0, r6, r3
1000fd28:	8145      	strh	r5, [r0, #10]
1000fd2a:	4669      	mov	r1, sp
1000fd2c:	2524      	movs	r5, #36	; 0x24
1000fd2e:	1949      	adds	r1, r1, r5
1000fd30:	7809      	ldrb	r1, [r1, #0]
1000fd32:	2206      	movs	r2, #6
1000fd34:	54f1      	strb	r1, [r6, r3]
1000fd36:	2120      	movs	r1, #32
1000fd38:	466b      	mov	r3, sp
1000fd3a:	185b      	adds	r3, r3, r1
1000fd3c:	781b      	ldrb	r3, [r3, #0]
1000fd3e:	1c21      	adds	r1, r4, #0
1000fd40:	7043      	strb	r3, [r0, #1]
1000fd42:	466b      	mov	r3, sp
1000fd44:	8a9b      	ldrh	r3, [r3, #20]
1000fd46:	3002      	adds	r0, #2
1000fd48:	8143      	strh	r3, [r0, #10]
1000fd4a:	466b      	mov	r3, sp
1000fd4c:	8b1b      	ldrh	r3, [r3, #24]
1000fd4e:	8183      	strh	r3, [r0, #12]
1000fd50:	466b      	mov	r3, sp
1000fd52:	8b9b      	ldrh	r3, [r3, #28]
1000fd54:	81c3      	strh	r3, [r0, #14]
1000fd56:	4b09      	ldr	r3, [pc, #36]	; (1000fd7c <gapc_con_req_ind+0xcc>)
1000fd58:	4798      	blx	r3
1000fd5a:	2112      	movs	r1, #18
1000fd5c:	2300      	movs	r3, #0
1000fd5e:	434f      	muls	r7, r1
1000fd60:	9300      	str	r3, [sp, #0]
1000fd62:	9301      	str	r3, [sp, #4]
1000fd64:	19f6      	adds	r6, r6, r7
1000fd66:	8971      	ldrh	r1, [r6, #10]
1000fd68:	4a07      	ldr	r2, [pc, #28]	; (1000fd88 <gapc_con_req_ind+0xd8>)
1000fd6a:	9102      	str	r1, [sp, #8]
1000fd6c:	1c10      	adds	r0, r2, #0
1000fd6e:	1c19      	adds	r1, r3, #0
1000fd70:	4c06      	ldr	r4, [pc, #24]	; (1000fd8c <gapc_con_req_ind+0xdc>)
1000fd72:	47a0      	blx	r4
1000fd74:	b00b      	add	sp, #44	; 0x2c
1000fd76:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000fd78:	10017d22 	.word	0x10017d22
1000fd7c:	1001255f 	.word	0x1001255f
1000fd80:	1000faf5 	.word	0x1000faf5
1000fd84:	10017c92 	.word	0x10017c92
1000fd88:	10016e40 	.word	0x10016e40
1000fd8c:	1000fbed 	.word	0x1000fbed

1000fd90 <gapc_disconnect_cmd_handler>:
1000fd90:	2204      	movs	r2, #4
1000fd92:	b510      	push	{r4, lr}
1000fd94:	4b0c      	ldr	r3, [pc, #48]	; (1000fdc8 <gapc_disconnect_cmd_handler+0x38>)
1000fd96:	2400      	movs	r4, #0
1000fd98:	701a      	strb	r2, [r3, #0]
1000fd9a:	320a      	adds	r2, #10
1000fd9c:	705a      	strb	r2, [r3, #1]
1000fd9e:	709a      	strb	r2, [r3, #2]
1000fda0:	4a0a      	ldr	r2, [pc, #40]	; (1000fdcc <gapc_disconnect_cmd_handler+0x3c>)
1000fda2:	70d9      	strb	r1, [r3, #3]
1000fda4:	8811      	ldrh	r1, [r2, #0]
1000fda6:	8812      	ldrh	r2, [r2, #0]
1000fda8:	7119      	strb	r1, [r3, #4]
1000fdaa:	0a12      	lsrs	r2, r2, #8
1000fdac:	715a      	strb	r2, [r3, #5]
1000fdae:	2201      	movs	r2, #1
1000fdb0:	721a      	strb	r2, [r3, #8]
1000fdb2:	1892      	adds	r2, r2, r2
1000fdb4:	7258      	strb	r0, [r3, #9]
1000fdb6:	719a      	strb	r2, [r3, #6]
1000fdb8:	71dc      	strb	r4, [r3, #7]
1000fdba:	1c18      	adds	r0, r3, #0
1000fdbc:	210a      	movs	r1, #10
1000fdbe:	4b04      	ldr	r3, [pc, #16]	; (1000fdd0 <gapc_disconnect_cmd_handler+0x40>)
1000fdc0:	4798      	blx	r3
1000fdc2:	1c20      	adds	r0, r4, #0
1000fdc4:	bd10      	pop	{r4, pc}
1000fdc6:	46c0      	nop			; (mov r8, r8)
1000fdc8:	10018000 	.word	0x10018000
1000fdcc:	10017c90 	.word	0x10017c90
1000fdd0:	1000f8e9 	.word	0x1000f8e9

1000fdd4 <gapc_disconnect_ind>:
1000fdd4:	1c02      	adds	r2, r0, #0
1000fdd6:	b508      	push	{r3, lr}
1000fdd8:	7843      	ldrb	r3, [r0, #1]
1000fdda:	7800      	ldrb	r0, [r0, #0]
1000fddc:	021b      	lsls	r3, r3, #8
1000fdde:	4318      	orrs	r0, r3
1000fde0:	8008      	strh	r0, [r1, #0]
1000fde2:	7893      	ldrb	r3, [r2, #2]
1000fde4:	708b      	strb	r3, [r1, #2]
1000fde6:	2100      	movs	r1, #0
1000fde8:	4b05      	ldr	r3, [pc, #20]	; (1000fe00 <gapc_disconnect_ind+0x2c>)
1000fdea:	4798      	blx	r3
1000fdec:	2807      	cmp	r0, #7
1000fdee:	d806      	bhi.n	1000fdfe <gapc_disconnect_ind+0x2a>
1000fdf0:	2312      	movs	r3, #18
1000fdf2:	4358      	muls	r0, r3
1000fdf4:	4b03      	ldr	r3, [pc, #12]	; (1000fe04 <gapc_disconnect_ind+0x30>)
1000fdf6:	1818      	adds	r0, r3, r0
1000fdf8:	2301      	movs	r3, #1
1000fdfa:	425b      	negs	r3, r3
1000fdfc:	8143      	strh	r3, [r0, #10]
1000fdfe:	bd08      	pop	{r3, pc}
1000fe00:	1000fab9 	.word	0x1000fab9
1000fe04:	10017c92 	.word	0x10017c92

1000fe08 <gapc_bond_cmd_handler>:
1000fe08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000fe0a:	9300      	str	r3, [sp, #0]
1000fe0c:	2312      	movs	r3, #18
1000fe0e:	1c04      	adds	r4, r0, #0
1000fe10:	a808      	add	r0, sp, #32
1000fe12:	7807      	ldrb	r7, [r0, #0]
1000fe14:	a809      	add	r0, sp, #36	; 0x24
1000fe16:	7806      	ldrb	r6, [r0, #0]
1000fe18:	a80a      	add	r0, sp, #40	; 0x28
1000fe1a:	7805      	ldrb	r5, [r0, #0]
1000fe1c:	a80b      	add	r0, sp, #44	; 0x2c
1000fe1e:	7800      	ldrb	r0, [r0, #0]
1000fe20:	9001      	str	r0, [sp, #4]
1000fe22:	4810      	ldr	r0, [pc, #64]	; (1000fe64 <gapc_bond_cmd_handler+0x5c>)
1000fe24:	7003      	strb	r3, [r0, #0]
1000fe26:	230e      	movs	r3, #14
1000fe28:	70c4      	strb	r4, [r0, #3]
1000fe2a:	4c0f      	ldr	r4, [pc, #60]	; (1000fe68 <gapc_bond_cmd_handler+0x60>)
1000fe2c:	7043      	strb	r3, [r0, #1]
1000fe2e:	7083      	strb	r3, [r0, #2]
1000fe30:	8823      	ldrh	r3, [r4, #0]
1000fe32:	8824      	ldrh	r4, [r4, #0]
1000fe34:	7103      	strb	r3, [r0, #4]
1000fe36:	466b      	mov	r3, sp
1000fe38:	781b      	ldrb	r3, [r3, #0]
1000fe3a:	0a24      	lsrs	r4, r4, #8
1000fe3c:	72c3      	strb	r3, [r0, #11]
1000fe3e:	466b      	mov	r3, sp
1000fe40:	791b      	ldrb	r3, [r3, #4]
1000fe42:	7144      	strb	r4, [r0, #5]
1000fe44:	73c3      	strb	r3, [r0, #15]
1000fe46:	2308      	movs	r3, #8
1000fe48:	7183      	strb	r3, [r0, #6]
1000fe4a:	2300      	movs	r3, #0
1000fe4c:	240a      	movs	r4, #10
1000fe4e:	7241      	strb	r1, [r0, #9]
1000fe50:	71c3      	strb	r3, [r0, #7]
1000fe52:	2110      	movs	r1, #16
1000fe54:	4b05      	ldr	r3, [pc, #20]	; (1000fe6c <gapc_bond_cmd_handler+0x64>)
1000fe56:	7307      	strb	r7, [r0, #12]
1000fe58:	7346      	strb	r6, [r0, #13]
1000fe5a:	7385      	strb	r5, [r0, #14]
1000fe5c:	7204      	strb	r4, [r0, #8]
1000fe5e:	7282      	strb	r2, [r0, #10]
1000fe60:	4798      	blx	r3
1000fe62:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000fe64:	10018000 	.word	0x10018000
1000fe68:	10017c90 	.word	0x10017c90
1000fe6c:	1000f8e9 	.word	0x1000f8e9

1000fe70 <gapc_bond_ind>:
1000fe70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000fe72:	780e      	ldrb	r6, [r1, #0]
1000fe74:	1c03      	adds	r3, r0, #0
1000fe76:	1eb0      	subs	r0, r6, #2
1000fe78:	2805      	cmp	r0, #5
1000fe7a:	d85d      	bhi.n	1000ff38 <gapc_bond_ind+0xc8>
1000fe7c:	1c15      	adds	r5, r2, #0
1000fe7e:	1c0c      	adds	r4, r1, #0
1000fe80:	f001 f9be 	bl	10011200 <__gnu_thumb1_case_uqi>
1000fe84:	2f5a030d 	.word	0x2f5a030d
1000fe88:	4740      	.short	0x4740
1000fe8a:	2009      	movs	r0, #9
1000fe8c:	2a00      	cmp	r2, #0
1000fe8e:	d054      	beq.n	1000ff3a <gapc_bond_ind+0xca>
1000fe90:	0a1b      	lsrs	r3, r3, #8
1000fe92:	8053      	strh	r3, [r2, #2]
1000fe94:	788b      	ldrb	r3, [r1, #2]
1000fe96:	4829      	ldr	r0, [pc, #164]	; (1000ff3c <gapc_bond_ind+0xcc>)
1000fe98:	7113      	strb	r3, [r2, #4]
1000fe9a:	2100      	movs	r1, #0
1000fe9c:	e01c      	b.n	1000fed8 <gapc_bond_ind+0x68>
1000fe9e:	2009      	movs	r0, #9
1000fea0:	2a00      	cmp	r2, #0
1000fea2:	d04a      	beq.n	1000ff3a <gapc_bond_ind+0xca>
1000fea4:	4c25      	ldr	r4, [pc, #148]	; (1000ff3c <gapc_bond_ind+0xcc>)
1000fea6:	0a1b      	lsrs	r3, r3, #8
1000fea8:	8053      	strh	r3, [r2, #2]
1000feaa:	788b      	ldrb	r3, [r1, #2]
1000feac:	2700      	movs	r7, #0
1000feae:	1c10      	adds	r0, r2, #0
1000feb0:	1c21      	adds	r1, r4, #0
1000feb2:	7013      	strb	r3, [r2, #0]
1000feb4:	4e22      	ldr	r6, [pc, #136]	; (1000ff40 <gapc_bond_ind+0xd0>)
1000feb6:	7117      	strb	r7, [r2, #4]
1000feb8:	312e      	adds	r1, #46	; 0x2e
1000feba:	2217      	movs	r2, #23
1000febc:	3032      	adds	r0, #50	; 0x32
1000febe:	47b0      	blx	r6
1000fec0:	1c28      	adds	r0, r5, #0
1000fec2:	1c21      	adds	r1, r4, #0
1000fec4:	2210      	movs	r2, #16
1000fec6:	311e      	adds	r1, #30
1000fec8:	3022      	adds	r0, #34	; 0x22
1000feca:	47b0      	blx	r6
1000fecc:	1ca1      	adds	r1, r4, #2
1000fece:	1da8      	adds	r0, r5, #6
1000fed0:	221c      	movs	r2, #28
1000fed2:	47b0      	blx	r6
1000fed4:	1c20      	adds	r0, r4, #0
1000fed6:	1c39      	adds	r1, r7, #0
1000fed8:	2246      	movs	r2, #70	; 0x46
1000feda:	4b1a      	ldr	r3, [pc, #104]	; (1000ff44 <gapc_bond_ind+0xd4>)
1000fedc:	4798      	blx	r3
1000fede:	2009      	movs	r0, #9
1000fee0:	e02b      	b.n	1000ff3a <gapc_bond_ind+0xca>
1000fee2:	4d16      	ldr	r5, [pc, #88]	; (1000ff3c <gapc_bond_ind+0xcc>)
1000fee4:	3102      	adds	r1, #2
1000fee6:	1c28      	adds	r0, r5, #0
1000fee8:	2210      	movs	r2, #16
1000feea:	4e15      	ldr	r6, [pc, #84]	; (1000ff40 <gapc_bond_ind+0xd0>)
1000feec:	302e      	adds	r0, #46	; 0x2e
1000feee:	47b0      	blx	r6
1000fef0:	1c28      	adds	r0, r5, #0
1000fef2:	1c21      	adds	r1, r4, #0
1000fef4:	303f      	adds	r0, #63	; 0x3f
1000fef6:	3112      	adds	r1, #18
1000fef8:	2206      	movs	r2, #6
1000fefa:	47b0      	blx	r6
1000fefc:	7e23      	ldrb	r3, [r4, #24]
1000fefe:	353e      	adds	r5, #62	; 0x3e
1000ff00:	702b      	strb	r3, [r5, #0]
1000ff02:	e019      	b.n	1000ff38 <gapc_bond_ind+0xc8>
1000ff04:	480d      	ldr	r0, [pc, #52]	; (1000ff3c <gapc_bond_ind+0xcc>)
1000ff06:	3102      	adds	r1, #2
1000ff08:	2210      	movs	r2, #16
1000ff0a:	4b0d      	ldr	r3, [pc, #52]	; (1000ff40 <gapc_bond_ind+0xd0>)
1000ff0c:	301e      	adds	r0, #30
1000ff0e:	4798      	blx	r3
1000ff10:	e012      	b.n	1000ff38 <gapc_bond_ind+0xc8>
1000ff12:	4d0a      	ldr	r5, [pc, #40]	; (1000ff3c <gapc_bond_ind+0xcc>)
1000ff14:	3102      	adds	r1, #2
1000ff16:	2210      	movs	r2, #16
1000ff18:	4e09      	ldr	r6, [pc, #36]	; (1000ff40 <gapc_bond_ind+0xd0>)
1000ff1a:	1ca8      	adds	r0, r5, #2
1000ff1c:	47b0      	blx	r6
1000ff1e:	1c28      	adds	r0, r5, #0
1000ff20:	1c21      	adds	r1, r4, #0
1000ff22:	7ce3      	ldrb	r3, [r4, #19]
1000ff24:	7ca2      	ldrb	r2, [r4, #18]
1000ff26:	021b      	lsls	r3, r3, #8
1000ff28:	4313      	orrs	r3, r2
1000ff2a:	3014      	adds	r0, #20
1000ff2c:	3114      	adds	r1, #20
1000ff2e:	2208      	movs	r2, #8
1000ff30:	826b      	strh	r3, [r5, #18]
1000ff32:	47b0      	blx	r6
1000ff34:	7f23      	ldrb	r3, [r4, #28]
1000ff36:	772b      	strb	r3, [r5, #28]
1000ff38:	2000      	movs	r0, #0
1000ff3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000ff3c:	10016e70 	.word	0x10016e70
1000ff40:	1001255f 	.word	0x1001255f
1000ff44:	10012571 	.word	0x10012571

1000ff48 <gapc_bond_req_ind>:
1000ff48:	b570      	push	{r4, r5, r6, lr}
1000ff4a:	780c      	ldrb	r4, [r1, #0]
1000ff4c:	1c03      	adds	r3, r0, #0
1000ff4e:	7849      	ldrb	r1, [r1, #1]
1000ff50:	2c07      	cmp	r4, #7
1000ff52:	d85c      	bhi.n	1001000e <gapc_bond_req_ind+0xc6>
1000ff54:	1c20      	adds	r0, r4, #0
1000ff56:	f001 f953 	bl	10011200 <__gnu_thumb1_case_uqi>
1000ff5a:	5a04      	.short	0x5a04
1000ff5c:	5a0b5a5a 	.word	0x5a0b5a5a
1000ff60:	1f1f      	.short	0x1f1f
1000ff62:	200a      	movs	r0, #10
1000ff64:	2a00      	cmp	r2, #0
1000ff66:	d053      	beq.n	10010010 <gapc_bond_req_ind+0xc8>
1000ff68:	0a1b      	lsrs	r3, r3, #8
1000ff6a:	8013      	strh	r3, [r2, #0]
1000ff6c:	7091      	strb	r1, [r2, #2]
1000ff6e:	e04f      	b.n	10010010 <gapc_bond_req_ind+0xc8>
1000ff70:	2a00      	cmp	r2, #0
1000ff72:	d00b      	beq.n	1000ff8c <gapc_bond_req_ind+0x44>
1000ff74:	0a1b      	lsrs	r3, r3, #8
1000ff76:	8013      	strh	r3, [r2, #0]
1000ff78:	2900      	cmp	r1, #0
1000ff7a:	d102      	bne.n	1000ff82 <gapc_bond_req_ind+0x3a>
1000ff7c:	2301      	movs	r3, #1
1000ff7e:	7093      	strb	r3, [r2, #2]
1000ff80:	e004      	b.n	1000ff8c <gapc_bond_req_ind+0x44>
1000ff82:	2300      	movs	r3, #0
1000ff84:	7093      	strb	r3, [r2, #2]
1000ff86:	2902      	cmp	r1, #2
1000ff88:	d102      	bne.n	1000ff90 <gapc_bond_req_ind+0x48>
1000ff8a:	70d3      	strb	r3, [r2, #3]
1000ff8c:	200c      	movs	r0, #12
1000ff8e:	e03f      	b.n	10010010 <gapc_bond_req_ind+0xc8>
1000ff90:	2901      	cmp	r1, #1
1000ff92:	d1fb      	bne.n	1000ff8c <gapc_bond_req_ind+0x44>
1000ff94:	70d1      	strb	r1, [r2, #3]
1000ff96:	e7f9      	b.n	1000ff8c <gapc_bond_req_ind+0x44>
1000ff98:	2214      	movs	r2, #20
1000ff9a:	481e      	ldr	r0, [pc, #120]	; (10010014 <gapc_bond_req_ind+0xcc>)
1000ff9c:	0a1b      	lsrs	r3, r3, #8
1000ff9e:	70c3      	strb	r3, [r0, #3]
1000ffa0:	4b1d      	ldr	r3, [pc, #116]	; (10010018 <gapc_bond_req_ind+0xd0>)
1000ffa2:	7002      	strb	r2, [r0, #0]
1000ffa4:	3a06      	subs	r2, #6
1000ffa6:	7042      	strb	r2, [r0, #1]
1000ffa8:	7082      	strb	r2, [r0, #2]
1000ffaa:	881a      	ldrh	r2, [r3, #0]
1000ffac:	881b      	ldrh	r3, [r3, #0]
1000ffae:	4e1b      	ldr	r6, [pc, #108]	; (1001001c <gapc_bond_req_ind+0xd4>)
1000ffb0:	0a1b      	lsrs	r3, r3, #8
1000ffb2:	7143      	strb	r3, [r0, #5]
1000ffb4:	2301      	movs	r3, #1
1000ffb6:	7102      	strb	r2, [r0, #4]
1000ffb8:	7204      	strb	r4, [r0, #8]
1000ffba:	7243      	strb	r3, [r0, #9]
1000ffbc:	1c05      	adds	r5, r0, #0
1000ffbe:	1c31      	adds	r1, r6, #0
1000ffc0:	300a      	adds	r0, #10
1000ffc2:	2c07      	cmp	r4, #7
1000ffc4:	d116      	bne.n	1000fff4 <gapc_bond_req_ind+0xac>
1000ffc6:	317e      	adds	r1, #126	; 0x7e
1000ffc8:	2210      	movs	r2, #16
1000ffca:	4c15      	ldr	r4, [pc, #84]	; (10010020 <gapc_bond_req_ind+0xd8>)
1000ffcc:	47a0      	blx	r4
1000ffce:	1c33      	adds	r3, r6, #0
1000ffd0:	1c31      	adds	r1, r6, #0
1000ffd2:	1c28      	adds	r0, r5, #0
1000ffd4:	338e      	adds	r3, #142	; 0x8e
1000ffd6:	881b      	ldrh	r3, [r3, #0]
1000ffd8:	3190      	adds	r1, #144	; 0x90
1000ffda:	76ab      	strb	r3, [r5, #26]
1000ffdc:	2208      	movs	r2, #8
1000ffde:	0a1b      	lsrs	r3, r3, #8
1000ffe0:	301c      	adds	r0, #28
1000ffe2:	76eb      	strb	r3, [r5, #27]
1000ffe4:	47a0      	blx	r4
1000ffe6:	1c31      	adds	r1, r6, #0
1000ffe8:	3198      	adds	r1, #152	; 0x98
1000ffea:	780a      	ldrb	r2, [r1, #0]
1000ffec:	1d6b      	adds	r3, r5, #5
1000ffee:	77da      	strb	r2, [r3, #31]
1000fff0:	2125      	movs	r1, #37	; 0x25
1000fff2:	e004      	b.n	1000fffe <gapc_bond_req_ind+0xb6>
1000fff4:	319a      	adds	r1, #154	; 0x9a
1000fff6:	2210      	movs	r2, #16
1000fff8:	4b09      	ldr	r3, [pc, #36]	; (10010020 <gapc_bond_req_ind+0xd8>)
1000fffa:	4798      	blx	r3
1000fffc:	211a      	movs	r1, #26
1000fffe:	1c0b      	adds	r3, r1, #0
10010000:	2400      	movs	r4, #0
10010002:	3b08      	subs	r3, #8
10010004:	71ab      	strb	r3, [r5, #6]
10010006:	1c28      	adds	r0, r5, #0
10010008:	4b06      	ldr	r3, [pc, #24]	; (10010024 <gapc_bond_req_ind+0xdc>)
1001000a:	71ec      	strb	r4, [r5, #7]
1001000c:	4798      	blx	r3
1001000e:	2000      	movs	r0, #0
10010010:	bd70      	pop	{r4, r5, r6, pc}
10010012:	46c0      	nop			; (mov r8, r8)
10010014:	10018000 	.word	0x10018000
10010018:	10017c90 	.word	0x10017c90
1001001c:	10017d22 	.word	0x10017d22
10010020:	1001255f 	.word	0x1001255f
10010024:	1000f8e9 	.word	0x1000f8e9

10010028 <gapc_bond_cfm_handler_pair_resp>:
10010028:	b5f0      	push	{r4, r5, r6, r7, lr}
1001002a:	b085      	sub	sp, #20
1001002c:	1c07      	adds	r7, r0, #0
1001002e:	a80a      	add	r0, sp, #40	; 0x28
10010030:	7806      	ldrb	r6, [r0, #0]
10010032:	a80b      	add	r0, sp, #44	; 0x2c
10010034:	7805      	ldrb	r5, [r0, #0]
10010036:	a80c      	add	r0, sp, #48	; 0x30
10010038:	7800      	ldrb	r0, [r0, #0]
1001003a:	2414      	movs	r4, #20
1001003c:	9002      	str	r0, [sp, #8]
1001003e:	a80d      	add	r0, sp, #52	; 0x34
10010040:	7800      	ldrb	r0, [r0, #0]
10010042:	9301      	str	r3, [sp, #4]
10010044:	9003      	str	r0, [sp, #12]
10010046:	a80e      	add	r0, sp, #56	; 0x38
10010048:	8800      	ldrh	r0, [r0, #0]
1001004a:	4684      	mov	ip, r0
1001004c:	4812      	ldr	r0, [pc, #72]	; (10010098 <gapc_bond_cfm_handler_pair_resp+0x70>)
1001004e:	7004      	strb	r4, [r0, #0]
10010050:	3c06      	subs	r4, #6
10010052:	7044      	strb	r4, [r0, #1]
10010054:	7084      	strb	r4, [r0, #2]
10010056:	4664      	mov	r4, ip
10010058:	70c4      	strb	r4, [r0, #3]
1001005a:	4c10      	ldr	r4, [pc, #64]	; (1001009c <gapc_bond_cfm_handler_pair_resp+0x74>)
1001005c:	7247      	strb	r7, [r0, #9]
1001005e:	8823      	ldrh	r3, [r4, #0]
10010060:	8824      	ldrh	r4, [r4, #0]
10010062:	7103      	strb	r3, [r0, #4]
10010064:	466b      	mov	r3, sp
10010066:	791b      	ldrb	r3, [r3, #4]
10010068:	0a24      	lsrs	r4, r4, #8
1001006a:	7303      	strb	r3, [r0, #12]
1001006c:	466b      	mov	r3, sp
1001006e:	7a1b      	ldrb	r3, [r3, #8]
10010070:	7144      	strb	r4, [r0, #5]
10010072:	73c3      	strb	r3, [r0, #15]
10010074:	466b      	mov	r3, sp
10010076:	7b1b      	ldrb	r3, [r3, #12]
10010078:	2401      	movs	r4, #1
1001007a:	7403      	strb	r3, [r0, #16]
1001007c:	2309      	movs	r3, #9
1001007e:	7183      	strb	r3, [r0, #6]
10010080:	2300      	movs	r3, #0
10010082:	7204      	strb	r4, [r0, #8]
10010084:	7281      	strb	r1, [r0, #10]
10010086:	72c2      	strb	r2, [r0, #11]
10010088:	7346      	strb	r6, [r0, #13]
1001008a:	7385      	strb	r5, [r0, #14]
1001008c:	71c3      	strb	r3, [r0, #7]
1001008e:	2111      	movs	r1, #17
10010090:	4b03      	ldr	r3, [pc, #12]	; (100100a0 <gapc_bond_cfm_handler_pair_resp+0x78>)
10010092:	4798      	blx	r3
10010094:	b005      	add	sp, #20
10010096:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010098:	10018000 	.word	0x10018000
1001009c:	10017c90 	.word	0x10017c90
100100a0:	1000f8e9 	.word	0x1000f8e9

100100a4 <gapc_bond_cfm_handler_key_exch>:
100100a4:	b538      	push	{r3, r4, r5, lr}
100100a6:	2514      	movs	r5, #20
100100a8:	4c0d      	ldr	r4, [pc, #52]	; (100100e0 <gapc_bond_cfm_handler_key_exch+0x3c>)
100100aa:	70e3      	strb	r3, [r4, #3]
100100ac:	4b0d      	ldr	r3, [pc, #52]	; (100100e4 <gapc_bond_cfm_handler_key_exch+0x40>)
100100ae:	7025      	strb	r5, [r4, #0]
100100b0:	3d06      	subs	r5, #6
100100b2:	7065      	strb	r5, [r4, #1]
100100b4:	70a5      	strb	r5, [r4, #2]
100100b6:	881d      	ldrh	r5, [r3, #0]
100100b8:	881b      	ldrh	r3, [r3, #0]
100100ba:	7220      	strb	r0, [r4, #8]
100100bc:	0a1b      	lsrs	r3, r3, #8
100100be:	7163      	strb	r3, [r4, #5]
100100c0:	7261      	strb	r1, [r4, #9]
100100c2:	4b09      	ldr	r3, [pc, #36]	; (100100e8 <gapc_bond_cfm_handler_key_exch+0x44>)
100100c4:	1c11      	adds	r1, r2, #0
100100c6:	4809      	ldr	r0, [pc, #36]	; (100100ec <gapc_bond_cfm_handler_key_exch+0x48>)
100100c8:	2210      	movs	r2, #16
100100ca:	7125      	strb	r5, [r4, #4]
100100cc:	4798      	blx	r3
100100ce:	2312      	movs	r3, #18
100100d0:	71a3      	strb	r3, [r4, #6]
100100d2:	2300      	movs	r3, #0
100100d4:	1c20      	adds	r0, r4, #0
100100d6:	71e3      	strb	r3, [r4, #7]
100100d8:	211a      	movs	r1, #26
100100da:	4b05      	ldr	r3, [pc, #20]	; (100100f0 <gapc_bond_cfm_handler_key_exch+0x4c>)
100100dc:	4798      	blx	r3
100100de:	bd38      	pop	{r3, r4, r5, pc}
100100e0:	10018000 	.word	0x10018000
100100e4:	10017c90 	.word	0x10017c90
100100e8:	1001255f 	.word	0x1001255f
100100ec:	1001800a 	.word	0x1001800a
100100f0:	1000f8e9 	.word	0x1000f8e9

100100f4 <gapc_security_cmd_handler>:
100100f4:	221a      	movs	r2, #26
100100f6:	b508      	push	{r3, lr}
100100f8:	4b0b      	ldr	r3, [pc, #44]	; (10010128 <gapc_security_cmd_handler+0x34>)
100100fa:	701a      	strb	r2, [r3, #0]
100100fc:	3a0c      	subs	r2, #12
100100fe:	705a      	strb	r2, [r3, #1]
10010100:	709a      	strb	r2, [r3, #2]
10010102:	4a0a      	ldr	r2, [pc, #40]	; (1001012c <gapc_security_cmd_handler+0x38>)
10010104:	70d8      	strb	r0, [r3, #3]
10010106:	8810      	ldrh	r0, [r2, #0]
10010108:	8812      	ldrh	r2, [r2, #0]
1001010a:	7118      	strb	r0, [r3, #4]
1001010c:	0a12      	lsrs	r2, r2, #8
1001010e:	715a      	strb	r2, [r3, #5]
10010110:	220c      	movs	r2, #12
10010112:	721a      	strb	r2, [r3, #8]
10010114:	3a0a      	subs	r2, #10
10010116:	719a      	strb	r2, [r3, #6]
10010118:	2200      	movs	r2, #0
1001011a:	7259      	strb	r1, [r3, #9]
1001011c:	71da      	strb	r2, [r3, #7]
1001011e:	1c18      	adds	r0, r3, #0
10010120:	210a      	movs	r1, #10
10010122:	4b03      	ldr	r3, [pc, #12]	; (10010130 <gapc_security_cmd_handler+0x3c>)
10010124:	4798      	blx	r3
10010126:	bd08      	pop	{r3, pc}
10010128:	10018000 	.word	0x10018000
1001012c:	10017c90 	.word	0x10017c90
10010130:	1000f8e9 	.word	0x1000f8e9

10010134 <gapc_encrypt_cmd_handler>:
10010134:	b5f0      	push	{r4, r5, r6, r7, lr}
10010136:	2500      	movs	r5, #0
10010138:	b089      	sub	sp, #36	; 0x24
1001013a:	9306      	str	r3, [sp, #24]
1001013c:	ab0e      	add	r3, sp, #56	; 0x38
1001013e:	781b      	ldrb	r3, [r3, #0]
10010140:	1c17      	adds	r7, r2, #0
10010142:	9307      	str	r3, [sp, #28]
10010144:	ab0f      	add	r3, sp, #60	; 0x3c
10010146:	781b      	ldrb	r3, [r3, #0]
10010148:	4a19      	ldr	r2, [pc, #100]	; (100101b0 <gapc_encrypt_cmd_handler+0x7c>)
1001014a:	1c06      	adds	r6, r0, #0
1001014c:	9105      	str	r1, [sp, #20]
1001014e:	9300      	str	r3, [sp, #0]
10010150:	9002      	str	r0, [sp, #8]
10010152:	1c29      	adds	r1, r5, #0
10010154:	1c2b      	adds	r3, r5, #0
10010156:	9501      	str	r5, [sp, #4]
10010158:	1c10      	adds	r0, r2, #0
1001015a:	4c16      	ldr	r4, [pc, #88]	; (100101b4 <gapc_encrypt_cmd_handler+0x80>)
1001015c:	47a0      	blx	r4
1001015e:	2316      	movs	r3, #22
10010160:	4c15      	ldr	r4, [pc, #84]	; (100101b8 <gapc_encrypt_cmd_handler+0x84>)
10010162:	9905      	ldr	r1, [sp, #20]
10010164:	7023      	strb	r3, [r4, #0]
10010166:	3b08      	subs	r3, #8
10010168:	7063      	strb	r3, [r4, #1]
1001016a:	70a3      	strb	r3, [r4, #2]
1001016c:	4b13      	ldr	r3, [pc, #76]	; (100101bc <gapc_encrypt_cmd_handler+0x88>)
1001016e:	70e6      	strb	r6, [r4, #3]
10010170:	881a      	ldrh	r2, [r3, #0]
10010172:	881b      	ldrh	r3, [r3, #0]
10010174:	7122      	strb	r2, [r4, #4]
10010176:	0a1b      	lsrs	r3, r3, #8
10010178:	7163      	strb	r3, [r4, #5]
1001017a:	230b      	movs	r3, #11
1001017c:	4e10      	ldr	r6, [pc, #64]	; (100101c0 <gapc_encrypt_cmd_handler+0x8c>)
1001017e:	2210      	movs	r2, #16
10010180:	4810      	ldr	r0, [pc, #64]	; (100101c4 <gapc_encrypt_cmd_handler+0x90>)
10010182:	7223      	strb	r3, [r4, #8]
10010184:	7265      	strb	r5, [r4, #9]
10010186:	47b0      	blx	r6
10010188:	0a3b      	lsrs	r3, r7, #8
1001018a:	9906      	ldr	r1, [sp, #24]
1001018c:	2208      	movs	r2, #8
1001018e:	480e      	ldr	r0, [pc, #56]	; (100101c8 <gapc_encrypt_cmd_handler+0x94>)
10010190:	76e3      	strb	r3, [r4, #27]
10010192:	76a7      	strb	r7, [r4, #26]
10010194:	47b0      	blx	r6
10010196:	466a      	mov	r2, sp
10010198:	7f12      	ldrb	r2, [r2, #28]
1001019a:	1d63      	adds	r3, r4, #5
1001019c:	77da      	strb	r2, [r3, #31]
1001019e:	231d      	movs	r3, #29
100101a0:	1c20      	adds	r0, r4, #0
100101a2:	71a3      	strb	r3, [r4, #6]
100101a4:	2125      	movs	r1, #37	; 0x25
100101a6:	4b09      	ldr	r3, [pc, #36]	; (100101cc <gapc_encrypt_cmd_handler+0x98>)
100101a8:	71e5      	strb	r5, [r4, #7]
100101aa:	4798      	blx	r3
100101ac:	b009      	add	sp, #36	; 0x24
100101ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
100101b0:	10016e50 	.word	0x10016e50
100101b4:	1000fbed 	.word	0x1000fbed
100101b8:	10018000 	.word	0x10018000
100101bc:	10017c90 	.word	0x10017c90
100101c0:	1001255f 	.word	0x1001255f
100101c4:	1001800a 	.word	0x1001800a
100101c8:	1001801c 	.word	0x1001801c
100101cc:	1000f8e9 	.word	0x1000f8e9

100101d0 <gapc_encrypt_req_ind>:
100101d0:	b508      	push	{r3, lr}
100101d2:	0a00      	lsrs	r0, r0, #8
100101d4:	8010      	strh	r0, [r2, #0]
100101d6:	784b      	ldrb	r3, [r1, #1]
100101d8:	7808      	ldrb	r0, [r1, #0]
100101da:	021b      	lsls	r3, r3, #8
100101dc:	4303      	orrs	r3, r0
100101de:	8053      	strh	r3, [r2, #2]
100101e0:	1d10      	adds	r0, r2, #4
100101e2:	3102      	adds	r1, #2
100101e4:	2208      	movs	r2, #8
100101e6:	4b01      	ldr	r3, [pc, #4]	; (100101ec <gapc_encrypt_req_ind+0x1c>)
100101e8:	4798      	blx	r3
100101ea:	bd08      	pop	{r3, pc}
100101ec:	1001255f 	.word	0x1001255f

100101f0 <gapc_encrypt_cfm_handler>:
100101f0:	b5f0      	push	{r4, r5, r6, r7, lr}
100101f2:	2500      	movs	r5, #0
100101f4:	b087      	sub	sp, #28
100101f6:	9304      	str	r3, [sp, #16]
100101f8:	ab0c      	add	r3, sp, #48	; 0x30
100101fa:	781b      	ldrb	r3, [r3, #0]
100101fc:	1c17      	adds	r7, r2, #0
100101fe:	4a15      	ldr	r2, [pc, #84]	; (10010254 <gapc_encrypt_cfm_handler+0x64>)
10010200:	1c06      	adds	r6, r0, #0
10010202:	9305      	str	r3, [sp, #20]
10010204:	9100      	str	r1, [sp, #0]
10010206:	9002      	str	r0, [sp, #8]
10010208:	1c29      	adds	r1, r5, #0
1001020a:	1c2b      	adds	r3, r5, #0
1001020c:	9501      	str	r5, [sp, #4]
1001020e:	1c10      	adds	r0, r2, #0
10010210:	4c11      	ldr	r4, [pc, #68]	; (10010258 <gapc_encrypt_cfm_handler+0x68>)
10010212:	47a0      	blx	r4
10010214:	2318      	movs	r3, #24
10010216:	4c11      	ldr	r4, [pc, #68]	; (1001025c <gapc_encrypt_cfm_handler+0x6c>)
10010218:	9904      	ldr	r1, [sp, #16]
1001021a:	7023      	strb	r3, [r4, #0]
1001021c:	3b0a      	subs	r3, #10
1001021e:	7063      	strb	r3, [r4, #1]
10010220:	70a3      	strb	r3, [r4, #2]
10010222:	4b0f      	ldr	r3, [pc, #60]	; (10010260 <gapc_encrypt_cfm_handler+0x70>)
10010224:	480f      	ldr	r0, [pc, #60]	; (10010264 <gapc_encrypt_cfm_handler+0x74>)
10010226:	881a      	ldrh	r2, [r3, #0]
10010228:	881b      	ldrh	r3, [r3, #0]
1001022a:	7122      	strb	r2, [r4, #4]
1001022c:	0a1b      	lsrs	r3, r3, #8
1001022e:	7163      	strb	r3, [r4, #5]
10010230:	2210      	movs	r2, #16
10010232:	4b0d      	ldr	r3, [pc, #52]	; (10010268 <gapc_encrypt_cfm_handler+0x78>)
10010234:	70e6      	strb	r6, [r4, #3]
10010236:	7227      	strb	r7, [r4, #8]
10010238:	4798      	blx	r3
1001023a:	466b      	mov	r3, sp
1001023c:	7d1b      	ldrb	r3, [r3, #20]
1001023e:	1c20      	adds	r0, r4, #0
10010240:	7663      	strb	r3, [r4, #25]
10010242:	2312      	movs	r3, #18
10010244:	211a      	movs	r1, #26
10010246:	71a3      	strb	r3, [r4, #6]
10010248:	4b08      	ldr	r3, [pc, #32]	; (1001026c <gapc_encrypt_cfm_handler+0x7c>)
1001024a:	71e5      	strb	r5, [r4, #7]
1001024c:	4798      	blx	r3
1001024e:	b007      	add	sp, #28
10010250:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010252:	46c0      	nop			; (mov r8, r8)
10010254:	10016e60 	.word	0x10016e60
10010258:	1000fbed 	.word	0x1000fbed
1001025c:	10018000 	.word	0x10018000
10010260:	10017c90 	.word	0x10017c90
10010264:	10018009 	.word	0x10018009
10010268:	1001255f 	.word	0x1001255f
1001026c:	1000f8e9 	.word	0x1000f8e9

10010270 <gapc_encrypt_ind>:
10010270:	780b      	ldrb	r3, [r1, #0]
10010272:	0a00      	lsrs	r0, r0, #8
10010274:	70d3      	strb	r3, [r2, #3]
10010276:	2300      	movs	r3, #0
10010278:	8010      	strh	r0, [r2, #0]
1001027a:	7093      	strb	r3, [r2, #2]
1001027c:	4770      	bx	lr
	...

10010280 <gapc_param_update_cfm_handler>:
10010280:	b538      	push	{r3, r4, r5, lr}
10010282:	2410      	movs	r4, #16
10010284:	1c05      	adds	r5, r0, #0
10010286:	480e      	ldr	r0, [pc, #56]	; (100102c0 <gapc_param_update_cfm_handler+0x40>)
10010288:	7004      	strb	r4, [r0, #0]
1001028a:	3c02      	subs	r4, #2
1001028c:	7044      	strb	r4, [r0, #1]
1001028e:	7084      	strb	r4, [r0, #2]
10010290:	4c0c      	ldr	r4, [pc, #48]	; (100102c4 <gapc_param_update_cfm_handler+0x44>)
10010292:	70c5      	strb	r5, [r0, #3]
10010294:	8825      	ldrh	r5, [r4, #0]
10010296:	8824      	ldrh	r4, [r4, #0]
10010298:	72c3      	strb	r3, [r0, #11]
1001029a:	0a1b      	lsrs	r3, r3, #8
1001029c:	0a24      	lsrs	r4, r4, #8
1001029e:	7303      	strb	r3, [r0, #12]
100102a0:	2305      	movs	r3, #5
100102a2:	7144      	strb	r4, [r0, #5]
100102a4:	2400      	movs	r4, #0
100102a6:	7201      	strb	r1, [r0, #8]
100102a8:	7242      	strb	r2, [r0, #9]
100102aa:	7183      	strb	r3, [r0, #6]
100102ac:	0a12      	lsrs	r2, r2, #8
100102ae:	210d      	movs	r1, #13
100102b0:	4b05      	ldr	r3, [pc, #20]	; (100102c8 <gapc_param_update_cfm_handler+0x48>)
100102b2:	7105      	strb	r5, [r0, #4]
100102b4:	7282      	strb	r2, [r0, #10]
100102b6:	71c4      	strb	r4, [r0, #7]
100102b8:	4798      	blx	r3
100102ba:	1c20      	adds	r0, r4, #0
100102bc:	bd38      	pop	{r3, r4, r5, pc}
100102be:	46c0      	nop			; (mov r8, r8)
100102c0:	10018000 	.word	0x10018000
100102c4:	10017c90 	.word	0x10017c90
100102c8:	1000f8e9 	.word	0x1000f8e9

100102cc <gapc_param_updated_ind>:
100102cc:	2300      	movs	r3, #0
100102ce:	0a00      	lsrs	r0, r0, #8
100102d0:	8010      	strh	r0, [r2, #0]
100102d2:	7093      	strb	r3, [r2, #2]
100102d4:	784b      	ldrb	r3, [r1, #1]
100102d6:	7808      	ldrb	r0, [r1, #0]
100102d8:	021b      	lsls	r3, r3, #8
100102da:	4303      	orrs	r3, r0
100102dc:	8093      	strh	r3, [r2, #4]
100102de:	78cb      	ldrb	r3, [r1, #3]
100102e0:	7888      	ldrb	r0, [r1, #2]
100102e2:	021b      	lsls	r3, r3, #8
100102e4:	4303      	orrs	r3, r0
100102e6:	80d3      	strh	r3, [r2, #6]
100102e8:	794b      	ldrb	r3, [r1, #5]
100102ea:	7909      	ldrb	r1, [r1, #4]
100102ec:	021b      	lsls	r3, r3, #8
100102ee:	430b      	orrs	r3, r1
100102f0:	2007      	movs	r0, #7
100102f2:	8113      	strh	r3, [r2, #8]
100102f4:	4770      	bx	lr

100102f6 <gapc_param_updated_req_ind>:
100102f6:	0a00      	lsrs	r0, r0, #8
100102f8:	8010      	strh	r0, [r2, #0]
100102fa:	784b      	ldrb	r3, [r1, #1]
100102fc:	7808      	ldrb	r0, [r1, #0]
100102fe:	021b      	lsls	r3, r3, #8
10010300:	4303      	orrs	r3, r0
10010302:	8053      	strh	r3, [r2, #2]
10010304:	78cb      	ldrb	r3, [r1, #3]
10010306:	7888      	ldrb	r0, [r1, #2]
10010308:	021b      	lsls	r3, r3, #8
1001030a:	4303      	orrs	r3, r0
1001030c:	8093      	strh	r3, [r2, #4]
1001030e:	794b      	ldrb	r3, [r1, #5]
10010310:	7908      	ldrb	r0, [r1, #4]
10010312:	021b      	lsls	r3, r3, #8
10010314:	4303      	orrs	r3, r0
10010316:	80d3      	strh	r3, [r2, #6]
10010318:	79cb      	ldrb	r3, [r1, #7]
1001031a:	7989      	ldrb	r1, [r1, #6]
1001031c:	021b      	lsls	r3, r3, #8
1001031e:	430b      	orrs	r3, r1
10010320:	2008      	movs	r0, #8
10010322:	8113      	strh	r3, [r2, #8]
10010324:	4770      	bx	lr
	...

10010328 <gapc_dev_info_req_ind_handler>:
10010328:	b508      	push	{r3, lr}
1001032a:	1c0b      	adds	r3, r1, #0
1001032c:	0a01      	lsrs	r1, r0, #8
1001032e:	8011      	strh	r1, [r2, #0]
10010330:	7818      	ldrb	r0, [r3, #0]
10010332:	7090      	strb	r0, [r2, #2]
10010334:	2800      	cmp	r0, #0
10010336:	d104      	bne.n	10010342 <gapc_dev_info_req_ind_handler+0x1a>
10010338:	4b03      	ldr	r3, [pc, #12]	; (10010348 <gapc_dev_info_req_ind_handler+0x20>)
1001033a:	33aa      	adds	r3, #170	; 0xaa
1001033c:	881b      	ldrh	r3, [r3, #0]
1001033e:	2b00      	cmp	r3, #0
10010340:	d001      	beq.n	10010346 <gapc_dev_info_req_ind_handler+0x1e>
10010342:	4b02      	ldr	r3, [pc, #8]	; (1001034c <gapc_dev_info_req_ind_handler+0x24>)
10010344:	4798      	blx	r3
10010346:	bd08      	pop	{r3, pc}
10010348:	10017d22 	.word	0x10017d22
1001034c:	1000f9f9 	.word	0x1000f9f9

10010350 <gapc_sec_req_ind>:
10010350:	0a00      	lsrs	r0, r0, #8
10010352:	8010      	strh	r0, [r2, #0]
10010354:	7809      	ldrb	r1, [r1, #0]
10010356:	2301      	movs	r3, #1
10010358:	1c08      	adds	r0, r1, #0
1001035a:	0889      	lsrs	r1, r1, #2
1001035c:	4018      	ands	r0, r3
1001035e:	400b      	ands	r3, r1
10010360:	70d0      	strb	r0, [r2, #3]
10010362:	7113      	strb	r3, [r2, #4]
10010364:	4770      	bx	lr

10010366 <gapc_sign_counter_ind_handler>:
10010366:	0a00      	lsrs	r0, r0, #8
10010368:	8010      	strh	r0, [r2, #0]
1001036a:	784b      	ldrb	r3, [r1, #1]
1001036c:	0218      	lsls	r0, r3, #8
1001036e:	788b      	ldrb	r3, [r1, #2]
10010370:	041b      	lsls	r3, r3, #16
10010372:	4303      	orrs	r3, r0
10010374:	7808      	ldrb	r0, [r1, #0]
10010376:	4303      	orrs	r3, r0
10010378:	78c8      	ldrb	r0, [r1, #3]
1001037a:	0600      	lsls	r0, r0, #24
1001037c:	4303      	orrs	r3, r0
1001037e:	6053      	str	r3, [r2, #4]
10010380:	794b      	ldrb	r3, [r1, #5]
10010382:	0218      	lsls	r0, r3, #8
10010384:	798b      	ldrb	r3, [r1, #6]
10010386:	041b      	lsls	r3, r3, #16
10010388:	4303      	orrs	r3, r0
1001038a:	7908      	ldrb	r0, [r1, #4]
1001038c:	79c9      	ldrb	r1, [r1, #7]
1001038e:	4303      	orrs	r3, r0
10010390:	0609      	lsls	r1, r1, #24
10010392:	430b      	orrs	r3, r1
10010394:	2000      	movs	r0, #0
10010396:	6093      	str	r3, [r2, #8]
10010398:	4770      	bx	lr
	...

1001039c <gapc_peer_att_info_ind_handler>:
1001039c:	b510      	push	{r4, lr}
1001039e:	0a00      	lsrs	r0, r0, #8
100103a0:	8010      	strh	r0, [r2, #0]
100103a2:	7808      	ldrb	r0, [r1, #0]
100103a4:	7090      	strb	r0, [r2, #2]
100103a6:	788b      	ldrb	r3, [r1, #2]
100103a8:	784c      	ldrb	r4, [r1, #1]
100103aa:	021b      	lsls	r3, r3, #8
100103ac:	4323      	orrs	r3, r4
100103ae:	8093      	strh	r3, [r2, #4]
100103b0:	2801      	cmp	r0, #1
100103b2:	d027      	beq.n	10010404 <gapc_peer_att_info_ind_handler+0x68>
100103b4:	2800      	cmp	r0, #0
100103b6:	d017      	beq.n	100103e8 <gapc_peer_att_info_ind_handler+0x4c>
100103b8:	2802      	cmp	r0, #2
100103ba:	d12a      	bne.n	10010412 <gapc_peer_att_info_ind_handler+0x76>
100103bc:	790b      	ldrb	r3, [r1, #4]
100103be:	78c8      	ldrb	r0, [r1, #3]
100103c0:	021b      	lsls	r3, r3, #8
100103c2:	4303      	orrs	r3, r0
100103c4:	8113      	strh	r3, [r2, #8]
100103c6:	798b      	ldrb	r3, [r1, #6]
100103c8:	7948      	ldrb	r0, [r1, #5]
100103ca:	021b      	lsls	r3, r3, #8
100103cc:	4303      	orrs	r3, r0
100103ce:	80d3      	strh	r3, [r2, #6]
100103d0:	7a0b      	ldrb	r3, [r1, #8]
100103d2:	79c8      	ldrb	r0, [r1, #7]
100103d4:	021b      	lsls	r3, r3, #8
100103d6:	4303      	orrs	r3, r0
100103d8:	8193      	strh	r3, [r2, #12]
100103da:	7a8b      	ldrb	r3, [r1, #10]
100103dc:	7a49      	ldrb	r1, [r1, #9]
100103de:	021b      	lsls	r3, r3, #8
100103e0:	430b      	orrs	r3, r1
100103e2:	8153      	strh	r3, [r2, #10]
100103e4:	2306      	movs	r3, #6
100103e6:	e013      	b.n	10010410 <gapc_peer_att_info_ind_handler+0x74>
100103e8:	1c14      	adds	r4, r2, #0
100103ea:	1c20      	adds	r0, r4, #0
100103ec:	790a      	ldrb	r2, [r1, #4]
100103ee:	78cb      	ldrb	r3, [r1, #3]
100103f0:	0212      	lsls	r2, r2, #8
100103f2:	431a      	orrs	r2, r3
100103f4:	80e2      	strh	r2, [r4, #6]
100103f6:	4b07      	ldr	r3, [pc, #28]	; (10010414 <gapc_peer_att_info_ind_handler+0x78>)
100103f8:	3008      	adds	r0, #8
100103fa:	3105      	adds	r1, #5
100103fc:	4798      	blx	r3
100103fe:	2302      	movs	r3, #2
10010400:	70a3      	strb	r3, [r4, #2]
10010402:	e006      	b.n	10010412 <gapc_peer_att_info_ind_handler+0x76>
10010404:	790b      	ldrb	r3, [r1, #4]
10010406:	78c9      	ldrb	r1, [r1, #3]
10010408:	021b      	lsls	r3, r3, #8
1001040a:	430b      	orrs	r3, r1
1001040c:	80d3      	strh	r3, [r2, #6]
1001040e:	2305      	movs	r3, #5
10010410:	7093      	strb	r3, [r2, #2]
10010412:	bd10      	pop	{r4, pc}
10010414:	1001255f 	.word	0x1001255f

10010418 <gapc_con_channel_map_ind_handler>:
10010418:	b508      	push	{r3, lr}
1001041a:	2300      	movs	r3, #0
1001041c:	0a00      	lsrs	r0, r0, #8
1001041e:	7013      	strb	r3, [r2, #0]
10010420:	8050      	strh	r0, [r2, #2]
10010422:	4b02      	ldr	r3, [pc, #8]	; (1001042c <gapc_con_channel_map_ind_handler+0x14>)
10010424:	1d10      	adds	r0, r2, #4
10010426:	2205      	movs	r2, #5
10010428:	4798      	blx	r3
1001042a:	bd08      	pop	{r3, pc}
1001042c:	1001255f 	.word	0x1001255f

10010430 <gapc_lecb_connected>:
10010430:	7843      	ldrb	r3, [r0, #1]
10010432:	7802      	ldrb	r2, [r0, #0]
10010434:	021b      	lsls	r3, r3, #8
10010436:	4313      	orrs	r3, r2
10010438:	800b      	strh	r3, [r1, #0]
1001043a:	78c3      	ldrb	r3, [r0, #3]
1001043c:	7882      	ldrb	r2, [r0, #2]
1001043e:	021b      	lsls	r3, r3, #8
10010440:	4313      	orrs	r3, r2
10010442:	804b      	strh	r3, [r1, #2]
10010444:	7943      	ldrb	r3, [r0, #5]
10010446:	7902      	ldrb	r2, [r0, #4]
10010448:	021b      	lsls	r3, r3, #8
1001044a:	4313      	orrs	r3, r2
1001044c:	808b      	strh	r3, [r1, #4]
1001044e:	79c3      	ldrb	r3, [r0, #7]
10010450:	7982      	ldrb	r2, [r0, #6]
10010452:	021b      	lsls	r3, r3, #8
10010454:	4313      	orrs	r3, r2
10010456:	80cb      	strh	r3, [r1, #6]
10010458:	2300      	movs	r3, #0
1001045a:	720b      	strb	r3, [r1, #8]
1001045c:	4770      	bx	lr

1001045e <gapc_lecb_disconnected>:
1001045e:	7843      	ldrb	r3, [r0, #1]
10010460:	7802      	ldrb	r2, [r0, #0]
10010462:	021b      	lsls	r3, r3, #8
10010464:	4313      	orrs	r3, r2
10010466:	800b      	strh	r3, [r1, #0]
10010468:	78c3      	ldrb	r3, [r0, #3]
1001046a:	7882      	ldrb	r2, [r0, #2]
1001046c:	021b      	lsls	r3, r3, #8
1001046e:	4313      	orrs	r3, r2
10010470:	804b      	strh	r3, [r1, #2]
10010472:	4770      	bx	lr

10010474 <gapc_lecb_connect_req_ind>:
10010474:	7843      	ldrb	r3, [r0, #1]
10010476:	7802      	ldrb	r2, [r0, #0]
10010478:	021b      	lsls	r3, r3, #8
1001047a:	4313      	orrs	r3, r2
1001047c:	800b      	strh	r3, [r1, #0]
1001047e:	78c3      	ldrb	r3, [r0, #3]
10010480:	7882      	ldrb	r2, [r0, #2]
10010482:	021b      	lsls	r3, r3, #8
10010484:	4313      	orrs	r3, r2
10010486:	804b      	strh	r3, [r1, #2]
10010488:	7943      	ldrb	r3, [r0, #5]
1001048a:	7902      	ldrb	r2, [r0, #4]
1001048c:	021b      	lsls	r3, r3, #8
1001048e:	4313      	orrs	r3, r2
10010490:	808b      	strh	r3, [r1, #4]
10010492:	79c3      	ldrb	r3, [r0, #7]
10010494:	7982      	ldrb	r2, [r0, #6]
10010496:	021b      	lsls	r3, r3, #8
10010498:	4313      	orrs	r3, r2
1001049a:	80cb      	strh	r3, [r1, #6]
1001049c:	4770      	bx	lr

1001049e <gapc_lecb_add_credit_resp_handler>:
1001049e:	7843      	ldrb	r3, [r0, #1]
100104a0:	7802      	ldrb	r2, [r0, #0]
100104a2:	021b      	lsls	r3, r3, #8
100104a4:	4313      	orrs	r3, r2
100104a6:	800b      	strh	r3, [r1, #0]
100104a8:	78c3      	ldrb	r3, [r0, #3]
100104aa:	7882      	ldrb	r2, [r0, #2]
100104ac:	021b      	lsls	r3, r3, #8
100104ae:	4313      	orrs	r3, r2
100104b0:	804b      	strh	r3, [r1, #2]
100104b2:	7943      	ldrb	r3, [r0, #5]
100104b4:	7902      	ldrb	r2, [r0, #4]
100104b6:	021b      	lsls	r3, r3, #8
100104b8:	4313      	orrs	r3, r2
100104ba:	808b      	strh	r3, [r1, #4]
100104bc:	4770      	bx	lr
	...

100104c0 <gapm_reset_req_handler>:
100104c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
100104c2:	466b      	mov	r3, sp
100104c4:	4915      	ldr	r1, [pc, #84]	; (1001051c <gapm_reset_req_handler+0x5c>)
100104c6:	4816      	ldr	r0, [pc, #88]	; (10010520 <gapm_reset_req_handler+0x60>)
100104c8:	880c      	ldrh	r4, [r1, #0]
100104ca:	8809      	ldrh	r1, [r1, #0]
100104cc:	1ddd      	adds	r5, r3, #7
100104ce:	0a09      	lsrs	r1, r1, #8
100104d0:	2300      	movs	r3, #0
100104d2:	2202      	movs	r2, #2
100104d4:	7141      	strb	r1, [r0, #5]
100104d6:	26d0      	movs	r6, #208	; 0xd0
100104d8:	2101      	movs	r1, #1
100104da:	7104      	strb	r4, [r0, #4]
100104dc:	4c11      	ldr	r4, [pc, #68]	; (10010524 <gapm_reset_req_handler+0x64>)
100104de:	702b      	strb	r3, [r5, #0]
100104e0:	7002      	strb	r2, [r0, #0]
100104e2:	70c3      	strb	r3, [r0, #3]
100104e4:	320b      	adds	r2, #11
100104e6:	7201      	strb	r1, [r0, #8]
100104e8:	7181      	strb	r1, [r0, #6]
100104ea:	71c3      	strb	r3, [r0, #7]
100104ec:	3108      	adds	r1, #8
100104ee:	4b0e      	ldr	r3, [pc, #56]	; (10010528 <gapm_reset_req_handler+0x68>)
100104f0:	0136      	lsls	r6, r6, #4
100104f2:	7042      	strb	r2, [r0, #1]
100104f4:	7082      	strb	r2, [r0, #2]
100104f6:	80a2      	strh	r2, [r4, #4]
100104f8:	8026      	strh	r6, [r4, #0]
100104fa:	4798      	blx	r3
100104fc:	1c28      	adds	r0, r5, #0
100104fe:	4b0b      	ldr	r3, [pc, #44]	; (1001052c <gapm_reset_req_handler+0x6c>)
10010500:	4798      	blx	r3
10010502:	782b      	ldrb	r3, [r5, #0]
10010504:	20e2      	movs	r0, #226	; 0xe2
10010506:	2b00      	cmp	r3, #0
10010508:	d106      	bne.n	10010518 <gapm_reset_req_handler+0x58>
1001050a:	68a3      	ldr	r3, [r4, #8]
1001050c:	20e2      	movs	r0, #226	; 0xe2
1001050e:	781a      	ldrb	r2, [r3, #0]
10010510:	785b      	ldrb	r3, [r3, #1]
10010512:	2a01      	cmp	r2, #1
10010514:	d100      	bne.n	10010518 <gapm_reset_req_handler+0x58>
10010516:	1c18      	adds	r0, r3, #0
10010518:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
1001051a:	46c0      	nop			; (mov r8, r8)
1001051c:	10017c90 	.word	0x10017c90
10010520:	10018000 	.word	0x10018000
10010524:	10017c84 	.word	0x10017c84
10010528:	1000f8e9 	.word	0x1000f8e9
1001052c:	1000f94d 	.word	0x1000f94d

10010530 <gapm_set_dev_config_cmd_handler>:
10010530:	b5f0      	push	{r4, r5, r6, r7, lr}
10010532:	b089      	sub	sp, #36	; 0x24
10010534:	9303      	str	r3, [sp, #12]
10010536:	ab0e      	add	r3, sp, #56	; 0x38
10010538:	781b      	ldrb	r3, [r3, #0]
1001053a:	4c37      	ldr	r4, [pc, #220]	; (10010618 <gapm_set_dev_config_cmd_handler+0xe8>)
1001053c:	9304      	str	r3, [sp, #16]
1001053e:	ab0f      	add	r3, sp, #60	; 0x3c
10010540:	781b      	ldrb	r3, [r3, #0]
10010542:	270d      	movs	r7, #13
10010544:	9305      	str	r3, [sp, #20]
10010546:	ab10      	add	r3, sp, #64	; 0x40
10010548:	881b      	ldrh	r3, [r3, #0]
1001054a:	72a1      	strb	r1, [r4, #10]
1001054c:	9300      	str	r3, [sp, #0]
1001054e:	ab11      	add	r3, sp, #68	; 0x44
10010550:	881b      	ldrh	r3, [r3, #0]
10010552:	0a09      	lsrs	r1, r1, #8
10010554:	9301      	str	r3, [sp, #4]
10010556:	ab12      	add	r3, sp, #72	; 0x48
10010558:	881b      	ldrh	r3, [r3, #0]
1001055a:	7260      	strb	r0, [r4, #9]
1001055c:	9302      	str	r3, [sp, #8]
1001055e:	ab06      	add	r3, sp, #24
10010560:	1dde      	adds	r6, r3, #7
10010562:	2300      	movs	r3, #0
10010564:	7033      	strb	r3, [r6, #0]
10010566:	2304      	movs	r3, #4
10010568:	7023      	strb	r3, [r4, #0]
1001056a:	2300      	movs	r3, #0
1001056c:	70e3      	strb	r3, [r4, #3]
1001056e:	4b2b      	ldr	r3, [pc, #172]	; (1001061c <gapm_set_dev_config_cmd_handler+0xec>)
10010570:	72e1      	strb	r1, [r4, #11]
10010572:	881d      	ldrh	r5, [r3, #0]
10010574:	881b      	ldrh	r3, [r3, #0]
10010576:	1c11      	adds	r1, r2, #0
10010578:	0a1b      	lsrs	r3, r3, #8
1001057a:	7163      	strb	r3, [r4, #5]
1001057c:	2303      	movs	r3, #3
1001057e:	7125      	strb	r5, [r4, #4]
10010580:	2206      	movs	r2, #6
10010582:	4d27      	ldr	r5, [pc, #156]	; (10010620 <gapm_set_dev_config_cmd_handler+0xf0>)
10010584:	4827      	ldr	r0, [pc, #156]	; (10010624 <gapm_set_dev_config_cmd_handler+0xf4>)
10010586:	7223      	strb	r3, [r4, #8]
10010588:	7067      	strb	r7, [r4, #1]
1001058a:	70a7      	strb	r7, [r4, #2]
1001058c:	47a8      	blx	r5
1001058e:	9903      	ldr	r1, [sp, #12]
10010590:	2210      	movs	r2, #16
10010592:	4825      	ldr	r0, [pc, #148]	; (10010628 <gapm_set_dev_config_cmd_handler+0xf8>)
10010594:	47a8      	blx	r5
10010596:	466a      	mov	r2, sp
10010598:	7c12      	ldrb	r2, [r2, #16]
1001059a:	1ce3      	adds	r3, r4, #3
1001059c:	77da      	strb	r2, [r3, #31]
1001059e:	466a      	mov	r2, sp
100105a0:	7d12      	ldrb	r2, [r2, #20]
100105a2:	1d23      	adds	r3, r4, #4
100105a4:	77da      	strb	r2, [r3, #31]
100105a6:	466a      	mov	r2, sp
100105a8:	7812      	ldrb	r2, [r2, #0]
100105aa:	1d63      	adds	r3, r4, #5
100105ac:	77da      	strb	r2, [r3, #31]
100105ae:	9b00      	ldr	r3, [sp, #0]
100105b0:	1da2      	adds	r2, r4, #6
100105b2:	0a1b      	lsrs	r3, r3, #8
100105b4:	77d3      	strb	r3, [r2, #31]
100105b6:	466a      	mov	r2, sp
100105b8:	7912      	ldrb	r2, [r2, #4]
100105ba:	1de3      	adds	r3, r4, #7
100105bc:	77da      	strb	r2, [r3, #31]
100105be:	1c22      	adds	r2, r4, #0
100105c0:	9b01      	ldr	r3, [sp, #4]
100105c2:	3208      	adds	r2, #8
100105c4:	0a1b      	lsrs	r3, r3, #8
100105c6:	77d3      	strb	r3, [r2, #31]
100105c8:	466a      	mov	r2, sp
100105ca:	1c23      	adds	r3, r4, #0
100105cc:	7a12      	ldrb	r2, [r2, #8]
100105ce:	3328      	adds	r3, #40	; 0x28
100105d0:	701a      	strb	r2, [r3, #0]
100105d2:	1c22      	adds	r2, r4, #0
100105d4:	9b02      	ldr	r3, [sp, #8]
100105d6:	3229      	adds	r2, #41	; 0x29
100105d8:	0a1b      	lsrs	r3, r3, #8
100105da:	7013      	strb	r3, [r2, #0]
100105dc:	23d0      	movs	r3, #208	; 0xd0
100105de:	4d13      	ldr	r5, [pc, #76]	; (1001062c <gapm_set_dev_config_cmd_handler+0xfc>)
100105e0:	011b      	lsls	r3, r3, #4
100105e2:	802b      	strh	r3, [r5, #0]
100105e4:	2322      	movs	r3, #34	; 0x22
100105e6:	71a3      	strb	r3, [r4, #6]
100105e8:	2300      	movs	r3, #0
100105ea:	212a      	movs	r1, #42	; 0x2a
100105ec:	71e3      	strb	r3, [r4, #7]
100105ee:	1c20      	adds	r0, r4, #0
100105f0:	4b0f      	ldr	r3, [pc, #60]	; (10010630 <gapm_set_dev_config_cmd_handler+0x100>)
100105f2:	80af      	strh	r7, [r5, #4]
100105f4:	4798      	blx	r3
100105f6:	1c30      	adds	r0, r6, #0
100105f8:	4b0e      	ldr	r3, [pc, #56]	; (10010634 <gapm_set_dev_config_cmd_handler+0x104>)
100105fa:	4798      	blx	r3
100105fc:	7833      	ldrb	r3, [r6, #0]
100105fe:	20e2      	movs	r0, #226	; 0xe2
10010600:	2b00      	cmp	r3, #0
10010602:	d106      	bne.n	10010612 <gapm_set_dev_config_cmd_handler+0xe2>
10010604:	68ab      	ldr	r3, [r5, #8]
10010606:	20e2      	movs	r0, #226	; 0xe2
10010608:	781a      	ldrb	r2, [r3, #0]
1001060a:	785b      	ldrb	r3, [r3, #1]
1001060c:	2a03      	cmp	r2, #3
1001060e:	d100      	bne.n	10010612 <gapm_set_dev_config_cmd_handler+0xe2>
10010610:	1c18      	adds	r0, r3, #0
10010612:	b009      	add	sp, #36	; 0x24
10010614:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010616:	46c0      	nop			; (mov r8, r8)
10010618:	10018000 	.word	0x10018000
1001061c:	10017c90 	.word	0x10017c90
10010620:	1001255f 	.word	0x1001255f
10010624:	1001800c 	.word	0x1001800c
10010628:	10018012 	.word	0x10018012
1001062c:	10017c84 	.word	0x10017c84
10010630:	1000f8e9 	.word	0x1000f8e9
10010634:	1000f94d 	.word	0x1000f94d

10010638 <gapm_get_dev_config_cmd_handler>:
10010638:	4684      	mov	ip, r0
1001063a:	4663      	mov	r3, ip
1001063c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001063e:	b085      	sub	sp, #20
10010640:	9100      	str	r1, [sp, #0]
10010642:	20cf      	movs	r0, #207	; 0xcf
10010644:	2b01      	cmp	r3, #1
10010646:	d854      	bhi.n	100106f2 <gapm_get_dev_config_cmd_handler+0xba>
10010648:	2900      	cmp	r1, #0
1001064a:	d052      	beq.n	100106f2 <gapm_get_dev_config_cmd_handler+0xba>
1001064c:	2200      	movs	r2, #0
1001064e:	492a      	ldr	r1, [pc, #168]	; (100106f8 <gapm_get_dev_config_cmd_handler+0xc0>)
10010650:	ab02      	add	r3, sp, #8
10010652:	880c      	ldrh	r4, [r1, #0]
10010654:	8809      	ldrh	r1, [r1, #0]
10010656:	1d9f      	adds	r7, r3, #6
10010658:	719a      	strb	r2, [r3, #6]
1001065a:	4b28      	ldr	r3, [pc, #160]	; (100106fc <gapm_get_dev_config_cmd_handler+0xc4>)
1001065c:	0a09      	lsrs	r1, r1, #8
1001065e:	250d      	movs	r5, #13
10010660:	2606      	movs	r6, #6
10010662:	7159      	strb	r1, [r3, #5]
10010664:	4661      	mov	r1, ip
10010666:	701e      	strb	r6, [r3, #0]
10010668:	705d      	strb	r5, [r3, #1]
1001066a:	709d      	strb	r5, [r3, #2]
1001066c:	70da      	strb	r2, [r3, #3]
1001066e:	711c      	strb	r4, [r3, #4]
10010670:	2901      	cmp	r1, #1
10010672:	d13e      	bne.n	100106f2 <gapm_get_dev_config_cmd_handler+0xba>
10010674:	21d0      	movs	r1, #208	; 0xd0
10010676:	4c22      	ldr	r4, [pc, #136]	; (10010700 <gapm_get_dev_config_cmd_handler+0xc8>)
10010678:	0109      	lsls	r1, r1, #4
1001067a:	8061      	strh	r1, [r4, #2]
1001067c:	4921      	ldr	r1, [pc, #132]	; (10010704 <gapm_get_dev_config_cmd_handler+0xcc>)
1001067e:	71da      	strb	r2, [r3, #7]
10010680:	8021      	strh	r1, [r4, #0]
10010682:	4661      	mov	r1, ip
10010684:	721e      	strb	r6, [r3, #8]
10010686:	7199      	strb	r1, [r3, #6]
10010688:	1c18      	adds	r0, r3, #0
1001068a:	2109      	movs	r1, #9
1001068c:	4b1e      	ldr	r3, [pc, #120]	; (10010708 <gapm_get_dev_config_cmd_handler+0xd0>)
1001068e:	80a5      	strh	r5, [r4, #4]
10010690:	4798      	blx	r3
10010692:	1c38      	adds	r0, r7, #0
10010694:	4b1d      	ldr	r3, [pc, #116]	; (1001070c <gapm_get_dev_config_cmd_handler+0xd4>)
10010696:	4798      	blx	r3
10010698:	783b      	ldrb	r3, [r7, #0]
1001069a:	20e2      	movs	r0, #226	; 0xe2
1001069c:	9301      	str	r3, [sp, #4]
1001069e:	2b00      	cmp	r3, #0
100106a0:	d127      	bne.n	100106f2 <gapm_get_dev_config_cmd_handler+0xba>
100106a2:	8821      	ldrh	r1, [r4, #0]
100106a4:	4a1a      	ldr	r2, [pc, #104]	; (10010710 <gapm_get_dev_config_cmd_handler+0xd8>)
100106a6:	68a7      	ldr	r7, [r4, #8]
100106a8:	3b01      	subs	r3, #1
100106aa:	4291      	cmp	r1, r2
100106ac:	d001      	beq.n	100106b2 <gapm_get_dev_config_cmd_handler+0x7a>
100106ae:	8023      	strh	r3, [r4, #0]
100106b0:	e01a      	b.n	100106e8 <gapm_get_dev_config_cmd_handler+0xb0>
100106b2:	8063      	strh	r3, [r4, #2]
100106b4:	9b00      	ldr	r3, [sp, #0]
100106b6:	1c39      	adds	r1, r7, #0
100106b8:	1c58      	adds	r0, r3, #1
100106ba:	1c32      	adds	r2, r6, #0
100106bc:	4b15      	ldr	r3, [pc, #84]	; (10010714 <gapm_get_dev_config_cmd_handler+0xdc>)
100106be:	4798      	blx	r3
100106c0:	79bb      	ldrb	r3, [r7, #6]
100106c2:	9a00      	ldr	r2, [sp, #0]
100106c4:	7013      	strb	r3, [r2, #0]
100106c6:	23d0      	movs	r3, #208	; 0xd0
100106c8:	011b      	lsls	r3, r3, #4
100106ca:	8023      	strh	r3, [r4, #0]
100106cc:	ab02      	add	r3, sp, #8
100106ce:	80a5      	strh	r5, [r4, #4]
100106d0:	1ddd      	adds	r5, r3, #7
100106d2:	466b      	mov	r3, sp
100106d4:	791b      	ldrb	r3, [r3, #4]
100106d6:	1c28      	adds	r0, r5, #0
100106d8:	702b      	strb	r3, [r5, #0]
100106da:	4b0c      	ldr	r3, [pc, #48]	; (1001070c <gapm_get_dev_config_cmd_handler+0xd4>)
100106dc:	4798      	blx	r3
100106de:	782b      	ldrb	r3, [r5, #0]
100106e0:	20d0      	movs	r0, #208	; 0xd0
100106e2:	2b00      	cmp	r3, #0
100106e4:	d105      	bne.n	100106f2 <gapm_get_dev_config_cmd_handler+0xba>
100106e6:	68a7      	ldr	r7, [r4, #8]
100106e8:	783b      	ldrb	r3, [r7, #0]
100106ea:	7878      	ldrb	r0, [r7, #1]
100106ec:	2b06      	cmp	r3, #6
100106ee:	d000      	beq.n	100106f2 <gapm_get_dev_config_cmd_handler+0xba>
100106f0:	20e2      	movs	r0, #226	; 0xe2
100106f2:	b005      	add	sp, #20
100106f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100106f6:	46c0      	nop			; (mov r8, r8)
100106f8:	10017c90 	.word	0x10017c90
100106fc:	10018000 	.word	0x10018000
10010700:	10017c84 	.word	0x10017c84
10010704:	00000d08 	.word	0x00000d08
10010708:	1000f8e9 	.word	0x1000f8e9
1001070c:	1000f94d 	.word	0x1000f94d
10010710:	0000ffff 	.word	0x0000ffff
10010714:	1001255f 	.word	0x1001255f

10010718 <gapm_cancel_cmd_handler>:
10010718:	b537      	push	{r0, r1, r2, r4, r5, lr}
1001071a:	4916      	ldr	r1, [pc, #88]	; (10010774 <gapm_cancel_cmd_handler+0x5c>)
1001071c:	4816      	ldr	r0, [pc, #88]	; (10010778 <gapm_cancel_cmd_handler+0x60>)
1001071e:	880c      	ldrh	r4, [r1, #0]
10010720:	8809      	ldrh	r1, [r1, #0]
10010722:	466b      	mov	r3, sp
10010724:	0a09      	lsrs	r1, r1, #8
10010726:	7141      	strb	r1, [r0, #5]
10010728:	2102      	movs	r1, #2
1001072a:	2203      	movs	r2, #3
1001072c:	7201      	strb	r1, [r0, #8]
1001072e:	21d0      	movs	r1, #208	; 0xd0
10010730:	1ddd      	adds	r5, r3, #7
10010732:	2300      	movs	r3, #0
10010734:	7104      	strb	r4, [r0, #4]
10010736:	4c11      	ldr	r4, [pc, #68]	; (1001077c <gapm_cancel_cmd_handler+0x64>)
10010738:	7002      	strb	r2, [r0, #0]
1001073a:	0109      	lsls	r1, r1, #4
1001073c:	320a      	adds	r2, #10
1001073e:	702b      	strb	r3, [r5, #0]
10010740:	7042      	strb	r2, [r0, #1]
10010742:	7082      	strb	r2, [r0, #2]
10010744:	70c3      	strb	r3, [r0, #3]
10010746:	8021      	strh	r1, [r4, #0]
10010748:	80a2      	strh	r2, [r4, #4]
1001074a:	71c3      	strb	r3, [r0, #7]
1001074c:	3a0c      	subs	r2, #12
1001074e:	2109      	movs	r1, #9
10010750:	4b0b      	ldr	r3, [pc, #44]	; (10010780 <gapm_cancel_cmd_handler+0x68>)
10010752:	7182      	strb	r2, [r0, #6]
10010754:	4798      	blx	r3
10010756:	1c28      	adds	r0, r5, #0
10010758:	4b0a      	ldr	r3, [pc, #40]	; (10010784 <gapm_cancel_cmd_handler+0x6c>)
1001075a:	4798      	blx	r3
1001075c:	7828      	ldrb	r0, [r5, #0]
1001075e:	2800      	cmp	r0, #0
10010760:	d001      	beq.n	10010766 <gapm_cancel_cmd_handler+0x4e>
10010762:	20e2      	movs	r0, #226	; 0xe2
10010764:	e004      	b.n	10010770 <gapm_cancel_cmd_handler+0x58>
10010766:	68a3      	ldr	r3, [r4, #8]
10010768:	785b      	ldrb	r3, [r3, #1]
1001076a:	2b44      	cmp	r3, #68	; 0x44
1001076c:	d000      	beq.n	10010770 <gapm_cancel_cmd_handler+0x58>
1001076e:	1c18      	adds	r0, r3, #0
10010770:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
10010772:	46c0      	nop			; (mov r8, r8)
10010774:	10017c90 	.word	0x10017c90
10010778:	10018000 	.word	0x10018000
1001077c:	10017c84 	.word	0x10017c84
10010780:	1000f8e9 	.word	0x1000f8e9
10010784:	1000f94d 	.word	0x1000f94d

10010788 <gapm_dev_bdaddr_ind_handler>:
10010788:	b538      	push	{r3, r4, r5, lr}
1001078a:	1c05      	adds	r5, r0, #0
1001078c:	1c0c      	adds	r4, r1, #0
1001078e:	1c48      	adds	r0, r1, #1
10010790:	2206      	movs	r2, #6
10010792:	1c29      	adds	r1, r5, #0
10010794:	4b02      	ldr	r3, [pc, #8]	; (100107a0 <gapm_dev_bdaddr_ind_handler+0x18>)
10010796:	4798      	blx	r3
10010798:	79ab      	ldrb	r3, [r5, #6]
1001079a:	2000      	movs	r0, #0
1001079c:	7023      	strb	r3, [r4, #0]
1001079e:	bd38      	pop	{r3, r4, r5, pc}
100107a0:	1001255f 	.word	0x1001255f

100107a4 <gapm_cmp_evt>:
100107a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100107a6:	7803      	ldrb	r3, [r0, #0]
100107a8:	7845      	ldrb	r5, [r0, #1]
100107aa:	3b0c      	subs	r3, #12
100107ac:	1e18      	subs	r0, r3, #0
100107ae:	280b      	cmp	r0, #11
100107b0:	d900      	bls.n	100107b4 <gapm_cmp_evt+0x10>
100107b2:	e08d      	b.n	100108d0 <gapm_cmp_evt+0x12c>
100107b4:	1c0c      	adds	r4, r1, #0
100107b6:	f000 fd23 	bl	10011200 <__gnu_thumb1_case_uqi>
100107ba:	1952      	.short	0x1952
100107bc:	068b1919 	.word	0x068b1919
100107c0:	8b595906 	.word	0x8b595906
100107c4:	0d8b      	.short	0x0d8b
100107c6:	2300      	movs	r3, #0
100107c8:	2d45      	cmp	r5, #69	; 0x45
100107ca:	d000      	beq.n	100107ce <gapm_cmp_evt+0x2a>
100107cc:	1c2b      	adds	r3, r5, #0
100107ce:	7023      	strb	r3, [r4, #0]
100107d0:	2002      	movs	r0, #2
100107d2:	e07e      	b.n	100108d2 <gapm_cmp_evt+0x12e>
100107d4:	203b      	movs	r0, #59	; 0x3b
100107d6:	2d00      	cmp	r5, #0
100107d8:	d100      	bne.n	100107dc <gapm_cmp_evt+0x38>
100107da:	e07a      	b.n	100108d2 <gapm_cmp_evt+0x12e>
100107dc:	700d      	strb	r5, [r1, #0]
100107de:	1c48      	adds	r0, r1, #1
100107e0:	2210      	movs	r2, #16
100107e2:	2100      	movs	r1, #0
100107e4:	4b3b      	ldr	r3, [pc, #236]	; (100108d4 <gapm_cmp_evt+0x130>)
100107e6:	4798      	blx	r3
100107e8:	200f      	movs	r0, #15
100107ea:	e072      	b.n	100108d2 <gapm_cmp_evt+0x12e>
100107ec:	2d00      	cmp	r5, #0
100107ee:	d134      	bne.n	1001085a <gapm_cmp_evt+0xb6>
100107f0:	4b39      	ldr	r3, [pc, #228]	; (100108d8 <gapm_cmp_evt+0x134>)
100107f2:	4798      	blx	r3
100107f4:	1e43      	subs	r3, r0, #1
100107f6:	b2db      	uxtb	r3, r3
100107f8:	1c28      	adds	r0, r5, #0
100107fa:	2b06      	cmp	r3, #6
100107fc:	d869      	bhi.n	100108d2 <gapm_cmp_evt+0x12e>
100107fe:	466b      	mov	r3, sp
10010800:	4e36      	ldr	r6, [pc, #216]	; (100108dc <gapm_cmp_evt+0x138>)
10010802:	1dd9      	adds	r1, r3, #7
10010804:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
10010806:	4b36      	ldr	r3, [pc, #216]	; (100108e0 <gapm_cmp_evt+0x13c>)
10010808:	4798      	blx	r3
1001080a:	2312      	movs	r3, #18
1001080c:	4358      	muls	r0, r3
1001080e:	4935      	ldr	r1, [pc, #212]	; (100108e4 <gapm_cmp_evt+0x140>)
10010810:	1809      	adds	r1, r1, r0
10010812:	1c0b      	adds	r3, r1, #0
10010814:	894a      	ldrh	r2, [r1, #10]
10010816:	3308      	adds	r3, #8
10010818:	8122      	strh	r2, [r4, #8]
1001081a:	784f      	ldrb	r7, [r1, #1]
1001081c:	72a5      	strb	r5, [r4, #10]
1001081e:	7027      	strb	r7, [r4, #0]
10010820:	898a      	ldrh	r2, [r1, #12]
10010822:	1c60      	adds	r0, r4, #1
10010824:	81a2      	strh	r2, [r4, #12]
10010826:	88db      	ldrh	r3, [r3, #6]
10010828:	3102      	adds	r1, #2
1001082a:	81e3      	strh	r3, [r4, #14]
1001082c:	89cb      	ldrh	r3, [r1, #14]
1001082e:	2206      	movs	r2, #6
10010830:	8223      	strh	r3, [r4, #16]
10010832:	4b2d      	ldr	r3, [pc, #180]	; (100108e8 <gapm_cmp_evt+0x144>)
10010834:	4798      	blx	r3
10010836:	2f00      	cmp	r7, #0
10010838:	d00a      	beq.n	10010850 <gapm_cmp_evt+0xac>
1001083a:	79a3      	ldrb	r3, [r4, #6]
1001083c:	223f      	movs	r2, #63	; 0x3f
1001083e:	1c19      	adds	r1, r3, #0
10010840:	3501      	adds	r5, #1
10010842:	4391      	bics	r1, r2
10010844:	29c0      	cmp	r1, #192	; 0xc0
10010846:	d003      	beq.n	10010850 <gapm_cmp_evt+0xac>
10010848:	065b      	lsls	r3, r3, #25
1001084a:	0fdb      	lsrs	r3, r3, #31
1001084c:	3502      	adds	r5, #2
1001084e:	1aed      	subs	r5, r5, r3
10010850:	2301      	movs	r3, #1
10010852:	425b      	negs	r3, r3
10010854:	7025      	strb	r5, [r4, #0]
10010856:	85b3      	strh	r3, [r6, #44]	; 0x2c
10010858:	e038      	b.n	100108cc <gapm_cmp_evt+0x128>
1001085a:	700d      	strb	r5, [r1, #0]
1001085c:	e004      	b.n	10010868 <gapm_cmp_evt+0xc4>
1001085e:	2300      	movs	r3, #0
10010860:	2d45      	cmp	r5, #69	; 0x45
10010862:	d000      	beq.n	10010866 <gapm_cmp_evt+0xc2>
10010864:	1c2b      	adds	r3, r5, #0
10010866:	7023      	strb	r3, [r4, #0]
10010868:	2003      	movs	r0, #3
1001086a:	e032      	b.n	100108d2 <gapm_cmp_evt+0x12e>
1001086c:	4e1b      	ldr	r6, [pc, #108]	; (100108dc <gapm_cmp_evt+0x138>)
1001086e:	2100      	movs	r1, #0
10010870:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
10010872:	4b1b      	ldr	r3, [pc, #108]	; (100108e0 <gapm_cmp_evt+0x13c>)
10010874:	4798      	blx	r3
10010876:	2807      	cmp	r0, #7
10010878:	d818      	bhi.n	100108ac <gapm_cmp_evt+0x108>
1001087a:	2301      	movs	r3, #1
1001087c:	425b      	negs	r3, r3
1001087e:	85b3      	strh	r3, [r6, #44]	; 0x2c
10010880:	3313      	adds	r3, #19
10010882:	4358      	muls	r0, r3
10010884:	4917      	ldr	r1, [pc, #92]	; (100108e4 <gapm_cmp_evt+0x140>)
10010886:	1809      	adds	r1, r1, r0
10010888:	1c0b      	adds	r3, r1, #0
1001088a:	894a      	ldrh	r2, [r1, #10]
1001088c:	3308      	adds	r3, #8
1001088e:	8122      	strh	r2, [r4, #8]
10010890:	784a      	ldrb	r2, [r1, #1]
10010892:	72a5      	strb	r5, [r4, #10]
10010894:	7022      	strb	r2, [r4, #0]
10010896:	898a      	ldrh	r2, [r1, #12]
10010898:	1c60      	adds	r0, r4, #1
1001089a:	81a2      	strh	r2, [r4, #12]
1001089c:	88db      	ldrh	r3, [r3, #6]
1001089e:	3102      	adds	r1, #2
100108a0:	81e3      	strh	r3, [r4, #14]
100108a2:	89cb      	ldrh	r3, [r1, #14]
100108a4:	2206      	movs	r2, #6
100108a6:	8223      	strh	r3, [r4, #16]
100108a8:	4b0f      	ldr	r3, [pc, #60]	; (100108e8 <gapm_cmp_evt+0x144>)
100108aa:	4798      	blx	r3
100108ac:	2200      	movs	r2, #0
100108ae:	7823      	ldrb	r3, [r4, #0]
100108b0:	4293      	cmp	r3, r2
100108b2:	d00a      	beq.n	100108ca <gapm_cmp_evt+0x126>
100108b4:	79a3      	ldrb	r3, [r4, #6]
100108b6:	323f      	adds	r2, #63	; 0x3f
100108b8:	1c19      	adds	r1, r3, #0
100108ba:	4391      	bics	r1, r2
100108bc:	3a3e      	subs	r2, #62	; 0x3e
100108be:	29c0      	cmp	r1, #192	; 0xc0
100108c0:	d003      	beq.n	100108ca <gapm_cmp_evt+0x126>
100108c2:	065b      	lsls	r3, r3, #25
100108c4:	0fdb      	lsrs	r3, r3, #31
100108c6:	3202      	adds	r2, #2
100108c8:	1ad2      	subs	r2, r2, r3
100108ca:	7022      	strb	r2, [r4, #0]
100108cc:	2005      	movs	r0, #5
100108ce:	e000      	b.n	100108d2 <gapm_cmp_evt+0x12e>
100108d0:	2000      	movs	r0, #0
100108d2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100108d4:	10012571 	.word	0x10012571
100108d8:	1000faf5 	.word	0x1000faf5
100108dc:	10017d22 	.word	0x10017d22
100108e0:	1000fab9 	.word	0x1000fab9
100108e4:	10017c92 	.word	0x10017c92
100108e8:	1001255f 	.word	0x1001255f

100108ec <gapm_start_adv_cmd_handler>:
100108ec:	b5f0      	push	{r4, r5, r6, r7, lr}
100108ee:	b089      	sub	sp, #36	; 0x24
100108f0:	9303      	str	r3, [sp, #12]
100108f2:	ab0e      	add	r3, sp, #56	; 0x38
100108f4:	9102      	str	r1, [sp, #8]
100108f6:	cb02      	ldmia	r3!, {r1}
100108f8:	aa08      	add	r2, sp, #32
100108fa:	881b      	ldrh	r3, [r3, #0]
100108fc:	4e3c      	ldr	r6, [pc, #240]	; (100109f0 <gapm_start_adv_cmd_handler+0x104>)
100108fe:	9300      	str	r3, [sp, #0]
10010900:	ab10      	add	r3, sp, #64	; 0x40
10010902:	881b      	ldrh	r3, [r3, #0]
10010904:	240d      	movs	r4, #13
10010906:	469c      	mov	ip, r3
10010908:	ab11      	add	r3, sp, #68	; 0x44
1001090a:	781b      	ldrb	r3, [r3, #0]
1001090c:	9304      	str	r3, [sp, #16]
1001090e:	ab12      	add	r3, sp, #72	; 0x48
10010910:	781b      	ldrb	r3, [r3, #0]
10010912:	9305      	str	r3, [sp, #20]
10010914:	ab13      	add	r3, sp, #76	; 0x4c
10010916:	781b      	ldrb	r3, [r3, #0]
10010918:	9306      	str	r3, [sp, #24]
1001091a:	ab14      	add	r3, sp, #80	; 0x50
1001091c:	781b      	ldrb	r3, [r3, #0]
1001091e:	9301      	str	r3, [sp, #4]
10010920:	2319      	movs	r3, #25
10010922:	189b      	adds	r3, r3, r2
10010924:	7fdd      	ldrb	r5, [r3, #31]
10010926:	ab18      	add	r3, sp, #96	; 0x60
10010928:	881f      	ldrh	r7, [r3, #0]
1001092a:	ab19      	add	r3, sp, #100	; 0x64
1001092c:	781b      	ldrb	r3, [r3, #0]
1001092e:	8832      	ldrh	r2, [r6, #0]
10010930:	9307      	str	r3, [sp, #28]
10010932:	4b30      	ldr	r3, [pc, #192]	; (100109f4 <gapm_start_adv_cmd_handler+0x108>)
10010934:	8836      	ldrh	r6, [r6, #0]
10010936:	711a      	strb	r2, [r3, #4]
10010938:	466a      	mov	r2, sp
1001093a:	7a12      	ldrb	r2, [r2, #8]
1001093c:	701c      	strb	r4, [r3, #0]
1001093e:	705c      	strb	r4, [r3, #1]
10010940:	709c      	strb	r4, [r3, #2]
10010942:	725a      	strb	r2, [r3, #9]
10010944:	2400      	movs	r4, #0
10010946:	466a      	mov	r2, sp
10010948:	0a36      	lsrs	r6, r6, #8
1001094a:	70dc      	strb	r4, [r3, #3]
1001094c:	7218      	strb	r0, [r3, #8]
1001094e:	729c      	strb	r4, [r3, #10]
10010950:	715e      	strb	r6, [r3, #5]
10010952:	72dc      	strb	r4, [r3, #11]
10010954:	7812      	ldrb	r2, [r2, #0]
10010956:	380e      	subs	r0, #14
10010958:	731a      	strb	r2, [r3, #12]
1001095a:	9a00      	ldr	r2, [sp, #0]
1001095c:	0a14      	lsrs	r4, r2, #8
1001095e:	4662      	mov	r2, ip
10010960:	739a      	strb	r2, [r3, #14]
10010962:	4662      	mov	r2, ip
10010964:	735c      	strb	r4, [r3, #13]
10010966:	0a14      	lsrs	r4, r2, #8
10010968:	466a      	mov	r2, sp
1001096a:	7c12      	ldrb	r2, [r2, #16]
1001096c:	73dc      	strb	r4, [r3, #15]
1001096e:	741a      	strb	r2, [r3, #16]
10010970:	1c1c      	adds	r4, r3, #0
10010972:	2801      	cmp	r0, #1
10010974:	d809      	bhi.n	1001098a <gapm_start_adv_cmd_handler+0x9e>
10010976:	2900      	cmp	r1, #0
10010978:	d003      	beq.n	10010982 <gapm_start_adv_cmd_handler+0x96>
1001097a:	481f      	ldr	r0, [pc, #124]	; (100109f8 <gapm_start_adv_cmd_handler+0x10c>)
1001097c:	2206      	movs	r2, #6
1001097e:	4b1f      	ldr	r3, [pc, #124]	; (100109fc <gapm_start_adv_cmd_handler+0x110>)
10010980:	4798      	blx	r3
10010982:	466b      	mov	r3, sp
10010984:	7b1b      	ldrb	r3, [r3, #12]
10010986:	75e3      	strb	r3, [r4, #23]
10010988:	e014      	b.n	100109b4 <gapm_start_adv_cmd_handler+0xc8>
1001098a:	466b      	mov	r3, sp
1001098c:	7d1b      	ldrb	r3, [r3, #20]
1001098e:	9915      	ldr	r1, [sp, #84]	; 0x54
10010990:	7463      	strb	r3, [r4, #17]
10010992:	466b      	mov	r3, sp
10010994:	7e1b      	ldrb	r3, [r3, #24]
10010996:	9a01      	ldr	r2, [sp, #4]
10010998:	74a3      	strb	r3, [r4, #18]
1001099a:	466b      	mov	r3, sp
1001099c:	791b      	ldrb	r3, [r3, #4]
1001099e:	4818      	ldr	r0, [pc, #96]	; (10010a00 <gapm_start_adv_cmd_handler+0x114>)
100109a0:	4e16      	ldr	r6, [pc, #88]	; (100109fc <gapm_start_adv_cmd_handler+0x110>)
100109a2:	74e3      	strb	r3, [r4, #19]
100109a4:	47b0      	blx	r6
100109a6:	1c23      	adds	r3, r4, #0
100109a8:	4816      	ldr	r0, [pc, #88]	; (10010a04 <gapm_start_adv_cmd_handler+0x118>)
100109aa:	3330      	adds	r3, #48	; 0x30
100109ac:	9917      	ldr	r1, [sp, #92]	; 0x5c
100109ae:	1c2a      	adds	r2, r5, #0
100109b0:	701d      	strb	r5, [r3, #0]
100109b2:	47b0      	blx	r6
100109b4:	1c22      	adds	r2, r4, #0
100109b6:	23a5      	movs	r3, #165	; 0xa5
100109b8:	3250      	adds	r2, #80	; 0x50
100109ba:	7013      	strb	r3, [r2, #0]
100109bc:	1c22      	adds	r2, r4, #0
100109be:	3251      	adds	r2, #81	; 0x51
100109c0:	7013      	strb	r3, [r2, #0]
100109c2:	1c23      	adds	r3, r4, #0
100109c4:	1c22      	adds	r2, r4, #0
100109c6:	3352      	adds	r3, #82	; 0x52
100109c8:	701f      	strb	r7, [r3, #0]
100109ca:	3253      	adds	r2, #83	; 0x53
100109cc:	0a3b      	lsrs	r3, r7, #8
100109ce:	7013      	strb	r3, [r2, #0]
100109d0:	466a      	mov	r2, sp
100109d2:	1c23      	adds	r3, r4, #0
100109d4:	7f12      	ldrb	r2, [r2, #28]
100109d6:	3354      	adds	r3, #84	; 0x54
100109d8:	701a      	strb	r2, [r3, #0]
100109da:	234d      	movs	r3, #77	; 0x4d
100109dc:	2500      	movs	r5, #0
100109de:	71a3      	strb	r3, [r4, #6]
100109e0:	1c20      	adds	r0, r4, #0
100109e2:	2155      	movs	r1, #85	; 0x55
100109e4:	4b08      	ldr	r3, [pc, #32]	; (10010a08 <gapm_start_adv_cmd_handler+0x11c>)
100109e6:	71e5      	strb	r5, [r4, #7]
100109e8:	4798      	blx	r3
100109ea:	1c28      	adds	r0, r5, #0
100109ec:	b009      	add	sp, #36	; 0x24
100109ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
100109f0:	10017c90 	.word	0x10017c90
100109f4:	10018000 	.word	0x10018000
100109f8:	10018011 	.word	0x10018011
100109fc:	1001255f 	.word	0x1001255f
10010a00:	10018014 	.word	0x10018014
10010a04:	10018031 	.word	0x10018031
10010a08:	1000f8e9 	.word	0x1000f8e9

10010a0c <get_gap_local_addr_type>:
10010a0c:	4b04      	ldr	r3, [pc, #16]	; (10010a20 <get_gap_local_addr_type+0x14>)
10010a0e:	2001      	movs	r0, #1
10010a10:	791b      	ldrb	r3, [r3, #4]
10010a12:	2b02      	cmp	r3, #2
10010a14:	d003      	beq.n	10010a1e <get_gap_local_addr_type+0x12>
10010a16:	3b03      	subs	r3, #3
10010a18:	4258      	negs	r0, r3
10010a1a:	4158      	adcs	r0, r3
10010a1c:	0040      	lsls	r0, r0, #1
10010a1e:	4770      	bx	lr
10010a20:	10017d22 	.word	0x10017d22

10010a24 <gapm_adv_report_evt_handler>:
10010a24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010a26:	7843      	ldrb	r3, [r0, #1]
10010a28:	1c05      	adds	r5, r0, #0
10010a2a:	9301      	str	r3, [sp, #4]
10010a2c:	466b      	mov	r3, sp
10010a2e:	1c0c      	adds	r4, r1, #0
10010a30:	791b      	ldrb	r3, [r3, #4]
10010a32:	7806      	ldrb	r6, [r0, #0]
10010a34:	2206      	movs	r2, #6
10010a36:	704b      	strb	r3, [r1, #1]
10010a38:	1c88      	adds	r0, r1, #2
10010a3a:	4f1b      	ldr	r7, [pc, #108]	; (10010aa8 <gapm_adv_report_evt_handler+0x84>)
10010a3c:	1ca9      	adds	r1, r5, #2
10010a3e:	47b8      	blx	r7
10010a40:	1c20      	adds	r0, r4, #0
10010a42:	1c29      	adds	r1, r5, #0
10010a44:	7a2a      	ldrb	r2, [r5, #8]
10010a46:	3008      	adds	r0, #8
10010a48:	77c2      	strb	r2, [r0, #31]
10010a4a:	3109      	adds	r1, #9
10010a4c:	3528      	adds	r5, #40	; 0x28
10010a4e:	47b8      	blx	r7
10010a50:	782b      	ldrb	r3, [r5, #0]
10010a52:	b25a      	sxtb	r2, r3
10010a54:	2a00      	cmp	r2, #0
10010a56:	da01      	bge.n	10010a5c <gapm_adv_report_evt_handler+0x38>
10010a58:	3301      	adds	r3, #1
10010a5a:	b2db      	uxtb	r3, r3
10010a5c:	1c22      	adds	r2, r4, #0
10010a5e:	3228      	adds	r2, #40	; 0x28
10010a60:	7013      	strb	r3, [r2, #0]
10010a62:	2200      	movs	r2, #0
10010a64:	9b01      	ldr	r3, [sp, #4]
10010a66:	4293      	cmp	r3, r2
10010a68:	d00a      	beq.n	10010a80 <gapm_adv_report_evt_handler+0x5c>
10010a6a:	79e3      	ldrb	r3, [r4, #7]
10010a6c:	323f      	adds	r2, #63	; 0x3f
10010a6e:	1c19      	adds	r1, r3, #0
10010a70:	4391      	bics	r1, r2
10010a72:	3a3e      	subs	r2, #62	; 0x3e
10010a74:	29c0      	cmp	r1, #192	; 0xc0
10010a76:	d003      	beq.n	10010a80 <gapm_adv_report_evt_handler+0x5c>
10010a78:	065b      	lsls	r3, r3, #25
10010a7a:	0fdb      	lsrs	r3, r3, #31
10010a7c:	3202      	adds	r2, #2
10010a7e:	1ad2      	subs	r2, r2, r3
10010a80:	7062      	strb	r2, [r4, #1]
10010a82:	2e04      	cmp	r6, #4
10010a84:	d80f      	bhi.n	10010aa6 <gapm_adv_report_evt_handler+0x82>
10010a86:	1c30      	adds	r0, r6, #0
10010a88:	f000 fbba 	bl	10011200 <__gnu_thumb1_case_uqi>
10010a8c:	09070503 	.word	0x09070503
10010a90:	0b          	.byte	0x0b
10010a91:	00          	.byte	0x00
10010a92:	2300      	movs	r3, #0
10010a94:	e006      	b.n	10010aa4 <gapm_adv_report_evt_handler+0x80>
10010a96:	2301      	movs	r3, #1
10010a98:	e004      	b.n	10010aa4 <gapm_adv_report_evt_handler+0x80>
10010a9a:	2302      	movs	r3, #2
10010a9c:	e002      	b.n	10010aa4 <gapm_adv_report_evt_handler+0x80>
10010a9e:	2303      	movs	r3, #3
10010aa0:	e000      	b.n	10010aa4 <gapm_adv_report_evt_handler+0x80>
10010aa2:	2305      	movs	r3, #5
10010aa4:	7023      	strb	r3, [r4, #0]
10010aa6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10010aa8:	1001255f 	.word	0x1001255f

10010aac <gapm_resolv_addr_cmd_handler>:
10010aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10010aae:	2314      	movs	r3, #20
10010ab0:	4c12      	ldr	r4, [pc, #72]	; (10010afc <gapm_resolv_addr_cmd_handler+0x50>)
10010ab2:	1c17      	adds	r7, r2, #0
10010ab4:	7023      	strb	r3, [r4, #0]
10010ab6:	3b07      	subs	r3, #7
10010ab8:	7063      	strb	r3, [r4, #1]
10010aba:	70a3      	strb	r3, [r4, #2]
10010abc:	2300      	movs	r3, #0
10010abe:	70e3      	strb	r3, [r4, #3]
10010ac0:	4b0f      	ldr	r3, [pc, #60]	; (10010b00 <gapm_resolv_addr_cmd_handler+0x54>)
10010ac2:	1c05      	adds	r5, r0, #0
10010ac4:	881a      	ldrh	r2, [r3, #0]
10010ac6:	881b      	ldrh	r3, [r3, #0]
10010ac8:	4e0e      	ldr	r6, [pc, #56]	; (10010b04 <gapm_resolv_addr_cmd_handler+0x58>)
10010aca:	0a1b      	lsrs	r3, r3, #8
10010acc:	7163      	strb	r3, [r4, #5]
10010ace:	2317      	movs	r3, #23
10010ad0:	012d      	lsls	r5, r5, #4
10010ad2:	7122      	strb	r2, [r4, #4]
10010ad4:	7260      	strb	r0, [r4, #9]
10010ad6:	2206      	movs	r2, #6
10010ad8:	480b      	ldr	r0, [pc, #44]	; (10010b08 <gapm_resolv_addr_cmd_handler+0x5c>)
10010ada:	7223      	strb	r3, [r4, #8]
10010adc:	47b0      	blx	r6
10010ade:	1c39      	adds	r1, r7, #0
10010ae0:	1c2a      	adds	r2, r5, #0
10010ae2:	480a      	ldr	r0, [pc, #40]	; (10010b0c <gapm_resolv_addr_cmd_handler+0x60>)
10010ae4:	47b0      	blx	r6
10010ae6:	1c29      	adds	r1, r5, #0
10010ae8:	3110      	adds	r1, #16
10010aea:	1c0b      	adds	r3, r1, #0
10010aec:	3b08      	subs	r3, #8
10010aee:	71a3      	strb	r3, [r4, #6]
10010af0:	121b      	asrs	r3, r3, #8
10010af2:	71e3      	strb	r3, [r4, #7]
10010af4:	1c20      	adds	r0, r4, #0
10010af6:	4b06      	ldr	r3, [pc, #24]	; (10010b10 <gapm_resolv_addr_cmd_handler+0x64>)
10010af8:	4798      	blx	r3
10010afa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10010afc:	10018000 	.word	0x10018000
10010b00:	10017c90 	.word	0x10017c90
10010b04:	1001255f 	.word	0x1001255f
10010b08:	1001800a 	.word	0x1001800a
10010b0c:	10018010 	.word	0x10018010
10010b10:	1000f8e9 	.word	0x1000f8e9

10010b14 <gapm_addr_solved_ind_handler>:
10010b14:	b570      	push	{r4, r5, r6, lr}
10010b16:	1c04      	adds	r4, r0, #0
10010b18:	1c08      	adds	r0, r1, #0
10010b1a:	1c0d      	adds	r5, r1, #0
10010b1c:	4e05      	ldr	r6, [pc, #20]	; (10010b34 <gapm_addr_solved_ind_handler+0x20>)
10010b1e:	1c21      	adds	r1, r4, #0
10010b20:	2206      	movs	r2, #6
10010b22:	3011      	adds	r0, #17
10010b24:	47b0      	blx	r6
10010b26:	1c68      	adds	r0, r5, #1
10010b28:	1da1      	adds	r1, r4, #6
10010b2a:	2210      	movs	r2, #16
10010b2c:	47b0      	blx	r6
10010b2e:	2300      	movs	r3, #0
10010b30:	702b      	strb	r3, [r5, #0]
10010b32:	bd70      	pop	{r4, r5, r6, pc}
10010b34:	1001255f 	.word	0x1001255f

10010b38 <gapm_profile_added_ind_handler>:
10010b38:	b510      	push	{r4, lr}
10010b3a:	7843      	ldrb	r3, [r0, #1]
10010b3c:	7902      	ldrb	r2, [r0, #4]
10010b3e:	7944      	ldrb	r4, [r0, #5]
10010b40:	7800      	ldrb	r0, [r0, #0]
10010b42:	021b      	lsls	r3, r3, #8
10010b44:	4303      	orrs	r3, r0
10010b46:	2b1b      	cmp	r3, #27
10010b48:	d104      	bne.n	10010b54 <gapm_profile_added_ind_handler+0x1c>
10010b4a:	2300      	movs	r3, #0
10010b4c:	700b      	strb	r3, [r1, #0]
10010b4e:	0223      	lsls	r3, r4, #8
10010b50:	4313      	orrs	r3, r2
10010b52:	804b      	strh	r3, [r1, #2]
10010b54:	203b      	movs	r0, #59	; 0x3b
10010b56:	bd10      	pop	{r4, pc}

10010b58 <gattc_read_req_ind_parser>:
10010b58:	7843      	ldrb	r3, [r0, #1]
10010b5a:	7802      	ldrb	r2, [r0, #0]
10010b5c:	021b      	lsls	r3, r3, #8
10010b5e:	4313      	orrs	r3, r2
10010b60:	804b      	strh	r3, [r1, #2]
10010b62:	4770      	bx	lr

10010b64 <gattc_write_req_ind_parser>:
10010b64:	b508      	push	{r3, lr}
10010b66:	1c13      	adds	r3, r2, #0
10010b68:	0a00      	lsrs	r0, r0, #8
10010b6a:	8010      	strh	r0, [r2, #0]
10010b6c:	784a      	ldrb	r2, [r1, #1]
10010b6e:	7808      	ldrb	r0, [r1, #0]
10010b70:	0212      	lsls	r2, r2, #8
10010b72:	4302      	orrs	r2, r0
10010b74:	805a      	strh	r2, [r3, #2]
10010b76:	78ca      	ldrb	r2, [r1, #3]
10010b78:	7888      	ldrb	r0, [r1, #2]
10010b7a:	0212      	lsls	r2, r2, #8
10010b7c:	4302      	orrs	r2, r0
10010b7e:	809a      	strh	r2, [r3, #4]
10010b80:	794a      	ldrb	r2, [r1, #5]
10010b82:	7908      	ldrb	r0, [r1, #4]
10010b84:	0212      	lsls	r2, r2, #8
10010b86:	4302      	orrs	r2, r0
10010b88:	80da      	strh	r2, [r3, #6]
10010b8a:	3308      	adds	r3, #8
10010b8c:	1c18      	adds	r0, r3, #0
10010b8e:	3106      	adds	r1, #6
10010b90:	4b01      	ldr	r3, [pc, #4]	; (10010b98 <gattc_write_req_ind_parser+0x34>)
10010b92:	4798      	blx	r3
10010b94:	bd08      	pop	{r3, pc}
10010b96:	46c0      	nop			; (mov r8, r8)
10010b98:	1001255f 	.word	0x1001255f

10010b9c <gattc_att_info_req_parser>:
10010b9c:	7843      	ldrb	r3, [r0, #1]
10010b9e:	7802      	ldrb	r2, [r0, #0]
10010ba0:	021b      	lsls	r3, r3, #8
10010ba2:	4313      	orrs	r3, r2
10010ba4:	800b      	strh	r3, [r1, #0]
10010ba6:	4770      	bx	lr

10010ba8 <gattc_read_cfm>:
10010ba8:	b538      	push	{r3, r4, r5, lr}
10010baa:	2514      	movs	r5, #20
10010bac:	1c1c      	adds	r4, r3, #0
10010bae:	4b14      	ldr	r3, [pc, #80]	; (10010c00 <gattc_read_cfm+0x58>)
10010bb0:	70d9      	strb	r1, [r3, #3]
10010bb2:	4914      	ldr	r1, [pc, #80]	; (10010c04 <gattc_read_cfm+0x5c>)
10010bb4:	701d      	strb	r5, [r3, #0]
10010bb6:	3d08      	subs	r5, #8
10010bb8:	705d      	strb	r5, [r3, #1]
10010bba:	709d      	strb	r5, [r3, #2]
10010bbc:	880d      	ldrh	r5, [r1, #0]
10010bbe:	8809      	ldrh	r1, [r1, #0]
10010bc0:	7218      	strb	r0, [r3, #8]
10010bc2:	0a09      	lsrs	r1, r1, #8
10010bc4:	7159      	strb	r1, [r3, #5]
10010bc6:	0a00      	lsrs	r0, r0, #8
10010bc8:	0a21      	lsrs	r1, r4, #8
10010bca:	711d      	strb	r5, [r3, #4]
10010bcc:	7258      	strb	r0, [r3, #9]
10010bce:	729c      	strb	r4, [r3, #10]
10010bd0:	72d9      	strb	r1, [r3, #11]
10010bd2:	731a      	strb	r2, [r3, #12]
10010bd4:	1c1d      	adds	r5, r3, #0
10010bd6:	2c00      	cmp	r4, #0
10010bd8:	d007      	beq.n	10010bea <gattc_read_cfm+0x42>
10010bda:	9904      	ldr	r1, [sp, #16]
10010bdc:	1c22      	adds	r2, r4, #0
10010bde:	480a      	ldr	r0, [pc, #40]	; (10010c08 <gattc_read_cfm+0x60>)
10010be0:	4b0a      	ldr	r3, [pc, #40]	; (10010c0c <gattc_read_cfm+0x64>)
10010be2:	340d      	adds	r4, #13
10010be4:	4798      	blx	r3
10010be6:	b2a1      	uxth	r1, r4
10010be8:	e001      	b.n	10010bee <gattc_read_cfm+0x46>
10010bea:	210e      	movs	r1, #14
10010bec:	735c      	strb	r4, [r3, #13]
10010bee:	1c0b      	adds	r3, r1, #0
10010bf0:	3b08      	subs	r3, #8
10010bf2:	71ab      	strb	r3, [r5, #6]
10010bf4:	121b      	asrs	r3, r3, #8
10010bf6:	71eb      	strb	r3, [r5, #7]
10010bf8:	1c28      	adds	r0, r5, #0
10010bfa:	4b05      	ldr	r3, [pc, #20]	; (10010c10 <gattc_read_cfm+0x68>)
10010bfc:	4798      	blx	r3
10010bfe:	bd38      	pop	{r3, r4, r5, pc}
10010c00:	10018000 	.word	0x10018000
10010c04:	10017c90 	.word	0x10017c90
10010c08:	1001800d 	.word	0x1001800d
10010c0c:	1001255f 	.word	0x1001255f
10010c10:	1000f8e9 	.word	0x1000f8e9

10010c14 <gattc_write_cfm>:
10010c14:	4b0d      	ldr	r3, [pc, #52]	; (10010c4c <gattc_write_cfm+0x38>)
10010c16:	b510      	push	{r4, lr}
10010c18:	729a      	strb	r2, [r3, #10]
10010c1a:	2203      	movs	r2, #3
10010c1c:	2416      	movs	r4, #22
10010c1e:	719a      	strb	r2, [r3, #6]
10010c20:	2200      	movs	r2, #0
10010c22:	70d9      	strb	r1, [r3, #3]
10010c24:	490a      	ldr	r1, [pc, #40]	; (10010c50 <gattc_write_cfm+0x3c>)
10010c26:	701c      	strb	r4, [r3, #0]
10010c28:	3c0a      	subs	r4, #10
10010c2a:	705c      	strb	r4, [r3, #1]
10010c2c:	709c      	strb	r4, [r3, #2]
10010c2e:	880c      	ldrh	r4, [r1, #0]
10010c30:	8809      	ldrh	r1, [r1, #0]
10010c32:	7218      	strb	r0, [r3, #8]
10010c34:	0a09      	lsrs	r1, r1, #8
10010c36:	0a00      	lsrs	r0, r0, #8
10010c38:	711c      	strb	r4, [r3, #4]
10010c3a:	7159      	strb	r1, [r3, #5]
10010c3c:	7258      	strb	r0, [r3, #9]
10010c3e:	71da      	strb	r2, [r3, #7]
10010c40:	1c18      	adds	r0, r3, #0
10010c42:	210b      	movs	r1, #11
10010c44:	4b03      	ldr	r3, [pc, #12]	; (10010c54 <gattc_write_cfm+0x40>)
10010c46:	4798      	blx	r3
10010c48:	bd10      	pop	{r4, pc}
10010c4a:	46c0      	nop			; (mov r8, r8)
10010c4c:	10018000 	.word	0x10018000
10010c50:	10017c90 	.word	0x10017c90
10010c54:	1000f8e9 	.word	0x1000f8e9

10010c58 <gattc_att_info_cfm>:
10010c58:	b538      	push	{r3, r4, r5, lr}
10010c5a:	4c0e      	ldr	r4, [pc, #56]	; (10010c94 <gattc_att_info_cfm+0x3c>)
10010c5c:	2518      	movs	r5, #24
10010c5e:	7323      	strb	r3, [r4, #12]
10010c60:	2305      	movs	r3, #5
10010c62:	71a3      	strb	r3, [r4, #6]
10010c64:	2300      	movs	r3, #0
10010c66:	70e1      	strb	r1, [r4, #3]
10010c68:	490b      	ldr	r1, [pc, #44]	; (10010c98 <gattc_att_info_cfm+0x40>)
10010c6a:	7025      	strb	r5, [r4, #0]
10010c6c:	3d0c      	subs	r5, #12
10010c6e:	7065      	strb	r5, [r4, #1]
10010c70:	70a5      	strb	r5, [r4, #2]
10010c72:	880d      	ldrh	r5, [r1, #0]
10010c74:	8809      	ldrh	r1, [r1, #0]
10010c76:	7220      	strb	r0, [r4, #8]
10010c78:	0a09      	lsrs	r1, r1, #8
10010c7a:	0a00      	lsrs	r0, r0, #8
10010c7c:	7161      	strb	r1, [r4, #5]
10010c7e:	7260      	strb	r0, [r4, #9]
10010c80:	72a2      	strb	r2, [r4, #10]
10010c82:	71e3      	strb	r3, [r4, #7]
10010c84:	0a12      	lsrs	r2, r2, #8
10010c86:	1c20      	adds	r0, r4, #0
10010c88:	210d      	movs	r1, #13
10010c8a:	4b04      	ldr	r3, [pc, #16]	; (10010c9c <gattc_att_info_cfm+0x44>)
10010c8c:	7125      	strb	r5, [r4, #4]
10010c8e:	72e2      	strb	r2, [r4, #11]
10010c90:	4798      	blx	r3
10010c92:	bd38      	pop	{r3, r4, r5, pc}
10010c94:	10018000 	.word	0x10018000
10010c98:	10017c90 	.word	0x10017c90
10010c9c:	1000f8e9 	.word	0x1000f8e9

10010ca0 <gattc_event_cfm_handler>:
10010ca0:	220e      	movs	r2, #14
10010ca2:	b508      	push	{r3, lr}
10010ca4:	4b0b      	ldr	r3, [pc, #44]	; (10010cd4 <gattc_event_cfm_handler+0x34>)
10010ca6:	701a      	strb	r2, [r3, #0]
10010ca8:	3a02      	subs	r2, #2
10010caa:	705a      	strb	r2, [r3, #1]
10010cac:	709a      	strb	r2, [r3, #2]
10010cae:	4a0a      	ldr	r2, [pc, #40]	; (10010cd8 <gattc_event_cfm_handler+0x38>)
10010cb0:	70d8      	strb	r0, [r3, #3]
10010cb2:	8810      	ldrh	r0, [r2, #0]
10010cb4:	8812      	ldrh	r2, [r2, #0]
10010cb6:	7219      	strb	r1, [r3, #8]
10010cb8:	0a12      	lsrs	r2, r2, #8
10010cba:	715a      	strb	r2, [r3, #5]
10010cbc:	2202      	movs	r2, #2
10010cbe:	719a      	strb	r2, [r3, #6]
10010cc0:	2200      	movs	r2, #0
10010cc2:	0a09      	lsrs	r1, r1, #8
10010cc4:	7118      	strb	r0, [r3, #4]
10010cc6:	7259      	strb	r1, [r3, #9]
10010cc8:	71da      	strb	r2, [r3, #7]
10010cca:	1c18      	adds	r0, r3, #0
10010ccc:	210a      	movs	r1, #10
10010cce:	4b03      	ldr	r3, [pc, #12]	; (10010cdc <gattc_event_cfm_handler+0x3c>)
10010cd0:	4798      	blx	r3
10010cd2:	bd08      	pop	{r3, pc}
10010cd4:	10018000 	.word	0x10018000
10010cd8:	10017c90 	.word	0x10017c90
10010cdc:	1000f8e9 	.word	0x1000f8e9

10010ce0 <gattc_disc_svc_ind_parser>:
10010ce0:	b570      	push	{r4, r5, r6, lr}
10010ce2:	1c15      	adds	r5, r2, #0
10010ce4:	0a00      	lsrs	r0, r0, #8
10010ce6:	8010      	strh	r0, [r2, #0]
10010ce8:	784b      	ldrb	r3, [r1, #1]
10010cea:	780a      	ldrb	r2, [r1, #0]
10010cec:	021b      	lsls	r3, r3, #8
10010cee:	4313      	orrs	r3, r2
10010cf0:	806b      	strh	r3, [r5, #2]
10010cf2:	78cb      	ldrb	r3, [r1, #3]
10010cf4:	788a      	ldrb	r2, [r1, #2]
10010cf6:	021b      	lsls	r3, r3, #8
10010cf8:	4313      	orrs	r3, r2
10010cfa:	80ab      	strh	r3, [r5, #4]
10010cfc:	790e      	ldrb	r6, [r1, #4]
10010cfe:	4b05      	ldr	r3, [pc, #20]	; (10010d14 <gattc_disc_svc_ind_parser+0x34>)
10010d00:	1c30      	adds	r0, r6, #0
10010d02:	1c0c      	adds	r4, r1, #0
10010d04:	4798      	blx	r3
10010d06:	1c32      	adds	r2, r6, #0
10010d08:	71a8      	strb	r0, [r5, #6]
10010d0a:	1d61      	adds	r1, r4, #5
10010d0c:	1de8      	adds	r0, r5, #7
10010d0e:	4b02      	ldr	r3, [pc, #8]	; (10010d18 <gattc_disc_svc_ind_parser+0x38>)
10010d10:	4798      	blx	r3
10010d12:	bd70      	pop	{r4, r5, r6, pc}
10010d14:	1000ec9d 	.word	0x1000ec9d
10010d18:	1001255f 	.word	0x1001255f

10010d1c <gattc_disc_svc_incl_ind_parser>:
10010d1c:	b570      	push	{r4, r5, r6, lr}
10010d1e:	1c15      	adds	r5, r2, #0
10010d20:	0a00      	lsrs	r0, r0, #8
10010d22:	8010      	strh	r0, [r2, #0]
10010d24:	784b      	ldrb	r3, [r1, #1]
10010d26:	780a      	ldrb	r2, [r1, #0]
10010d28:	021b      	lsls	r3, r3, #8
10010d2a:	4313      	orrs	r3, r2
10010d2c:	806b      	strh	r3, [r5, #2]
10010d2e:	78cb      	ldrb	r3, [r1, #3]
10010d30:	788a      	ldrb	r2, [r1, #2]
10010d32:	021b      	lsls	r3, r3, #8
10010d34:	4313      	orrs	r3, r2
10010d36:	80ab      	strh	r3, [r5, #4]
10010d38:	794b      	ldrb	r3, [r1, #5]
10010d3a:	790a      	ldrb	r2, [r1, #4]
10010d3c:	021b      	lsls	r3, r3, #8
10010d3e:	4313      	orrs	r3, r2
10010d40:	80eb      	strh	r3, [r5, #6]
10010d42:	798e      	ldrb	r6, [r1, #6]
10010d44:	4b05      	ldr	r3, [pc, #20]	; (10010d5c <gattc_disc_svc_incl_ind_parser+0x40>)
10010d46:	1c30      	adds	r0, r6, #0
10010d48:	1c0c      	adds	r4, r1, #0
10010d4a:	4798      	blx	r3
10010d4c:	7228      	strb	r0, [r5, #8]
10010d4e:	1c28      	adds	r0, r5, #0
10010d50:	1c32      	adds	r2, r6, #0
10010d52:	1de1      	adds	r1, r4, #7
10010d54:	4b02      	ldr	r3, [pc, #8]	; (10010d60 <gattc_disc_svc_incl_ind_parser+0x44>)
10010d56:	3009      	adds	r0, #9
10010d58:	4798      	blx	r3
10010d5a:	bd70      	pop	{r4, r5, r6, pc}
10010d5c:	1000ec9d 	.word	0x1000ec9d
10010d60:	1001255f 	.word	0x1001255f

10010d64 <gattc_disc_char_ind_parser>:
10010d64:	b570      	push	{r4, r5, r6, lr}
10010d66:	1c15      	adds	r5, r2, #0
10010d68:	0a00      	lsrs	r0, r0, #8
10010d6a:	8010      	strh	r0, [r2, #0]
10010d6c:	784b      	ldrb	r3, [r1, #1]
10010d6e:	780a      	ldrb	r2, [r1, #0]
10010d70:	021b      	lsls	r3, r3, #8
10010d72:	4313      	orrs	r3, r2
10010d74:	806b      	strh	r3, [r5, #2]
10010d76:	78cb      	ldrb	r3, [r1, #3]
10010d78:	788a      	ldrb	r2, [r1, #2]
10010d7a:	021b      	lsls	r3, r3, #8
10010d7c:	4313      	orrs	r3, r2
10010d7e:	80ab      	strh	r3, [r5, #4]
10010d80:	790b      	ldrb	r3, [r1, #4]
10010d82:	1c0c      	adds	r4, r1, #0
10010d84:	71ab      	strb	r3, [r5, #6]
10010d86:	794e      	ldrb	r6, [r1, #5]
10010d88:	4b05      	ldr	r3, [pc, #20]	; (10010da0 <gattc_disc_char_ind_parser+0x3c>)
10010d8a:	1c30      	adds	r0, r6, #0
10010d8c:	4798      	blx	r3
10010d8e:	71e8      	strb	r0, [r5, #7]
10010d90:	1c28      	adds	r0, r5, #0
10010d92:	1c32      	adds	r2, r6, #0
10010d94:	1da1      	adds	r1, r4, #6
10010d96:	4b03      	ldr	r3, [pc, #12]	; (10010da4 <gattc_disc_char_ind_parser+0x40>)
10010d98:	3008      	adds	r0, #8
10010d9a:	4798      	blx	r3
10010d9c:	bd70      	pop	{r4, r5, r6, pc}
10010d9e:	46c0      	nop			; (mov r8, r8)
10010da0:	1000ec9d 	.word	0x1000ec9d
10010da4:	1001255f 	.word	0x1001255f

10010da8 <gattc_disc_char_desc_ind_parser>:
10010da8:	b570      	push	{r4, r5, r6, lr}
10010daa:	1c15      	adds	r5, r2, #0
10010dac:	0a00      	lsrs	r0, r0, #8
10010dae:	8010      	strh	r0, [r2, #0]
10010db0:	784b      	ldrb	r3, [r1, #1]
10010db2:	780a      	ldrb	r2, [r1, #0]
10010db4:	021b      	lsls	r3, r3, #8
10010db6:	4313      	orrs	r3, r2
10010db8:	806b      	strh	r3, [r5, #2]
10010dba:	788e      	ldrb	r6, [r1, #2]
10010dbc:	4b05      	ldr	r3, [pc, #20]	; (10010dd4 <gattc_disc_char_desc_ind_parser+0x2c>)
10010dbe:	1c30      	adds	r0, r6, #0
10010dc0:	1c0c      	adds	r4, r1, #0
10010dc2:	4798      	blx	r3
10010dc4:	1c32      	adds	r2, r6, #0
10010dc6:	7128      	strb	r0, [r5, #4]
10010dc8:	1ce1      	adds	r1, r4, #3
10010dca:	1d68      	adds	r0, r5, #5
10010dcc:	4b02      	ldr	r3, [pc, #8]	; (10010dd8 <gattc_disc_char_desc_ind_parser+0x30>)
10010dce:	4798      	blx	r3
10010dd0:	bd70      	pop	{r4, r5, r6, pc}
10010dd2:	46c0      	nop			; (mov r8, r8)
10010dd4:	1000ec9d 	.word	0x1000ec9d
10010dd8:	1001255f 	.word	0x1001255f

10010ddc <gattc_event_ind_and_notification_parser>:
10010ddc:	b510      	push	{r4, lr}
10010dde:	780c      	ldrb	r4, [r1, #0]
10010de0:	1c13      	adds	r3, r2, #0
10010de2:	2c12      	cmp	r4, #18
10010de4:	d10e      	bne.n	10010e04 <gattc_event_ind_and_notification_parser+0x28>
10010de6:	0a00      	lsrs	r0, r0, #8
10010de8:	8010      	strh	r0, [r2, #0]
10010dea:	788a      	ldrb	r2, [r1, #2]
10010dec:	709a      	strb	r2, [r3, #2]
10010dee:	7948      	ldrb	r0, [r1, #5]
10010df0:	790c      	ldrb	r4, [r1, #4]
10010df2:	0200      	lsls	r0, r0, #8
10010df4:	4320      	orrs	r0, r4
10010df6:	8098      	strh	r0, [r3, #4]
10010df8:	3106      	adds	r1, #6
10010dfa:	1d98      	adds	r0, r3, #6
10010dfc:	4b0b      	ldr	r3, [pc, #44]	; (10010e2c <gattc_event_ind_and_notification_parser+0x50>)
10010dfe:	4798      	blx	r3
10010e00:	221b      	movs	r2, #27
10010e02:	e010      	b.n	10010e26 <gattc_event_ind_and_notification_parser+0x4a>
10010e04:	2200      	movs	r2, #0
10010e06:	2c13      	cmp	r4, #19
10010e08:	d10d      	bne.n	10010e26 <gattc_event_ind_and_notification_parser+0x4a>
10010e0a:	0a00      	lsrs	r0, r0, #8
10010e0c:	8018      	strh	r0, [r3, #0]
10010e0e:	788a      	ldrb	r2, [r1, #2]
10010e10:	709a      	strb	r2, [r3, #2]
10010e12:	7908      	ldrb	r0, [r1, #4]
10010e14:	78cc      	ldrb	r4, [r1, #3]
10010e16:	0200      	lsls	r0, r0, #8
10010e18:	4320      	orrs	r0, r4
10010e1a:	8098      	strh	r0, [r3, #4]
10010e1c:	3106      	adds	r1, #6
10010e1e:	1d98      	adds	r0, r3, #6
10010e20:	4b02      	ldr	r3, [pc, #8]	; (10010e2c <gattc_event_ind_and_notification_parser+0x50>)
10010e22:	4798      	blx	r3
10010e24:	221c      	movs	r2, #28
10010e26:	1c10      	adds	r0, r2, #0
10010e28:	bd10      	pop	{r4, pc}
10010e2a:	46c0      	nop			; (mov r8, r8)
10010e2c:	1001255f 	.word	0x1001255f

10010e30 <gattc_complete_evt_handler>:
10010e30:	b500      	push	{lr}
10010e32:	0a00      	lsrs	r0, r0, #8
10010e34:	8010      	strh	r0, [r2, #0]
10010e36:	7808      	ldrb	r0, [r1, #0]
10010e38:	7090      	strb	r0, [r2, #2]
10010e3a:	784b      	ldrb	r3, [r1, #1]
10010e3c:	3801      	subs	r0, #1
10010e3e:	70d3      	strb	r3, [r2, #3]
10010e40:	2813      	cmp	r0, #19
10010e42:	d82c      	bhi.n	10010e9e <gattc_complete_evt_handler+0x6e>
10010e44:	f000 f9dc 	bl	10011200 <__gnu_thumb1_case_uqi>
10010e48:	0a0a0a0c 	.word	0x0a0a0a0c
10010e4c:	210a0a0a 	.word	0x210a0a0a
10010e50:	111f2121 	.word	0x111f2121
10010e54:	2b111111 	.word	0x2b111111
10010e58:	2919132b 	.word	0x2919132b
10010e5c:	2017      	movs	r0, #23
10010e5e:	e01f      	b.n	10010ea0 <gattc_complete_evt_handler+0x70>
10010e60:	2024      	movs	r0, #36	; 0x24
10010e62:	2b00      	cmp	r3, #0
10010e64:	d11c      	bne.n	10010ea0 <gattc_complete_evt_handler+0x70>
10010e66:	3017      	adds	r0, #23
10010e68:	e01a      	b.n	10010ea0 <gattc_complete_evt_handler+0x70>
10010e6a:	2025      	movs	r0, #37	; 0x25
10010e6c:	e018      	b.n	10010ea0 <gattc_complete_evt_handler+0x70>
10010e6e:	4a0d      	ldr	r2, [pc, #52]	; (10010ea4 <gattc_complete_evt_handler+0x74>)
10010e70:	201d      	movs	r0, #29
10010e72:	6813      	ldr	r3, [r2, #0]
10010e74:	3b01      	subs	r3, #1
10010e76:	6013      	str	r3, [r2, #0]
10010e78:	e012      	b.n	10010ea0 <gattc_complete_evt_handler+0x70>
10010e7a:	4a0a      	ldr	r2, [pc, #40]	; (10010ea4 <gattc_complete_evt_handler+0x74>)
10010e7c:	201e      	movs	r0, #30
10010e7e:	6813      	ldr	r3, [r2, #0]
10010e80:	3b01      	subs	r3, #1
10010e82:	6013      	str	r3, [r2, #0]
10010e84:	e00c      	b.n	10010ea0 <gattc_complete_evt_handler+0x70>
10010e86:	2019      	movs	r0, #25
10010e88:	e00a      	b.n	10010ea0 <gattc_complete_evt_handler+0x70>
10010e8a:	203b      	movs	r0, #59	; 0x3b
10010e8c:	2b00      	cmp	r3, #0
10010e8e:	d007      	beq.n	10010ea0 <gattc_complete_evt_handler+0x70>
10010e90:	2182      	movs	r1, #130	; 0x82
10010e92:	0089      	lsls	r1, r1, #2
10010e94:	5453      	strb	r3, [r2, r1]
10010e96:	3823      	subs	r0, #35	; 0x23
10010e98:	e002      	b.n	10010ea0 <gattc_complete_evt_handler+0x70>
10010e9a:	2021      	movs	r0, #33	; 0x21
10010e9c:	e000      	b.n	10010ea0 <gattc_complete_evt_handler+0x70>
10010e9e:	2000      	movs	r0, #0
10010ea0:	bd00      	pop	{pc}
10010ea2:	46c0      	nop			; (mov r8, r8)
10010ea4:	10016ebc 	.word	0x10016ebc

10010ea8 <gattc_event_mtu_changed_ind_parser>:
10010ea8:	0a00      	lsrs	r0, r0, #8
10010eaa:	8010      	strh	r0, [r2, #0]
10010eac:	784b      	ldrb	r3, [r1, #1]
10010eae:	7809      	ldrb	r1, [r1, #0]
10010eb0:	021b      	lsls	r3, r3, #8
10010eb2:	430b      	orrs	r3, r1
10010eb4:	8053      	strh	r3, [r2, #2]
10010eb6:	4770      	bx	lr

10010eb8 <gattc_read_ind_parser>:
10010eb8:	0a00      	lsrs	r0, r0, #8
10010eba:	b508      	push	{r3, lr}
10010ebc:	8010      	strh	r0, [r2, #0]
10010ebe:	1c13      	adds	r3, r2, #0
10010ec0:	2282      	movs	r2, #130	; 0x82
10010ec2:	2000      	movs	r0, #0
10010ec4:	0092      	lsls	r2, r2, #2
10010ec6:	5498      	strb	r0, [r3, r2]
10010ec8:	784a      	ldrb	r2, [r1, #1]
10010eca:	7808      	ldrb	r0, [r1, #0]
10010ecc:	0212      	lsls	r2, r2, #8
10010ece:	4302      	orrs	r2, r0
10010ed0:	805a      	strh	r2, [r3, #2]
10010ed2:	78ca      	ldrb	r2, [r1, #3]
10010ed4:	7888      	ldrb	r0, [r1, #2]
10010ed6:	0212      	lsls	r2, r2, #8
10010ed8:	4302      	orrs	r2, r0
10010eda:	80da      	strh	r2, [r3, #6]
10010edc:	794a      	ldrb	r2, [r1, #5]
10010ede:	7908      	ldrb	r0, [r1, #4]
10010ee0:	0212      	lsls	r2, r2, #8
10010ee2:	4302      	orrs	r2, r0
10010ee4:	809a      	strh	r2, [r3, #4]
10010ee6:	3308      	adds	r3, #8
10010ee8:	1c18      	adds	r0, r3, #0
10010eea:	3106      	adds	r1, #6
10010eec:	4b01      	ldr	r3, [pc, #4]	; (10010ef4 <gattc_read_ind_parser+0x3c>)
10010eee:	4798      	blx	r3
10010ef0:	bd08      	pop	{r3, pc}
10010ef2:	46c0      	nop			; (mov r8, r8)
10010ef4:	1001255f 	.word	0x1001255f

10010ef8 <gattc_svc_changed_cfg_ind_parser>:
10010ef8:	0a00      	lsrs	r0, r0, #8
10010efa:	8010      	strh	r0, [r2, #0]
10010efc:	784b      	ldrb	r3, [r1, #1]
10010efe:	7809      	ldrb	r1, [r1, #0]
10010f00:	021b      	lsls	r3, r3, #8
10010f02:	430b      	orrs	r3, r1
10010f04:	8053      	strh	r3, [r2, #2]
10010f06:	4770      	bx	lr

10010f08 <init_gattc_task_module>:
10010f08:	2300      	movs	r3, #0
10010f0a:	4a02      	ldr	r2, [pc, #8]	; (10010f14 <init_gattc_task_module+0xc>)
10010f0c:	8013      	strh	r3, [r2, #0]
10010f0e:	4a02      	ldr	r2, [pc, #8]	; (10010f18 <init_gattc_task_module+0x10>)
10010f10:	8013      	strh	r3, [r2, #0]
10010f12:	4770      	bx	lr
10010f14:	10016eb6 	.word	0x10016eb6
10010f18:	10016eb8 	.word	0x10016eb8

10010f1c <gattm_add_svc_req_handler>:
10010f1c:	2200      	movs	r2, #0
10010f1e:	210b      	movs	r1, #11
10010f20:	b5f0      	push	{r4, r5, r6, r7, lr}
10010f22:	1c04      	adds	r4, r0, #0
10010f24:	7943      	ldrb	r3, [r0, #5]
10010f26:	b085      	sub	sp, #20
10010f28:	9301      	str	r3, [sp, #4]
10010f2a:	ab02      	add	r3, sp, #8
10010f2c:	71da      	strb	r2, [r3, #7]
10010f2e:	4b37      	ldr	r3, [pc, #220]	; (1001100c <gattm_add_svc_req_handler+0xf0>)
10010f30:	7059      	strb	r1, [r3, #1]
10010f32:	7099      	strb	r1, [r3, #2]
10010f34:	4936      	ldr	r1, [pc, #216]	; (10011010 <gattm_add_svc_req_handler+0xf4>)
10010f36:	701a      	strb	r2, [r3, #0]
10010f38:	8808      	ldrh	r0, [r1, #0]
10010f3a:	8809      	ldrh	r1, [r1, #0]
10010f3c:	70da      	strb	r2, [r3, #3]
10010f3e:	0a09      	lsrs	r1, r1, #8
10010f40:	7118      	strb	r0, [r3, #4]
10010f42:	7159      	strb	r1, [r3, #5]
10010f44:	8821      	ldrh	r1, [r4, #0]
10010f46:	7219      	strb	r1, [r3, #8]
10010f48:	8821      	ldrh	r1, [r4, #0]
10010f4a:	0a09      	lsrs	r1, r1, #8
10010f4c:	7259      	strb	r1, [r3, #9]
10010f4e:	8861      	ldrh	r1, [r4, #2]
10010f50:	7299      	strb	r1, [r3, #10]
10010f52:	8861      	ldrh	r1, [r4, #2]
10010f54:	0a09      	lsrs	r1, r1, #8
10010f56:	72d9      	strb	r1, [r3, #11]
10010f58:	7921      	ldrb	r1, [r4, #4]
10010f5a:	7319      	strb	r1, [r3, #12]
10010f5c:	4669      	mov	r1, sp
10010f5e:	7909      	ldrb	r1, [r1, #4]
10010f60:	7359      	strb	r1, [r3, #13]
10010f62:	18a1      	adds	r1, r4, r2
10010f64:	7988      	ldrb	r0, [r1, #6]
10010f66:	1899      	adds	r1, r3, r2
10010f68:	3201      	adds	r2, #1
10010f6a:	7388      	strb	r0, [r1, #14]
10010f6c:	2a10      	cmp	r2, #16
10010f6e:	d1f8      	bne.n	10010f62 <gattm_add_svc_req_handler+0x46>
10010f70:	1c27      	adds	r7, r4, #0
10010f72:	2300      	movs	r3, #0
10010f74:	251e      	movs	r5, #30
10010f76:	3716      	adds	r7, #22
10010f78:	9300      	str	r3, [sp, #0]
10010f7a:	9b00      	ldr	r3, [sp, #0]
10010f7c:	9a01      	ldr	r2, [sp, #4]
10010f7e:	4e23      	ldr	r6, [pc, #140]	; (1001100c <gattm_add_svc_req_handler+0xf0>)
10010f80:	4293      	cmp	r3, r2
10010f82:	da21      	bge.n	10010fc8 <gattm_add_svc_req_handler+0xac>
10010f84:	1c39      	adds	r1, r7, #0
10010f86:	1970      	adds	r0, r6, r5
10010f88:	2210      	movs	r2, #16
10010f8a:	4b22      	ldr	r3, [pc, #136]	; (10011014 <gattm_add_svc_req_handler+0xf8>)
10010f8c:	4798      	blx	r3
10010f8e:	1c2b      	adds	r3, r5, #0
10010f90:	8a3a      	ldrh	r2, [r7, #16]
10010f92:	3310      	adds	r3, #16
10010f94:	b29b      	uxth	r3, r3
10010f96:	54f2      	strb	r2, [r6, r3]
10010f98:	1c2b      	adds	r3, r5, #0
10010f9a:	8a3a      	ldrh	r2, [r7, #16]
10010f9c:	3311      	adds	r3, #17
10010f9e:	b29b      	uxth	r3, r3
10010fa0:	0a12      	lsrs	r2, r2, #8
10010fa2:	54f2      	strb	r2, [r6, r3]
10010fa4:	1c2a      	adds	r2, r5, #0
10010fa6:	1c2b      	adds	r3, r5, #0
10010fa8:	8a79      	ldrh	r1, [r7, #18]
10010faa:	3212      	adds	r2, #18
10010fac:	b292      	uxth	r2, r2
10010fae:	54b1      	strb	r1, [r6, r2]
10010fb0:	8a7a      	ldrh	r2, [r7, #18]
10010fb2:	3313      	adds	r3, #19
10010fb4:	b29b      	uxth	r3, r3
10010fb6:	0a12      	lsrs	r2, r2, #8
10010fb8:	54f2      	strb	r2, [r6, r3]
10010fba:	9b00      	ldr	r3, [sp, #0]
10010fbc:	3514      	adds	r5, #20
10010fbe:	3301      	adds	r3, #1
10010fc0:	b2ad      	uxth	r5, r5
10010fc2:	9300      	str	r3, [sp, #0]
10010fc4:	3714      	adds	r7, #20
10010fc6:	e7d8      	b.n	10010f7a <gattm_add_svc_req_handler+0x5e>
10010fc8:	2114      	movs	r1, #20
10010fca:	4d13      	ldr	r5, [pc, #76]	; (10011018 <gattm_add_svc_req_handler+0xfc>)
10010fcc:	4b13      	ldr	r3, [pc, #76]	; (1001101c <gattm_add_svc_req_handler+0x100>)
10010fce:	4351      	muls	r1, r2
10010fd0:	802b      	strh	r3, [r5, #0]
10010fd2:	230b      	movs	r3, #11
10010fd4:	311e      	adds	r1, #30
10010fd6:	80ab      	strh	r3, [r5, #4]
10010fd8:	1c0b      	adds	r3, r1, #0
10010fda:	3b08      	subs	r3, #8
10010fdc:	71b3      	strb	r3, [r6, #6]
10010fde:	121b      	asrs	r3, r3, #8
10010fe0:	71f3      	strb	r3, [r6, #7]
10010fe2:	1c30      	adds	r0, r6, #0
10010fe4:	4b0e      	ldr	r3, [pc, #56]	; (10011020 <gattm_add_svc_req_handler+0x104>)
10010fe6:	4798      	blx	r3
10010fe8:	ab02      	add	r3, sp, #8
10010fea:	1dde      	adds	r6, r3, #7
10010fec:	1c30      	adds	r0, r6, #0
10010fee:	4b0d      	ldr	r3, [pc, #52]	; (10011024 <gattm_add_svc_req_handler+0x108>)
10010ff0:	4798      	blx	r3
10010ff2:	7833      	ldrb	r3, [r6, #0]
10010ff4:	20e2      	movs	r0, #226	; 0xe2
10010ff6:	2b00      	cmp	r3, #0
10010ff8:	d106      	bne.n	10011008 <gattm_add_svc_req_handler+0xec>
10010ffa:	68aa      	ldr	r2, [r5, #8]
10010ffc:	7853      	ldrb	r3, [r2, #1]
10010ffe:	7811      	ldrb	r1, [r2, #0]
10011000:	021b      	lsls	r3, r3, #8
10011002:	430b      	orrs	r3, r1
10011004:	8023      	strh	r3, [r4, #0]
10011006:	7890      	ldrb	r0, [r2, #2]
10011008:	b005      	add	sp, #20
1001100a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001100c:	10018000 	.word	0x10018000
10011010:	10017c90 	.word	0x10017c90
10011014:	1001255f 	.word	0x1001255f
10011018:	10017c84 	.word	0x10017c84
1001101c:	00000b01 	.word	0x00000b01
10011020:	1000f8e9 	.word	0x1000f8e9
10011024:	1000f94d 	.word	0x1000f94d

10011028 <gattm_add_attribute_req_handler>:
10011028:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001102a:	1c1f      	adds	r7, r3, #0
1001102c:	4b16      	ldr	r3, [pc, #88]	; (10011088 <gattm_add_attribute_req_handler+0x60>)
1001102e:	9100      	str	r1, [sp, #0]
10011030:	9201      	str	r2, [sp, #4]
10011032:	1c05      	adds	r5, r0, #0
10011034:	7946      	ldrb	r6, [r0, #5]
10011036:	6818      	ldr	r0, [r3, #0]
10011038:	2114      	movs	r1, #20
1001103a:	4b14      	ldr	r3, [pc, #80]	; (1001108c <gattm_add_attribute_req_handler+0x64>)
1001103c:	382a      	subs	r0, #42	; 0x2a
1001103e:	4798      	blx	r3
10011040:	2311      	movs	r3, #17
10011042:	4286      	cmp	r6, r0
10011044:	d21e      	bcs.n	10011084 <gattm_add_attribute_req_handler+0x5c>
10011046:	2414      	movs	r4, #20
10011048:	4366      	muls	r6, r4
1001104a:	19a8      	adds	r0, r5, r6
1001104c:	2100      	movs	r1, #0
1001104e:	2210      	movs	r2, #16
10011050:	4b0f      	ldr	r3, [pc, #60]	; (10011090 <gattm_add_attribute_req_handler+0x68>)
10011052:	3016      	adds	r0, #22
10011054:	4798      	blx	r3
10011056:	7968      	ldrb	r0, [r5, #5]
10011058:	1c3a      	adds	r2, r7, #0
1001105a:	4360      	muls	r0, r4
1001105c:	1828      	adds	r0, r5, r0
1001105e:	4b0d      	ldr	r3, [pc, #52]	; (10011094 <gattm_add_attribute_req_handler+0x6c>)
10011060:	3016      	adds	r0, #22
10011062:	9908      	ldr	r1, [sp, #32]
10011064:	4798      	blx	r3
10011066:	466a      	mov	r2, sp
10011068:	796b      	ldrb	r3, [r5, #5]
1001106a:	8812      	ldrh	r2, [r2, #0]
1001106c:	435c      	muls	r4, r3
1001106e:	192c      	adds	r4, r5, r4
10011070:	8522      	strh	r2, [r4, #40]	; 0x28
10011072:	466a      	mov	r2, sp
10011074:	8892      	ldrh	r2, [r2, #4]
10011076:	84e2      	strh	r2, [r4, #38]	; 0x26
10011078:	9a09      	ldr	r2, [sp, #36]	; 0x24
1001107a:	8013      	strh	r3, [r2, #0]
1001107c:	796b      	ldrb	r3, [r5, #5]
1001107e:	3301      	adds	r3, #1
10011080:	716b      	strb	r3, [r5, #5]
10011082:	2300      	movs	r3, #0
10011084:	1c18      	adds	r0, r3, #0
10011086:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10011088:	10016e2c 	.word	0x10016e2c
1001108c:	10011215 	.word	0x10011215
10011090:	10012571 	.word	0x10012571
10011094:	1001255f 	.word	0x1001255f

10011098 <gattm_att_set_value_req_handler>:
10011098:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001109a:	466b      	mov	r3, sp
1001109c:	1dde      	adds	r6, r3, #7
1001109e:	2300      	movs	r3, #0
100110a0:	1c0d      	adds	r5, r1, #0
100110a2:	210c      	movs	r1, #12
100110a4:	270b      	movs	r7, #11
100110a6:	4c17      	ldr	r4, [pc, #92]	; (10011104 <gattm_att_set_value_req_handler+0x6c>)
100110a8:	7033      	strb	r3, [r6, #0]
100110aa:	70e3      	strb	r3, [r4, #3]
100110ac:	4b16      	ldr	r3, [pc, #88]	; (10011108 <gattm_att_set_value_req_handler+0x70>)
100110ae:	7021      	strb	r1, [r4, #0]
100110b0:	8819      	ldrh	r1, [r3, #0]
100110b2:	881b      	ldrh	r3, [r3, #0]
100110b4:	7220      	strb	r0, [r4, #8]
100110b6:	0a1b      	lsrs	r3, r3, #8
100110b8:	7163      	strb	r3, [r4, #5]
100110ba:	0a00      	lsrs	r0, r0, #8
100110bc:	0a2b      	lsrs	r3, r5, #8
100110be:	7121      	strb	r1, [r4, #4]
100110c0:	7260      	strb	r0, [r4, #9]
100110c2:	1c11      	adds	r1, r2, #0
100110c4:	72a5      	strb	r5, [r4, #10]
100110c6:	1c2a      	adds	r2, r5, #0
100110c8:	72e3      	strb	r3, [r4, #11]
100110ca:	350c      	adds	r5, #12
100110cc:	4b0f      	ldr	r3, [pc, #60]	; (1001110c <gattm_att_set_value_req_handler+0x74>)
100110ce:	4810      	ldr	r0, [pc, #64]	; (10011110 <gattm_att_set_value_req_handler+0x78>)
100110d0:	7067      	strb	r7, [r4, #1]
100110d2:	70a7      	strb	r7, [r4, #2]
100110d4:	4798      	blx	r3
100110d6:	b2a9      	uxth	r1, r5
100110d8:	4b0e      	ldr	r3, [pc, #56]	; (10011114 <gattm_att_set_value_req_handler+0x7c>)
100110da:	4d0f      	ldr	r5, [pc, #60]	; (10011118 <gattm_att_set_value_req_handler+0x80>)
100110dc:	1c20      	adds	r0, r4, #0
100110de:	802b      	strh	r3, [r5, #0]
100110e0:	1c0b      	adds	r3, r1, #0
100110e2:	3b08      	subs	r3, #8
100110e4:	71a3      	strb	r3, [r4, #6]
100110e6:	121b      	asrs	r3, r3, #8
100110e8:	71e3      	strb	r3, [r4, #7]
100110ea:	4b0c      	ldr	r3, [pc, #48]	; (1001111c <gattm_att_set_value_req_handler+0x84>)
100110ec:	80af      	strh	r7, [r5, #4]
100110ee:	4798      	blx	r3
100110f0:	1c30      	adds	r0, r6, #0
100110f2:	4b0b      	ldr	r3, [pc, #44]	; (10011120 <gattm_att_set_value_req_handler+0x88>)
100110f4:	4798      	blx	r3
100110f6:	7833      	ldrb	r3, [r6, #0]
100110f8:	20e2      	movs	r0, #226	; 0xe2
100110fa:	2b00      	cmp	r3, #0
100110fc:	d101      	bne.n	10011102 <gattm_att_set_value_req_handler+0x6a>
100110fe:	68ab      	ldr	r3, [r5, #8]
10011100:	7898      	ldrb	r0, [r3, #2]
10011102:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10011104:	10018000 	.word	0x10018000
10011108:	10017c90 	.word	0x10017c90
1001110c:	1001255f 	.word	0x1001255f
10011110:	1001800c 	.word	0x1001800c
10011114:	00000b0d 	.word	0x00000b0d
10011118:	10017c84 	.word	0x10017c84
1001111c:	1000f8e9 	.word	0x1000f8e9
10011120:	1000f94d 	.word	0x1000f94d

10011124 <gattm_att_get_value_req_handler>:
10011124:	b5f0      	push	{r4, r5, r6, r7, lr}
10011126:	b085      	sub	sp, #20
10011128:	9201      	str	r2, [sp, #4]
1001112a:	220a      	movs	r2, #10
1001112c:	1c04      	adds	r4, r0, #0
1001112e:	481d      	ldr	r0, [pc, #116]	; (100111a4 <gattm_att_get_value_req_handler+0x80>)
10011130:	ab02      	add	r3, sp, #8
10011132:	1dde      	adds	r6, r3, #7
10011134:	7002      	strb	r2, [r0, #0]
10011136:	2300      	movs	r3, #0
10011138:	220b      	movs	r2, #11
1001113a:	4d1b      	ldr	r5, [pc, #108]	; (100111a8 <gattm_att_get_value_req_handler+0x84>)
1001113c:	1c0f      	adds	r7, r1, #0
1001113e:	8829      	ldrh	r1, [r5, #0]
10011140:	882d      	ldrh	r5, [r5, #0]
10011142:	7101      	strb	r1, [r0, #4]
10011144:	0a2d      	lsrs	r5, r5, #8
10011146:	7145      	strb	r5, [r0, #5]
10011148:	0a25      	lsrs	r5, r4, #8
1001114a:	7245      	strb	r5, [r0, #9]
1001114c:	4917      	ldr	r1, [pc, #92]	; (100111ac <gattm_att_get_value_req_handler+0x88>)
1001114e:	4d18      	ldr	r5, [pc, #96]	; (100111b0 <gattm_att_get_value_req_handler+0x8c>)
10011150:	7033      	strb	r3, [r6, #0]
10011152:	7042      	strb	r2, [r0, #1]
10011154:	7082      	strb	r2, [r0, #2]
10011156:	70c3      	strb	r3, [r0, #3]
10011158:	8029      	strh	r1, [r5, #0]
1001115a:	80aa      	strh	r2, [r5, #4]
1001115c:	71c3      	strb	r3, [r0, #7]
1001115e:	3a09      	subs	r2, #9
10011160:	210a      	movs	r1, #10
10011162:	4b14      	ldr	r3, [pc, #80]	; (100111b4 <gattm_att_get_value_req_handler+0x90>)
10011164:	7182      	strb	r2, [r0, #6]
10011166:	7204      	strb	r4, [r0, #8]
10011168:	4798      	blx	r3
1001116a:	1c30      	adds	r0, r6, #0
1001116c:	4b12      	ldr	r3, [pc, #72]	; (100111b8 <gattm_att_get_value_req_handler+0x94>)
1001116e:	4798      	blx	r3
10011170:	7833      	ldrb	r3, [r6, #0]
10011172:	20e2      	movs	r0, #226	; 0xe2
10011174:	2b00      	cmp	r3, #0
10011176:	d112      	bne.n	1001119e <gattm_att_get_value_req_handler+0x7a>
10011178:	68a9      	ldr	r1, [r5, #8]
1001117a:	9801      	ldr	r0, [sp, #4]
1001117c:	784d      	ldrb	r5, [r1, #1]
1001117e:	780b      	ldrb	r3, [r1, #0]
10011180:	78ca      	ldrb	r2, [r1, #3]
10011182:	022d      	lsls	r5, r5, #8
10011184:	431d      	orrs	r5, r3
10011186:	788b      	ldrb	r3, [r1, #2]
10011188:	0212      	lsls	r2, r2, #8
1001118a:	431a      	orrs	r2, r3
1001118c:	803a      	strh	r2, [r7, #0]
1001118e:	790e      	ldrb	r6, [r1, #4]
10011190:	4b0a      	ldr	r3, [pc, #40]	; (100111bc <gattm_att_get_value_req_handler+0x98>)
10011192:	3105      	adds	r1, #5
10011194:	4798      	blx	r3
10011196:	20e2      	movs	r0, #226	; 0xe2
10011198:	42ac      	cmp	r4, r5
1001119a:	d100      	bne.n	1001119e <gattm_att_get_value_req_handler+0x7a>
1001119c:	1c30      	adds	r0, r6, #0
1001119e:	b005      	add	sp, #20
100111a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100111a2:	46c0      	nop			; (mov r8, r8)
100111a4:	10018000 	.word	0x10018000
100111a8:	10017c90 	.word	0x10017c90
100111ac:	00000b0b 	.word	0x00000b0b
100111b0:	10017c84 	.word	0x10017c84
100111b4:	1000f8e9 	.word	0x1000f8e9
100111b8:	1000f94d 	.word	0x1000f94d
100111bc:	1001255f 	.word	0x1001255f

100111c0 <htpt_enable_rsp_handler>:
100111c0:	780b      	ldrb	r3, [r1, #0]
100111c2:	7013      	strb	r3, [r2, #0]
100111c4:	784b      	ldrb	r3, [r1, #1]
100111c6:	7053      	strb	r3, [r2, #1]
100111c8:	4770      	bx	lr

100111ca <htpt_temp_send_rsp_handler>:
100111ca:	780b      	ldrb	r3, [r1, #0]
100111cc:	7013      	strb	r3, [r2, #0]
100111ce:	4770      	bx	lr

100111d0 <htpt_meas_intv_upd_rsp_handler>:
100111d0:	780b      	ldrb	r3, [r1, #0]
100111d2:	7013      	strb	r3, [r2, #0]
100111d4:	4770      	bx	lr

100111d6 <htpt_meas_intv_chg_req_ind_handler>:
100111d6:	78cb      	ldrb	r3, [r1, #3]
100111d8:	7889      	ldrb	r1, [r1, #2]
100111da:	021b      	lsls	r3, r3, #8
100111dc:	430b      	orrs	r3, r1
100111de:	8013      	strh	r3, [r2, #0]
100111e0:	4770      	bx	lr

100111e2 <htpt_cfg_indntf_ind_handler>:
100111e2:	780b      	ldrb	r3, [r1, #0]
100111e4:	7013      	strb	r3, [r2, #0]
100111e6:	784b      	ldrb	r3, [r1, #1]
100111e8:	7053      	strb	r3, [r2, #1]
100111ea:	4770      	bx	lr

100111ec <__gnu_thumb1_case_sqi>:
100111ec:	b402      	push	{r1}
100111ee:	4671      	mov	r1, lr
100111f0:	0849      	lsrs	r1, r1, #1
100111f2:	0049      	lsls	r1, r1, #1
100111f4:	5609      	ldrsb	r1, [r1, r0]
100111f6:	0049      	lsls	r1, r1, #1
100111f8:	448e      	add	lr, r1
100111fa:	bc02      	pop	{r1}
100111fc:	4770      	bx	lr
100111fe:	46c0      	nop			; (mov r8, r8)

10011200 <__gnu_thumb1_case_uqi>:
10011200:	b402      	push	{r1}
10011202:	4671      	mov	r1, lr
10011204:	0849      	lsrs	r1, r1, #1
10011206:	0049      	lsls	r1, r1, #1
10011208:	5c09      	ldrb	r1, [r1, r0]
1001120a:	0049      	lsls	r1, r1, #1
1001120c:	448e      	add	lr, r1
1001120e:	bc02      	pop	{r1}
10011210:	4770      	bx	lr
10011212:	46c0      	nop			; (mov r8, r8)

10011214 <__aeabi_uidiv>:
10011214:	2200      	movs	r2, #0
10011216:	0843      	lsrs	r3, r0, #1
10011218:	428b      	cmp	r3, r1
1001121a:	d374      	bcc.n	10011306 <__aeabi_uidiv+0xf2>
1001121c:	0903      	lsrs	r3, r0, #4
1001121e:	428b      	cmp	r3, r1
10011220:	d35f      	bcc.n	100112e2 <__aeabi_uidiv+0xce>
10011222:	0a03      	lsrs	r3, r0, #8
10011224:	428b      	cmp	r3, r1
10011226:	d344      	bcc.n	100112b2 <__aeabi_uidiv+0x9e>
10011228:	0b03      	lsrs	r3, r0, #12
1001122a:	428b      	cmp	r3, r1
1001122c:	d328      	bcc.n	10011280 <__aeabi_uidiv+0x6c>
1001122e:	0c03      	lsrs	r3, r0, #16
10011230:	428b      	cmp	r3, r1
10011232:	d30d      	bcc.n	10011250 <__aeabi_uidiv+0x3c>
10011234:	22ff      	movs	r2, #255	; 0xff
10011236:	0209      	lsls	r1, r1, #8
10011238:	ba12      	rev	r2, r2
1001123a:	0c03      	lsrs	r3, r0, #16
1001123c:	428b      	cmp	r3, r1
1001123e:	d302      	bcc.n	10011246 <__aeabi_uidiv+0x32>
10011240:	1212      	asrs	r2, r2, #8
10011242:	0209      	lsls	r1, r1, #8
10011244:	d065      	beq.n	10011312 <__aeabi_uidiv+0xfe>
10011246:	0b03      	lsrs	r3, r0, #12
10011248:	428b      	cmp	r3, r1
1001124a:	d319      	bcc.n	10011280 <__aeabi_uidiv+0x6c>
1001124c:	e000      	b.n	10011250 <__aeabi_uidiv+0x3c>
1001124e:	0a09      	lsrs	r1, r1, #8
10011250:	0bc3      	lsrs	r3, r0, #15
10011252:	428b      	cmp	r3, r1
10011254:	d301      	bcc.n	1001125a <__aeabi_uidiv+0x46>
10011256:	03cb      	lsls	r3, r1, #15
10011258:	1ac0      	subs	r0, r0, r3
1001125a:	4152      	adcs	r2, r2
1001125c:	0b83      	lsrs	r3, r0, #14
1001125e:	428b      	cmp	r3, r1
10011260:	d301      	bcc.n	10011266 <__aeabi_uidiv+0x52>
10011262:	038b      	lsls	r3, r1, #14
10011264:	1ac0      	subs	r0, r0, r3
10011266:	4152      	adcs	r2, r2
10011268:	0b43      	lsrs	r3, r0, #13
1001126a:	428b      	cmp	r3, r1
1001126c:	d301      	bcc.n	10011272 <__aeabi_uidiv+0x5e>
1001126e:	034b      	lsls	r3, r1, #13
10011270:	1ac0      	subs	r0, r0, r3
10011272:	4152      	adcs	r2, r2
10011274:	0b03      	lsrs	r3, r0, #12
10011276:	428b      	cmp	r3, r1
10011278:	d301      	bcc.n	1001127e <__aeabi_uidiv+0x6a>
1001127a:	030b      	lsls	r3, r1, #12
1001127c:	1ac0      	subs	r0, r0, r3
1001127e:	4152      	adcs	r2, r2
10011280:	0ac3      	lsrs	r3, r0, #11
10011282:	428b      	cmp	r3, r1
10011284:	d301      	bcc.n	1001128a <__aeabi_uidiv+0x76>
10011286:	02cb      	lsls	r3, r1, #11
10011288:	1ac0      	subs	r0, r0, r3
1001128a:	4152      	adcs	r2, r2
1001128c:	0a83      	lsrs	r3, r0, #10
1001128e:	428b      	cmp	r3, r1
10011290:	d301      	bcc.n	10011296 <__aeabi_uidiv+0x82>
10011292:	028b      	lsls	r3, r1, #10
10011294:	1ac0      	subs	r0, r0, r3
10011296:	4152      	adcs	r2, r2
10011298:	0a43      	lsrs	r3, r0, #9
1001129a:	428b      	cmp	r3, r1
1001129c:	d301      	bcc.n	100112a2 <__aeabi_uidiv+0x8e>
1001129e:	024b      	lsls	r3, r1, #9
100112a0:	1ac0      	subs	r0, r0, r3
100112a2:	4152      	adcs	r2, r2
100112a4:	0a03      	lsrs	r3, r0, #8
100112a6:	428b      	cmp	r3, r1
100112a8:	d301      	bcc.n	100112ae <__aeabi_uidiv+0x9a>
100112aa:	020b      	lsls	r3, r1, #8
100112ac:	1ac0      	subs	r0, r0, r3
100112ae:	4152      	adcs	r2, r2
100112b0:	d2cd      	bcs.n	1001124e <__aeabi_uidiv+0x3a>
100112b2:	09c3      	lsrs	r3, r0, #7
100112b4:	428b      	cmp	r3, r1
100112b6:	d301      	bcc.n	100112bc <__aeabi_uidiv+0xa8>
100112b8:	01cb      	lsls	r3, r1, #7
100112ba:	1ac0      	subs	r0, r0, r3
100112bc:	4152      	adcs	r2, r2
100112be:	0983      	lsrs	r3, r0, #6
100112c0:	428b      	cmp	r3, r1
100112c2:	d301      	bcc.n	100112c8 <__aeabi_uidiv+0xb4>
100112c4:	018b      	lsls	r3, r1, #6
100112c6:	1ac0      	subs	r0, r0, r3
100112c8:	4152      	adcs	r2, r2
100112ca:	0943      	lsrs	r3, r0, #5
100112cc:	428b      	cmp	r3, r1
100112ce:	d301      	bcc.n	100112d4 <__aeabi_uidiv+0xc0>
100112d0:	014b      	lsls	r3, r1, #5
100112d2:	1ac0      	subs	r0, r0, r3
100112d4:	4152      	adcs	r2, r2
100112d6:	0903      	lsrs	r3, r0, #4
100112d8:	428b      	cmp	r3, r1
100112da:	d301      	bcc.n	100112e0 <__aeabi_uidiv+0xcc>
100112dc:	010b      	lsls	r3, r1, #4
100112de:	1ac0      	subs	r0, r0, r3
100112e0:	4152      	adcs	r2, r2
100112e2:	08c3      	lsrs	r3, r0, #3
100112e4:	428b      	cmp	r3, r1
100112e6:	d301      	bcc.n	100112ec <__aeabi_uidiv+0xd8>
100112e8:	00cb      	lsls	r3, r1, #3
100112ea:	1ac0      	subs	r0, r0, r3
100112ec:	4152      	adcs	r2, r2
100112ee:	0883      	lsrs	r3, r0, #2
100112f0:	428b      	cmp	r3, r1
100112f2:	d301      	bcc.n	100112f8 <__aeabi_uidiv+0xe4>
100112f4:	008b      	lsls	r3, r1, #2
100112f6:	1ac0      	subs	r0, r0, r3
100112f8:	4152      	adcs	r2, r2
100112fa:	0843      	lsrs	r3, r0, #1
100112fc:	428b      	cmp	r3, r1
100112fe:	d301      	bcc.n	10011304 <__aeabi_uidiv+0xf0>
10011300:	004b      	lsls	r3, r1, #1
10011302:	1ac0      	subs	r0, r0, r3
10011304:	4152      	adcs	r2, r2
10011306:	1a41      	subs	r1, r0, r1
10011308:	d200      	bcs.n	1001130c <__aeabi_uidiv+0xf8>
1001130a:	4601      	mov	r1, r0
1001130c:	4152      	adcs	r2, r2
1001130e:	4610      	mov	r0, r2
10011310:	4770      	bx	lr
10011312:	e7ff      	b.n	10011314 <__aeabi_uidiv+0x100>
10011314:	b501      	push	{r0, lr}
10011316:	2000      	movs	r0, #0
10011318:	f000 f8f0 	bl	100114fc <__aeabi_idiv0>
1001131c:	bd02      	pop	{r1, pc}
1001131e:	46c0      	nop			; (mov r8, r8)

10011320 <__aeabi_uidivmod>:
10011320:	2900      	cmp	r1, #0
10011322:	d0f7      	beq.n	10011314 <__aeabi_uidiv+0x100>
10011324:	e776      	b.n	10011214 <__aeabi_uidiv>
10011326:	4770      	bx	lr

10011328 <__aeabi_idiv>:
10011328:	4603      	mov	r3, r0
1001132a:	430b      	orrs	r3, r1
1001132c:	d47f      	bmi.n	1001142e <__aeabi_idiv+0x106>
1001132e:	2200      	movs	r2, #0
10011330:	0843      	lsrs	r3, r0, #1
10011332:	428b      	cmp	r3, r1
10011334:	d374      	bcc.n	10011420 <__aeabi_idiv+0xf8>
10011336:	0903      	lsrs	r3, r0, #4
10011338:	428b      	cmp	r3, r1
1001133a:	d35f      	bcc.n	100113fc <__aeabi_idiv+0xd4>
1001133c:	0a03      	lsrs	r3, r0, #8
1001133e:	428b      	cmp	r3, r1
10011340:	d344      	bcc.n	100113cc <__aeabi_idiv+0xa4>
10011342:	0b03      	lsrs	r3, r0, #12
10011344:	428b      	cmp	r3, r1
10011346:	d328      	bcc.n	1001139a <__aeabi_idiv+0x72>
10011348:	0c03      	lsrs	r3, r0, #16
1001134a:	428b      	cmp	r3, r1
1001134c:	d30d      	bcc.n	1001136a <__aeabi_idiv+0x42>
1001134e:	22ff      	movs	r2, #255	; 0xff
10011350:	0209      	lsls	r1, r1, #8
10011352:	ba12      	rev	r2, r2
10011354:	0c03      	lsrs	r3, r0, #16
10011356:	428b      	cmp	r3, r1
10011358:	d302      	bcc.n	10011360 <__aeabi_idiv+0x38>
1001135a:	1212      	asrs	r2, r2, #8
1001135c:	0209      	lsls	r1, r1, #8
1001135e:	d065      	beq.n	1001142c <__aeabi_idiv+0x104>
10011360:	0b03      	lsrs	r3, r0, #12
10011362:	428b      	cmp	r3, r1
10011364:	d319      	bcc.n	1001139a <__aeabi_idiv+0x72>
10011366:	e000      	b.n	1001136a <__aeabi_idiv+0x42>
10011368:	0a09      	lsrs	r1, r1, #8
1001136a:	0bc3      	lsrs	r3, r0, #15
1001136c:	428b      	cmp	r3, r1
1001136e:	d301      	bcc.n	10011374 <__aeabi_idiv+0x4c>
10011370:	03cb      	lsls	r3, r1, #15
10011372:	1ac0      	subs	r0, r0, r3
10011374:	4152      	adcs	r2, r2
10011376:	0b83      	lsrs	r3, r0, #14
10011378:	428b      	cmp	r3, r1
1001137a:	d301      	bcc.n	10011380 <__aeabi_idiv+0x58>
1001137c:	038b      	lsls	r3, r1, #14
1001137e:	1ac0      	subs	r0, r0, r3
10011380:	4152      	adcs	r2, r2
10011382:	0b43      	lsrs	r3, r0, #13
10011384:	428b      	cmp	r3, r1
10011386:	d301      	bcc.n	1001138c <__aeabi_idiv+0x64>
10011388:	034b      	lsls	r3, r1, #13
1001138a:	1ac0      	subs	r0, r0, r3
1001138c:	4152      	adcs	r2, r2
1001138e:	0b03      	lsrs	r3, r0, #12
10011390:	428b      	cmp	r3, r1
10011392:	d301      	bcc.n	10011398 <__aeabi_idiv+0x70>
10011394:	030b      	lsls	r3, r1, #12
10011396:	1ac0      	subs	r0, r0, r3
10011398:	4152      	adcs	r2, r2
1001139a:	0ac3      	lsrs	r3, r0, #11
1001139c:	428b      	cmp	r3, r1
1001139e:	d301      	bcc.n	100113a4 <__aeabi_idiv+0x7c>
100113a0:	02cb      	lsls	r3, r1, #11
100113a2:	1ac0      	subs	r0, r0, r3
100113a4:	4152      	adcs	r2, r2
100113a6:	0a83      	lsrs	r3, r0, #10
100113a8:	428b      	cmp	r3, r1
100113aa:	d301      	bcc.n	100113b0 <__aeabi_idiv+0x88>
100113ac:	028b      	lsls	r3, r1, #10
100113ae:	1ac0      	subs	r0, r0, r3
100113b0:	4152      	adcs	r2, r2
100113b2:	0a43      	lsrs	r3, r0, #9
100113b4:	428b      	cmp	r3, r1
100113b6:	d301      	bcc.n	100113bc <__aeabi_idiv+0x94>
100113b8:	024b      	lsls	r3, r1, #9
100113ba:	1ac0      	subs	r0, r0, r3
100113bc:	4152      	adcs	r2, r2
100113be:	0a03      	lsrs	r3, r0, #8
100113c0:	428b      	cmp	r3, r1
100113c2:	d301      	bcc.n	100113c8 <__aeabi_idiv+0xa0>
100113c4:	020b      	lsls	r3, r1, #8
100113c6:	1ac0      	subs	r0, r0, r3
100113c8:	4152      	adcs	r2, r2
100113ca:	d2cd      	bcs.n	10011368 <__aeabi_idiv+0x40>
100113cc:	09c3      	lsrs	r3, r0, #7
100113ce:	428b      	cmp	r3, r1
100113d0:	d301      	bcc.n	100113d6 <__aeabi_idiv+0xae>
100113d2:	01cb      	lsls	r3, r1, #7
100113d4:	1ac0      	subs	r0, r0, r3
100113d6:	4152      	adcs	r2, r2
100113d8:	0983      	lsrs	r3, r0, #6
100113da:	428b      	cmp	r3, r1
100113dc:	d301      	bcc.n	100113e2 <__aeabi_idiv+0xba>
100113de:	018b      	lsls	r3, r1, #6
100113e0:	1ac0      	subs	r0, r0, r3
100113e2:	4152      	adcs	r2, r2
100113e4:	0943      	lsrs	r3, r0, #5
100113e6:	428b      	cmp	r3, r1
100113e8:	d301      	bcc.n	100113ee <__aeabi_idiv+0xc6>
100113ea:	014b      	lsls	r3, r1, #5
100113ec:	1ac0      	subs	r0, r0, r3
100113ee:	4152      	adcs	r2, r2
100113f0:	0903      	lsrs	r3, r0, #4
100113f2:	428b      	cmp	r3, r1
100113f4:	d301      	bcc.n	100113fa <__aeabi_idiv+0xd2>
100113f6:	010b      	lsls	r3, r1, #4
100113f8:	1ac0      	subs	r0, r0, r3
100113fa:	4152      	adcs	r2, r2
100113fc:	08c3      	lsrs	r3, r0, #3
100113fe:	428b      	cmp	r3, r1
10011400:	d301      	bcc.n	10011406 <__aeabi_idiv+0xde>
10011402:	00cb      	lsls	r3, r1, #3
10011404:	1ac0      	subs	r0, r0, r3
10011406:	4152      	adcs	r2, r2
10011408:	0883      	lsrs	r3, r0, #2
1001140a:	428b      	cmp	r3, r1
1001140c:	d301      	bcc.n	10011412 <__aeabi_idiv+0xea>
1001140e:	008b      	lsls	r3, r1, #2
10011410:	1ac0      	subs	r0, r0, r3
10011412:	4152      	adcs	r2, r2
10011414:	0843      	lsrs	r3, r0, #1
10011416:	428b      	cmp	r3, r1
10011418:	d301      	bcc.n	1001141e <__aeabi_idiv+0xf6>
1001141a:	004b      	lsls	r3, r1, #1
1001141c:	1ac0      	subs	r0, r0, r3
1001141e:	4152      	adcs	r2, r2
10011420:	1a41      	subs	r1, r0, r1
10011422:	d200      	bcs.n	10011426 <__aeabi_idiv+0xfe>
10011424:	4601      	mov	r1, r0
10011426:	4152      	adcs	r2, r2
10011428:	4610      	mov	r0, r2
1001142a:	4770      	bx	lr
1001142c:	e05d      	b.n	100114ea <__aeabi_idiv+0x1c2>
1001142e:	0fca      	lsrs	r2, r1, #31
10011430:	d000      	beq.n	10011434 <__aeabi_idiv+0x10c>
10011432:	4249      	negs	r1, r1
10011434:	1003      	asrs	r3, r0, #32
10011436:	d300      	bcc.n	1001143a <__aeabi_idiv+0x112>
10011438:	4240      	negs	r0, r0
1001143a:	4053      	eors	r3, r2
1001143c:	2200      	movs	r2, #0
1001143e:	469c      	mov	ip, r3
10011440:	0903      	lsrs	r3, r0, #4
10011442:	428b      	cmp	r3, r1
10011444:	d32d      	bcc.n	100114a2 <__aeabi_idiv+0x17a>
10011446:	0a03      	lsrs	r3, r0, #8
10011448:	428b      	cmp	r3, r1
1001144a:	d312      	bcc.n	10011472 <__aeabi_idiv+0x14a>
1001144c:	22fc      	movs	r2, #252	; 0xfc
1001144e:	0189      	lsls	r1, r1, #6
10011450:	ba12      	rev	r2, r2
10011452:	0a03      	lsrs	r3, r0, #8
10011454:	428b      	cmp	r3, r1
10011456:	d30c      	bcc.n	10011472 <__aeabi_idiv+0x14a>
10011458:	0189      	lsls	r1, r1, #6
1001145a:	1192      	asrs	r2, r2, #6
1001145c:	428b      	cmp	r3, r1
1001145e:	d308      	bcc.n	10011472 <__aeabi_idiv+0x14a>
10011460:	0189      	lsls	r1, r1, #6
10011462:	1192      	asrs	r2, r2, #6
10011464:	428b      	cmp	r3, r1
10011466:	d304      	bcc.n	10011472 <__aeabi_idiv+0x14a>
10011468:	0189      	lsls	r1, r1, #6
1001146a:	d03a      	beq.n	100114e2 <__aeabi_idiv+0x1ba>
1001146c:	1192      	asrs	r2, r2, #6
1001146e:	e000      	b.n	10011472 <__aeabi_idiv+0x14a>
10011470:	0989      	lsrs	r1, r1, #6
10011472:	09c3      	lsrs	r3, r0, #7
10011474:	428b      	cmp	r3, r1
10011476:	d301      	bcc.n	1001147c <__aeabi_idiv+0x154>
10011478:	01cb      	lsls	r3, r1, #7
1001147a:	1ac0      	subs	r0, r0, r3
1001147c:	4152      	adcs	r2, r2
1001147e:	0983      	lsrs	r3, r0, #6
10011480:	428b      	cmp	r3, r1
10011482:	d301      	bcc.n	10011488 <__aeabi_idiv+0x160>
10011484:	018b      	lsls	r3, r1, #6
10011486:	1ac0      	subs	r0, r0, r3
10011488:	4152      	adcs	r2, r2
1001148a:	0943      	lsrs	r3, r0, #5
1001148c:	428b      	cmp	r3, r1
1001148e:	d301      	bcc.n	10011494 <__aeabi_idiv+0x16c>
10011490:	014b      	lsls	r3, r1, #5
10011492:	1ac0      	subs	r0, r0, r3
10011494:	4152      	adcs	r2, r2
10011496:	0903      	lsrs	r3, r0, #4
10011498:	428b      	cmp	r3, r1
1001149a:	d301      	bcc.n	100114a0 <__aeabi_idiv+0x178>
1001149c:	010b      	lsls	r3, r1, #4
1001149e:	1ac0      	subs	r0, r0, r3
100114a0:	4152      	adcs	r2, r2
100114a2:	08c3      	lsrs	r3, r0, #3
100114a4:	428b      	cmp	r3, r1
100114a6:	d301      	bcc.n	100114ac <__aeabi_idiv+0x184>
100114a8:	00cb      	lsls	r3, r1, #3
100114aa:	1ac0      	subs	r0, r0, r3
100114ac:	4152      	adcs	r2, r2
100114ae:	0883      	lsrs	r3, r0, #2
100114b0:	428b      	cmp	r3, r1
100114b2:	d301      	bcc.n	100114b8 <__aeabi_idiv+0x190>
100114b4:	008b      	lsls	r3, r1, #2
100114b6:	1ac0      	subs	r0, r0, r3
100114b8:	4152      	adcs	r2, r2
100114ba:	d2d9      	bcs.n	10011470 <__aeabi_idiv+0x148>
100114bc:	0843      	lsrs	r3, r0, #1
100114be:	428b      	cmp	r3, r1
100114c0:	d301      	bcc.n	100114c6 <__aeabi_idiv+0x19e>
100114c2:	004b      	lsls	r3, r1, #1
100114c4:	1ac0      	subs	r0, r0, r3
100114c6:	4152      	adcs	r2, r2
100114c8:	1a41      	subs	r1, r0, r1
100114ca:	d200      	bcs.n	100114ce <__aeabi_idiv+0x1a6>
100114cc:	4601      	mov	r1, r0
100114ce:	4663      	mov	r3, ip
100114d0:	4152      	adcs	r2, r2
100114d2:	105b      	asrs	r3, r3, #1
100114d4:	4610      	mov	r0, r2
100114d6:	d301      	bcc.n	100114dc <__aeabi_idiv+0x1b4>
100114d8:	4240      	negs	r0, r0
100114da:	2b00      	cmp	r3, #0
100114dc:	d500      	bpl.n	100114e0 <__aeabi_idiv+0x1b8>
100114de:	4249      	negs	r1, r1
100114e0:	4770      	bx	lr
100114e2:	4663      	mov	r3, ip
100114e4:	105b      	asrs	r3, r3, #1
100114e6:	d300      	bcc.n	100114ea <__aeabi_idiv+0x1c2>
100114e8:	4240      	negs	r0, r0
100114ea:	b501      	push	{r0, lr}
100114ec:	2000      	movs	r0, #0
100114ee:	f000 f805 	bl	100114fc <__aeabi_idiv0>
100114f2:	bd02      	pop	{r1, pc}

100114f4 <__aeabi_idivmod>:
100114f4:	2900      	cmp	r1, #0
100114f6:	d0f8      	beq.n	100114ea <__aeabi_idiv+0x1c2>
100114f8:	e716      	b.n	10011328 <__aeabi_idiv>
100114fa:	4770      	bx	lr

100114fc <__aeabi_idiv0>:
100114fc:	4770      	bx	lr
100114fe:	46c0      	nop			; (mov r8, r8)

10011500 <__aeabi_cdrcmple>:
10011500:	4684      	mov	ip, r0
10011502:	1c10      	adds	r0, r2, #0
10011504:	4662      	mov	r2, ip
10011506:	468c      	mov	ip, r1
10011508:	1c19      	adds	r1, r3, #0
1001150a:	4663      	mov	r3, ip
1001150c:	e000      	b.n	10011510 <__aeabi_cdcmpeq>
1001150e:	46c0      	nop			; (mov r8, r8)

10011510 <__aeabi_cdcmpeq>:
10011510:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10011512:	f000 f921 	bl	10011758 <__ledf2>
10011516:	2800      	cmp	r0, #0
10011518:	d401      	bmi.n	1001151e <__aeabi_cdcmpeq+0xe>
1001151a:	2100      	movs	r1, #0
1001151c:	42c8      	cmn	r0, r1
1001151e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10011520 <__aeabi_dcmpeq>:
10011520:	b510      	push	{r4, lr}
10011522:	f000 f875 	bl	10011610 <__eqdf2>
10011526:	4240      	negs	r0, r0
10011528:	3001      	adds	r0, #1
1001152a:	bd10      	pop	{r4, pc}

1001152c <__aeabi_dcmplt>:
1001152c:	b510      	push	{r4, lr}
1001152e:	f000 f913 	bl	10011758 <__ledf2>
10011532:	2800      	cmp	r0, #0
10011534:	db01      	blt.n	1001153a <__aeabi_dcmplt+0xe>
10011536:	2000      	movs	r0, #0
10011538:	bd10      	pop	{r4, pc}
1001153a:	2001      	movs	r0, #1
1001153c:	bd10      	pop	{r4, pc}
1001153e:	46c0      	nop			; (mov r8, r8)

10011540 <__aeabi_dcmple>:
10011540:	b510      	push	{r4, lr}
10011542:	f000 f909 	bl	10011758 <__ledf2>
10011546:	2800      	cmp	r0, #0
10011548:	dd01      	ble.n	1001154e <__aeabi_dcmple+0xe>
1001154a:	2000      	movs	r0, #0
1001154c:	bd10      	pop	{r4, pc}
1001154e:	2001      	movs	r0, #1
10011550:	bd10      	pop	{r4, pc}
10011552:	46c0      	nop			; (mov r8, r8)

10011554 <__aeabi_dcmpgt>:
10011554:	b510      	push	{r4, lr}
10011556:	f000 f89b 	bl	10011690 <__gedf2>
1001155a:	2800      	cmp	r0, #0
1001155c:	dc01      	bgt.n	10011562 <__aeabi_dcmpgt+0xe>
1001155e:	2000      	movs	r0, #0
10011560:	bd10      	pop	{r4, pc}
10011562:	2001      	movs	r0, #1
10011564:	bd10      	pop	{r4, pc}
10011566:	46c0      	nop			; (mov r8, r8)

10011568 <__aeabi_dcmpge>:
10011568:	b510      	push	{r4, lr}
1001156a:	f000 f891 	bl	10011690 <__gedf2>
1001156e:	2800      	cmp	r0, #0
10011570:	da01      	bge.n	10011576 <__aeabi_dcmpge+0xe>
10011572:	2000      	movs	r0, #0
10011574:	bd10      	pop	{r4, pc}
10011576:	2001      	movs	r0, #1
10011578:	bd10      	pop	{r4, pc}
1001157a:	46c0      	nop			; (mov r8, r8)

1001157c <__aeabi_lmul>:
1001157c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001157e:	464f      	mov	r7, r9
10011580:	4646      	mov	r6, r8
10011582:	b4c0      	push	{r6, r7}
10011584:	0416      	lsls	r6, r2, #16
10011586:	0c36      	lsrs	r6, r6, #16
10011588:	4699      	mov	r9, r3
1001158a:	0033      	movs	r3, r6
1001158c:	0405      	lsls	r5, r0, #16
1001158e:	0c2c      	lsrs	r4, r5, #16
10011590:	0c07      	lsrs	r7, r0, #16
10011592:	0c15      	lsrs	r5, r2, #16
10011594:	4363      	muls	r3, r4
10011596:	437e      	muls	r6, r7
10011598:	436f      	muls	r7, r5
1001159a:	4365      	muls	r5, r4
1001159c:	0c1c      	lsrs	r4, r3, #16
1001159e:	19ad      	adds	r5, r5, r6
100115a0:	1964      	adds	r4, r4, r5
100115a2:	469c      	mov	ip, r3
100115a4:	42a6      	cmp	r6, r4
100115a6:	d903      	bls.n	100115b0 <__aeabi_lmul+0x34>
100115a8:	2380      	movs	r3, #128	; 0x80
100115aa:	025b      	lsls	r3, r3, #9
100115ac:	4698      	mov	r8, r3
100115ae:	4447      	add	r7, r8
100115b0:	4663      	mov	r3, ip
100115b2:	0c25      	lsrs	r5, r4, #16
100115b4:	19ef      	adds	r7, r5, r7
100115b6:	041d      	lsls	r5, r3, #16
100115b8:	464b      	mov	r3, r9
100115ba:	434a      	muls	r2, r1
100115bc:	4343      	muls	r3, r0
100115be:	0c2d      	lsrs	r5, r5, #16
100115c0:	0424      	lsls	r4, r4, #16
100115c2:	1964      	adds	r4, r4, r5
100115c4:	1899      	adds	r1, r3, r2
100115c6:	19c9      	adds	r1, r1, r7
100115c8:	0020      	movs	r0, r4
100115ca:	bc0c      	pop	{r2, r3}
100115cc:	4690      	mov	r8, r2
100115ce:	4699      	mov	r9, r3
100115d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100115d2:	46c0      	nop			; (mov r8, r8)

100115d4 <__aeabi_d2uiz>:
100115d4:	b570      	push	{r4, r5, r6, lr}
100115d6:	2200      	movs	r2, #0
100115d8:	4b0c      	ldr	r3, [pc, #48]	; (1001160c <__aeabi_d2uiz+0x38>)
100115da:	0004      	movs	r4, r0
100115dc:	000d      	movs	r5, r1
100115de:	f7ff ffc3 	bl	10011568 <__aeabi_dcmpge>
100115e2:	2800      	cmp	r0, #0
100115e4:	d104      	bne.n	100115f0 <__aeabi_d2uiz+0x1c>
100115e6:	0020      	movs	r0, r4
100115e8:	0029      	movs	r1, r5
100115ea:	f000 feed 	bl	100123c8 <__aeabi_d2iz>
100115ee:	bd70      	pop	{r4, r5, r6, pc}
100115f0:	4b06      	ldr	r3, [pc, #24]	; (1001160c <__aeabi_d2uiz+0x38>)
100115f2:	2200      	movs	r2, #0
100115f4:	0020      	movs	r0, r4
100115f6:	0029      	movs	r1, r5
100115f8:	f000 fb92 	bl	10011d20 <__aeabi_dsub>
100115fc:	f000 fee4 	bl	100123c8 <__aeabi_d2iz>
10011600:	2380      	movs	r3, #128	; 0x80
10011602:	061b      	lsls	r3, r3, #24
10011604:	469c      	mov	ip, r3
10011606:	4460      	add	r0, ip
10011608:	e7f1      	b.n	100115ee <__aeabi_d2uiz+0x1a>
1001160a:	46c0      	nop			; (mov r8, r8)
1001160c:	41e00000 	.word	0x41e00000

10011610 <__eqdf2>:
10011610:	b5f0      	push	{r4, r5, r6, r7, lr}
10011612:	465f      	mov	r7, fp
10011614:	4656      	mov	r6, sl
10011616:	464d      	mov	r5, r9
10011618:	4644      	mov	r4, r8
1001161a:	b4f0      	push	{r4, r5, r6, r7}
1001161c:	031f      	lsls	r7, r3, #12
1001161e:	005c      	lsls	r4, r3, #1
10011620:	0fdb      	lsrs	r3, r3, #31
10011622:	469a      	mov	sl, r3
10011624:	4b19      	ldr	r3, [pc, #100]	; (1001168c <__eqdf2+0x7c>)
10011626:	030e      	lsls	r6, r1, #12
10011628:	004d      	lsls	r5, r1, #1
1001162a:	0fc9      	lsrs	r1, r1, #31
1001162c:	4680      	mov	r8, r0
1001162e:	0b36      	lsrs	r6, r6, #12
10011630:	0d6d      	lsrs	r5, r5, #21
10011632:	468b      	mov	fp, r1
10011634:	4691      	mov	r9, r2
10011636:	0b3f      	lsrs	r7, r7, #12
10011638:	0d64      	lsrs	r4, r4, #21
1001163a:	429d      	cmp	r5, r3
1001163c:	d019      	beq.n	10011672 <__eqdf2+0x62>
1001163e:	4b13      	ldr	r3, [pc, #76]	; (1001168c <__eqdf2+0x7c>)
10011640:	429c      	cmp	r4, r3
10011642:	d01b      	beq.n	1001167c <__eqdf2+0x6c>
10011644:	2301      	movs	r3, #1
10011646:	42a5      	cmp	r5, r4
10011648:	d006      	beq.n	10011658 <__eqdf2+0x48>
1001164a:	0018      	movs	r0, r3
1001164c:	bc3c      	pop	{r2, r3, r4, r5}
1001164e:	4690      	mov	r8, r2
10011650:	4699      	mov	r9, r3
10011652:	46a2      	mov	sl, r4
10011654:	46ab      	mov	fp, r5
10011656:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011658:	42be      	cmp	r6, r7
1001165a:	d1f6      	bne.n	1001164a <__eqdf2+0x3a>
1001165c:	45c8      	cmp	r8, r9
1001165e:	d1f4      	bne.n	1001164a <__eqdf2+0x3a>
10011660:	45d3      	cmp	fp, sl
10011662:	d010      	beq.n	10011686 <__eqdf2+0x76>
10011664:	2d00      	cmp	r5, #0
10011666:	d1f0      	bne.n	1001164a <__eqdf2+0x3a>
10011668:	4330      	orrs	r0, r6
1001166a:	0003      	movs	r3, r0
1001166c:	1e5a      	subs	r2, r3, #1
1001166e:	4193      	sbcs	r3, r2
10011670:	e7eb      	b.n	1001164a <__eqdf2+0x3a>
10011672:	0031      	movs	r1, r6
10011674:	2301      	movs	r3, #1
10011676:	4301      	orrs	r1, r0
10011678:	d1e7      	bne.n	1001164a <__eqdf2+0x3a>
1001167a:	e7e0      	b.n	1001163e <__eqdf2+0x2e>
1001167c:	433a      	orrs	r2, r7
1001167e:	2301      	movs	r3, #1
10011680:	2a00      	cmp	r2, #0
10011682:	d1e2      	bne.n	1001164a <__eqdf2+0x3a>
10011684:	e7de      	b.n	10011644 <__eqdf2+0x34>
10011686:	2300      	movs	r3, #0
10011688:	e7df      	b.n	1001164a <__eqdf2+0x3a>
1001168a:	46c0      	nop			; (mov r8, r8)
1001168c:	000007ff 	.word	0x000007ff

10011690 <__gedf2>:
10011690:	b5f0      	push	{r4, r5, r6, r7, lr}
10011692:	465f      	mov	r7, fp
10011694:	4644      	mov	r4, r8
10011696:	4656      	mov	r6, sl
10011698:	464d      	mov	r5, r9
1001169a:	b4f0      	push	{r4, r5, r6, r7}
1001169c:	031f      	lsls	r7, r3, #12
1001169e:	0b3c      	lsrs	r4, r7, #12
100116a0:	4f2c      	ldr	r7, [pc, #176]	; (10011754 <__gedf2+0xc4>)
100116a2:	030e      	lsls	r6, r1, #12
100116a4:	004d      	lsls	r5, r1, #1
100116a6:	46a3      	mov	fp, r4
100116a8:	005c      	lsls	r4, r3, #1
100116aa:	4684      	mov	ip, r0
100116ac:	0b36      	lsrs	r6, r6, #12
100116ae:	0d6d      	lsrs	r5, r5, #21
100116b0:	0fc9      	lsrs	r1, r1, #31
100116b2:	4690      	mov	r8, r2
100116b4:	0d64      	lsrs	r4, r4, #21
100116b6:	0fdb      	lsrs	r3, r3, #31
100116b8:	42bd      	cmp	r5, r7
100116ba:	d02b      	beq.n	10011714 <__gedf2+0x84>
100116bc:	4f25      	ldr	r7, [pc, #148]	; (10011754 <__gedf2+0xc4>)
100116be:	42bc      	cmp	r4, r7
100116c0:	d02e      	beq.n	10011720 <__gedf2+0x90>
100116c2:	2d00      	cmp	r5, #0
100116c4:	d10e      	bne.n	100116e4 <__gedf2+0x54>
100116c6:	4330      	orrs	r0, r6
100116c8:	0007      	movs	r7, r0
100116ca:	4681      	mov	r9, r0
100116cc:	4278      	negs	r0, r7
100116ce:	4178      	adcs	r0, r7
100116d0:	2c00      	cmp	r4, #0
100116d2:	d117      	bne.n	10011704 <__gedf2+0x74>
100116d4:	465f      	mov	r7, fp
100116d6:	433a      	orrs	r2, r7
100116d8:	d114      	bne.n	10011704 <__gedf2+0x74>
100116da:	464b      	mov	r3, r9
100116dc:	2000      	movs	r0, #0
100116de:	2b00      	cmp	r3, #0
100116e0:	d00a      	beq.n	100116f8 <__gedf2+0x68>
100116e2:	e006      	b.n	100116f2 <__gedf2+0x62>
100116e4:	2c00      	cmp	r4, #0
100116e6:	d102      	bne.n	100116ee <__gedf2+0x5e>
100116e8:	4658      	mov	r0, fp
100116ea:	4302      	orrs	r2, r0
100116ec:	d001      	beq.n	100116f2 <__gedf2+0x62>
100116ee:	4299      	cmp	r1, r3
100116f0:	d01a      	beq.n	10011728 <__gedf2+0x98>
100116f2:	2301      	movs	r3, #1
100116f4:	4248      	negs	r0, r1
100116f6:	4318      	orrs	r0, r3
100116f8:	bc3c      	pop	{r2, r3, r4, r5}
100116fa:	4690      	mov	r8, r2
100116fc:	4699      	mov	r9, r3
100116fe:	46a2      	mov	sl, r4
10011700:	46ab      	mov	fp, r5
10011702:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011704:	2800      	cmp	r0, #0
10011706:	d0f2      	beq.n	100116ee <__gedf2+0x5e>
10011708:	4258      	negs	r0, r3
1001170a:	4158      	adcs	r0, r3
1001170c:	2201      	movs	r2, #1
1001170e:	4240      	negs	r0, r0
10011710:	4310      	orrs	r0, r2
10011712:	e7f1      	b.n	100116f8 <__gedf2+0x68>
10011714:	0037      	movs	r7, r6
10011716:	4307      	orrs	r7, r0
10011718:	d0d0      	beq.n	100116bc <__gedf2+0x2c>
1001171a:	2002      	movs	r0, #2
1001171c:	4240      	negs	r0, r0
1001171e:	e7eb      	b.n	100116f8 <__gedf2+0x68>
10011720:	465f      	mov	r7, fp
10011722:	4317      	orrs	r7, r2
10011724:	d0cd      	beq.n	100116c2 <__gedf2+0x32>
10011726:	e7f8      	b.n	1001171a <__gedf2+0x8a>
10011728:	42a5      	cmp	r5, r4
1001172a:	dce2      	bgt.n	100116f2 <__gedf2+0x62>
1001172c:	db05      	blt.n	1001173a <__gedf2+0xaa>
1001172e:	455e      	cmp	r6, fp
10011730:	d8df      	bhi.n	100116f2 <__gedf2+0x62>
10011732:	d008      	beq.n	10011746 <__gedf2+0xb6>
10011734:	2000      	movs	r0, #0
10011736:	455e      	cmp	r6, fp
10011738:	d2de      	bcs.n	100116f8 <__gedf2+0x68>
1001173a:	4248      	negs	r0, r1
1001173c:	4148      	adcs	r0, r1
1001173e:	2301      	movs	r3, #1
10011740:	4240      	negs	r0, r0
10011742:	4318      	orrs	r0, r3
10011744:	e7d8      	b.n	100116f8 <__gedf2+0x68>
10011746:	45c4      	cmp	ip, r8
10011748:	d8d3      	bhi.n	100116f2 <__gedf2+0x62>
1001174a:	2000      	movs	r0, #0
1001174c:	45c4      	cmp	ip, r8
1001174e:	d3f4      	bcc.n	1001173a <__gedf2+0xaa>
10011750:	e7d2      	b.n	100116f8 <__gedf2+0x68>
10011752:	46c0      	nop			; (mov r8, r8)
10011754:	000007ff 	.word	0x000007ff

10011758 <__ledf2>:
10011758:	b5f0      	push	{r4, r5, r6, r7, lr}
1001175a:	465f      	mov	r7, fp
1001175c:	464d      	mov	r5, r9
1001175e:	4644      	mov	r4, r8
10011760:	4656      	mov	r6, sl
10011762:	b4f0      	push	{r4, r5, r6, r7}
10011764:	031c      	lsls	r4, r3, #12
10011766:	0b24      	lsrs	r4, r4, #12
10011768:	46a4      	mov	ip, r4
1001176a:	4c2f      	ldr	r4, [pc, #188]	; (10011828 <__ledf2+0xd0>)
1001176c:	030f      	lsls	r7, r1, #12
1001176e:	004d      	lsls	r5, r1, #1
10011770:	005e      	lsls	r6, r3, #1
10011772:	0fc9      	lsrs	r1, r1, #31
10011774:	4680      	mov	r8, r0
10011776:	0b3f      	lsrs	r7, r7, #12
10011778:	0d6d      	lsrs	r5, r5, #21
1001177a:	468b      	mov	fp, r1
1001177c:	4691      	mov	r9, r2
1001177e:	0d76      	lsrs	r6, r6, #21
10011780:	0fdb      	lsrs	r3, r3, #31
10011782:	42a5      	cmp	r5, r4
10011784:	d020      	beq.n	100117c8 <__ledf2+0x70>
10011786:	4c28      	ldr	r4, [pc, #160]	; (10011828 <__ledf2+0xd0>)
10011788:	42a6      	cmp	r6, r4
1001178a:	d022      	beq.n	100117d2 <__ledf2+0x7a>
1001178c:	2d00      	cmp	r5, #0
1001178e:	d112      	bne.n	100117b6 <__ledf2+0x5e>
10011790:	4338      	orrs	r0, r7
10011792:	4244      	negs	r4, r0
10011794:	4144      	adcs	r4, r0
10011796:	2e00      	cmp	r6, #0
10011798:	d020      	beq.n	100117dc <__ledf2+0x84>
1001179a:	2c00      	cmp	r4, #0
1001179c:	d00d      	beq.n	100117ba <__ledf2+0x62>
1001179e:	425c      	negs	r4, r3
100117a0:	4163      	adcs	r3, r4
100117a2:	2401      	movs	r4, #1
100117a4:	425b      	negs	r3, r3
100117a6:	431c      	orrs	r4, r3
100117a8:	0020      	movs	r0, r4
100117aa:	bc3c      	pop	{r2, r3, r4, r5}
100117ac:	4690      	mov	r8, r2
100117ae:	4699      	mov	r9, r3
100117b0:	46a2      	mov	sl, r4
100117b2:	46ab      	mov	fp, r5
100117b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100117b6:	2e00      	cmp	r6, #0
100117b8:	d017      	beq.n	100117ea <__ledf2+0x92>
100117ba:	455b      	cmp	r3, fp
100117bc:	d019      	beq.n	100117f2 <__ledf2+0x9a>
100117be:	465b      	mov	r3, fp
100117c0:	425c      	negs	r4, r3
100117c2:	2301      	movs	r3, #1
100117c4:	431c      	orrs	r4, r3
100117c6:	e7ef      	b.n	100117a8 <__ledf2+0x50>
100117c8:	0039      	movs	r1, r7
100117ca:	2402      	movs	r4, #2
100117cc:	4301      	orrs	r1, r0
100117ce:	d1eb      	bne.n	100117a8 <__ledf2+0x50>
100117d0:	e7d9      	b.n	10011786 <__ledf2+0x2e>
100117d2:	4661      	mov	r1, ip
100117d4:	2402      	movs	r4, #2
100117d6:	4311      	orrs	r1, r2
100117d8:	d1e6      	bne.n	100117a8 <__ledf2+0x50>
100117da:	e7d7      	b.n	1001178c <__ledf2+0x34>
100117dc:	4661      	mov	r1, ip
100117de:	430a      	orrs	r2, r1
100117e0:	d1db      	bne.n	1001179a <__ledf2+0x42>
100117e2:	2400      	movs	r4, #0
100117e4:	2800      	cmp	r0, #0
100117e6:	d0df      	beq.n	100117a8 <__ledf2+0x50>
100117e8:	e7e9      	b.n	100117be <__ledf2+0x66>
100117ea:	4661      	mov	r1, ip
100117ec:	430a      	orrs	r2, r1
100117ee:	d1e4      	bne.n	100117ba <__ledf2+0x62>
100117f0:	e7e5      	b.n	100117be <__ledf2+0x66>
100117f2:	42b5      	cmp	r5, r6
100117f4:	dd03      	ble.n	100117fe <__ledf2+0xa6>
100117f6:	2201      	movs	r2, #1
100117f8:	425c      	negs	r4, r3
100117fa:	4314      	orrs	r4, r2
100117fc:	e7d4      	b.n	100117a8 <__ledf2+0x50>
100117fe:	42b5      	cmp	r5, r6
10011800:	dbcd      	blt.n	1001179e <__ledf2+0x46>
10011802:	4567      	cmp	r7, ip
10011804:	d8db      	bhi.n	100117be <__ledf2+0x66>
10011806:	d009      	beq.n	1001181c <__ledf2+0xc4>
10011808:	2400      	movs	r4, #0
1001180a:	4567      	cmp	r7, ip
1001180c:	d2cc      	bcs.n	100117a8 <__ledf2+0x50>
1001180e:	4659      	mov	r1, fp
10011810:	424c      	negs	r4, r1
10011812:	4161      	adcs	r1, r4
10011814:	2401      	movs	r4, #1
10011816:	4249      	negs	r1, r1
10011818:	430c      	orrs	r4, r1
1001181a:	e7c5      	b.n	100117a8 <__ledf2+0x50>
1001181c:	45c8      	cmp	r8, r9
1001181e:	d8ce      	bhi.n	100117be <__ledf2+0x66>
10011820:	2400      	movs	r4, #0
10011822:	45c8      	cmp	r8, r9
10011824:	d3f3      	bcc.n	1001180e <__ledf2+0xb6>
10011826:	e7bf      	b.n	100117a8 <__ledf2+0x50>
10011828:	000007ff 	.word	0x000007ff

1001182c <__aeabi_dmul>:
1001182c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001182e:	465f      	mov	r7, fp
10011830:	4656      	mov	r6, sl
10011832:	464d      	mov	r5, r9
10011834:	4644      	mov	r4, r8
10011836:	b4f0      	push	{r4, r5, r6, r7}
10011838:	030d      	lsls	r5, r1, #12
1001183a:	4699      	mov	r9, r3
1001183c:	004e      	lsls	r6, r1, #1
1001183e:	0b2b      	lsrs	r3, r5, #12
10011840:	b087      	sub	sp, #28
10011842:	0007      	movs	r7, r0
10011844:	4692      	mov	sl, r2
10011846:	4680      	mov	r8, r0
10011848:	469b      	mov	fp, r3
1001184a:	0d76      	lsrs	r6, r6, #21
1001184c:	0fcc      	lsrs	r4, r1, #31
1001184e:	2e00      	cmp	r6, #0
10011850:	d069      	beq.n	10011926 <__aeabi_dmul+0xfa>
10011852:	4b6d      	ldr	r3, [pc, #436]	; (10011a08 <__aeabi_dmul+0x1dc>)
10011854:	429e      	cmp	r6, r3
10011856:	d035      	beq.n	100118c4 <__aeabi_dmul+0x98>
10011858:	465b      	mov	r3, fp
1001185a:	2280      	movs	r2, #128	; 0x80
1001185c:	00dd      	lsls	r5, r3, #3
1001185e:	0412      	lsls	r2, r2, #16
10011860:	0f43      	lsrs	r3, r0, #29
10011862:	4313      	orrs	r3, r2
10011864:	432b      	orrs	r3, r5
10011866:	469b      	mov	fp, r3
10011868:	00c3      	lsls	r3, r0, #3
1001186a:	4698      	mov	r8, r3
1001186c:	4b67      	ldr	r3, [pc, #412]	; (10011a0c <__aeabi_dmul+0x1e0>)
1001186e:	2700      	movs	r7, #0
10011870:	469c      	mov	ip, r3
10011872:	2300      	movs	r3, #0
10011874:	4466      	add	r6, ip
10011876:	9301      	str	r3, [sp, #4]
10011878:	464a      	mov	r2, r9
1001187a:	0315      	lsls	r5, r2, #12
1001187c:	0050      	lsls	r0, r2, #1
1001187e:	0fd2      	lsrs	r2, r2, #31
10011880:	4653      	mov	r3, sl
10011882:	0b2d      	lsrs	r5, r5, #12
10011884:	0d40      	lsrs	r0, r0, #21
10011886:	4691      	mov	r9, r2
10011888:	d100      	bne.n	1001188c <__aeabi_dmul+0x60>
1001188a:	e076      	b.n	1001197a <__aeabi_dmul+0x14e>
1001188c:	4a5e      	ldr	r2, [pc, #376]	; (10011a08 <__aeabi_dmul+0x1dc>)
1001188e:	4290      	cmp	r0, r2
10011890:	d06c      	beq.n	1001196c <__aeabi_dmul+0x140>
10011892:	2280      	movs	r2, #128	; 0x80
10011894:	0f5b      	lsrs	r3, r3, #29
10011896:	0412      	lsls	r2, r2, #16
10011898:	4313      	orrs	r3, r2
1001189a:	4a5c      	ldr	r2, [pc, #368]	; (10011a0c <__aeabi_dmul+0x1e0>)
1001189c:	00ed      	lsls	r5, r5, #3
1001189e:	4694      	mov	ip, r2
100118a0:	431d      	orrs	r5, r3
100118a2:	4653      	mov	r3, sl
100118a4:	2200      	movs	r2, #0
100118a6:	00db      	lsls	r3, r3, #3
100118a8:	4460      	add	r0, ip
100118aa:	4649      	mov	r1, r9
100118ac:	1836      	adds	r6, r6, r0
100118ae:	1c70      	adds	r0, r6, #1
100118b0:	4061      	eors	r1, r4
100118b2:	9002      	str	r0, [sp, #8]
100118b4:	4317      	orrs	r7, r2
100118b6:	2f0f      	cmp	r7, #15
100118b8:	d900      	bls.n	100118bc <__aeabi_dmul+0x90>
100118ba:	e0af      	b.n	10011a1c <__aeabi_dmul+0x1f0>
100118bc:	4854      	ldr	r0, [pc, #336]	; (10011a10 <__aeabi_dmul+0x1e4>)
100118be:	00bf      	lsls	r7, r7, #2
100118c0:	59c7      	ldr	r7, [r0, r7]
100118c2:	46bf      	mov	pc, r7
100118c4:	465b      	mov	r3, fp
100118c6:	431f      	orrs	r7, r3
100118c8:	d000      	beq.n	100118cc <__aeabi_dmul+0xa0>
100118ca:	e088      	b.n	100119de <__aeabi_dmul+0x1b2>
100118cc:	2300      	movs	r3, #0
100118ce:	469b      	mov	fp, r3
100118d0:	4698      	mov	r8, r3
100118d2:	3302      	adds	r3, #2
100118d4:	2708      	movs	r7, #8
100118d6:	9301      	str	r3, [sp, #4]
100118d8:	e7ce      	b.n	10011878 <__aeabi_dmul+0x4c>
100118da:	4649      	mov	r1, r9
100118dc:	2a02      	cmp	r2, #2
100118de:	d06a      	beq.n	100119b6 <__aeabi_dmul+0x18a>
100118e0:	2a03      	cmp	r2, #3
100118e2:	d100      	bne.n	100118e6 <__aeabi_dmul+0xba>
100118e4:	e209      	b.n	10011cfa <__aeabi_dmul+0x4ce>
100118e6:	2a01      	cmp	r2, #1
100118e8:	d000      	beq.n	100118ec <__aeabi_dmul+0xc0>
100118ea:	e1bb      	b.n	10011c64 <__aeabi_dmul+0x438>
100118ec:	4011      	ands	r1, r2
100118ee:	2200      	movs	r2, #0
100118f0:	2300      	movs	r3, #0
100118f2:	2500      	movs	r5, #0
100118f4:	4690      	mov	r8, r2
100118f6:	b2cc      	uxtb	r4, r1
100118f8:	2100      	movs	r1, #0
100118fa:	032d      	lsls	r5, r5, #12
100118fc:	0d0a      	lsrs	r2, r1, #20
100118fe:	0512      	lsls	r2, r2, #20
10011900:	0b2d      	lsrs	r5, r5, #12
10011902:	4315      	orrs	r5, r2
10011904:	4a43      	ldr	r2, [pc, #268]	; (10011a14 <__aeabi_dmul+0x1e8>)
10011906:	051b      	lsls	r3, r3, #20
10011908:	4015      	ands	r5, r2
1001190a:	431d      	orrs	r5, r3
1001190c:	006d      	lsls	r5, r5, #1
1001190e:	07e4      	lsls	r4, r4, #31
10011910:	086d      	lsrs	r5, r5, #1
10011912:	4325      	orrs	r5, r4
10011914:	4640      	mov	r0, r8
10011916:	0029      	movs	r1, r5
10011918:	b007      	add	sp, #28
1001191a:	bc3c      	pop	{r2, r3, r4, r5}
1001191c:	4690      	mov	r8, r2
1001191e:	4699      	mov	r9, r3
10011920:	46a2      	mov	sl, r4
10011922:	46ab      	mov	fp, r5
10011924:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011926:	4303      	orrs	r3, r0
10011928:	d052      	beq.n	100119d0 <__aeabi_dmul+0x1a4>
1001192a:	465b      	mov	r3, fp
1001192c:	2b00      	cmp	r3, #0
1001192e:	d100      	bne.n	10011932 <__aeabi_dmul+0x106>
10011930:	e18a      	b.n	10011c48 <__aeabi_dmul+0x41c>
10011932:	4658      	mov	r0, fp
10011934:	f000 fdb6 	bl	100124a4 <__clzsi2>
10011938:	0003      	movs	r3, r0
1001193a:	3b0b      	subs	r3, #11
1001193c:	2b1c      	cmp	r3, #28
1001193e:	dd00      	ble.n	10011942 <__aeabi_dmul+0x116>
10011940:	e17b      	b.n	10011c3a <__aeabi_dmul+0x40e>
10011942:	221d      	movs	r2, #29
10011944:	1ad3      	subs	r3, r2, r3
10011946:	003a      	movs	r2, r7
10011948:	0001      	movs	r1, r0
1001194a:	465d      	mov	r5, fp
1001194c:	40da      	lsrs	r2, r3
1001194e:	3908      	subs	r1, #8
10011950:	408d      	lsls	r5, r1
10011952:	0013      	movs	r3, r2
10011954:	408f      	lsls	r7, r1
10011956:	432b      	orrs	r3, r5
10011958:	469b      	mov	fp, r3
1001195a:	46b8      	mov	r8, r7
1001195c:	4b2e      	ldr	r3, [pc, #184]	; (10011a18 <__aeabi_dmul+0x1ec>)
1001195e:	2700      	movs	r7, #0
10011960:	469c      	mov	ip, r3
10011962:	2300      	movs	r3, #0
10011964:	4460      	add	r0, ip
10011966:	4246      	negs	r6, r0
10011968:	9301      	str	r3, [sp, #4]
1001196a:	e785      	b.n	10011878 <__aeabi_dmul+0x4c>
1001196c:	4652      	mov	r2, sl
1001196e:	432a      	orrs	r2, r5
10011970:	d12c      	bne.n	100119cc <__aeabi_dmul+0x1a0>
10011972:	2500      	movs	r5, #0
10011974:	2300      	movs	r3, #0
10011976:	2202      	movs	r2, #2
10011978:	e797      	b.n	100118aa <__aeabi_dmul+0x7e>
1001197a:	4652      	mov	r2, sl
1001197c:	432a      	orrs	r2, r5
1001197e:	d021      	beq.n	100119c4 <__aeabi_dmul+0x198>
10011980:	2d00      	cmp	r5, #0
10011982:	d100      	bne.n	10011986 <__aeabi_dmul+0x15a>
10011984:	e154      	b.n	10011c30 <__aeabi_dmul+0x404>
10011986:	0028      	movs	r0, r5
10011988:	f000 fd8c 	bl	100124a4 <__clzsi2>
1001198c:	0003      	movs	r3, r0
1001198e:	3b0b      	subs	r3, #11
10011990:	2b1c      	cmp	r3, #28
10011992:	dd00      	ble.n	10011996 <__aeabi_dmul+0x16a>
10011994:	e146      	b.n	10011c24 <__aeabi_dmul+0x3f8>
10011996:	211d      	movs	r1, #29
10011998:	1acb      	subs	r3, r1, r3
1001199a:	4651      	mov	r1, sl
1001199c:	0002      	movs	r2, r0
1001199e:	40d9      	lsrs	r1, r3
100119a0:	4653      	mov	r3, sl
100119a2:	3a08      	subs	r2, #8
100119a4:	4095      	lsls	r5, r2
100119a6:	4093      	lsls	r3, r2
100119a8:	430d      	orrs	r5, r1
100119aa:	4a1b      	ldr	r2, [pc, #108]	; (10011a18 <__aeabi_dmul+0x1ec>)
100119ac:	4694      	mov	ip, r2
100119ae:	4460      	add	r0, ip
100119b0:	4240      	negs	r0, r0
100119b2:	2200      	movs	r2, #0
100119b4:	e779      	b.n	100118aa <__aeabi_dmul+0x7e>
100119b6:	2401      	movs	r4, #1
100119b8:	2200      	movs	r2, #0
100119ba:	400c      	ands	r4, r1
100119bc:	4b12      	ldr	r3, [pc, #72]	; (10011a08 <__aeabi_dmul+0x1dc>)
100119be:	2500      	movs	r5, #0
100119c0:	4690      	mov	r8, r2
100119c2:	e799      	b.n	100118f8 <__aeabi_dmul+0xcc>
100119c4:	2500      	movs	r5, #0
100119c6:	2300      	movs	r3, #0
100119c8:	2201      	movs	r2, #1
100119ca:	e76e      	b.n	100118aa <__aeabi_dmul+0x7e>
100119cc:	2203      	movs	r2, #3
100119ce:	e76c      	b.n	100118aa <__aeabi_dmul+0x7e>
100119d0:	2300      	movs	r3, #0
100119d2:	469b      	mov	fp, r3
100119d4:	4698      	mov	r8, r3
100119d6:	3301      	adds	r3, #1
100119d8:	2704      	movs	r7, #4
100119da:	9301      	str	r3, [sp, #4]
100119dc:	e74c      	b.n	10011878 <__aeabi_dmul+0x4c>
100119de:	2303      	movs	r3, #3
100119e0:	270c      	movs	r7, #12
100119e2:	9301      	str	r3, [sp, #4]
100119e4:	e748      	b.n	10011878 <__aeabi_dmul+0x4c>
100119e6:	2300      	movs	r3, #0
100119e8:	2580      	movs	r5, #128	; 0x80
100119ea:	4698      	mov	r8, r3
100119ec:	2400      	movs	r4, #0
100119ee:	032d      	lsls	r5, r5, #12
100119f0:	4b05      	ldr	r3, [pc, #20]	; (10011a08 <__aeabi_dmul+0x1dc>)
100119f2:	e781      	b.n	100118f8 <__aeabi_dmul+0xcc>
100119f4:	465d      	mov	r5, fp
100119f6:	4643      	mov	r3, r8
100119f8:	9a01      	ldr	r2, [sp, #4]
100119fa:	e76f      	b.n	100118dc <__aeabi_dmul+0xb0>
100119fc:	465d      	mov	r5, fp
100119fe:	4643      	mov	r3, r8
10011a00:	0021      	movs	r1, r4
10011a02:	9a01      	ldr	r2, [sp, #4]
10011a04:	e76a      	b.n	100118dc <__aeabi_dmul+0xb0>
10011a06:	46c0      	nop			; (mov r8, r8)
10011a08:	000007ff 	.word	0x000007ff
10011a0c:	fffffc01 	.word	0xfffffc01
10011a10:	1001525c 	.word	0x1001525c
10011a14:	800fffff 	.word	0x800fffff
10011a18:	000003f3 	.word	0x000003f3
10011a1c:	4642      	mov	r2, r8
10011a1e:	0c12      	lsrs	r2, r2, #16
10011a20:	4691      	mov	r9, r2
10011a22:	0c1a      	lsrs	r2, r3, #16
10011a24:	4694      	mov	ip, r2
10011a26:	4642      	mov	r2, r8
10011a28:	0417      	lsls	r7, r2, #16
10011a2a:	464a      	mov	r2, r9
10011a2c:	041b      	lsls	r3, r3, #16
10011a2e:	0c1b      	lsrs	r3, r3, #16
10011a30:	435a      	muls	r2, r3
10011a32:	4660      	mov	r0, ip
10011a34:	4690      	mov	r8, r2
10011a36:	464a      	mov	r2, r9
10011a38:	4342      	muls	r2, r0
10011a3a:	0010      	movs	r0, r2
10011a3c:	9203      	str	r2, [sp, #12]
10011a3e:	4662      	mov	r2, ip
10011a40:	001c      	movs	r4, r3
10011a42:	0c3f      	lsrs	r7, r7, #16
10011a44:	437a      	muls	r2, r7
10011a46:	437c      	muls	r4, r7
10011a48:	4442      	add	r2, r8
10011a4a:	9201      	str	r2, [sp, #4]
10011a4c:	0c22      	lsrs	r2, r4, #16
10011a4e:	4692      	mov	sl, r2
10011a50:	9a01      	ldr	r2, [sp, #4]
10011a52:	4452      	add	r2, sl
10011a54:	4590      	cmp	r8, r2
10011a56:	d906      	bls.n	10011a66 <__aeabi_dmul+0x23a>
10011a58:	4682      	mov	sl, r0
10011a5a:	2080      	movs	r0, #128	; 0x80
10011a5c:	0240      	lsls	r0, r0, #9
10011a5e:	4680      	mov	r8, r0
10011a60:	44c2      	add	sl, r8
10011a62:	4650      	mov	r0, sl
10011a64:	9003      	str	r0, [sp, #12]
10011a66:	0c10      	lsrs	r0, r2, #16
10011a68:	9004      	str	r0, [sp, #16]
10011a6a:	4648      	mov	r0, r9
10011a6c:	0424      	lsls	r4, r4, #16
10011a6e:	0c24      	lsrs	r4, r4, #16
10011a70:	0412      	lsls	r2, r2, #16
10011a72:	1912      	adds	r2, r2, r4
10011a74:	9205      	str	r2, [sp, #20]
10011a76:	0c2a      	lsrs	r2, r5, #16
10011a78:	042d      	lsls	r5, r5, #16
10011a7a:	0c2d      	lsrs	r5, r5, #16
10011a7c:	4368      	muls	r0, r5
10011a7e:	002c      	movs	r4, r5
10011a80:	4682      	mov	sl, r0
10011a82:	4648      	mov	r0, r9
10011a84:	437c      	muls	r4, r7
10011a86:	4350      	muls	r0, r2
10011a88:	4681      	mov	r9, r0
10011a8a:	0c20      	lsrs	r0, r4, #16
10011a8c:	4680      	mov	r8, r0
10011a8e:	4357      	muls	r7, r2
10011a90:	4457      	add	r7, sl
10011a92:	4447      	add	r7, r8
10011a94:	45ba      	cmp	sl, r7
10011a96:	d903      	bls.n	10011aa0 <__aeabi_dmul+0x274>
10011a98:	2080      	movs	r0, #128	; 0x80
10011a9a:	0240      	lsls	r0, r0, #9
10011a9c:	4680      	mov	r8, r0
10011a9e:	44c1      	add	r9, r8
10011aa0:	0c38      	lsrs	r0, r7, #16
10011aa2:	043f      	lsls	r7, r7, #16
10011aa4:	46b8      	mov	r8, r7
10011aa6:	4448      	add	r0, r9
10011aa8:	0424      	lsls	r4, r4, #16
10011aaa:	0c24      	lsrs	r4, r4, #16
10011aac:	9001      	str	r0, [sp, #4]
10011aae:	9804      	ldr	r0, [sp, #16]
10011ab0:	44a0      	add	r8, r4
10011ab2:	4440      	add	r0, r8
10011ab4:	9004      	str	r0, [sp, #16]
10011ab6:	4658      	mov	r0, fp
10011ab8:	0c00      	lsrs	r0, r0, #16
10011aba:	4681      	mov	r9, r0
10011abc:	4658      	mov	r0, fp
10011abe:	0404      	lsls	r4, r0, #16
10011ac0:	0c20      	lsrs	r0, r4, #16
10011ac2:	4682      	mov	sl, r0
10011ac4:	0007      	movs	r7, r0
10011ac6:	4648      	mov	r0, r9
10011ac8:	435f      	muls	r7, r3
10011aca:	464c      	mov	r4, r9
10011acc:	4343      	muls	r3, r0
10011ace:	4660      	mov	r0, ip
10011ad0:	4360      	muls	r0, r4
10011ad2:	4664      	mov	r4, ip
10011ad4:	4683      	mov	fp, r0
10011ad6:	4650      	mov	r0, sl
10011ad8:	4344      	muls	r4, r0
10011ada:	0c38      	lsrs	r0, r7, #16
10011adc:	4684      	mov	ip, r0
10011ade:	18e4      	adds	r4, r4, r3
10011ae0:	4464      	add	r4, ip
10011ae2:	42a3      	cmp	r3, r4
10011ae4:	d903      	bls.n	10011aee <__aeabi_dmul+0x2c2>
10011ae6:	2380      	movs	r3, #128	; 0x80
10011ae8:	025b      	lsls	r3, r3, #9
10011aea:	469c      	mov	ip, r3
10011aec:	44e3      	add	fp, ip
10011aee:	4648      	mov	r0, r9
10011af0:	043f      	lsls	r7, r7, #16
10011af2:	0c23      	lsrs	r3, r4, #16
10011af4:	0c3f      	lsrs	r7, r7, #16
10011af6:	0424      	lsls	r4, r4, #16
10011af8:	19e4      	adds	r4, r4, r7
10011afa:	4657      	mov	r7, sl
10011afc:	4368      	muls	r0, r5
10011afe:	436f      	muls	r7, r5
10011b00:	4684      	mov	ip, r0
10011b02:	464d      	mov	r5, r9
10011b04:	4650      	mov	r0, sl
10011b06:	4355      	muls	r5, r2
10011b08:	4342      	muls	r2, r0
10011b0a:	0c38      	lsrs	r0, r7, #16
10011b0c:	4681      	mov	r9, r0
10011b0e:	4462      	add	r2, ip
10011b10:	444a      	add	r2, r9
10011b12:	445b      	add	r3, fp
10011b14:	4594      	cmp	ip, r2
10011b16:	d903      	bls.n	10011b20 <__aeabi_dmul+0x2f4>
10011b18:	2080      	movs	r0, #128	; 0x80
10011b1a:	0240      	lsls	r0, r0, #9
10011b1c:	4684      	mov	ip, r0
10011b1e:	4465      	add	r5, ip
10011b20:	9803      	ldr	r0, [sp, #12]
10011b22:	043f      	lsls	r7, r7, #16
10011b24:	4683      	mov	fp, r0
10011b26:	9804      	ldr	r0, [sp, #16]
10011b28:	0c3f      	lsrs	r7, r7, #16
10011b2a:	4684      	mov	ip, r0
10011b2c:	44e3      	add	fp, ip
10011b2e:	45c3      	cmp	fp, r8
10011b30:	4180      	sbcs	r0, r0
10011b32:	4240      	negs	r0, r0
10011b34:	4682      	mov	sl, r0
10011b36:	0410      	lsls	r0, r2, #16
10011b38:	4684      	mov	ip, r0
10011b3a:	9801      	ldr	r0, [sp, #4]
10011b3c:	4467      	add	r7, ip
10011b3e:	4684      	mov	ip, r0
10011b40:	4467      	add	r7, ip
10011b42:	44a3      	add	fp, r4
10011b44:	46bc      	mov	ip, r7
10011b46:	45a3      	cmp	fp, r4
10011b48:	41a4      	sbcs	r4, r4
10011b4a:	4699      	mov	r9, r3
10011b4c:	44d4      	add	ip, sl
10011b4e:	4264      	negs	r4, r4
10011b50:	4287      	cmp	r7, r0
10011b52:	41bf      	sbcs	r7, r7
10011b54:	45d4      	cmp	ip, sl
10011b56:	4180      	sbcs	r0, r0
10011b58:	44e1      	add	r9, ip
10011b5a:	46a0      	mov	r8, r4
10011b5c:	4599      	cmp	r9, r3
10011b5e:	419b      	sbcs	r3, r3
10011b60:	427f      	negs	r7, r7
10011b62:	4240      	negs	r0, r0
10011b64:	44c8      	add	r8, r9
10011b66:	4307      	orrs	r7, r0
10011b68:	0c12      	lsrs	r2, r2, #16
10011b6a:	18ba      	adds	r2, r7, r2
10011b6c:	45a0      	cmp	r8, r4
10011b6e:	41a4      	sbcs	r4, r4
10011b70:	425f      	negs	r7, r3
10011b72:	003b      	movs	r3, r7
10011b74:	4264      	negs	r4, r4
10011b76:	4323      	orrs	r3, r4
10011b78:	18d7      	adds	r7, r2, r3
10011b7a:	4643      	mov	r3, r8
10011b7c:	197d      	adds	r5, r7, r5
10011b7e:	0ddb      	lsrs	r3, r3, #23
10011b80:	026d      	lsls	r5, r5, #9
10011b82:	431d      	orrs	r5, r3
10011b84:	465b      	mov	r3, fp
10011b86:	025a      	lsls	r2, r3, #9
10011b88:	9b05      	ldr	r3, [sp, #20]
10011b8a:	431a      	orrs	r2, r3
10011b8c:	1e53      	subs	r3, r2, #1
10011b8e:	419a      	sbcs	r2, r3
10011b90:	465b      	mov	r3, fp
10011b92:	0ddb      	lsrs	r3, r3, #23
10011b94:	431a      	orrs	r2, r3
10011b96:	4643      	mov	r3, r8
10011b98:	025b      	lsls	r3, r3, #9
10011b9a:	4313      	orrs	r3, r2
10011b9c:	01ea      	lsls	r2, r5, #7
10011b9e:	d507      	bpl.n	10011bb0 <__aeabi_dmul+0x384>
10011ba0:	2201      	movs	r2, #1
10011ba2:	085c      	lsrs	r4, r3, #1
10011ba4:	4013      	ands	r3, r2
10011ba6:	4323      	orrs	r3, r4
10011ba8:	07ea      	lsls	r2, r5, #31
10011baa:	9e02      	ldr	r6, [sp, #8]
10011bac:	4313      	orrs	r3, r2
10011bae:	086d      	lsrs	r5, r5, #1
10011bb0:	4a57      	ldr	r2, [pc, #348]	; (10011d10 <__aeabi_dmul+0x4e4>)
10011bb2:	18b2      	adds	r2, r6, r2
10011bb4:	2a00      	cmp	r2, #0
10011bb6:	dd4b      	ble.n	10011c50 <__aeabi_dmul+0x424>
10011bb8:	0758      	lsls	r0, r3, #29
10011bba:	d009      	beq.n	10011bd0 <__aeabi_dmul+0x3a4>
10011bbc:	200f      	movs	r0, #15
10011bbe:	4018      	ands	r0, r3
10011bc0:	2804      	cmp	r0, #4
10011bc2:	d005      	beq.n	10011bd0 <__aeabi_dmul+0x3a4>
10011bc4:	1d18      	adds	r0, r3, #4
10011bc6:	4298      	cmp	r0, r3
10011bc8:	419b      	sbcs	r3, r3
10011bca:	425b      	negs	r3, r3
10011bcc:	18ed      	adds	r5, r5, r3
10011bce:	0003      	movs	r3, r0
10011bd0:	01e8      	lsls	r0, r5, #7
10011bd2:	d504      	bpl.n	10011bde <__aeabi_dmul+0x3b2>
10011bd4:	4a4f      	ldr	r2, [pc, #316]	; (10011d14 <__aeabi_dmul+0x4e8>)
10011bd6:	4015      	ands	r5, r2
10011bd8:	2280      	movs	r2, #128	; 0x80
10011bda:	00d2      	lsls	r2, r2, #3
10011bdc:	18b2      	adds	r2, r6, r2
10011bde:	484e      	ldr	r0, [pc, #312]	; (10011d18 <__aeabi_dmul+0x4ec>)
10011be0:	4282      	cmp	r2, r0
10011be2:	dd00      	ble.n	10011be6 <__aeabi_dmul+0x3ba>
10011be4:	e6e7      	b.n	100119b6 <__aeabi_dmul+0x18a>
10011be6:	2401      	movs	r4, #1
10011be8:	08db      	lsrs	r3, r3, #3
10011bea:	0768      	lsls	r0, r5, #29
10011bec:	4318      	orrs	r0, r3
10011bee:	026d      	lsls	r5, r5, #9
10011bf0:	0553      	lsls	r3, r2, #21
10011bf2:	4680      	mov	r8, r0
10011bf4:	0b2d      	lsrs	r5, r5, #12
10011bf6:	0d5b      	lsrs	r3, r3, #21
10011bf8:	400c      	ands	r4, r1
10011bfa:	e67d      	b.n	100118f8 <__aeabi_dmul+0xcc>
10011bfc:	2280      	movs	r2, #128	; 0x80
10011bfe:	4659      	mov	r1, fp
10011c00:	0312      	lsls	r2, r2, #12
10011c02:	4211      	tst	r1, r2
10011c04:	d008      	beq.n	10011c18 <__aeabi_dmul+0x3ec>
10011c06:	4215      	tst	r5, r2
10011c08:	d106      	bne.n	10011c18 <__aeabi_dmul+0x3ec>
10011c0a:	4315      	orrs	r5, r2
10011c0c:	032d      	lsls	r5, r5, #12
10011c0e:	4698      	mov	r8, r3
10011c10:	0b2d      	lsrs	r5, r5, #12
10011c12:	464c      	mov	r4, r9
10011c14:	4b41      	ldr	r3, [pc, #260]	; (10011d1c <__aeabi_dmul+0x4f0>)
10011c16:	e66f      	b.n	100118f8 <__aeabi_dmul+0xcc>
10011c18:	465d      	mov	r5, fp
10011c1a:	4315      	orrs	r5, r2
10011c1c:	032d      	lsls	r5, r5, #12
10011c1e:	0b2d      	lsrs	r5, r5, #12
10011c20:	4b3e      	ldr	r3, [pc, #248]	; (10011d1c <__aeabi_dmul+0x4f0>)
10011c22:	e669      	b.n	100118f8 <__aeabi_dmul+0xcc>
10011c24:	0003      	movs	r3, r0
10011c26:	4655      	mov	r5, sl
10011c28:	3b28      	subs	r3, #40	; 0x28
10011c2a:	409d      	lsls	r5, r3
10011c2c:	2300      	movs	r3, #0
10011c2e:	e6bc      	b.n	100119aa <__aeabi_dmul+0x17e>
10011c30:	4650      	mov	r0, sl
10011c32:	f000 fc37 	bl	100124a4 <__clzsi2>
10011c36:	3020      	adds	r0, #32
10011c38:	e6a8      	b.n	1001198c <__aeabi_dmul+0x160>
10011c3a:	0003      	movs	r3, r0
10011c3c:	3b28      	subs	r3, #40	; 0x28
10011c3e:	409f      	lsls	r7, r3
10011c40:	2300      	movs	r3, #0
10011c42:	46bb      	mov	fp, r7
10011c44:	4698      	mov	r8, r3
10011c46:	e689      	b.n	1001195c <__aeabi_dmul+0x130>
10011c48:	f000 fc2c 	bl	100124a4 <__clzsi2>
10011c4c:	3020      	adds	r0, #32
10011c4e:	e673      	b.n	10011938 <__aeabi_dmul+0x10c>
10011c50:	2401      	movs	r4, #1
10011c52:	1aa6      	subs	r6, r4, r2
10011c54:	2e38      	cmp	r6, #56	; 0x38
10011c56:	dd07      	ble.n	10011c68 <__aeabi_dmul+0x43c>
10011c58:	2200      	movs	r2, #0
10011c5a:	400c      	ands	r4, r1
10011c5c:	2300      	movs	r3, #0
10011c5e:	2500      	movs	r5, #0
10011c60:	4690      	mov	r8, r2
10011c62:	e649      	b.n	100118f8 <__aeabi_dmul+0xcc>
10011c64:	9e02      	ldr	r6, [sp, #8]
10011c66:	e7a3      	b.n	10011bb0 <__aeabi_dmul+0x384>
10011c68:	2e1f      	cmp	r6, #31
10011c6a:	dc20      	bgt.n	10011cae <__aeabi_dmul+0x482>
10011c6c:	2220      	movs	r2, #32
10011c6e:	002c      	movs	r4, r5
10011c70:	0018      	movs	r0, r3
10011c72:	1b92      	subs	r2, r2, r6
10011c74:	40f0      	lsrs	r0, r6
10011c76:	4094      	lsls	r4, r2
10011c78:	4093      	lsls	r3, r2
10011c7a:	4304      	orrs	r4, r0
10011c7c:	1e58      	subs	r0, r3, #1
10011c7e:	4183      	sbcs	r3, r0
10011c80:	431c      	orrs	r4, r3
10011c82:	40f5      	lsrs	r5, r6
10011c84:	0763      	lsls	r3, r4, #29
10011c86:	d009      	beq.n	10011c9c <__aeabi_dmul+0x470>
10011c88:	230f      	movs	r3, #15
10011c8a:	4023      	ands	r3, r4
10011c8c:	2b04      	cmp	r3, #4
10011c8e:	d005      	beq.n	10011c9c <__aeabi_dmul+0x470>
10011c90:	0023      	movs	r3, r4
10011c92:	1d1c      	adds	r4, r3, #4
10011c94:	429c      	cmp	r4, r3
10011c96:	4192      	sbcs	r2, r2
10011c98:	4252      	negs	r2, r2
10011c9a:	18ad      	adds	r5, r5, r2
10011c9c:	022b      	lsls	r3, r5, #8
10011c9e:	d51f      	bpl.n	10011ce0 <__aeabi_dmul+0x4b4>
10011ca0:	2401      	movs	r4, #1
10011ca2:	2200      	movs	r2, #0
10011ca4:	400c      	ands	r4, r1
10011ca6:	2301      	movs	r3, #1
10011ca8:	2500      	movs	r5, #0
10011caa:	4690      	mov	r8, r2
10011cac:	e624      	b.n	100118f8 <__aeabi_dmul+0xcc>
10011cae:	201f      	movs	r0, #31
10011cb0:	002c      	movs	r4, r5
10011cb2:	4240      	negs	r0, r0
10011cb4:	1a82      	subs	r2, r0, r2
10011cb6:	40d4      	lsrs	r4, r2
10011cb8:	2e20      	cmp	r6, #32
10011cba:	d01c      	beq.n	10011cf6 <__aeabi_dmul+0x4ca>
10011cbc:	2240      	movs	r2, #64	; 0x40
10011cbe:	1b96      	subs	r6, r2, r6
10011cc0:	40b5      	lsls	r5, r6
10011cc2:	432b      	orrs	r3, r5
10011cc4:	1e58      	subs	r0, r3, #1
10011cc6:	4183      	sbcs	r3, r0
10011cc8:	2007      	movs	r0, #7
10011cca:	4323      	orrs	r3, r4
10011ccc:	4018      	ands	r0, r3
10011cce:	2500      	movs	r5, #0
10011cd0:	2800      	cmp	r0, #0
10011cd2:	d009      	beq.n	10011ce8 <__aeabi_dmul+0x4bc>
10011cd4:	220f      	movs	r2, #15
10011cd6:	2500      	movs	r5, #0
10011cd8:	401a      	ands	r2, r3
10011cda:	001c      	movs	r4, r3
10011cdc:	2a04      	cmp	r2, #4
10011cde:	d1d8      	bne.n	10011c92 <__aeabi_dmul+0x466>
10011ce0:	0023      	movs	r3, r4
10011ce2:	0768      	lsls	r0, r5, #29
10011ce4:	026d      	lsls	r5, r5, #9
10011ce6:	0b2d      	lsrs	r5, r5, #12
10011ce8:	2401      	movs	r4, #1
10011cea:	08db      	lsrs	r3, r3, #3
10011cec:	4303      	orrs	r3, r0
10011cee:	4698      	mov	r8, r3
10011cf0:	400c      	ands	r4, r1
10011cf2:	2300      	movs	r3, #0
10011cf4:	e600      	b.n	100118f8 <__aeabi_dmul+0xcc>
10011cf6:	2500      	movs	r5, #0
10011cf8:	e7e3      	b.n	10011cc2 <__aeabi_dmul+0x496>
10011cfa:	2280      	movs	r2, #128	; 0x80
10011cfc:	2401      	movs	r4, #1
10011cfe:	0312      	lsls	r2, r2, #12
10011d00:	4315      	orrs	r5, r2
10011d02:	032d      	lsls	r5, r5, #12
10011d04:	4698      	mov	r8, r3
10011d06:	0b2d      	lsrs	r5, r5, #12
10011d08:	400c      	ands	r4, r1
10011d0a:	4b04      	ldr	r3, [pc, #16]	; (10011d1c <__aeabi_dmul+0x4f0>)
10011d0c:	e5f4      	b.n	100118f8 <__aeabi_dmul+0xcc>
10011d0e:	46c0      	nop			; (mov r8, r8)
10011d10:	000003ff 	.word	0x000003ff
10011d14:	feffffff 	.word	0xfeffffff
10011d18:	000007fe 	.word	0x000007fe
10011d1c:	000007ff 	.word	0x000007ff

10011d20 <__aeabi_dsub>:
10011d20:	b5f0      	push	{r4, r5, r6, r7, lr}
10011d22:	4657      	mov	r7, sl
10011d24:	464e      	mov	r6, r9
10011d26:	4645      	mov	r5, r8
10011d28:	b4e0      	push	{r5, r6, r7}
10011d2a:	000e      	movs	r6, r1
10011d2c:	0011      	movs	r1, r2
10011d2e:	0ff2      	lsrs	r2, r6, #31
10011d30:	4692      	mov	sl, r2
10011d32:	00c5      	lsls	r5, r0, #3
10011d34:	0f42      	lsrs	r2, r0, #29
10011d36:	0318      	lsls	r0, r3, #12
10011d38:	0337      	lsls	r7, r6, #12
10011d3a:	0074      	lsls	r4, r6, #1
10011d3c:	0a40      	lsrs	r0, r0, #9
10011d3e:	0f4e      	lsrs	r6, r1, #29
10011d40:	0a7f      	lsrs	r7, r7, #9
10011d42:	4330      	orrs	r0, r6
10011d44:	4ecf      	ldr	r6, [pc, #828]	; (10012084 <__aeabi_dsub+0x364>)
10011d46:	4317      	orrs	r7, r2
10011d48:	005a      	lsls	r2, r3, #1
10011d4a:	0d64      	lsrs	r4, r4, #21
10011d4c:	0d52      	lsrs	r2, r2, #21
10011d4e:	0fdb      	lsrs	r3, r3, #31
10011d50:	00c9      	lsls	r1, r1, #3
10011d52:	42b2      	cmp	r2, r6
10011d54:	d100      	bne.n	10011d58 <__aeabi_dsub+0x38>
10011d56:	e0e5      	b.n	10011f24 <__aeabi_dsub+0x204>
10011d58:	2601      	movs	r6, #1
10011d5a:	4073      	eors	r3, r6
10011d5c:	1aa6      	subs	r6, r4, r2
10011d5e:	46b4      	mov	ip, r6
10011d60:	4553      	cmp	r3, sl
10011d62:	d100      	bne.n	10011d66 <__aeabi_dsub+0x46>
10011d64:	e0af      	b.n	10011ec6 <__aeabi_dsub+0x1a6>
10011d66:	2e00      	cmp	r6, #0
10011d68:	dc00      	bgt.n	10011d6c <__aeabi_dsub+0x4c>
10011d6a:	e10d      	b.n	10011f88 <__aeabi_dsub+0x268>
10011d6c:	2a00      	cmp	r2, #0
10011d6e:	d13a      	bne.n	10011de6 <__aeabi_dsub+0xc6>
10011d70:	0003      	movs	r3, r0
10011d72:	430b      	orrs	r3, r1
10011d74:	d000      	beq.n	10011d78 <__aeabi_dsub+0x58>
10011d76:	e0e4      	b.n	10011f42 <__aeabi_dsub+0x222>
10011d78:	076b      	lsls	r3, r5, #29
10011d7a:	d009      	beq.n	10011d90 <__aeabi_dsub+0x70>
10011d7c:	230f      	movs	r3, #15
10011d7e:	402b      	ands	r3, r5
10011d80:	2b04      	cmp	r3, #4
10011d82:	d005      	beq.n	10011d90 <__aeabi_dsub+0x70>
10011d84:	1d2b      	adds	r3, r5, #4
10011d86:	42ab      	cmp	r3, r5
10011d88:	41ad      	sbcs	r5, r5
10011d8a:	426d      	negs	r5, r5
10011d8c:	197f      	adds	r7, r7, r5
10011d8e:	001d      	movs	r5, r3
10011d90:	023b      	lsls	r3, r7, #8
10011d92:	d400      	bmi.n	10011d96 <__aeabi_dsub+0x76>
10011d94:	e088      	b.n	10011ea8 <__aeabi_dsub+0x188>
10011d96:	4bbb      	ldr	r3, [pc, #748]	; (10012084 <__aeabi_dsub+0x364>)
10011d98:	3401      	adds	r4, #1
10011d9a:	429c      	cmp	r4, r3
10011d9c:	d100      	bne.n	10011da0 <__aeabi_dsub+0x80>
10011d9e:	e110      	b.n	10011fc2 <__aeabi_dsub+0x2a2>
10011da0:	003a      	movs	r2, r7
10011da2:	4bb9      	ldr	r3, [pc, #740]	; (10012088 <__aeabi_dsub+0x368>)
10011da4:	4651      	mov	r1, sl
10011da6:	401a      	ands	r2, r3
10011da8:	2301      	movs	r3, #1
10011daa:	0750      	lsls	r0, r2, #29
10011dac:	08ed      	lsrs	r5, r5, #3
10011dae:	0252      	lsls	r2, r2, #9
10011db0:	0564      	lsls	r4, r4, #21
10011db2:	4305      	orrs	r5, r0
10011db4:	0b12      	lsrs	r2, r2, #12
10011db6:	0d64      	lsrs	r4, r4, #21
10011db8:	400b      	ands	r3, r1
10011dba:	2100      	movs	r1, #0
10011dbc:	0028      	movs	r0, r5
10011dbe:	0312      	lsls	r2, r2, #12
10011dc0:	0d0d      	lsrs	r5, r1, #20
10011dc2:	0b12      	lsrs	r2, r2, #12
10011dc4:	0564      	lsls	r4, r4, #21
10011dc6:	052d      	lsls	r5, r5, #20
10011dc8:	4315      	orrs	r5, r2
10011dca:	0862      	lsrs	r2, r4, #1
10011dcc:	4caf      	ldr	r4, [pc, #700]	; (1001208c <__aeabi_dsub+0x36c>)
10011dce:	07db      	lsls	r3, r3, #31
10011dd0:	402c      	ands	r4, r5
10011dd2:	4314      	orrs	r4, r2
10011dd4:	0064      	lsls	r4, r4, #1
10011dd6:	0864      	lsrs	r4, r4, #1
10011dd8:	431c      	orrs	r4, r3
10011dda:	0021      	movs	r1, r4
10011ddc:	bc1c      	pop	{r2, r3, r4}
10011dde:	4690      	mov	r8, r2
10011de0:	4699      	mov	r9, r3
10011de2:	46a2      	mov	sl, r4
10011de4:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011de6:	4ba7      	ldr	r3, [pc, #668]	; (10012084 <__aeabi_dsub+0x364>)
10011de8:	429c      	cmp	r4, r3
10011dea:	d0c5      	beq.n	10011d78 <__aeabi_dsub+0x58>
10011dec:	2380      	movs	r3, #128	; 0x80
10011dee:	041b      	lsls	r3, r3, #16
10011df0:	4318      	orrs	r0, r3
10011df2:	4663      	mov	r3, ip
10011df4:	2b38      	cmp	r3, #56	; 0x38
10011df6:	dd00      	ble.n	10011dfa <__aeabi_dsub+0xda>
10011df8:	e0fd      	b.n	10011ff6 <__aeabi_dsub+0x2d6>
10011dfa:	2b1f      	cmp	r3, #31
10011dfc:	dd00      	ble.n	10011e00 <__aeabi_dsub+0xe0>
10011dfe:	e130      	b.n	10012062 <__aeabi_dsub+0x342>
10011e00:	4662      	mov	r2, ip
10011e02:	2320      	movs	r3, #32
10011e04:	1a9b      	subs	r3, r3, r2
10011e06:	0002      	movs	r2, r0
10011e08:	409a      	lsls	r2, r3
10011e0a:	4666      	mov	r6, ip
10011e0c:	4690      	mov	r8, r2
10011e0e:	000a      	movs	r2, r1
10011e10:	4099      	lsls	r1, r3
10011e12:	40f2      	lsrs	r2, r6
10011e14:	4646      	mov	r6, r8
10011e16:	1e4b      	subs	r3, r1, #1
10011e18:	4199      	sbcs	r1, r3
10011e1a:	4332      	orrs	r2, r6
10011e1c:	4311      	orrs	r1, r2
10011e1e:	4663      	mov	r3, ip
10011e20:	0002      	movs	r2, r0
10011e22:	40da      	lsrs	r2, r3
10011e24:	1a69      	subs	r1, r5, r1
10011e26:	428d      	cmp	r5, r1
10011e28:	419b      	sbcs	r3, r3
10011e2a:	000d      	movs	r5, r1
10011e2c:	1aba      	subs	r2, r7, r2
10011e2e:	425b      	negs	r3, r3
10011e30:	1ad7      	subs	r7, r2, r3
10011e32:	023b      	lsls	r3, r7, #8
10011e34:	d535      	bpl.n	10011ea2 <__aeabi_dsub+0x182>
10011e36:	027a      	lsls	r2, r7, #9
10011e38:	0a53      	lsrs	r3, r2, #9
10011e3a:	4698      	mov	r8, r3
10011e3c:	4643      	mov	r3, r8
10011e3e:	2b00      	cmp	r3, #0
10011e40:	d100      	bne.n	10011e44 <__aeabi_dsub+0x124>
10011e42:	e0c4      	b.n	10011fce <__aeabi_dsub+0x2ae>
10011e44:	4640      	mov	r0, r8
10011e46:	f000 fb2d 	bl	100124a4 <__clzsi2>
10011e4a:	0003      	movs	r3, r0
10011e4c:	3b08      	subs	r3, #8
10011e4e:	2b1f      	cmp	r3, #31
10011e50:	dd00      	ble.n	10011e54 <__aeabi_dsub+0x134>
10011e52:	e0c5      	b.n	10011fe0 <__aeabi_dsub+0x2c0>
10011e54:	2220      	movs	r2, #32
10011e56:	0029      	movs	r1, r5
10011e58:	1ad2      	subs	r2, r2, r3
10011e5a:	4647      	mov	r7, r8
10011e5c:	40d1      	lsrs	r1, r2
10011e5e:	409f      	lsls	r7, r3
10011e60:	000a      	movs	r2, r1
10011e62:	409d      	lsls	r5, r3
10011e64:	433a      	orrs	r2, r7
10011e66:	429c      	cmp	r4, r3
10011e68:	dd00      	ble.n	10011e6c <__aeabi_dsub+0x14c>
10011e6a:	e0c0      	b.n	10011fee <__aeabi_dsub+0x2ce>
10011e6c:	1b1c      	subs	r4, r3, r4
10011e6e:	1c63      	adds	r3, r4, #1
10011e70:	2b1f      	cmp	r3, #31
10011e72:	dd00      	ble.n	10011e76 <__aeabi_dsub+0x156>
10011e74:	e0e4      	b.n	10012040 <__aeabi_dsub+0x320>
10011e76:	2120      	movs	r1, #32
10011e78:	0014      	movs	r4, r2
10011e7a:	0028      	movs	r0, r5
10011e7c:	1ac9      	subs	r1, r1, r3
10011e7e:	40d8      	lsrs	r0, r3
10011e80:	408c      	lsls	r4, r1
10011e82:	408d      	lsls	r5, r1
10011e84:	4304      	orrs	r4, r0
10011e86:	40da      	lsrs	r2, r3
10011e88:	1e68      	subs	r0, r5, #1
10011e8a:	4185      	sbcs	r5, r0
10011e8c:	0017      	movs	r7, r2
10011e8e:	4325      	orrs	r5, r4
10011e90:	2400      	movs	r4, #0
10011e92:	e771      	b.n	10011d78 <__aeabi_dsub+0x58>
10011e94:	4642      	mov	r2, r8
10011e96:	4663      	mov	r3, ip
10011e98:	431a      	orrs	r2, r3
10011e9a:	d100      	bne.n	10011e9e <__aeabi_dsub+0x17e>
10011e9c:	e24c      	b.n	10012338 <__aeabi_dsub+0x618>
10011e9e:	4667      	mov	r7, ip
10011ea0:	4645      	mov	r5, r8
10011ea2:	076b      	lsls	r3, r5, #29
10011ea4:	d000      	beq.n	10011ea8 <__aeabi_dsub+0x188>
10011ea6:	e769      	b.n	10011d7c <__aeabi_dsub+0x5c>
10011ea8:	2301      	movs	r3, #1
10011eaa:	4651      	mov	r1, sl
10011eac:	0778      	lsls	r0, r7, #29
10011eae:	08ed      	lsrs	r5, r5, #3
10011eb0:	08fa      	lsrs	r2, r7, #3
10011eb2:	400b      	ands	r3, r1
10011eb4:	4305      	orrs	r5, r0
10011eb6:	4973      	ldr	r1, [pc, #460]	; (10012084 <__aeabi_dsub+0x364>)
10011eb8:	428c      	cmp	r4, r1
10011eba:	d038      	beq.n	10011f2e <__aeabi_dsub+0x20e>
10011ebc:	0312      	lsls	r2, r2, #12
10011ebe:	0564      	lsls	r4, r4, #21
10011ec0:	0b12      	lsrs	r2, r2, #12
10011ec2:	0d64      	lsrs	r4, r4, #21
10011ec4:	e779      	b.n	10011dba <__aeabi_dsub+0x9a>
10011ec6:	2e00      	cmp	r6, #0
10011ec8:	dc00      	bgt.n	10011ecc <__aeabi_dsub+0x1ac>
10011eca:	e09a      	b.n	10012002 <__aeabi_dsub+0x2e2>
10011ecc:	2a00      	cmp	r2, #0
10011ece:	d047      	beq.n	10011f60 <__aeabi_dsub+0x240>
10011ed0:	4a6c      	ldr	r2, [pc, #432]	; (10012084 <__aeabi_dsub+0x364>)
10011ed2:	4294      	cmp	r4, r2
10011ed4:	d100      	bne.n	10011ed8 <__aeabi_dsub+0x1b8>
10011ed6:	e74f      	b.n	10011d78 <__aeabi_dsub+0x58>
10011ed8:	2280      	movs	r2, #128	; 0x80
10011eda:	0412      	lsls	r2, r2, #16
10011edc:	4310      	orrs	r0, r2
10011ede:	4662      	mov	r2, ip
10011ee0:	2a38      	cmp	r2, #56	; 0x38
10011ee2:	dc00      	bgt.n	10011ee6 <__aeabi_dsub+0x1c6>
10011ee4:	e108      	b.n	100120f8 <__aeabi_dsub+0x3d8>
10011ee6:	4301      	orrs	r1, r0
10011ee8:	1e48      	subs	r0, r1, #1
10011eea:	4181      	sbcs	r1, r0
10011eec:	2200      	movs	r2, #0
10011eee:	b2c9      	uxtb	r1, r1
10011ef0:	1949      	adds	r1, r1, r5
10011ef2:	19d2      	adds	r2, r2, r7
10011ef4:	42a9      	cmp	r1, r5
10011ef6:	41bf      	sbcs	r7, r7
10011ef8:	000d      	movs	r5, r1
10011efa:	427f      	negs	r7, r7
10011efc:	18bf      	adds	r7, r7, r2
10011efe:	023a      	lsls	r2, r7, #8
10011f00:	d400      	bmi.n	10011f04 <__aeabi_dsub+0x1e4>
10011f02:	e142      	b.n	1001218a <__aeabi_dsub+0x46a>
10011f04:	4a5f      	ldr	r2, [pc, #380]	; (10012084 <__aeabi_dsub+0x364>)
10011f06:	3401      	adds	r4, #1
10011f08:	4294      	cmp	r4, r2
10011f0a:	d100      	bne.n	10011f0e <__aeabi_dsub+0x1ee>
10011f0c:	e14e      	b.n	100121ac <__aeabi_dsub+0x48c>
10011f0e:	2001      	movs	r0, #1
10011f10:	4a5d      	ldr	r2, [pc, #372]	; (10012088 <__aeabi_dsub+0x368>)
10011f12:	0869      	lsrs	r1, r5, #1
10011f14:	403a      	ands	r2, r7
10011f16:	4028      	ands	r0, r5
10011f18:	4308      	orrs	r0, r1
10011f1a:	07d5      	lsls	r5, r2, #31
10011f1c:	4305      	orrs	r5, r0
10011f1e:	0857      	lsrs	r7, r2, #1
10011f20:	469a      	mov	sl, r3
10011f22:	e729      	b.n	10011d78 <__aeabi_dsub+0x58>
10011f24:	0006      	movs	r6, r0
10011f26:	430e      	orrs	r6, r1
10011f28:	d000      	beq.n	10011f2c <__aeabi_dsub+0x20c>
10011f2a:	e717      	b.n	10011d5c <__aeabi_dsub+0x3c>
10011f2c:	e714      	b.n	10011d58 <__aeabi_dsub+0x38>
10011f2e:	0029      	movs	r1, r5
10011f30:	4311      	orrs	r1, r2
10011f32:	d100      	bne.n	10011f36 <__aeabi_dsub+0x216>
10011f34:	e1f9      	b.n	1001232a <__aeabi_dsub+0x60a>
10011f36:	2180      	movs	r1, #128	; 0x80
10011f38:	0309      	lsls	r1, r1, #12
10011f3a:	430a      	orrs	r2, r1
10011f3c:	0312      	lsls	r2, r2, #12
10011f3e:	0b12      	lsrs	r2, r2, #12
10011f40:	e73b      	b.n	10011dba <__aeabi_dsub+0x9a>
10011f42:	2301      	movs	r3, #1
10011f44:	425b      	negs	r3, r3
10011f46:	4698      	mov	r8, r3
10011f48:	44c4      	add	ip, r8
10011f4a:	4663      	mov	r3, ip
10011f4c:	2b00      	cmp	r3, #0
10011f4e:	d172      	bne.n	10012036 <__aeabi_dsub+0x316>
10011f50:	1a69      	subs	r1, r5, r1
10011f52:	428d      	cmp	r5, r1
10011f54:	419b      	sbcs	r3, r3
10011f56:	1a3f      	subs	r7, r7, r0
10011f58:	425b      	negs	r3, r3
10011f5a:	1aff      	subs	r7, r7, r3
10011f5c:	000d      	movs	r5, r1
10011f5e:	e768      	b.n	10011e32 <__aeabi_dsub+0x112>
10011f60:	0002      	movs	r2, r0
10011f62:	430a      	orrs	r2, r1
10011f64:	d100      	bne.n	10011f68 <__aeabi_dsub+0x248>
10011f66:	e707      	b.n	10011d78 <__aeabi_dsub+0x58>
10011f68:	2201      	movs	r2, #1
10011f6a:	4252      	negs	r2, r2
10011f6c:	4690      	mov	r8, r2
10011f6e:	44c4      	add	ip, r8
10011f70:	4662      	mov	r2, ip
10011f72:	2a00      	cmp	r2, #0
10011f74:	d000      	beq.n	10011f78 <__aeabi_dsub+0x258>
10011f76:	e0e6      	b.n	10012146 <__aeabi_dsub+0x426>
10011f78:	1869      	adds	r1, r5, r1
10011f7a:	42a9      	cmp	r1, r5
10011f7c:	41b6      	sbcs	r6, r6
10011f7e:	183f      	adds	r7, r7, r0
10011f80:	4276      	negs	r6, r6
10011f82:	19f7      	adds	r7, r6, r7
10011f84:	000d      	movs	r5, r1
10011f86:	e7ba      	b.n	10011efe <__aeabi_dsub+0x1de>
10011f88:	2e00      	cmp	r6, #0
10011f8a:	d000      	beq.n	10011f8e <__aeabi_dsub+0x26e>
10011f8c:	e080      	b.n	10012090 <__aeabi_dsub+0x370>
10011f8e:	1c62      	adds	r2, r4, #1
10011f90:	0552      	lsls	r2, r2, #21
10011f92:	0d52      	lsrs	r2, r2, #21
10011f94:	2a01      	cmp	r2, #1
10011f96:	dc00      	bgt.n	10011f9a <__aeabi_dsub+0x27a>
10011f98:	e0f9      	b.n	1001218e <__aeabi_dsub+0x46e>
10011f9a:	1a6a      	subs	r2, r5, r1
10011f9c:	4691      	mov	r9, r2
10011f9e:	454d      	cmp	r5, r9
10011fa0:	41b6      	sbcs	r6, r6
10011fa2:	1a3a      	subs	r2, r7, r0
10011fa4:	4276      	negs	r6, r6
10011fa6:	1b92      	subs	r2, r2, r6
10011fa8:	4690      	mov	r8, r2
10011faa:	0212      	lsls	r2, r2, #8
10011fac:	d400      	bmi.n	10011fb0 <__aeabi_dsub+0x290>
10011fae:	e099      	b.n	100120e4 <__aeabi_dsub+0x3c4>
10011fb0:	1b4d      	subs	r5, r1, r5
10011fb2:	42a9      	cmp	r1, r5
10011fb4:	4189      	sbcs	r1, r1
10011fb6:	1bc7      	subs	r7, r0, r7
10011fb8:	4249      	negs	r1, r1
10011fba:	1a7a      	subs	r2, r7, r1
10011fbc:	4690      	mov	r8, r2
10011fbe:	469a      	mov	sl, r3
10011fc0:	e73c      	b.n	10011e3c <__aeabi_dsub+0x11c>
10011fc2:	4652      	mov	r2, sl
10011fc4:	2301      	movs	r3, #1
10011fc6:	2500      	movs	r5, #0
10011fc8:	4013      	ands	r3, r2
10011fca:	2200      	movs	r2, #0
10011fcc:	e6f5      	b.n	10011dba <__aeabi_dsub+0x9a>
10011fce:	0028      	movs	r0, r5
10011fd0:	f000 fa68 	bl	100124a4 <__clzsi2>
10011fd4:	3020      	adds	r0, #32
10011fd6:	0003      	movs	r3, r0
10011fd8:	3b08      	subs	r3, #8
10011fda:	2b1f      	cmp	r3, #31
10011fdc:	dc00      	bgt.n	10011fe0 <__aeabi_dsub+0x2c0>
10011fde:	e739      	b.n	10011e54 <__aeabi_dsub+0x134>
10011fe0:	002a      	movs	r2, r5
10011fe2:	3828      	subs	r0, #40	; 0x28
10011fe4:	4082      	lsls	r2, r0
10011fe6:	2500      	movs	r5, #0
10011fe8:	429c      	cmp	r4, r3
10011fea:	dc00      	bgt.n	10011fee <__aeabi_dsub+0x2ce>
10011fec:	e73e      	b.n	10011e6c <__aeabi_dsub+0x14c>
10011fee:	4f26      	ldr	r7, [pc, #152]	; (10012088 <__aeabi_dsub+0x368>)
10011ff0:	1ae4      	subs	r4, r4, r3
10011ff2:	4017      	ands	r7, r2
10011ff4:	e6c0      	b.n	10011d78 <__aeabi_dsub+0x58>
10011ff6:	4301      	orrs	r1, r0
10011ff8:	1e48      	subs	r0, r1, #1
10011ffa:	4181      	sbcs	r1, r0
10011ffc:	2200      	movs	r2, #0
10011ffe:	b2c9      	uxtb	r1, r1
10012000:	e710      	b.n	10011e24 <__aeabi_dsub+0x104>
10012002:	2e00      	cmp	r6, #0
10012004:	d000      	beq.n	10012008 <__aeabi_dsub+0x2e8>
10012006:	e0f1      	b.n	100121ec <__aeabi_dsub+0x4cc>
10012008:	1c62      	adds	r2, r4, #1
1001200a:	4694      	mov	ip, r2
1001200c:	0552      	lsls	r2, r2, #21
1001200e:	0d52      	lsrs	r2, r2, #21
10012010:	2a01      	cmp	r2, #1
10012012:	dc00      	bgt.n	10012016 <__aeabi_dsub+0x2f6>
10012014:	e0a0      	b.n	10012158 <__aeabi_dsub+0x438>
10012016:	4a1b      	ldr	r2, [pc, #108]	; (10012084 <__aeabi_dsub+0x364>)
10012018:	4594      	cmp	ip, r2
1001201a:	d100      	bne.n	1001201e <__aeabi_dsub+0x2fe>
1001201c:	e0c5      	b.n	100121aa <__aeabi_dsub+0x48a>
1001201e:	1869      	adds	r1, r5, r1
10012020:	42a9      	cmp	r1, r5
10012022:	4192      	sbcs	r2, r2
10012024:	183f      	adds	r7, r7, r0
10012026:	4252      	negs	r2, r2
10012028:	19d2      	adds	r2, r2, r7
1001202a:	0849      	lsrs	r1, r1, #1
1001202c:	07d5      	lsls	r5, r2, #31
1001202e:	430d      	orrs	r5, r1
10012030:	0857      	lsrs	r7, r2, #1
10012032:	4664      	mov	r4, ip
10012034:	e6a0      	b.n	10011d78 <__aeabi_dsub+0x58>
10012036:	4b13      	ldr	r3, [pc, #76]	; (10012084 <__aeabi_dsub+0x364>)
10012038:	429c      	cmp	r4, r3
1001203a:	d000      	beq.n	1001203e <__aeabi_dsub+0x31e>
1001203c:	e6d9      	b.n	10011df2 <__aeabi_dsub+0xd2>
1001203e:	e69b      	b.n	10011d78 <__aeabi_dsub+0x58>
10012040:	0011      	movs	r1, r2
10012042:	3c1f      	subs	r4, #31
10012044:	40e1      	lsrs	r1, r4
10012046:	000c      	movs	r4, r1
10012048:	2b20      	cmp	r3, #32
1001204a:	d100      	bne.n	1001204e <__aeabi_dsub+0x32e>
1001204c:	e080      	b.n	10012150 <__aeabi_dsub+0x430>
1001204e:	2140      	movs	r1, #64	; 0x40
10012050:	1acb      	subs	r3, r1, r3
10012052:	409a      	lsls	r2, r3
10012054:	4315      	orrs	r5, r2
10012056:	1e6a      	subs	r2, r5, #1
10012058:	4195      	sbcs	r5, r2
1001205a:	2700      	movs	r7, #0
1001205c:	4325      	orrs	r5, r4
1001205e:	2400      	movs	r4, #0
10012060:	e71f      	b.n	10011ea2 <__aeabi_dsub+0x182>
10012062:	4663      	mov	r3, ip
10012064:	0002      	movs	r2, r0
10012066:	3b20      	subs	r3, #32
10012068:	40da      	lsrs	r2, r3
1001206a:	4663      	mov	r3, ip
1001206c:	2b20      	cmp	r3, #32
1001206e:	d071      	beq.n	10012154 <__aeabi_dsub+0x434>
10012070:	2340      	movs	r3, #64	; 0x40
10012072:	4666      	mov	r6, ip
10012074:	1b9b      	subs	r3, r3, r6
10012076:	4098      	lsls	r0, r3
10012078:	4301      	orrs	r1, r0
1001207a:	1e48      	subs	r0, r1, #1
1001207c:	4181      	sbcs	r1, r0
1001207e:	4311      	orrs	r1, r2
10012080:	2200      	movs	r2, #0
10012082:	e6cf      	b.n	10011e24 <__aeabi_dsub+0x104>
10012084:	000007ff 	.word	0x000007ff
10012088:	ff7fffff 	.word	0xff7fffff
1001208c:	800fffff 	.word	0x800fffff
10012090:	2c00      	cmp	r4, #0
10012092:	d048      	beq.n	10012126 <__aeabi_dsub+0x406>
10012094:	4cca      	ldr	r4, [pc, #808]	; (100123c0 <__aeabi_dsub+0x6a0>)
10012096:	42a2      	cmp	r2, r4
10012098:	d100      	bne.n	1001209c <__aeabi_dsub+0x37c>
1001209a:	e0a2      	b.n	100121e2 <__aeabi_dsub+0x4c2>
1001209c:	4274      	negs	r4, r6
1001209e:	46a1      	mov	r9, r4
100120a0:	2480      	movs	r4, #128	; 0x80
100120a2:	0424      	lsls	r4, r4, #16
100120a4:	4327      	orrs	r7, r4
100120a6:	464c      	mov	r4, r9
100120a8:	2c38      	cmp	r4, #56	; 0x38
100120aa:	dd00      	ble.n	100120ae <__aeabi_dsub+0x38e>
100120ac:	e0db      	b.n	10012266 <__aeabi_dsub+0x546>
100120ae:	2c1f      	cmp	r4, #31
100120b0:	dd00      	ble.n	100120b4 <__aeabi_dsub+0x394>
100120b2:	e144      	b.n	1001233e <__aeabi_dsub+0x61e>
100120b4:	464e      	mov	r6, r9
100120b6:	2420      	movs	r4, #32
100120b8:	1ba4      	subs	r4, r4, r6
100120ba:	003e      	movs	r6, r7
100120bc:	40a6      	lsls	r6, r4
100120be:	46a2      	mov	sl, r4
100120c0:	46b0      	mov	r8, r6
100120c2:	464c      	mov	r4, r9
100120c4:	002e      	movs	r6, r5
100120c6:	40e6      	lsrs	r6, r4
100120c8:	46b4      	mov	ip, r6
100120ca:	4646      	mov	r6, r8
100120cc:	4664      	mov	r4, ip
100120ce:	4326      	orrs	r6, r4
100120d0:	4654      	mov	r4, sl
100120d2:	40a5      	lsls	r5, r4
100120d4:	1e6c      	subs	r4, r5, #1
100120d6:	41a5      	sbcs	r5, r4
100120d8:	0034      	movs	r4, r6
100120da:	432c      	orrs	r4, r5
100120dc:	464d      	mov	r5, r9
100120de:	40ef      	lsrs	r7, r5
100120e0:	1b0d      	subs	r5, r1, r4
100120e2:	e028      	b.n	10012136 <__aeabi_dsub+0x416>
100120e4:	464a      	mov	r2, r9
100120e6:	4643      	mov	r3, r8
100120e8:	464d      	mov	r5, r9
100120ea:	431a      	orrs	r2, r3
100120ec:	d000      	beq.n	100120f0 <__aeabi_dsub+0x3d0>
100120ee:	e6a5      	b.n	10011e3c <__aeabi_dsub+0x11c>
100120f0:	2300      	movs	r3, #0
100120f2:	2400      	movs	r4, #0
100120f4:	2500      	movs	r5, #0
100120f6:	e6de      	b.n	10011eb6 <__aeabi_dsub+0x196>
100120f8:	2a1f      	cmp	r2, #31
100120fa:	dc5a      	bgt.n	100121b2 <__aeabi_dsub+0x492>
100120fc:	4666      	mov	r6, ip
100120fe:	2220      	movs	r2, #32
10012100:	1b92      	subs	r2, r2, r6
10012102:	0006      	movs	r6, r0
10012104:	4096      	lsls	r6, r2
10012106:	4691      	mov	r9, r2
10012108:	46b0      	mov	r8, r6
1001210a:	4662      	mov	r2, ip
1001210c:	000e      	movs	r6, r1
1001210e:	40d6      	lsrs	r6, r2
10012110:	4642      	mov	r2, r8
10012112:	4316      	orrs	r6, r2
10012114:	464a      	mov	r2, r9
10012116:	4091      	lsls	r1, r2
10012118:	1e4a      	subs	r2, r1, #1
1001211a:	4191      	sbcs	r1, r2
1001211c:	0002      	movs	r2, r0
1001211e:	4660      	mov	r0, ip
10012120:	4331      	orrs	r1, r6
10012122:	40c2      	lsrs	r2, r0
10012124:	e6e4      	b.n	10011ef0 <__aeabi_dsub+0x1d0>
10012126:	003c      	movs	r4, r7
10012128:	432c      	orrs	r4, r5
1001212a:	d05a      	beq.n	100121e2 <__aeabi_dsub+0x4c2>
1001212c:	43f4      	mvns	r4, r6
1001212e:	46a1      	mov	r9, r4
10012130:	2c00      	cmp	r4, #0
10012132:	d152      	bne.n	100121da <__aeabi_dsub+0x4ba>
10012134:	1b4d      	subs	r5, r1, r5
10012136:	42a9      	cmp	r1, r5
10012138:	4189      	sbcs	r1, r1
1001213a:	1bc7      	subs	r7, r0, r7
1001213c:	4249      	negs	r1, r1
1001213e:	1a7f      	subs	r7, r7, r1
10012140:	0014      	movs	r4, r2
10012142:	469a      	mov	sl, r3
10012144:	e675      	b.n	10011e32 <__aeabi_dsub+0x112>
10012146:	4a9e      	ldr	r2, [pc, #632]	; (100123c0 <__aeabi_dsub+0x6a0>)
10012148:	4294      	cmp	r4, r2
1001214a:	d000      	beq.n	1001214e <__aeabi_dsub+0x42e>
1001214c:	e6c7      	b.n	10011ede <__aeabi_dsub+0x1be>
1001214e:	e613      	b.n	10011d78 <__aeabi_dsub+0x58>
10012150:	2200      	movs	r2, #0
10012152:	e77f      	b.n	10012054 <__aeabi_dsub+0x334>
10012154:	2000      	movs	r0, #0
10012156:	e78f      	b.n	10012078 <__aeabi_dsub+0x358>
10012158:	2c00      	cmp	r4, #0
1001215a:	d000      	beq.n	1001215e <__aeabi_dsub+0x43e>
1001215c:	e0c8      	b.n	100122f0 <__aeabi_dsub+0x5d0>
1001215e:	003b      	movs	r3, r7
10012160:	432b      	orrs	r3, r5
10012162:	d100      	bne.n	10012166 <__aeabi_dsub+0x446>
10012164:	e10f      	b.n	10012386 <__aeabi_dsub+0x666>
10012166:	0003      	movs	r3, r0
10012168:	430b      	orrs	r3, r1
1001216a:	d100      	bne.n	1001216e <__aeabi_dsub+0x44e>
1001216c:	e604      	b.n	10011d78 <__aeabi_dsub+0x58>
1001216e:	1869      	adds	r1, r5, r1
10012170:	42a9      	cmp	r1, r5
10012172:	419b      	sbcs	r3, r3
10012174:	183f      	adds	r7, r7, r0
10012176:	425b      	negs	r3, r3
10012178:	19df      	adds	r7, r3, r7
1001217a:	023b      	lsls	r3, r7, #8
1001217c:	d400      	bmi.n	10012180 <__aeabi_dsub+0x460>
1001217e:	e11a      	b.n	100123b6 <__aeabi_dsub+0x696>
10012180:	4b90      	ldr	r3, [pc, #576]	; (100123c4 <__aeabi_dsub+0x6a4>)
10012182:	000d      	movs	r5, r1
10012184:	401f      	ands	r7, r3
10012186:	4664      	mov	r4, ip
10012188:	e5f6      	b.n	10011d78 <__aeabi_dsub+0x58>
1001218a:	469a      	mov	sl, r3
1001218c:	e689      	b.n	10011ea2 <__aeabi_dsub+0x182>
1001218e:	003a      	movs	r2, r7
10012190:	432a      	orrs	r2, r5
10012192:	2c00      	cmp	r4, #0
10012194:	d15c      	bne.n	10012250 <__aeabi_dsub+0x530>
10012196:	2a00      	cmp	r2, #0
10012198:	d175      	bne.n	10012286 <__aeabi_dsub+0x566>
1001219a:	0002      	movs	r2, r0
1001219c:	430a      	orrs	r2, r1
1001219e:	d100      	bne.n	100121a2 <__aeabi_dsub+0x482>
100121a0:	e0ca      	b.n	10012338 <__aeabi_dsub+0x618>
100121a2:	0007      	movs	r7, r0
100121a4:	000d      	movs	r5, r1
100121a6:	469a      	mov	sl, r3
100121a8:	e5e6      	b.n	10011d78 <__aeabi_dsub+0x58>
100121aa:	4664      	mov	r4, ip
100121ac:	2200      	movs	r2, #0
100121ae:	2500      	movs	r5, #0
100121b0:	e681      	b.n	10011eb6 <__aeabi_dsub+0x196>
100121b2:	4662      	mov	r2, ip
100121b4:	0006      	movs	r6, r0
100121b6:	3a20      	subs	r2, #32
100121b8:	40d6      	lsrs	r6, r2
100121ba:	4662      	mov	r2, ip
100121bc:	46b0      	mov	r8, r6
100121be:	2a20      	cmp	r2, #32
100121c0:	d100      	bne.n	100121c4 <__aeabi_dsub+0x4a4>
100121c2:	e0b7      	b.n	10012334 <__aeabi_dsub+0x614>
100121c4:	2240      	movs	r2, #64	; 0x40
100121c6:	4666      	mov	r6, ip
100121c8:	1b92      	subs	r2, r2, r6
100121ca:	4090      	lsls	r0, r2
100121cc:	4301      	orrs	r1, r0
100121ce:	4642      	mov	r2, r8
100121d0:	1e48      	subs	r0, r1, #1
100121d2:	4181      	sbcs	r1, r0
100121d4:	4311      	orrs	r1, r2
100121d6:	2200      	movs	r2, #0
100121d8:	e68a      	b.n	10011ef0 <__aeabi_dsub+0x1d0>
100121da:	4c79      	ldr	r4, [pc, #484]	; (100123c0 <__aeabi_dsub+0x6a0>)
100121dc:	42a2      	cmp	r2, r4
100121de:	d000      	beq.n	100121e2 <__aeabi_dsub+0x4c2>
100121e0:	e761      	b.n	100120a6 <__aeabi_dsub+0x386>
100121e2:	0007      	movs	r7, r0
100121e4:	000d      	movs	r5, r1
100121e6:	0014      	movs	r4, r2
100121e8:	469a      	mov	sl, r3
100121ea:	e5c5      	b.n	10011d78 <__aeabi_dsub+0x58>
100121ec:	2c00      	cmp	r4, #0
100121ee:	d141      	bne.n	10012274 <__aeabi_dsub+0x554>
100121f0:	003c      	movs	r4, r7
100121f2:	432c      	orrs	r4, r5
100121f4:	d078      	beq.n	100122e8 <__aeabi_dsub+0x5c8>
100121f6:	43f4      	mvns	r4, r6
100121f8:	46a1      	mov	r9, r4
100121fa:	2c00      	cmp	r4, #0
100121fc:	d020      	beq.n	10012240 <__aeabi_dsub+0x520>
100121fe:	4c70      	ldr	r4, [pc, #448]	; (100123c0 <__aeabi_dsub+0x6a0>)
10012200:	42a2      	cmp	r2, r4
10012202:	d071      	beq.n	100122e8 <__aeabi_dsub+0x5c8>
10012204:	464c      	mov	r4, r9
10012206:	2c38      	cmp	r4, #56	; 0x38
10012208:	dd00      	ble.n	1001220c <__aeabi_dsub+0x4ec>
1001220a:	e0b2      	b.n	10012372 <__aeabi_dsub+0x652>
1001220c:	2c1f      	cmp	r4, #31
1001220e:	dd00      	ble.n	10012212 <__aeabi_dsub+0x4f2>
10012210:	e0bc      	b.n	1001238c <__aeabi_dsub+0x66c>
10012212:	2620      	movs	r6, #32
10012214:	1b34      	subs	r4, r6, r4
10012216:	46a2      	mov	sl, r4
10012218:	003c      	movs	r4, r7
1001221a:	4656      	mov	r6, sl
1001221c:	40b4      	lsls	r4, r6
1001221e:	464e      	mov	r6, r9
10012220:	46a0      	mov	r8, r4
10012222:	002c      	movs	r4, r5
10012224:	40f4      	lsrs	r4, r6
10012226:	46a4      	mov	ip, r4
10012228:	4644      	mov	r4, r8
1001222a:	4666      	mov	r6, ip
1001222c:	4334      	orrs	r4, r6
1001222e:	46a4      	mov	ip, r4
10012230:	4654      	mov	r4, sl
10012232:	40a5      	lsls	r5, r4
10012234:	4664      	mov	r4, ip
10012236:	1e6e      	subs	r6, r5, #1
10012238:	41b5      	sbcs	r5, r6
1001223a:	4325      	orrs	r5, r4
1001223c:	464c      	mov	r4, r9
1001223e:	40e7      	lsrs	r7, r4
10012240:	186d      	adds	r5, r5, r1
10012242:	428d      	cmp	r5, r1
10012244:	4189      	sbcs	r1, r1
10012246:	183f      	adds	r7, r7, r0
10012248:	4249      	negs	r1, r1
1001224a:	19cf      	adds	r7, r1, r7
1001224c:	0014      	movs	r4, r2
1001224e:	e656      	b.n	10011efe <__aeabi_dsub+0x1de>
10012250:	2a00      	cmp	r2, #0
10012252:	d12f      	bne.n	100122b4 <__aeabi_dsub+0x594>
10012254:	0002      	movs	r2, r0
10012256:	430a      	orrs	r2, r1
10012258:	d100      	bne.n	1001225c <__aeabi_dsub+0x53c>
1001225a:	e084      	b.n	10012366 <__aeabi_dsub+0x646>
1001225c:	0007      	movs	r7, r0
1001225e:	000d      	movs	r5, r1
10012260:	469a      	mov	sl, r3
10012262:	4c57      	ldr	r4, [pc, #348]	; (100123c0 <__aeabi_dsub+0x6a0>)
10012264:	e588      	b.n	10011d78 <__aeabi_dsub+0x58>
10012266:	433d      	orrs	r5, r7
10012268:	1e6f      	subs	r7, r5, #1
1001226a:	41bd      	sbcs	r5, r7
1001226c:	b2ec      	uxtb	r4, r5
1001226e:	2700      	movs	r7, #0
10012270:	1b0d      	subs	r5, r1, r4
10012272:	e760      	b.n	10012136 <__aeabi_dsub+0x416>
10012274:	4c52      	ldr	r4, [pc, #328]	; (100123c0 <__aeabi_dsub+0x6a0>)
10012276:	42a2      	cmp	r2, r4
10012278:	d036      	beq.n	100122e8 <__aeabi_dsub+0x5c8>
1001227a:	4274      	negs	r4, r6
1001227c:	2680      	movs	r6, #128	; 0x80
1001227e:	0436      	lsls	r6, r6, #16
10012280:	46a1      	mov	r9, r4
10012282:	4337      	orrs	r7, r6
10012284:	e7be      	b.n	10012204 <__aeabi_dsub+0x4e4>
10012286:	0002      	movs	r2, r0
10012288:	430a      	orrs	r2, r1
1001228a:	d100      	bne.n	1001228e <__aeabi_dsub+0x56e>
1001228c:	e574      	b.n	10011d78 <__aeabi_dsub+0x58>
1001228e:	1a6a      	subs	r2, r5, r1
10012290:	4690      	mov	r8, r2
10012292:	4545      	cmp	r5, r8
10012294:	41b6      	sbcs	r6, r6
10012296:	1a3a      	subs	r2, r7, r0
10012298:	4276      	negs	r6, r6
1001229a:	1b92      	subs	r2, r2, r6
1001229c:	4694      	mov	ip, r2
1001229e:	0212      	lsls	r2, r2, #8
100122a0:	d400      	bmi.n	100122a4 <__aeabi_dsub+0x584>
100122a2:	e5f7      	b.n	10011e94 <__aeabi_dsub+0x174>
100122a4:	1b4d      	subs	r5, r1, r5
100122a6:	42a9      	cmp	r1, r5
100122a8:	4189      	sbcs	r1, r1
100122aa:	1bc7      	subs	r7, r0, r7
100122ac:	4249      	negs	r1, r1
100122ae:	1a7f      	subs	r7, r7, r1
100122b0:	469a      	mov	sl, r3
100122b2:	e561      	b.n	10011d78 <__aeabi_dsub+0x58>
100122b4:	0002      	movs	r2, r0
100122b6:	430a      	orrs	r2, r1
100122b8:	d03a      	beq.n	10012330 <__aeabi_dsub+0x610>
100122ba:	08ed      	lsrs	r5, r5, #3
100122bc:	077c      	lsls	r4, r7, #29
100122be:	432c      	orrs	r4, r5
100122c0:	2580      	movs	r5, #128	; 0x80
100122c2:	08fa      	lsrs	r2, r7, #3
100122c4:	032d      	lsls	r5, r5, #12
100122c6:	422a      	tst	r2, r5
100122c8:	d008      	beq.n	100122dc <__aeabi_dsub+0x5bc>
100122ca:	08c7      	lsrs	r7, r0, #3
100122cc:	422f      	tst	r7, r5
100122ce:	d105      	bne.n	100122dc <__aeabi_dsub+0x5bc>
100122d0:	0745      	lsls	r5, r0, #29
100122d2:	002c      	movs	r4, r5
100122d4:	003a      	movs	r2, r7
100122d6:	469a      	mov	sl, r3
100122d8:	08c9      	lsrs	r1, r1, #3
100122da:	430c      	orrs	r4, r1
100122dc:	0f67      	lsrs	r7, r4, #29
100122de:	00d2      	lsls	r2, r2, #3
100122e0:	00e5      	lsls	r5, r4, #3
100122e2:	4317      	orrs	r7, r2
100122e4:	4c36      	ldr	r4, [pc, #216]	; (100123c0 <__aeabi_dsub+0x6a0>)
100122e6:	e547      	b.n	10011d78 <__aeabi_dsub+0x58>
100122e8:	0007      	movs	r7, r0
100122ea:	000d      	movs	r5, r1
100122ec:	0014      	movs	r4, r2
100122ee:	e543      	b.n	10011d78 <__aeabi_dsub+0x58>
100122f0:	003a      	movs	r2, r7
100122f2:	432a      	orrs	r2, r5
100122f4:	d043      	beq.n	1001237e <__aeabi_dsub+0x65e>
100122f6:	0002      	movs	r2, r0
100122f8:	430a      	orrs	r2, r1
100122fa:	d019      	beq.n	10012330 <__aeabi_dsub+0x610>
100122fc:	08ed      	lsrs	r5, r5, #3
100122fe:	077c      	lsls	r4, r7, #29
10012300:	432c      	orrs	r4, r5
10012302:	2580      	movs	r5, #128	; 0x80
10012304:	08fa      	lsrs	r2, r7, #3
10012306:	032d      	lsls	r5, r5, #12
10012308:	422a      	tst	r2, r5
1001230a:	d007      	beq.n	1001231c <__aeabi_dsub+0x5fc>
1001230c:	08c6      	lsrs	r6, r0, #3
1001230e:	422e      	tst	r6, r5
10012310:	d104      	bne.n	1001231c <__aeabi_dsub+0x5fc>
10012312:	0747      	lsls	r7, r0, #29
10012314:	003c      	movs	r4, r7
10012316:	0032      	movs	r2, r6
10012318:	08c9      	lsrs	r1, r1, #3
1001231a:	430c      	orrs	r4, r1
1001231c:	00d7      	lsls	r7, r2, #3
1001231e:	0f62      	lsrs	r2, r4, #29
10012320:	00e5      	lsls	r5, r4, #3
10012322:	4317      	orrs	r7, r2
10012324:	469a      	mov	sl, r3
10012326:	4c26      	ldr	r4, [pc, #152]	; (100123c0 <__aeabi_dsub+0x6a0>)
10012328:	e526      	b.n	10011d78 <__aeabi_dsub+0x58>
1001232a:	2200      	movs	r2, #0
1001232c:	2500      	movs	r5, #0
1001232e:	e544      	b.n	10011dba <__aeabi_dsub+0x9a>
10012330:	4c23      	ldr	r4, [pc, #140]	; (100123c0 <__aeabi_dsub+0x6a0>)
10012332:	e521      	b.n	10011d78 <__aeabi_dsub+0x58>
10012334:	2000      	movs	r0, #0
10012336:	e749      	b.n	100121cc <__aeabi_dsub+0x4ac>
10012338:	2300      	movs	r3, #0
1001233a:	2500      	movs	r5, #0
1001233c:	e5bb      	b.n	10011eb6 <__aeabi_dsub+0x196>
1001233e:	464c      	mov	r4, r9
10012340:	003e      	movs	r6, r7
10012342:	3c20      	subs	r4, #32
10012344:	40e6      	lsrs	r6, r4
10012346:	464c      	mov	r4, r9
10012348:	46b4      	mov	ip, r6
1001234a:	2c20      	cmp	r4, #32
1001234c:	d031      	beq.n	100123b2 <__aeabi_dsub+0x692>
1001234e:	2440      	movs	r4, #64	; 0x40
10012350:	464e      	mov	r6, r9
10012352:	1ba6      	subs	r6, r4, r6
10012354:	40b7      	lsls	r7, r6
10012356:	433d      	orrs	r5, r7
10012358:	1e6c      	subs	r4, r5, #1
1001235a:	41a5      	sbcs	r5, r4
1001235c:	4664      	mov	r4, ip
1001235e:	432c      	orrs	r4, r5
10012360:	2700      	movs	r7, #0
10012362:	1b0d      	subs	r5, r1, r4
10012364:	e6e7      	b.n	10012136 <__aeabi_dsub+0x416>
10012366:	2280      	movs	r2, #128	; 0x80
10012368:	2300      	movs	r3, #0
1001236a:	0312      	lsls	r2, r2, #12
1001236c:	4c14      	ldr	r4, [pc, #80]	; (100123c0 <__aeabi_dsub+0x6a0>)
1001236e:	2500      	movs	r5, #0
10012370:	e5a1      	b.n	10011eb6 <__aeabi_dsub+0x196>
10012372:	433d      	orrs	r5, r7
10012374:	1e6f      	subs	r7, r5, #1
10012376:	41bd      	sbcs	r5, r7
10012378:	2700      	movs	r7, #0
1001237a:	b2ed      	uxtb	r5, r5
1001237c:	e760      	b.n	10012240 <__aeabi_dsub+0x520>
1001237e:	0007      	movs	r7, r0
10012380:	000d      	movs	r5, r1
10012382:	4c0f      	ldr	r4, [pc, #60]	; (100123c0 <__aeabi_dsub+0x6a0>)
10012384:	e4f8      	b.n	10011d78 <__aeabi_dsub+0x58>
10012386:	0007      	movs	r7, r0
10012388:	000d      	movs	r5, r1
1001238a:	e4f5      	b.n	10011d78 <__aeabi_dsub+0x58>
1001238c:	464e      	mov	r6, r9
1001238e:	003c      	movs	r4, r7
10012390:	3e20      	subs	r6, #32
10012392:	40f4      	lsrs	r4, r6
10012394:	46a0      	mov	r8, r4
10012396:	464c      	mov	r4, r9
10012398:	2c20      	cmp	r4, #32
1001239a:	d00e      	beq.n	100123ba <__aeabi_dsub+0x69a>
1001239c:	2440      	movs	r4, #64	; 0x40
1001239e:	464e      	mov	r6, r9
100123a0:	1ba4      	subs	r4, r4, r6
100123a2:	40a7      	lsls	r7, r4
100123a4:	433d      	orrs	r5, r7
100123a6:	1e6f      	subs	r7, r5, #1
100123a8:	41bd      	sbcs	r5, r7
100123aa:	4644      	mov	r4, r8
100123ac:	2700      	movs	r7, #0
100123ae:	4325      	orrs	r5, r4
100123b0:	e746      	b.n	10012240 <__aeabi_dsub+0x520>
100123b2:	2700      	movs	r7, #0
100123b4:	e7cf      	b.n	10012356 <__aeabi_dsub+0x636>
100123b6:	000d      	movs	r5, r1
100123b8:	e573      	b.n	10011ea2 <__aeabi_dsub+0x182>
100123ba:	2700      	movs	r7, #0
100123bc:	e7f2      	b.n	100123a4 <__aeabi_dsub+0x684>
100123be:	46c0      	nop			; (mov r8, r8)
100123c0:	000007ff 	.word	0x000007ff
100123c4:	ff7fffff 	.word	0xff7fffff

100123c8 <__aeabi_d2iz>:
100123c8:	030b      	lsls	r3, r1, #12
100123ca:	b530      	push	{r4, r5, lr}
100123cc:	4d13      	ldr	r5, [pc, #76]	; (1001241c <__aeabi_d2iz+0x54>)
100123ce:	0b1a      	lsrs	r2, r3, #12
100123d0:	004b      	lsls	r3, r1, #1
100123d2:	0d5b      	lsrs	r3, r3, #21
100123d4:	0fc9      	lsrs	r1, r1, #31
100123d6:	2400      	movs	r4, #0
100123d8:	42ab      	cmp	r3, r5
100123da:	dd11      	ble.n	10012400 <__aeabi_d2iz+0x38>
100123dc:	4c10      	ldr	r4, [pc, #64]	; (10012420 <__aeabi_d2iz+0x58>)
100123de:	42a3      	cmp	r3, r4
100123e0:	dc10      	bgt.n	10012404 <__aeabi_d2iz+0x3c>
100123e2:	2480      	movs	r4, #128	; 0x80
100123e4:	0364      	lsls	r4, r4, #13
100123e6:	4322      	orrs	r2, r4
100123e8:	4c0e      	ldr	r4, [pc, #56]	; (10012424 <__aeabi_d2iz+0x5c>)
100123ea:	1ae4      	subs	r4, r4, r3
100123ec:	2c1f      	cmp	r4, #31
100123ee:	dd0c      	ble.n	1001240a <__aeabi_d2iz+0x42>
100123f0:	480d      	ldr	r0, [pc, #52]	; (10012428 <__aeabi_d2iz+0x60>)
100123f2:	1ac3      	subs	r3, r0, r3
100123f4:	40da      	lsrs	r2, r3
100123f6:	0013      	movs	r3, r2
100123f8:	425c      	negs	r4, r3
100123fa:	2900      	cmp	r1, #0
100123fc:	d100      	bne.n	10012400 <__aeabi_d2iz+0x38>
100123fe:	001c      	movs	r4, r3
10012400:	0020      	movs	r0, r4
10012402:	bd30      	pop	{r4, r5, pc}
10012404:	4b09      	ldr	r3, [pc, #36]	; (1001242c <__aeabi_d2iz+0x64>)
10012406:	18cc      	adds	r4, r1, r3
10012408:	e7fa      	b.n	10012400 <__aeabi_d2iz+0x38>
1001240a:	40e0      	lsrs	r0, r4
1001240c:	4c08      	ldr	r4, [pc, #32]	; (10012430 <__aeabi_d2iz+0x68>)
1001240e:	46a4      	mov	ip, r4
10012410:	4463      	add	r3, ip
10012412:	409a      	lsls	r2, r3
10012414:	0013      	movs	r3, r2
10012416:	4303      	orrs	r3, r0
10012418:	e7ee      	b.n	100123f8 <__aeabi_d2iz+0x30>
1001241a:	46c0      	nop			; (mov r8, r8)
1001241c:	000003fe 	.word	0x000003fe
10012420:	0000041d 	.word	0x0000041d
10012424:	00000433 	.word	0x00000433
10012428:	00000413 	.word	0x00000413
1001242c:	7fffffff 	.word	0x7fffffff
10012430:	fffffbed 	.word	0xfffffbed

10012434 <__aeabi_ui2d>:
10012434:	b570      	push	{r4, r5, r6, lr}
10012436:	1e05      	subs	r5, r0, #0
10012438:	d028      	beq.n	1001248c <__aeabi_ui2d+0x58>
1001243a:	f000 f833 	bl	100124a4 <__clzsi2>
1001243e:	4b15      	ldr	r3, [pc, #84]	; (10012494 <__aeabi_ui2d+0x60>)
10012440:	4a15      	ldr	r2, [pc, #84]	; (10012498 <__aeabi_ui2d+0x64>)
10012442:	1a1b      	subs	r3, r3, r0
10012444:	1ad2      	subs	r2, r2, r3
10012446:	2a1f      	cmp	r2, #31
10012448:	dd16      	ble.n	10012478 <__aeabi_ui2d+0x44>
1001244a:	002c      	movs	r4, r5
1001244c:	4a13      	ldr	r2, [pc, #76]	; (1001249c <__aeabi_ui2d+0x68>)
1001244e:	2500      	movs	r5, #0
10012450:	1ad2      	subs	r2, r2, r3
10012452:	4094      	lsls	r4, r2
10012454:	055a      	lsls	r2, r3, #21
10012456:	0324      	lsls	r4, r4, #12
10012458:	0b24      	lsrs	r4, r4, #12
1001245a:	0d52      	lsrs	r2, r2, #21
1001245c:	2100      	movs	r1, #0
1001245e:	0324      	lsls	r4, r4, #12
10012460:	0d0b      	lsrs	r3, r1, #20
10012462:	0b24      	lsrs	r4, r4, #12
10012464:	051b      	lsls	r3, r3, #20
10012466:	4323      	orrs	r3, r4
10012468:	4c0d      	ldr	r4, [pc, #52]	; (100124a0 <__aeabi_ui2d+0x6c>)
1001246a:	0512      	lsls	r2, r2, #20
1001246c:	4023      	ands	r3, r4
1001246e:	4313      	orrs	r3, r2
10012470:	005b      	lsls	r3, r3, #1
10012472:	0028      	movs	r0, r5
10012474:	0859      	lsrs	r1, r3, #1
10012476:	bd70      	pop	{r4, r5, r6, pc}
10012478:	210b      	movs	r1, #11
1001247a:	002c      	movs	r4, r5
1001247c:	1a08      	subs	r0, r1, r0
1001247e:	40c4      	lsrs	r4, r0
10012480:	4095      	lsls	r5, r2
10012482:	0324      	lsls	r4, r4, #12
10012484:	055a      	lsls	r2, r3, #21
10012486:	0b24      	lsrs	r4, r4, #12
10012488:	0d52      	lsrs	r2, r2, #21
1001248a:	e7e7      	b.n	1001245c <__aeabi_ui2d+0x28>
1001248c:	2200      	movs	r2, #0
1001248e:	2400      	movs	r4, #0
10012490:	e7e4      	b.n	1001245c <__aeabi_ui2d+0x28>
10012492:	46c0      	nop			; (mov r8, r8)
10012494:	0000041e 	.word	0x0000041e
10012498:	00000433 	.word	0x00000433
1001249c:	00000413 	.word	0x00000413
100124a0:	800fffff 	.word	0x800fffff

100124a4 <__clzsi2>:
100124a4:	211c      	movs	r1, #28
100124a6:	2301      	movs	r3, #1
100124a8:	041b      	lsls	r3, r3, #16
100124aa:	4298      	cmp	r0, r3
100124ac:	d301      	bcc.n	100124b2 <__clzsi2+0xe>
100124ae:	0c00      	lsrs	r0, r0, #16
100124b0:	3910      	subs	r1, #16
100124b2:	0a1b      	lsrs	r3, r3, #8
100124b4:	4298      	cmp	r0, r3
100124b6:	d301      	bcc.n	100124bc <__clzsi2+0x18>
100124b8:	0a00      	lsrs	r0, r0, #8
100124ba:	3908      	subs	r1, #8
100124bc:	091b      	lsrs	r3, r3, #4
100124be:	4298      	cmp	r0, r3
100124c0:	d301      	bcc.n	100124c6 <__clzsi2+0x22>
100124c2:	0900      	lsrs	r0, r0, #4
100124c4:	3904      	subs	r1, #4
100124c6:	a202      	add	r2, pc, #8	; (adr r2, 100124d0 <__clzsi2+0x2c>)
100124c8:	5c10      	ldrb	r0, [r2, r0]
100124ca:	1840      	adds	r0, r0, r1
100124cc:	4770      	bx	lr
100124ce:	46c0      	nop			; (mov r8, r8)
100124d0:	02020304 	.word	0x02020304
100124d4:	01010101 	.word	0x01010101
	...

100124e0 <__libc_init_array>:
100124e0:	4b0e      	ldr	r3, [pc, #56]	; (1001251c <__libc_init_array+0x3c>)
100124e2:	b570      	push	{r4, r5, r6, lr}
100124e4:	2500      	movs	r5, #0
100124e6:	001e      	movs	r6, r3
100124e8:	4c0d      	ldr	r4, [pc, #52]	; (10012520 <__libc_init_array+0x40>)
100124ea:	1ae4      	subs	r4, r4, r3
100124ec:	10a4      	asrs	r4, r4, #2
100124ee:	42a5      	cmp	r5, r4
100124f0:	d004      	beq.n	100124fc <__libc_init_array+0x1c>
100124f2:	00ab      	lsls	r3, r5, #2
100124f4:	58f3      	ldr	r3, [r6, r3]
100124f6:	4798      	blx	r3
100124f8:	3501      	adds	r5, #1
100124fa:	e7f8      	b.n	100124ee <__libc_init_array+0xe>
100124fc:	f002 ff1c 	bl	10015338 <_init>
10012500:	4b08      	ldr	r3, [pc, #32]	; (10012524 <__libc_init_array+0x44>)
10012502:	2500      	movs	r5, #0
10012504:	001e      	movs	r6, r3
10012506:	4c08      	ldr	r4, [pc, #32]	; (10012528 <__libc_init_array+0x48>)
10012508:	1ae4      	subs	r4, r4, r3
1001250a:	10a4      	asrs	r4, r4, #2
1001250c:	42a5      	cmp	r5, r4
1001250e:	d004      	beq.n	1001251a <__libc_init_array+0x3a>
10012510:	00ab      	lsls	r3, r5, #2
10012512:	58f3      	ldr	r3, [r6, r3]
10012514:	4798      	blx	r3
10012516:	3501      	adds	r5, #1
10012518:	e7f8      	b.n	1001250c <__libc_init_array+0x2c>
1001251a:	bd70      	pop	{r4, r5, r6, pc}
1001251c:	10015344 	.word	0x10015344
10012520:	10015344 	.word	0x10015344
10012524:	10015344 	.word	0x10015344
10012528:	10015348 	.word	0x10015348

1001252c <malloc>:
1001252c:	b510      	push	{r4, lr}
1001252e:	4b03      	ldr	r3, [pc, #12]	; (1001253c <malloc+0x10>)
10012530:	0001      	movs	r1, r0
10012532:	6818      	ldr	r0, [r3, #0]
10012534:	f000 f86a 	bl	1001260c <_malloc_r>
10012538:	bd10      	pop	{r4, pc}
1001253a:	46c0      	nop			; (mov r8, r8)
1001253c:	10015400 	.word	0x10015400

10012540 <memcmp>:
10012540:	b530      	push	{r4, r5, lr}
10012542:	2400      	movs	r4, #0
10012544:	42a2      	cmp	r2, r4
10012546:	d008      	beq.n	1001255a <memcmp+0x1a>
10012548:	5d03      	ldrb	r3, [r0, r4]
1001254a:	1c65      	adds	r5, r4, #1
1001254c:	5d0c      	ldrb	r4, [r1, r4]
1001254e:	42a3      	cmp	r3, r4
10012550:	d001      	beq.n	10012556 <memcmp+0x16>
10012552:	1b18      	subs	r0, r3, r4
10012554:	e002      	b.n	1001255c <memcmp+0x1c>
10012556:	002c      	movs	r4, r5
10012558:	e7f4      	b.n	10012544 <memcmp+0x4>
1001255a:	2000      	movs	r0, #0
1001255c:	bd30      	pop	{r4, r5, pc}

1001255e <memcpy>:
1001255e:	2300      	movs	r3, #0
10012560:	b510      	push	{r4, lr}
10012562:	429a      	cmp	r2, r3
10012564:	d003      	beq.n	1001256e <memcpy+0x10>
10012566:	5ccc      	ldrb	r4, [r1, r3]
10012568:	54c4      	strb	r4, [r0, r3]
1001256a:	3301      	adds	r3, #1
1001256c:	e7f9      	b.n	10012562 <memcpy+0x4>
1001256e:	bd10      	pop	{r4, pc}

10012570 <memset>:
10012570:	0003      	movs	r3, r0
10012572:	1882      	adds	r2, r0, r2
10012574:	4293      	cmp	r3, r2
10012576:	d002      	beq.n	1001257e <memset+0xe>
10012578:	7019      	strb	r1, [r3, #0]
1001257a:	3301      	adds	r3, #1
1001257c:	e7fa      	b.n	10012574 <memset+0x4>
1001257e:	4770      	bx	lr

10012580 <_free_r>:
10012580:	b530      	push	{r4, r5, lr}
10012582:	2900      	cmp	r1, #0
10012584:	d03e      	beq.n	10012604 <_free_r+0x84>
10012586:	3904      	subs	r1, #4
10012588:	680b      	ldr	r3, [r1, #0]
1001258a:	2b00      	cmp	r3, #0
1001258c:	da00      	bge.n	10012590 <_free_r+0x10>
1001258e:	18c9      	adds	r1, r1, r3
10012590:	4a1d      	ldr	r2, [pc, #116]	; (10012608 <_free_r+0x88>)
10012592:	6813      	ldr	r3, [r2, #0]
10012594:	0014      	movs	r4, r2
10012596:	2b00      	cmp	r3, #0
10012598:	d102      	bne.n	100125a0 <_free_r+0x20>
1001259a:	604b      	str	r3, [r1, #4]
1001259c:	6011      	str	r1, [r2, #0]
1001259e:	e031      	b.n	10012604 <_free_r+0x84>
100125a0:	428b      	cmp	r3, r1
100125a2:	d90d      	bls.n	100125c0 <_free_r+0x40>
100125a4:	680a      	ldr	r2, [r1, #0]
100125a6:	1888      	adds	r0, r1, r2
100125a8:	4283      	cmp	r3, r0
100125aa:	d103      	bne.n	100125b4 <_free_r+0x34>
100125ac:	6818      	ldr	r0, [r3, #0]
100125ae:	685b      	ldr	r3, [r3, #4]
100125b0:	1882      	adds	r2, r0, r2
100125b2:	600a      	str	r2, [r1, #0]
100125b4:	604b      	str	r3, [r1, #4]
100125b6:	6021      	str	r1, [r4, #0]
100125b8:	e024      	b.n	10012604 <_free_r+0x84>
100125ba:	428a      	cmp	r2, r1
100125bc:	d803      	bhi.n	100125c6 <_free_r+0x46>
100125be:	0013      	movs	r3, r2
100125c0:	685a      	ldr	r2, [r3, #4]
100125c2:	2a00      	cmp	r2, #0
100125c4:	d1f9      	bne.n	100125ba <_free_r+0x3a>
100125c6:	681d      	ldr	r5, [r3, #0]
100125c8:	195c      	adds	r4, r3, r5
100125ca:	428c      	cmp	r4, r1
100125cc:	d10b      	bne.n	100125e6 <_free_r+0x66>
100125ce:	6809      	ldr	r1, [r1, #0]
100125d0:	1869      	adds	r1, r5, r1
100125d2:	1858      	adds	r0, r3, r1
100125d4:	6019      	str	r1, [r3, #0]
100125d6:	4282      	cmp	r2, r0
100125d8:	d114      	bne.n	10012604 <_free_r+0x84>
100125da:	6810      	ldr	r0, [r2, #0]
100125dc:	6852      	ldr	r2, [r2, #4]
100125de:	1841      	adds	r1, r0, r1
100125e0:	6019      	str	r1, [r3, #0]
100125e2:	605a      	str	r2, [r3, #4]
100125e4:	e00e      	b.n	10012604 <_free_r+0x84>
100125e6:	428c      	cmp	r4, r1
100125e8:	d902      	bls.n	100125f0 <_free_r+0x70>
100125ea:	230c      	movs	r3, #12
100125ec:	6003      	str	r3, [r0, #0]
100125ee:	e009      	b.n	10012604 <_free_r+0x84>
100125f0:	6808      	ldr	r0, [r1, #0]
100125f2:	180c      	adds	r4, r1, r0
100125f4:	42a2      	cmp	r2, r4
100125f6:	d103      	bne.n	10012600 <_free_r+0x80>
100125f8:	6814      	ldr	r4, [r2, #0]
100125fa:	6852      	ldr	r2, [r2, #4]
100125fc:	1820      	adds	r0, r4, r0
100125fe:	6008      	str	r0, [r1, #0]
10012600:	604a      	str	r2, [r1, #4]
10012602:	6059      	str	r1, [r3, #4]
10012604:	bd30      	pop	{r4, r5, pc}
10012606:	46c0      	nop			; (mov r8, r8)
10012608:	10016ec4 	.word	0x10016ec4

1001260c <_malloc_r>:
1001260c:	2303      	movs	r3, #3
1001260e:	b570      	push	{r4, r5, r6, lr}
10012610:	1ccd      	adds	r5, r1, #3
10012612:	439d      	bics	r5, r3
10012614:	3508      	adds	r5, #8
10012616:	0006      	movs	r6, r0
10012618:	2d0c      	cmp	r5, #12
1001261a:	d201      	bcs.n	10012620 <_malloc_r+0x14>
1001261c:	250c      	movs	r5, #12
1001261e:	e005      	b.n	1001262c <_malloc_r+0x20>
10012620:	2d00      	cmp	r5, #0
10012622:	da03      	bge.n	1001262c <_malloc_r+0x20>
10012624:	230c      	movs	r3, #12
10012626:	2000      	movs	r0, #0
10012628:	6033      	str	r3, [r6, #0]
1001262a:	e040      	b.n	100126ae <_malloc_r+0xa2>
1001262c:	42a9      	cmp	r1, r5
1001262e:	d8f9      	bhi.n	10012624 <_malloc_r+0x18>
10012630:	4b1f      	ldr	r3, [pc, #124]	; (100126b0 <_malloc_r+0xa4>)
10012632:	681c      	ldr	r4, [r3, #0]
10012634:	001a      	movs	r2, r3
10012636:	0021      	movs	r1, r4
10012638:	2900      	cmp	r1, #0
1001263a:	d013      	beq.n	10012664 <_malloc_r+0x58>
1001263c:	680b      	ldr	r3, [r1, #0]
1001263e:	1b5b      	subs	r3, r3, r5
10012640:	d40d      	bmi.n	1001265e <_malloc_r+0x52>
10012642:	2b0b      	cmp	r3, #11
10012644:	d902      	bls.n	1001264c <_malloc_r+0x40>
10012646:	600b      	str	r3, [r1, #0]
10012648:	18cc      	adds	r4, r1, r3
1001264a:	e01e      	b.n	1001268a <_malloc_r+0x7e>
1001264c:	428c      	cmp	r4, r1
1001264e:	d102      	bne.n	10012656 <_malloc_r+0x4a>
10012650:	6863      	ldr	r3, [r4, #4]
10012652:	6013      	str	r3, [r2, #0]
10012654:	e01a      	b.n	1001268c <_malloc_r+0x80>
10012656:	684b      	ldr	r3, [r1, #4]
10012658:	6063      	str	r3, [r4, #4]
1001265a:	000c      	movs	r4, r1
1001265c:	e016      	b.n	1001268c <_malloc_r+0x80>
1001265e:	000c      	movs	r4, r1
10012660:	6849      	ldr	r1, [r1, #4]
10012662:	e7e9      	b.n	10012638 <_malloc_r+0x2c>
10012664:	4c13      	ldr	r4, [pc, #76]	; (100126b4 <_malloc_r+0xa8>)
10012666:	6823      	ldr	r3, [r4, #0]
10012668:	2b00      	cmp	r3, #0
1001266a:	d103      	bne.n	10012674 <_malloc_r+0x68>
1001266c:	0030      	movs	r0, r6
1001266e:	f000 f8f9 	bl	10012864 <_sbrk_r>
10012672:	6020      	str	r0, [r4, #0]
10012674:	0029      	movs	r1, r5
10012676:	0030      	movs	r0, r6
10012678:	f000 f8f4 	bl	10012864 <_sbrk_r>
1001267c:	1c43      	adds	r3, r0, #1
1001267e:	d0d1      	beq.n	10012624 <_malloc_r+0x18>
10012680:	2303      	movs	r3, #3
10012682:	1cc4      	adds	r4, r0, #3
10012684:	439c      	bics	r4, r3
10012686:	42a0      	cmp	r0, r4
10012688:	d10a      	bne.n	100126a0 <_malloc_r+0x94>
1001268a:	6025      	str	r5, [r4, #0]
1001268c:	0020      	movs	r0, r4
1001268e:	2207      	movs	r2, #7
10012690:	300b      	adds	r0, #11
10012692:	1d23      	adds	r3, r4, #4
10012694:	4390      	bics	r0, r2
10012696:	1ac3      	subs	r3, r0, r3
10012698:	d009      	beq.n	100126ae <_malloc_r+0xa2>
1001269a:	425a      	negs	r2, r3
1001269c:	50e2      	str	r2, [r4, r3]
1001269e:	e006      	b.n	100126ae <_malloc_r+0xa2>
100126a0:	1a21      	subs	r1, r4, r0
100126a2:	0030      	movs	r0, r6
100126a4:	f000 f8de 	bl	10012864 <_sbrk_r>
100126a8:	1c43      	adds	r3, r0, #1
100126aa:	d1ee      	bne.n	1001268a <_malloc_r+0x7e>
100126ac:	e7ba      	b.n	10012624 <_malloc_r+0x18>
100126ae:	bd70      	pop	{r4, r5, r6, pc}
100126b0:	10016ec4 	.word	0x10016ec4
100126b4:	10016ec0 	.word	0x10016ec0

100126b8 <iprintf>:
100126b8:	b40f      	push	{r0, r1, r2, r3}
100126ba:	4b0b      	ldr	r3, [pc, #44]	; (100126e8 <iprintf+0x30>)
100126bc:	b513      	push	{r0, r1, r4, lr}
100126be:	681c      	ldr	r4, [r3, #0]
100126c0:	2c00      	cmp	r4, #0
100126c2:	d005      	beq.n	100126d0 <iprintf+0x18>
100126c4:	69a3      	ldr	r3, [r4, #24]
100126c6:	2b00      	cmp	r3, #0
100126c8:	d102      	bne.n	100126d0 <iprintf+0x18>
100126ca:	0020      	movs	r0, r4
100126cc:	f000 fb58 	bl	10012d80 <__sinit>
100126d0:	ab05      	add	r3, sp, #20
100126d2:	9a04      	ldr	r2, [sp, #16]
100126d4:	68a1      	ldr	r1, [r4, #8]
100126d6:	0020      	movs	r0, r4
100126d8:	9301      	str	r3, [sp, #4]
100126da:	f000 fc71 	bl	10012fc0 <_vfiprintf_r>
100126de:	bc16      	pop	{r1, r2, r4}
100126e0:	bc08      	pop	{r3}
100126e2:	b004      	add	sp, #16
100126e4:	4718      	bx	r3
100126e6:	46c0      	nop			; (mov r8, r8)
100126e8:	10015400 	.word	0x10015400

100126ec <putchar>:
100126ec:	4b08      	ldr	r3, [pc, #32]	; (10012710 <putchar+0x24>)
100126ee:	b570      	push	{r4, r5, r6, lr}
100126f0:	681c      	ldr	r4, [r3, #0]
100126f2:	0005      	movs	r5, r0
100126f4:	2c00      	cmp	r4, #0
100126f6:	d005      	beq.n	10012704 <putchar+0x18>
100126f8:	69a3      	ldr	r3, [r4, #24]
100126fa:	2b00      	cmp	r3, #0
100126fc:	d102      	bne.n	10012704 <putchar+0x18>
100126fe:	0020      	movs	r0, r4
10012700:	f000 fb3e 	bl	10012d80 <__sinit>
10012704:	0029      	movs	r1, r5
10012706:	68a2      	ldr	r2, [r4, #8]
10012708:	0020      	movs	r0, r4
1001270a:	f000 ff05 	bl	10013518 <_putc_r>
1001270e:	bd70      	pop	{r4, r5, r6, pc}
10012710:	10015400 	.word	0x10015400

10012714 <_puts_r>:
10012714:	b570      	push	{r4, r5, r6, lr}
10012716:	0005      	movs	r5, r0
10012718:	000e      	movs	r6, r1
1001271a:	2800      	cmp	r0, #0
1001271c:	d004      	beq.n	10012728 <_puts_r+0x14>
1001271e:	6983      	ldr	r3, [r0, #24]
10012720:	2b00      	cmp	r3, #0
10012722:	d101      	bne.n	10012728 <_puts_r+0x14>
10012724:	f000 fb2c 	bl	10012d80 <__sinit>
10012728:	69ab      	ldr	r3, [r5, #24]
1001272a:	68ac      	ldr	r4, [r5, #8]
1001272c:	2b00      	cmp	r3, #0
1001272e:	d102      	bne.n	10012736 <_puts_r+0x22>
10012730:	0028      	movs	r0, r5
10012732:	f000 fb25 	bl	10012d80 <__sinit>
10012736:	4b25      	ldr	r3, [pc, #148]	; (100127cc <_puts_r+0xb8>)
10012738:	429c      	cmp	r4, r3
1001273a:	d101      	bne.n	10012740 <_puts_r+0x2c>
1001273c:	686c      	ldr	r4, [r5, #4]
1001273e:	e008      	b.n	10012752 <_puts_r+0x3e>
10012740:	4b23      	ldr	r3, [pc, #140]	; (100127d0 <_puts_r+0xbc>)
10012742:	429c      	cmp	r4, r3
10012744:	d101      	bne.n	1001274a <_puts_r+0x36>
10012746:	68ac      	ldr	r4, [r5, #8]
10012748:	e003      	b.n	10012752 <_puts_r+0x3e>
1001274a:	4b22      	ldr	r3, [pc, #136]	; (100127d4 <_puts_r+0xc0>)
1001274c:	429c      	cmp	r4, r3
1001274e:	d100      	bne.n	10012752 <_puts_r+0x3e>
10012750:	68ec      	ldr	r4, [r5, #12]
10012752:	89a3      	ldrh	r3, [r4, #12]
10012754:	071b      	lsls	r3, r3, #28
10012756:	d502      	bpl.n	1001275e <_puts_r+0x4a>
10012758:	6923      	ldr	r3, [r4, #16]
1001275a:	2b00      	cmp	r3, #0
1001275c:	d111      	bne.n	10012782 <_puts_r+0x6e>
1001275e:	0021      	movs	r1, r4
10012760:	0028      	movs	r0, r5
10012762:	f000 f9a3 	bl	10012aac <__swsetup_r>
10012766:	2800      	cmp	r0, #0
10012768:	d00b      	beq.n	10012782 <_puts_r+0x6e>
1001276a:	2001      	movs	r0, #1
1001276c:	4240      	negs	r0, r0
1001276e:	e02b      	b.n	100127c8 <_puts_r+0xb4>
10012770:	3b01      	subs	r3, #1
10012772:	3601      	adds	r6, #1
10012774:	60a3      	str	r3, [r4, #8]
10012776:	2b00      	cmp	r3, #0
10012778:	db08      	blt.n	1001278c <_puts_r+0x78>
1001277a:	6823      	ldr	r3, [r4, #0]
1001277c:	1c5a      	adds	r2, r3, #1
1001277e:	6022      	str	r2, [r4, #0]
10012780:	7019      	strb	r1, [r3, #0]
10012782:	7831      	ldrb	r1, [r6, #0]
10012784:	68a3      	ldr	r3, [r4, #8]
10012786:	2900      	cmp	r1, #0
10012788:	d1f2      	bne.n	10012770 <_puts_r+0x5c>
1001278a:	e00b      	b.n	100127a4 <_puts_r+0x90>
1001278c:	69a2      	ldr	r2, [r4, #24]
1001278e:	4293      	cmp	r3, r2
10012790:	db01      	blt.n	10012796 <_puts_r+0x82>
10012792:	290a      	cmp	r1, #10
10012794:	d1f1      	bne.n	1001277a <_puts_r+0x66>
10012796:	0022      	movs	r2, r4
10012798:	0028      	movs	r0, r5
1001279a:	f000 f92f 	bl	100129fc <__swbuf_r>
1001279e:	1c43      	adds	r3, r0, #1
100127a0:	d1ef      	bne.n	10012782 <_puts_r+0x6e>
100127a2:	e7e2      	b.n	1001276a <_puts_r+0x56>
100127a4:	3b01      	subs	r3, #1
100127a6:	60a3      	str	r3, [r4, #8]
100127a8:	2b00      	cmp	r3, #0
100127aa:	da08      	bge.n	100127be <_puts_r+0xaa>
100127ac:	0022      	movs	r2, r4
100127ae:	310a      	adds	r1, #10
100127b0:	0028      	movs	r0, r5
100127b2:	f000 f923 	bl	100129fc <__swbuf_r>
100127b6:	1c43      	adds	r3, r0, #1
100127b8:	d0d7      	beq.n	1001276a <_puts_r+0x56>
100127ba:	200a      	movs	r0, #10
100127bc:	e004      	b.n	100127c8 <_puts_r+0xb4>
100127be:	200a      	movs	r0, #10
100127c0:	6823      	ldr	r3, [r4, #0]
100127c2:	1c5a      	adds	r2, r3, #1
100127c4:	6022      	str	r2, [r4, #0]
100127c6:	7018      	strb	r0, [r3, #0]
100127c8:	bd70      	pop	{r4, r5, r6, pc}
100127ca:	46c0      	nop			; (mov r8, r8)
100127cc:	100152a4 	.word	0x100152a4
100127d0:	100152c4 	.word	0x100152c4
100127d4:	100152e4 	.word	0x100152e4

100127d8 <puts>:
100127d8:	b510      	push	{r4, lr}
100127da:	4b03      	ldr	r3, [pc, #12]	; (100127e8 <puts+0x10>)
100127dc:	0001      	movs	r1, r0
100127de:	6818      	ldr	r0, [r3, #0]
100127e0:	f7ff ff98 	bl	10012714 <_puts_r>
100127e4:	bd10      	pop	{r4, pc}
100127e6:	46c0      	nop			; (mov r8, r8)
100127e8:	10015400 	.word	0x10015400

100127ec <rand>:
100127ec:	4b15      	ldr	r3, [pc, #84]	; (10012844 <rand+0x58>)
100127ee:	b510      	push	{r4, lr}
100127f0:	681c      	ldr	r4, [r3, #0]
100127f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
100127f4:	2b00      	cmp	r3, #0
100127f6:	d115      	bne.n	10012824 <rand+0x38>
100127f8:	2018      	movs	r0, #24
100127fa:	f7ff fe97 	bl	1001252c <malloc>
100127fe:	4b12      	ldr	r3, [pc, #72]	; (10012848 <rand+0x5c>)
10012800:	63a0      	str	r0, [r4, #56]	; 0x38
10012802:	8003      	strh	r3, [r0, #0]
10012804:	4b11      	ldr	r3, [pc, #68]	; (1001284c <rand+0x60>)
10012806:	2201      	movs	r2, #1
10012808:	8043      	strh	r3, [r0, #2]
1001280a:	4b11      	ldr	r3, [pc, #68]	; (10012850 <rand+0x64>)
1001280c:	8083      	strh	r3, [r0, #4]
1001280e:	4b11      	ldr	r3, [pc, #68]	; (10012854 <rand+0x68>)
10012810:	80c3      	strh	r3, [r0, #6]
10012812:	4b11      	ldr	r3, [pc, #68]	; (10012858 <rand+0x6c>)
10012814:	8103      	strh	r3, [r0, #8]
10012816:	2305      	movs	r3, #5
10012818:	8143      	strh	r3, [r0, #10]
1001281a:	3306      	adds	r3, #6
1001281c:	8183      	strh	r3, [r0, #12]
1001281e:	2300      	movs	r3, #0
10012820:	6102      	str	r2, [r0, #16]
10012822:	6143      	str	r3, [r0, #20]
10012824:	6ba4      	ldr	r4, [r4, #56]	; 0x38
10012826:	4a0d      	ldr	r2, [pc, #52]	; (1001285c <rand+0x70>)
10012828:	6920      	ldr	r0, [r4, #16]
1001282a:	6961      	ldr	r1, [r4, #20]
1001282c:	4b0c      	ldr	r3, [pc, #48]	; (10012860 <rand+0x74>)
1001282e:	f7fe fea5 	bl	1001157c <__aeabi_lmul>
10012832:	2201      	movs	r2, #1
10012834:	2300      	movs	r3, #0
10012836:	1880      	adds	r0, r0, r2
10012838:	4159      	adcs	r1, r3
1001283a:	6120      	str	r0, [r4, #16]
1001283c:	6161      	str	r1, [r4, #20]
1001283e:	0048      	lsls	r0, r1, #1
10012840:	0840      	lsrs	r0, r0, #1
10012842:	bd10      	pop	{r4, pc}
10012844:	10015400 	.word	0x10015400
10012848:	0000330e 	.word	0x0000330e
1001284c:	ffffabcd 	.word	0xffffabcd
10012850:	00001234 	.word	0x00001234
10012854:	ffffe66d 	.word	0xffffe66d
10012858:	ffffdeec 	.word	0xffffdeec
1001285c:	4c957f2d 	.word	0x4c957f2d
10012860:	5851f42d 	.word	0x5851f42d

10012864 <_sbrk_r>:
10012864:	2300      	movs	r3, #0
10012866:	b570      	push	{r4, r5, r6, lr}
10012868:	4c06      	ldr	r4, [pc, #24]	; (10012884 <_sbrk_r+0x20>)
1001286a:	0005      	movs	r5, r0
1001286c:	0008      	movs	r0, r1
1001286e:	6023      	str	r3, [r4, #0]
10012870:	f7f9 fafc 	bl	1000be6c <_sbrk>
10012874:	1c43      	adds	r3, r0, #1
10012876:	d103      	bne.n	10012880 <_sbrk_r+0x1c>
10012878:	6823      	ldr	r3, [r4, #0]
1001287a:	2b00      	cmp	r3, #0
1001287c:	d000      	beq.n	10012880 <_sbrk_r+0x1c>
1001287e:	602b      	str	r3, [r5, #0]
10012880:	bd70      	pop	{r4, r5, r6, pc}
10012882:	46c0      	nop			; (mov r8, r8)
10012884:	10018200 	.word	0x10018200

10012888 <setbuf>:
10012888:	424a      	negs	r2, r1
1001288a:	414a      	adcs	r2, r1
1001288c:	2380      	movs	r3, #128	; 0x80
1001288e:	b510      	push	{r4, lr}
10012890:	0052      	lsls	r2, r2, #1
10012892:	00db      	lsls	r3, r3, #3
10012894:	f000 f802 	bl	1001289c <setvbuf>
10012898:	bd10      	pop	{r4, pc}
	...

1001289c <setvbuf>:
1001289c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001289e:	001d      	movs	r5, r3
100128a0:	4b51      	ldr	r3, [pc, #324]	; (100129e8 <setvbuf+0x14c>)
100128a2:	b085      	sub	sp, #20
100128a4:	681e      	ldr	r6, [r3, #0]
100128a6:	0004      	movs	r4, r0
100128a8:	000f      	movs	r7, r1
100128aa:	9200      	str	r2, [sp, #0]
100128ac:	2e00      	cmp	r6, #0
100128ae:	d005      	beq.n	100128bc <setvbuf+0x20>
100128b0:	69b3      	ldr	r3, [r6, #24]
100128b2:	2b00      	cmp	r3, #0
100128b4:	d102      	bne.n	100128bc <setvbuf+0x20>
100128b6:	0030      	movs	r0, r6
100128b8:	f000 fa62 	bl	10012d80 <__sinit>
100128bc:	4b4b      	ldr	r3, [pc, #300]	; (100129ec <setvbuf+0x150>)
100128be:	429c      	cmp	r4, r3
100128c0:	d101      	bne.n	100128c6 <setvbuf+0x2a>
100128c2:	6874      	ldr	r4, [r6, #4]
100128c4:	e008      	b.n	100128d8 <setvbuf+0x3c>
100128c6:	4b4a      	ldr	r3, [pc, #296]	; (100129f0 <setvbuf+0x154>)
100128c8:	429c      	cmp	r4, r3
100128ca:	d101      	bne.n	100128d0 <setvbuf+0x34>
100128cc:	68b4      	ldr	r4, [r6, #8]
100128ce:	e003      	b.n	100128d8 <setvbuf+0x3c>
100128d0:	4b48      	ldr	r3, [pc, #288]	; (100129f4 <setvbuf+0x158>)
100128d2:	429c      	cmp	r4, r3
100128d4:	d100      	bne.n	100128d8 <setvbuf+0x3c>
100128d6:	68f4      	ldr	r4, [r6, #12]
100128d8:	9b00      	ldr	r3, [sp, #0]
100128da:	2b02      	cmp	r3, #2
100128dc:	d005      	beq.n	100128ea <setvbuf+0x4e>
100128de:	2b01      	cmp	r3, #1
100128e0:	d900      	bls.n	100128e4 <setvbuf+0x48>
100128e2:	e07c      	b.n	100129de <setvbuf+0x142>
100128e4:	2d00      	cmp	r5, #0
100128e6:	da00      	bge.n	100128ea <setvbuf+0x4e>
100128e8:	e079      	b.n	100129de <setvbuf+0x142>
100128ea:	0021      	movs	r1, r4
100128ec:	0030      	movs	r0, r6
100128ee:	f000 f9d9 	bl	10012ca4 <_fflush_r>
100128f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
100128f4:	2900      	cmp	r1, #0
100128f6:	d008      	beq.n	1001290a <setvbuf+0x6e>
100128f8:	0023      	movs	r3, r4
100128fa:	3344      	adds	r3, #68	; 0x44
100128fc:	4299      	cmp	r1, r3
100128fe:	d002      	beq.n	10012906 <setvbuf+0x6a>
10012900:	0030      	movs	r0, r6
10012902:	f7ff fe3d 	bl	10012580 <_free_r>
10012906:	2300      	movs	r3, #0
10012908:	6363      	str	r3, [r4, #52]	; 0x34
1001290a:	2300      	movs	r3, #0
1001290c:	61a3      	str	r3, [r4, #24]
1001290e:	6063      	str	r3, [r4, #4]
10012910:	89a3      	ldrh	r3, [r4, #12]
10012912:	061b      	lsls	r3, r3, #24
10012914:	d503      	bpl.n	1001291e <setvbuf+0x82>
10012916:	6921      	ldr	r1, [r4, #16]
10012918:	0030      	movs	r0, r6
1001291a:	f7ff fe31 	bl	10012580 <_free_r>
1001291e:	89a2      	ldrh	r2, [r4, #12]
10012920:	4b35      	ldr	r3, [pc, #212]	; (100129f8 <setvbuf+0x15c>)
10012922:	4013      	ands	r3, r2
10012924:	81a3      	strh	r3, [r4, #12]
10012926:	9b00      	ldr	r3, [sp, #0]
10012928:	2b02      	cmp	r3, #2
1001292a:	d021      	beq.n	10012970 <setvbuf+0xd4>
1001292c:	ab03      	add	r3, sp, #12
1001292e:	aa02      	add	r2, sp, #8
10012930:	0021      	movs	r1, r4
10012932:	0030      	movs	r0, r6
10012934:	f000 fab8 	bl	10012ea8 <__swhatbuf_r>
10012938:	89a3      	ldrh	r3, [r4, #12]
1001293a:	4318      	orrs	r0, r3
1001293c:	81a0      	strh	r0, [r4, #12]
1001293e:	2d00      	cmp	r5, #0
10012940:	d101      	bne.n	10012946 <setvbuf+0xaa>
10012942:	9d02      	ldr	r5, [sp, #8]
10012944:	e001      	b.n	1001294a <setvbuf+0xae>
10012946:	2f00      	cmp	r7, #0
10012948:	d125      	bne.n	10012996 <setvbuf+0xfa>
1001294a:	0028      	movs	r0, r5
1001294c:	f7ff fdee 	bl	1001252c <malloc>
10012950:	9501      	str	r5, [sp, #4]
10012952:	1e07      	subs	r7, r0, #0
10012954:	d11a      	bne.n	1001298c <setvbuf+0xf0>
10012956:	9b02      	ldr	r3, [sp, #8]
10012958:	9301      	str	r3, [sp, #4]
1001295a:	42ab      	cmp	r3, r5
1001295c:	d102      	bne.n	10012964 <setvbuf+0xc8>
1001295e:	2001      	movs	r0, #1
10012960:	4240      	negs	r0, r0
10012962:	e006      	b.n	10012972 <setvbuf+0xd6>
10012964:	9801      	ldr	r0, [sp, #4]
10012966:	f7ff fde1 	bl	1001252c <malloc>
1001296a:	1e07      	subs	r7, r0, #0
1001296c:	d10e      	bne.n	1001298c <setvbuf+0xf0>
1001296e:	e7f6      	b.n	1001295e <setvbuf+0xc2>
10012970:	2000      	movs	r0, #0
10012972:	2202      	movs	r2, #2
10012974:	89a3      	ldrh	r3, [r4, #12]
10012976:	4313      	orrs	r3, r2
10012978:	81a3      	strh	r3, [r4, #12]
1001297a:	2300      	movs	r3, #0
1001297c:	60a3      	str	r3, [r4, #8]
1001297e:	0023      	movs	r3, r4
10012980:	3347      	adds	r3, #71	; 0x47
10012982:	6023      	str	r3, [r4, #0]
10012984:	6123      	str	r3, [r4, #16]
10012986:	2301      	movs	r3, #1
10012988:	6163      	str	r3, [r4, #20]
1001298a:	e02a      	b.n	100129e2 <setvbuf+0x146>
1001298c:	2280      	movs	r2, #128	; 0x80
1001298e:	89a3      	ldrh	r3, [r4, #12]
10012990:	9d01      	ldr	r5, [sp, #4]
10012992:	4313      	orrs	r3, r2
10012994:	81a3      	strh	r3, [r4, #12]
10012996:	69b3      	ldr	r3, [r6, #24]
10012998:	2b00      	cmp	r3, #0
1001299a:	d102      	bne.n	100129a2 <setvbuf+0x106>
1001299c:	0030      	movs	r0, r6
1001299e:	f000 f9ef 	bl	10012d80 <__sinit>
100129a2:	9b00      	ldr	r3, [sp, #0]
100129a4:	2b01      	cmp	r3, #1
100129a6:	d103      	bne.n	100129b0 <setvbuf+0x114>
100129a8:	89a3      	ldrh	r3, [r4, #12]
100129aa:	9a00      	ldr	r2, [sp, #0]
100129ac:	431a      	orrs	r2, r3
100129ae:	81a2      	strh	r2, [r4, #12]
100129b0:	2308      	movs	r3, #8
100129b2:	89a2      	ldrh	r2, [r4, #12]
100129b4:	6027      	str	r7, [r4, #0]
100129b6:	4013      	ands	r3, r2
100129b8:	6127      	str	r7, [r4, #16]
100129ba:	6165      	str	r5, [r4, #20]
100129bc:	1e18      	subs	r0, r3, #0
100129be:	d00c      	beq.n	100129da <setvbuf+0x13e>
100129c0:	2301      	movs	r3, #1
100129c2:	401a      	ands	r2, r3
100129c4:	2300      	movs	r3, #0
100129c6:	1e10      	subs	r0, r2, #0
100129c8:	4298      	cmp	r0, r3
100129ca:	d004      	beq.n	100129d6 <setvbuf+0x13a>
100129cc:	426d      	negs	r5, r5
100129ce:	60a3      	str	r3, [r4, #8]
100129d0:	61a5      	str	r5, [r4, #24]
100129d2:	0018      	movs	r0, r3
100129d4:	e005      	b.n	100129e2 <setvbuf+0x146>
100129d6:	60a5      	str	r5, [r4, #8]
100129d8:	e003      	b.n	100129e2 <setvbuf+0x146>
100129da:	60a3      	str	r3, [r4, #8]
100129dc:	e001      	b.n	100129e2 <setvbuf+0x146>
100129de:	2001      	movs	r0, #1
100129e0:	4240      	negs	r0, r0
100129e2:	b005      	add	sp, #20
100129e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100129e6:	46c0      	nop			; (mov r8, r8)
100129e8:	10015400 	.word	0x10015400
100129ec:	100152a4 	.word	0x100152a4
100129f0:	100152c4 	.word	0x100152c4
100129f4:	100152e4 	.word	0x100152e4
100129f8:	fffff35c 	.word	0xfffff35c

100129fc <__swbuf_r>:
100129fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100129fe:	0005      	movs	r5, r0
10012a00:	000f      	movs	r7, r1
10012a02:	0014      	movs	r4, r2
10012a04:	2800      	cmp	r0, #0
10012a06:	d004      	beq.n	10012a12 <__swbuf_r+0x16>
10012a08:	6983      	ldr	r3, [r0, #24]
10012a0a:	2b00      	cmp	r3, #0
10012a0c:	d101      	bne.n	10012a12 <__swbuf_r+0x16>
10012a0e:	f000 f9b7 	bl	10012d80 <__sinit>
10012a12:	4b23      	ldr	r3, [pc, #140]	; (10012aa0 <__swbuf_r+0xa4>)
10012a14:	429c      	cmp	r4, r3
10012a16:	d101      	bne.n	10012a1c <__swbuf_r+0x20>
10012a18:	686c      	ldr	r4, [r5, #4]
10012a1a:	e008      	b.n	10012a2e <__swbuf_r+0x32>
10012a1c:	4b21      	ldr	r3, [pc, #132]	; (10012aa4 <__swbuf_r+0xa8>)
10012a1e:	429c      	cmp	r4, r3
10012a20:	d101      	bne.n	10012a26 <__swbuf_r+0x2a>
10012a22:	68ac      	ldr	r4, [r5, #8]
10012a24:	e003      	b.n	10012a2e <__swbuf_r+0x32>
10012a26:	4b20      	ldr	r3, [pc, #128]	; (10012aa8 <__swbuf_r+0xac>)
10012a28:	429c      	cmp	r4, r3
10012a2a:	d100      	bne.n	10012a2e <__swbuf_r+0x32>
10012a2c:	68ec      	ldr	r4, [r5, #12]
10012a2e:	69a3      	ldr	r3, [r4, #24]
10012a30:	60a3      	str	r3, [r4, #8]
10012a32:	89a3      	ldrh	r3, [r4, #12]
10012a34:	071b      	lsls	r3, r3, #28
10012a36:	d50a      	bpl.n	10012a4e <__swbuf_r+0x52>
10012a38:	6923      	ldr	r3, [r4, #16]
10012a3a:	2b00      	cmp	r3, #0
10012a3c:	d007      	beq.n	10012a4e <__swbuf_r+0x52>
10012a3e:	6823      	ldr	r3, [r4, #0]
10012a40:	6922      	ldr	r2, [r4, #16]
10012a42:	b2fe      	uxtb	r6, r7
10012a44:	1a98      	subs	r0, r3, r2
10012a46:	6963      	ldr	r3, [r4, #20]
10012a48:	4298      	cmp	r0, r3
10012a4a:	db0f      	blt.n	10012a6c <__swbuf_r+0x70>
10012a4c:	e008      	b.n	10012a60 <__swbuf_r+0x64>
10012a4e:	0021      	movs	r1, r4
10012a50:	0028      	movs	r0, r5
10012a52:	f000 f82b 	bl	10012aac <__swsetup_r>
10012a56:	2800      	cmp	r0, #0
10012a58:	d0f1      	beq.n	10012a3e <__swbuf_r+0x42>
10012a5a:	2001      	movs	r0, #1
10012a5c:	4240      	negs	r0, r0
10012a5e:	e01d      	b.n	10012a9c <__swbuf_r+0xa0>
10012a60:	0021      	movs	r1, r4
10012a62:	0028      	movs	r0, r5
10012a64:	f000 f91e 	bl	10012ca4 <_fflush_r>
10012a68:	2800      	cmp	r0, #0
10012a6a:	d1f6      	bne.n	10012a5a <__swbuf_r+0x5e>
10012a6c:	68a3      	ldr	r3, [r4, #8]
10012a6e:	3001      	adds	r0, #1
10012a70:	3b01      	subs	r3, #1
10012a72:	60a3      	str	r3, [r4, #8]
10012a74:	6823      	ldr	r3, [r4, #0]
10012a76:	1c5a      	adds	r2, r3, #1
10012a78:	6022      	str	r2, [r4, #0]
10012a7a:	701f      	strb	r7, [r3, #0]
10012a7c:	6963      	ldr	r3, [r4, #20]
10012a7e:	4298      	cmp	r0, r3
10012a80:	d005      	beq.n	10012a8e <__swbuf_r+0x92>
10012a82:	89a3      	ldrh	r3, [r4, #12]
10012a84:	0030      	movs	r0, r6
10012a86:	07db      	lsls	r3, r3, #31
10012a88:	d508      	bpl.n	10012a9c <__swbuf_r+0xa0>
10012a8a:	2e0a      	cmp	r6, #10
10012a8c:	d106      	bne.n	10012a9c <__swbuf_r+0xa0>
10012a8e:	0021      	movs	r1, r4
10012a90:	0028      	movs	r0, r5
10012a92:	f000 f907 	bl	10012ca4 <_fflush_r>
10012a96:	2800      	cmp	r0, #0
10012a98:	d1df      	bne.n	10012a5a <__swbuf_r+0x5e>
10012a9a:	0030      	movs	r0, r6
10012a9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10012a9e:	46c0      	nop			; (mov r8, r8)
10012aa0:	100152a4 	.word	0x100152a4
10012aa4:	100152c4 	.word	0x100152c4
10012aa8:	100152e4 	.word	0x100152e4

10012aac <__swsetup_r>:
10012aac:	4b36      	ldr	r3, [pc, #216]	; (10012b88 <__swsetup_r+0xdc>)
10012aae:	b570      	push	{r4, r5, r6, lr}
10012ab0:	681d      	ldr	r5, [r3, #0]
10012ab2:	0006      	movs	r6, r0
10012ab4:	000c      	movs	r4, r1
10012ab6:	2d00      	cmp	r5, #0
10012ab8:	d005      	beq.n	10012ac6 <__swsetup_r+0x1a>
10012aba:	69ab      	ldr	r3, [r5, #24]
10012abc:	2b00      	cmp	r3, #0
10012abe:	d102      	bne.n	10012ac6 <__swsetup_r+0x1a>
10012ac0:	0028      	movs	r0, r5
10012ac2:	f000 f95d 	bl	10012d80 <__sinit>
10012ac6:	4b31      	ldr	r3, [pc, #196]	; (10012b8c <__swsetup_r+0xe0>)
10012ac8:	429c      	cmp	r4, r3
10012aca:	d101      	bne.n	10012ad0 <__swsetup_r+0x24>
10012acc:	686c      	ldr	r4, [r5, #4]
10012ace:	e008      	b.n	10012ae2 <__swsetup_r+0x36>
10012ad0:	4b2f      	ldr	r3, [pc, #188]	; (10012b90 <__swsetup_r+0xe4>)
10012ad2:	429c      	cmp	r4, r3
10012ad4:	d101      	bne.n	10012ada <__swsetup_r+0x2e>
10012ad6:	68ac      	ldr	r4, [r5, #8]
10012ad8:	e003      	b.n	10012ae2 <__swsetup_r+0x36>
10012ada:	4b2e      	ldr	r3, [pc, #184]	; (10012b94 <__swsetup_r+0xe8>)
10012adc:	429c      	cmp	r4, r3
10012ade:	d100      	bne.n	10012ae2 <__swsetup_r+0x36>
10012ae0:	68ec      	ldr	r4, [r5, #12]
10012ae2:	220c      	movs	r2, #12
10012ae4:	5ea3      	ldrsh	r3, [r4, r2]
10012ae6:	b29a      	uxth	r2, r3
10012ae8:	0711      	lsls	r1, r2, #28
10012aea:	d423      	bmi.n	10012b34 <__swsetup_r+0x88>
10012aec:	06d1      	lsls	r1, r2, #27
10012aee:	d407      	bmi.n	10012b00 <__swsetup_r+0x54>
10012af0:	2209      	movs	r2, #9
10012af2:	2001      	movs	r0, #1
10012af4:	6032      	str	r2, [r6, #0]
10012af6:	3237      	adds	r2, #55	; 0x37
10012af8:	4313      	orrs	r3, r2
10012afa:	81a3      	strh	r3, [r4, #12]
10012afc:	4240      	negs	r0, r0
10012afe:	e042      	b.n	10012b86 <__swsetup_r+0xda>
10012b00:	0753      	lsls	r3, r2, #29
10012b02:	d513      	bpl.n	10012b2c <__swsetup_r+0x80>
10012b04:	6b61      	ldr	r1, [r4, #52]	; 0x34
10012b06:	2900      	cmp	r1, #0
10012b08:	d008      	beq.n	10012b1c <__swsetup_r+0x70>
10012b0a:	0023      	movs	r3, r4
10012b0c:	3344      	adds	r3, #68	; 0x44
10012b0e:	4299      	cmp	r1, r3
10012b10:	d002      	beq.n	10012b18 <__swsetup_r+0x6c>
10012b12:	0030      	movs	r0, r6
10012b14:	f7ff fd34 	bl	10012580 <_free_r>
10012b18:	2300      	movs	r3, #0
10012b1a:	6363      	str	r3, [r4, #52]	; 0x34
10012b1c:	2224      	movs	r2, #36	; 0x24
10012b1e:	89a3      	ldrh	r3, [r4, #12]
10012b20:	4393      	bics	r3, r2
10012b22:	81a3      	strh	r3, [r4, #12]
10012b24:	2300      	movs	r3, #0
10012b26:	6063      	str	r3, [r4, #4]
10012b28:	6923      	ldr	r3, [r4, #16]
10012b2a:	6023      	str	r3, [r4, #0]
10012b2c:	2208      	movs	r2, #8
10012b2e:	89a3      	ldrh	r3, [r4, #12]
10012b30:	4313      	orrs	r3, r2
10012b32:	81a3      	strh	r3, [r4, #12]
10012b34:	6923      	ldr	r3, [r4, #16]
10012b36:	2b00      	cmp	r3, #0
10012b38:	d10b      	bne.n	10012b52 <__swsetup_r+0xa6>
10012b3a:	23a0      	movs	r3, #160	; 0xa0
10012b3c:	89a2      	ldrh	r2, [r4, #12]
10012b3e:	009b      	lsls	r3, r3, #2
10012b40:	4013      	ands	r3, r2
10012b42:	2280      	movs	r2, #128	; 0x80
10012b44:	0092      	lsls	r2, r2, #2
10012b46:	4293      	cmp	r3, r2
10012b48:	d003      	beq.n	10012b52 <__swsetup_r+0xa6>
10012b4a:	0021      	movs	r1, r4
10012b4c:	0030      	movs	r0, r6
10012b4e:	f000 f9d1 	bl	10012ef4 <__smakebuf_r>
10012b52:	2301      	movs	r3, #1
10012b54:	89a2      	ldrh	r2, [r4, #12]
10012b56:	4013      	ands	r3, r2
10012b58:	d005      	beq.n	10012b66 <__swsetup_r+0xba>
10012b5a:	2300      	movs	r3, #0
10012b5c:	60a3      	str	r3, [r4, #8]
10012b5e:	6963      	ldr	r3, [r4, #20]
10012b60:	425b      	negs	r3, r3
10012b62:	61a3      	str	r3, [r4, #24]
10012b64:	e003      	b.n	10012b6e <__swsetup_r+0xc2>
10012b66:	0792      	lsls	r2, r2, #30
10012b68:	d400      	bmi.n	10012b6c <__swsetup_r+0xc0>
10012b6a:	6963      	ldr	r3, [r4, #20]
10012b6c:	60a3      	str	r3, [r4, #8]
10012b6e:	2000      	movs	r0, #0
10012b70:	6923      	ldr	r3, [r4, #16]
10012b72:	4283      	cmp	r3, r0
10012b74:	d107      	bne.n	10012b86 <__swsetup_r+0xda>
10012b76:	220c      	movs	r2, #12
10012b78:	5ea3      	ldrsh	r3, [r4, r2]
10012b7a:	061a      	lsls	r2, r3, #24
10012b7c:	d503      	bpl.n	10012b86 <__swsetup_r+0xda>
10012b7e:	2240      	movs	r2, #64	; 0x40
10012b80:	4313      	orrs	r3, r2
10012b82:	81a3      	strh	r3, [r4, #12]
10012b84:	3801      	subs	r0, #1
10012b86:	bd70      	pop	{r4, r5, r6, pc}
10012b88:	10015400 	.word	0x10015400
10012b8c:	100152a4 	.word	0x100152a4
10012b90:	100152c4 	.word	0x100152c4
10012b94:	100152e4 	.word	0x100152e4

10012b98 <__sflush_r>:
10012b98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10012b9a:	898a      	ldrh	r2, [r1, #12]
10012b9c:	0005      	movs	r5, r0
10012b9e:	000c      	movs	r4, r1
10012ba0:	0713      	lsls	r3, r2, #28
10012ba2:	d45a      	bmi.n	10012c5a <__sflush_r+0xc2>
10012ba4:	684b      	ldr	r3, [r1, #4]
10012ba6:	2b00      	cmp	r3, #0
10012ba8:	dc02      	bgt.n	10012bb0 <__sflush_r+0x18>
10012baa:	6c0b      	ldr	r3, [r1, #64]	; 0x40
10012bac:	2b00      	cmp	r3, #0
10012bae:	dd19      	ble.n	10012be4 <__sflush_r+0x4c>
10012bb0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
10012bb2:	2f00      	cmp	r7, #0
10012bb4:	d016      	beq.n	10012be4 <__sflush_r+0x4c>
10012bb6:	2300      	movs	r3, #0
10012bb8:	682e      	ldr	r6, [r5, #0]
10012bba:	602b      	str	r3, [r5, #0]
10012bbc:	2380      	movs	r3, #128	; 0x80
10012bbe:	015b      	lsls	r3, r3, #5
10012bc0:	401a      	ands	r2, r3
10012bc2:	d001      	beq.n	10012bc8 <__sflush_r+0x30>
10012bc4:	6d60      	ldr	r0, [r4, #84]	; 0x54
10012bc6:	e014      	b.n	10012bf2 <__sflush_r+0x5a>
10012bc8:	2301      	movs	r3, #1
10012bca:	6a21      	ldr	r1, [r4, #32]
10012bcc:	0028      	movs	r0, r5
10012bce:	47b8      	blx	r7
10012bd0:	1c43      	adds	r3, r0, #1
10012bd2:	d10e      	bne.n	10012bf2 <__sflush_r+0x5a>
10012bd4:	682b      	ldr	r3, [r5, #0]
10012bd6:	2b00      	cmp	r3, #0
10012bd8:	d00b      	beq.n	10012bf2 <__sflush_r+0x5a>
10012bda:	2b1d      	cmp	r3, #29
10012bdc:	d001      	beq.n	10012be2 <__sflush_r+0x4a>
10012bde:	2b16      	cmp	r3, #22
10012be0:	d102      	bne.n	10012be8 <__sflush_r+0x50>
10012be2:	602e      	str	r6, [r5, #0]
10012be4:	2000      	movs	r0, #0
10012be6:	e05a      	b.n	10012c9e <__sflush_r+0x106>
10012be8:	2240      	movs	r2, #64	; 0x40
10012bea:	89a3      	ldrh	r3, [r4, #12]
10012bec:	4313      	orrs	r3, r2
10012bee:	81a3      	strh	r3, [r4, #12]
10012bf0:	e055      	b.n	10012c9e <__sflush_r+0x106>
10012bf2:	89a3      	ldrh	r3, [r4, #12]
10012bf4:	075b      	lsls	r3, r3, #29
10012bf6:	d506      	bpl.n	10012c06 <__sflush_r+0x6e>
10012bf8:	6863      	ldr	r3, [r4, #4]
10012bfa:	1ac0      	subs	r0, r0, r3
10012bfc:	6b63      	ldr	r3, [r4, #52]	; 0x34
10012bfe:	2b00      	cmp	r3, #0
10012c00:	d001      	beq.n	10012c06 <__sflush_r+0x6e>
10012c02:	6c23      	ldr	r3, [r4, #64]	; 0x40
10012c04:	1ac0      	subs	r0, r0, r3
10012c06:	2300      	movs	r3, #0
10012c08:	0002      	movs	r2, r0
10012c0a:	6a21      	ldr	r1, [r4, #32]
10012c0c:	0028      	movs	r0, r5
10012c0e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
10012c10:	47b8      	blx	r7
10012c12:	89a3      	ldrh	r3, [r4, #12]
10012c14:	1c42      	adds	r2, r0, #1
10012c16:	d106      	bne.n	10012c26 <__sflush_r+0x8e>
10012c18:	6829      	ldr	r1, [r5, #0]
10012c1a:	291d      	cmp	r1, #29
10012c1c:	d83a      	bhi.n	10012c94 <__sflush_r+0xfc>
10012c1e:	4a20      	ldr	r2, [pc, #128]	; (10012ca0 <__sflush_r+0x108>)
10012c20:	40ca      	lsrs	r2, r1
10012c22:	07d2      	lsls	r2, r2, #31
10012c24:	d536      	bpl.n	10012c94 <__sflush_r+0xfc>
10012c26:	2200      	movs	r2, #0
10012c28:	6062      	str	r2, [r4, #4]
10012c2a:	6922      	ldr	r2, [r4, #16]
10012c2c:	6022      	str	r2, [r4, #0]
10012c2e:	04db      	lsls	r3, r3, #19
10012c30:	d505      	bpl.n	10012c3e <__sflush_r+0xa6>
10012c32:	1c43      	adds	r3, r0, #1
10012c34:	d102      	bne.n	10012c3c <__sflush_r+0xa4>
10012c36:	682b      	ldr	r3, [r5, #0]
10012c38:	2b00      	cmp	r3, #0
10012c3a:	d100      	bne.n	10012c3e <__sflush_r+0xa6>
10012c3c:	6560      	str	r0, [r4, #84]	; 0x54
10012c3e:	6b61      	ldr	r1, [r4, #52]	; 0x34
10012c40:	602e      	str	r6, [r5, #0]
10012c42:	2900      	cmp	r1, #0
10012c44:	d0ce      	beq.n	10012be4 <__sflush_r+0x4c>
10012c46:	0023      	movs	r3, r4
10012c48:	3344      	adds	r3, #68	; 0x44
10012c4a:	4299      	cmp	r1, r3
10012c4c:	d002      	beq.n	10012c54 <__sflush_r+0xbc>
10012c4e:	0028      	movs	r0, r5
10012c50:	f7ff fc96 	bl	10012580 <_free_r>
10012c54:	2000      	movs	r0, #0
10012c56:	6360      	str	r0, [r4, #52]	; 0x34
10012c58:	e021      	b.n	10012c9e <__sflush_r+0x106>
10012c5a:	690f      	ldr	r7, [r1, #16]
10012c5c:	2f00      	cmp	r7, #0
10012c5e:	d0c1      	beq.n	10012be4 <__sflush_r+0x4c>
10012c60:	680b      	ldr	r3, [r1, #0]
10012c62:	600f      	str	r7, [r1, #0]
10012c64:	1bdb      	subs	r3, r3, r7
10012c66:	9301      	str	r3, [sp, #4]
10012c68:	2300      	movs	r3, #0
10012c6a:	0792      	lsls	r2, r2, #30
10012c6c:	d100      	bne.n	10012c70 <__sflush_r+0xd8>
10012c6e:	694b      	ldr	r3, [r1, #20]
10012c70:	60a3      	str	r3, [r4, #8]
10012c72:	e003      	b.n	10012c7c <__sflush_r+0xe4>
10012c74:	9b01      	ldr	r3, [sp, #4]
10012c76:	183f      	adds	r7, r7, r0
10012c78:	1a1b      	subs	r3, r3, r0
10012c7a:	9301      	str	r3, [sp, #4]
10012c7c:	9b01      	ldr	r3, [sp, #4]
10012c7e:	2b00      	cmp	r3, #0
10012c80:	ddb0      	ble.n	10012be4 <__sflush_r+0x4c>
10012c82:	9b01      	ldr	r3, [sp, #4]
10012c84:	003a      	movs	r2, r7
10012c86:	6a21      	ldr	r1, [r4, #32]
10012c88:	0028      	movs	r0, r5
10012c8a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
10012c8c:	47b0      	blx	r6
10012c8e:	2800      	cmp	r0, #0
10012c90:	dcf0      	bgt.n	10012c74 <__sflush_r+0xdc>
10012c92:	89a3      	ldrh	r3, [r4, #12]
10012c94:	2240      	movs	r2, #64	; 0x40
10012c96:	2001      	movs	r0, #1
10012c98:	4313      	orrs	r3, r2
10012c9a:	81a3      	strh	r3, [r4, #12]
10012c9c:	4240      	negs	r0, r0
10012c9e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10012ca0:	20400001 	.word	0x20400001

10012ca4 <_fflush_r>:
10012ca4:	690b      	ldr	r3, [r1, #16]
10012ca6:	b570      	push	{r4, r5, r6, lr}
10012ca8:	0005      	movs	r5, r0
10012caa:	000c      	movs	r4, r1
10012cac:	2b00      	cmp	r3, #0
10012cae:	d101      	bne.n	10012cb4 <_fflush_r+0x10>
10012cb0:	2000      	movs	r0, #0
10012cb2:	e01c      	b.n	10012cee <_fflush_r+0x4a>
10012cb4:	2800      	cmp	r0, #0
10012cb6:	d004      	beq.n	10012cc2 <_fflush_r+0x1e>
10012cb8:	6983      	ldr	r3, [r0, #24]
10012cba:	2b00      	cmp	r3, #0
10012cbc:	d101      	bne.n	10012cc2 <_fflush_r+0x1e>
10012cbe:	f000 f85f 	bl	10012d80 <__sinit>
10012cc2:	4b0b      	ldr	r3, [pc, #44]	; (10012cf0 <_fflush_r+0x4c>)
10012cc4:	429c      	cmp	r4, r3
10012cc6:	d101      	bne.n	10012ccc <_fflush_r+0x28>
10012cc8:	686c      	ldr	r4, [r5, #4]
10012cca:	e008      	b.n	10012cde <_fflush_r+0x3a>
10012ccc:	4b09      	ldr	r3, [pc, #36]	; (10012cf4 <_fflush_r+0x50>)
10012cce:	429c      	cmp	r4, r3
10012cd0:	d101      	bne.n	10012cd6 <_fflush_r+0x32>
10012cd2:	68ac      	ldr	r4, [r5, #8]
10012cd4:	e003      	b.n	10012cde <_fflush_r+0x3a>
10012cd6:	4b08      	ldr	r3, [pc, #32]	; (10012cf8 <_fflush_r+0x54>)
10012cd8:	429c      	cmp	r4, r3
10012cda:	d100      	bne.n	10012cde <_fflush_r+0x3a>
10012cdc:	68ec      	ldr	r4, [r5, #12]
10012cde:	220c      	movs	r2, #12
10012ce0:	5ea3      	ldrsh	r3, [r4, r2]
10012ce2:	2b00      	cmp	r3, #0
10012ce4:	d0e4      	beq.n	10012cb0 <_fflush_r+0xc>
10012ce6:	0021      	movs	r1, r4
10012ce8:	0028      	movs	r0, r5
10012cea:	f7ff ff55 	bl	10012b98 <__sflush_r>
10012cee:	bd70      	pop	{r4, r5, r6, pc}
10012cf0:	100152a4 	.word	0x100152a4
10012cf4:	100152c4 	.word	0x100152c4
10012cf8:	100152e4 	.word	0x100152e4

10012cfc <_cleanup_r>:
10012cfc:	b510      	push	{r4, lr}
10012cfe:	4902      	ldr	r1, [pc, #8]	; (10012d08 <_cleanup_r+0xc>)
10012d00:	f000 f8b0 	bl	10012e64 <_fwalk_reent>
10012d04:	bd10      	pop	{r4, pc}
10012d06:	46c0      	nop			; (mov r8, r8)
10012d08:	10012ca5 	.word	0x10012ca5

10012d0c <std.isra.0>:
10012d0c:	2300      	movs	r3, #0
10012d0e:	b510      	push	{r4, lr}
10012d10:	0004      	movs	r4, r0
10012d12:	6003      	str	r3, [r0, #0]
10012d14:	6043      	str	r3, [r0, #4]
10012d16:	6083      	str	r3, [r0, #8]
10012d18:	8181      	strh	r1, [r0, #12]
10012d1a:	6643      	str	r3, [r0, #100]	; 0x64
10012d1c:	81c2      	strh	r2, [r0, #14]
10012d1e:	6103      	str	r3, [r0, #16]
10012d20:	6143      	str	r3, [r0, #20]
10012d22:	6183      	str	r3, [r0, #24]
10012d24:	0019      	movs	r1, r3
10012d26:	2208      	movs	r2, #8
10012d28:	305c      	adds	r0, #92	; 0x5c
10012d2a:	f7ff fc21 	bl	10012570 <memset>
10012d2e:	4b05      	ldr	r3, [pc, #20]	; (10012d44 <std.isra.0+0x38>)
10012d30:	6224      	str	r4, [r4, #32]
10012d32:	6263      	str	r3, [r4, #36]	; 0x24
10012d34:	4b04      	ldr	r3, [pc, #16]	; (10012d48 <std.isra.0+0x3c>)
10012d36:	62a3      	str	r3, [r4, #40]	; 0x28
10012d38:	4b04      	ldr	r3, [pc, #16]	; (10012d4c <std.isra.0+0x40>)
10012d3a:	62e3      	str	r3, [r4, #44]	; 0x2c
10012d3c:	4b04      	ldr	r3, [pc, #16]	; (10012d50 <std.isra.0+0x44>)
10012d3e:	6323      	str	r3, [r4, #48]	; 0x30
10012d40:	bd10      	pop	{r4, pc}
10012d42:	46c0      	nop			; (mov r8, r8)
10012d44:	10013585 	.word	0x10013585
10012d48:	100135ad 	.word	0x100135ad
10012d4c:	100135e5 	.word	0x100135e5
10012d50:	10013611 	.word	0x10013611

10012d54 <__sfmoreglue>:
10012d54:	b570      	push	{r4, r5, r6, lr}
10012d56:	2568      	movs	r5, #104	; 0x68
10012d58:	1e4b      	subs	r3, r1, #1
10012d5a:	435d      	muls	r5, r3
10012d5c:	000e      	movs	r6, r1
10012d5e:	0029      	movs	r1, r5
10012d60:	3174      	adds	r1, #116	; 0x74
10012d62:	f7ff fc53 	bl	1001260c <_malloc_r>
10012d66:	1e04      	subs	r4, r0, #0
10012d68:	d008      	beq.n	10012d7c <__sfmoreglue+0x28>
10012d6a:	2100      	movs	r1, #0
10012d6c:	002a      	movs	r2, r5
10012d6e:	6001      	str	r1, [r0, #0]
10012d70:	6046      	str	r6, [r0, #4]
10012d72:	300c      	adds	r0, #12
10012d74:	60a0      	str	r0, [r4, #8]
10012d76:	3268      	adds	r2, #104	; 0x68
10012d78:	f7ff fbfa 	bl	10012570 <memset>
10012d7c:	0020      	movs	r0, r4
10012d7e:	bd70      	pop	{r4, r5, r6, pc}

10012d80 <__sinit>:
10012d80:	6983      	ldr	r3, [r0, #24]
10012d82:	b513      	push	{r0, r1, r4, lr}
10012d84:	0004      	movs	r4, r0
10012d86:	2b00      	cmp	r3, #0
10012d88:	d128      	bne.n	10012ddc <__sinit+0x5c>
10012d8a:	6483      	str	r3, [r0, #72]	; 0x48
10012d8c:	64c3      	str	r3, [r0, #76]	; 0x4c
10012d8e:	6503      	str	r3, [r0, #80]	; 0x50
10012d90:	4b13      	ldr	r3, [pc, #76]	; (10012de0 <__sinit+0x60>)
10012d92:	4a14      	ldr	r2, [pc, #80]	; (10012de4 <__sinit+0x64>)
10012d94:	681b      	ldr	r3, [r3, #0]
10012d96:	6282      	str	r2, [r0, #40]	; 0x28
10012d98:	9301      	str	r3, [sp, #4]
10012d9a:	4298      	cmp	r0, r3
10012d9c:	d101      	bne.n	10012da2 <__sinit+0x22>
10012d9e:	2301      	movs	r3, #1
10012da0:	6183      	str	r3, [r0, #24]
10012da2:	0020      	movs	r0, r4
10012da4:	f000 f820 	bl	10012de8 <__sfp>
10012da8:	6060      	str	r0, [r4, #4]
10012daa:	0020      	movs	r0, r4
10012dac:	f000 f81c 	bl	10012de8 <__sfp>
10012db0:	60a0      	str	r0, [r4, #8]
10012db2:	0020      	movs	r0, r4
10012db4:	f000 f818 	bl	10012de8 <__sfp>
10012db8:	2200      	movs	r2, #0
10012dba:	60e0      	str	r0, [r4, #12]
10012dbc:	2104      	movs	r1, #4
10012dbe:	6860      	ldr	r0, [r4, #4]
10012dc0:	f7ff ffa4 	bl	10012d0c <std.isra.0>
10012dc4:	2201      	movs	r2, #1
10012dc6:	2109      	movs	r1, #9
10012dc8:	68a0      	ldr	r0, [r4, #8]
10012dca:	f7ff ff9f 	bl	10012d0c <std.isra.0>
10012dce:	2202      	movs	r2, #2
10012dd0:	2112      	movs	r1, #18
10012dd2:	68e0      	ldr	r0, [r4, #12]
10012dd4:	f7ff ff9a 	bl	10012d0c <std.isra.0>
10012dd8:	2301      	movs	r3, #1
10012dda:	61a3      	str	r3, [r4, #24]
10012ddc:	bd13      	pop	{r0, r1, r4, pc}
10012dde:	46c0      	nop			; (mov r8, r8)
10012de0:	100152a0 	.word	0x100152a0
10012de4:	10012cfd 	.word	0x10012cfd

10012de8 <__sfp>:
10012de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10012dea:	4b1d      	ldr	r3, [pc, #116]	; (10012e60 <__sfp+0x78>)
10012dec:	0006      	movs	r6, r0
10012dee:	681d      	ldr	r5, [r3, #0]
10012df0:	69ab      	ldr	r3, [r5, #24]
10012df2:	2b00      	cmp	r3, #0
10012df4:	d102      	bne.n	10012dfc <__sfp+0x14>
10012df6:	0028      	movs	r0, r5
10012df8:	f7ff ffc2 	bl	10012d80 <__sinit>
10012dfc:	3548      	adds	r5, #72	; 0x48
10012dfe:	68ac      	ldr	r4, [r5, #8]
10012e00:	686b      	ldr	r3, [r5, #4]
10012e02:	3b01      	subs	r3, #1
10012e04:	d405      	bmi.n	10012e12 <__sfp+0x2a>
10012e06:	220c      	movs	r2, #12
10012e08:	5ea7      	ldrsh	r7, [r4, r2]
10012e0a:	2f00      	cmp	r7, #0
10012e0c:	d010      	beq.n	10012e30 <__sfp+0x48>
10012e0e:	3468      	adds	r4, #104	; 0x68
10012e10:	e7f7      	b.n	10012e02 <__sfp+0x1a>
10012e12:	682b      	ldr	r3, [r5, #0]
10012e14:	2b00      	cmp	r3, #0
10012e16:	d001      	beq.n	10012e1c <__sfp+0x34>
10012e18:	682d      	ldr	r5, [r5, #0]
10012e1a:	e7f0      	b.n	10012dfe <__sfp+0x16>
10012e1c:	2104      	movs	r1, #4
10012e1e:	0030      	movs	r0, r6
10012e20:	f7ff ff98 	bl	10012d54 <__sfmoreglue>
10012e24:	6028      	str	r0, [r5, #0]
10012e26:	2800      	cmp	r0, #0
10012e28:	d1f6      	bne.n	10012e18 <__sfp+0x30>
10012e2a:	230c      	movs	r3, #12
10012e2c:	6033      	str	r3, [r6, #0]
10012e2e:	e016      	b.n	10012e5e <__sfp+0x76>
10012e30:	2301      	movs	r3, #1
10012e32:	0020      	movs	r0, r4
10012e34:	425b      	negs	r3, r3
10012e36:	81e3      	strh	r3, [r4, #14]
10012e38:	3302      	adds	r3, #2
10012e3a:	81a3      	strh	r3, [r4, #12]
10012e3c:	6667      	str	r7, [r4, #100]	; 0x64
10012e3e:	6027      	str	r7, [r4, #0]
10012e40:	60a7      	str	r7, [r4, #8]
10012e42:	6067      	str	r7, [r4, #4]
10012e44:	6127      	str	r7, [r4, #16]
10012e46:	6167      	str	r7, [r4, #20]
10012e48:	61a7      	str	r7, [r4, #24]
10012e4a:	305c      	adds	r0, #92	; 0x5c
10012e4c:	2208      	movs	r2, #8
10012e4e:	0039      	movs	r1, r7
10012e50:	f7ff fb8e 	bl	10012570 <memset>
10012e54:	0020      	movs	r0, r4
10012e56:	6367      	str	r7, [r4, #52]	; 0x34
10012e58:	63a7      	str	r7, [r4, #56]	; 0x38
10012e5a:	64a7      	str	r7, [r4, #72]	; 0x48
10012e5c:	64e7      	str	r7, [r4, #76]	; 0x4c
10012e5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10012e60:	100152a0 	.word	0x100152a0

10012e64 <_fwalk_reent>:
10012e64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10012e66:	0004      	movs	r4, r0
10012e68:	0007      	movs	r7, r0
10012e6a:	2600      	movs	r6, #0
10012e6c:	9101      	str	r1, [sp, #4]
10012e6e:	3448      	adds	r4, #72	; 0x48
10012e70:	2c00      	cmp	r4, #0
10012e72:	d016      	beq.n	10012ea2 <_fwalk_reent+0x3e>
10012e74:	6863      	ldr	r3, [r4, #4]
10012e76:	68a5      	ldr	r5, [r4, #8]
10012e78:	9300      	str	r3, [sp, #0]
10012e7a:	9b00      	ldr	r3, [sp, #0]
10012e7c:	3b01      	subs	r3, #1
10012e7e:	9300      	str	r3, [sp, #0]
10012e80:	d40d      	bmi.n	10012e9e <_fwalk_reent+0x3a>
10012e82:	89ab      	ldrh	r3, [r5, #12]
10012e84:	2b01      	cmp	r3, #1
10012e86:	d908      	bls.n	10012e9a <_fwalk_reent+0x36>
10012e88:	220e      	movs	r2, #14
10012e8a:	5eab      	ldrsh	r3, [r5, r2]
10012e8c:	3301      	adds	r3, #1
10012e8e:	d004      	beq.n	10012e9a <_fwalk_reent+0x36>
10012e90:	0029      	movs	r1, r5
10012e92:	0038      	movs	r0, r7
10012e94:	9b01      	ldr	r3, [sp, #4]
10012e96:	4798      	blx	r3
10012e98:	4306      	orrs	r6, r0
10012e9a:	3568      	adds	r5, #104	; 0x68
10012e9c:	e7ed      	b.n	10012e7a <_fwalk_reent+0x16>
10012e9e:	6824      	ldr	r4, [r4, #0]
10012ea0:	e7e6      	b.n	10012e70 <_fwalk_reent+0xc>
10012ea2:	0030      	movs	r0, r6
10012ea4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

10012ea8 <__swhatbuf_r>:
10012ea8:	b570      	push	{r4, r5, r6, lr}
10012eaa:	000e      	movs	r6, r1
10012eac:	001d      	movs	r5, r3
10012eae:	230e      	movs	r3, #14
10012eb0:	5ec9      	ldrsh	r1, [r1, r3]
10012eb2:	b090      	sub	sp, #64	; 0x40
10012eb4:	0014      	movs	r4, r2
10012eb6:	2900      	cmp	r1, #0
10012eb8:	da06      	bge.n	10012ec8 <__swhatbuf_r+0x20>
10012eba:	2300      	movs	r3, #0
10012ebc:	602b      	str	r3, [r5, #0]
10012ebe:	89b3      	ldrh	r3, [r6, #12]
10012ec0:	061b      	lsls	r3, r3, #24
10012ec2:	d50f      	bpl.n	10012ee4 <__swhatbuf_r+0x3c>
10012ec4:	2340      	movs	r3, #64	; 0x40
10012ec6:	e00f      	b.n	10012ee8 <__swhatbuf_r+0x40>
10012ec8:	aa01      	add	r2, sp, #4
10012eca:	f000 fbcd 	bl	10013668 <_fstat_r>
10012ece:	2800      	cmp	r0, #0
10012ed0:	dbf3      	blt.n	10012eba <__swhatbuf_r+0x12>
10012ed2:	23f0      	movs	r3, #240	; 0xf0
10012ed4:	9a02      	ldr	r2, [sp, #8]
10012ed6:	021b      	lsls	r3, r3, #8
10012ed8:	4013      	ands	r3, r2
10012eda:	4a05      	ldr	r2, [pc, #20]	; (10012ef0 <__swhatbuf_r+0x48>)
10012edc:	189b      	adds	r3, r3, r2
10012ede:	425a      	negs	r2, r3
10012ee0:	4153      	adcs	r3, r2
10012ee2:	602b      	str	r3, [r5, #0]
10012ee4:	2380      	movs	r3, #128	; 0x80
10012ee6:	00db      	lsls	r3, r3, #3
10012ee8:	2000      	movs	r0, #0
10012eea:	6023      	str	r3, [r4, #0]
10012eec:	b010      	add	sp, #64	; 0x40
10012eee:	bd70      	pop	{r4, r5, r6, pc}
10012ef0:	ffffe000 	.word	0xffffe000

10012ef4 <__smakebuf_r>:
10012ef4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10012ef6:	2602      	movs	r6, #2
10012ef8:	898b      	ldrh	r3, [r1, #12]
10012efa:	0005      	movs	r5, r0
10012efc:	000c      	movs	r4, r1
10012efe:	4233      	tst	r3, r6
10012f00:	d110      	bne.n	10012f24 <__smakebuf_r+0x30>
10012f02:	ab01      	add	r3, sp, #4
10012f04:	466a      	mov	r2, sp
10012f06:	f7ff ffcf 	bl	10012ea8 <__swhatbuf_r>
10012f0a:	9900      	ldr	r1, [sp, #0]
10012f0c:	0007      	movs	r7, r0
10012f0e:	0028      	movs	r0, r5
10012f10:	f7ff fb7c 	bl	1001260c <_malloc_r>
10012f14:	2800      	cmp	r0, #0
10012f16:	d10c      	bne.n	10012f32 <__smakebuf_r+0x3e>
10012f18:	220c      	movs	r2, #12
10012f1a:	5ea3      	ldrsh	r3, [r4, r2]
10012f1c:	059a      	lsls	r2, r3, #22
10012f1e:	d423      	bmi.n	10012f68 <__smakebuf_r+0x74>
10012f20:	4333      	orrs	r3, r6
10012f22:	81a3      	strh	r3, [r4, #12]
10012f24:	0023      	movs	r3, r4
10012f26:	3347      	adds	r3, #71	; 0x47
10012f28:	6023      	str	r3, [r4, #0]
10012f2a:	6123      	str	r3, [r4, #16]
10012f2c:	2301      	movs	r3, #1
10012f2e:	6163      	str	r3, [r4, #20]
10012f30:	e01a      	b.n	10012f68 <__smakebuf_r+0x74>
10012f32:	2280      	movs	r2, #128	; 0x80
10012f34:	4b0d      	ldr	r3, [pc, #52]	; (10012f6c <__smakebuf_r+0x78>)
10012f36:	62ab      	str	r3, [r5, #40]	; 0x28
10012f38:	89a3      	ldrh	r3, [r4, #12]
10012f3a:	6020      	str	r0, [r4, #0]
10012f3c:	4313      	orrs	r3, r2
10012f3e:	81a3      	strh	r3, [r4, #12]
10012f40:	9b00      	ldr	r3, [sp, #0]
10012f42:	6120      	str	r0, [r4, #16]
10012f44:	6163      	str	r3, [r4, #20]
10012f46:	9b01      	ldr	r3, [sp, #4]
10012f48:	2b00      	cmp	r3, #0
10012f4a:	d00a      	beq.n	10012f62 <__smakebuf_r+0x6e>
10012f4c:	230e      	movs	r3, #14
10012f4e:	5ee1      	ldrsh	r1, [r4, r3]
10012f50:	0028      	movs	r0, r5
10012f52:	f000 fb9b 	bl	1001368c <_isatty_r>
10012f56:	2800      	cmp	r0, #0
10012f58:	d003      	beq.n	10012f62 <__smakebuf_r+0x6e>
10012f5a:	2201      	movs	r2, #1
10012f5c:	89a3      	ldrh	r3, [r4, #12]
10012f5e:	4313      	orrs	r3, r2
10012f60:	81a3      	strh	r3, [r4, #12]
10012f62:	89a3      	ldrh	r3, [r4, #12]
10012f64:	431f      	orrs	r7, r3
10012f66:	81a7      	strh	r7, [r4, #12]
10012f68:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10012f6a:	46c0      	nop			; (mov r8, r8)
10012f6c:	10012cfd 	.word	0x10012cfd

10012f70 <__sfputc_r>:
10012f70:	6893      	ldr	r3, [r2, #8]
10012f72:	b510      	push	{r4, lr}
10012f74:	3b01      	subs	r3, #1
10012f76:	6093      	str	r3, [r2, #8]
10012f78:	2b00      	cmp	r3, #0
10012f7a:	da05      	bge.n	10012f88 <__sfputc_r+0x18>
10012f7c:	6994      	ldr	r4, [r2, #24]
10012f7e:	42a3      	cmp	r3, r4
10012f80:	db08      	blt.n	10012f94 <__sfputc_r+0x24>
10012f82:	b2cb      	uxtb	r3, r1
10012f84:	2b0a      	cmp	r3, #10
10012f86:	d005      	beq.n	10012f94 <__sfputc_r+0x24>
10012f88:	6813      	ldr	r3, [r2, #0]
10012f8a:	1c58      	adds	r0, r3, #1
10012f8c:	6010      	str	r0, [r2, #0]
10012f8e:	7019      	strb	r1, [r3, #0]
10012f90:	b2c8      	uxtb	r0, r1
10012f92:	e001      	b.n	10012f98 <__sfputc_r+0x28>
10012f94:	f7ff fd32 	bl	100129fc <__swbuf_r>
10012f98:	bd10      	pop	{r4, pc}

10012f9a <__sfputs_r>:
10012f9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10012f9c:	0006      	movs	r6, r0
10012f9e:	000f      	movs	r7, r1
10012fa0:	0014      	movs	r4, r2
10012fa2:	18d5      	adds	r5, r2, r3
10012fa4:	42ac      	cmp	r4, r5
10012fa6:	d008      	beq.n	10012fba <__sfputs_r+0x20>
10012fa8:	7821      	ldrb	r1, [r4, #0]
10012faa:	003a      	movs	r2, r7
10012fac:	0030      	movs	r0, r6
10012fae:	f7ff ffdf 	bl	10012f70 <__sfputc_r>
10012fb2:	3401      	adds	r4, #1
10012fb4:	1c43      	adds	r3, r0, #1
10012fb6:	d1f5      	bne.n	10012fa4 <__sfputs_r+0xa>
10012fb8:	e000      	b.n	10012fbc <__sfputs_r+0x22>
10012fba:	2000      	movs	r0, #0
10012fbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

10012fc0 <_vfiprintf_r>:
10012fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
10012fc2:	b09f      	sub	sp, #124	; 0x7c
10012fc4:	0006      	movs	r6, r0
10012fc6:	000f      	movs	r7, r1
10012fc8:	9202      	str	r2, [sp, #8]
10012fca:	9305      	str	r3, [sp, #20]
10012fcc:	2800      	cmp	r0, #0
10012fce:	d004      	beq.n	10012fda <_vfiprintf_r+0x1a>
10012fd0:	6983      	ldr	r3, [r0, #24]
10012fd2:	2b00      	cmp	r3, #0
10012fd4:	d101      	bne.n	10012fda <_vfiprintf_r+0x1a>
10012fd6:	f7ff fed3 	bl	10012d80 <__sinit>
10012fda:	4b7f      	ldr	r3, [pc, #508]	; (100131d8 <_vfiprintf_r+0x218>)
10012fdc:	429f      	cmp	r7, r3
10012fde:	d101      	bne.n	10012fe4 <_vfiprintf_r+0x24>
10012fe0:	6877      	ldr	r7, [r6, #4]
10012fe2:	e008      	b.n	10012ff6 <_vfiprintf_r+0x36>
10012fe4:	4b7d      	ldr	r3, [pc, #500]	; (100131dc <_vfiprintf_r+0x21c>)
10012fe6:	429f      	cmp	r7, r3
10012fe8:	d101      	bne.n	10012fee <_vfiprintf_r+0x2e>
10012fea:	68b7      	ldr	r7, [r6, #8]
10012fec:	e003      	b.n	10012ff6 <_vfiprintf_r+0x36>
10012fee:	4b7c      	ldr	r3, [pc, #496]	; (100131e0 <_vfiprintf_r+0x220>)
10012ff0:	429f      	cmp	r7, r3
10012ff2:	d100      	bne.n	10012ff6 <_vfiprintf_r+0x36>
10012ff4:	68f7      	ldr	r7, [r6, #12]
10012ff6:	89bb      	ldrh	r3, [r7, #12]
10012ff8:	071b      	lsls	r3, r3, #28
10012ffa:	d50a      	bpl.n	10013012 <_vfiprintf_r+0x52>
10012ffc:	693b      	ldr	r3, [r7, #16]
10012ffe:	2b00      	cmp	r3, #0
10013000:	d007      	beq.n	10013012 <_vfiprintf_r+0x52>
10013002:	2300      	movs	r3, #0
10013004:	ad06      	add	r5, sp, #24
10013006:	616b      	str	r3, [r5, #20]
10013008:	3320      	adds	r3, #32
1001300a:	766b      	strb	r3, [r5, #25]
1001300c:	3310      	adds	r3, #16
1001300e:	76ab      	strb	r3, [r5, #26]
10013010:	e03d      	b.n	1001308e <_vfiprintf_r+0xce>
10013012:	0039      	movs	r1, r7
10013014:	0030      	movs	r0, r6
10013016:	f7ff fd49 	bl	10012aac <__swsetup_r>
1001301a:	2800      	cmp	r0, #0
1001301c:	d0f1      	beq.n	10013002 <_vfiprintf_r+0x42>
1001301e:	2001      	movs	r0, #1
10013020:	4240      	negs	r0, r0
10013022:	e0d6      	b.n	100131d2 <_vfiprintf_r+0x212>
10013024:	9a05      	ldr	r2, [sp, #20]
10013026:	1d11      	adds	r1, r2, #4
10013028:	6812      	ldr	r2, [r2, #0]
1001302a:	9105      	str	r1, [sp, #20]
1001302c:	2a00      	cmp	r2, #0
1001302e:	da00      	bge.n	10013032 <_vfiprintf_r+0x72>
10013030:	e07f      	b.n	10013132 <_vfiprintf_r+0x172>
10013032:	9209      	str	r2, [sp, #36]	; 0x24
10013034:	3401      	adds	r4, #1
10013036:	7823      	ldrb	r3, [r4, #0]
10013038:	2b2e      	cmp	r3, #46	; 0x2e
1001303a:	d100      	bne.n	1001303e <_vfiprintf_r+0x7e>
1001303c:	e08d      	b.n	1001315a <_vfiprintf_r+0x19a>
1001303e:	7821      	ldrb	r1, [r4, #0]
10013040:	2203      	movs	r2, #3
10013042:	4868      	ldr	r0, [pc, #416]	; (100131e4 <_vfiprintf_r+0x224>)
10013044:	f000 fb48 	bl	100136d8 <memchr>
10013048:	2800      	cmp	r0, #0
1001304a:	d007      	beq.n	1001305c <_vfiprintf_r+0x9c>
1001304c:	4b65      	ldr	r3, [pc, #404]	; (100131e4 <_vfiprintf_r+0x224>)
1001304e:	682a      	ldr	r2, [r5, #0]
10013050:	1ac0      	subs	r0, r0, r3
10013052:	2340      	movs	r3, #64	; 0x40
10013054:	4083      	lsls	r3, r0
10013056:	4313      	orrs	r3, r2
10013058:	602b      	str	r3, [r5, #0]
1001305a:	3401      	adds	r4, #1
1001305c:	7821      	ldrb	r1, [r4, #0]
1001305e:	1c63      	adds	r3, r4, #1
10013060:	2206      	movs	r2, #6
10013062:	4861      	ldr	r0, [pc, #388]	; (100131e8 <_vfiprintf_r+0x228>)
10013064:	9302      	str	r3, [sp, #8]
10013066:	7629      	strb	r1, [r5, #24]
10013068:	f000 fb36 	bl	100136d8 <memchr>
1001306c:	2800      	cmp	r0, #0
1001306e:	d100      	bne.n	10013072 <_vfiprintf_r+0xb2>
10013070:	e09d      	b.n	100131ae <_vfiprintf_r+0x1ee>
10013072:	4b5e      	ldr	r3, [pc, #376]	; (100131ec <_vfiprintf_r+0x22c>)
10013074:	2b00      	cmp	r3, #0
10013076:	d000      	beq.n	1001307a <_vfiprintf_r+0xba>
10013078:	e090      	b.n	1001319c <_vfiprintf_r+0x1dc>
1001307a:	2207      	movs	r2, #7
1001307c:	9b05      	ldr	r3, [sp, #20]
1001307e:	3307      	adds	r3, #7
10013080:	4393      	bics	r3, r2
10013082:	3308      	adds	r3, #8
10013084:	9305      	str	r3, [sp, #20]
10013086:	696b      	ldr	r3, [r5, #20]
10013088:	9a03      	ldr	r2, [sp, #12]
1001308a:	189b      	adds	r3, r3, r2
1001308c:	616b      	str	r3, [r5, #20]
1001308e:	9c02      	ldr	r4, [sp, #8]
10013090:	7823      	ldrb	r3, [r4, #0]
10013092:	2b00      	cmp	r3, #0
10013094:	d104      	bne.n	100130a0 <_vfiprintf_r+0xe0>
10013096:	9b02      	ldr	r3, [sp, #8]
10013098:	1ae3      	subs	r3, r4, r3
1001309a:	9304      	str	r3, [sp, #16]
1001309c:	d012      	beq.n	100130c4 <_vfiprintf_r+0x104>
1001309e:	e003      	b.n	100130a8 <_vfiprintf_r+0xe8>
100130a0:	2b25      	cmp	r3, #37	; 0x25
100130a2:	d0f8      	beq.n	10013096 <_vfiprintf_r+0xd6>
100130a4:	3401      	adds	r4, #1
100130a6:	e7f3      	b.n	10013090 <_vfiprintf_r+0xd0>
100130a8:	9b04      	ldr	r3, [sp, #16]
100130aa:	9a02      	ldr	r2, [sp, #8]
100130ac:	0039      	movs	r1, r7
100130ae:	0030      	movs	r0, r6
100130b0:	f7ff ff73 	bl	10012f9a <__sfputs_r>
100130b4:	1c43      	adds	r3, r0, #1
100130b6:	d100      	bne.n	100130ba <_vfiprintf_r+0xfa>
100130b8:	e086      	b.n	100131c8 <_vfiprintf_r+0x208>
100130ba:	696a      	ldr	r2, [r5, #20]
100130bc:	9b04      	ldr	r3, [sp, #16]
100130be:	4694      	mov	ip, r2
100130c0:	4463      	add	r3, ip
100130c2:	616b      	str	r3, [r5, #20]
100130c4:	7823      	ldrb	r3, [r4, #0]
100130c6:	2b00      	cmp	r3, #0
100130c8:	d07e      	beq.n	100131c8 <_vfiprintf_r+0x208>
100130ca:	2201      	movs	r2, #1
100130cc:	2300      	movs	r3, #0
100130ce:	4252      	negs	r2, r2
100130d0:	606a      	str	r2, [r5, #4]
100130d2:	a902      	add	r1, sp, #8
100130d4:	3254      	adds	r2, #84	; 0x54
100130d6:	1852      	adds	r2, r2, r1
100130d8:	3401      	adds	r4, #1
100130da:	602b      	str	r3, [r5, #0]
100130dc:	60eb      	str	r3, [r5, #12]
100130de:	60ab      	str	r3, [r5, #8]
100130e0:	7013      	strb	r3, [r2, #0]
100130e2:	65ab      	str	r3, [r5, #88]	; 0x58
100130e4:	7821      	ldrb	r1, [r4, #0]
100130e6:	2205      	movs	r2, #5
100130e8:	4841      	ldr	r0, [pc, #260]	; (100131f0 <_vfiprintf_r+0x230>)
100130ea:	f000 faf5 	bl	100136d8 <memchr>
100130ee:	2800      	cmp	r0, #0
100130f0:	d008      	beq.n	10013104 <_vfiprintf_r+0x144>
100130f2:	4b3f      	ldr	r3, [pc, #252]	; (100131f0 <_vfiprintf_r+0x230>)
100130f4:	682a      	ldr	r2, [r5, #0]
100130f6:	1ac0      	subs	r0, r0, r3
100130f8:	2301      	movs	r3, #1
100130fa:	4083      	lsls	r3, r0
100130fc:	4313      	orrs	r3, r2
100130fe:	602b      	str	r3, [r5, #0]
10013100:	3401      	adds	r4, #1
10013102:	e7ef      	b.n	100130e4 <_vfiprintf_r+0x124>
10013104:	682b      	ldr	r3, [r5, #0]
10013106:	06da      	lsls	r2, r3, #27
10013108:	d504      	bpl.n	10013114 <_vfiprintf_r+0x154>
1001310a:	2253      	movs	r2, #83	; 0x53
1001310c:	2120      	movs	r1, #32
1001310e:	a802      	add	r0, sp, #8
10013110:	1812      	adds	r2, r2, r0
10013112:	7011      	strb	r1, [r2, #0]
10013114:	071a      	lsls	r2, r3, #28
10013116:	d504      	bpl.n	10013122 <_vfiprintf_r+0x162>
10013118:	2253      	movs	r2, #83	; 0x53
1001311a:	212b      	movs	r1, #43	; 0x2b
1001311c:	a802      	add	r0, sp, #8
1001311e:	1812      	adds	r2, r2, r0
10013120:	7011      	strb	r1, [r2, #0]
10013122:	7822      	ldrb	r2, [r4, #0]
10013124:	2a2a      	cmp	r2, #42	; 0x2a
10013126:	d100      	bne.n	1001312a <_vfiprintf_r+0x16a>
10013128:	e77c      	b.n	10013024 <_vfiprintf_r+0x64>
1001312a:	9b09      	ldr	r3, [sp, #36]	; 0x24
1001312c:	2000      	movs	r0, #0
1001312e:	210a      	movs	r1, #10
10013130:	e005      	b.n	1001313e <_vfiprintf_r+0x17e>
10013132:	4252      	negs	r2, r2
10013134:	60ea      	str	r2, [r5, #12]
10013136:	2202      	movs	r2, #2
10013138:	4313      	orrs	r3, r2
1001313a:	602b      	str	r3, [r5, #0]
1001313c:	e77a      	b.n	10013034 <_vfiprintf_r+0x74>
1001313e:	7822      	ldrb	r2, [r4, #0]
10013140:	3a30      	subs	r2, #48	; 0x30
10013142:	2a09      	cmp	r2, #9
10013144:	d804      	bhi.n	10013150 <_vfiprintf_r+0x190>
10013146:	434b      	muls	r3, r1
10013148:	3401      	adds	r4, #1
1001314a:	189b      	adds	r3, r3, r2
1001314c:	2001      	movs	r0, #1
1001314e:	e7f6      	b.n	1001313e <_vfiprintf_r+0x17e>
10013150:	2800      	cmp	r0, #0
10013152:	d100      	bne.n	10013156 <_vfiprintf_r+0x196>
10013154:	e76f      	b.n	10013036 <_vfiprintf_r+0x76>
10013156:	9309      	str	r3, [sp, #36]	; 0x24
10013158:	e76d      	b.n	10013036 <_vfiprintf_r+0x76>
1001315a:	7863      	ldrb	r3, [r4, #1]
1001315c:	2b2a      	cmp	r3, #42	; 0x2a
1001315e:	d10a      	bne.n	10013176 <_vfiprintf_r+0x1b6>
10013160:	9b05      	ldr	r3, [sp, #20]
10013162:	3402      	adds	r4, #2
10013164:	1d1a      	adds	r2, r3, #4
10013166:	681b      	ldr	r3, [r3, #0]
10013168:	9205      	str	r2, [sp, #20]
1001316a:	2b00      	cmp	r3, #0
1001316c:	da01      	bge.n	10013172 <_vfiprintf_r+0x1b2>
1001316e:	2301      	movs	r3, #1
10013170:	425b      	negs	r3, r3
10013172:	9307      	str	r3, [sp, #28]
10013174:	e763      	b.n	1001303e <_vfiprintf_r+0x7e>
10013176:	2300      	movs	r3, #0
10013178:	200a      	movs	r0, #10
1001317a:	001a      	movs	r2, r3
1001317c:	3401      	adds	r4, #1
1001317e:	606b      	str	r3, [r5, #4]
10013180:	7821      	ldrb	r1, [r4, #0]
10013182:	3930      	subs	r1, #48	; 0x30
10013184:	2909      	cmp	r1, #9
10013186:	d804      	bhi.n	10013192 <_vfiprintf_r+0x1d2>
10013188:	4342      	muls	r2, r0
1001318a:	3401      	adds	r4, #1
1001318c:	1852      	adds	r2, r2, r1
1001318e:	2301      	movs	r3, #1
10013190:	e7f6      	b.n	10013180 <_vfiprintf_r+0x1c0>
10013192:	2b00      	cmp	r3, #0
10013194:	d100      	bne.n	10013198 <_vfiprintf_r+0x1d8>
10013196:	e752      	b.n	1001303e <_vfiprintf_r+0x7e>
10013198:	9207      	str	r2, [sp, #28]
1001319a:	e750      	b.n	1001303e <_vfiprintf_r+0x7e>
1001319c:	ab05      	add	r3, sp, #20
1001319e:	9300      	str	r3, [sp, #0]
100131a0:	003a      	movs	r2, r7
100131a2:	4b14      	ldr	r3, [pc, #80]	; (100131f4 <_vfiprintf_r+0x234>)
100131a4:	0029      	movs	r1, r5
100131a6:	0030      	movs	r0, r6
100131a8:	e000      	b.n	100131ac <_vfiprintf_r+0x1ec>
100131aa:	bf00      	nop
100131ac:	e007      	b.n	100131be <_vfiprintf_r+0x1fe>
100131ae:	ab05      	add	r3, sp, #20
100131b0:	9300      	str	r3, [sp, #0]
100131b2:	003a      	movs	r2, r7
100131b4:	4b0f      	ldr	r3, [pc, #60]	; (100131f4 <_vfiprintf_r+0x234>)
100131b6:	0029      	movs	r1, r5
100131b8:	0030      	movs	r0, r6
100131ba:	f000 f88b 	bl	100132d4 <_printf_i>
100131be:	9003      	str	r0, [sp, #12]
100131c0:	9b03      	ldr	r3, [sp, #12]
100131c2:	3301      	adds	r3, #1
100131c4:	d000      	beq.n	100131c8 <_vfiprintf_r+0x208>
100131c6:	e75e      	b.n	10013086 <_vfiprintf_r+0xc6>
100131c8:	89bb      	ldrh	r3, [r7, #12]
100131ca:	065b      	lsls	r3, r3, #25
100131cc:	d500      	bpl.n	100131d0 <_vfiprintf_r+0x210>
100131ce:	e726      	b.n	1001301e <_vfiprintf_r+0x5e>
100131d0:	980b      	ldr	r0, [sp, #44]	; 0x2c
100131d2:	b01f      	add	sp, #124	; 0x7c
100131d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100131d6:	46c0      	nop			; (mov r8, r8)
100131d8:	100152a4 	.word	0x100152a4
100131dc:	100152c4 	.word	0x100152c4
100131e0:	100152e4 	.word	0x100152e4
100131e4:	1001530a 	.word	0x1001530a
100131e8:	1001530e 	.word	0x1001530e
100131ec:	00000000 	.word	0x00000000
100131f0:	10015304 	.word	0x10015304
100131f4:	10012f9b 	.word	0x10012f9b

100131f8 <_printf_common>:
100131f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100131fa:	0017      	movs	r7, r2
100131fc:	9301      	str	r3, [sp, #4]
100131fe:	688a      	ldr	r2, [r1, #8]
10013200:	690b      	ldr	r3, [r1, #16]
10013202:	9000      	str	r0, [sp, #0]
10013204:	000c      	movs	r4, r1
10013206:	4293      	cmp	r3, r2
10013208:	da00      	bge.n	1001320c <_printf_common+0x14>
1001320a:	0013      	movs	r3, r2
1001320c:	0022      	movs	r2, r4
1001320e:	603b      	str	r3, [r7, #0]
10013210:	3243      	adds	r2, #67	; 0x43
10013212:	7812      	ldrb	r2, [r2, #0]
10013214:	2a00      	cmp	r2, #0
10013216:	d001      	beq.n	1001321c <_printf_common+0x24>
10013218:	3301      	adds	r3, #1
1001321a:	603b      	str	r3, [r7, #0]
1001321c:	6823      	ldr	r3, [r4, #0]
1001321e:	069b      	lsls	r3, r3, #26
10013220:	d502      	bpl.n	10013228 <_printf_common+0x30>
10013222:	683b      	ldr	r3, [r7, #0]
10013224:	3302      	adds	r3, #2
10013226:	603b      	str	r3, [r7, #0]
10013228:	2506      	movs	r5, #6
1001322a:	6823      	ldr	r3, [r4, #0]
1001322c:	401d      	ands	r5, r3
1001322e:	d01e      	beq.n	1001326e <_printf_common+0x76>
10013230:	0023      	movs	r3, r4
10013232:	3343      	adds	r3, #67	; 0x43
10013234:	781b      	ldrb	r3, [r3, #0]
10013236:	1e5a      	subs	r2, r3, #1
10013238:	4193      	sbcs	r3, r2
1001323a:	6822      	ldr	r2, [r4, #0]
1001323c:	0692      	lsls	r2, r2, #26
1001323e:	d51c      	bpl.n	1001327a <_printf_common+0x82>
10013240:	2030      	movs	r0, #48	; 0x30
10013242:	18e1      	adds	r1, r4, r3
10013244:	3143      	adds	r1, #67	; 0x43
10013246:	7008      	strb	r0, [r1, #0]
10013248:	0021      	movs	r1, r4
1001324a:	1c5a      	adds	r2, r3, #1
1001324c:	3145      	adds	r1, #69	; 0x45
1001324e:	7809      	ldrb	r1, [r1, #0]
10013250:	18a2      	adds	r2, r4, r2
10013252:	3243      	adds	r2, #67	; 0x43
10013254:	3302      	adds	r3, #2
10013256:	7011      	strb	r1, [r2, #0]
10013258:	e00f      	b.n	1001327a <_printf_common+0x82>
1001325a:	0022      	movs	r2, r4
1001325c:	2301      	movs	r3, #1
1001325e:	3219      	adds	r2, #25
10013260:	9901      	ldr	r1, [sp, #4]
10013262:	9800      	ldr	r0, [sp, #0]
10013264:	9e08      	ldr	r6, [sp, #32]
10013266:	47b0      	blx	r6
10013268:	1c43      	adds	r3, r0, #1
1001326a:	d00e      	beq.n	1001328a <_printf_common+0x92>
1001326c:	3501      	adds	r5, #1
1001326e:	68e3      	ldr	r3, [r4, #12]
10013270:	683a      	ldr	r2, [r7, #0]
10013272:	1a9b      	subs	r3, r3, r2
10013274:	429d      	cmp	r5, r3
10013276:	dbf0      	blt.n	1001325a <_printf_common+0x62>
10013278:	e7da      	b.n	10013230 <_printf_common+0x38>
1001327a:	0022      	movs	r2, r4
1001327c:	9901      	ldr	r1, [sp, #4]
1001327e:	3243      	adds	r2, #67	; 0x43
10013280:	9800      	ldr	r0, [sp, #0]
10013282:	9d08      	ldr	r5, [sp, #32]
10013284:	47a8      	blx	r5
10013286:	1c43      	adds	r3, r0, #1
10013288:	d102      	bne.n	10013290 <_printf_common+0x98>
1001328a:	2001      	movs	r0, #1
1001328c:	4240      	negs	r0, r0
1001328e:	e020      	b.n	100132d2 <_printf_common+0xda>
10013290:	2306      	movs	r3, #6
10013292:	6820      	ldr	r0, [r4, #0]
10013294:	68e1      	ldr	r1, [r4, #12]
10013296:	683a      	ldr	r2, [r7, #0]
10013298:	4003      	ands	r3, r0
1001329a:	2500      	movs	r5, #0
1001329c:	2b04      	cmp	r3, #4
1001329e:	d103      	bne.n	100132a8 <_printf_common+0xb0>
100132a0:	1a8d      	subs	r5, r1, r2
100132a2:	43eb      	mvns	r3, r5
100132a4:	17db      	asrs	r3, r3, #31
100132a6:	401d      	ands	r5, r3
100132a8:	68a3      	ldr	r3, [r4, #8]
100132aa:	6922      	ldr	r2, [r4, #16]
100132ac:	4293      	cmp	r3, r2
100132ae:	dd01      	ble.n	100132b4 <_printf_common+0xbc>
100132b0:	1a9b      	subs	r3, r3, r2
100132b2:	18ed      	adds	r5, r5, r3
100132b4:	2700      	movs	r7, #0
100132b6:	42bd      	cmp	r5, r7
100132b8:	d00a      	beq.n	100132d0 <_printf_common+0xd8>
100132ba:	0022      	movs	r2, r4
100132bc:	2301      	movs	r3, #1
100132be:	321a      	adds	r2, #26
100132c0:	9901      	ldr	r1, [sp, #4]
100132c2:	9800      	ldr	r0, [sp, #0]
100132c4:	9e08      	ldr	r6, [sp, #32]
100132c6:	47b0      	blx	r6
100132c8:	1c43      	adds	r3, r0, #1
100132ca:	d0de      	beq.n	1001328a <_printf_common+0x92>
100132cc:	3701      	adds	r7, #1
100132ce:	e7f2      	b.n	100132b6 <_printf_common+0xbe>
100132d0:	2000      	movs	r0, #0
100132d2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

100132d4 <_printf_i>:
100132d4:	b5f0      	push	{r4, r5, r6, r7, lr}
100132d6:	b08b      	sub	sp, #44	; 0x2c
100132d8:	9206      	str	r2, [sp, #24]
100132da:	000a      	movs	r2, r1
100132dc:	3243      	adds	r2, #67	; 0x43
100132de:	9307      	str	r3, [sp, #28]
100132e0:	9005      	str	r0, [sp, #20]
100132e2:	9204      	str	r2, [sp, #16]
100132e4:	7e0a      	ldrb	r2, [r1, #24]
100132e6:	000c      	movs	r4, r1
100132e8:	9b10      	ldr	r3, [sp, #64]	; 0x40
100132ea:	2a6e      	cmp	r2, #110	; 0x6e
100132ec:	d100      	bne.n	100132f0 <_printf_i+0x1c>
100132ee:	e0ab      	b.n	10013448 <_printf_i+0x174>
100132f0:	d811      	bhi.n	10013316 <_printf_i+0x42>
100132f2:	2a63      	cmp	r2, #99	; 0x63
100132f4:	d022      	beq.n	1001333c <_printf_i+0x68>
100132f6:	d809      	bhi.n	1001330c <_printf_i+0x38>
100132f8:	2a00      	cmp	r2, #0
100132fa:	d100      	bne.n	100132fe <_printf_i+0x2a>
100132fc:	e0b5      	b.n	1001346a <_printf_i+0x196>
100132fe:	2a58      	cmp	r2, #88	; 0x58
10013300:	d000      	beq.n	10013304 <_printf_i+0x30>
10013302:	e0c5      	b.n	10013490 <_printf_i+0x1bc>
10013304:	3145      	adds	r1, #69	; 0x45
10013306:	700a      	strb	r2, [r1, #0]
10013308:	4a81      	ldr	r2, [pc, #516]	; (10013510 <_printf_i+0x23c>)
1001330a:	e04f      	b.n	100133ac <_printf_i+0xd8>
1001330c:	2a64      	cmp	r2, #100	; 0x64
1001330e:	d01d      	beq.n	1001334c <_printf_i+0x78>
10013310:	2a69      	cmp	r2, #105	; 0x69
10013312:	d01b      	beq.n	1001334c <_printf_i+0x78>
10013314:	e0bc      	b.n	10013490 <_printf_i+0x1bc>
10013316:	2a73      	cmp	r2, #115	; 0x73
10013318:	d100      	bne.n	1001331c <_printf_i+0x48>
1001331a:	e0aa      	b.n	10013472 <_printf_i+0x19e>
1001331c:	d809      	bhi.n	10013332 <_printf_i+0x5e>
1001331e:	2a6f      	cmp	r2, #111	; 0x6f
10013320:	d029      	beq.n	10013376 <_printf_i+0xa2>
10013322:	2a70      	cmp	r2, #112	; 0x70
10013324:	d000      	beq.n	10013328 <_printf_i+0x54>
10013326:	e0b3      	b.n	10013490 <_printf_i+0x1bc>
10013328:	2220      	movs	r2, #32
1001332a:	6809      	ldr	r1, [r1, #0]
1001332c:	430a      	orrs	r2, r1
1001332e:	6022      	str	r2, [r4, #0]
10013330:	e037      	b.n	100133a2 <_printf_i+0xce>
10013332:	2a75      	cmp	r2, #117	; 0x75
10013334:	d01f      	beq.n	10013376 <_printf_i+0xa2>
10013336:	2a78      	cmp	r2, #120	; 0x78
10013338:	d033      	beq.n	100133a2 <_printf_i+0xce>
1001333a:	e0a9      	b.n	10013490 <_printf_i+0x1bc>
1001333c:	000e      	movs	r6, r1
1001333e:	681a      	ldr	r2, [r3, #0]
10013340:	3642      	adds	r6, #66	; 0x42
10013342:	1d11      	adds	r1, r2, #4
10013344:	6019      	str	r1, [r3, #0]
10013346:	6813      	ldr	r3, [r2, #0]
10013348:	7033      	strb	r3, [r6, #0]
1001334a:	e0a4      	b.n	10013496 <_printf_i+0x1c2>
1001334c:	6821      	ldr	r1, [r4, #0]
1001334e:	681a      	ldr	r2, [r3, #0]
10013350:	0608      	lsls	r0, r1, #24
10013352:	d406      	bmi.n	10013362 <_printf_i+0x8e>
10013354:	0649      	lsls	r1, r1, #25
10013356:	d504      	bpl.n	10013362 <_printf_i+0x8e>
10013358:	1d11      	adds	r1, r2, #4
1001335a:	6019      	str	r1, [r3, #0]
1001335c:	2300      	movs	r3, #0
1001335e:	5ed5      	ldrsh	r5, [r2, r3]
10013360:	e002      	b.n	10013368 <_printf_i+0x94>
10013362:	1d11      	adds	r1, r2, #4
10013364:	6019      	str	r1, [r3, #0]
10013366:	6815      	ldr	r5, [r2, #0]
10013368:	2d00      	cmp	r5, #0
1001336a:	da3b      	bge.n	100133e4 <_printf_i+0x110>
1001336c:	232d      	movs	r3, #45	; 0x2d
1001336e:	9a04      	ldr	r2, [sp, #16]
10013370:	426d      	negs	r5, r5
10013372:	7013      	strb	r3, [r2, #0]
10013374:	e036      	b.n	100133e4 <_printf_i+0x110>
10013376:	6821      	ldr	r1, [r4, #0]
10013378:	681a      	ldr	r2, [r3, #0]
1001337a:	0608      	lsls	r0, r1, #24
1001337c:	d406      	bmi.n	1001338c <_printf_i+0xb8>
1001337e:	0649      	lsls	r1, r1, #25
10013380:	d504      	bpl.n	1001338c <_printf_i+0xb8>
10013382:	6815      	ldr	r5, [r2, #0]
10013384:	1d11      	adds	r1, r2, #4
10013386:	6019      	str	r1, [r3, #0]
10013388:	b2ad      	uxth	r5, r5
1001338a:	e002      	b.n	10013392 <_printf_i+0xbe>
1001338c:	1d11      	adds	r1, r2, #4
1001338e:	6019      	str	r1, [r3, #0]
10013390:	6815      	ldr	r5, [r2, #0]
10013392:	4b5f      	ldr	r3, [pc, #380]	; (10013510 <_printf_i+0x23c>)
10013394:	7e22      	ldrb	r2, [r4, #24]
10013396:	9303      	str	r3, [sp, #12]
10013398:	2708      	movs	r7, #8
1001339a:	2a6f      	cmp	r2, #111	; 0x6f
1001339c:	d01d      	beq.n	100133da <_printf_i+0x106>
1001339e:	270a      	movs	r7, #10
100133a0:	e01b      	b.n	100133da <_printf_i+0x106>
100133a2:	0022      	movs	r2, r4
100133a4:	2178      	movs	r1, #120	; 0x78
100133a6:	3245      	adds	r2, #69	; 0x45
100133a8:	7011      	strb	r1, [r2, #0]
100133aa:	4a5a      	ldr	r2, [pc, #360]	; (10013514 <_printf_i+0x240>)
100133ac:	6819      	ldr	r1, [r3, #0]
100133ae:	9203      	str	r2, [sp, #12]
100133b0:	1d08      	adds	r0, r1, #4
100133b2:	6822      	ldr	r2, [r4, #0]
100133b4:	6018      	str	r0, [r3, #0]
100133b6:	680d      	ldr	r5, [r1, #0]
100133b8:	0610      	lsls	r0, r2, #24
100133ba:	d402      	bmi.n	100133c2 <_printf_i+0xee>
100133bc:	0650      	lsls	r0, r2, #25
100133be:	d500      	bpl.n	100133c2 <_printf_i+0xee>
100133c0:	b2ad      	uxth	r5, r5
100133c2:	07d3      	lsls	r3, r2, #31
100133c4:	d502      	bpl.n	100133cc <_printf_i+0xf8>
100133c6:	2320      	movs	r3, #32
100133c8:	431a      	orrs	r2, r3
100133ca:	6022      	str	r2, [r4, #0]
100133cc:	2710      	movs	r7, #16
100133ce:	2d00      	cmp	r5, #0
100133d0:	d103      	bne.n	100133da <_printf_i+0x106>
100133d2:	2320      	movs	r3, #32
100133d4:	6822      	ldr	r2, [r4, #0]
100133d6:	439a      	bics	r2, r3
100133d8:	6022      	str	r2, [r4, #0]
100133da:	0023      	movs	r3, r4
100133dc:	2200      	movs	r2, #0
100133de:	3343      	adds	r3, #67	; 0x43
100133e0:	701a      	strb	r2, [r3, #0]
100133e2:	e002      	b.n	100133ea <_printf_i+0x116>
100133e4:	270a      	movs	r7, #10
100133e6:	4b4a      	ldr	r3, [pc, #296]	; (10013510 <_printf_i+0x23c>)
100133e8:	9303      	str	r3, [sp, #12]
100133ea:	6863      	ldr	r3, [r4, #4]
100133ec:	60a3      	str	r3, [r4, #8]
100133ee:	2b00      	cmp	r3, #0
100133f0:	db09      	blt.n	10013406 <_printf_i+0x132>
100133f2:	2204      	movs	r2, #4
100133f4:	6821      	ldr	r1, [r4, #0]
100133f6:	4391      	bics	r1, r2
100133f8:	6021      	str	r1, [r4, #0]
100133fa:	2d00      	cmp	r5, #0
100133fc:	d105      	bne.n	1001340a <_printf_i+0x136>
100133fe:	9e04      	ldr	r6, [sp, #16]
10013400:	2b00      	cmp	r3, #0
10013402:	d011      	beq.n	10013428 <_printf_i+0x154>
10013404:	e07b      	b.n	100134fe <_printf_i+0x22a>
10013406:	2d00      	cmp	r5, #0
10013408:	d079      	beq.n	100134fe <_printf_i+0x22a>
1001340a:	9e04      	ldr	r6, [sp, #16]
1001340c:	0028      	movs	r0, r5
1001340e:	0039      	movs	r1, r7
10013410:	f7fd ff86 	bl	10011320 <__aeabi_uidivmod>
10013414:	9b03      	ldr	r3, [sp, #12]
10013416:	3e01      	subs	r6, #1
10013418:	5c5b      	ldrb	r3, [r3, r1]
1001341a:	0028      	movs	r0, r5
1001341c:	7033      	strb	r3, [r6, #0]
1001341e:	0039      	movs	r1, r7
10013420:	f7fd fef8 	bl	10011214 <__aeabi_uidiv>
10013424:	1e05      	subs	r5, r0, #0
10013426:	d1f1      	bne.n	1001340c <_printf_i+0x138>
10013428:	2f08      	cmp	r7, #8
1001342a:	d109      	bne.n	10013440 <_printf_i+0x16c>
1001342c:	6823      	ldr	r3, [r4, #0]
1001342e:	07db      	lsls	r3, r3, #31
10013430:	d506      	bpl.n	10013440 <_printf_i+0x16c>
10013432:	6863      	ldr	r3, [r4, #4]
10013434:	6922      	ldr	r2, [r4, #16]
10013436:	4293      	cmp	r3, r2
10013438:	dc02      	bgt.n	10013440 <_printf_i+0x16c>
1001343a:	2330      	movs	r3, #48	; 0x30
1001343c:	3e01      	subs	r6, #1
1001343e:	7033      	strb	r3, [r6, #0]
10013440:	9b04      	ldr	r3, [sp, #16]
10013442:	1b9b      	subs	r3, r3, r6
10013444:	6123      	str	r3, [r4, #16]
10013446:	e02b      	b.n	100134a0 <_printf_i+0x1cc>
10013448:	6809      	ldr	r1, [r1, #0]
1001344a:	681a      	ldr	r2, [r3, #0]
1001344c:	0608      	lsls	r0, r1, #24
1001344e:	d407      	bmi.n	10013460 <_printf_i+0x18c>
10013450:	0649      	lsls	r1, r1, #25
10013452:	d505      	bpl.n	10013460 <_printf_i+0x18c>
10013454:	1d11      	adds	r1, r2, #4
10013456:	6019      	str	r1, [r3, #0]
10013458:	6813      	ldr	r3, [r2, #0]
1001345a:	8aa2      	ldrh	r2, [r4, #20]
1001345c:	801a      	strh	r2, [r3, #0]
1001345e:	e004      	b.n	1001346a <_printf_i+0x196>
10013460:	1d11      	adds	r1, r2, #4
10013462:	6019      	str	r1, [r3, #0]
10013464:	6813      	ldr	r3, [r2, #0]
10013466:	6962      	ldr	r2, [r4, #20]
10013468:	601a      	str	r2, [r3, #0]
1001346a:	2300      	movs	r3, #0
1001346c:	9e04      	ldr	r6, [sp, #16]
1001346e:	6123      	str	r3, [r4, #16]
10013470:	e016      	b.n	100134a0 <_printf_i+0x1cc>
10013472:	681a      	ldr	r2, [r3, #0]
10013474:	1d11      	adds	r1, r2, #4
10013476:	6019      	str	r1, [r3, #0]
10013478:	6816      	ldr	r6, [r2, #0]
1001347a:	2100      	movs	r1, #0
1001347c:	6862      	ldr	r2, [r4, #4]
1001347e:	0030      	movs	r0, r6
10013480:	f000 f92a 	bl	100136d8 <memchr>
10013484:	2800      	cmp	r0, #0
10013486:	d001      	beq.n	1001348c <_printf_i+0x1b8>
10013488:	1b80      	subs	r0, r0, r6
1001348a:	6060      	str	r0, [r4, #4]
1001348c:	6863      	ldr	r3, [r4, #4]
1001348e:	e003      	b.n	10013498 <_printf_i+0x1c4>
10013490:	0026      	movs	r6, r4
10013492:	3642      	adds	r6, #66	; 0x42
10013494:	7032      	strb	r2, [r6, #0]
10013496:	2301      	movs	r3, #1
10013498:	6123      	str	r3, [r4, #16]
1001349a:	2300      	movs	r3, #0
1001349c:	9a04      	ldr	r2, [sp, #16]
1001349e:	7013      	strb	r3, [r2, #0]
100134a0:	9b07      	ldr	r3, [sp, #28]
100134a2:	aa09      	add	r2, sp, #36	; 0x24
100134a4:	9300      	str	r3, [sp, #0]
100134a6:	0021      	movs	r1, r4
100134a8:	9b06      	ldr	r3, [sp, #24]
100134aa:	9805      	ldr	r0, [sp, #20]
100134ac:	f7ff fea4 	bl	100131f8 <_printf_common>
100134b0:	1c43      	adds	r3, r0, #1
100134b2:	d102      	bne.n	100134ba <_printf_i+0x1e6>
100134b4:	2001      	movs	r0, #1
100134b6:	4240      	negs	r0, r0
100134b8:	e027      	b.n	1001350a <_printf_i+0x236>
100134ba:	6923      	ldr	r3, [r4, #16]
100134bc:	0032      	movs	r2, r6
100134be:	9906      	ldr	r1, [sp, #24]
100134c0:	9805      	ldr	r0, [sp, #20]
100134c2:	9d07      	ldr	r5, [sp, #28]
100134c4:	47a8      	blx	r5
100134c6:	1c43      	adds	r3, r0, #1
100134c8:	d0f4      	beq.n	100134b4 <_printf_i+0x1e0>
100134ca:	6823      	ldr	r3, [r4, #0]
100134cc:	2500      	movs	r5, #0
100134ce:	079b      	lsls	r3, r3, #30
100134d0:	d40f      	bmi.n	100134f2 <_printf_i+0x21e>
100134d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
100134d4:	68e0      	ldr	r0, [r4, #12]
100134d6:	4298      	cmp	r0, r3
100134d8:	da17      	bge.n	1001350a <_printf_i+0x236>
100134da:	0018      	movs	r0, r3
100134dc:	e015      	b.n	1001350a <_printf_i+0x236>
100134de:	0022      	movs	r2, r4
100134e0:	2301      	movs	r3, #1
100134e2:	3219      	adds	r2, #25
100134e4:	9906      	ldr	r1, [sp, #24]
100134e6:	9805      	ldr	r0, [sp, #20]
100134e8:	9e07      	ldr	r6, [sp, #28]
100134ea:	47b0      	blx	r6
100134ec:	1c43      	adds	r3, r0, #1
100134ee:	d0e1      	beq.n	100134b4 <_printf_i+0x1e0>
100134f0:	3501      	adds	r5, #1
100134f2:	68e3      	ldr	r3, [r4, #12]
100134f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
100134f6:	1a9b      	subs	r3, r3, r2
100134f8:	429d      	cmp	r5, r3
100134fa:	dbf0      	blt.n	100134de <_printf_i+0x20a>
100134fc:	e7e9      	b.n	100134d2 <_printf_i+0x1fe>
100134fe:	0026      	movs	r6, r4
10013500:	9b03      	ldr	r3, [sp, #12]
10013502:	3642      	adds	r6, #66	; 0x42
10013504:	781b      	ldrb	r3, [r3, #0]
10013506:	7033      	strb	r3, [r6, #0]
10013508:	e78e      	b.n	10013428 <_printf_i+0x154>
1001350a:	b00b      	add	sp, #44	; 0x2c
1001350c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001350e:	46c0      	nop			; (mov r8, r8)
10013510:	10015315 	.word	0x10015315
10013514:	10015326 	.word	0x10015326

10013518 <_putc_r>:
10013518:	b570      	push	{r4, r5, r6, lr}
1001351a:	0006      	movs	r6, r0
1001351c:	000d      	movs	r5, r1
1001351e:	0014      	movs	r4, r2
10013520:	2800      	cmp	r0, #0
10013522:	d004      	beq.n	1001352e <_putc_r+0x16>
10013524:	6983      	ldr	r3, [r0, #24]
10013526:	2b00      	cmp	r3, #0
10013528:	d101      	bne.n	1001352e <_putc_r+0x16>
1001352a:	f7ff fc29 	bl	10012d80 <__sinit>
1001352e:	4b12      	ldr	r3, [pc, #72]	; (10013578 <_putc_r+0x60>)
10013530:	429c      	cmp	r4, r3
10013532:	d101      	bne.n	10013538 <_putc_r+0x20>
10013534:	6874      	ldr	r4, [r6, #4]
10013536:	e008      	b.n	1001354a <_putc_r+0x32>
10013538:	4b10      	ldr	r3, [pc, #64]	; (1001357c <_putc_r+0x64>)
1001353a:	429c      	cmp	r4, r3
1001353c:	d101      	bne.n	10013542 <_putc_r+0x2a>
1001353e:	68b4      	ldr	r4, [r6, #8]
10013540:	e003      	b.n	1001354a <_putc_r+0x32>
10013542:	4b0f      	ldr	r3, [pc, #60]	; (10013580 <_putc_r+0x68>)
10013544:	429c      	cmp	r4, r3
10013546:	d100      	bne.n	1001354a <_putc_r+0x32>
10013548:	68f4      	ldr	r4, [r6, #12]
1001354a:	68a3      	ldr	r3, [r4, #8]
1001354c:	3b01      	subs	r3, #1
1001354e:	60a3      	str	r3, [r4, #8]
10013550:	2b00      	cmp	r3, #0
10013552:	da05      	bge.n	10013560 <_putc_r+0x48>
10013554:	69a2      	ldr	r2, [r4, #24]
10013556:	4293      	cmp	r3, r2
10013558:	db08      	blt.n	1001356c <_putc_r+0x54>
1001355a:	b2eb      	uxtb	r3, r5
1001355c:	2b0a      	cmp	r3, #10
1001355e:	d005      	beq.n	1001356c <_putc_r+0x54>
10013560:	6823      	ldr	r3, [r4, #0]
10013562:	b2e8      	uxtb	r0, r5
10013564:	1c5a      	adds	r2, r3, #1
10013566:	6022      	str	r2, [r4, #0]
10013568:	701d      	strb	r5, [r3, #0]
1001356a:	e004      	b.n	10013576 <_putc_r+0x5e>
1001356c:	0022      	movs	r2, r4
1001356e:	0029      	movs	r1, r5
10013570:	0030      	movs	r0, r6
10013572:	f7ff fa43 	bl	100129fc <__swbuf_r>
10013576:	bd70      	pop	{r4, r5, r6, pc}
10013578:	100152a4 	.word	0x100152a4
1001357c:	100152c4 	.word	0x100152c4
10013580:	100152e4 	.word	0x100152e4

10013584 <__sread>:
10013584:	b570      	push	{r4, r5, r6, lr}
10013586:	000c      	movs	r4, r1
10013588:	250e      	movs	r5, #14
1001358a:	5f49      	ldrsh	r1, [r1, r5]
1001358c:	f000 f8b0 	bl	100136f0 <_read_r>
10013590:	2800      	cmp	r0, #0
10013592:	db03      	blt.n	1001359c <__sread+0x18>
10013594:	6d63      	ldr	r3, [r4, #84]	; 0x54
10013596:	181b      	adds	r3, r3, r0
10013598:	6563      	str	r3, [r4, #84]	; 0x54
1001359a:	e003      	b.n	100135a4 <__sread+0x20>
1001359c:	89a2      	ldrh	r2, [r4, #12]
1001359e:	4b02      	ldr	r3, [pc, #8]	; (100135a8 <__sread+0x24>)
100135a0:	4013      	ands	r3, r2
100135a2:	81a3      	strh	r3, [r4, #12]
100135a4:	bd70      	pop	{r4, r5, r6, pc}
100135a6:	46c0      	nop			; (mov r8, r8)
100135a8:	ffffefff 	.word	0xffffefff

100135ac <__swrite>:
100135ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100135ae:	001f      	movs	r7, r3
100135b0:	898b      	ldrh	r3, [r1, #12]
100135b2:	0005      	movs	r5, r0
100135b4:	000c      	movs	r4, r1
100135b6:	0016      	movs	r6, r2
100135b8:	05db      	lsls	r3, r3, #23
100135ba:	d505      	bpl.n	100135c8 <__swrite+0x1c>
100135bc:	230e      	movs	r3, #14
100135be:	5ec9      	ldrsh	r1, [r1, r3]
100135c0:	2200      	movs	r2, #0
100135c2:	2302      	movs	r3, #2
100135c4:	f000 f874 	bl	100136b0 <_lseek_r>
100135c8:	89a2      	ldrh	r2, [r4, #12]
100135ca:	4b05      	ldr	r3, [pc, #20]	; (100135e0 <__swrite+0x34>)
100135cc:	0028      	movs	r0, r5
100135ce:	4013      	ands	r3, r2
100135d0:	81a3      	strh	r3, [r4, #12]
100135d2:	0032      	movs	r2, r6
100135d4:	230e      	movs	r3, #14
100135d6:	5ee1      	ldrsh	r1, [r4, r3]
100135d8:	003b      	movs	r3, r7
100135da:	f000 f81f 	bl	1001361c <_write_r>
100135de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100135e0:	ffffefff 	.word	0xffffefff

100135e4 <__sseek>:
100135e4:	b570      	push	{r4, r5, r6, lr}
100135e6:	000c      	movs	r4, r1
100135e8:	250e      	movs	r5, #14
100135ea:	5f49      	ldrsh	r1, [r1, r5]
100135ec:	f000 f860 	bl	100136b0 <_lseek_r>
100135f0:	89a3      	ldrh	r3, [r4, #12]
100135f2:	1c42      	adds	r2, r0, #1
100135f4:	d103      	bne.n	100135fe <__sseek+0x1a>
100135f6:	4a05      	ldr	r2, [pc, #20]	; (1001360c <__sseek+0x28>)
100135f8:	4013      	ands	r3, r2
100135fa:	81a3      	strh	r3, [r4, #12]
100135fc:	e004      	b.n	10013608 <__sseek+0x24>
100135fe:	2280      	movs	r2, #128	; 0x80
10013600:	0152      	lsls	r2, r2, #5
10013602:	4313      	orrs	r3, r2
10013604:	81a3      	strh	r3, [r4, #12]
10013606:	6560      	str	r0, [r4, #84]	; 0x54
10013608:	bd70      	pop	{r4, r5, r6, pc}
1001360a:	46c0      	nop			; (mov r8, r8)
1001360c:	ffffefff 	.word	0xffffefff

10013610 <__sclose>:
10013610:	b510      	push	{r4, lr}
10013612:	230e      	movs	r3, #14
10013614:	5ec9      	ldrsh	r1, [r1, r3]
10013616:	f000 f815 	bl	10013644 <_close_r>
1001361a:	bd10      	pop	{r4, pc}

1001361c <_write_r>:
1001361c:	b570      	push	{r4, r5, r6, lr}
1001361e:	0005      	movs	r5, r0
10013620:	0008      	movs	r0, r1
10013622:	0011      	movs	r1, r2
10013624:	2200      	movs	r2, #0
10013626:	4c06      	ldr	r4, [pc, #24]	; (10013640 <_write_r+0x24>)
10013628:	6022      	str	r2, [r4, #0]
1001362a:	001a      	movs	r2, r3
1001362c:	f7f8 fbf6 	bl	1000be1c <_write>
10013630:	1c43      	adds	r3, r0, #1
10013632:	d103      	bne.n	1001363c <_write_r+0x20>
10013634:	6823      	ldr	r3, [r4, #0]
10013636:	2b00      	cmp	r3, #0
10013638:	d000      	beq.n	1001363c <_write_r+0x20>
1001363a:	602b      	str	r3, [r5, #0]
1001363c:	bd70      	pop	{r4, r5, r6, pc}
1001363e:	46c0      	nop			; (mov r8, r8)
10013640:	10018200 	.word	0x10018200

10013644 <_close_r>:
10013644:	2300      	movs	r3, #0
10013646:	b570      	push	{r4, r5, r6, lr}
10013648:	4c06      	ldr	r4, [pc, #24]	; (10013664 <_close_r+0x20>)
1001364a:	0005      	movs	r5, r0
1001364c:	0008      	movs	r0, r1
1001364e:	6023      	str	r3, [r4, #0]
10013650:	f7f8 fc1e 	bl	1000be90 <_close>
10013654:	1c43      	adds	r3, r0, #1
10013656:	d103      	bne.n	10013660 <_close_r+0x1c>
10013658:	6823      	ldr	r3, [r4, #0]
1001365a:	2b00      	cmp	r3, #0
1001365c:	d000      	beq.n	10013660 <_close_r+0x1c>
1001365e:	602b      	str	r3, [r5, #0]
10013660:	bd70      	pop	{r4, r5, r6, pc}
10013662:	46c0      	nop			; (mov r8, r8)
10013664:	10018200 	.word	0x10018200

10013668 <_fstat_r>:
10013668:	2300      	movs	r3, #0
1001366a:	b570      	push	{r4, r5, r6, lr}
1001366c:	4c06      	ldr	r4, [pc, #24]	; (10013688 <_fstat_r+0x20>)
1001366e:	0005      	movs	r5, r0
10013670:	0008      	movs	r0, r1
10013672:	0011      	movs	r1, r2
10013674:	6023      	str	r3, [r4, #0]
10013676:	f7f8 fc0f 	bl	1000be98 <_fstat>
1001367a:	1c43      	adds	r3, r0, #1
1001367c:	d103      	bne.n	10013686 <_fstat_r+0x1e>
1001367e:	6823      	ldr	r3, [r4, #0]
10013680:	2b00      	cmp	r3, #0
10013682:	d000      	beq.n	10013686 <_fstat_r+0x1e>
10013684:	602b      	str	r3, [r5, #0]
10013686:	bd70      	pop	{r4, r5, r6, pc}
10013688:	10018200 	.word	0x10018200

1001368c <_isatty_r>:
1001368c:	2300      	movs	r3, #0
1001368e:	b570      	push	{r4, r5, r6, lr}
10013690:	4c06      	ldr	r4, [pc, #24]	; (100136ac <_isatty_r+0x20>)
10013692:	0005      	movs	r5, r0
10013694:	0008      	movs	r0, r1
10013696:	6023      	str	r3, [r4, #0]
10013698:	f7f8 fc04 	bl	1000bea4 <_isatty>
1001369c:	1c43      	adds	r3, r0, #1
1001369e:	d103      	bne.n	100136a8 <_isatty_r+0x1c>
100136a0:	6823      	ldr	r3, [r4, #0]
100136a2:	2b00      	cmp	r3, #0
100136a4:	d000      	beq.n	100136a8 <_isatty_r+0x1c>
100136a6:	602b      	str	r3, [r5, #0]
100136a8:	bd70      	pop	{r4, r5, r6, pc}
100136aa:	46c0      	nop			; (mov r8, r8)
100136ac:	10018200 	.word	0x10018200

100136b0 <_lseek_r>:
100136b0:	b570      	push	{r4, r5, r6, lr}
100136b2:	0005      	movs	r5, r0
100136b4:	0008      	movs	r0, r1
100136b6:	0011      	movs	r1, r2
100136b8:	2200      	movs	r2, #0
100136ba:	4c06      	ldr	r4, [pc, #24]	; (100136d4 <_lseek_r+0x24>)
100136bc:	6022      	str	r2, [r4, #0]
100136be:	001a      	movs	r2, r3
100136c0:	f7f8 fbf2 	bl	1000bea8 <_lseek>
100136c4:	1c43      	adds	r3, r0, #1
100136c6:	d103      	bne.n	100136d0 <_lseek_r+0x20>
100136c8:	6823      	ldr	r3, [r4, #0]
100136ca:	2b00      	cmp	r3, #0
100136cc:	d000      	beq.n	100136d0 <_lseek_r+0x20>
100136ce:	602b      	str	r3, [r5, #0]
100136d0:	bd70      	pop	{r4, r5, r6, pc}
100136d2:	46c0      	nop			; (mov r8, r8)
100136d4:	10018200 	.word	0x10018200

100136d8 <memchr>:
100136d8:	b2c9      	uxtb	r1, r1
100136da:	1882      	adds	r2, r0, r2
100136dc:	4290      	cmp	r0, r2
100136de:	d004      	beq.n	100136ea <memchr+0x12>
100136e0:	7803      	ldrb	r3, [r0, #0]
100136e2:	428b      	cmp	r3, r1
100136e4:	d002      	beq.n	100136ec <memchr+0x14>
100136e6:	3001      	adds	r0, #1
100136e8:	e7f8      	b.n	100136dc <memchr+0x4>
100136ea:	2000      	movs	r0, #0
100136ec:	4770      	bx	lr
	...

100136f0 <_read_r>:
100136f0:	b570      	push	{r4, r5, r6, lr}
100136f2:	0005      	movs	r5, r0
100136f4:	0008      	movs	r0, r1
100136f6:	0011      	movs	r1, r2
100136f8:	2200      	movs	r2, #0
100136fa:	4c06      	ldr	r4, [pc, #24]	; (10013714 <_read_r+0x24>)
100136fc:	6022      	str	r2, [r4, #0]
100136fe:	001a      	movs	r2, r3
10013700:	f7f8 fb6c 	bl	1000bddc <_read>
10013704:	1c43      	adds	r3, r0, #1
10013706:	d103      	bne.n	10013710 <_read_r+0x20>
10013708:	6823      	ldr	r3, [r4, #0]
1001370a:	2b00      	cmp	r3, #0
1001370c:	d000      	beq.n	10013710 <_read_r+0x20>
1001370e:	602b      	str	r3, [r5, #0]
10013710:	bd70      	pop	{r4, r5, r6, pc}
10013712:	46c0      	nop			; (mov r8, r8)
10013714:	10018200 	.word	0x10018200
10013718:	000003e8 	.word	0x000003e8

1001371c <test>:
1001371c:	00000083 00004000 00000200 00c800c8     .....@..........
1001372c:	41a00000 42700000 3f000000 3e666666     ...A..pB...?fff>
1001373c:	3f2ccccd 3f000000 3f000000 0000000a     ..,?...?...?....
1001374c:	72617453 676e6974 61694220 6f4c2073     Starting Bias Lo
1001375c:	5220706f 73646165 00000000 706d6153     op Reads....Samp
1001376c:	3a73656c 0a642520 00000000 65636341     les: %d.....Acce
1001377c:	666f206c 74657366 74616420 57482061     l offset data HW
1001378c:	62205453 253d7469 25203a64 66342e37     ST bit=%d: %7.4f
1001379c:	2e372520 25206634 66342e37 00000a0d      %7.4f %7.4f....
100137ac:	6f727947 66666f20 20746573 61746164     Gyro offset data
100137bc:	53574820 69622054 64253d74 3725203a      HWST bit=%d: %7
100137cc:	2066342e 342e3725 37252066 0d66342e     .4f %7.4f %7.4f.
100137dc:	0000000a 78352325 2325203a 0a0d7835     ....%#5x: %#5x..
100137ec:	00000000 706d6f43 20737361 20746f6e     ....Compass not 
100137fc:	6e756f66 00002e64 72617453 676e6974     found...Starting
1001380c:	55504d20 30303536 53574820 000d2154      MPU6500 HWST!..
1001381c:	72746552 69766569 4220676e 65736169     Retrieving Biase
1001382c:	00000d73 72746552 69766569 4220676e     s...Retrieving B
1001383c:	65736169 72452073 20726f72 6f70202d     iases Error - po
1001384c:	62697373 4920656c 65204332 726f7272     ssible I2C error
1001385c:	00000000 72746552 69766569 5320676e     ....Retrieving S
1001386c:	69422054 73657361 00000000 72746552     T Biases....Retr
1001387c:	69766569 5320676e 69422054 73657361     ieving ST Biases
1001388c:	72724520 2d20726f 736f7020 6c626973      Error - possibl
1001389c:	32492065 72652043 00726f72 64616552     e I2C error.Read
100138ac:	20676e69 2050544f 69676552 72657473     ing OTP Register
100138bc:	72724520 002e726f 65636341 544f206c      Error..Accel OT
100138cc:	64253a50 6425202c 6425202c 0000000a     P:%d, %d, %d....
100138dc:	45434341 52433a4c 52455449 41204149     ACCEL:CRITERIA A
100138ec:	00000000 73616942 6968535f 253d7466     ....Bias_Shift=%
100138fc:	66342e37 6942202c 525f7361 253d6765     7.4f, Bias_Reg=%
1001390c:	66342e37 6942202c 485f7361 3d545357     7.4f, Bias_HWST=
1001391c:	342e3725 000a0d66 2050544f 756c6176     %7.4f...OTP valu
1001392c:	25203a65 66342e37 00000a0d 69746172     e: %7.4f....rati
1001393c:	37253d6f 2c66342e 72687420 6f687365     o=%7.4f, thresho
1001394c:	253d646c 66342e37 00000a0d 45434341     ld=%7.4f....ACCE
1001395c:	6146204c 41206c69 20736978 6425203d     L Fail Axis = %d
1001396c:	0000000a 45434341 52433a4c 52455449     ....ACCEL:CRITER
1001397c:	42204149 0000000d 206e694d 203a474d     IA B....Min MG: 
1001398c:	342e3725 000a0d66 2078614d 203a474d     %7.4f...Max MG: 
1001399c:	342e3725 000a0d66 73616942 6968735f     %7.4f...Bias_shi
100139ac:	253d7466 66342e37 7473202c 2e37253d     ft=%7.4f, st=%7.
100139bc:	202c6634 3d676572 342e3725 00000a66     4f, reg=%7.4f...
100139cc:	65636341 4146206c 61204c49 3a736978     Accel FAIL axis:
100139dc:	3c206425 3232203d 20676d35 3e20726f     %d <= 225mg or >
100139ec:	3736203d 0a676d35 00000000 65636341     = 675mg.....Acce
100139fc:	52433a6c 52455449 43204149 6962203a     l:CRITERIA C: bi
10013a0c:	6c207361 20737365 6e616874 2e372520     as less than %7.
10013a1c:	000a6634 4c494146 203a4445 65636341     4f..FAILED: Acce
10013a2c:	7861206c 253a7369 203d2064 20646c25     l axis:%d = %ld 
10013a3c:	3035203e 0a676d30 00000000 65636341     > 500mg.....Acce
10013a4c:	6553206c 5420666c 20747365 75736552     l Self Test Resu
10013a5c:	3a73746c 0a642520 00000000 6f727947     lts: %d.....Gyro
10013a6c:	50544f20 2c64253a 2c642520 0d642520      OTP:%d, %d, %d.
10013a7c:	0000000a 4f525947 4952433a 49524554     ....GYRO:CRITERI
10013a8c:	00412041 6f727947 69614620 7841206c     A A.Gyro Fail Ax
10013a9c:	3d207369 0a642520 00000000 4f525947     is = %d.....GYRO
10013aac:	4952433a 49524554 0d422041 00000000     :CRITERIA B.....
10013abc:	2078614d 3a535044 2e372520 0a0d6634     Max DPS: %7.4f..
10013acc:	00000000 4f525947 49414620 7861204c     ....GYRO FAIL ax
10013adc:	253a7369 72672064 65746165 68742072     is:%d greater th
10013aec:	36206e61 73706430 0000000a 6f727947     an 60dps....Gyro
10013afc:	4952433a 49524554 3a432041 61696220     :CRITERIA C: bia
10013b0c:	656c2073 74207373 206e6168 342e3725     s less than %7.4
10013b1c:	00000a66 4c494146 203a4445 6f727947     f...FAILED: Gyro
10013b2c:	69786120 64253a73 25203d20 3e20646c      axis:%d = %ld >
10013b3c:	64303220 000a7370 6f727947 6c655320      20dps..Gyro Sel
10013b4c:	65542066 52207473 6c757365 203a7374     f Test Results: 
10013b5c:	000a6425 706d6f43 20737361 666c6553     %d..Compass Self
10013b6c:	73655420 65522074 746c7573 25203a73      Test Results: %
10013b7c:	00000a64 74697845 20676e69 54535748     d...Exiting HWST
10013b8c:	00000000                                ....

10013b90 <hw>:
10013b90:	04000069 01410080 01000000 00001333     i.....A.....3...

10013ba0 <reg>:
10013ba0:	0c1a1975 1c1b236a 201f1e1d 3b437472     u...j#..... rtC;
10013bb0:	3a393841 376c6b69 6d24776f 2625706e     A89:ikl7ow$mnp%&
10013bc0:	2a292827 67646334 00000049 736d735b     '()*4cdgI...[sms
10013bd0:	656c625f 6961705f 65725f72 73657571     _ble_pair_reques
10013be0:	6e665f74 6150095d 6e697269 65722067     t_fn].Pairing re
10013bf0:	73657571 2e2e2e74 656e4220 64252077     quest... Bnew %d
10013c00:	4c42202c 78302045 78323025 3154202c     , BLE 0x%02x, T1
10013c10:	2c642520 20325420 00006425 656d6954      %d, T2 %d..Time
10013c20:	63203172 65727275 6d20746e 3a65646f     r1 current mode:
10013c30:	00642520 736d735b 656c625f 776f705f      %d.[sms_ble_pow
10013c40:	645f7265 5d6e776f 00000000 736d735b     er_down]....[sms
10013c50:	656c625f 776f705f 645f7265 5d6e776f     _ble_power_down]
10013c60:	6f745309 6e697070 6f632067 6e616d6d     .Stopping comman
10013c70:	65722064 76696563 64206465 6e697275     d received durin
10013c80:	64612067 74726576 6d657369 2e746e65     g advertisement.
10013c90:	6f745320 6e697070 2e2e2e67 00000020      Stopping... ...
10013ca0:	6c696166 21216465 00000021 656e6f64     failed!!!...done
10013cb0:	00000021 736d735b 656c625f 776f705f     !...[sms_ble_pow
10013cc0:	645f7265 5d6e776f 65440909 65636976     er_down]..Device
10013cd0:	69617020 2e646572 64202e2e 62617369      paired... disab
10013ce0:	676e696c 746e6920 75727265 20737470     ling interrupts 
10013cf0:	77732026 68637469 20676e69 6e776f64     & switching down
10013d00:	6e657320 73726f73 00000000 736d735b      sensors....[sms
10013d10:	656c625f 776f705f 645f7265 5d6e776f     _ble_power_down]
10013d20:	75430909 6e657272 20796c74 69646e69     ..Currently indi
10013d30:	69746163 0000676e 736d735b 656c625f     cating..[sms_ble
10013d40:	776f705f 645f7265 5d6e776f 65440909     _power_down]..De
10013d50:	65636976 6e6f6320 7463656e 2e2e6465     vice connected..
10013d60:	6964202e 6e6f6373 7463656e 00676e69     . disconnecting.
10013d70:	736d735b 656c625f 7664615f 7065725f     [sms_ble_adv_rep
10013d80:	5f74726f 095d6e66 65766441 73697472     ort_fn].Advertis
10013d90:	6e656d65 69742074 756f656d 2e2e2e74     ement timeout...
10013da0:	00000000 736d735b 656c625f 6e6f635f     ....[sms_ble_con
10013db0:	7463656e 665f6465 09095d6e 69766544     nected_fn]..Devi
10013dc0:	20736563 6e6e6f63 65746365 2e2e2e64     ces connected...
10013dd0:	00000000 736d735b 656c625f 6961705f     ....[sms_ble_pai
10013de0:	5f646572 005d6e66 736d735b 656c625f     red_fn].[sms_ble
10013df0:	7664615f 69747265 095d6573 65766441     _advertise].Adve
10013e00:	73697472 6e656d65 61642074 73206174     rtisement data s
10013e10:	66207465 656c6961 00002164 736d735b     et failed!..[sms
10013e20:	656c625f 7664615f 69747265 095d6573     _ble_advertise].
10013e30:	454c4209 61745320 64657472 76644120     .BLE Started Adv
10013e40:	69747265 656d6573 0000746e 736d735b     ertisement..[sms
10013e50:	7265735f 65636976 7664615f 69747265     _service_adverti
10013e60:	095d6573 20454c42 65766441 73697472     se].BLE Advertis
10013e70:	6e656d65 74732074 20747261 6c696166     ement start fail
10013e80:	203a6465 73616572 30206e6f 00782578     ed: reason 0x%x.
10013e90:	736d735b 656c625f 7369645f 6e6e6f63     [sms_ble_disconn
10013ea0:	65746365 6e665f64 6550095d 64207265     ected_fn].Peer d
10013eb0:	6f637369 63656e6e 2e646574 42202e2e     isconnected... B
10013ec0:	2077656e 202c6425 20454c42 30257830     new %d, BLE 0x%0
10013ed0:	202c7832 25203154 54202c64 64252032     2x, T1 %d, T2 %d
10013ee0:	00000000 6e630a0d 25203a74 00000064     ......cnt: %d...

10013ef0 <sms_ble_gap_cb>:
	...
10013efc:	100094f5 00000000 10009529 10009639     ........)...9...
	...
10013f14:	10009571 10009309 00000000 00000000     q...............
	...

10013f3c <sms_ble_gatt_server_cb>:
10013f3c:	10009355 100093b1 00000000 00000000     U...............
	...
10013f64:	736d735b 7475625f 5f6e6f74 666e6f63     [sms_button_conf
10013f74:	72756769 70095d65 6c626f72 77206d65     igure].problem w
10013f84:	656c6968 74657320 676e6974 20707520     hile setting up 
10013f94:	74747562 00306e6f 736d735b 7475625f     button0.[sms_but
10013fa4:	5f6e6f74 666e6f63 72756769 50095d65     ton_configure].P
10013fb4:	6c626f72 77206d65 656c6968 74657320     roblem while set
10013fc4:	676e6974 20707520 74747562 00316e6f     ting up button1.
10013fd4:	736d735b 7475625f 5f6e6f74 666e6f63     [sms_button_conf
10013fe4:	72756769 50095d65 6c626f72 77206d65     igure].Problem w
10013ff4:	656c6968 74657320 676e6974 20707520     hile setting up 
10014004:	414c5058 44454e49 65737520 75622072     XPLAINED user bu
10014014:	6e6f7474 00000000 736d735b 7475625f     tton....[sms_but
10014024:	5f6e6f74 5f746567 74617473 09095d65     ton_get_state]..
10014034:	74747542 73206e6f 65746174 6425203a     Button state: %d
10014044:	00642520 736d735b 7475625f 5f6e6f74      %d.[sms_button_
10014054:	2d5d6e66 00000030 736d735b 7475625f     fn]-0...[sms_but
10014064:	5f6e6f74 2d5d6e66 00000031 736d735b     ton_fn]-1...[sms
10014074:	7475625f 5f6e6f74 095d6e66 61745309     _button_fn]..Sta
10014084:	6e697472 65732067 726f736e 42282073     rting sensors (B
10014094:	00002930 736d735b 7475625f 5f6e6f74     0)..[sms_button_
100140a4:	095d6e66 6f4e0909 73752074 73206465     fn]...Not used s
100140b4:	65746174 2e2e2e73 00000000 736d735b     tates.......[sms
100140c4:	7475625f 5f6e6f74 095d6e66 61745309     _button_fn]..Sta
100140d4:	6e697472 65732067 726f736e 42282073     rting sensors (B
100140e4:	00002931 736d735b 7475625f 5f6e6f74     1)..[sms_button_
100140f4:	095d6e66 6c697453 6e69206c 61636964     fn].Still indica
10014104:	676e6974 002e2e2e 736d735b 7475625f     ting....[sms_but
10014114:	5f6e6f74 69666564 735f656e 69767265     ton_define_servi
10014124:	5d736563 72655309 65636976 65642073     ces].Services de
10014134:	696e6966 6620676e 656c6961 72202c64     fining failed, r
10014144:	6f736165 7830206e 00007825 736d735b     eason 0x%x..[sms
10014154:	7475625f 5f6e6f74 69666564 735f656e     _button_define_s
10014164:	69767265 5d736563 72655309 65636976     ervices].Service
10014174:	65642073 656e6966 53202c64 6220534d     s defined, SMS b
10014184:	6f747475 6168206e 656c646e 6425203a     utton handle: %d
10014194:	00000000 626f7250 206d656c 6c696877     ....Problem whil
100141a4:	65732065 6e697474 70672067 70206f69     e setting gpio p
100141b4:	00006e69 2e2e7325 4209092e 6572702d     in..%s.....B-pre
100141c4:	64252076 2d42202c 20727563 202c6425     v %d, B-cur %d, 
100141d4:	20454c42 30257830 202c7832 25203154     BLE 0x%02x, T1 %
100141e4:	54202c64 64252032 4d53202c 64252053     d, T2 %d, SMS %d
100141f4:	00000000 736d735b 756d695f 6e6f635f     ....[sms_imu_con
10014204:	75676966 675f6572 5d6f6970 6f725009     figure_gpio].Pro
10014214:	6d656c62 69687720 7320656c 69747465     blem while setti
10014224:	7520676e 4d492070 52442055 70205944     ng up IMU DRDY p
10014234:	00006e69 736d735b 756d695f 6e6f635f     in..[sms_imu_con
10014244:	75676966 675f6572 5d6f6970 6f725009     figure_gpio].Pro
10014254:	6d656c62 69687720 7320656c 69747465     blem while setti
10014264:	7520676e 4d492070 43562055 69702043     ng up IMU VCC pi
10014274:	0000006e 72617453 676e6974 20707520     n...Starting up 
10014284:	2e55504d 00002e2e 6c756f43 6f6e2064     MPU.....Could no
10014294:	6e692074 61697469 657a696c 55504d20     t initialize MPU
100142a4:	00000000 736d735b 64656c5f 6970675f     ....[sms_led_gpi
100142b4:	6e695f6f 095d7469 626f7270 206d656c     o_init].problem 
100142c4:	6c696877 65732065 6e697474 70752067     while setting up
100142d4:	64656c20 00000030 736d735b 6572705f      led0...[sms_pre
100142e4:	72757373 6f635f65 6769666e 5f657275     ssure_configure_
100142f4:	6f697067 7270095d 656c626f 6877206d     gpio].problem wh
10014304:	20656c69 74746573 20676e69 56207075     ile setting up V
10014314:	70206363 00006e69 736d735b 6572705f     cc pin..[sms_pre
10014324:	72757373 74735f65 75747261 09095d70     ssure_startup]..
10014334:	72617453 676e6974 65727020 72757373     Starting pressur
10014344:	65732065 726f736e 00000000 736d735b     e sensor....[sms
10014354:	6572705f 72757373 736d5f65 635f3835     _pressure_ms58_c
10014364:	75636c61 6574616c 6574205d 7265706d     alculate] temper
10014374:	72757461 203d2065 20646c25 65727020     ature = %ld  pre
10014384:	72757373 203d2065 00646c25 736d735b     ssure = %ld.[sms
10014394:	6572705f 72757373 6f705f65 645f6c6c     _pressure_poll_d
100143a4:	5d617461 61745309 6e697472 61642067     ata].Starting da
100143b4:	70206174 696c6c6f 0000676e 736d735b     ta polling..[sms
100143c4:	6572705f 72757373 736d5f65 705f3835     _pressure_ms58_p
100143d4:	5f6c6c6f 61746164 7270205d 656c626f     oll_data] proble
100143e4:	6572206d 6e696461 736d2067 64203835     m reading ms58 d
100143f4:	00617461 736d735b 6572705f 72757373     ata.[sms_pressur
10014404:	65645f65 656e6966 7265735f 65636976     e_define_service
10014414:	53095d73 69767265 20736563 69666564     s].Services defi
10014424:	676e696e 69616620 2c64656c 61657220     ning failed, rea
10014434:	206e6f73 78257830 00000000 736d735b     son 0x%x....[sms
10014444:	6572705f 72757373 65645f65 656e6966     _pressure_define
10014454:	7265735f 65636976 53095d73 69767265     _services].Servi
10014464:	20736563 69666564 2c64656e 534d5320     ces defined, SMS
10014474:	65727020 72757373 61682065 656c646e      pressure handle
10014484:	6425203a 00000000 1000adfc 1000ae0a     : %d............
10014494:	1000ae18 1000ae26 1000ae34 1000ae42     ....&...4...B...
100144a4:	1000ae50 1000ae60 1000ae70 1000ae80     P...`...p.......
100144b4:	1000ae90 1000aea0 1000aeb0 1000aec0     ................
100144c4:	1000aed0 1000aee0 1000aef0 1000af00     ................
100144d4:	1000af10 1000af20 1000af30 1000af40     .... ...0...@...
100144e4:	1000af50 1000af60 1000af70 1000af80     P...`...p.......
100144f4:	1000af90 1000afa0 1000afae 1000afbc     ................
10014504:	1000afca 1000afd8 1000afe6 1000aff4     ................
10014514:	1000b002 1000b010 1000b020 1000b030     ........ ...0...
10014524:	1000b040 1000b050 1000b060 1000b070     @...P...`...p...
10014534:	1000b080 1000b090 1000b0a0 1000b0b0     ................
10014544:	1000b0c0 1000b0d0 1000b0e0 1000b0f0     ................
10014554:	1000b100 1000b110 1000b11e 1000b12c     ............,...
10014564:	1000b158 1000b166 1000b174 1000b182     X...f...t.......
10014574:	1000b190 1000b19e 1000b1ac 1000b1ba     ................
10014584:	1000b1c8 1000b1d6 1000b1e4 1000b1f2     ................
10014594:	1000b200 1000b20e 1000b21c 1000b22a     ............*...
100145a4:	1000b238 1000b246 1000b254 1000b262     8...F...T...b...
100145b4:	1000b270 1000b27e 1000b28c 1000b29a     p...~...........
100145c4:	1000b2a8 1000b2b6 1000b2c4 1000b2d2     ................
100145d4:	1000b2e0 1000b2ee 1000b2fc 1000b30a     ................
100145e4:	1000b318 1000b326 1000b334 1000b342     ....&...4...B...
100145f4:	1000b350 1000b35e 1000b36c 1000b37a     P...^...l...z...
10014604:	1000b388 1000b396 1000b3a4 1000b3b2     ................
10014614:	1000b3c0 1000b3ce 1000b3dc 1000b3ea     ................
10014624:	1000b3f8 1000b406 1000b414 1000b422     ............"...
10014634:	1000b430 1000b43e 1000b4d8 1000b500     0...>...........
10014644:	1000b528 1000b550 1000b790 1000b580     (...P...........
10014654:	1000b598 1000b610 1000b628 1000b5b0     ........(.......
10014664:	1000b5c8 1000b5e0 1000b5f8 1000b640     ............@...
10014674:	1000b904 1000b904 1000b904 1000b904     ................
10014684:	1000b904 1000b904 1000b904 1000b904     ................
10014694:	1000b6e8 1000b700 1000b718 1000b7a6     ................
100146a4:	1000b670 1000b904 1000b904 1000b904     p...............
100146b4:	1000b904 1000b904 1000b904 1000b730     ............0...
100146c4:	1000b748 1000b760 1000b778 1000b904     H...`...x.......
100146d4:	1000b8bc 1000b8d4 1000b904 1000b904     ................
100146e4:	1000b7d2 1000b7e8 1000b7fe 1000b814     ................
100146f4:	1000b904 1000b904 1000b904 1000b904     ................
10014704:	1000b904 1000b904 1000b904 1000b904     ................
10014714:	1000b4c4 1000b4ec 1000b514 1000b53c     ............<...
10014724:	1000b568 1000b658 1000b688 1000b6a0     h...X...........
10014734:	1000b6b8 1000b6d0 1000b7bc 1000b82a     ............*...
10014744:	1000b8a4 1000b8ec 1000c026 1000c038     ........&...8...
10014754:	1000c00e 1000c00e 1000c00e 1000c026     ............&...
10014764:	1000c00e 1000c00e 1000ca2a 1000ca9e     ........*.......
10014774:	1000ca12 1000caa4 1000ca18 1000ca1e     ................
10014784:	1000ca24 34333231 00003635 efcdab00     $...123456......
10014794:	00efcdab                                ....

10014798 <ble_mgr_gatt_server_handle>:
	...
100147b0:	1000bf21 1000bf49 1000bf91 00000000     !...I...........
100147c0:	65646e55 656e6966 76452064 20746e65     Undefined Event 
100147d0:	65636552 64657669 00000000 6e616353     Received....Scan
100147e0:	676e696e 61662020 64656c69 00000000     ning  failed....
100147f0:	65766441 73697472 20676e69 6c696166     Advertising fail
10014800:	00006465 2d454c42 2055544d 6e616843     ed..BLE-MTU Chan
10014810:	2c646567 6e6f4320 7463656e 206e6f69     ged, Connection 
10014820:	646e6148 203a656c 202c6425 2077654e     Handle: %d, New 
10014830:	756c6156 25203a65 00000064 2055544d     Value: %d...MTU 
10014840:	6e616843 2c646567 6e6f4320 7463656e     Changed, Connect
10014850:	206e6f69 646e6148 253a656c 4f202c64     ion Handle:%d, O
10014860:	61726570 6e6f6974 0064253a 2055544d     peration:%d.MTU 
10014870:	6e616843 46206567 656c6961 43202c64     Change Failed, C
10014880:	656e6e6f 6f697463 6148206e 656c646e     onnection Handle
10014890:	2c64253a 65704f20 69746172 253a6e6f     :%d, Operation:%
100148a0:	00000064 72616843 69725720 43206574     d...Char Write C
100148b0:	4320646d 6c706d6f 2c657465 6e6f4320     md Complete, Con
100148c0:	7463656e 206e6f69 646e6148 253a656c     nection Handle:%
100148d0:	4f202c64 61726570 6e6f6974 0064253a     d, Operation:%d.
100148e0:	72616843 69725720 43206574 4620646d     Char Write Cmd F
100148f0:	656c6961 43202c64 656e6e6f 6f697463     ailed, Connectio
10014900:	6148206e 656c646e 2c64253a 65704f20     n Handle:%d, Ope
10014910:	69746172 253a6e6f 00000064 74617453     ration:%d...Stat
10014920:	6f4e2065 61482074 656c646e 64252064     e Not Handled %d
10014930:	00000000 69766544 64206563 6f637369     ....Device disco
10014940:	63656e6e 20646574 73616552 303a6e6f     nnected Reason:0
10014950:	32302578 61482078 656c646e 2578303d     x%02x Handle=0x%
10014960:	00000078 425f5441 435f454c 5f4e4e4f     x...AT_BLE_CONN_
10014970:	41524150 50555f4d 45544144 00000020     PARAM_UPDATE ...
10014980:	72636e45 69747079 66206e6f 656c6961     Encryption faile
10014990:	00000064 72636e45 69747079 63206e6f     d...Encryption c
100149a0:	6c706d6f 64657465 63757320 73736563     ompleted success
100149b0:	6c6c7566 00000079 20454c42 69766544     fully...BLE Devi
100149c0:	6e206563 6620746f 646e756f 636e6520     ce not found enc
100149d0:	74707972 206e6f69 6f666e69 00000000     ryption info....
100149e0:	6f666e49 7665443a 20656369 6e756f66     Info:Device foun
100149f0:	64612064 73657264 255b2073 20205d64     d address [%d]  
10014a00:	30257830 30255832 30255832 30255832     0x%02X%02X%02X%0
10014a10:	30255832 30255832 00205832 6f666e49     2X%02X%02X .Info
10014a20:	78616d3a 6d756d69 2e6f6e20 7320666f     :maximum no.of s
10014a30:	206e6163 69766564 72206563 68636165     can device reach
10014a40:	2e2e6465 6f74532e 6e697070 63532067     ed...Stopping Sc
10014a50:	00006e61 6c696146 74206465 7473206f     an..Failed to st
10014a60:	7320706f 6e6e6163 00676e69 30257830     op scanning.0x%0
10014a70:	202c5832 00000000 4b525343 0000203a     2X, ....CSRK: ..
10014a80:	3a4b5249 00000000 72696150 20676e69     IRK:....Pairing 
10014a90:	6c696166 2e2e6465 7369442e 6e6e6f63     failed...Disconn
10014aa0:	69746365 0000676e 63736944 656e6e6f     ecting..Disconne
10014ab0:	52207463 65757165 46207473 656c6961     ct Request Faile
10014ac0:	00000064 72696150 20676e69 636f7270     d...Pairing proc
10014ad0:	72756465 6f632065 656c706d 20646574     edure completed 
10014ae0:	63637573 66737365 796c6c75 00000000     successfully....
10014af0:	20454c42 69766544 6e206563 6620746f     BLE Device not f
10014b00:	646e756f 206f7420 726f7473 68742065     ound to store th
10014b10:	61702065 6e697269 6e692067 00006f66     e pairing info..
10014b20:	3a4b544c 00000020 72636e45 69747079     LTK: ...Encrypti
10014b30:	4e206e6f 7320746f 74726174 00006465     on Not started..
10014b40:	76616c53 65532065 69727563 52207974     Slave Security R
10014b50:	2d207165 74754120 746e6568 74616369     eq - Authenticat
10014b60:	206e6f69 6c696146 00006465 656e6547     ion Failed..Gene
10014b70:	65746172 544c2064 00203a4b 30257830     rated LTK: .0x%0
10014b80:	00205832 646e6553 20676e69 72696170     2X .Sending pair
10014b90:	20676e69 70736572 65736e6f 00000000     ing response....
10014ba0:	72696150 71655220 74736575 41202d20     Pair Request - A
10014bb0:	65687475 6369746e 6f697461 6146206e     uthentication Fa
10014bc0:	64656c69 00000000 65746e45 68742072     iled....Enter th
10014bd0:	61502065 656b7373 2d362879 69676944     e Passkey(6-Digi
10014be0:	69202974 6554206e 6e696d72 003a6c61     t) in Terminal:.
10014bf0:	206e6950 656d6954 0074756f 63736944     Pin Timeout.Disc
10014c00:	656e6e6f 6e697463 2e2e2067 0000002e     onnecting ......
10014c10:	61656c50 45206573 7265746e 65687420     Please Enter the
10014c20:	6c6f6620 69776f6c 5020676e 2d737361      following Pass-
10014c30:	65646f63 206e6f28 6568746f 65442072     code(on other De
10014c40:	65636976 00003a29 72696150 79656b2d     vice):..Pair-key
10014c50:	70657220 6620796c 656c6961 00000064      reply failed...
10014c60:	20424f4f 74616546 20657275 20746f4e     OOB Feature Not 
10014c70:	70707573 6574726f 00000064 65746e45     supported...Ente
10014c80:	20646572 73736150 646f632d 00003a65     red Pass-code:..
10014c90:	2d434e45 3a716552 6e6f4320 6148206e     ENC-Req: Conn Ha
10014ca0:	656c646e 76654420 20656369 6e756f46     ndle Device Foun
10014cb0:	64683a64 64253a6c 00000000 74736f68     d:hdl:%d....host
10014cc0:	76656420 20656369 76696465 00782520      device ediv %x.
10014cd0:	72656570 76656420 20656369 76696465     peer device ediv
10014ce0:	00782520 5f636e65 20716572 76696465      %x.enc_req ediv
10014cf0:	00782520 20656854 65646e69 73692078      %x.The index is
10014d00:	00642520 2d434e45 3a716552 79654b20      %d.ENC-Req: Key
10014d10:	756f4620 0000646e 72696150 20676e69      Found..Pairing 
10014d20:	6f666e69 74616d72 206e6f69 7020666f     information of p
10014d30:	20726565 69766564 69206563 6f6e2073     eer device is no
10014d40:	76612074 616c6961 2e656c62 00000000     t available.....
10014d50:	61656c50 75206573 6961706e 68742072     Please unpair th
10014d60:	65642065 65636976 6f726620 6570206d     e device from pe
10014d70:	64207265 63697665 6f6d2865 656c6962     er device(mobile
10014d80:	65732029 6e697474 6d207367 20756e65     ) settings menu 
10014d90:	20646e61 72617473 61702074 6e697269     and start pairin
10014da0:	67612067 006e6961 72636e45 69747079     g again.Encrypti
10014db0:	52206e6f 65757165 52207473 796c7065     on Request Reply
10014dc0:	69614620 0064656c 72636e45 69747079      Failed.Encrypti
10014dd0:	52206e6f 65757165 52207473 796c7065     on Request Reply
10014de0:	00000000 656c625b 696e695f 09095d74     ....[ble_init]..
10014df0:	696e4909 6c616974 6e697a69 41532067     .Initializing SA
10014e00:	3131424d 00000000 656c625b 696e695f     MB11....[ble_ini
10014e10:	09095d74 424d4153 49203131 6974696e     t]..SAMB11 Initi
10014e20:	7a696c61 6f697461 6166206e 64656c69     alization failed
10014e30:	00000000 656c625b 696e695f 09095d74     ....[ble_init]..
10014e40:	61656c50 63206573 6b636568 65687420     Please check the
10014e50:	776f7020 61207265 6320646e 656e6e6f      power and conne
10014e60:	6f697463 202f206e 64726168 65726177     ction / hardware
10014e70:	6e6f6320 7463656e 0000726f 52424153      connector..SABR
10014e80:	4d532d65 00000053 69766544 6e206563     e-SMS...Device n
10014e90:	20656d61 20746573 6c696166 00006465     ame set failed..
10014ea0:	656c625b 7465735f 7665645f 6e6f635f     [ble_set_dev_con
10014eb0:	5d676966 44420909 64646120 73736572     fig]..BD address
10014ec0:	74656720 69616620 0064656c 656c625b      get failed.[ble
10014ed0:	7465735f 7665645f 6e6f635f 5d676966     _set_dev_config]
10014ee0:	44420909 64644120 73736572 2578303a     ..BD Address:0x%
10014ef0:	25583230 25583230 25583230 25583230     02X%02X%02X%02X%
10014f00:	25583230 2c583230 64644120 73736572     02X%02X, Address
10014f10:	70795420 64253a65 00000000 656c625b      Type:%d....[ble
10014f20:	7465735f 7665645f 6e6f635f 5d676966     _set_dev_config]
10014f30:	74655309 454c4220 76654420 20656369     .Set BLE Device 
10014f40:	666e6f63 72756769 6f697461 6166206e     configuration fa
10014f50:	64656c69 00000000 656c625b 7465735f     iled....[ble_set
10014f60:	7665645f 6e6f635f 5d676966 74655309     _dev_config].Set
10014f70:	454c4220 76654420 20656369 72646441      BLE Device Addr
10014f80:	20737365 6c696166 00006465 6e616353     ess failed..Scan
10014f90:	676e696e 502e2e2e 7361656c 61772065     ning...Please wa
10014fa0:	2e2e7469 0000002e 76616c53 65732065     it......Slave se
10014fb0:	69727563 72207974 65757165 73207473     curity request s
10014fc0:	65636375 75667373 0000006c 76616c53     uccessful...Slav
10014fd0:	65732065 69727563 72207974 65757165     e security reque
10014fe0:	66207473 656c6961 00000064 6e6e6f43     st failed...Conn
10014ff0:	65746365 6f742064 65657020 65642072     ected to peer de
10015000:	65636976 74697720 64612068 73657264     vice with addres
10015010:	78302073 78323025 78323025 78323025     s 0x%02x%02x%02x
10015020:	78323025 78323025 78323025 00000000     %02x%02x%02x....
10015030:	6e6e6f43 69746365 48206e6f 6c646e61     Connection Handl
10015040:	64252065 00000000 6f736552 6e69766c     e %d....Resolvin
10015050:	61522067 6d6f646e 64646120 73736572     g Random address
10015060:	63757320 73736563 00002a2a 6f736552      success**..Reso
10015070:	6e69766c 61522067 6d6f646e 64646120     lving Random add
10015080:	73736572 69616620 2a64656c 0000002a     ress failed**...
10015090:	2078614d 626d756e 6f207265 6f632066     Max number of co
100150a0:	63656e6e 6e6f6974 61657220 64656863     nnection reached
100150b0:	6425203a 3d3d3d20 7369443e 6e6e6f63     : %d ===>Disconn
100150c0:	69746365 2e2e676e 0000002e 69766544     ecting......Devi
100150d0:	43206563 656e6e6f 6f697463 6146206e     ce Connection Fa
100150e0:	64656c69 53202d20 75746174 25203a73     iled - Status: %
100150f0:	00000064 23232323 23232323 65442323     d...##########De
10015100:	65636976 756f4620 0000646e 23232323     vice Found..####
10015110:	23232323 65442323 65636976 746f4e20     ######Device Not
10015120:	756f4620 0000646e 69766544 69206563      Found..Device i
10015130:	253a7864 00000064 2d454c42 6e657645     dx:%d...BLE-Even
10015140:	64253a74 00000000 54544147 7265535f     t:%d....GATT_Ser
10015150:	20726576 6e657645 64253a74 00000000     ver Event:%d....
10015160:	2d454c42 616e614d 3a726567 6e6b6e55     BLE-Manager:Unkn
10015170:	206e776f 6e657645 78303d74 00005825     own Event=0x%X..
10015180:	656c625b 6e616d5f 72656761 0909095d     [ble_manager]...
10015190:	756e614d 74636166 72657275 65707320     Manufacturer spe
100151a0:	69666963 61642063 65206174 6c62616e     cific data enabl
100151b0:	00006465 5a2d571c 50532dbe 00000000     ed...W-Z.-SP....
100151c0:	20454c42 65766441 73697472 6e656d65     BLE Advertisemen
100151d0:	61642074 73206174 66207465 656c6961     t data set faile
100151e0:	00000064                                d...

100151e4 <ble_mgr_gap_handle>:
100151e4:	1000bead 1000c15d 1000bed1 1000bef9     ....]...........
100151f4:	00000000 1000cdd9 1000bfd9 1000c075     ............u...
10015204:	1000c3b9 1000c209 1000c5b9 1000c3d1     ................
10015214:	1000c745 1000c889 1000c099 1000d025     E...........%...
	...
10015230:	656d7441 6f43206c 022e7072                       Atmel Corp.

1001523b <CSWTCH.45>:
1001523b:	00100402                                         ...

1001523e <CSWTCH.47>:
1001523e:	03010300 03030303 03030303 02020303              ...............

1001524d <client_conf_uuid>:
1001524d:	29042902                                         .)

1001524f <presentation_format_uuid>:
1001524f:	29012904                                         .)

10015251 <user_desc_uuid>:
10015251:	29032901                                         .)

10015253 <server_conf_uuid>:
10015253:	29002903                                         .)

10015255 <extended_props_uuid>:
10015255:	28022900                                         .)

10015257 <include_uuid>:
10015257:	28032802                                         .(

10015259 <char_uuid>:
10015259:	1c002803 dc10011a dc100118 da100118     .(..............
10015269:	f4100118 f4100119 e6100119 da100119     ................
10015279:	f4100118 e6100119 f4100119 da100119     ................
10015289:	fc100118 fc100119 fc100119 fc100119     ................
10015299:	4310011b a0000000                                ...C...

100152a0 <_global_impure_ptr>:
100152a0:	100153a0                                .S..

100152a4 <__sf_fake_stdin>:
	...

100152c4 <__sf_fake_stdout>:
	...

100152e4 <__sf_fake_stderr>:
	...
10015304:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
10015314:	32313000 36353433 41393837 45444342     .0123456789ABCDE
10015324:	31300046 35343332 39383736 64636261     F.0123456789abcd
10015334:	00006665                                ef..

10015338 <_init>:
10015338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001533a:	46c0      	nop			; (mov r8, r8)
1001533c:	bcf8      	pop	{r3, r4, r5, r6, r7}
1001533e:	bc08      	pop	{r3}
10015340:	469e      	mov	lr, r3
10015342:	4770      	bx	lr

10015344 <__init_array_start>:
10015344:	100080b1 	.word	0x100080b1

10015348 <_fini>:
10015348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001534a:	46c0      	nop			; (mov r8, r8)
1001534c:	bcf8      	pop	{r3, r4, r5, r6, r7}
1001534e:	bc08      	pop	{r3}
10015350:	469e      	mov	lr, r3
10015352:	4770      	bx	lr

10015354 <__fini_array_start>:
10015354:	10008089 	.word	0x10008089
