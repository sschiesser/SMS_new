
SMS_peripheral1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00010534  10008000  10008000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000070  10018534  10018534  00018534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00002ef0  100185a4  100185a4  000185a4  2**2
                  ALLOC
  3 .stack        00000804  1001b494  1001b494  000185a4  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000185a4  2**0
                  CONTENTS, READONLY
  5 .comment      000000b4  00000000  00000000  000185cc  2**0
                  CONTENTS, READONLY
  6 .debug_info   0004befb  00000000  00000000  00018680  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000053da  00000000  00000000  0006457b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000a360  00000000  00000000  00069955  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000b90  00000000  00000000  00073cb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000b50  00000000  00000000  00074845  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0000c37a  00000000  00000000  00075395  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000161f1  00000000  00000000  0008170f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00141830  00000000  00000000  00097900  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002cb8  00000000  00000000  001d9130  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

10008000 <app_entry>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void app_entry(void)
{
10008000:	b510      	push	{r4, lr}

    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
10008002:	4b18      	ldr	r3, [pc, #96]	; (10008064 <app_entry+0x64>)
10008004:	4a18      	ldr	r2, [pc, #96]	; (10008068 <app_entry+0x68>)
10008006:	429a      	cmp	r2, r3
10008008:	d003      	beq.n	10008012 <app_entry+0x12>
        for (; pDest < &_erelocate;) {
1000800a:	4b18      	ldr	r3, [pc, #96]	; (1000806c <app_entry+0x6c>)
1000800c:	4a15      	ldr	r2, [pc, #84]	; (10008064 <app_entry+0x64>)
1000800e:	429a      	cmp	r2, r3
10008010:	d304      	bcc.n	1000801c <app_entry+0x1c>
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008012:	4b17      	ldr	r3, [pc, #92]	; (10008070 <app_entry+0x70>)
10008014:	4a17      	ldr	r2, [pc, #92]	; (10008074 <app_entry+0x74>)
10008016:	429a      	cmp	r2, r3
10008018:	d310      	bcc.n	1000803c <app_entry+0x3c>
1000801a:	e01e      	b.n	1000805a <app_entry+0x5a>
1000801c:	4b16      	ldr	r3, [pc, #88]	; (10008078 <app_entry+0x78>)
1000801e:	4a13      	ldr	r2, [pc, #76]	; (1000806c <app_entry+0x6c>)
10008020:	3203      	adds	r2, #3
10008022:	1ad2      	subs	r2, r2, r3
10008024:	0892      	lsrs	r2, r2, #2
10008026:	3201      	adds	r2, #1
10008028:	0092      	lsls	r2, r2, #2
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
1000802a:	2300      	movs	r3, #0
            *pDest++ = *pSrc++;
1000802c:	480d      	ldr	r0, [pc, #52]	; (10008064 <app_entry+0x64>)
1000802e:	490e      	ldr	r1, [pc, #56]	; (10008068 <app_entry+0x68>)
10008030:	58cc      	ldr	r4, [r1, r3]
10008032:	50c4      	str	r4, [r0, r3]
10008034:	3304      	adds	r3, #4
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
10008036:	4293      	cmp	r3, r2
10008038:	d1fa      	bne.n	10008030 <app_entry+0x30>
1000803a:	e7ea      	b.n	10008012 <app_entry+0x12>
1000803c:	4b0f      	ldr	r3, [pc, #60]	; (1000807c <app_entry+0x7c>)
1000803e:	490c      	ldr	r1, [pc, #48]	; (10008070 <app_entry+0x70>)
10008040:	3103      	adds	r1, #3
10008042:	1ac9      	subs	r1, r1, r3
10008044:	0889      	lsrs	r1, r1, #2
10008046:	3101      	adds	r1, #1
10008048:	0089      	lsls	r1, r1, #2
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
1000804a:	2300      	movs	r3, #0
        *pDest++ = 0;
1000804c:	4c09      	ldr	r4, [pc, #36]	; (10008074 <app_entry+0x74>)
1000804e:	2000      	movs	r0, #0
10008050:	191a      	adds	r2, r3, r4
10008052:	6010      	str	r0, [r2, #0]
10008054:	3304      	adds	r3, #4
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008056:	428b      	cmp	r3, r1
10008058:	d1fa      	bne.n	10008050 <app_entry+0x50>
        *pDest++ = 0;
    }

    /* Initialize the C library */
    __libc_init_array();
1000805a:	4b09      	ldr	r3, [pc, #36]	; (10008080 <app_entry+0x80>)
1000805c:	4798      	blx	r3

    /* Branch to main function */
    main();
1000805e:	4b09      	ldr	r3, [pc, #36]	; (10008084 <app_entry+0x84>)
10008060:	4798      	blx	r3

    /* return to BLE OS*/
    return;
}
10008062:	bd10      	pop	{r4, pc}
10008064:	10018534 	.word	0x10018534
10008068:	10018534 	.word	0x10018534
1000806c:	100185a4 	.word	0x100185a4
10008070:	1001b494 	.word	0x1001b494
10008074:	100185a4 	.word	0x100185a4
10008078:	10018538 	.word	0x10018538
1000807c:	100185a8 	.word	0x100185a8
10008080:	100156f1 	.word	0x100156f1
10008084:	1000e175 	.word	0x1000e175

10008088 <__do_global_dtors_aux>:
10008088:	b510      	push	{r4, lr}
1000808a:	4c06      	ldr	r4, [pc, #24]	; (100080a4 <__do_global_dtors_aux+0x1c>)
1000808c:	7823      	ldrb	r3, [r4, #0]
1000808e:	2b00      	cmp	r3, #0
10008090:	d107      	bne.n	100080a2 <__do_global_dtors_aux+0x1a>
10008092:	4b05      	ldr	r3, [pc, #20]	; (100080a8 <__do_global_dtors_aux+0x20>)
10008094:	2b00      	cmp	r3, #0
10008096:	d002      	beq.n	1000809e <__do_global_dtors_aux+0x16>
10008098:	4804      	ldr	r0, [pc, #16]	; (100080ac <__do_global_dtors_aux+0x24>)
1000809a:	e000      	b.n	1000809e <__do_global_dtors_aux+0x16>
1000809c:	bf00      	nop
1000809e:	2301      	movs	r3, #1
100080a0:	7023      	strb	r3, [r4, #0]
100080a2:	bd10      	pop	{r4, pc}
100080a4:	100185a4 	.word	0x100185a4
100080a8:	00000000 	.word	0x00000000
100080ac:	10018534 	.word	0x10018534

100080b0 <frame_dummy>:
100080b0:	4b08      	ldr	r3, [pc, #32]	; (100080d4 <frame_dummy+0x24>)
100080b2:	b510      	push	{r4, lr}
100080b4:	2b00      	cmp	r3, #0
100080b6:	d003      	beq.n	100080c0 <frame_dummy+0x10>
100080b8:	4907      	ldr	r1, [pc, #28]	; (100080d8 <frame_dummy+0x28>)
100080ba:	4808      	ldr	r0, [pc, #32]	; (100080dc <frame_dummy+0x2c>)
100080bc:	e000      	b.n	100080c0 <frame_dummy+0x10>
100080be:	bf00      	nop
100080c0:	4807      	ldr	r0, [pc, #28]	; (100080e0 <frame_dummy+0x30>)
100080c2:	6803      	ldr	r3, [r0, #0]
100080c4:	2b00      	cmp	r3, #0
100080c6:	d100      	bne.n	100080ca <frame_dummy+0x1a>
100080c8:	bd10      	pop	{r4, pc}
100080ca:	4b06      	ldr	r3, [pc, #24]	; (100080e4 <frame_dummy+0x34>)
100080cc:	2b00      	cmp	r3, #0
100080ce:	d0fb      	beq.n	100080c8 <frame_dummy+0x18>
100080d0:	4798      	blx	r3
100080d2:	e7f9      	b.n	100080c8 <frame_dummy+0x18>
100080d4:	00000000 	.word	0x00000000
100080d8:	100185a8 	.word	0x100185a8
100080dc:	10018534 	.word	0x10018534
100080e0:	10018534 	.word	0x10018534
100080e4:	00000000 	.word	0x00000000

100080e8 <aon_sleep_timer_get_config_defaults>:
 * \param[out]  config  Pointer to a AON Sleep Timer module configuration structure to set
 */
void aon_sleep_timer_get_config_defaults(struct aon_sleep_timer_config *config)
{
	/* Default configuration values */
	config->wakeup = AON_SLEEP_TIMER_WAKEUP_ARM;
100080e8:	2301      	movs	r3, #1
100080ea:	7003      	strb	r3, [r0, #0]
	config->mode = AON_SLEEP_TIMER_SINGLE_MODE;
100080ec:	7043      	strb	r3, [r0, #1]
	config->counter = 32000;
100080ee:	23fa      	movs	r3, #250	; 0xfa
100080f0:	01db      	lsls	r3, r3, #7
100080f2:	6043      	str	r3, [r0, #4]
}
100080f4:	4770      	bx	lr
100080f6:	46c0      	nop			; (mov r8, r8)

100080f8 <aon_sleep_timer_disable>:
 */
void aon_sleep_timer_disable(void)
{
	uint32_t regval;

	AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = 0;
100080f8:	4b06      	ldr	r3, [pc, #24]	; (10008114 <aon_sleep_timer_disable+0x1c>)
100080fa:	2200      	movs	r2, #0
100080fc:	605a      	str	r2, [r3, #4]
	regval = AON_SLEEP_TIMER0->CONTROL.reg;
100080fe:	681a      	ldr	r2, [r3, #0]
	regval &= ~AON_SLEEP_TIMER_CONTROL_RELOAD_ENABLE;
	regval &= ~AON_SLEEP_TIMER_CONTROL_SINGLE_COUNT_ENABLE;
10008100:	2103      	movs	r1, #3
10008102:	438a      	bics	r2, r1
	AON_SLEEP_TIMER0->CONTROL.reg = regval;
10008104:	601a      	str	r2, [r3, #0]

	while (AON_SLEEP_TIMER0->CONTROL.reg & (1 << 14)) {
10008106:	0019      	movs	r1, r3
10008108:	2280      	movs	r2, #128	; 0x80
1000810a:	01d2      	lsls	r2, r2, #7
1000810c:	680b      	ldr	r3, [r1, #0]
1000810e:	4213      	tst	r3, r2
10008110:	d1fc      	bne.n	1000810c <aon_sleep_timer_disable+0x14>
	}
}
10008112:	4770      	bx	lr
10008114:	4000d000 	.word	0x4000d000

10008118 <aon_sleep_timer_clear_interrup>:
 * This flag will be cleared automatically once the IRQ
 * has been seen on the sleep clock.
 */
void aon_sleep_timer_clear_interrup(void)
{
	AON_SLEEP_TIMER0->CONTROL.reg |= AON_SLEEP_TIMER_CONTROL_IRQ_CLEAR;
10008118:	4a02      	ldr	r2, [pc, #8]	; (10008124 <aon_sleep_timer_clear_interrup+0xc>)
1000811a:	6811      	ldr	r1, [r2, #0]
1000811c:	2310      	movs	r3, #16
1000811e:	430b      	orrs	r3, r1
10008120:	6013      	str	r3, [r2, #0]
}
10008122:	4770      	bx	lr
10008124:	4000d000 	.word	0x4000d000

10008128 <aon_sleep_timer_isr_handler>:
 *
 * Timer ISR handler.
 *
 */
static void aon_sleep_timer_isr_handler(void)
{
10008128:	b510      	push	{r4, lr}
	aon_sleep_timer_clear_interrup();
1000812a:	4b04      	ldr	r3, [pc, #16]	; (1000813c <aon_sleep_timer_isr_handler+0x14>)
1000812c:	4798      	blx	r3

	if (aon_sleep_timer_callback) {
1000812e:	4b04      	ldr	r3, [pc, #16]	; (10008140 <aon_sleep_timer_isr_handler+0x18>)
10008130:	681b      	ldr	r3, [r3, #0]
10008132:	2b00      	cmp	r3, #0
10008134:	d000      	beq.n	10008138 <aon_sleep_timer_isr_handler+0x10>
		aon_sleep_timer_callback();
10008136:	4798      	blx	r3
	}
}
10008138:	bd10      	pop	{r4, pc}
1000813a:	46c0      	nop			; (mov r8, r8)
1000813c:	10008119 	.word	0x10008119
10008140:	100185c0 	.word	0x100185c0

10008144 <aon_sleep_timer_register_callback>:
 *
 * \param[in]     callback_func Pointer to callback function
 */
void aon_sleep_timer_register_callback(aon_sleep_timer_callback_t fun)
{
	aon_sleep_timer_callback = fun;
10008144:	4b01      	ldr	r3, [pc, #4]	; (1000814c <aon_sleep_timer_register_callback+0x8>)
10008146:	6018      	str	r0, [r3, #0]
}
10008148:	4770      	bx	lr
1000814a:	46c0      	nop			; (mov r8, r8)
1000814c:	100185c0 	.word	0x100185c0

10008150 <aon_sleep_timer_unregister_callback>:
 * Unregisters and disable a callback function implemented by the user.
 *
 */
void aon_sleep_timer_unregister_callback(void)
{
	aon_sleep_timer_callback = NULL;
10008150:	2200      	movs	r2, #0
10008152:	4b01      	ldr	r3, [pc, #4]	; (10008158 <aon_sleep_timer_unregister_callback+0x8>)
10008154:	601a      	str	r2, [r3, #0]
}
10008156:	4770      	bx	lr
10008158:	100185c0 	.word	0x100185c0

1000815c <aon_sleep_timer_init>:
 *
 * \param[in]     config       Pointer to the AON Sleep Timer configuration options struct
 *
 */
void aon_sleep_timer_init(const struct aon_sleep_timer_config *config)
{
1000815c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000815e:	b083      	sub	sp, #12
	uint32_t aon_st_ctrl = 0;

	AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg = AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_RESETVALUE;
10008160:	2200      	movs	r2, #0
10008162:	4b29      	ldr	r3, [pc, #164]	; (10008208 <aon_sleep_timer_init+0xac>)
10008164:	731a      	strb	r2, [r3, #12]
	if (config->wakeup == AON_SLEEP_TIMER_WAKEUP_ARM_BLE) {
10008166:	7803      	ldrb	r3, [r0, #0]
10008168:	2b02      	cmp	r3, #2
1000816a:	d105      	bne.n	10008178 <aon_sleep_timer_init+0x1c>
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
1000816c:	4a26      	ldr	r2, [pc, #152]	; (10008208 <aon_sleep_timer_init+0xac>)
1000816e:	7b11      	ldrb	r1, [r2, #12]
10008170:	3301      	adds	r3, #1
10008172:	430b      	orrs	r3, r1
10008174:	7313      	strb	r3, [r2, #12]
10008176:	e005      	b.n	10008184 <aon_sleep_timer_init+0x28>
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE |
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_BLE_ENABLE;
	} else if (config->wakeup == AON_SLEEP_TIMER_WAKEUP_ARM) {
10008178:	2b01      	cmp	r3, #1
1000817a:	d103      	bne.n	10008184 <aon_sleep_timer_init+0x28>
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
1000817c:	4a22      	ldr	r2, [pc, #136]	; (10008208 <aon_sleep_timer_init+0xac>)
1000817e:	7b11      	ldrb	r1, [r2, #12]
10008180:	430b      	orrs	r3, r1
10008182:	7313      	strb	r3, [r2, #12]
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
10008184:	4b21      	ldr	r3, [pc, #132]	; (1000820c <aon_sleep_timer_init+0xb0>)
10008186:	681a      	ldr	r2, [r3, #0]
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
10008188:	0053      	lsls	r3, r2, #1
1000818a:	d01f      	beq.n	100081cc <aon_sleep_timer_init+0x70>
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
1000818c:	4d1f      	ldr	r5, [pc, #124]	; (1000820c <aon_sleep_timer_init+0xb0>)
1000818e:	2700      	movs	r7, #0

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;

	for (i = 0; i < cycles*100; i++) {
10008190:	262c      	movs	r6, #44	; 0x2c
10008192:	36ff      	adds	r6, #255	; 0xff
10008194:	2180      	movs	r1, #128	; 0x80
10008196:	01c9      	lsls	r1, r1, #7
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
10008198:	602f      	str	r7, [r5, #0]

static aon_sleep_timer_callback_t aon_sleep_timer_callback = NULL;

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;
1000819a:	9701      	str	r7, [sp, #4]

	for (i = 0; i < cycles*100; i++) {
1000819c:	9701      	str	r7, [sp, #4]
1000819e:	9b01      	ldr	r3, [sp, #4]
100081a0:	42b3      	cmp	r3, r6
100081a2:	d806      	bhi.n	100081b2 <aon_sleep_timer_init+0x56>
		asm volatile ("nop");
100081a4:	46c0      	nop			; (mov r8, r8)

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;

	for (i = 0; i < cycles*100; i++) {
100081a6:	9b01      	ldr	r3, [sp, #4]
100081a8:	3301      	adds	r3, #1
100081aa:	9301      	str	r3, [sp, #4]
100081ac:	9b01      	ldr	r3, [sp, #4]
100081ae:	42b3      	cmp	r3, r6
100081b0:	d9f8      	bls.n	100081a4 <aon_sleep_timer_init+0x48>
100081b2:	7844      	ldrb	r4, [r0, #1]
100081b4:	000b      	movs	r3, r1
100081b6:	2c00      	cmp	r4, #0
100081b8:	d103      	bne.n	100081c2 <aon_sleep_timer_init+0x66>
100081ba:	2380      	movs	r3, #128	; 0x80
100081bc:	009b      	lsls	r3, r3, #2
100081be:	e000      	b.n	100081c2 <aon_sleep_timer_init+0x66>
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
		delay_cycle(3);
		while (aon_st_ctrl & ((config->mode == AON_SLEEP_TIMER_RELOAD_MODE) ?
				(1 << 9) : (1 << 14))) {
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
100081c0:	682a      	ldr	r2, [r5, #0]

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
		delay_cycle(3);
		while (aon_st_ctrl & ((config->mode == AON_SLEEP_TIMER_RELOAD_MODE) ?
100081c2:	4213      	tst	r3, r2
100081c4:	d1fc      	bne.n	100081c0 <aon_sleep_timer_init+0x64>
				(1 << 9) : (1 << 14))) {
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
		}
		aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
100081c6:	682a      	ldr	r2, [r5, #0]
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
100081c8:	0053      	lsls	r3, r2, #1
100081ca:	d1e5      	bne.n	10008198 <aon_sleep_timer_init+0x3c>
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
		}
		aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	}

	if (config->mode == AON_SLEEP_TIMER_RELOAD_MODE) {
100081cc:	7843      	ldrb	r3, [r0, #1]
100081ce:	2b00      	cmp	r3, #0
100081d0:	d105      	bne.n	100081de <aon_sleep_timer_init+0x82>
		/* Reload counter will start here */
		AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = config->counter;
100081d2:	4b0e      	ldr	r3, [pc, #56]	; (1000820c <aon_sleep_timer_init+0xb0>)
100081d4:	6842      	ldr	r2, [r0, #4]
100081d6:	605a      	str	r2, [r3, #4]
		AON_SLEEP_TIMER0->CONTROL.reg = AON_SLEEP_TIMER_CONTROL_RELOAD_ENABLE;
100081d8:	2201      	movs	r2, #1
100081da:	601a      	str	r2, [r3, #0]
100081dc:	e004      	b.n	100081e8 <aon_sleep_timer_init+0x8c>
	} else {
		/* Single counter will start here */
		AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = config->counter;
100081de:	4b0b      	ldr	r3, [pc, #44]	; (1000820c <aon_sleep_timer_init+0xb0>)
100081e0:	6842      	ldr	r2, [r0, #4]
100081e2:	605a      	str	r2, [r3, #4]
		AON_SLEEP_TIMER0->CONTROL.reg = AON_SLEEP_TIMER_CONTROL_SINGLE_COUNT_ENABLE;
100081e4:	2202      	movs	r2, #2
100081e6:	601a      	str	r2, [r3, #0]
	}

	if (config->mode == AON_SLEEP_TIMER_SINGLE_MODE) {
100081e8:	7843      	ldrb	r3, [r0, #1]
100081ea:	2b01      	cmp	r3, #1
100081ec:	d106      	bne.n	100081fc <aon_sleep_timer_init+0xa0>
		while ((AON_SLEEP_TIMER0->CONTROL.reg &
100081ee:	4907      	ldr	r1, [pc, #28]	; (1000820c <aon_sleep_timer_init+0xb0>)
100081f0:	22e0      	movs	r2, #224	; 0xe0
100081f2:	01d2      	lsls	r2, r2, #7
100081f4:	680b      	ldr	r3, [r1, #0]
100081f6:	4013      	ands	r3, r2
100081f8:	4293      	cmp	r3, r2
100081fa:	d1fb      	bne.n	100081f4 <aon_sleep_timer_init+0x98>
				AON_SLEEP_TIMER_CONTROL_SLP_TIMER_SINGLE_COUNT_ENABLE_DLY_Msk)
				!= AON_SLEEP_TIMER_CONTROL_SLP_TIMER_SINGLE_COUNT_ENABLE_DLY_Msk) {
		}
	}

	system_register_isr(RAM_ISR_TABLE_AON_SLEEP_TIMER_INDEX, (uint32_t)aon_sleep_timer_isr_handler);
100081fc:	4904      	ldr	r1, [pc, #16]	; (10008210 <aon_sleep_timer_init+0xb4>)
100081fe:	202b      	movs	r0, #43	; 0x2b
10008200:	4b04      	ldr	r3, [pc, #16]	; (10008214 <aon_sleep_timer_init+0xb8>)
10008202:	4798      	blx	r3
}
10008204:	b003      	add	sp, #12
10008206:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008208:	4000e000 	.word	0x4000e000
1000820c:	4000d000 	.word	0x4000d000
10008210:	10008129 	.word	0x10008129
10008214:	1000bb95 	.word	0x1000bb95

10008218 <_i2c_master_read_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
10008218:	b5f0      	push	{r4, r5, r6, r7, lr}
1000821a:	4657      	mov	r7, sl
1000821c:	464e      	mov	r6, r9
1000821e:	4645      	mov	r5, r8
10008220:	b4e0      	push	{r5, r6, r7}
10008222:	b082      	sub	sp, #8
	Assert(config);
	
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
	uint16_t length = packet->data_length;
10008224:	884d      	ldrh	r5, [r1, #2]

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
10008226:	2317      	movs	r3, #23
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
	uint16_t length = packet->data_length;

	if (length == 0) {
10008228:	2d00      	cmp	r5, #0
1000822a:	d033      	beq.n	10008294 <_i2c_master_read_packet+0x7c>
	Assert(module->hw);
	Assert(config);
	
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
1000822c:	6803      	ldr	r3, [r0, #0]
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2c *const i2c_module)
{
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
1000822e:	2428      	movs	r4, #40	; 0x28
10008230:	5d1a      	ldrb	r2, [r3, r4]
10008232:	07d2      	lsls	r2, r2, #31
10008234:	d4fc      	bmi.n	10008230 <_i2c_master_read_packet+0x18>
	}

	i2c_wait_for_idle(i2c_module);

	/* Flush the FIFO */
	i2c_module->I2C_FLUSH.reg = 1;
10008236:	2201      	movs	r2, #1
10008238:	2434      	movs	r4, #52	; 0x34
1000823a:	551a      	strb	r2, [r3, r4]

	/* Enable I2C on bus (start condition). */
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
1000823c:	3c14      	subs	r4, #20
1000823e:	551a      	strb	r2, [r3, r4]
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
10008240:	880a      	ldrh	r2, [r1, #0]
10008242:	0052      	lsls	r2, r2, #1
10008244:	2402      	movs	r4, #2
10008246:	34ff      	adds	r4, #255	; 0xff
10008248:	4322      	orrs	r2, r4
1000824a:	b292      	uxth	r2, r2
1000824c:	801a      	strh	r2, [r3, #0]
			(packet->address << 1) | I2C_TRANSFER_READ;

	/* Now check whether the core has sent the data out and free the bus. */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
1000824e:	3cf1      	subs	r4, #241	; 0xf1
		status = i2c_module->TRANSMIT_STATUS.reg;
10008250:	7a1a      	ldrb	r2, [r3, #8]
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
			(packet->address << 1) | I2C_TRANSFER_READ;

	/* Now check whether the core has sent the data out and free the bus. */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
10008252:	4222      	tst	r2, r4
10008254:	d0fc      	beq.n	10008250 <_i2c_master_read_packet+0x38>
10008256:	2200      	movs	r2, #0
		status = i2c_module->TRANSMIT_STATUS.reg;
	}

	do {
		/* Send stop condition. */
		if ((!module->no_stop) && (counter == (length - 1))) {
10008258:	1e6c      	subs	r4, r5, #1
1000825a:	46a4      	mov	ip, r4
			i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
1000825c:	2420      	movs	r4, #32
1000825e:	46a1      	mov	r9, r4
10008260:	2400      	movs	r4, #0
10008262:	46a0      	mov	r8, r4
		}

		status = i2c_module->RECEIVE_STATUS.reg;
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
10008264:	2601      	movs	r6, #1
		status = i2c_module->TRANSMIT_STATUS.reg;
	}

	do {
		/* Send stop condition. */
		if ((!module->no_stop) && (counter == (length - 1))) {
10008266:	7944      	ldrb	r4, [r0, #5]
10008268:	2c00      	cmp	r4, #0
1000826a:	d104      	bne.n	10008276 <_i2c_master_read_packet+0x5e>
1000826c:	4562      	cmp	r2, ip
1000826e:	d102      	bne.n	10008276 <_i2c_master_read_packet+0x5e>
			i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
10008270:	464c      	mov	r4, r9
10008272:	4647      	mov	r7, r8
10008274:	551f      	strb	r7, [r3, r4]
		}

		status = i2c_module->RECEIVE_STATUS.reg;
10008276:	7b1c      	ldrb	r4, [r3, #12]
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
10008278:	4234      	tst	r4, r6
1000827a:	d008      	beq.n	1000828e <_i2c_master_read_packet+0x76>
			packet->data[counter++] = i2c_module->RECEIVE_DATA.reg;
1000827c:	1c54      	adds	r4, r2, #1
1000827e:	46a2      	mov	sl, r4
10008280:	791f      	ldrb	r7, [r3, #4]
10008282:	684c      	ldr	r4, [r1, #4]
10008284:	54a7      	strb	r7, [r4, r2]
10008286:	4652      	mov	r2, sl
10008288:	466c      	mov	r4, sp
1000828a:	80e2      	strh	r2, [r4, #6]
1000828c:	88e2      	ldrh	r2, [r4, #6]
	} while (counter < length);
1000828e:	42aa      	cmp	r2, r5
10008290:	d3e9      	bcc.n	10008266 <_i2c_master_read_packet+0x4e>

	return STATUS_OK;
10008292:	2300      	movs	r3, #0
}
10008294:	0018      	movs	r0, r3
10008296:	b002      	add	sp, #8
10008298:	bc1c      	pop	{r2, r3, r4}
1000829a:	4690      	mov	r8, r2
1000829c:	4699      	mov	r9, r3
1000829e:	46a2      	mov	sl, r4
100082a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100082a2:	46c0      	nop			; (mov r8, r8)

100082a4 <_i2c_master_write_packet>:
 * \retval STATUS_OK                    The packet was write successfully
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
100082a4:	b5f0      	push	{r4, r5, r6, r7, lr}
100082a6:	4684      	mov	ip, r0
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);
	
	I2c *const i2c_module = (module->hw);
100082a8:	6802      	ldr	r2, [r0, #0]
	uint16_t counter = 0;
	uint32_t status  = 0;

	uint16_t length = packet->data_length;
100082aa:	884e      	ldrh	r6, [r1, #2]
100082ac:	2428      	movs	r4, #40	; 0x28
100082ae:	5d13      	ldrb	r3, [r2, r4]
100082b0:	07db      	lsls	r3, r3, #31
100082b2:	d4fc      	bmi.n	100082ae <_i2c_master_write_packet+0xa>

	i2c_wait_for_idle(i2c_module);

	/* Flush the FIFO */
	i2c_module->I2C_FLUSH.reg = 1;
100082b4:	2301      	movs	r3, #1
100082b6:	2434      	movs	r4, #52	; 0x34
100082b8:	5513      	strb	r3, [r2, r4]

	/* Enable I2C on bus (start condition) */
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
100082ba:	3c14      	subs	r4, #20
100082bc:	5513      	strb	r3, [r2, r4]

	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
100082be:	880b      	ldrh	r3, [r1, #0]
100082c0:	005b      	lsls	r3, r3, #1
100082c2:	34e0      	adds	r4, #224	; 0xe0
100082c4:	4323      	orrs	r3, r4
100082c6:	b29b      	uxth	r3, r3
100082c8:	8013      	strh	r3, [r2, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);
	
	I2c *const i2c_module = (module->hw);
	uint16_t counter = 0;
100082ca:	2400      	movs	r4, #0
	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
			((packet->address) << 1) | I2C_TRANSFER_WRITE;
	do {
		status = i2c_module->TRANSMIT_STATUS.reg;
		if (status & I2C_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_Msk) {
100082cc:	2501      	movs	r5, #1

	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
			((packet->address) << 1) | I2C_TRANSFER_WRITE;
	do {
		status = i2c_module->TRANSMIT_STATUS.reg;
100082ce:	7a13      	ldrb	r3, [r2, #8]
100082d0:	b2db      	uxtb	r3, r3
		if (status & I2C_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_Msk) {
100082d2:	421d      	tst	r5, r3
100082d4:	d004      	beq.n	100082e0 <_i2c_master_write_packet+0x3c>
			i2c_module->TRANSMIT_DATA.reg = packet->data[counter++];
100082d6:	1c67      	adds	r7, r4, #1
100082d8:	6848      	ldr	r0, [r1, #4]
100082da:	5d04      	ldrb	r4, [r0, r4]
100082dc:	8014      	strh	r4, [r2, #0]
100082de:	b2bc      	uxth	r4, r7
		}
	} while (counter < length); 
100082e0:	42b4      	cmp	r4, r6
100082e2:	d3f4      	bcc.n	100082ce <_i2c_master_write_packet+0x2a>

	/* Now check whether the core has sent the data out and free the bus */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
100082e4:	06db      	lsls	r3, r3, #27
100082e6:	d403      	bmi.n	100082f0 <_i2c_master_write_packet+0x4c>
100082e8:	2110      	movs	r1, #16
			status = i2c_module->TRANSMIT_STATUS.reg;
100082ea:	7a13      	ldrb	r3, [r2, #8]
			i2c_module->TRANSMIT_DATA.reg = packet->data[counter++];
		}
	} while (counter < length); 

	/* Now check whether the core has sent the data out and free the bus */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
100082ec:	420b      	tst	r3, r1
100082ee:	d0fc      	beq.n	100082ea <_i2c_master_write_packet+0x46>
			status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition */
	if (!module->no_stop) {
100082f0:	4663      	mov	r3, ip
100082f2:	795b      	ldrb	r3, [r3, #5]
100082f4:	2b00      	cmp	r3, #0
100082f6:	d102      	bne.n	100082fe <_i2c_master_write_packet+0x5a>
		i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
100082f8:	2100      	movs	r1, #0
100082fa:	3320      	adds	r3, #32
100082fc:	54d1      	strb	r1, [r2, r3]
	}

	return STATUS_OK;
}
100082fe:	2000      	movs	r0, #0
10008300:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008302:	46c0      	nop			; (mov r8, r8)

10008304 <i2c_master_get_config_defaults>:
		struct i2c_master_config *const config)
{
	/* Sanity check */
	Assert(config);
	
	config->clock_source    = I2C_CLK_INPUT_3;
10008304:	2303      	movs	r3, #3
10008306:	7003      	strb	r3, [r0, #0]
	config->clock_divider   = 0x10;
10008308:	330d      	adds	r3, #13
1000830a:	8043      	strh	r3, [r0, #2]
	config->pin_number_pad0 = PIN_LP_GPIO_8;
1000830c:	3b08      	subs	r3, #8
1000830e:	6043      	str	r3, [r0, #4]
	config->pin_number_pad1 = PIN_LP_GPIO_9;
10008310:	3301      	adds	r3, #1
10008312:	60c3      	str	r3, [r0, #12]
	config->pinmux_sel_pad0 = MUX_LP_GPIO_8_I2C0_SDA;
10008314:	3b07      	subs	r3, #7
10008316:	6083      	str	r3, [r0, #8]
	config->pinmux_sel_pad1 = MUX_LP_GPIO_9_I2C0_SCL;
10008318:	6103      	str	r3, [r0, #16]
}
1000831a:	4770      	bx	lr

1000831c <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		I2c *const hw,
		const struct i2c_master_config *const config)
{
1000831c:	b570      	push	{r4, r5, r6, lr}
1000831e:	0004      	movs	r4, r0
10008320:	0015      	movs	r5, r2
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);
	
	module->hw = hw;
10008322:	6001      	str	r1, [r0, #0]

	/* Sanity check arguments. */
	if ((module == NULL) || (config == NULL))
10008324:	2800      	cmp	r0, #0
10008326:	d026      	beq.n	10008376 <i2c_master_init+0x5a>
10008328:	2a00      	cmp	r2, #0
1000832a:	d026      	beq.n	1000837a <i2c_master_init+0x5e>
1000832c:	2228      	movs	r2, #40	; 0x28
1000832e:	5c8b      	ldrb	r3, [r1, r2]
10008330:	07db      	lsls	r3, r3, #31
10008332:	d4fc      	bmi.n	1000832e <i2c_master_init+0x12>
 *
 */
static inline void i2c_disable(I2c *const i2c_module)
{
	i2c_wait_for_idle(i2c_module);
	i2c_module->I2C_MODULE_ENABLE.reg = 0;
10008334:	2300      	movs	r3, #0
10008336:	750b      	strb	r3, [r1, #20]
		return STATUS_ERR_INVALID_ARG;

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
10008338:	6823      	ldr	r3, [r4, #0]
1000833a:	4a11      	ldr	r2, [pc, #68]	; (10008380 <i2c_master_init+0x64>)
1000833c:	4293      	cmp	r3, r2
1000833e:	d103      	bne.n	10008348 <i2c_master_init+0x2c>
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
10008340:	2003      	movs	r0, #3
10008342:	4b10      	ldr	r3, [pc, #64]	; (10008384 <i2c_master_init+0x68>)
10008344:	4798      	blx	r3
10008346:	e006      	b.n	10008356 <i2c_master_init+0x3a>
	} else if (module->hw == I2C1) {
		system_peripheral_reset(PERIPHERAL_I2C1_CORE);
	} else {
		return STATUS_ERR_INVALID_ARG;
10008348:	2017      	movs	r0, #23
		return STATUS_ERR_INVALID_ARG;

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
	} else if (module->hw == I2C1) {
1000834a:	4a0f      	ldr	r2, [pc, #60]	; (10008388 <i2c_master_init+0x6c>)
1000834c:	4293      	cmp	r3, r2
1000834e:	d115      	bne.n	1000837c <i2c_master_init+0x60>
		system_peripheral_reset(PERIPHERAL_I2C1_CORE);
10008350:	3002      	adds	r0, #2
10008352:	4b0c      	ldr	r3, [pc, #48]	; (10008384 <i2c_master_init+0x68>)
10008354:	4798      	blx	r3
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);

	I2c *const i2c_module = (module->hw);
10008356:	6824      	ldr	r4, [r4, #0]

	/* Set the pinmux for this i2c module. */
	gpio_pinmux_cofiguration(config->pin_number_pad0, (uint16_t)(config->pinmux_sel_pad0));
10008358:	8929      	ldrh	r1, [r5, #8]
1000835a:	7928      	ldrb	r0, [r5, #4]
1000835c:	4e0b      	ldr	r6, [pc, #44]	; (1000838c <i2c_master_init+0x70>)
1000835e:	47b0      	blx	r6
	gpio_pinmux_cofiguration(config->pin_number_pad1, (uint16_t)(config->pinmux_sel_pad1));
10008360:	8a29      	ldrh	r1, [r5, #16]
10008362:	7b28      	ldrb	r0, [r5, #12]
10008364:	47b0      	blx	r6
	/* Set clock. */
	i2c_module->CLOCK_SOURCE_SELECT.reg = config->clock_source;
10008366:	782b      	ldrb	r3, [r5, #0]
10008368:	7423      	strb	r3, [r4, #16]
	i2c_module->I2C_CLK_DIVIDER.reg = I2C_CLK_DIVIDER_I2C_DIVIDE_RATIO(config->clock_divider);
1000836a:	886b      	ldrh	r3, [r5, #2]
1000836c:	8323      	strh	r3, [r4, #24]
	/* Enable master mode. */
	i2c_module->I2C_MASTER_MODE.reg = I2C_MASTER_MODE_MASTER_ENABLE_1;
1000836e:	2301      	movs	r3, #1
10008370:	7723      	strb	r3, [r4, #28]
#endif

	/* Set config and return status. */
	_i2c_master_set_config(module, config);

	return STATUS_OK;
10008372:	2000      	movs	r0, #0
10008374:	e002      	b.n	1000837c <i2c_master_init+0x60>
	
	module->hw = hw;

	/* Sanity check arguments. */
	if ((module == NULL) || (config == NULL))
		return STATUS_ERR_INVALID_ARG;
10008376:	2017      	movs	r0, #23
10008378:	e000      	b.n	1000837c <i2c_master_init+0x60>
1000837a:	2017      	movs	r0, #23

	/* Set config and return status. */
	_i2c_master_set_config(module, config);

	return STATUS_OK;
}
1000837c:	bd70      	pop	{r4, r5, r6, pc}
1000837e:	46c0      	nop			; (mov r8, r8)
10008380:	40003000 	.word	0x40003000
10008384:	1000b72d 	.word	0x1000b72d
10008388:	40003400 	.word	0x40003400
1000838c:	1000acb5 	.word	0x1000acb5

10008390 <i2c_master_read_packet_wait>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
10008390:	b510      	push	{r4, lr}
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
10008392:	2800      	cmp	r0, #0
10008394:	d008      	beq.n	100083a8 <i2c_master_read_packet_wait+0x18>
		return STATUS_ERR_INVALID_ARG;
10008396:	2317      	movs	r3, #23
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
10008398:	2900      	cmp	r1, #0
1000839a:	d006      	beq.n	100083aa <i2c_master_read_packet_wait+0x1a>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
1000839c:	2300      	movs	r3, #0
1000839e:	7143      	strb	r3, [r0, #5]

	return _i2c_master_read_packet(module, packet);
100083a0:	4b03      	ldr	r3, [pc, #12]	; (100083b0 <i2c_master_read_packet_wait+0x20>)
100083a2:	4798      	blx	r3
100083a4:	0003      	movs	r3, r0
100083a6:	e000      	b.n	100083aa <i2c_master_read_packet_wait+0x1a>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
		return STATUS_ERR_INVALID_ARG;
100083a8:	2317      	movs	r3, #23
#endif

	module->no_stop = false;

	return _i2c_master_read_packet(module, packet);
}
100083aa:	0018      	movs	r0, r3
100083ac:	bd10      	pop	{r4, pc}
100083ae:	46c0      	nop			; (mov r8, r8)
100083b0:	10008219 	.word	0x10008219

100083b4 <i2c_master_write_packet_wait>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
100083b4:	b510      	push	{r4, lr}
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
100083b6:	2800      	cmp	r0, #0
100083b8:	d008      	beq.n	100083cc <i2c_master_write_packet_wait+0x18>
		return STATUS_ERR_INVALID_ARG;
100083ba:	2317      	movs	r3, #23
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
100083bc:	2900      	cmp	r1, #0
100083be:	d006      	beq.n	100083ce <i2c_master_write_packet_wait+0x1a>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
100083c0:	2300      	movs	r3, #0
100083c2:	7143      	strb	r3, [r0, #5]

	return _i2c_master_write_packet(module, packet);
100083c4:	4b03      	ldr	r3, [pc, #12]	; (100083d4 <i2c_master_write_packet_wait+0x20>)
100083c6:	4798      	blx	r3
100083c8:	0003      	movs	r3, r0
100083ca:	e000      	b.n	100083ce <i2c_master_write_packet_wait+0x1a>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
100083cc:	2317      	movs	r3, #23
#endif

	module->no_stop = false;

	return _i2c_master_write_packet(module, packet);
}
100083ce:	0018      	movs	r0, r3
100083d0:	bd10      	pop	{r4, pc}
100083d2:	46c0      	nop			; (mov r8, r8)
100083d4:	100082a5 	.word	0x100082a5

100083d8 <i2c_master_write_packet_wait_no_stop>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
100083d8:	b510      	push	{r4, lr}
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
100083da:	2800      	cmp	r0, #0
100083dc:	d008      	beq.n	100083f0 <i2c_master_write_packet_wait_no_stop+0x18>
		return STATUS_ERR_INVALID_ARG;
100083de:	2317      	movs	r3, #23
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
100083e0:	2900      	cmp	r1, #0
100083e2:	d006      	beq.n	100083f2 <i2c_master_write_packet_wait_no_stop+0x1a>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = true;
100083e4:	3b16      	subs	r3, #22
100083e6:	7143      	strb	r3, [r0, #5]

	return _i2c_master_write_packet(module, packet);
100083e8:	4b03      	ldr	r3, [pc, #12]	; (100083f8 <i2c_master_write_packet_wait_no_stop+0x20>)
100083ea:	4798      	blx	r3
100083ec:	0003      	movs	r3, r0
100083ee:	e000      	b.n	100083f2 <i2c_master_write_packet_wait_no_stop+0x1a>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
100083f0:	2317      	movs	r3, #23
#endif

	module->no_stop = true;

	return _i2c_master_write_packet(module, packet);
}
100083f2:	0018      	movs	r0, r3
100083f4:	bd10      	pop	{r4, pc}
100083f6:	46c0      	nop			; (mov r8, r8)
100083f8:	100082a5 	.word	0x100082a5

100083fc <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
100083fc:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
100083fe:	4a06      	ldr	r2, [pc, #24]	; (10008418 <_sbrk+0x1c>)
10008400:	6812      	ldr	r2, [r2, #0]
10008402:	2a00      	cmp	r2, #0
10008404:	d102      	bne.n	1000840c <_sbrk+0x10>
		heap = (unsigned char *)&_end;
10008406:	4905      	ldr	r1, [pc, #20]	; (1000841c <_sbrk+0x20>)
10008408:	4a03      	ldr	r2, [pc, #12]	; (10008418 <_sbrk+0x1c>)
1000840a:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
1000840c:	4a02      	ldr	r2, [pc, #8]	; (10008418 <_sbrk+0x1c>)
1000840e:	6810      	ldr	r0, [r2, #0]

	heap += incr;
10008410:	18c3      	adds	r3, r0, r3
10008412:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
10008414:	4770      	bx	lr
10008416:	46c0      	nop			; (mov r8, r8)
10008418:	100185c4 	.word	0x100185c4
1000841c:	1001bc98 	.word	0x1001bc98

10008420 <_close>:
}

extern int _close(int file)
{
	return -1;
}
10008420:	2001      	movs	r0, #1
10008422:	4240      	negs	r0, r0
10008424:	4770      	bx	lr
10008426:	46c0      	nop			; (mov r8, r8)

10008428 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
10008428:	2380      	movs	r3, #128	; 0x80
1000842a:	019b      	lsls	r3, r3, #6
1000842c:	604b      	str	r3, [r1, #4]

	return 0;
}
1000842e:	2000      	movs	r0, #0
10008430:	4770      	bx	lr
10008432:	46c0      	nop			; (mov r8, r8)

10008434 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
10008434:	2001      	movs	r0, #1
10008436:	4770      	bx	lr

10008438 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
10008438:	2000      	movs	r0, #0
1000843a:	4770      	bx	lr

1000843c <sms_ble_pair_request_fn>:
	return AT_BLE_SUCCESS;
}

/* AT_BLE_PAIR_REQUEST (#10) */
at_ble_status_t sms_ble_pair_request_fn(void *params)
{
1000843c:	b510      	push	{r4, lr}
	at_ble_pair_request_t *request = (at_ble_pair_request_t *)params;
	DBG_LOG_DEV("[sms_ble_pair_request_fn]\t\tPairing request...");
1000843e:	4804      	ldr	r0, [pc, #16]	; (10008450 <sms_ble_pair_request_fn+0x14>)
10008440:	4b04      	ldr	r3, [pc, #16]	; (10008454 <sms_ble_pair_request_fn+0x18>)
10008442:	4798      	blx	r3
10008444:	4804      	ldr	r0, [pc, #16]	; (10008458 <sms_ble_pair_request_fn+0x1c>)
10008446:	4b05      	ldr	r3, [pc, #20]	; (1000845c <sms_ble_pair_request_fn+0x20>)
10008448:	4798      	blx	r3
	//DBG_LOG_DEV("- conn handle: 0x%04x\r\n- peer features: 0x%02x", request->handle, request->peer_features);
	return AT_BLE_SUCCESS;
}
1000844a:	2000      	movs	r0, #0
1000844c:	bd10      	pop	{r4, pc}
1000844e:	46c0      	nop			; (mov r8, r8)
10008450:	10016a10 	.word	0x10016a10
10008454:	100159e9 	.word	0x100159e9
10008458:	10016a14 	.word	0x10016a14
1000845c:	100158c9 	.word	0x100158c9

10008460 <sms_ble_notification_confirmed_fn>:

/* AT_BLE_NOTIFICATION_CONFIRMED (#29) */
at_ble_status_t sms_ble_notification_confirmed_fn(void *params)
{
10008460:	b510      	push	{r4, lr}
	//DBG_LOG_CONT(" done!");
	//gpio_pin_set_output_level(dbg_pin, DBG_PIN_HIGH);
	
	at_ble_cmd_complete_event_t *notification_status = (at_ble_cmd_complete_event_t *)params;
	ble_instance.sending_queue--;
10008462:	4c0a      	ldr	r4, [pc, #40]	; (1000848c <sms_ble_notification_confirmed_fn+0x2c>)
10008464:	7a23      	ldrb	r3, [r4, #8]
10008466:	3b01      	subs	r3, #1
10008468:	b2db      	uxtb	r3, r3
1000846a:	7223      	strb	r3, [r4, #8]
	//DBG_LOG("T/O: OFF");
	ble_instance.timeout = BLE_APP_TIMEOUT_OFF;
1000846c:	2301      	movs	r3, #1
1000846e:	425b      	negs	r3, r3
10008470:	6063      	str	r3, [r4, #4]
	//button_instance.current_state = sms_button_get_state();
	//DBG_LOG_DEV("[sms_ble_notification_confirmed_fn]\tNotification sent... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
	//DBG_LOG_DEV("- conn handle: 0x%04x\r\n- operation: 0x%02x\r\n- status: 0x%02x", notification_status->conn_handle, notification_status->operation, notification_status->status);
	sms_dualtimer_stop(DUALTIMER_TIMER2);
10008472:	2001      	movs	r0, #1
10008474:	4b06      	ldr	r3, [pc, #24]	; (10008490 <sms_ble_notification_confirmed_fn+0x30>)
10008476:	4798      	blx	r3
	timer2_current_mode = TIMER2_MODE_NONE;
10008478:	2200      	movs	r2, #0
1000847a:	4b06      	ldr	r3, [pc, #24]	; (10008494 <sms_ble_notification_confirmed_fn+0x34>)
1000847c:	701a      	strb	r2, [r3, #0]
	ble_instance.current_state = BLE_STATE_PAIRED;
1000847e:	2322      	movs	r3, #34	; 0x22
10008480:	7023      	strb	r3, [r4, #0]
	//DBG_LOG_CONT_DEV(" done!");

	//gpio_pin_set_output_level(dbg_pin, DBG_PIN_LOW);
	
	//DBG_LOG_DEV("Timer1 current mode: %d", timer1_current_mode);
	if(timer1_current_mode == TIMER1_MODE_NONE) {
10008482:	4b05      	ldr	r3, [pc, #20]	; (10008498 <sms_ble_notification_confirmed_fn+0x38>)
10008484:	781b      	ldrb	r3, [r3, #0]
		//ulp_ready = true;
	}
	return AT_BLE_SUCCESS;
}
10008486:	2000      	movs	r0, #0
10008488:	bd10      	pop	{r4, pc}
1000848a:	46c0      	nop			; (mov r8, r8)
1000848c:	1001a06c 	.word	0x1001a06c
10008490:	1000a339 	.word	0x1000a339
10008494:	1001a19b 	.word	0x1001a19b
10008498:	1001a068 	.word	0x1001a068

1000849c <sms_ble_indication_confirmed_fn>:

/* AT_BLE_INDICATION_CONFIRMED (#30) */
at_ble_status_t sms_ble_indication_confirmed_fn(void *params)
{
1000849c:	b510      	push	{r4, lr}
	
	at_ble_indication_confirmed_t *indication_status = (at_ble_indication_confirmed_t *)params;
	//button_instance.current_state = sms_button_get_state();
	//DBG_LOG_DEV("[sms_ble_indication_confirmed]\tIndication confirmed... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
	//DBG_LOG_DEV("- conn handle: 0x%04x\r\n- char handle: 0x%04x\r\n- status: 0x%02x", indication_status->conn_handle, indication_status->char_handle, indication_status->status);
	sms_dualtimer_stop(DUALTIMER_TIMER2);
1000849e:	2001      	movs	r0, #1
100084a0:	4b05      	ldr	r3, [pc, #20]	; (100084b8 <sms_ble_indication_confirmed_fn+0x1c>)
100084a2:	4798      	blx	r3
	timer2_current_mode = TIMER2_MODE_NONE;
100084a4:	2200      	movs	r2, #0
100084a6:	4b05      	ldr	r3, [pc, #20]	; (100084bc <sms_ble_indication_confirmed_fn+0x20>)
100084a8:	701a      	strb	r2, [r3, #0]
	ble_instance.current_state = BLE_STATE_PAIRED;
100084aa:	3222      	adds	r2, #34	; 0x22
100084ac:	4b04      	ldr	r3, [pc, #16]	; (100084c0 <sms_ble_indication_confirmed_fn+0x24>)
100084ae:	701a      	strb	r2, [r3, #0]
	//sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
	//sms_sensors_toggle_interrupt(SMS_EXTINT_ENABLE);
	
	//gpio_pin_set_output_level(dbg_pin, DBG_PIN_LOW);
	
	if(timer1_current_mode == TIMER1_MODE_NONE) {
100084b0:	4b04      	ldr	r3, [pc, #16]	; (100084c4 <sms_ble_indication_confirmed_fn+0x28>)
100084b2:	781b      	ldrb	r3, [r3, #0]
		//ulp_ready = true;
	}
	return AT_BLE_SUCCESS;
}
100084b4:	2000      	movs	r0, #0
100084b6:	bd10      	pop	{r4, pc}
100084b8:	1000a339 	.word	0x1000a339
100084bc:	1001a19b 	.word	0x1001a19b
100084c0:	1001a06c 	.word	0x1001a06c
100084c4:	1001a068 	.word	0x1001a068

100084c8 <sms_ble_init_variables>:


/* Own functions */
void sms_ble_init_variables(void)
{
	ble_instance.current_state = BLE_STATE_POWEROFF;
100084c8:	4b04      	ldr	r3, [pc, #16]	; (100084dc <sms_ble_init_variables+0x14>)
100084ca:	2200      	movs	r2, #0
100084cc:	701a      	strb	r2, [r3, #0]
	ble_instance.conn_handle = 0xffff;
100084ce:	2101      	movs	r1, #1
100084d0:	4249      	negs	r1, r1
100084d2:	8159      	strh	r1, [r3, #10]
	ble_instance.ind_retries = 0;
100084d4:	731a      	strb	r2, [r3, #12]
	ble_instance.sending_queue = 0;
100084d6:	721a      	strb	r2, [r3, #8]
	ble_instance.send_cnt = 0;
100084d8:	81da      	strh	r2, [r3, #14]
}
100084da:	4770      	bx	lr
100084dc:	1001a06c 	.word	0x1001a06c

100084e0 <sms_ble_power_down>:
	if(sms_ble_advertise() != AT_BLE_SUCCESS) return -1;
	return 0;
}

void sms_ble_power_down(void)
{
100084e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	sms_monitor_get_states("[sms_ble_power_down]");
100084e2:	482c      	ldr	r0, [pc, #176]	; (10008594 <sms_ble_power_down+0xb4>)
100084e4:	4b2c      	ldr	r3, [pc, #176]	; (10008598 <sms_ble_power_down+0xb8>)
100084e6:	4798      	blx	r3
	if(ble_instance.current_state == BLE_STATE_POWEROFF) {
100084e8:	4b2c      	ldr	r3, [pc, #176]	; (1000859c <sms_ble_power_down+0xbc>)
100084ea:	781b      	ldrb	r3, [r3, #0]
100084ec:	2b00      	cmp	r3, #0
100084ee:	d03d      	beq.n	1000856c <sms_ble_power_down+0x8c>
	}
	else {
		/* Disable button interrupts */
		//sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
		/* Disconnect if necessary from BLE network */
		switch(ble_instance.current_state) {
100084f0:	4b2a      	ldr	r3, [pc, #168]	; (1000859c <sms_ble_power_down+0xbc>)
100084f2:	781b      	ldrb	r3, [r3, #0]
100084f4:	b2db      	uxtb	r3, r3
100084f6:	2b21      	cmp	r3, #33	; 0x21
100084f8:	d02d      	beq.n	10008556 <sms_ble_power_down+0x76>
100084fa:	d802      	bhi.n	10008502 <sms_ble_power_down+0x22>
100084fc:	2b20      	cmp	r3, #32
100084fe:	d005      	beq.n	1000850c <sms_ble_power_down+0x2c>
10008500:	e034      	b.n	1000856c <sms_ble_power_down+0x8c>
10008502:	2b22      	cmp	r3, #34	; 0x22
10008504:	d017      	beq.n	10008536 <sms_ble_power_down+0x56>
10008506:	2b23      	cmp	r3, #35	; 0x23
10008508:	d01b      	beq.n	10008542 <sms_ble_power_down+0x62>
1000850a:	e02f      	b.n	1000856c <sms_ble_power_down+0x8c>
			case BLE_STATE_ADVERTISING:
			DBG_LOG_DEV("[sms_ble_power_down]\tStopping command received during advertisement. Stopping... ");
1000850c:	4824      	ldr	r0, [pc, #144]	; (100085a0 <sms_ble_power_down+0xc0>)
1000850e:	4b25      	ldr	r3, [pc, #148]	; (100085a4 <sms_ble_power_down+0xc4>)
10008510:	4798      	blx	r3
10008512:	4825      	ldr	r0, [pc, #148]	; (100085a8 <sms_ble_power_down+0xc8>)
10008514:	4b25      	ldr	r3, [pc, #148]	; (100085ac <sms_ble_power_down+0xcc>)
10008516:	4798      	blx	r3
			if(at_ble_adv_stop() != AT_BLE_SUCCESS) {
10008518:	4b25      	ldr	r3, [pc, #148]	; (100085b0 <sms_ble_power_down+0xd0>)
1000851a:	4798      	blx	r3
1000851c:	2800      	cmp	r0, #0
1000851e:	d003      	beq.n	10008528 <sms_ble_power_down+0x48>
				DBG_LOG_CONT_DEV("failed!!!");
10008520:	4824      	ldr	r0, [pc, #144]	; (100085b4 <sms_ble_power_down+0xd4>)
10008522:	4b22      	ldr	r3, [pc, #136]	; (100085ac <sms_ble_power_down+0xcc>)
10008524:	4798      	blx	r3
10008526:	e021      	b.n	1000856c <sms_ble_power_down+0x8c>
				//#pragma TBD: manage adv_stop failure
			}
			else {
				DBG_LOG_CONT_DEV("done!");
10008528:	4823      	ldr	r0, [pc, #140]	; (100085b8 <sms_ble_power_down+0xd8>)
1000852a:	4b20      	ldr	r3, [pc, #128]	; (100085ac <sms_ble_power_down+0xcc>)
1000852c:	4798      	blx	r3
				ble_instance.current_state = BLE_STATE_DISCONNECTED;
1000852e:	2211      	movs	r2, #17
10008530:	4b1a      	ldr	r3, [pc, #104]	; (1000859c <sms_ble_power_down+0xbc>)
10008532:	701a      	strb	r2, [r3, #0]
10008534:	e01a      	b.n	1000856c <sms_ble_power_down+0x8c>
			}
			break;
			
			case BLE_STATE_PAIRED:
			DBG_LOG_DEV("[sms_ble_power_down]\t\tDevice paired... disabling interrupts & switching down sensors");
10008536:	481a      	ldr	r0, [pc, #104]	; (100085a0 <sms_ble_power_down+0xc0>)
10008538:	4b1a      	ldr	r3, [pc, #104]	; (100085a4 <sms_ble_power_down+0xc4>)
1000853a:	4798      	blx	r3
1000853c:	481f      	ldr	r0, [pc, #124]	; (100085bc <sms_ble_power_down+0xdc>)
1000853e:	4b1b      	ldr	r3, [pc, #108]	; (100085ac <sms_ble_power_down+0xcc>)
10008540:	4798      	blx	r3
			case BLE_STATE_INDICATING:
			DBG_LOG_DEV("[sms_ble_power_down]\t\tCurrently indicating");
10008542:	4817      	ldr	r0, [pc, #92]	; (100085a0 <sms_ble_power_down+0xc0>)
10008544:	4b17      	ldr	r3, [pc, #92]	; (100085a4 <sms_ble_power_down+0xc4>)
10008546:	4798      	blx	r3
10008548:	481d      	ldr	r0, [pc, #116]	; (100085c0 <sms_ble_power_down+0xe0>)
1000854a:	4b18      	ldr	r3, [pc, #96]	; (100085ac <sms_ble_power_down+0xcc>)
1000854c:	4798      	blx	r3
			sms_sensors_switch(false, false);
1000854e:	2100      	movs	r1, #0
10008550:	2000      	movs	r0, #0
10008552:	4b1c      	ldr	r3, [pc, #112]	; (100085c4 <sms_ble_power_down+0xe4>)
10008554:	4798      	blx	r3
			case BLE_STATE_CONNECTED:
			DBG_LOG_DEV("[sms_ble_power_down]\t\tDevice connected... disconnecting");
10008556:	4812      	ldr	r0, [pc, #72]	; (100085a0 <sms_ble_power_down+0xc0>)
10008558:	4b12      	ldr	r3, [pc, #72]	; (100085a4 <sms_ble_power_down+0xc4>)
1000855a:	4798      	blx	r3
1000855c:	481a      	ldr	r0, [pc, #104]	; (100085c8 <sms_ble_power_down+0xe8>)
1000855e:	4b13      	ldr	r3, [pc, #76]	; (100085ac <sms_ble_power_down+0xcc>)
10008560:	4798      	blx	r3
			at_ble_disconnect(ble_instance.conn_handle, AT_BLE_TERMINATED_BY_USER);
10008562:	4b0e      	ldr	r3, [pc, #56]	; (1000859c <sms_ble_power_down+0xbc>)
10008564:	8958      	ldrh	r0, [r3, #10]
10008566:	2113      	movs	r1, #19
10008568:	4b18      	ldr	r3, [pc, #96]	; (100085cc <sms_ble_power_down+0xec>)
1000856a:	4798      	blx	r3
	/* Common part:
	 * - set BLE state to power-off
	 * - blink LED
	 * - enable ULP
	 */
	ble_instance.current_state = BLE_STATE_POWEROFF;
1000856c:	2200      	movs	r2, #0
1000856e:	4b0b      	ldr	r3, [pc, #44]	; (1000859c <sms_ble_power_down+0xbc>)
10008570:	701a      	strb	r2, [r3, #0]
10008572:	2404      	movs	r4, #4
	for(uint8_t i = 0; i < SMS_BLINK_SHTDWN_CNT; i++) {
		sms_led_toggle(SMS_LED_0);
10008574:	4f16      	ldr	r7, [pc, #88]	; (100085d0 <sms_ble_power_down+0xf0>)
		delay_ms(SMS_BLINK_SHTDWN_MS);
10008576:	26c8      	movs	r6, #200	; 0xc8
10008578:	0076      	lsls	r6, r6, #1
1000857a:	4d16      	ldr	r5, [pc, #88]	; (100085d4 <sms_ble_power_down+0xf4>)
	 * - blink LED
	 * - enable ULP
	 */
	ble_instance.current_state = BLE_STATE_POWEROFF;
	for(uint8_t i = 0; i < SMS_BLINK_SHTDWN_CNT; i++) {
		sms_led_toggle(SMS_LED_0);
1000857c:	2016      	movs	r0, #22
1000857e:	47b8      	blx	r7
		delay_ms(SMS_BLINK_SHTDWN_MS);
10008580:	0030      	movs	r0, r6
10008582:	47a8      	blx	r5
10008584:	3c01      	subs	r4, #1
10008586:	b2e4      	uxtb	r4, r4
	 * - set BLE state to power-off
	 * - blink LED
	 * - enable ULP
	 */
	ble_instance.current_state = BLE_STATE_POWEROFF;
	for(uint8_t i = 0; i < SMS_BLINK_SHTDWN_CNT; i++) {
10008588:	2c00      	cmp	r4, #0
1000858a:	d1f7      	bne.n	1000857c <sms_ble_power_down+0x9c>
		sms_led_toggle(SMS_LED_0);
		delay_ms(SMS_BLINK_SHTDWN_MS);
	}
	ulp_ready = true;
1000858c:	2201      	movs	r2, #1
1000858e:	4b12      	ldr	r3, [pc, #72]	; (100085d8 <sms_ble_power_down+0xf8>)
10008590:	701a      	strb	r2, [r3, #0]
}
10008592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10008594:	10016a44 	.word	0x10016a44
10008598:	10008ee9 	.word	0x10008ee9
1000859c:	1001a06c 	.word	0x1001a06c
100085a0:	10016a10 	.word	0x10016a10
100085a4:	100159e9 	.word	0x100159e9
100085a8:	10016a5c 	.word	0x10016a5c
100085ac:	100158c9 	.word	0x100158c9
100085b0:	1000f13d 	.word	0x1000f13d
100085b4:	10016ab0 	.word	0x10016ab0
100085b8:	10016abc 	.word	0x10016abc
100085bc:	10016ac4 	.word	0x10016ac4
100085c0:	10016b1c 	.word	0x10016b1c
100085c4:	10009ff1 	.word	0x10009ff1
100085c8:	10016b48 	.word	0x10016b48
100085cc:	1000f169 	.word	0x1000f169
100085d0:	10009d1d 	.word	0x10009d1d
100085d4:	1000a345 	.word	0x1000a345
100085d8:	1001a06a 	.word	0x1001a06a

100085dc <sms_ble_adv_report_fn>:
//#include <stdio.h>
#include "sms_ble.h"

/* AT_BLE_ADV_REPORT (#3) */
at_ble_status_t sms_ble_adv_report_fn(void *params)
{
100085dc:	b510      	push	{r4, lr}
	at_ble_adv_report_t *adv_report = (at_ble_adv_report_t *)params;
	ble_instance.current_state = BLE_STATE_DISCONNECTED;
100085de:	2211      	movs	r2, #17
100085e0:	4b05      	ldr	r3, [pc, #20]	; (100085f8 <sms_ble_adv_report_fn+0x1c>)
100085e2:	701a      	strb	r2, [r3, #0]
	DBG_LOG_DEV("[sms_ble_adv_report_fn]\t\tAdvertisement timeout...");
100085e4:	4805      	ldr	r0, [pc, #20]	; (100085fc <sms_ble_adv_report_fn+0x20>)
100085e6:	4b06      	ldr	r3, [pc, #24]	; (10008600 <sms_ble_adv_report_fn+0x24>)
100085e8:	4798      	blx	r3
100085ea:	4806      	ldr	r0, [pc, #24]	; (10008604 <sms_ble_adv_report_fn+0x28>)
100085ec:	4b06      	ldr	r3, [pc, #24]	; (10008608 <sms_ble_adv_report_fn+0x2c>)
100085ee:	4798      	blx	r3
	sms_ble_power_down();
100085f0:	4b06      	ldr	r3, [pc, #24]	; (1000860c <sms_ble_adv_report_fn+0x30>)
100085f2:	4798      	blx	r3
	return AT_BLE_SUCCESS;
}
100085f4:	2000      	movs	r0, #0
100085f6:	bd10      	pop	{r4, pc}
100085f8:	1001a06c 	.word	0x1001a06c
100085fc:	10016a10 	.word	0x10016a10
10008600:	100159e9 	.word	0x100159e9
10008604:	10016b80 	.word	0x10016b80
10008608:	100158c9 	.word	0x100158c9
1000860c:	100084e1 	.word	0x100084e1

10008610 <sms_ble_connected_fn>:

/* AT_BLE_CONNECTED (#5) */
at_ble_status_t sms_ble_connected_fn(void *params)
{
10008610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(ble_instance.current_state == BLE_STATE_ADVERTISING) {
10008612:	4b11      	ldr	r3, [pc, #68]	; (10008658 <sms_ble_connected_fn+0x48>)
10008614:	781b      	ldrb	r3, [r3, #0]
10008616:	2b20      	cmp	r3, #32
10008618:	d113      	bne.n	10008642 <sms_ble_connected_fn+0x32>
		at_ble_connected_t *connected = (at_ble_connected_t *)params;
		ble_instance.conn_handle = connected->handle;
1000861a:	8903      	ldrh	r3, [r0, #8]
1000861c:	4c0e      	ldr	r4, [pc, #56]	; (10008658 <sms_ble_connected_fn+0x48>)
1000861e:	8163      	strh	r3, [r4, #10]
		ble_instance.current_state = BLE_STATE_CONNECTED;
10008620:	2321      	movs	r3, #33	; 0x21
10008622:	7023      	strb	r3, [r4, #0]
		DBG_LOG_DEV("[sms_ble_connected_fn]\t\tDevices connected...");
10008624:	4f0d      	ldr	r7, [pc, #52]	; (1000865c <sms_ble_connected_fn+0x4c>)
10008626:	0038      	movs	r0, r7
10008628:	4e0d      	ldr	r6, [pc, #52]	; (10008660 <sms_ble_connected_fn+0x50>)
1000862a:	47b0      	blx	r6
1000862c:	480d      	ldr	r0, [pc, #52]	; (10008664 <sms_ble_connected_fn+0x54>)
1000862e:	4d0e      	ldr	r5, [pc, #56]	; (10008668 <sms_ble_connected_fn+0x58>)
10008630:	47a8      	blx	r5
		//DBG_LOG_DEV("- conn handle: 0x%04x\r\n- conn interval: %d\r\n- conn latency: %d\r\n- supervision timeout: %d\r\n- peer address: 0x", connected->handle, connected->conn_params.con_interval, connected->conn_params.con_latency, connected->conn_params.sup_to);
		//for(uint8_t i = 0; i < AT_BLE_ADDR_LEN; i++) {
		//DBG_LOG_CONT_DEV("%02x",connected->peer_addr.addr[AT_BLE_ADDR_LEN - (i+1)]);
		//}
		DBG_LOG_DEV("BLE T/O: 5000 ms");
10008632:	0038      	movs	r0, r7
10008634:	47b0      	blx	r6
10008636:	480d      	ldr	r0, [pc, #52]	; (1000866c <sms_ble_connected_fn+0x5c>)
10008638:	47a8      	blx	r5
		ble_instance.timeout = BLE_APP_TIMEOUT_PAIR;
1000863a:	23fa      	movs	r3, #250	; 0xfa
1000863c:	005b      	lsls	r3, r3, #1
1000863e:	6063      	str	r3, [r4, #4]
10008640:	e007      	b.n	10008652 <sms_ble_connected_fn+0x42>
	}
	else {
		DBG_LOG_DEV("[sms_ble_connected_fn]\t\tWrong BLE state... shutting down");
10008642:	4806      	ldr	r0, [pc, #24]	; (1000865c <sms_ble_connected_fn+0x4c>)
10008644:	4b06      	ldr	r3, [pc, #24]	; (10008660 <sms_ble_connected_fn+0x50>)
10008646:	4798      	blx	r3
10008648:	4809      	ldr	r0, [pc, #36]	; (10008670 <sms_ble_connected_fn+0x60>)
1000864a:	4b07      	ldr	r3, [pc, #28]	; (10008668 <sms_ble_connected_fn+0x58>)
1000864c:	4798      	blx	r3
		sms_ble_power_down();
1000864e:	4b09      	ldr	r3, [pc, #36]	; (10008674 <sms_ble_connected_fn+0x64>)
10008650:	4798      	blx	r3
	}
	return AT_BLE_SUCCESS;
}
10008652:	2000      	movs	r0, #0
10008654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10008656:	46c0      	nop			; (mov r8, r8)
10008658:	1001a06c 	.word	0x1001a06c
1000865c:	10016a10 	.word	0x10016a10
10008660:	100159e9 	.word	0x100159e9
10008664:	10016bb4 	.word	0x10016bb4
10008668:	100158c9 	.word	0x100158c9
1000866c:	10016be4 	.word	0x10016be4
10008670:	10016bf8 	.word	0x10016bf8
10008674:	100084e1 	.word	0x100084e1

10008678 <sms_ble_paired_fn>:
	return AT_BLE_SUCCESS;
}

/* AT_BLE_PAIR_DONE (#9) */
at_ble_status_t sms_ble_paired_fn(void *params)
{
10008678:	b510      	push	{r4, lr}
	if(ble_instance.current_state == BLE_STATE_CONNECTED) {
1000867a:	4b0b      	ldr	r3, [pc, #44]	; (100086a8 <sms_ble_paired_fn+0x30>)
1000867c:	781b      	ldrb	r3, [r3, #0]
1000867e:	2b21      	cmp	r3, #33	; 0x21
10008680:	d10d      	bne.n	1000869e <sms_ble_paired_fn+0x26>
		ble_instance.current_state = BLE_STATE_PAIRED;
10008682:	4c09      	ldr	r4, [pc, #36]	; (100086a8 <sms_ble_paired_fn+0x30>)
10008684:	3301      	adds	r3, #1
10008686:	7023      	strb	r3, [r4, #0]
		at_ble_pair_done_t *pair_status = (at_ble_pair_done_t *)params;
		sms_monitor_get_states("[sms_ble_paired_fn]");
10008688:	4808      	ldr	r0, [pc, #32]	; (100086ac <sms_ble_paired_fn+0x34>)
1000868a:	4b09      	ldr	r3, [pc, #36]	; (100086b0 <sms_ble_paired_fn+0x38>)
1000868c:	4798      	blx	r3
		//DBG_LOG_DEV("- conn handle: 0x%04x\r\n- authorization: 0x%02x\r\n- status: 0x%02x", pair_status->handle, pair_status->auth, pair_status->status);
		
		sms_sensors_switch(true, true);
1000868e:	2101      	movs	r1, #1
10008690:	2001      	movs	r0, #1
10008692:	4b08      	ldr	r3, [pc, #32]	; (100086b4 <sms_ble_paired_fn+0x3c>)
10008694:	4798      	blx	r3
		
		//sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
		//DBG_LOG("T/O: OFF");
		ble_instance.timeout = BLE_APP_TIMEOUT_OFF;
10008696:	2301      	movs	r3, #1
10008698:	425b      	negs	r3, r3
1000869a:	6063      	str	r3, [r4, #4]
1000869c:	e001      	b.n	100086a2 <sms_ble_paired_fn+0x2a>
	}
	else {
		sms_ble_power_down();
1000869e:	4b06      	ldr	r3, [pc, #24]	; (100086b8 <sms_ble_paired_fn+0x40>)
100086a0:	4798      	blx	r3
	}
	return AT_BLE_SUCCESS;
}
100086a2:	2000      	movs	r0, #0
100086a4:	bd10      	pop	{r4, pc}
100086a6:	46c0      	nop			; (mov r8, r8)
100086a8:	1001a06c 	.word	0x1001a06c
100086ac:	10016c34 	.word	0x10016c34
100086b0:	10008ee9 	.word	0x10008ee9
100086b4:	10009ff1 	.word	0x10009ff1
100086b8:	100084e1 	.word	0x100084e1

100086bc <sms_ble_advertise>:
	}
	ulp_ready = true;
}

at_ble_status_t sms_ble_advertise(void)
{
100086bc:	b510      	push	{r4, lr}
100086be:	b084      	sub	sp, #16
	at_ble_status_t status = AT_BLE_FAILURE;
	ble_instance.current_state = BLE_STATE_ADVERTISING;
100086c0:	2220      	movs	r2, #32
100086c2:	4b17      	ldr	r3, [pc, #92]	; (10008720 <sms_ble_advertise+0x64>)
100086c4:	701a      	strb	r2, [r3, #0]
	
	/* Set the advertisement data */
	if((status = ble_advertisement_data_set()) != AT_BLE_SUCCESS) {
100086c6:	4b17      	ldr	r3, [pc, #92]	; (10008724 <sms_ble_advertise+0x68>)
100086c8:	4798      	blx	r3
100086ca:	1e04      	subs	r4, r0, #0
100086cc:	d007      	beq.n	100086de <sms_ble_advertise+0x22>
		DBG_LOG("[sms_ble_advertise]\t\tAdvertisement data set failed!");
100086ce:	4816      	ldr	r0, [pc, #88]	; (10008728 <sms_ble_advertise+0x6c>)
100086d0:	4b16      	ldr	r3, [pc, #88]	; (1000872c <sms_ble_advertise+0x70>)
100086d2:	4798      	blx	r3
100086d4:	4816      	ldr	r0, [pc, #88]	; (10008730 <sms_ble_advertise+0x74>)
100086d6:	4b17      	ldr	r3, [pc, #92]	; (10008734 <sms_ble_advertise+0x78>)
100086d8:	4798      	blx	r3
		return status;
100086da:	0020      	movs	r0, r4
100086dc:	e01e      	b.n	1000871c <sms_ble_advertise+0x60>
	}

	/* Start of advertisement */
	if((status = at_ble_adv_start(AT_BLE_ADV_TYPE_UNDIRECTED, AT_BLE_ADV_GEN_DISCOVERABLE, NULL, AT_BLE_ADV_FP_ANY, BLE_ADV_INTERVAL, BLE_ADV_TIMEOUT, 0)) == AT_BLE_SUCCESS)
100086de:	2300      	movs	r3, #0
100086e0:	9302      	str	r3, [sp, #8]
100086e2:	333c      	adds	r3, #60	; 0x3c
100086e4:	9301      	str	r3, [sp, #4]
100086e6:	23c8      	movs	r3, #200	; 0xc8
100086e8:	00db      	lsls	r3, r3, #3
100086ea:	9300      	str	r3, [sp, #0]
100086ec:	2300      	movs	r3, #0
100086ee:	2200      	movs	r2, #0
100086f0:	2101      	movs	r1, #1
100086f2:	2000      	movs	r0, #0
100086f4:	4c10      	ldr	r4, [pc, #64]	; (10008738 <sms_ble_advertise+0x7c>)
100086f6:	47a0      	blx	r4
100086f8:	1e04      	subs	r4, r0, #0
100086fa:	d107      	bne.n	1000870c <sms_ble_advertise+0x50>
	{
		DBG_LOG_DEV("[sms_ble_advertise]\t\tBLE started advertisement");
100086fc:	480a      	ldr	r0, [pc, #40]	; (10008728 <sms_ble_advertise+0x6c>)
100086fe:	4b0b      	ldr	r3, [pc, #44]	; (1000872c <sms_ble_advertise+0x70>)
10008700:	4798      	blx	r3
10008702:	480e      	ldr	r0, [pc, #56]	; (1000873c <sms_ble_advertise+0x80>)
10008704:	4b0b      	ldr	r3, [pc, #44]	; (10008734 <sms_ble_advertise+0x78>)
10008706:	4798      	blx	r3
		return AT_BLE_SUCCESS;
10008708:	2000      	movs	r0, #0
1000870a:	e007      	b.n	1000871c <sms_ble_advertise+0x60>
	}
	else {
		DBG_LOG("[sms_service_advertise]\tBLE advertisement start failed: reason 0x%x", status);
1000870c:	4806      	ldr	r0, [pc, #24]	; (10008728 <sms_ble_advertise+0x6c>)
1000870e:	4b07      	ldr	r3, [pc, #28]	; (1000872c <sms_ble_advertise+0x70>)
10008710:	4798      	blx	r3
10008712:	0021      	movs	r1, r4
10008714:	480a      	ldr	r0, [pc, #40]	; (10008740 <sms_ble_advertise+0x84>)
10008716:	4b07      	ldr	r3, [pc, #28]	; (10008734 <sms_ble_advertise+0x78>)
10008718:	4798      	blx	r3
		return status;
1000871a:	0020      	movs	r0, r4
	}
	return AT_BLE_FAILURE;
}
1000871c:	b004      	add	sp, #16
1000871e:	bd10      	pop	{r4, pc}
10008720:	1001a06c 	.word	0x1001a06c
10008724:	1000d559 	.word	0x1000d559
10008728:	10016a10 	.word	0x10016a10
1000872c:	100159e9 	.word	0x100159e9
10008730:	10016c48 	.word	0x10016c48
10008734:	100158c9 	.word	0x100158c9
10008738:	1000f001 	.word	0x1000f001
1000873c:	10016c7c 	.word	0x10016c7c
10008740:	10016cac 	.word	0x10016cac

10008744 <sms_ble_disconnected_fn>:
	return AT_BLE_SUCCESS;
}

/* AT_BLE_DISCONNECTED (#6) */
at_ble_status_t sms_ble_disconnected_fn(void *params)
{
10008744:	b510      	push	{r4, lr}
10008746:	0004      	movs	r4, r0
	at_ble_disconnected_t *disconnect = (at_ble_disconnected_t *)params;
	if(ble_instance.current_state == BLE_STATE_PAIRED) {
10008748:	4b15      	ldr	r3, [pc, #84]	; (100087a0 <sms_ble_disconnected_fn+0x5c>)
1000874a:	781b      	ldrb	r3, [r3, #0]
1000874c:	2b22      	cmp	r3, #34	; 0x22
1000874e:	d10a      	bne.n	10008766 <sms_ble_disconnected_fn+0x22>
		pressure_device.state = PRESSURE_STATE_OFF;
10008750:	2100      	movs	r1, #0
10008752:	3309      	adds	r3, #9
10008754:	4a13      	ldr	r2, [pc, #76]	; (100087a4 <sms_ble_disconnected_fn+0x60>)
10008756:	54d1      	strb	r1, [r2, r3]
		sms_sensors_enable_callback(false, false);
10008758:	2000      	movs	r0, #0
1000875a:	4b13      	ldr	r3, [pc, #76]	; (100087a8 <sms_ble_disconnected_fn+0x64>)
1000875c:	4798      	blx	r3
		sms_sensors_switch(false, false);
1000875e:	2100      	movs	r1, #0
10008760:	2000      	movs	r0, #0
10008762:	4b12      	ldr	r3, [pc, #72]	; (100087ac <sms_ble_disconnected_fn+0x68>)
10008764:	4798      	blx	r3
	}
	ble_instance.current_state = BLE_STATE_DISCONNECTED;
10008766:	4b0e      	ldr	r3, [pc, #56]	; (100087a0 <sms_ble_disconnected_fn+0x5c>)
10008768:	2211      	movs	r2, #17
1000876a:	701a      	strb	r2, [r3, #0]
	ble_instance.timeout = BLE_APP_TIMEOUT_OFF;
1000876c:	3a12      	subs	r2, #18
1000876e:	605a      	str	r2, [r3, #4]
	
	DBG_LOG_DEV("[sms_ble_disconnected_fn]\tPeer disconnected... handle: 0x%04x, reason: 0x%02x", disconnect->handle, disconnect->reason);
10008770:	480f      	ldr	r0, [pc, #60]	; (100087b0 <sms_ble_disconnected_fn+0x6c>)
10008772:	4b10      	ldr	r3, [pc, #64]	; (100087b4 <sms_ble_disconnected_fn+0x70>)
10008774:	4798      	blx	r3
10008776:	78a2      	ldrb	r2, [r4, #2]
10008778:	8821      	ldrh	r1, [r4, #0]
1000877a:	480f      	ldr	r0, [pc, #60]	; (100087b8 <sms_ble_disconnected_fn+0x74>)
1000877c:	4b0f      	ldr	r3, [pc, #60]	; (100087bc <sms_ble_disconnected_fn+0x78>)
1000877e:	4798      	blx	r3
	//DBG_LOG_DEV("- conn handle: 0x%04x\r\n- reason: 0x%02x", disconnect->handle, disconnect->reason);
	switch(disconnect->reason) {
10008780:	78a3      	ldrb	r3, [r4, #2]
10008782:	3b05      	subs	r3, #5
10008784:	b2da      	uxtb	r2, r3
10008786:	2a39      	cmp	r2, #57	; 0x39
10008788:	d806      	bhi.n	10008798 <sms_ble_disconnected_fn+0x54>
1000878a:	0093      	lsls	r3, r2, #2
1000878c:	4a0c      	ldr	r2, [pc, #48]	; (100087c0 <sms_ble_disconnected_fn+0x7c>)
1000878e:	58d3      	ldr	r3, [r2, r3]
10008790:	469f      	mov	pc, r3
		case AT_BLE_PAIRING_WITH_UNIT_KEY_NOT_SUP: // 0x29
		case AT_BLE_UNACCEPTABLE_INTERVAL: // 0x3B
		// additional error messages from BLE 4.1 specifications
		case BLE_ERR_UNKNOWN_LMP_PDU: // 0x19
		case BLE_ERR_CONN_FAILED: // 0x3E
		sms_ble_advertise();
10008792:	4b0c      	ldr	r3, [pc, #48]	; (100087c4 <sms_ble_disconnected_fn+0x80>)
10008794:	4798      	blx	r3
		break;
10008796:	e001      	b.n	1000879c <sms_ble_disconnected_fn+0x58>
		case AT_BLE_REMOTE_DEV_POWER_OFF: //0x15
		case AT_BLE_CON_TERM_BY_LOCAL_HOST: //0x16
		// additional error messages from BLE 4.1 specifications
		case BLE_ERR_UNSPECIFIED: // 0x1F
		default:
		sms_ble_power_down();
10008798:	4b0b      	ldr	r3, [pc, #44]	; (100087c8 <sms_ble_disconnected_fn+0x84>)
1000879a:	4798      	blx	r3
		break;
	}
	
	return AT_BLE_SUCCESS;
}
1000879c:	2000      	movs	r0, #0
1000879e:	bd10      	pop	{r4, pc}
100087a0:	1001a06c 	.word	0x1001a06c
100087a4:	1001a100 	.word	0x1001a100
100087a8:	10009fbd 	.word	0x10009fbd
100087ac:	10009ff1 	.word	0x10009ff1
100087b0:	10016a10 	.word	0x10016a10
100087b4:	100159e9 	.word	0x100159e9
100087b8:	10016cf0 	.word	0x10016cf0
100087bc:	100158c9 	.word	0x100158c9
100087c0:	10016928 	.word	0x10016928
100087c4:	100086bd 	.word	0x100086bd
100087c8:	100084e1 	.word	0x100084e1

100087cc <sms_ble_startup>:
	ble_instance.sending_queue = 0;
	ble_instance.send_cnt = 0;
}

int sms_ble_startup(void)
{
100087cc:	b570      	push	{r4, r5, r6, lr}
	DBG_LOG_DEV("[sms_ble_startup]\t\tStarting up...");
100087ce:	480d      	ldr	r0, [pc, #52]	; (10008804 <sms_ble_startup+0x38>)
100087d0:	4b0d      	ldr	r3, [pc, #52]	; (10008808 <sms_ble_startup+0x3c>)
100087d2:	4798      	blx	r3
100087d4:	480d      	ldr	r0, [pc, #52]	; (1000880c <sms_ble_startup+0x40>)
100087d6:	4b0e      	ldr	r3, [pc, #56]	; (10008810 <sms_ble_startup+0x44>)
100087d8:	4798      	blx	r3
100087da:	240a      	movs	r4, #10
	for(uint8_t i = 0; i < SMS_BLINK_STARTUP_CNT; i++) {
		sms_led_toggle(SMS_LED_0);
100087dc:	4e0d      	ldr	r6, [pc, #52]	; (10008814 <sms_ble_startup+0x48>)
		delay_ms(SMS_BLINK_STARTUP_MS);
100087de:	4d0e      	ldr	r5, [pc, #56]	; (10008818 <sms_ble_startup+0x4c>)

int sms_ble_startup(void)
{
	DBG_LOG_DEV("[sms_ble_startup]\t\tStarting up...");
	for(uint8_t i = 0; i < SMS_BLINK_STARTUP_CNT; i++) {
		sms_led_toggle(SMS_LED_0);
100087e0:	2016      	movs	r0, #22
100087e2:	47b0      	blx	r6
		delay_ms(SMS_BLINK_STARTUP_MS);
100087e4:	2064      	movs	r0, #100	; 0x64
100087e6:	47a8      	blx	r5
100087e8:	3c01      	subs	r4, #1
100087ea:	b2e4      	uxtb	r4, r4
}

int sms_ble_startup(void)
{
	DBG_LOG_DEV("[sms_ble_startup]\t\tStarting up...");
	for(uint8_t i = 0; i < SMS_BLINK_STARTUP_CNT; i++) {
100087ec:	2c00      	cmp	r4, #0
100087ee:	d1f7      	bne.n	100087e0 <sms_ble_startup+0x14>
		sms_led_toggle(SMS_LED_0);
		delay_ms(SMS_BLINK_STARTUP_MS);
	}
	ulp_ready = false;
100087f0:	2200      	movs	r2, #0
100087f2:	4b0a      	ldr	r3, [pc, #40]	; (1000881c <sms_ble_startup+0x50>)
100087f4:	701a      	strb	r2, [r3, #0]
	if(sms_ble_advertise() != AT_BLE_SUCCESS) return -1;
100087f6:	4b0a      	ldr	r3, [pc, #40]	; (10008820 <sms_ble_startup+0x54>)
100087f8:	4798      	blx	r3
100087fa:	1e43      	subs	r3, r0, #1
100087fc:	4198      	sbcs	r0, r3
100087fe:	4240      	negs	r0, r0
	return 0;
}
10008800:	bd70      	pop	{r4, r5, r6, pc}
10008802:	46c0      	nop			; (mov r8, r8)
10008804:	10016a10 	.word	0x10016a10
10008808:	100159e9 	.word	0x100159e9
1000880c:	10016d40 	.word	0x10016d40
10008810:	100158c9 	.word	0x100158c9
10008814:	10009d1d 	.word	0x10009d1d
10008818:	1000a345 	.word	0x1000a345
1000881c:	1001a06a 	.word	0x1001a06a
10008820:	100086bd 	.word	0x100086bd

10008824 <sms_ble_send_characteristic>:
	}
	return AT_BLE_FAILURE;
}

at_ble_status_t sms_ble_send_characteristic(enum sms_ble_char_type ch)
{
10008824:	b570      	push	{r4, r5, r6, lr}
10008826:	b084      	sub	sp, #16
	uint8_t send_val[BLE_CHAR_SIZE_MAX];
	uint32_t int_val;
	//ble_current_state = BLE_STATE_INDICATING;

	
	switch(ch) {
10008828:	2801      	cmp	r0, #1
1000882a:	d02e      	beq.n	1000888a <sms_ble_send_characteristic+0x66>
1000882c:	2800      	cmp	r0, #0
1000882e:	d002      	beq.n	10008836 <sms_ble_send_characteristic+0x12>
10008830:	2802      	cmp	r0, #2
10008832:	d040      	beq.n	100088b6 <sms_ble_send_characteristic+0x92>
10008834:	e07a      	b.n	1000892c <sms_ble_send_characteristic+0x108>
		case BLE_CHAR_BTN:
		send_val[0] = 0x00;
10008836:	2300      	movs	r3, #0
10008838:	466a      	mov	r2, sp
1000883a:	7013      	strb	r3, [r2, #0]
		if(button_instance.btn0.new_char) {
1000883c:	4b4f      	ldr	r3, [pc, #316]	; (1000897c <sms_ble_send_characteristic+0x158>)
1000883e:	791b      	ldrb	r3, [r3, #4]
10008840:	2b00      	cmp	r3, #0
10008842:	d00a      	beq.n	1000885a <sms_ble_send_characteristic+0x36>
			button_instance.btn0.char_value = ((button_instance.btn0.char_value >= 0x7f) ? 0 : (button_instance.btn0.char_value + 1));
10008844:	4b4d      	ldr	r3, [pc, #308]	; (1000897c <sms_ble_send_characteristic+0x158>)
10008846:	795a      	ldrb	r2, [r3, #5]
10008848:	2300      	movs	r3, #0
1000884a:	2a7e      	cmp	r2, #126	; 0x7e
1000884c:	d801      	bhi.n	10008852 <sms_ble_send_characteristic+0x2e>
1000884e:	3201      	adds	r2, #1
10008850:	b2d3      	uxtb	r3, r2
10008852:	4a4a      	ldr	r2, [pc, #296]	; (1000897c <sms_ble_send_characteristic+0x158>)
10008854:	7153      	strb	r3, [r2, #5]
			send_val[0] |= button_instance.btn0.char_value;
10008856:	466a      	mov	r2, sp
10008858:	7013      	strb	r3, [r2, #0]
		}
		if(button_instance.btn1.new_char) {
1000885a:	4b48      	ldr	r3, [pc, #288]	; (1000897c <sms_ble_send_characteristic+0x158>)
1000885c:	7a9b      	ldrb	r3, [r3, #10]
1000885e:	2b00      	cmp	r3, #0
10008860:	d00f      	beq.n	10008882 <sms_ble_send_characteristic+0x5e>
			button_instance.btn1.char_value = ((button_instance.btn1.char_value >= 0xff) ? 0 : (button_instance.btn1.char_value + 1));
10008862:	4b46      	ldr	r3, [pc, #280]	; (1000897c <sms_ble_send_characteristic+0x158>)
10008864:	7adb      	ldrb	r3, [r3, #11]
10008866:	2bff      	cmp	r3, #255	; 0xff
10008868:	d002      	beq.n	10008870 <sms_ble_send_characteristic+0x4c>
1000886a:	3301      	adds	r3, #1
1000886c:	b2db      	uxtb	r3, r3
1000886e:	e000      	b.n	10008872 <sms_ble_send_characteristic+0x4e>
10008870:	2300      	movs	r3, #0
10008872:	4a42      	ldr	r2, [pc, #264]	; (1000897c <sms_ble_send_characteristic+0x158>)
10008874:	72d3      	strb	r3, [r2, #11]
			send_val[0] |= button_instance.btn1.char_value + 0x80;
10008876:	3b80      	subs	r3, #128	; 0x80
10008878:	466a      	mov	r2, sp
1000887a:	7812      	ldrb	r2, [r2, #0]
1000887c:	4313      	orrs	r3, r2
1000887e:	466a      	mov	r2, sp
10008880:	7013      	strb	r3, [r2, #0]
		}
		val_handle = button_instance.service_handler.serv_chars.char_val_handle;
10008882:	4b3e      	ldr	r3, [pc, #248]	; (1000897c <sms_ble_send_characteristic+0x158>)
10008884:	8c9d      	ldrh	r5, [r3, #36]	; 0x24
		length = BLE_CHAR_SIZE_BUTTON;
10008886:	2201      	movs	r2, #1
		break;
10008888:	e052      	b.n	10008930 <sms_ble_send_characteristic+0x10c>
		
		case BLE_CHAR_PRESS:
		send_val[0] = (uint8_t)((pressure_device.output.temperature >>24) & 0xff);
1000888a:	4a3d      	ldr	r2, [pc, #244]	; (10008980 <sms_ble_send_characteristic+0x15c>)
1000888c:	6a53      	ldr	r3, [r2, #36]	; 0x24
1000888e:	1619      	asrs	r1, r3, #24
10008890:	4668      	mov	r0, sp
10008892:	7001      	strb	r1, [r0, #0]
		send_val[1] = (uint8_t)((pressure_device.output.temperature >> 16) & 0xff);
10008894:	1419      	asrs	r1, r3, #16
10008896:	7041      	strb	r1, [r0, #1]
		send_val[2] = (uint8_t)((pressure_device.output.temperature >> 8) & 0xff);
10008898:	1219      	asrs	r1, r3, #8
1000889a:	7081      	strb	r1, [r0, #2]
		send_val[3] = (uint8_t)((pressure_device.output.temperature) & 0xff);
1000889c:	70c3      	strb	r3, [r0, #3]
		send_val[4] = (uint8_t)((pressure_device.output.pressure >> 24) & 0xff);
1000889e:	6a13      	ldr	r3, [r2, #32]
100088a0:	1619      	asrs	r1, r3, #24
100088a2:	7101      	strb	r1, [r0, #4]
		send_val[5] = (uint8_t)((pressure_device.output.pressure >> 16) & 0xff);
100088a4:	1419      	asrs	r1, r3, #16
100088a6:	7141      	strb	r1, [r0, #5]
		send_val[6] = (uint8_t)((pressure_device.output.pressure >> 8) & 0xff);
100088a8:	1219      	asrs	r1, r3, #8
100088aa:	7181      	strb	r1, [r0, #6]
		send_val[7] = (uint8_t)((pressure_device.output.pressure) & 0xff);
100088ac:	71c3      	strb	r3, [r0, #7]
		val_handle = pressure_device.service_handler.serv_chars.char_val_handle;
100088ae:	2340      	movs	r3, #64	; 0x40
100088b0:	5ad5      	ldrh	r5, [r2, r3]
		length = BLE_CHAR_SIZE_PRESSURE;
100088b2:	2208      	movs	r2, #8
		break;
100088b4:	e03c      	b.n	10008930 <sms_ble_send_characteristic+0x10c>
		
		case BLE_CHAR_MPU:
		int_val = (uint32_t)(imu_device.output.q[0] * 1000000);
100088b6:	4c33      	ldr	r4, [pc, #204]	; (10008984 <sms_ble_send_characteristic+0x160>)
100088b8:	4e33      	ldr	r6, [pc, #204]	; (10008988 <sms_ble_send_characteristic+0x164>)
100088ba:	4934      	ldr	r1, [pc, #208]	; (1000898c <sms_ble_send_characteristic+0x168>)
100088bc:	6ea0      	ldr	r0, [r4, #104]	; 0x68
100088be:	47b0      	blx	r6
100088c0:	4d33      	ldr	r5, [pc, #204]	; (10008990 <sms_ble_send_characteristic+0x16c>)
100088c2:	47a8      	blx	r5
		//DBG_LOG("q1: %ld ", calc_val);
		send_val[0] = (uint8_t)(int_val & 0xff);
100088c4:	466b      	mov	r3, sp
100088c6:	7018      	strb	r0, [r3, #0]
		send_val[1] = (uint8_t)((int_val >> 8) & 0xff);
100088c8:	0a03      	lsrs	r3, r0, #8
100088ca:	466a      	mov	r2, sp
100088cc:	7053      	strb	r3, [r2, #1]
		send_val[2] = (uint8_t)((int_val >> 16) & 0xff);
100088ce:	0c03      	lsrs	r3, r0, #16
100088d0:	7093      	strb	r3, [r2, #2]
		send_val[3] = (uint8_t)((int_val >> 24) & 0xff);
100088d2:	0e00      	lsrs	r0, r0, #24
100088d4:	70d0      	strb	r0, [r2, #3]
		int_val = (uint32_t)(imu_device.output.q[1] * 1000000);
100088d6:	492d      	ldr	r1, [pc, #180]	; (1000898c <sms_ble_send_characteristic+0x168>)
100088d8:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
100088da:	47b0      	blx	r6
100088dc:	47a8      	blx	r5
		//DBG_LOG_CONT("q2: %ld ", calc_val);
		send_val[4] = (uint8_t)(int_val & 0xff);
100088de:	466b      	mov	r3, sp
100088e0:	7118      	strb	r0, [r3, #4]
		send_val[5] = (uint8_t)((int_val >> 8) & 0xff);
100088e2:	0a03      	lsrs	r3, r0, #8
100088e4:	466a      	mov	r2, sp
100088e6:	7153      	strb	r3, [r2, #5]
		send_val[6] = (uint8_t)((int_val >> 16) & 0xff);
100088e8:	0c03      	lsrs	r3, r0, #16
100088ea:	7193      	strb	r3, [r2, #6]
		send_val[7] = (uint8_t)((int_val >> 24) & 0xff);
100088ec:	0e00      	lsrs	r0, r0, #24
100088ee:	71d0      	strb	r0, [r2, #7]
		int_val = (uint32_t)(imu_device.output.q[2] * 1000000);
100088f0:	4926      	ldr	r1, [pc, #152]	; (1000898c <sms_ble_send_characteristic+0x168>)
100088f2:	6f20      	ldr	r0, [r4, #112]	; 0x70
100088f4:	47b0      	blx	r6
100088f6:	47a8      	blx	r5
		//DBG_LOG_CONT("q3: %ld ", calc_val);
		send_val[8] = (uint8_t)(int_val & 0xff);
100088f8:	466b      	mov	r3, sp
100088fa:	7218      	strb	r0, [r3, #8]
		send_val[9] = (uint8_t)((int_val >> 8) & 0xff);
100088fc:	0a03      	lsrs	r3, r0, #8
100088fe:	466a      	mov	r2, sp
10008900:	7253      	strb	r3, [r2, #9]
		send_val[10] = (uint8_t)((int_val >> 16) & 0xff);
10008902:	0c03      	lsrs	r3, r0, #16
10008904:	7293      	strb	r3, [r2, #10]
		send_val[11] = (uint8_t)((int_val >> 24) & 0xff);
10008906:	0e00      	lsrs	r0, r0, #24
10008908:	72d0      	strb	r0, [r2, #11]
		int_val = (uint32_t)(imu_device.output.q[3] * 1000000);
1000890a:	4920      	ldr	r1, [pc, #128]	; (1000898c <sms_ble_send_characteristic+0x168>)
1000890c:	6f60      	ldr	r0, [r4, #116]	; 0x74
1000890e:	47b0      	blx	r6
10008910:	47a8      	blx	r5
		//DBG_LOG_CONT("q4: %ld ", calc_val);
		send_val[12] = (uint8_t)(int_val & 0xff);
10008912:	466b      	mov	r3, sp
10008914:	7318      	strb	r0, [r3, #12]
		send_val[13] = (uint8_t)((int_val >> 8) & 0xff);
10008916:	0a03      	lsrs	r3, r0, #8
10008918:	466a      	mov	r2, sp
1000891a:	7353      	strb	r3, [r2, #13]
		send_val[14] = (uint8_t)((int_val >> 16) & 0xff);
1000891c:	0c03      	lsrs	r3, r0, #16
1000891e:	7393      	strb	r3, [r2, #14]
		send_val[15] = (uint8_t)((int_val >> 24) & 0xff);
10008920:	0e00      	lsrs	r0, r0, #24
10008922:	73d0      	strb	r0, [r2, #15]
		val_handle = imu_device.service_handler.serv_chars.char_val_handle;
10008924:	239c      	movs	r3, #156	; 0x9c
10008926:	5ae5      	ldrh	r5, [r4, r3]
		length = BLE_CHAR_SIZE_MPU;
10008928:	2210      	movs	r2, #16
		

		break;
1000892a:	e001      	b.n	10008930 <sms_ble_send_characteristic+0x10c>

at_ble_status_t sms_ble_send_characteristic(enum sms_ble_char_type ch)
{
	at_ble_status_t status = AT_BLE_SUCCESS;
	at_ble_handle_t val_handle = 0;
	uint8_t length = 0;
1000892c:	2200      	movs	r2, #0
}

at_ble_status_t sms_ble_send_characteristic(enum sms_ble_char_type ch)
{
	at_ble_status_t status = AT_BLE_SUCCESS;
	at_ble_handle_t val_handle = 0;
1000892e:	2500      	movs	r5, #0
	
	//DBG_LOG("Sending: ");
	//for(int i = 0; i < length; i += 4) {
	//DBG_LOG_CONT("0x%02x%02x%02x%02x ", send_val[i], send_val[i+1], send_val[i+2], send_val[i+3]);
	//}
	status = at_ble_characteristic_value_set(val_handle, send_val, (length * sizeof(uint8_t)));
10008930:	b292      	uxth	r2, r2
10008932:	4669      	mov	r1, sp
10008934:	0028      	movs	r0, r5
10008936:	4b17      	ldr	r3, [pc, #92]	; (10008994 <sms_ble_send_characteristic+0x170>)
10008938:	4798      	blx	r3
1000893a:	1e04      	subs	r4, r0, #0
	if(status == AT_BLE_SUCCESS) {
1000893c:	d115      	bne.n	1000896a <sms_ble_send_characteristic+0x146>
		//#   if SMS_SENDING_WITH_ACK == true
		//sms_ble_ind_retry = 0;
		//status = at_ble_indication_send(sms_connection_handle, val_handle);
		//#   else
		status = at_ble_notification_send(ble_instance.conn_handle, val_handle);
1000893e:	4b16      	ldr	r3, [pc, #88]	; (10008998 <sms_ble_send_characteristic+0x174>)
10008940:	8958      	ldrh	r0, [r3, #10]
10008942:	0029      	movs	r1, r5
10008944:	4b15      	ldr	r3, [pc, #84]	; (1000899c <sms_ble_send_characteristic+0x178>)
10008946:	4798      	blx	r3
10008948:	1e04      	subs	r4, r0, #0
		if(status == AT_BLE_SUCCESS) {
1000894a:	d10a      	bne.n	10008962 <sms_ble_send_characteristic+0x13e>
			ble_instance.sending_queue++;
1000894c:	4b12      	ldr	r3, [pc, #72]	; (10008998 <sms_ble_send_characteristic+0x174>)
1000894e:	7a1a      	ldrb	r2, [r3, #8]
10008950:	3201      	adds	r2, #1
10008952:	b2d2      	uxtb	r2, r2
10008954:	721a      	strb	r2, [r3, #8]
			ble_instance.send_cnt++;
10008956:	89da      	ldrh	r2, [r3, #14]
10008958:	3201      	adds	r2, #1
1000895a:	81da      	strh	r2, [r3, #14]
			//DBG_LOG_CONT(" %d GONE? ", sms_ble_send_cnt);
			//DBG_LOG("T/O: 20ms");
			ble_instance.timeout = BLE_APP_TIMEOUT_NOTIFY;
1000895c:	2202      	movs	r2, #2
1000895e:	605a      	str	r2, [r3, #4]
10008960:	e009      	b.n	10008976 <sms_ble_send_characteristic+0x152>
		}
		else {
			DBG_LOG_CONT("NOTIFICATION ERROR!!");
10008962:	480f      	ldr	r0, [pc, #60]	; (100089a0 <sms_ble_send_characteristic+0x17c>)
10008964:	4b0f      	ldr	r3, [pc, #60]	; (100089a4 <sms_ble_send_characteristic+0x180>)
10008966:	4798      	blx	r3
10008968:	e005      	b.n	10008976 <sms_ble_send_characteristic+0x152>
		//DBG_LOG_DEV(" NOT gone? ");
		//#pragma TBD: handle sending error...
		//}
	}
	else {
		DBG_LOG_DEV(" NOT set? ");
1000896a:	480f      	ldr	r0, [pc, #60]	; (100089a8 <sms_ble_send_characteristic+0x184>)
1000896c:	4b0f      	ldr	r3, [pc, #60]	; (100089ac <sms_ble_send_characteristic+0x188>)
1000896e:	4798      	blx	r3
10008970:	480f      	ldr	r0, [pc, #60]	; (100089b0 <sms_ble_send_characteristic+0x18c>)
10008972:	4b0c      	ldr	r3, [pc, #48]	; (100089a4 <sms_ble_send_characteristic+0x180>)
10008974:	4798      	blx	r3
	}
	return status;
}
10008976:	0020      	movs	r0, r4
10008978:	b004      	add	sp, #16
1000897a:	bd70      	pop	{r4, r5, r6, pc}
1000897c:	1001a07c 	.word	0x1001a07c
10008980:	1001a100 	.word	0x1001a100
10008984:	1001a1b4 	.word	0x1001a1b4
10008988:	10013289 	.word	0x10013289
1000898c:	49742400 	.word	0x49742400
10008990:	10012e89 	.word	0x10012e89
10008994:	1000f8e5 	.word	0x1000f8e5
10008998:	1001a06c 	.word	0x1001a06c
1000899c:	1000fa85 	.word	0x1000fa85
100089a0:	10016d64 	.word	0x10016d64
100089a4:	100158c9 	.word	0x100158c9
100089a8:	10016a10 	.word	0x10016a10
100089ac:	100159e9 	.word	0x100159e9
100089b0:	10016d7c 	.word	0x10016d7c

100089b4 <sms_ble_primary_service_define>:

at_ble_status_t sms_ble_primary_service_define(gatt_service_handler_t *service)
{
100089b4:	b510      	push	{r4, lr}
100089b6:	b082      	sub	sp, #8
	//DBG_LOG_DEV("[sms_ble_primary_service_define]\n\r  defining primary service\r\n- uuid: 0x%02x\r\n- handle: 0x%02x\r\n- char uuid: 0x%02x%02x\r\n- char init value: %d", (unsigned int)service->serv_uuid.uuid, service->serv_handle, service->serv_chars.uuid.uuid[1], service->serv_chars.uuid.uuid[0], service->serv_chars.value_init_len);
	return(at_ble_primary_service_define(&service->serv_uuid, &service->serv_handle, NULL, 0, &service->serv_chars, 1));
100089b8:	0001      	movs	r1, r0
100089ba:	3112      	adds	r1, #18
100089bc:	2301      	movs	r3, #1
100089be:	9301      	str	r3, [sp, #4]
100089c0:	0003      	movs	r3, r0
100089c2:	3314      	adds	r3, #20
100089c4:	9300      	str	r3, [sp, #0]
100089c6:	2300      	movs	r3, #0
100089c8:	2200      	movs	r2, #0
100089ca:	4c02      	ldr	r4, [pc, #8]	; (100089d4 <sms_ble_primary_service_define+0x20>)
100089cc:	47a0      	blx	r4
}
100089ce:	b002      	add	sp, #8
100089d0:	bd10      	pop	{r4, pc}
100089d2:	46c0      	nop			; (mov r8, r8)
100089d4:	1000f8c5 	.word	0x1000f8c5

100089d8 <sms_ble_service_init>:

void sms_ble_service_init(enum sms_ble_serv_type type, gatt_service_handler_t *service, uint8_t *value)
{
100089d8:	b5f0      	push	{r4, r5, r6, r7, lr}
100089da:	464f      	mov	r7, r9
100089dc:	4646      	mov	r6, r8
100089de:	b4c0      	push	{r6, r7}
100089e0:	b083      	sub	sp, #12
100089e2:	4694      	mov	ip, r2
	at_ble_handle_t handle = 0;
	uint8_t uuid[16] = {0};
	uint8_t char_size = 0;
	switch(type) {
100089e4:	2801      	cmp	r0, #1
100089e6:	d010      	beq.n	10008a0a <sms_ble_service_init+0x32>
100089e8:	2800      	cmp	r0, #0
100089ea:	d002      	beq.n	100089f2 <sms_ble_service_init+0x1a>
100089ec:	2802      	cmp	r0, #2
100089ee:	d019      	beq.n	10008a24 <sms_ble_service_init+0x4c>
100089f0:	e025      	b.n	10008a3e <sms_ble_service_init+0x66>
		uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
		uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
		uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
		uuid[4] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
		uuid[5] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 16) & 0xFF);
		uuid[6] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 8) & 0xFF);
100089f2:	23bb      	movs	r3, #187	; 0xbb
		uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
		uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
		uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
		uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
		uuid[4] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
		uuid[5] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 16) & 0xFF);
100089f4:	2450      	movs	r4, #80	; 0x50
		handle = 1;
		uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
		uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
		uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
		uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
		uuid[4] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
100089f6:	2553      	movs	r5, #83	; 0x53
		case BLE_SERV_BUTTON:
		handle = 1;
		uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
		uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
		uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
		uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
100089f8:	26be      	movs	r6, #190	; 0xbe
	switch(type) {
		case BLE_SERV_BUTTON:
		handle = 1;
		uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
		uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
		uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
100089fa:	275a      	movs	r7, #90	; 0x5a
	uint8_t char_size = 0;
	switch(type) {
		case BLE_SERV_BUTTON:
		handle = 1;
		uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
		uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
100089fc:	2057      	movs	r0, #87	; 0x57
	uint8_t uuid[16] = {0};
	uint8_t char_size = 0;
	switch(type) {
		case BLE_SERV_BUTTON:
		handle = 1;
		uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
100089fe:	221c      	movs	r2, #28
10008a00:	4690      	mov	r8, r2
		uuid[11] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3) & 0xFF);
		uuid[12] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 24) & 0xFF);
		uuid[13] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 16) & 0xFF);
		uuid[14] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 8) & 0xFF);
		uuid[15] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4) & 0xFF);
		char_size = 1;
10008a02:	3a1b      	subs	r2, #27
10008a04:	9201      	str	r2, [sp, #4]
	at_ble_handle_t handle = 0;
	uint8_t uuid[16] = {0};
	uint8_t char_size = 0;
	switch(type) {
		case BLE_SERV_BUTTON:
		handle = 1;
10008a06:	4691      	mov	r9, r2
10008a08:	e023      	b.n	10008a52 <sms_ble_service_init+0x7a>
		uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
		uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
		uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
		uuid[4] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 24) & 0xFF);
		uuid[5] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 16) & 0xFF);
		uuid[6] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 8) & 0xFF);
10008a0a:	23ee      	movs	r3, #238	; 0xee
		uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
		uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
		uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
		uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
		uuid[4] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 24) & 0xFF);
		uuid[5] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 16) & 0xFF);
10008a0c:	2450      	movs	r4, #80	; 0x50
		handle = 2;
		uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
		uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
		uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
		uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
		uuid[4] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 24) & 0xFF);
10008a0e:	2553      	movs	r5, #83	; 0x53
		case BLE_SERV_PRESSURE:
		handle = 2;
		uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
		uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
		uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
		uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
10008a10:	26be      	movs	r6, #190	; 0xbe
		
		case BLE_SERV_PRESSURE:
		handle = 2;
		uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
		uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
		uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
10008a12:	275a      	movs	r7, #90	; 0x5a
		break;
		
		case BLE_SERV_PRESSURE:
		handle = 2;
		uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
		uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
10008a14:	2057      	movs	r0, #87	; 0x57
		char_size = 1;
		break;
		
		case BLE_SERV_PRESSURE:
		handle = 2;
		uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
10008a16:	221c      	movs	r2, #28
10008a18:	4690      	mov	r8, r2
		uuid[11] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3) & 0xFF);
		uuid[12] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 24) & 0xFF);
		uuid[13] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 16) & 0xFF);
		uuid[14] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 8) & 0xFF);
		uuid[15] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4) & 0xFF);
		char_size = 8;
10008a1a:	3a14      	subs	r2, #20
10008a1c:	9201      	str	r2, [sp, #4]
		uuid[15] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4) & 0xFF);
		char_size = 1;
		break;
		
		case BLE_SERV_PRESSURE:
		handle = 2;
10008a1e:	3a06      	subs	r2, #6
10008a20:	4691      	mov	r9, r2
		uuid[12] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 24) & 0xFF);
		uuid[13] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 16) & 0xFF);
		uuid[14] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 8) & 0xFF);
		uuid[15] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4) & 0xFF);
		char_size = 8;
		break;
10008a22:	e016      	b.n	10008a52 <sms_ble_service_init+0x7a>
		uuid[1] = (uint8_t) ((SMS_IMU_SERVICE_UUID_1 >> 16) & 0xFF);
		uuid[2] = (uint8_t) ((SMS_IMU_SERVICE_UUID_1 >> 8) & 0xFF);
		uuid[3] = (uint8_t) ((SMS_IMU_SERVICE_UUID_1) & 0xFF);
		uuid[4] = (uint8_t) ((SMS_IMU_SERVICE_UUID_2 >> 24) & 0xFF);
		uuid[5] = (uint8_t) ((SMS_IMU_SERVICE_UUID_2 >> 16) & 0xFF);
		uuid[6] = (uint8_t) ((SMS_IMU_SERVICE_UUID_2 >> 8) & 0xFF);
10008a24:	2311      	movs	r3, #17
		uuid[0] = (uint8_t) ((SMS_IMU_SERVICE_UUID_1 >> 24) & 0xFF);
		uuid[1] = (uint8_t) ((SMS_IMU_SERVICE_UUID_1 >> 16) & 0xFF);
		uuid[2] = (uint8_t) ((SMS_IMU_SERVICE_UUID_1 >> 8) & 0xFF);
		uuid[3] = (uint8_t) ((SMS_IMU_SERVICE_UUID_1) & 0xFF);
		uuid[4] = (uint8_t) ((SMS_IMU_SERVICE_UUID_2 >> 24) & 0xFF);
		uuid[5] = (uint8_t) ((SMS_IMU_SERVICE_UUID_2 >> 16) & 0xFF);
10008a26:	2450      	movs	r4, #80	; 0x50
		handle = 3;
		uuid[0] = (uint8_t) ((SMS_IMU_SERVICE_UUID_1 >> 24) & 0xFF);
		uuid[1] = (uint8_t) ((SMS_IMU_SERVICE_UUID_1 >> 16) & 0xFF);
		uuid[2] = (uint8_t) ((SMS_IMU_SERVICE_UUID_1 >> 8) & 0xFF);
		uuid[3] = (uint8_t) ((SMS_IMU_SERVICE_UUID_1) & 0xFF);
		uuid[4] = (uint8_t) ((SMS_IMU_SERVICE_UUID_2 >> 24) & 0xFF);
10008a28:	2553      	movs	r5, #83	; 0x53
		case BLE_SERV_MPU:
		handle = 3;
		uuid[0] = (uint8_t) ((SMS_IMU_SERVICE_UUID_1 >> 24) & 0xFF);
		uuid[1] = (uint8_t) ((SMS_IMU_SERVICE_UUID_1 >> 16) & 0xFF);
		uuid[2] = (uint8_t) ((SMS_IMU_SERVICE_UUID_1 >> 8) & 0xFF);
		uuid[3] = (uint8_t) ((SMS_IMU_SERVICE_UUID_1) & 0xFF);
10008a2a:	26be      	movs	r6, #190	; 0xbe
		
		case BLE_SERV_MPU:
		handle = 3;
		uuid[0] = (uint8_t) ((SMS_IMU_SERVICE_UUID_1 >> 24) & 0xFF);
		uuid[1] = (uint8_t) ((SMS_IMU_SERVICE_UUID_1 >> 16) & 0xFF);
		uuid[2] = (uint8_t) ((SMS_IMU_SERVICE_UUID_1 >> 8) & 0xFF);
10008a2c:	275a      	movs	r7, #90	; 0x5a
		break;
		
		case BLE_SERV_MPU:
		handle = 3;
		uuid[0] = (uint8_t) ((SMS_IMU_SERVICE_UUID_1 >> 24) & 0xFF);
		uuid[1] = (uint8_t) ((SMS_IMU_SERVICE_UUID_1 >> 16) & 0xFF);
10008a2e:	2057      	movs	r0, #87	; 0x57
		char_size = 8;
		break;
		
		case BLE_SERV_MPU:
		handle = 3;
		uuid[0] = (uint8_t) ((SMS_IMU_SERVICE_UUID_1 >> 24) & 0xFF);
10008a30:	221c      	movs	r2, #28
10008a32:	4690      	mov	r8, r2
		uuid[11] = (uint8_t) ((SMS_IMU_SERVICE_UUID_3) & 0xFF);
		uuid[12] = (uint8_t) ((SMS_IMU_SERVICE_UUID_4 >> 24) & 0xFF);
		uuid[13] = (uint8_t) ((SMS_IMU_SERVICE_UUID_4 >> 16) & 0xFF);
		uuid[14] = (uint8_t) ((SMS_IMU_SERVICE_UUID_4 >> 8) & 0xFF);
		uuid[15] = (uint8_t) ((SMS_IMU_SERVICE_UUID_4) & 0xFF);
		char_size = 20;
10008a34:	3a08      	subs	r2, #8
10008a36:	9201      	str	r2, [sp, #4]
		uuid[15] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4) & 0xFF);
		char_size = 8;
		break;
		
		case BLE_SERV_MPU:
		handle = 3;
10008a38:	3a11      	subs	r2, #17
10008a3a:	4691      	mov	r9, r2
		uuid[12] = (uint8_t) ((SMS_IMU_SERVICE_UUID_4 >> 24) & 0xFF);
		uuid[13] = (uint8_t) ((SMS_IMU_SERVICE_UUID_4 >> 16) & 0xFF);
		uuid[14] = (uint8_t) ((SMS_IMU_SERVICE_UUID_4 >> 8) & 0xFF);
		uuid[15] = (uint8_t) ((SMS_IMU_SERVICE_UUID_4) & 0xFF);
		char_size = 20;
		break;
10008a3c:	e009      	b.n	10008a52 <sms_ble_service_init+0x7a>
}

void sms_ble_service_init(enum sms_ble_serv_type type, gatt_service_handler_t *service, uint8_t *value)
{
	at_ble_handle_t handle = 0;
	uint8_t uuid[16] = {0};
10008a3e:	2300      	movs	r3, #0
10008a40:	2400      	movs	r4, #0
10008a42:	2500      	movs	r5, #0
10008a44:	2600      	movs	r6, #0
10008a46:	2700      	movs	r7, #0
10008a48:	2000      	movs	r0, #0
10008a4a:	2200      	movs	r2, #0
10008a4c:	4690      	mov	r8, r2
	uint8_t char_size = 0;
10008a4e:	9201      	str	r2, [sp, #4]
	return(at_ble_primary_service_define(&service->serv_uuid, &service->serv_handle, NULL, 0, &service->serv_chars, 1));
}

void sms_ble_service_init(enum sms_ble_serv_type type, gatt_service_handler_t *service, uint8_t *value)
{
	at_ble_handle_t handle = 0;
10008a50:	4691      	mov	r9, r2
		
		default:
		break;
	}
	//SMS button service characteristic
	service->serv_handle = handle;
10008a52:	464a      	mov	r2, r9
10008a54:	824a      	strh	r2, [r1, #18]
	service->serv_uuid.type = AT_BLE_UUID_128;
10008a56:	2202      	movs	r2, #2
10008a58:	700a      	strb	r2, [r1, #0]
	service->serv_uuid.uuid[0] = uuid[0];
10008a5a:	4642      	mov	r2, r8
10008a5c:	704a      	strb	r2, [r1, #1]
	service->serv_uuid.uuid[1] = uuid[1];
10008a5e:	7088      	strb	r0, [r1, #2]
	service->serv_uuid.uuid[2] = uuid[2];
10008a60:	70cf      	strb	r7, [r1, #3]
	service->serv_uuid.uuid[3] = uuid[3];
10008a62:	710e      	strb	r6, [r1, #4]
	service->serv_uuid.uuid[4] = uuid[4];
10008a64:	714d      	strb	r5, [r1, #5]
	service->serv_uuid.uuid[5] = uuid[5];
10008a66:	718c      	strb	r4, [r1, #6]
	service->serv_uuid.uuid[6] = uuid[6];
10008a68:	71cb      	strb	r3, [r1, #7]
	service->serv_uuid.uuid[7] = uuid[7];
10008a6a:	720b      	strb	r3, [r1, #8]
	service->serv_uuid.uuid[8] = uuid[8];
10008a6c:	2300      	movs	r3, #0
10008a6e:	724b      	strb	r3, [r1, #9]
	service->serv_uuid.uuid[9] = uuid[9];
10008a70:	728b      	strb	r3, [r1, #10]
	service->serv_uuid.uuid[10] = uuid[10];
10008a72:	72cb      	strb	r3, [r1, #11]
	service->serv_uuid.uuid[11] = uuid[11];
10008a74:	730b      	strb	r3, [r1, #12]
	service->serv_uuid.uuid[12] = uuid[12];
10008a76:	734b      	strb	r3, [r1, #13]
	service->serv_uuid.uuid[13] = uuid[13];
10008a78:	738b      	strb	r3, [r1, #14]
	service->serv_uuid.uuid[14] = uuid[14];
10008a7a:	73cb      	strb	r3, [r1, #15]
	service->serv_uuid.uuid[15] = uuid[15];
10008a7c:	740b      	strb	r3, [r1, #16]
	
	#   if SMS_SENDING_WITH_ACK == true
	service->serv_chars.properties = (AT_BLE_CHAR_READ | AT_BLE_CHAR_INDICATE); // properties
	#   else
	service->serv_chars.properties = (AT_BLE_CHAR_READ | AT_BLE_CHAR_NOTIFY); // properties
10008a7e:	2412      	movs	r4, #18
10008a80:	850c      	strh	r4, [r1, #40]	; 0x28
	#   endif
	service->serv_chars.init_value = value; // value
10008a82:	4662      	mov	r2, ip
10008a84:	62ca      	str	r2, [r1, #44]	; 0x2c
	service->serv_chars.value_init_len = char_size * sizeof(uint8_t);
10008a86:	466a      	mov	r2, sp
10008a88:	8892      	ldrh	r2, [r2, #4]
10008a8a:	860a      	strh	r2, [r1, #48]	; 0x30
	service->serv_chars.value_max_len = char_size * sizeof(uint8_t);
10008a8c:	864a      	strh	r2, [r1, #50]	; 0x32
	service->serv_chars.value_permissions = (AT_BLE_ATTR_READABLE_NO_AUTHN_NO_AUTHR | AT_BLE_ATTR_WRITABLE_NO_AUTHN_NO_AUTHR); // permissions
10008a8e:	2011      	movs	r0, #17
10008a90:	2234      	movs	r2, #52	; 0x34
10008a92:	5488      	strb	r0, [r1, r2]
	service->serv_chars.user_desc = NULL; //user defined name
10008a94:	638b      	str	r3, [r1, #56]	; 0x38
	service->serv_chars.user_desc_len = 0;
10008a96:	2200      	movs	r2, #0
10008a98:	878b      	strh	r3, [r1, #60]	; 0x3c
	service->serv_chars.user_desc_max_len = 0;
10008a9a:	87cb      	strh	r3, [r1, #62]	; 0x3e
	service->serv_chars.user_desc_permissions = AT_BLE_ATTR_NO_PERMISSIONS; // user description permissions
10008a9c:	3033      	adds	r0, #51	; 0x33
10008a9e:	540a      	strb	r2, [r1, r0]
	service->serv_chars.client_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS; // client config permissions
10008aa0:	3001      	adds	r0, #1
10008aa2:	540a      	strb	r2, [r1, r0]
	service->serv_chars.server_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS; // server config permissions
10008aa4:	3001      	adds	r0, #1
10008aa6:	540a      	strb	r2, [r1, r0]
	service->serv_chars.user_desc_handle = 0; // user description handles
10008aa8:	2248      	movs	r2, #72	; 0x48
10008aaa:	528b      	strh	r3, [r1, r2]
	service->serv_chars.client_config_handle = 0; // client config handles
10008aac:	3202      	adds	r2, #2
10008aae:	528b      	strh	r3, [r1, r2]
	service->serv_chars.server_config_handle = 0; // server config handles
10008ab0:	3202      	adds	r2, #2
10008ab2:	528b      	strh	r3, [r1, r2]
	
	service->serv_chars.presentation_format = NULL; //presentation format
10008ab4:	640b      	str	r3, [r1, #64]	; 0x40
10008ab6:	b003      	add	sp, #12
10008ab8:	bc0c      	pop	{r2, r3}
10008aba:	4690      	mov	r8, r2
10008abc:	4699      	mov	r9, r3
10008abe:	bdf0      	pop	{r4, r5, r6, r7, pc}

10008ac0 <sms_button_bt0_callback>:
        gpio_disable_callback(button_instance.btn1.gpio_pin);
    }
}
/* Callbacks --> sending interrupt message to platform */
void sms_button_bt0_callback(void)
{
10008ac0:	b510      	push	{r4, lr}
    button_instance.btn0.new_int = true;
10008ac2:	4b05      	ldr	r3, [pc, #20]	; (10008ad8 <sms_button_bt0_callback+0x18>)
10008ac4:	2201      	movs	r2, #1
10008ac6:	70da      	strb	r2, [r3, #3]
    send_plf_int_msg_ind(button_instance.btn0.gpio_pin, GPIO_CALLBACK_RISING, NULL, 0);
10008ac8:	7858      	ldrb	r0, [r3, #1]
10008aca:	2300      	movs	r3, #0
10008acc:	2200      	movs	r2, #0
10008ace:	2102      	movs	r1, #2
10008ad0:	4c02      	ldr	r4, [pc, #8]	; (10008adc <sms_button_bt0_callback+0x1c>)
10008ad2:	47a0      	blx	r4
}
10008ad4:	bd10      	pop	{r4, pc}
10008ad6:	46c0      	nop			; (mov r8, r8)
10008ad8:	1001a07c 	.word	0x1001a07c
10008adc:	1000dc45 	.word	0x1000dc45

10008ae0 <sms_button_bt1_callback>:
void sms_button_bt1_callback(void)
{
10008ae0:	b510      	push	{r4, lr}
	button_instance.btn1.new_int = true;
10008ae2:	4b05      	ldr	r3, [pc, #20]	; (10008af8 <sms_button_bt1_callback+0x18>)
10008ae4:	2201      	movs	r2, #1
10008ae6:	725a      	strb	r2, [r3, #9]
    send_plf_int_msg_ind(button_instance.btn1.gpio_pin, GPIO_CALLBACK_RISING, NULL, 0);
10008ae8:	79d8      	ldrb	r0, [r3, #7]
10008aea:	2300      	movs	r3, #0
10008aec:	2200      	movs	r2, #0
10008aee:	2102      	movs	r1, #2
10008af0:	4c02      	ldr	r4, [pc, #8]	; (10008afc <sms_button_bt1_callback+0x1c>)
10008af2:	47a0      	blx	r4
}
10008af4:	bd10      	pop	{r4, pc}
10008af6:	46c0      	nop			; (mov r8, r8)
10008af8:	1001a07c 	.word	0x1001a07c
10008afc:	1000dc45 	.word	0x1000dc45

10008b00 <sms_button_init_variables>:
}

/* Initialize all button-related variables */
void sms_button_init_variables(void)
{
	button_instance.current_state = BUTTON_STATE_NONE;
10008b00:	4b08      	ldr	r3, [pc, #32]	; (10008b24 <sms_button_init_variables+0x24>)
10008b02:	2200      	movs	r2, #0
10008b04:	735a      	strb	r2, [r3, #13]
	button_instance.btn0.id = SMS_BTN_0;
10008b06:	701a      	strb	r2, [r3, #0]
	button_instance.btn0.gpio_pin = SMS_BTN_0_PIN;
10008b08:	211f      	movs	r1, #31
10008b0a:	7059      	strb	r1, [r3, #1]
	button_instance.btn0.int_enabled = true;
10008b0c:	391e      	subs	r1, #30
10008b0e:	7099      	strb	r1, [r3, #2]
	button_instance.btn0.new_int = false;
10008b10:	70da      	strb	r2, [r3, #3]
	button_instance.btn0.char_value = 0;
10008b12:	715a      	strb	r2, [r3, #5]
	button_instance.btn1.id = SMS_BTN_1;
10008b14:	7199      	strb	r1, [r3, #6]
	button_instance.btn1.gpio_pin = SMS_BTN_1_PIN;
10008b16:	201d      	movs	r0, #29
10008b18:	71d8      	strb	r0, [r3, #7]
	button_instance.btn1.int_enabled = true;
10008b1a:	7219      	strb	r1, [r3, #8]
	button_instance.btn1.new_int = false;
10008b1c:	725a      	strb	r2, [r3, #9]
	button_instance.btn1.char_value = 0;
10008b1e:	72da      	strb	r2, [r3, #11]
}
10008b20:	4770      	bx	lr
10008b22:	46c0      	nop			; (mov r8, r8)
10008b24:	1001a07c 	.word	0x1001a07c

10008b28 <sms_button_gpio_init>:

/* Initialize gpio for button inputs */
void sms_button_gpio_init(void)
{
10008b28:	b510      	push	{r4, lr}
10008b2a:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;

    /* Button0 @ PIN_AO_GPIO_0 */
    gpio_get_config_defaults(&config_gpio_pin);
10008b2c:	ac01      	add	r4, sp, #4
10008b2e:	0020      	movs	r0, r4
10008b30:	4b20      	ldr	r3, [pc, #128]	; (10008bb4 <sms_button_gpio_init+0x8c>)
10008b32:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
10008b34:	2300      	movs	r3, #0
10008b36:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
10008b38:	3302      	adds	r3, #2
10008b3a:	7063      	strb	r3, [r4, #1]
    config_gpio_pin.aon_wakeup = true;
10008b3c:	3b01      	subs	r3, #1
10008b3e:	70e3      	strb	r3, [r4, #3]
    if(gpio_pin_set_config(button_instance.btn0.gpio_pin, &config_gpio_pin) != STATUS_OK) {
10008b40:	4b1d      	ldr	r3, [pc, #116]	; (10008bb8 <sms_button_gpio_init+0x90>)
10008b42:	7858      	ldrb	r0, [r3, #1]
10008b44:	0021      	movs	r1, r4
10008b46:	4b1d      	ldr	r3, [pc, #116]	; (10008bbc <sms_button_gpio_init+0x94>)
10008b48:	4798      	blx	r3
10008b4a:	2800      	cmp	r0, #0
10008b4c:	d005      	beq.n	10008b5a <sms_button_gpio_init+0x32>
        DBG_LOG_DEV("[sms_button_configure]\tproblem while setting up button0");
10008b4e:	481c      	ldr	r0, [pc, #112]	; (10008bc0 <sms_button_gpio_init+0x98>)
10008b50:	4b1c      	ldr	r3, [pc, #112]	; (10008bc4 <sms_button_gpio_init+0x9c>)
10008b52:	4798      	blx	r3
10008b54:	481c      	ldr	r0, [pc, #112]	; (10008bc8 <sms_button_gpio_init+0xa0>)
10008b56:	4b1d      	ldr	r3, [pc, #116]	; (10008bcc <sms_button_gpio_init+0xa4>)
10008b58:	4798      	blx	r3
    }
    
    /* Button1 @ PIN_AO_GPIO_2 */
    gpio_get_config_defaults(&config_gpio_pin);
10008b5a:	ac01      	add	r4, sp, #4
10008b5c:	0020      	movs	r0, r4
10008b5e:	4b15      	ldr	r3, [pc, #84]	; (10008bb4 <sms_button_gpio_init+0x8c>)
10008b60:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
10008b62:	2300      	movs	r3, #0
10008b64:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
10008b66:	3302      	adds	r3, #2
10008b68:	7063      	strb	r3, [r4, #1]
    config_gpio_pin.aon_wakeup = true;
10008b6a:	3b01      	subs	r3, #1
10008b6c:	70e3      	strb	r3, [r4, #3]
    if(gpio_pin_set_config(button_instance.btn1.gpio_pin, &config_gpio_pin) != STATUS_OK) {
10008b6e:	4b12      	ldr	r3, [pc, #72]	; (10008bb8 <sms_button_gpio_init+0x90>)
10008b70:	79d8      	ldrb	r0, [r3, #7]
10008b72:	0021      	movs	r1, r4
10008b74:	4b11      	ldr	r3, [pc, #68]	; (10008bbc <sms_button_gpio_init+0x94>)
10008b76:	4798      	blx	r3
10008b78:	2800      	cmp	r0, #0
10008b7a:	d005      	beq.n	10008b88 <sms_button_gpio_init+0x60>
        DBG_LOG("[sms_button_configure]\tProblem while setting up button1");
10008b7c:	4810      	ldr	r0, [pc, #64]	; (10008bc0 <sms_button_gpio_init+0x98>)
10008b7e:	4b11      	ldr	r3, [pc, #68]	; (10008bc4 <sms_button_gpio_init+0x9c>)
10008b80:	4798      	blx	r3
10008b82:	4813      	ldr	r0, [pc, #76]	; (10008bd0 <sms_button_gpio_init+0xa8>)
10008b84:	4b11      	ldr	r3, [pc, #68]	; (10008bcc <sms_button_gpio_init+0xa4>)
10008b86:	4798      	blx	r3
    }

    /* Button 0 on SAMB11 XPLAINED */
    gpio_get_config_defaults(&config_gpio_pin);
10008b88:	ac01      	add	r4, sp, #4
10008b8a:	0020      	movs	r0, r4
10008b8c:	4b09      	ldr	r3, [pc, #36]	; (10008bb4 <sms_button_gpio_init+0x8c>)
10008b8e:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
10008b90:	2300      	movs	r3, #0
10008b92:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_NONE;
10008b94:	7063      	strb	r3, [r4, #1]
    if(gpio_pin_set_config(BUTTON_0_PIN, &config_gpio_pin) != STATUS_OK) {
10008b96:	0021      	movs	r1, r4
10008b98:	2017      	movs	r0, #23
10008b9a:	4b08      	ldr	r3, [pc, #32]	; (10008bbc <sms_button_gpio_init+0x94>)
10008b9c:	4798      	blx	r3
10008b9e:	2800      	cmp	r0, #0
10008ba0:	d005      	beq.n	10008bae <sms_button_gpio_init+0x86>
        DBG_LOG("[sms_button_configure]\tProblem while setting up XPLAINED user button");
10008ba2:	4807      	ldr	r0, [pc, #28]	; (10008bc0 <sms_button_gpio_init+0x98>)
10008ba4:	4b07      	ldr	r3, [pc, #28]	; (10008bc4 <sms_button_gpio_init+0x9c>)
10008ba6:	4798      	blx	r3
10008ba8:	480a      	ldr	r0, [pc, #40]	; (10008bd4 <sms_button_gpio_init+0xac>)
10008baa:	4b08      	ldr	r3, [pc, #32]	; (10008bcc <sms_button_gpio_init+0xa4>)
10008bac:	4798      	blx	r3
    }
}
10008bae:	b002      	add	sp, #8
10008bb0:	bd10      	pop	{r4, pc}
10008bb2:	46c0      	nop			; (mov r8, r8)
10008bb4:	1000a9c1 	.word	0x1000a9c1
10008bb8:	1001a07c 	.word	0x1001a07c
10008bbc:	1000a9d1 	.word	0x1000a9d1
10008bc0:	10016a10 	.word	0x10016a10
10008bc4:	100159e9 	.word	0x100159e9
10008bc8:	10016dfc 	.word	0x10016dfc
10008bcc:	100158c9 	.word	0x100158c9
10008bd0:	10016e34 	.word	0x10016e34
10008bd4:	10016e6c 	.word	0x10016e6c

10008bd8 <sms_button_register_callbacks>:

/* Register button input callbacks */
void sms_button_register_callbacks(void)
{
10008bd8:	b570      	push	{r4, r5, r6, lr}
    /* Button0 callback */
    gpio_register_callback(button_instance.btn0.gpio_pin, sms_button_bt0_callback, GPIO_CALLBACK_RISING);
10008bda:	4d05      	ldr	r5, [pc, #20]	; (10008bf0 <sms_button_register_callbacks+0x18>)
10008bdc:	7868      	ldrb	r0, [r5, #1]
10008bde:	2202      	movs	r2, #2
10008be0:	4904      	ldr	r1, [pc, #16]	; (10008bf4 <sms_button_register_callbacks+0x1c>)
10008be2:	4c05      	ldr	r4, [pc, #20]	; (10008bf8 <sms_button_register_callbacks+0x20>)
10008be4:	47a0      	blx	r4
    //gpio_enable_callback(SMS_BTN_0_PIN);
    
    /* Button1 callback */
    gpio_register_callback(button_instance.btn1.gpio_pin, sms_button_bt1_callback, GPIO_CALLBACK_RISING);
10008be6:	79e8      	ldrb	r0, [r5, #7]
10008be8:	2202      	movs	r2, #2
10008bea:	4904      	ldr	r1, [pc, #16]	; (10008bfc <sms_button_register_callbacks+0x24>)
10008bec:	47a0      	blx	r4
    //gpio_enable_callback(SMS_BTN_1_PIN);
    
    /* User button callback */
}
10008bee:	bd70      	pop	{r4, r5, r6, pc}
10008bf0:	1001a07c 	.word	0x1001a07c
10008bf4:	10008ac1 	.word	0x10008ac1
10008bf8:	1000ae01 	.word	0x1000ae01
10008bfc:	10008ae1 	.word	0x10008ae1

10008c00 <sms_button_get_state>:

/* Get current buttons state */
enum sms_button_state sms_button_get_state(void)
{
10008c00:	b570      	push	{r4, r5, r6, lr}
    bool b0 = gpio_pin_get_input_level(SMS_BTN_0_PIN);
10008c02:	201f      	movs	r0, #31
10008c04:	4c08      	ldr	r4, [pc, #32]	; (10008c28 <sms_button_get_state+0x28>)
10008c06:	47a0      	blx	r4
10008c08:	0005      	movs	r5, r0
    bool b1 = gpio_pin_get_input_level(SMS_BTN_1_PIN);
10008c0a:	201d      	movs	r0, #29
10008c0c:	47a0      	blx	r4
    //DBG_LOG_DEV("[sms_button_get_state]\t\tButton state: %d %d", b1, b0);
    if(b0 && b1) return BUTTON_STATE_BOTH;
10008c0e:	2d00      	cmp	r5, #0
10008c10:	d004      	beq.n	10008c1c <sms_button_get_state+0x1c>
10008c12:	2303      	movs	r3, #3
10008c14:	2800      	cmp	r0, #0
10008c16:	d104      	bne.n	10008c22 <sms_button_get_state+0x22>
    else if(b0 && !b1) return BUTTON_STATE_B0;
10008c18:	3b02      	subs	r3, #2
10008c1a:	e002      	b.n	10008c22 <sms_button_get_state+0x22>
    else if(!b0 && b1) return BUTTON_STATE_B1;
    else return BUTTON_STATE_NONE;
10008c1c:	1e43      	subs	r3, r0, #1
10008c1e:	4198      	sbcs	r0, r3
10008c20:	0043      	lsls	r3, r0, #1
}
10008c22:	0018      	movs	r0, r3
10008c24:	bd70      	pop	{r4, r5, r6, pc}
10008c26:	46c0      	nop			; (mov r8, r8)
10008c28:	1000ab89 	.word	0x1000ab89

10008c2c <sms_button_fn>:

/************************************************************************/
/* Callback functions --> doing things                                  */
/************************************************************************/
int sms_button_fn(enum sms_btn_ids btn)
{
10008c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10008c2e:	0005      	movs	r5, r0
	bool wait_success = true;
    button_instance.previous_state = button_instance.current_state;
10008c30:	4c4d      	ldr	r4, [pc, #308]	; (10008d68 <sms_button_fn+0x13c>)
10008c32:	7b63      	ldrb	r3, [r4, #13]
10008c34:	7323      	strb	r3, [r4, #12]
    button_instance.current_state = sms_button_get_state();
10008c36:	4b4d      	ldr	r3, [pc, #308]	; (10008d6c <sms_button_fn+0x140>)
10008c38:	4798      	blx	r3
10008c3a:	7360      	strb	r0, [r4, #13]
    
#if defined(DEBUG)
    if(btn == SMS_BTN_0) sms_monitor_get_states("[sms_button_fn]-0");
10008c3c:	2d00      	cmp	r5, #0
10008c3e:	d103      	bne.n	10008c48 <sms_button_fn+0x1c>
10008c40:	484b      	ldr	r0, [pc, #300]	; (10008d70 <sms_button_fn+0x144>)
10008c42:	4b4c      	ldr	r3, [pc, #304]	; (10008d74 <sms_button_fn+0x148>)
10008c44:	4798      	blx	r3
10008c46:	e004      	b.n	10008c52 <sms_button_fn+0x26>
    else if(btn == SMS_BTN_1) sms_monitor_get_states("[sms_button_fn]-1");
10008c48:	2d01      	cmp	r5, #1
10008c4a:	d16e      	bne.n	10008d2a <sms_button_fn+0xfe>
10008c4c:	484a      	ldr	r0, [pc, #296]	; (10008d78 <sms_button_fn+0x14c>)
10008c4e:	4b49      	ldr	r3, [pc, #292]	; (10008d74 <sms_button_fn+0x148>)
10008c50:	4798      	blx	r3
    else return -1;
#endif
    
    switch(button_instance.current_state) {
10008c52:	4b45      	ldr	r3, [pc, #276]	; (10008d68 <sms_button_fn+0x13c>)
10008c54:	7b5b      	ldrb	r3, [r3, #13]
10008c56:	b2da      	uxtb	r2, r3
10008c58:	2a02      	cmp	r2, #2
10008c5a:	d802      	bhi.n	10008c62 <sms_button_fn+0x36>
10008c5c:	2b00      	cmp	r3, #0
10008c5e:	d05c      	beq.n	10008d1a <sms_button_fn+0xee>
10008c60:	e002      	b.n	10008c68 <sms_button_fn+0x3c>
10008c62:	2b03      	cmp	r3, #3
10008c64:	d032      	beq.n	10008ccc <sms_button_fn+0xa0>
10008c66:	e063      	b.n	10008d30 <sms_button_fn+0x104>
        // --- current state ---
        case BUTTON_STATE_B0:
		case BUTTON_STATE_B1:
        switch(ble_instance.current_state) {
10008c68:	4b44      	ldr	r3, [pc, #272]	; (10008d7c <sms_button_fn+0x150>)
10008c6a:	781b      	ldrb	r3, [r3, #0]
10008c6c:	b2db      	uxtb	r3, r3
10008c6e:	2b00      	cmp	r3, #0
10008c70:	d003      	beq.n	10008c7a <sms_button_fn+0x4e>
10008c72:	3b22      	subs	r3, #34	; 0x22
10008c74:	2b01      	cmp	r3, #1
10008c76:	d820      	bhi.n	10008cba <sms_button_fn+0x8e>
10008c78:	e01a      	b.n	10008cb0 <sms_button_fn+0x84>
            case BLE_STATE_POWEROFF: // start-up command?
			DBG_LOG_DEV("[sms_button_fn]\t\t\tWaking up ");
10008c7a:	4841      	ldr	r0, [pc, #260]	; (10008d80 <sms_button_fn+0x154>)
10008c7c:	4b41      	ldr	r3, [pc, #260]	; (10008d84 <sms_button_fn+0x158>)
10008c7e:	4798      	blx	r3
10008c80:	4841      	ldr	r0, [pc, #260]	; (10008d88 <sms_button_fn+0x15c>)
10008c82:	4b42      	ldr	r3, [pc, #264]	; (10008d8c <sms_button_fn+0x160>)
10008c84:	4798      	blx	r3
			sms_disable_irq(SMS_BTN_0_IRQ | SMS_BTN_1_IRQ);
10008c86:	201f      	movs	r0, #31
10008c88:	4b41      	ldr	r3, [pc, #260]	; (10008d90 <sms_button_fn+0x164>)
10008c8a:	4798      	blx	r3
10008c8c:	2432      	movs	r4, #50	; 0x32
			for(uint8_t i = 0; i < 50; i++) {
				//gpio_pin_set_output_level(DBG_PIN_1, true);
				delay_ms(50);
10008c8e:	4f41      	ldr	r7, [pc, #260]	; (10008d94 <sms_button_fn+0x168>)
				if(sms_button_get_state() != button_instance.current_state) {
10008c90:	4e36      	ldr	r6, [pc, #216]	; (10008d6c <sms_button_fn+0x140>)
10008c92:	4d35      	ldr	r5, [pc, #212]	; (10008d68 <sms_button_fn+0x13c>)
            case BLE_STATE_POWEROFF: // start-up command?
			DBG_LOG_DEV("[sms_button_fn]\t\t\tWaking up ");
			sms_disable_irq(SMS_BTN_0_IRQ | SMS_BTN_1_IRQ);
			for(uint8_t i = 0; i < 50; i++) {
				//gpio_pin_set_output_level(DBG_PIN_1, true);
				delay_ms(50);
10008c94:	2032      	movs	r0, #50	; 0x32
10008c96:	47b8      	blx	r7
				if(sms_button_get_state() != button_instance.current_state) {
10008c98:	47b0      	blx	r6
10008c9a:	7b6b      	ldrb	r3, [r5, #13]
10008c9c:	4283      	cmp	r3, r0
10008c9e:	d149      	bne.n	10008d34 <sms_button_fn+0x108>
					//gpio_pin_set_output_level(DBG_PIN_2, true);
					wait_success = false;
					break;
				}
				//gpio_pin_set_output_level(DBG_PIN_1, false);
				DBG_LOG_CONT_DEV(".");
10008ca0:	202e      	movs	r0, #46	; 0x2e
10008ca2:	4b3d      	ldr	r3, [pc, #244]	; (10008d98 <sms_button_fn+0x16c>)
10008ca4:	4798      	blx	r3
10008ca6:	3c01      	subs	r4, #1
10008ca8:	b2e4      	uxtb	r4, r4
		case BUTTON_STATE_B1:
        switch(ble_instance.current_state) {
            case BLE_STATE_POWEROFF: // start-up command?
			DBG_LOG_DEV("[sms_button_fn]\t\t\tWaking up ");
			sms_disable_irq(SMS_BTN_0_IRQ | SMS_BTN_1_IRQ);
			for(uint8_t i = 0; i < 50; i++) {
10008caa:	2c00      	cmp	r4, #0
10008cac:	d1f2      	bne.n	10008c94 <sms_button_fn+0x68>
10008cae:	e046      	b.n	10008d3e <sms_button_fn+0x112>
			}
            break;
            
            case BLE_STATE_PAIRED:
            case BLE_STATE_INDICATING:
			sms_ble_send_characteristic(BLE_CHAR_BTN);
10008cb0:	2000      	movs	r0, #0
10008cb2:	4b3a      	ldr	r3, [pc, #232]	; (10008d9c <sms_button_fn+0x170>)
10008cb4:	4798      	blx	r3
        //ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
10008cb6:	2000      	movs	r0, #0
            break;
            
            case BLE_STATE_PAIRED:
            case BLE_STATE_INDICATING:
			sms_ble_send_characteristic(BLE_CHAR_BTN);
            break;
10008cb8:	e055      	b.n	10008d66 <sms_button_fn+0x13a>
            
            case BLE_STATE_DISCONNECTED:
            case BLE_STATE_ADVERTISING:
            case BLE_STATE_CONNECTED:
            default:
            DBG_LOG_DEV("[sms_button_fn]\t\t\tNot used states...");
10008cba:	4831      	ldr	r0, [pc, #196]	; (10008d80 <sms_button_fn+0x154>)
10008cbc:	4b31      	ldr	r3, [pc, #196]	; (10008d84 <sms_button_fn+0x158>)
10008cbe:	4798      	blx	r3
10008cc0:	4837      	ldr	r0, [pc, #220]	; (10008da0 <sms_button_fn+0x174>)
10008cc2:	4b32      	ldr	r3, [pc, #200]	; (10008d8c <sms_button_fn+0x160>)
10008cc4:	4798      	blx	r3
            return -1;
10008cc6:	2001      	movs	r0, #1
10008cc8:	4240      	negs	r0, r0
10008cca:	e04c      	b.n	10008d66 <sms_button_fn+0x13a>
        }
        break;
        
        // --- current state ---
        case BUTTON_STATE_BOTH:
        if(ble_instance.current_state == BLE_STATE_POWEROFF) {
10008ccc:	4b2b      	ldr	r3, [pc, #172]	; (10008d7c <sms_button_fn+0x150>)
10008cce:	781b      	ldrb	r3, [r3, #0]
10008cd0:	2b00      	cmp	r3, #0
10008cd2:	d107      	bne.n	10008ce4 <sms_button_fn+0xb8>
			DBG_LOG_DEV("[sms_button_fn]\t\t\tNot used state...");
10008cd4:	482a      	ldr	r0, [pc, #168]	; (10008d80 <sms_button_fn+0x154>)
10008cd6:	4b2b      	ldr	r3, [pc, #172]	; (10008d84 <sms_button_fn+0x158>)
10008cd8:	4798      	blx	r3
10008cda:	4832      	ldr	r0, [pc, #200]	; (10008da4 <sms_button_fn+0x178>)
10008cdc:	4b2b      	ldr	r3, [pc, #172]	; (10008d8c <sms_button_fn+0x160>)
10008cde:	4798      	blx	r3
        //ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
10008ce0:	2000      	movs	r0, #0
10008ce2:	e040      	b.n	10008d66 <sms_button_fn+0x13a>
        if(ble_instance.current_state == BLE_STATE_POWEROFF) {
			DBG_LOG_DEV("[sms_button_fn]\t\t\tNot used state...");
            //ulp_ready = true;
        }
        else {
			DBG_LOG_DEV("[sms_button_fn]\t\t\tShutting down ");
10008ce4:	4826      	ldr	r0, [pc, #152]	; (10008d80 <sms_button_fn+0x154>)
10008ce6:	4b27      	ldr	r3, [pc, #156]	; (10008d84 <sms_button_fn+0x158>)
10008ce8:	4798      	blx	r3
10008cea:	482f      	ldr	r0, [pc, #188]	; (10008da8 <sms_button_fn+0x17c>)
10008cec:	4b27      	ldr	r3, [pc, #156]	; (10008d8c <sms_button_fn+0x160>)
10008cee:	4798      	blx	r3
			sms_disable_irq(SMS_BTN_0_IRQ | SMS_BTN_1_IRQ);
10008cf0:	201f      	movs	r0, #31
10008cf2:	4b27      	ldr	r3, [pc, #156]	; (10008d90 <sms_button_fn+0x164>)
10008cf4:	4798      	blx	r3
10008cf6:	2432      	movs	r4, #50	; 0x32
			for(uint8_t i = 0; i < 50; i++) {
				delay_ms(50);
10008cf8:	4f26      	ldr	r7, [pc, #152]	; (10008d94 <sms_button_fn+0x168>)
				if(sms_button_get_state() != button_instance.current_state) {
10008cfa:	4e1c      	ldr	r6, [pc, #112]	; (10008d6c <sms_button_fn+0x140>)
10008cfc:	4d1a      	ldr	r5, [pc, #104]	; (10008d68 <sms_button_fn+0x13c>)
        }
        else {
			DBG_LOG_DEV("[sms_button_fn]\t\t\tShutting down ");
			sms_disable_irq(SMS_BTN_0_IRQ | SMS_BTN_1_IRQ);
			for(uint8_t i = 0; i < 50; i++) {
				delay_ms(50);
10008cfe:	2032      	movs	r0, #50	; 0x32
10008d00:	47b8      	blx	r7
				if(sms_button_get_state() != button_instance.current_state) {
10008d02:	47b0      	blx	r6
10008d04:	7b6b      	ldrb	r3, [r5, #13]
10008d06:	4283      	cmp	r3, r0
10008d08:	d129      	bne.n	10008d5e <sms_button_fn+0x132>
					wait_success = false;
					break;
				}
				DBG_LOG_CONT_DEV(".");
10008d0a:	202e      	movs	r0, #46	; 0x2e
10008d0c:	4b22      	ldr	r3, [pc, #136]	; (10008d98 <sms_button_fn+0x16c>)
10008d0e:	4798      	blx	r3
10008d10:	3c01      	subs	r4, #1
10008d12:	b2e4      	uxtb	r4, r4
            //ulp_ready = true;
        }
        else {
			DBG_LOG_DEV("[sms_button_fn]\t\t\tShutting down ");
			sms_disable_irq(SMS_BTN_0_IRQ | SMS_BTN_1_IRQ);
			for(uint8_t i = 0; i < 50; i++) {
10008d14:	2c00      	cmp	r4, #0
10008d16:	d1f2      	bne.n	10008cfe <sms_button_fn+0xd2>
10008d18:	e01a      	b.n	10008d50 <sms_button_fn+0x124>
        }
        break;
        
        // --- current state ---
        case BUTTON_STATE_NONE:
		DBG_LOG_DEV("[sms_button_fn]\t\t\tNone");
10008d1a:	4819      	ldr	r0, [pc, #100]	; (10008d80 <sms_button_fn+0x154>)
10008d1c:	4b19      	ldr	r3, [pc, #100]	; (10008d84 <sms_button_fn+0x158>)
10008d1e:	4798      	blx	r3
10008d20:	4822      	ldr	r0, [pc, #136]	; (10008dac <sms_button_fn+0x180>)
10008d22:	4b1a      	ldr	r3, [pc, #104]	; (10008d8c <sms_button_fn+0x160>)
10008d24:	4798      	blx	r3
        //ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
10008d26:	2000      	movs	r0, #0
        case BUTTON_STATE_NONE:
		DBG_LOG_DEV("[sms_button_fn]\t\t\tNone");
        //ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
10008d28:	e01d      	b.n	10008d66 <sms_button_fn+0x13a>
    button_instance.current_state = sms_button_get_state();
    
#if defined(DEBUG)
    if(btn == SMS_BTN_0) sms_monitor_get_states("[sms_button_fn]-0");
    else if(btn == SMS_BTN_1) sms_monitor_get_states("[sms_button_fn]-1");
    else return -1;
10008d2a:	2001      	movs	r0, #1
10008d2c:	4240      	negs	r0, r0
10008d2e:	e01a      	b.n	10008d66 <sms_button_fn+0x13a>
        //ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
10008d30:	2000      	movs	r0, #0
10008d32:	e018      	b.n	10008d66 <sms_button_fn+0x13a>
					break;
				}
				//gpio_pin_set_output_level(DBG_PIN_1, false);
				DBG_LOG_CONT_DEV(".");
			}
			sms_enable_irq(SMS_BTN_0_IRQ | SMS_BTN_1_IRQ);
10008d34:	201f      	movs	r0, #31
10008d36:	4b1e      	ldr	r3, [pc, #120]	; (10008db0 <sms_button_fn+0x184>)
10008d38:	4798      	blx	r3
        //ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
10008d3a:	2000      	movs	r0, #0
10008d3c:	e013      	b.n	10008d66 <sms_button_fn+0x13a>
					break;
				}
				//gpio_pin_set_output_level(DBG_PIN_1, false);
				DBG_LOG_CONT_DEV(".");
			}
			sms_enable_irq(SMS_BTN_0_IRQ | SMS_BTN_1_IRQ);
10008d3e:	201f      	movs	r0, #31
10008d40:	4b1b      	ldr	r3, [pc, #108]	; (10008db0 <sms_button_fn+0x184>)
10008d42:	4798      	blx	r3
			//gpio_pin_set_output_level(DBG_PIN_2, false);
			//gpio_pin_set_output_level(DBG_PIN_1, false);
			if(wait_success) {
				if(sms_ble_startup()) return -1;
10008d44:	4b1b      	ldr	r3, [pc, #108]	; (10008db4 <sms_button_fn+0x188>)
10008d46:	4798      	blx	r3
10008d48:	1e43      	subs	r3, r0, #1
10008d4a:	4198      	sbcs	r0, r3
10008d4c:	4240      	negs	r0, r0
10008d4e:	e00a      	b.n	10008d66 <sms_button_fn+0x13a>
					wait_success = false;
					break;
				}
				DBG_LOG_CONT_DEV(".");
			}
			sms_enable_irq(SMS_BTN_0_IRQ | SMS_BTN_1_IRQ);
10008d50:	201f      	movs	r0, #31
10008d52:	4b17      	ldr	r3, [pc, #92]	; (10008db0 <sms_button_fn+0x184>)
10008d54:	4798      	blx	r3
			if(wait_success) {
				sms_ble_power_down();
10008d56:	4b18      	ldr	r3, [pc, #96]	; (10008db8 <sms_button_fn+0x18c>)
10008d58:	4798      	blx	r3
        //ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
10008d5a:	2000      	movs	r0, #0
10008d5c:	e003      	b.n	10008d66 <sms_button_fn+0x13a>
					wait_success = false;
					break;
				}
				DBG_LOG_CONT_DEV(".");
			}
			sms_enable_irq(SMS_BTN_0_IRQ | SMS_BTN_1_IRQ);
10008d5e:	201f      	movs	r0, #31
10008d60:	4b13      	ldr	r3, [pc, #76]	; (10008db0 <sms_button_fn+0x184>)
10008d62:	4798      	blx	r3
        //ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
10008d64:	2000      	movs	r0, #0
}
10008d66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10008d68:	1001a07c 	.word	0x1001a07c
10008d6c:	10008c01 	.word	0x10008c01
10008d70:	10016eb4 	.word	0x10016eb4
10008d74:	10008ee9 	.word	0x10008ee9
10008d78:	10016ec8 	.word	0x10016ec8
10008d7c:	1001a06c 	.word	0x1001a06c
10008d80:	10016a10 	.word	0x10016a10
10008d84:	100159e9 	.word	0x100159e9
10008d88:	10016edc 	.word	0x10016edc
10008d8c:	100158c9 	.word	0x100158c9
10008d90:	10008f45 	.word	0x10008f45
10008d94:	1000a345 	.word	0x1000a345
10008d98:	100158fd 	.word	0x100158fd
10008d9c:	10008825 	.word	0x10008825
10008da0:	10016efc 	.word	0x10016efc
10008da4:	10016f24 	.word	0x10016f24
10008da8:	10016f48 	.word	0x10016f48
10008dac:	10016f6c 	.word	0x10016f6c
10008db0:	10008fa5 	.word	0x10008fa5
10008db4:	100087cd 	.word	0x100087cd
10008db8:	100084e1 	.word	0x100084e1

10008dbc <sms_button_toggle_callback>:
    else return BUTTON_STATE_NONE;
}

/* En- or disable button interrupts */
void sms_button_toggle_callback(enum sms_btn_int_tog tog0, enum sms_btn_int_tog tog1)
{
10008dbc:	b510      	push	{r4, lr}
10008dbe:	000c      	movs	r4, r1
    if(tog0 == SMS_BTN_INT_ENABLE) {
10008dc0:	2800      	cmp	r0, #0
10008dc2:	d104      	bne.n	10008dce <sms_button_toggle_callback+0x12>
        gpio_enable_callback(button_instance.btn0.gpio_pin);
10008dc4:	4b0c      	ldr	r3, [pc, #48]	; (10008df8 <sms_button_toggle_callback+0x3c>)
10008dc6:	7858      	ldrb	r0, [r3, #1]
10008dc8:	4b0c      	ldr	r3, [pc, #48]	; (10008dfc <sms_button_toggle_callback+0x40>)
10008dca:	4798      	blx	r3
10008dcc:	e005      	b.n	10008dda <sms_button_toggle_callback+0x1e>
    }
    else if(tog0 == SMS_BTN_INT_DISABLE) {
10008dce:	2801      	cmp	r0, #1
10008dd0:	d103      	bne.n	10008dda <sms_button_toggle_callback+0x1e>
        gpio_disable_callback(button_instance.btn0.gpio_pin);
10008dd2:	4b09      	ldr	r3, [pc, #36]	; (10008df8 <sms_button_toggle_callback+0x3c>)
10008dd4:	7858      	ldrb	r0, [r3, #1]
10008dd6:	4b0a      	ldr	r3, [pc, #40]	; (10008e00 <sms_button_toggle_callback+0x44>)
10008dd8:	4798      	blx	r3
    }
    
    if(tog1 == SMS_BTN_INT_ENABLE) {
10008dda:	2c00      	cmp	r4, #0
10008ddc:	d104      	bne.n	10008de8 <sms_button_toggle_callback+0x2c>
        gpio_enable_callback(button_instance.btn1.gpio_pin);
10008dde:	4b06      	ldr	r3, [pc, #24]	; (10008df8 <sms_button_toggle_callback+0x3c>)
10008de0:	79d8      	ldrb	r0, [r3, #7]
10008de2:	4b06      	ldr	r3, [pc, #24]	; (10008dfc <sms_button_toggle_callback+0x40>)
10008de4:	4798      	blx	r3
10008de6:	e005      	b.n	10008df4 <sms_button_toggle_callback+0x38>
    }
    else if(tog1 == SMS_BTN_INT_DISABLE) {
10008de8:	2c01      	cmp	r4, #1
10008dea:	d103      	bne.n	10008df4 <sms_button_toggle_callback+0x38>
        gpio_disable_callback(button_instance.btn1.gpio_pin);
10008dec:	4b02      	ldr	r3, [pc, #8]	; (10008df8 <sms_button_toggle_callback+0x3c>)
10008dee:	79d8      	ldrb	r0, [r3, #7]
10008df0:	4b03      	ldr	r3, [pc, #12]	; (10008e00 <sms_button_toggle_callback+0x44>)
10008df2:	4798      	blx	r3
    }
}
10008df4:	bd10      	pop	{r4, pc}
10008df6:	46c0      	nop			; (mov r8, r8)
10008df8:	1001a07c 	.word	0x1001a07c
10008dfc:	1000aed1 	.word	0x1000aed1
10008e00:	1000af2d 	.word	0x1000af2d

10008e04 <sms_button_define_services>:
    send_plf_int_msg_ind(button_instance.btn1.gpio_pin, GPIO_CALLBACK_RISING, NULL, 0);
}

/* Define BLE service for buttons */
void sms_button_define_services(void)
{
10008e04:	b510      	push	{r4, lr}
10008e06:	b082      	sub	sp, #8
    at_ble_status_t status;
    uint8_t init_value = 0;
10008e08:	466b      	mov	r3, sp
10008e0a:	1dda      	adds	r2, r3, #7
10008e0c:	2300      	movs	r3, #0
10008e0e:	7013      	strb	r3, [r2, #0]
    sms_ble_service_init(BLE_SERV_BUTTON, &button_instance.service_handler, &init_value);
10008e10:	4c0d      	ldr	r4, [pc, #52]	; (10008e48 <sms_button_define_services+0x44>)
10008e12:	0021      	movs	r1, r4
10008e14:	2000      	movs	r0, #0
10008e16:	4b0d      	ldr	r3, [pc, #52]	; (10008e4c <sms_button_define_services+0x48>)
10008e18:	4798      	blx	r3
    if((status = sms_ble_primary_service_define(&button_instance.service_handler)) != AT_BLE_SUCCESS) {
10008e1a:	0020      	movs	r0, r4
10008e1c:	4b0c      	ldr	r3, [pc, #48]	; (10008e50 <sms_button_define_services+0x4c>)
10008e1e:	4798      	blx	r3
10008e20:	1e04      	subs	r4, r0, #0
10008e22:	d007      	beq.n	10008e34 <sms_button_define_services+0x30>
        DBG_LOG("[sms_button_define_services]\tServices defining failed, reason 0x%x", status);
10008e24:	480b      	ldr	r0, [pc, #44]	; (10008e54 <sms_button_define_services+0x50>)
10008e26:	4b0c      	ldr	r3, [pc, #48]	; (10008e58 <sms_button_define_services+0x54>)
10008e28:	4798      	blx	r3
10008e2a:	0021      	movs	r1, r4
10008e2c:	480b      	ldr	r0, [pc, #44]	; (10008e5c <sms_button_define_services+0x58>)
10008e2e:	4b0c      	ldr	r3, [pc, #48]	; (10008e60 <sms_button_define_services+0x5c>)
10008e30:	4798      	blx	r3
10008e32:	e007      	b.n	10008e44 <sms_button_define_services+0x40>
    }
    else {
        DBG_LOG_DEV("[sms_button_define_services]\tServices defined, SMS button handle: %d", button_instance.service_handler.serv_handle);
10008e34:	4807      	ldr	r0, [pc, #28]	; (10008e54 <sms_button_define_services+0x50>)
10008e36:	4b08      	ldr	r3, [pc, #32]	; (10008e58 <sms_button_define_services+0x54>)
10008e38:	4798      	blx	r3
10008e3a:	4b0a      	ldr	r3, [pc, #40]	; (10008e64 <sms_button_define_services+0x60>)
10008e3c:	8c59      	ldrh	r1, [r3, #34]	; 0x22
10008e3e:	480a      	ldr	r0, [pc, #40]	; (10008e68 <sms_button_define_services+0x64>)
10008e40:	4b07      	ldr	r3, [pc, #28]	; (10008e60 <sms_button_define_services+0x5c>)
10008e42:	4798      	blx	r3
    }
10008e44:	b002      	add	sp, #8
10008e46:	bd10      	pop	{r4, pc}
10008e48:	1001a08c 	.word	0x1001a08c
10008e4c:	100089d9 	.word	0x100089d9
10008e50:	100089b5 	.word	0x100089b5
10008e54:	10016a10 	.word	0x10016a10
10008e58:	100159e9 	.word	0x100159e9
10008e5c:	10016f84 	.word	0x10016f84
10008e60:	100158c9 	.word	0x100158c9
10008e64:	1001a07c 	.word	0x1001a07c
10008e68:	10016fc8 	.word	0x10016fc8

10008e6c <sms_monitor_configure_gpio>:

#include "sms_common.h"

/* General functions */
void sms_monitor_configure_gpio(void)
{
10008e6c:	b510      	push	{r4, lr}
10008e6e:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;
    gpio_get_config_defaults(&config_gpio_pin);
10008e70:	ac01      	add	r4, sp, #4
10008e72:	0020      	movs	r0, r4
10008e74:	4b15      	ldr	r3, [pc, #84]	; (10008ecc <sms_monitor_configure_gpio+0x60>)
10008e76:	4798      	blx	r3
    config_gpio_pin.direction  = GPIO_PIN_DIR_OUTPUT;
10008e78:	2301      	movs	r3, #1
10008e7a:	7023      	strb	r3, [r4, #0]
    if(gpio_pin_set_config(DBG_PIN_1, &config_gpio_pin) != STATUS_OK) {
10008e7c:	0021      	movs	r1, r4
10008e7e:	200e      	movs	r0, #14
10008e80:	4b13      	ldr	r3, [pc, #76]	; (10008ed0 <sms_monitor_configure_gpio+0x64>)
10008e82:	4798      	blx	r3
10008e84:	2800      	cmp	r0, #0
10008e86:	d005      	beq.n	10008e94 <sms_monitor_configure_gpio+0x28>
        DBG_LOG("Problem while setting gpio pin");
10008e88:	4812      	ldr	r0, [pc, #72]	; (10008ed4 <sms_monitor_configure_gpio+0x68>)
10008e8a:	4b13      	ldr	r3, [pc, #76]	; (10008ed8 <sms_monitor_configure_gpio+0x6c>)
10008e8c:	4798      	blx	r3
10008e8e:	4813      	ldr	r0, [pc, #76]	; (10008edc <sms_monitor_configure_gpio+0x70>)
10008e90:	4b13      	ldr	r3, [pc, #76]	; (10008ee0 <sms_monitor_configure_gpio+0x74>)
10008e92:	4798      	blx	r3
    }
    gpio_pin_set_output_level(DBG_PIN_1, DBG_PIN_LOW);
10008e94:	2100      	movs	r1, #0
10008e96:	200e      	movs	r0, #14
10008e98:	4b12      	ldr	r3, [pc, #72]	; (10008ee4 <sms_monitor_configure_gpio+0x78>)
10008e9a:	4798      	blx	r3
	
	gpio_get_config_defaults(&config_gpio_pin);
10008e9c:	ac01      	add	r4, sp, #4
10008e9e:	0020      	movs	r0, r4
10008ea0:	4b0a      	ldr	r3, [pc, #40]	; (10008ecc <sms_monitor_configure_gpio+0x60>)
10008ea2:	4798      	blx	r3
	config_gpio_pin.direction = GPIO_PIN_DIR_OUTPUT;
10008ea4:	2301      	movs	r3, #1
10008ea6:	7023      	strb	r3, [r4, #0]
	if(gpio_pin_set_config(DBG_PIN_2, &config_gpio_pin) != STATUS_OK) {
10008ea8:	0021      	movs	r1, r4
10008eaa:	200f      	movs	r0, #15
10008eac:	4b08      	ldr	r3, [pc, #32]	; (10008ed0 <sms_monitor_configure_gpio+0x64>)
10008eae:	4798      	blx	r3
10008eb0:	2800      	cmp	r0, #0
10008eb2:	d005      	beq.n	10008ec0 <sms_monitor_configure_gpio+0x54>
		DBG_LOG("Problem while setting gpio pin");
10008eb4:	4807      	ldr	r0, [pc, #28]	; (10008ed4 <sms_monitor_configure_gpio+0x68>)
10008eb6:	4b08      	ldr	r3, [pc, #32]	; (10008ed8 <sms_monitor_configure_gpio+0x6c>)
10008eb8:	4798      	blx	r3
10008eba:	4808      	ldr	r0, [pc, #32]	; (10008edc <sms_monitor_configure_gpio+0x70>)
10008ebc:	4b08      	ldr	r3, [pc, #32]	; (10008ee0 <sms_monitor_configure_gpio+0x74>)
10008ebe:	4798      	blx	r3
	}
	gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_LOW);
10008ec0:	2100      	movs	r1, #0
10008ec2:	200f      	movs	r0, #15
10008ec4:	4b07      	ldr	r3, [pc, #28]	; (10008ee4 <sms_monitor_configure_gpio+0x78>)
10008ec6:	4798      	blx	r3
}
10008ec8:	b002      	add	sp, #8
10008eca:	bd10      	pop	{r4, pc}
10008ecc:	1000a9c1 	.word	0x1000a9c1
10008ed0:	1000a9d1 	.word	0x1000a9d1
10008ed4:	10016a10 	.word	0x10016a10
10008ed8:	100159e9 	.word	0x100159e9
10008edc:	10017010 	.word	0x10017010
10008ee0:	100158c9 	.word	0x100158c9
10008ee4:	1000ac29 	.word	0x1000ac29

10008ee8 <sms_monitor_get_states>:

void sms_monitor_get_states(const char *label)
{
10008ee8:	b570      	push	{r4, r5, r6, lr}
10008eea:	b084      	sub	sp, #16
10008eec:	0004      	movs	r4, r0
    DBG_LOG_DEV("%s...\t\tB-prev %d, B-cur %d, BLE 0x%02x, T1 %d, T2 %d, SMS %d", label, button_instance.previous_state, button_instance.current_state, ble_instance.current_state, timer1_current_mode, timer2_current_mode, sms_working_mode);
10008eee:	480c      	ldr	r0, [pc, #48]	; (10008f20 <sms_monitor_get_states+0x38>)
10008ef0:	4b0c      	ldr	r3, [pc, #48]	; (10008f24 <sms_monitor_get_states+0x3c>)
10008ef2:	4798      	blx	r3
10008ef4:	4b0c      	ldr	r3, [pc, #48]	; (10008f28 <sms_monitor_get_states+0x40>)
10008ef6:	7819      	ldrb	r1, [r3, #0]
10008ef8:	4b0c      	ldr	r3, [pc, #48]	; (10008f2c <sms_monitor_get_states+0x44>)
10008efa:	7818      	ldrb	r0, [r3, #0]
10008efc:	4b0c      	ldr	r3, [pc, #48]	; (10008f30 <sms_monitor_get_states+0x48>)
10008efe:	781d      	ldrb	r5, [r3, #0]
10008f00:	4b0c      	ldr	r3, [pc, #48]	; (10008f34 <sms_monitor_get_states+0x4c>)
10008f02:	781e      	ldrb	r6, [r3, #0]
10008f04:	4a0c      	ldr	r2, [pc, #48]	; (10008f38 <sms_monitor_get_states+0x50>)
10008f06:	7b53      	ldrb	r3, [r2, #13]
10008f08:	7b12      	ldrb	r2, [r2, #12]
10008f0a:	9603      	str	r6, [sp, #12]
10008f0c:	9502      	str	r5, [sp, #8]
10008f0e:	9001      	str	r0, [sp, #4]
10008f10:	9100      	str	r1, [sp, #0]
10008f12:	0021      	movs	r1, r4
10008f14:	4809      	ldr	r0, [pc, #36]	; (10008f3c <sms_monitor_get_states+0x54>)
10008f16:	4c0a      	ldr	r4, [pc, #40]	; (10008f40 <sms_monitor_get_states+0x58>)
10008f18:	47a0      	blx	r4
}
10008f1a:	b004      	add	sp, #16
10008f1c:	bd70      	pop	{r4, r5, r6, pc}
10008f1e:	46c0      	nop			; (mov r8, r8)
10008f20:	10016a10 	.word	0x10016a10
10008f24:	100159e9 	.word	0x100159e9
10008f28:	1001a06c 	.word	0x1001a06c
10008f2c:	1001a068 	.word	0x1001a068
10008f30:	1001a19b 	.word	0x1001a19b
10008f34:	1001a069 	.word	0x1001a069
10008f38:	1001a07c 	.word	0x1001a07c
10008f3c:	10017030 	.word	0x10017030
10008f40:	100158c9 	.word	0x100158c9

10008f44 <sms_disable_irq>:

void sms_disable_irq(enum sms_irq irq)
{
10008f44:	b510      	push	{r4, lr}
10008f46:	0004      	movs	r4, r0
	if(SMS_IRQ_BTN0 & irq) {
10008f48:	07c3      	lsls	r3, r0, #31
10008f4a:	d507      	bpl.n	10008f5c <sms_disable_irq+0x18>
		DBG_LOG_CONT(".");
10008f4c:	202e      	movs	r0, #46	; 0x2e
10008f4e:	4b13      	ldr	r3, [pc, #76]	; (10008f9c <sms_disable_irq+0x58>)
10008f50:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
10008f52:	2180      	movs	r1, #128	; 0x80
10008f54:	0409      	lsls	r1, r1, #16
10008f56:	2380      	movs	r3, #128	; 0x80
10008f58:	4a11      	ldr	r2, [pc, #68]	; (10008fa0 <sms_disable_irq+0x5c>)
10008f5a:	50d1      	str	r1, [r2, r3]
		NVIC_DisableIRQ(SMS_BTN_0_IRQ);
	}
	if(SMS_IRQ_BTN1 & irq) {
10008f5c:	07a3      	lsls	r3, r4, #30
10008f5e:	d507      	bpl.n	10008f70 <sms_disable_irq+0x2c>
		DBG_LOG_CONT(".");
10008f60:	202e      	movs	r0, #46	; 0x2e
10008f62:	4b0e      	ldr	r3, [pc, #56]	; (10008f9c <sms_disable_irq+0x58>)
10008f64:	4798      	blx	r3
10008f66:	2180      	movs	r1, #128	; 0x80
10008f68:	0489      	lsls	r1, r1, #18
10008f6a:	2380      	movs	r3, #128	; 0x80
10008f6c:	4a0c      	ldr	r2, [pc, #48]	; (10008fa0 <sms_disable_irq+0x5c>)
10008f6e:	50d1      	str	r1, [r2, r3]
		NVIC_DisableIRQ(SMS_BTN_1_IRQ);
	}
	if(SMS_IRQ_DRDY & irq) {
10008f70:	0763      	lsls	r3, r4, #29
10008f72:	d507      	bpl.n	10008f84 <sms_disable_irq+0x40>
		DBG_LOG_CONT(".");
10008f74:	202e      	movs	r0, #46	; 0x2e
10008f76:	4b09      	ldr	r3, [pc, #36]	; (10008f9c <sms_disable_irq+0x58>)
10008f78:	4798      	blx	r3
10008f7a:	2180      	movs	r1, #128	; 0x80
10008f7c:	0449      	lsls	r1, r1, #17
10008f7e:	2380      	movs	r3, #128	; 0x80
10008f80:	4a07      	ldr	r2, [pc, #28]	; (10008fa0 <sms_disable_irq+0x5c>)
10008f82:	50d1      	str	r1, [r2, r3]
		NVIC_DisableIRQ(SMS_IMU_DRDY_IRQ);
	}
	if(SMS_IRQ_AON_TIMER & irq) {
10008f84:	0723      	lsls	r3, r4, #28
10008f86:	d507      	bpl.n	10008f98 <sms_disable_irq+0x54>
		DBG_LOG_CONT(".");
10008f88:	202e      	movs	r0, #46	; 0x2e
10008f8a:	4b04      	ldr	r3, [pc, #16]	; (10008f9c <sms_disable_irq+0x58>)
10008f8c:	4798      	blx	r3
10008f8e:	2180      	movs	r1, #128	; 0x80
10008f90:	0509      	lsls	r1, r1, #20
10008f92:	2380      	movs	r3, #128	; 0x80
10008f94:	4a02      	ldr	r2, [pc, #8]	; (10008fa0 <sms_disable_irq+0x5c>)
10008f96:	50d1      	str	r1, [r2, r3]
		NVIC_DisableIRQ(SMS_TIMER_AON_IRQ);
	}
}
10008f98:	bd10      	pop	{r4, pc}
10008f9a:	46c0      	nop			; (mov r8, r8)
10008f9c:	100158fd 	.word	0x100158fd
10008fa0:	e000e100 	.word	0xe000e100

10008fa4 <sms_enable_irq>:

void sms_enable_irq(enum sms_irq irq)
{
10008fa4:	b510      	push	{r4, lr}
10008fa6:	0004      	movs	r4, r0
	if(SMS_IRQ_BTN0 & irq) {
10008fa8:	07c3      	lsls	r3, r0, #31
10008faa:	d509      	bpl.n	10008fc0 <sms_enable_irq+0x1c>
		DBG_LOG_CONT(".");
10008fac:	202e      	movs	r0, #46	; 0x2e
10008fae:	4b17      	ldr	r3, [pc, #92]	; (1000900c <sms_enable_irq+0x68>)
10008fb0:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
10008fb2:	4b17      	ldr	r3, [pc, #92]	; (10009010 <sms_enable_irq+0x6c>)
10008fb4:	2280      	movs	r2, #128	; 0x80
10008fb6:	0412      	lsls	r2, r2, #16
10008fb8:	21c0      	movs	r1, #192	; 0xc0
10008fba:	0049      	lsls	r1, r1, #1
10008fbc:	505a      	str	r2, [r3, r1]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
10008fbe:	601a      	str	r2, [r3, #0]
		NVIC_ClearPendingIRQ(SMS_BTN_0_IRQ);
		NVIC_EnableIRQ(SMS_BTN_0_IRQ);
	}
	if(SMS_IRQ_BTN1 & irq) {
10008fc0:	07a3      	lsls	r3, r4, #30
10008fc2:	d509      	bpl.n	10008fd8 <sms_enable_irq+0x34>
		DBG_LOG_CONT(".");
10008fc4:	202e      	movs	r0, #46	; 0x2e
10008fc6:	4b11      	ldr	r3, [pc, #68]	; (1000900c <sms_enable_irq+0x68>)
10008fc8:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
10008fca:	4b11      	ldr	r3, [pc, #68]	; (10009010 <sms_enable_irq+0x6c>)
10008fcc:	2280      	movs	r2, #128	; 0x80
10008fce:	0492      	lsls	r2, r2, #18
10008fd0:	21c0      	movs	r1, #192	; 0xc0
10008fd2:	0049      	lsls	r1, r1, #1
10008fd4:	505a      	str	r2, [r3, r1]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
10008fd6:	601a      	str	r2, [r3, #0]
		NVIC_ClearPendingIRQ(SMS_BTN_1_IRQ);
		NVIC_EnableIRQ(SMS_BTN_1_IRQ);
	}
	if(SMS_IRQ_DRDY & irq) {
10008fd8:	0763      	lsls	r3, r4, #29
10008fda:	d509      	bpl.n	10008ff0 <sms_enable_irq+0x4c>
		DBG_LOG_CONT(".");
10008fdc:	202e      	movs	r0, #46	; 0x2e
10008fde:	4b0b      	ldr	r3, [pc, #44]	; (1000900c <sms_enable_irq+0x68>)
10008fe0:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
10008fe2:	4b0b      	ldr	r3, [pc, #44]	; (10009010 <sms_enable_irq+0x6c>)
10008fe4:	2280      	movs	r2, #128	; 0x80
10008fe6:	0452      	lsls	r2, r2, #17
10008fe8:	21c0      	movs	r1, #192	; 0xc0
10008fea:	0049      	lsls	r1, r1, #1
10008fec:	505a      	str	r2, [r3, r1]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
10008fee:	601a      	str	r2, [r3, #0]
		NVIC_ClearPendingIRQ(SMS_IMU_DRDY_IRQ);
		NVIC_EnableIRQ(SMS_IMU_DRDY_IRQ);
	}
	if(SMS_IRQ_AON_TIMER & irq) {
10008ff0:	0723      	lsls	r3, r4, #28
10008ff2:	d509      	bpl.n	10009008 <sms_enable_irq+0x64>
		DBG_LOG_CONT(".");
10008ff4:	202e      	movs	r0, #46	; 0x2e
10008ff6:	4b05      	ldr	r3, [pc, #20]	; (1000900c <sms_enable_irq+0x68>)
10008ff8:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
10008ffa:	4b05      	ldr	r3, [pc, #20]	; (10009010 <sms_enable_irq+0x6c>)
10008ffc:	2280      	movs	r2, #128	; 0x80
10008ffe:	0512      	lsls	r2, r2, #20
10009000:	21c0      	movs	r1, #192	; 0xc0
10009002:	0049      	lsls	r1, r1, #1
10009004:	505a      	str	r2, [r3, r1]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
10009006:	601a      	str	r2, [r3, #0]
		NVIC_ClearPendingIRQ(SMS_TIMER_AON_IRQ);
		NVIC_EnableIRQ(SMS_TIMER_AON_IRQ);
	}
10009008:	bd10      	pop	{r4, pc}
1000900a:	46c0      	nop			; (mov r8, r8)
1000900c:	100158fd 	.word	0x100158fd
10009010:	e000e100 	.word	0xe000e100

10009014 <sms_i2c_master_configure>:
#include <stdlib.h>
#include "sms_i2c.h"


void sms_i2c_master_configure(void)
{
10009014:	b530      	push	{r4, r5, lr}
10009016:	b087      	sub	sp, #28
    i2c_wpacket.data = malloc(I2C_DATA_LENGTH * sizeof(uint8_t));
10009018:	2010      	movs	r0, #16
1000901a:	4c14      	ldr	r4, [pc, #80]	; (1000906c <sms_i2c_master_configure+0x58>)
1000901c:	47a0      	blx	r4
1000901e:	4b14      	ldr	r3, [pc, #80]	; (10009070 <sms_i2c_master_configure+0x5c>)
10009020:	6058      	str	r0, [r3, #4]
    i2c_rpacket.data = malloc(I2C_DATA_LENGTH * sizeof(uint8_t));
10009022:	2010      	movs	r0, #16
10009024:	47a0      	blx	r4
10009026:	4b13      	ldr	r3, [pc, #76]	; (10009074 <sms_i2c_master_configure+0x60>)
10009028:	6058      	str	r0, [r3, #4]

    struct i2c_master_config config_i2c_master;
    i2c_master_get_config_defaults(&config_i2c_master);
1000902a:	ac01      	add	r4, sp, #4
1000902c:	0020      	movs	r0, r4
1000902e:	4b12      	ldr	r3, [pc, #72]	; (10009078 <sms_i2c_master_configure+0x64>)
10009030:	4798      	blx	r3
    config_i2c_master.clock_source = SMS_I2C_MASTER_CLK_SRC;
10009032:	2303      	movs	r3, #3
10009034:	7023      	strb	r3, [r4, #0]
    config_i2c_master.clock_divider = SMS_I2C_MASTER_CLK_DIV;
10009036:	331b      	adds	r3, #27
10009038:	8063      	strh	r3, [r4, #2]
    config_i2c_master.pin_number_pad0 = SMS_I2C_MASTER_PIN_SDA;
1000903a:	3b16      	subs	r3, #22
1000903c:	6063      	str	r3, [r4, #4]
    config_i2c_master.pin_number_pad1 = SMS_I2C_MASTER_PIN_SCL;
1000903e:	3301      	adds	r3, #1
10009040:	60e3      	str	r3, [r4, #12]
    config_i2c_master.pinmux_sel_pad0 = SMS_I2C_MASTER_MUX_SDA;
10009042:	3b07      	subs	r3, #7
10009044:	60a3      	str	r3, [r4, #8]
    config_i2c_master.pinmux_sel_pad1 = SMS_I2C_MASTER_MUX_SCL;
10009046:	6123      	str	r3, [r4, #16]
    while(i2c_master_init(&i2c_master_instance, SMS_I2C_MASTER_PORT, &config_i2c_master) != STATUS_OK);
10009048:	4d0c      	ldr	r5, [pc, #48]	; (1000907c <sms_i2c_master_configure+0x68>)
1000904a:	4c0d      	ldr	r4, [pc, #52]	; (10009080 <sms_i2c_master_configure+0x6c>)
1000904c:	aa01      	add	r2, sp, #4
1000904e:	490d      	ldr	r1, [pc, #52]	; (10009084 <sms_i2c_master_configure+0x70>)
10009050:	0028      	movs	r0, r5
10009052:	47a0      	blx	r4
10009054:	2800      	cmp	r0, #0
10009056:	d1f9      	bne.n	1000904c <sms_i2c_master_configure+0x38>

    i2c_enable(i2c_master_instance.hw);
10009058:	4b08      	ldr	r3, [pc, #32]	; (1000907c <sms_i2c_master_configure+0x68>)
1000905a:	681a      	ldr	r2, [r3, #0]
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2c *const i2c_module)
{
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
1000905c:	2128      	movs	r1, #40	; 0x28
1000905e:	5c53      	ldrb	r3, [r2, r1]
10009060:	07db      	lsls	r3, r3, #31
10009062:	d4fc      	bmi.n	1000905e <sms_i2c_master_configure+0x4a>
static inline void i2c_enable(I2c *const i2c_module)
{
	/* Wait for module to sync. */
	i2c_wait_for_idle(i2c_module);
	/* Enable module. */
	i2c_module->I2C_MODULE_ENABLE.reg = (1 << I2C_MODULE_ENABLE_ENABLE_Pos);
10009064:	2301      	movs	r3, #1
10009066:	7513      	strb	r3, [r2, #20]
}
10009068:	b007      	add	sp, #28
1000906a:	bd30      	pop	{r4, r5, pc}
1000906c:	1001573d 	.word	0x1001573d
10009070:	1001a1a0 	.word	0x1001a1a0
10009074:	1001a184 	.word	0x1001a184
10009078:	10008305 	.word	0x10008305
1000907c:	1001a190 	.word	0x1001a190
10009080:	1000831d 	.word	0x1000831d
10009084:	40003000 	.word	0x40003000

10009088 <sms_i2c_master_write>:

int sms_i2c_master_write(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t const *data)
{
10009088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    //DBG_LOG_DEV("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
1000908a:	4c12      	ldr	r4, [pc, #72]	; (100090d4 <sms_i2c_master_write+0x4c>)
1000908c:	8020      	strh	r0, [r4, #0]
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
1000908e:	1c50      	adds	r0, r2, #1
10009090:	b2c0      	uxtb	r0, r0
10009092:	8060      	strh	r0, [r4, #2]
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
10009094:	6860      	ldr	r0, [r4, #4]
10009096:	7001      	strb	r1, [r0, #0]
    for(uint8_t i = 0; i < data_len; i++) {
10009098:	2a00      	cmp	r2, #0
1000909a:	d00e      	beq.n	100090ba <sms_i2c_master_write+0x32>
1000909c:	2000      	movs	r0, #0
1000909e:	1c41      	adds	r1, r0, #1
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
100090a0:	5c18      	ldrb	r0, [r3, r0]
100090a2:	6865      	ldr	r5, [r4, #4]
100090a4:	5468      	strb	r0, [r5, r1]
100090a6:	0008      	movs	r0, r1
    //DBG_LOG_DEV("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    for(uint8_t i = 0; i < data_len; i++) {
100090a8:	b2c9      	uxtb	r1, r1
100090aa:	428a      	cmp	r2, r1
100090ac:	d8f7      	bhi.n	1000909e <sms_i2c_master_write+0x16>
100090ae:	e004      	b.n	100090ba <sms_i2c_master_write+0x32>
100090b0:	3c01      	subs	r4, #1
100090b2:	b2a4      	uxth	r4, r4
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
        //DBG_LOG_CONT_DEV("0x%02x ", i2c_wpacket.data[i+1]);
    }
    while (i2c_master_write_packet_wait(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
        /* Increment timeout counter and check if timed out. */
        if (timeout++ >= I2C_TIMEOUT) {
100090b4:	2c00      	cmp	r4, #0
100090b6:	d104      	bne.n	100090c2 <sms_i2c_master_write+0x3a>
100090b8:	e009      	b.n	100090ce <sms_i2c_master_write+0x46>
    //DBG_LOG_DEV("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    for(uint8_t i = 0; i < data_len; i++) {
100090ba:	4c07      	ldr	r4, [pc, #28]	; (100090d8 <sms_i2c_master_write+0x50>)
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
        //DBG_LOG_CONT_DEV("0x%02x ", i2c_wpacket.data[i+1]);
    }
    while (i2c_master_write_packet_wait(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
100090bc:	4e05      	ldr	r6, [pc, #20]	; (100090d4 <sms_i2c_master_write+0x4c>)
100090be:	4d07      	ldr	r5, [pc, #28]	; (100090dc <sms_i2c_master_write+0x54>)
100090c0:	4f07      	ldr	r7, [pc, #28]	; (100090e0 <sms_i2c_master_write+0x58>)
100090c2:	0031      	movs	r1, r6
100090c4:	0028      	movs	r0, r5
100090c6:	47b8      	blx	r7
100090c8:	2800      	cmp	r0, #0
100090ca:	d1f1      	bne.n	100090b0 <sms_i2c_master_write+0x28>
100090cc:	e001      	b.n	100090d2 <sms_i2c_master_write+0x4a>
        /* Increment timeout counter and check if timed out. */
        if (timeout++ >= I2C_TIMEOUT) {
            return -1;
100090ce:	2001      	movs	r0, #1
100090d0:	4240      	negs	r0, r0
        }
    }
    return 0;
}
100090d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100090d4:	1001a1a0 	.word	0x1001a1a0
100090d8:	000003e9 	.word	0x000003e9
100090dc:	1001a190 	.word	0x1001a190
100090e0:	100083b5 	.word	0x100083b5

100090e4 <sms_i2c_master_read>:

int sms_i2c_master_read(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t *data)
{
100090e4:	b5f0      	push	{r4, r5, r6, r7, lr}
100090e6:	4647      	mov	r7, r8
100090e8:	b480      	push	{r7}
100090ea:	0017      	movs	r7, r2
100090ec:	4698      	mov	r8, r3
    //DBG_LOG("i2c reading from 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout;
    i2c_wpacket.address = (uint8_t)slave_addr;
100090ee:	b280      	uxth	r0, r0
100090f0:	4b1d      	ldr	r3, [pc, #116]	; (10009168 <sms_i2c_master_read+0x84>)
100090f2:	8018      	strh	r0, [r3, #0]
    i2c_wpacket.data_length = 1;
100090f4:	2201      	movs	r2, #1
100090f6:	805a      	strh	r2, [r3, #2]
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
100090f8:	685b      	ldr	r3, [r3, #4]
100090fa:	7019      	strb	r1, [r3, #0]
    i2c_rpacket.address = (uint8_t)slave_addr;
100090fc:	4b1b      	ldr	r3, [pc, #108]	; (1000916c <sms_i2c_master_read+0x88>)
100090fe:	8018      	strh	r0, [r3, #0]
    i2c_rpacket.data_length = (uint8_t)data_len;
10009100:	805f      	strh	r7, [r3, #2]
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
10009102:	4c1b      	ldr	r4, [pc, #108]	; (10009170 <sms_i2c_master_read+0x8c>)
10009104:	4e18      	ldr	r6, [pc, #96]	; (10009168 <sms_i2c_master_read+0x84>)
10009106:	4d1b      	ldr	r5, [pc, #108]	; (10009174 <sms_i2c_master_read+0x90>)
10009108:	e003      	b.n	10009112 <sms_i2c_master_read+0x2e>
1000910a:	3c01      	subs	r4, #1
1000910c:	b2a4      	uxth	r4, r4
		//DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
1000910e:	2c00      	cmp	r4, #0
10009110:	d01f      	beq.n	10009152 <sms_i2c_master_read+0x6e>
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    i2c_rpacket.address = (uint8_t)slave_addr;
    i2c_rpacket.data_length = (uint8_t)data_len;
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
10009112:	0031      	movs	r1, r6
10009114:	4818      	ldr	r0, [pc, #96]	; (10009178 <sms_i2c_master_read+0x94>)
10009116:	47a8      	blx	r5
10009118:	2800      	cmp	r0, #0
1000911a:	d1f6      	bne.n	1000910a <sms_i2c_master_read+0x26>
1000911c:	4e14      	ldr	r6, [pc, #80]	; (10009170 <sms_i2c_master_read+0x8c>)
            return -1;
        }
    }
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
1000911e:	4d13      	ldr	r5, [pc, #76]	; (1000916c <sms_i2c_master_read+0x88>)
10009120:	4c16      	ldr	r4, [pc, #88]	; (1000917c <sms_i2c_master_read+0x98>)
10009122:	e003      	b.n	1000912c <sms_i2c_master_read+0x48>
10009124:	3e01      	subs	r6, #1
10009126:	b2b6      	uxth	r6, r6
		//DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
10009128:	2e00      	cmp	r6, #0
1000912a:	d015      	beq.n	10009158 <sms_i2c_master_read+0x74>
            return -1;
        }
    }
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
1000912c:	0029      	movs	r1, r5
1000912e:	4812      	ldr	r0, [pc, #72]	; (10009178 <sms_i2c_master_read+0x94>)
10009130:	47a0      	blx	r4
10009132:	2800      	cmp	r0, #0
10009134:	d1f6      	bne.n	10009124 <sms_i2c_master_read+0x40>
		//DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
        }
    }
    for(uint8_t i = 0; i < data_len; i++) {
10009136:	2f00      	cmp	r7, #0
10009138:	d011      	beq.n	1000915e <sms_i2c_master_read+0x7a>
1000913a:	2300      	movs	r3, #0
        data[i] = i2c_rpacket.data[i];
1000913c:	490b      	ldr	r1, [pc, #44]	; (1000916c <sms_i2c_master_read+0x88>)
1000913e:	684a      	ldr	r2, [r1, #4]
10009140:	5cd2      	ldrb	r2, [r2, r3]
10009142:	4640      	mov	r0, r8
10009144:	54c2      	strb	r2, [r0, r3]
10009146:	3301      	adds	r3, #1
		//DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
        }
    }
    for(uint8_t i = 0; i < data_len; i++) {
10009148:	b2da      	uxtb	r2, r3
1000914a:	4297      	cmp	r7, r2
1000914c:	d8f7      	bhi.n	1000913e <sms_i2c_master_read+0x5a>
        data[i] = i2c_rpacket.data[i];
        //DBG_LOG_CONT(" 0x%02x ", data[i]);
    }
    return 0;
1000914e:	2000      	movs	r0, #0
10009150:	e006      	b.n	10009160 <sms_i2c_master_read+0x7c>
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
		//DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
10009152:	2001      	movs	r0, #1
10009154:	4240      	negs	r0, r0
10009156:	e003      	b.n	10009160 <sms_i2c_master_read+0x7c>
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
		//DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
10009158:	2001      	movs	r0, #1
1000915a:	4240      	negs	r0, r0
1000915c:	e000      	b.n	10009160 <sms_i2c_master_read+0x7c>
    }
    for(uint8_t i = 0; i < data_len; i++) {
        data[i] = i2c_rpacket.data[i];
        //DBG_LOG_CONT(" 0x%02x ", data[i]);
    }
    return 0;
1000915e:	2000      	movs	r0, #0
10009160:	bc04      	pop	{r2}
10009162:	4690      	mov	r8, r2
10009164:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009166:	46c0      	nop			; (mov r8, r8)
10009168:	1001a1a0 	.word	0x1001a1a0
1000916c:	1001a184 	.word	0x1001a184
10009170:	000003e9 	.word	0x000003e9
10009174:	100083d9 	.word	0x100083d9
10009178:	1001a190 	.word	0x1001a190
1000917c:	10008391 	.word	0x10008391

10009180 <sms_imu_interrupt_callback>:
	gpio_disable_callback(SMS_IMU_DRDY_PIN);
	imu_device.interrupt.enabled = false;
}
/* IMU DRDY callback function */
void sms_imu_interrupt_callback(void)
{
10009180:	b510      	push	{r4, lr}
	if(imu_device.interrupt.enabled) {
10009182:	2384      	movs	r3, #132	; 0x84
10009184:	4a06      	ldr	r2, [pc, #24]	; (100091a0 <sms_imu_interrupt_callback+0x20>)
10009186:	5cd3      	ldrb	r3, [r2, r3]
10009188:	2b00      	cmp	r3, #0
1000918a:	d008      	beq.n	1000919e <sms_imu_interrupt_callback+0x1e>
		imu_device.interrupt.new_gyro = true;
1000918c:	2101      	movs	r1, #1
1000918e:	2385      	movs	r3, #133	; 0x85
10009190:	54d1      	strb	r1, [r2, r3]
		send_plf_int_msg_ind(SMS_IMU_DRDY_PIN, GPIO_CALLBACK_RISING, NULL, 0);
10009192:	2300      	movs	r3, #0
10009194:	2200      	movs	r2, #0
10009196:	3101      	adds	r1, #1
10009198:	201e      	movs	r0, #30
1000919a:	4c02      	ldr	r4, [pc, #8]	; (100091a4 <sms_imu_interrupt_callback+0x24>)
1000919c:	47a0      	blx	r4
	}
}
1000919e:	bd10      	pop	{r4, pc}
100091a0:	1001a1b4 	.word	0x1001a1b4
100091a4:	1000dc45 	.word	0x1000dc45

100091a8 <sms_imu_configure_gpio>:
#include "mpu9250.h"

/* Board setup functions... */
/* GPIO settings */
void sms_imu_configure_gpio(void)
{
100091a8:	b510      	push	{r4, lr}
100091aa:	b082      	sub	sp, #8
	struct gpio_config config_gpio_pin;

	/* Data ready interrupt from IMU */
	gpio_get_config_defaults(&config_gpio_pin);
100091ac:	ac01      	add	r4, sp, #4
100091ae:	0020      	movs	r0, r4
100091b0:	4b0a      	ldr	r3, [pc, #40]	; (100091dc <sms_imu_configure_gpio+0x34>)
100091b2:	4798      	blx	r3
	config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
100091b4:	2300      	movs	r3, #0
100091b6:	7023      	strb	r3, [r4, #0]
	config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
100091b8:	3302      	adds	r3, #2
100091ba:	7063      	strb	r3, [r4, #1]
	config_gpio_pin.aon_wakeup = true;
100091bc:	3b01      	subs	r3, #1
100091be:	70e3      	strb	r3, [r4, #3]
	if(gpio_pin_set_config(SMS_IMU_DRDY_PIN, &config_gpio_pin) != STATUS_OK) {
100091c0:	0021      	movs	r1, r4
100091c2:	201e      	movs	r0, #30
100091c4:	4b06      	ldr	r3, [pc, #24]	; (100091e0 <sms_imu_configure_gpio+0x38>)
100091c6:	4798      	blx	r3
100091c8:	2800      	cmp	r0, #0
100091ca:	d005      	beq.n	100091d8 <sms_imu_configure_gpio+0x30>
		DBG_LOG("[sms_imu_configure_gpio]\tProblem while setting up IMU DRDY pin");
100091cc:	4805      	ldr	r0, [pc, #20]	; (100091e4 <sms_imu_configure_gpio+0x3c>)
100091ce:	4b06      	ldr	r3, [pc, #24]	; (100091e8 <sms_imu_configure_gpio+0x40>)
100091d0:	4798      	blx	r3
100091d2:	4806      	ldr	r0, [pc, #24]	; (100091ec <sms_imu_configure_gpio+0x44>)
100091d4:	4b06      	ldr	r3, [pc, #24]	; (100091f0 <sms_imu_configure_gpio+0x48>)
100091d6:	4798      	blx	r3
	//config_gpio_pin.direction = GPIO_PIN_DIR_OUTPUT;
	//if(!gpio_pin_set_config(SMS_MPU_VCC_PIN, &config_gpio_pin) != STATUS_OK) {
	//DBG_LOG("[sms_imu_configure_gpio]\tProblem while setting up MPU VCC pin");
	//}
	//gpio_pin_set_output_level(SMS_MPU_VCC_PIN, true);
}
100091d8:	b002      	add	sp, #8
100091da:	bd10      	pop	{r4, pc}
100091dc:	1000a9c1 	.word	0x1000a9c1
100091e0:	1000a9d1 	.word	0x1000a9d1
100091e4:	10016a10 	.word	0x10016a10
100091e8:	100159e9 	.word	0x100159e9
100091ec:	10017070 	.word	0x10017070
100091f0:	100158c9 	.word	0x100158c9

100091f4 <sms_imu_register_callbacks>:
/* Register IMU DRDY interrupt callback */
void sms_imu_register_callbacks(void)
{
100091f4:	b510      	push	{r4, lr}
	/* MPU-9250 interrupt callback */
	gpio_register_callback(SMS_IMU_DRDY_PIN, sms_imu_interrupt_callback, GPIO_CALLBACK_RISING);
100091f6:	2202      	movs	r2, #2
100091f8:	4902      	ldr	r1, [pc, #8]	; (10009204 <sms_imu_register_callbacks+0x10>)
100091fa:	201e      	movs	r0, #30
100091fc:	4b02      	ldr	r3, [pc, #8]	; (10009208 <sms_imu_register_callbacks+0x14>)
100091fe:	4798      	blx	r3
}
10009200:	bd10      	pop	{r4, pc}
10009202:	46c0      	nop			; (mov r8, r8)
10009204:	10009181 	.word	0x10009181
10009208:	1000ae01 	.word	0x1000ae01

1000920c <sms_imu_enable_callback>:
{
	gpio_unregister_callback(SMS_IMU_DRDY_PIN, GPIO_CALLBACK_RISING);
}
/* Enable IMU DRDY interrupt callback */
void sms_imu_enable_callback(void)
{
1000920c:	b510      	push	{r4, lr}
	gpio_enable_callback(SMS_IMU_DRDY_PIN);
1000920e:	201e      	movs	r0, #30
10009210:	4b03      	ldr	r3, [pc, #12]	; (10009220 <sms_imu_enable_callback+0x14>)
10009212:	4798      	blx	r3
	imu_device.interrupt.enabled = true;
10009214:	2101      	movs	r1, #1
10009216:	2384      	movs	r3, #132	; 0x84
10009218:	4a02      	ldr	r2, [pc, #8]	; (10009224 <sms_imu_enable_callback+0x18>)
1000921a:	54d1      	strb	r1, [r2, r3]
}
1000921c:	bd10      	pop	{r4, pc}
1000921e:	46c0      	nop			; (mov r8, r8)
10009220:	1000aed1 	.word	0x1000aed1
10009224:	1001a1b4 	.word	0x1001a1b4

10009228 <sms_imu_disable_callback>:
/* Disable IMU DRDY interrupt callback */
void sms_imu_disable_callback(void)
{
10009228:	b510      	push	{r4, lr}
	gpio_disable_callback(SMS_IMU_DRDY_PIN);
1000922a:	201e      	movs	r0, #30
1000922c:	4b03      	ldr	r3, [pc, #12]	; (1000923c <sms_imu_disable_callback+0x14>)
1000922e:	4798      	blx	r3
	imu_device.interrupt.enabled = false;
10009230:	2100      	movs	r1, #0
10009232:	2384      	movs	r3, #132	; 0x84
10009234:	4a02      	ldr	r2, [pc, #8]	; (10009240 <sms_imu_disable_callback+0x18>)
10009236:	54d1      	strb	r1, [r2, r3]
}
10009238:	bd10      	pop	{r4, pc}
1000923a:	46c0      	nop			; (mov r8, r8)
1000923c:	1000af2d 	.word	0x1000af2d
10009240:	1001a1b4 	.word	0x1001a1b4

10009244 <sms_imu_define_services>:
	}

}
/* BLE service definition */
void sms_imu_define_services(void)
{
10009244:	b510      	push	{r4, lr}
10009246:	b082      	sub	sp, #8
	at_ble_status_t status;
	uint8_t init_value = 0;
10009248:	466b      	mov	r3, sp
1000924a:	1dda      	adds	r2, r3, #7
1000924c:	2300      	movs	r3, #0
1000924e:	7013      	strb	r3, [r2, #0]
	sms_ble_service_init(BLE_SERV_MPU, &imu_device.service_handler, &init_value);
10009250:	4c0e      	ldr	r4, [pc, #56]	; (1000928c <sms_imu_define_services+0x48>)
10009252:	0021      	movs	r1, r4
10009254:	2002      	movs	r0, #2
10009256:	4b0e      	ldr	r3, [pc, #56]	; (10009290 <sms_imu_define_services+0x4c>)
10009258:	4798      	blx	r3
	if((status = sms_ble_primary_service_define(&imu_device.service_handler)) != AT_BLE_SUCCESS) {
1000925a:	0020      	movs	r0, r4
1000925c:	4b0d      	ldr	r3, [pc, #52]	; (10009294 <sms_imu_define_services+0x50>)
1000925e:	4798      	blx	r3
10009260:	1e04      	subs	r4, r0, #0
10009262:	d007      	beq.n	10009274 <sms_imu_define_services+0x30>
		DBG_LOG("[sms_mpu_define_services]\tServices defining failed, reason 0x%x", status);
10009264:	480c      	ldr	r0, [pc, #48]	; (10009298 <sms_imu_define_services+0x54>)
10009266:	4b0d      	ldr	r3, [pc, #52]	; (1000929c <sms_imu_define_services+0x58>)
10009268:	4798      	blx	r3
1000926a:	0021      	movs	r1, r4
1000926c:	480c      	ldr	r0, [pc, #48]	; (100092a0 <sms_imu_define_services+0x5c>)
1000926e:	4b0d      	ldr	r3, [pc, #52]	; (100092a4 <sms_imu_define_services+0x60>)
10009270:	4798      	blx	r3
10009272:	e008      	b.n	10009286 <sms_imu_define_services+0x42>
	}
	else {
		DBG_LOG_DEV("[sms_mpu_define_services]\tServices defined, SMS MPU handle: %d", imu_device.service_handler.serv_handle);
10009274:	4808      	ldr	r0, [pc, #32]	; (10009298 <sms_imu_define_services+0x54>)
10009276:	4b09      	ldr	r3, [pc, #36]	; (1000929c <sms_imu_define_services+0x58>)
10009278:	4798      	blx	r3
1000927a:	239a      	movs	r3, #154	; 0x9a
1000927c:	4a0a      	ldr	r2, [pc, #40]	; (100092a8 <sms_imu_define_services+0x64>)
1000927e:	5ad1      	ldrh	r1, [r2, r3]
10009280:	480a      	ldr	r0, [pc, #40]	; (100092ac <sms_imu_define_services+0x68>)
10009282:	4b08      	ldr	r3, [pc, #32]	; (100092a4 <sms_imu_define_services+0x60>)
10009284:	4798      	blx	r3
	}
}
10009286:	b002      	add	sp, #8
10009288:	bd10      	pop	{r4, pc}
1000928a:	46c0      	nop			; (mov r8, r8)
1000928c:	1001a23c 	.word	0x1001a23c
10009290:	100089d9 	.word	0x100089d9
10009294:	100089b5 	.word	0x100089b5
10009298:	10016a10 	.word	0x10016a10
1000929c:	100159e9 	.word	0x100159e9
100092a0:	100170b0 	.word	0x100170b0
100092a4:	100158c9 	.word	0x100158c9
100092a8:	1001a1b4 	.word	0x1001a1b4
100092ac:	100170f0 	.word	0x100170f0

100092b0 <sms_imu_init_variables>:

/* Initialization functions... */
/* Variables */
void sms_imu_init_variables(void)
{
	imu_device.config.a_scale = AFS_2G;
100092b0:	4b03      	ldr	r3, [pc, #12]	; (100092c0 <sms_imu_init_variables+0x10>)
100092b2:	2200      	movs	r2, #0
100092b4:	701a      	strb	r2, [r3, #0]
	imu_device.config.g_scale = GFS_250DPS;
100092b6:	705a      	strb	r2, [r3, #1]
	imu_device.config.ahrs = false;
100092b8:	2150      	movs	r1, #80	; 0x50
100092ba:	545a      	strb	r2, [r3, r1]
	imu_device.config.init_ok = false;
100092bc:	711a      	strb	r2, [r3, #4]
}
100092be:	4770      	bx	lr
100092c0:	1001a1b4 	.word	0x1001a1b4

100092c4 <writeByte>:
}


/* I2C abstractions to simplify the code */
void writeByte(uint8_t address, uint8_t subAddress, uint8_t data)
{
100092c4:	b510      	push	{r4, lr}
100092c6:	b082      	sub	sp, #8
100092c8:	466b      	mov	r3, sp
100092ca:	3307      	adds	r3, #7
100092cc:	701a      	strb	r2, [r3, #0]
	sms_i2c_master_write(address, subAddress, 1, &data);
100092ce:	2201      	movs	r2, #1
100092d0:	4c01      	ldr	r4, [pc, #4]	; (100092d8 <writeByte+0x14>)
100092d2:	47a0      	blx	r4
}
100092d4:	b002      	add	sp, #8
100092d6:	bd10      	pop	{r4, pc}
100092d8:	10009089 	.word	0x10009089

100092dc <sms_imu_mpu_calibrate>:
	}
	return retVal;
}
/* Calculate biases for gyro and accel and write them into MPU registers */
void sms_imu_mpu_calibrate(float *dest1, float *dest2)
{
100092dc:	b5f0      	push	{r4, r5, r6, r7, lr}
100092de:	465f      	mov	r7, fp
100092e0:	4656      	mov	r6, sl
100092e2:	464d      	mov	r5, r9
100092e4:	4644      	mov	r4, r8
100092e6:	b4f0      	push	{r4, r5, r6, r7}
100092e8:	b08f      	sub	sp, #60	; 0x3c
100092ea:	9003      	str	r0, [sp, #12]
100092ec:	9105      	str	r1, [sp, #20]
	uint16_t ii, packet_count, fifo_count;
	int32_t gyro_bias[3]  = {0, 0, 0};
	int32_t accel_bias[3] = {0, 0, 0};
	
	// reset device
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
100092ee:	2280      	movs	r2, #128	; 0x80
100092f0:	216b      	movs	r1, #107	; 0x6b
100092f2:	2069      	movs	r0, #105	; 0x69
100092f4:	4ccd      	ldr	r4, [pc, #820]	; (1000962c <sms_imu_mpu_calibrate+0x350>)
100092f6:	47a0      	blx	r4
	delay_ms(100);
100092f8:	2064      	movs	r0, #100	; 0x64
100092fa:	4dcd      	ldr	r5, [pc, #820]	; (10009630 <sms_imu_mpu_calibrate+0x354>)
100092fc:	47a8      	blx	r5
	
	// get stable time source; Auto select clock source to be PLL gyroscope reference if ready
	// else use the internal oscillator, bits 2:0 = 001
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);
100092fe:	2201      	movs	r2, #1
10009300:	216b      	movs	r1, #107	; 0x6b
10009302:	2069      	movs	r0, #105	; 0x69
10009304:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, PWR_MGMT_2, 0x00);
10009306:	2200      	movs	r2, #0
10009308:	216c      	movs	r1, #108	; 0x6c
1000930a:	2069      	movs	r0, #105	; 0x69
1000930c:	47a0      	blx	r4
	delay_ms(200);
1000930e:	20c8      	movs	r0, #200	; 0xc8
10009310:	47a8      	blx	r5

	// Configure device for bias calculation
	writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x00);   // Disable all interrupts
10009312:	2200      	movs	r2, #0
10009314:	2138      	movs	r1, #56	; 0x38
10009316:	2069      	movs	r0, #105	; 0x69
10009318:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);      // Disable FIFO
1000931a:	2200      	movs	r2, #0
1000931c:	2123      	movs	r1, #35	; 0x23
1000931e:	2069      	movs	r0, #105	; 0x69
10009320:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x00);   // Turn on internal clock source
10009322:	2200      	movs	r2, #0
10009324:	216b      	movs	r1, #107	; 0x6b
10009326:	2069      	movs	r0, #105	; 0x69
10009328:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, I2C_MST_CTRL, 0x00); // Disable I2C master
1000932a:	2200      	movs	r2, #0
1000932c:	2124      	movs	r1, #36	; 0x24
1000932e:	2069      	movs	r0, #105	; 0x69
10009330:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, USER_CTRL, 0x00);    // Disable FIFO and I2C master modes
10009332:	2200      	movs	r2, #0
10009334:	216a      	movs	r1, #106	; 0x6a
10009336:	2069      	movs	r0, #105	; 0x69
10009338:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, USER_CTRL, 0x0C);    // Reset FIFO and DMP
1000933a:	220c      	movs	r2, #12
1000933c:	216a      	movs	r1, #106	; 0x6a
1000933e:	2069      	movs	r0, #105	; 0x69
10009340:	47a0      	blx	r4
	delay_ms(15);
10009342:	200f      	movs	r0, #15
10009344:	47a8      	blx	r5
	
	// Configure MPU9250 gyro and accelerometer for bias calculation
	writeByte(MPU9250_ADDRESS, CONFIG, 0x01);      // Set low-pass filter to 188 Hz
10009346:	2201      	movs	r2, #1
10009348:	211a      	movs	r1, #26
1000934a:	2069      	movs	r0, #105	; 0x69
1000934c:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x00);  // Set sample rate to 1 kHz
1000934e:	2200      	movs	r2, #0
10009350:	2119      	movs	r1, #25
10009352:	2069      	movs	r0, #105	; 0x69
10009354:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, GYRO_CONFIG, 0x00);  // Set gyro full-scale to 250 degrees per second, maximum sensitivity
10009356:	2200      	movs	r2, #0
10009358:	211b      	movs	r1, #27
1000935a:	2069      	movs	r0, #105	; 0x69
1000935c:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0x00); // Set accelerometer full-scale to 2 g, maximum sensitivity
1000935e:	2200      	movs	r2, #0
10009360:	211c      	movs	r1, #28
10009362:	2069      	movs	r0, #105	; 0x69
10009364:	47a0      	blx	r4
	
	uint16_t  gyrosensitivity  = 131;   // = 131 LSB/degrees/sec
	uint16_t  accelsensitivity = 16384;  // = 16384 LSB/g

	// Configure FIFO to capture accelerometer and gyro data for bias calculation
	writeByte(MPU9250_ADDRESS, USER_CTRL, 0x40);   // Enable FIFO
10009366:	2240      	movs	r2, #64	; 0x40
10009368:	216a      	movs	r1, #106	; 0x6a
1000936a:	2069      	movs	r0, #105	; 0x69
1000936c:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO  (max size 512 bytes in MPU-9150)
1000936e:	2278      	movs	r2, #120	; 0x78
10009370:	2123      	movs	r1, #35	; 0x23
10009372:	2069      	movs	r0, #105	; 0x69
10009374:	47a0      	blx	r4
	delay_ms(40); // accumulate 40 samples in 40 milliseconds = 480 bytes
10009376:	2028      	movs	r0, #40	; 0x28
10009378:	47a8      	blx	r5

	// At end of sample accumulation, turn off FIFO sensor read
	writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
1000937a:	2200      	movs	r2, #0
1000937c:	2123      	movs	r1, #35	; 0x23
1000937e:	2069      	movs	r0, #105	; 0x69
10009380:	47a0      	blx	r4
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
10009382:	ac0b      	add	r4, sp, #44	; 0x2c
10009384:	0023      	movs	r3, r4
10009386:	2202      	movs	r2, #2
10009388:	2172      	movs	r1, #114	; 0x72
1000938a:	2069      	movs	r0, #105	; 0x69
1000938c:	4da9      	ldr	r5, [pc, #676]	; (10009634 <sms_imu_mpu_calibrate+0x358>)
1000938e:	47a8      	blx	r5

	// At end of sample accumulation, turn off FIFO sensor read
	writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
	readBytes(MPU9250_ADDRESS, FIFO_COUNTH, 2, data); // read FIFO sample count
	fifo_count = ((uint16_t)data[0] << 8) | data[1];
	packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
10009390:	7820      	ldrb	r0, [r4, #0]
10009392:	0200      	lsls	r0, r0, #8
10009394:	7863      	ldrb	r3, [r4, #1]
10009396:	4318      	orrs	r0, r3
10009398:	210c      	movs	r1, #12
1000939a:	4ba7      	ldr	r3, [pc, #668]	; (10009638 <sms_imu_mpu_calibrate+0x35c>)
1000939c:	4798      	blx	r3
1000939e:	b283      	uxth	r3, r0
100093a0:	9302      	str	r3, [sp, #8]
	
	for (ii = 0; ii < packet_count; ii++) {
100093a2:	2b00      	cmp	r3, #0
100093a4:	d042      	beq.n	1000942c <sms_imu_mpu_calibrate+0x150>
100093a6:	2300      	movs	r3, #0
100093a8:	4698      	mov	r8, r3
100093aa:	2700      	movs	r7, #0
100093ac:	469b      	mov	fp, r3
100093ae:	469a      	mov	sl, r3
100093b0:	4699      	mov	r9, r3
100093b2:	2500      	movs	r5, #0
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
100093b4:	ac0b      	add	r4, sp, #44	; 0x2c
100093b6:	9301      	str	r3, [sp, #4]
100093b8:	0023      	movs	r3, r4
100093ba:	220c      	movs	r2, #12
100093bc:	2174      	movs	r1, #116	; 0x74
100093be:	2069      	movs	r0, #105	; 0x69
100093c0:	4e9c      	ldr	r6, [pc, #624]	; (10009634 <sms_imu_mpu_calibrate+0x358>)
100093c2:	47b0      	blx	r6
		accel_temp[2] = (int16_t) (((int16_t)data[4] << 8) | data[5]  ) ;
		gyro_temp[0]  = (int16_t) (((int16_t)data[6] << 8) | data[7]  ) ;
		gyro_temp[1]  = (int16_t) (((int16_t)data[8] << 8) | data[9]  ) ;
		gyro_temp[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]) ;
		
		accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
100093c4:	7823      	ldrb	r3, [r4, #0]
100093c6:	021b      	lsls	r3, r3, #8
100093c8:	7862      	ldrb	r2, [r4, #1]
100093ca:	4313      	orrs	r3, r2
100093cc:	b21b      	sxth	r3, r3
100093ce:	9a01      	ldr	r2, [sp, #4]
100093d0:	4694      	mov	ip, r2
100093d2:	449c      	add	ip, r3
100093d4:	4663      	mov	r3, ip
100093d6:	9301      	str	r3, [sp, #4]
		accel_bias[1] += (int32_t) accel_temp[1];
100093d8:	78a3      	ldrb	r3, [r4, #2]
100093da:	021b      	lsls	r3, r3, #8
100093dc:	78e2      	ldrb	r2, [r4, #3]
100093de:	4313      	orrs	r3, r2
100093e0:	b21b      	sxth	r3, r3
100093e2:	18ff      	adds	r7, r7, r3
		accel_bias[2] += (int32_t) accel_temp[2];
100093e4:	7923      	ldrb	r3, [r4, #4]
100093e6:	021b      	lsls	r3, r3, #8
100093e8:	7962      	ldrb	r2, [r4, #5]
100093ea:	4313      	orrs	r3, r2
100093ec:	b21b      	sxth	r3, r3
100093ee:	4499      	add	r9, r3
		gyro_bias[0]  += (int32_t) gyro_temp[0];
100093f0:	79a3      	ldrb	r3, [r4, #6]
100093f2:	021b      	lsls	r3, r3, #8
100093f4:	79e2      	ldrb	r2, [r4, #7]
100093f6:	4313      	orrs	r3, r2
100093f8:	b21b      	sxth	r3, r3
100093fa:	4498      	add	r8, r3
		gyro_bias[1]  += (int32_t) gyro_temp[1];
100093fc:	7a23      	ldrb	r3, [r4, #8]
100093fe:	021b      	lsls	r3, r3, #8
10009400:	7a62      	ldrb	r2, [r4, #9]
10009402:	4313      	orrs	r3, r2
10009404:	b21b      	sxth	r3, r3
10009406:	449a      	add	sl, r3
		gyro_bias[2]  += (int32_t) gyro_temp[2];
10009408:	7aa3      	ldrb	r3, [r4, #10]
1000940a:	021b      	lsls	r3, r3, #8
1000940c:	7ae2      	ldrb	r2, [r4, #11]
1000940e:	4313      	orrs	r3, r2
10009410:	b21b      	sxth	r3, r3
10009412:	449b      	add	fp, r3
	writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
	readBytes(MPU9250_ADDRESS, FIFO_COUNTH, 2, data); // read FIFO sample count
	fifo_count = ((uint16_t)data[0] << 8) | data[1];
	packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
	
	for (ii = 0; ii < packet_count; ii++) {
10009414:	3501      	adds	r5, #1
10009416:	b2ad      	uxth	r5, r5
10009418:	9b02      	ldr	r3, [sp, #8]
1000941a:	42ab      	cmp	r3, r5
1000941c:	d1cc      	bne.n	100093b8 <sms_imu_mpu_calibrate+0xdc>
1000941e:	4653      	mov	r3, sl
10009420:	46ba      	mov	sl, r7
10009422:	465a      	mov	r2, fp
10009424:	46e3      	mov	fp, ip
10009426:	0016      	movs	r6, r2
10009428:	001f      	movs	r7, r3
1000942a:	e006      	b.n	1000943a <sms_imu_mpu_calibrate+0x15e>
/* Calculate biases for gyro and accel and write them into MPU registers */
void sms_imu_mpu_calibrate(float *dest1, float *dest2)
{
	uint8_t data[12]; // data array to hold accelerometer and gyro x, y, z, data
	uint16_t ii, packet_count, fifo_count;
	int32_t gyro_bias[3]  = {0, 0, 0};
1000942c:	2300      	movs	r3, #0
1000942e:	4698      	mov	r8, r3
10009430:	2700      	movs	r7, #0
10009432:	2600      	movs	r6, #0
	int32_t accel_bias[3] = {0, 0, 0};
10009434:	469b      	mov	fp, r3
10009436:	469a      	mov	sl, r3
10009438:	4699      	mov	r9, r3
		gyro_bias[0]  += (int32_t) gyro_temp[0];
		gyro_bias[1]  += (int32_t) gyro_temp[1];
		gyro_bias[2]  += (int32_t) gyro_temp[2];
		
	}
	accel_bias[0] /= (int32_t) packet_count; // Normalize sums to get average count biases
1000943a:	4c80      	ldr	r4, [pc, #512]	; (1000963c <sms_imu_mpu_calibrate+0x360>)
1000943c:	9902      	ldr	r1, [sp, #8]
1000943e:	4658      	mov	r0, fp
10009440:	47a0      	blx	r4
10009442:	0005      	movs	r5, r0
	accel_bias[1] /= (int32_t) packet_count;
10009444:	9b02      	ldr	r3, [sp, #8]
10009446:	469b      	mov	fp, r3
10009448:	0019      	movs	r1, r3
1000944a:	4650      	mov	r0, sl
1000944c:	47a0      	blx	r4
1000944e:	4682      	mov	sl, r0
	accel_bias[2] /= (int32_t) packet_count;
10009450:	4659      	mov	r1, fp
10009452:	4648      	mov	r0, r9
10009454:	47a0      	blx	r4
10009456:	4681      	mov	r9, r0
	gyro_bias[0]  /= (int32_t) packet_count;
10009458:	4659      	mov	r1, fp
1000945a:	4640      	mov	r0, r8
1000945c:	47a0      	blx	r4
1000945e:	9001      	str	r0, [sp, #4]
	gyro_bias[1]  /= (int32_t) packet_count;
10009460:	4659      	mov	r1, fp
10009462:	0038      	movs	r0, r7
10009464:	47a0      	blx	r4
10009466:	9002      	str	r0, [sp, #8]
	gyro_bias[2]  /= (int32_t) packet_count;
10009468:	4659      	mov	r1, fp
1000946a:	0030      	movs	r0, r6
1000946c:	47a0      	blx	r4
1000946e:	9004      	str	r0, [sp, #16]
	
	if(accel_bias[2] > 0L) {
10009470:	464b      	mov	r3, r9
10009472:	2b00      	cmp	r3, #0
10009474:	dd03      	ble.n	1000947e <sms_imu_mpu_calibrate+0x1a2>
		accel_bias[2] -= (int32_t) accelsensitivity;
10009476:	4b72      	ldr	r3, [pc, #456]	; (10009640 <sms_imu_mpu_calibrate+0x364>)
10009478:	469c      	mov	ip, r3
1000947a:	44e1      	add	r9, ip
1000947c:	e003      	b.n	10009486 <sms_imu_mpu_calibrate+0x1aa>
	}  // Remove gravity from the z-axis accelerometer bias calculation
	else {
		accel_bias[2] += (int32_t) accelsensitivity;
1000947e:	2380      	movs	r3, #128	; 0x80
10009480:	01db      	lsls	r3, r3, #7
10009482:	469c      	mov	ip, r3
10009484:	44e1      	add	r9, ip
	}
	
	// Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
	data[0] = (-gyro_bias[0]/4  >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
10009486:	9b01      	ldr	r3, [sp, #4]
10009488:	4259      	negs	r1, r3
1000948a:	17ca      	asrs	r2, r1, #31
1000948c:	2303      	movs	r3, #3
1000948e:	401a      	ands	r2, r3
10009490:	1852      	adds	r2, r2, r1
10009492:	1091      	asrs	r1, r2, #2
10009494:	1292      	asrs	r2, r2, #10
10009496:	b2d2      	uxtb	r2, r2
10009498:	ac0b      	add	r4, sp, #44	; 0x2c
1000949a:	7022      	strb	r2, [r4, #0]
	data[1] = (-gyro_bias[0]/4)       & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
1000949c:	7061      	strb	r1, [r4, #1]
	data[2] = (-gyro_bias[1]/4  >> 8) & 0xFF;
1000949e:	9902      	ldr	r1, [sp, #8]
100094a0:	4248      	negs	r0, r1
100094a2:	17c1      	asrs	r1, r0, #31
100094a4:	4019      	ands	r1, r3
100094a6:	1809      	adds	r1, r1, r0
100094a8:	1088      	asrs	r0, r1, #2
100094aa:	1289      	asrs	r1, r1, #10
100094ac:	70a1      	strb	r1, [r4, #2]
	data[3] = (-gyro_bias[1]/4)       & 0xFF;
100094ae:	70e0      	strb	r0, [r4, #3]
	data[4] = (-gyro_bias[2]/4  >> 8) & 0xFF;
100094b0:	9e04      	ldr	r6, [sp, #16]
100094b2:	4271      	negs	r1, r6
100094b4:	17c8      	asrs	r0, r1, #31
100094b6:	4003      	ands	r3, r0
100094b8:	185b      	adds	r3, r3, r1
100094ba:	1099      	asrs	r1, r3, #2
100094bc:	129b      	asrs	r3, r3, #10
100094be:	7123      	strb	r3, [r4, #4]
	data[5] = (-gyro_bias[2]/4)       & 0xFF;
100094c0:	7161      	strb	r1, [r4, #5]
	
	// Push gyro biases to hardware registers
	writeByte(MPU9250_ADDRESS, XG_OFFSET_H, data[0]);
100094c2:	2113      	movs	r1, #19
100094c4:	2069      	movs	r0, #105	; 0x69
100094c6:	4e59      	ldr	r6, [pc, #356]	; (1000962c <sms_imu_mpu_calibrate+0x350>)
100094c8:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, XG_OFFSET_L, data[1]);
100094ca:	7862      	ldrb	r2, [r4, #1]
100094cc:	2114      	movs	r1, #20
100094ce:	2069      	movs	r0, #105	; 0x69
100094d0:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, YG_OFFSET_H, data[2]);
100094d2:	78a2      	ldrb	r2, [r4, #2]
100094d4:	2115      	movs	r1, #21
100094d6:	2069      	movs	r0, #105	; 0x69
100094d8:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, YG_OFFSET_L, data[3]);
100094da:	78e2      	ldrb	r2, [r4, #3]
100094dc:	2116      	movs	r1, #22
100094de:	2069      	movs	r0, #105	; 0x69
100094e0:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, ZG_OFFSET_H, data[4]);
100094e2:	7922      	ldrb	r2, [r4, #4]
100094e4:	2117      	movs	r1, #23
100094e6:	2069      	movs	r0, #105	; 0x69
100094e8:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, ZG_OFFSET_L, data[5]);
100094ea:	7962      	ldrb	r2, [r4, #5]
100094ec:	2118      	movs	r1, #24
100094ee:	2069      	movs	r0, #105	; 0x69
100094f0:	47b0      	blx	r6
	
	// Output scaled gyro biases for display in the main program
	dest1[0] = (float)((float)gyro_bias[0]/(float)gyrosensitivity);
100094f2:	4f54      	ldr	r7, [pc, #336]	; (10009644 <sms_imu_mpu_calibrate+0x368>)
100094f4:	9801      	ldr	r0, [sp, #4]
100094f6:	47b8      	blx	r7
100094f8:	4e53      	ldr	r6, [pc, #332]	; (10009648 <sms_imu_mpu_calibrate+0x36c>)
100094fa:	4954      	ldr	r1, [pc, #336]	; (1000964c <sms_imu_mpu_calibrate+0x370>)
100094fc:	47b0      	blx	r6
100094fe:	9b03      	ldr	r3, [sp, #12]
10009500:	6018      	str	r0, [r3, #0]
	dest1[1] = (float)((float)gyro_bias[1]/(float)gyrosensitivity);
10009502:	9802      	ldr	r0, [sp, #8]
10009504:	47b8      	blx	r7
10009506:	4951      	ldr	r1, [pc, #324]	; (1000964c <sms_imu_mpu_calibrate+0x370>)
10009508:	47b0      	blx	r6
1000950a:	9b03      	ldr	r3, [sp, #12]
1000950c:	6058      	str	r0, [r3, #4]
	dest1[2] = (float)((float)gyro_bias[2]/(float)gyrosensitivity);
1000950e:	9804      	ldr	r0, [sp, #16]
10009510:	47b8      	blx	r7
10009512:	494e      	ldr	r1, [pc, #312]	; (1000964c <sms_imu_mpu_calibrate+0x370>)
10009514:	47b0      	blx	r6
10009516:	9b03      	ldr	r3, [sp, #12]
10009518:	6098      	str	r0, [r3, #8]
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
1000951a:	0023      	movs	r3, r4
1000951c:	2202      	movs	r2, #2
1000951e:	2177      	movs	r1, #119	; 0x77
10009520:	2069      	movs	r0, #105	; 0x69
10009522:	4e44      	ldr	r6, [pc, #272]	; (10009634 <sms_imu_mpu_calibrate+0x358>)
10009524:	46b0      	mov	r8, r6
10009526:	47b0      	blx	r6
	// compensation calculations. Accelerometer bias registers expect bias input as 2048 LSB per g, so that
	// the accelerometer biases calculated above must be divided by 8.

	int32_t accel_bias_reg[3] = {0, 0, 0}; // A place to hold the factory accelerometer trim biases
	readBytes(MPU9250_ADDRESS, XA_OFFSET_H, 2, data); // Read factory accelerometer trim values
	accel_bias_reg[0] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
10009528:	7827      	ldrb	r7, [r4, #0]
1000952a:	023f      	lsls	r7, r7, #8
1000952c:	7863      	ldrb	r3, [r4, #1]
1000952e:	431f      	orrs	r7, r3
10009530:	9708      	str	r7, [sp, #32]
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
10009532:	0023      	movs	r3, r4
10009534:	2202      	movs	r2, #2
10009536:	217a      	movs	r1, #122	; 0x7a
10009538:	2069      	movs	r0, #105	; 0x69
1000953a:	47b0      	blx	r6

	int32_t accel_bias_reg[3] = {0, 0, 0}; // A place to hold the factory accelerometer trim biases
	readBytes(MPU9250_ADDRESS, XA_OFFSET_H, 2, data); // Read factory accelerometer trim values
	accel_bias_reg[0] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
	readBytes(MPU9250_ADDRESS, YA_OFFSET_H, 2, data);
	accel_bias_reg[1] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
1000953c:	7826      	ldrb	r6, [r4, #0]
1000953e:	0236      	lsls	r6, r6, #8
10009540:	7863      	ldrb	r3, [r4, #1]
10009542:	431e      	orrs	r6, r3
10009544:	9609      	str	r6, [sp, #36]	; 0x24
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
10009546:	0023      	movs	r3, r4
10009548:	2202      	movs	r2, #2
1000954a:	217d      	movs	r1, #125	; 0x7d
1000954c:	2069      	movs	r0, #105	; 0x69
1000954e:	47c0      	blx	r8
	readBytes(MPU9250_ADDRESS, XA_OFFSET_H, 2, data); // Read factory accelerometer trim values
	accel_bias_reg[0] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
	readBytes(MPU9250_ADDRESS, YA_OFFSET_H, 2, data);
	accel_bias_reg[1] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
	readBytes(MPU9250_ADDRESS, ZA_OFFSET_H, 2, data);
	accel_bias_reg[2] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
10009550:	7823      	ldrb	r3, [r4, #0]
10009552:	021b      	lsls	r3, r3, #8
10009554:	7861      	ldrb	r1, [r4, #1]
10009556:	4319      	orrs	r1, r3
10009558:	910a      	str	r1, [sp, #40]	; 0x28
	
	uint32_t mask = 1uL; // Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
	uint8_t mask_bit[3] = {0, 0, 0}; // Define array to hold mask bit for each accelerometer bias axis
1000955a:	ab07      	add	r3, sp, #28
1000955c:	2200      	movs	r2, #0
1000955e:	701a      	strb	r2, [r3, #0]
10009560:	705a      	strb	r2, [r3, #1]
10009562:	709a      	strb	r2, [r3, #2]
10009564:	2300      	movs	r3, #0
	
	for(ii = 0; ii < 3; ii++) {
		if((accel_bias_reg[ii] & mask)) mask_bit[ii] = 0x01; // If temperature compensation bit is set, record that fact in mask_bit
10009566:	2401      	movs	r4, #1
10009568:	009a      	lsls	r2, r3, #2
1000956a:	a808      	add	r0, sp, #32
1000956c:	5812      	ldr	r2, [r2, r0]
1000956e:	4222      	tst	r2, r4
10009570:	d001      	beq.n	10009576 <sms_imu_mpu_calibrate+0x29a>
10009572:	aa07      	add	r2, sp, #28
10009574:	549c      	strb	r4, [r3, r2]
10009576:	3301      	adds	r3, #1
	accel_bias_reg[2] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
	
	uint32_t mask = 1uL; // Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
	uint8_t mask_bit[3] = {0, 0, 0}; // Define array to hold mask bit for each accelerometer bias axis
	
	for(ii = 0; ii < 3; ii++) {
10009578:	2b03      	cmp	r3, #3
1000957a:	d1f5      	bne.n	10009568 <sms_imu_mpu_calibrate+0x28c>
		if((accel_bias_reg[ii] & mask)) mask_bit[ii] = 0x01; // If temperature compensation bit is set, record that fact in mask_bit
	}
	
	// Construct total accelerometer bias, including calculated average accelerometer bias from above
	accel_bias_reg[0] -= (accel_bias[0]/8); // Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
1000957c:	17ea      	asrs	r2, r5, #31
1000957e:	3304      	adds	r3, #4
10009580:	401a      	ands	r2, r3
10009582:	1952      	adds	r2, r2, r5
10009584:	10d2      	asrs	r2, r2, #3
10009586:	1abf      	subs	r7, r7, r2
	accel_bias_reg[1] -= (accel_bias[1]/8);
10009588:	4652      	mov	r2, sl
1000958a:	17d0      	asrs	r0, r2, #31
1000958c:	4018      	ands	r0, r3
1000958e:	4450      	add	r0, sl
10009590:	10c0      	asrs	r0, r0, #3
10009592:	1a36      	subs	r6, r6, r0
	accel_bias_reg[2] -= (accel_bias[2]/8);
10009594:	464a      	mov	r2, r9
10009596:	17d2      	asrs	r2, r2, #31
10009598:	4013      	ands	r3, r2
1000959a:	444b      	add	r3, r9
1000959c:	10da      	asrs	r2, r3, #3
1000959e:	1a8b      	subs	r3, r1, r2
	
	data[0] = (accel_bias_reg[0] >> 8) & 0xFF;
100095a0:	123a      	asrs	r2, r7, #8
100095a2:	b2d2      	uxtb	r2, r2
100095a4:	ac0b      	add	r4, sp, #44	; 0x2c
100095a6:	7022      	strb	r2, [r4, #0]
	data[1] = (accel_bias_reg[0])      & 0xFF;
	data[1] = data[1] | mask_bit[0]; // preserve temperature compensation bit when writing back to accelerometer bias registers
100095a8:	a907      	add	r1, sp, #28
100095aa:	7808      	ldrb	r0, [r1, #0]
100095ac:	4307      	orrs	r7, r0
100095ae:	7067      	strb	r7, [r4, #1]
	data[2] = (accel_bias_reg[1] >> 8) & 0xFF;
100095b0:	1230      	asrs	r0, r6, #8
100095b2:	70a0      	strb	r0, [r4, #2]
	data[3] = (accel_bias_reg[1])      & 0xFF;
	data[3] = data[3] | mask_bit[1]; // preserve temperature compensation bit when writing back to accelerometer bias registers
100095b4:	7848      	ldrb	r0, [r1, #1]
100095b6:	4306      	orrs	r6, r0
100095b8:	70e6      	strb	r6, [r4, #3]
	data[4] = (accel_bias_reg[2] >> 8) & 0xFF;
100095ba:	1218      	asrs	r0, r3, #8
100095bc:	7120      	strb	r0, [r4, #4]
	data[5] = (accel_bias_reg[2])      & 0xFF;
	data[5] = data[5] | mask_bit[2]; // preserve temperature compensation bit when writing back to accelerometer bias registers
100095be:	7889      	ldrb	r1, [r1, #2]
100095c0:	430b      	orrs	r3, r1
100095c2:	7163      	strb	r3, [r4, #5]
	
	// Apparently this is not working for the acceleration biases in the MPU-9250
	// Are we handling the temperature correction bit properly?
	// Push accelerometer biases to hardware registers
	writeByte(MPU9250_ADDRESS, XA_OFFSET_H, data[0]);
100095c4:	2177      	movs	r1, #119	; 0x77
100095c6:	2069      	movs	r0, #105	; 0x69
100095c8:	4e18      	ldr	r6, [pc, #96]	; (1000962c <sms_imu_mpu_calibrate+0x350>)
100095ca:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, XA_OFFSET_L, data[1]);
100095cc:	7862      	ldrb	r2, [r4, #1]
100095ce:	2178      	movs	r1, #120	; 0x78
100095d0:	2069      	movs	r0, #105	; 0x69
100095d2:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, YA_OFFSET_H, data[2]);
100095d4:	78a2      	ldrb	r2, [r4, #2]
100095d6:	217a      	movs	r1, #122	; 0x7a
100095d8:	2069      	movs	r0, #105	; 0x69
100095da:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, YA_OFFSET_L, data[3]);
100095dc:	78e2      	ldrb	r2, [r4, #3]
100095de:	217b      	movs	r1, #123	; 0x7b
100095e0:	2069      	movs	r0, #105	; 0x69
100095e2:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, ZA_OFFSET_H, data[4]);
100095e4:	7922      	ldrb	r2, [r4, #4]
100095e6:	217d      	movs	r1, #125	; 0x7d
100095e8:	2069      	movs	r0, #105	; 0x69
100095ea:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, ZA_OFFSET_L, data[5]);
100095ec:	7962      	ldrb	r2, [r4, #5]
100095ee:	217e      	movs	r1, #126	; 0x7e
100095f0:	2069      	movs	r0, #105	; 0x69
100095f2:	47b0      	blx	r6

	// Output scaled accelerometer biases for display in the main program
	dest2[0] = (float)accel_bias[0]/(float)accelsensitivity;
100095f4:	4e13      	ldr	r6, [pc, #76]	; (10009644 <sms_imu_mpu_calibrate+0x368>)
100095f6:	0028      	movs	r0, r5
100095f8:	47b0      	blx	r6
100095fa:	4c15      	ldr	r4, [pc, #84]	; (10009650 <sms_imu_mpu_calibrate+0x374>)
100095fc:	21e2      	movs	r1, #226	; 0xe2
100095fe:	0589      	lsls	r1, r1, #22
10009600:	47a0      	blx	r4
10009602:	9d05      	ldr	r5, [sp, #20]
10009604:	6028      	str	r0, [r5, #0]
	dest2[1] = (float)accel_bias[1]/(float)accelsensitivity;
10009606:	4650      	mov	r0, sl
10009608:	47b0      	blx	r6
1000960a:	21e2      	movs	r1, #226	; 0xe2
1000960c:	0589      	lsls	r1, r1, #22
1000960e:	47a0      	blx	r4
10009610:	6068      	str	r0, [r5, #4]
	dest2[2] = (float)accel_bias[2]/(float)accelsensitivity;
10009612:	4648      	mov	r0, r9
10009614:	47b0      	blx	r6
10009616:	21e2      	movs	r1, #226	; 0xe2
10009618:	0589      	lsls	r1, r1, #22
1000961a:	47a0      	blx	r4
1000961c:	60a8      	str	r0, [r5, #8]
	//uint32_t p2 = dest1[2] * 10000;
	//uint32_t p3 = dest2[0] * 10000;
	//uint32_t p4 = dest2[1] * 10000;
	//uint32_t p5 = dest2[2] * 10000;
	//DBG_LOG("destX: %ld %ld %ld / %ld %ld %ld", p0, p1, p2, p3, p4, p5);
}
1000961e:	b00f      	add	sp, #60	; 0x3c
10009620:	bc3c      	pop	{r2, r3, r4, r5}
10009622:	4690      	mov	r8, r2
10009624:	4699      	mov	r9, r3
10009626:	46a2      	mov	sl, r4
10009628:	46ab      	mov	fp, r5
1000962a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000962c:	100092c5 	.word	0x100092c5
10009630:	1000a345 	.word	0x1000a345
10009634:	100090e5 	.word	0x100090e5
10009638:	10012a55 	.word	0x10012a55
1000963c:	10012b69 	.word	0x10012b69
10009640:	ffffc000 	.word	0xffffc000
10009644:	10013801 	.word	0x10013801
10009648:	10012ef5 	.word	0x10012ef5
1000964c:	43030000 	.word	0x43030000
10009650:	10013289 	.word	0x10013289

10009654 <sms_imu_comp_initialize>:
	writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x01);  // Enable data ready (bit 0) interrupt
	delay_ms(100);
}
/* Compass */
void sms_imu_comp_initialize(float *destination)
{
10009654:	b5f0      	push	{r4, r5, r6, r7, lr}
10009656:	465f      	mov	r7, fp
10009658:	4656      	mov	r6, sl
1000965a:	464d      	mov	r5, r9
1000965c:	4644      	mov	r4, r8
1000965e:	b4f0      	push	{r4, r5, r6, r7}
10009660:	b083      	sub	sp, #12
10009662:	4680      	mov	r8, r0
	imu_device.config.m_scale = MFS_16BITS;	// Choose either 14-bit or 16-bit magnetometer resolution
10009664:	4c36      	ldr	r4, [pc, #216]	; (10009740 <sms_imu_comp_initialize+0xec>)
10009666:	2301      	movs	r3, #1
10009668:	70a3      	strb	r3, [r4, #2]
	imu_device.config.m_mode = MODE_CONT1;	// CONT1 (2) for 8 Hz, CONT2 (6) for 100 Hz continuous magnetometer data read
1000966a:	3301      	adds	r3, #1
1000966c:	70e3      	strb	r3, [r4, #3]

	/* !!! SET MAGNETOMETER BIAS VALUES !!! SHOULD BE CALCULATED AUTOMATICALLY !!! */
	imu_device.config.mag_bias[0] = 470.0;
1000966e:	4b35      	ldr	r3, [pc, #212]	; (10009744 <sms_imu_comp_initialize+0xf0>)
10009670:	63a3      	str	r3, [r4, #56]	; 0x38
	imu_device.config.mag_bias[1] = 120.0;
10009672:	4b35      	ldr	r3, [pc, #212]	; (10009748 <sms_imu_comp_initialize+0xf4>)
10009674:	63e3      	str	r3, [r4, #60]	; 0x3c
	imu_device.config.mag_bias[2] = 125.0;
10009676:	4b35      	ldr	r3, [pc, #212]	; (1000974c <sms_imu_comp_initialize+0xf8>)
10009678:	6423      	str	r3, [r4, #64]	; 0x40
	/* !!! SET MAGNETOMETER BIAS VALUES !!! SHOULD BE CALCULATED AUTOMATICALLY !!! */

	// First extract the factory calibration for each magnetometer axis
	uint8_t data[3];  // x/y/z gyro calibration data stored here
	writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
1000967a:	2200      	movs	r2, #0
1000967c:	210a      	movs	r1, #10
1000967e:	200c      	movs	r0, #12
10009680:	4e33      	ldr	r6, [pc, #204]	; (10009750 <sms_imu_comp_initialize+0xfc>)
10009682:	47b0      	blx	r6
	delay_ms(10);
10009684:	200a      	movs	r0, #10
10009686:	4b33      	ldr	r3, [pc, #204]	; (10009754 <sms_imu_comp_initialize+0x100>)
10009688:	4798      	blx	r3
	writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x0F); // Enter Fuse ROM access mode
1000968a:	220f      	movs	r2, #15
1000968c:	210a      	movs	r1, #10
1000968e:	200c      	movs	r0, #12
10009690:	47b0      	blx	r6
	delay_ms(10);
10009692:	200a      	movs	r0, #10
10009694:	4b2f      	ldr	r3, [pc, #188]	; (10009754 <sms_imu_comp_initialize+0x100>)
10009696:	4798      	blx	r3
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
10009698:	af01      	add	r7, sp, #4
1000969a:	003b      	movs	r3, r7
1000969c:	2203      	movs	r2, #3
1000969e:	2110      	movs	r1, #16
100096a0:	200c      	movs	r0, #12
100096a2:	4d2d      	ldr	r5, [pc, #180]	; (10009758 <sms_imu_comp_initialize+0x104>)
100096a4:	47a8      	blx	r5
	writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
	delay_ms(10);
	writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x0F); // Enter Fuse ROM access mode
	delay_ms(10);
	readBytes(AK8963_ADDRESS, AK8963_ASAX, 3, data);  // Read the x-, y-, and z-axis calibration values
	destination[0] =  (float)(data[0] - 128)/256. + 1.;   // Return x-axis sensitivity adjustment values, etc.
100096a6:	7838      	ldrb	r0, [r7, #0]
100096a8:	3880      	subs	r0, #128	; 0x80
100096aa:	4b2c      	ldr	r3, [pc, #176]	; (1000975c <sms_imu_comp_initialize+0x108>)
100096ac:	469b      	mov	fp, r3
100096ae:	4798      	blx	r3
100096b0:	4b2b      	ldr	r3, [pc, #172]	; (10009760 <sms_imu_comp_initialize+0x10c>)
100096b2:	469a      	mov	sl, r3
100096b4:	4798      	blx	r3
100096b6:	2200      	movs	r2, #0
100096b8:	4b2a      	ldr	r3, [pc, #168]	; (10009764 <sms_imu_comp_initialize+0x110>)
100096ba:	4d2b      	ldr	r5, [pc, #172]	; (10009768 <sms_imu_comp_initialize+0x114>)
100096bc:	47a8      	blx	r5
100096be:	2200      	movs	r2, #0
100096c0:	4b2a      	ldr	r3, [pc, #168]	; (1000976c <sms_imu_comp_initialize+0x118>)
100096c2:	4d2b      	ldr	r5, [pc, #172]	; (10009770 <sms_imu_comp_initialize+0x11c>)
100096c4:	47a8      	blx	r5
100096c6:	4b2b      	ldr	r3, [pc, #172]	; (10009774 <sms_imu_comp_initialize+0x120>)
100096c8:	4699      	mov	r9, r3
100096ca:	4798      	blx	r3
100096cc:	4643      	mov	r3, r8
100096ce:	6018      	str	r0, [r3, #0]
	destination[1] =  (float)(data[1] - 128)/256. + 1.;
100096d0:	7878      	ldrb	r0, [r7, #1]
100096d2:	3880      	subs	r0, #128	; 0x80
100096d4:	47d8      	blx	fp
100096d6:	47d0      	blx	sl
100096d8:	2200      	movs	r2, #0
100096da:	4b22      	ldr	r3, [pc, #136]	; (10009764 <sms_imu_comp_initialize+0x110>)
100096dc:	4d22      	ldr	r5, [pc, #136]	; (10009768 <sms_imu_comp_initialize+0x114>)
100096de:	47a8      	blx	r5
100096e0:	2200      	movs	r2, #0
100096e2:	4b22      	ldr	r3, [pc, #136]	; (1000976c <sms_imu_comp_initialize+0x118>)
100096e4:	4d22      	ldr	r5, [pc, #136]	; (10009770 <sms_imu_comp_initialize+0x11c>)
100096e6:	47a8      	blx	r5
100096e8:	47c8      	blx	r9
100096ea:	4643      	mov	r3, r8
100096ec:	6058      	str	r0, [r3, #4]
	destination[2] =  (float)(data[2] - 128)/256. + 1.;
100096ee:	78b8      	ldrb	r0, [r7, #2]
100096f0:	3880      	subs	r0, #128	; 0x80
100096f2:	47d8      	blx	fp
100096f4:	47d0      	blx	sl
100096f6:	2200      	movs	r2, #0
100096f8:	4b1a      	ldr	r3, [pc, #104]	; (10009764 <sms_imu_comp_initialize+0x110>)
100096fa:	4d1b      	ldr	r5, [pc, #108]	; (10009768 <sms_imu_comp_initialize+0x114>)
100096fc:	47a8      	blx	r5
100096fe:	2200      	movs	r2, #0
10009700:	4b1a      	ldr	r3, [pc, #104]	; (1000976c <sms_imu_comp_initialize+0x118>)
10009702:	4d1b      	ldr	r5, [pc, #108]	; (10009770 <sms_imu_comp_initialize+0x11c>)
10009704:	47a8      	blx	r5
10009706:	47c8      	blx	r9
10009708:	4643      	mov	r3, r8
1000970a:	6098      	str	r0, [r3, #8]
	writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
1000970c:	2200      	movs	r2, #0
1000970e:	210a      	movs	r1, #10
10009710:	200c      	movs	r0, #12
10009712:	47b0      	blx	r6
	delay_ms(10);
10009714:	200a      	movs	r0, #10
10009716:	4b0f      	ldr	r3, [pc, #60]	; (10009754 <sms_imu_comp_initialize+0x100>)
10009718:	4798      	blx	r3
	// Configure the magnetometer for continuous read and highest resolution
	// set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
	// and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
	writeByte(AK8963_ADDRESS, AK8963_CNTL, imu_device.config.m_scale << 4 | imu_device.config.m_mode); // Set magnetometer data resolution and sample ODR
1000971a:	78a2      	ldrb	r2, [r4, #2]
1000971c:	0112      	lsls	r2, r2, #4
1000971e:	78e3      	ldrb	r3, [r4, #3]
10009720:	431a      	orrs	r2, r3
10009722:	b2d2      	uxtb	r2, r2
10009724:	210a      	movs	r1, #10
10009726:	200c      	movs	r0, #12
10009728:	47b0      	blx	r6
	delay_ms(10);
1000972a:	200a      	movs	r0, #10
1000972c:	4b09      	ldr	r3, [pc, #36]	; (10009754 <sms_imu_comp_initialize+0x100>)
1000972e:	4798      	blx	r3
}
10009730:	b003      	add	sp, #12
10009732:	bc3c      	pop	{r2, r3, r4, r5}
10009734:	4690      	mov	r8, r2
10009736:	4699      	mov	r9, r3
10009738:	46a2      	mov	sl, r4
1000973a:	46ab      	mov	fp, r5
1000973c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000973e:	46c0      	nop			; (mov r8, r8)
10009740:	1001a1b4 	.word	0x1001a1b4
10009744:	43eb0000 	.word	0x43eb0000
10009748:	42f00000 	.word	0x42f00000
1000974c:	42fa0000 	.word	0x42fa0000
10009750:	100092c5 	.word	0x100092c5
10009754:	1000a345 	.word	0x1000a345
10009758:	100090e5 	.word	0x100090e5
1000975c:	10013801 	.word	0x10013801
10009760:	100154e9 	.word	0x100154e9
10009764:	3f700000 	.word	0x3f700000
10009768:	100147ad 	.word	0x100147ad
1000976c:	3ff00000 	.word	0x3ff00000
10009770:	1001390d 	.word	0x1001390d
10009774:	10015591 	.word	0x10015591

10009778 <readByte>:
void writeByte(uint8_t address, uint8_t subAddress, uint8_t data)
{
	sms_i2c_master_write(address, subAddress, 1, &data);
}
uint8_t readByte(uint8_t address, uint8_t subAddress)
{
10009778:	b530      	push	{r4, r5, lr}
1000977a:	b083      	sub	sp, #12
	uint8_t data[1];
	sms_i2c_master_read(address, subAddress, 1, data);
1000977c:	ac01      	add	r4, sp, #4
1000977e:	0023      	movs	r3, r4
10009780:	2201      	movs	r2, #1
10009782:	4d02      	ldr	r5, [pc, #8]	; (1000978c <readByte+0x14>)
10009784:	47a8      	blx	r5
	return data[0];
10009786:	7820      	ldrb	r0, [r4, #0]
}
10009788:	b003      	add	sp, #12
1000978a:	bd30      	pop	{r4, r5, pc}
1000978c:	100090e5 	.word	0x100090e5

10009790 <sms_imu_comp_check>:
	}
	return retVal;
}
/* Check if the compass responds */
int sms_imu_comp_check(void)
{
10009790:	b510      	push	{r4, lr}
	int retVal = -1;
	uint8_t d = readByte(AK8963_ADDRESS, AK8963_WHO_AM_I);
10009792:	2100      	movs	r1, #0
10009794:	200c      	movs	r0, #12
10009796:	4b03      	ldr	r3, [pc, #12]	; (100097a4 <sms_imu_comp_check+0x14>)
10009798:	4798      	blx	r3
	if(d == 0x48) {
		//DBG_LOG("[sms_mpu_comp_check]\t\tAK8963 is online...");
		retVal = 0;
	}
	return retVal;
1000979a:	3848      	subs	r0, #72	; 0x48
1000979c:	1e43      	subs	r3, r0, #1
1000979e:	4198      	sbcs	r0, r3
100097a0:	4240      	negs	r0, r0
}
100097a2:	bd10      	pop	{r4, pc}
100097a4:	10009779 	.word	0x10009779

100097a8 <sms_imu_mpu_initialize>:
	imu_device.config.ahrs = false;
	imu_device.config.init_ok = false;
}
/* MPU */
void sms_imu_mpu_initialize(void)
{
100097a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// wake up device
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x00); // Clear sleep mode bit (6), enable all sensors
100097aa:	2200      	movs	r2, #0
100097ac:	216b      	movs	r1, #107	; 0x6b
100097ae:	2069      	movs	r0, #105	; 0x69
100097b0:	4c21      	ldr	r4, [pc, #132]	; (10009838 <sms_imu_mpu_initialize+0x90>)
100097b2:	47a0      	blx	r4
	delay_ms(100); // Wait for all registers to reset
100097b4:	2064      	movs	r0, #100	; 0x64
100097b6:	4d21      	ldr	r5, [pc, #132]	; (1000983c <sms_imu_mpu_initialize+0x94>)
100097b8:	47a8      	blx	r5

	// get stable time source
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);  // Auto select clock source to be PLL gyroscope reference if ready else
100097ba:	2201      	movs	r2, #1
100097bc:	216b      	movs	r1, #107	; 0x6b
100097be:	2069      	movs	r0, #105	; 0x69
100097c0:	47a0      	blx	r4
	delay_ms(200);
100097c2:	20c8      	movs	r0, #200	; 0xc8
100097c4:	47a8      	blx	r5
	// minimum delay time for this setting is 5.9 ms, which means sensor fusion update rates cannot
	// be higher than 1 / 0.0059 = 170 Hz
	// DLPF_CFG = bits 2:0 = 011; this limits the sample rate to 1000 Hz for both
	// With the MPU9250, it is possible to get gyro sample rates of 32 kHz (!), 8 kHz, or 1 kHz
	 //writeByte(MPU9250_ADDRESS, CONFIG, 0x03);
	writeByte(MPU9250_ADDRESS, CONFIG, 0x05);		// gyro bandwidth = 10 Hz, delay = 17.85 ms -> max rate = 56 Hz
100097c6:	2205      	movs	r2, #5
100097c8:	211a      	movs	r1, #26
100097ca:	2069      	movs	r0, #105	; 0x69
100097cc:	47a0      	blx	r4

	// Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
	//writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x0A);  	// Use a 90 Hz rate; a rate consistent with the filter update rate
	// // determined inset in CONFIG above
	writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x63);  	// Use a 10 Hz rate; a rate consistent with the filter update rate
100097ce:	2263      	movs	r2, #99	; 0x63
100097d0:	2119      	movs	r1, #25
100097d2:	2069      	movs	r0, #105	; 0x69
100097d4:	47a0      	blx	r4
	
	// Set gyroscope full scale range
	// Range selects FS_SEL and AFS_SEL are 0 - 3, so 2-bit values are left-shifted into positions 4:3
	uint8_t c = readByte(MPU9250_ADDRESS, GYRO_CONFIG); // get current GYRO_CONFIG register value
100097d6:	211b      	movs	r1, #27
100097d8:	2069      	movs	r0, #105	; 0x69
100097da:	4e19      	ldr	r6, [pc, #100]	; (10009840 <sms_imu_mpu_initialize+0x98>)
100097dc:	47b0      	blx	r6
	// c = c & ~0xE0; // Clear self-test bits [7:5]
	c = c & ~0x02; // Clear Fchoice bits [1:0]
	c = c & ~0x18; // Clear AFS bits [4:3]
	c = c | (imu_device.config.g_scale << 3); // Set full scale range for the gyro
100097de:	4f19      	ldr	r7, [pc, #100]	; (10009844 <sms_imu_mpu_initialize+0x9c>)
100097e0:	787a      	ldrb	r2, [r7, #1]
100097e2:	00d2      	lsls	r2, r2, #3
100097e4:	231a      	movs	r3, #26
100097e6:	4398      	bics	r0, r3
100097e8:	4302      	orrs	r2, r0
	// c =| 0x00; // Set Fchoice for the gyro to 11 by writing its inverse to bits 1:0 of GYRO_CONFIG
	writeByte(MPU9250_ADDRESS, GYRO_CONFIG, c ); // Write new GYRO_CONFIG value to register
100097ea:	b2d2      	uxtb	r2, r2
100097ec:	211b      	movs	r1, #27
100097ee:	2069      	movs	r0, #105	; 0x69
100097f0:	47a0      	blx	r4
	
	// Set accelerometer full-scale range configuration
	c = readByte(MPU9250_ADDRESS, ACCEL_CONFIG); // get current ACCEL_CONFIG register value
100097f2:	211c      	movs	r1, #28
100097f4:	2069      	movs	r0, #105	; 0x69
100097f6:	47b0      	blx	r6
	// c = c & ~0xE0; // Clear self-test bits [7:5]
	c = c & ~0x18;  // Clear AFS bits [4:3]
	c = c | (imu_device.config.a_scale << 3); // Set full scale range for the accelerometer
100097f8:	783a      	ldrb	r2, [r7, #0]
100097fa:	00d2      	lsls	r2, r2, #3
100097fc:	2318      	movs	r3, #24
100097fe:	4398      	bics	r0, r3
10009800:	4302      	orrs	r2, r0
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, c); // Write new ACCEL_CONFIG register value
10009802:	b2d2      	uxtb	r2, r2
10009804:	211c      	movs	r1, #28
10009806:	2069      	movs	r0, #105	; 0x69
10009808:	47a0      	blx	r4

	// Set accelerometer sample rate configuration
	// It is possible to get a 4 kHz sample rate from the accelerometer by choosing 1 for
	// accel_fchoice_b bit [3]; in this case the bandwidth is 1.13 kHz
	c = readByte(MPU9250_ADDRESS, ACCEL_CONFIG2); // get current ACCEL_CONFIG2 register value
1000980a:	211d      	movs	r1, #29
1000980c:	2069      	movs	r0, #105	; 0x69
1000980e:	47b0      	blx	r6
	c = c & ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
10009810:	23f0      	movs	r3, #240	; 0xf0
10009812:	0002      	movs	r2, r0
10009814:	401a      	ands	r2, r3
	// c = c | 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
	c = c | 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz, delay 11.8 ms
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, c); // Write new ACCEL_CONFIG2 register value
10009816:	3bed      	subs	r3, #237	; 0xed
10009818:	431a      	orrs	r2, r3
1000981a:	211d      	movs	r1, #29
1000981c:	2069      	movs	r0, #105	; 0x69
1000981e:	47a0      	blx	r4
	// Configure Interrupts and Bypass Enable
	// Set interrupt pin active high, push-pull, send 50 us interrupt pulses,
	// clear on ANY read, and enable I2C_BYPASS_EN so additional chips
	// can join the I2C bus and all can be controlled by the Arduino as master
	//writeByte(MPU9250_ADDRESS, INT_PIN_CFG, 0x22);
	writeByte(MPU9250_ADDRESS, INT_PIN_CFG, 0x12);
10009820:	2212      	movs	r2, #18
10009822:	2137      	movs	r1, #55	; 0x37
10009824:	2069      	movs	r0, #105	; 0x69
10009826:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x01);  // Enable data ready (bit 0) interrupt
10009828:	2201      	movs	r2, #1
1000982a:	2138      	movs	r1, #56	; 0x38
1000982c:	2069      	movs	r0, #105	; 0x69
1000982e:	47a0      	blx	r4
	delay_ms(100);
10009830:	2064      	movs	r0, #100	; 0x64
10009832:	47a8      	blx	r5
}
10009834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10009836:	46c0      	nop			; (mov r8, r8)
10009838:	100092c5 	.word	0x100092c5
1000983c:	1000a345 	.word	0x1000a345
10009840:	10009779 	.word	0x10009779
10009844:	1001a1b4 	.word	0x1001a1b4

10009848 <sms_imu_selftest>:
	//uint32_t p5 = dest2[2] * 10000;
	//DBG_LOG("destX: %ld %ld %ld / %ld %ld %ld", p0, p1, p2, p3, p4, p5);
}
/* Self-test */
void sms_imu_selftest(float *destination)
{
10009848:	b5f0      	push	{r4, r5, r6, r7, lr}
1000984a:	465f      	mov	r7, fp
1000984c:	4656      	mov	r6, sl
1000984e:	464d      	mov	r5, r9
10009850:	4644      	mov	r4, r8
10009852:	b4f0      	push	{r4, r5, r6, r7}
10009854:	b09d      	sub	sp, #116	; 0x74
10009856:	9003      	str	r0, [sp, #12]
	uint8_t raw_data[6] = {0};
10009858:	2206      	movs	r2, #6
1000985a:	2100      	movs	r1, #0
1000985c:	a81a      	add	r0, sp, #104	; 0x68
1000985e:	4ce0      	ldr	r4, [pc, #896]	; (10009be0 <sms_imu_selftest+0x398>)
10009860:	47a0      	blx	r4
	uint8_t stest[6];
	int32_t g_avg[3] = {0}, a_avg[3] = {0}, a_stavg[3] = {0}, g_stavg[3] = {0};
10009862:	220c      	movs	r2, #12
10009864:	2100      	movs	r1, #0
10009866:	a817      	add	r0, sp, #92	; 0x5c
10009868:	47a0      	blx	r4
1000986a:	220c      	movs	r2, #12
1000986c:	2100      	movs	r1, #0
1000986e:	a814      	add	r0, sp, #80	; 0x50
10009870:	47a0      	blx	r4
10009872:	220c      	movs	r2, #12
10009874:	2100      	movs	r1, #0
10009876:	a811      	add	r0, sp, #68	; 0x44
10009878:	47a0      	blx	r4
1000987a:	220c      	movs	r2, #12
1000987c:	2100      	movs	r1, #0
1000987e:	a80e      	add	r0, sp, #56	; 0x38
10009880:	47a0      	blx	r4
	float factory_trim[6];
	uint8_t fs = 0;
	
	writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x00);	// Set gyro sample rate to 1 kHz
10009882:	2200      	movs	r2, #0
10009884:	2119      	movs	r1, #25
10009886:	2069      	movs	r0, #105	; 0x69
10009888:	4cd6      	ldr	r4, [pc, #856]	; (10009be4 <sms_imu_selftest+0x39c>)
1000988a:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, CONFIG, 0x02);		// Set gyro sample rate to 1 kHz and DLPF to 92 Hz
1000988c:	2202      	movs	r2, #2
1000988e:	211a      	movs	r1, #26
10009890:	2069      	movs	r0, #105	; 0x69
10009892:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, GYRO_CONFIG, fs<<3);	// Set full scale range for the gyro to 250 dps
10009894:	2200      	movs	r2, #0
10009896:	211b      	movs	r1, #27
10009898:	2069      	movs	r0, #105	; 0x69
1000989a:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, 0x02);	// Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
1000989c:	2202      	movs	r2, #2
1000989e:	211d      	movs	r1, #29
100098a0:	2069      	movs	r0, #105	; 0x69
100098a2:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, fs<<3);	// Set full scale range for the accelerometer to 2 g
100098a4:	2200      	movs	r2, #0
100098a6:	211c      	movs	r1, #28
100098a8:	2069      	movs	r0, #105	; 0x69
100098aa:	47a0      	blx	r4
100098ac:	25c8      	movs	r5, #200	; 0xc8
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
100098ae:	ac1a      	add	r4, sp, #104	; 0x68
100098b0:	4ecd      	ldr	r6, [pc, #820]	; (10009be8 <sms_imu_selftest+0x3a0>)
100098b2:	0023      	movs	r3, r4
100098b4:	2206      	movs	r2, #6
100098b6:	213b      	movs	r1, #59	; 0x3b
100098b8:	2069      	movs	r0, #105	; 0x69
100098ba:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, 0x02);	// Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, fs<<3);	// Set full scale range for the accelerometer to 2 g
	
	for(uint8_t i = 0; i < 200; i++) { // get average current values of gyro and accelerometer
		readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 6, raw_data);
		a_avg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]);
100098bc:	7823      	ldrb	r3, [r4, #0]
100098be:	021b      	lsls	r3, r3, #8
100098c0:	7862      	ldrb	r2, [r4, #1]
100098c2:	4313      	orrs	r3, r2
100098c4:	b21b      	sxth	r3, r3
100098c6:	9a14      	ldr	r2, [sp, #80]	; 0x50
100098c8:	4694      	mov	ip, r2
100098ca:	4463      	add	r3, ip
100098cc:	9314      	str	r3, [sp, #80]	; 0x50
		a_avg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]);
100098ce:	78a3      	ldrb	r3, [r4, #2]
100098d0:	021b      	lsls	r3, r3, #8
100098d2:	78e2      	ldrb	r2, [r4, #3]
100098d4:	4313      	orrs	r3, r2
100098d6:	b21b      	sxth	r3, r3
100098d8:	9a15      	ldr	r2, [sp, #84]	; 0x54
100098da:	9200      	str	r2, [sp, #0]
100098dc:	4694      	mov	ip, r2
100098de:	4463      	add	r3, ip
100098e0:	9315      	str	r3, [sp, #84]	; 0x54
		a_avg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]);
100098e2:	7923      	ldrb	r3, [r4, #4]
100098e4:	021b      	lsls	r3, r3, #8
100098e6:	7962      	ldrb	r2, [r4, #5]
100098e8:	4313      	orrs	r3, r2
100098ea:	b21b      	sxth	r3, r3
100098ec:	9a16      	ldr	r2, [sp, #88]	; 0x58
100098ee:	9200      	str	r2, [sp, #0]
100098f0:	4694      	mov	ip, r2
100098f2:	4463      	add	r3, ip
100098f4:	9316      	str	r3, [sp, #88]	; 0x58
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
100098f6:	0023      	movs	r3, r4
100098f8:	2206      	movs	r2, #6
100098fa:	2143      	movs	r1, #67	; 0x43
100098fc:	2069      	movs	r0, #105	; 0x69
100098fe:	47b0      	blx	r6
		a_avg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]);
		a_avg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]);
		a_avg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]);
		
		readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, raw_data);
		g_avg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]);
10009900:	7823      	ldrb	r3, [r4, #0]
10009902:	021b      	lsls	r3, r3, #8
10009904:	7862      	ldrb	r2, [r4, #1]
10009906:	4313      	orrs	r3, r2
10009908:	b21b      	sxth	r3, r3
1000990a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
1000990c:	4694      	mov	ip, r2
1000990e:	4463      	add	r3, ip
10009910:	9317      	str	r3, [sp, #92]	; 0x5c
		g_avg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]);
10009912:	78a3      	ldrb	r3, [r4, #2]
10009914:	021b      	lsls	r3, r3, #8
10009916:	78e2      	ldrb	r2, [r4, #3]
10009918:	4313      	orrs	r3, r2
1000991a:	b21b      	sxth	r3, r3
1000991c:	9a18      	ldr	r2, [sp, #96]	; 0x60
1000991e:	9200      	str	r2, [sp, #0]
10009920:	4694      	mov	ip, r2
10009922:	4463      	add	r3, ip
10009924:	9318      	str	r3, [sp, #96]	; 0x60
		g_avg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]);
10009926:	7923      	ldrb	r3, [r4, #4]
10009928:	021b      	lsls	r3, r3, #8
1000992a:	7962      	ldrb	r2, [r4, #5]
1000992c:	4313      	orrs	r3, r2
1000992e:	b21b      	sxth	r3, r3
10009930:	9a19      	ldr	r2, [sp, #100]	; 0x64
10009932:	9200      	str	r2, [sp, #0]
10009934:	4694      	mov	ip, r2
10009936:	4463      	add	r3, ip
10009938:	9319      	str	r3, [sp, #100]	; 0x64
1000993a:	3d01      	subs	r5, #1
1000993c:	b2ed      	uxtb	r5, r5
	writeByte(MPU9250_ADDRESS, CONFIG, 0x02);		// Set gyro sample rate to 1 kHz and DLPF to 92 Hz
	writeByte(MPU9250_ADDRESS, GYRO_CONFIG, fs<<3);	// Set full scale range for the gyro to 250 dps
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, 0x02);	// Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, fs<<3);	// Set full scale range for the accelerometer to 2 g
	
	for(uint8_t i = 0; i < 200; i++) { // get average current values of gyro and accelerometer
1000993e:	2d00      	cmp	r5, #0
10009940:	d1b7      	bne.n	100098b2 <sms_imu_selftest+0x6a>
10009942:	2400      	movs	r4, #0
		g_avg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]);
		g_avg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]);
		g_avg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]);
	}
	for(uint8_t i = 0; i < 3; i++) { // get average of 200 values and store as average current readings
		a_avg[i] /= 200;
10009944:	4ea9      	ldr	r6, [pc, #676]	; (10009bec <sms_imu_selftest+0x3a4>)
10009946:	ad14      	add	r5, sp, #80	; 0x50
10009948:	21c8      	movs	r1, #200	; 0xc8
1000994a:	5960      	ldr	r0, [r4, r5]
1000994c:	47b0      	blx	r6
1000994e:	5160      	str	r0, [r4, r5]
		g_avg[i] /= 200;
10009950:	ad17      	add	r5, sp, #92	; 0x5c
10009952:	21c8      	movs	r1, #200	; 0xc8
10009954:	5960      	ldr	r0, [r4, r5]
10009956:	47b0      	blx	r6
10009958:	5160      	str	r0, [r4, r5]
1000995a:	3404      	adds	r4, #4
		readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, raw_data);
		g_avg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]);
		g_avg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]);
		g_avg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]);
	}
	for(uint8_t i = 0; i < 3; i++) { // get average of 200 values and store as average current readings
1000995c:	2c0c      	cmp	r4, #12
1000995e:	d1f2      	bne.n	10009946 <sms_imu_selftest+0xfe>
		a_avg[i] /= 200;
		g_avg[i] /= 200;
	}
	
	// Configure the accelerometer for self-test
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set accelerometer range to +/- 2 g
10009960:	22e0      	movs	r2, #224	; 0xe0
10009962:	211c      	movs	r1, #28
10009964:	2069      	movs	r0, #105	; 0x69
10009966:	4c9f      	ldr	r4, [pc, #636]	; (10009be4 <sms_imu_selftest+0x39c>)
10009968:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set (MPU9250_ADDRESS, GYRO_CONFIG,  0xE0); // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
1000996a:	22e0      	movs	r2, #224	; 0xe0
1000996c:	211c      	movs	r1, #28
1000996e:	2069      	movs	r0, #105	; 0x69
10009970:	47a0      	blx	r4
	delay_ms(25);  // Delay a while to let the device stabilize
10009972:	2019      	movs	r0, #25
10009974:	4b9e      	ldr	r3, [pc, #632]	; (10009bf0 <sms_imu_selftest+0x3a8>)
10009976:	4798      	blx	r3
10009978:	25c8      	movs	r5, #200	; 0xc8
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
1000997a:	ac1a      	add	r4, sp, #104	; 0x68
1000997c:	4e9a      	ldr	r6, [pc, #616]	; (10009be8 <sms_imu_selftest+0x3a0>)
1000997e:	0023      	movs	r3, r4
10009980:	2206      	movs	r2, #6
10009982:	213b      	movs	r1, #59	; 0x3b
10009984:	2069      	movs	r0, #105	; 0x69
10009986:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set (MPU9250_ADDRESS, GYRO_CONFIG,  0xE0); // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
	delay_ms(25);  // Delay a while to let the device stabilize
	
	for(uint8_t i = 0; i < 200; i++) {  // get average self-test values of gyro and accelerometer
		readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 6, raw_data);  // Read the six raw data registers into data array
		a_stavg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
10009988:	7823      	ldrb	r3, [r4, #0]
1000998a:	021b      	lsls	r3, r3, #8
1000998c:	7862      	ldrb	r2, [r4, #1]
1000998e:	4313      	orrs	r3, r2
10009990:	b21b      	sxth	r3, r3
10009992:	9a11      	ldr	r2, [sp, #68]	; 0x44
10009994:	4694      	mov	ip, r2
10009996:	4463      	add	r3, ip
10009998:	9311      	str	r3, [sp, #68]	; 0x44
		a_stavg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]) ;
1000999a:	78a3      	ldrb	r3, [r4, #2]
1000999c:	021b      	lsls	r3, r3, #8
1000999e:	78e2      	ldrb	r2, [r4, #3]
100099a0:	4313      	orrs	r3, r2
100099a2:	b21b      	sxth	r3, r3
100099a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
100099a6:	9200      	str	r2, [sp, #0]
100099a8:	4694      	mov	ip, r2
100099aa:	4463      	add	r3, ip
100099ac:	9312      	str	r3, [sp, #72]	; 0x48
		a_stavg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]) ;
100099ae:	7923      	ldrb	r3, [r4, #4]
100099b0:	021b      	lsls	r3, r3, #8
100099b2:	7962      	ldrb	r2, [r4, #5]
100099b4:	4313      	orrs	r3, r2
100099b6:	b21b      	sxth	r3, r3
100099b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
100099ba:	9200      	str	r2, [sp, #0]
100099bc:	4694      	mov	ip, r2
100099be:	4463      	add	r3, ip
100099c0:	9313      	str	r3, [sp, #76]	; 0x4c
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
100099c2:	0023      	movs	r3, r4
100099c4:	2206      	movs	r2, #6
100099c6:	2143      	movs	r1, #67	; 0x43
100099c8:	2069      	movs	r0, #105	; 0x69
100099ca:	47b0      	blx	r6
		a_stavg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
		a_stavg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]) ;
		a_stavg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]) ;
		
		readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, raw_data);  // Read the six raw data registers sequentially into data array
		g_stavg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
100099cc:	7823      	ldrb	r3, [r4, #0]
100099ce:	021b      	lsls	r3, r3, #8
100099d0:	7862      	ldrb	r2, [r4, #1]
100099d2:	4313      	orrs	r3, r2
100099d4:	b21b      	sxth	r3, r3
100099d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
100099d8:	4694      	mov	ip, r2
100099da:	4463      	add	r3, ip
100099dc:	930e      	str	r3, [sp, #56]	; 0x38
		g_stavg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]) ;
100099de:	78a3      	ldrb	r3, [r4, #2]
100099e0:	021b      	lsls	r3, r3, #8
100099e2:	78e2      	ldrb	r2, [r4, #3]
100099e4:	4313      	orrs	r3, r2
100099e6:	b21b      	sxth	r3, r3
100099e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
100099ea:	9200      	str	r2, [sp, #0]
100099ec:	4694      	mov	ip, r2
100099ee:	4463      	add	r3, ip
100099f0:	930f      	str	r3, [sp, #60]	; 0x3c
		g_stavg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]) ;
100099f2:	7923      	ldrb	r3, [r4, #4]
100099f4:	021b      	lsls	r3, r3, #8
100099f6:	7962      	ldrb	r2, [r4, #5]
100099f8:	4313      	orrs	r3, r2
100099fa:	b21b      	sxth	r3, r3
100099fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
100099fe:	9200      	str	r2, [sp, #0]
10009a00:	4694      	mov	ip, r2
10009a02:	4463      	add	r3, ip
10009a04:	9310      	str	r3, [sp, #64]	; 0x40
10009a06:	3d01      	subs	r5, #1
10009a08:	b2ed      	uxtb	r5, r5
	// Configure the accelerometer for self-test
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set accelerometer range to +/- 2 g
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set (MPU9250_ADDRESS, GYRO_CONFIG,  0xE0); // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
	delay_ms(25);  // Delay a while to let the device stabilize
	
	for(uint8_t i = 0; i < 200; i++) {  // get average self-test values of gyro and accelerometer
10009a0a:	2d00      	cmp	r5, #0
10009a0c:	d1b7      	bne.n	1000997e <sms_imu_selftest+0x136>
10009a0e:	2400      	movs	r4, #0
		g_stavg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
		g_stavg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]) ;
		g_stavg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]) ;
	}
	for(uint8_t i = 0; i < 3; i++) { // get average of 200 values and store as average self-test readings
		a_stavg[i] /= 200;
10009a10:	4e76      	ldr	r6, [pc, #472]	; (10009bec <sms_imu_selftest+0x3a4>)
10009a12:	ad11      	add	r5, sp, #68	; 0x44
10009a14:	21c8      	movs	r1, #200	; 0xc8
10009a16:	5960      	ldr	r0, [r4, r5]
10009a18:	47b0      	blx	r6
10009a1a:	5160      	str	r0, [r4, r5]
		g_stavg[i] /= 200;
10009a1c:	ad0e      	add	r5, sp, #56	; 0x38
10009a1e:	21c8      	movs	r1, #200	; 0xc8
10009a20:	5960      	ldr	r0, [r4, r5]
10009a22:	47b0      	blx	r6
10009a24:	5160      	str	r0, [r4, r5]
10009a26:	3404      	adds	r4, #4
		readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, raw_data);  // Read the six raw data registers sequentially into data array
		g_stavg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
		g_stavg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]) ;
		g_stavg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]) ;
	}
	for(uint8_t i = 0; i < 3; i++) { // get average of 200 values and store as average self-test readings
10009a28:	2c0c      	cmp	r4, #12
10009a2a:	d1f2      	bne.n	10009a12 <sms_imu_selftest+0x1ca>
		a_stavg[i] /= 200;
		g_stavg[i] /= 200;
	}

	// Configure the gyro and accelerometer for normal operation
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0x00);
10009a2c:	2200      	movs	r2, #0
10009a2e:	211c      	movs	r1, #28
10009a30:	2069      	movs	r0, #105	; 0x69
10009a32:	4c6c      	ldr	r4, [pc, #432]	; (10009be4 <sms_imu_selftest+0x39c>)
10009a34:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, GYRO_CONFIG,  0x00);
10009a36:	2200      	movs	r2, #0
10009a38:	211b      	movs	r1, #27
10009a3a:	2069      	movs	r0, #105	; 0x69
10009a3c:	47a0      	blx	r4
	delay_ms(25);  // Delay a while to let the device stabilize
10009a3e:	2019      	movs	r0, #25
10009a40:	4b6b      	ldr	r3, [pc, #428]	; (10009bf0 <sms_imu_selftest+0x3a8>)
10009a42:	4798      	blx	r3

	// Retrieve accelerometer and gyro factory Self-Test Code from USR_Reg
	stest[0] = readByte(MPU9250_ADDRESS, SELF_TEST_X_ACCEL); // X-axis accel self-test results
10009a44:	210d      	movs	r1, #13
10009a46:	2069      	movs	r0, #105	; 0x69
10009a48:	4d6a      	ldr	r5, [pc, #424]	; (10009bf4 <sms_imu_selftest+0x3ac>)
10009a4a:	47a8      	blx	r5
10009a4c:	0004      	movs	r4, r0
	stest[1] = readByte(MPU9250_ADDRESS, SELF_TEST_Y_ACCEL); // Y-axis accel self-test results
10009a4e:	210e      	movs	r1, #14
10009a50:	2069      	movs	r0, #105	; 0x69
10009a52:	47a8      	blx	r5
10009a54:	9000      	str	r0, [sp, #0]
	stest[2] = readByte(MPU9250_ADDRESS, SELF_TEST_Z_ACCEL); // Z-axis accel self-test results
10009a56:	210f      	movs	r1, #15
10009a58:	2069      	movs	r0, #105	; 0x69
10009a5a:	47a8      	blx	r5
10009a5c:	9004      	str	r0, [sp, #16]
	stest[3] = readByte(MPU9250_ADDRESS, SELF_TEST_X_GYRO);  // X-axis gyro self-test results
10009a5e:	2100      	movs	r1, #0
10009a60:	2069      	movs	r0, #105	; 0x69
10009a62:	47a8      	blx	r5
10009a64:	9005      	str	r0, [sp, #20]
	stest[4] = readByte(MPU9250_ADDRESS, SELF_TEST_Y_GYRO);  // Y-axis gyro self-test results
10009a66:	2101      	movs	r1, #1
10009a68:	2069      	movs	r0, #105	; 0x69
10009a6a:	47a8      	blx	r5
10009a6c:	9006      	str	r0, [sp, #24]
	stest[5] = readByte(MPU9250_ADDRESS, SELF_TEST_Z_GYRO);  // Z-axis gyro self-test results
10009a6e:	2102      	movs	r1, #2
10009a70:	2069      	movs	r0, #105	; 0x69
10009a72:	47a8      	blx	r5
10009a74:	9007      	str	r0, [sp, #28]

	// Retrieve factory self-test value from self-test code reads
	factory_trim[0] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[0] - 1.0) )); // FT[Xa] factory trim calculation
10009a76:	4b60      	ldr	r3, [pc, #384]	; (10009bf8 <sms_imu_selftest+0x3b0>)
10009a78:	469a      	mov	sl, r3
10009a7a:	0020      	movs	r0, r4
10009a7c:	4798      	blx	r3
10009a7e:	4b5f      	ldr	r3, [pc, #380]	; (10009bfc <sms_imu_selftest+0x3b4>)
10009a80:	4699      	mov	r9, r3
10009a82:	4798      	blx	r3
10009a84:	4e5e      	ldr	r6, [pc, #376]	; (10009c00 <sms_imu_selftest+0x3b8>)
10009a86:	2200      	movs	r2, #0
10009a88:	4b5e      	ldr	r3, [pc, #376]	; (10009c04 <sms_imu_selftest+0x3bc>)
10009a8a:	47b0      	blx	r6
10009a8c:	0002      	movs	r2, r0
10009a8e:	000b      	movs	r3, r1
10009a90:	485d      	ldr	r0, [pc, #372]	; (10009c08 <sms_imu_selftest+0x3c0>)
10009a92:	495e      	ldr	r1, [pc, #376]	; (10009c0c <sms_imu_selftest+0x3c4>)
10009a94:	4f5e      	ldr	r7, [pc, #376]	; (10009c10 <sms_imu_selftest+0x3c8>)
10009a96:	47b8      	blx	r7
10009a98:	4d5e      	ldr	r5, [pc, #376]	; (10009c14 <sms_imu_selftest+0x3cc>)
10009a9a:	2200      	movs	r2, #0
10009a9c:	4b5e      	ldr	r3, [pc, #376]	; (10009c18 <sms_imu_selftest+0x3d0>)
10009a9e:	47a8      	blx	r5
10009aa0:	4c5e      	ldr	r4, [pc, #376]	; (10009c1c <sms_imu_selftest+0x3d4>)
10009aa2:	47a0      	blx	r4
10009aa4:	9008      	str	r0, [sp, #32]
	factory_trim[1] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[1] - 1.0) )); // FT[Ya] factory trim calculation
10009aa6:	9800      	ldr	r0, [sp, #0]
10009aa8:	47d0      	blx	sl
10009aaa:	47c8      	blx	r9
10009aac:	2200      	movs	r2, #0
10009aae:	4b55      	ldr	r3, [pc, #340]	; (10009c04 <sms_imu_selftest+0x3bc>)
10009ab0:	47b0      	blx	r6
10009ab2:	0002      	movs	r2, r0
10009ab4:	000b      	movs	r3, r1
10009ab6:	4854      	ldr	r0, [pc, #336]	; (10009c08 <sms_imu_selftest+0x3c0>)
10009ab8:	4954      	ldr	r1, [pc, #336]	; (10009c0c <sms_imu_selftest+0x3c4>)
10009aba:	47b8      	blx	r7
10009abc:	2200      	movs	r2, #0
10009abe:	4b56      	ldr	r3, [pc, #344]	; (10009c18 <sms_imu_selftest+0x3d0>)
10009ac0:	47a8      	blx	r5
10009ac2:	47a0      	blx	r4
10009ac4:	9009      	str	r0, [sp, #36]	; 0x24
	factory_trim[2] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[2] - 1.0) )); // FT[Za] factory trim calculation
10009ac6:	9804      	ldr	r0, [sp, #16]
10009ac8:	47d0      	blx	sl
10009aca:	47c8      	blx	r9
10009acc:	2200      	movs	r2, #0
10009ace:	4b4d      	ldr	r3, [pc, #308]	; (10009c04 <sms_imu_selftest+0x3bc>)
10009ad0:	47b0      	blx	r6
10009ad2:	0002      	movs	r2, r0
10009ad4:	000b      	movs	r3, r1
10009ad6:	484c      	ldr	r0, [pc, #304]	; (10009c08 <sms_imu_selftest+0x3c0>)
10009ad8:	494c      	ldr	r1, [pc, #304]	; (10009c0c <sms_imu_selftest+0x3c4>)
10009ada:	47b8      	blx	r7
10009adc:	2200      	movs	r2, #0
10009ade:	4b4e      	ldr	r3, [pc, #312]	; (10009c18 <sms_imu_selftest+0x3d0>)
10009ae0:	47a8      	blx	r5
10009ae2:	47a0      	blx	r4
10009ae4:	900a      	str	r0, [sp, #40]	; 0x28
	factory_trim[3] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[3] - 1.0) )); // FT[Xg] factory trim calculation
10009ae6:	9805      	ldr	r0, [sp, #20]
10009ae8:	47d0      	blx	sl
10009aea:	47c8      	blx	r9
10009aec:	2200      	movs	r2, #0
10009aee:	4b45      	ldr	r3, [pc, #276]	; (10009c04 <sms_imu_selftest+0x3bc>)
10009af0:	47b0      	blx	r6
10009af2:	0002      	movs	r2, r0
10009af4:	000b      	movs	r3, r1
10009af6:	4844      	ldr	r0, [pc, #272]	; (10009c08 <sms_imu_selftest+0x3c0>)
10009af8:	4944      	ldr	r1, [pc, #272]	; (10009c0c <sms_imu_selftest+0x3c4>)
10009afa:	47b8      	blx	r7
10009afc:	2200      	movs	r2, #0
10009afe:	4b46      	ldr	r3, [pc, #280]	; (10009c18 <sms_imu_selftest+0x3d0>)
10009b00:	47a8      	blx	r5
10009b02:	47a0      	blx	r4
10009b04:	900b      	str	r0, [sp, #44]	; 0x2c
	factory_trim[4] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[4] - 1.0) )); // FT[Yg] factory trim calculation
10009b06:	9806      	ldr	r0, [sp, #24]
10009b08:	47d0      	blx	sl
10009b0a:	47c8      	blx	r9
10009b0c:	2200      	movs	r2, #0
10009b0e:	4b3d      	ldr	r3, [pc, #244]	; (10009c04 <sms_imu_selftest+0x3bc>)
10009b10:	47b0      	blx	r6
10009b12:	0002      	movs	r2, r0
10009b14:	000b      	movs	r3, r1
10009b16:	483c      	ldr	r0, [pc, #240]	; (10009c08 <sms_imu_selftest+0x3c0>)
10009b18:	493c      	ldr	r1, [pc, #240]	; (10009c0c <sms_imu_selftest+0x3c4>)
10009b1a:	47b8      	blx	r7
10009b1c:	2200      	movs	r2, #0
10009b1e:	4b3e      	ldr	r3, [pc, #248]	; (10009c18 <sms_imu_selftest+0x3d0>)
10009b20:	47a8      	blx	r5
10009b22:	47a0      	blx	r4
10009b24:	900c      	str	r0, [sp, #48]	; 0x30
	factory_trim[5] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[5] - 1.0) )); // FT[Zg] factory trim calculation
10009b26:	9807      	ldr	r0, [sp, #28]
10009b28:	47d0      	blx	sl
10009b2a:	47c8      	blx	r9
10009b2c:	2200      	movs	r2, #0
10009b2e:	4b35      	ldr	r3, [pc, #212]	; (10009c04 <sms_imu_selftest+0x3bc>)
10009b30:	47b0      	blx	r6
10009b32:	0002      	movs	r2, r0
10009b34:	000b      	movs	r3, r1
10009b36:	4834      	ldr	r0, [pc, #208]	; (10009c08 <sms_imu_selftest+0x3c0>)
10009b38:	4934      	ldr	r1, [pc, #208]	; (10009c0c <sms_imu_selftest+0x3c4>)
10009b3a:	47b8      	blx	r7
10009b3c:	2200      	movs	r2, #0
10009b3e:	4b36      	ldr	r3, [pc, #216]	; (10009c18 <sms_imu_selftest+0x3d0>)
10009b40:	47a8      	blx	r5
10009b42:	47a0      	blx	r4
10009b44:	900d      	str	r0, [sp, #52]	; 0x34
10009b46:	2400      	movs	r4, #0
	
	// Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
	// To get percent, must multiply by 100
	for (int i = 0; i < 3; i++) {
		destination[i]   = 100.0*((float)(a_stavg[i] - a_avg[i]))/factory_trim[i] - 100.;   // Report percent differences
10009b48:	4b35      	ldr	r3, [pc, #212]	; (10009c20 <sms_imu_selftest+0x3d8>)
10009b4a:	4699      	mov	r9, r3
10009b4c:	4d2b      	ldr	r5, [pc, #172]	; (10009bfc <sms_imu_selftest+0x3b4>)
10009b4e:	4b31      	ldr	r3, [pc, #196]	; (10009c14 <sms_imu_selftest+0x3cc>)
10009b50:	4698      	mov	r8, r3
10009b52:	4b34      	ldr	r3, [pc, #208]	; (10009c24 <sms_imu_selftest+0x3dc>)
10009b54:	469a      	mov	sl, r3
10009b56:	4f2a      	ldr	r7, [pc, #168]	; (10009c00 <sms_imu_selftest+0x3b8>)
10009b58:	4e30      	ldr	r6, [pc, #192]	; (10009c1c <sms_imu_selftest+0x3d4>)
10009b5a:	ab11      	add	r3, sp, #68	; 0x44
10009b5c:	58e3      	ldr	r3, [r4, r3]
10009b5e:	aa14      	add	r2, sp, #80	; 0x50
10009b60:	58a0      	ldr	r0, [r4, r2]
10009b62:	1a18      	subs	r0, r3, r0
10009b64:	47c8      	blx	r9
10009b66:	47a8      	blx	r5
10009b68:	2200      	movs	r2, #0
10009b6a:	4b2f      	ldr	r3, [pc, #188]	; (10009c28 <sms_imu_selftest+0x3e0>)
10009b6c:	47c0      	blx	r8
10009b6e:	9000      	str	r0, [sp, #0]
10009b70:	9101      	str	r1, [sp, #4]
10009b72:	ab08      	add	r3, sp, #32
10009b74:	58e0      	ldr	r0, [r4, r3]
10009b76:	47a8      	blx	r5
10009b78:	0002      	movs	r2, r0
10009b7a:	000b      	movs	r3, r1
10009b7c:	9800      	ldr	r0, [sp, #0]
10009b7e:	9901      	ldr	r1, [sp, #4]
10009b80:	47d0      	blx	sl
10009b82:	2200      	movs	r2, #0
10009b84:	4b28      	ldr	r3, [pc, #160]	; (10009c28 <sms_imu_selftest+0x3e0>)
10009b86:	47b8      	blx	r7
10009b88:	47b0      	blx	r6
10009b8a:	9b03      	ldr	r3, [sp, #12]
10009b8c:	5118      	str	r0, [r3, r4]
		destination[i+3] = 100.0*((float)(g_stavg[i] - g_avg[i]))/factory_trim[i+3] - 100.; // Report percent differences
10009b8e:	469b      	mov	fp, r3
10009b90:	44a3      	add	fp, r4
10009b92:	ab0e      	add	r3, sp, #56	; 0x38
10009b94:	58e3      	ldr	r3, [r4, r3]
10009b96:	aa17      	add	r2, sp, #92	; 0x5c
10009b98:	58a0      	ldr	r0, [r4, r2]
10009b9a:	1a18      	subs	r0, r3, r0
10009b9c:	47c8      	blx	r9
10009b9e:	47a8      	blx	r5
10009ba0:	2200      	movs	r2, #0
10009ba2:	4b21      	ldr	r3, [pc, #132]	; (10009c28 <sms_imu_selftest+0x3e0>)
10009ba4:	47c0      	blx	r8
10009ba6:	9000      	str	r0, [sp, #0]
10009ba8:	9101      	str	r1, [sp, #4]
10009baa:	0023      	movs	r3, r4
10009bac:	aa08      	add	r2, sp, #32
10009bae:	4694      	mov	ip, r2
10009bb0:	4463      	add	r3, ip
10009bb2:	68d8      	ldr	r0, [r3, #12]
10009bb4:	47a8      	blx	r5
10009bb6:	0002      	movs	r2, r0
10009bb8:	000b      	movs	r3, r1
10009bba:	9800      	ldr	r0, [sp, #0]
10009bbc:	9901      	ldr	r1, [sp, #4]
10009bbe:	47d0      	blx	sl
10009bc0:	2200      	movs	r2, #0
10009bc2:	4b19      	ldr	r3, [pc, #100]	; (10009c28 <sms_imu_selftest+0x3e0>)
10009bc4:	47b8      	blx	r7
10009bc6:	47b0      	blx	r6
10009bc8:	465b      	mov	r3, fp
10009bca:	60d8      	str	r0, [r3, #12]
10009bcc:	3404      	adds	r4, #4
	factory_trim[4] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[4] - 1.0) )); // FT[Yg] factory trim calculation
	factory_trim[5] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[5] - 1.0) )); // FT[Zg] factory trim calculation
	
	// Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
	// To get percent, must multiply by 100
	for (int i = 0; i < 3; i++) {
10009bce:	2c0c      	cmp	r4, #12
10009bd0:	d1c3      	bne.n	10009b5a <sms_imu_selftest+0x312>
		destination[i]   = 100.0*((float)(a_stavg[i] - a_avg[i]))/factory_trim[i] - 100.;   // Report percent differences
		destination[i+3] = 100.0*((float)(g_stavg[i] - g_avg[i]))/factory_trim[i+3] - 100.; // Report percent differences
	}

}
10009bd2:	b01d      	add	sp, #116	; 0x74
10009bd4:	bc3c      	pop	{r2, r3, r4, r5}
10009bd6:	4690      	mov	r8, r2
10009bd8:	4699      	mov	r9, r3
10009bda:	46a2      	mov	sl, r4
10009bdc:	46ab      	mov	fp, r5
10009bde:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009be0:	10015781 	.word	0x10015781
10009be4:	100092c5 	.word	0x100092c5
10009be8:	100090e5 	.word	0x100090e5
10009bec:	10012b69 	.word	0x10012b69
10009bf0:	1000a345 	.word	0x1000a345
10009bf4:	10009779 	.word	0x10009779
10009bf8:	10013891 	.word	0x10013891
10009bfc:	100154e9 	.word	0x100154e9
10009c00:	10014ca1 	.word	0x10014ca1
10009c04:	3ff00000 	.word	0x3ff00000
10009c08:	c28f5c29 	.word	0xc28f5c29
10009c0c:	3ff028f5 	.word	0x3ff028f5
10009c10:	1001180d 	.word	0x1001180d
10009c14:	100147ad 	.word	0x100147ad
10009c18:	40a47800 	.word	0x40a47800
10009c1c:	10015591 	.word	0x10015591
10009c20:	10013801 	.word	0x10013801
10009c24:	10013f65 	.word	0x10013f65
10009c28:	40590000 	.word	0x40590000

10009c2c <sms_imu_mpu_check>:
	return 0;
}

/* Sensor setup functions... */
/* Check if MPU responds and make a self test */
int sms_imu_mpu_check(void) {
10009c2c:	b510      	push	{r4, lr}
	int retVal = -1;
	uint8_t c = readByte(MPU9250_ADDRESS, WHO_AM_I_MPU9250);
10009c2e:	2175      	movs	r1, #117	; 0x75
10009c30:	2069      	movs	r0, #105	; 0x69
10009c32:	4b06      	ldr	r3, [pc, #24]	; (10009c4c <sms_imu_mpu_check+0x20>)
10009c34:	4798      	blx	r3
	if(c == 0x71) {
10009c36:	2871      	cmp	r0, #113	; 0x71
10009c38:	d104      	bne.n	10009c44 <sms_imu_mpu_check+0x18>
		//DBG_LOG("[sms_mpu_check]\t\tMPU-9250 is online...");
		sms_imu_selftest(imu_device.config.self_test);
10009c3a:	4805      	ldr	r0, [pc, #20]	; (10009c50 <sms_imu_mpu_check+0x24>)
10009c3c:	4b05      	ldr	r3, [pc, #20]	; (10009c54 <sms_imu_mpu_check+0x28>)
10009c3e:	4798      	blx	r3
		//DBG_LOG("[sms_mpu_check]\t\tMPU-9250 self-test passed");
		retVal = 0;
10009c40:	2000      	movs	r0, #0
10009c42:	e001      	b.n	10009c48 <sms_imu_mpu_check+0x1c>
}

/* Sensor setup functions... */
/* Check if MPU responds and make a self test */
int sms_imu_mpu_check(void) {
	int retVal = -1;
10009c44:	2001      	movs	r0, #1
10009c46:	4240      	negs	r0, r0
		sms_imu_selftest(imu_device.config.self_test);
		//DBG_LOG("[sms_mpu_check]\t\tMPU-9250 self-test passed");
		retVal = 0;
	}
	return retVal;
}
10009c48:	bd10      	pop	{r4, pc}
10009c4a:	46c0      	nop			; (mov r8, r8)
10009c4c:	10009779 	.word	0x10009779
10009c50:	1001a1bc 	.word	0x1001a1bc
10009c54:	10009849 	.word	0x10009849

10009c58 <sms_imu_startup>:
		send_plf_int_msg_ind(SMS_IMU_DRDY_PIN, GPIO_CALLBACK_RISING, NULL, 0);
	}
}
/* Startup function */
int sms_imu_startup(void)
{
10009c58:	b510      	push	{r4, lr}
	/* MPU */
	if(sms_imu_mpu_check()) return -1;
10009c5a:	4b0d      	ldr	r3, [pc, #52]	; (10009c90 <sms_imu_startup+0x38>)
10009c5c:	4798      	blx	r3
10009c5e:	2800      	cmp	r0, #0
10009c60:	d10e      	bne.n	10009c80 <sms_imu_startup+0x28>
	sms_imu_mpu_calibrate(imu_device.config.gyro_bias, imu_device.config.accel_bias);
10009c62:	490c      	ldr	r1, [pc, #48]	; (10009c94 <sms_imu_startup+0x3c>)
10009c64:	0008      	movs	r0, r1
10009c66:	380c      	subs	r0, #12
10009c68:	4b0b      	ldr	r3, [pc, #44]	; (10009c98 <sms_imu_startup+0x40>)
10009c6a:	4798      	blx	r3
	//DBG_LOG("MPU calibrated... bias values: %ld %ld %ld / %ld %ld %ld", (uint32_t)(imu_device.config.gyro_bias[0] * 10000), (uint32_t)(imu_device.config.gyro_bias[1] * 10000), (uint32_t)(imu_device.config.gyro_bias[2] * 10000), (uint32_t)(imu_device.config.accel_bias[0] * 10000), (uint32_t)(imu_device.config.accel_bias[1] * 10000), (uint32_t)(imu_device.config.accel_bias[2] * 10000));
	sms_imu_mpu_initialize();
10009c6c:	4b0b      	ldr	r3, [pc, #44]	; (10009c9c <sms_imu_startup+0x44>)
10009c6e:	4798      	blx	r3
	
	/* Compass */
	if(sms_imu_comp_check()) return -1;
10009c70:	4b0b      	ldr	r3, [pc, #44]	; (10009ca0 <sms_imu_startup+0x48>)
10009c72:	4798      	blx	r3
10009c74:	1e04      	subs	r4, r0, #0
10009c76:	d106      	bne.n	10009c86 <sms_imu_startup+0x2e>
	sms_imu_comp_initialize(imu_device.config.mag_calibration);
10009c78:	480a      	ldr	r0, [pc, #40]	; (10009ca4 <sms_imu_startup+0x4c>)
10009c7a:	4b0b      	ldr	r3, [pc, #44]	; (10009ca8 <sms_imu_startup+0x50>)
10009c7c:	4798      	blx	r3
	//DBG_LOG("Compass initialized... calibration values: %ld %ld %ld", (uint32_t)(mpu_device.config.mag_calibration[0] * 10000), (uint32_t)(mpu_device.config.mag_calibration[1] * 10000), (uint32_t)(mpu_device.config.mag_calibration[2] * 10000));
	
	return 0;
10009c7e:	e004      	b.n	10009c8a <sms_imu_startup+0x32>
}
/* Startup function */
int sms_imu_startup(void)
{
	/* MPU */
	if(sms_imu_mpu_check()) return -1;
10009c80:	2401      	movs	r4, #1
10009c82:	4264      	negs	r4, r4
10009c84:	e001      	b.n	10009c8a <sms_imu_startup+0x32>
	sms_imu_mpu_calibrate(imu_device.config.gyro_bias, imu_device.config.accel_bias);
	//DBG_LOG("MPU calibrated... bias values: %ld %ld %ld / %ld %ld %ld", (uint32_t)(imu_device.config.gyro_bias[0] * 10000), (uint32_t)(imu_device.config.gyro_bias[1] * 10000), (uint32_t)(imu_device.config.gyro_bias[2] * 10000), (uint32_t)(imu_device.config.accel_bias[0] * 10000), (uint32_t)(imu_device.config.accel_bias[1] * 10000), (uint32_t)(imu_device.config.accel_bias[2] * 10000));
	sms_imu_mpu_initialize();
	
	/* Compass */
	if(sms_imu_comp_check()) return -1;
10009c86:	2401      	movs	r4, #1
10009c88:	4264      	negs	r4, r4
	sms_imu_comp_initialize(imu_device.config.mag_calibration);
	//DBG_LOG("Compass initialized... calibration values: %ld %ld %ld", (uint32_t)(mpu_device.config.mag_calibration[0] * 10000), (uint32_t)(mpu_device.config.mag_calibration[1] * 10000), (uint32_t)(mpu_device.config.mag_calibration[2] * 10000));
	
	return 0;
}
10009c8a:	0020      	movs	r0, r4
10009c8c:	bd10      	pop	{r4, pc}
10009c8e:	46c0      	nop			; (mov r8, r8)
10009c90:	10009c2d 	.word	0x10009c2d
10009c94:	1001a1e0 	.word	0x1001a1e0
10009c98:	100092dd 	.word	0x100092dd
10009c9c:	100097a9 	.word	0x100097a9
10009ca0:	10009791 	.word	0x10009791
10009ca4:	1001a1f8 	.word	0x1001a1f8
10009ca8:	10009655 	.word	0x10009655

10009cac <sms_led_switch_on>:
    sms_led_switch_off(SMS_LED_0);
}


void sms_led_switch_on(enum sms_leds led)
{
10009cac:	b510      	push	{r4, lr}
    gpio_pin_set_output_level(led, SMS_LED_ACTIVE);
10009cae:	2100      	movs	r1, #0
10009cb0:	4b01      	ldr	r3, [pc, #4]	; (10009cb8 <sms_led_switch_on+0xc>)
10009cb2:	4798      	blx	r3
}
10009cb4:	bd10      	pop	{r4, pc}
10009cb6:	46c0      	nop			; (mov r8, r8)
10009cb8:	1000ac29 	.word	0x1000ac29

10009cbc <sms_led_switch_off>:


void sms_led_switch_off(enum sms_leds led)
{
10009cbc:	b510      	push	{r4, lr}
    gpio_pin_set_output_level(led, SMS_LED_INACTIVE);
10009cbe:	2101      	movs	r1, #1
10009cc0:	4b01      	ldr	r3, [pc, #4]	; (10009cc8 <sms_led_switch_off+0xc>)
10009cc2:	4798      	blx	r3
}
10009cc4:	bd10      	pop	{r4, pc}
10009cc6:	46c0      	nop			; (mov r8, r8)
10009cc8:	1000ac29 	.word	0x1000ac29

10009ccc <sms_led_gpio_init>:
 */ 

#include "sms_led.h"

void sms_led_gpio_init(void)
{
10009ccc:	b510      	push	{r4, lr}
10009cce:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;

    /* LED0 @ GPIO_LP_GPIO_22 */
    gpio_get_config_defaults(&config_gpio_pin);
10009cd0:	ac01      	add	r4, sp, #4
10009cd2:	0020      	movs	r0, r4
10009cd4:	4b0a      	ldr	r3, [pc, #40]	; (10009d00 <sms_led_gpio_init+0x34>)
10009cd6:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_OUTPUT;
10009cd8:	2301      	movs	r3, #1
10009cda:	7023      	strb	r3, [r4, #0]
    if(gpio_pin_set_config(SMS_LED_0, &config_gpio_pin) != STATUS_OK) {
10009cdc:	0021      	movs	r1, r4
10009cde:	2016      	movs	r0, #22
10009ce0:	4b08      	ldr	r3, [pc, #32]	; (10009d04 <sms_led_gpio_init+0x38>)
10009ce2:	4798      	blx	r3
10009ce4:	2800      	cmp	r0, #0
10009ce6:	d005      	beq.n	10009cf4 <sms_led_gpio_init+0x28>
        DBG_LOG_DEV("[sms_led_gpio_init]\tproblem while setting up led0");
10009ce8:	4807      	ldr	r0, [pc, #28]	; (10009d08 <sms_led_gpio_init+0x3c>)
10009cea:	4b08      	ldr	r3, [pc, #32]	; (10009d0c <sms_led_gpio_init+0x40>)
10009cec:	4798      	blx	r3
10009cee:	4808      	ldr	r0, [pc, #32]	; (10009d10 <sms_led_gpio_init+0x44>)
10009cf0:	4b08      	ldr	r3, [pc, #32]	; (10009d14 <sms_led_gpio_init+0x48>)
10009cf2:	4798      	blx	r3
    }
    sms_led_switch_off(SMS_LED_0);
10009cf4:	2016      	movs	r0, #22
10009cf6:	4b08      	ldr	r3, [pc, #32]	; (10009d18 <sms_led_gpio_init+0x4c>)
10009cf8:	4798      	blx	r3
}
10009cfa:	b002      	add	sp, #8
10009cfc:	bd10      	pop	{r4, pc}
10009cfe:	46c0      	nop			; (mov r8, r8)
10009d00:	1000a9c1 	.word	0x1000a9c1
10009d04:	1000a9d1 	.word	0x1000a9d1
10009d08:	10016a10 	.word	0x10016a10
10009d0c:	100159e9 	.word	0x100159e9
10009d10:	10017130 	.word	0x10017130
10009d14:	100158c9 	.word	0x100158c9
10009d18:	10009cbd 	.word	0x10009cbd

10009d1c <sms_led_toggle>:
    gpio_pin_set_output_level(led, SMS_LED_INACTIVE);
}


void sms_led_toggle(enum sms_leds led)
{
10009d1c:	b510      	push	{r4, lr}
10009d1e:	0004      	movs	r4, r0
}


bool sms_led_get_state(enum sms_leds led)
{
    return gpio_pin_get_output_level(led);
10009d20:	4b05      	ldr	r3, [pc, #20]	; (10009d38 <sms_led_toggle+0x1c>)
10009d22:	4798      	blx	r3


void sms_led_toggle(enum sms_leds led)
{
    bool state = sms_led_get_state(led);
    if(state == SMS_LED_ACTIVE) sms_led_switch_off(led);
10009d24:	2800      	cmp	r0, #0
10009d26:	d103      	bne.n	10009d30 <sms_led_toggle+0x14>
10009d28:	0020      	movs	r0, r4
10009d2a:	4b04      	ldr	r3, [pc, #16]	; (10009d3c <sms_led_toggle+0x20>)
10009d2c:	4798      	blx	r3
10009d2e:	e002      	b.n	10009d36 <sms_led_toggle+0x1a>
    else sms_led_switch_on(led);
10009d30:	0020      	movs	r0, r4
10009d32:	4b03      	ldr	r3, [pc, #12]	; (10009d40 <sms_led_toggle+0x24>)
10009d34:	4798      	blx	r3
}
10009d36:	bd10      	pop	{r4, pc}
10009d38:	1000abd9 	.word	0x1000abd9
10009d3c:	10009cbd 	.word	0x10009cbd
10009d40:	10009cad 	.word	0x10009cad

10009d44 <sms_pressure_init_variables>:
#include "sms_pressure.h"

void sms_pressure_init_variables(void)
{
	//pressure_device.hal.current_state = MS58_STATE_NONE;
	pressure_device.state = PRESSURE_STATE_OFF;
10009d44:	4b05      	ldr	r3, [pc, #20]	; (10009d5c <sms_pressure_init_variables+0x18>)
10009d46:	2200      	movs	r2, #0
10009d48:	212b      	movs	r1, #43	; 0x2b
10009d4a:	545a      	strb	r2, [r3, r1]
	pressure_device.interrupt.rts = false;
10009d4c:	3901      	subs	r1, #1
10009d4e:	545a      	strb	r2, [r3, r1]
	pressure_device.interrupt.enabled = false;
10009d50:	3902      	subs	r1, #2
10009d52:	545a      	strb	r2, [r3, r1]
	pressure_device.interrupt.new_value = false;
10009d54:	3101      	adds	r1, #1
10009d56:	545a      	strb	r2, [r3, r1]
}
10009d58:	4770      	bx	lr
10009d5a:	46c0      	nop			; (mov r8, r8)
10009d5c:	1001a100 	.word	0x1001a100

10009d60 <sms_pressure_ms58_reset>:
    /* Read the PROM values */
    return sms_pressure_ms58_read_prom();
}

enum status_code sms_pressure_ms58_reset(void)
{
10009d60:	b510      	push	{r4, lr}
10009d62:	b082      	sub	sp, #8
	enum status_code status;
    spi_wdata[0] = MS58_RESET;
10009d64:	4a08      	ldr	r2, [pc, #32]	; (10009d88 <sms_pressure_ms58_reset+0x28>)
10009d66:	231e      	movs	r3, #30
10009d68:	7013      	strb	r3, [r2, #0]
    if((status = sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 1)) != STATUS_OK) return status;
10009d6a:	3b1d      	subs	r3, #29
10009d6c:	9300      	str	r3, [sp, #0]
10009d6e:	4b07      	ldr	r3, [pc, #28]	; (10009d8c <sms_pressure_ms58_reset+0x2c>)
10009d70:	4907      	ldr	r1, [pc, #28]	; (10009d90 <sms_pressure_ms58_reset+0x30>)
10009d72:	4808      	ldr	r0, [pc, #32]	; (10009d94 <sms_pressure_ms58_reset+0x34>)
10009d74:	4c08      	ldr	r4, [pc, #32]	; (10009d98 <sms_pressure_ms58_reset+0x38>)
10009d76:	47a0      	blx	r4
10009d78:	1e04      	subs	r4, r0, #0
10009d7a:	d102      	bne.n	10009d82 <sms_pressure_ms58_reset+0x22>
	
	delay_ms(SMS_PRESSURE_RESET_MS);
10009d7c:	2003      	movs	r0, #3
10009d7e:	4b07      	ldr	r3, [pc, #28]	; (10009d9c <sms_pressure_ms58_reset+0x3c>)
10009d80:	4798      	blx	r3
	return STATUS_OK;
}
10009d82:	0020      	movs	r0, r4
10009d84:	b002      	add	sp, #8
10009d86:	bd10      	pop	{r4, pc}
10009d88:	1001a0f0 	.word	0x1001a0f0
10009d8c:	1001a0dc 	.word	0x1001a0dc
10009d90:	1001a19c 	.word	0x1001a19c
10009d94:	1001a1a8 	.word	0x1001a1a8
10009d98:	1000a1c9 	.word	0x1000a1c9
10009d9c:	1000a345 	.word	0x1000a345

10009da0 <sms_pressure_ms58_read_prom>:
		//if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
	}
}

int sms_pressure_ms58_read_prom(void)
{
10009da0:	b510      	push	{r4, lr}
10009da2:	b082      	sub	sp, #8
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] reading bytes... ");
    spi_wdata[0] = MS58_PROM_READ_1;
10009da4:	4a4c      	ldr	r2, [pc, #304]	; (10009ed8 <sms_pressure_ms58_read_prom+0x138>)
10009da6:	23a2      	movs	r3, #162	; 0xa2
10009da8:	7013      	strb	r3, [r2, #0]
    spi_wdata[1] = 0x00;
10009daa:	2300      	movs	r3, #0
10009dac:	7053      	strb	r3, [r2, #1]
    spi_wdata[2] = 0x00;
10009dae:	7093      	strb	r3, [r2, #2]
    if(sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3) != STATUS_OK) return -1;
10009db0:	3303      	adds	r3, #3
10009db2:	9300      	str	r3, [sp, #0]
10009db4:	4b49      	ldr	r3, [pc, #292]	; (10009edc <sms_pressure_ms58_read_prom+0x13c>)
10009db6:	494a      	ldr	r1, [pc, #296]	; (10009ee0 <sms_pressure_ms58_read_prom+0x140>)
10009db8:	484a      	ldr	r0, [pc, #296]	; (10009ee4 <sms_pressure_ms58_read_prom+0x144>)
10009dba:	4c4b      	ldr	r4, [pc, #300]	; (10009ee8 <sms_pressure_ms58_read_prom+0x148>)
10009dbc:	47a0      	blx	r4
10009dbe:	2800      	cmp	r0, #0
10009dc0:	d173      	bne.n	10009eaa <sms_pressure_ms58_read_prom+0x10a>
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.output.prom_values[1] = (spi_rdata[1] << 8) | (spi_rdata[2]);
10009dc2:	4b46      	ldr	r3, [pc, #280]	; (10009edc <sms_pressure_ms58_read_prom+0x13c>)
10009dc4:	785a      	ldrb	r2, [r3, #1]
10009dc6:	0212      	lsls	r2, r2, #8
10009dc8:	7899      	ldrb	r1, [r3, #2]
10009dca:	430a      	orrs	r2, r1
10009dcc:	4947      	ldr	r1, [pc, #284]	; (10009eec <sms_pressure_ms58_read_prom+0x14c>)
10009dce:	80ca      	strh	r2, [r1, #6]

    spi_wdata[0] = MS58_PROM_READ_2;
10009dd0:	4a41      	ldr	r2, [pc, #260]	; (10009ed8 <sms_pressure_ms58_read_prom+0x138>)
10009dd2:	21a4      	movs	r1, #164	; 0xa4
10009dd4:	7011      	strb	r1, [r2, #0]
    if(sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3) != STATUS_OK) return -1;
10009dd6:	39a1      	subs	r1, #161	; 0xa1
10009dd8:	9100      	str	r1, [sp, #0]
10009dda:	4941      	ldr	r1, [pc, #260]	; (10009ee0 <sms_pressure_ms58_read_prom+0x140>)
10009ddc:	4841      	ldr	r0, [pc, #260]	; (10009ee4 <sms_pressure_ms58_read_prom+0x144>)
10009dde:	4c42      	ldr	r4, [pc, #264]	; (10009ee8 <sms_pressure_ms58_read_prom+0x148>)
10009de0:	47a0      	blx	r4
10009de2:	2800      	cmp	r0, #0
10009de4:	d164      	bne.n	10009eb0 <sms_pressure_ms58_read_prom+0x110>
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.output.prom_values[2] = (spi_rdata[1] << 8) | (spi_rdata[2]);
10009de6:	4b3d      	ldr	r3, [pc, #244]	; (10009edc <sms_pressure_ms58_read_prom+0x13c>)
10009de8:	785a      	ldrb	r2, [r3, #1]
10009dea:	0212      	lsls	r2, r2, #8
10009dec:	7899      	ldrb	r1, [r3, #2]
10009dee:	430a      	orrs	r2, r1
10009df0:	493e      	ldr	r1, [pc, #248]	; (10009eec <sms_pressure_ms58_read_prom+0x14c>)
10009df2:	810a      	strh	r2, [r1, #8]

    spi_wdata[0] = MS58_PROM_READ_3;
10009df4:	4a38      	ldr	r2, [pc, #224]	; (10009ed8 <sms_pressure_ms58_read_prom+0x138>)
10009df6:	21a6      	movs	r1, #166	; 0xa6
10009df8:	7011      	strb	r1, [r2, #0]
    if(sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3) != STATUS_OK) return -1;
10009dfa:	39a3      	subs	r1, #163	; 0xa3
10009dfc:	9100      	str	r1, [sp, #0]
10009dfe:	4938      	ldr	r1, [pc, #224]	; (10009ee0 <sms_pressure_ms58_read_prom+0x140>)
10009e00:	4838      	ldr	r0, [pc, #224]	; (10009ee4 <sms_pressure_ms58_read_prom+0x144>)
10009e02:	4c39      	ldr	r4, [pc, #228]	; (10009ee8 <sms_pressure_ms58_read_prom+0x148>)
10009e04:	47a0      	blx	r4
10009e06:	2800      	cmp	r0, #0
10009e08:	d155      	bne.n	10009eb6 <sms_pressure_ms58_read_prom+0x116>
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.output.prom_values[3] = (spi_rdata[1] << 8) | (spi_rdata[2]);
10009e0a:	4b34      	ldr	r3, [pc, #208]	; (10009edc <sms_pressure_ms58_read_prom+0x13c>)
10009e0c:	785a      	ldrb	r2, [r3, #1]
10009e0e:	0212      	lsls	r2, r2, #8
10009e10:	7899      	ldrb	r1, [r3, #2]
10009e12:	430a      	orrs	r2, r1
10009e14:	4935      	ldr	r1, [pc, #212]	; (10009eec <sms_pressure_ms58_read_prom+0x14c>)
10009e16:	814a      	strh	r2, [r1, #10]

    spi_wdata[0] = MS58_PROM_READ_4;
10009e18:	4a2f      	ldr	r2, [pc, #188]	; (10009ed8 <sms_pressure_ms58_read_prom+0x138>)
10009e1a:	21a8      	movs	r1, #168	; 0xa8
10009e1c:	7011      	strb	r1, [r2, #0]
    if(sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3) != STATUS_OK) return -1;
10009e1e:	39a5      	subs	r1, #165	; 0xa5
10009e20:	9100      	str	r1, [sp, #0]
10009e22:	492f      	ldr	r1, [pc, #188]	; (10009ee0 <sms_pressure_ms58_read_prom+0x140>)
10009e24:	482f      	ldr	r0, [pc, #188]	; (10009ee4 <sms_pressure_ms58_read_prom+0x144>)
10009e26:	4c30      	ldr	r4, [pc, #192]	; (10009ee8 <sms_pressure_ms58_read_prom+0x148>)
10009e28:	47a0      	blx	r4
10009e2a:	2800      	cmp	r0, #0
10009e2c:	d146      	bne.n	10009ebc <sms_pressure_ms58_read_prom+0x11c>
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.output.prom_values[4] = (spi_rdata[1] << 8) | (spi_rdata[2]);
10009e2e:	4b2b      	ldr	r3, [pc, #172]	; (10009edc <sms_pressure_ms58_read_prom+0x13c>)
10009e30:	785a      	ldrb	r2, [r3, #1]
10009e32:	0212      	lsls	r2, r2, #8
10009e34:	7899      	ldrb	r1, [r3, #2]
10009e36:	430a      	orrs	r2, r1
10009e38:	492c      	ldr	r1, [pc, #176]	; (10009eec <sms_pressure_ms58_read_prom+0x14c>)
10009e3a:	818a      	strh	r2, [r1, #12]

    spi_wdata[0] = MS58_PROM_READ_5;
10009e3c:	4a26      	ldr	r2, [pc, #152]	; (10009ed8 <sms_pressure_ms58_read_prom+0x138>)
10009e3e:	21aa      	movs	r1, #170	; 0xaa
10009e40:	7011      	strb	r1, [r2, #0]
    if(sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3) != STATUS_OK) return -1;
10009e42:	39a7      	subs	r1, #167	; 0xa7
10009e44:	9100      	str	r1, [sp, #0]
10009e46:	4926      	ldr	r1, [pc, #152]	; (10009ee0 <sms_pressure_ms58_read_prom+0x140>)
10009e48:	4826      	ldr	r0, [pc, #152]	; (10009ee4 <sms_pressure_ms58_read_prom+0x144>)
10009e4a:	4c27      	ldr	r4, [pc, #156]	; (10009ee8 <sms_pressure_ms58_read_prom+0x148>)
10009e4c:	47a0      	blx	r4
10009e4e:	2800      	cmp	r0, #0
10009e50:	d137      	bne.n	10009ec2 <sms_pressure_ms58_read_prom+0x122>
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.output.prom_values[5] = (spi_rdata[1] << 8) | (spi_rdata[2]);
10009e52:	4b22      	ldr	r3, [pc, #136]	; (10009edc <sms_pressure_ms58_read_prom+0x13c>)
10009e54:	785a      	ldrb	r2, [r3, #1]
10009e56:	0212      	lsls	r2, r2, #8
10009e58:	7899      	ldrb	r1, [r3, #2]
10009e5a:	430a      	orrs	r2, r1
10009e5c:	4923      	ldr	r1, [pc, #140]	; (10009eec <sms_pressure_ms58_read_prom+0x14c>)
10009e5e:	81ca      	strh	r2, [r1, #14]

    spi_wdata[0] = MS58_PROM_READ_6;
10009e60:	4a1d      	ldr	r2, [pc, #116]	; (10009ed8 <sms_pressure_ms58_read_prom+0x138>)
10009e62:	21ac      	movs	r1, #172	; 0xac
10009e64:	7011      	strb	r1, [r2, #0]
    if(sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3) != STATUS_OK) return -1;
10009e66:	39a9      	subs	r1, #169	; 0xa9
10009e68:	9100      	str	r1, [sp, #0]
10009e6a:	491d      	ldr	r1, [pc, #116]	; (10009ee0 <sms_pressure_ms58_read_prom+0x140>)
10009e6c:	481d      	ldr	r0, [pc, #116]	; (10009ee4 <sms_pressure_ms58_read_prom+0x144>)
10009e6e:	4c1e      	ldr	r4, [pc, #120]	; (10009ee8 <sms_pressure_ms58_read_prom+0x148>)
10009e70:	47a0      	blx	r4
10009e72:	2800      	cmp	r0, #0
10009e74:	d128      	bne.n	10009ec8 <sms_pressure_ms58_read_prom+0x128>
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.output.prom_values[6] = (spi_rdata[1] << 8) | (spi_rdata[2]);
10009e76:	4b19      	ldr	r3, [pc, #100]	; (10009edc <sms_pressure_ms58_read_prom+0x13c>)
10009e78:	785a      	ldrb	r2, [r3, #1]
10009e7a:	0212      	lsls	r2, r2, #8
10009e7c:	7899      	ldrb	r1, [r3, #2]
10009e7e:	430a      	orrs	r2, r1
10009e80:	491a      	ldr	r1, [pc, #104]	; (10009eec <sms_pressure_ms58_read_prom+0x14c>)
10009e82:	820a      	strh	r2, [r1, #16]

    spi_wdata[0] = MS58_PROM_READ_7;
10009e84:	4a14      	ldr	r2, [pc, #80]	; (10009ed8 <sms_pressure_ms58_read_prom+0x138>)
10009e86:	21ae      	movs	r1, #174	; 0xae
10009e88:	7011      	strb	r1, [r2, #0]
    if(sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3) != STATUS_OK) return -1;
10009e8a:	39ab      	subs	r1, #171	; 0xab
10009e8c:	9100      	str	r1, [sp, #0]
10009e8e:	4914      	ldr	r1, [pc, #80]	; (10009ee0 <sms_pressure_ms58_read_prom+0x140>)
10009e90:	4814      	ldr	r0, [pc, #80]	; (10009ee4 <sms_pressure_ms58_read_prom+0x144>)
10009e92:	4c15      	ldr	r4, [pc, #84]	; (10009ee8 <sms_pressure_ms58_read_prom+0x148>)
10009e94:	47a0      	blx	r4
10009e96:	2800      	cmp	r0, #0
10009e98:	d119      	bne.n	10009ece <sms_pressure_ms58_read_prom+0x12e>
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.output.prom_values[7] = (spi_rdata[1] << 8) | (spi_rdata[2]);
10009e9a:	4a10      	ldr	r2, [pc, #64]	; (10009edc <sms_pressure_ms58_read_prom+0x13c>)
10009e9c:	7853      	ldrb	r3, [r2, #1]
10009e9e:	021b      	lsls	r3, r3, #8
10009ea0:	7892      	ldrb	r2, [r2, #2]
10009ea2:	4313      	orrs	r3, r2
10009ea4:	4a11      	ldr	r2, [pc, #68]	; (10009eec <sms_pressure_ms58_read_prom+0x14c>)
10009ea6:	8253      	strh	r3, [r2, #18]
    //DBG_LOG_CONT_DEV("done! Results:");
    //for(uint8_t i = 1; i < MS58_PROM_VALUES_MAX; i++) {
        //DBG_LOG_DEV("  C%d -> %d", (i+1), ms58_device.prom_values[i]);
    //}

    return 0;
10009ea8:	e013      	b.n	10009ed2 <sms_pressure_ms58_read_prom+0x132>
{
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] reading bytes... ");
    spi_wdata[0] = MS58_PROM_READ_1;
    spi_wdata[1] = 0x00;
    spi_wdata[2] = 0x00;
    if(sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3) != STATUS_OK) return -1;
10009eaa:	2001      	movs	r0, #1
10009eac:	4240      	negs	r0, r0
10009eae:	e010      	b.n	10009ed2 <sms_pressure_ms58_read_prom+0x132>
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.output.prom_values[1] = (spi_rdata[1] << 8) | (spi_rdata[2]);

    spi_wdata[0] = MS58_PROM_READ_2;
    if(sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3) != STATUS_OK) return -1;
10009eb0:	2001      	movs	r0, #1
10009eb2:	4240      	negs	r0, r0
10009eb4:	e00d      	b.n	10009ed2 <sms_pressure_ms58_read_prom+0x132>
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.output.prom_values[2] = (spi_rdata[1] << 8) | (spi_rdata[2]);

    spi_wdata[0] = MS58_PROM_READ_3;
    if(sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3) != STATUS_OK) return -1;
10009eb6:	2001      	movs	r0, #1
10009eb8:	4240      	negs	r0, r0
10009eba:	e00a      	b.n	10009ed2 <sms_pressure_ms58_read_prom+0x132>
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.output.prom_values[3] = (spi_rdata[1] << 8) | (spi_rdata[2]);

    spi_wdata[0] = MS58_PROM_READ_4;
    if(sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3) != STATUS_OK) return -1;
10009ebc:	2001      	movs	r0, #1
10009ebe:	4240      	negs	r0, r0
10009ec0:	e007      	b.n	10009ed2 <sms_pressure_ms58_read_prom+0x132>
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.output.prom_values[4] = (spi_rdata[1] << 8) | (spi_rdata[2]);

    spi_wdata[0] = MS58_PROM_READ_5;
    if(sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3) != STATUS_OK) return -1;
10009ec2:	2001      	movs	r0, #1
10009ec4:	4240      	negs	r0, r0
10009ec6:	e004      	b.n	10009ed2 <sms_pressure_ms58_read_prom+0x132>
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.output.prom_values[5] = (spi_rdata[1] << 8) | (spi_rdata[2]);

    spi_wdata[0] = MS58_PROM_READ_6;
    if(sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3) != STATUS_OK) return -1;
10009ec8:	2001      	movs	r0, #1
10009eca:	4240      	negs	r0, r0
10009ecc:	e001      	b.n	10009ed2 <sms_pressure_ms58_read_prom+0x132>
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.output.prom_values[6] = (spi_rdata[1] << 8) | (spi_rdata[2]);

    spi_wdata[0] = MS58_PROM_READ_7;
    if(sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3) != STATUS_OK) return -1;
10009ece:	2001      	movs	r0, #1
10009ed0:	4240      	negs	r0, r0
    //for(uint8_t i = 1; i < MS58_PROM_VALUES_MAX; i++) {
        //DBG_LOG_DEV("  C%d -> %d", (i+1), ms58_device.prom_values[i]);
    //}

    return 0;
}
10009ed2:	b002      	add	sp, #8
10009ed4:	bd10      	pop	{r4, pc}
10009ed6:	46c0      	nop			; (mov r8, r8)
10009ed8:	1001a0f0 	.word	0x1001a0f0
10009edc:	1001a0dc 	.word	0x1001a0dc
10009ee0:	1001a19c 	.word	0x1001a19c
10009ee4:	1001a1a8 	.word	0x1001a1a8
10009ee8:	1000a1c9 	.word	0x1000a1c9
10009eec:	1001a100 	.word	0x1001a100

10009ef0 <sms_pressure_startup>:
    /* Disable power supply by default */
    gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, false);
}

int sms_pressure_startup(void)
{
10009ef0:	b510      	push	{r4, lr}
    DBG_LOG_DEV("[sms_pressure_startup]\t\tStarting pressure sensor");
10009ef2:	4810      	ldr	r0, [pc, #64]	; (10009f34 <sms_pressure_startup+0x44>)
10009ef4:	4b10      	ldr	r3, [pc, #64]	; (10009f38 <sms_pressure_startup+0x48>)
10009ef6:	4798      	blx	r3
10009ef8:	4810      	ldr	r0, [pc, #64]	; (10009f3c <sms_pressure_startup+0x4c>)
10009efa:	4b11      	ldr	r3, [pc, #68]	; (10009f40 <sms_pressure_startup+0x50>)
10009efc:	4798      	blx	r3
    //gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, true); // switch on MS58 pressure sensor
    /* Disable buttons for reset time (~3 ms) to avoid conflict with dualtimer1 */
    //sms_button_toggle_callback(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
    //pressure_device.hal.current_state = MS58_STATE_RESETTING;
    /* Write the reset command to MS58 */
    if(sms_pressure_ms58_reset() != STATUS_OK) {
10009efe:	4b11      	ldr	r3, [pc, #68]	; (10009f44 <sms_pressure_startup+0x54>)
10009f00:	4798      	blx	r3
10009f02:	2800      	cmp	r0, #0
10009f04:	d008      	beq.n	10009f18 <sms_pressure_startup+0x28>
		DBG_LOG("[sms_pressure_startup]\t\t\tFailed to reset pressure device");
10009f06:	480b      	ldr	r0, [pc, #44]	; (10009f34 <sms_pressure_startup+0x44>)
10009f08:	4b0b      	ldr	r3, [pc, #44]	; (10009f38 <sms_pressure_startup+0x48>)
10009f0a:	4798      	blx	r3
10009f0c:	480e      	ldr	r0, [pc, #56]	; (10009f48 <sms_pressure_startup+0x58>)
10009f0e:	4b0c      	ldr	r3, [pc, #48]	; (10009f40 <sms_pressure_startup+0x50>)
10009f10:	4798      	blx	r3
		return -1;
10009f12:	2001      	movs	r0, #1
10009f14:	4240      	negs	r0, r0
10009f16:	e00b      	b.n	10009f30 <sms_pressure_startup+0x40>
}

int sms_pressure_init(void)
{
    /* Read the PROM values */
    return sms_pressure_ms58_read_prom();
10009f18:	4b0c      	ldr	r3, [pc, #48]	; (10009f4c <sms_pressure_startup+0x5c>)
10009f1a:	4798      	blx	r3
    /* Write the reset command to MS58 */
    if(sms_pressure_ms58_reset() != STATUS_OK) {
		DBG_LOG("[sms_pressure_startup]\t\t\tFailed to reset pressure device");
		return -1;
	}	
    if(sms_pressure_init() != STATUS_OK) {
10009f1c:	2800      	cmp	r0, #0
10009f1e:	d007      	beq.n	10009f30 <sms_pressure_startup+0x40>
        DBG_LOG("[sms_pressure_startup]\t\t\tFailed to initialize pressure device");
10009f20:	4804      	ldr	r0, [pc, #16]	; (10009f34 <sms_pressure_startup+0x44>)
10009f22:	4b05      	ldr	r3, [pc, #20]	; (10009f38 <sms_pressure_startup+0x48>)
10009f24:	4798      	blx	r3
10009f26:	480a      	ldr	r0, [pc, #40]	; (10009f50 <sms_pressure_startup+0x60>)
10009f28:	4b05      	ldr	r3, [pc, #20]	; (10009f40 <sms_pressure_startup+0x50>)
10009f2a:	4798      	blx	r3
        return -1;
10009f2c:	2001      	movs	r0, #1
10009f2e:	4240      	negs	r0, r0
    }
	return 0;
}
10009f30:	bd10      	pop	{r4, pc}
10009f32:	46c0      	nop			; (mov r8, r8)
10009f34:	10016a10 	.word	0x10016a10
10009f38:	100159e9 	.word	0x100159e9
10009f3c:	100171a4 	.word	0x100171a4
10009f40:	100158c9 	.word	0x100158c9
10009f44:	10009d61 	.word	0x10009d61
10009f48:	100171d8 	.word	0x100171d8
10009f4c:	10009da1 	.word	0x10009da1
10009f50:	10017214 	.word	0x10017214

10009f54 <sms_pressure_define_services>:

    DBG_LOG_DEV("[sms_pressure_ms58_calculate] temperature = %ld  pressure = %ld", pressure_device.output.temperature, pressure_device.output.pressure);
}

void sms_pressure_define_services(void)
{
10009f54:	b510      	push	{r4, lr}
10009f56:	b082      	sub	sp, #8
    at_ble_status_t status;
    uint8_t init_value = 0;
10009f58:	466b      	mov	r3, sp
10009f5a:	1dda      	adds	r2, r3, #7
10009f5c:	2300      	movs	r3, #0
10009f5e:	7013      	strb	r3, [r2, #0]
    sms_ble_service_init(BLE_SERV_PRESSURE, &pressure_device.service_handler, &init_value);
10009f60:	4c0d      	ldr	r4, [pc, #52]	; (10009f98 <sms_pressure_define_services+0x44>)
10009f62:	0021      	movs	r1, r4
10009f64:	2001      	movs	r0, #1
10009f66:	4b0d      	ldr	r3, [pc, #52]	; (10009f9c <sms_pressure_define_services+0x48>)
10009f68:	4798      	blx	r3
    if((status = sms_ble_primary_service_define(&pressure_device.service_handler)) != AT_BLE_SUCCESS) {
10009f6a:	0020      	movs	r0, r4
10009f6c:	4b0c      	ldr	r3, [pc, #48]	; (10009fa0 <sms_pressure_define_services+0x4c>)
10009f6e:	4798      	blx	r3
10009f70:	1e04      	subs	r4, r0, #0
10009f72:	d007      	beq.n	10009f84 <sms_pressure_define_services+0x30>
        DBG_LOG("[sms_pressure_define_services]\tServices defining failed, reason 0x%x", status);
10009f74:	480b      	ldr	r0, [pc, #44]	; (10009fa4 <sms_pressure_define_services+0x50>)
10009f76:	4b0c      	ldr	r3, [pc, #48]	; (10009fa8 <sms_pressure_define_services+0x54>)
10009f78:	4798      	blx	r3
10009f7a:	0021      	movs	r1, r4
10009f7c:	480b      	ldr	r0, [pc, #44]	; (10009fac <sms_pressure_define_services+0x58>)
10009f7e:	4b0c      	ldr	r3, [pc, #48]	; (10009fb0 <sms_pressure_define_services+0x5c>)
10009f80:	4798      	blx	r3
10009f82:	e007      	b.n	10009f94 <sms_pressure_define_services+0x40>
    }
    else {
        DBG_LOG_DEV("[sms_pressure_define_services]\tServices defined, SMS pressure handle: %d", pressure_device.service_handler.serv_handle);
10009f84:	4807      	ldr	r0, [pc, #28]	; (10009fa4 <sms_pressure_define_services+0x50>)
10009f86:	4b08      	ldr	r3, [pc, #32]	; (10009fa8 <sms_pressure_define_services+0x54>)
10009f88:	4798      	blx	r3
10009f8a:	4b0a      	ldr	r3, [pc, #40]	; (10009fb4 <sms_pressure_define_services+0x60>)
10009f8c:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
10009f8e:	480a      	ldr	r0, [pc, #40]	; (10009fb8 <sms_pressure_define_services+0x64>)
10009f90:	4b07      	ldr	r3, [pc, #28]	; (10009fb0 <sms_pressure_define_services+0x5c>)
10009f92:	4798      	blx	r3
    }
10009f94:	b002      	add	sp, #8
10009f96:	bd10      	pop	{r4, pc}
10009f98:	1001a12c 	.word	0x1001a12c
10009f9c:	100089d9 	.word	0x100089d9
10009fa0:	100089b5 	.word	0x100089b5
10009fa4:	10016a10 	.word	0x10016a10
10009fa8:	100159e9 	.word	0x100159e9
10009fac:	10017294 	.word	0x10017294
10009fb0:	100158c9 	.word	0x100158c9
10009fb4:	1001a100 	.word	0x1001a100
10009fb8:	100172dc 	.word	0x100172dc

10009fbc <sms_sensors_enable_callback>:
 */ 

#include "sms_peripheral1.h"

/* Sensors-related functions */
void sms_sensors_enable_callback(bool imu_cb, bool press_cb) {
10009fbc:	b510      	push	{r4, lr}
10009fbe:	000c      	movs	r4, r1
    /* IMU --> IMU_DRDY */
    if(imu_cb) {
10009fc0:	2800      	cmp	r0, #0
10009fc2:	d002      	beq.n	10009fca <sms_sensors_enable_callback+0xe>
        sms_imu_enable_callback();
10009fc4:	4b06      	ldr	r3, [pc, #24]	; (10009fe0 <sms_sensors_enable_callback+0x24>)
10009fc6:	4798      	blx	r3
10009fc8:	e001      	b.n	10009fce <sms_sensors_enable_callback+0x12>
    }
    else {
        sms_imu_disable_callback();
10009fca:	4b06      	ldr	r3, [pc, #24]	; (10009fe4 <sms_sensors_enable_callback+0x28>)
10009fcc:	4798      	blx	r3
     * Note: Since there is no direct mechanism to simply enable and disable
     *       the AON sleep timer interruption, we have to initialize it each
     *       time (and it starts running) and register the corresponding
     *       callback (and it enables the interrupt)
     */
    if(press_cb) {
10009fce:	2c00      	cmp	r4, #0
10009fd0:	d002      	beq.n	10009fd8 <sms_sensors_enable_callback+0x1c>
        sms_timer_aon_register_callback();
10009fd2:	4b05      	ldr	r3, [pc, #20]	; (10009fe8 <sms_sensors_enable_callback+0x2c>)
10009fd4:	4798      	blx	r3
10009fd6:	e001      	b.n	10009fdc <sms_sensors_enable_callback+0x20>
    }
    else {
        sms_timer_aon_unregister_callback();
10009fd8:	4b04      	ldr	r3, [pc, #16]	; (10009fec <sms_sensors_enable_callback+0x30>)
10009fda:	4798      	blx	r3
    }
}
10009fdc:	bd10      	pop	{r4, pc}
10009fde:	46c0      	nop			; (mov r8, r8)
10009fe0:	1000920d 	.word	0x1000920d
10009fe4:	10009229 	.word	0x10009229
10009fe8:	1000a25d 	.word	0x1000a25d
10009fec:	1000a27d 	.word	0x1000a27d

10009ff0 <sms_sensors_switch>:
    

void sms_sensors_switch(bool mpu_en, bool press_en)
{
10009ff0:	b510      	push	{r4, lr}
10009ff2:	000c      	movs	r4, r1
    /* IMU */
    if(mpu_en) {
10009ff4:	2800      	cmp	r0, #0
10009ff6:	d01c      	beq.n	1000a032 <sms_sensors_switch+0x42>
        if(sms_imu_startup()) {
10009ff8:	4b42      	ldr	r3, [pc, #264]	; (1000a104 <sms_sensors_switch+0x114>)
10009ffa:	4798      	blx	r3
10009ffc:	2800      	cmp	r0, #0
10009ffe:	d00e      	beq.n	1000a01e <sms_sensors_switch+0x2e>
	        DBG_LOG("[sms_sensors_switch]\t\tCouldn't start IMU");
1000a000:	4841      	ldr	r0, [pc, #260]	; (1000a108 <sms_sensors_switch+0x118>)
1000a002:	4b42      	ldr	r3, [pc, #264]	; (1000a10c <sms_sensors_switch+0x11c>)
1000a004:	4798      	blx	r3
1000a006:	4842      	ldr	r0, [pc, #264]	; (1000a110 <sms_sensors_switch+0x120>)
1000a008:	4b42      	ldr	r3, [pc, #264]	; (1000a114 <sms_sensors_switch+0x124>)
1000a00a:	4798      	blx	r3
			dualtimer_disable(DUALTIMER_TIMER1);
1000a00c:	2000      	movs	r0, #0
1000a00e:	4b42      	ldr	r3, [pc, #264]	; (1000a118 <sms_sensors_switch+0x128>)
1000a010:	4798      	blx	r3
			imu_device.state = IMU_STATE_OFF;
1000a012:	4b42      	ldr	r3, [pc, #264]	; (1000a11c <sms_sensors_switch+0x12c>)
1000a014:	2200      	movs	r2, #0
1000a016:	2187      	movs	r1, #135	; 0x87
1000a018:	545a      	strb	r2, [r3, r1]
			imu_device.config.init_ok = false;
1000a01a:	711a      	strb	r2, [r3, #4]
1000a01c:	e011      	b.n	1000a042 <sms_sensors_switch+0x52>
        }
        else {
			dualtimer_enable(DUALTIMER_TIMER1);
1000a01e:	2000      	movs	r0, #0
1000a020:	4b3f      	ldr	r3, [pc, #252]	; (1000a120 <sms_sensors_switch+0x130>)
1000a022:	4798      	blx	r3
			imu_device.state = IMU_STATE_ON;
1000a024:	4b3d      	ldr	r3, [pc, #244]	; (1000a11c <sms_sensors_switch+0x12c>)
1000a026:	2102      	movs	r1, #2
1000a028:	2287      	movs	r2, #135	; 0x87
1000a02a:	5499      	strb	r1, [r3, r2]
	        imu_device.config.init_ok = true;
1000a02c:	3a86      	subs	r2, #134	; 0x86
1000a02e:	711a      	strb	r2, [r3, #4]
1000a030:	e007      	b.n	1000a042 <sms_sensors_switch+0x52>
        }
    }
    else {
		dualtimer_disable(DUALTIMER_TIMER1);
1000a032:	2000      	movs	r0, #0
1000a034:	4b38      	ldr	r3, [pc, #224]	; (1000a118 <sms_sensors_switch+0x128>)
1000a036:	4798      	blx	r3
        imu_device.state = IMU_STATE_OFF;
1000a038:	4b38      	ldr	r3, [pc, #224]	; (1000a11c <sms_sensors_switch+0x12c>)
1000a03a:	2200      	movs	r2, #0
1000a03c:	2187      	movs	r1, #135	; 0x87
1000a03e:	545a      	strb	r2, [r3, r1]
		imu_device.config.init_ok = false;
1000a040:	711a      	strb	r2, [r3, #4]
		// switch off VCC pin to save current...
    }
    
    /* Pressure */
    if(press_en) {                
1000a042:	2c00      	cmp	r4, #0
1000a044:	d021      	beq.n	1000a08a <sms_sensors_switch+0x9a>
        if(sms_pressure_startup()) {
1000a046:	4b37      	ldr	r3, [pc, #220]	; (1000a124 <sms_sensors_switch+0x134>)
1000a048:	4798      	blx	r3
1000a04a:	2800      	cmp	r0, #0
1000a04c:	d00d      	beq.n	1000a06a <sms_sensors_switch+0x7a>
			DBG_LOG("[sms_sensors_switch]\t\t\tCouldn't start pressure sensor");
1000a04e:	482e      	ldr	r0, [pc, #184]	; (1000a108 <sms_sensors_switch+0x118>)
1000a050:	4b2e      	ldr	r3, [pc, #184]	; (1000a10c <sms_sensors_switch+0x11c>)
1000a052:	4798      	blx	r3
1000a054:	4834      	ldr	r0, [pc, #208]	; (1000a128 <sms_sensors_switch+0x138>)
1000a056:	4b2f      	ldr	r3, [pc, #188]	; (1000a114 <sms_sensors_switch+0x124>)
1000a058:	4798      	blx	r3
			sms_timer_aon_disable();
1000a05a:	4b34      	ldr	r3, [pc, #208]	; (1000a12c <sms_sensors_switch+0x13c>)
1000a05c:	4798      	blx	r3
			pressure_device.state = PRESSURE_STATE_OFF;
1000a05e:	4b34      	ldr	r3, [pc, #208]	; (1000a130 <sms_sensors_switch+0x140>)
1000a060:	2200      	movs	r2, #0
1000a062:	212b      	movs	r1, #43	; 0x2b
1000a064:	545a      	strb	r2, [r3, r1]
			pressure_device.config.init_ok = false;
1000a066:	701a      	strb	r2, [r3, #0]
1000a068:	e045      	b.n	1000a0f6 <sms_sensors_switch+0x106>
		}
		else {
			sms_timer_aon_init(SMS_PRESSURE_CONVERT_MS, AON_SLEEP_TIMER_RELOAD_MODE);
1000a06a:	2100      	movs	r1, #0
1000a06c:	2064      	movs	r0, #100	; 0x64
1000a06e:	4b31      	ldr	r3, [pc, #196]	; (1000a134 <sms_sensors_switch+0x144>)
1000a070:	4798      	blx	r3
			pressure_device.state = PRESSURE_STATE_ON;
1000a072:	4b2f      	ldr	r3, [pc, #188]	; (1000a130 <sms_sensors_switch+0x140>)
1000a074:	2102      	movs	r1, #2
1000a076:	222b      	movs	r2, #43	; 0x2b
1000a078:	5499      	strb	r1, [r3, r2]
			pressure_device.config.init_ok = true;
1000a07a:	3a2a      	subs	r2, #42	; 0x2a
1000a07c:	701a      	strb	r2, [r3, #0]
		pressure_device.config.init_ok = false;
		// switch off VCC pin to save current...
    }
	
	/* Set up SMS working mode & callbacks */
	if((imu_device.state == IMU_STATE_ON) && (pressure_device.state == PRESSURE_STATE_ON)) {
1000a07e:	2387      	movs	r3, #135	; 0x87
1000a080:	4a26      	ldr	r2, [pc, #152]	; (1000a11c <sms_sensors_switch+0x12c>)
1000a082:	5cd3      	ldrb	r3, [r2, r3]
1000a084:	2b02      	cmp	r3, #2
1000a086:	d115      	bne.n	1000a0b4 <sms_sensors_switch+0xc4>
1000a088:	e007      	b.n	1000a09a <sms_sensors_switch+0xaa>
			pressure_device.state = PRESSURE_STATE_ON;
			pressure_device.config.init_ok = true;
		}
    }
    else {
		sms_timer_aon_disable();
1000a08a:	4b28      	ldr	r3, [pc, #160]	; (1000a12c <sms_sensors_switch+0x13c>)
1000a08c:	4798      	blx	r3
		pressure_device.state = PRESSURE_STATE_OFF;
1000a08e:	4b28      	ldr	r3, [pc, #160]	; (1000a130 <sms_sensors_switch+0x140>)
1000a090:	2200      	movs	r2, #0
1000a092:	212b      	movs	r1, #43	; 0x2b
1000a094:	545a      	strb	r2, [r3, r1]
		pressure_device.config.init_ok = false;
1000a096:	701a      	strb	r2, [r3, #0]
1000a098:	e02d      	b.n	1000a0f6 <sms_sensors_switch+0x106>
		// switch off VCC pin to save current...
    }
	
	/* Set up SMS working mode & callbacks */
	if((imu_device.state == IMU_STATE_ON) && (pressure_device.state == PRESSURE_STATE_ON)) {
		sms_working_mode = SMS_MODE_COMPLETE;
1000a09a:	2207      	movs	r2, #7
1000a09c:	4b26      	ldr	r3, [pc, #152]	; (1000a138 <sms_sensors_switch+0x148>)
1000a09e:	701a      	strb	r2, [r3, #0]

/* Sensors-related functions */
void sms_sensors_enable_callback(bool imu_cb, bool press_cb) {
    /* IMU --> IMU_DRDY */
    if(imu_cb) {
        sms_imu_enable_callback();
1000a0a0:	4b26      	ldr	r3, [pc, #152]	; (1000a13c <sms_sensors_switch+0x14c>)
1000a0a2:	4798      	blx	r3
     *       the AON sleep timer interruption, we have to initialize it each
     *       time (and it starts running) and register the corresponding
     *       callback (and it enables the interrupt)
     */
    if(press_cb) {
        sms_timer_aon_register_callback();
1000a0a4:	4b26      	ldr	r3, [pc, #152]	; (1000a140 <sms_sensors_switch+0x150>)
1000a0a6:	4798      	blx	r3
1000a0a8:	e013      	b.n	1000a0d2 <sms_sensors_switch+0xe2>
	}
	else if(imu_device.state == IMU_STATE_ON) {
		sms_working_mode = SMS_MODE_BUTTON_IMU;
		sms_sensors_enable_callback(true, false);
	}
	else if(pressure_device.state == PRESSURE_STATE_ON) {
1000a0aa:	232b      	movs	r3, #43	; 0x2b
1000a0ac:	4a20      	ldr	r2, [pc, #128]	; (1000a130 <sms_sensors_switch+0x140>)
1000a0ae:	5cd3      	ldrb	r3, [r2, r3]
1000a0b0:	2b02      	cmp	r3, #2
1000a0b2:	d107      	bne.n	1000a0c4 <sms_sensors_switch+0xd4>
		sms_working_mode = SMS_MODE_BUTTON_PRESSURE;
1000a0b4:	2205      	movs	r2, #5
1000a0b6:	4b20      	ldr	r3, [pc, #128]	; (1000a138 <sms_sensors_switch+0x148>)
1000a0b8:	701a      	strb	r2, [r3, #0]
    /* IMU --> IMU_DRDY */
    if(imu_cb) {
        sms_imu_enable_callback();
    }
    else {
        sms_imu_disable_callback();
1000a0ba:	4b22      	ldr	r3, [pc, #136]	; (1000a144 <sms_sensors_switch+0x154>)
1000a0bc:	4798      	blx	r3
     *       the AON sleep timer interruption, we have to initialize it each
     *       time (and it starts running) and register the corresponding
     *       callback (and it enables the interrupt)
     */
    if(press_cb) {
        sms_timer_aon_register_callback();
1000a0be:	4b20      	ldr	r3, [pc, #128]	; (1000a140 <sms_sensors_switch+0x150>)
1000a0c0:	4798      	blx	r3
1000a0c2:	e006      	b.n	1000a0d2 <sms_sensors_switch+0xe2>
	else if(pressure_device.state == PRESSURE_STATE_ON) {
		sms_working_mode = SMS_MODE_BUTTON_PRESSURE;
		sms_sensors_enable_callback(false, true);
	}
	else {
		sms_working_mode = SMS_MODE_BUTTON_SOLO;
1000a0c4:	2201      	movs	r2, #1
1000a0c6:	4b1c      	ldr	r3, [pc, #112]	; (1000a138 <sms_sensors_switch+0x148>)
1000a0c8:	701a      	strb	r2, [r3, #0]
    /* IMU --> IMU_DRDY */
    if(imu_cb) {
        sms_imu_enable_callback();
    }
    else {
        sms_imu_disable_callback();
1000a0ca:	4b1e      	ldr	r3, [pc, #120]	; (1000a144 <sms_sensors_switch+0x154>)
1000a0cc:	4798      	blx	r3
     */
    if(press_cb) {
        sms_timer_aon_register_callback();
    }
    else {
        sms_timer_aon_unregister_callback();
1000a0ce:	4b1e      	ldr	r3, [pc, #120]	; (1000a148 <sms_sensors_switch+0x158>)
1000a0d0:	4798      	blx	r3
	else {
		sms_working_mode = SMS_MODE_BUTTON_SOLO;
		sms_sensors_enable_callback(false, false);
	}
	
	DBG_LOG_DEV("[sms_sensors_switch]\t\tSMS working mode: %d", sms_working_mode);
1000a0d2:	480d      	ldr	r0, [pc, #52]	; (1000a108 <sms_sensors_switch+0x118>)
1000a0d4:	4b0d      	ldr	r3, [pc, #52]	; (1000a10c <sms_sensors_switch+0x11c>)
1000a0d6:	4798      	blx	r3
1000a0d8:	4b17      	ldr	r3, [pc, #92]	; (1000a138 <sms_sensors_switch+0x148>)
1000a0da:	7819      	ldrb	r1, [r3, #0]
1000a0dc:	b2c9      	uxtb	r1, r1
1000a0de:	481b      	ldr	r0, [pc, #108]	; (1000a14c <sms_sensors_switch+0x15c>)
1000a0e0:	4b0c      	ldr	r3, [pc, #48]	; (1000a114 <sms_sensors_switch+0x124>)
1000a0e2:	4798      	blx	r3
}
1000a0e4:	e00d      	b.n	1000a102 <sms_sensors_switch+0x112>
	if((imu_device.state == IMU_STATE_ON) && (pressure_device.state == PRESSURE_STATE_ON)) {
		sms_working_mode = SMS_MODE_COMPLETE;
		sms_sensors_enable_callback(true, true);
	}
	else if(imu_device.state == IMU_STATE_ON) {
		sms_working_mode = SMS_MODE_BUTTON_IMU;
1000a0e6:	2204      	movs	r2, #4
1000a0e8:	4b13      	ldr	r3, [pc, #76]	; (1000a138 <sms_sensors_switch+0x148>)
1000a0ea:	701a      	strb	r2, [r3, #0]

/* Sensors-related functions */
void sms_sensors_enable_callback(bool imu_cb, bool press_cb) {
    /* IMU --> IMU_DRDY */
    if(imu_cb) {
        sms_imu_enable_callback();
1000a0ec:	4b13      	ldr	r3, [pc, #76]	; (1000a13c <sms_sensors_switch+0x14c>)
1000a0ee:	4798      	blx	r3
     */
    if(press_cb) {
        sms_timer_aon_register_callback();
    }
    else {
        sms_timer_aon_unregister_callback();
1000a0f0:	4b15      	ldr	r3, [pc, #84]	; (1000a148 <sms_sensors_switch+0x158>)
1000a0f2:	4798      	blx	r3
1000a0f4:	e7ed      	b.n	1000a0d2 <sms_sensors_switch+0xe2>
		pressure_device.config.init_ok = false;
		// switch off VCC pin to save current...
    }
	
	/* Set up SMS working mode & callbacks */
	if((imu_device.state == IMU_STATE_ON) && (pressure_device.state == PRESSURE_STATE_ON)) {
1000a0f6:	2387      	movs	r3, #135	; 0x87
1000a0f8:	4a08      	ldr	r2, [pc, #32]	; (1000a11c <sms_sensors_switch+0x12c>)
1000a0fa:	5cd3      	ldrb	r3, [r2, r3]
1000a0fc:	2b02      	cmp	r3, #2
1000a0fe:	d1d4      	bne.n	1000a0aa <sms_sensors_switch+0xba>
1000a100:	e7f1      	b.n	1000a0e6 <sms_sensors_switch+0xf6>
		sms_working_mode = SMS_MODE_BUTTON_SOLO;
		sms_sensors_enable_callback(false, false);
	}
	
	DBG_LOG_DEV("[sms_sensors_switch]\t\tSMS working mode: %d", sms_working_mode);
}
1000a102:	bd10      	pop	{r4, pc}
1000a104:	10009c59 	.word	0x10009c59
1000a108:	10016a10 	.word	0x10016a10
1000a10c:	100159e9 	.word	0x100159e9
1000a110:	10017328 	.word	0x10017328
1000a114:	100158c9 	.word	0x100158c9
1000a118:	1000a749 	.word	0x1000a749
1000a11c:	1001a1b4 	.word	0x1001a1b4
1000a120:	1000a725 	.word	0x1000a725
1000a124:	10009ef1 	.word	0x10009ef1
1000a128:	10017354 	.word	0x10017354
1000a12c:	1000a251 	.word	0x1000a251
1000a130:	1001a100 	.word	0x1001a100
1000a134:	1000a225 	.word	0x1000a225
1000a138:	1001a069 	.word	0x1001a069
1000a13c:	1000920d 	.word	0x1000920d
1000a140:	1000a25d 	.word	0x1000a25d
1000a144:	10009229 	.word	0x10009229
1000a148:	1000a27d 	.word	0x1000a27d
1000a14c:	1001738c 	.word	0x1001738c

1000a150 <sms_spi_master_configure>:
 *   + mode 3 on SPI0 @ 1 MHz for MPU-9250 IMU
 * - assign SS pin for each slave device
 * - enable SPI
 */ 
void sms_spi_master_configure(void)
{
1000a150:	b530      	push	{r4, r5, lr}
1000a152:	b08d      	sub	sp, #52	; 0x34
    //DBG_LOG_DEV("[spi_master_configure]\tconfiguring SPI masters and attaching slaves...");

    /* Initialize ms58 spi slave device */
    struct spi_config spi_master_config;
    struct spi_slave_inst_config spi_slave_ms58_config;
    spi_slave_inst_get_config_defaults(&spi_slave_ms58_config);
1000a154:	ac01      	add	r4, sp, #4
1000a156:	0020      	movs	r0, r4
1000a158:	4b13      	ldr	r3, [pc, #76]	; (1000a1a8 <sms_spi_master_configure+0x58>)
1000a15a:	4798      	blx	r3
    spi_slave_ms58_config.ss_pin = SMS_PRESSURE_SPI_SS_PIN;
1000a15c:	2310      	movs	r3, #16
1000a15e:	7023      	strb	r3, [r4, #0]
    spi_attach_slave(&spi_slave_ms58_instance, &spi_slave_ms58_config);
1000a160:	0021      	movs	r1, r4
1000a162:	4812      	ldr	r0, [pc, #72]	; (1000a1ac <sms_spi_master_configure+0x5c>)
1000a164:	4b12      	ldr	r3, [pc, #72]	; (1000a1b0 <sms_spi_master_configure+0x60>)
1000a166:	4798      	blx	r3
    

    /* Initialize SPI1 master for ms58 */
    spi_get_config_defaults(&spi_master_config);
1000a168:	ac02      	add	r4, sp, #8
1000a16a:	0020      	movs	r0, r4
1000a16c:	4b11      	ldr	r3, [pc, #68]	; (1000a1b4 <sms_spi_master_configure+0x64>)
1000a16e:	4798      	blx	r3
    spi_master_config.clock_divider = SPI_MASTER_MS58_CLOCK_DIV;
1000a170:	2368      	movs	r3, #104	; 0x68
1000a172:	7123      	strb	r3, [r4, #4]
    spi_master_config.transfer_mode = SPI_MASTER_MS58_MODE;
1000a174:	2300      	movs	r3, #0
1000a176:	70a3      	strb	r3, [r4, #2]
    spi_master_config.pin_number_pad[0] = SPI_MASTER_MS58_PIN_SCK;
1000a178:	3311      	adds	r3, #17
1000a17a:	60a3      	str	r3, [r4, #8]
    spi_master_config.pinmux_sel_pad[0] = SPI_MASTER_MS58_MUX_SCK;
1000a17c:	3b0d      	subs	r3, #13
1000a17e:	61a3      	str	r3, [r4, #24]
    spi_master_config.pin_number_pad[1] = SPI_MASTER_MS58_PIN_MOSI;
1000a180:	2213      	movs	r2, #19
1000a182:	60e2      	str	r2, [r4, #12]
    spi_master_config.pinmux_sel_pad[1] = SPI_MASTER_MS58_MUX_MOSI;
1000a184:	61e3      	str	r3, [r4, #28]
    spi_master_config.pin_number_pad[2] = SPI_MASTER_MS58_PIN_SSN;
1000a186:	3a14      	subs	r2, #20
1000a188:	6122      	str	r2, [r4, #16]
    spi_master_config.pinmux_sel_pad[2] = SPI_MASTER_MS58_MUX_SSN;
1000a18a:	6222      	str	r2, [r4, #32]
    spi_master_config.pin_number_pad[3] = SPI_MASTER_MS58_MISO;
1000a18c:	3213      	adds	r2, #19
1000a18e:	6162      	str	r2, [r4, #20]
    spi_master_config.pinmux_sel_pad[3] = SPI_MASTER_MS58_MUX_MISO;
1000a190:	6263      	str	r3, [r4, #36]	; 0x24
    spi_init(&spi_master_ms58_instance, SPI_MASTER_MS58_PORT, &spi_master_config);
1000a192:	4d09      	ldr	r5, [pc, #36]	; (1000a1b8 <sms_spi_master_configure+0x68>)
1000a194:	0022      	movs	r2, r4
1000a196:	4909      	ldr	r1, [pc, #36]	; (1000a1bc <sms_spi_master_configure+0x6c>)
1000a198:	0028      	movs	r0, r5
1000a19a:	4b09      	ldr	r3, [pc, #36]	; (1000a1c0 <sms_spi_master_configure+0x70>)
1000a19c:	4798      	blx	r3
    spi_enable(&spi_master_ms58_instance);
1000a19e:	0028      	movs	r0, r5
1000a1a0:	4b08      	ldr	r3, [pc, #32]	; (1000a1c4 <sms_spi_master_configure+0x74>)
1000a1a2:	4798      	blx	r3
}
1000a1a4:	b00d      	add	sp, #52	; 0x34
1000a1a6:	bd30      	pop	{r4, r5, pc}
1000a1a8:	1000a371 	.word	0x1000a371
1000a1ac:	1001a19c 	.word	0x1001a19c
1000a1b0:	1000a3a9 	.word	0x1000a3a9
1000a1b4:	1000a37d 	.word	0x1000a37d
1000a1b8:	1001a1a8 	.word	0x1001a1a8
1000a1bc:	40007000 	.word	0x40007000
1000a1c0:	1000a479 	.word	0x1000a479
1000a1c4:	1000a3e9 	.word	0x1000a3e9

1000a1c8 <sms_spi_master_transceive>:
/* SPI transceive function:
 * - enable selected slave
 * - start transceive blocking job
 * - when job returned, disable selected slave
 */
enum status_code sms_spi_master_transceive(struct spi_module *const module, struct spi_slave_inst *const slave, uint8_t *tx_data, uint8_t *rx_data, uint16_t len) {
1000a1c8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a1ca:	b083      	sub	sp, #12
1000a1cc:	0004      	movs	r4, r0
1000a1ce:	000d      	movs	r5, r1
1000a1d0:	9200      	str	r2, [sp, #0]
1000a1d2:	9301      	str	r3, [sp, #4]
1000a1d4:	ab08      	add	r3, sp, #32
1000a1d6:	881e      	ldrh	r6, [r3, #0]
    enum status_code retVal;
    /* Enable slave */
    //DBG_LOG_CONT_DEV(" selecting slave...");
    spi_select_slave(module, slave, true);
1000a1d8:	2201      	movs	r2, #1
1000a1da:	4f08      	ldr	r7, [pc, #32]	; (1000a1fc <sms_spi_master_transceive+0x34>)
1000a1dc:	47b8      	blx	r7
    /* Write SPI data */
    //DBG_LOG_CONT_DEV(" writing data...");
    retVal = spi_transceive_buffer_wait(module, tx_data, rx_data, len);
1000a1de:	0033      	movs	r3, r6
1000a1e0:	9a01      	ldr	r2, [sp, #4]
1000a1e2:	9900      	ldr	r1, [sp, #0]
1000a1e4:	0020      	movs	r0, r4
1000a1e6:	4e06      	ldr	r6, [pc, #24]	; (1000a200 <sms_spi_master_transceive+0x38>)
1000a1e8:	47b0      	blx	r6
1000a1ea:	0006      	movs	r6, r0
    /* Disable slave */
    //DBG_LOG_CONT_DEV(" de-selecting slave...");
    spi_select_slave(module, slave, false);
1000a1ec:	2200      	movs	r2, #0
1000a1ee:	0029      	movs	r1, r5
1000a1f0:	0020      	movs	r0, r4
1000a1f2:	47b8      	blx	r7
    //DBG_LOG_CONT_DEV(" done!");
    return retVal;
}
1000a1f4:	0030      	movs	r0, r6
1000a1f6:	b003      	add	sp, #12
1000a1f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a1fa:	46c0      	nop			; (mov r8, r8)
1000a1fc:	1000a661 	.word	0x1000a661
1000a200:	1000a5dd 	.word	0x1000a5dd

1000a204 <sms_timer_aon_callback>:

#include "sms_timer.h"

/* AON SLEEP TIMER */
void sms_timer_aon_callback(void)
{
1000a204:	b510      	push	{r4, lr}
    //if(pressure_device.int_enabled) {
		pressure_device.interrupt.new_value = true;
1000a206:	2101      	movs	r1, #1
1000a208:	2329      	movs	r3, #41	; 0x29
1000a20a:	4a04      	ldr	r2, [pc, #16]	; (1000a21c <sms_timer_aon_callback+0x18>)
1000a20c:	54d1      	strb	r1, [r2, r3]
	    send_plf_int_msg_ind(AON_SLEEP_TIMER_EXPIRY_CALLBACK, AON_TIMER_EXPIRED, NULL, 0);
1000a20e:	2300      	movs	r3, #0
1000a210:	2200      	movs	r2, #0
1000a212:	3102      	adds	r1, #2
1000a214:	2042      	movs	r0, #66	; 0x42
1000a216:	4c02      	ldr	r4, [pc, #8]	; (1000a220 <sms_timer_aon_callback+0x1c>)
1000a218:	47a0      	blx	r4
	//}
}
1000a21a:	bd10      	pop	{r4, pc}
1000a21c:	1001a100 	.word	0x1001a100
1000a220:	1000dc45 	.word	0x1000dc45

1000a224 <sms_timer_aon_init>:

void sms_timer_aon_init(uint32_t cnt_ms, enum aon_sleep_timer_mode cnt_mode)
{
1000a224:	b530      	push	{r4, r5, lr}
1000a226:	b083      	sub	sp, #12
1000a228:	0004      	movs	r4, r0
1000a22a:	000d      	movs	r5, r1
    struct aon_sleep_timer_config config_aon_sleep_timer;
    aon_sleep_timer_get_config_defaults(&config_aon_sleep_timer);
1000a22c:	4668      	mov	r0, sp
1000a22e:	4b06      	ldr	r3, [pc, #24]	; (1000a248 <sms_timer_aon_init+0x24>)
1000a230:	4798      	blx	r3
    config_aon_sleep_timer.mode = cnt_mode;
1000a232:	466b      	mov	r3, sp
1000a234:	705d      	strb	r5, [r3, #1]
    config_aon_sleep_timer.counter = cnt_ms * SMS_TIMER_AON_LOAD_1MS;
1000a236:	0163      	lsls	r3, r4, #5
1000a238:	191c      	adds	r4, r3, r4
1000a23a:	9401      	str	r4, [sp, #4]
    aon_sleep_timer_init(&config_aon_sleep_timer);
1000a23c:	4668      	mov	r0, sp
1000a23e:	4b03      	ldr	r3, [pc, #12]	; (1000a24c <sms_timer_aon_init+0x28>)
1000a240:	4798      	blx	r3
}
1000a242:	b003      	add	sp, #12
1000a244:	bd30      	pop	{r4, r5, pc}
1000a246:	46c0      	nop			; (mov r8, r8)
1000a248:	100080e9 	.word	0x100080e9
1000a24c:	1000815d 	.word	0x1000815d

1000a250 <sms_timer_aon_disable>:

void sms_timer_aon_disable(void)
{
1000a250:	b510      	push	{r4, lr}
    aon_sleep_timer_disable();
1000a252:	4b01      	ldr	r3, [pc, #4]	; (1000a258 <sms_timer_aon_disable+0x8>)
1000a254:	4798      	blx	r3
}
1000a256:	bd10      	pop	{r4, pc}
1000a258:	100080f9 	.word	0x100080f9

1000a25c <sms_timer_aon_register_callback>:

void sms_timer_aon_register_callback(void)
{
1000a25c:	b510      	push	{r4, lr}
    aon_sleep_timer_register_callback(sms_timer_aon_callback);
1000a25e:	4804      	ldr	r0, [pc, #16]	; (1000a270 <sms_timer_aon_register_callback+0x14>)
1000a260:	4b04      	ldr	r3, [pc, #16]	; (1000a274 <sms_timer_aon_register_callback+0x18>)
1000a262:	4798      	blx	r3
1000a264:	2280      	movs	r2, #128	; 0x80
1000a266:	0512      	lsls	r2, r2, #20
1000a268:	4b03      	ldr	r3, [pc, #12]	; (1000a278 <sms_timer_aon_register_callback+0x1c>)
1000a26a:	601a      	str	r2, [r3, #0]
    NVIC_EnableIRQ(AON_SLEEP_TIMER0_IRQn);
}
1000a26c:	bd10      	pop	{r4, pc}
1000a26e:	46c0      	nop			; (mov r8, r8)
1000a270:	1000a205 	.word	0x1000a205
1000a274:	10008145 	.word	0x10008145
1000a278:	e000e100 	.word	0xe000e100

1000a27c <sms_timer_aon_unregister_callback>:

void sms_timer_aon_unregister_callback(void)
{
1000a27c:	b510      	push	{r4, lr}
    aon_sleep_timer_unregister_callback();
1000a27e:	4b04      	ldr	r3, [pc, #16]	; (1000a290 <sms_timer_aon_unregister_callback+0x14>)
1000a280:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000a282:	2180      	movs	r1, #128	; 0x80
1000a284:	0509      	lsls	r1, r1, #20
1000a286:	2380      	movs	r3, #128	; 0x80
1000a288:	4a02      	ldr	r2, [pc, #8]	; (1000a294 <sms_timer_aon_unregister_callback+0x18>)
1000a28a:	50d1      	str	r1, [r2, r3]
    NVIC_DisableIRQ(AON_SLEEP_TIMER0_IRQn);
}
1000a28c:	bd10      	pop	{r4, pc}
1000a28e:	46c0      	nop			; (mov r8, r8)
1000a290:	10008151 	.word	0x10008151
1000a294:	e000e100 	.word	0xe000e100

1000a298 <sms_dualtimer_init>:
//{
//}

/* DUALTIMER */
void sms_dualtimer_init(void)
{
1000a298:	b510      	push	{r4, lr}
1000a29a:	b088      	sub	sp, #32
    struct dualtimer_config config_dualtimer;
    dualtimer_get_config_defaults(&config_dualtimer);
1000a29c:	ac01      	add	r4, sp, #4
1000a29e:	0020      	movs	r0, r4
1000a2a0:	4b0c      	ldr	r3, [pc, #48]	; (1000a2d4 <sms_dualtimer_init+0x3c>)
1000a2a2:	4798      	blx	r3

	/* Dualtimer1 used for background us counting without interrupts
	 * (similar to the millis() or micros() functions in Arduino) */
    //config_dualtimer.timer1.load_value = SMS_DUALTIMER_LOAD_US;
	config_dualtimer.timer1.load_value = 0xFFFFFFFF;
1000a2a4:	2301      	movs	r3, #1
1000a2a6:	425b      	negs	r3, r3
1000a2a8:	60a3      	str	r3, [r4, #8]
    config_dualtimer.timer1.counter_mode = DUALTIMER_FREE_RUNNING_MODE;
1000a2aa:	3302      	adds	r3, #2
1000a2ac:	7063      	strb	r3, [r4, #1]
	//config_dualtimer.timer1.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
	//config_dualtimer.timer1.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
	config_dualtimer.timer1.interrup_enable = false;
1000a2ae:	2200      	movs	r2, #0
1000a2b0:	7122      	strb	r2, [r4, #4]
	/* Dualtimer1 used first as a blocking ms delay
	 * (could be changed after device startup and initialization) */
    config_dualtimer.timer2.load_value = SMS_DUALTIMER_LOAD_MS;
1000a2b2:	4909      	ldr	r1, [pc, #36]	; (1000a2d8 <sms_dualtimer_init+0x40>)
1000a2b4:	6161      	str	r1, [r4, #20]
    config_dualtimer.timer2.counter_mode = DUALTIMER_ONE_SHOT_MODE;
1000a2b6:	7362      	strb	r2, [r4, #13]
	config_dualtimer.timer2.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
1000a2b8:	73e2      	strb	r2, [r4, #15]
	config_dualtimer.timer2.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
1000a2ba:	73a3      	strb	r3, [r4, #14]
	config_dualtimer.timer2.interrup_enable = true;
1000a2bc:	7423      	strb	r3, [r4, #16]

    dualtimer_init(&config_dualtimer);
1000a2be:	0020      	movs	r0, r4
1000a2c0:	4b06      	ldr	r3, [pc, #24]	; (1000a2dc <sms_dualtimer_init+0x44>)
1000a2c2:	4798      	blx	r3
    dualtimer_disable(DUALTIMER_TIMER1);
1000a2c4:	2000      	movs	r0, #0
1000a2c6:	4c06      	ldr	r4, [pc, #24]	; (1000a2e0 <sms_dualtimer_init+0x48>)
1000a2c8:	47a0      	blx	r4
    dualtimer_disable(DUALTIMER_TIMER2);
1000a2ca:	2001      	movs	r0, #1
1000a2cc:	47a0      	blx	r4
}
1000a2ce:	b008      	add	sp, #32
1000a2d0:	bd10      	pop	{r4, pc}
1000a2d2:	46c0      	nop			; (mov r8, r8)
1000a2d4:	1000a6c5 	.word	0x1000a6c5
1000a2d8:	00006590 	.word	0x00006590
1000a2dc:	1000a76d 	.word	0x1000a76d
1000a2e0:	1000a749 	.word	0x1000a749

1000a2e4 <sms_dualtimer_start>:
    dualtimer_register_callback(tmr, cb_handler);
    sms_dualtimer_stop(tmr);
}

void sms_dualtimer_start(timer_unit_type_t unit, uint32_t delay, enum dualtimer_timer tmr)
{
1000a2e4:	b510      	push	{r4, lr}
1000a2e6:	0014      	movs	r4, r2
    uint32_t timer_load = 1;
    switch(unit) {
1000a2e8:	2801      	cmp	r0, #1
1000a2ea:	d006      	beq.n	1000a2fa <sms_dualtimer_start+0x16>
1000a2ec:	2800      	cmp	r0, #0
1000a2ee:	d002      	beq.n	1000a2f6 <sms_dualtimer_start+0x12>
1000a2f0:	2802      	cmp	r0, #2
1000a2f2:	d004      	beq.n	1000a2fe <sms_dualtimer_start+0x1a>
1000a2f4:	e005      	b.n	1000a302 <sms_dualtimer_start+0x1e>
        case TIMER_UNIT_US:
        timer_load = SMS_DUALTIMER_LOAD_US;
1000a2f6:	221a      	movs	r2, #26
1000a2f8:	e004      	b.n	1000a304 <sms_dualtimer_start+0x20>
        break;
        
        case TIMER_UNIT_MS:
        timer_load = SMS_DUALTIMER_LOAD_MS;
1000a2fa:	4a0a      	ldr	r2, [pc, #40]	; (1000a324 <sms_dualtimer_start+0x40>)
        break;
1000a2fc:	e002      	b.n	1000a304 <sms_dualtimer_start+0x20>
        
        case TIMER_UNIT_S:
        timer_load = SMS_DUALTIMER_LOAD_S;
1000a2fe:	4a0a      	ldr	r2, [pc, #40]	; (1000a328 <sms_dualtimer_start+0x44>)
        break;
1000a300:	e000      	b.n	1000a304 <sms_dualtimer_start+0x20>
    sms_dualtimer_stop(tmr);
}

void sms_dualtimer_start(timer_unit_type_t unit, uint32_t delay, enum dualtimer_timer tmr)
{
    uint32_t timer_load = 1;
1000a302:	2201      	movs	r2, #1
        
        default:
        break;
    }
    
    if(delay <= 0) {
1000a304:	2900      	cmp	r1, #0
1000a306:	d100      	bne.n	1000a30a <sms_dualtimer_start+0x26>
        //DBG_LOG("[sms_dualtimer_start]\tWarning! Delay value < 0... setting to 1");
        delay = 1;
1000a308:	3101      	adds	r1, #1
    }
    
    //ulp_ready = false;
    //DBG_LOG_DEV("[sms_dualtimer_start]\t\tStarting timer%d... load: %ld, delay: %ld", (tmr+1), timer_load, delay);
    dualtimer_set_counter(tmr, DUALTIMER_SET_CURRUNT_REG, timer_load * delay);
1000a30a:	434a      	muls	r2, r1
1000a30c:	2100      	movs	r1, #0
1000a30e:	0020      	movs	r0, r4
1000a310:	4b06      	ldr	r3, [pc, #24]	; (1000a32c <sms_dualtimer_start+0x48>)
1000a312:	4798      	blx	r3
    dualtimer_enable(tmr);
1000a314:	0020      	movs	r0, r4
1000a316:	4b06      	ldr	r3, [pc, #24]	; (1000a330 <sms_dualtimer_start+0x4c>)
1000a318:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000a31a:	2280      	movs	r2, #128	; 0x80
1000a31c:	01d2      	lsls	r2, r2, #7
1000a31e:	4b05      	ldr	r3, [pc, #20]	; (1000a334 <sms_dualtimer_start+0x50>)
1000a320:	601a      	str	r2, [r3, #0]
    NVIC_EnableIRQ(DUALTIMER0_IRQn);
}
1000a322:	bd10      	pop	{r4, pc}
1000a324:	00006590 	.word	0x00006590
1000a328:	018cba80 	.word	0x018cba80
1000a32c:	1000a6fd 	.word	0x1000a6fd
1000a330:	1000a725 	.word	0x1000a725
1000a334:	e000e100 	.word	0xe000e100

1000a338 <sms_dualtimer_stop>:

void sms_dualtimer_stop(enum dualtimer_timer tmr)
{
1000a338:	b510      	push	{r4, lr}
    dualtimer_disable(tmr);
1000a33a:	4b01      	ldr	r3, [pc, #4]	; (1000a340 <sms_dualtimer_stop+0x8>)
1000a33c:	4798      	blx	r3
}
1000a33e:	bd10      	pop	{r4, pc}
1000a340:	1000a749 	.word	0x1000a749

1000a344 <delay_ms>:
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
        break;
    }
}

void delay_ms(uint32_t delay) {
1000a344:	b510      	push	{r4, lr}
1000a346:	0001      	movs	r1, r0
	//sms_disable_irq(SMS_BTN_0_IRQ | SMS_BTN_1_IRQ);
	sms_dualtimer_start(TIMER_UNIT_MS, delay, DUALTIMER_TIMER2);
1000a348:	2201      	movs	r2, #1
1000a34a:	2001      	movs	r0, #1
1000a34c:	4b05      	ldr	r3, [pc, #20]	; (1000a364 <delay_ms+0x20>)
1000a34e:	4798      	blx	r3
	while(dualtimer_get_value(DUALTIMER_TIMER2)) {
1000a350:	4c05      	ldr	r4, [pc, #20]	; (1000a368 <delay_ms+0x24>)
1000a352:	2001      	movs	r0, #1
1000a354:	47a0      	blx	r4
1000a356:	2800      	cmp	r0, #0
1000a358:	d1fb      	bne.n	1000a352 <delay_ms+0xe>
    NVIC_EnableIRQ(DUALTIMER0_IRQn);
}

void sms_dualtimer_stop(enum dualtimer_timer tmr)
{
    dualtimer_disable(tmr);
1000a35a:	3001      	adds	r0, #1
1000a35c:	4b03      	ldr	r3, [pc, #12]	; (1000a36c <delay_ms+0x28>)
1000a35e:	4798      	blx	r3
	sms_dualtimer_start(TIMER_UNIT_MS, delay, DUALTIMER_TIMER2);
	while(dualtimer_get_value(DUALTIMER_TIMER2)) {
	}
	sms_dualtimer_stop(DUALTIMER_TIMER2);
	//sms_enable_irq(SMS_BTN_0_IRQ | SMS_BTN_1_IRQ);
1000a360:	bd10      	pop	{r4, pc}
1000a362:	46c0      	nop			; (mov r8, r8)
1000a364:	1000a2e5 	.word	0x1000a2e5
1000a368:	1000a6e9 	.word	0x1000a6e9
1000a36c:	1000a749 	.word	0x1000a749

1000a370 <spi_slave_inst_get_config_defaults>:
void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
	Assert(config);

	config->ss_pin          = PIN_LP_GPIO_12;
1000a370:	230c      	movs	r3, #12
1000a372:	7003      	strb	r3, [r0, #0]
	config->address_enabled = false;
1000a374:	2300      	movs	r3, #0
1000a376:	7043      	strb	r3, [r0, #1]
	config->address         = 0;
1000a378:	7083      	strb	r3, [r0, #2]
}
1000a37a:	4770      	bx	lr

1000a37c <spi_get_config_defaults>:
void spi_get_config_defaults(
		struct spi_config *const config)
{
	Assert(config);

	config->mode             = SPI_MODE_MASTER;
1000a37c:	2301      	movs	r3, #1
1000a37e:	7003      	strb	r3, [r0, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
1000a380:	2300      	movs	r3, #0
1000a382:	7043      	strb	r3, [r0, #1]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
1000a384:	7083      	strb	r3, [r0, #2]
	config->clock_source     = SPI_CLK_INPUT_0;
1000a386:	70c3      	strb	r3, [r0, #3]
	config->clock_divider    = 129;
1000a388:	3381      	adds	r3, #129	; 0x81
1000a38a:	7103      	strb	r3, [r0, #4]

	config->pin_number_pad[0] = PIN_LP_GPIO_10;
1000a38c:	3b77      	subs	r3, #119	; 0x77
1000a38e:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_11;
1000a390:	3301      	adds	r3, #1
1000a392:	60c3      	str	r3, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_12;
1000a394:	3301      	adds	r3, #1
1000a396:	6103      	str	r3, [r0, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_13;
1000a398:	3301      	adds	r3, #1
1000a39a:	6143      	str	r3, [r0, #20]

	config->pinmux_sel_pad[0] = MUX_LP_GPIO_10_SPI0_SCK;
1000a39c:	3b0b      	subs	r3, #11
1000a39e:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_11_SPI0_MOSI;
1000a3a0:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_12_SPI0_SSN;
1000a3a2:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_13_SPI0_MISO;
1000a3a4:	6243      	str	r3, [r0, #36]	; 0x24
};
1000a3a6:	4770      	bx	lr

1000a3a8 <spi_attach_slave>:
 *
 */
void spi_attach_slave(
		struct spi_slave_inst *const slave,
		struct spi_slave_inst_config *const config)
{
1000a3a8:	b530      	push	{r4, r5, lr}
1000a3aa:	b083      	sub	sp, #12
1000a3ac:	0004      	movs	r4, r0
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
1000a3ae:	780b      	ldrb	r3, [r1, #0]
1000a3b0:	7003      	strb	r3, [r0, #0]
	slave->address_enabled = config->address_enabled;
1000a3b2:	784b      	ldrb	r3, [r1, #1]
1000a3b4:	7043      	strb	r3, [r0, #1]
	slave->address         = config->address;
1000a3b6:	788b      	ldrb	r3, [r1, #2]
1000a3b8:	7083      	strb	r3, [r0, #2]

	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);
1000a3ba:	ad01      	add	r5, sp, #4
1000a3bc:	0028      	movs	r0, r5
1000a3be:	4b07      	ldr	r3, [pc, #28]	; (1000a3dc <spi_attach_slave+0x34>)
1000a3c0:	4798      	blx	r3
	config_gpio.direction = GPIO_PIN_DIR_OUTPUT;
1000a3c2:	2301      	movs	r3, #1
1000a3c4:	702b      	strb	r3, [r5, #0]
	gpio_pin_set_config(slave->ss_pin, &config_gpio);
1000a3c6:	7820      	ldrb	r0, [r4, #0]
1000a3c8:	0029      	movs	r1, r5
1000a3ca:	4b05      	ldr	r3, [pc, #20]	; (1000a3e0 <spi_attach_slave+0x38>)
1000a3cc:	4798      	blx	r3

	gpio_pin_set_output_level(slave->ss_pin, true);
1000a3ce:	7820      	ldrb	r0, [r4, #0]
1000a3d0:	2101      	movs	r1, #1
1000a3d2:	4b04      	ldr	r3, [pc, #16]	; (1000a3e4 <spi_attach_slave+0x3c>)
1000a3d4:	4798      	blx	r3
}
1000a3d6:	b003      	add	sp, #12
1000a3d8:	bd30      	pop	{r4, r5, pc}
1000a3da:	46c0      	nop			; (mov r8, r8)
1000a3dc:	1000a9c1 	.word	0x1000a9c1
1000a3e0:	1000a9d1 	.word	0x1000a9d1
1000a3e4:	1000ac29 	.word	0x1000ac29

1000a3e8 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void spi_enable(struct spi_module *const module)
{
	Spi *const spi_module = (module->hw);
1000a3e8:	6803      	ldr	r3, [r0, #0]
		NVIC_EnableIRQ(SPI1_TX_IRQn);
	}
#endif

	/* Enable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = SPI_MODULE_ENABLE_ENABLE;
1000a3ea:	2201      	movs	r2, #1
1000a3ec:	761a      	strb	r2, [r3, #24]
}
1000a3ee:	4770      	bx	lr

1000a3f0 <spi_disable>:
 * This function will disable the SPI module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void spi_disable(struct spi_module *const module)
{
1000a3f0:	b510      	push	{r4, lr}
		NVIC_DisableIRQ(SPI1_TX_IRQn);
	}
#  endif

	/* Disable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
1000a3f2:	2300      	movs	r3, #0
1000a3f4:	6802      	ldr	r2, [r0, #0]
1000a3f6:	7613      	strb	r3, [r2, #24]
 */
static void _spi_clock_disable(struct spi_module *const module)
{
	Assert(module);

	Spi *const spi_module = (module->hw);
1000a3f8:	6803      	ldr	r3, [r0, #0]

	if (spi_module == (void *)SPI0) {
1000a3fa:	4a0d      	ldr	r2, [pc, #52]	; (1000a430 <spi_disable+0x40>)
1000a3fc:	4293      	cmp	r3, r2
1000a3fe:	d109      	bne.n	1000a414 <spi_disable+0x24>
		system_clock_peripheral_disable(PERIPHERAL_SPI0_SCK_CLK);
1000a400:	2041      	movs	r0, #65	; 0x41
1000a402:	4c0c      	ldr	r4, [pc, #48]	; (1000a434 <spi_disable+0x44>)
1000a404:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_SCK_PHASE);
1000a406:	2026      	movs	r0, #38	; 0x26
1000a408:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_IF);
1000a40a:	2038      	movs	r0, #56	; 0x38
1000a40c:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_CORE);
1000a40e:	2001      	movs	r0, #1
1000a410:	47a0      	blx	r4
1000a412:	e00b      	b.n	1000a42c <spi_disable+0x3c>
	} else if (spi_module == (void *)SPI1) {
1000a414:	4a08      	ldr	r2, [pc, #32]	; (1000a438 <spi_disable+0x48>)
1000a416:	4293      	cmp	r3, r2
1000a418:	d108      	bne.n	1000a42c <spi_disable+0x3c>
		system_clock_peripheral_disable(PERIPHERAL_SPI1_SCK_CLK);
1000a41a:	2042      	movs	r0, #66	; 0x42
1000a41c:	4c05      	ldr	r4, [pc, #20]	; (1000a434 <spi_disable+0x44>)
1000a41e:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_SCK_PHASE);
1000a420:	2027      	movs	r0, #39	; 0x27
1000a422:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_IF);
1000a424:	2039      	movs	r0, #57	; 0x39
1000a426:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_CORE);
1000a428:	2002      	movs	r0, #2
1000a42a:	47a0      	blx	r4
#  endif

	/* Disable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
	_spi_clock_disable(module);
}
1000a42c:	bd10      	pop	{r4, pc}
1000a42e:	46c0      	nop			; (mov r8, r8)
1000a430:	40006000 	.word	0x40006000
1000a434:	1000b3c1 	.word	0x1000b3c1
1000a438:	40007000 	.word	0x40007000

1000a43c <spi_reset>:
 * disable it.
 *
 * \param[in,out] module Pointer to the software instance struct
 */
void spi_reset(struct spi_module *const module)
{
1000a43c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Spi *const spi_module = (module->hw);
1000a43e:	6804      	ldr	r4, [r0, #0]

	/* Disable the module */
	spi_disable(module);
1000a440:	4b09      	ldr	r3, [pc, #36]	; (1000a468 <spi_reset+0x2c>)
1000a442:	4798      	blx	r3

	/* Software reset the module */
	if(spi_module == (void *)SPI0) {
1000a444:	4b09      	ldr	r3, [pc, #36]	; (1000a46c <spi_reset+0x30>)
1000a446:	429c      	cmp	r4, r3
1000a448:	d105      	bne.n	1000a456 <spi_reset+0x1a>
		system_peripheral_reset(PERIPHERAL_SPI0_CORE);
1000a44a:	2001      	movs	r0, #1
1000a44c:	4c08      	ldr	r4, [pc, #32]	; (1000a470 <spi_reset+0x34>)
1000a44e:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_SPI0_IF);
1000a450:	2038      	movs	r0, #56	; 0x38
1000a452:	47a0      	blx	r4
1000a454:	e007      	b.n	1000a466 <spi_reset+0x2a>
	} else if (spi_module == (void *)SPI1) {
1000a456:	4b07      	ldr	r3, [pc, #28]	; (1000a474 <spi_reset+0x38>)
1000a458:	429c      	cmp	r4, r3
1000a45a:	d104      	bne.n	1000a466 <spi_reset+0x2a>
		system_peripheral_reset(PERIPHERAL_SPI1_CORE);
1000a45c:	2002      	movs	r0, #2
1000a45e:	4c04      	ldr	r4, [pc, #16]	; (1000a470 <spi_reset+0x34>)
1000a460:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_SPI1_IF);
1000a462:	2039      	movs	r0, #57	; 0x39
1000a464:	47a0      	blx	r4
	}
}
1000a466:	bd10      	pop	{r4, pc}
1000a468:	1000a3f1 	.word	0x1000a3f1
1000a46c:	40006000 	.word	0x40006000
1000a470:	1000b72d 	.word	0x1000b72d
1000a474:	40007000 	.word	0x40007000

1000a478 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Spi *const hw,
		const struct spi_config *const config)
{
1000a478:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a47a:	465f      	mov	r7, fp
1000a47c:	4646      	mov	r6, r8
1000a47e:	b4c0      	push	{r6, r7}
1000a480:	b083      	sub	sp, #12
1000a482:	0006      	movs	r6, r0
1000a484:	4688      	mov	r8, r1
1000a486:	0015      	movs	r5, r2
	Assert(config);

	uint8_t idx;

	/* Initialize device instance */
	module->hw = hw;
1000a488:	6031      	str	r1, [r6, #0]

	Spi *const spi_module = (module->hw);

	/* Check if module is enabled. */
	if (spi_module->SPI_MODULE_ENABLE.reg & SPI_MODULE_ENABLE_MASK) {
1000a48a:	7e0b      	ldrb	r3, [r1, #24]
1000a48c:	07db      	lsls	r3, r3, #31
1000a48e:	d501      	bpl.n	1000a494 <spi_init+0x1c>
		spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
1000a490:	2300      	movs	r3, #0
1000a492:	760b      	strb	r3, [r1, #24]
	}

	spi_reset(module);
1000a494:	0030      	movs	r0, r6
1000a496:	4b4a      	ldr	r3, [pc, #296]	; (1000a5c0 <spi_init+0x148>)
1000a498:	4798      	blx	r3
 */
static void _spi_clock_enable(struct spi_module *const module)
{
	Assert(module);

	Spi *const spi_module = (module->hw);
1000a49a:	6833      	ldr	r3, [r6, #0]

	if (spi_module == (void *)SPI0) {
1000a49c:	4a49      	ldr	r2, [pc, #292]	; (1000a5c4 <spi_init+0x14c>)
1000a49e:	4293      	cmp	r3, r2
1000a4a0:	d109      	bne.n	1000a4b6 <spi_init+0x3e>
		system_clock_peripheral_enable(PERIPHERAL_SPI0_SCK_CLK);
1000a4a2:	2041      	movs	r0, #65	; 0x41
1000a4a4:	4c48      	ldr	r4, [pc, #288]	; (1000a5c8 <spi_init+0x150>)
1000a4a6:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_SCK_PHASE);
1000a4a8:	2026      	movs	r0, #38	; 0x26
1000a4aa:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_IF);
1000a4ac:	2038      	movs	r0, #56	; 0x38
1000a4ae:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_CORE);
1000a4b0:	2001      	movs	r0, #1
1000a4b2:	47a0      	blx	r4
1000a4b4:	e00b      	b.n	1000a4ce <spi_init+0x56>
	} else if (spi_module == (void *)SPI1) {
1000a4b6:	4a45      	ldr	r2, [pc, #276]	; (1000a5cc <spi_init+0x154>)
1000a4b8:	4293      	cmp	r3, r2
1000a4ba:	d108      	bne.n	1000a4ce <spi_init+0x56>
		system_clock_peripheral_enable(PERIPHERAL_SPI1_SCK_CLK);
1000a4bc:	2042      	movs	r0, #66	; 0x42
1000a4be:	4c42      	ldr	r4, [pc, #264]	; (1000a5c8 <spi_init+0x150>)
1000a4c0:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_SCK_PHASE);
1000a4c2:	2027      	movs	r0, #39	; 0x27
1000a4c4:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_IF);
1000a4c6:	2039      	movs	r0, #57	; 0x39
1000a4c8:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_CORE);
1000a4ca:	2002      	movs	r0, #2
1000a4cc:	47a0      	blx	r4
	}
#endif

	//Program the pinmux.
	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);
1000a4ce:	a801      	add	r0, sp, #4
1000a4d0:	4b3f      	ldr	r3, [pc, #252]	; (1000a5d0 <spi_init+0x158>)
1000a4d2:	4798      	blx	r3
1000a4d4:	002c      	movs	r4, r5
1000a4d6:	3408      	adds	r4, #8
1000a4d8:	2318      	movs	r3, #24
1000a4da:	469b      	mov	fp, r3
1000a4dc:	44ab      	add	fp, r5
1000a4de:	0027      	movs	r7, r4

	/* Set the pinmux for this spi module. */
	for(idx = 0; idx < 4; idx++) {
		if (config->pin_number_pad[idx] != PINMUX_UNUSED) {
1000a4e0:	6820      	ldr	r0, [r4, #0]
1000a4e2:	1c43      	adds	r3, r0, #1
1000a4e4:	d011      	beq.n	1000a50a <spi_init+0x92>
			if (config->mode == SPI_MODE_MASTER) {
1000a4e6:	782b      	ldrb	r3, [r5, #0]
1000a4e8:	2b01      	cmp	r3, #1
1000a4ea:	d102      	bne.n	1000a4f2 <spi_init+0x7a>
				config_gpio.direction = GPIO_PIN_DIR_OUTPUT;
1000a4ec:	466a      	mov	r2, sp
1000a4ee:	7113      	strb	r3, [r2, #4]
1000a4f0:	e003      	b.n	1000a4fa <spi_init+0x82>
			} else if (config->mode == SPI_MODE_SLAVE) {
1000a4f2:	2b00      	cmp	r3, #0
1000a4f4:	d101      	bne.n	1000a4fa <spi_init+0x82>
				config_gpio.direction = GPIO_PIN_DIR_INPUT;
1000a4f6:	466a      	mov	r2, sp
1000a4f8:	7113      	strb	r3, [r2, #4]
			}
			gpio_pin_set_config(config->pin_number_pad[idx], &config_gpio);
1000a4fa:	b2c0      	uxtb	r0, r0
1000a4fc:	a901      	add	r1, sp, #4
1000a4fe:	4b35      	ldr	r3, [pc, #212]	; (1000a5d4 <spi_init+0x15c>)
1000a500:	4798      	blx	r3
			gpio_pinmux_cofiguration(config->pin_number_pad[idx], \
1000a502:	8a39      	ldrh	r1, [r7, #16]
1000a504:	7838      	ldrb	r0, [r7, #0]
1000a506:	4b34      	ldr	r3, [pc, #208]	; (1000a5d8 <spi_init+0x160>)
1000a508:	4798      	blx	r3
1000a50a:	3404      	adds	r4, #4
	//Program the pinmux.
	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);

	/* Set the pinmux for this spi module. */
	for(idx = 0; idx < 4; idx++) {
1000a50c:	455c      	cmp	r4, fp
1000a50e:	d1e6      	bne.n	1000a4de <spi_init+0x66>
						(uint16_t)(config->pinmux_sel_pad[idx]));
		}
	}

	/* Set up the input clock for the module */
	spi_module->CLOCK_SOURCE_SELECT.reg = config->clock_source;
1000a510:	78eb      	ldrb	r3, [r5, #3]
1000a512:	4642      	mov	r2, r8
1000a514:	7413      	strb	r3, [r2, #16]

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
1000a516:	782b      	ldrb	r3, [r5, #0]
1000a518:	2b01      	cmp	r3, #1
1000a51a:	d100      	bne.n	1000a51e <spi_init+0xa6>
		/* Set the mode in SPI master mode */
		spi_module->SPI_MASTER_MODE.reg = SPI_MODE_MASTER;
1000a51c:	7713      	strb	r3, [r2, #28]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
1000a51e:	782b      	ldrb	r3, [r5, #0]
1000a520:	2b00      	cmp	r3, #0
1000a522:	d101      	bne.n	1000a528 <spi_init+0xb0>
		/* Set the mode in SPI slave mode */
		spi_module->SPI_MASTER_MODE.reg = SPI_MODE_SLAVE;
1000a524:	4642      	mov	r2, r8
1000a526:	7713      	strb	r3, [r2, #28]
		const struct spi_config *const config)
{
	Assert(module);
	Assert(config);

	Spi *const spi_module = (module->hw);
1000a528:	6833      	ldr	r3, [r6, #0]

	module->mode  = config->mode;
1000a52a:	782a      	ldrb	r2, [r5, #0]
1000a52c:	7172      	strb	r2, [r6, #5]

#if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
1000a52e:	782a      	ldrb	r2, [r5, #0]
1000a530:	2a01      	cmp	r2, #1
1000a532:	d101      	bne.n	1000a538 <spi_init+0xc0>
		spi_module->SPI_CLK_DIVIDER.reg = config->clock_divider;
1000a534:	792a      	ldrb	r2, [r5, #4]
1000a536:	829a      	strh	r2, [r3, #20]
	}
#endif

	/* Set data order */
	if (config->data_order == SPI_DATA_ORDER_LSB) {
1000a538:	786a      	ldrb	r2, [r5, #1]
1000a53a:	2a04      	cmp	r2, #4
1000a53c:	d104      	bne.n	1000a548 <spi_init+0xd0>
		spi_module->SPI_CONFIGURATION.bit.LSB_FIRST_ENABLE = 0x1;
1000a53e:	2124      	movs	r1, #36	; 0x24
1000a540:	5c58      	ldrb	r0, [r3, r1]
1000a542:	4302      	orrs	r2, r0
1000a544:	545a      	strb	r2, [r3, r1]
1000a546:	e004      	b.n	1000a552 <spi_init+0xda>
	} else {
		spi_module->SPI_CONFIGURATION.bit.LSB_FIRST_ENABLE = 0x0;
1000a548:	2124      	movs	r1, #36	; 0x24
1000a54a:	5c5a      	ldrb	r2, [r3, r1]
1000a54c:	2004      	movs	r0, #4
1000a54e:	4382      	bics	r2, r0
1000a550:	545a      	strb	r2, [r3, r1]
	}

	/* Set clock polarity and clock phase */
	switch(config->transfer_mode)
1000a552:	78aa      	ldrb	r2, [r5, #2]
1000a554:	2a01      	cmp	r2, #1
1000a556:	d01a      	beq.n	1000a58e <spi_init+0x116>
1000a558:	2a00      	cmp	r2, #0
1000a55a:	d004      	beq.n	1000a566 <spi_init+0xee>
1000a55c:	2a02      	cmp	r2, #2
1000a55e:	d00c      	beq.n	1000a57a <spi_init+0x102>
1000a560:	2a03      	cmp	r2, #3
1000a562:	d01e      	beq.n	1000a5a2 <spi_init+0x12a>
1000a564:	e026      	b.n	1000a5b4 <spi_init+0x13c>
	{
		case SPI_TRANSFER_MODE_0:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x0;
1000a566:	2224      	movs	r2, #36	; 0x24
1000a568:	5c99      	ldrb	r1, [r3, r2]
1000a56a:	2002      	movs	r0, #2
1000a56c:	4381      	bics	r1, r0
1000a56e:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x0;
1000a570:	5c99      	ldrb	r1, [r3, r2]
1000a572:	3801      	subs	r0, #1
1000a574:	4381      	bics	r1, r0
1000a576:	5499      	strb	r1, [r3, r2]
1000a578:	e01c      	b.n	1000a5b4 <spi_init+0x13c>
			break;
		case SPI_TRANSFER_MODE_1:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x1;
1000a57a:	2224      	movs	r2, #36	; 0x24
1000a57c:	5c98      	ldrb	r0, [r3, r2]
1000a57e:	2102      	movs	r1, #2
1000a580:	4301      	orrs	r1, r0
1000a582:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x0;
1000a584:	5c99      	ldrb	r1, [r3, r2]
1000a586:	2001      	movs	r0, #1
1000a588:	4381      	bics	r1, r0
1000a58a:	5499      	strb	r1, [r3, r2]
1000a58c:	e012      	b.n	1000a5b4 <spi_init+0x13c>
			break;
		case SPI_TRANSFER_MODE_2:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x0;
1000a58e:	2224      	movs	r2, #36	; 0x24
1000a590:	5c99      	ldrb	r1, [r3, r2]
1000a592:	2002      	movs	r0, #2
1000a594:	4381      	bics	r1, r0
1000a596:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x1;
1000a598:	5c98      	ldrb	r0, [r3, r2]
1000a59a:	2101      	movs	r1, #1
1000a59c:	4301      	orrs	r1, r0
1000a59e:	5499      	strb	r1, [r3, r2]
1000a5a0:	e008      	b.n	1000a5b4 <spi_init+0x13c>
			break;
		case SPI_TRANSFER_MODE_3:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x1;
1000a5a2:	2224      	movs	r2, #36	; 0x24
1000a5a4:	5c98      	ldrb	r0, [r3, r2]
1000a5a6:	2102      	movs	r1, #2
1000a5a8:	4301      	orrs	r1, r0
1000a5aa:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x1;
1000a5ac:	5c98      	ldrb	r0, [r3, r2]
1000a5ae:	2101      	movs	r1, #1
1000a5b0:	4301      	orrs	r1, r0
1000a5b2:	5499      	strb	r1, [r3, r2]
	module->locked                     = 0;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
1000a5b4:	2000      	movs	r0, #0
1000a5b6:	b003      	add	sp, #12
1000a5b8:	bc0c      	pop	{r2, r3}
1000a5ba:	4690      	mov	r8, r2
1000a5bc:	469b      	mov	fp, r3
1000a5be:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a5c0:	1000a43d 	.word	0x1000a43d
1000a5c4:	40006000 	.word	0x40006000
1000a5c8:	1000b065 	.word	0x1000b065
1000a5cc:	40007000 	.word	0x40007000
1000a5d0:	1000a9c1 	.word	0x1000a9c1
1000a5d4:	1000a9d1 	.word	0x1000a9d1
1000a5d8:	1000acb5 	.word	0x1000acb5

1000a5dc <spi_transceive_buffer_wait>:
enum status_code spi_transceive_buffer_wait(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
1000a5dc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a5de:	b083      	sub	sp, #12
	Spi *spi_module = module->hw;
1000a5e0:	6804      	ldr	r4, [r0, #0]
	uint8_t dummy = 0;
1000a5e2:	2600      	movs	r6, #0
1000a5e4:	466d      	mov	r5, sp
1000a5e6:	71ee      	strb	r6, [r5, #7]
1000a5e8:	3507      	adds	r5, #7
	uint8_t skip_mosi = 0;
	uint8_t skip_miso = 0;
	uint8_t status;
	uint16_t transfer_len = 0;

	if(spi_module == 0) {
1000a5ea:	2c00      	cmp	r4, #0
1000a5ec:	d034      	beq.n	1000a658 <spi_transceive_buffer_wait+0x7c>
		return STATUS_ERR_NOT_INITIALIZED;
	}
	if(!tx_data) {
1000a5ee:	2900      	cmp	r1, #0
1000a5f0:	d104      	bne.n	1000a5fc <spi_transceive_buffer_wait+0x20>
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
1000a5f2:	0029      	movs	r1, r5
1000a5f4:	7980      	ldrb	r0, [r0, #6]
1000a5f6:	7028      	strb	r0, [r5, #0]
		skip_mosi = 1;
1000a5f8:	2701      	movs	r7, #1
1000a5fa:	e00b      	b.n	1000a614 <spi_transceive_buffer_wait+0x38>
	} else if(!rx_data) {
1000a5fc:	2a00      	cmp	r2, #0
1000a5fe:	d005      	beq.n	1000a60c <spi_transceive_buffer_wait+0x30>
		rx_data = &dummy;
		skip_miso = 1;
	} else if(length == 0) {
		return STATUS_ERR_INVALID_ARG;
1000a600:	2017      	movs	r0, #23
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
		skip_miso = 1;
	} else if(length == 0) {
1000a602:	2b00      	cmp	r3, #0
1000a604:	d029      	beq.n	1000a65a <spi_transceive_buffer_wait+0x7e>
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
	uint8_t skip_miso = 0;
1000a606:	2600      	movs	r6, #0
		uint8_t *rx_data,
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
1000a608:	2700      	movs	r7, #0
1000a60a:	e003      	b.n	1000a614 <spi_transceive_buffer_wait+0x38>
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
		skip_miso = 1;
1000a60c:	2601      	movs	r6, #1
		uint8_t *rx_data,
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
1000a60e:	2700      	movs	r7, #0
	if(!tx_data) {
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
1000a610:	466a      	mov	r2, sp
1000a612:	3207      	adds	r2, #7
 */
static bool _spi_is_active(Spi *const spi_module)
{
	Assert(spi_module);

	return spi_module->SPI_BUS_STATUS.bit.SPI_ACTIVE;
1000a614:	2528      	movs	r5, #40	; 0x28
1000a616:	5d60      	ldrb	r0, [r4, r5]
	}

	/* Check for Idle */
	do {
		status = _spi_is_active(spi_module);
	}while(status);
1000a618:	07c0      	lsls	r0, r0, #31
1000a61a:	d4fc      	bmi.n	1000a616 <spi_transceive_buffer_wait+0x3a>

	/* Clear all status registers */
	spi_module->RECEIVE_STATUS.reg;
1000a61c:	7b20      	ldrb	r0, [r4, #12]
	spi_module->TRANSMIT_STATUS.reg;
1000a61e:	7a20      	ldrb	r0, [r4, #8]

	/* Start transfer */
	while(transfer_len < length) {
1000a620:	2b00      	cmp	r3, #0
1000a622:	d014      	beq.n	1000a64e <spi_transceive_buffer_wait+0x72>
1000a624:	2500      	movs	r5, #0
		/* Read data shifted from MISO */
		while(!_spi_is_ready_to_read(spi_module));
		*rx_data = spi_module->RECEIVE_DATA.reg;
		transfer_len++;
		if (!skip_mosi) {
			tx_data++;
1000a626:	4278      	negs	r0, r7
1000a628:	4147      	adcs	r7, r0
		}
		if (!skip_miso) {
			rx_data++;
1000a62a:	4270      	negs	r0, r6
1000a62c:	4146      	adcs	r6, r0
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->TRANSMIT_STATUS.bit.TX_FIFO_NOT_FULL);
1000a62e:	7a20      	ldrb	r0, [r4, #8]
	spi_module->TRANSMIT_STATUS.reg;

	/* Start transfer */
	while(transfer_len < length) {
		/* Write data to MOSI */
		while(!_spi_is_ready_to_write(spi_module));
1000a630:	07c0      	lsls	r0, r0, #31
1000a632:	d5fc      	bpl.n	1000a62e <spi_transceive_buffer_wait+0x52>
		spi_module->TRANSMIT_DATA.reg = *tx_data;
1000a634:	7808      	ldrb	r0, [r1, #0]
1000a636:	7020      	strb	r0, [r4, #0]
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->RECEIVE_STATUS.bit.RX_FIFO_NOT_EMPTY);
1000a638:	7b20      	ldrb	r0, [r4, #12]
	while(transfer_len < length) {
		/* Write data to MOSI */
		while(!_spi_is_ready_to_write(spi_module));
		spi_module->TRANSMIT_DATA.reg = *tx_data;
		/* Read data shifted from MISO */
		while(!_spi_is_ready_to_read(spi_module));
1000a63a:	07c0      	lsls	r0, r0, #31
1000a63c:	d5fc      	bpl.n	1000a638 <spi_transceive_buffer_wait+0x5c>
		*rx_data = spi_module->RECEIVE_DATA.reg;
1000a63e:	7920      	ldrb	r0, [r4, #4]
1000a640:	7010      	strb	r0, [r2, #0]
		transfer_len++;
1000a642:	3501      	adds	r5, #1
1000a644:	b2ad      	uxth	r5, r5
		if (!skip_mosi) {
			tx_data++;
1000a646:	19c9      	adds	r1, r1, r7
		}
		if (!skip_miso) {
			rx_data++;
1000a648:	1992      	adds	r2, r2, r6
	/* Clear all status registers */
	spi_module->RECEIVE_STATUS.reg;
	spi_module->TRANSMIT_STATUS.reg;

	/* Start transfer */
	while(transfer_len < length) {
1000a64a:	42ab      	cmp	r3, r5
1000a64c:	d1ef      	bne.n	1000a62e <spi_transceive_buffer_wait+0x52>
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->TRANSMIT_STATUS.bit.TX_FIFO_EMPTY);
1000a64e:	7a23      	ldrb	r3, [r4, #8]
		}
	}
	/* check TXFIFO is empty */
	do {
		status = _spi_is_write_complete(spi_module);
	}while(!status);
1000a650:	06db      	lsls	r3, r3, #27
1000a652:	d5fc      	bpl.n	1000a64e <spi_transceive_buffer_wait+0x72>

	return STATUS_OK;
1000a654:	2000      	movs	r0, #0
1000a656:	e000      	b.n	1000a65a <spi_transceive_buffer_wait+0x7e>
	uint8_t skip_miso = 0;
	uint8_t status;
	uint16_t transfer_len = 0;

	if(spi_module == 0) {
		return STATUS_ERR_NOT_INITIALIZED;
1000a658:	201f      	movs	r0, #31
		status = _spi_is_write_complete(spi_module);
	}while(!status);

	return STATUS_OK;

}
1000a65a:	b003      	add	sp, #12
1000a65c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a65e:	46c0      	nop			; (mov r8, r8)

1000a660 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		bool select)
{
1000a660:	b510      	push	{r4, lr}
	uint8_t gpio_num = slave->ss_pin;
1000a662:	7808      	ldrb	r0, [r1, #0]
	if(select) {
1000a664:	2a00      	cmp	r2, #0
1000a666:	d003      	beq.n	1000a670 <spi_select_slave+0x10>
		/* ASSERT Slave select pin */
		gpio_pin_set_output_level(gpio_num, false);
1000a668:	2100      	movs	r1, #0
1000a66a:	4b04      	ldr	r3, [pc, #16]	; (1000a67c <spi_select_slave+0x1c>)
1000a66c:	4798      	blx	r3
1000a66e:	e002      	b.n	1000a676 <spi_select_slave+0x16>
	} else {
		/* DEASSERT Slave select pin */
		gpio_pin_set_output_level(gpio_num, true);
1000a670:	2101      	movs	r1, #1
1000a672:	4b02      	ldr	r3, [pc, #8]	; (1000a67c <spi_select_slave+0x1c>)
1000a674:	4798      	blx	r3
	}

	return STATUS_OK;
}
1000a676:	2000      	movs	r0, #0
1000a678:	bd10      	pop	{r4, pc}
1000a67a:	46c0      	nop			; (mov r8, r8)
1000a67c:	1000ac29 	.word	0x1000ac29

1000a680 <dualtimer_isr_handler>:
 *
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
1000a680:	b510      	push	{r4, lr}
 * \retval The interrupt status of timer1/timer2
 */
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
1000a682:	4b0d      	ldr	r3, [pc, #52]	; (1000a6b8 <dualtimer_isr_handler+0x38>)
1000a684:	7d1b      	ldrb	r3, [r3, #20]
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
1000a686:	2b00      	cmp	r3, #0
1000a688:	d007      	beq.n	1000a69a <dualtimer_isr_handler+0x1a>
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
1000a68a:	2201      	movs	r2, #1
1000a68c:	4b0a      	ldr	r3, [pc, #40]	; (1000a6b8 <dualtimer_isr_handler+0x38>)
1000a68e:	731a      	strb	r2, [r3, #12]
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
1000a690:	4b0a      	ldr	r3, [pc, #40]	; (1000a6bc <dualtimer_isr_handler+0x3c>)
1000a692:	681b      	ldr	r3, [r3, #0]
1000a694:	2b00      	cmp	r3, #0
1000a696:	d000      	beq.n	1000a69a <dualtimer_isr_handler+0x1a>
			dualtimer_callback_timer1();
1000a698:	4798      	blx	r3
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
	} else {
		return DUALTIMER0->TIMER2MIS.reg;
1000a69a:	2334      	movs	r3, #52	; 0x34
1000a69c:	4a06      	ldr	r2, [pc, #24]	; (1000a6b8 <dualtimer_isr_handler+0x38>)
1000a69e:	5cd3      	ldrb	r3, [r2, r3]
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
1000a6a0:	2b00      	cmp	r3, #0
1000a6a2:	d007      	beq.n	1000a6b4 <dualtimer_isr_handler+0x34>
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
	} else {
		DUALTIMER0->TIMER2INTCLR.reg = 1;
1000a6a4:	2101      	movs	r1, #1
1000a6a6:	232c      	movs	r3, #44	; 0x2c
1000a6a8:	54d1      	strb	r1, [r2, r3]
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER2);
		if (dualtimer_callback_timer2)
1000a6aa:	4b05      	ldr	r3, [pc, #20]	; (1000a6c0 <dualtimer_isr_handler+0x40>)
1000a6ac:	681b      	ldr	r3, [r3, #0]
1000a6ae:	2b00      	cmp	r3, #0
1000a6b0:	d000      	beq.n	1000a6b4 <dualtimer_isr_handler+0x34>
			dualtimer_callback_timer2();
1000a6b2:	4798      	blx	r3
	}
}
1000a6b4:	bd10      	pop	{r4, pc}
1000a6b6:	46c0      	nop			; (mov r8, r8)
1000a6b8:	40001000 	.word	0x40001000
1000a6bc:	100185c8 	.word	0x100185c8
1000a6c0:	100185cc 	.word	0x100185cc

1000a6c4 <dualtimer_get_config_defaults>:
 *
 * \param[out]  config  Pointer to a DUALTIMER module configuration structure to set
 */
void dualtimer_get_config_defaults(struct dualtimer_config *config)
{
	config->timer1.timer_enable = true;
1000a6c4:	2301      	movs	r3, #1
1000a6c6:	7003      	strb	r3, [r0, #0]
	config->timer2.timer_enable = true;
1000a6c8:	7303      	strb	r3, [r0, #12]

	config->timer1.counter_mode = DUALTIMER_PERIODIC_MODE;
1000a6ca:	2202      	movs	r2, #2
1000a6cc:	7042      	strb	r2, [r0, #1]
	config->timer2.counter_mode = DUALTIMER_PERIODIC_MODE;
1000a6ce:	7342      	strb	r2, [r0, #13]

	config->timer1.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
1000a6d0:	7083      	strb	r3, [r0, #2]
	config->timer2.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
1000a6d2:	7383      	strb	r3, [r0, #14]

	config->timer1.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
1000a6d4:	2200      	movs	r2, #0
1000a6d6:	70c2      	strb	r2, [r0, #3]
	config->timer2.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
1000a6d8:	73c2      	strb	r2, [r0, #15]

	config->timer1.interrup_enable = true;
1000a6da:	7103      	strb	r3, [r0, #4]
	config->timer2.interrup_enable = true;
1000a6dc:	7403      	strb	r3, [r0, #16]

	config->timer1.load_value = 0;
1000a6de:	6082      	str	r2, [r0, #8]
	config->timer2.load_value = 0;
1000a6e0:	6142      	str	r2, [r0, #20]

	config->clock_source = DUALTIMER_CLK_INPUT_0;
1000a6e2:	7602      	strb	r2, [r0, #24]
}
1000a6e4:	4770      	bx	lr
1000a6e6:	46c0      	nop			; (mov r8, r8)

1000a6e8 <dualtimer_get_value>:
 *
 * \retval Timer1/Timer2 current value
 */
uint32_t dualtimer_get_value(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
1000a6e8:	2800      	cmp	r0, #0
1000a6ea:	d102      	bne.n	1000a6f2 <dualtimer_get_value+0xa>
		return DUALTIMER0->TIMER1VALUE.reg;
1000a6ec:	4b02      	ldr	r3, [pc, #8]	; (1000a6f8 <dualtimer_get_value+0x10>)
1000a6ee:	6858      	ldr	r0, [r3, #4]
1000a6f0:	e001      	b.n	1000a6f6 <dualtimer_get_value+0xe>
	} else {
		return DUALTIMER0->TIMER2VALUE.reg;
1000a6f2:	4b01      	ldr	r3, [pc, #4]	; (1000a6f8 <dualtimer_get_value+0x10>)
1000a6f4:	6a58      	ldr	r0, [r3, #36]	; 0x24
	}
}
1000a6f6:	4770      	bx	lr
1000a6f8:	40001000 	.word	0x40001000

1000a6fc <dualtimer_set_counter>:
 * \param[in]     value        Load value
 */
void dualtimer_set_counter(enum dualtimer_timer timer,
		enum dualtimer_set_register cur_bg, uint32_t value)
{
	if (timer == DUALTIMER_TIMER1) {
1000a6fc:	2800      	cmp	r0, #0
1000a6fe:	d107      	bne.n	1000a710 <dualtimer_set_counter+0x14>
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
1000a700:	2900      	cmp	r1, #0
1000a702:	d102      	bne.n	1000a70a <dualtimer_set_counter+0xe>
			DUALTIMER0->TIMER1LOAD.reg = value;
1000a704:	4b06      	ldr	r3, [pc, #24]	; (1000a720 <dualtimer_set_counter+0x24>)
1000a706:	601a      	str	r2, [r3, #0]
1000a708:	e009      	b.n	1000a71e <dualtimer_set_counter+0x22>
		} else {
			DUALTIMER0->TIMER1BGLOAD.reg = value;
1000a70a:	4b05      	ldr	r3, [pc, #20]	; (1000a720 <dualtimer_set_counter+0x24>)
1000a70c:	619a      	str	r2, [r3, #24]
1000a70e:	e006      	b.n	1000a71e <dualtimer_set_counter+0x22>
		}
	} else {
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
1000a710:	2900      	cmp	r1, #0
1000a712:	d102      	bne.n	1000a71a <dualtimer_set_counter+0x1e>
			DUALTIMER0->TIMER2LOAD.reg = value;
1000a714:	4b02      	ldr	r3, [pc, #8]	; (1000a720 <dualtimer_set_counter+0x24>)
1000a716:	621a      	str	r2, [r3, #32]
1000a718:	e001      	b.n	1000a71e <dualtimer_set_counter+0x22>
			} else {
			DUALTIMER0->TIMER2BGLOAD.reg = value;
1000a71a:	4b01      	ldr	r3, [pc, #4]	; (1000a720 <dualtimer_set_counter+0x24>)
1000a71c:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
}
1000a71e:	4770      	bx	lr
1000a720:	40001000 	.word	0x40001000

1000a724 <dualtimer_enable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_enable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
1000a724:	2800      	cmp	r0, #0
1000a726:	d105      	bne.n	1000a734 <dualtimer_enable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg |= DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
1000a728:	4a06      	ldr	r2, [pc, #24]	; (1000a744 <dualtimer_enable+0x20>)
1000a72a:	7a11      	ldrb	r1, [r2, #8]
1000a72c:	2380      	movs	r3, #128	; 0x80
1000a72e:	430b      	orrs	r3, r1
1000a730:	7213      	strb	r3, [r2, #8]
1000a732:	e005      	b.n	1000a740 <dualtimer_enable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg |= DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
1000a734:	4903      	ldr	r1, [pc, #12]	; (1000a744 <dualtimer_enable+0x20>)
1000a736:	2228      	movs	r2, #40	; 0x28
1000a738:	5c88      	ldrb	r0, [r1, r2]
1000a73a:	2380      	movs	r3, #128	; 0x80
1000a73c:	4303      	orrs	r3, r0
1000a73e:	548b      	strb	r3, [r1, r2]
	}
}
1000a740:	4770      	bx	lr
1000a742:	46c0      	nop			; (mov r8, r8)
1000a744:	40001000 	.word	0x40001000

1000a748 <dualtimer_disable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_disable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
1000a748:	2800      	cmp	r0, #0
1000a74a:	d105      	bne.n	1000a758 <dualtimer_disable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg &= ~DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
1000a74c:	4a06      	ldr	r2, [pc, #24]	; (1000a768 <dualtimer_disable+0x20>)
1000a74e:	7a11      	ldrb	r1, [r2, #8]
1000a750:	237f      	movs	r3, #127	; 0x7f
1000a752:	400b      	ands	r3, r1
1000a754:	7213      	strb	r3, [r2, #8]
1000a756:	e005      	b.n	1000a764 <dualtimer_disable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg &= ~DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
1000a758:	4903      	ldr	r1, [pc, #12]	; (1000a768 <dualtimer_disable+0x20>)
1000a75a:	2228      	movs	r2, #40	; 0x28
1000a75c:	5c88      	ldrb	r0, [r1, r2]
1000a75e:	237f      	movs	r3, #127	; 0x7f
1000a760:	4003      	ands	r3, r0
1000a762:	548b      	strb	r3, [r1, r2]
	}
}
1000a764:	4770      	bx	lr
1000a766:	46c0      	nop			; (mov r8, r8)
1000a768:	40001000 	.word	0x40001000

1000a76c <dualtimer_init>:
 * \param[in]     config       Pointer to the Dualtimer configuration options struct
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
1000a76c:	b570      	push	{r4, r5, r6, lr}
1000a76e:	0004      	movs	r4, r0
	uint8_t regval = 0;

	/* Global reset */
	system_peripheral_reset(PERIPHERAL_DUALT_TIMER);
1000a770:	2004      	movs	r0, #4
1000a772:	4b39      	ldr	r3, [pc, #228]	; (1000a858 <dualtimer_init+0xec>)
1000a774:	4798      	blx	r3

	/* Common config */
	if (config->timer1.timer_enable || config->timer2.timer_enable) {
1000a776:	7823      	ldrb	r3, [r4, #0]
1000a778:	2b00      	cmp	r3, #0
1000a77a:	d102      	bne.n	1000a782 <dualtimer_init+0x16>
1000a77c:	7b23      	ldrb	r3, [r4, #12]
1000a77e:	2b00      	cmp	r3, #0
1000a780:	d065      	beq.n	1000a84e <dualtimer_init+0xe2>
		LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |=
1000a782:	4936      	ldr	r1, [pc, #216]	; (1000a85c <dualtimer_init+0xf0>)
1000a784:	68ca      	ldr	r2, [r1, #12]
1000a786:	2320      	movs	r3, #32
1000a788:	4313      	orrs	r3, r2
1000a78a:	60cb      	str	r3, [r1, #12]
		LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
1000a78c:	7e22      	ldrb	r2, [r4, #24]
1000a78e:	698b      	ldr	r3, [r1, #24]
1000a790:	2003      	movs	r0, #3
1000a792:	4002      	ands	r2, r0
1000a794:	0112      	lsls	r2, r2, #4
1000a796:	302d      	adds	r0, #45	; 0x2d
1000a798:	4383      	bics	r3, r0
1000a79a:	4313      	orrs	r3, r2
1000a79c:	618b      	str	r3, [r1, #24]
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
1000a79e:	7823      	ldrb	r3, [r4, #0]
1000a7a0:	2b00      	cmp	r3, #0
1000a7a2:	d026      	beq.n	1000a7f2 <dualtimer_init+0x86>
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000a7a4:	7863      	ldrb	r3, [r4, #1]
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
1000a7a6:	2101      	movs	r1, #1
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000a7a8:	2b00      	cmp	r3, #0
1000a7aa:	d003      	beq.n	1000a7b4 <dualtimer_init+0x48>
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer1.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_0;
		} else if (config->timer1.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_1;
1000a7ac:	3b02      	subs	r3, #2
1000a7ae:	425d      	negs	r5, r3
1000a7b0:	415d      	adcs	r5, r3
1000a7b2:	01a9      	lsls	r1, r5, #6
		}
		regval |= (DUALTIMER_TIMER1CONTROL_TIMER_SIZE &
1000a7b4:	78a2      	ldrb	r2, [r4, #2]
1000a7b6:	0052      	lsls	r2, r2, #1
1000a7b8:	2502      	movs	r5, #2
1000a7ba:	402a      	ands	r2, r5
1000a7bc:	78e3      	ldrb	r3, [r4, #3]
1000a7be:	009b      	lsls	r3, r3, #2
1000a7c0:	350a      	adds	r5, #10
1000a7c2:	402b      	ands	r3, r5
1000a7c4:	431a      	orrs	r2, r3
1000a7c6:	0015      	movs	r5, r2
1000a7c8:	430d      	orrs	r5, r1
				((config->timer1.counter_size) << DUALTIMER_TIMER1CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER1CONTROL_TIMERPRE(config->timer1.clock_prescaler);
		if (config->timer1.interrup_enable) {
1000a7ca:	7923      	ldrb	r3, [r4, #4]
1000a7cc:	2b00      	cmp	r3, #0
1000a7ce:	d001      	beq.n	1000a7d4 <dualtimer_init+0x68>
			regval |= DUALTIMER_TIMER1CONTROL_INTERRUPT_ENABLE;
1000a7d0:	2320      	movs	r3, #32
1000a7d2:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER1LOAD.reg = config->timer1.load_value;
1000a7d4:	4b22      	ldr	r3, [pc, #136]	; (1000a860 <dualtimer_init+0xf4>)
1000a7d6:	68a2      	ldr	r2, [r4, #8]
1000a7d8:	601a      	str	r2, [r3, #0]
		DUALTIMER0->TIMER1CONTROL.reg = regval;
1000a7da:	721d      	strb	r5, [r3, #8]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
1000a7dc:	491f      	ldr	r1, [pc, #124]	; (1000a85c <dualtimer_init+0xf0>)
1000a7de:	22c4      	movs	r2, #196	; 0xc4
1000a7e0:	0052      	lsls	r2, r2, #1
1000a7e2:	5c88      	ldrb	r0, [r1, r2]
1000a7e4:	2301      	movs	r3, #1
1000a7e6:	4303      	orrs	r3, r0
1000a7e8:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER1);
1000a7ea:	2000      	movs	r0, #0
1000a7ec:	4b1d      	ldr	r3, [pc, #116]	; (1000a864 <dualtimer_init+0xf8>)
1000a7ee:	4798      	blx	r3
1000a7f0:	e000      	b.n	1000a7f4 <dualtimer_init+0x88>
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
	uint8_t regval = 0;
1000a7f2:	2500      	movs	r5, #0
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
		dualtimer_enable(DUALTIMER_TIMER1);
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
1000a7f4:	7b23      	ldrb	r3, [r4, #12]
1000a7f6:	2b00      	cmp	r3, #0
1000a7f8:	d029      	beq.n	1000a84e <dualtimer_init+0xe2>
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000a7fa:	7b63      	ldrb	r3, [r4, #13]
1000a7fc:	2b00      	cmp	r3, #0
1000a7fe:	d005      	beq.n	1000a80c <dualtimer_init+0xa0>
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
1000a800:	2b01      	cmp	r3, #1
1000a802:	d005      	beq.n	1000a810 <dualtimer_init+0xa4>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
1000a804:	2b02      	cmp	r3, #2
1000a806:	d104      	bne.n	1000a812 <dualtimer_init+0xa6>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
1000a808:	2540      	movs	r5, #64	; 0x40
1000a80a:	e002      	b.n	1000a812 <dualtimer_init+0xa6>
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
1000a80c:	2501      	movs	r5, #1
1000a80e:	e000      	b.n	1000a812 <dualtimer_init+0xa6>
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
1000a810:	2500      	movs	r5, #0
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
		}
		regval |= (DUALTIMER_TIMER2CONTROL_TIMER_SIZE &
1000a812:	7ba3      	ldrb	r3, [r4, #14]
1000a814:	005b      	lsls	r3, r3, #1
1000a816:	2102      	movs	r1, #2
1000a818:	4019      	ands	r1, r3
1000a81a:	7be2      	ldrb	r2, [r4, #15]
1000a81c:	0092      	lsls	r2, r2, #2
1000a81e:	230c      	movs	r3, #12
1000a820:	4013      	ands	r3, r2
1000a822:	430b      	orrs	r3, r1
1000a824:	431d      	orrs	r5, r3
				((config->timer2.counter_size) << DUALTIMER_TIMER2CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER2CONTROL_TIMERPRE(config->timer2.clock_prescaler);
		if (config->timer2.interrup_enable) {
1000a826:	7c23      	ldrb	r3, [r4, #16]
1000a828:	2b00      	cmp	r3, #0
1000a82a:	d001      	beq.n	1000a830 <dualtimer_init+0xc4>
			regval |= DUALTIMER_TIMER2CONTROL_INTERRUPT_ENABLE;
1000a82c:	2320      	movs	r3, #32
1000a82e:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER2LOAD.reg = config->timer2.load_value;
1000a830:	6962      	ldr	r2, [r4, #20]
1000a832:	4b0b      	ldr	r3, [pc, #44]	; (1000a860 <dualtimer_init+0xf4>)
1000a834:	621a      	str	r2, [r3, #32]
		DUALTIMER0->TIMER2CONTROL.reg = regval;
1000a836:	2228      	movs	r2, #40	; 0x28
1000a838:	549d      	strb	r5, [r3, r2]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_2_ENABLE;
1000a83a:	4908      	ldr	r1, [pc, #32]	; (1000a85c <dualtimer_init+0xf0>)
1000a83c:	3261      	adds	r2, #97	; 0x61
1000a83e:	32ff      	adds	r2, #255	; 0xff
1000a840:	5c88      	ldrb	r0, [r1, r2]
1000a842:	2302      	movs	r3, #2
1000a844:	4303      	orrs	r3, r0
1000a846:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER2);
1000a848:	2001      	movs	r0, #1
1000a84a:	4b06      	ldr	r3, [pc, #24]	; (1000a864 <dualtimer_init+0xf8>)
1000a84c:	4798      	blx	r3
	}

	system_register_isr(RAM_ISR_TABLE_DUALTIMER_INDEX, (uint32_t)dualtimer_isr_handler);
1000a84e:	4906      	ldr	r1, [pc, #24]	; (1000a868 <dualtimer_init+0xfc>)
1000a850:	201e      	movs	r0, #30
1000a852:	4b06      	ldr	r3, [pc, #24]	; (1000a86c <dualtimer_init+0x100>)
1000a854:	4798      	blx	r3
}
1000a856:	bd70      	pop	{r4, r5, r6, pc}
1000a858:	1000b72d 	.word	0x1000b72d
1000a85c:	4000b000 	.word	0x4000b000
1000a860:	40001000 	.word	0x40001000
1000a864:	1000a725 	.word	0x1000a725
1000a868:	1000a681 	.word	0x1000a681
1000a86c:	1000bb95 	.word	0x1000bb95

1000a870 <gpio_port0_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port0_isr_handler(void)
{
1000a870:	b570      	push	{r4, r5, r6, lr}
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;
1000a872:	4b16      	ldr	r3, [pc, #88]	; (1000a8cc <gpio_port0_isr_handler+0x5c>)
1000a874:	681d      	ldr	r5, [r3, #0]
1000a876:	8f29      	ldrh	r1, [r5, #56]	; 0x38
1000a878:	b289      	uxth	r1, r1

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
1000a87a:	07cb      	lsls	r3, r1, #31
1000a87c:	d407      	bmi.n	1000a88e <gpio_port0_isr_handler+0x1e>
1000a87e:	2301      	movs	r3, #1
1000a880:	2401      	movs	r4, #1
1000a882:	0018      	movs	r0, r3
1000a884:	0022      	movs	r2, r4
1000a886:	409a      	lsls	r2, r3
1000a888:	4211      	tst	r1, r2
1000a88a:	d014      	beq.n	1000a8b6 <gpio_port0_isr_handler+0x46>
1000a88c:	e001      	b.n	1000a892 <gpio_port0_isr_handler+0x22>
1000a88e:	2201      	movs	r2, #1
1000a890:	2000      	movs	r0, #0
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
1000a892:	b292      	uxth	r2, r2
1000a894:	872a      	strh	r2, [r5, #56]	; 0x38
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
1000a896:	2346      	movs	r3, #70	; 0x46
1000a898:	4a0c      	ldr	r2, [pc, #48]	; (1000a8cc <gpio_port0_isr_handler+0x5c>)
1000a89a:	5ad3      	ldrh	r3, [r2, r3]
1000a89c:	4103      	asrs	r3, r0
1000a89e:	07db      	lsls	r3, r3, #31
1000a8a0:	d50c      	bpl.n	1000a8bc <gpio_port0_isr_handler+0x4c>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
1000a8a2:	2344      	movs	r3, #68	; 0x44

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
1000a8a4:	5ad3      	ldrh	r3, [r2, r3]
1000a8a6:	4103      	asrs	r3, r0
1000a8a8:	07db      	lsls	r3, r3, #31
1000a8aa:	d507      	bpl.n	1000a8bc <gpio_port0_isr_handler+0x4c>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
                _gpio_instances[0].callback[i]();
1000a8ac:	0080      	lsls	r0, r0, #2
1000a8ae:	1810      	adds	r0, r2, r0
1000a8b0:	6843      	ldr	r3, [r0, #4]
1000a8b2:	4798      	blx	r3
1000a8b4:	e002      	b.n	1000a8bc <gpio_port0_isr_handler+0x4c>
1000a8b6:	3301      	adds	r3, #1
 */
static void gpio_port0_isr_handler(void)
{
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
1000a8b8:	2b10      	cmp	r3, #16
1000a8ba:	d1e2      	bne.n	1000a882 <gpio_port0_isr_handler+0x12>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000a8bc:	2180      	movs	r1, #128	; 0x80
1000a8be:	0409      	lsls	r1, r1, #16
1000a8c0:	23c0      	movs	r3, #192	; 0xc0
1000a8c2:	005b      	lsls	r3, r3, #1
1000a8c4:	4a02      	ldr	r2, [pc, #8]	; (1000a8d0 <gpio_port0_isr_handler+0x60>)
1000a8c6:	50d1      	str	r1, [r2, r3]
                _gpio_instances[0].callback[i]();
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO0_IRQn);
}
1000a8c8:	bd70      	pop	{r4, r5, r6, pc}
1000a8ca:	46c0      	nop			; (mov r8, r8)
1000a8cc:	1001a2a0 	.word	0x1001a2a0
1000a8d0:	e000e100 	.word	0xe000e100

1000a8d4 <gpio_port1_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port1_isr_handler(void)
{
1000a8d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;
1000a8d6:	4b18      	ldr	r3, [pc, #96]	; (1000a938 <gpio_port1_isr_handler+0x64>)
1000a8d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
1000a8da:	8f1e      	ldrh	r6, [r3, #56]	; 0x38
1000a8dc:	b2b6      	uxth	r6, r6
1000a8de:	0037      	movs	r7, r6
1000a8e0:	2400      	movs	r4, #0

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
1000a8e2:	0b76      	lsrs	r6, r6, #13
1000a8e4:	0376      	lsls	r6, r6, #13
			aon_handle_ext_wakeup_isr();
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
1000a8e6:	4d14      	ldr	r5, [pc, #80]	; (1000a938 <gpio_port1_isr_handler+0x64>)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
1000a8e8:	2e00      	cmp	r6, #0
1000a8ea:	d001      	beq.n	1000a8f0 <gpio_port1_isr_handler+0x1c>
			aon_handle_ext_wakeup_isr();
1000a8ec:	4b13      	ldr	r3, [pc, #76]	; (1000a93c <gpio_port1_isr_handler+0x68>)
1000a8ee:	4798      	blx	r3
		}

		if (flag & (1 << i)) {
1000a8f0:	0022      	movs	r2, r4
1000a8f2:	2301      	movs	r3, #1
1000a8f4:	40a3      	lsls	r3, r4
1000a8f6:	421f      	tst	r7, r3
1000a8f8:	d013      	beq.n	1000a922 <gpio_port1_isr_handler+0x4e>
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
1000a8fa:	b29b      	uxth	r3, r3
1000a8fc:	6ca9      	ldr	r1, [r5, #72]	; 0x48
1000a8fe:	870b      	strh	r3, [r1, #56]	; 0x38
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
1000a900:	238e      	movs	r3, #142	; 0x8e
1000a902:	5aeb      	ldrh	r3, [r5, r3]
1000a904:	4123      	asrs	r3, r4
1000a906:	07db      	lsls	r3, r3, #31
1000a908:	d50b      	bpl.n	1000a922 <gpio_port1_isr_handler+0x4e>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
1000a90a:	238c      	movs	r3, #140	; 0x8c
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
1000a90c:	490a      	ldr	r1, [pc, #40]	; (1000a938 <gpio_port1_isr_handler+0x64>)
1000a90e:	5acb      	ldrh	r3, [r1, r3]
1000a910:	4123      	asrs	r3, r4
1000a912:	07db      	lsls	r3, r3, #31
1000a914:	d505      	bpl.n	1000a922 <gpio_port1_isr_handler+0x4e>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
				_gpio_instances[1].callback[i]();
1000a916:	3212      	adds	r2, #18
1000a918:	0092      	lsls	r2, r2, #2
1000a91a:	188a      	adds	r2, r1, r2
1000a91c:	6853      	ldr	r3, [r2, #4]
1000a91e:	4798      	blx	r3
				break;
1000a920:	e002      	b.n	1000a928 <gpio_port1_isr_handler+0x54>
1000a922:	3401      	adds	r4, #1
 */
static void gpio_port1_isr_handler(void)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
1000a924:	2c10      	cmp	r4, #16
1000a926:	d1df      	bne.n	1000a8e8 <gpio_port1_isr_handler+0x14>
1000a928:	2180      	movs	r1, #128	; 0x80
1000a92a:	0449      	lsls	r1, r1, #17
1000a92c:	23c0      	movs	r3, #192	; 0xc0
1000a92e:	005b      	lsls	r3, r3, #1
1000a930:	4a03      	ldr	r2, [pc, #12]	; (1000a940 <gpio_port1_isr_handler+0x6c>)
1000a932:	50d1      	str	r1, [r2, r3]
				break;
			}
		}
	}
	NVIC_ClearPendingIRQ(GPIO1_IRQn);
}
1000a934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000a936:	46c0      	nop			; (mov r8, r8)
1000a938:	1001a2a0 	.word	0x1001a2a0
1000a93c:	0001bc51 	.word	0x0001bc51
1000a940:	e000e100 	.word	0xe000e100

1000a944 <gpio_port2_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port2_isr_handler(void)
{
1000a944:	b510      	push	{r4, lr}
	uint32_t flag = _gpio_instances[2].hw->INTSTATUSCLEAR.reg;
1000a946:	2390      	movs	r3, #144	; 0x90
1000a948:	4a1b      	ldr	r2, [pc, #108]	; (1000a9b8 <gpio_port2_isr_handler+0x74>)
1000a94a:	58d2      	ldr	r2, [r2, r3]
1000a94c:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000a94e:	b29b      	uxth	r3, r3

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
1000a950:	04d9      	lsls	r1, r3, #19
1000a952:	d414      	bmi.n	1000a97e <gpio_port2_isr_handler+0x3a>
1000a954:	0499      	lsls	r1, r3, #18
1000a956:	d40a      	bmi.n	1000a96e <gpio_port2_isr_handler+0x2a>
1000a958:	0459      	lsls	r1, r3, #17
1000a95a:	d40c      	bmi.n	1000a976 <gpio_port2_isr_handler+0x32>
1000a95c:	0bdb      	lsrs	r3, r3, #15
1000a95e:	03db      	lsls	r3, r3, #15
1000a960:	b29b      	uxth	r3, r3
1000a962:	2b00      	cmp	r3, #0
1000a964:	d020      	beq.n	1000a9a8 <gpio_port2_isr_handler+0x64>
1000a966:	2380      	movs	r3, #128	; 0x80
1000a968:	021b      	lsls	r3, r3, #8
1000a96a:	210f      	movs	r1, #15
1000a96c:	e00a      	b.n	1000a984 <gpio_port2_isr_handler+0x40>
1000a96e:	2380      	movs	r3, #128	; 0x80
1000a970:	019b      	lsls	r3, r3, #6
1000a972:	210d      	movs	r1, #13
1000a974:	e006      	b.n	1000a984 <gpio_port2_isr_handler+0x40>
1000a976:	2380      	movs	r3, #128	; 0x80
1000a978:	01db      	lsls	r3, r3, #7
1000a97a:	210e      	movs	r1, #14
1000a97c:	e002      	b.n	1000a984 <gpio_port2_isr_handler+0x40>
1000a97e:	2380      	movs	r3, #128	; 0x80
1000a980:	015b      	lsls	r3, r3, #5
1000a982:	210c      	movs	r1, #12
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
1000a984:	b29b      	uxth	r3, r3
1000a986:	8713      	strh	r3, [r2, #56]	; 0x38
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
1000a988:	23d6      	movs	r3, #214	; 0xd6
1000a98a:	4a0b      	ldr	r2, [pc, #44]	; (1000a9b8 <gpio_port2_isr_handler+0x74>)
1000a98c:	5ad3      	ldrh	r3, [r2, r3]
1000a98e:	410b      	asrs	r3, r1
1000a990:	07db      	lsls	r3, r3, #31
1000a992:	d509      	bpl.n	1000a9a8 <gpio_port2_isr_handler+0x64>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
1000a994:	23d4      	movs	r3, #212	; 0xd4

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
1000a996:	5ad3      	ldrh	r3, [r2, r3]
1000a998:	410b      	asrs	r3, r1
1000a99a:	07db      	lsls	r3, r3, #31
1000a99c:	d504      	bpl.n	1000a9a8 <gpio_port2_isr_handler+0x64>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
                _gpio_instances[2].callback[i]();
1000a99e:	3124      	adds	r1, #36	; 0x24
1000a9a0:	0089      	lsls	r1, r1, #2
1000a9a2:	1851      	adds	r1, r2, r1
1000a9a4:	684b      	ldr	r3, [r1, #4]
1000a9a6:	4798      	blx	r3
1000a9a8:	2180      	movs	r1, #128	; 0x80
1000a9aa:	0489      	lsls	r1, r1, #18
1000a9ac:	23c0      	movs	r3, #192	; 0xc0
1000a9ae:	005b      	lsls	r3, r3, #1
1000a9b0:	4a02      	ldr	r2, [pc, #8]	; (1000a9bc <gpio_port2_isr_handler+0x78>)
1000a9b2:	50d1      	str	r1, [r2, r3]
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO2_IRQn);
}
1000a9b4:	bd10      	pop	{r4, pc}
1000a9b6:	46c0      	nop			; (mov r8, r8)
1000a9b8:	1001a2a0 	.word	0x1001a2a0
1000a9bc:	e000e100 	.word	0xe000e100

1000a9c0 <gpio_get_config_defaults>:
 *  \param[out] config  Configuration structure to initialize to default values.
 */
void gpio_get_config_defaults(struct gpio_config *const config)
{
	/* Default configuration values */
	config->direction  = GPIO_PIN_DIR_INPUT;
1000a9c0:	2300      	movs	r3, #0
1000a9c2:	7003      	strb	r3, [r0, #0]
	config->input_pull = GPIO_PIN_PULL_UP;
1000a9c4:	2201      	movs	r2, #1
1000a9c6:	7042      	strb	r2, [r0, #1]
	config->powersave  = false;
1000a9c8:	7083      	strb	r3, [r0, #2]
	config->aon_wakeup = false;
1000a9ca:	70c3      	strb	r3, [r0, #3]
}
1000a9cc:	4770      	bx	lr
1000a9ce:	46c0      	nop			; (mov r8, r8)

1000a9d0 <gpio_pin_set_config>:
 *  \retval STATUS_RESOURCE_NOT_AVAILABLE   Requested gpio is already in use.
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
1000a9d0:	b570      	push	{r4, r5, r6, lr}
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
1000a9d2:	2317      	movs	r3, #23
	enum status_code status = STATUS_OK;

	/* Following GPIO's should never be modified by user.
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
1000a9d4:	2801      	cmp	r0, #1
1000a9d6:	d800      	bhi.n	1000a9da <gpio_pin_set_config+0xa>
1000a9d8:	e0c8      	b.n	1000ab6c <gpio_pin_set_config+0x19c>
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
	} else {
		if (gpio_pin <= 7) {
1000a9da:	2807      	cmp	r0, #7
1000a9dc:	d809      	bhi.n	1000a9f2 <gpio_pin_set_config+0x22>
			LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000a9de:	4d64      	ldr	r5, [pc, #400]	; (1000ab70 <gpio_pin_set_config+0x1a0>)
1000a9e0:	6c6a      	ldr	r2, [r5, #68]	; 0x44
1000a9e2:	3b10      	subs	r3, #16
1000a9e4:	4003      	ands	r3, r0
1000a9e6:	009b      	lsls	r3, r3, #2
1000a9e8:	2407      	movs	r4, #7
1000a9ea:	409c      	lsls	r4, r3
1000a9ec:	43a2      	bics	r2, r4
1000a9ee:	646a      	str	r2, [r5, #68]	; 0x44
1000a9f0:	e029      	b.n	1000aa46 <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 15) {
1000a9f2:	280f      	cmp	r0, #15
1000a9f4:	d809      	bhi.n	1000aa0a <gpio_pin_set_config+0x3a>
			LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000a9f6:	4d5e      	ldr	r5, [pc, #376]	; (1000ab70 <gpio_pin_set_config+0x1a0>)
1000a9f8:	6caa      	ldr	r2, [r5, #72]	; 0x48
1000a9fa:	2307      	movs	r3, #7
1000a9fc:	4003      	ands	r3, r0
1000a9fe:	009b      	lsls	r3, r3, #2
1000aa00:	2407      	movs	r4, #7
1000aa02:	409c      	lsls	r4, r3
1000aa04:	43a2      	bics	r2, r4
1000aa06:	64aa      	str	r2, [r5, #72]	; 0x48
1000aa08:	e01d      	b.n	1000aa46 <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 23) {
1000aa0a:	2817      	cmp	r0, #23
1000aa0c:	d809      	bhi.n	1000aa22 <gpio_pin_set_config+0x52>
			LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000aa0e:	4d58      	ldr	r5, [pc, #352]	; (1000ab70 <gpio_pin_set_config+0x1a0>)
1000aa10:	6cea      	ldr	r2, [r5, #76]	; 0x4c
1000aa12:	2307      	movs	r3, #7
1000aa14:	4003      	ands	r3, r0
1000aa16:	009b      	lsls	r3, r3, #2
1000aa18:	2407      	movs	r4, #7
1000aa1a:	409c      	lsls	r4, r3
1000aa1c:	43a2      	bics	r2, r4
1000aa1e:	64ea      	str	r2, [r5, #76]	; 0x4c
1000aa20:	e011      	b.n	1000aa46 <gpio_pin_set_config+0x76>
		} else if (44 <= gpio_pin  && gpio_pin < 48) {
1000aa22:	0003      	movs	r3, r0
1000aa24:	3b2c      	subs	r3, #44	; 0x2c
1000aa26:	2b03      	cmp	r3, #3
1000aa28:	d80d      	bhi.n	1000aa46 <gpio_pin_set_config+0x76>
			/* Set GPIO_MSx as digital mode */
			AON_GP_REGS0->MS_GPIO_MODE.vec.ANALOG_ENABLE_ &= ~(1 << (gpio_pin - PIN_GPIO_MS4));
1000aa2a:	4d52      	ldr	r5, [pc, #328]	; (1000ab74 <gpio_pin_set_config+0x1a4>)
1000aa2c:	2482      	movs	r4, #130	; 0x82
1000aa2e:	00e4      	lsls	r4, r4, #3
1000aa30:	5d2a      	ldrb	r2, [r5, r4]
1000aa32:	0712      	lsls	r2, r2, #28
1000aa34:	2601      	movs	r6, #1
1000aa36:	409e      	lsls	r6, r3
1000aa38:	0f12      	lsrs	r2, r2, #28
1000aa3a:	5d2b      	ldrb	r3, [r5, r4]
1000aa3c:	43b2      	bics	r2, r6
1000aa3e:	260f      	movs	r6, #15
1000aa40:	43b3      	bics	r3, r6
1000aa42:	4313      	orrs	r3, r2
1000aa44:	552b      	strb	r3, [r5, r4]
		}
	
		if ((gpio_pin == PIN_AO_GPIO_0) || (gpio_pin == PIN_AO_GPIO_1) ||
1000aa46:	0003      	movs	r3, r0
1000aa48:	3b1d      	subs	r3, #29
1000aa4a:	2b02      	cmp	r3, #2
1000aa4c:	d829      	bhi.n	1000aaa2 <gpio_pin_set_config+0xd2>
				(gpio_pin == PIN_AO_GPIO_2)) {
			/* Active Low, Always On Pull Enable Control */
			if (config->input_pull == GPIO_PIN_PULL_UP) {
1000aa4e:	784b      	ldrb	r3, [r1, #1]
1000aa50:	2b01      	cmp	r3, #1
1000aa52:	d108      	bne.n	1000aa66 <gpio_pin_set_config+0x96>
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
1000aa54:	4d47      	ldr	r5, [pc, #284]	; (1000ab74 <gpio_pin_set_config+0x1a4>)
1000aa56:	7d2b      	ldrb	r3, [r5, #20]
1000aa58:	241f      	movs	r4, #31
1000aa5a:	1a24      	subs	r4, r4, r0
1000aa5c:	2201      	movs	r2, #1
1000aa5e:	40a2      	lsls	r2, r4
1000aa60:	4393      	bics	r3, r2
1000aa62:	752b      	strb	r3, [r5, #20]
1000aa64:	e008      	b.n	1000aa78 <gpio_pin_set_config+0xa8>
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
1000aa66:	4c43      	ldr	r4, [pc, #268]	; (1000ab74 <gpio_pin_set_config+0x1a4>)
1000aa68:	7d25      	ldrb	r5, [r4, #20]
1000aa6a:	221f      	movs	r2, #31
1000aa6c:	1a12      	subs	r2, r2, r0
1000aa6e:	2301      	movs	r3, #1
1000aa70:	4093      	lsls	r3, r2
1000aa72:	432b      	orrs	r3, r5
1000aa74:	b2db      	uxtb	r3, r3
1000aa76:	7523      	strb	r3, [r4, #20]
			}
			if (config->aon_wakeup) {
1000aa78:	78ca      	ldrb	r2, [r1, #3]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000aa7a:	2300      	movs	r3, #0
			if (config->input_pull == GPIO_PIN_PULL_UP) {
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
			}
			if (config->aon_wakeup) {
1000aa7c:	2a00      	cmp	r2, #0
1000aa7e:	d075      	beq.n	1000ab6c <gpio_pin_set_config+0x19c>
				/* Enable AON_GPIO_x to be a wakeup MCU from sleep mode */
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
1000aa80:	493c      	ldr	r1, [pc, #240]	; (1000ab74 <gpio_pin_set_config+0x1a4>)
1000aa82:	880c      	ldrh	r4, [r1, #0]
1000aa84:	221f      	movs	r2, #31
1000aa86:	1a10      	subs	r0, r2, r0
1000aa88:	0080      	lsls	r0, r0, #2
1000aa8a:	3301      	adds	r3, #1
1000aa8c:	4083      	lsls	r3, r0
1000aa8e:	4323      	orrs	r3, r4
1000aa90:	b29b      	uxth	r3, r3
1000aa92:	800b      	strh	r3, [r1, #0]
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
1000aa94:	4a38      	ldr	r2, [pc, #224]	; (1000ab78 <gpio_pin_set_config+0x1a8>)
1000aa96:	7811      	ldrb	r1, [r2, #0]
1000aa98:	2302      	movs	r3, #2
1000aa9a:	430b      	orrs	r3, r1
1000aa9c:	7013      	strb	r3, [r2, #0]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000aa9e:	2300      	movs	r3, #0
1000aaa0:	e064      	b.n	1000ab6c <gpio_pin_set_config+0x19c>
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
1000aaa2:	780a      	ldrb	r2, [r1, #0]
1000aaa4:	2a00      	cmp	r2, #0
1000aaa6:	d140      	bne.n	1000ab2a <gpio_pin_set_config+0x15a>
				if(gpio_pin < 16) {
1000aaa8:	280f      	cmp	r0, #15
1000aaaa:	d808      	bhi.n	1000aabe <gpio_pin_set_config+0xee>
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
1000aaac:	2301      	movs	r3, #1
1000aaae:	4083      	lsls	r3, r0
1000aab0:	b29b      	uxth	r3, r3
1000aab2:	4a32      	ldr	r2, [pc, #200]	; (1000ab7c <gpio_pin_set_config+0x1ac>)
1000aab4:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000aab6:	2300      	movs	r3, #0
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
1000aab8:	281f      	cmp	r0, #31
1000aaba:	d857      	bhi.n	1000ab6c <gpio_pin_set_config+0x19c>
1000aabc:	e012      	b.n	1000aae4 <gpio_pin_set_config+0x114>
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
				if(gpio_pin < 16) {
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32){
1000aabe:	281f      	cmp	r0, #31
1000aac0:	d807      	bhi.n	1000aad2 <gpio_pin_set_config+0x102>
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000aac2:	220f      	movs	r2, #15
1000aac4:	4002      	ands	r2, r0
1000aac6:	2301      	movs	r3, #1
1000aac8:	4093      	lsls	r3, r2
1000aaca:	b29b      	uxth	r3, r3
1000aacc:	4a2c      	ldr	r2, [pc, #176]	; (1000ab80 <gpio_pin_set_config+0x1b0>)
1000aace:	8293      	strh	r3, [r2, #20]
1000aad0:	e008      	b.n	1000aae4 <gpio_pin_set_config+0x114>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000aad2:	230f      	movs	r3, #15
1000aad4:	4018      	ands	r0, r3
1000aad6:	3b0e      	subs	r3, #14
1000aad8:	4083      	lsls	r3, r0
1000aada:	b29b      	uxth	r3, r3
1000aadc:	4a29      	ldr	r2, [pc, #164]	; (1000ab84 <gpio_pin_set_config+0x1b4>)
1000aade:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000aae0:	2300      	movs	r3, #0
1000aae2:	e043      	b.n	1000ab6c <gpio_pin_set_config+0x19c>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
1000aae4:	784b      	ldrb	r3, [r1, #1]
1000aae6:	2b01      	cmp	r3, #1
1000aae8:	d00c      	beq.n	1000ab04 <gpio_pin_set_config+0x134>
1000aaea:	2b00      	cmp	r3, #0
1000aaec:	d002      	beq.n	1000aaf4 <gpio_pin_set_config+0x124>
1000aaee:	2b02      	cmp	r3, #2
1000aaf0:	d010      	beq.n	1000ab14 <gpio_pin_set_config+0x144>
1000aaf2:	e03a      	b.n	1000ab6a <gpio_pin_set_config+0x19a>
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
1000aaf4:	491e      	ldr	r1, [pc, #120]	; (1000ab70 <gpio_pin_set_config+0x1a0>)
1000aaf6:	6d0a      	ldr	r2, [r1, #80]	; 0x50
1000aaf8:	2301      	movs	r3, #1
1000aafa:	4083      	lsls	r3, r0
1000aafc:	4313      	orrs	r3, r2
1000aafe:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000ab00:	2300      	movs	r3, #0
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
1000ab02:	e033      	b.n	1000ab6c <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000ab04:	491a      	ldr	r1, [pc, #104]	; (1000ab70 <gpio_pin_set_config+0x1a0>)
1000ab06:	6d0b      	ldr	r3, [r1, #80]	; 0x50
1000ab08:	2201      	movs	r2, #1
1000ab0a:	4082      	lsls	r2, r0
1000ab0c:	4393      	bics	r3, r2
1000ab0e:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000ab10:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
1000ab12:	e02b      	b.n	1000ab6c <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
1000ab14:	4b16      	ldr	r3, [pc, #88]	; (1000ab70 <gpio_pin_set_config+0x1a0>)
1000ab16:	6d59      	ldr	r1, [r3, #84]	; 0x54
1000ab18:	2201      	movs	r2, #1
1000ab1a:	4082      	lsls	r2, r0
1000ab1c:	4311      	orrs	r1, r2
1000ab1e:	6559      	str	r1, [r3, #84]	; 0x54
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000ab20:	6d19      	ldr	r1, [r3, #80]	; 0x50
1000ab22:	4391      	bics	r1, r2
1000ab24:	6519      	str	r1, [r3, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000ab26:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
1000ab28:	e020      	b.n	1000ab6c <gpio_pin_set_config+0x19c>
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000ab2a:	2300      	movs	r3, #0
						default:
							status = STATUS_ERR_INVALID_ARG;
							break;
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
1000ab2c:	2a01      	cmp	r2, #1
1000ab2e:	d11d      	bne.n	1000ab6c <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
1000ab30:	280f      	cmp	r0, #15
1000ab32:	d806      	bhi.n	1000ab42 <gpio_pin_set_config+0x172>
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
1000ab34:	3301      	adds	r3, #1
1000ab36:	4083      	lsls	r3, r0
1000ab38:	b29b      	uxth	r3, r3
1000ab3a:	4a10      	ldr	r2, [pc, #64]	; (1000ab7c <gpio_pin_set_config+0x1ac>)
1000ab3c:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000ab3e:	2300      	movs	r3, #0
1000ab40:	e014      	b.n	1000ab6c <gpio_pin_set_config+0x19c>
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
1000ab42:	281f      	cmp	r0, #31
1000ab44:	d808      	bhi.n	1000ab58 <gpio_pin_set_config+0x188>
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
1000ab46:	230f      	movs	r3, #15
1000ab48:	4018      	ands	r0, r3
1000ab4a:	3b0e      	subs	r3, #14
1000ab4c:	4083      	lsls	r3, r0
1000ab4e:	b29b      	uxth	r3, r3
1000ab50:	4a0b      	ldr	r2, [pc, #44]	; (1000ab80 <gpio_pin_set_config+0x1b0>)
1000ab52:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000ab54:	2300      	movs	r3, #0
1000ab56:	e009      	b.n	1000ab6c <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENSET.reg = (1 << (gpio_pin % 16));
1000ab58:	230f      	movs	r3, #15
1000ab5a:	4018      	ands	r0, r3
1000ab5c:	3b0e      	subs	r3, #14
1000ab5e:	4083      	lsls	r3, r0
1000ab60:	b29b      	uxth	r3, r3
1000ab62:	4a08      	ldr	r2, [pc, #32]	; (1000ab84 <gpio_pin_set_config+0x1b4>)
1000ab64:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000ab66:	2300      	movs	r3, #0
1000ab68:	e000      	b.n	1000ab6c <gpio_pin_set_config+0x19c>
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
						default:
							status = STATUS_ERR_INVALID_ARG;
1000ab6a:	2317      	movs	r3, #23
				}
			}
		}
	}
	return status;
}
1000ab6c:	0018      	movs	r0, r3
1000ab6e:	bd70      	pop	{r4, r5, r6, pc}
1000ab70:	4000b000 	.word	0x4000b000
1000ab74:	4000f000 	.word	0x4000f000
1000ab78:	4000e000 	.word	0x4000e000
1000ab7c:	40010000 	.word	0x40010000
1000ab80:	40011000 	.word	0x40011000
1000ab84:	40013000 	.word	0x40013000

1000ab88 <gpio_pin_get_input_level>:
 */
bool gpio_pin_get_input_level(const uint8_t gpio_pin)
{
	uint32_t regval = 0;

	if (gpio_pin < 16) {
1000ab88:	280f      	cmp	r0, #15
1000ab8a:	d806      	bhi.n	1000ab9a <gpio_pin_get_input_level+0x12>
		regval = GPIO0->DATA.reg;
1000ab8c:	4b0f      	ldr	r3, [pc, #60]	; (1000abcc <gpio_pin_get_input_level+0x44>)
1000ab8e:	8819      	ldrh	r1, [r3, #0]
		regval &= (1 << gpio_pin);
1000ab90:	2301      	movs	r3, #1
1000ab92:	4083      	lsls	r3, r0
1000ab94:	0018      	movs	r0, r3
1000ab96:	4008      	ands	r0, r1
1000ab98:	e014      	b.n	1000abc4 <gpio_pin_get_input_level+0x3c>
	} else if (gpio_pin < 32) {
1000ab9a:	281f      	cmp	r0, #31
1000ab9c:	d809      	bhi.n	1000abb2 <gpio_pin_get_input_level+0x2a>
		regval = GPIO1->DATA.reg;
1000ab9e:	4b0c      	ldr	r3, [pc, #48]	; (1000abd0 <gpio_pin_get_input_level+0x48>)
1000aba0:	8819      	ldrh	r1, [r3, #0]
		regval &= (1 << (gpio_pin % 16));
1000aba2:	230f      	movs	r3, #15
1000aba4:	4003      	ands	r3, r0
1000aba6:	001a      	movs	r2, r3
1000aba8:	2301      	movs	r3, #1
1000abaa:	4093      	lsls	r3, r2
1000abac:	0018      	movs	r0, r3
1000abae:	4008      	ands	r0, r1
1000abb0:	e008      	b.n	1000abc4 <gpio_pin_get_input_level+0x3c>
	} else {
		regval = GPIO2->DATA.reg;
1000abb2:	4b08      	ldr	r3, [pc, #32]	; (1000abd4 <gpio_pin_get_input_level+0x4c>)
1000abb4:	8819      	ldrh	r1, [r3, #0]
		regval &= (1 << (gpio_pin % 16));
1000abb6:	230f      	movs	r3, #15
1000abb8:	4003      	ands	r3, r0
1000abba:	001a      	movs	r2, r3
1000abbc:	2301      	movs	r3, #1
1000abbe:	4093      	lsls	r3, r2
1000abc0:	0018      	movs	r0, r3
1000abc2:	4008      	ands	r0, r1
	}

	return regval;
1000abc4:	1e43      	subs	r3, r0, #1
1000abc6:	4198      	sbcs	r0, r3
1000abc8:	b2c0      	uxtb	r0, r0
}
1000abca:	4770      	bx	lr
1000abcc:	40010000 	.word	0x40010000
1000abd0:	40011000 	.word	0x40011000
1000abd4:	40013000 	.word	0x40013000

1000abd8 <gpio_pin_get_output_level>:
 */
bool gpio_pin_get_output_level(const uint8_t gpio_pin)
{
	uint32_t regval = 0;

	if (gpio_pin < 16) {
1000abd8:	280f      	cmp	r0, #15
1000abda:	d806      	bhi.n	1000abea <gpio_pin_get_output_level+0x12>
		regval = GPIO0->DATAOUT.reg;
1000abdc:	4b0f      	ldr	r3, [pc, #60]	; (1000ac1c <gpio_pin_get_output_level+0x44>)
1000abde:	8899      	ldrh	r1, [r3, #4]
		regval &= (1 << gpio_pin);
1000abe0:	2301      	movs	r3, #1
1000abe2:	4083      	lsls	r3, r0
1000abe4:	0018      	movs	r0, r3
1000abe6:	4008      	ands	r0, r1
1000abe8:	e014      	b.n	1000ac14 <gpio_pin_get_output_level+0x3c>
	} else if (gpio_pin < 32) {
1000abea:	281f      	cmp	r0, #31
1000abec:	d809      	bhi.n	1000ac02 <gpio_pin_get_output_level+0x2a>
		regval = GPIO1->DATAOUT.reg;
1000abee:	4b0c      	ldr	r3, [pc, #48]	; (1000ac20 <gpio_pin_get_output_level+0x48>)
1000abf0:	8899      	ldrh	r1, [r3, #4]
		regval &= (1 << (gpio_pin % 16));
1000abf2:	230f      	movs	r3, #15
1000abf4:	4003      	ands	r3, r0
1000abf6:	001a      	movs	r2, r3
1000abf8:	2301      	movs	r3, #1
1000abfa:	4093      	lsls	r3, r2
1000abfc:	0018      	movs	r0, r3
1000abfe:	4008      	ands	r0, r1
1000ac00:	e008      	b.n	1000ac14 <gpio_pin_get_output_level+0x3c>
	} else {
		regval = GPIO2->DATAOUT.reg;
1000ac02:	4b08      	ldr	r3, [pc, #32]	; (1000ac24 <gpio_pin_get_output_level+0x4c>)
1000ac04:	8899      	ldrh	r1, [r3, #4]
		regval &= (1 << (gpio_pin % 16));
1000ac06:	230f      	movs	r3, #15
1000ac08:	4003      	ands	r3, r0
1000ac0a:	001a      	movs	r2, r3
1000ac0c:	2301      	movs	r3, #1
1000ac0e:	4093      	lsls	r3, r2
1000ac10:	0018      	movs	r0, r3
1000ac12:	4008      	ands	r0, r1
	}

	return regval;
1000ac14:	1e43      	subs	r3, r0, #1
1000ac16:	4198      	sbcs	r0, r3
1000ac18:	b2c0      	uxtb	r0, r0
}
1000ac1a:	4770      	bx	lr
1000ac1c:	40010000 	.word	0x40010000
1000ac20:	40011000 	.word	0x40011000
1000ac24:	40013000 	.word	0x40013000

1000ac28 <gpio_pin_set_output_level>:
 *
 *  \param[in] gpio_pin  Index of the GPIO pin to write to.
 *  \param[in] level     Logical level to set the given pin to.
 */
void gpio_pin_set_output_level(const uint8_t gpio_pin, const bool level)
{
1000ac28:	b510      	push	{r4, lr}
	if (gpio_pin < 16) {
1000ac2a:	280f      	cmp	r0, #15
1000ac2c:	d810      	bhi.n	1000ac50 <gpio_pin_set_output_level+0x28>
		if(level) {
1000ac2e:	2900      	cmp	r1, #0
1000ac30:	d007      	beq.n	1000ac42 <gpio_pin_set_output_level+0x1a>
			GPIO0->DATAOUT.reg |= (1 << gpio_pin);
1000ac32:	4a1d      	ldr	r2, [pc, #116]	; (1000aca8 <gpio_pin_set_output_level+0x80>)
1000ac34:	8891      	ldrh	r1, [r2, #4]
1000ac36:	2301      	movs	r3, #1
1000ac38:	4083      	lsls	r3, r0
1000ac3a:	430b      	orrs	r3, r1
1000ac3c:	b29b      	uxth	r3, r3
1000ac3e:	8093      	strh	r3, [r2, #4]
1000ac40:	e031      	b.n	1000aca6 <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO0->DATAOUT.reg &= ~(1 << gpio_pin);
1000ac42:	4919      	ldr	r1, [pc, #100]	; (1000aca8 <gpio_pin_set_output_level+0x80>)
1000ac44:	888b      	ldrh	r3, [r1, #4]
1000ac46:	2201      	movs	r2, #1
1000ac48:	4082      	lsls	r2, r0
1000ac4a:	4393      	bics	r3, r2
1000ac4c:	808b      	strh	r3, [r1, #4]
1000ac4e:	e02a      	b.n	1000aca6 <gpio_pin_set_output_level+0x7e>
		}
	} else if (gpio_pin < 32) {
1000ac50:	281f      	cmp	r0, #31
1000ac52:	d814      	bhi.n	1000ac7e <gpio_pin_set_output_level+0x56>
		if(level) {
1000ac54:	2900      	cmp	r1, #0
1000ac56:	d009      	beq.n	1000ac6c <gpio_pin_set_output_level+0x44>
			GPIO1->DATAOUT.reg |= (1 << (gpio_pin % 16));
1000ac58:	4914      	ldr	r1, [pc, #80]	; (1000acac <gpio_pin_set_output_level+0x84>)
1000ac5a:	888c      	ldrh	r4, [r1, #4]
1000ac5c:	220f      	movs	r2, #15
1000ac5e:	4010      	ands	r0, r2
1000ac60:	2301      	movs	r3, #1
1000ac62:	4083      	lsls	r3, r0
1000ac64:	4323      	orrs	r3, r4
1000ac66:	b29b      	uxth	r3, r3
1000ac68:	808b      	strh	r3, [r1, #4]
1000ac6a:	e01c      	b.n	1000aca6 <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO1->DATAOUT.reg &= ~(1 << (gpio_pin % 16));
1000ac6c:	490f      	ldr	r1, [pc, #60]	; (1000acac <gpio_pin_set_output_level+0x84>)
1000ac6e:	888b      	ldrh	r3, [r1, #4]
1000ac70:	220f      	movs	r2, #15
1000ac72:	4010      	ands	r0, r2
1000ac74:	3a0e      	subs	r2, #14
1000ac76:	4082      	lsls	r2, r0
1000ac78:	4393      	bics	r3, r2
1000ac7a:	808b      	strh	r3, [r1, #4]
1000ac7c:	e013      	b.n	1000aca6 <gpio_pin_set_output_level+0x7e>
		}
	} else {
		if(level) {
1000ac7e:	2900      	cmp	r1, #0
1000ac80:	d009      	beq.n	1000ac96 <gpio_pin_set_output_level+0x6e>
			GPIO2->DATAOUT.reg |= (1 << (gpio_pin % 16));
1000ac82:	490b      	ldr	r1, [pc, #44]	; (1000acb0 <gpio_pin_set_output_level+0x88>)
1000ac84:	888c      	ldrh	r4, [r1, #4]
1000ac86:	220f      	movs	r2, #15
1000ac88:	4010      	ands	r0, r2
1000ac8a:	2301      	movs	r3, #1
1000ac8c:	4083      	lsls	r3, r0
1000ac8e:	4323      	orrs	r3, r4
1000ac90:	b29b      	uxth	r3, r3
1000ac92:	808b      	strh	r3, [r1, #4]
1000ac94:	e007      	b.n	1000aca6 <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO2->DATAOUT.reg &= ~(1 << (gpio_pin % 16));
1000ac96:	4906      	ldr	r1, [pc, #24]	; (1000acb0 <gpio_pin_set_output_level+0x88>)
1000ac98:	888b      	ldrh	r3, [r1, #4]
1000ac9a:	220f      	movs	r2, #15
1000ac9c:	4010      	ands	r0, r2
1000ac9e:	3a0e      	subs	r2, #14
1000aca0:	4082      	lsls	r2, r0
1000aca2:	4393      	bics	r3, r2
1000aca4:	808b      	strh	r3, [r1, #4]
		}
	}
}
1000aca6:	bd10      	pop	{r4, pc}
1000aca8:	40010000 	.word	0x40010000
1000acac:	40011000 	.word	0x40011000
1000acb0:	40013000 	.word	0x40013000

1000acb4 <gpio_pinmux_cofiguration>:
 *
 *  \param[in] gpio_pin   Index of the GPIO pin to toggle.
 *  \param[in] pinmux_sel PINMUX selection.
 */
void gpio_pinmux_cofiguration(const uint8_t gpio_pin, uint16_t pinmux_sel)
{
1000acb4:	b570      	push	{r4, r5, r6, lr}
	uint8_t megamux_sel = (pinmux_sel >> 8) & 0xFF;
1000acb6:	0a0d      	lsrs	r5, r1, #8

	pinmux_sel &= 0xFF;
1000acb8:	23ff      	movs	r3, #255	; 0xff
1000acba:	4019      	ands	r1, r3

	if (gpio_pin <= 7) {
1000acbc:	2807      	cmp	r0, #7
1000acbe:	d833      	bhi.n	1000ad28 <gpio_pinmux_cofiguration+0x74>
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000acc0:	4a4e      	ldr	r2, [pc, #312]	; (1000adfc <gpio_pinmux_cofiguration+0x148>)
1000acc2:	6c54      	ldr	r4, [r2, #68]	; 0x44
1000acc4:	3bf8      	subs	r3, #248	; 0xf8
1000acc6:	4003      	ands	r3, r0
1000acc8:	009b      	lsls	r3, r3, #2
1000acca:	2607      	movs	r6, #7
1000accc:	409e      	lsls	r6, r3
1000acce:	43b4      	bics	r4, r6
1000acd0:	6454      	str	r4, [r2, #68]	; 0x44
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000acd2:	6c54      	ldr	r4, [r2, #68]	; 0x44
1000acd4:	000e      	movs	r6, r1
1000acd6:	409e      	lsls	r6, r3
1000acd8:	0033      	movs	r3, r6
1000acda:	4323      	orrs	r3, r4
1000acdc:	6453      	str	r3, [r2, #68]	; 0x44
		if (pinmux_sel == 0x01) {
1000acde:	2901      	cmp	r1, #1
1000ace0:	d000      	beq.n	1000ace4 <gpio_pinmux_cofiguration+0x30>
1000ace2:	e08a      	b.n	1000adfa <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 3) {
1000ace4:	2803      	cmp	r0, #3
1000ace6:	d80f      	bhi.n	1000ad08 <gpio_pinmux_cofiguration+0x54>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000ace8:	0011      	movs	r1, r2
1000acea:	22d0      	movs	r2, #208	; 0xd0
1000acec:	0052      	lsls	r2, r2, #1
1000acee:	588c      	ldr	r4, [r1, r2]
1000acf0:	2303      	movs	r3, #3
1000acf2:	4018      	ands	r0, r3
1000acf4:	00c0      	lsls	r0, r0, #3
1000acf6:	333c      	adds	r3, #60	; 0x3c
1000acf8:	4083      	lsls	r3, r0
1000acfa:	439c      	bics	r4, r3
1000acfc:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000acfe:	588b      	ldr	r3, [r1, r2]
1000ad00:	4085      	lsls	r5, r0
1000ad02:	431d      	orrs	r5, r3
1000ad04:	508d      	str	r5, [r1, r2]
1000ad06:	e078      	b.n	1000adfa <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 7) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000ad08:	493c      	ldr	r1, [pc, #240]	; (1000adfc <gpio_pinmux_cofiguration+0x148>)
1000ad0a:	22d2      	movs	r2, #210	; 0xd2
1000ad0c:	0052      	lsls	r2, r2, #1
1000ad0e:	588c      	ldr	r4, [r1, r2]
1000ad10:	2303      	movs	r3, #3
1000ad12:	4018      	ands	r0, r3
1000ad14:	00c0      	lsls	r0, r0, #3
1000ad16:	333c      	adds	r3, #60	; 0x3c
1000ad18:	4083      	lsls	r3, r0
1000ad1a:	439c      	bics	r4, r3
1000ad1c:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000ad1e:	588b      	ldr	r3, [r1, r2]
1000ad20:	4085      	lsls	r5, r0
1000ad22:	431d      	orrs	r5, r3
1000ad24:	508d      	str	r5, [r1, r2]
1000ad26:	e068      	b.n	1000adfa <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 15) {
1000ad28:	280f      	cmp	r0, #15
1000ad2a:	d832      	bhi.n	1000ad92 <gpio_pinmux_cofiguration+0xde>
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000ad2c:	4a33      	ldr	r2, [pc, #204]	; (1000adfc <gpio_pinmux_cofiguration+0x148>)
1000ad2e:	6c94      	ldr	r4, [r2, #72]	; 0x48
1000ad30:	2307      	movs	r3, #7
1000ad32:	4003      	ands	r3, r0
1000ad34:	009b      	lsls	r3, r3, #2
1000ad36:	2607      	movs	r6, #7
1000ad38:	409e      	lsls	r6, r3
1000ad3a:	43b4      	bics	r4, r6
1000ad3c:	6494      	str	r4, [r2, #72]	; 0x48
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000ad3e:	6c94      	ldr	r4, [r2, #72]	; 0x48
1000ad40:	000e      	movs	r6, r1
1000ad42:	409e      	lsls	r6, r3
1000ad44:	0033      	movs	r3, r6
1000ad46:	4323      	orrs	r3, r4
1000ad48:	6493      	str	r3, [r2, #72]	; 0x48
		if (pinmux_sel == 0x01) {
1000ad4a:	2901      	cmp	r1, #1
1000ad4c:	d155      	bne.n	1000adfa <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 11) {
1000ad4e:	280b      	cmp	r0, #11
1000ad50:	d80f      	bhi.n	1000ad72 <gpio_pinmux_cofiguration+0xbe>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000ad52:	0011      	movs	r1, r2
1000ad54:	22d4      	movs	r2, #212	; 0xd4
1000ad56:	0052      	lsls	r2, r2, #1
1000ad58:	588c      	ldr	r4, [r1, r2]
1000ad5a:	2303      	movs	r3, #3
1000ad5c:	4018      	ands	r0, r3
1000ad5e:	00c0      	lsls	r0, r0, #3
1000ad60:	333c      	adds	r3, #60	; 0x3c
1000ad62:	4083      	lsls	r3, r0
1000ad64:	439c      	bics	r4, r3
1000ad66:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000ad68:	588b      	ldr	r3, [r1, r2]
1000ad6a:	4085      	lsls	r5, r0
1000ad6c:	431d      	orrs	r5, r3
1000ad6e:	508d      	str	r5, [r1, r2]
1000ad70:	e043      	b.n	1000adfa <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 15) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000ad72:	4922      	ldr	r1, [pc, #136]	; (1000adfc <gpio_pinmux_cofiguration+0x148>)
1000ad74:	22d6      	movs	r2, #214	; 0xd6
1000ad76:	0052      	lsls	r2, r2, #1
1000ad78:	588c      	ldr	r4, [r1, r2]
1000ad7a:	2303      	movs	r3, #3
1000ad7c:	4018      	ands	r0, r3
1000ad7e:	00c0      	lsls	r0, r0, #3
1000ad80:	333c      	adds	r3, #60	; 0x3c
1000ad82:	4083      	lsls	r3, r0
1000ad84:	439c      	bics	r4, r3
1000ad86:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000ad88:	588b      	ldr	r3, [r1, r2]
1000ad8a:	4085      	lsls	r5, r0
1000ad8c:	431d      	orrs	r5, r3
1000ad8e:	508d      	str	r5, [r1, r2]
1000ad90:	e033      	b.n	1000adfa <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 23) {
1000ad92:	2817      	cmp	r0, #23
1000ad94:	d831      	bhi.n	1000adfa <gpio_pinmux_cofiguration+0x146>
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000ad96:	4a19      	ldr	r2, [pc, #100]	; (1000adfc <gpio_pinmux_cofiguration+0x148>)
1000ad98:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
1000ad9a:	2307      	movs	r3, #7
1000ad9c:	4003      	ands	r3, r0
1000ad9e:	009b      	lsls	r3, r3, #2
1000ada0:	2607      	movs	r6, #7
1000ada2:	409e      	lsls	r6, r3
1000ada4:	43b4      	bics	r4, r6
1000ada6:	64d4      	str	r4, [r2, #76]	; 0x4c
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000ada8:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
1000adaa:	000e      	movs	r6, r1
1000adac:	409e      	lsls	r6, r3
1000adae:	0033      	movs	r3, r6
1000adb0:	4323      	orrs	r3, r4
1000adb2:	64d3      	str	r3, [r2, #76]	; 0x4c
		if (pinmux_sel == 0x01) {
1000adb4:	2901      	cmp	r1, #1
1000adb6:	d120      	bne.n	1000adfa <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 19) {
1000adb8:	2813      	cmp	r0, #19
1000adba:	d80f      	bhi.n	1000addc <gpio_pinmux_cofiguration+0x128>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000adbc:	0011      	movs	r1, r2
1000adbe:	22d8      	movs	r2, #216	; 0xd8
1000adc0:	0052      	lsls	r2, r2, #1
1000adc2:	588c      	ldr	r4, [r1, r2]
1000adc4:	2303      	movs	r3, #3
1000adc6:	4018      	ands	r0, r3
1000adc8:	00c0      	lsls	r0, r0, #3
1000adca:	333c      	adds	r3, #60	; 0x3c
1000adcc:	4083      	lsls	r3, r0
1000adce:	439c      	bics	r4, r3
1000add0:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000add2:	588b      	ldr	r3, [r1, r2]
1000add4:	4085      	lsls	r5, r0
1000add6:	431d      	orrs	r5, r3
1000add8:	508d      	str	r5, [r1, r2]
1000adda:	e00e      	b.n	1000adfa <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 23) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000addc:	4a07      	ldr	r2, [pc, #28]	; (1000adfc <gpio_pinmux_cofiguration+0x148>)
1000adde:	23da      	movs	r3, #218	; 0xda
1000ade0:	005b      	lsls	r3, r3, #1
1000ade2:	58d1      	ldr	r1, [r2, r3]
1000ade4:	2403      	movs	r4, #3
1000ade6:	4020      	ands	r0, r4
1000ade8:	00c0      	lsls	r0, r0, #3
1000adea:	343c      	adds	r4, #60	; 0x3c
1000adec:	4084      	lsls	r4, r0
1000adee:	43a1      	bics	r1, r4
1000adf0:	50d1      	str	r1, [r2, r3]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000adf2:	58d1      	ldr	r1, [r2, r3]
1000adf4:	4085      	lsls	r5, r0
1000adf6:	430d      	orrs	r5, r1
1000adf8:	50d5      	str	r5, [r2, r3]
			}
		}
	}
}
1000adfa:	bd70      	pop	{r4, r5, r6, pc}
1000adfc:	4000b000 	.word	0x4000b000

1000ae00 <gpio_register_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 *
 */
void gpio_register_callback(uint8_t gpio_pin, gpio_callback_t callback_func,
				enum gpio_callback callback_type)
{
1000ae00:	b5f0      	push	{r4, r5, r6, r7, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
		gpio_port = 0;
1000ae02:	2300      	movs	r3, #0
	Assert(callback_func);
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000ae04:	280f      	cmp	r0, #15
1000ae06:	d904      	bls.n	1000ae12 <gpio_register_callback+0x12>
		gpio_port = 0;
	} else if (gpio_pin < 32) {
		gpio_port = 1;
	} else {
		gpio_port = 2;
1000ae08:	241f      	movs	r4, #31
1000ae0a:	4284      	cmp	r4, r0
1000ae0c:	415b      	adcs	r3, r3
1000ae0e:	3c1d      	subs	r4, #29
1000ae10:	1ae3      	subs	r3, r4, r3
	}
	switch (callback_type) {
1000ae12:	2a01      	cmp	r2, #1
1000ae14:	d016      	beq.n	1000ae44 <gpio_register_callback+0x44>
1000ae16:	2a00      	cmp	r2, #0
1000ae18:	d004      	beq.n	1000ae24 <gpio_register_callback+0x24>
1000ae1a:	2a02      	cmp	r2, #2
1000ae1c:	d022      	beq.n	1000ae64 <gpio_register_callback+0x64>
1000ae1e:	2a03      	cmp	r2, #3
1000ae20:	d030      	beq.n	1000ae84 <gpio_register_callback+0x84>
1000ae22:	e03e      	b.n	1000aea2 <gpio_register_callback+0xa2>
	case GPIO_CALLBACK_LOW:
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
1000ae24:	4e29      	ldr	r6, [pc, #164]	; (1000aecc <gpio_register_callback+0xcc>)
1000ae26:	00dc      	lsls	r4, r3, #3
1000ae28:	18e2      	adds	r2, r4, r3
1000ae2a:	00d2      	lsls	r2, r2, #3
1000ae2c:	5997      	ldr	r7, [r2, r6]
1000ae2e:	250f      	movs	r5, #15
1000ae30:	4005      	ands	r5, r0
1000ae32:	2201      	movs	r2, #1
1000ae34:	40aa      	lsls	r2, r5
1000ae36:	b292      	uxth	r2, r2
1000ae38:	85ba      	strh	r2, [r7, #44]	; 0x2c
		_gpio_instances[gpio_port].hw->INTPOLCLR.reg = 1 << (gpio_pin % 16);
1000ae3a:	18e4      	adds	r4, r4, r3
1000ae3c:	00e4      	lsls	r4, r4, #3
1000ae3e:	59a4      	ldr	r4, [r4, r6]
1000ae40:	86a2      	strh	r2, [r4, #52]	; 0x34
		break;
1000ae42:	e02e      	b.n	1000aea2 <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_HIGH:
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
1000ae44:	4e21      	ldr	r6, [pc, #132]	; (1000aecc <gpio_register_callback+0xcc>)
1000ae46:	00dc      	lsls	r4, r3, #3
1000ae48:	18e2      	adds	r2, r4, r3
1000ae4a:	00d2      	lsls	r2, r2, #3
1000ae4c:	5997      	ldr	r7, [r2, r6]
1000ae4e:	250f      	movs	r5, #15
1000ae50:	4005      	ands	r5, r0
1000ae52:	2201      	movs	r2, #1
1000ae54:	40aa      	lsls	r2, r5
1000ae56:	b292      	uxth	r2, r2
1000ae58:	85ba      	strh	r2, [r7, #44]	; 0x2c
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
1000ae5a:	18e4      	adds	r4, r4, r3
1000ae5c:	00e4      	lsls	r4, r4, #3
1000ae5e:	59a4      	ldr	r4, [r4, r6]
1000ae60:	8622      	strh	r2, [r4, #48]	; 0x30
		break;
1000ae62:	e01e      	b.n	1000aea2 <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_RISING:
		_gpio_instances[gpio_port].hw->INTTYPESET.reg = 1 << (gpio_pin % 16);
1000ae64:	4e19      	ldr	r6, [pc, #100]	; (1000aecc <gpio_register_callback+0xcc>)
1000ae66:	00dc      	lsls	r4, r3, #3
1000ae68:	18e2      	adds	r2, r4, r3
1000ae6a:	00d2      	lsls	r2, r2, #3
1000ae6c:	5997      	ldr	r7, [r2, r6]
1000ae6e:	250f      	movs	r5, #15
1000ae70:	4005      	ands	r5, r0
1000ae72:	2201      	movs	r2, #1
1000ae74:	40aa      	lsls	r2, r5
1000ae76:	b292      	uxth	r2, r2
1000ae78:	853a      	strh	r2, [r7, #40]	; 0x28
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
1000ae7a:	18e4      	adds	r4, r4, r3
1000ae7c:	00e4      	lsls	r4, r4, #3
1000ae7e:	59a4      	ldr	r4, [r4, r6]
1000ae80:	8622      	strh	r2, [r4, #48]	; 0x30
		break;
1000ae82:	e00e      	b.n	1000aea2 <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_FALLING:
		_gpio_instances[gpio_port].hw->INTTYPESET.reg = 1 << (gpio_pin % 16);
1000ae84:	4e11      	ldr	r6, [pc, #68]	; (1000aecc <gpio_register_callback+0xcc>)
1000ae86:	00dc      	lsls	r4, r3, #3
1000ae88:	18e2      	adds	r2, r4, r3
1000ae8a:	00d2      	lsls	r2, r2, #3
1000ae8c:	5997      	ldr	r7, [r2, r6]
1000ae8e:	250f      	movs	r5, #15
1000ae90:	4005      	ands	r5, r0
1000ae92:	2201      	movs	r2, #1
1000ae94:	40aa      	lsls	r2, r5
1000ae96:	b292      	uxth	r2, r2
1000ae98:	853a      	strh	r2, [r7, #40]	; 0x28
		_gpio_instances[gpio_port].hw->INTPOLCLR.reg = (1 << (gpio_pin % 16));
1000ae9a:	18e4      	adds	r4, r4, r3
1000ae9c:	00e4      	lsls	r4, r4, #3
1000ae9e:	59a4      	ldr	r4, [r4, r6]
1000aea0:	86a2      	strh	r2, [r4, #52]	; 0x34

	case GPIO_CALLBACK_N:
		break;
	}
	/* Register callback function */
	_gpio_instances[gpio_port].callback[gpio_pin % 16] = callback_func;
1000aea2:	220f      	movs	r2, #15
1000aea4:	4010      	ands	r0, r2
1000aea6:	4c09      	ldr	r4, [pc, #36]	; (1000aecc <gpio_register_callback+0xcc>)
1000aea8:	00dd      	lsls	r5, r3, #3
1000aeaa:	18ea      	adds	r2, r5, r3
1000aeac:	0052      	lsls	r2, r2, #1
1000aeae:	1812      	adds	r2, r2, r0
1000aeb0:	0092      	lsls	r2, r2, #2
1000aeb2:	18a2      	adds	r2, r4, r2
1000aeb4:	6051      	str	r1, [r2, #4]
	/* Set the bit corresponding to the gpio pin */
	_gpio_instances[gpio_port].callback_reg_mask |= (1 << (gpio_pin % 16));
1000aeb6:	18ea      	adds	r2, r5, r3
1000aeb8:	00d2      	lsls	r2, r2, #3
1000aeba:	18a2      	adds	r2, r4, r2
1000aebc:	3244      	adds	r2, #68	; 0x44
1000aebe:	2101      	movs	r1, #1
1000aec0:	4081      	lsls	r1, r0
1000aec2:	8813      	ldrh	r3, [r2, #0]
1000aec4:	430b      	orrs	r3, r1
1000aec6:	8013      	strh	r3, [r2, #0]
}
1000aec8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000aeca:	46c0      	nop			; (mov r8, r8)
1000aecc:	1001a2a0 	.word	0x1001a2a0

1000aed0 <gpio_enable_callback>:
 * conditions for the callback type are met.
 *
 * \param[in]  gpio_pin   GPIO pin
 */
void gpio_enable_callback(uint8_t gpio_pin)
{
1000aed0:	b530      	push	{r4, r5, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000aed2:	280f      	cmp	r0, #15
1000aed4:	d805      	bhi.n	1000aee2 <gpio_enable_callback+0x12>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000aed6:	2280      	movs	r2, #128	; 0x80
1000aed8:	0412      	lsls	r2, r2, #16
1000aeda:	4b12      	ldr	r3, [pc, #72]	; (1000af24 <gpio_enable_callback+0x54>)
1000aedc:	601a      	str	r2, [r3, #0]
		gpio_port = 0;
1000aede:	2200      	movs	r2, #0
1000aee0:	e00c      	b.n	1000aefc <gpio_enable_callback+0x2c>
		NVIC_EnableIRQ(GPIO0_IRQn);
	} else if (gpio_pin < 32) {
1000aee2:	281f      	cmp	r0, #31
1000aee4:	d805      	bhi.n	1000aef2 <gpio_enable_callback+0x22>
1000aee6:	2280      	movs	r2, #128	; 0x80
1000aee8:	0452      	lsls	r2, r2, #17
1000aeea:	4b0e      	ldr	r3, [pc, #56]	; (1000af24 <gpio_enable_callback+0x54>)
1000aeec:	601a      	str	r2, [r3, #0]
		gpio_port = 1;
1000aeee:	2201      	movs	r2, #1
1000aef0:	e004      	b.n	1000aefc <gpio_enable_callback+0x2c>
1000aef2:	2280      	movs	r2, #128	; 0x80
1000aef4:	0492      	lsls	r2, r2, #18
1000aef6:	4b0b      	ldr	r3, [pc, #44]	; (1000af24 <gpio_enable_callback+0x54>)
1000aef8:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(GPIO1_IRQn);
	} else {
		gpio_port = 2;
1000aefa:	2202      	movs	r2, #2
		NVIC_EnableIRQ(GPIO2_IRQn);
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask |= (1 << (gpio_pin % 16));
1000aefc:	230f      	movs	r3, #15
1000aefe:	4018      	ands	r0, r3
1000af00:	2101      	movs	r1, #1
1000af02:	4081      	lsls	r1, r0
1000af04:	4c08      	ldr	r4, [pc, #32]	; (1000af28 <gpio_enable_callback+0x58>)
1000af06:	00d5      	lsls	r5, r2, #3
1000af08:	18ab      	adds	r3, r5, r2
1000af0a:	00db      	lsls	r3, r3, #3
1000af0c:	18e3      	adds	r3, r4, r3
1000af0e:	3346      	adds	r3, #70	; 0x46
1000af10:	8818      	ldrh	r0, [r3, #0]
1000af12:	4308      	orrs	r0, r1
1000af14:	8018      	strh	r0, [r3, #0]
	_gpio_instances[gpio_port].hw->INTENSET.reg = (1 << (gpio_pin % 16));
1000af16:	18aa      	adds	r2, r5, r2
1000af18:	00d2      	lsls	r2, r2, #3
1000af1a:	5913      	ldr	r3, [r2, r4]
1000af1c:	b289      	uxth	r1, r1
1000af1e:	8419      	strh	r1, [r3, #32]
}
1000af20:	bd30      	pop	{r4, r5, pc}
1000af22:	46c0      	nop			; (mov r8, r8)
1000af24:	e000e100 	.word	0xe000e100
1000af28:	1001a2a0 	.word	0x1001a2a0

1000af2c <gpio_disable_callback>:
 * The callback function will not be called from the interrupt handler.
 *
 * \param[in]  gpio_pin   GPIO pin
 */
void gpio_disable_callback(uint8_t gpio_pin)
{
1000af2c:	b530      	push	{r4, r5, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
		gpio_port = 0;
1000af2e:	2300      	movs	r3, #0
{
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000af30:	280f      	cmp	r0, #15
1000af32:	d904      	bls.n	1000af3e <gpio_disable_callback+0x12>
		gpio_port = 0;
	} else if (gpio_pin < 32) {
		gpio_port = 1;
	} else {
		gpio_port = 2;
1000af34:	221f      	movs	r2, #31
1000af36:	4282      	cmp	r2, r0
1000af38:	415b      	adcs	r3, r3
1000af3a:	3a1d      	subs	r2, #29
1000af3c:	1ad3      	subs	r3, r2, r3
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask &= ~(1 << (gpio_pin % 16));
1000af3e:	220f      	movs	r2, #15
1000af40:	4010      	ands	r0, r2
1000af42:	2101      	movs	r1, #1
1000af44:	4081      	lsls	r1, r0
1000af46:	4c07      	ldr	r4, [pc, #28]	; (1000af64 <gpio_disable_callback+0x38>)
1000af48:	00dd      	lsls	r5, r3, #3
1000af4a:	18ea      	adds	r2, r5, r3
1000af4c:	00d2      	lsls	r2, r2, #3
1000af4e:	18a2      	adds	r2, r4, r2
1000af50:	3246      	adds	r2, #70	; 0x46
1000af52:	8810      	ldrh	r0, [r2, #0]
1000af54:	4388      	bics	r0, r1
1000af56:	8010      	strh	r0, [r2, #0]
	_gpio_instances[gpio_port].hw->INTENCLR.reg = (1 << (gpio_pin % 16));
1000af58:	18eb      	adds	r3, r5, r3
1000af5a:	00db      	lsls	r3, r3, #3
1000af5c:	591b      	ldr	r3, [r3, r4]
1000af5e:	b289      	uxth	r1, r1
1000af60:	8499      	strh	r1, [r3, #36]	; 0x24
}
1000af62:	bd30      	pop	{r4, r5, pc}
1000af64:	1001a2a0 	.word	0x1001a2a0

1000af68 <gpio_init>:
 *
 * This function will init GPIO callback.
 *
 */
void gpio_init(void)
{
1000af68:	b510      	push	{r4, lr}
1000af6a:	4a11      	ldr	r2, [pc, #68]	; (1000afb0 <gpio_init+0x48>)
1000af6c:	0010      	movs	r0, r2
1000af6e:	30d8      	adds	r0, #216	; 0xd8
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
			_gpio_instances[i].callback[j] = NULL;
1000af70:	2100      	movs	r1, #0
1000af72:	e007      	b.n	1000af84 <gpio_init+0x1c>
1000af74:	c302      	stmia	r3!, {r1}
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
1000af76:	4293      	cmp	r3, r2
1000af78:	d1fc      	bne.n	1000af74 <gpio_init+0xc>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
1000af7a:	8051      	strh	r1, [r2, #2]
		_gpio_instances[i].callback_reg_mask = 0;
1000af7c:	8011      	strh	r1, [r2, #0]
1000af7e:	3248      	adds	r2, #72	; 0x48
 */
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
1000af80:	4282      	cmp	r2, r0
1000af82:	d002      	beq.n	1000af8a <gpio_init+0x22>
1000af84:	0013      	movs	r3, r2
1000af86:	3b40      	subs	r3, #64	; 0x40
1000af88:	e7f4      	b.n	1000af74 <gpio_init+0xc>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
		_gpio_instances[i].callback_reg_mask = 0;
	}
	_gpio_instances[0].hw = (void *)GPIO0;
1000af8a:	4b0a      	ldr	r3, [pc, #40]	; (1000afb4 <gpio_init+0x4c>)
1000af8c:	4a0a      	ldr	r2, [pc, #40]	; (1000afb8 <gpio_init+0x50>)
1000af8e:	601a      	str	r2, [r3, #0]
	_gpio_instances[1].hw = (void *)GPIO1;
1000af90:	4a0a      	ldr	r2, [pc, #40]	; (1000afbc <gpio_init+0x54>)
1000af92:	649a      	str	r2, [r3, #72]	; 0x48
	_gpio_instances[2].hw = (void *)GPIO2;
1000af94:	490a      	ldr	r1, [pc, #40]	; (1000afc0 <gpio_init+0x58>)
1000af96:	2290      	movs	r2, #144	; 0x90
1000af98:	5099      	str	r1, [r3, r2]
	system_register_isr(RAM_ISR_TABLE_PORT0_COMB_INDEX, (uint32_t)gpio_port0_isr_handler);
1000af9a:	490a      	ldr	r1, [pc, #40]	; (1000afc4 <gpio_init+0x5c>)
1000af9c:	2027      	movs	r0, #39	; 0x27
1000af9e:	4c0a      	ldr	r4, [pc, #40]	; (1000afc8 <gpio_init+0x60>)
1000afa0:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT1_COMB_INDEX, (uint32_t)gpio_port1_isr_handler);
1000afa2:	490a      	ldr	r1, [pc, #40]	; (1000afcc <gpio_init+0x64>)
1000afa4:	2028      	movs	r0, #40	; 0x28
1000afa6:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT2_COMB_INDEX, (uint32_t)gpio_port2_isr_handler);
1000afa8:	4909      	ldr	r1, [pc, #36]	; (1000afd0 <gpio_init+0x68>)
1000afaa:	2029      	movs	r0, #41	; 0x29
1000afac:	47a0      	blx	r4
}
1000afae:	bd10      	pop	{r4, pc}
1000afb0:	1001a2e4 	.word	0x1001a2e4
1000afb4:	1001a2a0 	.word	0x1001a2a0
1000afb8:	40010000 	.word	0x40010000
1000afbc:	40011000 	.word	0x40011000
1000afc0:	40013000 	.word	0x40013000
1000afc4:	1000a871 	.word	0x1000a871
1000afc8:	1000bb95 	.word	0x1000bb95
1000afcc:	1000a8d5 	.word	0x1000a8d5
1000afd0:	1000a945 	.word	0x1000a945

1000afd4 <system_clock_config>:
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_config(enum system_clock_resource resoure, \
				enum system_clock_freq freq)
{
	switch (resoure) {
1000afd4:	2801      	cmp	r0, #1
1000afd6:	d00d      	beq.n	1000aff4 <system_clock_config+0x20>
1000afd8:	2800      	cmp	r0, #0
1000afda:	d002      	beq.n	1000afe2 <system_clock_config+0xe>
1000afdc:	2802      	cmp	r0, #2
1000afde:	d01c      	beq.n	1000b01a <system_clock_config+0x46>
1000afe0:	e02e      	b.n	1000b040 <system_clock_config+0x6c>
		case CLOCK_RESOURCE_XO_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000afe2:	4a18      	ldr	r2, [pc, #96]	; (1000b044 <system_clock_config+0x70>)
1000afe4:	6990      	ldr	r0, [r2, #24]
1000afe6:	230c      	movs	r3, #12
1000afe8:	4303      	orrs	r3, r0
1000afea:	6193      	str	r3, [r2, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			system_clock_value = 26000000;
1000afec:	4a16      	ldr	r2, [pc, #88]	; (1000b048 <system_clock_config+0x74>)
1000afee:	4b17      	ldr	r3, [pc, #92]	; (1000b04c <system_clock_config+0x78>)
1000aff0:	601a      	str	r2, [r3, #0]
			break;
1000aff2:	e01a      	b.n	1000b02a <system_clock_config+0x56>

		case CLOCK_RESOURCE_LP_2_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000aff4:	4b13      	ldr	r3, [pc, #76]	; (1000b044 <system_clock_config+0x70>)
1000aff6:	6998      	ldr	r0, [r3, #24]
1000aff8:	2208      	movs	r2, #8
1000affa:	4302      	orrs	r2, r0
1000affc:	619a      	str	r2, [r3, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000affe:	699a      	ldr	r2, [r3, #24]
1000b000:	2004      	movs	r0, #4
1000b002:	4382      	bics	r2, r0
1000b004:	619a      	str	r2, [r3, #24]
					~LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK;
			AON_GP_REGS0->AON_PMU_CTRL.reg |= \
1000b006:	4a12      	ldr	r2, [pc, #72]	; (1000b050 <system_clock_config+0x7c>)
1000b008:	6853      	ldr	r3, [r2, #4]
1000b00a:	2080      	movs	r0, #128	; 0x80
1000b00c:	0300      	lsls	r0, r0, #12
1000b00e:	4303      	orrs	r3, r0
1000b010:	6053      	str	r3, [r2, #4]
					AON_GP_REGS_AON_PMU_CTRL_PMU_2MHZ_CLK_EN;
			system_clock_value = 2000000;
1000b012:	4a10      	ldr	r2, [pc, #64]	; (1000b054 <system_clock_config+0x80>)
1000b014:	4b0d      	ldr	r3, [pc, #52]	; (1000b04c <system_clock_config+0x78>)
1000b016:	601a      	str	r2, [r3, #0]
			break;
1000b018:	e007      	b.n	1000b02a <system_clock_config+0x56>

		case CLOCK_RESOURCE_RC_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000b01a:	4a0a      	ldr	r2, [pc, #40]	; (1000b044 <system_clock_config+0x70>)
1000b01c:	6993      	ldr	r3, [r2, #24]
1000b01e:	200c      	movs	r0, #12
1000b020:	4383      	bics	r3, r0
1000b022:	6193      	str	r3, [r2, #24]
					~(LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
1000b024:	4a08      	ldr	r2, [pc, #32]	; (1000b048 <system_clock_config+0x74>)
1000b026:	4b09      	ldr	r3, [pc, #36]	; (1000b04c <system_clock_config+0x78>)
1000b028:	601a      	str	r2, [r3, #0]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000b02a:	4b06      	ldr	r3, [pc, #24]	; (1000b044 <system_clock_config+0x70>)
1000b02c:	699a      	ldr	r2, [r3, #24]
1000b02e:	2003      	movs	r0, #3
1000b030:	4382      	bics	r2, r0
1000b032:	619a      	str	r2, [r3, #24]
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000b034:	699a      	ldr	r2, [r3, #24]
1000b036:	4001      	ands	r1, r0
1000b038:	4311      	orrs	r1, r2
1000b03a:	6199      	str	r1, [r3, #24]
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
1000b03c:	2000      	movs	r0, #0
1000b03e:	e000      	b.n	1000b042 <system_clock_config+0x6e>
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
			break;

		default:
			return STATUS_ERR_INVALID_ARG;
1000b040:	2017      	movs	r0, #23
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
}
1000b042:	4770      	bx	lr
1000b044:	4000b000 	.word	0x4000b000
1000b048:	018cba80 	.word	0x018cba80
1000b04c:	1001a378 	.word	0x1001a378
1000b050:	4000f000 	.word	0x4000f000
1000b054:	001e8480 	.word	0x001e8480

1000b058 <system_clock_get_value>:
 *
 * \return system clock value.
 */
uint32_t system_clock_get_value(void)
{
	return system_clock_value;
1000b058:	4b01      	ldr	r3, [pc, #4]	; (1000b060 <system_clock_get_value+0x8>)
1000b05a:	6818      	ldr	r0, [r3, #0]
}
1000b05c:	4770      	bx	lr
1000b05e:	46c0      	nop			; (mov r8, r8)
1000b060:	1001a378 	.word	0x1001a378

1000b064 <system_clock_peripheral_enable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_enable(enum system_peripheral peripheral)
{
1000b064:	b500      	push	{lr}
	switch (peripheral) {
1000b066:	2835      	cmp	r0, #53	; 0x35
1000b068:	d900      	bls.n	1000b06c <system_clock_peripheral_enable+0x8>
1000b06a:	e1a2      	b.n	1000b3b2 <system_clock_peripheral_enable+0x34e>
1000b06c:	0080      	lsls	r0, r0, #2
1000b06e:	4bd2      	ldr	r3, [pc, #840]	; (1000b3b8 <system_clock_peripheral_enable+0x354>)
1000b070:	581b      	ldr	r3, [r3, r0]
1000b072:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b074:	4ad1      	ldr	r2, [pc, #836]	; (1000b3bc <system_clock_peripheral_enable+0x358>)
1000b076:	68d1      	ldr	r1, [r2, #12]
1000b078:	2302      	movs	r3, #2
1000b07a:	430b      	orrs	r3, r1
1000b07c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b07e:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;
1000b080:	e198      	b.n	1000b3b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b082:	4ace      	ldr	r2, [pc, #824]	; (1000b3bc <system_clock_peripheral_enable+0x358>)
1000b084:	68d1      	ldr	r1, [r2, #12]
1000b086:	2304      	movs	r3, #4
1000b088:	430b      	orrs	r3, r1
1000b08a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b08c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;
1000b08e:	e191      	b.n	1000b3b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b090:	4aca      	ldr	r2, [pc, #808]	; (1000b3bc <system_clock_peripheral_enable+0x358>)
1000b092:	68d1      	ldr	r1, [r2, #12]
1000b094:	2308      	movs	r3, #8
1000b096:	430b      	orrs	r3, r1
1000b098:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b09a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;
1000b09c:	e18a      	b.n	1000b3b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b09e:	4ac7      	ldr	r2, [pc, #796]	; (1000b3bc <system_clock_peripheral_enable+0x358>)
1000b0a0:	68d1      	ldr	r1, [r2, #12]
1000b0a2:	2310      	movs	r3, #16
1000b0a4:	430b      	orrs	r3, r1
1000b0a6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b0a8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;
1000b0aa:	e183      	b.n	1000b3b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b0ac:	4ac3      	ldr	r2, [pc, #780]	; (1000b3bc <system_clock_peripheral_enable+0x358>)
1000b0ae:	68d1      	ldr	r1, [r2, #12]
1000b0b0:	2320      	movs	r3, #32
1000b0b2:	430b      	orrs	r3, r1
1000b0b4:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b0b6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;
1000b0b8:	e17c      	b.n	1000b3b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b0ba:	4ac0      	ldr	r2, [pc, #768]	; (1000b3bc <system_clock_peripheral_enable+0x358>)
1000b0bc:	68d1      	ldr	r1, [r2, #12]
1000b0be:	2380      	movs	r3, #128	; 0x80
1000b0c0:	430b      	orrs	r3, r1
1000b0c2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b0c4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
1000b0c6:	e175      	b.n	1000b3b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b0c8:	4abc      	ldr	r2, [pc, #752]	; (1000b3bc <system_clock_peripheral_enable+0x358>)
1000b0ca:	68d3      	ldr	r3, [r2, #12]
1000b0cc:	2180      	movs	r1, #128	; 0x80
1000b0ce:	0049      	lsls	r1, r1, #1
1000b0d0:	430b      	orrs	r3, r1
1000b0d2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b0d4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN;
		break;
1000b0d6:	e16d      	b.n	1000b3b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b0d8:	4ab8      	ldr	r2, [pc, #736]	; (1000b3bc <system_clock_peripheral_enable+0x358>)
1000b0da:	68d3      	ldr	r3, [r2, #12]
1000b0dc:	2180      	movs	r1, #128	; 0x80
1000b0de:	0109      	lsls	r1, r1, #4
1000b0e0:	430b      	orrs	r3, r1
1000b0e2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b0e4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN;
		break;
1000b0e6:	e165      	b.n	1000b3b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b0e8:	4ab4      	ldr	r2, [pc, #720]	; (1000b3bc <system_clock_peripheral_enable+0x358>)
1000b0ea:	68d3      	ldr	r3, [r2, #12]
1000b0ec:	2180      	movs	r1, #128	; 0x80
1000b0ee:	0149      	lsls	r1, r1, #5
1000b0f0:	430b      	orrs	r3, r1
1000b0f2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b0f4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN;
		break;
1000b0f6:	e15d      	b.n	1000b3b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b0f8:	4ab0      	ldr	r2, [pc, #704]	; (1000b3bc <system_clock_peripheral_enable+0x358>)
1000b0fa:	68d3      	ldr	r3, [r2, #12]
1000b0fc:	2180      	movs	r1, #128	; 0x80
1000b0fe:	0189      	lsls	r1, r1, #6
1000b100:	430b      	orrs	r3, r1
1000b102:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b104:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN;
		break;
1000b106:	e155      	b.n	1000b3b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b108:	4aac      	ldr	r2, [pc, #688]	; (1000b3bc <system_clock_peripheral_enable+0x358>)
1000b10a:	68d3      	ldr	r3, [r2, #12]
1000b10c:	2180      	movs	r1, #128	; 0x80
1000b10e:	01c9      	lsls	r1, r1, #7
1000b110:	430b      	orrs	r3, r1
1000b112:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b114:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN;
		break;
1000b116:	e14d      	b.n	1000b3b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b118:	4aa8      	ldr	r2, [pc, #672]	; (1000b3bc <system_clock_peripheral_enable+0x358>)
1000b11a:	68d3      	ldr	r3, [r2, #12]
1000b11c:	2180      	movs	r1, #128	; 0x80
1000b11e:	0209      	lsls	r1, r1, #8
1000b120:	430b      	orrs	r3, r1
1000b122:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b124:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN;
		break;
1000b126:	e145      	b.n	1000b3b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b128:	4aa4      	ldr	r2, [pc, #656]	; (1000b3bc <system_clock_peripheral_enable+0x358>)
1000b12a:	68d3      	ldr	r3, [r2, #12]
1000b12c:	2180      	movs	r1, #128	; 0x80
1000b12e:	0249      	lsls	r1, r1, #9
1000b130:	430b      	orrs	r3, r1
1000b132:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b134:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN;
		break;
1000b136:	e13d      	b.n	1000b3b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b138:	4aa0      	ldr	r2, [pc, #640]	; (1000b3bc <system_clock_peripheral_enable+0x358>)
1000b13a:	68d3      	ldr	r3, [r2, #12]
1000b13c:	2180      	movs	r1, #128	; 0x80
1000b13e:	0289      	lsls	r1, r1, #10
1000b140:	430b      	orrs	r3, r1
1000b142:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b144:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
1000b146:	e135      	b.n	1000b3b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b148:	4a9c      	ldr	r2, [pc, #624]	; (1000b3bc <system_clock_peripheral_enable+0x358>)
1000b14a:	68d3      	ldr	r3, [r2, #12]
1000b14c:	2180      	movs	r1, #128	; 0x80
1000b14e:	02c9      	lsls	r1, r1, #11
1000b150:	430b      	orrs	r3, r1
1000b152:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b154:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
1000b156:	e12d      	b.n	1000b3b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b158:	4a98      	ldr	r2, [pc, #608]	; (1000b3bc <system_clock_peripheral_enable+0x358>)
1000b15a:	68d3      	ldr	r3, [r2, #12]
1000b15c:	2180      	movs	r1, #128	; 0x80
1000b15e:	0309      	lsls	r1, r1, #12
1000b160:	430b      	orrs	r3, r1
1000b162:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b164:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
1000b166:	e125      	b.n	1000b3b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b168:	4a94      	ldr	r2, [pc, #592]	; (1000b3bc <system_clock_peripheral_enable+0x358>)
1000b16a:	68d3      	ldr	r3, [r2, #12]
1000b16c:	2180      	movs	r1, #128	; 0x80
1000b16e:	0349      	lsls	r1, r1, #13
1000b170:	430b      	orrs	r3, r1
1000b172:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b174:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
1000b176:	e11d      	b.n	1000b3b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b178:	4a90      	ldr	r2, [pc, #576]	; (1000b3bc <system_clock_peripheral_enable+0x358>)
1000b17a:	68d3      	ldr	r3, [r2, #12]
1000b17c:	2180      	movs	r1, #128	; 0x80
1000b17e:	0389      	lsls	r1, r1, #14
1000b180:	430b      	orrs	r3, r1
1000b182:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b184:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
1000b186:	e115      	b.n	1000b3b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b188:	4a8c      	ldr	r2, [pc, #560]	; (1000b3bc <system_clock_peripheral_enable+0x358>)
1000b18a:	68d3      	ldr	r3, [r2, #12]
1000b18c:	2180      	movs	r1, #128	; 0x80
1000b18e:	03c9      	lsls	r1, r1, #15
1000b190:	430b      	orrs	r3, r1
1000b192:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b194:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
1000b196:	e10d      	b.n	1000b3b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b198:	4a88      	ldr	r2, [pc, #544]	; (1000b3bc <system_clock_peripheral_enable+0x358>)
1000b19a:	68d3      	ldr	r3, [r2, #12]
1000b19c:	2180      	movs	r1, #128	; 0x80
1000b19e:	0409      	lsls	r1, r1, #16
1000b1a0:	430b      	orrs	r3, r1
1000b1a2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b1a4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
1000b1a6:	e105      	b.n	1000b3b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b1a8:	4a84      	ldr	r2, [pc, #528]	; (1000b3bc <system_clock_peripheral_enable+0x358>)
1000b1aa:	68d3      	ldr	r3, [r2, #12]
1000b1ac:	2180      	movs	r1, #128	; 0x80
1000b1ae:	0449      	lsls	r1, r1, #17
1000b1b0:	430b      	orrs	r3, r1
1000b1b2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b1b4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
1000b1b6:	e0fd      	b.n	1000b3b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b1b8:	4a80      	ldr	r2, [pc, #512]	; (1000b3bc <system_clock_peripheral_enable+0x358>)
1000b1ba:	68d3      	ldr	r3, [r2, #12]
1000b1bc:	2180      	movs	r1, #128	; 0x80
1000b1be:	0489      	lsls	r1, r1, #18
1000b1c0:	430b      	orrs	r3, r1
1000b1c2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b1c4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
1000b1c6:	e0f5      	b.n	1000b3b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b1c8:	4a7c      	ldr	r2, [pc, #496]	; (1000b3bc <system_clock_peripheral_enable+0x358>)
1000b1ca:	68d3      	ldr	r3, [r2, #12]
1000b1cc:	2180      	movs	r1, #128	; 0x80
1000b1ce:	04c9      	lsls	r1, r1, #19
1000b1d0:	430b      	orrs	r3, r1
1000b1d2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b1d4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN;
		break;
1000b1d6:	e0ed      	b.n	1000b3b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b1d8:	4a78      	ldr	r2, [pc, #480]	; (1000b3bc <system_clock_peripheral_enable+0x358>)
1000b1da:	68d3      	ldr	r3, [r2, #12]
1000b1dc:	2180      	movs	r1, #128	; 0x80
1000b1de:	0509      	lsls	r1, r1, #20
1000b1e0:	430b      	orrs	r3, r1
1000b1e2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b1e4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN;
		break;
1000b1e6:	e0e5      	b.n	1000b3b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b1e8:	4a74      	ldr	r2, [pc, #464]	; (1000b3bc <system_clock_peripheral_enable+0x358>)
1000b1ea:	68d3      	ldr	r3, [r2, #12]
1000b1ec:	2180      	movs	r1, #128	; 0x80
1000b1ee:	0549      	lsls	r1, r1, #21
1000b1f0:	430b      	orrs	r3, r1
1000b1f2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b1f4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN;
		break;
1000b1f6:	e0dd      	b.n	1000b3b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b1f8:	4a70      	ldr	r2, [pc, #448]	; (1000b3bc <system_clock_peripheral_enable+0x358>)
1000b1fa:	68d3      	ldr	r3, [r2, #12]
1000b1fc:	2180      	movs	r1, #128	; 0x80
1000b1fe:	0589      	lsls	r1, r1, #22
1000b200:	430b      	orrs	r3, r1
1000b202:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b204:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN;
		break;
1000b206:	e0d5      	b.n	1000b3b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b208:	4a6c      	ldr	r2, [pc, #432]	; (1000b3bc <system_clock_peripheral_enable+0x358>)
1000b20a:	68d3      	ldr	r3, [r2, #12]
1000b20c:	2180      	movs	r1, #128	; 0x80
1000b20e:	05c9      	lsls	r1, r1, #23
1000b210:	430b      	orrs	r3, r1
1000b212:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b214:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
1000b216:	e0cd      	b.n	1000b3b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b218:	4a68      	ldr	r2, [pc, #416]	; (1000b3bc <system_clock_peripheral_enable+0x358>)
1000b21a:	6911      	ldr	r1, [r2, #16]
1000b21c:	2301      	movs	r3, #1
1000b21e:	430b      	orrs	r3, r1
1000b220:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b222:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;
1000b224:	e0c6      	b.n	1000b3b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b226:	4a65      	ldr	r2, [pc, #404]	; (1000b3bc <system_clock_peripheral_enable+0x358>)
1000b228:	6911      	ldr	r1, [r2, #16]
1000b22a:	2302      	movs	r3, #2
1000b22c:	430b      	orrs	r3, r1
1000b22e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b230:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;
1000b232:	e0bf      	b.n	1000b3b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b234:	4a61      	ldr	r2, [pc, #388]	; (1000b3bc <system_clock_peripheral_enable+0x358>)
1000b236:	6911      	ldr	r1, [r2, #16]
1000b238:	2304      	movs	r3, #4
1000b23a:	430b      	orrs	r3, r1
1000b23c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b23e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;
1000b240:	e0b8      	b.n	1000b3b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b242:	4a5e      	ldr	r2, [pc, #376]	; (1000b3bc <system_clock_peripheral_enable+0x358>)
1000b244:	6911      	ldr	r1, [r2, #16]
1000b246:	2308      	movs	r3, #8
1000b248:	430b      	orrs	r3, r1
1000b24a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b24c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;
1000b24e:	e0b1      	b.n	1000b3b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b250:	4a5a      	ldr	r2, [pc, #360]	; (1000b3bc <system_clock_peripheral_enable+0x358>)
1000b252:	6911      	ldr	r1, [r2, #16]
1000b254:	2310      	movs	r3, #16
1000b256:	430b      	orrs	r3, r1
1000b258:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b25a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;
1000b25c:	e0aa      	b.n	1000b3b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b25e:	4a57      	ldr	r2, [pc, #348]	; (1000b3bc <system_clock_peripheral_enable+0x358>)
1000b260:	6911      	ldr	r1, [r2, #16]
1000b262:	2320      	movs	r3, #32
1000b264:	430b      	orrs	r3, r1
1000b266:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b268:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;
1000b26a:	e0a3      	b.n	1000b3b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b26c:	4a53      	ldr	r2, [pc, #332]	; (1000b3bc <system_clock_peripheral_enable+0x358>)
1000b26e:	6911      	ldr	r1, [r2, #16]
1000b270:	2340      	movs	r3, #64	; 0x40
1000b272:	430b      	orrs	r3, r1
1000b274:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b276:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;
1000b278:	e09c      	b.n	1000b3b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b27a:	4a50      	ldr	r2, [pc, #320]	; (1000b3bc <system_clock_peripheral_enable+0x358>)
1000b27c:	6911      	ldr	r1, [r2, #16]
1000b27e:	2380      	movs	r3, #128	; 0x80
1000b280:	430b      	orrs	r3, r1
1000b282:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b284:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN;
		break;
1000b286:	e095      	b.n	1000b3b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b288:	4a4c      	ldr	r2, [pc, #304]	; (1000b3bc <system_clock_peripheral_enable+0x358>)
1000b28a:	6913      	ldr	r3, [r2, #16]
1000b28c:	2180      	movs	r1, #128	; 0x80
1000b28e:	0049      	lsls	r1, r1, #1
1000b290:	430b      	orrs	r3, r1
1000b292:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b294:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN;
		break;
1000b296:	e08d      	b.n	1000b3b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b298:	4a48      	ldr	r2, [pc, #288]	; (1000b3bc <system_clock_peripheral_enable+0x358>)
1000b29a:	6913      	ldr	r3, [r2, #16]
1000b29c:	2180      	movs	r1, #128	; 0x80
1000b29e:	0089      	lsls	r1, r1, #2
1000b2a0:	430b      	orrs	r3, r1
1000b2a2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b2a4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN;
		break;
1000b2a6:	e085      	b.n	1000b3b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b2a8:	4a44      	ldr	r2, [pc, #272]	; (1000b3bc <system_clock_peripheral_enable+0x358>)
1000b2aa:	6913      	ldr	r3, [r2, #16]
1000b2ac:	2180      	movs	r1, #128	; 0x80
1000b2ae:	00c9      	lsls	r1, r1, #3
1000b2b0:	430b      	orrs	r3, r1
1000b2b2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b2b4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
1000b2b6:	e07d      	b.n	1000b3b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b2b8:	4a40      	ldr	r2, [pc, #256]	; (1000b3bc <system_clock_peripheral_enable+0x358>)
1000b2ba:	6913      	ldr	r3, [r2, #16]
1000b2bc:	2180      	movs	r1, #128	; 0x80
1000b2be:	0109      	lsls	r1, r1, #4
1000b2c0:	430b      	orrs	r3, r1
1000b2c2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b2c4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
1000b2c6:	e075      	b.n	1000b3b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b2c8:	4a3c      	ldr	r2, [pc, #240]	; (1000b3bc <system_clock_peripheral_enable+0x358>)
1000b2ca:	6913      	ldr	r3, [r2, #16]
1000b2cc:	2180      	movs	r1, #128	; 0x80
1000b2ce:	0149      	lsls	r1, r1, #5
1000b2d0:	430b      	orrs	r3, r1
1000b2d2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b2d4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
1000b2d6:	e06d      	b.n	1000b3b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b2d8:	4a38      	ldr	r2, [pc, #224]	; (1000b3bc <system_clock_peripheral_enable+0x358>)
1000b2da:	6913      	ldr	r3, [r2, #16]
1000b2dc:	2180      	movs	r1, #128	; 0x80
1000b2de:	0189      	lsls	r1, r1, #6
1000b2e0:	430b      	orrs	r3, r1
1000b2e2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b2e4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
1000b2e6:	e065      	b.n	1000b3b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b2e8:	4a34      	ldr	r2, [pc, #208]	; (1000b3bc <system_clock_peripheral_enable+0x358>)
1000b2ea:	6913      	ldr	r3, [r2, #16]
1000b2ec:	2180      	movs	r1, #128	; 0x80
1000b2ee:	01c9      	lsls	r1, r1, #7
1000b2f0:	430b      	orrs	r3, r1
1000b2f2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b2f4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN;
		break;
1000b2f6:	e05d      	b.n	1000b3b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b2f8:	4a30      	ldr	r2, [pc, #192]	; (1000b3bc <system_clock_peripheral_enable+0x358>)
1000b2fa:	6913      	ldr	r3, [r2, #16]
1000b2fc:	2180      	movs	r1, #128	; 0x80
1000b2fe:	0209      	lsls	r1, r1, #8
1000b300:	430b      	orrs	r3, r1
1000b302:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b304:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
1000b306:	e055      	b.n	1000b3b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b308:	4a2c      	ldr	r2, [pc, #176]	; (1000b3bc <system_clock_peripheral_enable+0x358>)
1000b30a:	6913      	ldr	r3, [r2, #16]
1000b30c:	2180      	movs	r1, #128	; 0x80
1000b30e:	0249      	lsls	r1, r1, #9
1000b310:	430b      	orrs	r3, r1
1000b312:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b314:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
1000b316:	e04d      	b.n	1000b3b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b318:	4a28      	ldr	r2, [pc, #160]	; (1000b3bc <system_clock_peripheral_enable+0x358>)
1000b31a:	6913      	ldr	r3, [r2, #16]
1000b31c:	2180      	movs	r1, #128	; 0x80
1000b31e:	0289      	lsls	r1, r1, #10
1000b320:	430b      	orrs	r3, r1
1000b322:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b324:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
1000b326:	e045      	b.n	1000b3b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b328:	4a24      	ldr	r2, [pc, #144]	; (1000b3bc <system_clock_peripheral_enable+0x358>)
1000b32a:	6913      	ldr	r3, [r2, #16]
1000b32c:	2180      	movs	r1, #128	; 0x80
1000b32e:	02c9      	lsls	r1, r1, #11
1000b330:	430b      	orrs	r3, r1
1000b332:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b334:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
1000b336:	e03d      	b.n	1000b3b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b338:	4a20      	ldr	r2, [pc, #128]	; (1000b3bc <system_clock_peripheral_enable+0x358>)
1000b33a:	6913      	ldr	r3, [r2, #16]
1000b33c:	2180      	movs	r1, #128	; 0x80
1000b33e:	0309      	lsls	r1, r1, #12
1000b340:	430b      	orrs	r3, r1
1000b342:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b344:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
1000b346:	e035      	b.n	1000b3b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b348:	4a1c      	ldr	r2, [pc, #112]	; (1000b3bc <system_clock_peripheral_enable+0x358>)
1000b34a:	6913      	ldr	r3, [r2, #16]
1000b34c:	2180      	movs	r1, #128	; 0x80
1000b34e:	0349      	lsls	r1, r1, #13
1000b350:	430b      	orrs	r3, r1
1000b352:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b354:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
1000b356:	e02d      	b.n	1000b3b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b358:	4a18      	ldr	r2, [pc, #96]	; (1000b3bc <system_clock_peripheral_enable+0x358>)
1000b35a:	6913      	ldr	r3, [r2, #16]
1000b35c:	2180      	movs	r1, #128	; 0x80
1000b35e:	0389      	lsls	r1, r1, #14
1000b360:	430b      	orrs	r3, r1
1000b362:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b364:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
1000b366:	e025      	b.n	1000b3b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b368:	4a14      	ldr	r2, [pc, #80]	; (1000b3bc <system_clock_peripheral_enable+0x358>)
1000b36a:	6913      	ldr	r3, [r2, #16]
1000b36c:	2180      	movs	r1, #128	; 0x80
1000b36e:	03c9      	lsls	r1, r1, #15
1000b370:	430b      	orrs	r3, r1
1000b372:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b374:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
1000b376:	e01d      	b.n	1000b3b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b378:	4a10      	ldr	r2, [pc, #64]	; (1000b3bc <system_clock_peripheral_enable+0x358>)
1000b37a:	6913      	ldr	r3, [r2, #16]
1000b37c:	2180      	movs	r1, #128	; 0x80
1000b37e:	0409      	lsls	r1, r1, #16
1000b380:	430b      	orrs	r3, r1
1000b382:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b384:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
1000b386:	e015      	b.n	1000b3b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000b388:	4a0c      	ldr	r2, [pc, #48]	; (1000b3bc <system_clock_peripheral_enable+0x358>)
1000b38a:	7d11      	ldrb	r1, [r2, #20]
1000b38c:	2301      	movs	r3, #1
1000b38e:	430b      	orrs	r3, r1
1000b390:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b392:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;
1000b394:	e00e      	b.n	1000b3b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000b396:	4a09      	ldr	r2, [pc, #36]	; (1000b3bc <system_clock_peripheral_enable+0x358>)
1000b398:	7d11      	ldrb	r1, [r2, #20]
1000b39a:	2302      	movs	r3, #2
1000b39c:	430b      	orrs	r3, r1
1000b39e:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b3a0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;
1000b3a2:	e007      	b.n	1000b3b4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000b3a4:	4a05      	ldr	r2, [pc, #20]	; (1000b3bc <system_clock_peripheral_enable+0x358>)
1000b3a6:	7d11      	ldrb	r1, [r2, #20]
1000b3a8:	2304      	movs	r3, #4
1000b3aa:	430b      	orrs	r3, r1
1000b3ac:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b3ae:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_PERIPH_REGS_CLK_EN;
		break;
1000b3b0:	e000      	b.n	1000b3b4 <system_clock_peripheral_enable+0x350>

		default:
			return STATUS_ERR_INVALID_ARG;
1000b3b2:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000b3b4:	bd00      	pop	{pc}
1000b3b6:	46c0      	nop			; (mov r8, r8)
1000b3b8:	100173b8 	.word	0x100173b8
1000b3bc:	4000b000 	.word	0x4000b000

1000b3c0 <system_clock_peripheral_disable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_disable(enum system_peripheral peripheral)
{
1000b3c0:	b500      	push	{lr}
	switch (peripheral) {
1000b3c2:	2835      	cmp	r0, #53	; 0x35
1000b3c4:	d900      	bls.n	1000b3c8 <system_clock_peripheral_disable+0x8>
1000b3c6:	e17d      	b.n	1000b6c4 <system_clock_peripheral_disable+0x304>
1000b3c8:	0080      	lsls	r0, r0, #2
1000b3ca:	4bbf      	ldr	r3, [pc, #764]	; (1000b6c8 <system_clock_peripheral_disable+0x308>)
1000b3cc:	581b      	ldr	r3, [r3, r0]
1000b3ce:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b3d0:	4abe      	ldr	r2, [pc, #760]	; (1000b6cc <system_clock_peripheral_disable+0x30c>)
1000b3d2:	68d3      	ldr	r3, [r2, #12]
1000b3d4:	2102      	movs	r1, #2
1000b3d6:	438b      	bics	r3, r1
1000b3d8:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b3da:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;
1000b3dc:	e173      	b.n	1000b6c6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b3de:	4abb      	ldr	r2, [pc, #748]	; (1000b6cc <system_clock_peripheral_disable+0x30c>)
1000b3e0:	68d3      	ldr	r3, [r2, #12]
1000b3e2:	2104      	movs	r1, #4
1000b3e4:	438b      	bics	r3, r1
1000b3e6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b3e8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;
1000b3ea:	e16c      	b.n	1000b6c6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b3ec:	4ab7      	ldr	r2, [pc, #732]	; (1000b6cc <system_clock_peripheral_disable+0x30c>)
1000b3ee:	68d3      	ldr	r3, [r2, #12]
1000b3f0:	2108      	movs	r1, #8
1000b3f2:	438b      	bics	r3, r1
1000b3f4:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b3f6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;
1000b3f8:	e165      	b.n	1000b6c6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b3fa:	4ab4      	ldr	r2, [pc, #720]	; (1000b6cc <system_clock_peripheral_disable+0x30c>)
1000b3fc:	68d3      	ldr	r3, [r2, #12]
1000b3fe:	2110      	movs	r1, #16
1000b400:	438b      	bics	r3, r1
1000b402:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b404:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;
1000b406:	e15e      	b.n	1000b6c6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b408:	4ab0      	ldr	r2, [pc, #704]	; (1000b6cc <system_clock_peripheral_disable+0x30c>)
1000b40a:	68d3      	ldr	r3, [r2, #12]
1000b40c:	2120      	movs	r1, #32
1000b40e:	438b      	bics	r3, r1
1000b410:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b412:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;
1000b414:	e157      	b.n	1000b6c6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b416:	4aad      	ldr	r2, [pc, #692]	; (1000b6cc <system_clock_peripheral_disable+0x30c>)
1000b418:	68d3      	ldr	r3, [r2, #12]
1000b41a:	2180      	movs	r1, #128	; 0x80
1000b41c:	438b      	bics	r3, r1
1000b41e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b420:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
1000b422:	e150      	b.n	1000b6c6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b424:	4aa9      	ldr	r2, [pc, #676]	; (1000b6cc <system_clock_peripheral_disable+0x30c>)
1000b426:	68d1      	ldr	r1, [r2, #12]
1000b428:	4ba9      	ldr	r3, [pc, #676]	; (1000b6d0 <system_clock_peripheral_disable+0x310>)
1000b42a:	400b      	ands	r3, r1
1000b42c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b42e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN;
		break;
1000b430:	e149      	b.n	1000b6c6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b432:	4aa6      	ldr	r2, [pc, #664]	; (1000b6cc <system_clock_peripheral_disable+0x30c>)
1000b434:	68d1      	ldr	r1, [r2, #12]
1000b436:	4ba7      	ldr	r3, [pc, #668]	; (1000b6d4 <system_clock_peripheral_disable+0x314>)
1000b438:	400b      	ands	r3, r1
1000b43a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b43c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN;
		break;
1000b43e:	e142      	b.n	1000b6c6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b440:	4aa2      	ldr	r2, [pc, #648]	; (1000b6cc <system_clock_peripheral_disable+0x30c>)
1000b442:	68d1      	ldr	r1, [r2, #12]
1000b444:	4ba4      	ldr	r3, [pc, #656]	; (1000b6d8 <system_clock_peripheral_disable+0x318>)
1000b446:	400b      	ands	r3, r1
1000b448:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b44a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN;
		break;
1000b44c:	e13b      	b.n	1000b6c6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b44e:	4a9f      	ldr	r2, [pc, #636]	; (1000b6cc <system_clock_peripheral_disable+0x30c>)
1000b450:	68d1      	ldr	r1, [r2, #12]
1000b452:	4ba2      	ldr	r3, [pc, #648]	; (1000b6dc <system_clock_peripheral_disable+0x31c>)
1000b454:	400b      	ands	r3, r1
1000b456:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b458:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN;
		break;
1000b45a:	e134      	b.n	1000b6c6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b45c:	4a9b      	ldr	r2, [pc, #620]	; (1000b6cc <system_clock_peripheral_disable+0x30c>)
1000b45e:	68d1      	ldr	r1, [r2, #12]
1000b460:	4b9f      	ldr	r3, [pc, #636]	; (1000b6e0 <system_clock_peripheral_disable+0x320>)
1000b462:	400b      	ands	r3, r1
1000b464:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b466:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN;
		break;
1000b468:	e12d      	b.n	1000b6c6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b46a:	4a98      	ldr	r2, [pc, #608]	; (1000b6cc <system_clock_peripheral_disable+0x30c>)
1000b46c:	68d1      	ldr	r1, [r2, #12]
1000b46e:	4b9d      	ldr	r3, [pc, #628]	; (1000b6e4 <system_clock_peripheral_disable+0x324>)
1000b470:	400b      	ands	r3, r1
1000b472:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b474:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN;
		break;
1000b476:	e126      	b.n	1000b6c6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b478:	4a94      	ldr	r2, [pc, #592]	; (1000b6cc <system_clock_peripheral_disable+0x30c>)
1000b47a:	68d1      	ldr	r1, [r2, #12]
1000b47c:	4b9a      	ldr	r3, [pc, #616]	; (1000b6e8 <system_clock_peripheral_disable+0x328>)
1000b47e:	400b      	ands	r3, r1
1000b480:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b482:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN;
		break;
1000b484:	e11f      	b.n	1000b6c6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b486:	4a91      	ldr	r2, [pc, #580]	; (1000b6cc <system_clock_peripheral_disable+0x30c>)
1000b488:	68d1      	ldr	r1, [r2, #12]
1000b48a:	4b98      	ldr	r3, [pc, #608]	; (1000b6ec <system_clock_peripheral_disable+0x32c>)
1000b48c:	400b      	ands	r3, r1
1000b48e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b490:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
1000b492:	e118      	b.n	1000b6c6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b494:	4a8d      	ldr	r2, [pc, #564]	; (1000b6cc <system_clock_peripheral_disable+0x30c>)
1000b496:	68d1      	ldr	r1, [r2, #12]
1000b498:	4b95      	ldr	r3, [pc, #596]	; (1000b6f0 <system_clock_peripheral_disable+0x330>)
1000b49a:	400b      	ands	r3, r1
1000b49c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b49e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
1000b4a0:	e111      	b.n	1000b6c6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b4a2:	4a8a      	ldr	r2, [pc, #552]	; (1000b6cc <system_clock_peripheral_disable+0x30c>)
1000b4a4:	68d1      	ldr	r1, [r2, #12]
1000b4a6:	4b93      	ldr	r3, [pc, #588]	; (1000b6f4 <system_clock_peripheral_disable+0x334>)
1000b4a8:	400b      	ands	r3, r1
1000b4aa:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b4ac:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
1000b4ae:	e10a      	b.n	1000b6c6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b4b0:	4a86      	ldr	r2, [pc, #536]	; (1000b6cc <system_clock_peripheral_disable+0x30c>)
1000b4b2:	68d1      	ldr	r1, [r2, #12]
1000b4b4:	4b90      	ldr	r3, [pc, #576]	; (1000b6f8 <system_clock_peripheral_disable+0x338>)
1000b4b6:	400b      	ands	r3, r1
1000b4b8:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b4ba:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
1000b4bc:	e103      	b.n	1000b6c6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b4be:	4a83      	ldr	r2, [pc, #524]	; (1000b6cc <system_clock_peripheral_disable+0x30c>)
1000b4c0:	68d1      	ldr	r1, [r2, #12]
1000b4c2:	4b8e      	ldr	r3, [pc, #568]	; (1000b6fc <system_clock_peripheral_disable+0x33c>)
1000b4c4:	400b      	ands	r3, r1
1000b4c6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b4c8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
1000b4ca:	e0fc      	b.n	1000b6c6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b4cc:	4a7f      	ldr	r2, [pc, #508]	; (1000b6cc <system_clock_peripheral_disable+0x30c>)
1000b4ce:	68d1      	ldr	r1, [r2, #12]
1000b4d0:	4b8b      	ldr	r3, [pc, #556]	; (1000b700 <system_clock_peripheral_disable+0x340>)
1000b4d2:	400b      	ands	r3, r1
1000b4d4:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b4d6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
1000b4d8:	e0f5      	b.n	1000b6c6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b4da:	4a7c      	ldr	r2, [pc, #496]	; (1000b6cc <system_clock_peripheral_disable+0x30c>)
1000b4dc:	68d1      	ldr	r1, [r2, #12]
1000b4de:	4b89      	ldr	r3, [pc, #548]	; (1000b704 <system_clock_peripheral_disable+0x344>)
1000b4e0:	400b      	ands	r3, r1
1000b4e2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b4e4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
1000b4e6:	e0ee      	b.n	1000b6c6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b4e8:	4a78      	ldr	r2, [pc, #480]	; (1000b6cc <system_clock_peripheral_disable+0x30c>)
1000b4ea:	68d1      	ldr	r1, [r2, #12]
1000b4ec:	4b86      	ldr	r3, [pc, #536]	; (1000b708 <system_clock_peripheral_disable+0x348>)
1000b4ee:	400b      	ands	r3, r1
1000b4f0:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b4f2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
1000b4f4:	e0e7      	b.n	1000b6c6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b4f6:	4a75      	ldr	r2, [pc, #468]	; (1000b6cc <system_clock_peripheral_disable+0x30c>)
1000b4f8:	68d1      	ldr	r1, [r2, #12]
1000b4fa:	4b84      	ldr	r3, [pc, #528]	; (1000b70c <system_clock_peripheral_disable+0x34c>)
1000b4fc:	400b      	ands	r3, r1
1000b4fe:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b500:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
1000b502:	e0e0      	b.n	1000b6c6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b504:	4a71      	ldr	r2, [pc, #452]	; (1000b6cc <system_clock_peripheral_disable+0x30c>)
1000b506:	68d1      	ldr	r1, [r2, #12]
1000b508:	4b81      	ldr	r3, [pc, #516]	; (1000b710 <system_clock_peripheral_disable+0x350>)
1000b50a:	400b      	ands	r3, r1
1000b50c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b50e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN;
		break;
1000b510:	e0d9      	b.n	1000b6c6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b512:	4a6e      	ldr	r2, [pc, #440]	; (1000b6cc <system_clock_peripheral_disable+0x30c>)
1000b514:	68d1      	ldr	r1, [r2, #12]
1000b516:	4b7f      	ldr	r3, [pc, #508]	; (1000b714 <system_clock_peripheral_disable+0x354>)
1000b518:	400b      	ands	r3, r1
1000b51a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b51c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN;
		break;
1000b51e:	e0d2      	b.n	1000b6c6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b520:	4a6a      	ldr	r2, [pc, #424]	; (1000b6cc <system_clock_peripheral_disable+0x30c>)
1000b522:	68d1      	ldr	r1, [r2, #12]
1000b524:	4b7c      	ldr	r3, [pc, #496]	; (1000b718 <system_clock_peripheral_disable+0x358>)
1000b526:	400b      	ands	r3, r1
1000b528:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b52a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN;
		break;
1000b52c:	e0cb      	b.n	1000b6c6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b52e:	4a67      	ldr	r2, [pc, #412]	; (1000b6cc <system_clock_peripheral_disable+0x30c>)
1000b530:	68d1      	ldr	r1, [r2, #12]
1000b532:	4b7a      	ldr	r3, [pc, #488]	; (1000b71c <system_clock_peripheral_disable+0x35c>)
1000b534:	400b      	ands	r3, r1
1000b536:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b538:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN;
		break;
1000b53a:	e0c4      	b.n	1000b6c6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b53c:	4a63      	ldr	r2, [pc, #396]	; (1000b6cc <system_clock_peripheral_disable+0x30c>)
1000b53e:	68d1      	ldr	r1, [r2, #12]
1000b540:	4b77      	ldr	r3, [pc, #476]	; (1000b720 <system_clock_peripheral_disable+0x360>)
1000b542:	400b      	ands	r3, r1
1000b544:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b546:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
1000b548:	e0bd      	b.n	1000b6c6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b54a:	4a60      	ldr	r2, [pc, #384]	; (1000b6cc <system_clock_peripheral_disable+0x30c>)
1000b54c:	6913      	ldr	r3, [r2, #16]
1000b54e:	2101      	movs	r1, #1
1000b550:	438b      	bics	r3, r1
1000b552:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b554:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;
1000b556:	e0b6      	b.n	1000b6c6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b558:	4a5c      	ldr	r2, [pc, #368]	; (1000b6cc <system_clock_peripheral_disable+0x30c>)
1000b55a:	6913      	ldr	r3, [r2, #16]
1000b55c:	2102      	movs	r1, #2
1000b55e:	438b      	bics	r3, r1
1000b560:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b562:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;
1000b564:	e0af      	b.n	1000b6c6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b566:	4a59      	ldr	r2, [pc, #356]	; (1000b6cc <system_clock_peripheral_disable+0x30c>)
1000b568:	6913      	ldr	r3, [r2, #16]
1000b56a:	2104      	movs	r1, #4
1000b56c:	438b      	bics	r3, r1
1000b56e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b570:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;
1000b572:	e0a8      	b.n	1000b6c6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b574:	4a55      	ldr	r2, [pc, #340]	; (1000b6cc <system_clock_peripheral_disable+0x30c>)
1000b576:	6913      	ldr	r3, [r2, #16]
1000b578:	2108      	movs	r1, #8
1000b57a:	438b      	bics	r3, r1
1000b57c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b57e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;
1000b580:	e0a1      	b.n	1000b6c6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b582:	4a52      	ldr	r2, [pc, #328]	; (1000b6cc <system_clock_peripheral_disable+0x30c>)
1000b584:	6913      	ldr	r3, [r2, #16]
1000b586:	2110      	movs	r1, #16
1000b588:	438b      	bics	r3, r1
1000b58a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b58c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;
1000b58e:	e09a      	b.n	1000b6c6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b590:	4a4e      	ldr	r2, [pc, #312]	; (1000b6cc <system_clock_peripheral_disable+0x30c>)
1000b592:	6913      	ldr	r3, [r2, #16]
1000b594:	2120      	movs	r1, #32
1000b596:	438b      	bics	r3, r1
1000b598:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b59a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;
1000b59c:	e093      	b.n	1000b6c6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b59e:	4a4b      	ldr	r2, [pc, #300]	; (1000b6cc <system_clock_peripheral_disable+0x30c>)
1000b5a0:	6913      	ldr	r3, [r2, #16]
1000b5a2:	2140      	movs	r1, #64	; 0x40
1000b5a4:	438b      	bics	r3, r1
1000b5a6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b5a8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;
1000b5aa:	e08c      	b.n	1000b6c6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b5ac:	4a47      	ldr	r2, [pc, #284]	; (1000b6cc <system_clock_peripheral_disable+0x30c>)
1000b5ae:	6913      	ldr	r3, [r2, #16]
1000b5b0:	2180      	movs	r1, #128	; 0x80
1000b5b2:	438b      	bics	r3, r1
1000b5b4:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b5b6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN;
		break;
1000b5b8:	e085      	b.n	1000b6c6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b5ba:	4a44      	ldr	r2, [pc, #272]	; (1000b6cc <system_clock_peripheral_disable+0x30c>)
1000b5bc:	6911      	ldr	r1, [r2, #16]
1000b5be:	4b44      	ldr	r3, [pc, #272]	; (1000b6d0 <system_clock_peripheral_disable+0x310>)
1000b5c0:	400b      	ands	r3, r1
1000b5c2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b5c4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN;
		break;
1000b5c6:	e07e      	b.n	1000b6c6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b5c8:	4a40      	ldr	r2, [pc, #256]	; (1000b6cc <system_clock_peripheral_disable+0x30c>)
1000b5ca:	6911      	ldr	r1, [r2, #16]
1000b5cc:	4b55      	ldr	r3, [pc, #340]	; (1000b724 <system_clock_peripheral_disable+0x364>)
1000b5ce:	400b      	ands	r3, r1
1000b5d0:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b5d2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN;
		break;
1000b5d4:	e077      	b.n	1000b6c6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b5d6:	4a3d      	ldr	r2, [pc, #244]	; (1000b6cc <system_clock_peripheral_disable+0x30c>)
1000b5d8:	6911      	ldr	r1, [r2, #16]
1000b5da:	4b53      	ldr	r3, [pc, #332]	; (1000b728 <system_clock_peripheral_disable+0x368>)
1000b5dc:	400b      	ands	r3, r1
1000b5de:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b5e0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
1000b5e2:	e070      	b.n	1000b6c6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b5e4:	4a39      	ldr	r2, [pc, #228]	; (1000b6cc <system_clock_peripheral_disable+0x30c>)
1000b5e6:	6911      	ldr	r1, [r2, #16]
1000b5e8:	4b3a      	ldr	r3, [pc, #232]	; (1000b6d4 <system_clock_peripheral_disable+0x314>)
1000b5ea:	400b      	ands	r3, r1
1000b5ec:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b5ee:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
1000b5f0:	e069      	b.n	1000b6c6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b5f2:	4a36      	ldr	r2, [pc, #216]	; (1000b6cc <system_clock_peripheral_disable+0x30c>)
1000b5f4:	6911      	ldr	r1, [r2, #16]
1000b5f6:	4b38      	ldr	r3, [pc, #224]	; (1000b6d8 <system_clock_peripheral_disable+0x318>)
1000b5f8:	400b      	ands	r3, r1
1000b5fa:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b5fc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
1000b5fe:	e062      	b.n	1000b6c6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b600:	4a32      	ldr	r2, [pc, #200]	; (1000b6cc <system_clock_peripheral_disable+0x30c>)
1000b602:	6911      	ldr	r1, [r2, #16]
1000b604:	4b35      	ldr	r3, [pc, #212]	; (1000b6dc <system_clock_peripheral_disable+0x31c>)
1000b606:	400b      	ands	r3, r1
1000b608:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b60a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
1000b60c:	e05b      	b.n	1000b6c6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b60e:	4a2f      	ldr	r2, [pc, #188]	; (1000b6cc <system_clock_peripheral_disable+0x30c>)
1000b610:	6911      	ldr	r1, [r2, #16]
1000b612:	4b33      	ldr	r3, [pc, #204]	; (1000b6e0 <system_clock_peripheral_disable+0x320>)
1000b614:	400b      	ands	r3, r1
1000b616:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b618:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN;
		break;
1000b61a:	e054      	b.n	1000b6c6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b61c:	4a2b      	ldr	r2, [pc, #172]	; (1000b6cc <system_clock_peripheral_disable+0x30c>)
1000b61e:	6911      	ldr	r1, [r2, #16]
1000b620:	4b30      	ldr	r3, [pc, #192]	; (1000b6e4 <system_clock_peripheral_disable+0x324>)
1000b622:	400b      	ands	r3, r1
1000b624:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b626:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
1000b628:	e04d      	b.n	1000b6c6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b62a:	4a28      	ldr	r2, [pc, #160]	; (1000b6cc <system_clock_peripheral_disable+0x30c>)
1000b62c:	6911      	ldr	r1, [r2, #16]
1000b62e:	4b2e      	ldr	r3, [pc, #184]	; (1000b6e8 <system_clock_peripheral_disable+0x328>)
1000b630:	400b      	ands	r3, r1
1000b632:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b634:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
1000b636:	e046      	b.n	1000b6c6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b638:	4a24      	ldr	r2, [pc, #144]	; (1000b6cc <system_clock_peripheral_disable+0x30c>)
1000b63a:	6911      	ldr	r1, [r2, #16]
1000b63c:	4b2b      	ldr	r3, [pc, #172]	; (1000b6ec <system_clock_peripheral_disable+0x32c>)
1000b63e:	400b      	ands	r3, r1
1000b640:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b642:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
1000b644:	e03f      	b.n	1000b6c6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b646:	4a21      	ldr	r2, [pc, #132]	; (1000b6cc <system_clock_peripheral_disable+0x30c>)
1000b648:	6911      	ldr	r1, [r2, #16]
1000b64a:	4b29      	ldr	r3, [pc, #164]	; (1000b6f0 <system_clock_peripheral_disable+0x330>)
1000b64c:	400b      	ands	r3, r1
1000b64e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b650:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
1000b652:	e038      	b.n	1000b6c6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b654:	4a1d      	ldr	r2, [pc, #116]	; (1000b6cc <system_clock_peripheral_disable+0x30c>)
1000b656:	6911      	ldr	r1, [r2, #16]
1000b658:	4b26      	ldr	r3, [pc, #152]	; (1000b6f4 <system_clock_peripheral_disable+0x334>)
1000b65a:	400b      	ands	r3, r1
1000b65c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b65e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
1000b660:	e031      	b.n	1000b6c6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b662:	4a1a      	ldr	r2, [pc, #104]	; (1000b6cc <system_clock_peripheral_disable+0x30c>)
1000b664:	6911      	ldr	r1, [r2, #16]
1000b666:	4b24      	ldr	r3, [pc, #144]	; (1000b6f8 <system_clock_peripheral_disable+0x338>)
1000b668:	400b      	ands	r3, r1
1000b66a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b66c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
1000b66e:	e02a      	b.n	1000b6c6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b670:	4a16      	ldr	r2, [pc, #88]	; (1000b6cc <system_clock_peripheral_disable+0x30c>)
1000b672:	6911      	ldr	r1, [r2, #16]
1000b674:	4b21      	ldr	r3, [pc, #132]	; (1000b6fc <system_clock_peripheral_disable+0x33c>)
1000b676:	400b      	ands	r3, r1
1000b678:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b67a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
1000b67c:	e023      	b.n	1000b6c6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b67e:	4a13      	ldr	r2, [pc, #76]	; (1000b6cc <system_clock_peripheral_disable+0x30c>)
1000b680:	6911      	ldr	r1, [r2, #16]
1000b682:	4b1f      	ldr	r3, [pc, #124]	; (1000b700 <system_clock_peripheral_disable+0x340>)
1000b684:	400b      	ands	r3, r1
1000b686:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b688:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
1000b68a:	e01c      	b.n	1000b6c6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b68c:	4a0f      	ldr	r2, [pc, #60]	; (1000b6cc <system_clock_peripheral_disable+0x30c>)
1000b68e:	6911      	ldr	r1, [r2, #16]
1000b690:	4b1c      	ldr	r3, [pc, #112]	; (1000b704 <system_clock_peripheral_disable+0x344>)
1000b692:	400b      	ands	r3, r1
1000b694:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b696:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
1000b698:	e015      	b.n	1000b6c6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
1000b69a:	4a0c      	ldr	r2, [pc, #48]	; (1000b6cc <system_clock_peripheral_disable+0x30c>)
1000b69c:	7d13      	ldrb	r3, [r2, #20]
1000b69e:	2101      	movs	r1, #1
1000b6a0:	438b      	bics	r3, r1
1000b6a2:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b6a4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;
1000b6a6:	e00e      	b.n	1000b6c6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
1000b6a8:	4a08      	ldr	r2, [pc, #32]	; (1000b6cc <system_clock_peripheral_disable+0x30c>)
1000b6aa:	7d13      	ldrb	r3, [r2, #20]
1000b6ac:	2102      	movs	r1, #2
1000b6ae:	438b      	bics	r3, r1
1000b6b0:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b6b2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;
1000b6b4:	e007      	b.n	1000b6c6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
1000b6b6:	4a05      	ldr	r2, [pc, #20]	; (1000b6cc <system_clock_peripheral_disable+0x30c>)
1000b6b8:	7d13      	ldrb	r3, [r2, #20]
1000b6ba:	2104      	movs	r1, #4
1000b6bc:	438b      	bics	r3, r1
1000b6be:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b6c0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_PERIPH_REGS_CLK_EN;
		break;
1000b6c2:	e000      	b.n	1000b6c6 <system_clock_peripheral_disable+0x306>

		default:
			return STATUS_ERR_INVALID_ARG;
1000b6c4:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000b6c6:	bd00      	pop	{pc}
1000b6c8:	10017490 	.word	0x10017490
1000b6cc:	4000b000 	.word	0x4000b000
1000b6d0:	fffffeff 	.word	0xfffffeff
1000b6d4:	fffff7ff 	.word	0xfffff7ff
1000b6d8:	ffffefff 	.word	0xffffefff
1000b6dc:	ffffdfff 	.word	0xffffdfff
1000b6e0:	ffffbfff 	.word	0xffffbfff
1000b6e4:	ffff7fff 	.word	0xffff7fff
1000b6e8:	fffeffff 	.word	0xfffeffff
1000b6ec:	fffdffff 	.word	0xfffdffff
1000b6f0:	fffbffff 	.word	0xfffbffff
1000b6f4:	fff7ffff 	.word	0xfff7ffff
1000b6f8:	ffefffff 	.word	0xffefffff
1000b6fc:	ffdfffff 	.word	0xffdfffff
1000b700:	ffbfffff 	.word	0xffbfffff
1000b704:	ff7fffff 	.word	0xff7fffff
1000b708:	feffffff 	.word	0xfeffffff
1000b70c:	fdffffff 	.word	0xfdffffff
1000b710:	fbffffff 	.word	0xfbffffff
1000b714:	f7ffffff 	.word	0xf7ffffff
1000b718:	efffffff 	.word	0xefffffff
1000b71c:	dfffffff 	.word	0xdfffffff
1000b720:	bfffffff 	.word	0xbfffffff
1000b724:	fffffdff 	.word	0xfffffdff
1000b728:	fffffbff 	.word	0xfffffbff

1000b72c <system_peripheral_reset>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_peripheral_reset(enum system_peripheral peripheral)
{
1000b72c:	b500      	push	{lr}
	switch (peripheral) {
1000b72e:	2843      	cmp	r0, #67	; 0x43
1000b730:	d900      	bls.n	1000b734 <system_peripheral_reset+0x8>
1000b732:	e223      	b.n	1000bb7c <system_peripheral_reset+0x450>
1000b734:	0080      	lsls	r0, r0, #2
1000b736:	4be0      	ldr	r3, [pc, #896]	; (1000bab8 <system_peripheral_reset+0x38c>)
1000b738:	581b      	ldr	r3, [r3, r0]
1000b73a:	469f      	mov	pc, r3
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b73c:	4bdf      	ldr	r3, [pc, #892]	; (1000babc <system_peripheral_reset+0x390>)
1000b73e:	6859      	ldr	r1, [r3, #4]
1000b740:	2202      	movs	r2, #2
1000b742:	4391      	bics	r1, r2
1000b744:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b746:	6859      	ldr	r1, [r3, #4]
1000b748:	430a      	orrs	r2, r1
1000b74a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b74c:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
		break;
1000b74e:	e216      	b.n	1000bb7e <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b750:	4bda      	ldr	r3, [pc, #872]	; (1000babc <system_peripheral_reset+0x390>)
1000b752:	6859      	ldr	r1, [r3, #4]
1000b754:	2204      	movs	r2, #4
1000b756:	4391      	bics	r1, r2
1000b758:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b75a:	6859      	ldr	r1, [r3, #4]
1000b75c:	430a      	orrs	r2, r1
1000b75e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b760:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
		break;
1000b762:	e20c      	b.n	1000bb7e <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b764:	4bd5      	ldr	r3, [pc, #852]	; (1000babc <system_peripheral_reset+0x390>)
1000b766:	6859      	ldr	r1, [r3, #4]
1000b768:	2208      	movs	r2, #8
1000b76a:	4391      	bics	r1, r2
1000b76c:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b76e:	6859      	ldr	r1, [r3, #4]
1000b770:	430a      	orrs	r2, r1
1000b772:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b774:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
		break;
1000b776:	e202      	b.n	1000bb7e <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b778:	4bd0      	ldr	r3, [pc, #832]	; (1000babc <system_peripheral_reset+0x390>)
1000b77a:	6859      	ldr	r1, [r3, #4]
1000b77c:	2210      	movs	r2, #16
1000b77e:	4391      	bics	r1, r2
1000b780:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b782:	6859      	ldr	r1, [r3, #4]
1000b784:	430a      	orrs	r2, r1
1000b786:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b788:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
		break;
1000b78a:	e1f8      	b.n	1000bb7e <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b78c:	4bcb      	ldr	r3, [pc, #812]	; (1000babc <system_peripheral_reset+0x390>)
1000b78e:	6859      	ldr	r1, [r3, #4]
1000b790:	2220      	movs	r2, #32
1000b792:	4391      	bics	r1, r2
1000b794:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b796:	6859      	ldr	r1, [r3, #4]
1000b798:	430a      	orrs	r2, r1
1000b79a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b79c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
		break;
1000b79e:	e1ee      	b.n	1000bb7e <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b7a0:	4bc6      	ldr	r3, [pc, #792]	; (1000babc <system_peripheral_reset+0x390>)
1000b7a2:	6859      	ldr	r1, [r3, #4]
1000b7a4:	2240      	movs	r2, #64	; 0x40
1000b7a6:	4391      	bics	r1, r2
1000b7a8:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b7aa:	6859      	ldr	r1, [r3, #4]
1000b7ac:	430a      	orrs	r2, r1
1000b7ae:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b7b0:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
		break;
1000b7b2:	e1e4      	b.n	1000bb7e <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b7b4:	4bc1      	ldr	r3, [pc, #772]	; (1000babc <system_peripheral_reset+0x390>)
1000b7b6:	6859      	ldr	r1, [r3, #4]
1000b7b8:	2280      	movs	r2, #128	; 0x80
1000b7ba:	4391      	bics	r1, r2
1000b7bc:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b7be:	6859      	ldr	r1, [r3, #4]
1000b7c0:	430a      	orrs	r2, r1
1000b7c2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b7c4:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
		break;
1000b7c6:	e1da      	b.n	1000bb7e <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b7c8:	4bbc      	ldr	r3, [pc, #752]	; (1000babc <system_peripheral_reset+0x390>)
1000b7ca:	6859      	ldr	r1, [r3, #4]
1000b7cc:	4abc      	ldr	r2, [pc, #752]	; (1000bac0 <system_peripheral_reset+0x394>)
1000b7ce:	400a      	ands	r2, r1
1000b7d0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b7d2:	685a      	ldr	r2, [r3, #4]
1000b7d4:	2180      	movs	r1, #128	; 0x80
1000b7d6:	0049      	lsls	r1, r1, #1
1000b7d8:	430a      	orrs	r2, r1
1000b7da:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b7dc:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
		break;
1000b7de:	e1ce      	b.n	1000bb7e <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b7e0:	4bb6      	ldr	r3, [pc, #728]	; (1000babc <system_peripheral_reset+0x390>)
1000b7e2:	6859      	ldr	r1, [r3, #4]
1000b7e4:	4ab7      	ldr	r2, [pc, #732]	; (1000bac4 <system_peripheral_reset+0x398>)
1000b7e6:	400a      	ands	r2, r1
1000b7e8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b7ea:	685a      	ldr	r2, [r3, #4]
1000b7ec:	2180      	movs	r1, #128	; 0x80
1000b7ee:	0089      	lsls	r1, r1, #2
1000b7f0:	430a      	orrs	r2, r1
1000b7f2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b7f4:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
		break;
1000b7f6:	e1c2      	b.n	1000bb7e <system_peripheral_reset+0x452>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b7f8:	4bb0      	ldr	r3, [pc, #704]	; (1000babc <system_peripheral_reset+0x390>)
1000b7fa:	6859      	ldr	r1, [r3, #4]
1000b7fc:	4ab2      	ldr	r2, [pc, #712]	; (1000bac8 <system_peripheral_reset+0x39c>)
1000b7fe:	400a      	ands	r2, r1
1000b800:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b802:	685a      	ldr	r2, [r3, #4]
1000b804:	2180      	movs	r1, #128	; 0x80
1000b806:	00c9      	lsls	r1, r1, #3
1000b808:	430a      	orrs	r2, r1
1000b80a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b80c:	2000      	movs	r0, #0
		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
		break;
1000b80e:	e1b6      	b.n	1000bb7e <system_peripheral_reset+0x452>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b810:	4baa      	ldr	r3, [pc, #680]	; (1000babc <system_peripheral_reset+0x390>)
1000b812:	6859      	ldr	r1, [r3, #4]
1000b814:	4aad      	ldr	r2, [pc, #692]	; (1000bacc <system_peripheral_reset+0x3a0>)
1000b816:	400a      	ands	r2, r1
1000b818:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b81a:	685a      	ldr	r2, [r3, #4]
1000b81c:	2180      	movs	r1, #128	; 0x80
1000b81e:	0109      	lsls	r1, r1, #4
1000b820:	430a      	orrs	r2, r1
1000b822:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b824:	2000      	movs	r0, #0
		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
		break;
1000b826:	e1aa      	b.n	1000bb7e <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b828:	4ba4      	ldr	r3, [pc, #656]	; (1000babc <system_peripheral_reset+0x390>)
1000b82a:	6859      	ldr	r1, [r3, #4]
1000b82c:	4aa8      	ldr	r2, [pc, #672]	; (1000bad0 <system_peripheral_reset+0x3a4>)
1000b82e:	400a      	ands	r2, r1
1000b830:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b832:	685a      	ldr	r2, [r3, #4]
1000b834:	2180      	movs	r1, #128	; 0x80
1000b836:	0149      	lsls	r1, r1, #5
1000b838:	430a      	orrs	r2, r1
1000b83a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b83c:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
		break;
1000b83e:	e19e      	b.n	1000bb7e <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b840:	4b9e      	ldr	r3, [pc, #632]	; (1000babc <system_peripheral_reset+0x390>)
1000b842:	6859      	ldr	r1, [r3, #4]
1000b844:	4aa3      	ldr	r2, [pc, #652]	; (1000bad4 <system_peripheral_reset+0x3a8>)
1000b846:	400a      	ands	r2, r1
1000b848:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b84a:	685a      	ldr	r2, [r3, #4]
1000b84c:	2180      	movs	r1, #128	; 0x80
1000b84e:	0189      	lsls	r1, r1, #6
1000b850:	430a      	orrs	r2, r1
1000b852:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b854:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
		break;
1000b856:	e192      	b.n	1000bb7e <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b858:	4b98      	ldr	r3, [pc, #608]	; (1000babc <system_peripheral_reset+0x390>)
1000b85a:	6859      	ldr	r1, [r3, #4]
1000b85c:	4a9e      	ldr	r2, [pc, #632]	; (1000bad8 <system_peripheral_reset+0x3ac>)
1000b85e:	400a      	ands	r2, r1
1000b860:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b862:	685a      	ldr	r2, [r3, #4]
1000b864:	2180      	movs	r1, #128	; 0x80
1000b866:	01c9      	lsls	r1, r1, #7
1000b868:	430a      	orrs	r2, r1
1000b86a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b86c:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
		break;
1000b86e:	e186      	b.n	1000bb7e <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b870:	4b92      	ldr	r3, [pc, #584]	; (1000babc <system_peripheral_reset+0x390>)
1000b872:	6859      	ldr	r1, [r3, #4]
1000b874:	4a99      	ldr	r2, [pc, #612]	; (1000badc <system_peripheral_reset+0x3b0>)
1000b876:	400a      	ands	r2, r1
1000b878:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b87a:	685a      	ldr	r2, [r3, #4]
1000b87c:	2180      	movs	r1, #128	; 0x80
1000b87e:	0209      	lsls	r1, r1, #8
1000b880:	430a      	orrs	r2, r1
1000b882:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b884:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
		break;
1000b886:	e17a      	b.n	1000bb7e <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b888:	4b8c      	ldr	r3, [pc, #560]	; (1000babc <system_peripheral_reset+0x390>)
1000b88a:	6859      	ldr	r1, [r3, #4]
1000b88c:	4a94      	ldr	r2, [pc, #592]	; (1000bae0 <system_peripheral_reset+0x3b4>)
1000b88e:	400a      	ands	r2, r1
1000b890:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b892:	685a      	ldr	r2, [r3, #4]
1000b894:	2180      	movs	r1, #128	; 0x80
1000b896:	0249      	lsls	r1, r1, #9
1000b898:	430a      	orrs	r2, r1
1000b89a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b89c:	2000      	movs	r0, #0
		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
		break;
1000b89e:	e16e      	b.n	1000bb7e <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b8a0:	4b86      	ldr	r3, [pc, #536]	; (1000babc <system_peripheral_reset+0x390>)
1000b8a2:	6859      	ldr	r1, [r3, #4]
1000b8a4:	4a8f      	ldr	r2, [pc, #572]	; (1000bae4 <system_peripheral_reset+0x3b8>)
1000b8a6:	400a      	ands	r2, r1
1000b8a8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b8aa:	685a      	ldr	r2, [r3, #4]
1000b8ac:	2180      	movs	r1, #128	; 0x80
1000b8ae:	0289      	lsls	r1, r1, #10
1000b8b0:	430a      	orrs	r2, r1
1000b8b2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b8b4:	2000      	movs	r0, #0
		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
		break;
1000b8b6:	e162      	b.n	1000bb7e <system_peripheral_reset+0x452>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b8b8:	4b80      	ldr	r3, [pc, #512]	; (1000babc <system_peripheral_reset+0x390>)
1000b8ba:	6859      	ldr	r1, [r3, #4]
1000b8bc:	4a8a      	ldr	r2, [pc, #552]	; (1000bae8 <system_peripheral_reset+0x3bc>)
1000b8be:	400a      	ands	r2, r1
1000b8c0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b8c2:	685a      	ldr	r2, [r3, #4]
1000b8c4:	2180      	movs	r1, #128	; 0x80
1000b8c6:	02c9      	lsls	r1, r1, #11
1000b8c8:	430a      	orrs	r2, r1
1000b8ca:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b8cc:	2000      	movs	r0, #0
		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
		break;
1000b8ce:	e156      	b.n	1000bb7e <system_peripheral_reset+0x452>

		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b8d0:	4b7a      	ldr	r3, [pc, #488]	; (1000babc <system_peripheral_reset+0x390>)
1000b8d2:	6859      	ldr	r1, [r3, #4]
1000b8d4:	4a85      	ldr	r2, [pc, #532]	; (1000baec <system_peripheral_reset+0x3c0>)
1000b8d6:	400a      	ands	r2, r1
1000b8d8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b8da:	685a      	ldr	r2, [r3, #4]
1000b8dc:	2180      	movs	r1, #128	; 0x80
1000b8de:	0309      	lsls	r1, r1, #12
1000b8e0:	430a      	orrs	r2, r1
1000b8e2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b8e4:	2000      	movs	r0, #0
		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
		break;
1000b8e6:	e14a      	b.n	1000bb7e <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b8e8:	4b74      	ldr	r3, [pc, #464]	; (1000babc <system_peripheral_reset+0x390>)
1000b8ea:	6859      	ldr	r1, [r3, #4]
1000b8ec:	4a80      	ldr	r2, [pc, #512]	; (1000baf0 <system_peripheral_reset+0x3c4>)
1000b8ee:	400a      	ands	r2, r1
1000b8f0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b8f2:	685a      	ldr	r2, [r3, #4]
1000b8f4:	2180      	movs	r1, #128	; 0x80
1000b8f6:	0349      	lsls	r1, r1, #13
1000b8f8:	430a      	orrs	r2, r1
1000b8fa:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b8fc:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
		break;
1000b8fe:	e13e      	b.n	1000bb7e <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b900:	4b6e      	ldr	r3, [pc, #440]	; (1000babc <system_peripheral_reset+0x390>)
1000b902:	6859      	ldr	r1, [r3, #4]
1000b904:	4a7b      	ldr	r2, [pc, #492]	; (1000baf4 <system_peripheral_reset+0x3c8>)
1000b906:	400a      	ands	r2, r1
1000b908:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b90a:	685a      	ldr	r2, [r3, #4]
1000b90c:	2180      	movs	r1, #128	; 0x80
1000b90e:	0389      	lsls	r1, r1, #14
1000b910:	430a      	orrs	r2, r1
1000b912:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b914:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
		break;
1000b916:	e132      	b.n	1000bb7e <system_peripheral_reset+0x452>

		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b918:	4b68      	ldr	r3, [pc, #416]	; (1000babc <system_peripheral_reset+0x390>)
1000b91a:	6859      	ldr	r1, [r3, #4]
1000b91c:	4a76      	ldr	r2, [pc, #472]	; (1000baf8 <system_peripheral_reset+0x3cc>)
1000b91e:	400a      	ands	r2, r1
1000b920:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b922:	685a      	ldr	r2, [r3, #4]
1000b924:	2180      	movs	r1, #128	; 0x80
1000b926:	03c9      	lsls	r1, r1, #15
1000b928:	430a      	orrs	r2, r1
1000b92a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b92c:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
		break;
1000b92e:	e126      	b.n	1000bb7e <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b930:	4b62      	ldr	r3, [pc, #392]	; (1000babc <system_peripheral_reset+0x390>)
1000b932:	6859      	ldr	r1, [r3, #4]
1000b934:	4a71      	ldr	r2, [pc, #452]	; (1000bafc <system_peripheral_reset+0x3d0>)
1000b936:	400a      	ands	r2, r1
1000b938:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b93a:	685a      	ldr	r2, [r3, #4]
1000b93c:	2180      	movs	r1, #128	; 0x80
1000b93e:	0409      	lsls	r1, r1, #16
1000b940:	430a      	orrs	r2, r1
1000b942:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b944:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
		break;
1000b946:	e11a      	b.n	1000bb7e <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b948:	4b5c      	ldr	r3, [pc, #368]	; (1000babc <system_peripheral_reset+0x390>)
1000b94a:	6859      	ldr	r1, [r3, #4]
1000b94c:	4a6c      	ldr	r2, [pc, #432]	; (1000bb00 <system_peripheral_reset+0x3d4>)
1000b94e:	400a      	ands	r2, r1
1000b950:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b952:	685a      	ldr	r2, [r3, #4]
1000b954:	2180      	movs	r1, #128	; 0x80
1000b956:	0449      	lsls	r1, r1, #17
1000b958:	430a      	orrs	r2, r1
1000b95a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b95c:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
		break;
1000b95e:	e10e      	b.n	1000bb7e <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b960:	4b56      	ldr	r3, [pc, #344]	; (1000babc <system_peripheral_reset+0x390>)
1000b962:	6859      	ldr	r1, [r3, #4]
1000b964:	4a67      	ldr	r2, [pc, #412]	; (1000bb04 <system_peripheral_reset+0x3d8>)
1000b966:	400a      	ands	r2, r1
1000b968:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b96a:	685a      	ldr	r2, [r3, #4]
1000b96c:	2180      	movs	r1, #128	; 0x80
1000b96e:	0489      	lsls	r1, r1, #18
1000b970:	430a      	orrs	r2, r1
1000b972:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b974:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
		break;
1000b976:	e102      	b.n	1000bb7e <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b978:	4b50      	ldr	r3, [pc, #320]	; (1000babc <system_peripheral_reset+0x390>)
1000b97a:	6859      	ldr	r1, [r3, #4]
1000b97c:	4a62      	ldr	r2, [pc, #392]	; (1000bb08 <system_peripheral_reset+0x3dc>)
1000b97e:	400a      	ands	r2, r1
1000b980:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b982:	685a      	ldr	r2, [r3, #4]
1000b984:	2180      	movs	r1, #128	; 0x80
1000b986:	04c9      	lsls	r1, r1, #19
1000b988:	430a      	orrs	r2, r1
1000b98a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b98c:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
		break;
1000b98e:	e0f6      	b.n	1000bb7e <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b990:	4b4a      	ldr	r3, [pc, #296]	; (1000babc <system_peripheral_reset+0x390>)
1000b992:	6859      	ldr	r1, [r3, #4]
1000b994:	4a5d      	ldr	r2, [pc, #372]	; (1000bb0c <system_peripheral_reset+0x3e0>)
1000b996:	400a      	ands	r2, r1
1000b998:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b99a:	685a      	ldr	r2, [r3, #4]
1000b99c:	2180      	movs	r1, #128	; 0x80
1000b99e:	0509      	lsls	r1, r1, #20
1000b9a0:	430a      	orrs	r2, r1
1000b9a2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b9a4:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
		break;
1000b9a6:	e0ea      	b.n	1000bb7e <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b9a8:	4b44      	ldr	r3, [pc, #272]	; (1000babc <system_peripheral_reset+0x390>)
1000b9aa:	6859      	ldr	r1, [r3, #4]
1000b9ac:	4a58      	ldr	r2, [pc, #352]	; (1000bb10 <system_peripheral_reset+0x3e4>)
1000b9ae:	400a      	ands	r2, r1
1000b9b0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b9b2:	685a      	ldr	r2, [r3, #4]
1000b9b4:	2180      	movs	r1, #128	; 0x80
1000b9b6:	0549      	lsls	r1, r1, #21
1000b9b8:	430a      	orrs	r2, r1
1000b9ba:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b9bc:	2000      	movs	r0, #0
		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
		break;
1000b9be:	e0de      	b.n	1000bb7e <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b9c0:	4b3e      	ldr	r3, [pc, #248]	; (1000babc <system_peripheral_reset+0x390>)
1000b9c2:	6859      	ldr	r1, [r3, #4]
1000b9c4:	4a53      	ldr	r2, [pc, #332]	; (1000bb14 <system_peripheral_reset+0x3e8>)
1000b9c6:	400a      	ands	r2, r1
1000b9c8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b9ca:	685a      	ldr	r2, [r3, #4]
1000b9cc:	2180      	movs	r1, #128	; 0x80
1000b9ce:	0589      	lsls	r1, r1, #22
1000b9d0:	430a      	orrs	r2, r1
1000b9d2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b9d4:	2000      	movs	r0, #0
		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
		break;
1000b9d6:	e0d2      	b.n	1000bb7e <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b9d8:	4b38      	ldr	r3, [pc, #224]	; (1000babc <system_peripheral_reset+0x390>)
1000b9da:	6859      	ldr	r1, [r3, #4]
1000b9dc:	4a4e      	ldr	r2, [pc, #312]	; (1000bb18 <system_peripheral_reset+0x3ec>)
1000b9de:	400a      	ands	r2, r1
1000b9e0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b9e2:	685a      	ldr	r2, [r3, #4]
1000b9e4:	2180      	movs	r1, #128	; 0x80
1000b9e6:	05c9      	lsls	r1, r1, #23
1000b9e8:	430a      	orrs	r2, r1
1000b9ea:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b9ec:	2000      	movs	r0, #0
		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
		break;
1000b9ee:	e0c6      	b.n	1000bb7e <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b9f0:	4a32      	ldr	r2, [pc, #200]	; (1000babc <system_peripheral_reset+0x390>)
1000b9f2:	6853      	ldr	r3, [r2, #4]
1000b9f4:	005b      	lsls	r3, r3, #1
1000b9f6:	085b      	lsrs	r3, r3, #1
1000b9f8:	6053      	str	r3, [r2, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b9fa:	6853      	ldr	r3, [r2, #4]
1000b9fc:	2180      	movs	r1, #128	; 0x80
1000b9fe:	0609      	lsls	r1, r1, #24
1000ba00:	430b      	orrs	r3, r1
1000ba02:	6053      	str	r3, [r2, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ba04:	2000      	movs	r0, #0
		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
		break;
1000ba06:	e0ba      	b.n	1000bb7e <system_peripheral_reset+0x452>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000ba08:	4b2c      	ldr	r3, [pc, #176]	; (1000babc <system_peripheral_reset+0x390>)
1000ba0a:	891a      	ldrh	r2, [r3, #8]
1000ba0c:	2101      	movs	r1, #1
1000ba0e:	438a      	bics	r2, r1
1000ba10:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000ba12:	8919      	ldrh	r1, [r3, #8]
1000ba14:	2201      	movs	r2, #1
1000ba16:	430a      	orrs	r2, r1
1000ba18:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ba1a:	2000      	movs	r0, #0
		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
		break;
1000ba1c:	e0af      	b.n	1000bb7e <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000ba1e:	4b27      	ldr	r3, [pc, #156]	; (1000babc <system_peripheral_reset+0x390>)
1000ba20:	891a      	ldrh	r2, [r3, #8]
1000ba22:	2102      	movs	r1, #2
1000ba24:	438a      	bics	r2, r1
1000ba26:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000ba28:	8919      	ldrh	r1, [r3, #8]
1000ba2a:	2202      	movs	r2, #2
1000ba2c:	430a      	orrs	r2, r1
1000ba2e:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ba30:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
		break;
1000ba32:	e0a4      	b.n	1000bb7e <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000ba34:	4b21      	ldr	r3, [pc, #132]	; (1000babc <system_peripheral_reset+0x390>)
1000ba36:	891a      	ldrh	r2, [r3, #8]
1000ba38:	2104      	movs	r1, #4
1000ba3a:	438a      	bics	r2, r1
1000ba3c:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000ba3e:	8919      	ldrh	r1, [r3, #8]
1000ba40:	2204      	movs	r2, #4
1000ba42:	430a      	orrs	r2, r1
1000ba44:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ba46:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
		break;
1000ba48:	e099      	b.n	1000bb7e <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000ba4a:	4b1c      	ldr	r3, [pc, #112]	; (1000babc <system_peripheral_reset+0x390>)
1000ba4c:	891a      	ldrh	r2, [r3, #8]
1000ba4e:	2108      	movs	r1, #8
1000ba50:	438a      	bics	r2, r1
1000ba52:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000ba54:	8919      	ldrh	r1, [r3, #8]
1000ba56:	2208      	movs	r2, #8
1000ba58:	430a      	orrs	r2, r1
1000ba5a:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ba5c:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
		break;
1000ba5e:	e08e      	b.n	1000bb7e <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000ba60:	4b16      	ldr	r3, [pc, #88]	; (1000babc <system_peripheral_reset+0x390>)
1000ba62:	891a      	ldrh	r2, [r3, #8]
1000ba64:	2110      	movs	r1, #16
1000ba66:	438a      	bics	r2, r1
1000ba68:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000ba6a:	8919      	ldrh	r1, [r3, #8]
1000ba6c:	2210      	movs	r2, #16
1000ba6e:	430a      	orrs	r2, r1
1000ba70:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ba72:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
		break;
1000ba74:	e083      	b.n	1000bb7e <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000ba76:	4b11      	ldr	r3, [pc, #68]	; (1000babc <system_peripheral_reset+0x390>)
1000ba78:	891a      	ldrh	r2, [r3, #8]
1000ba7a:	2120      	movs	r1, #32
1000ba7c:	438a      	bics	r2, r1
1000ba7e:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000ba80:	8919      	ldrh	r1, [r3, #8]
1000ba82:	2220      	movs	r2, #32
1000ba84:	430a      	orrs	r2, r1
1000ba86:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ba88:	2000      	movs	r0, #0
		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
		break;
1000ba8a:	e078      	b.n	1000bb7e <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000ba8c:	4b0b      	ldr	r3, [pc, #44]	; (1000babc <system_peripheral_reset+0x390>)
1000ba8e:	891a      	ldrh	r2, [r3, #8]
1000ba90:	2140      	movs	r1, #64	; 0x40
1000ba92:	438a      	bics	r2, r1
1000ba94:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000ba96:	8919      	ldrh	r1, [r3, #8]
1000ba98:	2240      	movs	r2, #64	; 0x40
1000ba9a:	430a      	orrs	r2, r1
1000ba9c:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ba9e:	2000      	movs	r0, #0
		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
		break;
1000baa0:	e06d      	b.n	1000bb7e <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000baa2:	4b06      	ldr	r3, [pc, #24]	; (1000babc <system_peripheral_reset+0x390>)
1000baa4:	891a      	ldrh	r2, [r3, #8]
1000baa6:	2180      	movs	r1, #128	; 0x80
1000baa8:	438a      	bics	r2, r1
1000baaa:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000baac:	8919      	ldrh	r1, [r3, #8]
1000baae:	2280      	movs	r2, #128	; 0x80
1000bab0:	430a      	orrs	r2, r1
1000bab2:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bab4:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
		break;
1000bab6:	e062      	b.n	1000bb7e <system_peripheral_reset+0x452>
1000bab8:	10017568 	.word	0x10017568
1000babc:	4000b000 	.word	0x4000b000
1000bac0:	fffffeff 	.word	0xfffffeff
1000bac4:	fffffdff 	.word	0xfffffdff
1000bac8:	fffffbff 	.word	0xfffffbff
1000bacc:	fffff7ff 	.word	0xfffff7ff
1000bad0:	ffffefff 	.word	0xffffefff
1000bad4:	ffffdfff 	.word	0xffffdfff
1000bad8:	ffffbfff 	.word	0xffffbfff
1000badc:	ffff7fff 	.word	0xffff7fff
1000bae0:	fffeffff 	.word	0xfffeffff
1000bae4:	fffdffff 	.word	0xfffdffff
1000bae8:	fffbffff 	.word	0xfffbffff
1000baec:	fff7ffff 	.word	0xfff7ffff
1000baf0:	ffefffff 	.word	0xffefffff
1000baf4:	ffdfffff 	.word	0xffdfffff
1000baf8:	ffbfffff 	.word	0xffbfffff
1000bafc:	ff7fffff 	.word	0xff7fffff
1000bb00:	feffffff 	.word	0xfeffffff
1000bb04:	fdffffff 	.word	0xfdffffff
1000bb08:	fbffffff 	.word	0xfbffffff
1000bb0c:	f7ffffff 	.word	0xf7ffffff
1000bb10:	efffffff 	.word	0xefffffff
1000bb14:	dfffffff 	.word	0xdfffffff
1000bb18:	bfffffff 	.word	0xbfffffff

		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000bb1c:	4b18      	ldr	r3, [pc, #96]	; (1000bb80 <system_peripheral_reset+0x454>)
1000bb1e:	8919      	ldrh	r1, [r3, #8]
1000bb20:	4a18      	ldr	r2, [pc, #96]	; (1000bb84 <system_peripheral_reset+0x458>)
1000bb22:	400a      	ands	r2, r1
1000bb24:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000bb26:	8919      	ldrh	r1, [r3, #8]
1000bb28:	2280      	movs	r2, #128	; 0x80
1000bb2a:	0052      	lsls	r2, r2, #1
1000bb2c:	430a      	orrs	r2, r1
1000bb2e:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bb30:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
		break;
1000bb32:	e024      	b.n	1000bb7e <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000bb34:	4b12      	ldr	r3, [pc, #72]	; (1000bb80 <system_peripheral_reset+0x454>)
1000bb36:	8919      	ldrh	r1, [r3, #8]
1000bb38:	4a13      	ldr	r2, [pc, #76]	; (1000bb88 <system_peripheral_reset+0x45c>)
1000bb3a:	400a      	ands	r2, r1
1000bb3c:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000bb3e:	8919      	ldrh	r1, [r3, #8]
1000bb40:	2280      	movs	r2, #128	; 0x80
1000bb42:	0092      	lsls	r2, r2, #2
1000bb44:	430a      	orrs	r2, r1
1000bb46:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bb48:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
		break;
1000bb4a:	e018      	b.n	1000bb7e <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000bb4c:	4b0c      	ldr	r3, [pc, #48]	; (1000bb80 <system_peripheral_reset+0x454>)
1000bb4e:	8919      	ldrh	r1, [r3, #8]
1000bb50:	4a0e      	ldr	r2, [pc, #56]	; (1000bb8c <system_peripheral_reset+0x460>)
1000bb52:	400a      	ands	r2, r1
1000bb54:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000bb56:	8919      	ldrh	r1, [r3, #8]
1000bb58:	2280      	movs	r2, #128	; 0x80
1000bb5a:	00d2      	lsls	r2, r2, #3
1000bb5c:	430a      	orrs	r2, r1
1000bb5e:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bb60:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
		break;
1000bb62:	e00c      	b.n	1000bb7e <system_peripheral_reset+0x452>

		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000bb64:	4b06      	ldr	r3, [pc, #24]	; (1000bb80 <system_peripheral_reset+0x454>)
1000bb66:	8919      	ldrh	r1, [r3, #8]
1000bb68:	4a09      	ldr	r2, [pc, #36]	; (1000bb90 <system_peripheral_reset+0x464>)
1000bb6a:	400a      	ands	r2, r1
1000bb6c:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000bb6e:	8919      	ldrh	r1, [r3, #8]
1000bb70:	2280      	movs	r2, #128	; 0x80
1000bb72:	0112      	lsls	r2, r2, #4
1000bb74:	430a      	orrs	r2, r1
1000bb76:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bb78:	2000      	movs	r0, #0
		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
		break;
1000bb7a:	e000      	b.n	1000bb7e <system_peripheral_reset+0x452>

		default:
			return STATUS_ERR_INVALID_ARG;
1000bb7c:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000bb7e:	bd00      	pop	{pc}
1000bb80:	4000b000 	.word	0x4000b000
1000bb84:	fffffeff 	.word	0xfffffeff
1000bb88:	fffffdff 	.word	0xfffffdff
1000bb8c:	fffffbff 	.word	0xfffffbff
1000bb90:	fffff7ff 	.word	0xfffff7ff

1000bb94 <system_register_isr>:
void system_register_isr(enum ram_isr_table_index isr_index,
		uint32_t isr_address)
{
	uint32_t *temp;
	temp = (uint32_t *)(isr_index * 4 + ISR_RAM_MAP_START_ADDRESS);
	*temp = isr_address;
1000bb94:	2380      	movs	r3, #128	; 0x80
1000bb96:	04db      	lsls	r3, r3, #19
1000bb98:	469c      	mov	ip, r3
1000bb9a:	4460      	add	r0, ip
1000bb9c:	0080      	lsls	r0, r0, #2
1000bb9e:	6001      	str	r1, [r0, #0]
}
1000bba0:	4770      	bx	lr
1000bba2:	46c0      	nop			; (mov r8, r8)

1000bba4 <uart_rx0_isr_handler>:
	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
}

static void uart_rx0_isr_handler(void)
{
1000bba4:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
1000bba6:	4b20      	ldr	r3, [pc, #128]	; (1000bc28 <uart_rx0_isr_handler+0x84>)
1000bba8:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000bbaa:	6823      	ldr	r3, [r4, #0]
1000bbac:	7d1d      	ldrb	r5, [r3, #20]
1000bbae:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000bbb0:	066a      	lsls	r2, r5, #25
1000bbb2:	d513      	bpl.n	1000bbdc <uart_rx0_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000bbb4:	211e      	movs	r1, #30
1000bbb6:	2222      	movs	r2, #34	; 0x22
1000bbb8:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000bbba:	7e1a      	ldrb	r2, [r3, #24]
1000bbbc:	3123      	adds	r1, #35	; 0x23
1000bbbe:	438a      	bics	r2, r1
1000bbc0:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000bbc2:	2321      	movs	r3, #33	; 0x21
1000bbc4:	5ce3      	ldrb	r3, [r4, r3]
1000bbc6:	071b      	lsls	r3, r3, #28
1000bbc8:	d506      	bpl.n	1000bbd8 <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000bbca:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000bbcc:	5ce3      	ldrb	r3, [r4, r3]
1000bbce:	071b      	lsls	r3, r3, #28
1000bbd0:	d502      	bpl.n	1000bbd8 <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000bbd2:	0020      	movs	r0, r4
1000bbd4:	6923      	ldr	r3, [r4, #16]
1000bbd6:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000bbd8:	6823      	ldr	r3, [r4, #0]
1000bbda:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000bbdc:	07eb      	lsls	r3, r5, #31
1000bbde:	d522      	bpl.n	1000bc26 <uart_rx0_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000bbe0:	6823      	ldr	r3, [r4, #0]
1000bbe2:	7c1b      	ldrb	r3, [r3, #16]
1000bbe4:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000bbe6:	6962      	ldr	r2, [r4, #20]
1000bbe8:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000bbea:	6963      	ldr	r3, [r4, #20]
1000bbec:	3301      	adds	r3, #1
1000bbee:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000bbf0:	8ba3      	ldrh	r3, [r4, #28]
1000bbf2:	3b01      	subs	r3, #1
1000bbf4:	b29b      	uxth	r3, r3
1000bbf6:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
1000bbf8:	8ba3      	ldrh	r3, [r4, #28]
1000bbfa:	b29b      	uxth	r3, r3
1000bbfc:	2b00      	cmp	r3, #0
1000bbfe:	d112      	bne.n	1000bc26 <uart_rx0_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000bc00:	3321      	adds	r3, #33	; 0x21
1000bc02:	5ce3      	ldrb	r3, [r4, r3]
1000bc04:	075b      	lsls	r3, r3, #29
1000bc06:	d50e      	bpl.n	1000bc26 <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000bc08:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000bc0a:	5ce3      	ldrb	r3, [r4, r3]
1000bc0c:	075b      	lsls	r3, r3, #29
1000bc0e:	d50a      	bpl.n	1000bc26 <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000bc10:	2200      	movs	r2, #0
1000bc12:	2322      	movs	r3, #34	; 0x22
1000bc14:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000bc16:	6822      	ldr	r2, [r4, #0]
1000bc18:	7e13      	ldrb	r3, [r2, #24]
1000bc1a:	2101      	movs	r1, #1
1000bc1c:	438b      	bics	r3, r1
1000bc1e:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000bc20:	68e3      	ldr	r3, [r4, #12]
1000bc22:	0020      	movs	r0, r4
1000bc24:	4798      	blx	r3
			}
		}
	}
}
1000bc26:	bd70      	pop	{r4, r5, r6, pc}
1000bc28:	1001a37c 	.word	0x1001a37c

1000bc2c <uart_tx0_isr_handler>:

static void uart_tx0_isr_handler(void)
{
1000bc2c:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
1000bc2e:	4b21      	ldr	r3, [pc, #132]	; (1000bcb4 <uart_tx0_isr_handler+0x88>)
1000bc30:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000bc32:	6823      	ldr	r3, [r4, #0]
1000bc34:	791d      	ldrb	r5, [r3, #4]
1000bc36:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000bc38:	07ea      	lsls	r2, r5, #31
1000bc3a:	d517      	bpl.n	1000bc6c <uart_tx0_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000bc3c:	69a2      	ldr	r2, [r4, #24]
1000bc3e:	7811      	ldrb	r1, [r2, #0]
1000bc40:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000bc42:	3201      	adds	r2, #1
1000bc44:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000bc46:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000bc48:	8be3      	ldrh	r3, [r4, #30]
1000bc4a:	3b01      	subs	r3, #1
1000bc4c:	b29b      	uxth	r3, r3
1000bc4e:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[0];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
1000bc50:	8be3      	ldrh	r3, [r4, #30]
1000bc52:	b29b      	uxth	r3, r3
1000bc54:	2b00      	cmp	r3, #0
1000bc56:	d109      	bne.n	1000bc6c <uart_tx0_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
1000bc58:	6822      	ldr	r2, [r4, #0]
1000bc5a:	7a13      	ldrb	r3, [r2, #8]
1000bc5c:	2101      	movs	r1, #1
1000bc5e:	438b      	bics	r3, r1
1000bc60:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000bc62:	6822      	ldr	r2, [r4, #0]
1000bc64:	7a11      	ldrb	r1, [r2, #8]
1000bc66:	2310      	movs	r3, #16
1000bc68:	430b      	orrs	r3, r1
1000bc6a:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000bc6c:	06eb      	lsls	r3, r5, #27
1000bc6e:	d512      	bpl.n	1000bc96 <uart_tx0_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000bc70:	2321      	movs	r3, #33	; 0x21
1000bc72:	5ce3      	ldrb	r3, [r4, r3]
1000bc74:	07db      	lsls	r3, r3, #31
1000bc76:	d50e      	bpl.n	1000bc96 <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000bc78:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000bc7a:	5ce3      	ldrb	r3, [r4, r3]
1000bc7c:	07db      	lsls	r3, r3, #31
1000bc7e:	d50a      	bpl.n	1000bc96 <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000bc80:	2200      	movs	r2, #0
1000bc82:	2322      	movs	r3, #34	; 0x22
1000bc84:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000bc86:	6822      	ldr	r2, [r4, #0]
1000bc88:	7a13      	ldrb	r3, [r2, #8]
1000bc8a:	2110      	movs	r1, #16
1000bc8c:	438b      	bics	r3, r1
1000bc8e:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000bc90:	0020      	movs	r0, r4
1000bc92:	6863      	ldr	r3, [r4, #4]
1000bc94:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000bc96:	06ab      	lsls	r3, r5, #26
1000bc98:	d50a      	bpl.n	1000bcb0 <uart_tx0_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000bc9a:	2321      	movs	r3, #33	; 0x21
1000bc9c:	5ce3      	ldrb	r3, [r4, r3]
1000bc9e:	079b      	lsls	r3, r3, #30
1000bca0:	d506      	bpl.n	1000bcb0 <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
1000bca2:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000bca4:	5ce3      	ldrb	r3, [r4, r3]
1000bca6:	079b      	lsls	r3, r3, #30
1000bca8:	d502      	bpl.n	1000bcb0 <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000bcaa:	68a3      	ldr	r3, [r4, #8]
1000bcac:	0020      	movs	r0, r4
1000bcae:	4798      	blx	r3
		}

	}
}
1000bcb0:	bd70      	pop	{r4, r5, r6, pc}
1000bcb2:	46c0      	nop			; (mov r8, r8)
1000bcb4:	1001a37c 	.word	0x1001a37c

1000bcb8 <uart_rx1_isr_handler>:

static void uart_rx1_isr_handler(void)
{
1000bcb8:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
1000bcba:	4b20      	ldr	r3, [pc, #128]	; (1000bd3c <uart_rx1_isr_handler+0x84>)
1000bcbc:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000bcbe:	6823      	ldr	r3, [r4, #0]
1000bcc0:	7d1d      	ldrb	r5, [r3, #20]
1000bcc2:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000bcc4:	066a      	lsls	r2, r5, #25
1000bcc6:	d513      	bpl.n	1000bcf0 <uart_rx1_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000bcc8:	211e      	movs	r1, #30
1000bcca:	2222      	movs	r2, #34	; 0x22
1000bccc:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000bcce:	7e1a      	ldrb	r2, [r3, #24]
1000bcd0:	3123      	adds	r1, #35	; 0x23
1000bcd2:	438a      	bics	r2, r1
1000bcd4:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000bcd6:	2321      	movs	r3, #33	; 0x21
1000bcd8:	5ce3      	ldrb	r3, [r4, r3]
1000bcda:	071b      	lsls	r3, r3, #28
1000bcdc:	d506      	bpl.n	1000bcec <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000bcde:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000bce0:	5ce3      	ldrb	r3, [r4, r3]
1000bce2:	071b      	lsls	r3, r3, #28
1000bce4:	d502      	bpl.n	1000bcec <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000bce6:	0020      	movs	r0, r4
1000bce8:	6923      	ldr	r3, [r4, #16]
1000bcea:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000bcec:	6823      	ldr	r3, [r4, #0]
1000bcee:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000bcf0:	07eb      	lsls	r3, r5, #31
1000bcf2:	d522      	bpl.n	1000bd3a <uart_rx1_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000bcf4:	6823      	ldr	r3, [r4, #0]
1000bcf6:	7c1b      	ldrb	r3, [r3, #16]
1000bcf8:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000bcfa:	6962      	ldr	r2, [r4, #20]
1000bcfc:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000bcfe:	6963      	ldr	r3, [r4, #20]
1000bd00:	3301      	adds	r3, #1
1000bd02:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000bd04:	8ba3      	ldrh	r3, [r4, #28]
1000bd06:	3b01      	subs	r3, #1
1000bd08:	b29b      	uxth	r3, r3
1000bd0a:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
1000bd0c:	8ba3      	ldrh	r3, [r4, #28]
1000bd0e:	b29b      	uxth	r3, r3
1000bd10:	2b00      	cmp	r3, #0
1000bd12:	d112      	bne.n	1000bd3a <uart_rx1_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000bd14:	3321      	adds	r3, #33	; 0x21
1000bd16:	5ce3      	ldrb	r3, [r4, r3]
1000bd18:	075b      	lsls	r3, r3, #29
1000bd1a:	d50e      	bpl.n	1000bd3a <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000bd1c:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000bd1e:	5ce3      	ldrb	r3, [r4, r3]
1000bd20:	075b      	lsls	r3, r3, #29
1000bd22:	d50a      	bpl.n	1000bd3a <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000bd24:	2200      	movs	r2, #0
1000bd26:	2322      	movs	r3, #34	; 0x22
1000bd28:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000bd2a:	6822      	ldr	r2, [r4, #0]
1000bd2c:	7e13      	ldrb	r3, [r2, #24]
1000bd2e:	2101      	movs	r1, #1
1000bd30:	438b      	bics	r3, r1
1000bd32:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000bd34:	68e3      	ldr	r3, [r4, #12]
1000bd36:	0020      	movs	r0, r4
1000bd38:	4798      	blx	r3
			}
		}
	}
}
1000bd3a:	bd70      	pop	{r4, r5, r6, pc}
1000bd3c:	1001a37c 	.word	0x1001a37c

1000bd40 <uart_tx1_isr_handler>:

static void uart_tx1_isr_handler(void)
{
1000bd40:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
1000bd42:	4b21      	ldr	r3, [pc, #132]	; (1000bdc8 <uart_tx1_isr_handler+0x88>)
1000bd44:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000bd46:	6823      	ldr	r3, [r4, #0]
1000bd48:	791d      	ldrb	r5, [r3, #4]
1000bd4a:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000bd4c:	07ea      	lsls	r2, r5, #31
1000bd4e:	d517      	bpl.n	1000bd80 <uart_tx1_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000bd50:	69a2      	ldr	r2, [r4, #24]
1000bd52:	7811      	ldrb	r1, [r2, #0]
1000bd54:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000bd56:	3201      	adds	r2, #1
1000bd58:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000bd5a:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000bd5c:	8be3      	ldrh	r3, [r4, #30]
1000bd5e:	3b01      	subs	r3, #1
1000bd60:	b29b      	uxth	r3, r3
1000bd62:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[1];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
1000bd64:	8be3      	ldrh	r3, [r4, #30]
1000bd66:	b29b      	uxth	r3, r3
1000bd68:	2b00      	cmp	r3, #0
1000bd6a:	d109      	bne.n	1000bd80 <uart_tx1_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
1000bd6c:	6822      	ldr	r2, [r4, #0]
1000bd6e:	7a13      	ldrb	r3, [r2, #8]
1000bd70:	2101      	movs	r1, #1
1000bd72:	438b      	bics	r3, r1
1000bd74:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000bd76:	6822      	ldr	r2, [r4, #0]
1000bd78:	7a11      	ldrb	r1, [r2, #8]
1000bd7a:	2310      	movs	r3, #16
1000bd7c:	430b      	orrs	r3, r1
1000bd7e:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000bd80:	06eb      	lsls	r3, r5, #27
1000bd82:	d512      	bpl.n	1000bdaa <uart_tx1_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000bd84:	2321      	movs	r3, #33	; 0x21
1000bd86:	5ce3      	ldrb	r3, [r4, r3]
1000bd88:	07db      	lsls	r3, r3, #31
1000bd8a:	d50e      	bpl.n	1000bdaa <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000bd8c:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000bd8e:	5ce3      	ldrb	r3, [r4, r3]
1000bd90:	07db      	lsls	r3, r3, #31
1000bd92:	d50a      	bpl.n	1000bdaa <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000bd94:	2200      	movs	r2, #0
1000bd96:	2322      	movs	r3, #34	; 0x22
1000bd98:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000bd9a:	6822      	ldr	r2, [r4, #0]
1000bd9c:	7a13      	ldrb	r3, [r2, #8]
1000bd9e:	2110      	movs	r1, #16
1000bda0:	438b      	bics	r3, r1
1000bda2:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000bda4:	0020      	movs	r0, r4
1000bda6:	6863      	ldr	r3, [r4, #4]
1000bda8:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000bdaa:	06ab      	lsls	r3, r5, #26
1000bdac:	d50a      	bpl.n	1000bdc4 <uart_tx1_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000bdae:	2321      	movs	r3, #33	; 0x21
1000bdb0:	5ce3      	ldrb	r3, [r4, r3]
1000bdb2:	079b      	lsls	r3, r3, #30
1000bdb4:	d506      	bpl.n	1000bdc4 <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
1000bdb6:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000bdb8:	5ce3      	ldrb	r3, [r4, r3]
1000bdba:	079b      	lsls	r3, r3, #30
1000bdbc:	d502      	bpl.n	1000bdc4 <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000bdbe:	68a3      	ldr	r3, [r4, #8]
1000bdc0:	0020      	movs	r0, r4
1000bdc2:	4798      	blx	r3
		}

	}
}
1000bdc4:	bd70      	pop	{r4, r5, r6, pc}
1000bdc6:	46c0      	nop			; (mov r8, r8)
1000bdc8:	1001a37c 	.word	0x1001a37c

1000bdcc <uart_get_config_defaults>:
 * \param[out] config  Pointer to configuration structure to be initiated
 */
void uart_get_config_defaults(
		struct uart_config *const config)
{
	config->baud_rate = 115200;
1000bdcc:	23e1      	movs	r3, #225	; 0xe1
1000bdce:	025b      	lsls	r3, r3, #9
1000bdd0:	6003      	str	r3, [r0, #0]
	config->data_bits = UART_8_BITS;
1000bdd2:	2300      	movs	r3, #0
1000bdd4:	7103      	strb	r3, [r0, #4]
	config->stop_bits = UART_1_STOP_BIT;
1000bdd6:	7143      	strb	r3, [r0, #5]
	config->parity = UART_NO_PARITY;
1000bdd8:	7183      	strb	r3, [r0, #6]
	config->flow_control = false;
1000bdda:	71c3      	strb	r3, [r0, #7]

	config->pin_number_pad[0] = PIN_LP_GPIO_2;
1000bddc:	3302      	adds	r3, #2
1000bdde:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_3;
1000bde0:	2203      	movs	r2, #3
1000bde2:	60c2      	str	r2, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_4;
1000bde4:	3201      	adds	r2, #1
1000bde6:	6102      	str	r2, [r0, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_5;
1000bde8:	3201      	adds	r2, #1
1000bdea:	6142      	str	r2, [r0, #20]

	config->pinmux_sel_pad[0] = MUX_LP_GPIO_2_UART0_RXD;
1000bdec:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_3_UART0_TXD;
1000bdee:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_4_UART0_CTS;
1000bdf0:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_5_UART0_RTS;
1000bdf2:	6243      	str	r3, [r0, #36]	; 0x24
}
1000bdf4:	4770      	bx	lr
1000bdf6:	46c0      	nop			; (mov r8, r8)

1000bdf8 <uart_init>:
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000bdf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000bdfa:	464f      	mov	r7, r9
1000bdfc:	4646      	mov	r6, r8
1000bdfe:	b4c0      	push	{r6, r7}
1000be00:	0005      	movs	r5, r0
1000be02:	0017      	movs	r7, r2

	uint8_t config_temp = 0;
	uint8_t i,index;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
1000be04:	6001      	str	r1, [r0, #0]

	for (i = 0; i < UART_CALLBACK_N; i++) {
		module->callback[i] = NULL;
1000be06:	2300      	movs	r3, #0
1000be08:	6043      	str	r3, [r0, #4]
1000be0a:	6083      	str	r3, [r0, #8]
1000be0c:	60c3      	str	r3, [r0, #12]
1000be0e:	6103      	str	r3, [r0, #16]
	}
	module->rx_buffer_ptr = NULL;
1000be10:	6143      	str	r3, [r0, #20]
	module->tx_buffer_ptr = NULL;
1000be12:	6183      	str	r3, [r0, #24]
	module->remaining_rx_buffer_length = 0;
1000be14:	2200      	movs	r2, #0
1000be16:	8383      	strh	r3, [r0, #28]
	module->remaining_tx_buffer_length = 0;
1000be18:	83c3      	strh	r3, [r0, #30]
	module->callback_reg_mask = 0;
1000be1a:	3320      	adds	r3, #32
1000be1c:	54c2      	strb	r2, [r0, r3]
	module->callback_enable_mask = 0;
1000be1e:	3301      	adds	r3, #1
1000be20:	54c2      	strb	r2, [r0, r3]
	module->status = STATUS_OK;
1000be22:	3301      	adds	r3, #1
1000be24:	54c2      	strb	r2, [r0, r3]

	if (hw == UART0) {
1000be26:	4b55      	ldr	r3, [pc, #340]	; (1000bf7c <uart_init+0x184>)
1000be28:	4299      	cmp	r1, r3
1000be2a:	d118      	bne.n	1000be5e <uart_init+0x66>
		system_peripheral_reset(PERIPHERAL_UART0_CORE);
1000be2c:	2009      	movs	r0, #9
1000be2e:	4c54      	ldr	r4, [pc, #336]	; (1000bf80 <uart_init+0x188>)
1000be30:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART0_IF);
1000be32:	200a      	movs	r0, #10
1000be34:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_CORE);
1000be36:	2009      	movs	r0, #9
1000be38:	4c52      	ldr	r4, [pc, #328]	; (1000bf84 <uart_init+0x18c>)
1000be3a:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_IF);
1000be3c:	200a      	movs	r0, #10
1000be3e:	47a0      	blx	r4
		_uart_instances[0] = module;
1000be40:	4b51      	ldr	r3, [pc, #324]	; (1000bf88 <uart_init+0x190>)
1000be42:	601d      	str	r5, [r3, #0]
		system_register_isr(RAM_ISR_TABLE_UARTRX0_INDEX, (uint32_t)uart_rx0_isr_handler);
1000be44:	4951      	ldr	r1, [pc, #324]	; (1000bf8c <uart_init+0x194>)
1000be46:	2010      	movs	r0, #16
1000be48:	4c51      	ldr	r4, [pc, #324]	; (1000bf90 <uart_init+0x198>)
1000be4a:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX0_INDEX, (uint32_t)uart_tx0_isr_handler);
1000be4c:	4951      	ldr	r1, [pc, #324]	; (1000bf94 <uart_init+0x19c>)
1000be4e:	2011      	movs	r0, #17
1000be50:	47a0      	blx	r4
1000be52:	4b51      	ldr	r3, [pc, #324]	; (1000bf98 <uart_init+0x1a0>)
1000be54:	2201      	movs	r2, #1
1000be56:	601a      	str	r2, [r3, #0]
1000be58:	3201      	adds	r2, #1
1000be5a:	601a      	str	r2, [r3, #0]
1000be5c:	e01a      	b.n	1000be94 <uart_init+0x9c>
		NVIC_EnableIRQ(UART0_RX_IRQn);
		NVIC_EnableIRQ(UART0_TX_IRQn);
	} else if (hw == UART1) {
1000be5e:	4b4f      	ldr	r3, [pc, #316]	; (1000bf9c <uart_init+0x1a4>)
1000be60:	4299      	cmp	r1, r3
1000be62:	d117      	bne.n	1000be94 <uart_init+0x9c>
		system_peripheral_reset(PERIPHERAL_UART1_CORE);
1000be64:	200b      	movs	r0, #11
1000be66:	4c46      	ldr	r4, [pc, #280]	; (1000bf80 <uart_init+0x188>)
1000be68:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART1_IF);
1000be6a:	200c      	movs	r0, #12
1000be6c:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_CORE);
1000be6e:	200b      	movs	r0, #11
1000be70:	4c44      	ldr	r4, [pc, #272]	; (1000bf84 <uart_init+0x18c>)
1000be72:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_IF);
1000be74:	200c      	movs	r0, #12
1000be76:	47a0      	blx	r4
		_uart_instances[1] = module;
1000be78:	4b43      	ldr	r3, [pc, #268]	; (1000bf88 <uart_init+0x190>)
1000be7a:	605d      	str	r5, [r3, #4]
		system_register_isr(RAM_ISR_TABLE_UARTRX1_INDEX, (uint32_t)uart_rx1_isr_handler);
1000be7c:	4948      	ldr	r1, [pc, #288]	; (1000bfa0 <uart_init+0x1a8>)
1000be7e:	2012      	movs	r0, #18
1000be80:	4c43      	ldr	r4, [pc, #268]	; (1000bf90 <uart_init+0x198>)
1000be82:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX1_INDEX, (uint32_t)uart_tx1_isr_handler);
1000be84:	4947      	ldr	r1, [pc, #284]	; (1000bfa4 <uart_init+0x1ac>)
1000be86:	2013      	movs	r0, #19
1000be88:	47a0      	blx	r4
1000be8a:	4b43      	ldr	r3, [pc, #268]	; (1000bf98 <uart_init+0x1a0>)
1000be8c:	2204      	movs	r2, #4
1000be8e:	601a      	str	r2, [r3, #0]
1000be90:	3204      	adds	r2, #4
1000be92:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000be94:	79fb      	ldrb	r3, [r7, #7]
		index = 4;
1000be96:	2204      	movs	r2, #4
1000be98:	4690      	mov	r8, r2
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000be9a:	2b00      	cmp	r3, #0
1000be9c:	d152      	bne.n	1000bf44 <uart_init+0x14c>
		index = 4;
	} else {
		index = 2;
1000be9e:	3302      	adds	r3, #2
1000bea0:	4698      	mov	r8, r3
1000bea2:	e04f      	b.n	1000bf44 <uart_init+0x14c>
#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000bea4:	8a31      	ldrh	r1, [r6, #16]
1000bea6:	ce01      	ldmia	r6!, {r0}
1000bea8:	b2c0      	uxtb	r0, r0
1000beaa:	47c8      	blx	r9

#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
1000beac:	3401      	adds	r4, #1
1000beae:	b2e4      	uxtb	r4, r4
1000beb0:	4544      	cmp	r4, r8
1000beb2:	d3f7      	bcc.n	1000bea4 <uart_init+0xac>
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000beb4:	682b      	ldr	r3, [r5, #0]
1000beb6:	7d1a      	ldrb	r2, [r3, #20]
1000beb8:	07d2      	lsls	r2, r2, #31
1000beba:	d504      	bpl.n	1000bec6 <uart_init+0xce>
1000bebc:	2101      	movs	r1, #1
		i = module->hw->RECEIVE_DATA.reg;
1000bebe:	7c1a      	ldrb	r2, [r3, #16]
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000bec0:	7d1a      	ldrb	r2, [r3, #20]
1000bec2:	420a      	tst	r2, r1
1000bec4:	d1fb      	bne.n	1000bebe <uart_init+0xc6>
		i = module->hw->RECEIVE_DATA.reg;
	}
	
	/* reset configuration register */
	module->hw->UART_CONFIGURATION.reg = 0;
1000bec6:	2100      	movs	r1, #0
1000bec8:	2220      	movs	r2, #32
1000beca:	5499      	strb	r1, [r3, r2]

	/* program the uart configuration. */
	if(config->flow_control) {
1000becc:	79fb      	ldrb	r3, [r7, #7]
		config_temp |= UART_CONFIGURATION_CTS_ENABLE_1;
1000bece:	1e59      	subs	r1, r3, #1
1000bed0:	418b      	sbcs	r3, r1
1000bed2:	0159      	lsls	r1, r3, #5
	}
	config_temp |= config->data_bits;
	config_temp |= config->stop_bits;
1000bed4:	793b      	ldrb	r3, [r7, #4]
1000bed6:	797a      	ldrb	r2, [r7, #5]
1000bed8:	4313      	orrs	r3, r2
1000beda:	430b      	orrs	r3, r1
	switch(config->parity) {
1000bedc:	79ba      	ldrb	r2, [r7, #6]
1000bede:	2a02      	cmp	r2, #2
1000bee0:	d00d      	beq.n	1000befe <uart_init+0x106>
1000bee2:	b2d1      	uxtb	r1, r2
1000bee4:	2902      	cmp	r1, #2
1000bee6:	d802      	bhi.n	1000beee <uart_init+0xf6>
1000bee8:	2a01      	cmp	r2, #1
1000beea:	d005      	beq.n	1000bef8 <uart_init+0x100>
1000beec:	e00f      	b.n	1000bf0e <uart_init+0x116>
1000beee:	2a03      	cmp	r2, #3
1000bef0:	d008      	beq.n	1000bf04 <uart_init+0x10c>
1000bef2:	2a04      	cmp	r2, #4
1000bef4:	d009      	beq.n	1000bf0a <uart_init+0x112>
1000bef6:	e00a      	b.n	1000bf0e <uart_init+0x116>
		case UART_NO_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_0;
			break;

		case UART_EVEN_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
1000bef8:	2202      	movs	r2, #2
1000befa:	4313      	orrs	r3, r2
			config_temp |= UART_CONFIGURATION_PARITY_MODE_0;
			break;
1000befc:	e007      	b.n	1000bf0e <uart_init+0x116>

		case UART_ODD_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_1;
1000befe:	2206      	movs	r2, #6
1000bf00:	4313      	orrs	r3, r2
			break;
1000bf02:	e004      	b.n	1000bf0e <uart_init+0x116>

		case UART_SPACE_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_2;
1000bf04:	220a      	movs	r2, #10
1000bf06:	4313      	orrs	r3, r2
			break;
1000bf08:	e001      	b.n	1000bf0e <uart_init+0x116>

		case UART_MARK_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_3;
1000bf0a:	220e      	movs	r2, #14
1000bf0c:	4313      	orrs	r3, r2
			break;

		default:
			break;
	}	
	module->hw->UART_CONFIGURATION.reg = config_temp;
1000bf0e:	2220      	movs	r2, #32
1000bf10:	6829      	ldr	r1, [r5, #0]
1000bf12:	548b      	strb	r3, [r1, r2]

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);
1000bf14:	683e      	ldr	r6, [r7, #0]
	uint16_t integerpart = 0;
	uint8_t fractionalpart = 0;
	uint32_t diff;
	uint8_t i = 0;

	clock = system_clock_get_value();
1000bf16:	4b24      	ldr	r3, [pc, #144]	; (1000bfa8 <uart_init+0x1b0>)
1000bf18:	4798      	blx	r3
1000bf1a:	0004      	movs	r4, r0
	integerpart = clock / baud_rate;
1000bf1c:	0031      	movs	r1, r6
1000bf1e:	4b23      	ldr	r3, [pc, #140]	; (1000bfac <uart_init+0x1b4>)
1000bf20:	4798      	blx	r3
1000bf22:	b282      	uxth	r2, r0
	diff = clock - (baud_rate * integerpart);
1000bf24:	0400      	lsls	r0, r0, #16
1000bf26:	0c00      	lsrs	r0, r0, #16
1000bf28:	4370      	muls	r0, r6
1000bf2a:	1a20      	subs	r0, r4, r0
	i = 0;
	while(diff > (baud_rate / 16)) {
1000bf2c:	0931      	lsrs	r1, r6, #4
1000bf2e:	4288      	cmp	r0, r1
1000bf30:	d906      	bls.n	1000bf40 <uart_init+0x148>
1000bf32:	2300      	movs	r3, #0
		i++;
1000bf34:	3301      	adds	r3, #1
1000bf36:	b2db      	uxtb	r3, r3
		diff -= (baud_rate / 16);
1000bf38:	1a40      	subs	r0, r0, r1

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
	while(diff > (baud_rate / 16)) {
1000bf3a:	4288      	cmp	r0, r1
1000bf3c:	d8fa      	bhi.n	1000bf34 <uart_init+0x13c>
1000bf3e:	e007      	b.n	1000bf50 <uart_init+0x158>
	uint8_t i = 0;

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
1000bf40:	2300      	movs	r3, #0
1000bf42:	e005      	b.n	1000bf50 <uart_init+0x158>
1000bf44:	003e      	movs	r6, r7
1000bf46:	3608      	adds	r6, #8
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000bf48:	2400      	movs	r4, #0
#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000bf4a:	4b19      	ldr	r3, [pc, #100]	; (1000bfb0 <uart_init+0x1b8>)
1000bf4c:	4699      	mov	r9, r3
1000bf4e:	e7a9      	b.n	1000bea4 <uart_init+0xac>
		i++;
		diff -= (baud_rate / 16);
	}
	fractionalpart = (i + 1) / 2;

	module->hw->UART_CLOCK_SOURCE.reg = UART_CLOCK_SOURCE_CLOCK_SELECT_0;
1000bf50:	2100      	movs	r1, #0
1000bf52:	2028      	movs	r0, #40	; 0x28
1000bf54:	682c      	ldr	r4, [r5, #0]
1000bf56:	5421      	strb	r1, [r4, r0]
	module->hw->UART_BAUD_RATE.reg =
1000bf58:	3301      	adds	r3, #1
1000bf5a:	071b      	lsls	r3, r3, #28
1000bf5c:	0f5b      	lsrs	r3, r3, #29
1000bf5e:	00d2      	lsls	r2, r2, #3
1000bf60:	4313      	orrs	r3, r2
1000bf62:	b29b      	uxth	r3, r3
1000bf64:	682a      	ldr	r2, [r5, #0]
1000bf66:	8493      	strh	r3, [r2, #36]	; 0x24
	module->hw->UART_CONFIGURATION.reg = config_temp;

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);

	module->hw->RX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at read time
1000bf68:	682b      	ldr	r3, [r5, #0]
1000bf6a:	7619      	strb	r1, [r3, #24]
	module->hw->TX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at write time
1000bf6c:	682b      	ldr	r3, [r5, #0]
1000bf6e:	7219      	strb	r1, [r3, #8]
	
	return STATUS_OK;
}
1000bf70:	2000      	movs	r0, #0
1000bf72:	bc0c      	pop	{r2, r3}
1000bf74:	4690      	mov	r8, r2
1000bf76:	4699      	mov	r9, r3
1000bf78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000bf7a:	46c0      	nop			; (mov r8, r8)
1000bf7c:	40004000 	.word	0x40004000
1000bf80:	1000b72d 	.word	0x1000b72d
1000bf84:	1000b065 	.word	0x1000b065
1000bf88:	1001a37c 	.word	0x1001a37c
1000bf8c:	1000bba5 	.word	0x1000bba5
1000bf90:	1000bb95 	.word	0x1000bb95
1000bf94:	1000bc2d 	.word	0x1000bc2d
1000bf98:	e000e100 	.word	0xe000e100
1000bf9c:	40005000 	.word	0x40005000
1000bfa0:	1000bcb9 	.word	0x1000bcb9
1000bfa4:	1000bd41 	.word	0x1000bd41
1000bfa8:	1000b059 	.word	0x1000b059
1000bfac:	10012a55 	.word	0x10012a55
1000bfb0:	1000acb5 	.word	0x1000acb5

1000bfb4 <uart_write_wait>:
* \retval STATUS_OK         If the operation was completed
*/
enum status_code uart_write_wait(struct uart_module *const module,
		const uint8_t tx_data)
{
	while (!(module->hw->TRANSMIT_STATUS.reg & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL));
1000bfb4:	6802      	ldr	r2, [r0, #0]
1000bfb6:	2001      	movs	r0, #1
1000bfb8:	7913      	ldrb	r3, [r2, #4]
1000bfba:	4203      	tst	r3, r0
1000bfbc:	d0fc      	beq.n	1000bfb8 <uart_write_wait+0x4>

	module->hw->TRANSMIT_DATA.reg = tx_data;
1000bfbe:	7011      	strb	r1, [r2, #0]
	
	return STATUS_OK;
}
1000bfc0:	2000      	movs	r0, #0
1000bfc2:	4770      	bx	lr

1000bfc4 <uart_read_wait>:
* \retval STATUS_OK                If the operation was completed
*/
enum status_code uart_read_wait(struct uart_module *const module,
		uint8_t *const rx_data)
{
	while (!(module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY));
1000bfc4:	6802      	ldr	r2, [r0, #0]
1000bfc6:	2001      	movs	r0, #1
1000bfc8:	7d13      	ldrb	r3, [r2, #20]
1000bfca:	4203      	tst	r3, r0
1000bfcc:	d0fc      	beq.n	1000bfc8 <uart_read_wait+0x4>

	*rx_data = module->hw->RECEIVE_DATA.reg;
1000bfce:	7c13      	ldrb	r3, [r2, #16]
1000bfd0:	700b      	strb	r3, [r1, #0]
	
	return STATUS_OK;
}
1000bfd2:	2000      	movs	r0, #0
1000bfd4:	4770      	bx	lr
1000bfd6:	46c0      	nop			; (mov r8, r8)

1000bfd8 <uart_read_buffer_job>:
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
1000bfd8:	2317      	movs	r3, #23
{
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
1000bfda:	2a00      	cmp	r2, #0
1000bfdc:	d00d      	beq.n	1000bffa <uart_read_buffer_job+0x22>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check if the UART is busy transmitting or slave waiting for TXC*/
	if (module->status == STATUS_BUSY) {
1000bfde:	330b      	adds	r3, #11
1000bfe0:	5cc3      	ldrb	r3, [r0, r3]
1000bfe2:	b2db      	uxtb	r3, r3
1000bfe4:	2b05      	cmp	r3, #5
1000bfe6:	d008      	beq.n	1000bffa <uart_read_buffer_job+0x22>
	Assert(module);
	Assert(rx_data);

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
1000bfe8:	8382      	strh	r2, [r0, #28]
	module->rx_buffer_ptr = rx_data;
1000bfea:	6141      	str	r1, [r0, #20]
	module->status = STATUS_BUSY;
1000bfec:	2205      	movs	r2, #5
1000bfee:	2322      	movs	r3, #34	; 0x22
1000bff0:	54c2      	strb	r2, [r0, r3]

	module->hw->RX_INTERRUPT_MASK.reg = UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK;
1000bff2:	6803      	ldr	r3, [r0, #0]
1000bff4:	3a04      	subs	r2, #4
1000bff6:	761a      	strb	r2, [r3, #24]
		return STATUS_BUSY;
	}

	/* Issue internal read */
	_uart_read_buffer(module, rx_data, length);
	return STATUS_OK;
1000bff8:	2300      	movs	r3, #0
}
1000bffa:	0018      	movs	r0, r3
1000bffc:	4770      	bx	lr
1000bffe:	46c0      	nop			; (mov r8, r8)

1000c000 <uart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
1000c000:	0093      	lsls	r3, r2, #2
1000c002:	18c3      	adds	r3, r0, r3
1000c004:	6059      	str	r1, [r3, #4]
	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
1000c006:	2120      	movs	r1, #32
1000c008:	2301      	movs	r3, #1
1000c00a:	4093      	lsls	r3, r2
1000c00c:	5c42      	ldrb	r2, [r0, r1]
1000c00e:	4313      	orrs	r3, r2
1000c010:	5443      	strb	r3, [r0, r1]
}
1000c012:	4770      	bx	lr

1000c014 <uart_enable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_enable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000c014:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
1000c016:	2221      	movs	r2, #33	; 0x21
1000c018:	2301      	movs	r3, #1
1000c01a:	408b      	lsls	r3, r1
1000c01c:	5c84      	ldrb	r4, [r0, r2]
1000c01e:	4323      	orrs	r3, r4
1000c020:	5483      	strb	r3, [r0, r2]

	if (callback_type == UART_CTS_ACTIVE) {
1000c022:	2901      	cmp	r1, #1
1000c024:	d104      	bne.n	1000c030 <uart_enable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg |= UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000c026:	6802      	ldr	r2, [r0, #0]
1000c028:	7a11      	ldrb	r1, [r2, #8]
1000c02a:	2320      	movs	r3, #32
1000c02c:	430b      	orrs	r3, r1
1000c02e:	7213      	strb	r3, [r2, #8]
	}
}
1000c030:	bd10      	pop	{r4, pc}
1000c032:	46c0      	nop			; (mov r8, r8)

1000c034 <uart_disable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_disable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000c034:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
1000c036:	2201      	movs	r2, #1
1000c038:	408a      	lsls	r2, r1
1000c03a:	2421      	movs	r4, #33	; 0x21
1000c03c:	5d03      	ldrb	r3, [r0, r4]
1000c03e:	4393      	bics	r3, r2
1000c040:	5503      	strb	r3, [r0, r4]

	if (callback_type == UART_CTS_ACTIVE) {
1000c042:	2901      	cmp	r1, #1
1000c044:	d104      	bne.n	1000c050 <uart_disable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg &= ~UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000c046:	6802      	ldr	r2, [r0, #0]
1000c048:	7a13      	ldrb	r3, [r2, #8]
1000c04a:	311f      	adds	r1, #31
1000c04c:	438b      	bics	r3, r1
1000c04e:	7213      	strb	r3, [r2, #8]
	}

}
1000c050:	bd10      	pop	{r4, pc}
1000c052:	46c0      	nop			; (mov r8, r8)

1000c054 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
1000c054:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c056:	4647      	mov	r7, r8
1000c058:	b480      	push	{r7}
1000c05a:	000c      	movs	r4, r1
1000c05c:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
1000c05e:	2800      	cmp	r0, #0
1000c060:	d10d      	bne.n	1000c07e <_read+0x2a>
		return -1;
	}

	for (; len > 0; --len) {
1000c062:	2a00      	cmp	r2, #0
1000c064:	dd0e      	ble.n	1000c084 <_read+0x30>
1000c066:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
1000c068:	4e08      	ldr	r6, [pc, #32]	; (1000c08c <_read+0x38>)
1000c06a:	4d09      	ldr	r5, [pc, #36]	; (1000c090 <_read+0x3c>)
1000c06c:	6830      	ldr	r0, [r6, #0]
1000c06e:	0021      	movs	r1, r4
1000c070:	682b      	ldr	r3, [r5, #0]
1000c072:	4798      	blx	r3
		ptr++;
1000c074:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
1000c076:	42a7      	cmp	r7, r4
1000c078:	d1f8      	bne.n	1000c06c <_read+0x18>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
1000c07a:	4640      	mov	r0, r8
1000c07c:	e003      	b.n	1000c086 <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
1000c07e:	2001      	movs	r0, #1
1000c080:	4240      	negs	r0, r0
1000c082:	e000      	b.n	1000c086 <_read+0x32>
	}

	for (; len > 0; --len) {
1000c084:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
1000c086:	bc04      	pop	{r2}
1000c088:	4690      	mov	r8, r2
1000c08a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c08c:	1001a38c 	.word	0x1001a38c
1000c090:	1001a384 	.word	0x1001a384

1000c094 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
1000c094:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c096:	4647      	mov	r7, r8
1000c098:	b480      	push	{r7}
1000c09a:	000e      	movs	r6, r1
1000c09c:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
1000c09e:	3801      	subs	r0, #1
1000c0a0:	2802      	cmp	r0, #2
1000c0a2:	d811      	bhi.n	1000c0c8 <_write+0x34>
		return -1;
	}

	for (; len != 0; --len) {
1000c0a4:	2a00      	cmp	r2, #0
1000c0a6:	d012      	beq.n	1000c0ce <_write+0x3a>
1000c0a8:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
1000c0aa:	4b0c      	ldr	r3, [pc, #48]	; (1000c0dc <_write+0x48>)
1000c0ac:	4698      	mov	r8, r3
1000c0ae:	4f0c      	ldr	r7, [pc, #48]	; (1000c0e0 <_write+0x4c>)
1000c0b0:	4643      	mov	r3, r8
1000c0b2:	6818      	ldr	r0, [r3, #0]
1000c0b4:	5d31      	ldrb	r1, [r6, r4]
1000c0b6:	683b      	ldr	r3, [r7, #0]
1000c0b8:	4798      	blx	r3
1000c0ba:	2800      	cmp	r0, #0
1000c0bc:	db09      	blt.n	1000c0d2 <_write+0x3e>
			return -1;
		}
		++nChars;
1000c0be:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
1000c0c0:	42a5      	cmp	r5, r4
1000c0c2:	d1f5      	bne.n	1000c0b0 <_write+0x1c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
1000c0c4:	0020      	movs	r0, r4
1000c0c6:	e006      	b.n	1000c0d6 <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
1000c0c8:	2001      	movs	r0, #1
1000c0ca:	4240      	negs	r0, r0
1000c0cc:	e003      	b.n	1000c0d6 <_write+0x42>
	}

	for (; len != 0; --len) {
1000c0ce:	2000      	movs	r0, #0
1000c0d0:	e001      	b.n	1000c0d6 <_write+0x42>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
1000c0d2:	2001      	movs	r0, #1
1000c0d4:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
1000c0d6:	bc04      	pop	{r2}
1000c0d8:	4690      	mov	r8, r2
1000c0da:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c0dc:	1001a38c 	.word	0x1001a38c
1000c0e0:	1001a388 	.word	0x1001a388

1000c0e4 <ble_undefined_event_handler>:
	}
	return status;
}

at_ble_status_t ble_undefined_event_handler(void *params)
{
1000c0e4:	b510      	push	{r4, lr}
	DBG_LOG_DEV("Undefined Event Received");
1000c0e6:	4804      	ldr	r0, [pc, #16]	; (1000c0f8 <ble_undefined_event_handler+0x14>)
1000c0e8:	4b04      	ldr	r3, [pc, #16]	; (1000c0fc <ble_undefined_event_handler+0x18>)
1000c0ea:	4798      	blx	r3
1000c0ec:	4804      	ldr	r0, [pc, #16]	; (1000c100 <ble_undefined_event_handler+0x1c>)
1000c0ee:	4b05      	ldr	r3, [pc, #20]	; (1000c104 <ble_undefined_event_handler+0x20>)
1000c0f0:	4798      	blx	r3
    ALL_UNUSED(params);
	return AT_BLE_SUCCESS;
}
1000c0f2:	2000      	movs	r0, #0
1000c0f4:	bd10      	pop	{r4, pc}
1000c0f6:	46c0      	nop			; (mov r8, r8)
1000c0f8:	10016a10 	.word	0x10016a10
1000c0fc:	100159e9 	.word	0x100159e9
1000c100:	100177dc 	.word	0x100177dc
1000c104:	100158c9 	.word	0x100158c9

1000c108 <ble_scan_report_handler>:
	}
}

/** @brief function handles scan report */
at_ble_status_t ble_scan_report_handler(void *params)
{
1000c108:	b510      	push	{r4, lr}
	at_ble_scan_report_t *scan_report;
	scan_report = (at_ble_scan_report_t *)params;
	if (scan_report->status == AT_BLE_SUCCESS)
1000c10a:	7800      	ldrb	r0, [r0, #0]
1000c10c:	2800      	cmp	r0, #0
1000c10e:	d006      	beq.n	1000c11e <ble_scan_report_handler+0x16>
		/* All scan data should be handled */
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Scanning  failed");
1000c110:	4803      	ldr	r0, [pc, #12]	; (1000c120 <ble_scan_report_handler+0x18>)
1000c112:	4b04      	ldr	r3, [pc, #16]	; (1000c124 <ble_scan_report_handler+0x1c>)
1000c114:	4798      	blx	r3
1000c116:	4804      	ldr	r0, [pc, #16]	; (1000c128 <ble_scan_report_handler+0x20>)
1000c118:	4b04      	ldr	r3, [pc, #16]	; (1000c12c <ble_scan_report_handler+0x24>)
1000c11a:	4798      	blx	r3
	}
	return AT_BLE_FAILURE;
1000c11c:	20e2      	movs	r0, #226	; 0xe2
}
1000c11e:	bd10      	pop	{r4, pc}
1000c120:	10016a10 	.word	0x10016a10
1000c124:	100159e9 	.word	0x100159e9
1000c128:	100177f8 	.word	0x100177f8
1000c12c:	100158c9 	.word	0x100158c9

1000c130 <ble_adv_report_handler>:

/** @brief function handles advertising report */
at_ble_status_t ble_adv_report_handler(void *params)
{
1000c130:	b510      	push	{r4, lr}
    at_ble_adv_report_t *adv_report;
    adv_report = (at_ble_adv_report_t *)params;
    if(adv_report->status == AT_BLE_SUCCESS)
1000c132:	7800      	ldrb	r0, [r0, #0]
1000c134:	2800      	cmp	r0, #0
1000c136:	d006      	beq.n	1000c146 <ble_adv_report_handler+0x16>
    {
        return AT_BLE_SUCCESS;
    }
    else 
    {
        DBG_LOG("Advertising failed");
1000c138:	4803      	ldr	r0, [pc, #12]	; (1000c148 <ble_adv_report_handler+0x18>)
1000c13a:	4b04      	ldr	r3, [pc, #16]	; (1000c14c <ble_adv_report_handler+0x1c>)
1000c13c:	4798      	blx	r3
1000c13e:	4804      	ldr	r0, [pc, #16]	; (1000c150 <ble_adv_report_handler+0x20>)
1000c140:	4b04      	ldr	r3, [pc, #16]	; (1000c154 <ble_adv_report_handler+0x24>)
1000c142:	4798      	blx	r3
    }
    return AT_BLE_FAILURE;
1000c144:	20e2      	movs	r0, #226	; 0xe2
}
1000c146:	bd10      	pop	{r4, pc}
1000c148:	10016a10 	.word	0x10016a10
1000c14c:	100159e9 	.word	0x100159e9
1000c150:	1001780c 	.word	0x1001780c
1000c154:	100158c9 	.word	0x100158c9

1000c158 <ble_mtu_changed_indication_handler>:
	return AT_BLE_SUCCESS;
	
}

at_ble_status_t ble_mtu_changed_indication_handler(void *params)
{
1000c158:	b510      	push	{r4, lr}
1000c15a:	0004      	movs	r4, r0
	at_ble_mtu_changed_ind_t *mtu_changed_ind;
	mtu_changed_ind = (at_ble_mtu_changed_ind_t *)params;
	DBG_LOG_DEV("BLE-MTU Changed, Connection Handle: %d, New Value: %d", 
1000c15c:	4804      	ldr	r0, [pc, #16]	; (1000c170 <ble_mtu_changed_indication_handler+0x18>)
1000c15e:	4b05      	ldr	r3, [pc, #20]	; (1000c174 <ble_mtu_changed_indication_handler+0x1c>)
1000c160:	4798      	blx	r3
1000c162:	8862      	ldrh	r2, [r4, #2]
1000c164:	8821      	ldrh	r1, [r4, #0]
1000c166:	4804      	ldr	r0, [pc, #16]	; (1000c178 <ble_mtu_changed_indication_handler+0x20>)
1000c168:	4b04      	ldr	r3, [pc, #16]	; (1000c17c <ble_mtu_changed_indication_handler+0x24>)
1000c16a:	4798      	blx	r3
										mtu_changed_ind->conhdl, 
										mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
}
1000c16c:	2000      	movs	r0, #0
1000c16e:	bd10      	pop	{r4, pc}
1000c170:	10016a10 	.word	0x10016a10
1000c174:	100159e9 	.word	0x100159e9
1000c178:	10017820 	.word	0x10017820
1000c17c:	100158c9 	.word	0x100158c9

1000c180 <ble_mtu_changed_cmd_complete_handler>:

at_ble_status_t ble_mtu_changed_cmd_complete_handler(void *params)
{
1000c180:	b570      	push	{r4, r5, r6, lr}
1000c182:	0004      	movs	r4, r0
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
1000c184:	78c5      	ldrb	r5, [r0, #3]
1000c186:	2d00      	cmp	r5, #0
1000c188:	d108      	bne.n	1000c19c <ble_mtu_changed_cmd_complete_handler+0x1c>
	{
		DBG_LOG_DEV("MTU Changed, Connection Handle:%d, Operation:%d", 
1000c18a:	480a      	ldr	r0, [pc, #40]	; (1000c1b4 <ble_mtu_changed_cmd_complete_handler+0x34>)
1000c18c:	4b0a      	ldr	r3, [pc, #40]	; (1000c1b8 <ble_mtu_changed_cmd_complete_handler+0x38>)
1000c18e:	4798      	blx	r3
1000c190:	78a2      	ldrb	r2, [r4, #2]
1000c192:	8821      	ldrh	r1, [r4, #0]
1000c194:	4809      	ldr	r0, [pc, #36]	; (1000c1bc <ble_mtu_changed_cmd_complete_handler+0x3c>)
1000c196:	4b0a      	ldr	r3, [pc, #40]	; (1000c1c0 <ble_mtu_changed_cmd_complete_handler+0x40>)
1000c198:	4798      	blx	r3
		cmd_complete_event->conn_handle, 
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
1000c19a:	e008      	b.n	1000c1ae <ble_mtu_changed_cmd_complete_handler+0x2e>
	}
	else
	{
		DBG_LOG("MTU Change Failed, Connection Handle:%d, Operation:%d",
1000c19c:	4805      	ldr	r0, [pc, #20]	; (1000c1b4 <ble_mtu_changed_cmd_complete_handler+0x34>)
1000c19e:	4b06      	ldr	r3, [pc, #24]	; (1000c1b8 <ble_mtu_changed_cmd_complete_handler+0x38>)
1000c1a0:	4798      	blx	r3
1000c1a2:	78a2      	ldrb	r2, [r4, #2]
1000c1a4:	8821      	ldrh	r1, [r4, #0]
1000c1a6:	4807      	ldr	r0, [pc, #28]	; (1000c1c4 <ble_mtu_changed_cmd_complete_handler+0x44>)
1000c1a8:	4b05      	ldr	r3, [pc, #20]	; (1000c1c0 <ble_mtu_changed_cmd_complete_handler+0x40>)
1000c1aa:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
1000c1ac:	25e2      	movs	r5, #226	; 0xe2
}
1000c1ae:	0028      	movs	r0, r5
1000c1b0:	bd70      	pop	{r4, r5, r6, pc}
1000c1b2:	46c0      	nop			; (mov r8, r8)
1000c1b4:	10016a10 	.word	0x10016a10
1000c1b8:	100159e9 	.word	0x100159e9
1000c1bc:	10017858 	.word	0x10017858
1000c1c0:	100158c9 	.word	0x100158c9
1000c1c4:	10017888 	.word	0x10017888

1000c1c8 <ble_characteristic_write_cmd_complete_handler>:

at_ble_status_t ble_characteristic_write_cmd_complete_handler(void *params)
{
1000c1c8:	b570      	push	{r4, r5, r6, lr}
1000c1ca:	0004      	movs	r4, r0
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
1000c1cc:	78c5      	ldrb	r5, [r0, #3]
1000c1ce:	2d00      	cmp	r5, #0
1000c1d0:	d108      	bne.n	1000c1e4 <ble_characteristic_write_cmd_complete_handler+0x1c>
	{
		DBG_LOG_DEV("Char Write Cmd Complete, Connection Handle:%d, Operation:%d",
1000c1d2:	480a      	ldr	r0, [pc, #40]	; (1000c1fc <ble_characteristic_write_cmd_complete_handler+0x34>)
1000c1d4:	4b0a      	ldr	r3, [pc, #40]	; (1000c200 <ble_characteristic_write_cmd_complete_handler+0x38>)
1000c1d6:	4798      	blx	r3
1000c1d8:	78a2      	ldrb	r2, [r4, #2]
1000c1da:	8821      	ldrh	r1, [r4, #0]
1000c1dc:	4809      	ldr	r0, [pc, #36]	; (1000c204 <ble_characteristic_write_cmd_complete_handler+0x3c>)
1000c1de:	4b0a      	ldr	r3, [pc, #40]	; (1000c208 <ble_characteristic_write_cmd_complete_handler+0x40>)
1000c1e0:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
1000c1e2:	e008      	b.n	1000c1f6 <ble_characteristic_write_cmd_complete_handler+0x2e>
	}
	else
	{
		DBG_LOG_DEV("Char Write Cmd Failed, Connection Handle:%d, Operation:%d",
1000c1e4:	4805      	ldr	r0, [pc, #20]	; (1000c1fc <ble_characteristic_write_cmd_complete_handler+0x34>)
1000c1e6:	4b06      	ldr	r3, [pc, #24]	; (1000c200 <ble_characteristic_write_cmd_complete_handler+0x38>)
1000c1e8:	4798      	blx	r3
1000c1ea:	78a2      	ldrb	r2, [r4, #2]
1000c1ec:	8821      	ldrh	r1, [r4, #0]
1000c1ee:	4807      	ldr	r0, [pc, #28]	; (1000c20c <ble_characteristic_write_cmd_complete_handler+0x44>)
1000c1f0:	4b05      	ldr	r3, [pc, #20]	; (1000c208 <ble_characteristic_write_cmd_complete_handler+0x40>)
1000c1f2:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
1000c1f4:	25e2      	movs	r5, #226	; 0xe2
}
1000c1f6:	0028      	movs	r0, r5
1000c1f8:	bd70      	pop	{r4, r5, r6, pc}
1000c1fa:	46c0      	nop			; (mov r8, r8)
1000c1fc:	10016a10 	.word	0x10016a10
1000c200:	100159e9 	.word	0x100159e9
1000c204:	100178c0 	.word	0x100178c0
1000c208:	100158c9 	.word	0x100158c9
1000c20c:	100178fc 	.word	0x100178fc

1000c210 <ble_disconnected_state_handler>:

/** @brief function handles disconnection event received from stack */
at_ble_status_t ble_disconnected_state_handler(void *params)
{
1000c210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000c212:	0006      	movs	r6, r0
1000c214:	4c1d      	ldr	r4, [pc, #116]	; (1000c28c <ble_disconnected_state_handler+0x7c>)
1000c216:	239b      	movs	r3, #155	; 0x9b
1000c218:	009b      	lsls	r3, r3, #2
1000c21a:	18e7      	adds	r7, r4, r3
1000c21c:	0025      	movs	r5, r4
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
1000c21e:	0023      	movs	r3, r4
1000c220:	3b56      	subs	r3, #86	; 0x56
1000c222:	881a      	ldrh	r2, [r3, #0]
1000c224:	8833      	ldrh	r3, [r6, #0]
1000c226:	429a      	cmp	r2, r3
1000c228:	d122      	bne.n	1000c270 <ble_disconnected_state_handler+0x60>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
1000c22a:	7823      	ldrb	r3, [r4, #0]
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
1000c22c:	2b05      	cmp	r3, #5
1000c22e:	d001      	beq.n	1000c234 <ble_disconnected_state_handler+0x24>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
1000c230:	2b08      	cmp	r3, #8
1000c232:	d102      	bne.n	1000c23a <ble_disconnected_state_handler+0x2a>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
1000c234:	2301      	movs	r3, #1
1000c236:	702b      	strb	r3, [r5, #0]
1000c238:	e01a      	b.n	1000c270 <ble_disconnected_state_handler+0x60>
		}		
		else if(ble_dev_info[idx].conn_info.handle == disconnect->handle)
		{
			switch (ble_dev_info[idx].conn_state)
1000c23a:	2b07      	cmp	r3, #7
1000c23c:	d80f      	bhi.n	1000c25e <ble_disconnected_state_handler+0x4e>
1000c23e:	009b      	lsls	r3, r3, #2
1000c240:	4a13      	ldr	r2, [pc, #76]	; (1000c290 <ble_disconnected_state_handler+0x80>)
1000c242:	58d3      	ldr	r3, [r2, r3]
1000c244:	469f      	mov	pc, r3
				case BLE_DEVICE_PAIRING_FAILED:
				case BLE_DEVICE_ENCRYPTION_STATE:
				case BLE_DEVICE_ENCRYPTION_FAILED:
				{
					/* Device is not paired so remove the device information */
					ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000c246:	2300      	movs	r3, #0
1000c248:	7023      	strb	r3, [r4, #0]
					if (ble_device_count > 0)
1000c24a:	4b12      	ldr	r3, [pc, #72]	; (1000c294 <ble_disconnected_state_handler+0x84>)
1000c24c:	781b      	ldrb	r3, [r3, #0]
1000c24e:	2b00      	cmp	r3, #0
1000c250:	d00e      	beq.n	1000c270 <ble_disconnected_state_handler+0x60>
					{
						ble_device_count--;
1000c252:	4a10      	ldr	r2, [pc, #64]	; (1000c294 <ble_disconnected_state_handler+0x84>)
1000c254:	7813      	ldrb	r3, [r2, #0]
1000c256:	3b01      	subs	r3, #1
1000c258:	b2db      	uxtb	r3, r3
1000c25a:	7013      	strb	r3, [r2, #0]
1000c25c:	e008      	b.n	1000c270 <ble_disconnected_state_handler+0x60>
				
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
1000c25e:	480e      	ldr	r0, [pc, #56]	; (1000c298 <ble_disconnected_state_handler+0x88>)
1000c260:	4b0e      	ldr	r3, [pc, #56]	; (1000c29c <ble_disconnected_state_handler+0x8c>)
1000c262:	4798      	blx	r3
1000c264:	7829      	ldrb	r1, [r5, #0]
1000c266:	480e      	ldr	r0, [pc, #56]	; (1000c2a0 <ble_disconnected_state_handler+0x90>)
1000c268:	4b0e      	ldr	r3, [pc, #56]	; (1000c2a4 <ble_disconnected_state_handler+0x94>)
1000c26a:	4798      	blx	r3
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000c26c:	2300      	movs	r3, #0
1000c26e:	702b      	strb	r3, [r5, #0]
1000c270:	347c      	adds	r4, #124	; 0x7c
{
	at_ble_disconnected_t *disconnect;
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c272:	42bc      	cmp	r4, r7
1000c274:	d1d2      	bne.n	1000c21c <ble_disconnected_state_handler+0xc>
				break;				
			}
		} 
	}
	
	DBG_LOG("Device disconnected Reason:0x%02x Handle=0x%x", disconnect->reason, disconnect->handle);
1000c276:	4808      	ldr	r0, [pc, #32]	; (1000c298 <ble_disconnected_state_handler+0x88>)
1000c278:	4b08      	ldr	r3, [pc, #32]	; (1000c29c <ble_disconnected_state_handler+0x8c>)
1000c27a:	4798      	blx	r3
1000c27c:	8832      	ldrh	r2, [r6, #0]
1000c27e:	78b1      	ldrb	r1, [r6, #2]
1000c280:	4809      	ldr	r0, [pc, #36]	; (1000c2a8 <ble_disconnected_state_handler+0x98>)
1000c282:	4b08      	ldr	r3, [pc, #32]	; (1000c2a4 <ble_disconnected_state_handler+0x94>)
1000c284:	4798      	blx	r3
	return AT_BLE_SUCCESS;
}
1000c286:	2000      	movs	r0, #0
1000c288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000c28a:	46c0      	nop			; (mov r8, r8)
1000c28c:	1001a406 	.word	0x1001a406
1000c290:	10017678 	.word	0x10017678
1000c294:	1001a614 	.word	0x1001a614
1000c298:	10016a10 	.word	0x10016a10
1000c29c:	100159e9 	.word	0x100159e9
1000c2a0:	10017938 	.word	0x10017938
1000c2a4:	100158c9 	.word	0x100158c9
1000c2a8:	10017950 	.word	0x10017950

1000c2ac <ble_conn_param_update>:

/** @brief connection update parameter function */
at_ble_status_t ble_conn_param_update(void *params)
{
1000c2ac:	b510      	push	{r4, lr}
	at_ble_conn_param_update_done_t * conn_param_update;
	conn_param_update = (at_ble_conn_param_update_done_t *)params;
	DBG_LOG_DEV("AT_BLE_CONN_PARAM_UPDATE ");
1000c2ae:	4804      	ldr	r0, [pc, #16]	; (1000c2c0 <ble_conn_param_update+0x14>)
1000c2b0:	4b04      	ldr	r3, [pc, #16]	; (1000c2c4 <ble_conn_param_update+0x18>)
1000c2b2:	4798      	blx	r3
1000c2b4:	4804      	ldr	r0, [pc, #16]	; (1000c2c8 <ble_conn_param_update+0x1c>)
1000c2b6:	4b05      	ldr	r3, [pc, #20]	; (1000c2cc <ble_conn_param_update+0x20>)
1000c2b8:	4798      	blx	r3
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}
1000c2ba:	2000      	movs	r0, #0
1000c2bc:	bd10      	pop	{r4, pc}
1000c2be:	46c0      	nop			; (mov r8, r8)
1000c2c0:	10016a10 	.word	0x10016a10
1000c2c4:	100159e9 	.word	0x100159e9
1000c2c8:	10017980 	.word	0x10017980
1000c2cc:	100158c9 	.word	0x100158c9

1000c2d0 <ble_encryption_status_change_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption status change */
at_ble_status_t ble_encryption_status_change_handler(void *params)
{
1000c2d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000c2d2:	0006      	movs	r6, r0
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
1000c2d4:	8801      	ldrh	r1, [r0, #0]
1000c2d6:	4b28      	ldr	r3, [pc, #160]	; (1000c378 <ble_encryption_status_change_handler+0xa8>)
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c2d8:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
1000c2da:	891a      	ldrh	r2, [r3, #8]
1000c2dc:	428a      	cmp	r2, r1
1000c2de:	d104      	bne.n	1000c2ea <ble_encryption_status_change_handler+0x1a>
1000c2e0:	001a      	movs	r2, r3
1000c2e2:	325e      	adds	r2, #94	; 0x5e
1000c2e4:	7812      	ldrb	r2, [r2, #0]
1000c2e6:	2a06      	cmp	r2, #6
1000c2e8:	d02e      	beq.n	1000c348 <ble_encryption_status_change_handler+0x78>
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c2ea:	3401      	adds	r4, #1
1000c2ec:	b2e4      	uxtb	r4, r4
1000c2ee:	337c      	adds	r3, #124	; 0x7c
1000c2f0:	2c05      	cmp	r4, #5
1000c2f2:	d1f2      	bne.n	1000c2da <ble_encryption_status_change_handler+0xa>
1000c2f4:	e039      	b.n	1000c36a <ble_encryption_status_change_handler+0x9a>
			return AT_BLE_FAILURE;
		}
	}
	else
	{
		ble_dev_info[idx].bond_info.status = enc_status->status;
1000c2f6:	4920      	ldr	r1, [pc, #128]	; (1000c378 <ble_encryption_status_change_handler+0xa8>)
1000c2f8:	0163      	lsls	r3, r4, #5
1000c2fa:	1b1a      	subs	r2, r3, r4
1000c2fc:	0092      	lsls	r2, r2, #2
1000c2fe:	188a      	adds	r2, r1, r2
1000c300:	7615      	strb	r5, [r2, #24]
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
1000c302:	0014      	movs	r4, r2
1000c304:	345e      	adds	r4, #94	; 0x5e
1000c306:	2307      	movs	r3, #7
1000c308:	7023      	strb	r3, [r4, #0]
		DBG_LOG("Encryption failed");
1000c30a:	481c      	ldr	r0, [pc, #112]	; (1000c37c <ble_encryption_status_change_handler+0xac>)
1000c30c:	4b1c      	ldr	r3, [pc, #112]	; (1000c380 <ble_encryption_status_change_handler+0xb0>)
1000c30e:	4798      	blx	r3
1000c310:	481c      	ldr	r0, [pc, #112]	; (1000c384 <ble_encryption_status_change_handler+0xb4>)
1000c312:	4b1d      	ldr	r3, [pc, #116]	; (1000c388 <ble_encryption_status_change_handler+0xb8>)
1000c314:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000c316:	25e2      	movs	r5, #226	; 0xe2
1000c318:	e02b      	b.n	1000c372 <ble_encryption_status_change_handler+0xa2>
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Encryption completed successfully");
1000c31a:	4818      	ldr	r0, [pc, #96]	; (1000c37c <ble_encryption_status_change_handler+0xac>)
1000c31c:	4b18      	ldr	r3, [pc, #96]	; (1000c380 <ble_encryption_status_change_handler+0xb0>)
1000c31e:	4798      	blx	r3
1000c320:	481a      	ldr	r0, [pc, #104]	; (1000c38c <ble_encryption_status_change_handler+0xbc>)
1000c322:	4b19      	ldr	r3, [pc, #100]	; (1000c388 <ble_encryption_status_change_handler+0xb8>)
1000c324:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_COMPLETED;
1000c326:	4914      	ldr	r1, [pc, #80]	; (1000c378 <ble_encryption_status_change_handler+0xa8>)
1000c328:	0163      	lsls	r3, r4, #5
1000c32a:	1b1a      	subs	r2, r3, r4
1000c32c:	0092      	lsls	r2, r2, #2
1000c32e:	188a      	adds	r2, r1, r2
1000c330:	0010      	movs	r0, r2
1000c332:	305e      	adds	r0, #94	; 0x5e
1000c334:	2708      	movs	r7, #8
1000c336:	7007      	strb	r7, [r0, #0]
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
1000c338:	78f0      	ldrb	r0, [r6, #3]
1000c33a:	7510      	strb	r0, [r2, #20]
			ble_dev_info[idx].bond_info.status = enc_status->status;
1000c33c:	78b2      	ldrb	r2, [r6, #2]
1000c33e:	1b1c      	subs	r4, r3, r4
1000c340:	00a4      	lsls	r4, r4, #2
1000c342:	190c      	adds	r4, r1, r4
1000c344:	7622      	strb	r2, [r4, #24]
		ble_dev_info[idx].bond_info.status = enc_status->status;
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
1000c346:	e014      	b.n	1000c372 <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
1000c348:	78b5      	ldrb	r5, [r6, #2]
1000c34a:	2d00      	cmp	r5, #0
1000c34c:	d0e5      	beq.n	1000c31a <ble_encryption_status_change_handler+0x4a>
1000c34e:	e7d2      	b.n	1000c2f6 <ble_encryption_status_change_handler+0x26>
	{
		DBG_LOG("Encryption completed successfully");
1000c350:	4e0a      	ldr	r6, [pc, #40]	; (1000c37c <ble_encryption_status_change_handler+0xac>)
1000c352:	0030      	movs	r0, r6
1000c354:	4d0a      	ldr	r5, [pc, #40]	; (1000c380 <ble_encryption_status_change_handler+0xb0>)
1000c356:	47a8      	blx	r5
1000c358:	480c      	ldr	r0, [pc, #48]	; (1000c38c <ble_encryption_status_change_handler+0xbc>)
1000c35a:	4c0b      	ldr	r4, [pc, #44]	; (1000c388 <ble_encryption_status_change_handler+0xb8>)
1000c35c:	47a0      	blx	r4
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
			ble_dev_info[idx].bond_info.status = enc_status->status;
		}
		else
		{
			DBG_LOG("BLE Device not found encryption info");
1000c35e:	0030      	movs	r0, r6
1000c360:	47a8      	blx	r5
1000c362:	480b      	ldr	r0, [pc, #44]	; (1000c390 <ble_encryption_status_change_handler+0xc0>)
1000c364:	47a0      	blx	r4
			return AT_BLE_FAILURE;
1000c366:	25e2      	movs	r5, #226	; 0xe2
1000c368:	e003      	b.n	1000c372 <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
1000c36a:	78b5      	ldrb	r5, [r6, #2]
1000c36c:	2d00      	cmp	r5, #0
1000c36e:	d1c2      	bne.n	1000c2f6 <ble_encryption_status_change_handler+0x26>
1000c370:	e7ee      	b.n	1000c350 <ble_encryption_status_change_handler+0x80>
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
}
1000c372:	0028      	movs	r0, r5
1000c374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000c376:	46c0      	nop			; (mov r8, r8)
1000c378:	1001a3a8 	.word	0x1001a3a8
1000c37c:	10016a10 	.word	0x10016a10
1000c380:	100159e9 	.word	0x100159e9
1000c384:	1001799c 	.word	0x1001799c
1000c388:	100158c9 	.word	0x100158c9
1000c38c:	100179b0 	.word	0x100179b0
1000c390:	100179d4 	.word	0x100179d4

1000c394 <ble_scan_info_handler>:
	return found;
}
#endif
/** @brief function handling scaned information */
at_ble_status_t ble_scan_info_handler(void *params)
{
1000c394:	b530      	push	{r4, r5, lr}
1000c396:	b085      	sub	sp, #20
1000c398:	0004      	movs	r4, r0
	at_ble_scan_info_t *scan_param;
	scan_param = (at_ble_scan_info_t *)params;
	if(scan_response_count < MAX_SCAN_DEVICE)
1000c39a:	4b1f      	ldr	r3, [pc, #124]	; (1000c418 <ble_scan_info_handler+0x84>)
1000c39c:	781b      	ldrb	r3, [r3, #0]
1000c39e:	b2db      	uxtb	r3, r3
1000c3a0:	2b13      	cmp	r3, #19
1000c3a2:	d824      	bhi.n	1000c3ee <ble_scan_info_handler+0x5a>
	{
		memcpy((uint8_t *)&scan_info[scan_response_count], scan_param, sizeof(at_ble_scan_info_t));
1000c3a4:	4d1c      	ldr	r5, [pc, #112]	; (1000c418 <ble_scan_info_handler+0x84>)
1000c3a6:	782b      	ldrb	r3, [r5, #0]
1000c3a8:	b2db      	uxtb	r3, r3
1000c3aa:	0098      	lsls	r0, r3, #2
1000c3ac:	18c0      	adds	r0, r0, r3
1000c3ae:	00c0      	lsls	r0, r0, #3
1000c3b0:	18c3      	adds	r3, r0, r3
1000c3b2:	481a      	ldr	r0, [pc, #104]	; (1000c41c <ble_scan_info_handler+0x88>)
1000c3b4:	1818      	adds	r0, r3, r0
1000c3b6:	2229      	movs	r2, #41	; 0x29
1000c3b8:	0021      	movs	r1, r4
1000c3ba:	4b19      	ldr	r3, [pc, #100]	; (1000c420 <ble_scan_info_handler+0x8c>)
1000c3bc:	4798      	blx	r3
		DBG_LOG_DEV("Info:Device found address [%d]  0x%02X%02X%02X%02X%02X%02X ",
1000c3be:	4819      	ldr	r0, [pc, #100]	; (1000c424 <ble_scan_info_handler+0x90>)
1000c3c0:	4b19      	ldr	r3, [pc, #100]	; (1000c428 <ble_scan_info_handler+0x94>)
1000c3c2:	4798      	blx	r3
1000c3c4:	7829      	ldrb	r1, [r5, #0]
1000c3c6:	b2c9      	uxtb	r1, r1
1000c3c8:	79a3      	ldrb	r3, [r4, #6]
1000c3ca:	79e2      	ldrb	r2, [r4, #7]
1000c3cc:	78a0      	ldrb	r0, [r4, #2]
1000c3ce:	9003      	str	r0, [sp, #12]
1000c3d0:	78e0      	ldrb	r0, [r4, #3]
1000c3d2:	9002      	str	r0, [sp, #8]
1000c3d4:	7920      	ldrb	r0, [r4, #4]
1000c3d6:	9001      	str	r0, [sp, #4]
1000c3d8:	7960      	ldrb	r0, [r4, #5]
1000c3da:	9000      	str	r0, [sp, #0]
1000c3dc:	4813      	ldr	r0, [pc, #76]	; (1000c42c <ble_scan_info_handler+0x98>)
1000c3de:	4c14      	ldr	r4, [pc, #80]	; (1000c430 <ble_scan_info_handler+0x9c>)
1000c3e0:	47a0      	blx	r4
		scan_param->dev_addr.addr[4],
		scan_param->dev_addr.addr[3],
		scan_param->dev_addr.addr[2],
		scan_param->dev_addr.addr[1],
		scan_param->dev_addr.addr[0]);
		scan_response_count++;
1000c3e2:	782b      	ldrb	r3, [r5, #0]
1000c3e4:	3301      	adds	r3, #1
1000c3e6:	b2db      	uxtb	r3, r3
1000c3e8:	702b      	strb	r3, [r5, #0]
		return AT_BLE_SUCCESS;
1000c3ea:	2300      	movs	r3, #0
1000c3ec:	e011      	b.n	1000c412 <ble_scan_info_handler+0x7e>
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
1000c3ee:	480d      	ldr	r0, [pc, #52]	; (1000c424 <ble_scan_info_handler+0x90>)
1000c3f0:	4b0d      	ldr	r3, [pc, #52]	; (1000c428 <ble_scan_info_handler+0x94>)
1000c3f2:	4798      	blx	r3
1000c3f4:	480f      	ldr	r0, [pc, #60]	; (1000c434 <ble_scan_info_handler+0xa0>)
1000c3f6:	4b0e      	ldr	r3, [pc, #56]	; (1000c430 <ble_scan_info_handler+0x9c>)
1000c3f8:	4798      	blx	r3
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
1000c3fa:	4b0f      	ldr	r3, [pc, #60]	; (1000c438 <ble_scan_info_handler+0xa4>)
1000c3fc:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
1000c3fe:	23e2      	movs	r3, #226	; 0xe2
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
1000c400:	2800      	cmp	r0, #0
1000c402:	d006      	beq.n	1000c412 <ble_scan_info_handler+0x7e>
		{
			DBG_LOG("Failed to stop scanning");
1000c404:	4807      	ldr	r0, [pc, #28]	; (1000c424 <ble_scan_info_handler+0x90>)
1000c406:	4b08      	ldr	r3, [pc, #32]	; (1000c428 <ble_scan_info_handler+0x94>)
1000c408:	4798      	blx	r3
1000c40a:	480c      	ldr	r0, [pc, #48]	; (1000c43c <ble_scan_info_handler+0xa8>)
1000c40c:	4b08      	ldr	r3, [pc, #32]	; (1000c430 <ble_scan_info_handler+0x9c>)
1000c40e:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
1000c410:	23e2      	movs	r3, #226	; 0xe2
	}
}
1000c412:	0018      	movs	r0, r3
1000c414:	b005      	add	sp, #20
1000c416:	bd30      	pop	{r4, r5, pc}
1000c418:	10018eb4 	.word	0x10018eb4
1000c41c:	1001a68c 	.word	0x1001a68c
1000c420:	1001576f 	.word	0x1001576f
1000c424:	10016a10 	.word	0x10016a10
1000c428:	100159e9 	.word	0x100159e9
1000c42c:	100179fc 	.word	0x100179fc
1000c430:	100158c9 	.word	0x100158c9
1000c434:	10017a38 	.word	0x10017a38
1000c438:	1000f149 	.word	0x1000f149
1000c43c:	10017a70 	.word	0x10017a70

1000c440 <ble_pair_done_handler>:
	return AT_BLE_SUCCESS;	
}

/** @brief function handles pair done event */
at_ble_status_t ble_pair_done_handler(void *params)
{
1000c440:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c442:	465f      	mov	r7, fp
1000c444:	4656      	mov	r6, sl
1000c446:	464d      	mov	r5, r9
1000c448:	4644      	mov	r4, r8
1000c44a:	b4f0      	push	{r4, r5, r6, r7}
1000c44c:	b083      	sub	sp, #12
1000c44e:	0005      	movs	r5, r0
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1000c450:	8841      	ldrh	r1, [r0, #2]
1000c452:	4b59      	ldr	r3, [pc, #356]	; (1000c5b8 <ble_pair_done_handler+0x178>)
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c454:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1000c456:	891a      	ldrh	r2, [r3, #8]
1000c458:	428a      	cmp	r2, r1
1000c45a:	d105      	bne.n	1000c468 <ble_pair_done_handler+0x28>
1000c45c:	001a      	movs	r2, r3
1000c45e:	325e      	adds	r2, #94	; 0x5e
1000c460:	7812      	ldrb	r2, [r2, #0]
1000c462:	2a03      	cmp	r2, #3
1000c464:	d100      	bne.n	1000c468 <ble_pair_done_handler+0x28>
1000c466:	e09a      	b.n	1000c59e <ble_pair_done_handler+0x15e>
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c468:	3401      	adds	r4, #1
1000c46a:	b2e4      	uxtb	r4, r4
1000c46c:	337c      	adds	r3, #124	; 0x7c
1000c46e:	2c05      	cmp	r4, #5
1000c470:	d1f1      	bne.n	1000c456 <ble_pair_done_handler+0x16>
1000c472:	e057      	b.n	1000c524 <ble_pair_done_handler+0xe4>
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
			
			DBG_LOG_DEV("LTK: ");
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
1000c474:	7821      	ldrb	r1, [r4, #0]
1000c476:	0030      	movs	r0, r6
1000c478:	47b8      	blx	r7
1000c47a:	3401      	adds	r4, #1
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
			
			DBG_LOG_DEV("LTK: ");
			for (idx = 0; idx < 16; idx++)
1000c47c:	454c      	cmp	r4, r9
1000c47e:	d1f9      	bne.n	1000c474 <ble_pair_done_handler+0x34>
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
				
			}
			DBG_LOG_DEV("CSRK: ");
1000c480:	484e      	ldr	r0, [pc, #312]	; (1000c5bc <ble_pair_done_handler+0x17c>)
1000c482:	4b4f      	ldr	r3, [pc, #316]	; (1000c5c0 <ble_pair_done_handler+0x180>)
1000c484:	4798      	blx	r3
1000c486:	484f      	ldr	r0, [pc, #316]	; (1000c5c4 <ble_pair_done_handler+0x184>)
1000c488:	4b4f      	ldr	r3, [pc, #316]	; (1000c5c8 <ble_pair_done_handler+0x188>)
1000c48a:	4798      	blx	r3
1000c48c:	002e      	movs	r6, r5
1000c48e:	3622      	adds	r6, #34	; 0x22
1000c490:	002c      	movs	r4, r5
1000c492:	3432      	adds	r4, #50	; 0x32
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_csrk.key[idx]);
1000c494:	4f4c      	ldr	r7, [pc, #304]	; (1000c5c8 <ble_pair_done_handler+0x188>)
1000c496:	7831      	ldrb	r1, [r6, #0]
1000c498:	484c      	ldr	r0, [pc, #304]	; (1000c5cc <ble_pair_done_handler+0x18c>)
1000c49a:	47b8      	blx	r7
1000c49c:	3601      	adds	r6, #1
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
				
			}
			DBG_LOG_DEV("CSRK: ");
			for (idx = 0; idx < 16; idx++)
1000c49e:	42a6      	cmp	r6, r4
1000c4a0:	d1f9      	bne.n	1000c496 <ble_pair_done_handler+0x56>
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_csrk.key[idx]);
				
			}
			DBG_LOG_DEV("IRK:");
1000c4a2:	4846      	ldr	r0, [pc, #280]	; (1000c5bc <ble_pair_done_handler+0x17c>)
1000c4a4:	4b46      	ldr	r3, [pc, #280]	; (1000c5c0 <ble_pair_done_handler+0x180>)
1000c4a6:	4798      	blx	r3
1000c4a8:	4849      	ldr	r0, [pc, #292]	; (1000c5d0 <ble_pair_done_handler+0x190>)
1000c4aa:	4b47      	ldr	r3, [pc, #284]	; (1000c5c8 <ble_pair_done_handler+0x188>)
1000c4ac:	4798      	blx	r3
1000c4ae:	3542      	adds	r5, #66	; 0x42
1000c4b0:	002f      	movs	r7, r5
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_irk.key[idx]);
1000c4b2:	4e46      	ldr	r6, [pc, #280]	; (1000c5cc <ble_pair_done_handler+0x18c>)
1000c4b4:	4d44      	ldr	r5, [pc, #272]	; (1000c5c8 <ble_pair_done_handler+0x188>)
1000c4b6:	7821      	ldrb	r1, [r4, #0]
1000c4b8:	0030      	movs	r0, r6
1000c4ba:	47a8      	blx	r5
1000c4bc:	3401      	adds	r4, #1
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_csrk.key[idx]);
				
			}
			DBG_LOG_DEV("IRK:");
			for (idx = 0; idx < 16; idx++)
1000c4be:	42bc      	cmp	r4, r7
1000c4c0:	d1f9      	bne.n	1000c4b6 <ble_pair_done_handler+0x76>
1000c4c2:	e071      	b.n	1000c5a8 <ble_pair_done_handler+0x168>
			return AT_BLE_FAILURE;
		}		
	}
	else
	{
		if(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE && ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) {
1000c4c4:	0163      	lsls	r3, r4, #5
1000c4c6:	1b1c      	subs	r4, r3, r4
1000c4c8:	00a4      	lsls	r4, r4, #2
1000c4ca:	4b3b      	ldr	r3, [pc, #236]	; (1000c5b8 <ble_pair_done_handler+0x178>)
1000c4cc:	191c      	adds	r4, r3, r4
1000c4ce:	345e      	adds	r4, #94	; 0x5e
1000c4d0:	7823      	ldrb	r3, [r4, #0]
1000c4d2:	2b01      	cmp	r3, #1
1000c4d4:	d915      	bls.n	1000c502 <ble_pair_done_handler+0xc2>
			DBG_LOG("Pairing failed...Disconnecting");
1000c4d6:	4839      	ldr	r0, [pc, #228]	; (1000c5bc <ble_pair_done_handler+0x17c>)
1000c4d8:	4b39      	ldr	r3, [pc, #228]	; (1000c5c0 <ble_pair_done_handler+0x180>)
1000c4da:	4798      	blx	r3
1000c4dc:	483d      	ldr	r0, [pc, #244]	; (1000c5d4 <ble_pair_done_handler+0x194>)
1000c4de:	4b3a      	ldr	r3, [pc, #232]	; (1000c5c8 <ble_pair_done_handler+0x188>)
1000c4e0:	4798      	blx	r3
			if(!(at_ble_disconnect(pairing_params->handle, AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS))
1000c4e2:	8868      	ldrh	r0, [r5, #2]
1000c4e4:	2113      	movs	r1, #19
1000c4e6:	4b3c      	ldr	r3, [pc, #240]	; (1000c5d8 <ble_pair_done_handler+0x198>)
1000c4e8:	4798      	blx	r3
1000c4ea:	9001      	str	r0, [sp, #4]
1000c4ec:	2800      	cmp	r0, #0
1000c4ee:	d05b      	beq.n	1000c5a8 <ble_pair_done_handler+0x168>
			{
				DBG_LOG("Disconnect Request Failed");
1000c4f0:	4832      	ldr	r0, [pc, #200]	; (1000c5bc <ble_pair_done_handler+0x17c>)
1000c4f2:	4b33      	ldr	r3, [pc, #204]	; (1000c5c0 <ble_pair_done_handler+0x180>)
1000c4f4:	4798      	blx	r3
1000c4f6:	4839      	ldr	r0, [pc, #228]	; (1000c5dc <ble_pair_done_handler+0x19c>)
1000c4f8:	4b33      	ldr	r3, [pc, #204]	; (1000c5c8 <ble_pair_done_handler+0x188>)
1000c4fa:	4798      	blx	r3
				return AT_BLE_FAILURE;
1000c4fc:	23e2      	movs	r3, #226	; 0xe2
1000c4fe:	9301      	str	r3, [sp, #4]
1000c500:	e052      	b.n	1000c5a8 <ble_pair_done_handler+0x168>
			}
		}
	}
	return AT_BLE_SUCCESS;
1000c502:	2300      	movs	r3, #0
1000c504:	9301      	str	r3, [sp, #4]
1000c506:	e04f      	b.n	1000c5a8 <ble_pair_done_handler+0x168>
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Pairing procedure completed successfully");
1000c508:	4e2c      	ldr	r6, [pc, #176]	; (1000c5bc <ble_pair_done_handler+0x17c>)
1000c50a:	0030      	movs	r0, r6
1000c50c:	4d2c      	ldr	r5, [pc, #176]	; (1000c5c0 <ble_pair_done_handler+0x180>)
1000c50e:	47a8      	blx	r5
1000c510:	4833      	ldr	r0, [pc, #204]	; (1000c5e0 <ble_pair_done_handler+0x1a0>)
1000c512:	4c2d      	ldr	r4, [pc, #180]	; (1000c5c8 <ble_pair_done_handler+0x188>)
1000c514:	47a0      	blx	r4
				
			}
		}
		else
		{
			DBG_LOG("BLE Device not found to store the pairing info");
1000c516:	0030      	movs	r0, r6
1000c518:	47a8      	blx	r5
1000c51a:	4832      	ldr	r0, [pc, #200]	; (1000c5e4 <ble_pair_done_handler+0x1a4>)
1000c51c:	47a0      	blx	r4
			return AT_BLE_FAILURE;
1000c51e:	23e2      	movs	r3, #226	; 0xe2
1000c520:	9301      	str	r3, [sp, #4]
1000c522:	e041      	b.n	1000c5a8 <ble_pair_done_handler+0x168>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
1000c524:	792b      	ldrb	r3, [r5, #4]
1000c526:	2b00      	cmp	r3, #0
1000c528:	d1cc      	bne.n	1000c4c4 <ble_pair_done_handler+0x84>
1000c52a:	e7ed      	b.n	1000c508 <ble_pair_done_handler+0xc8>
	{
		DBG_LOG("Pairing procedure completed successfully");
1000c52c:	4823      	ldr	r0, [pc, #140]	; (1000c5bc <ble_pair_done_handler+0x17c>)
1000c52e:	4b24      	ldr	r3, [pc, #144]	; (1000c5c0 <ble_pair_done_handler+0x180>)
1000c530:	469b      	mov	fp, r3
1000c532:	4798      	blx	r3
1000c534:	482a      	ldr	r0, [pc, #168]	; (1000c5e0 <ble_pair_done_handler+0x1a0>)
1000c536:	4b24      	ldr	r3, [pc, #144]	; (1000c5c8 <ble_pair_done_handler+0x188>)
1000c538:	469a      	mov	sl, r3
1000c53a:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].bond_info.auth = pairing_params->auth;
1000c53c:	782a      	ldrb	r2, [r5, #0]
1000c53e:	4b1e      	ldr	r3, [pc, #120]	; (1000c5b8 <ble_pair_done_handler+0x178>)
1000c540:	4698      	mov	r8, r3
1000c542:	0167      	lsls	r7, r4, #5
1000c544:	1b3b      	subs	r3, r7, r4
1000c546:	009b      	lsls	r3, r3, #2
1000c548:	4443      	add	r3, r8
1000c54a:	751a      	strb	r2, [r3, #20]
			ble_dev_info[idx].bond_info.status = pairing_params->status;
1000c54c:	792a      	ldrb	r2, [r5, #4]
1000c54e:	761a      	strb	r2, [r3, #24]
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRED;
1000c550:	335e      	adds	r3, #94	; 0x5e
1000c552:	2205      	movs	r2, #5
1000c554:	701a      	strb	r2, [r3, #0]
			
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
1000c556:	1b38      	subs	r0, r7, r4
1000c558:	0080      	lsls	r0, r0, #2
1000c55a:	4440      	add	r0, r8
1000c55c:	3036      	adds	r0, #54	; 0x36
1000c55e:	320b      	adds	r2, #11
1000c560:	0029      	movs	r1, r5
1000c562:	3122      	adds	r1, #34	; 0x22
1000c564:	4b20      	ldr	r3, [pc, #128]	; (1000c5e8 <ble_pair_done_handler+0x1a8>)
1000c566:	4699      	mov	r9, r3
1000c568:	4798      	blx	r3
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
1000c56a:	1b38      	subs	r0, r7, r4
1000c56c:	0080      	lsls	r0, r0, #2
1000c56e:	4440      	add	r0, r8
1000c570:	3046      	adds	r0, #70	; 0x46
1000c572:	2217      	movs	r2, #23
1000c574:	0029      	movs	r1, r5
1000c576:	3132      	adds	r1, #50	; 0x32
1000c578:	47c8      	blx	r9
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
1000c57a:	1b38      	subs	r0, r7, r4
1000c57c:	0080      	lsls	r0, r0, #2
1000c57e:	4440      	add	r0, r8
1000c580:	301a      	adds	r0, #26
1000c582:	1dac      	adds	r4, r5, #6
1000c584:	221c      	movs	r2, #28
1000c586:	0021      	movs	r1, r4
1000c588:	47c8      	blx	r9
			
			DBG_LOG_DEV("LTK: ");
1000c58a:	480c      	ldr	r0, [pc, #48]	; (1000c5bc <ble_pair_done_handler+0x17c>)
1000c58c:	47d8      	blx	fp
1000c58e:	4817      	ldr	r0, [pc, #92]	; (1000c5ec <ble_pair_done_handler+0x1ac>)
1000c590:	47d0      	blx	sl
1000c592:	2316      	movs	r3, #22
1000c594:	4699      	mov	r9, r3
1000c596:	44a9      	add	r9, r5
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
1000c598:	4e0c      	ldr	r6, [pc, #48]	; (1000c5cc <ble_pair_done_handler+0x18c>)
1000c59a:	4f0b      	ldr	r7, [pc, #44]	; (1000c5c8 <ble_pair_done_handler+0x188>)
1000c59c:	e76a      	b.n	1000c474 <ble_pair_done_handler+0x34>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
1000c59e:	792b      	ldrb	r3, [r5, #4]
1000c5a0:	9301      	str	r3, [sp, #4]
1000c5a2:	2b00      	cmp	r3, #0
1000c5a4:	d0c2      	beq.n	1000c52c <ble_pair_done_handler+0xec>
1000c5a6:	e78d      	b.n	1000c4c4 <ble_pair_done_handler+0x84>
				return AT_BLE_FAILURE;
			}
		}
	}
	return AT_BLE_SUCCESS;
}
1000c5a8:	9801      	ldr	r0, [sp, #4]
1000c5aa:	b003      	add	sp, #12
1000c5ac:	bc3c      	pop	{r2, r3, r4, r5}
1000c5ae:	4690      	mov	r8, r2
1000c5b0:	4699      	mov	r9, r3
1000c5b2:	46a2      	mov	sl, r4
1000c5b4:	46ab      	mov	fp, r5
1000c5b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c5b8:	1001a3a8 	.word	0x1001a3a8
1000c5bc:	10016a10 	.word	0x10016a10
1000c5c0:	100159e9 	.word	0x100159e9
1000c5c4:	10017a94 	.word	0x10017a94
1000c5c8:	100158c9 	.word	0x100158c9
1000c5cc:	10017a88 	.word	0x10017a88
1000c5d0:	10017a9c 	.word	0x10017a9c
1000c5d4:	10017aa4 	.word	0x10017aa4
1000c5d8:	1000f169 	.word	0x1000f169
1000c5dc:	10017ac4 	.word	0x10017ac4
1000c5e0:	10017ae0 	.word	0x10017ae0
1000c5e4:	10017b0c 	.word	0x10017b0c
1000c5e8:	1001576f 	.word	0x1001576f
1000c5ec:	10017b3c 	.word	0x10017b3c

1000c5f0 <ble_conn_param_update_req>:
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_conn_param_update_req(void *params)
{
1000c5f0:	b510      	push	{r4, lr}
	at_ble_conn_param_update_request_t * conn_param_req;
	conn_param_req = (at_ble_conn_param_update_request_t *)params;
	at_ble_conn_update_reply(conn_param_req->handle, true, 1, 120);
1000c5f2:	8800      	ldrh	r0, [r0, #0]
1000c5f4:	2378      	movs	r3, #120	; 0x78
1000c5f6:	2201      	movs	r2, #1
1000c5f8:	2101      	movs	r1, #1
1000c5fa:	4c02      	ldr	r4, [pc, #8]	; (1000c604 <ble_conn_param_update_req+0x14>)
1000c5fc:	47a0      	blx	r4
	return AT_BLE_SUCCESS;
}
1000c5fe:	2000      	movs	r0, #0
1000c600:	bd10      	pop	{r4, pc}
1000c602:	46c0      	nop			; (mov r8, r8)
1000c604:	1000f189 	.word	0x1000f189

1000c608 <ble_slave_security_request_handler>:

at_ble_status_t ble_slave_security_request_handler(void* params)
{
1000c608:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c60a:	4657      	mov	r7, sl
1000c60c:	464e      	mov	r6, r9
1000c60e:	4645      	mov	r5, r8
1000c610:	b4e0      	push	{r5, r6, r7}
1000c612:	b084      	sub	sp, #16
1000c614:	0004      	movs	r4, r0
	uint8_t i = 0, idx;
	at_ble_slave_sec_request_t* slave_sec_req;
	bool device_found = false;
	
	slave_sec_req = (at_ble_slave_sec_request_t*)params;	
	memset(&features, 0x00, sizeof(at_ble_pair_features_t));
1000c616:	2209      	movs	r2, #9
1000c618:	2100      	movs	r1, #0
1000c61a:	a801      	add	r0, sp, #4
1000c61c:	4b6a      	ldr	r3, [pc, #424]	; (1000c7c8 <ble_slave_security_request_handler+0x1c0>)
1000c61e:	4798      	blx	r3
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000c620:	8825      	ldrh	r5, [r4, #0]
1000c622:	496a      	ldr	r1, [pc, #424]	; (1000c7cc <ble_slave_security_request_handler+0x1c4>)
1000c624:	000a      	movs	r2, r1
1000c626:	2300      	movs	r3, #0
1000c628:	8910      	ldrh	r0, [r2, #8]
1000c62a:	42a8      	cmp	r0, r5
1000c62c:	d116      	bne.n	1000c65c <ble_slave_security_request_handler+0x54>
1000c62e:	0010      	movs	r0, r2
1000c630:	305e      	adds	r0, #94	; 0x5e
1000c632:	7800      	ldrb	r0, [r0, #0]
1000c634:	2802      	cmp	r0, #2
1000c636:	d111      	bne.n	1000c65c <ble_slave_security_request_handler+0x54>
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000c638:	4864      	ldr	r0, [pc, #400]	; (1000c7cc <ble_slave_security_request_handler+0x1c4>)
1000c63a:	015a      	lsls	r2, r3, #5
1000c63c:	1ad6      	subs	r6, r2, r3
1000c63e:	00b6      	lsls	r6, r6, #2
1000c640:	1986      	adds	r6, r0, r6
1000c642:	365e      	adds	r6, #94	; 0x5e
1000c644:	2206      	movs	r2, #6
1000c646:	7032      	strb	r2, [r6, #0]
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
1000c648:	32f9      	adds	r2, #249	; 0xf9
1000c64a:	4013      	ands	r3, r2
1000c64c:	015a      	lsls	r2, r3, #5
1000c64e:	1ad2      	subs	r2, r2, r3
1000c650:	0092      	lsls	r2, r2, #2
1000c652:	1882      	adds	r2, r0, r2
1000c654:	7d12      	ldrb	r2, [r2, #20]
1000c656:	07d0      	lsls	r0, r2, #31
1000c658:	d405      	bmi.n	1000c666 <ble_slave_security_request_handler+0x5e>
1000c65a:	e01b      	b.n	1000c694 <ble_slave_security_request_handler+0x8c>
1000c65c:	3301      	adds	r3, #1
1000c65e:	327c      	adds	r2, #124	; 0x7c
		//at_ble_disconnect(slave_sec_req->handle, AT_BLE_AUTH_FAILURE);		
		//return AT_BLE_FAILURE;
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c660:	2b05      	cmp	r3, #5
1000c662:	d1e1      	bne.n	1000c628 <ble_slave_security_request_handler+0x20>
1000c664:	e01e      	b.n	1000c6a4 <ble_slave_security_request_handler+0x9c>
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
1000c666:	78e0      	ldrb	r0, [r4, #3]
1000c668:	2800      	cmp	r0, #0
1000c66a:	d013      	beq.n	1000c694 <ble_slave_security_request_handler+0x8c>
		{
			if(at_ble_encryption_start(slave_sec_req->handle, &ble_dev_info[idx].bond_info.peer_ltk, ble_dev_info[idx].bond_info.auth) == AT_BLE_SUCCESS)
1000c66c:	0159      	lsls	r1, r3, #5
1000c66e:	1ac9      	subs	r1, r1, r3
1000c670:	008b      	lsls	r3, r1, #2
1000c672:	4956      	ldr	r1, [pc, #344]	; (1000c7cc <ble_slave_security_request_handler+0x1c4>)
1000c674:	18c9      	adds	r1, r1, r3
1000c676:	311a      	adds	r1, #26
1000c678:	8820      	ldrh	r0, [r4, #0]
1000c67a:	4b55      	ldr	r3, [pc, #340]	; (1000c7d0 <ble_slave_security_request_handler+0x1c8>)
1000c67c:	4798      	blx	r3
1000c67e:	2800      	cmp	r0, #0
1000c680:	d100      	bne.n	1000c684 <ble_slave_security_request_handler+0x7c>
1000c682:	e09b      	b.n	1000c7bc <ble_slave_security_request_handler+0x1b4>
			{
				return  AT_BLE_SUCCESS;
			}
			else
			{
				DBG_LOG("Encryption Not started");
1000c684:	4853      	ldr	r0, [pc, #332]	; (1000c7d4 <ble_slave_security_request_handler+0x1cc>)
1000c686:	4b54      	ldr	r3, [pc, #336]	; (1000c7d8 <ble_slave_security_request_handler+0x1d0>)
1000c688:	4798      	blx	r3
1000c68a:	4854      	ldr	r0, [pc, #336]	; (1000c7dc <ble_slave_security_request_handler+0x1d4>)
1000c68c:	4b54      	ldr	r3, [pc, #336]	; (1000c7e0 <ble_slave_security_request_handler+0x1d8>)
1000c68e:	4798      	blx	r3
				return AT_BLE_FAILURE;
1000c690:	20e2      	movs	r0, #226	; 0xe2
1000c692:	e093      	b.n	1000c7bc <ble_slave_security_request_handler+0x1b4>
			}			
		}
		else
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000c694:	015a      	lsls	r2, r3, #5
1000c696:	1ad3      	subs	r3, r2, r3
1000c698:	009b      	lsls	r3, r3, #2
1000c69a:	4a4c      	ldr	r2, [pc, #304]	; (1000c7cc <ble_slave_security_request_handler+0x1c4>)
1000c69c:	18d3      	adds	r3, r2, r3
1000c69e:	335e      	adds	r3, #94	; 0x5e
1000c6a0:	2202      	movs	r2, #2
1000c6a2:	701a      	strb	r2, [r3, #0]
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000c6a4:	8825      	ldrh	r5, [r4, #0]
1000c6a6:	2200      	movs	r2, #0
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c6a8:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000c6aa:	0016      	movs	r6, r2
1000c6ac:	8908      	ldrh	r0, [r1, #8]
1000c6ae:	42a8      	cmp	r0, r5
1000c6b0:	d10d      	bne.n	1000c6ce <ble_slave_security_request_handler+0xc6>
1000c6b2:	0008      	movs	r0, r1
1000c6b4:	305e      	adds	r0, #94	; 0x5e
1000c6b6:	7800      	ldrb	r0, [r0, #0]
1000c6b8:	2802      	cmp	r0, #2
1000c6ba:	d108      	bne.n	1000c6ce <ble_slave_security_request_handler+0xc6>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000c6bc:	0152      	lsls	r2, r2, #5
1000c6be:	1b92      	subs	r2, r2, r6
1000c6c0:	0096      	lsls	r6, r2, #2
1000c6c2:	4a42      	ldr	r2, [pc, #264]	; (1000c7cc <ble_slave_security_request_handler+0x1c4>)
1000c6c4:	1992      	adds	r2, r2, r6
1000c6c6:	325e      	adds	r2, #94	; 0x5e
1000c6c8:	2103      	movs	r1, #3
1000c6ca:	7011      	strb	r1, [r2, #0]
			break;
1000c6cc:	e005      	b.n	1000c6da <ble_slave_security_request_handler+0xd2>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c6ce:	3301      	adds	r3, #1
1000c6d0:	b2db      	uxtb	r3, r3
1000c6d2:	3201      	adds	r2, #1
1000c6d4:	317c      	adds	r1, #124	; 0x7c
1000c6d6:	2b05      	cmp	r3, #5
1000c6d8:	d1e7      	bne.n	1000c6aa <ble_slave_security_request_handler+0xa2>
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
	features.bond = slave_sec_req->bond;
1000c6da:	aa01      	add	r2, sp, #4
1000c6dc:	78e1      	ldrb	r1, [r4, #3]
1000c6de:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = true;
1000c6e0:	2101      	movs	r1, #1
1000c6e2:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = AT_BLE_IO_CAP_KB_DISPLAY;
1000c6e4:	3103      	adds	r1, #3
1000c6e6:	7011      	strb	r1, [r2, #0]

	features.oob_avaiable = false;
			
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000c6e8:	001f      	movs	r7, r3
1000c6ea:	015a      	lsls	r2, r3, #5
1000c6ec:	1ad2      	subs	r2, r2, r3
1000c6ee:	0092      	lsls	r2, r2, #2
1000c6f0:	4936      	ldr	r1, [pc, #216]	; (1000c7cc <ble_slave_security_request_handler+0x1c4>)
1000c6f2:	5c52      	ldrb	r2, [r2, r1]
1000c6f4:	2a02      	cmp	r2, #2
1000c6f6:	d104      	bne.n	1000c702 <ble_slave_security_request_handler+0xfa>
	{
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000c6f8:	aa01      	add	r2, sp, #4
1000c6fa:	2103      	movs	r1, #3
1000c6fc:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000c6fe:	71d1      	strb	r1, [r2, #7]
1000c700:	e003      	b.n	1000c70a <ble_slave_security_request_handler+0x102>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000c702:	aa01      	add	r2, sp, #4
1000c704:	2101      	movs	r1, #1
1000c706:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000c708:	71d1      	strb	r1, [r2, #7]
	}
	features.max_key_size = 16;
1000c70a:	aa01      	add	r2, sp, #4
1000c70c:	2110      	movs	r1, #16
1000c70e:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
1000c710:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000c712:	017a      	lsls	r2, r7, #5
1000c714:	1bd2      	subs	r2, r2, r7
1000c716:	0092      	lsls	r2, r2, #2
1000c718:	492c      	ldr	r1, [pc, #176]	; (1000c7cc <ble_slave_security_request_handler+0x1c4>)
1000c71a:	188a      	adds	r2, r1, r2
1000c71c:	7e12      	ldrb	r2, [r2, #24]
1000c71e:	2a40      	cmp	r2, #64	; 0x40
1000c720:	d134      	bne.n	1000c78c <ble_slave_security_request_handler+0x184>
1000c722:	015a      	lsls	r2, r3, #5
1000c724:	1ad3      	subs	r3, r2, r3
1000c726:	009b      	lsls	r3, r3, #2
1000c728:	469a      	mov	sl, r3
1000c72a:	001e      	movs	r6, r3
1000c72c:	3660      	adds	r6, #96	; 0x60
1000c72e:	1876      	adds	r6, r6, r1
1000c730:	4655      	mov	r5, sl
1000c732:	3568      	adds	r5, #104	; 0x68
1000c734:	186d      	adds	r5, r5, r1
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000c736:	4b2b      	ldr	r3, [pc, #172]	; (1000c7e4 <ble_slave_security_request_handler+0x1dc>)
1000c738:	4699      	mov	r9, r3
1000c73a:	230f      	movs	r3, #15
1000c73c:	4698      	mov	r8, r3
1000c73e:	47c8      	blx	r9
1000c740:	4643      	mov	r3, r8
1000c742:	4018      	ands	r0, r3
1000c744:	7030      	strb	r0, [r6, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000c746:	47c8      	blx	r9
1000c748:	4643      	mov	r3, r8
1000c74a:	4018      	ands	r0, r3
1000c74c:	74b0      	strb	r0, [r6, #18]
1000c74e:	3601      	adds	r6, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000c750:	42ae      	cmp	r6, r5
1000c752:	d1f4      	bne.n	1000c73e <ble_slave_security_request_handler+0x136>
1000c754:	4656      	mov	r6, sl
1000c756:	3670      	adds	r6, #112	; 0x70
1000c758:	4a1c      	ldr	r2, [pc, #112]	; (1000c7cc <ble_slave_security_request_handler+0x1c4>)
1000c75a:	18b6      	adds	r6, r6, r2
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000c75c:	4b21      	ldr	r3, [pc, #132]	; (1000c7e4 <ble_slave_security_request_handler+0x1dc>)
1000c75e:	4699      	mov	r9, r3
1000c760:	230f      	movs	r3, #15
1000c762:	4698      	mov	r8, r3
1000c764:	47c8      	blx	r9
1000c766:	4643      	mov	r3, r8
1000c768:	4018      	ands	r0, r3
1000c76a:	7028      	strb	r0, [r5, #0]
1000c76c:	3501      	adds	r5, #1
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000c76e:	42b5      	cmp	r5, r6
1000c770:	d1f8      	bne.n	1000c764 <ble_slave_security_request_handler+0x15c>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000c772:	4b1c      	ldr	r3, [pc, #112]	; (1000c7e4 <ble_slave_security_request_handler+0x1dc>)
1000c774:	4798      	blx	r3
1000c776:	017b      	lsls	r3, r7, #5
1000c778:	1bdb      	subs	r3, r3, r7
1000c77a:	009b      	lsls	r3, r3, #2
1000c77c:	4a13      	ldr	r2, [pc, #76]	; (1000c7cc <ble_slave_security_request_handler+0x1c4>)
1000c77e:	18d3      	adds	r3, r2, r3
1000c780:	001a      	movs	r2, r3
1000c782:	3270      	adds	r2, #112	; 0x70
1000c784:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000c786:	337a      	adds	r3, #122	; 0x7a
1000c788:	2210      	movs	r2, #16
1000c78a:	701a      	strb	r2, [r3, #0]
	{
		/* Bonding information already exists */
		
	}

	if(at_ble_authenticate(slave_sec_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000c78c:	017a      	lsls	r2, r7, #5
1000c78e:	1bd7      	subs	r7, r2, r7
1000c790:	00bf      	lsls	r7, r7, #2
1000c792:	3760      	adds	r7, #96	; 0x60
1000c794:	4a0d      	ldr	r2, [pc, #52]	; (1000c7cc <ble_slave_security_request_handler+0x1c4>)
1000c796:	18ba      	adds	r2, r7, r2
1000c798:	8820      	ldrh	r0, [r4, #0]
1000c79a:	2300      	movs	r3, #0
1000c79c:	a901      	add	r1, sp, #4
1000c79e:	4c12      	ldr	r4, [pc, #72]	; (1000c7e8 <ble_slave_security_request_handler+0x1e0>)
1000c7a0:	47a0      	blx	r4
1000c7a2:	2800      	cmp	r0, #0
1000c7a4:	d00a      	beq.n	1000c7bc <ble_slave_security_request_handler+0x1b4>
	{
		features.bond = false;
1000c7a6:	ab01      	add	r3, sp, #4
1000c7a8:	2200      	movs	r2, #0
1000c7aa:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000c7ac:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Slave Security Req - Authentication Failed");
1000c7ae:	4809      	ldr	r0, [pc, #36]	; (1000c7d4 <ble_slave_security_request_handler+0x1cc>)
1000c7b0:	4b09      	ldr	r3, [pc, #36]	; (1000c7d8 <ble_slave_security_request_handler+0x1d0>)
1000c7b2:	4798      	blx	r3
1000c7b4:	480d      	ldr	r0, [pc, #52]	; (1000c7ec <ble_slave_security_request_handler+0x1e4>)
1000c7b6:	4b0a      	ldr	r3, [pc, #40]	; (1000c7e0 <ble_slave_security_request_handler+0x1d8>)
1000c7b8:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000c7ba:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000c7bc:	b004      	add	sp, #16
1000c7be:	bc1c      	pop	{r2, r3, r4}
1000c7c0:	4690      	mov	r8, r2
1000c7c2:	4699      	mov	r9, r3
1000c7c4:	46a2      	mov	sl, r4
1000c7c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c7c8:	10015781 	.word	0x10015781
1000c7cc:	1001a3a8 	.word	0x1001a3a8
1000c7d0:	1000fd4d 	.word	0x1000fd4d
1000c7d4:	10016a10 	.word	0x10016a10
1000c7d8:	100159e9 	.word	0x100159e9
1000c7dc:	10017b44 	.word	0x10017b44
1000c7e0:	100158c9 	.word	0x100158c9
1000c7e4:	100159fd 	.word	0x100159fd
1000c7e8:	1000fb61 	.word	0x1000fb61
1000c7ec:	10017b5c 	.word	0x10017b5c

1000c7f0 <ble_pair_request_handler>:

/** @brief function handles pair request */
at_ble_status_t ble_pair_request_handler(void *params)
{
1000c7f0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c7f2:	465f      	mov	r7, fp
1000c7f4:	4656      	mov	r6, sl
1000c7f6:	464d      	mov	r5, r9
1000c7f8:	4644      	mov	r4, r8
1000c7fa:	b4f0      	push	{r4, r5, r6, r7}
1000c7fc:	b085      	sub	sp, #20
1000c7fe:	4680      	mov	r8, r0
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000c800:	8804      	ldrh	r4, [r0, #0]
1000c802:	4a54      	ldr	r2, [pc, #336]	; (1000c954 <ble_pair_request_handler+0x164>)
1000c804:	2100      	movs	r1, #0
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c806:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000c808:	8910      	ldrh	r0, [r2, #8]
1000c80a:	42a0      	cmp	r0, r4
1000c80c:	d10d      	bne.n	1000c82a <ble_pair_request_handler+0x3a>
1000c80e:	0010      	movs	r0, r2
1000c810:	305e      	adds	r0, #94	; 0x5e
1000c812:	7800      	ldrb	r0, [r0, #0]
1000c814:	2802      	cmp	r0, #2
1000c816:	d108      	bne.n	1000c82a <ble_pair_request_handler+0x3a>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000c818:	014a      	lsls	r2, r1, #5
1000c81a:	1a52      	subs	r2, r2, r1
1000c81c:	0095      	lsls	r5, r2, #2
1000c81e:	4a4d      	ldr	r2, [pc, #308]	; (1000c954 <ble_pair_request_handler+0x164>)
1000c820:	1952      	adds	r2, r2, r5
1000c822:	325e      	adds	r2, #94	; 0x5e
1000c824:	2103      	movs	r1, #3
1000c826:	7011      	strb	r1, [r2, #0]
			break;
1000c828:	e005      	b.n	1000c836 <ble_pair_request_handler+0x46>
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c82a:	3301      	adds	r3, #1
1000c82c:	b2db      	uxtb	r3, r3
1000c82e:	3101      	adds	r1, #1
1000c830:	327c      	adds	r2, #124	; 0x7c
1000c832:	2b05      	cmp	r3, #5
1000c834:	d1e8      	bne.n	1000c808 <ble_pair_request_handler+0x18>
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
1000c836:	aa01      	add	r2, sp, #4
1000c838:	2100      	movs	r1, #0
1000c83a:	7211      	strb	r1, [r2, #8]
	features.bond = BLE_BOND_REQ;
1000c83c:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = BLE_MITM_REQ;
1000c83e:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = BLE_IO_CAPABALITIES;
1000c840:	2003      	movs	r0, #3
1000c842:	7010      	strb	r0, [r2, #0]
	features.oob_avaiable = BLE_OOB_REQ;
1000c844:	70d1      	strb	r1, [r2, #3]
	
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000c846:	001e      	movs	r6, r3
1000c848:	015a      	lsls	r2, r3, #5
1000c84a:	1ad2      	subs	r2, r2, r3
1000c84c:	0092      	lsls	r2, r2, #2
1000c84e:	4941      	ldr	r1, [pc, #260]	; (1000c954 <ble_pair_request_handler+0x164>)
1000c850:	5c52      	ldrb	r2, [r2, r1]
1000c852:	2a02      	cmp	r2, #2
1000c854:	d104      	bne.n	1000c860 <ble_pair_request_handler+0x70>
	{
		/* Distribution of IRK is required */
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000c856:	aa01      	add	r2, sp, #4
1000c858:	2103      	movs	r1, #3
1000c85a:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000c85c:	71d1      	strb	r1, [r2, #7]
1000c85e:	e003      	b.n	1000c868 <ble_pair_request_handler+0x78>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000c860:	aa01      	add	r2, sp, #4
1000c862:	2101      	movs	r1, #1
1000c864:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000c866:	71d1      	strb	r1, [r2, #7]
	}
			
	features.max_key_size = 16;
1000c868:	aa01      	add	r2, sp, #4
1000c86a:	2110      	movs	r1, #16
1000c86c:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
1000c86e:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000c870:	0172      	lsls	r2, r6, #5
1000c872:	1b92      	subs	r2, r2, r6
1000c874:	0092      	lsls	r2, r2, #2
1000c876:	4937      	ldr	r1, [pc, #220]	; (1000c954 <ble_pair_request_handler+0x164>)
1000c878:	188a      	adds	r2, r1, r2
1000c87a:	7e12      	ldrb	r2, [r2, #24]
1000c87c:	2a40      	cmp	r2, #64	; 0x40
1000c87e:	d142      	bne.n	1000c906 <ble_pair_request_handler+0x116>
1000c880:	015f      	lsls	r7, r3, #5
1000c882:	1afb      	subs	r3, r7, r3
1000c884:	009b      	lsls	r3, r3, #2
1000c886:	469b      	mov	fp, r3
1000c888:	001c      	movs	r4, r3
1000c88a:	3460      	adds	r4, #96	; 0x60
1000c88c:	1864      	adds	r4, r4, r1
1000c88e:	465d      	mov	r5, fp
1000c890:	3568      	adds	r5, #104	; 0x68
1000c892:	186d      	adds	r5, r5, r1
1000c894:	0027      	movs	r7, r4
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000c896:	4b30      	ldr	r3, [pc, #192]	; (1000c958 <ble_pair_request_handler+0x168>)
1000c898:	469a      	mov	sl, r3
1000c89a:	230f      	movs	r3, #15
1000c89c:	4699      	mov	r9, r3
1000c89e:	47d0      	blx	sl
1000c8a0:	464b      	mov	r3, r9
1000c8a2:	4018      	ands	r0, r3
1000c8a4:	7038      	strb	r0, [r7, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000c8a6:	47d0      	blx	sl
1000c8a8:	464b      	mov	r3, r9
1000c8aa:	4018      	ands	r0, r3
1000c8ac:	74b8      	strb	r0, [r7, #18]
1000c8ae:	3701      	adds	r7, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000c8b0:	42af      	cmp	r7, r5
1000c8b2:	d1f4      	bne.n	1000c89e <ble_pair_request_handler+0xae>
1000c8b4:	465b      	mov	r3, fp
1000c8b6:	3370      	adds	r3, #112	; 0x70
1000c8b8:	4f26      	ldr	r7, [pc, #152]	; (1000c954 <ble_pair_request_handler+0x164>)
1000c8ba:	19df      	adds	r7, r3, r7
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000c8bc:	4b26      	ldr	r3, [pc, #152]	; (1000c958 <ble_pair_request_handler+0x168>)
1000c8be:	469a      	mov	sl, r3
1000c8c0:	230f      	movs	r3, #15
1000c8c2:	4699      	mov	r9, r3
1000c8c4:	47d0      	blx	sl
1000c8c6:	464b      	mov	r3, r9
1000c8c8:	4018      	ands	r0, r3
1000c8ca:	7028      	strb	r0, [r5, #0]
1000c8cc:	3501      	adds	r5, #1
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000c8ce:	42bd      	cmp	r5, r7
1000c8d0:	d1f8      	bne.n	1000c8c4 <ble_pair_request_handler+0xd4>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		DBG_LOG_DEV("Generated LTK: ");
1000c8d2:	4822      	ldr	r0, [pc, #136]	; (1000c95c <ble_pair_request_handler+0x16c>)
1000c8d4:	4b22      	ldr	r3, [pc, #136]	; (1000c960 <ble_pair_request_handler+0x170>)
1000c8d6:	4798      	blx	r3
1000c8d8:	4822      	ldr	r0, [pc, #136]	; (1000c964 <ble_pair_request_handler+0x174>)
1000c8da:	4b23      	ldr	r3, [pc, #140]	; (1000c968 <ble_pair_request_handler+0x178>)
1000c8dc:	4798      	blx	r3
		for (i = 0; i < 16; i++)
		{
			DBG_LOG_CONT_DEV("0x%02X ", ble_dev_info[idx].host_ltk.key[i]);
1000c8de:	4d22      	ldr	r5, [pc, #136]	; (1000c968 <ble_pair_request_handler+0x178>)
1000c8e0:	7821      	ldrb	r1, [r4, #0]
1000c8e2:	4822      	ldr	r0, [pc, #136]	; (1000c96c <ble_pair_request_handler+0x17c>)
1000c8e4:	47a8      	blx	r5
1000c8e6:	3401      	adds	r4, #1
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		DBG_LOG_DEV("Generated LTK: ");
		for (i = 0; i < 16; i++)
1000c8e8:	42bc      	cmp	r4, r7
1000c8ea:	d1f9      	bne.n	1000c8e0 <ble_pair_request_handler+0xf0>
		{
			DBG_LOG_CONT_DEV("0x%02X ", ble_dev_info[idx].host_ltk.key[i]);
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000c8ec:	4b1a      	ldr	r3, [pc, #104]	; (1000c958 <ble_pair_request_handler+0x168>)
1000c8ee:	4798      	blx	r3
1000c8f0:	0173      	lsls	r3, r6, #5
1000c8f2:	1b9b      	subs	r3, r3, r6
1000c8f4:	009b      	lsls	r3, r3, #2
1000c8f6:	4a17      	ldr	r2, [pc, #92]	; (1000c954 <ble_pair_request_handler+0x164>)
1000c8f8:	18d3      	adds	r3, r2, r3
1000c8fa:	001a      	movs	r2, r3
1000c8fc:	3270      	adds	r2, #112	; 0x70
1000c8fe:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000c900:	337a      	adds	r3, #122	; 0x7a
1000c902:	2210      	movs	r2, #16
1000c904:	701a      	strb	r2, [r3, #0]
		/* Bonding information already exists */
		
	}

	/* Send pairing response */
	DBG_LOG_DEV("Sending pairing response");
1000c906:	4815      	ldr	r0, [pc, #84]	; (1000c95c <ble_pair_request_handler+0x16c>)
1000c908:	4b15      	ldr	r3, [pc, #84]	; (1000c960 <ble_pair_request_handler+0x170>)
1000c90a:	4798      	blx	r3
1000c90c:	4818      	ldr	r0, [pc, #96]	; (1000c970 <ble_pair_request_handler+0x180>)
1000c90e:	4b16      	ldr	r3, [pc, #88]	; (1000c968 <ble_pair_request_handler+0x178>)
1000c910:	4798      	blx	r3

	if(at_ble_authenticate(pair_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000c912:	0173      	lsls	r3, r6, #5
1000c914:	1b9b      	subs	r3, r3, r6
1000c916:	009b      	lsls	r3, r3, #2
1000c918:	3360      	adds	r3, #96	; 0x60
1000c91a:	4a0e      	ldr	r2, [pc, #56]	; (1000c954 <ble_pair_request_handler+0x164>)
1000c91c:	189a      	adds	r2, r3, r2
1000c91e:	4643      	mov	r3, r8
1000c920:	8818      	ldrh	r0, [r3, #0]
1000c922:	2300      	movs	r3, #0
1000c924:	a901      	add	r1, sp, #4
1000c926:	4c13      	ldr	r4, [pc, #76]	; (1000c974 <ble_pair_request_handler+0x184>)
1000c928:	47a0      	blx	r4
1000c92a:	2800      	cmp	r0, #0
1000c92c:	d00a      	beq.n	1000c944 <ble_pair_request_handler+0x154>
	{
		features.bond = false;
1000c92e:	ab01      	add	r3, sp, #4
1000c930:	2200      	movs	r2, #0
1000c932:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000c934:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Pair Request - Authentication Failed");
1000c936:	4809      	ldr	r0, [pc, #36]	; (1000c95c <ble_pair_request_handler+0x16c>)
1000c938:	4b09      	ldr	r3, [pc, #36]	; (1000c960 <ble_pair_request_handler+0x170>)
1000c93a:	4798      	blx	r3
1000c93c:	480e      	ldr	r0, [pc, #56]	; (1000c978 <ble_pair_request_handler+0x188>)
1000c93e:	4b0a      	ldr	r3, [pc, #40]	; (1000c968 <ble_pair_request_handler+0x178>)
1000c940:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000c942:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000c944:	b005      	add	sp, #20
1000c946:	bc3c      	pop	{r2, r3, r4, r5}
1000c948:	4690      	mov	r8, r2
1000c94a:	4699      	mov	r9, r3
1000c94c:	46a2      	mov	sl, r4
1000c94e:	46ab      	mov	fp, r5
1000c950:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c952:	46c0      	nop			; (mov r8, r8)
1000c954:	1001a3a8 	.word	0x1001a3a8
1000c958:	100159fd 	.word	0x100159fd
1000c95c:	10016a10 	.word	0x10016a10
1000c960:	100159e9 	.word	0x100159e9
1000c964:	10017b88 	.word	0x10017b88
1000c968:	100158c9 	.word	0x100158c9
1000c96c:	10017b98 	.word	0x10017b98
1000c970:	10017ba0 	.word	0x10017ba0
1000c974:	1000fb61 	.word	0x1000fb61
1000c978:	10017bbc 	.word	0x10017bbc

1000c97c <ble_pair_key_request_handler>:

/** @brief function handles pair key request */
at_ble_status_t ble_pair_key_request_handler (void *params)
{
1000c97c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c97e:	b085      	sub	sp, #20
1000c980:	0005      	movs	r5, r0
	at_ble_pair_key_request_t *pair_key;
	pair_key = (at_ble_pair_key_request_t *)params;
	/* Passkey has fixed value in this example MSB */
	uint8_t passkey[6]={'1','2','3','4','5','6'};
1000c982:	2206      	movs	r2, #6
1000c984:	493d      	ldr	r1, [pc, #244]	; (1000ca7c <ble_pair_key_request_handler+0x100>)
1000c986:	a802      	add	r0, sp, #8
1000c988:	4e3d      	ldr	r6, [pc, #244]	; (1000ca80 <ble_pair_key_request_handler+0x104>)
1000c98a:	47b0      	blx	r6
	uint8_t idx = 0;
        uint8_t pin;
        
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
1000c98c:	ac01      	add	r4, sp, #4
1000c98e:	2204      	movs	r2, #4
1000c990:	0029      	movs	r1, r5
1000c992:	0020      	movs	r0, r4
1000c994:	47b0      	blx	r6
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
1000c996:	78e3      	ldrb	r3, [r4, #3]
1000c998:	2b00      	cmp	r3, #0
1000c99a:	d162      	bne.n	1000ca62 <ble_pair_key_request_handler+0xe6>
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000c99c:	4839      	ldr	r0, [pc, #228]	; (1000ca84 <ble_pair_key_request_handler+0x108>)
1000c99e:	4b3a      	ldr	r3, [pc, #232]	; (1000ca88 <ble_pair_key_request_handler+0x10c>)
1000c9a0:	4798      	blx	r3
1000c9a2:	483a      	ldr	r0, [pc, #232]	; (1000ca8c <ble_pair_key_request_handler+0x110>)
1000c9a4:	4b3a      	ldr	r3, [pc, #232]	; (1000ca90 <ble_pair_key_request_handler+0x114>)
1000c9a6:	4798      	blx	r3
1000c9a8:	2600      	movs	r6, #0
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000c9aa:	4c3a      	ldr	r4, [pc, #232]	; (1000ca94 <ble_pair_key_request_handler+0x118>)
				return AT_BLE_FAILURE;
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
			  passkey[idx++] = pin;
			  DBG_LOG_CONT("%c", pin);
1000c9ac:	27ff      	movs	r7, #255	; 0xff
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000c9ae:	201e      	movs	r0, #30
1000c9b0:	47a0      	blx	r4
1000c9b2:	b2c3      	uxtb	r3, r0

			if (!pin) {
1000c9b4:	2b00      	cmp	r3, #0
1000c9b6:	d11a      	bne.n	1000c9ee <ble_pair_key_request_handler+0x72>
			DBG_LOG("Pin Timeout");
1000c9b8:	4f32      	ldr	r7, [pc, #200]	; (1000ca84 <ble_pair_key_request_handler+0x108>)
1000c9ba:	0038      	movs	r0, r7
1000c9bc:	4e32      	ldr	r6, [pc, #200]	; (1000ca88 <ble_pair_key_request_handler+0x10c>)
1000c9be:	47b0      	blx	r6
1000c9c0:	4835      	ldr	r0, [pc, #212]	; (1000ca98 <ble_pair_key_request_handler+0x11c>)
1000c9c2:	4c33      	ldr	r4, [pc, #204]	; (1000ca90 <ble_pair_key_request_handler+0x114>)
1000c9c4:	47a0      	blx	r4
				DBG_LOG("Disconnecting ...");
1000c9c6:	0038      	movs	r0, r7
1000c9c8:	47b0      	blx	r6
1000c9ca:	4834      	ldr	r0, [pc, #208]	; (1000ca9c <ble_pair_key_request_handler+0x120>)
1000c9cc:	47a0      	blx	r4
				if (!(at_ble_disconnect(pair_key->handle,
1000c9ce:	8828      	ldrh	r0, [r5, #0]
1000c9d0:	2113      	movs	r1, #19
1000c9d2:	4b33      	ldr	r3, [pc, #204]	; (1000caa0 <ble_pair_key_request_handler+0x124>)
1000c9d4:	4798      	blx	r3
1000c9d6:	0003      	movs	r3, r0
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
				}
				return AT_BLE_FAILURE;
1000c9d8:	20e2      	movs	r0, #226	; 0xe2
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);

			if (!pin) {
			DBG_LOG("Pin Timeout");
				DBG_LOG("Disconnecting ...");
				if (!(at_ble_disconnect(pair_key->handle,
1000c9da:	2b00      	cmp	r3, #0
1000c9dc:	d04c      	beq.n	1000ca78 <ble_pair_key_request_handler+0xfc>
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
1000c9de:	4829      	ldr	r0, [pc, #164]	; (1000ca84 <ble_pair_key_request_handler+0x108>)
1000c9e0:	4b29      	ldr	r3, [pc, #164]	; (1000ca88 <ble_pair_key_request_handler+0x10c>)
1000c9e2:	4798      	blx	r3
1000c9e4:	482f      	ldr	r0, [pc, #188]	; (1000caa4 <ble_pair_key_request_handler+0x128>)
1000c9e6:	4b2a      	ldr	r3, [pc, #168]	; (1000ca90 <ble_pair_key_request_handler+0x114>)
1000c9e8:	4798      	blx	r3
				}
				return AT_BLE_FAILURE;
1000c9ea:	20e2      	movs	r0, #226	; 0xe2
1000c9ec:	e044      	b.n	1000ca78 <ble_pair_key_request_handler+0xfc>
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
1000c9ee:	001a      	movs	r2, r3
1000c9f0:	3a30      	subs	r2, #48	; 0x30
1000c9f2:	2a09      	cmp	r2, #9
1000c9f4:	d8db      	bhi.n	1000c9ae <ble_pair_key_request_handler+0x32>
			  passkey[idx++] = pin;
1000c9f6:	aa02      	add	r2, sp, #8
1000c9f8:	54b3      	strb	r3, [r6, r2]
			  DBG_LOG_CONT("%c", pin);
1000c9fa:	4038      	ands	r0, r7
1000c9fc:	4b2a      	ldr	r3, [pc, #168]	; (1000caa8 <ble_pair_key_request_handler+0x12c>)
1000c9fe:	4798      	blx	r3
1000ca00:	3601      	adds	r6, #1
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
1000ca02:	2e06      	cmp	r6, #6
1000ca04:	d026      	beq.n	1000ca54 <ble_pair_key_request_handler+0xd8>
1000ca06:	e7d2      	b.n	1000c9ae <ble_pair_key_request_handler+0x32>
          {
            DBG_LOG("Entered Pass-code:");
          }
          else
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
1000ca08:	481e      	ldr	r0, [pc, #120]	; (1000ca84 <ble_pair_key_request_handler+0x108>)
1000ca0a:	4b1f      	ldr	r3, [pc, #124]	; (1000ca88 <ble_pair_key_request_handler+0x10c>)
1000ca0c:	4798      	blx	r3
1000ca0e:	4827      	ldr	r0, [pc, #156]	; (1000caac <ble_pair_key_request_handler+0x130>)
1000ca10:	4b1f      	ldr	r3, [pc, #124]	; (1000ca90 <ble_pair_key_request_handler+0x114>)
1000ca12:	4798      	blx	r3
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000ca14:	2400      	movs	r4, #0
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
1000ca16:	4e24      	ldr	r6, [pc, #144]	; (1000caa8 <ble_pair_key_request_handler+0x12c>)
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
1000ca18:	ab02      	add	r3, sp, #8
                  DBG_LOG_CONT("%c",passkey[idx]);
1000ca1a:	5ce0      	ldrb	r0, [r4, r3]
1000ca1c:	47b0      	blx	r6
1000ca1e:	3401      	adds	r4, #1
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
1000ca20:	2c06      	cmp	r4, #6
1000ca22:	d1f9      	bne.n	1000ca18 <ble_pair_key_request_handler+0x9c>
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
          }		
          
          if(!((at_ble_pair_key_reply(pair_key->handle, pair_key_request.type, passkey)) == AT_BLE_SUCCESS))
1000ca24:	ab01      	add	r3, sp, #4
1000ca26:	7899      	ldrb	r1, [r3, #2]
1000ca28:	8828      	ldrh	r0, [r5, #0]
1000ca2a:	aa02      	add	r2, sp, #8
1000ca2c:	4b20      	ldr	r3, [pc, #128]	; (1000cab0 <ble_pair_key_request_handler+0x134>)
1000ca2e:	4798      	blx	r3
1000ca30:	2800      	cmp	r0, #0
1000ca32:	d021      	beq.n	1000ca78 <ble_pair_key_request_handler+0xfc>
          {
                  DBG_LOG("Pair-key reply failed");
1000ca34:	4813      	ldr	r0, [pc, #76]	; (1000ca84 <ble_pair_key_request_handler+0x108>)
1000ca36:	4b14      	ldr	r3, [pc, #80]	; (1000ca88 <ble_pair_key_request_handler+0x10c>)
1000ca38:	4798      	blx	r3
1000ca3a:	481e      	ldr	r0, [pc, #120]	; (1000cab4 <ble_pair_key_request_handler+0x138>)
1000ca3c:	4b14      	ldr	r3, [pc, #80]	; (1000ca90 <ble_pair_key_request_handler+0x114>)
1000ca3e:	4798      	blx	r3
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000ca40:	2000      	movs	r0, #0
1000ca42:	e019      	b.n	1000ca78 <ble_pair_key_request_handler+0xfc>
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
1000ca44:	480f      	ldr	r0, [pc, #60]	; (1000ca84 <ble_pair_key_request_handler+0x108>)
1000ca46:	4b10      	ldr	r3, [pc, #64]	; (1000ca88 <ble_pair_key_request_handler+0x10c>)
1000ca48:	4798      	blx	r3
1000ca4a:	481b      	ldr	r0, [pc, #108]	; (1000cab8 <ble_pair_key_request_handler+0x13c>)
1000ca4c:	4b10      	ldr	r3, [pc, #64]	; (1000ca90 <ble_pair_key_request_handler+0x114>)
1000ca4e:	4798      	blx	r3
		}
	}
	return AT_BLE_SUCCESS;	
1000ca50:	2000      	movs	r0, #0
1000ca52:	e011      	b.n	1000ca78 <ble_pair_key_request_handler+0xfc>
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
	   (pair_key_request.type == AT_BLE_PAIR_PASSKEY)) || (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY))
	{
          if(pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY)
          {
            DBG_LOG("Entered Pass-code:");
1000ca54:	480b      	ldr	r0, [pc, #44]	; (1000ca84 <ble_pair_key_request_handler+0x108>)
1000ca56:	4b0c      	ldr	r3, [pc, #48]	; (1000ca88 <ble_pair_key_request_handler+0x10c>)
1000ca58:	4798      	blx	r3
1000ca5a:	4818      	ldr	r0, [pc, #96]	; (1000cabc <ble_pair_key_request_handler+0x140>)
1000ca5c:	4b0c      	ldr	r3, [pc, #48]	; (1000ca90 <ble_pair_key_request_handler+0x114>)
1000ca5e:	4798      	blx	r3
1000ca60:	e7d8      	b.n	1000ca14 <ble_pair_key_request_handler+0x98>
			} 
	  }
	}	
	
	/* Display passkey */
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
1000ca62:	ab01      	add	r3, sp, #4
1000ca64:	885a      	ldrh	r2, [r3, #2]
1000ca66:	2380      	movs	r3, #128	; 0x80
1000ca68:	005b      	lsls	r3, r3, #1
1000ca6a:	429a      	cmp	r2, r3
1000ca6c:	d0cc      	beq.n	1000ca08 <ble_pair_key_request_handler+0x8c>
                  DBG_LOG("Pair-key reply failed");
          }
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
1000ca6e:	ab01      	add	r3, sp, #4
1000ca70:	789b      	ldrb	r3, [r3, #2]
1000ca72:	2b01      	cmp	r3, #1
1000ca74:	d0e6      	beq.n	1000ca44 <ble_pair_key_request_handler+0xc8>
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000ca76:	2000      	movs	r0, #0
}
1000ca78:	b005      	add	sp, #20
1000ca7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ca7c:	100177a4 	.word	0x100177a4
1000ca80:	1001576f 	.word	0x1001576f
1000ca84:	10016a10 	.word	0x10016a10
1000ca88:	100159e9 	.word	0x100159e9
1000ca8c:	10017be4 	.word	0x10017be4
1000ca90:	100158c9 	.word	0x100158c9
1000ca94:	1000d799 	.word	0x1000d799
1000ca98:	10017c0c 	.word	0x10017c0c
1000ca9c:	10017c18 	.word	0x10017c18
1000caa0:	1000f169 	.word	0x1000f169
1000caa4:	10017ac4 	.word	0x10017ac4
1000caa8:	100158fd 	.word	0x100158fd
1000caac:	10017c2c 	.word	0x10017c2c
1000cab0:	1000fc91 	.word	0x1000fc91
1000cab4:	10017c64 	.word	0x10017c64
1000cab8:	10017c7c 	.word	0x10017c7c
1000cabc:	10017c98 	.word	0x10017c98

1000cac0 <ble_encryption_request_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption requests */
at_ble_status_t ble_encryption_request_handler(void *params)
{
1000cac0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000cac2:	465f      	mov	r7, fp
1000cac4:	4656      	mov	r6, sl
1000cac6:	464d      	mov	r5, r9
1000cac8:	b4e0      	push	{r5, r6, r7}
1000caca:	0006      	movs	r6, r0
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000cacc:	8800      	ldrh	r0, [r0, #0]
1000cace:	4b49      	ldr	r3, [pc, #292]	; (1000cbf4 <ble_encryption_request_handler+0x134>)
1000cad0:	2200      	movs	r2, #0
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000cad2:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000cad4:	8919      	ldrh	r1, [r3, #8]
1000cad6:	4281      	cmp	r1, r0
1000cad8:	d137      	bne.n	1000cb4a <ble_encryption_request_handler+0x8a>
1000cada:	0019      	movs	r1, r3
1000cadc:	315e      	adds	r1, #94	; 0x5e
1000cade:	7809      	ldrb	r1, [r1, #0]
1000cae0:	2901      	cmp	r1, #1
1000cae2:	d932      	bls.n	1000cb4a <ble_encryption_request_handler+0x8a>
		(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE))
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000cae4:	4f43      	ldr	r7, [pc, #268]	; (1000cbf4 <ble_encryption_request_handler+0x134>)
1000cae6:	0153      	lsls	r3, r2, #5
1000cae8:	1a9d      	subs	r5, r3, r2
1000caea:	00ad      	lsls	r5, r5, #2
1000caec:	197d      	adds	r5, r7, r5
1000caee:	355e      	adds	r5, #94	; 0x5e
1000caf0:	2306      	movs	r3, #6
1000caf2:	702b      	strb	r3, [r5, #0]
			DBG_LOG_DEV("ENC-Req: Conn Handle Device Found:hdl:%d", enc_req->handle);
1000caf4:	4840      	ldr	r0, [pc, #256]	; (1000cbf8 <ble_encryption_request_handler+0x138>)
1000caf6:	4b41      	ldr	r3, [pc, #260]	; (1000cbfc <ble_encryption_request_handler+0x13c>)
1000caf8:	469a      	mov	sl, r3
1000cafa:	4798      	blx	r3
1000cafc:	8831      	ldrh	r1, [r6, #0]
1000cafe:	4840      	ldr	r0, [pc, #256]	; (1000cc00 <ble_encryption_request_handler+0x140>)
1000cb00:	4b40      	ldr	r3, [pc, #256]	; (1000cc04 <ble_encryption_request_handler+0x144>)
1000cb02:	4699      	mov	r9, r3
1000cb04:	4798      	blx	r3
		}
	}
	
	if (device_found)
	{
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
1000cb06:	483c      	ldr	r0, [pc, #240]	; (1000cbf8 <ble_encryption_request_handler+0x138>)
1000cb08:	47d0      	blx	sl
1000cb0a:	0163      	lsls	r3, r4, #5
1000cb0c:	1b1b      	subs	r3, r3, r4
1000cb0e:	009b      	lsls	r3, r3, #2
1000cb10:	18ff      	adds	r7, r7, r3
1000cb12:	2370      	movs	r3, #112	; 0x70
1000cb14:	469b      	mov	fp, r3
1000cb16:	44bb      	add	fp, r7
1000cb18:	465b      	mov	r3, fp
1000cb1a:	8819      	ldrh	r1, [r3, #0]
1000cb1c:	483a      	ldr	r0, [pc, #232]	; (1000cc08 <ble_encryption_request_handler+0x148>)
1000cb1e:	47c8      	blx	r9
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
1000cb20:	4835      	ldr	r0, [pc, #212]	; (1000cbf8 <ble_encryption_request_handler+0x138>)
1000cb22:	47d0      	blx	sl
1000cb24:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
1000cb26:	4839      	ldr	r0, [pc, #228]	; (1000cc0c <ble_encryption_request_handler+0x14c>)
1000cb28:	47c8      	blx	r9
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
1000cb2a:	4833      	ldr	r0, [pc, #204]	; (1000cbf8 <ble_encryption_request_handler+0x138>)
1000cb2c:	47d0      	blx	sl
1000cb2e:	8871      	ldrh	r1, [r6, #2]
1000cb30:	4837      	ldr	r0, [pc, #220]	; (1000cc10 <ble_encryption_request_handler+0x150>)
1000cb32:	47c8      	blx	r9
		DBG_LOG_DEV("The index is %d",idx);
1000cb34:	4830      	ldr	r0, [pc, #192]	; (1000cbf8 <ble_encryption_request_handler+0x138>)
1000cb36:	47d0      	blx	sl
1000cb38:	0021      	movs	r1, r4
1000cb3a:	4836      	ldr	r0, [pc, #216]	; (1000cc14 <ble_encryption_request_handler+0x154>)
1000cb3c:	47c8      	blx	r9
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
1000cb3e:	465b      	mov	r3, fp
1000cb40:	881a      	ldrh	r2, [r3, #0]
1000cb42:	8873      	ldrh	r3, [r6, #2]
1000cb44:	429a      	cmp	r2, r3
1000cb46:	d12a      	bne.n	1000cb9e <ble_encryption_request_handler+0xde>
1000cb48:	e006      	b.n	1000cb58 <ble_encryption_request_handler+0x98>
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000cb4a:	3401      	adds	r4, #1
1000cb4c:	b2e4      	uxtb	r4, r4
1000cb4e:	3201      	adds	r2, #1
1000cb50:	337c      	adds	r3, #124	; 0x7c
1000cb52:	2c05      	cmp	r4, #5
1000cb54:	d1be      	bne.n	1000cad4 <ble_encryption_request_handler+0x14>
1000cb56:	e022      	b.n	1000cb9e <ble_encryption_request_handler+0xde>
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
		DBG_LOG_DEV("The index is %d",idx);
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
		&& !memcmp(&enc_req->nb[0],&ble_dev_info[idx].host_ltk.nb[0],8))
1000cb58:	0161      	lsls	r1, r4, #5
1000cb5a:	1b09      	subs	r1, r1, r4
1000cb5c:	0089      	lsls	r1, r1, #2
1000cb5e:	4b25      	ldr	r3, [pc, #148]	; (1000cbf4 <ble_encryption_request_handler+0x134>)
1000cb60:	1859      	adds	r1, r3, r1
1000cb62:	3172      	adds	r1, #114	; 0x72
1000cb64:	1d30      	adds	r0, r6, #4
1000cb66:	2208      	movs	r2, #8
1000cb68:	4b2b      	ldr	r3, [pc, #172]	; (1000cc18 <ble_encryption_request_handler+0x158>)
1000cb6a:	4798      	blx	r3
1000cb6c:	2800      	cmp	r0, #0
1000cb6e:	d116      	bne.n	1000cb9e <ble_encryption_request_handler+0xde>
		{
			key_found = true;
			DBG_LOG_DEV("ENC-Req: Key Found");
1000cb70:	4821      	ldr	r0, [pc, #132]	; (1000cbf8 <ble_encryption_request_handler+0x138>)
1000cb72:	4b22      	ldr	r3, [pc, #136]	; (1000cbfc <ble_encryption_request_handler+0x13c>)
1000cb74:	4798      	blx	r3
1000cb76:	4829      	ldr	r0, [pc, #164]	; (1000cc1c <ble_encryption_request_handler+0x15c>)
1000cb78:	4b22      	ldr	r3, [pc, #136]	; (1000cc04 <ble_encryption_request_handler+0x144>)
1000cb7a:	4798      	blx	r3
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
		return AT_BLE_FAILURE;
    }

	if(!(at_ble_encryption_request_reply(enc_req->handle, ble_dev_info[idx].bond_info.auth, key_found, &ble_dev_info[idx].host_ltk) == AT_BLE_SUCCESS))
1000cb7c:	0162      	lsls	r2, r4, #5
1000cb7e:	1b13      	subs	r3, r2, r4
1000cb80:	009b      	lsls	r3, r3, #2
1000cb82:	3360      	adds	r3, #96	; 0x60
1000cb84:	491b      	ldr	r1, [pc, #108]	; (1000cbf4 <ble_encryption_request_handler+0x134>)
1000cb86:	185b      	adds	r3, r3, r1
1000cb88:	1b12      	subs	r2, r2, r4
1000cb8a:	0092      	lsls	r2, r2, #2
1000cb8c:	188a      	adds	r2, r1, r2
1000cb8e:	7d11      	ldrb	r1, [r2, #20]
1000cb90:	8830      	ldrh	r0, [r6, #0]
1000cb92:	2201      	movs	r2, #1
1000cb94:	4c22      	ldr	r4, [pc, #136]	; (1000cc20 <ble_encryption_request_handler+0x160>)
1000cb96:	47a0      	blx	r4
1000cb98:	1e04      	subs	r4, r0, #0
1000cb9a:	d01e      	beq.n	1000cbda <ble_encryption_request_handler+0x11a>
1000cb9c:	e015      	b.n	1000cbca <ble_encryption_request_handler+0x10a>
	}
	
	
    if(key_found == false)
    {
	    DBG_LOG("Pairing information of peer device is not available.");
1000cb9e:	4f16      	ldr	r7, [pc, #88]	; (1000cbf8 <ble_encryption_request_handler+0x138>)
1000cba0:	0038      	movs	r0, r7
1000cba2:	4e16      	ldr	r6, [pc, #88]	; (1000cbfc <ble_encryption_request_handler+0x13c>)
1000cba4:	47b0      	blx	r6
1000cba6:	481f      	ldr	r0, [pc, #124]	; (1000cc24 <ble_encryption_request_handler+0x164>)
1000cba8:	4d16      	ldr	r5, [pc, #88]	; (1000cc04 <ble_encryption_request_handler+0x144>)
1000cbaa:	47a8      	blx	r5
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
1000cbac:	0038      	movs	r0, r7
1000cbae:	47b0      	blx	r6
1000cbb0:	481d      	ldr	r0, [pc, #116]	; (1000cc28 <ble_encryption_request_handler+0x168>)
1000cbb2:	47a8      	blx	r5
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
1000cbb4:	0163      	lsls	r3, r4, #5
1000cbb6:	1b1c      	subs	r4, r3, r4
1000cbb8:	00a4      	lsls	r4, r4, #2
1000cbba:	4b0e      	ldr	r3, [pc, #56]	; (1000cbf4 <ble_encryption_request_handler+0x134>)
1000cbbc:	191c      	adds	r4, r3, r4
1000cbbe:	8920      	ldrh	r0, [r4, #8]
1000cbc0:	2105      	movs	r1, #5
1000cbc2:	4b1a      	ldr	r3, [pc, #104]	; (1000cc2c <ble_encryption_request_handler+0x16c>)
1000cbc4:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000cbc6:	24e2      	movs	r4, #226	; 0xe2
1000cbc8:	e00d      	b.n	1000cbe6 <ble_encryption_request_handler+0x126>
    }

	if(!(at_ble_encryption_request_reply(enc_req->handle, ble_dev_info[idx].bond_info.auth, key_found, &ble_dev_info[idx].host_ltk) == AT_BLE_SUCCESS))
	{
		DBG_LOG("Encryption Request Reply Failed");
1000cbca:	480b      	ldr	r0, [pc, #44]	; (1000cbf8 <ble_encryption_request_handler+0x138>)
1000cbcc:	4b0b      	ldr	r3, [pc, #44]	; (1000cbfc <ble_encryption_request_handler+0x13c>)
1000cbce:	4798      	blx	r3
1000cbd0:	4817      	ldr	r0, [pc, #92]	; (1000cc30 <ble_encryption_request_handler+0x170>)
1000cbd2:	4b0c      	ldr	r3, [pc, #48]	; (1000cc04 <ble_encryption_request_handler+0x144>)
1000cbd4:	4798      	blx	r3
	}
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
	}
	return AT_BLE_SUCCESS;
1000cbd6:	2400      	movs	r4, #0
1000cbd8:	e005      	b.n	1000cbe6 <ble_encryption_request_handler+0x126>
	{
		DBG_LOG("Encryption Request Reply Failed");
	}
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
1000cbda:	4807      	ldr	r0, [pc, #28]	; (1000cbf8 <ble_encryption_request_handler+0x138>)
1000cbdc:	4b07      	ldr	r3, [pc, #28]	; (1000cbfc <ble_encryption_request_handler+0x13c>)
1000cbde:	4798      	blx	r3
1000cbe0:	4814      	ldr	r0, [pc, #80]	; (1000cc34 <ble_encryption_request_handler+0x174>)
1000cbe2:	4b08      	ldr	r3, [pc, #32]	; (1000cc04 <ble_encryption_request_handler+0x144>)
1000cbe4:	4798      	blx	r3
	}
	return AT_BLE_SUCCESS;
}
1000cbe6:	0020      	movs	r0, r4
1000cbe8:	bc1c      	pop	{r2, r3, r4}
1000cbea:	4691      	mov	r9, r2
1000cbec:	469a      	mov	sl, r3
1000cbee:	46a3      	mov	fp, r4
1000cbf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000cbf2:	46c0      	nop			; (mov r8, r8)
1000cbf4:	1001a3a8 	.word	0x1001a3a8
1000cbf8:	10016a10 	.word	0x10016a10
1000cbfc:	100159e9 	.word	0x100159e9
1000cc00:	10017cac 	.word	0x10017cac
1000cc04:	100158c9 	.word	0x100158c9
1000cc08:	10017cd8 	.word	0x10017cd8
1000cc0c:	10017cec 	.word	0x10017cec
1000cc10:	10017d00 	.word	0x10017d00
1000cc14:	10017d10 	.word	0x10017d10
1000cc18:	10015751 	.word	0x10015751
1000cc1c:	10017d20 	.word	0x10017d20
1000cc20:	1000fdc5 	.word	0x1000fdc5
1000cc24:	10017d34 	.word	0x10017d34
1000cc28:	10017d6c 	.word	0x10017d6c
1000cc2c:	1000f169 	.word	0x1000f169
1000cc30:	10017dc4 	.word	0x10017dc4
1000cc34:	10017de4 	.word	0x10017de4

1000cc38 <ble_mgr_events_callback_handler>:
}

bool ble_mgr_events_callback_handler(ble_mgr_event_cb_t event_cb_type, 
									ble_mgr_event_t event_type,
									const ble_event_callback_t *ble_event_handler)
{
1000cc38:	b530      	push	{r4, r5, lr}
	uint8_t idx;
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
1000cc3a:	2a00      	cmp	r2, #0
1000cc3c:	d047      	beq.n	1000ccce <ble_mgr_events_callback_handler+0x96>
	{
		switch(event_type)
1000cc3e:	2906      	cmp	r1, #6
1000cc40:	d847      	bhi.n	1000ccd2 <ble_mgr_events_callback_handler+0x9a>
1000cc42:	0089      	lsls	r1, r1, #2
1000cc44:	4b28      	ldr	r3, [pc, #160]	; (1000cce8 <ble_mgr_events_callback_handler+0xb0>)
1000cc46:	585b      	ldr	r3, [r3, r1]
1000cc48:	469f      	mov	pc, r3
			}
			break;
			
			case BLE_GATT_SERVER_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_server_event_cb;
1000cc4a:	4b28      	ldr	r3, [pc, #160]	; (1000ccec <ble_mgr_events_callback_handler+0xb4>)
				max_event_handler = MAX_GATT_SERVER_SUBSCRIBERS;
1000cc4c:	2405      	movs	r4, #5
1000cc4e:	e00a      	b.n	1000cc66 <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_GATT_HTPT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_htpt_event_cb;
1000cc50:	4b27      	ldr	r3, [pc, #156]	; (1000ccf0 <ble_mgr_events_callback_handler+0xb8>)
				max_event_handler = MAX_HTPT_EVENT_SUBSCRIBERS;
1000cc52:	2401      	movs	r4, #1
			}
			break;
1000cc54:	e007      	b.n	1000cc66 <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_DTM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_dtm_event_cb;
1000cc56:	4b27      	ldr	r3, [pc, #156]	; (1000ccf4 <ble_mgr_events_callback_handler+0xbc>)
				max_event_handler = MAX_DTM_EVENT_SUBSCRIBERS;
1000cc58:	2405      	movs	r4, #5
			}
			break;
1000cc5a:	e004      	b.n	1000cc66 <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_CUSTOM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_custom_event_cb;
1000cc5c:	4b26      	ldr	r3, [pc, #152]	; (1000ccf8 <ble_mgr_events_callback_handler+0xc0>)
				max_event_handler = MAX_CUSTOM_EVENT_SUBSCRIBERS;
1000cc5e:	2401      	movs	r4, #1
			}
			break;
1000cc60:	e001      	b.n	1000cc66 <ble_mgr_events_callback_handler+0x2e>
	{
		switch(event_type)
		{
			case BLE_GAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gap_event_cb;
1000cc62:	4b26      	ldr	r3, [pc, #152]	; (1000ccfc <ble_mgr_events_callback_handler+0xc4>)
				max_event_handler = MAX_GAP_EVENT_SUBSCRIBERS;
1000cc64:	2405      	movs	r4, #5
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
1000cc66:	2800      	cmp	r0, #0
1000cc68:	d116      	bne.n	1000cc98 <ble_mgr_events_callback_handler+0x60>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000cc6a:	6819      	ldr	r1, [r3, #0]
1000cc6c:	2900      	cmp	r1, #0
1000cc6e:	d10b      	bne.n	1000cc88 <ble_mgr_events_callback_handler+0x50>
1000cc70:	e006      	b.n	1000cc80 <ble_mgr_events_callback_handler+0x48>
1000cc72:	001d      	movs	r5, r3
1000cc74:	3304      	adds	r3, #4
1000cc76:	1f18      	subs	r0, r3, #4
1000cc78:	6800      	ldr	r0, [r0, #0]
1000cc7a:	2800      	cmp	r0, #0
1000cc7c:	d106      	bne.n	1000cc8c <ble_mgr_events_callback_handler+0x54>
1000cc7e:	e000      	b.n	1000cc82 <ble_mgr_events_callback_handler+0x4a>
1000cc80:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = ble_event_handler;
1000cc82:	602a      	str	r2, [r5, #0]
						status = true; //Successfully registered to table
1000cc84:	2101      	movs	r1, #1
						break;
1000cc86:	e02c      	b.n	1000cce2 <ble_mgr_events_callback_handler+0xaa>
1000cc88:	3304      	adds	r3, #4
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000cc8a:	2100      	movs	r1, #0
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000cc8c:	3101      	adds	r1, #1
1000cc8e:	b2c9      	uxtb	r1, r1
1000cc90:	42a1      	cmp	r1, r4
1000cc92:	d3ee      	bcc.n	1000cc72 <ble_mgr_events_callback_handler+0x3a>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000cc94:	2100      	movs	r1, #0
1000cc96:	e024      	b.n	1000cce2 <ble_mgr_events_callback_handler+0xaa>
1000cc98:	2100      	movs	r1, #0
						status = true; //Successfully registered to table
						break;
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
1000cc9a:	2801      	cmp	r0, #1
1000cc9c:	d121      	bne.n	1000cce2 <ble_mgr_events_callback_handler+0xaa>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000cc9e:	6819      	ldr	r1, [r3, #0]
1000cca0:	428a      	cmp	r2, r1
1000cca2:	d10c      	bne.n	1000ccbe <ble_mgr_events_callback_handler+0x86>
1000cca4:	e006      	b.n	1000ccb4 <ble_mgr_events_callback_handler+0x7c>
1000cca6:	001d      	movs	r5, r3
1000cca8:	3304      	adds	r3, #4
1000ccaa:	1f18      	subs	r0, r3, #4
1000ccac:	6800      	ldr	r0, [r0, #0]
1000ccae:	4282      	cmp	r2, r0
1000ccb0:	d107      	bne.n	1000ccc2 <ble_mgr_events_callback_handler+0x8a>
1000ccb2:	e000      	b.n	1000ccb6 <ble_mgr_events_callback_handler+0x7e>
1000ccb4:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = NULL;
1000ccb6:	2300      	movs	r3, #0
1000ccb8:	602b      	str	r3, [r5, #0]
						status = true;//Successfully unregistered from table
1000ccba:	2101      	movs	r1, #1
						break;
1000ccbc:	e011      	b.n	1000cce2 <ble_mgr_events_callback_handler+0xaa>
1000ccbe:	3304      	adds	r3, #4
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000ccc0:	2100      	movs	r1, #0
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000ccc2:	3101      	adds	r1, #1
1000ccc4:	b2c9      	uxtb	r1, r1
1000ccc6:	42a1      	cmp	r1, r4
1000ccc8:	d3ed      	bcc.n	1000cca6 <ble_mgr_events_callback_handler+0x6e>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000ccca:	2100      	movs	r1, #0
1000cccc:	e009      	b.n	1000cce2 <ble_mgr_events_callback_handler+0xaa>
			}			
		}
	}
	else
	{
		status = false; //Invalid parameter
1000ccce:	2100      	movs	r1, #0
1000ccd0:	e007      	b.n	1000cce2 <ble_mgr_events_callback_handler+0xaa>
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
	{
		switch(event_type)
1000ccd2:	2100      	movs	r1, #0
1000ccd4:	e005      	b.n	1000cce2 <ble_mgr_events_callback_handler+0xaa>
			}
			break;
			
			case BLE_GATT_CLIENT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_client_event_cb;
1000ccd6:	4b0a      	ldr	r3, [pc, #40]	; (1000cd00 <ble_mgr_events_callback_handler+0xc8>)
				max_event_handler = MAX_GATT_CLIENT_SUBSCRIBERS;
1000ccd8:	2405      	movs	r4, #5
1000ccda:	e7c4      	b.n	1000cc66 <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_L2CAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_l2cap_event_cb;
1000ccdc:	4b09      	ldr	r3, [pc, #36]	; (1000cd04 <ble_mgr_events_callback_handler+0xcc>)
				max_event_handler = MAX_L2CAP_EVENT_SUBSCRIBERS;
1000ccde:	2401      	movs	r4, #1
1000cce0:	e7c1      	b.n	1000cc66 <ble_mgr_events_callback_handler+0x2e>
	else
	{
		status = false; //Invalid parameter
	}
	return status;
}
1000cce2:	0008      	movs	r0, r1
1000cce4:	bd30      	pop	{r4, r5, pc}
1000cce6:	46c0      	nop			; (mov r8, r8)
1000cce8:	10017698 	.word	0x10017698
1000ccec:	1001a394 	.word	0x1001a394
1000ccf0:	1001a390 	.word	0x1001a390
1000ccf4:	1001a618 	.word	0x1001a618
1000ccf8:	1001abcc 	.word	0x1001abcc
1000ccfc:	1001a62c 	.word	0x1001a62c
1000cd00:	1001a640 	.word	0x1001a640
1000cd04:	1001a688 	.word	0x1001a688

1000cd08 <ble_device_init>:
volatile uint32_t 	event_params_memory[1024] 	= {0};


/** @brief BLE device initialization */
void ble_device_init(at_ble_addr_t *addr)
{
1000cd08:	b5f0      	push	{r4, r5, r6, r7, lr}
1000cd0a:	465f      	mov	r7, fp
1000cd0c:	4656      	mov	r6, sl
1000cd0e:	464d      	mov	r5, r9
1000cd10:	4644      	mov	r4, r8
1000cd12:	b4f0      	push	{r4, r5, r6, r7}
1000cd14:	b091      	sub	sp, #68	; 0x44
1000cd16:	0005      	movs	r5, r0
static bool ble_scan_duplication_check(at_ble_scan_info_t * info);
#endif

static void init_global_var(void)
{
	ble_user_event_cb = 0;
1000cd18:	2400      	movs	r4, #0
1000cd1a:	4b7e      	ldr	r3, [pc, #504]	; (1000cf14 <ble_device_init+0x20c>)
1000cd1c:	601c      	str	r4, [r3, #0]
	
	memset(&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000cd1e:	2207      	movs	r2, #7
1000cd20:	2100      	movs	r1, #0
1000cd22:	487d      	ldr	r0, [pc, #500]	; (1000cf18 <ble_device_init+0x210>)
1000cd24:	4e7d      	ldr	r6, [pc, #500]	; (1000cf1c <ble_device_init+0x214>)
1000cd26:	47b0      	blx	r6
	memset(&connected_state_info, 0, sizeof(at_ble_connected_t));
1000cd28:	2212      	movs	r2, #18
1000cd2a:	2100      	movs	r1, #0
1000cd2c:	487c      	ldr	r0, [pc, #496]	; (1000cf20 <ble_device_init+0x218>)
1000cd2e:	47b0      	blx	r6
		
#if defined ATT_DB_MEMORY
	memset(att_db_data, 0, sizeof(uint32_t) * BLE_ATT_DB_MEMORY_SIZE/4);
1000cd30:	4a7c      	ldr	r2, [pc, #496]	; (1000cf24 <ble_device_init+0x21c>)
1000cd32:	2100      	movs	r1, #0
1000cd34:	487c      	ldr	r0, [pc, #496]	; (1000cf28 <ble_device_init+0x220>)
1000cd36:	47b0      	blx	r6
#endif

	scan_response_count = 0;
1000cd38:	4b7c      	ldr	r3, [pc, #496]	; (1000cf2c <ble_device_init+0x224>)
1000cd3a:	701c      	strb	r4, [r3, #0]
	memset(scan_info, 0, sizeof(scan_info));
1000cd3c:	22cd      	movs	r2, #205	; 0xcd
1000cd3e:	0092      	lsls	r2, r2, #2
1000cd40:	2100      	movs	r1, #0
1000cd42:	487b      	ldr	r0, [pc, #492]	; (1000cf30 <ble_device_init+0x228>)
1000cd44:	47b0      	blx	r6

	event = AT_BLE_UNDEFINED_EVENT;
1000cd46:	4b7b      	ldr	r3, [pc, #492]	; (1000cf34 <ble_device_init+0x22c>)
1000cd48:	701c      	strb	r4, [r3, #0]
	memset(ble_event_params, 0, BLE_EVENT_PARAM_MAX_SIZE);
1000cd4a:	2283      	movs	r2, #131	; 0x83
1000cd4c:	0092      	lsls	r2, r2, #2
1000cd4e:	2100      	movs	r1, #0
1000cd50:	4879      	ldr	r0, [pc, #484]	; (1000cf38 <ble_device_init+0x230>)
1000cd52:	47b0      	blx	r6
{
	uint8_t idx;	
	char *dev_name = NULL;
	init_global_var();

	memset((uint8_t *)event_pool_memory, 0, sizeof(event_pool_memory));
1000cd54:	4b79      	ldr	r3, [pc, #484]	; (1000cf3c <ble_device_init+0x234>)
1000cd56:	469b      	mov	fp, r3
1000cd58:	2380      	movs	r3, #128	; 0x80
1000cd5a:	00db      	lsls	r3, r3, #3
1000cd5c:	469a      	mov	sl, r3
1000cd5e:	001a      	movs	r2, r3
1000cd60:	2100      	movs	r1, #0
1000cd62:	4658      	mov	r0, fp
1000cd64:	47b0      	blx	r6
	memset((uint8_t *)event_params_memory, 0, sizeof(event_params_memory));
1000cd66:	4b76      	ldr	r3, [pc, #472]	; (1000cf40 <ble_device_init+0x238>)
1000cd68:	4699      	mov	r9, r3
1000cd6a:	2380      	movs	r3, #128	; 0x80
1000cd6c:	015b      	lsls	r3, r3, #5
1000cd6e:	4698      	mov	r8, r3
1000cd70:	001a      	movs	r2, r3
1000cd72:	2100      	movs	r1, #0
1000cd74:	4648      	mov	r0, r9
1000cd76:	47b0      	blx	r6

	memset(&pf_cfg, 0, sizeof(pf_cfg));
1000cd78:	4f72      	ldr	r7, [pc, #456]	; (1000cf44 <ble_device_init+0x23c>)
1000cd7a:	221c      	movs	r2, #28
1000cd7c:	2100      	movs	r1, #0
1000cd7e:	0038      	movs	r0, r7
1000cd80:	47b0      	blx	r6

	pf_cfg.event_mem_pool.memStartAdd        = (uint8_t *)event_pool_memory;
1000cd82:	465b      	mov	r3, fp
1000cd84:	60bb      	str	r3, [r7, #8]
	pf_cfg.event_mem_pool.memSize            = sizeof(event_pool_memory);
1000cd86:	4653      	mov	r3, sl
1000cd88:	60fb      	str	r3, [r7, #12]
	pf_cfg.event_params_mem_pool.memStartAdd = (uint8_t *)event_params_memory;
1000cd8a:	464b      	mov	r3, r9
1000cd8c:	613b      	str	r3, [r7, #16]
	pf_cfg.event_params_mem_pool.memSize     = sizeof(event_params_memory);
1000cd8e:	4643      	mov	r3, r8
1000cd90:	617b      	str	r3, [r7, #20]

	/* Initialize the BLE Event callbacks */
	for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gap_event_cb[idx] = NULL;
1000cd92:	4b6d      	ldr	r3, [pc, #436]	; (1000cf48 <ble_device_init+0x240>)
1000cd94:	601c      	str	r4, [r3, #0]
1000cd96:	605c      	str	r4, [r3, #4]
1000cd98:	609c      	str	r4, [r3, #8]
1000cd9a:	60dc      	str	r4, [r3, #12]
1000cd9c:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_client_event_cb[idx] = NULL;
1000cd9e:	4b6b      	ldr	r3, [pc, #428]	; (1000cf4c <ble_device_init+0x244>)
1000cda0:	601c      	str	r4, [r3, #0]
1000cda2:	605c      	str	r4, [r3, #4]
1000cda4:	609c      	str	r4, [r3, #8]
1000cda6:	60dc      	str	r4, [r3, #12]
1000cda8:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_server_event_cb[idx] = NULL;
1000cdaa:	4b69      	ldr	r3, [pc, #420]	; (1000cf50 <ble_device_init+0x248>)
1000cdac:	601c      	str	r4, [r3, #0]
1000cdae:	605c      	str	r4, [r3, #4]
1000cdb0:	609c      	str	r4, [r3, #8]
1000cdb2:	60dc      	str	r4, [r3, #12]
1000cdb4:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_l2cap_event_cb[idx] = NULL;
1000cdb6:	4b67      	ldr	r3, [pc, #412]	; (1000cf54 <ble_device_init+0x24c>)
1000cdb8:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_htpt_event_cb[idx] = NULL;
1000cdba:	4b67      	ldr	r3, [pc, #412]	; (1000cf58 <ble_device_init+0x250>)
1000cdbc:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_dtm_event_cb[idx] = NULL;
1000cdbe:	4b67      	ldr	r3, [pc, #412]	; (1000cf5c <ble_device_init+0x254>)
1000cdc0:	601c      	str	r4, [r3, #0]
1000cdc2:	605c      	str	r4, [r3, #4]
1000cdc4:	609c      	str	r4, [r3, #8]
1000cdc6:	60dc      	str	r4, [r3, #12]
1000cdc8:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_custom_event_cb[idx] = NULL;
1000cdca:	4b65      	ldr	r3, [pc, #404]	; (1000cf60 <ble_device_init+0x258>)
1000cdcc:	601c      	str	r4, [r3, #0]
1000cdce:	4c65      	ldr	r4, [pc, #404]	; (1000cf64 <ble_device_init+0x25c>)
1000cdd0:	239b      	movs	r3, #155	; 0x9b
1000cdd2:	009b      	lsls	r3, r3, #2
1000cdd4:	4698      	mov	r8, r3
1000cdd6:	44a0      	add	r8, r4
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000cdd8:	4f50      	ldr	r7, [pc, #320]	; (1000cf1c <ble_device_init+0x214>)
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000cdda:	2640      	movs	r6, #64	; 0x40
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000cddc:	227c      	movs	r2, #124	; 0x7c
1000cdde:	2100      	movs	r1, #0
1000cde0:	0020      	movs	r0, r4
1000cde2:	47b8      	blx	r7
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000cde4:	0023      	movs	r3, r4
1000cde6:	335e      	adds	r3, #94	; 0x5e
1000cde8:	2200      	movs	r2, #0
1000cdea:	701a      	strb	r2, [r3, #0]
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000cdec:	7626      	strb	r6, [r4, #24]
1000cdee:	347c      	adds	r4, #124	; 0x7c
	{
		ble_mgr_custom_event_cb[idx] = NULL;
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000cdf0:	45a0      	cmp	r8, r4
1000cdf2:	d1f3      	bne.n	1000cddc <ble_device_init+0xd4>
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
    }
	/* Need to reset the count to 0 for storing it only in SRAM */
	ble_device_count = 0; 
1000cdf4:	4b5c      	ldr	r3, [pc, #368]	; (1000cf68 <ble_device_init+0x260>)
1000cdf6:	701a      	strb	r2, [r3, #0]
	
	
#if defined ATT_DB_MEMORY
	pf_cfg.memPool.memSize = BLE_ATT_DB_MEMORY_SIZE;
1000cdf8:	4c52      	ldr	r4, [pc, #328]	; (1000cf44 <ble_device_init+0x23c>)
1000cdfa:	4b4a      	ldr	r3, [pc, #296]	; (1000cf24 <ble_device_init+0x21c>)
1000cdfc:	6063      	str	r3, [r4, #4]
	pf_cfg.memPool.memStartAdd = (uint8_t *)att_db_data;
1000cdfe:	4b4a      	ldr	r3, [pc, #296]	; (1000cf28 <ble_device_init+0x220>)
1000ce00:	6023      	str	r3, [r4, #0]

/* Initialize the BLE */
static void ble_init(at_ble_init_config_t * args)
{
	/* Initialize the platform */
	DBG_LOG_DEV("[ble_init]\t\t\tInitializing SAMB11");
1000ce02:	485a      	ldr	r0, [pc, #360]	; (1000cf6c <ble_device_init+0x264>)
1000ce04:	4b5a      	ldr	r3, [pc, #360]	; (1000cf70 <ble_device_init+0x268>)
1000ce06:	4798      	blx	r3
1000ce08:	485a      	ldr	r0, [pc, #360]	; (1000cf74 <ble_device_init+0x26c>)
1000ce0a:	4b5b      	ldr	r3, [pc, #364]	; (1000cf78 <ble_device_init+0x270>)
1000ce0c:	4798      	blx	r3
	
	/* Init BLE device */
	if(at_ble_init(args) != AT_BLE_SUCCESS)
1000ce0e:	0020      	movs	r0, r4
1000ce10:	4b5a      	ldr	r3, [pc, #360]	; (1000cf7c <ble_device_init+0x274>)
1000ce12:	4798      	blx	r3
1000ce14:	2800      	cmp	r0, #0
1000ce16:	d00b      	beq.n	1000ce30 <ble_device_init+0x128>
	{
		DBG_LOG("[ble_init]\t\tSAMB11 Initialization failed");
1000ce18:	4e54      	ldr	r6, [pc, #336]	; (1000cf6c <ble_device_init+0x264>)
1000ce1a:	0030      	movs	r0, r6
1000ce1c:	4d54      	ldr	r5, [pc, #336]	; (1000cf70 <ble_device_init+0x268>)
1000ce1e:	47a8      	blx	r5
1000ce20:	4857      	ldr	r0, [pc, #348]	; (1000cf80 <ble_device_init+0x278>)
1000ce22:	4c55      	ldr	r4, [pc, #340]	; (1000cf78 <ble_device_init+0x270>)
1000ce24:	47a0      	blx	r4
		DBG_LOG("[ble_init]\t\tPlease check the power and connection / hardware connector");	
1000ce26:	0030      	movs	r0, r6
1000ce28:	47a8      	blx	r5
1000ce2a:	4856      	ldr	r0, [pc, #344]	; (1000cf84 <ble_device_init+0x27c>)
1000ce2c:	47a0      	blx	r4
1000ce2e:	e7fe      	b.n	1000ce2e <ble_device_init+0x126>
#endif
	
	ble_init(&pf_cfg);

	/* Register it in first index of callback handler */
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, 
1000ce30:	4a55      	ldr	r2, [pc, #340]	; (1000cf88 <ble_device_init+0x280>)
1000ce32:	2100      	movs	r1, #0
1000ce34:	2000      	movs	r0, #0
1000ce36:	4c55      	ldr	r4, [pc, #340]	; (1000cf8c <ble_device_init+0x284>)
1000ce38:	47a0      	blx	r4
									BLE_GAP_EVENT_TYPE, 
									ble_mgr_gap_handle);
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
1000ce3a:	4a55      	ldr	r2, [pc, #340]	; (1000cf90 <ble_device_init+0x288>)
1000ce3c:	2102      	movs	r1, #2
1000ce3e:	2000      	movs	r0, #0
1000ce40:	47a0      	blx	r4
{
	if ((name == NULL) || (name_len < 1))
	{
		return AT_BLE_INVALID_PARAM;
	}
	return at_ble_device_name_set(name, name_len);
1000ce42:	2109      	movs	r1, #9
1000ce44:	4853      	ldr	r0, [pc, #332]	; (1000cf94 <ble_device_init+0x28c>)
1000ce46:	4b54      	ldr	r3, [pc, #336]	; (1000cf98 <ble_device_init+0x290>)
1000ce48:	4798      	blx	r3
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
									BLE_GATT_SERVER_EVENT_TYPE,
									ble_mgr_gatt_server_handle);
									
	dev_name = (char *)BLE_DEVICE_NAME;
	if (ble_set_device_name((uint8_t *)dev_name, strlen(dev_name)) != AT_BLE_SUCCESS)
1000ce4a:	2800      	cmp	r0, #0
1000ce4c:	d005      	beq.n	1000ce5a <ble_device_init+0x152>
	{
		DBG_LOG("Device name set failed");
1000ce4e:	4847      	ldr	r0, [pc, #284]	; (1000cf6c <ble_device_init+0x264>)
1000ce50:	4b47      	ldr	r3, [pc, #284]	; (1000cf70 <ble_device_init+0x268>)
1000ce52:	4798      	blx	r3
1000ce54:	4851      	ldr	r0, [pc, #324]	; (1000cf9c <ble_device_init+0x294>)
1000ce56:	4b48      	ldr	r3, [pc, #288]	; (1000cf78 <ble_device_init+0x270>)
1000ce58:	4798      	blx	r3

/* Set BLE Address and device configuration, If address is NULL then it will use BD public address */
static void ble_set_dev_config(at_ble_addr_t *addr)
{
	at_ble_dev_config_t stDevConfig;
	at_ble_addr_t address = {AT_BLE_ADDRESS_PUBLIC, {0xAB, 0xCD, 0xEF, 0xAB, 0xCD, 0xEF}};
1000ce5a:	2207      	movs	r2, #7
1000ce5c:	4950      	ldr	r1, [pc, #320]	; (1000cfa0 <ble_device_init+0x298>)
1000ce5e:	3108      	adds	r1, #8
1000ce60:	a804      	add	r0, sp, #16
1000ce62:	4b50      	ldr	r3, [pc, #320]	; (1000cfa4 <ble_device_init+0x29c>)
1000ce64:	4798      	blx	r3
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
1000ce66:	2226      	movs	r2, #38	; 0x26
1000ce68:	2100      	movs	r1, #0
1000ce6a:	a806      	add	r0, sp, #24
1000ce6c:	4b2b      	ldr	r3, [pc, #172]	; (1000cf1c <ble_device_init+0x214>)
1000ce6e:	4798      	blx	r3
	
	if (addr == NULL)
1000ce70:	2d00      	cmp	r5, #0
1000ce72:	d10c      	bne.n	1000ce8e <ble_device_init+0x186>
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000ce74:	a804      	add	r0, sp, #16
1000ce76:	4b4c      	ldr	r3, [pc, #304]	; (1000cfa8 <ble_device_init+0x2a0>)
1000ce78:	4798      	blx	r3
		{
			DBG_LOG("[ble_set_dev_config]\t\tBD address get failed");
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000ce7a:	ad04      	add	r5, sp, #16
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
	
	if (addr == NULL)
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000ce7c:	2800      	cmp	r0, #0
1000ce7e:	d006      	beq.n	1000ce8e <ble_device_init+0x186>
		{
			DBG_LOG("[ble_set_dev_config]\t\tBD address get failed");
1000ce80:	483a      	ldr	r0, [pc, #232]	; (1000cf6c <ble_device_init+0x264>)
1000ce82:	4b3b      	ldr	r3, [pc, #236]	; (1000cf70 <ble_device_init+0x268>)
1000ce84:	4798      	blx	r3
1000ce86:	4849      	ldr	r0, [pc, #292]	; (1000cfac <ble_device_init+0x2a4>)
1000ce88:	4b3b      	ldr	r3, [pc, #236]	; (1000cf78 <ble_device_init+0x270>)
1000ce8a:	4798      	blx	r3
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000ce8c:	ad04      	add	r5, sp, #16
	}
	
	DBG_LOG_DEV("[ble_set_dev_config]\t\tBD Address:0x%02X%02X%02X%02X%02X%02X, Address Type:%d",
1000ce8e:	4837      	ldr	r0, [pc, #220]	; (1000cf6c <ble_device_init+0x264>)
1000ce90:	4b37      	ldr	r3, [pc, #220]	; (1000cf70 <ble_device_init+0x268>)
1000ce92:	4798      	blx	r3
1000ce94:	792b      	ldrb	r3, [r5, #4]
1000ce96:	796a      	ldrb	r2, [r5, #5]
1000ce98:	79a9      	ldrb	r1, [r5, #6]
1000ce9a:	7828      	ldrb	r0, [r5, #0]
1000ce9c:	9003      	str	r0, [sp, #12]
1000ce9e:	7868      	ldrb	r0, [r5, #1]
1000cea0:	9002      	str	r0, [sp, #8]
1000cea2:	78a8      	ldrb	r0, [r5, #2]
1000cea4:	9001      	str	r0, [sp, #4]
1000cea6:	78e8      	ldrb	r0, [r5, #3]
1000cea8:	9000      	str	r0, [sp, #0]
1000ceaa:	4841      	ldr	r0, [pc, #260]	; (1000cfb0 <ble_device_init+0x2a8>)
1000ceac:	4c32      	ldr	r4, [pc, #200]	; (1000cf78 <ble_device_init+0x270>)
1000ceae:	47a0      	blx	r4
	addr->addr[1],
	addr->addr[0], addr->type);
	
	/* Set device configuration */
	/* Device role */
	stDevConfig.role = (at_ble_dev_role_t)BLE_DEVICE_ROLE;
1000ceb0:	ac06      	add	r4, sp, #24
1000ceb2:	230a      	movs	r3, #10
1000ceb4:	7023      	strb	r3, [r4, #0]
	/* device renew duration */
	stDevConfig.renew_dur = AT_RENEW_DUR_VAL_MIN;
1000ceb6:	4b3f      	ldr	r3, [pc, #252]	; (1000cfb4 <ble_device_init+0x2ac>)
1000ceb8:	8063      	strh	r3, [r4, #2]
	/* device address type */
	memcpy((uint8_t *)&stDevConfig.address, (uint8_t *)addr, sizeof(at_ble_addr_t));
1000ceba:	2207      	movs	r2, #7
1000cebc:	0029      	movs	r1, r5
1000cebe:	a807      	add	r0, sp, #28
1000cec0:	4b38      	ldr	r3, [pc, #224]	; (1000cfa4 <ble_device_init+0x29c>)
1000cec2:	4798      	blx	r3
	/* Attributes */
	stDevConfig.att_cfg.b2NamePerm = AT_BLE_WRITE_DISABLE;
1000cec4:	2300      	movs	r3, #0
1000cec6:	76e3      	strb	r3, [r4, #27]
	stDevConfig.att_cfg.b2AppearancePerm = AT_BLE_WRITE_DISABLE;
1000cec8:	7723      	strb	r3, [r4, #28]
	stDevConfig.att_cfg.b1EnableSpcs = 0;
1000ceca:	7763      	strb	r3, [r4, #29]
	stDevConfig.att_cfg.b1EnableServiceChanged = 0;
1000cecc:	77a3      	strb	r3, [r4, #30]
	stDevConfig.att_cfg.b2Rfu = AT_BLE_WRITE_DISABLE;
1000cece:	77e3      	strb	r3, [r4, #31]
	/* Handles */
	stDevConfig.gap_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000ced0:	8423      	strh	r3, [r4, #32]
	stDevConfig.gatt_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000ced2:	8463      	strh	r3, [r4, #34]	; 0x22
	/* MTU */
	stDevConfig.max_mtu = AT_MTU_VAL_RECOMMENDED;
1000ced4:	2380      	movs	r3, #128	; 0x80
1000ced6:	009b      	lsls	r3, r3, #2
1000ced8:	84a3      	strh	r3, [r4, #36]	; 0x24
	
	if(at_ble_set_dev_config(&stDevConfig) != AT_BLE_SUCCESS)
1000ceda:	0020      	movs	r0, r4
1000cedc:	4b36      	ldr	r3, [pc, #216]	; (1000cfb8 <ble_device_init+0x2b0>)
1000cede:	4798      	blx	r3
1000cee0:	2800      	cmp	r0, #0
1000cee2:	d005      	beq.n	1000cef0 <ble_device_init+0x1e8>
	{
		DBG_LOG("[ble_set_dev_config]\tSet BLE Device configuration failed");
1000cee4:	4821      	ldr	r0, [pc, #132]	; (1000cf6c <ble_device_init+0x264>)
1000cee6:	4b22      	ldr	r3, [pc, #136]	; (1000cf70 <ble_device_init+0x268>)
1000cee8:	4798      	blx	r3
1000ceea:	4834      	ldr	r0, [pc, #208]	; (1000cfbc <ble_device_init+0x2b4>)
1000ceec:	4b22      	ldr	r3, [pc, #136]	; (1000cf78 <ble_device_init+0x270>)
1000ceee:	4798      	blx	r3
	}
	
	if (at_ble_addr_set(addr) != AT_BLE_SUCCESS)
1000cef0:	0028      	movs	r0, r5
1000cef2:	4b33      	ldr	r3, [pc, #204]	; (1000cfc0 <ble_device_init+0x2b8>)
1000cef4:	4798      	blx	r3
1000cef6:	2800      	cmp	r0, #0
1000cef8:	d005      	beq.n	1000cf06 <ble_device_init+0x1fe>
	{
		DBG_LOG("[ble_set_dev_config]\tSet BLE Device Address failed");
1000cefa:	481c      	ldr	r0, [pc, #112]	; (1000cf6c <ble_device_init+0x264>)
1000cefc:	4b1c      	ldr	r3, [pc, #112]	; (1000cf70 <ble_device_init+0x268>)
1000cefe:	4798      	blx	r3
1000cf00:	4830      	ldr	r0, [pc, #192]	; (1000cfc4 <ble_device_init+0x2bc>)
1000cf02:	4b1d      	ldr	r3, [pc, #116]	; (1000cf78 <ble_device_init+0x270>)
1000cf04:	4798      	blx	r3
	{
		DBG_LOG("Device name set failed");
	}
	
	ble_set_dev_config(addr);	
}
1000cf06:	b011      	add	sp, #68	; 0x44
1000cf08:	bc3c      	pop	{r2, r3, r4, r5}
1000cf0a:	4690      	mov	r8, r2
1000cf0c:	4699      	mov	r9, r3
1000cf0e:	46a2      	mov	sl, r4
1000cf10:	46ab      	mov	fp, r5
1000cf12:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000cf14:	10018eb0 	.word	0x10018eb0
1000cf18:	10018eb8 	.word	0x10018eb8
1000cf1c:	10015781 	.word	0x10015781
1000cf20:	1001a654 	.word	0x1001a654
1000cf24:	000004e2 	.word	0x000004e2
1000cf28:	100189d0 	.word	0x100189d0
1000cf2c:	10018eb4 	.word	0x10018eb4
1000cf30:	1001a68c 	.word	0x1001a68c
1000cf34:	1001a684 	.word	0x1001a684
1000cf38:	1001a9c0 	.word	0x1001a9c0
1000cf3c:	100185d0 	.word	0x100185d0
1000cf40:	10018ec0 	.word	0x10018ec0
1000cf44:	1001a668 	.word	0x1001a668
1000cf48:	1001a62c 	.word	0x1001a62c
1000cf4c:	1001a640 	.word	0x1001a640
1000cf50:	1001a394 	.word	0x1001a394
1000cf54:	1001a688 	.word	0x1001a688
1000cf58:	1001a390 	.word	0x1001a390
1000cf5c:	1001a618 	.word	0x1001a618
1000cf60:	1001abcc 	.word	0x1001abcc
1000cf64:	1001a3a8 	.word	0x1001a3a8
1000cf68:	1001a614 	.word	0x1001a614
1000cf6c:	10016a10 	.word	0x10016a10
1000cf70:	100159e9 	.word	0x100159e9
1000cf74:	10017e00 	.word	0x10017e00
1000cf78:	100158c9 	.word	0x100158c9
1000cf7c:	1000ed75 	.word	0x1000ed75
1000cf80:	10017e24 	.word	0x10017e24
1000cf84:	10017e50 	.word	0x10017e50
1000cf88:	100181fc 	.word	0x100181fc
1000cf8c:	1000cc39 	.word	0x1000cc39
1000cf90:	100177b4 	.word	0x100177b4
1000cf94:	10017e98 	.word	0x10017e98
1000cf98:	1000ec8d 	.word	0x1000ec8d
1000cf9c:	10017ea4 	.word	0x10017ea4
1000cfa0:	100177a4 	.word	0x100177a4
1000cfa4:	1001576f 	.word	0x1001576f
1000cfa8:	1000ecc1 	.word	0x1000ecc1
1000cfac:	10017ebc 	.word	0x10017ebc
1000cfb0:	10017ee8 	.word	0x10017ee8
1000cfb4:	00003a98 	.word	0x00003a98
1000cfb8:	1000ece5 	.word	0x1000ece5
1000cfbc:	10017f38 	.word	0x10017f38
1000cfc0:	1000ef29 	.word	0x1000ef29
1000cfc4:	10017f74 	.word	0x10017f74

1000cfc8 <ble_send_slave_sec_request>:
	return AT_BLE_FAILURE;
}

/** @brief function to send slave security request */
at_ble_status_t ble_send_slave_sec_request(at_ble_handle_t conn_handle)
{
1000cfc8:	b510      	push	{r4, lr}
	#if BLE_PAIR_ENABLE
		if (at_ble_send_slave_sec_request(conn_handle, BLE_MITM_REQ, BLE_BOND_REQ) == AT_BLE_SUCCESS)
1000cfca:	2200      	movs	r2, #0
1000cfcc:	2100      	movs	r1, #0
1000cfce:	4b0a      	ldr	r3, [pc, #40]	; (1000cff8 <ble_send_slave_sec_request+0x30>)
1000cfd0:	4798      	blx	r3
1000cfd2:	1e04      	subs	r4, r0, #0
1000cfd4:	d106      	bne.n	1000cfe4 <ble_send_slave_sec_request+0x1c>
		{
			DBG_LOG_DEV("Slave security request successful");
1000cfd6:	4809      	ldr	r0, [pc, #36]	; (1000cffc <ble_send_slave_sec_request+0x34>)
1000cfd8:	4b09      	ldr	r3, [pc, #36]	; (1000d000 <ble_send_slave_sec_request+0x38>)
1000cfda:	4798      	blx	r3
1000cfdc:	4809      	ldr	r0, [pc, #36]	; (1000d004 <ble_send_slave_sec_request+0x3c>)
1000cfde:	4b0a      	ldr	r3, [pc, #40]	; (1000d008 <ble_send_slave_sec_request+0x40>)
1000cfe0:	4798      	blx	r3
			return AT_BLE_SUCCESS;
1000cfe2:	e006      	b.n	1000cff2 <ble_send_slave_sec_request+0x2a>
		}
		else
		{
			DBG_LOG("Slave security request failed");
1000cfe4:	4805      	ldr	r0, [pc, #20]	; (1000cffc <ble_send_slave_sec_request+0x34>)
1000cfe6:	4b06      	ldr	r3, [pc, #24]	; (1000d000 <ble_send_slave_sec_request+0x38>)
1000cfe8:	4798      	blx	r3
1000cfea:	4808      	ldr	r0, [pc, #32]	; (1000d00c <ble_send_slave_sec_request+0x44>)
1000cfec:	4b06      	ldr	r3, [pc, #24]	; (1000d008 <ble_send_slave_sec_request+0x40>)
1000cfee:	4798      	blx	r3
		}
	#endif
	return AT_BLE_FAILURE;
1000cff0:	24e2      	movs	r4, #226	; 0xe2
}
1000cff2:	0020      	movs	r0, r4
1000cff4:	bd10      	pop	{r4, pc}
1000cff6:	46c0      	nop			; (mov r8, r8)
1000cff8:	1000fd0d 	.word	0x1000fd0d
1000cffc:	10016a10 	.word	0x10016a10
1000d000:	100159e9 	.word	0x100159e9
1000d004:	10017fc4 	.word	0x10017fc4
1000d008:	100158c9 	.word	0x100158c9
1000d00c:	10017fe8 	.word	0x10017fe8

1000d010 <ble_connected_state_handler>:
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000d010:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d012:	465f      	mov	r7, fp
1000d014:	464e      	mov	r6, r9
1000d016:	4645      	mov	r5, r8
1000d018:	b4e0      	push	{r5, r6, r7}
1000d01a:	b09a      	sub	sp, #104	; 0x68
1000d01c:	0005      	movs	r5, r0
	at_ble_connected_t *conn_params;
	uint8_t idx = 0;
	conn_params = (at_ble_connected_t *)params;
	bool peripheral_device_added = false;
	
	if (conn_params->conn_status == AT_BLE_SUCCESS)
1000d01e:	7a86      	ldrb	r6, [r0, #10]
1000d020:	2e00      	cmp	r6, #0
1000d022:	d000      	beq.n	1000d026 <ble_connected_state_handler+0x16>
1000d024:	e0cc      	b.n	1000d1c0 <ble_connected_state_handler+0x1b0>
	{
		DBG_LOG("Connected to peer device with address 0x%02x%02x%02x%02x%02x%02x",
1000d026:	4878      	ldr	r0, [pc, #480]	; (1000d208 <ble_connected_state_handler+0x1f8>)
1000d028:	4f78      	ldr	r7, [pc, #480]	; (1000d20c <ble_connected_state_handler+0x1fc>)
1000d02a:	47b8      	blx	r7
1000d02c:	792b      	ldrb	r3, [r5, #4]
1000d02e:	796a      	ldrb	r2, [r5, #5]
1000d030:	79a9      	ldrb	r1, [r5, #6]
1000d032:	7868      	ldrb	r0, [r5, #1]
1000d034:	9002      	str	r0, [sp, #8]
1000d036:	78a8      	ldrb	r0, [r5, #2]
1000d038:	9001      	str	r0, [sp, #4]
1000d03a:	78e8      	ldrb	r0, [r5, #3]
1000d03c:	9000      	str	r0, [sp, #0]
1000d03e:	4874      	ldr	r0, [pc, #464]	; (1000d210 <ble_connected_state_handler+0x200>)
1000d040:	4c74      	ldr	r4, [pc, #464]	; (1000d214 <ble_connected_state_handler+0x204>)
1000d042:	47a0      	blx	r4
		conn_params->peer_addr.addr[3],
		conn_params->peer_addr.addr[2],
		conn_params->peer_addr.addr[1],
		conn_params->peer_addr.addr[0]);
		
		DBG_LOG("Connection Handle %d", conn_params->handle);
1000d044:	4870      	ldr	r0, [pc, #448]	; (1000d208 <ble_connected_state_handler+0x1f8>)
1000d046:	47b8      	blx	r7
1000d048:	8929      	ldrh	r1, [r5, #8]
1000d04a:	4873      	ldr	r0, [pc, #460]	; (1000d218 <ble_connected_state_handler+0x208>)
1000d04c:	47a0      	blx	r4
		
		memcpy((uint8_t *)&connected_state_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));	
1000d04e:	2212      	movs	r2, #18
1000d050:	0029      	movs	r1, r5
1000d052:	4872      	ldr	r0, [pc, #456]	; (1000d21c <ble_connected_state_handler+0x20c>)
1000d054:	4b72      	ldr	r3, [pc, #456]	; (1000d220 <ble_connected_state_handler+0x210>)
1000d056:	4798      	blx	r3
		if(memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000d058:	9504      	str	r5, [sp, #16]
1000d05a:	2207      	movs	r2, #7
1000d05c:	0029      	movs	r1, r5
1000d05e:	4871      	ldr	r0, [pc, #452]	; (1000d224 <ble_connected_state_handler+0x214>)
1000d060:	4b71      	ldr	r3, [pc, #452]	; (1000d228 <ble_connected_state_handler+0x218>)
1000d062:	4798      	blx	r3
1000d064:	2800      	cmp	r0, #0
1000d066:	d100      	bne.n	1000d06a <ble_connected_state_handler+0x5a>
1000d068:	e0b3      	b.n	1000d1d2 <ble_connected_state_handler+0x1c2>
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
1000d06a:	782b      	ldrb	r3, [r5, #0]
1000d06c:	2b02      	cmp	r3, #2
1000d06e:	d000      	beq.n	1000d072 <ble_connected_state_handler+0x62>
1000d070:	e0af      	b.n	1000d1d2 <ble_connected_state_handler+0x1c2>
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
1000d072:	2250      	movs	r2, #80	; 0x50
1000d074:	2100      	movs	r1, #0
1000d076:	a806      	add	r0, sp, #24
1000d078:	4b6c      	ldr	r3, [pc, #432]	; (1000d22c <ble_connected_state_handler+0x21c>)
1000d07a:	4798      	blx	r3
1000d07c:	4f6c      	ldr	r7, [pc, #432]	; (1000d230 <ble_connected_state_handler+0x220>)
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
1000d07e:	2300      	movs	r3, #0
1000d080:	e00b      	b.n	1000d09a <ble_connected_state_handler+0x8a>
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000d082:	1c59      	adds	r1, r3, #1
1000d084:	7814      	ldrb	r4, [r2, #0]
1000d086:	a806      	add	r0, sp, #24
1000d088:	54c4      	strb	r4, [r0, r3]
1000d08a:	3201      	adds	r2, #1
1000d08c:	b28b      	uxth	r3, r1
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
1000d08e:	42b3      	cmp	r3, r6
1000d090:	d1f7      	bne.n	1000d082 <ble_connected_state_handler+0x72>
1000d092:	377c      	adds	r7, #124	; 0x7c
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000d094:	1e33      	subs	r3, r6, #0
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
1000d096:	2b50      	cmp	r3, #80	; 0x50
1000d098:	d004      	beq.n	1000d0a4 <ble_connected_state_handler+0x94>
1000d09a:	001e      	movs	r6, r3
1000d09c:	3610      	adds	r6, #16
1000d09e:	b2b6      	uxth	r6, r6
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000d0a0:	003a      	movs	r2, r7
1000d0a2:	e7ee      	b.n	1000d082 <ble_connected_state_handler+0x72>
					}
					
				}
				if (nb_keys)
				{
					if(at_ble_random_address_resolve(BLE_MAX_DEVICE_CONNECTED, &conn_params->peer_addr, irk_key) == AT_BLE_SUCCESS)
1000d0a4:	aa06      	add	r2, sp, #24
1000d0a6:	0029      	movs	r1, r5
1000d0a8:	2005      	movs	r0, #5
1000d0aa:	4b62      	ldr	r3, [pc, #392]	; (1000d234 <ble_connected_state_handler+0x224>)
1000d0ac:	4798      	blx	r3
1000d0ae:	1e06      	subs	r6, r0, #0
1000d0b0:	d106      	bne.n	1000d0c0 <ble_connected_state_handler+0xb0>
					{
						DBG_LOG_DEV("Resolving Random address success**");
1000d0b2:	4855      	ldr	r0, [pc, #340]	; (1000d208 <ble_connected_state_handler+0x1f8>)
1000d0b4:	4b55      	ldr	r3, [pc, #340]	; (1000d20c <ble_connected_state_handler+0x1fc>)
1000d0b6:	4798      	blx	r3
1000d0b8:	485f      	ldr	r0, [pc, #380]	; (1000d238 <ble_connected_state_handler+0x228>)
1000d0ba:	4b56      	ldr	r3, [pc, #344]	; (1000d214 <ble_connected_state_handler+0x204>)
1000d0bc:	4798      	blx	r3
						return AT_BLE_SUCCESS;
1000d0be:	e09c      	b.n	1000d1fa <ble_connected_state_handler+0x1ea>
					}
					else
					{
						DBG_LOG("Resolving Random address failed**");
1000d0c0:	4851      	ldr	r0, [pc, #324]	; (1000d208 <ble_connected_state_handler+0x1f8>)
1000d0c2:	4b52      	ldr	r3, [pc, #328]	; (1000d20c <ble_connected_state_handler+0x1fc>)
1000d0c4:	4798      	blx	r3
1000d0c6:	485d      	ldr	r0, [pc, #372]	; (1000d23c <ble_connected_state_handler+0x22c>)
1000d0c8:	4b52      	ldr	r3, [pc, #328]	; (1000d214 <ble_connected_state_handler+0x204>)
1000d0ca:	4798      	blx	r3
						return AT_BLE_FAILURE;
1000d0cc:	26e2      	movs	r6, #226	; 0xe2
1000d0ce:	e094      	b.n	1000d1fa <ble_connected_state_handler+0x1ea>
1000d0d0:	b2e7      	uxtb	r7, r4
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000d0d2:	9405      	str	r4, [sp, #20]
1000d0d4:	2207      	movs	r2, #7
1000d0d6:	9904      	ldr	r1, [sp, #16]
1000d0d8:	4648      	mov	r0, r9
1000d0da:	47d8      	blx	fp
1000d0dc:	2800      	cmp	r0, #0
1000d0de:	d109      	bne.n	1000d0f4 <ble_connected_state_handler+0xe4>
				{
					ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000d0e0:	9a05      	ldr	r2, [sp, #20]
1000d0e2:	0153      	lsls	r3, r2, #5
1000d0e4:	1a9b      	subs	r3, r3, r2
1000d0e6:	009a      	lsls	r2, r3, #2
1000d0e8:	4b55      	ldr	r3, [pc, #340]	; (1000d240 <ble_connected_state_handler+0x230>)
1000d0ea:	189b      	adds	r3, r3, r2
1000d0ec:	335e      	adds	r3, #94	; 0x5e
1000d0ee:	2202      	movs	r2, #2
1000d0f0:	701a      	strb	r2, [r3, #0]
1000d0f2:	e02b      	b.n	1000d14c <ble_connected_state_handler+0x13c>
1000d0f4:	3401      	adds	r4, #1
1000d0f6:	237c      	movs	r3, #124	; 0x7c
1000d0f8:	469c      	mov	ip, r3
1000d0fa:	44e1      	add	r9, ip
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d0fc:	2c05      	cmp	r4, #5
1000d0fe:	d1e7      	bne.n	1000d0d0 <ble_connected_state_handler+0xc0>
1000d100:	e072      	b.n	1000d1e8 <ble_connected_state_handler+0x1d8>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000d102:	001c      	movs	r4, r3
1000d104:	7811      	ldrb	r1, [r2, #0]
1000d106:	2900      	cmp	r1, #0
1000d108:	d11a      	bne.n	1000d140 <ble_connected_state_handler+0x130>
1000d10a:	e001      	b.n	1000d110 <ble_connected_state_handler+0x100>
1000d10c:	2400      	movs	r4, #0
1000d10e:	2700      	movs	r7, #0
					{
						/* @Todo Need to Handle Random Address */
						memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));
1000d110:	0163      	lsls	r3, r4, #5
1000d112:	4699      	mov	r9, r3
1000d114:	1b18      	subs	r0, r3, r4
1000d116:	0080      	lsls	r0, r0, #2
1000d118:	4b49      	ldr	r3, [pc, #292]	; (1000d240 <ble_connected_state_handler+0x230>)
1000d11a:	4698      	mov	r8, r3
1000d11c:	4440      	add	r0, r8
1000d11e:	2212      	movs	r2, #18
1000d120:	0029      	movs	r1, r5
1000d122:	4b3f      	ldr	r3, [pc, #252]	; (1000d220 <ble_connected_state_handler+0x210>)
1000d124:	4798      	blx	r3
						ble_device_count++;
1000d126:	4a47      	ldr	r2, [pc, #284]	; (1000d244 <ble_connected_state_handler+0x234>)
1000d128:	7813      	ldrb	r3, [r2, #0]
1000d12a:	3301      	adds	r3, #1
1000d12c:	b2db      	uxtb	r3, r3
1000d12e:	7013      	strb	r3, [r2, #0]
						ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000d130:	464b      	mov	r3, r9
1000d132:	1b1b      	subs	r3, r3, r4
1000d134:	009b      	lsls	r3, r3, #2
1000d136:	4443      	add	r3, r8
1000d138:	335e      	adds	r3, #94	; 0x5e
1000d13a:	2202      	movs	r2, #2
1000d13c:	701a      	strb	r2, [r3, #0]
						break;
1000d13e:	e005      	b.n	1000d14c <ble_connected_state_handler+0x13c>
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d140:	1c79      	adds	r1, r7, #1
1000d142:	b2cf      	uxtb	r7, r1
1000d144:	3301      	adds	r3, #1
1000d146:	327c      	adds	r2, #124	; 0x7c
1000d148:	2f05      	cmp	r7, #5
1000d14a:	d1da      	bne.n	1000d102 <ble_connected_state_handler+0xf2>
						break;
					}
				}
			}
			
			if(!memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000d14c:	2207      	movs	r2, #7
1000d14e:	0029      	movs	r1, r5
1000d150:	4834      	ldr	r0, [pc, #208]	; (1000d224 <ble_connected_state_handler+0x214>)
1000d152:	4b35      	ldr	r3, [pc, #212]	; (1000d228 <ble_connected_state_handler+0x218>)
1000d154:	4798      	blx	r3
1000d156:	2800      	cmp	r0, #0
1000d158:	d10c      	bne.n	1000d174 <ble_connected_state_handler+0x164>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
1000d15a:	017b      	lsls	r3, r7, #5
1000d15c:	1bdb      	subs	r3, r3, r7
1000d15e:	009b      	lsls	r3, r3, #2
1000d160:	4a37      	ldr	r2, [pc, #220]	; (1000d240 <ble_connected_state_handler+0x230>)
1000d162:	18d3      	adds	r3, r2, r3
1000d164:	2205      	movs	r2, #5
1000d166:	749a      	strb	r2, [r3, #18]
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000d168:	3202      	adds	r2, #2
1000d16a:	2100      	movs	r1, #0
1000d16c:	482d      	ldr	r0, [pc, #180]	; (1000d224 <ble_connected_state_handler+0x214>)
1000d16e:	4b2f      	ldr	r3, [pc, #188]	; (1000d22c <ble_connected_state_handler+0x21c>)
1000d170:	4798      	blx	r3
1000d172:	e042      	b.n	1000d1fa <ble_connected_state_handler+0x1ea>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
			}
			else
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000d174:	4b32      	ldr	r3, [pc, #200]	; (1000d240 <ble_connected_state_handler+0x230>)
1000d176:	4698      	mov	r8, r3
1000d178:	017c      	lsls	r4, r7, #5
1000d17a:	1be3      	subs	r3, r4, r7
1000d17c:	009b      	lsls	r3, r3, #2
1000d17e:	4443      	add	r3, r8
1000d180:	220a      	movs	r2, #10
1000d182:	749a      	strb	r2, [r3, #18]
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000d184:	3a03      	subs	r2, #3
1000d186:	2100      	movs	r1, #0
1000d188:	4826      	ldr	r0, [pc, #152]	; (1000d224 <ble_connected_state_handler+0x214>)
1000d18a:	4b28      	ldr	r3, [pc, #160]	; (1000d22c <ble_connected_state_handler+0x21c>)
1000d18c:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
		}		
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000d18e:	1be4      	subs	r4, r4, r7
1000d190:	00a4      	lsls	r4, r4, #2
1000d192:	4444      	add	r4, r8
1000d194:	7ca3      	ldrb	r3, [r4, #18]
1000d196:	2b0a      	cmp	r3, #10
1000d198:	d12f      	bne.n	1000d1fa <ble_connected_state_handler+0x1ea>
1000d19a:	e00d      	b.n	1000d1b8 <ble_connected_state_handler+0x1a8>
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
					
		}
		else
		{
			DBG_LOG("Max number of connection reached: %d ===>Disconnecting...", ble_device_count);
1000d19c:	481a      	ldr	r0, [pc, #104]	; (1000d208 <ble_connected_state_handler+0x1f8>)
1000d19e:	4b1b      	ldr	r3, [pc, #108]	; (1000d20c <ble_connected_state_handler+0x1fc>)
1000d1a0:	4798      	blx	r3
1000d1a2:	4b28      	ldr	r3, [pc, #160]	; (1000d244 <ble_connected_state_handler+0x234>)
1000d1a4:	7819      	ldrb	r1, [r3, #0]
1000d1a6:	b2c9      	uxtb	r1, r1
1000d1a8:	4827      	ldr	r0, [pc, #156]	; (1000d248 <ble_connected_state_handler+0x238>)
1000d1aa:	4b1a      	ldr	r3, [pc, #104]	; (1000d214 <ble_connected_state_handler+0x204>)
1000d1ac:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
1000d1ae:	8928      	ldrh	r0, [r5, #8]
1000d1b0:	2113      	movs	r1, #19
1000d1b2:	4b26      	ldr	r3, [pc, #152]	; (1000d24c <ble_connected_state_handler+0x23c>)
1000d1b4:	4798      	blx	r3
1000d1b6:	e020      	b.n	1000d1fa <ble_connected_state_handler+0x1ea>
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
        {
	 		ble_send_slave_sec_request(conn_params->handle);
1000d1b8:	8928      	ldrh	r0, [r5, #8]
1000d1ba:	4b25      	ldr	r3, [pc, #148]	; (1000d250 <ble_connected_state_handler+0x240>)
1000d1bc:	4798      	blx	r3
1000d1be:	e01c      	b.n	1000d1fa <ble_connected_state_handler+0x1ea>
        }
#endif
	} 
	else
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
1000d1c0:	4811      	ldr	r0, [pc, #68]	; (1000d208 <ble_connected_state_handler+0x1f8>)
1000d1c2:	4b12      	ldr	r3, [pc, #72]	; (1000d20c <ble_connected_state_handler+0x1fc>)
1000d1c4:	4798      	blx	r3
1000d1c6:	7aa9      	ldrb	r1, [r5, #10]
1000d1c8:	4822      	ldr	r0, [pc, #136]	; (1000d254 <ble_connected_state_handler+0x244>)
1000d1ca:	4b12      	ldr	r3, [pc, #72]	; (1000d214 <ble_connected_state_handler+0x204>)
1000d1cc:	4798      	blx	r3
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
1000d1ce:	2600      	movs	r6, #0
1000d1d0:	e013      	b.n	1000d1fa <ble_connected_state_handler+0x1ea>
					DBG_LOG_DEV("New Connection");
				}				
			}
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
1000d1d2:	4b1c      	ldr	r3, [pc, #112]	; (1000d244 <ble_connected_state_handler+0x234>)
1000d1d4:	781b      	ldrb	r3, [r3, #0]
1000d1d6:	b2db      	uxtb	r3, r3
1000d1d8:	2b04      	cmp	r3, #4
1000d1da:	d8df      	bhi.n	1000d19c <ble_connected_state_handler+0x18c>
1000d1dc:	4b18      	ldr	r3, [pc, #96]	; (1000d240 <ble_connected_state_handler+0x230>)
1000d1de:	4699      	mov	r9, r3
1000d1e0:	2400      	movs	r4, #0
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000d1e2:	4b11      	ldr	r3, [pc, #68]	; (1000d228 <ble_connected_state_handler+0x218>)
1000d1e4:	469b      	mov	fp, r3
1000d1e6:	e773      	b.n	1000d0d0 <ble_connected_state_handler+0xc0>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000d1e8:	235e      	movs	r3, #94	; 0x5e
1000d1ea:	4a15      	ldr	r2, [pc, #84]	; (1000d240 <ble_connected_state_handler+0x230>)
1000d1ec:	5cd3      	ldrb	r3, [r2, r3]
1000d1ee:	2b00      	cmp	r3, #0
1000d1f0:	d08c      	beq.n	1000d10c <ble_connected_state_handler+0xfc>
1000d1f2:	4a19      	ldr	r2, [pc, #100]	; (1000d258 <ble_connected_state_handler+0x248>)
1000d1f4:	2301      	movs	r3, #1
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d1f6:	2701      	movs	r7, #1
1000d1f8:	e783      	b.n	1000d102 <ble_connected_state_handler+0xf2>
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
}
1000d1fa:	0030      	movs	r0, r6
1000d1fc:	b01a      	add	sp, #104	; 0x68
1000d1fe:	bc1c      	pop	{r2, r3, r4}
1000d200:	4690      	mov	r8, r2
1000d202:	4699      	mov	r9, r3
1000d204:	46a3      	mov	fp, r4
1000d206:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d208:	10016a10 	.word	0x10016a10
1000d20c:	100159e9 	.word	0x100159e9
1000d210:	10018008 	.word	0x10018008
1000d214:	100158c9 	.word	0x100158c9
1000d218:	1001804c 	.word	0x1001804c
1000d21c:	1001a654 	.word	0x1001a654
1000d220:	1001576f 	.word	0x1001576f
1000d224:	10018eb8 	.word	0x10018eb8
1000d228:	10015751 	.word	0x10015751
1000d22c:	10015781 	.word	0x10015781
1000d230:	1001a3ee 	.word	0x1001a3ee
1000d234:	1000f195 	.word	0x1000f195
1000d238:	10018064 	.word	0x10018064
1000d23c:	10018088 	.word	0x10018088
1000d240:	1001a3a8 	.word	0x1001a3a8
1000d244:	1001a614 	.word	0x1001a614
1000d248:	100180ac 	.word	0x100180ac
1000d24c:	1000f169 	.word	0x1000f169
1000d250:	1000cfc9 	.word	0x1000cfc9
1000d254:	100180e8 	.word	0x100180e8
1000d258:	1001a482 	.word	0x1001a482

1000d25c <ble_resolv_rand_addr_handler>:

at_ble_status_t ble_resolv_rand_addr_handler(void *params)
{
1000d25c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d25e:	4647      	mov	r7, r8
1000d260:	b480      	push	{r7}
	uint8_t idx;	
	bool device_found = false;
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
1000d262:	7803      	ldrb	r3, [r0, #0]
1000d264:	2b00      	cmp	r3, #0
1000d266:	d152      	bne.n	1000d30e <ble_resolv_rand_addr_handler+0xb2>
1000d268:	4d3e      	ldr	r5, [pc, #248]	; (1000d364 <ble_resolv_rand_addr_handler+0x108>)
1000d26a:	2400      	movs	r4, #0
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			/* Check the Resolved Address */
			if (!memcmp((uint8_t *)ble_resolv_rand_addr_status->irk, (uint8_t *)ble_dev_info[idx].bond_info.peer_irk.key, AT_BLE_MAX_KEY_LEN))
1000d26c:	1c46      	adds	r6, r0, #1
1000d26e:	4f3e      	ldr	r7, [pc, #248]	; (1000d368 <ble_resolv_rand_addr_handler+0x10c>)
1000d270:	2210      	movs	r2, #16
1000d272:	0029      	movs	r1, r5
1000d274:	0030      	movs	r0, r6
1000d276:	47b8      	blx	r7
1000d278:	2800      	cmp	r0, #0
1000d27a:	d031      	beq.n	1000d2e0 <ble_resolv_rand_addr_handler+0x84>
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d27c:	3401      	adds	r4, #1
1000d27e:	b2e4      	uxtb	r4, r4
1000d280:	357c      	adds	r5, #124	; 0x7c
1000d282:	2c05      	cmp	r4, #5
1000d284:	d1f4      	bne.n	1000d270 <ble_resolv_rand_addr_handler+0x14>
1000d286:	e042      	b.n	1000d30e <ble_resolv_rand_addr_handler+0xb2>
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000d288:	001d      	movs	r5, r3
1000d28a:	7811      	ldrb	r1, [r2, #0]
1000d28c:	2900      	cmp	r1, #0
1000d28e:	d11b      	bne.n	1000d2c8 <ble_resolv_rand_addr_handler+0x6c>
1000d290:	e001      	b.n	1000d296 <ble_resolv_rand_addr_handler+0x3a>
1000d292:	2500      	movs	r5, #0
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d294:	2400      	movs	r4, #0
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
			{
				memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000d296:	4b35      	ldr	r3, [pc, #212]	; (1000d36c <ble_resolv_rand_addr_handler+0x110>)
1000d298:	4698      	mov	r8, r3
1000d29a:	016e      	lsls	r6, r5, #5
1000d29c:	1b77      	subs	r7, r6, r5
1000d29e:	00bf      	lsls	r7, r7, #2
1000d2a0:	4447      	add	r7, r8
1000d2a2:	2212      	movs	r2, #18
1000d2a4:	4932      	ldr	r1, [pc, #200]	; (1000d370 <ble_resolv_rand_addr_handler+0x114>)
1000d2a6:	0038      	movs	r0, r7
1000d2a8:	4b32      	ldr	r3, [pc, #200]	; (1000d374 <ble_resolv_rand_addr_handler+0x118>)
1000d2aa:	4798      	blx	r3
				ble_device_count++;
1000d2ac:	4a32      	ldr	r2, [pc, #200]	; (1000d378 <ble_resolv_rand_addr_handler+0x11c>)
1000d2ae:	7813      	ldrb	r3, [r2, #0]
1000d2b0:	3301      	adds	r3, #1
1000d2b2:	b2db      	uxtb	r3, r3
1000d2b4:	7013      	strb	r3, [r2, #0]
				ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000d2b6:	375e      	adds	r7, #94	; 0x5e
1000d2b8:	2302      	movs	r3, #2
1000d2ba:	703b      	strb	r3, [r7, #0]
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000d2bc:	1b75      	subs	r5, r6, r5
1000d2be:	00ad      	lsls	r5, r5, #2
1000d2c0:	4445      	add	r5, r8
1000d2c2:	3308      	adds	r3, #8
1000d2c4:	74ab      	strb	r3, [r5, #18]
				peripheral_device_added = true;
				break;
1000d2c6:	e031      	b.n	1000d32c <ble_resolv_rand_addr_handler+0xd0>
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d2c8:	3401      	adds	r4, #1
1000d2ca:	b2e4      	uxtb	r4, r4
1000d2cc:	3301      	adds	r3, #1
1000d2ce:	327c      	adds	r2, #124	; 0x7c
1000d2d0:	2c05      	cmp	r4, #5
1000d2d2:	d1d9      	bne.n	1000d288 <ble_resolv_rand_addr_handler+0x2c>
1000d2d4:	e03a      	b.n	1000d34c <ble_resolv_rand_addr_handler+0xf0>
	}
	DBG_LOG_DEV("Device idx:%d",idx);
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
	{
		ble_send_slave_sec_request(connected_state_info.handle);
1000d2d6:	4b26      	ldr	r3, [pc, #152]	; (1000d370 <ble_resolv_rand_addr_handler+0x114>)
1000d2d8:	8918      	ldrh	r0, [r3, #8]
1000d2da:	4b28      	ldr	r3, [pc, #160]	; (1000d37c <ble_resolv_rand_addr_handler+0x120>)
1000d2dc:	4798      	blx	r3
1000d2de:	e03c      	b.n	1000d35a <ble_resolv_rand_addr_handler+0xfe>
		
	}
	
	if (device_found)
	{
		DBG_LOG_DEV("##########Device Found");
1000d2e0:	4827      	ldr	r0, [pc, #156]	; (1000d380 <ble_resolv_rand_addr_handler+0x124>)
1000d2e2:	4b28      	ldr	r3, [pc, #160]	; (1000d384 <ble_resolv_rand_addr_handler+0x128>)
1000d2e4:	4798      	blx	r3
1000d2e6:	4828      	ldr	r0, [pc, #160]	; (1000d388 <ble_resolv_rand_addr_handler+0x12c>)
1000d2e8:	4b28      	ldr	r3, [pc, #160]	; (1000d38c <ble_resolv_rand_addr_handler+0x130>)
1000d2ea:	4798      	blx	r3
		ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000d2ec:	481f      	ldr	r0, [pc, #124]	; (1000d36c <ble_resolv_rand_addr_handler+0x110>)
1000d2ee:	0163      	lsls	r3, r4, #5
1000d2f0:	1b1a      	subs	r2, r3, r4
1000d2f2:	0092      	lsls	r2, r2, #2
1000d2f4:	1882      	adds	r2, r0, r2
1000d2f6:	0011      	movs	r1, r2
1000d2f8:	315e      	adds	r1, #94	; 0x5e
1000d2fa:	2502      	movs	r5, #2
1000d2fc:	700d      	strb	r5, [r1, #0]
		ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000d2fe:	210a      	movs	r1, #10
1000d300:	7491      	strb	r1, [r2, #18]
		memcpy((uint8_t *)&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000d302:	0010      	movs	r0, r2
1000d304:	2212      	movs	r2, #18
1000d306:	491a      	ldr	r1, [pc, #104]	; (1000d370 <ble_resolv_rand_addr_handler+0x114>)
1000d308:	4b1a      	ldr	r3, [pc, #104]	; (1000d374 <ble_resolv_rand_addr_handler+0x118>)
1000d30a:	4798      	blx	r3
1000d30c:	e00e      	b.n	1000d32c <ble_resolv_rand_addr_handler+0xd0>
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
1000d30e:	481c      	ldr	r0, [pc, #112]	; (1000d380 <ble_resolv_rand_addr_handler+0x124>)
1000d310:	4b1c      	ldr	r3, [pc, #112]	; (1000d384 <ble_resolv_rand_addr_handler+0x128>)
1000d312:	4798      	blx	r3
1000d314:	481e      	ldr	r0, [pc, #120]	; (1000d390 <ble_resolv_rand_addr_handler+0x134>)
1000d316:	4b1d      	ldr	r3, [pc, #116]	; (1000d38c <ble_resolv_rand_addr_handler+0x130>)
1000d318:	4798      	blx	r3
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000d31a:	235e      	movs	r3, #94	; 0x5e
1000d31c:	4a13      	ldr	r2, [pc, #76]	; (1000d36c <ble_resolv_rand_addr_handler+0x110>)
1000d31e:	5cd3      	ldrb	r3, [r2, r3]
1000d320:	2b00      	cmp	r3, #0
1000d322:	d0b6      	beq.n	1000d292 <ble_resolv_rand_addr_handler+0x36>
1000d324:	4a1b      	ldr	r2, [pc, #108]	; (1000d394 <ble_resolv_rand_addr_handler+0x138>)
1000d326:	2301      	movs	r3, #1
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d328:	2401      	movs	r4, #1
1000d32a:	e7ad      	b.n	1000d288 <ble_resolv_rand_addr_handler+0x2c>
				peripheral_device_added = true;
				break;
			}
		}
	}
	DBG_LOG_DEV("Device idx:%d",idx);
1000d32c:	4814      	ldr	r0, [pc, #80]	; (1000d380 <ble_resolv_rand_addr_handler+0x124>)
1000d32e:	4b15      	ldr	r3, [pc, #84]	; (1000d384 <ble_resolv_rand_addr_handler+0x128>)
1000d330:	4798      	blx	r3
1000d332:	0021      	movs	r1, r4
1000d334:	4818      	ldr	r0, [pc, #96]	; (1000d398 <ble_resolv_rand_addr_handler+0x13c>)
1000d336:	4b15      	ldr	r3, [pc, #84]	; (1000d38c <ble_resolv_rand_addr_handler+0x130>)
1000d338:	4798      	blx	r3
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000d33a:	0163      	lsls	r3, r4, #5
1000d33c:	1b1c      	subs	r4, r3, r4
1000d33e:	00a4      	lsls	r4, r4, #2
1000d340:	4b0a      	ldr	r3, [pc, #40]	; (1000d36c <ble_resolv_rand_addr_handler+0x110>)
1000d342:	191c      	adds	r4, r3, r4
1000d344:	7ca3      	ldrb	r3, [r4, #18]
1000d346:	2b0a      	cmp	r3, #10
1000d348:	d107      	bne.n	1000d35a <ble_resolv_rand_addr_handler+0xfe>
1000d34a:	e7c4      	b.n	1000d2d6 <ble_resolv_rand_addr_handler+0x7a>
				peripheral_device_added = true;
				break;
			}
		}
	}
	DBG_LOG_DEV("Device idx:%d",idx);
1000d34c:	480c      	ldr	r0, [pc, #48]	; (1000d380 <ble_resolv_rand_addr_handler+0x124>)
1000d34e:	4b0d      	ldr	r3, [pc, #52]	; (1000d384 <ble_resolv_rand_addr_handler+0x128>)
1000d350:	4798      	blx	r3
1000d352:	2105      	movs	r1, #5
1000d354:	4810      	ldr	r0, [pc, #64]	; (1000d398 <ble_resolv_rand_addr_handler+0x13c>)
1000d356:	4b0d      	ldr	r3, [pc, #52]	; (1000d38c <ble_resolv_rand_addr_handler+0x130>)
1000d358:	4798      	blx	r3
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
	
}
1000d35a:	2000      	movs	r0, #0
1000d35c:	bc04      	pop	{r2}
1000d35e:	4690      	mov	r8, r2
1000d360:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d362:	46c0      	nop			; (mov r8, r8)
1000d364:	1001a3ee 	.word	0x1001a3ee
1000d368:	10015751 	.word	0x10015751
1000d36c:	1001a3a8 	.word	0x1001a3a8
1000d370:	1001a654 	.word	0x1001a654
1000d374:	1001576f 	.word	0x1001576f
1000d378:	1001a614 	.word	0x1001a614
1000d37c:	1000cfc9 	.word	0x1000cfc9
1000d380:	10016a10 	.word	0x10016a10
1000d384:	100159e9 	.word	0x100159e9
1000d388:	10018110 	.word	0x10018110
1000d38c:	100158c9 	.word	0x100158c9
1000d390:	10018128 	.word	0x10018128
1000d394:	1001a482 	.word	0x1001a482
1000d398:	10018144 	.word	0x10018144

1000d39c <ble_event_manager>:
	}
	return AT_BLE_SUCCESS;
}

void ble_event_manager(at_ble_events_t events, void *event_params)
{
1000d39c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000d39e:	0004      	movs	r4, r0
1000d3a0:	000d      	movs	r5, r1
	DBG_LOG_DEV("\r\nBLE-Event:%d", events);
1000d3a2:	4848      	ldr	r0, [pc, #288]	; (1000d4c4 <ble_event_manager+0x128>)
1000d3a4:	4b48      	ldr	r3, [pc, #288]	; (1000d4c8 <ble_event_manager+0x12c>)
1000d3a6:	4798      	blx	r3
1000d3a8:	0021      	movs	r1, r4
1000d3aa:	4848      	ldr	r0, [pc, #288]	; (1000d4cc <ble_event_manager+0x130>)
1000d3ac:	4b48      	ldr	r3, [pc, #288]	; (1000d4d0 <ble_event_manager+0x134>)
1000d3ae:	4798      	blx	r3
	switch(events)
1000d3b0:	2c3b      	cmp	r4, #59	; 0x3b
1000d3b2:	d879      	bhi.n	1000d4a8 <ble_event_manager+0x10c>
1000d3b4:	00a3      	lsls	r3, r4, #2
1000d3b6:	4a47      	ldr	r2, [pc, #284]	; (1000d4d4 <ble_event_manager+0x138>)
1000d3b8:	58d3      	ldr	r3, [r2, r3]
1000d3ba:	469f      	mov	pc, r3
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000d3bc:	00a4      	lsls	r4, r4, #2
1000d3be:	2600      	movs	r6, #0
		}
		#endif			
		
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
1000d3c0:	4f45      	ldr	r7, [pc, #276]	; (1000d4d8 <ble_event_manager+0x13c>)
1000d3c2:	59bb      	ldr	r3, [r7, r6]
1000d3c4:	2b00      	cmp	r3, #0
1000d3c6:	d004      	beq.n	1000d3d2 <ble_event_manager+0x36>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000d3c8:	591b      	ldr	r3, [r3, r4]
1000d3ca:	2b00      	cmp	r3, #0
1000d3cc:	d001      	beq.n	1000d3d2 <ble_event_manager+0x36>
				{
					event_cb_fn[events](event_params);		
1000d3ce:	0028      	movs	r0, r5
1000d3d0:	4798      	blx	r3
1000d3d2:	3604      	adds	r6, #4
			if( ble_scan_duplication_check((at_ble_scan_info_t*)event_params) )
				return;
		}
		#endif			
		
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
1000d3d4:	2e14      	cmp	r6, #20
1000d3d6:	d1f4      	bne.n	1000d3c2 <ble_event_manager+0x26>
1000d3d8:	e072      	b.n	1000d4c0 <ble_event_manager+0x124>
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000d3da:	3c13      	subs	r4, #19
1000d3dc:	b2e4      	uxtb	r4, r4
1000d3de:	00a4      	lsls	r4, r4, #2
1000d3e0:	2600      	movs	r6, #0
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
1000d3e2:	4f3e      	ldr	r7, [pc, #248]	; (1000d4dc <ble_event_manager+0x140>)
1000d3e4:	59bb      	ldr	r3, [r7, r6]
1000d3e6:	2b00      	cmp	r3, #0
1000d3e8:	d004      	beq.n	1000d3f4 <ble_event_manager+0x58>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000d3ea:	591b      	ldr	r3, [r3, r4]
1000d3ec:	2b00      	cmp	r3, #0
1000d3ee:	d001      	beq.n	1000d3f4 <ble_event_manager+0x58>
				{
					event_cb_fn[events](event_params);
1000d3f0:	0028      	movs	r0, r5
1000d3f2:	4798      	blx	r3
1000d3f4:	3604      	adds	r6, #4
	case AT_BLE_NOTIFICATION_RECIEVED:
	case AT_BLE_INDICATION_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
1000d3f6:	2e14      	cmp	r6, #20
1000d3f8:	d1f4      	bne.n	1000d3e4 <ble_event_manager+0x48>
1000d3fa:	e061      	b.n	1000d4c0 <ble_event_manager+0x124>
	case AT_BLE_MTU_CHANGED_CMD_COMPLETE:
	case AT_BLE_CHARACTERISTIC_WRITE_CMD_CMP:
	case AT_BLE_READ_AUTHORIZE_REQUEST:
	{
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
1000d3fc:	3c1d      	subs	r4, #29
1000d3fe:	b2e4      	uxtb	r4, r4
		DBG_LOG_DEV("GATT_Server Event:%d", events);
1000d400:	4830      	ldr	r0, [pc, #192]	; (1000d4c4 <ble_event_manager+0x128>)
1000d402:	4b31      	ldr	r3, [pc, #196]	; (1000d4c8 <ble_event_manager+0x12c>)
1000d404:	4798      	blx	r3
1000d406:	0021      	movs	r1, r4
1000d408:	4835      	ldr	r0, [pc, #212]	; (1000d4e0 <ble_event_manager+0x144>)
1000d40a:	4b31      	ldr	r3, [pc, #196]	; (1000d4d0 <ble_event_manager+0x134>)
1000d40c:	4798      	blx	r3
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000d40e:	00a4      	lsls	r4, r4, #2
1000d410:	2600      	movs	r6, #0
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
1000d412:	4f34      	ldr	r7, [pc, #208]	; (1000d4e4 <ble_event_manager+0x148>)
1000d414:	59bb      	ldr	r3, [r7, r6]
1000d416:	2b00      	cmp	r3, #0
1000d418:	d004      	beq.n	1000d424 <ble_event_manager+0x88>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000d41a:	591b      	ldr	r3, [r3, r4]
1000d41c:	2b00      	cmp	r3, #0
1000d41e:	d001      	beq.n	1000d424 <ble_event_manager+0x88>
				{
					event_cb_fn[events](event_params);
1000d420:	0028      	movs	r0, r5
1000d422:	4798      	blx	r3
1000d424:	3604      	adds	r6, #4
	case AT_BLE_READ_AUTHORIZE_REQUEST:
	{
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
1000d426:	2e14      	cmp	r6, #20
1000d428:	d1f4      	bne.n	1000d414 <ble_event_manager+0x78>
1000d42a:	e049      	b.n	1000d4c0 <ble_event_manager+0x124>
	case AT_BLE_LECB_ADD_CREDIT_IND:
	case AT_BLE_LECB_SEND_RESP:
	case AT_BLE_LECB_DATA_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_READ_AUTHORIZE_REQUEST + 1);
1000d42c:	3c27      	subs	r4, #39	; 0x27
1000d42e:	b2e4      	uxtb	r4, r4
		for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_l2cap_event_cb[idx] != NULL)
1000d430:	4b2d      	ldr	r3, [pc, #180]	; (1000d4e8 <ble_event_manager+0x14c>)
1000d432:	681b      	ldr	r3, [r3, #0]
1000d434:	2b00      	cmp	r3, #0
1000d436:	d043      	beq.n	1000d4c0 <ble_event_manager+0x124>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_l2cap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000d438:	00a4      	lsls	r4, r4, #2
1000d43a:	58e3      	ldr	r3, [r4, r3]
1000d43c:	2b00      	cmp	r3, #0
1000d43e:	d03f      	beq.n	1000d4c0 <ble_event_manager+0x124>
				{
					event_cb_fn[events](event_params);
1000d440:	0028      	movs	r0, r5
1000d442:	4798      	blx	r3
1000d444:	e03c      	b.n	1000d4c0 <ble_event_manager+0x124>
	case AT_BLE_HTPT_ENABLE_RSP:
	case AT_BLE_HTPT_MEAS_INTV_UPD_RSP:
	case AT_BLE_HTPT_MEAS_INTV_CHG_REQ:
	{
		uint8_t idx;
		events -= (AT_BLE_LECB_DATA_RECIEVED + 1);
1000d446:	3c2d      	subs	r4, #45	; 0x2d
1000d448:	b2e4      	uxtb	r4, r4
		for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_htpt_event_cb[idx] != NULL)
1000d44a:	4b28      	ldr	r3, [pc, #160]	; (1000d4ec <ble_event_manager+0x150>)
1000d44c:	681b      	ldr	r3, [r3, #0]
1000d44e:	2b00      	cmp	r3, #0
1000d450:	d036      	beq.n	1000d4c0 <ble_event_manager+0x124>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_htpt_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000d452:	00a4      	lsls	r4, r4, #2
1000d454:	58e3      	ldr	r3, [r4, r3]
1000d456:	2b00      	cmp	r3, #0
1000d458:	d032      	beq.n	1000d4c0 <ble_event_manager+0x124>
				{
					event_cb_fn[events](event_params);
1000d45a:	0028      	movs	r0, r5
1000d45c:	4798      	blx	r3
1000d45e:	e02f      	b.n	1000d4c0 <ble_event_manager+0x124>
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000d460:	3c36      	subs	r4, #54	; 0x36
1000d462:	b2e4      	uxtb	r4, r4
1000d464:	00a4      	lsls	r4, r4, #2
1000d466:	2600      	movs	r6, #0
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
1000d468:	4f21      	ldr	r7, [pc, #132]	; (1000d4f0 <ble_event_manager+0x154>)
1000d46a:	59bb      	ldr	r3, [r7, r6]
1000d46c:	2b00      	cmp	r3, #0
1000d46e:	d004      	beq.n	1000d47a <ble_event_manager+0xde>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000d470:	591b      	ldr	r3, [r3, r4]
1000d472:	2b00      	cmp	r3, #0
1000d474:	d001      	beq.n	1000d47a <ble_event_manager+0xde>
				{
					event_cb_fn[events](event_params);
1000d476:	0028      	movs	r0, r5
1000d478:	4798      	blx	r3
1000d47a:	3604      	adds	r6, #4
	case AT_BLE_LE_TEST_STATUS:
	case AT_BLE_LE_PACKET_REPORT:
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
1000d47c:	2e14      	cmp	r6, #20
1000d47e:	d1f4      	bne.n	1000d46a <ble_event_manager+0xce>
1000d480:	e01e      	b.n	1000d4c0 <ble_event_manager+0x124>
	case AT_BLE_CUSTOM_EVENT:
	case AT_BLE_DEVICE_READY:
	case AT_BLE_EVENT_MAX:
	{
		uint8_t idx;
		events -= (AT_BLE_LE_PACKET_REPORT + 1);
1000d482:	3c38      	subs	r4, #56	; 0x38
1000d484:	b2e4      	uxtb	r4, r4
		for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_custom_event_cb[idx] != NULL)
1000d486:	4b1b      	ldr	r3, [pc, #108]	; (1000d4f4 <ble_event_manager+0x158>)
1000d488:	681b      	ldr	r3, [r3, #0]
1000d48a:	2b00      	cmp	r3, #0
1000d48c:	d018      	beq.n	1000d4c0 <ble_event_manager+0x124>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_custom_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000d48e:	00a4      	lsls	r4, r4, #2
1000d490:	58e3      	ldr	r3, [r4, r3]
1000d492:	2b00      	cmp	r3, #0
1000d494:	d014      	beq.n	1000d4c0 <ble_event_manager+0x124>
				{
					event_cb_fn[events](event_params);
1000d496:	0028      	movs	r0, r5
1000d498:	4798      	blx	r3
1000d49a:	e011      	b.n	1000d4c0 <ble_event_manager+0x124>
	}
	break;

	case AT_PLATFORM_EVENT:
	{
		if (ble_user_event_cb) {
1000d49c:	4b16      	ldr	r3, [pc, #88]	; (1000d4f8 <ble_event_manager+0x15c>)
1000d49e:	681b      	ldr	r3, [r3, #0]
1000d4a0:	2b00      	cmp	r3, #0
1000d4a2:	d00d      	beq.n	1000d4c0 <ble_event_manager+0x124>
			ble_user_event_cb();
1000d4a4:	4798      	blx	r3
1000d4a6:	e00b      	b.n	1000d4c0 <ble_event_manager+0x124>
	}
	break;

	default:
	{
		DBG_LOG_DEV("BLE-Manager:Unknown Event=0x%X", events);
1000d4a8:	4e06      	ldr	r6, [pc, #24]	; (1000d4c4 <ble_event_manager+0x128>)
1000d4aa:	0030      	movs	r0, r6
1000d4ac:	4d06      	ldr	r5, [pc, #24]	; (1000d4c8 <ble_event_manager+0x12c>)
1000d4ae:	47a8      	blx	r5
1000d4b0:	0021      	movs	r1, r4
1000d4b2:	4812      	ldr	r0, [pc, #72]	; (1000d4fc <ble_event_manager+0x160>)
1000d4b4:	4b06      	ldr	r3, [pc, #24]	; (1000d4d0 <ble_event_manager+0x134>)
1000d4b6:	4798      	blx	r3
		DBG_LOG("\r\n");
1000d4b8:	0030      	movs	r0, r6
1000d4ba:	47a8      	blx	r5
1000d4bc:	0030      	movs	r0, r6
1000d4be:	47a8      	blx	r5
	}
	break;		
	}
}
1000d4c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000d4c2:	46c0      	nop			; (mov r8, r8)
1000d4c4:	10016a10 	.word	0x10016a10
1000d4c8:	100159e9 	.word	0x100159e9
1000d4cc:	10018154 	.word	0x10018154
1000d4d0:	100158c9 	.word	0x100158c9
1000d4d4:	100176b4 	.word	0x100176b4
1000d4d8:	1001a62c 	.word	0x1001a62c
1000d4dc:	1001a640 	.word	0x1001a640
1000d4e0:	10018164 	.word	0x10018164
1000d4e4:	1001a394 	.word	0x1001a394
1000d4e8:	1001a688 	.word	0x1001a688
1000d4ec:	1001a390 	.word	0x1001a390
1000d4f0:	1001a618 	.word	0x1001a618
1000d4f4:	1001abcc 	.word	0x1001abcc
1000d4f8:	10018eb0 	.word	0x10018eb0
1000d4fc:	1001817c 	.word	0x1001817c

1000d500 <ble_event_task>:
	return ulp_status;
}

/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
1000d500:	b570      	push	{r4, r5, r6, lr}
1000d502:	0004      	movs	r4, r0
	return status;
}

ble_ulp_mode_t ble_get_ulp_status(void)
{
	return ulp_status;
1000d504:	4b0d      	ldr	r3, [pc, #52]	; (1000d53c <ble_event_task+0x3c>)
1000d506:	781b      	ldrb	r3, [r3, #0]
/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
	at_ble_status_t status;
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
1000d508:	2b01      	cmp	r3, #1
1000d50a:	d101      	bne.n	1000d510 <ble_event_task+0x10>
	{
		release_sleep_lock();
1000d50c:	4b0c      	ldr	r3, [pc, #48]	; (1000d540 <ble_event_task+0x40>)
1000d50e:	4798      	blx	r3
	}	
	status = at_ble_event_get(&event, ble_event_params, timeout);
1000d510:	0022      	movs	r2, r4
1000d512:	490c      	ldr	r1, [pc, #48]	; (1000d544 <ble_event_task+0x44>)
1000d514:	480c      	ldr	r0, [pc, #48]	; (1000d548 <ble_event_task+0x48>)
1000d516:	4b0d      	ldr	r3, [pc, #52]	; (1000d54c <ble_event_task+0x4c>)
1000d518:	4798      	blx	r3
1000d51a:	0004      	movs	r4, r0
1000d51c:	0005      	movs	r5, r0
	return status;
}

ble_ulp_mode_t ble_get_ulp_status(void)
{
	return ulp_status;
1000d51e:	4b07      	ldr	r3, [pc, #28]	; (1000d53c <ble_event_task+0x3c>)
1000d520:	781b      	ldrb	r3, [r3, #0]
	{
		release_sleep_lock();
	}	
	status = at_ble_event_get(&event, ble_event_params, timeout);
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
1000d522:	2b01      	cmp	r3, #1
1000d524:	d101      	bne.n	1000d52a <ble_event_task+0x2a>
	{
		acquire_sleep_lock();
1000d526:	4b0a      	ldr	r3, [pc, #40]	; (1000d550 <ble_event_task+0x50>)
1000d528:	4798      	blx	r3
	}
	
    if (status == AT_BLE_SUCCESS) 
1000d52a:	2d00      	cmp	r5, #0
1000d52c:	d104      	bne.n	1000d538 <ble_event_task+0x38>
    {		
            ble_event_manager(event, ble_event_params);
1000d52e:	4b06      	ldr	r3, [pc, #24]	; (1000d548 <ble_event_task+0x48>)
1000d530:	7818      	ldrb	r0, [r3, #0]
1000d532:	4904      	ldr	r1, [pc, #16]	; (1000d544 <ble_event_task+0x44>)
1000d534:	4b07      	ldr	r3, [pc, #28]	; (1000d554 <ble_event_task+0x54>)
1000d536:	4798      	blx	r3
    }
    
    return status;
}
1000d538:	0020      	movs	r0, r4
1000d53a:	bd70      	pop	{r4, r5, r6, pc}
1000d53c:	10018ebf 	.word	0x10018ebf
1000d540:	1000df11 	.word	0x1000df11
1000d544:	1001a9c0 	.word	0x1001a9c0
1000d548:	1001a684 	.word	0x1001a684
1000d54c:	1000e51d 	.word	0x1000e51d
1000d550:	1000dee9 	.word	0x1000dee9
1000d554:	1000d39d 	.word	0x1000d39d

1000d558 <ble_advertisement_data_set>:
	}
}

/* Advertisement Data will be set based on the advertisement configuration */
at_ble_status_t ble_advertisement_data_set(void)
{
1000d558:	b510      	push	{r4, lr}
1000d55a:	b090      	sub	sp, #64	; 0x40
		uint8_t length_field_ind;
		uint8_t adv_element_len;
		adv_buf[adv_data_element.len] = adv_data_element.len;
		length_field_ind = adv_data_element.len;
		adv_data_element.len++;
		adv_buf[adv_data_element.len++] = COMPLETE_LIST_16BIT_SERV_UUIDS;
1000d55c:	ac08      	add	r4, sp, #32
1000d55e:	2203      	movs	r2, #3
1000d560:	7062      	strb	r2, [r4, #1]
		MREPEAT(SERVICE_UUID16_MAX_NUM, _CONF_SERVICE_16BIT_UUID, &adv_data_element);
1000d562:	2302      	movs	r3, #2
1000d564:	70a3      	strb	r3, [r4, #2]
1000d566:	3316      	adds	r3, #22
1000d568:	70e3      	strb	r3, [r4, #3]
1000d56a:	7122      	strb	r2, [r4, #4]
1000d56c:	7163      	strb	r3, [r4, #5]
1000d56e:	3201      	adds	r2, #1
1000d570:	71a2      	strb	r2, [r4, #6]
1000d572:	71e3      	strb	r3, [r4, #7]
1000d574:	320b      	adds	r2, #11
1000d576:	7222      	strb	r2, [r4, #8]
1000d578:	7263      	strb	r3, [r4, #9]
		adv_element_len = adv_data_element.len - (length_field_ind + ADV_ELEMENT_SIZE);
		if(adv_element_len) 
		{			
			adv_buf[length_field_ind] = adv_element_len+ADV_TYPE_SIZE;
1000d57a:	3b0f      	subs	r3, #15
1000d57c:	7023      	strb	r3, [r4, #0]
	#endif
	
	#if (BLE_GAP_ADV_COMPLETE_LOCAL_NAME_ENABLE && !BLE_GAP_ADV_SHORTENED_LOCAL_NAME_ENABLE)
	#if (BLE_GAP_ADV_COMPLETE_LOCAL_NAME_SCN_RSP_ENABLE != SCAN_RESPONSE_ONLY_ENABLE)
	if((adv_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_TYPE_FLAG_SIZE + ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH))) {
		adv_buf[adv_data_element.len++] = BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH + ADV_TYPE_SIZE;
1000d57e:	3a05      	subs	r2, #5
1000d580:	72a2      	strb	r2, [r4, #10]
		adv_buf[adv_data_element.len++] = COMPLETE_LOCAL_NAME;
1000d582:	72e3      	strb	r3, [r4, #11]
		memcpy(&adv_buf[adv_data_element.len], BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME, BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH);
1000d584:	aa0b      	add	r2, sp, #44	; 0x2c
1000d586:	4b16      	ldr	r3, [pc, #88]	; (1000d5e0 <ble_advertisement_data_set+0x88>)
1000d588:	cb03      	ldmia	r3!, {r0, r1}
1000d58a:	c203      	stmia	r2!, {r0, r1}
1000d58c:	781b      	ldrb	r3, [r3, #0]
1000d58e:	7013      	strb	r3, [r2, #0]
	#endif
	#if ((BLE_GAP_ADV_SERVICE_SOLTN_128BIT_UUID_SCN_RSP_ENABLE == SCAN_RESPONSE_ENABLE) || (BLE_GAP_ADV_SERVICE_SOLTN_128BIT_UUID_SCN_RSP_ENABLE == SCAN_RESPONSE_ONLY_ENABLE))
	else if((scan_resp_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_ELEMENT_SIZE + BLE_GAP_ADV_SERVICE_128BIT_UUID_LENGTH))) {
		uint8_t length_field_ind;
		uint8_t scan_resp_element_len;
		scn_resp[scan_resp_data_element.len] = scan_resp_data_element.len;
1000d590:	2300      	movs	r3, #0
1000d592:	466a      	mov	r2, sp
1000d594:	7013      	strb	r3, [r2, #0]
		length_field_ind = scan_resp_data_element.len;
		scan_resp_data_element.len++;
		scn_resp[scan_resp_data_element.len++] = LIST_128BIT_SERV_SOLICITATION_UUIDS;
1000d596:	3315      	adds	r3, #21
1000d598:	7053      	strb	r3, [r2, #1]
		return AT_BLE_GAP_INVALID_PARAM;
	}
	#endif
	
	#if BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_ENABLE
    DBG_LOG_DEV("[ble_manager]\t\t\tManufacturer specific data enabled");
1000d59a:	4812      	ldr	r0, [pc, #72]	; (1000d5e4 <ble_advertisement_data_set+0x8c>)
1000d59c:	4b12      	ldr	r3, [pc, #72]	; (1000d5e8 <ble_advertisement_data_set+0x90>)
1000d59e:	4798      	blx	r3
1000d5a0:	4812      	ldr	r0, [pc, #72]	; (1000d5ec <ble_advertisement_data_set+0x94>)
1000d5a2:	4b13      	ldr	r3, [pc, #76]	; (1000d5f0 <ble_advertisement_data_set+0x98>)
1000d5a4:	4798      	blx	r3
    DBG_LOG_DEV("[ble_manager]\t\tManufacturer specific data NOT enabled");
	if(false){}
	#endif
	#if ((BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_SCN_RSP_ENABLE == SCAN_RESPONSE_ENABLE) || (BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_SCN_RSP_ENABLE == SCAN_RESPONSE_ONLY_ENABLE))
	else if((scan_resp_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE))) {
		scn_resp[scan_resp_data_element.len++] = BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE + ADV_TYPE_SIZE;
1000d5a6:	2307      	movs	r3, #7
1000d5a8:	466a      	mov	r2, sp
1000d5aa:	7013      	strb	r3, [r2, #0]
		scn_resp[scan_resp_data_element.len++] = MANUFACTURER_SPECIFIC_DATA;
1000d5ac:	33f8      	adds	r3, #248	; 0xf8
1000d5ae:	7053      	strb	r3, [r2, #1]
		memcpy(&scn_resp[scan_resp_data_element.len], BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA, BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE);
1000d5b0:	2206      	movs	r2, #6
1000d5b2:	4910      	ldr	r1, [pc, #64]	; (1000d5f4 <ble_advertisement_data_set+0x9c>)
1000d5b4:	466b      	mov	r3, sp
1000d5b6:	1c98      	adds	r0, r3, #2
1000d5b8:	4b0f      	ldr	r3, [pc, #60]	; (1000d5f8 <ble_advertisement_data_set+0xa0>)
1000d5ba:	4798      	blx	r3
		DBG_LOG_ADV("Failed to add Manufacturer specific data");
		return AT_BLE_GAP_INVALID_PARAM;
	}
	#endif
	
	if (at_ble_adv_data_set(adv_buf, adv_data_element.len, scn_resp,
1000d5bc:	2308      	movs	r3, #8
1000d5be:	466a      	mov	r2, sp
1000d5c0:	2115      	movs	r1, #21
1000d5c2:	0020      	movs	r0, r4
1000d5c4:	4c0d      	ldr	r4, [pc, #52]	; (1000d5fc <ble_advertisement_data_set+0xa4>)
1000d5c6:	47a0      	blx	r4
1000d5c8:	2800      	cmp	r0, #0
1000d5ca:	d005      	beq.n	1000d5d8 <ble_advertisement_data_set+0x80>
	scan_resp_data_element.len) != AT_BLE_SUCCESS) {
		DBG_LOG("BLE Advertisement data set failed");
1000d5cc:	4805      	ldr	r0, [pc, #20]	; (1000d5e4 <ble_advertisement_data_set+0x8c>)
1000d5ce:	4b06      	ldr	r3, [pc, #24]	; (1000d5e8 <ble_advertisement_data_set+0x90>)
1000d5d0:	4798      	blx	r3
1000d5d2:	480b      	ldr	r0, [pc, #44]	; (1000d600 <ble_advertisement_data_set+0xa8>)
1000d5d4:	4b06      	ldr	r3, [pc, #24]	; (1000d5f0 <ble_advertisement_data_set+0x98>)
1000d5d6:	4798      	blx	r3
            //DBG_LOG_ADV("- 0x%02x(%c) ", adv_buf[i], adv_buf[i]);
        //}
		//DBG_LOG_ADV("BLE Advertisement data set success");
		return AT_BLE_SUCCESS;
    }
}
1000d5d8:	2000      	movs	r0, #0
1000d5da:	b010      	add	sp, #64	; 0x40
1000d5dc:	bd10      	pop	{r4, pc}
1000d5de:	46c0      	nop			; (mov r8, r8)
1000d5e0:	10017e98 	.word	0x10017e98
1000d5e4:	10016a10 	.word	0x10016a10
1000d5e8:	100159e9 	.word	0x100159e9
1000d5ec:	1001819c 	.word	0x1001819c
1000d5f0:	100158c9 	.word	0x100158c9
1000d5f4:	100181d0 	.word	0x100181d0
1000d5f8:	1001576f 	.word	0x1001576f
1000d5fc:	1000ef7d 	.word	0x1000ef7d
1000d600:	100181d8 	.word	0x100181d8

1000d604 <uart_read_complete_callback>:

void _time_start(unsigned int sec);
unsigned int _time_done(void);

static void uart_read_complete_callback(struct uart_module *const module)
{
1000d604:	b510      	push	{r4, lr}
	if(read_status == UART_READ_WAITING) {
1000d606:	4b0e      	ldr	r3, [pc, #56]	; (1000d640 <uart_read_complete_callback+0x3c>)
1000d608:	781b      	ldrb	r3, [r3, #0]
1000d60a:	2b01      	cmp	r3, #1
1000d60c:	d10b      	bne.n	1000d626 <uart_read_complete_callback+0x22>
		read_status = UART_READ_DONE;
1000d60e:	2202      	movs	r2, #2
1000d610:	4b0b      	ldr	r3, [pc, #44]	; (1000d640 <uart_read_complete_callback+0x3c>)
1000d612:	701a      	strb	r2, [r3, #0]
		
		if(user_callback_func == NULL)
1000d614:	4b0b      	ldr	r3, [pc, #44]	; (1000d644 <uart_read_complete_callback+0x40>)
1000d616:	681b      	ldr	r3, [r3, #0]
1000d618:	2b00      	cmp	r3, #0
1000d61a:	d110      	bne.n	1000d63e <uart_read_complete_callback+0x3a>
			uart_disable_callback(&uart_instance, UART_RX_COMPLETE);
1000d61c:	2102      	movs	r1, #2
1000d61e:	480a      	ldr	r0, [pc, #40]	; (1000d648 <uart_read_complete_callback+0x44>)
1000d620:	4b0a      	ldr	r3, [pc, #40]	; (1000d64c <uart_read_complete_callback+0x48>)
1000d622:	4798      	blx	r3
1000d624:	e00b      	b.n	1000d63e <uart_read_complete_callback+0x3a>
	}
	else if(user_callback_func != NULL) {
1000d626:	4b07      	ldr	r3, [pc, #28]	; (1000d644 <uart_read_complete_callback+0x40>)
1000d628:	681b      	ldr	r3, [r3, #0]
1000d62a:	2b00      	cmp	r3, #0
1000d62c:	d007      	beq.n	1000d63e <uart_read_complete_callback+0x3a>
		user_callback_func(string_input[0]);
1000d62e:	4c08      	ldr	r4, [pc, #32]	; (1000d650 <uart_read_complete_callback+0x4c>)
1000d630:	7820      	ldrb	r0, [r4, #0]
1000d632:	4798      	blx	r3
		uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000d634:	2201      	movs	r2, #1
1000d636:	0021      	movs	r1, r4
1000d638:	4803      	ldr	r0, [pc, #12]	; (1000d648 <uart_read_complete_callback+0x44>)
1000d63a:	4b06      	ldr	r3, [pc, #24]	; (1000d654 <uart_read_complete_callback+0x50>)
1000d63c:	4798      	blx	r3
	}
	else {
		//Nothing to do.
	}
}
1000d63e:	bd10      	pop	{r4, pc}
1000d640:	10019ec4 	.word	0x10019ec4
1000d644:	10019ecc 	.word	0x10019ecc
1000d648:	1001abd0 	.word	0x1001abd0
1000d64c:	1000c035 	.word	0x1000c035
1000d650:	10019ec8 	.word	0x10019ec8
1000d654:	1000bfd9 	.word	0x1000bfd9

1000d658 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct uart_module *const module,
		uint8_t *c)
{
1000d658:	b570      	push	{r4, r5, r6, lr}
1000d65a:	0006      	movs	r6, r0
1000d65c:	000d      	movs	r5, r1
	while(STATUS_OK != uart_read_wait(module, c));
1000d65e:	4c03      	ldr	r4, [pc, #12]	; (1000d66c <usart_serial_getchar+0x14>)
1000d660:	0029      	movs	r1, r5
1000d662:	0030      	movs	r0, r6
1000d664:	47a0      	blx	r4
1000d666:	2800      	cmp	r0, #0
1000d668:	d1fa      	bne.n	1000d660 <usart_serial_getchar+0x8>
}
1000d66a:	bd70      	pop	{r4, r5, r6, pc}
1000d66c:	1000bfc5 	.word	0x1000bfc5

1000d670 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct uart_module *const module,
		uint8_t c)
{
1000d670:	b570      	push	{r4, r5, r6, lr}
1000d672:	0006      	movs	r6, r0
1000d674:	000d      	movs	r5, r1
	while(STATUS_OK !=uart_write_wait(module, c));
1000d676:	4c03      	ldr	r4, [pc, #12]	; (1000d684 <usart_serial_putchar+0x14>)
1000d678:	0029      	movs	r1, r5
1000d67a:	0030      	movs	r0, r6
1000d67c:	47a0      	blx	r4
1000d67e:	2800      	cmp	r0, #0
1000d680:	d1fa      	bne.n	1000d678 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
1000d682:	bd70      	pop	{r4, r5, r6, pc}
1000d684:	1000bfb5 	.word	0x1000bfb5

1000d688 <serial_console_init>:

void serial_console_init(void)
{
1000d688:	b570      	push	{r4, r5, r6, lr}
	system_clock_config(CLOCK_RESOURCE_XO_26_MHZ, CLOCK_FREQ_26_MHZ);
1000d68a:	2100      	movs	r1, #0
1000d68c:	2000      	movs	r0, #0
1000d68e:	4b19      	ldr	r3, [pc, #100]	; (1000d6f4 <serial_console_init+0x6c>)
1000d690:	4798      	blx	r3

	uart_get_config_defaults(&config_uart);
1000d692:	4c19      	ldr	r4, [pc, #100]	; (1000d6f8 <serial_console_init+0x70>)
1000d694:	0020      	movs	r0, r4
1000d696:	4b19      	ldr	r3, [pc, #100]	; (1000d6fc <serial_console_init+0x74>)
1000d698:	4798      	blx	r3

	config_uart.baud_rate = CONF_STDIO_BAUDRATE;
1000d69a:	23e1      	movs	r3, #225	; 0xe1
1000d69c:	025b      	lsls	r3, r3, #9
1000d69e:	6023      	str	r3, [r4, #0]
	config_uart.pin_number_pad[0] = EDBG_CDC_PIN_PAD0;
1000d6a0:	2302      	movs	r3, #2
1000d6a2:	60a3      	str	r3, [r4, #8]
	config_uart.pin_number_pad[1] = EDBG_CDC_PIN_PAD1;
1000d6a4:	2203      	movs	r2, #3
1000d6a6:	60e2      	str	r2, [r4, #12]
	config_uart.pin_number_pad[2] = EDBG_CDC_PIN_PAD2;
1000d6a8:	3201      	adds	r2, #1
1000d6aa:	6122      	str	r2, [r4, #16]
	config_uart.pin_number_pad[3] = EDBG_CDC_PIN_PAD3;
1000d6ac:	3201      	adds	r2, #1
1000d6ae:	6162      	str	r2, [r4, #20]
	
	config_uart.pinmux_sel_pad[0] = EDBG_CDC_MUX_PAD0;
1000d6b0:	61a3      	str	r3, [r4, #24]
	config_uart.pinmux_sel_pad[1] = EDBG_CDC_MUX_PAD1;
1000d6b2:	61e3      	str	r3, [r4, #28]
	config_uart.pinmux_sel_pad[2] = EDBG_CDC_MUX_PAD2;
1000d6b4:	6223      	str	r3, [r4, #32]
	config_uart.pinmux_sel_pad[3] = EDBG_CDC_MUX_PAD3;
1000d6b6:	6263      	str	r3, [r4, #36]	; 0x24
static inline void stdio_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	stdio_base = (void *)module;
1000d6b8:	4d11      	ldr	r5, [pc, #68]	; (1000d700 <serial_console_init+0x78>)
1000d6ba:	4b12      	ldr	r3, [pc, #72]	; (1000d704 <serial_console_init+0x7c>)
1000d6bc:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
1000d6be:	4a12      	ldr	r2, [pc, #72]	; (1000d708 <serial_console_init+0x80>)
1000d6c0:	4b12      	ldr	r3, [pc, #72]	; (1000d70c <serial_console_init+0x84>)
1000d6c2:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
1000d6c4:	4a12      	ldr	r2, [pc, #72]	; (1000d710 <serial_console_init+0x88>)
1000d6c6:	4b13      	ldr	r3, [pc, #76]	; (1000d714 <serial_console_init+0x8c>)
1000d6c8:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	if (uart_init(module, hw, config) == STATUS_OK) {
1000d6ca:	0022      	movs	r2, r4
1000d6cc:	4912      	ldr	r1, [pc, #72]	; (1000d718 <serial_console_init+0x90>)
1000d6ce:	0028      	movs	r0, r5
1000d6d0:	4b12      	ldr	r3, [pc, #72]	; (1000d71c <serial_console_init+0x94>)
1000d6d2:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
1000d6d4:	4e12      	ldr	r6, [pc, #72]	; (1000d720 <serial_console_init+0x98>)
1000d6d6:	6833      	ldr	r3, [r6, #0]
1000d6d8:	6898      	ldr	r0, [r3, #8]
1000d6da:	2100      	movs	r1, #0
1000d6dc:	4c11      	ldr	r4, [pc, #68]	; (1000d724 <serial_console_init+0x9c>)
1000d6de:	47a0      	blx	r4
	setbuf(stdin, NULL);
1000d6e0:	6833      	ldr	r3, [r6, #0]
1000d6e2:	6858      	ldr	r0, [r3, #4]
1000d6e4:	2100      	movs	r1, #0
1000d6e6:	47a0      	blx	r4

	stdio_serial_init(&uart_instance, CONF_STDIO_USART_MODULE, &config_uart);
	
	uart_register_callback(&uart_instance, uart_read_complete_callback, UART_RX_COMPLETE);
1000d6e8:	2202      	movs	r2, #2
1000d6ea:	490f      	ldr	r1, [pc, #60]	; (1000d728 <serial_console_init+0xa0>)
1000d6ec:	0028      	movs	r0, r5
1000d6ee:	4b0f      	ldr	r3, [pc, #60]	; (1000d72c <serial_console_init+0xa4>)
1000d6f0:	4798      	blx	r3
}
1000d6f2:	bd70      	pop	{r4, r5, r6, pc}
1000d6f4:	1000afd5 	.word	0x1000afd5
1000d6f8:	1001abf4 	.word	0x1001abf4
1000d6fc:	1000bdcd 	.word	0x1000bdcd
1000d700:	1001abd0 	.word	0x1001abd0
1000d704:	1001a38c 	.word	0x1001a38c
1000d708:	1000d671 	.word	0x1000d671
1000d70c:	1001a388 	.word	0x1001a388
1000d710:	1000d659 	.word	0x1000d659
1000d714:	1001a384 	.word	0x1001a384
1000d718:	40004000 	.word	0x40004000
1000d71c:	1000bdf9 	.word	0x1000bdf9
1000d720:	100185a0 	.word	0x100185a0
1000d724:	10015a99 	.word	0x10015a99
1000d728:	1000d605 	.word	0x1000d605
1000d72c:	1000c001 	.word	0x1000c001

1000d730 <_time_start>:

void _time_start(unsigned int sec)
{
1000d730:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d732:	b083      	sub	sp, #12
1000d734:	0005      	movs	r5, r0
	system_clock_get_value();
1000d736:	4c0d      	ldr	r4, [pc, #52]	; (1000d76c <_time_start+0x3c>)
1000d738:	47a0      	blx	r4
	unsigned int main_clk = system_clock_get_value();
1000d73a:	47a0      	blx	r4

	tick = (((double)(main_clk)) * ((double)0.0000493)) * (sec * 1000);
1000d73c:	4f0c      	ldr	r7, [pc, #48]	; (1000d770 <_time_start+0x40>)
1000d73e:	47b8      	blx	r7
1000d740:	4e0c      	ldr	r6, [pc, #48]	; (1000d774 <_time_start+0x44>)
1000d742:	4a0d      	ldr	r2, [pc, #52]	; (1000d778 <_time_start+0x48>)
1000d744:	4b0d      	ldr	r3, [pc, #52]	; (1000d77c <_time_start+0x4c>)
1000d746:	47b0      	blx	r6
1000d748:	9000      	str	r0, [sp, #0]
1000d74a:	9101      	str	r1, [sp, #4]
1000d74c:	20fa      	movs	r0, #250	; 0xfa
1000d74e:	0080      	lsls	r0, r0, #2
1000d750:	4368      	muls	r0, r5
1000d752:	47b8      	blx	r7
1000d754:	0002      	movs	r2, r0
1000d756:	000b      	movs	r3, r1
1000d758:	9800      	ldr	r0, [sp, #0]
1000d75a:	9901      	ldr	r1, [sp, #4]
1000d75c:	47b0      	blx	r6
1000d75e:	4b08      	ldr	r3, [pc, #32]	; (1000d780 <_time_start+0x50>)
1000d760:	4798      	blx	r3
1000d762:	4b08      	ldr	r3, [pc, #32]	; (1000d784 <_time_start+0x54>)
1000d764:	6018      	str	r0, [r3, #0]
}
1000d766:	b003      	add	sp, #12
1000d768:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d76a:	46c0      	nop			; (mov r8, r8)
1000d76c:	1000b059 	.word	0x1000b059
1000d770:	10015479 	.word	0x10015479
1000d774:	100147ad 	.word	0x100147ad
1000d778:	19feaec7 	.word	0x19feaec7
1000d77c:	3f09d8ef 	.word	0x3f09d8ef
1000d780:	10012eb9 	.word	0x10012eb9
1000d784:	10019ec0 	.word	0x10019ec0

1000d788 <_time_done>:

unsigned int _time_done()
{
	return --tick;
1000d788:	4b02      	ldr	r3, [pc, #8]	; (1000d794 <_time_done+0xc>)
1000d78a:	681a      	ldr	r2, [r3, #0]
1000d78c:	1e50      	subs	r0, r2, #1
1000d78e:	6018      	str	r0, [r3, #0]
}
1000d790:	4770      	bx	lr
1000d792:	46c0      	nop			; (mov r8, r8)
1000d794:	10019ec0 	.word	0x10019ec0

1000d798 <getchar_b11_timeout>:

int getchar_b11_timeout(unsigned int sec)
{
1000d798:	b570      	push	{r4, r5, r6, lr}
1000d79a:	0004      	movs	r4, r0
	read_status = UART_READ_WAITING;
1000d79c:	2201      	movs	r2, #1
1000d79e:	4b11      	ldr	r3, [pc, #68]	; (1000d7e4 <getchar_b11_timeout+0x4c>)
1000d7a0:	701a      	strb	r2, [r3, #0]
	
	if(user_callback_func == NULL)
1000d7a2:	4b11      	ldr	r3, [pc, #68]	; (1000d7e8 <getchar_b11_timeout+0x50>)
1000d7a4:	681b      	ldr	r3, [r3, #0]
1000d7a6:	2b00      	cmp	r3, #0
1000d7a8:	d103      	bne.n	1000d7b2 <getchar_b11_timeout+0x1a>
		uart_enable_callback(&uart_instance, UART_RX_COMPLETE);
1000d7aa:	2102      	movs	r1, #2
1000d7ac:	480f      	ldr	r0, [pc, #60]	; (1000d7ec <getchar_b11_timeout+0x54>)
1000d7ae:	4b10      	ldr	r3, [pc, #64]	; (1000d7f0 <getchar_b11_timeout+0x58>)
1000d7b0:	4798      	blx	r3

	_time_start(sec);
1000d7b2:	0020      	movs	r0, r4
1000d7b4:	4b0f      	ldr	r3, [pc, #60]	; (1000d7f4 <getchar_b11_timeout+0x5c>)
1000d7b6:	4798      	blx	r3
	
	string_input[0] = 0;
1000d7b8:	490f      	ldr	r1, [pc, #60]	; (1000d7f8 <getchar_b11_timeout+0x60>)
1000d7ba:	2300      	movs	r3, #0
1000d7bc:	700b      	strb	r3, [r1, #0]
	uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000d7be:	2201      	movs	r2, #1
1000d7c0:	480a      	ldr	r0, [pc, #40]	; (1000d7ec <getchar_b11_timeout+0x54>)
1000d7c2:	4b0e      	ldr	r3, [pc, #56]	; (1000d7fc <getchar_b11_timeout+0x64>)
1000d7c4:	4798      	blx	r3
	
	while (read_status != UART_READ_DONE && _time_done() > 0 );
1000d7c6:	4c07      	ldr	r4, [pc, #28]	; (1000d7e4 <getchar_b11_timeout+0x4c>)
1000d7c8:	4d0d      	ldr	r5, [pc, #52]	; (1000d800 <getchar_b11_timeout+0x68>)
1000d7ca:	7823      	ldrb	r3, [r4, #0]
1000d7cc:	2b02      	cmp	r3, #2
1000d7ce:	d002      	beq.n	1000d7d6 <getchar_b11_timeout+0x3e>
1000d7d0:	47a8      	blx	r5
1000d7d2:	2800      	cmp	r0, #0
1000d7d4:	d1f9      	bne.n	1000d7ca <getchar_b11_timeout+0x32>
	
	read_status = UART_READ_NONE;
1000d7d6:	2200      	movs	r2, #0
1000d7d8:	4b02      	ldr	r3, [pc, #8]	; (1000d7e4 <getchar_b11_timeout+0x4c>)
1000d7da:	701a      	strb	r2, [r3, #0]

	return string_input[0];
1000d7dc:	4b06      	ldr	r3, [pc, #24]	; (1000d7f8 <getchar_b11_timeout+0x60>)
1000d7de:	7818      	ldrb	r0, [r3, #0]
}
1000d7e0:	bd70      	pop	{r4, r5, r6, pc}
1000d7e2:	46c0      	nop			; (mov r8, r8)
1000d7e4:	10019ec4 	.word	0x10019ec4
1000d7e8:	10019ecc 	.word	0x10019ecc
1000d7ec:	1001abd0 	.word	0x1001abd0
1000d7f0:	1000c015 	.word	0x1000c015
1000d7f4:	1000d731 	.word	0x1000d731
1000d7f8:	10019ec8 	.word	0x10019ec8
1000d7fc:	1000bfd9 	.word	0x1000bfd9
1000d800:	1000d789 	.word	0x1000d789

1000d804 <platform_event_free>:
void platform_event_free(struct platform_event* event);
//struct str_watched_event watched_event;

void platform_event_free(struct platform_event* event)
{
	event->next = platform_event_free_list;
1000d804:	4b02      	ldr	r3, [pc, #8]	; (1000d810 <platform_event_free+0xc>)
1000d806:	681a      	ldr	r2, [r3, #0]
1000d808:	6002      	str	r2, [r0, #0]
	platform_event_free_list = event;
1000d80a:	6018      	str	r0, [r3, #0]
}
1000d80c:	4770      	bx	lr
1000d80e:	46c0      	nop			; (mov r8, r8)
1000d810:	10019ed4 	.word	0x10019ed4

1000d814 <platform_event_post>:

void platform_event_post(uint16_t event_type, void * data, uint16_t data_len)
{
1000d814:	b530      	push	{r4, r5, lr}
	// get a free event object
	struct platform_event* evt = platform_event_free_list;
1000d816:	4b0b      	ldr	r3, [pc, #44]	; (1000d844 <platform_event_post+0x30>)
1000d818:	681c      	ldr	r4, [r3, #0]
	if(evt != NULL)
1000d81a:	2c00      	cmp	r4, #0
1000d81c:	d011      	beq.n	1000d842 <platform_event_post+0x2e>
	{
		platform_event_free_list = evt->next;
1000d81e:	6825      	ldr	r5, [r4, #0]
1000d820:	601d      	str	r5, [r3, #0]
		
		evt->next = NULL;
1000d822:	2300      	movs	r3, #0
1000d824:	6023      	str	r3, [r4, #0]
		evt->data = data;
1000d826:	60a1      	str	r1, [r4, #8]
		evt->data_len = data_len;
1000d828:	80e2      	strh	r2, [r4, #6]
		evt->event_type = event_type;
1000d82a:	80a0      	strh	r0, [r4, #4]

		if(platform_event_pending_list == NULL)
1000d82c:	4b06      	ldr	r3, [pc, #24]	; (1000d848 <platform_event_post+0x34>)
1000d82e:	681a      	ldr	r2, [r3, #0]
1000d830:	2a00      	cmp	r2, #0
1000d832:	d102      	bne.n	1000d83a <platform_event_post+0x26>
		{
			platform_event_pending_list = evt;
1000d834:	601c      	str	r4, [r3, #0]
1000d836:	e004      	b.n	1000d842 <platform_event_post+0x2e>
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
			{
				cur = cur->next;
1000d838:	001a      	movs	r2, r3
			platform_event_pending_list = evt;
		}
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
1000d83a:	6813      	ldr	r3, [r2, #0]
1000d83c:	2b00      	cmp	r3, #0
1000d83e:	d1fb      	bne.n	1000d838 <platform_event_post+0x24>
			{
				cur = cur->next;
			}
			cur->next = evt;
1000d840:	6014      	str	r4, [r2, #0]
		}
		
		//platform_event_signal();
	}
	
}
1000d842:	bd30      	pop	{r4, r5, pc}
1000d844:	10019ed4 	.word	0x10019ed4
1000d848:	10019ed0 	.word	0x10019ed0

1000d84c <platform_event_init>:
	return status;
	
}

void platform_event_init()
{
1000d84c:	b570      	push	{r4, r5, r6, lr}
	uint32_t i;
	platform_event_free_list = NULL;
1000d84e:	2300      	movs	r3, #0
1000d850:	4a06      	ldr	r2, [pc, #24]	; (1000d86c <platform_event_init+0x20>)
1000d852:	6013      	str	r3, [r2, #0]
	platform_event_pending_list = NULL;
1000d854:	4a06      	ldr	r2, [pc, #24]	; (1000d870 <platform_event_init+0x24>)
1000d856:	6013      	str	r3, [r2, #0]
1000d858:	4c06      	ldr	r4, [pc, #24]	; (1000d874 <platform_event_init+0x28>)
1000d85a:	0026      	movs	r6, r4
1000d85c:	3678      	adds	r6, #120	; 0x78
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
	{
		platform_event_free(&platform_event_pool[i]);
1000d85e:	4d06      	ldr	r5, [pc, #24]	; (1000d878 <platform_event_init+0x2c>)
1000d860:	0020      	movs	r0, r4
1000d862:	47a8      	blx	r5
1000d864:	340c      	adds	r4, #12
{
	uint32_t i;
	platform_event_free_list = NULL;
	platform_event_pending_list = NULL;
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
1000d866:	42b4      	cmp	r4, r6
1000d868:	d1fa      	bne.n	1000d860 <platform_event_init+0x14>
	{
		platform_event_free(&platform_event_pool[i]);
	}
}
1000d86a:	bd70      	pop	{r4, r5, r6, pc}
1000d86c:	10019ed4 	.word	0x10019ed4
1000d870:	10019ed0 	.word	0x10019ed0
1000d874:	10019ed8 	.word	0x10019ed8
1000d878:	1000d805 	.word	0x1000d805

1000d87c <at_ke_msg_send>:
	}
	return status;
}

static void at_ke_msg_send(void const * param_ptr)
{
1000d87c:	b570      	push	{r4, r5, r6, lr}
1000d87e:	0004      	movs	r4, r0
	struct ke_msg *kemsg;
	uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
1000d880:	4b13      	ldr	r3, [pc, #76]	; (1000d8d0 <at_ke_msg_send+0x54>)
1000d882:	681d      	ldr	r5, [r3, #0]
	ke_msg_send(param_ptr);
1000d884:	4b13      	ldr	r3, [pc, #76]	; (1000d8d4 <at_ke_msg_send+0x58>)
1000d886:	681b      	ldr	r3, [r3, #0]
1000d888:	4798      	blx	r3
	kemsg = ke_param2msg(param_ptr);

	if((kemsg != NULL) && (kemsg->dest_id != TASK_INTERNAL_APP)) {
1000d88a:	2c0c      	cmp	r4, #12
1000d88c:	d01f      	beq.n	1000d8ce <at_ke_msg_send+0x52>
1000d88e:	3c0c      	subs	r4, #12
1000d890:	88e3      	ldrh	r3, [r4, #6]
1000d892:	2b05      	cmp	r3, #5
1000d894:	d01b      	beq.n	1000d8ce <at_ke_msg_send+0x52>
		if(osc_en == 0)
1000d896:	07eb      	lsls	r3, r5, #31
1000d898:	d414      	bmi.n	1000d8c4 <at_ke_msg_send+0x48>
		{
			/* BLE Core is off, issue a wakeup request*/
			/* First, make sure PD4 is powered up and out of reset */
			pwr_enable_arm_wakeup(1<<1);
1000d89a:	4b0f      	ldr	r3, [pc, #60]	; (1000d8d8 <at_ke_msg_send+0x5c>)
1000d89c:	681b      	ldr	r3, [r3, #0]
1000d89e:	2002      	movs	r0, #2
1000d8a0:	4798      	blx	r3
			pwr_arm_wakeup_req();
1000d8a2:	4b0e      	ldr	r3, [pc, #56]	; (1000d8dc <at_ke_msg_send+0x60>)
1000d8a4:	681b      	ldr	r3, [r3, #0]
1000d8a6:	4798      	blx	r3
			while (pwr_wait_BLE_out_of_reset(3));
1000d8a8:	4c0d      	ldr	r4, [pc, #52]	; (1000d8e0 <at_ke_msg_send+0x64>)
1000d8aa:	2003      	movs	r0, #3
1000d8ac:	6823      	ldr	r3, [r4, #0]
1000d8ae:	4798      	blx	r3
1000d8b0:	2800      	cmp	r0, #0
1000d8b2:	d1fa      	bne.n	1000d8aa <at_ke_msg_send+0x2e>
			pwr_disable_arm_wakeup(1<<1);
1000d8b4:	4b0b      	ldr	r3, [pc, #44]	; (1000d8e4 <at_ke_msg_send+0x68>)
1000d8b6:	681b      	ldr	r3, [r3, #0]
1000d8b8:	3002      	adds	r0, #2
1000d8ba:	4798      	blx	r3
			REG_PL_WR(0x4000B020, 1);
1000d8bc:	2201      	movs	r2, #1
1000d8be:	4b0a      	ldr	r3, [pc, #40]	; (1000d8e8 <at_ke_msg_send+0x6c>)
1000d8c0:	601a      	str	r2, [r3, #0]
1000d8c2:	e004      	b.n	1000d8ce <at_ke_msg_send+0x52>
#endif	//CHIPVERSION_B0
		}
		else
		{
			/*  */
			os_sem_up(gstrFwSem);
1000d8c4:	4b09      	ldr	r3, [pc, #36]	; (1000d8ec <at_ke_msg_send+0x70>)
1000d8c6:	6818      	ldr	r0, [r3, #0]
1000d8c8:	4b09      	ldr	r3, [pc, #36]	; (1000d8f0 <at_ke_msg_send+0x74>)
1000d8ca:	681b      	ldr	r3, [r3, #0]
1000d8cc:	4798      	blx	r3
		}
	}
}
1000d8ce:	bd70      	pop	{r4, r5, r6, pc}
1000d8d0:	4000b1ec 	.word	0x4000b1ec
1000d8d4:	10019f80 	.word	0x10019f80
1000d8d8:	10019f78 	.word	0x10019f78
1000d8dc:	10019f8c 	.word	0x10019f8c
1000d8e0:	10019f60 	.word	0x10019f60
1000d8e4:	10019f68 	.word	0x10019f68
1000d8e8:	4000b020 	.word	0x4000b020
1000d8ec:	10019f6c 	.word	0x10019f6c
1000d8f0:	10019f5c 	.word	0x10019f5c

1000d8f4 <samb11_plf_resume_callback>:
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
	return status;
}

void samb11_plf_resume_callback(void)
{
1000d8f4:	b510      	push	{r4, lr}
	//spi_flash_turn_off();
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,default_samb11_clock_init[0]);
1000d8f6:	4b06      	ldr	r3, [pc, #24]	; (1000d910 <samb11_plf_resume_callback+0x1c>)
1000d8f8:	4a06      	ldr	r2, [pc, #24]	; (1000d914 <samb11_plf_resume_callback+0x20>)
1000d8fa:	6819      	ldr	r1, [r3, #0]
1000d8fc:	6011      	str	r1, [r2, #0]
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,default_samb11_clock_init[1]);
1000d8fe:	685a      	ldr	r2, [r3, #4]
1000d900:	4b05      	ldr	r3, [pc, #20]	; (1000d918 <samb11_plf_resume_callback+0x24>)
1000d902:	601a      	str	r2, [r3, #0]
	if(samb11_app_resume_cb != NULL)
1000d904:	4b05      	ldr	r3, [pc, #20]	; (1000d91c <samb11_plf_resume_callback+0x28>)
1000d906:	681b      	ldr	r3, [r3, #0]
1000d908:	2b00      	cmp	r3, #0
1000d90a:	d000      	beq.n	1000d90e <samb11_plf_resume_callback+0x1a>
	{
		samb11_app_resume_cb();
1000d90c:	4798      	blx	r3
	}
}
1000d90e:	bd10      	pop	{r4, pc}
1000d910:	1001ac1c 	.word	0x1001ac1c
1000d914:	4000b00c 	.word	0x4000b00c
1000d918:	4000b010 	.word	0x4000b010
1000d91c:	1001aef8 	.word	0x1001aef8

1000d920 <init_port_list>:
port port_list[LPGPIO_MAX];
uint32_t default_samb11_clock_init[2];
void samb11_plf_resume_callback(void);

void init_port_list(void)
{
1000d920:	b570      	push	{r4, r5, r6, lr}
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
1000d922:	2232      	movs	r2, #50	; 0x32
1000d924:	2100      	movs	r1, #0
1000d926:	480d      	ldr	r0, [pc, #52]	; (1000d95c <init_port_list+0x3c>)
1000d928:	4b0d      	ldr	r3, [pc, #52]	; (1000d960 <init_port_list+0x40>)
1000d92a:	4798      	blx	r3
1000d92c:	2100      	movs	r1, #0
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000d92e:	480b      	ldr	r0, [pc, #44]	; (1000d95c <init_port_list+0x3c>)
		port_list[i].bit.available = 1;
1000d930:	2501      	movs	r5, #1
		port_list[i].bit.configured = 0;
1000d932:	2402      	movs	r4, #2
void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000d934:	004a      	lsls	r2, r1, #1
1000d936:	5411      	strb	r1, [r2, r0]
		port_list[i].bit.available = 1;
1000d938:	1882      	adds	r2, r0, r2
1000d93a:	7853      	ldrb	r3, [r2, #1]
1000d93c:	432b      	orrs	r3, r5
		port_list[i].bit.configured = 0;
1000d93e:	b2db      	uxtb	r3, r3
1000d940:	43a3      	bics	r3, r4
1000d942:	7053      	strb	r3, [r2, #1]
1000d944:	3101      	adds	r1, #1

void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
1000d946:	2919      	cmp	r1, #25
1000d948:	d1f4      	bne.n	1000d934 <init_port_list+0x14>
		port_list[i].bit.gpio_num = i;
		port_list[i].bit.available = 1;
		port_list[i].bit.configured = 0;
	}
	//Set the GPIO for SWD is not available
	port_list[0].bit.available = 0;
1000d94a:	4b04      	ldr	r3, [pc, #16]	; (1000d95c <init_port_list+0x3c>)
1000d94c:	785a      	ldrb	r2, [r3, #1]
1000d94e:	3918      	subs	r1, #24
1000d950:	438a      	bics	r2, r1
1000d952:	705a      	strb	r2, [r3, #1]
	port_list[1].bit.available = 0;
1000d954:	78da      	ldrb	r2, [r3, #3]
1000d956:	438a      	bics	r2, r1
1000d958:	70da      	strb	r2, [r3, #3]
	//GPIO 14 is used for Coex and controlled by Firmware
	//port_list[14].bit.available = 0;
}
1000d95a:	bd70      	pop	{r4, r5, r6, pc}
1000d95c:	1001ac38 	.word	0x1001ac38
1000d960:	10015781 	.word	0x10015781

1000d964 <init_clock>:

void init_clock(void)
{
	uint32_t regval;
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0);
1000d964:	4a06      	ldr	r2, [pc, #24]	; (1000d980 <init_clock+0x1c>)
1000d966:	6811      	ldr	r1, [r2, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_1_CLK_EN);
	//disable UART core & interface clocks
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_IF_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN);
1000d968:	4b06      	ldr	r3, [pc, #24]	; (1000d984 <init_clock+0x20>)
1000d96a:	400b      	ands	r3, r1
	//disable I2C core 1 clocks
	//regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C1_CORE_CLK_EN);		//do not disable I2C because I2C driver in ASF will not enable.
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,regval);
1000d96c:	6013      	str	r3, [r2, #0]
	default_samb11_clock_init[0] = regval;
1000d96e:	4a06      	ldr	r2, [pc, #24]	; (1000d988 <init_clock+0x24>)
1000d970:	6013      	str	r3, [r2, #0]
	
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1);
1000d972:	4906      	ldr	r1, [pc, #24]	; (1000d98c <init_clock+0x28>)
1000d974:	6808      	ldr	r0, [r1, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_4_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_5_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_6_CLK_EN);
	//disable SPI SCK Phase int clock 
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN);
1000d976:	4b06      	ldr	r3, [pc, #24]	; (1000d990 <init_clock+0x2c>)
1000d978:	4003      	ands	r3, r0
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,regval);
1000d97a:	600b      	str	r3, [r1, #0]
	default_samb11_clock_init[1] = regval;
1000d97c:	6053      	str	r3, [r2, #4]
	//ARM debugger
	
	//store default values
}
1000d97e:	4770      	bx	lr
1000d980:	4000b00c 	.word	0x4000b00c
1000d984:	fffe0fd3 	.word	0xfffe0fd3
1000d988:	1001ac1c 	.word	0x1001ac1c
1000d98c:	4000b010 	.word	0x4000b010
1000d990:	ffffe7c0 	.word	0xffffe7c0

1000d994 <platform_driver_init>:

plf_drv_status platform_driver_init()
{
1000d994:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d996:	4657      	mov	r7, sl
1000d998:	464e      	mov	r6, r9
1000d99a:	4645      	mov	r5, r8
1000d99c:	b4e0      	push	{r5, r6, r7}
	plf_drv_status status = STATUS_NOT_INITIALIZED;
	if((platform_initialized == 0) || (platform_initialized != 1)) {
1000d99e:	4b4f      	ldr	r3, [pc, #316]	; (1000dadc <platform_driver_init+0x148>)
1000d9a0:	781b      	ldrb	r3, [r3, #0]
1000d9a2:	2b00      	cmp	r3, #0
1000d9a4:	d004      	beq.n	1000d9b0 <platform_driver_init+0x1c>
1000d9a6:	4b4d      	ldr	r3, [pc, #308]	; (1000dadc <platform_driver_init+0x148>)
1000d9a8:	781b      	ldrb	r3, [r3, #0]
1000d9aa:	2b01      	cmp	r3, #1
1000d9ac:	d100      	bne.n	1000d9b0 <platform_driver_init+0x1c>
1000d9ae:	e08c      	b.n	1000daca <platform_driver_init+0x136>
		init_port_list();
1000d9b0:	4b4b      	ldr	r3, [pc, #300]	; (1000dae0 <platform_driver_init+0x14c>)
1000d9b2:	4798      	blx	r3
		init_clock();
1000d9b4:	4b4b      	ldr	r3, [pc, #300]	; (1000dae4 <platform_driver_init+0x150>)
1000d9b6:	4798      	blx	r3
		// Initialize the ble stack message handler to NULL
		ble_stack_message_handler = NULL;
1000d9b8:	2300      	movs	r3, #0
1000d9ba:	4698      	mov	r8, r3
1000d9bc:	4b4a      	ldr	r3, [pc, #296]	; (1000dae8 <platform_driver_init+0x154>)
1000d9be:	4642      	mov	r2, r8
1000d9c0:	601a      	str	r2, [r3, #0]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000d9c2:	4c4a      	ldr	r4, [pc, #296]	; (1000daec <platform_driver_init+0x158>)
1000d9c4:	2380      	movs	r3, #128	; 0x80
1000d9c6:	2280      	movs	r2, #128	; 0x80
1000d9c8:	0412      	lsls	r2, r2, #16
1000d9ca:	4692      	mov	sl, r2
1000d9cc:	50e2      	str	r2, [r4, r3]
1000d9ce:	2280      	movs	r2, #128	; 0x80
1000d9d0:	0452      	lsls	r2, r2, #17
1000d9d2:	4691      	mov	r9, r2
1000d9d4:	50e2      	str	r2, [r4, r3]
#ifdef CHIPVERSION_B0
		NVIC_DisableIRQ(GPIO0_IRQn);
		NVIC_DisableIRQ(GPIO1_IRQn);
		/* NVIC_DisableIRQ(PORT0_COMB_IRQn); */
		/* NVIC_DisableIRQ(PORT1_COMB_IRQn); */
		platform_register_isr = (uint8_t (*)(uint8_t ,void *))0x000007d7;
1000d9d6:	4d46      	ldr	r5, [pc, #280]	; (1000daf0 <platform_driver_init+0x15c>)
1000d9d8:	4b46      	ldr	r3, [pc, #280]	; (1000daf4 <platform_driver_init+0x160>)
1000d9da:	602b      	str	r3, [r5, #0]
		platform_unregister_isr = (uint8_t (*)(uint8_t ))0x000007bd;
1000d9dc:	4b46      	ldr	r3, [pc, #280]	; (1000daf8 <platform_driver_init+0x164>)
1000d9de:	4a47      	ldr	r2, [pc, #284]	; (1000dafc <platform_driver_init+0x168>)
1000d9e0:	6013      	str	r3, [r2, #0]
		handle_ext_wakeup_isr = (void (*)(void))0x1bc51;
1000d9e2:	4947      	ldr	r1, [pc, #284]	; (1000db00 <platform_driver_init+0x16c>)
1000d9e4:	4a47      	ldr	r2, [pc, #284]	; (1000db04 <platform_driver_init+0x170>)
1000d9e6:	6011      	str	r1, [r2, #0]
		gapm_get_task_from_id = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400bc));
1000d9e8:	4a47      	ldr	r2, [pc, #284]	; (1000db08 <platform_driver_init+0x174>)
1000d9ea:	6811      	ldr	r1, [r2, #0]
1000d9ec:	4a47      	ldr	r2, [pc, #284]	; (1000db0c <platform_driver_init+0x178>)
1000d9ee:	6011      	str	r1, [r2, #0]
		gapm_get_id_from_task = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400b8));
1000d9f0:	4a47      	ldr	r2, [pc, #284]	; (1000db10 <platform_driver_init+0x17c>)
1000d9f2:	6811      	ldr	r1, [r2, #0]
1000d9f4:	4a47      	ldr	r2, [pc, #284]	; (1000db14 <platform_driver_init+0x180>)
1000d9f6:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_set = (void (*)(uint16_t))0x0001b99f;
1000d9f8:	4947      	ldr	r1, [pc, #284]	; (1000db18 <platform_driver_init+0x184>)
1000d9fa:	4a48      	ldr	r2, [pc, #288]	; (1000db1c <platform_driver_init+0x188>)
1000d9fc:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_clear = (void (*)(uint16_t))0x0001b9db;
1000d9fe:	4948      	ldr	r1, [pc, #288]	; (1000db20 <platform_driver_init+0x18c>)
1000da00:	4a48      	ldr	r2, [pc, #288]	; (1000db24 <platform_driver_init+0x190>)
1000da02:	6011      	str	r1, [r2, #0]
		apps_resume_cb = (uint32_t *)0x1004003c;
1000da04:	4f48      	ldr	r7, [pc, #288]	; (1000db28 <platform_driver_init+0x194>)
1000da06:	4a49      	ldr	r2, [pc, #292]	; (1000db2c <platform_driver_init+0x198>)
1000da08:	603a      	str	r2, [r7, #0]
		actualfreq = (uint32_t *)0x10041FC0; /* set to NULL for now as clock calibration is disabled for the time being */  /*(uint32_t *)0x10006bd8;*/
1000da0a:	4949      	ldr	r1, [pc, #292]	; (1000db30 <platform_driver_init+0x19c>)
1000da0c:	4a49      	ldr	r2, [pc, #292]	; (1000db34 <platform_driver_init+0x1a0>)
1000da0e:	6011      	str	r1, [r2, #0]
		updateuartbr_fp = (void (*)())0x10041FC4;
1000da10:	4949      	ldr	r1, [pc, #292]	; (1000db38 <platform_driver_init+0x1a4>)
1000da12:	4a4a      	ldr	r2, [pc, #296]	; (1000db3c <platform_driver_init+0x1a8>)
1000da14:	6011      	str	r1, [r2, #0]
		wakeup_source_active_cb = (uint32_t *)0x10041FD4;
1000da16:	4e4a      	ldr	r6, [pc, #296]	; (1000db40 <platform_driver_init+0x1ac>)
1000da18:	4a4a      	ldr	r2, [pc, #296]	; (1000db44 <platform_driver_init+0x1b0>)
1000da1a:	6032      	str	r2, [r6, #0]
		wakeup_event_pending = (uint32_t *)0x10041FD8;
1000da1c:	494a      	ldr	r1, [pc, #296]	; (1000db48 <platform_driver_init+0x1b4>)
1000da1e:	4a4b      	ldr	r2, [pc, #300]	; (1000db4c <platform_driver_init+0x1b8>)
1000da20:	6011      	str	r1, [r2, #0]
		/* power APIs */
		pwr_enable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cbe9;
1000da22:	494b      	ldr	r1, [pc, #300]	; (1000db50 <platform_driver_init+0x1bc>)
1000da24:	4a4b      	ldr	r2, [pc, #300]	; (1000db54 <platform_driver_init+0x1c0>)
1000da26:	6011      	str	r1, [r2, #0]
		pwr_disable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cd8f;
1000da28:	494b      	ldr	r1, [pc, #300]	; (1000db58 <platform_driver_init+0x1c4>)
1000da2a:	4a4c      	ldr	r2, [pc, #304]	; (1000db5c <platform_driver_init+0x1c8>)
1000da2c:	6011      	str	r1, [r2, #0]
		pwr_arm_wakeup_req = (int (*)(void))0x0001cea3;
1000da2e:	494c      	ldr	r1, [pc, #304]	; (1000db60 <platform_driver_init+0x1cc>)
1000da30:	4a4c      	ldr	r2, [pc, #304]	; (1000db64 <platform_driver_init+0x1d0>)
1000da32:	6011      	str	r1, [r2, #0]
		pwr_wait_BLE_out_of_reset = (int (*)(uint32_t threshold))0x0001cbcf;
1000da34:	494c      	ldr	r1, [pc, #304]	; (1000db68 <platform_driver_init+0x1d4>)
1000da36:	4a4d      	ldr	r2, [pc, #308]	; (1000db6c <platform_driver_init+0x1d8>)
1000da38:	6011      	str	r1, [r2, #0]
		NVIC_DisableIRQ(PORT1_ALL_IRQn);
		platform_register_isr = register_isr;
		platform_unregister_isr = unregister_isr;
		handle_ext_wakeup_isr = (void (*)(void))0x14085;
#endif
		platform_unregister_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX);
1000da3a:	2028      	movs	r0, #40	; 0x28
1000da3c:	4798      	blx	r3
		platform_register_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX,(void*)PORT1_COMB_Handler);
1000da3e:	494c      	ldr	r1, [pc, #304]	; (1000db70 <platform_driver_init+0x1dc>)
1000da40:	2028      	movs	r0, #40	; 0x28
1000da42:	682b      	ldr	r3, [r5, #0]
1000da44:	4798      	blx	r3
		platform_register_isr(GPIO0_COMBINED_VECTOR_TABLE_INDEX,(void*)gpio0_combined_isr_handler);
1000da46:	682b      	ldr	r3, [r5, #0]
1000da48:	494a      	ldr	r1, [pc, #296]	; (1000db74 <platform_driver_init+0x1e0>)
1000da4a:	2027      	movs	r0, #39	; 0x27
1000da4c:	4798      	blx	r3
		//gstrFwSem               = (void *)0x100004e4;
		//NMI_MsgQueueRecv = (int (*)(void *, void ** )) 0x00017f67;
		//InternalAppMsgQHandle = (void *)0x10001158;
		//ke_free = (void (*)(void *)) 0x00015e3d;
#elif CHIPVERSION_B0
		ke_msg_send 	= (void (*)(void const *))(*((unsigned int *)0x100400e4));
1000da4e:	4b4a      	ldr	r3, [pc, #296]	; (1000db78 <platform_driver_init+0x1e4>)
1000da50:	681a      	ldr	r2, [r3, #0]
1000da52:	4b4a      	ldr	r3, [pc, #296]	; (1000db7c <platform_driver_init+0x1e8>)
1000da54:	601a      	str	r2, [r3, #0]
		ke_msg_alloc 	= (void* (*)(ke_msg_id_t const id, ke_task_id_t const dest_id,
1000da56:	4a4a      	ldr	r2, [pc, #296]	; (1000db80 <platform_driver_init+0x1ec>)
1000da58:	4b4a      	ldr	r3, [pc, #296]	; (1000db84 <platform_driver_init+0x1f0>)
1000da5a:	601a      	str	r2, [r3, #0]
										ke_task_id_t const src_id, uint16_t const param_len) )0x00019fe9;
		os_sem_up 		= (int (*)(void*))0x0001dbdd;
1000da5c:	4a4a      	ldr	r2, [pc, #296]	; (1000db88 <platform_driver_init+0x1f4>)
1000da5e:	4b4b      	ldr	r3, [pc, #300]	; (1000db8c <platform_driver_init+0x1f8>)
1000da60:	601a      	str	r2, [r3, #0]
		os_sem_down		= (int (*)(void*))0x0001dc5b;
1000da62:	4a4b      	ldr	r2, [pc, #300]	; (1000db90 <platform_driver_init+0x1fc>)
1000da64:	4b4b      	ldr	r3, [pc, #300]	; (1000db94 <platform_driver_init+0x200>)
1000da66:	601a      	str	r2, [r3, #0]
		gstrFwSem 		= (void*)0x100405ec;
1000da68:	4a4b      	ldr	r2, [pc, #300]	; (1000db98 <platform_driver_init+0x204>)
1000da6a:	4b4c      	ldr	r3, [pc, #304]	; (1000db9c <platform_driver_init+0x208>)
1000da6c:	601a      	str	r2, [r3, #0]
		NMI_MsgQueueRecv = (int(*)(void*, void ** ))0x0001d5e3;
1000da6e:	4a4c      	ldr	r2, [pc, #304]	; (1000dba0 <platform_driver_init+0x20c>)
1000da70:	4b4c      	ldr	r3, [pc, #304]	; (1000dba4 <platform_driver_init+0x210>)
1000da72:	601a      	str	r2, [r3, #0]
		InternalAppMsgQHandle = (void*)0x10040c20;
1000da74:	4a4c      	ldr	r2, [pc, #304]	; (1000dba8 <platform_driver_init+0x214>)
1000da76:	4b4d      	ldr	r3, [pc, #308]	; (1000dbac <platform_driver_init+0x218>)
1000da78:	601a      	str	r2, [r3, #0]
		ke_free = (void(*)(void*))0x00019f09;
1000da7a:	4a4d      	ldr	r2, [pc, #308]	; (1000dbb0 <platform_driver_init+0x21c>)
1000da7c:	4b4d      	ldr	r3, [pc, #308]	; (1000dbb4 <platform_driver_init+0x220>)
1000da7e:	601a      	str	r2, [r3, #0]
#endif
		memset(rx_buffer,0,sizeof(rx_buffer));
1000da80:	22a0      	movs	r2, #160	; 0xa0
1000da82:	0092      	lsls	r2, r2, #2
1000da84:	2100      	movs	r1, #0
1000da86:	484c      	ldr	r0, [pc, #304]	; (1000dbb8 <platform_driver_init+0x224>)
1000da88:	4b4c      	ldr	r3, [pc, #304]	; (1000dbbc <platform_driver_init+0x228>)
1000da8a:	4798      	blx	r3
		plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000da8c:	2280      	movs	r2, #128	; 0x80
1000da8e:	0092      	lsls	r2, r2, #2
1000da90:	4b4b      	ldr	r3, [pc, #300]	; (1000dbc0 <platform_driver_init+0x22c>)
1000da92:	801a      	strh	r2, [r3, #0]
		platform_event_init();
1000da94:	4b4b      	ldr	r3, [pc, #300]	; (1000dbc4 <platform_driver_init+0x230>)
1000da96:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000da98:	4653      	mov	r3, sl
1000da9a:	6023      	str	r3, [r4, #0]
1000da9c:	464b      	mov	r3, r9
1000da9e:	6023      	str	r3, [r4, #0]
		
#ifndef CHIPVERSION_B0		
		// spi_flash clock fix.
		spi_flash_clock_init();
#endif
		samb11_app_resume_cb = NULL;
1000daa0:	4b49      	ldr	r3, [pc, #292]	; (1000dbc8 <platform_driver_init+0x234>)
1000daa2:	4642      	mov	r2, r8
1000daa4:	601a      	str	r2, [r3, #0]
		*apps_resume_cb = (uint32_t)((resume_callback)samb11_plf_resume_callback);
1000daa6:	683b      	ldr	r3, [r7, #0]
1000daa8:	4a48      	ldr	r2, [pc, #288]	; (1000dbcc <platform_driver_init+0x238>)
1000daaa:	601a      	str	r2, [r3, #0]
		*wakeup_source_active_cb = (uint32_t)((wakeup_source_active_callback)wakeup_active_event_callback);
1000daac:	6833      	ldr	r3, [r6, #0]
1000daae:	4a48      	ldr	r2, [pc, #288]	; (1000dbd0 <platform_driver_init+0x23c>)
1000dab0:	601a      	str	r2, [r3, #0]
		wakeup_int_unregister_callback(0);
1000dab2:	2000      	movs	r0, #0
1000dab4:	4c47      	ldr	r4, [pc, #284]	; (1000dbd4 <platform_driver_init+0x240>)
1000dab6:	47a0      	blx	r4
		wakeup_int_unregister_callback(1);
1000dab8:	2001      	movs	r0, #1
1000daba:	47a0      	blx	r4
		wakeup_int_unregister_callback(2);
1000dabc:	2002      	movs	r0, #2
1000dabe:	47a0      	blx	r4
		platform_initialized = 1;
1000dac0:	2201      	movs	r2, #1
1000dac2:	4b06      	ldr	r3, [pc, #24]	; (1000dadc <platform_driver_init+0x148>)
1000dac4:	701a      	strb	r2, [r3, #0]
		status = STATUS_SUCCESS;
1000dac6:	2000      	movs	r0, #0
1000dac8:	e003      	b.n	1000dad2 <platform_driver_init+0x13e>
	}
	else {
		platform_initialized = 1;
1000daca:	2201      	movs	r2, #1
1000dacc:	4b03      	ldr	r3, [pc, #12]	; (1000dadc <platform_driver_init+0x148>)
1000dace:	701a      	strb	r2, [r3, #0]
		status = STATUS_ALREADY_INITIALIZED;
1000dad0:	2001      	movs	r0, #1
	}
	return status;
}
1000dad2:	bc1c      	pop	{r2, r3, r4}
1000dad4:	4690      	mov	r8, r2
1000dad6:	4699      	mov	r9, r3
1000dad8:	46a2      	mov	sl, r4
1000dada:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000dadc:	10019f64 	.word	0x10019f64
1000dae0:	1000d921 	.word	0x1000d921
1000dae4:	1000d965 	.word	0x1000d965
1000dae8:	10019f84 	.word	0x10019f84
1000daec:	e000e100 	.word	0xe000e100
1000daf0:	1001aeec 	.word	0x1001aeec
1000daf4:	000007d7 	.word	0x000007d7
1000daf8:	000007bd 	.word	0x000007bd
1000dafc:	1001ac28 	.word	0x1001ac28
1000db00:	0001bc51 	.word	0x0001bc51
1000db04:	1001aef0 	.word	0x1001aef0
1000db08:	100400bc 	.word	0x100400bc
1000db0c:	10019f58 	.word	0x10019f58
1000db10:	100400b8 	.word	0x100400b8
1000db14:	10019f54 	.word	0x10019f54
1000db18:	0001b99f 	.word	0x0001b99f
1000db1c:	1001ac24 	.word	0x1001ac24
1000db20:	0001b9db 	.word	0x0001b9db
1000db24:	1001ac30 	.word	0x1001ac30
1000db28:	1001af00 	.word	0x1001af00
1000db2c:	1004003c 	.word	0x1004003c
1000db30:	10041fc0 	.word	0x10041fc0
1000db34:	1001ac34 	.word	0x1001ac34
1000db38:	10041fc4 	.word	0x10041fc4
1000db3c:	1001aefc 	.word	0x1001aefc
1000db40:	1001aef4 	.word	0x1001aef4
1000db44:	10041fd4 	.word	0x10041fd4
1000db48:	10041fd8 	.word	0x10041fd8
1000db4c:	1001ac2c 	.word	0x1001ac2c
1000db50:	0001cbe9 	.word	0x0001cbe9
1000db54:	10019f78 	.word	0x10019f78
1000db58:	0001cd8f 	.word	0x0001cd8f
1000db5c:	10019f68 	.word	0x10019f68
1000db60:	0001cea3 	.word	0x0001cea3
1000db64:	10019f8c 	.word	0x10019f8c
1000db68:	0001cbcf 	.word	0x0001cbcf
1000db6c:	10019f60 	.word	0x10019f60
1000db70:	1000e01d 	.word	0x1000e01d
1000db74:	1000dfb1 	.word	0x1000dfb1
1000db78:	100400e4 	.word	0x100400e4
1000db7c:	10019f80 	.word	0x10019f80
1000db80:	00019fe9 	.word	0x00019fe9
1000db84:	10019f90 	.word	0x10019f90
1000db88:	0001dbdd 	.word	0x0001dbdd
1000db8c:	10019f5c 	.word	0x10019f5c
1000db90:	0001dc5b 	.word	0x0001dc5b
1000db94:	10019f70 	.word	0x10019f70
1000db98:	100405ec 	.word	0x100405ec
1000db9c:	10019f6c 	.word	0x10019f6c
1000dba0:	0001d5e3 	.word	0x0001d5e3
1000dba4:	10019f7c 	.word	0x10019f7c
1000dba8:	10040c20 	.word	0x10040c20
1000dbac:	10019f94 	.word	0x10019f94
1000dbb0:	00019f09 	.word	0x00019f09
1000dbb4:	10019f50 	.word	0x10019f50
1000dbb8:	1001ac6c 	.word	0x1001ac6c
1000dbbc:	10015781 	.word	0x10015781
1000dbc0:	1001af04 	.word	0x1001af04
1000dbc4:	1000d84d 	.word	0x1000d84d
1000dbc8:	1001aef8 	.word	0x1001aef8
1000dbcc:	1000d8f5 	.word	0x1000d8f5
1000dbd0:	1000e079 	.word	0x1000e079
1000dbd4:	1000e061 	.word	0x1000e061

1000dbd8 <platform_register_ble_msg_handler>:


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000dbd8:	4b04      	ldr	r3, [pc, #16]	; (1000dbec <platform_register_ble_msg_handler+0x14>)
1000dbda:	781a      	ldrb	r2, [r3, #0]
		ble_stack_message_handler = fp;
		status = STATUS_SUCCESS;
	}
	else {
		status = STATUS_NOT_INITIALIZED;
1000dbdc:	2305      	movs	r3, #5


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000dbde:	2a01      	cmp	r2, #1
1000dbe0:	d102      	bne.n	1000dbe8 <platform_register_ble_msg_handler+0x10>
		ble_stack_message_handler = fp;
1000dbe2:	4b03      	ldr	r3, [pc, #12]	; (1000dbf0 <platform_register_ble_msg_handler+0x18>)
1000dbe4:	6018      	str	r0, [r3, #0]
		status = STATUS_SUCCESS;
1000dbe6:	2300      	movs	r3, #0
	}
	else {
		status = STATUS_NOT_INITIALIZED;
	}
	return status;
}
1000dbe8:	0018      	movs	r0, r3
1000dbea:	4770      	bx	lr
1000dbec:	10019f64 	.word	0x10019f64
1000dbf0:	10019f84 	.word	0x10019f84

1000dbf4 <platform_interface_send>:


//Sends a message through RW kernel messaging API
//struct ke_msg * p_msg;
void platform_interface_send(uint8_t* data, uint32_t len)
{
1000dbf4:	b570      	push	{r4, r5, r6, lr}
1000dbf6:	0004      	movs	r4, r0
	void* params;
	
	#if (CHIPVERSION_B0)
	ke_task_id_t dest_id;
	dest_id = p_msg_hdr->dest_id;
	if(gapm_get_task_from_id != NULL)
1000dbf8:	4b0e      	ldr	r3, [pc, #56]	; (1000dc34 <platform_interface_send+0x40>)
1000dbfa:	681b      	ldr	r3, [r3, #0]
1000dbfc:	2b00      	cmp	r3, #0
1000dbfe:	d002      	beq.n	1000dc06 <platform_interface_send+0x12>
		p_msg_hdr->dest_id = gapm_get_task_from_id(dest_id);
1000dc00:	8840      	ldrh	r0, [r0, #2]
1000dc02:	4798      	blx	r3
1000dc04:	8060      	strh	r0, [r4, #2]
	#endif	//CHIPVERSION_B0
	// Allocate the kernel message
	params = ke_msg_alloc(p_msg_hdr->id, p_msg_hdr->dest_id, p_msg_hdr->src_id, p_msg_hdr->param_len);
1000dc06:	88e3      	ldrh	r3, [r4, #6]
1000dc08:	88a2      	ldrh	r2, [r4, #4]
1000dc0a:	8861      	ldrh	r1, [r4, #2]
1000dc0c:	8820      	ldrh	r0, [r4, #0]
1000dc0e:	4d0a      	ldr	r5, [pc, #40]	; (1000dc38 <platform_interface_send+0x44>)
1000dc10:	682d      	ldr	r5, [r5, #0]
1000dc12:	47a8      	blx	r5
1000dc14:	0005      	movs	r5, r0
											
	//no params
	if (p_msg_hdr->param_len == 0)
1000dc16:	88e2      	ldrh	r2, [r4, #6]
1000dc18:	2a00      	cmp	r2, #0
1000dc1a:	d102      	bne.n	1000dc22 <platform_interface_send+0x2e>
	{
		// Send message directly
		at_ke_msg_send(params);
1000dc1c:	4b07      	ldr	r3, [pc, #28]	; (1000dc3c <platform_interface_send+0x48>)
1000dc1e:	4798      	blx	r3
1000dc20:	e006      	b.n	1000dc30 <platform_interface_send+0x3c>
	}
	else
	{
		//copy params
		memcpy(params,&(data[KE_MSG_HDR_LENGTH]),p_msg_hdr->param_len);
1000dc22:	0021      	movs	r1, r4
1000dc24:	3108      	adds	r1, #8
1000dc26:	4b06      	ldr	r3, [pc, #24]	; (1000dc40 <platform_interface_send+0x4c>)
1000dc28:	4798      	blx	r3
		// Send the kernel message
		at_ke_msg_send(params);
1000dc2a:	0028      	movs	r0, r5
1000dc2c:	4b03      	ldr	r3, [pc, #12]	; (1000dc3c <platform_interface_send+0x48>)
1000dc2e:	4798      	blx	r3
	}
}
1000dc30:	bd70      	pop	{r4, r5, r6, pc}
1000dc32:	46c0      	nop			; (mov r8, r8)
1000dc34:	10019f58 	.word	0x10019f58
1000dc38:	10019f90 	.word	0x10019f90
1000dc3c:	1000d87d 	.word	0x1000d87d
1000dc40:	1001576f 	.word	0x1001576f

1000dc44 <send_plf_int_msg_ind>:

void send_plf_int_msg_ind(uint8_t intr_index, uint8_t callback_id, void *data, uint16_t data_len)
{
1000dc44:	b570      	push	{r4, r5, r6, lr}
1000dc46:	0015      	movs	r5, r2
1000dc48:	001c      	movs	r4, r3
	void* params;
//#if (CHIPVERSION_A4)	
	//os_sem_up(gstrFwSem);
//#endif
	// Allocate the kernel message
	params = ke_msg_alloc(PERIPHERAL_INTERRUPT_EVENT, TASK_INTERNAL_APP, BUILD_INTR_SRCID(callback_id,intr_index), data_len);
1000dc4a:	020a      	lsls	r2, r1, #8
1000dc4c:	4302      	orrs	r2, r0
1000dc4e:	4b0a      	ldr	r3, [pc, #40]	; (1000dc78 <send_plf_int_msg_ind+0x34>)
1000dc50:	681e      	ldr	r6, [r3, #0]
1000dc52:	0023      	movs	r3, r4
1000dc54:	2105      	movs	r1, #5
1000dc56:	20a0      	movs	r0, #160	; 0xa0
1000dc58:	00c0      	lsls	r0, r0, #3
1000dc5a:	47b0      	blx	r6
1000dc5c:	1e06      	subs	r6, r0, #0
											
	//no params
	if(params != NULL) {
1000dc5e:	d00a      	beq.n	1000dc76 <send_plf_int_msg_ind+0x32>
		if((data_len != 0) && (NULL != data))
1000dc60:	2c00      	cmp	r4, #0
1000dc62:	d005      	beq.n	1000dc70 <send_plf_int_msg_ind+0x2c>
1000dc64:	2d00      	cmp	r5, #0
1000dc66:	d003      	beq.n	1000dc70 <send_plf_int_msg_ind+0x2c>
		{
			//copy params
			memcpy(params, data, data_len);
1000dc68:	0022      	movs	r2, r4
1000dc6a:	0029      	movs	r1, r5
1000dc6c:	4b03      	ldr	r3, [pc, #12]	; (1000dc7c <send_plf_int_msg_ind+0x38>)
1000dc6e:	4798      	blx	r3
		}
		// Send the kernel message
		at_ke_msg_send(params);
1000dc70:	0030      	movs	r0, r6
1000dc72:	4b03      	ldr	r3, [pc, #12]	; (1000dc80 <send_plf_int_msg_ind+0x3c>)
1000dc74:	4798      	blx	r3
	}
}
1000dc76:	bd70      	pop	{r4, r5, r6, pc}
1000dc78:	10019f90 	.word	0x10019f90
1000dc7c:	1001576f 	.word	0x1001576f
1000dc80:	1000d87d 	.word	0x1000d87d

1000dc84 <platform_event_wait>:
//Waits on InternalAppMsgQHandle Queue
// This function won't busy wait if nothing on queue but will down the semaphore and go to a blocking state
// The OS then will move control to other higher priority tasks and will only return if these tasks finish processing AND the queue has received 
//a msg
plf_drv_status platform_event_wait(uint32_t timeout)
{
1000dc84:	b5f0      	push	{r4, r5, r6, r7, lr}
1000dc86:	465f      	mov	r7, fp
1000dc88:	4656      	mov	r6, sl
1000dc8a:	464d      	mov	r5, r9
1000dc8c:	4644      	mov	r4, r8
1000dc8e:	b4f0      	push	{r4, r5, r6, r7}
1000dc90:	b087      	sub	sp, #28
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000dc92:	1e44      	subs	r4, r0, #1
plf_drv_status platform_event_wait(uint32_t timeout)
{
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
1000dc94:	2300      	movs	r3, #0
1000dc96:	4699      	mov	r9, r3
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000dc98:	1ce3      	adds	r3, r4, #3
1000dc9a:	d81c      	bhi.n	1000dcd6 <platform_event_wait+0x52>
	return num_of_freed;
}

static void platform_start_event_timeout(uint32_t timeout)
{
	uint8_t msg[8+5] = {0};
1000dc9c:	220d      	movs	r2, #13
1000dc9e:	2100      	movs	r1, #0
1000dca0:	a802      	add	r0, sp, #8
1000dca2:	4b82      	ldr	r3, [pc, #520]	; (1000deac <platform_event_wait+0x228>)
1000dca4:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000dca6:	2333      	movs	r3, #51	; 0x33
1000dca8:	aa02      	add	r2, sp, #8
1000dcaa:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000dcac:	3b30      	subs	r3, #48	; 0x30
1000dcae:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000dcb0:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000dcb2:	3302      	adds	r3, #2
1000dcb4:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000dcb6:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (((5)>>8) & 0x00FF );
	
	msg[u16TxLen++] = (uint8_t)((timeout) & 0x00FF );
1000dcb8:	7214      	strb	r4, [r2, #8]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 8) & 0x00FF) ;
1000dcba:	0a23      	lsrs	r3, r4, #8
1000dcbc:	7253      	strb	r3, [r2, #9]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 16) & 0x00FF);
1000dcbe:	0c23      	lsrs	r3, r4, #16
1000dcc0:	7293      	strb	r3, [r2, #10]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 24) & 0x00FF);
1000dcc2:	0e24      	lsrs	r4, r4, #24
1000dcc4:	72d4      	strb	r4, [r2, #11]
	
	msg[u16TxLen++] = ((1) & 0x00FF );
1000dcc6:	2301      	movs	r3, #1
1000dcc8:	7313      	strb	r3, [r2, #12]
	
	platform_interface_send(msg, u16TxLen);
1000dcca:	210d      	movs	r1, #13
1000dccc:	0010      	movs	r0, r2
1000dcce:	4b78      	ldr	r3, [pc, #480]	; (1000deb0 <platform_event_wait+0x22c>)
1000dcd0:	4798      	blx	r3
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
	{			
		platform_start_event_timeout(timeout-1);
		bEventTimeoutFlag = 1;
1000dcd2:	2301      	movs	r3, #1
1000dcd4:	4699      	mov	r9, r3
1000dcd6:	2400      	movs	r4, #0
1000dcd8:	2500      	movs	r5, #0
	}

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
1000dcda:	4f76      	ldr	r7, [pc, #472]	; (1000deb4 <platform_event_wait+0x230>)
1000dcdc:	4e76      	ldr	r6, [pc, #472]	; (1000deb8 <platform_event_wait+0x234>)
1000dcde:	4977      	ldr	r1, [pc, #476]	; (1000debc <platform_event_wait+0x238>)
1000dce0:	6838      	ldr	r0, [r7, #0]
1000dce2:	6833      	ldr	r3, [r6, #0]
1000dce4:	4798      	blx	r3
1000dce6:	2800      	cmp	r0, #0
1000dce8:	d000      	beq.n	1000dcec <platform_event_wait+0x68>
1000dcea:	e088      	b.n	1000ddfe <platform_event_wait+0x17a>
		{
			uint16_t msg_id = rcv_msg->id;
1000dcec:	4b73      	ldr	r3, [pc, #460]	; (1000debc <platform_event_wait+0x238>)
1000dcee:	681c      	ldr	r4, [r3, #0]
1000dcf0:	88a3      	ldrh	r3, [r4, #4]
1000dcf2:	469a      	mov	sl, r3
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000dcf4:	23cd      	movs	r3, #205	; 0xcd
1000dcf6:	009b      	lsls	r3, r3, #2
1000dcf8:	459a      	cmp	sl, r3
1000dcfa:	d100      	bne.n	1000dcfe <platform_event_wait+0x7a>
1000dcfc:	e0c7      	b.n	1000de8e <platform_event_wait+0x20a>

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
1000dcfe:	8923      	ldrh	r3, [r4, #8]
1000dd00:	469b      	mov	fp, r3
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
1000dd02:	8963      	ldrh	r3, [r4, #10]
1000dd04:	4698      	mov	r8, r3
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000dd06:	464b      	mov	r3, r9
1000dd08:	2b00      	cmp	r3, #0
1000dd0a:	d011      	beq.n	1000dd30 <platform_event_wait+0xac>
	platform_interface_send(msg, u16TxLen);
}

static void platform_stop_event_timeout(void)
{
	uint8_t msg[8+5] = {0};
1000dd0c:	220d      	movs	r2, #13
1000dd0e:	2100      	movs	r1, #0
1000dd10:	a802      	add	r0, sp, #8
1000dd12:	4b66      	ldr	r3, [pc, #408]	; (1000deac <platform_event_wait+0x228>)
1000dd14:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000dd16:	2333      	movs	r3, #51	; 0x33
1000dd18:	aa02      	add	r2, sp, #8
1000dd1a:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000dd1c:	3b30      	subs	r3, #48	; 0x30
1000dd1e:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000dd20:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000dd22:	3302      	adds	r3, #2
1000dd24:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000dd26:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (uint8_t)(( (0) >> 16) & 0x00FF);
	msg[u16TxLen++] = (uint8_t)(( (0) >> 24) & 0x00FF);
	
	msg[u16TxLen++] = ((0) & 0x00FF );
	
	platform_interface_send(msg, u16TxLen);
1000dd28:	210d      	movs	r1, #13
1000dd2a:	0010      	movs	r0, r2
1000dd2c:	4b60      	ldr	r3, [pc, #384]	; (1000deb0 <platform_event_wait+0x22c>)
1000dd2e:	4798      	blx	r3
			{
				//Stop timer if it is still running
				platform_stop_event_timeout();
			}
				
			if(msg_id == PERIPHERAL_INTERRUPT_EVENT)
1000dd30:	23a0      	movs	r3, #160	; 0xa0
1000dd32:	00db      	lsls	r3, r3, #3
1000dd34:	459a      	cmp	sl, r3
1000dd36:	d121      	bne.n	1000dd7c <platform_event_wait+0xf8>
			{
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
1000dd38:	4b61      	ldr	r3, [pc, #388]	; (1000dec0 <platform_event_wait+0x23c>)
1000dd3a:	881b      	ldrh	r3, [r3, #0]
1000dd3c:	4443      	add	r3, r8
1000dd3e:	22a0      	movs	r2, #160	; 0xa0
1000dd40:	0092      	lsls	r2, r2, #2
1000dd42:	4293      	cmp	r3, r2
1000dd44:	dd02      	ble.n	1000dd4c <platform_event_wait+0xc8>
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000dd46:	3a80      	subs	r2, #128	; 0x80
1000dd48:	4b5d      	ldr	r3, [pc, #372]	; (1000dec0 <platform_event_wait+0x23c>)
1000dd4a:	801a      	strh	r2, [r3, #0]
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
1000dd4c:	4b5c      	ldr	r3, [pc, #368]	; (1000dec0 <platform_event_wait+0x23c>)
1000dd4e:	469a      	mov	sl, r3
1000dd50:	881d      	ldrh	r5, [r3, #0]
1000dd52:	4b5c      	ldr	r3, [pc, #368]	; (1000dec4 <platform_event_wait+0x240>)
1000dd54:	18ed      	adds	r5, r5, r3
1000dd56:	0021      	movs	r1, r4
1000dd58:	310c      	adds	r1, #12
1000dd5a:	4642      	mov	r2, r8
1000dd5c:	0028      	movs	r0, r5
1000dd5e:	4b5a      	ldr	r3, [pc, #360]	; (1000dec8 <platform_event_wait+0x244>)
1000dd60:	4798      	blx	r3
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
1000dd62:	4642      	mov	r2, r8
1000dd64:	0029      	movs	r1, r5
1000dd66:	4658      	mov	r0, fp
1000dd68:	4b58      	ldr	r3, [pc, #352]	; (1000decc <platform_event_wait+0x248>)
1000dd6a:	4798      	blx	r3
				plf_event_buff_index += len;
1000dd6c:	4653      	mov	r3, sl
1000dd6e:	881b      	ldrh	r3, [r3, #0]
1000dd70:	4443      	add	r3, r8
1000dd72:	4652      	mov	r2, sl
1000dd74:	8013      	strh	r3, [r2, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000dd76:	2400      	movs	r4, #0
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
				plf_event_buff_index += len;
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
1000dd78:	2502      	movs	r5, #2
1000dd7a:	e03a      	b.n	1000ddf2 <platform_event_wait+0x16e>
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000dd7c:	4b54      	ldr	r3, [pc, #336]	; (1000ded0 <platform_event_wait+0x24c>)
1000dd7e:	681b      	ldr	r3, [r3, #0]
1000dd80:	2b00      	cmp	r3, #0
1000dd82:	d032      	beq.n	1000ddea <platform_event_wait+0x166>
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
1000dd84:	4b4d      	ldr	r3, [pc, #308]	; (1000debc <platform_event_wait+0x238>)
1000dd86:	681a      	ldr	r2, [r3, #0]
1000dd88:	8893      	ldrh	r3, [r2, #4]
1000dd8a:	21cd      	movs	r1, #205	; 0xcd
1000dd8c:	0089      	lsls	r1, r1, #2
1000dd8e:	428b      	cmp	r3, r1
1000dd90:	d104      	bne.n	1000dd9c <platform_event_wait+0x118>
					{
						if(bEventTimeoutFlag)
1000dd92:	464b      	mov	r3, r9
						{
							status = STATUS_TIMEOUT;	
						}
						else
						{
							bLoopAgain = 1;
1000dd94:	2401      	movs	r4, #1
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
1000dd96:	2b00      	cmp	r3, #0
1000dd98:	d02b      	beq.n	1000ddf2 <platform_event_wait+0x16e>
1000dd9a:	e028      	b.n	1000ddee <platform_event_wait+0x16a>
							bLoopAgain = 1;
						}
					}
					else
					{
						ke_msg_hdr = (struct ke_msghdr *)((void *)(rx_buffer+BLE_EVENT_BUFFER_START_INDEX));
1000dd9c:	4c4d      	ldr	r4, [pc, #308]	; (1000ded4 <platform_event_wait+0x250>)
1000dd9e:	4d49      	ldr	r5, [pc, #292]	; (1000dec4 <platform_event_wait+0x240>)
1000dda0:	6025      	str	r5, [r4, #0]
						ke_msg_hdr->id = rcv_msg->id;
1000dda2:	702b      	strb	r3, [r5, #0]
1000dda4:	0a1b      	lsrs	r3, r3, #8
1000dda6:	706b      	strb	r3, [r5, #1]
//#if (CHIPVERSION_A3 || CHIPVERSION_A4)
					//ke_msg_hdr->src_id = rcv_msg->src_id;
//#else
					ke_msg_hdr->src_id = gapm_get_id_from_task(rcv_msg->src_id);
1000dda8:	8910      	ldrh	r0, [r2, #8]
1000ddaa:	4b4b      	ldr	r3, [pc, #300]	; (1000ded8 <platform_event_wait+0x254>)
1000ddac:	681b      	ldr	r3, [r3, #0]
1000ddae:	4798      	blx	r3
1000ddb0:	7128      	strb	r0, [r5, #4]
1000ddb2:	0a00      	lsrs	r0, r0, #8
1000ddb4:	7168      	strb	r0, [r5, #5]
//#endif  /* (CHIPVERSION_A3 || CHIPVERSION_A4) */
						ke_msg_hdr->dest_id = rcv_msg->dest_id;
1000ddb6:	6820      	ldr	r0, [r4, #0]
1000ddb8:	4b40      	ldr	r3, [pc, #256]	; (1000debc <platform_event_wait+0x238>)
1000ddba:	681a      	ldr	r2, [r3, #0]
1000ddbc:	88d2      	ldrh	r2, [r2, #6]
1000ddbe:	8042      	strh	r2, [r0, #2]
						ke_msg_hdr->param_len = rcv_msg->param_len;
1000ddc0:	681d      	ldr	r5, [r3, #0]
1000ddc2:	896b      	ldrh	r3, [r5, #10]
1000ddc4:	80c3      	strh	r3, [r0, #6]
						ke_msg_hdr++;
1000ddc6:	3008      	adds	r0, #8
1000ddc8:	6020      	str	r0, [r4, #0]
						if(rcv_msg->param_len > 0) {
1000ddca:	896a      	ldrh	r2, [r5, #10]
1000ddcc:	2a00      	cmp	r2, #0
1000ddce:	d003      	beq.n	1000ddd8 <platform_event_wait+0x154>
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
1000ddd0:	0029      	movs	r1, r5
1000ddd2:	310c      	adds	r1, #12
1000ddd4:	4b3c      	ldr	r3, [pc, #240]	; (1000dec8 <platform_event_wait+0x244>)
1000ddd6:	4798      	blx	r3
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
1000ddd8:	8969      	ldrh	r1, [r5, #10]
1000ddda:	3108      	adds	r1, #8
1000dddc:	4b3c      	ldr	r3, [pc, #240]	; (1000ded0 <platform_event_wait+0x24c>)
1000ddde:	681b      	ldr	r3, [r3, #0]
1000dde0:	4838      	ldr	r0, [pc, #224]	; (1000dec4 <platform_event_wait+0x240>)
1000dde2:	4798      	blx	r3
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000dde4:	2400      	movs	r4, #0
						ke_msg_hdr++;
						if(rcv_msg->param_len > 0) {
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
1000dde6:	2503      	movs	r5, #3
1000dde8:	e003      	b.n	1000ddf2 <platform_event_wait+0x16e>
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000ddea:	2400      	movs	r4, #0
1000ddec:	e001      	b.n	1000ddf2 <platform_event_wait+0x16e>
1000ddee:	2400      	movs	r4, #0
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
						{
							status = STATUS_TIMEOUT;	
1000ddf0:	25d0      	movs	r5, #208	; 0xd0
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
					}
				}
			}
			ke_free(rcv_msg);
1000ddf2:	4b32      	ldr	r3, [pc, #200]	; (1000debc <platform_event_wait+0x238>)
1000ddf4:	6818      	ldr	r0, [r3, #0]
1000ddf6:	4b39      	ldr	r3, [pc, #228]	; (1000dedc <platform_event_wait+0x258>)
1000ddf8:	681b      	ldr	r3, [r3, #0]
1000ddfa:	4798      	blx	r3
1000ddfc:	e000      	b.n	1000de00 <platform_event_wait+0x17c>
		}
		else
		{
			status = STATUS_FAILURE;
1000ddfe:	2507      	movs	r5, #7
		}
	}while(bLoopAgain);
1000de00:	2c00      	cmp	r4, #0
1000de02:	d000      	beq.n	1000de06 <platform_event_wait+0x182>
1000de04:	e76b      	b.n	1000dcde <platform_event_wait+0x5a>
	
	if(bEventTimeoutFlag)
1000de06:	464b      	mov	r3, r9
1000de08:	2b00      	cmp	r3, #0
1000de0a:	d046      	beq.n	1000de9a <platform_event_wait+0x216>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
1000de0c:	4b29      	ldr	r3, [pc, #164]	; (1000deb4 <platform_event_wait+0x230>)
1000de0e:	681e      	ldr	r6, [r3, #0]
#endif 
static int NMI_MsgQueueDestroyOnKeID(NMI_MsgQueueHandle* pHandle, ke_msg_id_t u16KeMsgId)
{
	int num_of_freed=0;
	Message * current , *prev = NULL;
	if((NULL == pHandle) && (NULL == pHandle->pstrMessageList))
1000de10:	2e00      	cmp	r6, #0
1000de12:	d104      	bne.n	1000de1e <platform_event_wait+0x19a>
1000de14:	2300      	movs	r3, #0
1000de16:	6a1c      	ldr	r4, [r3, #32]
1000de18:	2c00      	cmp	r4, #0
1000de1a:	d131      	bne.n	1000de80 <platform_event_wait+0x1fc>
1000de1c:	e03d      	b.n	1000de9a <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
1000de1e:	6a34      	ldr	r4, [r6, #32]
	os_sem_down(&pHandle->strCriticalSection);
1000de20:	2314      	movs	r3, #20
1000de22:	469c      	mov	ip, r3
1000de24:	44b4      	add	ip, r6
1000de26:	4663      	mov	r3, ip
1000de28:	4660      	mov	r0, ip
1000de2a:	9300      	str	r3, [sp, #0]
1000de2c:	4b2c      	ldr	r3, [pc, #176]	; (1000dee0 <platform_event_wait+0x25c>)
1000de2e:	681b      	ldr	r3, [r3, #0]
1000de30:	4798      	blx	r3
	while(NULL != current)
1000de32:	2c00      	cmp	r4, #0
1000de34:	d01f      	beq.n	1000de76 <platform_event_wait+0x1f2>
			}
			ke_free(rcv_msg);
		}
		else
		{
			status = STATUS_FAILURE;
1000de36:	2700      	movs	r7, #0

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000de38:	23cd      	movs	r3, #205	; 0xcd
1000de3a:	009b      	lsls	r3, r3, #2
1000de3c:	4698      	mov	r8, r3
		{
			num_of_freed++;
			if(NULL != prev)
			{
				prev->pstrNext = current->pstrNext;
				ke_free(current);
1000de3e:	4b27      	ldr	r3, [pc, #156]	; (1000dedc <platform_event_wait+0x258>)
1000de40:	469a      	mov	sl, r3
1000de42:	0020      	movs	r0, r4

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000de44:	6803      	ldr	r3, [r0, #0]
1000de46:	889b      	ldrh	r3, [r3, #4]
1000de48:	4543      	cmp	r3, r8
1000de4a:	d110      	bne.n	1000de6e <platform_event_wait+0x1ea>
		{
			num_of_freed++;
			if(NULL != prev)
1000de4c:	2f00      	cmp	r7, #0
1000de4e:	d006      	beq.n	1000de5e <platform_event_wait+0x1da>
			{
				prev->pstrNext = current->pstrNext;
1000de50:	6883      	ldr	r3, [r0, #8]
1000de52:	60bb      	str	r3, [r7, #8]
				ke_free(current);
1000de54:	4653      	mov	r3, sl
1000de56:	681b      	ldr	r3, [r3, #0]
1000de58:	4798      	blx	r3
				current = prev->pstrNext;
1000de5a:	68b8      	ldr	r0, [r7, #8]
1000de5c:	e009      	b.n	1000de72 <platform_event_wait+0x1ee>
			}
			else
			{
				pHandle->pstrMessageList = current->pstrNext;
1000de5e:	6883      	ldr	r3, [r0, #8]
1000de60:	6233      	str	r3, [r6, #32]
				ke_free(current);
1000de62:	4b1e      	ldr	r3, [pc, #120]	; (1000dedc <platform_event_wait+0x258>)
1000de64:	681b      	ldr	r3, [r3, #0]
1000de66:	9301      	str	r3, [sp, #4]
1000de68:	4798      	blx	r3
				current = pHandle->pstrMessageList;
1000de6a:	6a30      	ldr	r0, [r6, #32]
1000de6c:	e001      	b.n	1000de72 <platform_event_wait+0x1ee>
			}
		}
		else
		{
			prev = current;
			current = current ->pstrNext;
1000de6e:	0007      	movs	r7, r0
1000de70:	6880      	ldr	r0, [r0, #8]
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
1000de72:	2800      	cmp	r0, #0
1000de74:	d1e6      	bne.n	1000de44 <platform_event_wait+0x1c0>
		{
			prev = current;
			current = current ->pstrNext;
		}
	}
	os_sem_up(&pHandle->strCriticalSection);
1000de76:	4b1b      	ldr	r3, [pc, #108]	; (1000dee4 <platform_event_wait+0x260>)
1000de78:	681b      	ldr	r3, [r3, #0]
1000de7a:	9800      	ldr	r0, [sp, #0]
1000de7c:	4798      	blx	r3
	if(bEventTimeoutFlag)
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
1000de7e:	e00c      	b.n	1000de9a <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
1000de80:	2314      	movs	r3, #20
1000de82:	9300      	str	r3, [sp, #0]
1000de84:	4b16      	ldr	r3, [pc, #88]	; (1000dee0 <platform_event_wait+0x25c>)
1000de86:	681b      	ldr	r3, [r3, #0]
1000de88:	2014      	movs	r0, #20
1000de8a:	4798      	blx	r3
1000de8c:	e7d3      	b.n	1000de36 <platform_event_wait+0x1b2>
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000de8e:	4b10      	ldr	r3, [pc, #64]	; (1000ded0 <platform_event_wait+0x24c>)
1000de90:	681b      	ldr	r3, [r3, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000de92:	2400      	movs	r4, #0
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000de94:	2b00      	cmp	r3, #0
1000de96:	d0ac      	beq.n	1000ddf2 <platform_event_wait+0x16e>
1000de98:	e77b      	b.n	1000dd92 <platform_event_wait+0x10e>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
}
1000de9a:	0028      	movs	r0, r5
1000de9c:	b007      	add	sp, #28
1000de9e:	bc3c      	pop	{r2, r3, r4, r5}
1000dea0:	4690      	mov	r8, r2
1000dea2:	4699      	mov	r9, r3
1000dea4:	46a2      	mov	sl, r4
1000dea6:	46ab      	mov	fp, r5
1000dea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000deaa:	46c0      	nop			; (mov r8, r8)
1000deac:	10015781 	.word	0x10015781
1000deb0:	1000dbf5 	.word	0x1000dbf5
1000deb4:	10019f94 	.word	0x10019f94
1000deb8:	10019f7c 	.word	0x10019f7c
1000debc:	10019f88 	.word	0x10019f88
1000dec0:	1001af04 	.word	0x1001af04
1000dec4:	1001ac6c 	.word	0x1001ac6c
1000dec8:	1001576f 	.word	0x1001576f
1000decc:	1000d815 	.word	0x1000d815
1000ded0:	10019f84 	.word	0x10019f84
1000ded4:	10019f74 	.word	0x10019f74
1000ded8:	10019f54 	.word	0x10019f54
1000dedc:	10019f50 	.word	0x10019f50
1000dee0:	10019f70 	.word	0x10019f70
1000dee4:	10019f5c 	.word	0x10019f5c

1000dee8 <acquire_sleep_lock>:

plf_drv_status acquire_sleep_lock()
{
1000dee8:	b510      	push	{r4, lr}
    //DBG_LOG_DEV("[acquire_sleep_lock]\tDisabling ULP");
	plf_drv_status status = STATUS_RESOURCE_BUSY;
	//uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
	
	rwip_prevent_sleep_set(APP_PREVENT_SLEEP);
1000deea:	4b03      	ldr	r3, [pc, #12]	; (1000def8 <acquire_sleep_lock+0x10>)
1000deec:	681b      	ldr	r3, [r3, #0]
1000deee:	2080      	movs	r0, #128	; 0x80
1000def0:	0200      	lsls	r0, r0, #8
1000def2:	4798      	blx	r3
		/*  */
		os_sem_up(gstrFwSem);
	}
#endif	//0
	return status;
}
1000def4:	2008      	movs	r0, #8
1000def6:	bd10      	pop	{r4, pc}
1000def8:	1001ac24 	.word	0x1001ac24

1000defc <release_message_lock>:

plf_drv_status release_message_lock()
{
1000defc:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000defe:	4b03      	ldr	r3, [pc, #12]	; (1000df0c <release_message_lock+0x10>)
1000df00:	681b      	ldr	r3, [r3, #0]
1000df02:	2080      	movs	r0, #128	; 0x80
1000df04:	01c0      	lsls	r0, r0, #7
1000df06:	4798      	blx	r3
	return status;
}
1000df08:	2000      	movs	r0, #0
1000df0a:	bd10      	pop	{r4, pc}
1000df0c:	1001ac30 	.word	0x1001ac30

1000df10 <release_sleep_lock>:

plf_drv_status release_sleep_lock()
{
1000df10:	b510      	push	{r4, lr}
    //DBG_LOG_DEV("[release_sleep_lock]\tEnabling ULP");
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000df12:	4c05      	ldr	r4, [pc, #20]	; (1000df28 <release_sleep_lock+0x18>)
1000df14:	2080      	movs	r0, #128	; 0x80
1000df16:	01c0      	lsls	r0, r0, #7
1000df18:	6823      	ldr	r3, [r4, #0]
1000df1a:	4798      	blx	r3
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
1000df1c:	6823      	ldr	r3, [r4, #0]
1000df1e:	2080      	movs	r0, #128	; 0x80
1000df20:	0200      	lsls	r0, r0, #8
1000df22:	4798      	blx	r3
	return status;
}
1000df24:	2000      	movs	r0, #0
1000df26:	bd10      	pop	{r4, pc}
1000df28:	1001ac30 	.word	0x1001ac30

1000df2c <register_resume_callback>:
}

plf_drv_status register_resume_callback(resume_callback cb)
{
	plf_drv_status status = STATUS_SUCCESS;
	if(cb == NULL)
1000df2c:	2800      	cmp	r0, #0
1000df2e:	d003      	beq.n	1000df38 <register_resume_callback+0xc>
	{
		status = STATUS_INVALID_ARGUMENT;
	}
	else 
	{
		samb11_app_resume_cb = cb;
1000df30:	4b02      	ldr	r3, [pc, #8]	; (1000df3c <register_resume_callback+0x10>)
1000df32:	6018      	str	r0, [r3, #0]
	}
}

plf_drv_status register_resume_callback(resume_callback cb)
{
	plf_drv_status status = STATUS_SUCCESS;
1000df34:	2000      	movs	r0, #0
1000df36:	e000      	b.n	1000df3a <register_resume_callback+0xe>
	if(cb == NULL)
	{
		status = STATUS_INVALID_ARGUMENT;
1000df38:	2009      	movs	r0, #9
	{
		samb11_app_resume_cb = cb;
		//*apps_resume_cb = (uint32_t)cb;
	}
	return status;
}
1000df3a:	4770      	bx	lr
1000df3c:	1001aef8 	.word	0x1001aef8

1000df40 <gpio1_combined_isr_handler>:

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source);
void wakeup_active_event_callback(uint32_t wakeup_source);

void gpio1_combined_isr_handler(void)
{
1000df40:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio1 = LPGPIO_16;
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
1000df42:	4a18      	ldr	r2, [pc, #96]	; (1000dfa4 <gpio1_combined_isr_handler+0x64>)
1000df44:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000df46:	b29b      	uxth	r3, r3
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000df48:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000df4a:	2180      	movs	r1, #128	; 0x80
1000df4c:	0209      	lsls	r1, r1, #8
1000df4e:	4301      	orrs	r1, r0
1000df50:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000df52:	0010      	movs	r0, r2
1000df54:	4d14      	ldr	r5, [pc, #80]	; (1000dfa8 <gpio1_combined_isr_handler+0x68>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000df56:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000df58:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000df5a:	05db      	lsls	r3, r3, #23
1000df5c:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000df5e:	d011      	beq.n	1000df84 <gpio1_combined_isr_handler+0x44>
			port_gpio1 = (intstatus & ~(intstatus - 1));
1000df60:	b2db      	uxtb	r3, r3
1000df62:	4259      	negs	r1, r3
1000df64:	400b      	ands	r3, r1
			while (!(port_gpio1 == 1)) {
1000df66:	2b01      	cmp	r3, #1
1000df68:	d006      	beq.n	1000df78 <gpio1_combined_isr_handler+0x38>
1000df6a:	0011      	movs	r1, r2
				port_gpio1 = port_gpio1 >> 1;
1000df6c:	085b      	lsrs	r3, r3, #1
				index++;
1000df6e:	3101      	adds	r1, #1
1000df70:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio1 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio1 == 1)) {
1000df72:	2b01      	cmp	r3, #1
1000df74:	d1fa      	bne.n	1000df6c <gpio1_combined_isr_handler+0x2c>
1000df76:	e000      	b.n	1000df7a <gpio1_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000df78:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000df7a:	0023      	movs	r3, r4
1000df7c:	408b      	lsls	r3, r1
1000df7e:	b29b      	uxth	r3, r3
1000df80:	8703      	strh	r3, [r0, #56]	; 0x38
1000df82:	e003      	b.n	1000df8c <gpio1_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000df84:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000df86:	432b      	orrs	r3, r5
1000df88:	b29b      	uxth	r3, r3
1000df8a:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO1->INTSTATUSCLEAR.reg;
1000df8c:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000df8e:	05db      	lsls	r3, r3, #23
1000df90:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000df92:	d1e2      	bne.n	1000df5a <gpio1_combined_isr_handler+0x1a>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000df94:	2180      	movs	r1, #128	; 0x80
1000df96:	0049      	lsls	r1, r1, #1
1000df98:	3381      	adds	r3, #129	; 0x81
1000df9a:	33ff      	adds	r3, #255	; 0xff
1000df9c:	4a03      	ldr	r2, [pc, #12]	; (1000dfac <gpio1_combined_isr_handler+0x6c>)
1000df9e:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(8);
}
1000dfa0:	bd30      	pop	{r4, r5, pc}
1000dfa2:	46c0      	nop			; (mov r8, r8)
1000dfa4:	40011000 	.word	0x40011000
1000dfa8:	ffff8000 	.word	0xffff8000
1000dfac:	e000e100 	.word	0xe000e100

1000dfb0 <gpio0_combined_isr_handler>:

void gpio0_combined_isr_handler(void)
{
1000dfb0:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio0 = LPGPIO_0;
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
1000dfb2:	4a17      	ldr	r2, [pc, #92]	; (1000e010 <gpio0_combined_isr_handler+0x60>)
1000dfb4:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000dfb6:	b29b      	uxth	r3, r3
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000dfb8:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000dfba:	2180      	movs	r1, #128	; 0x80
1000dfbc:	0209      	lsls	r1, r1, #8
1000dfbe:	4301      	orrs	r1, r0
1000dfc0:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000dfc2:	0010      	movs	r0, r2
1000dfc4:	4d13      	ldr	r5, [pc, #76]	; (1000e014 <gpio0_combined_isr_handler+0x64>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000dfc6:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000dfc8:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000dfca:	05db      	lsls	r3, r3, #23
1000dfcc:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000dfce:	d011      	beq.n	1000dff4 <gpio0_combined_isr_handler+0x44>
			port_gpio0 = (intstatus & ~(intstatus - 1));
1000dfd0:	b2db      	uxtb	r3, r3
1000dfd2:	4259      	negs	r1, r3
1000dfd4:	400b      	ands	r3, r1
			while (!(port_gpio0 == 1)) {
1000dfd6:	2b01      	cmp	r3, #1
1000dfd8:	d006      	beq.n	1000dfe8 <gpio0_combined_isr_handler+0x38>
1000dfda:	0011      	movs	r1, r2
				port_gpio0 = port_gpio0 >> 1;
1000dfdc:	085b      	lsrs	r3, r3, #1
				index++;
1000dfde:	3101      	adds	r1, #1
1000dfe0:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio0 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio0 == 1)) {
1000dfe2:	2b01      	cmp	r3, #1
1000dfe4:	d1fa      	bne.n	1000dfdc <gpio0_combined_isr_handler+0x2c>
1000dfe6:	e000      	b.n	1000dfea <gpio0_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000dfe8:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000dfea:	0023      	movs	r3, r4
1000dfec:	408b      	lsls	r3, r1
1000dfee:	b29b      	uxth	r3, r3
1000dff0:	8703      	strh	r3, [r0, #56]	; 0x38
1000dff2:	e003      	b.n	1000dffc <gpio0_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000dff4:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000dff6:	432b      	orrs	r3, r5
1000dff8:	b29b      	uxth	r3, r3
1000dffa:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO0->INTSTATUSCLEAR.reg;
1000dffc:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000dffe:	05db      	lsls	r3, r3, #23
1000e000:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000e002:	d1e2      	bne.n	1000dfca <gpio0_combined_isr_handler+0x1a>
1000e004:	2180      	movs	r1, #128	; 0x80
1000e006:	3381      	adds	r3, #129	; 0x81
1000e008:	33ff      	adds	r3, #255	; 0xff
1000e00a:	4a03      	ldr	r2, [pc, #12]	; (1000e018 <gpio0_combined_isr_handler+0x68>)
1000e00c:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(7);
}
1000e00e:	bd30      	pop	{r4, r5, pc}
1000e010:	40010000 	.word	0x40010000
1000e014:	ffff8000 	.word	0xffff8000
1000e018:	e000e100 	.word	0xe000e100

1000e01c <PORT1_COMB_Handler>:

#ifdef CHIPVERSION_B0
void PORT1_COMB_Handler(void)
{
1000e01c:	b510      	push	{r4, lr}
	/* if(CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13))) { */
	if (GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13))) {
1000e01e:	4b0c      	ldr	r3, [pc, #48]	; (1000e050 <PORT1_COMB_Handler+0x34>)
1000e020:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
1000e022:	0b5b      	lsrs	r3, r3, #13
1000e024:	d010      	beq.n	1000e048 <PORT1_COMB_Handler+0x2c>
		handle_ext_wakeup_isr();
1000e026:	4b0b      	ldr	r3, [pc, #44]	; (1000e054 <PORT1_COMB_Handler+0x38>)
1000e028:	681b      	ldr	r3, [r3, #0]
1000e02a:	4798      	blx	r3

		/* clear specific int pin status that caused the Interrupt */
		/* CMSDK_GPIO1->INTCLEAR |= CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13)); */
		GPIO1->INTSTATUSCLEAR.reg |= GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13));
1000e02c:	4a08      	ldr	r2, [pc, #32]	; (1000e050 <PORT1_COMB_Handler+0x34>)
1000e02e:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000e030:	8f11      	ldrh	r1, [r2, #56]	; 0x38
1000e032:	0b5b      	lsrs	r3, r3, #13
1000e034:	035b      	lsls	r3, r3, #13
1000e036:	430b      	orrs	r3, r1
1000e038:	8713      	strh	r3, [r2, #56]	; 0x38
1000e03a:	2180      	movs	r1, #128	; 0x80
1000e03c:	0049      	lsls	r1, r1, #1
1000e03e:	23c0      	movs	r3, #192	; 0xc0
1000e040:	005b      	lsls	r3, r3, #1
1000e042:	4a05      	ldr	r2, [pc, #20]	; (1000e058 <PORT1_COMB_Handler+0x3c>)
1000e044:	50d1      	str	r1, [r2, r3]
1000e046:	e001      	b.n	1000e04c <PORT1_COMB_Handler+0x30>
		/* NVIC_ClearPendingIRQ(PORT1_COMB_IRQn); */
		NVIC_ClearPendingIRQ(8);
	} else {
		gpio1_combined_isr_handler();
1000e048:	4b04      	ldr	r3, [pc, #16]	; (1000e05c <PORT1_COMB_Handler+0x40>)
1000e04a:	4798      	blx	r3
	}
}
1000e04c:	bd10      	pop	{r4, pc}
1000e04e:	46c0      	nop			; (mov r8, r8)
1000e050:	40011000 	.word	0x40011000
1000e054:	1001aef0 	.word	0x1001aef0
1000e058:	e000e100 	.word	0xe000e100
1000e05c:	1000df41 	.word	0x1000df41

1000e060 <wakeup_int_unregister_callback>:
	{
		wakeup_source_callback[wakeup_source] = 0;
	}
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
1000e060:	2303      	movs	r3, #3
#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
	if(	(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_0) || 
1000e062:	2802      	cmp	r0, #2
1000e064:	d804      	bhi.n	1000e070 <wakeup_int_unregister_callback+0x10>
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_1) || 
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_2) ) 
	{
		wakeup_source_callback[wakeup_source] = 0;
1000e066:	0080      	lsls	r0, r0, #2
1000e068:	2200      	movs	r2, #0
1000e06a:	4b02      	ldr	r3, [pc, #8]	; (1000e074 <wakeup_int_unregister_callback+0x14>)
1000e06c:	50c2      	str	r2, [r0, r3]

#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
1000e06e:	2300      	movs	r3, #0
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
	}
	return status;
}
1000e070:	0018      	movs	r0, r3
1000e072:	4770      	bx	lr
1000e074:	1001af08 	.word	0x1001af08

1000e078 <wakeup_active_event_callback>:

void wakeup_active_event_callback(uint32_t wakeup_source)
{
1000e078:	b510      	push	{r4, lr}
1000e07a:	0004      	movs	r4, r0
	portint_callback_t callback;
	uint32_t *pu32WakeSource = (uint32_t *)wakeup_source;
	if((*pu32WakeSource & 0xFF) == 1)
1000e07c:	7803      	ldrb	r3, [r0, #0]
1000e07e:	2b01      	cmp	r3, #1
1000e080:	d108      	bne.n	1000e094 <wakeup_active_event_callback+0x1c>
	{
		if(wakeup_source_callback[0] != NULL) {
1000e082:	4b11      	ldr	r3, [pc, #68]	; (1000e0c8 <wakeup_active_event_callback+0x50>)
1000e084:	681b      	ldr	r3, [r3, #0]
1000e086:	2b00      	cmp	r3, #0
1000e088:	d000      	beq.n	1000e08c <wakeup_active_event_callback+0x14>
			callback = wakeup_source_callback[0];
			callback();
1000e08a:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF);
1000e08c:	23ff      	movs	r3, #255	; 0xff
1000e08e:	6822      	ldr	r2, [r4, #0]
1000e090:	439a      	bics	r2, r3
1000e092:	6022      	str	r2, [r4, #0]
	}
	if(((*pu32WakeSource >> 8) & 0xFF) == 1)
1000e094:	7863      	ldrb	r3, [r4, #1]
1000e096:	2b01      	cmp	r3, #1
1000e098:	d108      	bne.n	1000e0ac <wakeup_active_event_callback+0x34>
	{
		if(wakeup_source_callback[1] != NULL) {
1000e09a:	4b0b      	ldr	r3, [pc, #44]	; (1000e0c8 <wakeup_active_event_callback+0x50>)
1000e09c:	685b      	ldr	r3, [r3, #4]
1000e09e:	2b00      	cmp	r3, #0
1000e0a0:	d000      	beq.n	1000e0a4 <wakeup_active_event_callback+0x2c>
			callback = wakeup_source_callback[1];
			callback();
1000e0a2:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 8);
1000e0a4:	4b09      	ldr	r3, [pc, #36]	; (1000e0cc <wakeup_active_event_callback+0x54>)
1000e0a6:	6822      	ldr	r2, [r4, #0]
1000e0a8:	4013      	ands	r3, r2
1000e0aa:	6023      	str	r3, [r4, #0]
	}
	if(((*pu32WakeSource >> 16) & 0xFF) == 1)
1000e0ac:	78a3      	ldrb	r3, [r4, #2]
1000e0ae:	2b01      	cmp	r3, #1
1000e0b0:	d108      	bne.n	1000e0c4 <wakeup_active_event_callback+0x4c>
	{
		if(wakeup_source_callback[2] != NULL) {
1000e0b2:	4b05      	ldr	r3, [pc, #20]	; (1000e0c8 <wakeup_active_event_callback+0x50>)
1000e0b4:	689b      	ldr	r3, [r3, #8]
1000e0b6:	2b00      	cmp	r3, #0
1000e0b8:	d000      	beq.n	1000e0bc <wakeup_active_event_callback+0x44>
			callback = wakeup_source_callback[2];
			callback();
1000e0ba:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 16);
1000e0bc:	4b04      	ldr	r3, [pc, #16]	; (1000e0d0 <wakeup_active_event_callback+0x58>)
1000e0be:	6822      	ldr	r2, [r4, #0]
1000e0c0:	4013      	ands	r3, r2
1000e0c2:	6023      	str	r3, [r4, #0]
	}
}
1000e0c4:	bd10      	pop	{r4, pc}
1000e0c6:	46c0      	nop			; (mov r8, r8)
1000e0c8:	1001af08 	.word	0x1001af08
1000e0cc:	ffff00ff 	.word	0xffff00ff
1000e0d0:	ff00ffff 	.word	0xff00ffff

1000e0d4 <resume_cb>:
	sms_imu_init_variables();
	sms_pressure_init_variables();
}

static void resume_cb(void)
{
1000e0d4:	b510      	push	{r4, lr}
	init_port_list(); // re-initialize all ports
1000e0d6:	4b09      	ldr	r3, [pc, #36]	; (1000e0fc <resume_cb+0x28>)
1000e0d8:	4798      	blx	r3
	serial_console_init(); // GPIO (UART) for the console
1000e0da:	4b09      	ldr	r3, [pc, #36]	; (1000e100 <resume_cb+0x2c>)
1000e0dc:	4798      	blx	r3
	sms_dualtimer_init();
1000e0de:	4b09      	ldr	r3, [pc, #36]	; (1000e104 <resume_cb+0x30>)
1000e0e0:	4798      	blx	r3
	sms_button_gpio_init(); // GPIO (AO_0 & AO_1) for the buttons
1000e0e2:	4b09      	ldr	r3, [pc, #36]	; (1000e108 <resume_cb+0x34>)
1000e0e4:	4798      	blx	r3
	sms_led_gpio_init();
1000e0e6:	4b09      	ldr	r3, [pc, #36]	; (1000e10c <resume_cb+0x38>)
1000e0e8:	4798      	blx	r3
	sms_spi_master_configure();
1000e0ea:	4b09      	ldr	r3, [pc, #36]	; (1000e110 <resume_cb+0x3c>)
1000e0ec:	4798      	blx	r3
	sms_i2c_master_configure();
1000e0ee:	4b09      	ldr	r3, [pc, #36]	; (1000e114 <resume_cb+0x40>)
1000e0f0:	4798      	blx	r3
	sms_imu_configure_gpio();
1000e0f2:	4b09      	ldr	r3, [pc, #36]	; (1000e118 <resume_cb+0x44>)
1000e0f4:	4798      	blx	r3
	sms_monitor_configure_gpio();
1000e0f6:	4b09      	ldr	r3, [pc, #36]	; (1000e11c <resume_cb+0x48>)
1000e0f8:	4798      	blx	r3
	//gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, true);
}
1000e0fa:	bd10      	pop	{r4, pc}
1000e0fc:	1000d921 	.word	0x1000d921
1000e100:	1000d689 	.word	0x1000d689
1000e104:	1000a299 	.word	0x1000a299
1000e108:	10008b29 	.word	0x10008b29
1000e10c:	10009ccd 	.word	0x10009ccd
1000e110:	1000a151 	.word	0x1000a151
1000e114:	10009015 	.word	0x10009015
1000e118:	100091a9 	.word	0x100091a9
1000e11c:	10008e6d 	.word	0x10008e6d

1000e120 <sms_init_variables>:
*/
/*- Includes ---------------------------------------------------------------*/
#include "sms_peripheral1.h"

void sms_init_variables(void)
{
1000e120:	b510      	push	{r4, lr}
	timer1_current_mode = TIMER1_MODE_NONE;
1000e122:	2300      	movs	r3, #0
1000e124:	4a0a      	ldr	r2, [pc, #40]	; (1000e150 <sms_init_variables+0x30>)
1000e126:	7013      	strb	r3, [r2, #0]
	timer2_current_mode = TIMER2_MODE_NONE;
1000e128:	4a0a      	ldr	r2, [pc, #40]	; (1000e154 <sms_init_variables+0x34>)
1000e12a:	7013      	strb	r3, [r2, #0]
	sms_working_mode = SMS_MODE_BUTTON_SOLO;
1000e12c:	2101      	movs	r1, #1
1000e12e:	4a0a      	ldr	r2, [pc, #40]	; (1000e158 <sms_init_variables+0x38>)
1000e130:	7011      	strb	r1, [r2, #0]
	ulp_ready = false;
1000e132:	4a0a      	ldr	r2, [pc, #40]	; (1000e15c <sms_init_variables+0x3c>)
1000e134:	7013      	strb	r3, [r2, #0]
	ble_instance.timeout = BLE_APP_TIMEOUT_OFF;
1000e136:	2201      	movs	r2, #1
1000e138:	4252      	negs	r2, r2
1000e13a:	4b09      	ldr	r3, [pc, #36]	; (1000e160 <sms_init_variables+0x40>)
1000e13c:	605a      	str	r2, [r3, #4]
	
	sms_ble_init_variables();
1000e13e:	4b09      	ldr	r3, [pc, #36]	; (1000e164 <sms_init_variables+0x44>)
1000e140:	4798      	blx	r3
	sms_button_init_variables();
1000e142:	4b09      	ldr	r3, [pc, #36]	; (1000e168 <sms_init_variables+0x48>)
1000e144:	4798      	blx	r3
	sms_imu_init_variables();
1000e146:	4b09      	ldr	r3, [pc, #36]	; (1000e16c <sms_init_variables+0x4c>)
1000e148:	4798      	blx	r3
	sms_pressure_init_variables();
1000e14a:	4b09      	ldr	r3, [pc, #36]	; (1000e170 <sms_init_variables+0x50>)
1000e14c:	4798      	blx	r3
}
1000e14e:	bd10      	pop	{r4, pc}
1000e150:	1001a068 	.word	0x1001a068
1000e154:	1001a19b 	.word	0x1001a19b
1000e158:	1001a069 	.word	0x1001a069
1000e15c:	1001a06a 	.word	0x1001a06a
1000e160:	1001a06c 	.word	0x1001a06c
1000e164:	100084c9 	.word	0x100084c9
1000e168:	10008b01 	.word	0x10008b01
1000e16c:	100092b1 	.word	0x100092b1
1000e170:	10009d45 	.word	0x10009d45

1000e174 <main>:
	sms_monitor_configure_gpio();
	//gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, true);
}

int main(void)
{
1000e174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Define current BLE state
	* ------------------------ */
	ble_instance.current_state = BLE_STATE_STARTING;
1000e176:	2210      	movs	r2, #16
1000e178:	4b75      	ldr	r3, [pc, #468]	; (1000e350 <main+0x1dc>)
1000e17a:	701a      	strb	r2, [r3, #0]
	
	/* Initialize platform
	* ------------------- */
	platform_driver_init();
1000e17c:	4b75      	ldr	r3, [pc, #468]	; (1000e354 <main+0x1e0>)
1000e17e:	4798      	blx	r3
	gpio_init(); // GPIO
1000e180:	4b75      	ldr	r3, [pc, #468]	; (1000e358 <main+0x1e4>)
1000e182:	4798      	blx	r3
	serial_console_init(); // serial console for debugging
1000e184:	4b75      	ldr	r3, [pc, #468]	; (1000e35c <main+0x1e8>)
1000e186:	4798      	blx	r3
	
	/* Disable ULP
	* ----------- */
	acquire_sleep_lock();
1000e188:	4b75      	ldr	r3, [pc, #468]	; (1000e360 <main+0x1ec>)
1000e18a:	4798      	blx	r3
	

	/* Initialize SMS flags
	* -------------------- */
	sms_init_variables();
1000e18c:	4b75      	ldr	r3, [pc, #468]	; (1000e364 <main+0x1f0>)
1000e18e:	4798      	blx	r3
	
	
	/* Initialize hardware components
	* ------------------------------ */
	// Dualtimer
	sms_dualtimer_init();
1000e190:	4b75      	ldr	r3, [pc, #468]	; (1000e368 <main+0x1f4>)
1000e192:	4798      	blx	r3
	
	// Buttons
	sms_button_gpio_init();
1000e194:	4b75      	ldr	r3, [pc, #468]	; (1000e36c <main+0x1f8>)
1000e196:	4798      	blx	r3
	
	// LED
	sms_led_gpio_init();
1000e198:	4b75      	ldr	r3, [pc, #468]	; (1000e370 <main+0x1fc>)
1000e19a:	4798      	blx	r3
	
	// I2C
	sms_i2c_master_configure();
1000e19c:	4b75      	ldr	r3, [pc, #468]	; (1000e374 <main+0x200>)
1000e19e:	4798      	blx	r3
	
	// SPI
	sms_spi_master_configure();
1000e1a0:	4b75      	ldr	r3, [pc, #468]	; (1000e378 <main+0x204>)
1000e1a2:	4798      	blx	r3
	
	// MPU
	sms_imu_configure_gpio();
1000e1a4:	4b75      	ldr	r3, [pc, #468]	; (1000e37c <main+0x208>)
1000e1a6:	4798      	blx	r3
	
	// monitoring...
	sms_monitor_configure_gpio();
1000e1a8:	4b75      	ldr	r3, [pc, #468]	; (1000e380 <main+0x20c>)
1000e1aa:	4798      	blx	r3
	
	/* Initialize the BLE module
	* ------------------------- */
	ble_device_init(NULL); // initialize the BLE chip and set the device address
1000e1ac:	2000      	movs	r0, #0
1000e1ae:	4b75      	ldr	r3, [pc, #468]	; (1000e384 <main+0x210>)
1000e1b0:	4798      	blx	r3
	
	
	/* Define BLE services
	* ------------------- */
	sms_button_define_services();
1000e1b2:	4b75      	ldr	r3, [pc, #468]	; (1000e388 <main+0x214>)
1000e1b4:	4798      	blx	r3
	sms_pressure_define_services();
1000e1b6:	4b75      	ldr	r3, [pc, #468]	; (1000e38c <main+0x218>)
1000e1b8:	4798      	blx	r3
	sms_imu_define_services();
1000e1ba:	4b75      	ldr	r3, [pc, #468]	; (1000e390 <main+0x21c>)
1000e1bc:	4798      	blx	r3
	
	
	/* Register callbacks
	* ------------------ */
	// Recovering from ULP
	register_resume_callback(resume_cb); // register resume callback
1000e1be:	4875      	ldr	r0, [pc, #468]	; (1000e394 <main+0x220>)
1000e1c0:	4b75      	ldr	r3, [pc, #468]	; (1000e398 <main+0x224>)
1000e1c2:	4798      	blx	r3
	// Dualtimer (AON timer enables on registration... so do it later)
	//sms_dualtimer_register_callback(DUALTIMER_TIMER1, sms_dualtimer1_cb); // button pressing timer
	// DUALTIMER_TIMER2 used for blocking delay!! So don't register callback!!

	// Buttons
	sms_button_register_callbacks();
1000e1c4:	4b75      	ldr	r3, [pc, #468]	; (1000e39c <main+0x228>)
1000e1c6:	4798      	blx	r3
	
	// MPU
	sms_imu_register_callbacks();
1000e1c8:	4b75      	ldr	r3, [pc, #468]	; (1000e3a0 <main+0x22c>)
1000e1ca:	4798      	blx	r3

	// BLE
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, BLE_GAP_EVENT_TYPE, sms_ble_gap_cb);
1000e1cc:	4a75      	ldr	r2, [pc, #468]	; (1000e3a4 <main+0x230>)
1000e1ce:	2100      	movs	r1, #0
1000e1d0:	2000      	movs	r0, #0
1000e1d2:	4c75      	ldr	r4, [pc, #468]	; (1000e3a8 <main+0x234>)
1000e1d4:	47a0      	blx	r4
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, BLE_GATT_SERVER_EVENT_TYPE, sms_ble_gatt_server_cb);
1000e1d6:	4a75      	ldr	r2, [pc, #468]	; (1000e3ac <main+0x238>)
1000e1d8:	2102      	movs	r1, #2
1000e1da:	2000      	movs	r0, #0
1000e1dc:	47a0      	blx	r4


	/* Enable buttons interrupts
	* ------------------------- */
	sms_button_toggle_callback(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
1000e1de:	2100      	movs	r1, #0
1000e1e0:	2000      	movs	r0, #0
1000e1e2:	4b73      	ldr	r3, [pc, #460]	; (1000e3b0 <main+0x23c>)
1000e1e4:	4798      	blx	r3

	//sms_button_toggle_callback(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
	
	/* Goto sleep
	* ---------- */
	sms_ble_power_down();
1000e1e6:	4b73      	ldr	r3, [pc, #460]	; (1000e3b4 <main+0x240>)
1000e1e8:	4798      	blx	r3
	at_ble_status_t ble_status;
	static uint32_t cnt = 0;
	while(true)
	{
		/* BLE event task --> BLOCKING FUNCTION! */
		ble_status = ble_event_task(ble_instance.timeout);
1000e1ea:	4f59      	ldr	r7, [pc, #356]	; (1000e350 <main+0x1dc>)
1000e1ec:	4e72      	ldr	r6, [pc, #456]	; (1000e3b8 <main+0x244>)
		
		/* Return from BLE event task --> EVERYTHING TAKES PLACE HERE! */
		acquire_sleep_lock();
1000e1ee:	4d5c      	ldr	r5, [pc, #368]	; (1000e360 <main+0x1ec>)
	at_ble_status_t ble_status;
	static uint32_t cnt = 0;
	while(true)
	{
		/* BLE event task --> BLOCKING FUNCTION! */
		ble_status = ble_event_task(ble_instance.timeout);
1000e1f0:	6878      	ldr	r0, [r7, #4]
1000e1f2:	47b0      	blx	r6
1000e1f4:	0004      	movs	r4, r0
		
		/* Return from BLE event task --> EVERYTHING TAKES PLACE HERE! */
		acquire_sleep_lock();
1000e1f6:	47a8      	blx	r5
		if(ble_status == AT_BLE_SUCCESS)
1000e1f8:	2c00      	cmp	r4, #0
1000e1fa:	d000      	beq.n	1000e1fe <main+0x8a>
1000e1fc:	e08f      	b.n	1000e31e <main+0x1aa>
		{
			/* ******************************************
			 * SENSOR INTERRUPT REGION
			 * ****************************************** */
			if(button_instance.btn0.new_int) {
1000e1fe:	4b6f      	ldr	r3, [pc, #444]	; (1000e3bc <main+0x248>)
1000e200:	78db      	ldrb	r3, [r3, #3]
1000e202:	2b00      	cmp	r3, #0
1000e204:	d013      	beq.n	1000e22e <main+0xba>
				button_instance.btn0.new_int = false;
1000e206:	2200      	movs	r2, #0
1000e208:	4b6c      	ldr	r3, [pc, #432]	; (1000e3bc <main+0x248>)
1000e20a:	70da      	strb	r2, [r3, #3]
				DBG_LOG("Btn0 int... ");
1000e20c:	486c      	ldr	r0, [pc, #432]	; (1000e3c0 <main+0x24c>)
1000e20e:	4b6d      	ldr	r3, [pc, #436]	; (1000e3c4 <main+0x250>)
1000e210:	4798      	blx	r3
1000e212:	486d      	ldr	r0, [pc, #436]	; (1000e3c8 <main+0x254>)
1000e214:	4b6d      	ldr	r3, [pc, #436]	; (1000e3cc <main+0x258>)
1000e216:	4798      	blx	r3
				if(sms_button_fn(SMS_BTN_0) < 0) {
1000e218:	2000      	movs	r0, #0
1000e21a:	4b6d      	ldr	r3, [pc, #436]	; (1000e3d0 <main+0x25c>)
1000e21c:	4798      	blx	r3
1000e21e:	2800      	cmp	r0, #0
1000e220:	da05      	bge.n	1000e22e <main+0xba>
					DBG_LOG_DEV("Error in sms_button_fn()");
1000e222:	4867      	ldr	r0, [pc, #412]	; (1000e3c0 <main+0x24c>)
1000e224:	4b67      	ldr	r3, [pc, #412]	; (1000e3c4 <main+0x250>)
1000e226:	4798      	blx	r3
1000e228:	486a      	ldr	r0, [pc, #424]	; (1000e3d4 <main+0x260>)
1000e22a:	4b68      	ldr	r3, [pc, #416]	; (1000e3cc <main+0x258>)
1000e22c:	4798      	blx	r3
				}
			}
			if(button_instance.btn1.new_int) {
1000e22e:	4b63      	ldr	r3, [pc, #396]	; (1000e3bc <main+0x248>)
1000e230:	7a5b      	ldrb	r3, [r3, #9]
1000e232:	2b00      	cmp	r3, #0
1000e234:	d013      	beq.n	1000e25e <main+0xea>
				button_instance.btn1.new_int = false;
1000e236:	2200      	movs	r2, #0
1000e238:	4b60      	ldr	r3, [pc, #384]	; (1000e3bc <main+0x248>)
1000e23a:	725a      	strb	r2, [r3, #9]
				DBG_LOG("Btn1 int... ");
1000e23c:	4860      	ldr	r0, [pc, #384]	; (1000e3c0 <main+0x24c>)
1000e23e:	4b61      	ldr	r3, [pc, #388]	; (1000e3c4 <main+0x250>)
1000e240:	4798      	blx	r3
1000e242:	4865      	ldr	r0, [pc, #404]	; (1000e3d8 <main+0x264>)
1000e244:	4b61      	ldr	r3, [pc, #388]	; (1000e3cc <main+0x258>)
1000e246:	4798      	blx	r3
				if(sms_button_fn(SMS_BTN_1) < 0) {
1000e248:	2001      	movs	r0, #1
1000e24a:	4b61      	ldr	r3, [pc, #388]	; (1000e3d0 <main+0x25c>)
1000e24c:	4798      	blx	r3
1000e24e:	2800      	cmp	r0, #0
1000e250:	da05      	bge.n	1000e25e <main+0xea>
					DBG_LOG_DEV("Error in sms_button_fn()");
1000e252:	485b      	ldr	r0, [pc, #364]	; (1000e3c0 <main+0x24c>)
1000e254:	4b5b      	ldr	r3, [pc, #364]	; (1000e3c4 <main+0x250>)
1000e256:	4798      	blx	r3
1000e258:	485e      	ldr	r0, [pc, #376]	; (1000e3d4 <main+0x260>)
1000e25a:	4b5c      	ldr	r3, [pc, #368]	; (1000e3cc <main+0x258>)
1000e25c:	4798      	blx	r3
				}
			}
			if(imu_device.interrupt.new_gyro) {
1000e25e:	2385      	movs	r3, #133	; 0x85
1000e260:	4a5e      	ldr	r2, [pc, #376]	; (1000e3dc <main+0x268>)
1000e262:	5cd3      	ldrb	r3, [r2, r3]
1000e264:	2b00      	cmp	r3, #0
1000e266:	d002      	beq.n	1000e26e <main+0xfa>
				//const uint32_t cnt_max = 23 * SMS_TIMER_AON_LOAD_1MS / SMS_TIMER_AON_LOAD_100US;
				//uint32_t now = aon_sleep_timer_get_current_value()/SMS_TIMER_AON_LOAD_100US;
				//uint32_t delta = ((now < past) ? (past - now) : (cnt_max - now + past));
				//DBG_LOG("past: %lu, now: %lu, delta: %lu", past, now, delta);
				//past = now;
				imu_device.interrupt.new_gyro = false;
1000e268:	2100      	movs	r1, #0
1000e26a:	2385      	movs	r3, #133	; 0x85
1000e26c:	54d1      	strb	r1, [r2, r3]
				//imu_device.interrupt.rts = true;
				//gpio_pin_set_output_level(DBG_PIN_1, DBG_PIN_LOW);
				//DBG_LOG_CONT_DEV("done");
			}
			if(pressure_device.interrupt.new_value) {
1000e26e:	2329      	movs	r3, #41	; 0x29
1000e270:	4a5b      	ldr	r2, [pc, #364]	; (1000e3e0 <main+0x26c>)
1000e272:	5cd3      	ldrb	r3, [r2, r3]
1000e274:	2b00      	cmp	r3, #0
1000e276:	d009      	beq.n	1000e28c <main+0x118>
				//DBG_LOG("Press int (%d)... ", ble_instance.sending_queue);
				gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_HIGH);
1000e278:	2101      	movs	r1, #1
1000e27a:	200f      	movs	r0, #15
1000e27c:	4c59      	ldr	r4, [pc, #356]	; (1000e3e4 <main+0x270>)
1000e27e:	47a0      	blx	r4
				//sms_pressure_poll_data();
				pressure_device.interrupt.new_value = false;
1000e280:	2100      	movs	r1, #0
1000e282:	2329      	movs	r3, #41	; 0x29
1000e284:	4a56      	ldr	r2, [pc, #344]	; (1000e3e0 <main+0x26c>)
1000e286:	54d1      	strb	r1, [r2, r3]
				//pressure_device.rts = true;
				gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_LOW);
1000e288:	200f      	movs	r0, #15
1000e28a:	47a0      	blx	r4
			//}
			
			/* ******************************************
			 * SENDING REGION
			 * ****************************************** */
			if(imu_device.interrupt.rts) {
1000e28c:	2386      	movs	r3, #134	; 0x86
1000e28e:	4a53      	ldr	r2, [pc, #332]	; (1000e3dc <main+0x268>)
1000e290:	5cd3      	ldrb	r3, [r2, r3]
1000e292:	2b00      	cmp	r3, #0
1000e294:	d015      	beq.n	1000e2c2 <main+0x14e>
				//DBG_LOG("MPU sending (%d/%d)... ", pressure_device.new_int, ble_instance.sending_queue);
				gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_HIGH);
1000e296:	2101      	movs	r1, #1
1000e298:	200f      	movs	r0, #15
1000e29a:	4b52      	ldr	r3, [pc, #328]	; (1000e3e4 <main+0x270>)
1000e29c:	4798      	blx	r3
				if(ble_instance.sending_queue == 0) {
1000e29e:	4b2c      	ldr	r3, [pc, #176]	; (1000e350 <main+0x1dc>)
1000e2a0:	7a1b      	ldrb	r3, [r3, #8]
1000e2a2:	2b00      	cmp	r3, #0
1000e2a4:	d103      	bne.n	1000e2ae <main+0x13a>
					sms_ble_send_characteristic(BLE_CHAR_MPU);
1000e2a6:	2002      	movs	r0, #2
1000e2a8:	4b4f      	ldr	r3, [pc, #316]	; (1000e3e8 <main+0x274>)
1000e2aa:	4798      	blx	r3
1000e2ac:	e002      	b.n	1000e2b4 <main+0x140>
				}
				else {
					DBG_LOG_CONT("flushing!");
1000e2ae:	484f      	ldr	r0, [pc, #316]	; (1000e3ec <main+0x278>)
1000e2b0:	4b46      	ldr	r3, [pc, #280]	; (1000e3cc <main+0x258>)
1000e2b2:	4798      	blx	r3
				}
				imu_device.interrupt.rts = false;
1000e2b4:	2100      	movs	r1, #0
1000e2b6:	2386      	movs	r3, #134	; 0x86
1000e2b8:	4a48      	ldr	r2, [pc, #288]	; (1000e3dc <main+0x268>)
1000e2ba:	54d1      	strb	r1, [r2, r3]
				gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_LOW);
1000e2bc:	200f      	movs	r0, #15
1000e2be:	4b49      	ldr	r3, [pc, #292]	; (1000e3e4 <main+0x270>)
1000e2c0:	4798      	blx	r3
			}
			if(pressure_device.interrupt.rts) {
1000e2c2:	232a      	movs	r3, #42	; 0x2a
1000e2c4:	4a46      	ldr	r2, [pc, #280]	; (1000e3e0 <main+0x26c>)
1000e2c6:	5cd3      	ldrb	r3, [r2, r3]
1000e2c8:	2b00      	cmp	r3, #0
1000e2ca:	d021      	beq.n	1000e310 <main+0x19c>
				DBG_LOG("Press sending (%d/%d)... ", imu_device.interrupt.new_gyro, ble_instance.sending_queue);
1000e2cc:	483c      	ldr	r0, [pc, #240]	; (1000e3c0 <main+0x24c>)
1000e2ce:	4b3d      	ldr	r3, [pc, #244]	; (1000e3c4 <main+0x250>)
1000e2d0:	4798      	blx	r3
1000e2d2:	2385      	movs	r3, #133	; 0x85
1000e2d4:	4a41      	ldr	r2, [pc, #260]	; (1000e3dc <main+0x268>)
1000e2d6:	5cd1      	ldrb	r1, [r2, r3]
1000e2d8:	b2c9      	uxtb	r1, r1
1000e2da:	4c1d      	ldr	r4, [pc, #116]	; (1000e350 <main+0x1dc>)
1000e2dc:	7a22      	ldrb	r2, [r4, #8]
1000e2de:	b2d2      	uxtb	r2, r2
1000e2e0:	4843      	ldr	r0, [pc, #268]	; (1000e3f0 <main+0x27c>)
1000e2e2:	4b3a      	ldr	r3, [pc, #232]	; (1000e3cc <main+0x258>)
1000e2e4:	4798      	blx	r3
				gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_HIGH);
1000e2e6:	2101      	movs	r1, #1
1000e2e8:	200f      	movs	r0, #15
1000e2ea:	4b3e      	ldr	r3, [pc, #248]	; (1000e3e4 <main+0x270>)
1000e2ec:	4798      	blx	r3
				if(ble_instance.sending_queue == 0) {
1000e2ee:	7a23      	ldrb	r3, [r4, #8]
1000e2f0:	2b00      	cmp	r3, #0
1000e2f2:	d103      	bne.n	1000e2fc <main+0x188>
					sms_ble_send_characteristic(BLE_CHAR_PRESS);
1000e2f4:	2001      	movs	r0, #1
1000e2f6:	4b3c      	ldr	r3, [pc, #240]	; (1000e3e8 <main+0x274>)
1000e2f8:	4798      	blx	r3
1000e2fa:	e002      	b.n	1000e302 <main+0x18e>
				}
				else {
					DBG_LOG_CONT("flushing!");
1000e2fc:	483b      	ldr	r0, [pc, #236]	; (1000e3ec <main+0x278>)
1000e2fe:	4b33      	ldr	r3, [pc, #204]	; (1000e3cc <main+0x258>)
1000e300:	4798      	blx	r3
				}
				pressure_device.interrupt.rts = false;
1000e302:	2100      	movs	r1, #0
1000e304:	232a      	movs	r3, #42	; 0x2a
1000e306:	4a36      	ldr	r2, [pc, #216]	; (1000e3e0 <main+0x26c>)
1000e308:	54d1      	strb	r1, [r2, r3]
				gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_LOW);
1000e30a:	200f      	movs	r0, #15
1000e30c:	4b35      	ldr	r3, [pc, #212]	; (1000e3e4 <main+0x270>)
1000e30e:	4798      	blx	r3
			}
			DBG_LOG("BLE event task end");
1000e310:	482b      	ldr	r0, [pc, #172]	; (1000e3c0 <main+0x24c>)
1000e312:	4b2c      	ldr	r3, [pc, #176]	; (1000e3c4 <main+0x250>)
1000e314:	4798      	blx	r3
1000e316:	4837      	ldr	r0, [pc, #220]	; (1000e3f4 <main+0x280>)
1000e318:	4b2c      	ldr	r3, [pc, #176]	; (1000e3cc <main+0x258>)
1000e31a:	4798      	blx	r3
1000e31c:	e768      	b.n	1000e1f0 <main+0x7c>
		}
		else if(ble_status == AT_BLE_GAP_TIMEOUT)
1000e31e:	2c45      	cmp	r4, #69	; 0x45
1000e320:	d106      	bne.n	1000e330 <main+0x1bc>
		{
			DBG_LOG("GAP timeout");
1000e322:	4827      	ldr	r0, [pc, #156]	; (1000e3c0 <main+0x24c>)
1000e324:	4b27      	ldr	r3, [pc, #156]	; (1000e3c4 <main+0x250>)
1000e326:	4798      	blx	r3
1000e328:	4833      	ldr	r0, [pc, #204]	; (1000e3f8 <main+0x284>)
1000e32a:	4b28      	ldr	r3, [pc, #160]	; (1000e3cc <main+0x258>)
1000e32c:	4798      	blx	r3
1000e32e:	e75f      	b.n	1000e1f0 <main+0x7c>
		}
		else if(ble_status == AT_BLE_TIMEOUT)
1000e330:	2cd0      	cmp	r4, #208	; 0xd0
1000e332:	d106      	bne.n	1000e342 <main+0x1ce>
		{
			DBG_LOG("Event get timeout");
1000e334:	4822      	ldr	r0, [pc, #136]	; (1000e3c0 <main+0x24c>)
1000e336:	4b23      	ldr	r3, [pc, #140]	; (1000e3c4 <main+0x250>)
1000e338:	4798      	blx	r3
1000e33a:	4830      	ldr	r0, [pc, #192]	; (1000e3fc <main+0x288>)
1000e33c:	4b23      	ldr	r3, [pc, #140]	; (1000e3cc <main+0x258>)
1000e33e:	4798      	blx	r3
1000e340:	e756      	b.n	1000e1f0 <main+0x7c>
		}
		else
		{
			DBG_LOG("BLE error occurred");
1000e342:	481f      	ldr	r0, [pc, #124]	; (1000e3c0 <main+0x24c>)
1000e344:	4b1f      	ldr	r3, [pc, #124]	; (1000e3c4 <main+0x250>)
1000e346:	4798      	blx	r3
1000e348:	482d      	ldr	r0, [pc, #180]	; (1000e400 <main+0x28c>)
1000e34a:	4b20      	ldr	r3, [pc, #128]	; (1000e3cc <main+0x258>)
1000e34c:	4798      	blx	r3
1000e34e:	e74f      	b.n	1000e1f0 <main+0x7c>
1000e350:	1001a06c 	.word	0x1001a06c
1000e354:	1000d995 	.word	0x1000d995
1000e358:	1000af69 	.word	0x1000af69
1000e35c:	1000d689 	.word	0x1000d689
1000e360:	1000dee9 	.word	0x1000dee9
1000e364:	1000e121 	.word	0x1000e121
1000e368:	1000a299 	.word	0x1000a299
1000e36c:	10008b29 	.word	0x10008b29
1000e370:	10009ccd 	.word	0x10009ccd
1000e374:	10009015 	.word	0x10009015
1000e378:	1000a151 	.word	0x1000a151
1000e37c:	100091a9 	.word	0x100091a9
1000e380:	10008e6d 	.word	0x10008e6d
1000e384:	1000cd09 	.word	0x1000cd09
1000e388:	10008e05 	.word	0x10008e05
1000e38c:	10009f55 	.word	0x10009f55
1000e390:	10009245 	.word	0x10009245
1000e394:	1000e0d5 	.word	0x1000e0d5
1000e398:	1000df2d 	.word	0x1000df2d
1000e39c:	10008bd9 	.word	0x10008bd9
1000e3a0:	100091f5 	.word	0x100091f5
1000e3a4:	10016d88 	.word	0x10016d88
1000e3a8:	1000cc39 	.word	0x1000cc39
1000e3ac:	10016dd4 	.word	0x10016dd4
1000e3b0:	10008dbd 	.word	0x10008dbd
1000e3b4:	100084e1 	.word	0x100084e1
1000e3b8:	1000d501 	.word	0x1000d501
1000e3bc:	1001a07c 	.word	0x1001a07c
1000e3c0:	10016a10 	.word	0x10016a10
1000e3c4:	100159e9 	.word	0x100159e9
1000e3c8:	10018248 	.word	0x10018248
1000e3cc:	100158c9 	.word	0x100158c9
1000e3d0:	10008c2d 	.word	0x10008c2d
1000e3d4:	10018258 	.word	0x10018258
1000e3d8:	10018274 	.word	0x10018274
1000e3dc:	1001a1b4 	.word	0x1001a1b4
1000e3e0:	1001a100 	.word	0x1001a100
1000e3e4:	1000ac29 	.word	0x1000ac29
1000e3e8:	10008825 	.word	0x10008825
1000e3ec:	10018284 	.word	0x10018284
1000e3f0:	10018290 	.word	0x10018290
1000e3f4:	100182ac 	.word	0x100182ac
1000e3f8:	100182c0 	.word	0x100182c0
1000e3fc:	100182cc 	.word	0x100182cc
1000e400:	100182e0 	.word	0x100182e0

1000e404 <internal_event_post>:
1000e404:	b570      	push	{r4, r5, r6, lr}
1000e406:	4d12      	ldr	r5, [pc, #72]	; (1000e450 <internal_event_post+0x4c>)
1000e408:	682c      	ldr	r4, [r5, #0]
1000e40a:	2c00      	cmp	r4, #0
1000e40c:	d014      	beq.n	1000e438 <internal_event_post+0x34>
1000e40e:	6826      	ldr	r6, [r4, #0]
1000e410:	60e2      	str	r2, [r4, #12]
1000e412:	602e      	str	r6, [r5, #0]
1000e414:	2500      	movs	r5, #0
1000e416:	4a0f      	ldr	r2, [pc, #60]	; (1000e454 <internal_event_post+0x50>)
1000e418:	8123      	strh	r3, [r4, #8]
1000e41a:	6813      	ldr	r3, [r2, #0]
1000e41c:	6025      	str	r5, [r4, #0]
1000e41e:	80a0      	strh	r0, [r4, #4]
1000e420:	80e1      	strh	r1, [r4, #6]
1000e422:	42ab      	cmp	r3, r5
1000e424:	d101      	bne.n	1000e42a <internal_event_post+0x26>
1000e426:	6014      	str	r4, [r2, #0]
1000e428:	e011      	b.n	1000e44e <internal_event_post+0x4a>
1000e42a:	681a      	ldr	r2, [r3, #0]
1000e42c:	2a00      	cmp	r2, #0
1000e42e:	d001      	beq.n	1000e434 <internal_event_post+0x30>
1000e430:	1c13      	adds	r3, r2, #0
1000e432:	e7fa      	b.n	1000e42a <internal_event_post+0x26>
1000e434:	601c      	str	r4, [r3, #0]
1000e436:	e00a      	b.n	1000e44e <internal_event_post+0x4a>
1000e438:	b2c4      	uxtb	r4, r0
1000e43a:	2c00      	cmp	r4, #0
1000e43c:	d107      	bne.n	1000e44e <internal_event_post+0x4a>
1000e43e:	4c06      	ldr	r4, [pc, #24]	; (1000e458 <internal_event_post+0x54>)
1000e440:	60e2      	str	r2, [r4, #12]
1000e442:	2201      	movs	r2, #1
1000e444:	8123      	strh	r3, [r4, #8]
1000e446:	4b05      	ldr	r3, [pc, #20]	; (1000e45c <internal_event_post+0x58>)
1000e448:	80a0      	strh	r0, [r4, #4]
1000e44a:	80e1      	strh	r1, [r4, #6]
1000e44c:	701a      	strb	r2, [r3, #0]
1000e44e:	bd70      	pop	{r4, r5, r6, pc}
1000e450:	10019fb0 	.word	0x10019fb0
1000e454:	10019fac 	.word	0x10019fac
1000e458:	10019f98 	.word	0x10019f98
1000e45c:	10019fa8 	.word	0x10019fa8

1000e460 <internal_event_init>:
1000e460:	b510      	push	{r4, lr}
1000e462:	4b08      	ldr	r3, [pc, #32]	; (1000e484 <internal_event_init+0x24>)
1000e464:	0900      	lsrs	r0, r0, #4
1000e466:	0100      	lsls	r0, r0, #4
1000e468:	681a      	ldr	r2, [r3, #0]
1000e46a:	1808      	adds	r0, r1, r0
1000e46c:	4281      	cmp	r1, r0
1000e46e:	d003      	beq.n	1000e478 <internal_event_init+0x18>
1000e470:	600a      	str	r2, [r1, #0]
1000e472:	1c0a      	adds	r2, r1, #0
1000e474:	3110      	adds	r1, #16
1000e476:	e7f9      	b.n	1000e46c <internal_event_init+0xc>
1000e478:	601a      	str	r2, [r3, #0]
1000e47a:	2200      	movs	r2, #0
1000e47c:	4b02      	ldr	r3, [pc, #8]	; (1000e488 <internal_event_init+0x28>)
1000e47e:	601a      	str	r2, [r3, #0]
1000e480:	bd10      	pop	{r4, pc}
1000e482:	46c0      	nop			; (mov r8, r8)
1000e484:	10019fb0 	.word	0x10019fb0
1000e488:	10019fac 	.word	0x10019fac

1000e48c <special_events_handler>:
1000e48c:	b538      	push	{r3, r4, r5, lr}
1000e48e:	4c1b      	ldr	r4, [pc, #108]	; (1000e4fc <special_events_handler+0x70>)
1000e490:	1c03      	adds	r3, r0, #0
1000e492:	8825      	ldrh	r5, [r4, #0]
1000e494:	1c08      	adds	r0, r1, #0
1000e496:	1c21      	adds	r1, r4, #0
1000e498:	429d      	cmp	r5, r3
1000e49a:	d107      	bne.n	1000e4ac <special_events_handler+0x20>
1000e49c:	88a5      	ldrh	r5, [r4, #4]
1000e49e:	4285      	cmp	r5, r0
1000e4a0:	d104      	bne.n	1000e4ac <special_events_handler+0x20>
1000e4a2:	2301      	movs	r3, #1
1000e4a4:	425b      	negs	r3, r3
1000e4a6:	8023      	strh	r3, [r4, #0]
1000e4a8:	60a2      	str	r2, [r4, #8]
1000e4aa:	e009      	b.n	1000e4c0 <special_events_handler+0x34>
1000e4ac:	884c      	ldrh	r4, [r1, #2]
1000e4ae:	429c      	cmp	r4, r3
1000e4b0:	d10a      	bne.n	1000e4c8 <special_events_handler+0x3c>
1000e4b2:	888c      	ldrh	r4, [r1, #4]
1000e4b4:	4284      	cmp	r4, r0
1000e4b6:	d107      	bne.n	1000e4c8 <special_events_handler+0x3c>
1000e4b8:	2301      	movs	r3, #1
1000e4ba:	425b      	negs	r3, r3
1000e4bc:	804b      	strh	r3, [r1, #2]
1000e4be:	608a      	str	r2, [r1, #8]
1000e4c0:	4b0f      	ldr	r3, [pc, #60]	; (1000e500 <special_events_handler+0x74>)
1000e4c2:	4798      	blx	r3
1000e4c4:	2001      	movs	r0, #1
1000e4c6:	e017      	b.n	1000e4f8 <special_events_handler+0x6c>
1000e4c8:	490e      	ldr	r1, [pc, #56]	; (1000e504 <special_events_handler+0x78>)
1000e4ca:	428b      	cmp	r3, r1
1000e4cc:	d00e      	beq.n	1000e4ec <special_events_handler+0x60>
1000e4ce:	490e      	ldr	r1, [pc, #56]	; (1000e508 <special_events_handler+0x7c>)
1000e4d0:	428b      	cmp	r3, r1
1000e4d2:	d007      	beq.n	1000e4e4 <special_events_handler+0x58>
1000e4d4:	490d      	ldr	r1, [pc, #52]	; (1000e50c <special_events_handler+0x80>)
1000e4d6:	2000      	movs	r0, #0
1000e4d8:	428b      	cmp	r3, r1
1000e4da:	d10d      	bne.n	1000e4f8 <special_events_handler+0x6c>
1000e4dc:	1c10      	adds	r0, r2, #0
1000e4de:	4b0c      	ldr	r3, [pc, #48]	; (1000e510 <special_events_handler+0x84>)
1000e4e0:	4798      	blx	r3
1000e4e2:	e7ef      	b.n	1000e4c4 <special_events_handler+0x38>
1000e4e4:	1c11      	adds	r1, r2, #0
1000e4e6:	4b0b      	ldr	r3, [pc, #44]	; (1000e514 <special_events_handler+0x88>)
1000e4e8:	2200      	movs	r2, #0
1000e4ea:	e002      	b.n	1000e4f2 <special_events_handler+0x66>
1000e4ec:	1c11      	adds	r1, r2, #0
1000e4ee:	2200      	movs	r2, #0
1000e4f0:	4b09      	ldr	r3, [pc, #36]	; (1000e518 <special_events_handler+0x8c>)
1000e4f2:	4798      	blx	r3
1000e4f4:	4243      	negs	r3, r0
1000e4f6:	4158      	adcs	r0, r3
1000e4f8:	bd38      	pop	{r3, r4, r5, pc}
1000e4fa:	46c0      	nop			; (mov r8, r8)
1000e4fc:	1001af14 	.word	0x1001af14
1000e500:	1000fee9 	.word	0x1000fee9
1000e504:	00000e13 	.word	0x00000e13
1000e508:	00000e15 	.word	0x00000e15
1000e50c:	00000e01 	.word	0x00000e01
1000e510:	10010259 	.word	0x10010259
1000e514:	10010419 	.word	0x10010419
1000e518:	100104f1 	.word	0x100104f1

1000e51c <at_ble_event_get>:
1000e51c:	2300      	movs	r3, #0
1000e51e:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e520:	b087      	sub	sp, #28
1000e522:	9204      	str	r2, [sp, #16]
1000e524:	7003      	strb	r3, [r0, #0]
1000e526:	9b04      	ldr	r3, [sp, #16]
1000e528:	9003      	str	r0, [sp, #12]
1000e52a:	3b01      	subs	r3, #1
1000e52c:	1c0d      	adds	r5, r1, #0
1000e52e:	9305      	str	r3, [sp, #20]
1000e530:	3303      	adds	r3, #3
1000e532:	d802      	bhi.n	1000e53a <at_ble_event_get+0x1e>
1000e534:	9804      	ldr	r0, [sp, #16]
1000e536:	4bae      	ldr	r3, [pc, #696]	; (1000e7f0 <at_ble_event_get+0x2d4>)
1000e538:	4798      	blx	r3
1000e53a:	9b05      	ldr	r3, [sp, #20]
1000e53c:	4cad      	ldr	r4, [pc, #692]	; (1000e7f4 <at_ble_event_get+0x2d8>)
1000e53e:	3303      	adds	r3, #3
1000e540:	d902      	bls.n	1000e548 <at_ble_event_get+0x2c>
1000e542:	2300      	movs	r3, #0
1000e544:	9302      	str	r3, [sp, #8]
1000e546:	e015      	b.n	1000e574 <at_ble_event_get+0x58>
1000e548:	2300      	movs	r3, #0
1000e54a:	9302      	str	r3, [sp, #8]
1000e54c:	6823      	ldr	r3, [r4, #0]
1000e54e:	2b00      	cmp	r3, #0
1000e550:	d113      	bne.n	1000e57a <at_ble_event_get+0x5e>
1000e552:	9b02      	ldr	r3, [sp, #8]
1000e554:	2bd0      	cmp	r3, #208	; 0xd0
1000e556:	d100      	bne.n	1000e55a <at_ble_event_get+0x3e>
1000e558:	e2da      	b.n	1000eb10 <at_ble_event_get+0x5f4>
1000e55a:	9804      	ldr	r0, [sp, #16]
1000e55c:	4ba6      	ldr	r3, [pc, #664]	; (1000e7f8 <at_ble_event_get+0x2dc>)
1000e55e:	4798      	blx	r3
1000e560:	9002      	str	r0, [sp, #8]
1000e562:	2802      	cmp	r0, #2
1000e564:	d1f2      	bne.n	1000e54c <at_ble_event_get+0x30>
1000e566:	e03f      	b.n	1000e5e8 <at_ble_event_get+0xcc>
1000e568:	9804      	ldr	r0, [sp, #16]
1000e56a:	4ba3      	ldr	r3, [pc, #652]	; (1000e7f8 <at_ble_event_get+0x2dc>)
1000e56c:	4798      	blx	r3
1000e56e:	9002      	str	r0, [sp, #8]
1000e570:	2802      	cmp	r0, #2
1000e572:	d039      	beq.n	1000e5e8 <at_ble_event_get+0xcc>
1000e574:	6823      	ldr	r3, [r4, #0]
1000e576:	2b00      	cmp	r3, #0
1000e578:	d0f6      	beq.n	1000e568 <at_ble_event_get+0x4c>
1000e57a:	9b02      	ldr	r3, [sp, #8]
1000e57c:	2bd0      	cmp	r3, #208	; 0xd0
1000e57e:	d100      	bne.n	1000e582 <at_ble_event_get+0x66>
1000e580:	e2c6      	b.n	1000eb10 <at_ble_event_get+0x5f4>
1000e582:	9b02      	ldr	r3, [sp, #8]
1000e584:	3b03      	subs	r3, #3
1000e586:	1e5a      	subs	r2, r3, #1
1000e588:	4193      	sbcs	r3, r2
1000e58a:	9a02      	ldr	r2, [sp, #8]
1000e58c:	425b      	negs	r3, r3
1000e58e:	401a      	ands	r2, r3
1000e590:	6823      	ldr	r3, [r4, #0]
1000e592:	9202      	str	r2, [sp, #8]
1000e594:	2b00      	cmp	r3, #0
1000e596:	d100      	bne.n	1000e59a <at_ble_event_get+0x7e>
1000e598:	e2c2      	b.n	1000eb20 <at_ble_event_get+0x604>
1000e59a:	681a      	ldr	r2, [r3, #0]
1000e59c:	68de      	ldr	r6, [r3, #12]
1000e59e:	6022      	str	r2, [r4, #0]
1000e5a0:	88da      	ldrh	r2, [r3, #6]
1000e5a2:	9201      	str	r2, [sp, #4]
1000e5a4:	4a95      	ldr	r2, [pc, #596]	; (1000e7fc <at_ble_event_get+0x2e0>)
1000e5a6:	889c      	ldrh	r4, [r3, #4]
1000e5a8:	6811      	ldr	r1, [r2, #0]
1000e5aa:	6013      	str	r3, [r2, #0]
1000e5ac:	6019      	str	r1, [r3, #0]
1000e5ae:	4b94      	ldr	r3, [pc, #592]	; (1000e800 <at_ble_event_get+0x2e4>)
1000e5b0:	781b      	ldrb	r3, [r3, #0]
1000e5b2:	2b01      	cmp	r3, #1
1000e5b4:	d10f      	bne.n	1000e5d6 <at_ble_event_get+0xba>
1000e5b6:	4b93      	ldr	r3, [pc, #588]	; (1000e804 <at_ble_event_get+0x2e8>)
1000e5b8:	4a92      	ldr	r2, [pc, #584]	; (1000e804 <at_ble_event_get+0x2e8>)
1000e5ba:	8898      	ldrh	r0, [r3, #4]
1000e5bc:	88d9      	ldrh	r1, [r3, #6]
1000e5be:	68d2      	ldr	r2, [r2, #12]
1000e5c0:	891b      	ldrh	r3, [r3, #8]
1000e5c2:	4f91      	ldr	r7, [pc, #580]	; (1000e808 <at_ble_event_get+0x2ec>)
1000e5c4:	47b8      	blx	r7
1000e5c6:	2210      	movs	r2, #16
1000e5c8:	4b90      	ldr	r3, [pc, #576]	; (1000e80c <at_ble_event_get+0x2f0>)
1000e5ca:	488e      	ldr	r0, [pc, #568]	; (1000e804 <at_ble_event_get+0x2e8>)
1000e5cc:	2100      	movs	r1, #0
1000e5ce:	4798      	blx	r3
1000e5d0:	2300      	movs	r3, #0
1000e5d2:	4a8b      	ldr	r2, [pc, #556]	; (1000e800 <at_ble_event_get+0x2e4>)
1000e5d4:	7013      	strb	r3, [r2, #0]
1000e5d6:	9b02      	ldr	r3, [sp, #8]
1000e5d8:	2b00      	cmp	r3, #0
1000e5da:	d114      	bne.n	1000e606 <at_ble_event_get+0xea>
1000e5dc:	4b8c      	ldr	r3, [pc, #560]	; (1000e810 <at_ble_event_get+0x2f4>)
1000e5de:	429c      	cmp	r4, r3
1000e5e0:	d009      	beq.n	1000e5f6 <at_ble_event_get+0xda>
1000e5e2:	4b8c      	ldr	r3, [pc, #560]	; (1000e814 <at_ble_event_get+0x2f8>)
1000e5e4:	429c      	cmp	r4, r3
1000e5e6:	d127      	bne.n	1000e638 <at_ble_event_get+0x11c>
1000e5e8:	233a      	movs	r3, #58	; 0x3a
1000e5ea:	9a03      	ldr	r2, [sp, #12]
1000e5ec:	7013      	strb	r3, [r2, #0]
1000e5ee:	2300      	movs	r3, #0
1000e5f0:	9302      	str	r3, [sp, #8]
1000e5f2:	1c1d      	adds	r5, r3, #0
1000e5f4:	e007      	b.n	1000e606 <at_ble_event_get+0xea>
1000e5f6:	9b01      	ldr	r3, [sp, #4]
1000e5f8:	42a3      	cmp	r3, r4
1000e5fa:	d000      	beq.n	1000e5fe <at_ble_event_get+0xe2>
1000e5fc:	e28a      	b.n	1000eb14 <at_ble_event_get+0x5f8>
1000e5fe:	2338      	movs	r3, #56	; 0x38
1000e600:	9a03      	ldr	r2, [sp, #12]
1000e602:	7013      	strb	r3, [r2, #0]
1000e604:	602e      	str	r6, [r5, #0]
1000e606:	9b03      	ldr	r3, [sp, #12]
1000e608:	781b      	ldrb	r3, [r3, #0]
1000e60a:	2b3b      	cmp	r3, #59	; 0x3b
1000e60c:	d101      	bne.n	1000e612 <at_ble_event_get+0xf6>
1000e60e:	4b82      	ldr	r3, [pc, #520]	; (1000e818 <at_ble_event_get+0x2fc>)
1000e610:	4798      	blx	r3
1000e612:	9b03      	ldr	r3, [sp, #12]
1000e614:	781b      	ldrb	r3, [r3, #0]
1000e616:	2b3b      	cmp	r3, #59	; 0x3b
1000e618:	d003      	beq.n	1000e622 <at_ble_event_get+0x106>
1000e61a:	9b05      	ldr	r3, [sp, #20]
1000e61c:	3303      	adds	r3, #3
1000e61e:	d904      	bls.n	1000e62a <at_ble_event_get+0x10e>
1000e620:	e283      	b.n	1000eb2a <at_ble_event_get+0x60e>
1000e622:	9b02      	ldr	r3, [sp, #8]
1000e624:	2b00      	cmp	r3, #0
1000e626:	d088      	beq.n	1000e53a <at_ble_event_get+0x1e>
1000e628:	e7f7      	b.n	1000e61a <at_ble_event_get+0xfe>
1000e62a:	9b02      	ldr	r3, [sp, #8]
1000e62c:	2bd0      	cmp	r3, #208	; 0xd0
1000e62e:	d100      	bne.n	1000e632 <at_ble_event_get+0x116>
1000e630:	e27b      	b.n	1000eb2a <at_ble_event_get+0x60e>
1000e632:	4b7a      	ldr	r3, [pc, #488]	; (1000e81c <at_ble_event_get+0x300>)
1000e634:	4798      	blx	r3
1000e636:	e278      	b.n	1000eb2a <at_ble_event_get+0x60e>
1000e638:	9b01      	ldr	r3, [sp, #4]
1000e63a:	2bbb      	cmp	r3, #187	; 0xbb
1000e63c:	d125      	bne.n	1000e68a <at_ble_event_get+0x16e>
1000e63e:	2cbb      	cmp	r4, #187	; 0xbb
1000e640:	d123      	bne.n	1000e68a <at_ble_event_get+0x16e>
1000e642:	466b      	mov	r3, sp
1000e644:	891b      	ldrh	r3, [r3, #8]
1000e646:	80ab      	strh	r3, [r5, #4]
1000e648:	78b3      	ldrb	r3, [r6, #2]
1000e64a:	7872      	ldrb	r2, [r6, #1]
1000e64c:	78f0      	ldrb	r0, [r6, #3]
1000e64e:	021b      	lsls	r3, r3, #8
1000e650:	4313      	orrs	r3, r2
1000e652:	7971      	ldrb	r1, [r6, #5]
1000e654:	7932      	ldrb	r2, [r6, #4]
1000e656:	70a8      	strb	r0, [r5, #2]
1000e658:	4871      	ldr	r0, [pc, #452]	; (1000e820 <at_ble_event_get+0x304>)
1000e65a:	802b      	strh	r3, [r5, #0]
1000e65c:	4283      	cmp	r3, r0
1000e65e:	d806      	bhi.n	1000e66e <at_ble_event_get+0x152>
1000e660:	4a70      	ldr	r2, [pc, #448]	; (1000e824 <at_ble_event_get+0x308>)
1000e662:	4293      	cmp	r3, r2
1000e664:	d20b      	bcs.n	1000e67e <at_ble_event_get+0x162>
1000e666:	4a70      	ldr	r2, [pc, #448]	; (1000e828 <at_ble_event_get+0x30c>)
1000e668:	4293      	cmp	r3, r2
1000e66a:	d008      	beq.n	1000e67e <at_ble_event_get+0x162>
1000e66c:	e009      	b.n	1000e682 <at_ble_event_get+0x166>
1000e66e:	486f      	ldr	r0, [pc, #444]	; (1000e82c <at_ble_event_get+0x310>)
1000e670:	4283      	cmp	r3, r0
1000e672:	d106      	bne.n	1000e682 <at_ble_event_get+0x166>
1000e674:	020b      	lsls	r3, r1, #8
1000e676:	4313      	orrs	r3, r2
1000e678:	80ab      	strh	r3, [r5, #4]
1000e67a:	2337      	movs	r3, #55	; 0x37
1000e67c:	e002      	b.n	1000e684 <at_ble_event_get+0x168>
1000e67e:	2336      	movs	r3, #54	; 0x36
1000e680:	e000      	b.n	1000e684 <at_ble_event_get+0x168>
1000e682:	2300      	movs	r3, #0
1000e684:	9a03      	ldr	r2, [sp, #12]
1000e686:	7013      	strb	r3, [r2, #0]
1000e688:	e7bd      	b.n	1000e606 <at_ble_event_get+0xea>
1000e68a:	4b69      	ldr	r3, [pc, #420]	; (1000e830 <at_ble_event_get+0x314>)
1000e68c:	429c      	cmp	r4, r3
1000e68e:	d100      	bne.n	1000e692 <at_ble_event_get+0x176>
1000e690:	e144      	b.n	1000e91c <at_ble_event_get+0x400>
1000e692:	d865      	bhi.n	1000e760 <at_ble_event_get+0x244>
1000e694:	4b67      	ldr	r3, [pc, #412]	; (1000e834 <at_ble_event_get+0x318>)
1000e696:	429c      	cmp	r4, r3
1000e698:	d100      	bne.n	1000e69c <at_ble_event_get+0x180>
1000e69a:	e1d5      	b.n	1000ea48 <at_ble_event_get+0x52c>
1000e69c:	d82f      	bhi.n	1000e6fe <at_ble_event_get+0x1e2>
1000e69e:	4b66      	ldr	r3, [pc, #408]	; (1000e838 <at_ble_event_get+0x31c>)
1000e6a0:	429c      	cmp	r4, r3
1000e6a2:	d100      	bne.n	1000e6a6 <at_ble_event_get+0x18a>
1000e6a4:	e1e0      	b.n	1000ea68 <at_ble_event_get+0x54c>
1000e6a6:	d813      	bhi.n	1000e6d0 <at_ble_event_get+0x1b4>
1000e6a8:	4b64      	ldr	r3, [pc, #400]	; (1000e83c <at_ble_event_get+0x320>)
1000e6aa:	429c      	cmp	r4, r3
1000e6ac:	d100      	bne.n	1000e6b0 <at_ble_event_get+0x194>
1000e6ae:	e1a3      	b.n	1000e9f8 <at_ble_event_get+0x4dc>
1000e6b0:	d804      	bhi.n	1000e6bc <at_ble_event_get+0x1a0>
1000e6b2:	2638      	movs	r6, #56	; 0x38
1000e6b4:	42b4      	cmp	r4, r6
1000e6b6:	d100      	bne.n	1000e6ba <at_ble_event_get+0x19e>
1000e6b8:	e225      	b.n	1000eb06 <at_ble_event_get+0x5ea>
1000e6ba:	e117      	b.n	1000e8ec <at_ble_event_get+0x3d0>
1000e6bc:	4b60      	ldr	r3, [pc, #384]	; (1000e840 <at_ble_event_get+0x324>)
1000e6be:	429c      	cmp	r4, r3
1000e6c0:	d100      	bne.n	1000e6c4 <at_ble_event_get+0x1a8>
1000e6c2:	e19f      	b.n	1000ea04 <at_ble_event_get+0x4e8>
1000e6c4:	33fe      	adds	r3, #254	; 0xfe
1000e6c6:	33ff      	adds	r3, #255	; 0xff
1000e6c8:	429c      	cmp	r4, r3
1000e6ca:	d100      	bne.n	1000e6ce <at_ble_event_get+0x1b2>
1000e6cc:	e1d3      	b.n	1000ea76 <at_ble_event_get+0x55a>
1000e6ce:	e10d      	b.n	1000e8ec <at_ble_event_get+0x3d0>
1000e6d0:	4b5c      	ldr	r3, [pc, #368]	; (1000e844 <at_ble_event_get+0x328>)
1000e6d2:	429c      	cmp	r4, r3
1000e6d4:	d100      	bne.n	1000e6d8 <at_ble_event_get+0x1bc>
1000e6d6:	e1a9      	b.n	1000ea2c <at_ble_event_get+0x510>
1000e6d8:	d808      	bhi.n	1000e6ec <at_ble_event_get+0x1d0>
1000e6da:	4b5b      	ldr	r3, [pc, #364]	; (1000e848 <at_ble_event_get+0x32c>)
1000e6dc:	429c      	cmp	r4, r3
1000e6de:	d100      	bne.n	1000e6e2 <at_ble_event_get+0x1c6>
1000e6e0:	e196      	b.n	1000ea10 <at_ble_event_get+0x4f4>
1000e6e2:	4b5a      	ldr	r3, [pc, #360]	; (1000e84c <at_ble_event_get+0x330>)
1000e6e4:	429c      	cmp	r4, r3
1000e6e6:	d100      	bne.n	1000e6ea <at_ble_event_get+0x1ce>
1000e6e8:	e199      	b.n	1000ea1e <at_ble_event_get+0x502>
1000e6ea:	e0ff      	b.n	1000e8ec <at_ble_event_get+0x3d0>
1000e6ec:	4b58      	ldr	r3, [pc, #352]	; (1000e850 <at_ble_event_get+0x334>)
1000e6ee:	429c      	cmp	r4, r3
1000e6f0:	d100      	bne.n	1000e6f4 <at_ble_event_get+0x1d8>
1000e6f2:	e1a2      	b.n	1000ea3a <at_ble_event_get+0x51e>
1000e6f4:	4b57      	ldr	r3, [pc, #348]	; (1000e854 <at_ble_event_get+0x338>)
1000e6f6:	429c      	cmp	r4, r3
1000e6f8:	d100      	bne.n	1000e6fc <at_ble_event_get+0x1e0>
1000e6fa:	e1d4      	b.n	1000eaa6 <at_ble_event_get+0x58a>
1000e6fc:	e0f6      	b.n	1000e8ec <at_ble_event_get+0x3d0>
1000e6fe:	4b56      	ldr	r3, [pc, #344]	; (1000e858 <at_ble_event_get+0x33c>)
1000e700:	429c      	cmp	r4, r3
1000e702:	d100      	bne.n	1000e706 <at_ble_event_get+0x1ea>
1000e704:	e1c8      	b.n	1000ea98 <at_ble_event_get+0x57c>
1000e706:	d812      	bhi.n	1000e72e <at_ble_event_get+0x212>
1000e708:	4b54      	ldr	r3, [pc, #336]	; (1000e85c <at_ble_event_get+0x340>)
1000e70a:	429c      	cmp	r4, r3
1000e70c:	d100      	bne.n	1000e710 <at_ble_event_get+0x1f4>
1000e70e:	e1d1      	b.n	1000eab4 <at_ble_event_get+0x598>
1000e710:	d804      	bhi.n	1000e71c <at_ble_event_get+0x200>
1000e712:	4b53      	ldr	r3, [pc, #332]	; (1000e860 <at_ble_event_get+0x344>)
1000e714:	429c      	cmp	r4, r3
1000e716:	d100      	bne.n	1000e71a <at_ble_event_get+0x1fe>
1000e718:	e19b      	b.n	1000ea52 <at_ble_event_get+0x536>
1000e71a:	e0e7      	b.n	1000e8ec <at_ble_event_get+0x3d0>
1000e71c:	4b51      	ldr	r3, [pc, #324]	; (1000e864 <at_ble_event_get+0x348>)
1000e71e:	429c      	cmp	r4, r3
1000e720:	d100      	bne.n	1000e724 <at_ble_event_get+0x208>
1000e722:	e1ad      	b.n	1000ea80 <at_ble_event_get+0x564>
1000e724:	4b50      	ldr	r3, [pc, #320]	; (1000e868 <at_ble_event_get+0x34c>)
1000e726:	429c      	cmp	r4, r3
1000e728:	d100      	bne.n	1000e72c <at_ble_event_get+0x210>
1000e72a:	e1b0      	b.n	1000ea8e <at_ble_event_get+0x572>
1000e72c:	e0de      	b.n	1000e8ec <at_ble_event_get+0x3d0>
1000e72e:	4b4f      	ldr	r3, [pc, #316]	; (1000e86c <at_ble_event_get+0x350>)
1000e730:	429c      	cmp	r4, r3
1000e732:	d100      	bne.n	1000e736 <at_ble_event_get+0x21a>
1000e734:	e0e0      	b.n	1000e8f8 <at_ble_event_get+0x3dc>
1000e736:	d809      	bhi.n	1000e74c <at_ble_event_get+0x230>
1000e738:	3b08      	subs	r3, #8
1000e73a:	429c      	cmp	r4, r3
1000e73c:	d100      	bne.n	1000e740 <at_ble_event_get+0x224>
1000e73e:	e0d7      	b.n	1000e8f0 <at_ble_event_get+0x3d4>
1000e740:	4b4b      	ldr	r3, [pc, #300]	; (1000e870 <at_ble_event_get+0x354>)
1000e742:	2639      	movs	r6, #57	; 0x39
1000e744:	429c      	cmp	r4, r3
1000e746:	d100      	bne.n	1000e74a <at_ble_event_get+0x22e>
1000e748:	e1dd      	b.n	1000eb06 <at_ble_event_get+0x5ea>
1000e74a:	e0cf      	b.n	1000e8ec <at_ble_event_get+0x3d0>
1000e74c:	23d1      	movs	r3, #209	; 0xd1
1000e74e:	011b      	lsls	r3, r3, #4
1000e750:	429c      	cmp	r4, r3
1000e752:	d100      	bne.n	1000e756 <at_ble_event_get+0x23a>
1000e754:	e0d6      	b.n	1000e904 <at_ble_event_get+0x3e8>
1000e756:	4b47      	ldr	r3, [pc, #284]	; (1000e874 <at_ble_event_get+0x358>)
1000e758:	429c      	cmp	r4, r3
1000e75a:	d100      	bne.n	1000e75e <at_ble_event_get+0x242>
1000e75c:	e0d8      	b.n	1000e910 <at_ble_event_get+0x3f4>
1000e75e:	e0c5      	b.n	1000e8ec <at_ble_event_get+0x3d0>
1000e760:	4b45      	ldr	r3, [pc, #276]	; (1000e878 <at_ble_event_get+0x35c>)
1000e762:	429c      	cmp	r4, r3
1000e764:	d100      	bne.n	1000e768 <at_ble_event_get+0x24c>
1000e766:	e117      	b.n	1000e998 <at_ble_event_get+0x47c>
1000e768:	d82e      	bhi.n	1000e7c8 <at_ble_event_get+0x2ac>
1000e76a:	4b44      	ldr	r3, [pc, #272]	; (1000e87c <at_ble_event_get+0x360>)
1000e76c:	429c      	cmp	r4, r3
1000e76e:	d100      	bne.n	1000e772 <at_ble_event_get+0x256>
1000e770:	e13d      	b.n	1000e9ee <at_ble_event_get+0x4d2>
1000e772:	d812      	bhi.n	1000e79a <at_ble_event_get+0x27e>
1000e774:	4b42      	ldr	r3, [pc, #264]	; (1000e880 <at_ble_event_get+0x364>)
1000e776:	429c      	cmp	r4, r3
1000e778:	d100      	bne.n	1000e77c <at_ble_event_get+0x260>
1000e77a:	e0e8      	b.n	1000e94e <at_ble_event_get+0x432>
1000e77c:	d804      	bhi.n	1000e788 <at_ble_event_get+0x26c>
1000e77e:	3b03      	subs	r3, #3
1000e780:	429c      	cmp	r4, r3
1000e782:	d100      	bne.n	1000e786 <at_ble_event_get+0x26a>
1000e784:	e0d0      	b.n	1000e928 <at_ble_event_get+0x40c>
1000e786:	e0b1      	b.n	1000e8ec <at_ble_event_get+0x3d0>
1000e788:	4b3e      	ldr	r3, [pc, #248]	; (1000e884 <at_ble_event_get+0x368>)
1000e78a:	429c      	cmp	r4, r3
1000e78c:	d100      	bne.n	1000e790 <at_ble_event_get+0x274>
1000e78e:	e0d0      	b.n	1000e932 <at_ble_event_get+0x416>
1000e790:	4b3d      	ldr	r3, [pc, #244]	; (1000e888 <at_ble_event_get+0x36c>)
1000e792:	429c      	cmp	r4, r3
1000e794:	d100      	bne.n	1000e798 <at_ble_event_get+0x27c>
1000e796:	e0f9      	b.n	1000e98c <at_ble_event_get+0x470>
1000e798:	e0a8      	b.n	1000e8ec <at_ble_event_get+0x3d0>
1000e79a:	4b3c      	ldr	r3, [pc, #240]	; (1000e88c <at_ble_event_get+0x370>)
1000e79c:	429c      	cmp	r4, r3
1000e79e:	d100      	bne.n	1000e7a2 <at_ble_event_get+0x286>
1000e7a0:	e0db      	b.n	1000e95a <at_ble_event_get+0x43e>
1000e7a2:	d808      	bhi.n	1000e7b6 <at_ble_event_get+0x29a>
1000e7a4:	4b3a      	ldr	r3, [pc, #232]	; (1000e890 <at_ble_event_get+0x374>)
1000e7a6:	429c      	cmp	r4, r3
1000e7a8:	d100      	bne.n	1000e7ac <at_ble_event_get+0x290>
1000e7aa:	e11b      	b.n	1000e9e4 <at_ble_event_get+0x4c8>
1000e7ac:	4b39      	ldr	r3, [pc, #228]	; (1000e894 <at_ble_event_get+0x378>)
1000e7ae:	429c      	cmp	r4, r3
1000e7b0:	d100      	bne.n	1000e7b4 <at_ble_event_get+0x298>
1000e7b2:	e0d8      	b.n	1000e966 <at_ble_event_get+0x44a>
1000e7b4:	e09a      	b.n	1000e8ec <at_ble_event_get+0x3d0>
1000e7b6:	4b38      	ldr	r3, [pc, #224]	; (1000e898 <at_ble_event_get+0x37c>)
1000e7b8:	429c      	cmp	r4, r3
1000e7ba:	d100      	bne.n	1000e7be <at_ble_event_get+0x2a2>
1000e7bc:	e0d8      	b.n	1000e970 <at_ble_event_get+0x454>
1000e7be:	4b37      	ldr	r3, [pc, #220]	; (1000e89c <at_ble_event_get+0x380>)
1000e7c0:	429c      	cmp	r4, r3
1000e7c2:	d100      	bne.n	1000e7c6 <at_ble_event_get+0x2aa>
1000e7c4:	e0db      	b.n	1000e97e <at_ble_event_get+0x462>
1000e7c6:	e091      	b.n	1000e8ec <at_ble_event_get+0x3d0>
1000e7c8:	4b35      	ldr	r3, [pc, #212]	; (1000e8a0 <at_ble_event_get+0x384>)
1000e7ca:	429c      	cmp	r4, r3
1000e7cc:	d100      	bne.n	1000e7d0 <at_ble_event_get+0x2b4>
1000e7ce:	e0f7      	b.n	1000e9c0 <at_ble_event_get+0x4a4>
1000e7d0:	d876      	bhi.n	1000e8c0 <at_ble_event_get+0x3a4>
1000e7d2:	4b34      	ldr	r3, [pc, #208]	; (1000e8a4 <at_ble_event_get+0x388>)
1000e7d4:	429c      	cmp	r4, r3
1000e7d6:	d100      	bne.n	1000e7da <at_ble_event_get+0x2be>
1000e7d8:	e0f8      	b.n	1000e9cc <at_ble_event_get+0x4b0>
1000e7da:	d869      	bhi.n	1000e8b0 <at_ble_event_get+0x394>
1000e7dc:	4b32      	ldr	r3, [pc, #200]	; (1000e8a8 <at_ble_event_get+0x38c>)
1000e7de:	429c      	cmp	r4, r3
1000e7e0:	d100      	bne.n	1000e7e4 <at_ble_event_get+0x2c8>
1000e7e2:	e0e0      	b.n	1000e9a6 <at_ble_event_get+0x48a>
1000e7e4:	4b31      	ldr	r3, [pc, #196]	; (1000e8ac <at_ble_event_get+0x390>)
1000e7e6:	429c      	cmp	r4, r3
1000e7e8:	d100      	bne.n	1000e7ec <at_ble_event_get+0x2d0>
1000e7ea:	e0a9      	b.n	1000e940 <at_ble_event_get+0x424>
1000e7ec:	e07e      	b.n	1000e8ec <at_ble_event_get+0x3d0>
1000e7ee:	46c0      	nop			; (mov r8, r8)
1000e7f0:	1000ff21 	.word	0x1000ff21
1000e7f4:	10019fac 	.word	0x10019fac
1000e7f8:	1000dc85 	.word	0x1000dc85
1000e7fc:	10019fb0 	.word	0x10019fb0
1000e800:	10019fa8 	.word	0x10019fa8
1000e804:	10019f98 	.word	0x10019f98
1000e808:	1000e405 	.word	0x1000e405
1000e80c:	10015781 	.word	0x10015781
1000e810:	0000ffff 	.word	0x0000ffff
1000e814:	0000fffe 	.word	0x0000fffe
1000e818:	1000defd 	.word	0x1000defd
1000e81c:	1000ff23 	.word	0x1000ff23
1000e820:	0000201e 	.word	0x0000201e
1000e824:	0000201d 	.word	0x0000201d
1000e828:	00000c03 	.word	0x00000c03
1000e82c:	0000201f 	.word	0x0000201f
1000e830:	00000d1c 	.word	0x00000d1c
1000e834:	00000c0c 	.word	0x00000c0c
1000e838:	00000c02 	.word	0x00000c02
1000e83c:	00000a02 	.word	0x00000a02
1000e840:	00000a03 	.word	0x00000a03
1000e844:	00000c06 	.word	0x00000c06
1000e848:	00000c04 	.word	0x00000c04
1000e84c:	00000c05 	.word	0x00000c05
1000e850:	00000c07 	.word	0x00000c07
1000e854:	00000c09 	.word	0x00000c09
1000e858:	00000c17 	.word	0x00000c17
1000e85c:	00000c12 	.word	0x00000c12
1000e860:	00000c0d 	.word	0x00000c0d
1000e864:	00000c13 	.word	0x00000c13
1000e868:	00000c15 	.word	0x00000c15
1000e86c:	00000d08 	.word	0x00000d08
1000e870:	00000d01 	.word	0x00000d01
1000e874:	00000d15 	.word	0x00000d15
1000e878:	00000e1b 	.word	0x00000e1b
1000e87c:	00000e0f 	.word	0x00000e0f
1000e880:	00000e03 	.word	0x00000e03
1000e884:	00000e06 	.word	0x00000e06
1000e888:	00000e0a 	.word	0x00000e0a
1000e88c:	00000e15 	.word	0x00000e15
1000e890:	00000e11 	.word	0x00000e11
1000e894:	00000e13 	.word	0x00000e13
1000e898:	00000e17 	.word	0x00000e17
1000e89c:	00000e19 	.word	0x00000e19
1000e8a0:	00000e27 	.word	0x00000e27
1000e8a4:	00000e21 	.word	0x00000e21
1000e8a8:	00000e1c 	.word	0x00000e1c
1000e8ac:	00000e1d 	.word	0x00000e1d
1000e8b0:	4b9f      	ldr	r3, [pc, #636]	; (1000eb30 <at_ble_event_get+0x614>)
1000e8b2:	429c      	cmp	r4, r3
1000e8b4:	d07e      	beq.n	1000e9b4 <at_ble_event_get+0x498>
1000e8b6:	4b9f      	ldr	r3, [pc, #636]	; (1000eb34 <at_ble_event_get+0x618>)
1000e8b8:	429c      	cmp	r4, r3
1000e8ba:	d100      	bne.n	1000e8be <at_ble_event_get+0x3a2>
1000e8bc:	e08c      	b.n	1000e9d8 <at_ble_event_get+0x4bc>
1000e8be:	e015      	b.n	1000e8ec <at_ble_event_get+0x3d0>
1000e8c0:	4b9d      	ldr	r3, [pc, #628]	; (1000eb38 <at_ble_event_get+0x61c>)
1000e8c2:	429c      	cmp	r4, r3
1000e8c4:	d100      	bne.n	1000e8c8 <at_ble_event_get+0x3ac>
1000e8c6:	e10a      	b.n	1000eade <at_ble_event_get+0x5c2>
1000e8c8:	d808      	bhi.n	1000e8dc <at_ble_event_get+0x3c0>
1000e8ca:	4b9c      	ldr	r3, [pc, #624]	; (1000eb3c <at_ble_event_get+0x620>)
1000e8cc:	429c      	cmp	r4, r3
1000e8ce:	d100      	bne.n	1000e8d2 <at_ble_event_get+0x3b6>
1000e8d0:	e0f7      	b.n	1000eac2 <at_ble_event_get+0x5a6>
1000e8d2:	4b9b      	ldr	r3, [pc, #620]	; (1000eb40 <at_ble_event_get+0x624>)
1000e8d4:	429c      	cmp	r4, r3
1000e8d6:	d100      	bne.n	1000e8da <at_ble_event_get+0x3be>
1000e8d8:	e0fa      	b.n	1000ead0 <at_ble_event_get+0x5b4>
1000e8da:	e007      	b.n	1000e8ec <at_ble_event_get+0x3d0>
1000e8dc:	4b99      	ldr	r3, [pc, #612]	; (1000eb44 <at_ble_event_get+0x628>)
1000e8de:	429c      	cmp	r4, r3
1000e8e0:	d100      	bne.n	1000e8e4 <at_ble_event_get+0x3c8>
1000e8e2:	e103      	b.n	1000eaec <at_ble_event_get+0x5d0>
1000e8e4:	4b98      	ldr	r3, [pc, #608]	; (1000eb48 <at_ble_event_get+0x62c>)
1000e8e6:	429c      	cmp	r4, r3
1000e8e8:	d100      	bne.n	1000e8ec <at_ble_event_get+0x3d0>
1000e8ea:	e106      	b.n	1000eafa <at_ble_event_get+0x5de>
1000e8ec:	2600      	movs	r6, #0
1000e8ee:	e10a      	b.n	1000eb06 <at_ble_event_get+0x5ea>
1000e8f0:	1c30      	adds	r0, r6, #0
1000e8f2:	1c29      	adds	r1, r5, #0
1000e8f4:	4b95      	ldr	r3, [pc, #596]	; (1000eb4c <at_ble_event_get+0x630>)
1000e8f6:	e014      	b.n	1000e922 <at_ble_event_get+0x406>
1000e8f8:	1c30      	adds	r0, r6, #0
1000e8fa:	1c29      	adds	r1, r5, #0
1000e8fc:	4b94      	ldr	r3, [pc, #592]	; (1000eb50 <at_ble_event_get+0x634>)
1000e8fe:	4798      	blx	r3
1000e900:	2604      	movs	r6, #4
1000e902:	e100      	b.n	1000eb06 <at_ble_event_get+0x5ea>
1000e904:	1c30      	adds	r0, r6, #0
1000e906:	1c29      	adds	r1, r5, #0
1000e908:	4b92      	ldr	r3, [pc, #584]	; (1000eb54 <at_ble_event_get+0x638>)
1000e90a:	4798      	blx	r3
1000e90c:	2601      	movs	r6, #1
1000e90e:	e0fa      	b.n	1000eb06 <at_ble_event_get+0x5ea>
1000e910:	1c30      	adds	r0, r6, #0
1000e912:	1c29      	adds	r1, r5, #0
1000e914:	4b90      	ldr	r3, [pc, #576]	; (1000eb58 <at_ble_event_get+0x63c>)
1000e916:	4798      	blx	r3
1000e918:	260f      	movs	r6, #15
1000e91a:	e0f4      	b.n	1000eb06 <at_ble_event_get+0x5ea>
1000e91c:	1c30      	adds	r0, r6, #0
1000e91e:	1c29      	adds	r1, r5, #0
1000e920:	4b8e      	ldr	r3, [pc, #568]	; (1000eb5c <at_ble_event_get+0x640>)
1000e922:	4798      	blx	r3
1000e924:	1c06      	adds	r6, r0, #0
1000e926:	e0ee      	b.n	1000eb06 <at_ble_event_get+0x5ea>
1000e928:	9801      	ldr	r0, [sp, #4]
1000e92a:	1c31      	adds	r1, r6, #0
1000e92c:	1c2a      	adds	r2, r5, #0
1000e92e:	4b8c      	ldr	r3, [pc, #560]	; (1000eb60 <at_ble_event_get+0x644>)
1000e930:	e017      	b.n	1000e962 <at_ble_event_get+0x446>
1000e932:	1c31      	adds	r1, r6, #0
1000e934:	9801      	ldr	r0, [sp, #4]
1000e936:	1c2a      	adds	r2, r5, #0
1000e938:	4b8a      	ldr	r3, [pc, #552]	; (1000eb64 <at_ble_event_get+0x648>)
1000e93a:	4798      	blx	r3
1000e93c:	2611      	movs	r6, #17
1000e93e:	e0e2      	b.n	1000eb06 <at_ble_event_get+0x5ea>
1000e940:	1c31      	adds	r1, r6, #0
1000e942:	9801      	ldr	r0, [sp, #4]
1000e944:	1c2a      	adds	r2, r5, #0
1000e946:	4b88      	ldr	r3, [pc, #544]	; (1000eb68 <at_ble_event_get+0x64c>)
1000e948:	4798      	blx	r3
1000e94a:	2612      	movs	r6, #18
1000e94c:	e0db      	b.n	1000eb06 <at_ble_event_get+0x5ea>
1000e94e:	1c30      	adds	r0, r6, #0
1000e950:	1c29      	adds	r1, r5, #0
1000e952:	4b86      	ldr	r3, [pc, #536]	; (1000eb6c <at_ble_event_get+0x650>)
1000e954:	4798      	blx	r3
1000e956:	2606      	movs	r6, #6
1000e958:	e0d5      	b.n	1000eb06 <at_ble_event_get+0x5ea>
1000e95a:	1c31      	adds	r1, r6, #0
1000e95c:	1c2a      	adds	r2, r5, #0
1000e95e:	9801      	ldr	r0, [sp, #4]
1000e960:	4b83      	ldr	r3, [pc, #524]	; (1000eb70 <at_ble_event_get+0x654>)
1000e962:	4798      	blx	r3
1000e964:	e7de      	b.n	1000e924 <at_ble_event_get+0x408>
1000e966:	9801      	ldr	r0, [sp, #4]
1000e968:	1c31      	adds	r1, r6, #0
1000e96a:	1c2a      	adds	r2, r5, #0
1000e96c:	4b81      	ldr	r3, [pc, #516]	; (1000eb74 <at_ble_event_get+0x658>)
1000e96e:	e7f8      	b.n	1000e962 <at_ble_event_get+0x446>
1000e970:	1c31      	adds	r1, r6, #0
1000e972:	9801      	ldr	r0, [sp, #4]
1000e974:	1c2a      	adds	r2, r5, #0
1000e976:	4b80      	ldr	r3, [pc, #512]	; (1000eb78 <at_ble_event_get+0x65c>)
1000e978:	4798      	blx	r3
1000e97a:	260d      	movs	r6, #13
1000e97c:	e0c3      	b.n	1000eb06 <at_ble_event_get+0x5ea>
1000e97e:	1c31      	adds	r1, r6, #0
1000e980:	9801      	ldr	r0, [sp, #4]
1000e982:	1c2a      	adds	r2, r5, #0
1000e984:	4b7d      	ldr	r3, [pc, #500]	; (1000eb7c <at_ble_event_get+0x660>)
1000e986:	4798      	blx	r3
1000e988:	260e      	movs	r6, #14
1000e98a:	e0bc      	b.n	1000eb06 <at_ble_event_get+0x5ea>
1000e98c:	9801      	ldr	r0, [sp, #4]
1000e98e:	1c31      	adds	r1, r6, #0
1000e990:	1c2a      	adds	r2, r5, #0
1000e992:	4b7b      	ldr	r3, [pc, #492]	; (1000eb80 <at_ble_event_get+0x664>)
1000e994:	4798      	blx	r3
1000e996:	e084      	b.n	1000eaa2 <at_ble_event_get+0x586>
1000e998:	1c31      	adds	r1, r6, #0
1000e99a:	9801      	ldr	r0, [sp, #4]
1000e99c:	1c2a      	adds	r2, r5, #0
1000e99e:	4b79      	ldr	r3, [pc, #484]	; (1000eb84 <at_ble_event_get+0x668>)
1000e9a0:	4798      	blx	r3
1000e9a2:	260b      	movs	r6, #11
1000e9a4:	e0af      	b.n	1000eb06 <at_ble_event_get+0x5ea>
1000e9a6:	1c31      	adds	r1, r6, #0
1000e9a8:	9801      	ldr	r0, [sp, #4]
1000e9aa:	1c2a      	adds	r2, r5, #0
1000e9ac:	4b76      	ldr	r3, [pc, #472]	; (1000eb88 <at_ble_event_get+0x66c>)
1000e9ae:	4798      	blx	r3
1000e9b0:	2610      	movs	r6, #16
1000e9b2:	e0a8      	b.n	1000eb06 <at_ble_event_get+0x5ea>
1000e9b4:	1c30      	adds	r0, r6, #0
1000e9b6:	1c29      	adds	r1, r5, #0
1000e9b8:	4b74      	ldr	r3, [pc, #464]	; (1000eb8c <at_ble_event_get+0x670>)
1000e9ba:	4798      	blx	r3
1000e9bc:	2628      	movs	r6, #40	; 0x28
1000e9be:	e0a2      	b.n	1000eb06 <at_ble_event_get+0x5ea>
1000e9c0:	1c30      	adds	r0, r6, #0
1000e9c2:	1c29      	adds	r1, r5, #0
1000e9c4:	4b72      	ldr	r3, [pc, #456]	; (1000eb90 <at_ble_event_get+0x674>)
1000e9c6:	4798      	blx	r3
1000e9c8:	2629      	movs	r6, #41	; 0x29
1000e9ca:	e09c      	b.n	1000eb06 <at_ble_event_get+0x5ea>
1000e9cc:	1c30      	adds	r0, r6, #0
1000e9ce:	1c29      	adds	r1, r5, #0
1000e9d0:	4b70      	ldr	r3, [pc, #448]	; (1000eb94 <at_ble_event_get+0x678>)
1000e9d2:	4798      	blx	r3
1000e9d4:	2627      	movs	r6, #39	; 0x27
1000e9d6:	e096      	b.n	1000eb06 <at_ble_event_get+0x5ea>
1000e9d8:	1c30      	adds	r0, r6, #0
1000e9da:	1c29      	adds	r1, r5, #0
1000e9dc:	4b6e      	ldr	r3, [pc, #440]	; (1000eb98 <at_ble_event_get+0x67c>)
1000e9de:	4798      	blx	r3
1000e9e0:	262a      	movs	r6, #42	; 0x2a
1000e9e2:	e090      	b.n	1000eb06 <at_ble_event_get+0x5ea>
1000e9e4:	9801      	ldr	r0, [sp, #4]
1000e9e6:	1c31      	adds	r1, r6, #0
1000e9e8:	1c2a      	adds	r2, r5, #0
1000e9ea:	4b6c      	ldr	r3, [pc, #432]	; (1000eb9c <at_ble_event_get+0x680>)
1000e9ec:	e7b9      	b.n	1000e962 <at_ble_event_get+0x446>
1000e9ee:	9801      	ldr	r0, [sp, #4]
1000e9f0:	1c31      	adds	r1, r6, #0
1000e9f2:	1c2a      	adds	r2, r5, #0
1000e9f4:	4b6a      	ldr	r3, [pc, #424]	; (1000eba0 <at_ble_event_get+0x684>)
1000e9f6:	e7b4      	b.n	1000e962 <at_ble_event_get+0x446>
1000e9f8:	1c30      	adds	r0, r6, #0
1000e9fa:	1c29      	adds	r1, r5, #0
1000e9fc:	4b69      	ldr	r3, [pc, #420]	; (1000eba4 <at_ble_event_get+0x688>)
1000e9fe:	4798      	blx	r3
1000ea00:	262b      	movs	r6, #43	; 0x2b
1000ea02:	e080      	b.n	1000eb06 <at_ble_event_get+0x5ea>
1000ea04:	1c30      	adds	r0, r6, #0
1000ea06:	1c29      	adds	r1, r5, #0
1000ea08:	4b67      	ldr	r3, [pc, #412]	; (1000eba8 <at_ble_event_get+0x68c>)
1000ea0a:	4798      	blx	r3
1000ea0c:	262c      	movs	r6, #44	; 0x2c
1000ea0e:	e07a      	b.n	1000eb06 <at_ble_event_get+0x5ea>
1000ea10:	1c31      	adds	r1, r6, #0
1000ea12:	9801      	ldr	r0, [sp, #4]
1000ea14:	1c2a      	adds	r2, r5, #0
1000ea16:	4b65      	ldr	r3, [pc, #404]	; (1000ebac <at_ble_event_get+0x690>)
1000ea18:	4798      	blx	r3
1000ea1a:	2613      	movs	r6, #19
1000ea1c:	e073      	b.n	1000eb06 <at_ble_event_get+0x5ea>
1000ea1e:	1c31      	adds	r1, r6, #0
1000ea20:	9801      	ldr	r0, [sp, #4]
1000ea22:	1c2a      	adds	r2, r5, #0
1000ea24:	4b62      	ldr	r3, [pc, #392]	; (1000ebb0 <at_ble_event_get+0x694>)
1000ea26:	4798      	blx	r3
1000ea28:	2614      	movs	r6, #20
1000ea2a:	e06c      	b.n	1000eb06 <at_ble_event_get+0x5ea>
1000ea2c:	1c31      	adds	r1, r6, #0
1000ea2e:	9801      	ldr	r0, [sp, #4]
1000ea30:	1c2a      	adds	r2, r5, #0
1000ea32:	4b60      	ldr	r3, [pc, #384]	; (1000ebb4 <at_ble_event_get+0x698>)
1000ea34:	4798      	blx	r3
1000ea36:	2615      	movs	r6, #21
1000ea38:	e065      	b.n	1000eb06 <at_ble_event_get+0x5ea>
1000ea3a:	1c31      	adds	r1, r6, #0
1000ea3c:	9801      	ldr	r0, [sp, #4]
1000ea3e:	1c2a      	adds	r2, r5, #0
1000ea40:	4b5d      	ldr	r3, [pc, #372]	; (1000ebb8 <at_ble_event_get+0x69c>)
1000ea42:	4798      	blx	r3
1000ea44:	2616      	movs	r6, #22
1000ea46:	e05e      	b.n	1000eb06 <at_ble_event_get+0x5ea>
1000ea48:	9801      	ldr	r0, [sp, #4]
1000ea4a:	1c31      	adds	r1, r6, #0
1000ea4c:	1c2a      	adds	r2, r5, #0
1000ea4e:	4b5b      	ldr	r3, [pc, #364]	; (1000ebbc <at_ble_event_get+0x6a0>)
1000ea50:	e787      	b.n	1000e962 <at_ble_event_get+0x446>
1000ea52:	1c31      	adds	r1, r6, #0
1000ea54:	9801      	ldr	r0, [sp, #4]
1000ea56:	1c2a      	adds	r2, r5, #0
1000ea58:	4b58      	ldr	r3, [pc, #352]	; (1000ebbc <at_ble_event_get+0x6a0>)
1000ea5a:	4798      	blx	r3
1000ea5c:	88a9      	ldrh	r1, [r5, #4]
1000ea5e:	1c06      	adds	r6, r0, #0
1000ea60:	4b57      	ldr	r3, [pc, #348]	; (1000ebc0 <at_ble_event_get+0x6a4>)
1000ea62:	8828      	ldrh	r0, [r5, #0]
1000ea64:	4798      	blx	r3
1000ea66:	e04e      	b.n	1000eb06 <at_ble_event_get+0x5ea>
1000ea68:	1c31      	adds	r1, r6, #0
1000ea6a:	9801      	ldr	r0, [sp, #4]
1000ea6c:	1c2a      	adds	r2, r5, #0
1000ea6e:	4b55      	ldr	r3, [pc, #340]	; (1000ebc4 <at_ble_event_get+0x6a8>)
1000ea70:	4798      	blx	r3
1000ea72:	2623      	movs	r6, #35	; 0x23
1000ea74:	e047      	b.n	1000eb06 <at_ble_event_get+0x5ea>
1000ea76:	9801      	ldr	r0, [sp, #4]
1000ea78:	1c31      	adds	r1, r6, #0
1000ea7a:	1c2a      	adds	r2, r5, #0
1000ea7c:	4b52      	ldr	r3, [pc, #328]	; (1000ebc8 <at_ble_event_get+0x6ac>)
1000ea7e:	e770      	b.n	1000e962 <at_ble_event_get+0x446>
1000ea80:	9b01      	ldr	r3, [sp, #4]
1000ea82:	1c30      	adds	r0, r6, #0
1000ea84:	0a1f      	lsrs	r7, r3, #8
1000ea86:	802f      	strh	r7, [r5, #0]
1000ea88:	1c29      	adds	r1, r5, #0
1000ea8a:	4b50      	ldr	r3, [pc, #320]	; (1000ebcc <at_ble_event_get+0x6b0>)
1000ea8c:	e749      	b.n	1000e922 <at_ble_event_get+0x406>
1000ea8e:	9801      	ldr	r0, [sp, #4]
1000ea90:	1c31      	adds	r1, r6, #0
1000ea92:	1c2a      	adds	r2, r5, #0
1000ea94:	4b4e      	ldr	r3, [pc, #312]	; (1000ebd0 <at_ble_event_get+0x6b4>)
1000ea96:	e764      	b.n	1000e962 <at_ble_event_get+0x446>
1000ea98:	1c30      	adds	r0, r6, #0
1000ea9a:	1c29      	adds	r1, r5, #0
1000ea9c:	9a01      	ldr	r2, [sp, #4]
1000ea9e:	4b4d      	ldr	r3, [pc, #308]	; (1000ebd4 <at_ble_event_get+0x6b8>)
1000eaa0:	4798      	blx	r3
1000eaa2:	263b      	movs	r6, #59	; 0x3b
1000eaa4:	e02f      	b.n	1000eb06 <at_ble_event_get+0x5ea>
1000eaa6:	1c31      	adds	r1, r6, #0
1000eaa8:	9801      	ldr	r0, [sp, #4]
1000eaaa:	1c2a      	adds	r2, r5, #0
1000eaac:	4b4a      	ldr	r3, [pc, #296]	; (1000ebd8 <at_ble_event_get+0x6bc>)
1000eaae:	4798      	blx	r3
1000eab0:	2618      	movs	r6, #24
1000eab2:	e028      	b.n	1000eb06 <at_ble_event_get+0x5ea>
1000eab4:	1c31      	adds	r1, r6, #0
1000eab6:	9801      	ldr	r0, [sp, #4]
1000eab8:	1c2a      	adds	r2, r5, #0
1000eaba:	4b48      	ldr	r3, [pc, #288]	; (1000ebdc <at_ble_event_get+0x6c0>)
1000eabc:	4798      	blx	r3
1000eabe:	2620      	movs	r6, #32
1000eac0:	e021      	b.n	1000eb06 <at_ble_event_get+0x5ea>
1000eac2:	1c31      	adds	r1, r6, #0
1000eac4:	9801      	ldr	r0, [sp, #4]
1000eac6:	1c2a      	adds	r2, r5, #0
1000eac8:	4b45      	ldr	r3, [pc, #276]	; (1000ebe0 <at_ble_event_get+0x6c4>)
1000eaca:	4798      	blx	r3
1000eacc:	2633      	movs	r6, #51	; 0x33
1000eace:	e01a      	b.n	1000eb06 <at_ble_event_get+0x5ea>
1000ead0:	1c31      	adds	r1, r6, #0
1000ead2:	9801      	ldr	r0, [sp, #4]
1000ead4:	1c2a      	adds	r2, r5, #0
1000ead6:	4b43      	ldr	r3, [pc, #268]	; (1000ebe4 <at_ble_event_get+0x6c8>)
1000ead8:	4798      	blx	r3
1000eada:	2630      	movs	r6, #48	; 0x30
1000eadc:	e013      	b.n	1000eb06 <at_ble_event_get+0x5ea>
1000eade:	1c31      	adds	r1, r6, #0
1000eae0:	9801      	ldr	r0, [sp, #4]
1000eae2:	1c2a      	adds	r2, r5, #0
1000eae4:	4b40      	ldr	r3, [pc, #256]	; (1000ebe8 <at_ble_event_get+0x6cc>)
1000eae6:	4798      	blx	r3
1000eae8:	2634      	movs	r6, #52	; 0x34
1000eaea:	e00c      	b.n	1000eb06 <at_ble_event_get+0x5ea>
1000eaec:	1c31      	adds	r1, r6, #0
1000eaee:	9801      	ldr	r0, [sp, #4]
1000eaf0:	1c2a      	adds	r2, r5, #0
1000eaf2:	4b3e      	ldr	r3, [pc, #248]	; (1000ebec <at_ble_event_get+0x6d0>)
1000eaf4:	4798      	blx	r3
1000eaf6:	2635      	movs	r6, #53	; 0x35
1000eaf8:	e005      	b.n	1000eb06 <at_ble_event_get+0x5ea>
1000eafa:	1c31      	adds	r1, r6, #0
1000eafc:	9801      	ldr	r0, [sp, #4]
1000eafe:	1c2a      	adds	r2, r5, #0
1000eb00:	4b3b      	ldr	r3, [pc, #236]	; (1000ebf0 <at_ble_event_get+0x6d4>)
1000eb02:	4798      	blx	r3
1000eb04:	2632      	movs	r6, #50	; 0x32
1000eb06:	9b03      	ldr	r3, [sp, #12]
1000eb08:	701e      	strb	r6, [r3, #0]
1000eb0a:	2300      	movs	r3, #0
1000eb0c:	9302      	str	r3, [sp, #8]
1000eb0e:	e57a      	b.n	1000e606 <at_ble_event_get+0xea>
1000eb10:	23d0      	movs	r3, #208	; 0xd0
1000eb12:	e7fb      	b.n	1000eb0c <at_ble_event_get+0x5f0>
1000eb14:	9b01      	ldr	r3, [sp, #4]
1000eb16:	9e02      	ldr	r6, [sp, #8]
1000eb18:	2bbb      	cmp	r3, #187	; 0xbb
1000eb1a:	d000      	beq.n	1000eb1e <at_ble_event_get+0x602>
1000eb1c:	e6e6      	b.n	1000e8ec <at_ble_event_get+0x3d0>
1000eb1e:	e7f2      	b.n	1000eb06 <at_ble_event_get+0x5ea>
1000eb20:	9b02      	ldr	r3, [sp, #8]
1000eb22:	2b00      	cmp	r3, #0
1000eb24:	d000      	beq.n	1000eb28 <at_ble_event_get+0x60c>
1000eb26:	e56e      	b.n	1000e606 <at_ble_event_get+0xea>
1000eb28:	e6e0      	b.n	1000e8ec <at_ble_event_get+0x3d0>
1000eb2a:	9802      	ldr	r0, [sp, #8]
1000eb2c:	b007      	add	sp, #28
1000eb2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000eb30:	00000e22 	.word	0x00000e22
1000eb34:	00000e25 	.word	0x00000e25
1000eb38:	00001b05 	.word	0x00001b05
1000eb3c:	00001b01 	.word	0x00001b01
1000eb40:	00001b03 	.word	0x00001b03
1000eb44:	00001b06 	.word	0x00001b06
1000eb48:	00001b08 	.word	0x00001b08
1000eb4c:	10010d4d 	.word	0x10010d4d
1000eb50:	10010d31 	.word	0x10010d31
1000eb54:	10010fcd 	.word	0x10010fcd
1000eb58:	100110bd 	.word	0x100110bd
1000eb5c:	100110e1 	.word	0x100110e1
1000eb60:	100100c5 	.word	0x100100c5
1000eb64:	10010945 	.word	0x10010945
1000eb68:	100109c1 	.word	0x100109c1
1000eb6c:	1001037d 	.word	0x1001037d
1000eb70:	10010419 	.word	0x10010419
1000eb74:	100104f1 	.word	0x100104f1
1000eb78:	10010779 	.word	0x10010779
1000eb7c:	10010819 	.word	0x10010819
1000eb80:	100108d1 	.word	0x100108d1
1000eb84:	100108f9 	.word	0x100108f9
1000eb88:	1001090f 	.word	0x1001090f
1000eb8c:	100109d9 	.word	0x100109d9
1000eb90:	10010a07 	.word	0x10010a07
1000eb94:	10010a1d 	.word	0x10010a1d
1000eb98:	10010a47 	.word	0x10010a47
1000eb9c:	10010875 	.word	0x10010875
1000eba0:	1001089f 	.word	0x1001089f
1000eba4:	1000fb05 	.word	0x1000fb05
1000eba8:	1000fb31 	.word	0x1000fb31
1000ebac:	10011301 	.word	0x10011301
1000ebb0:	1001133d 	.word	0x1001133d
1000ebb4:	10011385 	.word	0x10011385
1000ebb8:	100113c9 	.word	0x100113c9
1000ebbc:	100113fd 	.word	0x100113fd
1000ebc0:	100112c1 	.word	0x100112c1
1000ebc4:	100114c9 	.word	0x100114c9
1000ebc8:	10011451 	.word	0x10011451
1000ebcc:	1000f9e9 	.word	0x1000f9e9
1000ebd0:	1000fa55 	.word	0x1000fa55
1000ebd4:	1000fa19 	.word	0x1000fa19
1000ebd8:	100114d9 	.word	0x100114d9
1000ebdc:	10011519 	.word	0x10011519
1000ebe0:	100117e1 	.word	0x100117e1
1000ebe4:	100117eb 	.word	0x100117eb
1000ebe8:	100117f1 	.word	0x100117f1
1000ebec:	100117f7 	.word	0x100117f7
1000ebf0:	10011803 	.word	0x10011803

1000ebf4 <internal_event_flush>:
1000ebf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000ebf6:	490e      	ldr	r1, [pc, #56]	; (1000ec30 <internal_event_flush+0x3c>)
1000ebf8:	2400      	movs	r4, #0
1000ebfa:	680b      	ldr	r3, [r1, #0]
1000ebfc:	1c0f      	adds	r7, r1, #0
1000ebfe:	1c1e      	adds	r6, r3, #0
1000ec00:	4a0c      	ldr	r2, [pc, #48]	; (1000ec34 <internal_event_flush+0x40>)
1000ec02:	6815      	ldr	r5, [r2, #0]
1000ec04:	9201      	str	r2, [sp, #4]
1000ec06:	2b00      	cmp	r3, #0
1000ec08:	d00e      	beq.n	1000ec28 <internal_event_flush+0x34>
1000ec0a:	889a      	ldrh	r2, [r3, #4]
1000ec0c:	6819      	ldr	r1, [r3, #0]
1000ec0e:	4282      	cmp	r2, r0
1000ec10:	d107      	bne.n	1000ec22 <internal_event_flush+0x2e>
1000ec12:	2c00      	cmp	r4, #0
1000ec14:	d001      	beq.n	1000ec1a <internal_event_flush+0x26>
1000ec16:	6021      	str	r1, [r4, #0]
1000ec18:	e000      	b.n	1000ec1c <internal_event_flush+0x28>
1000ec1a:	1c0e      	adds	r6, r1, #0
1000ec1c:	601d      	str	r5, [r3, #0]
1000ec1e:	1c1d      	adds	r5, r3, #0
1000ec20:	1c23      	adds	r3, r4, #0
1000ec22:	1c1c      	adds	r4, r3, #0
1000ec24:	1c0b      	adds	r3, r1, #0
1000ec26:	e7ee      	b.n	1000ec06 <internal_event_flush+0x12>
1000ec28:	9b01      	ldr	r3, [sp, #4]
1000ec2a:	603e      	str	r6, [r7, #0]
1000ec2c:	601d      	str	r5, [r3, #0]
1000ec2e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000ec30:	10019fac 	.word	0x10019fac
1000ec34:	10019fb0 	.word	0x10019fb0

1000ec38 <internal_conn_flush>:
1000ec38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000ec3a:	4a12      	ldr	r2, [pc, #72]	; (1000ec84 <internal_conn_flush+0x4c>)
1000ec3c:	9000      	str	r0, [sp, #0]
1000ec3e:	6813      	ldr	r3, [r2, #0]
1000ec40:	4811      	ldr	r0, [pc, #68]	; (1000ec88 <internal_conn_flush+0x50>)
1000ec42:	1c1f      	adds	r7, r3, #0
1000ec44:	2100      	movs	r1, #0
1000ec46:	4684      	mov	ip, r0
1000ec48:	6804      	ldr	r4, [r0, #0]
1000ec4a:	9201      	str	r2, [sp, #4]
1000ec4c:	2b00      	cmp	r3, #0
1000ec4e:	d014      	beq.n	1000ec7a <internal_conn_flush+0x42>
1000ec50:	88d8      	ldrh	r0, [r3, #6]
1000ec52:	9a00      	ldr	r2, [sp, #0]
1000ec54:	681d      	ldr	r5, [r3, #0]
1000ec56:	0a06      	lsrs	r6, r0, #8
1000ec58:	4296      	cmp	r6, r2
1000ec5a:	d10b      	bne.n	1000ec74 <internal_conn_flush+0x3c>
1000ec5c:	26fd      	movs	r6, #253	; 0xfd
1000ec5e:	4006      	ands	r6, r0
1000ec60:	2e0c      	cmp	r6, #12
1000ec62:	d107      	bne.n	1000ec74 <internal_conn_flush+0x3c>
1000ec64:	2900      	cmp	r1, #0
1000ec66:	d001      	beq.n	1000ec6c <internal_conn_flush+0x34>
1000ec68:	600d      	str	r5, [r1, #0]
1000ec6a:	e000      	b.n	1000ec6e <internal_conn_flush+0x36>
1000ec6c:	1c2f      	adds	r7, r5, #0
1000ec6e:	601c      	str	r4, [r3, #0]
1000ec70:	1c1c      	adds	r4, r3, #0
1000ec72:	1c0b      	adds	r3, r1, #0
1000ec74:	1c19      	adds	r1, r3, #0
1000ec76:	1c2b      	adds	r3, r5, #0
1000ec78:	e7e8      	b.n	1000ec4c <internal_conn_flush+0x14>
1000ec7a:	9b01      	ldr	r3, [sp, #4]
1000ec7c:	601f      	str	r7, [r3, #0]
1000ec7e:	4663      	mov	r3, ip
1000ec80:	601c      	str	r4, [r3, #0]
1000ec82:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000ec84:	10019fac 	.word	0x10019fac
1000ec88:	10019fb0 	.word	0x10019fb0

1000ec8c <at_ble_device_name_set>:
1000ec8c:	b530      	push	{r4, r5, lr}
1000ec8e:	23cf      	movs	r3, #207	; 0xcf
1000ec90:	2800      	cmp	r0, #0
1000ec92:	d010      	beq.n	1000ecb6 <at_ble_device_name_set+0x2a>
1000ec94:	1e4a      	subs	r2, r1, #1
1000ec96:	2a1f      	cmp	r2, #31
1000ec98:	d80d      	bhi.n	1000ecb6 <at_ble_device_name_set+0x2a>
1000ec9a:	4a08      	ldr	r2, [pc, #32]	; (1000ecbc <at_ble_device_name_set+0x30>)
1000ec9c:	1c13      	adds	r3, r2, #0
1000ec9e:	33aa      	adds	r3, #170	; 0xaa
1000eca0:	8019      	strh	r1, [r3, #0]
1000eca2:	2300      	movs	r3, #0
1000eca4:	1c1c      	adds	r4, r3, #0
1000eca6:	5cc5      	ldrb	r5, [r0, r3]
1000eca8:	34ac      	adds	r4, #172	; 0xac
1000ecaa:	3301      	adds	r3, #1
1000ecac:	5515      	strb	r5, [r2, r4]
1000ecae:	b2dc      	uxtb	r4, r3
1000ecb0:	428c      	cmp	r4, r1
1000ecb2:	d3f7      	bcc.n	1000eca4 <at_ble_device_name_set+0x18>
1000ecb4:	2300      	movs	r3, #0
1000ecb6:	1c18      	adds	r0, r3, #0
1000ecb8:	bd30      	pop	{r4, r5, pc}
1000ecba:	46c0      	nop			; (mov r8, r8)
1000ecbc:	1001afb2 	.word	0x1001afb2

1000ecc0 <at_ble_addr_get>:
1000ecc0:	b510      	push	{r4, lr}
1000ecc2:	1c04      	adds	r4, r0, #0
1000ecc4:	20cf      	movs	r0, #207	; 0xcf
1000ecc6:	2c00      	cmp	r4, #0
1000ecc8:	d006      	beq.n	1000ecd8 <at_ble_addr_get+0x18>
1000ecca:	4b04      	ldr	r3, [pc, #16]	; (1000ecdc <at_ble_addr_get+0x1c>)
1000eccc:	38ce      	subs	r0, #206	; 0xce
1000ecce:	1c21      	adds	r1, r4, #0
1000ecd0:	4798      	blx	r3
1000ecd2:	4b03      	ldr	r3, [pc, #12]	; (1000ece0 <at_ble_addr_get+0x20>)
1000ecd4:	791b      	ldrb	r3, [r3, #4]
1000ecd6:	7023      	strb	r3, [r4, #0]
1000ecd8:	bd10      	pop	{r4, pc}
1000ecda:	46c0      	nop			; (mov r8, r8)
1000ecdc:	10010be1 	.word	0x10010be1
1000ece0:	1001afb2 	.word	0x1001afb2

1000ece4 <at_ble_set_dev_config>:
1000ece4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ece6:	7906      	ldrb	r6, [r0, #4]
1000ece8:	b089      	sub	sp, #36	; 0x24
1000ecea:	25cf      	movs	r5, #207	; 0xcf
1000ecec:	2e03      	cmp	r6, #3
1000ecee:	d838      	bhi.n	1000ed62 <at_ble_set_dev_config+0x7e>
1000ecf0:	7803      	ldrb	r3, [r0, #0]
1000ecf2:	3511      	adds	r5, #17
1000ecf4:	2b0f      	cmp	r3, #15
1000ecf6:	d834      	bhi.n	1000ed62 <at_ble_set_dev_config+0x7e>
1000ecf8:	2380      	movs	r3, #128	; 0x80
1000ecfa:	8c87      	ldrh	r7, [r0, #36]	; 0x24
1000ecfc:	3d11      	subs	r5, #17
1000ecfe:	009b      	lsls	r3, r3, #2
1000ed00:	429f      	cmp	r7, r3
1000ed02:	d82e      	bhi.n	1000ed62 <at_ble_set_dev_config+0x7e>
1000ed04:	7fc5      	ldrb	r5, [r0, #31]
1000ed06:	7f83      	ldrb	r3, [r0, #30]
1000ed08:	01ad      	lsls	r5, r5, #6
1000ed0a:	015b      	lsls	r3, r3, #5
1000ed0c:	431d      	orrs	r5, r3
1000ed0e:	7ec3      	ldrb	r3, [r0, #27]
1000ed10:	431d      	orrs	r5, r3
1000ed12:	7f43      	ldrb	r3, [r0, #29]
1000ed14:	011b      	lsls	r3, r3, #4
1000ed16:	431d      	orrs	r5, r3
1000ed18:	7f03      	ldrb	r3, [r0, #28]
1000ed1a:	009b      	lsls	r3, r3, #2
1000ed1c:	431d      	orrs	r5, r3
1000ed1e:	4b12      	ldr	r3, [pc, #72]	; (1000ed68 <at_ble_set_dev_config+0x84>)
1000ed20:	b2ed      	uxtb	r5, r5
1000ed22:	711e      	strb	r6, [r3, #4]
1000ed24:	7903      	ldrb	r3, [r0, #4]
1000ed26:	3b02      	subs	r3, #2
1000ed28:	2b01      	cmp	r3, #1
1000ed2a:	d801      	bhi.n	1000ed30 <at_ble_set_dev_config+0x4c>
1000ed2c:	2302      	movs	r3, #2
1000ed2e:	7103      	strb	r3, [r0, #4]
1000ed30:	1c04      	adds	r4, r0, #0
1000ed32:	1c23      	adds	r3, r4, #0
1000ed34:	330b      	adds	r3, #11
1000ed36:	8861      	ldrh	r1, [r4, #2]
1000ed38:	9307      	str	r3, [sp, #28]
1000ed3a:	7923      	ldrb	r3, [r4, #4]
1000ed3c:	7800      	ldrb	r0, [r0, #0]
1000ed3e:	9300      	str	r3, [sp, #0]
1000ed40:	9501      	str	r5, [sp, #4]
1000ed42:	8c25      	ldrh	r5, [r4, #32]
1000ed44:	1d62      	adds	r2, r4, #5
1000ed46:	9502      	str	r5, [sp, #8]
1000ed48:	8c65      	ldrh	r5, [r4, #34]	; 0x22
1000ed4a:	9b07      	ldr	r3, [sp, #28]
1000ed4c:	9503      	str	r5, [sp, #12]
1000ed4e:	9704      	str	r7, [sp, #16]
1000ed50:	4d06      	ldr	r5, [pc, #24]	; (1000ed6c <at_ble_set_dev_config+0x88>)
1000ed52:	47a8      	blx	r5
1000ed54:	7126      	strb	r6, [r4, #4]
1000ed56:	1c05      	adds	r5, r0, #0
1000ed58:	1c21      	adds	r1, r4, #0
1000ed5a:	4803      	ldr	r0, [pc, #12]	; (1000ed68 <at_ble_set_dev_config+0x84>)
1000ed5c:	2226      	movs	r2, #38	; 0x26
1000ed5e:	4b04      	ldr	r3, [pc, #16]	; (1000ed70 <at_ble_set_dev_config+0x8c>)
1000ed60:	4798      	blx	r3
1000ed62:	1c28      	adds	r0, r5, #0
1000ed64:	b009      	add	sp, #36	; 0x24
1000ed66:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ed68:	1001afb2 	.word	0x1001afb2
1000ed6c:	10010ad9 	.word	0x10010ad9
1000ed70:	1001576f 	.word	0x1001576f

1000ed74 <at_ble_init>:
1000ed74:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ed76:	b087      	sub	sp, #28
1000ed78:	af03      	add	r7, sp, #12
1000ed7a:	4954      	ldr	r1, [pc, #336]	; (1000eecc <at_ble_init+0x158>)
1000ed7c:	220b      	movs	r2, #11
1000ed7e:	4b54      	ldr	r3, [pc, #336]	; (1000eed0 <at_ble_init+0x15c>)
1000ed80:	1c04      	adds	r4, r0, #0
1000ed82:	1c38      	adds	r0, r7, #0
1000ed84:	4798      	blx	r3
1000ed86:	2205      	movs	r2, #5
1000ed88:	4b52      	ldr	r3, [pc, #328]	; (1000eed4 <at_ble_init+0x160>)
1000ed8a:	2640      	movs	r6, #64	; 0x40
1000ed8c:	801a      	strh	r2, [r3, #0]
1000ed8e:	2300      	movs	r3, #0
1000ed90:	4a51      	ldr	r2, [pc, #324]	; (1000eed8 <at_ble_init+0x164>)
1000ed92:	6013      	str	r3, [r2, #0]
1000ed94:	4a51      	ldr	r2, [pc, #324]	; (1000eedc <at_ble_init+0x168>)
1000ed96:	7013      	strb	r3, [r2, #0]
1000ed98:	4a51      	ldr	r2, [pc, #324]	; (1000eee0 <at_ble_init+0x16c>)
1000ed9a:	7013      	strb	r3, [r2, #0]
1000ed9c:	4b51      	ldr	r3, [pc, #324]	; (1000eee4 <at_ble_init+0x170>)
1000ed9e:	4798      	blx	r3
1000eda0:	4b51      	ldr	r3, [pc, #324]	; (1000eee8 <at_ble_init+0x174>)
1000eda2:	4798      	blx	r3
1000eda4:	4b51      	ldr	r3, [pc, #324]	; (1000eeec <at_ble_init+0x178>)
1000eda6:	4798      	blx	r3
1000eda8:	4b51      	ldr	r3, [pc, #324]	; (1000eef0 <at_ble_init+0x17c>)
1000edaa:	4798      	blx	r3
1000edac:	2c00      	cmp	r4, #0
1000edae:	d100      	bne.n	1000edb2 <at_ble_init+0x3e>
1000edb0:	e089      	b.n	1000eec6 <at_ble_init+0x152>
1000edb2:	68a3      	ldr	r3, [r4, #8]
1000edb4:	2b00      	cmp	r3, #0
1000edb6:	d100      	bne.n	1000edba <at_ble_init+0x46>
1000edb8:	e085      	b.n	1000eec6 <at_ble_init+0x152>
1000edba:	6923      	ldr	r3, [r4, #16]
1000edbc:	2b00      	cmp	r3, #0
1000edbe:	d100      	bne.n	1000edc2 <at_ble_init+0x4e>
1000edc0:	e081      	b.n	1000eec6 <at_ble_init+0x152>
1000edc2:	6820      	ldr	r0, [r4, #0]
1000edc4:	2800      	cmp	r0, #0
1000edc6:	d102      	bne.n	1000edce <at_ble_init+0x5a>
1000edc8:	6863      	ldr	r3, [r4, #4]
1000edca:	2b00      	cmp	r3, #0
1000edcc:	d17b      	bne.n	1000eec6 <at_ble_init+0x152>
1000edce:	4b49      	ldr	r3, [pc, #292]	; (1000eef4 <at_ble_init+0x180>)
1000edd0:	6861      	ldr	r1, [r4, #4]
1000edd2:	4798      	blx	r3
1000edd4:	4b48      	ldr	r3, [pc, #288]	; (1000eef8 <at_ble_init+0x184>)
1000edd6:	4798      	blx	r3
1000edd8:	2801      	cmp	r0, #1
1000edda:	d901      	bls.n	1000ede0 <at_ble_init+0x6c>
1000eddc:	26e2      	movs	r6, #226	; 0xe2
1000edde:	e072      	b.n	1000eec6 <at_ble_init+0x152>
1000ede0:	4846      	ldr	r0, [pc, #280]	; (1000eefc <at_ble_init+0x188>)
1000ede2:	4b47      	ldr	r3, [pc, #284]	; (1000ef00 <at_ble_init+0x18c>)
1000ede4:	4798      	blx	r3
1000ede6:	2800      	cmp	r0, #0
1000ede8:	d1f8      	bne.n	1000eddc <at_ble_init+0x68>
1000edea:	1c20      	adds	r0, r4, #0
1000edec:	4b45      	ldr	r3, [pc, #276]	; (1000ef04 <at_ble_init+0x190>)
1000edee:	4798      	blx	r3
1000edf0:	68e0      	ldr	r0, [r4, #12]
1000edf2:	68a1      	ldr	r1, [r4, #8]
1000edf4:	4b44      	ldr	r3, [pc, #272]	; (1000ef08 <at_ble_init+0x194>)
1000edf6:	4798      	blx	r3
1000edf8:	466b      	mov	r3, sp
1000edfa:	2201      	movs	r2, #1
1000edfc:	1cdc      	adds	r4, r3, #3
1000edfe:	1c20      	adds	r0, r4, #0
1000ee00:	a901      	add	r1, sp, #4
1000ee02:	4252      	negs	r2, r2
1000ee04:	4b41      	ldr	r3, [pc, #260]	; (1000ef0c <at_ble_init+0x198>)
1000ee06:	4798      	blx	r3
1000ee08:	2800      	cmp	r0, #0
1000ee0a:	d102      	bne.n	1000ee12 <at_ble_init+0x9e>
1000ee0c:	7823      	ldrb	r3, [r4, #0]
1000ee0e:	2b39      	cmp	r3, #57	; 0x39
1000ee10:	d1f2      	bne.n	1000edf8 <at_ble_init+0x84>
1000ee12:	4b3f      	ldr	r3, [pc, #252]	; (1000ef10 <at_ble_init+0x19c>)
1000ee14:	4798      	blx	r3
1000ee16:	1e06      	subs	r6, r0, #0
1000ee18:	d155      	bne.n	1000eec6 <at_ble_init+0x152>
1000ee1a:	1c03      	adds	r3, r0, #0
1000ee1c:	2101      	movs	r1, #1
1000ee1e:	4a3d      	ldr	r2, [pc, #244]	; (1000ef14 <at_ble_init+0x1a0>)
1000ee20:	4249      	negs	r1, r1
1000ee22:	189a      	adds	r2, r3, r2
1000ee24:	3312      	adds	r3, #18
1000ee26:	8151      	strh	r1, [r2, #10]
1000ee28:	2b90      	cmp	r3, #144	; 0x90
1000ee2a:	d1f7      	bne.n	1000ee1c <at_ble_init+0xa8>
1000ee2c:	4c3a      	ldr	r4, [pc, #232]	; (1000ef18 <at_ble_init+0x1a4>)
1000ee2e:	3b81      	subs	r3, #129	; 0x81
1000ee30:	7023      	strb	r3, [r4, #0]
1000ee32:	4b3a      	ldr	r3, [pc, #232]	; (1000ef1c <at_ble_init+0x1a8>)
1000ee34:	4a3a      	ldr	r2, [pc, #232]	; (1000ef20 <at_ble_init+0x1ac>)
1000ee36:	8063      	strh	r3, [r4, #2]
1000ee38:	2300      	movs	r3, #0
1000ee3a:	7123      	strb	r3, [r4, #4]
1000ee3c:	3301      	adds	r3, #1
1000ee3e:	1e58      	subs	r0, r3, #1
1000ee40:	0119      	lsls	r1, r3, #4
1000ee42:	4301      	orrs	r1, r0
1000ee44:	3302      	adds	r3, #2
1000ee46:	7011      	strb	r1, [r2, #0]
1000ee48:	3201      	adds	r2, #1
1000ee4a:	2b21      	cmp	r3, #33	; 0x21
1000ee4c:	d1f7      	bne.n	1000ee3e <at_ble_init+0xca>
1000ee4e:	33e0      	adds	r3, #224	; 0xe0
1000ee50:	33ff      	adds	r3, #255	; 0xff
1000ee52:	84a3      	strh	r3, [r4, #36]	; 0x24
1000ee54:	1c23      	adds	r3, r4, #0
1000ee56:	2500      	movs	r5, #0
1000ee58:	3373      	adds	r3, #115	; 0x73
1000ee5a:	701d      	strb	r5, [r3, #0]
1000ee5c:	1c23      	adds	r3, r4, #0
1000ee5e:	3372      	adds	r3, #114	; 0x72
1000ee60:	701d      	strb	r5, [r3, #0]
1000ee62:	1c23      	adds	r3, r4, #0
1000ee64:	3376      	adds	r3, #118	; 0x76
1000ee66:	701d      	strb	r5, [r3, #0]
1000ee68:	1c23      	adds	r3, r4, #0
1000ee6a:	33cc      	adds	r3, #204	; 0xcc
1000ee6c:	801d      	strh	r5, [r3, #0]
1000ee6e:	1c22      	adds	r2, r4, #0
1000ee70:	23a0      	movs	r3, #160	; 0xa0
1000ee72:	32d0      	adds	r2, #208	; 0xd0
1000ee74:	005b      	lsls	r3, r3, #1
1000ee76:	8013      	strh	r3, [r2, #0]
1000ee78:	1c22      	adds	r2, r4, #0
1000ee7a:	32ce      	adds	r2, #206	; 0xce
1000ee7c:	8013      	strh	r3, [r2, #0]
1000ee7e:	1c23      	adds	r3, r4, #0
1000ee80:	33d2      	adds	r3, #210	; 0xd2
1000ee82:	801d      	strh	r5, [r3, #0]
1000ee84:	22fa      	movs	r2, #250	; 0xfa
1000ee86:	1c23      	adds	r3, r4, #0
1000ee88:	0052      	lsls	r2, r2, #1
1000ee8a:	33d4      	adds	r3, #212	; 0xd4
1000ee8c:	801a      	strh	r2, [r3, #0]
1000ee8e:	1c23      	adds	r3, r4, #0
1000ee90:	33d6      	adds	r3, #214	; 0xd6
1000ee92:	701d      	strb	r5, [r3, #0]
1000ee94:	1c20      	adds	r0, r4, #0
1000ee96:	4b23      	ldr	r3, [pc, #140]	; (1000ef24 <at_ble_init+0x1b0>)
1000ee98:	76e5      	strb	r5, [r4, #27]
1000ee9a:	7725      	strb	r5, [r4, #28]
1000ee9c:	7765      	strb	r5, [r4, #29]
1000ee9e:	77a5      	strb	r5, [r4, #30]
1000eea0:	77e5      	strb	r5, [r4, #31]
1000eea2:	8425      	strh	r5, [r4, #32]
1000eea4:	8465      	strh	r5, [r4, #34]	; 0x22
1000eea6:	4798      	blx	r3
1000eea8:	1c23      	adds	r3, r4, #0
1000eeaa:	2207      	movs	r2, #7
1000eeac:	3374      	adds	r3, #116	; 0x74
1000eeae:	701a      	strb	r2, [r3, #0]
1000eeb0:	1c23      	adds	r3, r4, #0
1000eeb2:	3204      	adds	r2, #4
1000eeb4:	33aa      	adds	r3, #170	; 0xaa
1000eeb6:	801a      	strh	r2, [r3, #0]
1000eeb8:	1c2b      	adds	r3, r5, #0
1000eeba:	5d7a      	ldrb	r2, [r7, r5]
1000eebc:	33ac      	adds	r3, #172	; 0xac
1000eebe:	3501      	adds	r5, #1
1000eec0:	54e2      	strb	r2, [r4, r3]
1000eec2:	2d0b      	cmp	r5, #11
1000eec4:	d1f8      	bne.n	1000eeb8 <at_ble_init+0x144>
1000eec6:	1c30      	adds	r0, r6, #0
1000eec8:	b007      	add	sp, #28
1000eeca:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000eecc:	100182f3 	.word	0x100182f3
1000eed0:	1001576f 	.word	0x1001576f
1000eed4:	1001af20 	.word	0x1001af20
1000eed8:	1001a05c 	.word	0x1001a05c
1000eedc:	10019fbc 	.word	0x10019fbc
1000eee0:	10018534 	.word	0x10018534
1000eee4:	10011529 	.word	0x10011529
1000eee8:	1000f1e5 	.word	0x1000f1e5
1000eeec:	1000f845 	.word	0x1000f845
1000eef0:	1000faf9 	.word	0x1000faf9
1000eef4:	1000f881 	.word	0x1000f881
1000eef8:	1000d995 	.word	0x1000d995
1000eefc:	1000fdf9 	.word	0x1000fdf9
1000ef00:	1000dbd9 	.word	0x1000dbd9
1000ef04:	1000fea1 	.word	0x1000fea1
1000ef08:	1000e461 	.word	0x1000e461
1000ef0c:	1000e51d 	.word	0x1000e51d
1000ef10:	10010a69 	.word	0x10010a69
1000ef14:	1001af22 	.word	0x1001af22
1000ef18:	1001afb2 	.word	0x1001afb2
1000ef1c:	00003a98 	.word	0x00003a98
1000ef20:	1001afbd 	.word	0x1001afbd
1000ef24:	1000ece5 	.word	0x1000ece5

1000ef28 <at_ble_addr_set>:
1000ef28:	b538      	push	{r3, r4, r5, lr}
1000ef2a:	1c45      	adds	r5, r0, #1
1000ef2c:	1c03      	adds	r3, r0, #0
1000ef2e:	20cf      	movs	r0, #207	; 0xcf
1000ef30:	2d00      	cmp	r5, #0
1000ef32:	d018      	beq.n	1000ef66 <at_ble_addr_set+0x3e>
1000ef34:	781a      	ldrb	r2, [r3, #0]
1000ef36:	2a03      	cmp	r2, #3
1000ef38:	d815      	bhi.n	1000ef66 <at_ble_addr_set+0x3e>
1000ef3a:	2a01      	cmp	r2, #1
1000ef3c:	d102      	bne.n	1000ef44 <at_ble_addr_set+0x1c>
1000ef3e:	785a      	ldrb	r2, [r3, #1]
1000ef40:	2a00      	cmp	r2, #0
1000ef42:	d010      	beq.n	1000ef66 <at_ble_addr_set+0x3e>
1000ef44:	1c1c      	adds	r4, r3, #0
1000ef46:	1c29      	adds	r1, r5, #0
1000ef48:	2206      	movs	r2, #6
1000ef4a:	4b07      	ldr	r3, [pc, #28]	; (1000ef68 <at_ble_addr_set+0x40>)
1000ef4c:	4807      	ldr	r0, [pc, #28]	; (1000ef6c <at_ble_addr_set+0x44>)
1000ef4e:	4798      	blx	r3
1000ef50:	7823      	ldrb	r3, [r4, #0]
1000ef52:	4807      	ldr	r0, [pc, #28]	; (1000ef70 <at_ble_addr_set+0x48>)
1000ef54:	7103      	strb	r3, [r0, #4]
1000ef56:	4b07      	ldr	r3, [pc, #28]	; (1000ef74 <at_ble_addr_set+0x4c>)
1000ef58:	4798      	blx	r3
1000ef5a:	7823      	ldrb	r3, [r4, #0]
1000ef5c:	2b00      	cmp	r3, #0
1000ef5e:	d102      	bne.n	1000ef66 <at_ble_addr_set+0x3e>
1000ef60:	1c28      	adds	r0, r5, #0
1000ef62:	4b05      	ldr	r3, [pc, #20]	; (1000ef78 <at_ble_addr_set+0x50>)
1000ef64:	4798      	blx	r3
1000ef66:	bd38      	pop	{r3, r4, r5, pc}
1000ef68:	1001576f 	.word	0x1001576f
1000ef6c:	1001afb7 	.word	0x1001afb7
1000ef70:	1001afb2 	.word	0x1001afb2
1000ef74:	1000ece5 	.word	0x1000ece5
1000ef78:	1000ff25 	.word	0x1000ff25

1000ef7c <at_ble_adv_data_set>:
1000ef7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000ef7e:	4684      	mov	ip, r0
1000ef80:	1c0f      	adds	r7, r1, #0
1000ef82:	1c16      	adds	r6, r2, #0
1000ef84:	1c1c      	adds	r4, r3, #0
1000ef86:	2800      	cmp	r0, #0
1000ef88:	d102      	bne.n	1000ef90 <at_ble_adv_data_set+0x14>
1000ef8a:	20e2      	movs	r0, #226	; 0xe2
1000ef8c:	2a00      	cmp	r2, #0
1000ef8e:	d02b      	beq.n	1000efe8 <at_ble_adv_data_set+0x6c>
1000ef90:	20cf      	movs	r0, #207	; 0xcf
1000ef92:	2f1f      	cmp	r7, #31
1000ef94:	d828      	bhi.n	1000efe8 <at_ble_adv_data_set+0x6c>
1000ef96:	2c1f      	cmp	r4, #31
1000ef98:	d826      	bhi.n	1000efe8 <at_ble_adv_data_set+0x6c>
1000ef9a:	4663      	mov	r3, ip
1000ef9c:	2b00      	cmp	r3, #0
1000ef9e:	d00e      	beq.n	1000efbe <at_ble_adv_data_set+0x42>
1000efa0:	4812      	ldr	r0, [pc, #72]	; (1000efec <at_ble_adv_data_set+0x70>)
1000efa2:	4d13      	ldr	r5, [pc, #76]	; (1000eff0 <at_ble_adv_data_set+0x74>)
1000efa4:	2f00      	cmp	r7, #0
1000efa6:	d104      	bne.n	1000efb2 <at_ble_adv_data_set+0x36>
1000efa8:	1c39      	adds	r1, r7, #0
1000efaa:	221f      	movs	r2, #31
1000efac:	4b11      	ldr	r3, [pc, #68]	; (1000eff4 <at_ble_adv_data_set+0x78>)
1000efae:	4798      	blx	r3
1000efb0:	e003      	b.n	1000efba <at_ble_adv_data_set+0x3e>
1000efb2:	4661      	mov	r1, ip
1000efb4:	1c3a      	adds	r2, r7, #0
1000efb6:	4b10      	ldr	r3, [pc, #64]	; (1000eff8 <at_ble_adv_data_set+0x7c>)
1000efb8:	4798      	blx	r3
1000efba:	3572      	adds	r5, #114	; 0x72
1000efbc:	702f      	strb	r7, [r5, #0]
1000efbe:	1e30      	subs	r0, r6, #0
1000efc0:	d012      	beq.n	1000efe8 <at_ble_adv_data_set+0x6c>
1000efc2:	4d0b      	ldr	r5, [pc, #44]	; (1000eff0 <at_ble_adv_data_set+0x74>)
1000efc4:	480d      	ldr	r0, [pc, #52]	; (1000effc <at_ble_adv_data_set+0x80>)
1000efc6:	2c00      	cmp	r4, #0
1000efc8:	d107      	bne.n	1000efda <at_ble_adv_data_set+0x5e>
1000efca:	1c21      	adds	r1, r4, #0
1000efcc:	221f      	movs	r2, #31
1000efce:	4b09      	ldr	r3, [pc, #36]	; (1000eff4 <at_ble_adv_data_set+0x78>)
1000efd0:	3573      	adds	r5, #115	; 0x73
1000efd2:	4798      	blx	r3
1000efd4:	702c      	strb	r4, [r5, #0]
1000efd6:	1c20      	adds	r0, r4, #0
1000efd8:	e006      	b.n	1000efe8 <at_ble_adv_data_set+0x6c>
1000efda:	1c31      	adds	r1, r6, #0
1000efdc:	1c22      	adds	r2, r4, #0
1000efde:	4b06      	ldr	r3, [pc, #24]	; (1000eff8 <at_ble_adv_data_set+0x7c>)
1000efe0:	4798      	blx	r3
1000efe2:	2000      	movs	r0, #0
1000efe4:	3573      	adds	r5, #115	; 0x73
1000efe6:	702c      	strb	r4, [r5, #0]
1000efe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000efea:	46c0      	nop			; (mov r8, r8)
1000efec:	1001afe6 	.word	0x1001afe6
1000eff0:	1001afb2 	.word	0x1001afb2
1000eff4:	10015781 	.word	0x10015781
1000eff8:	1001576f 	.word	0x1001576f
1000effc:	1001b005 	.word	0x1001b005

1000f000 <at_ble_adv_start>:
1000f000:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f002:	b091      	sub	sp, #68	; 0x44
1000f004:	1c1f      	adds	r7, r3, #0
1000f006:	ab16      	add	r3, sp, #88	; 0x58
1000f008:	881d      	ldrh	r5, [r3, #0]
1000f00a:	ab17      	add	r3, sp, #92	; 0x5c
1000f00c:	881b      	ldrh	r3, [r3, #0]
1000f00e:	910d      	str	r1, [sp, #52]	; 0x34
1000f010:	930e      	str	r3, [sp, #56]	; 0x38
1000f012:	ab18      	add	r3, sp, #96	; 0x60
1000f014:	781b      	ldrb	r3, [r3, #0]
1000f016:	1c04      	adds	r4, r0, #0
1000f018:	930f      	str	r3, [sp, #60]	; 0x3c
1000f01a:	4b42      	ldr	r3, [pc, #264]	; (1000f124 <at_ble_adv_start+0x124>)
1000f01c:	1c16      	adds	r6, r2, #0
1000f01e:	3373      	adds	r3, #115	; 0x73
1000f020:	781b      	ldrb	r3, [r3, #0]
1000f022:	20cf      	movs	r0, #207	; 0xcf
1000f024:	930c      	str	r3, [sp, #48]	; 0x30
1000f026:	2c01      	cmp	r4, #1
1000f028:	d103      	bne.n	1000f032 <at_ble_adv_start+0x32>
1000f02a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1000f02c:	2b00      	cmp	r3, #0
1000f02e:	d176      	bne.n	1000f11e <at_ble_adv_start+0x11e>
1000f030:	e024      	b.n	1000f07c <at_ble_adv_start+0x7c>
1000f032:	2c04      	cmp	r4, #4
1000f034:	d873      	bhi.n	1000f11e <at_ble_adv_start+0x11e>
1000f036:	2380      	movs	r3, #128	; 0x80
1000f038:	01db      	lsls	r3, r3, #7
1000f03a:	429d      	cmp	r5, r3
1000f03c:	d86f      	bhi.n	1000f11e <at_ble_adv_start+0x11e>
1000f03e:	2c00      	cmp	r4, #0
1000f040:	d102      	bne.n	1000f048 <at_ble_adv_start+0x48>
1000f042:	2d1f      	cmp	r5, #31
1000f044:	d96b      	bls.n	1000f11e <at_ble_adv_start+0x11e>
1000f046:	e003      	b.n	1000f050 <at_ble_adv_start+0x50>
1000f048:	2d9f      	cmp	r5, #159	; 0x9f
1000f04a:	d801      	bhi.n	1000f050 <at_ble_adv_start+0x50>
1000f04c:	2c01      	cmp	r4, #1
1000f04e:	d166      	bne.n	1000f11e <at_ble_adv_start+0x11e>
1000f050:	2f00      	cmp	r7, #0
1000f052:	d009      	beq.n	1000f068 <at_ble_adv_start+0x68>
1000f054:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000f056:	20cf      	movs	r0, #207	; 0xcf
1000f058:	3b01      	subs	r3, #1
1000f05a:	2b01      	cmp	r3, #1
1000f05c:	d95f      	bls.n	1000f11e <at_ble_adv_start+0x11e>
1000f05e:	2c01      	cmp	r4, #1
1000f060:	d102      	bne.n	1000f068 <at_ble_adv_start+0x68>
1000f062:	2d00      	cmp	r5, #0
1000f064:	d100      	bne.n	1000f068 <at_ble_adv_start+0x68>
1000f066:	3520      	adds	r5, #32
1000f068:	4b2f      	ldr	r3, [pc, #188]	; (1000f128 <at_ble_adv_start+0x128>)
1000f06a:	4798      	blx	r3
1000f06c:	1c01      	adds	r1, r0, #0
1000f06e:	2e00      	cmp	r6, #0
1000f070:	d043      	beq.n	1000f0fa <at_ble_adv_start+0xfa>
1000f072:	7833      	ldrb	r3, [r6, #0]
1000f074:	1e60      	subs	r0, r4, #1
1000f076:	2b00      	cmp	r3, #0
1000f078:	d109      	bne.n	1000f08e <at_ble_adv_start+0x8e>
1000f07a:	e03b      	b.n	1000f0f4 <at_ble_adv_start+0xf4>
1000f07c:	2380      	movs	r3, #128	; 0x80
1000f07e:	01db      	lsls	r3, r3, #7
1000f080:	429d      	cmp	r5, r3
1000f082:	d84c      	bhi.n	1000f11e <at_ble_adv_start+0x11e>
1000f084:	2e00      	cmp	r6, #0
1000f086:	d04a      	beq.n	1000f11e <at_ble_adv_start+0x11e>
1000f088:	2f00      	cmp	r7, #0
1000f08a:	d1e3      	bne.n	1000f054 <at_ble_adv_start+0x54>
1000f08c:	e02b      	b.n	1000f0e6 <at_ble_adv_start+0xe6>
1000f08e:	2301      	movs	r3, #1
1000f090:	2803      	cmp	r0, #3
1000f092:	d93a      	bls.n	1000f10a <at_ble_adv_start+0x10a>
1000f094:	200d      	movs	r0, #13
1000f096:	1c72      	adds	r2, r6, #1
1000f098:	e002      	b.n	1000f0a0 <at_ble_adv_start+0xa0>
1000f09a:	200e      	movs	r0, #14
1000f09c:	1e32      	subs	r2, r6, #0
1000f09e:	d1fa      	bne.n	1000f096 <at_ble_adv_start+0x96>
1000f0a0:	4c20      	ldr	r4, [pc, #128]	; (1000f124 <at_ble_adv_start+0x124>)
1000f0a2:	3474      	adds	r4, #116	; 0x74
1000f0a4:	7826      	ldrb	r6, [r4, #0]
1000f0a6:	2407      	movs	r4, #7
1000f0a8:	2e00      	cmp	r6, #0
1000f0aa:	d000      	beq.n	1000f0ae <at_ble_adv_start+0xae>
1000f0ac:	1c34      	adds	r4, r6, #0
1000f0ae:	9200      	str	r2, [sp, #0]
1000f0b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1000f0b2:	9403      	str	r4, [sp, #12]
1000f0b4:	9204      	str	r2, [sp, #16]
1000f0b6:	4a1b      	ldr	r2, [pc, #108]	; (1000f124 <at_ble_adv_start+0x124>)
1000f0b8:	9501      	str	r5, [sp, #4]
1000f0ba:	9502      	str	r5, [sp, #8]
1000f0bc:	9705      	str	r7, [sp, #20]
1000f0be:	3272      	adds	r2, #114	; 0x72
1000f0c0:	7812      	ldrb	r2, [r2, #0]
1000f0c2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
1000f0c4:	9206      	str	r2, [sp, #24]
1000f0c6:	4a19      	ldr	r2, [pc, #100]	; (1000f12c <at_ble_adv_start+0x12c>)
1000f0c8:	9207      	str	r2, [sp, #28]
1000f0ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1000f0cc:	9208      	str	r2, [sp, #32]
1000f0ce:	4a18      	ldr	r2, [pc, #96]	; (1000f130 <at_ble_adv_start+0x130>)
1000f0d0:	9209      	str	r2, [sp, #36]	; 0x24
1000f0d2:	2264      	movs	r2, #100	; 0x64
1000f0d4:	4362      	muls	r2, r4
1000f0d6:	b292      	uxth	r2, r2
1000f0d8:	920a      	str	r2, [sp, #40]	; 0x28
1000f0da:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
1000f0dc:	4c15      	ldr	r4, [pc, #84]	; (1000f134 <at_ble_adv_start+0x134>)
1000f0de:	920b      	str	r2, [sp, #44]	; 0x2c
1000f0e0:	4a15      	ldr	r2, [pc, #84]	; (1000f138 <at_ble_adv_start+0x138>)
1000f0e2:	47a0      	blx	r4
1000f0e4:	e01b      	b.n	1000f11e <at_ble_adv_start+0x11e>
1000f0e6:	2d00      	cmp	r5, #0
1000f0e8:	d1be      	bne.n	1000f068 <at_ble_adv_start+0x68>
1000f0ea:	4b0f      	ldr	r3, [pc, #60]	; (1000f128 <at_ble_adv_start+0x128>)
1000f0ec:	4798      	blx	r3
1000f0ee:	2520      	movs	r5, #32
1000f0f0:	1c01      	adds	r1, r0, #0
1000f0f2:	e7be      	b.n	1000f072 <at_ble_adv_start+0x72>
1000f0f4:	2803      	cmp	r0, #3
1000f0f6:	d8cd      	bhi.n	1000f094 <at_ble_adv_start+0x94>
1000f0f8:	e006      	b.n	1000f108 <at_ble_adv_start+0x108>
1000f0fa:	1e60      	subs	r0, r4, #1
1000f0fc:	2803      	cmp	r0, #3
1000f0fe:	d903      	bls.n	1000f108 <at_ble_adv_start+0x108>
1000f100:	1c33      	adds	r3, r6, #0
1000f102:	200d      	movs	r0, #13
1000f104:	1c32      	adds	r2, r6, #0
1000f106:	e7cb      	b.n	1000f0a0 <at_ble_adv_start+0xa0>
1000f108:	2300      	movs	r3, #0
1000f10a:	f003 fc8f 	bl	10012a2c <__gnu_thumb1_case_sqi>
1000f10e:	06c6      	.short	0x06c6
1000f110:	0204      	.short	0x0204
1000f112:	200f      	movs	r0, #15
1000f114:	e7c2      	b.n	1000f09c <at_ble_adv_start+0x9c>
1000f116:	2200      	movs	r2, #0
1000f118:	920c      	str	r2, [sp, #48]	; 0x30
1000f11a:	200c      	movs	r0, #12
1000f11c:	e7be      	b.n	1000f09c <at_ble_adv_start+0x9c>
1000f11e:	b011      	add	sp, #68	; 0x44
1000f120:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f122:	46c0      	nop			; (mov r8, r8)
1000f124:	1001afb2 	.word	0x1001afb2
1000f128:	10010fb5 	.word	0x10010fb5
1000f12c:	1001afe6 	.word	0x1001afe6
1000f130:	1001b005 	.word	0x1001b005
1000f134:	10010e95 	.word	0x10010e95
1000f138:	00003a98 	.word	0x00003a98

1000f13c <at_ble_adv_stop>:
1000f13c:	b508      	push	{r3, lr}
1000f13e:	4b01      	ldr	r3, [pc, #4]	; (1000f144 <at_ble_adv_stop+0x8>)
1000f140:	4798      	blx	r3
1000f142:	bd08      	pop	{r3, pc}
1000f144:	10010cc1 	.word	0x10010cc1

1000f148 <at_ble_scan_stop>:
1000f148:	b510      	push	{r4, lr}
1000f14a:	4b05      	ldr	r3, [pc, #20]	; (1000f160 <at_ble_scan_stop+0x18>)
1000f14c:	4798      	blx	r3
1000f14e:	1e04      	subs	r4, r0, #0
1000f150:	d103      	bne.n	1000f15a <at_ble_scan_stop+0x12>
1000f152:	20d1      	movs	r0, #209	; 0xd1
1000f154:	4b03      	ldr	r3, [pc, #12]	; (1000f164 <at_ble_scan_stop+0x1c>)
1000f156:	0100      	lsls	r0, r0, #4
1000f158:	4798      	blx	r3
1000f15a:	1c20      	adds	r0, r4, #0
1000f15c:	bd10      	pop	{r4, pc}
1000f15e:	46c0      	nop			; (mov r8, r8)
1000f160:	10010cc1 	.word	0x10010cc1
1000f164:	1000ebf5 	.word	0x1000ebf5

1000f168 <at_ble_disconnect>:
1000f168:	b538      	push	{r3, r4, r5, lr}
1000f16a:	1c04      	adds	r4, r0, #0
1000f16c:	4b04      	ldr	r3, [pc, #16]	; (1000f180 <at_ble_disconnect+0x18>)
1000f16e:	1c08      	adds	r0, r1, #0
1000f170:	1c21      	adds	r1, r4, #0
1000f172:	4798      	blx	r3
1000f174:	1c05      	adds	r5, r0, #0
1000f176:	4b03      	ldr	r3, [pc, #12]	; (1000f184 <at_ble_disconnect+0x1c>)
1000f178:	1c20      	adds	r0, r4, #0
1000f17a:	4798      	blx	r3
1000f17c:	1c28      	adds	r0, r5, #0
1000f17e:	bd38      	pop	{r3, r4, r5, pc}
1000f180:	10010339 	.word	0x10010339
1000f184:	1000ec39 	.word	0x1000ec39

1000f188 <at_ble_conn_update_reply>:
1000f188:	b510      	push	{r4, lr}
1000f18a:	4c01      	ldr	r4, [pc, #4]	; (1000f190 <at_ble_conn_update_reply+0x8>)
1000f18c:	47a0      	blx	r4
1000f18e:	bd10      	pop	{r4, pc}
1000f190:	10010829 	.word	0x10010829

1000f194 <at_ble_random_address_resolve>:
1000f194:	b510      	push	{r4, lr}
1000f196:	23cf      	movs	r3, #207	; 0xcf
1000f198:	2800      	cmp	r0, #0
1000f19a:	d00a      	beq.n	1000f1b2 <at_ble_random_address_resolve+0x1e>
1000f19c:	2900      	cmp	r1, #0
1000f19e:	d008      	beq.n	1000f1b2 <at_ble_random_address_resolve+0x1e>
1000f1a0:	2a00      	cmp	r2, #0
1000f1a2:	d006      	beq.n	1000f1b2 <at_ble_random_address_resolve+0x1e>
1000f1a4:	780c      	ldrb	r4, [r1, #0]
1000f1a6:	2c02      	cmp	r4, #2
1000f1a8:	d103      	bne.n	1000f1b2 <at_ble_random_address_resolve+0x1e>
1000f1aa:	4b03      	ldr	r3, [pc, #12]	; (1000f1b8 <at_ble_random_address_resolve+0x24>)
1000f1ac:	3101      	adds	r1, #1
1000f1ae:	4798      	blx	r3
1000f1b0:	2300      	movs	r3, #0
1000f1b2:	1c18      	adds	r0, r3, #0
1000f1b4:	bd10      	pop	{r4, pc}
1000f1b6:	46c0      	nop			; (mov r8, r8)
1000f1b8:	10011055 	.word	0x10011055

1000f1bc <at_ble_uuid_type2len>:
1000f1bc:	23cf      	movs	r3, #207	; 0xcf
1000f1be:	2802      	cmp	r0, #2
1000f1c0:	d801      	bhi.n	1000f1c6 <at_ble_uuid_type2len+0xa>
1000f1c2:	4b02      	ldr	r3, [pc, #8]	; (1000f1cc <at_ble_uuid_type2len+0x10>)
1000f1c4:	5c1b      	ldrb	r3, [r3, r0]
1000f1c6:	1c18      	adds	r0, r3, #0
1000f1c8:	4770      	bx	lr
1000f1ca:	46c0      	nop			; (mov r8, r8)
1000f1cc:	100182fe 	.word	0x100182fe

1000f1d0 <at_ble_uuid_len2type>:
1000f1d0:	1e83      	subs	r3, r0, #2
1000f1d2:	b2db      	uxtb	r3, r3
1000f1d4:	2003      	movs	r0, #3
1000f1d6:	2b0e      	cmp	r3, #14
1000f1d8:	d801      	bhi.n	1000f1de <at_ble_uuid_len2type+0xe>
1000f1da:	4a01      	ldr	r2, [pc, #4]	; (1000f1e0 <at_ble_uuid_len2type+0x10>)
1000f1dc:	5cd0      	ldrb	r0, [r2, r3]
1000f1de:	4770      	bx	lr
1000f1e0:	10018301 	.word	0x10018301

1000f1e4 <init_gatt_client_module>:
1000f1e4:	2200      	movs	r2, #0
1000f1e6:	4b01      	ldr	r3, [pc, #4]	; (1000f1ec <init_gatt_client_module+0x8>)
1000f1e8:	801a      	strh	r2, [r3, #0]
1000f1ea:	4770      	bx	lr
1000f1ec:	10019fb4 	.word	0x10019fb4

1000f1f0 <db_searchATT>:
1000f1f0:	b570      	push	{r4, r5, r6, lr}
1000f1f2:	1c05      	adds	r5, r0, #0
1000f1f4:	2400      	movs	r4, #0
1000f1f6:	4b0c      	ldr	r3, [pc, #48]	; (1000f228 <db_searchATT+0x38>)
1000f1f8:	6819      	ldr	r1, [r3, #0]
1000f1fa:	4b0c      	ldr	r3, [pc, #48]	; (1000f22c <db_searchATT+0x3c>)
1000f1fc:	681e      	ldr	r6, [r3, #0]
1000f1fe:	428c      	cmp	r4, r1
1000f200:	dc10      	bgt.n	1000f224 <db_searchATT+0x34>
1000f202:	200c      	movs	r0, #12
1000f204:	1863      	adds	r3, r4, r1
1000f206:	0fda      	lsrs	r2, r3, #31
1000f208:	18d3      	adds	r3, r2, r3
1000f20a:	1c02      	adds	r2, r0, #0
1000f20c:	105b      	asrs	r3, r3, #1
1000f20e:	435a      	muls	r2, r3
1000f210:	18b0      	adds	r0, r6, r2
1000f212:	8802      	ldrh	r2, [r0, #0]
1000f214:	42aa      	cmp	r2, r5
1000f216:	d201      	bcs.n	1000f21c <db_searchATT+0x2c>
1000f218:	1e59      	subs	r1, r3, #1
1000f21a:	e7f0      	b.n	1000f1fe <db_searchATT+0xe>
1000f21c:	42aa      	cmp	r2, r5
1000f21e:	d902      	bls.n	1000f226 <db_searchATT+0x36>
1000f220:	1c5c      	adds	r4, r3, #1
1000f222:	e7ec      	b.n	1000f1fe <db_searchATT+0xe>
1000f224:	2000      	movs	r0, #0
1000f226:	bd70      	pop	{r4, r5, r6, pc}
1000f228:	10019fc8 	.word	0x10019fc8
1000f22c:	10019fc0 	.word	0x10019fc0

1000f230 <att_permissions>:
1000f230:	b530      	push	{r4, r5, lr}
1000f232:	2403      	movs	r4, #3
1000f234:	1c05      	adds	r5, r0, #0
1000f236:	2301      	movs	r3, #1
1000f238:	4025      	ands	r5, r4
1000f23a:	42a5      	cmp	r5, r4
1000f23c:	d009      	beq.n	1000f252 <att_permissions+0x22>
1000f23e:	1c23      	adds	r3, r4, #0
1000f240:	1924      	adds	r4, r4, r4
1000f242:	4220      	tst	r0, r4
1000f244:	d105      	bne.n	1000f252 <att_permissions+0x22>
1000f246:	3b02      	subs	r3, #2
1000f248:	4218      	tst	r0, r3
1000f24a:	d102      	bne.n	1000f252 <att_permissions+0x22>
1000f24c:	1e4b      	subs	r3, r1, #1
1000f24e:	4199      	sbcs	r1, r3
1000f250:	b28b      	uxth	r3, r1
1000f252:	2130      	movs	r1, #48	; 0x30
1000f254:	4001      	ands	r1, r0
1000f256:	2930      	cmp	r1, #48	; 0x30
1000f258:	d007      	beq.n	1000f26a <att_permissions+0x3a>
1000f25a:	0641      	lsls	r1, r0, #25
1000f25c:	d401      	bmi.n	1000f262 <att_permissions+0x32>
1000f25e:	0681      	lsls	r1, r0, #26
1000f260:	d501      	bpl.n	1000f266 <att_permissions+0x36>
1000f262:	4807      	ldr	r0, [pc, #28]	; (1000f280 <att_permissions+0x50>)
1000f264:	e009      	b.n	1000f27a <att_permissions+0x4a>
1000f266:	06c1      	lsls	r1, r0, #27
1000f268:	d501      	bpl.n	1000f26e <att_permissions+0x3e>
1000f26a:	4806      	ldr	r0, [pc, #24]	; (1000f284 <att_permissions+0x54>)
1000f26c:	e005      	b.n	1000f27a <att_permissions+0x4a>
1000f26e:	2a00      	cmp	r2, #0
1000f270:	d001      	beq.n	1000f276 <att_permissions+0x46>
1000f272:	2204      	movs	r2, #4
1000f274:	4313      	orrs	r3, r2
1000f276:	2080      	movs	r0, #128	; 0x80
1000f278:	0180      	lsls	r0, r0, #6
1000f27a:	4318      	orrs	r0, r3
1000f27c:	bd30      	pop	{r4, r5, pc}
1000f27e:	46c0      	nop			; (mov r8, r8)
1000f280:	0000200c 	.word	0x0000200c
1000f284:	00002004 	.word	0x00002004

1000f288 <char_permissions>:
1000f288:	b530      	push	{r4, r5, lr}
1000f28a:	2300      	movs	r3, #0
1000f28c:	0784      	lsls	r4, r0, #30
1000f28e:	d503      	bpl.n	1000f298 <char_permissions+0x10>
1000f290:	3301      	adds	r3, #1
1000f292:	4219      	tst	r1, r3
1000f294:	d100      	bne.n	1000f298 <char_permissions+0x10>
1000f296:	3302      	adds	r3, #2
1000f298:	0704      	lsls	r4, r0, #28
1000f29a:	d508      	bpl.n	1000f2ae <char_permissions+0x26>
1000f29c:	06cc      	lsls	r4, r1, #27
1000f29e:	d501      	bpl.n	1000f2a4 <char_permissions+0x1c>
1000f2a0:	2404      	movs	r4, #4
1000f2a2:	e000      	b.n	1000f2a6 <char_permissions+0x1e>
1000f2a4:	240c      	movs	r4, #12
1000f2a6:	4323      	orrs	r3, r4
1000f2a8:	2480      	movs	r4, #128	; 0x80
1000f2aa:	01a4      	lsls	r4, r4, #6
1000f2ac:	4323      	orrs	r3, r4
1000f2ae:	0684      	lsls	r4, r0, #26
1000f2b0:	d506      	bpl.n	1000f2c0 <char_permissions+0x38>
1000f2b2:	2406      	movs	r4, #6
1000f2b4:	4221      	tst	r1, r4
1000f2b6:	d101      	bne.n	1000f2bc <char_permissions+0x34>
1000f2b8:	340a      	adds	r4, #10
1000f2ba:	e000      	b.n	1000f2be <char_permissions+0x36>
1000f2bc:	2430      	movs	r4, #48	; 0x30
1000f2be:	4323      	orrs	r3, r4
1000f2c0:	06c4      	lsls	r4, r0, #27
1000f2c2:	d506      	bpl.n	1000f2d2 <char_permissions+0x4a>
1000f2c4:	2406      	movs	r4, #6
1000f2c6:	4221      	tst	r1, r4
1000f2c8:	d101      	bne.n	1000f2ce <char_permissions+0x46>
1000f2ca:	343a      	adds	r4, #58	; 0x3a
1000f2cc:	e000      	b.n	1000f2d0 <char_permissions+0x48>
1000f2ce:	24c0      	movs	r4, #192	; 0xc0
1000f2d0:	4323      	orrs	r3, r4
1000f2d2:	2480      	movs	r4, #128	; 0x80
1000f2d4:	0064      	lsls	r4, r4, #1
1000f2d6:	4220      	tst	r0, r4
1000f2d8:	d000      	beq.n	1000f2dc <char_permissions+0x54>
1000f2da:	4323      	orrs	r3, r4
1000f2dc:	07c4      	lsls	r4, r0, #31
1000f2de:	d502      	bpl.n	1000f2e6 <char_permissions+0x5e>
1000f2e0:	2480      	movs	r4, #128	; 0x80
1000f2e2:	00a4      	lsls	r4, r4, #2
1000f2e4:	4323      	orrs	r3, r4
1000f2e6:	2404      	movs	r4, #4
1000f2e8:	4220      	tst	r0, r4
1000f2ea:	d006      	beq.n	1000f2fa <char_permissions+0x72>
1000f2ec:	06cd      	lsls	r5, r1, #27
1000f2ee:	d400      	bmi.n	1000f2f2 <char_permissions+0x6a>
1000f2f0:	240c      	movs	r4, #12
1000f2f2:	4323      	orrs	r3, r4
1000f2f4:	2480      	movs	r4, #128	; 0x80
1000f2f6:	0124      	lsls	r4, r4, #4
1000f2f8:	4323      	orrs	r3, r4
1000f2fa:	0644      	lsls	r4, r0, #25
1000f2fc:	d501      	bpl.n	1000f302 <char_permissions+0x7a>
1000f2fe:	4c08      	ldr	r4, [pc, #32]	; (1000f320 <char_permissions+0x98>)
1000f300:	4323      	orrs	r3, r4
1000f302:	0600      	lsls	r0, r0, #24
1000f304:	d507      	bpl.n	1000f316 <char_permissions+0x8e>
1000f306:	2004      	movs	r0, #4
1000f308:	06c9      	lsls	r1, r1, #27
1000f30a:	d400      	bmi.n	1000f30e <char_permissions+0x86>
1000f30c:	200c      	movs	r0, #12
1000f30e:	4303      	orrs	r3, r0
1000f310:	2084      	movs	r0, #132	; 0x84
1000f312:	0180      	lsls	r0, r0, #6
1000f314:	4303      	orrs	r3, r0
1000f316:	0390      	lsls	r0, r2, #14
1000f318:	4303      	orrs	r3, r0
1000f31a:	b298      	uxth	r0, r3
1000f31c:	bd30      	pop	{r4, r5, pc}
1000f31e:	46c0      	nop			; (mov r8, r8)
1000f320:	00001004 	.word	0x00001004

1000f324 <presentation_format_define>:
1000f324:	b507      	push	{r0, r1, r2, lr}
1000f326:	466a      	mov	r2, sp
1000f328:	780b      	ldrb	r3, [r1, #0]
1000f32a:	7013      	strb	r3, [r2, #0]
1000f32c:	784b      	ldrb	r3, [r1, #1]
1000f32e:	7053      	strb	r3, [r2, #1]
1000f330:	884b      	ldrh	r3, [r1, #2]
1000f332:	7093      	strb	r3, [r2, #2]
1000f334:	0a1b      	lsrs	r3, r3, #8
1000f336:	70d3      	strb	r3, [r2, #3]
1000f338:	790b      	ldrb	r3, [r1, #4]
1000f33a:	7113      	strb	r3, [r2, #4]
1000f33c:	88cb      	ldrh	r3, [r1, #6]
1000f33e:	2107      	movs	r1, #7
1000f340:	7153      	strb	r3, [r2, #5]
1000f342:	0a1b      	lsrs	r3, r3, #8
1000f344:	7193      	strb	r3, [r2, #6]
1000f346:	4b01      	ldr	r3, [pc, #4]	; (1000f34c <presentation_format_define+0x28>)
1000f348:	4798      	blx	r3
1000f34a:	bd0e      	pop	{r1, r2, r3, pc}
1000f34c:	100116b9 	.word	0x100116b9

1000f350 <db_addATT>:
1000f350:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f352:	4c29      	ldr	r4, [pc, #164]	; (1000f3f8 <db_addATT+0xa8>)
1000f354:	1c1d      	adds	r5, r3, #0
1000f356:	6823      	ldr	r3, [r4, #0]
1000f358:	9001      	str	r0, [sp, #4]
1000f35a:	26d3      	movs	r6, #211	; 0xd3
1000f35c:	2b00      	cmp	r3, #0
1000f35e:	d048      	beq.n	1000f3f2 <db_addATT+0xa2>
1000f360:	1c1e      	adds	r6, r3, #0
1000f362:	3e0c      	subs	r6, #12
1000f364:	6026      	str	r6, [r4, #0]
1000f366:	2900      	cmp	r1, #0
1000f368:	d005      	beq.n	1000f376 <db_addATT+0x26>
1000f36a:	4f24      	ldr	r7, [pc, #144]	; (1000f3fc <db_addATT+0xac>)
1000f36c:	46bc      	mov	ip, r7
1000f36e:	4660      	mov	r0, ip
1000f370:	683f      	ldr	r7, [r7, #0]
1000f372:	18bf      	adds	r7, r7, r2
1000f374:	6007      	str	r7, [r0, #0]
1000f376:	4821      	ldr	r0, [pc, #132]	; (1000f3fc <db_addATT+0xac>)
1000f378:	6807      	ldr	r7, [r0, #0]
1000f37a:	4684      	mov	ip, r0
1000f37c:	42be      	cmp	r6, r7
1000f37e:	d932      	bls.n	1000f3e6 <db_addATT+0x96>
1000f380:	4668      	mov	r0, sp
1000f382:	8880      	ldrh	r0, [r0, #4]
1000f384:	3b0c      	subs	r3, #12
1000f386:	8018      	strh	r0, [r3, #0]
1000f388:	6823      	ldr	r3, [r4, #0]
1000f38a:	2900      	cmp	r1, #0
1000f38c:	d009      	beq.n	1000f3a2 <db_addATT+0x52>
1000f38e:	2a00      	cmp	r2, #0
1000f390:	d007      	beq.n	1000f3a2 <db_addATT+0x52>
1000f392:	4660      	mov	r0, ip
1000f394:	6800      	ldr	r0, [r0, #0]
1000f396:	809a      	strh	r2, [r3, #4]
1000f398:	1a80      	subs	r0, r0, r2
1000f39a:	6098      	str	r0, [r3, #8]
1000f39c:	4b18      	ldr	r3, [pc, #96]	; (1000f400 <db_addATT+0xb0>)
1000f39e:	4798      	blx	r3
1000f3a0:	e002      	b.n	1000f3a8 <db_addATT+0x58>
1000f3a2:	2100      	movs	r1, #0
1000f3a4:	809a      	strh	r2, [r3, #4]
1000f3a6:	6099      	str	r1, [r3, #8]
1000f3a8:	2300      	movs	r3, #0
1000f3aa:	6822      	ldr	r2, [r4, #0]
1000f3ac:	7093      	strb	r3, [r2, #2]
1000f3ae:	3303      	adds	r3, #3
1000f3b0:	402b      	ands	r3, r5
1000f3b2:	2b03      	cmp	r3, #3
1000f3b4:	d001      	beq.n	1000f3ba <db_addATT+0x6a>
1000f3b6:	076b      	lsls	r3, r5, #29
1000f3b8:	d504      	bpl.n	1000f3c4 <db_addATT+0x74>
1000f3ba:	2101      	movs	r1, #1
1000f3bc:	6822      	ldr	r2, [r4, #0]
1000f3be:	7893      	ldrb	r3, [r2, #2]
1000f3c0:	430b      	orrs	r3, r1
1000f3c2:	7093      	strb	r3, [r2, #2]
1000f3c4:	2330      	movs	r3, #48	; 0x30
1000f3c6:	402b      	ands	r3, r5
1000f3c8:	2b30      	cmp	r3, #48	; 0x30
1000f3ca:	d001      	beq.n	1000f3d0 <db_addATT+0x80>
1000f3cc:	066b      	lsls	r3, r5, #25
1000f3ce:	d504      	bpl.n	1000f3da <db_addATT+0x8a>
1000f3d0:	2102      	movs	r1, #2
1000f3d2:	6822      	ldr	r2, [r4, #0]
1000f3d4:	7893      	ldrb	r3, [r2, #2]
1000f3d6:	430b      	orrs	r3, r1
1000f3d8:	7093      	strb	r3, [r2, #2]
1000f3da:	4a0a      	ldr	r2, [pc, #40]	; (1000f404 <db_addATT+0xb4>)
1000f3dc:	2600      	movs	r6, #0
1000f3de:	6813      	ldr	r3, [r2, #0]
1000f3e0:	3301      	adds	r3, #1
1000f3e2:	6013      	str	r3, [r2, #0]
1000f3e4:	e005      	b.n	1000f3f2 <db_addATT+0xa2>
1000f3e6:	6023      	str	r3, [r4, #0]
1000f3e8:	2611      	movs	r6, #17
1000f3ea:	2900      	cmp	r1, #0
1000f3ec:	d001      	beq.n	1000f3f2 <db_addATT+0xa2>
1000f3ee:	1aba      	subs	r2, r7, r2
1000f3f0:	6002      	str	r2, [r0, #0]
1000f3f2:	1c30      	adds	r0, r6, #0
1000f3f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000f3f6:	46c0      	nop			; (mov r8, r8)
1000f3f8:	10019fc0 	.word	0x10019fc0
1000f3fc:	10019fc4 	.word	0x10019fc4
1000f400:	1001576f 	.word	0x1001576f
1000f404:	10019fc8 	.word	0x10019fc8

1000f408 <user_description_define>:
1000f408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000f40a:	1c05      	adds	r5, r0, #0
1000f40c:	20cf      	movs	r0, #207	; 0xcf
1000f40e:	2a00      	cmp	r2, #0
1000f410:	d01c      	beq.n	1000f44c <user_description_define+0x44>
1000f412:	1c14      	adds	r4, r2, #0
1000f414:	2203      	movs	r2, #3
1000f416:	1c1e      	adds	r6, r3, #0
1000f418:	400a      	ands	r2, r1
1000f41a:	1c0b      	adds	r3, r1, #0
1000f41c:	3a03      	subs	r2, #3
1000f41e:	4251      	negs	r1, r2
1000f420:	4151      	adcs	r1, r2
1000f422:	075a      	lsls	r2, r3, #29
1000f424:	0fd2      	lsrs	r2, r2, #31
1000f426:	430a      	orrs	r2, r1
1000f428:	03d2      	lsls	r2, r2, #15
1000f42a:	4f09      	ldr	r7, [pc, #36]	; (1000f450 <user_description_define+0x48>)
1000f42c:	1c28      	adds	r0, r5, #0
1000f42e:	2a00      	cmp	r2, #0
1000f430:	d003      	beq.n	1000f43a <user_description_define+0x32>
1000f432:	1c21      	adds	r1, r4, #0
1000f434:	1c32      	adds	r2, r6, #0
1000f436:	47b8      	blx	r7
1000f438:	e008      	b.n	1000f44c <user_description_define+0x44>
1000f43a:	1c11      	adds	r1, r2, #0
1000f43c:	47b8      	blx	r7
1000f43e:	2800      	cmp	r0, #0
1000f440:	d104      	bne.n	1000f44c <user_description_define+0x44>
1000f442:	1c28      	adds	r0, r5, #0
1000f444:	1c31      	adds	r1, r6, #0
1000f446:	1c22      	adds	r2, r4, #0
1000f448:	4b02      	ldr	r3, [pc, #8]	; (1000f454 <user_description_define+0x4c>)
1000f44a:	4798      	blx	r3
1000f44c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000f44e:	46c0      	nop			; (mov r8, r8)
1000f450:	1000f351 	.word	0x1000f351
1000f454:	100116b9 	.word	0x100116b9

1000f458 <at_ble_read_authorize_reply.part.1>:
1000f458:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000f45a:	4b09      	ldr	r3, [pc, #36]	; (1000f480 <at_ble_read_authorize_reply.part.1+0x28>)
1000f45c:	1c05      	adds	r5, r0, #0
1000f45e:	1c08      	adds	r0, r1, #0
1000f460:	1c0c      	adds	r4, r1, #0
1000f462:	4798      	blx	r3
1000f464:	2800      	cmp	r0, #0
1000f466:	d009      	beq.n	1000f47c <at_ble_read_authorize_reply.part.1+0x24>
1000f468:	6882      	ldr	r2, [r0, #8]
1000f46a:	2a00      	cmp	r2, #0
1000f46c:	d006      	beq.n	1000f47c <at_ble_read_authorize_reply.part.1+0x24>
1000f46e:	8883      	ldrh	r3, [r0, #4]
1000f470:	1c29      	adds	r1, r5, #0
1000f472:	9200      	str	r2, [sp, #0]
1000f474:	1c20      	adds	r0, r4, #0
1000f476:	2200      	movs	r2, #0
1000f478:	4c02      	ldr	r4, [pc, #8]	; (1000f484 <at_ble_read_authorize_reply.part.1+0x2c>)
1000f47a:	47a0      	blx	r4
1000f47c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000f47e:	46c0      	nop			; (mov r8, r8)
1000f480:	1000f1f1 	.word	0x1000f1f1
1000f484:	10011151 	.word	0x10011151

1000f488 <internal_at_ble_service_define>:
1000f488:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f48a:	b08b      	sub	sp, #44	; 0x2c
1000f48c:	9306      	str	r3, [sp, #24]
1000f48e:	ab10      	add	r3, sp, #64	; 0x40
1000f490:	9202      	str	r2, [sp, #8]
1000f492:	cb04      	ldmia	r3!, {r2}
1000f494:	1c05      	adds	r5, r0, #0
1000f496:	881b      	ldrh	r3, [r3, #0]
1000f498:	9105      	str	r1, [sp, #20]
1000f49a:	9303      	str	r3, [sp, #12]
1000f49c:	ab12      	add	r3, sp, #72	; 0x48
1000f49e:	781b      	ldrb	r3, [r3, #0]
1000f4a0:	20cf      	movs	r0, #207	; 0xcf
1000f4a2:	9304      	str	r3, [sp, #16]
1000f4a4:	2d00      	cmp	r5, #0
1000f4a6:	d100      	bne.n	1000f4aa <internal_at_ble_service_define+0x22>
1000f4a8:	e1ca      	b.n	1000f840 <internal_at_ble_service_define+0x3b8>
1000f4aa:	2900      	cmp	r1, #0
1000f4ac:	d100      	bne.n	1000f4b0 <internal_at_ble_service_define+0x28>
1000f4ae:	e1c7      	b.n	1000f840 <internal_at_ble_service_define+0x3b8>
1000f4b0:	2a00      	cmp	r2, #0
1000f4b2:	d100      	bne.n	1000f4b6 <internal_at_ble_service_define+0x2e>
1000f4b4:	e1c4      	b.n	1000f840 <internal_at_ble_service_define+0x3b8>
1000f4b6:	9b03      	ldr	r3, [sp, #12]
1000f4b8:	2b00      	cmp	r3, #0
1000f4ba:	d100      	bne.n	1000f4be <internal_at_ble_service_define+0x36>
1000f4bc:	e1c0      	b.n	1000f840 <internal_at_ble_service_define+0x3b8>
1000f4be:	4bc9      	ldr	r3, [pc, #804]	; (1000f7e4 <internal_at_ble_service_define+0x35c>)
1000f4c0:	3004      	adds	r0, #4
1000f4c2:	681e      	ldr	r6, [r3, #0]
1000f4c4:	2e00      	cmp	r6, #0
1000f4c6:	d100      	bne.n	1000f4ca <internal_at_ble_service_define+0x42>
1000f4c8:	e1ba      	b.n	1000f840 <internal_at_ble_service_define+0x3b8>
1000f4ca:	2400      	movs	r4, #0
1000f4cc:	4bc6      	ldr	r3, [pc, #792]	; (1000f7e8 <internal_at_ble_service_define+0x360>)
1000f4ce:	8034      	strh	r4, [r6, #0]
1000f4d0:	881b      	ldrh	r3, [r3, #0]
1000f4d2:	1db7      	adds	r7, r6, #6
1000f4d4:	1c21      	adds	r1, r4, #0
1000f4d6:	2210      	movs	r2, #16
1000f4d8:	8073      	strh	r3, [r6, #2]
1000f4da:	1c38      	adds	r0, r7, #0
1000f4dc:	4bc3      	ldr	r3, [pc, #780]	; (1000f7ec <internal_at_ble_service_define+0x364>)
1000f4de:	4798      	blx	r3
1000f4e0:	7828      	ldrb	r0, [r5, #0]
1000f4e2:	4bc3      	ldr	r3, [pc, #780]	; (1000f7f0 <internal_at_ble_service_define+0x368>)
1000f4e4:	4798      	blx	r3
1000f4e6:	1c69      	adds	r1, r5, #1
1000f4e8:	1c02      	adds	r2, r0, #0
1000f4ea:	4bc2      	ldr	r3, [pc, #776]	; (1000f7f4 <internal_at_ble_service_define+0x36c>)
1000f4ec:	1c38      	adds	r0, r7, #0
1000f4ee:	4798      	blx	r3
1000f4f0:	2204      	movs	r2, #4
1000f4f2:	782b      	ldrb	r3, [r5, #0]
1000f4f4:	9d02      	ldr	r5, [sp, #8]
1000f4f6:	011b      	lsls	r3, r3, #4
1000f4f8:	4313      	orrs	r3, r2
1000f4fa:	9a04      	ldr	r2, [sp, #16]
1000f4fc:	7174      	strb	r4, [r6, #5]
1000f4fe:	0192      	lsls	r2, r2, #6
1000f500:	4313      	orrs	r3, r2
1000f502:	7133      	strb	r3, [r6, #4]
1000f504:	2316      	movs	r3, #22
1000f506:	9a06      	ldr	r2, [sp, #24]
1000f508:	3512      	adds	r5, #18
1000f50a:	4353      	muls	r3, r2
1000f50c:	9a02      	ldr	r2, [sp, #8]
1000f50e:	3312      	adds	r3, #18
1000f510:	18d7      	adds	r7, r2, r3
1000f512:	42bd      	cmp	r5, r7
1000f514:	d00f      	beq.n	1000f536 <internal_at_ble_service_define+0xae>
1000f516:	4bb8      	ldr	r3, [pc, #736]	; (1000f7f8 <internal_at_ble_service_define+0x370>)
1000f518:	8829      	ldrh	r1, [r5, #0]
1000f51a:	9300      	str	r3, [sp, #0]
1000f51c:	230e      	movs	r3, #14
1000f51e:	aa06      	add	r2, sp, #24
1000f520:	189b      	adds	r3, r3, r2
1000f522:	9301      	str	r3, [sp, #4]
1000f524:	4cb5      	ldr	r4, [pc, #724]	; (1000f7fc <internal_at_ble_service_define+0x374>)
1000f526:	1c30      	adds	r0, r6, #0
1000f528:	2201      	movs	r2, #1
1000f52a:	2302      	movs	r3, #2
1000f52c:	47a0      	blx	r4
1000f52e:	3516      	adds	r5, #22
1000f530:	1e04      	subs	r4, r0, #0
1000f532:	d0ee      	beq.n	1000f512 <internal_at_ble_service_define+0x8a>
1000f534:	e183      	b.n	1000f83e <internal_at_ble_service_define+0x3b6>
1000f536:	9f10      	ldr	r7, [sp, #64]	; 0x40
1000f538:	2300      	movs	r3, #0
1000f53a:	3714      	adds	r7, #20
1000f53c:	1c3d      	adds	r5, r7, #0
1000f53e:	9302      	str	r3, [sp, #8]
1000f540:	9b02      	ldr	r3, [sp, #8]
1000f542:	9a03      	ldr	r2, [sp, #12]
1000f544:	4293      	cmp	r3, r2
1000f546:	db00      	blt.n	1000f54a <internal_at_ble_service_define+0xc2>
1000f548:	e0bf      	b.n	1000f6ca <internal_at_ble_service_define+0x242>
1000f54a:	4bad      	ldr	r3, [pc, #692]	; (1000f800 <internal_at_ble_service_define+0x378>)
1000f54c:	aa06      	add	r2, sp, #24
1000f54e:	9300      	str	r3, [sp, #0]
1000f550:	230e      	movs	r3, #14
1000f552:	189b      	adds	r3, r3, r2
1000f554:	9301      	str	r3, [sp, #4]
1000f556:	4ca9      	ldr	r4, [pc, #676]	; (1000f7fc <internal_at_ble_service_define+0x374>)
1000f558:	1c30      	adds	r0, r6, #0
1000f55a:	2104      	movs	r1, #4
1000f55c:	2201      	movs	r2, #1
1000f55e:	2302      	movs	r3, #2
1000f560:	47a0      	blx	r4
1000f562:	1e04      	subs	r4, r0, #0
1000f564:	d000      	beq.n	1000f568 <internal_at_ble_service_define+0xe0>
1000f566:	e16a      	b.n	1000f83e <internal_at_ble_service_define+0x3b6>
1000f568:	1c2b      	adds	r3, r5, #0
1000f56a:	3b12      	subs	r3, #18
1000f56c:	7b2c      	ldrb	r4, [r5, #12]
1000f56e:	781b      	ldrb	r3, [r3, #0]
1000f570:	1c21      	adds	r1, r4, #0
1000f572:	1c1a      	adds	r2, r3, #0
1000f574:	9304      	str	r3, [sp, #16]
1000f576:	8828      	ldrh	r0, [r5, #0]
1000f578:	4ba2      	ldr	r3, [pc, #648]	; (1000f804 <internal_at_ble_service_define+0x37c>)
1000f57a:	4798      	blx	r3
1000f57c:	2303      	movs	r3, #3
1000f57e:	4023      	ands	r3, r4
1000f580:	3b03      	subs	r3, #3
1000f582:	4259      	negs	r1, r3
1000f584:	4159      	adcs	r1, r3
1000f586:	2301      	movs	r3, #1
1000f588:	08a4      	lsrs	r4, r4, #2
1000f58a:	401c      	ands	r4, r3
1000f58c:	430c      	orrs	r4, r1
1000f58e:	896b      	ldrh	r3, [r5, #10]
1000f590:	03e4      	lsls	r4, r4, #15
1000f592:	431c      	orrs	r4, r3
1000f594:	9007      	str	r0, [sp, #28]
1000f596:	4b96      	ldr	r3, [pc, #600]	; (1000f7f0 <internal_at_ble_service_define+0x368>)
1000f598:	9804      	ldr	r0, [sp, #16]
1000f59a:	4798      	blx	r3
1000f59c:	1c2a      	adds	r2, r5, #0
1000f59e:	3a11      	subs	r2, #17
1000f5a0:	9200      	str	r2, [sp, #0]
1000f5a2:	3a03      	subs	r2, #3
1000f5a4:	1c03      	adds	r3, r0, #0
1000f5a6:	9201      	str	r2, [sp, #4]
1000f5a8:	1c21      	adds	r1, r4, #0
1000f5aa:	1c30      	adds	r0, r6, #0
1000f5ac:	4c93      	ldr	r4, [pc, #588]	; (1000f7fc <internal_at_ble_service_define+0x374>)
1000f5ae:	9a07      	ldr	r2, [sp, #28]
1000f5b0:	47a0      	blx	r4
1000f5b2:	1e04      	subs	r4, r0, #0
1000f5b4:	d000      	beq.n	1000f5b8 <internal_at_ble_service_define+0x130>
1000f5b6:	e142      	b.n	1000f83e <internal_at_ble_service_define+0x3b6>
1000f5b8:	22c0      	movs	r2, #192	; 0xc0
1000f5ba:	882b      	ldrh	r3, [r5, #0]
1000f5bc:	0052      	lsls	r2, r2, #1
1000f5be:	4213      	tst	r3, r2
1000f5c0:	d104      	bne.n	1000f5cc <internal_at_ble_service_define+0x144>
1000f5c2:	8aab      	ldrh	r3, [r5, #20]
1000f5c4:	9304      	str	r3, [sp, #16]
1000f5c6:	2b00      	cmp	r3, #0
1000f5c8:	d116      	bne.n	1000f5f8 <internal_at_ble_service_define+0x170>
1000f5ca:	e03a      	b.n	1000f642 <internal_at_ble_service_define+0x1ba>
1000f5cc:	2201      	movs	r2, #1
1000f5ce:	09d9      	lsrs	r1, r3, #7
1000f5d0:	4011      	ands	r1, r2
1000f5d2:	05db      	lsls	r3, r3, #23
1000f5d4:	d501      	bpl.n	1000f5da <internal_at_ble_service_define+0x152>
1000f5d6:	2302      	movs	r3, #2
1000f5d8:	4319      	orrs	r1, r3
1000f5da:	4b8b      	ldr	r3, [pc, #556]	; (1000f808 <internal_at_ble_service_define+0x380>)
1000f5dc:	aa06      	add	r2, sp, #24
1000f5de:	9300      	str	r3, [sp, #0]
1000f5e0:	230e      	movs	r3, #14
1000f5e2:	189b      	adds	r3, r3, r2
1000f5e4:	9301      	str	r3, [sp, #4]
1000f5e6:	4c85      	ldr	r4, [pc, #532]	; (1000f7fc <internal_at_ble_service_define+0x374>)
1000f5e8:	0209      	lsls	r1, r1, #8
1000f5ea:	1c30      	adds	r0, r6, #0
1000f5ec:	2201      	movs	r2, #1
1000f5ee:	2302      	movs	r3, #2
1000f5f0:	47a0      	blx	r4
1000f5f2:	1e04      	subs	r4, r0, #0
1000f5f4:	d0e5      	beq.n	1000f5c2 <internal_at_ble_service_define+0x13a>
1000f5f6:	e122      	b.n	1000f83e <internal_at_ble_service_define+0x3b6>
1000f5f8:	2380      	movs	r3, #128	; 0x80
1000f5fa:	882a      	ldrh	r2, [r5, #0]
1000f5fc:	7f2c      	ldrb	r4, [r5, #28]
1000f5fe:	005b      	lsls	r3, r3, #1
1000f600:	401a      	ands	r2, r3
1000f602:	1c20      	adds	r0, r4, #0
1000f604:	2101      	movs	r1, #1
1000f606:	2a00      	cmp	r2, #0
1000f608:	d000      	beq.n	1000f60c <internal_at_ble_service_define+0x184>
1000f60a:	1c0a      	adds	r2, r1, #0
1000f60c:	4b7f      	ldr	r3, [pc, #508]	; (1000f80c <internal_at_ble_service_define+0x384>)
1000f60e:	4798      	blx	r3
1000f610:	2203      	movs	r2, #3
1000f612:	4022      	ands	r2, r4
1000f614:	3a03      	subs	r2, #3
1000f616:	4251      	negs	r1, r2
1000f618:	4151      	adcs	r1, r2
1000f61a:	4b7d      	ldr	r3, [pc, #500]	; (1000f810 <internal_at_ble_service_define+0x388>)
1000f61c:	1c0a      	adds	r2, r1, #0
1000f61e:	9300      	str	r3, [sp, #0]
1000f620:	1c2b      	adds	r3, r5, #0
1000f622:	0764      	lsls	r4, r4, #29
1000f624:	0fe4      	lsrs	r4, r4, #31
1000f626:	4322      	orrs	r2, r4
1000f628:	03d2      	lsls	r2, r2, #15
1000f62a:	4310      	orrs	r0, r2
1000f62c:	3320      	adds	r3, #32
1000f62e:	b282      	uxth	r2, r0
1000f630:	9301      	str	r3, [sp, #4]
1000f632:	4c72      	ldr	r4, [pc, #456]	; (1000f7fc <internal_at_ble_service_define+0x374>)
1000f634:	1c30      	adds	r0, r6, #0
1000f636:	9904      	ldr	r1, [sp, #16]
1000f638:	2302      	movs	r3, #2
1000f63a:	47a0      	blx	r4
1000f63c:	1e04      	subs	r4, r0, #0
1000f63e:	d000      	beq.n	1000f642 <internal_at_ble_service_define+0x1ba>
1000f640:	e0fd      	b.n	1000f83e <internal_at_ble_service_define+0x3b6>
1000f642:	2101      	movs	r1, #1
1000f644:	882b      	ldrh	r3, [r5, #0]
1000f646:	420b      	tst	r3, r1
1000f648:	d011      	beq.n	1000f66e <internal_at_ble_service_define+0x1e6>
1000f64a:	7fa8      	ldrb	r0, [r5, #30]
1000f64c:	4b6f      	ldr	r3, [pc, #444]	; (1000f80c <internal_at_ble_service_define+0x384>)
1000f64e:	2200      	movs	r2, #0
1000f650:	4798      	blx	r3
1000f652:	4b70      	ldr	r3, [pc, #448]	; (1000f814 <internal_at_ble_service_define+0x38c>)
1000f654:	1c02      	adds	r2, r0, #0
1000f656:	9300      	str	r3, [sp, #0]
1000f658:	1c2b      	adds	r3, r5, #0
1000f65a:	3324      	adds	r3, #36	; 0x24
1000f65c:	9301      	str	r3, [sp, #4]
1000f65e:	4c67      	ldr	r4, [pc, #412]	; (1000f7fc <internal_at_ble_service_define+0x374>)
1000f660:	1c30      	adds	r0, r6, #0
1000f662:	496d      	ldr	r1, [pc, #436]	; (1000f818 <internal_at_ble_service_define+0x390>)
1000f664:	2302      	movs	r3, #2
1000f666:	47a0      	blx	r4
1000f668:	1e04      	subs	r4, r0, #0
1000f66a:	d000      	beq.n	1000f66e <internal_at_ble_service_define+0x1e6>
1000f66c:	e0e7      	b.n	1000f83e <internal_at_ble_service_define+0x3b6>
1000f66e:	2330      	movs	r3, #48	; 0x30
1000f670:	882a      	ldrh	r2, [r5, #0]
1000f672:	421a      	tst	r2, r3
1000f674:	d012      	beq.n	1000f69c <internal_at_ble_service_define+0x214>
1000f676:	2101      	movs	r1, #1
1000f678:	7f68      	ldrb	r0, [r5, #29]
1000f67a:	1c0a      	adds	r2, r1, #0
1000f67c:	4b63      	ldr	r3, [pc, #396]	; (1000f80c <internal_at_ble_service_define+0x384>)
1000f67e:	4798      	blx	r3
1000f680:	4b66      	ldr	r3, [pc, #408]	; (1000f81c <internal_at_ble_service_define+0x394>)
1000f682:	1c02      	adds	r2, r0, #0
1000f684:	9300      	str	r3, [sp, #0]
1000f686:	1c2b      	adds	r3, r5, #0
1000f688:	3322      	adds	r3, #34	; 0x22
1000f68a:	9301      	str	r3, [sp, #4]
1000f68c:	4c5b      	ldr	r4, [pc, #364]	; (1000f7fc <internal_at_ble_service_define+0x374>)
1000f68e:	1c30      	adds	r0, r6, #0
1000f690:	4961      	ldr	r1, [pc, #388]	; (1000f818 <internal_at_ble_service_define+0x390>)
1000f692:	2302      	movs	r3, #2
1000f694:	47a0      	blx	r4
1000f696:	1e04      	subs	r4, r0, #0
1000f698:	d000      	beq.n	1000f69c <internal_at_ble_service_define+0x214>
1000f69a:	e0d0      	b.n	1000f83e <internal_at_ble_service_define+0x3b6>
1000f69c:	69ab      	ldr	r3, [r5, #24]
1000f69e:	2b00      	cmp	r3, #0
1000f6a0:	d00e      	beq.n	1000f6c0 <internal_at_ble_service_define+0x238>
1000f6a2:	4b5f      	ldr	r3, [pc, #380]	; (1000f820 <internal_at_ble_service_define+0x398>)
1000f6a4:	aa06      	add	r2, sp, #24
1000f6a6:	9300      	str	r3, [sp, #0]
1000f6a8:	230e      	movs	r3, #14
1000f6aa:	189b      	adds	r3, r3, r2
1000f6ac:	9301      	str	r3, [sp, #4]
1000f6ae:	4c53      	ldr	r4, [pc, #332]	; (1000f7fc <internal_at_ble_service_define+0x374>)
1000f6b0:	1c30      	adds	r0, r6, #0
1000f6b2:	2107      	movs	r1, #7
1000f6b4:	2201      	movs	r2, #1
1000f6b6:	2302      	movs	r3, #2
1000f6b8:	47a0      	blx	r4
1000f6ba:	1e04      	subs	r4, r0, #0
1000f6bc:	d000      	beq.n	1000f6c0 <internal_at_ble_service_define+0x238>
1000f6be:	e0be      	b.n	1000f83e <internal_at_ble_service_define+0x3b6>
1000f6c0:	9b02      	ldr	r3, [sp, #8]
1000f6c2:	353c      	adds	r5, #60	; 0x3c
1000f6c4:	3301      	adds	r3, #1
1000f6c6:	9302      	str	r3, [sp, #8]
1000f6c8:	e73a      	b.n	1000f540 <internal_at_ble_service_define+0xb8>
1000f6ca:	1c30      	adds	r0, r6, #0
1000f6cc:	4b55      	ldr	r3, [pc, #340]	; (1000f824 <internal_at_ble_service_define+0x39c>)
1000f6ce:	4798      	blx	r3
1000f6d0:	1e04      	subs	r4, r0, #0
1000f6d2:	d000      	beq.n	1000f6d6 <internal_at_ble_service_define+0x24e>
1000f6d4:	e0b3      	b.n	1000f83e <internal_at_ble_service_define+0x3b6>
1000f6d6:	8833      	ldrh	r3, [r6, #0]
1000f6d8:	9a05      	ldr	r2, [sp, #20]
1000f6da:	8013      	strh	r3, [r2, #0]
1000f6dc:	8836      	ldrh	r6, [r6, #0]
1000f6de:	9b06      	ldr	r3, [sp, #24]
1000f6e0:	9a03      	ldr	r2, [sp, #12]
1000f6e2:	18f6      	adds	r6, r6, r3
1000f6e4:	b2b3      	uxth	r3, r6
1000f6e6:	9302      	str	r3, [sp, #8]
1000f6e8:	233c      	movs	r3, #60	; 0x3c
1000f6ea:	4353      	muls	r3, r2
1000f6ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
1000f6ee:	3314      	adds	r3, #20
1000f6f0:	18d3      	adds	r3, r2, r3
1000f6f2:	9304      	str	r3, [sp, #16]
1000f6f4:	9b04      	ldr	r3, [sp, #16]
1000f6f6:	429f      	cmp	r7, r3
1000f6f8:	d100      	bne.n	1000f6fc <internal_at_ble_service_define+0x274>
1000f6fa:	e0a0      	b.n	1000f83e <internal_at_ble_service_define+0x3b6>
1000f6fc:	9b02      	ldr	r3, [sp, #8]
1000f6fe:	1c9d      	adds	r5, r3, #2
1000f700:	1c3b      	adds	r3, r7, #0
1000f702:	b2ad      	uxth	r5, r5
1000f704:	3b14      	subs	r3, #20
1000f706:	801d      	strh	r5, [r3, #0]
1000f708:	9303      	str	r3, [sp, #12]
1000f70a:	893b      	ldrh	r3, [r7, #8]
1000f70c:	2b00      	cmp	r3, #0
1000f70e:	d108      	bne.n	1000f722 <internal_at_ble_service_define+0x29a>
1000f710:	23c0      	movs	r3, #192	; 0xc0
1000f712:	883a      	ldrh	r2, [r7, #0]
1000f714:	005b      	lsls	r3, r3, #1
1000f716:	421a      	tst	r2, r3
1000f718:	d026      	beq.n	1000f768 <internal_at_ble_service_define+0x2e0>
1000f71a:	9e02      	ldr	r6, [sp, #8]
1000f71c:	3603      	adds	r6, #3
1000f71e:	b2b5      	uxth	r5, r6
1000f720:	e022      	b.n	1000f768 <internal_at_ble_service_define+0x2e0>
1000f722:	2103      	movs	r1, #3
1000f724:	7b3b      	ldrb	r3, [r7, #12]
1000f726:	4019      	ands	r1, r3
1000f728:	3903      	subs	r1, #3
1000f72a:	424a      	negs	r2, r1
1000f72c:	414a      	adcs	r2, r1
1000f72e:	0759      	lsls	r1, r3, #29
1000f730:	0fc9      	lsrs	r1, r1, #31
1000f732:	4311      	orrs	r1, r2
1000f734:	03c9      	lsls	r1, r1, #15
1000f736:	897a      	ldrh	r2, [r7, #10]
1000f738:	2900      	cmp	r1, #0
1000f73a:	d007      	beq.n	1000f74c <internal_at_ble_service_define+0x2c4>
1000f73c:	6879      	ldr	r1, [r7, #4]
1000f73e:	2900      	cmp	r1, #0
1000f740:	d100      	bne.n	1000f744 <internal_at_ble_service_define+0x2bc>
1000f742:	4939      	ldr	r1, [pc, #228]	; (1000f828 <internal_at_ble_service_define+0x3a0>)
1000f744:	1c28      	adds	r0, r5, #0
1000f746:	4e39      	ldr	r6, [pc, #228]	; (1000f82c <internal_at_ble_service_define+0x3a4>)
1000f748:	47b0      	blx	r6
1000f74a:	e00a      	b.n	1000f762 <internal_at_ble_service_define+0x2da>
1000f74c:	1c28      	adds	r0, r5, #0
1000f74e:	4e37      	ldr	r6, [pc, #220]	; (1000f82c <internal_at_ble_service_define+0x3a4>)
1000f750:	47b0      	blx	r6
1000f752:	2800      	cmp	r0, #0
1000f754:	d172      	bne.n	1000f83c <internal_at_ble_service_define+0x3b4>
1000f756:	9b03      	ldr	r3, [sp, #12]
1000f758:	8939      	ldrh	r1, [r7, #8]
1000f75a:	8818      	ldrh	r0, [r3, #0]
1000f75c:	687a      	ldr	r2, [r7, #4]
1000f75e:	4b34      	ldr	r3, [pc, #208]	; (1000f830 <internal_at_ble_service_define+0x3a8>)
1000f760:	4798      	blx	r3
1000f762:	2800      	cmp	r0, #0
1000f764:	d0d4      	beq.n	1000f710 <internal_at_ble_service_define+0x288>
1000f766:	e069      	b.n	1000f83c <internal_at_ble_service_define+0x3b4>
1000f768:	8abb      	ldrh	r3, [r7, #20]
1000f76a:	2b00      	cmp	r3, #0
1000f76c:	d00a      	beq.n	1000f784 <internal_at_ble_service_define+0x2fc>
1000f76e:	3501      	adds	r5, #1
1000f770:	b2ad      	uxth	r5, r5
1000f772:	843d      	strh	r5, [r7, #32]
1000f774:	7f39      	ldrb	r1, [r7, #28]
1000f776:	8afb      	ldrh	r3, [r7, #22]
1000f778:	1c28      	adds	r0, r5, #0
1000f77a:	693a      	ldr	r2, [r7, #16]
1000f77c:	4e2d      	ldr	r6, [pc, #180]	; (1000f834 <internal_at_ble_service_define+0x3ac>)
1000f77e:	47b0      	blx	r6
1000f780:	2800      	cmp	r0, #0
1000f782:	d15b      	bne.n	1000f83c <internal_at_ble_service_define+0x3b4>
1000f784:	883b      	ldrh	r3, [r7, #0]
1000f786:	07db      	lsls	r3, r3, #31
1000f788:	d50d      	bpl.n	1000f7a6 <internal_at_ble_service_define+0x31e>
1000f78a:	2200      	movs	r2, #0
1000f78c:	3501      	adds	r5, #1
1000f78e:	b2ad      	uxth	r5, r5
1000f790:	a909      	add	r1, sp, #36	; 0x24
1000f792:	84bd      	strh	r5, [r7, #36]	; 0x24
1000f794:	7fbb      	ldrb	r3, [r7, #30]
1000f796:	1c28      	adds	r0, r5, #0
1000f798:	700a      	strb	r2, [r1, #0]
1000f79a:	704a      	strb	r2, [r1, #1]
1000f79c:	4e23      	ldr	r6, [pc, #140]	; (1000f82c <internal_at_ble_service_define+0x3a4>)
1000f79e:	3202      	adds	r2, #2
1000f7a0:	47b0      	blx	r6
1000f7a2:	2800      	cmp	r0, #0
1000f7a4:	d14a      	bne.n	1000f83c <internal_at_ble_service_define+0x3b4>
1000f7a6:	2330      	movs	r3, #48	; 0x30
1000f7a8:	883a      	ldrh	r2, [r7, #0]
1000f7aa:	421a      	tst	r2, r3
1000f7ac:	d00d      	beq.n	1000f7ca <internal_at_ble_service_define+0x342>
1000f7ae:	2200      	movs	r2, #0
1000f7b0:	3501      	adds	r5, #1
1000f7b2:	b2ad      	uxth	r5, r5
1000f7b4:	a909      	add	r1, sp, #36	; 0x24
1000f7b6:	847d      	strh	r5, [r7, #34]	; 0x22
1000f7b8:	7f7b      	ldrb	r3, [r7, #29]
1000f7ba:	1c28      	adds	r0, r5, #0
1000f7bc:	700a      	strb	r2, [r1, #0]
1000f7be:	704a      	strb	r2, [r1, #1]
1000f7c0:	4e1a      	ldr	r6, [pc, #104]	; (1000f82c <internal_at_ble_service_define+0x3a4>)
1000f7c2:	3202      	adds	r2, #2
1000f7c4:	47b0      	blx	r6
1000f7c6:	2800      	cmp	r0, #0
1000f7c8:	d138      	bne.n	1000f83c <internal_at_ble_service_define+0x3b4>
1000f7ca:	69b9      	ldr	r1, [r7, #24]
1000f7cc:	2900      	cmp	r1, #0
1000f7ce:	d006      	beq.n	1000f7de <internal_at_ble_service_define+0x356>
1000f7d0:	3501      	adds	r5, #1
1000f7d2:	b2ad      	uxth	r5, r5
1000f7d4:	1c28      	adds	r0, r5, #0
1000f7d6:	4b18      	ldr	r3, [pc, #96]	; (1000f838 <internal_at_ble_service_define+0x3b0>)
1000f7d8:	4798      	blx	r3
1000f7da:	2800      	cmp	r0, #0
1000f7dc:	d12e      	bne.n	1000f83c <internal_at_ble_service_define+0x3b4>
1000f7de:	373c      	adds	r7, #60	; 0x3c
1000f7e0:	9502      	str	r5, [sp, #8]
1000f7e2:	e787      	b.n	1000f6f4 <internal_at_ble_service_define+0x26c>
1000f7e4:	10019fd0 	.word	0x10019fd0
1000f7e8:	1001af20 	.word	0x1001af20
1000f7ec:	10015781 	.word	0x10015781
1000f7f0:	1000f1bd 	.word	0x1000f1bd
1000f7f4:	1001576f 	.word	0x1001576f
1000f7f8:	1001831a 	.word	0x1001831a
1000f7fc:	10011649 	.word	0x10011649
1000f800:	1001831c 	.word	0x1001831c
1000f804:	1000f289 	.word	0x1000f289
1000f808:	10018318 	.word	0x10018318
1000f80c:	1000f231 	.word	0x1000f231
1000f810:	10018314 	.word	0x10018314
1000f814:	10018316 	.word	0x10018316
1000f818:	00008002 	.word	0x00008002
1000f81c:	10018310 	.word	0x10018310
1000f820:	10018312 	.word	0x10018312
1000f824:	1001153d 	.word	0x1001153d
1000f828:	10019fbc 	.word	0x10019fbc
1000f82c:	1000f351 	.word	0x1000f351
1000f830:	100116b9 	.word	0x100116b9
1000f834:	1000f409 	.word	0x1000f409
1000f838:	1000f325 	.word	0x1000f325
1000f83c:	1c04      	adds	r4, r0, #0
1000f83e:	1c20      	adds	r0, r4, #0
1000f840:	b00b      	add	sp, #44	; 0x2c
1000f842:	bdf0      	pop	{r4, r5, r6, r7, pc}

1000f844 <initi_gatt_server_module>:
1000f844:	2300      	movs	r3, #0
1000f846:	4a07      	ldr	r2, [pc, #28]	; (1000f864 <initi_gatt_server_module+0x20>)
1000f848:	7013      	strb	r3, [r2, #0]
1000f84a:	4a07      	ldr	r2, [pc, #28]	; (1000f868 <initi_gatt_server_module+0x24>)
1000f84c:	6013      	str	r3, [r2, #0]
1000f84e:	4a07      	ldr	r2, [pc, #28]	; (1000f86c <initi_gatt_server_module+0x28>)
1000f850:	6013      	str	r3, [r2, #0]
1000f852:	4a07      	ldr	r2, [pc, #28]	; (1000f870 <initi_gatt_server_module+0x2c>)
1000f854:	6013      	str	r3, [r2, #0]
1000f856:	4a07      	ldr	r2, [pc, #28]	; (1000f874 <initi_gatt_server_module+0x30>)
1000f858:	6013      	str	r3, [r2, #0]
1000f85a:	4a07      	ldr	r2, [pc, #28]	; (1000f878 <initi_gatt_server_module+0x34>)
1000f85c:	6013      	str	r3, [r2, #0]
1000f85e:	4a07      	ldr	r2, [pc, #28]	; (1000f87c <initi_gatt_server_module+0x38>)
1000f860:	6013      	str	r3, [r2, #0]
1000f862:	4770      	bx	lr
1000f864:	10019fbc 	.word	0x10019fbc
1000f868:	10019fcc 	.word	0x10019fcc
1000f86c:	10019fc8 	.word	0x10019fc8
1000f870:	10019fb8 	.word	0x10019fb8
1000f874:	10019fc4 	.word	0x10019fc4
1000f878:	10019fc0 	.word	0x10019fc0
1000f87c:	10019fd0 	.word	0x10019fd0

1000f880 <db_init>:
1000f880:	4b0a      	ldr	r3, [pc, #40]	; (1000f8ac <db_init+0x2c>)
1000f882:	4a0b      	ldr	r2, [pc, #44]	; (1000f8b0 <db_init+0x30>)
1000f884:	6018      	str	r0, [r3, #0]
1000f886:	084b      	lsrs	r3, r1, #1
1000f888:	6013      	str	r3, [r2, #0]
1000f88a:	4a0a      	ldr	r2, [pc, #40]	; (1000f8b4 <db_init+0x34>)
1000f88c:	18c3      	adds	r3, r0, r3
1000f88e:	6013      	str	r3, [r2, #0]
1000f890:	4a09      	ldr	r2, [pc, #36]	; (1000f8b8 <db_init+0x38>)
1000f892:	1841      	adds	r1, r0, r1
1000f894:	6013      	str	r3, [r2, #0]
1000f896:	2303      	movs	r3, #3
1000f898:	2200      	movs	r2, #0
1000f89a:	3103      	adds	r1, #3
1000f89c:	4399      	bics	r1, r3
1000f89e:	4b07      	ldr	r3, [pc, #28]	; (1000f8bc <db_init+0x3c>)
1000f8a0:	3904      	subs	r1, #4
1000f8a2:	6019      	str	r1, [r3, #0]
1000f8a4:	4b06      	ldr	r3, [pc, #24]	; (1000f8c0 <db_init+0x40>)
1000f8a6:	601a      	str	r2, [r3, #0]
1000f8a8:	4770      	bx	lr
1000f8aa:	46c0      	nop			; (mov r8, r8)
1000f8ac:	10019fd0 	.word	0x10019fd0
1000f8b0:	10019fcc 	.word	0x10019fcc
1000f8b4:	10019fb8 	.word	0x10019fb8
1000f8b8:	10019fc4 	.word	0x10019fc4
1000f8bc:	10019fc0 	.word	0x10019fc0
1000f8c0:	10019fc8 	.word	0x10019fc8

1000f8c4 <at_ble_primary_service_define>:
1000f8c4:	b530      	push	{r4, r5, lr}
1000f8c6:	b085      	sub	sp, #20
1000f8c8:	ac08      	add	r4, sp, #32
1000f8ca:	cc20      	ldmia	r4!, {r5}
1000f8cc:	8824      	ldrh	r4, [r4, #0]
1000f8ce:	9500      	str	r5, [sp, #0]
1000f8d0:	9401      	str	r4, [sp, #4]
1000f8d2:	2401      	movs	r4, #1
1000f8d4:	9402      	str	r4, [sp, #8]
1000f8d6:	4c02      	ldr	r4, [pc, #8]	; (1000f8e0 <at_ble_primary_service_define+0x1c>)
1000f8d8:	47a0      	blx	r4
1000f8da:	b005      	add	sp, #20
1000f8dc:	bd30      	pop	{r4, r5, pc}
1000f8de:	46c0      	nop			; (mov r8, r8)
1000f8e0:	1000f489 	.word	0x1000f489

1000f8e4 <at_ble_characteristic_value_set>:
1000f8e4:	b570      	push	{r4, r5, r6, lr}
1000f8e6:	4b0b      	ldr	r3, [pc, #44]	; (1000f914 <at_ble_characteristic_value_set+0x30>)
1000f8e8:	1c06      	adds	r6, r0, #0
1000f8ea:	1c0c      	adds	r4, r1, #0
1000f8ec:	1c15      	adds	r5, r2, #0
1000f8ee:	4798      	blx	r3
1000f8f0:	2800      	cmp	r0, #0
1000f8f2:	d008      	beq.n	1000f906 <at_ble_characteristic_value_set+0x22>
1000f8f4:	6880      	ldr	r0, [r0, #8]
1000f8f6:	2800      	cmp	r0, #0
1000f8f8:	d005      	beq.n	1000f906 <at_ble_characteristic_value_set+0x22>
1000f8fa:	1c21      	adds	r1, r4, #0
1000f8fc:	1c2a      	adds	r2, r5, #0
1000f8fe:	4b06      	ldr	r3, [pc, #24]	; (1000f918 <at_ble_characteristic_value_set+0x34>)
1000f900:	4798      	blx	r3
1000f902:	2000      	movs	r0, #0
1000f904:	e004      	b.n	1000f910 <at_ble_characteristic_value_set+0x2c>
1000f906:	1c30      	adds	r0, r6, #0
1000f908:	1c29      	adds	r1, r5, #0
1000f90a:	1c22      	adds	r2, r4, #0
1000f90c:	4b03      	ldr	r3, [pc, #12]	; (1000f91c <at_ble_characteristic_value_set+0x38>)
1000f90e:	4798      	blx	r3
1000f910:	bd70      	pop	{r4, r5, r6, pc}
1000f912:	46c0      	nop			; (mov r8, r8)
1000f914:	1000f1f1 	.word	0x1000f1f1
1000f918:	1001576f 	.word	0x1001576f
1000f91c:	100116b9 	.word	0x100116b9

1000f920 <at_ble_characteristic_value_get>:
1000f920:	b570      	push	{r4, r5, r6, lr}
1000f922:	4b0c      	ldr	r3, [pc, #48]	; (1000f954 <at_ble_characteristic_value_get+0x34>)
1000f924:	1c06      	adds	r6, r0, #0
1000f926:	1c0c      	adds	r4, r1, #0
1000f928:	1c15      	adds	r5, r2, #0
1000f92a:	4798      	blx	r3
1000f92c:	2800      	cmp	r0, #0
1000f92e:	d00b      	beq.n	1000f948 <at_ble_characteristic_value_get+0x28>
1000f930:	6883      	ldr	r3, [r0, #8]
1000f932:	2b00      	cmp	r3, #0
1000f934:	d008      	beq.n	1000f948 <at_ble_characteristic_value_get+0x28>
1000f936:	8883      	ldrh	r3, [r0, #4]
1000f938:	802b      	strh	r3, [r5, #0]
1000f93a:	8882      	ldrh	r2, [r0, #4]
1000f93c:	6881      	ldr	r1, [r0, #8]
1000f93e:	4b06      	ldr	r3, [pc, #24]	; (1000f958 <at_ble_characteristic_value_get+0x38>)
1000f940:	1c20      	adds	r0, r4, #0
1000f942:	4798      	blx	r3
1000f944:	2000      	movs	r0, #0
1000f946:	e004      	b.n	1000f952 <at_ble_characteristic_value_get+0x32>
1000f948:	1c30      	adds	r0, r6, #0
1000f94a:	1c29      	adds	r1, r5, #0
1000f94c:	1c22      	adds	r2, r4, #0
1000f94e:	4b03      	ldr	r3, [pc, #12]	; (1000f95c <at_ble_characteristic_value_get+0x3c>)
1000f950:	4798      	blx	r3
1000f952:	bd70      	pop	{r4, r5, r6, pc}
1000f954:	1000f1f1 	.word	0x1000f1f1
1000f958:	1001576f 	.word	0x1001576f
1000f95c:	10011745 	.word	0x10011745

1000f960 <at_ble_write_authorize_reply>:
1000f960:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f962:	b085      	sub	sp, #20
1000f964:	1c04      	adds	r4, r0, #0
1000f966:	9101      	str	r1, [sp, #4]
1000f968:	2900      	cmp	r1, #0
1000f96a:	d128      	bne.n	1000f9be <at_ble_write_authorize_reply+0x5e>
1000f96c:	8843      	ldrh	r3, [r0, #2]
1000f96e:	1c27      	adds	r7, r4, #0
1000f970:	9300      	str	r3, [sp, #0]
1000f972:	1c18      	adds	r0, r3, #0
1000f974:	4b16      	ldr	r3, [pc, #88]	; (1000f9d0 <at_ble_write_authorize_reply+0x70>)
1000f976:	4798      	blx	r3
1000f978:	3708      	adds	r7, #8
1000f97a:	2800      	cmp	r0, #0
1000f97c:	d009      	beq.n	1000f992 <at_ble_write_authorize_reply+0x32>
1000f97e:	6880      	ldr	r0, [r0, #8]
1000f980:	2800      	cmp	r0, #0
1000f982:	d006      	beq.n	1000f992 <at_ble_write_authorize_reply+0x32>
1000f984:	88a3      	ldrh	r3, [r4, #4]
1000f986:	88e2      	ldrh	r2, [r4, #6]
1000f988:	18c0      	adds	r0, r0, r3
1000f98a:	1c39      	adds	r1, r7, #0
1000f98c:	4b11      	ldr	r3, [pc, #68]	; (1000f9d4 <at_ble_write_authorize_reply+0x74>)
1000f98e:	4798      	blx	r3
1000f990:	e015      	b.n	1000f9be <at_ble_write_authorize_reply+0x5e>
1000f992:	ab02      	add	r3, sp, #8
1000f994:	1d9e      	adds	r6, r3, #6
1000f996:	2300      	movs	r3, #0
1000f998:	4d0f      	ldr	r5, [pc, #60]	; (1000f9d8 <at_ble_write_authorize_reply+0x78>)
1000f99a:	8033      	strh	r3, [r6, #0]
1000f99c:	6829      	ldr	r1, [r5, #0]
1000f99e:	1c32      	adds	r2, r6, #0
1000f9a0:	4b0e      	ldr	r3, [pc, #56]	; (1000f9dc <at_ble_write_authorize_reply+0x7c>)
1000f9a2:	9800      	ldr	r0, [sp, #0]
1000f9a4:	4798      	blx	r3
1000f9a6:	682b      	ldr	r3, [r5, #0]
1000f9a8:	88a0      	ldrh	r0, [r4, #4]
1000f9aa:	88e2      	ldrh	r2, [r4, #6]
1000f9ac:	1818      	adds	r0, r3, r0
1000f9ae:	1c39      	adds	r1, r7, #0
1000f9b0:	4b08      	ldr	r3, [pc, #32]	; (1000f9d4 <at_ble_write_authorize_reply+0x74>)
1000f9b2:	4798      	blx	r3
1000f9b4:	8860      	ldrh	r0, [r4, #2]
1000f9b6:	8832      	ldrh	r2, [r6, #0]
1000f9b8:	6829      	ldr	r1, [r5, #0]
1000f9ba:	4b09      	ldr	r3, [pc, #36]	; (1000f9e0 <at_ble_write_authorize_reply+0x80>)
1000f9bc:	4798      	blx	r3
1000f9be:	8860      	ldrh	r0, [r4, #2]
1000f9c0:	8821      	ldrh	r1, [r4, #0]
1000f9c2:	9a01      	ldr	r2, [sp, #4]
1000f9c4:	4b07      	ldr	r3, [pc, #28]	; (1000f9e4 <at_ble_write_authorize_reply+0x84>)
1000f9c6:	4798      	blx	r3
1000f9c8:	2000      	movs	r0, #0
1000f9ca:	b005      	add	sp, #20
1000f9cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f9ce:	46c0      	nop			; (mov r8, r8)
1000f9d0:	1000f1f1 	.word	0x1000f1f1
1000f9d4:	1001576f 	.word	0x1001576f
1000f9d8:	10018538 	.word	0x10018538
1000f9dc:	1000f921 	.word	0x1000f921
1000f9e0:	1000f8e5 	.word	0x1000f8e5
1000f9e4:	100111bd 	.word	0x100111bd

1000f9e8 <gatts_handle_read_req>:
1000f9e8:	b538      	push	{r3, r4, r5, lr}
1000f9ea:	1c0c      	adds	r4, r1, #0
1000f9ec:	4b07      	ldr	r3, [pc, #28]	; (1000fa0c <gatts_handle_read_req+0x24>)
1000f9ee:	4798      	blx	r3
1000f9f0:	8865      	ldrh	r5, [r4, #2]
1000f9f2:	4b07      	ldr	r3, [pc, #28]	; (1000fa10 <gatts_handle_read_req+0x28>)
1000f9f4:	1c28      	adds	r0, r5, #0
1000f9f6:	4798      	blx	r3
1000f9f8:	7883      	ldrb	r3, [r0, #2]
1000f9fa:	2026      	movs	r0, #38	; 0x26
1000f9fc:	07db      	lsls	r3, r3, #31
1000f9fe:	d404      	bmi.n	1000fa0a <gatts_handle_read_req+0x22>
1000fa00:	8820      	ldrh	r0, [r4, #0]
1000fa02:	1c29      	adds	r1, r5, #0
1000fa04:	4b03      	ldr	r3, [pc, #12]	; (1000fa14 <gatts_handle_read_req+0x2c>)
1000fa06:	4798      	blx	r3
1000fa08:	203b      	movs	r0, #59	; 0x3b
1000fa0a:	bd38      	pop	{r3, r4, r5, pc}
1000fa0c:	10011101 	.word	0x10011101
1000fa10:	1000f1f1 	.word	0x1000f1f1
1000fa14:	1000f459 	.word	0x1000f459

1000fa18 <gatts_handle_att_info_req>:
1000fa18:	b538      	push	{r3, r4, r5, lr}
1000fa1a:	1c0d      	adds	r5, r1, #0
1000fa1c:	4b0a      	ldr	r3, [pc, #40]	; (1000fa48 <gatts_handle_att_info_req+0x30>)
1000fa1e:	1c14      	adds	r4, r2, #0
1000fa20:	4798      	blx	r3
1000fa22:	882d      	ldrh	r5, [r5, #0]
1000fa24:	4b09      	ldr	r3, [pc, #36]	; (1000fa4c <gatts_handle_att_info_req+0x34>)
1000fa26:	1c28      	adds	r0, r5, #0
1000fa28:	4798      	blx	r3
1000fa2a:	0a22      	lsrs	r2, r4, #8
1000fa2c:	1c03      	adds	r3, r0, #0
1000fa2e:	4c08      	ldr	r4, [pc, #32]	; (1000fa50 <gatts_handle_att_info_req+0x38>)
1000fa30:	b291      	uxth	r1, r2
1000fa32:	2800      	cmp	r0, #0
1000fa34:	d003      	beq.n	1000fa3e <gatts_handle_att_info_req+0x26>
1000fa36:	8882      	ldrh	r2, [r0, #4]
1000fa38:	2300      	movs	r3, #0
1000fa3a:	1c28      	adds	r0, r5, #0
1000fa3c:	e001      	b.n	1000fa42 <gatts_handle_att_info_req+0x2a>
1000fa3e:	1c28      	adds	r0, r5, #0
1000fa40:	2201      	movs	r2, #1
1000fa42:	47a0      	blx	r4
1000fa44:	203b      	movs	r0, #59	; 0x3b
1000fa46:	bd38      	pop	{r3, r4, r5, pc}
1000fa48:	10011145 	.word	0x10011145
1000fa4c:	1000f1f1 	.word	0x1000f1f1
1000fa50:	10011201 	.word	0x10011201

1000fa54 <gatts_handle_write_req>:
1000fa54:	b510      	push	{r4, lr}
1000fa56:	1c14      	adds	r4, r2, #0
1000fa58:	4b07      	ldr	r3, [pc, #28]	; (1000fa78 <gatts_handle_write_req+0x24>)
1000fa5a:	4798      	blx	r3
1000fa5c:	4b07      	ldr	r3, [pc, #28]	; (1000fa7c <gatts_handle_write_req+0x28>)
1000fa5e:	8860      	ldrh	r0, [r4, #2]
1000fa60:	4798      	blx	r3
1000fa62:	2302      	movs	r3, #2
1000fa64:	7881      	ldrb	r1, [r0, #2]
1000fa66:	2022      	movs	r0, #34	; 0x22
1000fa68:	4019      	ands	r1, r3
1000fa6a:	d103      	bne.n	1000fa74 <gatts_handle_write_req+0x20>
1000fa6c:	1c20      	adds	r0, r4, #0
1000fa6e:	4b04      	ldr	r3, [pc, #16]	; (1000fa80 <gatts_handle_write_req+0x2c>)
1000fa70:	4798      	blx	r3
1000fa72:	201f      	movs	r0, #31
1000fa74:	bd10      	pop	{r4, pc}
1000fa76:	46c0      	nop			; (mov r8, r8)
1000fa78:	1001110d 	.word	0x1001110d
1000fa7c:	1000f1f1 	.word	0x1000f1f1
1000fa80:	1000f961 	.word	0x1000f961

1000fa84 <at_ble_notification_send>:
1000fa84:	b5f0      	push	{r4, r5, r6, r7, lr}
1000fa86:	4d17      	ldr	r5, [pc, #92]	; (1000fae4 <at_ble_notification_send+0x60>)
1000fa88:	4c17      	ldr	r4, [pc, #92]	; (1000fae8 <at_ble_notification_send+0x64>)
1000fa8a:	682a      	ldr	r2, [r5, #0]
1000fa8c:	44a5      	add	sp, r4
1000fa8e:	23d2      	movs	r3, #210	; 0xd2
1000fa90:	2a04      	cmp	r2, #4
1000fa92:	d822      	bhi.n	1000fada <at_ble_notification_send+0x56>
1000fa94:	1c06      	adds	r6, r0, #0
1000fa96:	4b15      	ldr	r3, [pc, #84]	; (1000faec <at_ble_notification_send+0x68>)
1000fa98:	1c08      	adds	r0, r1, #0
1000fa9a:	1c0c      	adds	r4, r1, #0
1000fa9c:	4798      	blx	r3
1000fa9e:	2800      	cmp	r0, #0
1000faa0:	d008      	beq.n	1000fab4 <at_ble_notification_send+0x30>
1000faa2:	6883      	ldr	r3, [r0, #8]
1000faa4:	2b00      	cmp	r3, #0
1000faa6:	d005      	beq.n	1000fab4 <at_ble_notification_send+0x30>
1000faa8:	8882      	ldrh	r2, [r0, #4]
1000faaa:	1c21      	adds	r1, r4, #0
1000faac:	9200      	str	r2, [sp, #0]
1000faae:	2012      	movs	r0, #18
1000fab0:	1c32      	adds	r2, r6, #0
1000fab2:	e00c      	b.n	1000face <at_ble_notification_send+0x4a>
1000fab4:	270e      	movs	r7, #14
1000fab6:	446f      	add	r7, sp
1000fab8:	1c39      	adds	r1, r7, #0
1000faba:	aa04      	add	r2, sp, #16
1000fabc:	4b0c      	ldr	r3, [pc, #48]	; (1000faf0 <at_ble_notification_send+0x6c>)
1000fabe:	1c20      	adds	r0, r4, #0
1000fac0:	4798      	blx	r3
1000fac2:	2012      	movs	r0, #18
1000fac4:	1c21      	adds	r1, r4, #0
1000fac6:	1c32      	adds	r2, r6, #0
1000fac8:	883b      	ldrh	r3, [r7, #0]
1000faca:	9300      	str	r3, [sp, #0]
1000facc:	ab04      	add	r3, sp, #16
1000face:	4c09      	ldr	r4, [pc, #36]	; (1000faf4 <at_ble_notification_send+0x70>)
1000fad0:	47a0      	blx	r4
1000fad2:	682b      	ldr	r3, [r5, #0]
1000fad4:	3301      	adds	r3, #1
1000fad6:	602b      	str	r3, [r5, #0]
1000fad8:	2300      	movs	r3, #0
1000fada:	1c18      	adds	r0, r3, #0
1000fadc:	2385      	movs	r3, #133	; 0x85
1000fade:	009b      	lsls	r3, r3, #2
1000fae0:	449d      	add	sp, r3
1000fae2:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000fae4:	1001a05c 	.word	0x1001a05c
1000fae8:	fffffdec 	.word	0xfffffdec
1000faec:	1000f1f1 	.word	0x1000f1f1
1000faf0:	10011745 	.word	0x10011745
1000faf4:	10011249 	.word	0x10011249

1000faf8 <init_l2cc_task_module>:
1000faf8:	220a      	movs	r2, #10
1000fafa:	4b01      	ldr	r3, [pc, #4]	; (1000fb00 <init_l2cc_task_module+0x8>)
1000fafc:	701a      	strb	r2, [r3, #0]
1000fafe:	4770      	bx	lr
1000fb00:	10018534 	.word	0x10018534

1000fb04 <l2cc_data_send_rsp_handler>:
1000fb04:	b510      	push	{r4, lr}
1000fb06:	7802      	ldrb	r2, [r0, #0]
1000fb08:	700a      	strb	r2, [r1, #0]
1000fb0a:	7883      	ldrb	r3, [r0, #2]
1000fb0c:	7844      	ldrb	r4, [r0, #1]
1000fb0e:	021b      	lsls	r3, r3, #8
1000fb10:	4323      	orrs	r3, r4
1000fb12:	804b      	strh	r3, [r1, #2]
1000fb14:	7903      	ldrb	r3, [r0, #4]
1000fb16:	78c0      	ldrb	r0, [r0, #3]
1000fb18:	021b      	lsls	r3, r3, #8
1000fb1a:	4303      	orrs	r3, r0
1000fb1c:	808b      	strh	r3, [r1, #4]
1000fb1e:	2a00      	cmp	r2, #0
1000fb20:	d103      	bne.n	1000fb2a <l2cc_data_send_rsp_handler+0x26>
1000fb22:	4a02      	ldr	r2, [pc, #8]	; (1000fb2c <l2cc_data_send_rsp_handler+0x28>)
1000fb24:	7813      	ldrb	r3, [r2, #0]
1000fb26:	3301      	adds	r3, #1
1000fb28:	7013      	strb	r3, [r2, #0]
1000fb2a:	bd10      	pop	{r4, pc}
1000fb2c:	10018534 	.word	0x10018534

1000fb30 <l2cc_data_received_handler>:
1000fb30:	b508      	push	{r3, lr}
1000fb32:	1c03      	adds	r3, r0, #0
1000fb34:	7842      	ldrb	r2, [r0, #1]
1000fb36:	7800      	ldrb	r0, [r0, #0]
1000fb38:	0212      	lsls	r2, r2, #8
1000fb3a:	4302      	orrs	r2, r0
1000fb3c:	800a      	strh	r2, [r1, #0]
1000fb3e:	78da      	ldrb	r2, [r3, #3]
1000fb40:	7898      	ldrb	r0, [r3, #2]
1000fb42:	0212      	lsls	r2, r2, #8
1000fb44:	4302      	orrs	r2, r0
1000fb46:	804a      	strh	r2, [r1, #2]
1000fb48:	795a      	ldrb	r2, [r3, #5]
1000fb4a:	7918      	ldrb	r0, [r3, #4]
1000fb4c:	0212      	lsls	r2, r2, #8
1000fb4e:	4302      	orrs	r2, r0
1000fb50:	808a      	strh	r2, [r1, #4]
1000fb52:	1d88      	adds	r0, r1, #6
1000fb54:	1d99      	adds	r1, r3, #6
1000fb56:	4b01      	ldr	r3, [pc, #4]	; (1000fb5c <l2cc_data_received_handler+0x2c>)
1000fb58:	4798      	blx	r3
1000fb5a:	bd08      	pop	{r3, pc}
1000fb5c:	1001576f 	.word	0x1001576f

1000fb60 <at_ble_authenticate>:
1000fb60:	b5f0      	push	{r4, r5, r6, r7, lr}
1000fb62:	1c0c      	adds	r4, r1, #0
1000fb64:	211f      	movs	r1, #31
1000fb66:	b08b      	sub	sp, #44	; 0x2c
1000fb68:	9307      	str	r3, [sp, #28]
1000fb6a:	ab02      	add	r3, sp, #8
1000fb6c:	18c9      	adds	r1, r1, r3
1000fb6e:	230f      	movs	r3, #15
1000fb70:	700b      	strb	r3, [r1, #0]
1000fb72:	4b40      	ldr	r3, [pc, #256]	; (1000fc74 <at_ble_authenticate+0x114>)
1000fb74:	1c05      	adds	r5, r0, #0
1000fb76:	1c16      	adds	r6, r2, #0
1000fb78:	4798      	blx	r3
1000fb7a:	1c07      	adds	r7, r0, #0
1000fb7c:	2001      	movs	r0, #1
1000fb7e:	2f07      	cmp	r7, #7
1000fb80:	d875      	bhi.n	1000fc6e <at_ble_authenticate+0x10e>
1000fb82:	2c00      	cmp	r4, #0
1000fb84:	d113      	bne.n	1000fbae <at_ble_authenticate+0x4e>
1000fb86:	2312      	movs	r3, #18
1000fb88:	435f      	muls	r7, r3
1000fb8a:	4b3b      	ldr	r3, [pc, #236]	; (1000fc78 <at_ble_authenticate+0x118>)
1000fb8c:	5cfb      	ldrb	r3, [r7, r3]
1000fb8e:	4283      	cmp	r3, r0
1000fb90:	d001      	beq.n	1000fb96 <at_ble_authenticate+0x36>
1000fb92:	20cf      	movs	r0, #207	; 0xcf
1000fb94:	e06b      	b.n	1000fc6e <at_ble_authenticate+0x10e>
1000fb96:	9504      	str	r5, [sp, #16]
1000fb98:	9400      	str	r4, [sp, #0]
1000fb9a:	9401      	str	r4, [sp, #4]
1000fb9c:	9402      	str	r4, [sp, #8]
1000fb9e:	9403      	str	r4, [sp, #12]
1000fba0:	1c20      	adds	r0, r4, #0
1000fba2:	1c21      	adds	r1, r4, #0
1000fba4:	1c22      	adds	r2, r4, #0
1000fba6:	1c23      	adds	r3, r4, #0
1000fba8:	4d34      	ldr	r5, [pc, #208]	; (1000fc7c <at_ble_authenticate+0x11c>)
1000fbaa:	47a8      	blx	r5
1000fbac:	e05e      	b.n	1000fc6c <at_ble_authenticate+0x10c>
1000fbae:	7922      	ldrb	r2, [r4, #4]
1000fbb0:	2a06      	cmp	r2, #6
1000fbb2:	d9ee      	bls.n	1000fb92 <at_ble_authenticate+0x32>
1000fbb4:	7963      	ldrb	r3, [r4, #5]
1000fbb6:	2b10      	cmp	r3, #16
1000fbb8:	d8eb      	bhi.n	1000fb92 <at_ble_authenticate+0x32>
1000fbba:	429a      	cmp	r2, r3
1000fbbc:	d8e9      	bhi.n	1000fb92 <at_ble_authenticate+0x32>
1000fbbe:	7a23      	ldrb	r3, [r4, #8]
1000fbc0:	2b04      	cmp	r3, #4
1000fbc2:	d8e6      	bhi.n	1000fb92 <at_ble_authenticate+0x32>
1000fbc4:	79a3      	ldrb	r3, [r4, #6]
1000fbc6:	2b07      	cmp	r3, #7
1000fbc8:	d8e3      	bhi.n	1000fb92 <at_ble_authenticate+0x32>
1000fbca:	79e3      	ldrb	r3, [r4, #7]
1000fbcc:	2b07      	cmp	r3, #7
1000fbce:	d8e0      	bhi.n	1000fb92 <at_ble_authenticate+0x32>
1000fbd0:	78a3      	ldrb	r3, [r4, #2]
1000fbd2:	2b00      	cmp	r3, #0
1000fbd4:	d006      	beq.n	1000fbe4 <at_ble_authenticate+0x84>
1000fbd6:	2e00      	cmp	r6, #0
1000fbd8:	d0db      	beq.n	1000fb92 <at_ble_authenticate+0x32>
1000fbda:	4829      	ldr	r0, [pc, #164]	; (1000fc80 <at_ble_authenticate+0x120>)
1000fbdc:	1c31      	adds	r1, r6, #0
1000fbde:	221c      	movs	r2, #28
1000fbe0:	4b28      	ldr	r3, [pc, #160]	; (1000fc84 <at_ble_authenticate+0x124>)
1000fbe2:	4798      	blx	r3
1000fbe4:	9b07      	ldr	r3, [sp, #28]
1000fbe6:	2b00      	cmp	r3, #0
1000fbe8:	d005      	beq.n	1000fbf6 <at_ble_authenticate+0x96>
1000fbea:	4827      	ldr	r0, [pc, #156]	; (1000fc88 <at_ble_authenticate+0x128>)
1000fbec:	1c19      	adds	r1, r3, #0
1000fbee:	309a      	adds	r0, #154	; 0x9a
1000fbf0:	2210      	movs	r2, #16
1000fbf2:	4b24      	ldr	r3, [pc, #144]	; (1000fc84 <at_ble_authenticate+0x124>)
1000fbf4:	4798      	blx	r3
1000fbf6:	7863      	ldrb	r3, [r4, #1]
1000fbf8:	78a2      	ldrb	r2, [r4, #2]
1000fbfa:	009b      	lsls	r3, r3, #2
1000fbfc:	4313      	orrs	r3, r2
1000fbfe:	2212      	movs	r2, #18
1000fc00:	4357      	muls	r7, r2
1000fc02:	4a1d      	ldr	r2, [pc, #116]	; (1000fc78 <at_ble_authenticate+0x118>)
1000fc04:	b2db      	uxtb	r3, r3
1000fc06:	5cba      	ldrb	r2, [r7, r2]
1000fc08:	2a00      	cmp	r2, #0
1000fc0a:	d116      	bne.n	1000fc3a <at_ble_authenticate+0xda>
1000fc0c:	79a0      	ldrb	r0, [r4, #6]
1000fc0e:	0742      	lsls	r2, r0, #29
1000fc10:	d502      	bpl.n	1000fc18 <at_ble_authenticate+0xb8>
1000fc12:	9a07      	ldr	r2, [sp, #28]
1000fc14:	2a00      	cmp	r2, #0
1000fc16:	d0bc      	beq.n	1000fb92 <at_ble_authenticate+0x32>
1000fc18:	07c2      	lsls	r2, r0, #31
1000fc1a:	d501      	bpl.n	1000fc20 <at_ble_authenticate+0xc0>
1000fc1c:	2e00      	cmp	r6, #0
1000fc1e:	d0b8      	beq.n	1000fb92 <at_ble_authenticate+0x32>
1000fc20:	7966      	ldrb	r6, [r4, #5]
1000fc22:	7821      	ldrb	r1, [r4, #0]
1000fc24:	78e2      	ldrb	r2, [r4, #3]
1000fc26:	9600      	str	r6, [sp, #0]
1000fc28:	9001      	str	r0, [sp, #4]
1000fc2a:	79e0      	ldrb	r0, [r4, #7]
1000fc2c:	9002      	str	r0, [sp, #8]
1000fc2e:	7a20      	ldrb	r0, [r4, #8]
1000fc30:	4c16      	ldr	r4, [pc, #88]	; (1000fc8c <at_ble_authenticate+0x12c>)
1000fc32:	9003      	str	r0, [sp, #12]
1000fc34:	1c28      	adds	r0, r5, #0
1000fc36:	47a0      	blx	r4
1000fc38:	e018      	b.n	1000fc6c <at_ble_authenticate+0x10c>
1000fc3a:	2a01      	cmp	r2, #1
1000fc3c:	d1a9      	bne.n	1000fb92 <at_ble_authenticate+0x32>
1000fc3e:	79e0      	ldrb	r0, [r4, #7]
1000fc40:	0742      	lsls	r2, r0, #29
1000fc42:	d502      	bpl.n	1000fc4a <at_ble_authenticate+0xea>
1000fc44:	9a07      	ldr	r2, [sp, #28]
1000fc46:	2a00      	cmp	r2, #0
1000fc48:	d0a3      	beq.n	1000fb92 <at_ble_authenticate+0x32>
1000fc4a:	07c2      	lsls	r2, r0, #31
1000fc4c:	d501      	bpl.n	1000fc52 <at_ble_authenticate+0xf2>
1000fc4e:	2e00      	cmp	r6, #0
1000fc50:	d09f      	beq.n	1000fb92 <at_ble_authenticate+0x32>
1000fc52:	7966      	ldrb	r6, [r4, #5]
1000fc54:	7821      	ldrb	r1, [r4, #0]
1000fc56:	78e2      	ldrb	r2, [r4, #3]
1000fc58:	9600      	str	r6, [sp, #0]
1000fc5a:	79a6      	ldrb	r6, [r4, #6]
1000fc5c:	9002      	str	r0, [sp, #8]
1000fc5e:	9601      	str	r6, [sp, #4]
1000fc60:	7a20      	ldrb	r0, [r4, #8]
1000fc62:	9504      	str	r5, [sp, #16]
1000fc64:	9003      	str	r0, [sp, #12]
1000fc66:	4c05      	ldr	r4, [pc, #20]	; (1000fc7c <at_ble_authenticate+0x11c>)
1000fc68:	2001      	movs	r0, #1
1000fc6a:	47a0      	blx	r4
1000fc6c:	2000      	movs	r0, #0
1000fc6e:	b00b      	add	sp, #44	; 0x2c
1000fc70:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000fc72:	46c0      	nop			; (mov r8, r8)
1000fc74:	10010061 	.word	0x10010061
1000fc78:	1001af22 	.word	0x1001af22
1000fc7c:	100105d1 	.word	0x100105d1
1000fc80:	1001b030 	.word	0x1001b030
1000fc84:	1001576f 	.word	0x1001576f
1000fc88:	1001afb2 	.word	0x1001afb2
1000fc8c:	100103b1 	.word	0x100103b1

1000fc90 <at_ble_pair_key_reply>:
1000fc90:	b5f0      	push	{r4, r5, r6, r7, lr}
1000fc92:	b085      	sub	sp, #20
1000fc94:	1c05      	adds	r5, r0, #0
1000fc96:	1c0c      	adds	r4, r1, #0
1000fc98:	1c16      	adds	r6, r2, #0
1000fc9a:	2100      	movs	r1, #0
1000fc9c:	4668      	mov	r0, sp
1000fc9e:	2210      	movs	r2, #16
1000fca0:	4b18      	ldr	r3, [pc, #96]	; (1000fd04 <at_ble_pair_key_reply+0x74>)
1000fca2:	4798      	blx	r3
1000fca4:	2101      	movs	r1, #1
1000fca6:	2e00      	cmp	r6, #0
1000fca8:	d101      	bne.n	1000fcae <at_ble_pair_key_reply+0x1e>
1000fcaa:	1c31      	adds	r1, r6, #0
1000fcac:	466e      	mov	r6, sp
1000fcae:	2c00      	cmp	r4, #0
1000fcb0:	d116      	bne.n	1000fce0 <at_ble_pair_key_reply+0x50>
1000fcb2:	2701      	movs	r7, #1
1000fcb4:	1c23      	adds	r3, r4, #0
1000fcb6:	1d70      	adds	r0, r6, #5
1000fcb8:	3e01      	subs	r6, #1
1000fcba:	7802      	ldrb	r2, [r0, #0]
1000fcbc:	3801      	subs	r0, #1
1000fcbe:	3a30      	subs	r2, #48	; 0x30
1000fcc0:	437a      	muls	r2, r7
1000fcc2:	189b      	adds	r3, r3, r2
1000fcc4:	220a      	movs	r2, #10
1000fcc6:	4357      	muls	r7, r2
1000fcc8:	42b0      	cmp	r0, r6
1000fcca:	d1f6      	bne.n	1000fcba <at_ble_pair_key_reply+0x2a>
1000fccc:	466a      	mov	r2, sp
1000fcce:	4668      	mov	r0, sp
1000fcd0:	7013      	strb	r3, [r2, #0]
1000fcd2:	0a1a      	lsrs	r2, r3, #8
1000fcd4:	7042      	strb	r2, [r0, #1]
1000fcd6:	0c1a      	lsrs	r2, r3, #16
1000fcd8:	0e1b      	lsrs	r3, r3, #24
1000fcda:	7082      	strb	r2, [r0, #2]
1000fcdc:	70c3      	strb	r3, [r0, #3]
1000fcde:	e009      	b.n	1000fcf4 <at_ble_pair_key_reply+0x64>
1000fce0:	20cf      	movs	r0, #207	; 0xcf
1000fce2:	2c01      	cmp	r4, #1
1000fce4:	d10c      	bne.n	1000fd00 <at_ble_pair_key_reply+0x70>
1000fce6:	2300      	movs	r3, #0
1000fce8:	4668      	mov	r0, sp
1000fcea:	5cf2      	ldrb	r2, [r6, r3]
1000fcec:	54c2      	strb	r2, [r0, r3]
1000fcee:	3301      	adds	r3, #1
1000fcf0:	2b10      	cmp	r3, #16
1000fcf2:	d1f9      	bne.n	1000fce8 <at_ble_pair_key_reply+0x58>
1000fcf4:	2004      	movs	r0, #4
1000fcf6:	466a      	mov	r2, sp
1000fcf8:	1c2b      	adds	r3, r5, #0
1000fcfa:	4c03      	ldr	r4, [pc, #12]	; (1000fd08 <at_ble_pair_key_reply+0x78>)
1000fcfc:	47a0      	blx	r4
1000fcfe:	2000      	movs	r0, #0
1000fd00:	b005      	add	sp, #20
1000fd02:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000fd04:	10015781 	.word	0x10015781
1000fd08:	1001064d 	.word	0x1001064d

1000fd0c <at_ble_send_slave_sec_request>:
1000fd0c:	b570      	push	{r4, r5, r6, lr}
1000fd0e:	4b0c      	ldr	r3, [pc, #48]	; (1000fd40 <at_ble_send_slave_sec_request+0x34>)
1000fd10:	1c0e      	adds	r6, r1, #0
1000fd12:	2100      	movs	r1, #0
1000fd14:	1c05      	adds	r5, r0, #0
1000fd16:	1c14      	adds	r4, r2, #0
1000fd18:	4798      	blx	r3
1000fd1a:	2301      	movs	r3, #1
1000fd1c:	2807      	cmp	r0, #7
1000fd1e:	d80d      	bhi.n	1000fd3c <at_ble_send_slave_sec_request+0x30>
1000fd20:	3311      	adds	r3, #17
1000fd22:	4358      	muls	r0, r3
1000fd24:	4b07      	ldr	r3, [pc, #28]	; (1000fd44 <at_ble_send_slave_sec_request+0x38>)
1000fd26:	5cc2      	ldrb	r2, [r0, r3]
1000fd28:	23e0      	movs	r3, #224	; 0xe0
1000fd2a:	2a01      	cmp	r2, #1
1000fd2c:	d106      	bne.n	1000fd3c <at_ble_send_slave_sec_request+0x30>
1000fd2e:	00b1      	lsls	r1, r6, #2
1000fd30:	430c      	orrs	r4, r1
1000fd32:	4b05      	ldr	r3, [pc, #20]	; (1000fd48 <at_ble_send_slave_sec_request+0x3c>)
1000fd34:	b2e1      	uxtb	r1, r4
1000fd36:	1c28      	adds	r0, r5, #0
1000fd38:	4798      	blx	r3
1000fd3a:	2300      	movs	r3, #0
1000fd3c:	1c18      	adds	r0, r3, #0
1000fd3e:	bd70      	pop	{r4, r5, r6, pc}
1000fd40:	10010061 	.word	0x10010061
1000fd44:	1001af22 	.word	0x1001af22
1000fd48:	1001069d 	.word	0x1001069d

1000fd4c <at_ble_encryption_start>:
1000fd4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000fd4e:	23cf      	movs	r3, #207	; 0xcf
1000fd50:	2900      	cmp	r1, #0
1000fd52:	d02b      	beq.n	1000fdac <at_ble_encryption_start+0x60>
1000fd54:	2a05      	cmp	r2, #5
1000fd56:	d829      	bhi.n	1000fdac <at_ble_encryption_start+0x60>
1000fd58:	2701      	movs	r7, #1
1000fd5a:	1c3d      	adds	r5, r7, #0
1000fd5c:	2433      	movs	r4, #51	; 0x33
1000fd5e:	4095      	lsls	r5, r2
1000fd60:	4225      	tst	r5, r4
1000fd62:	d023      	beq.n	1000fdac <at_ble_encryption_start+0x60>
1000fd64:	7e8c      	ldrb	r4, [r1, #26]
1000fd66:	3c07      	subs	r4, #7
1000fd68:	2c09      	cmp	r4, #9
1000fd6a:	d81f      	bhi.n	1000fdac <at_ble_encryption_start+0x60>
1000fd6c:	4b10      	ldr	r3, [pc, #64]	; (1000fdb0 <at_ble_encryption_start+0x64>)
1000fd6e:	1c0c      	adds	r4, r1, #0
1000fd70:	2100      	movs	r1, #0
1000fd72:	1c15      	adds	r5, r2, #0
1000fd74:	1c06      	adds	r6, r0, #0
1000fd76:	4798      	blx	r3
1000fd78:	1c3b      	adds	r3, r7, #0
1000fd7a:	2807      	cmp	r0, #7
1000fd7c:	d816      	bhi.n	1000fdac <at_ble_encryption_start+0x60>
1000fd7e:	2312      	movs	r3, #18
1000fd80:	4358      	muls	r0, r3
1000fd82:	4b0c      	ldr	r3, [pc, #48]	; (1000fdb4 <at_ble_encryption_start+0x68>)
1000fd84:	5cc7      	ldrb	r7, [r0, r3]
1000fd86:	23e0      	movs	r3, #224	; 0xe0
1000fd88:	2f00      	cmp	r7, #0
1000fd8a:	d10f      	bne.n	1000fdac <at_ble_encryption_start+0x60>
1000fd8c:	1c21      	adds	r1, r4, #0
1000fd8e:	221c      	movs	r2, #28
1000fd90:	4b09      	ldr	r3, [pc, #36]	; (1000fdb8 <at_ble_encryption_start+0x6c>)
1000fd92:	480a      	ldr	r0, [pc, #40]	; (1000fdbc <at_ble_encryption_start+0x70>)
1000fd94:	4798      	blx	r3
1000fd96:	1c23      	adds	r3, r4, #0
1000fd98:	7ea1      	ldrb	r1, [r4, #26]
1000fd9a:	8a22      	ldrh	r2, [r4, #16]
1000fd9c:	3312      	adds	r3, #18
1000fd9e:	9100      	str	r1, [sp, #0]
1000fda0:	9501      	str	r5, [sp, #4]
1000fda2:	1c21      	adds	r1, r4, #0
1000fda4:	1c30      	adds	r0, r6, #0
1000fda6:	4c06      	ldr	r4, [pc, #24]	; (1000fdc0 <at_ble_encryption_start+0x74>)
1000fda8:	47a0      	blx	r4
1000fdaa:	1c3b      	adds	r3, r7, #0
1000fdac:	1c18      	adds	r0, r3, #0
1000fdae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000fdb0:	10010061 	.word	0x10010061
1000fdb4:	1001af22 	.word	0x1001af22
1000fdb8:	1001576f 	.word	0x1001576f
1000fdbc:	1001b030 	.word	0x1001b030
1000fdc0:	100106dd 	.word	0x100106dd

1000fdc4 <at_ble_encryption_request_reply>:
1000fdc4:	b573      	push	{r0, r1, r4, r5, r6, lr}
1000fdc6:	24cf      	movs	r4, #207	; 0xcf
1000fdc8:	2b00      	cmp	r3, #0
1000fdca:	d011      	beq.n	1000fdf0 <at_ble_encryption_request_reply+0x2c>
1000fdcc:	2a00      	cmp	r2, #0
1000fdce:	d00a      	beq.n	1000fde6 <at_ble_encryption_request_reply+0x22>
1000fdd0:	2905      	cmp	r1, #5
1000fdd2:	d80d      	bhi.n	1000fdf0 <at_ble_encryption_request_reply+0x2c>
1000fdd4:	2501      	movs	r5, #1
1000fdd6:	2633      	movs	r6, #51	; 0x33
1000fdd8:	408d      	lsls	r5, r1
1000fdda:	4235      	tst	r5, r6
1000fddc:	d008      	beq.n	1000fdf0 <at_ble_encryption_request_reply+0x2c>
1000fdde:	7e9d      	ldrb	r5, [r3, #26]
1000fde0:	3d07      	subs	r5, #7
1000fde2:	2d09      	cmp	r5, #9
1000fde4:	d804      	bhi.n	1000fdf0 <at_ble_encryption_request_reply+0x2c>
1000fde6:	7e9c      	ldrb	r4, [r3, #26]
1000fde8:	9400      	str	r4, [sp, #0]
1000fdea:	4c02      	ldr	r4, [pc, #8]	; (1000fdf4 <at_ble_encryption_request_reply+0x30>)
1000fdec:	47a0      	blx	r4
1000fdee:	2400      	movs	r4, #0
1000fdf0:	1c20      	adds	r0, r4, #0
1000fdf2:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
1000fdf4:	10010799 	.word	0x10010799

1000fdf8 <rx_callback>:
1000fdf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000fdfa:	8883      	ldrh	r3, [r0, #4]
1000fdfc:	1c01      	adds	r1, r0, #0
1000fdfe:	9301      	str	r3, [sp, #4]
1000fe00:	88c5      	ldrh	r5, [r0, #6]
1000fe02:	8806      	ldrh	r6, [r0, #0]
1000fe04:	2d00      	cmp	r5, #0
1000fe06:	d10f      	bne.n	1000fe28 <rx_callback+0x30>
1000fe08:	1c19      	adds	r1, r3, #0
1000fe0a:	1c30      	adds	r0, r6, #0
1000fe0c:	4b19      	ldr	r3, [pc, #100]	; (1000fe74 <rx_callback+0x7c>)
1000fe0e:	1c2a      	adds	r2, r5, #0
1000fe10:	4798      	blx	r3
1000fe12:	1e03      	subs	r3, r0, #0
1000fe14:	d105      	bne.n	1000fe22 <rx_callback+0x2a>
1000fe16:	1c30      	adds	r0, r6, #0
1000fe18:	9901      	ldr	r1, [sp, #4]
1000fe1a:	1c1a      	adds	r2, r3, #0
1000fe1c:	4c16      	ldr	r4, [pc, #88]	; (1000fe78 <rx_callback+0x80>)
1000fe1e:	47a0      	blx	r4
1000fe20:	e027      	b.n	1000fe72 <rx_callback+0x7a>
1000fe22:	4b16      	ldr	r3, [pc, #88]	; (1000fe7c <rx_callback+0x84>)
1000fe24:	4798      	blx	r3
1000fe26:	e024      	b.n	1000fe72 <rx_callback+0x7a>
1000fe28:	4c15      	ldr	r4, [pc, #84]	; (1000fe80 <rx_callback+0x88>)
1000fe2a:	4a16      	ldr	r2, [pc, #88]	; (1000fe84 <rx_callback+0x8c>)
1000fe2c:	6823      	ldr	r3, [r4, #0]
1000fe2e:	6812      	ldr	r2, [r2, #0]
1000fe30:	18eb      	adds	r3, r5, r3
1000fe32:	4293      	cmp	r3, r2
1000fe34:	d901      	bls.n	1000fe3a <rx_callback+0x42>
1000fe36:	2300      	movs	r3, #0
1000fe38:	6023      	str	r3, [r4, #0]
1000fe3a:	4f13      	ldr	r7, [pc, #76]	; (1000fe88 <rx_callback+0x90>)
1000fe3c:	6822      	ldr	r2, [r4, #0]
1000fe3e:	683b      	ldr	r3, [r7, #0]
1000fe40:	3108      	adds	r1, #8
1000fe42:	1898      	adds	r0, r3, r2
1000fe44:	1c2a      	adds	r2, r5, #0
1000fe46:	4b11      	ldr	r3, [pc, #68]	; (1000fe8c <rx_callback+0x94>)
1000fe48:	4798      	blx	r3
1000fe4a:	683b      	ldr	r3, [r7, #0]
1000fe4c:	6822      	ldr	r2, [r4, #0]
1000fe4e:	1c30      	adds	r0, r6, #0
1000fe50:	189a      	adds	r2, r3, r2
1000fe52:	9901      	ldr	r1, [sp, #4]
1000fe54:	4b07      	ldr	r3, [pc, #28]	; (1000fe74 <rx_callback+0x7c>)
1000fe56:	4798      	blx	r3
1000fe58:	2800      	cmp	r0, #0
1000fe5a:	d1e2      	bne.n	1000fe22 <rx_callback+0x2a>
1000fe5c:	6823      	ldr	r3, [r4, #0]
1000fe5e:	683a      	ldr	r2, [r7, #0]
1000fe60:	1c30      	adds	r0, r6, #0
1000fe62:	18d2      	adds	r2, r2, r3
1000fe64:	9901      	ldr	r1, [sp, #4]
1000fe66:	1c2b      	adds	r3, r5, #0
1000fe68:	4e03      	ldr	r6, [pc, #12]	; (1000fe78 <rx_callback+0x80>)
1000fe6a:	47b0      	blx	r6
1000fe6c:	6823      	ldr	r3, [r4, #0]
1000fe6e:	18ed      	adds	r5, r5, r3
1000fe70:	6025      	str	r5, [r4, #0]
1000fe72:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000fe74:	1000e48d 	.word	0x1000e48d
1000fe78:	1000e405 	.word	0x1000e405
1000fe7c:	1000defd 	.word	0x1000defd
1000fe80:	1001b08c 	.word	0x1001b08c
1000fe84:	10019fd8 	.word	0x10019fd8
1000fe88:	10019fd4 	.word	0x10019fd4
1000fe8c:	1001576f 	.word	0x1001576f

1000fe90 <interface_send>:
1000fe90:	b508      	push	{r3, lr}
1000fe92:	4b02      	ldr	r3, [pc, #8]	; (1000fe9c <interface_send+0xc>)
1000fe94:	4798      	blx	r3
1000fe96:	2000      	movs	r0, #0
1000fe98:	bd08      	pop	{r3, pc}
1000fe9a:	46c0      	nop			; (mov r8, r8)
1000fe9c:	1000dbf5 	.word	0x1000dbf5

1000fea0 <interface_init>:
1000fea0:	2280      	movs	r2, #128	; 0x80
1000fea2:	b510      	push	{r4, lr}
1000fea4:	2100      	movs	r1, #0
1000fea6:	1c04      	adds	r4, r0, #0
1000fea8:	0092      	lsls	r2, r2, #2
1000feaa:	4b08      	ldr	r3, [pc, #32]	; (1000fecc <interface_init+0x2c>)
1000feac:	4808      	ldr	r0, [pc, #32]	; (1000fed0 <interface_init+0x30>)
1000feae:	4798      	blx	r3
1000feb0:	2200      	movs	r2, #0
1000feb2:	4b08      	ldr	r3, [pc, #32]	; (1000fed4 <interface_init+0x34>)
1000feb4:	601a      	str	r2, [r3, #0]
1000feb6:	4a08      	ldr	r2, [pc, #32]	; (1000fed8 <interface_init+0x38>)
1000feb8:	4b08      	ldr	r3, [pc, #32]	; (1000fedc <interface_init+0x3c>)
1000feba:	601a      	str	r2, [r3, #0]
1000febc:	4b08      	ldr	r3, [pc, #32]	; (1000fee0 <interface_init+0x40>)
1000febe:	6922      	ldr	r2, [r4, #16]
1000fec0:	601a      	str	r2, [r3, #0]
1000fec2:	6962      	ldr	r2, [r4, #20]
1000fec4:	4b07      	ldr	r3, [pc, #28]	; (1000fee4 <interface_init+0x44>)
1000fec6:	601a      	str	r2, [r3, #0]
1000fec8:	bd10      	pop	{r4, pc}
1000feca:	46c0      	nop			; (mov r8, r8)
1000fecc:	10015781 	.word	0x10015781
1000fed0:	1001b290 	.word	0x1001b290
1000fed4:	1001b08c 	.word	0x1001b08c
1000fed8:	1001b090 	.word	0x1001b090
1000fedc:	10018538 	.word	0x10018538
1000fee0:	10019fd4 	.word	0x10019fd4
1000fee4:	10019fd8 	.word	0x10019fd8

1000fee8 <platform_cmd_cmpl_signal>:
1000fee8:	2201      	movs	r2, #1
1000feea:	4b01      	ldr	r3, [pc, #4]	; (1000fef0 <platform_cmd_cmpl_signal+0x8>)
1000feec:	601a      	str	r2, [r3, #0]
1000feee:	4770      	bx	lr
1000fef0:	10019fdc 	.word	0x10019fdc

1000fef4 <platform_cmd_cmpl_wait>:
1000fef4:	b510      	push	{r4, lr}
1000fef6:	1c04      	adds	r4, r0, #0
1000fef8:	4b07      	ldr	r3, [pc, #28]	; (1000ff18 <platform_cmd_cmpl_wait+0x24>)
1000fefa:	681a      	ldr	r2, [r3, #0]
1000fefc:	2a01      	cmp	r2, #1
1000fefe:	d003      	beq.n	1000ff08 <platform_cmd_cmpl_wait+0x14>
1000ff00:	4b06      	ldr	r3, [pc, #24]	; (1000ff1c <platform_cmd_cmpl_wait+0x28>)
1000ff02:	2000      	movs	r0, #0
1000ff04:	4798      	blx	r3
1000ff06:	e7f7      	b.n	1000fef8 <platform_cmd_cmpl_wait+0x4>
1000ff08:	6819      	ldr	r1, [r3, #0]
1000ff0a:	2901      	cmp	r1, #1
1000ff0c:	d102      	bne.n	1000ff14 <platform_cmd_cmpl_wait+0x20>
1000ff0e:	2200      	movs	r2, #0
1000ff10:	601a      	str	r2, [r3, #0]
1000ff12:	e000      	b.n	1000ff16 <platform_cmd_cmpl_wait+0x22>
1000ff14:	7022      	strb	r2, [r4, #0]
1000ff16:	bd10      	pop	{r4, pc}
1000ff18:	10019fdc 	.word	0x10019fdc
1000ff1c:	1000dc85 	.word	0x1000dc85

1000ff20 <start_timer>:
1000ff20:	4770      	bx	lr

1000ff22 <stop_timer>:
1000ff22:	4770      	bx	lr

1000ff24 <dbg_le_set_bd_addr_req_handler>:
1000ff24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000ff26:	466b      	mov	r3, sp
1000ff28:	1dde      	adds	r6, r3, #7
1000ff2a:	2300      	movs	r3, #0
1000ff2c:	7033      	strb	r3, [r6, #0]
1000ff2e:	230f      	movs	r3, #15
1000ff30:	4c13      	ldr	r4, [pc, #76]	; (1000ff80 <dbg_le_set_bd_addr_req_handler+0x5c>)
1000ff32:	2703      	movs	r7, #3
1000ff34:	7023      	strb	r3, [r4, #0]
1000ff36:	2300      	movs	r3, #0
1000ff38:	70e3      	strb	r3, [r4, #3]
1000ff3a:	4b12      	ldr	r3, [pc, #72]	; (1000ff84 <dbg_le_set_bd_addr_req_handler+0x60>)
1000ff3c:	1c01      	adds	r1, r0, #0
1000ff3e:	881a      	ldrh	r2, [r3, #0]
1000ff40:	881b      	ldrh	r3, [r3, #0]
1000ff42:	7122      	strb	r2, [r4, #4]
1000ff44:	0a1b      	lsrs	r3, r3, #8
1000ff46:	2206      	movs	r2, #6
1000ff48:	7163      	strb	r3, [r4, #5]
1000ff4a:	480f      	ldr	r0, [pc, #60]	; (1000ff88 <dbg_le_set_bd_addr_req_handler+0x64>)
1000ff4c:	4b0f      	ldr	r3, [pc, #60]	; (1000ff8c <dbg_le_set_bd_addr_req_handler+0x68>)
1000ff4e:	7067      	strb	r7, [r4, #1]
1000ff50:	70a7      	strb	r7, [r4, #2]
1000ff52:	4798      	blx	r3
1000ff54:	4d0e      	ldr	r5, [pc, #56]	; (1000ff90 <dbg_le_set_bd_addr_req_handler+0x6c>)
1000ff56:	4b0f      	ldr	r3, [pc, #60]	; (1000ff94 <dbg_le_set_bd_addr_req_handler+0x70>)
1000ff58:	210e      	movs	r1, #14
1000ff5a:	802b      	strh	r3, [r5, #0]
1000ff5c:	2306      	movs	r3, #6
1000ff5e:	71a3      	strb	r3, [r4, #6]
1000ff60:	2300      	movs	r3, #0
1000ff62:	1c20      	adds	r0, r4, #0
1000ff64:	71e3      	strb	r3, [r4, #7]
1000ff66:	4b0c      	ldr	r3, [pc, #48]	; (1000ff98 <dbg_le_set_bd_addr_req_handler+0x74>)
1000ff68:	80af      	strh	r7, [r5, #4]
1000ff6a:	4798      	blx	r3
1000ff6c:	1c30      	adds	r0, r6, #0
1000ff6e:	4b0b      	ldr	r3, [pc, #44]	; (1000ff9c <dbg_le_set_bd_addr_req_handler+0x78>)
1000ff70:	4798      	blx	r3
1000ff72:	7833      	ldrb	r3, [r6, #0]
1000ff74:	20e2      	movs	r0, #226	; 0xe2
1000ff76:	2b00      	cmp	r3, #0
1000ff78:	d101      	bne.n	1000ff7e <dbg_le_set_bd_addr_req_handler+0x5a>
1000ff7a:	68ab      	ldr	r3, [r5, #8]
1000ff7c:	7818      	ldrb	r0, [r3, #0]
1000ff7e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000ff80:	1001b290 	.word	0x1001b290
1000ff84:	1001af20 	.word	0x1001af20
1000ff88:	1001b298 	.word	0x1001b298
1000ff8c:	1001576f 	.word	0x1001576f
1000ff90:	1001af14 	.word	0x1001af14
1000ff94:	00000329 	.word	0x00000329
1000ff98:	1000fe91 	.word	0x1000fe91
1000ff9c:	1000fef5 	.word	0x1000fef5

1000ffa0 <gapc_get_dev_info_cfm.constprop.1>:
1000ffa0:	b538      	push	{r3, r4, r5, lr}
1000ffa2:	230b      	movs	r3, #11
1000ffa4:	4c27      	ldr	r4, [pc, #156]	; (10010044 <gapc_get_dev_info_cfm.constprop.1+0xa4>)
1000ffa6:	7023      	strb	r3, [r4, #0]
1000ffa8:	3303      	adds	r3, #3
1000ffaa:	7063      	strb	r3, [r4, #1]
1000ffac:	3329      	adds	r3, #41	; 0x29
1000ffae:	70a3      	strb	r3, [r4, #2]
1000ffb0:	4b25      	ldr	r3, [pc, #148]	; (10010048 <gapc_get_dev_info_cfm.constprop.1+0xa8>)
1000ffb2:	70e1      	strb	r1, [r4, #3]
1000ffb4:	881a      	ldrh	r2, [r3, #0]
1000ffb6:	881b      	ldrh	r3, [r3, #0]
1000ffb8:	7122      	strb	r2, [r4, #4]
1000ffba:	0a1b      	lsrs	r3, r3, #8
1000ffbc:	7163      	strb	r3, [r4, #5]
1000ffbe:	2300      	movs	r3, #0
1000ffc0:	7220      	strb	r0, [r4, #8]
1000ffc2:	7263      	strb	r3, [r4, #9]
1000ffc4:	2801      	cmp	r0, #1
1000ffc6:	d02b      	beq.n	10010020 <gapc_get_dev_info_cfm.constprop.1+0x80>
1000ffc8:	4298      	cmp	r0, r3
1000ffca:	d01b      	beq.n	10010004 <gapc_get_dev_info_cfm.constprop.1+0x64>
1000ffcc:	2802      	cmp	r0, #2
1000ffce:	d12f      	bne.n	10010030 <gapc_get_dev_info_cfm.constprop.1+0x90>
1000ffd0:	4b1e      	ldr	r3, [pc, #120]	; (1001004c <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000ffd2:	2112      	movs	r1, #18
1000ffd4:	1c1a      	adds	r2, r3, #0
1000ffd6:	32ce      	adds	r2, #206	; 0xce
1000ffd8:	8812      	ldrh	r2, [r2, #0]
1000ffda:	72a2      	strb	r2, [r4, #10]
1000ffdc:	0a12      	lsrs	r2, r2, #8
1000ffde:	72e2      	strb	r2, [r4, #11]
1000ffe0:	1c1a      	adds	r2, r3, #0
1000ffe2:	32d0      	adds	r2, #208	; 0xd0
1000ffe4:	8812      	ldrh	r2, [r2, #0]
1000ffe6:	7322      	strb	r2, [r4, #12]
1000ffe8:	0a12      	lsrs	r2, r2, #8
1000ffea:	7362      	strb	r2, [r4, #13]
1000ffec:	1c1a      	adds	r2, r3, #0
1000ffee:	32d2      	adds	r2, #210	; 0xd2
1000fff0:	8812      	ldrh	r2, [r2, #0]
1000fff2:	33d4      	adds	r3, #212	; 0xd4
1000fff4:	73a2      	strb	r2, [r4, #14]
1000fff6:	0a12      	lsrs	r2, r2, #8
1000fff8:	73e2      	strb	r2, [r4, #15]
1000fffa:	881b      	ldrh	r3, [r3, #0]
1000fffc:	7423      	strb	r3, [r4, #16]
1000fffe:	0a1b      	lsrs	r3, r3, #8
10010000:	7463      	strb	r3, [r4, #17]
10010002:	e016      	b.n	10010032 <gapc_get_dev_info_cfm.constprop.1+0x92>
10010004:	4b11      	ldr	r3, [pc, #68]	; (1001004c <gapc_get_dev_info_cfm.constprop.1+0xac>)
10010006:	4912      	ldr	r1, [pc, #72]	; (10010050 <gapc_get_dev_info_cfm.constprop.1+0xb0>)
10010008:	33aa      	adds	r3, #170	; 0xaa
1001000a:	881d      	ldrh	r5, [r3, #0]
1001000c:	4811      	ldr	r0, [pc, #68]	; (10010054 <gapc_get_dev_info_cfm.constprop.1+0xb4>)
1001000e:	0a2b      	lsrs	r3, r5, #8
10010010:	72a5      	strb	r5, [r4, #10]
10010012:	72e3      	strb	r3, [r4, #11]
10010014:	1c2a      	adds	r2, r5, #0
10010016:	4b10      	ldr	r3, [pc, #64]	; (10010058 <gapc_get_dev_info_cfm.constprop.1+0xb8>)
10010018:	350c      	adds	r5, #12
1001001a:	4798      	blx	r3
1001001c:	b2a9      	uxth	r1, r5
1001001e:	e008      	b.n	10010032 <gapc_get_dev_info_cfm.constprop.1+0x92>
10010020:	4b0a      	ldr	r3, [pc, #40]	; (1001004c <gapc_get_dev_info_cfm.constprop.1+0xac>)
10010022:	210c      	movs	r1, #12
10010024:	33cc      	adds	r3, #204	; 0xcc
10010026:	881b      	ldrh	r3, [r3, #0]
10010028:	72a3      	strb	r3, [r4, #10]
1001002a:	0a1b      	lsrs	r3, r3, #8
1001002c:	72e3      	strb	r3, [r4, #11]
1001002e:	e000      	b.n	10010032 <gapc_get_dev_info_cfm.constprop.1+0x92>
10010030:	210a      	movs	r1, #10
10010032:	1c0b      	adds	r3, r1, #0
10010034:	3b08      	subs	r3, #8
10010036:	71a3      	strb	r3, [r4, #6]
10010038:	121b      	asrs	r3, r3, #8
1001003a:	71e3      	strb	r3, [r4, #7]
1001003c:	1c20      	adds	r0, r4, #0
1001003e:	4b07      	ldr	r3, [pc, #28]	; (1001005c <gapc_get_dev_info_cfm.constprop.1+0xbc>)
10010040:	4798      	blx	r3
10010042:	bd38      	pop	{r3, r4, r5, pc}
10010044:	1001b290 	.word	0x1001b290
10010048:	1001af20 	.word	0x1001af20
1001004c:	1001afb2 	.word	0x1001afb2
10010050:	1001b05e 	.word	0x1001b05e
10010054:	1001b29c 	.word	0x1001b29c
10010058:	1001576f 	.word	0x1001576f
1001005c:	1000fe91 	.word	0x1000fe91

10010060 <check_ConnData_idx_role>:
10010060:	4b0c      	ldr	r3, [pc, #48]	; (10010094 <check_ConnData_idx_role+0x34>)
10010062:	b570      	push	{r4, r5, r6, lr}
10010064:	1c04      	adds	r4, r0, #0
10010066:	2008      	movs	r0, #8
10010068:	429c      	cmp	r4, r3
1001006a:	d011      	beq.n	10010090 <check_ConnData_idx_role+0x30>
1001006c:	2300      	movs	r3, #0
1001006e:	2212      	movs	r2, #18
10010070:	435a      	muls	r2, r3
10010072:	4d09      	ldr	r5, [pc, #36]	; (10010098 <check_ConnData_idx_role+0x38>)
10010074:	b2d8      	uxtb	r0, r3
10010076:	1956      	adds	r6, r2, r5
10010078:	8976      	ldrh	r6, [r6, #10]
1001007a:	42a6      	cmp	r6, r4
1001007c:	d104      	bne.n	10010088 <check_ConnData_idx_role+0x28>
1001007e:	2900      	cmp	r1, #0
10010080:	d006      	beq.n	10010090 <check_ConnData_idx_role+0x30>
10010082:	5d53      	ldrb	r3, [r2, r5]
10010084:	700b      	strb	r3, [r1, #0]
10010086:	e003      	b.n	10010090 <check_ConnData_idx_role+0x30>
10010088:	3301      	adds	r3, #1
1001008a:	2b08      	cmp	r3, #8
1001008c:	d1ef      	bne.n	1001006e <check_ConnData_idx_role+0xe>
1001008e:	1c18      	adds	r0, r3, #0
10010090:	bd70      	pop	{r4, r5, r6, pc}
10010092:	46c0      	nop			; (mov r8, r8)
10010094:	0000ffff 	.word	0x0000ffff
10010098:	1001af22 	.word	0x1001af22

1001009c <check_ConnData_emptyEntry>:
1001009c:	2300      	movs	r3, #0
1001009e:	2212      	movs	r2, #18
100100a0:	435a      	muls	r2, r3
100100a2:	4906      	ldr	r1, [pc, #24]	; (100100bc <check_ConnData_emptyEntry+0x20>)
100100a4:	b2d8      	uxtb	r0, r3
100100a6:	1852      	adds	r2, r2, r1
100100a8:	8951      	ldrh	r1, [r2, #10]
100100aa:	4a05      	ldr	r2, [pc, #20]	; (100100c0 <check_ConnData_emptyEntry+0x24>)
100100ac:	4291      	cmp	r1, r2
100100ae:	d003      	beq.n	100100b8 <check_ConnData_emptyEntry+0x1c>
100100b0:	3301      	adds	r3, #1
100100b2:	2b08      	cmp	r3, #8
100100b4:	d1f3      	bne.n	1001009e <check_ConnData_emptyEntry+0x2>
100100b6:	1c18      	adds	r0, r3, #0
100100b8:	4770      	bx	lr
100100ba:	46c0      	nop			; (mov r8, r8)
100100bc:	1001af22 	.word	0x1001af22
100100c0:	0000ffff 	.word	0x0000ffff

100100c4 <gapc_cmp_evt>:
100100c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100100c6:	780b      	ldrb	r3, [r1, #0]
100100c8:	1c05      	adds	r5, r0, #0
100100ca:	1e58      	subs	r0, r3, #1
100100cc:	784e      	ldrb	r6, [r1, #1]
100100ce:	280f      	cmp	r0, #15
100100d0:	d85a      	bhi.n	10010188 <gapc_cmp_evt+0xc4>
100100d2:	1c14      	adds	r4, r2, #0
100100d4:	f002 fcb4 	bl	10012a40 <__gnu_thumb1_case_uqi>
100100d8:	5858440a 	.word	0x5858440a
100100dc:	4b584444 	.word	0x4b584444
100100e0:	0825122d 	.word	0x0825122d
100100e4:	3e395858 	.word	0x3e395858
100100e8:	203b      	movs	r0, #59	; 0x3b
100100ea:	e04e      	b.n	1001018a <gapc_cmp_evt+0xc6>
100100ec:	203b      	movs	r0, #59	; 0x3b
100100ee:	2e00      	cmp	r6, #0
100100f0:	d04b      	beq.n	1001018a <gapc_cmp_evt+0xc6>
100100f2:	0a2d      	lsrs	r5, r5, #8
100100f4:	8015      	strh	r5, [r2, #0]
100100f6:	7096      	strb	r6, [r2, #2]
100100f8:	3835      	subs	r0, #53	; 0x35
100100fa:	e046      	b.n	1001018a <gapc_cmp_evt+0xc6>
100100fc:	466b      	mov	r3, sp
100100fe:	1ddf      	adds	r7, r3, #7
10010100:	2301      	movs	r3, #1
10010102:	0a2d      	lsrs	r5, r5, #8
10010104:	703b      	strb	r3, [r7, #0]
10010106:	1c28      	adds	r0, r5, #0
10010108:	1c39      	adds	r1, r7, #0
1001010a:	4b20      	ldr	r3, [pc, #128]	; (1001018c <gapc_cmp_evt+0xc8>)
1001010c:	4798      	blx	r3
1001010e:	2807      	cmp	r0, #7
10010110:	d803      	bhi.n	1001011a <gapc_cmp_evt+0x56>
10010112:	783b      	ldrb	r3, [r7, #0]
10010114:	203b      	movs	r0, #59	; 0x3b
10010116:	2b00      	cmp	r3, #0
10010118:	d037      	beq.n	1001018a <gapc_cmp_evt+0xc6>
1001011a:	8065      	strh	r5, [r4, #2]
1001011c:	7126      	strb	r6, [r4, #4]
1001011e:	2009      	movs	r0, #9
10010120:	e033      	b.n	1001018a <gapc_cmp_evt+0xc6>
10010122:	203b      	movs	r0, #59	; 0x3b
10010124:	2e00      	cmp	r6, #0
10010126:	d030      	beq.n	1001018a <gapc_cmp_evt+0xc6>
10010128:	0a2d      	lsrs	r5, r5, #8
1001012a:	8015      	strh	r5, [r2, #0]
1001012c:	7096      	strb	r6, [r2, #2]
1001012e:	382d      	subs	r0, #45	; 0x2d
10010130:	e02b      	b.n	1001018a <gapc_cmp_evt+0xc6>
10010132:	203b      	movs	r0, #59	; 0x3b
10010134:	2e00      	cmp	r6, #0
10010136:	d028      	beq.n	1001018a <gapc_cmp_evt+0xc6>
10010138:	2300      	movs	r3, #0
1001013a:	0a2d      	lsrs	r5, r5, #8
1001013c:	8015      	strh	r5, [r2, #0]
1001013e:	7096      	strb	r6, [r2, #2]
10010140:	8093      	strh	r3, [r2, #4]
10010142:	80d3      	strh	r3, [r2, #6]
10010144:	8113      	strh	r3, [r2, #8]
10010146:	3834      	subs	r0, #52	; 0x34
10010148:	e01f      	b.n	1001018a <gapc_cmp_evt+0xc6>
1001014a:	203b      	movs	r0, #59	; 0x3b
1001014c:	2e00      	cmp	r6, #0
1001014e:	d01c      	beq.n	1001018a <gapc_cmp_evt+0xc6>
10010150:	7216      	strb	r6, [r2, #8]
10010152:	e003      	b.n	1001015c <gapc_cmp_evt+0x98>
10010154:	203b      	movs	r0, #59	; 0x3b
10010156:	2e00      	cmp	r6, #0
10010158:	d017      	beq.n	1001018a <gapc_cmp_evt+0xc6>
1001015a:	7116      	strb	r6, [r2, #4]
1001015c:	3812      	subs	r0, #18
1001015e:	e014      	b.n	1001018a <gapc_cmp_evt+0xc6>
10010160:	203b      	movs	r0, #59	; 0x3b
10010162:	2e00      	cmp	r6, #0
10010164:	d011      	beq.n	1001018a <gapc_cmp_evt+0xc6>
10010166:	7093      	strb	r3, [r2, #2]
10010168:	70d6      	strb	r6, [r2, #3]
1001016a:	382a      	subs	r0, #42	; 0x2a
1001016c:	e00d      	b.n	1001018a <gapc_cmp_evt+0xc6>
1001016e:	203b      	movs	r0, #59	; 0x3b
10010170:	2e00      	cmp	r6, #0
10010172:	d00a      	beq.n	1001018a <gapc_cmp_evt+0xc6>
10010174:	0a2d      	lsrs	r5, r5, #8
10010176:	7016      	strb	r6, [r2, #0]
10010178:	8055      	strh	r5, [r2, #2]
1001017a:	1d10      	adds	r0, r2, #4
1001017c:	2100      	movs	r1, #0
1001017e:	2205      	movs	r2, #5
10010180:	4b03      	ldr	r3, [pc, #12]	; (10010190 <gapc_cmp_evt+0xcc>)
10010182:	4798      	blx	r3
10010184:	2012      	movs	r0, #18
10010186:	e000      	b.n	1001018a <gapc_cmp_evt+0xc6>
10010188:	2000      	movs	r0, #0
1001018a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1001018c:	10010061 	.word	0x10010061
10010190:	10015781 	.word	0x10015781

10010194 <gapc_connection_cfm_handler>:
10010194:	b5f0      	push	{r4, r5, r6, r7, lr}
10010196:	b085      	sub	sp, #20
10010198:	1c1d      	adds	r5, r3, #0
1001019a:	ab0a      	add	r3, sp, #40	; 0x28
1001019c:	781b      	ldrb	r3, [r3, #0]
1001019e:	9201      	str	r2, [sp, #4]
100101a0:	9302      	str	r3, [sp, #8]
100101a2:	ab0b      	add	r3, sp, #44	; 0x2c
100101a4:	781b      	ldrb	r3, [r3, #0]
100101a6:	1c07      	adds	r7, r0, #0
100101a8:	9303      	str	r3, [sp, #12]
100101aa:	ab0c      	add	r3, sp, #48	; 0x30
100101ac:	881a      	ldrh	r2, [r3, #0]
100101ae:	2302      	movs	r3, #2
100101b0:	1c0e      	adds	r6, r1, #0
100101b2:	4c23      	ldr	r4, [pc, #140]	; (10010240 <gapc_connection_cfm_handler+0xac>)
100101b4:	1c39      	adds	r1, r7, #0
100101b6:	7023      	strb	r3, [r4, #0]
100101b8:	330c      	adds	r3, #12
100101ba:	7063      	strb	r3, [r4, #1]
100101bc:	70a3      	strb	r3, [r4, #2]
100101be:	4b21      	ldr	r3, [pc, #132]	; (10010244 <gapc_connection_cfm_handler+0xb0>)
100101c0:	70e2      	strb	r2, [r4, #3]
100101c2:	881a      	ldrh	r2, [r3, #0]
100101c4:	881b      	ldrh	r3, [r3, #0]
100101c6:	7122      	strb	r2, [r4, #4]
100101c8:	0a1b      	lsrs	r3, r3, #8
100101ca:	4f1f      	ldr	r7, [pc, #124]	; (10010248 <gapc_connection_cfm_handler+0xb4>)
100101cc:	2210      	movs	r2, #16
100101ce:	481f      	ldr	r0, [pc, #124]	; (1001024c <gapc_connection_cfm_handler+0xb8>)
100101d0:	7163      	strb	r3, [r4, #5]
100101d2:	47b8      	blx	r7
100101d4:	0a33      	lsrs	r3, r6, #8
100101d6:	7626      	strb	r6, [r4, #24]
100101d8:	7663      	strb	r3, [r4, #25]
100101da:	9901      	ldr	r1, [sp, #4]
100101dc:	0c33      	lsrs	r3, r6, #16
100101de:	2210      	movs	r2, #16
100101e0:	0e36      	lsrs	r6, r6, #24
100101e2:	481b      	ldr	r0, [pc, #108]	; (10010250 <gapc_connection_cfm_handler+0xbc>)
100101e4:	76a3      	strb	r3, [r4, #26]
100101e6:	76e6      	strb	r6, [r4, #27]
100101e8:	47b8      	blx	r7
100101ea:	1c23      	adds	r3, r4, #0
100101ec:	332c      	adds	r3, #44	; 0x2c
100101ee:	701d      	strb	r5, [r3, #0]
100101f0:	1c23      	adds	r3, r4, #0
100101f2:	0a2a      	lsrs	r2, r5, #8
100101f4:	332d      	adds	r3, #45	; 0x2d
100101f6:	701a      	strb	r2, [r3, #0]
100101f8:	1c23      	adds	r3, r4, #0
100101fa:	0c2a      	lsrs	r2, r5, #16
100101fc:	332e      	adds	r3, #46	; 0x2e
100101fe:	701a      	strb	r2, [r3, #0]
10010200:	1c23      	adds	r3, r4, #0
10010202:	0e2d      	lsrs	r5, r5, #24
10010204:	332f      	adds	r3, #47	; 0x2f
10010206:	466a      	mov	r2, sp
10010208:	701d      	strb	r5, [r3, #0]
1001020a:	1c23      	adds	r3, r4, #0
1001020c:	7a12      	ldrb	r2, [r2, #8]
1001020e:	3330      	adds	r3, #48	; 0x30
10010210:	701a      	strb	r2, [r3, #0]
10010212:	1c23      	adds	r3, r4, #0
10010214:	2500      	movs	r5, #0
10010216:	3331      	adds	r3, #49	; 0x31
10010218:	466a      	mov	r2, sp
1001021a:	701d      	strb	r5, [r3, #0]
1001021c:	1c23      	adds	r3, r4, #0
1001021e:	7b12      	ldrb	r2, [r2, #12]
10010220:	3332      	adds	r3, #50	; 0x32
10010222:	701a      	strb	r2, [r3, #0]
10010224:	1c23      	adds	r3, r4, #0
10010226:	3333      	adds	r3, #51	; 0x33
10010228:	701d      	strb	r5, [r3, #0]
1001022a:	232c      	movs	r3, #44	; 0x2c
1001022c:	1c20      	adds	r0, r4, #0
1001022e:	71a3      	strb	r3, [r4, #6]
10010230:	2134      	movs	r1, #52	; 0x34
10010232:	4b08      	ldr	r3, [pc, #32]	; (10010254 <gapc_connection_cfm_handler+0xc0>)
10010234:	71e5      	strb	r5, [r4, #7]
10010236:	4798      	blx	r3
10010238:	1c28      	adds	r0, r5, #0
1001023a:	b005      	add	sp, #20
1001023c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001023e:	46c0      	nop			; (mov r8, r8)
10010240:	1001b290 	.word	0x1001b290
10010244:	1001af20 	.word	0x1001af20
10010248:	1001576f 	.word	0x1001576f
1001024c:	1001b298 	.word	0x1001b298
10010250:	1001b2ac 	.word	0x1001b2ac
10010254:	1000fe91 	.word	0x1000fe91

10010258 <gapc_con_req_ind>:
10010258:	b5f0      	push	{r4, r5, r6, r7, lr}
1001025a:	7845      	ldrb	r5, [r0, #1]
1001025c:	7803      	ldrb	r3, [r0, #0]
1001025e:	4c30      	ldr	r4, [pc, #192]	; (10010320 <gapc_con_req_ind+0xc8>)
10010260:	022d      	lsls	r5, r5, #8
10010262:	431d      	orrs	r5, r3
10010264:	85a5      	strh	r5, [r4, #44]	; 0x2c
10010266:	78c3      	ldrb	r3, [r0, #3]
10010268:	7882      	ldrb	r2, [r0, #2]
1001026a:	b08b      	sub	sp, #44	; 0x2c
1001026c:	021b      	lsls	r3, r3, #8
1001026e:	431a      	orrs	r2, r3
10010270:	466b      	mov	r3, sp
10010272:	9205      	str	r2, [sp, #20]
10010274:	8a9b      	ldrh	r3, [r3, #20]
10010276:	2120      	movs	r1, #32
10010278:	85e3      	strh	r3, [r4, #46]	; 0x2e
1001027a:	7943      	ldrb	r3, [r0, #5]
1001027c:	7902      	ldrb	r2, [r0, #4]
1001027e:	021b      	lsls	r3, r3, #8
10010280:	431a      	orrs	r2, r3
10010282:	466b      	mov	r3, sp
10010284:	9206      	str	r2, [sp, #24]
10010286:	8b1b      	ldrh	r3, [r3, #24]
10010288:	1c06      	adds	r6, r0, #0
1001028a:	8623      	strh	r3, [r4, #48]	; 0x30
1001028c:	79c3      	ldrb	r3, [r0, #7]
1001028e:	7982      	ldrb	r2, [r0, #6]
10010290:	021b      	lsls	r3, r3, #8
10010292:	431a      	orrs	r2, r3
10010294:	466b      	mov	r3, sp
10010296:	9207      	str	r2, [sp, #28]
10010298:	466a      	mov	r2, sp
1001029a:	8b9b      	ldrh	r3, [r3, #28]
1001029c:	1852      	adds	r2, r2, r1
1001029e:	8663      	strh	r3, [r4, #50]	; 0x32
100102a0:	7a43      	ldrb	r3, [r0, #9]
100102a2:	1c01      	adds	r1, r0, #0
100102a4:	9308      	str	r3, [sp, #32]
100102a6:	1c23      	adds	r3, r4, #0
100102a8:	7812      	ldrb	r2, [r2, #0]
100102aa:	3377      	adds	r3, #119	; 0x77
100102ac:	3478      	adds	r4, #120	; 0x78
100102ae:	701a      	strb	r2, [r3, #0]
100102b0:	310a      	adds	r1, #10
100102b2:	2206      	movs	r2, #6
100102b4:	4b1b      	ldr	r3, [pc, #108]	; (10010324 <gapc_con_req_ind+0xcc>)
100102b6:	1c20      	adds	r0, r4, #0
100102b8:	4798      	blx	r3
100102ba:	7c33      	ldrb	r3, [r6, #16]
100102bc:	9309      	str	r3, [sp, #36]	; 0x24
100102be:	4b1a      	ldr	r3, [pc, #104]	; (10010328 <gapc_con_req_ind+0xd0>)
100102c0:	4798      	blx	r3
100102c2:	4e1a      	ldr	r6, [pc, #104]	; (1001032c <gapc_con_req_ind+0xd4>)
100102c4:	1e07      	subs	r7, r0, #0
100102c6:	2f07      	cmp	r7, #7
100102c8:	d81b      	bhi.n	10010302 <gapc_con_req_ind+0xaa>
100102ca:	2312      	movs	r3, #18
100102cc:	4343      	muls	r3, r0
100102ce:	18f0      	adds	r0, r6, r3
100102d0:	8145      	strh	r5, [r0, #10]
100102d2:	4669      	mov	r1, sp
100102d4:	2524      	movs	r5, #36	; 0x24
100102d6:	1949      	adds	r1, r1, r5
100102d8:	7809      	ldrb	r1, [r1, #0]
100102da:	2206      	movs	r2, #6
100102dc:	54f1      	strb	r1, [r6, r3]
100102de:	2120      	movs	r1, #32
100102e0:	466b      	mov	r3, sp
100102e2:	185b      	adds	r3, r3, r1
100102e4:	781b      	ldrb	r3, [r3, #0]
100102e6:	1c21      	adds	r1, r4, #0
100102e8:	7043      	strb	r3, [r0, #1]
100102ea:	466b      	mov	r3, sp
100102ec:	8a9b      	ldrh	r3, [r3, #20]
100102ee:	3002      	adds	r0, #2
100102f0:	8143      	strh	r3, [r0, #10]
100102f2:	466b      	mov	r3, sp
100102f4:	8b1b      	ldrh	r3, [r3, #24]
100102f6:	8183      	strh	r3, [r0, #12]
100102f8:	466b      	mov	r3, sp
100102fa:	8b9b      	ldrh	r3, [r3, #28]
100102fc:	81c3      	strh	r3, [r0, #14]
100102fe:	4b09      	ldr	r3, [pc, #36]	; (10010324 <gapc_con_req_ind+0xcc>)
10010300:	4798      	blx	r3
10010302:	2112      	movs	r1, #18
10010304:	2300      	movs	r3, #0
10010306:	434f      	muls	r7, r1
10010308:	9300      	str	r3, [sp, #0]
1001030a:	9301      	str	r3, [sp, #4]
1001030c:	19f6      	adds	r6, r6, r7
1001030e:	8971      	ldrh	r1, [r6, #10]
10010310:	4a07      	ldr	r2, [pc, #28]	; (10010330 <gapc_con_req_ind+0xd8>)
10010312:	9102      	str	r1, [sp, #8]
10010314:	1c10      	adds	r0, r2, #0
10010316:	1c19      	adds	r1, r3, #0
10010318:	4c06      	ldr	r4, [pc, #24]	; (10010334 <gapc_con_req_ind+0xdc>)
1001031a:	47a0      	blx	r4
1001031c:	b00b      	add	sp, #44	; 0x2c
1001031e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010320:	1001afb2 	.word	0x1001afb2
10010324:	1001576f 	.word	0x1001576f
10010328:	1001009d 	.word	0x1001009d
1001032c:	1001af22 	.word	0x1001af22
10010330:	10019fe0 	.word	0x10019fe0
10010334:	10010195 	.word	0x10010195

10010338 <gapc_disconnect_cmd_handler>:
10010338:	2204      	movs	r2, #4
1001033a:	b510      	push	{r4, lr}
1001033c:	4b0c      	ldr	r3, [pc, #48]	; (10010370 <gapc_disconnect_cmd_handler+0x38>)
1001033e:	2400      	movs	r4, #0
10010340:	701a      	strb	r2, [r3, #0]
10010342:	320a      	adds	r2, #10
10010344:	705a      	strb	r2, [r3, #1]
10010346:	709a      	strb	r2, [r3, #2]
10010348:	4a0a      	ldr	r2, [pc, #40]	; (10010374 <gapc_disconnect_cmd_handler+0x3c>)
1001034a:	70d9      	strb	r1, [r3, #3]
1001034c:	8811      	ldrh	r1, [r2, #0]
1001034e:	8812      	ldrh	r2, [r2, #0]
10010350:	7119      	strb	r1, [r3, #4]
10010352:	0a12      	lsrs	r2, r2, #8
10010354:	715a      	strb	r2, [r3, #5]
10010356:	2201      	movs	r2, #1
10010358:	721a      	strb	r2, [r3, #8]
1001035a:	1892      	adds	r2, r2, r2
1001035c:	7258      	strb	r0, [r3, #9]
1001035e:	719a      	strb	r2, [r3, #6]
10010360:	71dc      	strb	r4, [r3, #7]
10010362:	1c18      	adds	r0, r3, #0
10010364:	210a      	movs	r1, #10
10010366:	4b04      	ldr	r3, [pc, #16]	; (10010378 <gapc_disconnect_cmd_handler+0x40>)
10010368:	4798      	blx	r3
1001036a:	1c20      	adds	r0, r4, #0
1001036c:	bd10      	pop	{r4, pc}
1001036e:	46c0      	nop			; (mov r8, r8)
10010370:	1001b290 	.word	0x1001b290
10010374:	1001af20 	.word	0x1001af20
10010378:	1000fe91 	.word	0x1000fe91

1001037c <gapc_disconnect_ind>:
1001037c:	1c02      	adds	r2, r0, #0
1001037e:	b508      	push	{r3, lr}
10010380:	7843      	ldrb	r3, [r0, #1]
10010382:	7800      	ldrb	r0, [r0, #0]
10010384:	021b      	lsls	r3, r3, #8
10010386:	4318      	orrs	r0, r3
10010388:	8008      	strh	r0, [r1, #0]
1001038a:	7893      	ldrb	r3, [r2, #2]
1001038c:	708b      	strb	r3, [r1, #2]
1001038e:	2100      	movs	r1, #0
10010390:	4b05      	ldr	r3, [pc, #20]	; (100103a8 <gapc_disconnect_ind+0x2c>)
10010392:	4798      	blx	r3
10010394:	2807      	cmp	r0, #7
10010396:	d806      	bhi.n	100103a6 <gapc_disconnect_ind+0x2a>
10010398:	2312      	movs	r3, #18
1001039a:	4358      	muls	r0, r3
1001039c:	4b03      	ldr	r3, [pc, #12]	; (100103ac <gapc_disconnect_ind+0x30>)
1001039e:	1818      	adds	r0, r3, r0
100103a0:	2301      	movs	r3, #1
100103a2:	425b      	negs	r3, r3
100103a4:	8143      	strh	r3, [r0, #10]
100103a6:	bd08      	pop	{r3, pc}
100103a8:	10010061 	.word	0x10010061
100103ac:	1001af22 	.word	0x1001af22

100103b0 <gapc_bond_cmd_handler>:
100103b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100103b2:	9300      	str	r3, [sp, #0]
100103b4:	2312      	movs	r3, #18
100103b6:	1c04      	adds	r4, r0, #0
100103b8:	a808      	add	r0, sp, #32
100103ba:	7807      	ldrb	r7, [r0, #0]
100103bc:	a809      	add	r0, sp, #36	; 0x24
100103be:	7806      	ldrb	r6, [r0, #0]
100103c0:	a80a      	add	r0, sp, #40	; 0x28
100103c2:	7805      	ldrb	r5, [r0, #0]
100103c4:	a80b      	add	r0, sp, #44	; 0x2c
100103c6:	7800      	ldrb	r0, [r0, #0]
100103c8:	9001      	str	r0, [sp, #4]
100103ca:	4810      	ldr	r0, [pc, #64]	; (1001040c <gapc_bond_cmd_handler+0x5c>)
100103cc:	7003      	strb	r3, [r0, #0]
100103ce:	230e      	movs	r3, #14
100103d0:	70c4      	strb	r4, [r0, #3]
100103d2:	4c0f      	ldr	r4, [pc, #60]	; (10010410 <gapc_bond_cmd_handler+0x60>)
100103d4:	7043      	strb	r3, [r0, #1]
100103d6:	7083      	strb	r3, [r0, #2]
100103d8:	8823      	ldrh	r3, [r4, #0]
100103da:	8824      	ldrh	r4, [r4, #0]
100103dc:	7103      	strb	r3, [r0, #4]
100103de:	466b      	mov	r3, sp
100103e0:	781b      	ldrb	r3, [r3, #0]
100103e2:	0a24      	lsrs	r4, r4, #8
100103e4:	72c3      	strb	r3, [r0, #11]
100103e6:	466b      	mov	r3, sp
100103e8:	791b      	ldrb	r3, [r3, #4]
100103ea:	7144      	strb	r4, [r0, #5]
100103ec:	73c3      	strb	r3, [r0, #15]
100103ee:	2308      	movs	r3, #8
100103f0:	7183      	strb	r3, [r0, #6]
100103f2:	2300      	movs	r3, #0
100103f4:	240a      	movs	r4, #10
100103f6:	7241      	strb	r1, [r0, #9]
100103f8:	71c3      	strb	r3, [r0, #7]
100103fa:	2110      	movs	r1, #16
100103fc:	4b05      	ldr	r3, [pc, #20]	; (10010414 <gapc_bond_cmd_handler+0x64>)
100103fe:	7307      	strb	r7, [r0, #12]
10010400:	7346      	strb	r6, [r0, #13]
10010402:	7385      	strb	r5, [r0, #14]
10010404:	7204      	strb	r4, [r0, #8]
10010406:	7282      	strb	r2, [r0, #10]
10010408:	4798      	blx	r3
1001040a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1001040c:	1001b290 	.word	0x1001b290
10010410:	1001af20 	.word	0x1001af20
10010414:	1000fe91 	.word	0x1000fe91

10010418 <gapc_bond_ind>:
10010418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001041a:	780e      	ldrb	r6, [r1, #0]
1001041c:	1c03      	adds	r3, r0, #0
1001041e:	1eb0      	subs	r0, r6, #2
10010420:	2805      	cmp	r0, #5
10010422:	d85d      	bhi.n	100104e0 <gapc_bond_ind+0xc8>
10010424:	1c15      	adds	r5, r2, #0
10010426:	1c0c      	adds	r4, r1, #0
10010428:	f002 fb0a 	bl	10012a40 <__gnu_thumb1_case_uqi>
1001042c:	2f5a030d 	.word	0x2f5a030d
10010430:	4740      	.short	0x4740
10010432:	2009      	movs	r0, #9
10010434:	2a00      	cmp	r2, #0
10010436:	d054      	beq.n	100104e2 <gapc_bond_ind+0xca>
10010438:	0a1b      	lsrs	r3, r3, #8
1001043a:	8053      	strh	r3, [r2, #2]
1001043c:	788b      	ldrb	r3, [r1, #2]
1001043e:	4829      	ldr	r0, [pc, #164]	; (100104e4 <gapc_bond_ind+0xcc>)
10010440:	7113      	strb	r3, [r2, #4]
10010442:	2100      	movs	r1, #0
10010444:	e01c      	b.n	10010480 <gapc_bond_ind+0x68>
10010446:	2009      	movs	r0, #9
10010448:	2a00      	cmp	r2, #0
1001044a:	d04a      	beq.n	100104e2 <gapc_bond_ind+0xca>
1001044c:	4c25      	ldr	r4, [pc, #148]	; (100104e4 <gapc_bond_ind+0xcc>)
1001044e:	0a1b      	lsrs	r3, r3, #8
10010450:	8053      	strh	r3, [r2, #2]
10010452:	788b      	ldrb	r3, [r1, #2]
10010454:	2700      	movs	r7, #0
10010456:	1c10      	adds	r0, r2, #0
10010458:	1c21      	adds	r1, r4, #0
1001045a:	7013      	strb	r3, [r2, #0]
1001045c:	4e22      	ldr	r6, [pc, #136]	; (100104e8 <gapc_bond_ind+0xd0>)
1001045e:	7117      	strb	r7, [r2, #4]
10010460:	312e      	adds	r1, #46	; 0x2e
10010462:	2217      	movs	r2, #23
10010464:	3032      	adds	r0, #50	; 0x32
10010466:	47b0      	blx	r6
10010468:	1c28      	adds	r0, r5, #0
1001046a:	1c21      	adds	r1, r4, #0
1001046c:	2210      	movs	r2, #16
1001046e:	311e      	adds	r1, #30
10010470:	3022      	adds	r0, #34	; 0x22
10010472:	47b0      	blx	r6
10010474:	1ca1      	adds	r1, r4, #2
10010476:	1da8      	adds	r0, r5, #6
10010478:	221c      	movs	r2, #28
1001047a:	47b0      	blx	r6
1001047c:	1c20      	adds	r0, r4, #0
1001047e:	1c39      	adds	r1, r7, #0
10010480:	2246      	movs	r2, #70	; 0x46
10010482:	4b1a      	ldr	r3, [pc, #104]	; (100104ec <gapc_bond_ind+0xd4>)
10010484:	4798      	blx	r3
10010486:	2009      	movs	r0, #9
10010488:	e02b      	b.n	100104e2 <gapc_bond_ind+0xca>
1001048a:	4d16      	ldr	r5, [pc, #88]	; (100104e4 <gapc_bond_ind+0xcc>)
1001048c:	3102      	adds	r1, #2
1001048e:	1c28      	adds	r0, r5, #0
10010490:	2210      	movs	r2, #16
10010492:	4e15      	ldr	r6, [pc, #84]	; (100104e8 <gapc_bond_ind+0xd0>)
10010494:	302e      	adds	r0, #46	; 0x2e
10010496:	47b0      	blx	r6
10010498:	1c28      	adds	r0, r5, #0
1001049a:	1c21      	adds	r1, r4, #0
1001049c:	303f      	adds	r0, #63	; 0x3f
1001049e:	3112      	adds	r1, #18
100104a0:	2206      	movs	r2, #6
100104a2:	47b0      	blx	r6
100104a4:	7e23      	ldrb	r3, [r4, #24]
100104a6:	353e      	adds	r5, #62	; 0x3e
100104a8:	702b      	strb	r3, [r5, #0]
100104aa:	e019      	b.n	100104e0 <gapc_bond_ind+0xc8>
100104ac:	480d      	ldr	r0, [pc, #52]	; (100104e4 <gapc_bond_ind+0xcc>)
100104ae:	3102      	adds	r1, #2
100104b0:	2210      	movs	r2, #16
100104b2:	4b0d      	ldr	r3, [pc, #52]	; (100104e8 <gapc_bond_ind+0xd0>)
100104b4:	301e      	adds	r0, #30
100104b6:	4798      	blx	r3
100104b8:	e012      	b.n	100104e0 <gapc_bond_ind+0xc8>
100104ba:	4d0a      	ldr	r5, [pc, #40]	; (100104e4 <gapc_bond_ind+0xcc>)
100104bc:	3102      	adds	r1, #2
100104be:	2210      	movs	r2, #16
100104c0:	4e09      	ldr	r6, [pc, #36]	; (100104e8 <gapc_bond_ind+0xd0>)
100104c2:	1ca8      	adds	r0, r5, #2
100104c4:	47b0      	blx	r6
100104c6:	1c28      	adds	r0, r5, #0
100104c8:	1c21      	adds	r1, r4, #0
100104ca:	7ce3      	ldrb	r3, [r4, #19]
100104cc:	7ca2      	ldrb	r2, [r4, #18]
100104ce:	021b      	lsls	r3, r3, #8
100104d0:	4313      	orrs	r3, r2
100104d2:	3014      	adds	r0, #20
100104d4:	3114      	adds	r1, #20
100104d6:	2208      	movs	r2, #8
100104d8:	826b      	strh	r3, [r5, #18]
100104da:	47b0      	blx	r6
100104dc:	7f23      	ldrb	r3, [r4, #28]
100104de:	772b      	strb	r3, [r5, #28]
100104e0:	2000      	movs	r0, #0
100104e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100104e4:	1001a010 	.word	0x1001a010
100104e8:	1001576f 	.word	0x1001576f
100104ec:	10015781 	.word	0x10015781

100104f0 <gapc_bond_req_ind>:
100104f0:	b570      	push	{r4, r5, r6, lr}
100104f2:	780c      	ldrb	r4, [r1, #0]
100104f4:	1c03      	adds	r3, r0, #0
100104f6:	7849      	ldrb	r1, [r1, #1]
100104f8:	2c07      	cmp	r4, #7
100104fa:	d85c      	bhi.n	100105b6 <gapc_bond_req_ind+0xc6>
100104fc:	1c20      	adds	r0, r4, #0
100104fe:	f002 fa9f 	bl	10012a40 <__gnu_thumb1_case_uqi>
10010502:	5a04      	.short	0x5a04
10010504:	5a0b5a5a 	.word	0x5a0b5a5a
10010508:	1f1f      	.short	0x1f1f
1001050a:	200a      	movs	r0, #10
1001050c:	2a00      	cmp	r2, #0
1001050e:	d053      	beq.n	100105b8 <gapc_bond_req_ind+0xc8>
10010510:	0a1b      	lsrs	r3, r3, #8
10010512:	8013      	strh	r3, [r2, #0]
10010514:	7091      	strb	r1, [r2, #2]
10010516:	e04f      	b.n	100105b8 <gapc_bond_req_ind+0xc8>
10010518:	2a00      	cmp	r2, #0
1001051a:	d00b      	beq.n	10010534 <gapc_bond_req_ind+0x44>
1001051c:	0a1b      	lsrs	r3, r3, #8
1001051e:	8013      	strh	r3, [r2, #0]
10010520:	2900      	cmp	r1, #0
10010522:	d102      	bne.n	1001052a <gapc_bond_req_ind+0x3a>
10010524:	2301      	movs	r3, #1
10010526:	7093      	strb	r3, [r2, #2]
10010528:	e004      	b.n	10010534 <gapc_bond_req_ind+0x44>
1001052a:	2300      	movs	r3, #0
1001052c:	7093      	strb	r3, [r2, #2]
1001052e:	2902      	cmp	r1, #2
10010530:	d102      	bne.n	10010538 <gapc_bond_req_ind+0x48>
10010532:	70d3      	strb	r3, [r2, #3]
10010534:	200c      	movs	r0, #12
10010536:	e03f      	b.n	100105b8 <gapc_bond_req_ind+0xc8>
10010538:	2901      	cmp	r1, #1
1001053a:	d1fb      	bne.n	10010534 <gapc_bond_req_ind+0x44>
1001053c:	70d1      	strb	r1, [r2, #3]
1001053e:	e7f9      	b.n	10010534 <gapc_bond_req_ind+0x44>
10010540:	2214      	movs	r2, #20
10010542:	481e      	ldr	r0, [pc, #120]	; (100105bc <gapc_bond_req_ind+0xcc>)
10010544:	0a1b      	lsrs	r3, r3, #8
10010546:	70c3      	strb	r3, [r0, #3]
10010548:	4b1d      	ldr	r3, [pc, #116]	; (100105c0 <gapc_bond_req_ind+0xd0>)
1001054a:	7002      	strb	r2, [r0, #0]
1001054c:	3a06      	subs	r2, #6
1001054e:	7042      	strb	r2, [r0, #1]
10010550:	7082      	strb	r2, [r0, #2]
10010552:	881a      	ldrh	r2, [r3, #0]
10010554:	881b      	ldrh	r3, [r3, #0]
10010556:	4e1b      	ldr	r6, [pc, #108]	; (100105c4 <gapc_bond_req_ind+0xd4>)
10010558:	0a1b      	lsrs	r3, r3, #8
1001055a:	7143      	strb	r3, [r0, #5]
1001055c:	2301      	movs	r3, #1
1001055e:	7102      	strb	r2, [r0, #4]
10010560:	7204      	strb	r4, [r0, #8]
10010562:	7243      	strb	r3, [r0, #9]
10010564:	1c05      	adds	r5, r0, #0
10010566:	1c31      	adds	r1, r6, #0
10010568:	300a      	adds	r0, #10
1001056a:	2c07      	cmp	r4, #7
1001056c:	d116      	bne.n	1001059c <gapc_bond_req_ind+0xac>
1001056e:	317e      	adds	r1, #126	; 0x7e
10010570:	2210      	movs	r2, #16
10010572:	4c15      	ldr	r4, [pc, #84]	; (100105c8 <gapc_bond_req_ind+0xd8>)
10010574:	47a0      	blx	r4
10010576:	1c33      	adds	r3, r6, #0
10010578:	1c31      	adds	r1, r6, #0
1001057a:	1c28      	adds	r0, r5, #0
1001057c:	338e      	adds	r3, #142	; 0x8e
1001057e:	881b      	ldrh	r3, [r3, #0]
10010580:	3190      	adds	r1, #144	; 0x90
10010582:	76ab      	strb	r3, [r5, #26]
10010584:	2208      	movs	r2, #8
10010586:	0a1b      	lsrs	r3, r3, #8
10010588:	301c      	adds	r0, #28
1001058a:	76eb      	strb	r3, [r5, #27]
1001058c:	47a0      	blx	r4
1001058e:	1c31      	adds	r1, r6, #0
10010590:	3198      	adds	r1, #152	; 0x98
10010592:	780a      	ldrb	r2, [r1, #0]
10010594:	1d6b      	adds	r3, r5, #5
10010596:	77da      	strb	r2, [r3, #31]
10010598:	2125      	movs	r1, #37	; 0x25
1001059a:	e004      	b.n	100105a6 <gapc_bond_req_ind+0xb6>
1001059c:	319a      	adds	r1, #154	; 0x9a
1001059e:	2210      	movs	r2, #16
100105a0:	4b09      	ldr	r3, [pc, #36]	; (100105c8 <gapc_bond_req_ind+0xd8>)
100105a2:	4798      	blx	r3
100105a4:	211a      	movs	r1, #26
100105a6:	1c0b      	adds	r3, r1, #0
100105a8:	2400      	movs	r4, #0
100105aa:	3b08      	subs	r3, #8
100105ac:	71ab      	strb	r3, [r5, #6]
100105ae:	1c28      	adds	r0, r5, #0
100105b0:	4b06      	ldr	r3, [pc, #24]	; (100105cc <gapc_bond_req_ind+0xdc>)
100105b2:	71ec      	strb	r4, [r5, #7]
100105b4:	4798      	blx	r3
100105b6:	2000      	movs	r0, #0
100105b8:	bd70      	pop	{r4, r5, r6, pc}
100105ba:	46c0      	nop			; (mov r8, r8)
100105bc:	1001b290 	.word	0x1001b290
100105c0:	1001af20 	.word	0x1001af20
100105c4:	1001afb2 	.word	0x1001afb2
100105c8:	1001576f 	.word	0x1001576f
100105cc:	1000fe91 	.word	0x1000fe91

100105d0 <gapc_bond_cfm_handler_pair_resp>:
100105d0:	b5f0      	push	{r4, r5, r6, r7, lr}
100105d2:	b085      	sub	sp, #20
100105d4:	1c07      	adds	r7, r0, #0
100105d6:	a80a      	add	r0, sp, #40	; 0x28
100105d8:	7806      	ldrb	r6, [r0, #0]
100105da:	a80b      	add	r0, sp, #44	; 0x2c
100105dc:	7805      	ldrb	r5, [r0, #0]
100105de:	a80c      	add	r0, sp, #48	; 0x30
100105e0:	7800      	ldrb	r0, [r0, #0]
100105e2:	2414      	movs	r4, #20
100105e4:	9002      	str	r0, [sp, #8]
100105e6:	a80d      	add	r0, sp, #52	; 0x34
100105e8:	7800      	ldrb	r0, [r0, #0]
100105ea:	9301      	str	r3, [sp, #4]
100105ec:	9003      	str	r0, [sp, #12]
100105ee:	a80e      	add	r0, sp, #56	; 0x38
100105f0:	8800      	ldrh	r0, [r0, #0]
100105f2:	4684      	mov	ip, r0
100105f4:	4812      	ldr	r0, [pc, #72]	; (10010640 <gapc_bond_cfm_handler_pair_resp+0x70>)
100105f6:	7004      	strb	r4, [r0, #0]
100105f8:	3c06      	subs	r4, #6
100105fa:	7044      	strb	r4, [r0, #1]
100105fc:	7084      	strb	r4, [r0, #2]
100105fe:	4664      	mov	r4, ip
10010600:	70c4      	strb	r4, [r0, #3]
10010602:	4c10      	ldr	r4, [pc, #64]	; (10010644 <gapc_bond_cfm_handler_pair_resp+0x74>)
10010604:	7247      	strb	r7, [r0, #9]
10010606:	8823      	ldrh	r3, [r4, #0]
10010608:	8824      	ldrh	r4, [r4, #0]
1001060a:	7103      	strb	r3, [r0, #4]
1001060c:	466b      	mov	r3, sp
1001060e:	791b      	ldrb	r3, [r3, #4]
10010610:	0a24      	lsrs	r4, r4, #8
10010612:	7303      	strb	r3, [r0, #12]
10010614:	466b      	mov	r3, sp
10010616:	7a1b      	ldrb	r3, [r3, #8]
10010618:	7144      	strb	r4, [r0, #5]
1001061a:	73c3      	strb	r3, [r0, #15]
1001061c:	466b      	mov	r3, sp
1001061e:	7b1b      	ldrb	r3, [r3, #12]
10010620:	2401      	movs	r4, #1
10010622:	7403      	strb	r3, [r0, #16]
10010624:	2309      	movs	r3, #9
10010626:	7183      	strb	r3, [r0, #6]
10010628:	2300      	movs	r3, #0
1001062a:	7204      	strb	r4, [r0, #8]
1001062c:	7281      	strb	r1, [r0, #10]
1001062e:	72c2      	strb	r2, [r0, #11]
10010630:	7346      	strb	r6, [r0, #13]
10010632:	7385      	strb	r5, [r0, #14]
10010634:	71c3      	strb	r3, [r0, #7]
10010636:	2111      	movs	r1, #17
10010638:	4b03      	ldr	r3, [pc, #12]	; (10010648 <gapc_bond_cfm_handler_pair_resp+0x78>)
1001063a:	4798      	blx	r3
1001063c:	b005      	add	sp, #20
1001063e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010640:	1001b290 	.word	0x1001b290
10010644:	1001af20 	.word	0x1001af20
10010648:	1000fe91 	.word	0x1000fe91

1001064c <gapc_bond_cfm_handler_key_exch>:
1001064c:	b538      	push	{r3, r4, r5, lr}
1001064e:	2514      	movs	r5, #20
10010650:	4c0d      	ldr	r4, [pc, #52]	; (10010688 <gapc_bond_cfm_handler_key_exch+0x3c>)
10010652:	70e3      	strb	r3, [r4, #3]
10010654:	4b0d      	ldr	r3, [pc, #52]	; (1001068c <gapc_bond_cfm_handler_key_exch+0x40>)
10010656:	7025      	strb	r5, [r4, #0]
10010658:	3d06      	subs	r5, #6
1001065a:	7065      	strb	r5, [r4, #1]
1001065c:	70a5      	strb	r5, [r4, #2]
1001065e:	881d      	ldrh	r5, [r3, #0]
10010660:	881b      	ldrh	r3, [r3, #0]
10010662:	7220      	strb	r0, [r4, #8]
10010664:	0a1b      	lsrs	r3, r3, #8
10010666:	7163      	strb	r3, [r4, #5]
10010668:	7261      	strb	r1, [r4, #9]
1001066a:	4b09      	ldr	r3, [pc, #36]	; (10010690 <gapc_bond_cfm_handler_key_exch+0x44>)
1001066c:	1c11      	adds	r1, r2, #0
1001066e:	4809      	ldr	r0, [pc, #36]	; (10010694 <gapc_bond_cfm_handler_key_exch+0x48>)
10010670:	2210      	movs	r2, #16
10010672:	7125      	strb	r5, [r4, #4]
10010674:	4798      	blx	r3
10010676:	2312      	movs	r3, #18
10010678:	71a3      	strb	r3, [r4, #6]
1001067a:	2300      	movs	r3, #0
1001067c:	1c20      	adds	r0, r4, #0
1001067e:	71e3      	strb	r3, [r4, #7]
10010680:	211a      	movs	r1, #26
10010682:	4b05      	ldr	r3, [pc, #20]	; (10010698 <gapc_bond_cfm_handler_key_exch+0x4c>)
10010684:	4798      	blx	r3
10010686:	bd38      	pop	{r3, r4, r5, pc}
10010688:	1001b290 	.word	0x1001b290
1001068c:	1001af20 	.word	0x1001af20
10010690:	1001576f 	.word	0x1001576f
10010694:	1001b29a 	.word	0x1001b29a
10010698:	1000fe91 	.word	0x1000fe91

1001069c <gapc_security_cmd_handler>:
1001069c:	221a      	movs	r2, #26
1001069e:	b508      	push	{r3, lr}
100106a0:	4b0b      	ldr	r3, [pc, #44]	; (100106d0 <gapc_security_cmd_handler+0x34>)
100106a2:	701a      	strb	r2, [r3, #0]
100106a4:	3a0c      	subs	r2, #12
100106a6:	705a      	strb	r2, [r3, #1]
100106a8:	709a      	strb	r2, [r3, #2]
100106aa:	4a0a      	ldr	r2, [pc, #40]	; (100106d4 <gapc_security_cmd_handler+0x38>)
100106ac:	70d8      	strb	r0, [r3, #3]
100106ae:	8810      	ldrh	r0, [r2, #0]
100106b0:	8812      	ldrh	r2, [r2, #0]
100106b2:	7118      	strb	r0, [r3, #4]
100106b4:	0a12      	lsrs	r2, r2, #8
100106b6:	715a      	strb	r2, [r3, #5]
100106b8:	220c      	movs	r2, #12
100106ba:	721a      	strb	r2, [r3, #8]
100106bc:	3a0a      	subs	r2, #10
100106be:	719a      	strb	r2, [r3, #6]
100106c0:	2200      	movs	r2, #0
100106c2:	7259      	strb	r1, [r3, #9]
100106c4:	71da      	strb	r2, [r3, #7]
100106c6:	1c18      	adds	r0, r3, #0
100106c8:	210a      	movs	r1, #10
100106ca:	4b03      	ldr	r3, [pc, #12]	; (100106d8 <gapc_security_cmd_handler+0x3c>)
100106cc:	4798      	blx	r3
100106ce:	bd08      	pop	{r3, pc}
100106d0:	1001b290 	.word	0x1001b290
100106d4:	1001af20 	.word	0x1001af20
100106d8:	1000fe91 	.word	0x1000fe91

100106dc <gapc_encrypt_cmd_handler>:
100106dc:	b5f0      	push	{r4, r5, r6, r7, lr}
100106de:	2500      	movs	r5, #0
100106e0:	b089      	sub	sp, #36	; 0x24
100106e2:	9306      	str	r3, [sp, #24]
100106e4:	ab0e      	add	r3, sp, #56	; 0x38
100106e6:	781b      	ldrb	r3, [r3, #0]
100106e8:	1c17      	adds	r7, r2, #0
100106ea:	9307      	str	r3, [sp, #28]
100106ec:	ab0f      	add	r3, sp, #60	; 0x3c
100106ee:	781b      	ldrb	r3, [r3, #0]
100106f0:	4a19      	ldr	r2, [pc, #100]	; (10010758 <gapc_encrypt_cmd_handler+0x7c>)
100106f2:	1c06      	adds	r6, r0, #0
100106f4:	9105      	str	r1, [sp, #20]
100106f6:	9300      	str	r3, [sp, #0]
100106f8:	9002      	str	r0, [sp, #8]
100106fa:	1c29      	adds	r1, r5, #0
100106fc:	1c2b      	adds	r3, r5, #0
100106fe:	9501      	str	r5, [sp, #4]
10010700:	1c10      	adds	r0, r2, #0
10010702:	4c16      	ldr	r4, [pc, #88]	; (1001075c <gapc_encrypt_cmd_handler+0x80>)
10010704:	47a0      	blx	r4
10010706:	2316      	movs	r3, #22
10010708:	4c15      	ldr	r4, [pc, #84]	; (10010760 <gapc_encrypt_cmd_handler+0x84>)
1001070a:	9905      	ldr	r1, [sp, #20]
1001070c:	7023      	strb	r3, [r4, #0]
1001070e:	3b08      	subs	r3, #8
10010710:	7063      	strb	r3, [r4, #1]
10010712:	70a3      	strb	r3, [r4, #2]
10010714:	4b13      	ldr	r3, [pc, #76]	; (10010764 <gapc_encrypt_cmd_handler+0x88>)
10010716:	70e6      	strb	r6, [r4, #3]
10010718:	881a      	ldrh	r2, [r3, #0]
1001071a:	881b      	ldrh	r3, [r3, #0]
1001071c:	7122      	strb	r2, [r4, #4]
1001071e:	0a1b      	lsrs	r3, r3, #8
10010720:	7163      	strb	r3, [r4, #5]
10010722:	230b      	movs	r3, #11
10010724:	4e10      	ldr	r6, [pc, #64]	; (10010768 <gapc_encrypt_cmd_handler+0x8c>)
10010726:	2210      	movs	r2, #16
10010728:	4810      	ldr	r0, [pc, #64]	; (1001076c <gapc_encrypt_cmd_handler+0x90>)
1001072a:	7223      	strb	r3, [r4, #8]
1001072c:	7265      	strb	r5, [r4, #9]
1001072e:	47b0      	blx	r6
10010730:	0a3b      	lsrs	r3, r7, #8
10010732:	9906      	ldr	r1, [sp, #24]
10010734:	2208      	movs	r2, #8
10010736:	480e      	ldr	r0, [pc, #56]	; (10010770 <gapc_encrypt_cmd_handler+0x94>)
10010738:	76e3      	strb	r3, [r4, #27]
1001073a:	76a7      	strb	r7, [r4, #26]
1001073c:	47b0      	blx	r6
1001073e:	466a      	mov	r2, sp
10010740:	7f12      	ldrb	r2, [r2, #28]
10010742:	1d63      	adds	r3, r4, #5
10010744:	77da      	strb	r2, [r3, #31]
10010746:	231d      	movs	r3, #29
10010748:	1c20      	adds	r0, r4, #0
1001074a:	71a3      	strb	r3, [r4, #6]
1001074c:	2125      	movs	r1, #37	; 0x25
1001074e:	4b09      	ldr	r3, [pc, #36]	; (10010774 <gapc_encrypt_cmd_handler+0x98>)
10010750:	71e5      	strb	r5, [r4, #7]
10010752:	4798      	blx	r3
10010754:	b009      	add	sp, #36	; 0x24
10010756:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010758:	10019ff0 	.word	0x10019ff0
1001075c:	10010195 	.word	0x10010195
10010760:	1001b290 	.word	0x1001b290
10010764:	1001af20 	.word	0x1001af20
10010768:	1001576f 	.word	0x1001576f
1001076c:	1001b29a 	.word	0x1001b29a
10010770:	1001b2ac 	.word	0x1001b2ac
10010774:	1000fe91 	.word	0x1000fe91

10010778 <gapc_encrypt_req_ind>:
10010778:	b508      	push	{r3, lr}
1001077a:	0a00      	lsrs	r0, r0, #8
1001077c:	8010      	strh	r0, [r2, #0]
1001077e:	784b      	ldrb	r3, [r1, #1]
10010780:	7808      	ldrb	r0, [r1, #0]
10010782:	021b      	lsls	r3, r3, #8
10010784:	4303      	orrs	r3, r0
10010786:	8053      	strh	r3, [r2, #2]
10010788:	1d10      	adds	r0, r2, #4
1001078a:	3102      	adds	r1, #2
1001078c:	2208      	movs	r2, #8
1001078e:	4b01      	ldr	r3, [pc, #4]	; (10010794 <gapc_encrypt_req_ind+0x1c>)
10010790:	4798      	blx	r3
10010792:	bd08      	pop	{r3, pc}
10010794:	1001576f 	.word	0x1001576f

10010798 <gapc_encrypt_cfm_handler>:
10010798:	b5f0      	push	{r4, r5, r6, r7, lr}
1001079a:	2500      	movs	r5, #0
1001079c:	b087      	sub	sp, #28
1001079e:	9304      	str	r3, [sp, #16]
100107a0:	ab0c      	add	r3, sp, #48	; 0x30
100107a2:	781b      	ldrb	r3, [r3, #0]
100107a4:	1c17      	adds	r7, r2, #0
100107a6:	4a15      	ldr	r2, [pc, #84]	; (100107fc <gapc_encrypt_cfm_handler+0x64>)
100107a8:	1c06      	adds	r6, r0, #0
100107aa:	9305      	str	r3, [sp, #20]
100107ac:	9100      	str	r1, [sp, #0]
100107ae:	9002      	str	r0, [sp, #8]
100107b0:	1c29      	adds	r1, r5, #0
100107b2:	1c2b      	adds	r3, r5, #0
100107b4:	9501      	str	r5, [sp, #4]
100107b6:	1c10      	adds	r0, r2, #0
100107b8:	4c11      	ldr	r4, [pc, #68]	; (10010800 <gapc_encrypt_cfm_handler+0x68>)
100107ba:	47a0      	blx	r4
100107bc:	2318      	movs	r3, #24
100107be:	4c11      	ldr	r4, [pc, #68]	; (10010804 <gapc_encrypt_cfm_handler+0x6c>)
100107c0:	9904      	ldr	r1, [sp, #16]
100107c2:	7023      	strb	r3, [r4, #0]
100107c4:	3b0a      	subs	r3, #10
100107c6:	7063      	strb	r3, [r4, #1]
100107c8:	70a3      	strb	r3, [r4, #2]
100107ca:	4b0f      	ldr	r3, [pc, #60]	; (10010808 <gapc_encrypt_cfm_handler+0x70>)
100107cc:	480f      	ldr	r0, [pc, #60]	; (1001080c <gapc_encrypt_cfm_handler+0x74>)
100107ce:	881a      	ldrh	r2, [r3, #0]
100107d0:	881b      	ldrh	r3, [r3, #0]
100107d2:	7122      	strb	r2, [r4, #4]
100107d4:	0a1b      	lsrs	r3, r3, #8
100107d6:	7163      	strb	r3, [r4, #5]
100107d8:	2210      	movs	r2, #16
100107da:	4b0d      	ldr	r3, [pc, #52]	; (10010810 <gapc_encrypt_cfm_handler+0x78>)
100107dc:	70e6      	strb	r6, [r4, #3]
100107de:	7227      	strb	r7, [r4, #8]
100107e0:	4798      	blx	r3
100107e2:	466b      	mov	r3, sp
100107e4:	7d1b      	ldrb	r3, [r3, #20]
100107e6:	1c20      	adds	r0, r4, #0
100107e8:	7663      	strb	r3, [r4, #25]
100107ea:	2312      	movs	r3, #18
100107ec:	211a      	movs	r1, #26
100107ee:	71a3      	strb	r3, [r4, #6]
100107f0:	4b08      	ldr	r3, [pc, #32]	; (10010814 <gapc_encrypt_cfm_handler+0x7c>)
100107f2:	71e5      	strb	r5, [r4, #7]
100107f4:	4798      	blx	r3
100107f6:	b007      	add	sp, #28
100107f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100107fa:	46c0      	nop			; (mov r8, r8)
100107fc:	1001a000 	.word	0x1001a000
10010800:	10010195 	.word	0x10010195
10010804:	1001b290 	.word	0x1001b290
10010808:	1001af20 	.word	0x1001af20
1001080c:	1001b299 	.word	0x1001b299
10010810:	1001576f 	.word	0x1001576f
10010814:	1000fe91 	.word	0x1000fe91

10010818 <gapc_encrypt_ind>:
10010818:	780b      	ldrb	r3, [r1, #0]
1001081a:	0a00      	lsrs	r0, r0, #8
1001081c:	70d3      	strb	r3, [r2, #3]
1001081e:	2300      	movs	r3, #0
10010820:	8010      	strh	r0, [r2, #0]
10010822:	7093      	strb	r3, [r2, #2]
10010824:	4770      	bx	lr
	...

10010828 <gapc_param_update_cfm_handler>:
10010828:	b538      	push	{r3, r4, r5, lr}
1001082a:	2410      	movs	r4, #16
1001082c:	1c05      	adds	r5, r0, #0
1001082e:	480e      	ldr	r0, [pc, #56]	; (10010868 <gapc_param_update_cfm_handler+0x40>)
10010830:	7004      	strb	r4, [r0, #0]
10010832:	3c02      	subs	r4, #2
10010834:	7044      	strb	r4, [r0, #1]
10010836:	7084      	strb	r4, [r0, #2]
10010838:	4c0c      	ldr	r4, [pc, #48]	; (1001086c <gapc_param_update_cfm_handler+0x44>)
1001083a:	70c5      	strb	r5, [r0, #3]
1001083c:	8825      	ldrh	r5, [r4, #0]
1001083e:	8824      	ldrh	r4, [r4, #0]
10010840:	72c3      	strb	r3, [r0, #11]
10010842:	0a1b      	lsrs	r3, r3, #8
10010844:	0a24      	lsrs	r4, r4, #8
10010846:	7303      	strb	r3, [r0, #12]
10010848:	2305      	movs	r3, #5
1001084a:	7144      	strb	r4, [r0, #5]
1001084c:	2400      	movs	r4, #0
1001084e:	7201      	strb	r1, [r0, #8]
10010850:	7242      	strb	r2, [r0, #9]
10010852:	7183      	strb	r3, [r0, #6]
10010854:	0a12      	lsrs	r2, r2, #8
10010856:	210d      	movs	r1, #13
10010858:	4b05      	ldr	r3, [pc, #20]	; (10010870 <gapc_param_update_cfm_handler+0x48>)
1001085a:	7105      	strb	r5, [r0, #4]
1001085c:	7282      	strb	r2, [r0, #10]
1001085e:	71c4      	strb	r4, [r0, #7]
10010860:	4798      	blx	r3
10010862:	1c20      	adds	r0, r4, #0
10010864:	bd38      	pop	{r3, r4, r5, pc}
10010866:	46c0      	nop			; (mov r8, r8)
10010868:	1001b290 	.word	0x1001b290
1001086c:	1001af20 	.word	0x1001af20
10010870:	1000fe91 	.word	0x1000fe91

10010874 <gapc_param_updated_ind>:
10010874:	2300      	movs	r3, #0
10010876:	0a00      	lsrs	r0, r0, #8
10010878:	8010      	strh	r0, [r2, #0]
1001087a:	7093      	strb	r3, [r2, #2]
1001087c:	784b      	ldrb	r3, [r1, #1]
1001087e:	7808      	ldrb	r0, [r1, #0]
10010880:	021b      	lsls	r3, r3, #8
10010882:	4303      	orrs	r3, r0
10010884:	8093      	strh	r3, [r2, #4]
10010886:	78cb      	ldrb	r3, [r1, #3]
10010888:	7888      	ldrb	r0, [r1, #2]
1001088a:	021b      	lsls	r3, r3, #8
1001088c:	4303      	orrs	r3, r0
1001088e:	80d3      	strh	r3, [r2, #6]
10010890:	794b      	ldrb	r3, [r1, #5]
10010892:	7909      	ldrb	r1, [r1, #4]
10010894:	021b      	lsls	r3, r3, #8
10010896:	430b      	orrs	r3, r1
10010898:	2007      	movs	r0, #7
1001089a:	8113      	strh	r3, [r2, #8]
1001089c:	4770      	bx	lr

1001089e <gapc_param_updated_req_ind>:
1001089e:	0a00      	lsrs	r0, r0, #8
100108a0:	8010      	strh	r0, [r2, #0]
100108a2:	784b      	ldrb	r3, [r1, #1]
100108a4:	7808      	ldrb	r0, [r1, #0]
100108a6:	021b      	lsls	r3, r3, #8
100108a8:	4303      	orrs	r3, r0
100108aa:	8053      	strh	r3, [r2, #2]
100108ac:	78cb      	ldrb	r3, [r1, #3]
100108ae:	7888      	ldrb	r0, [r1, #2]
100108b0:	021b      	lsls	r3, r3, #8
100108b2:	4303      	orrs	r3, r0
100108b4:	8093      	strh	r3, [r2, #4]
100108b6:	794b      	ldrb	r3, [r1, #5]
100108b8:	7908      	ldrb	r0, [r1, #4]
100108ba:	021b      	lsls	r3, r3, #8
100108bc:	4303      	orrs	r3, r0
100108be:	80d3      	strh	r3, [r2, #6]
100108c0:	79cb      	ldrb	r3, [r1, #7]
100108c2:	7989      	ldrb	r1, [r1, #6]
100108c4:	021b      	lsls	r3, r3, #8
100108c6:	430b      	orrs	r3, r1
100108c8:	2008      	movs	r0, #8
100108ca:	8113      	strh	r3, [r2, #8]
100108cc:	4770      	bx	lr
	...

100108d0 <gapc_dev_info_req_ind_handler>:
100108d0:	b508      	push	{r3, lr}
100108d2:	1c0b      	adds	r3, r1, #0
100108d4:	0a01      	lsrs	r1, r0, #8
100108d6:	8011      	strh	r1, [r2, #0]
100108d8:	7818      	ldrb	r0, [r3, #0]
100108da:	7090      	strb	r0, [r2, #2]
100108dc:	2800      	cmp	r0, #0
100108de:	d104      	bne.n	100108ea <gapc_dev_info_req_ind_handler+0x1a>
100108e0:	4b03      	ldr	r3, [pc, #12]	; (100108f0 <gapc_dev_info_req_ind_handler+0x20>)
100108e2:	33aa      	adds	r3, #170	; 0xaa
100108e4:	881b      	ldrh	r3, [r3, #0]
100108e6:	2b00      	cmp	r3, #0
100108e8:	d001      	beq.n	100108ee <gapc_dev_info_req_ind_handler+0x1e>
100108ea:	4b02      	ldr	r3, [pc, #8]	; (100108f4 <gapc_dev_info_req_ind_handler+0x24>)
100108ec:	4798      	blx	r3
100108ee:	bd08      	pop	{r3, pc}
100108f0:	1001afb2 	.word	0x1001afb2
100108f4:	1000ffa1 	.word	0x1000ffa1

100108f8 <gapc_sec_req_ind>:
100108f8:	0a00      	lsrs	r0, r0, #8
100108fa:	8010      	strh	r0, [r2, #0]
100108fc:	7809      	ldrb	r1, [r1, #0]
100108fe:	2301      	movs	r3, #1
10010900:	1c08      	adds	r0, r1, #0
10010902:	0889      	lsrs	r1, r1, #2
10010904:	4018      	ands	r0, r3
10010906:	400b      	ands	r3, r1
10010908:	70d0      	strb	r0, [r2, #3]
1001090a:	7113      	strb	r3, [r2, #4]
1001090c:	4770      	bx	lr

1001090e <gapc_sign_counter_ind_handler>:
1001090e:	0a00      	lsrs	r0, r0, #8
10010910:	8010      	strh	r0, [r2, #0]
10010912:	784b      	ldrb	r3, [r1, #1]
10010914:	0218      	lsls	r0, r3, #8
10010916:	788b      	ldrb	r3, [r1, #2]
10010918:	041b      	lsls	r3, r3, #16
1001091a:	4303      	orrs	r3, r0
1001091c:	7808      	ldrb	r0, [r1, #0]
1001091e:	4303      	orrs	r3, r0
10010920:	78c8      	ldrb	r0, [r1, #3]
10010922:	0600      	lsls	r0, r0, #24
10010924:	4303      	orrs	r3, r0
10010926:	6053      	str	r3, [r2, #4]
10010928:	794b      	ldrb	r3, [r1, #5]
1001092a:	0218      	lsls	r0, r3, #8
1001092c:	798b      	ldrb	r3, [r1, #6]
1001092e:	041b      	lsls	r3, r3, #16
10010930:	4303      	orrs	r3, r0
10010932:	7908      	ldrb	r0, [r1, #4]
10010934:	79c9      	ldrb	r1, [r1, #7]
10010936:	4303      	orrs	r3, r0
10010938:	0609      	lsls	r1, r1, #24
1001093a:	430b      	orrs	r3, r1
1001093c:	2000      	movs	r0, #0
1001093e:	6093      	str	r3, [r2, #8]
10010940:	4770      	bx	lr
	...

10010944 <gapc_peer_att_info_ind_handler>:
10010944:	b510      	push	{r4, lr}
10010946:	0a00      	lsrs	r0, r0, #8
10010948:	8010      	strh	r0, [r2, #0]
1001094a:	7808      	ldrb	r0, [r1, #0]
1001094c:	7090      	strb	r0, [r2, #2]
1001094e:	788b      	ldrb	r3, [r1, #2]
10010950:	784c      	ldrb	r4, [r1, #1]
10010952:	021b      	lsls	r3, r3, #8
10010954:	4323      	orrs	r3, r4
10010956:	8093      	strh	r3, [r2, #4]
10010958:	2801      	cmp	r0, #1
1001095a:	d027      	beq.n	100109ac <gapc_peer_att_info_ind_handler+0x68>
1001095c:	2800      	cmp	r0, #0
1001095e:	d017      	beq.n	10010990 <gapc_peer_att_info_ind_handler+0x4c>
10010960:	2802      	cmp	r0, #2
10010962:	d12a      	bne.n	100109ba <gapc_peer_att_info_ind_handler+0x76>
10010964:	790b      	ldrb	r3, [r1, #4]
10010966:	78c8      	ldrb	r0, [r1, #3]
10010968:	021b      	lsls	r3, r3, #8
1001096a:	4303      	orrs	r3, r0
1001096c:	8113      	strh	r3, [r2, #8]
1001096e:	798b      	ldrb	r3, [r1, #6]
10010970:	7948      	ldrb	r0, [r1, #5]
10010972:	021b      	lsls	r3, r3, #8
10010974:	4303      	orrs	r3, r0
10010976:	80d3      	strh	r3, [r2, #6]
10010978:	7a0b      	ldrb	r3, [r1, #8]
1001097a:	79c8      	ldrb	r0, [r1, #7]
1001097c:	021b      	lsls	r3, r3, #8
1001097e:	4303      	orrs	r3, r0
10010980:	8193      	strh	r3, [r2, #12]
10010982:	7a8b      	ldrb	r3, [r1, #10]
10010984:	7a49      	ldrb	r1, [r1, #9]
10010986:	021b      	lsls	r3, r3, #8
10010988:	430b      	orrs	r3, r1
1001098a:	8153      	strh	r3, [r2, #10]
1001098c:	2306      	movs	r3, #6
1001098e:	e013      	b.n	100109b8 <gapc_peer_att_info_ind_handler+0x74>
10010990:	1c14      	adds	r4, r2, #0
10010992:	1c20      	adds	r0, r4, #0
10010994:	790a      	ldrb	r2, [r1, #4]
10010996:	78cb      	ldrb	r3, [r1, #3]
10010998:	0212      	lsls	r2, r2, #8
1001099a:	431a      	orrs	r2, r3
1001099c:	80e2      	strh	r2, [r4, #6]
1001099e:	4b07      	ldr	r3, [pc, #28]	; (100109bc <gapc_peer_att_info_ind_handler+0x78>)
100109a0:	3008      	adds	r0, #8
100109a2:	3105      	adds	r1, #5
100109a4:	4798      	blx	r3
100109a6:	2302      	movs	r3, #2
100109a8:	70a3      	strb	r3, [r4, #2]
100109aa:	e006      	b.n	100109ba <gapc_peer_att_info_ind_handler+0x76>
100109ac:	790b      	ldrb	r3, [r1, #4]
100109ae:	78c9      	ldrb	r1, [r1, #3]
100109b0:	021b      	lsls	r3, r3, #8
100109b2:	430b      	orrs	r3, r1
100109b4:	80d3      	strh	r3, [r2, #6]
100109b6:	2305      	movs	r3, #5
100109b8:	7093      	strb	r3, [r2, #2]
100109ba:	bd10      	pop	{r4, pc}
100109bc:	1001576f 	.word	0x1001576f

100109c0 <gapc_con_channel_map_ind_handler>:
100109c0:	b508      	push	{r3, lr}
100109c2:	2300      	movs	r3, #0
100109c4:	0a00      	lsrs	r0, r0, #8
100109c6:	7013      	strb	r3, [r2, #0]
100109c8:	8050      	strh	r0, [r2, #2]
100109ca:	4b02      	ldr	r3, [pc, #8]	; (100109d4 <gapc_con_channel_map_ind_handler+0x14>)
100109cc:	1d10      	adds	r0, r2, #4
100109ce:	2205      	movs	r2, #5
100109d0:	4798      	blx	r3
100109d2:	bd08      	pop	{r3, pc}
100109d4:	1001576f 	.word	0x1001576f

100109d8 <gapc_lecb_connected>:
100109d8:	7843      	ldrb	r3, [r0, #1]
100109da:	7802      	ldrb	r2, [r0, #0]
100109dc:	021b      	lsls	r3, r3, #8
100109de:	4313      	orrs	r3, r2
100109e0:	800b      	strh	r3, [r1, #0]
100109e2:	78c3      	ldrb	r3, [r0, #3]
100109e4:	7882      	ldrb	r2, [r0, #2]
100109e6:	021b      	lsls	r3, r3, #8
100109e8:	4313      	orrs	r3, r2
100109ea:	804b      	strh	r3, [r1, #2]
100109ec:	7943      	ldrb	r3, [r0, #5]
100109ee:	7902      	ldrb	r2, [r0, #4]
100109f0:	021b      	lsls	r3, r3, #8
100109f2:	4313      	orrs	r3, r2
100109f4:	808b      	strh	r3, [r1, #4]
100109f6:	79c3      	ldrb	r3, [r0, #7]
100109f8:	7982      	ldrb	r2, [r0, #6]
100109fa:	021b      	lsls	r3, r3, #8
100109fc:	4313      	orrs	r3, r2
100109fe:	80cb      	strh	r3, [r1, #6]
10010a00:	2300      	movs	r3, #0
10010a02:	720b      	strb	r3, [r1, #8]
10010a04:	4770      	bx	lr

10010a06 <gapc_lecb_disconnected>:
10010a06:	7843      	ldrb	r3, [r0, #1]
10010a08:	7802      	ldrb	r2, [r0, #0]
10010a0a:	021b      	lsls	r3, r3, #8
10010a0c:	4313      	orrs	r3, r2
10010a0e:	800b      	strh	r3, [r1, #0]
10010a10:	78c3      	ldrb	r3, [r0, #3]
10010a12:	7882      	ldrb	r2, [r0, #2]
10010a14:	021b      	lsls	r3, r3, #8
10010a16:	4313      	orrs	r3, r2
10010a18:	804b      	strh	r3, [r1, #2]
10010a1a:	4770      	bx	lr

10010a1c <gapc_lecb_connect_req_ind>:
10010a1c:	7843      	ldrb	r3, [r0, #1]
10010a1e:	7802      	ldrb	r2, [r0, #0]
10010a20:	021b      	lsls	r3, r3, #8
10010a22:	4313      	orrs	r3, r2
10010a24:	800b      	strh	r3, [r1, #0]
10010a26:	78c3      	ldrb	r3, [r0, #3]
10010a28:	7882      	ldrb	r2, [r0, #2]
10010a2a:	021b      	lsls	r3, r3, #8
10010a2c:	4313      	orrs	r3, r2
10010a2e:	804b      	strh	r3, [r1, #2]
10010a30:	7943      	ldrb	r3, [r0, #5]
10010a32:	7902      	ldrb	r2, [r0, #4]
10010a34:	021b      	lsls	r3, r3, #8
10010a36:	4313      	orrs	r3, r2
10010a38:	808b      	strh	r3, [r1, #4]
10010a3a:	79c3      	ldrb	r3, [r0, #7]
10010a3c:	7982      	ldrb	r2, [r0, #6]
10010a3e:	021b      	lsls	r3, r3, #8
10010a40:	4313      	orrs	r3, r2
10010a42:	80cb      	strh	r3, [r1, #6]
10010a44:	4770      	bx	lr

10010a46 <gapc_lecb_add_credit_resp_handler>:
10010a46:	7843      	ldrb	r3, [r0, #1]
10010a48:	7802      	ldrb	r2, [r0, #0]
10010a4a:	021b      	lsls	r3, r3, #8
10010a4c:	4313      	orrs	r3, r2
10010a4e:	800b      	strh	r3, [r1, #0]
10010a50:	78c3      	ldrb	r3, [r0, #3]
10010a52:	7882      	ldrb	r2, [r0, #2]
10010a54:	021b      	lsls	r3, r3, #8
10010a56:	4313      	orrs	r3, r2
10010a58:	804b      	strh	r3, [r1, #2]
10010a5a:	7943      	ldrb	r3, [r0, #5]
10010a5c:	7902      	ldrb	r2, [r0, #4]
10010a5e:	021b      	lsls	r3, r3, #8
10010a60:	4313      	orrs	r3, r2
10010a62:	808b      	strh	r3, [r1, #4]
10010a64:	4770      	bx	lr
	...

10010a68 <gapm_reset_req_handler>:
10010a68:	b573      	push	{r0, r1, r4, r5, r6, lr}
10010a6a:	466b      	mov	r3, sp
10010a6c:	4915      	ldr	r1, [pc, #84]	; (10010ac4 <gapm_reset_req_handler+0x5c>)
10010a6e:	4816      	ldr	r0, [pc, #88]	; (10010ac8 <gapm_reset_req_handler+0x60>)
10010a70:	880c      	ldrh	r4, [r1, #0]
10010a72:	8809      	ldrh	r1, [r1, #0]
10010a74:	1ddd      	adds	r5, r3, #7
10010a76:	0a09      	lsrs	r1, r1, #8
10010a78:	2300      	movs	r3, #0
10010a7a:	2202      	movs	r2, #2
10010a7c:	7141      	strb	r1, [r0, #5]
10010a7e:	26d0      	movs	r6, #208	; 0xd0
10010a80:	2101      	movs	r1, #1
10010a82:	7104      	strb	r4, [r0, #4]
10010a84:	4c11      	ldr	r4, [pc, #68]	; (10010acc <gapm_reset_req_handler+0x64>)
10010a86:	702b      	strb	r3, [r5, #0]
10010a88:	7002      	strb	r2, [r0, #0]
10010a8a:	70c3      	strb	r3, [r0, #3]
10010a8c:	320b      	adds	r2, #11
10010a8e:	7201      	strb	r1, [r0, #8]
10010a90:	7181      	strb	r1, [r0, #6]
10010a92:	71c3      	strb	r3, [r0, #7]
10010a94:	3108      	adds	r1, #8
10010a96:	4b0e      	ldr	r3, [pc, #56]	; (10010ad0 <gapm_reset_req_handler+0x68>)
10010a98:	0136      	lsls	r6, r6, #4
10010a9a:	7042      	strb	r2, [r0, #1]
10010a9c:	7082      	strb	r2, [r0, #2]
10010a9e:	80a2      	strh	r2, [r4, #4]
10010aa0:	8026      	strh	r6, [r4, #0]
10010aa2:	4798      	blx	r3
10010aa4:	1c28      	adds	r0, r5, #0
10010aa6:	4b0b      	ldr	r3, [pc, #44]	; (10010ad4 <gapm_reset_req_handler+0x6c>)
10010aa8:	4798      	blx	r3
10010aaa:	782b      	ldrb	r3, [r5, #0]
10010aac:	20e2      	movs	r0, #226	; 0xe2
10010aae:	2b00      	cmp	r3, #0
10010ab0:	d106      	bne.n	10010ac0 <gapm_reset_req_handler+0x58>
10010ab2:	68a3      	ldr	r3, [r4, #8]
10010ab4:	20e2      	movs	r0, #226	; 0xe2
10010ab6:	781a      	ldrb	r2, [r3, #0]
10010ab8:	785b      	ldrb	r3, [r3, #1]
10010aba:	2a01      	cmp	r2, #1
10010abc:	d100      	bne.n	10010ac0 <gapm_reset_req_handler+0x58>
10010abe:	1c18      	adds	r0, r3, #0
10010ac0:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
10010ac2:	46c0      	nop			; (mov r8, r8)
10010ac4:	1001af20 	.word	0x1001af20
10010ac8:	1001b290 	.word	0x1001b290
10010acc:	1001af14 	.word	0x1001af14
10010ad0:	1000fe91 	.word	0x1000fe91
10010ad4:	1000fef5 	.word	0x1000fef5

10010ad8 <gapm_set_dev_config_cmd_handler>:
10010ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
10010ada:	b089      	sub	sp, #36	; 0x24
10010adc:	9303      	str	r3, [sp, #12]
10010ade:	ab0e      	add	r3, sp, #56	; 0x38
10010ae0:	781b      	ldrb	r3, [r3, #0]
10010ae2:	4c37      	ldr	r4, [pc, #220]	; (10010bc0 <gapm_set_dev_config_cmd_handler+0xe8>)
10010ae4:	9304      	str	r3, [sp, #16]
10010ae6:	ab0f      	add	r3, sp, #60	; 0x3c
10010ae8:	781b      	ldrb	r3, [r3, #0]
10010aea:	270d      	movs	r7, #13
10010aec:	9305      	str	r3, [sp, #20]
10010aee:	ab10      	add	r3, sp, #64	; 0x40
10010af0:	881b      	ldrh	r3, [r3, #0]
10010af2:	72a1      	strb	r1, [r4, #10]
10010af4:	9300      	str	r3, [sp, #0]
10010af6:	ab11      	add	r3, sp, #68	; 0x44
10010af8:	881b      	ldrh	r3, [r3, #0]
10010afa:	0a09      	lsrs	r1, r1, #8
10010afc:	9301      	str	r3, [sp, #4]
10010afe:	ab12      	add	r3, sp, #72	; 0x48
10010b00:	881b      	ldrh	r3, [r3, #0]
10010b02:	7260      	strb	r0, [r4, #9]
10010b04:	9302      	str	r3, [sp, #8]
10010b06:	ab06      	add	r3, sp, #24
10010b08:	1dde      	adds	r6, r3, #7
10010b0a:	2300      	movs	r3, #0
10010b0c:	7033      	strb	r3, [r6, #0]
10010b0e:	2304      	movs	r3, #4
10010b10:	7023      	strb	r3, [r4, #0]
10010b12:	2300      	movs	r3, #0
10010b14:	70e3      	strb	r3, [r4, #3]
10010b16:	4b2b      	ldr	r3, [pc, #172]	; (10010bc4 <gapm_set_dev_config_cmd_handler+0xec>)
10010b18:	72e1      	strb	r1, [r4, #11]
10010b1a:	881d      	ldrh	r5, [r3, #0]
10010b1c:	881b      	ldrh	r3, [r3, #0]
10010b1e:	1c11      	adds	r1, r2, #0
10010b20:	0a1b      	lsrs	r3, r3, #8
10010b22:	7163      	strb	r3, [r4, #5]
10010b24:	2303      	movs	r3, #3
10010b26:	7125      	strb	r5, [r4, #4]
10010b28:	2206      	movs	r2, #6
10010b2a:	4d27      	ldr	r5, [pc, #156]	; (10010bc8 <gapm_set_dev_config_cmd_handler+0xf0>)
10010b2c:	4827      	ldr	r0, [pc, #156]	; (10010bcc <gapm_set_dev_config_cmd_handler+0xf4>)
10010b2e:	7223      	strb	r3, [r4, #8]
10010b30:	7067      	strb	r7, [r4, #1]
10010b32:	70a7      	strb	r7, [r4, #2]
10010b34:	47a8      	blx	r5
10010b36:	9903      	ldr	r1, [sp, #12]
10010b38:	2210      	movs	r2, #16
10010b3a:	4825      	ldr	r0, [pc, #148]	; (10010bd0 <gapm_set_dev_config_cmd_handler+0xf8>)
10010b3c:	47a8      	blx	r5
10010b3e:	466a      	mov	r2, sp
10010b40:	7c12      	ldrb	r2, [r2, #16]
10010b42:	1ce3      	adds	r3, r4, #3
10010b44:	77da      	strb	r2, [r3, #31]
10010b46:	466a      	mov	r2, sp
10010b48:	7d12      	ldrb	r2, [r2, #20]
10010b4a:	1d23      	adds	r3, r4, #4
10010b4c:	77da      	strb	r2, [r3, #31]
10010b4e:	466a      	mov	r2, sp
10010b50:	7812      	ldrb	r2, [r2, #0]
10010b52:	1d63      	adds	r3, r4, #5
10010b54:	77da      	strb	r2, [r3, #31]
10010b56:	9b00      	ldr	r3, [sp, #0]
10010b58:	1da2      	adds	r2, r4, #6
10010b5a:	0a1b      	lsrs	r3, r3, #8
10010b5c:	77d3      	strb	r3, [r2, #31]
10010b5e:	466a      	mov	r2, sp
10010b60:	7912      	ldrb	r2, [r2, #4]
10010b62:	1de3      	adds	r3, r4, #7
10010b64:	77da      	strb	r2, [r3, #31]
10010b66:	1c22      	adds	r2, r4, #0
10010b68:	9b01      	ldr	r3, [sp, #4]
10010b6a:	3208      	adds	r2, #8
10010b6c:	0a1b      	lsrs	r3, r3, #8
10010b6e:	77d3      	strb	r3, [r2, #31]
10010b70:	466a      	mov	r2, sp
10010b72:	1c23      	adds	r3, r4, #0
10010b74:	7a12      	ldrb	r2, [r2, #8]
10010b76:	3328      	adds	r3, #40	; 0x28
10010b78:	701a      	strb	r2, [r3, #0]
10010b7a:	1c22      	adds	r2, r4, #0
10010b7c:	9b02      	ldr	r3, [sp, #8]
10010b7e:	3229      	adds	r2, #41	; 0x29
10010b80:	0a1b      	lsrs	r3, r3, #8
10010b82:	7013      	strb	r3, [r2, #0]
10010b84:	23d0      	movs	r3, #208	; 0xd0
10010b86:	4d13      	ldr	r5, [pc, #76]	; (10010bd4 <gapm_set_dev_config_cmd_handler+0xfc>)
10010b88:	011b      	lsls	r3, r3, #4
10010b8a:	802b      	strh	r3, [r5, #0]
10010b8c:	2322      	movs	r3, #34	; 0x22
10010b8e:	71a3      	strb	r3, [r4, #6]
10010b90:	2300      	movs	r3, #0
10010b92:	212a      	movs	r1, #42	; 0x2a
10010b94:	71e3      	strb	r3, [r4, #7]
10010b96:	1c20      	adds	r0, r4, #0
10010b98:	4b0f      	ldr	r3, [pc, #60]	; (10010bd8 <gapm_set_dev_config_cmd_handler+0x100>)
10010b9a:	80af      	strh	r7, [r5, #4]
10010b9c:	4798      	blx	r3
10010b9e:	1c30      	adds	r0, r6, #0
10010ba0:	4b0e      	ldr	r3, [pc, #56]	; (10010bdc <gapm_set_dev_config_cmd_handler+0x104>)
10010ba2:	4798      	blx	r3
10010ba4:	7833      	ldrb	r3, [r6, #0]
10010ba6:	20e2      	movs	r0, #226	; 0xe2
10010ba8:	2b00      	cmp	r3, #0
10010baa:	d106      	bne.n	10010bba <gapm_set_dev_config_cmd_handler+0xe2>
10010bac:	68ab      	ldr	r3, [r5, #8]
10010bae:	20e2      	movs	r0, #226	; 0xe2
10010bb0:	781a      	ldrb	r2, [r3, #0]
10010bb2:	785b      	ldrb	r3, [r3, #1]
10010bb4:	2a03      	cmp	r2, #3
10010bb6:	d100      	bne.n	10010bba <gapm_set_dev_config_cmd_handler+0xe2>
10010bb8:	1c18      	adds	r0, r3, #0
10010bba:	b009      	add	sp, #36	; 0x24
10010bbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010bbe:	46c0      	nop			; (mov r8, r8)
10010bc0:	1001b290 	.word	0x1001b290
10010bc4:	1001af20 	.word	0x1001af20
10010bc8:	1001576f 	.word	0x1001576f
10010bcc:	1001b29c 	.word	0x1001b29c
10010bd0:	1001b2a2 	.word	0x1001b2a2
10010bd4:	1001af14 	.word	0x1001af14
10010bd8:	1000fe91 	.word	0x1000fe91
10010bdc:	1000fef5 	.word	0x1000fef5

10010be0 <gapm_get_dev_config_cmd_handler>:
10010be0:	4684      	mov	ip, r0
10010be2:	4663      	mov	r3, ip
10010be4:	b5f0      	push	{r4, r5, r6, r7, lr}
10010be6:	b085      	sub	sp, #20
10010be8:	9100      	str	r1, [sp, #0]
10010bea:	20cf      	movs	r0, #207	; 0xcf
10010bec:	2b01      	cmp	r3, #1
10010bee:	d854      	bhi.n	10010c9a <gapm_get_dev_config_cmd_handler+0xba>
10010bf0:	2900      	cmp	r1, #0
10010bf2:	d052      	beq.n	10010c9a <gapm_get_dev_config_cmd_handler+0xba>
10010bf4:	2200      	movs	r2, #0
10010bf6:	492a      	ldr	r1, [pc, #168]	; (10010ca0 <gapm_get_dev_config_cmd_handler+0xc0>)
10010bf8:	ab02      	add	r3, sp, #8
10010bfa:	880c      	ldrh	r4, [r1, #0]
10010bfc:	8809      	ldrh	r1, [r1, #0]
10010bfe:	1d9f      	adds	r7, r3, #6
10010c00:	719a      	strb	r2, [r3, #6]
10010c02:	4b28      	ldr	r3, [pc, #160]	; (10010ca4 <gapm_get_dev_config_cmd_handler+0xc4>)
10010c04:	0a09      	lsrs	r1, r1, #8
10010c06:	250d      	movs	r5, #13
10010c08:	2606      	movs	r6, #6
10010c0a:	7159      	strb	r1, [r3, #5]
10010c0c:	4661      	mov	r1, ip
10010c0e:	701e      	strb	r6, [r3, #0]
10010c10:	705d      	strb	r5, [r3, #1]
10010c12:	709d      	strb	r5, [r3, #2]
10010c14:	70da      	strb	r2, [r3, #3]
10010c16:	711c      	strb	r4, [r3, #4]
10010c18:	2901      	cmp	r1, #1
10010c1a:	d13e      	bne.n	10010c9a <gapm_get_dev_config_cmd_handler+0xba>
10010c1c:	21d0      	movs	r1, #208	; 0xd0
10010c1e:	4c22      	ldr	r4, [pc, #136]	; (10010ca8 <gapm_get_dev_config_cmd_handler+0xc8>)
10010c20:	0109      	lsls	r1, r1, #4
10010c22:	8061      	strh	r1, [r4, #2]
10010c24:	4921      	ldr	r1, [pc, #132]	; (10010cac <gapm_get_dev_config_cmd_handler+0xcc>)
10010c26:	71da      	strb	r2, [r3, #7]
10010c28:	8021      	strh	r1, [r4, #0]
10010c2a:	4661      	mov	r1, ip
10010c2c:	721e      	strb	r6, [r3, #8]
10010c2e:	7199      	strb	r1, [r3, #6]
10010c30:	1c18      	adds	r0, r3, #0
10010c32:	2109      	movs	r1, #9
10010c34:	4b1e      	ldr	r3, [pc, #120]	; (10010cb0 <gapm_get_dev_config_cmd_handler+0xd0>)
10010c36:	80a5      	strh	r5, [r4, #4]
10010c38:	4798      	blx	r3
10010c3a:	1c38      	adds	r0, r7, #0
10010c3c:	4b1d      	ldr	r3, [pc, #116]	; (10010cb4 <gapm_get_dev_config_cmd_handler+0xd4>)
10010c3e:	4798      	blx	r3
10010c40:	783b      	ldrb	r3, [r7, #0]
10010c42:	20e2      	movs	r0, #226	; 0xe2
10010c44:	9301      	str	r3, [sp, #4]
10010c46:	2b00      	cmp	r3, #0
10010c48:	d127      	bne.n	10010c9a <gapm_get_dev_config_cmd_handler+0xba>
10010c4a:	8821      	ldrh	r1, [r4, #0]
10010c4c:	4a1a      	ldr	r2, [pc, #104]	; (10010cb8 <gapm_get_dev_config_cmd_handler+0xd8>)
10010c4e:	68a7      	ldr	r7, [r4, #8]
10010c50:	3b01      	subs	r3, #1
10010c52:	4291      	cmp	r1, r2
10010c54:	d001      	beq.n	10010c5a <gapm_get_dev_config_cmd_handler+0x7a>
10010c56:	8023      	strh	r3, [r4, #0]
10010c58:	e01a      	b.n	10010c90 <gapm_get_dev_config_cmd_handler+0xb0>
10010c5a:	8063      	strh	r3, [r4, #2]
10010c5c:	9b00      	ldr	r3, [sp, #0]
10010c5e:	1c39      	adds	r1, r7, #0
10010c60:	1c58      	adds	r0, r3, #1
10010c62:	1c32      	adds	r2, r6, #0
10010c64:	4b15      	ldr	r3, [pc, #84]	; (10010cbc <gapm_get_dev_config_cmd_handler+0xdc>)
10010c66:	4798      	blx	r3
10010c68:	79bb      	ldrb	r3, [r7, #6]
10010c6a:	9a00      	ldr	r2, [sp, #0]
10010c6c:	7013      	strb	r3, [r2, #0]
10010c6e:	23d0      	movs	r3, #208	; 0xd0
10010c70:	011b      	lsls	r3, r3, #4
10010c72:	8023      	strh	r3, [r4, #0]
10010c74:	ab02      	add	r3, sp, #8
10010c76:	80a5      	strh	r5, [r4, #4]
10010c78:	1ddd      	adds	r5, r3, #7
10010c7a:	466b      	mov	r3, sp
10010c7c:	791b      	ldrb	r3, [r3, #4]
10010c7e:	1c28      	adds	r0, r5, #0
10010c80:	702b      	strb	r3, [r5, #0]
10010c82:	4b0c      	ldr	r3, [pc, #48]	; (10010cb4 <gapm_get_dev_config_cmd_handler+0xd4>)
10010c84:	4798      	blx	r3
10010c86:	782b      	ldrb	r3, [r5, #0]
10010c88:	20d0      	movs	r0, #208	; 0xd0
10010c8a:	2b00      	cmp	r3, #0
10010c8c:	d105      	bne.n	10010c9a <gapm_get_dev_config_cmd_handler+0xba>
10010c8e:	68a7      	ldr	r7, [r4, #8]
10010c90:	783b      	ldrb	r3, [r7, #0]
10010c92:	7878      	ldrb	r0, [r7, #1]
10010c94:	2b06      	cmp	r3, #6
10010c96:	d000      	beq.n	10010c9a <gapm_get_dev_config_cmd_handler+0xba>
10010c98:	20e2      	movs	r0, #226	; 0xe2
10010c9a:	b005      	add	sp, #20
10010c9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010c9e:	46c0      	nop			; (mov r8, r8)
10010ca0:	1001af20 	.word	0x1001af20
10010ca4:	1001b290 	.word	0x1001b290
10010ca8:	1001af14 	.word	0x1001af14
10010cac:	00000d08 	.word	0x00000d08
10010cb0:	1000fe91 	.word	0x1000fe91
10010cb4:	1000fef5 	.word	0x1000fef5
10010cb8:	0000ffff 	.word	0x0000ffff
10010cbc:	1001576f 	.word	0x1001576f

10010cc0 <gapm_cancel_cmd_handler>:
10010cc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
10010cc2:	4916      	ldr	r1, [pc, #88]	; (10010d1c <gapm_cancel_cmd_handler+0x5c>)
10010cc4:	4816      	ldr	r0, [pc, #88]	; (10010d20 <gapm_cancel_cmd_handler+0x60>)
10010cc6:	880c      	ldrh	r4, [r1, #0]
10010cc8:	8809      	ldrh	r1, [r1, #0]
10010cca:	466b      	mov	r3, sp
10010ccc:	0a09      	lsrs	r1, r1, #8
10010cce:	7141      	strb	r1, [r0, #5]
10010cd0:	2102      	movs	r1, #2
10010cd2:	2203      	movs	r2, #3
10010cd4:	7201      	strb	r1, [r0, #8]
10010cd6:	21d0      	movs	r1, #208	; 0xd0
10010cd8:	1ddd      	adds	r5, r3, #7
10010cda:	2300      	movs	r3, #0
10010cdc:	7104      	strb	r4, [r0, #4]
10010cde:	4c11      	ldr	r4, [pc, #68]	; (10010d24 <gapm_cancel_cmd_handler+0x64>)
10010ce0:	7002      	strb	r2, [r0, #0]
10010ce2:	0109      	lsls	r1, r1, #4
10010ce4:	320a      	adds	r2, #10
10010ce6:	702b      	strb	r3, [r5, #0]
10010ce8:	7042      	strb	r2, [r0, #1]
10010cea:	7082      	strb	r2, [r0, #2]
10010cec:	70c3      	strb	r3, [r0, #3]
10010cee:	8021      	strh	r1, [r4, #0]
10010cf0:	80a2      	strh	r2, [r4, #4]
10010cf2:	71c3      	strb	r3, [r0, #7]
10010cf4:	3a0c      	subs	r2, #12
10010cf6:	2109      	movs	r1, #9
10010cf8:	4b0b      	ldr	r3, [pc, #44]	; (10010d28 <gapm_cancel_cmd_handler+0x68>)
10010cfa:	7182      	strb	r2, [r0, #6]
10010cfc:	4798      	blx	r3
10010cfe:	1c28      	adds	r0, r5, #0
10010d00:	4b0a      	ldr	r3, [pc, #40]	; (10010d2c <gapm_cancel_cmd_handler+0x6c>)
10010d02:	4798      	blx	r3
10010d04:	7828      	ldrb	r0, [r5, #0]
10010d06:	2800      	cmp	r0, #0
10010d08:	d001      	beq.n	10010d0e <gapm_cancel_cmd_handler+0x4e>
10010d0a:	20e2      	movs	r0, #226	; 0xe2
10010d0c:	e004      	b.n	10010d18 <gapm_cancel_cmd_handler+0x58>
10010d0e:	68a3      	ldr	r3, [r4, #8]
10010d10:	785b      	ldrb	r3, [r3, #1]
10010d12:	2b44      	cmp	r3, #68	; 0x44
10010d14:	d000      	beq.n	10010d18 <gapm_cancel_cmd_handler+0x58>
10010d16:	1c18      	adds	r0, r3, #0
10010d18:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
10010d1a:	46c0      	nop			; (mov r8, r8)
10010d1c:	1001af20 	.word	0x1001af20
10010d20:	1001b290 	.word	0x1001b290
10010d24:	1001af14 	.word	0x1001af14
10010d28:	1000fe91 	.word	0x1000fe91
10010d2c:	1000fef5 	.word	0x1000fef5

10010d30 <gapm_dev_bdaddr_ind_handler>:
10010d30:	b538      	push	{r3, r4, r5, lr}
10010d32:	1c05      	adds	r5, r0, #0
10010d34:	1c0c      	adds	r4, r1, #0
10010d36:	1c48      	adds	r0, r1, #1
10010d38:	2206      	movs	r2, #6
10010d3a:	1c29      	adds	r1, r5, #0
10010d3c:	4b02      	ldr	r3, [pc, #8]	; (10010d48 <gapm_dev_bdaddr_ind_handler+0x18>)
10010d3e:	4798      	blx	r3
10010d40:	79ab      	ldrb	r3, [r5, #6]
10010d42:	2000      	movs	r0, #0
10010d44:	7023      	strb	r3, [r4, #0]
10010d46:	bd38      	pop	{r3, r4, r5, pc}
10010d48:	1001576f 	.word	0x1001576f

10010d4c <gapm_cmp_evt>:
10010d4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010d4e:	7803      	ldrb	r3, [r0, #0]
10010d50:	7845      	ldrb	r5, [r0, #1]
10010d52:	3b0c      	subs	r3, #12
10010d54:	1e18      	subs	r0, r3, #0
10010d56:	280b      	cmp	r0, #11
10010d58:	d900      	bls.n	10010d5c <gapm_cmp_evt+0x10>
10010d5a:	e08d      	b.n	10010e78 <gapm_cmp_evt+0x12c>
10010d5c:	1c0c      	adds	r4, r1, #0
10010d5e:	f001 fe6f 	bl	10012a40 <__gnu_thumb1_case_uqi>
10010d62:	1952      	.short	0x1952
10010d64:	068b1919 	.word	0x068b1919
10010d68:	8b595906 	.word	0x8b595906
10010d6c:	0d8b      	.short	0x0d8b
10010d6e:	2300      	movs	r3, #0
10010d70:	2d45      	cmp	r5, #69	; 0x45
10010d72:	d000      	beq.n	10010d76 <gapm_cmp_evt+0x2a>
10010d74:	1c2b      	adds	r3, r5, #0
10010d76:	7023      	strb	r3, [r4, #0]
10010d78:	2002      	movs	r0, #2
10010d7a:	e07e      	b.n	10010e7a <gapm_cmp_evt+0x12e>
10010d7c:	203b      	movs	r0, #59	; 0x3b
10010d7e:	2d00      	cmp	r5, #0
10010d80:	d100      	bne.n	10010d84 <gapm_cmp_evt+0x38>
10010d82:	e07a      	b.n	10010e7a <gapm_cmp_evt+0x12e>
10010d84:	700d      	strb	r5, [r1, #0]
10010d86:	1c48      	adds	r0, r1, #1
10010d88:	2210      	movs	r2, #16
10010d8a:	2100      	movs	r1, #0
10010d8c:	4b3b      	ldr	r3, [pc, #236]	; (10010e7c <gapm_cmp_evt+0x130>)
10010d8e:	4798      	blx	r3
10010d90:	200f      	movs	r0, #15
10010d92:	e072      	b.n	10010e7a <gapm_cmp_evt+0x12e>
10010d94:	2d00      	cmp	r5, #0
10010d96:	d134      	bne.n	10010e02 <gapm_cmp_evt+0xb6>
10010d98:	4b39      	ldr	r3, [pc, #228]	; (10010e80 <gapm_cmp_evt+0x134>)
10010d9a:	4798      	blx	r3
10010d9c:	1e43      	subs	r3, r0, #1
10010d9e:	b2db      	uxtb	r3, r3
10010da0:	1c28      	adds	r0, r5, #0
10010da2:	2b06      	cmp	r3, #6
10010da4:	d869      	bhi.n	10010e7a <gapm_cmp_evt+0x12e>
10010da6:	466b      	mov	r3, sp
10010da8:	4e36      	ldr	r6, [pc, #216]	; (10010e84 <gapm_cmp_evt+0x138>)
10010daa:	1dd9      	adds	r1, r3, #7
10010dac:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
10010dae:	4b36      	ldr	r3, [pc, #216]	; (10010e88 <gapm_cmp_evt+0x13c>)
10010db0:	4798      	blx	r3
10010db2:	2312      	movs	r3, #18
10010db4:	4358      	muls	r0, r3
10010db6:	4935      	ldr	r1, [pc, #212]	; (10010e8c <gapm_cmp_evt+0x140>)
10010db8:	1809      	adds	r1, r1, r0
10010dba:	1c0b      	adds	r3, r1, #0
10010dbc:	894a      	ldrh	r2, [r1, #10]
10010dbe:	3308      	adds	r3, #8
10010dc0:	8122      	strh	r2, [r4, #8]
10010dc2:	784f      	ldrb	r7, [r1, #1]
10010dc4:	72a5      	strb	r5, [r4, #10]
10010dc6:	7027      	strb	r7, [r4, #0]
10010dc8:	898a      	ldrh	r2, [r1, #12]
10010dca:	1c60      	adds	r0, r4, #1
10010dcc:	81a2      	strh	r2, [r4, #12]
10010dce:	88db      	ldrh	r3, [r3, #6]
10010dd0:	3102      	adds	r1, #2
10010dd2:	81e3      	strh	r3, [r4, #14]
10010dd4:	89cb      	ldrh	r3, [r1, #14]
10010dd6:	2206      	movs	r2, #6
10010dd8:	8223      	strh	r3, [r4, #16]
10010dda:	4b2d      	ldr	r3, [pc, #180]	; (10010e90 <gapm_cmp_evt+0x144>)
10010ddc:	4798      	blx	r3
10010dde:	2f00      	cmp	r7, #0
10010de0:	d00a      	beq.n	10010df8 <gapm_cmp_evt+0xac>
10010de2:	79a3      	ldrb	r3, [r4, #6]
10010de4:	223f      	movs	r2, #63	; 0x3f
10010de6:	1c19      	adds	r1, r3, #0
10010de8:	3501      	adds	r5, #1
10010dea:	4391      	bics	r1, r2
10010dec:	29c0      	cmp	r1, #192	; 0xc0
10010dee:	d003      	beq.n	10010df8 <gapm_cmp_evt+0xac>
10010df0:	065b      	lsls	r3, r3, #25
10010df2:	0fdb      	lsrs	r3, r3, #31
10010df4:	3502      	adds	r5, #2
10010df6:	1aed      	subs	r5, r5, r3
10010df8:	2301      	movs	r3, #1
10010dfa:	425b      	negs	r3, r3
10010dfc:	7025      	strb	r5, [r4, #0]
10010dfe:	85b3      	strh	r3, [r6, #44]	; 0x2c
10010e00:	e038      	b.n	10010e74 <gapm_cmp_evt+0x128>
10010e02:	700d      	strb	r5, [r1, #0]
10010e04:	e004      	b.n	10010e10 <gapm_cmp_evt+0xc4>
10010e06:	2300      	movs	r3, #0
10010e08:	2d45      	cmp	r5, #69	; 0x45
10010e0a:	d000      	beq.n	10010e0e <gapm_cmp_evt+0xc2>
10010e0c:	1c2b      	adds	r3, r5, #0
10010e0e:	7023      	strb	r3, [r4, #0]
10010e10:	2003      	movs	r0, #3
10010e12:	e032      	b.n	10010e7a <gapm_cmp_evt+0x12e>
10010e14:	4e1b      	ldr	r6, [pc, #108]	; (10010e84 <gapm_cmp_evt+0x138>)
10010e16:	2100      	movs	r1, #0
10010e18:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
10010e1a:	4b1b      	ldr	r3, [pc, #108]	; (10010e88 <gapm_cmp_evt+0x13c>)
10010e1c:	4798      	blx	r3
10010e1e:	2807      	cmp	r0, #7
10010e20:	d818      	bhi.n	10010e54 <gapm_cmp_evt+0x108>
10010e22:	2301      	movs	r3, #1
10010e24:	425b      	negs	r3, r3
10010e26:	85b3      	strh	r3, [r6, #44]	; 0x2c
10010e28:	3313      	adds	r3, #19
10010e2a:	4358      	muls	r0, r3
10010e2c:	4917      	ldr	r1, [pc, #92]	; (10010e8c <gapm_cmp_evt+0x140>)
10010e2e:	1809      	adds	r1, r1, r0
10010e30:	1c0b      	adds	r3, r1, #0
10010e32:	894a      	ldrh	r2, [r1, #10]
10010e34:	3308      	adds	r3, #8
10010e36:	8122      	strh	r2, [r4, #8]
10010e38:	784a      	ldrb	r2, [r1, #1]
10010e3a:	72a5      	strb	r5, [r4, #10]
10010e3c:	7022      	strb	r2, [r4, #0]
10010e3e:	898a      	ldrh	r2, [r1, #12]
10010e40:	1c60      	adds	r0, r4, #1
10010e42:	81a2      	strh	r2, [r4, #12]
10010e44:	88db      	ldrh	r3, [r3, #6]
10010e46:	3102      	adds	r1, #2
10010e48:	81e3      	strh	r3, [r4, #14]
10010e4a:	89cb      	ldrh	r3, [r1, #14]
10010e4c:	2206      	movs	r2, #6
10010e4e:	8223      	strh	r3, [r4, #16]
10010e50:	4b0f      	ldr	r3, [pc, #60]	; (10010e90 <gapm_cmp_evt+0x144>)
10010e52:	4798      	blx	r3
10010e54:	2200      	movs	r2, #0
10010e56:	7823      	ldrb	r3, [r4, #0]
10010e58:	4293      	cmp	r3, r2
10010e5a:	d00a      	beq.n	10010e72 <gapm_cmp_evt+0x126>
10010e5c:	79a3      	ldrb	r3, [r4, #6]
10010e5e:	323f      	adds	r2, #63	; 0x3f
10010e60:	1c19      	adds	r1, r3, #0
10010e62:	4391      	bics	r1, r2
10010e64:	3a3e      	subs	r2, #62	; 0x3e
10010e66:	29c0      	cmp	r1, #192	; 0xc0
10010e68:	d003      	beq.n	10010e72 <gapm_cmp_evt+0x126>
10010e6a:	065b      	lsls	r3, r3, #25
10010e6c:	0fdb      	lsrs	r3, r3, #31
10010e6e:	3202      	adds	r2, #2
10010e70:	1ad2      	subs	r2, r2, r3
10010e72:	7022      	strb	r2, [r4, #0]
10010e74:	2005      	movs	r0, #5
10010e76:	e000      	b.n	10010e7a <gapm_cmp_evt+0x12e>
10010e78:	2000      	movs	r0, #0
10010e7a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10010e7c:	10015781 	.word	0x10015781
10010e80:	1001009d 	.word	0x1001009d
10010e84:	1001afb2 	.word	0x1001afb2
10010e88:	10010061 	.word	0x10010061
10010e8c:	1001af22 	.word	0x1001af22
10010e90:	1001576f 	.word	0x1001576f

10010e94 <gapm_start_adv_cmd_handler>:
10010e94:	b5f0      	push	{r4, r5, r6, r7, lr}
10010e96:	b089      	sub	sp, #36	; 0x24
10010e98:	9303      	str	r3, [sp, #12]
10010e9a:	ab0e      	add	r3, sp, #56	; 0x38
10010e9c:	9102      	str	r1, [sp, #8]
10010e9e:	cb02      	ldmia	r3!, {r1}
10010ea0:	aa08      	add	r2, sp, #32
10010ea2:	881b      	ldrh	r3, [r3, #0]
10010ea4:	4e3c      	ldr	r6, [pc, #240]	; (10010f98 <gapm_start_adv_cmd_handler+0x104>)
10010ea6:	9300      	str	r3, [sp, #0]
10010ea8:	ab10      	add	r3, sp, #64	; 0x40
10010eaa:	881b      	ldrh	r3, [r3, #0]
10010eac:	240d      	movs	r4, #13
10010eae:	469c      	mov	ip, r3
10010eb0:	ab11      	add	r3, sp, #68	; 0x44
10010eb2:	781b      	ldrb	r3, [r3, #0]
10010eb4:	9304      	str	r3, [sp, #16]
10010eb6:	ab12      	add	r3, sp, #72	; 0x48
10010eb8:	781b      	ldrb	r3, [r3, #0]
10010eba:	9305      	str	r3, [sp, #20]
10010ebc:	ab13      	add	r3, sp, #76	; 0x4c
10010ebe:	781b      	ldrb	r3, [r3, #0]
10010ec0:	9306      	str	r3, [sp, #24]
10010ec2:	ab14      	add	r3, sp, #80	; 0x50
10010ec4:	781b      	ldrb	r3, [r3, #0]
10010ec6:	9301      	str	r3, [sp, #4]
10010ec8:	2319      	movs	r3, #25
10010eca:	189b      	adds	r3, r3, r2
10010ecc:	7fdd      	ldrb	r5, [r3, #31]
10010ece:	ab18      	add	r3, sp, #96	; 0x60
10010ed0:	881f      	ldrh	r7, [r3, #0]
10010ed2:	ab19      	add	r3, sp, #100	; 0x64
10010ed4:	781b      	ldrb	r3, [r3, #0]
10010ed6:	8832      	ldrh	r2, [r6, #0]
10010ed8:	9307      	str	r3, [sp, #28]
10010eda:	4b30      	ldr	r3, [pc, #192]	; (10010f9c <gapm_start_adv_cmd_handler+0x108>)
10010edc:	8836      	ldrh	r6, [r6, #0]
10010ede:	711a      	strb	r2, [r3, #4]
10010ee0:	466a      	mov	r2, sp
10010ee2:	7a12      	ldrb	r2, [r2, #8]
10010ee4:	701c      	strb	r4, [r3, #0]
10010ee6:	705c      	strb	r4, [r3, #1]
10010ee8:	709c      	strb	r4, [r3, #2]
10010eea:	725a      	strb	r2, [r3, #9]
10010eec:	2400      	movs	r4, #0
10010eee:	466a      	mov	r2, sp
10010ef0:	0a36      	lsrs	r6, r6, #8
10010ef2:	70dc      	strb	r4, [r3, #3]
10010ef4:	7218      	strb	r0, [r3, #8]
10010ef6:	729c      	strb	r4, [r3, #10]
10010ef8:	715e      	strb	r6, [r3, #5]
10010efa:	72dc      	strb	r4, [r3, #11]
10010efc:	7812      	ldrb	r2, [r2, #0]
10010efe:	380e      	subs	r0, #14
10010f00:	731a      	strb	r2, [r3, #12]
10010f02:	9a00      	ldr	r2, [sp, #0]
10010f04:	0a14      	lsrs	r4, r2, #8
10010f06:	4662      	mov	r2, ip
10010f08:	739a      	strb	r2, [r3, #14]
10010f0a:	4662      	mov	r2, ip
10010f0c:	735c      	strb	r4, [r3, #13]
10010f0e:	0a14      	lsrs	r4, r2, #8
10010f10:	466a      	mov	r2, sp
10010f12:	7c12      	ldrb	r2, [r2, #16]
10010f14:	73dc      	strb	r4, [r3, #15]
10010f16:	741a      	strb	r2, [r3, #16]
10010f18:	1c1c      	adds	r4, r3, #0
10010f1a:	2801      	cmp	r0, #1
10010f1c:	d809      	bhi.n	10010f32 <gapm_start_adv_cmd_handler+0x9e>
10010f1e:	2900      	cmp	r1, #0
10010f20:	d003      	beq.n	10010f2a <gapm_start_adv_cmd_handler+0x96>
10010f22:	481f      	ldr	r0, [pc, #124]	; (10010fa0 <gapm_start_adv_cmd_handler+0x10c>)
10010f24:	2206      	movs	r2, #6
10010f26:	4b1f      	ldr	r3, [pc, #124]	; (10010fa4 <gapm_start_adv_cmd_handler+0x110>)
10010f28:	4798      	blx	r3
10010f2a:	466b      	mov	r3, sp
10010f2c:	7b1b      	ldrb	r3, [r3, #12]
10010f2e:	75e3      	strb	r3, [r4, #23]
10010f30:	e014      	b.n	10010f5c <gapm_start_adv_cmd_handler+0xc8>
10010f32:	466b      	mov	r3, sp
10010f34:	7d1b      	ldrb	r3, [r3, #20]
10010f36:	9915      	ldr	r1, [sp, #84]	; 0x54
10010f38:	7463      	strb	r3, [r4, #17]
10010f3a:	466b      	mov	r3, sp
10010f3c:	7e1b      	ldrb	r3, [r3, #24]
10010f3e:	9a01      	ldr	r2, [sp, #4]
10010f40:	74a3      	strb	r3, [r4, #18]
10010f42:	466b      	mov	r3, sp
10010f44:	791b      	ldrb	r3, [r3, #4]
10010f46:	4818      	ldr	r0, [pc, #96]	; (10010fa8 <gapm_start_adv_cmd_handler+0x114>)
10010f48:	4e16      	ldr	r6, [pc, #88]	; (10010fa4 <gapm_start_adv_cmd_handler+0x110>)
10010f4a:	74e3      	strb	r3, [r4, #19]
10010f4c:	47b0      	blx	r6
10010f4e:	1c23      	adds	r3, r4, #0
10010f50:	4816      	ldr	r0, [pc, #88]	; (10010fac <gapm_start_adv_cmd_handler+0x118>)
10010f52:	3330      	adds	r3, #48	; 0x30
10010f54:	9917      	ldr	r1, [sp, #92]	; 0x5c
10010f56:	1c2a      	adds	r2, r5, #0
10010f58:	701d      	strb	r5, [r3, #0]
10010f5a:	47b0      	blx	r6
10010f5c:	1c22      	adds	r2, r4, #0
10010f5e:	23a5      	movs	r3, #165	; 0xa5
10010f60:	3250      	adds	r2, #80	; 0x50
10010f62:	7013      	strb	r3, [r2, #0]
10010f64:	1c22      	adds	r2, r4, #0
10010f66:	3251      	adds	r2, #81	; 0x51
10010f68:	7013      	strb	r3, [r2, #0]
10010f6a:	1c23      	adds	r3, r4, #0
10010f6c:	1c22      	adds	r2, r4, #0
10010f6e:	3352      	adds	r3, #82	; 0x52
10010f70:	701f      	strb	r7, [r3, #0]
10010f72:	3253      	adds	r2, #83	; 0x53
10010f74:	0a3b      	lsrs	r3, r7, #8
10010f76:	7013      	strb	r3, [r2, #0]
10010f78:	466a      	mov	r2, sp
10010f7a:	1c23      	adds	r3, r4, #0
10010f7c:	7f12      	ldrb	r2, [r2, #28]
10010f7e:	3354      	adds	r3, #84	; 0x54
10010f80:	701a      	strb	r2, [r3, #0]
10010f82:	234d      	movs	r3, #77	; 0x4d
10010f84:	2500      	movs	r5, #0
10010f86:	71a3      	strb	r3, [r4, #6]
10010f88:	1c20      	adds	r0, r4, #0
10010f8a:	2155      	movs	r1, #85	; 0x55
10010f8c:	4b08      	ldr	r3, [pc, #32]	; (10010fb0 <gapm_start_adv_cmd_handler+0x11c>)
10010f8e:	71e5      	strb	r5, [r4, #7]
10010f90:	4798      	blx	r3
10010f92:	1c28      	adds	r0, r5, #0
10010f94:	b009      	add	sp, #36	; 0x24
10010f96:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010f98:	1001af20 	.word	0x1001af20
10010f9c:	1001b290 	.word	0x1001b290
10010fa0:	1001b2a1 	.word	0x1001b2a1
10010fa4:	1001576f 	.word	0x1001576f
10010fa8:	1001b2a4 	.word	0x1001b2a4
10010fac:	1001b2c1 	.word	0x1001b2c1
10010fb0:	1000fe91 	.word	0x1000fe91

10010fb4 <get_gap_local_addr_type>:
10010fb4:	4b04      	ldr	r3, [pc, #16]	; (10010fc8 <get_gap_local_addr_type+0x14>)
10010fb6:	2001      	movs	r0, #1
10010fb8:	791b      	ldrb	r3, [r3, #4]
10010fba:	2b02      	cmp	r3, #2
10010fbc:	d003      	beq.n	10010fc6 <get_gap_local_addr_type+0x12>
10010fbe:	3b03      	subs	r3, #3
10010fc0:	4258      	negs	r0, r3
10010fc2:	4158      	adcs	r0, r3
10010fc4:	0040      	lsls	r0, r0, #1
10010fc6:	4770      	bx	lr
10010fc8:	1001afb2 	.word	0x1001afb2

10010fcc <gapm_adv_report_evt_handler>:
10010fcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010fce:	7843      	ldrb	r3, [r0, #1]
10010fd0:	1c05      	adds	r5, r0, #0
10010fd2:	9301      	str	r3, [sp, #4]
10010fd4:	466b      	mov	r3, sp
10010fd6:	1c0c      	adds	r4, r1, #0
10010fd8:	791b      	ldrb	r3, [r3, #4]
10010fda:	7806      	ldrb	r6, [r0, #0]
10010fdc:	2206      	movs	r2, #6
10010fde:	704b      	strb	r3, [r1, #1]
10010fe0:	1c88      	adds	r0, r1, #2
10010fe2:	4f1b      	ldr	r7, [pc, #108]	; (10011050 <gapm_adv_report_evt_handler+0x84>)
10010fe4:	1ca9      	adds	r1, r5, #2
10010fe6:	47b8      	blx	r7
10010fe8:	1c20      	adds	r0, r4, #0
10010fea:	1c29      	adds	r1, r5, #0
10010fec:	7a2a      	ldrb	r2, [r5, #8]
10010fee:	3008      	adds	r0, #8
10010ff0:	77c2      	strb	r2, [r0, #31]
10010ff2:	3109      	adds	r1, #9
10010ff4:	3528      	adds	r5, #40	; 0x28
10010ff6:	47b8      	blx	r7
10010ff8:	782b      	ldrb	r3, [r5, #0]
10010ffa:	b25a      	sxtb	r2, r3
10010ffc:	2a00      	cmp	r2, #0
10010ffe:	da01      	bge.n	10011004 <gapm_adv_report_evt_handler+0x38>
10011000:	3301      	adds	r3, #1
10011002:	b2db      	uxtb	r3, r3
10011004:	1c22      	adds	r2, r4, #0
10011006:	3228      	adds	r2, #40	; 0x28
10011008:	7013      	strb	r3, [r2, #0]
1001100a:	2200      	movs	r2, #0
1001100c:	9b01      	ldr	r3, [sp, #4]
1001100e:	4293      	cmp	r3, r2
10011010:	d00a      	beq.n	10011028 <gapm_adv_report_evt_handler+0x5c>
10011012:	79e3      	ldrb	r3, [r4, #7]
10011014:	323f      	adds	r2, #63	; 0x3f
10011016:	1c19      	adds	r1, r3, #0
10011018:	4391      	bics	r1, r2
1001101a:	3a3e      	subs	r2, #62	; 0x3e
1001101c:	29c0      	cmp	r1, #192	; 0xc0
1001101e:	d003      	beq.n	10011028 <gapm_adv_report_evt_handler+0x5c>
10011020:	065b      	lsls	r3, r3, #25
10011022:	0fdb      	lsrs	r3, r3, #31
10011024:	3202      	adds	r2, #2
10011026:	1ad2      	subs	r2, r2, r3
10011028:	7062      	strb	r2, [r4, #1]
1001102a:	2e04      	cmp	r6, #4
1001102c:	d80f      	bhi.n	1001104e <gapm_adv_report_evt_handler+0x82>
1001102e:	1c30      	adds	r0, r6, #0
10011030:	f001 fd06 	bl	10012a40 <__gnu_thumb1_case_uqi>
10011034:	09070503 	.word	0x09070503
10011038:	0b          	.byte	0x0b
10011039:	00          	.byte	0x00
1001103a:	2300      	movs	r3, #0
1001103c:	e006      	b.n	1001104c <gapm_adv_report_evt_handler+0x80>
1001103e:	2301      	movs	r3, #1
10011040:	e004      	b.n	1001104c <gapm_adv_report_evt_handler+0x80>
10011042:	2302      	movs	r3, #2
10011044:	e002      	b.n	1001104c <gapm_adv_report_evt_handler+0x80>
10011046:	2303      	movs	r3, #3
10011048:	e000      	b.n	1001104c <gapm_adv_report_evt_handler+0x80>
1001104a:	2305      	movs	r3, #5
1001104c:	7023      	strb	r3, [r4, #0]
1001104e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10011050:	1001576f 	.word	0x1001576f

10011054 <gapm_resolv_addr_cmd_handler>:
10011054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10011056:	2314      	movs	r3, #20
10011058:	4c12      	ldr	r4, [pc, #72]	; (100110a4 <gapm_resolv_addr_cmd_handler+0x50>)
1001105a:	1c17      	adds	r7, r2, #0
1001105c:	7023      	strb	r3, [r4, #0]
1001105e:	3b07      	subs	r3, #7
10011060:	7063      	strb	r3, [r4, #1]
10011062:	70a3      	strb	r3, [r4, #2]
10011064:	2300      	movs	r3, #0
10011066:	70e3      	strb	r3, [r4, #3]
10011068:	4b0f      	ldr	r3, [pc, #60]	; (100110a8 <gapm_resolv_addr_cmd_handler+0x54>)
1001106a:	1c05      	adds	r5, r0, #0
1001106c:	881a      	ldrh	r2, [r3, #0]
1001106e:	881b      	ldrh	r3, [r3, #0]
10011070:	4e0e      	ldr	r6, [pc, #56]	; (100110ac <gapm_resolv_addr_cmd_handler+0x58>)
10011072:	0a1b      	lsrs	r3, r3, #8
10011074:	7163      	strb	r3, [r4, #5]
10011076:	2317      	movs	r3, #23
10011078:	012d      	lsls	r5, r5, #4
1001107a:	7122      	strb	r2, [r4, #4]
1001107c:	7260      	strb	r0, [r4, #9]
1001107e:	2206      	movs	r2, #6
10011080:	480b      	ldr	r0, [pc, #44]	; (100110b0 <gapm_resolv_addr_cmd_handler+0x5c>)
10011082:	7223      	strb	r3, [r4, #8]
10011084:	47b0      	blx	r6
10011086:	1c39      	adds	r1, r7, #0
10011088:	1c2a      	adds	r2, r5, #0
1001108a:	480a      	ldr	r0, [pc, #40]	; (100110b4 <gapm_resolv_addr_cmd_handler+0x60>)
1001108c:	47b0      	blx	r6
1001108e:	1c29      	adds	r1, r5, #0
10011090:	3110      	adds	r1, #16
10011092:	1c0b      	adds	r3, r1, #0
10011094:	3b08      	subs	r3, #8
10011096:	71a3      	strb	r3, [r4, #6]
10011098:	121b      	asrs	r3, r3, #8
1001109a:	71e3      	strb	r3, [r4, #7]
1001109c:	1c20      	adds	r0, r4, #0
1001109e:	4b06      	ldr	r3, [pc, #24]	; (100110b8 <gapm_resolv_addr_cmd_handler+0x64>)
100110a0:	4798      	blx	r3
100110a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100110a4:	1001b290 	.word	0x1001b290
100110a8:	1001af20 	.word	0x1001af20
100110ac:	1001576f 	.word	0x1001576f
100110b0:	1001b29a 	.word	0x1001b29a
100110b4:	1001b2a0 	.word	0x1001b2a0
100110b8:	1000fe91 	.word	0x1000fe91

100110bc <gapm_addr_solved_ind_handler>:
100110bc:	b570      	push	{r4, r5, r6, lr}
100110be:	1c04      	adds	r4, r0, #0
100110c0:	1c08      	adds	r0, r1, #0
100110c2:	1c0d      	adds	r5, r1, #0
100110c4:	4e05      	ldr	r6, [pc, #20]	; (100110dc <gapm_addr_solved_ind_handler+0x20>)
100110c6:	1c21      	adds	r1, r4, #0
100110c8:	2206      	movs	r2, #6
100110ca:	3011      	adds	r0, #17
100110cc:	47b0      	blx	r6
100110ce:	1c68      	adds	r0, r5, #1
100110d0:	1da1      	adds	r1, r4, #6
100110d2:	2210      	movs	r2, #16
100110d4:	47b0      	blx	r6
100110d6:	2300      	movs	r3, #0
100110d8:	702b      	strb	r3, [r5, #0]
100110da:	bd70      	pop	{r4, r5, r6, pc}
100110dc:	1001576f 	.word	0x1001576f

100110e0 <gapm_profile_added_ind_handler>:
100110e0:	b510      	push	{r4, lr}
100110e2:	7843      	ldrb	r3, [r0, #1]
100110e4:	7902      	ldrb	r2, [r0, #4]
100110e6:	7944      	ldrb	r4, [r0, #5]
100110e8:	7800      	ldrb	r0, [r0, #0]
100110ea:	021b      	lsls	r3, r3, #8
100110ec:	4303      	orrs	r3, r0
100110ee:	2b1b      	cmp	r3, #27
100110f0:	d104      	bne.n	100110fc <gapm_profile_added_ind_handler+0x1c>
100110f2:	2300      	movs	r3, #0
100110f4:	700b      	strb	r3, [r1, #0]
100110f6:	0223      	lsls	r3, r4, #8
100110f8:	4313      	orrs	r3, r2
100110fa:	804b      	strh	r3, [r1, #2]
100110fc:	203b      	movs	r0, #59	; 0x3b
100110fe:	bd10      	pop	{r4, pc}

10011100 <gattc_read_req_ind_parser>:
10011100:	7843      	ldrb	r3, [r0, #1]
10011102:	7802      	ldrb	r2, [r0, #0]
10011104:	021b      	lsls	r3, r3, #8
10011106:	4313      	orrs	r3, r2
10011108:	804b      	strh	r3, [r1, #2]
1001110a:	4770      	bx	lr

1001110c <gattc_write_req_ind_parser>:
1001110c:	b508      	push	{r3, lr}
1001110e:	1c13      	adds	r3, r2, #0
10011110:	0a00      	lsrs	r0, r0, #8
10011112:	8010      	strh	r0, [r2, #0]
10011114:	784a      	ldrb	r2, [r1, #1]
10011116:	7808      	ldrb	r0, [r1, #0]
10011118:	0212      	lsls	r2, r2, #8
1001111a:	4302      	orrs	r2, r0
1001111c:	805a      	strh	r2, [r3, #2]
1001111e:	78ca      	ldrb	r2, [r1, #3]
10011120:	7888      	ldrb	r0, [r1, #2]
10011122:	0212      	lsls	r2, r2, #8
10011124:	4302      	orrs	r2, r0
10011126:	809a      	strh	r2, [r3, #4]
10011128:	794a      	ldrb	r2, [r1, #5]
1001112a:	7908      	ldrb	r0, [r1, #4]
1001112c:	0212      	lsls	r2, r2, #8
1001112e:	4302      	orrs	r2, r0
10011130:	80da      	strh	r2, [r3, #6]
10011132:	3308      	adds	r3, #8
10011134:	1c18      	adds	r0, r3, #0
10011136:	3106      	adds	r1, #6
10011138:	4b01      	ldr	r3, [pc, #4]	; (10011140 <gattc_write_req_ind_parser+0x34>)
1001113a:	4798      	blx	r3
1001113c:	bd08      	pop	{r3, pc}
1001113e:	46c0      	nop			; (mov r8, r8)
10011140:	1001576f 	.word	0x1001576f

10011144 <gattc_att_info_req_parser>:
10011144:	7843      	ldrb	r3, [r0, #1]
10011146:	7802      	ldrb	r2, [r0, #0]
10011148:	021b      	lsls	r3, r3, #8
1001114a:	4313      	orrs	r3, r2
1001114c:	800b      	strh	r3, [r1, #0]
1001114e:	4770      	bx	lr

10011150 <gattc_read_cfm>:
10011150:	b538      	push	{r3, r4, r5, lr}
10011152:	2514      	movs	r5, #20
10011154:	1c1c      	adds	r4, r3, #0
10011156:	4b14      	ldr	r3, [pc, #80]	; (100111a8 <gattc_read_cfm+0x58>)
10011158:	70d9      	strb	r1, [r3, #3]
1001115a:	4914      	ldr	r1, [pc, #80]	; (100111ac <gattc_read_cfm+0x5c>)
1001115c:	701d      	strb	r5, [r3, #0]
1001115e:	3d08      	subs	r5, #8
10011160:	705d      	strb	r5, [r3, #1]
10011162:	709d      	strb	r5, [r3, #2]
10011164:	880d      	ldrh	r5, [r1, #0]
10011166:	8809      	ldrh	r1, [r1, #0]
10011168:	7218      	strb	r0, [r3, #8]
1001116a:	0a09      	lsrs	r1, r1, #8
1001116c:	7159      	strb	r1, [r3, #5]
1001116e:	0a00      	lsrs	r0, r0, #8
10011170:	0a21      	lsrs	r1, r4, #8
10011172:	711d      	strb	r5, [r3, #4]
10011174:	7258      	strb	r0, [r3, #9]
10011176:	729c      	strb	r4, [r3, #10]
10011178:	72d9      	strb	r1, [r3, #11]
1001117a:	731a      	strb	r2, [r3, #12]
1001117c:	1c1d      	adds	r5, r3, #0
1001117e:	2c00      	cmp	r4, #0
10011180:	d007      	beq.n	10011192 <gattc_read_cfm+0x42>
10011182:	9904      	ldr	r1, [sp, #16]
10011184:	1c22      	adds	r2, r4, #0
10011186:	480a      	ldr	r0, [pc, #40]	; (100111b0 <gattc_read_cfm+0x60>)
10011188:	4b0a      	ldr	r3, [pc, #40]	; (100111b4 <gattc_read_cfm+0x64>)
1001118a:	340d      	adds	r4, #13
1001118c:	4798      	blx	r3
1001118e:	b2a1      	uxth	r1, r4
10011190:	e001      	b.n	10011196 <gattc_read_cfm+0x46>
10011192:	210e      	movs	r1, #14
10011194:	735c      	strb	r4, [r3, #13]
10011196:	1c0b      	adds	r3, r1, #0
10011198:	3b08      	subs	r3, #8
1001119a:	71ab      	strb	r3, [r5, #6]
1001119c:	121b      	asrs	r3, r3, #8
1001119e:	71eb      	strb	r3, [r5, #7]
100111a0:	1c28      	adds	r0, r5, #0
100111a2:	4b05      	ldr	r3, [pc, #20]	; (100111b8 <gattc_read_cfm+0x68>)
100111a4:	4798      	blx	r3
100111a6:	bd38      	pop	{r3, r4, r5, pc}
100111a8:	1001b290 	.word	0x1001b290
100111ac:	1001af20 	.word	0x1001af20
100111b0:	1001b29d 	.word	0x1001b29d
100111b4:	1001576f 	.word	0x1001576f
100111b8:	1000fe91 	.word	0x1000fe91

100111bc <gattc_write_cfm>:
100111bc:	4b0d      	ldr	r3, [pc, #52]	; (100111f4 <gattc_write_cfm+0x38>)
100111be:	b510      	push	{r4, lr}
100111c0:	729a      	strb	r2, [r3, #10]
100111c2:	2203      	movs	r2, #3
100111c4:	2416      	movs	r4, #22
100111c6:	719a      	strb	r2, [r3, #6]
100111c8:	2200      	movs	r2, #0
100111ca:	70d9      	strb	r1, [r3, #3]
100111cc:	490a      	ldr	r1, [pc, #40]	; (100111f8 <gattc_write_cfm+0x3c>)
100111ce:	701c      	strb	r4, [r3, #0]
100111d0:	3c0a      	subs	r4, #10
100111d2:	705c      	strb	r4, [r3, #1]
100111d4:	709c      	strb	r4, [r3, #2]
100111d6:	880c      	ldrh	r4, [r1, #0]
100111d8:	8809      	ldrh	r1, [r1, #0]
100111da:	7218      	strb	r0, [r3, #8]
100111dc:	0a09      	lsrs	r1, r1, #8
100111de:	0a00      	lsrs	r0, r0, #8
100111e0:	711c      	strb	r4, [r3, #4]
100111e2:	7159      	strb	r1, [r3, #5]
100111e4:	7258      	strb	r0, [r3, #9]
100111e6:	71da      	strb	r2, [r3, #7]
100111e8:	1c18      	adds	r0, r3, #0
100111ea:	210b      	movs	r1, #11
100111ec:	4b03      	ldr	r3, [pc, #12]	; (100111fc <gattc_write_cfm+0x40>)
100111ee:	4798      	blx	r3
100111f0:	bd10      	pop	{r4, pc}
100111f2:	46c0      	nop			; (mov r8, r8)
100111f4:	1001b290 	.word	0x1001b290
100111f8:	1001af20 	.word	0x1001af20
100111fc:	1000fe91 	.word	0x1000fe91

10011200 <gattc_att_info_cfm>:
10011200:	b538      	push	{r3, r4, r5, lr}
10011202:	4c0e      	ldr	r4, [pc, #56]	; (1001123c <gattc_att_info_cfm+0x3c>)
10011204:	2518      	movs	r5, #24
10011206:	7323      	strb	r3, [r4, #12]
10011208:	2305      	movs	r3, #5
1001120a:	71a3      	strb	r3, [r4, #6]
1001120c:	2300      	movs	r3, #0
1001120e:	70e1      	strb	r1, [r4, #3]
10011210:	490b      	ldr	r1, [pc, #44]	; (10011240 <gattc_att_info_cfm+0x40>)
10011212:	7025      	strb	r5, [r4, #0]
10011214:	3d0c      	subs	r5, #12
10011216:	7065      	strb	r5, [r4, #1]
10011218:	70a5      	strb	r5, [r4, #2]
1001121a:	880d      	ldrh	r5, [r1, #0]
1001121c:	8809      	ldrh	r1, [r1, #0]
1001121e:	7220      	strb	r0, [r4, #8]
10011220:	0a09      	lsrs	r1, r1, #8
10011222:	0a00      	lsrs	r0, r0, #8
10011224:	7161      	strb	r1, [r4, #5]
10011226:	7260      	strb	r0, [r4, #9]
10011228:	72a2      	strb	r2, [r4, #10]
1001122a:	71e3      	strb	r3, [r4, #7]
1001122c:	0a12      	lsrs	r2, r2, #8
1001122e:	1c20      	adds	r0, r4, #0
10011230:	210d      	movs	r1, #13
10011232:	4b04      	ldr	r3, [pc, #16]	; (10011244 <gattc_att_info_cfm+0x44>)
10011234:	7125      	strb	r5, [r4, #4]
10011236:	72e2      	strb	r2, [r4, #11]
10011238:	4798      	blx	r3
1001123a:	bd38      	pop	{r3, r4, r5, pc}
1001123c:	1001b290 	.word	0x1001b290
10011240:	1001af20 	.word	0x1001af20
10011244:	1000fe91 	.word	0x1000fe91

10011248 <gattc_send_evt_cmd_handler>:
10011248:	b570      	push	{r4, r5, r6, lr}
1001124a:	2610      	movs	r6, #16
1001124c:	ac04      	add	r4, sp, #16
1001124e:	8825      	ldrh	r5, [r4, #0]
10011250:	4c15      	ldr	r4, [pc, #84]	; (100112a8 <gattc_send_evt_cmd_handler+0x60>)
10011252:	70e2      	strb	r2, [r4, #3]
10011254:	4a15      	ldr	r2, [pc, #84]	; (100112ac <gattc_send_evt_cmd_handler+0x64>)
10011256:	7026      	strb	r6, [r4, #0]
10011258:	3e04      	subs	r6, #4
1001125a:	7066      	strb	r6, [r4, #1]
1001125c:	70a6      	strb	r6, [r4, #2]
1001125e:	8816      	ldrh	r6, [r2, #0]
10011260:	8812      	ldrh	r2, [r2, #0]
10011262:	7220      	strb	r0, [r4, #8]
10011264:	0a12      	lsrs	r2, r2, #8
10011266:	7162      	strb	r2, [r4, #5]
10011268:	4a11      	ldr	r2, [pc, #68]	; (100112b0 <gattc_send_evt_cmd_handler+0x68>)
1001126a:	7321      	strb	r1, [r4, #12]
1001126c:	8812      	ldrh	r2, [r2, #0]
1001126e:	73a5      	strb	r5, [r4, #14]
10011270:	3201      	adds	r2, #1
10011272:	7262      	strb	r2, [r4, #9]
10011274:	1212      	asrs	r2, r2, #8
10011276:	72a2      	strb	r2, [r4, #10]
10011278:	2200      	movs	r2, #0
1001127a:	72e2      	strb	r2, [r4, #11]
1001127c:	0a0a      	lsrs	r2, r1, #8
1001127e:	7362      	strb	r2, [r4, #13]
10011280:	0a2a      	lsrs	r2, r5, #8
10011282:	73e2      	strb	r2, [r4, #15]
10011284:	1c19      	adds	r1, r3, #0
10011286:	1c2a      	adds	r2, r5, #0
10011288:	4b0a      	ldr	r3, [pc, #40]	; (100112b4 <gattc_send_evt_cmd_handler+0x6c>)
1001128a:	3510      	adds	r5, #16
1001128c:	480a      	ldr	r0, [pc, #40]	; (100112b8 <gattc_send_evt_cmd_handler+0x70>)
1001128e:	7126      	strb	r6, [r4, #4]
10011290:	4798      	blx	r3
10011292:	b2a9      	uxth	r1, r5
10011294:	1c0b      	adds	r3, r1, #0
10011296:	3b08      	subs	r3, #8
10011298:	71a3      	strb	r3, [r4, #6]
1001129a:	121b      	asrs	r3, r3, #8
1001129c:	71e3      	strb	r3, [r4, #7]
1001129e:	1c20      	adds	r0, r4, #0
100112a0:	4b06      	ldr	r3, [pc, #24]	; (100112bc <gattc_send_evt_cmd_handler+0x74>)
100112a2:	4798      	blx	r3
100112a4:	bd70      	pop	{r4, r5, r6, pc}
100112a6:	46c0      	nop			; (mov r8, r8)
100112a8:	1001b290 	.word	0x1001b290
100112ac:	1001af20 	.word	0x1001af20
100112b0:	1001a058 	.word	0x1001a058
100112b4:	1001576f 	.word	0x1001576f
100112b8:	1001b2a0 	.word	0x1001b2a0
100112bc:	1000fe91 	.word	0x1000fe91

100112c0 <gattc_event_cfm_handler>:
100112c0:	220e      	movs	r2, #14
100112c2:	b508      	push	{r3, lr}
100112c4:	4b0b      	ldr	r3, [pc, #44]	; (100112f4 <gattc_event_cfm_handler+0x34>)
100112c6:	701a      	strb	r2, [r3, #0]
100112c8:	3a02      	subs	r2, #2
100112ca:	705a      	strb	r2, [r3, #1]
100112cc:	709a      	strb	r2, [r3, #2]
100112ce:	4a0a      	ldr	r2, [pc, #40]	; (100112f8 <gattc_event_cfm_handler+0x38>)
100112d0:	70d8      	strb	r0, [r3, #3]
100112d2:	8810      	ldrh	r0, [r2, #0]
100112d4:	8812      	ldrh	r2, [r2, #0]
100112d6:	7219      	strb	r1, [r3, #8]
100112d8:	0a12      	lsrs	r2, r2, #8
100112da:	715a      	strb	r2, [r3, #5]
100112dc:	2202      	movs	r2, #2
100112de:	719a      	strb	r2, [r3, #6]
100112e0:	2200      	movs	r2, #0
100112e2:	0a09      	lsrs	r1, r1, #8
100112e4:	7118      	strb	r0, [r3, #4]
100112e6:	7259      	strb	r1, [r3, #9]
100112e8:	71da      	strb	r2, [r3, #7]
100112ea:	1c18      	adds	r0, r3, #0
100112ec:	210a      	movs	r1, #10
100112ee:	4b03      	ldr	r3, [pc, #12]	; (100112fc <gattc_event_cfm_handler+0x3c>)
100112f0:	4798      	blx	r3
100112f2:	bd08      	pop	{r3, pc}
100112f4:	1001b290 	.word	0x1001b290
100112f8:	1001af20 	.word	0x1001af20
100112fc:	1000fe91 	.word	0x1000fe91

10011300 <gattc_disc_svc_ind_parser>:
10011300:	b570      	push	{r4, r5, r6, lr}
10011302:	1c15      	adds	r5, r2, #0
10011304:	0a00      	lsrs	r0, r0, #8
10011306:	8010      	strh	r0, [r2, #0]
10011308:	784b      	ldrb	r3, [r1, #1]
1001130a:	780a      	ldrb	r2, [r1, #0]
1001130c:	021b      	lsls	r3, r3, #8
1001130e:	4313      	orrs	r3, r2
10011310:	806b      	strh	r3, [r5, #2]
10011312:	78cb      	ldrb	r3, [r1, #3]
10011314:	788a      	ldrb	r2, [r1, #2]
10011316:	021b      	lsls	r3, r3, #8
10011318:	4313      	orrs	r3, r2
1001131a:	80ab      	strh	r3, [r5, #4]
1001131c:	790e      	ldrb	r6, [r1, #4]
1001131e:	4b05      	ldr	r3, [pc, #20]	; (10011334 <gattc_disc_svc_ind_parser+0x34>)
10011320:	1c30      	adds	r0, r6, #0
10011322:	1c0c      	adds	r4, r1, #0
10011324:	4798      	blx	r3
10011326:	1c32      	adds	r2, r6, #0
10011328:	71a8      	strb	r0, [r5, #6]
1001132a:	1d61      	adds	r1, r4, #5
1001132c:	1de8      	adds	r0, r5, #7
1001132e:	4b02      	ldr	r3, [pc, #8]	; (10011338 <gattc_disc_svc_ind_parser+0x38>)
10011330:	4798      	blx	r3
10011332:	bd70      	pop	{r4, r5, r6, pc}
10011334:	1000f1d1 	.word	0x1000f1d1
10011338:	1001576f 	.word	0x1001576f

1001133c <gattc_disc_svc_incl_ind_parser>:
1001133c:	b570      	push	{r4, r5, r6, lr}
1001133e:	1c15      	adds	r5, r2, #0
10011340:	0a00      	lsrs	r0, r0, #8
10011342:	8010      	strh	r0, [r2, #0]
10011344:	784b      	ldrb	r3, [r1, #1]
10011346:	780a      	ldrb	r2, [r1, #0]
10011348:	021b      	lsls	r3, r3, #8
1001134a:	4313      	orrs	r3, r2
1001134c:	806b      	strh	r3, [r5, #2]
1001134e:	78cb      	ldrb	r3, [r1, #3]
10011350:	788a      	ldrb	r2, [r1, #2]
10011352:	021b      	lsls	r3, r3, #8
10011354:	4313      	orrs	r3, r2
10011356:	80ab      	strh	r3, [r5, #4]
10011358:	794b      	ldrb	r3, [r1, #5]
1001135a:	790a      	ldrb	r2, [r1, #4]
1001135c:	021b      	lsls	r3, r3, #8
1001135e:	4313      	orrs	r3, r2
10011360:	80eb      	strh	r3, [r5, #6]
10011362:	798e      	ldrb	r6, [r1, #6]
10011364:	4b05      	ldr	r3, [pc, #20]	; (1001137c <gattc_disc_svc_incl_ind_parser+0x40>)
10011366:	1c30      	adds	r0, r6, #0
10011368:	1c0c      	adds	r4, r1, #0
1001136a:	4798      	blx	r3
1001136c:	7228      	strb	r0, [r5, #8]
1001136e:	1c28      	adds	r0, r5, #0
10011370:	1c32      	adds	r2, r6, #0
10011372:	1de1      	adds	r1, r4, #7
10011374:	4b02      	ldr	r3, [pc, #8]	; (10011380 <gattc_disc_svc_incl_ind_parser+0x44>)
10011376:	3009      	adds	r0, #9
10011378:	4798      	blx	r3
1001137a:	bd70      	pop	{r4, r5, r6, pc}
1001137c:	1000f1d1 	.word	0x1000f1d1
10011380:	1001576f 	.word	0x1001576f

10011384 <gattc_disc_char_ind_parser>:
10011384:	b570      	push	{r4, r5, r6, lr}
10011386:	1c15      	adds	r5, r2, #0
10011388:	0a00      	lsrs	r0, r0, #8
1001138a:	8010      	strh	r0, [r2, #0]
1001138c:	784b      	ldrb	r3, [r1, #1]
1001138e:	780a      	ldrb	r2, [r1, #0]
10011390:	021b      	lsls	r3, r3, #8
10011392:	4313      	orrs	r3, r2
10011394:	806b      	strh	r3, [r5, #2]
10011396:	78cb      	ldrb	r3, [r1, #3]
10011398:	788a      	ldrb	r2, [r1, #2]
1001139a:	021b      	lsls	r3, r3, #8
1001139c:	4313      	orrs	r3, r2
1001139e:	80ab      	strh	r3, [r5, #4]
100113a0:	790b      	ldrb	r3, [r1, #4]
100113a2:	1c0c      	adds	r4, r1, #0
100113a4:	71ab      	strb	r3, [r5, #6]
100113a6:	794e      	ldrb	r6, [r1, #5]
100113a8:	4b05      	ldr	r3, [pc, #20]	; (100113c0 <gattc_disc_char_ind_parser+0x3c>)
100113aa:	1c30      	adds	r0, r6, #0
100113ac:	4798      	blx	r3
100113ae:	71e8      	strb	r0, [r5, #7]
100113b0:	1c28      	adds	r0, r5, #0
100113b2:	1c32      	adds	r2, r6, #0
100113b4:	1da1      	adds	r1, r4, #6
100113b6:	4b03      	ldr	r3, [pc, #12]	; (100113c4 <gattc_disc_char_ind_parser+0x40>)
100113b8:	3008      	adds	r0, #8
100113ba:	4798      	blx	r3
100113bc:	bd70      	pop	{r4, r5, r6, pc}
100113be:	46c0      	nop			; (mov r8, r8)
100113c0:	1000f1d1 	.word	0x1000f1d1
100113c4:	1001576f 	.word	0x1001576f

100113c8 <gattc_disc_char_desc_ind_parser>:
100113c8:	b570      	push	{r4, r5, r6, lr}
100113ca:	1c15      	adds	r5, r2, #0
100113cc:	0a00      	lsrs	r0, r0, #8
100113ce:	8010      	strh	r0, [r2, #0]
100113d0:	784b      	ldrb	r3, [r1, #1]
100113d2:	780a      	ldrb	r2, [r1, #0]
100113d4:	021b      	lsls	r3, r3, #8
100113d6:	4313      	orrs	r3, r2
100113d8:	806b      	strh	r3, [r5, #2]
100113da:	788e      	ldrb	r6, [r1, #2]
100113dc:	4b05      	ldr	r3, [pc, #20]	; (100113f4 <gattc_disc_char_desc_ind_parser+0x2c>)
100113de:	1c30      	adds	r0, r6, #0
100113e0:	1c0c      	adds	r4, r1, #0
100113e2:	4798      	blx	r3
100113e4:	1c32      	adds	r2, r6, #0
100113e6:	7128      	strb	r0, [r5, #4]
100113e8:	1ce1      	adds	r1, r4, #3
100113ea:	1d68      	adds	r0, r5, #5
100113ec:	4b02      	ldr	r3, [pc, #8]	; (100113f8 <gattc_disc_char_desc_ind_parser+0x30>)
100113ee:	4798      	blx	r3
100113f0:	bd70      	pop	{r4, r5, r6, pc}
100113f2:	46c0      	nop			; (mov r8, r8)
100113f4:	1000f1d1 	.word	0x1000f1d1
100113f8:	1001576f 	.word	0x1001576f

100113fc <gattc_event_ind_and_notification_parser>:
100113fc:	b510      	push	{r4, lr}
100113fe:	780c      	ldrb	r4, [r1, #0]
10011400:	1c13      	adds	r3, r2, #0
10011402:	2c12      	cmp	r4, #18
10011404:	d10e      	bne.n	10011424 <gattc_event_ind_and_notification_parser+0x28>
10011406:	0a00      	lsrs	r0, r0, #8
10011408:	8010      	strh	r0, [r2, #0]
1001140a:	788a      	ldrb	r2, [r1, #2]
1001140c:	709a      	strb	r2, [r3, #2]
1001140e:	7948      	ldrb	r0, [r1, #5]
10011410:	790c      	ldrb	r4, [r1, #4]
10011412:	0200      	lsls	r0, r0, #8
10011414:	4320      	orrs	r0, r4
10011416:	8098      	strh	r0, [r3, #4]
10011418:	3106      	adds	r1, #6
1001141a:	1d98      	adds	r0, r3, #6
1001141c:	4b0b      	ldr	r3, [pc, #44]	; (1001144c <gattc_event_ind_and_notification_parser+0x50>)
1001141e:	4798      	blx	r3
10011420:	221b      	movs	r2, #27
10011422:	e010      	b.n	10011446 <gattc_event_ind_and_notification_parser+0x4a>
10011424:	2200      	movs	r2, #0
10011426:	2c13      	cmp	r4, #19
10011428:	d10d      	bne.n	10011446 <gattc_event_ind_and_notification_parser+0x4a>
1001142a:	0a00      	lsrs	r0, r0, #8
1001142c:	8018      	strh	r0, [r3, #0]
1001142e:	788a      	ldrb	r2, [r1, #2]
10011430:	709a      	strb	r2, [r3, #2]
10011432:	7908      	ldrb	r0, [r1, #4]
10011434:	78cc      	ldrb	r4, [r1, #3]
10011436:	0200      	lsls	r0, r0, #8
10011438:	4320      	orrs	r0, r4
1001143a:	8098      	strh	r0, [r3, #4]
1001143c:	3106      	adds	r1, #6
1001143e:	1d98      	adds	r0, r3, #6
10011440:	4b02      	ldr	r3, [pc, #8]	; (1001144c <gattc_event_ind_and_notification_parser+0x50>)
10011442:	4798      	blx	r3
10011444:	221c      	movs	r2, #28
10011446:	1c10      	adds	r0, r2, #0
10011448:	bd10      	pop	{r4, pc}
1001144a:	46c0      	nop			; (mov r8, r8)
1001144c:	1001576f 	.word	0x1001576f

10011450 <gattc_complete_evt_handler>:
10011450:	b500      	push	{lr}
10011452:	0a00      	lsrs	r0, r0, #8
10011454:	8010      	strh	r0, [r2, #0]
10011456:	7808      	ldrb	r0, [r1, #0]
10011458:	7090      	strb	r0, [r2, #2]
1001145a:	784b      	ldrb	r3, [r1, #1]
1001145c:	3801      	subs	r0, #1
1001145e:	70d3      	strb	r3, [r2, #3]
10011460:	2813      	cmp	r0, #19
10011462:	d82c      	bhi.n	100114be <gattc_complete_evt_handler+0x6e>
10011464:	f001 faec 	bl	10012a40 <__gnu_thumb1_case_uqi>
10011468:	0a0a0a0c 	.word	0x0a0a0a0c
1001146c:	210a0a0a 	.word	0x210a0a0a
10011470:	111f2121 	.word	0x111f2121
10011474:	2b111111 	.word	0x2b111111
10011478:	2919132b 	.word	0x2919132b
1001147c:	2017      	movs	r0, #23
1001147e:	e01f      	b.n	100114c0 <gattc_complete_evt_handler+0x70>
10011480:	2024      	movs	r0, #36	; 0x24
10011482:	2b00      	cmp	r3, #0
10011484:	d11c      	bne.n	100114c0 <gattc_complete_evt_handler+0x70>
10011486:	3017      	adds	r0, #23
10011488:	e01a      	b.n	100114c0 <gattc_complete_evt_handler+0x70>
1001148a:	2025      	movs	r0, #37	; 0x25
1001148c:	e018      	b.n	100114c0 <gattc_complete_evt_handler+0x70>
1001148e:	4a0d      	ldr	r2, [pc, #52]	; (100114c4 <gattc_complete_evt_handler+0x74>)
10011490:	201d      	movs	r0, #29
10011492:	6813      	ldr	r3, [r2, #0]
10011494:	3b01      	subs	r3, #1
10011496:	6013      	str	r3, [r2, #0]
10011498:	e012      	b.n	100114c0 <gattc_complete_evt_handler+0x70>
1001149a:	4a0a      	ldr	r2, [pc, #40]	; (100114c4 <gattc_complete_evt_handler+0x74>)
1001149c:	201e      	movs	r0, #30
1001149e:	6813      	ldr	r3, [r2, #0]
100114a0:	3b01      	subs	r3, #1
100114a2:	6013      	str	r3, [r2, #0]
100114a4:	e00c      	b.n	100114c0 <gattc_complete_evt_handler+0x70>
100114a6:	2019      	movs	r0, #25
100114a8:	e00a      	b.n	100114c0 <gattc_complete_evt_handler+0x70>
100114aa:	203b      	movs	r0, #59	; 0x3b
100114ac:	2b00      	cmp	r3, #0
100114ae:	d007      	beq.n	100114c0 <gattc_complete_evt_handler+0x70>
100114b0:	2182      	movs	r1, #130	; 0x82
100114b2:	0089      	lsls	r1, r1, #2
100114b4:	5453      	strb	r3, [r2, r1]
100114b6:	3823      	subs	r0, #35	; 0x23
100114b8:	e002      	b.n	100114c0 <gattc_complete_evt_handler+0x70>
100114ba:	2021      	movs	r0, #33	; 0x21
100114bc:	e000      	b.n	100114c0 <gattc_complete_evt_handler+0x70>
100114be:	2000      	movs	r0, #0
100114c0:	bd00      	pop	{pc}
100114c2:	46c0      	nop			; (mov r8, r8)
100114c4:	1001a05c 	.word	0x1001a05c

100114c8 <gattc_event_mtu_changed_ind_parser>:
100114c8:	0a00      	lsrs	r0, r0, #8
100114ca:	8010      	strh	r0, [r2, #0]
100114cc:	784b      	ldrb	r3, [r1, #1]
100114ce:	7809      	ldrb	r1, [r1, #0]
100114d0:	021b      	lsls	r3, r3, #8
100114d2:	430b      	orrs	r3, r1
100114d4:	8053      	strh	r3, [r2, #2]
100114d6:	4770      	bx	lr

100114d8 <gattc_read_ind_parser>:
100114d8:	0a00      	lsrs	r0, r0, #8
100114da:	b508      	push	{r3, lr}
100114dc:	8010      	strh	r0, [r2, #0]
100114de:	1c13      	adds	r3, r2, #0
100114e0:	2282      	movs	r2, #130	; 0x82
100114e2:	2000      	movs	r0, #0
100114e4:	0092      	lsls	r2, r2, #2
100114e6:	5498      	strb	r0, [r3, r2]
100114e8:	784a      	ldrb	r2, [r1, #1]
100114ea:	7808      	ldrb	r0, [r1, #0]
100114ec:	0212      	lsls	r2, r2, #8
100114ee:	4302      	orrs	r2, r0
100114f0:	805a      	strh	r2, [r3, #2]
100114f2:	78ca      	ldrb	r2, [r1, #3]
100114f4:	7888      	ldrb	r0, [r1, #2]
100114f6:	0212      	lsls	r2, r2, #8
100114f8:	4302      	orrs	r2, r0
100114fa:	80da      	strh	r2, [r3, #6]
100114fc:	794a      	ldrb	r2, [r1, #5]
100114fe:	7908      	ldrb	r0, [r1, #4]
10011500:	0212      	lsls	r2, r2, #8
10011502:	4302      	orrs	r2, r0
10011504:	809a      	strh	r2, [r3, #4]
10011506:	3308      	adds	r3, #8
10011508:	1c18      	adds	r0, r3, #0
1001150a:	3106      	adds	r1, #6
1001150c:	4b01      	ldr	r3, [pc, #4]	; (10011514 <gattc_read_ind_parser+0x3c>)
1001150e:	4798      	blx	r3
10011510:	bd08      	pop	{r3, pc}
10011512:	46c0      	nop			; (mov r8, r8)
10011514:	1001576f 	.word	0x1001576f

10011518 <gattc_svc_changed_cfg_ind_parser>:
10011518:	0a00      	lsrs	r0, r0, #8
1001151a:	8010      	strh	r0, [r2, #0]
1001151c:	784b      	ldrb	r3, [r1, #1]
1001151e:	7809      	ldrb	r1, [r1, #0]
10011520:	021b      	lsls	r3, r3, #8
10011522:	430b      	orrs	r3, r1
10011524:	8053      	strh	r3, [r2, #2]
10011526:	4770      	bx	lr

10011528 <init_gattc_task_module>:
10011528:	2300      	movs	r3, #0
1001152a:	4a02      	ldr	r2, [pc, #8]	; (10011534 <init_gattc_task_module+0xc>)
1001152c:	8013      	strh	r3, [r2, #0]
1001152e:	4a02      	ldr	r2, [pc, #8]	; (10011538 <init_gattc_task_module+0x10>)
10011530:	8013      	strh	r3, [r2, #0]
10011532:	4770      	bx	lr
10011534:	1001a056 	.word	0x1001a056
10011538:	1001a058 	.word	0x1001a058

1001153c <gattm_add_svc_req_handler>:
1001153c:	2200      	movs	r2, #0
1001153e:	210b      	movs	r1, #11
10011540:	b5f0      	push	{r4, r5, r6, r7, lr}
10011542:	1c04      	adds	r4, r0, #0
10011544:	7943      	ldrb	r3, [r0, #5]
10011546:	b085      	sub	sp, #20
10011548:	9301      	str	r3, [sp, #4]
1001154a:	ab02      	add	r3, sp, #8
1001154c:	71da      	strb	r2, [r3, #7]
1001154e:	4b37      	ldr	r3, [pc, #220]	; (1001162c <gattm_add_svc_req_handler+0xf0>)
10011550:	7059      	strb	r1, [r3, #1]
10011552:	7099      	strb	r1, [r3, #2]
10011554:	4936      	ldr	r1, [pc, #216]	; (10011630 <gattm_add_svc_req_handler+0xf4>)
10011556:	701a      	strb	r2, [r3, #0]
10011558:	8808      	ldrh	r0, [r1, #0]
1001155a:	8809      	ldrh	r1, [r1, #0]
1001155c:	70da      	strb	r2, [r3, #3]
1001155e:	0a09      	lsrs	r1, r1, #8
10011560:	7118      	strb	r0, [r3, #4]
10011562:	7159      	strb	r1, [r3, #5]
10011564:	8821      	ldrh	r1, [r4, #0]
10011566:	7219      	strb	r1, [r3, #8]
10011568:	8821      	ldrh	r1, [r4, #0]
1001156a:	0a09      	lsrs	r1, r1, #8
1001156c:	7259      	strb	r1, [r3, #9]
1001156e:	8861      	ldrh	r1, [r4, #2]
10011570:	7299      	strb	r1, [r3, #10]
10011572:	8861      	ldrh	r1, [r4, #2]
10011574:	0a09      	lsrs	r1, r1, #8
10011576:	72d9      	strb	r1, [r3, #11]
10011578:	7921      	ldrb	r1, [r4, #4]
1001157a:	7319      	strb	r1, [r3, #12]
1001157c:	4669      	mov	r1, sp
1001157e:	7909      	ldrb	r1, [r1, #4]
10011580:	7359      	strb	r1, [r3, #13]
10011582:	18a1      	adds	r1, r4, r2
10011584:	7988      	ldrb	r0, [r1, #6]
10011586:	1899      	adds	r1, r3, r2
10011588:	3201      	adds	r2, #1
1001158a:	7388      	strb	r0, [r1, #14]
1001158c:	2a10      	cmp	r2, #16
1001158e:	d1f8      	bne.n	10011582 <gattm_add_svc_req_handler+0x46>
10011590:	1c27      	adds	r7, r4, #0
10011592:	2300      	movs	r3, #0
10011594:	251e      	movs	r5, #30
10011596:	3716      	adds	r7, #22
10011598:	9300      	str	r3, [sp, #0]
1001159a:	9b00      	ldr	r3, [sp, #0]
1001159c:	9a01      	ldr	r2, [sp, #4]
1001159e:	4e23      	ldr	r6, [pc, #140]	; (1001162c <gattm_add_svc_req_handler+0xf0>)
100115a0:	4293      	cmp	r3, r2
100115a2:	da21      	bge.n	100115e8 <gattm_add_svc_req_handler+0xac>
100115a4:	1c39      	adds	r1, r7, #0
100115a6:	1970      	adds	r0, r6, r5
100115a8:	2210      	movs	r2, #16
100115aa:	4b22      	ldr	r3, [pc, #136]	; (10011634 <gattm_add_svc_req_handler+0xf8>)
100115ac:	4798      	blx	r3
100115ae:	1c2b      	adds	r3, r5, #0
100115b0:	8a3a      	ldrh	r2, [r7, #16]
100115b2:	3310      	adds	r3, #16
100115b4:	b29b      	uxth	r3, r3
100115b6:	54f2      	strb	r2, [r6, r3]
100115b8:	1c2b      	adds	r3, r5, #0
100115ba:	8a3a      	ldrh	r2, [r7, #16]
100115bc:	3311      	adds	r3, #17
100115be:	b29b      	uxth	r3, r3
100115c0:	0a12      	lsrs	r2, r2, #8
100115c2:	54f2      	strb	r2, [r6, r3]
100115c4:	1c2a      	adds	r2, r5, #0
100115c6:	1c2b      	adds	r3, r5, #0
100115c8:	8a79      	ldrh	r1, [r7, #18]
100115ca:	3212      	adds	r2, #18
100115cc:	b292      	uxth	r2, r2
100115ce:	54b1      	strb	r1, [r6, r2]
100115d0:	8a7a      	ldrh	r2, [r7, #18]
100115d2:	3313      	adds	r3, #19
100115d4:	b29b      	uxth	r3, r3
100115d6:	0a12      	lsrs	r2, r2, #8
100115d8:	54f2      	strb	r2, [r6, r3]
100115da:	9b00      	ldr	r3, [sp, #0]
100115dc:	3514      	adds	r5, #20
100115de:	3301      	adds	r3, #1
100115e0:	b2ad      	uxth	r5, r5
100115e2:	9300      	str	r3, [sp, #0]
100115e4:	3714      	adds	r7, #20
100115e6:	e7d8      	b.n	1001159a <gattm_add_svc_req_handler+0x5e>
100115e8:	2114      	movs	r1, #20
100115ea:	4d13      	ldr	r5, [pc, #76]	; (10011638 <gattm_add_svc_req_handler+0xfc>)
100115ec:	4b13      	ldr	r3, [pc, #76]	; (1001163c <gattm_add_svc_req_handler+0x100>)
100115ee:	4351      	muls	r1, r2
100115f0:	802b      	strh	r3, [r5, #0]
100115f2:	230b      	movs	r3, #11
100115f4:	311e      	adds	r1, #30
100115f6:	80ab      	strh	r3, [r5, #4]
100115f8:	1c0b      	adds	r3, r1, #0
100115fa:	3b08      	subs	r3, #8
100115fc:	71b3      	strb	r3, [r6, #6]
100115fe:	121b      	asrs	r3, r3, #8
10011600:	71f3      	strb	r3, [r6, #7]
10011602:	1c30      	adds	r0, r6, #0
10011604:	4b0e      	ldr	r3, [pc, #56]	; (10011640 <gattm_add_svc_req_handler+0x104>)
10011606:	4798      	blx	r3
10011608:	ab02      	add	r3, sp, #8
1001160a:	1dde      	adds	r6, r3, #7
1001160c:	1c30      	adds	r0, r6, #0
1001160e:	4b0d      	ldr	r3, [pc, #52]	; (10011644 <gattm_add_svc_req_handler+0x108>)
10011610:	4798      	blx	r3
10011612:	7833      	ldrb	r3, [r6, #0]
10011614:	20e2      	movs	r0, #226	; 0xe2
10011616:	2b00      	cmp	r3, #0
10011618:	d106      	bne.n	10011628 <gattm_add_svc_req_handler+0xec>
1001161a:	68aa      	ldr	r2, [r5, #8]
1001161c:	7853      	ldrb	r3, [r2, #1]
1001161e:	7811      	ldrb	r1, [r2, #0]
10011620:	021b      	lsls	r3, r3, #8
10011622:	430b      	orrs	r3, r1
10011624:	8023      	strh	r3, [r4, #0]
10011626:	7890      	ldrb	r0, [r2, #2]
10011628:	b005      	add	sp, #20
1001162a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001162c:	1001b290 	.word	0x1001b290
10011630:	1001af20 	.word	0x1001af20
10011634:	1001576f 	.word	0x1001576f
10011638:	1001af14 	.word	0x1001af14
1001163c:	00000b01 	.word	0x00000b01
10011640:	1000fe91 	.word	0x1000fe91
10011644:	1000fef5 	.word	0x1000fef5

10011648 <gattm_add_attribute_req_handler>:
10011648:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001164a:	1c1f      	adds	r7, r3, #0
1001164c:	4b16      	ldr	r3, [pc, #88]	; (100116a8 <gattm_add_attribute_req_handler+0x60>)
1001164e:	9100      	str	r1, [sp, #0]
10011650:	9201      	str	r2, [sp, #4]
10011652:	1c05      	adds	r5, r0, #0
10011654:	7946      	ldrb	r6, [r0, #5]
10011656:	6818      	ldr	r0, [r3, #0]
10011658:	2114      	movs	r1, #20
1001165a:	4b14      	ldr	r3, [pc, #80]	; (100116ac <gattm_add_attribute_req_handler+0x64>)
1001165c:	382a      	subs	r0, #42	; 0x2a
1001165e:	4798      	blx	r3
10011660:	2311      	movs	r3, #17
10011662:	4286      	cmp	r6, r0
10011664:	d21e      	bcs.n	100116a4 <gattm_add_attribute_req_handler+0x5c>
10011666:	2414      	movs	r4, #20
10011668:	4366      	muls	r6, r4
1001166a:	19a8      	adds	r0, r5, r6
1001166c:	2100      	movs	r1, #0
1001166e:	2210      	movs	r2, #16
10011670:	4b0f      	ldr	r3, [pc, #60]	; (100116b0 <gattm_add_attribute_req_handler+0x68>)
10011672:	3016      	adds	r0, #22
10011674:	4798      	blx	r3
10011676:	7968      	ldrb	r0, [r5, #5]
10011678:	1c3a      	adds	r2, r7, #0
1001167a:	4360      	muls	r0, r4
1001167c:	1828      	adds	r0, r5, r0
1001167e:	4b0d      	ldr	r3, [pc, #52]	; (100116b4 <gattm_add_attribute_req_handler+0x6c>)
10011680:	3016      	adds	r0, #22
10011682:	9908      	ldr	r1, [sp, #32]
10011684:	4798      	blx	r3
10011686:	466a      	mov	r2, sp
10011688:	796b      	ldrb	r3, [r5, #5]
1001168a:	8812      	ldrh	r2, [r2, #0]
1001168c:	435c      	muls	r4, r3
1001168e:	192c      	adds	r4, r5, r4
10011690:	8522      	strh	r2, [r4, #40]	; 0x28
10011692:	466a      	mov	r2, sp
10011694:	8892      	ldrh	r2, [r2, #4]
10011696:	84e2      	strh	r2, [r4, #38]	; 0x26
10011698:	9a09      	ldr	r2, [sp, #36]	; 0x24
1001169a:	8013      	strh	r3, [r2, #0]
1001169c:	796b      	ldrb	r3, [r5, #5]
1001169e:	3301      	adds	r3, #1
100116a0:	716b      	strb	r3, [r5, #5]
100116a2:	2300      	movs	r3, #0
100116a4:	1c18      	adds	r0, r3, #0
100116a6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100116a8:	10019fcc 	.word	0x10019fcc
100116ac:	10012a55 	.word	0x10012a55
100116b0:	10015781 	.word	0x10015781
100116b4:	1001576f 	.word	0x1001576f

100116b8 <gattm_att_set_value_req_handler>:
100116b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100116ba:	466b      	mov	r3, sp
100116bc:	1dde      	adds	r6, r3, #7
100116be:	2300      	movs	r3, #0
100116c0:	1c0d      	adds	r5, r1, #0
100116c2:	210c      	movs	r1, #12
100116c4:	270b      	movs	r7, #11
100116c6:	4c17      	ldr	r4, [pc, #92]	; (10011724 <gattm_att_set_value_req_handler+0x6c>)
100116c8:	7033      	strb	r3, [r6, #0]
100116ca:	70e3      	strb	r3, [r4, #3]
100116cc:	4b16      	ldr	r3, [pc, #88]	; (10011728 <gattm_att_set_value_req_handler+0x70>)
100116ce:	7021      	strb	r1, [r4, #0]
100116d0:	8819      	ldrh	r1, [r3, #0]
100116d2:	881b      	ldrh	r3, [r3, #0]
100116d4:	7220      	strb	r0, [r4, #8]
100116d6:	0a1b      	lsrs	r3, r3, #8
100116d8:	7163      	strb	r3, [r4, #5]
100116da:	0a00      	lsrs	r0, r0, #8
100116dc:	0a2b      	lsrs	r3, r5, #8
100116de:	7121      	strb	r1, [r4, #4]
100116e0:	7260      	strb	r0, [r4, #9]
100116e2:	1c11      	adds	r1, r2, #0
100116e4:	72a5      	strb	r5, [r4, #10]
100116e6:	1c2a      	adds	r2, r5, #0
100116e8:	72e3      	strb	r3, [r4, #11]
100116ea:	350c      	adds	r5, #12
100116ec:	4b0f      	ldr	r3, [pc, #60]	; (1001172c <gattm_att_set_value_req_handler+0x74>)
100116ee:	4810      	ldr	r0, [pc, #64]	; (10011730 <gattm_att_set_value_req_handler+0x78>)
100116f0:	7067      	strb	r7, [r4, #1]
100116f2:	70a7      	strb	r7, [r4, #2]
100116f4:	4798      	blx	r3
100116f6:	b2a9      	uxth	r1, r5
100116f8:	4b0e      	ldr	r3, [pc, #56]	; (10011734 <gattm_att_set_value_req_handler+0x7c>)
100116fa:	4d0f      	ldr	r5, [pc, #60]	; (10011738 <gattm_att_set_value_req_handler+0x80>)
100116fc:	1c20      	adds	r0, r4, #0
100116fe:	802b      	strh	r3, [r5, #0]
10011700:	1c0b      	adds	r3, r1, #0
10011702:	3b08      	subs	r3, #8
10011704:	71a3      	strb	r3, [r4, #6]
10011706:	121b      	asrs	r3, r3, #8
10011708:	71e3      	strb	r3, [r4, #7]
1001170a:	4b0c      	ldr	r3, [pc, #48]	; (1001173c <gattm_att_set_value_req_handler+0x84>)
1001170c:	80af      	strh	r7, [r5, #4]
1001170e:	4798      	blx	r3
10011710:	1c30      	adds	r0, r6, #0
10011712:	4b0b      	ldr	r3, [pc, #44]	; (10011740 <gattm_att_set_value_req_handler+0x88>)
10011714:	4798      	blx	r3
10011716:	7833      	ldrb	r3, [r6, #0]
10011718:	20e2      	movs	r0, #226	; 0xe2
1001171a:	2b00      	cmp	r3, #0
1001171c:	d101      	bne.n	10011722 <gattm_att_set_value_req_handler+0x6a>
1001171e:	68ab      	ldr	r3, [r5, #8]
10011720:	7898      	ldrb	r0, [r3, #2]
10011722:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10011724:	1001b290 	.word	0x1001b290
10011728:	1001af20 	.word	0x1001af20
1001172c:	1001576f 	.word	0x1001576f
10011730:	1001b29c 	.word	0x1001b29c
10011734:	00000b0d 	.word	0x00000b0d
10011738:	1001af14 	.word	0x1001af14
1001173c:	1000fe91 	.word	0x1000fe91
10011740:	1000fef5 	.word	0x1000fef5

10011744 <gattm_att_get_value_req_handler>:
10011744:	b5f0      	push	{r4, r5, r6, r7, lr}
10011746:	b085      	sub	sp, #20
10011748:	9201      	str	r2, [sp, #4]
1001174a:	220a      	movs	r2, #10
1001174c:	1c04      	adds	r4, r0, #0
1001174e:	481d      	ldr	r0, [pc, #116]	; (100117c4 <gattm_att_get_value_req_handler+0x80>)
10011750:	ab02      	add	r3, sp, #8
10011752:	1dde      	adds	r6, r3, #7
10011754:	7002      	strb	r2, [r0, #0]
10011756:	2300      	movs	r3, #0
10011758:	220b      	movs	r2, #11
1001175a:	4d1b      	ldr	r5, [pc, #108]	; (100117c8 <gattm_att_get_value_req_handler+0x84>)
1001175c:	1c0f      	adds	r7, r1, #0
1001175e:	8829      	ldrh	r1, [r5, #0]
10011760:	882d      	ldrh	r5, [r5, #0]
10011762:	7101      	strb	r1, [r0, #4]
10011764:	0a2d      	lsrs	r5, r5, #8
10011766:	7145      	strb	r5, [r0, #5]
10011768:	0a25      	lsrs	r5, r4, #8
1001176a:	7245      	strb	r5, [r0, #9]
1001176c:	4917      	ldr	r1, [pc, #92]	; (100117cc <gattm_att_get_value_req_handler+0x88>)
1001176e:	4d18      	ldr	r5, [pc, #96]	; (100117d0 <gattm_att_get_value_req_handler+0x8c>)
10011770:	7033      	strb	r3, [r6, #0]
10011772:	7042      	strb	r2, [r0, #1]
10011774:	7082      	strb	r2, [r0, #2]
10011776:	70c3      	strb	r3, [r0, #3]
10011778:	8029      	strh	r1, [r5, #0]
1001177a:	80aa      	strh	r2, [r5, #4]
1001177c:	71c3      	strb	r3, [r0, #7]
1001177e:	3a09      	subs	r2, #9
10011780:	210a      	movs	r1, #10
10011782:	4b14      	ldr	r3, [pc, #80]	; (100117d4 <gattm_att_get_value_req_handler+0x90>)
10011784:	7182      	strb	r2, [r0, #6]
10011786:	7204      	strb	r4, [r0, #8]
10011788:	4798      	blx	r3
1001178a:	1c30      	adds	r0, r6, #0
1001178c:	4b12      	ldr	r3, [pc, #72]	; (100117d8 <gattm_att_get_value_req_handler+0x94>)
1001178e:	4798      	blx	r3
10011790:	7833      	ldrb	r3, [r6, #0]
10011792:	20e2      	movs	r0, #226	; 0xe2
10011794:	2b00      	cmp	r3, #0
10011796:	d112      	bne.n	100117be <gattm_att_get_value_req_handler+0x7a>
10011798:	68a9      	ldr	r1, [r5, #8]
1001179a:	9801      	ldr	r0, [sp, #4]
1001179c:	784d      	ldrb	r5, [r1, #1]
1001179e:	780b      	ldrb	r3, [r1, #0]
100117a0:	78ca      	ldrb	r2, [r1, #3]
100117a2:	022d      	lsls	r5, r5, #8
100117a4:	431d      	orrs	r5, r3
100117a6:	788b      	ldrb	r3, [r1, #2]
100117a8:	0212      	lsls	r2, r2, #8
100117aa:	431a      	orrs	r2, r3
100117ac:	803a      	strh	r2, [r7, #0]
100117ae:	790e      	ldrb	r6, [r1, #4]
100117b0:	4b0a      	ldr	r3, [pc, #40]	; (100117dc <gattm_att_get_value_req_handler+0x98>)
100117b2:	3105      	adds	r1, #5
100117b4:	4798      	blx	r3
100117b6:	20e2      	movs	r0, #226	; 0xe2
100117b8:	42ac      	cmp	r4, r5
100117ba:	d100      	bne.n	100117be <gattm_att_get_value_req_handler+0x7a>
100117bc:	1c30      	adds	r0, r6, #0
100117be:	b005      	add	sp, #20
100117c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100117c2:	46c0      	nop			; (mov r8, r8)
100117c4:	1001b290 	.word	0x1001b290
100117c8:	1001af20 	.word	0x1001af20
100117cc:	00000b0b 	.word	0x00000b0b
100117d0:	1001af14 	.word	0x1001af14
100117d4:	1000fe91 	.word	0x1000fe91
100117d8:	1000fef5 	.word	0x1000fef5
100117dc:	1001576f 	.word	0x1001576f

100117e0 <htpt_enable_rsp_handler>:
100117e0:	780b      	ldrb	r3, [r1, #0]
100117e2:	7013      	strb	r3, [r2, #0]
100117e4:	784b      	ldrb	r3, [r1, #1]
100117e6:	7053      	strb	r3, [r2, #1]
100117e8:	4770      	bx	lr

100117ea <htpt_temp_send_rsp_handler>:
100117ea:	780b      	ldrb	r3, [r1, #0]
100117ec:	7013      	strb	r3, [r2, #0]
100117ee:	4770      	bx	lr

100117f0 <htpt_meas_intv_upd_rsp_handler>:
100117f0:	780b      	ldrb	r3, [r1, #0]
100117f2:	7013      	strb	r3, [r2, #0]
100117f4:	4770      	bx	lr

100117f6 <htpt_meas_intv_chg_req_ind_handler>:
100117f6:	78cb      	ldrb	r3, [r1, #3]
100117f8:	7889      	ldrb	r1, [r1, #2]
100117fa:	021b      	lsls	r3, r3, #8
100117fc:	430b      	orrs	r3, r1
100117fe:	8013      	strh	r3, [r2, #0]
10011800:	4770      	bx	lr

10011802 <htpt_cfg_indntf_ind_handler>:
10011802:	780b      	ldrb	r3, [r1, #0]
10011804:	7013      	strb	r3, [r2, #0]
10011806:	784b      	ldrb	r3, [r1, #1]
10011808:	7053      	strb	r3, [r2, #1]
1001180a:	4770      	bx	lr

1001180c <pow>:
1001180c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001180e:	465f      	mov	r7, fp
10011810:	464d      	mov	r5, r9
10011812:	4656      	mov	r6, sl
10011814:	4644      	mov	r4, r8
10011816:	b4f0      	push	{r4, r5, r6, r7}
10011818:	b091      	sub	sp, #68	; 0x44
1001181a:	001f      	movs	r7, r3
1001181c:	0004      	movs	r4, r0
1001181e:	000d      	movs	r5, r1
10011820:	0016      	movs	r6, r2
10011822:	f000 f9af 	bl	10011b84 <__ieee754_pow>
10011826:	4bcf      	ldr	r3, [pc, #828]	; (10011b64 <pow+0x358>)
10011828:	9002      	str	r0, [sp, #8]
1001182a:	9103      	str	r1, [sp, #12]
1001182c:	469b      	mov	fp, r3
1001182e:	781b      	ldrb	r3, [r3, #0]
10011830:	b25b      	sxtb	r3, r3
10011832:	4699      	mov	r9, r3
10011834:	3301      	adds	r3, #1
10011836:	d04f      	beq.n	100118d8 <pow+0xcc>
10011838:	0032      	movs	r2, r6
1001183a:	003b      	movs	r3, r7
1001183c:	0030      	movs	r0, r6
1001183e:	0039      	movs	r1, r7
10011840:	f003 fd82 	bl	10015348 <__aeabi_dcmpun>
10011844:	9000      	str	r0, [sp, #0]
10011846:	2800      	cmp	r0, #0
10011848:	d146      	bne.n	100118d8 <pow+0xcc>
1001184a:	0022      	movs	r2, r4
1001184c:	002b      	movs	r3, r5
1001184e:	0020      	movs	r0, r4
10011850:	0029      	movs	r1, r5
10011852:	f003 fd79 	bl	10015348 <__aeabi_dcmpun>
10011856:	2200      	movs	r2, #0
10011858:	4682      	mov	sl, r0
1001185a:	2800      	cmp	r0, #0
1001185c:	d134      	bne.n	100118c8 <pow+0xbc>
1001185e:	2300      	movs	r3, #0
10011860:	0020      	movs	r0, r4
10011862:	0029      	movs	r1, r5
10011864:	f001 fa7c 	bl	10012d60 <__aeabi_dcmpeq>
10011868:	2800      	cmp	r0, #0
1001186a:	d03a      	beq.n	100118e2 <pow+0xd6>
1001186c:	2200      	movs	r2, #0
1001186e:	2300      	movs	r3, #0
10011870:	0030      	movs	r0, r6
10011872:	0039      	movs	r1, r7
10011874:	f001 fa74 	bl	10012d60 <__aeabi_dcmpeq>
10011878:	9005      	str	r0, [sp, #20]
1001187a:	2800      	cmp	r0, #0
1001187c:	d100      	bne.n	10011880 <pow+0x74>
1001187e:	e074      	b.n	1001196a <pow+0x15e>
10011880:	ab06      	add	r3, sp, #24
10011882:	4698      	mov	r8, r3
10011884:	2301      	movs	r3, #1
10011886:	4642      	mov	r2, r8
10011888:	9306      	str	r3, [sp, #24]
1001188a:	4bb7      	ldr	r3, [pc, #732]	; (10011b68 <pow+0x35c>)
1001188c:	6053      	str	r3, [r2, #4]
1001188e:	4643      	mov	r3, r8
10011890:	4652      	mov	r2, sl
10011892:	609c      	str	r4, [r3, #8]
10011894:	60dd      	str	r5, [r3, #12]
10011896:	621a      	str	r2, [r3, #32]
10011898:	611e      	str	r6, [r3, #16]
1001189a:	615f      	str	r7, [r3, #20]
1001189c:	4642      	mov	r2, r8
1001189e:	2300      	movs	r3, #0
100118a0:	2400      	movs	r4, #0
100118a2:	6193      	str	r3, [r2, #24]
100118a4:	61d4      	str	r4, [r2, #28]
100118a6:	464b      	mov	r3, r9
100118a8:	2b00      	cmp	r3, #0
100118aa:	d100      	bne.n	100118ae <pow+0xa2>
100118ac:	e094      	b.n	100119d8 <pow+0x1cc>
100118ae:	2300      	movs	r3, #0
100118b0:	4cae      	ldr	r4, [pc, #696]	; (10011b6c <pow+0x360>)
100118b2:	9300      	str	r3, [sp, #0]
100118b4:	9401      	str	r4, [sp, #4]
100118b6:	9800      	ldr	r0, [sp, #0]
100118b8:	9901      	ldr	r1, [sp, #4]
100118ba:	b011      	add	sp, #68	; 0x44
100118bc:	bc3c      	pop	{r2, r3, r4, r5}
100118be:	4690      	mov	r8, r2
100118c0:	4699      	mov	r9, r3
100118c2:	46a2      	mov	sl, r4
100118c4:	46ab      	mov	fp, r5
100118c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
100118c8:	2300      	movs	r3, #0
100118ca:	0030      	movs	r0, r6
100118cc:	0039      	movs	r1, r7
100118ce:	f001 fa47 	bl	10012d60 <__aeabi_dcmpeq>
100118d2:	2800      	cmp	r0, #0
100118d4:	d000      	beq.n	100118d8 <pow+0xcc>
100118d6:	e0eb      	b.n	10011ab0 <pow+0x2a4>
100118d8:	9b02      	ldr	r3, [sp, #8]
100118da:	9c03      	ldr	r4, [sp, #12]
100118dc:	9300      	str	r3, [sp, #0]
100118de:	9401      	str	r4, [sp, #4]
100118e0:	e7e9      	b.n	100118b6 <pow+0xaa>
100118e2:	9802      	ldr	r0, [sp, #8]
100118e4:	9903      	ldr	r1, [sp, #12]
100118e6:	f000 ff7d 	bl	100127e4 <finite>
100118ea:	4681      	mov	r9, r0
100118ec:	2800      	cmp	r0, #0
100118ee:	d100      	bne.n	100118f2 <pow+0xe6>
100118f0:	e086      	b.n	10011a00 <pow+0x1f4>
100118f2:	9802      	ldr	r0, [sp, #8]
100118f4:	9903      	ldr	r1, [sp, #12]
100118f6:	2200      	movs	r2, #0
100118f8:	2300      	movs	r3, #0
100118fa:	f001 fa31 	bl	10012d60 <__aeabi_dcmpeq>
100118fe:	2800      	cmp	r0, #0
10011900:	d0ea      	beq.n	100118d8 <pow+0xcc>
10011902:	0020      	movs	r0, r4
10011904:	0029      	movs	r1, r5
10011906:	f000 ff6d 	bl	100127e4 <finite>
1001190a:	9a02      	ldr	r2, [sp, #8]
1001190c:	9b03      	ldr	r3, [sp, #12]
1001190e:	9200      	str	r2, [sp, #0]
10011910:	9301      	str	r3, [sp, #4]
10011912:	2800      	cmp	r0, #0
10011914:	d0cf      	beq.n	100118b6 <pow+0xaa>
10011916:	0030      	movs	r0, r6
10011918:	0039      	movs	r1, r7
1001191a:	f000 ff63 	bl	100127e4 <finite>
1001191e:	9a02      	ldr	r2, [sp, #8]
10011920:	9b03      	ldr	r3, [sp, #12]
10011922:	9200      	str	r2, [sp, #0]
10011924:	9301      	str	r3, [sp, #4]
10011926:	2800      	cmp	r0, #0
10011928:	d0c5      	beq.n	100118b6 <pow+0xaa>
1001192a:	ab06      	add	r3, sp, #24
1001192c:	4698      	mov	r8, r3
1001192e:	2304      	movs	r3, #4
10011930:	4642      	mov	r2, r8
10011932:	9306      	str	r3, [sp, #24]
10011934:	4b8c      	ldr	r3, [pc, #560]	; (10011b68 <pow+0x35c>)
10011936:	6094      	str	r4, [r2, #8]
10011938:	60d5      	str	r5, [r2, #12]
1001193a:	6053      	str	r3, [r2, #4]
1001193c:	2300      	movs	r3, #0
1001193e:	2400      	movs	r4, #0
10011940:	6213      	str	r3, [r2, #32]
10011942:	2300      	movs	r3, #0
10011944:	6193      	str	r3, [r2, #24]
10011946:	61d4      	str	r4, [r2, #28]
10011948:	465b      	mov	r3, fp
1001194a:	781b      	ldrb	r3, [r3, #0]
1001194c:	6116      	str	r6, [r2, #16]
1001194e:	6157      	str	r7, [r2, #20]
10011950:	b25b      	sxtb	r3, r3
10011952:	2b02      	cmp	r3, #2
10011954:	d004      	beq.n	10011960 <pow+0x154>
10011956:	4640      	mov	r0, r8
10011958:	f000 ff4e 	bl	100127f8 <matherr>
1001195c:	2800      	cmp	r0, #0
1001195e:	d140      	bne.n	100119e2 <pow+0x1d6>
10011960:	f003 fec0 	bl	100156e4 <__errno>
10011964:	2322      	movs	r3, #34	; 0x22
10011966:	6003      	str	r3, [r0, #0]
10011968:	e03b      	b.n	100119e2 <pow+0x1d6>
1001196a:	0030      	movs	r0, r6
1001196c:	0039      	movs	r1, r7
1001196e:	f000 ff39 	bl	100127e4 <finite>
10011972:	9a02      	ldr	r2, [sp, #8]
10011974:	9b03      	ldr	r3, [sp, #12]
10011976:	9200      	str	r2, [sp, #0]
10011978:	9301      	str	r3, [sp, #4]
1001197a:	2800      	cmp	r0, #0
1001197c:	d09b      	beq.n	100118b6 <pow+0xaa>
1001197e:	2200      	movs	r2, #0
10011980:	2300      	movs	r3, #0
10011982:	0030      	movs	r0, r6
10011984:	0039      	movs	r1, r7
10011986:	f001 f9f1 	bl	10012d6c <__aeabi_dcmplt>
1001198a:	2800      	cmp	r0, #0
1001198c:	d100      	bne.n	10011990 <pow+0x184>
1001198e:	e792      	b.n	100118b6 <pow+0xaa>
10011990:	ab06      	add	r3, sp, #24
10011992:	4698      	mov	r8, r3
10011994:	2301      	movs	r3, #1
10011996:	4642      	mov	r2, r8
10011998:	9306      	str	r3, [sp, #24]
1001199a:	4b73      	ldr	r3, [pc, #460]	; (10011b68 <pow+0x35c>)
1001199c:	6053      	str	r3, [r2, #4]
1001199e:	4643      	mov	r3, r8
100119a0:	9a05      	ldr	r2, [sp, #20]
100119a2:	609c      	str	r4, [r3, #8]
100119a4:	60dd      	str	r5, [r3, #12]
100119a6:	621a      	str	r2, [r3, #32]
100119a8:	611e      	str	r6, [r3, #16]
100119aa:	615f      	str	r7, [r3, #20]
100119ac:	465b      	mov	r3, fp
100119ae:	781b      	ldrb	r3, [r3, #0]
100119b0:	b25b      	sxtb	r3, r3
100119b2:	2b00      	cmp	r3, #0
100119b4:	d00b      	beq.n	100119ce <pow+0x1c2>
100119b6:	2000      	movs	r0, #0
100119b8:	4642      	mov	r2, r8
100119ba:	496d      	ldr	r1, [pc, #436]	; (10011b70 <pow+0x364>)
100119bc:	6190      	str	r0, [r2, #24]
100119be:	61d1      	str	r1, [r2, #28]
100119c0:	2b02      	cmp	r3, #2
100119c2:	d109      	bne.n	100119d8 <pow+0x1cc>
100119c4:	f003 fe8e 	bl	100156e4 <__errno>
100119c8:	2321      	movs	r3, #33	; 0x21
100119ca:	6003      	str	r3, [r0, #0]
100119cc:	e009      	b.n	100119e2 <pow+0x1d6>
100119ce:	4642      	mov	r2, r8
100119d0:	2300      	movs	r3, #0
100119d2:	2400      	movs	r4, #0
100119d4:	6193      	str	r3, [r2, #24]
100119d6:	61d4      	str	r4, [r2, #28]
100119d8:	4640      	mov	r0, r8
100119da:	f000 ff0d 	bl	100127f8 <matherr>
100119de:	2800      	cmp	r0, #0
100119e0:	d0f0      	beq.n	100119c4 <pow+0x1b8>
100119e2:	4643      	mov	r3, r8
100119e4:	6a1b      	ldr	r3, [r3, #32]
100119e6:	2b00      	cmp	r3, #0
100119e8:	d004      	beq.n	100119f4 <pow+0x1e8>
100119ea:	f003 fe7b 	bl	100156e4 <__errno>
100119ee:	4643      	mov	r3, r8
100119f0:	6a1b      	ldr	r3, [r3, #32]
100119f2:	6003      	str	r3, [r0, #0]
100119f4:	4643      	mov	r3, r8
100119f6:	69dc      	ldr	r4, [r3, #28]
100119f8:	699b      	ldr	r3, [r3, #24]
100119fa:	9300      	str	r3, [sp, #0]
100119fc:	9401      	str	r4, [sp, #4]
100119fe:	e75a      	b.n	100118b6 <pow+0xaa>
10011a00:	0020      	movs	r0, r4
10011a02:	0029      	movs	r1, r5
10011a04:	f000 feee 	bl	100127e4 <finite>
10011a08:	2800      	cmp	r0, #0
10011a0a:	d100      	bne.n	10011a0e <pow+0x202>
10011a0c:	e771      	b.n	100118f2 <pow+0xe6>
10011a0e:	0030      	movs	r0, r6
10011a10:	0039      	movs	r1, r7
10011a12:	f000 fee7 	bl	100127e4 <finite>
10011a16:	2800      	cmp	r0, #0
10011a18:	d100      	bne.n	10011a1c <pow+0x210>
10011a1a:	e76a      	b.n	100118f2 <pow+0xe6>
10011a1c:	9802      	ldr	r0, [sp, #8]
10011a1e:	9903      	ldr	r1, [sp, #12]
10011a20:	000b      	movs	r3, r1
10011a22:	0002      	movs	r2, r0
10011a24:	f003 fc90 	bl	10015348 <__aeabi_dcmpun>
10011a28:	ab06      	add	r3, sp, #24
10011a2a:	4698      	mov	r8, r3
10011a2c:	2800      	cmp	r0, #0
10011a2e:	d17a      	bne.n	10011b26 <pow+0x31a>
10011a30:	2303      	movs	r3, #3
10011a32:	4642      	mov	r2, r8
10011a34:	9306      	str	r3, [sp, #24]
10011a36:	4b4c      	ldr	r3, [pc, #304]	; (10011b68 <pow+0x35c>)
10011a38:	6210      	str	r0, [r2, #32]
10011a3a:	6053      	str	r3, [r2, #4]
10011a3c:	465b      	mov	r3, fp
10011a3e:	781b      	ldrb	r3, [r3, #0]
10011a40:	6094      	str	r4, [r2, #8]
10011a42:	60d5      	str	r5, [r2, #12]
10011a44:	b25b      	sxtb	r3, r3
10011a46:	6116      	str	r6, [r2, #16]
10011a48:	6157      	str	r7, [r2, #20]
10011a4a:	4699      	mov	r9, r3
10011a4c:	2b00      	cmp	r3, #0
10011a4e:	d148      	bne.n	10011ae2 <pow+0x2d6>
10011a50:	22e0      	movs	r2, #224	; 0xe0
10011a52:	4641      	mov	r1, r8
10011a54:	4b47      	ldr	r3, [pc, #284]	; (10011b74 <pow+0x368>)
10011a56:	0612      	lsls	r2, r2, #24
10011a58:	618a      	str	r2, [r1, #24]
10011a5a:	61cb      	str	r3, [r1, #28]
10011a5c:	0020      	movs	r0, r4
10011a5e:	2200      	movs	r2, #0
10011a60:	2300      	movs	r3, #0
10011a62:	0029      	movs	r1, r5
10011a64:	f001 f982 	bl	10012d6c <__aeabi_dcmplt>
10011a68:	2800      	cmp	r0, #0
10011a6a:	d100      	bne.n	10011a6e <pow+0x262>
10011a6c:	e773      	b.n	10011956 <pow+0x14a>
10011a6e:	2200      	movs	r2, #0
10011a70:	4b41      	ldr	r3, [pc, #260]	; (10011b78 <pow+0x36c>)
10011a72:	0030      	movs	r0, r6
10011a74:	0039      	movs	r1, r7
10011a76:	f002 fe99 	bl	100147ac <__aeabi_dmul>
10011a7a:	0004      	movs	r4, r0
10011a7c:	000d      	movs	r5, r1
10011a7e:	f000 fec3 	bl	10012808 <rint>
10011a82:	0002      	movs	r2, r0
10011a84:	000b      	movs	r3, r1
10011a86:	0020      	movs	r0, r4
10011a88:	0029      	movs	r1, r5
10011a8a:	f001 f969 	bl	10012d60 <__aeabi_dcmpeq>
10011a8e:	2800      	cmp	r0, #0
10011a90:	d105      	bne.n	10011a9e <pow+0x292>
10011a92:	22e0      	movs	r2, #224	; 0xe0
10011a94:	4b39      	ldr	r3, [pc, #228]	; (10011b7c <pow+0x370>)
10011a96:	0612      	lsls	r2, r2, #24
10011a98:	4641      	mov	r1, r8
10011a9a:	618a      	str	r2, [r1, #24]
10011a9c:	61cb      	str	r3, [r1, #28]
10011a9e:	465b      	mov	r3, fp
10011aa0:	781b      	ldrb	r3, [r3, #0]
10011aa2:	b25b      	sxtb	r3, r3
10011aa4:	4699      	mov	r9, r3
10011aa6:	464b      	mov	r3, r9
10011aa8:	2b02      	cmp	r3, #2
10011aaa:	d000      	beq.n	10011aae <pow+0x2a2>
10011aac:	e753      	b.n	10011956 <pow+0x14a>
10011aae:	e757      	b.n	10011960 <pow+0x154>
10011ab0:	ab06      	add	r3, sp, #24
10011ab2:	4698      	mov	r8, r3
10011ab4:	2301      	movs	r3, #1
10011ab6:	4642      	mov	r2, r8
10011ab8:	9306      	str	r3, [sp, #24]
10011aba:	4b2b      	ldr	r3, [pc, #172]	; (10011b68 <pow+0x35c>)
10011abc:	6053      	str	r3, [r2, #4]
10011abe:	4643      	mov	r3, r8
10011ac0:	609c      	str	r4, [r3, #8]
10011ac2:	60dd      	str	r5, [r3, #12]
10011ac4:	2400      	movs	r4, #0
10011ac6:	9a00      	ldr	r2, [sp, #0]
10011ac8:	4d28      	ldr	r5, [pc, #160]	; (10011b6c <pow+0x360>)
10011aca:	621a      	str	r2, [r3, #32]
10011acc:	611e      	str	r6, [r3, #16]
10011ace:	615f      	str	r7, [r3, #20]
10011ad0:	619c      	str	r4, [r3, #24]
10011ad2:	61dd      	str	r5, [r3, #28]
10011ad4:	464b      	mov	r3, r9
10011ad6:	9400      	str	r4, [sp, #0]
10011ad8:	9501      	str	r5, [sp, #4]
10011ada:	2b02      	cmp	r3, #2
10011adc:	d000      	beq.n	10011ae0 <pow+0x2d4>
10011ade:	e77b      	b.n	100119d8 <pow+0x1cc>
10011ae0:	e6e9      	b.n	100118b6 <pow+0xaa>
10011ae2:	2200      	movs	r2, #0
10011ae4:	4641      	mov	r1, r8
10011ae6:	4b26      	ldr	r3, [pc, #152]	; (10011b80 <pow+0x374>)
10011ae8:	0020      	movs	r0, r4
10011aea:	618a      	str	r2, [r1, #24]
10011aec:	61cb      	str	r3, [r1, #28]
10011aee:	2200      	movs	r2, #0
10011af0:	2300      	movs	r3, #0
10011af2:	0029      	movs	r1, r5
10011af4:	f001 f93a 	bl	10012d6c <__aeabi_dcmplt>
10011af8:	2800      	cmp	r0, #0
10011afa:	d0d4      	beq.n	10011aa6 <pow+0x29a>
10011afc:	2200      	movs	r2, #0
10011afe:	4b1e      	ldr	r3, [pc, #120]	; (10011b78 <pow+0x36c>)
10011b00:	0030      	movs	r0, r6
10011b02:	0039      	movs	r1, r7
10011b04:	f002 fe52 	bl	100147ac <__aeabi_dmul>
10011b08:	0004      	movs	r4, r0
10011b0a:	000d      	movs	r5, r1
10011b0c:	f000 fe7c 	bl	10012808 <rint>
10011b10:	0002      	movs	r2, r0
10011b12:	000b      	movs	r3, r1
10011b14:	0020      	movs	r0, r4
10011b16:	0029      	movs	r1, r5
10011b18:	f001 f922 	bl	10012d60 <__aeabi_dcmpeq>
10011b1c:	2800      	cmp	r0, #0
10011b1e:	d1be      	bne.n	10011a9e <pow+0x292>
10011b20:	2200      	movs	r2, #0
10011b22:	4b13      	ldr	r3, [pc, #76]	; (10011b70 <pow+0x364>)
10011b24:	e7b8      	b.n	10011a98 <pow+0x28c>
10011b26:	2301      	movs	r3, #1
10011b28:	4642      	mov	r2, r8
10011b2a:	9306      	str	r3, [sp, #24]
10011b2c:	4b0e      	ldr	r3, [pc, #56]	; (10011b68 <pow+0x35c>)
10011b2e:	6053      	str	r3, [r2, #4]
10011b30:	4643      	mov	r3, r8
10011b32:	464a      	mov	r2, r9
10011b34:	609c      	str	r4, [r3, #8]
10011b36:	60dd      	str	r5, [r3, #12]
10011b38:	621a      	str	r2, [r3, #32]
10011b3a:	611e      	str	r6, [r3, #16]
10011b3c:	615f      	str	r7, [r3, #20]
10011b3e:	2400      	movs	r4, #0
10011b40:	465b      	mov	r3, fp
10011b42:	571c      	ldrsb	r4, [r3, r4]
10011b44:	2c00      	cmp	r4, #0
10011b46:	d100      	bne.n	10011b4a <pow+0x33e>
10011b48:	e741      	b.n	100119ce <pow+0x1c2>
10011b4a:	2300      	movs	r3, #0
10011b4c:	2200      	movs	r2, #0
10011b4e:	0019      	movs	r1, r3
10011b50:	0010      	movs	r0, r2
10011b52:	f002 fa07 	bl	10013f64 <__aeabi_ddiv>
10011b56:	4643      	mov	r3, r8
10011b58:	6198      	str	r0, [r3, #24]
10011b5a:	61d9      	str	r1, [r3, #28]
10011b5c:	2c02      	cmp	r4, #2
10011b5e:	d100      	bne.n	10011b62 <pow+0x356>
10011b60:	e730      	b.n	100119c4 <pow+0x1b8>
10011b62:	e739      	b.n	100119d8 <pow+0x1cc>
10011b64:	1001853c 	.word	0x1001853c
10011b68:	10018320 	.word	0x10018320
10011b6c:	3ff00000 	.word	0x3ff00000
10011b70:	fff00000 	.word	0xfff00000
10011b74:	47efffff 	.word	0x47efffff
10011b78:	3fe00000 	.word	0x3fe00000
10011b7c:	c7efffff 	.word	0xc7efffff
10011b80:	7ff00000 	.word	0x7ff00000

10011b84 <__ieee754_pow>:
10011b84:	b5f0      	push	{r4, r5, r6, r7, lr}
10011b86:	4656      	mov	r6, sl
10011b88:	464d      	mov	r5, r9
10011b8a:	4644      	mov	r4, r8
10011b8c:	465f      	mov	r7, fp
10011b8e:	b4f0      	push	{r4, r5, r6, r7}
10011b90:	001c      	movs	r4, r3
10011b92:	0013      	movs	r3, r2
10011b94:	0067      	lsls	r7, r4, #1
10011b96:	b091      	sub	sp, #68	; 0x44
10011b98:	087f      	lsrs	r7, r7, #1
10011b9a:	9300      	str	r3, [sp, #0]
10011b9c:	9401      	str	r4, [sp, #4]
10011b9e:	0006      	movs	r6, r0
10011ba0:	000d      	movs	r5, r1
10011ba2:	4680      	mov	r8, r0
10011ba4:	4689      	mov	r9, r1
10011ba6:	46a2      	mov	sl, r4
10011ba8:	433b      	orrs	r3, r7
10011baa:	d032      	beq.n	10011c12 <__ieee754_pow+0x8e>
10011bac:	4b6e      	ldr	r3, [pc, #440]	; (10011d68 <__ieee754_pow+0x1e4>)
10011bae:	006c      	lsls	r4, r5, #1
10011bb0:	0864      	lsrs	r4, r4, #1
10011bb2:	429c      	cmp	r4, r3
10011bb4:	dc29      	bgt.n	10011c0a <__ieee754_pow+0x86>
10011bb6:	d026      	beq.n	10011c06 <__ieee754_pow+0x82>
10011bb8:	429f      	cmp	r7, r3
10011bba:	dc26      	bgt.n	10011c0a <__ieee754_pow+0x86>
10011bbc:	4b6a      	ldr	r3, [pc, #424]	; (10011d68 <__ieee754_pow+0x1e4>)
10011bbe:	429f      	cmp	r7, r3
10011bc0:	d100      	bne.n	10011bc4 <__ieee754_pow+0x40>
10011bc2:	e089      	b.n	10011cd8 <__ieee754_pow+0x154>
10011bc4:	2300      	movs	r3, #0
10011bc6:	469b      	mov	fp, r3
10011bc8:	464b      	mov	r3, r9
10011bca:	2b00      	cmp	r3, #0
10011bcc:	da00      	bge.n	10011bd0 <__ieee754_pow+0x4c>
10011bce:	e087      	b.n	10011ce0 <__ieee754_pow+0x15c>
10011bd0:	2a00      	cmp	r2, #0
10011bd2:	d12f      	bne.n	10011c34 <__ieee754_pow+0xb0>
10011bd4:	4b64      	ldr	r3, [pc, #400]	; (10011d68 <__ieee754_pow+0x1e4>)
10011bd6:	429f      	cmp	r7, r3
10011bd8:	d100      	bne.n	10011bdc <__ieee754_pow+0x58>
10011bda:	e09f      	b.n	10011d1c <__ieee754_pow+0x198>
10011bdc:	4b63      	ldr	r3, [pc, #396]	; (10011d6c <__ieee754_pow+0x1e8>)
10011bde:	429f      	cmp	r7, r3
10011be0:	d05d      	beq.n	10011c9e <__ieee754_pow+0x11a>
10011be2:	2380      	movs	r3, #128	; 0x80
10011be4:	05db      	lsls	r3, r3, #23
10011be6:	459a      	cmp	sl, r3
10011be8:	d101      	bne.n	10011bee <__ieee754_pow+0x6a>
10011bea:	f000 fbc1 	bl	10012370 <__ieee754_pow+0x7ec>
10011bee:	4b60      	ldr	r3, [pc, #384]	; (10011d70 <__ieee754_pow+0x1ec>)
10011bf0:	459a      	cmp	sl, r3
10011bf2:	d11f      	bne.n	10011c34 <__ieee754_pow+0xb0>
10011bf4:	464b      	mov	r3, r9
10011bf6:	2b00      	cmp	r3, #0
10011bf8:	db1c      	blt.n	10011c34 <__ieee754_pow+0xb0>
10011bfa:	0030      	movs	r0, r6
10011bfc:	0029      	movs	r1, r5
10011bfe:	f000 fcf7 	bl	100125f0 <__ieee754_sqrt>
10011c02:	0006      	movs	r6, r0
10011c04:	e007      	b.n	10011c16 <__ieee754_pow+0x92>
10011c06:	2800      	cmp	r0, #0
10011c08:	d00d      	beq.n	10011c26 <__ieee754_pow+0xa2>
10011c0a:	4b5a      	ldr	r3, [pc, #360]	; (10011d74 <__ieee754_pow+0x1f0>)
10011c0c:	18e0      	adds	r0, r4, r3
10011c0e:	4330      	orrs	r0, r6
10011c10:	d10b      	bne.n	10011c2a <__ieee754_pow+0xa6>
10011c12:	2600      	movs	r6, #0
10011c14:	4955      	ldr	r1, [pc, #340]	; (10011d6c <__ieee754_pow+0x1e8>)
10011c16:	0030      	movs	r0, r6
10011c18:	b011      	add	sp, #68	; 0x44
10011c1a:	bc3c      	pop	{r2, r3, r4, r5}
10011c1c:	4690      	mov	r8, r2
10011c1e:	4699      	mov	r9, r3
10011c20:	46a2      	mov	sl, r4
10011c22:	46ab      	mov	fp, r5
10011c24:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011c26:	42a7      	cmp	r7, r4
10011c28:	ddc8      	ble.n	10011bbc <__ieee754_pow+0x38>
10011c2a:	4853      	ldr	r0, [pc, #332]	; (10011d78 <__ieee754_pow+0x1f4>)
10011c2c:	f000 fde6 	bl	100127fc <nan>
10011c30:	0006      	movs	r6, r0
10011c32:	e7f0      	b.n	10011c16 <__ieee754_pow+0x92>
10011c34:	0030      	movs	r0, r6
10011c36:	0029      	movs	r1, r5
10011c38:	f000 fdd0 	bl	100127dc <fabs>
10011c3c:	4643      	mov	r3, r8
10011c3e:	2b00      	cmp	r3, #0
10011c40:	d01d      	beq.n	10011c7e <__ieee754_pow+0xfa>
10011c42:	0feb      	lsrs	r3, r5, #31
10011c44:	3b01      	subs	r3, #1
10011c46:	4698      	mov	r8, r3
10011c48:	465b      	mov	r3, fp
10011c4a:	4642      	mov	r2, r8
10011c4c:	4313      	orrs	r3, r2
10011c4e:	d079      	beq.n	10011d44 <__ieee754_pow+0x1c0>
10011c50:	4b4a      	ldr	r3, [pc, #296]	; (10011d7c <__ieee754_pow+0x1f8>)
10011c52:	429f      	cmp	r7, r3
10011c54:	dc00      	bgt.n	10011c58 <__ieee754_pow+0xd4>
10011c56:	e09f      	b.n	10011d98 <__ieee754_pow+0x214>
10011c58:	4b49      	ldr	r3, [pc, #292]	; (10011d80 <__ieee754_pow+0x1fc>)
10011c5a:	429f      	cmp	r7, r3
10011c5c:	dc01      	bgt.n	10011c62 <__ieee754_pow+0xde>
10011c5e:	f000 fbce 	bl	100123fe <__ieee754_pow+0x87a>
10011c62:	4b48      	ldr	r3, [pc, #288]	; (10011d84 <__ieee754_pow+0x200>)
10011c64:	429c      	cmp	r4, r3
10011c66:	dd79      	ble.n	10011d5c <__ieee754_pow+0x1d8>
10011c68:	4653      	mov	r3, sl
10011c6a:	2b00      	cmp	r3, #0
10011c6c:	dd79      	ble.n	10011d62 <__ieee754_pow+0x1de>
10011c6e:	4a46      	ldr	r2, [pc, #280]	; (10011d88 <__ieee754_pow+0x204>)
10011c70:	4b46      	ldr	r3, [pc, #280]	; (10011d8c <__ieee754_pow+0x208>)
10011c72:	0010      	movs	r0, r2
10011c74:	0019      	movs	r1, r3
10011c76:	f002 fd99 	bl	100147ac <__aeabi_dmul>
10011c7a:	0006      	movs	r6, r0
10011c7c:	e7cb      	b.n	10011c16 <__ieee754_pow+0x92>
10011c7e:	2c00      	cmp	r4, #0
10011c80:	d004      	beq.n	10011c8c <__ieee754_pow+0x108>
10011c82:	4a3a      	ldr	r2, [pc, #232]	; (10011d6c <__ieee754_pow+0x1e8>)
10011c84:	00ab      	lsls	r3, r5, #2
10011c86:	089b      	lsrs	r3, r3, #2
10011c88:	4293      	cmp	r3, r2
10011c8a:	d1da      	bne.n	10011c42 <__ieee754_pow+0xbe>
10011c8c:	4653      	mov	r3, sl
10011c8e:	2b00      	cmp	r3, #0
10011c90:	da00      	bge.n	10011c94 <__ieee754_pow+0x110>
10011c92:	e3ad      	b.n	100123f0 <__ieee754_pow+0x86c>
10011c94:	464b      	mov	r3, r9
10011c96:	2b00      	cmp	r3, #0
10011c98:	db0d      	blt.n	10011cb6 <__ieee754_pow+0x132>
10011c9a:	0006      	movs	r6, r0
10011c9c:	e7bb      	b.n	10011c16 <__ieee754_pow+0x92>
10011c9e:	4653      	mov	r3, sl
10011ca0:	0029      	movs	r1, r5
10011ca2:	2b00      	cmp	r3, #0
10011ca4:	dab7      	bge.n	10011c16 <__ieee754_pow+0x92>
10011ca6:	0032      	movs	r2, r6
10011ca8:	002b      	movs	r3, r5
10011caa:	2000      	movs	r0, #0
10011cac:	492f      	ldr	r1, [pc, #188]	; (10011d6c <__ieee754_pow+0x1e8>)
10011cae:	f002 f959 	bl	10013f64 <__aeabi_ddiv>
10011cb2:	0006      	movs	r6, r0
10011cb4:	e7af      	b.n	10011c16 <__ieee754_pow+0x92>
10011cb6:	4b2f      	ldr	r3, [pc, #188]	; (10011d74 <__ieee754_pow+0x1f0>)
10011cb8:	469c      	mov	ip, r3
10011cba:	465b      	mov	r3, fp
10011cbc:	4464      	add	r4, ip
10011cbe:	431c      	orrs	r4, r3
10011cc0:	d101      	bne.n	10011cc6 <__ieee754_pow+0x142>
10011cc2:	f000 fc2b 	bl	1001251c <__ieee754_pow+0x998>
10011cc6:	465b      	mov	r3, fp
10011cc8:	0006      	movs	r6, r0
10011cca:	2b01      	cmp	r3, #1
10011ccc:	d1a3      	bne.n	10011c16 <__ieee754_pow+0x92>
10011cce:	2380      	movs	r3, #128	; 0x80
10011cd0:	061b      	lsls	r3, r3, #24
10011cd2:	469c      	mov	ip, r3
10011cd4:	4461      	add	r1, ip
10011cd6:	e79e      	b.n	10011c16 <__ieee754_pow+0x92>
10011cd8:	2a00      	cmp	r2, #0
10011cda:	d100      	bne.n	10011cde <__ieee754_pow+0x15a>
10011cdc:	e772      	b.n	10011bc4 <__ieee754_pow+0x40>
10011cde:	e794      	b.n	10011c0a <__ieee754_pow+0x86>
10011ce0:	4b2b      	ldr	r3, [pc, #172]	; (10011d90 <__ieee754_pow+0x20c>)
10011ce2:	429f      	cmp	r7, r3
10011ce4:	dc2b      	bgt.n	10011d3e <__ieee754_pow+0x1ba>
10011ce6:	4b27      	ldr	r3, [pc, #156]	; (10011d84 <__ieee754_pow+0x200>)
10011ce8:	429f      	cmp	r7, r3
10011cea:	dc00      	bgt.n	10011cee <__ieee754_pow+0x16a>
10011cec:	e770      	b.n	10011bd0 <__ieee754_pow+0x4c>
10011cee:	4929      	ldr	r1, [pc, #164]	; (10011d94 <__ieee754_pow+0x210>)
10011cf0:	153b      	asrs	r3, r7, #20
10011cf2:	468c      	mov	ip, r1
10011cf4:	4463      	add	r3, ip
10011cf6:	2b14      	cmp	r3, #20
10011cf8:	dc01      	bgt.n	10011cfe <__ieee754_pow+0x17a>
10011cfa:	f000 fbf2 	bl	100124e2 <__ieee754_pow+0x95e>
10011cfe:	2134      	movs	r1, #52	; 0x34
10011d00:	1acb      	subs	r3, r1, r3
10011d02:	9900      	ldr	r1, [sp, #0]
10011d04:	40d9      	lsrs	r1, r3
10011d06:	0008      	movs	r0, r1
10011d08:	4098      	lsls	r0, r3
10011d0a:	4282      	cmp	r2, r0
10011d0c:	d000      	beq.n	10011d10 <__ieee754_pow+0x18c>
10011d0e:	e75f      	b.n	10011bd0 <__ieee754_pow+0x4c>
10011d10:	2301      	movs	r3, #1
10011d12:	4019      	ands	r1, r3
10011d14:	3301      	adds	r3, #1
10011d16:	1a5b      	subs	r3, r3, r1
10011d18:	469b      	mov	fp, r3
10011d1a:	e759      	b.n	10011bd0 <__ieee754_pow+0x4c>
10011d1c:	4b15      	ldr	r3, [pc, #84]	; (10011d74 <__ieee754_pow+0x1f0>)
10011d1e:	18e0      	adds	r0, r4, r3
10011d20:	4306      	orrs	r6, r0
10011d22:	d100      	bne.n	10011d26 <__ieee754_pow+0x1a2>
10011d24:	e775      	b.n	10011c12 <__ieee754_pow+0x8e>
10011d26:	4b17      	ldr	r3, [pc, #92]	; (10011d84 <__ieee754_pow+0x200>)
10011d28:	429c      	cmp	r4, r3
10011d2a:	dc00      	bgt.n	10011d2e <__ieee754_pow+0x1aa>
10011d2c:	e351      	b.n	100123d2 <__ieee754_pow+0x84e>
10011d2e:	4653      	mov	r3, sl
10011d30:	2b00      	cmp	r3, #0
10011d32:	db16      	blt.n	10011d62 <__ieee754_pow+0x1de>
10011d34:	9b00      	ldr	r3, [sp, #0]
10011d36:	9c01      	ldr	r4, [sp, #4]
10011d38:	001e      	movs	r6, r3
10011d3a:	0021      	movs	r1, r4
10011d3c:	e76b      	b.n	10011c16 <__ieee754_pow+0x92>
10011d3e:	2302      	movs	r3, #2
10011d40:	469b      	mov	fp, r3
10011d42:	e745      	b.n	10011bd0 <__ieee754_pow+0x4c>
10011d44:	0032      	movs	r2, r6
10011d46:	002b      	movs	r3, r5
10011d48:	0030      	movs	r0, r6
10011d4a:	0029      	movs	r1, r5
10011d4c:	f002 ffa8 	bl	10014ca0 <__aeabi_dsub>
10011d50:	0002      	movs	r2, r0
10011d52:	000b      	movs	r3, r1
10011d54:	f002 f906 	bl	10013f64 <__aeabi_ddiv>
10011d58:	0006      	movs	r6, r0
10011d5a:	e75c      	b.n	10011c16 <__ieee754_pow+0x92>
10011d5c:	4653      	mov	r3, sl
10011d5e:	2b00      	cmp	r3, #0
10011d60:	db85      	blt.n	10011c6e <__ieee754_pow+0xea>
10011d62:	2600      	movs	r6, #0
10011d64:	2100      	movs	r1, #0
10011d66:	e756      	b.n	10011c16 <__ieee754_pow+0x92>
10011d68:	7ff00000 	.word	0x7ff00000
10011d6c:	3ff00000 	.word	0x3ff00000
10011d70:	3fe00000 	.word	0x3fe00000
10011d74:	c0100000 	.word	0xc0100000
10011d78:	10017a90 	.word	0x10017a90
10011d7c:	41e00000 	.word	0x41e00000
10011d80:	43f00000 	.word	0x43f00000
10011d84:	3fefffff 	.word	0x3fefffff
10011d88:	8800759c 	.word	0x8800759c
10011d8c:	7e37e43c 	.word	0x7e37e43c
10011d90:	433fffff 	.word	0x433fffff
10011d94:	fffffc01 	.word	0xfffffc01
10011d98:	4be8      	ldr	r3, [pc, #928]	; (1001213c <__ieee754_pow+0x5b8>)
10011d9a:	2200      	movs	r2, #0
10011d9c:	429c      	cmp	r4, r3
10011d9e:	dc06      	bgt.n	10011dae <__ieee754_pow+0x22a>
10011da0:	2200      	movs	r2, #0
10011da2:	4be7      	ldr	r3, [pc, #924]	; (10012140 <__ieee754_pow+0x5bc>)
10011da4:	f002 fd02 	bl	100147ac <__aeabi_dmul>
10011da8:	2235      	movs	r2, #53	; 0x35
10011daa:	000c      	movs	r4, r1
10011dac:	4252      	negs	r2, r2
10011dae:	4de5      	ldr	r5, [pc, #916]	; (10012144 <__ieee754_pow+0x5c0>)
10011db0:	1523      	asrs	r3, r4, #20
10011db2:	46ac      	mov	ip, r5
10011db4:	4463      	add	r3, ip
10011db6:	4699      	mov	r9, r3
10011db8:	0324      	lsls	r4, r4, #12
10011dba:	4de3      	ldr	r5, [pc, #908]	; (10012148 <__ieee754_pow+0x5c4>)
10011dbc:	4be3      	ldr	r3, [pc, #908]	; (1001214c <__ieee754_pow+0x5c8>)
10011dbe:	0b24      	lsrs	r4, r4, #12
10011dc0:	4491      	add	r9, r2
10011dc2:	4325      	orrs	r5, r4
10011dc4:	429c      	cmp	r4, r3
10011dc6:	dd09      	ble.n	10011ddc <__ieee754_pow+0x258>
10011dc8:	4be1      	ldr	r3, [pc, #900]	; (10012150 <__ieee754_pow+0x5cc>)
10011dca:	429c      	cmp	r4, r3
10011dcc:	dc00      	bgt.n	10011dd0 <__ieee754_pow+0x24c>
10011dce:	e3a9      	b.n	10012524 <__ieee754_pow+0x9a0>
10011dd0:	2301      	movs	r3, #1
10011dd2:	469c      	mov	ip, r3
10011dd4:	4bdf      	ldr	r3, [pc, #892]	; (10012154 <__ieee754_pow+0x5d0>)
10011dd6:	44e1      	add	r9, ip
10011dd8:	469c      	mov	ip, r3
10011dda:	4465      	add	r5, ip
10011ddc:	2300      	movs	r3, #0
10011dde:	2400      	movs	r4, #0
10011de0:	2200      	movs	r2, #0
10011de2:	9308      	str	r3, [sp, #32]
10011de4:	9409      	str	r4, [sp, #36]	; 0x24
10011de6:	930c      	str	r3, [sp, #48]	; 0x30
10011de8:	940d      	str	r4, [sp, #52]	; 0x34
10011dea:	2400      	movs	r4, #0
10011dec:	4bd6      	ldr	r3, [pc, #856]	; (10012148 <__ieee754_pow+0x5c4>)
10011dee:	9206      	str	r2, [sp, #24]
10011df0:	9307      	str	r3, [sp, #28]
10011df2:	9a06      	ldr	r2, [sp, #24]
10011df4:	9b07      	ldr	r3, [sp, #28]
10011df6:	0029      	movs	r1, r5
10011df8:	900a      	str	r0, [sp, #40]	; 0x28
10011dfa:	910b      	str	r1, [sp, #44]	; 0x2c
10011dfc:	f002 ff50 	bl	10014ca0 <__aeabi_dsub>
10011e00:	9a06      	ldr	r2, [sp, #24]
10011e02:	9b07      	ldr	r3, [sp, #28]
10011e04:	0006      	movs	r6, r0
10011e06:	000f      	movs	r7, r1
10011e08:	980a      	ldr	r0, [sp, #40]	; 0x28
10011e0a:	990b      	ldr	r1, [sp, #44]	; 0x2c
10011e0c:	f001 fd7e 	bl	1001390c <__aeabi_dadd>
10011e10:	0002      	movs	r2, r0
10011e12:	000b      	movs	r3, r1
10011e14:	2000      	movs	r0, #0
10011e16:	49cc      	ldr	r1, [pc, #816]	; (10012148 <__ieee754_pow+0x5c4>)
10011e18:	f002 f8a4 	bl	10013f64 <__aeabi_ddiv>
10011e1c:	000a      	movs	r2, r1
10011e1e:	0001      	movs	r1, r0
10011e20:	0013      	movs	r3, r2
10011e22:	910e      	str	r1, [sp, #56]	; 0x38
10011e24:	920f      	str	r2, [sp, #60]	; 0x3c
10011e26:	0002      	movs	r2, r0
10011e28:	0039      	movs	r1, r7
10011e2a:	0030      	movs	r0, r6
10011e2c:	f002 fcbe 	bl	100147ac <__aeabi_dmul>
10011e30:	000a      	movs	r2, r1
10011e32:	0001      	movs	r1, r0
10011e34:	2080      	movs	r0, #128	; 0x80
10011e36:	9104      	str	r1, [sp, #16]
10011e38:	9205      	str	r2, [sp, #20]
10011e3a:	0013      	movs	r3, r2
10011e3c:	2200      	movs	r2, #0
10011e3e:	2180      	movs	r1, #128	; 0x80
10011e40:	0300      	lsls	r0, r0, #12
10011e42:	4684      	mov	ip, r0
10011e44:	9202      	str	r2, [sp, #8]
10011e46:	9303      	str	r3, [sp, #12]
10011e48:	2200      	movs	r2, #0
10011e4a:	0589      	lsls	r1, r1, #22
10011e4c:	106d      	asrs	r5, r5, #1
10011e4e:	430d      	orrs	r5, r1
10011e50:	4465      	add	r5, ip
10011e52:	192b      	adds	r3, r5, r4
10011e54:	9802      	ldr	r0, [sp, #8]
10011e56:	9903      	ldr	r1, [sp, #12]
10011e58:	0014      	movs	r4, r2
10011e5a:	001d      	movs	r5, r3
10011e5c:	f002 fca6 	bl	100147ac <__aeabi_dmul>
10011e60:	0002      	movs	r2, r0
10011e62:	000b      	movs	r3, r1
10011e64:	0030      	movs	r0, r6
10011e66:	0039      	movs	r1, r7
10011e68:	f002 ff1a 	bl	10014ca0 <__aeabi_dsub>
10011e6c:	9a06      	ldr	r2, [sp, #24]
10011e6e:	9b07      	ldr	r3, [sp, #28]
10011e70:	0006      	movs	r6, r0
10011e72:	000f      	movs	r7, r1
10011e74:	0020      	movs	r0, r4
10011e76:	0029      	movs	r1, r5
10011e78:	f002 ff12 	bl	10014ca0 <__aeabi_dsub>
10011e7c:	0002      	movs	r2, r0
10011e7e:	000b      	movs	r3, r1
10011e80:	980a      	ldr	r0, [sp, #40]	; 0x28
10011e82:	990b      	ldr	r1, [sp, #44]	; 0x2c
10011e84:	f002 ff0c 	bl	10014ca0 <__aeabi_dsub>
10011e88:	9a02      	ldr	r2, [sp, #8]
10011e8a:	9b03      	ldr	r3, [sp, #12]
10011e8c:	f002 fc8e 	bl	100147ac <__aeabi_dmul>
10011e90:	0002      	movs	r2, r0
10011e92:	000b      	movs	r3, r1
10011e94:	0030      	movs	r0, r6
10011e96:	0039      	movs	r1, r7
10011e98:	f002 ff02 	bl	10014ca0 <__aeabi_dsub>
10011e9c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
10011e9e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
10011ea0:	f002 fc84 	bl	100147ac <__aeabi_dmul>
10011ea4:	9d04      	ldr	r5, [sp, #16]
10011ea6:	9e05      	ldr	r6, [sp, #20]
10011ea8:	9006      	str	r0, [sp, #24]
10011eaa:	9107      	str	r1, [sp, #28]
10011eac:	002a      	movs	r2, r5
10011eae:	0033      	movs	r3, r6
10011eb0:	0028      	movs	r0, r5
10011eb2:	0031      	movs	r1, r6
10011eb4:	f002 fc7a 	bl	100147ac <__aeabi_dmul>
10011eb8:	0006      	movs	r6, r0
10011eba:	000f      	movs	r7, r1
10011ebc:	4aa6      	ldr	r2, [pc, #664]	; (10012158 <__ieee754_pow+0x5d4>)
10011ebe:	4ba7      	ldr	r3, [pc, #668]	; (1001215c <__ieee754_pow+0x5d8>)
10011ec0:	f002 fc74 	bl	100147ac <__aeabi_dmul>
10011ec4:	4aa6      	ldr	r2, [pc, #664]	; (10012160 <__ieee754_pow+0x5dc>)
10011ec6:	4ba7      	ldr	r3, [pc, #668]	; (10012164 <__ieee754_pow+0x5e0>)
10011ec8:	f001 fd20 	bl	1001390c <__aeabi_dadd>
10011ecc:	0032      	movs	r2, r6
10011ece:	003b      	movs	r3, r7
10011ed0:	f002 fc6c 	bl	100147ac <__aeabi_dmul>
10011ed4:	4aa4      	ldr	r2, [pc, #656]	; (10012168 <__ieee754_pow+0x5e4>)
10011ed6:	4ba5      	ldr	r3, [pc, #660]	; (1001216c <__ieee754_pow+0x5e8>)
10011ed8:	f001 fd18 	bl	1001390c <__aeabi_dadd>
10011edc:	0032      	movs	r2, r6
10011ede:	003b      	movs	r3, r7
10011ee0:	f002 fc64 	bl	100147ac <__aeabi_dmul>
10011ee4:	4aa2      	ldr	r2, [pc, #648]	; (10012170 <__ieee754_pow+0x5ec>)
10011ee6:	4ba3      	ldr	r3, [pc, #652]	; (10012174 <__ieee754_pow+0x5f0>)
10011ee8:	f001 fd10 	bl	1001390c <__aeabi_dadd>
10011eec:	0032      	movs	r2, r6
10011eee:	003b      	movs	r3, r7
10011ef0:	f002 fc5c 	bl	100147ac <__aeabi_dmul>
10011ef4:	4aa0      	ldr	r2, [pc, #640]	; (10012178 <__ieee754_pow+0x5f4>)
10011ef6:	4ba1      	ldr	r3, [pc, #644]	; (1001217c <__ieee754_pow+0x5f8>)
10011ef8:	f001 fd08 	bl	1001390c <__aeabi_dadd>
10011efc:	0032      	movs	r2, r6
10011efe:	003b      	movs	r3, r7
10011f00:	f002 fc54 	bl	100147ac <__aeabi_dmul>
10011f04:	4a9e      	ldr	r2, [pc, #632]	; (10012180 <__ieee754_pow+0x5fc>)
10011f06:	4b9f      	ldr	r3, [pc, #636]	; (10012184 <__ieee754_pow+0x600>)
10011f08:	f001 fd00 	bl	1001390c <__aeabi_dadd>
10011f0c:	0032      	movs	r2, r6
10011f0e:	0004      	movs	r4, r0
10011f10:	000d      	movs	r5, r1
10011f12:	003b      	movs	r3, r7
10011f14:	0030      	movs	r0, r6
10011f16:	0039      	movs	r1, r7
10011f18:	f002 fc48 	bl	100147ac <__aeabi_dmul>
10011f1c:	0002      	movs	r2, r0
10011f1e:	000b      	movs	r3, r1
10011f20:	0020      	movs	r0, r4
10011f22:	0029      	movs	r1, r5
10011f24:	f002 fc42 	bl	100147ac <__aeabi_dmul>
10011f28:	9e02      	ldr	r6, [sp, #8]
10011f2a:	9f03      	ldr	r7, [sp, #12]
10011f2c:	0004      	movs	r4, r0
10011f2e:	000d      	movs	r5, r1
10011f30:	9804      	ldr	r0, [sp, #16]
10011f32:	9905      	ldr	r1, [sp, #20]
10011f34:	0032      	movs	r2, r6
10011f36:	003b      	movs	r3, r7
10011f38:	f001 fce8 	bl	1001390c <__aeabi_dadd>
10011f3c:	9a06      	ldr	r2, [sp, #24]
10011f3e:	9b07      	ldr	r3, [sp, #28]
10011f40:	f002 fc34 	bl	100147ac <__aeabi_dmul>
10011f44:	0022      	movs	r2, r4
10011f46:	002b      	movs	r3, r5
10011f48:	f001 fce0 	bl	1001390c <__aeabi_dadd>
10011f4c:	0032      	movs	r2, r6
10011f4e:	900a      	str	r0, [sp, #40]	; 0x28
10011f50:	910b      	str	r1, [sp, #44]	; 0x2c
10011f52:	003b      	movs	r3, r7
10011f54:	0030      	movs	r0, r6
10011f56:	0039      	movs	r1, r7
10011f58:	9602      	str	r6, [sp, #8]
10011f5a:	9703      	str	r7, [sp, #12]
10011f5c:	f002 fc26 	bl	100147ac <__aeabi_dmul>
10011f60:	2200      	movs	r2, #0
10011f62:	4b89      	ldr	r3, [pc, #548]	; (10012188 <__ieee754_pow+0x604>)
10011f64:	0004      	movs	r4, r0
10011f66:	000d      	movs	r5, r1
10011f68:	f001 fcd0 	bl	1001390c <__aeabi_dadd>
10011f6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
10011f6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10011f70:	f001 fccc 	bl	1001390c <__aeabi_dadd>
10011f74:	2600      	movs	r6, #0
10011f76:	000f      	movs	r7, r1
10011f78:	0032      	movs	r2, r6
10011f7a:	000b      	movs	r3, r1
10011f7c:	9802      	ldr	r0, [sp, #8]
10011f7e:	9903      	ldr	r1, [sp, #12]
10011f80:	f002 fc14 	bl	100147ac <__aeabi_dmul>
10011f84:	2200      	movs	r2, #0
10011f86:	9002      	str	r0, [sp, #8]
10011f88:	9103      	str	r1, [sp, #12]
10011f8a:	4b7f      	ldr	r3, [pc, #508]	; (10012188 <__ieee754_pow+0x604>)
10011f8c:	0030      	movs	r0, r6
10011f8e:	0039      	movs	r1, r7
10011f90:	f002 fe86 	bl	10014ca0 <__aeabi_dsub>
10011f94:	0022      	movs	r2, r4
10011f96:	002b      	movs	r3, r5
10011f98:	f002 fe82 	bl	10014ca0 <__aeabi_dsub>
10011f9c:	0002      	movs	r2, r0
10011f9e:	000b      	movs	r3, r1
10011fa0:	980a      	ldr	r0, [sp, #40]	; 0x28
10011fa2:	990b      	ldr	r1, [sp, #44]	; 0x2c
10011fa4:	f002 fe7c 	bl	10014ca0 <__aeabi_dsub>
10011fa8:	9a04      	ldr	r2, [sp, #16]
10011faa:	9b05      	ldr	r3, [sp, #20]
10011fac:	f002 fbfe 	bl	100147ac <__aeabi_dmul>
10011fb0:	0032      	movs	r2, r6
10011fb2:	0004      	movs	r4, r0
10011fb4:	000d      	movs	r5, r1
10011fb6:	9806      	ldr	r0, [sp, #24]
10011fb8:	9907      	ldr	r1, [sp, #28]
10011fba:	003b      	movs	r3, r7
10011fbc:	f002 fbf6 	bl	100147ac <__aeabi_dmul>
10011fc0:	0002      	movs	r2, r0
10011fc2:	000b      	movs	r3, r1
10011fc4:	0020      	movs	r0, r4
10011fc6:	0029      	movs	r1, r5
10011fc8:	f001 fca0 	bl	1001390c <__aeabi_dadd>
10011fcc:	0004      	movs	r4, r0
10011fce:	000d      	movs	r5, r1
10011fd0:	0002      	movs	r2, r0
10011fd2:	000b      	movs	r3, r1
10011fd4:	9802      	ldr	r0, [sp, #8]
10011fd6:	9903      	ldr	r1, [sp, #12]
10011fd8:	f001 fc98 	bl	1001390c <__aeabi_dadd>
10011fdc:	2600      	movs	r6, #0
10011fde:	22e0      	movs	r2, #224	; 0xe0
10011fe0:	4b6a      	ldr	r3, [pc, #424]	; (1001218c <__ieee754_pow+0x608>)
10011fe2:	0612      	lsls	r2, r2, #24
10011fe4:	0030      	movs	r0, r6
10011fe6:	000f      	movs	r7, r1
10011fe8:	f002 fbe0 	bl	100147ac <__aeabi_dmul>
10011fec:	9a02      	ldr	r2, [sp, #8]
10011fee:	9b03      	ldr	r3, [sp, #12]
10011ff0:	9004      	str	r0, [sp, #16]
10011ff2:	9105      	str	r1, [sp, #20]
10011ff4:	0030      	movs	r0, r6
10011ff6:	0039      	movs	r1, r7
10011ff8:	f002 fe52 	bl	10014ca0 <__aeabi_dsub>
10011ffc:	0002      	movs	r2, r0
10011ffe:	000b      	movs	r3, r1
10012000:	0020      	movs	r0, r4
10012002:	0029      	movs	r1, r5
10012004:	f002 fe4c 	bl	10014ca0 <__aeabi_dsub>
10012008:	4a61      	ldr	r2, [pc, #388]	; (10012190 <__ieee754_pow+0x60c>)
1001200a:	4b60      	ldr	r3, [pc, #384]	; (1001218c <__ieee754_pow+0x608>)
1001200c:	f002 fbce 	bl	100147ac <__aeabi_dmul>
10012010:	4a60      	ldr	r2, [pc, #384]	; (10012194 <__ieee754_pow+0x610>)
10012012:	0004      	movs	r4, r0
10012014:	000d      	movs	r5, r1
10012016:	4b60      	ldr	r3, [pc, #384]	; (10012198 <__ieee754_pow+0x614>)
10012018:	0030      	movs	r0, r6
1001201a:	0039      	movs	r1, r7
1001201c:	f002 fbc6 	bl	100147ac <__aeabi_dmul>
10012020:	0002      	movs	r2, r0
10012022:	000b      	movs	r3, r1
10012024:	0020      	movs	r0, r4
10012026:	0029      	movs	r1, r5
10012028:	f001 fc70 	bl	1001390c <__aeabi_dadd>
1001202c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1001202e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
10012030:	f001 fc6c 	bl	1001390c <__aeabi_dadd>
10012034:	0006      	movs	r6, r0
10012036:	4648      	mov	r0, r9
10012038:	000f      	movs	r7, r1
1001203a:	f003 f9db 	bl	100153f4 <__aeabi_i2d>
1001203e:	0004      	movs	r4, r0
10012040:	000d      	movs	r5, r1
10012042:	9804      	ldr	r0, [sp, #16]
10012044:	9905      	ldr	r1, [sp, #20]
10012046:	0032      	movs	r2, r6
10012048:	003b      	movs	r3, r7
1001204a:	f001 fc5f 	bl	1001390c <__aeabi_dadd>
1001204e:	9a08      	ldr	r2, [sp, #32]
10012050:	9b09      	ldr	r3, [sp, #36]	; 0x24
10012052:	f001 fc5b 	bl	1001390c <__aeabi_dadd>
10012056:	0022      	movs	r2, r4
10012058:	002b      	movs	r3, r5
1001205a:	f001 fc57 	bl	1001390c <__aeabi_dadd>
1001205e:	2000      	movs	r0, #0
10012060:	0022      	movs	r2, r4
10012062:	002b      	movs	r3, r5
10012064:	9002      	str	r0, [sp, #8]
10012066:	9103      	str	r1, [sp, #12]
10012068:	f002 fe1a 	bl	10014ca0 <__aeabi_dsub>
1001206c:	9a08      	ldr	r2, [sp, #32]
1001206e:	9b09      	ldr	r3, [sp, #36]	; 0x24
10012070:	f002 fe16 	bl	10014ca0 <__aeabi_dsub>
10012074:	9a04      	ldr	r2, [sp, #16]
10012076:	9b05      	ldr	r3, [sp, #20]
10012078:	f002 fe12 	bl	10014ca0 <__aeabi_dsub>
1001207c:	0002      	movs	r2, r0
1001207e:	000b      	movs	r3, r1
10012080:	0030      	movs	r0, r6
10012082:	0039      	movs	r1, r7
10012084:	f002 fe0c 	bl	10014ca0 <__aeabi_dsub>
10012088:	9004      	str	r0, [sp, #16]
1001208a:	9105      	str	r1, [sp, #20]
1001208c:	465b      	mov	r3, fp
1001208e:	4642      	mov	r2, r8
10012090:	3b01      	subs	r3, #1
10012092:	4313      	orrs	r3, r2
10012094:	d100      	bne.n	10012098 <__ieee754_pow+0x514>
10012096:	e197      	b.n	100123c8 <__ieee754_pow+0x844>
10012098:	2300      	movs	r3, #0
1001209a:	4c2b      	ldr	r4, [pc, #172]	; (10012148 <__ieee754_pow+0x5c4>)
1001209c:	9306      	str	r3, [sp, #24]
1001209e:	9407      	str	r4, [sp, #28]
100120a0:	9800      	ldr	r0, [sp, #0]
100120a2:	9901      	ldr	r1, [sp, #4]
100120a4:	2600      	movs	r6, #0
100120a6:	000b      	movs	r3, r1
100120a8:	0032      	movs	r2, r6
100120aa:	000f      	movs	r7, r1
100120ac:	f002 fdf8 	bl	10014ca0 <__aeabi_dsub>
100120b0:	9a02      	ldr	r2, [sp, #8]
100120b2:	9b03      	ldr	r3, [sp, #12]
100120b4:	f002 fb7a 	bl	100147ac <__aeabi_dmul>
100120b8:	9a00      	ldr	r2, [sp, #0]
100120ba:	9b01      	ldr	r3, [sp, #4]
100120bc:	0004      	movs	r4, r0
100120be:	000d      	movs	r5, r1
100120c0:	9804      	ldr	r0, [sp, #16]
100120c2:	9905      	ldr	r1, [sp, #20]
100120c4:	f002 fb72 	bl	100147ac <__aeabi_dmul>
100120c8:	0002      	movs	r2, r0
100120ca:	000b      	movs	r3, r1
100120cc:	0020      	movs	r0, r4
100120ce:	0029      	movs	r1, r5
100120d0:	f001 fc1c 	bl	1001390c <__aeabi_dadd>
100120d4:	0004      	movs	r4, r0
100120d6:	000d      	movs	r5, r1
100120d8:	9802      	ldr	r0, [sp, #8]
100120da:	9903      	ldr	r1, [sp, #12]
100120dc:	003b      	movs	r3, r7
100120de:	0032      	movs	r2, r6
100120e0:	9404      	str	r4, [sp, #16]
100120e2:	9505      	str	r5, [sp, #20]
100120e4:	f002 fb62 	bl	100147ac <__aeabi_dmul>
100120e8:	9000      	str	r0, [sp, #0]
100120ea:	9101      	str	r1, [sp, #4]
100120ec:	000b      	movs	r3, r1
100120ee:	0002      	movs	r2, r0
100120f0:	0029      	movs	r1, r5
100120f2:	0020      	movs	r0, r4
100120f4:	f001 fc0a 	bl	1001390c <__aeabi_dadd>
100120f8:	4b28      	ldr	r3, [pc, #160]	; (1001219c <__ieee754_pow+0x618>)
100120fa:	4681      	mov	r9, r0
100120fc:	1e0f      	subs	r7, r1, #0
100120fe:	468a      	mov	sl, r1
10012100:	429f      	cmp	r7, r3
10012102:	dc00      	bgt.n	10012106 <__ieee754_pow+0x582>
10012104:	e13c      	b.n	10012380 <__ieee754_pow+0x7fc>
10012106:	4b26      	ldr	r3, [pc, #152]	; (100121a0 <__ieee754_pow+0x61c>)
10012108:	18cb      	adds	r3, r1, r3
1001210a:	4303      	orrs	r3, r0
1001210c:	d000      	beq.n	10012110 <__ieee754_pow+0x58c>
1001210e:	e1db      	b.n	100124c8 <__ieee754_pow+0x944>
10012110:	9804      	ldr	r0, [sp, #16]
10012112:	9905      	ldr	r1, [sp, #20]
10012114:	4a23      	ldr	r2, [pc, #140]	; (100121a4 <__ieee754_pow+0x620>)
10012116:	4b24      	ldr	r3, [pc, #144]	; (100121a8 <__ieee754_pow+0x624>)
10012118:	f001 fbf8 	bl	1001390c <__aeabi_dadd>
1001211c:	9a00      	ldr	r2, [sp, #0]
1001211e:	9b01      	ldr	r3, [sp, #4]
10012120:	0004      	movs	r4, r0
10012122:	000d      	movs	r5, r1
10012124:	4648      	mov	r0, r9
10012126:	0039      	movs	r1, r7
10012128:	f002 fdba 	bl	10014ca0 <__aeabi_dsub>
1001212c:	0002      	movs	r2, r0
1001212e:	000b      	movs	r3, r1
10012130:	0020      	movs	r0, r4
10012132:	0029      	movs	r1, r5
10012134:	f000 fe2e 	bl	10012d94 <__aeabi_dcmpgt>
10012138:	003e      	movs	r6, r7
1001213a:	e037      	b.n	100121ac <__ieee754_pow+0x628>
1001213c:	000fffff 	.word	0x000fffff
10012140:	43400000 	.word	0x43400000
10012144:	fffffc01 	.word	0xfffffc01
10012148:	3ff00000 	.word	0x3ff00000
1001214c:	0003988e 	.word	0x0003988e
10012150:	000bb679 	.word	0x000bb679
10012154:	fff00000 	.word	0xfff00000
10012158:	4a454eef 	.word	0x4a454eef
1001215c:	3fca7e28 	.word	0x3fca7e28
10012160:	93c9db65 	.word	0x93c9db65
10012164:	3fcd864a 	.word	0x3fcd864a
10012168:	a91d4101 	.word	0xa91d4101
1001216c:	3fd17460 	.word	0x3fd17460
10012170:	518f264d 	.word	0x518f264d
10012174:	3fd55555 	.word	0x3fd55555
10012178:	db6fabff 	.word	0xdb6fabff
1001217c:	3fdb6db6 	.word	0x3fdb6db6
10012180:	33333303 	.word	0x33333303
10012184:	3fe33333 	.word	0x3fe33333
10012188:	40080000 	.word	0x40080000
1001218c:	3feec709 	.word	0x3feec709
10012190:	dc3a03fd 	.word	0xdc3a03fd
10012194:	145b01f5 	.word	0x145b01f5
10012198:	be3e2fe0 	.word	0xbe3e2fe0
1001219c:	408fffff 	.word	0x408fffff
100121a0:	bf700000 	.word	0xbf700000
100121a4:	652b82fe 	.word	0x652b82fe
100121a8:	3c971547 	.word	0x3c971547
100121ac:	2800      	cmp	r0, #0
100121ae:	d000      	beq.n	100121b2 <__ieee754_pow+0x62e>
100121b0:	e18a      	b.n	100124c8 <__ieee754_pow+0x944>
100121b2:	2280      	movs	r2, #128	; 0x80
100121b4:	4be7      	ldr	r3, [pc, #924]	; (10012554 <__ieee754_pow+0x9d0>)
100121b6:	0352      	lsls	r2, r2, #13
100121b8:	469c      	mov	ip, r3
100121ba:	0013      	movs	r3, r2
100121bc:	1536      	asrs	r6, r6, #20
100121be:	4466      	add	r6, ip
100121c0:	4133      	asrs	r3, r6
100121c2:	49e5      	ldr	r1, [pc, #916]	; (10012558 <__ieee754_pow+0x9d4>)
100121c4:	19db      	adds	r3, r3, r7
100121c6:	005e      	lsls	r6, r3, #1
100121c8:	001c      	movs	r4, r3
100121ca:	031b      	lsls	r3, r3, #12
100121cc:	468c      	mov	ip, r1
100121ce:	0b1b      	lsrs	r3, r3, #12
100121d0:	4313      	orrs	r3, r2
100121d2:	2214      	movs	r2, #20
100121d4:	0d76      	lsrs	r6, r6, #21
100121d6:	4fe1      	ldr	r7, [pc, #900]	; (1001255c <__ieee754_pow+0x9d8>)
100121d8:	4466      	add	r6, ip
100121da:	4137      	asrs	r7, r6
100121dc:	1b96      	subs	r6, r2, r6
100121de:	4133      	asrs	r3, r6
100121e0:	4698      	mov	r8, r3
100121e2:	4653      	mov	r3, sl
100121e4:	43bc      	bics	r4, r7
100121e6:	2000      	movs	r0, #0
100121e8:	0021      	movs	r1, r4
100121ea:	2b00      	cmp	r3, #0
100121ec:	da00      	bge.n	100121f0 <__ieee754_pow+0x66c>
100121ee:	e1a9      	b.n	10012544 <__ieee754_pow+0x9c0>
100121f0:	0002      	movs	r2, r0
100121f2:	000b      	movs	r3, r1
100121f4:	9800      	ldr	r0, [sp, #0]
100121f6:	9901      	ldr	r1, [sp, #4]
100121f8:	f002 fd52 	bl	10014ca0 <__aeabi_dsub>
100121fc:	000b      	movs	r3, r1
100121fe:	9000      	str	r0, [sp, #0]
10012200:	9101      	str	r1, [sp, #4]
10012202:	0002      	movs	r2, r0
10012204:	9804      	ldr	r0, [sp, #16]
10012206:	9905      	ldr	r1, [sp, #20]
10012208:	f001 fb80 	bl	1001390c <__aeabi_dadd>
1001220c:	4643      	mov	r3, r8
1001220e:	051b      	lsls	r3, r3, #20
10012210:	4699      	mov	r9, r3
10012212:	2000      	movs	r0, #0
10012214:	2200      	movs	r2, #0
10012216:	4bd2      	ldr	r3, [pc, #840]	; (10012560 <__ieee754_pow+0x9dc>)
10012218:	0006      	movs	r6, r0
1001221a:	000f      	movs	r7, r1
1001221c:	f002 fac6 	bl	100147ac <__aeabi_dmul>
10012220:	9a00      	ldr	r2, [sp, #0]
10012222:	9b01      	ldr	r3, [sp, #4]
10012224:	9002      	str	r0, [sp, #8]
10012226:	9103      	str	r1, [sp, #12]
10012228:	0030      	movs	r0, r6
1001222a:	0039      	movs	r1, r7
1001222c:	f002 fd38 	bl	10014ca0 <__aeabi_dsub>
10012230:	0002      	movs	r2, r0
10012232:	000b      	movs	r3, r1
10012234:	9804      	ldr	r0, [sp, #16]
10012236:	9905      	ldr	r1, [sp, #20]
10012238:	f002 fd32 	bl	10014ca0 <__aeabi_dsub>
1001223c:	4ac9      	ldr	r2, [pc, #804]	; (10012564 <__ieee754_pow+0x9e0>)
1001223e:	4bca      	ldr	r3, [pc, #808]	; (10012568 <__ieee754_pow+0x9e4>)
10012240:	f002 fab4 	bl	100147ac <__aeabi_dmul>
10012244:	4ac9      	ldr	r2, [pc, #804]	; (1001256c <__ieee754_pow+0x9e8>)
10012246:	0004      	movs	r4, r0
10012248:	000d      	movs	r5, r1
1001224a:	4bc9      	ldr	r3, [pc, #804]	; (10012570 <__ieee754_pow+0x9ec>)
1001224c:	0030      	movs	r0, r6
1001224e:	0039      	movs	r1, r7
10012250:	f002 faac 	bl	100147ac <__aeabi_dmul>
10012254:	0002      	movs	r2, r0
10012256:	000b      	movs	r3, r1
10012258:	0020      	movs	r0, r4
1001225a:	0029      	movs	r1, r5
1001225c:	f001 fb56 	bl	1001390c <__aeabi_dadd>
10012260:	0004      	movs	r4, r0
10012262:	000d      	movs	r5, r1
10012264:	0002      	movs	r2, r0
10012266:	000b      	movs	r3, r1
10012268:	9802      	ldr	r0, [sp, #8]
1001226a:	9903      	ldr	r1, [sp, #12]
1001226c:	f001 fb4e 	bl	1001390c <__aeabi_dadd>
10012270:	9a02      	ldr	r2, [sp, #8]
10012272:	9b03      	ldr	r3, [sp, #12]
10012274:	0006      	movs	r6, r0
10012276:	000f      	movs	r7, r1
10012278:	f002 fd12 	bl	10014ca0 <__aeabi_dsub>
1001227c:	0002      	movs	r2, r0
1001227e:	000b      	movs	r3, r1
10012280:	0020      	movs	r0, r4
10012282:	0029      	movs	r1, r5
10012284:	f002 fd0c 	bl	10014ca0 <__aeabi_dsub>
10012288:	0032      	movs	r2, r6
1001228a:	9000      	str	r0, [sp, #0]
1001228c:	9101      	str	r1, [sp, #4]
1001228e:	003b      	movs	r3, r7
10012290:	0030      	movs	r0, r6
10012292:	0039      	movs	r1, r7
10012294:	f002 fa8a 	bl	100147ac <__aeabi_dmul>
10012298:	0004      	movs	r4, r0
1001229a:	000d      	movs	r5, r1
1001229c:	4ab5      	ldr	r2, [pc, #724]	; (10012574 <__ieee754_pow+0x9f0>)
1001229e:	4bb6      	ldr	r3, [pc, #728]	; (10012578 <__ieee754_pow+0x9f4>)
100122a0:	f002 fa84 	bl	100147ac <__aeabi_dmul>
100122a4:	4ab5      	ldr	r2, [pc, #724]	; (1001257c <__ieee754_pow+0x9f8>)
100122a6:	4bb6      	ldr	r3, [pc, #728]	; (10012580 <__ieee754_pow+0x9fc>)
100122a8:	f002 fcfa 	bl	10014ca0 <__aeabi_dsub>
100122ac:	0022      	movs	r2, r4
100122ae:	002b      	movs	r3, r5
100122b0:	f002 fa7c 	bl	100147ac <__aeabi_dmul>
100122b4:	4ab3      	ldr	r2, [pc, #716]	; (10012584 <__ieee754_pow+0xa00>)
100122b6:	4bb4      	ldr	r3, [pc, #720]	; (10012588 <__ieee754_pow+0xa04>)
100122b8:	f001 fb28 	bl	1001390c <__aeabi_dadd>
100122bc:	0022      	movs	r2, r4
100122be:	002b      	movs	r3, r5
100122c0:	f002 fa74 	bl	100147ac <__aeabi_dmul>
100122c4:	4ab1      	ldr	r2, [pc, #708]	; (1001258c <__ieee754_pow+0xa08>)
100122c6:	4bb2      	ldr	r3, [pc, #712]	; (10012590 <__ieee754_pow+0xa0c>)
100122c8:	f002 fcea 	bl	10014ca0 <__aeabi_dsub>
100122cc:	0022      	movs	r2, r4
100122ce:	002b      	movs	r3, r5
100122d0:	f002 fa6c 	bl	100147ac <__aeabi_dmul>
100122d4:	4aaf      	ldr	r2, [pc, #700]	; (10012594 <__ieee754_pow+0xa10>)
100122d6:	4bb0      	ldr	r3, [pc, #704]	; (10012598 <__ieee754_pow+0xa14>)
100122d8:	f001 fb18 	bl	1001390c <__aeabi_dadd>
100122dc:	0022      	movs	r2, r4
100122de:	002b      	movs	r3, r5
100122e0:	f002 fa64 	bl	100147ac <__aeabi_dmul>
100122e4:	0002      	movs	r2, r0
100122e6:	000b      	movs	r3, r1
100122e8:	0030      	movs	r0, r6
100122ea:	0039      	movs	r1, r7
100122ec:	f002 fcd8 	bl	10014ca0 <__aeabi_dsub>
100122f0:	0004      	movs	r4, r0
100122f2:	000d      	movs	r5, r1
100122f4:	0002      	movs	r2, r0
100122f6:	000b      	movs	r3, r1
100122f8:	0030      	movs	r0, r6
100122fa:	0039      	movs	r1, r7
100122fc:	f002 fa56 	bl	100147ac <__aeabi_dmul>
10012300:	2380      	movs	r3, #128	; 0x80
10012302:	9002      	str	r0, [sp, #8]
10012304:	9103      	str	r1, [sp, #12]
10012306:	2200      	movs	r2, #0
10012308:	05db      	lsls	r3, r3, #23
1001230a:	0020      	movs	r0, r4
1001230c:	0029      	movs	r1, r5
1001230e:	f002 fcc7 	bl	10014ca0 <__aeabi_dsub>
10012312:	0002      	movs	r2, r0
10012314:	000b      	movs	r3, r1
10012316:	9802      	ldr	r0, [sp, #8]
10012318:	9903      	ldr	r1, [sp, #12]
1001231a:	f001 fe23 	bl	10013f64 <__aeabi_ddiv>
1001231e:	9a00      	ldr	r2, [sp, #0]
10012320:	9b01      	ldr	r3, [sp, #4]
10012322:	0004      	movs	r4, r0
10012324:	000d      	movs	r5, r1
10012326:	0030      	movs	r0, r6
10012328:	0039      	movs	r1, r7
1001232a:	f002 fa3f 	bl	100147ac <__aeabi_dmul>
1001232e:	9a00      	ldr	r2, [sp, #0]
10012330:	9b01      	ldr	r3, [sp, #4]
10012332:	f001 faeb 	bl	1001390c <__aeabi_dadd>
10012336:	0002      	movs	r2, r0
10012338:	000b      	movs	r3, r1
1001233a:	0020      	movs	r0, r4
1001233c:	0029      	movs	r1, r5
1001233e:	f002 fcaf 	bl	10014ca0 <__aeabi_dsub>
10012342:	0032      	movs	r2, r6
10012344:	003b      	movs	r3, r7
10012346:	f002 fcab 	bl	10014ca0 <__aeabi_dsub>
1001234a:	0002      	movs	r2, r0
1001234c:	000b      	movs	r3, r1
1001234e:	2000      	movs	r0, #0
10012350:	4992      	ldr	r1, [pc, #584]	; (1001259c <__ieee754_pow+0xa18>)
10012352:	f002 fca5 	bl	10014ca0 <__aeabi_dsub>
10012356:	464b      	mov	r3, r9
10012358:	185b      	adds	r3, r3, r1
1001235a:	151a      	asrs	r2, r3, #20
1001235c:	2a00      	cmp	r2, #0
1001235e:	dc00      	bgt.n	10012362 <__ieee754_pow+0x7de>
10012360:	e0f4      	b.n	1001254c <__ieee754_pow+0x9c8>
10012362:	0019      	movs	r1, r3
10012364:	9a06      	ldr	r2, [sp, #24]
10012366:	9b07      	ldr	r3, [sp, #28]
10012368:	f002 fa20 	bl	100147ac <__aeabi_dmul>
1001236c:	0006      	movs	r6, r0
1001236e:	e452      	b.n	10011c16 <__ieee754_pow+0x92>
10012370:	0032      	movs	r2, r6
10012372:	0030      	movs	r0, r6
10012374:	002b      	movs	r3, r5
10012376:	0029      	movs	r1, r5
10012378:	f002 fa18 	bl	100147ac <__aeabi_dmul>
1001237c:	0006      	movs	r6, r0
1001237e:	e44a      	b.n	10011c16 <__ieee754_pow+0x92>
10012380:	4b87      	ldr	r3, [pc, #540]	; (100125a0 <__ieee754_pow+0xa1c>)
10012382:	004e      	lsls	r6, r1, #1
10012384:	0876      	lsrs	r6, r6, #1
10012386:	429e      	cmp	r6, r3
10012388:	dc00      	bgt.n	1001238c <__ieee754_pow+0x808>
1001238a:	e0bf      	b.n	1001250c <__ieee754_pow+0x988>
1001238c:	4b85      	ldr	r3, [pc, #532]	; (100125a4 <__ieee754_pow+0xa20>)
1001238e:	18cb      	adds	r3, r1, r3
10012390:	4303      	orrs	r3, r0
10012392:	d10c      	bne.n	100123ae <__ieee754_pow+0x82a>
10012394:	9a00      	ldr	r2, [sp, #0]
10012396:	9b01      	ldr	r3, [sp, #4]
10012398:	f002 fc82 	bl	10014ca0 <__aeabi_dsub>
1001239c:	0002      	movs	r2, r0
1001239e:	000b      	movs	r3, r1
100123a0:	9804      	ldr	r0, [sp, #16]
100123a2:	9905      	ldr	r1, [sp, #20]
100123a4:	f000 fcec 	bl	10012d80 <__aeabi_dcmple>
100123a8:	2800      	cmp	r0, #0
100123aa:	d100      	bne.n	100123ae <__ieee754_pow+0x82a>
100123ac:	e701      	b.n	100121b2 <__ieee754_pow+0x62e>
100123ae:	9806      	ldr	r0, [sp, #24]
100123b0:	9907      	ldr	r1, [sp, #28]
100123b2:	4a7d      	ldr	r2, [pc, #500]	; (100125a8 <__ieee754_pow+0xa24>)
100123b4:	4b7d      	ldr	r3, [pc, #500]	; (100125ac <__ieee754_pow+0xa28>)
100123b6:	f002 f9f9 	bl	100147ac <__aeabi_dmul>
100123ba:	4a7b      	ldr	r2, [pc, #492]	; (100125a8 <__ieee754_pow+0xa24>)
100123bc:	4b7b      	ldr	r3, [pc, #492]	; (100125ac <__ieee754_pow+0xa28>)
100123be:	f002 f9f5 	bl	100147ac <__aeabi_dmul>
100123c2:	0006      	movs	r6, r0
100123c4:	f7ff fc27 	bl	10011c16 <__ieee754_pow+0x92>
100123c8:	2300      	movs	r3, #0
100123ca:	4c79      	ldr	r4, [pc, #484]	; (100125b0 <__ieee754_pow+0xa2c>)
100123cc:	9306      	str	r3, [sp, #24]
100123ce:	9407      	str	r4, [sp, #28]
100123d0:	e666      	b.n	100120a0 <__ieee754_pow+0x51c>
100123d2:	4653      	mov	r3, sl
100123d4:	2b00      	cmp	r3, #0
100123d6:	db00      	blt.n	100123da <__ieee754_pow+0x856>
100123d8:	e4c3      	b.n	10011d62 <__ieee754_pow+0x1de>
100123da:	9b00      	ldr	r3, [sp, #0]
100123dc:	9c01      	ldr	r4, [sp, #4]
100123de:	2280      	movs	r2, #128	; 0x80
100123e0:	0612      	lsls	r2, r2, #24
100123e2:	001e      	movs	r6, r3
100123e4:	4694      	mov	ip, r2
100123e6:	0023      	movs	r3, r4
100123e8:	4463      	add	r3, ip
100123ea:	0019      	movs	r1, r3
100123ec:	f7ff fc13 	bl	10011c16 <__ieee754_pow+0x92>
100123f0:	0002      	movs	r2, r0
100123f2:	000b      	movs	r3, r1
100123f4:	2000      	movs	r0, #0
100123f6:	4969      	ldr	r1, [pc, #420]	; (1001259c <__ieee754_pow+0xa18>)
100123f8:	f001 fdb4 	bl	10013f64 <__aeabi_ddiv>
100123fc:	e44a      	b.n	10011c94 <__ieee754_pow+0x110>
100123fe:	4b6d      	ldr	r3, [pc, #436]	; (100125b4 <__ieee754_pow+0xa30>)
10012400:	429c      	cmp	r4, r3
10012402:	dc00      	bgt.n	10012406 <__ieee754_pow+0x882>
10012404:	e4aa      	b.n	10011d5c <__ieee754_pow+0x1d8>
10012406:	4b65      	ldr	r3, [pc, #404]	; (1001259c <__ieee754_pow+0xa18>)
10012408:	429c      	cmp	r4, r3
1001240a:	dd01      	ble.n	10012410 <__ieee754_pow+0x88c>
1001240c:	f7ff fc2c 	bl	10011c68 <__ieee754_pow+0xe4>
10012410:	2200      	movs	r2, #0
10012412:	4b62      	ldr	r3, [pc, #392]	; (1001259c <__ieee754_pow+0xa18>)
10012414:	f002 fc44 	bl	10014ca0 <__aeabi_dsub>
10012418:	22c0      	movs	r2, #192	; 0xc0
1001241a:	4b67      	ldr	r3, [pc, #412]	; (100125b8 <__ieee754_pow+0xa34>)
1001241c:	05d2      	lsls	r2, r2, #23
1001241e:	0004      	movs	r4, r0
10012420:	000d      	movs	r5, r1
10012422:	f002 f9c3 	bl	100147ac <__aeabi_dmul>
10012426:	4a65      	ldr	r2, [pc, #404]	; (100125bc <__ieee754_pow+0xa38>)
10012428:	0006      	movs	r6, r0
1001242a:	000f      	movs	r7, r1
1001242c:	4b64      	ldr	r3, [pc, #400]	; (100125c0 <__ieee754_pow+0xa3c>)
1001242e:	0020      	movs	r0, r4
10012430:	0029      	movs	r1, r5
10012432:	f002 f9bb 	bl	100147ac <__aeabi_dmul>
10012436:	2200      	movs	r2, #0
10012438:	9002      	str	r0, [sp, #8]
1001243a:	9103      	str	r1, [sp, #12]
1001243c:	4b61      	ldr	r3, [pc, #388]	; (100125c4 <__ieee754_pow+0xa40>)
1001243e:	0020      	movs	r0, r4
10012440:	0029      	movs	r1, r5
10012442:	f002 f9b3 	bl	100147ac <__aeabi_dmul>
10012446:	0002      	movs	r2, r0
10012448:	000b      	movs	r3, r1
1001244a:	485f      	ldr	r0, [pc, #380]	; (100125c8 <__ieee754_pow+0xa44>)
1001244c:	495f      	ldr	r1, [pc, #380]	; (100125cc <__ieee754_pow+0xa48>)
1001244e:	f002 fc27 	bl	10014ca0 <__aeabi_dsub>
10012452:	0022      	movs	r2, r4
10012454:	002b      	movs	r3, r5
10012456:	f002 f9a9 	bl	100147ac <__aeabi_dmul>
1001245a:	0002      	movs	r2, r0
1001245c:	000b      	movs	r3, r1
1001245e:	2000      	movs	r0, #0
10012460:	495b      	ldr	r1, [pc, #364]	; (100125d0 <__ieee754_pow+0xa4c>)
10012462:	f002 fc1d 	bl	10014ca0 <__aeabi_dsub>
10012466:	0022      	movs	r2, r4
10012468:	9004      	str	r0, [sp, #16]
1001246a:	9105      	str	r1, [sp, #20]
1001246c:	002b      	movs	r3, r5
1001246e:	0020      	movs	r0, r4
10012470:	0029      	movs	r1, r5
10012472:	f002 f99b 	bl	100147ac <__aeabi_dmul>
10012476:	0002      	movs	r2, r0
10012478:	000b      	movs	r3, r1
1001247a:	9804      	ldr	r0, [sp, #16]
1001247c:	9905      	ldr	r1, [sp, #20]
1001247e:	f002 f995 	bl	100147ac <__aeabi_dmul>
10012482:	4a54      	ldr	r2, [pc, #336]	; (100125d4 <__ieee754_pow+0xa50>)
10012484:	4b4c      	ldr	r3, [pc, #304]	; (100125b8 <__ieee754_pow+0xa34>)
10012486:	f002 f991 	bl	100147ac <__aeabi_dmul>
1001248a:	0002      	movs	r2, r0
1001248c:	000b      	movs	r3, r1
1001248e:	9802      	ldr	r0, [sp, #8]
10012490:	9903      	ldr	r1, [sp, #12]
10012492:	f002 fc05 	bl	10014ca0 <__aeabi_dsub>
10012496:	0002      	movs	r2, r0
10012498:	000b      	movs	r3, r1
1001249a:	0004      	movs	r4, r0
1001249c:	000d      	movs	r5, r1
1001249e:	0030      	movs	r0, r6
100124a0:	0039      	movs	r1, r7
100124a2:	f001 fa33 	bl	1001390c <__aeabi_dadd>
100124a6:	2200      	movs	r2, #0
100124a8:	0010      	movs	r0, r2
100124aa:	003b      	movs	r3, r7
100124ac:	0032      	movs	r2, r6
100124ae:	9002      	str	r0, [sp, #8]
100124b0:	9103      	str	r1, [sp, #12]
100124b2:	f002 fbf5 	bl	10014ca0 <__aeabi_dsub>
100124b6:	0002      	movs	r2, r0
100124b8:	000b      	movs	r3, r1
100124ba:	0020      	movs	r0, r4
100124bc:	0029      	movs	r1, r5
100124be:	f002 fbef 	bl	10014ca0 <__aeabi_dsub>
100124c2:	9004      	str	r0, [sp, #16]
100124c4:	9105      	str	r1, [sp, #20]
100124c6:	e5e1      	b.n	1001208c <__ieee754_pow+0x508>
100124c8:	4a43      	ldr	r2, [pc, #268]	; (100125d8 <__ieee754_pow+0xa54>)
100124ca:	4b44      	ldr	r3, [pc, #272]	; (100125dc <__ieee754_pow+0xa58>)
100124cc:	9806      	ldr	r0, [sp, #24]
100124ce:	9907      	ldr	r1, [sp, #28]
100124d0:	f002 f96c 	bl	100147ac <__aeabi_dmul>
100124d4:	4a40      	ldr	r2, [pc, #256]	; (100125d8 <__ieee754_pow+0xa54>)
100124d6:	4b41      	ldr	r3, [pc, #260]	; (100125dc <__ieee754_pow+0xa58>)
100124d8:	f002 f968 	bl	100147ac <__aeabi_dmul>
100124dc:	0006      	movs	r6, r0
100124de:	f7ff fb9a 	bl	10011c16 <__ieee754_pow+0x92>
100124e2:	2a00      	cmp	r2, #0
100124e4:	d001      	beq.n	100124ea <__ieee754_pow+0x966>
100124e6:	f7ff fba5 	bl	10011c34 <__ieee754_pow+0xb0>
100124ea:	3214      	adds	r2, #20
100124ec:	1ad3      	subs	r3, r2, r3
100124ee:	003a      	movs	r2, r7
100124f0:	411a      	asrs	r2, r3
100124f2:	0011      	movs	r1, r2
100124f4:	4099      	lsls	r1, r3
100124f6:	428f      	cmp	r7, r1
100124f8:	d001      	beq.n	100124fe <__ieee754_pow+0x97a>
100124fa:	f7ff fb6f 	bl	10011bdc <__ieee754_pow+0x58>
100124fe:	2301      	movs	r3, #1
10012500:	4013      	ands	r3, r2
10012502:	2202      	movs	r2, #2
10012504:	1ad3      	subs	r3, r2, r3
10012506:	469b      	mov	fp, r3
10012508:	f7ff fb68 	bl	10011bdc <__ieee754_pow+0x58>
1001250c:	4b30      	ldr	r3, [pc, #192]	; (100125d0 <__ieee754_pow+0xa4c>)
1001250e:	429e      	cmp	r6, r3
10012510:	dd00      	ble.n	10012514 <__ieee754_pow+0x990>
10012512:	e64e      	b.n	100121b2 <__ieee754_pow+0x62e>
10012514:	2300      	movs	r3, #0
10012516:	4699      	mov	r9, r3
10012518:	4698      	mov	r8, r3
1001251a:	e67a      	b.n	10012212 <__ieee754_pow+0x68e>
1001251c:	0002      	movs	r2, r0
1001251e:	000b      	movs	r3, r1
10012520:	f7ff fc14 	bl	10011d4c <__ieee754_pow+0x1c8>
10012524:	2380      	movs	r3, #128	; 0x80
10012526:	4c2e      	ldr	r4, [pc, #184]	; (100125e0 <__ieee754_pow+0xa5c>)
10012528:	05db      	lsls	r3, r3, #23
1001252a:	9308      	str	r3, [sp, #32]
1001252c:	9409      	str	r4, [sp, #36]	; 0x24
1001252e:	4b2d      	ldr	r3, [pc, #180]	; (100125e4 <__ieee754_pow+0xa60>)
10012530:	4c2d      	ldr	r4, [pc, #180]	; (100125e8 <__ieee754_pow+0xa64>)
10012532:	2200      	movs	r2, #0
10012534:	930c      	str	r3, [sp, #48]	; 0x30
10012536:	940d      	str	r4, [sp, #52]	; 0x34
10012538:	2480      	movs	r4, #128	; 0x80
1001253a:	4b2c      	ldr	r3, [pc, #176]	; (100125ec <__ieee754_pow+0xa68>)
1001253c:	02e4      	lsls	r4, r4, #11
1001253e:	9206      	str	r2, [sp, #24]
10012540:	9307      	str	r3, [sp, #28]
10012542:	e456      	b.n	10011df2 <__ieee754_pow+0x26e>
10012544:	4643      	mov	r3, r8
10012546:	425b      	negs	r3, r3
10012548:	4698      	mov	r8, r3
1001254a:	e651      	b.n	100121f0 <__ieee754_pow+0x66c>
1001254c:	4642      	mov	r2, r8
1001254e:	f000 f9fd 	bl	1001294c <scalbn>
10012552:	e707      	b.n	10012364 <__ieee754_pow+0x7e0>
10012554:	fffffc02 	.word	0xfffffc02
10012558:	fffffc01 	.word	0xfffffc01
1001255c:	000fffff 	.word	0x000fffff
10012560:	3fe62e43 	.word	0x3fe62e43
10012564:	fefa39ef 	.word	0xfefa39ef
10012568:	3fe62e42 	.word	0x3fe62e42
1001256c:	0ca86c39 	.word	0x0ca86c39
10012570:	be205c61 	.word	0xbe205c61
10012574:	72bea4d0 	.word	0x72bea4d0
10012578:	3e663769 	.word	0x3e663769
1001257c:	c5d26bf1 	.word	0xc5d26bf1
10012580:	3ebbbd41 	.word	0x3ebbbd41
10012584:	af25de2c 	.word	0xaf25de2c
10012588:	3f11566a 	.word	0x3f11566a
1001258c:	16bebd93 	.word	0x16bebd93
10012590:	3f66c16c 	.word	0x3f66c16c
10012594:	5555553e 	.word	0x5555553e
10012598:	3fc55555 	.word	0x3fc55555
1001259c:	3ff00000 	.word	0x3ff00000
100125a0:	4090cbff 	.word	0x4090cbff
100125a4:	3f6f3400 	.word	0x3f6f3400
100125a8:	c2f8f359 	.word	0xc2f8f359
100125ac:	01a56e1f 	.word	0x01a56e1f
100125b0:	bff00000 	.word	0xbff00000
100125b4:	3feffffe 	.word	0x3feffffe
100125b8:	3ff71547 	.word	0x3ff71547
100125bc:	f85ddf44 	.word	0xf85ddf44
100125c0:	3e54ae0b 	.word	0x3e54ae0b
100125c4:	3fd00000 	.word	0x3fd00000
100125c8:	55555555 	.word	0x55555555
100125cc:	3fd55555 	.word	0x3fd55555
100125d0:	3fe00000 	.word	0x3fe00000
100125d4:	652b82fe 	.word	0x652b82fe
100125d8:	8800759c 	.word	0x8800759c
100125dc:	7e37e43c 	.word	0x7e37e43c
100125e0:	3fe2b803 	.word	0x3fe2b803
100125e4:	43cfd006 	.word	0x43cfd006
100125e8:	3e4cfdeb 	.word	0x3e4cfdeb
100125ec:	3ff80000 	.word	0x3ff80000

100125f0 <__ieee754_sqrt>:
100125f0:	b5f0      	push	{r4, r5, r6, r7, lr}
100125f2:	4656      	mov	r6, sl
100125f4:	464d      	mov	r5, r9
100125f6:	4644      	mov	r4, r8
100125f8:	465f      	mov	r7, fp
100125fa:	4b75      	ldr	r3, [pc, #468]	; (100127d0 <__ieee754_sqrt+0x1e0>)
100125fc:	b4f0      	push	{r4, r5, r6, r7}
100125fe:	000a      	movs	r2, r1
10012600:	000d      	movs	r5, r1
10012602:	0019      	movs	r1, r3
10012604:	b083      	sub	sp, #12
10012606:	0006      	movs	r6, r0
10012608:	0004      	movs	r4, r0
1001260a:	4029      	ands	r1, r5
1001260c:	4299      	cmp	r1, r3
1001260e:	d100      	bne.n	10012612 <__ieee754_sqrt+0x22>
10012610:	e0ba      	b.n	10012788 <__ieee754_sqrt+0x198>
10012612:	2d00      	cmp	r5, #0
10012614:	dc00      	bgt.n	10012618 <__ieee754_sqrt+0x28>
10012616:	e094      	b.n	10012742 <__ieee754_sqrt+0x152>
10012618:	152d      	asrs	r5, r5, #20
1001261a:	d100      	bne.n	1001261e <__ieee754_sqrt+0x2e>
1001261c:	e0a3      	b.n	10012766 <__ieee754_sqrt+0x176>
1001261e:	4b6d      	ldr	r3, [pc, #436]	; (100127d4 <__ieee754_sqrt+0x1e4>)
10012620:	0312      	lsls	r2, r2, #12
10012622:	469c      	mov	ip, r3
10012624:	2380      	movs	r3, #128	; 0x80
10012626:	0b12      	lsrs	r2, r2, #12
10012628:	035b      	lsls	r3, r3, #13
1001262a:	4465      	add	r5, ip
1001262c:	431a      	orrs	r2, r3
1001262e:	07eb      	lsls	r3, r5, #31
10012630:	d500      	bpl.n	10012634 <__ieee754_sqrt+0x44>
10012632:	e081      	b.n	10012738 <__ieee754_sqrt+0x148>
10012634:	106b      	asrs	r3, r5, #1
10012636:	4698      	mov	r8, r3
10012638:	0fe3      	lsrs	r3, r4, #31
1001263a:	189b      	adds	r3, r3, r2
1001263c:	189b      	adds	r3, r3, r2
1001263e:	2280      	movs	r2, #128	; 0x80
10012640:	2116      	movs	r1, #22
10012642:	2600      	movs	r6, #0
10012644:	2700      	movs	r7, #0
10012646:	0064      	lsls	r4, r4, #1
10012648:	0392      	lsls	r2, r2, #14
1001264a:	18b8      	adds	r0, r7, r2
1001264c:	4298      	cmp	r0, r3
1001264e:	dc02      	bgt.n	10012656 <__ieee754_sqrt+0x66>
10012650:	1887      	adds	r7, r0, r2
10012652:	1a1b      	subs	r3, r3, r0
10012654:	18b6      	adds	r6, r6, r2
10012656:	0fe0      	lsrs	r0, r4, #31
10012658:	005b      	lsls	r3, r3, #1
1001265a:	3901      	subs	r1, #1
1001265c:	181b      	adds	r3, r3, r0
1001265e:	0064      	lsls	r4, r4, #1
10012660:	0852      	lsrs	r2, r2, #1
10012662:	2900      	cmp	r1, #0
10012664:	d1f1      	bne.n	1001264a <__ieee754_sqrt+0x5a>
10012666:	2200      	movs	r2, #0
10012668:	9201      	str	r2, [sp, #4]
1001266a:	4694      	mov	ip, r2
1001266c:	2280      	movs	r2, #128	; 0x80
1001266e:	0612      	lsls	r2, r2, #24
10012670:	2020      	movs	r0, #32
10012672:	4691      	mov	r9, r2
10012674:	e009      	b.n	1001268a <__ieee754_sqrt+0x9a>
10012676:	429f      	cmp	r7, r3
10012678:	d041      	beq.n	100126fe <__ieee754_sqrt+0x10e>
1001267a:	0fe1      	lsrs	r1, r4, #31
1001267c:	18c9      	adds	r1, r1, r3
1001267e:	3801      	subs	r0, #1
10012680:	18cb      	adds	r3, r1, r3
10012682:	0064      	lsls	r4, r4, #1
10012684:	0852      	lsrs	r2, r2, #1
10012686:	2800      	cmp	r0, #0
10012688:	d01e      	beq.n	100126c8 <__ieee754_sqrt+0xd8>
1001268a:	4661      	mov	r1, ip
1001268c:	1851      	adds	r1, r2, r1
1001268e:	429f      	cmp	r7, r3
10012690:	daf1      	bge.n	10012676 <__ieee754_sqrt+0x86>
10012692:	188d      	adds	r5, r1, r2
10012694:	46ac      	mov	ip, r5
10012696:	0fcd      	lsrs	r5, r1, #31
10012698:	07ed      	lsls	r5, r5, #31
1001269a:	46ba      	mov	sl, r7
1001269c:	454d      	cmp	r5, r9
1001269e:	d039      	beq.n	10012714 <__ieee754_sqrt+0x124>
100126a0:	1bdb      	subs	r3, r3, r7
100126a2:	428c      	cmp	r4, r1
100126a4:	41bf      	sbcs	r7, r7
100126a6:	427f      	negs	r7, r7
100126a8:	1bdb      	subs	r3, r3, r7
100126aa:	1a64      	subs	r4, r4, r1
100126ac:	9901      	ldr	r1, [sp, #4]
100126ae:	3801      	subs	r0, #1
100126b0:	468b      	mov	fp, r1
100126b2:	4493      	add	fp, r2
100126b4:	4659      	mov	r1, fp
100126b6:	9101      	str	r1, [sp, #4]
100126b8:	0fe1      	lsrs	r1, r4, #31
100126ba:	18c9      	adds	r1, r1, r3
100126bc:	4657      	mov	r7, sl
100126be:	18cb      	adds	r3, r1, r3
100126c0:	0064      	lsls	r4, r4, #1
100126c2:	0852      	lsrs	r2, r2, #1
100126c4:	2800      	cmp	r0, #0
100126c6:	d1e0      	bne.n	1001268a <__ieee754_sqrt+0x9a>
100126c8:	4323      	orrs	r3, r4
100126ca:	d12b      	bne.n	10012724 <__ieee754_sqrt+0x134>
100126cc:	9b01      	ldr	r3, [sp, #4]
100126ce:	085b      	lsrs	r3, r3, #1
100126d0:	4941      	ldr	r1, [pc, #260]	; (100127d8 <__ieee754_sqrt+0x1e8>)
100126d2:	1072      	asrs	r2, r6, #1
100126d4:	468c      	mov	ip, r1
100126d6:	4462      	add	r2, ip
100126d8:	07f1      	lsls	r1, r6, #31
100126da:	d502      	bpl.n	100126e2 <__ieee754_sqrt+0xf2>
100126dc:	2180      	movs	r1, #128	; 0x80
100126de:	0609      	lsls	r1, r1, #24
100126e0:	430b      	orrs	r3, r1
100126e2:	4641      	mov	r1, r8
100126e4:	0509      	lsls	r1, r1, #20
100126e6:	188d      	adds	r5, r1, r2
100126e8:	001e      	movs	r6, r3
100126ea:	002f      	movs	r7, r5
100126ec:	0030      	movs	r0, r6
100126ee:	0039      	movs	r1, r7
100126f0:	b003      	add	sp, #12
100126f2:	bc3c      	pop	{r2, r3, r4, r5}
100126f4:	4690      	mov	r8, r2
100126f6:	4699      	mov	r9, r3
100126f8:	46a2      	mov	sl, r4
100126fa:	46ab      	mov	fp, r5
100126fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100126fe:	42a1      	cmp	r1, r4
10012700:	d80e      	bhi.n	10012720 <__ieee754_sqrt+0x130>
10012702:	188d      	adds	r5, r1, r2
10012704:	46ac      	mov	ip, r5
10012706:	0fcd      	lsrs	r5, r1, #31
10012708:	07ed      	lsls	r5, r5, #31
1001270a:	454d      	cmp	r5, r9
1001270c:	d048      	beq.n	100127a0 <__ieee754_sqrt+0x1b0>
1001270e:	469a      	mov	sl, r3
10012710:	2300      	movs	r3, #0
10012712:	e7ca      	b.n	100126aa <__ieee754_sqrt+0xba>
10012714:	4665      	mov	r5, ip
10012716:	2d00      	cmp	r5, #0
10012718:	dbc2      	blt.n	100126a0 <__ieee754_sqrt+0xb0>
1001271a:	1c7d      	adds	r5, r7, #1
1001271c:	46aa      	mov	sl, r5
1001271e:	e7bf      	b.n	100126a0 <__ieee754_sqrt+0xb0>
10012720:	003b      	movs	r3, r7
10012722:	e7aa      	b.n	1001267a <__ieee754_sqrt+0x8a>
10012724:	9b01      	ldr	r3, [sp, #4]
10012726:	3301      	adds	r3, #1
10012728:	d03e      	beq.n	100127a8 <__ieee754_sqrt+0x1b8>
1001272a:	9a01      	ldr	r2, [sp, #4]
1001272c:	2301      	movs	r3, #1
1001272e:	4694      	mov	ip, r2
10012730:	4013      	ands	r3, r2
10012732:	4463      	add	r3, ip
10012734:	085b      	lsrs	r3, r3, #1
10012736:	e7cb      	b.n	100126d0 <__ieee754_sqrt+0xe0>
10012738:	0fe3      	lsrs	r3, r4, #31
1001273a:	0052      	lsls	r2, r2, #1
1001273c:	189a      	adds	r2, r3, r2
1001273e:	0064      	lsls	r4, r4, #1
10012740:	e778      	b.n	10012634 <__ieee754_sqrt+0x44>
10012742:	006b      	lsls	r3, r5, #1
10012744:	085b      	lsrs	r3, r3, #1
10012746:	4303      	orrs	r3, r0
10012748:	002f      	movs	r7, r5
1001274a:	2b00      	cmp	r3, #0
1001274c:	d0ce      	beq.n	100126ec <__ieee754_sqrt+0xfc>
1001274e:	2500      	movs	r5, #0
10012750:	2a00      	cmp	r2, #0
10012752:	d131      	bne.n	100127b8 <__ieee754_sqrt+0x1c8>
10012754:	0ae2      	lsrs	r2, r4, #11
10012756:	3d15      	subs	r5, #21
10012758:	0564      	lsls	r4, r4, #21
1001275a:	2a00      	cmp	r2, #0
1001275c:	d0fa      	beq.n	10012754 <__ieee754_sqrt+0x164>
1001275e:	2380      	movs	r3, #128	; 0x80
10012760:	035b      	lsls	r3, r3, #13
10012762:	421a      	tst	r2, r3
10012764:	d123      	bne.n	100127ae <__ieee754_sqrt+0x1be>
10012766:	2080      	movs	r0, #128	; 0x80
10012768:	2300      	movs	r3, #0
1001276a:	0340      	lsls	r0, r0, #13
1001276c:	e000      	b.n	10012770 <__ieee754_sqrt+0x180>
1001276e:	000b      	movs	r3, r1
10012770:	0052      	lsls	r2, r2, #1
10012772:	1c59      	adds	r1, r3, #1
10012774:	4202      	tst	r2, r0
10012776:	d0fa      	beq.n	1001276e <__ieee754_sqrt+0x17e>
10012778:	2020      	movs	r0, #32
1001277a:	1a40      	subs	r0, r0, r1
1001277c:	1aed      	subs	r5, r5, r3
1001277e:	0023      	movs	r3, r4
10012780:	40c3      	lsrs	r3, r0
10012782:	408c      	lsls	r4, r1
10012784:	431a      	orrs	r2, r3
10012786:	e74a      	b.n	1001261e <__ieee754_sqrt+0x2e>
10012788:	0002      	movs	r2, r0
1001278a:	002b      	movs	r3, r5
1001278c:	0029      	movs	r1, r5
1001278e:	f002 f80d 	bl	100147ac <__aeabi_dmul>
10012792:	0032      	movs	r2, r6
10012794:	002b      	movs	r3, r5
10012796:	f001 f8b9 	bl	1001390c <__aeabi_dadd>
1001279a:	0006      	movs	r6, r0
1001279c:	000f      	movs	r7, r1
1001279e:	e7a5      	b.n	100126ec <__ieee754_sqrt+0xfc>
100127a0:	4665      	mov	r5, ip
100127a2:	2d00      	cmp	r5, #0
100127a4:	dab9      	bge.n	1001271a <__ieee754_sqrt+0x12a>
100127a6:	e7b2      	b.n	1001270e <__ieee754_sqrt+0x11e>
100127a8:	3601      	adds	r6, #1
100127aa:	2300      	movs	r3, #0
100127ac:	e790      	b.n	100126d0 <__ieee754_sqrt+0xe0>
100127ae:	2301      	movs	r3, #1
100127b0:	2020      	movs	r0, #32
100127b2:	425b      	negs	r3, r3
100127b4:	2100      	movs	r1, #0
100127b6:	e7e1      	b.n	1001277c <__ieee754_sqrt+0x18c>
100127b8:	003b      	movs	r3, r7
100127ba:	0002      	movs	r2, r0
100127bc:	0039      	movs	r1, r7
100127be:	f002 fa6f 	bl	10014ca0 <__aeabi_dsub>
100127c2:	0002      	movs	r2, r0
100127c4:	000b      	movs	r3, r1
100127c6:	f001 fbcd 	bl	10013f64 <__aeabi_ddiv>
100127ca:	0006      	movs	r6, r0
100127cc:	000f      	movs	r7, r1
100127ce:	e78d      	b.n	100126ec <__ieee754_sqrt+0xfc>
100127d0:	7ff00000 	.word	0x7ff00000
100127d4:	fffffc01 	.word	0xfffffc01
100127d8:	3fe00000 	.word	0x3fe00000

100127dc <fabs>:
100127dc:	0049      	lsls	r1, r1, #1
100127de:	084b      	lsrs	r3, r1, #1
100127e0:	0019      	movs	r1, r3
100127e2:	4770      	bx	lr

100127e4 <finite>:
100127e4:	4b03      	ldr	r3, [pc, #12]	; (100127f4 <finite+0x10>)
100127e6:	0048      	lsls	r0, r1, #1
100127e8:	469c      	mov	ip, r3
100127ea:	0840      	lsrs	r0, r0, #1
100127ec:	4460      	add	r0, ip
100127ee:	0fc0      	lsrs	r0, r0, #31
100127f0:	4770      	bx	lr
100127f2:	46c0      	nop			; (mov r8, r8)
100127f4:	80100000 	.word	0x80100000

100127f8 <matherr>:
100127f8:	2000      	movs	r0, #0
100127fa:	4770      	bx	lr

100127fc <nan>:
100127fc:	2000      	movs	r0, #0
100127fe:	4901      	ldr	r1, [pc, #4]	; (10012804 <nan+0x8>)
10012800:	4770      	bx	lr
10012802:	46c0      	nop			; (mov r8, r8)
10012804:	7ff80000 	.word	0x7ff80000

10012808 <rint>:
10012808:	b5f0      	push	{r4, r5, r6, r7, lr}
1001280a:	4647      	mov	r7, r8
1001280c:	b480      	push	{r7}
1001280e:	0fcb      	lsrs	r3, r1, #31
10012810:	4698      	mov	r8, r3
10012812:	4c4a      	ldr	r4, [pc, #296]	; (1001293c <rint+0x134>)
10012814:	004b      	lsls	r3, r1, #1
10012816:	0d5b      	lsrs	r3, r3, #21
10012818:	191e      	adds	r6, r3, r4
1001281a:	b082      	sub	sp, #8
1001281c:	0007      	movs	r7, r0
1001281e:	000a      	movs	r2, r1
10012820:	2e13      	cmp	r6, #19
10012822:	dc35      	bgt.n	10012890 <rint+0x88>
10012824:	2e00      	cmp	r6, #0
10012826:	db57      	blt.n	100128d8 <rint+0xd0>
10012828:	4b45      	ldr	r3, [pc, #276]	; (10012940 <rint+0x138>)
1001282a:	0004      	movs	r4, r0
1001282c:	4133      	asrs	r3, r6
1001282e:	001f      	movs	r7, r3
10012830:	400f      	ands	r7, r1
10012832:	4307      	orrs	r7, r0
10012834:	000d      	movs	r5, r1
10012836:	2f00      	cmp	r7, #0
10012838:	d024      	beq.n	10012884 <rint+0x7c>
1001283a:	085b      	lsrs	r3, r3, #1
1001283c:	001c      	movs	r4, r3
1001283e:	400c      	ands	r4, r1
10012840:	4320      	orrs	r0, r4
10012842:	2700      	movs	r7, #0
10012844:	2800      	cmp	r0, #0
10012846:	d007      	beq.n	10012858 <rint+0x50>
10012848:	2e13      	cmp	r6, #19
1001284a:	d100      	bne.n	1001284e <rint+0x46>
1001284c:	e072      	b.n	10012934 <rint+0x12c>
1001284e:	2280      	movs	r2, #128	; 0x80
10012850:	02d2      	lsls	r2, r2, #11
10012852:	4132      	asrs	r2, r6
10012854:	4399      	bics	r1, r3
10012856:	430a      	orrs	r2, r1
10012858:	4643      	mov	r3, r8
1001285a:	00de      	lsls	r6, r3, #3
1001285c:	4b39      	ldr	r3, [pc, #228]	; (10012944 <rint+0x13c>)
1001285e:	0011      	movs	r1, r2
10012860:	199e      	adds	r6, r3, r6
10012862:	6834      	ldr	r4, [r6, #0]
10012864:	6875      	ldr	r5, [r6, #4]
10012866:	0038      	movs	r0, r7
10012868:	0022      	movs	r2, r4
1001286a:	002b      	movs	r3, r5
1001286c:	f001 f84e 	bl	1001390c <__aeabi_dadd>
10012870:	9000      	str	r0, [sp, #0]
10012872:	9101      	str	r1, [sp, #4]
10012874:	9800      	ldr	r0, [sp, #0]
10012876:	9901      	ldr	r1, [sp, #4]
10012878:	0022      	movs	r2, r4
1001287a:	002b      	movs	r3, r5
1001287c:	f002 fa10 	bl	10014ca0 <__aeabi_dsub>
10012880:	0004      	movs	r4, r0
10012882:	000d      	movs	r5, r1
10012884:	0020      	movs	r0, r4
10012886:	0029      	movs	r1, r5
10012888:	b002      	add	sp, #8
1001288a:	bc04      	pop	{r2}
1001288c:	4690      	mov	r8, r2
1001288e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012890:	2e33      	cmp	r6, #51	; 0x33
10012892:	dd0c      	ble.n	100128ae <rint+0xa6>
10012894:	2380      	movs	r3, #128	; 0x80
10012896:	0004      	movs	r4, r0
10012898:	000d      	movs	r5, r1
1001289a:	00db      	lsls	r3, r3, #3
1001289c:	429e      	cmp	r6, r3
1001289e:	d1f1      	bne.n	10012884 <rint+0x7c>
100128a0:	0002      	movs	r2, r0
100128a2:	000b      	movs	r3, r1
100128a4:	f001 f832 	bl	1001390c <__aeabi_dadd>
100128a8:	0004      	movs	r4, r0
100128aa:	000d      	movs	r5, r1
100128ac:	e7ea      	b.n	10012884 <rint+0x7c>
100128ae:	4c26      	ldr	r4, [pc, #152]	; (10012948 <rint+0x140>)
100128b0:	000d      	movs	r5, r1
100128b2:	46a4      	mov	ip, r4
100128b4:	2401      	movs	r4, #1
100128b6:	4463      	add	r3, ip
100128b8:	4264      	negs	r4, r4
100128ba:	40dc      	lsrs	r4, r3
100128bc:	46a4      	mov	ip, r4
100128be:	4661      	mov	r1, ip
100128c0:	0004      	movs	r4, r0
100128c2:	4201      	tst	r1, r0
100128c4:	d0de      	beq.n	10012884 <rint+0x7c>
100128c6:	0849      	lsrs	r1, r1, #1
100128c8:	4201      	tst	r1, r0
100128ca:	d0c5      	beq.n	10012858 <rint+0x50>
100128cc:	2780      	movs	r7, #128	; 0x80
100128ce:	05ff      	lsls	r7, r7, #23
100128d0:	411f      	asrs	r7, r3
100128d2:	4388      	bics	r0, r1
100128d4:	4307      	orrs	r7, r0
100128d6:	e7bf      	b.n	10012858 <rint+0x50>
100128d8:	004b      	lsls	r3, r1, #1
100128da:	085b      	lsrs	r3, r3, #1
100128dc:	4303      	orrs	r3, r0
100128de:	0004      	movs	r4, r0
100128e0:	000d      	movs	r5, r1
100128e2:	2b00      	cmp	r3, #0
100128e4:	d0ce      	beq.n	10012884 <rint+0x7c>
100128e6:	030b      	lsls	r3, r1, #12
100128e8:	0b1b      	lsrs	r3, r3, #12
100128ea:	4303      	orrs	r3, r0
100128ec:	425a      	negs	r2, r3
100128ee:	4313      	orrs	r3, r2
100128f0:	2280      	movs	r2, #128	; 0x80
100128f2:	0b1b      	lsrs	r3, r3, #12
100128f4:	0312      	lsls	r2, r2, #12
100128f6:	4013      	ands	r3, r2
100128f8:	0c4a      	lsrs	r2, r1, #17
100128fa:	0452      	lsls	r2, r2, #17
100128fc:	4313      	orrs	r3, r2
100128fe:	0019      	movs	r1, r3
10012900:	4643      	mov	r3, r8
10012902:	4a10      	ldr	r2, [pc, #64]	; (10012944 <rint+0x13c>)
10012904:	00db      	lsls	r3, r3, #3
10012906:	18d3      	adds	r3, r2, r3
10012908:	681c      	ldr	r4, [r3, #0]
1001290a:	685d      	ldr	r5, [r3, #4]
1001290c:	0022      	movs	r2, r4
1001290e:	002b      	movs	r3, r5
10012910:	f000 fffc 	bl	1001390c <__aeabi_dadd>
10012914:	9000      	str	r0, [sp, #0]
10012916:	9101      	str	r1, [sp, #4]
10012918:	9800      	ldr	r0, [sp, #0]
1001291a:	9901      	ldr	r1, [sp, #4]
1001291c:	0022      	movs	r2, r4
1001291e:	002b      	movs	r3, r5
10012920:	f002 f9be 	bl	10014ca0 <__aeabi_dsub>
10012924:	4642      	mov	r2, r8
10012926:	004b      	lsls	r3, r1, #1
10012928:	085b      	lsrs	r3, r3, #1
1001292a:	07d6      	lsls	r6, r2, #31
1001292c:	4333      	orrs	r3, r6
1001292e:	0004      	movs	r4, r0
10012930:	001d      	movs	r5, r3
10012932:	e7a7      	b.n	10012884 <rint+0x7c>
10012934:	2780      	movs	r7, #128	; 0x80
10012936:	063f      	lsls	r7, r7, #24
10012938:	e789      	b.n	1001284e <rint+0x46>
1001293a:	46c0      	nop			; (mov r8, r8)
1001293c:	fffffc01 	.word	0xfffffc01
10012940:	000fffff 	.word	0x000fffff
10012944:	10018328 	.word	0x10018328
10012948:	fffffbed 	.word	0xfffffbed

1001294c <scalbn>:
1001294c:	004b      	lsls	r3, r1, #1
1001294e:	b570      	push	{r4, r5, r6, lr}
10012950:	0d5b      	lsrs	r3, r3, #21
10012952:	0014      	movs	r4, r2
10012954:	000a      	movs	r2, r1
10012956:	2b00      	cmp	r3, #0
10012958:	d11a      	bne.n	10012990 <scalbn+0x44>
1001295a:	004b      	lsls	r3, r1, #1
1001295c:	085b      	lsrs	r3, r3, #1
1001295e:	4303      	orrs	r3, r0
10012960:	d015      	beq.n	1001298e <scalbn+0x42>
10012962:	2200      	movs	r2, #0
10012964:	4b22      	ldr	r3, [pc, #136]	; (100129f0 <scalbn+0xa4>)
10012966:	f001 ff21 	bl	100147ac <__aeabi_dmul>
1001296a:	4b22      	ldr	r3, [pc, #136]	; (100129f4 <scalbn+0xa8>)
1001296c:	000a      	movs	r2, r1
1001296e:	429c      	cmp	r4, r3
10012970:	db22      	blt.n	100129b8 <scalbn+0x6c>
10012972:	004b      	lsls	r3, r1, #1
10012974:	0d5b      	lsrs	r3, r3, #21
10012976:	3b36      	subs	r3, #54	; 0x36
10012978:	4d1f      	ldr	r5, [pc, #124]	; (100129f8 <scalbn+0xac>)
1001297a:	18e3      	adds	r3, r4, r3
1001297c:	42ab      	cmp	r3, r5
1001297e:	dc20      	bgt.n	100129c2 <scalbn+0x76>
10012980:	2b00      	cmp	r3, #0
10012982:	dd0d      	ble.n	100129a0 <scalbn+0x54>
10012984:	4c1d      	ldr	r4, [pc, #116]	; (100129fc <scalbn+0xb0>)
10012986:	051b      	lsls	r3, r3, #20
10012988:	4022      	ands	r2, r4
1001298a:	431a      	orrs	r2, r3
1001298c:	0011      	movs	r1, r2
1001298e:	bd70      	pop	{r4, r5, r6, pc}
10012990:	4d1b      	ldr	r5, [pc, #108]	; (10012a00 <scalbn+0xb4>)
10012992:	42ab      	cmp	r3, r5
10012994:	d1f0      	bne.n	10012978 <scalbn+0x2c>
10012996:	0002      	movs	r2, r0
10012998:	000b      	movs	r3, r1
1001299a:	f000 ffb7 	bl	1001390c <__aeabi_dadd>
1001299e:	e7f6      	b.n	1001298e <scalbn+0x42>
100129a0:	001d      	movs	r5, r3
100129a2:	3535      	adds	r5, #53	; 0x35
100129a4:	da18      	bge.n	100129d8 <scalbn+0x8c>
100129a6:	4b17      	ldr	r3, [pc, #92]	; (10012a04 <scalbn+0xb8>)
100129a8:	0002      	movs	r2, r0
100129aa:	429c      	cmp	r4, r3
100129ac:	dc0a      	bgt.n	100129c4 <scalbn+0x78>
100129ae:	000b      	movs	r3, r1
100129b0:	4815      	ldr	r0, [pc, #84]	; (10012a08 <scalbn+0xbc>)
100129b2:	4916      	ldr	r1, [pc, #88]	; (10012a0c <scalbn+0xc0>)
100129b4:	f000 f832 	bl	10012a1c <copysign>
100129b8:	4a13      	ldr	r2, [pc, #76]	; (10012a08 <scalbn+0xbc>)
100129ba:	4b14      	ldr	r3, [pc, #80]	; (10012a0c <scalbn+0xc0>)
100129bc:	f001 fef6 	bl	100147ac <__aeabi_dmul>
100129c0:	e7e5      	b.n	1001298e <scalbn+0x42>
100129c2:	0002      	movs	r2, r0
100129c4:	000b      	movs	r3, r1
100129c6:	4812      	ldr	r0, [pc, #72]	; (10012a10 <scalbn+0xc4>)
100129c8:	4912      	ldr	r1, [pc, #72]	; (10012a14 <scalbn+0xc8>)
100129ca:	f000 f827 	bl	10012a1c <copysign>
100129ce:	4a10      	ldr	r2, [pc, #64]	; (10012a10 <scalbn+0xc4>)
100129d0:	4b10      	ldr	r3, [pc, #64]	; (10012a14 <scalbn+0xc8>)
100129d2:	f001 feeb 	bl	100147ac <__aeabi_dmul>
100129d6:	e7da      	b.n	1001298e <scalbn+0x42>
100129d8:	4c08      	ldr	r4, [pc, #32]	; (100129fc <scalbn+0xb0>)
100129da:	3336      	adds	r3, #54	; 0x36
100129dc:	4022      	ands	r2, r4
100129de:	051b      	lsls	r3, r3, #20
100129e0:	4313      	orrs	r3, r2
100129e2:	0019      	movs	r1, r3
100129e4:	2200      	movs	r2, #0
100129e6:	4b0c      	ldr	r3, [pc, #48]	; (10012a18 <scalbn+0xcc>)
100129e8:	f001 fee0 	bl	100147ac <__aeabi_dmul>
100129ec:	e7cf      	b.n	1001298e <scalbn+0x42>
100129ee:	46c0      	nop			; (mov r8, r8)
100129f0:	43500000 	.word	0x43500000
100129f4:	ffff3cb0 	.word	0xffff3cb0
100129f8:	000007fe 	.word	0x000007fe
100129fc:	800fffff 	.word	0x800fffff
10012a00:	000007ff 	.word	0x000007ff
10012a04:	0000c350 	.word	0x0000c350
10012a08:	c2f8f359 	.word	0xc2f8f359
10012a0c:	01a56e1f 	.word	0x01a56e1f
10012a10:	8800759c 	.word	0x8800759c
10012a14:	7e37e43c 	.word	0x7e37e43c
10012a18:	3c900000 	.word	0x3c900000

10012a1c <copysign>:
10012a1c:	b530      	push	{r4, r5, lr}
10012a1e:	004a      	lsls	r2, r1, #1
10012a20:	0fdb      	lsrs	r3, r3, #31
10012a22:	07db      	lsls	r3, r3, #31
10012a24:	0852      	lsrs	r2, r2, #1
10012a26:	431a      	orrs	r2, r3
10012a28:	0011      	movs	r1, r2
10012a2a:	bd30      	pop	{r4, r5, pc}

10012a2c <__gnu_thumb1_case_sqi>:
10012a2c:	b402      	push	{r1}
10012a2e:	4671      	mov	r1, lr
10012a30:	0849      	lsrs	r1, r1, #1
10012a32:	0049      	lsls	r1, r1, #1
10012a34:	5609      	ldrsb	r1, [r1, r0]
10012a36:	0049      	lsls	r1, r1, #1
10012a38:	448e      	add	lr, r1
10012a3a:	bc02      	pop	{r1}
10012a3c:	4770      	bx	lr
10012a3e:	46c0      	nop			; (mov r8, r8)

10012a40 <__gnu_thumb1_case_uqi>:
10012a40:	b402      	push	{r1}
10012a42:	4671      	mov	r1, lr
10012a44:	0849      	lsrs	r1, r1, #1
10012a46:	0049      	lsls	r1, r1, #1
10012a48:	5c09      	ldrb	r1, [r1, r0]
10012a4a:	0049      	lsls	r1, r1, #1
10012a4c:	448e      	add	lr, r1
10012a4e:	bc02      	pop	{r1}
10012a50:	4770      	bx	lr
10012a52:	46c0      	nop			; (mov r8, r8)

10012a54 <__aeabi_uidiv>:
10012a54:	2200      	movs	r2, #0
10012a56:	0843      	lsrs	r3, r0, #1
10012a58:	428b      	cmp	r3, r1
10012a5a:	d374      	bcc.n	10012b46 <__aeabi_uidiv+0xf2>
10012a5c:	0903      	lsrs	r3, r0, #4
10012a5e:	428b      	cmp	r3, r1
10012a60:	d35f      	bcc.n	10012b22 <__aeabi_uidiv+0xce>
10012a62:	0a03      	lsrs	r3, r0, #8
10012a64:	428b      	cmp	r3, r1
10012a66:	d344      	bcc.n	10012af2 <__aeabi_uidiv+0x9e>
10012a68:	0b03      	lsrs	r3, r0, #12
10012a6a:	428b      	cmp	r3, r1
10012a6c:	d328      	bcc.n	10012ac0 <__aeabi_uidiv+0x6c>
10012a6e:	0c03      	lsrs	r3, r0, #16
10012a70:	428b      	cmp	r3, r1
10012a72:	d30d      	bcc.n	10012a90 <__aeabi_uidiv+0x3c>
10012a74:	22ff      	movs	r2, #255	; 0xff
10012a76:	0209      	lsls	r1, r1, #8
10012a78:	ba12      	rev	r2, r2
10012a7a:	0c03      	lsrs	r3, r0, #16
10012a7c:	428b      	cmp	r3, r1
10012a7e:	d302      	bcc.n	10012a86 <__aeabi_uidiv+0x32>
10012a80:	1212      	asrs	r2, r2, #8
10012a82:	0209      	lsls	r1, r1, #8
10012a84:	d065      	beq.n	10012b52 <__aeabi_uidiv+0xfe>
10012a86:	0b03      	lsrs	r3, r0, #12
10012a88:	428b      	cmp	r3, r1
10012a8a:	d319      	bcc.n	10012ac0 <__aeabi_uidiv+0x6c>
10012a8c:	e000      	b.n	10012a90 <__aeabi_uidiv+0x3c>
10012a8e:	0a09      	lsrs	r1, r1, #8
10012a90:	0bc3      	lsrs	r3, r0, #15
10012a92:	428b      	cmp	r3, r1
10012a94:	d301      	bcc.n	10012a9a <__aeabi_uidiv+0x46>
10012a96:	03cb      	lsls	r3, r1, #15
10012a98:	1ac0      	subs	r0, r0, r3
10012a9a:	4152      	adcs	r2, r2
10012a9c:	0b83      	lsrs	r3, r0, #14
10012a9e:	428b      	cmp	r3, r1
10012aa0:	d301      	bcc.n	10012aa6 <__aeabi_uidiv+0x52>
10012aa2:	038b      	lsls	r3, r1, #14
10012aa4:	1ac0      	subs	r0, r0, r3
10012aa6:	4152      	adcs	r2, r2
10012aa8:	0b43      	lsrs	r3, r0, #13
10012aaa:	428b      	cmp	r3, r1
10012aac:	d301      	bcc.n	10012ab2 <__aeabi_uidiv+0x5e>
10012aae:	034b      	lsls	r3, r1, #13
10012ab0:	1ac0      	subs	r0, r0, r3
10012ab2:	4152      	adcs	r2, r2
10012ab4:	0b03      	lsrs	r3, r0, #12
10012ab6:	428b      	cmp	r3, r1
10012ab8:	d301      	bcc.n	10012abe <__aeabi_uidiv+0x6a>
10012aba:	030b      	lsls	r3, r1, #12
10012abc:	1ac0      	subs	r0, r0, r3
10012abe:	4152      	adcs	r2, r2
10012ac0:	0ac3      	lsrs	r3, r0, #11
10012ac2:	428b      	cmp	r3, r1
10012ac4:	d301      	bcc.n	10012aca <__aeabi_uidiv+0x76>
10012ac6:	02cb      	lsls	r3, r1, #11
10012ac8:	1ac0      	subs	r0, r0, r3
10012aca:	4152      	adcs	r2, r2
10012acc:	0a83      	lsrs	r3, r0, #10
10012ace:	428b      	cmp	r3, r1
10012ad0:	d301      	bcc.n	10012ad6 <__aeabi_uidiv+0x82>
10012ad2:	028b      	lsls	r3, r1, #10
10012ad4:	1ac0      	subs	r0, r0, r3
10012ad6:	4152      	adcs	r2, r2
10012ad8:	0a43      	lsrs	r3, r0, #9
10012ada:	428b      	cmp	r3, r1
10012adc:	d301      	bcc.n	10012ae2 <__aeabi_uidiv+0x8e>
10012ade:	024b      	lsls	r3, r1, #9
10012ae0:	1ac0      	subs	r0, r0, r3
10012ae2:	4152      	adcs	r2, r2
10012ae4:	0a03      	lsrs	r3, r0, #8
10012ae6:	428b      	cmp	r3, r1
10012ae8:	d301      	bcc.n	10012aee <__aeabi_uidiv+0x9a>
10012aea:	020b      	lsls	r3, r1, #8
10012aec:	1ac0      	subs	r0, r0, r3
10012aee:	4152      	adcs	r2, r2
10012af0:	d2cd      	bcs.n	10012a8e <__aeabi_uidiv+0x3a>
10012af2:	09c3      	lsrs	r3, r0, #7
10012af4:	428b      	cmp	r3, r1
10012af6:	d301      	bcc.n	10012afc <__aeabi_uidiv+0xa8>
10012af8:	01cb      	lsls	r3, r1, #7
10012afa:	1ac0      	subs	r0, r0, r3
10012afc:	4152      	adcs	r2, r2
10012afe:	0983      	lsrs	r3, r0, #6
10012b00:	428b      	cmp	r3, r1
10012b02:	d301      	bcc.n	10012b08 <__aeabi_uidiv+0xb4>
10012b04:	018b      	lsls	r3, r1, #6
10012b06:	1ac0      	subs	r0, r0, r3
10012b08:	4152      	adcs	r2, r2
10012b0a:	0943      	lsrs	r3, r0, #5
10012b0c:	428b      	cmp	r3, r1
10012b0e:	d301      	bcc.n	10012b14 <__aeabi_uidiv+0xc0>
10012b10:	014b      	lsls	r3, r1, #5
10012b12:	1ac0      	subs	r0, r0, r3
10012b14:	4152      	adcs	r2, r2
10012b16:	0903      	lsrs	r3, r0, #4
10012b18:	428b      	cmp	r3, r1
10012b1a:	d301      	bcc.n	10012b20 <__aeabi_uidiv+0xcc>
10012b1c:	010b      	lsls	r3, r1, #4
10012b1e:	1ac0      	subs	r0, r0, r3
10012b20:	4152      	adcs	r2, r2
10012b22:	08c3      	lsrs	r3, r0, #3
10012b24:	428b      	cmp	r3, r1
10012b26:	d301      	bcc.n	10012b2c <__aeabi_uidiv+0xd8>
10012b28:	00cb      	lsls	r3, r1, #3
10012b2a:	1ac0      	subs	r0, r0, r3
10012b2c:	4152      	adcs	r2, r2
10012b2e:	0883      	lsrs	r3, r0, #2
10012b30:	428b      	cmp	r3, r1
10012b32:	d301      	bcc.n	10012b38 <__aeabi_uidiv+0xe4>
10012b34:	008b      	lsls	r3, r1, #2
10012b36:	1ac0      	subs	r0, r0, r3
10012b38:	4152      	adcs	r2, r2
10012b3a:	0843      	lsrs	r3, r0, #1
10012b3c:	428b      	cmp	r3, r1
10012b3e:	d301      	bcc.n	10012b44 <__aeabi_uidiv+0xf0>
10012b40:	004b      	lsls	r3, r1, #1
10012b42:	1ac0      	subs	r0, r0, r3
10012b44:	4152      	adcs	r2, r2
10012b46:	1a41      	subs	r1, r0, r1
10012b48:	d200      	bcs.n	10012b4c <__aeabi_uidiv+0xf8>
10012b4a:	4601      	mov	r1, r0
10012b4c:	4152      	adcs	r2, r2
10012b4e:	4610      	mov	r0, r2
10012b50:	4770      	bx	lr
10012b52:	e7ff      	b.n	10012b54 <__aeabi_uidiv+0x100>
10012b54:	b501      	push	{r0, lr}
10012b56:	2000      	movs	r0, #0
10012b58:	f000 f8f0 	bl	10012d3c <__aeabi_idiv0>
10012b5c:	bd02      	pop	{r1, pc}
10012b5e:	46c0      	nop			; (mov r8, r8)

10012b60 <__aeabi_uidivmod>:
10012b60:	2900      	cmp	r1, #0
10012b62:	d0f7      	beq.n	10012b54 <__aeabi_uidiv+0x100>
10012b64:	e776      	b.n	10012a54 <__aeabi_uidiv>
10012b66:	4770      	bx	lr

10012b68 <__aeabi_idiv>:
10012b68:	4603      	mov	r3, r0
10012b6a:	430b      	orrs	r3, r1
10012b6c:	d47f      	bmi.n	10012c6e <__aeabi_idiv+0x106>
10012b6e:	2200      	movs	r2, #0
10012b70:	0843      	lsrs	r3, r0, #1
10012b72:	428b      	cmp	r3, r1
10012b74:	d374      	bcc.n	10012c60 <__aeabi_idiv+0xf8>
10012b76:	0903      	lsrs	r3, r0, #4
10012b78:	428b      	cmp	r3, r1
10012b7a:	d35f      	bcc.n	10012c3c <__aeabi_idiv+0xd4>
10012b7c:	0a03      	lsrs	r3, r0, #8
10012b7e:	428b      	cmp	r3, r1
10012b80:	d344      	bcc.n	10012c0c <__aeabi_idiv+0xa4>
10012b82:	0b03      	lsrs	r3, r0, #12
10012b84:	428b      	cmp	r3, r1
10012b86:	d328      	bcc.n	10012bda <__aeabi_idiv+0x72>
10012b88:	0c03      	lsrs	r3, r0, #16
10012b8a:	428b      	cmp	r3, r1
10012b8c:	d30d      	bcc.n	10012baa <__aeabi_idiv+0x42>
10012b8e:	22ff      	movs	r2, #255	; 0xff
10012b90:	0209      	lsls	r1, r1, #8
10012b92:	ba12      	rev	r2, r2
10012b94:	0c03      	lsrs	r3, r0, #16
10012b96:	428b      	cmp	r3, r1
10012b98:	d302      	bcc.n	10012ba0 <__aeabi_idiv+0x38>
10012b9a:	1212      	asrs	r2, r2, #8
10012b9c:	0209      	lsls	r1, r1, #8
10012b9e:	d065      	beq.n	10012c6c <__aeabi_idiv+0x104>
10012ba0:	0b03      	lsrs	r3, r0, #12
10012ba2:	428b      	cmp	r3, r1
10012ba4:	d319      	bcc.n	10012bda <__aeabi_idiv+0x72>
10012ba6:	e000      	b.n	10012baa <__aeabi_idiv+0x42>
10012ba8:	0a09      	lsrs	r1, r1, #8
10012baa:	0bc3      	lsrs	r3, r0, #15
10012bac:	428b      	cmp	r3, r1
10012bae:	d301      	bcc.n	10012bb4 <__aeabi_idiv+0x4c>
10012bb0:	03cb      	lsls	r3, r1, #15
10012bb2:	1ac0      	subs	r0, r0, r3
10012bb4:	4152      	adcs	r2, r2
10012bb6:	0b83      	lsrs	r3, r0, #14
10012bb8:	428b      	cmp	r3, r1
10012bba:	d301      	bcc.n	10012bc0 <__aeabi_idiv+0x58>
10012bbc:	038b      	lsls	r3, r1, #14
10012bbe:	1ac0      	subs	r0, r0, r3
10012bc0:	4152      	adcs	r2, r2
10012bc2:	0b43      	lsrs	r3, r0, #13
10012bc4:	428b      	cmp	r3, r1
10012bc6:	d301      	bcc.n	10012bcc <__aeabi_idiv+0x64>
10012bc8:	034b      	lsls	r3, r1, #13
10012bca:	1ac0      	subs	r0, r0, r3
10012bcc:	4152      	adcs	r2, r2
10012bce:	0b03      	lsrs	r3, r0, #12
10012bd0:	428b      	cmp	r3, r1
10012bd2:	d301      	bcc.n	10012bd8 <__aeabi_idiv+0x70>
10012bd4:	030b      	lsls	r3, r1, #12
10012bd6:	1ac0      	subs	r0, r0, r3
10012bd8:	4152      	adcs	r2, r2
10012bda:	0ac3      	lsrs	r3, r0, #11
10012bdc:	428b      	cmp	r3, r1
10012bde:	d301      	bcc.n	10012be4 <__aeabi_idiv+0x7c>
10012be0:	02cb      	lsls	r3, r1, #11
10012be2:	1ac0      	subs	r0, r0, r3
10012be4:	4152      	adcs	r2, r2
10012be6:	0a83      	lsrs	r3, r0, #10
10012be8:	428b      	cmp	r3, r1
10012bea:	d301      	bcc.n	10012bf0 <__aeabi_idiv+0x88>
10012bec:	028b      	lsls	r3, r1, #10
10012bee:	1ac0      	subs	r0, r0, r3
10012bf0:	4152      	adcs	r2, r2
10012bf2:	0a43      	lsrs	r3, r0, #9
10012bf4:	428b      	cmp	r3, r1
10012bf6:	d301      	bcc.n	10012bfc <__aeabi_idiv+0x94>
10012bf8:	024b      	lsls	r3, r1, #9
10012bfa:	1ac0      	subs	r0, r0, r3
10012bfc:	4152      	adcs	r2, r2
10012bfe:	0a03      	lsrs	r3, r0, #8
10012c00:	428b      	cmp	r3, r1
10012c02:	d301      	bcc.n	10012c08 <__aeabi_idiv+0xa0>
10012c04:	020b      	lsls	r3, r1, #8
10012c06:	1ac0      	subs	r0, r0, r3
10012c08:	4152      	adcs	r2, r2
10012c0a:	d2cd      	bcs.n	10012ba8 <__aeabi_idiv+0x40>
10012c0c:	09c3      	lsrs	r3, r0, #7
10012c0e:	428b      	cmp	r3, r1
10012c10:	d301      	bcc.n	10012c16 <__aeabi_idiv+0xae>
10012c12:	01cb      	lsls	r3, r1, #7
10012c14:	1ac0      	subs	r0, r0, r3
10012c16:	4152      	adcs	r2, r2
10012c18:	0983      	lsrs	r3, r0, #6
10012c1a:	428b      	cmp	r3, r1
10012c1c:	d301      	bcc.n	10012c22 <__aeabi_idiv+0xba>
10012c1e:	018b      	lsls	r3, r1, #6
10012c20:	1ac0      	subs	r0, r0, r3
10012c22:	4152      	adcs	r2, r2
10012c24:	0943      	lsrs	r3, r0, #5
10012c26:	428b      	cmp	r3, r1
10012c28:	d301      	bcc.n	10012c2e <__aeabi_idiv+0xc6>
10012c2a:	014b      	lsls	r3, r1, #5
10012c2c:	1ac0      	subs	r0, r0, r3
10012c2e:	4152      	adcs	r2, r2
10012c30:	0903      	lsrs	r3, r0, #4
10012c32:	428b      	cmp	r3, r1
10012c34:	d301      	bcc.n	10012c3a <__aeabi_idiv+0xd2>
10012c36:	010b      	lsls	r3, r1, #4
10012c38:	1ac0      	subs	r0, r0, r3
10012c3a:	4152      	adcs	r2, r2
10012c3c:	08c3      	lsrs	r3, r0, #3
10012c3e:	428b      	cmp	r3, r1
10012c40:	d301      	bcc.n	10012c46 <__aeabi_idiv+0xde>
10012c42:	00cb      	lsls	r3, r1, #3
10012c44:	1ac0      	subs	r0, r0, r3
10012c46:	4152      	adcs	r2, r2
10012c48:	0883      	lsrs	r3, r0, #2
10012c4a:	428b      	cmp	r3, r1
10012c4c:	d301      	bcc.n	10012c52 <__aeabi_idiv+0xea>
10012c4e:	008b      	lsls	r3, r1, #2
10012c50:	1ac0      	subs	r0, r0, r3
10012c52:	4152      	adcs	r2, r2
10012c54:	0843      	lsrs	r3, r0, #1
10012c56:	428b      	cmp	r3, r1
10012c58:	d301      	bcc.n	10012c5e <__aeabi_idiv+0xf6>
10012c5a:	004b      	lsls	r3, r1, #1
10012c5c:	1ac0      	subs	r0, r0, r3
10012c5e:	4152      	adcs	r2, r2
10012c60:	1a41      	subs	r1, r0, r1
10012c62:	d200      	bcs.n	10012c66 <__aeabi_idiv+0xfe>
10012c64:	4601      	mov	r1, r0
10012c66:	4152      	adcs	r2, r2
10012c68:	4610      	mov	r0, r2
10012c6a:	4770      	bx	lr
10012c6c:	e05d      	b.n	10012d2a <__aeabi_idiv+0x1c2>
10012c6e:	0fca      	lsrs	r2, r1, #31
10012c70:	d000      	beq.n	10012c74 <__aeabi_idiv+0x10c>
10012c72:	4249      	negs	r1, r1
10012c74:	1003      	asrs	r3, r0, #32
10012c76:	d300      	bcc.n	10012c7a <__aeabi_idiv+0x112>
10012c78:	4240      	negs	r0, r0
10012c7a:	4053      	eors	r3, r2
10012c7c:	2200      	movs	r2, #0
10012c7e:	469c      	mov	ip, r3
10012c80:	0903      	lsrs	r3, r0, #4
10012c82:	428b      	cmp	r3, r1
10012c84:	d32d      	bcc.n	10012ce2 <__aeabi_idiv+0x17a>
10012c86:	0a03      	lsrs	r3, r0, #8
10012c88:	428b      	cmp	r3, r1
10012c8a:	d312      	bcc.n	10012cb2 <__aeabi_idiv+0x14a>
10012c8c:	22fc      	movs	r2, #252	; 0xfc
10012c8e:	0189      	lsls	r1, r1, #6
10012c90:	ba12      	rev	r2, r2
10012c92:	0a03      	lsrs	r3, r0, #8
10012c94:	428b      	cmp	r3, r1
10012c96:	d30c      	bcc.n	10012cb2 <__aeabi_idiv+0x14a>
10012c98:	0189      	lsls	r1, r1, #6
10012c9a:	1192      	asrs	r2, r2, #6
10012c9c:	428b      	cmp	r3, r1
10012c9e:	d308      	bcc.n	10012cb2 <__aeabi_idiv+0x14a>
10012ca0:	0189      	lsls	r1, r1, #6
10012ca2:	1192      	asrs	r2, r2, #6
10012ca4:	428b      	cmp	r3, r1
10012ca6:	d304      	bcc.n	10012cb2 <__aeabi_idiv+0x14a>
10012ca8:	0189      	lsls	r1, r1, #6
10012caa:	d03a      	beq.n	10012d22 <__aeabi_idiv+0x1ba>
10012cac:	1192      	asrs	r2, r2, #6
10012cae:	e000      	b.n	10012cb2 <__aeabi_idiv+0x14a>
10012cb0:	0989      	lsrs	r1, r1, #6
10012cb2:	09c3      	lsrs	r3, r0, #7
10012cb4:	428b      	cmp	r3, r1
10012cb6:	d301      	bcc.n	10012cbc <__aeabi_idiv+0x154>
10012cb8:	01cb      	lsls	r3, r1, #7
10012cba:	1ac0      	subs	r0, r0, r3
10012cbc:	4152      	adcs	r2, r2
10012cbe:	0983      	lsrs	r3, r0, #6
10012cc0:	428b      	cmp	r3, r1
10012cc2:	d301      	bcc.n	10012cc8 <__aeabi_idiv+0x160>
10012cc4:	018b      	lsls	r3, r1, #6
10012cc6:	1ac0      	subs	r0, r0, r3
10012cc8:	4152      	adcs	r2, r2
10012cca:	0943      	lsrs	r3, r0, #5
10012ccc:	428b      	cmp	r3, r1
10012cce:	d301      	bcc.n	10012cd4 <__aeabi_idiv+0x16c>
10012cd0:	014b      	lsls	r3, r1, #5
10012cd2:	1ac0      	subs	r0, r0, r3
10012cd4:	4152      	adcs	r2, r2
10012cd6:	0903      	lsrs	r3, r0, #4
10012cd8:	428b      	cmp	r3, r1
10012cda:	d301      	bcc.n	10012ce0 <__aeabi_idiv+0x178>
10012cdc:	010b      	lsls	r3, r1, #4
10012cde:	1ac0      	subs	r0, r0, r3
10012ce0:	4152      	adcs	r2, r2
10012ce2:	08c3      	lsrs	r3, r0, #3
10012ce4:	428b      	cmp	r3, r1
10012ce6:	d301      	bcc.n	10012cec <__aeabi_idiv+0x184>
10012ce8:	00cb      	lsls	r3, r1, #3
10012cea:	1ac0      	subs	r0, r0, r3
10012cec:	4152      	adcs	r2, r2
10012cee:	0883      	lsrs	r3, r0, #2
10012cf0:	428b      	cmp	r3, r1
10012cf2:	d301      	bcc.n	10012cf8 <__aeabi_idiv+0x190>
10012cf4:	008b      	lsls	r3, r1, #2
10012cf6:	1ac0      	subs	r0, r0, r3
10012cf8:	4152      	adcs	r2, r2
10012cfa:	d2d9      	bcs.n	10012cb0 <__aeabi_idiv+0x148>
10012cfc:	0843      	lsrs	r3, r0, #1
10012cfe:	428b      	cmp	r3, r1
10012d00:	d301      	bcc.n	10012d06 <__aeabi_idiv+0x19e>
10012d02:	004b      	lsls	r3, r1, #1
10012d04:	1ac0      	subs	r0, r0, r3
10012d06:	4152      	adcs	r2, r2
10012d08:	1a41      	subs	r1, r0, r1
10012d0a:	d200      	bcs.n	10012d0e <__aeabi_idiv+0x1a6>
10012d0c:	4601      	mov	r1, r0
10012d0e:	4663      	mov	r3, ip
10012d10:	4152      	adcs	r2, r2
10012d12:	105b      	asrs	r3, r3, #1
10012d14:	4610      	mov	r0, r2
10012d16:	d301      	bcc.n	10012d1c <__aeabi_idiv+0x1b4>
10012d18:	4240      	negs	r0, r0
10012d1a:	2b00      	cmp	r3, #0
10012d1c:	d500      	bpl.n	10012d20 <__aeabi_idiv+0x1b8>
10012d1e:	4249      	negs	r1, r1
10012d20:	4770      	bx	lr
10012d22:	4663      	mov	r3, ip
10012d24:	105b      	asrs	r3, r3, #1
10012d26:	d300      	bcc.n	10012d2a <__aeabi_idiv+0x1c2>
10012d28:	4240      	negs	r0, r0
10012d2a:	b501      	push	{r0, lr}
10012d2c:	2000      	movs	r0, #0
10012d2e:	f000 f805 	bl	10012d3c <__aeabi_idiv0>
10012d32:	bd02      	pop	{r1, pc}

10012d34 <__aeabi_idivmod>:
10012d34:	2900      	cmp	r1, #0
10012d36:	d0f8      	beq.n	10012d2a <__aeabi_idiv+0x1c2>
10012d38:	e716      	b.n	10012b68 <__aeabi_idiv>
10012d3a:	4770      	bx	lr

10012d3c <__aeabi_idiv0>:
10012d3c:	4770      	bx	lr
10012d3e:	46c0      	nop			; (mov r8, r8)

10012d40 <__aeabi_cdrcmple>:
10012d40:	4684      	mov	ip, r0
10012d42:	1c10      	adds	r0, r2, #0
10012d44:	4662      	mov	r2, ip
10012d46:	468c      	mov	ip, r1
10012d48:	1c19      	adds	r1, r3, #0
10012d4a:	4663      	mov	r3, ip
10012d4c:	e000      	b.n	10012d50 <__aeabi_cdcmpeq>
10012d4e:	46c0      	nop			; (mov r8, r8)

10012d50 <__aeabi_cdcmpeq>:
10012d50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10012d52:	f001 fcc1 	bl	100146d8 <__ledf2>
10012d56:	2800      	cmp	r0, #0
10012d58:	d401      	bmi.n	10012d5e <__aeabi_cdcmpeq+0xe>
10012d5a:	2100      	movs	r1, #0
10012d5c:	42c8      	cmn	r0, r1
10012d5e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10012d60 <__aeabi_dcmpeq>:
10012d60:	b510      	push	{r4, lr}
10012d62:	f001 fc15 	bl	10014590 <__eqdf2>
10012d66:	4240      	negs	r0, r0
10012d68:	3001      	adds	r0, #1
10012d6a:	bd10      	pop	{r4, pc}

10012d6c <__aeabi_dcmplt>:
10012d6c:	b510      	push	{r4, lr}
10012d6e:	f001 fcb3 	bl	100146d8 <__ledf2>
10012d72:	2800      	cmp	r0, #0
10012d74:	db01      	blt.n	10012d7a <__aeabi_dcmplt+0xe>
10012d76:	2000      	movs	r0, #0
10012d78:	bd10      	pop	{r4, pc}
10012d7a:	2001      	movs	r0, #1
10012d7c:	bd10      	pop	{r4, pc}
10012d7e:	46c0      	nop			; (mov r8, r8)

10012d80 <__aeabi_dcmple>:
10012d80:	b510      	push	{r4, lr}
10012d82:	f001 fca9 	bl	100146d8 <__ledf2>
10012d86:	2800      	cmp	r0, #0
10012d88:	dd01      	ble.n	10012d8e <__aeabi_dcmple+0xe>
10012d8a:	2000      	movs	r0, #0
10012d8c:	bd10      	pop	{r4, pc}
10012d8e:	2001      	movs	r0, #1
10012d90:	bd10      	pop	{r4, pc}
10012d92:	46c0      	nop			; (mov r8, r8)

10012d94 <__aeabi_dcmpgt>:
10012d94:	b510      	push	{r4, lr}
10012d96:	f001 fc3b 	bl	10014610 <__gedf2>
10012d9a:	2800      	cmp	r0, #0
10012d9c:	dc01      	bgt.n	10012da2 <__aeabi_dcmpgt+0xe>
10012d9e:	2000      	movs	r0, #0
10012da0:	bd10      	pop	{r4, pc}
10012da2:	2001      	movs	r0, #1
10012da4:	bd10      	pop	{r4, pc}
10012da6:	46c0      	nop			; (mov r8, r8)

10012da8 <__aeabi_dcmpge>:
10012da8:	b510      	push	{r4, lr}
10012daa:	f001 fc31 	bl	10014610 <__gedf2>
10012dae:	2800      	cmp	r0, #0
10012db0:	da01      	bge.n	10012db6 <__aeabi_dcmpge+0xe>
10012db2:	2000      	movs	r0, #0
10012db4:	bd10      	pop	{r4, pc}
10012db6:	2001      	movs	r0, #1
10012db8:	bd10      	pop	{r4, pc}
10012dba:	46c0      	nop			; (mov r8, r8)

10012dbc <__aeabi_cfrcmple>:
10012dbc:	4684      	mov	ip, r0
10012dbe:	1c08      	adds	r0, r1, #0
10012dc0:	4661      	mov	r1, ip
10012dc2:	e7ff      	b.n	10012dc4 <__aeabi_cfcmpeq>

10012dc4 <__aeabi_cfcmpeq>:
10012dc4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10012dc6:	f000 fa1b 	bl	10013200 <__lesf2>
10012dca:	2800      	cmp	r0, #0
10012dcc:	d401      	bmi.n	10012dd2 <__aeabi_cfcmpeq+0xe>
10012dce:	2100      	movs	r1, #0
10012dd0:	42c8      	cmn	r0, r1
10012dd2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10012dd4 <__aeabi_fcmpeq>:
10012dd4:	b510      	push	{r4, lr}
10012dd6:	f000 f9a7 	bl	10013128 <__eqsf2>
10012dda:	4240      	negs	r0, r0
10012ddc:	3001      	adds	r0, #1
10012dde:	bd10      	pop	{r4, pc}

10012de0 <__aeabi_fcmplt>:
10012de0:	b510      	push	{r4, lr}
10012de2:	f000 fa0d 	bl	10013200 <__lesf2>
10012de6:	2800      	cmp	r0, #0
10012de8:	db01      	blt.n	10012dee <__aeabi_fcmplt+0xe>
10012dea:	2000      	movs	r0, #0
10012dec:	bd10      	pop	{r4, pc}
10012dee:	2001      	movs	r0, #1
10012df0:	bd10      	pop	{r4, pc}
10012df2:	46c0      	nop			; (mov r8, r8)

10012df4 <__aeabi_fcmple>:
10012df4:	b510      	push	{r4, lr}
10012df6:	f000 fa03 	bl	10013200 <__lesf2>
10012dfa:	2800      	cmp	r0, #0
10012dfc:	dd01      	ble.n	10012e02 <__aeabi_fcmple+0xe>
10012dfe:	2000      	movs	r0, #0
10012e00:	bd10      	pop	{r4, pc}
10012e02:	2001      	movs	r0, #1
10012e04:	bd10      	pop	{r4, pc}
10012e06:	46c0      	nop			; (mov r8, r8)

10012e08 <__aeabi_fcmpgt>:
10012e08:	b510      	push	{r4, lr}
10012e0a:	f000 f9b5 	bl	10013178 <__gesf2>
10012e0e:	2800      	cmp	r0, #0
10012e10:	dc01      	bgt.n	10012e16 <__aeabi_fcmpgt+0xe>
10012e12:	2000      	movs	r0, #0
10012e14:	bd10      	pop	{r4, pc}
10012e16:	2001      	movs	r0, #1
10012e18:	bd10      	pop	{r4, pc}
10012e1a:	46c0      	nop			; (mov r8, r8)

10012e1c <__aeabi_fcmpge>:
10012e1c:	b510      	push	{r4, lr}
10012e1e:	f000 f9ab 	bl	10013178 <__gesf2>
10012e22:	2800      	cmp	r0, #0
10012e24:	da01      	bge.n	10012e2a <__aeabi_fcmpge+0xe>
10012e26:	2000      	movs	r0, #0
10012e28:	bd10      	pop	{r4, pc}
10012e2a:	2001      	movs	r0, #1
10012e2c:	bd10      	pop	{r4, pc}
10012e2e:	46c0      	nop			; (mov r8, r8)

10012e30 <__aeabi_lmul>:
10012e30:	b5f0      	push	{r4, r5, r6, r7, lr}
10012e32:	464f      	mov	r7, r9
10012e34:	4646      	mov	r6, r8
10012e36:	b4c0      	push	{r6, r7}
10012e38:	0416      	lsls	r6, r2, #16
10012e3a:	0c36      	lsrs	r6, r6, #16
10012e3c:	4699      	mov	r9, r3
10012e3e:	0033      	movs	r3, r6
10012e40:	0405      	lsls	r5, r0, #16
10012e42:	0c2c      	lsrs	r4, r5, #16
10012e44:	0c07      	lsrs	r7, r0, #16
10012e46:	0c15      	lsrs	r5, r2, #16
10012e48:	4363      	muls	r3, r4
10012e4a:	437e      	muls	r6, r7
10012e4c:	436f      	muls	r7, r5
10012e4e:	4365      	muls	r5, r4
10012e50:	0c1c      	lsrs	r4, r3, #16
10012e52:	19ad      	adds	r5, r5, r6
10012e54:	1964      	adds	r4, r4, r5
10012e56:	469c      	mov	ip, r3
10012e58:	42a6      	cmp	r6, r4
10012e5a:	d903      	bls.n	10012e64 <__aeabi_lmul+0x34>
10012e5c:	2380      	movs	r3, #128	; 0x80
10012e5e:	025b      	lsls	r3, r3, #9
10012e60:	4698      	mov	r8, r3
10012e62:	4447      	add	r7, r8
10012e64:	4663      	mov	r3, ip
10012e66:	0c25      	lsrs	r5, r4, #16
10012e68:	19ef      	adds	r7, r5, r7
10012e6a:	041d      	lsls	r5, r3, #16
10012e6c:	464b      	mov	r3, r9
10012e6e:	434a      	muls	r2, r1
10012e70:	4343      	muls	r3, r0
10012e72:	0c2d      	lsrs	r5, r5, #16
10012e74:	0424      	lsls	r4, r4, #16
10012e76:	1964      	adds	r4, r4, r5
10012e78:	1899      	adds	r1, r3, r2
10012e7a:	19c9      	adds	r1, r1, r7
10012e7c:	0020      	movs	r0, r4
10012e7e:	bc0c      	pop	{r2, r3}
10012e80:	4690      	mov	r8, r2
10012e82:	4699      	mov	r9, r3
10012e84:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012e86:	46c0      	nop			; (mov r8, r8)

10012e88 <__aeabi_f2uiz>:
10012e88:	219e      	movs	r1, #158	; 0x9e
10012e8a:	b510      	push	{r4, lr}
10012e8c:	05c9      	lsls	r1, r1, #23
10012e8e:	1c04      	adds	r4, r0, #0
10012e90:	f7ff ffc4 	bl	10012e1c <__aeabi_fcmpge>
10012e94:	2800      	cmp	r0, #0
10012e96:	d103      	bne.n	10012ea0 <__aeabi_f2uiz+0x18>
10012e98:	1c20      	adds	r0, r4, #0
10012e9a:	f000 fc8f 	bl	100137bc <__aeabi_f2iz>
10012e9e:	bd10      	pop	{r4, pc}
10012ea0:	219e      	movs	r1, #158	; 0x9e
10012ea2:	1c20      	adds	r0, r4, #0
10012ea4:	05c9      	lsls	r1, r1, #23
10012ea6:	f000 fb03 	bl	100134b0 <__aeabi_fsub>
10012eaa:	f000 fc87 	bl	100137bc <__aeabi_f2iz>
10012eae:	2380      	movs	r3, #128	; 0x80
10012eb0:	061b      	lsls	r3, r3, #24
10012eb2:	469c      	mov	ip, r3
10012eb4:	4460      	add	r0, ip
10012eb6:	e7f2      	b.n	10012e9e <__aeabi_f2uiz+0x16>

10012eb8 <__aeabi_d2uiz>:
10012eb8:	b570      	push	{r4, r5, r6, lr}
10012eba:	2200      	movs	r2, #0
10012ebc:	4b0c      	ldr	r3, [pc, #48]	; (10012ef0 <__aeabi_d2uiz+0x38>)
10012ebe:	0004      	movs	r4, r0
10012ec0:	000d      	movs	r5, r1
10012ec2:	f7ff ff71 	bl	10012da8 <__aeabi_dcmpge>
10012ec6:	2800      	cmp	r0, #0
10012ec8:	d104      	bne.n	10012ed4 <__aeabi_d2uiz+0x1c>
10012eca:	0020      	movs	r0, r4
10012ecc:	0029      	movs	r1, r5
10012ece:	f002 fa5b 	bl	10015388 <__aeabi_d2iz>
10012ed2:	bd70      	pop	{r4, r5, r6, pc}
10012ed4:	4b06      	ldr	r3, [pc, #24]	; (10012ef0 <__aeabi_d2uiz+0x38>)
10012ed6:	2200      	movs	r2, #0
10012ed8:	0020      	movs	r0, r4
10012eda:	0029      	movs	r1, r5
10012edc:	f001 fee0 	bl	10014ca0 <__aeabi_dsub>
10012ee0:	f002 fa52 	bl	10015388 <__aeabi_d2iz>
10012ee4:	2380      	movs	r3, #128	; 0x80
10012ee6:	061b      	lsls	r3, r3, #24
10012ee8:	469c      	mov	ip, r3
10012eea:	4460      	add	r0, ip
10012eec:	e7f1      	b.n	10012ed2 <__aeabi_d2uiz+0x1a>
10012eee:	46c0      	nop			; (mov r8, r8)
10012ef0:	41e00000 	.word	0x41e00000

10012ef4 <__aeabi_fdiv>:
10012ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
10012ef6:	4656      	mov	r6, sl
10012ef8:	4644      	mov	r4, r8
10012efa:	465f      	mov	r7, fp
10012efc:	464d      	mov	r5, r9
10012efe:	b4f0      	push	{r4, r5, r6, r7}
10012f00:	0244      	lsls	r4, r0, #9
10012f02:	0046      	lsls	r6, r0, #1
10012f04:	0fc7      	lsrs	r7, r0, #31
10012f06:	b083      	sub	sp, #12
10012f08:	4688      	mov	r8, r1
10012f0a:	0a65      	lsrs	r5, r4, #9
10012f0c:	0e36      	lsrs	r6, r6, #24
10012f0e:	46ba      	mov	sl, r7
10012f10:	d03d      	beq.n	10012f8e <__aeabi_fdiv+0x9a>
10012f12:	2eff      	cmp	r6, #255	; 0xff
10012f14:	d022      	beq.n	10012f5c <__aeabi_fdiv+0x68>
10012f16:	2300      	movs	r3, #0
10012f18:	00ec      	lsls	r4, r5, #3
10012f1a:	2580      	movs	r5, #128	; 0x80
10012f1c:	4699      	mov	r9, r3
10012f1e:	469b      	mov	fp, r3
10012f20:	04ed      	lsls	r5, r5, #19
10012f22:	4325      	orrs	r5, r4
10012f24:	3e7f      	subs	r6, #127	; 0x7f
10012f26:	4643      	mov	r3, r8
10012f28:	025c      	lsls	r4, r3, #9
10012f2a:	0058      	lsls	r0, r3, #1
10012f2c:	0fdb      	lsrs	r3, r3, #31
10012f2e:	0a64      	lsrs	r4, r4, #9
10012f30:	0e00      	lsrs	r0, r0, #24
10012f32:	4698      	mov	r8, r3
10012f34:	d036      	beq.n	10012fa4 <__aeabi_fdiv+0xb0>
10012f36:	28ff      	cmp	r0, #255	; 0xff
10012f38:	d030      	beq.n	10012f9c <__aeabi_fdiv+0xa8>
10012f3a:	2380      	movs	r3, #128	; 0x80
10012f3c:	2100      	movs	r1, #0
10012f3e:	00e4      	lsls	r4, r4, #3
10012f40:	04db      	lsls	r3, r3, #19
10012f42:	431c      	orrs	r4, r3
10012f44:	387f      	subs	r0, #127	; 0x7f
10012f46:	1a30      	subs	r0, r6, r0
10012f48:	9001      	str	r0, [sp, #4]
10012f4a:	4648      	mov	r0, r9
10012f4c:	4642      	mov	r2, r8
10012f4e:	4308      	orrs	r0, r1
10012f50:	4e72      	ldr	r6, [pc, #456]	; (1001311c <__aeabi_fdiv+0x228>)
10012f52:	0080      	lsls	r0, r0, #2
10012f54:	5830      	ldr	r0, [r6, r0]
10012f56:	407a      	eors	r2, r7
10012f58:	0013      	movs	r3, r2
10012f5a:	4687      	mov	pc, r0
10012f5c:	2d00      	cmp	r5, #0
10012f5e:	d144      	bne.n	10012fea <__aeabi_fdiv+0xf6>
10012f60:	2308      	movs	r3, #8
10012f62:	4699      	mov	r9, r3
10012f64:	3b06      	subs	r3, #6
10012f66:	469b      	mov	fp, r3
10012f68:	e7dd      	b.n	10012f26 <__aeabi_fdiv+0x32>
10012f6a:	2201      	movs	r2, #1
10012f6c:	20ff      	movs	r0, #255	; 0xff
10012f6e:	2400      	movs	r4, #0
10012f70:	401a      	ands	r2, r3
10012f72:	0264      	lsls	r4, r4, #9
10012f74:	05c3      	lsls	r3, r0, #23
10012f76:	0a64      	lsrs	r4, r4, #9
10012f78:	07d2      	lsls	r2, r2, #31
10012f7a:	431c      	orrs	r4, r3
10012f7c:	4314      	orrs	r4, r2
10012f7e:	0020      	movs	r0, r4
10012f80:	b003      	add	sp, #12
10012f82:	bc3c      	pop	{r2, r3, r4, r5}
10012f84:	4690      	mov	r8, r2
10012f86:	4699      	mov	r9, r3
10012f88:	46a2      	mov	sl, r4
10012f8a:	46ab      	mov	fp, r5
10012f8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012f8e:	2d00      	cmp	r5, #0
10012f90:	d120      	bne.n	10012fd4 <__aeabi_fdiv+0xe0>
10012f92:	2304      	movs	r3, #4
10012f94:	4699      	mov	r9, r3
10012f96:	3b03      	subs	r3, #3
10012f98:	469b      	mov	fp, r3
10012f9a:	e7c4      	b.n	10012f26 <__aeabi_fdiv+0x32>
10012f9c:	2c00      	cmp	r4, #0
10012f9e:	d117      	bne.n	10012fd0 <__aeabi_fdiv+0xdc>
10012fa0:	2102      	movs	r1, #2
10012fa2:	e002      	b.n	10012faa <__aeabi_fdiv+0xb6>
10012fa4:	2c00      	cmp	r4, #0
10012fa6:	d10a      	bne.n	10012fbe <__aeabi_fdiv+0xca>
10012fa8:	2101      	movs	r1, #1
10012faa:	1a32      	subs	r2, r6, r0
10012fac:	9201      	str	r2, [sp, #4]
10012fae:	464a      	mov	r2, r9
10012fb0:	4643      	mov	r3, r8
10012fb2:	430a      	orrs	r2, r1
10012fb4:	485a      	ldr	r0, [pc, #360]	; (10013120 <__aeabi_fdiv+0x22c>)
10012fb6:	0092      	lsls	r2, r2, #2
10012fb8:	5882      	ldr	r2, [r0, r2]
10012fba:	407b      	eors	r3, r7
10012fbc:	4697      	mov	pc, r2
10012fbe:	0020      	movs	r0, r4
10012fc0:	f002 fb72 	bl	100156a8 <__clzsi2>
10012fc4:	1f43      	subs	r3, r0, #5
10012fc6:	3076      	adds	r0, #118	; 0x76
10012fc8:	409c      	lsls	r4, r3
10012fca:	4240      	negs	r0, r0
10012fcc:	2100      	movs	r1, #0
10012fce:	e7ba      	b.n	10012f46 <__aeabi_fdiv+0x52>
10012fd0:	2103      	movs	r1, #3
10012fd2:	e7b8      	b.n	10012f46 <__aeabi_fdiv+0x52>
10012fd4:	0028      	movs	r0, r5
10012fd6:	f002 fb67 	bl	100156a8 <__clzsi2>
10012fda:	1f43      	subs	r3, r0, #5
10012fdc:	409d      	lsls	r5, r3
10012fde:	2300      	movs	r3, #0
10012fe0:	3076      	adds	r0, #118	; 0x76
10012fe2:	4246      	negs	r6, r0
10012fe4:	4699      	mov	r9, r3
10012fe6:	469b      	mov	fp, r3
10012fe8:	e79d      	b.n	10012f26 <__aeabi_fdiv+0x32>
10012fea:	230c      	movs	r3, #12
10012fec:	4699      	mov	r9, r3
10012fee:	3b09      	subs	r3, #9
10012ff0:	469b      	mov	fp, r3
10012ff2:	e798      	b.n	10012f26 <__aeabi_fdiv+0x32>
10012ff4:	2480      	movs	r4, #128	; 0x80
10012ff6:	2200      	movs	r2, #0
10012ff8:	03e4      	lsls	r4, r4, #15
10012ffa:	20ff      	movs	r0, #255	; 0xff
10012ffc:	e7b9      	b.n	10012f72 <__aeabi_fdiv+0x7e>
10012ffe:	2400      	movs	r4, #0
10013000:	46c2      	mov	sl, r8
10013002:	468b      	mov	fp, r1
10013004:	465a      	mov	r2, fp
10013006:	4653      	mov	r3, sl
10013008:	2a02      	cmp	r2, #2
1001300a:	d0ae      	beq.n	10012f6a <__aeabi_fdiv+0x76>
1001300c:	2a03      	cmp	r2, #3
1001300e:	d07d      	beq.n	1001310c <__aeabi_fdiv+0x218>
10013010:	2a01      	cmp	r2, #1
10013012:	d131      	bne.n	10013078 <__aeabi_fdiv+0x184>
10013014:	2201      	movs	r2, #1
10013016:	2000      	movs	r0, #0
10013018:	401a      	ands	r2, r3
1001301a:	2400      	movs	r4, #0
1001301c:	e7a9      	b.n	10012f72 <__aeabi_fdiv+0x7e>
1001301e:	2201      	movs	r2, #1
10013020:	1a10      	subs	r0, r2, r0
10013022:	281b      	cmp	r0, #27
10013024:	dd56      	ble.n	100130d4 <__aeabi_fdiv+0x1e0>
10013026:	401a      	ands	r2, r3
10013028:	2000      	movs	r0, #0
1001302a:	2400      	movs	r4, #0
1001302c:	e7a1      	b.n	10012f72 <__aeabi_fdiv+0x7e>
1001302e:	2380      	movs	r3, #128	; 0x80
10013030:	03db      	lsls	r3, r3, #15
10013032:	421d      	tst	r5, r3
10013034:	d14b      	bne.n	100130ce <__aeabi_fdiv+0x1da>
10013036:	2380      	movs	r3, #128	; 0x80
10013038:	03db      	lsls	r3, r3, #15
1001303a:	432b      	orrs	r3, r5
1001303c:	025c      	lsls	r4, r3, #9
1001303e:	0a64      	lsrs	r4, r4, #9
10013040:	003a      	movs	r2, r7
10013042:	20ff      	movs	r0, #255	; 0xff
10013044:	e795      	b.n	10012f72 <__aeabi_fdiv+0x7e>
10013046:	016d      	lsls	r5, r5, #5
10013048:	0160      	lsls	r0, r4, #5
1001304a:	4285      	cmp	r5, r0
1001304c:	d230      	bcs.n	100130b0 <__aeabi_fdiv+0x1bc>
1001304e:	9a01      	ldr	r2, [sp, #4]
10013050:	2400      	movs	r4, #0
10013052:	3a01      	subs	r2, #1
10013054:	9201      	str	r2, [sp, #4]
10013056:	221b      	movs	r2, #27
10013058:	2701      	movs	r7, #1
1001305a:	0029      	movs	r1, r5
1001305c:	0064      	lsls	r4, r4, #1
1001305e:	006d      	lsls	r5, r5, #1
10013060:	2900      	cmp	r1, #0
10013062:	db01      	blt.n	10013068 <__aeabi_fdiv+0x174>
10013064:	42a8      	cmp	r0, r5
10013066:	d801      	bhi.n	1001306c <__aeabi_fdiv+0x178>
10013068:	1a2d      	subs	r5, r5, r0
1001306a:	433c      	orrs	r4, r7
1001306c:	3a01      	subs	r2, #1
1001306e:	2a00      	cmp	r2, #0
10013070:	d1f3      	bne.n	1001305a <__aeabi_fdiv+0x166>
10013072:	1e6a      	subs	r2, r5, #1
10013074:	4195      	sbcs	r5, r2
10013076:	432c      	orrs	r4, r5
10013078:	9801      	ldr	r0, [sp, #4]
1001307a:	307f      	adds	r0, #127	; 0x7f
1001307c:	2800      	cmp	r0, #0
1001307e:	ddce      	ble.n	1001301e <__aeabi_fdiv+0x12a>
10013080:	0762      	lsls	r2, r4, #29
10013082:	d004      	beq.n	1001308e <__aeabi_fdiv+0x19a>
10013084:	220f      	movs	r2, #15
10013086:	4022      	ands	r2, r4
10013088:	2a04      	cmp	r2, #4
1001308a:	d000      	beq.n	1001308e <__aeabi_fdiv+0x19a>
1001308c:	3404      	adds	r4, #4
1001308e:	0122      	lsls	r2, r4, #4
10013090:	d503      	bpl.n	1001309a <__aeabi_fdiv+0x1a6>
10013092:	4a24      	ldr	r2, [pc, #144]	; (10013124 <__aeabi_fdiv+0x230>)
10013094:	9801      	ldr	r0, [sp, #4]
10013096:	4014      	ands	r4, r2
10013098:	3080      	adds	r0, #128	; 0x80
1001309a:	28fe      	cmp	r0, #254	; 0xfe
1001309c:	dd00      	ble.n	100130a0 <__aeabi_fdiv+0x1ac>
1001309e:	e764      	b.n	10012f6a <__aeabi_fdiv+0x76>
100130a0:	2201      	movs	r2, #1
100130a2:	01a4      	lsls	r4, r4, #6
100130a4:	0a64      	lsrs	r4, r4, #9
100130a6:	b2c0      	uxtb	r0, r0
100130a8:	401a      	ands	r2, r3
100130aa:	e762      	b.n	10012f72 <__aeabi_fdiv+0x7e>
100130ac:	002c      	movs	r4, r5
100130ae:	e7a9      	b.n	10013004 <__aeabi_fdiv+0x110>
100130b0:	1a2d      	subs	r5, r5, r0
100130b2:	221a      	movs	r2, #26
100130b4:	2401      	movs	r4, #1
100130b6:	e7cf      	b.n	10013058 <__aeabi_fdiv+0x164>
100130b8:	026b      	lsls	r3, r5, #9
100130ba:	d5bc      	bpl.n	10013036 <__aeabi_fdiv+0x142>
100130bc:	2400      	movs	r4, #0
100130be:	2380      	movs	r3, #128	; 0x80
100130c0:	03db      	lsls	r3, r3, #15
100130c2:	431c      	orrs	r4, r3
100130c4:	0264      	lsls	r4, r4, #9
100130c6:	0a64      	lsrs	r4, r4, #9
100130c8:	4642      	mov	r2, r8
100130ca:	20ff      	movs	r0, #255	; 0xff
100130cc:	e751      	b.n	10012f72 <__aeabi_fdiv+0x7e>
100130ce:	421c      	tst	r4, r3
100130d0:	d1b3      	bne.n	1001303a <__aeabi_fdiv+0x146>
100130d2:	e7f4      	b.n	100130be <__aeabi_fdiv+0x1ca>
100130d4:	0021      	movs	r1, r4
100130d6:	2220      	movs	r2, #32
100130d8:	40c1      	lsrs	r1, r0
100130da:	1a10      	subs	r0, r2, r0
100130dc:	4084      	lsls	r4, r0
100130de:	1e62      	subs	r2, r4, #1
100130e0:	4194      	sbcs	r4, r2
100130e2:	430c      	orrs	r4, r1
100130e4:	0762      	lsls	r2, r4, #29
100130e6:	d004      	beq.n	100130f2 <__aeabi_fdiv+0x1fe>
100130e8:	220f      	movs	r2, #15
100130ea:	4022      	ands	r2, r4
100130ec:	2a04      	cmp	r2, #4
100130ee:	d000      	beq.n	100130f2 <__aeabi_fdiv+0x1fe>
100130f0:	3404      	adds	r4, #4
100130f2:	0162      	lsls	r2, r4, #5
100130f4:	d504      	bpl.n	10013100 <__aeabi_fdiv+0x20c>
100130f6:	2201      	movs	r2, #1
100130f8:	2001      	movs	r0, #1
100130fa:	401a      	ands	r2, r3
100130fc:	2400      	movs	r4, #0
100130fe:	e738      	b.n	10012f72 <__aeabi_fdiv+0x7e>
10013100:	2201      	movs	r2, #1
10013102:	01a4      	lsls	r4, r4, #6
10013104:	0a64      	lsrs	r4, r4, #9
10013106:	401a      	ands	r2, r3
10013108:	2000      	movs	r0, #0
1001310a:	e732      	b.n	10012f72 <__aeabi_fdiv+0x7e>
1001310c:	2380      	movs	r3, #128	; 0x80
1001310e:	03db      	lsls	r3, r3, #15
10013110:	431c      	orrs	r4, r3
10013112:	0264      	lsls	r4, r4, #9
10013114:	0a64      	lsrs	r4, r4, #9
10013116:	4652      	mov	r2, sl
10013118:	20ff      	movs	r0, #255	; 0xff
1001311a:	e72a      	b.n	10012f72 <__aeabi_fdiv+0x7e>
1001311c:	10018338 	.word	0x10018338
10013120:	10018378 	.word	0x10018378
10013124:	f7ffffff 	.word	0xf7ffffff

10013128 <__eqsf2>:
10013128:	0243      	lsls	r3, r0, #9
1001312a:	b570      	push	{r4, r5, r6, lr}
1001312c:	0042      	lsls	r2, r0, #1
1001312e:	004c      	lsls	r4, r1, #1
10013130:	0a5d      	lsrs	r5, r3, #9
10013132:	0fc3      	lsrs	r3, r0, #31
10013134:	0248      	lsls	r0, r1, #9
10013136:	0e12      	lsrs	r2, r2, #24
10013138:	0a46      	lsrs	r6, r0, #9
1001313a:	0e24      	lsrs	r4, r4, #24
1001313c:	0fc9      	lsrs	r1, r1, #31
1001313e:	2aff      	cmp	r2, #255	; 0xff
10013140:	d00f      	beq.n	10013162 <__eqsf2+0x3a>
10013142:	2cff      	cmp	r4, #255	; 0xff
10013144:	d011      	beq.n	1001316a <__eqsf2+0x42>
10013146:	2001      	movs	r0, #1
10013148:	42a2      	cmp	r2, r4
1001314a:	d000      	beq.n	1001314e <__eqsf2+0x26>
1001314c:	bd70      	pop	{r4, r5, r6, pc}
1001314e:	42b5      	cmp	r5, r6
10013150:	d1fc      	bne.n	1001314c <__eqsf2+0x24>
10013152:	428b      	cmp	r3, r1
10013154:	d00d      	beq.n	10013172 <__eqsf2+0x4a>
10013156:	2a00      	cmp	r2, #0
10013158:	d1f8      	bne.n	1001314c <__eqsf2+0x24>
1001315a:	0028      	movs	r0, r5
1001315c:	1e43      	subs	r3, r0, #1
1001315e:	4198      	sbcs	r0, r3
10013160:	e7f4      	b.n	1001314c <__eqsf2+0x24>
10013162:	2001      	movs	r0, #1
10013164:	2d00      	cmp	r5, #0
10013166:	d1f1      	bne.n	1001314c <__eqsf2+0x24>
10013168:	e7eb      	b.n	10013142 <__eqsf2+0x1a>
1001316a:	2001      	movs	r0, #1
1001316c:	2e00      	cmp	r6, #0
1001316e:	d1ed      	bne.n	1001314c <__eqsf2+0x24>
10013170:	e7e9      	b.n	10013146 <__eqsf2+0x1e>
10013172:	2000      	movs	r0, #0
10013174:	e7ea      	b.n	1001314c <__eqsf2+0x24>
10013176:	46c0      	nop			; (mov r8, r8)

10013178 <__gesf2>:
10013178:	0243      	lsls	r3, r0, #9
1001317a:	b5f0      	push	{r4, r5, r6, r7, lr}
1001317c:	0042      	lsls	r2, r0, #1
1001317e:	0a5d      	lsrs	r5, r3, #9
10013180:	0fc3      	lsrs	r3, r0, #31
10013182:	0248      	lsls	r0, r1, #9
10013184:	0a44      	lsrs	r4, r0, #9
10013186:	0048      	lsls	r0, r1, #1
10013188:	0e12      	lsrs	r2, r2, #24
1001318a:	0e00      	lsrs	r0, r0, #24
1001318c:	0fc9      	lsrs	r1, r1, #31
1001318e:	2aff      	cmp	r2, #255	; 0xff
10013190:	d01f      	beq.n	100131d2 <__gesf2+0x5a>
10013192:	28ff      	cmp	r0, #255	; 0xff
10013194:	d022      	beq.n	100131dc <__gesf2+0x64>
10013196:	2a00      	cmp	r2, #0
10013198:	d109      	bne.n	100131ae <__gesf2+0x36>
1001319a:	426e      	negs	r6, r5
1001319c:	416e      	adcs	r6, r5
1001319e:	2800      	cmp	r0, #0
100131a0:	d10f      	bne.n	100131c2 <__gesf2+0x4a>
100131a2:	2c00      	cmp	r4, #0
100131a4:	d10d      	bne.n	100131c2 <__gesf2+0x4a>
100131a6:	2000      	movs	r0, #0
100131a8:	2d00      	cmp	r5, #0
100131aa:	d009      	beq.n	100131c0 <__gesf2+0x48>
100131ac:	e005      	b.n	100131ba <__gesf2+0x42>
100131ae:	2800      	cmp	r0, #0
100131b0:	d101      	bne.n	100131b6 <__gesf2+0x3e>
100131b2:	2c00      	cmp	r4, #0
100131b4:	d001      	beq.n	100131ba <__gesf2+0x42>
100131b6:	428b      	cmp	r3, r1
100131b8:	d013      	beq.n	100131e2 <__gesf2+0x6a>
100131ba:	4258      	negs	r0, r3
100131bc:	2301      	movs	r3, #1
100131be:	4318      	orrs	r0, r3
100131c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100131c2:	2e00      	cmp	r6, #0
100131c4:	d0f7      	beq.n	100131b6 <__gesf2+0x3e>
100131c6:	4248      	negs	r0, r1
100131c8:	4141      	adcs	r1, r0
100131ca:	2001      	movs	r0, #1
100131cc:	4249      	negs	r1, r1
100131ce:	4308      	orrs	r0, r1
100131d0:	e7f6      	b.n	100131c0 <__gesf2+0x48>
100131d2:	2d00      	cmp	r5, #0
100131d4:	d0dd      	beq.n	10013192 <__gesf2+0x1a>
100131d6:	2002      	movs	r0, #2
100131d8:	4240      	negs	r0, r0
100131da:	e7f1      	b.n	100131c0 <__gesf2+0x48>
100131dc:	2c00      	cmp	r4, #0
100131de:	d0da      	beq.n	10013196 <__gesf2+0x1e>
100131e0:	e7f9      	b.n	100131d6 <__gesf2+0x5e>
100131e2:	4282      	cmp	r2, r0
100131e4:	dce9      	bgt.n	100131ba <__gesf2+0x42>
100131e6:	db04      	blt.n	100131f2 <__gesf2+0x7a>
100131e8:	42a5      	cmp	r5, r4
100131ea:	d8e6      	bhi.n	100131ba <__gesf2+0x42>
100131ec:	2000      	movs	r0, #0
100131ee:	42a5      	cmp	r5, r4
100131f0:	d2e6      	bcs.n	100131c0 <__gesf2+0x48>
100131f2:	4258      	negs	r0, r3
100131f4:	4143      	adcs	r3, r0
100131f6:	2001      	movs	r0, #1
100131f8:	425b      	negs	r3, r3
100131fa:	4318      	orrs	r0, r3
100131fc:	e7e0      	b.n	100131c0 <__gesf2+0x48>
100131fe:	46c0      	nop			; (mov r8, r8)

10013200 <__lesf2>:
10013200:	0243      	lsls	r3, r0, #9
10013202:	b5f0      	push	{r4, r5, r6, r7, lr}
10013204:	0042      	lsls	r2, r0, #1
10013206:	004c      	lsls	r4, r1, #1
10013208:	0a5e      	lsrs	r6, r3, #9
1001320a:	0fc3      	lsrs	r3, r0, #31
1001320c:	0248      	lsls	r0, r1, #9
1001320e:	0e12      	lsrs	r2, r2, #24
10013210:	0a45      	lsrs	r5, r0, #9
10013212:	0e24      	lsrs	r4, r4, #24
10013214:	0fc9      	lsrs	r1, r1, #31
10013216:	2aff      	cmp	r2, #255	; 0xff
10013218:	d017      	beq.n	1001324a <__lesf2+0x4a>
1001321a:	2cff      	cmp	r4, #255	; 0xff
1001321c:	d019      	beq.n	10013252 <__lesf2+0x52>
1001321e:	2a00      	cmp	r2, #0
10013220:	d10b      	bne.n	1001323a <__lesf2+0x3a>
10013222:	4270      	negs	r0, r6
10013224:	4170      	adcs	r0, r6
10013226:	2c00      	cmp	r4, #0
10013228:	d017      	beq.n	1001325a <__lesf2+0x5a>
1001322a:	2800      	cmp	r0, #0
1001322c:	d007      	beq.n	1001323e <__lesf2+0x3e>
1001322e:	4248      	negs	r0, r1
10013230:	4141      	adcs	r1, r0
10013232:	2001      	movs	r0, #1
10013234:	4249      	negs	r1, r1
10013236:	4308      	orrs	r0, r1
10013238:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001323a:	2c00      	cmp	r4, #0
1001323c:	d013      	beq.n	10013266 <__lesf2+0x66>
1001323e:	428b      	cmp	r3, r1
10013240:	d014      	beq.n	1001326c <__lesf2+0x6c>
10013242:	4258      	negs	r0, r3
10013244:	2301      	movs	r3, #1
10013246:	4318      	orrs	r0, r3
10013248:	e7f6      	b.n	10013238 <__lesf2+0x38>
1001324a:	2002      	movs	r0, #2
1001324c:	2e00      	cmp	r6, #0
1001324e:	d1f3      	bne.n	10013238 <__lesf2+0x38>
10013250:	e7e3      	b.n	1001321a <__lesf2+0x1a>
10013252:	2002      	movs	r0, #2
10013254:	2d00      	cmp	r5, #0
10013256:	d1ef      	bne.n	10013238 <__lesf2+0x38>
10013258:	e7e1      	b.n	1001321e <__lesf2+0x1e>
1001325a:	2d00      	cmp	r5, #0
1001325c:	d1e5      	bne.n	1001322a <__lesf2+0x2a>
1001325e:	2000      	movs	r0, #0
10013260:	2e00      	cmp	r6, #0
10013262:	d0e9      	beq.n	10013238 <__lesf2+0x38>
10013264:	e7ed      	b.n	10013242 <__lesf2+0x42>
10013266:	2d00      	cmp	r5, #0
10013268:	d1e9      	bne.n	1001323e <__lesf2+0x3e>
1001326a:	e7ea      	b.n	10013242 <__lesf2+0x42>
1001326c:	42a2      	cmp	r2, r4
1001326e:	dce8      	bgt.n	10013242 <__lesf2+0x42>
10013270:	db04      	blt.n	1001327c <__lesf2+0x7c>
10013272:	42ae      	cmp	r6, r5
10013274:	d8e5      	bhi.n	10013242 <__lesf2+0x42>
10013276:	2000      	movs	r0, #0
10013278:	42ae      	cmp	r6, r5
1001327a:	d2dd      	bcs.n	10013238 <__lesf2+0x38>
1001327c:	4258      	negs	r0, r3
1001327e:	4143      	adcs	r3, r0
10013280:	2001      	movs	r0, #1
10013282:	425b      	negs	r3, r3
10013284:	4318      	orrs	r0, r3
10013286:	e7d7      	b.n	10013238 <__lesf2+0x38>

10013288 <__aeabi_fmul>:
10013288:	b5f0      	push	{r4, r5, r6, r7, lr}
1001328a:	4657      	mov	r7, sl
1001328c:	464e      	mov	r6, r9
1001328e:	4645      	mov	r5, r8
10013290:	0043      	lsls	r3, r0, #1
10013292:	b4e0      	push	{r5, r6, r7}
10013294:	0246      	lsls	r6, r0, #9
10013296:	4688      	mov	r8, r1
10013298:	0a76      	lsrs	r6, r6, #9
1001329a:	0e1f      	lsrs	r7, r3, #24
1001329c:	0fc4      	lsrs	r4, r0, #31
1001329e:	2f00      	cmp	r7, #0
100132a0:	d047      	beq.n	10013332 <__aeabi_fmul+0xaa>
100132a2:	2fff      	cmp	r7, #255	; 0xff
100132a4:	d025      	beq.n	100132f2 <__aeabi_fmul+0x6a>
100132a6:	2300      	movs	r3, #0
100132a8:	2580      	movs	r5, #128	; 0x80
100132aa:	469a      	mov	sl, r3
100132ac:	4699      	mov	r9, r3
100132ae:	00f6      	lsls	r6, r6, #3
100132b0:	04ed      	lsls	r5, r5, #19
100132b2:	432e      	orrs	r6, r5
100132b4:	3f7f      	subs	r7, #127	; 0x7f
100132b6:	4643      	mov	r3, r8
100132b8:	4642      	mov	r2, r8
100132ba:	025d      	lsls	r5, r3, #9
100132bc:	0fd2      	lsrs	r2, r2, #31
100132be:	005b      	lsls	r3, r3, #1
100132c0:	0a6d      	lsrs	r5, r5, #9
100132c2:	0e1b      	lsrs	r3, r3, #24
100132c4:	4690      	mov	r8, r2
100132c6:	d040      	beq.n	1001334a <__aeabi_fmul+0xc2>
100132c8:	2bff      	cmp	r3, #255	; 0xff
100132ca:	d039      	beq.n	10013340 <__aeabi_fmul+0xb8>
100132cc:	2280      	movs	r2, #128	; 0x80
100132ce:	2000      	movs	r0, #0
100132d0:	00ed      	lsls	r5, r5, #3
100132d2:	04d2      	lsls	r2, r2, #19
100132d4:	4315      	orrs	r5, r2
100132d6:	3b7f      	subs	r3, #127	; 0x7f
100132d8:	18fb      	adds	r3, r7, r3
100132da:	4642      	mov	r2, r8
100132dc:	4657      	mov	r7, sl
100132de:	1c59      	adds	r1, r3, #1
100132e0:	4062      	eors	r2, r4
100132e2:	468c      	mov	ip, r1
100132e4:	4307      	orrs	r7, r0
100132e6:	2f0f      	cmp	r7, #15
100132e8:	d85c      	bhi.n	100133a4 <__aeabi_fmul+0x11c>
100132ea:	496f      	ldr	r1, [pc, #444]	; (100134a8 <__aeabi_fmul+0x220>)
100132ec:	00bf      	lsls	r7, r7, #2
100132ee:	59c9      	ldr	r1, [r1, r7]
100132f0:	468f      	mov	pc, r1
100132f2:	2e00      	cmp	r6, #0
100132f4:	d145      	bne.n	10013382 <__aeabi_fmul+0xfa>
100132f6:	2308      	movs	r3, #8
100132f8:	469a      	mov	sl, r3
100132fa:	3b06      	subs	r3, #6
100132fc:	4699      	mov	r9, r3
100132fe:	e7da      	b.n	100132b6 <__aeabi_fmul+0x2e>
10013300:	4642      	mov	r2, r8
10013302:	2802      	cmp	r0, #2
10013304:	d02d      	beq.n	10013362 <__aeabi_fmul+0xda>
10013306:	2803      	cmp	r0, #3
10013308:	d100      	bne.n	1001330c <__aeabi_fmul+0x84>
1001330a:	e0c3      	b.n	10013494 <__aeabi_fmul+0x20c>
1001330c:	2801      	cmp	r0, #1
1001330e:	d000      	beq.n	10013312 <__aeabi_fmul+0x8a>
10013310:	e0a2      	b.n	10013458 <__aeabi_fmul+0x1d0>
10013312:	2500      	movs	r5, #0
10013314:	2600      	movs	r6, #0
10013316:	4002      	ands	r2, r0
10013318:	b2d4      	uxtb	r4, r2
1001331a:	0276      	lsls	r6, r6, #9
1001331c:	05ed      	lsls	r5, r5, #23
1001331e:	0a76      	lsrs	r6, r6, #9
10013320:	432e      	orrs	r6, r5
10013322:	07e4      	lsls	r4, r4, #31
10013324:	4326      	orrs	r6, r4
10013326:	0030      	movs	r0, r6
10013328:	bc1c      	pop	{r2, r3, r4}
1001332a:	4690      	mov	r8, r2
1001332c:	4699      	mov	r9, r3
1001332e:	46a2      	mov	sl, r4
10013330:	bdf0      	pop	{r4, r5, r6, r7, pc}
10013332:	2e00      	cmp	r6, #0
10013334:	d11a      	bne.n	1001336c <__aeabi_fmul+0xe4>
10013336:	2304      	movs	r3, #4
10013338:	469a      	mov	sl, r3
1001333a:	3b03      	subs	r3, #3
1001333c:	4699      	mov	r9, r3
1001333e:	e7ba      	b.n	100132b6 <__aeabi_fmul+0x2e>
10013340:	002a      	movs	r2, r5
10013342:	1e51      	subs	r1, r2, #1
10013344:	418a      	sbcs	r2, r1
10013346:	1c90      	adds	r0, r2, #2
10013348:	e7c6      	b.n	100132d8 <__aeabi_fmul+0x50>
1001334a:	2001      	movs	r0, #1
1001334c:	2d00      	cmp	r5, #0
1001334e:	d0c3      	beq.n	100132d8 <__aeabi_fmul+0x50>
10013350:	0028      	movs	r0, r5
10013352:	f002 f9a9 	bl	100156a8 <__clzsi2>
10013356:	1f43      	subs	r3, r0, #5
10013358:	3076      	adds	r0, #118	; 0x76
1001335a:	409d      	lsls	r5, r3
1001335c:	4243      	negs	r3, r0
1001335e:	2000      	movs	r0, #0
10013360:	e7ba      	b.n	100132d8 <__aeabi_fmul+0x50>
10013362:	2401      	movs	r4, #1
10013364:	25ff      	movs	r5, #255	; 0xff
10013366:	4014      	ands	r4, r2
10013368:	2600      	movs	r6, #0
1001336a:	e7d6      	b.n	1001331a <__aeabi_fmul+0x92>
1001336c:	0030      	movs	r0, r6
1001336e:	f002 f99b 	bl	100156a8 <__clzsi2>
10013372:	1f43      	subs	r3, r0, #5
10013374:	409e      	lsls	r6, r3
10013376:	2300      	movs	r3, #0
10013378:	3076      	adds	r0, #118	; 0x76
1001337a:	4247      	negs	r7, r0
1001337c:	469a      	mov	sl, r3
1001337e:	4699      	mov	r9, r3
10013380:	e799      	b.n	100132b6 <__aeabi_fmul+0x2e>
10013382:	230c      	movs	r3, #12
10013384:	469a      	mov	sl, r3
10013386:	3b09      	subs	r3, #9
10013388:	4699      	mov	r9, r3
1001338a:	e794      	b.n	100132b6 <__aeabi_fmul+0x2e>
1001338c:	2680      	movs	r6, #128	; 0x80
1001338e:	2400      	movs	r4, #0
10013390:	03f6      	lsls	r6, r6, #15
10013392:	25ff      	movs	r5, #255	; 0xff
10013394:	e7c1      	b.n	1001331a <__aeabi_fmul+0x92>
10013396:	0035      	movs	r5, r6
10013398:	4648      	mov	r0, r9
1001339a:	e7b2      	b.n	10013302 <__aeabi_fmul+0x7a>
1001339c:	0035      	movs	r5, r6
1001339e:	0022      	movs	r2, r4
100133a0:	4648      	mov	r0, r9
100133a2:	e7ae      	b.n	10013302 <__aeabi_fmul+0x7a>
100133a4:	0429      	lsls	r1, r5, #16
100133a6:	0c09      	lsrs	r1, r1, #16
100133a8:	0008      	movs	r0, r1
100133aa:	0c37      	lsrs	r7, r6, #16
100133ac:	0436      	lsls	r6, r6, #16
100133ae:	0c36      	lsrs	r6, r6, #16
100133b0:	0c2c      	lsrs	r4, r5, #16
100133b2:	4379      	muls	r1, r7
100133b4:	4370      	muls	r0, r6
100133b6:	4367      	muls	r7, r4
100133b8:	4374      	muls	r4, r6
100133ba:	0c06      	lsrs	r6, r0, #16
100133bc:	1864      	adds	r4, r4, r1
100133be:	1936      	adds	r6, r6, r4
100133c0:	42b1      	cmp	r1, r6
100133c2:	d903      	bls.n	100133cc <__aeabi_fmul+0x144>
100133c4:	2180      	movs	r1, #128	; 0x80
100133c6:	0249      	lsls	r1, r1, #9
100133c8:	4688      	mov	r8, r1
100133ca:	4447      	add	r7, r8
100133cc:	0400      	lsls	r0, r0, #16
100133ce:	0c00      	lsrs	r0, r0, #16
100133d0:	0431      	lsls	r1, r6, #16
100133d2:	1809      	adds	r1, r1, r0
100133d4:	018d      	lsls	r5, r1, #6
100133d6:	1e68      	subs	r0, r5, #1
100133d8:	4185      	sbcs	r5, r0
100133da:	0e89      	lsrs	r1, r1, #26
100133dc:	4329      	orrs	r1, r5
100133de:	0c35      	lsrs	r5, r6, #16
100133e0:	19ed      	adds	r5, r5, r7
100133e2:	01ad      	lsls	r5, r5, #6
100133e4:	430d      	orrs	r5, r1
100133e6:	0129      	lsls	r1, r5, #4
100133e8:	d504      	bpl.n	100133f4 <__aeabi_fmul+0x16c>
100133ea:	2301      	movs	r3, #1
100133ec:	0869      	lsrs	r1, r5, #1
100133ee:	401d      	ands	r5, r3
100133f0:	4663      	mov	r3, ip
100133f2:	430d      	orrs	r5, r1
100133f4:	0019      	movs	r1, r3
100133f6:	317f      	adds	r1, #127	; 0x7f
100133f8:	2900      	cmp	r1, #0
100133fa:	dd25      	ble.n	10013448 <__aeabi_fmul+0x1c0>
100133fc:	0768      	lsls	r0, r5, #29
100133fe:	d004      	beq.n	1001340a <__aeabi_fmul+0x182>
10013400:	200f      	movs	r0, #15
10013402:	4028      	ands	r0, r5
10013404:	2804      	cmp	r0, #4
10013406:	d000      	beq.n	1001340a <__aeabi_fmul+0x182>
10013408:	3504      	adds	r5, #4
1001340a:	0128      	lsls	r0, r5, #4
1001340c:	d503      	bpl.n	10013416 <__aeabi_fmul+0x18e>
1001340e:	4927      	ldr	r1, [pc, #156]	; (100134ac <__aeabi_fmul+0x224>)
10013410:	3380      	adds	r3, #128	; 0x80
10013412:	400d      	ands	r5, r1
10013414:	0019      	movs	r1, r3
10013416:	29fe      	cmp	r1, #254	; 0xfe
10013418:	dca3      	bgt.n	10013362 <__aeabi_fmul+0xda>
1001341a:	2401      	movs	r4, #1
1001341c:	01ad      	lsls	r5, r5, #6
1001341e:	0a6e      	lsrs	r6, r5, #9
10013420:	4014      	ands	r4, r2
10013422:	b2cd      	uxtb	r5, r1
10013424:	e779      	b.n	1001331a <__aeabi_fmul+0x92>
10013426:	2080      	movs	r0, #128	; 0x80
10013428:	03c0      	lsls	r0, r0, #15
1001342a:	4206      	tst	r6, r0
1001342c:	d007      	beq.n	1001343e <__aeabi_fmul+0x1b6>
1001342e:	4205      	tst	r5, r0
10013430:	d105      	bne.n	1001343e <__aeabi_fmul+0x1b6>
10013432:	4328      	orrs	r0, r5
10013434:	0246      	lsls	r6, r0, #9
10013436:	0a76      	lsrs	r6, r6, #9
10013438:	4644      	mov	r4, r8
1001343a:	25ff      	movs	r5, #255	; 0xff
1001343c:	e76d      	b.n	1001331a <__aeabi_fmul+0x92>
1001343e:	4306      	orrs	r6, r0
10013440:	0276      	lsls	r6, r6, #9
10013442:	0a76      	lsrs	r6, r6, #9
10013444:	25ff      	movs	r5, #255	; 0xff
10013446:	e768      	b.n	1001331a <__aeabi_fmul+0x92>
10013448:	2401      	movs	r4, #1
1001344a:	1a61      	subs	r1, r4, r1
1001344c:	291b      	cmp	r1, #27
1001344e:	dd05      	ble.n	1001345c <__aeabi_fmul+0x1d4>
10013450:	4014      	ands	r4, r2
10013452:	2500      	movs	r5, #0
10013454:	2600      	movs	r6, #0
10013456:	e760      	b.n	1001331a <__aeabi_fmul+0x92>
10013458:	4663      	mov	r3, ip
1001345a:	e7cb      	b.n	100133f4 <__aeabi_fmul+0x16c>
1001345c:	002e      	movs	r6, r5
1001345e:	2320      	movs	r3, #32
10013460:	40ce      	lsrs	r6, r1
10013462:	1a59      	subs	r1, r3, r1
10013464:	408d      	lsls	r5, r1
10013466:	1e6b      	subs	r3, r5, #1
10013468:	419d      	sbcs	r5, r3
1001346a:	432e      	orrs	r6, r5
1001346c:	0773      	lsls	r3, r6, #29
1001346e:	d004      	beq.n	1001347a <__aeabi_fmul+0x1f2>
10013470:	230f      	movs	r3, #15
10013472:	4033      	ands	r3, r6
10013474:	2b04      	cmp	r3, #4
10013476:	d000      	beq.n	1001347a <__aeabi_fmul+0x1f2>
10013478:	3604      	adds	r6, #4
1001347a:	0173      	lsls	r3, r6, #5
1001347c:	d504      	bpl.n	10013488 <__aeabi_fmul+0x200>
1001347e:	2401      	movs	r4, #1
10013480:	2501      	movs	r5, #1
10013482:	4014      	ands	r4, r2
10013484:	2600      	movs	r6, #0
10013486:	e748      	b.n	1001331a <__aeabi_fmul+0x92>
10013488:	2401      	movs	r4, #1
1001348a:	01b6      	lsls	r6, r6, #6
1001348c:	0a76      	lsrs	r6, r6, #9
1001348e:	4014      	ands	r4, r2
10013490:	2500      	movs	r5, #0
10013492:	e742      	b.n	1001331a <__aeabi_fmul+0x92>
10013494:	2680      	movs	r6, #128	; 0x80
10013496:	2401      	movs	r4, #1
10013498:	03f6      	lsls	r6, r6, #15
1001349a:	432e      	orrs	r6, r5
1001349c:	0276      	lsls	r6, r6, #9
1001349e:	0a76      	lsrs	r6, r6, #9
100134a0:	4014      	ands	r4, r2
100134a2:	25ff      	movs	r5, #255	; 0xff
100134a4:	e739      	b.n	1001331a <__aeabi_fmul+0x92>
100134a6:	46c0      	nop			; (mov r8, r8)
100134a8:	100183b8 	.word	0x100183b8
100134ac:	f7ffffff 	.word	0xf7ffffff

100134b0 <__aeabi_fsub>:
100134b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100134b2:	024a      	lsls	r2, r1, #9
100134b4:	004e      	lsls	r6, r1, #1
100134b6:	0243      	lsls	r3, r0, #9
100134b8:	0044      	lsls	r4, r0, #1
100134ba:	0e24      	lsrs	r4, r4, #24
100134bc:	0fc5      	lsrs	r5, r0, #31
100134be:	099b      	lsrs	r3, r3, #6
100134c0:	0e36      	lsrs	r6, r6, #24
100134c2:	0fc9      	lsrs	r1, r1, #31
100134c4:	0992      	lsrs	r2, r2, #6
100134c6:	2eff      	cmp	r6, #255	; 0xff
100134c8:	d100      	bne.n	100134cc <__aeabi_fsub+0x1c>
100134ca:	e083      	b.n	100135d4 <__aeabi_fsub+0x124>
100134cc:	2001      	movs	r0, #1
100134ce:	4041      	eors	r1, r0
100134d0:	1ba0      	subs	r0, r4, r6
100134d2:	42a9      	cmp	r1, r5
100134d4:	d05c      	beq.n	10013590 <__aeabi_fsub+0xe0>
100134d6:	2800      	cmp	r0, #0
100134d8:	dc00      	bgt.n	100134dc <__aeabi_fsub+0x2c>
100134da:	e095      	b.n	10013608 <__aeabi_fsub+0x158>
100134dc:	2e00      	cmp	r6, #0
100134de:	d11c      	bne.n	1001351a <__aeabi_fsub+0x6a>
100134e0:	2a00      	cmp	r2, #0
100134e2:	d000      	beq.n	100134e6 <__aeabi_fsub+0x36>
100134e4:	e081      	b.n	100135ea <__aeabi_fsub+0x13a>
100134e6:	075a      	lsls	r2, r3, #29
100134e8:	d004      	beq.n	100134f4 <__aeabi_fsub+0x44>
100134ea:	220f      	movs	r2, #15
100134ec:	401a      	ands	r2, r3
100134ee:	2a04      	cmp	r2, #4
100134f0:	d000      	beq.n	100134f4 <__aeabi_fsub+0x44>
100134f2:	3304      	adds	r3, #4
100134f4:	015a      	lsls	r2, r3, #5
100134f6:	d53b      	bpl.n	10013570 <__aeabi_fsub+0xc0>
100134f8:	3401      	adds	r4, #1
100134fa:	2cff      	cmp	r4, #255	; 0xff
100134fc:	d100      	bne.n	10013500 <__aeabi_fsub+0x50>
100134fe:	e091      	b.n	10013624 <__aeabi_fsub+0x174>
10013500:	2001      	movs	r0, #1
10013502:	019b      	lsls	r3, r3, #6
10013504:	0a5b      	lsrs	r3, r3, #9
10013506:	b2e4      	uxtb	r4, r4
10013508:	4005      	ands	r5, r0
1001350a:	025b      	lsls	r3, r3, #9
1001350c:	05e4      	lsls	r4, r4, #23
1001350e:	0a5b      	lsrs	r3, r3, #9
10013510:	07ed      	lsls	r5, r5, #31
10013512:	4323      	orrs	r3, r4
10013514:	432b      	orrs	r3, r5
10013516:	0018      	movs	r0, r3
10013518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1001351a:	2cff      	cmp	r4, #255	; 0xff
1001351c:	d0e3      	beq.n	100134e6 <__aeabi_fsub+0x36>
1001351e:	2180      	movs	r1, #128	; 0x80
10013520:	04c9      	lsls	r1, r1, #19
10013522:	430a      	orrs	r2, r1
10013524:	281b      	cmp	r0, #27
10013526:	dd00      	ble.n	1001352a <__aeabi_fsub+0x7a>
10013528:	e090      	b.n	1001364c <__aeabi_fsub+0x19c>
1001352a:	0016      	movs	r6, r2
1001352c:	2120      	movs	r1, #32
1001352e:	40c6      	lsrs	r6, r0
10013530:	1a08      	subs	r0, r1, r0
10013532:	4082      	lsls	r2, r0
10013534:	1e51      	subs	r1, r2, #1
10013536:	418a      	sbcs	r2, r1
10013538:	4332      	orrs	r2, r6
1001353a:	1a9b      	subs	r3, r3, r2
1001353c:	015a      	lsls	r2, r3, #5
1001353e:	d515      	bpl.n	1001356c <__aeabi_fsub+0xbc>
10013540:	019b      	lsls	r3, r3, #6
10013542:	099e      	lsrs	r6, r3, #6
10013544:	0030      	movs	r0, r6
10013546:	f002 f8af 	bl	100156a8 <__clzsi2>
1001354a:	3805      	subs	r0, #5
1001354c:	4086      	lsls	r6, r0
1001354e:	4284      	cmp	r4, r0
10013550:	dc6c      	bgt.n	1001362c <__aeabi_fsub+0x17c>
10013552:	1b04      	subs	r4, r0, r4
10013554:	0033      	movs	r3, r6
10013556:	2020      	movs	r0, #32
10013558:	3401      	adds	r4, #1
1001355a:	40e3      	lsrs	r3, r4
1001355c:	1b04      	subs	r4, r0, r4
1001355e:	40a6      	lsls	r6, r4
10013560:	1e72      	subs	r2, r6, #1
10013562:	4196      	sbcs	r6, r2
10013564:	2400      	movs	r4, #0
10013566:	4333      	orrs	r3, r6
10013568:	e7bd      	b.n	100134e6 <__aeabi_fsub+0x36>
1001356a:	000d      	movs	r5, r1
1001356c:	075a      	lsls	r2, r3, #29
1001356e:	d1bc      	bne.n	100134ea <__aeabi_fsub+0x3a>
10013570:	08df      	lsrs	r7, r3, #3
10013572:	2301      	movs	r3, #1
10013574:	401d      	ands	r5, r3
10013576:	2cff      	cmp	r4, #255	; 0xff
10013578:	d133      	bne.n	100135e2 <__aeabi_fsub+0x132>
1001357a:	2f00      	cmp	r7, #0
1001357c:	d100      	bne.n	10013580 <__aeabi_fsub+0xd0>
1001357e:	e090      	b.n	100136a2 <__aeabi_fsub+0x1f2>
10013580:	2280      	movs	r2, #128	; 0x80
10013582:	03d2      	lsls	r2, r2, #15
10013584:	0013      	movs	r3, r2
10013586:	433b      	orrs	r3, r7
10013588:	025b      	lsls	r3, r3, #9
1001358a:	0a5b      	lsrs	r3, r3, #9
1001358c:	24ff      	movs	r4, #255	; 0xff
1001358e:	e7bc      	b.n	1001350a <__aeabi_fsub+0x5a>
10013590:	2800      	cmp	r0, #0
10013592:	dd4f      	ble.n	10013634 <__aeabi_fsub+0x184>
10013594:	2e00      	cmp	r6, #0
10013596:	d02e      	beq.n	100135f6 <__aeabi_fsub+0x146>
10013598:	2cff      	cmp	r4, #255	; 0xff
1001359a:	d0a4      	beq.n	100134e6 <__aeabi_fsub+0x36>
1001359c:	2580      	movs	r5, #128	; 0x80
1001359e:	04ed      	lsls	r5, r5, #19
100135a0:	432a      	orrs	r2, r5
100135a2:	281b      	cmp	r0, #27
100135a4:	dd00      	ble.n	100135a8 <__aeabi_fsub+0xf8>
100135a6:	e097      	b.n	100136d8 <__aeabi_fsub+0x228>
100135a8:	0016      	movs	r6, r2
100135aa:	2520      	movs	r5, #32
100135ac:	40c6      	lsrs	r6, r0
100135ae:	1a28      	subs	r0, r5, r0
100135b0:	4082      	lsls	r2, r0
100135b2:	1e50      	subs	r0, r2, #1
100135b4:	4182      	sbcs	r2, r0
100135b6:	4332      	orrs	r2, r6
100135b8:	189b      	adds	r3, r3, r2
100135ba:	015a      	lsls	r2, r3, #5
100135bc:	d5d5      	bpl.n	1001356a <__aeabi_fsub+0xba>
100135be:	3401      	adds	r4, #1
100135c0:	2cff      	cmp	r4, #255	; 0xff
100135c2:	d06d      	beq.n	100136a0 <__aeabi_fsub+0x1f0>
100135c4:	2201      	movs	r2, #1
100135c6:	487b      	ldr	r0, [pc, #492]	; (100137b4 <__aeabi_fsub+0x304>)
100135c8:	401a      	ands	r2, r3
100135ca:	085b      	lsrs	r3, r3, #1
100135cc:	4003      	ands	r3, r0
100135ce:	4313      	orrs	r3, r2
100135d0:	000d      	movs	r5, r1
100135d2:	e788      	b.n	100134e6 <__aeabi_fsub+0x36>
100135d4:	2a00      	cmp	r2, #0
100135d6:	d000      	beq.n	100135da <__aeabi_fsub+0x12a>
100135d8:	e77a      	b.n	100134d0 <__aeabi_fsub+0x20>
100135da:	e777      	b.n	100134cc <__aeabi_fsub+0x1c>
100135dc:	1e03      	subs	r3, r0, #0
100135de:	d1c5      	bne.n	1001356c <__aeabi_fsub+0xbc>
100135e0:	2500      	movs	r5, #0
100135e2:	027b      	lsls	r3, r7, #9
100135e4:	0a5b      	lsrs	r3, r3, #9
100135e6:	b2e4      	uxtb	r4, r4
100135e8:	e78f      	b.n	1001350a <__aeabi_fsub+0x5a>
100135ea:	3801      	subs	r0, #1
100135ec:	2800      	cmp	r0, #0
100135ee:	d0a4      	beq.n	1001353a <__aeabi_fsub+0x8a>
100135f0:	2cff      	cmp	r4, #255	; 0xff
100135f2:	d197      	bne.n	10013524 <__aeabi_fsub+0x74>
100135f4:	e777      	b.n	100134e6 <__aeabi_fsub+0x36>
100135f6:	2a00      	cmp	r2, #0
100135f8:	d100      	bne.n	100135fc <__aeabi_fsub+0x14c>
100135fa:	e774      	b.n	100134e6 <__aeabi_fsub+0x36>
100135fc:	3801      	subs	r0, #1
100135fe:	2800      	cmp	r0, #0
10013600:	d0da      	beq.n	100135b8 <__aeabi_fsub+0x108>
10013602:	2cff      	cmp	r4, #255	; 0xff
10013604:	d1cd      	bne.n	100135a2 <__aeabi_fsub+0xf2>
10013606:	e76e      	b.n	100134e6 <__aeabi_fsub+0x36>
10013608:	2800      	cmp	r0, #0
1001360a:	d121      	bne.n	10013650 <__aeabi_fsub+0x1a0>
1001360c:	1c60      	adds	r0, r4, #1
1001360e:	b2c0      	uxtb	r0, r0
10013610:	2801      	cmp	r0, #1
10013612:	dd58      	ble.n	100136c6 <__aeabi_fsub+0x216>
10013614:	2780      	movs	r7, #128	; 0x80
10013616:	1a9e      	subs	r6, r3, r2
10013618:	04ff      	lsls	r7, r7, #19
1001361a:	4037      	ands	r7, r6
1001361c:	d02f      	beq.n	1001367e <__aeabi_fsub+0x1ce>
1001361e:	1ad6      	subs	r6, r2, r3
10013620:	000d      	movs	r5, r1
10013622:	e78f      	b.n	10013544 <__aeabi_fsub+0x94>
10013624:	2301      	movs	r3, #1
10013626:	401d      	ands	r5, r3
10013628:	2300      	movs	r3, #0
1001362a:	e76e      	b.n	1001350a <__aeabi_fsub+0x5a>
1001362c:	4b62      	ldr	r3, [pc, #392]	; (100137b8 <__aeabi_fsub+0x308>)
1001362e:	1a24      	subs	r4, r4, r0
10013630:	4033      	ands	r3, r6
10013632:	e758      	b.n	100134e6 <__aeabi_fsub+0x36>
10013634:	2800      	cmp	r0, #0
10013636:	d151      	bne.n	100136dc <__aeabi_fsub+0x22c>
10013638:	1c60      	adds	r0, r4, #1
1001363a:	b2c6      	uxtb	r6, r0
1001363c:	2e01      	cmp	r6, #1
1001363e:	dd33      	ble.n	100136a8 <__aeabi_fsub+0x1f8>
10013640:	28ff      	cmp	r0, #255	; 0xff
10013642:	d02d      	beq.n	100136a0 <__aeabi_fsub+0x1f0>
10013644:	189b      	adds	r3, r3, r2
10013646:	085b      	lsrs	r3, r3, #1
10013648:	0004      	movs	r4, r0
1001364a:	e74c      	b.n	100134e6 <__aeabi_fsub+0x36>
1001364c:	2201      	movs	r2, #1
1001364e:	e774      	b.n	1001353a <__aeabi_fsub+0x8a>
10013650:	2c00      	cmp	r4, #0
10013652:	d01a      	beq.n	1001368a <__aeabi_fsub+0x1da>
10013654:	2eff      	cmp	r6, #255	; 0xff
10013656:	d01f      	beq.n	10013698 <__aeabi_fsub+0x1e8>
10013658:	2480      	movs	r4, #128	; 0x80
1001365a:	04e4      	lsls	r4, r4, #19
1001365c:	4240      	negs	r0, r0
1001365e:	4323      	orrs	r3, r4
10013660:	281b      	cmp	r0, #27
10013662:	dd00      	ble.n	10013666 <__aeabi_fsub+0x1b6>
10013664:	e096      	b.n	10013794 <__aeabi_fsub+0x2e4>
10013666:	001d      	movs	r5, r3
10013668:	2420      	movs	r4, #32
1001366a:	40c5      	lsrs	r5, r0
1001366c:	1a20      	subs	r0, r4, r0
1001366e:	4083      	lsls	r3, r0
10013670:	1e58      	subs	r0, r3, #1
10013672:	4183      	sbcs	r3, r0
10013674:	432b      	orrs	r3, r5
10013676:	1ad3      	subs	r3, r2, r3
10013678:	0034      	movs	r4, r6
1001367a:	000d      	movs	r5, r1
1001367c:	e75e      	b.n	1001353c <__aeabi_fsub+0x8c>
1001367e:	2e00      	cmp	r6, #0
10013680:	d000      	beq.n	10013684 <__aeabi_fsub+0x1d4>
10013682:	e75f      	b.n	10013544 <__aeabi_fsub+0x94>
10013684:	2500      	movs	r5, #0
10013686:	2400      	movs	r4, #0
10013688:	e7ab      	b.n	100135e2 <__aeabi_fsub+0x132>
1001368a:	2b00      	cmp	r3, #0
1001368c:	d044      	beq.n	10013718 <__aeabi_fsub+0x268>
1001368e:	43c0      	mvns	r0, r0
10013690:	2800      	cmp	r0, #0
10013692:	d0f0      	beq.n	10013676 <__aeabi_fsub+0x1c6>
10013694:	2eff      	cmp	r6, #255	; 0xff
10013696:	d1e3      	bne.n	10013660 <__aeabi_fsub+0x1b0>
10013698:	0013      	movs	r3, r2
1001369a:	24ff      	movs	r4, #255	; 0xff
1001369c:	000d      	movs	r5, r1
1001369e:	e722      	b.n	100134e6 <__aeabi_fsub+0x36>
100136a0:	000d      	movs	r5, r1
100136a2:	24ff      	movs	r4, #255	; 0xff
100136a4:	2300      	movs	r3, #0
100136a6:	e730      	b.n	1001350a <__aeabi_fsub+0x5a>
100136a8:	2c00      	cmp	r4, #0
100136aa:	d15d      	bne.n	10013768 <__aeabi_fsub+0x2b8>
100136ac:	2b00      	cmp	r3, #0
100136ae:	d07d      	beq.n	100137ac <__aeabi_fsub+0x2fc>
100136b0:	2a00      	cmp	r2, #0
100136b2:	d100      	bne.n	100136b6 <__aeabi_fsub+0x206>
100136b4:	e717      	b.n	100134e6 <__aeabi_fsub+0x36>
100136b6:	189b      	adds	r3, r3, r2
100136b8:	015a      	lsls	r2, r3, #5
100136ba:	d400      	bmi.n	100136be <__aeabi_fsub+0x20e>
100136bc:	e756      	b.n	1001356c <__aeabi_fsub+0xbc>
100136be:	4a3e      	ldr	r2, [pc, #248]	; (100137b8 <__aeabi_fsub+0x308>)
100136c0:	0004      	movs	r4, r0
100136c2:	4013      	ands	r3, r2
100136c4:	e70f      	b.n	100134e6 <__aeabi_fsub+0x36>
100136c6:	2c00      	cmp	r4, #0
100136c8:	d11e      	bne.n	10013708 <__aeabi_fsub+0x258>
100136ca:	2b00      	cmp	r3, #0
100136cc:	d12f      	bne.n	1001372e <__aeabi_fsub+0x27e>
100136ce:	2a00      	cmp	r2, #0
100136d0:	d065      	beq.n	1001379e <__aeabi_fsub+0x2ee>
100136d2:	0013      	movs	r3, r2
100136d4:	000d      	movs	r5, r1
100136d6:	e706      	b.n	100134e6 <__aeabi_fsub+0x36>
100136d8:	2201      	movs	r2, #1
100136da:	e76d      	b.n	100135b8 <__aeabi_fsub+0x108>
100136dc:	2c00      	cmp	r4, #0
100136de:	d11f      	bne.n	10013720 <__aeabi_fsub+0x270>
100136e0:	2b00      	cmp	r3, #0
100136e2:	d059      	beq.n	10013798 <__aeabi_fsub+0x2e8>
100136e4:	43c0      	mvns	r0, r0
100136e6:	2800      	cmp	r0, #0
100136e8:	d00b      	beq.n	10013702 <__aeabi_fsub+0x252>
100136ea:	2eff      	cmp	r6, #255	; 0xff
100136ec:	d04f      	beq.n	1001378e <__aeabi_fsub+0x2de>
100136ee:	281b      	cmp	r0, #27
100136f0:	dc5e      	bgt.n	100137b0 <__aeabi_fsub+0x300>
100136f2:	001d      	movs	r5, r3
100136f4:	2420      	movs	r4, #32
100136f6:	40c5      	lsrs	r5, r0
100136f8:	1a20      	subs	r0, r4, r0
100136fa:	4083      	lsls	r3, r0
100136fc:	1e58      	subs	r0, r3, #1
100136fe:	4183      	sbcs	r3, r0
10013700:	432b      	orrs	r3, r5
10013702:	189b      	adds	r3, r3, r2
10013704:	0034      	movs	r4, r6
10013706:	e758      	b.n	100135ba <__aeabi_fsub+0x10a>
10013708:	2b00      	cmp	r3, #0
1001370a:	d11c      	bne.n	10013746 <__aeabi_fsub+0x296>
1001370c:	2a00      	cmp	r2, #0
1001370e:	d049      	beq.n	100137a4 <__aeabi_fsub+0x2f4>
10013710:	0013      	movs	r3, r2
10013712:	000d      	movs	r5, r1
10013714:	24ff      	movs	r4, #255	; 0xff
10013716:	e6e6      	b.n	100134e6 <__aeabi_fsub+0x36>
10013718:	0013      	movs	r3, r2
1001371a:	0034      	movs	r4, r6
1001371c:	000d      	movs	r5, r1
1001371e:	e6e2      	b.n	100134e6 <__aeabi_fsub+0x36>
10013720:	2eff      	cmp	r6, #255	; 0xff
10013722:	d034      	beq.n	1001378e <__aeabi_fsub+0x2de>
10013724:	2480      	movs	r4, #128	; 0x80
10013726:	04e4      	lsls	r4, r4, #19
10013728:	4240      	negs	r0, r0
1001372a:	4323      	orrs	r3, r4
1001372c:	e7df      	b.n	100136ee <__aeabi_fsub+0x23e>
1001372e:	2a00      	cmp	r2, #0
10013730:	d100      	bne.n	10013734 <__aeabi_fsub+0x284>
10013732:	e6d8      	b.n	100134e6 <__aeabi_fsub+0x36>
10013734:	2780      	movs	r7, #128	; 0x80
10013736:	1a98      	subs	r0, r3, r2
10013738:	04ff      	lsls	r7, r7, #19
1001373a:	4007      	ands	r7, r0
1001373c:	d100      	bne.n	10013740 <__aeabi_fsub+0x290>
1001373e:	e74d      	b.n	100135dc <__aeabi_fsub+0x12c>
10013740:	1ad3      	subs	r3, r2, r3
10013742:	000d      	movs	r5, r1
10013744:	e6cf      	b.n	100134e6 <__aeabi_fsub+0x36>
10013746:	24ff      	movs	r4, #255	; 0xff
10013748:	2a00      	cmp	r2, #0
1001374a:	d100      	bne.n	1001374e <__aeabi_fsub+0x29e>
1001374c:	e6cb      	b.n	100134e6 <__aeabi_fsub+0x36>
1001374e:	2080      	movs	r0, #128	; 0x80
10013750:	08db      	lsrs	r3, r3, #3
10013752:	03c0      	lsls	r0, r0, #15
10013754:	4203      	tst	r3, r0
10013756:	d004      	beq.n	10013762 <__aeabi_fsub+0x2b2>
10013758:	08d2      	lsrs	r2, r2, #3
1001375a:	4202      	tst	r2, r0
1001375c:	d101      	bne.n	10013762 <__aeabi_fsub+0x2b2>
1001375e:	0013      	movs	r3, r2
10013760:	000d      	movs	r5, r1
10013762:	00db      	lsls	r3, r3, #3
10013764:	24ff      	movs	r4, #255	; 0xff
10013766:	e6be      	b.n	100134e6 <__aeabi_fsub+0x36>
10013768:	2b00      	cmp	r3, #0
1001376a:	d010      	beq.n	1001378e <__aeabi_fsub+0x2de>
1001376c:	24ff      	movs	r4, #255	; 0xff
1001376e:	2a00      	cmp	r2, #0
10013770:	d100      	bne.n	10013774 <__aeabi_fsub+0x2c4>
10013772:	e6b8      	b.n	100134e6 <__aeabi_fsub+0x36>
10013774:	2080      	movs	r0, #128	; 0x80
10013776:	08db      	lsrs	r3, r3, #3
10013778:	03c0      	lsls	r0, r0, #15
1001377a:	4203      	tst	r3, r0
1001377c:	d003      	beq.n	10013786 <__aeabi_fsub+0x2d6>
1001377e:	08d2      	lsrs	r2, r2, #3
10013780:	4202      	tst	r2, r0
10013782:	d100      	bne.n	10013786 <__aeabi_fsub+0x2d6>
10013784:	0013      	movs	r3, r2
10013786:	00db      	lsls	r3, r3, #3
10013788:	000d      	movs	r5, r1
1001378a:	24ff      	movs	r4, #255	; 0xff
1001378c:	e6ab      	b.n	100134e6 <__aeabi_fsub+0x36>
1001378e:	0013      	movs	r3, r2
10013790:	24ff      	movs	r4, #255	; 0xff
10013792:	e6a8      	b.n	100134e6 <__aeabi_fsub+0x36>
10013794:	2301      	movs	r3, #1
10013796:	e76e      	b.n	10013676 <__aeabi_fsub+0x1c6>
10013798:	0013      	movs	r3, r2
1001379a:	0034      	movs	r4, r6
1001379c:	e6a3      	b.n	100134e6 <__aeabi_fsub+0x36>
1001379e:	2700      	movs	r7, #0
100137a0:	2500      	movs	r5, #0
100137a2:	e71e      	b.n	100135e2 <__aeabi_fsub+0x132>
100137a4:	2780      	movs	r7, #128	; 0x80
100137a6:	2500      	movs	r5, #0
100137a8:	03ff      	lsls	r7, r7, #15
100137aa:	e6e9      	b.n	10013580 <__aeabi_fsub+0xd0>
100137ac:	0013      	movs	r3, r2
100137ae:	e69a      	b.n	100134e6 <__aeabi_fsub+0x36>
100137b0:	2301      	movs	r3, #1
100137b2:	e7a6      	b.n	10013702 <__aeabi_fsub+0x252>
100137b4:	7dffffff 	.word	0x7dffffff
100137b8:	fbffffff 	.word	0xfbffffff

100137bc <__aeabi_f2iz>:
100137bc:	0243      	lsls	r3, r0, #9
100137be:	0a59      	lsrs	r1, r3, #9
100137c0:	0043      	lsls	r3, r0, #1
100137c2:	0fc2      	lsrs	r2, r0, #31
100137c4:	0e1b      	lsrs	r3, r3, #24
100137c6:	2000      	movs	r0, #0
100137c8:	2b7e      	cmp	r3, #126	; 0x7e
100137ca:	dd0e      	ble.n	100137ea <__aeabi_f2iz+0x2e>
100137cc:	2b9d      	cmp	r3, #157	; 0x9d
100137ce:	dc0d      	bgt.n	100137ec <__aeabi_f2iz+0x30>
100137d0:	2080      	movs	r0, #128	; 0x80
100137d2:	0400      	lsls	r0, r0, #16
100137d4:	4301      	orrs	r1, r0
100137d6:	2b95      	cmp	r3, #149	; 0x95
100137d8:	dc0b      	bgt.n	100137f2 <__aeabi_f2iz+0x36>
100137da:	2096      	movs	r0, #150	; 0x96
100137dc:	1ac3      	subs	r3, r0, r3
100137de:	40d9      	lsrs	r1, r3
100137e0:	000b      	movs	r3, r1
100137e2:	4258      	negs	r0, r3
100137e4:	2a00      	cmp	r2, #0
100137e6:	d100      	bne.n	100137ea <__aeabi_f2iz+0x2e>
100137e8:	0018      	movs	r0, r3
100137ea:	4770      	bx	lr
100137ec:	4b03      	ldr	r3, [pc, #12]	; (100137fc <__aeabi_f2iz+0x40>)
100137ee:	18d0      	adds	r0, r2, r3
100137f0:	e7fb      	b.n	100137ea <__aeabi_f2iz+0x2e>
100137f2:	3b96      	subs	r3, #150	; 0x96
100137f4:	4099      	lsls	r1, r3
100137f6:	000b      	movs	r3, r1
100137f8:	e7f3      	b.n	100137e2 <__aeabi_f2iz+0x26>
100137fa:	46c0      	nop			; (mov r8, r8)
100137fc:	7fffffff 	.word	0x7fffffff

10013800 <__aeabi_i2f>:
10013800:	b570      	push	{r4, r5, r6, lr}
10013802:	2800      	cmp	r0, #0
10013804:	d030      	beq.n	10013868 <__aeabi_i2f+0x68>
10013806:	17c3      	asrs	r3, r0, #31
10013808:	18c5      	adds	r5, r0, r3
1001380a:	405d      	eors	r5, r3
1001380c:	0fc4      	lsrs	r4, r0, #31
1001380e:	0028      	movs	r0, r5
10013810:	f001 ff4a 	bl	100156a8 <__clzsi2>
10013814:	239e      	movs	r3, #158	; 0x9e
10013816:	1a1b      	subs	r3, r3, r0
10013818:	2b96      	cmp	r3, #150	; 0x96
1001381a:	dc0d      	bgt.n	10013838 <__aeabi_i2f+0x38>
1001381c:	2296      	movs	r2, #150	; 0x96
1001381e:	1ad2      	subs	r2, r2, r3
10013820:	4095      	lsls	r5, r2
10013822:	026a      	lsls	r2, r5, #9
10013824:	0a52      	lsrs	r2, r2, #9
10013826:	b2d8      	uxtb	r0, r3
10013828:	0252      	lsls	r2, r2, #9
1001382a:	05c0      	lsls	r0, r0, #23
1001382c:	0a52      	lsrs	r2, r2, #9
1001382e:	07e4      	lsls	r4, r4, #31
10013830:	4302      	orrs	r2, r0
10013832:	4322      	orrs	r2, r4
10013834:	0010      	movs	r0, r2
10013836:	bd70      	pop	{r4, r5, r6, pc}
10013838:	2b99      	cmp	r3, #153	; 0x99
1001383a:	dc19      	bgt.n	10013870 <__aeabi_i2f+0x70>
1001383c:	2299      	movs	r2, #153	; 0x99
1001383e:	1ad2      	subs	r2, r2, r3
10013840:	4095      	lsls	r5, r2
10013842:	4a12      	ldr	r2, [pc, #72]	; (1001388c <__aeabi_i2f+0x8c>)
10013844:	402a      	ands	r2, r5
10013846:	0769      	lsls	r1, r5, #29
10013848:	d004      	beq.n	10013854 <__aeabi_i2f+0x54>
1001384a:	210f      	movs	r1, #15
1001384c:	400d      	ands	r5, r1
1001384e:	2d04      	cmp	r5, #4
10013850:	d000      	beq.n	10013854 <__aeabi_i2f+0x54>
10013852:	3204      	adds	r2, #4
10013854:	0151      	lsls	r1, r2, #5
10013856:	d503      	bpl.n	10013860 <__aeabi_i2f+0x60>
10013858:	4b0c      	ldr	r3, [pc, #48]	; (1001388c <__aeabi_i2f+0x8c>)
1001385a:	401a      	ands	r2, r3
1001385c:	239f      	movs	r3, #159	; 0x9f
1001385e:	1a1b      	subs	r3, r3, r0
10013860:	0192      	lsls	r2, r2, #6
10013862:	0a52      	lsrs	r2, r2, #9
10013864:	b2d8      	uxtb	r0, r3
10013866:	e7df      	b.n	10013828 <__aeabi_i2f+0x28>
10013868:	2400      	movs	r4, #0
1001386a:	2000      	movs	r0, #0
1001386c:	2200      	movs	r2, #0
1001386e:	e7db      	b.n	10013828 <__aeabi_i2f+0x28>
10013870:	2205      	movs	r2, #5
10013872:	002e      	movs	r6, r5
10013874:	1a12      	subs	r2, r2, r0
10013876:	21b9      	movs	r1, #185	; 0xb9
10013878:	40d6      	lsrs	r6, r2
1001387a:	002a      	movs	r2, r5
1001387c:	1ac9      	subs	r1, r1, r3
1001387e:	408a      	lsls	r2, r1
10013880:	1e55      	subs	r5, r2, #1
10013882:	41aa      	sbcs	r2, r5
10013884:	0035      	movs	r5, r6
10013886:	4315      	orrs	r5, r2
10013888:	e7db      	b.n	10013842 <__aeabi_i2f+0x42>
1001388a:	46c0      	nop			; (mov r8, r8)
1001388c:	fbffffff 	.word	0xfbffffff

10013890 <__aeabi_ui2f>:
10013890:	b570      	push	{r4, r5, r6, lr}
10013892:	1e04      	subs	r4, r0, #0
10013894:	d028      	beq.n	100138e8 <__aeabi_ui2f+0x58>
10013896:	f001 ff07 	bl	100156a8 <__clzsi2>
1001389a:	239e      	movs	r3, #158	; 0x9e
1001389c:	1a1b      	subs	r3, r3, r0
1001389e:	2b96      	cmp	r3, #150	; 0x96
100138a0:	dc0a      	bgt.n	100138b8 <__aeabi_ui2f+0x28>
100138a2:	2296      	movs	r2, #150	; 0x96
100138a4:	1ad2      	subs	r2, r2, r3
100138a6:	4094      	lsls	r4, r2
100138a8:	0262      	lsls	r2, r4, #9
100138aa:	0a52      	lsrs	r2, r2, #9
100138ac:	b2d8      	uxtb	r0, r3
100138ae:	0252      	lsls	r2, r2, #9
100138b0:	0a52      	lsrs	r2, r2, #9
100138b2:	05c0      	lsls	r0, r0, #23
100138b4:	4310      	orrs	r0, r2
100138b6:	bd70      	pop	{r4, r5, r6, pc}
100138b8:	2b99      	cmp	r3, #153	; 0x99
100138ba:	dc18      	bgt.n	100138ee <__aeabi_ui2f+0x5e>
100138bc:	2299      	movs	r2, #153	; 0x99
100138be:	1ad2      	subs	r2, r2, r3
100138c0:	4094      	lsls	r4, r2
100138c2:	4a11      	ldr	r2, [pc, #68]	; (10013908 <__aeabi_ui2f+0x78>)
100138c4:	4022      	ands	r2, r4
100138c6:	0761      	lsls	r1, r4, #29
100138c8:	d004      	beq.n	100138d4 <__aeabi_ui2f+0x44>
100138ca:	210f      	movs	r1, #15
100138cc:	400c      	ands	r4, r1
100138ce:	2c04      	cmp	r4, #4
100138d0:	d000      	beq.n	100138d4 <__aeabi_ui2f+0x44>
100138d2:	3204      	adds	r2, #4
100138d4:	0151      	lsls	r1, r2, #5
100138d6:	d503      	bpl.n	100138e0 <__aeabi_ui2f+0x50>
100138d8:	4b0b      	ldr	r3, [pc, #44]	; (10013908 <__aeabi_ui2f+0x78>)
100138da:	401a      	ands	r2, r3
100138dc:	239f      	movs	r3, #159	; 0x9f
100138de:	1a1b      	subs	r3, r3, r0
100138e0:	0192      	lsls	r2, r2, #6
100138e2:	0a52      	lsrs	r2, r2, #9
100138e4:	b2d8      	uxtb	r0, r3
100138e6:	e7e2      	b.n	100138ae <__aeabi_ui2f+0x1e>
100138e8:	2000      	movs	r0, #0
100138ea:	2200      	movs	r2, #0
100138ec:	e7df      	b.n	100138ae <__aeabi_ui2f+0x1e>
100138ee:	2205      	movs	r2, #5
100138f0:	0025      	movs	r5, r4
100138f2:	1a12      	subs	r2, r2, r0
100138f4:	21b9      	movs	r1, #185	; 0xb9
100138f6:	40d5      	lsrs	r5, r2
100138f8:	0022      	movs	r2, r4
100138fa:	1ac9      	subs	r1, r1, r3
100138fc:	408a      	lsls	r2, r1
100138fe:	1e54      	subs	r4, r2, #1
10013900:	41a2      	sbcs	r2, r4
10013902:	002c      	movs	r4, r5
10013904:	4314      	orrs	r4, r2
10013906:	e7dc      	b.n	100138c2 <__aeabi_ui2f+0x32>
10013908:	fbffffff 	.word	0xfbffffff

1001390c <__aeabi_dadd>:
1001390c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001390e:	4656      	mov	r6, sl
10013910:	465f      	mov	r7, fp
10013912:	464d      	mov	r5, r9
10013914:	4644      	mov	r4, r8
10013916:	b4f0      	push	{r4, r5, r6, r7}
10013918:	000f      	movs	r7, r1
1001391a:	0ffd      	lsrs	r5, r7, #31
1001391c:	46aa      	mov	sl, r5
1001391e:	0309      	lsls	r1, r1, #12
10013920:	007c      	lsls	r4, r7, #1
10013922:	002e      	movs	r6, r5
10013924:	005f      	lsls	r7, r3, #1
10013926:	0f45      	lsrs	r5, r0, #29
10013928:	0a49      	lsrs	r1, r1, #9
1001392a:	0d7f      	lsrs	r7, r7, #21
1001392c:	4329      	orrs	r1, r5
1001392e:	00c5      	lsls	r5, r0, #3
10013930:	0318      	lsls	r0, r3, #12
10013932:	46bc      	mov	ip, r7
10013934:	0a40      	lsrs	r0, r0, #9
10013936:	0f57      	lsrs	r7, r2, #29
10013938:	0d64      	lsrs	r4, r4, #21
1001393a:	0fdb      	lsrs	r3, r3, #31
1001393c:	4338      	orrs	r0, r7
1001393e:	00d2      	lsls	r2, r2, #3
10013940:	459a      	cmp	sl, r3
10013942:	d100      	bne.n	10013946 <__aeabi_dadd+0x3a>
10013944:	e0aa      	b.n	10013a9c <__aeabi_dadd+0x190>
10013946:	4666      	mov	r6, ip
10013948:	1ba6      	subs	r6, r4, r6
1001394a:	2e00      	cmp	r6, #0
1001394c:	dc00      	bgt.n	10013950 <__aeabi_dadd+0x44>
1001394e:	e0ff      	b.n	10013b50 <__aeabi_dadd+0x244>
10013950:	4663      	mov	r3, ip
10013952:	2b00      	cmp	r3, #0
10013954:	d139      	bne.n	100139ca <__aeabi_dadd+0xbe>
10013956:	0003      	movs	r3, r0
10013958:	4313      	orrs	r3, r2
1001395a:	d000      	beq.n	1001395e <__aeabi_dadd+0x52>
1001395c:	e0d9      	b.n	10013b12 <__aeabi_dadd+0x206>
1001395e:	076b      	lsls	r3, r5, #29
10013960:	d009      	beq.n	10013976 <__aeabi_dadd+0x6a>
10013962:	230f      	movs	r3, #15
10013964:	402b      	ands	r3, r5
10013966:	2b04      	cmp	r3, #4
10013968:	d005      	beq.n	10013976 <__aeabi_dadd+0x6a>
1001396a:	1d2b      	adds	r3, r5, #4
1001396c:	42ab      	cmp	r3, r5
1001396e:	41ad      	sbcs	r5, r5
10013970:	426d      	negs	r5, r5
10013972:	1949      	adds	r1, r1, r5
10013974:	001d      	movs	r5, r3
10013976:	020b      	lsls	r3, r1, #8
10013978:	d400      	bmi.n	1001397c <__aeabi_dadd+0x70>
1001397a:	e082      	b.n	10013a82 <__aeabi_dadd+0x176>
1001397c:	4bca      	ldr	r3, [pc, #808]	; (10013ca8 <__aeabi_dadd+0x39c>)
1001397e:	3401      	adds	r4, #1
10013980:	429c      	cmp	r4, r3
10013982:	d100      	bne.n	10013986 <__aeabi_dadd+0x7a>
10013984:	e0fe      	b.n	10013b84 <__aeabi_dadd+0x278>
10013986:	000a      	movs	r2, r1
10013988:	4656      	mov	r6, sl
1001398a:	4bc8      	ldr	r3, [pc, #800]	; (10013cac <__aeabi_dadd+0x3a0>)
1001398c:	08ed      	lsrs	r5, r5, #3
1001398e:	401a      	ands	r2, r3
10013990:	0750      	lsls	r0, r2, #29
10013992:	0564      	lsls	r4, r4, #21
10013994:	0252      	lsls	r2, r2, #9
10013996:	4305      	orrs	r5, r0
10013998:	0b12      	lsrs	r2, r2, #12
1001399a:	0d64      	lsrs	r4, r4, #21
1001399c:	2100      	movs	r1, #0
1001399e:	0312      	lsls	r2, r2, #12
100139a0:	0d0b      	lsrs	r3, r1, #20
100139a2:	051b      	lsls	r3, r3, #20
100139a4:	0564      	lsls	r4, r4, #21
100139a6:	0b12      	lsrs	r2, r2, #12
100139a8:	431a      	orrs	r2, r3
100139aa:	0863      	lsrs	r3, r4, #1
100139ac:	4cc0      	ldr	r4, [pc, #768]	; (10013cb0 <__aeabi_dadd+0x3a4>)
100139ae:	07f6      	lsls	r6, r6, #31
100139b0:	4014      	ands	r4, r2
100139b2:	431c      	orrs	r4, r3
100139b4:	0064      	lsls	r4, r4, #1
100139b6:	0864      	lsrs	r4, r4, #1
100139b8:	4334      	orrs	r4, r6
100139ba:	0028      	movs	r0, r5
100139bc:	0021      	movs	r1, r4
100139be:	bc3c      	pop	{r2, r3, r4, r5}
100139c0:	4690      	mov	r8, r2
100139c2:	4699      	mov	r9, r3
100139c4:	46a2      	mov	sl, r4
100139c6:	46ab      	mov	fp, r5
100139c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100139ca:	4bb7      	ldr	r3, [pc, #732]	; (10013ca8 <__aeabi_dadd+0x39c>)
100139cc:	429c      	cmp	r4, r3
100139ce:	d0c6      	beq.n	1001395e <__aeabi_dadd+0x52>
100139d0:	2380      	movs	r3, #128	; 0x80
100139d2:	041b      	lsls	r3, r3, #16
100139d4:	4318      	orrs	r0, r3
100139d6:	2e38      	cmp	r6, #56	; 0x38
100139d8:	dd00      	ble.n	100139dc <__aeabi_dadd+0xd0>
100139da:	e0eb      	b.n	10013bb4 <__aeabi_dadd+0x2a8>
100139dc:	2e1f      	cmp	r6, #31
100139de:	dd00      	ble.n	100139e2 <__aeabi_dadd+0xd6>
100139e0:	e11e      	b.n	10013c20 <__aeabi_dadd+0x314>
100139e2:	2320      	movs	r3, #32
100139e4:	1b9b      	subs	r3, r3, r6
100139e6:	469c      	mov	ip, r3
100139e8:	0003      	movs	r3, r0
100139ea:	4667      	mov	r7, ip
100139ec:	40bb      	lsls	r3, r7
100139ee:	4698      	mov	r8, r3
100139f0:	0013      	movs	r3, r2
100139f2:	4647      	mov	r7, r8
100139f4:	40f3      	lsrs	r3, r6
100139f6:	433b      	orrs	r3, r7
100139f8:	4667      	mov	r7, ip
100139fa:	40ba      	lsls	r2, r7
100139fc:	1e57      	subs	r7, r2, #1
100139fe:	41ba      	sbcs	r2, r7
10013a00:	4313      	orrs	r3, r2
10013a02:	0002      	movs	r2, r0
10013a04:	40f2      	lsrs	r2, r6
10013a06:	1aeb      	subs	r3, r5, r3
10013a08:	429d      	cmp	r5, r3
10013a0a:	41b6      	sbcs	r6, r6
10013a0c:	001d      	movs	r5, r3
10013a0e:	1a8a      	subs	r2, r1, r2
10013a10:	4276      	negs	r6, r6
10013a12:	1b91      	subs	r1, r2, r6
10013a14:	020b      	lsls	r3, r1, #8
10013a16:	d531      	bpl.n	10013a7c <__aeabi_dadd+0x170>
10013a18:	024a      	lsls	r2, r1, #9
10013a1a:	0a56      	lsrs	r6, r2, #9
10013a1c:	2e00      	cmp	r6, #0
10013a1e:	d100      	bne.n	10013a22 <__aeabi_dadd+0x116>
10013a20:	e0b4      	b.n	10013b8c <__aeabi_dadd+0x280>
10013a22:	0030      	movs	r0, r6
10013a24:	f001 fe40 	bl	100156a8 <__clzsi2>
10013a28:	0003      	movs	r3, r0
10013a2a:	3b08      	subs	r3, #8
10013a2c:	2b1f      	cmp	r3, #31
10013a2e:	dd00      	ble.n	10013a32 <__aeabi_dadd+0x126>
10013a30:	e0b5      	b.n	10013b9e <__aeabi_dadd+0x292>
10013a32:	2220      	movs	r2, #32
10013a34:	0029      	movs	r1, r5
10013a36:	1ad2      	subs	r2, r2, r3
10013a38:	40d1      	lsrs	r1, r2
10013a3a:	409e      	lsls	r6, r3
10013a3c:	000a      	movs	r2, r1
10013a3e:	409d      	lsls	r5, r3
10013a40:	4332      	orrs	r2, r6
10013a42:	429c      	cmp	r4, r3
10013a44:	dd00      	ble.n	10013a48 <__aeabi_dadd+0x13c>
10013a46:	e0b1      	b.n	10013bac <__aeabi_dadd+0x2a0>
10013a48:	1b1c      	subs	r4, r3, r4
10013a4a:	1c63      	adds	r3, r4, #1
10013a4c:	2b1f      	cmp	r3, #31
10013a4e:	dd00      	ble.n	10013a52 <__aeabi_dadd+0x146>
10013a50:	e0d5      	b.n	10013bfe <__aeabi_dadd+0x2f2>
10013a52:	2120      	movs	r1, #32
10013a54:	0014      	movs	r4, r2
10013a56:	0028      	movs	r0, r5
10013a58:	1ac9      	subs	r1, r1, r3
10013a5a:	408c      	lsls	r4, r1
10013a5c:	40d8      	lsrs	r0, r3
10013a5e:	408d      	lsls	r5, r1
10013a60:	4304      	orrs	r4, r0
10013a62:	40da      	lsrs	r2, r3
10013a64:	1e68      	subs	r0, r5, #1
10013a66:	4185      	sbcs	r5, r0
10013a68:	0011      	movs	r1, r2
10013a6a:	4325      	orrs	r5, r4
10013a6c:	2400      	movs	r4, #0
10013a6e:	e776      	b.n	1001395e <__aeabi_dadd+0x52>
10013a70:	4641      	mov	r1, r8
10013a72:	4331      	orrs	r1, r6
10013a74:	d100      	bne.n	10013a78 <__aeabi_dadd+0x16c>
10013a76:	e234      	b.n	10013ee2 <__aeabi_dadd+0x5d6>
10013a78:	0031      	movs	r1, r6
10013a7a:	4645      	mov	r5, r8
10013a7c:	076b      	lsls	r3, r5, #29
10013a7e:	d000      	beq.n	10013a82 <__aeabi_dadd+0x176>
10013a80:	e76f      	b.n	10013962 <__aeabi_dadd+0x56>
10013a82:	4656      	mov	r6, sl
10013a84:	0748      	lsls	r0, r1, #29
10013a86:	08ed      	lsrs	r5, r5, #3
10013a88:	08c9      	lsrs	r1, r1, #3
10013a8a:	4305      	orrs	r5, r0
10013a8c:	4b86      	ldr	r3, [pc, #536]	; (10013ca8 <__aeabi_dadd+0x39c>)
10013a8e:	429c      	cmp	r4, r3
10013a90:	d035      	beq.n	10013afe <__aeabi_dadd+0x1f2>
10013a92:	030a      	lsls	r2, r1, #12
10013a94:	0564      	lsls	r4, r4, #21
10013a96:	0b12      	lsrs	r2, r2, #12
10013a98:	0d64      	lsrs	r4, r4, #21
10013a9a:	e77f      	b.n	1001399c <__aeabi_dadd+0x90>
10013a9c:	4663      	mov	r3, ip
10013a9e:	1ae3      	subs	r3, r4, r3
10013aa0:	469b      	mov	fp, r3
10013aa2:	2b00      	cmp	r3, #0
10013aa4:	dc00      	bgt.n	10013aa8 <__aeabi_dadd+0x19c>
10013aa6:	e08b      	b.n	10013bc0 <__aeabi_dadd+0x2b4>
10013aa8:	4667      	mov	r7, ip
10013aaa:	2f00      	cmp	r7, #0
10013aac:	d03c      	beq.n	10013b28 <__aeabi_dadd+0x21c>
10013aae:	4f7e      	ldr	r7, [pc, #504]	; (10013ca8 <__aeabi_dadd+0x39c>)
10013ab0:	42bc      	cmp	r4, r7
10013ab2:	d100      	bne.n	10013ab6 <__aeabi_dadd+0x1aa>
10013ab4:	e753      	b.n	1001395e <__aeabi_dadd+0x52>
10013ab6:	2780      	movs	r7, #128	; 0x80
10013ab8:	043f      	lsls	r7, r7, #16
10013aba:	4338      	orrs	r0, r7
10013abc:	465b      	mov	r3, fp
10013abe:	2b38      	cmp	r3, #56	; 0x38
10013ac0:	dc00      	bgt.n	10013ac4 <__aeabi_dadd+0x1b8>
10013ac2:	e0f7      	b.n	10013cb4 <__aeabi_dadd+0x3a8>
10013ac4:	4302      	orrs	r2, r0
10013ac6:	1e50      	subs	r0, r2, #1
10013ac8:	4182      	sbcs	r2, r0
10013aca:	2000      	movs	r0, #0
10013acc:	b2d2      	uxtb	r2, r2
10013ace:	1953      	adds	r3, r2, r5
10013ad0:	1842      	adds	r2, r0, r1
10013ad2:	42ab      	cmp	r3, r5
10013ad4:	4189      	sbcs	r1, r1
10013ad6:	001d      	movs	r5, r3
10013ad8:	4249      	negs	r1, r1
10013ada:	1889      	adds	r1, r1, r2
10013adc:	020b      	lsls	r3, r1, #8
10013ade:	d5cd      	bpl.n	10013a7c <__aeabi_dadd+0x170>
10013ae0:	4b71      	ldr	r3, [pc, #452]	; (10013ca8 <__aeabi_dadd+0x39c>)
10013ae2:	3401      	adds	r4, #1
10013ae4:	429c      	cmp	r4, r3
10013ae6:	d100      	bne.n	10013aea <__aeabi_dadd+0x1de>
10013ae8:	e13d      	b.n	10013d66 <__aeabi_dadd+0x45a>
10013aea:	2001      	movs	r0, #1
10013aec:	4a6f      	ldr	r2, [pc, #444]	; (10013cac <__aeabi_dadd+0x3a0>)
10013aee:	086b      	lsrs	r3, r5, #1
10013af0:	400a      	ands	r2, r1
10013af2:	4028      	ands	r0, r5
10013af4:	4318      	orrs	r0, r3
10013af6:	07d5      	lsls	r5, r2, #31
10013af8:	4305      	orrs	r5, r0
10013afa:	0851      	lsrs	r1, r2, #1
10013afc:	e72f      	b.n	1001395e <__aeabi_dadd+0x52>
10013afe:	002b      	movs	r3, r5
10013b00:	430b      	orrs	r3, r1
10013b02:	d100      	bne.n	10013b06 <__aeabi_dadd+0x1fa>
10013b04:	e1cb      	b.n	10013e9e <__aeabi_dadd+0x592>
10013b06:	2380      	movs	r3, #128	; 0x80
10013b08:	031b      	lsls	r3, r3, #12
10013b0a:	430b      	orrs	r3, r1
10013b0c:	031a      	lsls	r2, r3, #12
10013b0e:	0b12      	lsrs	r2, r2, #12
10013b10:	e744      	b.n	1001399c <__aeabi_dadd+0x90>
10013b12:	3e01      	subs	r6, #1
10013b14:	2e00      	cmp	r6, #0
10013b16:	d16d      	bne.n	10013bf4 <__aeabi_dadd+0x2e8>
10013b18:	1aae      	subs	r6, r5, r2
10013b1a:	42b5      	cmp	r5, r6
10013b1c:	419b      	sbcs	r3, r3
10013b1e:	1a09      	subs	r1, r1, r0
10013b20:	425b      	negs	r3, r3
10013b22:	1ac9      	subs	r1, r1, r3
10013b24:	0035      	movs	r5, r6
10013b26:	e775      	b.n	10013a14 <__aeabi_dadd+0x108>
10013b28:	0007      	movs	r7, r0
10013b2a:	4317      	orrs	r7, r2
10013b2c:	d100      	bne.n	10013b30 <__aeabi_dadd+0x224>
10013b2e:	e716      	b.n	1001395e <__aeabi_dadd+0x52>
10013b30:	2301      	movs	r3, #1
10013b32:	425b      	negs	r3, r3
10013b34:	469c      	mov	ip, r3
10013b36:	44e3      	add	fp, ip
10013b38:	465b      	mov	r3, fp
10013b3a:	2b00      	cmp	r3, #0
10013b3c:	d000      	beq.n	10013b40 <__aeabi_dadd+0x234>
10013b3e:	e0e0      	b.n	10013d02 <__aeabi_dadd+0x3f6>
10013b40:	18aa      	adds	r2, r5, r2
10013b42:	42aa      	cmp	r2, r5
10013b44:	419b      	sbcs	r3, r3
10013b46:	1809      	adds	r1, r1, r0
10013b48:	425b      	negs	r3, r3
10013b4a:	1859      	adds	r1, r3, r1
10013b4c:	0015      	movs	r5, r2
10013b4e:	e7c5      	b.n	10013adc <__aeabi_dadd+0x1d0>
10013b50:	2e00      	cmp	r6, #0
10013b52:	d175      	bne.n	10013c40 <__aeabi_dadd+0x334>
10013b54:	1c66      	adds	r6, r4, #1
10013b56:	0576      	lsls	r6, r6, #21
10013b58:	0d76      	lsrs	r6, r6, #21
10013b5a:	2e01      	cmp	r6, #1
10013b5c:	dc00      	bgt.n	10013b60 <__aeabi_dadd+0x254>
10013b5e:	e0f3      	b.n	10013d48 <__aeabi_dadd+0x43c>
10013b60:	1aae      	subs	r6, r5, r2
10013b62:	46b0      	mov	r8, r6
10013b64:	4545      	cmp	r5, r8
10013b66:	41bf      	sbcs	r7, r7
10013b68:	1a0e      	subs	r6, r1, r0
10013b6a:	427f      	negs	r7, r7
10013b6c:	1bf6      	subs	r6, r6, r7
10013b6e:	0237      	lsls	r7, r6, #8
10013b70:	d400      	bmi.n	10013b74 <__aeabi_dadd+0x268>
10013b72:	e08f      	b.n	10013c94 <__aeabi_dadd+0x388>
10013b74:	1b55      	subs	r5, r2, r5
10013b76:	42aa      	cmp	r2, r5
10013b78:	41b6      	sbcs	r6, r6
10013b7a:	1a41      	subs	r1, r0, r1
10013b7c:	4276      	negs	r6, r6
10013b7e:	1b8e      	subs	r6, r1, r6
10013b80:	469a      	mov	sl, r3
10013b82:	e74b      	b.n	10013a1c <__aeabi_dadd+0x110>
10013b84:	4656      	mov	r6, sl
10013b86:	2200      	movs	r2, #0
10013b88:	2500      	movs	r5, #0
10013b8a:	e707      	b.n	1001399c <__aeabi_dadd+0x90>
10013b8c:	0028      	movs	r0, r5
10013b8e:	f001 fd8b 	bl	100156a8 <__clzsi2>
10013b92:	3020      	adds	r0, #32
10013b94:	0003      	movs	r3, r0
10013b96:	3b08      	subs	r3, #8
10013b98:	2b1f      	cmp	r3, #31
10013b9a:	dc00      	bgt.n	10013b9e <__aeabi_dadd+0x292>
10013b9c:	e749      	b.n	10013a32 <__aeabi_dadd+0x126>
10013b9e:	002a      	movs	r2, r5
10013ba0:	3828      	subs	r0, #40	; 0x28
10013ba2:	4082      	lsls	r2, r0
10013ba4:	2500      	movs	r5, #0
10013ba6:	429c      	cmp	r4, r3
10013ba8:	dc00      	bgt.n	10013bac <__aeabi_dadd+0x2a0>
10013baa:	e74d      	b.n	10013a48 <__aeabi_dadd+0x13c>
10013bac:	493f      	ldr	r1, [pc, #252]	; (10013cac <__aeabi_dadd+0x3a0>)
10013bae:	1ae4      	subs	r4, r4, r3
10013bb0:	4011      	ands	r1, r2
10013bb2:	e6d4      	b.n	1001395e <__aeabi_dadd+0x52>
10013bb4:	4302      	orrs	r2, r0
10013bb6:	1e50      	subs	r0, r2, #1
10013bb8:	4182      	sbcs	r2, r0
10013bba:	b2d3      	uxtb	r3, r2
10013bbc:	2200      	movs	r2, #0
10013bbe:	e722      	b.n	10013a06 <__aeabi_dadd+0xfa>
10013bc0:	2b00      	cmp	r3, #0
10013bc2:	d000      	beq.n	10013bc6 <__aeabi_dadd+0x2ba>
10013bc4:	e0f3      	b.n	10013dae <__aeabi_dadd+0x4a2>
10013bc6:	1c63      	adds	r3, r4, #1
10013bc8:	469c      	mov	ip, r3
10013bca:	055b      	lsls	r3, r3, #21
10013bcc:	0d5b      	lsrs	r3, r3, #21
10013bce:	2b01      	cmp	r3, #1
10013bd0:	dc00      	bgt.n	10013bd4 <__aeabi_dadd+0x2c8>
10013bd2:	e09f      	b.n	10013d14 <__aeabi_dadd+0x408>
10013bd4:	4b34      	ldr	r3, [pc, #208]	; (10013ca8 <__aeabi_dadd+0x39c>)
10013bd6:	459c      	cmp	ip, r3
10013bd8:	d100      	bne.n	10013bdc <__aeabi_dadd+0x2d0>
10013bda:	e0c3      	b.n	10013d64 <__aeabi_dadd+0x458>
10013bdc:	18aa      	adds	r2, r5, r2
10013bde:	1809      	adds	r1, r1, r0
10013be0:	42aa      	cmp	r2, r5
10013be2:	4180      	sbcs	r0, r0
10013be4:	4240      	negs	r0, r0
10013be6:	1841      	adds	r1, r0, r1
10013be8:	07cd      	lsls	r5, r1, #31
10013bea:	0852      	lsrs	r2, r2, #1
10013bec:	4315      	orrs	r5, r2
10013bee:	0849      	lsrs	r1, r1, #1
10013bf0:	4664      	mov	r4, ip
10013bf2:	e6b4      	b.n	1001395e <__aeabi_dadd+0x52>
10013bf4:	4b2c      	ldr	r3, [pc, #176]	; (10013ca8 <__aeabi_dadd+0x39c>)
10013bf6:	429c      	cmp	r4, r3
10013bf8:	d000      	beq.n	10013bfc <__aeabi_dadd+0x2f0>
10013bfa:	e6ec      	b.n	100139d6 <__aeabi_dadd+0xca>
10013bfc:	e6af      	b.n	1001395e <__aeabi_dadd+0x52>
10013bfe:	0011      	movs	r1, r2
10013c00:	3c1f      	subs	r4, #31
10013c02:	40e1      	lsrs	r1, r4
10013c04:	000c      	movs	r4, r1
10013c06:	2b20      	cmp	r3, #32
10013c08:	d100      	bne.n	10013c0c <__aeabi_dadd+0x300>
10013c0a:	e07f      	b.n	10013d0c <__aeabi_dadd+0x400>
10013c0c:	2140      	movs	r1, #64	; 0x40
10013c0e:	1acb      	subs	r3, r1, r3
10013c10:	409a      	lsls	r2, r3
10013c12:	4315      	orrs	r5, r2
10013c14:	1e6a      	subs	r2, r5, #1
10013c16:	4195      	sbcs	r5, r2
10013c18:	2100      	movs	r1, #0
10013c1a:	4325      	orrs	r5, r4
10013c1c:	2400      	movs	r4, #0
10013c1e:	e72d      	b.n	10013a7c <__aeabi_dadd+0x170>
10013c20:	0033      	movs	r3, r6
10013c22:	0007      	movs	r7, r0
10013c24:	3b20      	subs	r3, #32
10013c26:	40df      	lsrs	r7, r3
10013c28:	003b      	movs	r3, r7
10013c2a:	2e20      	cmp	r6, #32
10013c2c:	d070      	beq.n	10013d10 <__aeabi_dadd+0x404>
10013c2e:	2740      	movs	r7, #64	; 0x40
10013c30:	1bbe      	subs	r6, r7, r6
10013c32:	40b0      	lsls	r0, r6
10013c34:	4302      	orrs	r2, r0
10013c36:	1e50      	subs	r0, r2, #1
10013c38:	4182      	sbcs	r2, r0
10013c3a:	4313      	orrs	r3, r2
10013c3c:	2200      	movs	r2, #0
10013c3e:	e6e2      	b.n	10013a06 <__aeabi_dadd+0xfa>
10013c40:	2c00      	cmp	r4, #0
10013c42:	d04f      	beq.n	10013ce4 <__aeabi_dadd+0x3d8>
10013c44:	4c18      	ldr	r4, [pc, #96]	; (10013ca8 <__aeabi_dadd+0x39c>)
10013c46:	45a4      	cmp	ip, r4
10013c48:	d100      	bne.n	10013c4c <__aeabi_dadd+0x340>
10013c4a:	e0ab      	b.n	10013da4 <__aeabi_dadd+0x498>
10013c4c:	2480      	movs	r4, #128	; 0x80
10013c4e:	0424      	lsls	r4, r4, #16
10013c50:	4276      	negs	r6, r6
10013c52:	4321      	orrs	r1, r4
10013c54:	2e38      	cmp	r6, #56	; 0x38
10013c56:	dd00      	ble.n	10013c5a <__aeabi_dadd+0x34e>
10013c58:	e0df      	b.n	10013e1a <__aeabi_dadd+0x50e>
10013c5a:	2e1f      	cmp	r6, #31
10013c5c:	dd00      	ble.n	10013c60 <__aeabi_dadd+0x354>
10013c5e:	e143      	b.n	10013ee8 <__aeabi_dadd+0x5dc>
10013c60:	2720      	movs	r7, #32
10013c62:	1bbc      	subs	r4, r7, r6
10013c64:	46a1      	mov	r9, r4
10013c66:	000c      	movs	r4, r1
10013c68:	464f      	mov	r7, r9
10013c6a:	40bc      	lsls	r4, r7
10013c6c:	46a0      	mov	r8, r4
10013c6e:	002c      	movs	r4, r5
10013c70:	4647      	mov	r7, r8
10013c72:	40f4      	lsrs	r4, r6
10013c74:	433c      	orrs	r4, r7
10013c76:	464f      	mov	r7, r9
10013c78:	40bd      	lsls	r5, r7
10013c7a:	1e6f      	subs	r7, r5, #1
10013c7c:	41bd      	sbcs	r5, r7
10013c7e:	40f1      	lsrs	r1, r6
10013c80:	432c      	orrs	r4, r5
10013c82:	1b15      	subs	r5, r2, r4
10013c84:	42aa      	cmp	r2, r5
10013c86:	4192      	sbcs	r2, r2
10013c88:	1a41      	subs	r1, r0, r1
10013c8a:	4252      	negs	r2, r2
10013c8c:	1a89      	subs	r1, r1, r2
10013c8e:	4664      	mov	r4, ip
10013c90:	469a      	mov	sl, r3
10013c92:	e6bf      	b.n	10013a14 <__aeabi_dadd+0x108>
10013c94:	4641      	mov	r1, r8
10013c96:	4645      	mov	r5, r8
10013c98:	4331      	orrs	r1, r6
10013c9a:	d000      	beq.n	10013c9e <__aeabi_dadd+0x392>
10013c9c:	e6be      	b.n	10013a1c <__aeabi_dadd+0x110>
10013c9e:	2600      	movs	r6, #0
10013ca0:	2400      	movs	r4, #0
10013ca2:	2500      	movs	r5, #0
10013ca4:	e6f2      	b.n	10013a8c <__aeabi_dadd+0x180>
10013ca6:	46c0      	nop			; (mov r8, r8)
10013ca8:	000007ff 	.word	0x000007ff
10013cac:	ff7fffff 	.word	0xff7fffff
10013cb0:	800fffff 	.word	0x800fffff
10013cb4:	2b1f      	cmp	r3, #31
10013cb6:	dc59      	bgt.n	10013d6c <__aeabi_dadd+0x460>
10013cb8:	2720      	movs	r7, #32
10013cba:	1aff      	subs	r7, r7, r3
10013cbc:	46bc      	mov	ip, r7
10013cbe:	0007      	movs	r7, r0
10013cc0:	4663      	mov	r3, ip
10013cc2:	409f      	lsls	r7, r3
10013cc4:	465b      	mov	r3, fp
10013cc6:	46b9      	mov	r9, r7
10013cc8:	0017      	movs	r7, r2
10013cca:	40df      	lsrs	r7, r3
10013ccc:	46b8      	mov	r8, r7
10013cce:	464f      	mov	r7, r9
10013cd0:	4643      	mov	r3, r8
10013cd2:	431f      	orrs	r7, r3
10013cd4:	4663      	mov	r3, ip
10013cd6:	409a      	lsls	r2, r3
10013cd8:	1e53      	subs	r3, r2, #1
10013cda:	419a      	sbcs	r2, r3
10013cdc:	465b      	mov	r3, fp
10013cde:	433a      	orrs	r2, r7
10013ce0:	40d8      	lsrs	r0, r3
10013ce2:	e6f4      	b.n	10013ace <__aeabi_dadd+0x1c2>
10013ce4:	000c      	movs	r4, r1
10013ce6:	432c      	orrs	r4, r5
10013ce8:	d05c      	beq.n	10013da4 <__aeabi_dadd+0x498>
10013cea:	43f6      	mvns	r6, r6
10013cec:	2e00      	cmp	r6, #0
10013cee:	d155      	bne.n	10013d9c <__aeabi_dadd+0x490>
10013cf0:	1b55      	subs	r5, r2, r5
10013cf2:	42aa      	cmp	r2, r5
10013cf4:	41a4      	sbcs	r4, r4
10013cf6:	1a41      	subs	r1, r0, r1
10013cf8:	4264      	negs	r4, r4
10013cfa:	1b09      	subs	r1, r1, r4
10013cfc:	469a      	mov	sl, r3
10013cfe:	4664      	mov	r4, ip
10013d00:	e688      	b.n	10013a14 <__aeabi_dadd+0x108>
10013d02:	4f96      	ldr	r7, [pc, #600]	; (10013f5c <__aeabi_dadd+0x650>)
10013d04:	42bc      	cmp	r4, r7
10013d06:	d000      	beq.n	10013d0a <__aeabi_dadd+0x3fe>
10013d08:	e6d8      	b.n	10013abc <__aeabi_dadd+0x1b0>
10013d0a:	e628      	b.n	1001395e <__aeabi_dadd+0x52>
10013d0c:	2200      	movs	r2, #0
10013d0e:	e780      	b.n	10013c12 <__aeabi_dadd+0x306>
10013d10:	2000      	movs	r0, #0
10013d12:	e78f      	b.n	10013c34 <__aeabi_dadd+0x328>
10013d14:	000b      	movs	r3, r1
10013d16:	432b      	orrs	r3, r5
10013d18:	2c00      	cmp	r4, #0
10013d1a:	d000      	beq.n	10013d1e <__aeabi_dadd+0x412>
10013d1c:	e0c2      	b.n	10013ea4 <__aeabi_dadd+0x598>
10013d1e:	2b00      	cmp	r3, #0
10013d20:	d100      	bne.n	10013d24 <__aeabi_dadd+0x418>
10013d22:	e101      	b.n	10013f28 <__aeabi_dadd+0x61c>
10013d24:	0003      	movs	r3, r0
10013d26:	4313      	orrs	r3, r2
10013d28:	d100      	bne.n	10013d2c <__aeabi_dadd+0x420>
10013d2a:	e618      	b.n	1001395e <__aeabi_dadd+0x52>
10013d2c:	18ab      	adds	r3, r5, r2
10013d2e:	42ab      	cmp	r3, r5
10013d30:	41b6      	sbcs	r6, r6
10013d32:	1809      	adds	r1, r1, r0
10013d34:	4276      	negs	r6, r6
10013d36:	1871      	adds	r1, r6, r1
10013d38:	020a      	lsls	r2, r1, #8
10013d3a:	d400      	bmi.n	10013d3e <__aeabi_dadd+0x432>
10013d3c:	e109      	b.n	10013f52 <__aeabi_dadd+0x646>
10013d3e:	4a88      	ldr	r2, [pc, #544]	; (10013f60 <__aeabi_dadd+0x654>)
10013d40:	001d      	movs	r5, r3
10013d42:	4011      	ands	r1, r2
10013d44:	4664      	mov	r4, ip
10013d46:	e60a      	b.n	1001395e <__aeabi_dadd+0x52>
10013d48:	2c00      	cmp	r4, #0
10013d4a:	d15b      	bne.n	10013e04 <__aeabi_dadd+0x4f8>
10013d4c:	000e      	movs	r6, r1
10013d4e:	432e      	orrs	r6, r5
10013d50:	d000      	beq.n	10013d54 <__aeabi_dadd+0x448>
10013d52:	e08a      	b.n	10013e6a <__aeabi_dadd+0x55e>
10013d54:	0001      	movs	r1, r0
10013d56:	4311      	orrs	r1, r2
10013d58:	d100      	bne.n	10013d5c <__aeabi_dadd+0x450>
10013d5a:	e0c2      	b.n	10013ee2 <__aeabi_dadd+0x5d6>
10013d5c:	0001      	movs	r1, r0
10013d5e:	0015      	movs	r5, r2
10013d60:	469a      	mov	sl, r3
10013d62:	e5fc      	b.n	1001395e <__aeabi_dadd+0x52>
10013d64:	4664      	mov	r4, ip
10013d66:	2100      	movs	r1, #0
10013d68:	2500      	movs	r5, #0
10013d6a:	e68f      	b.n	10013a8c <__aeabi_dadd+0x180>
10013d6c:	2320      	movs	r3, #32
10013d6e:	425b      	negs	r3, r3
10013d70:	469c      	mov	ip, r3
10013d72:	44dc      	add	ip, fp
10013d74:	4663      	mov	r3, ip
10013d76:	0007      	movs	r7, r0
10013d78:	40df      	lsrs	r7, r3
10013d7a:	465b      	mov	r3, fp
10013d7c:	46bc      	mov	ip, r7
10013d7e:	2b20      	cmp	r3, #32
10013d80:	d100      	bne.n	10013d84 <__aeabi_dadd+0x478>
10013d82:	e0ac      	b.n	10013ede <__aeabi_dadd+0x5d2>
10013d84:	2340      	movs	r3, #64	; 0x40
10013d86:	465f      	mov	r7, fp
10013d88:	1bdb      	subs	r3, r3, r7
10013d8a:	4098      	lsls	r0, r3
10013d8c:	4302      	orrs	r2, r0
10013d8e:	1e50      	subs	r0, r2, #1
10013d90:	4182      	sbcs	r2, r0
10013d92:	4663      	mov	r3, ip
10013d94:	4313      	orrs	r3, r2
10013d96:	001a      	movs	r2, r3
10013d98:	2000      	movs	r0, #0
10013d9a:	e698      	b.n	10013ace <__aeabi_dadd+0x1c2>
10013d9c:	4c6f      	ldr	r4, [pc, #444]	; (10013f5c <__aeabi_dadd+0x650>)
10013d9e:	45a4      	cmp	ip, r4
10013da0:	d000      	beq.n	10013da4 <__aeabi_dadd+0x498>
10013da2:	e757      	b.n	10013c54 <__aeabi_dadd+0x348>
10013da4:	0001      	movs	r1, r0
10013da6:	0015      	movs	r5, r2
10013da8:	4664      	mov	r4, ip
10013daa:	469a      	mov	sl, r3
10013dac:	e5d7      	b.n	1001395e <__aeabi_dadd+0x52>
10013dae:	2c00      	cmp	r4, #0
10013db0:	d139      	bne.n	10013e26 <__aeabi_dadd+0x51a>
10013db2:	000c      	movs	r4, r1
10013db4:	432c      	orrs	r4, r5
10013db6:	d06e      	beq.n	10013e96 <__aeabi_dadd+0x58a>
10013db8:	43db      	mvns	r3, r3
10013dba:	2b00      	cmp	r3, #0
10013dbc:	d01a      	beq.n	10013df4 <__aeabi_dadd+0x4e8>
10013dbe:	4c67      	ldr	r4, [pc, #412]	; (10013f5c <__aeabi_dadd+0x650>)
10013dc0:	45a4      	cmp	ip, r4
10013dc2:	d068      	beq.n	10013e96 <__aeabi_dadd+0x58a>
10013dc4:	2b38      	cmp	r3, #56	; 0x38
10013dc6:	dd00      	ble.n	10013dca <__aeabi_dadd+0x4be>
10013dc8:	e0a4      	b.n	10013f14 <__aeabi_dadd+0x608>
10013dca:	2b1f      	cmp	r3, #31
10013dcc:	dd00      	ble.n	10013dd0 <__aeabi_dadd+0x4c4>
10013dce:	e0ae      	b.n	10013f2e <__aeabi_dadd+0x622>
10013dd0:	2420      	movs	r4, #32
10013dd2:	000f      	movs	r7, r1
10013dd4:	1ae4      	subs	r4, r4, r3
10013dd6:	40a7      	lsls	r7, r4
10013dd8:	46b9      	mov	r9, r7
10013dda:	002f      	movs	r7, r5
10013ddc:	40df      	lsrs	r7, r3
10013dde:	46b8      	mov	r8, r7
10013de0:	46a3      	mov	fp, r4
10013de2:	464f      	mov	r7, r9
10013de4:	4644      	mov	r4, r8
10013de6:	4327      	orrs	r7, r4
10013de8:	465c      	mov	r4, fp
10013dea:	40a5      	lsls	r5, r4
10013dec:	1e6c      	subs	r4, r5, #1
10013dee:	41a5      	sbcs	r5, r4
10013df0:	40d9      	lsrs	r1, r3
10013df2:	433d      	orrs	r5, r7
10013df4:	18ad      	adds	r5, r5, r2
10013df6:	4295      	cmp	r5, r2
10013df8:	419b      	sbcs	r3, r3
10013dfa:	1809      	adds	r1, r1, r0
10013dfc:	425b      	negs	r3, r3
10013dfe:	1859      	adds	r1, r3, r1
10013e00:	4664      	mov	r4, ip
10013e02:	e66b      	b.n	10013adc <__aeabi_dadd+0x1d0>
10013e04:	000c      	movs	r4, r1
10013e06:	432c      	orrs	r4, r5
10013e08:	d115      	bne.n	10013e36 <__aeabi_dadd+0x52a>
10013e0a:	0001      	movs	r1, r0
10013e0c:	4311      	orrs	r1, r2
10013e0e:	d07b      	beq.n	10013f08 <__aeabi_dadd+0x5fc>
10013e10:	0001      	movs	r1, r0
10013e12:	0015      	movs	r5, r2
10013e14:	469a      	mov	sl, r3
10013e16:	4c51      	ldr	r4, [pc, #324]	; (10013f5c <__aeabi_dadd+0x650>)
10013e18:	e5a1      	b.n	1001395e <__aeabi_dadd+0x52>
10013e1a:	430d      	orrs	r5, r1
10013e1c:	1e69      	subs	r1, r5, #1
10013e1e:	418d      	sbcs	r5, r1
10013e20:	2100      	movs	r1, #0
10013e22:	b2ec      	uxtb	r4, r5
10013e24:	e72d      	b.n	10013c82 <__aeabi_dadd+0x376>
10013e26:	4c4d      	ldr	r4, [pc, #308]	; (10013f5c <__aeabi_dadd+0x650>)
10013e28:	45a4      	cmp	ip, r4
10013e2a:	d034      	beq.n	10013e96 <__aeabi_dadd+0x58a>
10013e2c:	2480      	movs	r4, #128	; 0x80
10013e2e:	0424      	lsls	r4, r4, #16
10013e30:	425b      	negs	r3, r3
10013e32:	4321      	orrs	r1, r4
10013e34:	e7c6      	b.n	10013dc4 <__aeabi_dadd+0x4b8>
10013e36:	0004      	movs	r4, r0
10013e38:	4314      	orrs	r4, r2
10013e3a:	d04e      	beq.n	10013eda <__aeabi_dadd+0x5ce>
10013e3c:	08ed      	lsrs	r5, r5, #3
10013e3e:	074c      	lsls	r4, r1, #29
10013e40:	432c      	orrs	r4, r5
10013e42:	2580      	movs	r5, #128	; 0x80
10013e44:	08c9      	lsrs	r1, r1, #3
10013e46:	032d      	lsls	r5, r5, #12
10013e48:	4229      	tst	r1, r5
10013e4a:	d008      	beq.n	10013e5e <__aeabi_dadd+0x552>
10013e4c:	08c6      	lsrs	r6, r0, #3
10013e4e:	422e      	tst	r6, r5
10013e50:	d105      	bne.n	10013e5e <__aeabi_dadd+0x552>
10013e52:	08d2      	lsrs	r2, r2, #3
10013e54:	0741      	lsls	r1, r0, #29
10013e56:	4311      	orrs	r1, r2
10013e58:	000c      	movs	r4, r1
10013e5a:	469a      	mov	sl, r3
10013e5c:	0031      	movs	r1, r6
10013e5e:	0f62      	lsrs	r2, r4, #29
10013e60:	00c9      	lsls	r1, r1, #3
10013e62:	00e5      	lsls	r5, r4, #3
10013e64:	4311      	orrs	r1, r2
10013e66:	4c3d      	ldr	r4, [pc, #244]	; (10013f5c <__aeabi_dadd+0x650>)
10013e68:	e579      	b.n	1001395e <__aeabi_dadd+0x52>
10013e6a:	0006      	movs	r6, r0
10013e6c:	4316      	orrs	r6, r2
10013e6e:	d100      	bne.n	10013e72 <__aeabi_dadd+0x566>
10013e70:	e575      	b.n	1001395e <__aeabi_dadd+0x52>
10013e72:	1aae      	subs	r6, r5, r2
10013e74:	46b0      	mov	r8, r6
10013e76:	4545      	cmp	r5, r8
10013e78:	41bf      	sbcs	r7, r7
10013e7a:	1a0e      	subs	r6, r1, r0
10013e7c:	427f      	negs	r7, r7
10013e7e:	1bf6      	subs	r6, r6, r7
10013e80:	0237      	lsls	r7, r6, #8
10013e82:	d400      	bmi.n	10013e86 <__aeabi_dadd+0x57a>
10013e84:	e5f4      	b.n	10013a70 <__aeabi_dadd+0x164>
10013e86:	1b55      	subs	r5, r2, r5
10013e88:	42aa      	cmp	r2, r5
10013e8a:	41b6      	sbcs	r6, r6
10013e8c:	1a41      	subs	r1, r0, r1
10013e8e:	4276      	negs	r6, r6
10013e90:	1b89      	subs	r1, r1, r6
10013e92:	469a      	mov	sl, r3
10013e94:	e563      	b.n	1001395e <__aeabi_dadd+0x52>
10013e96:	0001      	movs	r1, r0
10013e98:	0015      	movs	r5, r2
10013e9a:	4664      	mov	r4, ip
10013e9c:	e55f      	b.n	1001395e <__aeabi_dadd+0x52>
10013e9e:	2200      	movs	r2, #0
10013ea0:	2500      	movs	r5, #0
10013ea2:	e57b      	b.n	1001399c <__aeabi_dadd+0x90>
10013ea4:	2b00      	cmp	r3, #0
10013ea6:	d03b      	beq.n	10013f20 <__aeabi_dadd+0x614>
10013ea8:	0003      	movs	r3, r0
10013eaa:	4313      	orrs	r3, r2
10013eac:	d015      	beq.n	10013eda <__aeabi_dadd+0x5ce>
10013eae:	08ed      	lsrs	r5, r5, #3
10013eb0:	074b      	lsls	r3, r1, #29
10013eb2:	432b      	orrs	r3, r5
10013eb4:	2580      	movs	r5, #128	; 0x80
10013eb6:	08c9      	lsrs	r1, r1, #3
10013eb8:	032d      	lsls	r5, r5, #12
10013eba:	4229      	tst	r1, r5
10013ebc:	d007      	beq.n	10013ece <__aeabi_dadd+0x5c2>
10013ebe:	08c4      	lsrs	r4, r0, #3
10013ec0:	422c      	tst	r4, r5
10013ec2:	d104      	bne.n	10013ece <__aeabi_dadd+0x5c2>
10013ec4:	0741      	lsls	r1, r0, #29
10013ec6:	000b      	movs	r3, r1
10013ec8:	0021      	movs	r1, r4
10013eca:	08d2      	lsrs	r2, r2, #3
10013ecc:	4313      	orrs	r3, r2
10013ece:	00c9      	lsls	r1, r1, #3
10013ed0:	0f5a      	lsrs	r2, r3, #29
10013ed2:	4311      	orrs	r1, r2
10013ed4:	00dd      	lsls	r5, r3, #3
10013ed6:	4c21      	ldr	r4, [pc, #132]	; (10013f5c <__aeabi_dadd+0x650>)
10013ed8:	e541      	b.n	1001395e <__aeabi_dadd+0x52>
10013eda:	4c20      	ldr	r4, [pc, #128]	; (10013f5c <__aeabi_dadd+0x650>)
10013edc:	e53f      	b.n	1001395e <__aeabi_dadd+0x52>
10013ede:	2000      	movs	r0, #0
10013ee0:	e754      	b.n	10013d8c <__aeabi_dadd+0x480>
10013ee2:	2600      	movs	r6, #0
10013ee4:	2500      	movs	r5, #0
10013ee6:	e5d1      	b.n	10013a8c <__aeabi_dadd+0x180>
10013ee8:	0034      	movs	r4, r6
10013eea:	000f      	movs	r7, r1
10013eec:	3c20      	subs	r4, #32
10013eee:	40e7      	lsrs	r7, r4
10013ef0:	003c      	movs	r4, r7
10013ef2:	2e20      	cmp	r6, #32
10013ef4:	d02b      	beq.n	10013f4e <__aeabi_dadd+0x642>
10013ef6:	2740      	movs	r7, #64	; 0x40
10013ef8:	1bbe      	subs	r6, r7, r6
10013efa:	40b1      	lsls	r1, r6
10013efc:	430d      	orrs	r5, r1
10013efe:	1e69      	subs	r1, r5, #1
10013f00:	418d      	sbcs	r5, r1
10013f02:	2100      	movs	r1, #0
10013f04:	432c      	orrs	r4, r5
10013f06:	e6bc      	b.n	10013c82 <__aeabi_dadd+0x376>
10013f08:	2180      	movs	r1, #128	; 0x80
10013f0a:	2600      	movs	r6, #0
10013f0c:	0309      	lsls	r1, r1, #12
10013f0e:	4c13      	ldr	r4, [pc, #76]	; (10013f5c <__aeabi_dadd+0x650>)
10013f10:	2500      	movs	r5, #0
10013f12:	e5bb      	b.n	10013a8c <__aeabi_dadd+0x180>
10013f14:	430d      	orrs	r5, r1
10013f16:	1e69      	subs	r1, r5, #1
10013f18:	418d      	sbcs	r5, r1
10013f1a:	2100      	movs	r1, #0
10013f1c:	b2ed      	uxtb	r5, r5
10013f1e:	e769      	b.n	10013df4 <__aeabi_dadd+0x4e8>
10013f20:	0001      	movs	r1, r0
10013f22:	0015      	movs	r5, r2
10013f24:	4c0d      	ldr	r4, [pc, #52]	; (10013f5c <__aeabi_dadd+0x650>)
10013f26:	e51a      	b.n	1001395e <__aeabi_dadd+0x52>
10013f28:	0001      	movs	r1, r0
10013f2a:	0015      	movs	r5, r2
10013f2c:	e517      	b.n	1001395e <__aeabi_dadd+0x52>
10013f2e:	001c      	movs	r4, r3
10013f30:	000f      	movs	r7, r1
10013f32:	3c20      	subs	r4, #32
10013f34:	40e7      	lsrs	r7, r4
10013f36:	003c      	movs	r4, r7
10013f38:	2b20      	cmp	r3, #32
10013f3a:	d00c      	beq.n	10013f56 <__aeabi_dadd+0x64a>
10013f3c:	2740      	movs	r7, #64	; 0x40
10013f3e:	1afb      	subs	r3, r7, r3
10013f40:	4099      	lsls	r1, r3
10013f42:	430d      	orrs	r5, r1
10013f44:	1e69      	subs	r1, r5, #1
10013f46:	418d      	sbcs	r5, r1
10013f48:	2100      	movs	r1, #0
10013f4a:	4325      	orrs	r5, r4
10013f4c:	e752      	b.n	10013df4 <__aeabi_dadd+0x4e8>
10013f4e:	2100      	movs	r1, #0
10013f50:	e7d4      	b.n	10013efc <__aeabi_dadd+0x5f0>
10013f52:	001d      	movs	r5, r3
10013f54:	e592      	b.n	10013a7c <__aeabi_dadd+0x170>
10013f56:	2100      	movs	r1, #0
10013f58:	e7f3      	b.n	10013f42 <__aeabi_dadd+0x636>
10013f5a:	46c0      	nop			; (mov r8, r8)
10013f5c:	000007ff 	.word	0x000007ff
10013f60:	ff7fffff 	.word	0xff7fffff

10013f64 <__aeabi_ddiv>:
10013f64:	b5f0      	push	{r4, r5, r6, r7, lr}
10013f66:	4656      	mov	r6, sl
10013f68:	464d      	mov	r5, r9
10013f6a:	4644      	mov	r4, r8
10013f6c:	465f      	mov	r7, fp
10013f6e:	b4f0      	push	{r4, r5, r6, r7}
10013f70:	001d      	movs	r5, r3
10013f72:	030e      	lsls	r6, r1, #12
10013f74:	004c      	lsls	r4, r1, #1
10013f76:	0fcb      	lsrs	r3, r1, #31
10013f78:	b087      	sub	sp, #28
10013f7a:	0007      	movs	r7, r0
10013f7c:	4692      	mov	sl, r2
10013f7e:	4681      	mov	r9, r0
10013f80:	0b36      	lsrs	r6, r6, #12
10013f82:	0d64      	lsrs	r4, r4, #21
10013f84:	4698      	mov	r8, r3
10013f86:	d06a      	beq.n	1001405e <__aeabi_ddiv+0xfa>
10013f88:	4b6d      	ldr	r3, [pc, #436]	; (10014140 <__aeabi_ddiv+0x1dc>)
10013f8a:	429c      	cmp	r4, r3
10013f8c:	d035      	beq.n	10013ffa <__aeabi_ddiv+0x96>
10013f8e:	2280      	movs	r2, #128	; 0x80
10013f90:	0f43      	lsrs	r3, r0, #29
10013f92:	0412      	lsls	r2, r2, #16
10013f94:	4313      	orrs	r3, r2
10013f96:	00f6      	lsls	r6, r6, #3
10013f98:	431e      	orrs	r6, r3
10013f9a:	00c3      	lsls	r3, r0, #3
10013f9c:	4699      	mov	r9, r3
10013f9e:	4b69      	ldr	r3, [pc, #420]	; (10014144 <__aeabi_ddiv+0x1e0>)
10013fa0:	2700      	movs	r7, #0
10013fa2:	469c      	mov	ip, r3
10013fa4:	2300      	movs	r3, #0
10013fa6:	4464      	add	r4, ip
10013fa8:	9302      	str	r3, [sp, #8]
10013faa:	032b      	lsls	r3, r5, #12
10013fac:	0068      	lsls	r0, r5, #1
10013fae:	0b1b      	lsrs	r3, r3, #12
10013fb0:	0fed      	lsrs	r5, r5, #31
10013fb2:	4651      	mov	r1, sl
10013fb4:	469b      	mov	fp, r3
10013fb6:	0d40      	lsrs	r0, r0, #21
10013fb8:	9500      	str	r5, [sp, #0]
10013fba:	d100      	bne.n	10013fbe <__aeabi_ddiv+0x5a>
10013fbc:	e078      	b.n	100140b0 <__aeabi_ddiv+0x14c>
10013fbe:	4b60      	ldr	r3, [pc, #384]	; (10014140 <__aeabi_ddiv+0x1dc>)
10013fc0:	4298      	cmp	r0, r3
10013fc2:	d06c      	beq.n	1001409e <__aeabi_ddiv+0x13a>
10013fc4:	465b      	mov	r3, fp
10013fc6:	00da      	lsls	r2, r3, #3
10013fc8:	0f4b      	lsrs	r3, r1, #29
10013fca:	2180      	movs	r1, #128	; 0x80
10013fcc:	0409      	lsls	r1, r1, #16
10013fce:	430b      	orrs	r3, r1
10013fd0:	4313      	orrs	r3, r2
10013fd2:	469b      	mov	fp, r3
10013fd4:	4653      	mov	r3, sl
10013fd6:	00d9      	lsls	r1, r3, #3
10013fd8:	4b5a      	ldr	r3, [pc, #360]	; (10014144 <__aeabi_ddiv+0x1e0>)
10013fda:	469c      	mov	ip, r3
10013fdc:	2300      	movs	r3, #0
10013fde:	4460      	add	r0, ip
10013fe0:	4642      	mov	r2, r8
10013fe2:	1a20      	subs	r0, r4, r0
10013fe4:	406a      	eors	r2, r5
10013fe6:	4692      	mov	sl, r2
10013fe8:	9001      	str	r0, [sp, #4]
10013fea:	431f      	orrs	r7, r3
10013fec:	2f0f      	cmp	r7, #15
10013fee:	d900      	bls.n	10013ff2 <__aeabi_ddiv+0x8e>
10013ff0:	e0b0      	b.n	10014154 <__aeabi_ddiv+0x1f0>
10013ff2:	4855      	ldr	r0, [pc, #340]	; (10014148 <__aeabi_ddiv+0x1e4>)
10013ff4:	00bf      	lsls	r7, r7, #2
10013ff6:	59c0      	ldr	r0, [r0, r7]
10013ff8:	4687      	mov	pc, r0
10013ffa:	4337      	orrs	r7, r6
10013ffc:	d000      	beq.n	10014000 <__aeabi_ddiv+0x9c>
10013ffe:	e088      	b.n	10014112 <__aeabi_ddiv+0x1ae>
10014000:	2300      	movs	r3, #0
10014002:	4699      	mov	r9, r3
10014004:	3302      	adds	r3, #2
10014006:	2708      	movs	r7, #8
10014008:	2600      	movs	r6, #0
1001400a:	9302      	str	r3, [sp, #8]
1001400c:	e7cd      	b.n	10013faa <__aeabi_ddiv+0x46>
1001400e:	4643      	mov	r3, r8
10014010:	46b3      	mov	fp, r6
10014012:	4649      	mov	r1, r9
10014014:	9300      	str	r3, [sp, #0]
10014016:	9b02      	ldr	r3, [sp, #8]
10014018:	9a00      	ldr	r2, [sp, #0]
1001401a:	4692      	mov	sl, r2
1001401c:	2b02      	cmp	r3, #2
1001401e:	d000      	beq.n	10014022 <__aeabi_ddiv+0xbe>
10014020:	e1bf      	b.n	100143a2 <__aeabi_ddiv+0x43e>
10014022:	2100      	movs	r1, #0
10014024:	4653      	mov	r3, sl
10014026:	2201      	movs	r2, #1
10014028:	2600      	movs	r6, #0
1001402a:	4689      	mov	r9, r1
1001402c:	401a      	ands	r2, r3
1001402e:	4b44      	ldr	r3, [pc, #272]	; (10014140 <__aeabi_ddiv+0x1dc>)
10014030:	2100      	movs	r1, #0
10014032:	0336      	lsls	r6, r6, #12
10014034:	0d0c      	lsrs	r4, r1, #20
10014036:	0524      	lsls	r4, r4, #20
10014038:	0b36      	lsrs	r6, r6, #12
1001403a:	4326      	orrs	r6, r4
1001403c:	4c43      	ldr	r4, [pc, #268]	; (1001414c <__aeabi_ddiv+0x1e8>)
1001403e:	051b      	lsls	r3, r3, #20
10014040:	4026      	ands	r6, r4
10014042:	431e      	orrs	r6, r3
10014044:	0076      	lsls	r6, r6, #1
10014046:	07d2      	lsls	r2, r2, #31
10014048:	0876      	lsrs	r6, r6, #1
1001404a:	4316      	orrs	r6, r2
1001404c:	4648      	mov	r0, r9
1001404e:	0031      	movs	r1, r6
10014050:	b007      	add	sp, #28
10014052:	bc3c      	pop	{r2, r3, r4, r5}
10014054:	4690      	mov	r8, r2
10014056:	4699      	mov	r9, r3
10014058:	46a2      	mov	sl, r4
1001405a:	46ab      	mov	fp, r5
1001405c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001405e:	0033      	movs	r3, r6
10014060:	4303      	orrs	r3, r0
10014062:	d04f      	beq.n	10014104 <__aeabi_ddiv+0x1a0>
10014064:	2e00      	cmp	r6, #0
10014066:	d100      	bne.n	1001406a <__aeabi_ddiv+0x106>
10014068:	e1bc      	b.n	100143e4 <__aeabi_ddiv+0x480>
1001406a:	0030      	movs	r0, r6
1001406c:	f001 fb1c 	bl	100156a8 <__clzsi2>
10014070:	0003      	movs	r3, r0
10014072:	3b0b      	subs	r3, #11
10014074:	2b1c      	cmp	r3, #28
10014076:	dd00      	ble.n	1001407a <__aeabi_ddiv+0x116>
10014078:	e1ad      	b.n	100143d6 <__aeabi_ddiv+0x472>
1001407a:	221d      	movs	r2, #29
1001407c:	0001      	movs	r1, r0
1001407e:	1ad3      	subs	r3, r2, r3
10014080:	3908      	subs	r1, #8
10014082:	003a      	movs	r2, r7
10014084:	408f      	lsls	r7, r1
10014086:	408e      	lsls	r6, r1
10014088:	40da      	lsrs	r2, r3
1001408a:	46b9      	mov	r9, r7
1001408c:	4316      	orrs	r6, r2
1001408e:	4b30      	ldr	r3, [pc, #192]	; (10014150 <__aeabi_ddiv+0x1ec>)
10014090:	2700      	movs	r7, #0
10014092:	469c      	mov	ip, r3
10014094:	2300      	movs	r3, #0
10014096:	4460      	add	r0, ip
10014098:	4244      	negs	r4, r0
1001409a:	9302      	str	r3, [sp, #8]
1001409c:	e785      	b.n	10013faa <__aeabi_ddiv+0x46>
1001409e:	4653      	mov	r3, sl
100140a0:	465a      	mov	r2, fp
100140a2:	4313      	orrs	r3, r2
100140a4:	d12c      	bne.n	10014100 <__aeabi_ddiv+0x19c>
100140a6:	2300      	movs	r3, #0
100140a8:	2100      	movs	r1, #0
100140aa:	469b      	mov	fp, r3
100140ac:	3302      	adds	r3, #2
100140ae:	e797      	b.n	10013fe0 <__aeabi_ddiv+0x7c>
100140b0:	430b      	orrs	r3, r1
100140b2:	d020      	beq.n	100140f6 <__aeabi_ddiv+0x192>
100140b4:	465b      	mov	r3, fp
100140b6:	2b00      	cmp	r3, #0
100140b8:	d100      	bne.n	100140bc <__aeabi_ddiv+0x158>
100140ba:	e19e      	b.n	100143fa <__aeabi_ddiv+0x496>
100140bc:	4658      	mov	r0, fp
100140be:	f001 faf3 	bl	100156a8 <__clzsi2>
100140c2:	0003      	movs	r3, r0
100140c4:	3b0b      	subs	r3, #11
100140c6:	2b1c      	cmp	r3, #28
100140c8:	dd00      	ble.n	100140cc <__aeabi_ddiv+0x168>
100140ca:	e18f      	b.n	100143ec <__aeabi_ddiv+0x488>
100140cc:	0002      	movs	r2, r0
100140ce:	4659      	mov	r1, fp
100140d0:	3a08      	subs	r2, #8
100140d2:	4091      	lsls	r1, r2
100140d4:	468b      	mov	fp, r1
100140d6:	211d      	movs	r1, #29
100140d8:	1acb      	subs	r3, r1, r3
100140da:	4651      	mov	r1, sl
100140dc:	40d9      	lsrs	r1, r3
100140de:	000b      	movs	r3, r1
100140e0:	4659      	mov	r1, fp
100140e2:	430b      	orrs	r3, r1
100140e4:	4651      	mov	r1, sl
100140e6:	469b      	mov	fp, r3
100140e8:	4091      	lsls	r1, r2
100140ea:	4b19      	ldr	r3, [pc, #100]	; (10014150 <__aeabi_ddiv+0x1ec>)
100140ec:	469c      	mov	ip, r3
100140ee:	4460      	add	r0, ip
100140f0:	4240      	negs	r0, r0
100140f2:	2300      	movs	r3, #0
100140f4:	e774      	b.n	10013fe0 <__aeabi_ddiv+0x7c>
100140f6:	2300      	movs	r3, #0
100140f8:	2100      	movs	r1, #0
100140fa:	469b      	mov	fp, r3
100140fc:	3301      	adds	r3, #1
100140fe:	e76f      	b.n	10013fe0 <__aeabi_ddiv+0x7c>
10014100:	2303      	movs	r3, #3
10014102:	e76d      	b.n	10013fe0 <__aeabi_ddiv+0x7c>
10014104:	2300      	movs	r3, #0
10014106:	4699      	mov	r9, r3
10014108:	3301      	adds	r3, #1
1001410a:	2704      	movs	r7, #4
1001410c:	2600      	movs	r6, #0
1001410e:	9302      	str	r3, [sp, #8]
10014110:	e74b      	b.n	10013faa <__aeabi_ddiv+0x46>
10014112:	2303      	movs	r3, #3
10014114:	270c      	movs	r7, #12
10014116:	9302      	str	r3, [sp, #8]
10014118:	e747      	b.n	10013faa <__aeabi_ddiv+0x46>
1001411a:	2201      	movs	r2, #1
1001411c:	1ad5      	subs	r5, r2, r3
1001411e:	2d38      	cmp	r5, #56	; 0x38
10014120:	dc00      	bgt.n	10014124 <__aeabi_ddiv+0x1c0>
10014122:	e1b0      	b.n	10014486 <__aeabi_ddiv+0x522>
10014124:	4653      	mov	r3, sl
10014126:	401a      	ands	r2, r3
10014128:	2100      	movs	r1, #0
1001412a:	2300      	movs	r3, #0
1001412c:	2600      	movs	r6, #0
1001412e:	4689      	mov	r9, r1
10014130:	e77e      	b.n	10014030 <__aeabi_ddiv+0xcc>
10014132:	2300      	movs	r3, #0
10014134:	2680      	movs	r6, #128	; 0x80
10014136:	4699      	mov	r9, r3
10014138:	2200      	movs	r2, #0
1001413a:	0336      	lsls	r6, r6, #12
1001413c:	4b00      	ldr	r3, [pc, #0]	; (10014140 <__aeabi_ddiv+0x1dc>)
1001413e:	e777      	b.n	10014030 <__aeabi_ddiv+0xcc>
10014140:	000007ff 	.word	0x000007ff
10014144:	fffffc01 	.word	0xfffffc01
10014148:	100183f8 	.word	0x100183f8
1001414c:	800fffff 	.word	0x800fffff
10014150:	000003f3 	.word	0x000003f3
10014154:	455e      	cmp	r6, fp
10014156:	d900      	bls.n	1001415a <__aeabi_ddiv+0x1f6>
10014158:	e172      	b.n	10014440 <__aeabi_ddiv+0x4dc>
1001415a:	d100      	bne.n	1001415e <__aeabi_ddiv+0x1fa>
1001415c:	e16d      	b.n	1001443a <__aeabi_ddiv+0x4d6>
1001415e:	9b01      	ldr	r3, [sp, #4]
10014160:	464d      	mov	r5, r9
10014162:	3b01      	subs	r3, #1
10014164:	9301      	str	r3, [sp, #4]
10014166:	2300      	movs	r3, #0
10014168:	0034      	movs	r4, r6
1001416a:	9302      	str	r3, [sp, #8]
1001416c:	465b      	mov	r3, fp
1001416e:	021e      	lsls	r6, r3, #8
10014170:	0e0b      	lsrs	r3, r1, #24
10014172:	431e      	orrs	r6, r3
10014174:	020b      	lsls	r3, r1, #8
10014176:	9303      	str	r3, [sp, #12]
10014178:	0c33      	lsrs	r3, r6, #16
1001417a:	4699      	mov	r9, r3
1001417c:	0433      	lsls	r3, r6, #16
1001417e:	0c1b      	lsrs	r3, r3, #16
10014180:	4649      	mov	r1, r9
10014182:	0020      	movs	r0, r4
10014184:	9300      	str	r3, [sp, #0]
10014186:	f7fe fc65 	bl	10012a54 <__aeabi_uidiv>
1001418a:	9b00      	ldr	r3, [sp, #0]
1001418c:	0037      	movs	r7, r6
1001418e:	4343      	muls	r3, r0
10014190:	0006      	movs	r6, r0
10014192:	4649      	mov	r1, r9
10014194:	0020      	movs	r0, r4
10014196:	4698      	mov	r8, r3
10014198:	f7fe fce2 	bl	10012b60 <__aeabi_uidivmod>
1001419c:	0c2c      	lsrs	r4, r5, #16
1001419e:	0409      	lsls	r1, r1, #16
100141a0:	430c      	orrs	r4, r1
100141a2:	45a0      	cmp	r8, r4
100141a4:	d909      	bls.n	100141ba <__aeabi_ddiv+0x256>
100141a6:	19e4      	adds	r4, r4, r7
100141a8:	1e73      	subs	r3, r6, #1
100141aa:	42a7      	cmp	r7, r4
100141ac:	d900      	bls.n	100141b0 <__aeabi_ddiv+0x24c>
100141ae:	e15c      	b.n	1001446a <__aeabi_ddiv+0x506>
100141b0:	45a0      	cmp	r8, r4
100141b2:	d800      	bhi.n	100141b6 <__aeabi_ddiv+0x252>
100141b4:	e159      	b.n	1001446a <__aeabi_ddiv+0x506>
100141b6:	3e02      	subs	r6, #2
100141b8:	19e4      	adds	r4, r4, r7
100141ba:	4643      	mov	r3, r8
100141bc:	1ae4      	subs	r4, r4, r3
100141be:	4649      	mov	r1, r9
100141c0:	0020      	movs	r0, r4
100141c2:	f7fe fc47 	bl	10012a54 <__aeabi_uidiv>
100141c6:	0003      	movs	r3, r0
100141c8:	9a00      	ldr	r2, [sp, #0]
100141ca:	4680      	mov	r8, r0
100141cc:	4353      	muls	r3, r2
100141ce:	4649      	mov	r1, r9
100141d0:	0020      	movs	r0, r4
100141d2:	469b      	mov	fp, r3
100141d4:	f7fe fcc4 	bl	10012b60 <__aeabi_uidivmod>
100141d8:	042a      	lsls	r2, r5, #16
100141da:	0409      	lsls	r1, r1, #16
100141dc:	0c12      	lsrs	r2, r2, #16
100141de:	430a      	orrs	r2, r1
100141e0:	4593      	cmp	fp, r2
100141e2:	d90d      	bls.n	10014200 <__aeabi_ddiv+0x29c>
100141e4:	4643      	mov	r3, r8
100141e6:	19d2      	adds	r2, r2, r7
100141e8:	3b01      	subs	r3, #1
100141ea:	4297      	cmp	r7, r2
100141ec:	d900      	bls.n	100141f0 <__aeabi_ddiv+0x28c>
100141ee:	e13a      	b.n	10014466 <__aeabi_ddiv+0x502>
100141f0:	4593      	cmp	fp, r2
100141f2:	d800      	bhi.n	100141f6 <__aeabi_ddiv+0x292>
100141f4:	e137      	b.n	10014466 <__aeabi_ddiv+0x502>
100141f6:	2302      	movs	r3, #2
100141f8:	425b      	negs	r3, r3
100141fa:	469c      	mov	ip, r3
100141fc:	19d2      	adds	r2, r2, r7
100141fe:	44e0      	add	r8, ip
10014200:	465b      	mov	r3, fp
10014202:	1ad2      	subs	r2, r2, r3
10014204:	4643      	mov	r3, r8
10014206:	0436      	lsls	r6, r6, #16
10014208:	4333      	orrs	r3, r6
1001420a:	469b      	mov	fp, r3
1001420c:	9903      	ldr	r1, [sp, #12]
1001420e:	0c18      	lsrs	r0, r3, #16
10014210:	0c0b      	lsrs	r3, r1, #16
10014212:	001d      	movs	r5, r3
10014214:	9305      	str	r3, [sp, #20]
10014216:	0409      	lsls	r1, r1, #16
10014218:	465b      	mov	r3, fp
1001421a:	0c09      	lsrs	r1, r1, #16
1001421c:	000c      	movs	r4, r1
1001421e:	041b      	lsls	r3, r3, #16
10014220:	0c1b      	lsrs	r3, r3, #16
10014222:	4344      	muls	r4, r0
10014224:	9104      	str	r1, [sp, #16]
10014226:	4359      	muls	r1, r3
10014228:	436b      	muls	r3, r5
1001422a:	4368      	muls	r0, r5
1001422c:	191b      	adds	r3, r3, r4
1001422e:	0c0d      	lsrs	r5, r1, #16
10014230:	18eb      	adds	r3, r5, r3
10014232:	429c      	cmp	r4, r3
10014234:	d903      	bls.n	1001423e <__aeabi_ddiv+0x2da>
10014236:	2480      	movs	r4, #128	; 0x80
10014238:	0264      	lsls	r4, r4, #9
1001423a:	46a4      	mov	ip, r4
1001423c:	4460      	add	r0, ip
1001423e:	0c1c      	lsrs	r4, r3, #16
10014240:	0409      	lsls	r1, r1, #16
10014242:	041b      	lsls	r3, r3, #16
10014244:	0c09      	lsrs	r1, r1, #16
10014246:	1820      	adds	r0, r4, r0
10014248:	185d      	adds	r5, r3, r1
1001424a:	4282      	cmp	r2, r0
1001424c:	d200      	bcs.n	10014250 <__aeabi_ddiv+0x2ec>
1001424e:	e0de      	b.n	1001440e <__aeabi_ddiv+0x4aa>
10014250:	d100      	bne.n	10014254 <__aeabi_ddiv+0x2f0>
10014252:	e0d7      	b.n	10014404 <__aeabi_ddiv+0x4a0>
10014254:	1a16      	subs	r6, r2, r0
10014256:	9b02      	ldr	r3, [sp, #8]
10014258:	469c      	mov	ip, r3
1001425a:	1b5d      	subs	r5, r3, r5
1001425c:	45ac      	cmp	ip, r5
1001425e:	419b      	sbcs	r3, r3
10014260:	425b      	negs	r3, r3
10014262:	1af6      	subs	r6, r6, r3
10014264:	42b7      	cmp	r7, r6
10014266:	d100      	bne.n	1001426a <__aeabi_ddiv+0x306>
10014268:	e106      	b.n	10014478 <__aeabi_ddiv+0x514>
1001426a:	4649      	mov	r1, r9
1001426c:	0030      	movs	r0, r6
1001426e:	f7fe fbf1 	bl	10012a54 <__aeabi_uidiv>
10014272:	9b00      	ldr	r3, [sp, #0]
10014274:	0004      	movs	r4, r0
10014276:	4343      	muls	r3, r0
10014278:	4649      	mov	r1, r9
1001427a:	0030      	movs	r0, r6
1001427c:	4698      	mov	r8, r3
1001427e:	f7fe fc6f 	bl	10012b60 <__aeabi_uidivmod>
10014282:	0c2e      	lsrs	r6, r5, #16
10014284:	0409      	lsls	r1, r1, #16
10014286:	430e      	orrs	r6, r1
10014288:	45b0      	cmp	r8, r6
1001428a:	d909      	bls.n	100142a0 <__aeabi_ddiv+0x33c>
1001428c:	19f6      	adds	r6, r6, r7
1001428e:	1e63      	subs	r3, r4, #1
10014290:	42b7      	cmp	r7, r6
10014292:	d900      	bls.n	10014296 <__aeabi_ddiv+0x332>
10014294:	e0f3      	b.n	1001447e <__aeabi_ddiv+0x51a>
10014296:	45b0      	cmp	r8, r6
10014298:	d800      	bhi.n	1001429c <__aeabi_ddiv+0x338>
1001429a:	e0f0      	b.n	1001447e <__aeabi_ddiv+0x51a>
1001429c:	3c02      	subs	r4, #2
1001429e:	19f6      	adds	r6, r6, r7
100142a0:	4643      	mov	r3, r8
100142a2:	1af3      	subs	r3, r6, r3
100142a4:	4649      	mov	r1, r9
100142a6:	0018      	movs	r0, r3
100142a8:	9302      	str	r3, [sp, #8]
100142aa:	f7fe fbd3 	bl	10012a54 <__aeabi_uidiv>
100142ae:	9b00      	ldr	r3, [sp, #0]
100142b0:	0006      	movs	r6, r0
100142b2:	4343      	muls	r3, r0
100142b4:	4649      	mov	r1, r9
100142b6:	9802      	ldr	r0, [sp, #8]
100142b8:	4698      	mov	r8, r3
100142ba:	f7fe fc51 	bl	10012b60 <__aeabi_uidivmod>
100142be:	042d      	lsls	r5, r5, #16
100142c0:	0409      	lsls	r1, r1, #16
100142c2:	0c2d      	lsrs	r5, r5, #16
100142c4:	430d      	orrs	r5, r1
100142c6:	45a8      	cmp	r8, r5
100142c8:	d909      	bls.n	100142de <__aeabi_ddiv+0x37a>
100142ca:	19ed      	adds	r5, r5, r7
100142cc:	1e73      	subs	r3, r6, #1
100142ce:	42af      	cmp	r7, r5
100142d0:	d900      	bls.n	100142d4 <__aeabi_ddiv+0x370>
100142d2:	e0d6      	b.n	10014482 <__aeabi_ddiv+0x51e>
100142d4:	45a8      	cmp	r8, r5
100142d6:	d800      	bhi.n	100142da <__aeabi_ddiv+0x376>
100142d8:	e0d3      	b.n	10014482 <__aeabi_ddiv+0x51e>
100142da:	3e02      	subs	r6, #2
100142dc:	19ed      	adds	r5, r5, r7
100142de:	0424      	lsls	r4, r4, #16
100142e0:	0021      	movs	r1, r4
100142e2:	4643      	mov	r3, r8
100142e4:	4331      	orrs	r1, r6
100142e6:	9e04      	ldr	r6, [sp, #16]
100142e8:	9a05      	ldr	r2, [sp, #20]
100142ea:	0030      	movs	r0, r6
100142ec:	1aed      	subs	r5, r5, r3
100142ee:	040b      	lsls	r3, r1, #16
100142f0:	0c0c      	lsrs	r4, r1, #16
100142f2:	0c1b      	lsrs	r3, r3, #16
100142f4:	4358      	muls	r0, r3
100142f6:	4366      	muls	r6, r4
100142f8:	4353      	muls	r3, r2
100142fa:	4354      	muls	r4, r2
100142fc:	199a      	adds	r2, r3, r6
100142fe:	0c03      	lsrs	r3, r0, #16
10014300:	189b      	adds	r3, r3, r2
10014302:	429e      	cmp	r6, r3
10014304:	d903      	bls.n	1001430e <__aeabi_ddiv+0x3aa>
10014306:	2280      	movs	r2, #128	; 0x80
10014308:	0252      	lsls	r2, r2, #9
1001430a:	4694      	mov	ip, r2
1001430c:	4464      	add	r4, ip
1001430e:	0c1a      	lsrs	r2, r3, #16
10014310:	0400      	lsls	r0, r0, #16
10014312:	041b      	lsls	r3, r3, #16
10014314:	0c00      	lsrs	r0, r0, #16
10014316:	1914      	adds	r4, r2, r4
10014318:	181b      	adds	r3, r3, r0
1001431a:	42a5      	cmp	r5, r4
1001431c:	d350      	bcc.n	100143c0 <__aeabi_ddiv+0x45c>
1001431e:	d04d      	beq.n	100143bc <__aeabi_ddiv+0x458>
10014320:	2301      	movs	r3, #1
10014322:	4319      	orrs	r1, r3
10014324:	4a96      	ldr	r2, [pc, #600]	; (10014580 <__aeabi_ddiv+0x61c>)
10014326:	9b01      	ldr	r3, [sp, #4]
10014328:	4694      	mov	ip, r2
1001432a:	4463      	add	r3, ip
1001432c:	2b00      	cmp	r3, #0
1001432e:	dc00      	bgt.n	10014332 <__aeabi_ddiv+0x3ce>
10014330:	e6f3      	b.n	1001411a <__aeabi_ddiv+0x1b6>
10014332:	074a      	lsls	r2, r1, #29
10014334:	d009      	beq.n	1001434a <__aeabi_ddiv+0x3e6>
10014336:	220f      	movs	r2, #15
10014338:	400a      	ands	r2, r1
1001433a:	2a04      	cmp	r2, #4
1001433c:	d005      	beq.n	1001434a <__aeabi_ddiv+0x3e6>
1001433e:	1d0a      	adds	r2, r1, #4
10014340:	428a      	cmp	r2, r1
10014342:	4189      	sbcs	r1, r1
10014344:	4249      	negs	r1, r1
10014346:	448b      	add	fp, r1
10014348:	0011      	movs	r1, r2
1001434a:	465a      	mov	r2, fp
1001434c:	01d2      	lsls	r2, r2, #7
1001434e:	d508      	bpl.n	10014362 <__aeabi_ddiv+0x3fe>
10014350:	465a      	mov	r2, fp
10014352:	4b8c      	ldr	r3, [pc, #560]	; (10014584 <__aeabi_ddiv+0x620>)
10014354:	401a      	ands	r2, r3
10014356:	4693      	mov	fp, r2
10014358:	2280      	movs	r2, #128	; 0x80
1001435a:	00d2      	lsls	r2, r2, #3
1001435c:	4694      	mov	ip, r2
1001435e:	9b01      	ldr	r3, [sp, #4]
10014360:	4463      	add	r3, ip
10014362:	4a89      	ldr	r2, [pc, #548]	; (10014588 <__aeabi_ddiv+0x624>)
10014364:	4293      	cmp	r3, r2
10014366:	dd00      	ble.n	1001436a <__aeabi_ddiv+0x406>
10014368:	e65b      	b.n	10014022 <__aeabi_ddiv+0xbe>
1001436a:	465a      	mov	r2, fp
1001436c:	08c9      	lsrs	r1, r1, #3
1001436e:	0750      	lsls	r0, r2, #29
10014370:	4308      	orrs	r0, r1
10014372:	0256      	lsls	r6, r2, #9
10014374:	4651      	mov	r1, sl
10014376:	2201      	movs	r2, #1
10014378:	055b      	lsls	r3, r3, #21
1001437a:	4681      	mov	r9, r0
1001437c:	0b36      	lsrs	r6, r6, #12
1001437e:	0d5b      	lsrs	r3, r3, #21
10014380:	400a      	ands	r2, r1
10014382:	e655      	b.n	10014030 <__aeabi_ddiv+0xcc>
10014384:	2380      	movs	r3, #128	; 0x80
10014386:	031b      	lsls	r3, r3, #12
10014388:	421e      	tst	r6, r3
1001438a:	d011      	beq.n	100143b0 <__aeabi_ddiv+0x44c>
1001438c:	465a      	mov	r2, fp
1001438e:	421a      	tst	r2, r3
10014390:	d10e      	bne.n	100143b0 <__aeabi_ddiv+0x44c>
10014392:	465e      	mov	r6, fp
10014394:	431e      	orrs	r6, r3
10014396:	0336      	lsls	r6, r6, #12
10014398:	0b36      	lsrs	r6, r6, #12
1001439a:	002a      	movs	r2, r5
1001439c:	4689      	mov	r9, r1
1001439e:	4b7b      	ldr	r3, [pc, #492]	; (1001458c <__aeabi_ddiv+0x628>)
100143a0:	e646      	b.n	10014030 <__aeabi_ddiv+0xcc>
100143a2:	2b03      	cmp	r3, #3
100143a4:	d100      	bne.n	100143a8 <__aeabi_ddiv+0x444>
100143a6:	e0e1      	b.n	1001456c <__aeabi_ddiv+0x608>
100143a8:	2b01      	cmp	r3, #1
100143aa:	d1bb      	bne.n	10014324 <__aeabi_ddiv+0x3c0>
100143ac:	401a      	ands	r2, r3
100143ae:	e6bb      	b.n	10014128 <__aeabi_ddiv+0x1c4>
100143b0:	431e      	orrs	r6, r3
100143b2:	0336      	lsls	r6, r6, #12
100143b4:	0b36      	lsrs	r6, r6, #12
100143b6:	4642      	mov	r2, r8
100143b8:	4b74      	ldr	r3, [pc, #464]	; (1001458c <__aeabi_ddiv+0x628>)
100143ba:	e639      	b.n	10014030 <__aeabi_ddiv+0xcc>
100143bc:	2b00      	cmp	r3, #0
100143be:	d0b1      	beq.n	10014324 <__aeabi_ddiv+0x3c0>
100143c0:	197d      	adds	r5, r7, r5
100143c2:	1e4a      	subs	r2, r1, #1
100143c4:	42af      	cmp	r7, r5
100143c6:	d952      	bls.n	1001446e <__aeabi_ddiv+0x50a>
100143c8:	0011      	movs	r1, r2
100143ca:	42a5      	cmp	r5, r4
100143cc:	d1a8      	bne.n	10014320 <__aeabi_ddiv+0x3bc>
100143ce:	9a03      	ldr	r2, [sp, #12]
100143d0:	429a      	cmp	r2, r3
100143d2:	d1a5      	bne.n	10014320 <__aeabi_ddiv+0x3bc>
100143d4:	e7a6      	b.n	10014324 <__aeabi_ddiv+0x3c0>
100143d6:	0003      	movs	r3, r0
100143d8:	003e      	movs	r6, r7
100143da:	3b28      	subs	r3, #40	; 0x28
100143dc:	409e      	lsls	r6, r3
100143de:	2300      	movs	r3, #0
100143e0:	4699      	mov	r9, r3
100143e2:	e654      	b.n	1001408e <__aeabi_ddiv+0x12a>
100143e4:	f001 f960 	bl	100156a8 <__clzsi2>
100143e8:	3020      	adds	r0, #32
100143ea:	e641      	b.n	10014070 <__aeabi_ddiv+0x10c>
100143ec:	0003      	movs	r3, r0
100143ee:	4652      	mov	r2, sl
100143f0:	3b28      	subs	r3, #40	; 0x28
100143f2:	409a      	lsls	r2, r3
100143f4:	2100      	movs	r1, #0
100143f6:	4693      	mov	fp, r2
100143f8:	e677      	b.n	100140ea <__aeabi_ddiv+0x186>
100143fa:	4650      	mov	r0, sl
100143fc:	f001 f954 	bl	100156a8 <__clzsi2>
10014400:	3020      	adds	r0, #32
10014402:	e65e      	b.n	100140c2 <__aeabi_ddiv+0x15e>
10014404:	9b02      	ldr	r3, [sp, #8]
10014406:	2600      	movs	r6, #0
10014408:	42ab      	cmp	r3, r5
1001440a:	d300      	bcc.n	1001440e <__aeabi_ddiv+0x4aa>
1001440c:	e723      	b.n	10014256 <__aeabi_ddiv+0x2f2>
1001440e:	9e03      	ldr	r6, [sp, #12]
10014410:	9902      	ldr	r1, [sp, #8]
10014412:	46b4      	mov	ip, r6
10014414:	4461      	add	r1, ip
10014416:	4688      	mov	r8, r1
10014418:	45b0      	cmp	r8, r6
1001441a:	41b6      	sbcs	r6, r6
1001441c:	465b      	mov	r3, fp
1001441e:	4276      	negs	r6, r6
10014420:	19f6      	adds	r6, r6, r7
10014422:	18b2      	adds	r2, r6, r2
10014424:	3b01      	subs	r3, #1
10014426:	9102      	str	r1, [sp, #8]
10014428:	4297      	cmp	r7, r2
1001442a:	d213      	bcs.n	10014454 <__aeabi_ddiv+0x4f0>
1001442c:	4290      	cmp	r0, r2
1001442e:	d84f      	bhi.n	100144d0 <__aeabi_ddiv+0x56c>
10014430:	d100      	bne.n	10014434 <__aeabi_ddiv+0x4d0>
10014432:	e08e      	b.n	10014552 <__aeabi_ddiv+0x5ee>
10014434:	1a16      	subs	r6, r2, r0
10014436:	469b      	mov	fp, r3
10014438:	e70d      	b.n	10014256 <__aeabi_ddiv+0x2f2>
1001443a:	4589      	cmp	r9, r1
1001443c:	d200      	bcs.n	10014440 <__aeabi_ddiv+0x4dc>
1001443e:	e68e      	b.n	1001415e <__aeabi_ddiv+0x1fa>
10014440:	0874      	lsrs	r4, r6, #1
10014442:	464b      	mov	r3, r9
10014444:	07f6      	lsls	r6, r6, #31
10014446:	0035      	movs	r5, r6
10014448:	085b      	lsrs	r3, r3, #1
1001444a:	431d      	orrs	r5, r3
1001444c:	464b      	mov	r3, r9
1001444e:	07db      	lsls	r3, r3, #31
10014450:	9302      	str	r3, [sp, #8]
10014452:	e68b      	b.n	1001416c <__aeabi_ddiv+0x208>
10014454:	4297      	cmp	r7, r2
10014456:	d1ed      	bne.n	10014434 <__aeabi_ddiv+0x4d0>
10014458:	9903      	ldr	r1, [sp, #12]
1001445a:	9c02      	ldr	r4, [sp, #8]
1001445c:	42a1      	cmp	r1, r4
1001445e:	d9e5      	bls.n	1001442c <__aeabi_ddiv+0x4c8>
10014460:	1a3e      	subs	r6, r7, r0
10014462:	469b      	mov	fp, r3
10014464:	e6f7      	b.n	10014256 <__aeabi_ddiv+0x2f2>
10014466:	4698      	mov	r8, r3
10014468:	e6ca      	b.n	10014200 <__aeabi_ddiv+0x29c>
1001446a:	001e      	movs	r6, r3
1001446c:	e6a5      	b.n	100141ba <__aeabi_ddiv+0x256>
1001446e:	42ac      	cmp	r4, r5
10014470:	d83e      	bhi.n	100144f0 <__aeabi_ddiv+0x58c>
10014472:	d074      	beq.n	1001455e <__aeabi_ddiv+0x5fa>
10014474:	0011      	movs	r1, r2
10014476:	e753      	b.n	10014320 <__aeabi_ddiv+0x3bc>
10014478:	2101      	movs	r1, #1
1001447a:	4249      	negs	r1, r1
1001447c:	e752      	b.n	10014324 <__aeabi_ddiv+0x3c0>
1001447e:	001c      	movs	r4, r3
10014480:	e70e      	b.n	100142a0 <__aeabi_ddiv+0x33c>
10014482:	001e      	movs	r6, r3
10014484:	e72b      	b.n	100142de <__aeabi_ddiv+0x37a>
10014486:	2d1f      	cmp	r5, #31
10014488:	dc3c      	bgt.n	10014504 <__aeabi_ddiv+0x5a0>
1001448a:	2320      	movs	r3, #32
1001448c:	000a      	movs	r2, r1
1001448e:	4658      	mov	r0, fp
10014490:	1b5b      	subs	r3, r3, r5
10014492:	4098      	lsls	r0, r3
10014494:	40ea      	lsrs	r2, r5
10014496:	4099      	lsls	r1, r3
10014498:	4302      	orrs	r2, r0
1001449a:	1e48      	subs	r0, r1, #1
1001449c:	4181      	sbcs	r1, r0
1001449e:	465e      	mov	r6, fp
100144a0:	4311      	orrs	r1, r2
100144a2:	40ee      	lsrs	r6, r5
100144a4:	074b      	lsls	r3, r1, #29
100144a6:	d009      	beq.n	100144bc <__aeabi_ddiv+0x558>
100144a8:	230f      	movs	r3, #15
100144aa:	400b      	ands	r3, r1
100144ac:	2b04      	cmp	r3, #4
100144ae:	d005      	beq.n	100144bc <__aeabi_ddiv+0x558>
100144b0:	000b      	movs	r3, r1
100144b2:	1d19      	adds	r1, r3, #4
100144b4:	4299      	cmp	r1, r3
100144b6:	419b      	sbcs	r3, r3
100144b8:	425b      	negs	r3, r3
100144ba:	18f6      	adds	r6, r6, r3
100144bc:	0233      	lsls	r3, r6, #8
100144be:	d53c      	bpl.n	1001453a <__aeabi_ddiv+0x5d6>
100144c0:	4653      	mov	r3, sl
100144c2:	2201      	movs	r2, #1
100144c4:	2100      	movs	r1, #0
100144c6:	401a      	ands	r2, r3
100144c8:	2600      	movs	r6, #0
100144ca:	2301      	movs	r3, #1
100144cc:	4689      	mov	r9, r1
100144ce:	e5af      	b.n	10014030 <__aeabi_ddiv+0xcc>
100144d0:	2302      	movs	r3, #2
100144d2:	425b      	negs	r3, r3
100144d4:	469c      	mov	ip, r3
100144d6:	9c03      	ldr	r4, [sp, #12]
100144d8:	44e3      	add	fp, ip
100144da:	46a4      	mov	ip, r4
100144dc:	9b02      	ldr	r3, [sp, #8]
100144de:	4463      	add	r3, ip
100144e0:	4698      	mov	r8, r3
100144e2:	45a0      	cmp	r8, r4
100144e4:	41b6      	sbcs	r6, r6
100144e6:	4276      	negs	r6, r6
100144e8:	19f6      	adds	r6, r6, r7
100144ea:	9302      	str	r3, [sp, #8]
100144ec:	18b2      	adds	r2, r6, r2
100144ee:	e6b1      	b.n	10014254 <__aeabi_ddiv+0x2f0>
100144f0:	9803      	ldr	r0, [sp, #12]
100144f2:	1e8a      	subs	r2, r1, #2
100144f4:	0041      	lsls	r1, r0, #1
100144f6:	4281      	cmp	r1, r0
100144f8:	41b6      	sbcs	r6, r6
100144fa:	4276      	negs	r6, r6
100144fc:	19f6      	adds	r6, r6, r7
100144fe:	19ad      	adds	r5, r5, r6
10014500:	9103      	str	r1, [sp, #12]
10014502:	e761      	b.n	100143c8 <__aeabi_ddiv+0x464>
10014504:	221f      	movs	r2, #31
10014506:	4252      	negs	r2, r2
10014508:	1ad3      	subs	r3, r2, r3
1001450a:	465a      	mov	r2, fp
1001450c:	40da      	lsrs	r2, r3
1001450e:	0013      	movs	r3, r2
10014510:	2d20      	cmp	r5, #32
10014512:	d029      	beq.n	10014568 <__aeabi_ddiv+0x604>
10014514:	2240      	movs	r2, #64	; 0x40
10014516:	4658      	mov	r0, fp
10014518:	1b55      	subs	r5, r2, r5
1001451a:	40a8      	lsls	r0, r5
1001451c:	4301      	orrs	r1, r0
1001451e:	1e48      	subs	r0, r1, #1
10014520:	4181      	sbcs	r1, r0
10014522:	2007      	movs	r0, #7
10014524:	430b      	orrs	r3, r1
10014526:	4018      	ands	r0, r3
10014528:	2600      	movs	r6, #0
1001452a:	2800      	cmp	r0, #0
1001452c:	d009      	beq.n	10014542 <__aeabi_ddiv+0x5de>
1001452e:	220f      	movs	r2, #15
10014530:	2600      	movs	r6, #0
10014532:	401a      	ands	r2, r3
10014534:	0019      	movs	r1, r3
10014536:	2a04      	cmp	r2, #4
10014538:	d1bb      	bne.n	100144b2 <__aeabi_ddiv+0x54e>
1001453a:	000b      	movs	r3, r1
1001453c:	0770      	lsls	r0, r6, #29
1001453e:	0276      	lsls	r6, r6, #9
10014540:	0b36      	lsrs	r6, r6, #12
10014542:	08db      	lsrs	r3, r3, #3
10014544:	4303      	orrs	r3, r0
10014546:	4699      	mov	r9, r3
10014548:	2201      	movs	r2, #1
1001454a:	4653      	mov	r3, sl
1001454c:	401a      	ands	r2, r3
1001454e:	2300      	movs	r3, #0
10014550:	e56e      	b.n	10014030 <__aeabi_ddiv+0xcc>
10014552:	9902      	ldr	r1, [sp, #8]
10014554:	428d      	cmp	r5, r1
10014556:	d8bb      	bhi.n	100144d0 <__aeabi_ddiv+0x56c>
10014558:	469b      	mov	fp, r3
1001455a:	2600      	movs	r6, #0
1001455c:	e67b      	b.n	10014256 <__aeabi_ddiv+0x2f2>
1001455e:	9803      	ldr	r0, [sp, #12]
10014560:	4298      	cmp	r0, r3
10014562:	d3c5      	bcc.n	100144f0 <__aeabi_ddiv+0x58c>
10014564:	0011      	movs	r1, r2
10014566:	e732      	b.n	100143ce <__aeabi_ddiv+0x46a>
10014568:	2000      	movs	r0, #0
1001456a:	e7d7      	b.n	1001451c <__aeabi_ddiv+0x5b8>
1001456c:	2680      	movs	r6, #128	; 0x80
1001456e:	465b      	mov	r3, fp
10014570:	0336      	lsls	r6, r6, #12
10014572:	431e      	orrs	r6, r3
10014574:	0336      	lsls	r6, r6, #12
10014576:	0b36      	lsrs	r6, r6, #12
10014578:	9a00      	ldr	r2, [sp, #0]
1001457a:	4689      	mov	r9, r1
1001457c:	4b03      	ldr	r3, [pc, #12]	; (1001458c <__aeabi_ddiv+0x628>)
1001457e:	e557      	b.n	10014030 <__aeabi_ddiv+0xcc>
10014580:	000003ff 	.word	0x000003ff
10014584:	feffffff 	.word	0xfeffffff
10014588:	000007fe 	.word	0x000007fe
1001458c:	000007ff 	.word	0x000007ff

10014590 <__eqdf2>:
10014590:	b5f0      	push	{r4, r5, r6, r7, lr}
10014592:	465f      	mov	r7, fp
10014594:	4656      	mov	r6, sl
10014596:	464d      	mov	r5, r9
10014598:	4644      	mov	r4, r8
1001459a:	b4f0      	push	{r4, r5, r6, r7}
1001459c:	031f      	lsls	r7, r3, #12
1001459e:	005c      	lsls	r4, r3, #1
100145a0:	0fdb      	lsrs	r3, r3, #31
100145a2:	469a      	mov	sl, r3
100145a4:	4b19      	ldr	r3, [pc, #100]	; (1001460c <__eqdf2+0x7c>)
100145a6:	030e      	lsls	r6, r1, #12
100145a8:	004d      	lsls	r5, r1, #1
100145aa:	0fc9      	lsrs	r1, r1, #31
100145ac:	4680      	mov	r8, r0
100145ae:	0b36      	lsrs	r6, r6, #12
100145b0:	0d6d      	lsrs	r5, r5, #21
100145b2:	468b      	mov	fp, r1
100145b4:	4691      	mov	r9, r2
100145b6:	0b3f      	lsrs	r7, r7, #12
100145b8:	0d64      	lsrs	r4, r4, #21
100145ba:	429d      	cmp	r5, r3
100145bc:	d019      	beq.n	100145f2 <__eqdf2+0x62>
100145be:	4b13      	ldr	r3, [pc, #76]	; (1001460c <__eqdf2+0x7c>)
100145c0:	429c      	cmp	r4, r3
100145c2:	d01b      	beq.n	100145fc <__eqdf2+0x6c>
100145c4:	2301      	movs	r3, #1
100145c6:	42a5      	cmp	r5, r4
100145c8:	d006      	beq.n	100145d8 <__eqdf2+0x48>
100145ca:	0018      	movs	r0, r3
100145cc:	bc3c      	pop	{r2, r3, r4, r5}
100145ce:	4690      	mov	r8, r2
100145d0:	4699      	mov	r9, r3
100145d2:	46a2      	mov	sl, r4
100145d4:	46ab      	mov	fp, r5
100145d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
100145d8:	42be      	cmp	r6, r7
100145da:	d1f6      	bne.n	100145ca <__eqdf2+0x3a>
100145dc:	45c8      	cmp	r8, r9
100145de:	d1f4      	bne.n	100145ca <__eqdf2+0x3a>
100145e0:	45d3      	cmp	fp, sl
100145e2:	d010      	beq.n	10014606 <__eqdf2+0x76>
100145e4:	2d00      	cmp	r5, #0
100145e6:	d1f0      	bne.n	100145ca <__eqdf2+0x3a>
100145e8:	4330      	orrs	r0, r6
100145ea:	0003      	movs	r3, r0
100145ec:	1e5a      	subs	r2, r3, #1
100145ee:	4193      	sbcs	r3, r2
100145f0:	e7eb      	b.n	100145ca <__eqdf2+0x3a>
100145f2:	0031      	movs	r1, r6
100145f4:	2301      	movs	r3, #1
100145f6:	4301      	orrs	r1, r0
100145f8:	d1e7      	bne.n	100145ca <__eqdf2+0x3a>
100145fa:	e7e0      	b.n	100145be <__eqdf2+0x2e>
100145fc:	433a      	orrs	r2, r7
100145fe:	2301      	movs	r3, #1
10014600:	2a00      	cmp	r2, #0
10014602:	d1e2      	bne.n	100145ca <__eqdf2+0x3a>
10014604:	e7de      	b.n	100145c4 <__eqdf2+0x34>
10014606:	2300      	movs	r3, #0
10014608:	e7df      	b.n	100145ca <__eqdf2+0x3a>
1001460a:	46c0      	nop			; (mov r8, r8)
1001460c:	000007ff 	.word	0x000007ff

10014610 <__gedf2>:
10014610:	b5f0      	push	{r4, r5, r6, r7, lr}
10014612:	465f      	mov	r7, fp
10014614:	4644      	mov	r4, r8
10014616:	4656      	mov	r6, sl
10014618:	464d      	mov	r5, r9
1001461a:	b4f0      	push	{r4, r5, r6, r7}
1001461c:	031f      	lsls	r7, r3, #12
1001461e:	0b3c      	lsrs	r4, r7, #12
10014620:	4f2c      	ldr	r7, [pc, #176]	; (100146d4 <__gedf2+0xc4>)
10014622:	030e      	lsls	r6, r1, #12
10014624:	004d      	lsls	r5, r1, #1
10014626:	46a3      	mov	fp, r4
10014628:	005c      	lsls	r4, r3, #1
1001462a:	4684      	mov	ip, r0
1001462c:	0b36      	lsrs	r6, r6, #12
1001462e:	0d6d      	lsrs	r5, r5, #21
10014630:	0fc9      	lsrs	r1, r1, #31
10014632:	4690      	mov	r8, r2
10014634:	0d64      	lsrs	r4, r4, #21
10014636:	0fdb      	lsrs	r3, r3, #31
10014638:	42bd      	cmp	r5, r7
1001463a:	d02b      	beq.n	10014694 <__gedf2+0x84>
1001463c:	4f25      	ldr	r7, [pc, #148]	; (100146d4 <__gedf2+0xc4>)
1001463e:	42bc      	cmp	r4, r7
10014640:	d02e      	beq.n	100146a0 <__gedf2+0x90>
10014642:	2d00      	cmp	r5, #0
10014644:	d10e      	bne.n	10014664 <__gedf2+0x54>
10014646:	4330      	orrs	r0, r6
10014648:	0007      	movs	r7, r0
1001464a:	4681      	mov	r9, r0
1001464c:	4278      	negs	r0, r7
1001464e:	4178      	adcs	r0, r7
10014650:	2c00      	cmp	r4, #0
10014652:	d117      	bne.n	10014684 <__gedf2+0x74>
10014654:	465f      	mov	r7, fp
10014656:	433a      	orrs	r2, r7
10014658:	d114      	bne.n	10014684 <__gedf2+0x74>
1001465a:	464b      	mov	r3, r9
1001465c:	2000      	movs	r0, #0
1001465e:	2b00      	cmp	r3, #0
10014660:	d00a      	beq.n	10014678 <__gedf2+0x68>
10014662:	e006      	b.n	10014672 <__gedf2+0x62>
10014664:	2c00      	cmp	r4, #0
10014666:	d102      	bne.n	1001466e <__gedf2+0x5e>
10014668:	4658      	mov	r0, fp
1001466a:	4302      	orrs	r2, r0
1001466c:	d001      	beq.n	10014672 <__gedf2+0x62>
1001466e:	4299      	cmp	r1, r3
10014670:	d01a      	beq.n	100146a8 <__gedf2+0x98>
10014672:	2301      	movs	r3, #1
10014674:	4248      	negs	r0, r1
10014676:	4318      	orrs	r0, r3
10014678:	bc3c      	pop	{r2, r3, r4, r5}
1001467a:	4690      	mov	r8, r2
1001467c:	4699      	mov	r9, r3
1001467e:	46a2      	mov	sl, r4
10014680:	46ab      	mov	fp, r5
10014682:	bdf0      	pop	{r4, r5, r6, r7, pc}
10014684:	2800      	cmp	r0, #0
10014686:	d0f2      	beq.n	1001466e <__gedf2+0x5e>
10014688:	4258      	negs	r0, r3
1001468a:	4158      	adcs	r0, r3
1001468c:	2201      	movs	r2, #1
1001468e:	4240      	negs	r0, r0
10014690:	4310      	orrs	r0, r2
10014692:	e7f1      	b.n	10014678 <__gedf2+0x68>
10014694:	0037      	movs	r7, r6
10014696:	4307      	orrs	r7, r0
10014698:	d0d0      	beq.n	1001463c <__gedf2+0x2c>
1001469a:	2002      	movs	r0, #2
1001469c:	4240      	negs	r0, r0
1001469e:	e7eb      	b.n	10014678 <__gedf2+0x68>
100146a0:	465f      	mov	r7, fp
100146a2:	4317      	orrs	r7, r2
100146a4:	d0cd      	beq.n	10014642 <__gedf2+0x32>
100146a6:	e7f8      	b.n	1001469a <__gedf2+0x8a>
100146a8:	42a5      	cmp	r5, r4
100146aa:	dce2      	bgt.n	10014672 <__gedf2+0x62>
100146ac:	db05      	blt.n	100146ba <__gedf2+0xaa>
100146ae:	455e      	cmp	r6, fp
100146b0:	d8df      	bhi.n	10014672 <__gedf2+0x62>
100146b2:	d008      	beq.n	100146c6 <__gedf2+0xb6>
100146b4:	2000      	movs	r0, #0
100146b6:	455e      	cmp	r6, fp
100146b8:	d2de      	bcs.n	10014678 <__gedf2+0x68>
100146ba:	4248      	negs	r0, r1
100146bc:	4148      	adcs	r0, r1
100146be:	2301      	movs	r3, #1
100146c0:	4240      	negs	r0, r0
100146c2:	4318      	orrs	r0, r3
100146c4:	e7d8      	b.n	10014678 <__gedf2+0x68>
100146c6:	45c4      	cmp	ip, r8
100146c8:	d8d3      	bhi.n	10014672 <__gedf2+0x62>
100146ca:	2000      	movs	r0, #0
100146cc:	45c4      	cmp	ip, r8
100146ce:	d3f4      	bcc.n	100146ba <__gedf2+0xaa>
100146d0:	e7d2      	b.n	10014678 <__gedf2+0x68>
100146d2:	46c0      	nop			; (mov r8, r8)
100146d4:	000007ff 	.word	0x000007ff

100146d8 <__ledf2>:
100146d8:	b5f0      	push	{r4, r5, r6, r7, lr}
100146da:	465f      	mov	r7, fp
100146dc:	464d      	mov	r5, r9
100146de:	4644      	mov	r4, r8
100146e0:	4656      	mov	r6, sl
100146e2:	b4f0      	push	{r4, r5, r6, r7}
100146e4:	031c      	lsls	r4, r3, #12
100146e6:	0b24      	lsrs	r4, r4, #12
100146e8:	46a4      	mov	ip, r4
100146ea:	4c2f      	ldr	r4, [pc, #188]	; (100147a8 <__ledf2+0xd0>)
100146ec:	030f      	lsls	r7, r1, #12
100146ee:	004d      	lsls	r5, r1, #1
100146f0:	005e      	lsls	r6, r3, #1
100146f2:	0fc9      	lsrs	r1, r1, #31
100146f4:	4680      	mov	r8, r0
100146f6:	0b3f      	lsrs	r7, r7, #12
100146f8:	0d6d      	lsrs	r5, r5, #21
100146fa:	468b      	mov	fp, r1
100146fc:	4691      	mov	r9, r2
100146fe:	0d76      	lsrs	r6, r6, #21
10014700:	0fdb      	lsrs	r3, r3, #31
10014702:	42a5      	cmp	r5, r4
10014704:	d020      	beq.n	10014748 <__ledf2+0x70>
10014706:	4c28      	ldr	r4, [pc, #160]	; (100147a8 <__ledf2+0xd0>)
10014708:	42a6      	cmp	r6, r4
1001470a:	d022      	beq.n	10014752 <__ledf2+0x7a>
1001470c:	2d00      	cmp	r5, #0
1001470e:	d112      	bne.n	10014736 <__ledf2+0x5e>
10014710:	4338      	orrs	r0, r7
10014712:	4244      	negs	r4, r0
10014714:	4144      	adcs	r4, r0
10014716:	2e00      	cmp	r6, #0
10014718:	d020      	beq.n	1001475c <__ledf2+0x84>
1001471a:	2c00      	cmp	r4, #0
1001471c:	d00d      	beq.n	1001473a <__ledf2+0x62>
1001471e:	425c      	negs	r4, r3
10014720:	4163      	adcs	r3, r4
10014722:	2401      	movs	r4, #1
10014724:	425b      	negs	r3, r3
10014726:	431c      	orrs	r4, r3
10014728:	0020      	movs	r0, r4
1001472a:	bc3c      	pop	{r2, r3, r4, r5}
1001472c:	4690      	mov	r8, r2
1001472e:	4699      	mov	r9, r3
10014730:	46a2      	mov	sl, r4
10014732:	46ab      	mov	fp, r5
10014734:	bdf0      	pop	{r4, r5, r6, r7, pc}
10014736:	2e00      	cmp	r6, #0
10014738:	d017      	beq.n	1001476a <__ledf2+0x92>
1001473a:	455b      	cmp	r3, fp
1001473c:	d019      	beq.n	10014772 <__ledf2+0x9a>
1001473e:	465b      	mov	r3, fp
10014740:	425c      	negs	r4, r3
10014742:	2301      	movs	r3, #1
10014744:	431c      	orrs	r4, r3
10014746:	e7ef      	b.n	10014728 <__ledf2+0x50>
10014748:	0039      	movs	r1, r7
1001474a:	2402      	movs	r4, #2
1001474c:	4301      	orrs	r1, r0
1001474e:	d1eb      	bne.n	10014728 <__ledf2+0x50>
10014750:	e7d9      	b.n	10014706 <__ledf2+0x2e>
10014752:	4661      	mov	r1, ip
10014754:	2402      	movs	r4, #2
10014756:	4311      	orrs	r1, r2
10014758:	d1e6      	bne.n	10014728 <__ledf2+0x50>
1001475a:	e7d7      	b.n	1001470c <__ledf2+0x34>
1001475c:	4661      	mov	r1, ip
1001475e:	430a      	orrs	r2, r1
10014760:	d1db      	bne.n	1001471a <__ledf2+0x42>
10014762:	2400      	movs	r4, #0
10014764:	2800      	cmp	r0, #0
10014766:	d0df      	beq.n	10014728 <__ledf2+0x50>
10014768:	e7e9      	b.n	1001473e <__ledf2+0x66>
1001476a:	4661      	mov	r1, ip
1001476c:	430a      	orrs	r2, r1
1001476e:	d1e4      	bne.n	1001473a <__ledf2+0x62>
10014770:	e7e5      	b.n	1001473e <__ledf2+0x66>
10014772:	42b5      	cmp	r5, r6
10014774:	dd03      	ble.n	1001477e <__ledf2+0xa6>
10014776:	2201      	movs	r2, #1
10014778:	425c      	negs	r4, r3
1001477a:	4314      	orrs	r4, r2
1001477c:	e7d4      	b.n	10014728 <__ledf2+0x50>
1001477e:	42b5      	cmp	r5, r6
10014780:	dbcd      	blt.n	1001471e <__ledf2+0x46>
10014782:	4567      	cmp	r7, ip
10014784:	d8db      	bhi.n	1001473e <__ledf2+0x66>
10014786:	d009      	beq.n	1001479c <__ledf2+0xc4>
10014788:	2400      	movs	r4, #0
1001478a:	4567      	cmp	r7, ip
1001478c:	d2cc      	bcs.n	10014728 <__ledf2+0x50>
1001478e:	4659      	mov	r1, fp
10014790:	424c      	negs	r4, r1
10014792:	4161      	adcs	r1, r4
10014794:	2401      	movs	r4, #1
10014796:	4249      	negs	r1, r1
10014798:	430c      	orrs	r4, r1
1001479a:	e7c5      	b.n	10014728 <__ledf2+0x50>
1001479c:	45c8      	cmp	r8, r9
1001479e:	d8ce      	bhi.n	1001473e <__ledf2+0x66>
100147a0:	2400      	movs	r4, #0
100147a2:	45c8      	cmp	r8, r9
100147a4:	d3f3      	bcc.n	1001478e <__ledf2+0xb6>
100147a6:	e7bf      	b.n	10014728 <__ledf2+0x50>
100147a8:	000007ff 	.word	0x000007ff

100147ac <__aeabi_dmul>:
100147ac:	b5f0      	push	{r4, r5, r6, r7, lr}
100147ae:	465f      	mov	r7, fp
100147b0:	4656      	mov	r6, sl
100147b2:	464d      	mov	r5, r9
100147b4:	4644      	mov	r4, r8
100147b6:	b4f0      	push	{r4, r5, r6, r7}
100147b8:	030d      	lsls	r5, r1, #12
100147ba:	4699      	mov	r9, r3
100147bc:	004e      	lsls	r6, r1, #1
100147be:	0b2b      	lsrs	r3, r5, #12
100147c0:	b087      	sub	sp, #28
100147c2:	0007      	movs	r7, r0
100147c4:	4692      	mov	sl, r2
100147c6:	4680      	mov	r8, r0
100147c8:	469b      	mov	fp, r3
100147ca:	0d76      	lsrs	r6, r6, #21
100147cc:	0fcc      	lsrs	r4, r1, #31
100147ce:	2e00      	cmp	r6, #0
100147d0:	d069      	beq.n	100148a6 <__aeabi_dmul+0xfa>
100147d2:	4b6d      	ldr	r3, [pc, #436]	; (10014988 <__aeabi_dmul+0x1dc>)
100147d4:	429e      	cmp	r6, r3
100147d6:	d035      	beq.n	10014844 <__aeabi_dmul+0x98>
100147d8:	465b      	mov	r3, fp
100147da:	2280      	movs	r2, #128	; 0x80
100147dc:	00dd      	lsls	r5, r3, #3
100147de:	0412      	lsls	r2, r2, #16
100147e0:	0f43      	lsrs	r3, r0, #29
100147e2:	4313      	orrs	r3, r2
100147e4:	432b      	orrs	r3, r5
100147e6:	469b      	mov	fp, r3
100147e8:	00c3      	lsls	r3, r0, #3
100147ea:	4698      	mov	r8, r3
100147ec:	4b67      	ldr	r3, [pc, #412]	; (1001498c <__aeabi_dmul+0x1e0>)
100147ee:	2700      	movs	r7, #0
100147f0:	469c      	mov	ip, r3
100147f2:	2300      	movs	r3, #0
100147f4:	4466      	add	r6, ip
100147f6:	9301      	str	r3, [sp, #4]
100147f8:	464a      	mov	r2, r9
100147fa:	0315      	lsls	r5, r2, #12
100147fc:	0050      	lsls	r0, r2, #1
100147fe:	0fd2      	lsrs	r2, r2, #31
10014800:	4653      	mov	r3, sl
10014802:	0b2d      	lsrs	r5, r5, #12
10014804:	0d40      	lsrs	r0, r0, #21
10014806:	4691      	mov	r9, r2
10014808:	d100      	bne.n	1001480c <__aeabi_dmul+0x60>
1001480a:	e076      	b.n	100148fa <__aeabi_dmul+0x14e>
1001480c:	4a5e      	ldr	r2, [pc, #376]	; (10014988 <__aeabi_dmul+0x1dc>)
1001480e:	4290      	cmp	r0, r2
10014810:	d06c      	beq.n	100148ec <__aeabi_dmul+0x140>
10014812:	2280      	movs	r2, #128	; 0x80
10014814:	0f5b      	lsrs	r3, r3, #29
10014816:	0412      	lsls	r2, r2, #16
10014818:	4313      	orrs	r3, r2
1001481a:	4a5c      	ldr	r2, [pc, #368]	; (1001498c <__aeabi_dmul+0x1e0>)
1001481c:	00ed      	lsls	r5, r5, #3
1001481e:	4694      	mov	ip, r2
10014820:	431d      	orrs	r5, r3
10014822:	4653      	mov	r3, sl
10014824:	2200      	movs	r2, #0
10014826:	00db      	lsls	r3, r3, #3
10014828:	4460      	add	r0, ip
1001482a:	4649      	mov	r1, r9
1001482c:	1836      	adds	r6, r6, r0
1001482e:	1c70      	adds	r0, r6, #1
10014830:	4061      	eors	r1, r4
10014832:	9002      	str	r0, [sp, #8]
10014834:	4317      	orrs	r7, r2
10014836:	2f0f      	cmp	r7, #15
10014838:	d900      	bls.n	1001483c <__aeabi_dmul+0x90>
1001483a:	e0af      	b.n	1001499c <__aeabi_dmul+0x1f0>
1001483c:	4854      	ldr	r0, [pc, #336]	; (10014990 <__aeabi_dmul+0x1e4>)
1001483e:	00bf      	lsls	r7, r7, #2
10014840:	59c7      	ldr	r7, [r0, r7]
10014842:	46bf      	mov	pc, r7
10014844:	465b      	mov	r3, fp
10014846:	431f      	orrs	r7, r3
10014848:	d000      	beq.n	1001484c <__aeabi_dmul+0xa0>
1001484a:	e088      	b.n	1001495e <__aeabi_dmul+0x1b2>
1001484c:	2300      	movs	r3, #0
1001484e:	469b      	mov	fp, r3
10014850:	4698      	mov	r8, r3
10014852:	3302      	adds	r3, #2
10014854:	2708      	movs	r7, #8
10014856:	9301      	str	r3, [sp, #4]
10014858:	e7ce      	b.n	100147f8 <__aeabi_dmul+0x4c>
1001485a:	4649      	mov	r1, r9
1001485c:	2a02      	cmp	r2, #2
1001485e:	d06a      	beq.n	10014936 <__aeabi_dmul+0x18a>
10014860:	2a03      	cmp	r2, #3
10014862:	d100      	bne.n	10014866 <__aeabi_dmul+0xba>
10014864:	e209      	b.n	10014c7a <__aeabi_dmul+0x4ce>
10014866:	2a01      	cmp	r2, #1
10014868:	d000      	beq.n	1001486c <__aeabi_dmul+0xc0>
1001486a:	e1bb      	b.n	10014be4 <__aeabi_dmul+0x438>
1001486c:	4011      	ands	r1, r2
1001486e:	2200      	movs	r2, #0
10014870:	2300      	movs	r3, #0
10014872:	2500      	movs	r5, #0
10014874:	4690      	mov	r8, r2
10014876:	b2cc      	uxtb	r4, r1
10014878:	2100      	movs	r1, #0
1001487a:	032d      	lsls	r5, r5, #12
1001487c:	0d0a      	lsrs	r2, r1, #20
1001487e:	0512      	lsls	r2, r2, #20
10014880:	0b2d      	lsrs	r5, r5, #12
10014882:	4315      	orrs	r5, r2
10014884:	4a43      	ldr	r2, [pc, #268]	; (10014994 <__aeabi_dmul+0x1e8>)
10014886:	051b      	lsls	r3, r3, #20
10014888:	4015      	ands	r5, r2
1001488a:	431d      	orrs	r5, r3
1001488c:	006d      	lsls	r5, r5, #1
1001488e:	07e4      	lsls	r4, r4, #31
10014890:	086d      	lsrs	r5, r5, #1
10014892:	4325      	orrs	r5, r4
10014894:	4640      	mov	r0, r8
10014896:	0029      	movs	r1, r5
10014898:	b007      	add	sp, #28
1001489a:	bc3c      	pop	{r2, r3, r4, r5}
1001489c:	4690      	mov	r8, r2
1001489e:	4699      	mov	r9, r3
100148a0:	46a2      	mov	sl, r4
100148a2:	46ab      	mov	fp, r5
100148a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100148a6:	4303      	orrs	r3, r0
100148a8:	d052      	beq.n	10014950 <__aeabi_dmul+0x1a4>
100148aa:	465b      	mov	r3, fp
100148ac:	2b00      	cmp	r3, #0
100148ae:	d100      	bne.n	100148b2 <__aeabi_dmul+0x106>
100148b0:	e18a      	b.n	10014bc8 <__aeabi_dmul+0x41c>
100148b2:	4658      	mov	r0, fp
100148b4:	f000 fef8 	bl	100156a8 <__clzsi2>
100148b8:	0003      	movs	r3, r0
100148ba:	3b0b      	subs	r3, #11
100148bc:	2b1c      	cmp	r3, #28
100148be:	dd00      	ble.n	100148c2 <__aeabi_dmul+0x116>
100148c0:	e17b      	b.n	10014bba <__aeabi_dmul+0x40e>
100148c2:	221d      	movs	r2, #29
100148c4:	1ad3      	subs	r3, r2, r3
100148c6:	003a      	movs	r2, r7
100148c8:	0001      	movs	r1, r0
100148ca:	465d      	mov	r5, fp
100148cc:	40da      	lsrs	r2, r3
100148ce:	3908      	subs	r1, #8
100148d0:	408d      	lsls	r5, r1
100148d2:	0013      	movs	r3, r2
100148d4:	408f      	lsls	r7, r1
100148d6:	432b      	orrs	r3, r5
100148d8:	469b      	mov	fp, r3
100148da:	46b8      	mov	r8, r7
100148dc:	4b2e      	ldr	r3, [pc, #184]	; (10014998 <__aeabi_dmul+0x1ec>)
100148de:	2700      	movs	r7, #0
100148e0:	469c      	mov	ip, r3
100148e2:	2300      	movs	r3, #0
100148e4:	4460      	add	r0, ip
100148e6:	4246      	negs	r6, r0
100148e8:	9301      	str	r3, [sp, #4]
100148ea:	e785      	b.n	100147f8 <__aeabi_dmul+0x4c>
100148ec:	4652      	mov	r2, sl
100148ee:	432a      	orrs	r2, r5
100148f0:	d12c      	bne.n	1001494c <__aeabi_dmul+0x1a0>
100148f2:	2500      	movs	r5, #0
100148f4:	2300      	movs	r3, #0
100148f6:	2202      	movs	r2, #2
100148f8:	e797      	b.n	1001482a <__aeabi_dmul+0x7e>
100148fa:	4652      	mov	r2, sl
100148fc:	432a      	orrs	r2, r5
100148fe:	d021      	beq.n	10014944 <__aeabi_dmul+0x198>
10014900:	2d00      	cmp	r5, #0
10014902:	d100      	bne.n	10014906 <__aeabi_dmul+0x15a>
10014904:	e154      	b.n	10014bb0 <__aeabi_dmul+0x404>
10014906:	0028      	movs	r0, r5
10014908:	f000 fece 	bl	100156a8 <__clzsi2>
1001490c:	0003      	movs	r3, r0
1001490e:	3b0b      	subs	r3, #11
10014910:	2b1c      	cmp	r3, #28
10014912:	dd00      	ble.n	10014916 <__aeabi_dmul+0x16a>
10014914:	e146      	b.n	10014ba4 <__aeabi_dmul+0x3f8>
10014916:	211d      	movs	r1, #29
10014918:	1acb      	subs	r3, r1, r3
1001491a:	4651      	mov	r1, sl
1001491c:	0002      	movs	r2, r0
1001491e:	40d9      	lsrs	r1, r3
10014920:	4653      	mov	r3, sl
10014922:	3a08      	subs	r2, #8
10014924:	4095      	lsls	r5, r2
10014926:	4093      	lsls	r3, r2
10014928:	430d      	orrs	r5, r1
1001492a:	4a1b      	ldr	r2, [pc, #108]	; (10014998 <__aeabi_dmul+0x1ec>)
1001492c:	4694      	mov	ip, r2
1001492e:	4460      	add	r0, ip
10014930:	4240      	negs	r0, r0
10014932:	2200      	movs	r2, #0
10014934:	e779      	b.n	1001482a <__aeabi_dmul+0x7e>
10014936:	2401      	movs	r4, #1
10014938:	2200      	movs	r2, #0
1001493a:	400c      	ands	r4, r1
1001493c:	4b12      	ldr	r3, [pc, #72]	; (10014988 <__aeabi_dmul+0x1dc>)
1001493e:	2500      	movs	r5, #0
10014940:	4690      	mov	r8, r2
10014942:	e799      	b.n	10014878 <__aeabi_dmul+0xcc>
10014944:	2500      	movs	r5, #0
10014946:	2300      	movs	r3, #0
10014948:	2201      	movs	r2, #1
1001494a:	e76e      	b.n	1001482a <__aeabi_dmul+0x7e>
1001494c:	2203      	movs	r2, #3
1001494e:	e76c      	b.n	1001482a <__aeabi_dmul+0x7e>
10014950:	2300      	movs	r3, #0
10014952:	469b      	mov	fp, r3
10014954:	4698      	mov	r8, r3
10014956:	3301      	adds	r3, #1
10014958:	2704      	movs	r7, #4
1001495a:	9301      	str	r3, [sp, #4]
1001495c:	e74c      	b.n	100147f8 <__aeabi_dmul+0x4c>
1001495e:	2303      	movs	r3, #3
10014960:	270c      	movs	r7, #12
10014962:	9301      	str	r3, [sp, #4]
10014964:	e748      	b.n	100147f8 <__aeabi_dmul+0x4c>
10014966:	2300      	movs	r3, #0
10014968:	2580      	movs	r5, #128	; 0x80
1001496a:	4698      	mov	r8, r3
1001496c:	2400      	movs	r4, #0
1001496e:	032d      	lsls	r5, r5, #12
10014970:	4b05      	ldr	r3, [pc, #20]	; (10014988 <__aeabi_dmul+0x1dc>)
10014972:	e781      	b.n	10014878 <__aeabi_dmul+0xcc>
10014974:	465d      	mov	r5, fp
10014976:	4643      	mov	r3, r8
10014978:	9a01      	ldr	r2, [sp, #4]
1001497a:	e76f      	b.n	1001485c <__aeabi_dmul+0xb0>
1001497c:	465d      	mov	r5, fp
1001497e:	4643      	mov	r3, r8
10014980:	0021      	movs	r1, r4
10014982:	9a01      	ldr	r2, [sp, #4]
10014984:	e76a      	b.n	1001485c <__aeabi_dmul+0xb0>
10014986:	46c0      	nop			; (mov r8, r8)
10014988:	000007ff 	.word	0x000007ff
1001498c:	fffffc01 	.word	0xfffffc01
10014990:	10018438 	.word	0x10018438
10014994:	800fffff 	.word	0x800fffff
10014998:	000003f3 	.word	0x000003f3
1001499c:	4642      	mov	r2, r8
1001499e:	0c12      	lsrs	r2, r2, #16
100149a0:	4691      	mov	r9, r2
100149a2:	0c1a      	lsrs	r2, r3, #16
100149a4:	4694      	mov	ip, r2
100149a6:	4642      	mov	r2, r8
100149a8:	0417      	lsls	r7, r2, #16
100149aa:	464a      	mov	r2, r9
100149ac:	041b      	lsls	r3, r3, #16
100149ae:	0c1b      	lsrs	r3, r3, #16
100149b0:	435a      	muls	r2, r3
100149b2:	4660      	mov	r0, ip
100149b4:	4690      	mov	r8, r2
100149b6:	464a      	mov	r2, r9
100149b8:	4342      	muls	r2, r0
100149ba:	0010      	movs	r0, r2
100149bc:	9203      	str	r2, [sp, #12]
100149be:	4662      	mov	r2, ip
100149c0:	001c      	movs	r4, r3
100149c2:	0c3f      	lsrs	r7, r7, #16
100149c4:	437a      	muls	r2, r7
100149c6:	437c      	muls	r4, r7
100149c8:	4442      	add	r2, r8
100149ca:	9201      	str	r2, [sp, #4]
100149cc:	0c22      	lsrs	r2, r4, #16
100149ce:	4692      	mov	sl, r2
100149d0:	9a01      	ldr	r2, [sp, #4]
100149d2:	4452      	add	r2, sl
100149d4:	4590      	cmp	r8, r2
100149d6:	d906      	bls.n	100149e6 <__aeabi_dmul+0x23a>
100149d8:	4682      	mov	sl, r0
100149da:	2080      	movs	r0, #128	; 0x80
100149dc:	0240      	lsls	r0, r0, #9
100149de:	4680      	mov	r8, r0
100149e0:	44c2      	add	sl, r8
100149e2:	4650      	mov	r0, sl
100149e4:	9003      	str	r0, [sp, #12]
100149e6:	0c10      	lsrs	r0, r2, #16
100149e8:	9004      	str	r0, [sp, #16]
100149ea:	4648      	mov	r0, r9
100149ec:	0424      	lsls	r4, r4, #16
100149ee:	0c24      	lsrs	r4, r4, #16
100149f0:	0412      	lsls	r2, r2, #16
100149f2:	1912      	adds	r2, r2, r4
100149f4:	9205      	str	r2, [sp, #20]
100149f6:	0c2a      	lsrs	r2, r5, #16
100149f8:	042d      	lsls	r5, r5, #16
100149fa:	0c2d      	lsrs	r5, r5, #16
100149fc:	4368      	muls	r0, r5
100149fe:	002c      	movs	r4, r5
10014a00:	4682      	mov	sl, r0
10014a02:	4648      	mov	r0, r9
10014a04:	437c      	muls	r4, r7
10014a06:	4350      	muls	r0, r2
10014a08:	4681      	mov	r9, r0
10014a0a:	0c20      	lsrs	r0, r4, #16
10014a0c:	4680      	mov	r8, r0
10014a0e:	4357      	muls	r7, r2
10014a10:	4457      	add	r7, sl
10014a12:	4447      	add	r7, r8
10014a14:	45ba      	cmp	sl, r7
10014a16:	d903      	bls.n	10014a20 <__aeabi_dmul+0x274>
10014a18:	2080      	movs	r0, #128	; 0x80
10014a1a:	0240      	lsls	r0, r0, #9
10014a1c:	4680      	mov	r8, r0
10014a1e:	44c1      	add	r9, r8
10014a20:	0c38      	lsrs	r0, r7, #16
10014a22:	043f      	lsls	r7, r7, #16
10014a24:	46b8      	mov	r8, r7
10014a26:	4448      	add	r0, r9
10014a28:	0424      	lsls	r4, r4, #16
10014a2a:	0c24      	lsrs	r4, r4, #16
10014a2c:	9001      	str	r0, [sp, #4]
10014a2e:	9804      	ldr	r0, [sp, #16]
10014a30:	44a0      	add	r8, r4
10014a32:	4440      	add	r0, r8
10014a34:	9004      	str	r0, [sp, #16]
10014a36:	4658      	mov	r0, fp
10014a38:	0c00      	lsrs	r0, r0, #16
10014a3a:	4681      	mov	r9, r0
10014a3c:	4658      	mov	r0, fp
10014a3e:	0404      	lsls	r4, r0, #16
10014a40:	0c20      	lsrs	r0, r4, #16
10014a42:	4682      	mov	sl, r0
10014a44:	0007      	movs	r7, r0
10014a46:	4648      	mov	r0, r9
10014a48:	435f      	muls	r7, r3
10014a4a:	464c      	mov	r4, r9
10014a4c:	4343      	muls	r3, r0
10014a4e:	4660      	mov	r0, ip
10014a50:	4360      	muls	r0, r4
10014a52:	4664      	mov	r4, ip
10014a54:	4683      	mov	fp, r0
10014a56:	4650      	mov	r0, sl
10014a58:	4344      	muls	r4, r0
10014a5a:	0c38      	lsrs	r0, r7, #16
10014a5c:	4684      	mov	ip, r0
10014a5e:	18e4      	adds	r4, r4, r3
10014a60:	4464      	add	r4, ip
10014a62:	42a3      	cmp	r3, r4
10014a64:	d903      	bls.n	10014a6e <__aeabi_dmul+0x2c2>
10014a66:	2380      	movs	r3, #128	; 0x80
10014a68:	025b      	lsls	r3, r3, #9
10014a6a:	469c      	mov	ip, r3
10014a6c:	44e3      	add	fp, ip
10014a6e:	4648      	mov	r0, r9
10014a70:	043f      	lsls	r7, r7, #16
10014a72:	0c23      	lsrs	r3, r4, #16
10014a74:	0c3f      	lsrs	r7, r7, #16
10014a76:	0424      	lsls	r4, r4, #16
10014a78:	19e4      	adds	r4, r4, r7
10014a7a:	4657      	mov	r7, sl
10014a7c:	4368      	muls	r0, r5
10014a7e:	436f      	muls	r7, r5
10014a80:	4684      	mov	ip, r0
10014a82:	464d      	mov	r5, r9
10014a84:	4650      	mov	r0, sl
10014a86:	4355      	muls	r5, r2
10014a88:	4342      	muls	r2, r0
10014a8a:	0c38      	lsrs	r0, r7, #16
10014a8c:	4681      	mov	r9, r0
10014a8e:	4462      	add	r2, ip
10014a90:	444a      	add	r2, r9
10014a92:	445b      	add	r3, fp
10014a94:	4594      	cmp	ip, r2
10014a96:	d903      	bls.n	10014aa0 <__aeabi_dmul+0x2f4>
10014a98:	2080      	movs	r0, #128	; 0x80
10014a9a:	0240      	lsls	r0, r0, #9
10014a9c:	4684      	mov	ip, r0
10014a9e:	4465      	add	r5, ip
10014aa0:	9803      	ldr	r0, [sp, #12]
10014aa2:	043f      	lsls	r7, r7, #16
10014aa4:	4683      	mov	fp, r0
10014aa6:	9804      	ldr	r0, [sp, #16]
10014aa8:	0c3f      	lsrs	r7, r7, #16
10014aaa:	4684      	mov	ip, r0
10014aac:	44e3      	add	fp, ip
10014aae:	45c3      	cmp	fp, r8
10014ab0:	4180      	sbcs	r0, r0
10014ab2:	4240      	negs	r0, r0
10014ab4:	4682      	mov	sl, r0
10014ab6:	0410      	lsls	r0, r2, #16
10014ab8:	4684      	mov	ip, r0
10014aba:	9801      	ldr	r0, [sp, #4]
10014abc:	4467      	add	r7, ip
10014abe:	4684      	mov	ip, r0
10014ac0:	4467      	add	r7, ip
10014ac2:	44a3      	add	fp, r4
10014ac4:	46bc      	mov	ip, r7
10014ac6:	45a3      	cmp	fp, r4
10014ac8:	41a4      	sbcs	r4, r4
10014aca:	4699      	mov	r9, r3
10014acc:	44d4      	add	ip, sl
10014ace:	4264      	negs	r4, r4
10014ad0:	4287      	cmp	r7, r0
10014ad2:	41bf      	sbcs	r7, r7
10014ad4:	45d4      	cmp	ip, sl
10014ad6:	4180      	sbcs	r0, r0
10014ad8:	44e1      	add	r9, ip
10014ada:	46a0      	mov	r8, r4
10014adc:	4599      	cmp	r9, r3
10014ade:	419b      	sbcs	r3, r3
10014ae0:	427f      	negs	r7, r7
10014ae2:	4240      	negs	r0, r0
10014ae4:	44c8      	add	r8, r9
10014ae6:	4307      	orrs	r7, r0
10014ae8:	0c12      	lsrs	r2, r2, #16
10014aea:	18ba      	adds	r2, r7, r2
10014aec:	45a0      	cmp	r8, r4
10014aee:	41a4      	sbcs	r4, r4
10014af0:	425f      	negs	r7, r3
10014af2:	003b      	movs	r3, r7
10014af4:	4264      	negs	r4, r4
10014af6:	4323      	orrs	r3, r4
10014af8:	18d7      	adds	r7, r2, r3
10014afa:	4643      	mov	r3, r8
10014afc:	197d      	adds	r5, r7, r5
10014afe:	0ddb      	lsrs	r3, r3, #23
10014b00:	026d      	lsls	r5, r5, #9
10014b02:	431d      	orrs	r5, r3
10014b04:	465b      	mov	r3, fp
10014b06:	025a      	lsls	r2, r3, #9
10014b08:	9b05      	ldr	r3, [sp, #20]
10014b0a:	431a      	orrs	r2, r3
10014b0c:	1e53      	subs	r3, r2, #1
10014b0e:	419a      	sbcs	r2, r3
10014b10:	465b      	mov	r3, fp
10014b12:	0ddb      	lsrs	r3, r3, #23
10014b14:	431a      	orrs	r2, r3
10014b16:	4643      	mov	r3, r8
10014b18:	025b      	lsls	r3, r3, #9
10014b1a:	4313      	orrs	r3, r2
10014b1c:	01ea      	lsls	r2, r5, #7
10014b1e:	d507      	bpl.n	10014b30 <__aeabi_dmul+0x384>
10014b20:	2201      	movs	r2, #1
10014b22:	085c      	lsrs	r4, r3, #1
10014b24:	4013      	ands	r3, r2
10014b26:	4323      	orrs	r3, r4
10014b28:	07ea      	lsls	r2, r5, #31
10014b2a:	9e02      	ldr	r6, [sp, #8]
10014b2c:	4313      	orrs	r3, r2
10014b2e:	086d      	lsrs	r5, r5, #1
10014b30:	4a57      	ldr	r2, [pc, #348]	; (10014c90 <__aeabi_dmul+0x4e4>)
10014b32:	18b2      	adds	r2, r6, r2
10014b34:	2a00      	cmp	r2, #0
10014b36:	dd4b      	ble.n	10014bd0 <__aeabi_dmul+0x424>
10014b38:	0758      	lsls	r0, r3, #29
10014b3a:	d009      	beq.n	10014b50 <__aeabi_dmul+0x3a4>
10014b3c:	200f      	movs	r0, #15
10014b3e:	4018      	ands	r0, r3
10014b40:	2804      	cmp	r0, #4
10014b42:	d005      	beq.n	10014b50 <__aeabi_dmul+0x3a4>
10014b44:	1d18      	adds	r0, r3, #4
10014b46:	4298      	cmp	r0, r3
10014b48:	419b      	sbcs	r3, r3
10014b4a:	425b      	negs	r3, r3
10014b4c:	18ed      	adds	r5, r5, r3
10014b4e:	0003      	movs	r3, r0
10014b50:	01e8      	lsls	r0, r5, #7
10014b52:	d504      	bpl.n	10014b5e <__aeabi_dmul+0x3b2>
10014b54:	4a4f      	ldr	r2, [pc, #316]	; (10014c94 <__aeabi_dmul+0x4e8>)
10014b56:	4015      	ands	r5, r2
10014b58:	2280      	movs	r2, #128	; 0x80
10014b5a:	00d2      	lsls	r2, r2, #3
10014b5c:	18b2      	adds	r2, r6, r2
10014b5e:	484e      	ldr	r0, [pc, #312]	; (10014c98 <__aeabi_dmul+0x4ec>)
10014b60:	4282      	cmp	r2, r0
10014b62:	dd00      	ble.n	10014b66 <__aeabi_dmul+0x3ba>
10014b64:	e6e7      	b.n	10014936 <__aeabi_dmul+0x18a>
10014b66:	2401      	movs	r4, #1
10014b68:	08db      	lsrs	r3, r3, #3
10014b6a:	0768      	lsls	r0, r5, #29
10014b6c:	4318      	orrs	r0, r3
10014b6e:	026d      	lsls	r5, r5, #9
10014b70:	0553      	lsls	r3, r2, #21
10014b72:	4680      	mov	r8, r0
10014b74:	0b2d      	lsrs	r5, r5, #12
10014b76:	0d5b      	lsrs	r3, r3, #21
10014b78:	400c      	ands	r4, r1
10014b7a:	e67d      	b.n	10014878 <__aeabi_dmul+0xcc>
10014b7c:	2280      	movs	r2, #128	; 0x80
10014b7e:	4659      	mov	r1, fp
10014b80:	0312      	lsls	r2, r2, #12
10014b82:	4211      	tst	r1, r2
10014b84:	d008      	beq.n	10014b98 <__aeabi_dmul+0x3ec>
10014b86:	4215      	tst	r5, r2
10014b88:	d106      	bne.n	10014b98 <__aeabi_dmul+0x3ec>
10014b8a:	4315      	orrs	r5, r2
10014b8c:	032d      	lsls	r5, r5, #12
10014b8e:	4698      	mov	r8, r3
10014b90:	0b2d      	lsrs	r5, r5, #12
10014b92:	464c      	mov	r4, r9
10014b94:	4b41      	ldr	r3, [pc, #260]	; (10014c9c <__aeabi_dmul+0x4f0>)
10014b96:	e66f      	b.n	10014878 <__aeabi_dmul+0xcc>
10014b98:	465d      	mov	r5, fp
10014b9a:	4315      	orrs	r5, r2
10014b9c:	032d      	lsls	r5, r5, #12
10014b9e:	0b2d      	lsrs	r5, r5, #12
10014ba0:	4b3e      	ldr	r3, [pc, #248]	; (10014c9c <__aeabi_dmul+0x4f0>)
10014ba2:	e669      	b.n	10014878 <__aeabi_dmul+0xcc>
10014ba4:	0003      	movs	r3, r0
10014ba6:	4655      	mov	r5, sl
10014ba8:	3b28      	subs	r3, #40	; 0x28
10014baa:	409d      	lsls	r5, r3
10014bac:	2300      	movs	r3, #0
10014bae:	e6bc      	b.n	1001492a <__aeabi_dmul+0x17e>
10014bb0:	4650      	mov	r0, sl
10014bb2:	f000 fd79 	bl	100156a8 <__clzsi2>
10014bb6:	3020      	adds	r0, #32
10014bb8:	e6a8      	b.n	1001490c <__aeabi_dmul+0x160>
10014bba:	0003      	movs	r3, r0
10014bbc:	3b28      	subs	r3, #40	; 0x28
10014bbe:	409f      	lsls	r7, r3
10014bc0:	2300      	movs	r3, #0
10014bc2:	46bb      	mov	fp, r7
10014bc4:	4698      	mov	r8, r3
10014bc6:	e689      	b.n	100148dc <__aeabi_dmul+0x130>
10014bc8:	f000 fd6e 	bl	100156a8 <__clzsi2>
10014bcc:	3020      	adds	r0, #32
10014bce:	e673      	b.n	100148b8 <__aeabi_dmul+0x10c>
10014bd0:	2401      	movs	r4, #1
10014bd2:	1aa6      	subs	r6, r4, r2
10014bd4:	2e38      	cmp	r6, #56	; 0x38
10014bd6:	dd07      	ble.n	10014be8 <__aeabi_dmul+0x43c>
10014bd8:	2200      	movs	r2, #0
10014bda:	400c      	ands	r4, r1
10014bdc:	2300      	movs	r3, #0
10014bde:	2500      	movs	r5, #0
10014be0:	4690      	mov	r8, r2
10014be2:	e649      	b.n	10014878 <__aeabi_dmul+0xcc>
10014be4:	9e02      	ldr	r6, [sp, #8]
10014be6:	e7a3      	b.n	10014b30 <__aeabi_dmul+0x384>
10014be8:	2e1f      	cmp	r6, #31
10014bea:	dc20      	bgt.n	10014c2e <__aeabi_dmul+0x482>
10014bec:	2220      	movs	r2, #32
10014bee:	002c      	movs	r4, r5
10014bf0:	0018      	movs	r0, r3
10014bf2:	1b92      	subs	r2, r2, r6
10014bf4:	40f0      	lsrs	r0, r6
10014bf6:	4094      	lsls	r4, r2
10014bf8:	4093      	lsls	r3, r2
10014bfa:	4304      	orrs	r4, r0
10014bfc:	1e58      	subs	r0, r3, #1
10014bfe:	4183      	sbcs	r3, r0
10014c00:	431c      	orrs	r4, r3
10014c02:	40f5      	lsrs	r5, r6
10014c04:	0763      	lsls	r3, r4, #29
10014c06:	d009      	beq.n	10014c1c <__aeabi_dmul+0x470>
10014c08:	230f      	movs	r3, #15
10014c0a:	4023      	ands	r3, r4
10014c0c:	2b04      	cmp	r3, #4
10014c0e:	d005      	beq.n	10014c1c <__aeabi_dmul+0x470>
10014c10:	0023      	movs	r3, r4
10014c12:	1d1c      	adds	r4, r3, #4
10014c14:	429c      	cmp	r4, r3
10014c16:	4192      	sbcs	r2, r2
10014c18:	4252      	negs	r2, r2
10014c1a:	18ad      	adds	r5, r5, r2
10014c1c:	022b      	lsls	r3, r5, #8
10014c1e:	d51f      	bpl.n	10014c60 <__aeabi_dmul+0x4b4>
10014c20:	2401      	movs	r4, #1
10014c22:	2200      	movs	r2, #0
10014c24:	400c      	ands	r4, r1
10014c26:	2301      	movs	r3, #1
10014c28:	2500      	movs	r5, #0
10014c2a:	4690      	mov	r8, r2
10014c2c:	e624      	b.n	10014878 <__aeabi_dmul+0xcc>
10014c2e:	201f      	movs	r0, #31
10014c30:	002c      	movs	r4, r5
10014c32:	4240      	negs	r0, r0
10014c34:	1a82      	subs	r2, r0, r2
10014c36:	40d4      	lsrs	r4, r2
10014c38:	2e20      	cmp	r6, #32
10014c3a:	d01c      	beq.n	10014c76 <__aeabi_dmul+0x4ca>
10014c3c:	2240      	movs	r2, #64	; 0x40
10014c3e:	1b96      	subs	r6, r2, r6
10014c40:	40b5      	lsls	r5, r6
10014c42:	432b      	orrs	r3, r5
10014c44:	1e58      	subs	r0, r3, #1
10014c46:	4183      	sbcs	r3, r0
10014c48:	2007      	movs	r0, #7
10014c4a:	4323      	orrs	r3, r4
10014c4c:	4018      	ands	r0, r3
10014c4e:	2500      	movs	r5, #0
10014c50:	2800      	cmp	r0, #0
10014c52:	d009      	beq.n	10014c68 <__aeabi_dmul+0x4bc>
10014c54:	220f      	movs	r2, #15
10014c56:	2500      	movs	r5, #0
10014c58:	401a      	ands	r2, r3
10014c5a:	001c      	movs	r4, r3
10014c5c:	2a04      	cmp	r2, #4
10014c5e:	d1d8      	bne.n	10014c12 <__aeabi_dmul+0x466>
10014c60:	0023      	movs	r3, r4
10014c62:	0768      	lsls	r0, r5, #29
10014c64:	026d      	lsls	r5, r5, #9
10014c66:	0b2d      	lsrs	r5, r5, #12
10014c68:	2401      	movs	r4, #1
10014c6a:	08db      	lsrs	r3, r3, #3
10014c6c:	4303      	orrs	r3, r0
10014c6e:	4698      	mov	r8, r3
10014c70:	400c      	ands	r4, r1
10014c72:	2300      	movs	r3, #0
10014c74:	e600      	b.n	10014878 <__aeabi_dmul+0xcc>
10014c76:	2500      	movs	r5, #0
10014c78:	e7e3      	b.n	10014c42 <__aeabi_dmul+0x496>
10014c7a:	2280      	movs	r2, #128	; 0x80
10014c7c:	2401      	movs	r4, #1
10014c7e:	0312      	lsls	r2, r2, #12
10014c80:	4315      	orrs	r5, r2
10014c82:	032d      	lsls	r5, r5, #12
10014c84:	4698      	mov	r8, r3
10014c86:	0b2d      	lsrs	r5, r5, #12
10014c88:	400c      	ands	r4, r1
10014c8a:	4b04      	ldr	r3, [pc, #16]	; (10014c9c <__aeabi_dmul+0x4f0>)
10014c8c:	e5f4      	b.n	10014878 <__aeabi_dmul+0xcc>
10014c8e:	46c0      	nop			; (mov r8, r8)
10014c90:	000003ff 	.word	0x000003ff
10014c94:	feffffff 	.word	0xfeffffff
10014c98:	000007fe 	.word	0x000007fe
10014c9c:	000007ff 	.word	0x000007ff

10014ca0 <__aeabi_dsub>:
10014ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
10014ca2:	4657      	mov	r7, sl
10014ca4:	464e      	mov	r6, r9
10014ca6:	4645      	mov	r5, r8
10014ca8:	b4e0      	push	{r5, r6, r7}
10014caa:	000e      	movs	r6, r1
10014cac:	0011      	movs	r1, r2
10014cae:	0ff2      	lsrs	r2, r6, #31
10014cb0:	4692      	mov	sl, r2
10014cb2:	00c5      	lsls	r5, r0, #3
10014cb4:	0f42      	lsrs	r2, r0, #29
10014cb6:	0318      	lsls	r0, r3, #12
10014cb8:	0337      	lsls	r7, r6, #12
10014cba:	0074      	lsls	r4, r6, #1
10014cbc:	0a40      	lsrs	r0, r0, #9
10014cbe:	0f4e      	lsrs	r6, r1, #29
10014cc0:	0a7f      	lsrs	r7, r7, #9
10014cc2:	4330      	orrs	r0, r6
10014cc4:	4ecf      	ldr	r6, [pc, #828]	; (10015004 <__aeabi_dsub+0x364>)
10014cc6:	4317      	orrs	r7, r2
10014cc8:	005a      	lsls	r2, r3, #1
10014cca:	0d64      	lsrs	r4, r4, #21
10014ccc:	0d52      	lsrs	r2, r2, #21
10014cce:	0fdb      	lsrs	r3, r3, #31
10014cd0:	00c9      	lsls	r1, r1, #3
10014cd2:	42b2      	cmp	r2, r6
10014cd4:	d100      	bne.n	10014cd8 <__aeabi_dsub+0x38>
10014cd6:	e0e5      	b.n	10014ea4 <__aeabi_dsub+0x204>
10014cd8:	2601      	movs	r6, #1
10014cda:	4073      	eors	r3, r6
10014cdc:	1aa6      	subs	r6, r4, r2
10014cde:	46b4      	mov	ip, r6
10014ce0:	4553      	cmp	r3, sl
10014ce2:	d100      	bne.n	10014ce6 <__aeabi_dsub+0x46>
10014ce4:	e0af      	b.n	10014e46 <__aeabi_dsub+0x1a6>
10014ce6:	2e00      	cmp	r6, #0
10014ce8:	dc00      	bgt.n	10014cec <__aeabi_dsub+0x4c>
10014cea:	e10d      	b.n	10014f08 <__aeabi_dsub+0x268>
10014cec:	2a00      	cmp	r2, #0
10014cee:	d13a      	bne.n	10014d66 <__aeabi_dsub+0xc6>
10014cf0:	0003      	movs	r3, r0
10014cf2:	430b      	orrs	r3, r1
10014cf4:	d000      	beq.n	10014cf8 <__aeabi_dsub+0x58>
10014cf6:	e0e4      	b.n	10014ec2 <__aeabi_dsub+0x222>
10014cf8:	076b      	lsls	r3, r5, #29
10014cfa:	d009      	beq.n	10014d10 <__aeabi_dsub+0x70>
10014cfc:	230f      	movs	r3, #15
10014cfe:	402b      	ands	r3, r5
10014d00:	2b04      	cmp	r3, #4
10014d02:	d005      	beq.n	10014d10 <__aeabi_dsub+0x70>
10014d04:	1d2b      	adds	r3, r5, #4
10014d06:	42ab      	cmp	r3, r5
10014d08:	41ad      	sbcs	r5, r5
10014d0a:	426d      	negs	r5, r5
10014d0c:	197f      	adds	r7, r7, r5
10014d0e:	001d      	movs	r5, r3
10014d10:	023b      	lsls	r3, r7, #8
10014d12:	d400      	bmi.n	10014d16 <__aeabi_dsub+0x76>
10014d14:	e088      	b.n	10014e28 <__aeabi_dsub+0x188>
10014d16:	4bbb      	ldr	r3, [pc, #748]	; (10015004 <__aeabi_dsub+0x364>)
10014d18:	3401      	adds	r4, #1
10014d1a:	429c      	cmp	r4, r3
10014d1c:	d100      	bne.n	10014d20 <__aeabi_dsub+0x80>
10014d1e:	e110      	b.n	10014f42 <__aeabi_dsub+0x2a2>
10014d20:	003a      	movs	r2, r7
10014d22:	4bb9      	ldr	r3, [pc, #740]	; (10015008 <__aeabi_dsub+0x368>)
10014d24:	4651      	mov	r1, sl
10014d26:	401a      	ands	r2, r3
10014d28:	2301      	movs	r3, #1
10014d2a:	0750      	lsls	r0, r2, #29
10014d2c:	08ed      	lsrs	r5, r5, #3
10014d2e:	0252      	lsls	r2, r2, #9
10014d30:	0564      	lsls	r4, r4, #21
10014d32:	4305      	orrs	r5, r0
10014d34:	0b12      	lsrs	r2, r2, #12
10014d36:	0d64      	lsrs	r4, r4, #21
10014d38:	400b      	ands	r3, r1
10014d3a:	2100      	movs	r1, #0
10014d3c:	0028      	movs	r0, r5
10014d3e:	0312      	lsls	r2, r2, #12
10014d40:	0d0d      	lsrs	r5, r1, #20
10014d42:	0b12      	lsrs	r2, r2, #12
10014d44:	0564      	lsls	r4, r4, #21
10014d46:	052d      	lsls	r5, r5, #20
10014d48:	4315      	orrs	r5, r2
10014d4a:	0862      	lsrs	r2, r4, #1
10014d4c:	4caf      	ldr	r4, [pc, #700]	; (1001500c <__aeabi_dsub+0x36c>)
10014d4e:	07db      	lsls	r3, r3, #31
10014d50:	402c      	ands	r4, r5
10014d52:	4314      	orrs	r4, r2
10014d54:	0064      	lsls	r4, r4, #1
10014d56:	0864      	lsrs	r4, r4, #1
10014d58:	431c      	orrs	r4, r3
10014d5a:	0021      	movs	r1, r4
10014d5c:	bc1c      	pop	{r2, r3, r4}
10014d5e:	4690      	mov	r8, r2
10014d60:	4699      	mov	r9, r3
10014d62:	46a2      	mov	sl, r4
10014d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
10014d66:	4ba7      	ldr	r3, [pc, #668]	; (10015004 <__aeabi_dsub+0x364>)
10014d68:	429c      	cmp	r4, r3
10014d6a:	d0c5      	beq.n	10014cf8 <__aeabi_dsub+0x58>
10014d6c:	2380      	movs	r3, #128	; 0x80
10014d6e:	041b      	lsls	r3, r3, #16
10014d70:	4318      	orrs	r0, r3
10014d72:	4663      	mov	r3, ip
10014d74:	2b38      	cmp	r3, #56	; 0x38
10014d76:	dd00      	ble.n	10014d7a <__aeabi_dsub+0xda>
10014d78:	e0fd      	b.n	10014f76 <__aeabi_dsub+0x2d6>
10014d7a:	2b1f      	cmp	r3, #31
10014d7c:	dd00      	ble.n	10014d80 <__aeabi_dsub+0xe0>
10014d7e:	e130      	b.n	10014fe2 <__aeabi_dsub+0x342>
10014d80:	4662      	mov	r2, ip
10014d82:	2320      	movs	r3, #32
10014d84:	1a9b      	subs	r3, r3, r2
10014d86:	0002      	movs	r2, r0
10014d88:	409a      	lsls	r2, r3
10014d8a:	4666      	mov	r6, ip
10014d8c:	4690      	mov	r8, r2
10014d8e:	000a      	movs	r2, r1
10014d90:	4099      	lsls	r1, r3
10014d92:	40f2      	lsrs	r2, r6
10014d94:	4646      	mov	r6, r8
10014d96:	1e4b      	subs	r3, r1, #1
10014d98:	4199      	sbcs	r1, r3
10014d9a:	4332      	orrs	r2, r6
10014d9c:	4311      	orrs	r1, r2
10014d9e:	4663      	mov	r3, ip
10014da0:	0002      	movs	r2, r0
10014da2:	40da      	lsrs	r2, r3
10014da4:	1a69      	subs	r1, r5, r1
10014da6:	428d      	cmp	r5, r1
10014da8:	419b      	sbcs	r3, r3
10014daa:	000d      	movs	r5, r1
10014dac:	1aba      	subs	r2, r7, r2
10014dae:	425b      	negs	r3, r3
10014db0:	1ad7      	subs	r7, r2, r3
10014db2:	023b      	lsls	r3, r7, #8
10014db4:	d535      	bpl.n	10014e22 <__aeabi_dsub+0x182>
10014db6:	027a      	lsls	r2, r7, #9
10014db8:	0a53      	lsrs	r3, r2, #9
10014dba:	4698      	mov	r8, r3
10014dbc:	4643      	mov	r3, r8
10014dbe:	2b00      	cmp	r3, #0
10014dc0:	d100      	bne.n	10014dc4 <__aeabi_dsub+0x124>
10014dc2:	e0c4      	b.n	10014f4e <__aeabi_dsub+0x2ae>
10014dc4:	4640      	mov	r0, r8
10014dc6:	f000 fc6f 	bl	100156a8 <__clzsi2>
10014dca:	0003      	movs	r3, r0
10014dcc:	3b08      	subs	r3, #8
10014dce:	2b1f      	cmp	r3, #31
10014dd0:	dd00      	ble.n	10014dd4 <__aeabi_dsub+0x134>
10014dd2:	e0c5      	b.n	10014f60 <__aeabi_dsub+0x2c0>
10014dd4:	2220      	movs	r2, #32
10014dd6:	0029      	movs	r1, r5
10014dd8:	1ad2      	subs	r2, r2, r3
10014dda:	4647      	mov	r7, r8
10014ddc:	40d1      	lsrs	r1, r2
10014dde:	409f      	lsls	r7, r3
10014de0:	000a      	movs	r2, r1
10014de2:	409d      	lsls	r5, r3
10014de4:	433a      	orrs	r2, r7
10014de6:	429c      	cmp	r4, r3
10014de8:	dd00      	ble.n	10014dec <__aeabi_dsub+0x14c>
10014dea:	e0c0      	b.n	10014f6e <__aeabi_dsub+0x2ce>
10014dec:	1b1c      	subs	r4, r3, r4
10014dee:	1c63      	adds	r3, r4, #1
10014df0:	2b1f      	cmp	r3, #31
10014df2:	dd00      	ble.n	10014df6 <__aeabi_dsub+0x156>
10014df4:	e0e4      	b.n	10014fc0 <__aeabi_dsub+0x320>
10014df6:	2120      	movs	r1, #32
10014df8:	0014      	movs	r4, r2
10014dfa:	0028      	movs	r0, r5
10014dfc:	1ac9      	subs	r1, r1, r3
10014dfe:	40d8      	lsrs	r0, r3
10014e00:	408c      	lsls	r4, r1
10014e02:	408d      	lsls	r5, r1
10014e04:	4304      	orrs	r4, r0
10014e06:	40da      	lsrs	r2, r3
10014e08:	1e68      	subs	r0, r5, #1
10014e0a:	4185      	sbcs	r5, r0
10014e0c:	0017      	movs	r7, r2
10014e0e:	4325      	orrs	r5, r4
10014e10:	2400      	movs	r4, #0
10014e12:	e771      	b.n	10014cf8 <__aeabi_dsub+0x58>
10014e14:	4642      	mov	r2, r8
10014e16:	4663      	mov	r3, ip
10014e18:	431a      	orrs	r2, r3
10014e1a:	d100      	bne.n	10014e1e <__aeabi_dsub+0x17e>
10014e1c:	e24c      	b.n	100152b8 <__aeabi_dsub+0x618>
10014e1e:	4667      	mov	r7, ip
10014e20:	4645      	mov	r5, r8
10014e22:	076b      	lsls	r3, r5, #29
10014e24:	d000      	beq.n	10014e28 <__aeabi_dsub+0x188>
10014e26:	e769      	b.n	10014cfc <__aeabi_dsub+0x5c>
10014e28:	2301      	movs	r3, #1
10014e2a:	4651      	mov	r1, sl
10014e2c:	0778      	lsls	r0, r7, #29
10014e2e:	08ed      	lsrs	r5, r5, #3
10014e30:	08fa      	lsrs	r2, r7, #3
10014e32:	400b      	ands	r3, r1
10014e34:	4305      	orrs	r5, r0
10014e36:	4973      	ldr	r1, [pc, #460]	; (10015004 <__aeabi_dsub+0x364>)
10014e38:	428c      	cmp	r4, r1
10014e3a:	d038      	beq.n	10014eae <__aeabi_dsub+0x20e>
10014e3c:	0312      	lsls	r2, r2, #12
10014e3e:	0564      	lsls	r4, r4, #21
10014e40:	0b12      	lsrs	r2, r2, #12
10014e42:	0d64      	lsrs	r4, r4, #21
10014e44:	e779      	b.n	10014d3a <__aeabi_dsub+0x9a>
10014e46:	2e00      	cmp	r6, #0
10014e48:	dc00      	bgt.n	10014e4c <__aeabi_dsub+0x1ac>
10014e4a:	e09a      	b.n	10014f82 <__aeabi_dsub+0x2e2>
10014e4c:	2a00      	cmp	r2, #0
10014e4e:	d047      	beq.n	10014ee0 <__aeabi_dsub+0x240>
10014e50:	4a6c      	ldr	r2, [pc, #432]	; (10015004 <__aeabi_dsub+0x364>)
10014e52:	4294      	cmp	r4, r2
10014e54:	d100      	bne.n	10014e58 <__aeabi_dsub+0x1b8>
10014e56:	e74f      	b.n	10014cf8 <__aeabi_dsub+0x58>
10014e58:	2280      	movs	r2, #128	; 0x80
10014e5a:	0412      	lsls	r2, r2, #16
10014e5c:	4310      	orrs	r0, r2
10014e5e:	4662      	mov	r2, ip
10014e60:	2a38      	cmp	r2, #56	; 0x38
10014e62:	dc00      	bgt.n	10014e66 <__aeabi_dsub+0x1c6>
10014e64:	e108      	b.n	10015078 <__aeabi_dsub+0x3d8>
10014e66:	4301      	orrs	r1, r0
10014e68:	1e48      	subs	r0, r1, #1
10014e6a:	4181      	sbcs	r1, r0
10014e6c:	2200      	movs	r2, #0
10014e6e:	b2c9      	uxtb	r1, r1
10014e70:	1949      	adds	r1, r1, r5
10014e72:	19d2      	adds	r2, r2, r7
10014e74:	42a9      	cmp	r1, r5
10014e76:	41bf      	sbcs	r7, r7
10014e78:	000d      	movs	r5, r1
10014e7a:	427f      	negs	r7, r7
10014e7c:	18bf      	adds	r7, r7, r2
10014e7e:	023a      	lsls	r2, r7, #8
10014e80:	d400      	bmi.n	10014e84 <__aeabi_dsub+0x1e4>
10014e82:	e142      	b.n	1001510a <__aeabi_dsub+0x46a>
10014e84:	4a5f      	ldr	r2, [pc, #380]	; (10015004 <__aeabi_dsub+0x364>)
10014e86:	3401      	adds	r4, #1
10014e88:	4294      	cmp	r4, r2
10014e8a:	d100      	bne.n	10014e8e <__aeabi_dsub+0x1ee>
10014e8c:	e14e      	b.n	1001512c <__aeabi_dsub+0x48c>
10014e8e:	2001      	movs	r0, #1
10014e90:	4a5d      	ldr	r2, [pc, #372]	; (10015008 <__aeabi_dsub+0x368>)
10014e92:	0869      	lsrs	r1, r5, #1
10014e94:	403a      	ands	r2, r7
10014e96:	4028      	ands	r0, r5
10014e98:	4308      	orrs	r0, r1
10014e9a:	07d5      	lsls	r5, r2, #31
10014e9c:	4305      	orrs	r5, r0
10014e9e:	0857      	lsrs	r7, r2, #1
10014ea0:	469a      	mov	sl, r3
10014ea2:	e729      	b.n	10014cf8 <__aeabi_dsub+0x58>
10014ea4:	0006      	movs	r6, r0
10014ea6:	430e      	orrs	r6, r1
10014ea8:	d000      	beq.n	10014eac <__aeabi_dsub+0x20c>
10014eaa:	e717      	b.n	10014cdc <__aeabi_dsub+0x3c>
10014eac:	e714      	b.n	10014cd8 <__aeabi_dsub+0x38>
10014eae:	0029      	movs	r1, r5
10014eb0:	4311      	orrs	r1, r2
10014eb2:	d100      	bne.n	10014eb6 <__aeabi_dsub+0x216>
10014eb4:	e1f9      	b.n	100152aa <__aeabi_dsub+0x60a>
10014eb6:	2180      	movs	r1, #128	; 0x80
10014eb8:	0309      	lsls	r1, r1, #12
10014eba:	430a      	orrs	r2, r1
10014ebc:	0312      	lsls	r2, r2, #12
10014ebe:	0b12      	lsrs	r2, r2, #12
10014ec0:	e73b      	b.n	10014d3a <__aeabi_dsub+0x9a>
10014ec2:	2301      	movs	r3, #1
10014ec4:	425b      	negs	r3, r3
10014ec6:	4698      	mov	r8, r3
10014ec8:	44c4      	add	ip, r8
10014eca:	4663      	mov	r3, ip
10014ecc:	2b00      	cmp	r3, #0
10014ece:	d172      	bne.n	10014fb6 <__aeabi_dsub+0x316>
10014ed0:	1a69      	subs	r1, r5, r1
10014ed2:	428d      	cmp	r5, r1
10014ed4:	419b      	sbcs	r3, r3
10014ed6:	1a3f      	subs	r7, r7, r0
10014ed8:	425b      	negs	r3, r3
10014eda:	1aff      	subs	r7, r7, r3
10014edc:	000d      	movs	r5, r1
10014ede:	e768      	b.n	10014db2 <__aeabi_dsub+0x112>
10014ee0:	0002      	movs	r2, r0
10014ee2:	430a      	orrs	r2, r1
10014ee4:	d100      	bne.n	10014ee8 <__aeabi_dsub+0x248>
10014ee6:	e707      	b.n	10014cf8 <__aeabi_dsub+0x58>
10014ee8:	2201      	movs	r2, #1
10014eea:	4252      	negs	r2, r2
10014eec:	4690      	mov	r8, r2
10014eee:	44c4      	add	ip, r8
10014ef0:	4662      	mov	r2, ip
10014ef2:	2a00      	cmp	r2, #0
10014ef4:	d000      	beq.n	10014ef8 <__aeabi_dsub+0x258>
10014ef6:	e0e6      	b.n	100150c6 <__aeabi_dsub+0x426>
10014ef8:	1869      	adds	r1, r5, r1
10014efa:	42a9      	cmp	r1, r5
10014efc:	41b6      	sbcs	r6, r6
10014efe:	183f      	adds	r7, r7, r0
10014f00:	4276      	negs	r6, r6
10014f02:	19f7      	adds	r7, r6, r7
10014f04:	000d      	movs	r5, r1
10014f06:	e7ba      	b.n	10014e7e <__aeabi_dsub+0x1de>
10014f08:	2e00      	cmp	r6, #0
10014f0a:	d000      	beq.n	10014f0e <__aeabi_dsub+0x26e>
10014f0c:	e080      	b.n	10015010 <__aeabi_dsub+0x370>
10014f0e:	1c62      	adds	r2, r4, #1
10014f10:	0552      	lsls	r2, r2, #21
10014f12:	0d52      	lsrs	r2, r2, #21
10014f14:	2a01      	cmp	r2, #1
10014f16:	dc00      	bgt.n	10014f1a <__aeabi_dsub+0x27a>
10014f18:	e0f9      	b.n	1001510e <__aeabi_dsub+0x46e>
10014f1a:	1a6a      	subs	r2, r5, r1
10014f1c:	4691      	mov	r9, r2
10014f1e:	454d      	cmp	r5, r9
10014f20:	41b6      	sbcs	r6, r6
10014f22:	1a3a      	subs	r2, r7, r0
10014f24:	4276      	negs	r6, r6
10014f26:	1b92      	subs	r2, r2, r6
10014f28:	4690      	mov	r8, r2
10014f2a:	0212      	lsls	r2, r2, #8
10014f2c:	d400      	bmi.n	10014f30 <__aeabi_dsub+0x290>
10014f2e:	e099      	b.n	10015064 <__aeabi_dsub+0x3c4>
10014f30:	1b4d      	subs	r5, r1, r5
10014f32:	42a9      	cmp	r1, r5
10014f34:	4189      	sbcs	r1, r1
10014f36:	1bc7      	subs	r7, r0, r7
10014f38:	4249      	negs	r1, r1
10014f3a:	1a7a      	subs	r2, r7, r1
10014f3c:	4690      	mov	r8, r2
10014f3e:	469a      	mov	sl, r3
10014f40:	e73c      	b.n	10014dbc <__aeabi_dsub+0x11c>
10014f42:	4652      	mov	r2, sl
10014f44:	2301      	movs	r3, #1
10014f46:	2500      	movs	r5, #0
10014f48:	4013      	ands	r3, r2
10014f4a:	2200      	movs	r2, #0
10014f4c:	e6f5      	b.n	10014d3a <__aeabi_dsub+0x9a>
10014f4e:	0028      	movs	r0, r5
10014f50:	f000 fbaa 	bl	100156a8 <__clzsi2>
10014f54:	3020      	adds	r0, #32
10014f56:	0003      	movs	r3, r0
10014f58:	3b08      	subs	r3, #8
10014f5a:	2b1f      	cmp	r3, #31
10014f5c:	dc00      	bgt.n	10014f60 <__aeabi_dsub+0x2c0>
10014f5e:	e739      	b.n	10014dd4 <__aeabi_dsub+0x134>
10014f60:	002a      	movs	r2, r5
10014f62:	3828      	subs	r0, #40	; 0x28
10014f64:	4082      	lsls	r2, r0
10014f66:	2500      	movs	r5, #0
10014f68:	429c      	cmp	r4, r3
10014f6a:	dc00      	bgt.n	10014f6e <__aeabi_dsub+0x2ce>
10014f6c:	e73e      	b.n	10014dec <__aeabi_dsub+0x14c>
10014f6e:	4f26      	ldr	r7, [pc, #152]	; (10015008 <__aeabi_dsub+0x368>)
10014f70:	1ae4      	subs	r4, r4, r3
10014f72:	4017      	ands	r7, r2
10014f74:	e6c0      	b.n	10014cf8 <__aeabi_dsub+0x58>
10014f76:	4301      	orrs	r1, r0
10014f78:	1e48      	subs	r0, r1, #1
10014f7a:	4181      	sbcs	r1, r0
10014f7c:	2200      	movs	r2, #0
10014f7e:	b2c9      	uxtb	r1, r1
10014f80:	e710      	b.n	10014da4 <__aeabi_dsub+0x104>
10014f82:	2e00      	cmp	r6, #0
10014f84:	d000      	beq.n	10014f88 <__aeabi_dsub+0x2e8>
10014f86:	e0f1      	b.n	1001516c <__aeabi_dsub+0x4cc>
10014f88:	1c62      	adds	r2, r4, #1
10014f8a:	4694      	mov	ip, r2
10014f8c:	0552      	lsls	r2, r2, #21
10014f8e:	0d52      	lsrs	r2, r2, #21
10014f90:	2a01      	cmp	r2, #1
10014f92:	dc00      	bgt.n	10014f96 <__aeabi_dsub+0x2f6>
10014f94:	e0a0      	b.n	100150d8 <__aeabi_dsub+0x438>
10014f96:	4a1b      	ldr	r2, [pc, #108]	; (10015004 <__aeabi_dsub+0x364>)
10014f98:	4594      	cmp	ip, r2
10014f9a:	d100      	bne.n	10014f9e <__aeabi_dsub+0x2fe>
10014f9c:	e0c5      	b.n	1001512a <__aeabi_dsub+0x48a>
10014f9e:	1869      	adds	r1, r5, r1
10014fa0:	42a9      	cmp	r1, r5
10014fa2:	4192      	sbcs	r2, r2
10014fa4:	183f      	adds	r7, r7, r0
10014fa6:	4252      	negs	r2, r2
10014fa8:	19d2      	adds	r2, r2, r7
10014faa:	0849      	lsrs	r1, r1, #1
10014fac:	07d5      	lsls	r5, r2, #31
10014fae:	430d      	orrs	r5, r1
10014fb0:	0857      	lsrs	r7, r2, #1
10014fb2:	4664      	mov	r4, ip
10014fb4:	e6a0      	b.n	10014cf8 <__aeabi_dsub+0x58>
10014fb6:	4b13      	ldr	r3, [pc, #76]	; (10015004 <__aeabi_dsub+0x364>)
10014fb8:	429c      	cmp	r4, r3
10014fba:	d000      	beq.n	10014fbe <__aeabi_dsub+0x31e>
10014fbc:	e6d9      	b.n	10014d72 <__aeabi_dsub+0xd2>
10014fbe:	e69b      	b.n	10014cf8 <__aeabi_dsub+0x58>
10014fc0:	0011      	movs	r1, r2
10014fc2:	3c1f      	subs	r4, #31
10014fc4:	40e1      	lsrs	r1, r4
10014fc6:	000c      	movs	r4, r1
10014fc8:	2b20      	cmp	r3, #32
10014fca:	d100      	bne.n	10014fce <__aeabi_dsub+0x32e>
10014fcc:	e080      	b.n	100150d0 <__aeabi_dsub+0x430>
10014fce:	2140      	movs	r1, #64	; 0x40
10014fd0:	1acb      	subs	r3, r1, r3
10014fd2:	409a      	lsls	r2, r3
10014fd4:	4315      	orrs	r5, r2
10014fd6:	1e6a      	subs	r2, r5, #1
10014fd8:	4195      	sbcs	r5, r2
10014fda:	2700      	movs	r7, #0
10014fdc:	4325      	orrs	r5, r4
10014fde:	2400      	movs	r4, #0
10014fe0:	e71f      	b.n	10014e22 <__aeabi_dsub+0x182>
10014fe2:	4663      	mov	r3, ip
10014fe4:	0002      	movs	r2, r0
10014fe6:	3b20      	subs	r3, #32
10014fe8:	40da      	lsrs	r2, r3
10014fea:	4663      	mov	r3, ip
10014fec:	2b20      	cmp	r3, #32
10014fee:	d071      	beq.n	100150d4 <__aeabi_dsub+0x434>
10014ff0:	2340      	movs	r3, #64	; 0x40
10014ff2:	4666      	mov	r6, ip
10014ff4:	1b9b      	subs	r3, r3, r6
10014ff6:	4098      	lsls	r0, r3
10014ff8:	4301      	orrs	r1, r0
10014ffa:	1e48      	subs	r0, r1, #1
10014ffc:	4181      	sbcs	r1, r0
10014ffe:	4311      	orrs	r1, r2
10015000:	2200      	movs	r2, #0
10015002:	e6cf      	b.n	10014da4 <__aeabi_dsub+0x104>
10015004:	000007ff 	.word	0x000007ff
10015008:	ff7fffff 	.word	0xff7fffff
1001500c:	800fffff 	.word	0x800fffff
10015010:	2c00      	cmp	r4, #0
10015012:	d048      	beq.n	100150a6 <__aeabi_dsub+0x406>
10015014:	4cca      	ldr	r4, [pc, #808]	; (10015340 <__aeabi_dsub+0x6a0>)
10015016:	42a2      	cmp	r2, r4
10015018:	d100      	bne.n	1001501c <__aeabi_dsub+0x37c>
1001501a:	e0a2      	b.n	10015162 <__aeabi_dsub+0x4c2>
1001501c:	4274      	negs	r4, r6
1001501e:	46a1      	mov	r9, r4
10015020:	2480      	movs	r4, #128	; 0x80
10015022:	0424      	lsls	r4, r4, #16
10015024:	4327      	orrs	r7, r4
10015026:	464c      	mov	r4, r9
10015028:	2c38      	cmp	r4, #56	; 0x38
1001502a:	dd00      	ble.n	1001502e <__aeabi_dsub+0x38e>
1001502c:	e0db      	b.n	100151e6 <__aeabi_dsub+0x546>
1001502e:	2c1f      	cmp	r4, #31
10015030:	dd00      	ble.n	10015034 <__aeabi_dsub+0x394>
10015032:	e144      	b.n	100152be <__aeabi_dsub+0x61e>
10015034:	464e      	mov	r6, r9
10015036:	2420      	movs	r4, #32
10015038:	1ba4      	subs	r4, r4, r6
1001503a:	003e      	movs	r6, r7
1001503c:	40a6      	lsls	r6, r4
1001503e:	46a2      	mov	sl, r4
10015040:	46b0      	mov	r8, r6
10015042:	464c      	mov	r4, r9
10015044:	002e      	movs	r6, r5
10015046:	40e6      	lsrs	r6, r4
10015048:	46b4      	mov	ip, r6
1001504a:	4646      	mov	r6, r8
1001504c:	4664      	mov	r4, ip
1001504e:	4326      	orrs	r6, r4
10015050:	4654      	mov	r4, sl
10015052:	40a5      	lsls	r5, r4
10015054:	1e6c      	subs	r4, r5, #1
10015056:	41a5      	sbcs	r5, r4
10015058:	0034      	movs	r4, r6
1001505a:	432c      	orrs	r4, r5
1001505c:	464d      	mov	r5, r9
1001505e:	40ef      	lsrs	r7, r5
10015060:	1b0d      	subs	r5, r1, r4
10015062:	e028      	b.n	100150b6 <__aeabi_dsub+0x416>
10015064:	464a      	mov	r2, r9
10015066:	4643      	mov	r3, r8
10015068:	464d      	mov	r5, r9
1001506a:	431a      	orrs	r2, r3
1001506c:	d000      	beq.n	10015070 <__aeabi_dsub+0x3d0>
1001506e:	e6a5      	b.n	10014dbc <__aeabi_dsub+0x11c>
10015070:	2300      	movs	r3, #0
10015072:	2400      	movs	r4, #0
10015074:	2500      	movs	r5, #0
10015076:	e6de      	b.n	10014e36 <__aeabi_dsub+0x196>
10015078:	2a1f      	cmp	r2, #31
1001507a:	dc5a      	bgt.n	10015132 <__aeabi_dsub+0x492>
1001507c:	4666      	mov	r6, ip
1001507e:	2220      	movs	r2, #32
10015080:	1b92      	subs	r2, r2, r6
10015082:	0006      	movs	r6, r0
10015084:	4096      	lsls	r6, r2
10015086:	4691      	mov	r9, r2
10015088:	46b0      	mov	r8, r6
1001508a:	4662      	mov	r2, ip
1001508c:	000e      	movs	r6, r1
1001508e:	40d6      	lsrs	r6, r2
10015090:	4642      	mov	r2, r8
10015092:	4316      	orrs	r6, r2
10015094:	464a      	mov	r2, r9
10015096:	4091      	lsls	r1, r2
10015098:	1e4a      	subs	r2, r1, #1
1001509a:	4191      	sbcs	r1, r2
1001509c:	0002      	movs	r2, r0
1001509e:	4660      	mov	r0, ip
100150a0:	4331      	orrs	r1, r6
100150a2:	40c2      	lsrs	r2, r0
100150a4:	e6e4      	b.n	10014e70 <__aeabi_dsub+0x1d0>
100150a6:	003c      	movs	r4, r7
100150a8:	432c      	orrs	r4, r5
100150aa:	d05a      	beq.n	10015162 <__aeabi_dsub+0x4c2>
100150ac:	43f4      	mvns	r4, r6
100150ae:	46a1      	mov	r9, r4
100150b0:	2c00      	cmp	r4, #0
100150b2:	d152      	bne.n	1001515a <__aeabi_dsub+0x4ba>
100150b4:	1b4d      	subs	r5, r1, r5
100150b6:	42a9      	cmp	r1, r5
100150b8:	4189      	sbcs	r1, r1
100150ba:	1bc7      	subs	r7, r0, r7
100150bc:	4249      	negs	r1, r1
100150be:	1a7f      	subs	r7, r7, r1
100150c0:	0014      	movs	r4, r2
100150c2:	469a      	mov	sl, r3
100150c4:	e675      	b.n	10014db2 <__aeabi_dsub+0x112>
100150c6:	4a9e      	ldr	r2, [pc, #632]	; (10015340 <__aeabi_dsub+0x6a0>)
100150c8:	4294      	cmp	r4, r2
100150ca:	d000      	beq.n	100150ce <__aeabi_dsub+0x42e>
100150cc:	e6c7      	b.n	10014e5e <__aeabi_dsub+0x1be>
100150ce:	e613      	b.n	10014cf8 <__aeabi_dsub+0x58>
100150d0:	2200      	movs	r2, #0
100150d2:	e77f      	b.n	10014fd4 <__aeabi_dsub+0x334>
100150d4:	2000      	movs	r0, #0
100150d6:	e78f      	b.n	10014ff8 <__aeabi_dsub+0x358>
100150d8:	2c00      	cmp	r4, #0
100150da:	d000      	beq.n	100150de <__aeabi_dsub+0x43e>
100150dc:	e0c8      	b.n	10015270 <__aeabi_dsub+0x5d0>
100150de:	003b      	movs	r3, r7
100150e0:	432b      	orrs	r3, r5
100150e2:	d100      	bne.n	100150e6 <__aeabi_dsub+0x446>
100150e4:	e10f      	b.n	10015306 <__aeabi_dsub+0x666>
100150e6:	0003      	movs	r3, r0
100150e8:	430b      	orrs	r3, r1
100150ea:	d100      	bne.n	100150ee <__aeabi_dsub+0x44e>
100150ec:	e604      	b.n	10014cf8 <__aeabi_dsub+0x58>
100150ee:	1869      	adds	r1, r5, r1
100150f0:	42a9      	cmp	r1, r5
100150f2:	419b      	sbcs	r3, r3
100150f4:	183f      	adds	r7, r7, r0
100150f6:	425b      	negs	r3, r3
100150f8:	19df      	adds	r7, r3, r7
100150fa:	023b      	lsls	r3, r7, #8
100150fc:	d400      	bmi.n	10015100 <__aeabi_dsub+0x460>
100150fe:	e11a      	b.n	10015336 <__aeabi_dsub+0x696>
10015100:	4b90      	ldr	r3, [pc, #576]	; (10015344 <__aeabi_dsub+0x6a4>)
10015102:	000d      	movs	r5, r1
10015104:	401f      	ands	r7, r3
10015106:	4664      	mov	r4, ip
10015108:	e5f6      	b.n	10014cf8 <__aeabi_dsub+0x58>
1001510a:	469a      	mov	sl, r3
1001510c:	e689      	b.n	10014e22 <__aeabi_dsub+0x182>
1001510e:	003a      	movs	r2, r7
10015110:	432a      	orrs	r2, r5
10015112:	2c00      	cmp	r4, #0
10015114:	d15c      	bne.n	100151d0 <__aeabi_dsub+0x530>
10015116:	2a00      	cmp	r2, #0
10015118:	d175      	bne.n	10015206 <__aeabi_dsub+0x566>
1001511a:	0002      	movs	r2, r0
1001511c:	430a      	orrs	r2, r1
1001511e:	d100      	bne.n	10015122 <__aeabi_dsub+0x482>
10015120:	e0ca      	b.n	100152b8 <__aeabi_dsub+0x618>
10015122:	0007      	movs	r7, r0
10015124:	000d      	movs	r5, r1
10015126:	469a      	mov	sl, r3
10015128:	e5e6      	b.n	10014cf8 <__aeabi_dsub+0x58>
1001512a:	4664      	mov	r4, ip
1001512c:	2200      	movs	r2, #0
1001512e:	2500      	movs	r5, #0
10015130:	e681      	b.n	10014e36 <__aeabi_dsub+0x196>
10015132:	4662      	mov	r2, ip
10015134:	0006      	movs	r6, r0
10015136:	3a20      	subs	r2, #32
10015138:	40d6      	lsrs	r6, r2
1001513a:	4662      	mov	r2, ip
1001513c:	46b0      	mov	r8, r6
1001513e:	2a20      	cmp	r2, #32
10015140:	d100      	bne.n	10015144 <__aeabi_dsub+0x4a4>
10015142:	e0b7      	b.n	100152b4 <__aeabi_dsub+0x614>
10015144:	2240      	movs	r2, #64	; 0x40
10015146:	4666      	mov	r6, ip
10015148:	1b92      	subs	r2, r2, r6
1001514a:	4090      	lsls	r0, r2
1001514c:	4301      	orrs	r1, r0
1001514e:	4642      	mov	r2, r8
10015150:	1e48      	subs	r0, r1, #1
10015152:	4181      	sbcs	r1, r0
10015154:	4311      	orrs	r1, r2
10015156:	2200      	movs	r2, #0
10015158:	e68a      	b.n	10014e70 <__aeabi_dsub+0x1d0>
1001515a:	4c79      	ldr	r4, [pc, #484]	; (10015340 <__aeabi_dsub+0x6a0>)
1001515c:	42a2      	cmp	r2, r4
1001515e:	d000      	beq.n	10015162 <__aeabi_dsub+0x4c2>
10015160:	e761      	b.n	10015026 <__aeabi_dsub+0x386>
10015162:	0007      	movs	r7, r0
10015164:	000d      	movs	r5, r1
10015166:	0014      	movs	r4, r2
10015168:	469a      	mov	sl, r3
1001516a:	e5c5      	b.n	10014cf8 <__aeabi_dsub+0x58>
1001516c:	2c00      	cmp	r4, #0
1001516e:	d141      	bne.n	100151f4 <__aeabi_dsub+0x554>
10015170:	003c      	movs	r4, r7
10015172:	432c      	orrs	r4, r5
10015174:	d078      	beq.n	10015268 <__aeabi_dsub+0x5c8>
10015176:	43f4      	mvns	r4, r6
10015178:	46a1      	mov	r9, r4
1001517a:	2c00      	cmp	r4, #0
1001517c:	d020      	beq.n	100151c0 <__aeabi_dsub+0x520>
1001517e:	4c70      	ldr	r4, [pc, #448]	; (10015340 <__aeabi_dsub+0x6a0>)
10015180:	42a2      	cmp	r2, r4
10015182:	d071      	beq.n	10015268 <__aeabi_dsub+0x5c8>
10015184:	464c      	mov	r4, r9
10015186:	2c38      	cmp	r4, #56	; 0x38
10015188:	dd00      	ble.n	1001518c <__aeabi_dsub+0x4ec>
1001518a:	e0b2      	b.n	100152f2 <__aeabi_dsub+0x652>
1001518c:	2c1f      	cmp	r4, #31
1001518e:	dd00      	ble.n	10015192 <__aeabi_dsub+0x4f2>
10015190:	e0bc      	b.n	1001530c <__aeabi_dsub+0x66c>
10015192:	2620      	movs	r6, #32
10015194:	1b34      	subs	r4, r6, r4
10015196:	46a2      	mov	sl, r4
10015198:	003c      	movs	r4, r7
1001519a:	4656      	mov	r6, sl
1001519c:	40b4      	lsls	r4, r6
1001519e:	464e      	mov	r6, r9
100151a0:	46a0      	mov	r8, r4
100151a2:	002c      	movs	r4, r5
100151a4:	40f4      	lsrs	r4, r6
100151a6:	46a4      	mov	ip, r4
100151a8:	4644      	mov	r4, r8
100151aa:	4666      	mov	r6, ip
100151ac:	4334      	orrs	r4, r6
100151ae:	46a4      	mov	ip, r4
100151b0:	4654      	mov	r4, sl
100151b2:	40a5      	lsls	r5, r4
100151b4:	4664      	mov	r4, ip
100151b6:	1e6e      	subs	r6, r5, #1
100151b8:	41b5      	sbcs	r5, r6
100151ba:	4325      	orrs	r5, r4
100151bc:	464c      	mov	r4, r9
100151be:	40e7      	lsrs	r7, r4
100151c0:	186d      	adds	r5, r5, r1
100151c2:	428d      	cmp	r5, r1
100151c4:	4189      	sbcs	r1, r1
100151c6:	183f      	adds	r7, r7, r0
100151c8:	4249      	negs	r1, r1
100151ca:	19cf      	adds	r7, r1, r7
100151cc:	0014      	movs	r4, r2
100151ce:	e656      	b.n	10014e7e <__aeabi_dsub+0x1de>
100151d0:	2a00      	cmp	r2, #0
100151d2:	d12f      	bne.n	10015234 <__aeabi_dsub+0x594>
100151d4:	0002      	movs	r2, r0
100151d6:	430a      	orrs	r2, r1
100151d8:	d100      	bne.n	100151dc <__aeabi_dsub+0x53c>
100151da:	e084      	b.n	100152e6 <__aeabi_dsub+0x646>
100151dc:	0007      	movs	r7, r0
100151de:	000d      	movs	r5, r1
100151e0:	469a      	mov	sl, r3
100151e2:	4c57      	ldr	r4, [pc, #348]	; (10015340 <__aeabi_dsub+0x6a0>)
100151e4:	e588      	b.n	10014cf8 <__aeabi_dsub+0x58>
100151e6:	433d      	orrs	r5, r7
100151e8:	1e6f      	subs	r7, r5, #1
100151ea:	41bd      	sbcs	r5, r7
100151ec:	b2ec      	uxtb	r4, r5
100151ee:	2700      	movs	r7, #0
100151f0:	1b0d      	subs	r5, r1, r4
100151f2:	e760      	b.n	100150b6 <__aeabi_dsub+0x416>
100151f4:	4c52      	ldr	r4, [pc, #328]	; (10015340 <__aeabi_dsub+0x6a0>)
100151f6:	42a2      	cmp	r2, r4
100151f8:	d036      	beq.n	10015268 <__aeabi_dsub+0x5c8>
100151fa:	4274      	negs	r4, r6
100151fc:	2680      	movs	r6, #128	; 0x80
100151fe:	0436      	lsls	r6, r6, #16
10015200:	46a1      	mov	r9, r4
10015202:	4337      	orrs	r7, r6
10015204:	e7be      	b.n	10015184 <__aeabi_dsub+0x4e4>
10015206:	0002      	movs	r2, r0
10015208:	430a      	orrs	r2, r1
1001520a:	d100      	bne.n	1001520e <__aeabi_dsub+0x56e>
1001520c:	e574      	b.n	10014cf8 <__aeabi_dsub+0x58>
1001520e:	1a6a      	subs	r2, r5, r1
10015210:	4690      	mov	r8, r2
10015212:	4545      	cmp	r5, r8
10015214:	41b6      	sbcs	r6, r6
10015216:	1a3a      	subs	r2, r7, r0
10015218:	4276      	negs	r6, r6
1001521a:	1b92      	subs	r2, r2, r6
1001521c:	4694      	mov	ip, r2
1001521e:	0212      	lsls	r2, r2, #8
10015220:	d400      	bmi.n	10015224 <__aeabi_dsub+0x584>
10015222:	e5f7      	b.n	10014e14 <__aeabi_dsub+0x174>
10015224:	1b4d      	subs	r5, r1, r5
10015226:	42a9      	cmp	r1, r5
10015228:	4189      	sbcs	r1, r1
1001522a:	1bc7      	subs	r7, r0, r7
1001522c:	4249      	negs	r1, r1
1001522e:	1a7f      	subs	r7, r7, r1
10015230:	469a      	mov	sl, r3
10015232:	e561      	b.n	10014cf8 <__aeabi_dsub+0x58>
10015234:	0002      	movs	r2, r0
10015236:	430a      	orrs	r2, r1
10015238:	d03a      	beq.n	100152b0 <__aeabi_dsub+0x610>
1001523a:	08ed      	lsrs	r5, r5, #3
1001523c:	077c      	lsls	r4, r7, #29
1001523e:	432c      	orrs	r4, r5
10015240:	2580      	movs	r5, #128	; 0x80
10015242:	08fa      	lsrs	r2, r7, #3
10015244:	032d      	lsls	r5, r5, #12
10015246:	422a      	tst	r2, r5
10015248:	d008      	beq.n	1001525c <__aeabi_dsub+0x5bc>
1001524a:	08c7      	lsrs	r7, r0, #3
1001524c:	422f      	tst	r7, r5
1001524e:	d105      	bne.n	1001525c <__aeabi_dsub+0x5bc>
10015250:	0745      	lsls	r5, r0, #29
10015252:	002c      	movs	r4, r5
10015254:	003a      	movs	r2, r7
10015256:	469a      	mov	sl, r3
10015258:	08c9      	lsrs	r1, r1, #3
1001525a:	430c      	orrs	r4, r1
1001525c:	0f67      	lsrs	r7, r4, #29
1001525e:	00d2      	lsls	r2, r2, #3
10015260:	00e5      	lsls	r5, r4, #3
10015262:	4317      	orrs	r7, r2
10015264:	4c36      	ldr	r4, [pc, #216]	; (10015340 <__aeabi_dsub+0x6a0>)
10015266:	e547      	b.n	10014cf8 <__aeabi_dsub+0x58>
10015268:	0007      	movs	r7, r0
1001526a:	000d      	movs	r5, r1
1001526c:	0014      	movs	r4, r2
1001526e:	e543      	b.n	10014cf8 <__aeabi_dsub+0x58>
10015270:	003a      	movs	r2, r7
10015272:	432a      	orrs	r2, r5
10015274:	d043      	beq.n	100152fe <__aeabi_dsub+0x65e>
10015276:	0002      	movs	r2, r0
10015278:	430a      	orrs	r2, r1
1001527a:	d019      	beq.n	100152b0 <__aeabi_dsub+0x610>
1001527c:	08ed      	lsrs	r5, r5, #3
1001527e:	077c      	lsls	r4, r7, #29
10015280:	432c      	orrs	r4, r5
10015282:	2580      	movs	r5, #128	; 0x80
10015284:	08fa      	lsrs	r2, r7, #3
10015286:	032d      	lsls	r5, r5, #12
10015288:	422a      	tst	r2, r5
1001528a:	d007      	beq.n	1001529c <__aeabi_dsub+0x5fc>
1001528c:	08c6      	lsrs	r6, r0, #3
1001528e:	422e      	tst	r6, r5
10015290:	d104      	bne.n	1001529c <__aeabi_dsub+0x5fc>
10015292:	0747      	lsls	r7, r0, #29
10015294:	003c      	movs	r4, r7
10015296:	0032      	movs	r2, r6
10015298:	08c9      	lsrs	r1, r1, #3
1001529a:	430c      	orrs	r4, r1
1001529c:	00d7      	lsls	r7, r2, #3
1001529e:	0f62      	lsrs	r2, r4, #29
100152a0:	00e5      	lsls	r5, r4, #3
100152a2:	4317      	orrs	r7, r2
100152a4:	469a      	mov	sl, r3
100152a6:	4c26      	ldr	r4, [pc, #152]	; (10015340 <__aeabi_dsub+0x6a0>)
100152a8:	e526      	b.n	10014cf8 <__aeabi_dsub+0x58>
100152aa:	2200      	movs	r2, #0
100152ac:	2500      	movs	r5, #0
100152ae:	e544      	b.n	10014d3a <__aeabi_dsub+0x9a>
100152b0:	4c23      	ldr	r4, [pc, #140]	; (10015340 <__aeabi_dsub+0x6a0>)
100152b2:	e521      	b.n	10014cf8 <__aeabi_dsub+0x58>
100152b4:	2000      	movs	r0, #0
100152b6:	e749      	b.n	1001514c <__aeabi_dsub+0x4ac>
100152b8:	2300      	movs	r3, #0
100152ba:	2500      	movs	r5, #0
100152bc:	e5bb      	b.n	10014e36 <__aeabi_dsub+0x196>
100152be:	464c      	mov	r4, r9
100152c0:	003e      	movs	r6, r7
100152c2:	3c20      	subs	r4, #32
100152c4:	40e6      	lsrs	r6, r4
100152c6:	464c      	mov	r4, r9
100152c8:	46b4      	mov	ip, r6
100152ca:	2c20      	cmp	r4, #32
100152cc:	d031      	beq.n	10015332 <__aeabi_dsub+0x692>
100152ce:	2440      	movs	r4, #64	; 0x40
100152d0:	464e      	mov	r6, r9
100152d2:	1ba6      	subs	r6, r4, r6
100152d4:	40b7      	lsls	r7, r6
100152d6:	433d      	orrs	r5, r7
100152d8:	1e6c      	subs	r4, r5, #1
100152da:	41a5      	sbcs	r5, r4
100152dc:	4664      	mov	r4, ip
100152de:	432c      	orrs	r4, r5
100152e0:	2700      	movs	r7, #0
100152e2:	1b0d      	subs	r5, r1, r4
100152e4:	e6e7      	b.n	100150b6 <__aeabi_dsub+0x416>
100152e6:	2280      	movs	r2, #128	; 0x80
100152e8:	2300      	movs	r3, #0
100152ea:	0312      	lsls	r2, r2, #12
100152ec:	4c14      	ldr	r4, [pc, #80]	; (10015340 <__aeabi_dsub+0x6a0>)
100152ee:	2500      	movs	r5, #0
100152f0:	e5a1      	b.n	10014e36 <__aeabi_dsub+0x196>
100152f2:	433d      	orrs	r5, r7
100152f4:	1e6f      	subs	r7, r5, #1
100152f6:	41bd      	sbcs	r5, r7
100152f8:	2700      	movs	r7, #0
100152fa:	b2ed      	uxtb	r5, r5
100152fc:	e760      	b.n	100151c0 <__aeabi_dsub+0x520>
100152fe:	0007      	movs	r7, r0
10015300:	000d      	movs	r5, r1
10015302:	4c0f      	ldr	r4, [pc, #60]	; (10015340 <__aeabi_dsub+0x6a0>)
10015304:	e4f8      	b.n	10014cf8 <__aeabi_dsub+0x58>
10015306:	0007      	movs	r7, r0
10015308:	000d      	movs	r5, r1
1001530a:	e4f5      	b.n	10014cf8 <__aeabi_dsub+0x58>
1001530c:	464e      	mov	r6, r9
1001530e:	003c      	movs	r4, r7
10015310:	3e20      	subs	r6, #32
10015312:	40f4      	lsrs	r4, r6
10015314:	46a0      	mov	r8, r4
10015316:	464c      	mov	r4, r9
10015318:	2c20      	cmp	r4, #32
1001531a:	d00e      	beq.n	1001533a <__aeabi_dsub+0x69a>
1001531c:	2440      	movs	r4, #64	; 0x40
1001531e:	464e      	mov	r6, r9
10015320:	1ba4      	subs	r4, r4, r6
10015322:	40a7      	lsls	r7, r4
10015324:	433d      	orrs	r5, r7
10015326:	1e6f      	subs	r7, r5, #1
10015328:	41bd      	sbcs	r5, r7
1001532a:	4644      	mov	r4, r8
1001532c:	2700      	movs	r7, #0
1001532e:	4325      	orrs	r5, r4
10015330:	e746      	b.n	100151c0 <__aeabi_dsub+0x520>
10015332:	2700      	movs	r7, #0
10015334:	e7cf      	b.n	100152d6 <__aeabi_dsub+0x636>
10015336:	000d      	movs	r5, r1
10015338:	e573      	b.n	10014e22 <__aeabi_dsub+0x182>
1001533a:	2700      	movs	r7, #0
1001533c:	e7f2      	b.n	10015324 <__aeabi_dsub+0x684>
1001533e:	46c0      	nop			; (mov r8, r8)
10015340:	000007ff 	.word	0x000007ff
10015344:	ff7fffff 	.word	0xff7fffff

10015348 <__aeabi_dcmpun>:
10015348:	b570      	push	{r4, r5, r6, lr}
1001534a:	4e0e      	ldr	r6, [pc, #56]	; (10015384 <__aeabi_dcmpun+0x3c>)
1001534c:	030c      	lsls	r4, r1, #12
1001534e:	031d      	lsls	r5, r3, #12
10015350:	0049      	lsls	r1, r1, #1
10015352:	005b      	lsls	r3, r3, #1
10015354:	0b24      	lsrs	r4, r4, #12
10015356:	0d49      	lsrs	r1, r1, #21
10015358:	0b2d      	lsrs	r5, r5, #12
1001535a:	0d5b      	lsrs	r3, r3, #21
1001535c:	42b1      	cmp	r1, r6
1001535e:	d004      	beq.n	1001536a <__aeabi_dcmpun+0x22>
10015360:	4908      	ldr	r1, [pc, #32]	; (10015384 <__aeabi_dcmpun+0x3c>)
10015362:	2000      	movs	r0, #0
10015364:	428b      	cmp	r3, r1
10015366:	d008      	beq.n	1001537a <__aeabi_dcmpun+0x32>
10015368:	bd70      	pop	{r4, r5, r6, pc}
1001536a:	4304      	orrs	r4, r0
1001536c:	2001      	movs	r0, #1
1001536e:	2c00      	cmp	r4, #0
10015370:	d1fa      	bne.n	10015368 <__aeabi_dcmpun+0x20>
10015372:	4904      	ldr	r1, [pc, #16]	; (10015384 <__aeabi_dcmpun+0x3c>)
10015374:	2000      	movs	r0, #0
10015376:	428b      	cmp	r3, r1
10015378:	d1f6      	bne.n	10015368 <__aeabi_dcmpun+0x20>
1001537a:	4315      	orrs	r5, r2
1001537c:	0028      	movs	r0, r5
1001537e:	1e45      	subs	r5, r0, #1
10015380:	41a8      	sbcs	r0, r5
10015382:	e7f1      	b.n	10015368 <__aeabi_dcmpun+0x20>
10015384:	000007ff 	.word	0x000007ff

10015388 <__aeabi_d2iz>:
10015388:	030b      	lsls	r3, r1, #12
1001538a:	b530      	push	{r4, r5, lr}
1001538c:	4d13      	ldr	r5, [pc, #76]	; (100153dc <__aeabi_d2iz+0x54>)
1001538e:	0b1a      	lsrs	r2, r3, #12
10015390:	004b      	lsls	r3, r1, #1
10015392:	0d5b      	lsrs	r3, r3, #21
10015394:	0fc9      	lsrs	r1, r1, #31
10015396:	2400      	movs	r4, #0
10015398:	42ab      	cmp	r3, r5
1001539a:	dd11      	ble.n	100153c0 <__aeabi_d2iz+0x38>
1001539c:	4c10      	ldr	r4, [pc, #64]	; (100153e0 <__aeabi_d2iz+0x58>)
1001539e:	42a3      	cmp	r3, r4
100153a0:	dc10      	bgt.n	100153c4 <__aeabi_d2iz+0x3c>
100153a2:	2480      	movs	r4, #128	; 0x80
100153a4:	0364      	lsls	r4, r4, #13
100153a6:	4322      	orrs	r2, r4
100153a8:	4c0e      	ldr	r4, [pc, #56]	; (100153e4 <__aeabi_d2iz+0x5c>)
100153aa:	1ae4      	subs	r4, r4, r3
100153ac:	2c1f      	cmp	r4, #31
100153ae:	dd0c      	ble.n	100153ca <__aeabi_d2iz+0x42>
100153b0:	480d      	ldr	r0, [pc, #52]	; (100153e8 <__aeabi_d2iz+0x60>)
100153b2:	1ac3      	subs	r3, r0, r3
100153b4:	40da      	lsrs	r2, r3
100153b6:	0013      	movs	r3, r2
100153b8:	425c      	negs	r4, r3
100153ba:	2900      	cmp	r1, #0
100153bc:	d100      	bne.n	100153c0 <__aeabi_d2iz+0x38>
100153be:	001c      	movs	r4, r3
100153c0:	0020      	movs	r0, r4
100153c2:	bd30      	pop	{r4, r5, pc}
100153c4:	4b09      	ldr	r3, [pc, #36]	; (100153ec <__aeabi_d2iz+0x64>)
100153c6:	18cc      	adds	r4, r1, r3
100153c8:	e7fa      	b.n	100153c0 <__aeabi_d2iz+0x38>
100153ca:	40e0      	lsrs	r0, r4
100153cc:	4c08      	ldr	r4, [pc, #32]	; (100153f0 <__aeabi_d2iz+0x68>)
100153ce:	46a4      	mov	ip, r4
100153d0:	4463      	add	r3, ip
100153d2:	409a      	lsls	r2, r3
100153d4:	0013      	movs	r3, r2
100153d6:	4303      	orrs	r3, r0
100153d8:	e7ee      	b.n	100153b8 <__aeabi_d2iz+0x30>
100153da:	46c0      	nop			; (mov r8, r8)
100153dc:	000003fe 	.word	0x000003fe
100153e0:	0000041d 	.word	0x0000041d
100153e4:	00000433 	.word	0x00000433
100153e8:	00000413 	.word	0x00000413
100153ec:	7fffffff 	.word	0x7fffffff
100153f0:	fffffbed 	.word	0xfffffbed

100153f4 <__aeabi_i2d>:
100153f4:	b570      	push	{r4, r5, r6, lr}
100153f6:	2800      	cmp	r0, #0
100153f8:	d030      	beq.n	1001545c <__aeabi_i2d+0x68>
100153fa:	17c3      	asrs	r3, r0, #31
100153fc:	18c4      	adds	r4, r0, r3
100153fe:	405c      	eors	r4, r3
10015400:	0fc5      	lsrs	r5, r0, #31
10015402:	0020      	movs	r0, r4
10015404:	f000 f950 	bl	100156a8 <__clzsi2>
10015408:	4b17      	ldr	r3, [pc, #92]	; (10015468 <__aeabi_i2d+0x74>)
1001540a:	4a18      	ldr	r2, [pc, #96]	; (1001546c <__aeabi_i2d+0x78>)
1001540c:	1a1b      	subs	r3, r3, r0
1001540e:	1ad2      	subs	r2, r2, r3
10015410:	2a1f      	cmp	r2, #31
10015412:	dd18      	ble.n	10015446 <__aeabi_i2d+0x52>
10015414:	4a16      	ldr	r2, [pc, #88]	; (10015470 <__aeabi_i2d+0x7c>)
10015416:	1ad2      	subs	r2, r2, r3
10015418:	4094      	lsls	r4, r2
1001541a:	2200      	movs	r2, #0
1001541c:	0324      	lsls	r4, r4, #12
1001541e:	055b      	lsls	r3, r3, #21
10015420:	0b24      	lsrs	r4, r4, #12
10015422:	0d5b      	lsrs	r3, r3, #21
10015424:	2100      	movs	r1, #0
10015426:	0010      	movs	r0, r2
10015428:	0324      	lsls	r4, r4, #12
1001542a:	0d0a      	lsrs	r2, r1, #20
1001542c:	0512      	lsls	r2, r2, #20
1001542e:	0b24      	lsrs	r4, r4, #12
10015430:	4314      	orrs	r4, r2
10015432:	4a10      	ldr	r2, [pc, #64]	; (10015474 <__aeabi_i2d+0x80>)
10015434:	051b      	lsls	r3, r3, #20
10015436:	4014      	ands	r4, r2
10015438:	431c      	orrs	r4, r3
1001543a:	0064      	lsls	r4, r4, #1
1001543c:	07ed      	lsls	r5, r5, #31
1001543e:	0864      	lsrs	r4, r4, #1
10015440:	432c      	orrs	r4, r5
10015442:	0021      	movs	r1, r4
10015444:	bd70      	pop	{r4, r5, r6, pc}
10015446:	0021      	movs	r1, r4
10015448:	4091      	lsls	r1, r2
1001544a:	000a      	movs	r2, r1
1001544c:	210b      	movs	r1, #11
1001544e:	1a08      	subs	r0, r1, r0
10015450:	40c4      	lsrs	r4, r0
10015452:	055b      	lsls	r3, r3, #21
10015454:	0324      	lsls	r4, r4, #12
10015456:	0b24      	lsrs	r4, r4, #12
10015458:	0d5b      	lsrs	r3, r3, #21
1001545a:	e7e3      	b.n	10015424 <__aeabi_i2d+0x30>
1001545c:	2500      	movs	r5, #0
1001545e:	2300      	movs	r3, #0
10015460:	2400      	movs	r4, #0
10015462:	2200      	movs	r2, #0
10015464:	e7de      	b.n	10015424 <__aeabi_i2d+0x30>
10015466:	46c0      	nop			; (mov r8, r8)
10015468:	0000041e 	.word	0x0000041e
1001546c:	00000433 	.word	0x00000433
10015470:	00000413 	.word	0x00000413
10015474:	800fffff 	.word	0x800fffff

10015478 <__aeabi_ui2d>:
10015478:	b570      	push	{r4, r5, r6, lr}
1001547a:	1e05      	subs	r5, r0, #0
1001547c:	d028      	beq.n	100154d0 <__aeabi_ui2d+0x58>
1001547e:	f000 f913 	bl	100156a8 <__clzsi2>
10015482:	4b15      	ldr	r3, [pc, #84]	; (100154d8 <__aeabi_ui2d+0x60>)
10015484:	4a15      	ldr	r2, [pc, #84]	; (100154dc <__aeabi_ui2d+0x64>)
10015486:	1a1b      	subs	r3, r3, r0
10015488:	1ad2      	subs	r2, r2, r3
1001548a:	2a1f      	cmp	r2, #31
1001548c:	dd16      	ble.n	100154bc <__aeabi_ui2d+0x44>
1001548e:	002c      	movs	r4, r5
10015490:	4a13      	ldr	r2, [pc, #76]	; (100154e0 <__aeabi_ui2d+0x68>)
10015492:	2500      	movs	r5, #0
10015494:	1ad2      	subs	r2, r2, r3
10015496:	4094      	lsls	r4, r2
10015498:	055a      	lsls	r2, r3, #21
1001549a:	0324      	lsls	r4, r4, #12
1001549c:	0b24      	lsrs	r4, r4, #12
1001549e:	0d52      	lsrs	r2, r2, #21
100154a0:	2100      	movs	r1, #0
100154a2:	0324      	lsls	r4, r4, #12
100154a4:	0d0b      	lsrs	r3, r1, #20
100154a6:	0b24      	lsrs	r4, r4, #12
100154a8:	051b      	lsls	r3, r3, #20
100154aa:	4323      	orrs	r3, r4
100154ac:	4c0d      	ldr	r4, [pc, #52]	; (100154e4 <__aeabi_ui2d+0x6c>)
100154ae:	0512      	lsls	r2, r2, #20
100154b0:	4023      	ands	r3, r4
100154b2:	4313      	orrs	r3, r2
100154b4:	005b      	lsls	r3, r3, #1
100154b6:	0028      	movs	r0, r5
100154b8:	0859      	lsrs	r1, r3, #1
100154ba:	bd70      	pop	{r4, r5, r6, pc}
100154bc:	210b      	movs	r1, #11
100154be:	002c      	movs	r4, r5
100154c0:	1a08      	subs	r0, r1, r0
100154c2:	40c4      	lsrs	r4, r0
100154c4:	4095      	lsls	r5, r2
100154c6:	0324      	lsls	r4, r4, #12
100154c8:	055a      	lsls	r2, r3, #21
100154ca:	0b24      	lsrs	r4, r4, #12
100154cc:	0d52      	lsrs	r2, r2, #21
100154ce:	e7e7      	b.n	100154a0 <__aeabi_ui2d+0x28>
100154d0:	2200      	movs	r2, #0
100154d2:	2400      	movs	r4, #0
100154d4:	e7e4      	b.n	100154a0 <__aeabi_ui2d+0x28>
100154d6:	46c0      	nop			; (mov r8, r8)
100154d8:	0000041e 	.word	0x0000041e
100154dc:	00000433 	.word	0x00000433
100154e0:	00000413 	.word	0x00000413
100154e4:	800fffff 	.word	0x800fffff

100154e8 <__aeabi_f2d>:
100154e8:	0042      	lsls	r2, r0, #1
100154ea:	0e12      	lsrs	r2, r2, #24
100154ec:	1c51      	adds	r1, r2, #1
100154ee:	0243      	lsls	r3, r0, #9
100154f0:	b2c9      	uxtb	r1, r1
100154f2:	b570      	push	{r4, r5, r6, lr}
100154f4:	0a5d      	lsrs	r5, r3, #9
100154f6:	0fc4      	lsrs	r4, r0, #31
100154f8:	2901      	cmp	r1, #1
100154fa:	dd15      	ble.n	10015528 <__aeabi_f2d+0x40>
100154fc:	21e0      	movs	r1, #224	; 0xe0
100154fe:	0089      	lsls	r1, r1, #2
10015500:	468c      	mov	ip, r1
10015502:	076d      	lsls	r5, r5, #29
10015504:	0b1b      	lsrs	r3, r3, #12
10015506:	4462      	add	r2, ip
10015508:	2100      	movs	r1, #0
1001550a:	0028      	movs	r0, r5
1001550c:	0d0d      	lsrs	r5, r1, #20
1001550e:	052d      	lsls	r5, r5, #20
10015510:	432b      	orrs	r3, r5
10015512:	4d1c      	ldr	r5, [pc, #112]	; (10015584 <__aeabi_f2d+0x9c>)
10015514:	0552      	lsls	r2, r2, #21
10015516:	402b      	ands	r3, r5
10015518:	0852      	lsrs	r2, r2, #1
1001551a:	4313      	orrs	r3, r2
1001551c:	005b      	lsls	r3, r3, #1
1001551e:	07e4      	lsls	r4, r4, #31
10015520:	085b      	lsrs	r3, r3, #1
10015522:	4323      	orrs	r3, r4
10015524:	0019      	movs	r1, r3
10015526:	bd70      	pop	{r4, r5, r6, pc}
10015528:	2a00      	cmp	r2, #0
1001552a:	d115      	bne.n	10015558 <__aeabi_f2d+0x70>
1001552c:	2d00      	cmp	r5, #0
1001552e:	d01f      	beq.n	10015570 <__aeabi_f2d+0x88>
10015530:	0028      	movs	r0, r5
10015532:	f000 f8b9 	bl	100156a8 <__clzsi2>
10015536:	280a      	cmp	r0, #10
10015538:	dc1d      	bgt.n	10015576 <__aeabi_f2d+0x8e>
1001553a:	230b      	movs	r3, #11
1001553c:	002a      	movs	r2, r5
1001553e:	1a1b      	subs	r3, r3, r0
10015540:	40da      	lsrs	r2, r3
10015542:	0013      	movs	r3, r2
10015544:	0002      	movs	r2, r0
10015546:	3215      	adds	r2, #21
10015548:	4095      	lsls	r5, r2
1001554a:	4a0f      	ldr	r2, [pc, #60]	; (10015588 <__aeabi_f2d+0xa0>)
1001554c:	031b      	lsls	r3, r3, #12
1001554e:	1a12      	subs	r2, r2, r0
10015550:	0552      	lsls	r2, r2, #21
10015552:	0b1b      	lsrs	r3, r3, #12
10015554:	0d52      	lsrs	r2, r2, #21
10015556:	e7d7      	b.n	10015508 <__aeabi_f2d+0x20>
10015558:	2d00      	cmp	r5, #0
1001555a:	d006      	beq.n	1001556a <__aeabi_f2d+0x82>
1001555c:	2280      	movs	r2, #128	; 0x80
1001555e:	0b1b      	lsrs	r3, r3, #12
10015560:	0312      	lsls	r2, r2, #12
10015562:	4313      	orrs	r3, r2
10015564:	076d      	lsls	r5, r5, #29
10015566:	4a09      	ldr	r2, [pc, #36]	; (1001558c <__aeabi_f2d+0xa4>)
10015568:	e7ce      	b.n	10015508 <__aeabi_f2d+0x20>
1001556a:	4a08      	ldr	r2, [pc, #32]	; (1001558c <__aeabi_f2d+0xa4>)
1001556c:	2300      	movs	r3, #0
1001556e:	e7cb      	b.n	10015508 <__aeabi_f2d+0x20>
10015570:	2200      	movs	r2, #0
10015572:	2300      	movs	r3, #0
10015574:	e7c8      	b.n	10015508 <__aeabi_f2d+0x20>
10015576:	0003      	movs	r3, r0
10015578:	3b0b      	subs	r3, #11
1001557a:	409d      	lsls	r5, r3
1001557c:	002b      	movs	r3, r5
1001557e:	2500      	movs	r5, #0
10015580:	e7e3      	b.n	1001554a <__aeabi_f2d+0x62>
10015582:	46c0      	nop			; (mov r8, r8)
10015584:	800fffff 	.word	0x800fffff
10015588:	00000389 	.word	0x00000389
1001558c:	000007ff 	.word	0x000007ff

10015590 <__aeabi_d2f>:
10015590:	004b      	lsls	r3, r1, #1
10015592:	b570      	push	{r4, r5, r6, lr}
10015594:	0d5e      	lsrs	r6, r3, #21
10015596:	030c      	lsls	r4, r1, #12
10015598:	1c75      	adds	r5, r6, #1
1001559a:	0a64      	lsrs	r4, r4, #9
1001559c:	0f42      	lsrs	r2, r0, #29
1001559e:	056d      	lsls	r5, r5, #21
100155a0:	4322      	orrs	r2, r4
100155a2:	0fc9      	lsrs	r1, r1, #31
100155a4:	00c4      	lsls	r4, r0, #3
100155a6:	0d6d      	lsrs	r5, r5, #21
100155a8:	2d01      	cmp	r5, #1
100155aa:	dd2a      	ble.n	10015602 <__aeabi_d2f+0x72>
100155ac:	4b3b      	ldr	r3, [pc, #236]	; (1001569c <__aeabi_d2f+0x10c>)
100155ae:	18f3      	adds	r3, r6, r3
100155b0:	2bfe      	cmp	r3, #254	; 0xfe
100155b2:	dc1a      	bgt.n	100155ea <__aeabi_d2f+0x5a>
100155b4:	2b00      	cmp	r3, #0
100155b6:	dd42      	ble.n	1001563e <__aeabi_d2f+0xae>
100155b8:	0180      	lsls	r0, r0, #6
100155ba:	1e45      	subs	r5, r0, #1
100155bc:	41a8      	sbcs	r0, r5
100155be:	00d2      	lsls	r2, r2, #3
100155c0:	4310      	orrs	r0, r2
100155c2:	0f62      	lsrs	r2, r4, #29
100155c4:	4302      	orrs	r2, r0
100155c6:	0750      	lsls	r0, r2, #29
100155c8:	d004      	beq.n	100155d4 <__aeabi_d2f+0x44>
100155ca:	200f      	movs	r0, #15
100155cc:	4010      	ands	r0, r2
100155ce:	2804      	cmp	r0, #4
100155d0:	d000      	beq.n	100155d4 <__aeabi_d2f+0x44>
100155d2:	3204      	adds	r2, #4
100155d4:	2080      	movs	r0, #128	; 0x80
100155d6:	04c0      	lsls	r0, r0, #19
100155d8:	4010      	ands	r0, r2
100155da:	d021      	beq.n	10015620 <__aeabi_d2f+0x90>
100155dc:	3301      	adds	r3, #1
100155de:	2bff      	cmp	r3, #255	; 0xff
100155e0:	d003      	beq.n	100155ea <__aeabi_d2f+0x5a>
100155e2:	0192      	lsls	r2, r2, #6
100155e4:	0a52      	lsrs	r2, r2, #9
100155e6:	b2db      	uxtb	r3, r3
100155e8:	e001      	b.n	100155ee <__aeabi_d2f+0x5e>
100155ea:	23ff      	movs	r3, #255	; 0xff
100155ec:	2200      	movs	r2, #0
100155ee:	0252      	lsls	r2, r2, #9
100155f0:	0a52      	lsrs	r2, r2, #9
100155f2:	05db      	lsls	r3, r3, #23
100155f4:	4313      	orrs	r3, r2
100155f6:	005b      	lsls	r3, r3, #1
100155f8:	07c9      	lsls	r1, r1, #31
100155fa:	085b      	lsrs	r3, r3, #1
100155fc:	430b      	orrs	r3, r1
100155fe:	0018      	movs	r0, r3
10015600:	bd70      	pop	{r4, r5, r6, pc}
10015602:	2e00      	cmp	r6, #0
10015604:	d007      	beq.n	10015616 <__aeabi_d2f+0x86>
10015606:	4314      	orrs	r4, r2
10015608:	d0ef      	beq.n	100155ea <__aeabi_d2f+0x5a>
1001560a:	2080      	movs	r0, #128	; 0x80
1001560c:	00d2      	lsls	r2, r2, #3
1001560e:	0480      	lsls	r0, r0, #18
10015610:	4302      	orrs	r2, r0
10015612:	23ff      	movs	r3, #255	; 0xff
10015614:	e7d7      	b.n	100155c6 <__aeabi_d2f+0x36>
10015616:	4322      	orrs	r2, r4
10015618:	2300      	movs	r3, #0
1001561a:	2a00      	cmp	r2, #0
1001561c:	d003      	beq.n	10015626 <__aeabi_d2f+0x96>
1001561e:	2205      	movs	r2, #5
10015620:	08d2      	lsrs	r2, r2, #3
10015622:	2bff      	cmp	r3, #255	; 0xff
10015624:	d003      	beq.n	1001562e <__aeabi_d2f+0x9e>
10015626:	0252      	lsls	r2, r2, #9
10015628:	0a52      	lsrs	r2, r2, #9
1001562a:	b2db      	uxtb	r3, r3
1001562c:	e7df      	b.n	100155ee <__aeabi_d2f+0x5e>
1001562e:	2a00      	cmp	r2, #0
10015630:	d032      	beq.n	10015698 <__aeabi_d2f+0x108>
10015632:	2080      	movs	r0, #128	; 0x80
10015634:	03c0      	lsls	r0, r0, #15
10015636:	4302      	orrs	r2, r0
10015638:	0252      	lsls	r2, r2, #9
1001563a:	0a52      	lsrs	r2, r2, #9
1001563c:	e7d7      	b.n	100155ee <__aeabi_d2f+0x5e>
1001563e:	0018      	movs	r0, r3
10015640:	3017      	adds	r0, #23
10015642:	db14      	blt.n	1001566e <__aeabi_d2f+0xde>
10015644:	2080      	movs	r0, #128	; 0x80
10015646:	0400      	lsls	r0, r0, #16
10015648:	4302      	orrs	r2, r0
1001564a:	201e      	movs	r0, #30
1001564c:	1ac0      	subs	r0, r0, r3
1001564e:	281f      	cmp	r0, #31
10015650:	dc0f      	bgt.n	10015672 <__aeabi_d2f+0xe2>
10015652:	0025      	movs	r5, r4
10015654:	4b12      	ldr	r3, [pc, #72]	; (100156a0 <__aeabi_d2f+0x110>)
10015656:	18f3      	adds	r3, r6, r3
10015658:	409d      	lsls	r5, r3
1001565a:	1e6e      	subs	r6, r5, #1
1001565c:	41b5      	sbcs	r5, r6
1001565e:	409a      	lsls	r2, r3
10015660:	002b      	movs	r3, r5
10015662:	4313      	orrs	r3, r2
10015664:	0022      	movs	r2, r4
10015666:	40c2      	lsrs	r2, r0
10015668:	431a      	orrs	r2, r3
1001566a:	2300      	movs	r3, #0
1001566c:	e7ab      	b.n	100155c6 <__aeabi_d2f+0x36>
1001566e:	2300      	movs	r3, #0
10015670:	e7d5      	b.n	1001561e <__aeabi_d2f+0x8e>
10015672:	2502      	movs	r5, #2
10015674:	426d      	negs	r5, r5
10015676:	1aeb      	subs	r3, r5, r3
10015678:	0015      	movs	r5, r2
1001567a:	40dd      	lsrs	r5, r3
1001567c:	2820      	cmp	r0, #32
1001567e:	d009      	beq.n	10015694 <__aeabi_d2f+0x104>
10015680:	4b08      	ldr	r3, [pc, #32]	; (100156a4 <__aeabi_d2f+0x114>)
10015682:	18f3      	adds	r3, r6, r3
10015684:	409a      	lsls	r2, r3
10015686:	4314      	orrs	r4, r2
10015688:	1e62      	subs	r2, r4, #1
1001568a:	4194      	sbcs	r4, r2
1001568c:	0022      	movs	r2, r4
1001568e:	2300      	movs	r3, #0
10015690:	432a      	orrs	r2, r5
10015692:	e798      	b.n	100155c6 <__aeabi_d2f+0x36>
10015694:	2200      	movs	r2, #0
10015696:	e7f6      	b.n	10015686 <__aeabi_d2f+0xf6>
10015698:	2200      	movs	r2, #0
1001569a:	e7a8      	b.n	100155ee <__aeabi_d2f+0x5e>
1001569c:	fffffc80 	.word	0xfffffc80
100156a0:	fffffc82 	.word	0xfffffc82
100156a4:	fffffca2 	.word	0xfffffca2

100156a8 <__clzsi2>:
100156a8:	211c      	movs	r1, #28
100156aa:	2301      	movs	r3, #1
100156ac:	041b      	lsls	r3, r3, #16
100156ae:	4298      	cmp	r0, r3
100156b0:	d301      	bcc.n	100156b6 <__clzsi2+0xe>
100156b2:	0c00      	lsrs	r0, r0, #16
100156b4:	3910      	subs	r1, #16
100156b6:	0a1b      	lsrs	r3, r3, #8
100156b8:	4298      	cmp	r0, r3
100156ba:	d301      	bcc.n	100156c0 <__clzsi2+0x18>
100156bc:	0a00      	lsrs	r0, r0, #8
100156be:	3908      	subs	r1, #8
100156c0:	091b      	lsrs	r3, r3, #4
100156c2:	4298      	cmp	r0, r3
100156c4:	d301      	bcc.n	100156ca <__clzsi2+0x22>
100156c6:	0900      	lsrs	r0, r0, #4
100156c8:	3904      	subs	r1, #4
100156ca:	a202      	add	r2, pc, #8	; (adr r2, 100156d4 <__clzsi2+0x2c>)
100156cc:	5c10      	ldrb	r0, [r2, r0]
100156ce:	1840      	adds	r0, r0, r1
100156d0:	4770      	bx	lr
100156d2:	46c0      	nop			; (mov r8, r8)
100156d4:	02020304 	.word	0x02020304
100156d8:	01010101 	.word	0x01010101
	...

100156e4 <__errno>:
100156e4:	4b01      	ldr	r3, [pc, #4]	; (100156ec <__errno+0x8>)
100156e6:	6818      	ldr	r0, [r3, #0]
100156e8:	4770      	bx	lr
100156ea:	46c0      	nop			; (mov r8, r8)
100156ec:	100185a0 	.word	0x100185a0

100156f0 <__libc_init_array>:
100156f0:	4b0e      	ldr	r3, [pc, #56]	; (1001572c <__libc_init_array+0x3c>)
100156f2:	b570      	push	{r4, r5, r6, lr}
100156f4:	2500      	movs	r5, #0
100156f6:	001e      	movs	r6, r3
100156f8:	4c0d      	ldr	r4, [pc, #52]	; (10015730 <__libc_init_array+0x40>)
100156fa:	1ae4      	subs	r4, r4, r3
100156fc:	10a4      	asrs	r4, r4, #2
100156fe:	42a5      	cmp	r5, r4
10015700:	d004      	beq.n	1001570c <__libc_init_array+0x1c>
10015702:	00ab      	lsls	r3, r5, #2
10015704:	58f3      	ldr	r3, [r6, r3]
10015706:	4798      	blx	r3
10015708:	3501      	adds	r5, #1
1001570a:	e7f8      	b.n	100156fe <__libc_init_array+0xe>
1001570c:	f002 ff02 	bl	10018514 <_init>
10015710:	4b08      	ldr	r3, [pc, #32]	; (10015734 <__libc_init_array+0x44>)
10015712:	2500      	movs	r5, #0
10015714:	001e      	movs	r6, r3
10015716:	4c08      	ldr	r4, [pc, #32]	; (10015738 <__libc_init_array+0x48>)
10015718:	1ae4      	subs	r4, r4, r3
1001571a:	10a4      	asrs	r4, r4, #2
1001571c:	42a5      	cmp	r5, r4
1001571e:	d004      	beq.n	1001572a <__libc_init_array+0x3a>
10015720:	00ab      	lsls	r3, r5, #2
10015722:	58f3      	ldr	r3, [r6, r3]
10015724:	4798      	blx	r3
10015726:	3501      	adds	r5, #1
10015728:	e7f8      	b.n	1001571c <__libc_init_array+0x2c>
1001572a:	bd70      	pop	{r4, r5, r6, pc}
1001572c:	10018520 	.word	0x10018520
10015730:	10018520 	.word	0x10018520
10015734:	10018520 	.word	0x10018520
10015738:	10018524 	.word	0x10018524

1001573c <malloc>:
1001573c:	b510      	push	{r4, lr}
1001573e:	4b03      	ldr	r3, [pc, #12]	; (1001574c <malloc+0x10>)
10015740:	0001      	movs	r1, r0
10015742:	6818      	ldr	r0, [r3, #0]
10015744:	f000 f86a 	bl	1001581c <_malloc_r>
10015748:	bd10      	pop	{r4, pc}
1001574a:	46c0      	nop			; (mov r8, r8)
1001574c:	100185a0 	.word	0x100185a0

10015750 <memcmp>:
10015750:	b530      	push	{r4, r5, lr}
10015752:	2400      	movs	r4, #0
10015754:	42a2      	cmp	r2, r4
10015756:	d008      	beq.n	1001576a <memcmp+0x1a>
10015758:	5d03      	ldrb	r3, [r0, r4]
1001575a:	1c65      	adds	r5, r4, #1
1001575c:	5d0c      	ldrb	r4, [r1, r4]
1001575e:	42a3      	cmp	r3, r4
10015760:	d001      	beq.n	10015766 <memcmp+0x16>
10015762:	1b18      	subs	r0, r3, r4
10015764:	e002      	b.n	1001576c <memcmp+0x1c>
10015766:	002c      	movs	r4, r5
10015768:	e7f4      	b.n	10015754 <memcmp+0x4>
1001576a:	2000      	movs	r0, #0
1001576c:	bd30      	pop	{r4, r5, pc}

1001576e <memcpy>:
1001576e:	2300      	movs	r3, #0
10015770:	b510      	push	{r4, lr}
10015772:	429a      	cmp	r2, r3
10015774:	d003      	beq.n	1001577e <memcpy+0x10>
10015776:	5ccc      	ldrb	r4, [r1, r3]
10015778:	54c4      	strb	r4, [r0, r3]
1001577a:	3301      	adds	r3, #1
1001577c:	e7f9      	b.n	10015772 <memcpy+0x4>
1001577e:	bd10      	pop	{r4, pc}

10015780 <memset>:
10015780:	0003      	movs	r3, r0
10015782:	1882      	adds	r2, r0, r2
10015784:	4293      	cmp	r3, r2
10015786:	d002      	beq.n	1001578e <memset+0xe>
10015788:	7019      	strb	r1, [r3, #0]
1001578a:	3301      	adds	r3, #1
1001578c:	e7fa      	b.n	10015784 <memset+0x4>
1001578e:	4770      	bx	lr

10015790 <_free_r>:
10015790:	b530      	push	{r4, r5, lr}
10015792:	2900      	cmp	r1, #0
10015794:	d03e      	beq.n	10015814 <_free_r+0x84>
10015796:	3904      	subs	r1, #4
10015798:	680b      	ldr	r3, [r1, #0]
1001579a:	2b00      	cmp	r3, #0
1001579c:	da00      	bge.n	100157a0 <_free_r+0x10>
1001579e:	18c9      	adds	r1, r1, r3
100157a0:	4a1d      	ldr	r2, [pc, #116]	; (10015818 <_free_r+0x88>)
100157a2:	6813      	ldr	r3, [r2, #0]
100157a4:	0014      	movs	r4, r2
100157a6:	2b00      	cmp	r3, #0
100157a8:	d102      	bne.n	100157b0 <_free_r+0x20>
100157aa:	604b      	str	r3, [r1, #4]
100157ac:	6011      	str	r1, [r2, #0]
100157ae:	e031      	b.n	10015814 <_free_r+0x84>
100157b0:	428b      	cmp	r3, r1
100157b2:	d90d      	bls.n	100157d0 <_free_r+0x40>
100157b4:	680a      	ldr	r2, [r1, #0]
100157b6:	1888      	adds	r0, r1, r2
100157b8:	4283      	cmp	r3, r0
100157ba:	d103      	bne.n	100157c4 <_free_r+0x34>
100157bc:	6818      	ldr	r0, [r3, #0]
100157be:	685b      	ldr	r3, [r3, #4]
100157c0:	1882      	adds	r2, r0, r2
100157c2:	600a      	str	r2, [r1, #0]
100157c4:	604b      	str	r3, [r1, #4]
100157c6:	6021      	str	r1, [r4, #0]
100157c8:	e024      	b.n	10015814 <_free_r+0x84>
100157ca:	428a      	cmp	r2, r1
100157cc:	d803      	bhi.n	100157d6 <_free_r+0x46>
100157ce:	0013      	movs	r3, r2
100157d0:	685a      	ldr	r2, [r3, #4]
100157d2:	2a00      	cmp	r2, #0
100157d4:	d1f9      	bne.n	100157ca <_free_r+0x3a>
100157d6:	681d      	ldr	r5, [r3, #0]
100157d8:	195c      	adds	r4, r3, r5
100157da:	428c      	cmp	r4, r1
100157dc:	d10b      	bne.n	100157f6 <_free_r+0x66>
100157de:	6809      	ldr	r1, [r1, #0]
100157e0:	1869      	adds	r1, r5, r1
100157e2:	1858      	adds	r0, r3, r1
100157e4:	6019      	str	r1, [r3, #0]
100157e6:	4282      	cmp	r2, r0
100157e8:	d114      	bne.n	10015814 <_free_r+0x84>
100157ea:	6810      	ldr	r0, [r2, #0]
100157ec:	6852      	ldr	r2, [r2, #4]
100157ee:	1841      	adds	r1, r0, r1
100157f0:	6019      	str	r1, [r3, #0]
100157f2:	605a      	str	r2, [r3, #4]
100157f4:	e00e      	b.n	10015814 <_free_r+0x84>
100157f6:	428c      	cmp	r4, r1
100157f8:	d902      	bls.n	10015800 <_free_r+0x70>
100157fa:	230c      	movs	r3, #12
100157fc:	6003      	str	r3, [r0, #0]
100157fe:	e009      	b.n	10015814 <_free_r+0x84>
10015800:	6808      	ldr	r0, [r1, #0]
10015802:	180c      	adds	r4, r1, r0
10015804:	42a2      	cmp	r2, r4
10015806:	d103      	bne.n	10015810 <_free_r+0x80>
10015808:	6814      	ldr	r4, [r2, #0]
1001580a:	6852      	ldr	r2, [r2, #4]
1001580c:	1820      	adds	r0, r4, r0
1001580e:	6008      	str	r0, [r1, #0]
10015810:	604a      	str	r2, [r1, #4]
10015812:	6059      	str	r1, [r3, #4]
10015814:	bd30      	pop	{r4, r5, pc}
10015816:	46c0      	nop			; (mov r8, r8)
10015818:	1001a064 	.word	0x1001a064

1001581c <_malloc_r>:
1001581c:	2303      	movs	r3, #3
1001581e:	b570      	push	{r4, r5, r6, lr}
10015820:	1ccd      	adds	r5, r1, #3
10015822:	439d      	bics	r5, r3
10015824:	3508      	adds	r5, #8
10015826:	0006      	movs	r6, r0
10015828:	2d0c      	cmp	r5, #12
1001582a:	d201      	bcs.n	10015830 <_malloc_r+0x14>
1001582c:	250c      	movs	r5, #12
1001582e:	e005      	b.n	1001583c <_malloc_r+0x20>
10015830:	2d00      	cmp	r5, #0
10015832:	da03      	bge.n	1001583c <_malloc_r+0x20>
10015834:	230c      	movs	r3, #12
10015836:	2000      	movs	r0, #0
10015838:	6033      	str	r3, [r6, #0]
1001583a:	e040      	b.n	100158be <_malloc_r+0xa2>
1001583c:	42a9      	cmp	r1, r5
1001583e:	d8f9      	bhi.n	10015834 <_malloc_r+0x18>
10015840:	4b1f      	ldr	r3, [pc, #124]	; (100158c0 <_malloc_r+0xa4>)
10015842:	681c      	ldr	r4, [r3, #0]
10015844:	001a      	movs	r2, r3
10015846:	0021      	movs	r1, r4
10015848:	2900      	cmp	r1, #0
1001584a:	d013      	beq.n	10015874 <_malloc_r+0x58>
1001584c:	680b      	ldr	r3, [r1, #0]
1001584e:	1b5b      	subs	r3, r3, r5
10015850:	d40d      	bmi.n	1001586e <_malloc_r+0x52>
10015852:	2b0b      	cmp	r3, #11
10015854:	d902      	bls.n	1001585c <_malloc_r+0x40>
10015856:	600b      	str	r3, [r1, #0]
10015858:	18cc      	adds	r4, r1, r3
1001585a:	e01e      	b.n	1001589a <_malloc_r+0x7e>
1001585c:	428c      	cmp	r4, r1
1001585e:	d102      	bne.n	10015866 <_malloc_r+0x4a>
10015860:	6863      	ldr	r3, [r4, #4]
10015862:	6013      	str	r3, [r2, #0]
10015864:	e01a      	b.n	1001589c <_malloc_r+0x80>
10015866:	684b      	ldr	r3, [r1, #4]
10015868:	6063      	str	r3, [r4, #4]
1001586a:	000c      	movs	r4, r1
1001586c:	e016      	b.n	1001589c <_malloc_r+0x80>
1001586e:	000c      	movs	r4, r1
10015870:	6849      	ldr	r1, [r1, #4]
10015872:	e7e9      	b.n	10015848 <_malloc_r+0x2c>
10015874:	4c13      	ldr	r4, [pc, #76]	; (100158c4 <_malloc_r+0xa8>)
10015876:	6823      	ldr	r3, [r4, #0]
10015878:	2b00      	cmp	r3, #0
1001587a:	d103      	bne.n	10015884 <_malloc_r+0x68>
1001587c:	0030      	movs	r0, r6
1001587e:	f000 f8f9 	bl	10015a74 <_sbrk_r>
10015882:	6020      	str	r0, [r4, #0]
10015884:	0029      	movs	r1, r5
10015886:	0030      	movs	r0, r6
10015888:	f000 f8f4 	bl	10015a74 <_sbrk_r>
1001588c:	1c43      	adds	r3, r0, #1
1001588e:	d0d1      	beq.n	10015834 <_malloc_r+0x18>
10015890:	2303      	movs	r3, #3
10015892:	1cc4      	adds	r4, r0, #3
10015894:	439c      	bics	r4, r3
10015896:	42a0      	cmp	r0, r4
10015898:	d10a      	bne.n	100158b0 <_malloc_r+0x94>
1001589a:	6025      	str	r5, [r4, #0]
1001589c:	0020      	movs	r0, r4
1001589e:	2207      	movs	r2, #7
100158a0:	300b      	adds	r0, #11
100158a2:	1d23      	adds	r3, r4, #4
100158a4:	4390      	bics	r0, r2
100158a6:	1ac3      	subs	r3, r0, r3
100158a8:	d009      	beq.n	100158be <_malloc_r+0xa2>
100158aa:	425a      	negs	r2, r3
100158ac:	50e2      	str	r2, [r4, r3]
100158ae:	e006      	b.n	100158be <_malloc_r+0xa2>
100158b0:	1a21      	subs	r1, r4, r0
100158b2:	0030      	movs	r0, r6
100158b4:	f000 f8de 	bl	10015a74 <_sbrk_r>
100158b8:	1c43      	adds	r3, r0, #1
100158ba:	d1ee      	bne.n	1001589a <_malloc_r+0x7e>
100158bc:	e7ba      	b.n	10015834 <_malloc_r+0x18>
100158be:	bd70      	pop	{r4, r5, r6, pc}
100158c0:	1001a064 	.word	0x1001a064
100158c4:	1001a060 	.word	0x1001a060

100158c8 <iprintf>:
100158c8:	b40f      	push	{r0, r1, r2, r3}
100158ca:	4b0b      	ldr	r3, [pc, #44]	; (100158f8 <iprintf+0x30>)
100158cc:	b513      	push	{r0, r1, r4, lr}
100158ce:	681c      	ldr	r4, [r3, #0]
100158d0:	2c00      	cmp	r4, #0
100158d2:	d005      	beq.n	100158e0 <iprintf+0x18>
100158d4:	69a3      	ldr	r3, [r4, #24]
100158d6:	2b00      	cmp	r3, #0
100158d8:	d102      	bne.n	100158e0 <iprintf+0x18>
100158da:	0020      	movs	r0, r4
100158dc:	f000 fb58 	bl	10015f90 <__sinit>
100158e0:	ab05      	add	r3, sp, #20
100158e2:	9a04      	ldr	r2, [sp, #16]
100158e4:	68a1      	ldr	r1, [r4, #8]
100158e6:	0020      	movs	r0, r4
100158e8:	9301      	str	r3, [sp, #4]
100158ea:	f000 fc71 	bl	100161d0 <_vfiprintf_r>
100158ee:	bc16      	pop	{r1, r2, r4}
100158f0:	bc08      	pop	{r3}
100158f2:	b004      	add	sp, #16
100158f4:	4718      	bx	r3
100158f6:	46c0      	nop			; (mov r8, r8)
100158f8:	100185a0 	.word	0x100185a0

100158fc <putchar>:
100158fc:	4b08      	ldr	r3, [pc, #32]	; (10015920 <putchar+0x24>)
100158fe:	b570      	push	{r4, r5, r6, lr}
10015900:	681c      	ldr	r4, [r3, #0]
10015902:	0005      	movs	r5, r0
10015904:	2c00      	cmp	r4, #0
10015906:	d005      	beq.n	10015914 <putchar+0x18>
10015908:	69a3      	ldr	r3, [r4, #24]
1001590a:	2b00      	cmp	r3, #0
1001590c:	d102      	bne.n	10015914 <putchar+0x18>
1001590e:	0020      	movs	r0, r4
10015910:	f000 fb3e 	bl	10015f90 <__sinit>
10015914:	0029      	movs	r1, r5
10015916:	68a2      	ldr	r2, [r4, #8]
10015918:	0020      	movs	r0, r4
1001591a:	f000 ff05 	bl	10016728 <_putc_r>
1001591e:	bd70      	pop	{r4, r5, r6, pc}
10015920:	100185a0 	.word	0x100185a0

10015924 <_puts_r>:
10015924:	b570      	push	{r4, r5, r6, lr}
10015926:	0005      	movs	r5, r0
10015928:	000e      	movs	r6, r1
1001592a:	2800      	cmp	r0, #0
1001592c:	d004      	beq.n	10015938 <_puts_r+0x14>
1001592e:	6983      	ldr	r3, [r0, #24]
10015930:	2b00      	cmp	r3, #0
10015932:	d101      	bne.n	10015938 <_puts_r+0x14>
10015934:	f000 fb2c 	bl	10015f90 <__sinit>
10015938:	69ab      	ldr	r3, [r5, #24]
1001593a:	68ac      	ldr	r4, [r5, #8]
1001593c:	2b00      	cmp	r3, #0
1001593e:	d102      	bne.n	10015946 <_puts_r+0x22>
10015940:	0028      	movs	r0, r5
10015942:	f000 fb25 	bl	10015f90 <__sinit>
10015946:	4b25      	ldr	r3, [pc, #148]	; (100159dc <_puts_r+0xb8>)
10015948:	429c      	cmp	r4, r3
1001594a:	d101      	bne.n	10015950 <_puts_r+0x2c>
1001594c:	686c      	ldr	r4, [r5, #4]
1001594e:	e008      	b.n	10015962 <_puts_r+0x3e>
10015950:	4b23      	ldr	r3, [pc, #140]	; (100159e0 <_puts_r+0xbc>)
10015952:	429c      	cmp	r4, r3
10015954:	d101      	bne.n	1001595a <_puts_r+0x36>
10015956:	68ac      	ldr	r4, [r5, #8]
10015958:	e003      	b.n	10015962 <_puts_r+0x3e>
1001595a:	4b22      	ldr	r3, [pc, #136]	; (100159e4 <_puts_r+0xc0>)
1001595c:	429c      	cmp	r4, r3
1001595e:	d100      	bne.n	10015962 <_puts_r+0x3e>
10015960:	68ec      	ldr	r4, [r5, #12]
10015962:	89a3      	ldrh	r3, [r4, #12]
10015964:	071b      	lsls	r3, r3, #28
10015966:	d502      	bpl.n	1001596e <_puts_r+0x4a>
10015968:	6923      	ldr	r3, [r4, #16]
1001596a:	2b00      	cmp	r3, #0
1001596c:	d111      	bne.n	10015992 <_puts_r+0x6e>
1001596e:	0021      	movs	r1, r4
10015970:	0028      	movs	r0, r5
10015972:	f000 f9a3 	bl	10015cbc <__swsetup_r>
10015976:	2800      	cmp	r0, #0
10015978:	d00b      	beq.n	10015992 <_puts_r+0x6e>
1001597a:	2001      	movs	r0, #1
1001597c:	4240      	negs	r0, r0
1001597e:	e02b      	b.n	100159d8 <_puts_r+0xb4>
10015980:	3b01      	subs	r3, #1
10015982:	3601      	adds	r6, #1
10015984:	60a3      	str	r3, [r4, #8]
10015986:	2b00      	cmp	r3, #0
10015988:	db08      	blt.n	1001599c <_puts_r+0x78>
1001598a:	6823      	ldr	r3, [r4, #0]
1001598c:	1c5a      	adds	r2, r3, #1
1001598e:	6022      	str	r2, [r4, #0]
10015990:	7019      	strb	r1, [r3, #0]
10015992:	7831      	ldrb	r1, [r6, #0]
10015994:	68a3      	ldr	r3, [r4, #8]
10015996:	2900      	cmp	r1, #0
10015998:	d1f2      	bne.n	10015980 <_puts_r+0x5c>
1001599a:	e00b      	b.n	100159b4 <_puts_r+0x90>
1001599c:	69a2      	ldr	r2, [r4, #24]
1001599e:	4293      	cmp	r3, r2
100159a0:	db01      	blt.n	100159a6 <_puts_r+0x82>
100159a2:	290a      	cmp	r1, #10
100159a4:	d1f1      	bne.n	1001598a <_puts_r+0x66>
100159a6:	0022      	movs	r2, r4
100159a8:	0028      	movs	r0, r5
100159aa:	f000 f92f 	bl	10015c0c <__swbuf_r>
100159ae:	1c43      	adds	r3, r0, #1
100159b0:	d1ef      	bne.n	10015992 <_puts_r+0x6e>
100159b2:	e7e2      	b.n	1001597a <_puts_r+0x56>
100159b4:	3b01      	subs	r3, #1
100159b6:	60a3      	str	r3, [r4, #8]
100159b8:	2b00      	cmp	r3, #0
100159ba:	da08      	bge.n	100159ce <_puts_r+0xaa>
100159bc:	0022      	movs	r2, r4
100159be:	310a      	adds	r1, #10
100159c0:	0028      	movs	r0, r5
100159c2:	f000 f923 	bl	10015c0c <__swbuf_r>
100159c6:	1c43      	adds	r3, r0, #1
100159c8:	d0d7      	beq.n	1001597a <_puts_r+0x56>
100159ca:	200a      	movs	r0, #10
100159cc:	e004      	b.n	100159d8 <_puts_r+0xb4>
100159ce:	200a      	movs	r0, #10
100159d0:	6823      	ldr	r3, [r4, #0]
100159d2:	1c5a      	adds	r2, r3, #1
100159d4:	6022      	str	r2, [r4, #0]
100159d6:	7018      	strb	r0, [r3, #0]
100159d8:	bd70      	pop	{r4, r5, r6, pc}
100159da:	46c0      	nop			; (mov r8, r8)
100159dc:	10018480 	.word	0x10018480
100159e0:	100184a0 	.word	0x100184a0
100159e4:	100184c0 	.word	0x100184c0

100159e8 <puts>:
100159e8:	b510      	push	{r4, lr}
100159ea:	4b03      	ldr	r3, [pc, #12]	; (100159f8 <puts+0x10>)
100159ec:	0001      	movs	r1, r0
100159ee:	6818      	ldr	r0, [r3, #0]
100159f0:	f7ff ff98 	bl	10015924 <_puts_r>
100159f4:	bd10      	pop	{r4, pc}
100159f6:	46c0      	nop			; (mov r8, r8)
100159f8:	100185a0 	.word	0x100185a0

100159fc <rand>:
100159fc:	4b15      	ldr	r3, [pc, #84]	; (10015a54 <rand+0x58>)
100159fe:	b510      	push	{r4, lr}
10015a00:	681c      	ldr	r4, [r3, #0]
10015a02:	6ba3      	ldr	r3, [r4, #56]	; 0x38
10015a04:	2b00      	cmp	r3, #0
10015a06:	d115      	bne.n	10015a34 <rand+0x38>
10015a08:	2018      	movs	r0, #24
10015a0a:	f7ff fe97 	bl	1001573c <malloc>
10015a0e:	4b12      	ldr	r3, [pc, #72]	; (10015a58 <rand+0x5c>)
10015a10:	63a0      	str	r0, [r4, #56]	; 0x38
10015a12:	8003      	strh	r3, [r0, #0]
10015a14:	4b11      	ldr	r3, [pc, #68]	; (10015a5c <rand+0x60>)
10015a16:	2201      	movs	r2, #1
10015a18:	8043      	strh	r3, [r0, #2]
10015a1a:	4b11      	ldr	r3, [pc, #68]	; (10015a60 <rand+0x64>)
10015a1c:	8083      	strh	r3, [r0, #4]
10015a1e:	4b11      	ldr	r3, [pc, #68]	; (10015a64 <rand+0x68>)
10015a20:	80c3      	strh	r3, [r0, #6]
10015a22:	4b11      	ldr	r3, [pc, #68]	; (10015a68 <rand+0x6c>)
10015a24:	8103      	strh	r3, [r0, #8]
10015a26:	2305      	movs	r3, #5
10015a28:	8143      	strh	r3, [r0, #10]
10015a2a:	3306      	adds	r3, #6
10015a2c:	8183      	strh	r3, [r0, #12]
10015a2e:	2300      	movs	r3, #0
10015a30:	6102      	str	r2, [r0, #16]
10015a32:	6143      	str	r3, [r0, #20]
10015a34:	6ba4      	ldr	r4, [r4, #56]	; 0x38
10015a36:	4a0d      	ldr	r2, [pc, #52]	; (10015a6c <rand+0x70>)
10015a38:	6920      	ldr	r0, [r4, #16]
10015a3a:	6961      	ldr	r1, [r4, #20]
10015a3c:	4b0c      	ldr	r3, [pc, #48]	; (10015a70 <rand+0x74>)
10015a3e:	f7fd f9f7 	bl	10012e30 <__aeabi_lmul>
10015a42:	2201      	movs	r2, #1
10015a44:	2300      	movs	r3, #0
10015a46:	1880      	adds	r0, r0, r2
10015a48:	4159      	adcs	r1, r3
10015a4a:	6120      	str	r0, [r4, #16]
10015a4c:	6161      	str	r1, [r4, #20]
10015a4e:	0048      	lsls	r0, r1, #1
10015a50:	0840      	lsrs	r0, r0, #1
10015a52:	bd10      	pop	{r4, pc}
10015a54:	100185a0 	.word	0x100185a0
10015a58:	0000330e 	.word	0x0000330e
10015a5c:	ffffabcd 	.word	0xffffabcd
10015a60:	00001234 	.word	0x00001234
10015a64:	ffffe66d 	.word	0xffffe66d
10015a68:	ffffdeec 	.word	0xffffdeec
10015a6c:	4c957f2d 	.word	0x4c957f2d
10015a70:	5851f42d 	.word	0x5851f42d

10015a74 <_sbrk_r>:
10015a74:	2300      	movs	r3, #0
10015a76:	b570      	push	{r4, r5, r6, lr}
10015a78:	4c06      	ldr	r4, [pc, #24]	; (10015a94 <_sbrk_r+0x20>)
10015a7a:	0005      	movs	r5, r0
10015a7c:	0008      	movs	r0, r1
10015a7e:	6023      	str	r3, [r4, #0]
10015a80:	f7f2 fcbc 	bl	100083fc <_sbrk>
10015a84:	1c43      	adds	r3, r0, #1
10015a86:	d103      	bne.n	10015a90 <_sbrk_r+0x1c>
10015a88:	6823      	ldr	r3, [r4, #0]
10015a8a:	2b00      	cmp	r3, #0
10015a8c:	d000      	beq.n	10015a90 <_sbrk_r+0x1c>
10015a8e:	602b      	str	r3, [r5, #0]
10015a90:	bd70      	pop	{r4, r5, r6, pc}
10015a92:	46c0      	nop			; (mov r8, r8)
10015a94:	1001b490 	.word	0x1001b490

10015a98 <setbuf>:
10015a98:	424a      	negs	r2, r1
10015a9a:	414a      	adcs	r2, r1
10015a9c:	2380      	movs	r3, #128	; 0x80
10015a9e:	b510      	push	{r4, lr}
10015aa0:	0052      	lsls	r2, r2, #1
10015aa2:	00db      	lsls	r3, r3, #3
10015aa4:	f000 f802 	bl	10015aac <setvbuf>
10015aa8:	bd10      	pop	{r4, pc}
	...

10015aac <setvbuf>:
10015aac:	b5f0      	push	{r4, r5, r6, r7, lr}
10015aae:	001d      	movs	r5, r3
10015ab0:	4b51      	ldr	r3, [pc, #324]	; (10015bf8 <setvbuf+0x14c>)
10015ab2:	b085      	sub	sp, #20
10015ab4:	681e      	ldr	r6, [r3, #0]
10015ab6:	0004      	movs	r4, r0
10015ab8:	000f      	movs	r7, r1
10015aba:	9200      	str	r2, [sp, #0]
10015abc:	2e00      	cmp	r6, #0
10015abe:	d005      	beq.n	10015acc <setvbuf+0x20>
10015ac0:	69b3      	ldr	r3, [r6, #24]
10015ac2:	2b00      	cmp	r3, #0
10015ac4:	d102      	bne.n	10015acc <setvbuf+0x20>
10015ac6:	0030      	movs	r0, r6
10015ac8:	f000 fa62 	bl	10015f90 <__sinit>
10015acc:	4b4b      	ldr	r3, [pc, #300]	; (10015bfc <setvbuf+0x150>)
10015ace:	429c      	cmp	r4, r3
10015ad0:	d101      	bne.n	10015ad6 <setvbuf+0x2a>
10015ad2:	6874      	ldr	r4, [r6, #4]
10015ad4:	e008      	b.n	10015ae8 <setvbuf+0x3c>
10015ad6:	4b4a      	ldr	r3, [pc, #296]	; (10015c00 <setvbuf+0x154>)
10015ad8:	429c      	cmp	r4, r3
10015ada:	d101      	bne.n	10015ae0 <setvbuf+0x34>
10015adc:	68b4      	ldr	r4, [r6, #8]
10015ade:	e003      	b.n	10015ae8 <setvbuf+0x3c>
10015ae0:	4b48      	ldr	r3, [pc, #288]	; (10015c04 <setvbuf+0x158>)
10015ae2:	429c      	cmp	r4, r3
10015ae4:	d100      	bne.n	10015ae8 <setvbuf+0x3c>
10015ae6:	68f4      	ldr	r4, [r6, #12]
10015ae8:	9b00      	ldr	r3, [sp, #0]
10015aea:	2b02      	cmp	r3, #2
10015aec:	d005      	beq.n	10015afa <setvbuf+0x4e>
10015aee:	2b01      	cmp	r3, #1
10015af0:	d900      	bls.n	10015af4 <setvbuf+0x48>
10015af2:	e07c      	b.n	10015bee <setvbuf+0x142>
10015af4:	2d00      	cmp	r5, #0
10015af6:	da00      	bge.n	10015afa <setvbuf+0x4e>
10015af8:	e079      	b.n	10015bee <setvbuf+0x142>
10015afa:	0021      	movs	r1, r4
10015afc:	0030      	movs	r0, r6
10015afe:	f000 f9d9 	bl	10015eb4 <_fflush_r>
10015b02:	6b61      	ldr	r1, [r4, #52]	; 0x34
10015b04:	2900      	cmp	r1, #0
10015b06:	d008      	beq.n	10015b1a <setvbuf+0x6e>
10015b08:	0023      	movs	r3, r4
10015b0a:	3344      	adds	r3, #68	; 0x44
10015b0c:	4299      	cmp	r1, r3
10015b0e:	d002      	beq.n	10015b16 <setvbuf+0x6a>
10015b10:	0030      	movs	r0, r6
10015b12:	f7ff fe3d 	bl	10015790 <_free_r>
10015b16:	2300      	movs	r3, #0
10015b18:	6363      	str	r3, [r4, #52]	; 0x34
10015b1a:	2300      	movs	r3, #0
10015b1c:	61a3      	str	r3, [r4, #24]
10015b1e:	6063      	str	r3, [r4, #4]
10015b20:	89a3      	ldrh	r3, [r4, #12]
10015b22:	061b      	lsls	r3, r3, #24
10015b24:	d503      	bpl.n	10015b2e <setvbuf+0x82>
10015b26:	6921      	ldr	r1, [r4, #16]
10015b28:	0030      	movs	r0, r6
10015b2a:	f7ff fe31 	bl	10015790 <_free_r>
10015b2e:	89a2      	ldrh	r2, [r4, #12]
10015b30:	4b35      	ldr	r3, [pc, #212]	; (10015c08 <setvbuf+0x15c>)
10015b32:	4013      	ands	r3, r2
10015b34:	81a3      	strh	r3, [r4, #12]
10015b36:	9b00      	ldr	r3, [sp, #0]
10015b38:	2b02      	cmp	r3, #2
10015b3a:	d021      	beq.n	10015b80 <setvbuf+0xd4>
10015b3c:	ab03      	add	r3, sp, #12
10015b3e:	aa02      	add	r2, sp, #8
10015b40:	0021      	movs	r1, r4
10015b42:	0030      	movs	r0, r6
10015b44:	f000 fab8 	bl	100160b8 <__swhatbuf_r>
10015b48:	89a3      	ldrh	r3, [r4, #12]
10015b4a:	4318      	orrs	r0, r3
10015b4c:	81a0      	strh	r0, [r4, #12]
10015b4e:	2d00      	cmp	r5, #0
10015b50:	d101      	bne.n	10015b56 <setvbuf+0xaa>
10015b52:	9d02      	ldr	r5, [sp, #8]
10015b54:	e001      	b.n	10015b5a <setvbuf+0xae>
10015b56:	2f00      	cmp	r7, #0
10015b58:	d125      	bne.n	10015ba6 <setvbuf+0xfa>
10015b5a:	0028      	movs	r0, r5
10015b5c:	f7ff fdee 	bl	1001573c <malloc>
10015b60:	9501      	str	r5, [sp, #4]
10015b62:	1e07      	subs	r7, r0, #0
10015b64:	d11a      	bne.n	10015b9c <setvbuf+0xf0>
10015b66:	9b02      	ldr	r3, [sp, #8]
10015b68:	9301      	str	r3, [sp, #4]
10015b6a:	42ab      	cmp	r3, r5
10015b6c:	d102      	bne.n	10015b74 <setvbuf+0xc8>
10015b6e:	2001      	movs	r0, #1
10015b70:	4240      	negs	r0, r0
10015b72:	e006      	b.n	10015b82 <setvbuf+0xd6>
10015b74:	9801      	ldr	r0, [sp, #4]
10015b76:	f7ff fde1 	bl	1001573c <malloc>
10015b7a:	1e07      	subs	r7, r0, #0
10015b7c:	d10e      	bne.n	10015b9c <setvbuf+0xf0>
10015b7e:	e7f6      	b.n	10015b6e <setvbuf+0xc2>
10015b80:	2000      	movs	r0, #0
10015b82:	2202      	movs	r2, #2
10015b84:	89a3      	ldrh	r3, [r4, #12]
10015b86:	4313      	orrs	r3, r2
10015b88:	81a3      	strh	r3, [r4, #12]
10015b8a:	2300      	movs	r3, #0
10015b8c:	60a3      	str	r3, [r4, #8]
10015b8e:	0023      	movs	r3, r4
10015b90:	3347      	adds	r3, #71	; 0x47
10015b92:	6023      	str	r3, [r4, #0]
10015b94:	6123      	str	r3, [r4, #16]
10015b96:	2301      	movs	r3, #1
10015b98:	6163      	str	r3, [r4, #20]
10015b9a:	e02a      	b.n	10015bf2 <setvbuf+0x146>
10015b9c:	2280      	movs	r2, #128	; 0x80
10015b9e:	89a3      	ldrh	r3, [r4, #12]
10015ba0:	9d01      	ldr	r5, [sp, #4]
10015ba2:	4313      	orrs	r3, r2
10015ba4:	81a3      	strh	r3, [r4, #12]
10015ba6:	69b3      	ldr	r3, [r6, #24]
10015ba8:	2b00      	cmp	r3, #0
10015baa:	d102      	bne.n	10015bb2 <setvbuf+0x106>
10015bac:	0030      	movs	r0, r6
10015bae:	f000 f9ef 	bl	10015f90 <__sinit>
10015bb2:	9b00      	ldr	r3, [sp, #0]
10015bb4:	2b01      	cmp	r3, #1
10015bb6:	d103      	bne.n	10015bc0 <setvbuf+0x114>
10015bb8:	89a3      	ldrh	r3, [r4, #12]
10015bba:	9a00      	ldr	r2, [sp, #0]
10015bbc:	431a      	orrs	r2, r3
10015bbe:	81a2      	strh	r2, [r4, #12]
10015bc0:	2308      	movs	r3, #8
10015bc2:	89a2      	ldrh	r2, [r4, #12]
10015bc4:	6027      	str	r7, [r4, #0]
10015bc6:	4013      	ands	r3, r2
10015bc8:	6127      	str	r7, [r4, #16]
10015bca:	6165      	str	r5, [r4, #20]
10015bcc:	1e18      	subs	r0, r3, #0
10015bce:	d00c      	beq.n	10015bea <setvbuf+0x13e>
10015bd0:	2301      	movs	r3, #1
10015bd2:	401a      	ands	r2, r3
10015bd4:	2300      	movs	r3, #0
10015bd6:	1e10      	subs	r0, r2, #0
10015bd8:	4298      	cmp	r0, r3
10015bda:	d004      	beq.n	10015be6 <setvbuf+0x13a>
10015bdc:	426d      	negs	r5, r5
10015bde:	60a3      	str	r3, [r4, #8]
10015be0:	61a5      	str	r5, [r4, #24]
10015be2:	0018      	movs	r0, r3
10015be4:	e005      	b.n	10015bf2 <setvbuf+0x146>
10015be6:	60a5      	str	r5, [r4, #8]
10015be8:	e003      	b.n	10015bf2 <setvbuf+0x146>
10015bea:	60a3      	str	r3, [r4, #8]
10015bec:	e001      	b.n	10015bf2 <setvbuf+0x146>
10015bee:	2001      	movs	r0, #1
10015bf0:	4240      	negs	r0, r0
10015bf2:	b005      	add	sp, #20
10015bf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
10015bf6:	46c0      	nop			; (mov r8, r8)
10015bf8:	100185a0 	.word	0x100185a0
10015bfc:	10018480 	.word	0x10018480
10015c00:	100184a0 	.word	0x100184a0
10015c04:	100184c0 	.word	0x100184c0
10015c08:	fffff35c 	.word	0xfffff35c

10015c0c <__swbuf_r>:
10015c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10015c0e:	0005      	movs	r5, r0
10015c10:	000f      	movs	r7, r1
10015c12:	0014      	movs	r4, r2
10015c14:	2800      	cmp	r0, #0
10015c16:	d004      	beq.n	10015c22 <__swbuf_r+0x16>
10015c18:	6983      	ldr	r3, [r0, #24]
10015c1a:	2b00      	cmp	r3, #0
10015c1c:	d101      	bne.n	10015c22 <__swbuf_r+0x16>
10015c1e:	f000 f9b7 	bl	10015f90 <__sinit>
10015c22:	4b23      	ldr	r3, [pc, #140]	; (10015cb0 <__swbuf_r+0xa4>)
10015c24:	429c      	cmp	r4, r3
10015c26:	d101      	bne.n	10015c2c <__swbuf_r+0x20>
10015c28:	686c      	ldr	r4, [r5, #4]
10015c2a:	e008      	b.n	10015c3e <__swbuf_r+0x32>
10015c2c:	4b21      	ldr	r3, [pc, #132]	; (10015cb4 <__swbuf_r+0xa8>)
10015c2e:	429c      	cmp	r4, r3
10015c30:	d101      	bne.n	10015c36 <__swbuf_r+0x2a>
10015c32:	68ac      	ldr	r4, [r5, #8]
10015c34:	e003      	b.n	10015c3e <__swbuf_r+0x32>
10015c36:	4b20      	ldr	r3, [pc, #128]	; (10015cb8 <__swbuf_r+0xac>)
10015c38:	429c      	cmp	r4, r3
10015c3a:	d100      	bne.n	10015c3e <__swbuf_r+0x32>
10015c3c:	68ec      	ldr	r4, [r5, #12]
10015c3e:	69a3      	ldr	r3, [r4, #24]
10015c40:	60a3      	str	r3, [r4, #8]
10015c42:	89a3      	ldrh	r3, [r4, #12]
10015c44:	071b      	lsls	r3, r3, #28
10015c46:	d50a      	bpl.n	10015c5e <__swbuf_r+0x52>
10015c48:	6923      	ldr	r3, [r4, #16]
10015c4a:	2b00      	cmp	r3, #0
10015c4c:	d007      	beq.n	10015c5e <__swbuf_r+0x52>
10015c4e:	6823      	ldr	r3, [r4, #0]
10015c50:	6922      	ldr	r2, [r4, #16]
10015c52:	b2fe      	uxtb	r6, r7
10015c54:	1a98      	subs	r0, r3, r2
10015c56:	6963      	ldr	r3, [r4, #20]
10015c58:	4298      	cmp	r0, r3
10015c5a:	db0f      	blt.n	10015c7c <__swbuf_r+0x70>
10015c5c:	e008      	b.n	10015c70 <__swbuf_r+0x64>
10015c5e:	0021      	movs	r1, r4
10015c60:	0028      	movs	r0, r5
10015c62:	f000 f82b 	bl	10015cbc <__swsetup_r>
10015c66:	2800      	cmp	r0, #0
10015c68:	d0f1      	beq.n	10015c4e <__swbuf_r+0x42>
10015c6a:	2001      	movs	r0, #1
10015c6c:	4240      	negs	r0, r0
10015c6e:	e01d      	b.n	10015cac <__swbuf_r+0xa0>
10015c70:	0021      	movs	r1, r4
10015c72:	0028      	movs	r0, r5
10015c74:	f000 f91e 	bl	10015eb4 <_fflush_r>
10015c78:	2800      	cmp	r0, #0
10015c7a:	d1f6      	bne.n	10015c6a <__swbuf_r+0x5e>
10015c7c:	68a3      	ldr	r3, [r4, #8]
10015c7e:	3001      	adds	r0, #1
10015c80:	3b01      	subs	r3, #1
10015c82:	60a3      	str	r3, [r4, #8]
10015c84:	6823      	ldr	r3, [r4, #0]
10015c86:	1c5a      	adds	r2, r3, #1
10015c88:	6022      	str	r2, [r4, #0]
10015c8a:	701f      	strb	r7, [r3, #0]
10015c8c:	6963      	ldr	r3, [r4, #20]
10015c8e:	4298      	cmp	r0, r3
10015c90:	d005      	beq.n	10015c9e <__swbuf_r+0x92>
10015c92:	89a3      	ldrh	r3, [r4, #12]
10015c94:	0030      	movs	r0, r6
10015c96:	07db      	lsls	r3, r3, #31
10015c98:	d508      	bpl.n	10015cac <__swbuf_r+0xa0>
10015c9a:	2e0a      	cmp	r6, #10
10015c9c:	d106      	bne.n	10015cac <__swbuf_r+0xa0>
10015c9e:	0021      	movs	r1, r4
10015ca0:	0028      	movs	r0, r5
10015ca2:	f000 f907 	bl	10015eb4 <_fflush_r>
10015ca6:	2800      	cmp	r0, #0
10015ca8:	d1df      	bne.n	10015c6a <__swbuf_r+0x5e>
10015caa:	0030      	movs	r0, r6
10015cac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10015cae:	46c0      	nop			; (mov r8, r8)
10015cb0:	10018480 	.word	0x10018480
10015cb4:	100184a0 	.word	0x100184a0
10015cb8:	100184c0 	.word	0x100184c0

10015cbc <__swsetup_r>:
10015cbc:	4b36      	ldr	r3, [pc, #216]	; (10015d98 <__swsetup_r+0xdc>)
10015cbe:	b570      	push	{r4, r5, r6, lr}
10015cc0:	681d      	ldr	r5, [r3, #0]
10015cc2:	0006      	movs	r6, r0
10015cc4:	000c      	movs	r4, r1
10015cc6:	2d00      	cmp	r5, #0
10015cc8:	d005      	beq.n	10015cd6 <__swsetup_r+0x1a>
10015cca:	69ab      	ldr	r3, [r5, #24]
10015ccc:	2b00      	cmp	r3, #0
10015cce:	d102      	bne.n	10015cd6 <__swsetup_r+0x1a>
10015cd0:	0028      	movs	r0, r5
10015cd2:	f000 f95d 	bl	10015f90 <__sinit>
10015cd6:	4b31      	ldr	r3, [pc, #196]	; (10015d9c <__swsetup_r+0xe0>)
10015cd8:	429c      	cmp	r4, r3
10015cda:	d101      	bne.n	10015ce0 <__swsetup_r+0x24>
10015cdc:	686c      	ldr	r4, [r5, #4]
10015cde:	e008      	b.n	10015cf2 <__swsetup_r+0x36>
10015ce0:	4b2f      	ldr	r3, [pc, #188]	; (10015da0 <__swsetup_r+0xe4>)
10015ce2:	429c      	cmp	r4, r3
10015ce4:	d101      	bne.n	10015cea <__swsetup_r+0x2e>
10015ce6:	68ac      	ldr	r4, [r5, #8]
10015ce8:	e003      	b.n	10015cf2 <__swsetup_r+0x36>
10015cea:	4b2e      	ldr	r3, [pc, #184]	; (10015da4 <__swsetup_r+0xe8>)
10015cec:	429c      	cmp	r4, r3
10015cee:	d100      	bne.n	10015cf2 <__swsetup_r+0x36>
10015cf0:	68ec      	ldr	r4, [r5, #12]
10015cf2:	220c      	movs	r2, #12
10015cf4:	5ea3      	ldrsh	r3, [r4, r2]
10015cf6:	b29a      	uxth	r2, r3
10015cf8:	0711      	lsls	r1, r2, #28
10015cfa:	d423      	bmi.n	10015d44 <__swsetup_r+0x88>
10015cfc:	06d1      	lsls	r1, r2, #27
10015cfe:	d407      	bmi.n	10015d10 <__swsetup_r+0x54>
10015d00:	2209      	movs	r2, #9
10015d02:	2001      	movs	r0, #1
10015d04:	6032      	str	r2, [r6, #0]
10015d06:	3237      	adds	r2, #55	; 0x37
10015d08:	4313      	orrs	r3, r2
10015d0a:	81a3      	strh	r3, [r4, #12]
10015d0c:	4240      	negs	r0, r0
10015d0e:	e042      	b.n	10015d96 <__swsetup_r+0xda>
10015d10:	0753      	lsls	r3, r2, #29
10015d12:	d513      	bpl.n	10015d3c <__swsetup_r+0x80>
10015d14:	6b61      	ldr	r1, [r4, #52]	; 0x34
10015d16:	2900      	cmp	r1, #0
10015d18:	d008      	beq.n	10015d2c <__swsetup_r+0x70>
10015d1a:	0023      	movs	r3, r4
10015d1c:	3344      	adds	r3, #68	; 0x44
10015d1e:	4299      	cmp	r1, r3
10015d20:	d002      	beq.n	10015d28 <__swsetup_r+0x6c>
10015d22:	0030      	movs	r0, r6
10015d24:	f7ff fd34 	bl	10015790 <_free_r>
10015d28:	2300      	movs	r3, #0
10015d2a:	6363      	str	r3, [r4, #52]	; 0x34
10015d2c:	2224      	movs	r2, #36	; 0x24
10015d2e:	89a3      	ldrh	r3, [r4, #12]
10015d30:	4393      	bics	r3, r2
10015d32:	81a3      	strh	r3, [r4, #12]
10015d34:	2300      	movs	r3, #0
10015d36:	6063      	str	r3, [r4, #4]
10015d38:	6923      	ldr	r3, [r4, #16]
10015d3a:	6023      	str	r3, [r4, #0]
10015d3c:	2208      	movs	r2, #8
10015d3e:	89a3      	ldrh	r3, [r4, #12]
10015d40:	4313      	orrs	r3, r2
10015d42:	81a3      	strh	r3, [r4, #12]
10015d44:	6923      	ldr	r3, [r4, #16]
10015d46:	2b00      	cmp	r3, #0
10015d48:	d10b      	bne.n	10015d62 <__swsetup_r+0xa6>
10015d4a:	23a0      	movs	r3, #160	; 0xa0
10015d4c:	89a2      	ldrh	r2, [r4, #12]
10015d4e:	009b      	lsls	r3, r3, #2
10015d50:	4013      	ands	r3, r2
10015d52:	2280      	movs	r2, #128	; 0x80
10015d54:	0092      	lsls	r2, r2, #2
10015d56:	4293      	cmp	r3, r2
10015d58:	d003      	beq.n	10015d62 <__swsetup_r+0xa6>
10015d5a:	0021      	movs	r1, r4
10015d5c:	0030      	movs	r0, r6
10015d5e:	f000 f9d1 	bl	10016104 <__smakebuf_r>
10015d62:	2301      	movs	r3, #1
10015d64:	89a2      	ldrh	r2, [r4, #12]
10015d66:	4013      	ands	r3, r2
10015d68:	d005      	beq.n	10015d76 <__swsetup_r+0xba>
10015d6a:	2300      	movs	r3, #0
10015d6c:	60a3      	str	r3, [r4, #8]
10015d6e:	6963      	ldr	r3, [r4, #20]
10015d70:	425b      	negs	r3, r3
10015d72:	61a3      	str	r3, [r4, #24]
10015d74:	e003      	b.n	10015d7e <__swsetup_r+0xc2>
10015d76:	0792      	lsls	r2, r2, #30
10015d78:	d400      	bmi.n	10015d7c <__swsetup_r+0xc0>
10015d7a:	6963      	ldr	r3, [r4, #20]
10015d7c:	60a3      	str	r3, [r4, #8]
10015d7e:	2000      	movs	r0, #0
10015d80:	6923      	ldr	r3, [r4, #16]
10015d82:	4283      	cmp	r3, r0
10015d84:	d107      	bne.n	10015d96 <__swsetup_r+0xda>
10015d86:	220c      	movs	r2, #12
10015d88:	5ea3      	ldrsh	r3, [r4, r2]
10015d8a:	061a      	lsls	r2, r3, #24
10015d8c:	d503      	bpl.n	10015d96 <__swsetup_r+0xda>
10015d8e:	2240      	movs	r2, #64	; 0x40
10015d90:	4313      	orrs	r3, r2
10015d92:	81a3      	strh	r3, [r4, #12]
10015d94:	3801      	subs	r0, #1
10015d96:	bd70      	pop	{r4, r5, r6, pc}
10015d98:	100185a0 	.word	0x100185a0
10015d9c:	10018480 	.word	0x10018480
10015da0:	100184a0 	.word	0x100184a0
10015da4:	100184c0 	.word	0x100184c0

10015da8 <__sflush_r>:
10015da8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10015daa:	898a      	ldrh	r2, [r1, #12]
10015dac:	0005      	movs	r5, r0
10015dae:	000c      	movs	r4, r1
10015db0:	0713      	lsls	r3, r2, #28
10015db2:	d45a      	bmi.n	10015e6a <__sflush_r+0xc2>
10015db4:	684b      	ldr	r3, [r1, #4]
10015db6:	2b00      	cmp	r3, #0
10015db8:	dc02      	bgt.n	10015dc0 <__sflush_r+0x18>
10015dba:	6c0b      	ldr	r3, [r1, #64]	; 0x40
10015dbc:	2b00      	cmp	r3, #0
10015dbe:	dd19      	ble.n	10015df4 <__sflush_r+0x4c>
10015dc0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
10015dc2:	2f00      	cmp	r7, #0
10015dc4:	d016      	beq.n	10015df4 <__sflush_r+0x4c>
10015dc6:	2300      	movs	r3, #0
10015dc8:	682e      	ldr	r6, [r5, #0]
10015dca:	602b      	str	r3, [r5, #0]
10015dcc:	2380      	movs	r3, #128	; 0x80
10015dce:	015b      	lsls	r3, r3, #5
10015dd0:	401a      	ands	r2, r3
10015dd2:	d001      	beq.n	10015dd8 <__sflush_r+0x30>
10015dd4:	6d60      	ldr	r0, [r4, #84]	; 0x54
10015dd6:	e014      	b.n	10015e02 <__sflush_r+0x5a>
10015dd8:	2301      	movs	r3, #1
10015dda:	6a21      	ldr	r1, [r4, #32]
10015ddc:	0028      	movs	r0, r5
10015dde:	47b8      	blx	r7
10015de0:	1c43      	adds	r3, r0, #1
10015de2:	d10e      	bne.n	10015e02 <__sflush_r+0x5a>
10015de4:	682b      	ldr	r3, [r5, #0]
10015de6:	2b00      	cmp	r3, #0
10015de8:	d00b      	beq.n	10015e02 <__sflush_r+0x5a>
10015dea:	2b1d      	cmp	r3, #29
10015dec:	d001      	beq.n	10015df2 <__sflush_r+0x4a>
10015dee:	2b16      	cmp	r3, #22
10015df0:	d102      	bne.n	10015df8 <__sflush_r+0x50>
10015df2:	602e      	str	r6, [r5, #0]
10015df4:	2000      	movs	r0, #0
10015df6:	e05a      	b.n	10015eae <__sflush_r+0x106>
10015df8:	2240      	movs	r2, #64	; 0x40
10015dfa:	89a3      	ldrh	r3, [r4, #12]
10015dfc:	4313      	orrs	r3, r2
10015dfe:	81a3      	strh	r3, [r4, #12]
10015e00:	e055      	b.n	10015eae <__sflush_r+0x106>
10015e02:	89a3      	ldrh	r3, [r4, #12]
10015e04:	075b      	lsls	r3, r3, #29
10015e06:	d506      	bpl.n	10015e16 <__sflush_r+0x6e>
10015e08:	6863      	ldr	r3, [r4, #4]
10015e0a:	1ac0      	subs	r0, r0, r3
10015e0c:	6b63      	ldr	r3, [r4, #52]	; 0x34
10015e0e:	2b00      	cmp	r3, #0
10015e10:	d001      	beq.n	10015e16 <__sflush_r+0x6e>
10015e12:	6c23      	ldr	r3, [r4, #64]	; 0x40
10015e14:	1ac0      	subs	r0, r0, r3
10015e16:	2300      	movs	r3, #0
10015e18:	0002      	movs	r2, r0
10015e1a:	6a21      	ldr	r1, [r4, #32]
10015e1c:	0028      	movs	r0, r5
10015e1e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
10015e20:	47b8      	blx	r7
10015e22:	89a3      	ldrh	r3, [r4, #12]
10015e24:	1c42      	adds	r2, r0, #1
10015e26:	d106      	bne.n	10015e36 <__sflush_r+0x8e>
10015e28:	6829      	ldr	r1, [r5, #0]
10015e2a:	291d      	cmp	r1, #29
10015e2c:	d83a      	bhi.n	10015ea4 <__sflush_r+0xfc>
10015e2e:	4a20      	ldr	r2, [pc, #128]	; (10015eb0 <__sflush_r+0x108>)
10015e30:	40ca      	lsrs	r2, r1
10015e32:	07d2      	lsls	r2, r2, #31
10015e34:	d536      	bpl.n	10015ea4 <__sflush_r+0xfc>
10015e36:	2200      	movs	r2, #0
10015e38:	6062      	str	r2, [r4, #4]
10015e3a:	6922      	ldr	r2, [r4, #16]
10015e3c:	6022      	str	r2, [r4, #0]
10015e3e:	04db      	lsls	r3, r3, #19
10015e40:	d505      	bpl.n	10015e4e <__sflush_r+0xa6>
10015e42:	1c43      	adds	r3, r0, #1
10015e44:	d102      	bne.n	10015e4c <__sflush_r+0xa4>
10015e46:	682b      	ldr	r3, [r5, #0]
10015e48:	2b00      	cmp	r3, #0
10015e4a:	d100      	bne.n	10015e4e <__sflush_r+0xa6>
10015e4c:	6560      	str	r0, [r4, #84]	; 0x54
10015e4e:	6b61      	ldr	r1, [r4, #52]	; 0x34
10015e50:	602e      	str	r6, [r5, #0]
10015e52:	2900      	cmp	r1, #0
10015e54:	d0ce      	beq.n	10015df4 <__sflush_r+0x4c>
10015e56:	0023      	movs	r3, r4
10015e58:	3344      	adds	r3, #68	; 0x44
10015e5a:	4299      	cmp	r1, r3
10015e5c:	d002      	beq.n	10015e64 <__sflush_r+0xbc>
10015e5e:	0028      	movs	r0, r5
10015e60:	f7ff fc96 	bl	10015790 <_free_r>
10015e64:	2000      	movs	r0, #0
10015e66:	6360      	str	r0, [r4, #52]	; 0x34
10015e68:	e021      	b.n	10015eae <__sflush_r+0x106>
10015e6a:	690f      	ldr	r7, [r1, #16]
10015e6c:	2f00      	cmp	r7, #0
10015e6e:	d0c1      	beq.n	10015df4 <__sflush_r+0x4c>
10015e70:	680b      	ldr	r3, [r1, #0]
10015e72:	600f      	str	r7, [r1, #0]
10015e74:	1bdb      	subs	r3, r3, r7
10015e76:	9301      	str	r3, [sp, #4]
10015e78:	2300      	movs	r3, #0
10015e7a:	0792      	lsls	r2, r2, #30
10015e7c:	d100      	bne.n	10015e80 <__sflush_r+0xd8>
10015e7e:	694b      	ldr	r3, [r1, #20]
10015e80:	60a3      	str	r3, [r4, #8]
10015e82:	e003      	b.n	10015e8c <__sflush_r+0xe4>
10015e84:	9b01      	ldr	r3, [sp, #4]
10015e86:	183f      	adds	r7, r7, r0
10015e88:	1a1b      	subs	r3, r3, r0
10015e8a:	9301      	str	r3, [sp, #4]
10015e8c:	9b01      	ldr	r3, [sp, #4]
10015e8e:	2b00      	cmp	r3, #0
10015e90:	ddb0      	ble.n	10015df4 <__sflush_r+0x4c>
10015e92:	9b01      	ldr	r3, [sp, #4]
10015e94:	003a      	movs	r2, r7
10015e96:	6a21      	ldr	r1, [r4, #32]
10015e98:	0028      	movs	r0, r5
10015e9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
10015e9c:	47b0      	blx	r6
10015e9e:	2800      	cmp	r0, #0
10015ea0:	dcf0      	bgt.n	10015e84 <__sflush_r+0xdc>
10015ea2:	89a3      	ldrh	r3, [r4, #12]
10015ea4:	2240      	movs	r2, #64	; 0x40
10015ea6:	2001      	movs	r0, #1
10015ea8:	4313      	orrs	r3, r2
10015eaa:	81a3      	strh	r3, [r4, #12]
10015eac:	4240      	negs	r0, r0
10015eae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10015eb0:	20400001 	.word	0x20400001

10015eb4 <_fflush_r>:
10015eb4:	690b      	ldr	r3, [r1, #16]
10015eb6:	b570      	push	{r4, r5, r6, lr}
10015eb8:	0005      	movs	r5, r0
10015eba:	000c      	movs	r4, r1
10015ebc:	2b00      	cmp	r3, #0
10015ebe:	d101      	bne.n	10015ec4 <_fflush_r+0x10>
10015ec0:	2000      	movs	r0, #0
10015ec2:	e01c      	b.n	10015efe <_fflush_r+0x4a>
10015ec4:	2800      	cmp	r0, #0
10015ec6:	d004      	beq.n	10015ed2 <_fflush_r+0x1e>
10015ec8:	6983      	ldr	r3, [r0, #24]
10015eca:	2b00      	cmp	r3, #0
10015ecc:	d101      	bne.n	10015ed2 <_fflush_r+0x1e>
10015ece:	f000 f85f 	bl	10015f90 <__sinit>
10015ed2:	4b0b      	ldr	r3, [pc, #44]	; (10015f00 <_fflush_r+0x4c>)
10015ed4:	429c      	cmp	r4, r3
10015ed6:	d101      	bne.n	10015edc <_fflush_r+0x28>
10015ed8:	686c      	ldr	r4, [r5, #4]
10015eda:	e008      	b.n	10015eee <_fflush_r+0x3a>
10015edc:	4b09      	ldr	r3, [pc, #36]	; (10015f04 <_fflush_r+0x50>)
10015ede:	429c      	cmp	r4, r3
10015ee0:	d101      	bne.n	10015ee6 <_fflush_r+0x32>
10015ee2:	68ac      	ldr	r4, [r5, #8]
10015ee4:	e003      	b.n	10015eee <_fflush_r+0x3a>
10015ee6:	4b08      	ldr	r3, [pc, #32]	; (10015f08 <_fflush_r+0x54>)
10015ee8:	429c      	cmp	r4, r3
10015eea:	d100      	bne.n	10015eee <_fflush_r+0x3a>
10015eec:	68ec      	ldr	r4, [r5, #12]
10015eee:	220c      	movs	r2, #12
10015ef0:	5ea3      	ldrsh	r3, [r4, r2]
10015ef2:	2b00      	cmp	r3, #0
10015ef4:	d0e4      	beq.n	10015ec0 <_fflush_r+0xc>
10015ef6:	0021      	movs	r1, r4
10015ef8:	0028      	movs	r0, r5
10015efa:	f7ff ff55 	bl	10015da8 <__sflush_r>
10015efe:	bd70      	pop	{r4, r5, r6, pc}
10015f00:	10018480 	.word	0x10018480
10015f04:	100184a0 	.word	0x100184a0
10015f08:	100184c0 	.word	0x100184c0

10015f0c <_cleanup_r>:
10015f0c:	b510      	push	{r4, lr}
10015f0e:	4902      	ldr	r1, [pc, #8]	; (10015f18 <_cleanup_r+0xc>)
10015f10:	f000 f8b0 	bl	10016074 <_fwalk_reent>
10015f14:	bd10      	pop	{r4, pc}
10015f16:	46c0      	nop			; (mov r8, r8)
10015f18:	10015eb5 	.word	0x10015eb5

10015f1c <std.isra.0>:
10015f1c:	2300      	movs	r3, #0
10015f1e:	b510      	push	{r4, lr}
10015f20:	0004      	movs	r4, r0
10015f22:	6003      	str	r3, [r0, #0]
10015f24:	6043      	str	r3, [r0, #4]
10015f26:	6083      	str	r3, [r0, #8]
10015f28:	8181      	strh	r1, [r0, #12]
10015f2a:	6643      	str	r3, [r0, #100]	; 0x64
10015f2c:	81c2      	strh	r2, [r0, #14]
10015f2e:	6103      	str	r3, [r0, #16]
10015f30:	6143      	str	r3, [r0, #20]
10015f32:	6183      	str	r3, [r0, #24]
10015f34:	0019      	movs	r1, r3
10015f36:	2208      	movs	r2, #8
10015f38:	305c      	adds	r0, #92	; 0x5c
10015f3a:	f7ff fc21 	bl	10015780 <memset>
10015f3e:	4b05      	ldr	r3, [pc, #20]	; (10015f54 <std.isra.0+0x38>)
10015f40:	6224      	str	r4, [r4, #32]
10015f42:	6263      	str	r3, [r4, #36]	; 0x24
10015f44:	4b04      	ldr	r3, [pc, #16]	; (10015f58 <std.isra.0+0x3c>)
10015f46:	62a3      	str	r3, [r4, #40]	; 0x28
10015f48:	4b04      	ldr	r3, [pc, #16]	; (10015f5c <std.isra.0+0x40>)
10015f4a:	62e3      	str	r3, [r4, #44]	; 0x2c
10015f4c:	4b04      	ldr	r3, [pc, #16]	; (10015f60 <std.isra.0+0x44>)
10015f4e:	6323      	str	r3, [r4, #48]	; 0x30
10015f50:	bd10      	pop	{r4, pc}
10015f52:	46c0      	nop			; (mov r8, r8)
10015f54:	10016795 	.word	0x10016795
10015f58:	100167bd 	.word	0x100167bd
10015f5c:	100167f5 	.word	0x100167f5
10015f60:	10016821 	.word	0x10016821

10015f64 <__sfmoreglue>:
10015f64:	b570      	push	{r4, r5, r6, lr}
10015f66:	2568      	movs	r5, #104	; 0x68
10015f68:	1e4b      	subs	r3, r1, #1
10015f6a:	435d      	muls	r5, r3
10015f6c:	000e      	movs	r6, r1
10015f6e:	0029      	movs	r1, r5
10015f70:	3174      	adds	r1, #116	; 0x74
10015f72:	f7ff fc53 	bl	1001581c <_malloc_r>
10015f76:	1e04      	subs	r4, r0, #0
10015f78:	d008      	beq.n	10015f8c <__sfmoreglue+0x28>
10015f7a:	2100      	movs	r1, #0
10015f7c:	002a      	movs	r2, r5
10015f7e:	6001      	str	r1, [r0, #0]
10015f80:	6046      	str	r6, [r0, #4]
10015f82:	300c      	adds	r0, #12
10015f84:	60a0      	str	r0, [r4, #8]
10015f86:	3268      	adds	r2, #104	; 0x68
10015f88:	f7ff fbfa 	bl	10015780 <memset>
10015f8c:	0020      	movs	r0, r4
10015f8e:	bd70      	pop	{r4, r5, r6, pc}

10015f90 <__sinit>:
10015f90:	6983      	ldr	r3, [r0, #24]
10015f92:	b513      	push	{r0, r1, r4, lr}
10015f94:	0004      	movs	r4, r0
10015f96:	2b00      	cmp	r3, #0
10015f98:	d128      	bne.n	10015fec <__sinit+0x5c>
10015f9a:	6483      	str	r3, [r0, #72]	; 0x48
10015f9c:	64c3      	str	r3, [r0, #76]	; 0x4c
10015f9e:	6503      	str	r3, [r0, #80]	; 0x50
10015fa0:	4b13      	ldr	r3, [pc, #76]	; (10015ff0 <__sinit+0x60>)
10015fa2:	4a14      	ldr	r2, [pc, #80]	; (10015ff4 <__sinit+0x64>)
10015fa4:	681b      	ldr	r3, [r3, #0]
10015fa6:	6282      	str	r2, [r0, #40]	; 0x28
10015fa8:	9301      	str	r3, [sp, #4]
10015faa:	4298      	cmp	r0, r3
10015fac:	d101      	bne.n	10015fb2 <__sinit+0x22>
10015fae:	2301      	movs	r3, #1
10015fb0:	6183      	str	r3, [r0, #24]
10015fb2:	0020      	movs	r0, r4
10015fb4:	f000 f820 	bl	10015ff8 <__sfp>
10015fb8:	6060      	str	r0, [r4, #4]
10015fba:	0020      	movs	r0, r4
10015fbc:	f000 f81c 	bl	10015ff8 <__sfp>
10015fc0:	60a0      	str	r0, [r4, #8]
10015fc2:	0020      	movs	r0, r4
10015fc4:	f000 f818 	bl	10015ff8 <__sfp>
10015fc8:	2200      	movs	r2, #0
10015fca:	60e0      	str	r0, [r4, #12]
10015fcc:	2104      	movs	r1, #4
10015fce:	6860      	ldr	r0, [r4, #4]
10015fd0:	f7ff ffa4 	bl	10015f1c <std.isra.0>
10015fd4:	2201      	movs	r2, #1
10015fd6:	2109      	movs	r1, #9
10015fd8:	68a0      	ldr	r0, [r4, #8]
10015fda:	f7ff ff9f 	bl	10015f1c <std.isra.0>
10015fde:	2202      	movs	r2, #2
10015fe0:	2112      	movs	r1, #18
10015fe2:	68e0      	ldr	r0, [r4, #12]
10015fe4:	f7ff ff9a 	bl	10015f1c <std.isra.0>
10015fe8:	2301      	movs	r3, #1
10015fea:	61a3      	str	r3, [r4, #24]
10015fec:	bd13      	pop	{r0, r1, r4, pc}
10015fee:	46c0      	nop			; (mov r8, r8)
10015ff0:	1001847c 	.word	0x1001847c
10015ff4:	10015f0d 	.word	0x10015f0d

10015ff8 <__sfp>:
10015ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10015ffa:	4b1d      	ldr	r3, [pc, #116]	; (10016070 <__sfp+0x78>)
10015ffc:	0006      	movs	r6, r0
10015ffe:	681d      	ldr	r5, [r3, #0]
10016000:	69ab      	ldr	r3, [r5, #24]
10016002:	2b00      	cmp	r3, #0
10016004:	d102      	bne.n	1001600c <__sfp+0x14>
10016006:	0028      	movs	r0, r5
10016008:	f7ff ffc2 	bl	10015f90 <__sinit>
1001600c:	3548      	adds	r5, #72	; 0x48
1001600e:	68ac      	ldr	r4, [r5, #8]
10016010:	686b      	ldr	r3, [r5, #4]
10016012:	3b01      	subs	r3, #1
10016014:	d405      	bmi.n	10016022 <__sfp+0x2a>
10016016:	220c      	movs	r2, #12
10016018:	5ea7      	ldrsh	r7, [r4, r2]
1001601a:	2f00      	cmp	r7, #0
1001601c:	d010      	beq.n	10016040 <__sfp+0x48>
1001601e:	3468      	adds	r4, #104	; 0x68
10016020:	e7f7      	b.n	10016012 <__sfp+0x1a>
10016022:	682b      	ldr	r3, [r5, #0]
10016024:	2b00      	cmp	r3, #0
10016026:	d001      	beq.n	1001602c <__sfp+0x34>
10016028:	682d      	ldr	r5, [r5, #0]
1001602a:	e7f0      	b.n	1001600e <__sfp+0x16>
1001602c:	2104      	movs	r1, #4
1001602e:	0030      	movs	r0, r6
10016030:	f7ff ff98 	bl	10015f64 <__sfmoreglue>
10016034:	6028      	str	r0, [r5, #0]
10016036:	2800      	cmp	r0, #0
10016038:	d1f6      	bne.n	10016028 <__sfp+0x30>
1001603a:	230c      	movs	r3, #12
1001603c:	6033      	str	r3, [r6, #0]
1001603e:	e016      	b.n	1001606e <__sfp+0x76>
10016040:	2301      	movs	r3, #1
10016042:	0020      	movs	r0, r4
10016044:	425b      	negs	r3, r3
10016046:	81e3      	strh	r3, [r4, #14]
10016048:	3302      	adds	r3, #2
1001604a:	81a3      	strh	r3, [r4, #12]
1001604c:	6667      	str	r7, [r4, #100]	; 0x64
1001604e:	6027      	str	r7, [r4, #0]
10016050:	60a7      	str	r7, [r4, #8]
10016052:	6067      	str	r7, [r4, #4]
10016054:	6127      	str	r7, [r4, #16]
10016056:	6167      	str	r7, [r4, #20]
10016058:	61a7      	str	r7, [r4, #24]
1001605a:	305c      	adds	r0, #92	; 0x5c
1001605c:	2208      	movs	r2, #8
1001605e:	0039      	movs	r1, r7
10016060:	f7ff fb8e 	bl	10015780 <memset>
10016064:	0020      	movs	r0, r4
10016066:	6367      	str	r7, [r4, #52]	; 0x34
10016068:	63a7      	str	r7, [r4, #56]	; 0x38
1001606a:	64a7      	str	r7, [r4, #72]	; 0x48
1001606c:	64e7      	str	r7, [r4, #76]	; 0x4c
1001606e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10016070:	1001847c 	.word	0x1001847c

10016074 <_fwalk_reent>:
10016074:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10016076:	0004      	movs	r4, r0
10016078:	0007      	movs	r7, r0
1001607a:	2600      	movs	r6, #0
1001607c:	9101      	str	r1, [sp, #4]
1001607e:	3448      	adds	r4, #72	; 0x48
10016080:	2c00      	cmp	r4, #0
10016082:	d016      	beq.n	100160b2 <_fwalk_reent+0x3e>
10016084:	6863      	ldr	r3, [r4, #4]
10016086:	68a5      	ldr	r5, [r4, #8]
10016088:	9300      	str	r3, [sp, #0]
1001608a:	9b00      	ldr	r3, [sp, #0]
1001608c:	3b01      	subs	r3, #1
1001608e:	9300      	str	r3, [sp, #0]
10016090:	d40d      	bmi.n	100160ae <_fwalk_reent+0x3a>
10016092:	89ab      	ldrh	r3, [r5, #12]
10016094:	2b01      	cmp	r3, #1
10016096:	d908      	bls.n	100160aa <_fwalk_reent+0x36>
10016098:	220e      	movs	r2, #14
1001609a:	5eab      	ldrsh	r3, [r5, r2]
1001609c:	3301      	adds	r3, #1
1001609e:	d004      	beq.n	100160aa <_fwalk_reent+0x36>
100160a0:	0029      	movs	r1, r5
100160a2:	0038      	movs	r0, r7
100160a4:	9b01      	ldr	r3, [sp, #4]
100160a6:	4798      	blx	r3
100160a8:	4306      	orrs	r6, r0
100160aa:	3568      	adds	r5, #104	; 0x68
100160ac:	e7ed      	b.n	1001608a <_fwalk_reent+0x16>
100160ae:	6824      	ldr	r4, [r4, #0]
100160b0:	e7e6      	b.n	10016080 <_fwalk_reent+0xc>
100160b2:	0030      	movs	r0, r6
100160b4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

100160b8 <__swhatbuf_r>:
100160b8:	b570      	push	{r4, r5, r6, lr}
100160ba:	000e      	movs	r6, r1
100160bc:	001d      	movs	r5, r3
100160be:	230e      	movs	r3, #14
100160c0:	5ec9      	ldrsh	r1, [r1, r3]
100160c2:	b090      	sub	sp, #64	; 0x40
100160c4:	0014      	movs	r4, r2
100160c6:	2900      	cmp	r1, #0
100160c8:	da06      	bge.n	100160d8 <__swhatbuf_r+0x20>
100160ca:	2300      	movs	r3, #0
100160cc:	602b      	str	r3, [r5, #0]
100160ce:	89b3      	ldrh	r3, [r6, #12]
100160d0:	061b      	lsls	r3, r3, #24
100160d2:	d50f      	bpl.n	100160f4 <__swhatbuf_r+0x3c>
100160d4:	2340      	movs	r3, #64	; 0x40
100160d6:	e00f      	b.n	100160f8 <__swhatbuf_r+0x40>
100160d8:	aa01      	add	r2, sp, #4
100160da:	f000 fbcd 	bl	10016878 <_fstat_r>
100160de:	2800      	cmp	r0, #0
100160e0:	dbf3      	blt.n	100160ca <__swhatbuf_r+0x12>
100160e2:	23f0      	movs	r3, #240	; 0xf0
100160e4:	9a02      	ldr	r2, [sp, #8]
100160e6:	021b      	lsls	r3, r3, #8
100160e8:	4013      	ands	r3, r2
100160ea:	4a05      	ldr	r2, [pc, #20]	; (10016100 <__swhatbuf_r+0x48>)
100160ec:	189b      	adds	r3, r3, r2
100160ee:	425a      	negs	r2, r3
100160f0:	4153      	adcs	r3, r2
100160f2:	602b      	str	r3, [r5, #0]
100160f4:	2380      	movs	r3, #128	; 0x80
100160f6:	00db      	lsls	r3, r3, #3
100160f8:	2000      	movs	r0, #0
100160fa:	6023      	str	r3, [r4, #0]
100160fc:	b010      	add	sp, #64	; 0x40
100160fe:	bd70      	pop	{r4, r5, r6, pc}
10016100:	ffffe000 	.word	0xffffe000

10016104 <__smakebuf_r>:
10016104:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10016106:	2602      	movs	r6, #2
10016108:	898b      	ldrh	r3, [r1, #12]
1001610a:	0005      	movs	r5, r0
1001610c:	000c      	movs	r4, r1
1001610e:	4233      	tst	r3, r6
10016110:	d110      	bne.n	10016134 <__smakebuf_r+0x30>
10016112:	ab01      	add	r3, sp, #4
10016114:	466a      	mov	r2, sp
10016116:	f7ff ffcf 	bl	100160b8 <__swhatbuf_r>
1001611a:	9900      	ldr	r1, [sp, #0]
1001611c:	0007      	movs	r7, r0
1001611e:	0028      	movs	r0, r5
10016120:	f7ff fb7c 	bl	1001581c <_malloc_r>
10016124:	2800      	cmp	r0, #0
10016126:	d10c      	bne.n	10016142 <__smakebuf_r+0x3e>
10016128:	220c      	movs	r2, #12
1001612a:	5ea3      	ldrsh	r3, [r4, r2]
1001612c:	059a      	lsls	r2, r3, #22
1001612e:	d423      	bmi.n	10016178 <__smakebuf_r+0x74>
10016130:	4333      	orrs	r3, r6
10016132:	81a3      	strh	r3, [r4, #12]
10016134:	0023      	movs	r3, r4
10016136:	3347      	adds	r3, #71	; 0x47
10016138:	6023      	str	r3, [r4, #0]
1001613a:	6123      	str	r3, [r4, #16]
1001613c:	2301      	movs	r3, #1
1001613e:	6163      	str	r3, [r4, #20]
10016140:	e01a      	b.n	10016178 <__smakebuf_r+0x74>
10016142:	2280      	movs	r2, #128	; 0x80
10016144:	4b0d      	ldr	r3, [pc, #52]	; (1001617c <__smakebuf_r+0x78>)
10016146:	62ab      	str	r3, [r5, #40]	; 0x28
10016148:	89a3      	ldrh	r3, [r4, #12]
1001614a:	6020      	str	r0, [r4, #0]
1001614c:	4313      	orrs	r3, r2
1001614e:	81a3      	strh	r3, [r4, #12]
10016150:	9b00      	ldr	r3, [sp, #0]
10016152:	6120      	str	r0, [r4, #16]
10016154:	6163      	str	r3, [r4, #20]
10016156:	9b01      	ldr	r3, [sp, #4]
10016158:	2b00      	cmp	r3, #0
1001615a:	d00a      	beq.n	10016172 <__smakebuf_r+0x6e>
1001615c:	230e      	movs	r3, #14
1001615e:	5ee1      	ldrsh	r1, [r4, r3]
10016160:	0028      	movs	r0, r5
10016162:	f000 fb9b 	bl	1001689c <_isatty_r>
10016166:	2800      	cmp	r0, #0
10016168:	d003      	beq.n	10016172 <__smakebuf_r+0x6e>
1001616a:	2201      	movs	r2, #1
1001616c:	89a3      	ldrh	r3, [r4, #12]
1001616e:	4313      	orrs	r3, r2
10016170:	81a3      	strh	r3, [r4, #12]
10016172:	89a3      	ldrh	r3, [r4, #12]
10016174:	431f      	orrs	r7, r3
10016176:	81a7      	strh	r7, [r4, #12]
10016178:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1001617a:	46c0      	nop			; (mov r8, r8)
1001617c:	10015f0d 	.word	0x10015f0d

10016180 <__sfputc_r>:
10016180:	6893      	ldr	r3, [r2, #8]
10016182:	b510      	push	{r4, lr}
10016184:	3b01      	subs	r3, #1
10016186:	6093      	str	r3, [r2, #8]
10016188:	2b00      	cmp	r3, #0
1001618a:	da05      	bge.n	10016198 <__sfputc_r+0x18>
1001618c:	6994      	ldr	r4, [r2, #24]
1001618e:	42a3      	cmp	r3, r4
10016190:	db08      	blt.n	100161a4 <__sfputc_r+0x24>
10016192:	b2cb      	uxtb	r3, r1
10016194:	2b0a      	cmp	r3, #10
10016196:	d005      	beq.n	100161a4 <__sfputc_r+0x24>
10016198:	6813      	ldr	r3, [r2, #0]
1001619a:	1c58      	adds	r0, r3, #1
1001619c:	6010      	str	r0, [r2, #0]
1001619e:	7019      	strb	r1, [r3, #0]
100161a0:	b2c8      	uxtb	r0, r1
100161a2:	e001      	b.n	100161a8 <__sfputc_r+0x28>
100161a4:	f7ff fd32 	bl	10015c0c <__swbuf_r>
100161a8:	bd10      	pop	{r4, pc}

100161aa <__sfputs_r>:
100161aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100161ac:	0006      	movs	r6, r0
100161ae:	000f      	movs	r7, r1
100161b0:	0014      	movs	r4, r2
100161b2:	18d5      	adds	r5, r2, r3
100161b4:	42ac      	cmp	r4, r5
100161b6:	d008      	beq.n	100161ca <__sfputs_r+0x20>
100161b8:	7821      	ldrb	r1, [r4, #0]
100161ba:	003a      	movs	r2, r7
100161bc:	0030      	movs	r0, r6
100161be:	f7ff ffdf 	bl	10016180 <__sfputc_r>
100161c2:	3401      	adds	r4, #1
100161c4:	1c43      	adds	r3, r0, #1
100161c6:	d1f5      	bne.n	100161b4 <__sfputs_r+0xa>
100161c8:	e000      	b.n	100161cc <__sfputs_r+0x22>
100161ca:	2000      	movs	r0, #0
100161cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

100161d0 <_vfiprintf_r>:
100161d0:	b5f0      	push	{r4, r5, r6, r7, lr}
100161d2:	b09f      	sub	sp, #124	; 0x7c
100161d4:	0006      	movs	r6, r0
100161d6:	000f      	movs	r7, r1
100161d8:	9202      	str	r2, [sp, #8]
100161da:	9305      	str	r3, [sp, #20]
100161dc:	2800      	cmp	r0, #0
100161de:	d004      	beq.n	100161ea <_vfiprintf_r+0x1a>
100161e0:	6983      	ldr	r3, [r0, #24]
100161e2:	2b00      	cmp	r3, #0
100161e4:	d101      	bne.n	100161ea <_vfiprintf_r+0x1a>
100161e6:	f7ff fed3 	bl	10015f90 <__sinit>
100161ea:	4b7f      	ldr	r3, [pc, #508]	; (100163e8 <_vfiprintf_r+0x218>)
100161ec:	429f      	cmp	r7, r3
100161ee:	d101      	bne.n	100161f4 <_vfiprintf_r+0x24>
100161f0:	6877      	ldr	r7, [r6, #4]
100161f2:	e008      	b.n	10016206 <_vfiprintf_r+0x36>
100161f4:	4b7d      	ldr	r3, [pc, #500]	; (100163ec <_vfiprintf_r+0x21c>)
100161f6:	429f      	cmp	r7, r3
100161f8:	d101      	bne.n	100161fe <_vfiprintf_r+0x2e>
100161fa:	68b7      	ldr	r7, [r6, #8]
100161fc:	e003      	b.n	10016206 <_vfiprintf_r+0x36>
100161fe:	4b7c      	ldr	r3, [pc, #496]	; (100163f0 <_vfiprintf_r+0x220>)
10016200:	429f      	cmp	r7, r3
10016202:	d100      	bne.n	10016206 <_vfiprintf_r+0x36>
10016204:	68f7      	ldr	r7, [r6, #12]
10016206:	89bb      	ldrh	r3, [r7, #12]
10016208:	071b      	lsls	r3, r3, #28
1001620a:	d50a      	bpl.n	10016222 <_vfiprintf_r+0x52>
1001620c:	693b      	ldr	r3, [r7, #16]
1001620e:	2b00      	cmp	r3, #0
10016210:	d007      	beq.n	10016222 <_vfiprintf_r+0x52>
10016212:	2300      	movs	r3, #0
10016214:	ad06      	add	r5, sp, #24
10016216:	616b      	str	r3, [r5, #20]
10016218:	3320      	adds	r3, #32
1001621a:	766b      	strb	r3, [r5, #25]
1001621c:	3310      	adds	r3, #16
1001621e:	76ab      	strb	r3, [r5, #26]
10016220:	e03d      	b.n	1001629e <_vfiprintf_r+0xce>
10016222:	0039      	movs	r1, r7
10016224:	0030      	movs	r0, r6
10016226:	f7ff fd49 	bl	10015cbc <__swsetup_r>
1001622a:	2800      	cmp	r0, #0
1001622c:	d0f1      	beq.n	10016212 <_vfiprintf_r+0x42>
1001622e:	2001      	movs	r0, #1
10016230:	4240      	negs	r0, r0
10016232:	e0d6      	b.n	100163e2 <_vfiprintf_r+0x212>
10016234:	9a05      	ldr	r2, [sp, #20]
10016236:	1d11      	adds	r1, r2, #4
10016238:	6812      	ldr	r2, [r2, #0]
1001623a:	9105      	str	r1, [sp, #20]
1001623c:	2a00      	cmp	r2, #0
1001623e:	da00      	bge.n	10016242 <_vfiprintf_r+0x72>
10016240:	e07f      	b.n	10016342 <_vfiprintf_r+0x172>
10016242:	9209      	str	r2, [sp, #36]	; 0x24
10016244:	3401      	adds	r4, #1
10016246:	7823      	ldrb	r3, [r4, #0]
10016248:	2b2e      	cmp	r3, #46	; 0x2e
1001624a:	d100      	bne.n	1001624e <_vfiprintf_r+0x7e>
1001624c:	e08d      	b.n	1001636a <_vfiprintf_r+0x19a>
1001624e:	7821      	ldrb	r1, [r4, #0]
10016250:	2203      	movs	r2, #3
10016252:	4868      	ldr	r0, [pc, #416]	; (100163f4 <_vfiprintf_r+0x224>)
10016254:	f000 fb48 	bl	100168e8 <memchr>
10016258:	2800      	cmp	r0, #0
1001625a:	d007      	beq.n	1001626c <_vfiprintf_r+0x9c>
1001625c:	4b65      	ldr	r3, [pc, #404]	; (100163f4 <_vfiprintf_r+0x224>)
1001625e:	682a      	ldr	r2, [r5, #0]
10016260:	1ac0      	subs	r0, r0, r3
10016262:	2340      	movs	r3, #64	; 0x40
10016264:	4083      	lsls	r3, r0
10016266:	4313      	orrs	r3, r2
10016268:	602b      	str	r3, [r5, #0]
1001626a:	3401      	adds	r4, #1
1001626c:	7821      	ldrb	r1, [r4, #0]
1001626e:	1c63      	adds	r3, r4, #1
10016270:	2206      	movs	r2, #6
10016272:	4861      	ldr	r0, [pc, #388]	; (100163f8 <_vfiprintf_r+0x228>)
10016274:	9302      	str	r3, [sp, #8]
10016276:	7629      	strb	r1, [r5, #24]
10016278:	f000 fb36 	bl	100168e8 <memchr>
1001627c:	2800      	cmp	r0, #0
1001627e:	d100      	bne.n	10016282 <_vfiprintf_r+0xb2>
10016280:	e09d      	b.n	100163be <_vfiprintf_r+0x1ee>
10016282:	4b5e      	ldr	r3, [pc, #376]	; (100163fc <_vfiprintf_r+0x22c>)
10016284:	2b00      	cmp	r3, #0
10016286:	d000      	beq.n	1001628a <_vfiprintf_r+0xba>
10016288:	e090      	b.n	100163ac <_vfiprintf_r+0x1dc>
1001628a:	2207      	movs	r2, #7
1001628c:	9b05      	ldr	r3, [sp, #20]
1001628e:	3307      	adds	r3, #7
10016290:	4393      	bics	r3, r2
10016292:	3308      	adds	r3, #8
10016294:	9305      	str	r3, [sp, #20]
10016296:	696b      	ldr	r3, [r5, #20]
10016298:	9a03      	ldr	r2, [sp, #12]
1001629a:	189b      	adds	r3, r3, r2
1001629c:	616b      	str	r3, [r5, #20]
1001629e:	9c02      	ldr	r4, [sp, #8]
100162a0:	7823      	ldrb	r3, [r4, #0]
100162a2:	2b00      	cmp	r3, #0
100162a4:	d104      	bne.n	100162b0 <_vfiprintf_r+0xe0>
100162a6:	9b02      	ldr	r3, [sp, #8]
100162a8:	1ae3      	subs	r3, r4, r3
100162aa:	9304      	str	r3, [sp, #16]
100162ac:	d012      	beq.n	100162d4 <_vfiprintf_r+0x104>
100162ae:	e003      	b.n	100162b8 <_vfiprintf_r+0xe8>
100162b0:	2b25      	cmp	r3, #37	; 0x25
100162b2:	d0f8      	beq.n	100162a6 <_vfiprintf_r+0xd6>
100162b4:	3401      	adds	r4, #1
100162b6:	e7f3      	b.n	100162a0 <_vfiprintf_r+0xd0>
100162b8:	9b04      	ldr	r3, [sp, #16]
100162ba:	9a02      	ldr	r2, [sp, #8]
100162bc:	0039      	movs	r1, r7
100162be:	0030      	movs	r0, r6
100162c0:	f7ff ff73 	bl	100161aa <__sfputs_r>
100162c4:	1c43      	adds	r3, r0, #1
100162c6:	d100      	bne.n	100162ca <_vfiprintf_r+0xfa>
100162c8:	e086      	b.n	100163d8 <_vfiprintf_r+0x208>
100162ca:	696a      	ldr	r2, [r5, #20]
100162cc:	9b04      	ldr	r3, [sp, #16]
100162ce:	4694      	mov	ip, r2
100162d0:	4463      	add	r3, ip
100162d2:	616b      	str	r3, [r5, #20]
100162d4:	7823      	ldrb	r3, [r4, #0]
100162d6:	2b00      	cmp	r3, #0
100162d8:	d07e      	beq.n	100163d8 <_vfiprintf_r+0x208>
100162da:	2201      	movs	r2, #1
100162dc:	2300      	movs	r3, #0
100162de:	4252      	negs	r2, r2
100162e0:	606a      	str	r2, [r5, #4]
100162e2:	a902      	add	r1, sp, #8
100162e4:	3254      	adds	r2, #84	; 0x54
100162e6:	1852      	adds	r2, r2, r1
100162e8:	3401      	adds	r4, #1
100162ea:	602b      	str	r3, [r5, #0]
100162ec:	60eb      	str	r3, [r5, #12]
100162ee:	60ab      	str	r3, [r5, #8]
100162f0:	7013      	strb	r3, [r2, #0]
100162f2:	65ab      	str	r3, [r5, #88]	; 0x58
100162f4:	7821      	ldrb	r1, [r4, #0]
100162f6:	2205      	movs	r2, #5
100162f8:	4841      	ldr	r0, [pc, #260]	; (10016400 <_vfiprintf_r+0x230>)
100162fa:	f000 faf5 	bl	100168e8 <memchr>
100162fe:	2800      	cmp	r0, #0
10016300:	d008      	beq.n	10016314 <_vfiprintf_r+0x144>
10016302:	4b3f      	ldr	r3, [pc, #252]	; (10016400 <_vfiprintf_r+0x230>)
10016304:	682a      	ldr	r2, [r5, #0]
10016306:	1ac0      	subs	r0, r0, r3
10016308:	2301      	movs	r3, #1
1001630a:	4083      	lsls	r3, r0
1001630c:	4313      	orrs	r3, r2
1001630e:	602b      	str	r3, [r5, #0]
10016310:	3401      	adds	r4, #1
10016312:	e7ef      	b.n	100162f4 <_vfiprintf_r+0x124>
10016314:	682b      	ldr	r3, [r5, #0]
10016316:	06da      	lsls	r2, r3, #27
10016318:	d504      	bpl.n	10016324 <_vfiprintf_r+0x154>
1001631a:	2253      	movs	r2, #83	; 0x53
1001631c:	2120      	movs	r1, #32
1001631e:	a802      	add	r0, sp, #8
10016320:	1812      	adds	r2, r2, r0
10016322:	7011      	strb	r1, [r2, #0]
10016324:	071a      	lsls	r2, r3, #28
10016326:	d504      	bpl.n	10016332 <_vfiprintf_r+0x162>
10016328:	2253      	movs	r2, #83	; 0x53
1001632a:	212b      	movs	r1, #43	; 0x2b
1001632c:	a802      	add	r0, sp, #8
1001632e:	1812      	adds	r2, r2, r0
10016330:	7011      	strb	r1, [r2, #0]
10016332:	7822      	ldrb	r2, [r4, #0]
10016334:	2a2a      	cmp	r2, #42	; 0x2a
10016336:	d100      	bne.n	1001633a <_vfiprintf_r+0x16a>
10016338:	e77c      	b.n	10016234 <_vfiprintf_r+0x64>
1001633a:	9b09      	ldr	r3, [sp, #36]	; 0x24
1001633c:	2000      	movs	r0, #0
1001633e:	210a      	movs	r1, #10
10016340:	e005      	b.n	1001634e <_vfiprintf_r+0x17e>
10016342:	4252      	negs	r2, r2
10016344:	60ea      	str	r2, [r5, #12]
10016346:	2202      	movs	r2, #2
10016348:	4313      	orrs	r3, r2
1001634a:	602b      	str	r3, [r5, #0]
1001634c:	e77a      	b.n	10016244 <_vfiprintf_r+0x74>
1001634e:	7822      	ldrb	r2, [r4, #0]
10016350:	3a30      	subs	r2, #48	; 0x30
10016352:	2a09      	cmp	r2, #9
10016354:	d804      	bhi.n	10016360 <_vfiprintf_r+0x190>
10016356:	434b      	muls	r3, r1
10016358:	3401      	adds	r4, #1
1001635a:	189b      	adds	r3, r3, r2
1001635c:	2001      	movs	r0, #1
1001635e:	e7f6      	b.n	1001634e <_vfiprintf_r+0x17e>
10016360:	2800      	cmp	r0, #0
10016362:	d100      	bne.n	10016366 <_vfiprintf_r+0x196>
10016364:	e76f      	b.n	10016246 <_vfiprintf_r+0x76>
10016366:	9309      	str	r3, [sp, #36]	; 0x24
10016368:	e76d      	b.n	10016246 <_vfiprintf_r+0x76>
1001636a:	7863      	ldrb	r3, [r4, #1]
1001636c:	2b2a      	cmp	r3, #42	; 0x2a
1001636e:	d10a      	bne.n	10016386 <_vfiprintf_r+0x1b6>
10016370:	9b05      	ldr	r3, [sp, #20]
10016372:	3402      	adds	r4, #2
10016374:	1d1a      	adds	r2, r3, #4
10016376:	681b      	ldr	r3, [r3, #0]
10016378:	9205      	str	r2, [sp, #20]
1001637a:	2b00      	cmp	r3, #0
1001637c:	da01      	bge.n	10016382 <_vfiprintf_r+0x1b2>
1001637e:	2301      	movs	r3, #1
10016380:	425b      	negs	r3, r3
10016382:	9307      	str	r3, [sp, #28]
10016384:	e763      	b.n	1001624e <_vfiprintf_r+0x7e>
10016386:	2300      	movs	r3, #0
10016388:	200a      	movs	r0, #10
1001638a:	001a      	movs	r2, r3
1001638c:	3401      	adds	r4, #1
1001638e:	606b      	str	r3, [r5, #4]
10016390:	7821      	ldrb	r1, [r4, #0]
10016392:	3930      	subs	r1, #48	; 0x30
10016394:	2909      	cmp	r1, #9
10016396:	d804      	bhi.n	100163a2 <_vfiprintf_r+0x1d2>
10016398:	4342      	muls	r2, r0
1001639a:	3401      	adds	r4, #1
1001639c:	1852      	adds	r2, r2, r1
1001639e:	2301      	movs	r3, #1
100163a0:	e7f6      	b.n	10016390 <_vfiprintf_r+0x1c0>
100163a2:	2b00      	cmp	r3, #0
100163a4:	d100      	bne.n	100163a8 <_vfiprintf_r+0x1d8>
100163a6:	e752      	b.n	1001624e <_vfiprintf_r+0x7e>
100163a8:	9207      	str	r2, [sp, #28]
100163aa:	e750      	b.n	1001624e <_vfiprintf_r+0x7e>
100163ac:	ab05      	add	r3, sp, #20
100163ae:	9300      	str	r3, [sp, #0]
100163b0:	003a      	movs	r2, r7
100163b2:	4b14      	ldr	r3, [pc, #80]	; (10016404 <_vfiprintf_r+0x234>)
100163b4:	0029      	movs	r1, r5
100163b6:	0030      	movs	r0, r6
100163b8:	e000      	b.n	100163bc <_vfiprintf_r+0x1ec>
100163ba:	bf00      	nop
100163bc:	e007      	b.n	100163ce <_vfiprintf_r+0x1fe>
100163be:	ab05      	add	r3, sp, #20
100163c0:	9300      	str	r3, [sp, #0]
100163c2:	003a      	movs	r2, r7
100163c4:	4b0f      	ldr	r3, [pc, #60]	; (10016404 <_vfiprintf_r+0x234>)
100163c6:	0029      	movs	r1, r5
100163c8:	0030      	movs	r0, r6
100163ca:	f000 f88b 	bl	100164e4 <_printf_i>
100163ce:	9003      	str	r0, [sp, #12]
100163d0:	9b03      	ldr	r3, [sp, #12]
100163d2:	3301      	adds	r3, #1
100163d4:	d000      	beq.n	100163d8 <_vfiprintf_r+0x208>
100163d6:	e75e      	b.n	10016296 <_vfiprintf_r+0xc6>
100163d8:	89bb      	ldrh	r3, [r7, #12]
100163da:	065b      	lsls	r3, r3, #25
100163dc:	d500      	bpl.n	100163e0 <_vfiprintf_r+0x210>
100163de:	e726      	b.n	1001622e <_vfiprintf_r+0x5e>
100163e0:	980b      	ldr	r0, [sp, #44]	; 0x2c
100163e2:	b01f      	add	sp, #124	; 0x7c
100163e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100163e6:	46c0      	nop			; (mov r8, r8)
100163e8:	10018480 	.word	0x10018480
100163ec:	100184a0 	.word	0x100184a0
100163f0:	100184c0 	.word	0x100184c0
100163f4:	100184e6 	.word	0x100184e6
100163f8:	100184ea 	.word	0x100184ea
100163fc:	00000000 	.word	0x00000000
10016400:	100184e0 	.word	0x100184e0
10016404:	100161ab 	.word	0x100161ab

10016408 <_printf_common>:
10016408:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001640a:	0017      	movs	r7, r2
1001640c:	9301      	str	r3, [sp, #4]
1001640e:	688a      	ldr	r2, [r1, #8]
10016410:	690b      	ldr	r3, [r1, #16]
10016412:	9000      	str	r0, [sp, #0]
10016414:	000c      	movs	r4, r1
10016416:	4293      	cmp	r3, r2
10016418:	da00      	bge.n	1001641c <_printf_common+0x14>
1001641a:	0013      	movs	r3, r2
1001641c:	0022      	movs	r2, r4
1001641e:	603b      	str	r3, [r7, #0]
10016420:	3243      	adds	r2, #67	; 0x43
10016422:	7812      	ldrb	r2, [r2, #0]
10016424:	2a00      	cmp	r2, #0
10016426:	d001      	beq.n	1001642c <_printf_common+0x24>
10016428:	3301      	adds	r3, #1
1001642a:	603b      	str	r3, [r7, #0]
1001642c:	6823      	ldr	r3, [r4, #0]
1001642e:	069b      	lsls	r3, r3, #26
10016430:	d502      	bpl.n	10016438 <_printf_common+0x30>
10016432:	683b      	ldr	r3, [r7, #0]
10016434:	3302      	adds	r3, #2
10016436:	603b      	str	r3, [r7, #0]
10016438:	2506      	movs	r5, #6
1001643a:	6823      	ldr	r3, [r4, #0]
1001643c:	401d      	ands	r5, r3
1001643e:	d01e      	beq.n	1001647e <_printf_common+0x76>
10016440:	0023      	movs	r3, r4
10016442:	3343      	adds	r3, #67	; 0x43
10016444:	781b      	ldrb	r3, [r3, #0]
10016446:	1e5a      	subs	r2, r3, #1
10016448:	4193      	sbcs	r3, r2
1001644a:	6822      	ldr	r2, [r4, #0]
1001644c:	0692      	lsls	r2, r2, #26
1001644e:	d51c      	bpl.n	1001648a <_printf_common+0x82>
10016450:	2030      	movs	r0, #48	; 0x30
10016452:	18e1      	adds	r1, r4, r3
10016454:	3143      	adds	r1, #67	; 0x43
10016456:	7008      	strb	r0, [r1, #0]
10016458:	0021      	movs	r1, r4
1001645a:	1c5a      	adds	r2, r3, #1
1001645c:	3145      	adds	r1, #69	; 0x45
1001645e:	7809      	ldrb	r1, [r1, #0]
10016460:	18a2      	adds	r2, r4, r2
10016462:	3243      	adds	r2, #67	; 0x43
10016464:	3302      	adds	r3, #2
10016466:	7011      	strb	r1, [r2, #0]
10016468:	e00f      	b.n	1001648a <_printf_common+0x82>
1001646a:	0022      	movs	r2, r4
1001646c:	2301      	movs	r3, #1
1001646e:	3219      	adds	r2, #25
10016470:	9901      	ldr	r1, [sp, #4]
10016472:	9800      	ldr	r0, [sp, #0]
10016474:	9e08      	ldr	r6, [sp, #32]
10016476:	47b0      	blx	r6
10016478:	1c43      	adds	r3, r0, #1
1001647a:	d00e      	beq.n	1001649a <_printf_common+0x92>
1001647c:	3501      	adds	r5, #1
1001647e:	68e3      	ldr	r3, [r4, #12]
10016480:	683a      	ldr	r2, [r7, #0]
10016482:	1a9b      	subs	r3, r3, r2
10016484:	429d      	cmp	r5, r3
10016486:	dbf0      	blt.n	1001646a <_printf_common+0x62>
10016488:	e7da      	b.n	10016440 <_printf_common+0x38>
1001648a:	0022      	movs	r2, r4
1001648c:	9901      	ldr	r1, [sp, #4]
1001648e:	3243      	adds	r2, #67	; 0x43
10016490:	9800      	ldr	r0, [sp, #0]
10016492:	9d08      	ldr	r5, [sp, #32]
10016494:	47a8      	blx	r5
10016496:	1c43      	adds	r3, r0, #1
10016498:	d102      	bne.n	100164a0 <_printf_common+0x98>
1001649a:	2001      	movs	r0, #1
1001649c:	4240      	negs	r0, r0
1001649e:	e020      	b.n	100164e2 <_printf_common+0xda>
100164a0:	2306      	movs	r3, #6
100164a2:	6820      	ldr	r0, [r4, #0]
100164a4:	68e1      	ldr	r1, [r4, #12]
100164a6:	683a      	ldr	r2, [r7, #0]
100164a8:	4003      	ands	r3, r0
100164aa:	2500      	movs	r5, #0
100164ac:	2b04      	cmp	r3, #4
100164ae:	d103      	bne.n	100164b8 <_printf_common+0xb0>
100164b0:	1a8d      	subs	r5, r1, r2
100164b2:	43eb      	mvns	r3, r5
100164b4:	17db      	asrs	r3, r3, #31
100164b6:	401d      	ands	r5, r3
100164b8:	68a3      	ldr	r3, [r4, #8]
100164ba:	6922      	ldr	r2, [r4, #16]
100164bc:	4293      	cmp	r3, r2
100164be:	dd01      	ble.n	100164c4 <_printf_common+0xbc>
100164c0:	1a9b      	subs	r3, r3, r2
100164c2:	18ed      	adds	r5, r5, r3
100164c4:	2700      	movs	r7, #0
100164c6:	42bd      	cmp	r5, r7
100164c8:	d00a      	beq.n	100164e0 <_printf_common+0xd8>
100164ca:	0022      	movs	r2, r4
100164cc:	2301      	movs	r3, #1
100164ce:	321a      	adds	r2, #26
100164d0:	9901      	ldr	r1, [sp, #4]
100164d2:	9800      	ldr	r0, [sp, #0]
100164d4:	9e08      	ldr	r6, [sp, #32]
100164d6:	47b0      	blx	r6
100164d8:	1c43      	adds	r3, r0, #1
100164da:	d0de      	beq.n	1001649a <_printf_common+0x92>
100164dc:	3701      	adds	r7, #1
100164de:	e7f2      	b.n	100164c6 <_printf_common+0xbe>
100164e0:	2000      	movs	r0, #0
100164e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

100164e4 <_printf_i>:
100164e4:	b5f0      	push	{r4, r5, r6, r7, lr}
100164e6:	b08b      	sub	sp, #44	; 0x2c
100164e8:	9206      	str	r2, [sp, #24]
100164ea:	000a      	movs	r2, r1
100164ec:	3243      	adds	r2, #67	; 0x43
100164ee:	9307      	str	r3, [sp, #28]
100164f0:	9005      	str	r0, [sp, #20]
100164f2:	9204      	str	r2, [sp, #16]
100164f4:	7e0a      	ldrb	r2, [r1, #24]
100164f6:	000c      	movs	r4, r1
100164f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
100164fa:	2a6e      	cmp	r2, #110	; 0x6e
100164fc:	d100      	bne.n	10016500 <_printf_i+0x1c>
100164fe:	e0ab      	b.n	10016658 <_printf_i+0x174>
10016500:	d811      	bhi.n	10016526 <_printf_i+0x42>
10016502:	2a63      	cmp	r2, #99	; 0x63
10016504:	d022      	beq.n	1001654c <_printf_i+0x68>
10016506:	d809      	bhi.n	1001651c <_printf_i+0x38>
10016508:	2a00      	cmp	r2, #0
1001650a:	d100      	bne.n	1001650e <_printf_i+0x2a>
1001650c:	e0b5      	b.n	1001667a <_printf_i+0x196>
1001650e:	2a58      	cmp	r2, #88	; 0x58
10016510:	d000      	beq.n	10016514 <_printf_i+0x30>
10016512:	e0c5      	b.n	100166a0 <_printf_i+0x1bc>
10016514:	3145      	adds	r1, #69	; 0x45
10016516:	700a      	strb	r2, [r1, #0]
10016518:	4a81      	ldr	r2, [pc, #516]	; (10016720 <_printf_i+0x23c>)
1001651a:	e04f      	b.n	100165bc <_printf_i+0xd8>
1001651c:	2a64      	cmp	r2, #100	; 0x64
1001651e:	d01d      	beq.n	1001655c <_printf_i+0x78>
10016520:	2a69      	cmp	r2, #105	; 0x69
10016522:	d01b      	beq.n	1001655c <_printf_i+0x78>
10016524:	e0bc      	b.n	100166a0 <_printf_i+0x1bc>
10016526:	2a73      	cmp	r2, #115	; 0x73
10016528:	d100      	bne.n	1001652c <_printf_i+0x48>
1001652a:	e0aa      	b.n	10016682 <_printf_i+0x19e>
1001652c:	d809      	bhi.n	10016542 <_printf_i+0x5e>
1001652e:	2a6f      	cmp	r2, #111	; 0x6f
10016530:	d029      	beq.n	10016586 <_printf_i+0xa2>
10016532:	2a70      	cmp	r2, #112	; 0x70
10016534:	d000      	beq.n	10016538 <_printf_i+0x54>
10016536:	e0b3      	b.n	100166a0 <_printf_i+0x1bc>
10016538:	2220      	movs	r2, #32
1001653a:	6809      	ldr	r1, [r1, #0]
1001653c:	430a      	orrs	r2, r1
1001653e:	6022      	str	r2, [r4, #0]
10016540:	e037      	b.n	100165b2 <_printf_i+0xce>
10016542:	2a75      	cmp	r2, #117	; 0x75
10016544:	d01f      	beq.n	10016586 <_printf_i+0xa2>
10016546:	2a78      	cmp	r2, #120	; 0x78
10016548:	d033      	beq.n	100165b2 <_printf_i+0xce>
1001654a:	e0a9      	b.n	100166a0 <_printf_i+0x1bc>
1001654c:	000e      	movs	r6, r1
1001654e:	681a      	ldr	r2, [r3, #0]
10016550:	3642      	adds	r6, #66	; 0x42
10016552:	1d11      	adds	r1, r2, #4
10016554:	6019      	str	r1, [r3, #0]
10016556:	6813      	ldr	r3, [r2, #0]
10016558:	7033      	strb	r3, [r6, #0]
1001655a:	e0a4      	b.n	100166a6 <_printf_i+0x1c2>
1001655c:	6821      	ldr	r1, [r4, #0]
1001655e:	681a      	ldr	r2, [r3, #0]
10016560:	0608      	lsls	r0, r1, #24
10016562:	d406      	bmi.n	10016572 <_printf_i+0x8e>
10016564:	0649      	lsls	r1, r1, #25
10016566:	d504      	bpl.n	10016572 <_printf_i+0x8e>
10016568:	1d11      	adds	r1, r2, #4
1001656a:	6019      	str	r1, [r3, #0]
1001656c:	2300      	movs	r3, #0
1001656e:	5ed5      	ldrsh	r5, [r2, r3]
10016570:	e002      	b.n	10016578 <_printf_i+0x94>
10016572:	1d11      	adds	r1, r2, #4
10016574:	6019      	str	r1, [r3, #0]
10016576:	6815      	ldr	r5, [r2, #0]
10016578:	2d00      	cmp	r5, #0
1001657a:	da3b      	bge.n	100165f4 <_printf_i+0x110>
1001657c:	232d      	movs	r3, #45	; 0x2d
1001657e:	9a04      	ldr	r2, [sp, #16]
10016580:	426d      	negs	r5, r5
10016582:	7013      	strb	r3, [r2, #0]
10016584:	e036      	b.n	100165f4 <_printf_i+0x110>
10016586:	6821      	ldr	r1, [r4, #0]
10016588:	681a      	ldr	r2, [r3, #0]
1001658a:	0608      	lsls	r0, r1, #24
1001658c:	d406      	bmi.n	1001659c <_printf_i+0xb8>
1001658e:	0649      	lsls	r1, r1, #25
10016590:	d504      	bpl.n	1001659c <_printf_i+0xb8>
10016592:	6815      	ldr	r5, [r2, #0]
10016594:	1d11      	adds	r1, r2, #4
10016596:	6019      	str	r1, [r3, #0]
10016598:	b2ad      	uxth	r5, r5
1001659a:	e002      	b.n	100165a2 <_printf_i+0xbe>
1001659c:	1d11      	adds	r1, r2, #4
1001659e:	6019      	str	r1, [r3, #0]
100165a0:	6815      	ldr	r5, [r2, #0]
100165a2:	4b5f      	ldr	r3, [pc, #380]	; (10016720 <_printf_i+0x23c>)
100165a4:	7e22      	ldrb	r2, [r4, #24]
100165a6:	9303      	str	r3, [sp, #12]
100165a8:	2708      	movs	r7, #8
100165aa:	2a6f      	cmp	r2, #111	; 0x6f
100165ac:	d01d      	beq.n	100165ea <_printf_i+0x106>
100165ae:	270a      	movs	r7, #10
100165b0:	e01b      	b.n	100165ea <_printf_i+0x106>
100165b2:	0022      	movs	r2, r4
100165b4:	2178      	movs	r1, #120	; 0x78
100165b6:	3245      	adds	r2, #69	; 0x45
100165b8:	7011      	strb	r1, [r2, #0]
100165ba:	4a5a      	ldr	r2, [pc, #360]	; (10016724 <_printf_i+0x240>)
100165bc:	6819      	ldr	r1, [r3, #0]
100165be:	9203      	str	r2, [sp, #12]
100165c0:	1d08      	adds	r0, r1, #4
100165c2:	6822      	ldr	r2, [r4, #0]
100165c4:	6018      	str	r0, [r3, #0]
100165c6:	680d      	ldr	r5, [r1, #0]
100165c8:	0610      	lsls	r0, r2, #24
100165ca:	d402      	bmi.n	100165d2 <_printf_i+0xee>
100165cc:	0650      	lsls	r0, r2, #25
100165ce:	d500      	bpl.n	100165d2 <_printf_i+0xee>
100165d0:	b2ad      	uxth	r5, r5
100165d2:	07d3      	lsls	r3, r2, #31
100165d4:	d502      	bpl.n	100165dc <_printf_i+0xf8>
100165d6:	2320      	movs	r3, #32
100165d8:	431a      	orrs	r2, r3
100165da:	6022      	str	r2, [r4, #0]
100165dc:	2710      	movs	r7, #16
100165de:	2d00      	cmp	r5, #0
100165e0:	d103      	bne.n	100165ea <_printf_i+0x106>
100165e2:	2320      	movs	r3, #32
100165e4:	6822      	ldr	r2, [r4, #0]
100165e6:	439a      	bics	r2, r3
100165e8:	6022      	str	r2, [r4, #0]
100165ea:	0023      	movs	r3, r4
100165ec:	2200      	movs	r2, #0
100165ee:	3343      	adds	r3, #67	; 0x43
100165f0:	701a      	strb	r2, [r3, #0]
100165f2:	e002      	b.n	100165fa <_printf_i+0x116>
100165f4:	270a      	movs	r7, #10
100165f6:	4b4a      	ldr	r3, [pc, #296]	; (10016720 <_printf_i+0x23c>)
100165f8:	9303      	str	r3, [sp, #12]
100165fa:	6863      	ldr	r3, [r4, #4]
100165fc:	60a3      	str	r3, [r4, #8]
100165fe:	2b00      	cmp	r3, #0
10016600:	db09      	blt.n	10016616 <_printf_i+0x132>
10016602:	2204      	movs	r2, #4
10016604:	6821      	ldr	r1, [r4, #0]
10016606:	4391      	bics	r1, r2
10016608:	6021      	str	r1, [r4, #0]
1001660a:	2d00      	cmp	r5, #0
1001660c:	d105      	bne.n	1001661a <_printf_i+0x136>
1001660e:	9e04      	ldr	r6, [sp, #16]
10016610:	2b00      	cmp	r3, #0
10016612:	d011      	beq.n	10016638 <_printf_i+0x154>
10016614:	e07b      	b.n	1001670e <_printf_i+0x22a>
10016616:	2d00      	cmp	r5, #0
10016618:	d079      	beq.n	1001670e <_printf_i+0x22a>
1001661a:	9e04      	ldr	r6, [sp, #16]
1001661c:	0028      	movs	r0, r5
1001661e:	0039      	movs	r1, r7
10016620:	f7fc fa9e 	bl	10012b60 <__aeabi_uidivmod>
10016624:	9b03      	ldr	r3, [sp, #12]
10016626:	3e01      	subs	r6, #1
10016628:	5c5b      	ldrb	r3, [r3, r1]
1001662a:	0028      	movs	r0, r5
1001662c:	7033      	strb	r3, [r6, #0]
1001662e:	0039      	movs	r1, r7
10016630:	f7fc fa10 	bl	10012a54 <__aeabi_uidiv>
10016634:	1e05      	subs	r5, r0, #0
10016636:	d1f1      	bne.n	1001661c <_printf_i+0x138>
10016638:	2f08      	cmp	r7, #8
1001663a:	d109      	bne.n	10016650 <_printf_i+0x16c>
1001663c:	6823      	ldr	r3, [r4, #0]
1001663e:	07db      	lsls	r3, r3, #31
10016640:	d506      	bpl.n	10016650 <_printf_i+0x16c>
10016642:	6863      	ldr	r3, [r4, #4]
10016644:	6922      	ldr	r2, [r4, #16]
10016646:	4293      	cmp	r3, r2
10016648:	dc02      	bgt.n	10016650 <_printf_i+0x16c>
1001664a:	2330      	movs	r3, #48	; 0x30
1001664c:	3e01      	subs	r6, #1
1001664e:	7033      	strb	r3, [r6, #0]
10016650:	9b04      	ldr	r3, [sp, #16]
10016652:	1b9b      	subs	r3, r3, r6
10016654:	6123      	str	r3, [r4, #16]
10016656:	e02b      	b.n	100166b0 <_printf_i+0x1cc>
10016658:	6809      	ldr	r1, [r1, #0]
1001665a:	681a      	ldr	r2, [r3, #0]
1001665c:	0608      	lsls	r0, r1, #24
1001665e:	d407      	bmi.n	10016670 <_printf_i+0x18c>
10016660:	0649      	lsls	r1, r1, #25
10016662:	d505      	bpl.n	10016670 <_printf_i+0x18c>
10016664:	1d11      	adds	r1, r2, #4
10016666:	6019      	str	r1, [r3, #0]
10016668:	6813      	ldr	r3, [r2, #0]
1001666a:	8aa2      	ldrh	r2, [r4, #20]
1001666c:	801a      	strh	r2, [r3, #0]
1001666e:	e004      	b.n	1001667a <_printf_i+0x196>
10016670:	1d11      	adds	r1, r2, #4
10016672:	6019      	str	r1, [r3, #0]
10016674:	6813      	ldr	r3, [r2, #0]
10016676:	6962      	ldr	r2, [r4, #20]
10016678:	601a      	str	r2, [r3, #0]
1001667a:	2300      	movs	r3, #0
1001667c:	9e04      	ldr	r6, [sp, #16]
1001667e:	6123      	str	r3, [r4, #16]
10016680:	e016      	b.n	100166b0 <_printf_i+0x1cc>
10016682:	681a      	ldr	r2, [r3, #0]
10016684:	1d11      	adds	r1, r2, #4
10016686:	6019      	str	r1, [r3, #0]
10016688:	6816      	ldr	r6, [r2, #0]
1001668a:	2100      	movs	r1, #0
1001668c:	6862      	ldr	r2, [r4, #4]
1001668e:	0030      	movs	r0, r6
10016690:	f000 f92a 	bl	100168e8 <memchr>
10016694:	2800      	cmp	r0, #0
10016696:	d001      	beq.n	1001669c <_printf_i+0x1b8>
10016698:	1b80      	subs	r0, r0, r6
1001669a:	6060      	str	r0, [r4, #4]
1001669c:	6863      	ldr	r3, [r4, #4]
1001669e:	e003      	b.n	100166a8 <_printf_i+0x1c4>
100166a0:	0026      	movs	r6, r4
100166a2:	3642      	adds	r6, #66	; 0x42
100166a4:	7032      	strb	r2, [r6, #0]
100166a6:	2301      	movs	r3, #1
100166a8:	6123      	str	r3, [r4, #16]
100166aa:	2300      	movs	r3, #0
100166ac:	9a04      	ldr	r2, [sp, #16]
100166ae:	7013      	strb	r3, [r2, #0]
100166b0:	9b07      	ldr	r3, [sp, #28]
100166b2:	aa09      	add	r2, sp, #36	; 0x24
100166b4:	9300      	str	r3, [sp, #0]
100166b6:	0021      	movs	r1, r4
100166b8:	9b06      	ldr	r3, [sp, #24]
100166ba:	9805      	ldr	r0, [sp, #20]
100166bc:	f7ff fea4 	bl	10016408 <_printf_common>
100166c0:	1c43      	adds	r3, r0, #1
100166c2:	d102      	bne.n	100166ca <_printf_i+0x1e6>
100166c4:	2001      	movs	r0, #1
100166c6:	4240      	negs	r0, r0
100166c8:	e027      	b.n	1001671a <_printf_i+0x236>
100166ca:	6923      	ldr	r3, [r4, #16]
100166cc:	0032      	movs	r2, r6
100166ce:	9906      	ldr	r1, [sp, #24]
100166d0:	9805      	ldr	r0, [sp, #20]
100166d2:	9d07      	ldr	r5, [sp, #28]
100166d4:	47a8      	blx	r5
100166d6:	1c43      	adds	r3, r0, #1
100166d8:	d0f4      	beq.n	100166c4 <_printf_i+0x1e0>
100166da:	6823      	ldr	r3, [r4, #0]
100166dc:	2500      	movs	r5, #0
100166de:	079b      	lsls	r3, r3, #30
100166e0:	d40f      	bmi.n	10016702 <_printf_i+0x21e>
100166e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
100166e4:	68e0      	ldr	r0, [r4, #12]
100166e6:	4298      	cmp	r0, r3
100166e8:	da17      	bge.n	1001671a <_printf_i+0x236>
100166ea:	0018      	movs	r0, r3
100166ec:	e015      	b.n	1001671a <_printf_i+0x236>
100166ee:	0022      	movs	r2, r4
100166f0:	2301      	movs	r3, #1
100166f2:	3219      	adds	r2, #25
100166f4:	9906      	ldr	r1, [sp, #24]
100166f6:	9805      	ldr	r0, [sp, #20]
100166f8:	9e07      	ldr	r6, [sp, #28]
100166fa:	47b0      	blx	r6
100166fc:	1c43      	adds	r3, r0, #1
100166fe:	d0e1      	beq.n	100166c4 <_printf_i+0x1e0>
10016700:	3501      	adds	r5, #1
10016702:	68e3      	ldr	r3, [r4, #12]
10016704:	9a09      	ldr	r2, [sp, #36]	; 0x24
10016706:	1a9b      	subs	r3, r3, r2
10016708:	429d      	cmp	r5, r3
1001670a:	dbf0      	blt.n	100166ee <_printf_i+0x20a>
1001670c:	e7e9      	b.n	100166e2 <_printf_i+0x1fe>
1001670e:	0026      	movs	r6, r4
10016710:	9b03      	ldr	r3, [sp, #12]
10016712:	3642      	adds	r6, #66	; 0x42
10016714:	781b      	ldrb	r3, [r3, #0]
10016716:	7033      	strb	r3, [r6, #0]
10016718:	e78e      	b.n	10016638 <_printf_i+0x154>
1001671a:	b00b      	add	sp, #44	; 0x2c
1001671c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001671e:	46c0      	nop			; (mov r8, r8)
10016720:	100184f1 	.word	0x100184f1
10016724:	10018502 	.word	0x10018502

10016728 <_putc_r>:
10016728:	b570      	push	{r4, r5, r6, lr}
1001672a:	0006      	movs	r6, r0
1001672c:	000d      	movs	r5, r1
1001672e:	0014      	movs	r4, r2
10016730:	2800      	cmp	r0, #0
10016732:	d004      	beq.n	1001673e <_putc_r+0x16>
10016734:	6983      	ldr	r3, [r0, #24]
10016736:	2b00      	cmp	r3, #0
10016738:	d101      	bne.n	1001673e <_putc_r+0x16>
1001673a:	f7ff fc29 	bl	10015f90 <__sinit>
1001673e:	4b12      	ldr	r3, [pc, #72]	; (10016788 <_putc_r+0x60>)
10016740:	429c      	cmp	r4, r3
10016742:	d101      	bne.n	10016748 <_putc_r+0x20>
10016744:	6874      	ldr	r4, [r6, #4]
10016746:	e008      	b.n	1001675a <_putc_r+0x32>
10016748:	4b10      	ldr	r3, [pc, #64]	; (1001678c <_putc_r+0x64>)
1001674a:	429c      	cmp	r4, r3
1001674c:	d101      	bne.n	10016752 <_putc_r+0x2a>
1001674e:	68b4      	ldr	r4, [r6, #8]
10016750:	e003      	b.n	1001675a <_putc_r+0x32>
10016752:	4b0f      	ldr	r3, [pc, #60]	; (10016790 <_putc_r+0x68>)
10016754:	429c      	cmp	r4, r3
10016756:	d100      	bne.n	1001675a <_putc_r+0x32>
10016758:	68f4      	ldr	r4, [r6, #12]
1001675a:	68a3      	ldr	r3, [r4, #8]
1001675c:	3b01      	subs	r3, #1
1001675e:	60a3      	str	r3, [r4, #8]
10016760:	2b00      	cmp	r3, #0
10016762:	da05      	bge.n	10016770 <_putc_r+0x48>
10016764:	69a2      	ldr	r2, [r4, #24]
10016766:	4293      	cmp	r3, r2
10016768:	db08      	blt.n	1001677c <_putc_r+0x54>
1001676a:	b2eb      	uxtb	r3, r5
1001676c:	2b0a      	cmp	r3, #10
1001676e:	d005      	beq.n	1001677c <_putc_r+0x54>
10016770:	6823      	ldr	r3, [r4, #0]
10016772:	b2e8      	uxtb	r0, r5
10016774:	1c5a      	adds	r2, r3, #1
10016776:	6022      	str	r2, [r4, #0]
10016778:	701d      	strb	r5, [r3, #0]
1001677a:	e004      	b.n	10016786 <_putc_r+0x5e>
1001677c:	0022      	movs	r2, r4
1001677e:	0029      	movs	r1, r5
10016780:	0030      	movs	r0, r6
10016782:	f7ff fa43 	bl	10015c0c <__swbuf_r>
10016786:	bd70      	pop	{r4, r5, r6, pc}
10016788:	10018480 	.word	0x10018480
1001678c:	100184a0 	.word	0x100184a0
10016790:	100184c0 	.word	0x100184c0

10016794 <__sread>:
10016794:	b570      	push	{r4, r5, r6, lr}
10016796:	000c      	movs	r4, r1
10016798:	250e      	movs	r5, #14
1001679a:	5f49      	ldrsh	r1, [r1, r5]
1001679c:	f000 f8b0 	bl	10016900 <_read_r>
100167a0:	2800      	cmp	r0, #0
100167a2:	db03      	blt.n	100167ac <__sread+0x18>
100167a4:	6d63      	ldr	r3, [r4, #84]	; 0x54
100167a6:	181b      	adds	r3, r3, r0
100167a8:	6563      	str	r3, [r4, #84]	; 0x54
100167aa:	e003      	b.n	100167b4 <__sread+0x20>
100167ac:	89a2      	ldrh	r2, [r4, #12]
100167ae:	4b02      	ldr	r3, [pc, #8]	; (100167b8 <__sread+0x24>)
100167b0:	4013      	ands	r3, r2
100167b2:	81a3      	strh	r3, [r4, #12]
100167b4:	bd70      	pop	{r4, r5, r6, pc}
100167b6:	46c0      	nop			; (mov r8, r8)
100167b8:	ffffefff 	.word	0xffffefff

100167bc <__swrite>:
100167bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100167be:	001f      	movs	r7, r3
100167c0:	898b      	ldrh	r3, [r1, #12]
100167c2:	0005      	movs	r5, r0
100167c4:	000c      	movs	r4, r1
100167c6:	0016      	movs	r6, r2
100167c8:	05db      	lsls	r3, r3, #23
100167ca:	d505      	bpl.n	100167d8 <__swrite+0x1c>
100167cc:	230e      	movs	r3, #14
100167ce:	5ec9      	ldrsh	r1, [r1, r3]
100167d0:	2200      	movs	r2, #0
100167d2:	2302      	movs	r3, #2
100167d4:	f000 f874 	bl	100168c0 <_lseek_r>
100167d8:	89a2      	ldrh	r2, [r4, #12]
100167da:	4b05      	ldr	r3, [pc, #20]	; (100167f0 <__swrite+0x34>)
100167dc:	0028      	movs	r0, r5
100167de:	4013      	ands	r3, r2
100167e0:	81a3      	strh	r3, [r4, #12]
100167e2:	0032      	movs	r2, r6
100167e4:	230e      	movs	r3, #14
100167e6:	5ee1      	ldrsh	r1, [r4, r3]
100167e8:	003b      	movs	r3, r7
100167ea:	f000 f81f 	bl	1001682c <_write_r>
100167ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100167f0:	ffffefff 	.word	0xffffefff

100167f4 <__sseek>:
100167f4:	b570      	push	{r4, r5, r6, lr}
100167f6:	000c      	movs	r4, r1
100167f8:	250e      	movs	r5, #14
100167fa:	5f49      	ldrsh	r1, [r1, r5]
100167fc:	f000 f860 	bl	100168c0 <_lseek_r>
10016800:	89a3      	ldrh	r3, [r4, #12]
10016802:	1c42      	adds	r2, r0, #1
10016804:	d103      	bne.n	1001680e <__sseek+0x1a>
10016806:	4a05      	ldr	r2, [pc, #20]	; (1001681c <__sseek+0x28>)
10016808:	4013      	ands	r3, r2
1001680a:	81a3      	strh	r3, [r4, #12]
1001680c:	e004      	b.n	10016818 <__sseek+0x24>
1001680e:	2280      	movs	r2, #128	; 0x80
10016810:	0152      	lsls	r2, r2, #5
10016812:	4313      	orrs	r3, r2
10016814:	81a3      	strh	r3, [r4, #12]
10016816:	6560      	str	r0, [r4, #84]	; 0x54
10016818:	bd70      	pop	{r4, r5, r6, pc}
1001681a:	46c0      	nop			; (mov r8, r8)
1001681c:	ffffefff 	.word	0xffffefff

10016820 <__sclose>:
10016820:	b510      	push	{r4, lr}
10016822:	230e      	movs	r3, #14
10016824:	5ec9      	ldrsh	r1, [r1, r3]
10016826:	f000 f815 	bl	10016854 <_close_r>
1001682a:	bd10      	pop	{r4, pc}

1001682c <_write_r>:
1001682c:	b570      	push	{r4, r5, r6, lr}
1001682e:	0005      	movs	r5, r0
10016830:	0008      	movs	r0, r1
10016832:	0011      	movs	r1, r2
10016834:	2200      	movs	r2, #0
10016836:	4c06      	ldr	r4, [pc, #24]	; (10016850 <_write_r+0x24>)
10016838:	6022      	str	r2, [r4, #0]
1001683a:	001a      	movs	r2, r3
1001683c:	f7f5 fc2a 	bl	1000c094 <_write>
10016840:	1c43      	adds	r3, r0, #1
10016842:	d103      	bne.n	1001684c <_write_r+0x20>
10016844:	6823      	ldr	r3, [r4, #0]
10016846:	2b00      	cmp	r3, #0
10016848:	d000      	beq.n	1001684c <_write_r+0x20>
1001684a:	602b      	str	r3, [r5, #0]
1001684c:	bd70      	pop	{r4, r5, r6, pc}
1001684e:	46c0      	nop			; (mov r8, r8)
10016850:	1001b490 	.word	0x1001b490

10016854 <_close_r>:
10016854:	2300      	movs	r3, #0
10016856:	b570      	push	{r4, r5, r6, lr}
10016858:	4c06      	ldr	r4, [pc, #24]	; (10016874 <_close_r+0x20>)
1001685a:	0005      	movs	r5, r0
1001685c:	0008      	movs	r0, r1
1001685e:	6023      	str	r3, [r4, #0]
10016860:	f7f1 fdde 	bl	10008420 <_close>
10016864:	1c43      	adds	r3, r0, #1
10016866:	d103      	bne.n	10016870 <_close_r+0x1c>
10016868:	6823      	ldr	r3, [r4, #0]
1001686a:	2b00      	cmp	r3, #0
1001686c:	d000      	beq.n	10016870 <_close_r+0x1c>
1001686e:	602b      	str	r3, [r5, #0]
10016870:	bd70      	pop	{r4, r5, r6, pc}
10016872:	46c0      	nop			; (mov r8, r8)
10016874:	1001b490 	.word	0x1001b490

10016878 <_fstat_r>:
10016878:	2300      	movs	r3, #0
1001687a:	b570      	push	{r4, r5, r6, lr}
1001687c:	4c06      	ldr	r4, [pc, #24]	; (10016898 <_fstat_r+0x20>)
1001687e:	0005      	movs	r5, r0
10016880:	0008      	movs	r0, r1
10016882:	0011      	movs	r1, r2
10016884:	6023      	str	r3, [r4, #0]
10016886:	f7f1 fdcf 	bl	10008428 <_fstat>
1001688a:	1c43      	adds	r3, r0, #1
1001688c:	d103      	bne.n	10016896 <_fstat_r+0x1e>
1001688e:	6823      	ldr	r3, [r4, #0]
10016890:	2b00      	cmp	r3, #0
10016892:	d000      	beq.n	10016896 <_fstat_r+0x1e>
10016894:	602b      	str	r3, [r5, #0]
10016896:	bd70      	pop	{r4, r5, r6, pc}
10016898:	1001b490 	.word	0x1001b490

1001689c <_isatty_r>:
1001689c:	2300      	movs	r3, #0
1001689e:	b570      	push	{r4, r5, r6, lr}
100168a0:	4c06      	ldr	r4, [pc, #24]	; (100168bc <_isatty_r+0x20>)
100168a2:	0005      	movs	r5, r0
100168a4:	0008      	movs	r0, r1
100168a6:	6023      	str	r3, [r4, #0]
100168a8:	f7f1 fdc4 	bl	10008434 <_isatty>
100168ac:	1c43      	adds	r3, r0, #1
100168ae:	d103      	bne.n	100168b8 <_isatty_r+0x1c>
100168b0:	6823      	ldr	r3, [r4, #0]
100168b2:	2b00      	cmp	r3, #0
100168b4:	d000      	beq.n	100168b8 <_isatty_r+0x1c>
100168b6:	602b      	str	r3, [r5, #0]
100168b8:	bd70      	pop	{r4, r5, r6, pc}
100168ba:	46c0      	nop			; (mov r8, r8)
100168bc:	1001b490 	.word	0x1001b490

100168c0 <_lseek_r>:
100168c0:	b570      	push	{r4, r5, r6, lr}
100168c2:	0005      	movs	r5, r0
100168c4:	0008      	movs	r0, r1
100168c6:	0011      	movs	r1, r2
100168c8:	2200      	movs	r2, #0
100168ca:	4c06      	ldr	r4, [pc, #24]	; (100168e4 <_lseek_r+0x24>)
100168cc:	6022      	str	r2, [r4, #0]
100168ce:	001a      	movs	r2, r3
100168d0:	f7f1 fdb2 	bl	10008438 <_lseek>
100168d4:	1c43      	adds	r3, r0, #1
100168d6:	d103      	bne.n	100168e0 <_lseek_r+0x20>
100168d8:	6823      	ldr	r3, [r4, #0]
100168da:	2b00      	cmp	r3, #0
100168dc:	d000      	beq.n	100168e0 <_lseek_r+0x20>
100168de:	602b      	str	r3, [r5, #0]
100168e0:	bd70      	pop	{r4, r5, r6, pc}
100168e2:	46c0      	nop			; (mov r8, r8)
100168e4:	1001b490 	.word	0x1001b490

100168e8 <memchr>:
100168e8:	b2c9      	uxtb	r1, r1
100168ea:	1882      	adds	r2, r0, r2
100168ec:	4290      	cmp	r0, r2
100168ee:	d004      	beq.n	100168fa <memchr+0x12>
100168f0:	7803      	ldrb	r3, [r0, #0]
100168f2:	428b      	cmp	r3, r1
100168f4:	d002      	beq.n	100168fc <memchr+0x14>
100168f6:	3001      	adds	r0, #1
100168f8:	e7f8      	b.n	100168ec <memchr+0x4>
100168fa:	2000      	movs	r0, #0
100168fc:	4770      	bx	lr
	...

10016900 <_read_r>:
10016900:	b570      	push	{r4, r5, r6, lr}
10016902:	0005      	movs	r5, r0
10016904:	0008      	movs	r0, r1
10016906:	0011      	movs	r1, r2
10016908:	2200      	movs	r2, #0
1001690a:	4c06      	ldr	r4, [pc, #24]	; (10016924 <_read_r+0x24>)
1001690c:	6022      	str	r2, [r4, #0]
1001690e:	001a      	movs	r2, r3
10016910:	f7f5 fba0 	bl	1000c054 <_read>
10016914:	1c43      	adds	r3, r0, #1
10016916:	d103      	bne.n	10016920 <_read_r+0x20>
10016918:	6823      	ldr	r3, [r4, #0]
1001691a:	2b00      	cmp	r3, #0
1001691c:	d000      	beq.n	10016920 <_read_r+0x20>
1001691e:	602b      	str	r3, [r5, #0]
10016920:	bd70      	pop	{r4, r5, r6, pc}
10016922:	46c0      	nop			; (mov r8, r8)
10016924:	1001b490 	.word	0x1001b490
10016928:	10008792 	.word	0x10008792
1001692c:	10008798 	.word	0x10008798
10016930:	10008798 	.word	0x10008798
10016934:	10008792 	.word	0x10008792
10016938:	10008798 	.word	0x10008798
1001693c:	10008798 	.word	0x10008798
10016940:	10008798 	.word	0x10008798
10016944:	10008798 	.word	0x10008798
10016948:	10008798 	.word	0x10008798
1001694c:	10008798 	.word	0x10008798
10016950:	10008798 	.word	0x10008798
10016954:	10008798 	.word	0x10008798
10016958:	10008798 	.word	0x10008798
1001695c:	10008798 	.word	0x10008798
10016960:	10008798 	.word	0x10008798
10016964:	10008798 	.word	0x10008798
10016968:	10008798 	.word	0x10008798
1001696c:	10008798 	.word	0x10008798
10016970:	10008798 	.word	0x10008798
10016974:	10008798 	.word	0x10008798
10016978:	10008792 	.word	0x10008792
1001697c:	10008792 	.word	0x10008792
10016980:	10008798 	.word	0x10008798
10016984:	10008798 	.word	0x10008798
10016988:	10008798 	.word	0x10008798
1001698c:	10008798 	.word	0x10008798
10016990:	10008798 	.word	0x10008798
10016994:	10008798 	.word	0x10008798
10016998:	10008798 	.word	0x10008798
1001699c:	10008798 	.word	0x10008798
100169a0:	10008798 	.word	0x10008798
100169a4:	10008798 	.word	0x10008798
100169a8:	10008798 	.word	0x10008798
100169ac:	10008798 	.word	0x10008798
100169b0:	10008798 	.word	0x10008798
100169b4:	10008798 	.word	0x10008798
100169b8:	10008792 	.word	0x10008792
100169bc:	10008798 	.word	0x10008798
100169c0:	10008798 	.word	0x10008798
100169c4:	10008798 	.word	0x10008798
100169c8:	10008798 	.word	0x10008798
100169cc:	10008798 	.word	0x10008798
100169d0:	10008798 	.word	0x10008798
100169d4:	10008798 	.word	0x10008798
100169d8:	10008798 	.word	0x10008798
100169dc:	10008798 	.word	0x10008798
100169e0:	10008798 	.word	0x10008798
100169e4:	10008798 	.word	0x10008798
100169e8:	10008798 	.word	0x10008798
100169ec:	10008798 	.word	0x10008798
100169f0:	10008798 	.word	0x10008798
100169f4:	10008798 	.word	0x10008798
100169f8:	10008798 	.word	0x10008798
100169fc:	10008798 	.word	0x10008798
10016a00:	10008792 	.word	0x10008792
10016a04:	10008798 	.word	0x10008798
10016a08:	10008798 	.word	0x10008798
10016a0c:	10008792 	.word	0x10008792
10016a10:	0000000d 	.word	0x0000000d
10016a14:	736d735b 	.word	0x736d735b
10016a18:	656c625f 	.word	0x656c625f
10016a1c:	6961705f 	.word	0x6961705f
10016a20:	65725f72 	.word	0x65725f72
10016a24:	73657571 	.word	0x73657571
10016a28:	6e665f74 	.word	0x6e665f74
10016a2c:	5009095d 	.word	0x5009095d
10016a30:	69726961 	.word	0x69726961
10016a34:	7220676e 	.word	0x7220676e
10016a38:	65757165 	.word	0x65757165
10016a3c:	2e2e7473 	.word	0x2e2e7473
10016a40:	0000002e 	.word	0x0000002e
10016a44:	736d735b 	.word	0x736d735b
10016a48:	656c625f 	.word	0x656c625f
10016a4c:	776f705f 	.word	0x776f705f
10016a50:	645f7265 	.word	0x645f7265
10016a54:	5d6e776f 	.word	0x5d6e776f
10016a58:	00000000 	.word	0x00000000
10016a5c:	736d735b 	.word	0x736d735b
10016a60:	656c625f 	.word	0x656c625f
10016a64:	776f705f 	.word	0x776f705f
10016a68:	645f7265 	.word	0x645f7265
10016a6c:	5d6e776f 	.word	0x5d6e776f
10016a70:	6f745309 	.word	0x6f745309
10016a74:	6e697070 	.word	0x6e697070
10016a78:	6f632067 	.word	0x6f632067
10016a7c:	6e616d6d 	.word	0x6e616d6d
10016a80:	65722064 	.word	0x65722064
10016a84:	76696563 	.word	0x76696563
10016a88:	64206465 	.word	0x64206465
10016a8c:	6e697275 	.word	0x6e697275
10016a90:	64612067 	.word	0x64612067
10016a94:	74726576 	.word	0x74726576
10016a98:	6d657369 	.word	0x6d657369
10016a9c:	2e746e65 	.word	0x2e746e65
10016aa0:	6f745320 	.word	0x6f745320
10016aa4:	6e697070 	.word	0x6e697070
10016aa8:	2e2e2e67 	.word	0x2e2e2e67
10016aac:	00000020 	.word	0x00000020
10016ab0:	6c696166 	.word	0x6c696166
10016ab4:	21216465 	.word	0x21216465
10016ab8:	00000021 	.word	0x00000021
10016abc:	656e6f64 	.word	0x656e6f64
10016ac0:	00000021 	.word	0x00000021
10016ac4:	736d735b 	.word	0x736d735b
10016ac8:	656c625f 	.word	0x656c625f
10016acc:	776f705f 	.word	0x776f705f
10016ad0:	645f7265 	.word	0x645f7265
10016ad4:	5d6e776f 	.word	0x5d6e776f
10016ad8:	65440909 	.word	0x65440909
10016adc:	65636976 	.word	0x65636976
10016ae0:	69617020 	.word	0x69617020
10016ae4:	2e646572 	.word	0x2e646572
10016ae8:	64202e2e 	.word	0x64202e2e
10016aec:	62617369 	.word	0x62617369
10016af0:	676e696c 	.word	0x676e696c
10016af4:	746e6920 	.word	0x746e6920
10016af8:	75727265 	.word	0x75727265
10016afc:	20737470 	.word	0x20737470
10016b00:	77732026 	.word	0x77732026
10016b04:	68637469 	.word	0x68637469
10016b08:	20676e69 	.word	0x20676e69
10016b0c:	6e776f64 	.word	0x6e776f64
10016b10:	6e657320 	.word	0x6e657320
10016b14:	73726f73 	.word	0x73726f73
10016b18:	00000000 	.word	0x00000000
10016b1c:	736d735b 	.word	0x736d735b
10016b20:	656c625f 	.word	0x656c625f
10016b24:	776f705f 	.word	0x776f705f
10016b28:	645f7265 	.word	0x645f7265
10016b2c:	5d6e776f 	.word	0x5d6e776f
10016b30:	75430909 	.word	0x75430909
10016b34:	6e657272 	.word	0x6e657272
10016b38:	20796c74 	.word	0x20796c74
10016b3c:	69646e69 	.word	0x69646e69
10016b40:	69746163 	.word	0x69746163
10016b44:	0000676e 	.word	0x0000676e
10016b48:	736d735b 	.word	0x736d735b
10016b4c:	656c625f 	.word	0x656c625f
10016b50:	776f705f 	.word	0x776f705f
10016b54:	645f7265 	.word	0x645f7265
10016b58:	5d6e776f 	.word	0x5d6e776f
10016b5c:	65440909 	.word	0x65440909
10016b60:	65636976 	.word	0x65636976
10016b64:	6e6f6320 	.word	0x6e6f6320
10016b68:	7463656e 	.word	0x7463656e
10016b6c:	2e2e6465 	.word	0x2e2e6465
10016b70:	6964202e 	.word	0x6964202e
10016b74:	6e6f6373 	.word	0x6e6f6373
10016b78:	7463656e 	.word	0x7463656e
10016b7c:	00676e69 	.word	0x00676e69
10016b80:	736d735b 	.word	0x736d735b
10016b84:	656c625f 	.word	0x656c625f
10016b88:	7664615f 	.word	0x7664615f
10016b8c:	7065725f 	.word	0x7065725f
10016b90:	5f74726f 	.word	0x5f74726f
10016b94:	095d6e66 	.word	0x095d6e66
10016b98:	76644109 	.word	0x76644109
10016b9c:	69747265 	.word	0x69747265
10016ba0:	656d6573 	.word	0x656d6573
10016ba4:	7420746e 	.word	0x7420746e
10016ba8:	6f656d69 	.word	0x6f656d69
10016bac:	2e2e7475 	.word	0x2e2e7475
10016bb0:	0000002e 	.word	0x0000002e
10016bb4:	736d735b 	.word	0x736d735b
10016bb8:	656c625f 	.word	0x656c625f
10016bbc:	6e6f635f 	.word	0x6e6f635f
10016bc0:	7463656e 	.word	0x7463656e
10016bc4:	665f6465 	.word	0x665f6465
10016bc8:	09095d6e 	.word	0x09095d6e
10016bcc:	69766544 	.word	0x69766544
10016bd0:	20736563 	.word	0x20736563
10016bd4:	6e6e6f63 	.word	0x6e6e6f63
10016bd8:	65746365 	.word	0x65746365
10016bdc:	2e2e2e64 	.word	0x2e2e2e64
10016be0:	00000000 	.word	0x00000000
10016be4:	20454c42 	.word	0x20454c42
10016be8:	3a4f2f54 	.word	0x3a4f2f54
10016bec:	30303520 	.word	0x30303520
10016bf0:	736d2030 	.word	0x736d2030
10016bf4:	00000000 	.word	0x00000000
10016bf8:	736d735b 	.word	0x736d735b
10016bfc:	656c625f 	.word	0x656c625f
10016c00:	6e6f635f 	.word	0x6e6f635f
10016c04:	7463656e 	.word	0x7463656e
10016c08:	665f6465 	.word	0x665f6465
10016c0c:	09095d6e 	.word	0x09095d6e
10016c10:	6e6f7257 	.word	0x6e6f7257
10016c14:	4c422067 	.word	0x4c422067
10016c18:	74732045 	.word	0x74732045
10016c1c:	2e657461 	.word	0x2e657461
10016c20:	73202e2e 	.word	0x73202e2e
10016c24:	74747568 	.word	0x74747568
10016c28:	20676e69 	.word	0x20676e69
10016c2c:	6e776f64 	.word	0x6e776f64
10016c30:	00000000 	.word	0x00000000
10016c34:	736d735b 	.word	0x736d735b
10016c38:	656c625f 	.word	0x656c625f
10016c3c:	6961705f 	.word	0x6961705f
10016c40:	5f646572 	.word	0x5f646572
10016c44:	005d6e66 	.word	0x005d6e66
10016c48:	736d735b 	.word	0x736d735b
10016c4c:	656c625f 	.word	0x656c625f
10016c50:	7664615f 	.word	0x7664615f
10016c54:	69747265 	.word	0x69747265
10016c58:	095d6573 	.word	0x095d6573
10016c5c:	76644109 	.word	0x76644109
10016c60:	69747265 	.word	0x69747265
10016c64:	656d6573 	.word	0x656d6573
10016c68:	6420746e 	.word	0x6420746e
10016c6c:	20617461 	.word	0x20617461
10016c70:	20746573 	.word	0x20746573
10016c74:	6c696166 	.word	0x6c696166
10016c78:	00216465 	.word	0x00216465
10016c7c:	736d735b 	.word	0x736d735b
10016c80:	656c625f 	.word	0x656c625f
10016c84:	7664615f 	.word	0x7664615f
10016c88:	69747265 	.word	0x69747265
10016c8c:	095d6573 	.word	0x095d6573
10016c90:	454c4209 	.word	0x454c4209
10016c94:	61747320 	.word	0x61747320
10016c98:	64657472 	.word	0x64657472
10016c9c:	76646120 	.word	0x76646120
10016ca0:	69747265 	.word	0x69747265
10016ca4:	656d6573 	.word	0x656d6573
10016ca8:	0000746e 	.word	0x0000746e
10016cac:	736d735b 	.word	0x736d735b
10016cb0:	7265735f 	.word	0x7265735f
10016cb4:	65636976 	.word	0x65636976
10016cb8:	7664615f 	.word	0x7664615f
10016cbc:	69747265 	.word	0x69747265
10016cc0:	095d6573 	.word	0x095d6573
10016cc4:	20454c42 	.word	0x20454c42
10016cc8:	65766461 	.word	0x65766461
10016ccc:	73697472 	.word	0x73697472
10016cd0:	6e656d65 	.word	0x6e656d65
10016cd4:	74732074 	.word	0x74732074
10016cd8:	20747261 	.word	0x20747261
10016cdc:	6c696166 	.word	0x6c696166
10016ce0:	203a6465 	.word	0x203a6465
10016ce4:	73616572 	.word	0x73616572
10016ce8:	30206e6f 	.word	0x30206e6f
10016cec:	00782578 	.word	0x00782578
10016cf0:	736d735b 	.word	0x736d735b
10016cf4:	656c625f 	.word	0x656c625f
10016cf8:	7369645f 	.word	0x7369645f
10016cfc:	6e6e6f63 	.word	0x6e6e6f63
10016d00:	65746365 	.word	0x65746365
10016d04:	6e665f64 	.word	0x6e665f64
10016d08:	6550095d 	.word	0x6550095d
10016d0c:	64207265 	.word	0x64207265
10016d10:	6f637369 	.word	0x6f637369
10016d14:	63656e6e 	.word	0x63656e6e
10016d18:	2e646574 	.word	0x2e646574
10016d1c:	68202e2e 	.word	0x68202e2e
10016d20:	6c646e61 	.word	0x6c646e61
10016d24:	30203a65 	.word	0x30203a65
10016d28:	34302578 	.word	0x34302578
10016d2c:	72202c78 	.word	0x72202c78
10016d30:	6f736165 	.word	0x6f736165
10016d34:	30203a6e 	.word	0x30203a6e
10016d38:	32302578 	.word	0x32302578
10016d3c:	00000078 	.word	0x00000078
10016d40:	736d735b 	.word	0x736d735b
10016d44:	656c625f 	.word	0x656c625f
10016d48:	6174735f 	.word	0x6174735f
10016d4c:	70757472 	.word	0x70757472
10016d50:	5309095d 	.word	0x5309095d
10016d54:	74726174 	.word	0x74726174
10016d58:	20676e69 	.word	0x20676e69
10016d5c:	2e2e7075 	.word	0x2e2e7075
10016d60:	0000002e 	.word	0x0000002e
10016d64:	49544f4e 	.word	0x49544f4e
10016d68:	41434946 	.word	0x41434946
10016d6c:	4e4f4954 	.word	0x4e4f4954
10016d70:	52524520 	.word	0x52524520
10016d74:	2121524f 	.word	0x2121524f
10016d78:	00000000 	.word	0x00000000
10016d7c:	544f4e20 	.word	0x544f4e20
10016d80:	74657320 	.word	0x74657320
10016d84:	0000203f 	.word	0x0000203f

10016d88 <sms_ble_gap_cb>:
	...
10016d94:	100085dd 00000000 10008611 10008745     ............E...
	...
10016dac:	10008679 1000843d 00000000 00000000     y...=...........
	...

10016dd4 <sms_ble_gatt_server_cb>:
10016dd4:	10008461 1000849d 00000000 00000000     a...............
	...
10016dfc:	736d735b 7475625f 5f6e6f74 666e6f63     [sms_button_conf
10016e0c:	72756769 70095d65 6c626f72 77206d65     igure].problem w
10016e1c:	656c6968 74657320 676e6974 20707520     hile setting up 
10016e2c:	74747562 00306e6f 736d735b 7475625f     button0.[sms_but
10016e3c:	5f6e6f74 666e6f63 72756769 50095d65     ton_configure].P
10016e4c:	6c626f72 77206d65 656c6968 74657320     roblem while set
10016e5c:	676e6974 20707520 74747562 00316e6f     ting up button1.
10016e6c:	736d735b 7475625f 5f6e6f74 666e6f63     [sms_button_conf
10016e7c:	72756769 50095d65 6c626f72 77206d65     igure].Problem w
10016e8c:	656c6968 74657320 676e6974 20707520     hile setting up 
10016e9c:	414c5058 44454e49 65737520 75622072     XPLAINED user bu
10016eac:	6e6f7474 00000000 736d735b 7475625f     tton....[sms_but
10016ebc:	5f6e6f74 2d5d6e66 00000030 736d735b     ton_fn]-0...[sms
10016ecc:	7475625f 5f6e6f74 2d5d6e66 00000031     _button_fn]-1...
10016edc:	736d735b 7475625f 5f6e6f74 095d6e66     [sms_button_fn].
10016eec:	61570909 676e696b 20707520 00000000     ..Waking up ....
10016efc:	736d735b 7475625f 5f6e6f74 095d6e66     [sms_button_fn].
10016f0c:	6f4e0909 73752074 73206465 65746174     ..Not used state
10016f1c:	2e2e2e73 00000000 736d735b 7475625f     s.......[sms_but
10016f2c:	5f6e6f74 095d6e66 6f4e0909 73752074     ton_fn]...Not us
10016f3c:	73206465 65746174 002e2e2e 736d735b     ed state....[sms
10016f4c:	7475625f 5f6e6f74 095d6e66 68530909     _button_fn]...Sh
10016f5c:	69747475 6420676e 206e776f 00000000     utting down ....
10016f6c:	736d735b 7475625f 5f6e6f74 095d6e66     [sms_button_fn].
10016f7c:	6f4e0909 0000656e 736d735b 7475625f     ..None..[sms_but
10016f8c:	5f6e6f74 69666564 735f656e 69767265     ton_define_servi
10016f9c:	5d736563 72655309 65636976 65642073     ces].Services de
10016fac:	696e6966 6620676e 656c6961 72202c64     fining failed, r
10016fbc:	6f736165 7830206e 00007825 736d735b     eason 0x%x..[sms
10016fcc:	7475625f 5f6e6f74 69666564 735f656e     _button_define_s
10016fdc:	69767265 5d736563 72655309 65636976     ervices].Service
10016fec:	65642073 656e6966 53202c64 6220534d     s defined, SMS b
10016ffc:	6f747475 6168206e 656c646e 6425203a     utton handle: %d
1001700c:	00000000 626f7250 206d656c 6c696877     ....Problem whil
1001701c:	65732065 6e697474 70672067 70206f69     e setting gpio p
1001702c:	00006e69 2e2e7325 4209092e 6572702d     in..%s.....B-pre
1001703c:	64252076 2d42202c 20727563 202c6425     v %d, B-cur %d, 
1001704c:	20454c42 30257830 202c7832 25203154     BLE 0x%02x, T1 %
1001705c:	54202c64 64252032 4d53202c 64252053     d, T2 %d, SMS %d
1001706c:	00000000 736d735b 756d695f 6e6f635f     ....[sms_imu_con
1001707c:	75676966 675f6572 5d6f6970 6f725009     figure_gpio].Pro
1001708c:	6d656c62 69687720 7320656c 69747465     blem while setti
1001709c:	7520676e 4d492070 52442055 70205944     ng up IMU DRDY p
100170ac:	00006e69 736d735b 75706d5f 6665645f     in..[sms_mpu_def
100170bc:	5f656e69 76726573 73656369 6553095d     ine_services].Se
100170cc:	63697672 64207365 6e696665 20676e69     rvices defining 
100170dc:	6c696166 202c6465 73616572 30206e6f     failed, reason 0
100170ec:	00782578 736d735b 75706d5f 6665645f     x%x.[sms_mpu_def
100170fc:	5f656e69 76726573 73656369 6553095d     ine_services].Se
1001710c:	63697672 64207365 6e696665 202c6465     rvices defined, 
1001711c:	20534d53 2055504d 646e6168 203a656c     SMS MPU handle: 
1001712c:	00006425 736d735b 64656c5f 6970675f     %d..[sms_led_gpi
1001713c:	6e695f6f 095d7469 626f7270 206d656c     o_init].problem 
1001714c:	6c696877 65732065 6e697474 70752067     while setting up
1001715c:	64656c20 00000030 736d735b 6572705f      led0...[sms_pre
1001716c:	72757373 6f635f65 6769666e 5f657275     ssure_configure_
1001717c:	6f697067 7270095d 656c626f 6877206d     gpio].problem wh
1001718c:	20656c69 74746573 20676e69 56207075     ile setting up V
1001719c:	70206363 00006e69 736d735b 6572705f     cc pin..[sms_pre
100171ac:	72757373 74735f65 75747261 09095d70     ssure_startup]..
100171bc:	72617453 676e6974 65727020 72757373     Starting pressur
100171cc:	65732065 726f736e 00000000 736d735b     e sensor....[sms
100171dc:	6572705f 72757373 74735f65 75747261     _pressure_startu
100171ec:	09095d70 69614609 2064656c 72206f74     p]...Failed to r
100171fc:	74657365 65727020 72757373 65642065     eset pressure de
1001720c:	65636976 00000000 736d735b 6572705f     vice....[sms_pre
1001721c:	72757373 74735f65 75747261 09095d70     ssure_startup]..
1001722c:	69614609 2064656c 69206f74 6974696e     .Failed to initi
1001723c:	7a696c61 72702065 75737365 64206572     alize pressure d
1001724c:	63697665 00000065 736d735b 6572705f     evice...[sms_pre
1001725c:	72757373 736d5f65 635f3835 75636c61     ssure_ms58_calcu
1001726c:	6574616c 6574205d 7265706d 72757461     late] temperatur
1001727c:	203d2065 20646c25 65727020 72757373     e = %ld  pressur
1001728c:	203d2065 00646c25 736d735b 6572705f     e = %ld.[sms_pre
1001729c:	72757373 65645f65 656e6966 7265735f     ssure_define_ser
100172ac:	65636976 53095d73 69767265 20736563     vices].Services 
100172bc:	69666564 676e696e 69616620 2c64656c     defining failed,
100172cc:	61657220 206e6f73 78257830 00000000      reason 0x%x....
100172dc:	736d735b 6572705f 72757373 65645f65     [sms_pressure_de
100172ec:	656e6966 7265735f 65636976 53095d73     fine_services].S
100172fc:	69767265 20736563 69666564 2c64656e     ervices defined,
1001730c:	534d5320 65727020 72757373 61682065      SMS pressure ha
1001731c:	656c646e 6425203a 00000000 736d735b     ndle: %d....[sms
1001732c:	6e65735f 73726f73 6977735f 5d686374     _sensors_switch]
1001733c:	6f430909 6e646c75 73207427 74726174     ..Couldn't start
1001734c:	554d4920 00000000 736d735b 6e65735f      IMU....[sms_sen
1001735c:	73726f73 6977735f 5d686374 43090909     sors_switch]...C
1001736c:	646c756f 2074276e 72617473 72702074     ouldn't start pr
1001737c:	75737365 73206572 6f736e65 00000072     essure sensor...
1001738c:	736d735b 6e65735f 73726f73 6977735f     [sms_sensors_swi
1001739c:	5d686374 4d530909 6f772053 6e696b72     tch]..SMS workin
100173ac:	6f6d2067 203a6564 00006425 1000b074     g mode: %d..t...
100173bc:	1000b082 1000b090 1000b09e 1000b0ac     ................
100173cc:	1000b0ba 1000b0c8 1000b0d8 1000b0e8     ................
100173dc:	1000b0f8 1000b108 1000b118 1000b128     ............(...
100173ec:	1000b138 1000b148 1000b158 1000b168     8...H...X...h...
100173fc:	1000b178 1000b188 1000b198 1000b1a8     x...............
1001740c:	1000b1b8 1000b1c8 1000b1d8 1000b1e8     ................
1001741c:	1000b1f8 1000b208 1000b218 1000b226     ............&...
1001742c:	1000b234 1000b242 1000b250 1000b25e     4...B...P...^...
1001743c:	1000b26c 1000b27a 1000b288 1000b298     l...z...........
1001744c:	1000b2a8 1000b2b8 1000b2c8 1000b2d8     ................
1001745c:	1000b2e8 1000b2f8 1000b308 1000b318     ................
1001746c:	1000b328 1000b338 1000b348 1000b358     (...8...H...X...
1001747c:	1000b368 1000b378 1000b388 1000b396     h...x...........
1001748c:	1000b3a4 1000b3d0 1000b3de 1000b3ec     ................
1001749c:	1000b3fa 1000b408 1000b416 1000b424     ............$...
100174ac:	1000b432 1000b440 1000b44e 1000b45c     2...@...N...\...
100174bc:	1000b46a 1000b478 1000b486 1000b494     j...x...........
100174cc:	1000b4a2 1000b4b0 1000b4be 1000b4cc     ................
100174dc:	1000b4da 1000b4e8 1000b4f6 1000b504     ................
100174ec:	1000b512 1000b520 1000b52e 1000b53c     .... .......<...
100174fc:	1000b54a 1000b558 1000b566 1000b574     J...X...f...t...
1001750c:	1000b582 1000b590 1000b59e 1000b5ac     ................
1001751c:	1000b5ba 1000b5c8 1000b5d6 1000b5e4     ................
1001752c:	1000b5f2 1000b600 1000b60e 1000b61c     ................
1001753c:	1000b62a 1000b638 1000b646 1000b654     *...8...F...T...
1001754c:	1000b662 1000b670 1000b67e 1000b68c     b...p...~.......
1001755c:	1000b69a 1000b6a8 1000b6b6 1000b750     ............P...
1001756c:	1000b778 1000b7a0 1000b7c8 1000ba08     x...............
1001757c:	1000b7f8 1000b810 1000b888 1000b8a0     ................
1001758c:	1000b828 1000b840 1000b858 1000b870     (...@...X...p...
1001759c:	1000b8b8 1000bb7c 1000bb7c 1000bb7c     ....|...|...|...
100175ac:	1000bb7c 1000bb7c 1000bb7c 1000bb7c     |...|...|...|...
100175bc:	1000bb7c 1000b960 1000b978 1000b990     |...`...x.......
100175cc:	1000ba1e 1000b8e8 1000bb7c 1000bb7c     ........|...|...
100175dc:	1000bb7c 1000bb7c 1000bb7c 1000bb7c     |...|...|...|...
100175ec:	1000b9a8 1000b9c0 1000b9d8 1000b9f0     ................
100175fc:	1000bb7c 1000bb34 1000bb4c 1000bb7c     |...4...L...|...
1001760c:	1000bb7c 1000ba4a 1000ba60 1000ba76     |...J...`...v...
1001761c:	1000ba8c 1000bb7c 1000bb7c 1000bb7c     ....|...|...|...
1001762c:	1000bb7c 1000bb7c 1000bb7c 1000bb7c     |...|...|...|...
1001763c:	1000bb7c 1000b73c 1000b764 1000b78c     |...<...d.......
1001764c:	1000b7b4 1000b7e0 1000b8d0 1000b900     ................
1001765c:	1000b918 1000b930 1000b948 1000ba34     ....0...H...4...
1001766c:	1000baa2 1000bb1c 1000bb64 1000c25e     ........d...^...
1001767c:	1000c270 1000c246 1000c246 1000c246     p...F...F...F...
1001768c:	1000c25e 1000c246 1000c246 1000cc62     ^...F...F...b...
1001769c:	1000ccd6 1000cc4a 1000ccdc 1000cc50     ....J.......P...
100176ac:	1000cc56 1000cc5c 1000d3bc 1000d3bc     V...\...........
100176bc:	1000d3bc 1000d3bc 1000d3bc 1000d3bc     ................
100176cc:	1000d3bc 1000d3bc 1000d3bc 1000d3bc     ................
100176dc:	1000d3bc 1000d3bc 1000d3bc 1000d3bc     ................
100176ec:	1000d3bc 1000d3bc 1000d3bc 1000d3bc     ................
100176fc:	1000d3bc 1000d3da 1000d3da 1000d3da     ................
1001770c:	1000d3da 1000d3da 1000d3da 1000d3da     ................
1001771c:	1000d3da 1000d3da 1000d3da 1000d3fc     ................
1001772c:	1000d3fc 1000d3fc 1000d3fc 1000d3fc     ................
1001773c:	1000d3fc 1000d3fc 1000d3fc 1000d3fc     ................
1001774c:	1000d3fc 1000d42c 1000d42c 1000d42c     ....,...,...,...
1001775c:	1000d42c 1000d42c 1000d42c 1000d446     ,...,...,...F...
1001776c:	1000d446 1000d446 1000d446 1000d446     F...F...F...F...
1001777c:	1000d446 1000d446 1000d446 1000d446     F...F...F...F...
1001778c:	1000d460 1000d460 1000d482 1000d482     `...`...........
1001779c:	1000d49c 1000d482 34333231 00003635     ........123456..
100177ac:	efcdab00 00efcdab                       ........

100177b4 <ble_mgr_gatt_server_handle>:
	...
100177cc:	1000c159 1000c181 1000c1c9 00000000     Y...............
100177dc:	65646e55 656e6966 76452064 20746e65     Undefined Event 
100177ec:	65636552 64657669 00000000 6e616353     Received....Scan
100177fc:	676e696e 61662020 64656c69 00000000     ning  failed....
1001780c:	65766441 73697472 20676e69 6c696166     Advertising fail
1001781c:	00006465 2d454c42 2055544d 6e616843     ed..BLE-MTU Chan
1001782c:	2c646567 6e6f4320 7463656e 206e6f69     ged, Connection 
1001783c:	646e6148 203a656c 202c6425 2077654e     Handle: %d, New 
1001784c:	756c6156 25203a65 00000064 2055544d     Value: %d...MTU 
1001785c:	6e616843 2c646567 6e6f4320 7463656e     Changed, Connect
1001786c:	206e6f69 646e6148 253a656c 4f202c64     ion Handle:%d, O
1001787c:	61726570 6e6f6974 0064253a 2055544d     peration:%d.MTU 
1001788c:	6e616843 46206567 656c6961 43202c64     Change Failed, C
1001789c:	656e6e6f 6f697463 6148206e 656c646e     onnection Handle
100178ac:	2c64253a 65704f20 69746172 253a6e6f     :%d, Operation:%
100178bc:	00000064 72616843 69725720 43206574     d...Char Write C
100178cc:	4320646d 6c706d6f 2c657465 6e6f4320     md Complete, Con
100178dc:	7463656e 206e6f69 646e6148 253a656c     nection Handle:%
100178ec:	4f202c64 61726570 6e6f6974 0064253a     d, Operation:%d.
100178fc:	72616843 69725720 43206574 4620646d     Char Write Cmd F
1001790c:	656c6961 43202c64 656e6e6f 6f697463     ailed, Connectio
1001791c:	6148206e 656c646e 2c64253a 65704f20     n Handle:%d, Ope
1001792c:	69746172 253a6e6f 00000064 74617453     ration:%d...Stat
1001793c:	6f4e2065 61482074 656c646e 64252064     e Not Handled %d
1001794c:	00000000 69766544 64206563 6f637369     ....Device disco
1001795c:	63656e6e 20646574 73616552 303a6e6f     nnected Reason:0
1001796c:	32302578 61482078 656c646e 2578303d     x%02x Handle=0x%
1001797c:	00000078 425f5441 435f454c 5f4e4e4f     x...AT_BLE_CONN_
1001798c:	41524150 50555f4d 45544144 00000020     PARAM_UPDATE ...
1001799c:	72636e45 69747079 66206e6f 656c6961     Encryption faile
100179ac:	00000064 72636e45 69747079 63206e6f     d...Encryption c
100179bc:	6c706d6f 64657465 63757320 73736563     ompleted success
100179cc:	6c6c7566 00000079 20454c42 69766544     fully...BLE Devi
100179dc:	6e206563 6620746f 646e756f 636e6520     ce not found enc
100179ec:	74707972 206e6f69 6f666e69 00000000     ryption info....
100179fc:	6f666e49 7665443a 20656369 6e756f66     Info:Device foun
10017a0c:	64612064 73657264 255b2073 20205d64     d address [%d]  
10017a1c:	30257830 30255832 30255832 30255832     0x%02X%02X%02X%0
10017a2c:	30255832 30255832 00205832 6f666e49     2X%02X%02X .Info
10017a3c:	78616d3a 6d756d69 2e6f6e20 7320666f     :maximum no.of s
10017a4c:	206e6163 69766564 72206563 68636165     can device reach
10017a5c:	2e2e6465 6f74532e 6e697070 63532067     ed...Stopping Sc
10017a6c:	00006e61 6c696146 74206465 7473206f     an..Failed to st
10017a7c:	7320706f 6e6e6163 00676e69 30257830     op scanning.0x%0
10017a8c:	202c5832 00000000 4b525343 0000203a     2X, ....CSRK: ..
10017a9c:	3a4b5249 00000000 72696150 20676e69     IRK:....Pairing 
10017aac:	6c696166 2e2e6465 7369442e 6e6e6f63     failed...Disconn
10017abc:	69746365 0000676e 63736944 656e6e6f     ecting..Disconne
10017acc:	52207463 65757165 46207473 656c6961     ct Request Faile
10017adc:	00000064 72696150 20676e69 636f7270     d...Pairing proc
10017aec:	72756465 6f632065 656c706d 20646574     edure completed 
10017afc:	63637573 66737365 796c6c75 00000000     successfully....
10017b0c:	20454c42 69766544 6e206563 6620746f     BLE Device not f
10017b1c:	646e756f 206f7420 726f7473 68742065     ound to store th
10017b2c:	61702065 6e697269 6e692067 00006f66     e pairing info..
10017b3c:	3a4b544c 00000020 72636e45 69747079     LTK: ...Encrypti
10017b4c:	4e206e6f 7320746f 74726174 00006465     on Not started..
10017b5c:	76616c53 65532065 69727563 52207974     Slave Security R
10017b6c:	2d207165 74754120 746e6568 74616369     eq - Authenticat
10017b7c:	206e6f69 6c696146 00006465 656e6547     ion Failed..Gene
10017b8c:	65746172 544c2064 00203a4b 30257830     rated LTK: .0x%0
10017b9c:	00205832 646e6553 20676e69 72696170     2X .Sending pair
10017bac:	20676e69 70736572 65736e6f 00000000     ing response....
10017bbc:	72696150 71655220 74736575 41202d20     Pair Request - A
10017bcc:	65687475 6369746e 6f697461 6146206e     uthentication Fa
10017bdc:	64656c69 00000000 65746e45 68742072     iled....Enter th
10017bec:	61502065 656b7373 2d362879 69676944     e Passkey(6-Digi
10017bfc:	69202974 6554206e 6e696d72 003a6c61     t) in Terminal:.
10017c0c:	206e6950 656d6954 0074756f 63736944     Pin Timeout.Disc
10017c1c:	656e6e6f 6e697463 2e2e2067 0000002e     onnecting ......
10017c2c:	61656c50 45206573 7265746e 65687420     Please Enter the
10017c3c:	6c6f6620 69776f6c 5020676e 2d737361      following Pass-
10017c4c:	65646f63 206e6f28 6568746f 65442072     code(on other De
10017c5c:	65636976 00003a29 72696150 79656b2d     vice):..Pair-key
10017c6c:	70657220 6620796c 656c6961 00000064      reply failed...
10017c7c:	20424f4f 74616546 20657275 20746f4e     OOB Feature Not 
10017c8c:	70707573 6574726f 00000064 65746e45     supported...Ente
10017c9c:	20646572 73736150 646f632d 00003a65     red Pass-code:..
10017cac:	2d434e45 3a716552 6e6f4320 6148206e     ENC-Req: Conn Ha
10017cbc:	656c646e 76654420 20656369 6e756f46     ndle Device Foun
10017ccc:	64683a64 64253a6c 00000000 74736f68     d:hdl:%d....host
10017cdc:	76656420 20656369 76696465 00782520      device ediv %x.
10017cec:	72656570 76656420 20656369 76696465     peer device ediv
10017cfc:	00782520 5f636e65 20716572 76696465      %x.enc_req ediv
10017d0c:	00782520 20656854 65646e69 73692078      %x.The index is
10017d1c:	00642520 2d434e45 3a716552 79654b20      %d.ENC-Req: Key
10017d2c:	756f4620 0000646e 72696150 20676e69      Found..Pairing 
10017d3c:	6f666e69 74616d72 206e6f69 7020666f     information of p
10017d4c:	20726565 69766564 69206563 6f6e2073     eer device is no
10017d5c:	76612074 616c6961 2e656c62 00000000     t available.....
10017d6c:	61656c50 75206573 6961706e 68742072     Please unpair th
10017d7c:	65642065 65636976 6f726620 6570206d     e device from pe
10017d8c:	64207265 63697665 6f6d2865 656c6962     er device(mobile
10017d9c:	65732029 6e697474 6d207367 20756e65     ) settings menu 
10017dac:	20646e61 72617473 61702074 6e697269     and start pairin
10017dbc:	67612067 006e6961 72636e45 69747079     g again.Encrypti
10017dcc:	52206e6f 65757165 52207473 796c7065     on Request Reply
10017ddc:	69614620 0064656c 72636e45 69747079      Failed.Encrypti
10017dec:	52206e6f 65757165 52207473 796c7065     on Request Reply
10017dfc:	00000000 656c625b 696e695f 09095d74     ....[ble_init]..
10017e0c:	696e4909 6c616974 6e697a69 41532067     .Initializing SA
10017e1c:	3131424d 00000000 656c625b 696e695f     MB11....[ble_ini
10017e2c:	09095d74 424d4153 49203131 6974696e     t]..SAMB11 Initi
10017e3c:	7a696c61 6f697461 6166206e 64656c69     alization failed
10017e4c:	00000000 656c625b 696e695f 09095d74     ....[ble_init]..
10017e5c:	61656c50 63206573 6b636568 65687420     Please check the
10017e6c:	776f7020 61207265 6320646e 656e6e6f      power and conne
10017e7c:	6f697463 202f206e 64726168 65726177     ction / hardware
10017e8c:	6e6f6320 7463656e 0000726f 52424153      connector..SABR
10017e9c:	4d532d65 00000053 69766544 6e206563     e-SMS...Device n
10017eac:	20656d61 20746573 6c696166 00006465     ame set failed..
10017ebc:	656c625b 7465735f 7665645f 6e6f635f     [ble_set_dev_con
10017ecc:	5d676966 44420909 64646120 73736572     fig]..BD address
10017edc:	74656720 69616620 0064656c 656c625b      get failed.[ble
10017eec:	7465735f 7665645f 6e6f635f 5d676966     _set_dev_config]
10017efc:	44420909 64644120 73736572 2578303a     ..BD Address:0x%
10017f0c:	25583230 25583230 25583230 25583230     02X%02X%02X%02X%
10017f1c:	25583230 2c583230 64644120 73736572     02X%02X, Address
10017f2c:	70795420 64253a65 00000000 656c625b      Type:%d....[ble
10017f3c:	7465735f 7665645f 6e6f635f 5d676966     _set_dev_config]
10017f4c:	74655309 454c4220 76654420 20656369     .Set BLE Device 
10017f5c:	666e6f63 72756769 6f697461 6166206e     configuration fa
10017f6c:	64656c69 00000000 656c625b 7465735f     iled....[ble_set
10017f7c:	7665645f 6e6f635f 5d676966 74655309     _dev_config].Set
10017f8c:	454c4220 76654420 20656369 72646441      BLE Device Addr
10017f9c:	20737365 6c696166 00006465 6e616353     ess failed..Scan
10017fac:	676e696e 502e2e2e 7361656c 61772065     ning...Please wa
10017fbc:	2e2e7469 0000002e 76616c53 65732065     it......Slave se
10017fcc:	69727563 72207974 65757165 73207473     curity request s
10017fdc:	65636375 75667373 0000006c 76616c53     uccessful...Slav
10017fec:	65732065 69727563 72207974 65757165     e security reque
10017ffc:	66207473 656c6961 00000064 6e6e6f43     st failed...Conn
1001800c:	65746365 6f742064 65657020 65642072     ected to peer de
1001801c:	65636976 74697720 64612068 73657264     vice with addres
1001802c:	78302073 78323025 78323025 78323025     s 0x%02x%02x%02x
1001803c:	78323025 78323025 78323025 00000000     %02x%02x%02x....
1001804c:	6e6e6f43 69746365 48206e6f 6c646e61     Connection Handl
1001805c:	64252065 00000000 6f736552 6e69766c     e %d....Resolvin
1001806c:	61522067 6d6f646e 64646120 73736572     g Random address
1001807c:	63757320 73736563 00002a2a 6f736552      success**..Reso
1001808c:	6e69766c 61522067 6d6f646e 64646120     lving Random add
1001809c:	73736572 69616620 2a64656c 0000002a     ress failed**...
100180ac:	2078614d 626d756e 6f207265 6f632066     Max number of co
100180bc:	63656e6e 6e6f6974 61657220 64656863     nnection reached
100180cc:	6425203a 3d3d3d20 7369443e 6e6e6f63     : %d ===>Disconn
100180dc:	69746365 2e2e676e 0000002e 69766544     ecting......Devi
100180ec:	43206563 656e6e6f 6f697463 6146206e     ce Connection Fa
100180fc:	64656c69 53202d20 75746174 25203a73     iled - Status: %
1001810c:	00000064 23232323 23232323 65442323     d...##########De
1001811c:	65636976 756f4620 0000646e 23232323     vice Found..####
1001812c:	23232323 65442323 65636976 746f4e20     ######Device Not
1001813c:	756f4620 0000646e 69766544 69206563      Found..Device i
1001814c:	253a7864 00000064 4c420a0d 76452d45     dx:%d.....BLE-Ev
1001815c:	3a746e65 00006425 54544147 7265535f     ent:%d..GATT_Ser
1001816c:	20726576 6e657645 64253a74 00000000     ver Event:%d....
1001817c:	2d454c42 616e614d 3a726567 6e6b6e55     BLE-Manager:Unkn
1001818c:	206e776f 6e657645 78303d74 00005825     own Event=0x%X..
1001819c:	656c625b 6e616d5f 72656761 0909095d     [ble_manager]...
100181ac:	756e614d 74636166 72657275 65707320     Manufacturer spe
100181bc:	69666963 61642063 65206174 6c62616e     cific data enabl
100181cc:	00006465 5a2d571c 00002dbe 20454c42     ed...W-Z.-..BLE 
100181dc:	65766441 73697472 6e656d65 61642074     Advertisement da
100181ec:	73206174 66207465 656c6961 00000064     ta set failed...

100181fc <ble_mgr_gap_handle>:
100181fc:	1000c0e5 1000c395 1000c109 1000c131     ............1...
1001820c:	00000000 1000d011 1000c211 1000c2ad     ................
1001821c:	1000c5f1 1000c441 1000c7f1 1000c609     ....A...........
1001822c:	1000c97d 1000cac1 1000c2d1 1000d25d     }...........]...
	...
10018248:	306e7442 746e6920 202e2e2e 00000000     Btn0 int... ....
10018258:	6f727245 6e692072 736d7320 7475625f     Error in sms_but
10018268:	5f6e6f74 29286e66 00000000 316e7442     ton_fn()....Btn1
10018278:	746e6920 202e2e2e 00000000 73756c66      int... ....flus
10018288:	676e6968 00000021 73657250 65732073     hing!...Press se
10018298:	6e69646e 25282067 64252f64 2e2e2e29     nding (%d/%d)...
100182a8:	00000020 20454c42 6e657665 61742074      ...BLE event ta
100182b8:	65206b73 0000646e 20504147 656d6974     sk end..GAP time
100182c8:	0074756f 6e657645 65672074 69742074     out.Event get ti
100182d8:	756f656d 00000074 20454c42 6f727265     meout...BLE erro
100182e8:	636f2072 72727563 41006465 6c656d74     r occurred.Atmel
100182f8:	726f4320 04022e70                                 Corp.

100182fe <CSWTCH.45>:
100182fe:	00100402                                         ...

10018301 <CSWTCH.47>:
10018301:	03010300 03030303 03030303 02020303              ...............

10018310 <client_conf_uuid>:
10018310:	29042902                                         .)

10018312 <presentation_format_uuid>:
10018312:	29012904                                         .)

10018314 <user_desc_uuid>:
10018314:	29032901                                         .)

10018316 <server_conf_uuid>:
10018316:	29002903                                         .)

10018318 <extended_props_uuid>:
10018318:	28022900                                         .)

1001831a <include_uuid>:
1001831a:	28032802                                         .(

1001831c <char_uuid>:
1001831c:	00002803 00776f70 00000000              .(..pow.....

10018328 <TWO52>:
10018328:	00000000 43300000 00000000 c3300000     ......0C......0.
10018338:	10013046 10012f6a 10013028 10013000     F0..j/..(0...0..
10018348:	10013028 10012ff4 10013028 10013000     (0.../..(0...0..
10018358:	10012f6a 10012f6a 10012ff4 10013000     j/..j/.../...0..
10018368:	100130ac 100130ac 100130ac 1001302e     .0...0...0...0..
10018378:	10012f6a 10012f6a 10013014 10012ffe     j/..j/...0.../..
10018388:	10013014 10012ff4 10013014 10012ffe     .0.../...0.../..
10018398:	10012f6a 10012f6a 10012ff4 10012ffe     j/..j/.../.../..
100183a8:	100130ac 100130ac 100130ac 100130b8     .0...0...0...0..
100183b8:	100133a4 10013302 10013302 10013300     .3...3...3...3..
100183c8:	10013396 10013396 1001338c 10013300     .3...3...3...3..
100183d8:	10013396 1001338c 10013396 10013300     .3...3...3...3..
100183e8:	1001339c 1001339c 1001339c 10013426     .3...3...3..&4..
100183f8:	10014154 10014022 10014128 10014018     TA.."@..(A...@..
10018408:	10014128 10014132 10014128 10014018     (A..2A..(A...@..
10018418:	10014022 10014022 10014132 10014018     "@.."@..2A...@..
10018428:	1001400e 1001400e 1001400e 10014384     .@...@...@...C..
10018438:	1001499c 1001485c 1001485c 1001485a     .I..\H..\H..ZH..
10018448:	10014974 10014974 10014966 1001485a     tI..tI..fI..ZH..
10018458:	10014974 10014966 10014974 1001485a     tI..fI..tI..ZH..
10018468:	1001497c 1001497c 1001497c 10014b7c     |I..|I..|I..|K..
10018478:	00000043                                C...

1001847c <_global_impure_ptr>:
1001847c:	10018540                                @...

10018480 <__sf_fake_stdin>:
	...

100184a0 <__sf_fake_stdout>:
	...

100184c0 <__sf_fake_stderr>:
	...
100184e0:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
100184f0:	32313000 36353433 41393837 45444342     .0123456789ABCDE
10018500:	31300046 35343332 39383736 64636261     F.0123456789abcd
10018510:	00006665                                ef..

10018514 <_init>:
10018514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10018516:	46c0      	nop			; (mov r8, r8)
10018518:	bcf8      	pop	{r3, r4, r5, r6, r7}
1001851a:	bc08      	pop	{r3}
1001851c:	469e      	mov	lr, r3
1001851e:	4770      	bx	lr

10018520 <__init_array_start>:
10018520:	100080b1 	.word	0x100080b1

10018524 <_fini>:
10018524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10018526:	46c0      	nop			; (mov r8, r8)
10018528:	bcf8      	pop	{r3, r4, r5, r6, r7}
1001852a:	bc08      	pop	{r3}
1001852c:	469e      	mov	lr, r3
1001852e:	4770      	bx	lr

10018530 <__fini_array_start>:
10018530:	10008089 	.word	0x10008089
