
SMS_Central1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000aab0  10008000  10008000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000090  10012ab0  10012ab0  00012ab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00002cf8  10012b40  10012b40  00012b40  2**2
                  ALLOC
  3 .stack        00000800  10015838  10015838  00012b40  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00012b40  2**0
                  CONTENTS, READONLY
  5 .comment      000000b4  00000000  00000000  00012b68  2**0
                  CONTENTS, READONLY
  6 .debug_info   000259b6  00000000  00000000  00012c1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002f08  00000000  00000000  000385d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00005ff2  00000000  00000000  0003b4da  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000788  00000000  00000000  000414cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000007d8  00000000  00000000  00041c54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0000861e  00000000  00000000  0004242c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000d452  00000000  00000000  0004aa4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0013d789  00000000  00000000  00057e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001d18  00000000  00000000  00195628  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

10008000 <app_entry>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void app_entry(void)
{
10008000:	b510      	push	{r4, lr}

    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
10008002:	4b18      	ldr	r3, [pc, #96]	; (10008064 <app_entry+0x64>)
10008004:	4a18      	ldr	r2, [pc, #96]	; (10008068 <app_entry+0x68>)
10008006:	429a      	cmp	r2, r3
10008008:	d003      	beq.n	10008012 <app_entry+0x12>
        for (; pDest < &_erelocate;) {
1000800a:	4b18      	ldr	r3, [pc, #96]	; (1000806c <app_entry+0x6c>)
1000800c:	4a15      	ldr	r2, [pc, #84]	; (10008064 <app_entry+0x64>)
1000800e:	429a      	cmp	r2, r3
10008010:	d304      	bcc.n	1000801c <app_entry+0x1c>
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008012:	4b17      	ldr	r3, [pc, #92]	; (10008070 <app_entry+0x70>)
10008014:	4a17      	ldr	r2, [pc, #92]	; (10008074 <app_entry+0x74>)
10008016:	429a      	cmp	r2, r3
10008018:	d310      	bcc.n	1000803c <app_entry+0x3c>
1000801a:	e01e      	b.n	1000805a <app_entry+0x5a>
1000801c:	4b16      	ldr	r3, [pc, #88]	; (10008078 <app_entry+0x78>)
1000801e:	4a13      	ldr	r2, [pc, #76]	; (1000806c <app_entry+0x6c>)
10008020:	3203      	adds	r2, #3
10008022:	1ad2      	subs	r2, r2, r3
10008024:	0892      	lsrs	r2, r2, #2
10008026:	3201      	adds	r2, #1
10008028:	0092      	lsls	r2, r2, #2
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
1000802a:	2300      	movs	r3, #0
            *pDest++ = *pSrc++;
1000802c:	480d      	ldr	r0, [pc, #52]	; (10008064 <app_entry+0x64>)
1000802e:	490e      	ldr	r1, [pc, #56]	; (10008068 <app_entry+0x68>)
10008030:	58cc      	ldr	r4, [r1, r3]
10008032:	50c4      	str	r4, [r0, r3]
10008034:	3304      	adds	r3, #4
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
10008036:	4293      	cmp	r3, r2
10008038:	d1fa      	bne.n	10008030 <app_entry+0x30>
1000803a:	e7ea      	b.n	10008012 <app_entry+0x12>
1000803c:	4b0f      	ldr	r3, [pc, #60]	; (1000807c <app_entry+0x7c>)
1000803e:	490c      	ldr	r1, [pc, #48]	; (10008070 <app_entry+0x70>)
10008040:	3103      	adds	r1, #3
10008042:	1ac9      	subs	r1, r1, r3
10008044:	0889      	lsrs	r1, r1, #2
10008046:	3101      	adds	r1, #1
10008048:	0089      	lsls	r1, r1, #2
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
1000804a:	2300      	movs	r3, #0
        *pDest++ = 0;
1000804c:	4c09      	ldr	r4, [pc, #36]	; (10008074 <app_entry+0x74>)
1000804e:	2000      	movs	r0, #0
10008050:	191a      	adds	r2, r3, r4
10008052:	6010      	str	r0, [r2, #0]
10008054:	3304      	adds	r3, #4
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008056:	428b      	cmp	r3, r1
10008058:	d1fa      	bne.n	10008050 <app_entry+0x50>
        *pDest++ = 0;
    }

    /* Initialize the C library */
    __libc_init_array();
1000805a:	4b09      	ldr	r3, [pc, #36]	; (10008080 <app_entry+0x80>)
1000805c:	4798      	blx	r3

    /* Branch to main function */
    main();
1000805e:	4b09      	ldr	r3, [pc, #36]	; (10008084 <app_entry+0x84>)
10008060:	4798      	blx	r3

    /* return to BLE OS*/
    return;
}
10008062:	bd10      	pop	{r4, pc}
10008064:	10012ab0 	.word	0x10012ab0
10008068:	10012ab0 	.word	0x10012ab0
1000806c:	10012b40 	.word	0x10012b40
10008070:	10015838 	.word	0x10015838
10008074:	10012b40 	.word	0x10012b40
10008078:	10012ab4 	.word	0x10012ab4
1000807c:	10012b44 	.word	0x10012b44
10008080:	100103b9 	.word	0x100103b9
10008084:	1000c421 	.word	0x1000c421

10008088 <__do_global_dtors_aux>:
10008088:	b510      	push	{r4, lr}
1000808a:	4c06      	ldr	r4, [pc, #24]	; (100080a4 <__do_global_dtors_aux+0x1c>)
1000808c:	7823      	ldrb	r3, [r4, #0]
1000808e:	2b00      	cmp	r3, #0
10008090:	d107      	bne.n	100080a2 <__do_global_dtors_aux+0x1a>
10008092:	4b05      	ldr	r3, [pc, #20]	; (100080a8 <__do_global_dtors_aux+0x20>)
10008094:	2b00      	cmp	r3, #0
10008096:	d002      	beq.n	1000809e <__do_global_dtors_aux+0x16>
10008098:	4804      	ldr	r0, [pc, #16]	; (100080ac <__do_global_dtors_aux+0x24>)
1000809a:	e000      	b.n	1000809e <__do_global_dtors_aux+0x16>
1000809c:	bf00      	nop
1000809e:	2301      	movs	r3, #1
100080a0:	7023      	strb	r3, [r4, #0]
100080a2:	bd10      	pop	{r4, pc}
100080a4:	10012b40 	.word	0x10012b40
100080a8:	00000000 	.word	0x00000000
100080ac:	10012ab0 	.word	0x10012ab0

100080b0 <frame_dummy>:
100080b0:	4b08      	ldr	r3, [pc, #32]	; (100080d4 <frame_dummy+0x24>)
100080b2:	b510      	push	{r4, lr}
100080b4:	2b00      	cmp	r3, #0
100080b6:	d003      	beq.n	100080c0 <frame_dummy+0x10>
100080b8:	4907      	ldr	r1, [pc, #28]	; (100080d8 <frame_dummy+0x28>)
100080ba:	4808      	ldr	r0, [pc, #32]	; (100080dc <frame_dummy+0x2c>)
100080bc:	e000      	b.n	100080c0 <frame_dummy+0x10>
100080be:	bf00      	nop
100080c0:	4807      	ldr	r0, [pc, #28]	; (100080e0 <frame_dummy+0x30>)
100080c2:	6803      	ldr	r3, [r0, #0]
100080c4:	2b00      	cmp	r3, #0
100080c6:	d100      	bne.n	100080ca <frame_dummy+0x1a>
100080c8:	bd10      	pop	{r4, pc}
100080ca:	4b06      	ldr	r3, [pc, #24]	; (100080e4 <frame_dummy+0x34>)
100080cc:	2b00      	cmp	r3, #0
100080ce:	d0fb      	beq.n	100080c8 <frame_dummy+0x18>
100080d0:	4798      	blx	r3
100080d2:	e7f9      	b.n	100080c8 <frame_dummy+0x18>
100080d4:	00000000 	.word	0x00000000
100080d8:	10012b44 	.word	0x10012b44
100080dc:	10012ab0 	.word	0x10012ab0
100080e0:	10012ab0 	.word	0x10012ab0
100080e4:	00000000 	.word	0x00000000

100080e8 <pxp_monitor_connected_state_handler>:
* @return @ref AT_BLE_INVALID_PARAM if GATT discovery parameter are incorrect
*parameter.
* @return @ref AT_BLE_FAILURE Generic error.
*/
at_ble_status_t pxp_monitor_connected_state_handler(void *params)
{
100080e8:	b510      	push	{r4, lr}
100080ea:	0004      	movs	r4, r0
	at_ble_connected_t *conn_params;
	conn_params = (at_ble_connected_t *)params;	
	
	if(!ble_check_iscentral(conn_params->handle))
100080ec:	8900      	ldrh	r0, [r0, #8]
100080ee:	4b05      	ldr	r3, [pc, #20]	; (10008104 <pxp_monitor_connected_state_handler+0x1c>)
100080f0:	4798      	blx	r3
	{
		return AT_BLE_FAILURE;
100080f2:	23e2      	movs	r3, #226	; 0xe2
at_ble_status_t pxp_monitor_connected_state_handler(void *params)
{
	at_ble_connected_t *conn_params;
	conn_params = (at_ble_connected_t *)params;	
	
	if(!ble_check_iscentral(conn_params->handle))
100080f4:	2800      	cmp	r0, #0
100080f6:	d003      	beq.n	10008100 <pxp_monitor_connected_state_handler+0x18>
	{
		return AT_BLE_FAILURE;
	}

	pxp_connect_request_flag = PXP_DEV_CONNECTED;
100080f8:	2202      	movs	r2, #2
100080fa:	4b03      	ldr	r3, [pc, #12]	; (10008108 <pxp_monitor_connected_state_handler+0x20>)
100080fc:	701a      	strb	r2, [r3, #0]
		
	return conn_params->conn_status;
100080fe:	7aa3      	ldrb	r3, [r4, #10]
}
10008100:	0018      	movs	r0, r3
10008102:	bd10      	pop	{r4, pc}
10008104:	1000b569 	.word	0x1000b569
10008108:	10012b68 	.word	0x10012b68

1000810c <pxp_monitor_service_found_handler>:
*
* @param[in] at_ble_primary_service_found_t  Primary service parameter
*
*/
at_ble_status_t pxp_monitor_service_found_handler(void *params)
{
1000810c:	b570      	push	{r4, r5, r6, lr}
1000810e:	0004      	movs	r4, r0
	at_ble_uuid_t *pxp_service_uuid;
	at_ble_status_t status = AT_BLE_SUCCESS;
	at_ble_primary_service_found_t *primary_service_params;
	primary_service_params = (at_ble_primary_service_found_t *)params;
	
	if(!ble_check_iscentral(primary_service_params->conn_handle))
10008110:	8800      	ldrh	r0, [r0, #0]
10008112:	4b25      	ldr	r3, [pc, #148]	; (100081a8 <pxp_monitor_service_found_handler+0x9c>)
10008114:	4798      	blx	r3
	{
		return AT_BLE_FAILURE;
10008116:	23e2      	movs	r3, #226	; 0xe2
	at_ble_uuid_t *pxp_service_uuid;
	at_ble_status_t status = AT_BLE_SUCCESS;
	at_ble_primary_service_found_t *primary_service_params;
	primary_service_params = (at_ble_primary_service_found_t *)params;
	
	if(!ble_check_iscentral(primary_service_params->conn_handle))
10008118:	2800      	cmp	r0, #0
1000811a:	d043      	beq.n	100081a4 <pxp_monitor_service_found_handler+0x98>
	{
		return AT_BLE_FAILURE;
	}
	
	pxp_connect_request_flag = PXP_DEV_SERVICE_FOUND;
1000811c:	2204      	movs	r2, #4
1000811e:	4b23      	ldr	r3, [pc, #140]	; (100081ac <pxp_monitor_service_found_handler+0xa0>)
10008120:	701a      	strb	r2, [r3, #0]
	
	pxp_service_uuid = &primary_service_params->service_uuid;
	if (pxp_service_uuid->type == AT_BLE_UUID_16) {
10008122:	79a2      	ldrb	r2, [r4, #6]
*
*/
at_ble_status_t pxp_monitor_service_found_handler(void *params)
{
	at_ble_uuid_t *pxp_service_uuid;
	at_ble_status_t status = AT_BLE_SUCCESS;
10008124:	2300      	movs	r3, #0
	}
	
	pxp_connect_request_flag = PXP_DEV_SERVICE_FOUND;
	
	pxp_service_uuid = &primary_service_params->service_uuid;
	if (pxp_service_uuid->type == AT_BLE_UUID_16) {
10008126:	2a00      	cmp	r2, #0
10008128:	d13c      	bne.n	100081a4 <pxp_monitor_service_found_handler+0x98>
		uint16_t service_uuid;
		service_uuid
		= ((pxp_service_uuid->uuid[1] <<
		8) | pxp_service_uuid->uuid[0]);
		switch (service_uuid) {
1000812a:	7a23      	ldrb	r3, [r4, #8]
1000812c:	021b      	lsls	r3, r3, #8
1000812e:	79e2      	ldrb	r2, [r4, #7]
10008130:	4313      	orrs	r3, r2
10008132:	b21b      	sxth	r3, r3
10008134:	4a1e      	ldr	r2, [pc, #120]	; (100081b0 <pxp_monitor_service_found_handler+0xa4>)
10008136:	4293      	cmp	r3, r2
10008138:	d006      	beq.n	10008148 <pxp_monitor_service_found_handler+0x3c>
1000813a:	4a1e      	ldr	r2, [pc, #120]	; (100081b4 <pxp_monitor_service_found_handler+0xa8>)
1000813c:	4293      	cmp	r3, r2
1000813e:	d021      	beq.n	10008184 <pxp_monitor_service_found_handler+0x78>
10008140:	4a1d      	ldr	r2, [pc, #116]	; (100081b8 <pxp_monitor_service_found_handler+0xac>)
10008142:	4293      	cmp	r3, r2
10008144:	d12d      	bne.n	100081a2 <pxp_monitor_service_found_handler+0x96>
10008146:	e00e      	b.n	10008166 <pxp_monitor_service_found_handler+0x5a>
			/* for link loss service Handler */
			case LINK_LOSS_SERVICE_UUID:
			{
				lls_handle.start_handle
				= primary_service_params->start_handle;
10008148:	4d1c      	ldr	r5, [pc, #112]	; (100081bc <pxp_monitor_service_found_handler+0xb0>)
1000814a:	8863      	ldrh	r3, [r4, #2]
1000814c:	802b      	strh	r3, [r5, #0]
				lls_handle.end_handle
				= primary_service_params->end_handle;
1000814e:	88a3      	ldrh	r3, [r4, #4]
10008150:	806b      	strh	r3, [r5, #2]
				DBG_LOG("link loss service discovered");
10008152:	481b      	ldr	r0, [pc, #108]	; (100081c0 <pxp_monitor_service_found_handler+0xb4>)
10008154:	4b1b      	ldr	r3, [pc, #108]	; (100081c4 <pxp_monitor_service_found_handler+0xb8>)
10008156:	4798      	blx	r3
10008158:	481b      	ldr	r0, [pc, #108]	; (100081c8 <pxp_monitor_service_found_handler+0xbc>)
1000815a:	4b1c      	ldr	r3, [pc, #112]	; (100081cc <pxp_monitor_service_found_handler+0xc0>)
1000815c:	4798      	blx	r3
				DBG_LOG_PTS("start_handle: %04X end_handle: %04X",
				primary_service_params->start_handle,
				primary_service_params->end_handle);				
				lls_handle.char_discovery=(at_ble_status_t)DISCOVER_SUCCESS;
1000815e:	230a      	movs	r3, #10
10008160:	71ab      	strb	r3, [r5, #6]
*
*/
at_ble_status_t pxp_monitor_service_found_handler(void *params)
{
	at_ble_uuid_t *pxp_service_uuid;
	at_ble_status_t status = AT_BLE_SUCCESS;
10008162:	2300      	movs	r3, #0
				DBG_LOG_PTS("start_handle: %04X end_handle: %04X",
				primary_service_params->start_handle,
				primary_service_params->end_handle);				
				lls_handle.char_discovery=(at_ble_status_t)DISCOVER_SUCCESS;
			}
			break;
10008164:	e01e      	b.n	100081a4 <pxp_monitor_service_found_handler+0x98>

			/* for Immediate Alert service Handler */
			case IMMEDIATE_ALERT_SERVICE_UUID:
			{
				ias_handle.start_handle
				= primary_service_params->start_handle;
10008166:	4d1a      	ldr	r5, [pc, #104]	; (100081d0 <pxp_monitor_service_found_handler+0xc4>)
10008168:	8863      	ldrh	r3, [r4, #2]
1000816a:	802b      	strh	r3, [r5, #0]
				ias_handle.end_handle
				= primary_service_params->end_handle;
1000816c:	88a3      	ldrh	r3, [r4, #4]
1000816e:	806b      	strh	r3, [r5, #2]
				DBG_LOG("Immediate Alert service discovered");
10008170:	4813      	ldr	r0, [pc, #76]	; (100081c0 <pxp_monitor_service_found_handler+0xb4>)
10008172:	4b14      	ldr	r3, [pc, #80]	; (100081c4 <pxp_monitor_service_found_handler+0xb8>)
10008174:	4798      	blx	r3
10008176:	4817      	ldr	r0, [pc, #92]	; (100081d4 <pxp_monitor_service_found_handler+0xc8>)
10008178:	4b14      	ldr	r3, [pc, #80]	; (100081cc <pxp_monitor_service_found_handler+0xc0>)
1000817a:	4798      	blx	r3
				DBG_LOG_PTS("start_handle: %04X end_handle: %04X ",
				primary_service_params->start_handle,
				primary_service_params->end_handle);				
				ias_handle.char_discovery=(at_ble_status_t)DISCOVER_SUCCESS;
1000817c:	230a      	movs	r3, #10
1000817e:	71ab      	strb	r3, [r5, #6]
*
*/
at_ble_status_t pxp_monitor_service_found_handler(void *params)
{
	at_ble_uuid_t *pxp_service_uuid;
	at_ble_status_t status = AT_BLE_SUCCESS;
10008180:	2300      	movs	r3, #0
				DBG_LOG_PTS("start_handle: %04X end_handle: %04X ",
				primary_service_params->start_handle,
				primary_service_params->end_handle);				
				ias_handle.char_discovery=(at_ble_status_t)DISCOVER_SUCCESS;
			}
			break;
10008182:	e00f      	b.n	100081a4 <pxp_monitor_service_found_handler+0x98>

			/* for Tx Power service Handler */
			case TX_POWER_SERVICE_UUID:
			{
				txps_handle.start_handle
				= primary_service_params->start_handle;
10008184:	4d14      	ldr	r5, [pc, #80]	; (100081d8 <pxp_monitor_service_found_handler+0xcc>)
10008186:	8863      	ldrh	r3, [r4, #2]
10008188:	802b      	strh	r3, [r5, #0]
				txps_handle.end_handle
				= primary_service_params->end_handle;
1000818a:	88a3      	ldrh	r3, [r4, #4]
1000818c:	806b      	strh	r3, [r5, #2]
				DBG_LOG("Tx power service discovered");
1000818e:	480c      	ldr	r0, [pc, #48]	; (100081c0 <pxp_monitor_service_found_handler+0xb4>)
10008190:	4b0c      	ldr	r3, [pc, #48]	; (100081c4 <pxp_monitor_service_found_handler+0xb8>)
10008192:	4798      	blx	r3
10008194:	4811      	ldr	r0, [pc, #68]	; (100081dc <pxp_monitor_service_found_handler+0xd0>)
10008196:	4b0d      	ldr	r3, [pc, #52]	; (100081cc <pxp_monitor_service_found_handler+0xc0>)
10008198:	4798      	blx	r3
				DBG_LOG_PTS("start_handle: %04X end_handle: %04X",
				primary_service_params->start_handle,
				primary_service_params->end_handle);
				txps_handle.char_discovery=(at_ble_status_t)DISCOVER_SUCCESS;
1000819a:	230a      	movs	r3, #10
1000819c:	71ab      	strb	r3, [r5, #6]
*
*/
at_ble_status_t pxp_monitor_service_found_handler(void *params)
{
	at_ble_uuid_t *pxp_service_uuid;
	at_ble_status_t status = AT_BLE_SUCCESS;
1000819e:	2300      	movs	r3, #0
				DBG_LOG_PTS("start_handle: %04X end_handle: %04X",
				primary_service_params->start_handle,
				primary_service_params->end_handle);
				txps_handle.char_discovery=(at_ble_status_t)DISCOVER_SUCCESS;
			}
			break;
100081a0:	e000      	b.n	100081a4 <pxp_monitor_service_found_handler+0x98>

			default:
			status = AT_BLE_INVALID_PARAM; 
100081a2:	23cf      	movs	r3, #207	; 0xcf
			break;
		}
	}
	return status;
}
100081a4:	0018      	movs	r0, r3
100081a6:	bd70      	pop	{r4, r5, r6, pc}
100081a8:	1000b569 	.word	0x1000b569
100081ac:	10012b68 	.word	0x10012b68
100081b0:	00001803 	.word	0x00001803
100081b4:	00001804 	.word	0x00001804
100081b8:	00001802 	.word	0x00001802
100081bc:	10012ab0 	.word	0x10012ab0
100081c0:	100116bc 	.word	0x100116bc
100081c4:	10010565 	.word	0x10010565
100081c8:	100116c0 	.word	0x100116c0
100081cc:	10010445 	.word	0x10010445
100081d0:	10012abc 	.word	0x10012abc
100081d4:	100116e0 	.word	0x100116e0
100081d8:	10012ac8 	.word	0x10012ac8
100081dc:	10011704 	.word	0x10011704

100081e0 <pxp_monitor_characteristic_found_handler>:
* @param[in] characteristic_found Discovered characteristics params of a
*connected device
*
*/
at_ble_status_t pxp_monitor_characteristic_found_handler(void *params)
{
100081e0:	b510      	push	{r4, lr}
100081e2:	0004      	movs	r4, r0
	uint16_t charac_16_uuid;
	at_ble_characteristic_found_t *characteristic_found;
	characteristic_found = (at_ble_characteristic_found_t *)params;
	
	if(!ble_check_iscentral(characteristic_found->conn_handle))
100081e4:	8800      	ldrh	r0, [r0, #0]
100081e6:	4b14      	ldr	r3, [pc, #80]	; (10008238 <pxp_monitor_characteristic_found_handler+0x58>)
100081e8:	4798      	blx	r3
	{
		return AT_BLE_FAILURE;
100081ea:	23e2      	movs	r3, #226	; 0xe2
{
	uint16_t charac_16_uuid;
	at_ble_characteristic_found_t *characteristic_found;
	characteristic_found = (at_ble_characteristic_found_t *)params;
	
	if(!ble_check_iscentral(characteristic_found->conn_handle))
100081ec:	2800      	cmp	r0, #0
100081ee:	d021      	beq.n	10008234 <pxp_monitor_characteristic_found_handler+0x54>
	{
		return AT_BLE_FAILURE;
	}

	charac_16_uuid = (uint16_t)((characteristic_found->char_uuid.uuid[0]) |	\
100081f0:	7a62      	ldrb	r2, [r4, #9]
100081f2:	0212      	lsls	r2, r2, #8
100081f4:	7a23      	ldrb	r3, [r4, #8]
100081f6:	431a      	orrs	r2, r3
	(characteristic_found->char_uuid.uuid[1] << 8));

	if (charac_16_uuid == TX_POWER_LEVEL_CHAR_UUID) {
100081f8:	4b10      	ldr	r3, [pc, #64]	; (1000823c <pxp_monitor_characteristic_found_handler+0x5c>)
100081fa:	429a      	cmp	r2, r3
100081fc:	d104      	bne.n	10008208 <pxp_monitor_characteristic_found_handler+0x28>
		txps_handle.char_handle = characteristic_found->value_handle;
100081fe:	88a2      	ldrh	r2, [r4, #4]
10008200:	4b0f      	ldr	r3, [pc, #60]	; (10008240 <pxp_monitor_characteristic_found_handler+0x60>)
10008202:	809a      	strh	r2, [r3, #4]
			DBG_LOG_PTS("Immediate alert characteristics: Attrib handle %x property %x handle: %x uuid : %x",
					characteristic_found->char_handle, characteristic_found->properties,
					ias_handle.char_handle, charac_16_uuid);
		}
	}
	return AT_BLE_SUCCESS;
10008204:	2300      	movs	r3, #0
10008206:	e015      	b.n	10008234 <pxp_monitor_characteristic_found_handler+0x54>
10008208:	2300      	movs	r3, #0
	if (charac_16_uuid == TX_POWER_LEVEL_CHAR_UUID) {
		txps_handle.char_handle = characteristic_found->value_handle;
		DBG_LOG_PTS("Tx power characteristics: Attrib handle %x property %x handle: %x uuid : %x",
					characteristic_found->char_handle, characteristic_found->properties,
					txps_handle.char_handle, charac_16_uuid);
	} else if ((charac_16_uuid == ALERT_LEVEL_CHAR_UUID)) {
1000820a:	490e      	ldr	r1, [pc, #56]	; (10008244 <pxp_monitor_characteristic_found_handler+0x64>)
1000820c:	428a      	cmp	r2, r1
1000820e:	d111      	bne.n	10008234 <pxp_monitor_characteristic_found_handler+0x54>
		if ((characteristic_found->char_handle > lls_handle.start_handle) &&
10008210:	8863      	ldrh	r3, [r4, #2]
10008212:	4a0d      	ldr	r2, [pc, #52]	; (10008248 <pxp_monitor_characteristic_found_handler+0x68>)
10008214:	8812      	ldrh	r2, [r2, #0]
10008216:	429a      	cmp	r2, r3
10008218:	d208      	bcs.n	1000822c <pxp_monitor_characteristic_found_handler+0x4c>
				(characteristic_found->char_handle < lls_handle.end_handle)) {
1000821a:	4a0b      	ldr	r2, [pc, #44]	; (10008248 <pxp_monitor_characteristic_found_handler+0x68>)
		txps_handle.char_handle = characteristic_found->value_handle;
		DBG_LOG_PTS("Tx power characteristics: Attrib handle %x property %x handle: %x uuid : %x",
					characteristic_found->char_handle, characteristic_found->properties,
					txps_handle.char_handle, charac_16_uuid);
	} else if ((charac_16_uuid == ALERT_LEVEL_CHAR_UUID)) {
		if ((characteristic_found->char_handle > lls_handle.start_handle) &&
1000821c:	8852      	ldrh	r2, [r2, #2]
1000821e:	429a      	cmp	r2, r3
10008220:	d904      	bls.n	1000822c <pxp_monitor_characteristic_found_handler+0x4c>
				(characteristic_found->char_handle < lls_handle.end_handle)) {
			lls_handle.char_handle = characteristic_found->value_handle;
10008222:	88a2      	ldrh	r2, [r4, #4]
10008224:	4b08      	ldr	r3, [pc, #32]	; (10008248 <pxp_monitor_characteristic_found_handler+0x68>)
10008226:	809a      	strh	r2, [r3, #4]
			DBG_LOG_PTS("Immediate alert characteristics: Attrib handle %x property %x handle: %x uuid : %x",
					characteristic_found->char_handle, characteristic_found->properties,
					ias_handle.char_handle, charac_16_uuid);
		}
	}
	return AT_BLE_SUCCESS;
10008228:	2300      	movs	r3, #0
					txps_handle.char_handle, charac_16_uuid);
	} else if ((charac_16_uuid == ALERT_LEVEL_CHAR_UUID)) {
		if ((characteristic_found->char_handle > lls_handle.start_handle) &&
				(characteristic_found->char_handle < lls_handle.end_handle)) {
			lls_handle.char_handle = characteristic_found->value_handle;
			DBG_LOG_PTS("link loss characteristics: Attrib handle %x property %x handle: %x uuid : %x",
1000822a:	e003      	b.n	10008234 <pxp_monitor_characteristic_found_handler+0x54>
					characteristic_found->char_handle, characteristic_found->properties,
					lls_handle.char_handle, charac_16_uuid);
		} else {
			ias_handle.char_handle = characteristic_found->value_handle;
1000822c:	88a2      	ldrh	r2, [r4, #4]
1000822e:	4b07      	ldr	r3, [pc, #28]	; (1000824c <pxp_monitor_characteristic_found_handler+0x6c>)
10008230:	809a      	strh	r2, [r3, #4]
			DBG_LOG_PTS("Immediate alert characteristics: Attrib handle %x property %x handle: %x uuid : %x",
					characteristic_found->char_handle, characteristic_found->properties,
					ias_handle.char_handle, charac_16_uuid);
		}
	}
	return AT_BLE_SUCCESS;
10008232:	2300      	movs	r3, #0
}
10008234:	0018      	movs	r0, r3
10008236:	bd10      	pop	{r4, pc}
10008238:	1000b569 	.word	0x1000b569
1000823c:	00002a07 	.word	0x00002a07
10008240:	10012ac8 	.word	0x10012ac8
10008244:	00002a06 	.word	0x00002a06
10008248:	10012ab0 	.word	0x10012ab0
1000824c:	10012abc 	.word	0x10012abc

10008250 <pxp_monitor_discovery_complete_handler>:
*
* @param[in] discover_status discovery status of each handle
*
*/
at_ble_status_t pxp_monitor_discovery_complete_handler(void *params)
{
10008250:	b570      	push	{r4, r5, r6, lr}
10008252:	0004      	movs	r4, r0
	bool discover_char_flag = true;
	at_ble_discovery_complete_t *discover_status;
	discover_status = (at_ble_discovery_complete_t *)params;
	
	if(!ble_check_iscentral(discover_status->conn_handle))
10008254:	8800      	ldrh	r0, [r0, #0]
10008256:	4b71      	ldr	r3, [pc, #452]	; (1000841c <pxp_monitor_discovery_complete_handler+0x1cc>)
10008258:	4798      	blx	r3
	{
		return AT_BLE_FAILURE;
1000825a:	23e2      	movs	r3, #226	; 0xe2
{
	bool discover_char_flag = true;
	at_ble_discovery_complete_t *discover_status;
	discover_status = (at_ble_discovery_complete_t *)params;
	
	if(!ble_check_iscentral(discover_status->conn_handle))
1000825c:	2800      	cmp	r0, #0
1000825e:	d100      	bne.n	10008262 <pxp_monitor_discovery_complete_handler+0x12>
10008260:	e0da      	b.n	10008418 <pxp_monitor_discovery_complete_handler+0x1c8>
	{
		return AT_BLE_FAILURE;
	}
	
	DBG_LOG_DEV("discover complete operation %d and %d",discover_status->operation,discover_status->status);
10008262:	486f      	ldr	r0, [pc, #444]	; (10008420 <pxp_monitor_discovery_complete_handler+0x1d0>)
10008264:	4b6f      	ldr	r3, [pc, #444]	; (10008424 <pxp_monitor_discovery_complete_handler+0x1d4>)
10008266:	4798      	blx	r3
10008268:	78e2      	ldrb	r2, [r4, #3]
1000826a:	78a1      	ldrb	r1, [r4, #2]
1000826c:	486e      	ldr	r0, [pc, #440]	; (10008428 <pxp_monitor_discovery_complete_handler+0x1d8>)
1000826e:	4b6f      	ldr	r3, [pc, #444]	; (1000842c <pxp_monitor_discovery_complete_handler+0x1dc>)
10008270:	4798      	blx	r3
	if ((discover_status->status == DISCOVER_SUCCESS) || (discover_status->status == AT_BLE_SUCCESS)) {
10008272:	78e2      	ldrb	r2, [r4, #3]
10008274:	2a0a      	cmp	r2, #10
10008276:	d003      	beq.n	10008280 <pxp_monitor_discovery_complete_handler+0x30>
			}

			#endif
		}
	}
	return AT_BLE_SUCCESS;
10008278:	2300      	movs	r3, #0
	{
		return AT_BLE_FAILURE;
	}
	
	DBG_LOG_DEV("discover complete operation %d and %d",discover_status->operation,discover_status->status);
	if ((discover_status->status == DISCOVER_SUCCESS) || (discover_status->status == AT_BLE_SUCCESS)) {
1000827a:	2a00      	cmp	r2, #0
1000827c:	d000      	beq.n	10008280 <pxp_monitor_discovery_complete_handler+0x30>
1000827e:	e0cb      	b.n	10008418 <pxp_monitor_discovery_complete_handler+0x1c8>
		#if defined TX_POWER_SERVICE
		if ((txps_handle.char_discovery == DISCOVER_SUCCESS) && (discover_char_flag)) {
10008280:	4b6b      	ldr	r3, [pc, #428]	; (10008430 <pxp_monitor_discovery_complete_handler+0x1e0>)
10008282:	799b      	ldrb	r3, [r3, #6]
10008284:	2b0a      	cmp	r3, #10
10008286:	d118      	bne.n	100082ba <pxp_monitor_discovery_complete_handler+0x6a>
			if (at_ble_characteristic_discover_all(
10008288:	4b69      	ldr	r3, [pc, #420]	; (10008430 <pxp_monitor_discovery_complete_handler+0x1e0>)
1000828a:	885a      	ldrh	r2, [r3, #2]
1000828c:	8819      	ldrh	r1, [r3, #0]
1000828e:	8820      	ldrh	r0, [r4, #0]
10008290:	4b68      	ldr	r3, [pc, #416]	; (10008434 <pxp_monitor_discovery_complete_handler+0x1e4>)
10008292:	4798      	blx	r3
10008294:	2800      	cmp	r0, #0
10008296:	d106      	bne.n	100082a6 <pxp_monitor_discovery_complete_handler+0x56>
			discover_status->conn_handle,
			txps_handle.start_handle,
			txps_handle.end_handle) ==
			AT_BLE_SUCCESS) {
				DBG_LOG_DEV("Tx Characteristic Discovery Started");
10008298:	4861      	ldr	r0, [pc, #388]	; (10008420 <pxp_monitor_discovery_complete_handler+0x1d0>)
1000829a:	4b62      	ldr	r3, [pc, #392]	; (10008424 <pxp_monitor_discovery_complete_handler+0x1d4>)
1000829c:	4798      	blx	r3
1000829e:	4866      	ldr	r0, [pc, #408]	; (10008438 <pxp_monitor_discovery_complete_handler+0x1e8>)
100082a0:	4b62      	ldr	r3, [pc, #392]	; (1000842c <pxp_monitor_discovery_complete_handler+0x1dc>)
100082a2:	4798      	blx	r3
100082a4:	e005      	b.n	100082b2 <pxp_monitor_discovery_complete_handler+0x62>
			} else {
				DBG_LOG("Tx Characteristic Discovery Failed");
100082a6:	485e      	ldr	r0, [pc, #376]	; (10008420 <pxp_monitor_discovery_complete_handler+0x1d0>)
100082a8:	4b5e      	ldr	r3, [pc, #376]	; (10008424 <pxp_monitor_discovery_complete_handler+0x1d4>)
100082aa:	4798      	blx	r3
100082ac:	4863      	ldr	r0, [pc, #396]	; (1000843c <pxp_monitor_discovery_complete_handler+0x1ec>)
100082ae:	4b5f      	ldr	r3, [pc, #380]	; (1000842c <pxp_monitor_discovery_complete_handler+0x1dc>)
100082b0:	4798      	blx	r3
			}
			txps_handle.char_discovery = AT_BLE_FAILURE;
100082b2:	22e2      	movs	r2, #226	; 0xe2
100082b4:	4b5e      	ldr	r3, [pc, #376]	; (10008430 <pxp_monitor_discovery_complete_handler+0x1e0>)
100082b6:	719a      	strb	r2, [r3, #6]
			discover_char_flag = false;
100082b8:	e00b      	b.n	100082d2 <pxp_monitor_discovery_complete_handler+0x82>
		} else if (txps_handle.char_discovery == AT_BLE_INVALID_PARAM) {
100082ba:	2bcf      	cmp	r3, #207	; 0xcf
100082bc:	d000      	beq.n	100082c0 <pxp_monitor_discovery_complete_handler+0x70>
100082be:	e09f      	b.n	10008400 <pxp_monitor_discovery_complete_handler+0x1b0>
			DBG_LOG("Tx Power Service not Found");
100082c0:	4857      	ldr	r0, [pc, #348]	; (10008420 <pxp_monitor_discovery_complete_handler+0x1d0>)
100082c2:	4b58      	ldr	r3, [pc, #352]	; (10008424 <pxp_monitor_discovery_complete_handler+0x1d4>)
100082c4:	4798      	blx	r3
100082c6:	485e      	ldr	r0, [pc, #376]	; (10008440 <pxp_monitor_discovery_complete_handler+0x1f0>)
100082c8:	4b58      	ldr	r3, [pc, #352]	; (1000842c <pxp_monitor_discovery_complete_handler+0x1dc>)
100082ca:	4798      	blx	r3
			txps_handle.char_discovery = AT_BLE_INVALID_STATE;
100082cc:	22e0      	movs	r2, #224	; 0xe0
100082ce:	4b58      	ldr	r3, [pc, #352]	; (10008430 <pxp_monitor_discovery_complete_handler+0x1e0>)
100082d0:	719a      	strb	r2, [r3, #6]
		}

		#endif

		#if defined LINK_LOSS_SERVICE
		if ((lls_handle.char_discovery == DISCOVER_SUCCESS) &&
100082d2:	4b5c      	ldr	r3, [pc, #368]	; (10008444 <pxp_monitor_discovery_complete_handler+0x1f4>)
100082d4:	799b      	ldrb	r3, [r3, #6]
100082d6:	2500      	movs	r5, #0
100082d8:	2b0a      	cmp	r3, #10
100082da:	d028      	beq.n	1000832e <pxp_monitor_discovery_complete_handler+0xde>
100082dc:	e01c      	b.n	10008318 <pxp_monitor_discovery_complete_handler+0xc8>
		(discover_char_flag)) {
			if (at_ble_characteristic_discover_all(
100082de:	4b59      	ldr	r3, [pc, #356]	; (10008444 <pxp_monitor_discovery_complete_handler+0x1f4>)
100082e0:	885a      	ldrh	r2, [r3, #2]
100082e2:	8819      	ldrh	r1, [r3, #0]
100082e4:	8820      	ldrh	r0, [r4, #0]
100082e6:	4b53      	ldr	r3, [pc, #332]	; (10008434 <pxp_monitor_discovery_complete_handler+0x1e4>)
100082e8:	4798      	blx	r3
100082ea:	2800      	cmp	r0, #0
100082ec:	d106      	bne.n	100082fc <pxp_monitor_discovery_complete_handler+0xac>
			discover_status->conn_handle,
			lls_handle.start_handle,
			lls_handle.end_handle) ==
			AT_BLE_SUCCESS) 
			{
				DBG_LOG_DEV(
100082ee:	484c      	ldr	r0, [pc, #304]	; (10008420 <pxp_monitor_discovery_complete_handler+0x1d0>)
100082f0:	4b4c      	ldr	r3, [pc, #304]	; (10008424 <pxp_monitor_discovery_complete_handler+0x1d4>)
100082f2:	4798      	blx	r3
100082f4:	4854      	ldr	r0, [pc, #336]	; (10008448 <pxp_monitor_discovery_complete_handler+0x1f8>)
100082f6:	4b4d      	ldr	r3, [pc, #308]	; (1000842c <pxp_monitor_discovery_complete_handler+0x1dc>)
100082f8:	4798      	blx	r3
100082fa:	e008      	b.n	1000830e <pxp_monitor_discovery_complete_handler+0xbe>
				"Link Loss Characteristic Discovery Started");
			} else {
				lls_handle.char_discovery = AT_BLE_FAILURE;
100082fc:	22e2      	movs	r2, #226	; 0xe2
100082fe:	4b51      	ldr	r3, [pc, #324]	; (10008444 <pxp_monitor_discovery_complete_handler+0x1f4>)
10008300:	719a      	strb	r2, [r3, #6]
				DBG_LOG(
10008302:	4847      	ldr	r0, [pc, #284]	; (10008420 <pxp_monitor_discovery_complete_handler+0x1d0>)
10008304:	4b47      	ldr	r3, [pc, #284]	; (10008424 <pxp_monitor_discovery_complete_handler+0x1d4>)
10008306:	4798      	blx	r3
10008308:	4850      	ldr	r0, [pc, #320]	; (1000844c <pxp_monitor_discovery_complete_handler+0x1fc>)
1000830a:	4b48      	ldr	r3, [pc, #288]	; (1000842c <pxp_monitor_discovery_complete_handler+0x1dc>)
1000830c:	4798      	blx	r3
				"Link Loss Characteristic Discovery Failed");
			}
			lls_handle.char_discovery = AT_BLE_FAILURE;
1000830e:	22e2      	movs	r2, #226	; 0xe2
10008310:	4b4c      	ldr	r3, [pc, #304]	; (10008444 <pxp_monitor_discovery_complete_handler+0x1f4>)
10008312:	719a      	strb	r2, [r3, #6]
			discover_char_flag = false;
10008314:	2500      	movs	r5, #0
10008316:	e00a      	b.n	1000832e <pxp_monitor_discovery_complete_handler+0xde>
		} else if(lls_handle.char_discovery==AT_BLE_INVALID_PARAM) {
10008318:	2bcf      	cmp	r3, #207	; 0xcf
1000831a:	d108      	bne.n	1000832e <pxp_monitor_discovery_complete_handler+0xde>
			DBG_LOG("Link Loss Service not Available");
1000831c:	4840      	ldr	r0, [pc, #256]	; (10008420 <pxp_monitor_discovery_complete_handler+0x1d0>)
1000831e:	4b41      	ldr	r3, [pc, #260]	; (10008424 <pxp_monitor_discovery_complete_handler+0x1d4>)
10008320:	4798      	blx	r3
10008322:	484b      	ldr	r0, [pc, #300]	; (10008450 <pxp_monitor_discovery_complete_handler+0x200>)
10008324:	4b41      	ldr	r3, [pc, #260]	; (1000842c <pxp_monitor_discovery_complete_handler+0x1dc>)
10008326:	4798      	blx	r3
			lls_handle.char_discovery = AT_BLE_INVALID_STATE;
10008328:	22e0      	movs	r2, #224	; 0xe0
1000832a:	4b46      	ldr	r3, [pc, #280]	; (10008444 <pxp_monitor_discovery_complete_handler+0x1f4>)
1000832c:	719a      	strb	r2, [r3, #6]
		}

		#endif

		#if defined IMMEDIATE_ALERT_SERVICE
		if ((ias_handle.char_discovery == DISCOVER_SUCCESS) &&
1000832e:	4b49      	ldr	r3, [pc, #292]	; (10008454 <pxp_monitor_discovery_complete_handler+0x204>)
10008330:	799b      	ldrb	r3, [r3, #6]
10008332:	2b0a      	cmp	r3, #10
10008334:	d122      	bne.n	1000837c <pxp_monitor_discovery_complete_handler+0x12c>
10008336:	2d00      	cmp	r5, #0
10008338:	d069      	beq.n	1000840e <pxp_monitor_discovery_complete_handler+0x1be>
		(discover_char_flag)) {
			if (at_ble_characteristic_discover_all(
1000833a:	4b46      	ldr	r3, [pc, #280]	; (10008454 <pxp_monitor_discovery_complete_handler+0x204>)
1000833c:	885a      	ldrh	r2, [r3, #2]
1000833e:	8819      	ldrh	r1, [r3, #0]
10008340:	8820      	ldrh	r0, [r4, #0]
10008342:	4b3c      	ldr	r3, [pc, #240]	; (10008434 <pxp_monitor_discovery_complete_handler+0x1e4>)
10008344:	4798      	blx	r3
10008346:	2800      	cmp	r0, #0
10008348:	d106      	bne.n	10008358 <pxp_monitor_discovery_complete_handler+0x108>
			discover_status->conn_handle,
			ias_handle.start_handle,
			ias_handle.end_handle) ==
			AT_BLE_SUCCESS) {
				DBG_LOG_DEV(
1000834a:	4835      	ldr	r0, [pc, #212]	; (10008420 <pxp_monitor_discovery_complete_handler+0x1d0>)
1000834c:	4b35      	ldr	r3, [pc, #212]	; (10008424 <pxp_monitor_discovery_complete_handler+0x1d4>)
1000834e:	4798      	blx	r3
10008350:	4841      	ldr	r0, [pc, #260]	; (10008458 <pxp_monitor_discovery_complete_handler+0x208>)
10008352:	4b36      	ldr	r3, [pc, #216]	; (1000842c <pxp_monitor_discovery_complete_handler+0x1dc>)
10008354:	4798      	blx	r3
10008356:	e008      	b.n	1000836a <pxp_monitor_discovery_complete_handler+0x11a>
				"Immediate Characteristic Discovery Started");
				} else {
				ias_handle.char_discovery = AT_BLE_FAILURE;
10008358:	22e2      	movs	r2, #226	; 0xe2
1000835a:	4b3e      	ldr	r3, [pc, #248]	; (10008454 <pxp_monitor_discovery_complete_handler+0x204>)
1000835c:	719a      	strb	r2, [r3, #6]
				DBG_LOG(
1000835e:	4830      	ldr	r0, [pc, #192]	; (10008420 <pxp_monitor_discovery_complete_handler+0x1d0>)
10008360:	4b30      	ldr	r3, [pc, #192]	; (10008424 <pxp_monitor_discovery_complete_handler+0x1d4>)
10008362:	4798      	blx	r3
10008364:	483d      	ldr	r0, [pc, #244]	; (1000845c <pxp_monitor_discovery_complete_handler+0x20c>)
10008366:	4b31      	ldr	r3, [pc, #196]	; (1000842c <pxp_monitor_discovery_complete_handler+0x1dc>)
10008368:	4798      	blx	r3
				"Immediate Characteristic Discovery Failed");
			}
			ias_handle.char_discovery = AT_BLE_FAILURE;
1000836a:	22e2      	movs	r2, #226	; 0xe2
1000836c:	4b39      	ldr	r3, [pc, #228]	; (10008454 <pxp_monitor_discovery_complete_handler+0x204>)
1000836e:	719a      	strb	r2, [r3, #6]
			ias_handle.char_discovery = AT_BLE_INVALID_STATE;
		}

#endif
		
		if(lls_handle.char_discovery == AT_BLE_INVALID_STATE) {
10008370:	4b34      	ldr	r3, [pc, #208]	; (10008444 <pxp_monitor_discovery_complete_handler+0x1f4>)
10008372:	799b      	ldrb	r3, [r3, #6]
10008374:	2be0      	cmp	r3, #224	; 0xe0
10008376:	d010      	beq.n	1000839a <pxp_monitor_discovery_complete_handler+0x14a>
			}

			#endif
		}
	}
	return AT_BLE_SUCCESS;
10008378:	2300      	movs	r3, #0
1000837a:	e04d      	b.n	10008418 <pxp_monitor_discovery_complete_handler+0x1c8>
				DBG_LOG(
				"Immediate Characteristic Discovery Failed");
			}
			ias_handle.char_discovery = AT_BLE_FAILURE;
			discover_char_flag = false;
		} else if(ias_handle.char_discovery==AT_BLE_INVALID_PARAM) {
1000837c:	2bcf      	cmp	r3, #207	; 0xcf
1000837e:	d108      	bne.n	10008392 <pxp_monitor_discovery_complete_handler+0x142>
			DBG_LOG("Immediate Alert Service not Available");
10008380:	4827      	ldr	r0, [pc, #156]	; (10008420 <pxp_monitor_discovery_complete_handler+0x1d0>)
10008382:	4b28      	ldr	r3, [pc, #160]	; (10008424 <pxp_monitor_discovery_complete_handler+0x1d4>)
10008384:	4798      	blx	r3
10008386:	4836      	ldr	r0, [pc, #216]	; (10008460 <pxp_monitor_discovery_complete_handler+0x210>)
10008388:	4b28      	ldr	r3, [pc, #160]	; (1000842c <pxp_monitor_discovery_complete_handler+0x1dc>)
1000838a:	4798      	blx	r3
			ias_handle.char_discovery = AT_BLE_INVALID_STATE;
1000838c:	22e0      	movs	r2, #224	; 0xe0
1000838e:	4b31      	ldr	r3, [pc, #196]	; (10008454 <pxp_monitor_discovery_complete_handler+0x204>)
10008390:	719a      	strb	r2, [r3, #6]
		}

#endif
		
		if(lls_handle.char_discovery == AT_BLE_INVALID_STATE) {
10008392:	4b2c      	ldr	r3, [pc, #176]	; (10008444 <pxp_monitor_discovery_complete_handler+0x1f4>)
10008394:	799b      	ldrb	r3, [r3, #6]
10008396:	2be0      	cmp	r3, #224	; 0xe0
10008398:	d10b      	bne.n	100083b2 <pxp_monitor_discovery_complete_handler+0x162>
			DBG_LOG("PROXIMITY PROFILE NOT SUPPORTED");
1000839a:	4821      	ldr	r0, [pc, #132]	; (10008420 <pxp_monitor_discovery_complete_handler+0x1d0>)
1000839c:	4b21      	ldr	r3, [pc, #132]	; (10008424 <pxp_monitor_discovery_complete_handler+0x1d4>)
1000839e:	4798      	blx	r3
100083a0:	4830      	ldr	r0, [pc, #192]	; (10008464 <pxp_monitor_discovery_complete_handler+0x214>)
100083a2:	4b22      	ldr	r3, [pc, #136]	; (1000842c <pxp_monitor_discovery_complete_handler+0x1dc>)
100083a4:	4798      	blx	r3
			discover_char_flag = false;
			at_ble_disconnect(discover_status->conn_handle, AT_BLE_TERMINATED_BY_USER);
100083a6:	8820      	ldrh	r0, [r4, #0]
100083a8:	2113      	movs	r1, #19
100083aa:	4b2f      	ldr	r3, [pc, #188]	; (10008468 <pxp_monitor_discovery_complete_handler+0x218>)
100083ac:	4798      	blx	r3
			}

			#endif
		}
	}
	return AT_BLE_SUCCESS;
100083ae:	2300      	movs	r3, #0
100083b0:	e032      	b.n	10008418 <pxp_monitor_discovery_complete_handler+0x1c8>
			DBG_LOG("PROXIMITY PROFILE NOT SUPPORTED");
			discover_char_flag = false;
			at_ble_disconnect(discover_status->conn_handle, AT_BLE_TERMINATED_BY_USER);
		}
		
		if (discover_char_flag) {
100083b2:	2d00      	cmp	r5, #0
100083b4:	d022      	beq.n	100083fc <pxp_monitor_discovery_complete_handler+0x1ac>
			DBG_LOG_DEV("GATT characteristic discovery completed");
100083b6:	481a      	ldr	r0, [pc, #104]	; (10008420 <pxp_monitor_discovery_complete_handler+0x1d0>)
100083b8:	4b1a      	ldr	r3, [pc, #104]	; (10008424 <pxp_monitor_discovery_complete_handler+0x1d4>)
100083ba:	4798      	blx	r3
100083bc:	482b      	ldr	r0, [pc, #172]	; (1000846c <pxp_monitor_discovery_complete_handler+0x21c>)
100083be:	4b1b      	ldr	r3, [pc, #108]	; (1000842c <pxp_monitor_discovery_complete_handler+0x1dc>)
100083c0:	4798      	blx	r3
			#if defined LINK_LOSS_SERVICE
			/* set link loss profile to high alert upon connection */
			if (!(lls_alert_level_write(discover_status->conn_handle, lls_handle.char_handle,
100083c2:	4b20      	ldr	r3, [pc, #128]	; (10008444 <pxp_monitor_discovery_complete_handler+0x1f4>)
100083c4:	8899      	ldrh	r1, [r3, #4]
100083c6:	8820      	ldrh	r0, [r4, #0]
100083c8:	2202      	movs	r2, #2
100083ca:	4b29      	ldr	r3, [pc, #164]	; (10008470 <pxp_monitor_discovery_complete_handler+0x220>)
100083cc:	4798      	blx	r3
100083ce:	2800      	cmp	r0, #0
100083d0:	d005      	beq.n	100083de <pxp_monitor_discovery_complete_handler+0x18e>
			LLS_ALERT_LEVEL) == AT_BLE_SUCCESS)) {
				DBG_LOG("Link Loss write characteristics failed");
100083d2:	4813      	ldr	r0, [pc, #76]	; (10008420 <pxp_monitor_discovery_complete_handler+0x1d0>)
100083d4:	4b13      	ldr	r3, [pc, #76]	; (10008424 <pxp_monitor_discovery_complete_handler+0x1d4>)
100083d6:	4798      	blx	r3
100083d8:	4826      	ldr	r0, [pc, #152]	; (10008474 <pxp_monitor_discovery_complete_handler+0x224>)
100083da:	4b14      	ldr	r3, [pc, #80]	; (1000842c <pxp_monitor_discovery_complete_handler+0x1dc>)
100083dc:	4798      	blx	r3
			}

			#endif

			#if defined TX_POWER_SERVICE
			if (!(txps_power_read(discover_status->conn_handle,
100083de:	4b14      	ldr	r3, [pc, #80]	; (10008430 <pxp_monitor_discovery_complete_handler+0x1e0>)
100083e0:	8899      	ldrh	r1, [r3, #4]
100083e2:	8820      	ldrh	r0, [r4, #0]
100083e4:	4b24      	ldr	r3, [pc, #144]	; (10008478 <pxp_monitor_discovery_complete_handler+0x228>)
100083e6:	4798      	blx	r3
100083e8:	1e03      	subs	r3, r0, #0
100083ea:	d015      	beq.n	10008418 <pxp_monitor_discovery_complete_handler+0x1c8>
			txps_handle.char_handle) ==
			AT_BLE_SUCCESS)) {
				DBG_LOG("Characteristic Read Request failed");
100083ec:	480c      	ldr	r0, [pc, #48]	; (10008420 <pxp_monitor_discovery_complete_handler+0x1d0>)
100083ee:	4b0d      	ldr	r3, [pc, #52]	; (10008424 <pxp_monitor_discovery_complete_handler+0x1d4>)
100083f0:	4798      	blx	r3
100083f2:	4822      	ldr	r0, [pc, #136]	; (1000847c <pxp_monitor_discovery_complete_handler+0x22c>)
100083f4:	4b0d      	ldr	r3, [pc, #52]	; (1000842c <pxp_monitor_discovery_complete_handler+0x1dc>)
100083f6:	4798      	blx	r3
			}

			#endif
		}
	}
	return AT_BLE_SUCCESS;
100083f8:	2300      	movs	r3, #0
100083fa:	e00d      	b.n	10008418 <pxp_monitor_discovery_complete_handler+0x1c8>
100083fc:	2300      	movs	r3, #0
100083fe:	e00b      	b.n	10008418 <pxp_monitor_discovery_complete_handler+0x1c8>
		}

		#endif

		#if defined LINK_LOSS_SERVICE
		if ((lls_handle.char_discovery == DISCOVER_SUCCESS) &&
10008400:	4b10      	ldr	r3, [pc, #64]	; (10008444 <pxp_monitor_discovery_complete_handler+0x1f4>)
10008402:	799b      	ldrb	r3, [r3, #6]
10008404:	2b0a      	cmp	r3, #10
10008406:	d100      	bne.n	1000840a <pxp_monitor_discovery_complete_handler+0x1ba>
10008408:	e769      	b.n	100082de <pxp_monitor_discovery_complete_handler+0x8e>
* @param[in] discover_status discovery status of each handle
*
*/
at_ble_status_t pxp_monitor_discovery_complete_handler(void *params)
{
	bool discover_char_flag = true;
1000840a:	2501      	movs	r5, #1
1000840c:	e784      	b.n	10008318 <pxp_monitor_discovery_complete_handler+0xc8>
			ias_handle.char_discovery = AT_BLE_INVALID_STATE;
		}

#endif
		
		if(lls_handle.char_discovery == AT_BLE_INVALID_STATE) {
1000840e:	4b0d      	ldr	r3, [pc, #52]	; (10008444 <pxp_monitor_discovery_complete_handler+0x1f4>)
10008410:	799b      	ldrb	r3, [r3, #6]
10008412:	2be0      	cmp	r3, #224	; 0xe0
10008414:	d0c1      	beq.n	1000839a <pxp_monitor_discovery_complete_handler+0x14a>
			}

			#endif
		}
	}
	return AT_BLE_SUCCESS;
10008416:	2300      	movs	r3, #0
}
10008418:	0018      	movs	r0, r3
1000841a:	bd70      	pop	{r4, r5, r6, pc}
1000841c:	1000b569 	.word	0x1000b569
10008420:	100116bc 	.word	0x100116bc
10008424:	10010565 	.word	0x10010565
10008428:	10011720 	.word	0x10011720
1000842c:	10010445 	.word	0x10010445
10008430:	10012ac8 	.word	0x10012ac8
10008434:	1000d269 	.word	0x1000d269
10008438:	10011748 	.word	0x10011748
1000843c:	1001176c 	.word	0x1001176c
10008440:	10011790 	.word	0x10011790
10008444:	10012ab0 	.word	0x10012ab0
10008448:	100117ac 	.word	0x100117ac
1000844c:	100117d8 	.word	0x100117d8
10008450:	10011804 	.word	0x10011804
10008454:	10012abc 	.word	0x10012abc
10008458:	10011824 	.word	0x10011824
1000845c:	10011850 	.word	0x10011850
10008460:	1001187c 	.word	0x1001187c
10008464:	100118a4 	.word	0x100118a4
10008468:	1000d1cd 	.word	0x1000d1cd
1000846c:	100118c4 	.word	0x100118c4
10008470:	100089fd 	.word	0x100089fd
10008474:	100118ec 	.word	0x100118ec
10008478:	10008a8d 	.word	0x10008a8d
1000847c:	10011914 	.word	0x10011914

10008480 <pxp_monitor_characteristic_read_response>:
* if any read request send, response back event is handle.
* compare the read response characteristics with available service.
* and data is handle to the respective service.
*/
at_ble_status_t pxp_monitor_characteristic_read_response(void *params)
{
10008480:	b510      	push	{r4, lr}
10008482:	0004      	movs	r4, r0
	at_ble_characteristic_read_response_t *char_read_resp;
	char_read_resp = (at_ble_characteristic_read_response_t *)params;
	
	if(!ble_check_iscentral(char_read_resp->conn_handle))
10008484:	8800      	ldrh	r0, [r0, #0]
10008486:	4b0d      	ldr	r3, [pc, #52]	; (100084bc <pxp_monitor_characteristic_read_response+0x3c>)
10008488:	4798      	blx	r3
	{
		return AT_BLE_FAILURE;
1000848a:	23e2      	movs	r3, #226	; 0xe2
at_ble_status_t pxp_monitor_characteristic_read_response(void *params)
{
	at_ble_characteristic_read_response_t *char_read_resp;
	char_read_resp = (at_ble_characteristic_read_response_t *)params;
	
	if(!ble_check_iscentral(char_read_resp->conn_handle))
1000848c:	2800      	cmp	r0, #0
1000848e:	d012      	beq.n	100084b6 <pxp_monitor_characteristic_read_response+0x36>
	{
		return AT_BLE_FAILURE;
	}
	
	#if defined TX_POWER_SERVICE
	txps_power_read_response(char_read_resp, &txps_handle);
10008490:	490b      	ldr	r1, [pc, #44]	; (100084c0 <pxp_monitor_characteristic_read_response+0x40>)
10008492:	0020      	movs	r0, r4
10008494:	4b0b      	ldr	r3, [pc, #44]	; (100084c4 <pxp_monitor_characteristic_read_response+0x44>)
10008496:	4798      	blx	r3
	#endif

	#if defined LINK_LOSS_SERVICE
	lls_alert_read_response(char_read_resp, &lls_handle);
10008498:	490b      	ldr	r1, [pc, #44]	; (100084c8 <pxp_monitor_characteristic_read_response+0x48>)
1000849a:	0020      	movs	r0, r4
1000849c:	4b0b      	ldr	r3, [pc, #44]	; (100084cc <pxp_monitor_characteristic_read_response+0x4c>)
1000849e:	4798      	blx	r3
	#endif
	DBG_LOG_DEV("Starting timer");
100084a0:	480b      	ldr	r0, [pc, #44]	; (100084d0 <pxp_monitor_characteristic_read_response+0x50>)
100084a2:	4b0c      	ldr	r3, [pc, #48]	; (100084d4 <pxp_monitor_characteristic_read_response+0x54>)
100084a4:	4798      	blx	r3
100084a6:	480c      	ldr	r0, [pc, #48]	; (100084d8 <pxp_monitor_characteristic_read_response+0x58>)
100084a8:	4b0c      	ldr	r3, [pc, #48]	; (100084dc <pxp_monitor_characteristic_read_response+0x5c>)
100084aa:	4798      	blx	r3
	hw_timer_start_func_cb(PXP_RSSI_UPDATE_INTERVAL);
100084ac:	4b0c      	ldr	r3, [pc, #48]	; (100084e0 <pxp_monitor_characteristic_read_response+0x60>)
100084ae:	681b      	ldr	r3, [r3, #0]
100084b0:	2001      	movs	r0, #1
100084b2:	4798      	blx	r3
	return AT_BLE_SUCCESS;
100084b4:	2300      	movs	r3, #0
}
100084b6:	0018      	movs	r0, r3
100084b8:	bd10      	pop	{r4, pc}
100084ba:	46c0      	nop			; (mov r8, r8)
100084bc:	1000b569 	.word	0x1000b569
100084c0:	10012ac8 	.word	0x10012ac8
100084c4:	10008aa5 	.word	0x10008aa5
100084c8:	10012ab0 	.word	0x10012ab0
100084cc:	10008a21 	.word	0x10008a21
100084d0:	100116bc 	.word	0x100116bc
100084d4:	10010565 	.word	0x10010565
100084d8:	10011938 	.word	0x10011938
100084dc:	10010445 	.word	0x10010445
100084e0:	10012b6c 	.word	0x10012b6c

100084e4 <pxp_monitor_init>:
/* *@brief Initializes Proximity profile
* handler Pointer reference to respective variables
*
*/
void pxp_monitor_init(void *param)
{
100084e4:	b570      	push	{r4, r5, r6, lr}
	UNUSED(param);
	lls_handle.char_data = lls_char_data;
100084e6:	4a15      	ldr	r2, [pc, #84]	; (1000853c <pxp_monitor_init+0x58>)
100084e8:	4b15      	ldr	r3, [pc, #84]	; (10008540 <pxp_monitor_init+0x5c>)
100084ea:	609a      	str	r2, [r3, #8]
	ias_handle.char_data = ias_char_data;
100084ec:	4a15      	ldr	r2, [pc, #84]	; (10008544 <pxp_monitor_init+0x60>)
100084ee:	4b16      	ldr	r3, [pc, #88]	; (10008548 <pxp_monitor_init+0x64>)
100084f0:	609a      	str	r2, [r3, #8]
	txps_handle.char_data = tx_power_char_data;	
100084f2:	4a16      	ldr	r2, [pc, #88]	; (1000854c <pxp_monitor_init+0x68>)
100084f4:	4b16      	ldr	r3, [pc, #88]	; (10008550 <pxp_monitor_init+0x6c>)
100084f6:	609a      	str	r2, [r3, #8]
	DBG_LOG("High Alert RSSI range: %ddBm and above", (PXP_HIGH_ALERT_RANGE-1));
100084f8:	4e16      	ldr	r6, [pc, #88]	; (10008554 <pxp_monitor_init+0x70>)
100084fa:	0030      	movs	r0, r6
100084fc:	4d16      	ldr	r5, [pc, #88]	; (10008558 <pxp_monitor_init+0x74>)
100084fe:	47a8      	blx	r5
10008500:	215b      	movs	r1, #91	; 0x5b
10008502:	4249      	negs	r1, r1
10008504:	4815      	ldr	r0, [pc, #84]	; (1000855c <pxp_monitor_init+0x78>)
10008506:	4c16      	ldr	r4, [pc, #88]	; (10008560 <pxp_monitor_init+0x7c>)
10008508:	47a0      	blx	r4
	DBG_LOG("Mild Alert RSSI range: %ddBm to %ddBm", PXP_LOW_ALERT_RANGE, PXP_HIGH_ALERT_RANGE);
1000850a:	0030      	movs	r0, r6
1000850c:	47a8      	blx	r5
1000850e:	225a      	movs	r2, #90	; 0x5a
10008510:	4252      	negs	r2, r2
10008512:	2146      	movs	r1, #70	; 0x46
10008514:	4249      	negs	r1, r1
10008516:	4813      	ldr	r0, [pc, #76]	; (10008564 <pxp_monitor_init+0x80>)
10008518:	47a0      	blx	r4
	DBG_LOG("No Alert RSSI range:   %ddBm and below", (PXP_LOW_ALERT_RANGE+1));
1000851a:	0030      	movs	r0, r6
1000851c:	47a8      	blx	r5
1000851e:	2145      	movs	r1, #69	; 0x45
10008520:	4249      	negs	r1, r1
10008522:	4811      	ldr	r0, [pc, #68]	; (10008568 <pxp_monitor_init+0x84>)
10008524:	47a0      	blx	r4
	
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, BLE_GAP_EVENT_TYPE, pxp_gap_handle);
10008526:	4a11      	ldr	r2, [pc, #68]	; (1000856c <pxp_monitor_init+0x88>)
10008528:	2100      	movs	r1, #0
1000852a:	2000      	movs	r0, #0
1000852c:	4c10      	ldr	r4, [pc, #64]	; (10008570 <pxp_monitor_init+0x8c>)
1000852e:	47a0      	blx	r4
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, BLE_GATT_CLIENT_EVENT_TYPE, pxp_gatt_client_handle);
10008530:	4a10      	ldr	r2, [pc, #64]	; (10008574 <pxp_monitor_init+0x90>)
10008532:	2101      	movs	r1, #1
10008534:	2000      	movs	r0, #0
10008536:	47a0      	blx	r4
}
10008538:	bd70      	pop	{r4, r5, r6, pc}
1000853a:	46c0      	nop			; (mov r8, r8)
1000853c:	1001461c 	.word	0x1001461c
10008540:	10012ab0 	.word	0x10012ab0
10008544:	10014620 	.word	0x10014620
10008548:	10012abc 	.word	0x10012abc
1000854c:	10014640 	.word	0x10014640
10008550:	10012ac8 	.word	0x10012ac8
10008554:	100116bc 	.word	0x100116bc
10008558:	10010565 	.word	0x10010565
1000855c:	10011948 	.word	0x10011948
10008560:	10010445 	.word	0x10010445
10008564:	10011970 	.word	0x10011970
10008568:	10011998 	.word	0x10011998
1000856c:	10011670 	.word	0x10011670
10008570:	1000ac31 	.word	0x1000ac31
10008574:	10011648 	.word	0x10011648

10008578 <pxp_monitor_connect_request>:
* @return @ref AT_BLE_INVALID_PARAM incorrect parameter.
* @return @ref AT_BLE_FAILURE Generic error.
*/
at_ble_status_t pxp_monitor_connect_request(at_ble_scan_info_t *scan_buffer,
uint8_t index)
{
10008578:	b510      	push	{r4, lr}
	memcpy((uint8_t *)&pxp_reporter_address,
1000857a:	4c13      	ldr	r4, [pc, #76]	; (100085c8 <pxp_monitor_connect_request+0x50>)
1000857c:	008b      	lsls	r3, r1, #2
1000857e:	185b      	adds	r3, r3, r1
10008580:	00db      	lsls	r3, r3, #3
10008582:	1859      	adds	r1, r3, r1
10008584:	1841      	adds	r1, r0, r1
10008586:	3101      	adds	r1, #1
10008588:	2207      	movs	r2, #7
1000858a:	0020      	movs	r0, r4
1000858c:	4b0f      	ldr	r3, [pc, #60]	; (100085cc <pxp_monitor_connect_request+0x54>)
1000858e:	4798      	blx	r3
	(uint8_t *)&scan_buffer[index].dev_addr,
	sizeof(at_ble_addr_t));

	if (gap_dev_connect(&pxp_reporter_address) == AT_BLE_SUCCESS) {
10008590:	0020      	movs	r0, r4
10008592:	4b0f      	ldr	r3, [pc, #60]	; (100085d0 <pxp_monitor_connect_request+0x58>)
10008594:	4798      	blx	r3
10008596:	1e04      	subs	r4, r0, #0
10008598:	d10d      	bne.n	100085b6 <pxp_monitor_connect_request+0x3e>
		DBG_LOG("PXP Connect request sent");
1000859a:	480e      	ldr	r0, [pc, #56]	; (100085d4 <pxp_monitor_connect_request+0x5c>)
1000859c:	4b0e      	ldr	r3, [pc, #56]	; (100085d8 <pxp_monitor_connect_request+0x60>)
1000859e:	4798      	blx	r3
100085a0:	480e      	ldr	r0, [pc, #56]	; (100085dc <pxp_monitor_connect_request+0x64>)
100085a2:	4b0f      	ldr	r3, [pc, #60]	; (100085e0 <pxp_monitor_connect_request+0x68>)
100085a4:	4798      	blx	r3
		pxp_connect_request_flag = PXP_DEV_CONNECTING;
100085a6:	2201      	movs	r2, #1
100085a8:	4b0e      	ldr	r3, [pc, #56]	; (100085e4 <pxp_monitor_connect_request+0x6c>)
100085aa:	701a      	strb	r2, [r3, #0]
		hw_timer_start_func_cb(PXP_CONNECT_REQ_INTERVAL);
100085ac:	4b0e      	ldr	r3, [pc, #56]	; (100085e8 <pxp_monitor_connect_request+0x70>)
100085ae:	681b      	ldr	r3, [r3, #0]
100085b0:	2014      	movs	r0, #20
100085b2:	4798      	blx	r3
		return AT_BLE_SUCCESS;
100085b4:	e006      	b.n	100085c4 <pxp_monitor_connect_request+0x4c>
		} else {
		DBG_LOG("PXP Connect request send failed");
100085b6:	4807      	ldr	r0, [pc, #28]	; (100085d4 <pxp_monitor_connect_request+0x5c>)
100085b8:	4b07      	ldr	r3, [pc, #28]	; (100085d8 <pxp_monitor_connect_request+0x60>)
100085ba:	4798      	blx	r3
100085bc:	480b      	ldr	r0, [pc, #44]	; (100085ec <pxp_monitor_connect_request+0x74>)
100085be:	4b08      	ldr	r3, [pc, #32]	; (100085e0 <pxp_monitor_connect_request+0x68>)
100085c0:	4798      	blx	r3
	}

	return AT_BLE_FAILURE;
100085c2:	24e2      	movs	r4, #226	; 0xe2
}
100085c4:	0020      	movs	r0, r4
100085c6:	bd10      	pop	{r4, pc}
100085c8:	10014638 	.word	0x10014638
100085cc:	10010423 	.word	0x10010423
100085d0:	1000afc1 	.word	0x1000afc1
100085d4:	100116bc 	.word	0x100116bc
100085d8:	10010565 	.word	0x10010565
100085dc:	100119c0 	.word	0x100119c0
100085e0:	10010445 	.word	0x10010445
100085e4:	10012b68 	.word	0x10012b68
100085e8:	10012b6c 	.word	0x10012b6c
100085ec:	100119dc 	.word	0x100119dc

100085f0 <pxp_monitor_scan_data_handler>:
* @return @ref AT_BLE_SUCCESS operation programmed successfully
* @return @ref AT_BLE_INVALID_PARAM incorrect parameter.
* @return @ref AT_BLE_FAILURE Generic error.
*/
at_ble_status_t pxp_monitor_scan_data_handler(void *params)
{
100085f0:	b5f0      	push	{r4, r5, r6, r7, lr}
100085f2:	465f      	mov	r7, fp
100085f4:	4656      	mov	r6, sl
100085f6:	464d      	mov	r5, r9
100085f8:	4644      	mov	r4, r8
100085fa:	b4f0      	push	{r4, r5, r6, r7}
100085fc:	b091      	sub	sp, #68	; 0x44
	uint8_t scan_device[MAX_SCAN_DEVICE];
	uint8_t pxp_scan_device_count = 0;
	uint8_t scanned_dev_count = scan_response_count;
100085fe:	4b5f      	ldr	r3, [pc, #380]	; (1000877c <pxp_monitor_scan_data_handler+0x18c>)
10008600:	781c      	ldrb	r4, [r3, #0]
10008602:	b2e4      	uxtb	r4, r4
	scan_index = 0;
10008604:	2200      	movs	r2, #0
10008606:	4b5e      	ldr	r3, [pc, #376]	; (10008780 <pxp_monitor_scan_data_handler+0x190>)
10008608:	701a      	strb	r2, [r3, #0]
	uint8_t index;
	at_ble_scan_info_t *scan_buffer = (at_ble_scan_info_t *)scan_info;
	memset(scan_device, 0, MAX_SCAN_DEVICE);
1000860a:	3214      	adds	r2, #20
1000860c:	2100      	movs	r1, #0
1000860e:	a80b      	add	r0, sp, #44	; 0x2c
10008610:	4b5c      	ldr	r3, [pc, #368]	; (10008784 <pxp_monitor_scan_data_handler+0x194>)
10008612:	4798      	blx	r3
	if (scanned_dev_count) {
10008614:	2c00      	cmp	r4, #0
10008616:	d077      	beq.n	10008708 <pxp_monitor_scan_data_handler+0x118>
10008618:	4a5b      	ldr	r2, [pc, #364]	; (10008788 <pxp_monitor_scan_data_handler+0x198>)
1000861a:	2300      	movs	r3, #0
1000861c:	2700      	movs	r7, #0
		
		at_ble_uuid_t service_uuid;

		for (index = 0; index < scanned_dev_count; index++) {			
			/* Display only the connectible devices*/
			if((scan_buffer[index].type == AT_BLE_ADV_TYPE_DIRECTED) 
1000861e:	7811      	ldrb	r1, [r2, #0]
10008620:	2901      	cmp	r1, #1
10008622:	d803      	bhi.n	1000862c <pxp_monitor_scan_data_handler+0x3c>
				|| (scan_buffer[index].type == AT_BLE_ADV_TYPE_UNDIRECTED)) {				
				scan_device[pxp_scan_device_count++] = index;
10008624:	1c79      	adds	r1, r7, #1
10008626:	a80b      	add	r0, sp, #44	; 0x2c
10008628:	55c3      	strb	r3, [r0, r7]
1000862a:	b2cf      	uxtb	r7, r1
	memset(scan_device, 0, MAX_SCAN_DEVICE);
	if (scanned_dev_count) {
		
		at_ble_uuid_t service_uuid;

		for (index = 0; index < scanned_dev_count; index++) {			
1000862c:	3301      	adds	r3, #1
1000862e:	b2db      	uxtb	r3, r3
10008630:	3229      	adds	r2, #41	; 0x29
10008632:	429c      	cmp	r4, r3
10008634:	d1f3      	bne.n	1000861e <pxp_monitor_scan_data_handler+0x2e>
				|| (scan_buffer[index].type == AT_BLE_ADV_TYPE_UNDIRECTED)) {				
				scan_device[pxp_scan_device_count++] = index;
			}
		}
		
		if (pxp_scan_device_count) {		
10008636:	2f00      	cmp	r7, #0
10008638:	d100      	bne.n	1000863c <pxp_monitor_scan_data_handler+0x4c>
1000863a:	e085      	b.n	10008748 <pxp_monitor_scan_data_handler+0x158>
			/* Service type to be searched */
			service_uuid.type = AT_BLE_UUID_16;
1000863c:	ab06      	add	r3, sp, #24
1000863e:	2200      	movs	r2, #0
10008640:	701a      	strb	r2, [r3, #0]

			/* Service UUID */
			service_uuid.uuid[1] = (LINK_LOSS_SERVICE_UUID >> 8);
10008642:	3218      	adds	r2, #24
10008644:	709a      	strb	r2, [r3, #2]
			service_uuid.uuid[0] = (uint8_t)LINK_LOSS_SERVICE_UUID;
10008646:	3a15      	subs	r2, #21
10008648:	705a      	strb	r2, [r3, #1]
1000864a:	1e7b      	subs	r3, r7, #1
1000864c:	b2db      	uxtb	r3, r3
1000864e:	3301      	adds	r3, #1
10008650:	4699      	mov	r9, r3
10008652:	2500      	movs	r5, #0
			
			for (index = 0; index < pxp_scan_device_count; index++) {
				DBG_LOG("Info: Device found address [%d]  0x%02X%02X%02X%02X%02X%02X ",
10008654:	4b4d      	ldr	r3, [pc, #308]	; (1000878c <pxp_monitor_scan_data_handler+0x19c>)
10008656:	469b      	mov	fp, r3
				index,
				scan_buffer[scan_device[index]].dev_addr.addr[5],
10008658:	4b4b      	ldr	r3, [pc, #300]	; (10008788 <pxp_monitor_scan_data_handler+0x198>)
1000865a:	469a      	mov	sl, r3
1000865c:	46b8      	mov	r8, r7
1000865e:	464b      	mov	r3, r9
10008660:	9305      	str	r3, [sp, #20]
10008662:	b2ee      	uxtb	r6, r5
			/* Service UUID */
			service_uuid.uuid[1] = (LINK_LOSS_SERVICE_UUID >> 8);
			service_uuid.uuid[0] = (uint8_t)LINK_LOSS_SERVICE_UUID;
			
			for (index = 0; index < pxp_scan_device_count; index++) {
				DBG_LOG("Info: Device found address [%d]  0x%02X%02X%02X%02X%02X%02X ",
10008664:	484a      	ldr	r0, [pc, #296]	; (10008790 <pxp_monitor_scan_data_handler+0x1a0>)
10008666:	47d8      	blx	fp
				index,
				scan_buffer[scan_device[index]].dev_addr.addr[5],
10008668:	ab0b      	add	r3, sp, #44	; 0x2c
1000866a:	5ceb      	ldrb	r3, [r5, r3]
1000866c:	009c      	lsls	r4, r3, #2
1000866e:	18e4      	adds	r4, r4, r3
10008670:	00e4      	lsls	r4, r4, #3
10008672:	18e4      	adds	r4, r4, r3
10008674:	4454      	add	r4, sl
			/* Service UUID */
			service_uuid.uuid[1] = (LINK_LOSS_SERVICE_UUID >> 8);
			service_uuid.uuid[0] = (uint8_t)LINK_LOSS_SERVICE_UUID;
			
			for (index = 0; index < pxp_scan_device_count; index++) {
				DBG_LOG("Info: Device found address [%d]  0x%02X%02X%02X%02X%02X%02X ",
10008676:	79a3      	ldrb	r3, [r4, #6]
10008678:	79e2      	ldrb	r2, [r4, #7]
1000867a:	78a1      	ldrb	r1, [r4, #2]
1000867c:	9103      	str	r1, [sp, #12]
1000867e:	78e1      	ldrb	r1, [r4, #3]
10008680:	9102      	str	r1, [sp, #8]
10008682:	7921      	ldrb	r1, [r4, #4]
10008684:	9101      	str	r1, [sp, #4]
10008686:	7961      	ldrb	r1, [r4, #5]
10008688:	9100      	str	r1, [sp, #0]
1000868a:	0029      	movs	r1, r5
1000868c:	4841      	ldr	r0, [pc, #260]	; (10008794 <pxp_monitor_scan_data_handler+0x1a4>)
1000868e:	4f42      	ldr	r7, [pc, #264]	; (10008798 <pxp_monitor_scan_data_handler+0x1a8>)
10008690:	47b8      	blx	r7
				scan_buffer[scan_device[index]].dev_addr.addr[3],
				scan_buffer[scan_device[index]].dev_addr.addr[2],
				scan_buffer[scan_device[index]].dev_addr.addr[1],
				scan_buffer[scan_device[index]].dev_addr.addr[0]);
				
				if (scan_info_parse(&scan_buffer[scan_device[index]], &service_uuid,
10008692:	2203      	movs	r2, #3
10008694:	a906      	add	r1, sp, #24
10008696:	0020      	movs	r0, r4
10008698:	4b40      	ldr	r3, [pc, #256]	; (1000879c <pxp_monitor_scan_data_handler+0x1ac>)
1000869a:	4798      	blx	r3
1000869c:	2800      	cmp	r0, #0
1000869e:	d108      	bne.n	100086b2 <pxp_monitor_scan_data_handler+0xc2>
				AD_TYPE_COMPLETE_LIST_UUID) ==
				AT_BLE_SUCCESS) {
					/* Device Service UUID  matched */
					pxp_supp_scan_index[scan_index++] = index;
100086a0:	4a37      	ldr	r2, [pc, #220]	; (10008780 <pxp_monitor_scan_data_handler+0x190>)
100086a2:	7813      	ldrb	r3, [r2, #0]
100086a4:	1c59      	adds	r1, r3, #1
100086a6:	7011      	strb	r1, [r2, #0]
100086a8:	4a3d      	ldr	r2, [pc, #244]	; (100087a0 <pxp_monitor_scan_data_handler+0x1b0>)
100086aa:	54d6      	strb	r6, [r2, r3]
					DBG_LOG_CONT("---PXP");
100086ac:	483d      	ldr	r0, [pc, #244]	; (100087a4 <pxp_monitor_scan_data_handler+0x1b4>)
100086ae:	4b3a      	ldr	r3, [pc, #232]	; (10008798 <pxp_monitor_scan_data_handler+0x1a8>)
100086b0:	4798      	blx	r3
100086b2:	3501      	adds	r5, #1

			/* Service UUID */
			service_uuid.uuid[1] = (LINK_LOSS_SERVICE_UUID >> 8);
			service_uuid.uuid[0] = (uint8_t)LINK_LOSS_SERVICE_UUID;
			
			for (index = 0; index < pxp_scan_device_count; index++) {
100086b4:	9b05      	ldr	r3, [sp, #20]
100086b6:	429d      	cmp	r5, r3
100086b8:	d1d3      	bne.n	10008662 <pxp_monitor_scan_data_handler+0x72>
100086ba:	e03f      	b.n	1000873c <pxp_monitor_scan_data_handler+0x14c>
		
		/*Updating the index pointer to connect */
		if(pxp_scan_device_count) {  
			/* Successful device found event*/
			uint8_t deci_index = pxp_scan_device_count;
			deci_index+=PXP_ASCII_TO_DECIMAL_VALUE;
100086bc:	3730      	adds	r7, #48	; 0x30
100086be:	b2fd      	uxtb	r5, r7
			do {
				DBG_LOG("Select Index number to Connect or [s] to scan");
100086c0:	4e32      	ldr	r6, [pc, #200]	; (1000878c <pxp_monitor_scan_data_handler+0x19c>)
100086c2:	4833      	ldr	r0, [pc, #204]	; (10008790 <pxp_monitor_scan_data_handler+0x1a0>)
100086c4:	47b0      	blx	r6
100086c6:	4838      	ldr	r0, [pc, #224]	; (100087a8 <pxp_monitor_scan_data_handler+0x1b8>)
100086c8:	4b33      	ldr	r3, [pc, #204]	; (10008798 <pxp_monitor_scan_data_handler+0x1a8>)
100086ca:	4798      	blx	r3
				index = getchar_b11();
100086cc:	4b37      	ldr	r3, [pc, #220]	; (100087ac <pxp_monitor_scan_data_handler+0x1bc>)
100086ce:	4798      	blx	r3
100086d0:	0004      	movs	r4, r0
100086d2:	b2c7      	uxtb	r7, r0
				DBG_LOG("%c", index);
100086d4:	482e      	ldr	r0, [pc, #184]	; (10008790 <pxp_monitor_scan_data_handler+0x1a0>)
100086d6:	47b0      	blx	r6
100086d8:	20ff      	movs	r0, #255	; 0xff
100086da:	4020      	ands	r0, r4
100086dc:	4b34      	ldr	r3, [pc, #208]	; (100087b0 <pxp_monitor_scan_data_handler+0x1c0>)
100086de:	4798      	blx	r3
			} while (!(((index < (deci_index)) && (index >='0')) || (index == 's')));	
100086e0:	42bd      	cmp	r5, r7
100086e2:	d901      	bls.n	100086e8 <pxp_monitor_scan_data_handler+0xf8>
100086e4:	2f2f      	cmp	r7, #47	; 0x2f
100086e6:	d802      	bhi.n	100086ee <pxp_monitor_scan_data_handler+0xfe>
100086e8:	2f73      	cmp	r7, #115	; 0x73
100086ea:	d1ea      	bne.n	100086c2 <pxp_monitor_scan_data_handler+0xd2>
100086ec:	e001      	b.n	100086f2 <pxp_monitor_scan_data_handler+0x102>
			
			if(index == 's') {
100086ee:	2f73      	cmp	r7, #115	; 0x73
100086f0:	d102      	bne.n	100086f8 <pxp_monitor_scan_data_handler+0x108>
				return gap_dev_scan();
100086f2:	4b30      	ldr	r3, [pc, #192]	; (100087b4 <pxp_monitor_scan_data_handler+0x1c4>)
100086f4:	4798      	blx	r3
100086f6:	e03a      	b.n	1000876e <pxp_monitor_scan_data_handler+0x17e>
			} else {
				index -= PXP_ASCII_TO_DECIMAL_VALUE;
				return pxp_monitor_connect_request(scan_buffer,	scan_device[index]);
100086f8:	3f30      	subs	r7, #48	; 0x30
100086fa:	b2ff      	uxtb	r7, r7
100086fc:	ab0b      	add	r3, sp, #44	; 0x2c
100086fe:	5dd9      	ldrb	r1, [r3, r7]
10008700:	4821      	ldr	r0, [pc, #132]	; (10008788 <pxp_monitor_scan_data_handler+0x198>)
10008702:	4b2d      	ldr	r3, [pc, #180]	; (100087b8 <pxp_monitor_scan_data_handler+0x1c8>)
10008704:	4798      	blx	r3
10008706:	e032      	b.n	1000876e <pxp_monitor_scan_data_handler+0x17e>
		}			
	} else {  
		/* from no device found event*/
		do
		{
			DBG_LOG("Select [s] to scan again");
10008708:	4d21      	ldr	r5, [pc, #132]	; (10008790 <pxp_monitor_scan_data_handler+0x1a0>)
1000870a:	4f20      	ldr	r7, [pc, #128]	; (1000878c <pxp_monitor_scan_data_handler+0x19c>)
1000870c:	4e2b      	ldr	r6, [pc, #172]	; (100087bc <pxp_monitor_scan_data_handler+0x1cc>)
1000870e:	0028      	movs	r0, r5
10008710:	47b8      	blx	r7
10008712:	0030      	movs	r0, r6
10008714:	4b20      	ldr	r3, [pc, #128]	; (10008798 <pxp_monitor_scan_data_handler+0x1a8>)
10008716:	4798      	blx	r3
			index = getchar_b11();
10008718:	4b24      	ldr	r3, [pc, #144]	; (100087ac <pxp_monitor_scan_data_handler+0x1bc>)
1000871a:	4798      	blx	r3
1000871c:	0004      	movs	r4, r0
			DBG_LOG("%c", index);
1000871e:	0028      	movs	r0, r5
10008720:	47b8      	blx	r7
10008722:	20ff      	movs	r0, #255	; 0xff
10008724:	4020      	ands	r0, r4
10008726:	4b22      	ldr	r3, [pc, #136]	; (100087b0 <pxp_monitor_scan_data_handler+0x1c0>)
10008728:	4798      	blx	r3
		} while (!(index == 's')); 
1000872a:	b2e4      	uxtb	r4, r4
1000872c:	2c73      	cmp	r4, #115	; 0x73
1000872e:	d1ee      	bne.n	1000870e <pxp_monitor_scan_data_handler+0x11e>
		
		if(index == 's') {
			return gap_dev_scan();
10008730:	4b20      	ldr	r3, [pc, #128]	; (100087b4 <pxp_monitor_scan_data_handler+0x1c4>)
10008732:	4798      	blx	r3
10008734:	e01b      	b.n	1000876e <pxp_monitor_scan_data_handler+0x17e>
		if (!scan_index)  {
			DBG_LOG("Proximity Profile supported device not found ");
		}		
		
		/* Stop the current scan active */
		at_ble_scan_stop();
10008736:	4b22      	ldr	r3, [pc, #136]	; (100087c0 <pxp_monitor_scan_data_handler+0x1d0>)
10008738:	4798      	blx	r3
1000873a:	e7bf      	b.n	100086bc <pxp_monitor_scan_data_handler+0xcc>
1000873c:	4647      	mov	r7, r8
					DBG_LOG_CONT("---PXP");
				}
			}			
		}

		if (!scan_index)  {
1000873e:	4b10      	ldr	r3, [pc, #64]	; (10008780 <pxp_monitor_scan_data_handler+0x190>)
10008740:	781b      	ldrb	r3, [r3, #0]
10008742:	2b00      	cmp	r3, #0
10008744:	d1f7      	bne.n	10008736 <pxp_monitor_scan_data_handler+0x146>
10008746:	e009      	b.n	1000875c <pxp_monitor_scan_data_handler+0x16c>
			DBG_LOG("Proximity Profile supported device not found ");
10008748:	4811      	ldr	r0, [pc, #68]	; (10008790 <pxp_monitor_scan_data_handler+0x1a0>)
1000874a:	4b10      	ldr	r3, [pc, #64]	; (1000878c <pxp_monitor_scan_data_handler+0x19c>)
1000874c:	4798      	blx	r3
1000874e:	481d      	ldr	r0, [pc, #116]	; (100087c4 <pxp_monitor_scan_data_handler+0x1d4>)
10008750:	4b11      	ldr	r3, [pc, #68]	; (10008798 <pxp_monitor_scan_data_handler+0x1a8>)
10008752:	4798      	blx	r3
		}		
		
		/* Stop the current scan active */
		at_ble_scan_stop();
10008754:	4b1a      	ldr	r3, [pc, #104]	; (100087c0 <pxp_monitor_scan_data_handler+0x1d0>)
10008756:	4798      	blx	r3
		if(index == 's') {
			return gap_dev_scan();
		}
	}		
        ALL_UNUSED(params);
	return AT_BLE_FAILURE;
10008758:	20e2      	movs	r0, #226	; 0xe2
1000875a:	e008      	b.n	1000876e <pxp_monitor_scan_data_handler+0x17e>
				}
			}			
		}

		if (!scan_index)  {
			DBG_LOG("Proximity Profile supported device not found ");
1000875c:	480c      	ldr	r0, [pc, #48]	; (10008790 <pxp_monitor_scan_data_handler+0x1a0>)
1000875e:	4b0b      	ldr	r3, [pc, #44]	; (1000878c <pxp_monitor_scan_data_handler+0x19c>)
10008760:	4798      	blx	r3
10008762:	4818      	ldr	r0, [pc, #96]	; (100087c4 <pxp_monitor_scan_data_handler+0x1d4>)
10008764:	4b0c      	ldr	r3, [pc, #48]	; (10008798 <pxp_monitor_scan_data_handler+0x1a8>)
10008766:	4798      	blx	r3
		}		
		
		/* Stop the current scan active */
		at_ble_scan_stop();
10008768:	4b15      	ldr	r3, [pc, #84]	; (100087c0 <pxp_monitor_scan_data_handler+0x1d0>)
1000876a:	4798      	blx	r3
1000876c:	e7a6      	b.n	100086bc <pxp_monitor_scan_data_handler+0xcc>
			return gap_dev_scan();
		}
	}		
        ALL_UNUSED(params);
	return AT_BLE_FAILURE;
}
1000876e:	b011      	add	sp, #68	; 0x44
10008770:	bc3c      	pop	{r2, r3, r4, r5}
10008772:	4690      	mov	r8, r2
10008774:	4699      	mov	r9, r3
10008776:	46a2      	mov	sl, r4
10008778:	46ab      	mov	fp, r5
1000877a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000877c:	10013464 	.word	0x10013464
10008780:	10012b70 	.word	0x10012b70
10008784:	10010435 	.word	0x10010435
10008788:	10014a30 	.word	0x10014a30
1000878c:	10010565 	.word	0x10010565
10008790:	100116bc 	.word	0x100116bc
10008794:	100119fc 	.word	0x100119fc
10008798:	10010445 	.word	0x10010445
1000879c:	1000b061 	.word	0x1000b061
100087a0:	10014624 	.word	0x10014624
100087a4:	10011a3c 	.word	0x10011a3c
100087a8:	10011a44 	.word	0x10011a44
100087ac:	1000bb11 	.word	0x1000bb11
100087b0:	10010479 	.word	0x10010479
100087b4:	1000b009 	.word	0x1000b009
100087b8:	10008579 	.word	0x10008579
100087bc:	10011a74 	.word	0x10011a74
100087c0:	1000d0d5 	.word	0x1000d0d5
100087c4:	10011a90 	.word	0x10011a90

100087c8 <pxp_monitor_start_scan>:

at_ble_status_t pxp_monitor_start_scan(void)
{
100087c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (peripheral_state_callback != NULL)
100087ca:	4b26      	ldr	r3, [pc, #152]	; (10008864 <pxp_monitor_start_scan+0x9c>)
100087cc:	681b      	ldr	r3, [r3, #0]
100087ce:	2b00      	cmp	r3, #0
100087d0:	d00a      	beq.n	100087e8 <pxp_monitor_start_scan+0x20>
	{
		if (peripheral_state_callback() == PERIPHERAL_ADVERTISING_STATE)
100087d2:	4798      	blx	r3
100087d4:	2801      	cmp	r0, #1
100087d6:	d107      	bne.n	100087e8 <pxp_monitor_start_scan+0x20>
		{
			DBG_LOG("Peripheral is already Advertising. Scan not permitted");
100087d8:	4823      	ldr	r0, [pc, #140]	; (10008868 <pxp_monitor_start_scan+0xa0>)
100087da:	4b24      	ldr	r3, [pc, #144]	; (1000886c <pxp_monitor_start_scan+0xa4>)
100087dc:	4798      	blx	r3
100087de:	4824      	ldr	r0, [pc, #144]	; (10008870 <pxp_monitor_start_scan+0xa8>)
100087e0:	4b24      	ldr	r3, [pc, #144]	; (10008874 <pxp_monitor_start_scan+0xac>)
100087e2:	4798      	blx	r3
			return AT_BLE_FAILURE;
100087e4:	24e2      	movs	r4, #226	; 0xe2
100087e6:	e03a      	b.n	1000885e <pxp_monitor_start_scan+0x96>
		}
	}
	
	char index_value;
	hw_timer_stop_func_cb();
100087e8:	4b23      	ldr	r3, [pc, #140]	; (10008878 <pxp_monitor_start_scan+0xb0>)
100087ea:	681b      	ldr	r3, [r3, #0]
100087ec:	4798      	blx	r3
	do
	{
		DBG_LOG("Select [r] to Reconnect or [s] Scan");
100087ee:	4d1e      	ldr	r5, [pc, #120]	; (10008868 <pxp_monitor_start_scan+0xa0>)
100087f0:	4e1e      	ldr	r6, [pc, #120]	; (1000886c <pxp_monitor_start_scan+0xa4>)
100087f2:	0028      	movs	r0, r5
100087f4:	47b0      	blx	r6
100087f6:	4821      	ldr	r0, [pc, #132]	; (1000887c <pxp_monitor_start_scan+0xb4>)
100087f8:	4b1e      	ldr	r3, [pc, #120]	; (10008874 <pxp_monitor_start_scan+0xac>)
100087fa:	4798      	blx	r3
		index_value = getchar_b11();
100087fc:	4b20      	ldr	r3, [pc, #128]	; (10008880 <pxp_monitor_start_scan+0xb8>)
100087fe:	4798      	blx	r3
10008800:	0004      	movs	r4, r0
10008802:	b2c7      	uxtb	r7, r0
		DBG_LOG("%c", index_value);
10008804:	0028      	movs	r0, r5
10008806:	47b0      	blx	r6
10008808:	20ff      	movs	r0, #255	; 0xff
1000880a:	4020      	ands	r0, r4
1000880c:	4b1d      	ldr	r3, [pc, #116]	; (10008884 <pxp_monitor_start_scan+0xbc>)
1000880e:	4798      	blx	r3
	}	while (!((index_value == 'r') || (index_value == 's')));
10008810:	003b      	movs	r3, r7
10008812:	3b72      	subs	r3, #114	; 0x72
10008814:	2b01      	cmp	r3, #1
10008816:	d8ec      	bhi.n	100087f2 <pxp_monitor_start_scan+0x2a>
	
	if(index_value == 'r') {
10008818:	2f72      	cmp	r7, #114	; 0x72
1000881a:	d11a      	bne.n	10008852 <pxp_monitor_start_scan+0x8a>
		if (gap_dev_connect(&pxp_reporter_address) == AT_BLE_SUCCESS) {
1000881c:	481a      	ldr	r0, [pc, #104]	; (10008888 <pxp_monitor_start_scan+0xc0>)
1000881e:	4b1b      	ldr	r3, [pc, #108]	; (1000888c <pxp_monitor_start_scan+0xc4>)
10008820:	4798      	blx	r3
10008822:	1e04      	subs	r4, r0, #0
10008824:	d10d      	bne.n	10008842 <pxp_monitor_start_scan+0x7a>
			DBG_LOG("PXP Re-Connect request sent");
10008826:	4810      	ldr	r0, [pc, #64]	; (10008868 <pxp_monitor_start_scan+0xa0>)
10008828:	4b10      	ldr	r3, [pc, #64]	; (1000886c <pxp_monitor_start_scan+0xa4>)
1000882a:	4798      	blx	r3
1000882c:	4818      	ldr	r0, [pc, #96]	; (10008890 <pxp_monitor_start_scan+0xc8>)
1000882e:	4b11      	ldr	r3, [pc, #68]	; (10008874 <pxp_monitor_start_scan+0xac>)
10008830:	4798      	blx	r3
			pxp_connect_request_flag = PXP_DEV_CONNECTING;
10008832:	2201      	movs	r2, #1
10008834:	4b17      	ldr	r3, [pc, #92]	; (10008894 <pxp_monitor_start_scan+0xcc>)
10008836:	701a      	strb	r2, [r3, #0]
			hw_timer_start_func_cb(PXP_CONNECT_REQ_INTERVAL);
10008838:	4b17      	ldr	r3, [pc, #92]	; (10008898 <pxp_monitor_start_scan+0xd0>)
1000883a:	681b      	ldr	r3, [r3, #0]
1000883c:	2014      	movs	r0, #20
1000883e:	4798      	blx	r3
			return AT_BLE_SUCCESS;
10008840:	e00d      	b.n	1000885e <pxp_monitor_start_scan+0x96>
			} else {
			DBG_LOG("PXP Re-Connect request send failed");
10008842:	4809      	ldr	r0, [pc, #36]	; (10008868 <pxp_monitor_start_scan+0xa0>)
10008844:	4b09      	ldr	r3, [pc, #36]	; (1000886c <pxp_monitor_start_scan+0xa4>)
10008846:	4798      	blx	r3
10008848:	4814      	ldr	r0, [pc, #80]	; (1000889c <pxp_monitor_start_scan+0xd4>)
1000884a:	4b0a      	ldr	r3, [pc, #40]	; (10008874 <pxp_monitor_start_scan+0xac>)
1000884c:	4798      	blx	r3
		}
	}
	else if(index_value == 's') {
		return gap_dev_scan();
	}
	return AT_BLE_FAILURE;
1000884e:	24e2      	movs	r4, #226	; 0xe2
10008850:	e005      	b.n	1000885e <pxp_monitor_start_scan+0x96>
10008852:	24e2      	movs	r4, #226	; 0xe2
			return AT_BLE_SUCCESS;
			} else {
			DBG_LOG("PXP Re-Connect request send failed");
		}
	}
	else if(index_value == 's') {
10008854:	2f73      	cmp	r7, #115	; 0x73
10008856:	d102      	bne.n	1000885e <pxp_monitor_start_scan+0x96>
		return gap_dev_scan();
10008858:	4b11      	ldr	r3, [pc, #68]	; (100088a0 <pxp_monitor_start_scan+0xd8>)
1000885a:	4798      	blx	r3
1000885c:	0004      	movs	r4, r0
	}
	return AT_BLE_FAILURE;
}
1000885e:	0020      	movs	r0, r4
10008860:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10008862:	46c0      	nop			; (mov r8, r8)
10008864:	10012b5c 	.word	0x10012b5c
10008868:	100116bc 	.word	0x100116bc
1000886c:	10010565 	.word	0x10010565
10008870:	10011ac0 	.word	0x10011ac0
10008874:	10010445 	.word	0x10010445
10008878:	10012b64 	.word	0x10012b64
1000887c:	10011af8 	.word	0x10011af8
10008880:	1000bb11 	.word	0x1000bb11
10008884:	10010479 	.word	0x10010479
10008888:	10014638 	.word	0x10014638
1000888c:	1000afc1 	.word	0x1000afc1
10008890:	10011b1c 	.word	0x10011b1c
10008894:	10012b68 	.word	0x10012b68
10008898:	10012b6c 	.word	0x10012b6c
1000889c:	10011b38 	.word	0x10011b38
100088a0:	1000b009 	.word	0x1000b009

100088a4 <pxp_disconnect_event_handler>:
* @return @ref AT_BLE_SUCCESS Reconnect request sent to previously connected
*device
* @return @ref AT_BLE_FAILURE Reconnection fails.
*/
at_ble_status_t pxp_disconnect_event_handler(void *params)
{	
100088a4:	b510      	push	{r4, lr}
100088a6:	0004      	movs	r4, r0
	at_ble_disconnected_t *disconnect;
	disconnect = (at_ble_disconnected_t *)params;
	static ble_peripheral_state_t peripheral_state = PERIPHERAL_IDLE_STATE;
	
	if(!ble_check_disconnected_iscentral(disconnect->handle))
100088a8:	8800      	ldrh	r0, [r0, #0]
100088aa:	4b1a      	ldr	r3, [pc, #104]	; (10008914 <pxp_disconnect_event_handler+0x70>)
100088ac:	4798      	blx	r3
100088ae:	2800      	cmp	r0, #0
100088b0:	d103      	bne.n	100088ba <pxp_disconnect_event_handler+0x16>
	{
		pxp_monitor_start_scan();
100088b2:	4b19      	ldr	r3, [pc, #100]	; (10008918 <pxp_disconnect_event_handler+0x74>)
100088b4:	4798      	blx	r3
		return AT_BLE_FAILURE;
100088b6:	20e2      	movs	r0, #226	; 0xe2
100088b8:	e02b      	b.n	10008912 <pxp_disconnect_event_handler+0x6e>
	}
	else if(peripheral_state_callback != NULL)
100088ba:	4b18      	ldr	r3, [pc, #96]	; (1000891c <pxp_disconnect_event_handler+0x78>)
100088bc:	681b      	ldr	r3, [r3, #0]
100088be:	2b00      	cmp	r3, #0
100088c0:	d002      	beq.n	100088c8 <pxp_disconnect_event_handler+0x24>
	{
		peripheral_state = peripheral_state_callback();
100088c2:	4798      	blx	r3
100088c4:	4b16      	ldr	r3, [pc, #88]	; (10008920 <pxp_disconnect_event_handler+0x7c>)
100088c6:	7018      	strb	r0, [r3, #0]
	}
	
	if(peripheral_state != PERIPHERAL_ADVERTISING_STATE)
100088c8:	4b15      	ldr	r3, [pc, #84]	; (10008920 <pxp_disconnect_event_handler+0x7c>)
100088ca:	781b      	ldrb	r3, [r3, #0]
100088cc:	2b01      	cmp	r3, #1
100088ce:	d014      	beq.n	100088fa <pxp_disconnect_event_handler+0x56>
	{
		if((ble_check_device_state(disconnect->handle, BLE_DEVICE_DISCONNECTED) == AT_BLE_SUCCESS) ||
100088d0:	8820      	ldrh	r0, [r4, #0]
100088d2:	2101      	movs	r1, #1
100088d4:	4b13      	ldr	r3, [pc, #76]	; (10008924 <pxp_disconnect_event_handler+0x80>)
100088d6:	4798      	blx	r3
100088d8:	2800      	cmp	r0, #0
100088da:	d007      	beq.n	100088ec <pxp_disconnect_event_handler+0x48>
		(ble_check_device_state(disconnect->handle, BLE_DEVICE_DEFAULT_IDLE) == AT_BLE_SUCCESS))
100088dc:	8820      	ldrh	r0, [r4, #0]
100088de:	2100      	movs	r1, #0
100088e0:	4b10      	ldr	r3, [pc, #64]	; (10008924 <pxp_disconnect_event_handler+0x80>)
100088e2:	4798      	blx	r3
100088e4:	0003      	movs	r3, r0
	{
		pxp_connect_request_flag = PXP_DEV_UNCONNECTED;
		DBG_LOG("Peripheral is already Advertising,Scan not permitted");
	}

	return AT_BLE_FAILURE;
100088e6:	20e2      	movs	r0, #226	; 0xe2
		peripheral_state = peripheral_state_callback();
	}
	
	if(peripheral_state != PERIPHERAL_ADVERTISING_STATE)
	{
		if((ble_check_device_state(disconnect->handle, BLE_DEVICE_DISCONNECTED) == AT_BLE_SUCCESS) ||
100088e8:	2b00      	cmp	r3, #0
100088ea:	d112      	bne.n	10008912 <pxp_disconnect_event_handler+0x6e>
		(ble_check_device_state(disconnect->handle, BLE_DEVICE_DEFAULT_IDLE) == AT_BLE_SUCCESS))
		{
			if (disconnect->reason == AT_BLE_LL_COMMAND_DISALLOWED) {
100088ec:	78a3      	ldrb	r3, [r4, #2]
100088ee:	2b9c      	cmp	r3, #156	; 0x9c
100088f0:	d00e      	beq.n	10008910 <pxp_disconnect_event_handler+0x6c>
				return AT_BLE_SUCCESS;
			} else
				pxp_monitor_start_scan();
100088f2:	4b09      	ldr	r3, [pc, #36]	; (10008918 <pxp_disconnect_event_handler+0x74>)
100088f4:	4798      	blx	r3
	{
		pxp_connect_request_flag = PXP_DEV_UNCONNECTED;
		DBG_LOG("Peripheral is already Advertising,Scan not permitted");
	}

	return AT_BLE_FAILURE;
100088f6:	20e2      	movs	r0, #226	; 0xe2
100088f8:	e00b      	b.n	10008912 <pxp_disconnect_event_handler+0x6e>
				pxp_monitor_start_scan();
		}
	}
	else
	{
		pxp_connect_request_flag = PXP_DEV_UNCONNECTED;
100088fa:	2200      	movs	r2, #0
100088fc:	4b0a      	ldr	r3, [pc, #40]	; (10008928 <pxp_disconnect_event_handler+0x84>)
100088fe:	701a      	strb	r2, [r3, #0]
		DBG_LOG("Peripheral is already Advertising,Scan not permitted");
10008900:	480a      	ldr	r0, [pc, #40]	; (1000892c <pxp_disconnect_event_handler+0x88>)
10008902:	4b0b      	ldr	r3, [pc, #44]	; (10008930 <pxp_disconnect_event_handler+0x8c>)
10008904:	4798      	blx	r3
10008906:	480b      	ldr	r0, [pc, #44]	; (10008934 <pxp_disconnect_event_handler+0x90>)
10008908:	4b0b      	ldr	r3, [pc, #44]	; (10008938 <pxp_disconnect_event_handler+0x94>)
1000890a:	4798      	blx	r3
	}

	return AT_BLE_FAILURE;
1000890c:	20e2      	movs	r0, #226	; 0xe2
1000890e:	e000      	b.n	10008912 <pxp_disconnect_event_handler+0x6e>
	{
		if((ble_check_device_state(disconnect->handle, BLE_DEVICE_DISCONNECTED) == AT_BLE_SUCCESS) ||
		(ble_check_device_state(disconnect->handle, BLE_DEVICE_DEFAULT_IDLE) == AT_BLE_SUCCESS))
		{
			if (disconnect->reason == AT_BLE_LL_COMMAND_DISALLOWED) {
				return AT_BLE_SUCCESS;
10008910:	2000      	movs	r0, #0
		pxp_connect_request_flag = PXP_DEV_UNCONNECTED;
		DBG_LOG("Peripheral is already Advertising,Scan not permitted");
	}

	return AT_BLE_FAILURE;
}
10008912:	bd10      	pop	{r4, pc}
10008914:	1000b5d5 	.word	0x1000b5d5
10008918:	100087c9 	.word	0x100087c9
1000891c:	10012b5c 	.word	0x10012b5c
10008920:	10012b60 	.word	0x10012b60
10008924:	1000b601 	.word	0x1000b601
10008928:	10012b68 	.word	0x10012b68
1000892c:	100116bc 	.word	0x100116bc
10008930:	10010565 	.word	0x10010565
10008934:	10011b5c 	.word	0x10011b5c
10008938:	10010445 	.word	0x10010445

1000893c <pxp_monitor_service_discover>:
 * @return @ref AT_BLE_SUCCESS operation programmed successfully.
 * @return @ref AT_BLE_INVALID_PARAM incorrect parameter.
 * @return @ref AT_BLE_FAILURE Generic error.
 */
at_ble_status_t pxp_monitor_service_discover(at_ble_handle_t handle)
{
1000893c:	b510      	push	{r4, lr}
	at_ble_status_t status;
	status = at_ble_primary_service_discover_all(
1000893e:	4a0a      	ldr	r2, [pc, #40]	; (10008968 <pxp_monitor_service_discover+0x2c>)
10008940:	2101      	movs	r1, #1
10008942:	4b0a      	ldr	r3, [pc, #40]	; (1000896c <pxp_monitor_service_discover+0x30>)
10008944:	4798      	blx	r3
10008946:	1e04      	subs	r4, r0, #0
					handle,
					GATT_DISCOVERY_STARTING_HANDLE,
					GATT_DISCOVERY_ENDING_HANDLE);
	if (status == AT_BLE_SUCCESS) {
10008948:	d106      	bne.n	10008958 <pxp_monitor_service_discover+0x1c>
		DBG_LOG_DEV("GATT Discovery request started ");
1000894a:	4809      	ldr	r0, [pc, #36]	; (10008970 <pxp_monitor_service_discover+0x34>)
1000894c:	4b09      	ldr	r3, [pc, #36]	; (10008974 <pxp_monitor_service_discover+0x38>)
1000894e:	4798      	blx	r3
10008950:	4809      	ldr	r0, [pc, #36]	; (10008978 <pxp_monitor_service_discover+0x3c>)
10008952:	4b0a      	ldr	r3, [pc, #40]	; (1000897c <pxp_monitor_service_discover+0x40>)
10008954:	4798      	blx	r3
10008956:	e005      	b.n	10008964 <pxp_monitor_service_discover+0x28>
	} else {
		DBG_LOG("GATT Discovery request failed");
10008958:	4805      	ldr	r0, [pc, #20]	; (10008970 <pxp_monitor_service_discover+0x34>)
1000895a:	4b06      	ldr	r3, [pc, #24]	; (10008974 <pxp_monitor_service_discover+0x38>)
1000895c:	4798      	blx	r3
1000895e:	4808      	ldr	r0, [pc, #32]	; (10008980 <pxp_monitor_service_discover+0x44>)
10008960:	4b06      	ldr	r3, [pc, #24]	; (1000897c <pxp_monitor_service_discover+0x40>)
10008962:	4798      	blx	r3
	}
	
	return status;
}
10008964:	0020      	movs	r0, r4
10008966:	bd10      	pop	{r4, pc}
10008968:	0000ffff 	.word	0x0000ffff
1000896c:	1000d241 	.word	0x1000d241
10008970:	100116bc 	.word	0x100116bc
10008974:	10010565 	.word	0x10010565
10008978:	10011b94 	.word	0x10011b94
1000897c:	10010445 	.word	0x10010445
10008980:	10011bb4 	.word	0x10011bb4

10008984 <pxp_monitor_pair_done_handler>:

at_ble_status_t pxp_monitor_pair_done_handler(void *params)
{
10008984:	b510      	push	{r4, lr}
10008986:	0004      	movs	r4, r0
	at_ble_status_t discovery_status = AT_BLE_FAILURE;
	at_ble_pair_done_t *pair_done_val;
	pair_done_val = (at_ble_pair_done_t *)params;		
	if(!ble_check_iscentral(pair_done_val->handle))
10008988:	8840      	ldrh	r0, [r0, #2]
1000898a:	4b08      	ldr	r3, [pc, #32]	; (100089ac <pxp_monitor_pair_done_handler+0x28>)
1000898c:	4798      	blx	r3
	{
		return AT_BLE_FAILURE;
1000898e:	23e2      	movs	r3, #226	; 0xe2
at_ble_status_t pxp_monitor_pair_done_handler(void *params)
{
	at_ble_status_t discovery_status = AT_BLE_FAILURE;
	at_ble_pair_done_t *pair_done_val;
	pair_done_val = (at_ble_pair_done_t *)params;		
	if(!ble_check_iscentral(pair_done_val->handle))
10008990:	2800      	cmp	r0, #0
10008992:	d009      	beq.n	100089a8 <pxp_monitor_pair_done_handler+0x24>
		return AT_BLE_FAILURE;
	}

	//hw_timer_stop_func_cb();
	
	if (pair_done_val->status == AT_BLE_SUCCESS) {
10008994:	7922      	ldrb	r2, [r4, #4]
10008996:	2a00      	cmp	r2, #0
10008998:	d106      	bne.n	100089a8 <pxp_monitor_pair_done_handler+0x24>
		discovery_status = pxp_monitor_service_discover(pair_done_val->handle);
1000899a:	8860      	ldrh	r0, [r4, #2]
1000899c:	4b04      	ldr	r3, [pc, #16]	; (100089b0 <pxp_monitor_pair_done_handler+0x2c>)
1000899e:	4798      	blx	r3
	} else {
			return AT_BLE_FAILURE;
	}
	
	pxp_connect_request_flag = PXP_DEV_PAIRED;
100089a0:	2203      	movs	r2, #3
100089a2:	4b04      	ldr	r3, [pc, #16]	; (100089b4 <pxp_monitor_pair_done_handler+0x30>)
100089a4:	701a      	strb	r2, [r3, #0]
	
	return discovery_status;
100089a6:	0003      	movs	r3, r0
}
100089a8:	0018      	movs	r0, r3
100089aa:	bd10      	pop	{r4, pc}
100089ac:	1000b569 	.word	0x1000b569
100089b0:	1000893d 	.word	0x1000893d
100089b4:	10012b68 	.word	0x10012b68

100089b8 <pxp_monitor_encryption_change_handler>:

at_ble_status_t pxp_monitor_encryption_change_handler(void *params)
{
100089b8:	b510      	push	{r4, lr}
100089ba:	0004      	movs	r4, r0
	at_ble_status_t discovery_status = AT_BLE_FAILURE;
	at_ble_encryption_status_changed_t *encryption_status;
	encryption_status = (at_ble_encryption_status_changed_t *)params;
	
	if(!ble_check_iscentral(encryption_status->handle))
100089bc:	8800      	ldrh	r0, [r0, #0]
100089be:	4b09      	ldr	r3, [pc, #36]	; (100089e4 <pxp_monitor_encryption_change_handler+0x2c>)
100089c0:	4798      	blx	r3
	{
		return AT_BLE_FAILURE;
100089c2:	23e2      	movs	r3, #226	; 0xe2
{
	at_ble_status_t discovery_status = AT_BLE_FAILURE;
	at_ble_encryption_status_changed_t *encryption_status;
	encryption_status = (at_ble_encryption_status_changed_t *)params;
	
	if(!ble_check_iscentral(encryption_status->handle))
100089c4:	2800      	cmp	r0, #0
100089c6:	d00a      	beq.n	100089de <pxp_monitor_encryption_change_handler+0x26>
	{
		return AT_BLE_FAILURE;
	}
	hw_timer_stop_func_cb();
100089c8:	4b07      	ldr	r3, [pc, #28]	; (100089e8 <pxp_monitor_encryption_change_handler+0x30>)
100089ca:	681b      	ldr	r3, [r3, #0]
100089cc:	4798      	blx	r3
	if (encryption_status->status == AT_BLE_SUCCESS) {
100089ce:	78a2      	ldrb	r2, [r4, #2]
	return discovery_status;
}

at_ble_status_t pxp_monitor_encryption_change_handler(void *params)
{
	at_ble_status_t discovery_status = AT_BLE_FAILURE;
100089d0:	23e2      	movs	r3, #226	; 0xe2
	if(!ble_check_iscentral(encryption_status->handle))
	{
		return AT_BLE_FAILURE;
	}
	hw_timer_stop_func_cb();
	if (encryption_status->status == AT_BLE_SUCCESS) {
100089d2:	2a00      	cmp	r2, #0
100089d4:	d103      	bne.n	100089de <pxp_monitor_encryption_change_handler+0x26>
		discovery_status = pxp_monitor_service_discover(encryption_status->handle);
100089d6:	8820      	ldrh	r0, [r4, #0]
100089d8:	4b04      	ldr	r3, [pc, #16]	; (100089ec <pxp_monitor_encryption_change_handler+0x34>)
100089da:	4798      	blx	r3
100089dc:	0003      	movs	r3, r0
	}
	return discovery_status;
}
100089de:	0018      	movs	r0, r3
100089e0:	bd10      	pop	{r4, pc}
100089e2:	46c0      	nop			; (mov r8, r8)
100089e4:	1000b569 	.word	0x1000b569
100089e8:	10012b64 	.word	0x10012b64
100089ec:	1000893d 	.word	0x1000893d

100089f0 <register_hw_timer_start_func_cb>:
*
* @return none.
*/
void register_hw_timer_start_func_cb(hw_timer_start_func_cb_t timer_start_fn)
{
	hw_timer_start_func_cb = timer_start_fn;
100089f0:	4b01      	ldr	r3, [pc, #4]	; (100089f8 <register_hw_timer_start_func_cb+0x8>)
100089f2:	6018      	str	r0, [r3, #0]
}
100089f4:	4770      	bx	lr
100089f6:	46c0      	nop			; (mov r8, r8)
100089f8:	10012b6c 	.word	0x10012b6c

100089fc <lls_alert_level_write>:
 * @return @ref AT_BLE_FAILURE Generic error.
 */
at_ble_status_t lls_alert_level_write(at_ble_handle_t conn_handle,
		at_ble_handle_t char_handle,
		link_loss_alert_level_t alert_level)
{
100089fc:	b510      	push	{r4, lr}
100089fe:	b086      	sub	sp, #24
10008a00:	2317      	movs	r3, #23
10008a02:	446b      	add	r3, sp
10008a04:	701a      	strb	r2, [r3, #0]
	/* for link loss alert write with response */
	return (at_ble_characteristic_write(conn_handle,
10008a06:	2201      	movs	r2, #1
10008a08:	9202      	str	r2, [sp, #8]
10008a0a:	2200      	movs	r2, #0
10008a0c:	9201      	str	r2, [sp, #4]
10008a0e:	9300      	str	r3, [sp, #0]
10008a10:	2301      	movs	r3, #1
10008a12:	4c02      	ldr	r4, [pc, #8]	; (10008a1c <lls_alert_level_write+0x20>)
10008a14:	47a0      	blx	r4
	       LLS_WRITE_OFFSET,
	       LLS_WRITE_LENGTH,
	       (uint8_t *)&alert_level,
	       LLS_NO_SIGNED_WRITE,
	       LLS_WRITE_WITH_RESPONSE));
}
10008a16:	b006      	add	sp, #24
10008a18:	bd10      	pop	{r4, pc}
10008a1a:	46c0      	nop			; (mov r8, r8)
10008a1c:	1000d291 	.word	0x1000d291

10008a20 <lls_alert_read_response>:
 * @return Link Loss Alert level .
 * @return LLS_READ_RESP_INVALID if value are other than alert levels
 */
int8_t lls_alert_read_response(at_ble_characteristic_read_response_t *read_resp,
		gatt_lls_char_handler_t *lls_handler)
{
10008a20:	b510      	push	{r4, lr}
10008a22:	0004      	movs	r4, r0
	if (read_resp->char_handle == lls_handler->char_handle) {
10008a24:	8842      	ldrh	r2, [r0, #2]
10008a26:	888b      	ldrh	r3, [r1, #4]
10008a28:	429a      	cmp	r2, r3
10008a2a:	d11e      	bne.n	10008a6a <lls_alert_read_response+0x4a>
		memcpy(lls_handler->char_data,
10008a2c:	688b      	ldr	r3, [r1, #8]
10008a2e:	7a02      	ldrb	r2, [r0, #8]
10008a30:	701a      	strb	r2, [r3, #0]
				&read_resp->char_value[LLS_READ_OFFSET],
				LLS_READ_LENGTH);

		DBG_LOG("Link Loss Alert level set to");
10008a32:	480f      	ldr	r0, [pc, #60]	; (10008a70 <lls_alert_read_response+0x50>)
10008a34:	4b0f      	ldr	r3, [pc, #60]	; (10008a74 <lls_alert_read_response+0x54>)
10008a36:	4798      	blx	r3
10008a38:	480f      	ldr	r0, [pc, #60]	; (10008a78 <lls_alert_read_response+0x58>)
10008a3a:	4b10      	ldr	r3, [pc, #64]	; (10008a7c <lls_alert_read_response+0x5c>)
10008a3c:	4798      	blx	r3

		switch (read_resp->char_value[LLS_READ_OFFSET]) {
10008a3e:	7a23      	ldrb	r3, [r4, #8]
10008a40:	2b01      	cmp	r3, #1
10008a42:	d008      	beq.n	10008a56 <lls_alert_read_response+0x36>
10008a44:	2b00      	cmp	r3, #0
10008a46:	d002      	beq.n	10008a4e <lls_alert_read_response+0x2e>
10008a48:	2b02      	cmp	r3, #2
10008a4a:	d008      	beq.n	10008a5e <lls_alert_read_response+0x3e>
10008a4c:	e00a      	b.n	10008a64 <lls_alert_read_response+0x44>
		case LLS_NO_ALERT:
		{
			DBG_LOG_CONT(" NO ALERT ");
10008a4e:	480c      	ldr	r0, [pc, #48]	; (10008a80 <lls_alert_read_response+0x60>)
10008a50:	4b0a      	ldr	r3, [pc, #40]	; (10008a7c <lls_alert_read_response+0x5c>)
10008a52:	4798      	blx	r3
		}
		break;
10008a54:	e006      	b.n	10008a64 <lls_alert_read_response+0x44>

		case LLS_MILD_ALERT:
		{
			DBG_LOG_CONT(" MILD ALERT ");
10008a56:	480b      	ldr	r0, [pc, #44]	; (10008a84 <lls_alert_read_response+0x64>)
10008a58:	4b08      	ldr	r3, [pc, #32]	; (10008a7c <lls_alert_read_response+0x5c>)
10008a5a:	4798      	blx	r3
		}
		break;
10008a5c:	e002      	b.n	10008a64 <lls_alert_read_response+0x44>

		case LLS_HIGH_ALERT:
		{
			DBG_LOG_CONT(" HIGH ALERT ");
10008a5e:	480a      	ldr	r0, [pc, #40]	; (10008a88 <lls_alert_read_response+0x68>)
10008a60:	4b06      	ldr	r3, [pc, #24]	; (10008a7c <lls_alert_read_response+0x5c>)
10008a62:	4798      	blx	r3
		}
		break;
		}
		return (read_resp->char_value[LLS_READ_OFFSET]);
10008a64:	2008      	movs	r0, #8
10008a66:	5620      	ldrsb	r0, [r4, r0]
10008a68:	e001      	b.n	10008a6e <lls_alert_read_response+0x4e>
	}

	return(LLS_READ_RESP_INVALID);
10008a6a:	2001      	movs	r0, #1
10008a6c:	4240      	negs	r0, r0
}
10008a6e:	bd10      	pop	{r4, pc}
10008a70:	100116bc 	.word	0x100116bc
10008a74:	10010565 	.word	0x10010565
10008a78:	10011bd4 	.word	0x10011bd4
10008a7c:	10010445 	.word	0x10010445
10008a80:	10011bf4 	.word	0x10011bf4
10008a84:	10011c00 	.word	0x10011c00
10008a88:	10011c10 	.word	0x10011c10

10008a8c <txps_power_read>:
 * @return @ref AT_BLE_INVALID_PARAM Invalid arguments.
 * @return @ref AT_BLE_FAILURE Generic error.
 */
at_ble_status_t txps_power_read(at_ble_handle_t conn_handle,
		at_ble_handle_t char_handle)
{
10008a8c:	b510      	push	{r4, lr}
	if (char_handle == TXPS_INVALID_CHAR_HANDLE) {
		return (AT_BLE_ATT_INVALID_HANDLE);
10008a8e:	2301      	movs	r3, #1
 * @return @ref AT_BLE_FAILURE Generic error.
 */
at_ble_status_t txps_power_read(at_ble_handle_t conn_handle,
		at_ble_handle_t char_handle)
{
	if (char_handle == TXPS_INVALID_CHAR_HANDLE) {
10008a90:	2900      	cmp	r1, #0
10008a92:	d003      	beq.n	10008a9c <txps_power_read+0x10>
		return (AT_BLE_ATT_INVALID_HANDLE);
	} else {
		return (at_ble_characteristic_read(conn_handle, char_handle,
10008a94:	2200      	movs	r2, #0
10008a96:	4c02      	ldr	r4, [pc, #8]	; (10008aa0 <txps_power_read+0x14>)
10008a98:	47a0      	blx	r4
10008a9a:	0003      	movs	r3, r0
		       TXPS_POWER_READ_OFFSET,
		       TXPS_POWER_READ_LENGTH));
	}
}
10008a9c:	0018      	movs	r0, r3
10008a9e:	bd10      	pop	{r4, pc}
10008aa0:	1000d2dd 	.word	0x1000d2dd

10008aa4 <txps_power_read_response>:
 * @return @ref TXPS_INVALID_POWER_VALUE if is not valid result
 */
int8_t txps_power_read_response(
		at_ble_characteristic_read_response_t *char_read_resp,
		gatt_txps_char_handler_t *txps_handler)
{
10008aa4:	b570      	push	{r4, r5, r6, lr}
10008aa6:	0005      	movs	r5, r0
10008aa8:	000e      	movs	r6, r1
	int8_t tx_power = (int8_t)TXPS_INVALID_POWER_VALUE;
	if(char_read_resp->status != AT_BLE_SUCCESS){
10008aaa:	2382      	movs	r3, #130	; 0x82
10008aac:	009b      	lsls	r3, r3, #2
10008aae:	5cc0      	ldrb	r0, [r0, r3]
10008ab0:	2800      	cmp	r0, #0
10008ab2:	d001      	beq.n	10008ab8 <txps_power_read_response+0x14>
		return char_read_resp->status;
10008ab4:	b240      	sxtb	r0, r0
10008ab6:	e013      	b.n	10008ae0 <txps_power_read_response+0x3c>
	}
	else {
		if (char_read_resp->char_handle == txps_handler->char_handle) {
10008ab8:	886a      	ldrh	r2, [r5, #2]
10008aba:	888b      	ldrh	r3, [r1, #4]
10008abc:	429a      	cmp	r2, r3
10008abe:	d10d      	bne.n	10008adc <txps_power_read_response+0x38>
			tx_power = char_read_resp->char_value[TXPS_POWER_READ_OFFSET];
10008ac0:	2408      	movs	r4, #8
10008ac2:	572c      	ldrsb	r4, [r5, r4]
			DBG_LOG("Tx Power of device is %02d dBm", tx_power); 
10008ac4:	4807      	ldr	r0, [pc, #28]	; (10008ae4 <txps_power_read_response+0x40>)
10008ac6:	4b08      	ldr	r3, [pc, #32]	; (10008ae8 <txps_power_read_response+0x44>)
10008ac8:	4798      	blx	r3
10008aca:	0021      	movs	r1, r4
10008acc:	4807      	ldr	r0, [pc, #28]	; (10008aec <txps_power_read_response+0x48>)
10008ace:	4b08      	ldr	r3, [pc, #32]	; (10008af0 <txps_power_read_response+0x4c>)
10008ad0:	4798      	blx	r3
			memcpy(txps_handler->char_data,
10008ad2:	68b3      	ldr	r3, [r6, #8]
10008ad4:	7a2a      	ldrb	r2, [r5, #8]
10008ad6:	701a      	strb	r2, [r3, #0]
	if(char_read_resp->status != AT_BLE_SUCCESS){
		return char_read_resp->status;
	}
	else {
		if (char_read_resp->char_handle == txps_handler->char_handle) {
			tx_power = char_read_resp->char_value[TXPS_POWER_READ_OFFSET];
10008ad8:	0020      	movs	r0, r4
10008ada:	e001      	b.n	10008ae0 <txps_power_read_response+0x3c>
 */
int8_t txps_power_read_response(
		at_ble_characteristic_read_response_t *char_read_resp,
		gatt_txps_char_handler_t *txps_handler)
{
	int8_t tx_power = (int8_t)TXPS_INVALID_POWER_VALUE;
10008adc:	2001      	movs	r0, #1
10008ade:	4240      	negs	r0, r0
						TXPS_POWER_READ_OFFSET],
					TXPS_POWER_READ_LENGTH);
		}
	}
	return tx_power;
}
10008ae0:	bd70      	pop	{r4, r5, r6, pc}
10008ae2:	46c0      	nop			; (mov r8, r8)
10008ae4:	100116bc 	.word	0x100116bc
10008ae8:	10010565 	.word	0x10010565
10008aec:	10011c20 	.word	0x10011c20
10008af0:	10010445 	.word	0x10010445

10008af4 <dualtimer_isr_handler>:
 *
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
10008af4:	b510      	push	{r4, lr}
 * \retval The interrupt status of timer1/timer2
 */
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
10008af6:	4b0d      	ldr	r3, [pc, #52]	; (10008b2c <dualtimer_isr_handler+0x38>)
10008af8:	7d1b      	ldrb	r3, [r3, #20]
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
10008afa:	2b00      	cmp	r3, #0
10008afc:	d007      	beq.n	10008b0e <dualtimer_isr_handler+0x1a>
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
10008afe:	2201      	movs	r2, #1
10008b00:	4b0a      	ldr	r3, [pc, #40]	; (10008b2c <dualtimer_isr_handler+0x38>)
10008b02:	731a      	strb	r2, [r3, #12]
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
10008b04:	4b0a      	ldr	r3, [pc, #40]	; (10008b30 <dualtimer_isr_handler+0x3c>)
10008b06:	681b      	ldr	r3, [r3, #0]
10008b08:	2b00      	cmp	r3, #0
10008b0a:	d000      	beq.n	10008b0e <dualtimer_isr_handler+0x1a>
			dualtimer_callback_timer1();
10008b0c:	4798      	blx	r3
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
	} else {
		return DUALTIMER0->TIMER2MIS.reg;
10008b0e:	2334      	movs	r3, #52	; 0x34
10008b10:	4a06      	ldr	r2, [pc, #24]	; (10008b2c <dualtimer_isr_handler+0x38>)
10008b12:	5cd3      	ldrb	r3, [r2, r3]
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
10008b14:	2b00      	cmp	r3, #0
10008b16:	d007      	beq.n	10008b28 <dualtimer_isr_handler+0x34>
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
	} else {
		DUALTIMER0->TIMER2INTCLR.reg = 1;
10008b18:	2101      	movs	r1, #1
10008b1a:	232c      	movs	r3, #44	; 0x2c
10008b1c:	54d1      	strb	r1, [r2, r3]
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER2);
		if (dualtimer_callback_timer2)
10008b1e:	4b05      	ldr	r3, [pc, #20]	; (10008b34 <dualtimer_isr_handler+0x40>)
10008b20:	681b      	ldr	r3, [r3, #0]
10008b22:	2b00      	cmp	r3, #0
10008b24:	d000      	beq.n	10008b28 <dualtimer_isr_handler+0x34>
			dualtimer_callback_timer2();
10008b26:	4798      	blx	r3
	}
}
10008b28:	bd10      	pop	{r4, pc}
10008b2a:	46c0      	nop			; (mov r8, r8)
10008b2c:	40001000 	.word	0x40001000
10008b30:	10012b74 	.word	0x10012b74
10008b34:	10012b78 	.word	0x10012b78

10008b38 <dualtimer_get_config_defaults>:
 *
 * \param[out]  config  Pointer to a DUALTIMER module configuration structure to set
 */
void dualtimer_get_config_defaults(struct dualtimer_config *config)
{
	config->timer1.timer_enable = true;
10008b38:	2301      	movs	r3, #1
10008b3a:	7003      	strb	r3, [r0, #0]
	config->timer2.timer_enable = true;
10008b3c:	7303      	strb	r3, [r0, #12]

	config->timer1.counter_mode = DUALTIMER_PERIODIC_MODE;
10008b3e:	2202      	movs	r2, #2
10008b40:	7042      	strb	r2, [r0, #1]
	config->timer2.counter_mode = DUALTIMER_PERIODIC_MODE;
10008b42:	7342      	strb	r2, [r0, #13]

	config->timer1.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
10008b44:	7083      	strb	r3, [r0, #2]
	config->timer2.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
10008b46:	7383      	strb	r3, [r0, #14]

	config->timer1.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
10008b48:	2200      	movs	r2, #0
10008b4a:	70c2      	strb	r2, [r0, #3]
	config->timer2.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
10008b4c:	73c2      	strb	r2, [r0, #15]

	config->timer1.interrup_enable = true;
10008b4e:	7103      	strb	r3, [r0, #4]
	config->timer2.interrup_enable = true;
10008b50:	7403      	strb	r3, [r0, #16]

	config->timer1.load_value = 0;
10008b52:	6082      	str	r2, [r0, #8]
	config->timer2.load_value = 0;
10008b54:	6142      	str	r2, [r0, #20]

	config->clock_source = DUALTIMER_CLK_INPUT_0;
10008b56:	7602      	strb	r2, [r0, #24]
}
10008b58:	4770      	bx	lr
10008b5a:	46c0      	nop			; (mov r8, r8)

10008b5c <dualtimer_set_counter>:
 * \param[in]     value        Load value
 */
void dualtimer_set_counter(enum dualtimer_timer timer,
		enum dualtimer_set_register cur_bg, uint32_t value)
{
	if (timer == DUALTIMER_TIMER1) {
10008b5c:	2800      	cmp	r0, #0
10008b5e:	d107      	bne.n	10008b70 <dualtimer_set_counter+0x14>
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
10008b60:	2900      	cmp	r1, #0
10008b62:	d102      	bne.n	10008b6a <dualtimer_set_counter+0xe>
			DUALTIMER0->TIMER1LOAD.reg = value;
10008b64:	4b06      	ldr	r3, [pc, #24]	; (10008b80 <dualtimer_set_counter+0x24>)
10008b66:	601a      	str	r2, [r3, #0]
10008b68:	e009      	b.n	10008b7e <dualtimer_set_counter+0x22>
		} else {
			DUALTIMER0->TIMER1BGLOAD.reg = value;
10008b6a:	4b05      	ldr	r3, [pc, #20]	; (10008b80 <dualtimer_set_counter+0x24>)
10008b6c:	619a      	str	r2, [r3, #24]
10008b6e:	e006      	b.n	10008b7e <dualtimer_set_counter+0x22>
		}
	} else {
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
10008b70:	2900      	cmp	r1, #0
10008b72:	d102      	bne.n	10008b7a <dualtimer_set_counter+0x1e>
			DUALTIMER0->TIMER2LOAD.reg = value;
10008b74:	4b02      	ldr	r3, [pc, #8]	; (10008b80 <dualtimer_set_counter+0x24>)
10008b76:	621a      	str	r2, [r3, #32]
10008b78:	e001      	b.n	10008b7e <dualtimer_set_counter+0x22>
			} else {
			DUALTIMER0->TIMER2BGLOAD.reg = value;
10008b7a:	4b01      	ldr	r3, [pc, #4]	; (10008b80 <dualtimer_set_counter+0x24>)
10008b7c:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
}
10008b7e:	4770      	bx	lr
10008b80:	40001000 	.word	0x40001000

10008b84 <dualtimer_enable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_enable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
10008b84:	2800      	cmp	r0, #0
10008b86:	d105      	bne.n	10008b94 <dualtimer_enable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg |= DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
10008b88:	4a06      	ldr	r2, [pc, #24]	; (10008ba4 <dualtimer_enable+0x20>)
10008b8a:	7a11      	ldrb	r1, [r2, #8]
10008b8c:	2380      	movs	r3, #128	; 0x80
10008b8e:	430b      	orrs	r3, r1
10008b90:	7213      	strb	r3, [r2, #8]
10008b92:	e005      	b.n	10008ba0 <dualtimer_enable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg |= DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
10008b94:	4903      	ldr	r1, [pc, #12]	; (10008ba4 <dualtimer_enable+0x20>)
10008b96:	2228      	movs	r2, #40	; 0x28
10008b98:	5c88      	ldrb	r0, [r1, r2]
10008b9a:	2380      	movs	r3, #128	; 0x80
10008b9c:	4303      	orrs	r3, r0
10008b9e:	548b      	strb	r3, [r1, r2]
	}
}
10008ba0:	4770      	bx	lr
10008ba2:	46c0      	nop			; (mov r8, r8)
10008ba4:	40001000 	.word	0x40001000

10008ba8 <dualtimer_disable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_disable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
10008ba8:	2800      	cmp	r0, #0
10008baa:	d105      	bne.n	10008bb8 <dualtimer_disable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg &= ~DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
10008bac:	4a06      	ldr	r2, [pc, #24]	; (10008bc8 <dualtimer_disable+0x20>)
10008bae:	7a11      	ldrb	r1, [r2, #8]
10008bb0:	237f      	movs	r3, #127	; 0x7f
10008bb2:	400b      	ands	r3, r1
10008bb4:	7213      	strb	r3, [r2, #8]
10008bb6:	e005      	b.n	10008bc4 <dualtimer_disable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg &= ~DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
10008bb8:	4903      	ldr	r1, [pc, #12]	; (10008bc8 <dualtimer_disable+0x20>)
10008bba:	2228      	movs	r2, #40	; 0x28
10008bbc:	5c88      	ldrb	r0, [r1, r2]
10008bbe:	237f      	movs	r3, #127	; 0x7f
10008bc0:	4003      	ands	r3, r0
10008bc2:	548b      	strb	r3, [r1, r2]
	}
}
10008bc4:	4770      	bx	lr
10008bc6:	46c0      	nop			; (mov r8, r8)
10008bc8:	40001000 	.word	0x40001000

10008bcc <dualtimer_init>:
 * \param[in]     config       Pointer to the Dualtimer configuration options struct
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
10008bcc:	b570      	push	{r4, r5, r6, lr}
10008bce:	0004      	movs	r4, r0
	uint8_t regval = 0;

	/* Global reset */
	system_peripheral_reset(PERIPHERAL_DUALT_TIMER);
10008bd0:	2004      	movs	r0, #4
10008bd2:	4b39      	ldr	r3, [pc, #228]	; (10008cb8 <dualtimer_init+0xec>)
10008bd4:	4798      	blx	r3

	/* Common config */
	if (config->timer1.timer_enable || config->timer2.timer_enable) {
10008bd6:	7823      	ldrb	r3, [r4, #0]
10008bd8:	2b00      	cmp	r3, #0
10008bda:	d102      	bne.n	10008be2 <dualtimer_init+0x16>
10008bdc:	7b23      	ldrb	r3, [r4, #12]
10008bde:	2b00      	cmp	r3, #0
10008be0:	d065      	beq.n	10008cae <dualtimer_init+0xe2>
		LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |=
10008be2:	4936      	ldr	r1, [pc, #216]	; (10008cbc <dualtimer_init+0xf0>)
10008be4:	68ca      	ldr	r2, [r1, #12]
10008be6:	2320      	movs	r3, #32
10008be8:	4313      	orrs	r3, r2
10008bea:	60cb      	str	r3, [r1, #12]
		LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
10008bec:	7e22      	ldrb	r2, [r4, #24]
10008bee:	698b      	ldr	r3, [r1, #24]
10008bf0:	2003      	movs	r0, #3
10008bf2:	4002      	ands	r2, r0
10008bf4:	0112      	lsls	r2, r2, #4
10008bf6:	302d      	adds	r0, #45	; 0x2d
10008bf8:	4383      	bics	r3, r0
10008bfa:	4313      	orrs	r3, r2
10008bfc:	618b      	str	r3, [r1, #24]
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
10008bfe:	7823      	ldrb	r3, [r4, #0]
10008c00:	2b00      	cmp	r3, #0
10008c02:	d026      	beq.n	10008c52 <dualtimer_init+0x86>
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
10008c04:	7863      	ldrb	r3, [r4, #1]
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
10008c06:	2101      	movs	r1, #1
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
10008c08:	2b00      	cmp	r3, #0
10008c0a:	d003      	beq.n	10008c14 <dualtimer_init+0x48>
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer1.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_0;
		} else if (config->timer1.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_1;
10008c0c:	3b02      	subs	r3, #2
10008c0e:	425d      	negs	r5, r3
10008c10:	415d      	adcs	r5, r3
10008c12:	01a9      	lsls	r1, r5, #6
		}
		regval |= (DUALTIMER_TIMER1CONTROL_TIMER_SIZE &
10008c14:	78a2      	ldrb	r2, [r4, #2]
10008c16:	0052      	lsls	r2, r2, #1
10008c18:	2502      	movs	r5, #2
10008c1a:	402a      	ands	r2, r5
10008c1c:	78e3      	ldrb	r3, [r4, #3]
10008c1e:	009b      	lsls	r3, r3, #2
10008c20:	350a      	adds	r5, #10
10008c22:	402b      	ands	r3, r5
10008c24:	431a      	orrs	r2, r3
10008c26:	0015      	movs	r5, r2
10008c28:	430d      	orrs	r5, r1
				((config->timer1.counter_size) << DUALTIMER_TIMER1CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER1CONTROL_TIMERPRE(config->timer1.clock_prescaler);
		if (config->timer1.interrup_enable) {
10008c2a:	7923      	ldrb	r3, [r4, #4]
10008c2c:	2b00      	cmp	r3, #0
10008c2e:	d001      	beq.n	10008c34 <dualtimer_init+0x68>
			regval |= DUALTIMER_TIMER1CONTROL_INTERRUPT_ENABLE;
10008c30:	2320      	movs	r3, #32
10008c32:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER1LOAD.reg = config->timer1.load_value;
10008c34:	4b22      	ldr	r3, [pc, #136]	; (10008cc0 <dualtimer_init+0xf4>)
10008c36:	68a2      	ldr	r2, [r4, #8]
10008c38:	601a      	str	r2, [r3, #0]
		DUALTIMER0->TIMER1CONTROL.reg = regval;
10008c3a:	721d      	strb	r5, [r3, #8]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
10008c3c:	491f      	ldr	r1, [pc, #124]	; (10008cbc <dualtimer_init+0xf0>)
10008c3e:	22c4      	movs	r2, #196	; 0xc4
10008c40:	0052      	lsls	r2, r2, #1
10008c42:	5c88      	ldrb	r0, [r1, r2]
10008c44:	2301      	movs	r3, #1
10008c46:	4303      	orrs	r3, r0
10008c48:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER1);
10008c4a:	2000      	movs	r0, #0
10008c4c:	4b1d      	ldr	r3, [pc, #116]	; (10008cc4 <dualtimer_init+0xf8>)
10008c4e:	4798      	blx	r3
10008c50:	e000      	b.n	10008c54 <dualtimer_init+0x88>
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
	uint8_t regval = 0;
10008c52:	2500      	movs	r5, #0
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
		dualtimer_enable(DUALTIMER_TIMER1);
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
10008c54:	7b23      	ldrb	r3, [r4, #12]
10008c56:	2b00      	cmp	r3, #0
10008c58:	d029      	beq.n	10008cae <dualtimer_init+0xe2>
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
10008c5a:	7b63      	ldrb	r3, [r4, #13]
10008c5c:	2b00      	cmp	r3, #0
10008c5e:	d005      	beq.n	10008c6c <dualtimer_init+0xa0>
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
10008c60:	2b01      	cmp	r3, #1
10008c62:	d005      	beq.n	10008c70 <dualtimer_init+0xa4>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
10008c64:	2b02      	cmp	r3, #2
10008c66:	d104      	bne.n	10008c72 <dualtimer_init+0xa6>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
10008c68:	2540      	movs	r5, #64	; 0x40
10008c6a:	e002      	b.n	10008c72 <dualtimer_init+0xa6>
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
10008c6c:	2501      	movs	r5, #1
10008c6e:	e000      	b.n	10008c72 <dualtimer_init+0xa6>
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
10008c70:	2500      	movs	r5, #0
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
		}
		regval |= (DUALTIMER_TIMER2CONTROL_TIMER_SIZE &
10008c72:	7ba3      	ldrb	r3, [r4, #14]
10008c74:	005b      	lsls	r3, r3, #1
10008c76:	2102      	movs	r1, #2
10008c78:	4019      	ands	r1, r3
10008c7a:	7be2      	ldrb	r2, [r4, #15]
10008c7c:	0092      	lsls	r2, r2, #2
10008c7e:	230c      	movs	r3, #12
10008c80:	4013      	ands	r3, r2
10008c82:	430b      	orrs	r3, r1
10008c84:	431d      	orrs	r5, r3
				((config->timer2.counter_size) << DUALTIMER_TIMER2CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER2CONTROL_TIMERPRE(config->timer2.clock_prescaler);
		if (config->timer2.interrup_enable) {
10008c86:	7c23      	ldrb	r3, [r4, #16]
10008c88:	2b00      	cmp	r3, #0
10008c8a:	d001      	beq.n	10008c90 <dualtimer_init+0xc4>
			regval |= DUALTIMER_TIMER2CONTROL_INTERRUPT_ENABLE;
10008c8c:	2320      	movs	r3, #32
10008c8e:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER2LOAD.reg = config->timer2.load_value;
10008c90:	6962      	ldr	r2, [r4, #20]
10008c92:	4b0b      	ldr	r3, [pc, #44]	; (10008cc0 <dualtimer_init+0xf4>)
10008c94:	621a      	str	r2, [r3, #32]
		DUALTIMER0->TIMER2CONTROL.reg = regval;
10008c96:	2228      	movs	r2, #40	; 0x28
10008c98:	549d      	strb	r5, [r3, r2]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_2_ENABLE;
10008c9a:	4908      	ldr	r1, [pc, #32]	; (10008cbc <dualtimer_init+0xf0>)
10008c9c:	3261      	adds	r2, #97	; 0x61
10008c9e:	32ff      	adds	r2, #255	; 0xff
10008ca0:	5c88      	ldrb	r0, [r1, r2]
10008ca2:	2302      	movs	r3, #2
10008ca4:	4303      	orrs	r3, r0
10008ca6:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER2);
10008ca8:	2001      	movs	r0, #1
10008caa:	4b06      	ldr	r3, [pc, #24]	; (10008cc4 <dualtimer_init+0xf8>)
10008cac:	4798      	blx	r3
	}

	system_register_isr(RAM_ISR_TABLE_DUALTIMER_INDEX, (uint32_t)dualtimer_isr_handler);
10008cae:	4906      	ldr	r1, [pc, #24]	; (10008cc8 <dualtimer_init+0xfc>)
10008cb0:	201e      	movs	r0, #30
10008cb2:	4b06      	ldr	r3, [pc, #24]	; (10008ccc <dualtimer_init+0x100>)
10008cb4:	4798      	blx	r3
}
10008cb6:	bd70      	pop	{r4, r5, r6, pc}
10008cb8:	1000970d 	.word	0x1000970d
10008cbc:	4000b000 	.word	0x4000b000
10008cc0:	40001000 	.word	0x40001000
10008cc4:	10008b85 	.word	0x10008b85
10008cc8:	10008af5 	.word	0x10008af5
10008ccc:	10009b75 	.word	0x10009b75

10008cd0 <dualtimer_register_callback>:
 *
 * \param[in]     callback_func Pointer to callback function
 */
void dualtimer_register_callback(enum dualtimer_timer timer, dualtimer_callback_t fun)
{
	if (timer == DUALTIMER_TIMER1) {
10008cd0:	2800      	cmp	r0, #0
10008cd2:	d102      	bne.n	10008cda <dualtimer_register_callback+0xa>
		dualtimer_callback_timer1 = fun;
10008cd4:	4b02      	ldr	r3, [pc, #8]	; (10008ce0 <dualtimer_register_callback+0x10>)
10008cd6:	6019      	str	r1, [r3, #0]
10008cd8:	e001      	b.n	10008cde <dualtimer_register_callback+0xe>
	} else {
		dualtimer_callback_timer2 = fun;
10008cda:	4b02      	ldr	r3, [pc, #8]	; (10008ce4 <dualtimer_register_callback+0x14>)
10008cdc:	6019      	str	r1, [r3, #0]
	}
}
10008cde:	4770      	bx	lr
10008ce0:	10012b74 	.word	0x10012b74
10008ce4:	10012b78 	.word	0x10012b78

10008ce8 <gpio_port0_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port0_isr_handler(void)
{
10008ce8:	b570      	push	{r4, r5, r6, lr}
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;
10008cea:	4b16      	ldr	r3, [pc, #88]	; (10008d44 <gpio_port0_isr_handler+0x5c>)
10008cec:	681d      	ldr	r5, [r3, #0]
10008cee:	8f29      	ldrh	r1, [r5, #56]	; 0x38
10008cf0:	b289      	uxth	r1, r1

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
10008cf2:	07cb      	lsls	r3, r1, #31
10008cf4:	d407      	bmi.n	10008d06 <gpio_port0_isr_handler+0x1e>
10008cf6:	2301      	movs	r3, #1
10008cf8:	2401      	movs	r4, #1
10008cfa:	0018      	movs	r0, r3
10008cfc:	0022      	movs	r2, r4
10008cfe:	409a      	lsls	r2, r3
10008d00:	4211      	tst	r1, r2
10008d02:	d014      	beq.n	10008d2e <gpio_port0_isr_handler+0x46>
10008d04:	e001      	b.n	10008d0a <gpio_port0_isr_handler+0x22>
10008d06:	2201      	movs	r2, #1
10008d08:	2000      	movs	r0, #0
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
10008d0a:	b292      	uxth	r2, r2
10008d0c:	872a      	strh	r2, [r5, #56]	; 0x38
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
10008d0e:	2346      	movs	r3, #70	; 0x46
10008d10:	4a0c      	ldr	r2, [pc, #48]	; (10008d44 <gpio_port0_isr_handler+0x5c>)
10008d12:	5ad3      	ldrh	r3, [r2, r3]
10008d14:	4103      	asrs	r3, r0
10008d16:	07db      	lsls	r3, r3, #31
10008d18:	d50c      	bpl.n	10008d34 <gpio_port0_isr_handler+0x4c>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
10008d1a:	2344      	movs	r3, #68	; 0x44

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
10008d1c:	5ad3      	ldrh	r3, [r2, r3]
10008d1e:	4103      	asrs	r3, r0
10008d20:	07db      	lsls	r3, r3, #31
10008d22:	d507      	bpl.n	10008d34 <gpio_port0_isr_handler+0x4c>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
                _gpio_instances[0].callback[i]();
10008d24:	0080      	lsls	r0, r0, #2
10008d26:	1810      	adds	r0, r2, r0
10008d28:	6843      	ldr	r3, [r0, #4]
10008d2a:	4798      	blx	r3
10008d2c:	e002      	b.n	10008d34 <gpio_port0_isr_handler+0x4c>
10008d2e:	3301      	adds	r3, #1
 */
static void gpio_port0_isr_handler(void)
{
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
10008d30:	2b10      	cmp	r3, #16
10008d32:	d1e2      	bne.n	10008cfa <gpio_port0_isr_handler+0x12>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
10008d34:	2180      	movs	r1, #128	; 0x80
10008d36:	0409      	lsls	r1, r1, #16
10008d38:	23c0      	movs	r3, #192	; 0xc0
10008d3a:	005b      	lsls	r3, r3, #1
10008d3c:	4a02      	ldr	r2, [pc, #8]	; (10008d48 <gpio_port0_isr_handler+0x60>)
10008d3e:	50d1      	str	r1, [r2, r3]
                _gpio_instances[0].callback[i]();
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO0_IRQn);
}
10008d40:	bd70      	pop	{r4, r5, r6, pc}
10008d42:	46c0      	nop			; (mov r8, r8)
10008d44:	10014644 	.word	0x10014644
10008d48:	e000e100 	.word	0xe000e100

10008d4c <gpio_port1_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port1_isr_handler(void)
{
10008d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;
10008d4e:	4b18      	ldr	r3, [pc, #96]	; (10008db0 <gpio_port1_isr_handler+0x64>)
10008d50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10008d52:	8f1e      	ldrh	r6, [r3, #56]	; 0x38
10008d54:	b2b6      	uxth	r6, r6
10008d56:	0037      	movs	r7, r6
10008d58:	2400      	movs	r4, #0

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
10008d5a:	0b76      	lsrs	r6, r6, #13
10008d5c:	0376      	lsls	r6, r6, #13
			aon_handle_ext_wakeup_isr();
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
10008d5e:	4d14      	ldr	r5, [pc, #80]	; (10008db0 <gpio_port1_isr_handler+0x64>)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
10008d60:	2e00      	cmp	r6, #0
10008d62:	d001      	beq.n	10008d68 <gpio_port1_isr_handler+0x1c>
			aon_handle_ext_wakeup_isr();
10008d64:	4b13      	ldr	r3, [pc, #76]	; (10008db4 <gpio_port1_isr_handler+0x68>)
10008d66:	4798      	blx	r3
		}

		if (flag & (1 << i)) {
10008d68:	0022      	movs	r2, r4
10008d6a:	2301      	movs	r3, #1
10008d6c:	40a3      	lsls	r3, r4
10008d6e:	421f      	tst	r7, r3
10008d70:	d013      	beq.n	10008d9a <gpio_port1_isr_handler+0x4e>
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
10008d72:	b29b      	uxth	r3, r3
10008d74:	6ca9      	ldr	r1, [r5, #72]	; 0x48
10008d76:	870b      	strh	r3, [r1, #56]	; 0x38
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
10008d78:	238e      	movs	r3, #142	; 0x8e
10008d7a:	5aeb      	ldrh	r3, [r5, r3]
10008d7c:	4123      	asrs	r3, r4
10008d7e:	07db      	lsls	r3, r3, #31
10008d80:	d50b      	bpl.n	10008d9a <gpio_port1_isr_handler+0x4e>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
10008d82:	238c      	movs	r3, #140	; 0x8c
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
10008d84:	490a      	ldr	r1, [pc, #40]	; (10008db0 <gpio_port1_isr_handler+0x64>)
10008d86:	5acb      	ldrh	r3, [r1, r3]
10008d88:	4123      	asrs	r3, r4
10008d8a:	07db      	lsls	r3, r3, #31
10008d8c:	d505      	bpl.n	10008d9a <gpio_port1_isr_handler+0x4e>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
				_gpio_instances[1].callback[i]();
10008d8e:	3212      	adds	r2, #18
10008d90:	0092      	lsls	r2, r2, #2
10008d92:	188a      	adds	r2, r1, r2
10008d94:	6853      	ldr	r3, [r2, #4]
10008d96:	4798      	blx	r3
				break;
10008d98:	e002      	b.n	10008da0 <gpio_port1_isr_handler+0x54>
10008d9a:	3401      	adds	r4, #1
 */
static void gpio_port1_isr_handler(void)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
10008d9c:	2c10      	cmp	r4, #16
10008d9e:	d1df      	bne.n	10008d60 <gpio_port1_isr_handler+0x14>
10008da0:	2180      	movs	r1, #128	; 0x80
10008da2:	0449      	lsls	r1, r1, #17
10008da4:	23c0      	movs	r3, #192	; 0xc0
10008da6:	005b      	lsls	r3, r3, #1
10008da8:	4a03      	ldr	r2, [pc, #12]	; (10008db8 <gpio_port1_isr_handler+0x6c>)
10008daa:	50d1      	str	r1, [r2, r3]
				break;
			}
		}
	}
	NVIC_ClearPendingIRQ(GPIO1_IRQn);
}
10008dac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10008dae:	46c0      	nop			; (mov r8, r8)
10008db0:	10014644 	.word	0x10014644
10008db4:	0001bc51 	.word	0x0001bc51
10008db8:	e000e100 	.word	0xe000e100

10008dbc <gpio_port2_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port2_isr_handler(void)
{
10008dbc:	b510      	push	{r4, lr}
	uint32_t flag = _gpio_instances[2].hw->INTSTATUSCLEAR.reg;
10008dbe:	2390      	movs	r3, #144	; 0x90
10008dc0:	4a1b      	ldr	r2, [pc, #108]	; (10008e30 <gpio_port2_isr_handler+0x74>)
10008dc2:	58d2      	ldr	r2, [r2, r3]
10008dc4:	8f13      	ldrh	r3, [r2, #56]	; 0x38
10008dc6:	b29b      	uxth	r3, r3

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
10008dc8:	04d9      	lsls	r1, r3, #19
10008dca:	d414      	bmi.n	10008df6 <gpio_port2_isr_handler+0x3a>
10008dcc:	0499      	lsls	r1, r3, #18
10008dce:	d40a      	bmi.n	10008de6 <gpio_port2_isr_handler+0x2a>
10008dd0:	0459      	lsls	r1, r3, #17
10008dd2:	d40c      	bmi.n	10008dee <gpio_port2_isr_handler+0x32>
10008dd4:	0bdb      	lsrs	r3, r3, #15
10008dd6:	03db      	lsls	r3, r3, #15
10008dd8:	b29b      	uxth	r3, r3
10008dda:	2b00      	cmp	r3, #0
10008ddc:	d020      	beq.n	10008e20 <gpio_port2_isr_handler+0x64>
10008dde:	2380      	movs	r3, #128	; 0x80
10008de0:	021b      	lsls	r3, r3, #8
10008de2:	210f      	movs	r1, #15
10008de4:	e00a      	b.n	10008dfc <gpio_port2_isr_handler+0x40>
10008de6:	2380      	movs	r3, #128	; 0x80
10008de8:	019b      	lsls	r3, r3, #6
10008dea:	210d      	movs	r1, #13
10008dec:	e006      	b.n	10008dfc <gpio_port2_isr_handler+0x40>
10008dee:	2380      	movs	r3, #128	; 0x80
10008df0:	01db      	lsls	r3, r3, #7
10008df2:	210e      	movs	r1, #14
10008df4:	e002      	b.n	10008dfc <gpio_port2_isr_handler+0x40>
10008df6:	2380      	movs	r3, #128	; 0x80
10008df8:	015b      	lsls	r3, r3, #5
10008dfa:	210c      	movs	r1, #12
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
10008dfc:	b29b      	uxth	r3, r3
10008dfe:	8713      	strh	r3, [r2, #56]	; 0x38
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
10008e00:	23d6      	movs	r3, #214	; 0xd6
10008e02:	4a0b      	ldr	r2, [pc, #44]	; (10008e30 <gpio_port2_isr_handler+0x74>)
10008e04:	5ad3      	ldrh	r3, [r2, r3]
10008e06:	410b      	asrs	r3, r1
10008e08:	07db      	lsls	r3, r3, #31
10008e0a:	d509      	bpl.n	10008e20 <gpio_port2_isr_handler+0x64>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
10008e0c:	23d4      	movs	r3, #212	; 0xd4

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
10008e0e:	5ad3      	ldrh	r3, [r2, r3]
10008e10:	410b      	asrs	r3, r1
10008e12:	07db      	lsls	r3, r3, #31
10008e14:	d504      	bpl.n	10008e20 <gpio_port2_isr_handler+0x64>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
                _gpio_instances[2].callback[i]();
10008e16:	3124      	adds	r1, #36	; 0x24
10008e18:	0089      	lsls	r1, r1, #2
10008e1a:	1851      	adds	r1, r2, r1
10008e1c:	684b      	ldr	r3, [r1, #4]
10008e1e:	4798      	blx	r3
10008e20:	2180      	movs	r1, #128	; 0x80
10008e22:	0489      	lsls	r1, r1, #18
10008e24:	23c0      	movs	r3, #192	; 0xc0
10008e26:	005b      	lsls	r3, r3, #1
10008e28:	4a02      	ldr	r2, [pc, #8]	; (10008e34 <gpio_port2_isr_handler+0x78>)
10008e2a:	50d1      	str	r1, [r2, r3]
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO2_IRQn);
}
10008e2c:	bd10      	pop	{r4, pc}
10008e2e:	46c0      	nop			; (mov r8, r8)
10008e30:	10014644 	.word	0x10014644
10008e34:	e000e100 	.word	0xe000e100

10008e38 <gpio_get_config_defaults>:
 *  \param[out] config  Configuration structure to initialize to default values.
 */
void gpio_get_config_defaults(struct gpio_config *const config)
{
	/* Default configuration values */
	config->direction  = GPIO_PIN_DIR_INPUT;
10008e38:	2300      	movs	r3, #0
10008e3a:	7003      	strb	r3, [r0, #0]
	config->input_pull = GPIO_PIN_PULL_UP;
10008e3c:	2201      	movs	r2, #1
10008e3e:	7042      	strb	r2, [r0, #1]
	config->powersave  = false;
10008e40:	7083      	strb	r3, [r0, #2]
	config->aon_wakeup = false;
10008e42:	70c3      	strb	r3, [r0, #3]
}
10008e44:	4770      	bx	lr
10008e46:	46c0      	nop			; (mov r8, r8)

10008e48 <gpio_pin_set_config>:
 *  \retval STATUS_RESOURCE_NOT_AVAILABLE   Requested gpio is already in use.
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
10008e48:	b570      	push	{r4, r5, r6, lr}
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
10008e4a:	2317      	movs	r3, #23
	enum status_code status = STATUS_OK;

	/* Following GPIO's should never be modified by user.
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
10008e4c:	2801      	cmp	r0, #1
10008e4e:	d800      	bhi.n	10008e52 <gpio_pin_set_config+0xa>
10008e50:	e0c8      	b.n	10008fe4 <gpio_pin_set_config+0x19c>
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
	} else {
		if (gpio_pin <= 7) {
10008e52:	2807      	cmp	r0, #7
10008e54:	d809      	bhi.n	10008e6a <gpio_pin_set_config+0x22>
			LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
10008e56:	4d64      	ldr	r5, [pc, #400]	; (10008fe8 <gpio_pin_set_config+0x1a0>)
10008e58:	6c6a      	ldr	r2, [r5, #68]	; 0x44
10008e5a:	3b10      	subs	r3, #16
10008e5c:	4003      	ands	r3, r0
10008e5e:	009b      	lsls	r3, r3, #2
10008e60:	2407      	movs	r4, #7
10008e62:	409c      	lsls	r4, r3
10008e64:	43a2      	bics	r2, r4
10008e66:	646a      	str	r2, [r5, #68]	; 0x44
10008e68:	e029      	b.n	10008ebe <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 15) {
10008e6a:	280f      	cmp	r0, #15
10008e6c:	d809      	bhi.n	10008e82 <gpio_pin_set_config+0x3a>
			LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
10008e6e:	4d5e      	ldr	r5, [pc, #376]	; (10008fe8 <gpio_pin_set_config+0x1a0>)
10008e70:	6caa      	ldr	r2, [r5, #72]	; 0x48
10008e72:	2307      	movs	r3, #7
10008e74:	4003      	ands	r3, r0
10008e76:	009b      	lsls	r3, r3, #2
10008e78:	2407      	movs	r4, #7
10008e7a:	409c      	lsls	r4, r3
10008e7c:	43a2      	bics	r2, r4
10008e7e:	64aa      	str	r2, [r5, #72]	; 0x48
10008e80:	e01d      	b.n	10008ebe <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 23) {
10008e82:	2817      	cmp	r0, #23
10008e84:	d809      	bhi.n	10008e9a <gpio_pin_set_config+0x52>
			LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
10008e86:	4d58      	ldr	r5, [pc, #352]	; (10008fe8 <gpio_pin_set_config+0x1a0>)
10008e88:	6cea      	ldr	r2, [r5, #76]	; 0x4c
10008e8a:	2307      	movs	r3, #7
10008e8c:	4003      	ands	r3, r0
10008e8e:	009b      	lsls	r3, r3, #2
10008e90:	2407      	movs	r4, #7
10008e92:	409c      	lsls	r4, r3
10008e94:	43a2      	bics	r2, r4
10008e96:	64ea      	str	r2, [r5, #76]	; 0x4c
10008e98:	e011      	b.n	10008ebe <gpio_pin_set_config+0x76>
		} else if (44 <= gpio_pin  && gpio_pin < 48) {
10008e9a:	0003      	movs	r3, r0
10008e9c:	3b2c      	subs	r3, #44	; 0x2c
10008e9e:	2b03      	cmp	r3, #3
10008ea0:	d80d      	bhi.n	10008ebe <gpio_pin_set_config+0x76>
			/* Set GPIO_MSx as digital mode */
			AON_GP_REGS0->MS_GPIO_MODE.vec.ANALOG_ENABLE_ &= ~(1 << (gpio_pin - PIN_GPIO_MS4));
10008ea2:	4d52      	ldr	r5, [pc, #328]	; (10008fec <gpio_pin_set_config+0x1a4>)
10008ea4:	2482      	movs	r4, #130	; 0x82
10008ea6:	00e4      	lsls	r4, r4, #3
10008ea8:	5d2a      	ldrb	r2, [r5, r4]
10008eaa:	0712      	lsls	r2, r2, #28
10008eac:	2601      	movs	r6, #1
10008eae:	409e      	lsls	r6, r3
10008eb0:	0f12      	lsrs	r2, r2, #28
10008eb2:	5d2b      	ldrb	r3, [r5, r4]
10008eb4:	43b2      	bics	r2, r6
10008eb6:	260f      	movs	r6, #15
10008eb8:	43b3      	bics	r3, r6
10008eba:	4313      	orrs	r3, r2
10008ebc:	552b      	strb	r3, [r5, r4]
		}
	
		if ((gpio_pin == PIN_AO_GPIO_0) || (gpio_pin == PIN_AO_GPIO_1) ||
10008ebe:	0003      	movs	r3, r0
10008ec0:	3b1d      	subs	r3, #29
10008ec2:	2b02      	cmp	r3, #2
10008ec4:	d829      	bhi.n	10008f1a <gpio_pin_set_config+0xd2>
				(gpio_pin == PIN_AO_GPIO_2)) {
			/* Active Low, Always On Pull Enable Control */
			if (config->input_pull == GPIO_PIN_PULL_UP) {
10008ec6:	784b      	ldrb	r3, [r1, #1]
10008ec8:	2b01      	cmp	r3, #1
10008eca:	d108      	bne.n	10008ede <gpio_pin_set_config+0x96>
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
10008ecc:	4d47      	ldr	r5, [pc, #284]	; (10008fec <gpio_pin_set_config+0x1a4>)
10008ece:	7d2b      	ldrb	r3, [r5, #20]
10008ed0:	241f      	movs	r4, #31
10008ed2:	1a24      	subs	r4, r4, r0
10008ed4:	2201      	movs	r2, #1
10008ed6:	40a2      	lsls	r2, r4
10008ed8:	4393      	bics	r3, r2
10008eda:	752b      	strb	r3, [r5, #20]
10008edc:	e008      	b.n	10008ef0 <gpio_pin_set_config+0xa8>
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
10008ede:	4c43      	ldr	r4, [pc, #268]	; (10008fec <gpio_pin_set_config+0x1a4>)
10008ee0:	7d25      	ldrb	r5, [r4, #20]
10008ee2:	221f      	movs	r2, #31
10008ee4:	1a12      	subs	r2, r2, r0
10008ee6:	2301      	movs	r3, #1
10008ee8:	4093      	lsls	r3, r2
10008eea:	432b      	orrs	r3, r5
10008eec:	b2db      	uxtb	r3, r3
10008eee:	7523      	strb	r3, [r4, #20]
			}
			if (config->aon_wakeup) {
10008ef0:	78ca      	ldrb	r2, [r1, #3]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008ef2:	2300      	movs	r3, #0
			if (config->input_pull == GPIO_PIN_PULL_UP) {
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
			}
			if (config->aon_wakeup) {
10008ef4:	2a00      	cmp	r2, #0
10008ef6:	d075      	beq.n	10008fe4 <gpio_pin_set_config+0x19c>
				/* Enable AON_GPIO_x to be a wakeup MCU from sleep mode */
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
10008ef8:	493c      	ldr	r1, [pc, #240]	; (10008fec <gpio_pin_set_config+0x1a4>)
10008efa:	880c      	ldrh	r4, [r1, #0]
10008efc:	221f      	movs	r2, #31
10008efe:	1a10      	subs	r0, r2, r0
10008f00:	0080      	lsls	r0, r0, #2
10008f02:	3301      	adds	r3, #1
10008f04:	4083      	lsls	r3, r0
10008f06:	4323      	orrs	r3, r4
10008f08:	b29b      	uxth	r3, r3
10008f0a:	800b      	strh	r3, [r1, #0]
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
10008f0c:	4a38      	ldr	r2, [pc, #224]	; (10008ff0 <gpio_pin_set_config+0x1a8>)
10008f0e:	7811      	ldrb	r1, [r2, #0]
10008f10:	2302      	movs	r3, #2
10008f12:	430b      	orrs	r3, r1
10008f14:	7013      	strb	r3, [r2, #0]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008f16:	2300      	movs	r3, #0
10008f18:	e064      	b.n	10008fe4 <gpio_pin_set_config+0x19c>
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
10008f1a:	780a      	ldrb	r2, [r1, #0]
10008f1c:	2a00      	cmp	r2, #0
10008f1e:	d140      	bne.n	10008fa2 <gpio_pin_set_config+0x15a>
				if(gpio_pin < 16) {
10008f20:	280f      	cmp	r0, #15
10008f22:	d808      	bhi.n	10008f36 <gpio_pin_set_config+0xee>
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
10008f24:	2301      	movs	r3, #1
10008f26:	4083      	lsls	r3, r0
10008f28:	b29b      	uxth	r3, r3
10008f2a:	4a32      	ldr	r2, [pc, #200]	; (10008ff4 <gpio_pin_set_config+0x1ac>)
10008f2c:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008f2e:	2300      	movs	r3, #0
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
10008f30:	281f      	cmp	r0, #31
10008f32:	d857      	bhi.n	10008fe4 <gpio_pin_set_config+0x19c>
10008f34:	e012      	b.n	10008f5c <gpio_pin_set_config+0x114>
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
				if(gpio_pin < 16) {
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32){
10008f36:	281f      	cmp	r0, #31
10008f38:	d807      	bhi.n	10008f4a <gpio_pin_set_config+0x102>
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
10008f3a:	220f      	movs	r2, #15
10008f3c:	4002      	ands	r2, r0
10008f3e:	2301      	movs	r3, #1
10008f40:	4093      	lsls	r3, r2
10008f42:	b29b      	uxth	r3, r3
10008f44:	4a2c      	ldr	r2, [pc, #176]	; (10008ff8 <gpio_pin_set_config+0x1b0>)
10008f46:	8293      	strh	r3, [r2, #20]
10008f48:	e008      	b.n	10008f5c <gpio_pin_set_config+0x114>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
10008f4a:	230f      	movs	r3, #15
10008f4c:	4018      	ands	r0, r3
10008f4e:	3b0e      	subs	r3, #14
10008f50:	4083      	lsls	r3, r0
10008f52:	b29b      	uxth	r3, r3
10008f54:	4a29      	ldr	r2, [pc, #164]	; (10008ffc <gpio_pin_set_config+0x1b4>)
10008f56:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008f58:	2300      	movs	r3, #0
10008f5a:	e043      	b.n	10008fe4 <gpio_pin_set_config+0x19c>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
10008f5c:	784b      	ldrb	r3, [r1, #1]
10008f5e:	2b01      	cmp	r3, #1
10008f60:	d00c      	beq.n	10008f7c <gpio_pin_set_config+0x134>
10008f62:	2b00      	cmp	r3, #0
10008f64:	d002      	beq.n	10008f6c <gpio_pin_set_config+0x124>
10008f66:	2b02      	cmp	r3, #2
10008f68:	d010      	beq.n	10008f8c <gpio_pin_set_config+0x144>
10008f6a:	e03a      	b.n	10008fe2 <gpio_pin_set_config+0x19a>
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
10008f6c:	491e      	ldr	r1, [pc, #120]	; (10008fe8 <gpio_pin_set_config+0x1a0>)
10008f6e:	6d0a      	ldr	r2, [r1, #80]	; 0x50
10008f70:	2301      	movs	r3, #1
10008f72:	4083      	lsls	r3, r0
10008f74:	4313      	orrs	r3, r2
10008f76:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008f78:	2300      	movs	r3, #0
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
10008f7a:	e033      	b.n	10008fe4 <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
10008f7c:	491a      	ldr	r1, [pc, #104]	; (10008fe8 <gpio_pin_set_config+0x1a0>)
10008f7e:	6d0b      	ldr	r3, [r1, #80]	; 0x50
10008f80:	2201      	movs	r2, #1
10008f82:	4082      	lsls	r2, r0
10008f84:	4393      	bics	r3, r2
10008f86:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008f88:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
10008f8a:	e02b      	b.n	10008fe4 <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
10008f8c:	4b16      	ldr	r3, [pc, #88]	; (10008fe8 <gpio_pin_set_config+0x1a0>)
10008f8e:	6d59      	ldr	r1, [r3, #84]	; 0x54
10008f90:	2201      	movs	r2, #1
10008f92:	4082      	lsls	r2, r0
10008f94:	4311      	orrs	r1, r2
10008f96:	6559      	str	r1, [r3, #84]	; 0x54
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
10008f98:	6d19      	ldr	r1, [r3, #80]	; 0x50
10008f9a:	4391      	bics	r1, r2
10008f9c:	6519      	str	r1, [r3, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008f9e:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
10008fa0:	e020      	b.n	10008fe4 <gpio_pin_set_config+0x19c>
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008fa2:	2300      	movs	r3, #0
						default:
							status = STATUS_ERR_INVALID_ARG;
							break;
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
10008fa4:	2a01      	cmp	r2, #1
10008fa6:	d11d      	bne.n	10008fe4 <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
10008fa8:	280f      	cmp	r0, #15
10008faa:	d806      	bhi.n	10008fba <gpio_pin_set_config+0x172>
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
10008fac:	3301      	adds	r3, #1
10008fae:	4083      	lsls	r3, r0
10008fb0:	b29b      	uxth	r3, r3
10008fb2:	4a10      	ldr	r2, [pc, #64]	; (10008ff4 <gpio_pin_set_config+0x1ac>)
10008fb4:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008fb6:	2300      	movs	r3, #0
10008fb8:	e014      	b.n	10008fe4 <gpio_pin_set_config+0x19c>
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
10008fba:	281f      	cmp	r0, #31
10008fbc:	d808      	bhi.n	10008fd0 <gpio_pin_set_config+0x188>
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
10008fbe:	230f      	movs	r3, #15
10008fc0:	4018      	ands	r0, r3
10008fc2:	3b0e      	subs	r3, #14
10008fc4:	4083      	lsls	r3, r0
10008fc6:	b29b      	uxth	r3, r3
10008fc8:	4a0b      	ldr	r2, [pc, #44]	; (10008ff8 <gpio_pin_set_config+0x1b0>)
10008fca:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008fcc:	2300      	movs	r3, #0
10008fce:	e009      	b.n	10008fe4 <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENSET.reg = (1 << (gpio_pin % 16));
10008fd0:	230f      	movs	r3, #15
10008fd2:	4018      	ands	r0, r3
10008fd4:	3b0e      	subs	r3, #14
10008fd6:	4083      	lsls	r3, r0
10008fd8:	b29b      	uxth	r3, r3
10008fda:	4a08      	ldr	r2, [pc, #32]	; (10008ffc <gpio_pin_set_config+0x1b4>)
10008fdc:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008fde:	2300      	movs	r3, #0
10008fe0:	e000      	b.n	10008fe4 <gpio_pin_set_config+0x19c>
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
						default:
							status = STATUS_ERR_INVALID_ARG;
10008fe2:	2317      	movs	r3, #23
				}
			}
		}
	}
	return status;
}
10008fe4:	0018      	movs	r0, r3
10008fe6:	bd70      	pop	{r4, r5, r6, pc}
10008fe8:	4000b000 	.word	0x4000b000
10008fec:	4000f000 	.word	0x4000f000
10008ff0:	4000e000 	.word	0x4000e000
10008ff4:	40010000 	.word	0x40010000
10008ff8:	40011000 	.word	0x40011000
10008ffc:	40013000 	.word	0x40013000

10009000 <gpio_pinmux_cofiguration>:
 *
 *  \param[in] gpio_pin   Index of the GPIO pin to toggle.
 *  \param[in] pinmux_sel PINMUX selection.
 */
void gpio_pinmux_cofiguration(const uint8_t gpio_pin, uint16_t pinmux_sel)
{
10009000:	b570      	push	{r4, r5, r6, lr}
	uint8_t megamux_sel = (pinmux_sel >> 8) & 0xFF;
10009002:	0a0d      	lsrs	r5, r1, #8

	pinmux_sel &= 0xFF;
10009004:	23ff      	movs	r3, #255	; 0xff
10009006:	4019      	ands	r1, r3

	if (gpio_pin <= 7) {
10009008:	2807      	cmp	r0, #7
1000900a:	d833      	bhi.n	10009074 <gpio_pinmux_cofiguration+0x74>
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000900c:	4a4e      	ldr	r2, [pc, #312]	; (10009148 <gpio_pinmux_cofiguration+0x148>)
1000900e:	6c54      	ldr	r4, [r2, #68]	; 0x44
10009010:	3bf8      	subs	r3, #248	; 0xf8
10009012:	4003      	ands	r3, r0
10009014:	009b      	lsls	r3, r3, #2
10009016:	2607      	movs	r6, #7
10009018:	409e      	lsls	r6, r3
1000901a:	43b4      	bics	r4, r6
1000901c:	6454      	str	r4, [r2, #68]	; 0x44
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000901e:	6c54      	ldr	r4, [r2, #68]	; 0x44
10009020:	000e      	movs	r6, r1
10009022:	409e      	lsls	r6, r3
10009024:	0033      	movs	r3, r6
10009026:	4323      	orrs	r3, r4
10009028:	6453      	str	r3, [r2, #68]	; 0x44
		if (pinmux_sel == 0x01) {
1000902a:	2901      	cmp	r1, #1
1000902c:	d000      	beq.n	10009030 <gpio_pinmux_cofiguration+0x30>
1000902e:	e08a      	b.n	10009146 <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 3) {
10009030:	2803      	cmp	r0, #3
10009032:	d80f      	bhi.n	10009054 <gpio_pinmux_cofiguration+0x54>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10009034:	0011      	movs	r1, r2
10009036:	22d0      	movs	r2, #208	; 0xd0
10009038:	0052      	lsls	r2, r2, #1
1000903a:	588c      	ldr	r4, [r1, r2]
1000903c:	2303      	movs	r3, #3
1000903e:	4018      	ands	r0, r3
10009040:	00c0      	lsls	r0, r0, #3
10009042:	333c      	adds	r3, #60	; 0x3c
10009044:	4083      	lsls	r3, r0
10009046:	439c      	bics	r4, r3
10009048:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000904a:	588b      	ldr	r3, [r1, r2]
1000904c:	4085      	lsls	r5, r0
1000904e:	431d      	orrs	r5, r3
10009050:	508d      	str	r5, [r1, r2]
10009052:	e078      	b.n	10009146 <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 7) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10009054:	493c      	ldr	r1, [pc, #240]	; (10009148 <gpio_pinmux_cofiguration+0x148>)
10009056:	22d2      	movs	r2, #210	; 0xd2
10009058:	0052      	lsls	r2, r2, #1
1000905a:	588c      	ldr	r4, [r1, r2]
1000905c:	2303      	movs	r3, #3
1000905e:	4018      	ands	r0, r3
10009060:	00c0      	lsls	r0, r0, #3
10009062:	333c      	adds	r3, #60	; 0x3c
10009064:	4083      	lsls	r3, r0
10009066:	439c      	bics	r4, r3
10009068:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000906a:	588b      	ldr	r3, [r1, r2]
1000906c:	4085      	lsls	r5, r0
1000906e:	431d      	orrs	r5, r3
10009070:	508d      	str	r5, [r1, r2]
10009072:	e068      	b.n	10009146 <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 15) {
10009074:	280f      	cmp	r0, #15
10009076:	d832      	bhi.n	100090de <gpio_pinmux_cofiguration+0xde>
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
10009078:	4a33      	ldr	r2, [pc, #204]	; (10009148 <gpio_pinmux_cofiguration+0x148>)
1000907a:	6c94      	ldr	r4, [r2, #72]	; 0x48
1000907c:	2307      	movs	r3, #7
1000907e:	4003      	ands	r3, r0
10009080:	009b      	lsls	r3, r3, #2
10009082:	2607      	movs	r6, #7
10009084:	409e      	lsls	r6, r3
10009086:	43b4      	bics	r4, r6
10009088:	6494      	str	r4, [r2, #72]	; 0x48
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000908a:	6c94      	ldr	r4, [r2, #72]	; 0x48
1000908c:	000e      	movs	r6, r1
1000908e:	409e      	lsls	r6, r3
10009090:	0033      	movs	r3, r6
10009092:	4323      	orrs	r3, r4
10009094:	6493      	str	r3, [r2, #72]	; 0x48
		if (pinmux_sel == 0x01) {
10009096:	2901      	cmp	r1, #1
10009098:	d155      	bne.n	10009146 <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 11) {
1000909a:	280b      	cmp	r0, #11
1000909c:	d80f      	bhi.n	100090be <gpio_pinmux_cofiguration+0xbe>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000909e:	0011      	movs	r1, r2
100090a0:	22d4      	movs	r2, #212	; 0xd4
100090a2:	0052      	lsls	r2, r2, #1
100090a4:	588c      	ldr	r4, [r1, r2]
100090a6:	2303      	movs	r3, #3
100090a8:	4018      	ands	r0, r3
100090aa:	00c0      	lsls	r0, r0, #3
100090ac:	333c      	adds	r3, #60	; 0x3c
100090ae:	4083      	lsls	r3, r0
100090b0:	439c      	bics	r4, r3
100090b2:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
100090b4:	588b      	ldr	r3, [r1, r2]
100090b6:	4085      	lsls	r5, r0
100090b8:	431d      	orrs	r5, r3
100090ba:	508d      	str	r5, [r1, r2]
100090bc:	e043      	b.n	10009146 <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 15) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
100090be:	4922      	ldr	r1, [pc, #136]	; (10009148 <gpio_pinmux_cofiguration+0x148>)
100090c0:	22d6      	movs	r2, #214	; 0xd6
100090c2:	0052      	lsls	r2, r2, #1
100090c4:	588c      	ldr	r4, [r1, r2]
100090c6:	2303      	movs	r3, #3
100090c8:	4018      	ands	r0, r3
100090ca:	00c0      	lsls	r0, r0, #3
100090cc:	333c      	adds	r3, #60	; 0x3c
100090ce:	4083      	lsls	r3, r0
100090d0:	439c      	bics	r4, r3
100090d2:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
100090d4:	588b      	ldr	r3, [r1, r2]
100090d6:	4085      	lsls	r5, r0
100090d8:	431d      	orrs	r5, r3
100090da:	508d      	str	r5, [r1, r2]
100090dc:	e033      	b.n	10009146 <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 23) {
100090de:	2817      	cmp	r0, #23
100090e0:	d831      	bhi.n	10009146 <gpio_pinmux_cofiguration+0x146>
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
100090e2:	4a19      	ldr	r2, [pc, #100]	; (10009148 <gpio_pinmux_cofiguration+0x148>)
100090e4:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
100090e6:	2307      	movs	r3, #7
100090e8:	4003      	ands	r3, r0
100090ea:	009b      	lsls	r3, r3, #2
100090ec:	2607      	movs	r6, #7
100090ee:	409e      	lsls	r6, r3
100090f0:	43b4      	bics	r4, r6
100090f2:	64d4      	str	r4, [r2, #76]	; 0x4c
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
100090f4:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
100090f6:	000e      	movs	r6, r1
100090f8:	409e      	lsls	r6, r3
100090fa:	0033      	movs	r3, r6
100090fc:	4323      	orrs	r3, r4
100090fe:	64d3      	str	r3, [r2, #76]	; 0x4c
		if (pinmux_sel == 0x01) {
10009100:	2901      	cmp	r1, #1
10009102:	d120      	bne.n	10009146 <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 19) {
10009104:	2813      	cmp	r0, #19
10009106:	d80f      	bhi.n	10009128 <gpio_pinmux_cofiguration+0x128>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10009108:	0011      	movs	r1, r2
1000910a:	22d8      	movs	r2, #216	; 0xd8
1000910c:	0052      	lsls	r2, r2, #1
1000910e:	588c      	ldr	r4, [r1, r2]
10009110:	2303      	movs	r3, #3
10009112:	4018      	ands	r0, r3
10009114:	00c0      	lsls	r0, r0, #3
10009116:	333c      	adds	r3, #60	; 0x3c
10009118:	4083      	lsls	r3, r0
1000911a:	439c      	bics	r4, r3
1000911c:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000911e:	588b      	ldr	r3, [r1, r2]
10009120:	4085      	lsls	r5, r0
10009122:	431d      	orrs	r5, r3
10009124:	508d      	str	r5, [r1, r2]
10009126:	e00e      	b.n	10009146 <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 23) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10009128:	4a07      	ldr	r2, [pc, #28]	; (10009148 <gpio_pinmux_cofiguration+0x148>)
1000912a:	23da      	movs	r3, #218	; 0xda
1000912c:	005b      	lsls	r3, r3, #1
1000912e:	58d1      	ldr	r1, [r2, r3]
10009130:	2403      	movs	r4, #3
10009132:	4020      	ands	r0, r4
10009134:	00c0      	lsls	r0, r0, #3
10009136:	343c      	adds	r4, #60	; 0x3c
10009138:	4084      	lsls	r4, r0
1000913a:	43a1      	bics	r1, r4
1000913c:	50d1      	str	r1, [r2, r3]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000913e:	58d1      	ldr	r1, [r2, r3]
10009140:	4085      	lsls	r5, r0
10009142:	430d      	orrs	r5, r1
10009144:	50d5      	str	r5, [r2, r3]
			}
		}
	}
}
10009146:	bd70      	pop	{r4, r5, r6, pc}
10009148:	4000b000 	.word	0x4000b000

1000914c <gpio_register_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 *
 */
void gpio_register_callback(uint8_t gpio_pin, gpio_callback_t callback_func,
				enum gpio_callback callback_type)
{
1000914c:	b5f0      	push	{r4, r5, r6, r7, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
		gpio_port = 0;
1000914e:	2300      	movs	r3, #0
	Assert(callback_func);
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
10009150:	280f      	cmp	r0, #15
10009152:	d904      	bls.n	1000915e <gpio_register_callback+0x12>
		gpio_port = 0;
	} else if (gpio_pin < 32) {
		gpio_port = 1;
	} else {
		gpio_port = 2;
10009154:	241f      	movs	r4, #31
10009156:	4284      	cmp	r4, r0
10009158:	415b      	adcs	r3, r3
1000915a:	3c1d      	subs	r4, #29
1000915c:	1ae3      	subs	r3, r4, r3
	}
	switch (callback_type) {
1000915e:	2a01      	cmp	r2, #1
10009160:	d016      	beq.n	10009190 <gpio_register_callback+0x44>
10009162:	2a00      	cmp	r2, #0
10009164:	d004      	beq.n	10009170 <gpio_register_callback+0x24>
10009166:	2a02      	cmp	r2, #2
10009168:	d022      	beq.n	100091b0 <gpio_register_callback+0x64>
1000916a:	2a03      	cmp	r2, #3
1000916c:	d030      	beq.n	100091d0 <gpio_register_callback+0x84>
1000916e:	e03e      	b.n	100091ee <gpio_register_callback+0xa2>
	case GPIO_CALLBACK_LOW:
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
10009170:	4e29      	ldr	r6, [pc, #164]	; (10009218 <gpio_register_callback+0xcc>)
10009172:	00dc      	lsls	r4, r3, #3
10009174:	18e2      	adds	r2, r4, r3
10009176:	00d2      	lsls	r2, r2, #3
10009178:	5997      	ldr	r7, [r2, r6]
1000917a:	250f      	movs	r5, #15
1000917c:	4005      	ands	r5, r0
1000917e:	2201      	movs	r2, #1
10009180:	40aa      	lsls	r2, r5
10009182:	b292      	uxth	r2, r2
10009184:	85ba      	strh	r2, [r7, #44]	; 0x2c
		_gpio_instances[gpio_port].hw->INTPOLCLR.reg = 1 << (gpio_pin % 16);
10009186:	18e4      	adds	r4, r4, r3
10009188:	00e4      	lsls	r4, r4, #3
1000918a:	59a4      	ldr	r4, [r4, r6]
1000918c:	86a2      	strh	r2, [r4, #52]	; 0x34
		break;
1000918e:	e02e      	b.n	100091ee <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_HIGH:
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
10009190:	4e21      	ldr	r6, [pc, #132]	; (10009218 <gpio_register_callback+0xcc>)
10009192:	00dc      	lsls	r4, r3, #3
10009194:	18e2      	adds	r2, r4, r3
10009196:	00d2      	lsls	r2, r2, #3
10009198:	5997      	ldr	r7, [r2, r6]
1000919a:	250f      	movs	r5, #15
1000919c:	4005      	ands	r5, r0
1000919e:	2201      	movs	r2, #1
100091a0:	40aa      	lsls	r2, r5
100091a2:	b292      	uxth	r2, r2
100091a4:	85ba      	strh	r2, [r7, #44]	; 0x2c
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
100091a6:	18e4      	adds	r4, r4, r3
100091a8:	00e4      	lsls	r4, r4, #3
100091aa:	59a4      	ldr	r4, [r4, r6]
100091ac:	8622      	strh	r2, [r4, #48]	; 0x30
		break;
100091ae:	e01e      	b.n	100091ee <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_RISING:
		_gpio_instances[gpio_port].hw->INTTYPESET.reg = 1 << (gpio_pin % 16);
100091b0:	4e19      	ldr	r6, [pc, #100]	; (10009218 <gpio_register_callback+0xcc>)
100091b2:	00dc      	lsls	r4, r3, #3
100091b4:	18e2      	adds	r2, r4, r3
100091b6:	00d2      	lsls	r2, r2, #3
100091b8:	5997      	ldr	r7, [r2, r6]
100091ba:	250f      	movs	r5, #15
100091bc:	4005      	ands	r5, r0
100091be:	2201      	movs	r2, #1
100091c0:	40aa      	lsls	r2, r5
100091c2:	b292      	uxth	r2, r2
100091c4:	853a      	strh	r2, [r7, #40]	; 0x28
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
100091c6:	18e4      	adds	r4, r4, r3
100091c8:	00e4      	lsls	r4, r4, #3
100091ca:	59a4      	ldr	r4, [r4, r6]
100091cc:	8622      	strh	r2, [r4, #48]	; 0x30
		break;
100091ce:	e00e      	b.n	100091ee <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_FALLING:
		_gpio_instances[gpio_port].hw->INTTYPESET.reg = 1 << (gpio_pin % 16);
100091d0:	4e11      	ldr	r6, [pc, #68]	; (10009218 <gpio_register_callback+0xcc>)
100091d2:	00dc      	lsls	r4, r3, #3
100091d4:	18e2      	adds	r2, r4, r3
100091d6:	00d2      	lsls	r2, r2, #3
100091d8:	5997      	ldr	r7, [r2, r6]
100091da:	250f      	movs	r5, #15
100091dc:	4005      	ands	r5, r0
100091de:	2201      	movs	r2, #1
100091e0:	40aa      	lsls	r2, r5
100091e2:	b292      	uxth	r2, r2
100091e4:	853a      	strh	r2, [r7, #40]	; 0x28
		_gpio_instances[gpio_port].hw->INTPOLCLR.reg = (1 << (gpio_pin % 16));
100091e6:	18e4      	adds	r4, r4, r3
100091e8:	00e4      	lsls	r4, r4, #3
100091ea:	59a4      	ldr	r4, [r4, r6]
100091ec:	86a2      	strh	r2, [r4, #52]	; 0x34

	case GPIO_CALLBACK_N:
		break;
	}
	/* Register callback function */
	_gpio_instances[gpio_port].callback[gpio_pin % 16] = callback_func;
100091ee:	220f      	movs	r2, #15
100091f0:	4010      	ands	r0, r2
100091f2:	4c09      	ldr	r4, [pc, #36]	; (10009218 <gpio_register_callback+0xcc>)
100091f4:	00dd      	lsls	r5, r3, #3
100091f6:	18ea      	adds	r2, r5, r3
100091f8:	0052      	lsls	r2, r2, #1
100091fa:	1812      	adds	r2, r2, r0
100091fc:	0092      	lsls	r2, r2, #2
100091fe:	18a2      	adds	r2, r4, r2
10009200:	6051      	str	r1, [r2, #4]
	/* Set the bit corresponding to the gpio pin */
	_gpio_instances[gpio_port].callback_reg_mask |= (1 << (gpio_pin % 16));
10009202:	18ea      	adds	r2, r5, r3
10009204:	00d2      	lsls	r2, r2, #3
10009206:	18a2      	adds	r2, r4, r2
10009208:	3244      	adds	r2, #68	; 0x44
1000920a:	2101      	movs	r1, #1
1000920c:	4081      	lsls	r1, r0
1000920e:	8813      	ldrh	r3, [r2, #0]
10009210:	430b      	orrs	r3, r1
10009212:	8013      	strh	r3, [r2, #0]
}
10009214:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009216:	46c0      	nop			; (mov r8, r8)
10009218:	10014644 	.word	0x10014644

1000921c <gpio_enable_callback>:
 * conditions for the callback type are met.
 *
 * \param[in]  gpio_pin   GPIO pin
 */
void gpio_enable_callback(uint8_t gpio_pin)
{
1000921c:	b530      	push	{r4, r5, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000921e:	280f      	cmp	r0, #15
10009220:	d805      	bhi.n	1000922e <gpio_enable_callback+0x12>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
10009222:	2280      	movs	r2, #128	; 0x80
10009224:	0412      	lsls	r2, r2, #16
10009226:	4b12      	ldr	r3, [pc, #72]	; (10009270 <gpio_enable_callback+0x54>)
10009228:	601a      	str	r2, [r3, #0]
		gpio_port = 0;
1000922a:	2200      	movs	r2, #0
1000922c:	e00c      	b.n	10009248 <gpio_enable_callback+0x2c>
		NVIC_EnableIRQ(GPIO0_IRQn);
	} else if (gpio_pin < 32) {
1000922e:	281f      	cmp	r0, #31
10009230:	d805      	bhi.n	1000923e <gpio_enable_callback+0x22>
10009232:	2280      	movs	r2, #128	; 0x80
10009234:	0452      	lsls	r2, r2, #17
10009236:	4b0e      	ldr	r3, [pc, #56]	; (10009270 <gpio_enable_callback+0x54>)
10009238:	601a      	str	r2, [r3, #0]
		gpio_port = 1;
1000923a:	2201      	movs	r2, #1
1000923c:	e004      	b.n	10009248 <gpio_enable_callback+0x2c>
1000923e:	2280      	movs	r2, #128	; 0x80
10009240:	0492      	lsls	r2, r2, #18
10009242:	4b0b      	ldr	r3, [pc, #44]	; (10009270 <gpio_enable_callback+0x54>)
10009244:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(GPIO1_IRQn);
	} else {
		gpio_port = 2;
10009246:	2202      	movs	r2, #2
		NVIC_EnableIRQ(GPIO2_IRQn);
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask |= (1 << (gpio_pin % 16));
10009248:	230f      	movs	r3, #15
1000924a:	4018      	ands	r0, r3
1000924c:	2101      	movs	r1, #1
1000924e:	4081      	lsls	r1, r0
10009250:	4c08      	ldr	r4, [pc, #32]	; (10009274 <gpio_enable_callback+0x58>)
10009252:	00d5      	lsls	r5, r2, #3
10009254:	18ab      	adds	r3, r5, r2
10009256:	00db      	lsls	r3, r3, #3
10009258:	18e3      	adds	r3, r4, r3
1000925a:	3346      	adds	r3, #70	; 0x46
1000925c:	8818      	ldrh	r0, [r3, #0]
1000925e:	4308      	orrs	r0, r1
10009260:	8018      	strh	r0, [r3, #0]
	_gpio_instances[gpio_port].hw->INTENSET.reg = (1 << (gpio_pin % 16));
10009262:	18aa      	adds	r2, r5, r2
10009264:	00d2      	lsls	r2, r2, #3
10009266:	5913      	ldr	r3, [r2, r4]
10009268:	b289      	uxth	r1, r1
1000926a:	8419      	strh	r1, [r3, #32]
}
1000926c:	bd30      	pop	{r4, r5, pc}
1000926e:	46c0      	nop			; (mov r8, r8)
10009270:	e000e100 	.word	0xe000e100
10009274:	10014644 	.word	0x10014644

10009278 <gpio_disable_callback>:
 * The callback function will not be called from the interrupt handler.
 *
 * \param[in]  gpio_pin   GPIO pin
 */
void gpio_disable_callback(uint8_t gpio_pin)
{
10009278:	b530      	push	{r4, r5, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
		gpio_port = 0;
1000927a:	2300      	movs	r3, #0
{
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000927c:	280f      	cmp	r0, #15
1000927e:	d904      	bls.n	1000928a <gpio_disable_callback+0x12>
		gpio_port = 0;
	} else if (gpio_pin < 32) {
		gpio_port = 1;
	} else {
		gpio_port = 2;
10009280:	221f      	movs	r2, #31
10009282:	4282      	cmp	r2, r0
10009284:	415b      	adcs	r3, r3
10009286:	3a1d      	subs	r2, #29
10009288:	1ad3      	subs	r3, r2, r3
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask &= ~(1 << (gpio_pin % 16));
1000928a:	220f      	movs	r2, #15
1000928c:	4010      	ands	r0, r2
1000928e:	2101      	movs	r1, #1
10009290:	4081      	lsls	r1, r0
10009292:	4c07      	ldr	r4, [pc, #28]	; (100092b0 <gpio_disable_callback+0x38>)
10009294:	00dd      	lsls	r5, r3, #3
10009296:	18ea      	adds	r2, r5, r3
10009298:	00d2      	lsls	r2, r2, #3
1000929a:	18a2      	adds	r2, r4, r2
1000929c:	3246      	adds	r2, #70	; 0x46
1000929e:	8810      	ldrh	r0, [r2, #0]
100092a0:	4388      	bics	r0, r1
100092a2:	8010      	strh	r0, [r2, #0]
	_gpio_instances[gpio_port].hw->INTENCLR.reg = (1 << (gpio_pin % 16));
100092a4:	18eb      	adds	r3, r5, r3
100092a6:	00db      	lsls	r3, r3, #3
100092a8:	591b      	ldr	r3, [r3, r4]
100092aa:	b289      	uxth	r1, r1
100092ac:	8499      	strh	r1, [r3, #36]	; 0x24
}
100092ae:	bd30      	pop	{r4, r5, pc}
100092b0:	10014644 	.word	0x10014644

100092b4 <gpio_init>:
 *
 * This function will init GPIO callback.
 *
 */
void gpio_init(void)
{
100092b4:	b510      	push	{r4, lr}
100092b6:	4a11      	ldr	r2, [pc, #68]	; (100092fc <gpio_init+0x48>)
100092b8:	0010      	movs	r0, r2
100092ba:	30d8      	adds	r0, #216	; 0xd8
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
			_gpio_instances[i].callback[j] = NULL;
100092bc:	2100      	movs	r1, #0
100092be:	e007      	b.n	100092d0 <gpio_init+0x1c>
100092c0:	c302      	stmia	r3!, {r1}
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
100092c2:	4293      	cmp	r3, r2
100092c4:	d1fc      	bne.n	100092c0 <gpio_init+0xc>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
100092c6:	8051      	strh	r1, [r2, #2]
		_gpio_instances[i].callback_reg_mask = 0;
100092c8:	8011      	strh	r1, [r2, #0]
100092ca:	3248      	adds	r2, #72	; 0x48
 */
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
100092cc:	4282      	cmp	r2, r0
100092ce:	d002      	beq.n	100092d6 <gpio_init+0x22>
100092d0:	0013      	movs	r3, r2
100092d2:	3b40      	subs	r3, #64	; 0x40
100092d4:	e7f4      	b.n	100092c0 <gpio_init+0xc>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
		_gpio_instances[i].callback_reg_mask = 0;
	}
	_gpio_instances[0].hw = (void *)GPIO0;
100092d6:	4b0a      	ldr	r3, [pc, #40]	; (10009300 <gpio_init+0x4c>)
100092d8:	4a0a      	ldr	r2, [pc, #40]	; (10009304 <gpio_init+0x50>)
100092da:	601a      	str	r2, [r3, #0]
	_gpio_instances[1].hw = (void *)GPIO1;
100092dc:	4a0a      	ldr	r2, [pc, #40]	; (10009308 <gpio_init+0x54>)
100092de:	649a      	str	r2, [r3, #72]	; 0x48
	_gpio_instances[2].hw = (void *)GPIO2;
100092e0:	490a      	ldr	r1, [pc, #40]	; (1000930c <gpio_init+0x58>)
100092e2:	2290      	movs	r2, #144	; 0x90
100092e4:	5099      	str	r1, [r3, r2]
	system_register_isr(RAM_ISR_TABLE_PORT0_COMB_INDEX, (uint32_t)gpio_port0_isr_handler);
100092e6:	490a      	ldr	r1, [pc, #40]	; (10009310 <gpio_init+0x5c>)
100092e8:	2027      	movs	r0, #39	; 0x27
100092ea:	4c0a      	ldr	r4, [pc, #40]	; (10009314 <gpio_init+0x60>)
100092ec:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT1_COMB_INDEX, (uint32_t)gpio_port1_isr_handler);
100092ee:	490a      	ldr	r1, [pc, #40]	; (10009318 <gpio_init+0x64>)
100092f0:	2028      	movs	r0, #40	; 0x28
100092f2:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT2_COMB_INDEX, (uint32_t)gpio_port2_isr_handler);
100092f4:	4909      	ldr	r1, [pc, #36]	; (1000931c <gpio_init+0x68>)
100092f6:	2029      	movs	r0, #41	; 0x29
100092f8:	47a0      	blx	r4
}
100092fa:	bd10      	pop	{r4, pc}
100092fc:	10014688 	.word	0x10014688
10009300:	10014644 	.word	0x10014644
10009304:	40010000 	.word	0x40010000
10009308:	40011000 	.word	0x40011000
1000930c:	40013000 	.word	0x40013000
10009310:	10008ce9 	.word	0x10008ce9
10009314:	10009b75 	.word	0x10009b75
10009318:	10008d4d 	.word	0x10008d4d
1000931c:	10008dbd 	.word	0x10008dbd

10009320 <system_clock_config>:
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_config(enum system_clock_resource resoure, \
				enum system_clock_freq freq)
{
	switch (resoure) {
10009320:	2801      	cmp	r0, #1
10009322:	d00d      	beq.n	10009340 <system_clock_config+0x20>
10009324:	2800      	cmp	r0, #0
10009326:	d002      	beq.n	1000932e <system_clock_config+0xe>
10009328:	2802      	cmp	r0, #2
1000932a:	d01c      	beq.n	10009366 <system_clock_config+0x46>
1000932c:	e02e      	b.n	1000938c <system_clock_config+0x6c>
		case CLOCK_RESOURCE_XO_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000932e:	4a18      	ldr	r2, [pc, #96]	; (10009390 <system_clock_config+0x70>)
10009330:	6990      	ldr	r0, [r2, #24]
10009332:	230c      	movs	r3, #12
10009334:	4303      	orrs	r3, r0
10009336:	6193      	str	r3, [r2, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			system_clock_value = 26000000;
10009338:	4a16      	ldr	r2, [pc, #88]	; (10009394 <system_clock_config+0x74>)
1000933a:	4b17      	ldr	r3, [pc, #92]	; (10009398 <system_clock_config+0x78>)
1000933c:	601a      	str	r2, [r3, #0]
			break;
1000933e:	e01a      	b.n	10009376 <system_clock_config+0x56>

		case CLOCK_RESOURCE_LP_2_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
10009340:	4b13      	ldr	r3, [pc, #76]	; (10009390 <system_clock_config+0x70>)
10009342:	6998      	ldr	r0, [r3, #24]
10009344:	2208      	movs	r2, #8
10009346:	4302      	orrs	r2, r0
10009348:	619a      	str	r2, [r3, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000934a:	699a      	ldr	r2, [r3, #24]
1000934c:	2004      	movs	r0, #4
1000934e:	4382      	bics	r2, r0
10009350:	619a      	str	r2, [r3, #24]
					~LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK;
			AON_GP_REGS0->AON_PMU_CTRL.reg |= \
10009352:	4a12      	ldr	r2, [pc, #72]	; (1000939c <system_clock_config+0x7c>)
10009354:	6853      	ldr	r3, [r2, #4]
10009356:	2080      	movs	r0, #128	; 0x80
10009358:	0300      	lsls	r0, r0, #12
1000935a:	4303      	orrs	r3, r0
1000935c:	6053      	str	r3, [r2, #4]
					AON_GP_REGS_AON_PMU_CTRL_PMU_2MHZ_CLK_EN;
			system_clock_value = 2000000;
1000935e:	4a10      	ldr	r2, [pc, #64]	; (100093a0 <system_clock_config+0x80>)
10009360:	4b0d      	ldr	r3, [pc, #52]	; (10009398 <system_clock_config+0x78>)
10009362:	601a      	str	r2, [r3, #0]
			break;
10009364:	e007      	b.n	10009376 <system_clock_config+0x56>

		case CLOCK_RESOURCE_RC_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
10009366:	4a0a      	ldr	r2, [pc, #40]	; (10009390 <system_clock_config+0x70>)
10009368:	6993      	ldr	r3, [r2, #24]
1000936a:	200c      	movs	r0, #12
1000936c:	4383      	bics	r3, r0
1000936e:	6193      	str	r3, [r2, #24]
					~(LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
10009370:	4a08      	ldr	r2, [pc, #32]	; (10009394 <system_clock_config+0x74>)
10009372:	4b09      	ldr	r3, [pc, #36]	; (10009398 <system_clock_config+0x78>)
10009374:	601a      	str	r2, [r3, #0]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
10009376:	4b06      	ldr	r3, [pc, #24]	; (10009390 <system_clock_config+0x70>)
10009378:	699a      	ldr	r2, [r3, #24]
1000937a:	2003      	movs	r0, #3
1000937c:	4382      	bics	r2, r0
1000937e:	619a      	str	r2, [r3, #24]
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
10009380:	699a      	ldr	r2, [r3, #24]
10009382:	4001      	ands	r1, r0
10009384:	4311      	orrs	r1, r2
10009386:	6199      	str	r1, [r3, #24]
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
10009388:	2000      	movs	r0, #0
1000938a:	e000      	b.n	1000938e <system_clock_config+0x6e>
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
			break;

		default:
			return STATUS_ERR_INVALID_ARG;
1000938c:	2017      	movs	r0, #23
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
}
1000938e:	4770      	bx	lr
10009390:	4000b000 	.word	0x4000b000
10009394:	018cba80 	.word	0x018cba80
10009398:	1001471c 	.word	0x1001471c
1000939c:	4000f000 	.word	0x4000f000
100093a0:	001e8480 	.word	0x001e8480

100093a4 <system_clock_get_value>:
 *
 * \return system clock value.
 */
uint32_t system_clock_get_value(void)
{
	return system_clock_value;
100093a4:	4b01      	ldr	r3, [pc, #4]	; (100093ac <system_clock_get_value+0x8>)
100093a6:	6818      	ldr	r0, [r3, #0]
}
100093a8:	4770      	bx	lr
100093aa:	46c0      	nop			; (mov r8, r8)
100093ac:	1001471c 	.word	0x1001471c

100093b0 <system_clock_peripheral_enable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_enable(enum system_peripheral peripheral)
{
100093b0:	b500      	push	{lr}
	switch (peripheral) {
100093b2:	2835      	cmp	r0, #53	; 0x35
100093b4:	d900      	bls.n	100093b8 <system_clock_peripheral_enable+0x8>
100093b6:	e1a2      	b.n	100096fe <system_clock_peripheral_enable+0x34e>
100093b8:	0080      	lsls	r0, r0, #2
100093ba:	4bd2      	ldr	r3, [pc, #840]	; (10009704 <system_clock_peripheral_enable+0x354>)
100093bc:	581b      	ldr	r3, [r3, r0]
100093be:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100093c0:	4ad1      	ldr	r2, [pc, #836]	; (10009708 <system_clock_peripheral_enable+0x358>)
100093c2:	68d1      	ldr	r1, [r2, #12]
100093c4:	2302      	movs	r3, #2
100093c6:	430b      	orrs	r3, r1
100093c8:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100093ca:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;
100093cc:	e198      	b.n	10009700 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100093ce:	4ace      	ldr	r2, [pc, #824]	; (10009708 <system_clock_peripheral_enable+0x358>)
100093d0:	68d1      	ldr	r1, [r2, #12]
100093d2:	2304      	movs	r3, #4
100093d4:	430b      	orrs	r3, r1
100093d6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100093d8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;
100093da:	e191      	b.n	10009700 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100093dc:	4aca      	ldr	r2, [pc, #808]	; (10009708 <system_clock_peripheral_enable+0x358>)
100093de:	68d1      	ldr	r1, [r2, #12]
100093e0:	2308      	movs	r3, #8
100093e2:	430b      	orrs	r3, r1
100093e4:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100093e6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;
100093e8:	e18a      	b.n	10009700 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100093ea:	4ac7      	ldr	r2, [pc, #796]	; (10009708 <system_clock_peripheral_enable+0x358>)
100093ec:	68d1      	ldr	r1, [r2, #12]
100093ee:	2310      	movs	r3, #16
100093f0:	430b      	orrs	r3, r1
100093f2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100093f4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;
100093f6:	e183      	b.n	10009700 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100093f8:	4ac3      	ldr	r2, [pc, #780]	; (10009708 <system_clock_peripheral_enable+0x358>)
100093fa:	68d1      	ldr	r1, [r2, #12]
100093fc:	2320      	movs	r3, #32
100093fe:	430b      	orrs	r3, r1
10009400:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009402:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;
10009404:	e17c      	b.n	10009700 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009406:	4ac0      	ldr	r2, [pc, #768]	; (10009708 <system_clock_peripheral_enable+0x358>)
10009408:	68d1      	ldr	r1, [r2, #12]
1000940a:	2380      	movs	r3, #128	; 0x80
1000940c:	430b      	orrs	r3, r1
1000940e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009410:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
10009412:	e175      	b.n	10009700 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009414:	4abc      	ldr	r2, [pc, #752]	; (10009708 <system_clock_peripheral_enable+0x358>)
10009416:	68d3      	ldr	r3, [r2, #12]
10009418:	2180      	movs	r1, #128	; 0x80
1000941a:	0049      	lsls	r1, r1, #1
1000941c:	430b      	orrs	r3, r1
1000941e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009420:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN;
		break;
10009422:	e16d      	b.n	10009700 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009424:	4ab8      	ldr	r2, [pc, #736]	; (10009708 <system_clock_peripheral_enable+0x358>)
10009426:	68d3      	ldr	r3, [r2, #12]
10009428:	2180      	movs	r1, #128	; 0x80
1000942a:	0109      	lsls	r1, r1, #4
1000942c:	430b      	orrs	r3, r1
1000942e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009430:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN;
		break;
10009432:	e165      	b.n	10009700 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009434:	4ab4      	ldr	r2, [pc, #720]	; (10009708 <system_clock_peripheral_enable+0x358>)
10009436:	68d3      	ldr	r3, [r2, #12]
10009438:	2180      	movs	r1, #128	; 0x80
1000943a:	0149      	lsls	r1, r1, #5
1000943c:	430b      	orrs	r3, r1
1000943e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009440:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN;
		break;
10009442:	e15d      	b.n	10009700 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009444:	4ab0      	ldr	r2, [pc, #704]	; (10009708 <system_clock_peripheral_enable+0x358>)
10009446:	68d3      	ldr	r3, [r2, #12]
10009448:	2180      	movs	r1, #128	; 0x80
1000944a:	0189      	lsls	r1, r1, #6
1000944c:	430b      	orrs	r3, r1
1000944e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009450:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN;
		break;
10009452:	e155      	b.n	10009700 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009454:	4aac      	ldr	r2, [pc, #688]	; (10009708 <system_clock_peripheral_enable+0x358>)
10009456:	68d3      	ldr	r3, [r2, #12]
10009458:	2180      	movs	r1, #128	; 0x80
1000945a:	01c9      	lsls	r1, r1, #7
1000945c:	430b      	orrs	r3, r1
1000945e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009460:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN;
		break;
10009462:	e14d      	b.n	10009700 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009464:	4aa8      	ldr	r2, [pc, #672]	; (10009708 <system_clock_peripheral_enable+0x358>)
10009466:	68d3      	ldr	r3, [r2, #12]
10009468:	2180      	movs	r1, #128	; 0x80
1000946a:	0209      	lsls	r1, r1, #8
1000946c:	430b      	orrs	r3, r1
1000946e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009470:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN;
		break;
10009472:	e145      	b.n	10009700 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009474:	4aa4      	ldr	r2, [pc, #656]	; (10009708 <system_clock_peripheral_enable+0x358>)
10009476:	68d3      	ldr	r3, [r2, #12]
10009478:	2180      	movs	r1, #128	; 0x80
1000947a:	0249      	lsls	r1, r1, #9
1000947c:	430b      	orrs	r3, r1
1000947e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009480:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN;
		break;
10009482:	e13d      	b.n	10009700 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009484:	4aa0      	ldr	r2, [pc, #640]	; (10009708 <system_clock_peripheral_enable+0x358>)
10009486:	68d3      	ldr	r3, [r2, #12]
10009488:	2180      	movs	r1, #128	; 0x80
1000948a:	0289      	lsls	r1, r1, #10
1000948c:	430b      	orrs	r3, r1
1000948e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009490:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
10009492:	e135      	b.n	10009700 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009494:	4a9c      	ldr	r2, [pc, #624]	; (10009708 <system_clock_peripheral_enable+0x358>)
10009496:	68d3      	ldr	r3, [r2, #12]
10009498:	2180      	movs	r1, #128	; 0x80
1000949a:	02c9      	lsls	r1, r1, #11
1000949c:	430b      	orrs	r3, r1
1000949e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100094a0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
100094a2:	e12d      	b.n	10009700 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100094a4:	4a98      	ldr	r2, [pc, #608]	; (10009708 <system_clock_peripheral_enable+0x358>)
100094a6:	68d3      	ldr	r3, [r2, #12]
100094a8:	2180      	movs	r1, #128	; 0x80
100094aa:	0309      	lsls	r1, r1, #12
100094ac:	430b      	orrs	r3, r1
100094ae:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100094b0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
100094b2:	e125      	b.n	10009700 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100094b4:	4a94      	ldr	r2, [pc, #592]	; (10009708 <system_clock_peripheral_enable+0x358>)
100094b6:	68d3      	ldr	r3, [r2, #12]
100094b8:	2180      	movs	r1, #128	; 0x80
100094ba:	0349      	lsls	r1, r1, #13
100094bc:	430b      	orrs	r3, r1
100094be:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100094c0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
100094c2:	e11d      	b.n	10009700 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100094c4:	4a90      	ldr	r2, [pc, #576]	; (10009708 <system_clock_peripheral_enable+0x358>)
100094c6:	68d3      	ldr	r3, [r2, #12]
100094c8:	2180      	movs	r1, #128	; 0x80
100094ca:	0389      	lsls	r1, r1, #14
100094cc:	430b      	orrs	r3, r1
100094ce:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100094d0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
100094d2:	e115      	b.n	10009700 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100094d4:	4a8c      	ldr	r2, [pc, #560]	; (10009708 <system_clock_peripheral_enable+0x358>)
100094d6:	68d3      	ldr	r3, [r2, #12]
100094d8:	2180      	movs	r1, #128	; 0x80
100094da:	03c9      	lsls	r1, r1, #15
100094dc:	430b      	orrs	r3, r1
100094de:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100094e0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
100094e2:	e10d      	b.n	10009700 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100094e4:	4a88      	ldr	r2, [pc, #544]	; (10009708 <system_clock_peripheral_enable+0x358>)
100094e6:	68d3      	ldr	r3, [r2, #12]
100094e8:	2180      	movs	r1, #128	; 0x80
100094ea:	0409      	lsls	r1, r1, #16
100094ec:	430b      	orrs	r3, r1
100094ee:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100094f0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
100094f2:	e105      	b.n	10009700 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100094f4:	4a84      	ldr	r2, [pc, #528]	; (10009708 <system_clock_peripheral_enable+0x358>)
100094f6:	68d3      	ldr	r3, [r2, #12]
100094f8:	2180      	movs	r1, #128	; 0x80
100094fa:	0449      	lsls	r1, r1, #17
100094fc:	430b      	orrs	r3, r1
100094fe:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009500:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
10009502:	e0fd      	b.n	10009700 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009504:	4a80      	ldr	r2, [pc, #512]	; (10009708 <system_clock_peripheral_enable+0x358>)
10009506:	68d3      	ldr	r3, [r2, #12]
10009508:	2180      	movs	r1, #128	; 0x80
1000950a:	0489      	lsls	r1, r1, #18
1000950c:	430b      	orrs	r3, r1
1000950e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009510:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
10009512:	e0f5      	b.n	10009700 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009514:	4a7c      	ldr	r2, [pc, #496]	; (10009708 <system_clock_peripheral_enable+0x358>)
10009516:	68d3      	ldr	r3, [r2, #12]
10009518:	2180      	movs	r1, #128	; 0x80
1000951a:	04c9      	lsls	r1, r1, #19
1000951c:	430b      	orrs	r3, r1
1000951e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009520:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN;
		break;
10009522:	e0ed      	b.n	10009700 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009524:	4a78      	ldr	r2, [pc, #480]	; (10009708 <system_clock_peripheral_enable+0x358>)
10009526:	68d3      	ldr	r3, [r2, #12]
10009528:	2180      	movs	r1, #128	; 0x80
1000952a:	0509      	lsls	r1, r1, #20
1000952c:	430b      	orrs	r3, r1
1000952e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009530:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN;
		break;
10009532:	e0e5      	b.n	10009700 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009534:	4a74      	ldr	r2, [pc, #464]	; (10009708 <system_clock_peripheral_enable+0x358>)
10009536:	68d3      	ldr	r3, [r2, #12]
10009538:	2180      	movs	r1, #128	; 0x80
1000953a:	0549      	lsls	r1, r1, #21
1000953c:	430b      	orrs	r3, r1
1000953e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009540:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN;
		break;
10009542:	e0dd      	b.n	10009700 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009544:	4a70      	ldr	r2, [pc, #448]	; (10009708 <system_clock_peripheral_enable+0x358>)
10009546:	68d3      	ldr	r3, [r2, #12]
10009548:	2180      	movs	r1, #128	; 0x80
1000954a:	0589      	lsls	r1, r1, #22
1000954c:	430b      	orrs	r3, r1
1000954e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009550:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN;
		break;
10009552:	e0d5      	b.n	10009700 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009554:	4a6c      	ldr	r2, [pc, #432]	; (10009708 <system_clock_peripheral_enable+0x358>)
10009556:	68d3      	ldr	r3, [r2, #12]
10009558:	2180      	movs	r1, #128	; 0x80
1000955a:	05c9      	lsls	r1, r1, #23
1000955c:	430b      	orrs	r3, r1
1000955e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009560:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
10009562:	e0cd      	b.n	10009700 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009564:	4a68      	ldr	r2, [pc, #416]	; (10009708 <system_clock_peripheral_enable+0x358>)
10009566:	6911      	ldr	r1, [r2, #16]
10009568:	2301      	movs	r3, #1
1000956a:	430b      	orrs	r3, r1
1000956c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000956e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;
10009570:	e0c6      	b.n	10009700 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009572:	4a65      	ldr	r2, [pc, #404]	; (10009708 <system_clock_peripheral_enable+0x358>)
10009574:	6911      	ldr	r1, [r2, #16]
10009576:	2302      	movs	r3, #2
10009578:	430b      	orrs	r3, r1
1000957a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000957c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;
1000957e:	e0bf      	b.n	10009700 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009580:	4a61      	ldr	r2, [pc, #388]	; (10009708 <system_clock_peripheral_enable+0x358>)
10009582:	6911      	ldr	r1, [r2, #16]
10009584:	2304      	movs	r3, #4
10009586:	430b      	orrs	r3, r1
10009588:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000958a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;
1000958c:	e0b8      	b.n	10009700 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000958e:	4a5e      	ldr	r2, [pc, #376]	; (10009708 <system_clock_peripheral_enable+0x358>)
10009590:	6911      	ldr	r1, [r2, #16]
10009592:	2308      	movs	r3, #8
10009594:	430b      	orrs	r3, r1
10009596:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009598:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;
1000959a:	e0b1      	b.n	10009700 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000959c:	4a5a      	ldr	r2, [pc, #360]	; (10009708 <system_clock_peripheral_enable+0x358>)
1000959e:	6911      	ldr	r1, [r2, #16]
100095a0:	2310      	movs	r3, #16
100095a2:	430b      	orrs	r3, r1
100095a4:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100095a6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;
100095a8:	e0aa      	b.n	10009700 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100095aa:	4a57      	ldr	r2, [pc, #348]	; (10009708 <system_clock_peripheral_enable+0x358>)
100095ac:	6911      	ldr	r1, [r2, #16]
100095ae:	2320      	movs	r3, #32
100095b0:	430b      	orrs	r3, r1
100095b2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100095b4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;
100095b6:	e0a3      	b.n	10009700 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100095b8:	4a53      	ldr	r2, [pc, #332]	; (10009708 <system_clock_peripheral_enable+0x358>)
100095ba:	6911      	ldr	r1, [r2, #16]
100095bc:	2340      	movs	r3, #64	; 0x40
100095be:	430b      	orrs	r3, r1
100095c0:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100095c2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;
100095c4:	e09c      	b.n	10009700 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100095c6:	4a50      	ldr	r2, [pc, #320]	; (10009708 <system_clock_peripheral_enable+0x358>)
100095c8:	6911      	ldr	r1, [r2, #16]
100095ca:	2380      	movs	r3, #128	; 0x80
100095cc:	430b      	orrs	r3, r1
100095ce:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100095d0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN;
		break;
100095d2:	e095      	b.n	10009700 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100095d4:	4a4c      	ldr	r2, [pc, #304]	; (10009708 <system_clock_peripheral_enable+0x358>)
100095d6:	6913      	ldr	r3, [r2, #16]
100095d8:	2180      	movs	r1, #128	; 0x80
100095da:	0049      	lsls	r1, r1, #1
100095dc:	430b      	orrs	r3, r1
100095de:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100095e0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN;
		break;
100095e2:	e08d      	b.n	10009700 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100095e4:	4a48      	ldr	r2, [pc, #288]	; (10009708 <system_clock_peripheral_enable+0x358>)
100095e6:	6913      	ldr	r3, [r2, #16]
100095e8:	2180      	movs	r1, #128	; 0x80
100095ea:	0089      	lsls	r1, r1, #2
100095ec:	430b      	orrs	r3, r1
100095ee:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100095f0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN;
		break;
100095f2:	e085      	b.n	10009700 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100095f4:	4a44      	ldr	r2, [pc, #272]	; (10009708 <system_clock_peripheral_enable+0x358>)
100095f6:	6913      	ldr	r3, [r2, #16]
100095f8:	2180      	movs	r1, #128	; 0x80
100095fa:	00c9      	lsls	r1, r1, #3
100095fc:	430b      	orrs	r3, r1
100095fe:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009600:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
10009602:	e07d      	b.n	10009700 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009604:	4a40      	ldr	r2, [pc, #256]	; (10009708 <system_clock_peripheral_enable+0x358>)
10009606:	6913      	ldr	r3, [r2, #16]
10009608:	2180      	movs	r1, #128	; 0x80
1000960a:	0109      	lsls	r1, r1, #4
1000960c:	430b      	orrs	r3, r1
1000960e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009610:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
10009612:	e075      	b.n	10009700 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009614:	4a3c      	ldr	r2, [pc, #240]	; (10009708 <system_clock_peripheral_enable+0x358>)
10009616:	6913      	ldr	r3, [r2, #16]
10009618:	2180      	movs	r1, #128	; 0x80
1000961a:	0149      	lsls	r1, r1, #5
1000961c:	430b      	orrs	r3, r1
1000961e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009620:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
10009622:	e06d      	b.n	10009700 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009624:	4a38      	ldr	r2, [pc, #224]	; (10009708 <system_clock_peripheral_enable+0x358>)
10009626:	6913      	ldr	r3, [r2, #16]
10009628:	2180      	movs	r1, #128	; 0x80
1000962a:	0189      	lsls	r1, r1, #6
1000962c:	430b      	orrs	r3, r1
1000962e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009630:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
10009632:	e065      	b.n	10009700 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009634:	4a34      	ldr	r2, [pc, #208]	; (10009708 <system_clock_peripheral_enable+0x358>)
10009636:	6913      	ldr	r3, [r2, #16]
10009638:	2180      	movs	r1, #128	; 0x80
1000963a:	01c9      	lsls	r1, r1, #7
1000963c:	430b      	orrs	r3, r1
1000963e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009640:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN;
		break;
10009642:	e05d      	b.n	10009700 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009644:	4a30      	ldr	r2, [pc, #192]	; (10009708 <system_clock_peripheral_enable+0x358>)
10009646:	6913      	ldr	r3, [r2, #16]
10009648:	2180      	movs	r1, #128	; 0x80
1000964a:	0209      	lsls	r1, r1, #8
1000964c:	430b      	orrs	r3, r1
1000964e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009650:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
10009652:	e055      	b.n	10009700 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009654:	4a2c      	ldr	r2, [pc, #176]	; (10009708 <system_clock_peripheral_enable+0x358>)
10009656:	6913      	ldr	r3, [r2, #16]
10009658:	2180      	movs	r1, #128	; 0x80
1000965a:	0249      	lsls	r1, r1, #9
1000965c:	430b      	orrs	r3, r1
1000965e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009660:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
10009662:	e04d      	b.n	10009700 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009664:	4a28      	ldr	r2, [pc, #160]	; (10009708 <system_clock_peripheral_enable+0x358>)
10009666:	6913      	ldr	r3, [r2, #16]
10009668:	2180      	movs	r1, #128	; 0x80
1000966a:	0289      	lsls	r1, r1, #10
1000966c:	430b      	orrs	r3, r1
1000966e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009670:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
10009672:	e045      	b.n	10009700 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009674:	4a24      	ldr	r2, [pc, #144]	; (10009708 <system_clock_peripheral_enable+0x358>)
10009676:	6913      	ldr	r3, [r2, #16]
10009678:	2180      	movs	r1, #128	; 0x80
1000967a:	02c9      	lsls	r1, r1, #11
1000967c:	430b      	orrs	r3, r1
1000967e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009680:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
10009682:	e03d      	b.n	10009700 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009684:	4a20      	ldr	r2, [pc, #128]	; (10009708 <system_clock_peripheral_enable+0x358>)
10009686:	6913      	ldr	r3, [r2, #16]
10009688:	2180      	movs	r1, #128	; 0x80
1000968a:	0309      	lsls	r1, r1, #12
1000968c:	430b      	orrs	r3, r1
1000968e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009690:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
10009692:	e035      	b.n	10009700 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009694:	4a1c      	ldr	r2, [pc, #112]	; (10009708 <system_clock_peripheral_enable+0x358>)
10009696:	6913      	ldr	r3, [r2, #16]
10009698:	2180      	movs	r1, #128	; 0x80
1000969a:	0349      	lsls	r1, r1, #13
1000969c:	430b      	orrs	r3, r1
1000969e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100096a0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
100096a2:	e02d      	b.n	10009700 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100096a4:	4a18      	ldr	r2, [pc, #96]	; (10009708 <system_clock_peripheral_enable+0x358>)
100096a6:	6913      	ldr	r3, [r2, #16]
100096a8:	2180      	movs	r1, #128	; 0x80
100096aa:	0389      	lsls	r1, r1, #14
100096ac:	430b      	orrs	r3, r1
100096ae:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100096b0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
100096b2:	e025      	b.n	10009700 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100096b4:	4a14      	ldr	r2, [pc, #80]	; (10009708 <system_clock_peripheral_enable+0x358>)
100096b6:	6913      	ldr	r3, [r2, #16]
100096b8:	2180      	movs	r1, #128	; 0x80
100096ba:	03c9      	lsls	r1, r1, #15
100096bc:	430b      	orrs	r3, r1
100096be:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100096c0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
100096c2:	e01d      	b.n	10009700 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100096c4:	4a10      	ldr	r2, [pc, #64]	; (10009708 <system_clock_peripheral_enable+0x358>)
100096c6:	6913      	ldr	r3, [r2, #16]
100096c8:	2180      	movs	r1, #128	; 0x80
100096ca:	0409      	lsls	r1, r1, #16
100096cc:	430b      	orrs	r3, r1
100096ce:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100096d0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
100096d2:	e015      	b.n	10009700 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
100096d4:	4a0c      	ldr	r2, [pc, #48]	; (10009708 <system_clock_peripheral_enable+0x358>)
100096d6:	7d11      	ldrb	r1, [r2, #20]
100096d8:	2301      	movs	r3, #1
100096da:	430b      	orrs	r3, r1
100096dc:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100096de:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;
100096e0:	e00e      	b.n	10009700 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
100096e2:	4a09      	ldr	r2, [pc, #36]	; (10009708 <system_clock_peripheral_enable+0x358>)
100096e4:	7d11      	ldrb	r1, [r2, #20]
100096e6:	2302      	movs	r3, #2
100096e8:	430b      	orrs	r3, r1
100096ea:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100096ec:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;
100096ee:	e007      	b.n	10009700 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
100096f0:	4a05      	ldr	r2, [pc, #20]	; (10009708 <system_clock_peripheral_enable+0x358>)
100096f2:	7d11      	ldrb	r1, [r2, #20]
100096f4:	2304      	movs	r3, #4
100096f6:	430b      	orrs	r3, r1
100096f8:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100096fa:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_PERIPH_REGS_CLK_EN;
		break;
100096fc:	e000      	b.n	10009700 <system_clock_peripheral_enable+0x350>

		default:
			return STATUS_ERR_INVALID_ARG;
100096fe:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
10009700:	bd00      	pop	{pc}
10009702:	46c0      	nop			; (mov r8, r8)
10009704:	10011c40 	.word	0x10011c40
10009708:	4000b000 	.word	0x4000b000

1000970c <system_peripheral_reset>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_peripheral_reset(enum system_peripheral peripheral)
{
1000970c:	b500      	push	{lr}
	switch (peripheral) {
1000970e:	2843      	cmp	r0, #67	; 0x43
10009710:	d900      	bls.n	10009714 <system_peripheral_reset+0x8>
10009712:	e223      	b.n	10009b5c <system_peripheral_reset+0x450>
10009714:	0080      	lsls	r0, r0, #2
10009716:	4be0      	ldr	r3, [pc, #896]	; (10009a98 <system_peripheral_reset+0x38c>)
10009718:	581b      	ldr	r3, [r3, r0]
1000971a:	469f      	mov	pc, r3
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000971c:	4bdf      	ldr	r3, [pc, #892]	; (10009a9c <system_peripheral_reset+0x390>)
1000971e:	6859      	ldr	r1, [r3, #4]
10009720:	2202      	movs	r2, #2
10009722:	4391      	bics	r1, r2
10009724:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009726:	6859      	ldr	r1, [r3, #4]
10009728:	430a      	orrs	r2, r1
1000972a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000972c:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
		break;
1000972e:	e216      	b.n	10009b5e <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009730:	4bda      	ldr	r3, [pc, #872]	; (10009a9c <system_peripheral_reset+0x390>)
10009732:	6859      	ldr	r1, [r3, #4]
10009734:	2204      	movs	r2, #4
10009736:	4391      	bics	r1, r2
10009738:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000973a:	6859      	ldr	r1, [r3, #4]
1000973c:	430a      	orrs	r2, r1
1000973e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009740:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
		break;
10009742:	e20c      	b.n	10009b5e <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009744:	4bd5      	ldr	r3, [pc, #852]	; (10009a9c <system_peripheral_reset+0x390>)
10009746:	6859      	ldr	r1, [r3, #4]
10009748:	2208      	movs	r2, #8
1000974a:	4391      	bics	r1, r2
1000974c:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000974e:	6859      	ldr	r1, [r3, #4]
10009750:	430a      	orrs	r2, r1
10009752:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009754:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
		break;
10009756:	e202      	b.n	10009b5e <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009758:	4bd0      	ldr	r3, [pc, #832]	; (10009a9c <system_peripheral_reset+0x390>)
1000975a:	6859      	ldr	r1, [r3, #4]
1000975c:	2210      	movs	r2, #16
1000975e:	4391      	bics	r1, r2
10009760:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009762:	6859      	ldr	r1, [r3, #4]
10009764:	430a      	orrs	r2, r1
10009766:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009768:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
		break;
1000976a:	e1f8      	b.n	10009b5e <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000976c:	4bcb      	ldr	r3, [pc, #812]	; (10009a9c <system_peripheral_reset+0x390>)
1000976e:	6859      	ldr	r1, [r3, #4]
10009770:	2220      	movs	r2, #32
10009772:	4391      	bics	r1, r2
10009774:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009776:	6859      	ldr	r1, [r3, #4]
10009778:	430a      	orrs	r2, r1
1000977a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000977c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
		break;
1000977e:	e1ee      	b.n	10009b5e <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009780:	4bc6      	ldr	r3, [pc, #792]	; (10009a9c <system_peripheral_reset+0x390>)
10009782:	6859      	ldr	r1, [r3, #4]
10009784:	2240      	movs	r2, #64	; 0x40
10009786:	4391      	bics	r1, r2
10009788:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000978a:	6859      	ldr	r1, [r3, #4]
1000978c:	430a      	orrs	r2, r1
1000978e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009790:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
		break;
10009792:	e1e4      	b.n	10009b5e <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009794:	4bc1      	ldr	r3, [pc, #772]	; (10009a9c <system_peripheral_reset+0x390>)
10009796:	6859      	ldr	r1, [r3, #4]
10009798:	2280      	movs	r2, #128	; 0x80
1000979a:	4391      	bics	r1, r2
1000979c:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000979e:	6859      	ldr	r1, [r3, #4]
100097a0:	430a      	orrs	r2, r1
100097a2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100097a4:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
		break;
100097a6:	e1da      	b.n	10009b5e <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100097a8:	4bbc      	ldr	r3, [pc, #752]	; (10009a9c <system_peripheral_reset+0x390>)
100097aa:	6859      	ldr	r1, [r3, #4]
100097ac:	4abc      	ldr	r2, [pc, #752]	; (10009aa0 <system_peripheral_reset+0x394>)
100097ae:	400a      	ands	r2, r1
100097b0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100097b2:	685a      	ldr	r2, [r3, #4]
100097b4:	2180      	movs	r1, #128	; 0x80
100097b6:	0049      	lsls	r1, r1, #1
100097b8:	430a      	orrs	r2, r1
100097ba:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100097bc:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
		break;
100097be:	e1ce      	b.n	10009b5e <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100097c0:	4bb6      	ldr	r3, [pc, #728]	; (10009a9c <system_peripheral_reset+0x390>)
100097c2:	6859      	ldr	r1, [r3, #4]
100097c4:	4ab7      	ldr	r2, [pc, #732]	; (10009aa4 <system_peripheral_reset+0x398>)
100097c6:	400a      	ands	r2, r1
100097c8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100097ca:	685a      	ldr	r2, [r3, #4]
100097cc:	2180      	movs	r1, #128	; 0x80
100097ce:	0089      	lsls	r1, r1, #2
100097d0:	430a      	orrs	r2, r1
100097d2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100097d4:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
		break;
100097d6:	e1c2      	b.n	10009b5e <system_peripheral_reset+0x452>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100097d8:	4bb0      	ldr	r3, [pc, #704]	; (10009a9c <system_peripheral_reset+0x390>)
100097da:	6859      	ldr	r1, [r3, #4]
100097dc:	4ab2      	ldr	r2, [pc, #712]	; (10009aa8 <system_peripheral_reset+0x39c>)
100097de:	400a      	ands	r2, r1
100097e0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100097e2:	685a      	ldr	r2, [r3, #4]
100097e4:	2180      	movs	r1, #128	; 0x80
100097e6:	00c9      	lsls	r1, r1, #3
100097e8:	430a      	orrs	r2, r1
100097ea:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100097ec:	2000      	movs	r0, #0
		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
		break;
100097ee:	e1b6      	b.n	10009b5e <system_peripheral_reset+0x452>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100097f0:	4baa      	ldr	r3, [pc, #680]	; (10009a9c <system_peripheral_reset+0x390>)
100097f2:	6859      	ldr	r1, [r3, #4]
100097f4:	4aad      	ldr	r2, [pc, #692]	; (10009aac <system_peripheral_reset+0x3a0>)
100097f6:	400a      	ands	r2, r1
100097f8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100097fa:	685a      	ldr	r2, [r3, #4]
100097fc:	2180      	movs	r1, #128	; 0x80
100097fe:	0109      	lsls	r1, r1, #4
10009800:	430a      	orrs	r2, r1
10009802:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009804:	2000      	movs	r0, #0
		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
		break;
10009806:	e1aa      	b.n	10009b5e <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009808:	4ba4      	ldr	r3, [pc, #656]	; (10009a9c <system_peripheral_reset+0x390>)
1000980a:	6859      	ldr	r1, [r3, #4]
1000980c:	4aa8      	ldr	r2, [pc, #672]	; (10009ab0 <system_peripheral_reset+0x3a4>)
1000980e:	400a      	ands	r2, r1
10009810:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009812:	685a      	ldr	r2, [r3, #4]
10009814:	2180      	movs	r1, #128	; 0x80
10009816:	0149      	lsls	r1, r1, #5
10009818:	430a      	orrs	r2, r1
1000981a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000981c:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
		break;
1000981e:	e19e      	b.n	10009b5e <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009820:	4b9e      	ldr	r3, [pc, #632]	; (10009a9c <system_peripheral_reset+0x390>)
10009822:	6859      	ldr	r1, [r3, #4]
10009824:	4aa3      	ldr	r2, [pc, #652]	; (10009ab4 <system_peripheral_reset+0x3a8>)
10009826:	400a      	ands	r2, r1
10009828:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000982a:	685a      	ldr	r2, [r3, #4]
1000982c:	2180      	movs	r1, #128	; 0x80
1000982e:	0189      	lsls	r1, r1, #6
10009830:	430a      	orrs	r2, r1
10009832:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009834:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
		break;
10009836:	e192      	b.n	10009b5e <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009838:	4b98      	ldr	r3, [pc, #608]	; (10009a9c <system_peripheral_reset+0x390>)
1000983a:	6859      	ldr	r1, [r3, #4]
1000983c:	4a9e      	ldr	r2, [pc, #632]	; (10009ab8 <system_peripheral_reset+0x3ac>)
1000983e:	400a      	ands	r2, r1
10009840:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009842:	685a      	ldr	r2, [r3, #4]
10009844:	2180      	movs	r1, #128	; 0x80
10009846:	01c9      	lsls	r1, r1, #7
10009848:	430a      	orrs	r2, r1
1000984a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000984c:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
		break;
1000984e:	e186      	b.n	10009b5e <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009850:	4b92      	ldr	r3, [pc, #584]	; (10009a9c <system_peripheral_reset+0x390>)
10009852:	6859      	ldr	r1, [r3, #4]
10009854:	4a99      	ldr	r2, [pc, #612]	; (10009abc <system_peripheral_reset+0x3b0>)
10009856:	400a      	ands	r2, r1
10009858:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000985a:	685a      	ldr	r2, [r3, #4]
1000985c:	2180      	movs	r1, #128	; 0x80
1000985e:	0209      	lsls	r1, r1, #8
10009860:	430a      	orrs	r2, r1
10009862:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009864:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
		break;
10009866:	e17a      	b.n	10009b5e <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009868:	4b8c      	ldr	r3, [pc, #560]	; (10009a9c <system_peripheral_reset+0x390>)
1000986a:	6859      	ldr	r1, [r3, #4]
1000986c:	4a94      	ldr	r2, [pc, #592]	; (10009ac0 <system_peripheral_reset+0x3b4>)
1000986e:	400a      	ands	r2, r1
10009870:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009872:	685a      	ldr	r2, [r3, #4]
10009874:	2180      	movs	r1, #128	; 0x80
10009876:	0249      	lsls	r1, r1, #9
10009878:	430a      	orrs	r2, r1
1000987a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000987c:	2000      	movs	r0, #0
		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
		break;
1000987e:	e16e      	b.n	10009b5e <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009880:	4b86      	ldr	r3, [pc, #536]	; (10009a9c <system_peripheral_reset+0x390>)
10009882:	6859      	ldr	r1, [r3, #4]
10009884:	4a8f      	ldr	r2, [pc, #572]	; (10009ac4 <system_peripheral_reset+0x3b8>)
10009886:	400a      	ands	r2, r1
10009888:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000988a:	685a      	ldr	r2, [r3, #4]
1000988c:	2180      	movs	r1, #128	; 0x80
1000988e:	0289      	lsls	r1, r1, #10
10009890:	430a      	orrs	r2, r1
10009892:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009894:	2000      	movs	r0, #0
		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
		break;
10009896:	e162      	b.n	10009b5e <system_peripheral_reset+0x452>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009898:	4b80      	ldr	r3, [pc, #512]	; (10009a9c <system_peripheral_reset+0x390>)
1000989a:	6859      	ldr	r1, [r3, #4]
1000989c:	4a8a      	ldr	r2, [pc, #552]	; (10009ac8 <system_peripheral_reset+0x3bc>)
1000989e:	400a      	ands	r2, r1
100098a0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100098a2:	685a      	ldr	r2, [r3, #4]
100098a4:	2180      	movs	r1, #128	; 0x80
100098a6:	02c9      	lsls	r1, r1, #11
100098a8:	430a      	orrs	r2, r1
100098aa:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100098ac:	2000      	movs	r0, #0
		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
		break;
100098ae:	e156      	b.n	10009b5e <system_peripheral_reset+0x452>

		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100098b0:	4b7a      	ldr	r3, [pc, #488]	; (10009a9c <system_peripheral_reset+0x390>)
100098b2:	6859      	ldr	r1, [r3, #4]
100098b4:	4a85      	ldr	r2, [pc, #532]	; (10009acc <system_peripheral_reset+0x3c0>)
100098b6:	400a      	ands	r2, r1
100098b8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100098ba:	685a      	ldr	r2, [r3, #4]
100098bc:	2180      	movs	r1, #128	; 0x80
100098be:	0309      	lsls	r1, r1, #12
100098c0:	430a      	orrs	r2, r1
100098c2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100098c4:	2000      	movs	r0, #0
		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
		break;
100098c6:	e14a      	b.n	10009b5e <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100098c8:	4b74      	ldr	r3, [pc, #464]	; (10009a9c <system_peripheral_reset+0x390>)
100098ca:	6859      	ldr	r1, [r3, #4]
100098cc:	4a80      	ldr	r2, [pc, #512]	; (10009ad0 <system_peripheral_reset+0x3c4>)
100098ce:	400a      	ands	r2, r1
100098d0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100098d2:	685a      	ldr	r2, [r3, #4]
100098d4:	2180      	movs	r1, #128	; 0x80
100098d6:	0349      	lsls	r1, r1, #13
100098d8:	430a      	orrs	r2, r1
100098da:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100098dc:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
		break;
100098de:	e13e      	b.n	10009b5e <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100098e0:	4b6e      	ldr	r3, [pc, #440]	; (10009a9c <system_peripheral_reset+0x390>)
100098e2:	6859      	ldr	r1, [r3, #4]
100098e4:	4a7b      	ldr	r2, [pc, #492]	; (10009ad4 <system_peripheral_reset+0x3c8>)
100098e6:	400a      	ands	r2, r1
100098e8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100098ea:	685a      	ldr	r2, [r3, #4]
100098ec:	2180      	movs	r1, #128	; 0x80
100098ee:	0389      	lsls	r1, r1, #14
100098f0:	430a      	orrs	r2, r1
100098f2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100098f4:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
		break;
100098f6:	e132      	b.n	10009b5e <system_peripheral_reset+0x452>

		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100098f8:	4b68      	ldr	r3, [pc, #416]	; (10009a9c <system_peripheral_reset+0x390>)
100098fa:	6859      	ldr	r1, [r3, #4]
100098fc:	4a76      	ldr	r2, [pc, #472]	; (10009ad8 <system_peripheral_reset+0x3cc>)
100098fe:	400a      	ands	r2, r1
10009900:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009902:	685a      	ldr	r2, [r3, #4]
10009904:	2180      	movs	r1, #128	; 0x80
10009906:	03c9      	lsls	r1, r1, #15
10009908:	430a      	orrs	r2, r1
1000990a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000990c:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
		break;
1000990e:	e126      	b.n	10009b5e <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009910:	4b62      	ldr	r3, [pc, #392]	; (10009a9c <system_peripheral_reset+0x390>)
10009912:	6859      	ldr	r1, [r3, #4]
10009914:	4a71      	ldr	r2, [pc, #452]	; (10009adc <system_peripheral_reset+0x3d0>)
10009916:	400a      	ands	r2, r1
10009918:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000991a:	685a      	ldr	r2, [r3, #4]
1000991c:	2180      	movs	r1, #128	; 0x80
1000991e:	0409      	lsls	r1, r1, #16
10009920:	430a      	orrs	r2, r1
10009922:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009924:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
		break;
10009926:	e11a      	b.n	10009b5e <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009928:	4b5c      	ldr	r3, [pc, #368]	; (10009a9c <system_peripheral_reset+0x390>)
1000992a:	6859      	ldr	r1, [r3, #4]
1000992c:	4a6c      	ldr	r2, [pc, #432]	; (10009ae0 <system_peripheral_reset+0x3d4>)
1000992e:	400a      	ands	r2, r1
10009930:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009932:	685a      	ldr	r2, [r3, #4]
10009934:	2180      	movs	r1, #128	; 0x80
10009936:	0449      	lsls	r1, r1, #17
10009938:	430a      	orrs	r2, r1
1000993a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000993c:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
		break;
1000993e:	e10e      	b.n	10009b5e <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009940:	4b56      	ldr	r3, [pc, #344]	; (10009a9c <system_peripheral_reset+0x390>)
10009942:	6859      	ldr	r1, [r3, #4]
10009944:	4a67      	ldr	r2, [pc, #412]	; (10009ae4 <system_peripheral_reset+0x3d8>)
10009946:	400a      	ands	r2, r1
10009948:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000994a:	685a      	ldr	r2, [r3, #4]
1000994c:	2180      	movs	r1, #128	; 0x80
1000994e:	0489      	lsls	r1, r1, #18
10009950:	430a      	orrs	r2, r1
10009952:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009954:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
		break;
10009956:	e102      	b.n	10009b5e <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009958:	4b50      	ldr	r3, [pc, #320]	; (10009a9c <system_peripheral_reset+0x390>)
1000995a:	6859      	ldr	r1, [r3, #4]
1000995c:	4a62      	ldr	r2, [pc, #392]	; (10009ae8 <system_peripheral_reset+0x3dc>)
1000995e:	400a      	ands	r2, r1
10009960:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009962:	685a      	ldr	r2, [r3, #4]
10009964:	2180      	movs	r1, #128	; 0x80
10009966:	04c9      	lsls	r1, r1, #19
10009968:	430a      	orrs	r2, r1
1000996a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000996c:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
		break;
1000996e:	e0f6      	b.n	10009b5e <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009970:	4b4a      	ldr	r3, [pc, #296]	; (10009a9c <system_peripheral_reset+0x390>)
10009972:	6859      	ldr	r1, [r3, #4]
10009974:	4a5d      	ldr	r2, [pc, #372]	; (10009aec <system_peripheral_reset+0x3e0>)
10009976:	400a      	ands	r2, r1
10009978:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000997a:	685a      	ldr	r2, [r3, #4]
1000997c:	2180      	movs	r1, #128	; 0x80
1000997e:	0509      	lsls	r1, r1, #20
10009980:	430a      	orrs	r2, r1
10009982:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009984:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
		break;
10009986:	e0ea      	b.n	10009b5e <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009988:	4b44      	ldr	r3, [pc, #272]	; (10009a9c <system_peripheral_reset+0x390>)
1000998a:	6859      	ldr	r1, [r3, #4]
1000998c:	4a58      	ldr	r2, [pc, #352]	; (10009af0 <system_peripheral_reset+0x3e4>)
1000998e:	400a      	ands	r2, r1
10009990:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009992:	685a      	ldr	r2, [r3, #4]
10009994:	2180      	movs	r1, #128	; 0x80
10009996:	0549      	lsls	r1, r1, #21
10009998:	430a      	orrs	r2, r1
1000999a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000999c:	2000      	movs	r0, #0
		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
		break;
1000999e:	e0de      	b.n	10009b5e <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100099a0:	4b3e      	ldr	r3, [pc, #248]	; (10009a9c <system_peripheral_reset+0x390>)
100099a2:	6859      	ldr	r1, [r3, #4]
100099a4:	4a53      	ldr	r2, [pc, #332]	; (10009af4 <system_peripheral_reset+0x3e8>)
100099a6:	400a      	ands	r2, r1
100099a8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100099aa:	685a      	ldr	r2, [r3, #4]
100099ac:	2180      	movs	r1, #128	; 0x80
100099ae:	0589      	lsls	r1, r1, #22
100099b0:	430a      	orrs	r2, r1
100099b2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100099b4:	2000      	movs	r0, #0
		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
		break;
100099b6:	e0d2      	b.n	10009b5e <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100099b8:	4b38      	ldr	r3, [pc, #224]	; (10009a9c <system_peripheral_reset+0x390>)
100099ba:	6859      	ldr	r1, [r3, #4]
100099bc:	4a4e      	ldr	r2, [pc, #312]	; (10009af8 <system_peripheral_reset+0x3ec>)
100099be:	400a      	ands	r2, r1
100099c0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100099c2:	685a      	ldr	r2, [r3, #4]
100099c4:	2180      	movs	r1, #128	; 0x80
100099c6:	05c9      	lsls	r1, r1, #23
100099c8:	430a      	orrs	r2, r1
100099ca:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100099cc:	2000      	movs	r0, #0
		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
		break;
100099ce:	e0c6      	b.n	10009b5e <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100099d0:	4a32      	ldr	r2, [pc, #200]	; (10009a9c <system_peripheral_reset+0x390>)
100099d2:	6853      	ldr	r3, [r2, #4]
100099d4:	005b      	lsls	r3, r3, #1
100099d6:	085b      	lsrs	r3, r3, #1
100099d8:	6053      	str	r3, [r2, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100099da:	6853      	ldr	r3, [r2, #4]
100099dc:	2180      	movs	r1, #128	; 0x80
100099de:	0609      	lsls	r1, r1, #24
100099e0:	430b      	orrs	r3, r1
100099e2:	6053      	str	r3, [r2, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100099e4:	2000      	movs	r0, #0
		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
		break;
100099e6:	e0ba      	b.n	10009b5e <system_peripheral_reset+0x452>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
100099e8:	4b2c      	ldr	r3, [pc, #176]	; (10009a9c <system_peripheral_reset+0x390>)
100099ea:	891a      	ldrh	r2, [r3, #8]
100099ec:	2101      	movs	r1, #1
100099ee:	438a      	bics	r2, r1
100099f0:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
100099f2:	8919      	ldrh	r1, [r3, #8]
100099f4:	2201      	movs	r2, #1
100099f6:	430a      	orrs	r2, r1
100099f8:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100099fa:	2000      	movs	r0, #0
		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
		break;
100099fc:	e0af      	b.n	10009b5e <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
100099fe:	4b27      	ldr	r3, [pc, #156]	; (10009a9c <system_peripheral_reset+0x390>)
10009a00:	891a      	ldrh	r2, [r3, #8]
10009a02:	2102      	movs	r1, #2
10009a04:	438a      	bics	r2, r1
10009a06:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009a08:	8919      	ldrh	r1, [r3, #8]
10009a0a:	2202      	movs	r2, #2
10009a0c:	430a      	orrs	r2, r1
10009a0e:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009a10:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
		break;
10009a12:	e0a4      	b.n	10009b5e <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009a14:	4b21      	ldr	r3, [pc, #132]	; (10009a9c <system_peripheral_reset+0x390>)
10009a16:	891a      	ldrh	r2, [r3, #8]
10009a18:	2104      	movs	r1, #4
10009a1a:	438a      	bics	r2, r1
10009a1c:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009a1e:	8919      	ldrh	r1, [r3, #8]
10009a20:	2204      	movs	r2, #4
10009a22:	430a      	orrs	r2, r1
10009a24:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009a26:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
		break;
10009a28:	e099      	b.n	10009b5e <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009a2a:	4b1c      	ldr	r3, [pc, #112]	; (10009a9c <system_peripheral_reset+0x390>)
10009a2c:	891a      	ldrh	r2, [r3, #8]
10009a2e:	2108      	movs	r1, #8
10009a30:	438a      	bics	r2, r1
10009a32:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009a34:	8919      	ldrh	r1, [r3, #8]
10009a36:	2208      	movs	r2, #8
10009a38:	430a      	orrs	r2, r1
10009a3a:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009a3c:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
		break;
10009a3e:	e08e      	b.n	10009b5e <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009a40:	4b16      	ldr	r3, [pc, #88]	; (10009a9c <system_peripheral_reset+0x390>)
10009a42:	891a      	ldrh	r2, [r3, #8]
10009a44:	2110      	movs	r1, #16
10009a46:	438a      	bics	r2, r1
10009a48:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009a4a:	8919      	ldrh	r1, [r3, #8]
10009a4c:	2210      	movs	r2, #16
10009a4e:	430a      	orrs	r2, r1
10009a50:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009a52:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
		break;
10009a54:	e083      	b.n	10009b5e <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009a56:	4b11      	ldr	r3, [pc, #68]	; (10009a9c <system_peripheral_reset+0x390>)
10009a58:	891a      	ldrh	r2, [r3, #8]
10009a5a:	2120      	movs	r1, #32
10009a5c:	438a      	bics	r2, r1
10009a5e:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009a60:	8919      	ldrh	r1, [r3, #8]
10009a62:	2220      	movs	r2, #32
10009a64:	430a      	orrs	r2, r1
10009a66:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009a68:	2000      	movs	r0, #0
		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
		break;
10009a6a:	e078      	b.n	10009b5e <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009a6c:	4b0b      	ldr	r3, [pc, #44]	; (10009a9c <system_peripheral_reset+0x390>)
10009a6e:	891a      	ldrh	r2, [r3, #8]
10009a70:	2140      	movs	r1, #64	; 0x40
10009a72:	438a      	bics	r2, r1
10009a74:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009a76:	8919      	ldrh	r1, [r3, #8]
10009a78:	2240      	movs	r2, #64	; 0x40
10009a7a:	430a      	orrs	r2, r1
10009a7c:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009a7e:	2000      	movs	r0, #0
		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
		break;
10009a80:	e06d      	b.n	10009b5e <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009a82:	4b06      	ldr	r3, [pc, #24]	; (10009a9c <system_peripheral_reset+0x390>)
10009a84:	891a      	ldrh	r2, [r3, #8]
10009a86:	2180      	movs	r1, #128	; 0x80
10009a88:	438a      	bics	r2, r1
10009a8a:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009a8c:	8919      	ldrh	r1, [r3, #8]
10009a8e:	2280      	movs	r2, #128	; 0x80
10009a90:	430a      	orrs	r2, r1
10009a92:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009a94:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
		break;
10009a96:	e062      	b.n	10009b5e <system_peripheral_reset+0x452>
10009a98:	10011d18 	.word	0x10011d18
10009a9c:	4000b000 	.word	0x4000b000
10009aa0:	fffffeff 	.word	0xfffffeff
10009aa4:	fffffdff 	.word	0xfffffdff
10009aa8:	fffffbff 	.word	0xfffffbff
10009aac:	fffff7ff 	.word	0xfffff7ff
10009ab0:	ffffefff 	.word	0xffffefff
10009ab4:	ffffdfff 	.word	0xffffdfff
10009ab8:	ffffbfff 	.word	0xffffbfff
10009abc:	ffff7fff 	.word	0xffff7fff
10009ac0:	fffeffff 	.word	0xfffeffff
10009ac4:	fffdffff 	.word	0xfffdffff
10009ac8:	fffbffff 	.word	0xfffbffff
10009acc:	fff7ffff 	.word	0xfff7ffff
10009ad0:	ffefffff 	.word	0xffefffff
10009ad4:	ffdfffff 	.word	0xffdfffff
10009ad8:	ffbfffff 	.word	0xffbfffff
10009adc:	ff7fffff 	.word	0xff7fffff
10009ae0:	feffffff 	.word	0xfeffffff
10009ae4:	fdffffff 	.word	0xfdffffff
10009ae8:	fbffffff 	.word	0xfbffffff
10009aec:	f7ffffff 	.word	0xf7ffffff
10009af0:	efffffff 	.word	0xefffffff
10009af4:	dfffffff 	.word	0xdfffffff
10009af8:	bfffffff 	.word	0xbfffffff

		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009afc:	4b18      	ldr	r3, [pc, #96]	; (10009b60 <system_peripheral_reset+0x454>)
10009afe:	8919      	ldrh	r1, [r3, #8]
10009b00:	4a18      	ldr	r2, [pc, #96]	; (10009b64 <system_peripheral_reset+0x458>)
10009b02:	400a      	ands	r2, r1
10009b04:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009b06:	8919      	ldrh	r1, [r3, #8]
10009b08:	2280      	movs	r2, #128	; 0x80
10009b0a:	0052      	lsls	r2, r2, #1
10009b0c:	430a      	orrs	r2, r1
10009b0e:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009b10:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
		break;
10009b12:	e024      	b.n	10009b5e <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009b14:	4b12      	ldr	r3, [pc, #72]	; (10009b60 <system_peripheral_reset+0x454>)
10009b16:	8919      	ldrh	r1, [r3, #8]
10009b18:	4a13      	ldr	r2, [pc, #76]	; (10009b68 <system_peripheral_reset+0x45c>)
10009b1a:	400a      	ands	r2, r1
10009b1c:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009b1e:	8919      	ldrh	r1, [r3, #8]
10009b20:	2280      	movs	r2, #128	; 0x80
10009b22:	0092      	lsls	r2, r2, #2
10009b24:	430a      	orrs	r2, r1
10009b26:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009b28:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
		break;
10009b2a:	e018      	b.n	10009b5e <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009b2c:	4b0c      	ldr	r3, [pc, #48]	; (10009b60 <system_peripheral_reset+0x454>)
10009b2e:	8919      	ldrh	r1, [r3, #8]
10009b30:	4a0e      	ldr	r2, [pc, #56]	; (10009b6c <system_peripheral_reset+0x460>)
10009b32:	400a      	ands	r2, r1
10009b34:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009b36:	8919      	ldrh	r1, [r3, #8]
10009b38:	2280      	movs	r2, #128	; 0x80
10009b3a:	00d2      	lsls	r2, r2, #3
10009b3c:	430a      	orrs	r2, r1
10009b3e:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009b40:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
		break;
10009b42:	e00c      	b.n	10009b5e <system_peripheral_reset+0x452>

		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009b44:	4b06      	ldr	r3, [pc, #24]	; (10009b60 <system_peripheral_reset+0x454>)
10009b46:	8919      	ldrh	r1, [r3, #8]
10009b48:	4a09      	ldr	r2, [pc, #36]	; (10009b70 <system_peripheral_reset+0x464>)
10009b4a:	400a      	ands	r2, r1
10009b4c:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009b4e:	8919      	ldrh	r1, [r3, #8]
10009b50:	2280      	movs	r2, #128	; 0x80
10009b52:	0112      	lsls	r2, r2, #4
10009b54:	430a      	orrs	r2, r1
10009b56:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009b58:	2000      	movs	r0, #0
		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
		break;
10009b5a:	e000      	b.n	10009b5e <system_peripheral_reset+0x452>

		default:
			return STATUS_ERR_INVALID_ARG;
10009b5c:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
10009b5e:	bd00      	pop	{pc}
10009b60:	4000b000 	.word	0x4000b000
10009b64:	fffffeff 	.word	0xfffffeff
10009b68:	fffffdff 	.word	0xfffffdff
10009b6c:	fffffbff 	.word	0xfffffbff
10009b70:	fffff7ff 	.word	0xfffff7ff

10009b74 <system_register_isr>:
void system_register_isr(enum ram_isr_table_index isr_index,
		uint32_t isr_address)
{
	uint32_t *temp;
	temp = (uint32_t *)(isr_index * 4 + ISR_RAM_MAP_START_ADDRESS);
	*temp = isr_address;
10009b74:	2380      	movs	r3, #128	; 0x80
10009b76:	04db      	lsls	r3, r3, #19
10009b78:	469c      	mov	ip, r3
10009b7a:	4460      	add	r0, ip
10009b7c:	0080      	lsls	r0, r0, #2
10009b7e:	6001      	str	r1, [r0, #0]
}
10009b80:	4770      	bx	lr
10009b82:	46c0      	nop			; (mov r8, r8)

10009b84 <uart_rx0_isr_handler>:
	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
}

static void uart_rx0_isr_handler(void)
{
10009b84:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
10009b86:	4b20      	ldr	r3, [pc, #128]	; (10009c08 <uart_rx0_isr_handler+0x84>)
10009b88:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
10009b8a:	6823      	ldr	r3, [r4, #0]
10009b8c:	7d1d      	ldrb	r5, [r3, #20]
10009b8e:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
10009b90:	066a      	lsls	r2, r5, #25
10009b92:	d513      	bpl.n	10009bbc <uart_rx0_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
10009b94:	211e      	movs	r1, #30
10009b96:	2222      	movs	r2, #34	; 0x22
10009b98:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
10009b9a:	7e1a      	ldrb	r2, [r3, #24]
10009b9c:	3123      	adds	r1, #35	; 0x23
10009b9e:	438a      	bics	r2, r1
10009ba0:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
10009ba2:	2321      	movs	r3, #33	; 0x21
10009ba4:	5ce3      	ldrb	r3, [r4, r3]
10009ba6:	071b      	lsls	r3, r3, #28
10009ba8:	d506      	bpl.n	10009bb8 <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
10009baa:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
10009bac:	5ce3      	ldrb	r3, [r4, r3]
10009bae:	071b      	lsls	r3, r3, #28
10009bb0:	d502      	bpl.n	10009bb8 <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
10009bb2:	0020      	movs	r0, r4
10009bb4:	6923      	ldr	r3, [r4, #16]
10009bb6:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
10009bb8:	6823      	ldr	r3, [r4, #0]
10009bba:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
10009bbc:	07eb      	lsls	r3, r5, #31
10009bbe:	d522      	bpl.n	10009c06 <uart_rx0_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
10009bc0:	6823      	ldr	r3, [r4, #0]
10009bc2:	7c1b      	ldrb	r3, [r3, #16]
10009bc4:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
10009bc6:	6962      	ldr	r2, [r4, #20]
10009bc8:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
10009bca:	6963      	ldr	r3, [r4, #20]
10009bcc:	3301      	adds	r3, #1
10009bce:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
10009bd0:	8ba3      	ldrh	r3, [r4, #28]
10009bd2:	3b01      	subs	r3, #1
10009bd4:	b29b      	uxth	r3, r3
10009bd6:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
10009bd8:	8ba3      	ldrh	r3, [r4, #28]
10009bda:	b29b      	uxth	r3, r3
10009bdc:	2b00      	cmp	r3, #0
10009bde:	d112      	bne.n	10009c06 <uart_rx0_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
10009be0:	3321      	adds	r3, #33	; 0x21
10009be2:	5ce3      	ldrb	r3, [r4, r3]
10009be4:	075b      	lsls	r3, r3, #29
10009be6:	d50e      	bpl.n	10009c06 <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
10009be8:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
10009bea:	5ce3      	ldrb	r3, [r4, r3]
10009bec:	075b      	lsls	r3, r3, #29
10009bee:	d50a      	bpl.n	10009c06 <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
10009bf0:	2200      	movs	r2, #0
10009bf2:	2322      	movs	r3, #34	; 0x22
10009bf4:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
10009bf6:	6822      	ldr	r2, [r4, #0]
10009bf8:	7e13      	ldrb	r3, [r2, #24]
10009bfa:	2101      	movs	r1, #1
10009bfc:	438b      	bics	r3, r1
10009bfe:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
10009c00:	68e3      	ldr	r3, [r4, #12]
10009c02:	0020      	movs	r0, r4
10009c04:	4798      	blx	r3
			}
		}
	}
}
10009c06:	bd70      	pop	{r4, r5, r6, pc}
10009c08:	10014720 	.word	0x10014720

10009c0c <uart_tx0_isr_handler>:

static void uart_tx0_isr_handler(void)
{
10009c0c:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
10009c0e:	4b21      	ldr	r3, [pc, #132]	; (10009c94 <uart_tx0_isr_handler+0x88>)
10009c10:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
10009c12:	6823      	ldr	r3, [r4, #0]
10009c14:	791d      	ldrb	r5, [r3, #4]
10009c16:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
10009c18:	07ea      	lsls	r2, r5, #31
10009c1a:	d517      	bpl.n	10009c4c <uart_tx0_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
10009c1c:	69a2      	ldr	r2, [r4, #24]
10009c1e:	7811      	ldrb	r1, [r2, #0]
10009c20:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
10009c22:	3201      	adds	r2, #1
10009c24:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
10009c26:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
10009c28:	8be3      	ldrh	r3, [r4, #30]
10009c2a:	3b01      	subs	r3, #1
10009c2c:	b29b      	uxth	r3, r3
10009c2e:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[0];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
10009c30:	8be3      	ldrh	r3, [r4, #30]
10009c32:	b29b      	uxth	r3, r3
10009c34:	2b00      	cmp	r3, #0
10009c36:	d109      	bne.n	10009c4c <uart_tx0_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
10009c38:	6822      	ldr	r2, [r4, #0]
10009c3a:	7a13      	ldrb	r3, [r2, #8]
10009c3c:	2101      	movs	r1, #1
10009c3e:	438b      	bics	r3, r1
10009c40:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
10009c42:	6822      	ldr	r2, [r4, #0]
10009c44:	7a11      	ldrb	r1, [r2, #8]
10009c46:	2310      	movs	r3, #16
10009c48:	430b      	orrs	r3, r1
10009c4a:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
10009c4c:	06eb      	lsls	r3, r5, #27
10009c4e:	d512      	bpl.n	10009c76 <uart_tx0_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
10009c50:	2321      	movs	r3, #33	; 0x21
10009c52:	5ce3      	ldrb	r3, [r4, r3]
10009c54:	07db      	lsls	r3, r3, #31
10009c56:	d50e      	bpl.n	10009c76 <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
10009c58:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
10009c5a:	5ce3      	ldrb	r3, [r4, r3]
10009c5c:	07db      	lsls	r3, r3, #31
10009c5e:	d50a      	bpl.n	10009c76 <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
10009c60:	2200      	movs	r2, #0
10009c62:	2322      	movs	r3, #34	; 0x22
10009c64:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
10009c66:	6822      	ldr	r2, [r4, #0]
10009c68:	7a13      	ldrb	r3, [r2, #8]
10009c6a:	2110      	movs	r1, #16
10009c6c:	438b      	bics	r3, r1
10009c6e:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
10009c70:	0020      	movs	r0, r4
10009c72:	6863      	ldr	r3, [r4, #4]
10009c74:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
10009c76:	06ab      	lsls	r3, r5, #26
10009c78:	d50a      	bpl.n	10009c90 <uart_tx0_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
10009c7a:	2321      	movs	r3, #33	; 0x21
10009c7c:	5ce3      	ldrb	r3, [r4, r3]
10009c7e:	079b      	lsls	r3, r3, #30
10009c80:	d506      	bpl.n	10009c90 <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
10009c82:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
10009c84:	5ce3      	ldrb	r3, [r4, r3]
10009c86:	079b      	lsls	r3, r3, #30
10009c88:	d502      	bpl.n	10009c90 <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
10009c8a:	68a3      	ldr	r3, [r4, #8]
10009c8c:	0020      	movs	r0, r4
10009c8e:	4798      	blx	r3
		}

	}
}
10009c90:	bd70      	pop	{r4, r5, r6, pc}
10009c92:	46c0      	nop			; (mov r8, r8)
10009c94:	10014720 	.word	0x10014720

10009c98 <uart_rx1_isr_handler>:

static void uart_rx1_isr_handler(void)
{
10009c98:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
10009c9a:	4b20      	ldr	r3, [pc, #128]	; (10009d1c <uart_rx1_isr_handler+0x84>)
10009c9c:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
10009c9e:	6823      	ldr	r3, [r4, #0]
10009ca0:	7d1d      	ldrb	r5, [r3, #20]
10009ca2:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
10009ca4:	066a      	lsls	r2, r5, #25
10009ca6:	d513      	bpl.n	10009cd0 <uart_rx1_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
10009ca8:	211e      	movs	r1, #30
10009caa:	2222      	movs	r2, #34	; 0x22
10009cac:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
10009cae:	7e1a      	ldrb	r2, [r3, #24]
10009cb0:	3123      	adds	r1, #35	; 0x23
10009cb2:	438a      	bics	r2, r1
10009cb4:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
10009cb6:	2321      	movs	r3, #33	; 0x21
10009cb8:	5ce3      	ldrb	r3, [r4, r3]
10009cba:	071b      	lsls	r3, r3, #28
10009cbc:	d506      	bpl.n	10009ccc <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
10009cbe:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
10009cc0:	5ce3      	ldrb	r3, [r4, r3]
10009cc2:	071b      	lsls	r3, r3, #28
10009cc4:	d502      	bpl.n	10009ccc <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
10009cc6:	0020      	movs	r0, r4
10009cc8:	6923      	ldr	r3, [r4, #16]
10009cca:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
10009ccc:	6823      	ldr	r3, [r4, #0]
10009cce:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
10009cd0:	07eb      	lsls	r3, r5, #31
10009cd2:	d522      	bpl.n	10009d1a <uart_rx1_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
10009cd4:	6823      	ldr	r3, [r4, #0]
10009cd6:	7c1b      	ldrb	r3, [r3, #16]
10009cd8:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
10009cda:	6962      	ldr	r2, [r4, #20]
10009cdc:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
10009cde:	6963      	ldr	r3, [r4, #20]
10009ce0:	3301      	adds	r3, #1
10009ce2:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
10009ce4:	8ba3      	ldrh	r3, [r4, #28]
10009ce6:	3b01      	subs	r3, #1
10009ce8:	b29b      	uxth	r3, r3
10009cea:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
10009cec:	8ba3      	ldrh	r3, [r4, #28]
10009cee:	b29b      	uxth	r3, r3
10009cf0:	2b00      	cmp	r3, #0
10009cf2:	d112      	bne.n	10009d1a <uart_rx1_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
10009cf4:	3321      	adds	r3, #33	; 0x21
10009cf6:	5ce3      	ldrb	r3, [r4, r3]
10009cf8:	075b      	lsls	r3, r3, #29
10009cfa:	d50e      	bpl.n	10009d1a <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
10009cfc:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
10009cfe:	5ce3      	ldrb	r3, [r4, r3]
10009d00:	075b      	lsls	r3, r3, #29
10009d02:	d50a      	bpl.n	10009d1a <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
10009d04:	2200      	movs	r2, #0
10009d06:	2322      	movs	r3, #34	; 0x22
10009d08:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
10009d0a:	6822      	ldr	r2, [r4, #0]
10009d0c:	7e13      	ldrb	r3, [r2, #24]
10009d0e:	2101      	movs	r1, #1
10009d10:	438b      	bics	r3, r1
10009d12:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
10009d14:	68e3      	ldr	r3, [r4, #12]
10009d16:	0020      	movs	r0, r4
10009d18:	4798      	blx	r3
			}
		}
	}
}
10009d1a:	bd70      	pop	{r4, r5, r6, pc}
10009d1c:	10014720 	.word	0x10014720

10009d20 <uart_tx1_isr_handler>:

static void uart_tx1_isr_handler(void)
{
10009d20:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
10009d22:	4b21      	ldr	r3, [pc, #132]	; (10009da8 <uart_tx1_isr_handler+0x88>)
10009d24:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
10009d26:	6823      	ldr	r3, [r4, #0]
10009d28:	791d      	ldrb	r5, [r3, #4]
10009d2a:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
10009d2c:	07ea      	lsls	r2, r5, #31
10009d2e:	d517      	bpl.n	10009d60 <uart_tx1_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
10009d30:	69a2      	ldr	r2, [r4, #24]
10009d32:	7811      	ldrb	r1, [r2, #0]
10009d34:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
10009d36:	3201      	adds	r2, #1
10009d38:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
10009d3a:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
10009d3c:	8be3      	ldrh	r3, [r4, #30]
10009d3e:	3b01      	subs	r3, #1
10009d40:	b29b      	uxth	r3, r3
10009d42:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[1];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
10009d44:	8be3      	ldrh	r3, [r4, #30]
10009d46:	b29b      	uxth	r3, r3
10009d48:	2b00      	cmp	r3, #0
10009d4a:	d109      	bne.n	10009d60 <uart_tx1_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
10009d4c:	6822      	ldr	r2, [r4, #0]
10009d4e:	7a13      	ldrb	r3, [r2, #8]
10009d50:	2101      	movs	r1, #1
10009d52:	438b      	bics	r3, r1
10009d54:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
10009d56:	6822      	ldr	r2, [r4, #0]
10009d58:	7a11      	ldrb	r1, [r2, #8]
10009d5a:	2310      	movs	r3, #16
10009d5c:	430b      	orrs	r3, r1
10009d5e:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
10009d60:	06eb      	lsls	r3, r5, #27
10009d62:	d512      	bpl.n	10009d8a <uart_tx1_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
10009d64:	2321      	movs	r3, #33	; 0x21
10009d66:	5ce3      	ldrb	r3, [r4, r3]
10009d68:	07db      	lsls	r3, r3, #31
10009d6a:	d50e      	bpl.n	10009d8a <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
10009d6c:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
10009d6e:	5ce3      	ldrb	r3, [r4, r3]
10009d70:	07db      	lsls	r3, r3, #31
10009d72:	d50a      	bpl.n	10009d8a <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
10009d74:	2200      	movs	r2, #0
10009d76:	2322      	movs	r3, #34	; 0x22
10009d78:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
10009d7a:	6822      	ldr	r2, [r4, #0]
10009d7c:	7a13      	ldrb	r3, [r2, #8]
10009d7e:	2110      	movs	r1, #16
10009d80:	438b      	bics	r3, r1
10009d82:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
10009d84:	0020      	movs	r0, r4
10009d86:	6863      	ldr	r3, [r4, #4]
10009d88:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
10009d8a:	06ab      	lsls	r3, r5, #26
10009d8c:	d50a      	bpl.n	10009da4 <uart_tx1_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
10009d8e:	2321      	movs	r3, #33	; 0x21
10009d90:	5ce3      	ldrb	r3, [r4, r3]
10009d92:	079b      	lsls	r3, r3, #30
10009d94:	d506      	bpl.n	10009da4 <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
10009d96:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
10009d98:	5ce3      	ldrb	r3, [r4, r3]
10009d9a:	079b      	lsls	r3, r3, #30
10009d9c:	d502      	bpl.n	10009da4 <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
10009d9e:	68a3      	ldr	r3, [r4, #8]
10009da0:	0020      	movs	r0, r4
10009da2:	4798      	blx	r3
		}

	}
}
10009da4:	bd70      	pop	{r4, r5, r6, pc}
10009da6:	46c0      	nop			; (mov r8, r8)
10009da8:	10014720 	.word	0x10014720

10009dac <uart_get_config_defaults>:
 * \param[out] config  Pointer to configuration structure to be initiated
 */
void uart_get_config_defaults(
		struct uart_config *const config)
{
	config->baud_rate = 115200;
10009dac:	23e1      	movs	r3, #225	; 0xe1
10009dae:	025b      	lsls	r3, r3, #9
10009db0:	6003      	str	r3, [r0, #0]
	config->data_bits = UART_8_BITS;
10009db2:	2300      	movs	r3, #0
10009db4:	7103      	strb	r3, [r0, #4]
	config->stop_bits = UART_1_STOP_BIT;
10009db6:	7143      	strb	r3, [r0, #5]
	config->parity = UART_NO_PARITY;
10009db8:	7183      	strb	r3, [r0, #6]
	config->flow_control = false;
10009dba:	71c3      	strb	r3, [r0, #7]

	config->pin_number_pad[0] = PIN_LP_GPIO_2;
10009dbc:	3302      	adds	r3, #2
10009dbe:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_3;
10009dc0:	2203      	movs	r2, #3
10009dc2:	60c2      	str	r2, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_4;
10009dc4:	3201      	adds	r2, #1
10009dc6:	6102      	str	r2, [r0, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_5;
10009dc8:	3201      	adds	r2, #1
10009dca:	6142      	str	r2, [r0, #20]

	config->pinmux_sel_pad[0] = MUX_LP_GPIO_2_UART0_RXD;
10009dcc:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_3_UART0_TXD;
10009dce:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_4_UART0_CTS;
10009dd0:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_5_UART0_RTS;
10009dd2:	6243      	str	r3, [r0, #36]	; 0x24
}
10009dd4:	4770      	bx	lr
10009dd6:	46c0      	nop			; (mov r8, r8)

10009dd8 <uart_init>:
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
10009dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10009dda:	464f      	mov	r7, r9
10009ddc:	4646      	mov	r6, r8
10009dde:	b4c0      	push	{r6, r7}
10009de0:	0005      	movs	r5, r0
10009de2:	0017      	movs	r7, r2

	uint8_t config_temp = 0;
	uint8_t i,index;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
10009de4:	6001      	str	r1, [r0, #0]

	for (i = 0; i < UART_CALLBACK_N; i++) {
		module->callback[i] = NULL;
10009de6:	2300      	movs	r3, #0
10009de8:	6043      	str	r3, [r0, #4]
10009dea:	6083      	str	r3, [r0, #8]
10009dec:	60c3      	str	r3, [r0, #12]
10009dee:	6103      	str	r3, [r0, #16]
	}
	module->rx_buffer_ptr = NULL;
10009df0:	6143      	str	r3, [r0, #20]
	module->tx_buffer_ptr = NULL;
10009df2:	6183      	str	r3, [r0, #24]
	module->remaining_rx_buffer_length = 0;
10009df4:	2200      	movs	r2, #0
10009df6:	8383      	strh	r3, [r0, #28]
	module->remaining_tx_buffer_length = 0;
10009df8:	83c3      	strh	r3, [r0, #30]
	module->callback_reg_mask = 0;
10009dfa:	3320      	adds	r3, #32
10009dfc:	54c2      	strb	r2, [r0, r3]
	module->callback_enable_mask = 0;
10009dfe:	3301      	adds	r3, #1
10009e00:	54c2      	strb	r2, [r0, r3]
	module->status = STATUS_OK;
10009e02:	3301      	adds	r3, #1
10009e04:	54c2      	strb	r2, [r0, r3]

	if (hw == UART0) {
10009e06:	4b55      	ldr	r3, [pc, #340]	; (10009f5c <uart_init+0x184>)
10009e08:	4299      	cmp	r1, r3
10009e0a:	d118      	bne.n	10009e3e <uart_init+0x66>
		system_peripheral_reset(PERIPHERAL_UART0_CORE);
10009e0c:	2009      	movs	r0, #9
10009e0e:	4c54      	ldr	r4, [pc, #336]	; (10009f60 <uart_init+0x188>)
10009e10:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART0_IF);
10009e12:	200a      	movs	r0, #10
10009e14:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_CORE);
10009e16:	2009      	movs	r0, #9
10009e18:	4c52      	ldr	r4, [pc, #328]	; (10009f64 <uart_init+0x18c>)
10009e1a:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_IF);
10009e1c:	200a      	movs	r0, #10
10009e1e:	47a0      	blx	r4
		_uart_instances[0] = module;
10009e20:	4b51      	ldr	r3, [pc, #324]	; (10009f68 <uart_init+0x190>)
10009e22:	601d      	str	r5, [r3, #0]
		system_register_isr(RAM_ISR_TABLE_UARTRX0_INDEX, (uint32_t)uart_rx0_isr_handler);
10009e24:	4951      	ldr	r1, [pc, #324]	; (10009f6c <uart_init+0x194>)
10009e26:	2010      	movs	r0, #16
10009e28:	4c51      	ldr	r4, [pc, #324]	; (10009f70 <uart_init+0x198>)
10009e2a:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX0_INDEX, (uint32_t)uart_tx0_isr_handler);
10009e2c:	4951      	ldr	r1, [pc, #324]	; (10009f74 <uart_init+0x19c>)
10009e2e:	2011      	movs	r0, #17
10009e30:	47a0      	blx	r4
10009e32:	4b51      	ldr	r3, [pc, #324]	; (10009f78 <uart_init+0x1a0>)
10009e34:	2201      	movs	r2, #1
10009e36:	601a      	str	r2, [r3, #0]
10009e38:	3201      	adds	r2, #1
10009e3a:	601a      	str	r2, [r3, #0]
10009e3c:	e01a      	b.n	10009e74 <uart_init+0x9c>
		NVIC_EnableIRQ(UART0_RX_IRQn);
		NVIC_EnableIRQ(UART0_TX_IRQn);
	} else if (hw == UART1) {
10009e3e:	4b4f      	ldr	r3, [pc, #316]	; (10009f7c <uart_init+0x1a4>)
10009e40:	4299      	cmp	r1, r3
10009e42:	d117      	bne.n	10009e74 <uart_init+0x9c>
		system_peripheral_reset(PERIPHERAL_UART1_CORE);
10009e44:	200b      	movs	r0, #11
10009e46:	4c46      	ldr	r4, [pc, #280]	; (10009f60 <uart_init+0x188>)
10009e48:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART1_IF);
10009e4a:	200c      	movs	r0, #12
10009e4c:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_CORE);
10009e4e:	200b      	movs	r0, #11
10009e50:	4c44      	ldr	r4, [pc, #272]	; (10009f64 <uart_init+0x18c>)
10009e52:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_IF);
10009e54:	200c      	movs	r0, #12
10009e56:	47a0      	blx	r4
		_uart_instances[1] = module;
10009e58:	4b43      	ldr	r3, [pc, #268]	; (10009f68 <uart_init+0x190>)
10009e5a:	605d      	str	r5, [r3, #4]
		system_register_isr(RAM_ISR_TABLE_UARTRX1_INDEX, (uint32_t)uart_rx1_isr_handler);
10009e5c:	4948      	ldr	r1, [pc, #288]	; (10009f80 <uart_init+0x1a8>)
10009e5e:	2012      	movs	r0, #18
10009e60:	4c43      	ldr	r4, [pc, #268]	; (10009f70 <uart_init+0x198>)
10009e62:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX1_INDEX, (uint32_t)uart_tx1_isr_handler);
10009e64:	4947      	ldr	r1, [pc, #284]	; (10009f84 <uart_init+0x1ac>)
10009e66:	2013      	movs	r0, #19
10009e68:	47a0      	blx	r4
10009e6a:	4b43      	ldr	r3, [pc, #268]	; (10009f78 <uart_init+0x1a0>)
10009e6c:	2204      	movs	r2, #4
10009e6e:	601a      	str	r2, [r3, #0]
10009e70:	3204      	adds	r2, #4
10009e72:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
10009e74:	79fb      	ldrb	r3, [r7, #7]
		index = 4;
10009e76:	2204      	movs	r2, #4
10009e78:	4690      	mov	r8, r2
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
10009e7a:	2b00      	cmp	r3, #0
10009e7c:	d152      	bne.n	10009f24 <uart_init+0x14c>
		index = 4;
	} else {
		index = 2;
10009e7e:	3302      	adds	r3, #2
10009e80:	4698      	mov	r8, r3
10009e82:	e04f      	b.n	10009f24 <uart_init+0x14c>
#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
10009e84:	8a31      	ldrh	r1, [r6, #16]
10009e86:	ce01      	ldmia	r6!, {r0}
10009e88:	b2c0      	uxtb	r0, r0
10009e8a:	47c8      	blx	r9

#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
10009e8c:	3401      	adds	r4, #1
10009e8e:	b2e4      	uxtb	r4, r4
10009e90:	4544      	cmp	r4, r8
10009e92:	d3f7      	bcc.n	10009e84 <uart_init+0xac>
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
10009e94:	682b      	ldr	r3, [r5, #0]
10009e96:	7d1a      	ldrb	r2, [r3, #20]
10009e98:	07d2      	lsls	r2, r2, #31
10009e9a:	d504      	bpl.n	10009ea6 <uart_init+0xce>
10009e9c:	2101      	movs	r1, #1
		i = module->hw->RECEIVE_DATA.reg;
10009e9e:	7c1a      	ldrb	r2, [r3, #16]
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
10009ea0:	7d1a      	ldrb	r2, [r3, #20]
10009ea2:	420a      	tst	r2, r1
10009ea4:	d1fb      	bne.n	10009e9e <uart_init+0xc6>
		i = module->hw->RECEIVE_DATA.reg;
	}
	
	/* reset configuration register */
	module->hw->UART_CONFIGURATION.reg = 0;
10009ea6:	2100      	movs	r1, #0
10009ea8:	2220      	movs	r2, #32
10009eaa:	5499      	strb	r1, [r3, r2]

	/* program the uart configuration. */
	if(config->flow_control) {
10009eac:	79fb      	ldrb	r3, [r7, #7]
		config_temp |= UART_CONFIGURATION_CTS_ENABLE_1;
10009eae:	1e59      	subs	r1, r3, #1
10009eb0:	418b      	sbcs	r3, r1
10009eb2:	0159      	lsls	r1, r3, #5
	}
	config_temp |= config->data_bits;
	config_temp |= config->stop_bits;
10009eb4:	793b      	ldrb	r3, [r7, #4]
10009eb6:	797a      	ldrb	r2, [r7, #5]
10009eb8:	4313      	orrs	r3, r2
10009eba:	430b      	orrs	r3, r1
	switch(config->parity) {
10009ebc:	79ba      	ldrb	r2, [r7, #6]
10009ebe:	2a02      	cmp	r2, #2
10009ec0:	d00d      	beq.n	10009ede <uart_init+0x106>
10009ec2:	b2d1      	uxtb	r1, r2
10009ec4:	2902      	cmp	r1, #2
10009ec6:	d802      	bhi.n	10009ece <uart_init+0xf6>
10009ec8:	2a01      	cmp	r2, #1
10009eca:	d005      	beq.n	10009ed8 <uart_init+0x100>
10009ecc:	e00f      	b.n	10009eee <uart_init+0x116>
10009ece:	2a03      	cmp	r2, #3
10009ed0:	d008      	beq.n	10009ee4 <uart_init+0x10c>
10009ed2:	2a04      	cmp	r2, #4
10009ed4:	d009      	beq.n	10009eea <uart_init+0x112>
10009ed6:	e00a      	b.n	10009eee <uart_init+0x116>
		case UART_NO_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_0;
			break;

		case UART_EVEN_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
10009ed8:	2202      	movs	r2, #2
10009eda:	4313      	orrs	r3, r2
			config_temp |= UART_CONFIGURATION_PARITY_MODE_0;
			break;
10009edc:	e007      	b.n	10009eee <uart_init+0x116>

		case UART_ODD_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_1;
10009ede:	2206      	movs	r2, #6
10009ee0:	4313      	orrs	r3, r2
			break;
10009ee2:	e004      	b.n	10009eee <uart_init+0x116>

		case UART_SPACE_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_2;
10009ee4:	220a      	movs	r2, #10
10009ee6:	4313      	orrs	r3, r2
			break;
10009ee8:	e001      	b.n	10009eee <uart_init+0x116>

		case UART_MARK_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_3;
10009eea:	220e      	movs	r2, #14
10009eec:	4313      	orrs	r3, r2
			break;

		default:
			break;
	}	
	module->hw->UART_CONFIGURATION.reg = config_temp;
10009eee:	2220      	movs	r2, #32
10009ef0:	6829      	ldr	r1, [r5, #0]
10009ef2:	548b      	strb	r3, [r1, r2]

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);
10009ef4:	683e      	ldr	r6, [r7, #0]
	uint16_t integerpart = 0;
	uint8_t fractionalpart = 0;
	uint32_t diff;
	uint8_t i = 0;

	clock = system_clock_get_value();
10009ef6:	4b24      	ldr	r3, [pc, #144]	; (10009f88 <uart_init+0x1b0>)
10009ef8:	4798      	blx	r3
10009efa:	0004      	movs	r4, r0
	integerpart = clock / baud_rate;
10009efc:	0031      	movs	r1, r6
10009efe:	4b23      	ldr	r3, [pc, #140]	; (10009f8c <uart_init+0x1b4>)
10009f00:	4798      	blx	r3
10009f02:	b282      	uxth	r2, r0
	diff = clock - (baud_rate * integerpart);
10009f04:	0400      	lsls	r0, r0, #16
10009f06:	0c00      	lsrs	r0, r0, #16
10009f08:	4370      	muls	r0, r6
10009f0a:	1a20      	subs	r0, r4, r0
	i = 0;
	while(diff > (baud_rate / 16)) {
10009f0c:	0931      	lsrs	r1, r6, #4
10009f0e:	4288      	cmp	r0, r1
10009f10:	d906      	bls.n	10009f20 <uart_init+0x148>
10009f12:	2300      	movs	r3, #0
		i++;
10009f14:	3301      	adds	r3, #1
10009f16:	b2db      	uxtb	r3, r3
		diff -= (baud_rate / 16);
10009f18:	1a40      	subs	r0, r0, r1

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
	while(diff > (baud_rate / 16)) {
10009f1a:	4288      	cmp	r0, r1
10009f1c:	d8fa      	bhi.n	10009f14 <uart_init+0x13c>
10009f1e:	e007      	b.n	10009f30 <uart_init+0x158>
	uint8_t i = 0;

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
10009f20:	2300      	movs	r3, #0
10009f22:	e005      	b.n	10009f30 <uart_init+0x158>
10009f24:	003e      	movs	r6, r7
10009f26:	3608      	adds	r6, #8
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
10009f28:	2400      	movs	r4, #0
#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
10009f2a:	4b19      	ldr	r3, [pc, #100]	; (10009f90 <uart_init+0x1b8>)
10009f2c:	4699      	mov	r9, r3
10009f2e:	e7a9      	b.n	10009e84 <uart_init+0xac>
		i++;
		diff -= (baud_rate / 16);
	}
	fractionalpart = (i + 1) / 2;

	module->hw->UART_CLOCK_SOURCE.reg = UART_CLOCK_SOURCE_CLOCK_SELECT_0;
10009f30:	2100      	movs	r1, #0
10009f32:	2028      	movs	r0, #40	; 0x28
10009f34:	682c      	ldr	r4, [r5, #0]
10009f36:	5421      	strb	r1, [r4, r0]
	module->hw->UART_BAUD_RATE.reg =
10009f38:	3301      	adds	r3, #1
10009f3a:	071b      	lsls	r3, r3, #28
10009f3c:	0f5b      	lsrs	r3, r3, #29
10009f3e:	00d2      	lsls	r2, r2, #3
10009f40:	4313      	orrs	r3, r2
10009f42:	b29b      	uxth	r3, r3
10009f44:	682a      	ldr	r2, [r5, #0]
10009f46:	8493      	strh	r3, [r2, #36]	; 0x24
	module->hw->UART_CONFIGURATION.reg = config_temp;

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);

	module->hw->RX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at read time
10009f48:	682b      	ldr	r3, [r5, #0]
10009f4a:	7619      	strb	r1, [r3, #24]
	module->hw->TX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at write time
10009f4c:	682b      	ldr	r3, [r5, #0]
10009f4e:	7219      	strb	r1, [r3, #8]
	
	return STATUS_OK;
}
10009f50:	2000      	movs	r0, #0
10009f52:	bc0c      	pop	{r2, r3}
10009f54:	4690      	mov	r8, r2
10009f56:	4699      	mov	r9, r3
10009f58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10009f5a:	46c0      	nop			; (mov r8, r8)
10009f5c:	40004000 	.word	0x40004000
10009f60:	1000970d 	.word	0x1000970d
10009f64:	100093b1 	.word	0x100093b1
10009f68:	10014720 	.word	0x10014720
10009f6c:	10009b85 	.word	0x10009b85
10009f70:	10009b75 	.word	0x10009b75
10009f74:	10009c0d 	.word	0x10009c0d
10009f78:	e000e100 	.word	0xe000e100
10009f7c:	40005000 	.word	0x40005000
10009f80:	10009c99 	.word	0x10009c99
10009f84:	10009d21 	.word	0x10009d21
10009f88:	100093a5 	.word	0x100093a5
10009f8c:	1000f319 	.word	0x1000f319
10009f90:	10009001 	.word	0x10009001

10009f94 <uart_write_wait>:
* \retval STATUS_OK         If the operation was completed
*/
enum status_code uart_write_wait(struct uart_module *const module,
		const uint8_t tx_data)
{
	while (!(module->hw->TRANSMIT_STATUS.reg & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL));
10009f94:	6802      	ldr	r2, [r0, #0]
10009f96:	2001      	movs	r0, #1
10009f98:	7913      	ldrb	r3, [r2, #4]
10009f9a:	4203      	tst	r3, r0
10009f9c:	d0fc      	beq.n	10009f98 <uart_write_wait+0x4>

	module->hw->TRANSMIT_DATA.reg = tx_data;
10009f9e:	7011      	strb	r1, [r2, #0]
	
	return STATUS_OK;
}
10009fa0:	2000      	movs	r0, #0
10009fa2:	4770      	bx	lr

10009fa4 <uart_read_wait>:
* \retval STATUS_OK                If the operation was completed
*/
enum status_code uart_read_wait(struct uart_module *const module,
		uint8_t *const rx_data)
{
	while (!(module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY));
10009fa4:	6802      	ldr	r2, [r0, #0]
10009fa6:	2001      	movs	r0, #1
10009fa8:	7d13      	ldrb	r3, [r2, #20]
10009faa:	4203      	tst	r3, r0
10009fac:	d0fc      	beq.n	10009fa8 <uart_read_wait+0x4>

	*rx_data = module->hw->RECEIVE_DATA.reg;
10009fae:	7c13      	ldrb	r3, [r2, #16]
10009fb0:	700b      	strb	r3, [r1, #0]
	
	return STATUS_OK;
}
10009fb2:	2000      	movs	r0, #0
10009fb4:	4770      	bx	lr
10009fb6:	46c0      	nop			; (mov r8, r8)

10009fb8 <uart_read_buffer_job>:
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
10009fb8:	2317      	movs	r3, #23
{
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
10009fba:	2a00      	cmp	r2, #0
10009fbc:	d00d      	beq.n	10009fda <uart_read_buffer_job+0x22>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check if the UART is busy transmitting or slave waiting for TXC*/
	if (module->status == STATUS_BUSY) {
10009fbe:	330b      	adds	r3, #11
10009fc0:	5cc3      	ldrb	r3, [r0, r3]
10009fc2:	b2db      	uxtb	r3, r3
10009fc4:	2b05      	cmp	r3, #5
10009fc6:	d008      	beq.n	10009fda <uart_read_buffer_job+0x22>
	Assert(module);
	Assert(rx_data);

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
10009fc8:	8382      	strh	r2, [r0, #28]
	module->rx_buffer_ptr = rx_data;
10009fca:	6141      	str	r1, [r0, #20]
	module->status = STATUS_BUSY;
10009fcc:	2205      	movs	r2, #5
10009fce:	2322      	movs	r3, #34	; 0x22
10009fd0:	54c2      	strb	r2, [r0, r3]

	module->hw->RX_INTERRUPT_MASK.reg = UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK;
10009fd2:	6803      	ldr	r3, [r0, #0]
10009fd4:	3a04      	subs	r2, #4
10009fd6:	761a      	strb	r2, [r3, #24]
		return STATUS_BUSY;
	}

	/* Issue internal read */
	_uart_read_buffer(module, rx_data, length);
	return STATUS_OK;
10009fd8:	2300      	movs	r3, #0
}
10009fda:	0018      	movs	r0, r3
10009fdc:	4770      	bx	lr
10009fde:	46c0      	nop			; (mov r8, r8)

10009fe0 <uart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
10009fe0:	0093      	lsls	r3, r2, #2
10009fe2:	18c3      	adds	r3, r0, r3
10009fe4:	6059      	str	r1, [r3, #4]
	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
10009fe6:	2120      	movs	r1, #32
10009fe8:	2301      	movs	r3, #1
10009fea:	4093      	lsls	r3, r2
10009fec:	5c42      	ldrb	r2, [r0, r1]
10009fee:	4313      	orrs	r3, r2
10009ff0:	5443      	strb	r3, [r0, r1]
}
10009ff2:	4770      	bx	lr

10009ff4 <uart_enable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_enable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
10009ff4:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
10009ff6:	2221      	movs	r2, #33	; 0x21
10009ff8:	2301      	movs	r3, #1
10009ffa:	408b      	lsls	r3, r1
10009ffc:	5c84      	ldrb	r4, [r0, r2]
10009ffe:	4323      	orrs	r3, r4
1000a000:	5483      	strb	r3, [r0, r2]

	if (callback_type == UART_CTS_ACTIVE) {
1000a002:	2901      	cmp	r1, #1
1000a004:	d104      	bne.n	1000a010 <uart_enable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg |= UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000a006:	6802      	ldr	r2, [r0, #0]
1000a008:	7a11      	ldrb	r1, [r2, #8]
1000a00a:	2320      	movs	r3, #32
1000a00c:	430b      	orrs	r3, r1
1000a00e:	7213      	strb	r3, [r2, #8]
	}
}
1000a010:	bd10      	pop	{r4, pc}
1000a012:	46c0      	nop			; (mov r8, r8)

1000a014 <uart_disable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_disable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000a014:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
1000a016:	2201      	movs	r2, #1
1000a018:	408a      	lsls	r2, r1
1000a01a:	2421      	movs	r4, #33	; 0x21
1000a01c:	5d03      	ldrb	r3, [r0, r4]
1000a01e:	4393      	bics	r3, r2
1000a020:	5503      	strb	r3, [r0, r4]

	if (callback_type == UART_CTS_ACTIVE) {
1000a022:	2901      	cmp	r1, #1
1000a024:	d104      	bne.n	1000a030 <uart_disable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg &= ~UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000a026:	6802      	ldr	r2, [r0, #0]
1000a028:	7a13      	ldrb	r3, [r2, #8]
1000a02a:	311f      	adds	r1, #31
1000a02c:	438b      	bics	r3, r1
1000a02e:	7213      	strb	r3, [r2, #8]
	}

}
1000a030:	bd10      	pop	{r4, pc}
1000a032:	46c0      	nop			; (mov r8, r8)

1000a034 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
1000a034:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a036:	4647      	mov	r7, r8
1000a038:	b480      	push	{r7}
1000a03a:	000c      	movs	r4, r1
1000a03c:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
1000a03e:	2800      	cmp	r0, #0
1000a040:	d10d      	bne.n	1000a05e <_read+0x2a>
		return -1;
	}

	for (; len > 0; --len) {
1000a042:	2a00      	cmp	r2, #0
1000a044:	dd0e      	ble.n	1000a064 <_read+0x30>
1000a046:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
1000a048:	4e08      	ldr	r6, [pc, #32]	; (1000a06c <_read+0x38>)
1000a04a:	4d09      	ldr	r5, [pc, #36]	; (1000a070 <_read+0x3c>)
1000a04c:	6830      	ldr	r0, [r6, #0]
1000a04e:	0021      	movs	r1, r4
1000a050:	682b      	ldr	r3, [r5, #0]
1000a052:	4798      	blx	r3
		ptr++;
1000a054:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
1000a056:	42a7      	cmp	r7, r4
1000a058:	d1f8      	bne.n	1000a04c <_read+0x18>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
1000a05a:	4640      	mov	r0, r8
1000a05c:	e003      	b.n	1000a066 <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
1000a05e:	2001      	movs	r0, #1
1000a060:	4240      	negs	r0, r0
1000a062:	e000      	b.n	1000a066 <_read+0x32>
	}

	for (; len > 0; --len) {
1000a064:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
1000a066:	bc04      	pop	{r2}
1000a068:	4690      	mov	r8, r2
1000a06a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a06c:	10014730 	.word	0x10014730
1000a070:	10014728 	.word	0x10014728

1000a074 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
1000a074:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a076:	4647      	mov	r7, r8
1000a078:	b480      	push	{r7}
1000a07a:	000e      	movs	r6, r1
1000a07c:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
1000a07e:	3801      	subs	r0, #1
1000a080:	2802      	cmp	r0, #2
1000a082:	d811      	bhi.n	1000a0a8 <_write+0x34>
		return -1;
	}

	for (; len != 0; --len) {
1000a084:	2a00      	cmp	r2, #0
1000a086:	d012      	beq.n	1000a0ae <_write+0x3a>
1000a088:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
1000a08a:	4b0c      	ldr	r3, [pc, #48]	; (1000a0bc <_write+0x48>)
1000a08c:	4698      	mov	r8, r3
1000a08e:	4f0c      	ldr	r7, [pc, #48]	; (1000a0c0 <_write+0x4c>)
1000a090:	4643      	mov	r3, r8
1000a092:	6818      	ldr	r0, [r3, #0]
1000a094:	5d31      	ldrb	r1, [r6, r4]
1000a096:	683b      	ldr	r3, [r7, #0]
1000a098:	4798      	blx	r3
1000a09a:	2800      	cmp	r0, #0
1000a09c:	db09      	blt.n	1000a0b2 <_write+0x3e>
			return -1;
		}
		++nChars;
1000a09e:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
1000a0a0:	42a5      	cmp	r5, r4
1000a0a2:	d1f5      	bne.n	1000a090 <_write+0x1c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
1000a0a4:	0020      	movs	r0, r4
1000a0a6:	e006      	b.n	1000a0b6 <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
1000a0a8:	2001      	movs	r0, #1
1000a0aa:	4240      	negs	r0, r0
1000a0ac:	e003      	b.n	1000a0b6 <_write+0x42>
	}

	for (; len != 0; --len) {
1000a0ae:	2000      	movs	r0, #0
1000a0b0:	e001      	b.n	1000a0b6 <_write+0x42>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
1000a0b2:	2001      	movs	r0, #1
1000a0b4:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
1000a0b6:	bc04      	pop	{r2}
1000a0b8:	4690      	mov	r8, r2
1000a0ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a0bc:	10014730 	.word	0x10014730
1000a0c0:	1001472c 	.word	0x1001472c

1000a0c4 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
1000a0c4:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
1000a0c6:	4a06      	ldr	r2, [pc, #24]	; (1000a0e0 <_sbrk+0x1c>)
1000a0c8:	6812      	ldr	r2, [r2, #0]
1000a0ca:	2a00      	cmp	r2, #0
1000a0cc:	d102      	bne.n	1000a0d4 <_sbrk+0x10>
		heap = (unsigned char *)&_end;
1000a0ce:	4905      	ldr	r1, [pc, #20]	; (1000a0e4 <_sbrk+0x20>)
1000a0d0:	4a03      	ldr	r2, [pc, #12]	; (1000a0e0 <_sbrk+0x1c>)
1000a0d2:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
1000a0d4:	4a02      	ldr	r2, [pc, #8]	; (1000a0e0 <_sbrk+0x1c>)
1000a0d6:	6810      	ldr	r0, [r2, #0]

	heap += incr;
1000a0d8:	18c3      	adds	r3, r0, r3
1000a0da:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
1000a0dc:	4770      	bx	lr
1000a0de:	46c0      	nop			; (mov r8, r8)
1000a0e0:	10012b7c 	.word	0x10012b7c
1000a0e4:	10016038 	.word	0x10016038

1000a0e8 <_close>:
}

extern int _close(int file)
{
	return -1;
}
1000a0e8:	2001      	movs	r0, #1
1000a0ea:	4240      	negs	r0, r0
1000a0ec:	4770      	bx	lr
1000a0ee:	46c0      	nop			; (mov r8, r8)

1000a0f0 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
1000a0f0:	2380      	movs	r3, #128	; 0x80
1000a0f2:	019b      	lsls	r3, r3, #6
1000a0f4:	604b      	str	r3, [r1, #4]

	return 0;
}
1000a0f6:	2000      	movs	r0, #0
1000a0f8:	4770      	bx	lr
1000a0fa:	46c0      	nop			; (mov r8, r8)

1000a0fc <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
1000a0fc:	2001      	movs	r0, #1
1000a0fe:	4770      	bx	lr

1000a100 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
1000a100:	2000      	movs	r0, #0
1000a102:	4770      	bx	lr

1000a104 <ble_undefined_event_handler>:
	}
	return status;
}

at_ble_status_t ble_undefined_event_handler(void *params)
{
1000a104:	b510      	push	{r4, lr}
	DBG_LOG_DEV("Undefined Event Received");
1000a106:	4804      	ldr	r0, [pc, #16]	; (1000a118 <ble_undefined_event_handler+0x14>)
1000a108:	4b04      	ldr	r3, [pc, #16]	; (1000a11c <ble_undefined_event_handler+0x18>)
1000a10a:	4798      	blx	r3
1000a10c:	4804      	ldr	r0, [pc, #16]	; (1000a120 <ble_undefined_event_handler+0x1c>)
1000a10e:	4b05      	ldr	r3, [pc, #20]	; (1000a124 <ble_undefined_event_handler+0x20>)
1000a110:	4798      	blx	r3
    ALL_UNUSED(params);
	return AT_BLE_SUCCESS;
}
1000a112:	2000      	movs	r0, #0
1000a114:	bd10      	pop	{r4, pc}
1000a116:	46c0      	nop			; (mov r8, r8)
1000a118:	100116bc 	.word	0x100116bc
1000a11c:	10010565 	.word	0x10010565
1000a120:	10011f98 	.word	0x10011f98
1000a124:	10010445 	.word	0x10010445

1000a128 <ble_scan_report_handler>:
	}
}

/** @brief function handles scan report */
at_ble_status_t ble_scan_report_handler(void *params)
{
1000a128:	b510      	push	{r4, lr}
	at_ble_scan_report_t *scan_report;
	scan_report = (at_ble_scan_report_t *)params;
	if (scan_report->status == AT_BLE_SUCCESS)
1000a12a:	7800      	ldrb	r0, [r0, #0]
1000a12c:	2800      	cmp	r0, #0
1000a12e:	d006      	beq.n	1000a13e <ble_scan_report_handler+0x16>
		/* All scan data should be handled */
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Scanning  failed");
1000a130:	4803      	ldr	r0, [pc, #12]	; (1000a140 <ble_scan_report_handler+0x18>)
1000a132:	4b04      	ldr	r3, [pc, #16]	; (1000a144 <ble_scan_report_handler+0x1c>)
1000a134:	4798      	blx	r3
1000a136:	4804      	ldr	r0, [pc, #16]	; (1000a148 <ble_scan_report_handler+0x20>)
1000a138:	4b04      	ldr	r3, [pc, #16]	; (1000a14c <ble_scan_report_handler+0x24>)
1000a13a:	4798      	blx	r3
	}
	return AT_BLE_FAILURE;
1000a13c:	20e2      	movs	r0, #226	; 0xe2
}
1000a13e:	bd10      	pop	{r4, pc}
1000a140:	100116bc 	.word	0x100116bc
1000a144:	10010565 	.word	0x10010565
1000a148:	10011fb4 	.word	0x10011fb4
1000a14c:	10010445 	.word	0x10010445

1000a150 <ble_mtu_changed_indication_handler>:
	return AT_BLE_SUCCESS;
	
}

at_ble_status_t ble_mtu_changed_indication_handler(void *params)
{
1000a150:	b510      	push	{r4, lr}
1000a152:	0004      	movs	r4, r0
	at_ble_mtu_changed_ind_t *mtu_changed_ind;
	mtu_changed_ind = (at_ble_mtu_changed_ind_t *)params;
	DBG_LOG_DEV("BLE-MTU Changed, Connection Handle: %d, New Value: %d", 
1000a154:	4804      	ldr	r0, [pc, #16]	; (1000a168 <ble_mtu_changed_indication_handler+0x18>)
1000a156:	4b05      	ldr	r3, [pc, #20]	; (1000a16c <ble_mtu_changed_indication_handler+0x1c>)
1000a158:	4798      	blx	r3
1000a15a:	8862      	ldrh	r2, [r4, #2]
1000a15c:	8821      	ldrh	r1, [r4, #0]
1000a15e:	4804      	ldr	r0, [pc, #16]	; (1000a170 <ble_mtu_changed_indication_handler+0x20>)
1000a160:	4b04      	ldr	r3, [pc, #16]	; (1000a174 <ble_mtu_changed_indication_handler+0x24>)
1000a162:	4798      	blx	r3
										mtu_changed_ind->conhdl, 
										mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
}
1000a164:	2000      	movs	r0, #0
1000a166:	bd10      	pop	{r4, pc}
1000a168:	100116bc 	.word	0x100116bc
1000a16c:	10010565 	.word	0x10010565
1000a170:	10011fc8 	.word	0x10011fc8
1000a174:	10010445 	.word	0x10010445

1000a178 <ble_mtu_changed_cmd_complete_handler>:

at_ble_status_t ble_mtu_changed_cmd_complete_handler(void *params)
{
1000a178:	b570      	push	{r4, r5, r6, lr}
1000a17a:	0004      	movs	r4, r0
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
1000a17c:	78c5      	ldrb	r5, [r0, #3]
1000a17e:	2d00      	cmp	r5, #0
1000a180:	d108      	bne.n	1000a194 <ble_mtu_changed_cmd_complete_handler+0x1c>
	{
		DBG_LOG_DEV("MTU Changed, Connection Handle:%d, Operation:%d", 
1000a182:	480a      	ldr	r0, [pc, #40]	; (1000a1ac <ble_mtu_changed_cmd_complete_handler+0x34>)
1000a184:	4b0a      	ldr	r3, [pc, #40]	; (1000a1b0 <ble_mtu_changed_cmd_complete_handler+0x38>)
1000a186:	4798      	blx	r3
1000a188:	78a2      	ldrb	r2, [r4, #2]
1000a18a:	8821      	ldrh	r1, [r4, #0]
1000a18c:	4809      	ldr	r0, [pc, #36]	; (1000a1b4 <ble_mtu_changed_cmd_complete_handler+0x3c>)
1000a18e:	4b0a      	ldr	r3, [pc, #40]	; (1000a1b8 <ble_mtu_changed_cmd_complete_handler+0x40>)
1000a190:	4798      	blx	r3
		cmd_complete_event->conn_handle, 
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
1000a192:	e008      	b.n	1000a1a6 <ble_mtu_changed_cmd_complete_handler+0x2e>
	}
	else
	{
		DBG_LOG("MTU Change Failed, Connection Handle:%d, Operation:%d",
1000a194:	4805      	ldr	r0, [pc, #20]	; (1000a1ac <ble_mtu_changed_cmd_complete_handler+0x34>)
1000a196:	4b06      	ldr	r3, [pc, #24]	; (1000a1b0 <ble_mtu_changed_cmd_complete_handler+0x38>)
1000a198:	4798      	blx	r3
1000a19a:	78a2      	ldrb	r2, [r4, #2]
1000a19c:	8821      	ldrh	r1, [r4, #0]
1000a19e:	4807      	ldr	r0, [pc, #28]	; (1000a1bc <ble_mtu_changed_cmd_complete_handler+0x44>)
1000a1a0:	4b05      	ldr	r3, [pc, #20]	; (1000a1b8 <ble_mtu_changed_cmd_complete_handler+0x40>)
1000a1a2:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
1000a1a4:	25e2      	movs	r5, #226	; 0xe2
}
1000a1a6:	0028      	movs	r0, r5
1000a1a8:	bd70      	pop	{r4, r5, r6, pc}
1000a1aa:	46c0      	nop			; (mov r8, r8)
1000a1ac:	100116bc 	.word	0x100116bc
1000a1b0:	10010565 	.word	0x10010565
1000a1b4:	10012000 	.word	0x10012000
1000a1b8:	10010445 	.word	0x10010445
1000a1bc:	10012030 	.word	0x10012030

1000a1c0 <ble_characteristic_write_cmd_complete_handler>:

at_ble_status_t ble_characteristic_write_cmd_complete_handler(void *params)
{
1000a1c0:	b570      	push	{r4, r5, r6, lr}
1000a1c2:	0004      	movs	r4, r0
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
1000a1c4:	78c5      	ldrb	r5, [r0, #3]
1000a1c6:	2d00      	cmp	r5, #0
1000a1c8:	d108      	bne.n	1000a1dc <ble_characteristic_write_cmd_complete_handler+0x1c>
	{
		DBG_LOG_DEV("Char Write Cmd Complete, Connection Handle:%d, Operation:%d",
1000a1ca:	480a      	ldr	r0, [pc, #40]	; (1000a1f4 <ble_characteristic_write_cmd_complete_handler+0x34>)
1000a1cc:	4b0a      	ldr	r3, [pc, #40]	; (1000a1f8 <ble_characteristic_write_cmd_complete_handler+0x38>)
1000a1ce:	4798      	blx	r3
1000a1d0:	78a2      	ldrb	r2, [r4, #2]
1000a1d2:	8821      	ldrh	r1, [r4, #0]
1000a1d4:	4809      	ldr	r0, [pc, #36]	; (1000a1fc <ble_characteristic_write_cmd_complete_handler+0x3c>)
1000a1d6:	4b0a      	ldr	r3, [pc, #40]	; (1000a200 <ble_characteristic_write_cmd_complete_handler+0x40>)
1000a1d8:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
1000a1da:	e008      	b.n	1000a1ee <ble_characteristic_write_cmd_complete_handler+0x2e>
	}
	else
	{
		DBG_LOG_DEV("Char Write Cmd Failed, Connection Handle:%d, Operation:%d",
1000a1dc:	4805      	ldr	r0, [pc, #20]	; (1000a1f4 <ble_characteristic_write_cmd_complete_handler+0x34>)
1000a1de:	4b06      	ldr	r3, [pc, #24]	; (1000a1f8 <ble_characteristic_write_cmd_complete_handler+0x38>)
1000a1e0:	4798      	blx	r3
1000a1e2:	78a2      	ldrb	r2, [r4, #2]
1000a1e4:	8821      	ldrh	r1, [r4, #0]
1000a1e6:	4807      	ldr	r0, [pc, #28]	; (1000a204 <ble_characteristic_write_cmd_complete_handler+0x44>)
1000a1e8:	4b05      	ldr	r3, [pc, #20]	; (1000a200 <ble_characteristic_write_cmd_complete_handler+0x40>)
1000a1ea:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
1000a1ec:	25e2      	movs	r5, #226	; 0xe2
}
1000a1ee:	0028      	movs	r0, r5
1000a1f0:	bd70      	pop	{r4, r5, r6, pc}
1000a1f2:	46c0      	nop			; (mov r8, r8)
1000a1f4:	100116bc 	.word	0x100116bc
1000a1f8:	10010565 	.word	0x10010565
1000a1fc:	10012068 	.word	0x10012068
1000a200:	10010445 	.word	0x10010445
1000a204:	100120a4 	.word	0x100120a4

1000a208 <ble_disconnected_state_handler>:

/** @brief function handles disconnection event received from stack */
at_ble_status_t ble_disconnected_state_handler(void *params)
{
1000a208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000a20a:	0006      	movs	r6, r0
1000a20c:	4c1d      	ldr	r4, [pc, #116]	; (1000a284 <ble_disconnected_state_handler+0x7c>)
1000a20e:	239b      	movs	r3, #155	; 0x9b
1000a210:	009b      	lsls	r3, r3, #2
1000a212:	18e7      	adds	r7, r4, r3
1000a214:	0025      	movs	r5, r4
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
1000a216:	0023      	movs	r3, r4
1000a218:	3b56      	subs	r3, #86	; 0x56
1000a21a:	881a      	ldrh	r2, [r3, #0]
1000a21c:	8833      	ldrh	r3, [r6, #0]
1000a21e:	429a      	cmp	r2, r3
1000a220:	d122      	bne.n	1000a268 <ble_disconnected_state_handler+0x60>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
1000a222:	7823      	ldrb	r3, [r4, #0]
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
1000a224:	2b05      	cmp	r3, #5
1000a226:	d001      	beq.n	1000a22c <ble_disconnected_state_handler+0x24>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
1000a228:	2b08      	cmp	r3, #8
1000a22a:	d102      	bne.n	1000a232 <ble_disconnected_state_handler+0x2a>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
1000a22c:	2301      	movs	r3, #1
1000a22e:	702b      	strb	r3, [r5, #0]
1000a230:	e01a      	b.n	1000a268 <ble_disconnected_state_handler+0x60>
		}		
		else if(ble_dev_info[idx].conn_info.handle == disconnect->handle)
		{
			switch (ble_dev_info[idx].conn_state)
1000a232:	2b07      	cmp	r3, #7
1000a234:	d80f      	bhi.n	1000a256 <ble_disconnected_state_handler+0x4e>
1000a236:	009b      	lsls	r3, r3, #2
1000a238:	4a13      	ldr	r2, [pc, #76]	; (1000a288 <ble_disconnected_state_handler+0x80>)
1000a23a:	58d3      	ldr	r3, [r2, r3]
1000a23c:	469f      	mov	pc, r3
				case BLE_DEVICE_PAIRING_FAILED:
				case BLE_DEVICE_ENCRYPTION_STATE:
				case BLE_DEVICE_ENCRYPTION_FAILED:
				{
					/* Device is not paired so remove the device information */
					ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000a23e:	2300      	movs	r3, #0
1000a240:	7023      	strb	r3, [r4, #0]
					if (ble_device_count > 0)
1000a242:	4b12      	ldr	r3, [pc, #72]	; (1000a28c <ble_disconnected_state_handler+0x84>)
1000a244:	781b      	ldrb	r3, [r3, #0]
1000a246:	2b00      	cmp	r3, #0
1000a248:	d00e      	beq.n	1000a268 <ble_disconnected_state_handler+0x60>
					{
						ble_device_count--;
1000a24a:	4a10      	ldr	r2, [pc, #64]	; (1000a28c <ble_disconnected_state_handler+0x84>)
1000a24c:	7813      	ldrb	r3, [r2, #0]
1000a24e:	3b01      	subs	r3, #1
1000a250:	b2db      	uxtb	r3, r3
1000a252:	7013      	strb	r3, [r2, #0]
1000a254:	e008      	b.n	1000a268 <ble_disconnected_state_handler+0x60>
				
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
1000a256:	480e      	ldr	r0, [pc, #56]	; (1000a290 <ble_disconnected_state_handler+0x88>)
1000a258:	4b0e      	ldr	r3, [pc, #56]	; (1000a294 <ble_disconnected_state_handler+0x8c>)
1000a25a:	4798      	blx	r3
1000a25c:	7829      	ldrb	r1, [r5, #0]
1000a25e:	480e      	ldr	r0, [pc, #56]	; (1000a298 <ble_disconnected_state_handler+0x90>)
1000a260:	4b0e      	ldr	r3, [pc, #56]	; (1000a29c <ble_disconnected_state_handler+0x94>)
1000a262:	4798      	blx	r3
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000a264:	2300      	movs	r3, #0
1000a266:	702b      	strb	r3, [r5, #0]
1000a268:	347c      	adds	r4, #124	; 0x7c
{
	at_ble_disconnected_t *disconnect;
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a26a:	42bc      	cmp	r4, r7
1000a26c:	d1d2      	bne.n	1000a214 <ble_disconnected_state_handler+0xc>
				break;				
			}
		} 
	}
	
	DBG_LOG("Device disconnected Reason:0x%02x Handle=0x%x", disconnect->reason, disconnect->handle);
1000a26e:	4808      	ldr	r0, [pc, #32]	; (1000a290 <ble_disconnected_state_handler+0x88>)
1000a270:	4b08      	ldr	r3, [pc, #32]	; (1000a294 <ble_disconnected_state_handler+0x8c>)
1000a272:	4798      	blx	r3
1000a274:	8832      	ldrh	r2, [r6, #0]
1000a276:	78b1      	ldrb	r1, [r6, #2]
1000a278:	4809      	ldr	r0, [pc, #36]	; (1000a2a0 <ble_disconnected_state_handler+0x98>)
1000a27a:	4b08      	ldr	r3, [pc, #32]	; (1000a29c <ble_disconnected_state_handler+0x94>)
1000a27c:	4798      	blx	r3
	return AT_BLE_SUCCESS;
}
1000a27e:	2000      	movs	r0, #0
1000a280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000a282:	46c0      	nop			; (mov r8, r8)
1000a284:	100147aa 	.word	0x100147aa
1000a288:	10011e28 	.word	0x10011e28
1000a28c:	100149b8 	.word	0x100149b8
1000a290:	100116bc 	.word	0x100116bc
1000a294:	10010565 	.word	0x10010565
1000a298:	100120e0 	.word	0x100120e0
1000a29c:	10010445 	.word	0x10010445
1000a2a0:	100120f8 	.word	0x100120f8

1000a2a4 <ble_conn_param_update>:

/** @brief connection update parameter function */
at_ble_status_t ble_conn_param_update(void *params)
{
1000a2a4:	b510      	push	{r4, lr}
	at_ble_conn_param_update_done_t * conn_param_update;
	conn_param_update = (at_ble_conn_param_update_done_t *)params;
	DBG_LOG_DEV("AT_BLE_CONN_PARAM_UPDATE ");
1000a2a6:	4804      	ldr	r0, [pc, #16]	; (1000a2b8 <ble_conn_param_update+0x14>)
1000a2a8:	4b04      	ldr	r3, [pc, #16]	; (1000a2bc <ble_conn_param_update+0x18>)
1000a2aa:	4798      	blx	r3
1000a2ac:	4804      	ldr	r0, [pc, #16]	; (1000a2c0 <ble_conn_param_update+0x1c>)
1000a2ae:	4b05      	ldr	r3, [pc, #20]	; (1000a2c4 <ble_conn_param_update+0x20>)
1000a2b0:	4798      	blx	r3
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}
1000a2b2:	2000      	movs	r0, #0
1000a2b4:	bd10      	pop	{r4, pc}
1000a2b6:	46c0      	nop			; (mov r8, r8)
1000a2b8:	100116bc 	.word	0x100116bc
1000a2bc:	10010565 	.word	0x10010565
1000a2c0:	10012128 	.word	0x10012128
1000a2c4:	10010445 	.word	0x10010445

1000a2c8 <ble_encryption_status_change_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption status change */
at_ble_status_t ble_encryption_status_change_handler(void *params)
{
1000a2c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000a2ca:	0006      	movs	r6, r0
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
1000a2cc:	8801      	ldrh	r1, [r0, #0]
1000a2ce:	4b28      	ldr	r3, [pc, #160]	; (1000a370 <ble_encryption_status_change_handler+0xa8>)
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a2d0:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
1000a2d2:	891a      	ldrh	r2, [r3, #8]
1000a2d4:	428a      	cmp	r2, r1
1000a2d6:	d104      	bne.n	1000a2e2 <ble_encryption_status_change_handler+0x1a>
1000a2d8:	001a      	movs	r2, r3
1000a2da:	325e      	adds	r2, #94	; 0x5e
1000a2dc:	7812      	ldrb	r2, [r2, #0]
1000a2de:	2a06      	cmp	r2, #6
1000a2e0:	d02e      	beq.n	1000a340 <ble_encryption_status_change_handler+0x78>
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a2e2:	3401      	adds	r4, #1
1000a2e4:	b2e4      	uxtb	r4, r4
1000a2e6:	337c      	adds	r3, #124	; 0x7c
1000a2e8:	2c05      	cmp	r4, #5
1000a2ea:	d1f2      	bne.n	1000a2d2 <ble_encryption_status_change_handler+0xa>
1000a2ec:	e039      	b.n	1000a362 <ble_encryption_status_change_handler+0x9a>
			return AT_BLE_FAILURE;
		}
	}
	else
	{
		ble_dev_info[idx].bond_info.status = enc_status->status;
1000a2ee:	4920      	ldr	r1, [pc, #128]	; (1000a370 <ble_encryption_status_change_handler+0xa8>)
1000a2f0:	0163      	lsls	r3, r4, #5
1000a2f2:	1b1a      	subs	r2, r3, r4
1000a2f4:	0092      	lsls	r2, r2, #2
1000a2f6:	188a      	adds	r2, r1, r2
1000a2f8:	7615      	strb	r5, [r2, #24]
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
1000a2fa:	0014      	movs	r4, r2
1000a2fc:	345e      	adds	r4, #94	; 0x5e
1000a2fe:	2307      	movs	r3, #7
1000a300:	7023      	strb	r3, [r4, #0]
		DBG_LOG("Encryption failed");
1000a302:	481c      	ldr	r0, [pc, #112]	; (1000a374 <ble_encryption_status_change_handler+0xac>)
1000a304:	4b1c      	ldr	r3, [pc, #112]	; (1000a378 <ble_encryption_status_change_handler+0xb0>)
1000a306:	4798      	blx	r3
1000a308:	481c      	ldr	r0, [pc, #112]	; (1000a37c <ble_encryption_status_change_handler+0xb4>)
1000a30a:	4b1d      	ldr	r3, [pc, #116]	; (1000a380 <ble_encryption_status_change_handler+0xb8>)
1000a30c:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000a30e:	25e2      	movs	r5, #226	; 0xe2
1000a310:	e02b      	b.n	1000a36a <ble_encryption_status_change_handler+0xa2>
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Encryption completed successfully");
1000a312:	4818      	ldr	r0, [pc, #96]	; (1000a374 <ble_encryption_status_change_handler+0xac>)
1000a314:	4b18      	ldr	r3, [pc, #96]	; (1000a378 <ble_encryption_status_change_handler+0xb0>)
1000a316:	4798      	blx	r3
1000a318:	481a      	ldr	r0, [pc, #104]	; (1000a384 <ble_encryption_status_change_handler+0xbc>)
1000a31a:	4b19      	ldr	r3, [pc, #100]	; (1000a380 <ble_encryption_status_change_handler+0xb8>)
1000a31c:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_COMPLETED;
1000a31e:	4914      	ldr	r1, [pc, #80]	; (1000a370 <ble_encryption_status_change_handler+0xa8>)
1000a320:	0163      	lsls	r3, r4, #5
1000a322:	1b1a      	subs	r2, r3, r4
1000a324:	0092      	lsls	r2, r2, #2
1000a326:	188a      	adds	r2, r1, r2
1000a328:	0010      	movs	r0, r2
1000a32a:	305e      	adds	r0, #94	; 0x5e
1000a32c:	2708      	movs	r7, #8
1000a32e:	7007      	strb	r7, [r0, #0]
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
1000a330:	78f0      	ldrb	r0, [r6, #3]
1000a332:	7510      	strb	r0, [r2, #20]
			ble_dev_info[idx].bond_info.status = enc_status->status;
1000a334:	78b2      	ldrb	r2, [r6, #2]
1000a336:	1b1c      	subs	r4, r3, r4
1000a338:	00a4      	lsls	r4, r4, #2
1000a33a:	190c      	adds	r4, r1, r4
1000a33c:	7622      	strb	r2, [r4, #24]
		ble_dev_info[idx].bond_info.status = enc_status->status;
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
1000a33e:	e014      	b.n	1000a36a <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
1000a340:	78b5      	ldrb	r5, [r6, #2]
1000a342:	2d00      	cmp	r5, #0
1000a344:	d0e5      	beq.n	1000a312 <ble_encryption_status_change_handler+0x4a>
1000a346:	e7d2      	b.n	1000a2ee <ble_encryption_status_change_handler+0x26>
	{
		DBG_LOG("Encryption completed successfully");
1000a348:	4e0a      	ldr	r6, [pc, #40]	; (1000a374 <ble_encryption_status_change_handler+0xac>)
1000a34a:	0030      	movs	r0, r6
1000a34c:	4d0a      	ldr	r5, [pc, #40]	; (1000a378 <ble_encryption_status_change_handler+0xb0>)
1000a34e:	47a8      	blx	r5
1000a350:	480c      	ldr	r0, [pc, #48]	; (1000a384 <ble_encryption_status_change_handler+0xbc>)
1000a352:	4c0b      	ldr	r4, [pc, #44]	; (1000a380 <ble_encryption_status_change_handler+0xb8>)
1000a354:	47a0      	blx	r4
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
			ble_dev_info[idx].bond_info.status = enc_status->status;
		}
		else
		{
			DBG_LOG("BLE Device not found encryption info");
1000a356:	0030      	movs	r0, r6
1000a358:	47a8      	blx	r5
1000a35a:	480b      	ldr	r0, [pc, #44]	; (1000a388 <ble_encryption_status_change_handler+0xc0>)
1000a35c:	47a0      	blx	r4
			return AT_BLE_FAILURE;
1000a35e:	25e2      	movs	r5, #226	; 0xe2
1000a360:	e003      	b.n	1000a36a <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
1000a362:	78b5      	ldrb	r5, [r6, #2]
1000a364:	2d00      	cmp	r5, #0
1000a366:	d1c2      	bne.n	1000a2ee <ble_encryption_status_change_handler+0x26>
1000a368:	e7ee      	b.n	1000a348 <ble_encryption_status_change_handler+0x80>
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
}
1000a36a:	0028      	movs	r0, r5
1000a36c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000a36e:	46c0      	nop			; (mov r8, r8)
1000a370:	1001474c 	.word	0x1001474c
1000a374:	100116bc 	.word	0x100116bc
1000a378:	10010565 	.word	0x10010565
1000a37c:	10012144 	.word	0x10012144
1000a380:	10010445 	.word	0x10010445
1000a384:	10012158 	.word	0x10012158
1000a388:	1001217c 	.word	0x1001217c

1000a38c <ble_scan_info_handler>:
	return found;
}
#endif
/** @brief function handling scaned information */
at_ble_status_t ble_scan_info_handler(void *params)
{
1000a38c:	b530      	push	{r4, r5, lr}
1000a38e:	b085      	sub	sp, #20
1000a390:	0004      	movs	r4, r0
	at_ble_scan_info_t *scan_param;
	scan_param = (at_ble_scan_info_t *)params;
	if(scan_response_count < MAX_SCAN_DEVICE)
1000a392:	4b1f      	ldr	r3, [pc, #124]	; (1000a410 <ble_scan_info_handler+0x84>)
1000a394:	781b      	ldrb	r3, [r3, #0]
1000a396:	b2db      	uxtb	r3, r3
1000a398:	2b13      	cmp	r3, #19
1000a39a:	d824      	bhi.n	1000a3e6 <ble_scan_info_handler+0x5a>
	{
		memcpy((uint8_t *)&scan_info[scan_response_count], scan_param, sizeof(at_ble_scan_info_t));
1000a39c:	4d1c      	ldr	r5, [pc, #112]	; (1000a410 <ble_scan_info_handler+0x84>)
1000a39e:	782b      	ldrb	r3, [r5, #0]
1000a3a0:	b2db      	uxtb	r3, r3
1000a3a2:	0098      	lsls	r0, r3, #2
1000a3a4:	18c0      	adds	r0, r0, r3
1000a3a6:	00c0      	lsls	r0, r0, #3
1000a3a8:	18c3      	adds	r3, r0, r3
1000a3aa:	481a      	ldr	r0, [pc, #104]	; (1000a414 <ble_scan_info_handler+0x88>)
1000a3ac:	1818      	adds	r0, r3, r0
1000a3ae:	2229      	movs	r2, #41	; 0x29
1000a3b0:	0021      	movs	r1, r4
1000a3b2:	4b19      	ldr	r3, [pc, #100]	; (1000a418 <ble_scan_info_handler+0x8c>)
1000a3b4:	4798      	blx	r3
		DBG_LOG_DEV("Info:Device found address [%d]  0x%02X%02X%02X%02X%02X%02X ",
1000a3b6:	4819      	ldr	r0, [pc, #100]	; (1000a41c <ble_scan_info_handler+0x90>)
1000a3b8:	4b19      	ldr	r3, [pc, #100]	; (1000a420 <ble_scan_info_handler+0x94>)
1000a3ba:	4798      	blx	r3
1000a3bc:	7829      	ldrb	r1, [r5, #0]
1000a3be:	b2c9      	uxtb	r1, r1
1000a3c0:	79a3      	ldrb	r3, [r4, #6]
1000a3c2:	79e2      	ldrb	r2, [r4, #7]
1000a3c4:	78a0      	ldrb	r0, [r4, #2]
1000a3c6:	9003      	str	r0, [sp, #12]
1000a3c8:	78e0      	ldrb	r0, [r4, #3]
1000a3ca:	9002      	str	r0, [sp, #8]
1000a3cc:	7920      	ldrb	r0, [r4, #4]
1000a3ce:	9001      	str	r0, [sp, #4]
1000a3d0:	7960      	ldrb	r0, [r4, #5]
1000a3d2:	9000      	str	r0, [sp, #0]
1000a3d4:	4813      	ldr	r0, [pc, #76]	; (1000a424 <ble_scan_info_handler+0x98>)
1000a3d6:	4c14      	ldr	r4, [pc, #80]	; (1000a428 <ble_scan_info_handler+0x9c>)
1000a3d8:	47a0      	blx	r4
		scan_param->dev_addr.addr[4],
		scan_param->dev_addr.addr[3],
		scan_param->dev_addr.addr[2],
		scan_param->dev_addr.addr[1],
		scan_param->dev_addr.addr[0]);
		scan_response_count++;
1000a3da:	782b      	ldrb	r3, [r5, #0]
1000a3dc:	3301      	adds	r3, #1
1000a3de:	b2db      	uxtb	r3, r3
1000a3e0:	702b      	strb	r3, [r5, #0]
		return AT_BLE_SUCCESS;
1000a3e2:	2300      	movs	r3, #0
1000a3e4:	e011      	b.n	1000a40a <ble_scan_info_handler+0x7e>
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
1000a3e6:	480d      	ldr	r0, [pc, #52]	; (1000a41c <ble_scan_info_handler+0x90>)
1000a3e8:	4b0d      	ldr	r3, [pc, #52]	; (1000a420 <ble_scan_info_handler+0x94>)
1000a3ea:	4798      	blx	r3
1000a3ec:	480f      	ldr	r0, [pc, #60]	; (1000a42c <ble_scan_info_handler+0xa0>)
1000a3ee:	4b0e      	ldr	r3, [pc, #56]	; (1000a428 <ble_scan_info_handler+0x9c>)
1000a3f0:	4798      	blx	r3
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
1000a3f2:	4b0f      	ldr	r3, [pc, #60]	; (1000a430 <ble_scan_info_handler+0xa4>)
1000a3f4:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
1000a3f6:	23e2      	movs	r3, #226	; 0xe2
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
1000a3f8:	2800      	cmp	r0, #0
1000a3fa:	d006      	beq.n	1000a40a <ble_scan_info_handler+0x7e>
		{
			DBG_LOG("Failed to stop scanning");
1000a3fc:	4807      	ldr	r0, [pc, #28]	; (1000a41c <ble_scan_info_handler+0x90>)
1000a3fe:	4b08      	ldr	r3, [pc, #32]	; (1000a420 <ble_scan_info_handler+0x94>)
1000a400:	4798      	blx	r3
1000a402:	480c      	ldr	r0, [pc, #48]	; (1000a434 <ble_scan_info_handler+0xa8>)
1000a404:	4b08      	ldr	r3, [pc, #32]	; (1000a428 <ble_scan_info_handler+0x9c>)
1000a406:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
1000a408:	23e2      	movs	r3, #226	; 0xe2
	}
}
1000a40a:	0018      	movs	r0, r3
1000a40c:	b005      	add	sp, #20
1000a40e:	bd30      	pop	{r4, r5, pc}
1000a410:	10013464 	.word	0x10013464
1000a414:	10014a30 	.word	0x10014a30
1000a418:	10010423 	.word	0x10010423
1000a41c:	100116bc 	.word	0x100116bc
1000a420:	10010565 	.word	0x10010565
1000a424:	100121a4 	.word	0x100121a4
1000a428:	10010445 	.word	0x10010445
1000a42c:	100121e0 	.word	0x100121e0
1000a430:	1000d0d5 	.word	0x1000d0d5
1000a434:	10012218 	.word	0x10012218

1000a438 <ble_pair_done_handler>:
	return AT_BLE_SUCCESS;	
}

/** @brief function handles pair done event */
at_ble_status_t ble_pair_done_handler(void *params)
{
1000a438:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a43a:	465f      	mov	r7, fp
1000a43c:	4656      	mov	r6, sl
1000a43e:	464d      	mov	r5, r9
1000a440:	4644      	mov	r4, r8
1000a442:	b4f0      	push	{r4, r5, r6, r7}
1000a444:	b083      	sub	sp, #12
1000a446:	0005      	movs	r5, r0
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1000a448:	8841      	ldrh	r1, [r0, #2]
1000a44a:	4b59      	ldr	r3, [pc, #356]	; (1000a5b0 <ble_pair_done_handler+0x178>)
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a44c:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1000a44e:	891a      	ldrh	r2, [r3, #8]
1000a450:	428a      	cmp	r2, r1
1000a452:	d105      	bne.n	1000a460 <ble_pair_done_handler+0x28>
1000a454:	001a      	movs	r2, r3
1000a456:	325e      	adds	r2, #94	; 0x5e
1000a458:	7812      	ldrb	r2, [r2, #0]
1000a45a:	2a03      	cmp	r2, #3
1000a45c:	d100      	bne.n	1000a460 <ble_pair_done_handler+0x28>
1000a45e:	e09a      	b.n	1000a596 <ble_pair_done_handler+0x15e>
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a460:	3401      	adds	r4, #1
1000a462:	b2e4      	uxtb	r4, r4
1000a464:	337c      	adds	r3, #124	; 0x7c
1000a466:	2c05      	cmp	r4, #5
1000a468:	d1f1      	bne.n	1000a44e <ble_pair_done_handler+0x16>
1000a46a:	e057      	b.n	1000a51c <ble_pair_done_handler+0xe4>
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
			
			DBG_LOG_DEV("LTK: ");
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
1000a46c:	7821      	ldrb	r1, [r4, #0]
1000a46e:	0030      	movs	r0, r6
1000a470:	47b8      	blx	r7
1000a472:	3401      	adds	r4, #1
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
			
			DBG_LOG_DEV("LTK: ");
			for (idx = 0; idx < 16; idx++)
1000a474:	454c      	cmp	r4, r9
1000a476:	d1f9      	bne.n	1000a46c <ble_pair_done_handler+0x34>
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
				
			}
			DBG_LOG_DEV("CSRK: ");
1000a478:	484e      	ldr	r0, [pc, #312]	; (1000a5b4 <ble_pair_done_handler+0x17c>)
1000a47a:	4b4f      	ldr	r3, [pc, #316]	; (1000a5b8 <ble_pair_done_handler+0x180>)
1000a47c:	4798      	blx	r3
1000a47e:	484f      	ldr	r0, [pc, #316]	; (1000a5bc <ble_pair_done_handler+0x184>)
1000a480:	4b4f      	ldr	r3, [pc, #316]	; (1000a5c0 <ble_pair_done_handler+0x188>)
1000a482:	4798      	blx	r3
1000a484:	002e      	movs	r6, r5
1000a486:	3622      	adds	r6, #34	; 0x22
1000a488:	002c      	movs	r4, r5
1000a48a:	3432      	adds	r4, #50	; 0x32
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_csrk.key[idx]);
1000a48c:	4f4c      	ldr	r7, [pc, #304]	; (1000a5c0 <ble_pair_done_handler+0x188>)
1000a48e:	7831      	ldrb	r1, [r6, #0]
1000a490:	484c      	ldr	r0, [pc, #304]	; (1000a5c4 <ble_pair_done_handler+0x18c>)
1000a492:	47b8      	blx	r7
1000a494:	3601      	adds	r6, #1
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
				
			}
			DBG_LOG_DEV("CSRK: ");
			for (idx = 0; idx < 16; idx++)
1000a496:	42a6      	cmp	r6, r4
1000a498:	d1f9      	bne.n	1000a48e <ble_pair_done_handler+0x56>
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_csrk.key[idx]);
				
			}
			DBG_LOG_DEV("IRK:");
1000a49a:	4846      	ldr	r0, [pc, #280]	; (1000a5b4 <ble_pair_done_handler+0x17c>)
1000a49c:	4b46      	ldr	r3, [pc, #280]	; (1000a5b8 <ble_pair_done_handler+0x180>)
1000a49e:	4798      	blx	r3
1000a4a0:	4849      	ldr	r0, [pc, #292]	; (1000a5c8 <ble_pair_done_handler+0x190>)
1000a4a2:	4b47      	ldr	r3, [pc, #284]	; (1000a5c0 <ble_pair_done_handler+0x188>)
1000a4a4:	4798      	blx	r3
1000a4a6:	3542      	adds	r5, #66	; 0x42
1000a4a8:	002f      	movs	r7, r5
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_irk.key[idx]);
1000a4aa:	4e46      	ldr	r6, [pc, #280]	; (1000a5c4 <ble_pair_done_handler+0x18c>)
1000a4ac:	4d44      	ldr	r5, [pc, #272]	; (1000a5c0 <ble_pair_done_handler+0x188>)
1000a4ae:	7821      	ldrb	r1, [r4, #0]
1000a4b0:	0030      	movs	r0, r6
1000a4b2:	47a8      	blx	r5
1000a4b4:	3401      	adds	r4, #1
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_csrk.key[idx]);
				
			}
			DBG_LOG_DEV("IRK:");
			for (idx = 0; idx < 16; idx++)
1000a4b6:	42bc      	cmp	r4, r7
1000a4b8:	d1f9      	bne.n	1000a4ae <ble_pair_done_handler+0x76>
1000a4ba:	e071      	b.n	1000a5a0 <ble_pair_done_handler+0x168>
			return AT_BLE_FAILURE;
		}		
	}
	else
	{
		if(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE && ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) {
1000a4bc:	0163      	lsls	r3, r4, #5
1000a4be:	1b1c      	subs	r4, r3, r4
1000a4c0:	00a4      	lsls	r4, r4, #2
1000a4c2:	4b3b      	ldr	r3, [pc, #236]	; (1000a5b0 <ble_pair_done_handler+0x178>)
1000a4c4:	191c      	adds	r4, r3, r4
1000a4c6:	345e      	adds	r4, #94	; 0x5e
1000a4c8:	7823      	ldrb	r3, [r4, #0]
1000a4ca:	2b01      	cmp	r3, #1
1000a4cc:	d915      	bls.n	1000a4fa <ble_pair_done_handler+0xc2>
			DBG_LOG("Pairing failed...Disconnecting");
1000a4ce:	4839      	ldr	r0, [pc, #228]	; (1000a5b4 <ble_pair_done_handler+0x17c>)
1000a4d0:	4b39      	ldr	r3, [pc, #228]	; (1000a5b8 <ble_pair_done_handler+0x180>)
1000a4d2:	4798      	blx	r3
1000a4d4:	483d      	ldr	r0, [pc, #244]	; (1000a5cc <ble_pair_done_handler+0x194>)
1000a4d6:	4b3a      	ldr	r3, [pc, #232]	; (1000a5c0 <ble_pair_done_handler+0x188>)
1000a4d8:	4798      	blx	r3
			if(!(at_ble_disconnect(pairing_params->handle, AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS))
1000a4da:	8868      	ldrh	r0, [r5, #2]
1000a4dc:	2113      	movs	r1, #19
1000a4de:	4b3c      	ldr	r3, [pc, #240]	; (1000a5d0 <ble_pair_done_handler+0x198>)
1000a4e0:	4798      	blx	r3
1000a4e2:	9001      	str	r0, [sp, #4]
1000a4e4:	2800      	cmp	r0, #0
1000a4e6:	d05b      	beq.n	1000a5a0 <ble_pair_done_handler+0x168>
			{
				DBG_LOG("Disconnect Request Failed");
1000a4e8:	4832      	ldr	r0, [pc, #200]	; (1000a5b4 <ble_pair_done_handler+0x17c>)
1000a4ea:	4b33      	ldr	r3, [pc, #204]	; (1000a5b8 <ble_pair_done_handler+0x180>)
1000a4ec:	4798      	blx	r3
1000a4ee:	4839      	ldr	r0, [pc, #228]	; (1000a5d4 <ble_pair_done_handler+0x19c>)
1000a4f0:	4b33      	ldr	r3, [pc, #204]	; (1000a5c0 <ble_pair_done_handler+0x188>)
1000a4f2:	4798      	blx	r3
				return AT_BLE_FAILURE;
1000a4f4:	23e2      	movs	r3, #226	; 0xe2
1000a4f6:	9301      	str	r3, [sp, #4]
1000a4f8:	e052      	b.n	1000a5a0 <ble_pair_done_handler+0x168>
			}
		}
	}
	return AT_BLE_SUCCESS;
1000a4fa:	2300      	movs	r3, #0
1000a4fc:	9301      	str	r3, [sp, #4]
1000a4fe:	e04f      	b.n	1000a5a0 <ble_pair_done_handler+0x168>
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Pairing procedure completed successfully");
1000a500:	4e2c      	ldr	r6, [pc, #176]	; (1000a5b4 <ble_pair_done_handler+0x17c>)
1000a502:	0030      	movs	r0, r6
1000a504:	4d2c      	ldr	r5, [pc, #176]	; (1000a5b8 <ble_pair_done_handler+0x180>)
1000a506:	47a8      	blx	r5
1000a508:	4833      	ldr	r0, [pc, #204]	; (1000a5d8 <ble_pair_done_handler+0x1a0>)
1000a50a:	4c2d      	ldr	r4, [pc, #180]	; (1000a5c0 <ble_pair_done_handler+0x188>)
1000a50c:	47a0      	blx	r4
				
			}
		}
		else
		{
			DBG_LOG("BLE Device not found to store the pairing info");
1000a50e:	0030      	movs	r0, r6
1000a510:	47a8      	blx	r5
1000a512:	4832      	ldr	r0, [pc, #200]	; (1000a5dc <ble_pair_done_handler+0x1a4>)
1000a514:	47a0      	blx	r4
			return AT_BLE_FAILURE;
1000a516:	23e2      	movs	r3, #226	; 0xe2
1000a518:	9301      	str	r3, [sp, #4]
1000a51a:	e041      	b.n	1000a5a0 <ble_pair_done_handler+0x168>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
1000a51c:	792b      	ldrb	r3, [r5, #4]
1000a51e:	2b00      	cmp	r3, #0
1000a520:	d1cc      	bne.n	1000a4bc <ble_pair_done_handler+0x84>
1000a522:	e7ed      	b.n	1000a500 <ble_pair_done_handler+0xc8>
	{
		DBG_LOG("Pairing procedure completed successfully");
1000a524:	4823      	ldr	r0, [pc, #140]	; (1000a5b4 <ble_pair_done_handler+0x17c>)
1000a526:	4b24      	ldr	r3, [pc, #144]	; (1000a5b8 <ble_pair_done_handler+0x180>)
1000a528:	469b      	mov	fp, r3
1000a52a:	4798      	blx	r3
1000a52c:	482a      	ldr	r0, [pc, #168]	; (1000a5d8 <ble_pair_done_handler+0x1a0>)
1000a52e:	4b24      	ldr	r3, [pc, #144]	; (1000a5c0 <ble_pair_done_handler+0x188>)
1000a530:	469a      	mov	sl, r3
1000a532:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].bond_info.auth = pairing_params->auth;
1000a534:	782a      	ldrb	r2, [r5, #0]
1000a536:	4b1e      	ldr	r3, [pc, #120]	; (1000a5b0 <ble_pair_done_handler+0x178>)
1000a538:	4698      	mov	r8, r3
1000a53a:	0167      	lsls	r7, r4, #5
1000a53c:	1b3b      	subs	r3, r7, r4
1000a53e:	009b      	lsls	r3, r3, #2
1000a540:	4443      	add	r3, r8
1000a542:	751a      	strb	r2, [r3, #20]
			ble_dev_info[idx].bond_info.status = pairing_params->status;
1000a544:	792a      	ldrb	r2, [r5, #4]
1000a546:	761a      	strb	r2, [r3, #24]
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRED;
1000a548:	335e      	adds	r3, #94	; 0x5e
1000a54a:	2205      	movs	r2, #5
1000a54c:	701a      	strb	r2, [r3, #0]
			
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
1000a54e:	1b38      	subs	r0, r7, r4
1000a550:	0080      	lsls	r0, r0, #2
1000a552:	4440      	add	r0, r8
1000a554:	3036      	adds	r0, #54	; 0x36
1000a556:	320b      	adds	r2, #11
1000a558:	0029      	movs	r1, r5
1000a55a:	3122      	adds	r1, #34	; 0x22
1000a55c:	4b20      	ldr	r3, [pc, #128]	; (1000a5e0 <ble_pair_done_handler+0x1a8>)
1000a55e:	4699      	mov	r9, r3
1000a560:	4798      	blx	r3
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
1000a562:	1b38      	subs	r0, r7, r4
1000a564:	0080      	lsls	r0, r0, #2
1000a566:	4440      	add	r0, r8
1000a568:	3046      	adds	r0, #70	; 0x46
1000a56a:	2217      	movs	r2, #23
1000a56c:	0029      	movs	r1, r5
1000a56e:	3132      	adds	r1, #50	; 0x32
1000a570:	47c8      	blx	r9
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
1000a572:	1b38      	subs	r0, r7, r4
1000a574:	0080      	lsls	r0, r0, #2
1000a576:	4440      	add	r0, r8
1000a578:	301a      	adds	r0, #26
1000a57a:	1dac      	adds	r4, r5, #6
1000a57c:	221c      	movs	r2, #28
1000a57e:	0021      	movs	r1, r4
1000a580:	47c8      	blx	r9
			
			DBG_LOG_DEV("LTK: ");
1000a582:	480c      	ldr	r0, [pc, #48]	; (1000a5b4 <ble_pair_done_handler+0x17c>)
1000a584:	47d8      	blx	fp
1000a586:	4817      	ldr	r0, [pc, #92]	; (1000a5e4 <ble_pair_done_handler+0x1ac>)
1000a588:	47d0      	blx	sl
1000a58a:	2316      	movs	r3, #22
1000a58c:	4699      	mov	r9, r3
1000a58e:	44a9      	add	r9, r5
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
1000a590:	4e0c      	ldr	r6, [pc, #48]	; (1000a5c4 <ble_pair_done_handler+0x18c>)
1000a592:	4f0b      	ldr	r7, [pc, #44]	; (1000a5c0 <ble_pair_done_handler+0x188>)
1000a594:	e76a      	b.n	1000a46c <ble_pair_done_handler+0x34>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
1000a596:	792b      	ldrb	r3, [r5, #4]
1000a598:	9301      	str	r3, [sp, #4]
1000a59a:	2b00      	cmp	r3, #0
1000a59c:	d0c2      	beq.n	1000a524 <ble_pair_done_handler+0xec>
1000a59e:	e78d      	b.n	1000a4bc <ble_pair_done_handler+0x84>
				return AT_BLE_FAILURE;
			}
		}
	}
	return AT_BLE_SUCCESS;
}
1000a5a0:	9801      	ldr	r0, [sp, #4]
1000a5a2:	b003      	add	sp, #12
1000a5a4:	bc3c      	pop	{r2, r3, r4, r5}
1000a5a6:	4690      	mov	r8, r2
1000a5a8:	4699      	mov	r9, r3
1000a5aa:	46a2      	mov	sl, r4
1000a5ac:	46ab      	mov	fp, r5
1000a5ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a5b0:	1001474c 	.word	0x1001474c
1000a5b4:	100116bc 	.word	0x100116bc
1000a5b8:	10010565 	.word	0x10010565
1000a5bc:	1001223c 	.word	0x1001223c
1000a5c0:	10010445 	.word	0x10010445
1000a5c4:	10012230 	.word	0x10012230
1000a5c8:	10012244 	.word	0x10012244
1000a5cc:	1001224c 	.word	0x1001224c
1000a5d0:	1000d1cd 	.word	0x1000d1cd
1000a5d4:	1001226c 	.word	0x1001226c
1000a5d8:	10012288 	.word	0x10012288
1000a5dc:	100122b4 	.word	0x100122b4
1000a5e0:	10010423 	.word	0x10010423
1000a5e4:	100122e4 	.word	0x100122e4

1000a5e8 <ble_conn_param_update_req>:
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_conn_param_update_req(void *params)
{
1000a5e8:	b510      	push	{r4, lr}
	at_ble_conn_param_update_request_t * conn_param_req;
	conn_param_req = (at_ble_conn_param_update_request_t *)params;
	at_ble_conn_update_reply(conn_param_req->handle, true, 1, 120);
1000a5ea:	8800      	ldrh	r0, [r0, #0]
1000a5ec:	2378      	movs	r3, #120	; 0x78
1000a5ee:	2201      	movs	r2, #1
1000a5f0:	2101      	movs	r1, #1
1000a5f2:	4c02      	ldr	r4, [pc, #8]	; (1000a5fc <ble_conn_param_update_req+0x14>)
1000a5f4:	47a0      	blx	r4
	return AT_BLE_SUCCESS;
}
1000a5f6:	2000      	movs	r0, #0
1000a5f8:	bd10      	pop	{r4, pc}
1000a5fa:	46c0      	nop			; (mov r8, r8)
1000a5fc:	1000d1ed 	.word	0x1000d1ed

1000a600 <ble_slave_security_request_handler>:

at_ble_status_t ble_slave_security_request_handler(void* params)
{
1000a600:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a602:	4657      	mov	r7, sl
1000a604:	464e      	mov	r6, r9
1000a606:	4645      	mov	r5, r8
1000a608:	b4e0      	push	{r5, r6, r7}
1000a60a:	b084      	sub	sp, #16
1000a60c:	0004      	movs	r4, r0
	uint8_t i = 0, idx;
	at_ble_slave_sec_request_t* slave_sec_req;
	bool device_found = false;
	
	slave_sec_req = (at_ble_slave_sec_request_t*)params;	
	memset(&features, 0x00, sizeof(at_ble_pair_features_t));
1000a60e:	2209      	movs	r2, #9
1000a610:	2100      	movs	r1, #0
1000a612:	a801      	add	r0, sp, #4
1000a614:	4b6a      	ldr	r3, [pc, #424]	; (1000a7c0 <ble_slave_security_request_handler+0x1c0>)
1000a616:	4798      	blx	r3
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000a618:	8825      	ldrh	r5, [r4, #0]
1000a61a:	496a      	ldr	r1, [pc, #424]	; (1000a7c4 <ble_slave_security_request_handler+0x1c4>)
1000a61c:	000a      	movs	r2, r1
1000a61e:	2300      	movs	r3, #0
1000a620:	8910      	ldrh	r0, [r2, #8]
1000a622:	42a8      	cmp	r0, r5
1000a624:	d116      	bne.n	1000a654 <ble_slave_security_request_handler+0x54>
1000a626:	0010      	movs	r0, r2
1000a628:	305e      	adds	r0, #94	; 0x5e
1000a62a:	7800      	ldrb	r0, [r0, #0]
1000a62c:	2802      	cmp	r0, #2
1000a62e:	d111      	bne.n	1000a654 <ble_slave_security_request_handler+0x54>
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000a630:	4864      	ldr	r0, [pc, #400]	; (1000a7c4 <ble_slave_security_request_handler+0x1c4>)
1000a632:	015a      	lsls	r2, r3, #5
1000a634:	1ad6      	subs	r6, r2, r3
1000a636:	00b6      	lsls	r6, r6, #2
1000a638:	1986      	adds	r6, r0, r6
1000a63a:	365e      	adds	r6, #94	; 0x5e
1000a63c:	2206      	movs	r2, #6
1000a63e:	7032      	strb	r2, [r6, #0]
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
1000a640:	32f9      	adds	r2, #249	; 0xf9
1000a642:	4013      	ands	r3, r2
1000a644:	015a      	lsls	r2, r3, #5
1000a646:	1ad2      	subs	r2, r2, r3
1000a648:	0092      	lsls	r2, r2, #2
1000a64a:	1882      	adds	r2, r0, r2
1000a64c:	7d12      	ldrb	r2, [r2, #20]
1000a64e:	07d0      	lsls	r0, r2, #31
1000a650:	d405      	bmi.n	1000a65e <ble_slave_security_request_handler+0x5e>
1000a652:	e01b      	b.n	1000a68c <ble_slave_security_request_handler+0x8c>
1000a654:	3301      	adds	r3, #1
1000a656:	327c      	adds	r2, #124	; 0x7c
		//at_ble_disconnect(slave_sec_req->handle, AT_BLE_AUTH_FAILURE);		
		//return AT_BLE_FAILURE;
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a658:	2b05      	cmp	r3, #5
1000a65a:	d1e1      	bne.n	1000a620 <ble_slave_security_request_handler+0x20>
1000a65c:	e01e      	b.n	1000a69c <ble_slave_security_request_handler+0x9c>
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
1000a65e:	78e0      	ldrb	r0, [r4, #3]
1000a660:	2800      	cmp	r0, #0
1000a662:	d013      	beq.n	1000a68c <ble_slave_security_request_handler+0x8c>
		{
			if(at_ble_encryption_start(slave_sec_req->handle, &ble_dev_info[idx].bond_info.peer_ltk, ble_dev_info[idx].bond_info.auth) == AT_BLE_SUCCESS)
1000a664:	0159      	lsls	r1, r3, #5
1000a666:	1ac9      	subs	r1, r1, r3
1000a668:	008b      	lsls	r3, r1, #2
1000a66a:	4956      	ldr	r1, [pc, #344]	; (1000a7c4 <ble_slave_security_request_handler+0x1c4>)
1000a66c:	18c9      	adds	r1, r1, r3
1000a66e:	311a      	adds	r1, #26
1000a670:	8820      	ldrh	r0, [r4, #0]
1000a672:	4b55      	ldr	r3, [pc, #340]	; (1000a7c8 <ble_slave_security_request_handler+0x1c8>)
1000a674:	4798      	blx	r3
1000a676:	2800      	cmp	r0, #0
1000a678:	d100      	bne.n	1000a67c <ble_slave_security_request_handler+0x7c>
1000a67a:	e09b      	b.n	1000a7b4 <ble_slave_security_request_handler+0x1b4>
			{
				return  AT_BLE_SUCCESS;
			}
			else
			{
				DBG_LOG("Encryption Not started");
1000a67c:	4853      	ldr	r0, [pc, #332]	; (1000a7cc <ble_slave_security_request_handler+0x1cc>)
1000a67e:	4b54      	ldr	r3, [pc, #336]	; (1000a7d0 <ble_slave_security_request_handler+0x1d0>)
1000a680:	4798      	blx	r3
1000a682:	4854      	ldr	r0, [pc, #336]	; (1000a7d4 <ble_slave_security_request_handler+0x1d4>)
1000a684:	4b54      	ldr	r3, [pc, #336]	; (1000a7d8 <ble_slave_security_request_handler+0x1d8>)
1000a686:	4798      	blx	r3
				return AT_BLE_FAILURE;
1000a688:	20e2      	movs	r0, #226	; 0xe2
1000a68a:	e093      	b.n	1000a7b4 <ble_slave_security_request_handler+0x1b4>
			}			
		}
		else
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000a68c:	015a      	lsls	r2, r3, #5
1000a68e:	1ad3      	subs	r3, r2, r3
1000a690:	009b      	lsls	r3, r3, #2
1000a692:	4a4c      	ldr	r2, [pc, #304]	; (1000a7c4 <ble_slave_security_request_handler+0x1c4>)
1000a694:	18d3      	adds	r3, r2, r3
1000a696:	335e      	adds	r3, #94	; 0x5e
1000a698:	2202      	movs	r2, #2
1000a69a:	701a      	strb	r2, [r3, #0]
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000a69c:	8825      	ldrh	r5, [r4, #0]
1000a69e:	2200      	movs	r2, #0
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a6a0:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000a6a2:	0016      	movs	r6, r2
1000a6a4:	8908      	ldrh	r0, [r1, #8]
1000a6a6:	42a8      	cmp	r0, r5
1000a6a8:	d10d      	bne.n	1000a6c6 <ble_slave_security_request_handler+0xc6>
1000a6aa:	0008      	movs	r0, r1
1000a6ac:	305e      	adds	r0, #94	; 0x5e
1000a6ae:	7800      	ldrb	r0, [r0, #0]
1000a6b0:	2802      	cmp	r0, #2
1000a6b2:	d108      	bne.n	1000a6c6 <ble_slave_security_request_handler+0xc6>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000a6b4:	0152      	lsls	r2, r2, #5
1000a6b6:	1b92      	subs	r2, r2, r6
1000a6b8:	0096      	lsls	r6, r2, #2
1000a6ba:	4a42      	ldr	r2, [pc, #264]	; (1000a7c4 <ble_slave_security_request_handler+0x1c4>)
1000a6bc:	1992      	adds	r2, r2, r6
1000a6be:	325e      	adds	r2, #94	; 0x5e
1000a6c0:	2103      	movs	r1, #3
1000a6c2:	7011      	strb	r1, [r2, #0]
			break;
1000a6c4:	e005      	b.n	1000a6d2 <ble_slave_security_request_handler+0xd2>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a6c6:	3301      	adds	r3, #1
1000a6c8:	b2db      	uxtb	r3, r3
1000a6ca:	3201      	adds	r2, #1
1000a6cc:	317c      	adds	r1, #124	; 0x7c
1000a6ce:	2b05      	cmp	r3, #5
1000a6d0:	d1e7      	bne.n	1000a6a2 <ble_slave_security_request_handler+0xa2>
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
	features.bond = slave_sec_req->bond;
1000a6d2:	aa01      	add	r2, sp, #4
1000a6d4:	78e1      	ldrb	r1, [r4, #3]
1000a6d6:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = true;
1000a6d8:	2101      	movs	r1, #1
1000a6da:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = AT_BLE_IO_CAP_KB_DISPLAY;
1000a6dc:	3103      	adds	r1, #3
1000a6de:	7011      	strb	r1, [r2, #0]

	features.oob_avaiable = false;
			
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000a6e0:	001f      	movs	r7, r3
1000a6e2:	015a      	lsls	r2, r3, #5
1000a6e4:	1ad2      	subs	r2, r2, r3
1000a6e6:	0092      	lsls	r2, r2, #2
1000a6e8:	4936      	ldr	r1, [pc, #216]	; (1000a7c4 <ble_slave_security_request_handler+0x1c4>)
1000a6ea:	5c52      	ldrb	r2, [r2, r1]
1000a6ec:	2a02      	cmp	r2, #2
1000a6ee:	d104      	bne.n	1000a6fa <ble_slave_security_request_handler+0xfa>
	{
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000a6f0:	aa01      	add	r2, sp, #4
1000a6f2:	2103      	movs	r1, #3
1000a6f4:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000a6f6:	71d1      	strb	r1, [r2, #7]
1000a6f8:	e003      	b.n	1000a702 <ble_slave_security_request_handler+0x102>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000a6fa:	aa01      	add	r2, sp, #4
1000a6fc:	2101      	movs	r1, #1
1000a6fe:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000a700:	71d1      	strb	r1, [r2, #7]
	}
	features.max_key_size = 16;
1000a702:	aa01      	add	r2, sp, #4
1000a704:	2110      	movs	r1, #16
1000a706:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
1000a708:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000a70a:	017a      	lsls	r2, r7, #5
1000a70c:	1bd2      	subs	r2, r2, r7
1000a70e:	0092      	lsls	r2, r2, #2
1000a710:	492c      	ldr	r1, [pc, #176]	; (1000a7c4 <ble_slave_security_request_handler+0x1c4>)
1000a712:	188a      	adds	r2, r1, r2
1000a714:	7e12      	ldrb	r2, [r2, #24]
1000a716:	2a40      	cmp	r2, #64	; 0x40
1000a718:	d134      	bne.n	1000a784 <ble_slave_security_request_handler+0x184>
1000a71a:	015a      	lsls	r2, r3, #5
1000a71c:	1ad3      	subs	r3, r2, r3
1000a71e:	009b      	lsls	r3, r3, #2
1000a720:	469a      	mov	sl, r3
1000a722:	001e      	movs	r6, r3
1000a724:	3660      	adds	r6, #96	; 0x60
1000a726:	1876      	adds	r6, r6, r1
1000a728:	4655      	mov	r5, sl
1000a72a:	3568      	adds	r5, #104	; 0x68
1000a72c:	186d      	adds	r5, r5, r1
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000a72e:	4b2b      	ldr	r3, [pc, #172]	; (1000a7dc <ble_slave_security_request_handler+0x1dc>)
1000a730:	4699      	mov	r9, r3
1000a732:	230f      	movs	r3, #15
1000a734:	4698      	mov	r8, r3
1000a736:	47c8      	blx	r9
1000a738:	4643      	mov	r3, r8
1000a73a:	4018      	ands	r0, r3
1000a73c:	7030      	strb	r0, [r6, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000a73e:	47c8      	blx	r9
1000a740:	4643      	mov	r3, r8
1000a742:	4018      	ands	r0, r3
1000a744:	74b0      	strb	r0, [r6, #18]
1000a746:	3601      	adds	r6, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000a748:	42ae      	cmp	r6, r5
1000a74a:	d1f4      	bne.n	1000a736 <ble_slave_security_request_handler+0x136>
1000a74c:	4656      	mov	r6, sl
1000a74e:	3670      	adds	r6, #112	; 0x70
1000a750:	4a1c      	ldr	r2, [pc, #112]	; (1000a7c4 <ble_slave_security_request_handler+0x1c4>)
1000a752:	18b6      	adds	r6, r6, r2
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000a754:	4b21      	ldr	r3, [pc, #132]	; (1000a7dc <ble_slave_security_request_handler+0x1dc>)
1000a756:	4699      	mov	r9, r3
1000a758:	230f      	movs	r3, #15
1000a75a:	4698      	mov	r8, r3
1000a75c:	47c8      	blx	r9
1000a75e:	4643      	mov	r3, r8
1000a760:	4018      	ands	r0, r3
1000a762:	7028      	strb	r0, [r5, #0]
1000a764:	3501      	adds	r5, #1
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000a766:	42b5      	cmp	r5, r6
1000a768:	d1f8      	bne.n	1000a75c <ble_slave_security_request_handler+0x15c>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000a76a:	4b1c      	ldr	r3, [pc, #112]	; (1000a7dc <ble_slave_security_request_handler+0x1dc>)
1000a76c:	4798      	blx	r3
1000a76e:	017b      	lsls	r3, r7, #5
1000a770:	1bdb      	subs	r3, r3, r7
1000a772:	009b      	lsls	r3, r3, #2
1000a774:	4a13      	ldr	r2, [pc, #76]	; (1000a7c4 <ble_slave_security_request_handler+0x1c4>)
1000a776:	18d3      	adds	r3, r2, r3
1000a778:	001a      	movs	r2, r3
1000a77a:	3270      	adds	r2, #112	; 0x70
1000a77c:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000a77e:	337a      	adds	r3, #122	; 0x7a
1000a780:	2210      	movs	r2, #16
1000a782:	701a      	strb	r2, [r3, #0]
	{
		/* Bonding information already exists */
		
	}

	if(at_ble_authenticate(slave_sec_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000a784:	017a      	lsls	r2, r7, #5
1000a786:	1bd7      	subs	r7, r2, r7
1000a788:	00bf      	lsls	r7, r7, #2
1000a78a:	3760      	adds	r7, #96	; 0x60
1000a78c:	4a0d      	ldr	r2, [pc, #52]	; (1000a7c4 <ble_slave_security_request_handler+0x1c4>)
1000a78e:	18ba      	adds	r2, r7, r2
1000a790:	8820      	ldrh	r0, [r4, #0]
1000a792:	2300      	movs	r3, #0
1000a794:	a901      	add	r1, sp, #4
1000a796:	4c12      	ldr	r4, [pc, #72]	; (1000a7e0 <ble_slave_security_request_handler+0x1e0>)
1000a798:	47a0      	blx	r4
1000a79a:	2800      	cmp	r0, #0
1000a79c:	d00a      	beq.n	1000a7b4 <ble_slave_security_request_handler+0x1b4>
	{
		features.bond = false;
1000a79e:	ab01      	add	r3, sp, #4
1000a7a0:	2200      	movs	r2, #0
1000a7a2:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000a7a4:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Slave Security Req - Authentication Failed");
1000a7a6:	4809      	ldr	r0, [pc, #36]	; (1000a7cc <ble_slave_security_request_handler+0x1cc>)
1000a7a8:	4b09      	ldr	r3, [pc, #36]	; (1000a7d0 <ble_slave_security_request_handler+0x1d0>)
1000a7aa:	4798      	blx	r3
1000a7ac:	480d      	ldr	r0, [pc, #52]	; (1000a7e4 <ble_slave_security_request_handler+0x1e4>)
1000a7ae:	4b0a      	ldr	r3, [pc, #40]	; (1000a7d8 <ble_slave_security_request_handler+0x1d8>)
1000a7b0:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000a7b2:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000a7b4:	b004      	add	sp, #16
1000a7b6:	bc1c      	pop	{r2, r3, r4}
1000a7b8:	4690      	mov	r8, r2
1000a7ba:	4699      	mov	r9, r3
1000a7bc:	46a2      	mov	sl, r4
1000a7be:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a7c0:	10010435 	.word	0x10010435
1000a7c4:	1001474c 	.word	0x1001474c
1000a7c8:	1000d7f5 	.word	0x1000d7f5
1000a7cc:	100116bc 	.word	0x100116bc
1000a7d0:	10010565 	.word	0x10010565
1000a7d4:	100122ec 	.word	0x100122ec
1000a7d8:	10010445 	.word	0x10010445
1000a7dc:	10010579 	.word	0x10010579
1000a7e0:	1000d609 	.word	0x1000d609
1000a7e4:	10012304 	.word	0x10012304

1000a7e8 <ble_pair_request_handler>:

/** @brief function handles pair request */
at_ble_status_t ble_pair_request_handler(void *params)
{
1000a7e8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a7ea:	465f      	mov	r7, fp
1000a7ec:	4656      	mov	r6, sl
1000a7ee:	464d      	mov	r5, r9
1000a7f0:	4644      	mov	r4, r8
1000a7f2:	b4f0      	push	{r4, r5, r6, r7}
1000a7f4:	b085      	sub	sp, #20
1000a7f6:	4680      	mov	r8, r0
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000a7f8:	8804      	ldrh	r4, [r0, #0]
1000a7fa:	4a54      	ldr	r2, [pc, #336]	; (1000a94c <ble_pair_request_handler+0x164>)
1000a7fc:	2100      	movs	r1, #0
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a7fe:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000a800:	8910      	ldrh	r0, [r2, #8]
1000a802:	42a0      	cmp	r0, r4
1000a804:	d10d      	bne.n	1000a822 <ble_pair_request_handler+0x3a>
1000a806:	0010      	movs	r0, r2
1000a808:	305e      	adds	r0, #94	; 0x5e
1000a80a:	7800      	ldrb	r0, [r0, #0]
1000a80c:	2802      	cmp	r0, #2
1000a80e:	d108      	bne.n	1000a822 <ble_pair_request_handler+0x3a>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000a810:	014a      	lsls	r2, r1, #5
1000a812:	1a52      	subs	r2, r2, r1
1000a814:	0095      	lsls	r5, r2, #2
1000a816:	4a4d      	ldr	r2, [pc, #308]	; (1000a94c <ble_pair_request_handler+0x164>)
1000a818:	1952      	adds	r2, r2, r5
1000a81a:	325e      	adds	r2, #94	; 0x5e
1000a81c:	2103      	movs	r1, #3
1000a81e:	7011      	strb	r1, [r2, #0]
			break;
1000a820:	e005      	b.n	1000a82e <ble_pair_request_handler+0x46>
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a822:	3301      	adds	r3, #1
1000a824:	b2db      	uxtb	r3, r3
1000a826:	3101      	adds	r1, #1
1000a828:	327c      	adds	r2, #124	; 0x7c
1000a82a:	2b05      	cmp	r3, #5
1000a82c:	d1e8      	bne.n	1000a800 <ble_pair_request_handler+0x18>
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
1000a82e:	aa01      	add	r2, sp, #4
1000a830:	2100      	movs	r1, #0
1000a832:	7211      	strb	r1, [r2, #8]
	features.bond = BLE_BOND_REQ;
1000a834:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = BLE_MITM_REQ;
1000a836:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = BLE_IO_CAPABALITIES;
1000a838:	2003      	movs	r0, #3
1000a83a:	7010      	strb	r0, [r2, #0]
	features.oob_avaiable = BLE_OOB_REQ;
1000a83c:	70d1      	strb	r1, [r2, #3]
	
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000a83e:	001e      	movs	r6, r3
1000a840:	015a      	lsls	r2, r3, #5
1000a842:	1ad2      	subs	r2, r2, r3
1000a844:	0092      	lsls	r2, r2, #2
1000a846:	4941      	ldr	r1, [pc, #260]	; (1000a94c <ble_pair_request_handler+0x164>)
1000a848:	5c52      	ldrb	r2, [r2, r1]
1000a84a:	2a02      	cmp	r2, #2
1000a84c:	d104      	bne.n	1000a858 <ble_pair_request_handler+0x70>
	{
		/* Distribution of IRK is required */
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000a84e:	aa01      	add	r2, sp, #4
1000a850:	2103      	movs	r1, #3
1000a852:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000a854:	71d1      	strb	r1, [r2, #7]
1000a856:	e003      	b.n	1000a860 <ble_pair_request_handler+0x78>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000a858:	aa01      	add	r2, sp, #4
1000a85a:	2101      	movs	r1, #1
1000a85c:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000a85e:	71d1      	strb	r1, [r2, #7]
	}
			
	features.max_key_size = 16;
1000a860:	aa01      	add	r2, sp, #4
1000a862:	2110      	movs	r1, #16
1000a864:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
1000a866:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000a868:	0172      	lsls	r2, r6, #5
1000a86a:	1b92      	subs	r2, r2, r6
1000a86c:	0092      	lsls	r2, r2, #2
1000a86e:	4937      	ldr	r1, [pc, #220]	; (1000a94c <ble_pair_request_handler+0x164>)
1000a870:	188a      	adds	r2, r1, r2
1000a872:	7e12      	ldrb	r2, [r2, #24]
1000a874:	2a40      	cmp	r2, #64	; 0x40
1000a876:	d142      	bne.n	1000a8fe <ble_pair_request_handler+0x116>
1000a878:	015f      	lsls	r7, r3, #5
1000a87a:	1afb      	subs	r3, r7, r3
1000a87c:	009b      	lsls	r3, r3, #2
1000a87e:	469b      	mov	fp, r3
1000a880:	001c      	movs	r4, r3
1000a882:	3460      	adds	r4, #96	; 0x60
1000a884:	1864      	adds	r4, r4, r1
1000a886:	465d      	mov	r5, fp
1000a888:	3568      	adds	r5, #104	; 0x68
1000a88a:	186d      	adds	r5, r5, r1
1000a88c:	0027      	movs	r7, r4
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000a88e:	4b30      	ldr	r3, [pc, #192]	; (1000a950 <ble_pair_request_handler+0x168>)
1000a890:	469a      	mov	sl, r3
1000a892:	230f      	movs	r3, #15
1000a894:	4699      	mov	r9, r3
1000a896:	47d0      	blx	sl
1000a898:	464b      	mov	r3, r9
1000a89a:	4018      	ands	r0, r3
1000a89c:	7038      	strb	r0, [r7, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000a89e:	47d0      	blx	sl
1000a8a0:	464b      	mov	r3, r9
1000a8a2:	4018      	ands	r0, r3
1000a8a4:	74b8      	strb	r0, [r7, #18]
1000a8a6:	3701      	adds	r7, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000a8a8:	42af      	cmp	r7, r5
1000a8aa:	d1f4      	bne.n	1000a896 <ble_pair_request_handler+0xae>
1000a8ac:	465b      	mov	r3, fp
1000a8ae:	3370      	adds	r3, #112	; 0x70
1000a8b0:	4f26      	ldr	r7, [pc, #152]	; (1000a94c <ble_pair_request_handler+0x164>)
1000a8b2:	19df      	adds	r7, r3, r7
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000a8b4:	4b26      	ldr	r3, [pc, #152]	; (1000a950 <ble_pair_request_handler+0x168>)
1000a8b6:	469a      	mov	sl, r3
1000a8b8:	230f      	movs	r3, #15
1000a8ba:	4699      	mov	r9, r3
1000a8bc:	47d0      	blx	sl
1000a8be:	464b      	mov	r3, r9
1000a8c0:	4018      	ands	r0, r3
1000a8c2:	7028      	strb	r0, [r5, #0]
1000a8c4:	3501      	adds	r5, #1
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000a8c6:	42bd      	cmp	r5, r7
1000a8c8:	d1f8      	bne.n	1000a8bc <ble_pair_request_handler+0xd4>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		DBG_LOG_DEV("Generated LTK: ");
1000a8ca:	4822      	ldr	r0, [pc, #136]	; (1000a954 <ble_pair_request_handler+0x16c>)
1000a8cc:	4b22      	ldr	r3, [pc, #136]	; (1000a958 <ble_pair_request_handler+0x170>)
1000a8ce:	4798      	blx	r3
1000a8d0:	4822      	ldr	r0, [pc, #136]	; (1000a95c <ble_pair_request_handler+0x174>)
1000a8d2:	4b23      	ldr	r3, [pc, #140]	; (1000a960 <ble_pair_request_handler+0x178>)
1000a8d4:	4798      	blx	r3
		for (i = 0; i < 16; i++)
		{
			DBG_LOG_CONT_DEV("0x%02X ", ble_dev_info[idx].host_ltk.key[i]);
1000a8d6:	4d22      	ldr	r5, [pc, #136]	; (1000a960 <ble_pair_request_handler+0x178>)
1000a8d8:	7821      	ldrb	r1, [r4, #0]
1000a8da:	4822      	ldr	r0, [pc, #136]	; (1000a964 <ble_pair_request_handler+0x17c>)
1000a8dc:	47a8      	blx	r5
1000a8de:	3401      	adds	r4, #1
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		DBG_LOG_DEV("Generated LTK: ");
		for (i = 0; i < 16; i++)
1000a8e0:	42bc      	cmp	r4, r7
1000a8e2:	d1f9      	bne.n	1000a8d8 <ble_pair_request_handler+0xf0>
		{
			DBG_LOG_CONT_DEV("0x%02X ", ble_dev_info[idx].host_ltk.key[i]);
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000a8e4:	4b1a      	ldr	r3, [pc, #104]	; (1000a950 <ble_pair_request_handler+0x168>)
1000a8e6:	4798      	blx	r3
1000a8e8:	0173      	lsls	r3, r6, #5
1000a8ea:	1b9b      	subs	r3, r3, r6
1000a8ec:	009b      	lsls	r3, r3, #2
1000a8ee:	4a17      	ldr	r2, [pc, #92]	; (1000a94c <ble_pair_request_handler+0x164>)
1000a8f0:	18d3      	adds	r3, r2, r3
1000a8f2:	001a      	movs	r2, r3
1000a8f4:	3270      	adds	r2, #112	; 0x70
1000a8f6:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000a8f8:	337a      	adds	r3, #122	; 0x7a
1000a8fa:	2210      	movs	r2, #16
1000a8fc:	701a      	strb	r2, [r3, #0]
		/* Bonding information already exists */
		
	}

	/* Send pairing response */
	DBG_LOG_DEV("Sending pairing response");
1000a8fe:	4815      	ldr	r0, [pc, #84]	; (1000a954 <ble_pair_request_handler+0x16c>)
1000a900:	4b15      	ldr	r3, [pc, #84]	; (1000a958 <ble_pair_request_handler+0x170>)
1000a902:	4798      	blx	r3
1000a904:	4818      	ldr	r0, [pc, #96]	; (1000a968 <ble_pair_request_handler+0x180>)
1000a906:	4b16      	ldr	r3, [pc, #88]	; (1000a960 <ble_pair_request_handler+0x178>)
1000a908:	4798      	blx	r3

	if(at_ble_authenticate(pair_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000a90a:	0173      	lsls	r3, r6, #5
1000a90c:	1b9b      	subs	r3, r3, r6
1000a90e:	009b      	lsls	r3, r3, #2
1000a910:	3360      	adds	r3, #96	; 0x60
1000a912:	4a0e      	ldr	r2, [pc, #56]	; (1000a94c <ble_pair_request_handler+0x164>)
1000a914:	189a      	adds	r2, r3, r2
1000a916:	4643      	mov	r3, r8
1000a918:	8818      	ldrh	r0, [r3, #0]
1000a91a:	2300      	movs	r3, #0
1000a91c:	a901      	add	r1, sp, #4
1000a91e:	4c13      	ldr	r4, [pc, #76]	; (1000a96c <ble_pair_request_handler+0x184>)
1000a920:	47a0      	blx	r4
1000a922:	2800      	cmp	r0, #0
1000a924:	d00a      	beq.n	1000a93c <ble_pair_request_handler+0x154>
	{
		features.bond = false;
1000a926:	ab01      	add	r3, sp, #4
1000a928:	2200      	movs	r2, #0
1000a92a:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000a92c:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Pair Request - Authentication Failed");
1000a92e:	4809      	ldr	r0, [pc, #36]	; (1000a954 <ble_pair_request_handler+0x16c>)
1000a930:	4b09      	ldr	r3, [pc, #36]	; (1000a958 <ble_pair_request_handler+0x170>)
1000a932:	4798      	blx	r3
1000a934:	480e      	ldr	r0, [pc, #56]	; (1000a970 <ble_pair_request_handler+0x188>)
1000a936:	4b0a      	ldr	r3, [pc, #40]	; (1000a960 <ble_pair_request_handler+0x178>)
1000a938:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000a93a:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000a93c:	b005      	add	sp, #20
1000a93e:	bc3c      	pop	{r2, r3, r4, r5}
1000a940:	4690      	mov	r8, r2
1000a942:	4699      	mov	r9, r3
1000a944:	46a2      	mov	sl, r4
1000a946:	46ab      	mov	fp, r5
1000a948:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a94a:	46c0      	nop			; (mov r8, r8)
1000a94c:	1001474c 	.word	0x1001474c
1000a950:	10010579 	.word	0x10010579
1000a954:	100116bc 	.word	0x100116bc
1000a958:	10010565 	.word	0x10010565
1000a95c:	10012330 	.word	0x10012330
1000a960:	10010445 	.word	0x10010445
1000a964:	10012340 	.word	0x10012340
1000a968:	10012348 	.word	0x10012348
1000a96c:	1000d609 	.word	0x1000d609
1000a970:	10012364 	.word	0x10012364

1000a974 <ble_pair_key_request_handler>:

/** @brief function handles pair key request */
at_ble_status_t ble_pair_key_request_handler (void *params)
{
1000a974:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a976:	b085      	sub	sp, #20
1000a978:	0005      	movs	r5, r0
	at_ble_pair_key_request_t *pair_key;
	pair_key = (at_ble_pair_key_request_t *)params;
	/* Passkey has fixed value in this example MSB */
	uint8_t passkey[6]={'1','2','3','4','5','6'};
1000a97a:	2206      	movs	r2, #6
1000a97c:	493d      	ldr	r1, [pc, #244]	; (1000aa74 <ble_pair_key_request_handler+0x100>)
1000a97e:	a802      	add	r0, sp, #8
1000a980:	4e3d      	ldr	r6, [pc, #244]	; (1000aa78 <ble_pair_key_request_handler+0x104>)
1000a982:	47b0      	blx	r6
	uint8_t idx = 0;
        uint8_t pin;
        
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
1000a984:	ac01      	add	r4, sp, #4
1000a986:	2204      	movs	r2, #4
1000a988:	0029      	movs	r1, r5
1000a98a:	0020      	movs	r0, r4
1000a98c:	47b0      	blx	r6
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
1000a98e:	78e3      	ldrb	r3, [r4, #3]
1000a990:	2b00      	cmp	r3, #0
1000a992:	d162      	bne.n	1000aa5a <ble_pair_key_request_handler+0xe6>
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000a994:	4839      	ldr	r0, [pc, #228]	; (1000aa7c <ble_pair_key_request_handler+0x108>)
1000a996:	4b3a      	ldr	r3, [pc, #232]	; (1000aa80 <ble_pair_key_request_handler+0x10c>)
1000a998:	4798      	blx	r3
1000a99a:	483a      	ldr	r0, [pc, #232]	; (1000aa84 <ble_pair_key_request_handler+0x110>)
1000a99c:	4b3a      	ldr	r3, [pc, #232]	; (1000aa88 <ble_pair_key_request_handler+0x114>)
1000a99e:	4798      	blx	r3
1000a9a0:	2600      	movs	r6, #0
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000a9a2:	4c3a      	ldr	r4, [pc, #232]	; (1000aa8c <ble_pair_key_request_handler+0x118>)
				return AT_BLE_FAILURE;
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
			  passkey[idx++] = pin;
			  DBG_LOG_CONT("%c", pin);
1000a9a4:	27ff      	movs	r7, #255	; 0xff
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000a9a6:	201e      	movs	r0, #30
1000a9a8:	47a0      	blx	r4
1000a9aa:	b2c3      	uxtb	r3, r0

			if (!pin) {
1000a9ac:	2b00      	cmp	r3, #0
1000a9ae:	d11a      	bne.n	1000a9e6 <ble_pair_key_request_handler+0x72>
			DBG_LOG("Pin Timeout");
1000a9b0:	4f32      	ldr	r7, [pc, #200]	; (1000aa7c <ble_pair_key_request_handler+0x108>)
1000a9b2:	0038      	movs	r0, r7
1000a9b4:	4e32      	ldr	r6, [pc, #200]	; (1000aa80 <ble_pair_key_request_handler+0x10c>)
1000a9b6:	47b0      	blx	r6
1000a9b8:	4835      	ldr	r0, [pc, #212]	; (1000aa90 <ble_pair_key_request_handler+0x11c>)
1000a9ba:	4c33      	ldr	r4, [pc, #204]	; (1000aa88 <ble_pair_key_request_handler+0x114>)
1000a9bc:	47a0      	blx	r4
				DBG_LOG("Disconnecting ...");
1000a9be:	0038      	movs	r0, r7
1000a9c0:	47b0      	blx	r6
1000a9c2:	4834      	ldr	r0, [pc, #208]	; (1000aa94 <ble_pair_key_request_handler+0x120>)
1000a9c4:	47a0      	blx	r4
				if (!(at_ble_disconnect(pair_key->handle,
1000a9c6:	8828      	ldrh	r0, [r5, #0]
1000a9c8:	2113      	movs	r1, #19
1000a9ca:	4b33      	ldr	r3, [pc, #204]	; (1000aa98 <ble_pair_key_request_handler+0x124>)
1000a9cc:	4798      	blx	r3
1000a9ce:	0003      	movs	r3, r0
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
				}
				return AT_BLE_FAILURE;
1000a9d0:	20e2      	movs	r0, #226	; 0xe2
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);

			if (!pin) {
			DBG_LOG("Pin Timeout");
				DBG_LOG("Disconnecting ...");
				if (!(at_ble_disconnect(pair_key->handle,
1000a9d2:	2b00      	cmp	r3, #0
1000a9d4:	d04c      	beq.n	1000aa70 <ble_pair_key_request_handler+0xfc>
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
1000a9d6:	4829      	ldr	r0, [pc, #164]	; (1000aa7c <ble_pair_key_request_handler+0x108>)
1000a9d8:	4b29      	ldr	r3, [pc, #164]	; (1000aa80 <ble_pair_key_request_handler+0x10c>)
1000a9da:	4798      	blx	r3
1000a9dc:	482f      	ldr	r0, [pc, #188]	; (1000aa9c <ble_pair_key_request_handler+0x128>)
1000a9de:	4b2a      	ldr	r3, [pc, #168]	; (1000aa88 <ble_pair_key_request_handler+0x114>)
1000a9e0:	4798      	blx	r3
				}
				return AT_BLE_FAILURE;
1000a9e2:	20e2      	movs	r0, #226	; 0xe2
1000a9e4:	e044      	b.n	1000aa70 <ble_pair_key_request_handler+0xfc>
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
1000a9e6:	001a      	movs	r2, r3
1000a9e8:	3a30      	subs	r2, #48	; 0x30
1000a9ea:	2a09      	cmp	r2, #9
1000a9ec:	d8db      	bhi.n	1000a9a6 <ble_pair_key_request_handler+0x32>
			  passkey[idx++] = pin;
1000a9ee:	aa02      	add	r2, sp, #8
1000a9f0:	54b3      	strb	r3, [r6, r2]
			  DBG_LOG_CONT("%c", pin);
1000a9f2:	4038      	ands	r0, r7
1000a9f4:	4b2a      	ldr	r3, [pc, #168]	; (1000aaa0 <ble_pair_key_request_handler+0x12c>)
1000a9f6:	4798      	blx	r3
1000a9f8:	3601      	adds	r6, #1
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
1000a9fa:	2e06      	cmp	r6, #6
1000a9fc:	d026      	beq.n	1000aa4c <ble_pair_key_request_handler+0xd8>
1000a9fe:	e7d2      	b.n	1000a9a6 <ble_pair_key_request_handler+0x32>
          {
            DBG_LOG("Entered Pass-code:");
          }
          else
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
1000aa00:	481e      	ldr	r0, [pc, #120]	; (1000aa7c <ble_pair_key_request_handler+0x108>)
1000aa02:	4b1f      	ldr	r3, [pc, #124]	; (1000aa80 <ble_pair_key_request_handler+0x10c>)
1000aa04:	4798      	blx	r3
1000aa06:	4827      	ldr	r0, [pc, #156]	; (1000aaa4 <ble_pair_key_request_handler+0x130>)
1000aa08:	4b1f      	ldr	r3, [pc, #124]	; (1000aa88 <ble_pair_key_request_handler+0x114>)
1000aa0a:	4798      	blx	r3
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000aa0c:	2400      	movs	r4, #0
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
1000aa0e:	4e24      	ldr	r6, [pc, #144]	; (1000aaa0 <ble_pair_key_request_handler+0x12c>)
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
1000aa10:	ab02      	add	r3, sp, #8
                  DBG_LOG_CONT("%c",passkey[idx]);
1000aa12:	5ce0      	ldrb	r0, [r4, r3]
1000aa14:	47b0      	blx	r6
1000aa16:	3401      	adds	r4, #1
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
1000aa18:	2c06      	cmp	r4, #6
1000aa1a:	d1f9      	bne.n	1000aa10 <ble_pair_key_request_handler+0x9c>
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
          }		
          
          if(!((at_ble_pair_key_reply(pair_key->handle, pair_key_request.type, passkey)) == AT_BLE_SUCCESS))
1000aa1c:	ab01      	add	r3, sp, #4
1000aa1e:	7899      	ldrb	r1, [r3, #2]
1000aa20:	8828      	ldrh	r0, [r5, #0]
1000aa22:	aa02      	add	r2, sp, #8
1000aa24:	4b20      	ldr	r3, [pc, #128]	; (1000aaa8 <ble_pair_key_request_handler+0x134>)
1000aa26:	4798      	blx	r3
1000aa28:	2800      	cmp	r0, #0
1000aa2a:	d021      	beq.n	1000aa70 <ble_pair_key_request_handler+0xfc>
          {
                  DBG_LOG("Pair-key reply failed");
1000aa2c:	4813      	ldr	r0, [pc, #76]	; (1000aa7c <ble_pair_key_request_handler+0x108>)
1000aa2e:	4b14      	ldr	r3, [pc, #80]	; (1000aa80 <ble_pair_key_request_handler+0x10c>)
1000aa30:	4798      	blx	r3
1000aa32:	481e      	ldr	r0, [pc, #120]	; (1000aaac <ble_pair_key_request_handler+0x138>)
1000aa34:	4b14      	ldr	r3, [pc, #80]	; (1000aa88 <ble_pair_key_request_handler+0x114>)
1000aa36:	4798      	blx	r3
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000aa38:	2000      	movs	r0, #0
1000aa3a:	e019      	b.n	1000aa70 <ble_pair_key_request_handler+0xfc>
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
1000aa3c:	480f      	ldr	r0, [pc, #60]	; (1000aa7c <ble_pair_key_request_handler+0x108>)
1000aa3e:	4b10      	ldr	r3, [pc, #64]	; (1000aa80 <ble_pair_key_request_handler+0x10c>)
1000aa40:	4798      	blx	r3
1000aa42:	481b      	ldr	r0, [pc, #108]	; (1000aab0 <ble_pair_key_request_handler+0x13c>)
1000aa44:	4b10      	ldr	r3, [pc, #64]	; (1000aa88 <ble_pair_key_request_handler+0x114>)
1000aa46:	4798      	blx	r3
		}
	}
	return AT_BLE_SUCCESS;	
1000aa48:	2000      	movs	r0, #0
1000aa4a:	e011      	b.n	1000aa70 <ble_pair_key_request_handler+0xfc>
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
	   (pair_key_request.type == AT_BLE_PAIR_PASSKEY)) || (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY))
	{
          if(pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY)
          {
            DBG_LOG("Entered Pass-code:");
1000aa4c:	480b      	ldr	r0, [pc, #44]	; (1000aa7c <ble_pair_key_request_handler+0x108>)
1000aa4e:	4b0c      	ldr	r3, [pc, #48]	; (1000aa80 <ble_pair_key_request_handler+0x10c>)
1000aa50:	4798      	blx	r3
1000aa52:	4818      	ldr	r0, [pc, #96]	; (1000aab4 <ble_pair_key_request_handler+0x140>)
1000aa54:	4b0c      	ldr	r3, [pc, #48]	; (1000aa88 <ble_pair_key_request_handler+0x114>)
1000aa56:	4798      	blx	r3
1000aa58:	e7d8      	b.n	1000aa0c <ble_pair_key_request_handler+0x98>
			} 
	  }
	}	
	
	/* Display passkey */
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
1000aa5a:	ab01      	add	r3, sp, #4
1000aa5c:	885a      	ldrh	r2, [r3, #2]
1000aa5e:	2380      	movs	r3, #128	; 0x80
1000aa60:	005b      	lsls	r3, r3, #1
1000aa62:	429a      	cmp	r2, r3
1000aa64:	d0cc      	beq.n	1000aa00 <ble_pair_key_request_handler+0x8c>
                  DBG_LOG("Pair-key reply failed");
          }
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
1000aa66:	ab01      	add	r3, sp, #4
1000aa68:	789b      	ldrb	r3, [r3, #2]
1000aa6a:	2b01      	cmp	r3, #1
1000aa6c:	d0e6      	beq.n	1000aa3c <ble_pair_key_request_handler+0xc8>
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000aa6e:	2000      	movs	r0, #0
}
1000aa70:	b005      	add	sp, #20
1000aa72:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000aa74:	10011f54 	.word	0x10011f54
1000aa78:	10010423 	.word	0x10010423
1000aa7c:	100116bc 	.word	0x100116bc
1000aa80:	10010565 	.word	0x10010565
1000aa84:	1001238c 	.word	0x1001238c
1000aa88:	10010445 	.word	0x10010445
1000aa8c:	1000baa5 	.word	0x1000baa5
1000aa90:	100123b4 	.word	0x100123b4
1000aa94:	100123c0 	.word	0x100123c0
1000aa98:	1000d1cd 	.word	0x1000d1cd
1000aa9c:	1001226c 	.word	0x1001226c
1000aaa0:	10010479 	.word	0x10010479
1000aaa4:	100123d4 	.word	0x100123d4
1000aaa8:	1000d739 	.word	0x1000d739
1000aaac:	1001240c 	.word	0x1001240c
1000aab0:	10012424 	.word	0x10012424
1000aab4:	10012440 	.word	0x10012440

1000aab8 <ble_encryption_request_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption requests */
at_ble_status_t ble_encryption_request_handler(void *params)
{
1000aab8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000aaba:	465f      	mov	r7, fp
1000aabc:	4656      	mov	r6, sl
1000aabe:	464d      	mov	r5, r9
1000aac0:	b4e0      	push	{r5, r6, r7}
1000aac2:	0006      	movs	r6, r0
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000aac4:	8800      	ldrh	r0, [r0, #0]
1000aac6:	4b49      	ldr	r3, [pc, #292]	; (1000abec <ble_encryption_request_handler+0x134>)
1000aac8:	2200      	movs	r2, #0
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000aaca:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000aacc:	8919      	ldrh	r1, [r3, #8]
1000aace:	4281      	cmp	r1, r0
1000aad0:	d137      	bne.n	1000ab42 <ble_encryption_request_handler+0x8a>
1000aad2:	0019      	movs	r1, r3
1000aad4:	315e      	adds	r1, #94	; 0x5e
1000aad6:	7809      	ldrb	r1, [r1, #0]
1000aad8:	2901      	cmp	r1, #1
1000aada:	d932      	bls.n	1000ab42 <ble_encryption_request_handler+0x8a>
		(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE))
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000aadc:	4f43      	ldr	r7, [pc, #268]	; (1000abec <ble_encryption_request_handler+0x134>)
1000aade:	0153      	lsls	r3, r2, #5
1000aae0:	1a9d      	subs	r5, r3, r2
1000aae2:	00ad      	lsls	r5, r5, #2
1000aae4:	197d      	adds	r5, r7, r5
1000aae6:	355e      	adds	r5, #94	; 0x5e
1000aae8:	2306      	movs	r3, #6
1000aaea:	702b      	strb	r3, [r5, #0]
			DBG_LOG_DEV("ENC-Req: Conn Handle Device Found:hdl:%d", enc_req->handle);
1000aaec:	4840      	ldr	r0, [pc, #256]	; (1000abf0 <ble_encryption_request_handler+0x138>)
1000aaee:	4b41      	ldr	r3, [pc, #260]	; (1000abf4 <ble_encryption_request_handler+0x13c>)
1000aaf0:	469a      	mov	sl, r3
1000aaf2:	4798      	blx	r3
1000aaf4:	8831      	ldrh	r1, [r6, #0]
1000aaf6:	4840      	ldr	r0, [pc, #256]	; (1000abf8 <ble_encryption_request_handler+0x140>)
1000aaf8:	4b40      	ldr	r3, [pc, #256]	; (1000abfc <ble_encryption_request_handler+0x144>)
1000aafa:	4699      	mov	r9, r3
1000aafc:	4798      	blx	r3
		}
	}
	
	if (device_found)
	{
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
1000aafe:	483c      	ldr	r0, [pc, #240]	; (1000abf0 <ble_encryption_request_handler+0x138>)
1000ab00:	47d0      	blx	sl
1000ab02:	0163      	lsls	r3, r4, #5
1000ab04:	1b1b      	subs	r3, r3, r4
1000ab06:	009b      	lsls	r3, r3, #2
1000ab08:	18ff      	adds	r7, r7, r3
1000ab0a:	2370      	movs	r3, #112	; 0x70
1000ab0c:	469b      	mov	fp, r3
1000ab0e:	44bb      	add	fp, r7
1000ab10:	465b      	mov	r3, fp
1000ab12:	8819      	ldrh	r1, [r3, #0]
1000ab14:	483a      	ldr	r0, [pc, #232]	; (1000ac00 <ble_encryption_request_handler+0x148>)
1000ab16:	47c8      	blx	r9
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
1000ab18:	4835      	ldr	r0, [pc, #212]	; (1000abf0 <ble_encryption_request_handler+0x138>)
1000ab1a:	47d0      	blx	sl
1000ab1c:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
1000ab1e:	4839      	ldr	r0, [pc, #228]	; (1000ac04 <ble_encryption_request_handler+0x14c>)
1000ab20:	47c8      	blx	r9
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
1000ab22:	4833      	ldr	r0, [pc, #204]	; (1000abf0 <ble_encryption_request_handler+0x138>)
1000ab24:	47d0      	blx	sl
1000ab26:	8871      	ldrh	r1, [r6, #2]
1000ab28:	4837      	ldr	r0, [pc, #220]	; (1000ac08 <ble_encryption_request_handler+0x150>)
1000ab2a:	47c8      	blx	r9
		DBG_LOG_DEV("The index is %d",idx);
1000ab2c:	4830      	ldr	r0, [pc, #192]	; (1000abf0 <ble_encryption_request_handler+0x138>)
1000ab2e:	47d0      	blx	sl
1000ab30:	0021      	movs	r1, r4
1000ab32:	4836      	ldr	r0, [pc, #216]	; (1000ac0c <ble_encryption_request_handler+0x154>)
1000ab34:	47c8      	blx	r9
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
1000ab36:	465b      	mov	r3, fp
1000ab38:	881a      	ldrh	r2, [r3, #0]
1000ab3a:	8873      	ldrh	r3, [r6, #2]
1000ab3c:	429a      	cmp	r2, r3
1000ab3e:	d12a      	bne.n	1000ab96 <ble_encryption_request_handler+0xde>
1000ab40:	e006      	b.n	1000ab50 <ble_encryption_request_handler+0x98>
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000ab42:	3401      	adds	r4, #1
1000ab44:	b2e4      	uxtb	r4, r4
1000ab46:	3201      	adds	r2, #1
1000ab48:	337c      	adds	r3, #124	; 0x7c
1000ab4a:	2c05      	cmp	r4, #5
1000ab4c:	d1be      	bne.n	1000aacc <ble_encryption_request_handler+0x14>
1000ab4e:	e022      	b.n	1000ab96 <ble_encryption_request_handler+0xde>
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
		DBG_LOG_DEV("The index is %d",idx);
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
		&& !memcmp(&enc_req->nb[0],&ble_dev_info[idx].host_ltk.nb[0],8))
1000ab50:	0161      	lsls	r1, r4, #5
1000ab52:	1b09      	subs	r1, r1, r4
1000ab54:	0089      	lsls	r1, r1, #2
1000ab56:	4b25      	ldr	r3, [pc, #148]	; (1000abec <ble_encryption_request_handler+0x134>)
1000ab58:	1859      	adds	r1, r3, r1
1000ab5a:	3172      	adds	r1, #114	; 0x72
1000ab5c:	1d30      	adds	r0, r6, #4
1000ab5e:	2208      	movs	r2, #8
1000ab60:	4b2b      	ldr	r3, [pc, #172]	; (1000ac10 <ble_encryption_request_handler+0x158>)
1000ab62:	4798      	blx	r3
1000ab64:	2800      	cmp	r0, #0
1000ab66:	d116      	bne.n	1000ab96 <ble_encryption_request_handler+0xde>
		{
			key_found = true;
			DBG_LOG_DEV("ENC-Req: Key Found");
1000ab68:	4821      	ldr	r0, [pc, #132]	; (1000abf0 <ble_encryption_request_handler+0x138>)
1000ab6a:	4b22      	ldr	r3, [pc, #136]	; (1000abf4 <ble_encryption_request_handler+0x13c>)
1000ab6c:	4798      	blx	r3
1000ab6e:	4829      	ldr	r0, [pc, #164]	; (1000ac14 <ble_encryption_request_handler+0x15c>)
1000ab70:	4b22      	ldr	r3, [pc, #136]	; (1000abfc <ble_encryption_request_handler+0x144>)
1000ab72:	4798      	blx	r3
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
		return AT_BLE_FAILURE;
    }

	if(!(at_ble_encryption_request_reply(enc_req->handle, ble_dev_info[idx].bond_info.auth, key_found, &ble_dev_info[idx].host_ltk) == AT_BLE_SUCCESS))
1000ab74:	0162      	lsls	r2, r4, #5
1000ab76:	1b13      	subs	r3, r2, r4
1000ab78:	009b      	lsls	r3, r3, #2
1000ab7a:	3360      	adds	r3, #96	; 0x60
1000ab7c:	491b      	ldr	r1, [pc, #108]	; (1000abec <ble_encryption_request_handler+0x134>)
1000ab7e:	185b      	adds	r3, r3, r1
1000ab80:	1b12      	subs	r2, r2, r4
1000ab82:	0092      	lsls	r2, r2, #2
1000ab84:	188a      	adds	r2, r1, r2
1000ab86:	7d11      	ldrb	r1, [r2, #20]
1000ab88:	8830      	ldrh	r0, [r6, #0]
1000ab8a:	2201      	movs	r2, #1
1000ab8c:	4c22      	ldr	r4, [pc, #136]	; (1000ac18 <ble_encryption_request_handler+0x160>)
1000ab8e:	47a0      	blx	r4
1000ab90:	1e04      	subs	r4, r0, #0
1000ab92:	d01e      	beq.n	1000abd2 <ble_encryption_request_handler+0x11a>
1000ab94:	e015      	b.n	1000abc2 <ble_encryption_request_handler+0x10a>
	}
	
	
    if(key_found == false)
    {
	    DBG_LOG("Pairing information of peer device is not available.");
1000ab96:	4f16      	ldr	r7, [pc, #88]	; (1000abf0 <ble_encryption_request_handler+0x138>)
1000ab98:	0038      	movs	r0, r7
1000ab9a:	4e16      	ldr	r6, [pc, #88]	; (1000abf4 <ble_encryption_request_handler+0x13c>)
1000ab9c:	47b0      	blx	r6
1000ab9e:	481f      	ldr	r0, [pc, #124]	; (1000ac1c <ble_encryption_request_handler+0x164>)
1000aba0:	4d16      	ldr	r5, [pc, #88]	; (1000abfc <ble_encryption_request_handler+0x144>)
1000aba2:	47a8      	blx	r5
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
1000aba4:	0038      	movs	r0, r7
1000aba6:	47b0      	blx	r6
1000aba8:	481d      	ldr	r0, [pc, #116]	; (1000ac20 <ble_encryption_request_handler+0x168>)
1000abaa:	47a8      	blx	r5
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
1000abac:	0163      	lsls	r3, r4, #5
1000abae:	1b1c      	subs	r4, r3, r4
1000abb0:	00a4      	lsls	r4, r4, #2
1000abb2:	4b0e      	ldr	r3, [pc, #56]	; (1000abec <ble_encryption_request_handler+0x134>)
1000abb4:	191c      	adds	r4, r3, r4
1000abb6:	8920      	ldrh	r0, [r4, #8]
1000abb8:	2105      	movs	r1, #5
1000abba:	4b1a      	ldr	r3, [pc, #104]	; (1000ac24 <ble_encryption_request_handler+0x16c>)
1000abbc:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000abbe:	24e2      	movs	r4, #226	; 0xe2
1000abc0:	e00d      	b.n	1000abde <ble_encryption_request_handler+0x126>
    }

	if(!(at_ble_encryption_request_reply(enc_req->handle, ble_dev_info[idx].bond_info.auth, key_found, &ble_dev_info[idx].host_ltk) == AT_BLE_SUCCESS))
	{
		DBG_LOG("Encryption Request Reply Failed");
1000abc2:	480b      	ldr	r0, [pc, #44]	; (1000abf0 <ble_encryption_request_handler+0x138>)
1000abc4:	4b0b      	ldr	r3, [pc, #44]	; (1000abf4 <ble_encryption_request_handler+0x13c>)
1000abc6:	4798      	blx	r3
1000abc8:	4817      	ldr	r0, [pc, #92]	; (1000ac28 <ble_encryption_request_handler+0x170>)
1000abca:	4b0c      	ldr	r3, [pc, #48]	; (1000abfc <ble_encryption_request_handler+0x144>)
1000abcc:	4798      	blx	r3
	}
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
	}
	return AT_BLE_SUCCESS;
1000abce:	2400      	movs	r4, #0
1000abd0:	e005      	b.n	1000abde <ble_encryption_request_handler+0x126>
	{
		DBG_LOG("Encryption Request Reply Failed");
	}
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
1000abd2:	4807      	ldr	r0, [pc, #28]	; (1000abf0 <ble_encryption_request_handler+0x138>)
1000abd4:	4b07      	ldr	r3, [pc, #28]	; (1000abf4 <ble_encryption_request_handler+0x13c>)
1000abd6:	4798      	blx	r3
1000abd8:	4814      	ldr	r0, [pc, #80]	; (1000ac2c <ble_encryption_request_handler+0x174>)
1000abda:	4b08      	ldr	r3, [pc, #32]	; (1000abfc <ble_encryption_request_handler+0x144>)
1000abdc:	4798      	blx	r3
	}
	return AT_BLE_SUCCESS;
}
1000abde:	0020      	movs	r0, r4
1000abe0:	bc1c      	pop	{r2, r3, r4}
1000abe2:	4691      	mov	r9, r2
1000abe4:	469a      	mov	sl, r3
1000abe6:	46a3      	mov	fp, r4
1000abe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000abea:	46c0      	nop			; (mov r8, r8)
1000abec:	1001474c 	.word	0x1001474c
1000abf0:	100116bc 	.word	0x100116bc
1000abf4:	10010565 	.word	0x10010565
1000abf8:	10012454 	.word	0x10012454
1000abfc:	10010445 	.word	0x10010445
1000ac00:	10012480 	.word	0x10012480
1000ac04:	10012494 	.word	0x10012494
1000ac08:	100124a8 	.word	0x100124a8
1000ac0c:	100124b8 	.word	0x100124b8
1000ac10:	10010405 	.word	0x10010405
1000ac14:	100124c8 	.word	0x100124c8
1000ac18:	1000d86d 	.word	0x1000d86d
1000ac1c:	100124dc 	.word	0x100124dc
1000ac20:	10012514 	.word	0x10012514
1000ac24:	1000d1cd 	.word	0x1000d1cd
1000ac28:	1001256c 	.word	0x1001256c
1000ac2c:	1001258c 	.word	0x1001258c

1000ac30 <ble_mgr_events_callback_handler>:
}

bool ble_mgr_events_callback_handler(ble_mgr_event_cb_t event_cb_type, 
									ble_mgr_event_t event_type,
									const ble_event_callback_t *ble_event_handler)
{
1000ac30:	b530      	push	{r4, r5, lr}
	uint8_t idx;
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
1000ac32:	2a00      	cmp	r2, #0
1000ac34:	d047      	beq.n	1000acc6 <ble_mgr_events_callback_handler+0x96>
	{
		switch(event_type)
1000ac36:	2906      	cmp	r1, #6
1000ac38:	d847      	bhi.n	1000acca <ble_mgr_events_callback_handler+0x9a>
1000ac3a:	0089      	lsls	r1, r1, #2
1000ac3c:	4b28      	ldr	r3, [pc, #160]	; (1000ace0 <ble_mgr_events_callback_handler+0xb0>)
1000ac3e:	585b      	ldr	r3, [r3, r1]
1000ac40:	469f      	mov	pc, r3
			}
			break;
			
			case BLE_GATT_SERVER_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_server_event_cb;
1000ac42:	4b28      	ldr	r3, [pc, #160]	; (1000ace4 <ble_mgr_events_callback_handler+0xb4>)
				max_event_handler = MAX_GATT_SERVER_SUBSCRIBERS;
1000ac44:	2405      	movs	r4, #5
1000ac46:	e00a      	b.n	1000ac5e <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_GATT_HTPT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_htpt_event_cb;
1000ac48:	4b27      	ldr	r3, [pc, #156]	; (1000ace8 <ble_mgr_events_callback_handler+0xb8>)
				max_event_handler = MAX_HTPT_EVENT_SUBSCRIBERS;
1000ac4a:	2401      	movs	r4, #1
			}
			break;
1000ac4c:	e007      	b.n	1000ac5e <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_DTM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_dtm_event_cb;
1000ac4e:	4b27      	ldr	r3, [pc, #156]	; (1000acec <ble_mgr_events_callback_handler+0xbc>)
				max_event_handler = MAX_DTM_EVENT_SUBSCRIBERS;
1000ac50:	2405      	movs	r4, #5
			}
			break;
1000ac52:	e004      	b.n	1000ac5e <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_CUSTOM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_custom_event_cb;
1000ac54:	4b26      	ldr	r3, [pc, #152]	; (1000acf0 <ble_mgr_events_callback_handler+0xc0>)
				max_event_handler = MAX_CUSTOM_EVENT_SUBSCRIBERS;
1000ac56:	2401      	movs	r4, #1
			}
			break;
1000ac58:	e001      	b.n	1000ac5e <ble_mgr_events_callback_handler+0x2e>
	{
		switch(event_type)
		{
			case BLE_GAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gap_event_cb;
1000ac5a:	4b26      	ldr	r3, [pc, #152]	; (1000acf4 <ble_mgr_events_callback_handler+0xc4>)
				max_event_handler = MAX_GAP_EVENT_SUBSCRIBERS;
1000ac5c:	2405      	movs	r4, #5
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
1000ac5e:	2800      	cmp	r0, #0
1000ac60:	d116      	bne.n	1000ac90 <ble_mgr_events_callback_handler+0x60>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000ac62:	6819      	ldr	r1, [r3, #0]
1000ac64:	2900      	cmp	r1, #0
1000ac66:	d10b      	bne.n	1000ac80 <ble_mgr_events_callback_handler+0x50>
1000ac68:	e006      	b.n	1000ac78 <ble_mgr_events_callback_handler+0x48>
1000ac6a:	001d      	movs	r5, r3
1000ac6c:	3304      	adds	r3, #4
1000ac6e:	1f18      	subs	r0, r3, #4
1000ac70:	6800      	ldr	r0, [r0, #0]
1000ac72:	2800      	cmp	r0, #0
1000ac74:	d106      	bne.n	1000ac84 <ble_mgr_events_callback_handler+0x54>
1000ac76:	e000      	b.n	1000ac7a <ble_mgr_events_callback_handler+0x4a>
1000ac78:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = ble_event_handler;
1000ac7a:	602a      	str	r2, [r5, #0]
						status = true; //Successfully registered to table
1000ac7c:	2101      	movs	r1, #1
						break;
1000ac7e:	e02c      	b.n	1000acda <ble_mgr_events_callback_handler+0xaa>
1000ac80:	3304      	adds	r3, #4
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000ac82:	2100      	movs	r1, #0
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000ac84:	3101      	adds	r1, #1
1000ac86:	b2c9      	uxtb	r1, r1
1000ac88:	42a1      	cmp	r1, r4
1000ac8a:	d3ee      	bcc.n	1000ac6a <ble_mgr_events_callback_handler+0x3a>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000ac8c:	2100      	movs	r1, #0
1000ac8e:	e024      	b.n	1000acda <ble_mgr_events_callback_handler+0xaa>
1000ac90:	2100      	movs	r1, #0
						status = true; //Successfully registered to table
						break;
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
1000ac92:	2801      	cmp	r0, #1
1000ac94:	d121      	bne.n	1000acda <ble_mgr_events_callback_handler+0xaa>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000ac96:	6819      	ldr	r1, [r3, #0]
1000ac98:	428a      	cmp	r2, r1
1000ac9a:	d10c      	bne.n	1000acb6 <ble_mgr_events_callback_handler+0x86>
1000ac9c:	e006      	b.n	1000acac <ble_mgr_events_callback_handler+0x7c>
1000ac9e:	001d      	movs	r5, r3
1000aca0:	3304      	adds	r3, #4
1000aca2:	1f18      	subs	r0, r3, #4
1000aca4:	6800      	ldr	r0, [r0, #0]
1000aca6:	4282      	cmp	r2, r0
1000aca8:	d107      	bne.n	1000acba <ble_mgr_events_callback_handler+0x8a>
1000acaa:	e000      	b.n	1000acae <ble_mgr_events_callback_handler+0x7e>
1000acac:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = NULL;
1000acae:	2300      	movs	r3, #0
1000acb0:	602b      	str	r3, [r5, #0]
						status = true;//Successfully unregistered from table
1000acb2:	2101      	movs	r1, #1
						break;
1000acb4:	e011      	b.n	1000acda <ble_mgr_events_callback_handler+0xaa>
1000acb6:	3304      	adds	r3, #4
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000acb8:	2100      	movs	r1, #0
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000acba:	3101      	adds	r1, #1
1000acbc:	b2c9      	uxtb	r1, r1
1000acbe:	42a1      	cmp	r1, r4
1000acc0:	d3ed      	bcc.n	1000ac9e <ble_mgr_events_callback_handler+0x6e>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000acc2:	2100      	movs	r1, #0
1000acc4:	e009      	b.n	1000acda <ble_mgr_events_callback_handler+0xaa>
			}			
		}
	}
	else
	{
		status = false; //Invalid parameter
1000acc6:	2100      	movs	r1, #0
1000acc8:	e007      	b.n	1000acda <ble_mgr_events_callback_handler+0xaa>
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
	{
		switch(event_type)
1000acca:	2100      	movs	r1, #0
1000accc:	e005      	b.n	1000acda <ble_mgr_events_callback_handler+0xaa>
			}
			break;
			
			case BLE_GATT_CLIENT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_client_event_cb;
1000acce:	4b0a      	ldr	r3, [pc, #40]	; (1000acf8 <ble_mgr_events_callback_handler+0xc8>)
				max_event_handler = MAX_GATT_CLIENT_SUBSCRIBERS;
1000acd0:	2405      	movs	r4, #5
1000acd2:	e7c4      	b.n	1000ac5e <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_L2CAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_l2cap_event_cb;
1000acd4:	4b09      	ldr	r3, [pc, #36]	; (1000acfc <ble_mgr_events_callback_handler+0xcc>)
				max_event_handler = MAX_L2CAP_EVENT_SUBSCRIBERS;
1000acd6:	2401      	movs	r4, #1
1000acd8:	e7c1      	b.n	1000ac5e <ble_mgr_events_callback_handler+0x2e>
	else
	{
		status = false; //Invalid parameter
	}
	return status;
}
1000acda:	0008      	movs	r0, r1
1000acdc:	bd30      	pop	{r4, r5, pc}
1000acde:	46c0      	nop			; (mov r8, r8)
1000ace0:	10011e48 	.word	0x10011e48
1000ace4:	10014738 	.word	0x10014738
1000ace8:	10014734 	.word	0x10014734
1000acec:	100149bc 	.word	0x100149bc
1000acf0:	10014f70 	.word	0x10014f70
1000acf4:	100149d0 	.word	0x100149d0
1000acf8:	100149e4 	.word	0x100149e4
1000acfc:	10014a2c 	.word	0x10014a2c

1000ad00 <ble_device_init>:
volatile uint32_t 	event_params_memory[1024] 	= {0};


/** @brief BLE device initialization */
void ble_device_init(at_ble_addr_t *addr)
{
1000ad00:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ad02:	465f      	mov	r7, fp
1000ad04:	4656      	mov	r6, sl
1000ad06:	464d      	mov	r5, r9
1000ad08:	4644      	mov	r4, r8
1000ad0a:	b4f0      	push	{r4, r5, r6, r7}
1000ad0c:	b091      	sub	sp, #68	; 0x44
1000ad0e:	0005      	movs	r5, r0
static bool ble_scan_duplication_check(at_ble_scan_info_t * info);
#endif

static void init_global_var(void)
{
	ble_user_event_cb = 0;
1000ad10:	2400      	movs	r4, #0
1000ad12:	4b7e      	ldr	r3, [pc, #504]	; (1000af0c <ble_device_init+0x20c>)
1000ad14:	601c      	str	r4, [r3, #0]
	
	memset(&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000ad16:	2207      	movs	r2, #7
1000ad18:	2100      	movs	r1, #0
1000ad1a:	487d      	ldr	r0, [pc, #500]	; (1000af10 <ble_device_init+0x210>)
1000ad1c:	4e7d      	ldr	r6, [pc, #500]	; (1000af14 <ble_device_init+0x214>)
1000ad1e:	47b0      	blx	r6
	memset(&connected_state_info, 0, sizeof(at_ble_connected_t));
1000ad20:	2212      	movs	r2, #18
1000ad22:	2100      	movs	r1, #0
1000ad24:	487c      	ldr	r0, [pc, #496]	; (1000af18 <ble_device_init+0x218>)
1000ad26:	47b0      	blx	r6
		
#if defined ATT_DB_MEMORY
	memset(att_db_data, 0, sizeof(uint32_t) * BLE_ATT_DB_MEMORY_SIZE/4);
1000ad28:	4a7c      	ldr	r2, [pc, #496]	; (1000af1c <ble_device_init+0x21c>)
1000ad2a:	2100      	movs	r1, #0
1000ad2c:	487c      	ldr	r0, [pc, #496]	; (1000af20 <ble_device_init+0x220>)
1000ad2e:	47b0      	blx	r6
#endif

	scan_response_count = 0;
1000ad30:	4b7c      	ldr	r3, [pc, #496]	; (1000af24 <ble_device_init+0x224>)
1000ad32:	701c      	strb	r4, [r3, #0]
	memset(scan_info, 0, sizeof(scan_info));
1000ad34:	22cd      	movs	r2, #205	; 0xcd
1000ad36:	0092      	lsls	r2, r2, #2
1000ad38:	2100      	movs	r1, #0
1000ad3a:	487b      	ldr	r0, [pc, #492]	; (1000af28 <ble_device_init+0x228>)
1000ad3c:	47b0      	blx	r6

	event = AT_BLE_UNDEFINED_EVENT;
1000ad3e:	4b7b      	ldr	r3, [pc, #492]	; (1000af2c <ble_device_init+0x22c>)
1000ad40:	701c      	strb	r4, [r3, #0]
	memset(ble_event_params, 0, BLE_EVENT_PARAM_MAX_SIZE);
1000ad42:	2283      	movs	r2, #131	; 0x83
1000ad44:	0092      	lsls	r2, r2, #2
1000ad46:	2100      	movs	r1, #0
1000ad48:	4879      	ldr	r0, [pc, #484]	; (1000af30 <ble_device_init+0x230>)
1000ad4a:	47b0      	blx	r6
{
	uint8_t idx;	
	char *dev_name = NULL;
	init_global_var();

	memset((uint8_t *)event_pool_memory, 0, sizeof(event_pool_memory));
1000ad4c:	4b79      	ldr	r3, [pc, #484]	; (1000af34 <ble_device_init+0x234>)
1000ad4e:	469b      	mov	fp, r3
1000ad50:	2380      	movs	r3, #128	; 0x80
1000ad52:	00db      	lsls	r3, r3, #3
1000ad54:	469a      	mov	sl, r3
1000ad56:	001a      	movs	r2, r3
1000ad58:	2100      	movs	r1, #0
1000ad5a:	4658      	mov	r0, fp
1000ad5c:	47b0      	blx	r6
	memset((uint8_t *)event_params_memory, 0, sizeof(event_params_memory));
1000ad5e:	4b76      	ldr	r3, [pc, #472]	; (1000af38 <ble_device_init+0x238>)
1000ad60:	4699      	mov	r9, r3
1000ad62:	2380      	movs	r3, #128	; 0x80
1000ad64:	015b      	lsls	r3, r3, #5
1000ad66:	4698      	mov	r8, r3
1000ad68:	001a      	movs	r2, r3
1000ad6a:	2100      	movs	r1, #0
1000ad6c:	4648      	mov	r0, r9
1000ad6e:	47b0      	blx	r6

	memset(&pf_cfg, 0, sizeof(pf_cfg));
1000ad70:	4f72      	ldr	r7, [pc, #456]	; (1000af3c <ble_device_init+0x23c>)
1000ad72:	221c      	movs	r2, #28
1000ad74:	2100      	movs	r1, #0
1000ad76:	0038      	movs	r0, r7
1000ad78:	47b0      	blx	r6

	pf_cfg.event_mem_pool.memStartAdd        = (uint8_t *)event_pool_memory;
1000ad7a:	465b      	mov	r3, fp
1000ad7c:	60bb      	str	r3, [r7, #8]
	pf_cfg.event_mem_pool.memSize            = sizeof(event_pool_memory);
1000ad7e:	4653      	mov	r3, sl
1000ad80:	60fb      	str	r3, [r7, #12]
	pf_cfg.event_params_mem_pool.memStartAdd = (uint8_t *)event_params_memory;
1000ad82:	464b      	mov	r3, r9
1000ad84:	613b      	str	r3, [r7, #16]
	pf_cfg.event_params_mem_pool.memSize     = sizeof(event_params_memory);
1000ad86:	4643      	mov	r3, r8
1000ad88:	617b      	str	r3, [r7, #20]

	/* Initialize the BLE Event callbacks */
	for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gap_event_cb[idx] = NULL;
1000ad8a:	4b6d      	ldr	r3, [pc, #436]	; (1000af40 <ble_device_init+0x240>)
1000ad8c:	601c      	str	r4, [r3, #0]
1000ad8e:	605c      	str	r4, [r3, #4]
1000ad90:	609c      	str	r4, [r3, #8]
1000ad92:	60dc      	str	r4, [r3, #12]
1000ad94:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_client_event_cb[idx] = NULL;
1000ad96:	4b6b      	ldr	r3, [pc, #428]	; (1000af44 <ble_device_init+0x244>)
1000ad98:	601c      	str	r4, [r3, #0]
1000ad9a:	605c      	str	r4, [r3, #4]
1000ad9c:	609c      	str	r4, [r3, #8]
1000ad9e:	60dc      	str	r4, [r3, #12]
1000ada0:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_server_event_cb[idx] = NULL;
1000ada2:	4b69      	ldr	r3, [pc, #420]	; (1000af48 <ble_device_init+0x248>)
1000ada4:	601c      	str	r4, [r3, #0]
1000ada6:	605c      	str	r4, [r3, #4]
1000ada8:	609c      	str	r4, [r3, #8]
1000adaa:	60dc      	str	r4, [r3, #12]
1000adac:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_l2cap_event_cb[idx] = NULL;
1000adae:	4b67      	ldr	r3, [pc, #412]	; (1000af4c <ble_device_init+0x24c>)
1000adb0:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_htpt_event_cb[idx] = NULL;
1000adb2:	4b67      	ldr	r3, [pc, #412]	; (1000af50 <ble_device_init+0x250>)
1000adb4:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_dtm_event_cb[idx] = NULL;
1000adb6:	4b67      	ldr	r3, [pc, #412]	; (1000af54 <ble_device_init+0x254>)
1000adb8:	601c      	str	r4, [r3, #0]
1000adba:	605c      	str	r4, [r3, #4]
1000adbc:	609c      	str	r4, [r3, #8]
1000adbe:	60dc      	str	r4, [r3, #12]
1000adc0:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_custom_event_cb[idx] = NULL;
1000adc2:	4b65      	ldr	r3, [pc, #404]	; (1000af58 <ble_device_init+0x258>)
1000adc4:	601c      	str	r4, [r3, #0]
1000adc6:	4c65      	ldr	r4, [pc, #404]	; (1000af5c <ble_device_init+0x25c>)
1000adc8:	239b      	movs	r3, #155	; 0x9b
1000adca:	009b      	lsls	r3, r3, #2
1000adcc:	4698      	mov	r8, r3
1000adce:	44a0      	add	r8, r4
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000add0:	4f50      	ldr	r7, [pc, #320]	; (1000af14 <ble_device_init+0x214>)
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000add2:	2640      	movs	r6, #64	; 0x40
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000add4:	227c      	movs	r2, #124	; 0x7c
1000add6:	2100      	movs	r1, #0
1000add8:	0020      	movs	r0, r4
1000adda:	47b8      	blx	r7
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000addc:	0023      	movs	r3, r4
1000adde:	335e      	adds	r3, #94	; 0x5e
1000ade0:	2200      	movs	r2, #0
1000ade2:	701a      	strb	r2, [r3, #0]
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000ade4:	7626      	strb	r6, [r4, #24]
1000ade6:	347c      	adds	r4, #124	; 0x7c
	{
		ble_mgr_custom_event_cb[idx] = NULL;
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000ade8:	45a0      	cmp	r8, r4
1000adea:	d1f3      	bne.n	1000add4 <ble_device_init+0xd4>
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
    }
	/* Need to reset the count to 0 for storing it only in SRAM */
	ble_device_count = 0; 
1000adec:	4b5c      	ldr	r3, [pc, #368]	; (1000af60 <ble_device_init+0x260>)
1000adee:	701a      	strb	r2, [r3, #0]
	
	
#if defined ATT_DB_MEMORY
	pf_cfg.memPool.memSize = BLE_ATT_DB_MEMORY_SIZE;
1000adf0:	4c52      	ldr	r4, [pc, #328]	; (1000af3c <ble_device_init+0x23c>)
1000adf2:	4b4a      	ldr	r3, [pc, #296]	; (1000af1c <ble_device_init+0x21c>)
1000adf4:	6063      	str	r3, [r4, #4]
	pf_cfg.memPool.memStartAdd = (uint8_t *)att_db_data;
1000adf6:	4b4a      	ldr	r3, [pc, #296]	; (1000af20 <ble_device_init+0x220>)
1000adf8:	6023      	str	r3, [r4, #0]

/* Initialize the BLE */
static void ble_init(at_ble_init_config_t * args)
{
	/* Initialize the platform */
	DBG_LOG("Initializing SAMB11");
1000adfa:	485a      	ldr	r0, [pc, #360]	; (1000af64 <ble_device_init+0x264>)
1000adfc:	4b5a      	ldr	r3, [pc, #360]	; (1000af68 <ble_device_init+0x268>)
1000adfe:	4798      	blx	r3
1000ae00:	485a      	ldr	r0, [pc, #360]	; (1000af6c <ble_device_init+0x26c>)
1000ae02:	4b5b      	ldr	r3, [pc, #364]	; (1000af70 <ble_device_init+0x270>)
1000ae04:	4798      	blx	r3
	
	/* Init BLE device */
	if(at_ble_init(args) != AT_BLE_SUCCESS)
1000ae06:	0020      	movs	r0, r4
1000ae08:	4b5a      	ldr	r3, [pc, #360]	; (1000af74 <ble_device_init+0x274>)
1000ae0a:	4798      	blx	r3
1000ae0c:	2800      	cmp	r0, #0
1000ae0e:	d00b      	beq.n	1000ae28 <ble_device_init+0x128>
	{
		DBG_LOG("SAMB11 Initialization failed");
1000ae10:	4e54      	ldr	r6, [pc, #336]	; (1000af64 <ble_device_init+0x264>)
1000ae12:	0030      	movs	r0, r6
1000ae14:	4d54      	ldr	r5, [pc, #336]	; (1000af68 <ble_device_init+0x268>)
1000ae16:	47a8      	blx	r5
1000ae18:	4857      	ldr	r0, [pc, #348]	; (1000af78 <ble_device_init+0x278>)
1000ae1a:	4c55      	ldr	r4, [pc, #340]	; (1000af70 <ble_device_init+0x270>)
1000ae1c:	47a0      	blx	r4
		DBG_LOG("Please check the power and connection / hardware connector");	
1000ae1e:	0030      	movs	r0, r6
1000ae20:	47a8      	blx	r5
1000ae22:	4856      	ldr	r0, [pc, #344]	; (1000af7c <ble_device_init+0x27c>)
1000ae24:	47a0      	blx	r4
1000ae26:	e7fe      	b.n	1000ae26 <ble_device_init+0x126>
#endif
	
	ble_init(&pf_cfg);

	/* Register it in first index of callback handler */
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, 
1000ae28:	4a55      	ldr	r2, [pc, #340]	; (1000af80 <ble_device_init+0x280>)
1000ae2a:	2100      	movs	r1, #0
1000ae2c:	2000      	movs	r0, #0
1000ae2e:	4c55      	ldr	r4, [pc, #340]	; (1000af84 <ble_device_init+0x284>)
1000ae30:	47a0      	blx	r4
									BLE_GAP_EVENT_TYPE, 
									ble_mgr_gap_handle);
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
1000ae32:	4a55      	ldr	r2, [pc, #340]	; (1000af88 <ble_device_init+0x288>)
1000ae34:	2102      	movs	r1, #2
1000ae36:	2000      	movs	r0, #0
1000ae38:	47a0      	blx	r4
{
	if ((name == NULL) || (name_len < 1))
	{
		return AT_BLE_INVALID_PARAM;
	}
	return at_ble_device_name_set(name, name_len);
1000ae3a:	2109      	movs	r1, #9
1000ae3c:	4853      	ldr	r0, [pc, #332]	; (1000af8c <ble_device_init+0x28c>)
1000ae3e:	4b54      	ldr	r3, [pc, #336]	; (1000af90 <ble_device_init+0x290>)
1000ae40:	4798      	blx	r3
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
									BLE_GATT_SERVER_EVENT_TYPE,
									ble_mgr_gatt_server_handle);
									
	dev_name = (char *)BLE_DEVICE_NAME;
	if (ble_set_device_name((uint8_t *)dev_name, strlen(dev_name)) != AT_BLE_SUCCESS)
1000ae42:	2800      	cmp	r0, #0
1000ae44:	d005      	beq.n	1000ae52 <ble_device_init+0x152>
	{
		DBG_LOG("Device name set failed");
1000ae46:	4847      	ldr	r0, [pc, #284]	; (1000af64 <ble_device_init+0x264>)
1000ae48:	4b47      	ldr	r3, [pc, #284]	; (1000af68 <ble_device_init+0x268>)
1000ae4a:	4798      	blx	r3
1000ae4c:	4851      	ldr	r0, [pc, #324]	; (1000af94 <ble_device_init+0x294>)
1000ae4e:	4b48      	ldr	r3, [pc, #288]	; (1000af70 <ble_device_init+0x270>)
1000ae50:	4798      	blx	r3

/* Set BLE Address and device configuration, If address is NULL then it will use BD public address */
static void ble_set_dev_config(at_ble_addr_t *addr)
{
	at_ble_dev_config_t stDevConfig;
	at_ble_addr_t address = {AT_BLE_ADDRESS_PUBLIC, {0xAB, 0xCD, 0xEF, 0xAB, 0xCD, 0xEF}};
1000ae52:	2207      	movs	r2, #7
1000ae54:	4950      	ldr	r1, [pc, #320]	; (1000af98 <ble_device_init+0x298>)
1000ae56:	3108      	adds	r1, #8
1000ae58:	a804      	add	r0, sp, #16
1000ae5a:	4b50      	ldr	r3, [pc, #320]	; (1000af9c <ble_device_init+0x29c>)
1000ae5c:	4798      	blx	r3
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
1000ae5e:	2226      	movs	r2, #38	; 0x26
1000ae60:	2100      	movs	r1, #0
1000ae62:	a806      	add	r0, sp, #24
1000ae64:	4b2b      	ldr	r3, [pc, #172]	; (1000af14 <ble_device_init+0x214>)
1000ae66:	4798      	blx	r3
	
	if (addr == NULL)
1000ae68:	2d00      	cmp	r5, #0
1000ae6a:	d10c      	bne.n	1000ae86 <ble_device_init+0x186>
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000ae6c:	a804      	add	r0, sp, #16
1000ae6e:	4b4c      	ldr	r3, [pc, #304]	; (1000afa0 <ble_device_init+0x2a0>)
1000ae70:	4798      	blx	r3
		{
			DBG_LOG("BD address get failed");
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000ae72:	ad04      	add	r5, sp, #16
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
	
	if (addr == NULL)
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000ae74:	2800      	cmp	r0, #0
1000ae76:	d006      	beq.n	1000ae86 <ble_device_init+0x186>
		{
			DBG_LOG("BD address get failed");
1000ae78:	483a      	ldr	r0, [pc, #232]	; (1000af64 <ble_device_init+0x264>)
1000ae7a:	4b3b      	ldr	r3, [pc, #236]	; (1000af68 <ble_device_init+0x268>)
1000ae7c:	4798      	blx	r3
1000ae7e:	4849      	ldr	r0, [pc, #292]	; (1000afa4 <ble_device_init+0x2a4>)
1000ae80:	4b3b      	ldr	r3, [pc, #236]	; (1000af70 <ble_device_init+0x270>)
1000ae82:	4798      	blx	r3
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000ae84:	ad04      	add	r5, sp, #16
	}
	
	DBG_LOG("BD Address:0x%02X%02X%02X%02X%02X%02X, Address Type:%d",
1000ae86:	4837      	ldr	r0, [pc, #220]	; (1000af64 <ble_device_init+0x264>)
1000ae88:	4b37      	ldr	r3, [pc, #220]	; (1000af68 <ble_device_init+0x268>)
1000ae8a:	4798      	blx	r3
1000ae8c:	792b      	ldrb	r3, [r5, #4]
1000ae8e:	796a      	ldrb	r2, [r5, #5]
1000ae90:	79a9      	ldrb	r1, [r5, #6]
1000ae92:	7828      	ldrb	r0, [r5, #0]
1000ae94:	9003      	str	r0, [sp, #12]
1000ae96:	7868      	ldrb	r0, [r5, #1]
1000ae98:	9002      	str	r0, [sp, #8]
1000ae9a:	78a8      	ldrb	r0, [r5, #2]
1000ae9c:	9001      	str	r0, [sp, #4]
1000ae9e:	78e8      	ldrb	r0, [r5, #3]
1000aea0:	9000      	str	r0, [sp, #0]
1000aea2:	4841      	ldr	r0, [pc, #260]	; (1000afa8 <ble_device_init+0x2a8>)
1000aea4:	4c32      	ldr	r4, [pc, #200]	; (1000af70 <ble_device_init+0x270>)
1000aea6:	47a0      	blx	r4
	addr->addr[1],
	addr->addr[0], addr->type);
	
	/* Set device configuration */
	/* Device role */
	stDevConfig.role = (at_ble_dev_role_t)BLE_DEVICE_ROLE;
1000aea8:	ac06      	add	r4, sp, #24
1000aeaa:	230f      	movs	r3, #15
1000aeac:	7023      	strb	r3, [r4, #0]
	/* device renew duration */
	stDevConfig.renew_dur = AT_RENEW_DUR_VAL_MIN;
1000aeae:	4b3f      	ldr	r3, [pc, #252]	; (1000afac <ble_device_init+0x2ac>)
1000aeb0:	8063      	strh	r3, [r4, #2]
	/* device address type */
	memcpy((uint8_t *)&stDevConfig.address, (uint8_t *)addr, sizeof(at_ble_addr_t));
1000aeb2:	2207      	movs	r2, #7
1000aeb4:	0029      	movs	r1, r5
1000aeb6:	a807      	add	r0, sp, #28
1000aeb8:	4b38      	ldr	r3, [pc, #224]	; (1000af9c <ble_device_init+0x29c>)
1000aeba:	4798      	blx	r3
	/* Attributes */
	stDevConfig.att_cfg.b2NamePerm = AT_BLE_WRITE_DISABLE;
1000aebc:	2300      	movs	r3, #0
1000aebe:	76e3      	strb	r3, [r4, #27]
	stDevConfig.att_cfg.b2AppearancePerm = AT_BLE_WRITE_DISABLE;
1000aec0:	7723      	strb	r3, [r4, #28]
	stDevConfig.att_cfg.b1EnableSpcs = 0;
1000aec2:	7763      	strb	r3, [r4, #29]
	stDevConfig.att_cfg.b1EnableServiceChanged = 0;
1000aec4:	77a3      	strb	r3, [r4, #30]
	stDevConfig.att_cfg.b2Rfu = AT_BLE_WRITE_DISABLE;
1000aec6:	77e3      	strb	r3, [r4, #31]
	/* Handles */
	stDevConfig.gap_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000aec8:	8423      	strh	r3, [r4, #32]
	stDevConfig.gatt_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000aeca:	8463      	strh	r3, [r4, #34]	; 0x22
	/* MTU */
	stDevConfig.max_mtu = AT_MTU_VAL_RECOMMENDED;
1000aecc:	2380      	movs	r3, #128	; 0x80
1000aece:	009b      	lsls	r3, r3, #2
1000aed0:	84a3      	strh	r3, [r4, #36]	; 0x24
	
	if(at_ble_set_dev_config(&stDevConfig) != AT_BLE_SUCCESS)
1000aed2:	0020      	movs	r0, r4
1000aed4:	4b36      	ldr	r3, [pc, #216]	; (1000afb0 <ble_device_init+0x2b0>)
1000aed6:	4798      	blx	r3
1000aed8:	2800      	cmp	r0, #0
1000aeda:	d005      	beq.n	1000aee8 <ble_device_init+0x1e8>
	{
		DBG_LOG("Set BLE Device configuration failed");
1000aedc:	4821      	ldr	r0, [pc, #132]	; (1000af64 <ble_device_init+0x264>)
1000aede:	4b22      	ldr	r3, [pc, #136]	; (1000af68 <ble_device_init+0x268>)
1000aee0:	4798      	blx	r3
1000aee2:	4834      	ldr	r0, [pc, #208]	; (1000afb4 <ble_device_init+0x2b4>)
1000aee4:	4b22      	ldr	r3, [pc, #136]	; (1000af70 <ble_device_init+0x270>)
1000aee6:	4798      	blx	r3
	}
	
	if (at_ble_addr_set(addr) != AT_BLE_SUCCESS)
1000aee8:	0028      	movs	r0, r5
1000aeea:	4b33      	ldr	r3, [pc, #204]	; (1000afb8 <ble_device_init+0x2b8>)
1000aeec:	4798      	blx	r3
1000aeee:	2800      	cmp	r0, #0
1000aef0:	d005      	beq.n	1000aefe <ble_device_init+0x1fe>
	{
		DBG_LOG("Set BLE Device Address failed");
1000aef2:	481c      	ldr	r0, [pc, #112]	; (1000af64 <ble_device_init+0x264>)
1000aef4:	4b1c      	ldr	r3, [pc, #112]	; (1000af68 <ble_device_init+0x268>)
1000aef6:	4798      	blx	r3
1000aef8:	4830      	ldr	r0, [pc, #192]	; (1000afbc <ble_device_init+0x2bc>)
1000aefa:	4b1d      	ldr	r3, [pc, #116]	; (1000af70 <ble_device_init+0x270>)
1000aefc:	4798      	blx	r3
	{
		DBG_LOG("Device name set failed");
	}
	
	ble_set_dev_config(addr);	
}
1000aefe:	b011      	add	sp, #68	; 0x44
1000af00:	bc3c      	pop	{r2, r3, r4, r5}
1000af02:	4690      	mov	r8, r2
1000af04:	4699      	mov	r9, r3
1000af06:	46a2      	mov	sl, r4
1000af08:	46ab      	mov	fp, r5
1000af0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000af0c:	10013460 	.word	0x10013460
1000af10:	10013468 	.word	0x10013468
1000af14:	10010435 	.word	0x10010435
1000af18:	100149f8 	.word	0x100149f8
1000af1c:	000004e2 	.word	0x000004e2
1000af20:	10012f80 	.word	0x10012f80
1000af24:	10013464 	.word	0x10013464
1000af28:	10014a30 	.word	0x10014a30
1000af2c:	10014a28 	.word	0x10014a28
1000af30:	10014d64 	.word	0x10014d64
1000af34:	10012b80 	.word	0x10012b80
1000af38:	10013470 	.word	0x10013470
1000af3c:	10014a0c 	.word	0x10014a0c
1000af40:	100149d0 	.word	0x100149d0
1000af44:	100149e4 	.word	0x100149e4
1000af48:	10014738 	.word	0x10014738
1000af4c:	10014a2c 	.word	0x10014a2c
1000af50:	10014734 	.word	0x10014734
1000af54:	100149bc 	.word	0x100149bc
1000af58:	10014f70 	.word	0x10014f70
1000af5c:	1001474c 	.word	0x1001474c
1000af60:	100149b8 	.word	0x100149b8
1000af64:	100116bc 	.word	0x100116bc
1000af68:	10010565 	.word	0x10010565
1000af6c:	100125a8 	.word	0x100125a8
1000af70:	10010445 	.word	0x10010445
1000af74:	1000ce3d 	.word	0x1000ce3d
1000af78:	100125bc 	.word	0x100125bc
1000af7c:	100125dc 	.word	0x100125dc
1000af80:	1001290c 	.word	0x1001290c
1000af84:	1000ac31 	.word	0x1000ac31
1000af88:	10011f70 	.word	0x10011f70
1000af8c:	10012618 	.word	0x10012618
1000af90:	1000cd55 	.word	0x1000cd55
1000af94:	10012624 	.word	0x10012624
1000af98:	10011f54 	.word	0x10011f54
1000af9c:	10010423 	.word	0x10010423
1000afa0:	1000cd89 	.word	0x1000cd89
1000afa4:	1001263c 	.word	0x1001263c
1000afa8:	10012654 	.word	0x10012654
1000afac:	00003a98 	.word	0x00003a98
1000afb0:	1000cdad 	.word	0x1000cdad
1000afb4:	1001268c 	.word	0x1001268c
1000afb8:	1000cff1 	.word	0x1000cff1
1000afbc:	100126b0 	.word	0x100126b0

1000afc0 <gap_dev_connect>:
	return AT_BLE_SUCCESS;
}

/** @brief request the peer device for connection */
at_ble_status_t gap_dev_connect(at_ble_addr_t *dev_addr)
{
1000afc0:	b510      	push	{r4, lr}
1000afc2:	b086      	sub	sp, #24
1000afc4:	0004      	movs	r4, r0
	at_ble_connection_params_t gap_conn_parameter;
	
	memcpy((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)dev_addr, sizeof(at_ble_addr_t));
1000afc6:	2207      	movs	r2, #7
1000afc8:	0001      	movs	r1, r0
1000afca:	480c      	ldr	r0, [pc, #48]	; (1000affc <gap_dev_connect+0x3c>)
1000afcc:	4b0c      	ldr	r3, [pc, #48]	; (1000b000 <gap_dev_connect+0x40>)
1000afce:	4798      	blx	r3

	gap_conn_parameter.con_intv_min = GAP_CONN_INTERVAL_MIN;
1000afd0:	ab03      	add	r3, sp, #12
1000afd2:	2214      	movs	r2, #20
1000afd4:	801a      	strh	r2, [r3, #0]
	gap_conn_parameter.con_intv_max = GAP_CONN_INTERVAL_MAX;
1000afd6:	3214      	adds	r2, #20
1000afd8:	805a      	strh	r2, [r3, #2]
	gap_conn_parameter.con_latency = GAP_CONN_SLAVE_LATENCY;
1000afda:	2200      	movs	r2, #0
1000afdc:	809a      	strh	r2, [r3, #4]
	gap_conn_parameter.ce_len_min = GAP_CE_LEN_MIN;
1000afde:	811a      	strh	r2, [r3, #8]
	gap_conn_parameter.ce_len_max = GAP_CE_LEN_MAX;
1000afe0:	815a      	strh	r2, [r3, #10]
	gap_conn_parameter.superv_to = GAP_SUPERVISION_TIMOUT;
1000afe2:	32f5      	adds	r2, #245	; 0xf5
1000afe4:	32ff      	adds	r2, #255	; 0xff
1000afe6:	80da      	strh	r2, [r3, #6]

	return (at_ble_connect(dev_addr, GAP_CONNECT_PEER_COUNT, SCAN_INTERVAL, SCAN_WINDOW, &gap_conn_parameter));
1000afe8:	9300      	str	r3, [sp, #0]
1000afea:	2360      	movs	r3, #96	; 0x60
1000afec:	3a95      	subs	r2, #149	; 0x95
1000afee:	3aff      	subs	r2, #255	; 0xff
1000aff0:	2101      	movs	r1, #1
1000aff2:	0020      	movs	r0, r4
1000aff4:	4c03      	ldr	r4, [pc, #12]	; (1000b004 <gap_dev_connect+0x44>)
1000aff6:	47a0      	blx	r4
}
1000aff8:	b006      	add	sp, #24
1000affa:	bd10      	pop	{r4, pc}
1000affc:	10013468 	.word	0x10013468
1000b000:	10010423 	.word	0x10010423
1000b004:	1000d0f5 	.word	0x1000d0f5

1000b008 <gap_dev_scan>:

/** @brief instructs device to start scanning */
at_ble_status_t gap_dev_scan(void)
{
1000b008:	b510      	push	{r4, lr}
1000b00a:	b084      	sub	sp, #16
	/* Device Scan discover started*/
	DBG_LOG("Scanning...Please wait...");
1000b00c:	480c      	ldr	r0, [pc, #48]	; (1000b040 <gap_dev_scan+0x38>)
1000b00e:	4b0d      	ldr	r3, [pc, #52]	; (1000b044 <gap_dev_scan+0x3c>)
1000b010:	4798      	blx	r3
1000b012:	480d      	ldr	r0, [pc, #52]	; (1000b048 <gap_dev_scan+0x40>)
1000b014:	4b0d      	ldr	r3, [pc, #52]	; (1000b04c <gap_dev_scan+0x44>)
1000b016:	4798      	blx	r3
	/* make service discover counter to zero*/
	scan_response_count = 0;
1000b018:	2400      	movs	r4, #0
1000b01a:	4b0d      	ldr	r3, [pc, #52]	; (1000b050 <gap_dev_scan+0x48>)
1000b01c:	701c      	strb	r4, [r3, #0]
	memset(scan_info, 0, sizeof(scan_info));
1000b01e:	22cd      	movs	r2, #205	; 0xcd
1000b020:	0092      	lsls	r2, r2, #2
1000b022:	2100      	movs	r1, #0
1000b024:	480b      	ldr	r0, [pc, #44]	; (1000b054 <gap_dev_scan+0x4c>)
1000b026:	4b0c      	ldr	r3, [pc, #48]	; (1000b058 <gap_dev_scan+0x50>)
1000b028:	4798      	blx	r3
	#ifdef USE_SCAN_SOFT_FILTER
	return(at_ble_scan_start(SCAN_INTERVAL, SCAN_WINDOW, SCAN_TIMEOUT, SCAN_TYPE, AT_BLE_SCAN_GEN_DISCOVERY, false,false)) ;	
	#else
	return(at_ble_scan_start(SCAN_INTERVAL, SCAN_WINDOW, SCAN_TIMEOUT, SCAN_TYPE, AT_BLE_SCAN_GEN_DISCOVERY, false,true)) ;	
1000b02a:	2301      	movs	r3, #1
1000b02c:	9302      	str	r3, [sp, #8]
1000b02e:	9401      	str	r4, [sp, #4]
1000b030:	9400      	str	r4, [sp, #0]
1000b032:	2200      	movs	r2, #0
1000b034:	2160      	movs	r1, #96	; 0x60
1000b036:	2060      	movs	r0, #96	; 0x60
1000b038:	4c08      	ldr	r4, [pc, #32]	; (1000b05c <gap_dev_scan+0x54>)
1000b03a:	47a0      	blx	r4
	#endif
}
1000b03c:	b004      	add	sp, #16
1000b03e:	bd10      	pop	{r4, pc}
1000b040:	100116bc 	.word	0x100116bc
1000b044:	10010565 	.word	0x10010565
1000b048:	100126d0 	.word	0x100126d0
1000b04c:	10010445 	.word	0x10010445
1000b050:	10013464 	.word	0x10013464
1000b054:	10014a30 	.word	0x10014a30
1000b058:	10010435 	.word	0x10010435
1000b05c:	1000d045 	.word	0x1000d045

1000b060 <scan_info_parse>:
}

/* Parse the received advertising data for service and local name */
uint8_t scan_info_parse(at_ble_scan_info_t *scan_info_data,
				at_ble_uuid_t *ble_service_uuid, uint8_t adv_type)
{
1000b060:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b062:	465f      	mov	r7, fp
1000b064:	4656      	mov	r6, sl
1000b066:	464d      	mov	r5, r9
1000b068:	4644      	mov	r4, r8
1000b06a:	b4f0      	push	{r4, r5, r6, r7}
1000b06c:	b087      	sub	sp, #28
1000b06e:	4681      	mov	r9, r0
1000b070:	9101      	str	r1, [sp, #4]
1000b072:	4693      	mov	fp, r2
	if (scan_info_data->adv_data_len) {
1000b074:	2327      	movs	r3, #39	; 0x27
1000b076:	5cc6      	ldrb	r6, [r0, r3]
			adv_element_data.len += 1;
			adv_data_size -= adv_element_data.len;
		}
	}

	return AT_BLE_FAILURE;
1000b078:	20e2      	movs	r0, #226	; 0xe2

/* Parse the received advertising data for service and local name */
uint8_t scan_info_parse(at_ble_scan_info_t *scan_info_data,
				at_ble_uuid_t *ble_service_uuid, uint8_t adv_type)
{
	if (scan_info_data->adv_data_len) {
1000b07a:	2e00      	cmp	r6, #0
1000b07c:	d062      	beq.n	1000b144 <scan_info_parse+0xe4>
		uint8_t index = 0;
		volatile adv_element_t *adv_element_p;
		volatile adv_element_t adv_element_data;

		adv_data_size = scan_info_data->adv_data_len;
		adv_element_data.len = 0;
1000b07e:	2200      	movs	r2, #0
1000b080:	ab04      	add	r3, sp, #16
1000b082:	701a      	strb	r2, [r3, #0]
1000b084:	2500      	movs	r5, #0
				/* passing the length of data type */
				uint8_t adv_type_size = adv_element_p->len;
				/* actual size of the data	*/
				adv_type_size -= 1;
				while (adv_type_size) {
					volatile int cmp_status = -1;
1000b086:	2301      	movs	r3, #1
1000b088:	425b      	negs	r3, r3
1000b08a:	4698      	mov	r8, r3
						+= AT_BLE_UUID_32_LEN;
						adv_type_size
						-= AT_BLE_UUID_32_LEN;
					} else if (ble_service_uuid->type ==
					AT_BLE_UUID_128) {
						cmp_status = memcmp(
1000b08c:	000b      	movs	r3, r1
1000b08e:	3301      	adds	r3, #1
1000b090:	9300      	str	r3, [sp, #0]
				adv_type_size -= 1;
				while (adv_type_size) {
					volatile int cmp_status = -1;
					if (ble_service_uuid->type ==
					AT_BLE_UUID_16) {
						cmp_status = memcmp(
1000b092:	4b30      	ldr	r3, [pc, #192]	; (1000b154 <scan_info_parse+0xf4>)
1000b094:	469a      	mov	sl, r3
		volatile adv_element_t adv_element_data;

		adv_data_size = scan_info_data->adv_data_len;
		adv_element_data.len = 0;
		while (adv_data_size) {
			adv_element_data.len = scan_info_data->adv_data[index];
1000b096:	464b      	mov	r3, r9
1000b098:	195a      	adds	r2, r3, r5
1000b09a:	7a11      	ldrb	r1, [r2, #8]
1000b09c:	ab04      	add	r3, sp, #16
1000b09e:	7019      	strb	r1, [r3, #0]
			adv_element_data.type
			= scan_info_data->adv_data[index + 1];
1000b0a0:	7a52      	ldrb	r2, [r2, #9]
1000b0a2:	705a      	strb	r2, [r3, #1]
			adv_element_data.data
			= &scan_info_data->adv_data[index + 2];
1000b0a4:	002a      	movs	r2, r5
1000b0a6:	320a      	adds	r2, #10
1000b0a8:	444a      	add	r2, r9
1000b0aa:	9205      	str	r2, [sp, #20]
			adv_element_p = &adv_element_data;

			if (adv_element_p->type == adv_type) {
1000b0ac:	785b      	ldrb	r3, [r3, #1]
1000b0ae:	b2db      	uxtb	r3, r3
1000b0b0:	455b      	cmp	r3, fp
1000b0b2:	d136      	bne.n	1000b122 <scan_info_parse+0xc2>
				/* passing the length of data type */
				uint8_t adv_type_size = adv_element_p->len;
1000b0b4:	ab04      	add	r3, sp, #16
1000b0b6:	781c      	ldrb	r4, [r3, #0]
				/* actual size of the data	*/
				adv_type_size -= 1;
1000b0b8:	3c01      	subs	r4, #1
1000b0ba:	b2e4      	uxtb	r4, r4
				while (adv_type_size) {
1000b0bc:	2c00      	cmp	r4, #0
1000b0be:	d030      	beq.n	1000b122 <scan_info_parse+0xc2>
					volatile int cmp_status = -1;
					if (ble_service_uuid->type ==
1000b0c0:	9b01      	ldr	r3, [sp, #4]
1000b0c2:	781f      	ldrb	r7, [r3, #0]
				/* passing the length of data type */
				uint8_t adv_type_size = adv_element_p->len;
				/* actual size of the data	*/
				adv_type_size -= 1;
				while (adv_type_size) {
					volatile int cmp_status = -1;
1000b0c4:	4643      	mov	r3, r8
1000b0c6:	9303      	str	r3, [sp, #12]
					if (ble_service_uuid->type ==
1000b0c8:	2f00      	cmp	r7, #0
1000b0ca:	d10a      	bne.n	1000b0e2 <scan_info_parse+0x82>
					AT_BLE_UUID_16) {
						cmp_status = memcmp(
						adv_element_p->data, ble_service_uuid->uuid,
1000b0cc:	9805      	ldr	r0, [sp, #20]
				adv_type_size -= 1;
				while (adv_type_size) {
					volatile int cmp_status = -1;
					if (ble_service_uuid->type ==
					AT_BLE_UUID_16) {
						cmp_status = memcmp(
1000b0ce:	2202      	movs	r2, #2
1000b0d0:	9900      	ldr	r1, [sp, #0]
1000b0d2:	47d0      	blx	sl
1000b0d4:	9003      	str	r0, [sp, #12]
						adv_element_p->data, ble_service_uuid->uuid,
						AT_BLE_UUID_16_LEN);
						adv_element_p->data
						+= AT_BLE_UUID_16_LEN;
1000b0d6:	9b05      	ldr	r3, [sp, #20]
1000b0d8:	3302      	adds	r3, #2
1000b0da:	9305      	str	r3, [sp, #20]
						adv_type_size
						-= AT_BLE_UUID_16_LEN;
1000b0dc:	3c02      	subs	r4, #2
1000b0de:	b2e4      	uxtb	r4, r4
1000b0e0:	e01a      	b.n	1000b118 <scan_info_parse+0xb8>
					} else if (ble_service_uuid->type ==
1000b0e2:	2f01      	cmp	r7, #1
1000b0e4:	d10b      	bne.n	1000b0fe <scan_info_parse+0x9e>
					AT_BLE_UUID_32) {
						cmp_status = memcmp(
						adv_element_p->data, ble_service_uuid->uuid,
1000b0e6:	9805      	ldr	r0, [sp, #20]
						+= AT_BLE_UUID_16_LEN;
						adv_type_size
						-= AT_BLE_UUID_16_LEN;
					} else if (ble_service_uuid->type ==
					AT_BLE_UUID_32) {
						cmp_status = memcmp(
1000b0e8:	2204      	movs	r2, #4
1000b0ea:	9900      	ldr	r1, [sp, #0]
1000b0ec:	4b19      	ldr	r3, [pc, #100]	; (1000b154 <scan_info_parse+0xf4>)
1000b0ee:	4798      	blx	r3
1000b0f0:	9003      	str	r0, [sp, #12]
						adv_element_p->data, ble_service_uuid->uuid,
						AT_BLE_UUID_32_LEN);
						adv_element_p->data
						+= AT_BLE_UUID_32_LEN;
1000b0f2:	9b05      	ldr	r3, [sp, #20]
1000b0f4:	3304      	adds	r3, #4
1000b0f6:	9305      	str	r3, [sp, #20]
						adv_type_size
						-= AT_BLE_UUID_32_LEN;
1000b0f8:	3c04      	subs	r4, #4
1000b0fa:	b2e4      	uxtb	r4, r4
1000b0fc:	e00c      	b.n	1000b118 <scan_info_parse+0xb8>
					} else if (ble_service_uuid->type ==
1000b0fe:	2f02      	cmp	r7, #2
1000b100:	d10a      	bne.n	1000b118 <scan_info_parse+0xb8>
					AT_BLE_UUID_128) {
						cmp_status = memcmp(
						adv_element_p->data, ble_service_uuid->uuid,
1000b102:	9805      	ldr	r0, [sp, #20]
						+= AT_BLE_UUID_32_LEN;
						adv_type_size
						-= AT_BLE_UUID_32_LEN;
					} else if (ble_service_uuid->type ==
					AT_BLE_UUID_128) {
						cmp_status = memcmp(
1000b104:	2210      	movs	r2, #16
1000b106:	9900      	ldr	r1, [sp, #0]
1000b108:	4b12      	ldr	r3, [pc, #72]	; (1000b154 <scan_info_parse+0xf4>)
1000b10a:	4798      	blx	r3
1000b10c:	9003      	str	r0, [sp, #12]
						adv_element_p->data, ble_service_uuid->uuid,
						AT_BLE_UUID_128_LEN);
						adv_element_p->data
						+= AT_BLE_UUID_128_LEN;
1000b10e:	9b05      	ldr	r3, [sp, #20]
1000b110:	3310      	adds	r3, #16
1000b112:	9305      	str	r3, [sp, #20]
						adv_type_size
						-= AT_BLE_UUID_32_LEN;
1000b114:	3c04      	subs	r4, #4
1000b116:	b2e4      	uxtb	r4, r4
					}

					if (cmp_status == 0) {
1000b118:	9b03      	ldr	r3, [sp, #12]
1000b11a:	2b00      	cmp	r3, #0
1000b11c:	d011      	beq.n	1000b142 <scan_info_parse+0xe2>
			if (adv_element_p->type == adv_type) {
				/* passing the length of data type */
				uint8_t adv_type_size = adv_element_p->len;
				/* actual size of the data	*/
				adv_type_size -= 1;
				while (adv_type_size) {
1000b11e:	2c00      	cmp	r4, #0
1000b120:	d1d0      	bne.n	1000b0c4 <scan_info_parse+0x64>
						return AT_BLE_SUCCESS;
					}
				}
			}

			index += (adv_element_data.len + 1);
1000b122:	aa04      	add	r2, sp, #16
1000b124:	7813      	ldrb	r3, [r2, #0]
1000b126:	3301      	adds	r3, #1
1000b128:	18ed      	adds	r5, r5, r3
1000b12a:	b2ed      	uxtb	r5, r5
			adv_element_data.len += 1;
1000b12c:	7813      	ldrb	r3, [r2, #0]
1000b12e:	3301      	adds	r3, #1
1000b130:	b2db      	uxtb	r3, r3
1000b132:	7013      	strb	r3, [r2, #0]
			adv_data_size -= adv_element_data.len;
1000b134:	7813      	ldrb	r3, [r2, #0]
1000b136:	1af6      	subs	r6, r6, r3
1000b138:	b2f6      	uxtb	r6, r6
		volatile adv_element_t *adv_element_p;
		volatile adv_element_t adv_element_data;

		adv_data_size = scan_info_data->adv_data_len;
		adv_element_data.len = 0;
		while (adv_data_size) {
1000b13a:	2e00      	cmp	r6, #0
1000b13c:	d1ab      	bne.n	1000b096 <scan_info_parse+0x36>
			adv_element_data.len += 1;
			adv_data_size -= adv_element_data.len;
		}
	}

	return AT_BLE_FAILURE;
1000b13e:	20e2      	movs	r0, #226	; 0xe2
1000b140:	e000      	b.n	1000b144 <scan_info_parse+0xe4>
						adv_type_size
						-= AT_BLE_UUID_32_LEN;
					}

					if (cmp_status == 0) {
						return AT_BLE_SUCCESS;
1000b142:	2000      	movs	r0, #0
			adv_data_size -= adv_element_data.len;
		}
	}

	return AT_BLE_FAILURE;
}
1000b144:	b007      	add	sp, #28
1000b146:	bc3c      	pop	{r2, r3, r4, r5}
1000b148:	4690      	mov	r8, r2
1000b14a:	4699      	mov	r9, r3
1000b14c:	46a2      	mov	sl, r4
1000b14e:	46ab      	mov	fp, r5
1000b150:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b152:	46c0      	nop			; (mov r8, r8)
1000b154:	10010405 	.word	0x10010405

1000b158 <ble_send_slave_sec_request>:

/** @brief function to send slave security request */
at_ble_status_t ble_send_slave_sec_request(at_ble_handle_t conn_handle)
{
1000b158:	b510      	push	{r4, lr}
	#if BLE_PAIR_ENABLE
		if (at_ble_send_slave_sec_request(conn_handle, BLE_MITM_REQ, BLE_BOND_REQ) == AT_BLE_SUCCESS)
1000b15a:	2200      	movs	r2, #0
1000b15c:	2100      	movs	r1, #0
1000b15e:	4b0a      	ldr	r3, [pc, #40]	; (1000b188 <ble_send_slave_sec_request+0x30>)
1000b160:	4798      	blx	r3
1000b162:	1e04      	subs	r4, r0, #0
1000b164:	d106      	bne.n	1000b174 <ble_send_slave_sec_request+0x1c>
		{
			DBG_LOG_DEV("Slave security request successful");
1000b166:	4809      	ldr	r0, [pc, #36]	; (1000b18c <ble_send_slave_sec_request+0x34>)
1000b168:	4b09      	ldr	r3, [pc, #36]	; (1000b190 <ble_send_slave_sec_request+0x38>)
1000b16a:	4798      	blx	r3
1000b16c:	4809      	ldr	r0, [pc, #36]	; (1000b194 <ble_send_slave_sec_request+0x3c>)
1000b16e:	4b0a      	ldr	r3, [pc, #40]	; (1000b198 <ble_send_slave_sec_request+0x40>)
1000b170:	4798      	blx	r3
			return AT_BLE_SUCCESS;
1000b172:	e006      	b.n	1000b182 <ble_send_slave_sec_request+0x2a>
		}
		else
		{
			DBG_LOG("Slave security request failed");
1000b174:	4805      	ldr	r0, [pc, #20]	; (1000b18c <ble_send_slave_sec_request+0x34>)
1000b176:	4b06      	ldr	r3, [pc, #24]	; (1000b190 <ble_send_slave_sec_request+0x38>)
1000b178:	4798      	blx	r3
1000b17a:	4808      	ldr	r0, [pc, #32]	; (1000b19c <ble_send_slave_sec_request+0x44>)
1000b17c:	4b06      	ldr	r3, [pc, #24]	; (1000b198 <ble_send_slave_sec_request+0x40>)
1000b17e:	4798      	blx	r3
		}
	#endif
	return AT_BLE_FAILURE;
1000b180:	24e2      	movs	r4, #226	; 0xe2
}
1000b182:	0020      	movs	r0, r4
1000b184:	bd10      	pop	{r4, pc}
1000b186:	46c0      	nop			; (mov r8, r8)
1000b188:	1000d7b5 	.word	0x1000d7b5
1000b18c:	100116bc 	.word	0x100116bc
1000b190:	10010565 	.word	0x10010565
1000b194:	100126ec 	.word	0x100126ec
1000b198:	10010445 	.word	0x10010445
1000b19c:	10012710 	.word	0x10012710

1000b1a0 <ble_connected_state_handler>:
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000b1a0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b1a2:	465f      	mov	r7, fp
1000b1a4:	464e      	mov	r6, r9
1000b1a6:	4645      	mov	r5, r8
1000b1a8:	b4e0      	push	{r5, r6, r7}
1000b1aa:	b09a      	sub	sp, #104	; 0x68
1000b1ac:	0005      	movs	r5, r0
	at_ble_connected_t *conn_params;
	uint8_t idx = 0;
	conn_params = (at_ble_connected_t *)params;
	bool peripheral_device_added = false;
	
	if (conn_params->conn_status == AT_BLE_SUCCESS)
1000b1ae:	7a86      	ldrb	r6, [r0, #10]
1000b1b0:	2e00      	cmp	r6, #0
1000b1b2:	d000      	beq.n	1000b1b6 <ble_connected_state_handler+0x16>
1000b1b4:	e0cc      	b.n	1000b350 <ble_connected_state_handler+0x1b0>
	{
		DBG_LOG("Connected to peer device with address 0x%02x%02x%02x%02x%02x%02x",
1000b1b6:	4878      	ldr	r0, [pc, #480]	; (1000b398 <ble_connected_state_handler+0x1f8>)
1000b1b8:	4f78      	ldr	r7, [pc, #480]	; (1000b39c <ble_connected_state_handler+0x1fc>)
1000b1ba:	47b8      	blx	r7
1000b1bc:	792b      	ldrb	r3, [r5, #4]
1000b1be:	796a      	ldrb	r2, [r5, #5]
1000b1c0:	79a9      	ldrb	r1, [r5, #6]
1000b1c2:	7868      	ldrb	r0, [r5, #1]
1000b1c4:	9002      	str	r0, [sp, #8]
1000b1c6:	78a8      	ldrb	r0, [r5, #2]
1000b1c8:	9001      	str	r0, [sp, #4]
1000b1ca:	78e8      	ldrb	r0, [r5, #3]
1000b1cc:	9000      	str	r0, [sp, #0]
1000b1ce:	4874      	ldr	r0, [pc, #464]	; (1000b3a0 <ble_connected_state_handler+0x200>)
1000b1d0:	4c74      	ldr	r4, [pc, #464]	; (1000b3a4 <ble_connected_state_handler+0x204>)
1000b1d2:	47a0      	blx	r4
		conn_params->peer_addr.addr[3],
		conn_params->peer_addr.addr[2],
		conn_params->peer_addr.addr[1],
		conn_params->peer_addr.addr[0]);
		
		DBG_LOG("Connection Handle %d", conn_params->handle);
1000b1d4:	4870      	ldr	r0, [pc, #448]	; (1000b398 <ble_connected_state_handler+0x1f8>)
1000b1d6:	47b8      	blx	r7
1000b1d8:	8929      	ldrh	r1, [r5, #8]
1000b1da:	4873      	ldr	r0, [pc, #460]	; (1000b3a8 <ble_connected_state_handler+0x208>)
1000b1dc:	47a0      	blx	r4
		
		memcpy((uint8_t *)&connected_state_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));	
1000b1de:	2212      	movs	r2, #18
1000b1e0:	0029      	movs	r1, r5
1000b1e2:	4872      	ldr	r0, [pc, #456]	; (1000b3ac <ble_connected_state_handler+0x20c>)
1000b1e4:	4b72      	ldr	r3, [pc, #456]	; (1000b3b0 <ble_connected_state_handler+0x210>)
1000b1e6:	4798      	blx	r3
		if(memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000b1e8:	9504      	str	r5, [sp, #16]
1000b1ea:	2207      	movs	r2, #7
1000b1ec:	0029      	movs	r1, r5
1000b1ee:	4871      	ldr	r0, [pc, #452]	; (1000b3b4 <ble_connected_state_handler+0x214>)
1000b1f0:	4b71      	ldr	r3, [pc, #452]	; (1000b3b8 <ble_connected_state_handler+0x218>)
1000b1f2:	4798      	blx	r3
1000b1f4:	2800      	cmp	r0, #0
1000b1f6:	d100      	bne.n	1000b1fa <ble_connected_state_handler+0x5a>
1000b1f8:	e0b3      	b.n	1000b362 <ble_connected_state_handler+0x1c2>
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
1000b1fa:	782b      	ldrb	r3, [r5, #0]
1000b1fc:	2b02      	cmp	r3, #2
1000b1fe:	d000      	beq.n	1000b202 <ble_connected_state_handler+0x62>
1000b200:	e0af      	b.n	1000b362 <ble_connected_state_handler+0x1c2>
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
1000b202:	2250      	movs	r2, #80	; 0x50
1000b204:	2100      	movs	r1, #0
1000b206:	a806      	add	r0, sp, #24
1000b208:	4b6c      	ldr	r3, [pc, #432]	; (1000b3bc <ble_connected_state_handler+0x21c>)
1000b20a:	4798      	blx	r3
1000b20c:	4f6c      	ldr	r7, [pc, #432]	; (1000b3c0 <ble_connected_state_handler+0x220>)
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
1000b20e:	2300      	movs	r3, #0
1000b210:	e00b      	b.n	1000b22a <ble_connected_state_handler+0x8a>
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000b212:	1c59      	adds	r1, r3, #1
1000b214:	7814      	ldrb	r4, [r2, #0]
1000b216:	a806      	add	r0, sp, #24
1000b218:	54c4      	strb	r4, [r0, r3]
1000b21a:	3201      	adds	r2, #1
1000b21c:	b28b      	uxth	r3, r1
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
1000b21e:	42b3      	cmp	r3, r6
1000b220:	d1f7      	bne.n	1000b212 <ble_connected_state_handler+0x72>
1000b222:	377c      	adds	r7, #124	; 0x7c
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000b224:	1e33      	subs	r3, r6, #0
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
1000b226:	2b50      	cmp	r3, #80	; 0x50
1000b228:	d004      	beq.n	1000b234 <ble_connected_state_handler+0x94>
1000b22a:	001e      	movs	r6, r3
1000b22c:	3610      	adds	r6, #16
1000b22e:	b2b6      	uxth	r6, r6
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000b230:	003a      	movs	r2, r7
1000b232:	e7ee      	b.n	1000b212 <ble_connected_state_handler+0x72>
					}
					
				}
				if (nb_keys)
				{
					if(at_ble_random_address_resolve(BLE_MAX_DEVICE_CONNECTED, &conn_params->peer_addr, irk_key) == AT_BLE_SUCCESS)
1000b234:	aa06      	add	r2, sp, #24
1000b236:	0029      	movs	r1, r5
1000b238:	2005      	movs	r0, #5
1000b23a:	4b62      	ldr	r3, [pc, #392]	; (1000b3c4 <ble_connected_state_handler+0x224>)
1000b23c:	4798      	blx	r3
1000b23e:	1e06      	subs	r6, r0, #0
1000b240:	d106      	bne.n	1000b250 <ble_connected_state_handler+0xb0>
					{
						DBG_LOG_DEV("Resolving Random address success**");
1000b242:	4855      	ldr	r0, [pc, #340]	; (1000b398 <ble_connected_state_handler+0x1f8>)
1000b244:	4b55      	ldr	r3, [pc, #340]	; (1000b39c <ble_connected_state_handler+0x1fc>)
1000b246:	4798      	blx	r3
1000b248:	485f      	ldr	r0, [pc, #380]	; (1000b3c8 <ble_connected_state_handler+0x228>)
1000b24a:	4b56      	ldr	r3, [pc, #344]	; (1000b3a4 <ble_connected_state_handler+0x204>)
1000b24c:	4798      	blx	r3
						return AT_BLE_SUCCESS;
1000b24e:	e09c      	b.n	1000b38a <ble_connected_state_handler+0x1ea>
					}
					else
					{
						DBG_LOG("Resolving Random address failed**");
1000b250:	4851      	ldr	r0, [pc, #324]	; (1000b398 <ble_connected_state_handler+0x1f8>)
1000b252:	4b52      	ldr	r3, [pc, #328]	; (1000b39c <ble_connected_state_handler+0x1fc>)
1000b254:	4798      	blx	r3
1000b256:	485d      	ldr	r0, [pc, #372]	; (1000b3cc <ble_connected_state_handler+0x22c>)
1000b258:	4b52      	ldr	r3, [pc, #328]	; (1000b3a4 <ble_connected_state_handler+0x204>)
1000b25a:	4798      	blx	r3
						return AT_BLE_FAILURE;
1000b25c:	26e2      	movs	r6, #226	; 0xe2
1000b25e:	e094      	b.n	1000b38a <ble_connected_state_handler+0x1ea>
1000b260:	b2e7      	uxtb	r7, r4
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000b262:	9405      	str	r4, [sp, #20]
1000b264:	2207      	movs	r2, #7
1000b266:	9904      	ldr	r1, [sp, #16]
1000b268:	4648      	mov	r0, r9
1000b26a:	47d8      	blx	fp
1000b26c:	2800      	cmp	r0, #0
1000b26e:	d109      	bne.n	1000b284 <ble_connected_state_handler+0xe4>
				{
					ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000b270:	9a05      	ldr	r2, [sp, #20]
1000b272:	0153      	lsls	r3, r2, #5
1000b274:	1a9b      	subs	r3, r3, r2
1000b276:	009a      	lsls	r2, r3, #2
1000b278:	4b55      	ldr	r3, [pc, #340]	; (1000b3d0 <ble_connected_state_handler+0x230>)
1000b27a:	189b      	adds	r3, r3, r2
1000b27c:	335e      	adds	r3, #94	; 0x5e
1000b27e:	2202      	movs	r2, #2
1000b280:	701a      	strb	r2, [r3, #0]
1000b282:	e02b      	b.n	1000b2dc <ble_connected_state_handler+0x13c>
1000b284:	3401      	adds	r4, #1
1000b286:	237c      	movs	r3, #124	; 0x7c
1000b288:	469c      	mov	ip, r3
1000b28a:	44e1      	add	r9, ip
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000b28c:	2c05      	cmp	r4, #5
1000b28e:	d1e7      	bne.n	1000b260 <ble_connected_state_handler+0xc0>
1000b290:	e072      	b.n	1000b378 <ble_connected_state_handler+0x1d8>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000b292:	001c      	movs	r4, r3
1000b294:	7811      	ldrb	r1, [r2, #0]
1000b296:	2900      	cmp	r1, #0
1000b298:	d11a      	bne.n	1000b2d0 <ble_connected_state_handler+0x130>
1000b29a:	e001      	b.n	1000b2a0 <ble_connected_state_handler+0x100>
1000b29c:	2400      	movs	r4, #0
1000b29e:	2700      	movs	r7, #0
					{
						/* @Todo Need to Handle Random Address */
						memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));
1000b2a0:	0163      	lsls	r3, r4, #5
1000b2a2:	4699      	mov	r9, r3
1000b2a4:	1b18      	subs	r0, r3, r4
1000b2a6:	0080      	lsls	r0, r0, #2
1000b2a8:	4b49      	ldr	r3, [pc, #292]	; (1000b3d0 <ble_connected_state_handler+0x230>)
1000b2aa:	4698      	mov	r8, r3
1000b2ac:	4440      	add	r0, r8
1000b2ae:	2212      	movs	r2, #18
1000b2b0:	0029      	movs	r1, r5
1000b2b2:	4b3f      	ldr	r3, [pc, #252]	; (1000b3b0 <ble_connected_state_handler+0x210>)
1000b2b4:	4798      	blx	r3
						ble_device_count++;
1000b2b6:	4a47      	ldr	r2, [pc, #284]	; (1000b3d4 <ble_connected_state_handler+0x234>)
1000b2b8:	7813      	ldrb	r3, [r2, #0]
1000b2ba:	3301      	adds	r3, #1
1000b2bc:	b2db      	uxtb	r3, r3
1000b2be:	7013      	strb	r3, [r2, #0]
						ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000b2c0:	464b      	mov	r3, r9
1000b2c2:	1b1b      	subs	r3, r3, r4
1000b2c4:	009b      	lsls	r3, r3, #2
1000b2c6:	4443      	add	r3, r8
1000b2c8:	335e      	adds	r3, #94	; 0x5e
1000b2ca:	2202      	movs	r2, #2
1000b2cc:	701a      	strb	r2, [r3, #0]
						break;
1000b2ce:	e005      	b.n	1000b2dc <ble_connected_state_handler+0x13c>
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000b2d0:	1c79      	adds	r1, r7, #1
1000b2d2:	b2cf      	uxtb	r7, r1
1000b2d4:	3301      	adds	r3, #1
1000b2d6:	327c      	adds	r2, #124	; 0x7c
1000b2d8:	2f05      	cmp	r7, #5
1000b2da:	d1da      	bne.n	1000b292 <ble_connected_state_handler+0xf2>
						break;
					}
				}
			}
			
			if(!memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000b2dc:	2207      	movs	r2, #7
1000b2de:	0029      	movs	r1, r5
1000b2e0:	4834      	ldr	r0, [pc, #208]	; (1000b3b4 <ble_connected_state_handler+0x214>)
1000b2e2:	4b35      	ldr	r3, [pc, #212]	; (1000b3b8 <ble_connected_state_handler+0x218>)
1000b2e4:	4798      	blx	r3
1000b2e6:	2800      	cmp	r0, #0
1000b2e8:	d10c      	bne.n	1000b304 <ble_connected_state_handler+0x164>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
1000b2ea:	017b      	lsls	r3, r7, #5
1000b2ec:	1bdb      	subs	r3, r3, r7
1000b2ee:	009b      	lsls	r3, r3, #2
1000b2f0:	4a37      	ldr	r2, [pc, #220]	; (1000b3d0 <ble_connected_state_handler+0x230>)
1000b2f2:	18d3      	adds	r3, r2, r3
1000b2f4:	2205      	movs	r2, #5
1000b2f6:	749a      	strb	r2, [r3, #18]
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000b2f8:	3202      	adds	r2, #2
1000b2fa:	2100      	movs	r1, #0
1000b2fc:	482d      	ldr	r0, [pc, #180]	; (1000b3b4 <ble_connected_state_handler+0x214>)
1000b2fe:	4b2f      	ldr	r3, [pc, #188]	; (1000b3bc <ble_connected_state_handler+0x21c>)
1000b300:	4798      	blx	r3
1000b302:	e042      	b.n	1000b38a <ble_connected_state_handler+0x1ea>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
			}
			else
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000b304:	4b32      	ldr	r3, [pc, #200]	; (1000b3d0 <ble_connected_state_handler+0x230>)
1000b306:	4698      	mov	r8, r3
1000b308:	017c      	lsls	r4, r7, #5
1000b30a:	1be3      	subs	r3, r4, r7
1000b30c:	009b      	lsls	r3, r3, #2
1000b30e:	4443      	add	r3, r8
1000b310:	220a      	movs	r2, #10
1000b312:	749a      	strb	r2, [r3, #18]
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000b314:	3a03      	subs	r2, #3
1000b316:	2100      	movs	r1, #0
1000b318:	4826      	ldr	r0, [pc, #152]	; (1000b3b4 <ble_connected_state_handler+0x214>)
1000b31a:	4b28      	ldr	r3, [pc, #160]	; (1000b3bc <ble_connected_state_handler+0x21c>)
1000b31c:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
		}		
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000b31e:	1be4      	subs	r4, r4, r7
1000b320:	00a4      	lsls	r4, r4, #2
1000b322:	4444      	add	r4, r8
1000b324:	7ca3      	ldrb	r3, [r4, #18]
1000b326:	2b0a      	cmp	r3, #10
1000b328:	d12f      	bne.n	1000b38a <ble_connected_state_handler+0x1ea>
1000b32a:	e00d      	b.n	1000b348 <ble_connected_state_handler+0x1a8>
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
					
		}
		else
		{
			DBG_LOG("Max number of connection reached: %d ===>Disconnecting...", ble_device_count);
1000b32c:	481a      	ldr	r0, [pc, #104]	; (1000b398 <ble_connected_state_handler+0x1f8>)
1000b32e:	4b1b      	ldr	r3, [pc, #108]	; (1000b39c <ble_connected_state_handler+0x1fc>)
1000b330:	4798      	blx	r3
1000b332:	4b28      	ldr	r3, [pc, #160]	; (1000b3d4 <ble_connected_state_handler+0x234>)
1000b334:	7819      	ldrb	r1, [r3, #0]
1000b336:	b2c9      	uxtb	r1, r1
1000b338:	4827      	ldr	r0, [pc, #156]	; (1000b3d8 <ble_connected_state_handler+0x238>)
1000b33a:	4b1a      	ldr	r3, [pc, #104]	; (1000b3a4 <ble_connected_state_handler+0x204>)
1000b33c:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
1000b33e:	8928      	ldrh	r0, [r5, #8]
1000b340:	2113      	movs	r1, #19
1000b342:	4b26      	ldr	r3, [pc, #152]	; (1000b3dc <ble_connected_state_handler+0x23c>)
1000b344:	4798      	blx	r3
1000b346:	e020      	b.n	1000b38a <ble_connected_state_handler+0x1ea>
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
        {
	 		ble_send_slave_sec_request(conn_params->handle);
1000b348:	8928      	ldrh	r0, [r5, #8]
1000b34a:	4b25      	ldr	r3, [pc, #148]	; (1000b3e0 <ble_connected_state_handler+0x240>)
1000b34c:	4798      	blx	r3
1000b34e:	e01c      	b.n	1000b38a <ble_connected_state_handler+0x1ea>
        }
#endif
	} 
	else
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
1000b350:	4811      	ldr	r0, [pc, #68]	; (1000b398 <ble_connected_state_handler+0x1f8>)
1000b352:	4b12      	ldr	r3, [pc, #72]	; (1000b39c <ble_connected_state_handler+0x1fc>)
1000b354:	4798      	blx	r3
1000b356:	7aa9      	ldrb	r1, [r5, #10]
1000b358:	4822      	ldr	r0, [pc, #136]	; (1000b3e4 <ble_connected_state_handler+0x244>)
1000b35a:	4b12      	ldr	r3, [pc, #72]	; (1000b3a4 <ble_connected_state_handler+0x204>)
1000b35c:	4798      	blx	r3
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
1000b35e:	2600      	movs	r6, #0
1000b360:	e013      	b.n	1000b38a <ble_connected_state_handler+0x1ea>
					DBG_LOG_DEV("New Connection");
				}				
			}
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
1000b362:	4b1c      	ldr	r3, [pc, #112]	; (1000b3d4 <ble_connected_state_handler+0x234>)
1000b364:	781b      	ldrb	r3, [r3, #0]
1000b366:	b2db      	uxtb	r3, r3
1000b368:	2b04      	cmp	r3, #4
1000b36a:	d8df      	bhi.n	1000b32c <ble_connected_state_handler+0x18c>
1000b36c:	4b18      	ldr	r3, [pc, #96]	; (1000b3d0 <ble_connected_state_handler+0x230>)
1000b36e:	4699      	mov	r9, r3
1000b370:	2400      	movs	r4, #0
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000b372:	4b11      	ldr	r3, [pc, #68]	; (1000b3b8 <ble_connected_state_handler+0x218>)
1000b374:	469b      	mov	fp, r3
1000b376:	e773      	b.n	1000b260 <ble_connected_state_handler+0xc0>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000b378:	235e      	movs	r3, #94	; 0x5e
1000b37a:	4a15      	ldr	r2, [pc, #84]	; (1000b3d0 <ble_connected_state_handler+0x230>)
1000b37c:	5cd3      	ldrb	r3, [r2, r3]
1000b37e:	2b00      	cmp	r3, #0
1000b380:	d08c      	beq.n	1000b29c <ble_connected_state_handler+0xfc>
1000b382:	4a19      	ldr	r2, [pc, #100]	; (1000b3e8 <ble_connected_state_handler+0x248>)
1000b384:	2301      	movs	r3, #1
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000b386:	2701      	movs	r7, #1
1000b388:	e783      	b.n	1000b292 <ble_connected_state_handler+0xf2>
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
}
1000b38a:	0030      	movs	r0, r6
1000b38c:	b01a      	add	sp, #104	; 0x68
1000b38e:	bc1c      	pop	{r2, r3, r4}
1000b390:	4690      	mov	r8, r2
1000b392:	4699      	mov	r9, r3
1000b394:	46a3      	mov	fp, r4
1000b396:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b398:	100116bc 	.word	0x100116bc
1000b39c:	10010565 	.word	0x10010565
1000b3a0:	10012730 	.word	0x10012730
1000b3a4:	10010445 	.word	0x10010445
1000b3a8:	10012774 	.word	0x10012774
1000b3ac:	100149f8 	.word	0x100149f8
1000b3b0:	10010423 	.word	0x10010423
1000b3b4:	10013468 	.word	0x10013468
1000b3b8:	10010405 	.word	0x10010405
1000b3bc:	10010435 	.word	0x10010435
1000b3c0:	10014792 	.word	0x10014792
1000b3c4:	1000d1f9 	.word	0x1000d1f9
1000b3c8:	1001278c 	.word	0x1001278c
1000b3cc:	100127b0 	.word	0x100127b0
1000b3d0:	1001474c 	.word	0x1001474c
1000b3d4:	100149b8 	.word	0x100149b8
1000b3d8:	100127d4 	.word	0x100127d4
1000b3dc:	1000d1cd 	.word	0x1000d1cd
1000b3e0:	1000b159 	.word	0x1000b159
1000b3e4:	10012810 	.word	0x10012810
1000b3e8:	10014826 	.word	0x10014826

1000b3ec <ble_resolv_rand_addr_handler>:

at_ble_status_t ble_resolv_rand_addr_handler(void *params)
{
1000b3ec:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b3ee:	4647      	mov	r7, r8
1000b3f0:	b480      	push	{r7}
	uint8_t idx;	
	bool device_found = false;
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
1000b3f2:	7803      	ldrb	r3, [r0, #0]
1000b3f4:	2b00      	cmp	r3, #0
1000b3f6:	d152      	bne.n	1000b49e <ble_resolv_rand_addr_handler+0xb2>
1000b3f8:	4d3e      	ldr	r5, [pc, #248]	; (1000b4f4 <ble_resolv_rand_addr_handler+0x108>)
1000b3fa:	2400      	movs	r4, #0
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			/* Check the Resolved Address */
			if (!memcmp((uint8_t *)ble_resolv_rand_addr_status->irk, (uint8_t *)ble_dev_info[idx].bond_info.peer_irk.key, AT_BLE_MAX_KEY_LEN))
1000b3fc:	1c46      	adds	r6, r0, #1
1000b3fe:	4f3e      	ldr	r7, [pc, #248]	; (1000b4f8 <ble_resolv_rand_addr_handler+0x10c>)
1000b400:	2210      	movs	r2, #16
1000b402:	0029      	movs	r1, r5
1000b404:	0030      	movs	r0, r6
1000b406:	47b8      	blx	r7
1000b408:	2800      	cmp	r0, #0
1000b40a:	d031      	beq.n	1000b470 <ble_resolv_rand_addr_handler+0x84>
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000b40c:	3401      	adds	r4, #1
1000b40e:	b2e4      	uxtb	r4, r4
1000b410:	357c      	adds	r5, #124	; 0x7c
1000b412:	2c05      	cmp	r4, #5
1000b414:	d1f4      	bne.n	1000b400 <ble_resolv_rand_addr_handler+0x14>
1000b416:	e042      	b.n	1000b49e <ble_resolv_rand_addr_handler+0xb2>
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000b418:	001d      	movs	r5, r3
1000b41a:	7811      	ldrb	r1, [r2, #0]
1000b41c:	2900      	cmp	r1, #0
1000b41e:	d11b      	bne.n	1000b458 <ble_resolv_rand_addr_handler+0x6c>
1000b420:	e001      	b.n	1000b426 <ble_resolv_rand_addr_handler+0x3a>
1000b422:	2500      	movs	r5, #0
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000b424:	2400      	movs	r4, #0
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
			{
				memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000b426:	4b35      	ldr	r3, [pc, #212]	; (1000b4fc <ble_resolv_rand_addr_handler+0x110>)
1000b428:	4698      	mov	r8, r3
1000b42a:	016e      	lsls	r6, r5, #5
1000b42c:	1b77      	subs	r7, r6, r5
1000b42e:	00bf      	lsls	r7, r7, #2
1000b430:	4447      	add	r7, r8
1000b432:	2212      	movs	r2, #18
1000b434:	4932      	ldr	r1, [pc, #200]	; (1000b500 <ble_resolv_rand_addr_handler+0x114>)
1000b436:	0038      	movs	r0, r7
1000b438:	4b32      	ldr	r3, [pc, #200]	; (1000b504 <ble_resolv_rand_addr_handler+0x118>)
1000b43a:	4798      	blx	r3
				ble_device_count++;
1000b43c:	4a32      	ldr	r2, [pc, #200]	; (1000b508 <ble_resolv_rand_addr_handler+0x11c>)
1000b43e:	7813      	ldrb	r3, [r2, #0]
1000b440:	3301      	adds	r3, #1
1000b442:	b2db      	uxtb	r3, r3
1000b444:	7013      	strb	r3, [r2, #0]
				ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000b446:	375e      	adds	r7, #94	; 0x5e
1000b448:	2302      	movs	r3, #2
1000b44a:	703b      	strb	r3, [r7, #0]
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000b44c:	1b75      	subs	r5, r6, r5
1000b44e:	00ad      	lsls	r5, r5, #2
1000b450:	4445      	add	r5, r8
1000b452:	3308      	adds	r3, #8
1000b454:	74ab      	strb	r3, [r5, #18]
				peripheral_device_added = true;
				break;
1000b456:	e031      	b.n	1000b4bc <ble_resolv_rand_addr_handler+0xd0>
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000b458:	3401      	adds	r4, #1
1000b45a:	b2e4      	uxtb	r4, r4
1000b45c:	3301      	adds	r3, #1
1000b45e:	327c      	adds	r2, #124	; 0x7c
1000b460:	2c05      	cmp	r4, #5
1000b462:	d1d9      	bne.n	1000b418 <ble_resolv_rand_addr_handler+0x2c>
1000b464:	e03a      	b.n	1000b4dc <ble_resolv_rand_addr_handler+0xf0>
	}
	DBG_LOG_DEV("Device idx:%d",idx);
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
	{
		ble_send_slave_sec_request(connected_state_info.handle);
1000b466:	4b26      	ldr	r3, [pc, #152]	; (1000b500 <ble_resolv_rand_addr_handler+0x114>)
1000b468:	8918      	ldrh	r0, [r3, #8]
1000b46a:	4b28      	ldr	r3, [pc, #160]	; (1000b50c <ble_resolv_rand_addr_handler+0x120>)
1000b46c:	4798      	blx	r3
1000b46e:	e03c      	b.n	1000b4ea <ble_resolv_rand_addr_handler+0xfe>
		
	}
	
	if (device_found)
	{
		DBG_LOG_DEV("##########Device Found");
1000b470:	4827      	ldr	r0, [pc, #156]	; (1000b510 <ble_resolv_rand_addr_handler+0x124>)
1000b472:	4b28      	ldr	r3, [pc, #160]	; (1000b514 <ble_resolv_rand_addr_handler+0x128>)
1000b474:	4798      	blx	r3
1000b476:	4828      	ldr	r0, [pc, #160]	; (1000b518 <ble_resolv_rand_addr_handler+0x12c>)
1000b478:	4b28      	ldr	r3, [pc, #160]	; (1000b51c <ble_resolv_rand_addr_handler+0x130>)
1000b47a:	4798      	blx	r3
		ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000b47c:	481f      	ldr	r0, [pc, #124]	; (1000b4fc <ble_resolv_rand_addr_handler+0x110>)
1000b47e:	0163      	lsls	r3, r4, #5
1000b480:	1b1a      	subs	r2, r3, r4
1000b482:	0092      	lsls	r2, r2, #2
1000b484:	1882      	adds	r2, r0, r2
1000b486:	0011      	movs	r1, r2
1000b488:	315e      	adds	r1, #94	; 0x5e
1000b48a:	2502      	movs	r5, #2
1000b48c:	700d      	strb	r5, [r1, #0]
		ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000b48e:	210a      	movs	r1, #10
1000b490:	7491      	strb	r1, [r2, #18]
		memcpy((uint8_t *)&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000b492:	0010      	movs	r0, r2
1000b494:	2212      	movs	r2, #18
1000b496:	491a      	ldr	r1, [pc, #104]	; (1000b500 <ble_resolv_rand_addr_handler+0x114>)
1000b498:	4b1a      	ldr	r3, [pc, #104]	; (1000b504 <ble_resolv_rand_addr_handler+0x118>)
1000b49a:	4798      	blx	r3
1000b49c:	e00e      	b.n	1000b4bc <ble_resolv_rand_addr_handler+0xd0>
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
1000b49e:	481c      	ldr	r0, [pc, #112]	; (1000b510 <ble_resolv_rand_addr_handler+0x124>)
1000b4a0:	4b1c      	ldr	r3, [pc, #112]	; (1000b514 <ble_resolv_rand_addr_handler+0x128>)
1000b4a2:	4798      	blx	r3
1000b4a4:	481e      	ldr	r0, [pc, #120]	; (1000b520 <ble_resolv_rand_addr_handler+0x134>)
1000b4a6:	4b1d      	ldr	r3, [pc, #116]	; (1000b51c <ble_resolv_rand_addr_handler+0x130>)
1000b4a8:	4798      	blx	r3
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000b4aa:	235e      	movs	r3, #94	; 0x5e
1000b4ac:	4a13      	ldr	r2, [pc, #76]	; (1000b4fc <ble_resolv_rand_addr_handler+0x110>)
1000b4ae:	5cd3      	ldrb	r3, [r2, r3]
1000b4b0:	2b00      	cmp	r3, #0
1000b4b2:	d0b6      	beq.n	1000b422 <ble_resolv_rand_addr_handler+0x36>
1000b4b4:	4a1b      	ldr	r2, [pc, #108]	; (1000b524 <ble_resolv_rand_addr_handler+0x138>)
1000b4b6:	2301      	movs	r3, #1
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000b4b8:	2401      	movs	r4, #1
1000b4ba:	e7ad      	b.n	1000b418 <ble_resolv_rand_addr_handler+0x2c>
				peripheral_device_added = true;
				break;
			}
		}
	}
	DBG_LOG_DEV("Device idx:%d",idx);
1000b4bc:	4814      	ldr	r0, [pc, #80]	; (1000b510 <ble_resolv_rand_addr_handler+0x124>)
1000b4be:	4b15      	ldr	r3, [pc, #84]	; (1000b514 <ble_resolv_rand_addr_handler+0x128>)
1000b4c0:	4798      	blx	r3
1000b4c2:	0021      	movs	r1, r4
1000b4c4:	4818      	ldr	r0, [pc, #96]	; (1000b528 <ble_resolv_rand_addr_handler+0x13c>)
1000b4c6:	4b15      	ldr	r3, [pc, #84]	; (1000b51c <ble_resolv_rand_addr_handler+0x130>)
1000b4c8:	4798      	blx	r3
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000b4ca:	0163      	lsls	r3, r4, #5
1000b4cc:	1b1c      	subs	r4, r3, r4
1000b4ce:	00a4      	lsls	r4, r4, #2
1000b4d0:	4b0a      	ldr	r3, [pc, #40]	; (1000b4fc <ble_resolv_rand_addr_handler+0x110>)
1000b4d2:	191c      	adds	r4, r3, r4
1000b4d4:	7ca3      	ldrb	r3, [r4, #18]
1000b4d6:	2b0a      	cmp	r3, #10
1000b4d8:	d107      	bne.n	1000b4ea <ble_resolv_rand_addr_handler+0xfe>
1000b4da:	e7c4      	b.n	1000b466 <ble_resolv_rand_addr_handler+0x7a>
				peripheral_device_added = true;
				break;
			}
		}
	}
	DBG_LOG_DEV("Device idx:%d",idx);
1000b4dc:	480c      	ldr	r0, [pc, #48]	; (1000b510 <ble_resolv_rand_addr_handler+0x124>)
1000b4de:	4b0d      	ldr	r3, [pc, #52]	; (1000b514 <ble_resolv_rand_addr_handler+0x128>)
1000b4e0:	4798      	blx	r3
1000b4e2:	2105      	movs	r1, #5
1000b4e4:	4810      	ldr	r0, [pc, #64]	; (1000b528 <ble_resolv_rand_addr_handler+0x13c>)
1000b4e6:	4b0d      	ldr	r3, [pc, #52]	; (1000b51c <ble_resolv_rand_addr_handler+0x130>)
1000b4e8:	4798      	blx	r3
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
	
}
1000b4ea:	2000      	movs	r0, #0
1000b4ec:	bc04      	pop	{r2}
1000b4ee:	4690      	mov	r8, r2
1000b4f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b4f2:	46c0      	nop			; (mov r8, r8)
1000b4f4:	10014792 	.word	0x10014792
1000b4f8:	10010405 	.word	0x10010405
1000b4fc:	1001474c 	.word	0x1001474c
1000b500:	100149f8 	.word	0x100149f8
1000b504:	10010423 	.word	0x10010423
1000b508:	100149b8 	.word	0x100149b8
1000b50c:	1000b159 	.word	0x1000b159
1000b510:	100116bc 	.word	0x100116bc
1000b514:	10010565 	.word	0x10010565
1000b518:	10012838 	.word	0x10012838
1000b51c:	10010445 	.word	0x10010445
1000b520:	10012850 	.word	0x10012850
1000b524:	10014826 	.word	0x10014826
1000b528:	1001286c 	.word	0x1001286c

1000b52c <ble_connected_device_role>:
	}
	return false;
}

at_ble_status_t ble_connected_device_role(at_ble_handle_t conn_handle, at_ble_dev_role_t *dev_role)
{
1000b52c:	b530      	push	{r4, r5, lr}
1000b52e:	4a0d      	ldr	r2, [pc, #52]	; (1000b564 <ble_connected_device_role+0x38>)
1000b530:	2300      	movs	r3, #0
	uint8_t idx;
	at_ble_status_t status = AT_BLE_FAILURE;
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE) && 
1000b532:	001d      	movs	r5, r3
1000b534:	0014      	movs	r4, r2
1000b536:	345e      	adds	r4, #94	; 0x5e
1000b538:	7824      	ldrb	r4, [r4, #0]
1000b53a:	2c01      	cmp	r4, #1
1000b53c:	d90b      	bls.n	1000b556 <ble_connected_device_role+0x2a>
		  (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000b53e:	8914      	ldrh	r4, [r2, #8]
1000b540:	4284      	cmp	r4, r0
1000b542:	d108      	bne.n	1000b556 <ble_connected_device_role+0x2a>
		  (ble_dev_info[idx].conn_info.handle == conn_handle))
		{
			*dev_role = ble_dev_info[idx].dev_role;
1000b544:	015b      	lsls	r3, r3, #5
1000b546:	1b5d      	subs	r5, r3, r5
1000b548:	00ad      	lsls	r5, r5, #2
1000b54a:	4b06      	ldr	r3, [pc, #24]	; (1000b564 <ble_connected_device_role+0x38>)
1000b54c:	195d      	adds	r5, r3, r5
1000b54e:	7cab      	ldrb	r3, [r5, #18]
1000b550:	700b      	strb	r3, [r1, #0]
			status = AT_BLE_SUCCESS;
1000b552:	2000      	movs	r0, #0
			break;
1000b554:	e004      	b.n	1000b560 <ble_connected_device_role+0x34>
1000b556:	3301      	adds	r3, #1
1000b558:	327c      	adds	r2, #124	; 0x7c

at_ble_status_t ble_connected_device_role(at_ble_handle_t conn_handle, at_ble_dev_role_t *dev_role)
{
	uint8_t idx;
	at_ble_status_t status = AT_BLE_FAILURE;
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000b55a:	2b05      	cmp	r3, #5
1000b55c:	d1e9      	bne.n	1000b532 <ble_connected_device_role+0x6>
}

at_ble_status_t ble_connected_device_role(at_ble_handle_t conn_handle, at_ble_dev_role_t *dev_role)
{
	uint8_t idx;
	at_ble_status_t status = AT_BLE_FAILURE;
1000b55e:	20e2      	movs	r0, #226	; 0xe2
			status = AT_BLE_SUCCESS;
			break;
		}
	}
	return status;
}
1000b560:	bd30      	pop	{r4, r5, pc}
1000b562:	46c0      	nop			; (mov r8, r8)
1000b564:	1001474c 	.word	0x1001474c

1000b568 <ble_check_iscentral>:
	}
	return false;
}

bool ble_check_iscentral(at_ble_handle_t handle)
{
1000b568:	b500      	push	{lr}
1000b56a:	b083      	sub	sp, #12
	at_ble_dev_role_t dev_role = AT_BLE_ROLE_NONE;
1000b56c:	466b      	mov	r3, sp
1000b56e:	1dd9      	adds	r1, r3, #7
1000b570:	2300      	movs	r3, #0
1000b572:	700b      	strb	r3, [r1, #0]
	
	if(ble_connected_device_role(handle, &dev_role) == AT_BLE_SUCCESS)
1000b574:	4b07      	ldr	r3, [pc, #28]	; (1000b594 <ble_check_iscentral+0x2c>)
1000b576:	4798      	blx	r3
		if (dev_role == AT_BLE_ROLE_CENTRAL)
		{
			return true;
		}
	}
	return false;
1000b578:	2300      	movs	r3, #0

bool ble_check_iscentral(at_ble_handle_t handle)
{
	at_ble_dev_role_t dev_role = AT_BLE_ROLE_NONE;
	
	if(ble_connected_device_role(handle, &dev_role) == AT_BLE_SUCCESS)
1000b57a:	2800      	cmp	r0, #0
1000b57c:	d106      	bne.n	1000b58c <ble_check_iscentral+0x24>
	{
		if (dev_role == AT_BLE_ROLE_CENTRAL)
1000b57e:	466b      	mov	r3, sp
1000b580:	3307      	adds	r3, #7
1000b582:	781b      	ldrb	r3, [r3, #0]
1000b584:	3b05      	subs	r3, #5
1000b586:	4258      	negs	r0, r3
1000b588:	4143      	adcs	r3, r0
1000b58a:	b2db      	uxtb	r3, r3
		{
			return true;
		}
	}
	return false;
}
1000b58c:	0018      	movs	r0, r3
1000b58e:	b003      	add	sp, #12
1000b590:	bd00      	pop	{pc}
1000b592:	46c0      	nop			; (mov r8, r8)
1000b594:	1000b52d 	.word	0x1000b52d

1000b598 <ble_disconnected_device_role>:
	}
	return status;
}

at_ble_status_t ble_disconnected_device_role(at_ble_handle_t conn_handle, at_ble_dev_role_t *dev_role)
{
1000b598:	b530      	push	{r4, r5, lr}
1000b59a:	4a0d      	ldr	r2, [pc, #52]	; (1000b5d0 <ble_disconnected_device_role+0x38>)
1000b59c:	2300      	movs	r3, #0
	uint8_t idx;
	at_ble_status_t status = AT_BLE_FAILURE;
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if(((ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE) ||
1000b59e:	001d      	movs	r5, r3
1000b5a0:	0014      	movs	r4, r2
1000b5a2:	345e      	adds	r4, #94	; 0x5e
1000b5a4:	7824      	ldrb	r4, [r4, #0]
1000b5a6:	2c01      	cmp	r4, #1
1000b5a8:	d80b      	bhi.n	1000b5c2 <ble_disconnected_device_role+0x2a>
		(ble_dev_info[idx].conn_state == BLE_DEVICE_DISCONNECTED))&&
1000b5aa:	8914      	ldrh	r4, [r2, #8]
1000b5ac:	4284      	cmp	r4, r0
1000b5ae:	d108      	bne.n	1000b5c2 <ble_disconnected_device_role+0x2a>
		(ble_dev_info[idx].conn_info.handle == conn_handle))
		{
			*dev_role = ble_dev_info[idx].dev_role;
1000b5b0:	015b      	lsls	r3, r3, #5
1000b5b2:	1b5d      	subs	r5, r3, r5
1000b5b4:	00ad      	lsls	r5, r5, #2
1000b5b6:	4b06      	ldr	r3, [pc, #24]	; (1000b5d0 <ble_disconnected_device_role+0x38>)
1000b5b8:	195d      	adds	r5, r3, r5
1000b5ba:	7cab      	ldrb	r3, [r5, #18]
1000b5bc:	700b      	strb	r3, [r1, #0]
			status = AT_BLE_SUCCESS;
1000b5be:	2000      	movs	r0, #0
			break;
1000b5c0:	e004      	b.n	1000b5cc <ble_disconnected_device_role+0x34>
1000b5c2:	3301      	adds	r3, #1
1000b5c4:	327c      	adds	r2, #124	; 0x7c

at_ble_status_t ble_disconnected_device_role(at_ble_handle_t conn_handle, at_ble_dev_role_t *dev_role)
{
	uint8_t idx;
	at_ble_status_t status = AT_BLE_FAILURE;
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000b5c6:	2b05      	cmp	r3, #5
1000b5c8:	d1e9      	bne.n	1000b59e <ble_disconnected_device_role+0x6>
}

at_ble_status_t ble_disconnected_device_role(at_ble_handle_t conn_handle, at_ble_dev_role_t *dev_role)
{
	uint8_t idx;
	at_ble_status_t status = AT_BLE_FAILURE;
1000b5ca:	20e2      	movs	r0, #226	; 0xe2
			status = AT_BLE_SUCCESS;
			break;
		}
	}
	return status;
}
1000b5cc:	bd30      	pop	{r4, r5, pc}
1000b5ce:	46c0      	nop			; (mov r8, r8)
1000b5d0:	1001474c 	.word	0x1001474c

1000b5d4 <ble_check_disconnected_iscentral>:
	}
	return false;
}

bool ble_check_disconnected_iscentral(at_ble_handle_t handle)
{
1000b5d4:	b500      	push	{lr}
1000b5d6:	b083      	sub	sp, #12
	at_ble_dev_role_t dev_role;
	
	if(ble_disconnected_device_role(handle, &dev_role) == AT_BLE_SUCCESS)
1000b5d8:	466b      	mov	r3, sp
1000b5da:	1dd9      	adds	r1, r3, #7
1000b5dc:	4b07      	ldr	r3, [pc, #28]	; (1000b5fc <ble_check_disconnected_iscentral+0x28>)
1000b5de:	4798      	blx	r3
		if (dev_role == AT_BLE_ROLE_CENTRAL)
		{
			return true;
		}
	}
	return false;
1000b5e0:	2300      	movs	r3, #0

bool ble_check_disconnected_iscentral(at_ble_handle_t handle)
{
	at_ble_dev_role_t dev_role;
	
	if(ble_disconnected_device_role(handle, &dev_role) == AT_BLE_SUCCESS)
1000b5e2:	2800      	cmp	r0, #0
1000b5e4:	d106      	bne.n	1000b5f4 <ble_check_disconnected_iscentral+0x20>
	{
		if (dev_role == AT_BLE_ROLE_CENTRAL)
1000b5e6:	466b      	mov	r3, sp
1000b5e8:	3307      	adds	r3, #7
1000b5ea:	781b      	ldrb	r3, [r3, #0]
1000b5ec:	3b05      	subs	r3, #5
1000b5ee:	4258      	negs	r0, r3
1000b5f0:	4143      	adcs	r3, r0
1000b5f2:	b2db      	uxtb	r3, r3
		{
			return true;
		}
	}
	return false;
}
1000b5f4:	0018      	movs	r0, r3
1000b5f6:	b003      	add	sp, #12
1000b5f8:	bd00      	pop	{pc}
1000b5fa:	46c0      	nop			; (mov r8, r8)
1000b5fc:	1000b599 	.word	0x1000b599

1000b600 <ble_check_device_state>:
	}
	return status;
}

at_ble_status_t ble_check_device_state(at_ble_handle_t conn_handle, ble_device_state_t state)
{
1000b600:	b510      	push	{r4, lr}
1000b602:	4b09      	ldr	r3, [pc, #36]	; (1000b628 <ble_check_device_state+0x28>)
1000b604:	229b      	movs	r2, #155	; 0x9b
1000b606:	0092      	lsls	r2, r2, #2
1000b608:	189c      	adds	r4, r3, r2
	uint8_t idx;
	at_ble_status_t status = AT_BLE_FAILURE;
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_state == state) &&
1000b60a:	001a      	movs	r2, r3
1000b60c:	325e      	adds	r2, #94	; 0x5e
1000b60e:	7812      	ldrb	r2, [r2, #0]
1000b610:	428a      	cmp	r2, r1
1000b612:	d102      	bne.n	1000b61a <ble_check_device_state+0x1a>
1000b614:	891a      	ldrh	r2, [r3, #8]
1000b616:	4282      	cmp	r2, r0
1000b618:	d004      	beq.n	1000b624 <ble_check_device_state+0x24>
1000b61a:	337c      	adds	r3, #124	; 0x7c

at_ble_status_t ble_check_device_state(at_ble_handle_t conn_handle, ble_device_state_t state)
{
	uint8_t idx;
	at_ble_status_t status = AT_BLE_FAILURE;
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000b61c:	42a3      	cmp	r3, r4
1000b61e:	d1f4      	bne.n	1000b60a <ble_check_device_state+0xa>
}

at_ble_status_t ble_check_device_state(at_ble_handle_t conn_handle, ble_device_state_t state)
{
	uint8_t idx;
	at_ble_status_t status = AT_BLE_FAILURE;
1000b620:	20e2      	movs	r0, #226	; 0xe2
1000b622:	e000      	b.n	1000b626 <ble_check_device_state+0x26>
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_state == state) &&
		  (ble_dev_info[idx].conn_info.handle == conn_handle))
		{
			status = AT_BLE_SUCCESS;
1000b624:	2000      	movs	r0, #0
			break;
		}
	}
	return status;
}
1000b626:	bd10      	pop	{r4, pc}
1000b628:	1001474c 	.word	0x1001474c

1000b62c <ble_event_manager>:
	}
	return AT_BLE_SUCCESS;
}

void ble_event_manager(at_ble_events_t events, void *event_params)
{
1000b62c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000b62e:	0004      	movs	r4, r0
1000b630:	000d      	movs	r5, r1
	DBG_LOG_DEV("BLE-Event:%d", events);
1000b632:	4848      	ldr	r0, [pc, #288]	; (1000b754 <ble_event_manager+0x128>)
1000b634:	4b48      	ldr	r3, [pc, #288]	; (1000b758 <ble_event_manager+0x12c>)
1000b636:	4798      	blx	r3
1000b638:	0021      	movs	r1, r4
1000b63a:	4848      	ldr	r0, [pc, #288]	; (1000b75c <ble_event_manager+0x130>)
1000b63c:	4b48      	ldr	r3, [pc, #288]	; (1000b760 <ble_event_manager+0x134>)
1000b63e:	4798      	blx	r3
	switch(events)
1000b640:	2c3b      	cmp	r4, #59	; 0x3b
1000b642:	d879      	bhi.n	1000b738 <ble_event_manager+0x10c>
1000b644:	00a3      	lsls	r3, r4, #2
1000b646:	4a47      	ldr	r2, [pc, #284]	; (1000b764 <ble_event_manager+0x138>)
1000b648:	58d3      	ldr	r3, [r2, r3]
1000b64a:	469f      	mov	pc, r3
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000b64c:	00a4      	lsls	r4, r4, #2
1000b64e:	2600      	movs	r6, #0
		}
		#endif			
		
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
1000b650:	4f45      	ldr	r7, [pc, #276]	; (1000b768 <ble_event_manager+0x13c>)
1000b652:	59bb      	ldr	r3, [r7, r6]
1000b654:	2b00      	cmp	r3, #0
1000b656:	d004      	beq.n	1000b662 <ble_event_manager+0x36>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000b658:	591b      	ldr	r3, [r3, r4]
1000b65a:	2b00      	cmp	r3, #0
1000b65c:	d001      	beq.n	1000b662 <ble_event_manager+0x36>
				{
					event_cb_fn[events](event_params);		
1000b65e:	0028      	movs	r0, r5
1000b660:	4798      	blx	r3
1000b662:	3604      	adds	r6, #4
			if( ble_scan_duplication_check((at_ble_scan_info_t*)event_params) )
				return;
		}
		#endif			
		
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
1000b664:	2e14      	cmp	r6, #20
1000b666:	d1f4      	bne.n	1000b652 <ble_event_manager+0x26>
1000b668:	e072      	b.n	1000b750 <ble_event_manager+0x124>
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000b66a:	3c13      	subs	r4, #19
1000b66c:	b2e4      	uxtb	r4, r4
1000b66e:	00a4      	lsls	r4, r4, #2
1000b670:	2600      	movs	r6, #0
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
1000b672:	4f3e      	ldr	r7, [pc, #248]	; (1000b76c <ble_event_manager+0x140>)
1000b674:	59bb      	ldr	r3, [r7, r6]
1000b676:	2b00      	cmp	r3, #0
1000b678:	d004      	beq.n	1000b684 <ble_event_manager+0x58>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000b67a:	591b      	ldr	r3, [r3, r4]
1000b67c:	2b00      	cmp	r3, #0
1000b67e:	d001      	beq.n	1000b684 <ble_event_manager+0x58>
				{
					event_cb_fn[events](event_params);
1000b680:	0028      	movs	r0, r5
1000b682:	4798      	blx	r3
1000b684:	3604      	adds	r6, #4
	case AT_BLE_NOTIFICATION_RECIEVED:
	case AT_BLE_INDICATION_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
1000b686:	2e14      	cmp	r6, #20
1000b688:	d1f4      	bne.n	1000b674 <ble_event_manager+0x48>
1000b68a:	e061      	b.n	1000b750 <ble_event_manager+0x124>
	case AT_BLE_MTU_CHANGED_CMD_COMPLETE:
	case AT_BLE_CHARACTERISTIC_WRITE_CMD_CMP:
	case AT_BLE_READ_AUTHORIZE_REQUEST:
	{
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
1000b68c:	3c1d      	subs	r4, #29
1000b68e:	b2e4      	uxtb	r4, r4
		DBG_LOG_DEV("GATT_Server Event:%d", events);
1000b690:	4830      	ldr	r0, [pc, #192]	; (1000b754 <ble_event_manager+0x128>)
1000b692:	4b31      	ldr	r3, [pc, #196]	; (1000b758 <ble_event_manager+0x12c>)
1000b694:	4798      	blx	r3
1000b696:	0021      	movs	r1, r4
1000b698:	4835      	ldr	r0, [pc, #212]	; (1000b770 <ble_event_manager+0x144>)
1000b69a:	4b31      	ldr	r3, [pc, #196]	; (1000b760 <ble_event_manager+0x134>)
1000b69c:	4798      	blx	r3
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000b69e:	00a4      	lsls	r4, r4, #2
1000b6a0:	2600      	movs	r6, #0
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
1000b6a2:	4f34      	ldr	r7, [pc, #208]	; (1000b774 <ble_event_manager+0x148>)
1000b6a4:	59bb      	ldr	r3, [r7, r6]
1000b6a6:	2b00      	cmp	r3, #0
1000b6a8:	d004      	beq.n	1000b6b4 <ble_event_manager+0x88>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000b6aa:	591b      	ldr	r3, [r3, r4]
1000b6ac:	2b00      	cmp	r3, #0
1000b6ae:	d001      	beq.n	1000b6b4 <ble_event_manager+0x88>
				{
					event_cb_fn[events](event_params);
1000b6b0:	0028      	movs	r0, r5
1000b6b2:	4798      	blx	r3
1000b6b4:	3604      	adds	r6, #4
	case AT_BLE_READ_AUTHORIZE_REQUEST:
	{
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
1000b6b6:	2e14      	cmp	r6, #20
1000b6b8:	d1f4      	bne.n	1000b6a4 <ble_event_manager+0x78>
1000b6ba:	e049      	b.n	1000b750 <ble_event_manager+0x124>
	case AT_BLE_LECB_ADD_CREDIT_IND:
	case AT_BLE_LECB_SEND_RESP:
	case AT_BLE_LECB_DATA_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_READ_AUTHORIZE_REQUEST + 1);
1000b6bc:	3c27      	subs	r4, #39	; 0x27
1000b6be:	b2e4      	uxtb	r4, r4
		for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_l2cap_event_cb[idx] != NULL)
1000b6c0:	4b2d      	ldr	r3, [pc, #180]	; (1000b778 <ble_event_manager+0x14c>)
1000b6c2:	681b      	ldr	r3, [r3, #0]
1000b6c4:	2b00      	cmp	r3, #0
1000b6c6:	d043      	beq.n	1000b750 <ble_event_manager+0x124>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_l2cap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000b6c8:	00a4      	lsls	r4, r4, #2
1000b6ca:	58e3      	ldr	r3, [r4, r3]
1000b6cc:	2b00      	cmp	r3, #0
1000b6ce:	d03f      	beq.n	1000b750 <ble_event_manager+0x124>
				{
					event_cb_fn[events](event_params);
1000b6d0:	0028      	movs	r0, r5
1000b6d2:	4798      	blx	r3
1000b6d4:	e03c      	b.n	1000b750 <ble_event_manager+0x124>
	case AT_BLE_HTPT_ENABLE_RSP:
	case AT_BLE_HTPT_MEAS_INTV_UPD_RSP:
	case AT_BLE_HTPT_MEAS_INTV_CHG_REQ:
	{
		uint8_t idx;
		events -= (AT_BLE_LECB_DATA_RECIEVED + 1);
1000b6d6:	3c2d      	subs	r4, #45	; 0x2d
1000b6d8:	b2e4      	uxtb	r4, r4
		for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_htpt_event_cb[idx] != NULL)
1000b6da:	4b28      	ldr	r3, [pc, #160]	; (1000b77c <ble_event_manager+0x150>)
1000b6dc:	681b      	ldr	r3, [r3, #0]
1000b6de:	2b00      	cmp	r3, #0
1000b6e0:	d036      	beq.n	1000b750 <ble_event_manager+0x124>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_htpt_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000b6e2:	00a4      	lsls	r4, r4, #2
1000b6e4:	58e3      	ldr	r3, [r4, r3]
1000b6e6:	2b00      	cmp	r3, #0
1000b6e8:	d032      	beq.n	1000b750 <ble_event_manager+0x124>
				{
					event_cb_fn[events](event_params);
1000b6ea:	0028      	movs	r0, r5
1000b6ec:	4798      	blx	r3
1000b6ee:	e02f      	b.n	1000b750 <ble_event_manager+0x124>
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000b6f0:	3c36      	subs	r4, #54	; 0x36
1000b6f2:	b2e4      	uxtb	r4, r4
1000b6f4:	00a4      	lsls	r4, r4, #2
1000b6f6:	2600      	movs	r6, #0
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
1000b6f8:	4f21      	ldr	r7, [pc, #132]	; (1000b780 <ble_event_manager+0x154>)
1000b6fa:	59bb      	ldr	r3, [r7, r6]
1000b6fc:	2b00      	cmp	r3, #0
1000b6fe:	d004      	beq.n	1000b70a <ble_event_manager+0xde>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000b700:	591b      	ldr	r3, [r3, r4]
1000b702:	2b00      	cmp	r3, #0
1000b704:	d001      	beq.n	1000b70a <ble_event_manager+0xde>
				{
					event_cb_fn[events](event_params);
1000b706:	0028      	movs	r0, r5
1000b708:	4798      	blx	r3
1000b70a:	3604      	adds	r6, #4
	case AT_BLE_LE_TEST_STATUS:
	case AT_BLE_LE_PACKET_REPORT:
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
1000b70c:	2e14      	cmp	r6, #20
1000b70e:	d1f4      	bne.n	1000b6fa <ble_event_manager+0xce>
1000b710:	e01e      	b.n	1000b750 <ble_event_manager+0x124>
	case AT_BLE_CUSTOM_EVENT:
	case AT_BLE_DEVICE_READY:
	case AT_BLE_EVENT_MAX:
	{
		uint8_t idx;
		events -= (AT_BLE_LE_PACKET_REPORT + 1);
1000b712:	3c38      	subs	r4, #56	; 0x38
1000b714:	b2e4      	uxtb	r4, r4
		for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_custom_event_cb[idx] != NULL)
1000b716:	4b1b      	ldr	r3, [pc, #108]	; (1000b784 <ble_event_manager+0x158>)
1000b718:	681b      	ldr	r3, [r3, #0]
1000b71a:	2b00      	cmp	r3, #0
1000b71c:	d018      	beq.n	1000b750 <ble_event_manager+0x124>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_custom_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000b71e:	00a4      	lsls	r4, r4, #2
1000b720:	58e3      	ldr	r3, [r4, r3]
1000b722:	2b00      	cmp	r3, #0
1000b724:	d014      	beq.n	1000b750 <ble_event_manager+0x124>
				{
					event_cb_fn[events](event_params);
1000b726:	0028      	movs	r0, r5
1000b728:	4798      	blx	r3
1000b72a:	e011      	b.n	1000b750 <ble_event_manager+0x124>
	}
	break;

	case AT_PLATFORM_EVENT:
	{
		if (ble_user_event_cb) {
1000b72c:	4b16      	ldr	r3, [pc, #88]	; (1000b788 <ble_event_manager+0x15c>)
1000b72e:	681b      	ldr	r3, [r3, #0]
1000b730:	2b00      	cmp	r3, #0
1000b732:	d00d      	beq.n	1000b750 <ble_event_manager+0x124>
			ble_user_event_cb();
1000b734:	4798      	blx	r3
1000b736:	e00b      	b.n	1000b750 <ble_event_manager+0x124>
	}
	break;

	default:
	{
		DBG_LOG_DEV("BLE-Manager:Unknown Event=0x%X", events);
1000b738:	4e06      	ldr	r6, [pc, #24]	; (1000b754 <ble_event_manager+0x128>)
1000b73a:	0030      	movs	r0, r6
1000b73c:	4d06      	ldr	r5, [pc, #24]	; (1000b758 <ble_event_manager+0x12c>)
1000b73e:	47a8      	blx	r5
1000b740:	0021      	movs	r1, r4
1000b742:	4812      	ldr	r0, [pc, #72]	; (1000b78c <ble_event_manager+0x160>)
1000b744:	4b06      	ldr	r3, [pc, #24]	; (1000b760 <ble_event_manager+0x134>)
1000b746:	4798      	blx	r3
		DBG_LOG("\r\n");
1000b748:	0030      	movs	r0, r6
1000b74a:	47a8      	blx	r5
1000b74c:	0030      	movs	r0, r6
1000b74e:	47a8      	blx	r5
	}
	break;		
	}
}
1000b750:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000b752:	46c0      	nop			; (mov r8, r8)
1000b754:	100116bc 	.word	0x100116bc
1000b758:	10010565 	.word	0x10010565
1000b75c:	1001287c 	.word	0x1001287c
1000b760:	10010445 	.word	0x10010445
1000b764:	10011e64 	.word	0x10011e64
1000b768:	100149d0 	.word	0x100149d0
1000b76c:	100149e4 	.word	0x100149e4
1000b770:	1001288c 	.word	0x1001288c
1000b774:	10014738 	.word	0x10014738
1000b778:	10014a2c 	.word	0x10014a2c
1000b77c:	10014734 	.word	0x10014734
1000b780:	100149bc 	.word	0x100149bc
1000b784:	10014f70 	.word	0x10014f70
1000b788:	10013460 	.word	0x10013460
1000b78c:	100128a4 	.word	0x100128a4

1000b790 <ble_event_task>:
	return ulp_status;
}

/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
1000b790:	b570      	push	{r4, r5, r6, lr}
1000b792:	0004      	movs	r4, r0
	return status;
}

ble_ulp_mode_t ble_get_ulp_status(void)
{
	return ulp_status;
1000b794:	4b0d      	ldr	r3, [pc, #52]	; (1000b7cc <ble_event_task+0x3c>)
1000b796:	781b      	ldrb	r3, [r3, #0]
/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
	at_ble_status_t status;
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
1000b798:	2b01      	cmp	r3, #1
1000b79a:	d101      	bne.n	1000b7a0 <ble_event_task+0x10>
	{
		release_sleep_lock();
1000b79c:	4b0c      	ldr	r3, [pc, #48]	; (1000b7d0 <ble_event_task+0x40>)
1000b79e:	4798      	blx	r3
	}	
	status = at_ble_event_get(&event, ble_event_params, timeout);
1000b7a0:	0022      	movs	r2, r4
1000b7a2:	490c      	ldr	r1, [pc, #48]	; (1000b7d4 <ble_event_task+0x44>)
1000b7a4:	480c      	ldr	r0, [pc, #48]	; (1000b7d8 <ble_event_task+0x48>)
1000b7a6:	4b0d      	ldr	r3, [pc, #52]	; (1000b7dc <ble_event_task+0x4c>)
1000b7a8:	4798      	blx	r3
1000b7aa:	0004      	movs	r4, r0
1000b7ac:	0005      	movs	r5, r0
	return status;
}

ble_ulp_mode_t ble_get_ulp_status(void)
{
	return ulp_status;
1000b7ae:	4b07      	ldr	r3, [pc, #28]	; (1000b7cc <ble_event_task+0x3c>)
1000b7b0:	781b      	ldrb	r3, [r3, #0]
	{
		release_sleep_lock();
	}	
	status = at_ble_event_get(&event, ble_event_params, timeout);
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
1000b7b2:	2b01      	cmp	r3, #1
1000b7b4:	d101      	bne.n	1000b7ba <ble_event_task+0x2a>
	{
		acquire_sleep_lock();
1000b7b6:	4b0a      	ldr	r3, [pc, #40]	; (1000b7e0 <ble_event_task+0x50>)
1000b7b8:	4798      	blx	r3
	}
	
    if (status == AT_BLE_SUCCESS) 
1000b7ba:	2d00      	cmp	r5, #0
1000b7bc:	d104      	bne.n	1000b7c8 <ble_event_task+0x38>
    {		
            ble_event_manager(event, ble_event_params);
1000b7be:	4b06      	ldr	r3, [pc, #24]	; (1000b7d8 <ble_event_task+0x48>)
1000b7c0:	7818      	ldrb	r0, [r3, #0]
1000b7c2:	4904      	ldr	r1, [pc, #16]	; (1000b7d4 <ble_event_task+0x44>)
1000b7c4:	4b07      	ldr	r3, [pc, #28]	; (1000b7e4 <ble_event_task+0x54>)
1000b7c6:	4798      	blx	r3
    }
    
    return status;
}
1000b7c8:	0020      	movs	r0, r4
1000b7ca:	bd70      	pop	{r4, r5, r6, pc}
1000b7cc:	1001346f 	.word	0x1001346f
1000b7d0:	1000c231 	.word	0x1000c231
1000b7d4:	10014d64 	.word	0x10014d64
1000b7d8:	10014a28 	.word	0x10014a28
1000b7dc:	1000c5e5 	.word	0x1000c5e5
1000b7e0:	1000c209 	.word	0x1000c209
1000b7e4:	1000b62d 	.word	0x1000b62d

1000b7e8 <dualtimer_callback2>:
extern struct uart_module uart_instance;

void dualtimer_callback2(void)
{
	//puts("Timer2 trigger\r\n");
}
1000b7e8:	4770      	bx	lr
1000b7ea:	46c0      	nop			; (mov r8, r8)

1000b7ec <hw_timer_init>:

void hw_timer_init(void)
{
1000b7ec:	b500      	push	{lr}
1000b7ee:	b089      	sub	sp, #36	; 0x24
	struct dualtimer_config config_dualtimer;
	dualtimer_get_config_defaults(&config_dualtimer);
1000b7f0:	a801      	add	r0, sp, #4
1000b7f2:	4b05      	ldr	r3, [pc, #20]	; (1000b808 <hw_timer_init+0x1c>)
1000b7f4:	4798      	blx	r3

	config_dualtimer.timer1.load_value = CONF_DUALTIMER_TIMER1_LOAD;
1000b7f6:	4b05      	ldr	r3, [pc, #20]	; (1000b80c <hw_timer_init+0x20>)
1000b7f8:	9303      	str	r3, [sp, #12]
	config_dualtimer.timer2.load_value = CONF_DUALTIMER_TIMER2_LOAD;
1000b7fa:	4b05      	ldr	r3, [pc, #20]	; (1000b810 <hw_timer_init+0x24>)
1000b7fc:	9306      	str	r3, [sp, #24]

	dualtimer_init(&config_dualtimer);
1000b7fe:	a801      	add	r0, sp, #4
1000b800:	4b04      	ldr	r3, [pc, #16]	; (1000b814 <hw_timer_init+0x28>)
1000b802:	4798      	blx	r3
}
1000b804:	b009      	add	sp, #36	; 0x24
1000b806:	bd00      	pop	{pc}
1000b808:	10008b39 	.word	0x10008b39
1000b80c:	018cba80 	.word	0x018cba80
1000b810:	03197500 	.word	0x03197500
1000b814:	10008bcd 	.word	0x10008bcd

1000b818 <hw_timer_register_callback>:

void hw_timer_register_callback(hw_timer_callback_t timer_callback_handler)
{
1000b818:	b510      	push	{r4, lr}
1000b81a:	0001      	movs	r1, r0
	dualtimer_register_callback(DUALTIMER_TIMER1, timer_callback_handler);
1000b81c:	2000      	movs	r0, #0
1000b81e:	4c07      	ldr	r4, [pc, #28]	; (1000b83c <hw_timer_register_callback+0x24>)
1000b820:	47a0      	blx	r4
	dualtimer_register_callback(DUALTIMER_TIMER2, dualtimer_callback2);
1000b822:	4907      	ldr	r1, [pc, #28]	; (1000b840 <hw_timer_register_callback+0x28>)
1000b824:	2001      	movs	r0, #1
1000b826:	47a0      	blx	r4

	dualtimer_disable(DUALTIMER_TIMER1);
1000b828:	2000      	movs	r0, #0
1000b82a:	4c06      	ldr	r4, [pc, #24]	; (1000b844 <hw_timer_register_callback+0x2c>)
1000b82c:	47a0      	blx	r4
	dualtimer_disable(DUALTIMER_TIMER2);
1000b82e:	2001      	movs	r0, #1
1000b830:	47a0      	blx	r4
1000b832:	2280      	movs	r2, #128	; 0x80
1000b834:	01d2      	lsls	r2, r2, #7
1000b836:	4b04      	ldr	r3, [pc, #16]	; (1000b848 <hw_timer_register_callback+0x30>)
1000b838:	601a      	str	r2, [r3, #0]

	NVIC_EnableIRQ(DUALTIMER0_IRQn);
}
1000b83a:	bd10      	pop	{r4, pc}
1000b83c:	10008cd1 	.word	0x10008cd1
1000b840:	1000b7e9 	.word	0x1000b7e9
1000b844:	10008ba9 	.word	0x10008ba9
1000b848:	e000e100 	.word	0xe000e100

1000b84c <hw_timer_start>:

void hw_timer_start(uint32_t delay)
{
1000b84c:	b510      	push	{r4, lr}
	if(delay <= 0) {
1000b84e:	2800      	cmp	r0, #0
1000b850:	d100      	bne.n	1000b854 <hw_timer_start+0x8>
		delay = 1;
1000b852:	3001      	adds	r0, #1
	}

	dualtimer_set_counter(DUALTIMER_TIMER1,DUALTIMER_SET_CURRUNT_REG,CONF_DUALTIMER_TIMER1_LOAD*delay);
1000b854:	4b05      	ldr	r3, [pc, #20]	; (1000b86c <hw_timer_start+0x20>)
1000b856:	4343      	muls	r3, r0
1000b858:	001a      	movs	r2, r3
1000b85a:	2100      	movs	r1, #0
1000b85c:	2000      	movs	r0, #0
1000b85e:	4b04      	ldr	r3, [pc, #16]	; (1000b870 <hw_timer_start+0x24>)
1000b860:	4798      	blx	r3
	dualtimer_enable(DUALTIMER_TIMER1);
1000b862:	2000      	movs	r0, #0
1000b864:	4b03      	ldr	r3, [pc, #12]	; (1000b874 <hw_timer_start+0x28>)
1000b866:	4798      	blx	r3
}
1000b868:	bd10      	pop	{r4, pc}
1000b86a:	46c0      	nop			; (mov r8, r8)
1000b86c:	018cba80 	.word	0x018cba80
1000b870:	10008b5d 	.word	0x10008b5d
1000b874:	10008b85 	.word	0x10008b85

1000b878 <hw_timer_stop>:

void hw_timer_stop(void)
{
1000b878:	b510      	push	{r4, lr}
	dualtimer_disable(DUALTIMER_TIMER1);
1000b87a:	2000      	movs	r0, #0
1000b87c:	4b01      	ldr	r3, [pc, #4]	; (1000b884 <hw_timer_stop+0xc>)
1000b87e:	4798      	blx	r3
}
1000b880:	bd10      	pop	{r4, pc}
1000b882:	46c0      	nop			; (mov r8, r8)
1000b884:	10008ba9 	.word	0x10008ba9

1000b888 <button_callback>:
#include "button.h"

button_callback_t button_cb_func = NULL;

static void button_callback(void)
{
1000b888:	b510      	push	{r4, lr}
	gpio_disable_callback(BUTTON_0_PIN);
1000b88a:	2017      	movs	r0, #23
1000b88c:	4b05      	ldr	r3, [pc, #20]	; (1000b8a4 <button_callback+0x1c>)
1000b88e:	4798      	blx	r3

	if(button_cb_func)
1000b890:	4b05      	ldr	r3, [pc, #20]	; (1000b8a8 <button_callback+0x20>)
1000b892:	681b      	ldr	r3, [r3, #0]
1000b894:	2b00      	cmp	r3, #0
1000b896:	d000      	beq.n	1000b89a <button_callback+0x12>
	{
		button_cb_func();
1000b898:	4798      	blx	r3
	}

	gpio_enable_callback(BUTTON_0_PIN);
1000b89a:	2017      	movs	r0, #23
1000b89c:	4b03      	ldr	r3, [pc, #12]	; (1000b8ac <button_callback+0x24>)
1000b89e:	4798      	blx	r3
}
1000b8a0:	bd10      	pop	{r4, pc}
1000b8a2:	46c0      	nop			; (mov r8, r8)
1000b8a4:	10009279 	.word	0x10009279
1000b8a8:	10014470 	.word	0x10014470
1000b8ac:	1000921d 	.word	0x1000921d

1000b8b0 <button_init>:

void button_init(void)
{
1000b8b0:	b510      	push	{r4, lr}
1000b8b2:	b082      	sub	sp, #8
	struct gpio_config config_gpio_pin;

	gpio_get_config_defaults(&config_gpio_pin);
1000b8b4:	ac01      	add	r4, sp, #4
1000b8b6:	0020      	movs	r0, r4
1000b8b8:	4b05      	ldr	r3, [pc, #20]	; (1000b8d0 <button_init+0x20>)
1000b8ba:	4798      	blx	r3

	config_gpio_pin.direction  = GPIO_PIN_DIR_INPUT;
1000b8bc:	2300      	movs	r3, #0
1000b8be:	7023      	strb	r3, [r4, #0]
	config_gpio_pin.input_pull = GPIO_PIN_PULL_NONE;
1000b8c0:	7063      	strb	r3, [r4, #1]

	gpio_pin_set_config(BUTTON_0_PIN, &config_gpio_pin);
1000b8c2:	0021      	movs	r1, r4
1000b8c4:	2017      	movs	r0, #23
1000b8c6:	4b03      	ldr	r3, [pc, #12]	; (1000b8d4 <button_init+0x24>)
1000b8c8:	4798      	blx	r3
}
1000b8ca:	b002      	add	sp, #8
1000b8cc:	bd10      	pop	{r4, pc}
1000b8ce:	46c0      	nop			; (mov r8, r8)
1000b8d0:	10008e39 	.word	0x10008e39
1000b8d4:	10008e49 	.word	0x10008e49

1000b8d8 <button_register_callback>:

void button_register_callback(button_callback_t callback)
{
1000b8d8:	b510      	push	{r4, lr}
	button_cb_func = callback;
1000b8da:	4b08      	ldr	r3, [pc, #32]	; (1000b8fc <button_register_callback+0x24>)
1000b8dc:	6018      	str	r0, [r3, #0]
	
	if(button_cb_func == NULL)
1000b8de:	2800      	cmp	r0, #0
1000b8e0:	d103      	bne.n	1000b8ea <button_register_callback+0x12>
	{
		gpio_disable_callback(BUTTON_0_PIN);
1000b8e2:	3017      	adds	r0, #23
1000b8e4:	4b06      	ldr	r3, [pc, #24]	; (1000b900 <button_register_callback+0x28>)
1000b8e6:	4798      	blx	r3
1000b8e8:	e007      	b.n	1000b8fa <button_register_callback+0x22>
	}
	else
	{
		gpio_register_callback(BUTTON_0_PIN, button_callback, GPIO_CALLBACK_RISING);
1000b8ea:	2202      	movs	r2, #2
1000b8ec:	4905      	ldr	r1, [pc, #20]	; (1000b904 <button_register_callback+0x2c>)
1000b8ee:	2017      	movs	r0, #23
1000b8f0:	4b05      	ldr	r3, [pc, #20]	; (1000b908 <button_register_callback+0x30>)
1000b8f2:	4798      	blx	r3
		gpio_enable_callback(BUTTON_0_PIN);
1000b8f4:	2017      	movs	r0, #23
1000b8f6:	4b05      	ldr	r3, [pc, #20]	; (1000b90c <button_register_callback+0x34>)
1000b8f8:	4798      	blx	r3
	}
}
1000b8fa:	bd10      	pop	{r4, pc}
1000b8fc:	10014470 	.word	0x10014470
1000b900:	10009279 	.word	0x10009279
1000b904:	1000b889 	.word	0x1000b889
1000b908:	1000914d 	.word	0x1000914d
1000b90c:	1000921d 	.word	0x1000921d

1000b910 <uart_read_complete_callback>:

void _time_start(unsigned int sec);
unsigned int _time_done(void);

static void uart_read_complete_callback(struct uart_module *const module)
{
1000b910:	b510      	push	{r4, lr}
	if(read_status == UART_READ_WAITING) {
1000b912:	4b0e      	ldr	r3, [pc, #56]	; (1000b94c <uart_read_complete_callback+0x3c>)
1000b914:	781b      	ldrb	r3, [r3, #0]
1000b916:	2b01      	cmp	r3, #1
1000b918:	d10b      	bne.n	1000b932 <uart_read_complete_callback+0x22>
		read_status = UART_READ_DONE;
1000b91a:	2202      	movs	r2, #2
1000b91c:	4b0b      	ldr	r3, [pc, #44]	; (1000b94c <uart_read_complete_callback+0x3c>)
1000b91e:	701a      	strb	r2, [r3, #0]
		
		if(user_callback_func == NULL)
1000b920:	4b0b      	ldr	r3, [pc, #44]	; (1000b950 <uart_read_complete_callback+0x40>)
1000b922:	681b      	ldr	r3, [r3, #0]
1000b924:	2b00      	cmp	r3, #0
1000b926:	d110      	bne.n	1000b94a <uart_read_complete_callback+0x3a>
			uart_disable_callback(&uart_instance, UART_RX_COMPLETE);
1000b928:	2102      	movs	r1, #2
1000b92a:	480a      	ldr	r0, [pc, #40]	; (1000b954 <uart_read_complete_callback+0x44>)
1000b92c:	4b0a      	ldr	r3, [pc, #40]	; (1000b958 <uart_read_complete_callback+0x48>)
1000b92e:	4798      	blx	r3
1000b930:	e00b      	b.n	1000b94a <uart_read_complete_callback+0x3a>
	}
	else if(user_callback_func != NULL) {
1000b932:	4b07      	ldr	r3, [pc, #28]	; (1000b950 <uart_read_complete_callback+0x40>)
1000b934:	681b      	ldr	r3, [r3, #0]
1000b936:	2b00      	cmp	r3, #0
1000b938:	d007      	beq.n	1000b94a <uart_read_complete_callback+0x3a>
		user_callback_func(string_input[0]);
1000b93a:	4c08      	ldr	r4, [pc, #32]	; (1000b95c <uart_read_complete_callback+0x4c>)
1000b93c:	7820      	ldrb	r0, [r4, #0]
1000b93e:	4798      	blx	r3
		uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000b940:	2201      	movs	r2, #1
1000b942:	0021      	movs	r1, r4
1000b944:	4803      	ldr	r0, [pc, #12]	; (1000b954 <uart_read_complete_callback+0x44>)
1000b946:	4b06      	ldr	r3, [pc, #24]	; (1000b960 <uart_read_complete_callback+0x50>)
1000b948:	4798      	blx	r3
	}
	else {
		//Nothing to do.
	}
}
1000b94a:	bd10      	pop	{r4, pc}
1000b94c:	10014478 	.word	0x10014478
1000b950:	10014480 	.word	0x10014480
1000b954:	10014f74 	.word	0x10014f74
1000b958:	1000a015 	.word	0x1000a015
1000b95c:	1001447c 	.word	0x1001447c
1000b960:	10009fb9 	.word	0x10009fb9

1000b964 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct uart_module *const module,
		uint8_t *c)
{
1000b964:	b570      	push	{r4, r5, r6, lr}
1000b966:	0006      	movs	r6, r0
1000b968:	000d      	movs	r5, r1
	while(STATUS_OK != uart_read_wait(module, c));
1000b96a:	4c03      	ldr	r4, [pc, #12]	; (1000b978 <usart_serial_getchar+0x14>)
1000b96c:	0029      	movs	r1, r5
1000b96e:	0030      	movs	r0, r6
1000b970:	47a0      	blx	r4
1000b972:	2800      	cmp	r0, #0
1000b974:	d1fa      	bne.n	1000b96c <usart_serial_getchar+0x8>
}
1000b976:	bd70      	pop	{r4, r5, r6, pc}
1000b978:	10009fa5 	.word	0x10009fa5

1000b97c <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct uart_module *const module,
		uint8_t c)
{
1000b97c:	b570      	push	{r4, r5, r6, lr}
1000b97e:	0006      	movs	r6, r0
1000b980:	000d      	movs	r5, r1
	while(STATUS_OK !=uart_write_wait(module, c));
1000b982:	4c03      	ldr	r4, [pc, #12]	; (1000b990 <usart_serial_putchar+0x14>)
1000b984:	0029      	movs	r1, r5
1000b986:	0030      	movs	r0, r6
1000b988:	47a0      	blx	r4
1000b98a:	2800      	cmp	r0, #0
1000b98c:	d1fa      	bne.n	1000b984 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
1000b98e:	bd70      	pop	{r4, r5, r6, pc}
1000b990:	10009f95 	.word	0x10009f95

1000b994 <serial_console_init>:

void serial_console_init(void)
{
1000b994:	b570      	push	{r4, r5, r6, lr}
	system_clock_config(CLOCK_RESOURCE_XO_26_MHZ, CLOCK_FREQ_26_MHZ);
1000b996:	2100      	movs	r1, #0
1000b998:	2000      	movs	r0, #0
1000b99a:	4b19      	ldr	r3, [pc, #100]	; (1000ba00 <serial_console_init+0x6c>)
1000b99c:	4798      	blx	r3

	uart_get_config_defaults(&config_uart);
1000b99e:	4c19      	ldr	r4, [pc, #100]	; (1000ba04 <serial_console_init+0x70>)
1000b9a0:	0020      	movs	r0, r4
1000b9a2:	4b19      	ldr	r3, [pc, #100]	; (1000ba08 <serial_console_init+0x74>)
1000b9a4:	4798      	blx	r3

	config_uart.baud_rate = CONF_STDIO_BAUDRATE;
1000b9a6:	23e1      	movs	r3, #225	; 0xe1
1000b9a8:	025b      	lsls	r3, r3, #9
1000b9aa:	6023      	str	r3, [r4, #0]
	config_uart.pin_number_pad[0] = EDBG_CDC_PIN_PAD0;
1000b9ac:	2302      	movs	r3, #2
1000b9ae:	60a3      	str	r3, [r4, #8]
	config_uart.pin_number_pad[1] = EDBG_CDC_PIN_PAD1;
1000b9b0:	2203      	movs	r2, #3
1000b9b2:	60e2      	str	r2, [r4, #12]
	config_uart.pin_number_pad[2] = EDBG_CDC_PIN_PAD2;
1000b9b4:	3201      	adds	r2, #1
1000b9b6:	6122      	str	r2, [r4, #16]
	config_uart.pin_number_pad[3] = EDBG_CDC_PIN_PAD3;
1000b9b8:	3201      	adds	r2, #1
1000b9ba:	6162      	str	r2, [r4, #20]
	
	config_uart.pinmux_sel_pad[0] = EDBG_CDC_MUX_PAD0;
1000b9bc:	61a3      	str	r3, [r4, #24]
	config_uart.pinmux_sel_pad[1] = EDBG_CDC_MUX_PAD1;
1000b9be:	61e3      	str	r3, [r4, #28]
	config_uart.pinmux_sel_pad[2] = EDBG_CDC_MUX_PAD2;
1000b9c0:	6223      	str	r3, [r4, #32]
	config_uart.pinmux_sel_pad[3] = EDBG_CDC_MUX_PAD3;
1000b9c2:	6263      	str	r3, [r4, #36]	; 0x24
static inline void stdio_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	stdio_base = (void *)module;
1000b9c4:	4d11      	ldr	r5, [pc, #68]	; (1000ba0c <serial_console_init+0x78>)
1000b9c6:	4b12      	ldr	r3, [pc, #72]	; (1000ba10 <serial_console_init+0x7c>)
1000b9c8:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
1000b9ca:	4a12      	ldr	r2, [pc, #72]	; (1000ba14 <serial_console_init+0x80>)
1000b9cc:	4b12      	ldr	r3, [pc, #72]	; (1000ba18 <serial_console_init+0x84>)
1000b9ce:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
1000b9d0:	4a12      	ldr	r2, [pc, #72]	; (1000ba1c <serial_console_init+0x88>)
1000b9d2:	4b13      	ldr	r3, [pc, #76]	; (1000ba20 <serial_console_init+0x8c>)
1000b9d4:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	if (uart_init(module, hw, config) == STATUS_OK) {
1000b9d6:	0022      	movs	r2, r4
1000b9d8:	4912      	ldr	r1, [pc, #72]	; (1000ba24 <serial_console_init+0x90>)
1000b9da:	0028      	movs	r0, r5
1000b9dc:	4b12      	ldr	r3, [pc, #72]	; (1000ba28 <serial_console_init+0x94>)
1000b9de:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
1000b9e0:	4e12      	ldr	r6, [pc, #72]	; (1000ba2c <serial_console_init+0x98>)
1000b9e2:	6833      	ldr	r3, [r6, #0]
1000b9e4:	6898      	ldr	r0, [r3, #8]
1000b9e6:	2100      	movs	r1, #0
1000b9e8:	4c11      	ldr	r4, [pc, #68]	; (1000ba30 <serial_console_init+0x9c>)
1000b9ea:	47a0      	blx	r4
	setbuf(stdin, NULL);
1000b9ec:	6833      	ldr	r3, [r6, #0]
1000b9ee:	6858      	ldr	r0, [r3, #4]
1000b9f0:	2100      	movs	r1, #0
1000b9f2:	47a0      	blx	r4

	stdio_serial_init(&uart_instance, CONF_STDIO_USART_MODULE, &config_uart);
	
	uart_register_callback(&uart_instance, uart_read_complete_callback, UART_RX_COMPLETE);
1000b9f4:	2202      	movs	r2, #2
1000b9f6:	490f      	ldr	r1, [pc, #60]	; (1000ba34 <serial_console_init+0xa0>)
1000b9f8:	0028      	movs	r0, r5
1000b9fa:	4b0f      	ldr	r3, [pc, #60]	; (1000ba38 <serial_console_init+0xa4>)
1000b9fc:	4798      	blx	r3
}
1000b9fe:	bd70      	pop	{r4, r5, r6, pc}
1000ba00:	10009321 	.word	0x10009321
1000ba04:	10014f98 	.word	0x10014f98
1000ba08:	10009dad 	.word	0x10009dad
1000ba0c:	10014f74 	.word	0x10014f74
1000ba10:	10014730 	.word	0x10014730
1000ba14:	1000b97d 	.word	0x1000b97d
1000ba18:	1001472c 	.word	0x1001472c
1000ba1c:	1000b965 	.word	0x1000b965
1000ba20:	10014728 	.word	0x10014728
1000ba24:	40004000 	.word	0x40004000
1000ba28:	10009dd9 	.word	0x10009dd9
1000ba2c:	10012b3c 	.word	0x10012b3c
1000ba30:	100105f1 	.word	0x100105f1
1000ba34:	1000b911 	.word	0x1000b911
1000ba38:	10009fe1 	.word	0x10009fe1

1000ba3c <_time_start>:

void _time_start(unsigned int sec)
{
1000ba3c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ba3e:	b083      	sub	sp, #12
1000ba40:	0005      	movs	r5, r0
	system_clock_get_value();
1000ba42:	4c0d      	ldr	r4, [pc, #52]	; (1000ba78 <_time_start+0x3c>)
1000ba44:	47a0      	blx	r4
	unsigned int main_clk = system_clock_get_value();
1000ba46:	47a0      	blx	r4

	tick = (((double)(main_clk)) * ((double)0.0000493)) * (sec * 1000);
1000ba48:	4f0c      	ldr	r7, [pc, #48]	; (1000ba7c <_time_start+0x40>)
1000ba4a:	47b8      	blx	r7
1000ba4c:	4e0c      	ldr	r6, [pc, #48]	; (1000ba80 <_time_start+0x44>)
1000ba4e:	4a0d      	ldr	r2, [pc, #52]	; (1000ba84 <_time_start+0x48>)
1000ba50:	4b0d      	ldr	r3, [pc, #52]	; (1000ba88 <_time_start+0x4c>)
1000ba52:	47b0      	blx	r6
1000ba54:	9000      	str	r0, [sp, #0]
1000ba56:	9101      	str	r1, [sp, #4]
1000ba58:	20fa      	movs	r0, #250	; 0xfa
1000ba5a:	0080      	lsls	r0, r0, #2
1000ba5c:	4368      	muls	r0, r5
1000ba5e:	47b8      	blx	r7
1000ba60:	0002      	movs	r2, r0
1000ba62:	000b      	movs	r3, r1
1000ba64:	9800      	ldr	r0, [sp, #0]
1000ba66:	9901      	ldr	r1, [sp, #4]
1000ba68:	47b0      	blx	r6
1000ba6a:	4b08      	ldr	r3, [pc, #32]	; (1000ba8c <_time_start+0x50>)
1000ba6c:	4798      	blx	r3
1000ba6e:	4b08      	ldr	r3, [pc, #32]	; (1000ba90 <_time_start+0x54>)
1000ba70:	6018      	str	r0, [r3, #0]
}
1000ba72:	b003      	add	sp, #12
1000ba74:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ba76:	46c0      	nop			; (mov r8, r8)
1000ba78:	100093a5 	.word	0x100093a5
1000ba7c:	10010075 	.word	0x10010075
1000ba80:	1000f46d 	.word	0x1000f46d
1000ba84:	19feaec7 	.word	0x19feaec7
1000ba88:	3f09d8ef 	.word	0x3f09d8ef
1000ba8c:	1000f431 	.word	0x1000f431
1000ba90:	10014474 	.word	0x10014474

1000ba94 <_time_done>:

unsigned int _time_done()
{
	return --tick;
1000ba94:	4b02      	ldr	r3, [pc, #8]	; (1000baa0 <_time_done+0xc>)
1000ba96:	681a      	ldr	r2, [r3, #0]
1000ba98:	1e50      	subs	r0, r2, #1
1000ba9a:	6018      	str	r0, [r3, #0]
}
1000ba9c:	4770      	bx	lr
1000ba9e:	46c0      	nop			; (mov r8, r8)
1000baa0:	10014474 	.word	0x10014474

1000baa4 <getchar_b11_timeout>:

int getchar_b11_timeout(unsigned int sec)
{
1000baa4:	b570      	push	{r4, r5, r6, lr}
1000baa6:	0004      	movs	r4, r0
	read_status = UART_READ_WAITING;
1000baa8:	2201      	movs	r2, #1
1000baaa:	4b11      	ldr	r3, [pc, #68]	; (1000baf0 <getchar_b11_timeout+0x4c>)
1000baac:	701a      	strb	r2, [r3, #0]
	
	if(user_callback_func == NULL)
1000baae:	4b11      	ldr	r3, [pc, #68]	; (1000baf4 <getchar_b11_timeout+0x50>)
1000bab0:	681b      	ldr	r3, [r3, #0]
1000bab2:	2b00      	cmp	r3, #0
1000bab4:	d103      	bne.n	1000babe <getchar_b11_timeout+0x1a>
		uart_enable_callback(&uart_instance, UART_RX_COMPLETE);
1000bab6:	2102      	movs	r1, #2
1000bab8:	480f      	ldr	r0, [pc, #60]	; (1000baf8 <getchar_b11_timeout+0x54>)
1000baba:	4b10      	ldr	r3, [pc, #64]	; (1000bafc <getchar_b11_timeout+0x58>)
1000babc:	4798      	blx	r3

	_time_start(sec);
1000babe:	0020      	movs	r0, r4
1000bac0:	4b0f      	ldr	r3, [pc, #60]	; (1000bb00 <getchar_b11_timeout+0x5c>)
1000bac2:	4798      	blx	r3
	
	string_input[0] = 0;
1000bac4:	490f      	ldr	r1, [pc, #60]	; (1000bb04 <getchar_b11_timeout+0x60>)
1000bac6:	2300      	movs	r3, #0
1000bac8:	700b      	strb	r3, [r1, #0]
	uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000baca:	2201      	movs	r2, #1
1000bacc:	480a      	ldr	r0, [pc, #40]	; (1000baf8 <getchar_b11_timeout+0x54>)
1000bace:	4b0e      	ldr	r3, [pc, #56]	; (1000bb08 <getchar_b11_timeout+0x64>)
1000bad0:	4798      	blx	r3
	
	while (read_status != UART_READ_DONE && _time_done() > 0 );
1000bad2:	4c07      	ldr	r4, [pc, #28]	; (1000baf0 <getchar_b11_timeout+0x4c>)
1000bad4:	4d0d      	ldr	r5, [pc, #52]	; (1000bb0c <getchar_b11_timeout+0x68>)
1000bad6:	7823      	ldrb	r3, [r4, #0]
1000bad8:	2b02      	cmp	r3, #2
1000bada:	d002      	beq.n	1000bae2 <getchar_b11_timeout+0x3e>
1000badc:	47a8      	blx	r5
1000bade:	2800      	cmp	r0, #0
1000bae0:	d1f9      	bne.n	1000bad6 <getchar_b11_timeout+0x32>
	
	read_status = UART_READ_NONE;
1000bae2:	2200      	movs	r2, #0
1000bae4:	4b02      	ldr	r3, [pc, #8]	; (1000baf0 <getchar_b11_timeout+0x4c>)
1000bae6:	701a      	strb	r2, [r3, #0]

	return string_input[0];
1000bae8:	4b06      	ldr	r3, [pc, #24]	; (1000bb04 <getchar_b11_timeout+0x60>)
1000baea:	7818      	ldrb	r0, [r3, #0]
}
1000baec:	bd70      	pop	{r4, r5, r6, pc}
1000baee:	46c0      	nop			; (mov r8, r8)
1000baf0:	10014478 	.word	0x10014478
1000baf4:	10014480 	.word	0x10014480
1000baf8:	10014f74 	.word	0x10014f74
1000bafc:	10009ff5 	.word	0x10009ff5
1000bb00:	1000ba3d 	.word	0x1000ba3d
1000bb04:	1001447c 	.word	0x1001447c
1000bb08:	10009fb9 	.word	0x10009fb9
1000bb0c:	1000ba95 	.word	0x1000ba95

1000bb10 <getchar_b11>:

int getchar_b11(void)
{
1000bb10:	b510      	push	{r4, lr}
	read_status = UART_READ_WAITING;
1000bb12:	2201      	movs	r2, #1
1000bb14:	4b0d      	ldr	r3, [pc, #52]	; (1000bb4c <getchar_b11+0x3c>)
1000bb16:	701a      	strb	r2, [r3, #0]
	
	if(user_callback_func == NULL)
1000bb18:	4b0d      	ldr	r3, [pc, #52]	; (1000bb50 <getchar_b11+0x40>)
1000bb1a:	681b      	ldr	r3, [r3, #0]
1000bb1c:	2b00      	cmp	r3, #0
1000bb1e:	d103      	bne.n	1000bb28 <getchar_b11+0x18>
		uart_enable_callback(&uart_instance, UART_RX_COMPLETE);
1000bb20:	2102      	movs	r1, #2
1000bb22:	480c      	ldr	r0, [pc, #48]	; (1000bb54 <getchar_b11+0x44>)
1000bb24:	4b0c      	ldr	r3, [pc, #48]	; (1000bb58 <getchar_b11+0x48>)
1000bb26:	4798      	blx	r3
	
	string_input[0] = 0;
1000bb28:	490c      	ldr	r1, [pc, #48]	; (1000bb5c <getchar_b11+0x4c>)
1000bb2a:	2300      	movs	r3, #0
1000bb2c:	700b      	strb	r3, [r1, #0]
	uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000bb2e:	2201      	movs	r2, #1
1000bb30:	4808      	ldr	r0, [pc, #32]	; (1000bb54 <getchar_b11+0x44>)
1000bb32:	4b0b      	ldr	r3, [pc, #44]	; (1000bb60 <getchar_b11+0x50>)
1000bb34:	4798      	blx	r3
	
	while(read_status != UART_READ_DONE);
1000bb36:	4a05      	ldr	r2, [pc, #20]	; (1000bb4c <getchar_b11+0x3c>)
1000bb38:	7813      	ldrb	r3, [r2, #0]
1000bb3a:	2b02      	cmp	r3, #2
1000bb3c:	d1fc      	bne.n	1000bb38 <getchar_b11+0x28>
	
	read_status = UART_READ_NONE;
1000bb3e:	2200      	movs	r2, #0
1000bb40:	4b02      	ldr	r3, [pc, #8]	; (1000bb4c <getchar_b11+0x3c>)
1000bb42:	701a      	strb	r2, [r3, #0]
	return string_input[0];
1000bb44:	4b05      	ldr	r3, [pc, #20]	; (1000bb5c <getchar_b11+0x4c>)
1000bb46:	7818      	ldrb	r0, [r3, #0]
}
1000bb48:	bd10      	pop	{r4, pc}
1000bb4a:	46c0      	nop			; (mov r8, r8)
1000bb4c:	10014478 	.word	0x10014478
1000bb50:	10014480 	.word	0x10014480
1000bb54:	10014f74 	.word	0x10014f74
1000bb58:	10009ff5 	.word	0x10009ff5
1000bb5c:	1001447c 	.word	0x1001447c
1000bb60:	10009fb9 	.word	0x10009fb9

1000bb64 <platform_event_free>:
void platform_event_free(struct platform_event* event);
//struct str_watched_event watched_event;

void platform_event_free(struct platform_event* event)
{
	event->next = platform_event_free_list;
1000bb64:	4b02      	ldr	r3, [pc, #8]	; (1000bb70 <platform_event_free+0xc>)
1000bb66:	681a      	ldr	r2, [r3, #0]
1000bb68:	6002      	str	r2, [r0, #0]
	platform_event_free_list = event;
1000bb6a:	6018      	str	r0, [r3, #0]
}
1000bb6c:	4770      	bx	lr
1000bb6e:	46c0      	nop			; (mov r8, r8)
1000bb70:	10014488 	.word	0x10014488

1000bb74 <platform_event_post>:

void platform_event_post(uint16_t event_type, void * data, uint16_t data_len)
{
1000bb74:	b530      	push	{r4, r5, lr}
	// get a free event object
	struct platform_event* evt = platform_event_free_list;
1000bb76:	4b0b      	ldr	r3, [pc, #44]	; (1000bba4 <platform_event_post+0x30>)
1000bb78:	681c      	ldr	r4, [r3, #0]
	if(evt != NULL)
1000bb7a:	2c00      	cmp	r4, #0
1000bb7c:	d011      	beq.n	1000bba2 <platform_event_post+0x2e>
	{
		platform_event_free_list = evt->next;
1000bb7e:	6825      	ldr	r5, [r4, #0]
1000bb80:	601d      	str	r5, [r3, #0]
		
		evt->next = NULL;
1000bb82:	2300      	movs	r3, #0
1000bb84:	6023      	str	r3, [r4, #0]
		evt->data = data;
1000bb86:	60a1      	str	r1, [r4, #8]
		evt->data_len = data_len;
1000bb88:	80e2      	strh	r2, [r4, #6]
		evt->event_type = event_type;
1000bb8a:	80a0      	strh	r0, [r4, #4]

		if(platform_event_pending_list == NULL)
1000bb8c:	4b06      	ldr	r3, [pc, #24]	; (1000bba8 <platform_event_post+0x34>)
1000bb8e:	681a      	ldr	r2, [r3, #0]
1000bb90:	2a00      	cmp	r2, #0
1000bb92:	d102      	bne.n	1000bb9a <platform_event_post+0x26>
		{
			platform_event_pending_list = evt;
1000bb94:	601c      	str	r4, [r3, #0]
1000bb96:	e004      	b.n	1000bba2 <platform_event_post+0x2e>
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
			{
				cur = cur->next;
1000bb98:	001a      	movs	r2, r3
			platform_event_pending_list = evt;
		}
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
1000bb9a:	6813      	ldr	r3, [r2, #0]
1000bb9c:	2b00      	cmp	r3, #0
1000bb9e:	d1fb      	bne.n	1000bb98 <platform_event_post+0x24>
			{
				cur = cur->next;
			}
			cur->next = evt;
1000bba0:	6014      	str	r4, [r2, #0]
		}
		
		//platform_event_signal();
	}
	
}
1000bba2:	bd30      	pop	{r4, r5, pc}
1000bba4:	10014488 	.word	0x10014488
1000bba8:	10014484 	.word	0x10014484

1000bbac <platform_event_init>:
	return status;
	
}

void platform_event_init()
{
1000bbac:	b570      	push	{r4, r5, r6, lr}
	uint32_t i;
	platform_event_free_list = NULL;
1000bbae:	2300      	movs	r3, #0
1000bbb0:	4a06      	ldr	r2, [pc, #24]	; (1000bbcc <platform_event_init+0x20>)
1000bbb2:	6013      	str	r3, [r2, #0]
	platform_event_pending_list = NULL;
1000bbb4:	4a06      	ldr	r2, [pc, #24]	; (1000bbd0 <platform_event_init+0x24>)
1000bbb6:	6013      	str	r3, [r2, #0]
1000bbb8:	4c06      	ldr	r4, [pc, #24]	; (1000bbd4 <platform_event_init+0x28>)
1000bbba:	0026      	movs	r6, r4
1000bbbc:	3678      	adds	r6, #120	; 0x78
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
	{
		platform_event_free(&platform_event_pool[i]);
1000bbbe:	4d06      	ldr	r5, [pc, #24]	; (1000bbd8 <platform_event_init+0x2c>)
1000bbc0:	0020      	movs	r0, r4
1000bbc2:	47a8      	blx	r5
1000bbc4:	340c      	adds	r4, #12
{
	uint32_t i;
	platform_event_free_list = NULL;
	platform_event_pending_list = NULL;
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
1000bbc6:	42b4      	cmp	r4, r6
1000bbc8:	d1fa      	bne.n	1000bbc0 <platform_event_init+0x14>
	{
		platform_event_free(&platform_event_pool[i]);
	}
}
1000bbca:	bd70      	pop	{r4, r5, r6, pc}
1000bbcc:	10014488 	.word	0x10014488
1000bbd0:	10014484 	.word	0x10014484
1000bbd4:	1001448c 	.word	0x1001448c
1000bbd8:	1000bb65 	.word	0x1000bb65

1000bbdc <at_ke_msg_send>:
	}
	return status;
}

static void at_ke_msg_send(void const * param_ptr)
{
1000bbdc:	b570      	push	{r4, r5, r6, lr}
1000bbde:	0004      	movs	r4, r0
	struct ke_msg *kemsg;
	uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
1000bbe0:	4b13      	ldr	r3, [pc, #76]	; (1000bc30 <at_ke_msg_send+0x54>)
1000bbe2:	681d      	ldr	r5, [r3, #0]
	ke_msg_send(param_ptr);
1000bbe4:	4b13      	ldr	r3, [pc, #76]	; (1000bc34 <at_ke_msg_send+0x58>)
1000bbe6:	681b      	ldr	r3, [r3, #0]
1000bbe8:	4798      	blx	r3
	kemsg = ke_param2msg(param_ptr);

	if((kemsg != NULL) && (kemsg->dest_id != TASK_INTERNAL_APP)) {
1000bbea:	2c0c      	cmp	r4, #12
1000bbec:	d01f      	beq.n	1000bc2e <at_ke_msg_send+0x52>
1000bbee:	3c0c      	subs	r4, #12
1000bbf0:	88e3      	ldrh	r3, [r4, #6]
1000bbf2:	2b05      	cmp	r3, #5
1000bbf4:	d01b      	beq.n	1000bc2e <at_ke_msg_send+0x52>
		if(osc_en == 0)
1000bbf6:	07eb      	lsls	r3, r5, #31
1000bbf8:	d414      	bmi.n	1000bc24 <at_ke_msg_send+0x48>
		{
			/* BLE Core is off, issue a wakeup request*/
			/* First, make sure PD4 is powered up and out of reset */
			pwr_enable_arm_wakeup(1<<1);
1000bbfa:	4b0f      	ldr	r3, [pc, #60]	; (1000bc38 <at_ke_msg_send+0x5c>)
1000bbfc:	681b      	ldr	r3, [r3, #0]
1000bbfe:	2002      	movs	r0, #2
1000bc00:	4798      	blx	r3
			pwr_arm_wakeup_req();
1000bc02:	4b0e      	ldr	r3, [pc, #56]	; (1000bc3c <at_ke_msg_send+0x60>)
1000bc04:	681b      	ldr	r3, [r3, #0]
1000bc06:	4798      	blx	r3
			while (pwr_wait_BLE_out_of_reset(3));
1000bc08:	4c0d      	ldr	r4, [pc, #52]	; (1000bc40 <at_ke_msg_send+0x64>)
1000bc0a:	2003      	movs	r0, #3
1000bc0c:	6823      	ldr	r3, [r4, #0]
1000bc0e:	4798      	blx	r3
1000bc10:	2800      	cmp	r0, #0
1000bc12:	d1fa      	bne.n	1000bc0a <at_ke_msg_send+0x2e>
			pwr_disable_arm_wakeup(1<<1);
1000bc14:	4b0b      	ldr	r3, [pc, #44]	; (1000bc44 <at_ke_msg_send+0x68>)
1000bc16:	681b      	ldr	r3, [r3, #0]
1000bc18:	3002      	adds	r0, #2
1000bc1a:	4798      	blx	r3
			REG_PL_WR(0x4000B020, 1);
1000bc1c:	2201      	movs	r2, #1
1000bc1e:	4b0a      	ldr	r3, [pc, #40]	; (1000bc48 <at_ke_msg_send+0x6c>)
1000bc20:	601a      	str	r2, [r3, #0]
1000bc22:	e004      	b.n	1000bc2e <at_ke_msg_send+0x52>
#endif	//CHIPVERSION_B0
		}
		else
		{
			/*  */
			os_sem_up(gstrFwSem);
1000bc24:	4b09      	ldr	r3, [pc, #36]	; (1000bc4c <at_ke_msg_send+0x70>)
1000bc26:	6818      	ldr	r0, [r3, #0]
1000bc28:	4b09      	ldr	r3, [pc, #36]	; (1000bc50 <at_ke_msg_send+0x74>)
1000bc2a:	681b      	ldr	r3, [r3, #0]
1000bc2c:	4798      	blx	r3
		}
	}
}
1000bc2e:	bd70      	pop	{r4, r5, r6, pc}
1000bc30:	4000b1ec 	.word	0x4000b1ec
1000bc34:	10014534 	.word	0x10014534
1000bc38:	1001452c 	.word	0x1001452c
1000bc3c:	1001453c 	.word	0x1001453c
1000bc40:	10014518 	.word	0x10014518
1000bc44:	10014520 	.word	0x10014520
1000bc48:	4000b020 	.word	0x4000b020
1000bc4c:	10014524 	.word	0x10014524
1000bc50:	10014514 	.word	0x10014514

1000bc54 <samb11_plf_resume_callback>:
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
	return status;
}

void samb11_plf_resume_callback(void)
{
1000bc54:	b510      	push	{r4, lr}
	//spi_flash_turn_off();
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,default_samb11_clock_init[0]);
1000bc56:	4b06      	ldr	r3, [pc, #24]	; (1000bc70 <samb11_plf_resume_callback+0x1c>)
1000bc58:	4a06      	ldr	r2, [pc, #24]	; (1000bc74 <samb11_plf_resume_callback+0x20>)
1000bc5a:	6819      	ldr	r1, [r3, #0]
1000bc5c:	6011      	str	r1, [r2, #0]
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,default_samb11_clock_init[1]);
1000bc5e:	685a      	ldr	r2, [r3, #4]
1000bc60:	4b05      	ldr	r3, [pc, #20]	; (1000bc78 <samb11_plf_resume_callback+0x24>)
1000bc62:	601a      	str	r2, [r3, #0]
	if(samb11_app_resume_cb != NULL)
1000bc64:	4b05      	ldr	r3, [pc, #20]	; (1000bc7c <samb11_plf_resume_callback+0x28>)
1000bc66:	681b      	ldr	r3, [r3, #0]
1000bc68:	2b00      	cmp	r3, #0
1000bc6a:	d000      	beq.n	1000bc6e <samb11_plf_resume_callback+0x1a>
	{
		samb11_app_resume_cb();
1000bc6c:	4798      	blx	r3
	}
}
1000bc6e:	bd10      	pop	{r4, pc}
1000bc70:	10014fc0 	.word	0x10014fc0
1000bc74:	4000b00c 	.word	0x4000b00c
1000bc78:	4000b010 	.word	0x4000b010
1000bc7c:	1001529c 	.word	0x1001529c

1000bc80 <init_port_list>:
port port_list[LPGPIO_MAX];
uint32_t default_samb11_clock_init[2];
void samb11_plf_resume_callback(void);

void init_port_list(void)
{
1000bc80:	b570      	push	{r4, r5, r6, lr}
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
1000bc82:	2232      	movs	r2, #50	; 0x32
1000bc84:	2100      	movs	r1, #0
1000bc86:	480d      	ldr	r0, [pc, #52]	; (1000bcbc <init_port_list+0x3c>)
1000bc88:	4b0d      	ldr	r3, [pc, #52]	; (1000bcc0 <init_port_list+0x40>)
1000bc8a:	4798      	blx	r3
1000bc8c:	2100      	movs	r1, #0
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000bc8e:	480b      	ldr	r0, [pc, #44]	; (1000bcbc <init_port_list+0x3c>)
		port_list[i].bit.available = 1;
1000bc90:	2501      	movs	r5, #1
		port_list[i].bit.configured = 0;
1000bc92:	2402      	movs	r4, #2
void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000bc94:	004a      	lsls	r2, r1, #1
1000bc96:	5411      	strb	r1, [r2, r0]
		port_list[i].bit.available = 1;
1000bc98:	1882      	adds	r2, r0, r2
1000bc9a:	7853      	ldrb	r3, [r2, #1]
1000bc9c:	432b      	orrs	r3, r5
		port_list[i].bit.configured = 0;
1000bc9e:	b2db      	uxtb	r3, r3
1000bca0:	43a3      	bics	r3, r4
1000bca2:	7053      	strb	r3, [r2, #1]
1000bca4:	3101      	adds	r1, #1

void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
1000bca6:	2919      	cmp	r1, #25
1000bca8:	d1f4      	bne.n	1000bc94 <init_port_list+0x14>
		port_list[i].bit.gpio_num = i;
		port_list[i].bit.available = 1;
		port_list[i].bit.configured = 0;
	}
	//Set the GPIO for SWD is not available
	port_list[0].bit.available = 0;
1000bcaa:	4b04      	ldr	r3, [pc, #16]	; (1000bcbc <init_port_list+0x3c>)
1000bcac:	785a      	ldrb	r2, [r3, #1]
1000bcae:	3918      	subs	r1, #24
1000bcb0:	438a      	bics	r2, r1
1000bcb2:	705a      	strb	r2, [r3, #1]
	port_list[1].bit.available = 0;
1000bcb4:	78da      	ldrb	r2, [r3, #3]
1000bcb6:	438a      	bics	r2, r1
1000bcb8:	70da      	strb	r2, [r3, #3]
	//GPIO 14 is used for Coex and controlled by Firmware
	//port_list[14].bit.available = 0;
}
1000bcba:	bd70      	pop	{r4, r5, r6, pc}
1000bcbc:	10014fdc 	.word	0x10014fdc
1000bcc0:	10010435 	.word	0x10010435

1000bcc4 <init_clock>:

void init_clock(void)
{
	uint32_t regval;
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0);
1000bcc4:	4a06      	ldr	r2, [pc, #24]	; (1000bce0 <init_clock+0x1c>)
1000bcc6:	6811      	ldr	r1, [r2, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_1_CLK_EN);
	//disable UART core & interface clocks
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_IF_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN);
1000bcc8:	4b06      	ldr	r3, [pc, #24]	; (1000bce4 <init_clock+0x20>)
1000bcca:	400b      	ands	r3, r1
	//disable I2C core 1 clocks
	//regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C1_CORE_CLK_EN);		//do not disable I2C because I2C driver in ASF will not enable.
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,regval);
1000bccc:	6013      	str	r3, [r2, #0]
	default_samb11_clock_init[0] = regval;
1000bcce:	4a06      	ldr	r2, [pc, #24]	; (1000bce8 <init_clock+0x24>)
1000bcd0:	6013      	str	r3, [r2, #0]
	
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1);
1000bcd2:	4906      	ldr	r1, [pc, #24]	; (1000bcec <init_clock+0x28>)
1000bcd4:	6808      	ldr	r0, [r1, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_4_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_5_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_6_CLK_EN);
	//disable SPI SCK Phase int clock 
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN);
1000bcd6:	4b06      	ldr	r3, [pc, #24]	; (1000bcf0 <init_clock+0x2c>)
1000bcd8:	4003      	ands	r3, r0
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,regval);
1000bcda:	600b      	str	r3, [r1, #0]
	default_samb11_clock_init[1] = regval;
1000bcdc:	6053      	str	r3, [r2, #4]
	//ARM debugger
	
	//store default values
}
1000bcde:	4770      	bx	lr
1000bce0:	4000b00c 	.word	0x4000b00c
1000bce4:	fffe0fd3 	.word	0xfffe0fd3
1000bce8:	10014fc0 	.word	0x10014fc0
1000bcec:	4000b010 	.word	0x4000b010
1000bcf0:	ffffe7c0 	.word	0xffffe7c0

1000bcf4 <platform_driver_init>:

plf_drv_status platform_driver_init()
{
1000bcf4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000bcf6:	4657      	mov	r7, sl
1000bcf8:	464e      	mov	r6, r9
1000bcfa:	4645      	mov	r5, r8
1000bcfc:	b4e0      	push	{r5, r6, r7}
	plf_drv_status status = STATUS_NOT_INITIALIZED;
	if((platform_initialized == 0) || (platform_initialized != 1)) {
1000bcfe:	4b4f      	ldr	r3, [pc, #316]	; (1000be3c <platform_driver_init+0x148>)
1000bd00:	781b      	ldrb	r3, [r3, #0]
1000bd02:	2b00      	cmp	r3, #0
1000bd04:	d004      	beq.n	1000bd10 <platform_driver_init+0x1c>
1000bd06:	4b4d      	ldr	r3, [pc, #308]	; (1000be3c <platform_driver_init+0x148>)
1000bd08:	781b      	ldrb	r3, [r3, #0]
1000bd0a:	2b01      	cmp	r3, #1
1000bd0c:	d100      	bne.n	1000bd10 <platform_driver_init+0x1c>
1000bd0e:	e08c      	b.n	1000be2a <platform_driver_init+0x136>
		init_port_list();
1000bd10:	4b4b      	ldr	r3, [pc, #300]	; (1000be40 <platform_driver_init+0x14c>)
1000bd12:	4798      	blx	r3
		init_clock();
1000bd14:	4b4b      	ldr	r3, [pc, #300]	; (1000be44 <platform_driver_init+0x150>)
1000bd16:	4798      	blx	r3
		// Initialize the ble stack message handler to NULL
		ble_stack_message_handler = NULL;
1000bd18:	2300      	movs	r3, #0
1000bd1a:	4698      	mov	r8, r3
1000bd1c:	4b4a      	ldr	r3, [pc, #296]	; (1000be48 <platform_driver_init+0x154>)
1000bd1e:	4642      	mov	r2, r8
1000bd20:	601a      	str	r2, [r3, #0]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000bd22:	4c4a      	ldr	r4, [pc, #296]	; (1000be4c <platform_driver_init+0x158>)
1000bd24:	2380      	movs	r3, #128	; 0x80
1000bd26:	2280      	movs	r2, #128	; 0x80
1000bd28:	0412      	lsls	r2, r2, #16
1000bd2a:	4692      	mov	sl, r2
1000bd2c:	50e2      	str	r2, [r4, r3]
1000bd2e:	2280      	movs	r2, #128	; 0x80
1000bd30:	0452      	lsls	r2, r2, #17
1000bd32:	4691      	mov	r9, r2
1000bd34:	50e2      	str	r2, [r4, r3]
#ifdef CHIPVERSION_B0
		NVIC_DisableIRQ(GPIO0_IRQn);
		NVIC_DisableIRQ(GPIO1_IRQn);
		/* NVIC_DisableIRQ(PORT0_COMB_IRQn); */
		/* NVIC_DisableIRQ(PORT1_COMB_IRQn); */
		platform_register_isr = (uint8_t (*)(uint8_t ,void *))0x000007d7;
1000bd36:	4d46      	ldr	r5, [pc, #280]	; (1000be50 <platform_driver_init+0x15c>)
1000bd38:	4b46      	ldr	r3, [pc, #280]	; (1000be54 <platform_driver_init+0x160>)
1000bd3a:	602b      	str	r3, [r5, #0]
		platform_unregister_isr = (uint8_t (*)(uint8_t ))0x000007bd;
1000bd3c:	4b46      	ldr	r3, [pc, #280]	; (1000be58 <platform_driver_init+0x164>)
1000bd3e:	4a47      	ldr	r2, [pc, #284]	; (1000be5c <platform_driver_init+0x168>)
1000bd40:	6013      	str	r3, [r2, #0]
		handle_ext_wakeup_isr = (void (*)(void))0x1bc51;
1000bd42:	4947      	ldr	r1, [pc, #284]	; (1000be60 <platform_driver_init+0x16c>)
1000bd44:	4a47      	ldr	r2, [pc, #284]	; (1000be64 <platform_driver_init+0x170>)
1000bd46:	6011      	str	r1, [r2, #0]
		gapm_get_task_from_id = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400bc));
1000bd48:	4a47      	ldr	r2, [pc, #284]	; (1000be68 <platform_driver_init+0x174>)
1000bd4a:	6811      	ldr	r1, [r2, #0]
1000bd4c:	4a47      	ldr	r2, [pc, #284]	; (1000be6c <platform_driver_init+0x178>)
1000bd4e:	6011      	str	r1, [r2, #0]
		gapm_get_id_from_task = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400b8));
1000bd50:	4a47      	ldr	r2, [pc, #284]	; (1000be70 <platform_driver_init+0x17c>)
1000bd52:	6811      	ldr	r1, [r2, #0]
1000bd54:	4a47      	ldr	r2, [pc, #284]	; (1000be74 <platform_driver_init+0x180>)
1000bd56:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_set = (void (*)(uint16_t))0x0001b99f;
1000bd58:	4947      	ldr	r1, [pc, #284]	; (1000be78 <platform_driver_init+0x184>)
1000bd5a:	4a48      	ldr	r2, [pc, #288]	; (1000be7c <platform_driver_init+0x188>)
1000bd5c:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_clear = (void (*)(uint16_t))0x0001b9db;
1000bd5e:	4948      	ldr	r1, [pc, #288]	; (1000be80 <platform_driver_init+0x18c>)
1000bd60:	4a48      	ldr	r2, [pc, #288]	; (1000be84 <platform_driver_init+0x190>)
1000bd62:	6011      	str	r1, [r2, #0]
		apps_resume_cb = (uint32_t *)0x1004003c;
1000bd64:	4f48      	ldr	r7, [pc, #288]	; (1000be88 <platform_driver_init+0x194>)
1000bd66:	4a49      	ldr	r2, [pc, #292]	; (1000be8c <platform_driver_init+0x198>)
1000bd68:	603a      	str	r2, [r7, #0]
		actualfreq = (uint32_t *)0x10041FC0; /* set to NULL for now as clock calibration is disabled for the time being */  /*(uint32_t *)0x10006bd8;*/
1000bd6a:	4949      	ldr	r1, [pc, #292]	; (1000be90 <platform_driver_init+0x19c>)
1000bd6c:	4a49      	ldr	r2, [pc, #292]	; (1000be94 <platform_driver_init+0x1a0>)
1000bd6e:	6011      	str	r1, [r2, #0]
		updateuartbr_fp = (void (*)())0x10041FC4;
1000bd70:	4949      	ldr	r1, [pc, #292]	; (1000be98 <platform_driver_init+0x1a4>)
1000bd72:	4a4a      	ldr	r2, [pc, #296]	; (1000be9c <platform_driver_init+0x1a8>)
1000bd74:	6011      	str	r1, [r2, #0]
		wakeup_source_active_cb = (uint32_t *)0x10041FD4;
1000bd76:	4e4a      	ldr	r6, [pc, #296]	; (1000bea0 <platform_driver_init+0x1ac>)
1000bd78:	4a4a      	ldr	r2, [pc, #296]	; (1000bea4 <platform_driver_init+0x1b0>)
1000bd7a:	6032      	str	r2, [r6, #0]
		wakeup_event_pending = (uint32_t *)0x10041FD8;
1000bd7c:	494a      	ldr	r1, [pc, #296]	; (1000bea8 <platform_driver_init+0x1b4>)
1000bd7e:	4a4b      	ldr	r2, [pc, #300]	; (1000beac <platform_driver_init+0x1b8>)
1000bd80:	6011      	str	r1, [r2, #0]
		/* power APIs */
		pwr_enable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cbe9;
1000bd82:	494b      	ldr	r1, [pc, #300]	; (1000beb0 <platform_driver_init+0x1bc>)
1000bd84:	4a4b      	ldr	r2, [pc, #300]	; (1000beb4 <platform_driver_init+0x1c0>)
1000bd86:	6011      	str	r1, [r2, #0]
		pwr_disable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cd8f;
1000bd88:	494b      	ldr	r1, [pc, #300]	; (1000beb8 <platform_driver_init+0x1c4>)
1000bd8a:	4a4c      	ldr	r2, [pc, #304]	; (1000bebc <platform_driver_init+0x1c8>)
1000bd8c:	6011      	str	r1, [r2, #0]
		pwr_arm_wakeup_req = (int (*)(void))0x0001cea3;
1000bd8e:	494c      	ldr	r1, [pc, #304]	; (1000bec0 <platform_driver_init+0x1cc>)
1000bd90:	4a4c      	ldr	r2, [pc, #304]	; (1000bec4 <platform_driver_init+0x1d0>)
1000bd92:	6011      	str	r1, [r2, #0]
		pwr_wait_BLE_out_of_reset = (int (*)(uint32_t threshold))0x0001cbcf;
1000bd94:	494c      	ldr	r1, [pc, #304]	; (1000bec8 <platform_driver_init+0x1d4>)
1000bd96:	4a4d      	ldr	r2, [pc, #308]	; (1000becc <platform_driver_init+0x1d8>)
1000bd98:	6011      	str	r1, [r2, #0]
		NVIC_DisableIRQ(PORT1_ALL_IRQn);
		platform_register_isr = register_isr;
		platform_unregister_isr = unregister_isr;
		handle_ext_wakeup_isr = (void (*)(void))0x14085;
#endif
		platform_unregister_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX);
1000bd9a:	2028      	movs	r0, #40	; 0x28
1000bd9c:	4798      	blx	r3
		platform_register_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX,(void*)PORT1_COMB_Handler);
1000bd9e:	494c      	ldr	r1, [pc, #304]	; (1000bed0 <platform_driver_init+0x1dc>)
1000bda0:	2028      	movs	r0, #40	; 0x28
1000bda2:	682b      	ldr	r3, [r5, #0]
1000bda4:	4798      	blx	r3
		platform_register_isr(GPIO0_COMBINED_VECTOR_TABLE_INDEX,(void*)gpio0_combined_isr_handler);
1000bda6:	682b      	ldr	r3, [r5, #0]
1000bda8:	494a      	ldr	r1, [pc, #296]	; (1000bed4 <platform_driver_init+0x1e0>)
1000bdaa:	2027      	movs	r0, #39	; 0x27
1000bdac:	4798      	blx	r3
		//gstrFwSem               = (void *)0x100004e4;
		//NMI_MsgQueueRecv = (int (*)(void *, void ** )) 0x00017f67;
		//InternalAppMsgQHandle = (void *)0x10001158;
		//ke_free = (void (*)(void *)) 0x00015e3d;
#elif CHIPVERSION_B0
		ke_msg_send 	= (void (*)(void const *))(*((unsigned int *)0x100400e4));
1000bdae:	4b4a      	ldr	r3, [pc, #296]	; (1000bed8 <platform_driver_init+0x1e4>)
1000bdb0:	681a      	ldr	r2, [r3, #0]
1000bdb2:	4b4a      	ldr	r3, [pc, #296]	; (1000bedc <platform_driver_init+0x1e8>)
1000bdb4:	601a      	str	r2, [r3, #0]
		ke_msg_alloc 	= (void* (*)(ke_msg_id_t const id, ke_task_id_t const dest_id,
1000bdb6:	4a4a      	ldr	r2, [pc, #296]	; (1000bee0 <platform_driver_init+0x1ec>)
1000bdb8:	4b4a      	ldr	r3, [pc, #296]	; (1000bee4 <platform_driver_init+0x1f0>)
1000bdba:	601a      	str	r2, [r3, #0]
										ke_task_id_t const src_id, uint16_t const param_len) )0x00019fe9;
		os_sem_up 		= (int (*)(void*))0x0001dbdd;
1000bdbc:	4a4a      	ldr	r2, [pc, #296]	; (1000bee8 <platform_driver_init+0x1f4>)
1000bdbe:	4b4b      	ldr	r3, [pc, #300]	; (1000beec <platform_driver_init+0x1f8>)
1000bdc0:	601a      	str	r2, [r3, #0]
		os_sem_down		= (int (*)(void*))0x0001dc5b;
1000bdc2:	4a4b      	ldr	r2, [pc, #300]	; (1000bef0 <platform_driver_init+0x1fc>)
1000bdc4:	4b4b      	ldr	r3, [pc, #300]	; (1000bef4 <platform_driver_init+0x200>)
1000bdc6:	601a      	str	r2, [r3, #0]
		gstrFwSem 		= (void*)0x100405ec;
1000bdc8:	4a4b      	ldr	r2, [pc, #300]	; (1000bef8 <platform_driver_init+0x204>)
1000bdca:	4b4c      	ldr	r3, [pc, #304]	; (1000befc <platform_driver_init+0x208>)
1000bdcc:	601a      	str	r2, [r3, #0]
		NMI_MsgQueueRecv = (int(*)(void*, void ** ))0x0001d5e3;
1000bdce:	4a4c      	ldr	r2, [pc, #304]	; (1000bf00 <platform_driver_init+0x20c>)
1000bdd0:	4b4c      	ldr	r3, [pc, #304]	; (1000bf04 <platform_driver_init+0x210>)
1000bdd2:	601a      	str	r2, [r3, #0]
		InternalAppMsgQHandle = (void*)0x10040c20;
1000bdd4:	4a4c      	ldr	r2, [pc, #304]	; (1000bf08 <platform_driver_init+0x214>)
1000bdd6:	4b4d      	ldr	r3, [pc, #308]	; (1000bf0c <platform_driver_init+0x218>)
1000bdd8:	601a      	str	r2, [r3, #0]
		ke_free = (void(*)(void*))0x00019f09;
1000bdda:	4a4d      	ldr	r2, [pc, #308]	; (1000bf10 <platform_driver_init+0x21c>)
1000bddc:	4b4d      	ldr	r3, [pc, #308]	; (1000bf14 <platform_driver_init+0x220>)
1000bdde:	601a      	str	r2, [r3, #0]
#endif
		memset(rx_buffer,0,sizeof(rx_buffer));
1000bde0:	22a0      	movs	r2, #160	; 0xa0
1000bde2:	0092      	lsls	r2, r2, #2
1000bde4:	2100      	movs	r1, #0
1000bde6:	484c      	ldr	r0, [pc, #304]	; (1000bf18 <platform_driver_init+0x224>)
1000bde8:	4b4c      	ldr	r3, [pc, #304]	; (1000bf1c <platform_driver_init+0x228>)
1000bdea:	4798      	blx	r3
		plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000bdec:	2280      	movs	r2, #128	; 0x80
1000bdee:	0092      	lsls	r2, r2, #2
1000bdf0:	4b4b      	ldr	r3, [pc, #300]	; (1000bf20 <platform_driver_init+0x22c>)
1000bdf2:	801a      	strh	r2, [r3, #0]
		platform_event_init();
1000bdf4:	4b4b      	ldr	r3, [pc, #300]	; (1000bf24 <platform_driver_init+0x230>)
1000bdf6:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000bdf8:	4653      	mov	r3, sl
1000bdfa:	6023      	str	r3, [r4, #0]
1000bdfc:	464b      	mov	r3, r9
1000bdfe:	6023      	str	r3, [r4, #0]
		
#ifndef CHIPVERSION_B0		
		// spi_flash clock fix.
		spi_flash_clock_init();
#endif
		samb11_app_resume_cb = NULL;
1000be00:	4b49      	ldr	r3, [pc, #292]	; (1000bf28 <platform_driver_init+0x234>)
1000be02:	4642      	mov	r2, r8
1000be04:	601a      	str	r2, [r3, #0]
		*apps_resume_cb = (uint32_t)((resume_callback)samb11_plf_resume_callback);
1000be06:	683b      	ldr	r3, [r7, #0]
1000be08:	4a48      	ldr	r2, [pc, #288]	; (1000bf2c <platform_driver_init+0x238>)
1000be0a:	601a      	str	r2, [r3, #0]
		*wakeup_source_active_cb = (uint32_t)((wakeup_source_active_callback)wakeup_active_event_callback);
1000be0c:	6833      	ldr	r3, [r6, #0]
1000be0e:	4a48      	ldr	r2, [pc, #288]	; (1000bf30 <platform_driver_init+0x23c>)
1000be10:	601a      	str	r2, [r3, #0]
		wakeup_int_unregister_callback(0);
1000be12:	2000      	movs	r0, #0
1000be14:	4c47      	ldr	r4, [pc, #284]	; (1000bf34 <platform_driver_init+0x240>)
1000be16:	47a0      	blx	r4
		wakeup_int_unregister_callback(1);
1000be18:	2001      	movs	r0, #1
1000be1a:	47a0      	blx	r4
		wakeup_int_unregister_callback(2);
1000be1c:	2002      	movs	r0, #2
1000be1e:	47a0      	blx	r4
		platform_initialized = 1;
1000be20:	2201      	movs	r2, #1
1000be22:	4b06      	ldr	r3, [pc, #24]	; (1000be3c <platform_driver_init+0x148>)
1000be24:	701a      	strb	r2, [r3, #0]
		status = STATUS_SUCCESS;
1000be26:	2000      	movs	r0, #0
1000be28:	e003      	b.n	1000be32 <platform_driver_init+0x13e>
	}
	else {
		platform_initialized = 1;
1000be2a:	2201      	movs	r2, #1
1000be2c:	4b03      	ldr	r3, [pc, #12]	; (1000be3c <platform_driver_init+0x148>)
1000be2e:	701a      	strb	r2, [r3, #0]
		status = STATUS_ALREADY_INITIALIZED;
1000be30:	2001      	movs	r0, #1
	}
	return status;
}
1000be32:	bc1c      	pop	{r2, r3, r4}
1000be34:	4690      	mov	r8, r2
1000be36:	4699      	mov	r9, r3
1000be38:	46a2      	mov	sl, r4
1000be3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000be3c:	1001451c 	.word	0x1001451c
1000be40:	1000bc81 	.word	0x1000bc81
1000be44:	1000bcc5 	.word	0x1000bcc5
1000be48:	10014538 	.word	0x10014538
1000be4c:	e000e100 	.word	0xe000e100
1000be50:	10015290 	.word	0x10015290
1000be54:	000007d7 	.word	0x000007d7
1000be58:	000007bd 	.word	0x000007bd
1000be5c:	10014fcc 	.word	0x10014fcc
1000be60:	0001bc51 	.word	0x0001bc51
1000be64:	10015294 	.word	0x10015294
1000be68:	100400bc 	.word	0x100400bc
1000be6c:	10014510 	.word	0x10014510
1000be70:	100400b8 	.word	0x100400b8
1000be74:	1001450c 	.word	0x1001450c
1000be78:	0001b99f 	.word	0x0001b99f
1000be7c:	10014fc8 	.word	0x10014fc8
1000be80:	0001b9db 	.word	0x0001b9db
1000be84:	10014fd4 	.word	0x10014fd4
1000be88:	100152a4 	.word	0x100152a4
1000be8c:	1004003c 	.word	0x1004003c
1000be90:	10041fc0 	.word	0x10041fc0
1000be94:	10014fd8 	.word	0x10014fd8
1000be98:	10041fc4 	.word	0x10041fc4
1000be9c:	100152a0 	.word	0x100152a0
1000bea0:	10015298 	.word	0x10015298
1000bea4:	10041fd4 	.word	0x10041fd4
1000bea8:	10041fd8 	.word	0x10041fd8
1000beac:	10014fd0 	.word	0x10014fd0
1000beb0:	0001cbe9 	.word	0x0001cbe9
1000beb4:	1001452c 	.word	0x1001452c
1000beb8:	0001cd8f 	.word	0x0001cd8f
1000bebc:	10014520 	.word	0x10014520
1000bec0:	0001cea3 	.word	0x0001cea3
1000bec4:	1001453c 	.word	0x1001453c
1000bec8:	0001cbcf 	.word	0x0001cbcf
1000becc:	10014518 	.word	0x10014518
1000bed0:	1000c329 	.word	0x1000c329
1000bed4:	1000c2bd 	.word	0x1000c2bd
1000bed8:	100400e4 	.word	0x100400e4
1000bedc:	10014534 	.word	0x10014534
1000bee0:	00019fe9 	.word	0x00019fe9
1000bee4:	10014544 	.word	0x10014544
1000bee8:	0001dbdd 	.word	0x0001dbdd
1000beec:	10014514 	.word	0x10014514
1000bef0:	0001dc5b 	.word	0x0001dc5b
1000bef4:	10014528 	.word	0x10014528
1000bef8:	100405ec 	.word	0x100405ec
1000befc:	10014524 	.word	0x10014524
1000bf00:	0001d5e3 	.word	0x0001d5e3
1000bf04:	10014530 	.word	0x10014530
1000bf08:	10040c20 	.word	0x10040c20
1000bf0c:	10014548 	.word	0x10014548
1000bf10:	00019f09 	.word	0x00019f09
1000bf14:	10014508 	.word	0x10014508
1000bf18:	10015010 	.word	0x10015010
1000bf1c:	10010435 	.word	0x10010435
1000bf20:	100152a8 	.word	0x100152a8
1000bf24:	1000bbad 	.word	0x1000bbad
1000bf28:	1001529c 	.word	0x1001529c
1000bf2c:	1000bc55 	.word	0x1000bc55
1000bf30:	1000c385 	.word	0x1000c385
1000bf34:	1000c36d 	.word	0x1000c36d

1000bf38 <platform_register_ble_msg_handler>:


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000bf38:	4b04      	ldr	r3, [pc, #16]	; (1000bf4c <platform_register_ble_msg_handler+0x14>)
1000bf3a:	781a      	ldrb	r2, [r3, #0]
		ble_stack_message_handler = fp;
		status = STATUS_SUCCESS;
	}
	else {
		status = STATUS_NOT_INITIALIZED;
1000bf3c:	2305      	movs	r3, #5


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000bf3e:	2a01      	cmp	r2, #1
1000bf40:	d102      	bne.n	1000bf48 <platform_register_ble_msg_handler+0x10>
		ble_stack_message_handler = fp;
1000bf42:	4b03      	ldr	r3, [pc, #12]	; (1000bf50 <platform_register_ble_msg_handler+0x18>)
1000bf44:	6018      	str	r0, [r3, #0]
		status = STATUS_SUCCESS;
1000bf46:	2300      	movs	r3, #0
	}
	else {
		status = STATUS_NOT_INITIALIZED;
	}
	return status;
}
1000bf48:	0018      	movs	r0, r3
1000bf4a:	4770      	bx	lr
1000bf4c:	1001451c 	.word	0x1001451c
1000bf50:	10014538 	.word	0x10014538

1000bf54 <platform_interface_send>:


//Sends a message through RW kernel messaging API
//struct ke_msg * p_msg;
void platform_interface_send(uint8_t* data, uint32_t len)
{
1000bf54:	b570      	push	{r4, r5, r6, lr}
1000bf56:	0004      	movs	r4, r0
	void* params;
	
	#if (CHIPVERSION_B0)
	ke_task_id_t dest_id;
	dest_id = p_msg_hdr->dest_id;
	if(gapm_get_task_from_id != NULL)
1000bf58:	4b0e      	ldr	r3, [pc, #56]	; (1000bf94 <platform_interface_send+0x40>)
1000bf5a:	681b      	ldr	r3, [r3, #0]
1000bf5c:	2b00      	cmp	r3, #0
1000bf5e:	d002      	beq.n	1000bf66 <platform_interface_send+0x12>
		p_msg_hdr->dest_id = gapm_get_task_from_id(dest_id);
1000bf60:	8840      	ldrh	r0, [r0, #2]
1000bf62:	4798      	blx	r3
1000bf64:	8060      	strh	r0, [r4, #2]
	#endif	//CHIPVERSION_B0
	// Allocate the kernel message
	params = ke_msg_alloc(p_msg_hdr->id, p_msg_hdr->dest_id, p_msg_hdr->src_id, p_msg_hdr->param_len);
1000bf66:	88e3      	ldrh	r3, [r4, #6]
1000bf68:	88a2      	ldrh	r2, [r4, #4]
1000bf6a:	8861      	ldrh	r1, [r4, #2]
1000bf6c:	8820      	ldrh	r0, [r4, #0]
1000bf6e:	4d0a      	ldr	r5, [pc, #40]	; (1000bf98 <platform_interface_send+0x44>)
1000bf70:	682d      	ldr	r5, [r5, #0]
1000bf72:	47a8      	blx	r5
1000bf74:	0005      	movs	r5, r0
											
	//no params
	if (p_msg_hdr->param_len == 0)
1000bf76:	88e2      	ldrh	r2, [r4, #6]
1000bf78:	2a00      	cmp	r2, #0
1000bf7a:	d102      	bne.n	1000bf82 <platform_interface_send+0x2e>
	{
		// Send message directly
		at_ke_msg_send(params);
1000bf7c:	4b07      	ldr	r3, [pc, #28]	; (1000bf9c <platform_interface_send+0x48>)
1000bf7e:	4798      	blx	r3
1000bf80:	e006      	b.n	1000bf90 <platform_interface_send+0x3c>
	}
	else
	{
		//copy params
		memcpy(params,&(data[KE_MSG_HDR_LENGTH]),p_msg_hdr->param_len);
1000bf82:	0021      	movs	r1, r4
1000bf84:	3108      	adds	r1, #8
1000bf86:	4b06      	ldr	r3, [pc, #24]	; (1000bfa0 <platform_interface_send+0x4c>)
1000bf88:	4798      	blx	r3
		// Send the kernel message
		at_ke_msg_send(params);
1000bf8a:	0028      	movs	r0, r5
1000bf8c:	4b03      	ldr	r3, [pc, #12]	; (1000bf9c <platform_interface_send+0x48>)
1000bf8e:	4798      	blx	r3
	}
}
1000bf90:	bd70      	pop	{r4, r5, r6, pc}
1000bf92:	46c0      	nop			; (mov r8, r8)
1000bf94:	10014510 	.word	0x10014510
1000bf98:	10014544 	.word	0x10014544
1000bf9c:	1000bbdd 	.word	0x1000bbdd
1000bfa0:	10010423 	.word	0x10010423

1000bfa4 <platform_event_wait>:
//Waits on InternalAppMsgQHandle Queue
// This function won't busy wait if nothing on queue but will down the semaphore and go to a blocking state
// The OS then will move control to other higher priority tasks and will only return if these tasks finish processing AND the queue has received 
//a msg
plf_drv_status platform_event_wait(uint32_t timeout)
{
1000bfa4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000bfa6:	465f      	mov	r7, fp
1000bfa8:	4656      	mov	r6, sl
1000bfaa:	464d      	mov	r5, r9
1000bfac:	4644      	mov	r4, r8
1000bfae:	b4f0      	push	{r4, r5, r6, r7}
1000bfb0:	b087      	sub	sp, #28
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000bfb2:	1e44      	subs	r4, r0, #1
plf_drv_status platform_event_wait(uint32_t timeout)
{
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
1000bfb4:	2300      	movs	r3, #0
1000bfb6:	4699      	mov	r9, r3
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000bfb8:	1ce3      	adds	r3, r4, #3
1000bfba:	d81c      	bhi.n	1000bff6 <platform_event_wait+0x52>
	return num_of_freed;
}

static void platform_start_event_timeout(uint32_t timeout)
{
	uint8_t msg[8+5] = {0};
1000bfbc:	220d      	movs	r2, #13
1000bfbe:	2100      	movs	r1, #0
1000bfc0:	a802      	add	r0, sp, #8
1000bfc2:	4b82      	ldr	r3, [pc, #520]	; (1000c1cc <platform_event_wait+0x228>)
1000bfc4:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000bfc6:	2333      	movs	r3, #51	; 0x33
1000bfc8:	aa02      	add	r2, sp, #8
1000bfca:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000bfcc:	3b30      	subs	r3, #48	; 0x30
1000bfce:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000bfd0:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000bfd2:	3302      	adds	r3, #2
1000bfd4:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000bfd6:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (((5)>>8) & 0x00FF );
	
	msg[u16TxLen++] = (uint8_t)((timeout) & 0x00FF );
1000bfd8:	7214      	strb	r4, [r2, #8]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 8) & 0x00FF) ;
1000bfda:	0a23      	lsrs	r3, r4, #8
1000bfdc:	7253      	strb	r3, [r2, #9]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 16) & 0x00FF);
1000bfde:	0c23      	lsrs	r3, r4, #16
1000bfe0:	7293      	strb	r3, [r2, #10]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 24) & 0x00FF);
1000bfe2:	0e24      	lsrs	r4, r4, #24
1000bfe4:	72d4      	strb	r4, [r2, #11]
	
	msg[u16TxLen++] = ((1) & 0x00FF );
1000bfe6:	2301      	movs	r3, #1
1000bfe8:	7313      	strb	r3, [r2, #12]
	
	platform_interface_send(msg, u16TxLen);
1000bfea:	210d      	movs	r1, #13
1000bfec:	0010      	movs	r0, r2
1000bfee:	4b78      	ldr	r3, [pc, #480]	; (1000c1d0 <platform_event_wait+0x22c>)
1000bff0:	4798      	blx	r3
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
	{			
		platform_start_event_timeout(timeout-1);
		bEventTimeoutFlag = 1;
1000bff2:	2301      	movs	r3, #1
1000bff4:	4699      	mov	r9, r3
1000bff6:	2400      	movs	r4, #0
1000bff8:	2500      	movs	r5, #0
	}

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
1000bffa:	4f76      	ldr	r7, [pc, #472]	; (1000c1d4 <platform_event_wait+0x230>)
1000bffc:	4e76      	ldr	r6, [pc, #472]	; (1000c1d8 <platform_event_wait+0x234>)
1000bffe:	4977      	ldr	r1, [pc, #476]	; (1000c1dc <platform_event_wait+0x238>)
1000c000:	6838      	ldr	r0, [r7, #0]
1000c002:	6833      	ldr	r3, [r6, #0]
1000c004:	4798      	blx	r3
1000c006:	2800      	cmp	r0, #0
1000c008:	d000      	beq.n	1000c00c <platform_event_wait+0x68>
1000c00a:	e088      	b.n	1000c11e <platform_event_wait+0x17a>
		{
			uint16_t msg_id = rcv_msg->id;
1000c00c:	4b73      	ldr	r3, [pc, #460]	; (1000c1dc <platform_event_wait+0x238>)
1000c00e:	681c      	ldr	r4, [r3, #0]
1000c010:	88a3      	ldrh	r3, [r4, #4]
1000c012:	469a      	mov	sl, r3
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000c014:	23cd      	movs	r3, #205	; 0xcd
1000c016:	009b      	lsls	r3, r3, #2
1000c018:	459a      	cmp	sl, r3
1000c01a:	d100      	bne.n	1000c01e <platform_event_wait+0x7a>
1000c01c:	e0c7      	b.n	1000c1ae <platform_event_wait+0x20a>

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
1000c01e:	8923      	ldrh	r3, [r4, #8]
1000c020:	469b      	mov	fp, r3
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
1000c022:	8963      	ldrh	r3, [r4, #10]
1000c024:	4698      	mov	r8, r3
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000c026:	464b      	mov	r3, r9
1000c028:	2b00      	cmp	r3, #0
1000c02a:	d011      	beq.n	1000c050 <platform_event_wait+0xac>
	platform_interface_send(msg, u16TxLen);
}

static void platform_stop_event_timeout(void)
{
	uint8_t msg[8+5] = {0};
1000c02c:	220d      	movs	r2, #13
1000c02e:	2100      	movs	r1, #0
1000c030:	a802      	add	r0, sp, #8
1000c032:	4b66      	ldr	r3, [pc, #408]	; (1000c1cc <platform_event_wait+0x228>)
1000c034:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000c036:	2333      	movs	r3, #51	; 0x33
1000c038:	aa02      	add	r2, sp, #8
1000c03a:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000c03c:	3b30      	subs	r3, #48	; 0x30
1000c03e:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000c040:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000c042:	3302      	adds	r3, #2
1000c044:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000c046:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (uint8_t)(( (0) >> 16) & 0x00FF);
	msg[u16TxLen++] = (uint8_t)(( (0) >> 24) & 0x00FF);
	
	msg[u16TxLen++] = ((0) & 0x00FF );
	
	platform_interface_send(msg, u16TxLen);
1000c048:	210d      	movs	r1, #13
1000c04a:	0010      	movs	r0, r2
1000c04c:	4b60      	ldr	r3, [pc, #384]	; (1000c1d0 <platform_event_wait+0x22c>)
1000c04e:	4798      	blx	r3
			{
				//Stop timer if it is still running
				platform_stop_event_timeout();
			}
				
			if(msg_id == PERIPHERAL_INTERRUPT_EVENT)
1000c050:	23a0      	movs	r3, #160	; 0xa0
1000c052:	00db      	lsls	r3, r3, #3
1000c054:	459a      	cmp	sl, r3
1000c056:	d121      	bne.n	1000c09c <platform_event_wait+0xf8>
			{
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
1000c058:	4b61      	ldr	r3, [pc, #388]	; (1000c1e0 <platform_event_wait+0x23c>)
1000c05a:	881b      	ldrh	r3, [r3, #0]
1000c05c:	4443      	add	r3, r8
1000c05e:	22a0      	movs	r2, #160	; 0xa0
1000c060:	0092      	lsls	r2, r2, #2
1000c062:	4293      	cmp	r3, r2
1000c064:	dd02      	ble.n	1000c06c <platform_event_wait+0xc8>
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000c066:	3a80      	subs	r2, #128	; 0x80
1000c068:	4b5d      	ldr	r3, [pc, #372]	; (1000c1e0 <platform_event_wait+0x23c>)
1000c06a:	801a      	strh	r2, [r3, #0]
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
1000c06c:	4b5c      	ldr	r3, [pc, #368]	; (1000c1e0 <platform_event_wait+0x23c>)
1000c06e:	469a      	mov	sl, r3
1000c070:	881d      	ldrh	r5, [r3, #0]
1000c072:	4b5c      	ldr	r3, [pc, #368]	; (1000c1e4 <platform_event_wait+0x240>)
1000c074:	18ed      	adds	r5, r5, r3
1000c076:	0021      	movs	r1, r4
1000c078:	310c      	adds	r1, #12
1000c07a:	4642      	mov	r2, r8
1000c07c:	0028      	movs	r0, r5
1000c07e:	4b5a      	ldr	r3, [pc, #360]	; (1000c1e8 <platform_event_wait+0x244>)
1000c080:	4798      	blx	r3
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
1000c082:	4642      	mov	r2, r8
1000c084:	0029      	movs	r1, r5
1000c086:	4658      	mov	r0, fp
1000c088:	4b58      	ldr	r3, [pc, #352]	; (1000c1ec <platform_event_wait+0x248>)
1000c08a:	4798      	blx	r3
				plf_event_buff_index += len;
1000c08c:	4653      	mov	r3, sl
1000c08e:	881b      	ldrh	r3, [r3, #0]
1000c090:	4443      	add	r3, r8
1000c092:	4652      	mov	r2, sl
1000c094:	8013      	strh	r3, [r2, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000c096:	2400      	movs	r4, #0
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
				plf_event_buff_index += len;
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
1000c098:	2502      	movs	r5, #2
1000c09a:	e03a      	b.n	1000c112 <platform_event_wait+0x16e>
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000c09c:	4b54      	ldr	r3, [pc, #336]	; (1000c1f0 <platform_event_wait+0x24c>)
1000c09e:	681b      	ldr	r3, [r3, #0]
1000c0a0:	2b00      	cmp	r3, #0
1000c0a2:	d032      	beq.n	1000c10a <platform_event_wait+0x166>
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
1000c0a4:	4b4d      	ldr	r3, [pc, #308]	; (1000c1dc <platform_event_wait+0x238>)
1000c0a6:	681a      	ldr	r2, [r3, #0]
1000c0a8:	8893      	ldrh	r3, [r2, #4]
1000c0aa:	21cd      	movs	r1, #205	; 0xcd
1000c0ac:	0089      	lsls	r1, r1, #2
1000c0ae:	428b      	cmp	r3, r1
1000c0b0:	d104      	bne.n	1000c0bc <platform_event_wait+0x118>
					{
						if(bEventTimeoutFlag)
1000c0b2:	464b      	mov	r3, r9
						{
							status = STATUS_TIMEOUT;	
						}
						else
						{
							bLoopAgain = 1;
1000c0b4:	2401      	movs	r4, #1
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
1000c0b6:	2b00      	cmp	r3, #0
1000c0b8:	d02b      	beq.n	1000c112 <platform_event_wait+0x16e>
1000c0ba:	e028      	b.n	1000c10e <platform_event_wait+0x16a>
							bLoopAgain = 1;
						}
					}
					else
					{
						ke_msg_hdr = (struct ke_msghdr *)((void *)(rx_buffer+BLE_EVENT_BUFFER_START_INDEX));
1000c0bc:	4c4d      	ldr	r4, [pc, #308]	; (1000c1f4 <platform_event_wait+0x250>)
1000c0be:	4d49      	ldr	r5, [pc, #292]	; (1000c1e4 <platform_event_wait+0x240>)
1000c0c0:	6025      	str	r5, [r4, #0]
						ke_msg_hdr->id = rcv_msg->id;
1000c0c2:	702b      	strb	r3, [r5, #0]
1000c0c4:	0a1b      	lsrs	r3, r3, #8
1000c0c6:	706b      	strb	r3, [r5, #1]
//#if (CHIPVERSION_A3 || CHIPVERSION_A4)
					//ke_msg_hdr->src_id = rcv_msg->src_id;
//#else
					ke_msg_hdr->src_id = gapm_get_id_from_task(rcv_msg->src_id);
1000c0c8:	8910      	ldrh	r0, [r2, #8]
1000c0ca:	4b4b      	ldr	r3, [pc, #300]	; (1000c1f8 <platform_event_wait+0x254>)
1000c0cc:	681b      	ldr	r3, [r3, #0]
1000c0ce:	4798      	blx	r3
1000c0d0:	7128      	strb	r0, [r5, #4]
1000c0d2:	0a00      	lsrs	r0, r0, #8
1000c0d4:	7168      	strb	r0, [r5, #5]
//#endif  /* (CHIPVERSION_A3 || CHIPVERSION_A4) */
						ke_msg_hdr->dest_id = rcv_msg->dest_id;
1000c0d6:	6820      	ldr	r0, [r4, #0]
1000c0d8:	4b40      	ldr	r3, [pc, #256]	; (1000c1dc <platform_event_wait+0x238>)
1000c0da:	681a      	ldr	r2, [r3, #0]
1000c0dc:	88d2      	ldrh	r2, [r2, #6]
1000c0de:	8042      	strh	r2, [r0, #2]
						ke_msg_hdr->param_len = rcv_msg->param_len;
1000c0e0:	681d      	ldr	r5, [r3, #0]
1000c0e2:	896b      	ldrh	r3, [r5, #10]
1000c0e4:	80c3      	strh	r3, [r0, #6]
						ke_msg_hdr++;
1000c0e6:	3008      	adds	r0, #8
1000c0e8:	6020      	str	r0, [r4, #0]
						if(rcv_msg->param_len > 0) {
1000c0ea:	896a      	ldrh	r2, [r5, #10]
1000c0ec:	2a00      	cmp	r2, #0
1000c0ee:	d003      	beq.n	1000c0f8 <platform_event_wait+0x154>
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
1000c0f0:	0029      	movs	r1, r5
1000c0f2:	310c      	adds	r1, #12
1000c0f4:	4b3c      	ldr	r3, [pc, #240]	; (1000c1e8 <platform_event_wait+0x244>)
1000c0f6:	4798      	blx	r3
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
1000c0f8:	8969      	ldrh	r1, [r5, #10]
1000c0fa:	3108      	adds	r1, #8
1000c0fc:	4b3c      	ldr	r3, [pc, #240]	; (1000c1f0 <platform_event_wait+0x24c>)
1000c0fe:	681b      	ldr	r3, [r3, #0]
1000c100:	4838      	ldr	r0, [pc, #224]	; (1000c1e4 <platform_event_wait+0x240>)
1000c102:	4798      	blx	r3
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000c104:	2400      	movs	r4, #0
						ke_msg_hdr++;
						if(rcv_msg->param_len > 0) {
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
1000c106:	2503      	movs	r5, #3
1000c108:	e003      	b.n	1000c112 <platform_event_wait+0x16e>
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000c10a:	2400      	movs	r4, #0
1000c10c:	e001      	b.n	1000c112 <platform_event_wait+0x16e>
1000c10e:	2400      	movs	r4, #0
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
						{
							status = STATUS_TIMEOUT;	
1000c110:	25d0      	movs	r5, #208	; 0xd0
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
					}
				}
			}
			ke_free(rcv_msg);
1000c112:	4b32      	ldr	r3, [pc, #200]	; (1000c1dc <platform_event_wait+0x238>)
1000c114:	6818      	ldr	r0, [r3, #0]
1000c116:	4b39      	ldr	r3, [pc, #228]	; (1000c1fc <platform_event_wait+0x258>)
1000c118:	681b      	ldr	r3, [r3, #0]
1000c11a:	4798      	blx	r3
1000c11c:	e000      	b.n	1000c120 <platform_event_wait+0x17c>
		}
		else
		{
			status = STATUS_FAILURE;
1000c11e:	2507      	movs	r5, #7
		}
	}while(bLoopAgain);
1000c120:	2c00      	cmp	r4, #0
1000c122:	d000      	beq.n	1000c126 <platform_event_wait+0x182>
1000c124:	e76b      	b.n	1000bffe <platform_event_wait+0x5a>
	
	if(bEventTimeoutFlag)
1000c126:	464b      	mov	r3, r9
1000c128:	2b00      	cmp	r3, #0
1000c12a:	d046      	beq.n	1000c1ba <platform_event_wait+0x216>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
1000c12c:	4b29      	ldr	r3, [pc, #164]	; (1000c1d4 <platform_event_wait+0x230>)
1000c12e:	681e      	ldr	r6, [r3, #0]
#endif 
static int NMI_MsgQueueDestroyOnKeID(NMI_MsgQueueHandle* pHandle, ke_msg_id_t u16KeMsgId)
{
	int num_of_freed=0;
	Message * current , *prev = NULL;
	if((NULL == pHandle) && (NULL == pHandle->pstrMessageList))
1000c130:	2e00      	cmp	r6, #0
1000c132:	d104      	bne.n	1000c13e <platform_event_wait+0x19a>
1000c134:	2300      	movs	r3, #0
1000c136:	6a1c      	ldr	r4, [r3, #32]
1000c138:	2c00      	cmp	r4, #0
1000c13a:	d131      	bne.n	1000c1a0 <platform_event_wait+0x1fc>
1000c13c:	e03d      	b.n	1000c1ba <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
1000c13e:	6a34      	ldr	r4, [r6, #32]
	os_sem_down(&pHandle->strCriticalSection);
1000c140:	2314      	movs	r3, #20
1000c142:	469c      	mov	ip, r3
1000c144:	44b4      	add	ip, r6
1000c146:	4663      	mov	r3, ip
1000c148:	4660      	mov	r0, ip
1000c14a:	9300      	str	r3, [sp, #0]
1000c14c:	4b2c      	ldr	r3, [pc, #176]	; (1000c200 <platform_event_wait+0x25c>)
1000c14e:	681b      	ldr	r3, [r3, #0]
1000c150:	4798      	blx	r3
	while(NULL != current)
1000c152:	2c00      	cmp	r4, #0
1000c154:	d01f      	beq.n	1000c196 <platform_event_wait+0x1f2>
			}
			ke_free(rcv_msg);
		}
		else
		{
			status = STATUS_FAILURE;
1000c156:	2700      	movs	r7, #0

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000c158:	23cd      	movs	r3, #205	; 0xcd
1000c15a:	009b      	lsls	r3, r3, #2
1000c15c:	4698      	mov	r8, r3
		{
			num_of_freed++;
			if(NULL != prev)
			{
				prev->pstrNext = current->pstrNext;
				ke_free(current);
1000c15e:	4b27      	ldr	r3, [pc, #156]	; (1000c1fc <platform_event_wait+0x258>)
1000c160:	469a      	mov	sl, r3
1000c162:	0020      	movs	r0, r4

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000c164:	6803      	ldr	r3, [r0, #0]
1000c166:	889b      	ldrh	r3, [r3, #4]
1000c168:	4543      	cmp	r3, r8
1000c16a:	d110      	bne.n	1000c18e <platform_event_wait+0x1ea>
		{
			num_of_freed++;
			if(NULL != prev)
1000c16c:	2f00      	cmp	r7, #0
1000c16e:	d006      	beq.n	1000c17e <platform_event_wait+0x1da>
			{
				prev->pstrNext = current->pstrNext;
1000c170:	6883      	ldr	r3, [r0, #8]
1000c172:	60bb      	str	r3, [r7, #8]
				ke_free(current);
1000c174:	4653      	mov	r3, sl
1000c176:	681b      	ldr	r3, [r3, #0]
1000c178:	4798      	blx	r3
				current = prev->pstrNext;
1000c17a:	68b8      	ldr	r0, [r7, #8]
1000c17c:	e009      	b.n	1000c192 <platform_event_wait+0x1ee>
			}
			else
			{
				pHandle->pstrMessageList = current->pstrNext;
1000c17e:	6883      	ldr	r3, [r0, #8]
1000c180:	6233      	str	r3, [r6, #32]
				ke_free(current);
1000c182:	4b1e      	ldr	r3, [pc, #120]	; (1000c1fc <platform_event_wait+0x258>)
1000c184:	681b      	ldr	r3, [r3, #0]
1000c186:	9301      	str	r3, [sp, #4]
1000c188:	4798      	blx	r3
				current = pHandle->pstrMessageList;
1000c18a:	6a30      	ldr	r0, [r6, #32]
1000c18c:	e001      	b.n	1000c192 <platform_event_wait+0x1ee>
			}
		}
		else
		{
			prev = current;
			current = current ->pstrNext;
1000c18e:	0007      	movs	r7, r0
1000c190:	6880      	ldr	r0, [r0, #8]
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
1000c192:	2800      	cmp	r0, #0
1000c194:	d1e6      	bne.n	1000c164 <platform_event_wait+0x1c0>
		{
			prev = current;
			current = current ->pstrNext;
		}
	}
	os_sem_up(&pHandle->strCriticalSection);
1000c196:	4b1b      	ldr	r3, [pc, #108]	; (1000c204 <platform_event_wait+0x260>)
1000c198:	681b      	ldr	r3, [r3, #0]
1000c19a:	9800      	ldr	r0, [sp, #0]
1000c19c:	4798      	blx	r3
	if(bEventTimeoutFlag)
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
1000c19e:	e00c      	b.n	1000c1ba <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
1000c1a0:	2314      	movs	r3, #20
1000c1a2:	9300      	str	r3, [sp, #0]
1000c1a4:	4b16      	ldr	r3, [pc, #88]	; (1000c200 <platform_event_wait+0x25c>)
1000c1a6:	681b      	ldr	r3, [r3, #0]
1000c1a8:	2014      	movs	r0, #20
1000c1aa:	4798      	blx	r3
1000c1ac:	e7d3      	b.n	1000c156 <platform_event_wait+0x1b2>
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000c1ae:	4b10      	ldr	r3, [pc, #64]	; (1000c1f0 <platform_event_wait+0x24c>)
1000c1b0:	681b      	ldr	r3, [r3, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000c1b2:	2400      	movs	r4, #0
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000c1b4:	2b00      	cmp	r3, #0
1000c1b6:	d0ac      	beq.n	1000c112 <platform_event_wait+0x16e>
1000c1b8:	e77b      	b.n	1000c0b2 <platform_event_wait+0x10e>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
}
1000c1ba:	0028      	movs	r0, r5
1000c1bc:	b007      	add	sp, #28
1000c1be:	bc3c      	pop	{r2, r3, r4, r5}
1000c1c0:	4690      	mov	r8, r2
1000c1c2:	4699      	mov	r9, r3
1000c1c4:	46a2      	mov	sl, r4
1000c1c6:	46ab      	mov	fp, r5
1000c1c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c1ca:	46c0      	nop			; (mov r8, r8)
1000c1cc:	10010435 	.word	0x10010435
1000c1d0:	1000bf55 	.word	0x1000bf55
1000c1d4:	10014548 	.word	0x10014548
1000c1d8:	10014530 	.word	0x10014530
1000c1dc:	10014504 	.word	0x10014504
1000c1e0:	100152a8 	.word	0x100152a8
1000c1e4:	10015010 	.word	0x10015010
1000c1e8:	10010423 	.word	0x10010423
1000c1ec:	1000bb75 	.word	0x1000bb75
1000c1f0:	10014538 	.word	0x10014538
1000c1f4:	10014540 	.word	0x10014540
1000c1f8:	1001450c 	.word	0x1001450c
1000c1fc:	10014508 	.word	0x10014508
1000c200:	10014528 	.word	0x10014528
1000c204:	10014514 	.word	0x10014514

1000c208 <acquire_sleep_lock>:

plf_drv_status acquire_sleep_lock()
{
1000c208:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_RESOURCE_BUSY;
	//uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
	
	rwip_prevent_sleep_set(APP_PREVENT_SLEEP);
1000c20a:	4b03      	ldr	r3, [pc, #12]	; (1000c218 <acquire_sleep_lock+0x10>)
1000c20c:	681b      	ldr	r3, [r3, #0]
1000c20e:	2080      	movs	r0, #128	; 0x80
1000c210:	0200      	lsls	r0, r0, #8
1000c212:	4798      	blx	r3
		/*  */
		os_sem_up(gstrFwSem);
	}
#endif	//0
	return status;
}
1000c214:	2008      	movs	r0, #8
1000c216:	bd10      	pop	{r4, pc}
1000c218:	10014fc8 	.word	0x10014fc8

1000c21c <release_message_lock>:

plf_drv_status release_message_lock()
{
1000c21c:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000c21e:	4b03      	ldr	r3, [pc, #12]	; (1000c22c <release_message_lock+0x10>)
1000c220:	681b      	ldr	r3, [r3, #0]
1000c222:	2080      	movs	r0, #128	; 0x80
1000c224:	01c0      	lsls	r0, r0, #7
1000c226:	4798      	blx	r3
	return status;
}
1000c228:	2000      	movs	r0, #0
1000c22a:	bd10      	pop	{r4, pc}
1000c22c:	10014fd4 	.word	0x10014fd4

1000c230 <release_sleep_lock>:

plf_drv_status release_sleep_lock()
{
1000c230:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000c232:	4c05      	ldr	r4, [pc, #20]	; (1000c248 <release_sleep_lock+0x18>)
1000c234:	2080      	movs	r0, #128	; 0x80
1000c236:	01c0      	lsls	r0, r0, #7
1000c238:	6823      	ldr	r3, [r4, #0]
1000c23a:	4798      	blx	r3
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
1000c23c:	6823      	ldr	r3, [r4, #0]
1000c23e:	2080      	movs	r0, #128	; 0x80
1000c240:	0200      	lsls	r0, r0, #8
1000c242:	4798      	blx	r3
	return status;
}
1000c244:	2000      	movs	r0, #0
1000c246:	bd10      	pop	{r4, pc}
1000c248:	10014fd4 	.word	0x10014fd4

1000c24c <gpio1_combined_isr_handler>:

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source);
void wakeup_active_event_callback(uint32_t wakeup_source);

void gpio1_combined_isr_handler(void)
{
1000c24c:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio1 = LPGPIO_16;
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
1000c24e:	4a18      	ldr	r2, [pc, #96]	; (1000c2b0 <gpio1_combined_isr_handler+0x64>)
1000c250:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000c252:	b29b      	uxth	r3, r3
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000c254:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000c256:	2180      	movs	r1, #128	; 0x80
1000c258:	0209      	lsls	r1, r1, #8
1000c25a:	4301      	orrs	r1, r0
1000c25c:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000c25e:	0010      	movs	r0, r2
1000c260:	4d14      	ldr	r5, [pc, #80]	; (1000c2b4 <gpio1_combined_isr_handler+0x68>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000c262:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000c264:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000c266:	05db      	lsls	r3, r3, #23
1000c268:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000c26a:	d011      	beq.n	1000c290 <gpio1_combined_isr_handler+0x44>
			port_gpio1 = (intstatus & ~(intstatus - 1));
1000c26c:	b2db      	uxtb	r3, r3
1000c26e:	4259      	negs	r1, r3
1000c270:	400b      	ands	r3, r1
			while (!(port_gpio1 == 1)) {
1000c272:	2b01      	cmp	r3, #1
1000c274:	d006      	beq.n	1000c284 <gpio1_combined_isr_handler+0x38>
1000c276:	0011      	movs	r1, r2
				port_gpio1 = port_gpio1 >> 1;
1000c278:	085b      	lsrs	r3, r3, #1
				index++;
1000c27a:	3101      	adds	r1, #1
1000c27c:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio1 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio1 == 1)) {
1000c27e:	2b01      	cmp	r3, #1
1000c280:	d1fa      	bne.n	1000c278 <gpio1_combined_isr_handler+0x2c>
1000c282:	e000      	b.n	1000c286 <gpio1_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000c284:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000c286:	0023      	movs	r3, r4
1000c288:	408b      	lsls	r3, r1
1000c28a:	b29b      	uxth	r3, r3
1000c28c:	8703      	strh	r3, [r0, #56]	; 0x38
1000c28e:	e003      	b.n	1000c298 <gpio1_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000c290:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000c292:	432b      	orrs	r3, r5
1000c294:	b29b      	uxth	r3, r3
1000c296:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO1->INTSTATUSCLEAR.reg;
1000c298:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000c29a:	05db      	lsls	r3, r3, #23
1000c29c:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000c29e:	d1e2      	bne.n	1000c266 <gpio1_combined_isr_handler+0x1a>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000c2a0:	2180      	movs	r1, #128	; 0x80
1000c2a2:	0049      	lsls	r1, r1, #1
1000c2a4:	3381      	adds	r3, #129	; 0x81
1000c2a6:	33ff      	adds	r3, #255	; 0xff
1000c2a8:	4a03      	ldr	r2, [pc, #12]	; (1000c2b8 <gpio1_combined_isr_handler+0x6c>)
1000c2aa:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(8);
}
1000c2ac:	bd30      	pop	{r4, r5, pc}
1000c2ae:	46c0      	nop			; (mov r8, r8)
1000c2b0:	40011000 	.word	0x40011000
1000c2b4:	ffff8000 	.word	0xffff8000
1000c2b8:	e000e100 	.word	0xe000e100

1000c2bc <gpio0_combined_isr_handler>:

void gpio0_combined_isr_handler(void)
{
1000c2bc:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio0 = LPGPIO_0;
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
1000c2be:	4a17      	ldr	r2, [pc, #92]	; (1000c31c <gpio0_combined_isr_handler+0x60>)
1000c2c0:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000c2c2:	b29b      	uxth	r3, r3
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000c2c4:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000c2c6:	2180      	movs	r1, #128	; 0x80
1000c2c8:	0209      	lsls	r1, r1, #8
1000c2ca:	4301      	orrs	r1, r0
1000c2cc:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000c2ce:	0010      	movs	r0, r2
1000c2d0:	4d13      	ldr	r5, [pc, #76]	; (1000c320 <gpio0_combined_isr_handler+0x64>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000c2d2:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000c2d4:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000c2d6:	05db      	lsls	r3, r3, #23
1000c2d8:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000c2da:	d011      	beq.n	1000c300 <gpio0_combined_isr_handler+0x44>
			port_gpio0 = (intstatus & ~(intstatus - 1));
1000c2dc:	b2db      	uxtb	r3, r3
1000c2de:	4259      	negs	r1, r3
1000c2e0:	400b      	ands	r3, r1
			while (!(port_gpio0 == 1)) {
1000c2e2:	2b01      	cmp	r3, #1
1000c2e4:	d006      	beq.n	1000c2f4 <gpio0_combined_isr_handler+0x38>
1000c2e6:	0011      	movs	r1, r2
				port_gpio0 = port_gpio0 >> 1;
1000c2e8:	085b      	lsrs	r3, r3, #1
				index++;
1000c2ea:	3101      	adds	r1, #1
1000c2ec:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio0 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio0 == 1)) {
1000c2ee:	2b01      	cmp	r3, #1
1000c2f0:	d1fa      	bne.n	1000c2e8 <gpio0_combined_isr_handler+0x2c>
1000c2f2:	e000      	b.n	1000c2f6 <gpio0_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000c2f4:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000c2f6:	0023      	movs	r3, r4
1000c2f8:	408b      	lsls	r3, r1
1000c2fa:	b29b      	uxth	r3, r3
1000c2fc:	8703      	strh	r3, [r0, #56]	; 0x38
1000c2fe:	e003      	b.n	1000c308 <gpio0_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000c300:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000c302:	432b      	orrs	r3, r5
1000c304:	b29b      	uxth	r3, r3
1000c306:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO0->INTSTATUSCLEAR.reg;
1000c308:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000c30a:	05db      	lsls	r3, r3, #23
1000c30c:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000c30e:	d1e2      	bne.n	1000c2d6 <gpio0_combined_isr_handler+0x1a>
1000c310:	2180      	movs	r1, #128	; 0x80
1000c312:	3381      	adds	r3, #129	; 0x81
1000c314:	33ff      	adds	r3, #255	; 0xff
1000c316:	4a03      	ldr	r2, [pc, #12]	; (1000c324 <gpio0_combined_isr_handler+0x68>)
1000c318:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(7);
}
1000c31a:	bd30      	pop	{r4, r5, pc}
1000c31c:	40010000 	.word	0x40010000
1000c320:	ffff8000 	.word	0xffff8000
1000c324:	e000e100 	.word	0xe000e100

1000c328 <PORT1_COMB_Handler>:

#ifdef CHIPVERSION_B0
void PORT1_COMB_Handler(void)
{
1000c328:	b510      	push	{r4, lr}
	/* if(CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13))) { */
	if (GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13))) {
1000c32a:	4b0c      	ldr	r3, [pc, #48]	; (1000c35c <PORT1_COMB_Handler+0x34>)
1000c32c:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
1000c32e:	0b5b      	lsrs	r3, r3, #13
1000c330:	d010      	beq.n	1000c354 <PORT1_COMB_Handler+0x2c>
		handle_ext_wakeup_isr();
1000c332:	4b0b      	ldr	r3, [pc, #44]	; (1000c360 <PORT1_COMB_Handler+0x38>)
1000c334:	681b      	ldr	r3, [r3, #0]
1000c336:	4798      	blx	r3

		/* clear specific int pin status that caused the Interrupt */
		/* CMSDK_GPIO1->INTCLEAR |= CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13)); */
		GPIO1->INTSTATUSCLEAR.reg |= GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13));
1000c338:	4a08      	ldr	r2, [pc, #32]	; (1000c35c <PORT1_COMB_Handler+0x34>)
1000c33a:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000c33c:	8f11      	ldrh	r1, [r2, #56]	; 0x38
1000c33e:	0b5b      	lsrs	r3, r3, #13
1000c340:	035b      	lsls	r3, r3, #13
1000c342:	430b      	orrs	r3, r1
1000c344:	8713      	strh	r3, [r2, #56]	; 0x38
1000c346:	2180      	movs	r1, #128	; 0x80
1000c348:	0049      	lsls	r1, r1, #1
1000c34a:	23c0      	movs	r3, #192	; 0xc0
1000c34c:	005b      	lsls	r3, r3, #1
1000c34e:	4a05      	ldr	r2, [pc, #20]	; (1000c364 <PORT1_COMB_Handler+0x3c>)
1000c350:	50d1      	str	r1, [r2, r3]
1000c352:	e001      	b.n	1000c358 <PORT1_COMB_Handler+0x30>
		/* NVIC_ClearPendingIRQ(PORT1_COMB_IRQn); */
		NVIC_ClearPendingIRQ(8);
	} else {
		gpio1_combined_isr_handler();
1000c354:	4b04      	ldr	r3, [pc, #16]	; (1000c368 <PORT1_COMB_Handler+0x40>)
1000c356:	4798      	blx	r3
	}
}
1000c358:	bd10      	pop	{r4, pc}
1000c35a:	46c0      	nop			; (mov r8, r8)
1000c35c:	40011000 	.word	0x40011000
1000c360:	10015294 	.word	0x10015294
1000c364:	e000e100 	.word	0xe000e100
1000c368:	1000c24d 	.word	0x1000c24d

1000c36c <wakeup_int_unregister_callback>:
	{
		wakeup_source_callback[wakeup_source] = 0;
	}
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
1000c36c:	2303      	movs	r3, #3
#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
	if(	(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_0) || 
1000c36e:	2802      	cmp	r0, #2
1000c370:	d804      	bhi.n	1000c37c <wakeup_int_unregister_callback+0x10>
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_1) || 
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_2) ) 
	{
		wakeup_source_callback[wakeup_source] = 0;
1000c372:	0080      	lsls	r0, r0, #2
1000c374:	2200      	movs	r2, #0
1000c376:	4b02      	ldr	r3, [pc, #8]	; (1000c380 <wakeup_int_unregister_callback+0x14>)
1000c378:	50c2      	str	r2, [r0, r3]

#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
1000c37a:	2300      	movs	r3, #0
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
	}
	return status;
}
1000c37c:	0018      	movs	r0, r3
1000c37e:	4770      	bx	lr
1000c380:	100152ac 	.word	0x100152ac

1000c384 <wakeup_active_event_callback>:

void wakeup_active_event_callback(uint32_t wakeup_source)
{
1000c384:	b510      	push	{r4, lr}
1000c386:	0004      	movs	r4, r0
	portint_callback_t callback;
	uint32_t *pu32WakeSource = (uint32_t *)wakeup_source;
	if((*pu32WakeSource & 0xFF) == 1)
1000c388:	7803      	ldrb	r3, [r0, #0]
1000c38a:	2b01      	cmp	r3, #1
1000c38c:	d108      	bne.n	1000c3a0 <wakeup_active_event_callback+0x1c>
	{
		if(wakeup_source_callback[0] != NULL) {
1000c38e:	4b11      	ldr	r3, [pc, #68]	; (1000c3d4 <wakeup_active_event_callback+0x50>)
1000c390:	681b      	ldr	r3, [r3, #0]
1000c392:	2b00      	cmp	r3, #0
1000c394:	d000      	beq.n	1000c398 <wakeup_active_event_callback+0x14>
			callback = wakeup_source_callback[0];
			callback();
1000c396:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF);
1000c398:	23ff      	movs	r3, #255	; 0xff
1000c39a:	6822      	ldr	r2, [r4, #0]
1000c39c:	439a      	bics	r2, r3
1000c39e:	6022      	str	r2, [r4, #0]
	}
	if(((*pu32WakeSource >> 8) & 0xFF) == 1)
1000c3a0:	7863      	ldrb	r3, [r4, #1]
1000c3a2:	2b01      	cmp	r3, #1
1000c3a4:	d108      	bne.n	1000c3b8 <wakeup_active_event_callback+0x34>
	{
		if(wakeup_source_callback[1] != NULL) {
1000c3a6:	4b0b      	ldr	r3, [pc, #44]	; (1000c3d4 <wakeup_active_event_callback+0x50>)
1000c3a8:	685b      	ldr	r3, [r3, #4]
1000c3aa:	2b00      	cmp	r3, #0
1000c3ac:	d000      	beq.n	1000c3b0 <wakeup_active_event_callback+0x2c>
			callback = wakeup_source_callback[1];
			callback();
1000c3ae:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 8);
1000c3b0:	4b09      	ldr	r3, [pc, #36]	; (1000c3d8 <wakeup_active_event_callback+0x54>)
1000c3b2:	6822      	ldr	r2, [r4, #0]
1000c3b4:	4013      	ands	r3, r2
1000c3b6:	6023      	str	r3, [r4, #0]
	}
	if(((*pu32WakeSource >> 16) & 0xFF) == 1)
1000c3b8:	78a3      	ldrb	r3, [r4, #2]
1000c3ba:	2b01      	cmp	r3, #1
1000c3bc:	d108      	bne.n	1000c3d0 <wakeup_active_event_callback+0x4c>
	{
		if(wakeup_source_callback[2] != NULL) {
1000c3be:	4b05      	ldr	r3, [pc, #20]	; (1000c3d4 <wakeup_active_event_callback+0x50>)
1000c3c0:	689b      	ldr	r3, [r3, #8]
1000c3c2:	2b00      	cmp	r3, #0
1000c3c4:	d000      	beq.n	1000c3c8 <wakeup_active_event_callback+0x44>
			callback = wakeup_source_callback[2];
			callback();
1000c3c6:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 16);
1000c3c8:	4b04      	ldr	r3, [pc, #16]	; (1000c3dc <wakeup_active_event_callback+0x58>)
1000c3ca:	6822      	ldr	r2, [r4, #0]
1000c3cc:	4013      	ands	r3, r2
1000c3ce:	6023      	str	r3, [r4, #0]
	}
}
1000c3d0:	bd10      	pop	{r4, pc}
1000c3d2:	46c0      	nop			; (mov r8, r8)
1000c3d4:	100152ac 	.word	0x100152ac
1000c3d8:	ffff00ff 	.word	0xffff00ff
1000c3dc:	ff00ffff 	.word	0xff00ffff

1000c3e0 <timer_callback_fn>:
/*- Includes ---------------------------------------------------------------*/
#include "sms_central1.h"

/* timer callback function */
static void timer_callback_fn(void)
{
1000c3e0:	b510      	push	{r4, lr}
    DBG_LOG_DEV("[timer_callback_fn]");
1000c3e2:	4803      	ldr	r0, [pc, #12]	; (1000c3f0 <timer_callback_fn+0x10>)
1000c3e4:	4b03      	ldr	r3, [pc, #12]	; (1000c3f4 <timer_callback_fn+0x14>)
1000c3e6:	4798      	blx	r3
1000c3e8:	4803      	ldr	r0, [pc, #12]	; (1000c3f8 <timer_callback_fn+0x18>)
1000c3ea:	4b04      	ldr	r3, [pc, #16]	; (1000c3fc <timer_callback_fn+0x1c>)
1000c3ec:	4798      	blx	r3
	/* Add timer callback functionality here */
}
1000c3ee:	bd10      	pop	{r4, pc}
1000c3f0:	100116bc 	.word	0x100116bc
1000c3f4:	10010565 	.word	0x10010565
1000c3f8:	10012958 	.word	0x10012958
1000c3fc:	10010445 	.word	0x10010445

1000c400 <button_cb>:

static void button_cb(void)
{
1000c400:	b510      	push	{r4, lr}
    DBG_LOG_DEV("[button_cb]");
1000c402:	4803      	ldr	r0, [pc, #12]	; (1000c410 <button_cb+0x10>)
1000c404:	4b03      	ldr	r3, [pc, #12]	; (1000c414 <button_cb+0x14>)
1000c406:	4798      	blx	r3
1000c408:	4803      	ldr	r0, [pc, #12]	; (1000c418 <button_cb+0x18>)
1000c40a:	4b04      	ldr	r3, [pc, #16]	; (1000c41c <button_cb+0x1c>)
1000c40c:	4798      	blx	r3
	/* Add button callback functionality here */
}
1000c40e:	bd10      	pop	{r4, pc}
1000c410:	100116bc 	.word	0x100116bc
1000c414:	10010565 	.word	0x10010565
1000c418:	1001296c 	.word	0x1001296c
1000c41c:	10010445 	.word	0x10010445

1000c420 <main>:
    NULL, // AT_BLE_PEER_ATT_INFO_IND
    NULL // AT_BLE_CON_CHANNEL_MAP_IND
};

int main(void)
{
1000c420:	b570      	push	{r4, r5, r6, lr}
	platform_driver_init();
1000c422:	4b15      	ldr	r3, [pc, #84]	; (1000c478 <main+0x58>)
1000c424:	4798      	blx	r3
	acquire_sleep_lock();
1000c426:	4b15      	ldr	r3, [pc, #84]	; (1000c47c <main+0x5c>)
1000c428:	4798      	blx	r3

	/* Initialize serial console */
	serial_console_init();
1000c42a:	4b15      	ldr	r3, [pc, #84]	; (1000c480 <main+0x60>)
1000c42c:	4798      	blx	r3
	
	/* Hardware timer */
	hw_timer_init();
1000c42e:	4b15      	ldr	r3, [pc, #84]	; (1000c484 <main+0x64>)
1000c430:	4798      	blx	r3
	
	/* button initialization */
	gpio_init();
1000c432:	4b15      	ldr	r3, [pc, #84]	; (1000c488 <main+0x68>)
1000c434:	4798      	blx	r3
	button_init();
1000c436:	4b15      	ldr	r3, [pc, #84]	; (1000c48c <main+0x6c>)
1000c438:	4798      	blx	r3
	button_register_callback(button_cb);
1000c43a:	4815      	ldr	r0, [pc, #84]	; (1000c490 <main+0x70>)
1000c43c:	4b15      	ldr	r3, [pc, #84]	; (1000c494 <main+0x74>)
1000c43e:	4798      	blx	r3
	
	hw_timer_register_callback(timer_callback_fn);
1000c440:	4815      	ldr	r0, [pc, #84]	; (1000c498 <main+0x78>)
1000c442:	4b16      	ldr	r3, [pc, #88]	; (1000c49c <main+0x7c>)
1000c444:	4798      	blx	r3

	DBG_LOG("Initializing BLE Application");
1000c446:	4816      	ldr	r0, [pc, #88]	; (1000c4a0 <main+0x80>)
1000c448:	4b16      	ldr	r3, [pc, #88]	; (1000c4a4 <main+0x84>)
1000c44a:	4798      	blx	r3
1000c44c:	4816      	ldr	r0, [pc, #88]	; (1000c4a8 <main+0x88>)
1000c44e:	4b17      	ldr	r3, [pc, #92]	; (1000c4ac <main+0x8c>)
1000c450:	4798      	blx	r3
	
	/* initialize the BLE chip  and Set the Device Address */
	ble_device_init(NULL);
1000c452:	2000      	movs	r0, #0
1000c454:	4b16      	ldr	r3, [pc, #88]	; (1000c4b0 <main+0x90>)
1000c456:	4798      	blx	r3
	
    pxp_monitor_init(NULL);
1000c458:	2000      	movs	r0, #0
1000c45a:	4b16      	ldr	r3, [pc, #88]	; (1000c4b4 <main+0x94>)
1000c45c:	4798      	blx	r3
    
    register_hw_timer_start_func_cb((hw_timer_start_func_cb_t)hw_timer_start);
1000c45e:	4816      	ldr	r0, [pc, #88]	; (1000c4b8 <main+0x98>)
1000c460:	4c16      	ldr	r4, [pc, #88]	; (1000c4bc <main+0x9c>)
1000c462:	47a0      	blx	r4
    register_hw_timer_start_func_cb(hw_timer_stop);
1000c464:	4816      	ldr	r0, [pc, #88]	; (1000c4c0 <main+0xa0>)
1000c466:	47a0      	blx	r4
    
	gap_dev_scan();
1000c468:	4b16      	ldr	r3, [pc, #88]	; (1000c4c4 <main+0xa4>)
1000c46a:	4798      	blx	r3
	
	while(true)
	{
		/* BLE Event task */
		ble_event_task(BLE_EVENT_TIMEOUT);
1000c46c:	2501      	movs	r5, #1
1000c46e:	426d      	negs	r5, r5
1000c470:	4c15      	ldr	r4, [pc, #84]	; (1000c4c8 <main+0xa8>)
1000c472:	0028      	movs	r0, r5
1000c474:	47a0      	blx	r4
1000c476:	e7fc      	b.n	1000c472 <main+0x52>
1000c478:	1000bcf5 	.word	0x1000bcf5
1000c47c:	1000c209 	.word	0x1000c209
1000c480:	1000b995 	.word	0x1000b995
1000c484:	1000b7ed 	.word	0x1000b7ed
1000c488:	100092b5 	.word	0x100092b5
1000c48c:	1000b8b1 	.word	0x1000b8b1
1000c490:	1000c401 	.word	0x1000c401
1000c494:	1000b8d9 	.word	0x1000b8d9
1000c498:	1000c3e1 	.word	0x1000c3e1
1000c49c:	1000b819 	.word	0x1000b819
1000c4a0:	100116bc 	.word	0x100116bc
1000c4a4:	10010565 	.word	0x10010565
1000c4a8:	10012978 	.word	0x10012978
1000c4ac:	10010445 	.word	0x10010445
1000c4b0:	1000ad01 	.word	0x1000ad01
1000c4b4:	100084e5 	.word	0x100084e5
1000c4b8:	1000b84d 	.word	0x1000b84d
1000c4bc:	100089f1 	.word	0x100089f1
1000c4c0:	1000b879 	.word	0x1000b879
1000c4c4:	1000b009 	.word	0x1000b009
1000c4c8:	1000b791 	.word	0x1000b791

1000c4cc <internal_event_post>:
1000c4cc:	b570      	push	{r4, r5, r6, lr}
1000c4ce:	4d12      	ldr	r5, [pc, #72]	; (1000c518 <internal_event_post+0x4c>)
1000c4d0:	682c      	ldr	r4, [r5, #0]
1000c4d2:	2c00      	cmp	r4, #0
1000c4d4:	d014      	beq.n	1000c500 <internal_event_post+0x34>
1000c4d6:	6826      	ldr	r6, [r4, #0]
1000c4d8:	60e2      	str	r2, [r4, #12]
1000c4da:	602e      	str	r6, [r5, #0]
1000c4dc:	2500      	movs	r5, #0
1000c4de:	4a0f      	ldr	r2, [pc, #60]	; (1000c51c <internal_event_post+0x50>)
1000c4e0:	8123      	strh	r3, [r4, #8]
1000c4e2:	6813      	ldr	r3, [r2, #0]
1000c4e4:	6025      	str	r5, [r4, #0]
1000c4e6:	80a0      	strh	r0, [r4, #4]
1000c4e8:	80e1      	strh	r1, [r4, #6]
1000c4ea:	42ab      	cmp	r3, r5
1000c4ec:	d101      	bne.n	1000c4f2 <internal_event_post+0x26>
1000c4ee:	6014      	str	r4, [r2, #0]
1000c4f0:	e011      	b.n	1000c516 <internal_event_post+0x4a>
1000c4f2:	681a      	ldr	r2, [r3, #0]
1000c4f4:	2a00      	cmp	r2, #0
1000c4f6:	d001      	beq.n	1000c4fc <internal_event_post+0x30>
1000c4f8:	1c13      	adds	r3, r2, #0
1000c4fa:	e7fa      	b.n	1000c4f2 <internal_event_post+0x26>
1000c4fc:	601c      	str	r4, [r3, #0]
1000c4fe:	e00a      	b.n	1000c516 <internal_event_post+0x4a>
1000c500:	b2c4      	uxtb	r4, r0
1000c502:	2c00      	cmp	r4, #0
1000c504:	d107      	bne.n	1000c516 <internal_event_post+0x4a>
1000c506:	4c06      	ldr	r4, [pc, #24]	; (1000c520 <internal_event_post+0x54>)
1000c508:	60e2      	str	r2, [r4, #12]
1000c50a:	2201      	movs	r2, #1
1000c50c:	8123      	strh	r3, [r4, #8]
1000c50e:	4b05      	ldr	r3, [pc, #20]	; (1000c524 <internal_event_post+0x58>)
1000c510:	80a0      	strh	r0, [r4, #4]
1000c512:	80e1      	strh	r1, [r4, #6]
1000c514:	701a      	strb	r2, [r3, #0]
1000c516:	bd70      	pop	{r4, r5, r6, pc}
1000c518:	10014564 	.word	0x10014564
1000c51c:	10014560 	.word	0x10014560
1000c520:	1001454c 	.word	0x1001454c
1000c524:	1001455c 	.word	0x1001455c

1000c528 <internal_event_init>:
1000c528:	b510      	push	{r4, lr}
1000c52a:	4b08      	ldr	r3, [pc, #32]	; (1000c54c <internal_event_init+0x24>)
1000c52c:	0900      	lsrs	r0, r0, #4
1000c52e:	0100      	lsls	r0, r0, #4
1000c530:	681a      	ldr	r2, [r3, #0]
1000c532:	1808      	adds	r0, r1, r0
1000c534:	4281      	cmp	r1, r0
1000c536:	d003      	beq.n	1000c540 <internal_event_init+0x18>
1000c538:	600a      	str	r2, [r1, #0]
1000c53a:	1c0a      	adds	r2, r1, #0
1000c53c:	3110      	adds	r1, #16
1000c53e:	e7f9      	b.n	1000c534 <internal_event_init+0xc>
1000c540:	601a      	str	r2, [r3, #0]
1000c542:	2200      	movs	r2, #0
1000c544:	4b02      	ldr	r3, [pc, #8]	; (1000c550 <internal_event_init+0x28>)
1000c546:	601a      	str	r2, [r3, #0]
1000c548:	bd10      	pop	{r4, pc}
1000c54a:	46c0      	nop			; (mov r8, r8)
1000c54c:	10014564 	.word	0x10014564
1000c550:	10014560 	.word	0x10014560

1000c554 <special_events_handler>:
1000c554:	b538      	push	{r3, r4, r5, lr}
1000c556:	4c1b      	ldr	r4, [pc, #108]	; (1000c5c4 <special_events_handler+0x70>)
1000c558:	1c03      	adds	r3, r0, #0
1000c55a:	8825      	ldrh	r5, [r4, #0]
1000c55c:	1c08      	adds	r0, r1, #0
1000c55e:	1c21      	adds	r1, r4, #0
1000c560:	429d      	cmp	r5, r3
1000c562:	d107      	bne.n	1000c574 <special_events_handler+0x20>
1000c564:	88a5      	ldrh	r5, [r4, #4]
1000c566:	4285      	cmp	r5, r0
1000c568:	d104      	bne.n	1000c574 <special_events_handler+0x20>
1000c56a:	2301      	movs	r3, #1
1000c56c:	425b      	negs	r3, r3
1000c56e:	8023      	strh	r3, [r4, #0]
1000c570:	60a2      	str	r2, [r4, #8]
1000c572:	e009      	b.n	1000c588 <special_events_handler+0x34>
1000c574:	884c      	ldrh	r4, [r1, #2]
1000c576:	429c      	cmp	r4, r3
1000c578:	d10a      	bne.n	1000c590 <special_events_handler+0x3c>
1000c57a:	888c      	ldrh	r4, [r1, #4]
1000c57c:	4284      	cmp	r4, r0
1000c57e:	d107      	bne.n	1000c590 <special_events_handler+0x3c>
1000c580:	2301      	movs	r3, #1
1000c582:	425b      	negs	r3, r3
1000c584:	804b      	strh	r3, [r1, #2]
1000c586:	608a      	str	r2, [r1, #8]
1000c588:	4b0f      	ldr	r3, [pc, #60]	; (1000c5c8 <special_events_handler+0x74>)
1000c58a:	4798      	blx	r3
1000c58c:	2001      	movs	r0, #1
1000c58e:	e017      	b.n	1000c5c0 <special_events_handler+0x6c>
1000c590:	490e      	ldr	r1, [pc, #56]	; (1000c5cc <special_events_handler+0x78>)
1000c592:	428b      	cmp	r3, r1
1000c594:	d00e      	beq.n	1000c5b4 <special_events_handler+0x60>
1000c596:	490e      	ldr	r1, [pc, #56]	; (1000c5d0 <special_events_handler+0x7c>)
1000c598:	428b      	cmp	r3, r1
1000c59a:	d007      	beq.n	1000c5ac <special_events_handler+0x58>
1000c59c:	490d      	ldr	r1, [pc, #52]	; (1000c5d4 <special_events_handler+0x80>)
1000c59e:	2000      	movs	r0, #0
1000c5a0:	428b      	cmp	r3, r1
1000c5a2:	d10d      	bne.n	1000c5c0 <special_events_handler+0x6c>
1000c5a4:	1c10      	adds	r0, r2, #0
1000c5a6:	4b0c      	ldr	r3, [pc, #48]	; (1000c5d8 <special_events_handler+0x84>)
1000c5a8:	4798      	blx	r3
1000c5aa:	e7ef      	b.n	1000c58c <special_events_handler+0x38>
1000c5ac:	1c11      	adds	r1, r2, #0
1000c5ae:	4b0b      	ldr	r3, [pc, #44]	; (1000c5dc <special_events_handler+0x88>)
1000c5b0:	2200      	movs	r2, #0
1000c5b2:	e002      	b.n	1000c5ba <special_events_handler+0x66>
1000c5b4:	1c11      	adds	r1, r2, #0
1000c5b6:	2200      	movs	r2, #0
1000c5b8:	4b09      	ldr	r3, [pc, #36]	; (1000c5e0 <special_events_handler+0x8c>)
1000c5ba:	4798      	blx	r3
1000c5bc:	4243      	negs	r3, r0
1000c5be:	4158      	adcs	r0, r3
1000c5c0:	bd38      	pop	{r3, r4, r5, pc}
1000c5c2:	46c0      	nop			; (mov r8, r8)
1000c5c4:	100152b8 	.word	0x100152b8
1000c5c8:	1000d991 	.word	0x1000d991
1000c5cc:	00000e13 	.word	0x00000e13
1000c5d0:	00000e15 	.word	0x00000e15
1000c5d4:	00000e01 	.word	0x00000e01
1000c5d8:	1000dd01 	.word	0x1000dd01
1000c5dc:	1000dec1 	.word	0x1000dec1
1000c5e0:	1000df99 	.word	0x1000df99

1000c5e4 <at_ble_event_get>:
1000c5e4:	2300      	movs	r3, #0
1000c5e6:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c5e8:	b087      	sub	sp, #28
1000c5ea:	9204      	str	r2, [sp, #16]
1000c5ec:	7003      	strb	r3, [r0, #0]
1000c5ee:	9b04      	ldr	r3, [sp, #16]
1000c5f0:	9003      	str	r0, [sp, #12]
1000c5f2:	3b01      	subs	r3, #1
1000c5f4:	1c0d      	adds	r5, r1, #0
1000c5f6:	9305      	str	r3, [sp, #20]
1000c5f8:	3303      	adds	r3, #3
1000c5fa:	d802      	bhi.n	1000c602 <at_ble_event_get+0x1e>
1000c5fc:	9804      	ldr	r0, [sp, #16]
1000c5fe:	4bae      	ldr	r3, [pc, #696]	; (1000c8b8 <at_ble_event_get+0x2d4>)
1000c600:	4798      	blx	r3
1000c602:	9b05      	ldr	r3, [sp, #20]
1000c604:	4cad      	ldr	r4, [pc, #692]	; (1000c8bc <at_ble_event_get+0x2d8>)
1000c606:	3303      	adds	r3, #3
1000c608:	d902      	bls.n	1000c610 <at_ble_event_get+0x2c>
1000c60a:	2300      	movs	r3, #0
1000c60c:	9302      	str	r3, [sp, #8]
1000c60e:	e015      	b.n	1000c63c <at_ble_event_get+0x58>
1000c610:	2300      	movs	r3, #0
1000c612:	9302      	str	r3, [sp, #8]
1000c614:	6823      	ldr	r3, [r4, #0]
1000c616:	2b00      	cmp	r3, #0
1000c618:	d113      	bne.n	1000c642 <at_ble_event_get+0x5e>
1000c61a:	9b02      	ldr	r3, [sp, #8]
1000c61c:	2bd0      	cmp	r3, #208	; 0xd0
1000c61e:	d100      	bne.n	1000c622 <at_ble_event_get+0x3e>
1000c620:	e2da      	b.n	1000cbd8 <at_ble_event_get+0x5f4>
1000c622:	9804      	ldr	r0, [sp, #16]
1000c624:	4ba6      	ldr	r3, [pc, #664]	; (1000c8c0 <at_ble_event_get+0x2dc>)
1000c626:	4798      	blx	r3
1000c628:	9002      	str	r0, [sp, #8]
1000c62a:	2802      	cmp	r0, #2
1000c62c:	d1f2      	bne.n	1000c614 <at_ble_event_get+0x30>
1000c62e:	e03f      	b.n	1000c6b0 <at_ble_event_get+0xcc>
1000c630:	9804      	ldr	r0, [sp, #16]
1000c632:	4ba3      	ldr	r3, [pc, #652]	; (1000c8c0 <at_ble_event_get+0x2dc>)
1000c634:	4798      	blx	r3
1000c636:	9002      	str	r0, [sp, #8]
1000c638:	2802      	cmp	r0, #2
1000c63a:	d039      	beq.n	1000c6b0 <at_ble_event_get+0xcc>
1000c63c:	6823      	ldr	r3, [r4, #0]
1000c63e:	2b00      	cmp	r3, #0
1000c640:	d0f6      	beq.n	1000c630 <at_ble_event_get+0x4c>
1000c642:	9b02      	ldr	r3, [sp, #8]
1000c644:	2bd0      	cmp	r3, #208	; 0xd0
1000c646:	d100      	bne.n	1000c64a <at_ble_event_get+0x66>
1000c648:	e2c6      	b.n	1000cbd8 <at_ble_event_get+0x5f4>
1000c64a:	9b02      	ldr	r3, [sp, #8]
1000c64c:	3b03      	subs	r3, #3
1000c64e:	1e5a      	subs	r2, r3, #1
1000c650:	4193      	sbcs	r3, r2
1000c652:	9a02      	ldr	r2, [sp, #8]
1000c654:	425b      	negs	r3, r3
1000c656:	401a      	ands	r2, r3
1000c658:	6823      	ldr	r3, [r4, #0]
1000c65a:	9202      	str	r2, [sp, #8]
1000c65c:	2b00      	cmp	r3, #0
1000c65e:	d100      	bne.n	1000c662 <at_ble_event_get+0x7e>
1000c660:	e2c2      	b.n	1000cbe8 <at_ble_event_get+0x604>
1000c662:	681a      	ldr	r2, [r3, #0]
1000c664:	68de      	ldr	r6, [r3, #12]
1000c666:	6022      	str	r2, [r4, #0]
1000c668:	88da      	ldrh	r2, [r3, #6]
1000c66a:	9201      	str	r2, [sp, #4]
1000c66c:	4a95      	ldr	r2, [pc, #596]	; (1000c8c4 <at_ble_event_get+0x2e0>)
1000c66e:	889c      	ldrh	r4, [r3, #4]
1000c670:	6811      	ldr	r1, [r2, #0]
1000c672:	6013      	str	r3, [r2, #0]
1000c674:	6019      	str	r1, [r3, #0]
1000c676:	4b94      	ldr	r3, [pc, #592]	; (1000c8c8 <at_ble_event_get+0x2e4>)
1000c678:	781b      	ldrb	r3, [r3, #0]
1000c67a:	2b01      	cmp	r3, #1
1000c67c:	d10f      	bne.n	1000c69e <at_ble_event_get+0xba>
1000c67e:	4b93      	ldr	r3, [pc, #588]	; (1000c8cc <at_ble_event_get+0x2e8>)
1000c680:	4a92      	ldr	r2, [pc, #584]	; (1000c8cc <at_ble_event_get+0x2e8>)
1000c682:	8898      	ldrh	r0, [r3, #4]
1000c684:	88d9      	ldrh	r1, [r3, #6]
1000c686:	68d2      	ldr	r2, [r2, #12]
1000c688:	891b      	ldrh	r3, [r3, #8]
1000c68a:	4f91      	ldr	r7, [pc, #580]	; (1000c8d0 <at_ble_event_get+0x2ec>)
1000c68c:	47b8      	blx	r7
1000c68e:	2210      	movs	r2, #16
1000c690:	4b90      	ldr	r3, [pc, #576]	; (1000c8d4 <at_ble_event_get+0x2f0>)
1000c692:	488e      	ldr	r0, [pc, #568]	; (1000c8cc <at_ble_event_get+0x2e8>)
1000c694:	2100      	movs	r1, #0
1000c696:	4798      	blx	r3
1000c698:	2300      	movs	r3, #0
1000c69a:	4a8b      	ldr	r2, [pc, #556]	; (1000c8c8 <at_ble_event_get+0x2e4>)
1000c69c:	7013      	strb	r3, [r2, #0]
1000c69e:	9b02      	ldr	r3, [sp, #8]
1000c6a0:	2b00      	cmp	r3, #0
1000c6a2:	d114      	bne.n	1000c6ce <at_ble_event_get+0xea>
1000c6a4:	4b8c      	ldr	r3, [pc, #560]	; (1000c8d8 <at_ble_event_get+0x2f4>)
1000c6a6:	429c      	cmp	r4, r3
1000c6a8:	d009      	beq.n	1000c6be <at_ble_event_get+0xda>
1000c6aa:	4b8c      	ldr	r3, [pc, #560]	; (1000c8dc <at_ble_event_get+0x2f8>)
1000c6ac:	429c      	cmp	r4, r3
1000c6ae:	d127      	bne.n	1000c700 <at_ble_event_get+0x11c>
1000c6b0:	233a      	movs	r3, #58	; 0x3a
1000c6b2:	9a03      	ldr	r2, [sp, #12]
1000c6b4:	7013      	strb	r3, [r2, #0]
1000c6b6:	2300      	movs	r3, #0
1000c6b8:	9302      	str	r3, [sp, #8]
1000c6ba:	1c1d      	adds	r5, r3, #0
1000c6bc:	e007      	b.n	1000c6ce <at_ble_event_get+0xea>
1000c6be:	9b01      	ldr	r3, [sp, #4]
1000c6c0:	42a3      	cmp	r3, r4
1000c6c2:	d000      	beq.n	1000c6c6 <at_ble_event_get+0xe2>
1000c6c4:	e28a      	b.n	1000cbdc <at_ble_event_get+0x5f8>
1000c6c6:	2338      	movs	r3, #56	; 0x38
1000c6c8:	9a03      	ldr	r2, [sp, #12]
1000c6ca:	7013      	strb	r3, [r2, #0]
1000c6cc:	602e      	str	r6, [r5, #0]
1000c6ce:	9b03      	ldr	r3, [sp, #12]
1000c6d0:	781b      	ldrb	r3, [r3, #0]
1000c6d2:	2b3b      	cmp	r3, #59	; 0x3b
1000c6d4:	d101      	bne.n	1000c6da <at_ble_event_get+0xf6>
1000c6d6:	4b82      	ldr	r3, [pc, #520]	; (1000c8e0 <at_ble_event_get+0x2fc>)
1000c6d8:	4798      	blx	r3
1000c6da:	9b03      	ldr	r3, [sp, #12]
1000c6dc:	781b      	ldrb	r3, [r3, #0]
1000c6de:	2b3b      	cmp	r3, #59	; 0x3b
1000c6e0:	d003      	beq.n	1000c6ea <at_ble_event_get+0x106>
1000c6e2:	9b05      	ldr	r3, [sp, #20]
1000c6e4:	3303      	adds	r3, #3
1000c6e6:	d904      	bls.n	1000c6f2 <at_ble_event_get+0x10e>
1000c6e8:	e283      	b.n	1000cbf2 <at_ble_event_get+0x60e>
1000c6ea:	9b02      	ldr	r3, [sp, #8]
1000c6ec:	2b00      	cmp	r3, #0
1000c6ee:	d088      	beq.n	1000c602 <at_ble_event_get+0x1e>
1000c6f0:	e7f7      	b.n	1000c6e2 <at_ble_event_get+0xfe>
1000c6f2:	9b02      	ldr	r3, [sp, #8]
1000c6f4:	2bd0      	cmp	r3, #208	; 0xd0
1000c6f6:	d100      	bne.n	1000c6fa <at_ble_event_get+0x116>
1000c6f8:	e27b      	b.n	1000cbf2 <at_ble_event_get+0x60e>
1000c6fa:	4b7a      	ldr	r3, [pc, #488]	; (1000c8e4 <at_ble_event_get+0x300>)
1000c6fc:	4798      	blx	r3
1000c6fe:	e278      	b.n	1000cbf2 <at_ble_event_get+0x60e>
1000c700:	9b01      	ldr	r3, [sp, #4]
1000c702:	2bbb      	cmp	r3, #187	; 0xbb
1000c704:	d125      	bne.n	1000c752 <at_ble_event_get+0x16e>
1000c706:	2cbb      	cmp	r4, #187	; 0xbb
1000c708:	d123      	bne.n	1000c752 <at_ble_event_get+0x16e>
1000c70a:	466b      	mov	r3, sp
1000c70c:	891b      	ldrh	r3, [r3, #8]
1000c70e:	80ab      	strh	r3, [r5, #4]
1000c710:	78b3      	ldrb	r3, [r6, #2]
1000c712:	7872      	ldrb	r2, [r6, #1]
1000c714:	78f0      	ldrb	r0, [r6, #3]
1000c716:	021b      	lsls	r3, r3, #8
1000c718:	4313      	orrs	r3, r2
1000c71a:	7971      	ldrb	r1, [r6, #5]
1000c71c:	7932      	ldrb	r2, [r6, #4]
1000c71e:	70a8      	strb	r0, [r5, #2]
1000c720:	4871      	ldr	r0, [pc, #452]	; (1000c8e8 <at_ble_event_get+0x304>)
1000c722:	802b      	strh	r3, [r5, #0]
1000c724:	4283      	cmp	r3, r0
1000c726:	d806      	bhi.n	1000c736 <at_ble_event_get+0x152>
1000c728:	4a70      	ldr	r2, [pc, #448]	; (1000c8ec <at_ble_event_get+0x308>)
1000c72a:	4293      	cmp	r3, r2
1000c72c:	d20b      	bcs.n	1000c746 <at_ble_event_get+0x162>
1000c72e:	4a70      	ldr	r2, [pc, #448]	; (1000c8f0 <at_ble_event_get+0x30c>)
1000c730:	4293      	cmp	r3, r2
1000c732:	d008      	beq.n	1000c746 <at_ble_event_get+0x162>
1000c734:	e009      	b.n	1000c74a <at_ble_event_get+0x166>
1000c736:	486f      	ldr	r0, [pc, #444]	; (1000c8f4 <at_ble_event_get+0x310>)
1000c738:	4283      	cmp	r3, r0
1000c73a:	d106      	bne.n	1000c74a <at_ble_event_get+0x166>
1000c73c:	020b      	lsls	r3, r1, #8
1000c73e:	4313      	orrs	r3, r2
1000c740:	80ab      	strh	r3, [r5, #4]
1000c742:	2337      	movs	r3, #55	; 0x37
1000c744:	e002      	b.n	1000c74c <at_ble_event_get+0x168>
1000c746:	2336      	movs	r3, #54	; 0x36
1000c748:	e000      	b.n	1000c74c <at_ble_event_get+0x168>
1000c74a:	2300      	movs	r3, #0
1000c74c:	9a03      	ldr	r2, [sp, #12]
1000c74e:	7013      	strb	r3, [r2, #0]
1000c750:	e7bd      	b.n	1000c6ce <at_ble_event_get+0xea>
1000c752:	4b69      	ldr	r3, [pc, #420]	; (1000c8f8 <at_ble_event_get+0x314>)
1000c754:	429c      	cmp	r4, r3
1000c756:	d100      	bne.n	1000c75a <at_ble_event_get+0x176>
1000c758:	e144      	b.n	1000c9e4 <at_ble_event_get+0x400>
1000c75a:	d865      	bhi.n	1000c828 <at_ble_event_get+0x244>
1000c75c:	4b67      	ldr	r3, [pc, #412]	; (1000c8fc <at_ble_event_get+0x318>)
1000c75e:	429c      	cmp	r4, r3
1000c760:	d100      	bne.n	1000c764 <at_ble_event_get+0x180>
1000c762:	e1d5      	b.n	1000cb10 <at_ble_event_get+0x52c>
1000c764:	d82f      	bhi.n	1000c7c6 <at_ble_event_get+0x1e2>
1000c766:	4b66      	ldr	r3, [pc, #408]	; (1000c900 <at_ble_event_get+0x31c>)
1000c768:	429c      	cmp	r4, r3
1000c76a:	d100      	bne.n	1000c76e <at_ble_event_get+0x18a>
1000c76c:	e1e0      	b.n	1000cb30 <at_ble_event_get+0x54c>
1000c76e:	d813      	bhi.n	1000c798 <at_ble_event_get+0x1b4>
1000c770:	4b64      	ldr	r3, [pc, #400]	; (1000c904 <at_ble_event_get+0x320>)
1000c772:	429c      	cmp	r4, r3
1000c774:	d100      	bne.n	1000c778 <at_ble_event_get+0x194>
1000c776:	e1a3      	b.n	1000cac0 <at_ble_event_get+0x4dc>
1000c778:	d804      	bhi.n	1000c784 <at_ble_event_get+0x1a0>
1000c77a:	2638      	movs	r6, #56	; 0x38
1000c77c:	42b4      	cmp	r4, r6
1000c77e:	d100      	bne.n	1000c782 <at_ble_event_get+0x19e>
1000c780:	e225      	b.n	1000cbce <at_ble_event_get+0x5ea>
1000c782:	e117      	b.n	1000c9b4 <at_ble_event_get+0x3d0>
1000c784:	4b60      	ldr	r3, [pc, #384]	; (1000c908 <at_ble_event_get+0x324>)
1000c786:	429c      	cmp	r4, r3
1000c788:	d100      	bne.n	1000c78c <at_ble_event_get+0x1a8>
1000c78a:	e19f      	b.n	1000cacc <at_ble_event_get+0x4e8>
1000c78c:	33fe      	adds	r3, #254	; 0xfe
1000c78e:	33ff      	adds	r3, #255	; 0xff
1000c790:	429c      	cmp	r4, r3
1000c792:	d100      	bne.n	1000c796 <at_ble_event_get+0x1b2>
1000c794:	e1d3      	b.n	1000cb3e <at_ble_event_get+0x55a>
1000c796:	e10d      	b.n	1000c9b4 <at_ble_event_get+0x3d0>
1000c798:	4b5c      	ldr	r3, [pc, #368]	; (1000c90c <at_ble_event_get+0x328>)
1000c79a:	429c      	cmp	r4, r3
1000c79c:	d100      	bne.n	1000c7a0 <at_ble_event_get+0x1bc>
1000c79e:	e1a9      	b.n	1000caf4 <at_ble_event_get+0x510>
1000c7a0:	d808      	bhi.n	1000c7b4 <at_ble_event_get+0x1d0>
1000c7a2:	4b5b      	ldr	r3, [pc, #364]	; (1000c910 <at_ble_event_get+0x32c>)
1000c7a4:	429c      	cmp	r4, r3
1000c7a6:	d100      	bne.n	1000c7aa <at_ble_event_get+0x1c6>
1000c7a8:	e196      	b.n	1000cad8 <at_ble_event_get+0x4f4>
1000c7aa:	4b5a      	ldr	r3, [pc, #360]	; (1000c914 <at_ble_event_get+0x330>)
1000c7ac:	429c      	cmp	r4, r3
1000c7ae:	d100      	bne.n	1000c7b2 <at_ble_event_get+0x1ce>
1000c7b0:	e199      	b.n	1000cae6 <at_ble_event_get+0x502>
1000c7b2:	e0ff      	b.n	1000c9b4 <at_ble_event_get+0x3d0>
1000c7b4:	4b58      	ldr	r3, [pc, #352]	; (1000c918 <at_ble_event_get+0x334>)
1000c7b6:	429c      	cmp	r4, r3
1000c7b8:	d100      	bne.n	1000c7bc <at_ble_event_get+0x1d8>
1000c7ba:	e1a2      	b.n	1000cb02 <at_ble_event_get+0x51e>
1000c7bc:	4b57      	ldr	r3, [pc, #348]	; (1000c91c <at_ble_event_get+0x338>)
1000c7be:	429c      	cmp	r4, r3
1000c7c0:	d100      	bne.n	1000c7c4 <at_ble_event_get+0x1e0>
1000c7c2:	e1d4      	b.n	1000cb6e <at_ble_event_get+0x58a>
1000c7c4:	e0f6      	b.n	1000c9b4 <at_ble_event_get+0x3d0>
1000c7c6:	4b56      	ldr	r3, [pc, #344]	; (1000c920 <at_ble_event_get+0x33c>)
1000c7c8:	429c      	cmp	r4, r3
1000c7ca:	d100      	bne.n	1000c7ce <at_ble_event_get+0x1ea>
1000c7cc:	e1c8      	b.n	1000cb60 <at_ble_event_get+0x57c>
1000c7ce:	d812      	bhi.n	1000c7f6 <at_ble_event_get+0x212>
1000c7d0:	4b54      	ldr	r3, [pc, #336]	; (1000c924 <at_ble_event_get+0x340>)
1000c7d2:	429c      	cmp	r4, r3
1000c7d4:	d100      	bne.n	1000c7d8 <at_ble_event_get+0x1f4>
1000c7d6:	e1d1      	b.n	1000cb7c <at_ble_event_get+0x598>
1000c7d8:	d804      	bhi.n	1000c7e4 <at_ble_event_get+0x200>
1000c7da:	4b53      	ldr	r3, [pc, #332]	; (1000c928 <at_ble_event_get+0x344>)
1000c7dc:	429c      	cmp	r4, r3
1000c7de:	d100      	bne.n	1000c7e2 <at_ble_event_get+0x1fe>
1000c7e0:	e19b      	b.n	1000cb1a <at_ble_event_get+0x536>
1000c7e2:	e0e7      	b.n	1000c9b4 <at_ble_event_get+0x3d0>
1000c7e4:	4b51      	ldr	r3, [pc, #324]	; (1000c92c <at_ble_event_get+0x348>)
1000c7e6:	429c      	cmp	r4, r3
1000c7e8:	d100      	bne.n	1000c7ec <at_ble_event_get+0x208>
1000c7ea:	e1ad      	b.n	1000cb48 <at_ble_event_get+0x564>
1000c7ec:	4b50      	ldr	r3, [pc, #320]	; (1000c930 <at_ble_event_get+0x34c>)
1000c7ee:	429c      	cmp	r4, r3
1000c7f0:	d100      	bne.n	1000c7f4 <at_ble_event_get+0x210>
1000c7f2:	e1b0      	b.n	1000cb56 <at_ble_event_get+0x572>
1000c7f4:	e0de      	b.n	1000c9b4 <at_ble_event_get+0x3d0>
1000c7f6:	4b4f      	ldr	r3, [pc, #316]	; (1000c934 <at_ble_event_get+0x350>)
1000c7f8:	429c      	cmp	r4, r3
1000c7fa:	d100      	bne.n	1000c7fe <at_ble_event_get+0x21a>
1000c7fc:	e0e0      	b.n	1000c9c0 <at_ble_event_get+0x3dc>
1000c7fe:	d809      	bhi.n	1000c814 <at_ble_event_get+0x230>
1000c800:	3b08      	subs	r3, #8
1000c802:	429c      	cmp	r4, r3
1000c804:	d100      	bne.n	1000c808 <at_ble_event_get+0x224>
1000c806:	e0d7      	b.n	1000c9b8 <at_ble_event_get+0x3d4>
1000c808:	4b4b      	ldr	r3, [pc, #300]	; (1000c938 <at_ble_event_get+0x354>)
1000c80a:	2639      	movs	r6, #57	; 0x39
1000c80c:	429c      	cmp	r4, r3
1000c80e:	d100      	bne.n	1000c812 <at_ble_event_get+0x22e>
1000c810:	e1dd      	b.n	1000cbce <at_ble_event_get+0x5ea>
1000c812:	e0cf      	b.n	1000c9b4 <at_ble_event_get+0x3d0>
1000c814:	23d1      	movs	r3, #209	; 0xd1
1000c816:	011b      	lsls	r3, r3, #4
1000c818:	429c      	cmp	r4, r3
1000c81a:	d100      	bne.n	1000c81e <at_ble_event_get+0x23a>
1000c81c:	e0d6      	b.n	1000c9cc <at_ble_event_get+0x3e8>
1000c81e:	4b47      	ldr	r3, [pc, #284]	; (1000c93c <at_ble_event_get+0x358>)
1000c820:	429c      	cmp	r4, r3
1000c822:	d100      	bne.n	1000c826 <at_ble_event_get+0x242>
1000c824:	e0d8      	b.n	1000c9d8 <at_ble_event_get+0x3f4>
1000c826:	e0c5      	b.n	1000c9b4 <at_ble_event_get+0x3d0>
1000c828:	4b45      	ldr	r3, [pc, #276]	; (1000c940 <at_ble_event_get+0x35c>)
1000c82a:	429c      	cmp	r4, r3
1000c82c:	d100      	bne.n	1000c830 <at_ble_event_get+0x24c>
1000c82e:	e117      	b.n	1000ca60 <at_ble_event_get+0x47c>
1000c830:	d82e      	bhi.n	1000c890 <at_ble_event_get+0x2ac>
1000c832:	4b44      	ldr	r3, [pc, #272]	; (1000c944 <at_ble_event_get+0x360>)
1000c834:	429c      	cmp	r4, r3
1000c836:	d100      	bne.n	1000c83a <at_ble_event_get+0x256>
1000c838:	e13d      	b.n	1000cab6 <at_ble_event_get+0x4d2>
1000c83a:	d812      	bhi.n	1000c862 <at_ble_event_get+0x27e>
1000c83c:	4b42      	ldr	r3, [pc, #264]	; (1000c948 <at_ble_event_get+0x364>)
1000c83e:	429c      	cmp	r4, r3
1000c840:	d100      	bne.n	1000c844 <at_ble_event_get+0x260>
1000c842:	e0e8      	b.n	1000ca16 <at_ble_event_get+0x432>
1000c844:	d804      	bhi.n	1000c850 <at_ble_event_get+0x26c>
1000c846:	3b03      	subs	r3, #3
1000c848:	429c      	cmp	r4, r3
1000c84a:	d100      	bne.n	1000c84e <at_ble_event_get+0x26a>
1000c84c:	e0d0      	b.n	1000c9f0 <at_ble_event_get+0x40c>
1000c84e:	e0b1      	b.n	1000c9b4 <at_ble_event_get+0x3d0>
1000c850:	4b3e      	ldr	r3, [pc, #248]	; (1000c94c <at_ble_event_get+0x368>)
1000c852:	429c      	cmp	r4, r3
1000c854:	d100      	bne.n	1000c858 <at_ble_event_get+0x274>
1000c856:	e0d0      	b.n	1000c9fa <at_ble_event_get+0x416>
1000c858:	4b3d      	ldr	r3, [pc, #244]	; (1000c950 <at_ble_event_get+0x36c>)
1000c85a:	429c      	cmp	r4, r3
1000c85c:	d100      	bne.n	1000c860 <at_ble_event_get+0x27c>
1000c85e:	e0f9      	b.n	1000ca54 <at_ble_event_get+0x470>
1000c860:	e0a8      	b.n	1000c9b4 <at_ble_event_get+0x3d0>
1000c862:	4b3c      	ldr	r3, [pc, #240]	; (1000c954 <at_ble_event_get+0x370>)
1000c864:	429c      	cmp	r4, r3
1000c866:	d100      	bne.n	1000c86a <at_ble_event_get+0x286>
1000c868:	e0db      	b.n	1000ca22 <at_ble_event_get+0x43e>
1000c86a:	d808      	bhi.n	1000c87e <at_ble_event_get+0x29a>
1000c86c:	4b3a      	ldr	r3, [pc, #232]	; (1000c958 <at_ble_event_get+0x374>)
1000c86e:	429c      	cmp	r4, r3
1000c870:	d100      	bne.n	1000c874 <at_ble_event_get+0x290>
1000c872:	e11b      	b.n	1000caac <at_ble_event_get+0x4c8>
1000c874:	4b39      	ldr	r3, [pc, #228]	; (1000c95c <at_ble_event_get+0x378>)
1000c876:	429c      	cmp	r4, r3
1000c878:	d100      	bne.n	1000c87c <at_ble_event_get+0x298>
1000c87a:	e0d8      	b.n	1000ca2e <at_ble_event_get+0x44a>
1000c87c:	e09a      	b.n	1000c9b4 <at_ble_event_get+0x3d0>
1000c87e:	4b38      	ldr	r3, [pc, #224]	; (1000c960 <at_ble_event_get+0x37c>)
1000c880:	429c      	cmp	r4, r3
1000c882:	d100      	bne.n	1000c886 <at_ble_event_get+0x2a2>
1000c884:	e0d8      	b.n	1000ca38 <at_ble_event_get+0x454>
1000c886:	4b37      	ldr	r3, [pc, #220]	; (1000c964 <at_ble_event_get+0x380>)
1000c888:	429c      	cmp	r4, r3
1000c88a:	d100      	bne.n	1000c88e <at_ble_event_get+0x2aa>
1000c88c:	e0db      	b.n	1000ca46 <at_ble_event_get+0x462>
1000c88e:	e091      	b.n	1000c9b4 <at_ble_event_get+0x3d0>
1000c890:	4b35      	ldr	r3, [pc, #212]	; (1000c968 <at_ble_event_get+0x384>)
1000c892:	429c      	cmp	r4, r3
1000c894:	d100      	bne.n	1000c898 <at_ble_event_get+0x2b4>
1000c896:	e0f7      	b.n	1000ca88 <at_ble_event_get+0x4a4>
1000c898:	d876      	bhi.n	1000c988 <at_ble_event_get+0x3a4>
1000c89a:	4b34      	ldr	r3, [pc, #208]	; (1000c96c <at_ble_event_get+0x388>)
1000c89c:	429c      	cmp	r4, r3
1000c89e:	d100      	bne.n	1000c8a2 <at_ble_event_get+0x2be>
1000c8a0:	e0f8      	b.n	1000ca94 <at_ble_event_get+0x4b0>
1000c8a2:	d869      	bhi.n	1000c978 <at_ble_event_get+0x394>
1000c8a4:	4b32      	ldr	r3, [pc, #200]	; (1000c970 <at_ble_event_get+0x38c>)
1000c8a6:	429c      	cmp	r4, r3
1000c8a8:	d100      	bne.n	1000c8ac <at_ble_event_get+0x2c8>
1000c8aa:	e0e0      	b.n	1000ca6e <at_ble_event_get+0x48a>
1000c8ac:	4b31      	ldr	r3, [pc, #196]	; (1000c974 <at_ble_event_get+0x390>)
1000c8ae:	429c      	cmp	r4, r3
1000c8b0:	d100      	bne.n	1000c8b4 <at_ble_event_get+0x2d0>
1000c8b2:	e0a9      	b.n	1000ca08 <at_ble_event_get+0x424>
1000c8b4:	e07e      	b.n	1000c9b4 <at_ble_event_get+0x3d0>
1000c8b6:	46c0      	nop			; (mov r8, r8)
1000c8b8:	1000d9c9 	.word	0x1000d9c9
1000c8bc:	10014560 	.word	0x10014560
1000c8c0:	1000bfa5 	.word	0x1000bfa5
1000c8c4:	10014564 	.word	0x10014564
1000c8c8:	1001455c 	.word	0x1001455c
1000c8cc:	1001454c 	.word	0x1001454c
1000c8d0:	1000c4cd 	.word	0x1000c4cd
1000c8d4:	10010435 	.word	0x10010435
1000c8d8:	0000ffff 	.word	0x0000ffff
1000c8dc:	0000fffe 	.word	0x0000fffe
1000c8e0:	1000c21d 	.word	0x1000c21d
1000c8e4:	1000d9cb 	.word	0x1000d9cb
1000c8e8:	0000201e 	.word	0x0000201e
1000c8ec:	0000201d 	.word	0x0000201d
1000c8f0:	00000c03 	.word	0x00000c03
1000c8f4:	0000201f 	.word	0x0000201f
1000c8f8:	00000d1c 	.word	0x00000d1c
1000c8fc:	00000c0c 	.word	0x00000c0c
1000c900:	00000c02 	.word	0x00000c02
1000c904:	00000a02 	.word	0x00000a02
1000c908:	00000a03 	.word	0x00000a03
1000c90c:	00000c06 	.word	0x00000c06
1000c910:	00000c04 	.word	0x00000c04
1000c914:	00000c05 	.word	0x00000c05
1000c918:	00000c07 	.word	0x00000c07
1000c91c:	00000c09 	.word	0x00000c09
1000c920:	00000c17 	.word	0x00000c17
1000c924:	00000c12 	.word	0x00000c12
1000c928:	00000c0d 	.word	0x00000c0d
1000c92c:	00000c13 	.word	0x00000c13
1000c930:	00000c15 	.word	0x00000c15
1000c934:	00000d08 	.word	0x00000d08
1000c938:	00000d01 	.word	0x00000d01
1000c93c:	00000d15 	.word	0x00000d15
1000c940:	00000e1b 	.word	0x00000e1b
1000c944:	00000e0f 	.word	0x00000e0f
1000c948:	00000e03 	.word	0x00000e03
1000c94c:	00000e06 	.word	0x00000e06
1000c950:	00000e0a 	.word	0x00000e0a
1000c954:	00000e15 	.word	0x00000e15
1000c958:	00000e11 	.word	0x00000e11
1000c95c:	00000e13 	.word	0x00000e13
1000c960:	00000e17 	.word	0x00000e17
1000c964:	00000e19 	.word	0x00000e19
1000c968:	00000e27 	.word	0x00000e27
1000c96c:	00000e21 	.word	0x00000e21
1000c970:	00000e1c 	.word	0x00000e1c
1000c974:	00000e1d 	.word	0x00000e1d
1000c978:	4b9f      	ldr	r3, [pc, #636]	; (1000cbf8 <at_ble_event_get+0x614>)
1000c97a:	429c      	cmp	r4, r3
1000c97c:	d07e      	beq.n	1000ca7c <at_ble_event_get+0x498>
1000c97e:	4b9f      	ldr	r3, [pc, #636]	; (1000cbfc <at_ble_event_get+0x618>)
1000c980:	429c      	cmp	r4, r3
1000c982:	d100      	bne.n	1000c986 <at_ble_event_get+0x3a2>
1000c984:	e08c      	b.n	1000caa0 <at_ble_event_get+0x4bc>
1000c986:	e015      	b.n	1000c9b4 <at_ble_event_get+0x3d0>
1000c988:	4b9d      	ldr	r3, [pc, #628]	; (1000cc00 <at_ble_event_get+0x61c>)
1000c98a:	429c      	cmp	r4, r3
1000c98c:	d100      	bne.n	1000c990 <at_ble_event_get+0x3ac>
1000c98e:	e10a      	b.n	1000cba6 <at_ble_event_get+0x5c2>
1000c990:	d808      	bhi.n	1000c9a4 <at_ble_event_get+0x3c0>
1000c992:	4b9c      	ldr	r3, [pc, #624]	; (1000cc04 <at_ble_event_get+0x620>)
1000c994:	429c      	cmp	r4, r3
1000c996:	d100      	bne.n	1000c99a <at_ble_event_get+0x3b6>
1000c998:	e0f7      	b.n	1000cb8a <at_ble_event_get+0x5a6>
1000c99a:	4b9b      	ldr	r3, [pc, #620]	; (1000cc08 <at_ble_event_get+0x624>)
1000c99c:	429c      	cmp	r4, r3
1000c99e:	d100      	bne.n	1000c9a2 <at_ble_event_get+0x3be>
1000c9a0:	e0fa      	b.n	1000cb98 <at_ble_event_get+0x5b4>
1000c9a2:	e007      	b.n	1000c9b4 <at_ble_event_get+0x3d0>
1000c9a4:	4b99      	ldr	r3, [pc, #612]	; (1000cc0c <at_ble_event_get+0x628>)
1000c9a6:	429c      	cmp	r4, r3
1000c9a8:	d100      	bne.n	1000c9ac <at_ble_event_get+0x3c8>
1000c9aa:	e103      	b.n	1000cbb4 <at_ble_event_get+0x5d0>
1000c9ac:	4b98      	ldr	r3, [pc, #608]	; (1000cc10 <at_ble_event_get+0x62c>)
1000c9ae:	429c      	cmp	r4, r3
1000c9b0:	d100      	bne.n	1000c9b4 <at_ble_event_get+0x3d0>
1000c9b2:	e106      	b.n	1000cbc2 <at_ble_event_get+0x5de>
1000c9b4:	2600      	movs	r6, #0
1000c9b6:	e10a      	b.n	1000cbce <at_ble_event_get+0x5ea>
1000c9b8:	1c30      	adds	r0, r6, #0
1000c9ba:	1c29      	adds	r1, r5, #0
1000c9bc:	4b95      	ldr	r3, [pc, #596]	; (1000cc14 <at_ble_event_get+0x630>)
1000c9be:	e014      	b.n	1000c9ea <at_ble_event_get+0x406>
1000c9c0:	1c30      	adds	r0, r6, #0
1000c9c2:	1c29      	adds	r1, r5, #0
1000c9c4:	4b94      	ldr	r3, [pc, #592]	; (1000cc18 <at_ble_event_get+0x634>)
1000c9c6:	4798      	blx	r3
1000c9c8:	2604      	movs	r6, #4
1000c9ca:	e100      	b.n	1000cbce <at_ble_event_get+0x5ea>
1000c9cc:	1c30      	adds	r0, r6, #0
1000c9ce:	1c29      	adds	r1, r5, #0
1000c9d0:	4b92      	ldr	r3, [pc, #584]	; (1000cc1c <at_ble_event_get+0x638>)
1000c9d2:	4798      	blx	r3
1000c9d4:	2601      	movs	r6, #1
1000c9d6:	e0fa      	b.n	1000cbce <at_ble_event_get+0x5ea>
1000c9d8:	1c30      	adds	r0, r6, #0
1000c9da:	1c29      	adds	r1, r5, #0
1000c9dc:	4b90      	ldr	r3, [pc, #576]	; (1000cc20 <at_ble_event_get+0x63c>)
1000c9de:	4798      	blx	r3
1000c9e0:	260f      	movs	r6, #15
1000c9e2:	e0f4      	b.n	1000cbce <at_ble_event_get+0x5ea>
1000c9e4:	1c30      	adds	r0, r6, #0
1000c9e6:	1c29      	adds	r1, r5, #0
1000c9e8:	4b8e      	ldr	r3, [pc, #568]	; (1000cc24 <at_ble_event_get+0x640>)
1000c9ea:	4798      	blx	r3
1000c9ec:	1c06      	adds	r6, r0, #0
1000c9ee:	e0ee      	b.n	1000cbce <at_ble_event_get+0x5ea>
1000c9f0:	9801      	ldr	r0, [sp, #4]
1000c9f2:	1c31      	adds	r1, r6, #0
1000c9f4:	1c2a      	adds	r2, r5, #0
1000c9f6:	4b8c      	ldr	r3, [pc, #560]	; (1000cc28 <at_ble_event_get+0x644>)
1000c9f8:	e017      	b.n	1000ca2a <at_ble_event_get+0x446>
1000c9fa:	1c31      	adds	r1, r6, #0
1000c9fc:	9801      	ldr	r0, [sp, #4]
1000c9fe:	1c2a      	adds	r2, r5, #0
1000ca00:	4b8a      	ldr	r3, [pc, #552]	; (1000cc2c <at_ble_event_get+0x648>)
1000ca02:	4798      	blx	r3
1000ca04:	2611      	movs	r6, #17
1000ca06:	e0e2      	b.n	1000cbce <at_ble_event_get+0x5ea>
1000ca08:	1c31      	adds	r1, r6, #0
1000ca0a:	9801      	ldr	r0, [sp, #4]
1000ca0c:	1c2a      	adds	r2, r5, #0
1000ca0e:	4b88      	ldr	r3, [pc, #544]	; (1000cc30 <at_ble_event_get+0x64c>)
1000ca10:	4798      	blx	r3
1000ca12:	2612      	movs	r6, #18
1000ca14:	e0db      	b.n	1000cbce <at_ble_event_get+0x5ea>
1000ca16:	1c30      	adds	r0, r6, #0
1000ca18:	1c29      	adds	r1, r5, #0
1000ca1a:	4b86      	ldr	r3, [pc, #536]	; (1000cc34 <at_ble_event_get+0x650>)
1000ca1c:	4798      	blx	r3
1000ca1e:	2606      	movs	r6, #6
1000ca20:	e0d5      	b.n	1000cbce <at_ble_event_get+0x5ea>
1000ca22:	1c31      	adds	r1, r6, #0
1000ca24:	1c2a      	adds	r2, r5, #0
1000ca26:	9801      	ldr	r0, [sp, #4]
1000ca28:	4b83      	ldr	r3, [pc, #524]	; (1000cc38 <at_ble_event_get+0x654>)
1000ca2a:	4798      	blx	r3
1000ca2c:	e7de      	b.n	1000c9ec <at_ble_event_get+0x408>
1000ca2e:	9801      	ldr	r0, [sp, #4]
1000ca30:	1c31      	adds	r1, r6, #0
1000ca32:	1c2a      	adds	r2, r5, #0
1000ca34:	4b81      	ldr	r3, [pc, #516]	; (1000cc3c <at_ble_event_get+0x658>)
1000ca36:	e7f8      	b.n	1000ca2a <at_ble_event_get+0x446>
1000ca38:	1c31      	adds	r1, r6, #0
1000ca3a:	9801      	ldr	r0, [sp, #4]
1000ca3c:	1c2a      	adds	r2, r5, #0
1000ca3e:	4b80      	ldr	r3, [pc, #512]	; (1000cc40 <at_ble_event_get+0x65c>)
1000ca40:	4798      	blx	r3
1000ca42:	260d      	movs	r6, #13
1000ca44:	e0c3      	b.n	1000cbce <at_ble_event_get+0x5ea>
1000ca46:	1c31      	adds	r1, r6, #0
1000ca48:	9801      	ldr	r0, [sp, #4]
1000ca4a:	1c2a      	adds	r2, r5, #0
1000ca4c:	4b7d      	ldr	r3, [pc, #500]	; (1000cc44 <at_ble_event_get+0x660>)
1000ca4e:	4798      	blx	r3
1000ca50:	260e      	movs	r6, #14
1000ca52:	e0bc      	b.n	1000cbce <at_ble_event_get+0x5ea>
1000ca54:	9801      	ldr	r0, [sp, #4]
1000ca56:	1c31      	adds	r1, r6, #0
1000ca58:	1c2a      	adds	r2, r5, #0
1000ca5a:	4b7b      	ldr	r3, [pc, #492]	; (1000cc48 <at_ble_event_get+0x664>)
1000ca5c:	4798      	blx	r3
1000ca5e:	e084      	b.n	1000cb6a <at_ble_event_get+0x586>
1000ca60:	1c31      	adds	r1, r6, #0
1000ca62:	9801      	ldr	r0, [sp, #4]
1000ca64:	1c2a      	adds	r2, r5, #0
1000ca66:	4b79      	ldr	r3, [pc, #484]	; (1000cc4c <at_ble_event_get+0x668>)
1000ca68:	4798      	blx	r3
1000ca6a:	260b      	movs	r6, #11
1000ca6c:	e0af      	b.n	1000cbce <at_ble_event_get+0x5ea>
1000ca6e:	1c31      	adds	r1, r6, #0
1000ca70:	9801      	ldr	r0, [sp, #4]
1000ca72:	1c2a      	adds	r2, r5, #0
1000ca74:	4b76      	ldr	r3, [pc, #472]	; (1000cc50 <at_ble_event_get+0x66c>)
1000ca76:	4798      	blx	r3
1000ca78:	2610      	movs	r6, #16
1000ca7a:	e0a8      	b.n	1000cbce <at_ble_event_get+0x5ea>
1000ca7c:	1c30      	adds	r0, r6, #0
1000ca7e:	1c29      	adds	r1, r5, #0
1000ca80:	4b74      	ldr	r3, [pc, #464]	; (1000cc54 <at_ble_event_get+0x670>)
1000ca82:	4798      	blx	r3
1000ca84:	2628      	movs	r6, #40	; 0x28
1000ca86:	e0a2      	b.n	1000cbce <at_ble_event_get+0x5ea>
1000ca88:	1c30      	adds	r0, r6, #0
1000ca8a:	1c29      	adds	r1, r5, #0
1000ca8c:	4b72      	ldr	r3, [pc, #456]	; (1000cc58 <at_ble_event_get+0x674>)
1000ca8e:	4798      	blx	r3
1000ca90:	2629      	movs	r6, #41	; 0x29
1000ca92:	e09c      	b.n	1000cbce <at_ble_event_get+0x5ea>
1000ca94:	1c30      	adds	r0, r6, #0
1000ca96:	1c29      	adds	r1, r5, #0
1000ca98:	4b70      	ldr	r3, [pc, #448]	; (1000cc5c <at_ble_event_get+0x678>)
1000ca9a:	4798      	blx	r3
1000ca9c:	2627      	movs	r6, #39	; 0x27
1000ca9e:	e096      	b.n	1000cbce <at_ble_event_get+0x5ea>
1000caa0:	1c30      	adds	r0, r6, #0
1000caa2:	1c29      	adds	r1, r5, #0
1000caa4:	4b6e      	ldr	r3, [pc, #440]	; (1000cc60 <at_ble_event_get+0x67c>)
1000caa6:	4798      	blx	r3
1000caa8:	262a      	movs	r6, #42	; 0x2a
1000caaa:	e090      	b.n	1000cbce <at_ble_event_get+0x5ea>
1000caac:	9801      	ldr	r0, [sp, #4]
1000caae:	1c31      	adds	r1, r6, #0
1000cab0:	1c2a      	adds	r2, r5, #0
1000cab2:	4b6c      	ldr	r3, [pc, #432]	; (1000cc64 <at_ble_event_get+0x680>)
1000cab4:	e7b9      	b.n	1000ca2a <at_ble_event_get+0x446>
1000cab6:	9801      	ldr	r0, [sp, #4]
1000cab8:	1c31      	adds	r1, r6, #0
1000caba:	1c2a      	adds	r2, r5, #0
1000cabc:	4b6a      	ldr	r3, [pc, #424]	; (1000cc68 <at_ble_event_get+0x684>)
1000cabe:	e7b4      	b.n	1000ca2a <at_ble_event_get+0x446>
1000cac0:	1c30      	adds	r0, r6, #0
1000cac2:	1c29      	adds	r1, r5, #0
1000cac4:	4b69      	ldr	r3, [pc, #420]	; (1000cc6c <at_ble_event_get+0x688>)
1000cac6:	4798      	blx	r3
1000cac8:	262b      	movs	r6, #43	; 0x2b
1000caca:	e080      	b.n	1000cbce <at_ble_event_get+0x5ea>
1000cacc:	1c30      	adds	r0, r6, #0
1000cace:	1c29      	adds	r1, r5, #0
1000cad0:	4b67      	ldr	r3, [pc, #412]	; (1000cc70 <at_ble_event_get+0x68c>)
1000cad2:	4798      	blx	r3
1000cad4:	262c      	movs	r6, #44	; 0x2c
1000cad6:	e07a      	b.n	1000cbce <at_ble_event_get+0x5ea>
1000cad8:	1c31      	adds	r1, r6, #0
1000cada:	9801      	ldr	r0, [sp, #4]
1000cadc:	1c2a      	adds	r2, r5, #0
1000cade:	4b65      	ldr	r3, [pc, #404]	; (1000cc74 <at_ble_event_get+0x690>)
1000cae0:	4798      	blx	r3
1000cae2:	2613      	movs	r6, #19
1000cae4:	e073      	b.n	1000cbce <at_ble_event_get+0x5ea>
1000cae6:	1c31      	adds	r1, r6, #0
1000cae8:	9801      	ldr	r0, [sp, #4]
1000caea:	1c2a      	adds	r2, r5, #0
1000caec:	4b62      	ldr	r3, [pc, #392]	; (1000cc78 <at_ble_event_get+0x694>)
1000caee:	4798      	blx	r3
1000caf0:	2614      	movs	r6, #20
1000caf2:	e06c      	b.n	1000cbce <at_ble_event_get+0x5ea>
1000caf4:	1c31      	adds	r1, r6, #0
1000caf6:	9801      	ldr	r0, [sp, #4]
1000caf8:	1c2a      	adds	r2, r5, #0
1000cafa:	4b60      	ldr	r3, [pc, #384]	; (1000cc7c <at_ble_event_get+0x698>)
1000cafc:	4798      	blx	r3
1000cafe:	2615      	movs	r6, #21
1000cb00:	e065      	b.n	1000cbce <at_ble_event_get+0x5ea>
1000cb02:	1c31      	adds	r1, r6, #0
1000cb04:	9801      	ldr	r0, [sp, #4]
1000cb06:	1c2a      	adds	r2, r5, #0
1000cb08:	4b5d      	ldr	r3, [pc, #372]	; (1000cc80 <at_ble_event_get+0x69c>)
1000cb0a:	4798      	blx	r3
1000cb0c:	2616      	movs	r6, #22
1000cb0e:	e05e      	b.n	1000cbce <at_ble_event_get+0x5ea>
1000cb10:	9801      	ldr	r0, [sp, #4]
1000cb12:	1c31      	adds	r1, r6, #0
1000cb14:	1c2a      	adds	r2, r5, #0
1000cb16:	4b5b      	ldr	r3, [pc, #364]	; (1000cc84 <at_ble_event_get+0x6a0>)
1000cb18:	e787      	b.n	1000ca2a <at_ble_event_get+0x446>
1000cb1a:	1c31      	adds	r1, r6, #0
1000cb1c:	9801      	ldr	r0, [sp, #4]
1000cb1e:	1c2a      	adds	r2, r5, #0
1000cb20:	4b58      	ldr	r3, [pc, #352]	; (1000cc84 <at_ble_event_get+0x6a0>)
1000cb22:	4798      	blx	r3
1000cb24:	88a9      	ldrh	r1, [r5, #4]
1000cb26:	1c06      	adds	r6, r0, #0
1000cb28:	4b57      	ldr	r3, [pc, #348]	; (1000cc88 <at_ble_event_get+0x6a4>)
1000cb2a:	8828      	ldrh	r0, [r5, #0]
1000cb2c:	4798      	blx	r3
1000cb2e:	e04e      	b.n	1000cbce <at_ble_event_get+0x5ea>
1000cb30:	1c31      	adds	r1, r6, #0
1000cb32:	9801      	ldr	r0, [sp, #4]
1000cb34:	1c2a      	adds	r2, r5, #0
1000cb36:	4b55      	ldr	r3, [pc, #340]	; (1000cc8c <at_ble_event_get+0x6a8>)
1000cb38:	4798      	blx	r3
1000cb3a:	2623      	movs	r6, #35	; 0x23
1000cb3c:	e047      	b.n	1000cbce <at_ble_event_get+0x5ea>
1000cb3e:	9801      	ldr	r0, [sp, #4]
1000cb40:	1c31      	adds	r1, r6, #0
1000cb42:	1c2a      	adds	r2, r5, #0
1000cb44:	4b52      	ldr	r3, [pc, #328]	; (1000cc90 <at_ble_event_get+0x6ac>)
1000cb46:	e770      	b.n	1000ca2a <at_ble_event_get+0x446>
1000cb48:	9b01      	ldr	r3, [sp, #4]
1000cb4a:	1c30      	adds	r0, r6, #0
1000cb4c:	0a1f      	lsrs	r7, r3, #8
1000cb4e:	802f      	strh	r7, [r5, #0]
1000cb50:	1c29      	adds	r1, r5, #0
1000cb52:	4b50      	ldr	r3, [pc, #320]	; (1000cc94 <at_ble_event_get+0x6b0>)
1000cb54:	e749      	b.n	1000c9ea <at_ble_event_get+0x406>
1000cb56:	9801      	ldr	r0, [sp, #4]
1000cb58:	1c31      	adds	r1, r6, #0
1000cb5a:	1c2a      	adds	r2, r5, #0
1000cb5c:	4b4e      	ldr	r3, [pc, #312]	; (1000cc98 <at_ble_event_get+0x6b4>)
1000cb5e:	e764      	b.n	1000ca2a <at_ble_event_get+0x446>
1000cb60:	1c30      	adds	r0, r6, #0
1000cb62:	1c29      	adds	r1, r5, #0
1000cb64:	9a01      	ldr	r2, [sp, #4]
1000cb66:	4b4d      	ldr	r3, [pc, #308]	; (1000cc9c <at_ble_event_get+0x6b8>)
1000cb68:	4798      	blx	r3
1000cb6a:	263b      	movs	r6, #59	; 0x3b
1000cb6c:	e02f      	b.n	1000cbce <at_ble_event_get+0x5ea>
1000cb6e:	1c31      	adds	r1, r6, #0
1000cb70:	9801      	ldr	r0, [sp, #4]
1000cb72:	1c2a      	adds	r2, r5, #0
1000cb74:	4b4a      	ldr	r3, [pc, #296]	; (1000cca0 <at_ble_event_get+0x6bc>)
1000cb76:	4798      	blx	r3
1000cb78:	2618      	movs	r6, #24
1000cb7a:	e028      	b.n	1000cbce <at_ble_event_get+0x5ea>
1000cb7c:	1c31      	adds	r1, r6, #0
1000cb7e:	9801      	ldr	r0, [sp, #4]
1000cb80:	1c2a      	adds	r2, r5, #0
1000cb82:	4b48      	ldr	r3, [pc, #288]	; (1000cca4 <at_ble_event_get+0x6c0>)
1000cb84:	4798      	blx	r3
1000cb86:	2620      	movs	r6, #32
1000cb88:	e021      	b.n	1000cbce <at_ble_event_get+0x5ea>
1000cb8a:	1c31      	adds	r1, r6, #0
1000cb8c:	9801      	ldr	r0, [sp, #4]
1000cb8e:	1c2a      	adds	r2, r5, #0
1000cb90:	4b45      	ldr	r3, [pc, #276]	; (1000cca8 <at_ble_event_get+0x6c4>)
1000cb92:	4798      	blx	r3
1000cb94:	2633      	movs	r6, #51	; 0x33
1000cb96:	e01a      	b.n	1000cbce <at_ble_event_get+0x5ea>
1000cb98:	1c31      	adds	r1, r6, #0
1000cb9a:	9801      	ldr	r0, [sp, #4]
1000cb9c:	1c2a      	adds	r2, r5, #0
1000cb9e:	4b43      	ldr	r3, [pc, #268]	; (1000ccac <at_ble_event_get+0x6c8>)
1000cba0:	4798      	blx	r3
1000cba2:	2630      	movs	r6, #48	; 0x30
1000cba4:	e013      	b.n	1000cbce <at_ble_event_get+0x5ea>
1000cba6:	1c31      	adds	r1, r6, #0
1000cba8:	9801      	ldr	r0, [sp, #4]
1000cbaa:	1c2a      	adds	r2, r5, #0
1000cbac:	4b40      	ldr	r3, [pc, #256]	; (1000ccb0 <at_ble_event_get+0x6cc>)
1000cbae:	4798      	blx	r3
1000cbb0:	2634      	movs	r6, #52	; 0x34
1000cbb2:	e00c      	b.n	1000cbce <at_ble_event_get+0x5ea>
1000cbb4:	1c31      	adds	r1, r6, #0
1000cbb6:	9801      	ldr	r0, [sp, #4]
1000cbb8:	1c2a      	adds	r2, r5, #0
1000cbba:	4b3e      	ldr	r3, [pc, #248]	; (1000ccb4 <at_ble_event_get+0x6d0>)
1000cbbc:	4798      	blx	r3
1000cbbe:	2635      	movs	r6, #53	; 0x35
1000cbc0:	e005      	b.n	1000cbce <at_ble_event_get+0x5ea>
1000cbc2:	1c31      	adds	r1, r6, #0
1000cbc4:	9801      	ldr	r0, [sp, #4]
1000cbc6:	1c2a      	adds	r2, r5, #0
1000cbc8:	4b3b      	ldr	r3, [pc, #236]	; (1000ccb8 <at_ble_event_get+0x6d4>)
1000cbca:	4798      	blx	r3
1000cbcc:	2632      	movs	r6, #50	; 0x32
1000cbce:	9b03      	ldr	r3, [sp, #12]
1000cbd0:	701e      	strb	r6, [r3, #0]
1000cbd2:	2300      	movs	r3, #0
1000cbd4:	9302      	str	r3, [sp, #8]
1000cbd6:	e57a      	b.n	1000c6ce <at_ble_event_get+0xea>
1000cbd8:	23d0      	movs	r3, #208	; 0xd0
1000cbda:	e7fb      	b.n	1000cbd4 <at_ble_event_get+0x5f0>
1000cbdc:	9b01      	ldr	r3, [sp, #4]
1000cbde:	9e02      	ldr	r6, [sp, #8]
1000cbe0:	2bbb      	cmp	r3, #187	; 0xbb
1000cbe2:	d000      	beq.n	1000cbe6 <at_ble_event_get+0x602>
1000cbe4:	e6e6      	b.n	1000c9b4 <at_ble_event_get+0x3d0>
1000cbe6:	e7f2      	b.n	1000cbce <at_ble_event_get+0x5ea>
1000cbe8:	9b02      	ldr	r3, [sp, #8]
1000cbea:	2b00      	cmp	r3, #0
1000cbec:	d000      	beq.n	1000cbf0 <at_ble_event_get+0x60c>
1000cbee:	e56e      	b.n	1000c6ce <at_ble_event_get+0xea>
1000cbf0:	e6e0      	b.n	1000c9b4 <at_ble_event_get+0x3d0>
1000cbf2:	9802      	ldr	r0, [sp, #8]
1000cbf4:	b007      	add	sp, #28
1000cbf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000cbf8:	00000e22 	.word	0x00000e22
1000cbfc:	00000e25 	.word	0x00000e25
1000cc00:	00001b05 	.word	0x00001b05
1000cc04:	00001b01 	.word	0x00001b01
1000cc08:	00001b03 	.word	0x00001b03
1000cc0c:	00001b06 	.word	0x00001b06
1000cc10:	00001b08 	.word	0x00001b08
1000cc14:	1000e7f5 	.word	0x1000e7f5
1000cc18:	1000e7d9 	.word	0x1000e7d9
1000cc1c:	1000e9ed 	.word	0x1000e9ed
1000cc20:	1000ebf9 	.word	0x1000ebf9
1000cc24:	1000ec1d 	.word	0x1000ec1d
1000cc28:	1000db6d 	.word	0x1000db6d
1000cc2c:	1000e3ed 	.word	0x1000e3ed
1000cc30:	1000e469 	.word	0x1000e469
1000cc34:	1000de25 	.word	0x1000de25
1000cc38:	1000dec1 	.word	0x1000dec1
1000cc3c:	1000df99 	.word	0x1000df99
1000cc40:	1000e221 	.word	0x1000e221
1000cc44:	1000e2c1 	.word	0x1000e2c1
1000cc48:	1000e379 	.word	0x1000e379
1000cc4c:	1000e3a1 	.word	0x1000e3a1
1000cc50:	1000e3b7 	.word	0x1000e3b7
1000cc54:	1000e481 	.word	0x1000e481
1000cc58:	1000e4af 	.word	0x1000e4af
1000cc5c:	1000e4c5 	.word	0x1000e4c5
1000cc60:	1000e4ef 	.word	0x1000e4ef
1000cc64:	1000e31d 	.word	0x1000e31d
1000cc68:	1000e347 	.word	0x1000e347
1000cc6c:	1000d5ad 	.word	0x1000d5ad
1000cc70:	1000d5d9 	.word	0x1000d5d9
1000cc74:	1000ef75 	.word	0x1000ef75
1000cc78:	1000efb1 	.word	0x1000efb1
1000cc7c:	1000eff9 	.word	0x1000eff9
1000cc80:	1000f03d 	.word	0x1000f03d
1000cc84:	1000f071 	.word	0x1000f071
1000cc88:	1000ee9d 	.word	0x1000ee9d
1000cc8c:	1000f13d 	.word	0x1000f13d
1000cc90:	1000f0c5 	.word	0x1000f0c5
1000cc94:	1000d505 	.word	0x1000d505
1000cc98:	1000d571 	.word	0x1000d571
1000cc9c:	1000d535 	.word	0x1000d535
1000cca0:	1000f14d 	.word	0x1000f14d
1000cca4:	1000f18d 	.word	0x1000f18d
1000cca8:	1000f2d9 	.word	0x1000f2d9
1000ccac:	1000f2e3 	.word	0x1000f2e3
1000ccb0:	1000f2e9 	.word	0x1000f2e9
1000ccb4:	1000f2ef 	.word	0x1000f2ef
1000ccb8:	1000f2fb 	.word	0x1000f2fb

1000ccbc <internal_event_flush>:
1000ccbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000ccbe:	490e      	ldr	r1, [pc, #56]	; (1000ccf8 <internal_event_flush+0x3c>)
1000ccc0:	2400      	movs	r4, #0
1000ccc2:	680b      	ldr	r3, [r1, #0]
1000ccc4:	1c0f      	adds	r7, r1, #0
1000ccc6:	1c1e      	adds	r6, r3, #0
1000ccc8:	4a0c      	ldr	r2, [pc, #48]	; (1000ccfc <internal_event_flush+0x40>)
1000ccca:	6815      	ldr	r5, [r2, #0]
1000cccc:	9201      	str	r2, [sp, #4]
1000ccce:	2b00      	cmp	r3, #0
1000ccd0:	d00e      	beq.n	1000ccf0 <internal_event_flush+0x34>
1000ccd2:	889a      	ldrh	r2, [r3, #4]
1000ccd4:	6819      	ldr	r1, [r3, #0]
1000ccd6:	4282      	cmp	r2, r0
1000ccd8:	d107      	bne.n	1000ccea <internal_event_flush+0x2e>
1000ccda:	2c00      	cmp	r4, #0
1000ccdc:	d001      	beq.n	1000cce2 <internal_event_flush+0x26>
1000ccde:	6021      	str	r1, [r4, #0]
1000cce0:	e000      	b.n	1000cce4 <internal_event_flush+0x28>
1000cce2:	1c0e      	adds	r6, r1, #0
1000cce4:	601d      	str	r5, [r3, #0]
1000cce6:	1c1d      	adds	r5, r3, #0
1000cce8:	1c23      	adds	r3, r4, #0
1000ccea:	1c1c      	adds	r4, r3, #0
1000ccec:	1c0b      	adds	r3, r1, #0
1000ccee:	e7ee      	b.n	1000ccce <internal_event_flush+0x12>
1000ccf0:	9b01      	ldr	r3, [sp, #4]
1000ccf2:	603e      	str	r6, [r7, #0]
1000ccf4:	601d      	str	r5, [r3, #0]
1000ccf6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000ccf8:	10014560 	.word	0x10014560
1000ccfc:	10014564 	.word	0x10014564

1000cd00 <internal_conn_flush>:
1000cd00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000cd02:	4a12      	ldr	r2, [pc, #72]	; (1000cd4c <internal_conn_flush+0x4c>)
1000cd04:	9000      	str	r0, [sp, #0]
1000cd06:	6813      	ldr	r3, [r2, #0]
1000cd08:	4811      	ldr	r0, [pc, #68]	; (1000cd50 <internal_conn_flush+0x50>)
1000cd0a:	1c1f      	adds	r7, r3, #0
1000cd0c:	2100      	movs	r1, #0
1000cd0e:	4684      	mov	ip, r0
1000cd10:	6804      	ldr	r4, [r0, #0]
1000cd12:	9201      	str	r2, [sp, #4]
1000cd14:	2b00      	cmp	r3, #0
1000cd16:	d014      	beq.n	1000cd42 <internal_conn_flush+0x42>
1000cd18:	88d8      	ldrh	r0, [r3, #6]
1000cd1a:	9a00      	ldr	r2, [sp, #0]
1000cd1c:	681d      	ldr	r5, [r3, #0]
1000cd1e:	0a06      	lsrs	r6, r0, #8
1000cd20:	4296      	cmp	r6, r2
1000cd22:	d10b      	bne.n	1000cd3c <internal_conn_flush+0x3c>
1000cd24:	26fd      	movs	r6, #253	; 0xfd
1000cd26:	4006      	ands	r6, r0
1000cd28:	2e0c      	cmp	r6, #12
1000cd2a:	d107      	bne.n	1000cd3c <internal_conn_flush+0x3c>
1000cd2c:	2900      	cmp	r1, #0
1000cd2e:	d001      	beq.n	1000cd34 <internal_conn_flush+0x34>
1000cd30:	600d      	str	r5, [r1, #0]
1000cd32:	e000      	b.n	1000cd36 <internal_conn_flush+0x36>
1000cd34:	1c2f      	adds	r7, r5, #0
1000cd36:	601c      	str	r4, [r3, #0]
1000cd38:	1c1c      	adds	r4, r3, #0
1000cd3a:	1c0b      	adds	r3, r1, #0
1000cd3c:	1c19      	adds	r1, r3, #0
1000cd3e:	1c2b      	adds	r3, r5, #0
1000cd40:	e7e8      	b.n	1000cd14 <internal_conn_flush+0x14>
1000cd42:	9b01      	ldr	r3, [sp, #4]
1000cd44:	601f      	str	r7, [r3, #0]
1000cd46:	4663      	mov	r3, ip
1000cd48:	601c      	str	r4, [r3, #0]
1000cd4a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000cd4c:	10014560 	.word	0x10014560
1000cd50:	10014564 	.word	0x10014564

1000cd54 <at_ble_device_name_set>:
1000cd54:	b530      	push	{r4, r5, lr}
1000cd56:	23cf      	movs	r3, #207	; 0xcf
1000cd58:	2800      	cmp	r0, #0
1000cd5a:	d010      	beq.n	1000cd7e <at_ble_device_name_set+0x2a>
1000cd5c:	1e4a      	subs	r2, r1, #1
1000cd5e:	2a1f      	cmp	r2, #31
1000cd60:	d80d      	bhi.n	1000cd7e <at_ble_device_name_set+0x2a>
1000cd62:	4a08      	ldr	r2, [pc, #32]	; (1000cd84 <at_ble_device_name_set+0x30>)
1000cd64:	1c13      	adds	r3, r2, #0
1000cd66:	33aa      	adds	r3, #170	; 0xaa
1000cd68:	8019      	strh	r1, [r3, #0]
1000cd6a:	2300      	movs	r3, #0
1000cd6c:	1c1c      	adds	r4, r3, #0
1000cd6e:	5cc5      	ldrb	r5, [r0, r3]
1000cd70:	34ac      	adds	r4, #172	; 0xac
1000cd72:	3301      	adds	r3, #1
1000cd74:	5515      	strb	r5, [r2, r4]
1000cd76:	b2dc      	uxtb	r4, r3
1000cd78:	428c      	cmp	r4, r1
1000cd7a:	d3f7      	bcc.n	1000cd6c <at_ble_device_name_set+0x18>
1000cd7c:	2300      	movs	r3, #0
1000cd7e:	1c18      	adds	r0, r3, #0
1000cd80:	bd30      	pop	{r4, r5, pc}
1000cd82:	46c0      	nop			; (mov r8, r8)
1000cd84:	10015356 	.word	0x10015356

1000cd88 <at_ble_addr_get>:
1000cd88:	b510      	push	{r4, lr}
1000cd8a:	1c04      	adds	r4, r0, #0
1000cd8c:	20cf      	movs	r0, #207	; 0xcf
1000cd8e:	2c00      	cmp	r4, #0
1000cd90:	d006      	beq.n	1000cda0 <at_ble_addr_get+0x18>
1000cd92:	4b04      	ldr	r3, [pc, #16]	; (1000cda4 <at_ble_addr_get+0x1c>)
1000cd94:	38ce      	subs	r0, #206	; 0xce
1000cd96:	1c21      	adds	r1, r4, #0
1000cd98:	4798      	blx	r3
1000cd9a:	4b03      	ldr	r3, [pc, #12]	; (1000cda8 <at_ble_addr_get+0x20>)
1000cd9c:	791b      	ldrb	r3, [r3, #4]
1000cd9e:	7023      	strb	r3, [r4, #0]
1000cda0:	bd10      	pop	{r4, pc}
1000cda2:	46c0      	nop			; (mov r8, r8)
1000cda4:	1000e689 	.word	0x1000e689
1000cda8:	10015356 	.word	0x10015356

1000cdac <at_ble_set_dev_config>:
1000cdac:	b5f0      	push	{r4, r5, r6, r7, lr}
1000cdae:	7906      	ldrb	r6, [r0, #4]
1000cdb0:	b089      	sub	sp, #36	; 0x24
1000cdb2:	25cf      	movs	r5, #207	; 0xcf
1000cdb4:	2e03      	cmp	r6, #3
1000cdb6:	d838      	bhi.n	1000ce2a <at_ble_set_dev_config+0x7e>
1000cdb8:	7803      	ldrb	r3, [r0, #0]
1000cdba:	3511      	adds	r5, #17
1000cdbc:	2b0f      	cmp	r3, #15
1000cdbe:	d834      	bhi.n	1000ce2a <at_ble_set_dev_config+0x7e>
1000cdc0:	2380      	movs	r3, #128	; 0x80
1000cdc2:	8c87      	ldrh	r7, [r0, #36]	; 0x24
1000cdc4:	3d11      	subs	r5, #17
1000cdc6:	009b      	lsls	r3, r3, #2
1000cdc8:	429f      	cmp	r7, r3
1000cdca:	d82e      	bhi.n	1000ce2a <at_ble_set_dev_config+0x7e>
1000cdcc:	7fc5      	ldrb	r5, [r0, #31]
1000cdce:	7f83      	ldrb	r3, [r0, #30]
1000cdd0:	01ad      	lsls	r5, r5, #6
1000cdd2:	015b      	lsls	r3, r3, #5
1000cdd4:	431d      	orrs	r5, r3
1000cdd6:	7ec3      	ldrb	r3, [r0, #27]
1000cdd8:	431d      	orrs	r5, r3
1000cdda:	7f43      	ldrb	r3, [r0, #29]
1000cddc:	011b      	lsls	r3, r3, #4
1000cdde:	431d      	orrs	r5, r3
1000cde0:	7f03      	ldrb	r3, [r0, #28]
1000cde2:	009b      	lsls	r3, r3, #2
1000cde4:	431d      	orrs	r5, r3
1000cde6:	4b12      	ldr	r3, [pc, #72]	; (1000ce30 <at_ble_set_dev_config+0x84>)
1000cde8:	b2ed      	uxtb	r5, r5
1000cdea:	711e      	strb	r6, [r3, #4]
1000cdec:	7903      	ldrb	r3, [r0, #4]
1000cdee:	3b02      	subs	r3, #2
1000cdf0:	2b01      	cmp	r3, #1
1000cdf2:	d801      	bhi.n	1000cdf8 <at_ble_set_dev_config+0x4c>
1000cdf4:	2302      	movs	r3, #2
1000cdf6:	7103      	strb	r3, [r0, #4]
1000cdf8:	1c04      	adds	r4, r0, #0
1000cdfa:	1c23      	adds	r3, r4, #0
1000cdfc:	330b      	adds	r3, #11
1000cdfe:	8861      	ldrh	r1, [r4, #2]
1000ce00:	9307      	str	r3, [sp, #28]
1000ce02:	7923      	ldrb	r3, [r4, #4]
1000ce04:	7800      	ldrb	r0, [r0, #0]
1000ce06:	9300      	str	r3, [sp, #0]
1000ce08:	9501      	str	r5, [sp, #4]
1000ce0a:	8c25      	ldrh	r5, [r4, #32]
1000ce0c:	1d62      	adds	r2, r4, #5
1000ce0e:	9502      	str	r5, [sp, #8]
1000ce10:	8c65      	ldrh	r5, [r4, #34]	; 0x22
1000ce12:	9b07      	ldr	r3, [sp, #28]
1000ce14:	9503      	str	r5, [sp, #12]
1000ce16:	9704      	str	r7, [sp, #16]
1000ce18:	4d06      	ldr	r5, [pc, #24]	; (1000ce34 <at_ble_set_dev_config+0x88>)
1000ce1a:	47a8      	blx	r5
1000ce1c:	7126      	strb	r6, [r4, #4]
1000ce1e:	1c05      	adds	r5, r0, #0
1000ce20:	1c21      	adds	r1, r4, #0
1000ce22:	4803      	ldr	r0, [pc, #12]	; (1000ce30 <at_ble_set_dev_config+0x84>)
1000ce24:	2226      	movs	r2, #38	; 0x26
1000ce26:	4b04      	ldr	r3, [pc, #16]	; (1000ce38 <at_ble_set_dev_config+0x8c>)
1000ce28:	4798      	blx	r3
1000ce2a:	1c28      	adds	r0, r5, #0
1000ce2c:	b009      	add	sp, #36	; 0x24
1000ce2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ce30:	10015356 	.word	0x10015356
1000ce34:	1000e581 	.word	0x1000e581
1000ce38:	10010423 	.word	0x10010423

1000ce3c <at_ble_init>:
1000ce3c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ce3e:	b087      	sub	sp, #28
1000ce40:	af03      	add	r7, sp, #12
1000ce42:	4954      	ldr	r1, [pc, #336]	; (1000cf94 <at_ble_init+0x158>)
1000ce44:	220b      	movs	r2, #11
1000ce46:	4b54      	ldr	r3, [pc, #336]	; (1000cf98 <at_ble_init+0x15c>)
1000ce48:	1c04      	adds	r4, r0, #0
1000ce4a:	1c38      	adds	r0, r7, #0
1000ce4c:	4798      	blx	r3
1000ce4e:	2205      	movs	r2, #5
1000ce50:	4b52      	ldr	r3, [pc, #328]	; (1000cf9c <at_ble_init+0x160>)
1000ce52:	2640      	movs	r6, #64	; 0x40
1000ce54:	801a      	strh	r2, [r3, #0]
1000ce56:	2300      	movs	r3, #0
1000ce58:	4a51      	ldr	r2, [pc, #324]	; (1000cfa0 <at_ble_init+0x164>)
1000ce5a:	6013      	str	r3, [r2, #0]
1000ce5c:	4a51      	ldr	r2, [pc, #324]	; (1000cfa4 <at_ble_init+0x168>)
1000ce5e:	7013      	strb	r3, [r2, #0]
1000ce60:	4a51      	ldr	r2, [pc, #324]	; (1000cfa8 <at_ble_init+0x16c>)
1000ce62:	7013      	strb	r3, [r2, #0]
1000ce64:	4b51      	ldr	r3, [pc, #324]	; (1000cfac <at_ble_init+0x170>)
1000ce66:	4798      	blx	r3
1000ce68:	4b51      	ldr	r3, [pc, #324]	; (1000cfb0 <at_ble_init+0x174>)
1000ce6a:	4798      	blx	r3
1000ce6c:	4b51      	ldr	r3, [pc, #324]	; (1000cfb4 <at_ble_init+0x178>)
1000ce6e:	4798      	blx	r3
1000ce70:	4b51      	ldr	r3, [pc, #324]	; (1000cfb8 <at_ble_init+0x17c>)
1000ce72:	4798      	blx	r3
1000ce74:	2c00      	cmp	r4, #0
1000ce76:	d100      	bne.n	1000ce7a <at_ble_init+0x3e>
1000ce78:	e089      	b.n	1000cf8e <at_ble_init+0x152>
1000ce7a:	68a3      	ldr	r3, [r4, #8]
1000ce7c:	2b00      	cmp	r3, #0
1000ce7e:	d100      	bne.n	1000ce82 <at_ble_init+0x46>
1000ce80:	e085      	b.n	1000cf8e <at_ble_init+0x152>
1000ce82:	6923      	ldr	r3, [r4, #16]
1000ce84:	2b00      	cmp	r3, #0
1000ce86:	d100      	bne.n	1000ce8a <at_ble_init+0x4e>
1000ce88:	e081      	b.n	1000cf8e <at_ble_init+0x152>
1000ce8a:	6820      	ldr	r0, [r4, #0]
1000ce8c:	2800      	cmp	r0, #0
1000ce8e:	d102      	bne.n	1000ce96 <at_ble_init+0x5a>
1000ce90:	6863      	ldr	r3, [r4, #4]
1000ce92:	2b00      	cmp	r3, #0
1000ce94:	d17b      	bne.n	1000cf8e <at_ble_init+0x152>
1000ce96:	4b49      	ldr	r3, [pc, #292]	; (1000cfbc <at_ble_init+0x180>)
1000ce98:	6861      	ldr	r1, [r4, #4]
1000ce9a:	4798      	blx	r3
1000ce9c:	4b48      	ldr	r3, [pc, #288]	; (1000cfc0 <at_ble_init+0x184>)
1000ce9e:	4798      	blx	r3
1000cea0:	2801      	cmp	r0, #1
1000cea2:	d901      	bls.n	1000cea8 <at_ble_init+0x6c>
1000cea4:	26e2      	movs	r6, #226	; 0xe2
1000cea6:	e072      	b.n	1000cf8e <at_ble_init+0x152>
1000cea8:	4846      	ldr	r0, [pc, #280]	; (1000cfc4 <at_ble_init+0x188>)
1000ceaa:	4b47      	ldr	r3, [pc, #284]	; (1000cfc8 <at_ble_init+0x18c>)
1000ceac:	4798      	blx	r3
1000ceae:	2800      	cmp	r0, #0
1000ceb0:	d1f8      	bne.n	1000cea4 <at_ble_init+0x68>
1000ceb2:	1c20      	adds	r0, r4, #0
1000ceb4:	4b45      	ldr	r3, [pc, #276]	; (1000cfcc <at_ble_init+0x190>)
1000ceb6:	4798      	blx	r3
1000ceb8:	68e0      	ldr	r0, [r4, #12]
1000ceba:	68a1      	ldr	r1, [r4, #8]
1000cebc:	4b44      	ldr	r3, [pc, #272]	; (1000cfd0 <at_ble_init+0x194>)
1000cebe:	4798      	blx	r3
1000cec0:	466b      	mov	r3, sp
1000cec2:	2201      	movs	r2, #1
1000cec4:	1cdc      	adds	r4, r3, #3
1000cec6:	1c20      	adds	r0, r4, #0
1000cec8:	a901      	add	r1, sp, #4
1000ceca:	4252      	negs	r2, r2
1000cecc:	4b41      	ldr	r3, [pc, #260]	; (1000cfd4 <at_ble_init+0x198>)
1000cece:	4798      	blx	r3
1000ced0:	2800      	cmp	r0, #0
1000ced2:	d102      	bne.n	1000ceda <at_ble_init+0x9e>
1000ced4:	7823      	ldrb	r3, [r4, #0]
1000ced6:	2b39      	cmp	r3, #57	; 0x39
1000ced8:	d1f2      	bne.n	1000cec0 <at_ble_init+0x84>
1000ceda:	4b3f      	ldr	r3, [pc, #252]	; (1000cfd8 <at_ble_init+0x19c>)
1000cedc:	4798      	blx	r3
1000cede:	1e06      	subs	r6, r0, #0
1000cee0:	d155      	bne.n	1000cf8e <at_ble_init+0x152>
1000cee2:	1c03      	adds	r3, r0, #0
1000cee4:	2101      	movs	r1, #1
1000cee6:	4a3d      	ldr	r2, [pc, #244]	; (1000cfdc <at_ble_init+0x1a0>)
1000cee8:	4249      	negs	r1, r1
1000ceea:	189a      	adds	r2, r3, r2
1000ceec:	3312      	adds	r3, #18
1000ceee:	8151      	strh	r1, [r2, #10]
1000cef0:	2b90      	cmp	r3, #144	; 0x90
1000cef2:	d1f7      	bne.n	1000cee4 <at_ble_init+0xa8>
1000cef4:	4c3a      	ldr	r4, [pc, #232]	; (1000cfe0 <at_ble_init+0x1a4>)
1000cef6:	3b81      	subs	r3, #129	; 0x81
1000cef8:	7023      	strb	r3, [r4, #0]
1000cefa:	4b3a      	ldr	r3, [pc, #232]	; (1000cfe4 <at_ble_init+0x1a8>)
1000cefc:	4a3a      	ldr	r2, [pc, #232]	; (1000cfe8 <at_ble_init+0x1ac>)
1000cefe:	8063      	strh	r3, [r4, #2]
1000cf00:	2300      	movs	r3, #0
1000cf02:	7123      	strb	r3, [r4, #4]
1000cf04:	3301      	adds	r3, #1
1000cf06:	1e58      	subs	r0, r3, #1
1000cf08:	0119      	lsls	r1, r3, #4
1000cf0a:	4301      	orrs	r1, r0
1000cf0c:	3302      	adds	r3, #2
1000cf0e:	7011      	strb	r1, [r2, #0]
1000cf10:	3201      	adds	r2, #1
1000cf12:	2b21      	cmp	r3, #33	; 0x21
1000cf14:	d1f7      	bne.n	1000cf06 <at_ble_init+0xca>
1000cf16:	33e0      	adds	r3, #224	; 0xe0
1000cf18:	33ff      	adds	r3, #255	; 0xff
1000cf1a:	84a3      	strh	r3, [r4, #36]	; 0x24
1000cf1c:	1c23      	adds	r3, r4, #0
1000cf1e:	2500      	movs	r5, #0
1000cf20:	3373      	adds	r3, #115	; 0x73
1000cf22:	701d      	strb	r5, [r3, #0]
1000cf24:	1c23      	adds	r3, r4, #0
1000cf26:	3372      	adds	r3, #114	; 0x72
1000cf28:	701d      	strb	r5, [r3, #0]
1000cf2a:	1c23      	adds	r3, r4, #0
1000cf2c:	3376      	adds	r3, #118	; 0x76
1000cf2e:	701d      	strb	r5, [r3, #0]
1000cf30:	1c23      	adds	r3, r4, #0
1000cf32:	33cc      	adds	r3, #204	; 0xcc
1000cf34:	801d      	strh	r5, [r3, #0]
1000cf36:	1c22      	adds	r2, r4, #0
1000cf38:	23a0      	movs	r3, #160	; 0xa0
1000cf3a:	32d0      	adds	r2, #208	; 0xd0
1000cf3c:	005b      	lsls	r3, r3, #1
1000cf3e:	8013      	strh	r3, [r2, #0]
1000cf40:	1c22      	adds	r2, r4, #0
1000cf42:	32ce      	adds	r2, #206	; 0xce
1000cf44:	8013      	strh	r3, [r2, #0]
1000cf46:	1c23      	adds	r3, r4, #0
1000cf48:	33d2      	adds	r3, #210	; 0xd2
1000cf4a:	801d      	strh	r5, [r3, #0]
1000cf4c:	22fa      	movs	r2, #250	; 0xfa
1000cf4e:	1c23      	adds	r3, r4, #0
1000cf50:	0052      	lsls	r2, r2, #1
1000cf52:	33d4      	adds	r3, #212	; 0xd4
1000cf54:	801a      	strh	r2, [r3, #0]
1000cf56:	1c23      	adds	r3, r4, #0
1000cf58:	33d6      	adds	r3, #214	; 0xd6
1000cf5a:	701d      	strb	r5, [r3, #0]
1000cf5c:	1c20      	adds	r0, r4, #0
1000cf5e:	4b23      	ldr	r3, [pc, #140]	; (1000cfec <at_ble_init+0x1b0>)
1000cf60:	76e5      	strb	r5, [r4, #27]
1000cf62:	7725      	strb	r5, [r4, #28]
1000cf64:	7765      	strb	r5, [r4, #29]
1000cf66:	77a5      	strb	r5, [r4, #30]
1000cf68:	77e5      	strb	r5, [r4, #31]
1000cf6a:	8425      	strh	r5, [r4, #32]
1000cf6c:	8465      	strh	r5, [r4, #34]	; 0x22
1000cf6e:	4798      	blx	r3
1000cf70:	1c23      	adds	r3, r4, #0
1000cf72:	2207      	movs	r2, #7
1000cf74:	3374      	adds	r3, #116	; 0x74
1000cf76:	701a      	strb	r2, [r3, #0]
1000cf78:	1c23      	adds	r3, r4, #0
1000cf7a:	3204      	adds	r2, #4
1000cf7c:	33aa      	adds	r3, #170	; 0xaa
1000cf7e:	801a      	strh	r2, [r3, #0]
1000cf80:	1c2b      	adds	r3, r5, #0
1000cf82:	5d7a      	ldrb	r2, [r7, r5]
1000cf84:	33ac      	adds	r3, #172	; 0xac
1000cf86:	3501      	adds	r5, #1
1000cf88:	54e2      	strb	r2, [r4, r3]
1000cf8a:	2d0b      	cmp	r5, #11
1000cf8c:	d1f8      	bne.n	1000cf80 <at_ble_init+0x144>
1000cf8e:	1c30      	adds	r0, r6, #0
1000cf90:	b007      	add	sp, #28
1000cf92:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000cf94:	10012998 	.word	0x10012998
1000cf98:	10010423 	.word	0x10010423
1000cf9c:	100152c4 	.word	0x100152c4
1000cfa0:	10014610 	.word	0x10014610
1000cfa4:	10014570 	.word	0x10014570
1000cfa8:	10012ad4 	.word	0x10012ad4
1000cfac:	1000f19d 	.word	0x1000f19d
1000cfb0:	1000d235 	.word	0x1000d235
1000cfb4:	1000d381 	.word	0x1000d381
1000cfb8:	1000d5a1 	.word	0x1000d5a1
1000cfbc:	1000d3bd 	.word	0x1000d3bd
1000cfc0:	1000bcf5 	.word	0x1000bcf5
1000cfc4:	1000d8a1 	.word	0x1000d8a1
1000cfc8:	1000bf39 	.word	0x1000bf39
1000cfcc:	1000d949 	.word	0x1000d949
1000cfd0:	1000c529 	.word	0x1000c529
1000cfd4:	1000c5e5 	.word	0x1000c5e5
1000cfd8:	1000e511 	.word	0x1000e511
1000cfdc:	100152c6 	.word	0x100152c6
1000cfe0:	10015356 	.word	0x10015356
1000cfe4:	00003a98 	.word	0x00003a98
1000cfe8:	10015361 	.word	0x10015361
1000cfec:	1000cdad 	.word	0x1000cdad

1000cff0 <at_ble_addr_set>:
1000cff0:	b538      	push	{r3, r4, r5, lr}
1000cff2:	1c45      	adds	r5, r0, #1
1000cff4:	1c03      	adds	r3, r0, #0
1000cff6:	20cf      	movs	r0, #207	; 0xcf
1000cff8:	2d00      	cmp	r5, #0
1000cffa:	d018      	beq.n	1000d02e <at_ble_addr_set+0x3e>
1000cffc:	781a      	ldrb	r2, [r3, #0]
1000cffe:	2a03      	cmp	r2, #3
1000d000:	d815      	bhi.n	1000d02e <at_ble_addr_set+0x3e>
1000d002:	2a01      	cmp	r2, #1
1000d004:	d102      	bne.n	1000d00c <at_ble_addr_set+0x1c>
1000d006:	785a      	ldrb	r2, [r3, #1]
1000d008:	2a00      	cmp	r2, #0
1000d00a:	d010      	beq.n	1000d02e <at_ble_addr_set+0x3e>
1000d00c:	1c1c      	adds	r4, r3, #0
1000d00e:	1c29      	adds	r1, r5, #0
1000d010:	2206      	movs	r2, #6
1000d012:	4b07      	ldr	r3, [pc, #28]	; (1000d030 <at_ble_addr_set+0x40>)
1000d014:	4807      	ldr	r0, [pc, #28]	; (1000d034 <at_ble_addr_set+0x44>)
1000d016:	4798      	blx	r3
1000d018:	7823      	ldrb	r3, [r4, #0]
1000d01a:	4807      	ldr	r0, [pc, #28]	; (1000d038 <at_ble_addr_set+0x48>)
1000d01c:	7103      	strb	r3, [r0, #4]
1000d01e:	4b07      	ldr	r3, [pc, #28]	; (1000d03c <at_ble_addr_set+0x4c>)
1000d020:	4798      	blx	r3
1000d022:	7823      	ldrb	r3, [r4, #0]
1000d024:	2b00      	cmp	r3, #0
1000d026:	d102      	bne.n	1000d02e <at_ble_addr_set+0x3e>
1000d028:	1c28      	adds	r0, r5, #0
1000d02a:	4b05      	ldr	r3, [pc, #20]	; (1000d040 <at_ble_addr_set+0x50>)
1000d02c:	4798      	blx	r3
1000d02e:	bd38      	pop	{r3, r4, r5, pc}
1000d030:	10010423 	.word	0x10010423
1000d034:	1001535b 	.word	0x1001535b
1000d038:	10015356 	.word	0x10015356
1000d03c:	1000cdad 	.word	0x1000cdad
1000d040:	1000d9cd 	.word	0x1000d9cd

1000d044 <at_ble_scan_start>:
1000d044:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d046:	b08d      	sub	sp, #52	; 0x34
1000d048:	1c06      	adds	r6, r0, #0
1000d04a:	a812      	add	r0, sp, #72	; 0x48
1000d04c:	7807      	ldrb	r7, [r0, #0]
1000d04e:	a813      	add	r0, sp, #76	; 0x4c
1000d050:	7800      	ldrb	r0, [r0, #0]
1000d052:	9007      	str	r0, [sp, #28]
1000d054:	a814      	add	r0, sp, #80	; 0x50
1000d056:	7800      	ldrb	r0, [r0, #0]
1000d058:	9008      	str	r0, [sp, #32]
1000d05a:	20cf      	movs	r0, #207	; 0xcf
1000d05c:	2f02      	cmp	r7, #2
1000d05e:	d82e      	bhi.n	1000d0be <at_ble_scan_start+0x7a>
1000d060:	42b1      	cmp	r1, r6
1000d062:	d82c      	bhi.n	1000d0be <at_ble_scan_start+0x7a>
1000d064:	2b01      	cmp	r3, #1
1000d066:	d82a      	bhi.n	1000d0be <at_ble_scan_start+0x7a>
1000d068:	1f0c      	subs	r4, r1, #4
1000d06a:	4d16      	ldr	r5, [pc, #88]	; (1000d0c4 <at_ble_scan_start+0x80>)
1000d06c:	b2a4      	uxth	r4, r4
1000d06e:	42ac      	cmp	r4, r5
1000d070:	d825      	bhi.n	1000d0be <at_ble_scan_start+0x7a>
1000d072:	1f34      	subs	r4, r6, #4
1000d074:	b2a4      	uxth	r4, r4
1000d076:	42ac      	cmp	r4, r5
1000d078:	d821      	bhi.n	1000d0be <at_ble_scan_start+0x7a>
1000d07a:	9c07      	ldr	r4, [sp, #28]
1000d07c:	2c00      	cmp	r4, #0
1000d07e:	d001      	beq.n	1000d084 <at_ble_scan_start+0x40>
1000d080:	2f02      	cmp	r7, #2
1000d082:	d11c      	bne.n	1000d0be <at_ble_scan_start+0x7a>
1000d084:	1c1c      	adds	r4, r3, #0
1000d086:	4b10      	ldr	r3, [pc, #64]	; (1000d0c8 <at_ble_scan_start+0x84>)
1000d088:	1c0d      	adds	r5, r1, #0
1000d08a:	9209      	str	r2, [sp, #36]	; 0x24
1000d08c:	4798      	blx	r3
1000d08e:	4b0f      	ldr	r3, [pc, #60]	; (1000d0cc <at_ble_scan_start+0x88>)
1000d090:	1c01      	adds	r1, r0, #0
1000d092:	885a      	ldrh	r2, [r3, #2]
1000d094:	9b07      	ldr	r3, [sp, #28]
1000d096:	4260      	negs	r0, r4
1000d098:	4160      	adcs	r0, r4
1000d09a:	9303      	str	r3, [sp, #12]
1000d09c:	9b08      	ldr	r3, [sp, #32]
1000d09e:	9702      	str	r7, [sp, #8]
1000d0a0:	9304      	str	r3, [sp, #16]
1000d0a2:	2364      	movs	r3, #100	; 0x64
1000d0a4:	9f09      	ldr	r7, [sp, #36]	; 0x24
1000d0a6:	ac04      	add	r4, sp, #16
1000d0a8:	435f      	muls	r7, r3
1000d0aa:	3b4b      	subs	r3, #75	; 0x4b
1000d0ac:	b2bf      	uxth	r7, r7
1000d0ae:	3011      	adds	r0, #17
1000d0b0:	191b      	adds	r3, r3, r4
1000d0b2:	9600      	str	r6, [sp, #0]
1000d0b4:	9501      	str	r5, [sp, #4]
1000d0b6:	9705      	str	r7, [sp, #20]
1000d0b8:	4c05      	ldr	r4, [pc, #20]	; (1000d0d0 <at_ble_scan_start+0x8c>)
1000d0ba:	47a0      	blx	r4
1000d0bc:	2000      	movs	r0, #0
1000d0be:	b00d      	add	sp, #52	; 0x34
1000d0c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d0c2:	46c0      	nop			; (mov r8, r8)
1000d0c4:	00003ffc 	.word	0x00003ffc
1000d0c8:	1000e93d 	.word	0x1000e93d
1000d0cc:	10015356 	.word	0x10015356
1000d0d0:	1000e955 	.word	0x1000e955

1000d0d4 <at_ble_scan_stop>:
1000d0d4:	b510      	push	{r4, lr}
1000d0d6:	4b05      	ldr	r3, [pc, #20]	; (1000d0ec <at_ble_scan_stop+0x18>)
1000d0d8:	4798      	blx	r3
1000d0da:	1e04      	subs	r4, r0, #0
1000d0dc:	d103      	bne.n	1000d0e6 <at_ble_scan_stop+0x12>
1000d0de:	20d1      	movs	r0, #209	; 0xd1
1000d0e0:	4b03      	ldr	r3, [pc, #12]	; (1000d0f0 <at_ble_scan_stop+0x1c>)
1000d0e2:	0100      	lsls	r0, r0, #4
1000d0e4:	4798      	blx	r3
1000d0e6:	1c20      	adds	r0, r4, #0
1000d0e8:	bd10      	pop	{r4, pc}
1000d0ea:	46c0      	nop			; (mov r8, r8)
1000d0ec:	1000e769 	.word	0x1000e769
1000d0f0:	1000ccbd 	.word	0x1000ccbd

1000d0f4 <at_ble_connect>:
1000d0f4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d0f6:	b091      	sub	sp, #68	; 0x44
1000d0f8:	930d      	str	r3, [sp, #52]	; 0x34
1000d0fa:	4b2d      	ldr	r3, [pc, #180]	; (1000d1b0 <at_ble_connect+0xbc>)
1000d0fc:	900a      	str	r0, [sp, #40]	; 0x28
1000d0fe:	910b      	str	r1, [sp, #44]	; 0x2c
1000d100:	920c      	str	r2, [sp, #48]	; 0x30
1000d102:	9c16      	ldr	r4, [sp, #88]	; 0x58
1000d104:	4798      	blx	r3
1000d106:	254b      	movs	r5, #75	; 0x4b
1000d108:	2807      	cmp	r0, #7
1000d10a:	d84d      	bhi.n	1000d1a8 <at_ble_connect+0xb4>
1000d10c:	8863      	ldrh	r3, [r4, #2]
1000d10e:	4a29      	ldr	r2, [pc, #164]	; (1000d1b4 <at_ble_connect+0xc0>)
1000d110:	3b06      	subs	r3, #6
1000d112:	b29b      	uxth	r3, r3
1000d114:	3584      	adds	r5, #132	; 0x84
1000d116:	4293      	cmp	r3, r2
1000d118:	d846      	bhi.n	1000d1a8 <at_ble_connect+0xb4>
1000d11a:	8823      	ldrh	r3, [r4, #0]
1000d11c:	3b06      	subs	r3, #6
1000d11e:	b29b      	uxth	r3, r3
1000d120:	4293      	cmp	r3, r2
1000d122:	d841      	bhi.n	1000d1a8 <at_ble_connect+0xb4>
1000d124:	88e3      	ldrh	r3, [r4, #6]
1000d126:	4a24      	ldr	r2, [pc, #144]	; (1000d1b8 <at_ble_connect+0xc4>)
1000d128:	3b0a      	subs	r3, #10
1000d12a:	b29b      	uxth	r3, r3
1000d12c:	4293      	cmp	r3, r2
1000d12e:	d83b      	bhi.n	1000d1a8 <at_ble_connect+0xb4>
1000d130:	23f4      	movs	r3, #244	; 0xf4
1000d132:	88a2      	ldrh	r2, [r4, #4]
1000d134:	33ff      	adds	r3, #255	; 0xff
1000d136:	429a      	cmp	r2, r3
1000d138:	d836      	bhi.n	1000d1a8 <at_ble_connect+0xb4>
1000d13a:	af0e      	add	r7, sp, #56	; 0x38
1000d13c:	4b1f      	ldr	r3, [pc, #124]	; (1000d1bc <at_ble_connect+0xc8>)
1000d13e:	2001      	movs	r0, #1
1000d140:	1c39      	adds	r1, r7, #0
1000d142:	4798      	blx	r3
1000d144:	4e1e      	ldr	r6, [pc, #120]	; (1000d1c0 <at_ble_connect+0xcc>)
1000d146:	1c05      	adds	r5, r0, #0
1000d148:	7933      	ldrb	r3, [r6, #4]
1000d14a:	703b      	strb	r3, [r7, #0]
1000d14c:	2800      	cmp	r0, #0
1000d14e:	d12a      	bne.n	1000d1a6 <at_ble_connect+0xb2>
1000d150:	4b1c      	ldr	r3, [pc, #112]	; (1000d1c4 <at_ble_connect+0xd0>)
1000d152:	4798      	blx	r3
1000d154:	3675      	adds	r6, #117	; 0x75
1000d156:	7833      	ldrb	r3, [r6, #0]
1000d158:	1c01      	adds	r1, r0, #0
1000d15a:	3b01      	subs	r3, #1
1000d15c:	2b01      	cmp	r3, #1
1000d15e:	d901      	bls.n	1000d164 <at_ble_connect+0x70>
1000d160:	2302      	movs	r3, #2
1000d162:	7033      	strb	r3, [r6, #0]
1000d164:	4b16      	ldr	r3, [pc, #88]	; (1000d1c0 <at_ble_connect+0xcc>)
1000d166:	1c1a      	adds	r2, r3, #0
1000d168:	3275      	adds	r2, #117	; 0x75
1000d16a:	7810      	ldrb	r0, [r2, #0]
1000d16c:	885a      	ldrh	r2, [r3, #2]
1000d16e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1000d170:	3012      	adds	r0, #18
1000d172:	9300      	str	r3, [sp, #0]
1000d174:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000d176:	b2c0      	uxtb	r0, r0
1000d178:	9301      	str	r3, [sp, #4]
1000d17a:	8823      	ldrh	r3, [r4, #0]
1000d17c:	9302      	str	r3, [sp, #8]
1000d17e:	8863      	ldrh	r3, [r4, #2]
1000d180:	9303      	str	r3, [sp, #12]
1000d182:	88a3      	ldrh	r3, [r4, #4]
1000d184:	9304      	str	r3, [sp, #16]
1000d186:	88e3      	ldrh	r3, [r4, #6]
1000d188:	9305      	str	r3, [sp, #20]
1000d18a:	8923      	ldrh	r3, [r4, #8]
1000d18c:	9306      	str	r3, [sp, #24]
1000d18e:	8963      	ldrh	r3, [r4, #10]
1000d190:	ac04      	add	r4, sp, #16
1000d192:	9307      	str	r3, [sp, #28]
1000d194:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1000d196:	9308      	str	r3, [sp, #32]
1000d198:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1000d19a:	9309      	str	r3, [sp, #36]	; 0x24
1000d19c:	2329      	movs	r3, #41	; 0x29
1000d19e:	191b      	adds	r3, r3, r4
1000d1a0:	4c09      	ldr	r4, [pc, #36]	; (1000d1c8 <at_ble_connect+0xd4>)
1000d1a2:	47a0      	blx	r4
1000d1a4:	e000      	b.n	1000d1a8 <at_ble_connect+0xb4>
1000d1a6:	25e2      	movs	r5, #226	; 0xe2
1000d1a8:	1c28      	adds	r0, r5, #0
1000d1aa:	b011      	add	sp, #68	; 0x44
1000d1ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d1ae:	46c0      	nop			; (mov r8, r8)
1000d1b0:	1000db45 	.word	0x1000db45
1000d1b4:	00000c7a 	.word	0x00000c7a
1000d1b8:	00000c76 	.word	0x00000c76
1000d1bc:	1000e689 	.word	0x1000e689
1000d1c0:	10015356 	.word	0x10015356
1000d1c4:	1000e93d 	.word	0x1000e93d
1000d1c8:	1000ea75 	.word	0x1000ea75

1000d1cc <at_ble_disconnect>:
1000d1cc:	b538      	push	{r3, r4, r5, lr}
1000d1ce:	1c04      	adds	r4, r0, #0
1000d1d0:	4b04      	ldr	r3, [pc, #16]	; (1000d1e4 <at_ble_disconnect+0x18>)
1000d1d2:	1c08      	adds	r0, r1, #0
1000d1d4:	1c21      	adds	r1, r4, #0
1000d1d6:	4798      	blx	r3
1000d1d8:	1c05      	adds	r5, r0, #0
1000d1da:	4b03      	ldr	r3, [pc, #12]	; (1000d1e8 <at_ble_disconnect+0x1c>)
1000d1dc:	1c20      	adds	r0, r4, #0
1000d1de:	4798      	blx	r3
1000d1e0:	1c28      	adds	r0, r5, #0
1000d1e2:	bd38      	pop	{r3, r4, r5, pc}
1000d1e4:	1000dde1 	.word	0x1000dde1
1000d1e8:	1000cd01 	.word	0x1000cd01

1000d1ec <at_ble_conn_update_reply>:
1000d1ec:	b510      	push	{r4, lr}
1000d1ee:	4c01      	ldr	r4, [pc, #4]	; (1000d1f4 <at_ble_conn_update_reply+0x8>)
1000d1f0:	47a0      	blx	r4
1000d1f2:	bd10      	pop	{r4, pc}
1000d1f4:	1000e2d1 	.word	0x1000e2d1

1000d1f8 <at_ble_random_address_resolve>:
1000d1f8:	b510      	push	{r4, lr}
1000d1fa:	23cf      	movs	r3, #207	; 0xcf
1000d1fc:	2800      	cmp	r0, #0
1000d1fe:	d00a      	beq.n	1000d216 <at_ble_random_address_resolve+0x1e>
1000d200:	2900      	cmp	r1, #0
1000d202:	d008      	beq.n	1000d216 <at_ble_random_address_resolve+0x1e>
1000d204:	2a00      	cmp	r2, #0
1000d206:	d006      	beq.n	1000d216 <at_ble_random_address_resolve+0x1e>
1000d208:	780c      	ldrb	r4, [r1, #0]
1000d20a:	2c02      	cmp	r4, #2
1000d20c:	d103      	bne.n	1000d216 <at_ble_random_address_resolve+0x1e>
1000d20e:	4b03      	ldr	r3, [pc, #12]	; (1000d21c <at_ble_random_address_resolve+0x24>)
1000d210:	3101      	adds	r1, #1
1000d212:	4798      	blx	r3
1000d214:	2300      	movs	r3, #0
1000d216:	1c18      	adds	r0, r3, #0
1000d218:	bd10      	pop	{r4, pc}
1000d21a:	46c0      	nop			; (mov r8, r8)
1000d21c:	1000eb91 	.word	0x1000eb91

1000d220 <at_ble_uuid_len2type>:
1000d220:	1e83      	subs	r3, r0, #2
1000d222:	b2db      	uxtb	r3, r3
1000d224:	2003      	movs	r0, #3
1000d226:	2b0e      	cmp	r3, #14
1000d228:	d801      	bhi.n	1000d22e <at_ble_uuid_len2type+0xe>
1000d22a:	4a01      	ldr	r2, [pc, #4]	; (1000d230 <at_ble_uuid_len2type+0x10>)
1000d22c:	5cd0      	ldrb	r0, [r2, r3]
1000d22e:	4770      	bx	lr
1000d230:	100129a3 	.word	0x100129a3

1000d234 <init_gatt_client_module>:
1000d234:	2200      	movs	r2, #0
1000d236:	4b01      	ldr	r3, [pc, #4]	; (1000d23c <init_gatt_client_module+0x8>)
1000d238:	801a      	strh	r2, [r3, #0]
1000d23a:	4770      	bx	lr
1000d23c:	10014568 	.word	0x10014568

1000d240 <at_ble_primary_service_discover_all>:
1000d240:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000d242:	24cf      	movs	r4, #207	; 0xcf
1000d244:	2900      	cmp	r1, #0
1000d246:	d00a      	beq.n	1000d25e <at_ble_primary_service_discover_all+0x1e>
1000d248:	428a      	cmp	r2, r1
1000d24a:	d308      	bcc.n	1000d25e <at_ble_primary_service_discover_all+0x1e>
1000d24c:	2400      	movs	r4, #0
1000d24e:	1c13      	adds	r3, r2, #0
1000d250:	9001      	str	r0, [sp, #4]
1000d252:	1c0a      	adds	r2, r1, #0
1000d254:	9400      	str	r4, [sp, #0]
1000d256:	2002      	movs	r0, #2
1000d258:	1c21      	adds	r1, r4, #0
1000d25a:	4d02      	ldr	r5, [pc, #8]	; (1000d264 <at_ble_primary_service_discover_all+0x24>)
1000d25c:	47a8      	blx	r5
1000d25e:	1c20      	adds	r0, r4, #0
1000d260:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000d262:	46c0      	nop			; (mov r8, r8)
1000d264:	1000ed85 	.word	0x1000ed85

1000d268 <at_ble_characteristic_discover_all>:
1000d268:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000d26a:	24cf      	movs	r4, #207	; 0xcf
1000d26c:	2900      	cmp	r1, #0
1000d26e:	d00a      	beq.n	1000d286 <at_ble_characteristic_discover_all+0x1e>
1000d270:	428a      	cmp	r2, r1
1000d272:	d308      	bcc.n	1000d286 <at_ble_characteristic_discover_all+0x1e>
1000d274:	2400      	movs	r4, #0
1000d276:	1c13      	adds	r3, r2, #0
1000d278:	9001      	str	r0, [sp, #4]
1000d27a:	1c0a      	adds	r2, r1, #0
1000d27c:	9400      	str	r4, [sp, #0]
1000d27e:	2005      	movs	r0, #5
1000d280:	1c21      	adds	r1, r4, #0
1000d282:	4d02      	ldr	r5, [pc, #8]	; (1000d28c <at_ble_characteristic_discover_all+0x24>)
1000d284:	47a8      	blx	r5
1000d286:	1c20      	adds	r0, r4, #0
1000d288:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000d28a:	46c0      	nop			; (mov r8, r8)
1000d28c:	1000ed85 	.word	0x1000ed85

1000d290 <at_ble_characteristic_write>:
1000d290:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d292:	b085      	sub	sp, #20
1000d294:	1c14      	adds	r4, r2, #0
1000d296:	aa0a      	add	r2, sp, #40	; 0x28
1000d298:	1c0d      	adds	r5, r1, #0
1000d29a:	ca02      	ldmia	r2!, {r1}
1000d29c:	1c06      	adds	r6, r0, #0
1000d29e:	a80c      	add	r0, sp, #48	; 0x30
1000d2a0:	7807      	ldrb	r7, [r0, #0]
1000d2a2:	7812      	ldrb	r2, [r2, #0]
1000d2a4:	20cf      	movs	r0, #207	; 0xcf
1000d2a6:	2900      	cmp	r1, #0
1000d2a8:	d014      	beq.n	1000d2d4 <at_ble_characteristic_write+0x44>
1000d2aa:	2b00      	cmp	r3, #0
1000d2ac:	d012      	beq.n	1000d2d4 <at_ble_characteristic_write+0x44>
1000d2ae:	2f00      	cmp	r7, #0
1000d2b0:	d003      	beq.n	1000d2ba <at_ble_characteristic_write+0x2a>
1000d2b2:	2a00      	cmp	r2, #0
1000d2b4:	d10e      	bne.n	1000d2d4 <at_ble_characteristic_write+0x44>
1000d2b6:	38c3      	subs	r0, #195	; 0xc3
1000d2b8:	e003      	b.n	1000d2c2 <at_ble_characteristic_write+0x32>
1000d2ba:	1e50      	subs	r0, r2, #1
1000d2bc:	4182      	sbcs	r2, r0
1000d2be:	320d      	adds	r2, #13
1000d2c0:	1c10      	adds	r0, r2, #0
1000d2c2:	9300      	str	r3, [sp, #0]
1000d2c4:	9101      	str	r1, [sp, #4]
1000d2c6:	1c23      	adds	r3, r4, #0
1000d2c8:	9602      	str	r6, [sp, #8]
1000d2ca:	2101      	movs	r1, #1
1000d2cc:	1c2a      	adds	r2, r5, #0
1000d2ce:	4c02      	ldr	r4, [pc, #8]	; (1000d2d8 <at_ble_characteristic_write+0x48>)
1000d2d0:	47a0      	blx	r4
1000d2d2:	2000      	movs	r0, #0
1000d2d4:	b005      	add	sp, #20
1000d2d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d2d8:	1000ee15 	.word	0x1000ee15

1000d2dc <at_ble_characteristic_read>:
1000d2dc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d2de:	1c0f      	adds	r7, r1, #0
1000d2e0:	1c16      	adds	r6, r2, #0
1000d2e2:	2500      	movs	r5, #0
1000d2e4:	4c08      	ldr	r4, [pc, #32]	; (1000d308 <at_ble_characteristic_read+0x2c>)
1000d2e6:	b085      	sub	sp, #20
1000d2e8:	8821      	ldrh	r1, [r4, #0]
1000d2ea:	1c3a      	adds	r2, r7, #0
1000d2ec:	9300      	str	r3, [sp, #0]
1000d2ee:	9002      	str	r0, [sp, #8]
1000d2f0:	1c33      	adds	r3, r6, #0
1000d2f2:	9501      	str	r5, [sp, #4]
1000d2f4:	2008      	movs	r0, #8
1000d2f6:	4e05      	ldr	r6, [pc, #20]	; (1000d30c <at_ble_characteristic_read+0x30>)
1000d2f8:	47b0      	blx	r6
1000d2fa:	1c28      	adds	r0, r5, #0
1000d2fc:	8823      	ldrh	r3, [r4, #0]
1000d2fe:	3301      	adds	r3, #1
1000d300:	8023      	strh	r3, [r4, #0]
1000d302:	b005      	add	sp, #20
1000d304:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d306:	46c0      	nop			; (mov r8, r8)
1000d308:	10014568 	.word	0x10014568
1000d30c:	1000eedd 	.word	0x1000eedd

1000d310 <db_searchATT>:
1000d310:	b570      	push	{r4, r5, r6, lr}
1000d312:	1c05      	adds	r5, r0, #0
1000d314:	2400      	movs	r4, #0
1000d316:	4b0c      	ldr	r3, [pc, #48]	; (1000d348 <db_searchATT+0x38>)
1000d318:	6819      	ldr	r1, [r3, #0]
1000d31a:	4b0c      	ldr	r3, [pc, #48]	; (1000d34c <db_searchATT+0x3c>)
1000d31c:	681e      	ldr	r6, [r3, #0]
1000d31e:	428c      	cmp	r4, r1
1000d320:	dc10      	bgt.n	1000d344 <db_searchATT+0x34>
1000d322:	200c      	movs	r0, #12
1000d324:	1863      	adds	r3, r4, r1
1000d326:	0fda      	lsrs	r2, r3, #31
1000d328:	18d3      	adds	r3, r2, r3
1000d32a:	1c02      	adds	r2, r0, #0
1000d32c:	105b      	asrs	r3, r3, #1
1000d32e:	435a      	muls	r2, r3
1000d330:	18b0      	adds	r0, r6, r2
1000d332:	8802      	ldrh	r2, [r0, #0]
1000d334:	42aa      	cmp	r2, r5
1000d336:	d201      	bcs.n	1000d33c <db_searchATT+0x2c>
1000d338:	1e59      	subs	r1, r3, #1
1000d33a:	e7f0      	b.n	1000d31e <db_searchATT+0xe>
1000d33c:	42aa      	cmp	r2, r5
1000d33e:	d902      	bls.n	1000d346 <db_searchATT+0x36>
1000d340:	1c5c      	adds	r4, r3, #1
1000d342:	e7ec      	b.n	1000d31e <db_searchATT+0xe>
1000d344:	2000      	movs	r0, #0
1000d346:	bd70      	pop	{r4, r5, r6, pc}
1000d348:	1001457c 	.word	0x1001457c
1000d34c:	10014574 	.word	0x10014574

1000d350 <at_ble_read_authorize_reply.part.1>:
1000d350:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000d352:	4b09      	ldr	r3, [pc, #36]	; (1000d378 <at_ble_read_authorize_reply.part.1+0x28>)
1000d354:	1c05      	adds	r5, r0, #0
1000d356:	1c08      	adds	r0, r1, #0
1000d358:	1c0c      	adds	r4, r1, #0
1000d35a:	4798      	blx	r3
1000d35c:	2800      	cmp	r0, #0
1000d35e:	d009      	beq.n	1000d374 <at_ble_read_authorize_reply.part.1+0x24>
1000d360:	6882      	ldr	r2, [r0, #8]
1000d362:	2a00      	cmp	r2, #0
1000d364:	d006      	beq.n	1000d374 <at_ble_read_authorize_reply.part.1+0x24>
1000d366:	8883      	ldrh	r3, [r0, #4]
1000d368:	1c29      	adds	r1, r5, #0
1000d36a:	9200      	str	r2, [sp, #0]
1000d36c:	1c20      	adds	r0, r4, #0
1000d36e:	2200      	movs	r2, #0
1000d370:	4c02      	ldr	r4, [pc, #8]	; (1000d37c <at_ble_read_authorize_reply.part.1+0x2c>)
1000d372:	47a0      	blx	r4
1000d374:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000d376:	46c0      	nop			; (mov r8, r8)
1000d378:	1000d311 	.word	0x1000d311
1000d37c:	1000ec8d 	.word	0x1000ec8d

1000d380 <initi_gatt_server_module>:
1000d380:	2300      	movs	r3, #0
1000d382:	4a07      	ldr	r2, [pc, #28]	; (1000d3a0 <initi_gatt_server_module+0x20>)
1000d384:	7013      	strb	r3, [r2, #0]
1000d386:	4a07      	ldr	r2, [pc, #28]	; (1000d3a4 <initi_gatt_server_module+0x24>)
1000d388:	6013      	str	r3, [r2, #0]
1000d38a:	4a07      	ldr	r2, [pc, #28]	; (1000d3a8 <initi_gatt_server_module+0x28>)
1000d38c:	6013      	str	r3, [r2, #0]
1000d38e:	4a07      	ldr	r2, [pc, #28]	; (1000d3ac <initi_gatt_server_module+0x2c>)
1000d390:	6013      	str	r3, [r2, #0]
1000d392:	4a07      	ldr	r2, [pc, #28]	; (1000d3b0 <initi_gatt_server_module+0x30>)
1000d394:	6013      	str	r3, [r2, #0]
1000d396:	4a07      	ldr	r2, [pc, #28]	; (1000d3b4 <initi_gatt_server_module+0x34>)
1000d398:	6013      	str	r3, [r2, #0]
1000d39a:	4a07      	ldr	r2, [pc, #28]	; (1000d3b8 <initi_gatt_server_module+0x38>)
1000d39c:	6013      	str	r3, [r2, #0]
1000d39e:	4770      	bx	lr
1000d3a0:	10014570 	.word	0x10014570
1000d3a4:	10014580 	.word	0x10014580
1000d3a8:	1001457c 	.word	0x1001457c
1000d3ac:	1001456c 	.word	0x1001456c
1000d3b0:	10014578 	.word	0x10014578
1000d3b4:	10014574 	.word	0x10014574
1000d3b8:	10014584 	.word	0x10014584

1000d3bc <db_init>:
1000d3bc:	4b0a      	ldr	r3, [pc, #40]	; (1000d3e8 <db_init+0x2c>)
1000d3be:	4a0b      	ldr	r2, [pc, #44]	; (1000d3ec <db_init+0x30>)
1000d3c0:	6018      	str	r0, [r3, #0]
1000d3c2:	084b      	lsrs	r3, r1, #1
1000d3c4:	6013      	str	r3, [r2, #0]
1000d3c6:	4a0a      	ldr	r2, [pc, #40]	; (1000d3f0 <db_init+0x34>)
1000d3c8:	18c3      	adds	r3, r0, r3
1000d3ca:	6013      	str	r3, [r2, #0]
1000d3cc:	4a09      	ldr	r2, [pc, #36]	; (1000d3f4 <db_init+0x38>)
1000d3ce:	1841      	adds	r1, r0, r1
1000d3d0:	6013      	str	r3, [r2, #0]
1000d3d2:	2303      	movs	r3, #3
1000d3d4:	2200      	movs	r2, #0
1000d3d6:	3103      	adds	r1, #3
1000d3d8:	4399      	bics	r1, r3
1000d3da:	4b07      	ldr	r3, [pc, #28]	; (1000d3f8 <db_init+0x3c>)
1000d3dc:	3904      	subs	r1, #4
1000d3de:	6019      	str	r1, [r3, #0]
1000d3e0:	4b06      	ldr	r3, [pc, #24]	; (1000d3fc <db_init+0x40>)
1000d3e2:	601a      	str	r2, [r3, #0]
1000d3e4:	4770      	bx	lr
1000d3e6:	46c0      	nop			; (mov r8, r8)
1000d3e8:	10014584 	.word	0x10014584
1000d3ec:	10014580 	.word	0x10014580
1000d3f0:	1001456c 	.word	0x1001456c
1000d3f4:	10014578 	.word	0x10014578
1000d3f8:	10014574 	.word	0x10014574
1000d3fc:	1001457c 	.word	0x1001457c

1000d400 <at_ble_characteristic_value_set>:
1000d400:	b570      	push	{r4, r5, r6, lr}
1000d402:	4b0b      	ldr	r3, [pc, #44]	; (1000d430 <at_ble_characteristic_value_set+0x30>)
1000d404:	1c06      	adds	r6, r0, #0
1000d406:	1c0c      	adds	r4, r1, #0
1000d408:	1c15      	adds	r5, r2, #0
1000d40a:	4798      	blx	r3
1000d40c:	2800      	cmp	r0, #0
1000d40e:	d008      	beq.n	1000d422 <at_ble_characteristic_value_set+0x22>
1000d410:	6880      	ldr	r0, [r0, #8]
1000d412:	2800      	cmp	r0, #0
1000d414:	d005      	beq.n	1000d422 <at_ble_characteristic_value_set+0x22>
1000d416:	1c21      	adds	r1, r4, #0
1000d418:	1c2a      	adds	r2, r5, #0
1000d41a:	4b06      	ldr	r3, [pc, #24]	; (1000d434 <at_ble_characteristic_value_set+0x34>)
1000d41c:	4798      	blx	r3
1000d41e:	2000      	movs	r0, #0
1000d420:	e004      	b.n	1000d42c <at_ble_characteristic_value_set+0x2c>
1000d422:	1c30      	adds	r0, r6, #0
1000d424:	1c29      	adds	r1, r5, #0
1000d426:	1c22      	adds	r2, r4, #0
1000d428:	4b03      	ldr	r3, [pc, #12]	; (1000d438 <at_ble_characteristic_value_set+0x38>)
1000d42a:	4798      	blx	r3
1000d42c:	bd70      	pop	{r4, r5, r6, pc}
1000d42e:	46c0      	nop			; (mov r8, r8)
1000d430:	1000d311 	.word	0x1000d311
1000d434:	10010423 	.word	0x10010423
1000d438:	1000f1b1 	.word	0x1000f1b1

1000d43c <at_ble_characteristic_value_get>:
1000d43c:	b570      	push	{r4, r5, r6, lr}
1000d43e:	4b0c      	ldr	r3, [pc, #48]	; (1000d470 <at_ble_characteristic_value_get+0x34>)
1000d440:	1c06      	adds	r6, r0, #0
1000d442:	1c0c      	adds	r4, r1, #0
1000d444:	1c15      	adds	r5, r2, #0
1000d446:	4798      	blx	r3
1000d448:	2800      	cmp	r0, #0
1000d44a:	d00b      	beq.n	1000d464 <at_ble_characteristic_value_get+0x28>
1000d44c:	6883      	ldr	r3, [r0, #8]
1000d44e:	2b00      	cmp	r3, #0
1000d450:	d008      	beq.n	1000d464 <at_ble_characteristic_value_get+0x28>
1000d452:	8883      	ldrh	r3, [r0, #4]
1000d454:	802b      	strh	r3, [r5, #0]
1000d456:	8882      	ldrh	r2, [r0, #4]
1000d458:	6881      	ldr	r1, [r0, #8]
1000d45a:	4b06      	ldr	r3, [pc, #24]	; (1000d474 <at_ble_characteristic_value_get+0x38>)
1000d45c:	1c20      	adds	r0, r4, #0
1000d45e:	4798      	blx	r3
1000d460:	2000      	movs	r0, #0
1000d462:	e004      	b.n	1000d46e <at_ble_characteristic_value_get+0x32>
1000d464:	1c30      	adds	r0, r6, #0
1000d466:	1c29      	adds	r1, r5, #0
1000d468:	1c22      	adds	r2, r4, #0
1000d46a:	4b03      	ldr	r3, [pc, #12]	; (1000d478 <at_ble_characteristic_value_get+0x3c>)
1000d46c:	4798      	blx	r3
1000d46e:	bd70      	pop	{r4, r5, r6, pc}
1000d470:	1000d311 	.word	0x1000d311
1000d474:	10010423 	.word	0x10010423
1000d478:	1000f23d 	.word	0x1000f23d

1000d47c <at_ble_write_authorize_reply>:
1000d47c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d47e:	b085      	sub	sp, #20
1000d480:	1c04      	adds	r4, r0, #0
1000d482:	9101      	str	r1, [sp, #4]
1000d484:	2900      	cmp	r1, #0
1000d486:	d128      	bne.n	1000d4da <at_ble_write_authorize_reply+0x5e>
1000d488:	8843      	ldrh	r3, [r0, #2]
1000d48a:	1c27      	adds	r7, r4, #0
1000d48c:	9300      	str	r3, [sp, #0]
1000d48e:	1c18      	adds	r0, r3, #0
1000d490:	4b16      	ldr	r3, [pc, #88]	; (1000d4ec <at_ble_write_authorize_reply+0x70>)
1000d492:	4798      	blx	r3
1000d494:	3708      	adds	r7, #8
1000d496:	2800      	cmp	r0, #0
1000d498:	d009      	beq.n	1000d4ae <at_ble_write_authorize_reply+0x32>
1000d49a:	6880      	ldr	r0, [r0, #8]
1000d49c:	2800      	cmp	r0, #0
1000d49e:	d006      	beq.n	1000d4ae <at_ble_write_authorize_reply+0x32>
1000d4a0:	88a3      	ldrh	r3, [r4, #4]
1000d4a2:	88e2      	ldrh	r2, [r4, #6]
1000d4a4:	18c0      	adds	r0, r0, r3
1000d4a6:	1c39      	adds	r1, r7, #0
1000d4a8:	4b11      	ldr	r3, [pc, #68]	; (1000d4f0 <at_ble_write_authorize_reply+0x74>)
1000d4aa:	4798      	blx	r3
1000d4ac:	e015      	b.n	1000d4da <at_ble_write_authorize_reply+0x5e>
1000d4ae:	ab02      	add	r3, sp, #8
1000d4b0:	1d9e      	adds	r6, r3, #6
1000d4b2:	2300      	movs	r3, #0
1000d4b4:	4d0f      	ldr	r5, [pc, #60]	; (1000d4f4 <at_ble_write_authorize_reply+0x78>)
1000d4b6:	8033      	strh	r3, [r6, #0]
1000d4b8:	6829      	ldr	r1, [r5, #0]
1000d4ba:	1c32      	adds	r2, r6, #0
1000d4bc:	4b0e      	ldr	r3, [pc, #56]	; (1000d4f8 <at_ble_write_authorize_reply+0x7c>)
1000d4be:	9800      	ldr	r0, [sp, #0]
1000d4c0:	4798      	blx	r3
1000d4c2:	682b      	ldr	r3, [r5, #0]
1000d4c4:	88a0      	ldrh	r0, [r4, #4]
1000d4c6:	88e2      	ldrh	r2, [r4, #6]
1000d4c8:	1818      	adds	r0, r3, r0
1000d4ca:	1c39      	adds	r1, r7, #0
1000d4cc:	4b08      	ldr	r3, [pc, #32]	; (1000d4f0 <at_ble_write_authorize_reply+0x74>)
1000d4ce:	4798      	blx	r3
1000d4d0:	8860      	ldrh	r0, [r4, #2]
1000d4d2:	8832      	ldrh	r2, [r6, #0]
1000d4d4:	6829      	ldr	r1, [r5, #0]
1000d4d6:	4b09      	ldr	r3, [pc, #36]	; (1000d4fc <at_ble_write_authorize_reply+0x80>)
1000d4d8:	4798      	blx	r3
1000d4da:	8860      	ldrh	r0, [r4, #2]
1000d4dc:	8821      	ldrh	r1, [r4, #0]
1000d4de:	9a01      	ldr	r2, [sp, #4]
1000d4e0:	4b07      	ldr	r3, [pc, #28]	; (1000d500 <at_ble_write_authorize_reply+0x84>)
1000d4e2:	4798      	blx	r3
1000d4e4:	2000      	movs	r0, #0
1000d4e6:	b005      	add	sp, #20
1000d4e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d4ea:	46c0      	nop			; (mov r8, r8)
1000d4ec:	1000d311 	.word	0x1000d311
1000d4f0:	10010423 	.word	0x10010423
1000d4f4:	10012ad8 	.word	0x10012ad8
1000d4f8:	1000d43d 	.word	0x1000d43d
1000d4fc:	1000d401 	.word	0x1000d401
1000d500:	1000ecf9 	.word	0x1000ecf9

1000d504 <gatts_handle_read_req>:
1000d504:	b538      	push	{r3, r4, r5, lr}
1000d506:	1c0c      	adds	r4, r1, #0
1000d508:	4b07      	ldr	r3, [pc, #28]	; (1000d528 <gatts_handle_read_req+0x24>)
1000d50a:	4798      	blx	r3
1000d50c:	8865      	ldrh	r5, [r4, #2]
1000d50e:	4b07      	ldr	r3, [pc, #28]	; (1000d52c <gatts_handle_read_req+0x28>)
1000d510:	1c28      	adds	r0, r5, #0
1000d512:	4798      	blx	r3
1000d514:	7883      	ldrb	r3, [r0, #2]
1000d516:	2026      	movs	r0, #38	; 0x26
1000d518:	07db      	lsls	r3, r3, #31
1000d51a:	d404      	bmi.n	1000d526 <gatts_handle_read_req+0x22>
1000d51c:	8820      	ldrh	r0, [r4, #0]
1000d51e:	1c29      	adds	r1, r5, #0
1000d520:	4b03      	ldr	r3, [pc, #12]	; (1000d530 <gatts_handle_read_req+0x2c>)
1000d522:	4798      	blx	r3
1000d524:	203b      	movs	r0, #59	; 0x3b
1000d526:	bd38      	pop	{r3, r4, r5, pc}
1000d528:	1000ec3d 	.word	0x1000ec3d
1000d52c:	1000d311 	.word	0x1000d311
1000d530:	1000d351 	.word	0x1000d351

1000d534 <gatts_handle_att_info_req>:
1000d534:	b538      	push	{r3, r4, r5, lr}
1000d536:	1c0d      	adds	r5, r1, #0
1000d538:	4b0a      	ldr	r3, [pc, #40]	; (1000d564 <gatts_handle_att_info_req+0x30>)
1000d53a:	1c14      	adds	r4, r2, #0
1000d53c:	4798      	blx	r3
1000d53e:	882d      	ldrh	r5, [r5, #0]
1000d540:	4b09      	ldr	r3, [pc, #36]	; (1000d568 <gatts_handle_att_info_req+0x34>)
1000d542:	1c28      	adds	r0, r5, #0
1000d544:	4798      	blx	r3
1000d546:	0a22      	lsrs	r2, r4, #8
1000d548:	1c03      	adds	r3, r0, #0
1000d54a:	4c08      	ldr	r4, [pc, #32]	; (1000d56c <gatts_handle_att_info_req+0x38>)
1000d54c:	b291      	uxth	r1, r2
1000d54e:	2800      	cmp	r0, #0
1000d550:	d003      	beq.n	1000d55a <gatts_handle_att_info_req+0x26>
1000d552:	8882      	ldrh	r2, [r0, #4]
1000d554:	2300      	movs	r3, #0
1000d556:	1c28      	adds	r0, r5, #0
1000d558:	e001      	b.n	1000d55e <gatts_handle_att_info_req+0x2a>
1000d55a:	1c28      	adds	r0, r5, #0
1000d55c:	2201      	movs	r2, #1
1000d55e:	47a0      	blx	r4
1000d560:	203b      	movs	r0, #59	; 0x3b
1000d562:	bd38      	pop	{r3, r4, r5, pc}
1000d564:	1000ec81 	.word	0x1000ec81
1000d568:	1000d311 	.word	0x1000d311
1000d56c:	1000ed3d 	.word	0x1000ed3d

1000d570 <gatts_handle_write_req>:
1000d570:	b510      	push	{r4, lr}
1000d572:	1c14      	adds	r4, r2, #0
1000d574:	4b07      	ldr	r3, [pc, #28]	; (1000d594 <gatts_handle_write_req+0x24>)
1000d576:	4798      	blx	r3
1000d578:	4b07      	ldr	r3, [pc, #28]	; (1000d598 <gatts_handle_write_req+0x28>)
1000d57a:	8860      	ldrh	r0, [r4, #2]
1000d57c:	4798      	blx	r3
1000d57e:	2302      	movs	r3, #2
1000d580:	7881      	ldrb	r1, [r0, #2]
1000d582:	2022      	movs	r0, #34	; 0x22
1000d584:	4019      	ands	r1, r3
1000d586:	d103      	bne.n	1000d590 <gatts_handle_write_req+0x20>
1000d588:	1c20      	adds	r0, r4, #0
1000d58a:	4b04      	ldr	r3, [pc, #16]	; (1000d59c <gatts_handle_write_req+0x2c>)
1000d58c:	4798      	blx	r3
1000d58e:	201f      	movs	r0, #31
1000d590:	bd10      	pop	{r4, pc}
1000d592:	46c0      	nop			; (mov r8, r8)
1000d594:	1000ec49 	.word	0x1000ec49
1000d598:	1000d311 	.word	0x1000d311
1000d59c:	1000d47d 	.word	0x1000d47d

1000d5a0 <init_l2cc_task_module>:
1000d5a0:	220a      	movs	r2, #10
1000d5a2:	4b01      	ldr	r3, [pc, #4]	; (1000d5a8 <init_l2cc_task_module+0x8>)
1000d5a4:	701a      	strb	r2, [r3, #0]
1000d5a6:	4770      	bx	lr
1000d5a8:	10012ad4 	.word	0x10012ad4

1000d5ac <l2cc_data_send_rsp_handler>:
1000d5ac:	b510      	push	{r4, lr}
1000d5ae:	7802      	ldrb	r2, [r0, #0]
1000d5b0:	700a      	strb	r2, [r1, #0]
1000d5b2:	7883      	ldrb	r3, [r0, #2]
1000d5b4:	7844      	ldrb	r4, [r0, #1]
1000d5b6:	021b      	lsls	r3, r3, #8
1000d5b8:	4323      	orrs	r3, r4
1000d5ba:	804b      	strh	r3, [r1, #2]
1000d5bc:	7903      	ldrb	r3, [r0, #4]
1000d5be:	78c0      	ldrb	r0, [r0, #3]
1000d5c0:	021b      	lsls	r3, r3, #8
1000d5c2:	4303      	orrs	r3, r0
1000d5c4:	808b      	strh	r3, [r1, #4]
1000d5c6:	2a00      	cmp	r2, #0
1000d5c8:	d103      	bne.n	1000d5d2 <l2cc_data_send_rsp_handler+0x26>
1000d5ca:	4a02      	ldr	r2, [pc, #8]	; (1000d5d4 <l2cc_data_send_rsp_handler+0x28>)
1000d5cc:	7813      	ldrb	r3, [r2, #0]
1000d5ce:	3301      	adds	r3, #1
1000d5d0:	7013      	strb	r3, [r2, #0]
1000d5d2:	bd10      	pop	{r4, pc}
1000d5d4:	10012ad4 	.word	0x10012ad4

1000d5d8 <l2cc_data_received_handler>:
1000d5d8:	b508      	push	{r3, lr}
1000d5da:	1c03      	adds	r3, r0, #0
1000d5dc:	7842      	ldrb	r2, [r0, #1]
1000d5de:	7800      	ldrb	r0, [r0, #0]
1000d5e0:	0212      	lsls	r2, r2, #8
1000d5e2:	4302      	orrs	r2, r0
1000d5e4:	800a      	strh	r2, [r1, #0]
1000d5e6:	78da      	ldrb	r2, [r3, #3]
1000d5e8:	7898      	ldrb	r0, [r3, #2]
1000d5ea:	0212      	lsls	r2, r2, #8
1000d5ec:	4302      	orrs	r2, r0
1000d5ee:	804a      	strh	r2, [r1, #2]
1000d5f0:	795a      	ldrb	r2, [r3, #5]
1000d5f2:	7918      	ldrb	r0, [r3, #4]
1000d5f4:	0212      	lsls	r2, r2, #8
1000d5f6:	4302      	orrs	r2, r0
1000d5f8:	808a      	strh	r2, [r1, #4]
1000d5fa:	1d88      	adds	r0, r1, #6
1000d5fc:	1d99      	adds	r1, r3, #6
1000d5fe:	4b01      	ldr	r3, [pc, #4]	; (1000d604 <l2cc_data_received_handler+0x2c>)
1000d600:	4798      	blx	r3
1000d602:	bd08      	pop	{r3, pc}
1000d604:	10010423 	.word	0x10010423

1000d608 <at_ble_authenticate>:
1000d608:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d60a:	1c0c      	adds	r4, r1, #0
1000d60c:	211f      	movs	r1, #31
1000d60e:	b08b      	sub	sp, #44	; 0x2c
1000d610:	9307      	str	r3, [sp, #28]
1000d612:	ab02      	add	r3, sp, #8
1000d614:	18c9      	adds	r1, r1, r3
1000d616:	230f      	movs	r3, #15
1000d618:	700b      	strb	r3, [r1, #0]
1000d61a:	4b40      	ldr	r3, [pc, #256]	; (1000d71c <at_ble_authenticate+0x114>)
1000d61c:	1c05      	adds	r5, r0, #0
1000d61e:	1c16      	adds	r6, r2, #0
1000d620:	4798      	blx	r3
1000d622:	1c07      	adds	r7, r0, #0
1000d624:	2001      	movs	r0, #1
1000d626:	2f07      	cmp	r7, #7
1000d628:	d875      	bhi.n	1000d716 <at_ble_authenticate+0x10e>
1000d62a:	2c00      	cmp	r4, #0
1000d62c:	d113      	bne.n	1000d656 <at_ble_authenticate+0x4e>
1000d62e:	2312      	movs	r3, #18
1000d630:	435f      	muls	r7, r3
1000d632:	4b3b      	ldr	r3, [pc, #236]	; (1000d720 <at_ble_authenticate+0x118>)
1000d634:	5cfb      	ldrb	r3, [r7, r3]
1000d636:	4283      	cmp	r3, r0
1000d638:	d001      	beq.n	1000d63e <at_ble_authenticate+0x36>
1000d63a:	20cf      	movs	r0, #207	; 0xcf
1000d63c:	e06b      	b.n	1000d716 <at_ble_authenticate+0x10e>
1000d63e:	9504      	str	r5, [sp, #16]
1000d640:	9400      	str	r4, [sp, #0]
1000d642:	9401      	str	r4, [sp, #4]
1000d644:	9402      	str	r4, [sp, #8]
1000d646:	9403      	str	r4, [sp, #12]
1000d648:	1c20      	adds	r0, r4, #0
1000d64a:	1c21      	adds	r1, r4, #0
1000d64c:	1c22      	adds	r2, r4, #0
1000d64e:	1c23      	adds	r3, r4, #0
1000d650:	4d34      	ldr	r5, [pc, #208]	; (1000d724 <at_ble_authenticate+0x11c>)
1000d652:	47a8      	blx	r5
1000d654:	e05e      	b.n	1000d714 <at_ble_authenticate+0x10c>
1000d656:	7922      	ldrb	r2, [r4, #4]
1000d658:	2a06      	cmp	r2, #6
1000d65a:	d9ee      	bls.n	1000d63a <at_ble_authenticate+0x32>
1000d65c:	7963      	ldrb	r3, [r4, #5]
1000d65e:	2b10      	cmp	r3, #16
1000d660:	d8eb      	bhi.n	1000d63a <at_ble_authenticate+0x32>
1000d662:	429a      	cmp	r2, r3
1000d664:	d8e9      	bhi.n	1000d63a <at_ble_authenticate+0x32>
1000d666:	7a23      	ldrb	r3, [r4, #8]
1000d668:	2b04      	cmp	r3, #4
1000d66a:	d8e6      	bhi.n	1000d63a <at_ble_authenticate+0x32>
1000d66c:	79a3      	ldrb	r3, [r4, #6]
1000d66e:	2b07      	cmp	r3, #7
1000d670:	d8e3      	bhi.n	1000d63a <at_ble_authenticate+0x32>
1000d672:	79e3      	ldrb	r3, [r4, #7]
1000d674:	2b07      	cmp	r3, #7
1000d676:	d8e0      	bhi.n	1000d63a <at_ble_authenticate+0x32>
1000d678:	78a3      	ldrb	r3, [r4, #2]
1000d67a:	2b00      	cmp	r3, #0
1000d67c:	d006      	beq.n	1000d68c <at_ble_authenticate+0x84>
1000d67e:	2e00      	cmp	r6, #0
1000d680:	d0db      	beq.n	1000d63a <at_ble_authenticate+0x32>
1000d682:	4829      	ldr	r0, [pc, #164]	; (1000d728 <at_ble_authenticate+0x120>)
1000d684:	1c31      	adds	r1, r6, #0
1000d686:	221c      	movs	r2, #28
1000d688:	4b28      	ldr	r3, [pc, #160]	; (1000d72c <at_ble_authenticate+0x124>)
1000d68a:	4798      	blx	r3
1000d68c:	9b07      	ldr	r3, [sp, #28]
1000d68e:	2b00      	cmp	r3, #0
1000d690:	d005      	beq.n	1000d69e <at_ble_authenticate+0x96>
1000d692:	4827      	ldr	r0, [pc, #156]	; (1000d730 <at_ble_authenticate+0x128>)
1000d694:	1c19      	adds	r1, r3, #0
1000d696:	309a      	adds	r0, #154	; 0x9a
1000d698:	2210      	movs	r2, #16
1000d69a:	4b24      	ldr	r3, [pc, #144]	; (1000d72c <at_ble_authenticate+0x124>)
1000d69c:	4798      	blx	r3
1000d69e:	7863      	ldrb	r3, [r4, #1]
1000d6a0:	78a2      	ldrb	r2, [r4, #2]
1000d6a2:	009b      	lsls	r3, r3, #2
1000d6a4:	4313      	orrs	r3, r2
1000d6a6:	2212      	movs	r2, #18
1000d6a8:	4357      	muls	r7, r2
1000d6aa:	4a1d      	ldr	r2, [pc, #116]	; (1000d720 <at_ble_authenticate+0x118>)
1000d6ac:	b2db      	uxtb	r3, r3
1000d6ae:	5cba      	ldrb	r2, [r7, r2]
1000d6b0:	2a00      	cmp	r2, #0
1000d6b2:	d116      	bne.n	1000d6e2 <at_ble_authenticate+0xda>
1000d6b4:	79a0      	ldrb	r0, [r4, #6]
1000d6b6:	0742      	lsls	r2, r0, #29
1000d6b8:	d502      	bpl.n	1000d6c0 <at_ble_authenticate+0xb8>
1000d6ba:	9a07      	ldr	r2, [sp, #28]
1000d6bc:	2a00      	cmp	r2, #0
1000d6be:	d0bc      	beq.n	1000d63a <at_ble_authenticate+0x32>
1000d6c0:	07c2      	lsls	r2, r0, #31
1000d6c2:	d501      	bpl.n	1000d6c8 <at_ble_authenticate+0xc0>
1000d6c4:	2e00      	cmp	r6, #0
1000d6c6:	d0b8      	beq.n	1000d63a <at_ble_authenticate+0x32>
1000d6c8:	7966      	ldrb	r6, [r4, #5]
1000d6ca:	7821      	ldrb	r1, [r4, #0]
1000d6cc:	78e2      	ldrb	r2, [r4, #3]
1000d6ce:	9600      	str	r6, [sp, #0]
1000d6d0:	9001      	str	r0, [sp, #4]
1000d6d2:	79e0      	ldrb	r0, [r4, #7]
1000d6d4:	9002      	str	r0, [sp, #8]
1000d6d6:	7a20      	ldrb	r0, [r4, #8]
1000d6d8:	4c16      	ldr	r4, [pc, #88]	; (1000d734 <at_ble_authenticate+0x12c>)
1000d6da:	9003      	str	r0, [sp, #12]
1000d6dc:	1c28      	adds	r0, r5, #0
1000d6de:	47a0      	blx	r4
1000d6e0:	e018      	b.n	1000d714 <at_ble_authenticate+0x10c>
1000d6e2:	2a01      	cmp	r2, #1
1000d6e4:	d1a9      	bne.n	1000d63a <at_ble_authenticate+0x32>
1000d6e6:	79e0      	ldrb	r0, [r4, #7]
1000d6e8:	0742      	lsls	r2, r0, #29
1000d6ea:	d502      	bpl.n	1000d6f2 <at_ble_authenticate+0xea>
1000d6ec:	9a07      	ldr	r2, [sp, #28]
1000d6ee:	2a00      	cmp	r2, #0
1000d6f0:	d0a3      	beq.n	1000d63a <at_ble_authenticate+0x32>
1000d6f2:	07c2      	lsls	r2, r0, #31
1000d6f4:	d501      	bpl.n	1000d6fa <at_ble_authenticate+0xf2>
1000d6f6:	2e00      	cmp	r6, #0
1000d6f8:	d09f      	beq.n	1000d63a <at_ble_authenticate+0x32>
1000d6fa:	7966      	ldrb	r6, [r4, #5]
1000d6fc:	7821      	ldrb	r1, [r4, #0]
1000d6fe:	78e2      	ldrb	r2, [r4, #3]
1000d700:	9600      	str	r6, [sp, #0]
1000d702:	79a6      	ldrb	r6, [r4, #6]
1000d704:	9002      	str	r0, [sp, #8]
1000d706:	9601      	str	r6, [sp, #4]
1000d708:	7a20      	ldrb	r0, [r4, #8]
1000d70a:	9504      	str	r5, [sp, #16]
1000d70c:	9003      	str	r0, [sp, #12]
1000d70e:	4c05      	ldr	r4, [pc, #20]	; (1000d724 <at_ble_authenticate+0x11c>)
1000d710:	2001      	movs	r0, #1
1000d712:	47a0      	blx	r4
1000d714:	2000      	movs	r0, #0
1000d716:	b00b      	add	sp, #44	; 0x2c
1000d718:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d71a:	46c0      	nop			; (mov r8, r8)
1000d71c:	1000db09 	.word	0x1000db09
1000d720:	100152c6 	.word	0x100152c6
1000d724:	1000e079 	.word	0x1000e079
1000d728:	100153d4 	.word	0x100153d4
1000d72c:	10010423 	.word	0x10010423
1000d730:	10015356 	.word	0x10015356
1000d734:	1000de59 	.word	0x1000de59

1000d738 <at_ble_pair_key_reply>:
1000d738:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d73a:	b085      	sub	sp, #20
1000d73c:	1c05      	adds	r5, r0, #0
1000d73e:	1c0c      	adds	r4, r1, #0
1000d740:	1c16      	adds	r6, r2, #0
1000d742:	2100      	movs	r1, #0
1000d744:	4668      	mov	r0, sp
1000d746:	2210      	movs	r2, #16
1000d748:	4b18      	ldr	r3, [pc, #96]	; (1000d7ac <at_ble_pair_key_reply+0x74>)
1000d74a:	4798      	blx	r3
1000d74c:	2101      	movs	r1, #1
1000d74e:	2e00      	cmp	r6, #0
1000d750:	d101      	bne.n	1000d756 <at_ble_pair_key_reply+0x1e>
1000d752:	1c31      	adds	r1, r6, #0
1000d754:	466e      	mov	r6, sp
1000d756:	2c00      	cmp	r4, #0
1000d758:	d116      	bne.n	1000d788 <at_ble_pair_key_reply+0x50>
1000d75a:	2701      	movs	r7, #1
1000d75c:	1c23      	adds	r3, r4, #0
1000d75e:	1d70      	adds	r0, r6, #5
1000d760:	3e01      	subs	r6, #1
1000d762:	7802      	ldrb	r2, [r0, #0]
1000d764:	3801      	subs	r0, #1
1000d766:	3a30      	subs	r2, #48	; 0x30
1000d768:	437a      	muls	r2, r7
1000d76a:	189b      	adds	r3, r3, r2
1000d76c:	220a      	movs	r2, #10
1000d76e:	4357      	muls	r7, r2
1000d770:	42b0      	cmp	r0, r6
1000d772:	d1f6      	bne.n	1000d762 <at_ble_pair_key_reply+0x2a>
1000d774:	466a      	mov	r2, sp
1000d776:	4668      	mov	r0, sp
1000d778:	7013      	strb	r3, [r2, #0]
1000d77a:	0a1a      	lsrs	r2, r3, #8
1000d77c:	7042      	strb	r2, [r0, #1]
1000d77e:	0c1a      	lsrs	r2, r3, #16
1000d780:	0e1b      	lsrs	r3, r3, #24
1000d782:	7082      	strb	r2, [r0, #2]
1000d784:	70c3      	strb	r3, [r0, #3]
1000d786:	e009      	b.n	1000d79c <at_ble_pair_key_reply+0x64>
1000d788:	20cf      	movs	r0, #207	; 0xcf
1000d78a:	2c01      	cmp	r4, #1
1000d78c:	d10c      	bne.n	1000d7a8 <at_ble_pair_key_reply+0x70>
1000d78e:	2300      	movs	r3, #0
1000d790:	4668      	mov	r0, sp
1000d792:	5cf2      	ldrb	r2, [r6, r3]
1000d794:	54c2      	strb	r2, [r0, r3]
1000d796:	3301      	adds	r3, #1
1000d798:	2b10      	cmp	r3, #16
1000d79a:	d1f9      	bne.n	1000d790 <at_ble_pair_key_reply+0x58>
1000d79c:	2004      	movs	r0, #4
1000d79e:	466a      	mov	r2, sp
1000d7a0:	1c2b      	adds	r3, r5, #0
1000d7a2:	4c03      	ldr	r4, [pc, #12]	; (1000d7b0 <at_ble_pair_key_reply+0x78>)
1000d7a4:	47a0      	blx	r4
1000d7a6:	2000      	movs	r0, #0
1000d7a8:	b005      	add	sp, #20
1000d7aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d7ac:	10010435 	.word	0x10010435
1000d7b0:	1000e0f5 	.word	0x1000e0f5

1000d7b4 <at_ble_send_slave_sec_request>:
1000d7b4:	b570      	push	{r4, r5, r6, lr}
1000d7b6:	4b0c      	ldr	r3, [pc, #48]	; (1000d7e8 <at_ble_send_slave_sec_request+0x34>)
1000d7b8:	1c0e      	adds	r6, r1, #0
1000d7ba:	2100      	movs	r1, #0
1000d7bc:	1c05      	adds	r5, r0, #0
1000d7be:	1c14      	adds	r4, r2, #0
1000d7c0:	4798      	blx	r3
1000d7c2:	2301      	movs	r3, #1
1000d7c4:	2807      	cmp	r0, #7
1000d7c6:	d80d      	bhi.n	1000d7e4 <at_ble_send_slave_sec_request+0x30>
1000d7c8:	3311      	adds	r3, #17
1000d7ca:	4358      	muls	r0, r3
1000d7cc:	4b07      	ldr	r3, [pc, #28]	; (1000d7ec <at_ble_send_slave_sec_request+0x38>)
1000d7ce:	5cc2      	ldrb	r2, [r0, r3]
1000d7d0:	23e0      	movs	r3, #224	; 0xe0
1000d7d2:	2a01      	cmp	r2, #1
1000d7d4:	d106      	bne.n	1000d7e4 <at_ble_send_slave_sec_request+0x30>
1000d7d6:	00b1      	lsls	r1, r6, #2
1000d7d8:	430c      	orrs	r4, r1
1000d7da:	4b05      	ldr	r3, [pc, #20]	; (1000d7f0 <at_ble_send_slave_sec_request+0x3c>)
1000d7dc:	b2e1      	uxtb	r1, r4
1000d7de:	1c28      	adds	r0, r5, #0
1000d7e0:	4798      	blx	r3
1000d7e2:	2300      	movs	r3, #0
1000d7e4:	1c18      	adds	r0, r3, #0
1000d7e6:	bd70      	pop	{r4, r5, r6, pc}
1000d7e8:	1000db09 	.word	0x1000db09
1000d7ec:	100152c6 	.word	0x100152c6
1000d7f0:	1000e145 	.word	0x1000e145

1000d7f4 <at_ble_encryption_start>:
1000d7f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000d7f6:	23cf      	movs	r3, #207	; 0xcf
1000d7f8:	2900      	cmp	r1, #0
1000d7fa:	d02b      	beq.n	1000d854 <at_ble_encryption_start+0x60>
1000d7fc:	2a05      	cmp	r2, #5
1000d7fe:	d829      	bhi.n	1000d854 <at_ble_encryption_start+0x60>
1000d800:	2701      	movs	r7, #1
1000d802:	1c3d      	adds	r5, r7, #0
1000d804:	2433      	movs	r4, #51	; 0x33
1000d806:	4095      	lsls	r5, r2
1000d808:	4225      	tst	r5, r4
1000d80a:	d023      	beq.n	1000d854 <at_ble_encryption_start+0x60>
1000d80c:	7e8c      	ldrb	r4, [r1, #26]
1000d80e:	3c07      	subs	r4, #7
1000d810:	2c09      	cmp	r4, #9
1000d812:	d81f      	bhi.n	1000d854 <at_ble_encryption_start+0x60>
1000d814:	4b10      	ldr	r3, [pc, #64]	; (1000d858 <at_ble_encryption_start+0x64>)
1000d816:	1c0c      	adds	r4, r1, #0
1000d818:	2100      	movs	r1, #0
1000d81a:	1c15      	adds	r5, r2, #0
1000d81c:	1c06      	adds	r6, r0, #0
1000d81e:	4798      	blx	r3
1000d820:	1c3b      	adds	r3, r7, #0
1000d822:	2807      	cmp	r0, #7
1000d824:	d816      	bhi.n	1000d854 <at_ble_encryption_start+0x60>
1000d826:	2312      	movs	r3, #18
1000d828:	4358      	muls	r0, r3
1000d82a:	4b0c      	ldr	r3, [pc, #48]	; (1000d85c <at_ble_encryption_start+0x68>)
1000d82c:	5cc7      	ldrb	r7, [r0, r3]
1000d82e:	23e0      	movs	r3, #224	; 0xe0
1000d830:	2f00      	cmp	r7, #0
1000d832:	d10f      	bne.n	1000d854 <at_ble_encryption_start+0x60>
1000d834:	1c21      	adds	r1, r4, #0
1000d836:	221c      	movs	r2, #28
1000d838:	4b09      	ldr	r3, [pc, #36]	; (1000d860 <at_ble_encryption_start+0x6c>)
1000d83a:	480a      	ldr	r0, [pc, #40]	; (1000d864 <at_ble_encryption_start+0x70>)
1000d83c:	4798      	blx	r3
1000d83e:	1c23      	adds	r3, r4, #0
1000d840:	7ea1      	ldrb	r1, [r4, #26]
1000d842:	8a22      	ldrh	r2, [r4, #16]
1000d844:	3312      	adds	r3, #18
1000d846:	9100      	str	r1, [sp, #0]
1000d848:	9501      	str	r5, [sp, #4]
1000d84a:	1c21      	adds	r1, r4, #0
1000d84c:	1c30      	adds	r0, r6, #0
1000d84e:	4c06      	ldr	r4, [pc, #24]	; (1000d868 <at_ble_encryption_start+0x74>)
1000d850:	47a0      	blx	r4
1000d852:	1c3b      	adds	r3, r7, #0
1000d854:	1c18      	adds	r0, r3, #0
1000d856:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000d858:	1000db09 	.word	0x1000db09
1000d85c:	100152c6 	.word	0x100152c6
1000d860:	10010423 	.word	0x10010423
1000d864:	100153d4 	.word	0x100153d4
1000d868:	1000e185 	.word	0x1000e185

1000d86c <at_ble_encryption_request_reply>:
1000d86c:	b573      	push	{r0, r1, r4, r5, r6, lr}
1000d86e:	24cf      	movs	r4, #207	; 0xcf
1000d870:	2b00      	cmp	r3, #0
1000d872:	d011      	beq.n	1000d898 <at_ble_encryption_request_reply+0x2c>
1000d874:	2a00      	cmp	r2, #0
1000d876:	d00a      	beq.n	1000d88e <at_ble_encryption_request_reply+0x22>
1000d878:	2905      	cmp	r1, #5
1000d87a:	d80d      	bhi.n	1000d898 <at_ble_encryption_request_reply+0x2c>
1000d87c:	2501      	movs	r5, #1
1000d87e:	2633      	movs	r6, #51	; 0x33
1000d880:	408d      	lsls	r5, r1
1000d882:	4235      	tst	r5, r6
1000d884:	d008      	beq.n	1000d898 <at_ble_encryption_request_reply+0x2c>
1000d886:	7e9d      	ldrb	r5, [r3, #26]
1000d888:	3d07      	subs	r5, #7
1000d88a:	2d09      	cmp	r5, #9
1000d88c:	d804      	bhi.n	1000d898 <at_ble_encryption_request_reply+0x2c>
1000d88e:	7e9c      	ldrb	r4, [r3, #26]
1000d890:	9400      	str	r4, [sp, #0]
1000d892:	4c02      	ldr	r4, [pc, #8]	; (1000d89c <at_ble_encryption_request_reply+0x30>)
1000d894:	47a0      	blx	r4
1000d896:	2400      	movs	r4, #0
1000d898:	1c20      	adds	r0, r4, #0
1000d89a:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
1000d89c:	1000e241 	.word	0x1000e241

1000d8a0 <rx_callback>:
1000d8a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000d8a2:	8883      	ldrh	r3, [r0, #4]
1000d8a4:	1c01      	adds	r1, r0, #0
1000d8a6:	9301      	str	r3, [sp, #4]
1000d8a8:	88c5      	ldrh	r5, [r0, #6]
1000d8aa:	8806      	ldrh	r6, [r0, #0]
1000d8ac:	2d00      	cmp	r5, #0
1000d8ae:	d10f      	bne.n	1000d8d0 <rx_callback+0x30>
1000d8b0:	1c19      	adds	r1, r3, #0
1000d8b2:	1c30      	adds	r0, r6, #0
1000d8b4:	4b19      	ldr	r3, [pc, #100]	; (1000d91c <rx_callback+0x7c>)
1000d8b6:	1c2a      	adds	r2, r5, #0
1000d8b8:	4798      	blx	r3
1000d8ba:	1e03      	subs	r3, r0, #0
1000d8bc:	d105      	bne.n	1000d8ca <rx_callback+0x2a>
1000d8be:	1c30      	adds	r0, r6, #0
1000d8c0:	9901      	ldr	r1, [sp, #4]
1000d8c2:	1c1a      	adds	r2, r3, #0
1000d8c4:	4c16      	ldr	r4, [pc, #88]	; (1000d920 <rx_callback+0x80>)
1000d8c6:	47a0      	blx	r4
1000d8c8:	e027      	b.n	1000d91a <rx_callback+0x7a>
1000d8ca:	4b16      	ldr	r3, [pc, #88]	; (1000d924 <rx_callback+0x84>)
1000d8cc:	4798      	blx	r3
1000d8ce:	e024      	b.n	1000d91a <rx_callback+0x7a>
1000d8d0:	4c15      	ldr	r4, [pc, #84]	; (1000d928 <rx_callback+0x88>)
1000d8d2:	4a16      	ldr	r2, [pc, #88]	; (1000d92c <rx_callback+0x8c>)
1000d8d4:	6823      	ldr	r3, [r4, #0]
1000d8d6:	6812      	ldr	r2, [r2, #0]
1000d8d8:	18eb      	adds	r3, r5, r3
1000d8da:	4293      	cmp	r3, r2
1000d8dc:	d901      	bls.n	1000d8e2 <rx_callback+0x42>
1000d8de:	2300      	movs	r3, #0
1000d8e0:	6023      	str	r3, [r4, #0]
1000d8e2:	4f13      	ldr	r7, [pc, #76]	; (1000d930 <rx_callback+0x90>)
1000d8e4:	6822      	ldr	r2, [r4, #0]
1000d8e6:	683b      	ldr	r3, [r7, #0]
1000d8e8:	3108      	adds	r1, #8
1000d8ea:	1898      	adds	r0, r3, r2
1000d8ec:	1c2a      	adds	r2, r5, #0
1000d8ee:	4b11      	ldr	r3, [pc, #68]	; (1000d934 <rx_callback+0x94>)
1000d8f0:	4798      	blx	r3
1000d8f2:	683b      	ldr	r3, [r7, #0]
1000d8f4:	6822      	ldr	r2, [r4, #0]
1000d8f6:	1c30      	adds	r0, r6, #0
1000d8f8:	189a      	adds	r2, r3, r2
1000d8fa:	9901      	ldr	r1, [sp, #4]
1000d8fc:	4b07      	ldr	r3, [pc, #28]	; (1000d91c <rx_callback+0x7c>)
1000d8fe:	4798      	blx	r3
1000d900:	2800      	cmp	r0, #0
1000d902:	d1e2      	bne.n	1000d8ca <rx_callback+0x2a>
1000d904:	6823      	ldr	r3, [r4, #0]
1000d906:	683a      	ldr	r2, [r7, #0]
1000d908:	1c30      	adds	r0, r6, #0
1000d90a:	18d2      	adds	r2, r2, r3
1000d90c:	9901      	ldr	r1, [sp, #4]
1000d90e:	1c2b      	adds	r3, r5, #0
1000d910:	4e03      	ldr	r6, [pc, #12]	; (1000d920 <rx_callback+0x80>)
1000d912:	47b0      	blx	r6
1000d914:	6823      	ldr	r3, [r4, #0]
1000d916:	18ed      	adds	r5, r5, r3
1000d918:	6025      	str	r5, [r4, #0]
1000d91a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000d91c:	1000c555 	.word	0x1000c555
1000d920:	1000c4cd 	.word	0x1000c4cd
1000d924:	1000c21d 	.word	0x1000c21d
1000d928:	10015430 	.word	0x10015430
1000d92c:	1001458c 	.word	0x1001458c
1000d930:	10014588 	.word	0x10014588
1000d934:	10010423 	.word	0x10010423

1000d938 <interface_send>:
1000d938:	b508      	push	{r3, lr}
1000d93a:	4b02      	ldr	r3, [pc, #8]	; (1000d944 <interface_send+0xc>)
1000d93c:	4798      	blx	r3
1000d93e:	2000      	movs	r0, #0
1000d940:	bd08      	pop	{r3, pc}
1000d942:	46c0      	nop			; (mov r8, r8)
1000d944:	1000bf55 	.word	0x1000bf55

1000d948 <interface_init>:
1000d948:	2280      	movs	r2, #128	; 0x80
1000d94a:	b510      	push	{r4, lr}
1000d94c:	2100      	movs	r1, #0
1000d94e:	1c04      	adds	r4, r0, #0
1000d950:	0092      	lsls	r2, r2, #2
1000d952:	4b08      	ldr	r3, [pc, #32]	; (1000d974 <interface_init+0x2c>)
1000d954:	4808      	ldr	r0, [pc, #32]	; (1000d978 <interface_init+0x30>)
1000d956:	4798      	blx	r3
1000d958:	2200      	movs	r2, #0
1000d95a:	4b08      	ldr	r3, [pc, #32]	; (1000d97c <interface_init+0x34>)
1000d95c:	601a      	str	r2, [r3, #0]
1000d95e:	4a08      	ldr	r2, [pc, #32]	; (1000d980 <interface_init+0x38>)
1000d960:	4b08      	ldr	r3, [pc, #32]	; (1000d984 <interface_init+0x3c>)
1000d962:	601a      	str	r2, [r3, #0]
1000d964:	4b08      	ldr	r3, [pc, #32]	; (1000d988 <interface_init+0x40>)
1000d966:	6922      	ldr	r2, [r4, #16]
1000d968:	601a      	str	r2, [r3, #0]
1000d96a:	6962      	ldr	r2, [r4, #20]
1000d96c:	4b07      	ldr	r3, [pc, #28]	; (1000d98c <interface_init+0x44>)
1000d96e:	601a      	str	r2, [r3, #0]
1000d970:	bd10      	pop	{r4, pc}
1000d972:	46c0      	nop			; (mov r8, r8)
1000d974:	10010435 	.word	0x10010435
1000d978:	10015634 	.word	0x10015634
1000d97c:	10015430 	.word	0x10015430
1000d980:	10015434 	.word	0x10015434
1000d984:	10012ad8 	.word	0x10012ad8
1000d988:	10014588 	.word	0x10014588
1000d98c:	1001458c 	.word	0x1001458c

1000d990 <platform_cmd_cmpl_signal>:
1000d990:	2201      	movs	r2, #1
1000d992:	4b01      	ldr	r3, [pc, #4]	; (1000d998 <platform_cmd_cmpl_signal+0x8>)
1000d994:	601a      	str	r2, [r3, #0]
1000d996:	4770      	bx	lr
1000d998:	10014590 	.word	0x10014590

1000d99c <platform_cmd_cmpl_wait>:
1000d99c:	b510      	push	{r4, lr}
1000d99e:	1c04      	adds	r4, r0, #0
1000d9a0:	4b07      	ldr	r3, [pc, #28]	; (1000d9c0 <platform_cmd_cmpl_wait+0x24>)
1000d9a2:	681a      	ldr	r2, [r3, #0]
1000d9a4:	2a01      	cmp	r2, #1
1000d9a6:	d003      	beq.n	1000d9b0 <platform_cmd_cmpl_wait+0x14>
1000d9a8:	4b06      	ldr	r3, [pc, #24]	; (1000d9c4 <platform_cmd_cmpl_wait+0x28>)
1000d9aa:	2000      	movs	r0, #0
1000d9ac:	4798      	blx	r3
1000d9ae:	e7f7      	b.n	1000d9a0 <platform_cmd_cmpl_wait+0x4>
1000d9b0:	6819      	ldr	r1, [r3, #0]
1000d9b2:	2901      	cmp	r1, #1
1000d9b4:	d102      	bne.n	1000d9bc <platform_cmd_cmpl_wait+0x20>
1000d9b6:	2200      	movs	r2, #0
1000d9b8:	601a      	str	r2, [r3, #0]
1000d9ba:	e000      	b.n	1000d9be <platform_cmd_cmpl_wait+0x22>
1000d9bc:	7022      	strb	r2, [r4, #0]
1000d9be:	bd10      	pop	{r4, pc}
1000d9c0:	10014590 	.word	0x10014590
1000d9c4:	1000bfa5 	.word	0x1000bfa5

1000d9c8 <start_timer>:
1000d9c8:	4770      	bx	lr

1000d9ca <stop_timer>:
1000d9ca:	4770      	bx	lr

1000d9cc <dbg_le_set_bd_addr_req_handler>:
1000d9cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000d9ce:	466b      	mov	r3, sp
1000d9d0:	1dde      	adds	r6, r3, #7
1000d9d2:	2300      	movs	r3, #0
1000d9d4:	7033      	strb	r3, [r6, #0]
1000d9d6:	230f      	movs	r3, #15
1000d9d8:	4c13      	ldr	r4, [pc, #76]	; (1000da28 <dbg_le_set_bd_addr_req_handler+0x5c>)
1000d9da:	2703      	movs	r7, #3
1000d9dc:	7023      	strb	r3, [r4, #0]
1000d9de:	2300      	movs	r3, #0
1000d9e0:	70e3      	strb	r3, [r4, #3]
1000d9e2:	4b12      	ldr	r3, [pc, #72]	; (1000da2c <dbg_le_set_bd_addr_req_handler+0x60>)
1000d9e4:	1c01      	adds	r1, r0, #0
1000d9e6:	881a      	ldrh	r2, [r3, #0]
1000d9e8:	881b      	ldrh	r3, [r3, #0]
1000d9ea:	7122      	strb	r2, [r4, #4]
1000d9ec:	0a1b      	lsrs	r3, r3, #8
1000d9ee:	2206      	movs	r2, #6
1000d9f0:	7163      	strb	r3, [r4, #5]
1000d9f2:	480f      	ldr	r0, [pc, #60]	; (1000da30 <dbg_le_set_bd_addr_req_handler+0x64>)
1000d9f4:	4b0f      	ldr	r3, [pc, #60]	; (1000da34 <dbg_le_set_bd_addr_req_handler+0x68>)
1000d9f6:	7067      	strb	r7, [r4, #1]
1000d9f8:	70a7      	strb	r7, [r4, #2]
1000d9fa:	4798      	blx	r3
1000d9fc:	4d0e      	ldr	r5, [pc, #56]	; (1000da38 <dbg_le_set_bd_addr_req_handler+0x6c>)
1000d9fe:	4b0f      	ldr	r3, [pc, #60]	; (1000da3c <dbg_le_set_bd_addr_req_handler+0x70>)
1000da00:	210e      	movs	r1, #14
1000da02:	802b      	strh	r3, [r5, #0]
1000da04:	2306      	movs	r3, #6
1000da06:	71a3      	strb	r3, [r4, #6]
1000da08:	2300      	movs	r3, #0
1000da0a:	1c20      	adds	r0, r4, #0
1000da0c:	71e3      	strb	r3, [r4, #7]
1000da0e:	4b0c      	ldr	r3, [pc, #48]	; (1000da40 <dbg_le_set_bd_addr_req_handler+0x74>)
1000da10:	80af      	strh	r7, [r5, #4]
1000da12:	4798      	blx	r3
1000da14:	1c30      	adds	r0, r6, #0
1000da16:	4b0b      	ldr	r3, [pc, #44]	; (1000da44 <dbg_le_set_bd_addr_req_handler+0x78>)
1000da18:	4798      	blx	r3
1000da1a:	7833      	ldrb	r3, [r6, #0]
1000da1c:	20e2      	movs	r0, #226	; 0xe2
1000da1e:	2b00      	cmp	r3, #0
1000da20:	d101      	bne.n	1000da26 <dbg_le_set_bd_addr_req_handler+0x5a>
1000da22:	68ab      	ldr	r3, [r5, #8]
1000da24:	7818      	ldrb	r0, [r3, #0]
1000da26:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000da28:	10015634 	.word	0x10015634
1000da2c:	100152c4 	.word	0x100152c4
1000da30:	1001563c 	.word	0x1001563c
1000da34:	10010423 	.word	0x10010423
1000da38:	100152b8 	.word	0x100152b8
1000da3c:	00000329 	.word	0x00000329
1000da40:	1000d939 	.word	0x1000d939
1000da44:	1000d99d 	.word	0x1000d99d

1000da48 <gapc_get_dev_info_cfm.constprop.1>:
1000da48:	b538      	push	{r3, r4, r5, lr}
1000da4a:	230b      	movs	r3, #11
1000da4c:	4c27      	ldr	r4, [pc, #156]	; (1000daec <gapc_get_dev_info_cfm.constprop.1+0xa4>)
1000da4e:	7023      	strb	r3, [r4, #0]
1000da50:	3303      	adds	r3, #3
1000da52:	7063      	strb	r3, [r4, #1]
1000da54:	3329      	adds	r3, #41	; 0x29
1000da56:	70a3      	strb	r3, [r4, #2]
1000da58:	4b25      	ldr	r3, [pc, #148]	; (1000daf0 <gapc_get_dev_info_cfm.constprop.1+0xa8>)
1000da5a:	70e1      	strb	r1, [r4, #3]
1000da5c:	881a      	ldrh	r2, [r3, #0]
1000da5e:	881b      	ldrh	r3, [r3, #0]
1000da60:	7122      	strb	r2, [r4, #4]
1000da62:	0a1b      	lsrs	r3, r3, #8
1000da64:	7163      	strb	r3, [r4, #5]
1000da66:	2300      	movs	r3, #0
1000da68:	7220      	strb	r0, [r4, #8]
1000da6a:	7263      	strb	r3, [r4, #9]
1000da6c:	2801      	cmp	r0, #1
1000da6e:	d02b      	beq.n	1000dac8 <gapc_get_dev_info_cfm.constprop.1+0x80>
1000da70:	4298      	cmp	r0, r3
1000da72:	d01b      	beq.n	1000daac <gapc_get_dev_info_cfm.constprop.1+0x64>
1000da74:	2802      	cmp	r0, #2
1000da76:	d12f      	bne.n	1000dad8 <gapc_get_dev_info_cfm.constprop.1+0x90>
1000da78:	4b1e      	ldr	r3, [pc, #120]	; (1000daf4 <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000da7a:	2112      	movs	r1, #18
1000da7c:	1c1a      	adds	r2, r3, #0
1000da7e:	32ce      	adds	r2, #206	; 0xce
1000da80:	8812      	ldrh	r2, [r2, #0]
1000da82:	72a2      	strb	r2, [r4, #10]
1000da84:	0a12      	lsrs	r2, r2, #8
1000da86:	72e2      	strb	r2, [r4, #11]
1000da88:	1c1a      	adds	r2, r3, #0
1000da8a:	32d0      	adds	r2, #208	; 0xd0
1000da8c:	8812      	ldrh	r2, [r2, #0]
1000da8e:	7322      	strb	r2, [r4, #12]
1000da90:	0a12      	lsrs	r2, r2, #8
1000da92:	7362      	strb	r2, [r4, #13]
1000da94:	1c1a      	adds	r2, r3, #0
1000da96:	32d2      	adds	r2, #210	; 0xd2
1000da98:	8812      	ldrh	r2, [r2, #0]
1000da9a:	33d4      	adds	r3, #212	; 0xd4
1000da9c:	73a2      	strb	r2, [r4, #14]
1000da9e:	0a12      	lsrs	r2, r2, #8
1000daa0:	73e2      	strb	r2, [r4, #15]
1000daa2:	881b      	ldrh	r3, [r3, #0]
1000daa4:	7423      	strb	r3, [r4, #16]
1000daa6:	0a1b      	lsrs	r3, r3, #8
1000daa8:	7463      	strb	r3, [r4, #17]
1000daaa:	e016      	b.n	1000dada <gapc_get_dev_info_cfm.constprop.1+0x92>
1000daac:	4b11      	ldr	r3, [pc, #68]	; (1000daf4 <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000daae:	4912      	ldr	r1, [pc, #72]	; (1000daf8 <gapc_get_dev_info_cfm.constprop.1+0xb0>)
1000dab0:	33aa      	adds	r3, #170	; 0xaa
1000dab2:	881d      	ldrh	r5, [r3, #0]
1000dab4:	4811      	ldr	r0, [pc, #68]	; (1000dafc <gapc_get_dev_info_cfm.constprop.1+0xb4>)
1000dab6:	0a2b      	lsrs	r3, r5, #8
1000dab8:	72a5      	strb	r5, [r4, #10]
1000daba:	72e3      	strb	r3, [r4, #11]
1000dabc:	1c2a      	adds	r2, r5, #0
1000dabe:	4b10      	ldr	r3, [pc, #64]	; (1000db00 <gapc_get_dev_info_cfm.constprop.1+0xb8>)
1000dac0:	350c      	adds	r5, #12
1000dac2:	4798      	blx	r3
1000dac4:	b2a9      	uxth	r1, r5
1000dac6:	e008      	b.n	1000dada <gapc_get_dev_info_cfm.constprop.1+0x92>
1000dac8:	4b0a      	ldr	r3, [pc, #40]	; (1000daf4 <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000daca:	210c      	movs	r1, #12
1000dacc:	33cc      	adds	r3, #204	; 0xcc
1000dace:	881b      	ldrh	r3, [r3, #0]
1000dad0:	72a3      	strb	r3, [r4, #10]
1000dad2:	0a1b      	lsrs	r3, r3, #8
1000dad4:	72e3      	strb	r3, [r4, #11]
1000dad6:	e000      	b.n	1000dada <gapc_get_dev_info_cfm.constprop.1+0x92>
1000dad8:	210a      	movs	r1, #10
1000dada:	1c0b      	adds	r3, r1, #0
1000dadc:	3b08      	subs	r3, #8
1000dade:	71a3      	strb	r3, [r4, #6]
1000dae0:	121b      	asrs	r3, r3, #8
1000dae2:	71e3      	strb	r3, [r4, #7]
1000dae4:	1c20      	adds	r0, r4, #0
1000dae6:	4b07      	ldr	r3, [pc, #28]	; (1000db04 <gapc_get_dev_info_cfm.constprop.1+0xbc>)
1000dae8:	4798      	blx	r3
1000daea:	bd38      	pop	{r3, r4, r5, pc}
1000daec:	10015634 	.word	0x10015634
1000daf0:	100152c4 	.word	0x100152c4
1000daf4:	10015356 	.word	0x10015356
1000daf8:	10015402 	.word	0x10015402
1000dafc:	10015640 	.word	0x10015640
1000db00:	10010423 	.word	0x10010423
1000db04:	1000d939 	.word	0x1000d939

1000db08 <check_ConnData_idx_role>:
1000db08:	4b0c      	ldr	r3, [pc, #48]	; (1000db3c <check_ConnData_idx_role+0x34>)
1000db0a:	b570      	push	{r4, r5, r6, lr}
1000db0c:	1c04      	adds	r4, r0, #0
1000db0e:	2008      	movs	r0, #8
1000db10:	429c      	cmp	r4, r3
1000db12:	d011      	beq.n	1000db38 <check_ConnData_idx_role+0x30>
1000db14:	2300      	movs	r3, #0
1000db16:	2212      	movs	r2, #18
1000db18:	435a      	muls	r2, r3
1000db1a:	4d09      	ldr	r5, [pc, #36]	; (1000db40 <check_ConnData_idx_role+0x38>)
1000db1c:	b2d8      	uxtb	r0, r3
1000db1e:	1956      	adds	r6, r2, r5
1000db20:	8976      	ldrh	r6, [r6, #10]
1000db22:	42a6      	cmp	r6, r4
1000db24:	d104      	bne.n	1000db30 <check_ConnData_idx_role+0x28>
1000db26:	2900      	cmp	r1, #0
1000db28:	d006      	beq.n	1000db38 <check_ConnData_idx_role+0x30>
1000db2a:	5d53      	ldrb	r3, [r2, r5]
1000db2c:	700b      	strb	r3, [r1, #0]
1000db2e:	e003      	b.n	1000db38 <check_ConnData_idx_role+0x30>
1000db30:	3301      	adds	r3, #1
1000db32:	2b08      	cmp	r3, #8
1000db34:	d1ef      	bne.n	1000db16 <check_ConnData_idx_role+0xe>
1000db36:	1c18      	adds	r0, r3, #0
1000db38:	bd70      	pop	{r4, r5, r6, pc}
1000db3a:	46c0      	nop			; (mov r8, r8)
1000db3c:	0000ffff 	.word	0x0000ffff
1000db40:	100152c6 	.word	0x100152c6

1000db44 <check_ConnData_emptyEntry>:
1000db44:	2300      	movs	r3, #0
1000db46:	2212      	movs	r2, #18
1000db48:	435a      	muls	r2, r3
1000db4a:	4906      	ldr	r1, [pc, #24]	; (1000db64 <check_ConnData_emptyEntry+0x20>)
1000db4c:	b2d8      	uxtb	r0, r3
1000db4e:	1852      	adds	r2, r2, r1
1000db50:	8951      	ldrh	r1, [r2, #10]
1000db52:	4a05      	ldr	r2, [pc, #20]	; (1000db68 <check_ConnData_emptyEntry+0x24>)
1000db54:	4291      	cmp	r1, r2
1000db56:	d003      	beq.n	1000db60 <check_ConnData_emptyEntry+0x1c>
1000db58:	3301      	adds	r3, #1
1000db5a:	2b08      	cmp	r3, #8
1000db5c:	d1f3      	bne.n	1000db46 <check_ConnData_emptyEntry+0x2>
1000db5e:	1c18      	adds	r0, r3, #0
1000db60:	4770      	bx	lr
1000db62:	46c0      	nop			; (mov r8, r8)
1000db64:	100152c6 	.word	0x100152c6
1000db68:	0000ffff 	.word	0x0000ffff

1000db6c <gapc_cmp_evt>:
1000db6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000db6e:	780b      	ldrb	r3, [r1, #0]
1000db70:	1c05      	adds	r5, r0, #0
1000db72:	1e58      	subs	r0, r3, #1
1000db74:	784e      	ldrb	r6, [r1, #1]
1000db76:	280f      	cmp	r0, #15
1000db78:	d85a      	bhi.n	1000dc30 <gapc_cmp_evt+0xc4>
1000db7a:	1c14      	adds	r4, r2, #0
1000db7c:	f001 fbc2 	bl	1000f304 <__gnu_thumb1_case_uqi>
1000db80:	5858440a 	.word	0x5858440a
1000db84:	4b584444 	.word	0x4b584444
1000db88:	0825122d 	.word	0x0825122d
1000db8c:	3e395858 	.word	0x3e395858
1000db90:	203b      	movs	r0, #59	; 0x3b
1000db92:	e04e      	b.n	1000dc32 <gapc_cmp_evt+0xc6>
1000db94:	203b      	movs	r0, #59	; 0x3b
1000db96:	2e00      	cmp	r6, #0
1000db98:	d04b      	beq.n	1000dc32 <gapc_cmp_evt+0xc6>
1000db9a:	0a2d      	lsrs	r5, r5, #8
1000db9c:	8015      	strh	r5, [r2, #0]
1000db9e:	7096      	strb	r6, [r2, #2]
1000dba0:	3835      	subs	r0, #53	; 0x35
1000dba2:	e046      	b.n	1000dc32 <gapc_cmp_evt+0xc6>
1000dba4:	466b      	mov	r3, sp
1000dba6:	1ddf      	adds	r7, r3, #7
1000dba8:	2301      	movs	r3, #1
1000dbaa:	0a2d      	lsrs	r5, r5, #8
1000dbac:	703b      	strb	r3, [r7, #0]
1000dbae:	1c28      	adds	r0, r5, #0
1000dbb0:	1c39      	adds	r1, r7, #0
1000dbb2:	4b20      	ldr	r3, [pc, #128]	; (1000dc34 <gapc_cmp_evt+0xc8>)
1000dbb4:	4798      	blx	r3
1000dbb6:	2807      	cmp	r0, #7
1000dbb8:	d803      	bhi.n	1000dbc2 <gapc_cmp_evt+0x56>
1000dbba:	783b      	ldrb	r3, [r7, #0]
1000dbbc:	203b      	movs	r0, #59	; 0x3b
1000dbbe:	2b00      	cmp	r3, #0
1000dbc0:	d037      	beq.n	1000dc32 <gapc_cmp_evt+0xc6>
1000dbc2:	8065      	strh	r5, [r4, #2]
1000dbc4:	7126      	strb	r6, [r4, #4]
1000dbc6:	2009      	movs	r0, #9
1000dbc8:	e033      	b.n	1000dc32 <gapc_cmp_evt+0xc6>
1000dbca:	203b      	movs	r0, #59	; 0x3b
1000dbcc:	2e00      	cmp	r6, #0
1000dbce:	d030      	beq.n	1000dc32 <gapc_cmp_evt+0xc6>
1000dbd0:	0a2d      	lsrs	r5, r5, #8
1000dbd2:	8015      	strh	r5, [r2, #0]
1000dbd4:	7096      	strb	r6, [r2, #2]
1000dbd6:	382d      	subs	r0, #45	; 0x2d
1000dbd8:	e02b      	b.n	1000dc32 <gapc_cmp_evt+0xc6>
1000dbda:	203b      	movs	r0, #59	; 0x3b
1000dbdc:	2e00      	cmp	r6, #0
1000dbde:	d028      	beq.n	1000dc32 <gapc_cmp_evt+0xc6>
1000dbe0:	2300      	movs	r3, #0
1000dbe2:	0a2d      	lsrs	r5, r5, #8
1000dbe4:	8015      	strh	r5, [r2, #0]
1000dbe6:	7096      	strb	r6, [r2, #2]
1000dbe8:	8093      	strh	r3, [r2, #4]
1000dbea:	80d3      	strh	r3, [r2, #6]
1000dbec:	8113      	strh	r3, [r2, #8]
1000dbee:	3834      	subs	r0, #52	; 0x34
1000dbf0:	e01f      	b.n	1000dc32 <gapc_cmp_evt+0xc6>
1000dbf2:	203b      	movs	r0, #59	; 0x3b
1000dbf4:	2e00      	cmp	r6, #0
1000dbf6:	d01c      	beq.n	1000dc32 <gapc_cmp_evt+0xc6>
1000dbf8:	7216      	strb	r6, [r2, #8]
1000dbfa:	e003      	b.n	1000dc04 <gapc_cmp_evt+0x98>
1000dbfc:	203b      	movs	r0, #59	; 0x3b
1000dbfe:	2e00      	cmp	r6, #0
1000dc00:	d017      	beq.n	1000dc32 <gapc_cmp_evt+0xc6>
1000dc02:	7116      	strb	r6, [r2, #4]
1000dc04:	3812      	subs	r0, #18
1000dc06:	e014      	b.n	1000dc32 <gapc_cmp_evt+0xc6>
1000dc08:	203b      	movs	r0, #59	; 0x3b
1000dc0a:	2e00      	cmp	r6, #0
1000dc0c:	d011      	beq.n	1000dc32 <gapc_cmp_evt+0xc6>
1000dc0e:	7093      	strb	r3, [r2, #2]
1000dc10:	70d6      	strb	r6, [r2, #3]
1000dc12:	382a      	subs	r0, #42	; 0x2a
1000dc14:	e00d      	b.n	1000dc32 <gapc_cmp_evt+0xc6>
1000dc16:	203b      	movs	r0, #59	; 0x3b
1000dc18:	2e00      	cmp	r6, #0
1000dc1a:	d00a      	beq.n	1000dc32 <gapc_cmp_evt+0xc6>
1000dc1c:	0a2d      	lsrs	r5, r5, #8
1000dc1e:	7016      	strb	r6, [r2, #0]
1000dc20:	8055      	strh	r5, [r2, #2]
1000dc22:	1d10      	adds	r0, r2, #4
1000dc24:	2100      	movs	r1, #0
1000dc26:	2205      	movs	r2, #5
1000dc28:	4b03      	ldr	r3, [pc, #12]	; (1000dc38 <gapc_cmp_evt+0xcc>)
1000dc2a:	4798      	blx	r3
1000dc2c:	2012      	movs	r0, #18
1000dc2e:	e000      	b.n	1000dc32 <gapc_cmp_evt+0xc6>
1000dc30:	2000      	movs	r0, #0
1000dc32:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000dc34:	1000db09 	.word	0x1000db09
1000dc38:	10010435 	.word	0x10010435

1000dc3c <gapc_connection_cfm_handler>:
1000dc3c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000dc3e:	b085      	sub	sp, #20
1000dc40:	1c1d      	adds	r5, r3, #0
1000dc42:	ab0a      	add	r3, sp, #40	; 0x28
1000dc44:	781b      	ldrb	r3, [r3, #0]
1000dc46:	9201      	str	r2, [sp, #4]
1000dc48:	9302      	str	r3, [sp, #8]
1000dc4a:	ab0b      	add	r3, sp, #44	; 0x2c
1000dc4c:	781b      	ldrb	r3, [r3, #0]
1000dc4e:	1c07      	adds	r7, r0, #0
1000dc50:	9303      	str	r3, [sp, #12]
1000dc52:	ab0c      	add	r3, sp, #48	; 0x30
1000dc54:	881a      	ldrh	r2, [r3, #0]
1000dc56:	2302      	movs	r3, #2
1000dc58:	1c0e      	adds	r6, r1, #0
1000dc5a:	4c23      	ldr	r4, [pc, #140]	; (1000dce8 <gapc_connection_cfm_handler+0xac>)
1000dc5c:	1c39      	adds	r1, r7, #0
1000dc5e:	7023      	strb	r3, [r4, #0]
1000dc60:	330c      	adds	r3, #12
1000dc62:	7063      	strb	r3, [r4, #1]
1000dc64:	70a3      	strb	r3, [r4, #2]
1000dc66:	4b21      	ldr	r3, [pc, #132]	; (1000dcec <gapc_connection_cfm_handler+0xb0>)
1000dc68:	70e2      	strb	r2, [r4, #3]
1000dc6a:	881a      	ldrh	r2, [r3, #0]
1000dc6c:	881b      	ldrh	r3, [r3, #0]
1000dc6e:	7122      	strb	r2, [r4, #4]
1000dc70:	0a1b      	lsrs	r3, r3, #8
1000dc72:	4f1f      	ldr	r7, [pc, #124]	; (1000dcf0 <gapc_connection_cfm_handler+0xb4>)
1000dc74:	2210      	movs	r2, #16
1000dc76:	481f      	ldr	r0, [pc, #124]	; (1000dcf4 <gapc_connection_cfm_handler+0xb8>)
1000dc78:	7163      	strb	r3, [r4, #5]
1000dc7a:	47b8      	blx	r7
1000dc7c:	0a33      	lsrs	r3, r6, #8
1000dc7e:	7626      	strb	r6, [r4, #24]
1000dc80:	7663      	strb	r3, [r4, #25]
1000dc82:	9901      	ldr	r1, [sp, #4]
1000dc84:	0c33      	lsrs	r3, r6, #16
1000dc86:	2210      	movs	r2, #16
1000dc88:	0e36      	lsrs	r6, r6, #24
1000dc8a:	481b      	ldr	r0, [pc, #108]	; (1000dcf8 <gapc_connection_cfm_handler+0xbc>)
1000dc8c:	76a3      	strb	r3, [r4, #26]
1000dc8e:	76e6      	strb	r6, [r4, #27]
1000dc90:	47b8      	blx	r7
1000dc92:	1c23      	adds	r3, r4, #0
1000dc94:	332c      	adds	r3, #44	; 0x2c
1000dc96:	701d      	strb	r5, [r3, #0]
1000dc98:	1c23      	adds	r3, r4, #0
1000dc9a:	0a2a      	lsrs	r2, r5, #8
1000dc9c:	332d      	adds	r3, #45	; 0x2d
1000dc9e:	701a      	strb	r2, [r3, #0]
1000dca0:	1c23      	adds	r3, r4, #0
1000dca2:	0c2a      	lsrs	r2, r5, #16
1000dca4:	332e      	adds	r3, #46	; 0x2e
1000dca6:	701a      	strb	r2, [r3, #0]
1000dca8:	1c23      	adds	r3, r4, #0
1000dcaa:	0e2d      	lsrs	r5, r5, #24
1000dcac:	332f      	adds	r3, #47	; 0x2f
1000dcae:	466a      	mov	r2, sp
1000dcb0:	701d      	strb	r5, [r3, #0]
1000dcb2:	1c23      	adds	r3, r4, #0
1000dcb4:	7a12      	ldrb	r2, [r2, #8]
1000dcb6:	3330      	adds	r3, #48	; 0x30
1000dcb8:	701a      	strb	r2, [r3, #0]
1000dcba:	1c23      	adds	r3, r4, #0
1000dcbc:	2500      	movs	r5, #0
1000dcbe:	3331      	adds	r3, #49	; 0x31
1000dcc0:	466a      	mov	r2, sp
1000dcc2:	701d      	strb	r5, [r3, #0]
1000dcc4:	1c23      	adds	r3, r4, #0
1000dcc6:	7b12      	ldrb	r2, [r2, #12]
1000dcc8:	3332      	adds	r3, #50	; 0x32
1000dcca:	701a      	strb	r2, [r3, #0]
1000dccc:	1c23      	adds	r3, r4, #0
1000dcce:	3333      	adds	r3, #51	; 0x33
1000dcd0:	701d      	strb	r5, [r3, #0]
1000dcd2:	232c      	movs	r3, #44	; 0x2c
1000dcd4:	1c20      	adds	r0, r4, #0
1000dcd6:	71a3      	strb	r3, [r4, #6]
1000dcd8:	2134      	movs	r1, #52	; 0x34
1000dcda:	4b08      	ldr	r3, [pc, #32]	; (1000dcfc <gapc_connection_cfm_handler+0xc0>)
1000dcdc:	71e5      	strb	r5, [r4, #7]
1000dcde:	4798      	blx	r3
1000dce0:	1c28      	adds	r0, r5, #0
1000dce2:	b005      	add	sp, #20
1000dce4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000dce6:	46c0      	nop			; (mov r8, r8)
1000dce8:	10015634 	.word	0x10015634
1000dcec:	100152c4 	.word	0x100152c4
1000dcf0:	10010423 	.word	0x10010423
1000dcf4:	1001563c 	.word	0x1001563c
1000dcf8:	10015650 	.word	0x10015650
1000dcfc:	1000d939 	.word	0x1000d939

1000dd00 <gapc_con_req_ind>:
1000dd00:	b5f0      	push	{r4, r5, r6, r7, lr}
1000dd02:	7845      	ldrb	r5, [r0, #1]
1000dd04:	7803      	ldrb	r3, [r0, #0]
1000dd06:	4c30      	ldr	r4, [pc, #192]	; (1000ddc8 <gapc_con_req_ind+0xc8>)
1000dd08:	022d      	lsls	r5, r5, #8
1000dd0a:	431d      	orrs	r5, r3
1000dd0c:	85a5      	strh	r5, [r4, #44]	; 0x2c
1000dd0e:	78c3      	ldrb	r3, [r0, #3]
1000dd10:	7882      	ldrb	r2, [r0, #2]
1000dd12:	b08b      	sub	sp, #44	; 0x2c
1000dd14:	021b      	lsls	r3, r3, #8
1000dd16:	431a      	orrs	r2, r3
1000dd18:	466b      	mov	r3, sp
1000dd1a:	9205      	str	r2, [sp, #20]
1000dd1c:	8a9b      	ldrh	r3, [r3, #20]
1000dd1e:	2120      	movs	r1, #32
1000dd20:	85e3      	strh	r3, [r4, #46]	; 0x2e
1000dd22:	7943      	ldrb	r3, [r0, #5]
1000dd24:	7902      	ldrb	r2, [r0, #4]
1000dd26:	021b      	lsls	r3, r3, #8
1000dd28:	431a      	orrs	r2, r3
1000dd2a:	466b      	mov	r3, sp
1000dd2c:	9206      	str	r2, [sp, #24]
1000dd2e:	8b1b      	ldrh	r3, [r3, #24]
1000dd30:	1c06      	adds	r6, r0, #0
1000dd32:	8623      	strh	r3, [r4, #48]	; 0x30
1000dd34:	79c3      	ldrb	r3, [r0, #7]
1000dd36:	7982      	ldrb	r2, [r0, #6]
1000dd38:	021b      	lsls	r3, r3, #8
1000dd3a:	431a      	orrs	r2, r3
1000dd3c:	466b      	mov	r3, sp
1000dd3e:	9207      	str	r2, [sp, #28]
1000dd40:	466a      	mov	r2, sp
1000dd42:	8b9b      	ldrh	r3, [r3, #28]
1000dd44:	1852      	adds	r2, r2, r1
1000dd46:	8663      	strh	r3, [r4, #50]	; 0x32
1000dd48:	7a43      	ldrb	r3, [r0, #9]
1000dd4a:	1c01      	adds	r1, r0, #0
1000dd4c:	9308      	str	r3, [sp, #32]
1000dd4e:	1c23      	adds	r3, r4, #0
1000dd50:	7812      	ldrb	r2, [r2, #0]
1000dd52:	3377      	adds	r3, #119	; 0x77
1000dd54:	3478      	adds	r4, #120	; 0x78
1000dd56:	701a      	strb	r2, [r3, #0]
1000dd58:	310a      	adds	r1, #10
1000dd5a:	2206      	movs	r2, #6
1000dd5c:	4b1b      	ldr	r3, [pc, #108]	; (1000ddcc <gapc_con_req_ind+0xcc>)
1000dd5e:	1c20      	adds	r0, r4, #0
1000dd60:	4798      	blx	r3
1000dd62:	7c33      	ldrb	r3, [r6, #16]
1000dd64:	9309      	str	r3, [sp, #36]	; 0x24
1000dd66:	4b1a      	ldr	r3, [pc, #104]	; (1000ddd0 <gapc_con_req_ind+0xd0>)
1000dd68:	4798      	blx	r3
1000dd6a:	4e1a      	ldr	r6, [pc, #104]	; (1000ddd4 <gapc_con_req_ind+0xd4>)
1000dd6c:	1e07      	subs	r7, r0, #0
1000dd6e:	2f07      	cmp	r7, #7
1000dd70:	d81b      	bhi.n	1000ddaa <gapc_con_req_ind+0xaa>
1000dd72:	2312      	movs	r3, #18
1000dd74:	4343      	muls	r3, r0
1000dd76:	18f0      	adds	r0, r6, r3
1000dd78:	8145      	strh	r5, [r0, #10]
1000dd7a:	4669      	mov	r1, sp
1000dd7c:	2524      	movs	r5, #36	; 0x24
1000dd7e:	1949      	adds	r1, r1, r5
1000dd80:	7809      	ldrb	r1, [r1, #0]
1000dd82:	2206      	movs	r2, #6
1000dd84:	54f1      	strb	r1, [r6, r3]
1000dd86:	2120      	movs	r1, #32
1000dd88:	466b      	mov	r3, sp
1000dd8a:	185b      	adds	r3, r3, r1
1000dd8c:	781b      	ldrb	r3, [r3, #0]
1000dd8e:	1c21      	adds	r1, r4, #0
1000dd90:	7043      	strb	r3, [r0, #1]
1000dd92:	466b      	mov	r3, sp
1000dd94:	8a9b      	ldrh	r3, [r3, #20]
1000dd96:	3002      	adds	r0, #2
1000dd98:	8143      	strh	r3, [r0, #10]
1000dd9a:	466b      	mov	r3, sp
1000dd9c:	8b1b      	ldrh	r3, [r3, #24]
1000dd9e:	8183      	strh	r3, [r0, #12]
1000dda0:	466b      	mov	r3, sp
1000dda2:	8b9b      	ldrh	r3, [r3, #28]
1000dda4:	81c3      	strh	r3, [r0, #14]
1000dda6:	4b09      	ldr	r3, [pc, #36]	; (1000ddcc <gapc_con_req_ind+0xcc>)
1000dda8:	4798      	blx	r3
1000ddaa:	2112      	movs	r1, #18
1000ddac:	2300      	movs	r3, #0
1000ddae:	434f      	muls	r7, r1
1000ddb0:	9300      	str	r3, [sp, #0]
1000ddb2:	9301      	str	r3, [sp, #4]
1000ddb4:	19f6      	adds	r6, r6, r7
1000ddb6:	8971      	ldrh	r1, [r6, #10]
1000ddb8:	4a07      	ldr	r2, [pc, #28]	; (1000ddd8 <gapc_con_req_ind+0xd8>)
1000ddba:	9102      	str	r1, [sp, #8]
1000ddbc:	1c10      	adds	r0, r2, #0
1000ddbe:	1c19      	adds	r1, r3, #0
1000ddc0:	4c06      	ldr	r4, [pc, #24]	; (1000dddc <gapc_con_req_ind+0xdc>)
1000ddc2:	47a0      	blx	r4
1000ddc4:	b00b      	add	sp, #44	; 0x2c
1000ddc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ddc8:	10015356 	.word	0x10015356
1000ddcc:	10010423 	.word	0x10010423
1000ddd0:	1000db45 	.word	0x1000db45
1000ddd4:	100152c6 	.word	0x100152c6
1000ddd8:	10014594 	.word	0x10014594
1000dddc:	1000dc3d 	.word	0x1000dc3d

1000dde0 <gapc_disconnect_cmd_handler>:
1000dde0:	2204      	movs	r2, #4
1000dde2:	b510      	push	{r4, lr}
1000dde4:	4b0c      	ldr	r3, [pc, #48]	; (1000de18 <gapc_disconnect_cmd_handler+0x38>)
1000dde6:	2400      	movs	r4, #0
1000dde8:	701a      	strb	r2, [r3, #0]
1000ddea:	320a      	adds	r2, #10
1000ddec:	705a      	strb	r2, [r3, #1]
1000ddee:	709a      	strb	r2, [r3, #2]
1000ddf0:	4a0a      	ldr	r2, [pc, #40]	; (1000de1c <gapc_disconnect_cmd_handler+0x3c>)
1000ddf2:	70d9      	strb	r1, [r3, #3]
1000ddf4:	8811      	ldrh	r1, [r2, #0]
1000ddf6:	8812      	ldrh	r2, [r2, #0]
1000ddf8:	7119      	strb	r1, [r3, #4]
1000ddfa:	0a12      	lsrs	r2, r2, #8
1000ddfc:	715a      	strb	r2, [r3, #5]
1000ddfe:	2201      	movs	r2, #1
1000de00:	721a      	strb	r2, [r3, #8]
1000de02:	1892      	adds	r2, r2, r2
1000de04:	7258      	strb	r0, [r3, #9]
1000de06:	719a      	strb	r2, [r3, #6]
1000de08:	71dc      	strb	r4, [r3, #7]
1000de0a:	1c18      	adds	r0, r3, #0
1000de0c:	210a      	movs	r1, #10
1000de0e:	4b04      	ldr	r3, [pc, #16]	; (1000de20 <gapc_disconnect_cmd_handler+0x40>)
1000de10:	4798      	blx	r3
1000de12:	1c20      	adds	r0, r4, #0
1000de14:	bd10      	pop	{r4, pc}
1000de16:	46c0      	nop			; (mov r8, r8)
1000de18:	10015634 	.word	0x10015634
1000de1c:	100152c4 	.word	0x100152c4
1000de20:	1000d939 	.word	0x1000d939

1000de24 <gapc_disconnect_ind>:
1000de24:	1c02      	adds	r2, r0, #0
1000de26:	b508      	push	{r3, lr}
1000de28:	7843      	ldrb	r3, [r0, #1]
1000de2a:	7800      	ldrb	r0, [r0, #0]
1000de2c:	021b      	lsls	r3, r3, #8
1000de2e:	4318      	orrs	r0, r3
1000de30:	8008      	strh	r0, [r1, #0]
1000de32:	7893      	ldrb	r3, [r2, #2]
1000de34:	708b      	strb	r3, [r1, #2]
1000de36:	2100      	movs	r1, #0
1000de38:	4b05      	ldr	r3, [pc, #20]	; (1000de50 <gapc_disconnect_ind+0x2c>)
1000de3a:	4798      	blx	r3
1000de3c:	2807      	cmp	r0, #7
1000de3e:	d806      	bhi.n	1000de4e <gapc_disconnect_ind+0x2a>
1000de40:	2312      	movs	r3, #18
1000de42:	4358      	muls	r0, r3
1000de44:	4b03      	ldr	r3, [pc, #12]	; (1000de54 <gapc_disconnect_ind+0x30>)
1000de46:	1818      	adds	r0, r3, r0
1000de48:	2301      	movs	r3, #1
1000de4a:	425b      	negs	r3, r3
1000de4c:	8143      	strh	r3, [r0, #10]
1000de4e:	bd08      	pop	{r3, pc}
1000de50:	1000db09 	.word	0x1000db09
1000de54:	100152c6 	.word	0x100152c6

1000de58 <gapc_bond_cmd_handler>:
1000de58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000de5a:	9300      	str	r3, [sp, #0]
1000de5c:	2312      	movs	r3, #18
1000de5e:	1c04      	adds	r4, r0, #0
1000de60:	a808      	add	r0, sp, #32
1000de62:	7807      	ldrb	r7, [r0, #0]
1000de64:	a809      	add	r0, sp, #36	; 0x24
1000de66:	7806      	ldrb	r6, [r0, #0]
1000de68:	a80a      	add	r0, sp, #40	; 0x28
1000de6a:	7805      	ldrb	r5, [r0, #0]
1000de6c:	a80b      	add	r0, sp, #44	; 0x2c
1000de6e:	7800      	ldrb	r0, [r0, #0]
1000de70:	9001      	str	r0, [sp, #4]
1000de72:	4810      	ldr	r0, [pc, #64]	; (1000deb4 <gapc_bond_cmd_handler+0x5c>)
1000de74:	7003      	strb	r3, [r0, #0]
1000de76:	230e      	movs	r3, #14
1000de78:	70c4      	strb	r4, [r0, #3]
1000de7a:	4c0f      	ldr	r4, [pc, #60]	; (1000deb8 <gapc_bond_cmd_handler+0x60>)
1000de7c:	7043      	strb	r3, [r0, #1]
1000de7e:	7083      	strb	r3, [r0, #2]
1000de80:	8823      	ldrh	r3, [r4, #0]
1000de82:	8824      	ldrh	r4, [r4, #0]
1000de84:	7103      	strb	r3, [r0, #4]
1000de86:	466b      	mov	r3, sp
1000de88:	781b      	ldrb	r3, [r3, #0]
1000de8a:	0a24      	lsrs	r4, r4, #8
1000de8c:	72c3      	strb	r3, [r0, #11]
1000de8e:	466b      	mov	r3, sp
1000de90:	791b      	ldrb	r3, [r3, #4]
1000de92:	7144      	strb	r4, [r0, #5]
1000de94:	73c3      	strb	r3, [r0, #15]
1000de96:	2308      	movs	r3, #8
1000de98:	7183      	strb	r3, [r0, #6]
1000de9a:	2300      	movs	r3, #0
1000de9c:	240a      	movs	r4, #10
1000de9e:	7241      	strb	r1, [r0, #9]
1000dea0:	71c3      	strb	r3, [r0, #7]
1000dea2:	2110      	movs	r1, #16
1000dea4:	4b05      	ldr	r3, [pc, #20]	; (1000debc <gapc_bond_cmd_handler+0x64>)
1000dea6:	7307      	strb	r7, [r0, #12]
1000dea8:	7346      	strb	r6, [r0, #13]
1000deaa:	7385      	strb	r5, [r0, #14]
1000deac:	7204      	strb	r4, [r0, #8]
1000deae:	7282      	strb	r2, [r0, #10]
1000deb0:	4798      	blx	r3
1000deb2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000deb4:	10015634 	.word	0x10015634
1000deb8:	100152c4 	.word	0x100152c4
1000debc:	1000d939 	.word	0x1000d939

1000dec0 <gapc_bond_ind>:
1000dec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000dec2:	780e      	ldrb	r6, [r1, #0]
1000dec4:	1c03      	adds	r3, r0, #0
1000dec6:	1eb0      	subs	r0, r6, #2
1000dec8:	2805      	cmp	r0, #5
1000deca:	d85d      	bhi.n	1000df88 <gapc_bond_ind+0xc8>
1000decc:	1c15      	adds	r5, r2, #0
1000dece:	1c0c      	adds	r4, r1, #0
1000ded0:	f001 fa18 	bl	1000f304 <__gnu_thumb1_case_uqi>
1000ded4:	2f5a030d 	.word	0x2f5a030d
1000ded8:	4740      	.short	0x4740
1000deda:	2009      	movs	r0, #9
1000dedc:	2a00      	cmp	r2, #0
1000dede:	d054      	beq.n	1000df8a <gapc_bond_ind+0xca>
1000dee0:	0a1b      	lsrs	r3, r3, #8
1000dee2:	8053      	strh	r3, [r2, #2]
1000dee4:	788b      	ldrb	r3, [r1, #2]
1000dee6:	4829      	ldr	r0, [pc, #164]	; (1000df8c <gapc_bond_ind+0xcc>)
1000dee8:	7113      	strb	r3, [r2, #4]
1000deea:	2100      	movs	r1, #0
1000deec:	e01c      	b.n	1000df28 <gapc_bond_ind+0x68>
1000deee:	2009      	movs	r0, #9
1000def0:	2a00      	cmp	r2, #0
1000def2:	d04a      	beq.n	1000df8a <gapc_bond_ind+0xca>
1000def4:	4c25      	ldr	r4, [pc, #148]	; (1000df8c <gapc_bond_ind+0xcc>)
1000def6:	0a1b      	lsrs	r3, r3, #8
1000def8:	8053      	strh	r3, [r2, #2]
1000defa:	788b      	ldrb	r3, [r1, #2]
1000defc:	2700      	movs	r7, #0
1000defe:	1c10      	adds	r0, r2, #0
1000df00:	1c21      	adds	r1, r4, #0
1000df02:	7013      	strb	r3, [r2, #0]
1000df04:	4e22      	ldr	r6, [pc, #136]	; (1000df90 <gapc_bond_ind+0xd0>)
1000df06:	7117      	strb	r7, [r2, #4]
1000df08:	312e      	adds	r1, #46	; 0x2e
1000df0a:	2217      	movs	r2, #23
1000df0c:	3032      	adds	r0, #50	; 0x32
1000df0e:	47b0      	blx	r6
1000df10:	1c28      	adds	r0, r5, #0
1000df12:	1c21      	adds	r1, r4, #0
1000df14:	2210      	movs	r2, #16
1000df16:	311e      	adds	r1, #30
1000df18:	3022      	adds	r0, #34	; 0x22
1000df1a:	47b0      	blx	r6
1000df1c:	1ca1      	adds	r1, r4, #2
1000df1e:	1da8      	adds	r0, r5, #6
1000df20:	221c      	movs	r2, #28
1000df22:	47b0      	blx	r6
1000df24:	1c20      	adds	r0, r4, #0
1000df26:	1c39      	adds	r1, r7, #0
1000df28:	2246      	movs	r2, #70	; 0x46
1000df2a:	4b1a      	ldr	r3, [pc, #104]	; (1000df94 <gapc_bond_ind+0xd4>)
1000df2c:	4798      	blx	r3
1000df2e:	2009      	movs	r0, #9
1000df30:	e02b      	b.n	1000df8a <gapc_bond_ind+0xca>
1000df32:	4d16      	ldr	r5, [pc, #88]	; (1000df8c <gapc_bond_ind+0xcc>)
1000df34:	3102      	adds	r1, #2
1000df36:	1c28      	adds	r0, r5, #0
1000df38:	2210      	movs	r2, #16
1000df3a:	4e15      	ldr	r6, [pc, #84]	; (1000df90 <gapc_bond_ind+0xd0>)
1000df3c:	302e      	adds	r0, #46	; 0x2e
1000df3e:	47b0      	blx	r6
1000df40:	1c28      	adds	r0, r5, #0
1000df42:	1c21      	adds	r1, r4, #0
1000df44:	303f      	adds	r0, #63	; 0x3f
1000df46:	3112      	adds	r1, #18
1000df48:	2206      	movs	r2, #6
1000df4a:	47b0      	blx	r6
1000df4c:	7e23      	ldrb	r3, [r4, #24]
1000df4e:	353e      	adds	r5, #62	; 0x3e
1000df50:	702b      	strb	r3, [r5, #0]
1000df52:	e019      	b.n	1000df88 <gapc_bond_ind+0xc8>
1000df54:	480d      	ldr	r0, [pc, #52]	; (1000df8c <gapc_bond_ind+0xcc>)
1000df56:	3102      	adds	r1, #2
1000df58:	2210      	movs	r2, #16
1000df5a:	4b0d      	ldr	r3, [pc, #52]	; (1000df90 <gapc_bond_ind+0xd0>)
1000df5c:	301e      	adds	r0, #30
1000df5e:	4798      	blx	r3
1000df60:	e012      	b.n	1000df88 <gapc_bond_ind+0xc8>
1000df62:	4d0a      	ldr	r5, [pc, #40]	; (1000df8c <gapc_bond_ind+0xcc>)
1000df64:	3102      	adds	r1, #2
1000df66:	2210      	movs	r2, #16
1000df68:	4e09      	ldr	r6, [pc, #36]	; (1000df90 <gapc_bond_ind+0xd0>)
1000df6a:	1ca8      	adds	r0, r5, #2
1000df6c:	47b0      	blx	r6
1000df6e:	1c28      	adds	r0, r5, #0
1000df70:	1c21      	adds	r1, r4, #0
1000df72:	7ce3      	ldrb	r3, [r4, #19]
1000df74:	7ca2      	ldrb	r2, [r4, #18]
1000df76:	021b      	lsls	r3, r3, #8
1000df78:	4313      	orrs	r3, r2
1000df7a:	3014      	adds	r0, #20
1000df7c:	3114      	adds	r1, #20
1000df7e:	2208      	movs	r2, #8
1000df80:	826b      	strh	r3, [r5, #18]
1000df82:	47b0      	blx	r6
1000df84:	7f23      	ldrb	r3, [r4, #28]
1000df86:	772b      	strb	r3, [r5, #28]
1000df88:	2000      	movs	r0, #0
1000df8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000df8c:	100145c4 	.word	0x100145c4
1000df90:	10010423 	.word	0x10010423
1000df94:	10010435 	.word	0x10010435

1000df98 <gapc_bond_req_ind>:
1000df98:	b570      	push	{r4, r5, r6, lr}
1000df9a:	780c      	ldrb	r4, [r1, #0]
1000df9c:	1c03      	adds	r3, r0, #0
1000df9e:	7849      	ldrb	r1, [r1, #1]
1000dfa0:	2c07      	cmp	r4, #7
1000dfa2:	d85c      	bhi.n	1000e05e <gapc_bond_req_ind+0xc6>
1000dfa4:	1c20      	adds	r0, r4, #0
1000dfa6:	f001 f9ad 	bl	1000f304 <__gnu_thumb1_case_uqi>
1000dfaa:	5a04      	.short	0x5a04
1000dfac:	5a0b5a5a 	.word	0x5a0b5a5a
1000dfb0:	1f1f      	.short	0x1f1f
1000dfb2:	200a      	movs	r0, #10
1000dfb4:	2a00      	cmp	r2, #0
1000dfb6:	d053      	beq.n	1000e060 <gapc_bond_req_ind+0xc8>
1000dfb8:	0a1b      	lsrs	r3, r3, #8
1000dfba:	8013      	strh	r3, [r2, #0]
1000dfbc:	7091      	strb	r1, [r2, #2]
1000dfbe:	e04f      	b.n	1000e060 <gapc_bond_req_ind+0xc8>
1000dfc0:	2a00      	cmp	r2, #0
1000dfc2:	d00b      	beq.n	1000dfdc <gapc_bond_req_ind+0x44>
1000dfc4:	0a1b      	lsrs	r3, r3, #8
1000dfc6:	8013      	strh	r3, [r2, #0]
1000dfc8:	2900      	cmp	r1, #0
1000dfca:	d102      	bne.n	1000dfd2 <gapc_bond_req_ind+0x3a>
1000dfcc:	2301      	movs	r3, #1
1000dfce:	7093      	strb	r3, [r2, #2]
1000dfd0:	e004      	b.n	1000dfdc <gapc_bond_req_ind+0x44>
1000dfd2:	2300      	movs	r3, #0
1000dfd4:	7093      	strb	r3, [r2, #2]
1000dfd6:	2902      	cmp	r1, #2
1000dfd8:	d102      	bne.n	1000dfe0 <gapc_bond_req_ind+0x48>
1000dfda:	70d3      	strb	r3, [r2, #3]
1000dfdc:	200c      	movs	r0, #12
1000dfde:	e03f      	b.n	1000e060 <gapc_bond_req_ind+0xc8>
1000dfe0:	2901      	cmp	r1, #1
1000dfe2:	d1fb      	bne.n	1000dfdc <gapc_bond_req_ind+0x44>
1000dfe4:	70d1      	strb	r1, [r2, #3]
1000dfe6:	e7f9      	b.n	1000dfdc <gapc_bond_req_ind+0x44>
1000dfe8:	2214      	movs	r2, #20
1000dfea:	481e      	ldr	r0, [pc, #120]	; (1000e064 <gapc_bond_req_ind+0xcc>)
1000dfec:	0a1b      	lsrs	r3, r3, #8
1000dfee:	70c3      	strb	r3, [r0, #3]
1000dff0:	4b1d      	ldr	r3, [pc, #116]	; (1000e068 <gapc_bond_req_ind+0xd0>)
1000dff2:	7002      	strb	r2, [r0, #0]
1000dff4:	3a06      	subs	r2, #6
1000dff6:	7042      	strb	r2, [r0, #1]
1000dff8:	7082      	strb	r2, [r0, #2]
1000dffa:	881a      	ldrh	r2, [r3, #0]
1000dffc:	881b      	ldrh	r3, [r3, #0]
1000dffe:	4e1b      	ldr	r6, [pc, #108]	; (1000e06c <gapc_bond_req_ind+0xd4>)
1000e000:	0a1b      	lsrs	r3, r3, #8
1000e002:	7143      	strb	r3, [r0, #5]
1000e004:	2301      	movs	r3, #1
1000e006:	7102      	strb	r2, [r0, #4]
1000e008:	7204      	strb	r4, [r0, #8]
1000e00a:	7243      	strb	r3, [r0, #9]
1000e00c:	1c05      	adds	r5, r0, #0
1000e00e:	1c31      	adds	r1, r6, #0
1000e010:	300a      	adds	r0, #10
1000e012:	2c07      	cmp	r4, #7
1000e014:	d116      	bne.n	1000e044 <gapc_bond_req_ind+0xac>
1000e016:	317e      	adds	r1, #126	; 0x7e
1000e018:	2210      	movs	r2, #16
1000e01a:	4c15      	ldr	r4, [pc, #84]	; (1000e070 <gapc_bond_req_ind+0xd8>)
1000e01c:	47a0      	blx	r4
1000e01e:	1c33      	adds	r3, r6, #0
1000e020:	1c31      	adds	r1, r6, #0
1000e022:	1c28      	adds	r0, r5, #0
1000e024:	338e      	adds	r3, #142	; 0x8e
1000e026:	881b      	ldrh	r3, [r3, #0]
1000e028:	3190      	adds	r1, #144	; 0x90
1000e02a:	76ab      	strb	r3, [r5, #26]
1000e02c:	2208      	movs	r2, #8
1000e02e:	0a1b      	lsrs	r3, r3, #8
1000e030:	301c      	adds	r0, #28
1000e032:	76eb      	strb	r3, [r5, #27]
1000e034:	47a0      	blx	r4
1000e036:	1c31      	adds	r1, r6, #0
1000e038:	3198      	adds	r1, #152	; 0x98
1000e03a:	780a      	ldrb	r2, [r1, #0]
1000e03c:	1d6b      	adds	r3, r5, #5
1000e03e:	77da      	strb	r2, [r3, #31]
1000e040:	2125      	movs	r1, #37	; 0x25
1000e042:	e004      	b.n	1000e04e <gapc_bond_req_ind+0xb6>
1000e044:	319a      	adds	r1, #154	; 0x9a
1000e046:	2210      	movs	r2, #16
1000e048:	4b09      	ldr	r3, [pc, #36]	; (1000e070 <gapc_bond_req_ind+0xd8>)
1000e04a:	4798      	blx	r3
1000e04c:	211a      	movs	r1, #26
1000e04e:	1c0b      	adds	r3, r1, #0
1000e050:	2400      	movs	r4, #0
1000e052:	3b08      	subs	r3, #8
1000e054:	71ab      	strb	r3, [r5, #6]
1000e056:	1c28      	adds	r0, r5, #0
1000e058:	4b06      	ldr	r3, [pc, #24]	; (1000e074 <gapc_bond_req_ind+0xdc>)
1000e05a:	71ec      	strb	r4, [r5, #7]
1000e05c:	4798      	blx	r3
1000e05e:	2000      	movs	r0, #0
1000e060:	bd70      	pop	{r4, r5, r6, pc}
1000e062:	46c0      	nop			; (mov r8, r8)
1000e064:	10015634 	.word	0x10015634
1000e068:	100152c4 	.word	0x100152c4
1000e06c:	10015356 	.word	0x10015356
1000e070:	10010423 	.word	0x10010423
1000e074:	1000d939 	.word	0x1000d939

1000e078 <gapc_bond_cfm_handler_pair_resp>:
1000e078:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e07a:	b085      	sub	sp, #20
1000e07c:	1c07      	adds	r7, r0, #0
1000e07e:	a80a      	add	r0, sp, #40	; 0x28
1000e080:	7806      	ldrb	r6, [r0, #0]
1000e082:	a80b      	add	r0, sp, #44	; 0x2c
1000e084:	7805      	ldrb	r5, [r0, #0]
1000e086:	a80c      	add	r0, sp, #48	; 0x30
1000e088:	7800      	ldrb	r0, [r0, #0]
1000e08a:	2414      	movs	r4, #20
1000e08c:	9002      	str	r0, [sp, #8]
1000e08e:	a80d      	add	r0, sp, #52	; 0x34
1000e090:	7800      	ldrb	r0, [r0, #0]
1000e092:	9301      	str	r3, [sp, #4]
1000e094:	9003      	str	r0, [sp, #12]
1000e096:	a80e      	add	r0, sp, #56	; 0x38
1000e098:	8800      	ldrh	r0, [r0, #0]
1000e09a:	4684      	mov	ip, r0
1000e09c:	4812      	ldr	r0, [pc, #72]	; (1000e0e8 <gapc_bond_cfm_handler_pair_resp+0x70>)
1000e09e:	7004      	strb	r4, [r0, #0]
1000e0a0:	3c06      	subs	r4, #6
1000e0a2:	7044      	strb	r4, [r0, #1]
1000e0a4:	7084      	strb	r4, [r0, #2]
1000e0a6:	4664      	mov	r4, ip
1000e0a8:	70c4      	strb	r4, [r0, #3]
1000e0aa:	4c10      	ldr	r4, [pc, #64]	; (1000e0ec <gapc_bond_cfm_handler_pair_resp+0x74>)
1000e0ac:	7247      	strb	r7, [r0, #9]
1000e0ae:	8823      	ldrh	r3, [r4, #0]
1000e0b0:	8824      	ldrh	r4, [r4, #0]
1000e0b2:	7103      	strb	r3, [r0, #4]
1000e0b4:	466b      	mov	r3, sp
1000e0b6:	791b      	ldrb	r3, [r3, #4]
1000e0b8:	0a24      	lsrs	r4, r4, #8
1000e0ba:	7303      	strb	r3, [r0, #12]
1000e0bc:	466b      	mov	r3, sp
1000e0be:	7a1b      	ldrb	r3, [r3, #8]
1000e0c0:	7144      	strb	r4, [r0, #5]
1000e0c2:	73c3      	strb	r3, [r0, #15]
1000e0c4:	466b      	mov	r3, sp
1000e0c6:	7b1b      	ldrb	r3, [r3, #12]
1000e0c8:	2401      	movs	r4, #1
1000e0ca:	7403      	strb	r3, [r0, #16]
1000e0cc:	2309      	movs	r3, #9
1000e0ce:	7183      	strb	r3, [r0, #6]
1000e0d0:	2300      	movs	r3, #0
1000e0d2:	7204      	strb	r4, [r0, #8]
1000e0d4:	7281      	strb	r1, [r0, #10]
1000e0d6:	72c2      	strb	r2, [r0, #11]
1000e0d8:	7346      	strb	r6, [r0, #13]
1000e0da:	7385      	strb	r5, [r0, #14]
1000e0dc:	71c3      	strb	r3, [r0, #7]
1000e0de:	2111      	movs	r1, #17
1000e0e0:	4b03      	ldr	r3, [pc, #12]	; (1000e0f0 <gapc_bond_cfm_handler_pair_resp+0x78>)
1000e0e2:	4798      	blx	r3
1000e0e4:	b005      	add	sp, #20
1000e0e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e0e8:	10015634 	.word	0x10015634
1000e0ec:	100152c4 	.word	0x100152c4
1000e0f0:	1000d939 	.word	0x1000d939

1000e0f4 <gapc_bond_cfm_handler_key_exch>:
1000e0f4:	b538      	push	{r3, r4, r5, lr}
1000e0f6:	2514      	movs	r5, #20
1000e0f8:	4c0d      	ldr	r4, [pc, #52]	; (1000e130 <gapc_bond_cfm_handler_key_exch+0x3c>)
1000e0fa:	70e3      	strb	r3, [r4, #3]
1000e0fc:	4b0d      	ldr	r3, [pc, #52]	; (1000e134 <gapc_bond_cfm_handler_key_exch+0x40>)
1000e0fe:	7025      	strb	r5, [r4, #0]
1000e100:	3d06      	subs	r5, #6
1000e102:	7065      	strb	r5, [r4, #1]
1000e104:	70a5      	strb	r5, [r4, #2]
1000e106:	881d      	ldrh	r5, [r3, #0]
1000e108:	881b      	ldrh	r3, [r3, #0]
1000e10a:	7220      	strb	r0, [r4, #8]
1000e10c:	0a1b      	lsrs	r3, r3, #8
1000e10e:	7163      	strb	r3, [r4, #5]
1000e110:	7261      	strb	r1, [r4, #9]
1000e112:	4b09      	ldr	r3, [pc, #36]	; (1000e138 <gapc_bond_cfm_handler_key_exch+0x44>)
1000e114:	1c11      	adds	r1, r2, #0
1000e116:	4809      	ldr	r0, [pc, #36]	; (1000e13c <gapc_bond_cfm_handler_key_exch+0x48>)
1000e118:	2210      	movs	r2, #16
1000e11a:	7125      	strb	r5, [r4, #4]
1000e11c:	4798      	blx	r3
1000e11e:	2312      	movs	r3, #18
1000e120:	71a3      	strb	r3, [r4, #6]
1000e122:	2300      	movs	r3, #0
1000e124:	1c20      	adds	r0, r4, #0
1000e126:	71e3      	strb	r3, [r4, #7]
1000e128:	211a      	movs	r1, #26
1000e12a:	4b05      	ldr	r3, [pc, #20]	; (1000e140 <gapc_bond_cfm_handler_key_exch+0x4c>)
1000e12c:	4798      	blx	r3
1000e12e:	bd38      	pop	{r3, r4, r5, pc}
1000e130:	10015634 	.word	0x10015634
1000e134:	100152c4 	.word	0x100152c4
1000e138:	10010423 	.word	0x10010423
1000e13c:	1001563e 	.word	0x1001563e
1000e140:	1000d939 	.word	0x1000d939

1000e144 <gapc_security_cmd_handler>:
1000e144:	221a      	movs	r2, #26
1000e146:	b508      	push	{r3, lr}
1000e148:	4b0b      	ldr	r3, [pc, #44]	; (1000e178 <gapc_security_cmd_handler+0x34>)
1000e14a:	701a      	strb	r2, [r3, #0]
1000e14c:	3a0c      	subs	r2, #12
1000e14e:	705a      	strb	r2, [r3, #1]
1000e150:	709a      	strb	r2, [r3, #2]
1000e152:	4a0a      	ldr	r2, [pc, #40]	; (1000e17c <gapc_security_cmd_handler+0x38>)
1000e154:	70d8      	strb	r0, [r3, #3]
1000e156:	8810      	ldrh	r0, [r2, #0]
1000e158:	8812      	ldrh	r2, [r2, #0]
1000e15a:	7118      	strb	r0, [r3, #4]
1000e15c:	0a12      	lsrs	r2, r2, #8
1000e15e:	715a      	strb	r2, [r3, #5]
1000e160:	220c      	movs	r2, #12
1000e162:	721a      	strb	r2, [r3, #8]
1000e164:	3a0a      	subs	r2, #10
1000e166:	719a      	strb	r2, [r3, #6]
1000e168:	2200      	movs	r2, #0
1000e16a:	7259      	strb	r1, [r3, #9]
1000e16c:	71da      	strb	r2, [r3, #7]
1000e16e:	1c18      	adds	r0, r3, #0
1000e170:	210a      	movs	r1, #10
1000e172:	4b03      	ldr	r3, [pc, #12]	; (1000e180 <gapc_security_cmd_handler+0x3c>)
1000e174:	4798      	blx	r3
1000e176:	bd08      	pop	{r3, pc}
1000e178:	10015634 	.word	0x10015634
1000e17c:	100152c4 	.word	0x100152c4
1000e180:	1000d939 	.word	0x1000d939

1000e184 <gapc_encrypt_cmd_handler>:
1000e184:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e186:	2500      	movs	r5, #0
1000e188:	b089      	sub	sp, #36	; 0x24
1000e18a:	9306      	str	r3, [sp, #24]
1000e18c:	ab0e      	add	r3, sp, #56	; 0x38
1000e18e:	781b      	ldrb	r3, [r3, #0]
1000e190:	1c17      	adds	r7, r2, #0
1000e192:	9307      	str	r3, [sp, #28]
1000e194:	ab0f      	add	r3, sp, #60	; 0x3c
1000e196:	781b      	ldrb	r3, [r3, #0]
1000e198:	4a19      	ldr	r2, [pc, #100]	; (1000e200 <gapc_encrypt_cmd_handler+0x7c>)
1000e19a:	1c06      	adds	r6, r0, #0
1000e19c:	9105      	str	r1, [sp, #20]
1000e19e:	9300      	str	r3, [sp, #0]
1000e1a0:	9002      	str	r0, [sp, #8]
1000e1a2:	1c29      	adds	r1, r5, #0
1000e1a4:	1c2b      	adds	r3, r5, #0
1000e1a6:	9501      	str	r5, [sp, #4]
1000e1a8:	1c10      	adds	r0, r2, #0
1000e1aa:	4c16      	ldr	r4, [pc, #88]	; (1000e204 <gapc_encrypt_cmd_handler+0x80>)
1000e1ac:	47a0      	blx	r4
1000e1ae:	2316      	movs	r3, #22
1000e1b0:	4c15      	ldr	r4, [pc, #84]	; (1000e208 <gapc_encrypt_cmd_handler+0x84>)
1000e1b2:	9905      	ldr	r1, [sp, #20]
1000e1b4:	7023      	strb	r3, [r4, #0]
1000e1b6:	3b08      	subs	r3, #8
1000e1b8:	7063      	strb	r3, [r4, #1]
1000e1ba:	70a3      	strb	r3, [r4, #2]
1000e1bc:	4b13      	ldr	r3, [pc, #76]	; (1000e20c <gapc_encrypt_cmd_handler+0x88>)
1000e1be:	70e6      	strb	r6, [r4, #3]
1000e1c0:	881a      	ldrh	r2, [r3, #0]
1000e1c2:	881b      	ldrh	r3, [r3, #0]
1000e1c4:	7122      	strb	r2, [r4, #4]
1000e1c6:	0a1b      	lsrs	r3, r3, #8
1000e1c8:	7163      	strb	r3, [r4, #5]
1000e1ca:	230b      	movs	r3, #11
1000e1cc:	4e10      	ldr	r6, [pc, #64]	; (1000e210 <gapc_encrypt_cmd_handler+0x8c>)
1000e1ce:	2210      	movs	r2, #16
1000e1d0:	4810      	ldr	r0, [pc, #64]	; (1000e214 <gapc_encrypt_cmd_handler+0x90>)
1000e1d2:	7223      	strb	r3, [r4, #8]
1000e1d4:	7265      	strb	r5, [r4, #9]
1000e1d6:	47b0      	blx	r6
1000e1d8:	0a3b      	lsrs	r3, r7, #8
1000e1da:	9906      	ldr	r1, [sp, #24]
1000e1dc:	2208      	movs	r2, #8
1000e1de:	480e      	ldr	r0, [pc, #56]	; (1000e218 <gapc_encrypt_cmd_handler+0x94>)
1000e1e0:	76e3      	strb	r3, [r4, #27]
1000e1e2:	76a7      	strb	r7, [r4, #26]
1000e1e4:	47b0      	blx	r6
1000e1e6:	466a      	mov	r2, sp
1000e1e8:	7f12      	ldrb	r2, [r2, #28]
1000e1ea:	1d63      	adds	r3, r4, #5
1000e1ec:	77da      	strb	r2, [r3, #31]
1000e1ee:	231d      	movs	r3, #29
1000e1f0:	1c20      	adds	r0, r4, #0
1000e1f2:	71a3      	strb	r3, [r4, #6]
1000e1f4:	2125      	movs	r1, #37	; 0x25
1000e1f6:	4b09      	ldr	r3, [pc, #36]	; (1000e21c <gapc_encrypt_cmd_handler+0x98>)
1000e1f8:	71e5      	strb	r5, [r4, #7]
1000e1fa:	4798      	blx	r3
1000e1fc:	b009      	add	sp, #36	; 0x24
1000e1fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e200:	100145a4 	.word	0x100145a4
1000e204:	1000dc3d 	.word	0x1000dc3d
1000e208:	10015634 	.word	0x10015634
1000e20c:	100152c4 	.word	0x100152c4
1000e210:	10010423 	.word	0x10010423
1000e214:	1001563e 	.word	0x1001563e
1000e218:	10015650 	.word	0x10015650
1000e21c:	1000d939 	.word	0x1000d939

1000e220 <gapc_encrypt_req_ind>:
1000e220:	b508      	push	{r3, lr}
1000e222:	0a00      	lsrs	r0, r0, #8
1000e224:	8010      	strh	r0, [r2, #0]
1000e226:	784b      	ldrb	r3, [r1, #1]
1000e228:	7808      	ldrb	r0, [r1, #0]
1000e22a:	021b      	lsls	r3, r3, #8
1000e22c:	4303      	orrs	r3, r0
1000e22e:	8053      	strh	r3, [r2, #2]
1000e230:	1d10      	adds	r0, r2, #4
1000e232:	3102      	adds	r1, #2
1000e234:	2208      	movs	r2, #8
1000e236:	4b01      	ldr	r3, [pc, #4]	; (1000e23c <gapc_encrypt_req_ind+0x1c>)
1000e238:	4798      	blx	r3
1000e23a:	bd08      	pop	{r3, pc}
1000e23c:	10010423 	.word	0x10010423

1000e240 <gapc_encrypt_cfm_handler>:
1000e240:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e242:	2500      	movs	r5, #0
1000e244:	b087      	sub	sp, #28
1000e246:	9304      	str	r3, [sp, #16]
1000e248:	ab0c      	add	r3, sp, #48	; 0x30
1000e24a:	781b      	ldrb	r3, [r3, #0]
1000e24c:	1c17      	adds	r7, r2, #0
1000e24e:	4a15      	ldr	r2, [pc, #84]	; (1000e2a4 <gapc_encrypt_cfm_handler+0x64>)
1000e250:	1c06      	adds	r6, r0, #0
1000e252:	9305      	str	r3, [sp, #20]
1000e254:	9100      	str	r1, [sp, #0]
1000e256:	9002      	str	r0, [sp, #8]
1000e258:	1c29      	adds	r1, r5, #0
1000e25a:	1c2b      	adds	r3, r5, #0
1000e25c:	9501      	str	r5, [sp, #4]
1000e25e:	1c10      	adds	r0, r2, #0
1000e260:	4c11      	ldr	r4, [pc, #68]	; (1000e2a8 <gapc_encrypt_cfm_handler+0x68>)
1000e262:	47a0      	blx	r4
1000e264:	2318      	movs	r3, #24
1000e266:	4c11      	ldr	r4, [pc, #68]	; (1000e2ac <gapc_encrypt_cfm_handler+0x6c>)
1000e268:	9904      	ldr	r1, [sp, #16]
1000e26a:	7023      	strb	r3, [r4, #0]
1000e26c:	3b0a      	subs	r3, #10
1000e26e:	7063      	strb	r3, [r4, #1]
1000e270:	70a3      	strb	r3, [r4, #2]
1000e272:	4b0f      	ldr	r3, [pc, #60]	; (1000e2b0 <gapc_encrypt_cfm_handler+0x70>)
1000e274:	480f      	ldr	r0, [pc, #60]	; (1000e2b4 <gapc_encrypt_cfm_handler+0x74>)
1000e276:	881a      	ldrh	r2, [r3, #0]
1000e278:	881b      	ldrh	r3, [r3, #0]
1000e27a:	7122      	strb	r2, [r4, #4]
1000e27c:	0a1b      	lsrs	r3, r3, #8
1000e27e:	7163      	strb	r3, [r4, #5]
1000e280:	2210      	movs	r2, #16
1000e282:	4b0d      	ldr	r3, [pc, #52]	; (1000e2b8 <gapc_encrypt_cfm_handler+0x78>)
1000e284:	70e6      	strb	r6, [r4, #3]
1000e286:	7227      	strb	r7, [r4, #8]
1000e288:	4798      	blx	r3
1000e28a:	466b      	mov	r3, sp
1000e28c:	7d1b      	ldrb	r3, [r3, #20]
1000e28e:	1c20      	adds	r0, r4, #0
1000e290:	7663      	strb	r3, [r4, #25]
1000e292:	2312      	movs	r3, #18
1000e294:	211a      	movs	r1, #26
1000e296:	71a3      	strb	r3, [r4, #6]
1000e298:	4b08      	ldr	r3, [pc, #32]	; (1000e2bc <gapc_encrypt_cfm_handler+0x7c>)
1000e29a:	71e5      	strb	r5, [r4, #7]
1000e29c:	4798      	blx	r3
1000e29e:	b007      	add	sp, #28
1000e2a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e2a2:	46c0      	nop			; (mov r8, r8)
1000e2a4:	100145b4 	.word	0x100145b4
1000e2a8:	1000dc3d 	.word	0x1000dc3d
1000e2ac:	10015634 	.word	0x10015634
1000e2b0:	100152c4 	.word	0x100152c4
1000e2b4:	1001563d 	.word	0x1001563d
1000e2b8:	10010423 	.word	0x10010423
1000e2bc:	1000d939 	.word	0x1000d939

1000e2c0 <gapc_encrypt_ind>:
1000e2c0:	780b      	ldrb	r3, [r1, #0]
1000e2c2:	0a00      	lsrs	r0, r0, #8
1000e2c4:	70d3      	strb	r3, [r2, #3]
1000e2c6:	2300      	movs	r3, #0
1000e2c8:	8010      	strh	r0, [r2, #0]
1000e2ca:	7093      	strb	r3, [r2, #2]
1000e2cc:	4770      	bx	lr
	...

1000e2d0 <gapc_param_update_cfm_handler>:
1000e2d0:	b538      	push	{r3, r4, r5, lr}
1000e2d2:	2410      	movs	r4, #16
1000e2d4:	1c05      	adds	r5, r0, #0
1000e2d6:	480e      	ldr	r0, [pc, #56]	; (1000e310 <gapc_param_update_cfm_handler+0x40>)
1000e2d8:	7004      	strb	r4, [r0, #0]
1000e2da:	3c02      	subs	r4, #2
1000e2dc:	7044      	strb	r4, [r0, #1]
1000e2de:	7084      	strb	r4, [r0, #2]
1000e2e0:	4c0c      	ldr	r4, [pc, #48]	; (1000e314 <gapc_param_update_cfm_handler+0x44>)
1000e2e2:	70c5      	strb	r5, [r0, #3]
1000e2e4:	8825      	ldrh	r5, [r4, #0]
1000e2e6:	8824      	ldrh	r4, [r4, #0]
1000e2e8:	72c3      	strb	r3, [r0, #11]
1000e2ea:	0a1b      	lsrs	r3, r3, #8
1000e2ec:	0a24      	lsrs	r4, r4, #8
1000e2ee:	7303      	strb	r3, [r0, #12]
1000e2f0:	2305      	movs	r3, #5
1000e2f2:	7144      	strb	r4, [r0, #5]
1000e2f4:	2400      	movs	r4, #0
1000e2f6:	7201      	strb	r1, [r0, #8]
1000e2f8:	7242      	strb	r2, [r0, #9]
1000e2fa:	7183      	strb	r3, [r0, #6]
1000e2fc:	0a12      	lsrs	r2, r2, #8
1000e2fe:	210d      	movs	r1, #13
1000e300:	4b05      	ldr	r3, [pc, #20]	; (1000e318 <gapc_param_update_cfm_handler+0x48>)
1000e302:	7105      	strb	r5, [r0, #4]
1000e304:	7282      	strb	r2, [r0, #10]
1000e306:	71c4      	strb	r4, [r0, #7]
1000e308:	4798      	blx	r3
1000e30a:	1c20      	adds	r0, r4, #0
1000e30c:	bd38      	pop	{r3, r4, r5, pc}
1000e30e:	46c0      	nop			; (mov r8, r8)
1000e310:	10015634 	.word	0x10015634
1000e314:	100152c4 	.word	0x100152c4
1000e318:	1000d939 	.word	0x1000d939

1000e31c <gapc_param_updated_ind>:
1000e31c:	2300      	movs	r3, #0
1000e31e:	0a00      	lsrs	r0, r0, #8
1000e320:	8010      	strh	r0, [r2, #0]
1000e322:	7093      	strb	r3, [r2, #2]
1000e324:	784b      	ldrb	r3, [r1, #1]
1000e326:	7808      	ldrb	r0, [r1, #0]
1000e328:	021b      	lsls	r3, r3, #8
1000e32a:	4303      	orrs	r3, r0
1000e32c:	8093      	strh	r3, [r2, #4]
1000e32e:	78cb      	ldrb	r3, [r1, #3]
1000e330:	7888      	ldrb	r0, [r1, #2]
1000e332:	021b      	lsls	r3, r3, #8
1000e334:	4303      	orrs	r3, r0
1000e336:	80d3      	strh	r3, [r2, #6]
1000e338:	794b      	ldrb	r3, [r1, #5]
1000e33a:	7909      	ldrb	r1, [r1, #4]
1000e33c:	021b      	lsls	r3, r3, #8
1000e33e:	430b      	orrs	r3, r1
1000e340:	2007      	movs	r0, #7
1000e342:	8113      	strh	r3, [r2, #8]
1000e344:	4770      	bx	lr

1000e346 <gapc_param_updated_req_ind>:
1000e346:	0a00      	lsrs	r0, r0, #8
1000e348:	8010      	strh	r0, [r2, #0]
1000e34a:	784b      	ldrb	r3, [r1, #1]
1000e34c:	7808      	ldrb	r0, [r1, #0]
1000e34e:	021b      	lsls	r3, r3, #8
1000e350:	4303      	orrs	r3, r0
1000e352:	8053      	strh	r3, [r2, #2]
1000e354:	78cb      	ldrb	r3, [r1, #3]
1000e356:	7888      	ldrb	r0, [r1, #2]
1000e358:	021b      	lsls	r3, r3, #8
1000e35a:	4303      	orrs	r3, r0
1000e35c:	8093      	strh	r3, [r2, #4]
1000e35e:	794b      	ldrb	r3, [r1, #5]
1000e360:	7908      	ldrb	r0, [r1, #4]
1000e362:	021b      	lsls	r3, r3, #8
1000e364:	4303      	orrs	r3, r0
1000e366:	80d3      	strh	r3, [r2, #6]
1000e368:	79cb      	ldrb	r3, [r1, #7]
1000e36a:	7989      	ldrb	r1, [r1, #6]
1000e36c:	021b      	lsls	r3, r3, #8
1000e36e:	430b      	orrs	r3, r1
1000e370:	2008      	movs	r0, #8
1000e372:	8113      	strh	r3, [r2, #8]
1000e374:	4770      	bx	lr
	...

1000e378 <gapc_dev_info_req_ind_handler>:
1000e378:	b508      	push	{r3, lr}
1000e37a:	1c0b      	adds	r3, r1, #0
1000e37c:	0a01      	lsrs	r1, r0, #8
1000e37e:	8011      	strh	r1, [r2, #0]
1000e380:	7818      	ldrb	r0, [r3, #0]
1000e382:	7090      	strb	r0, [r2, #2]
1000e384:	2800      	cmp	r0, #0
1000e386:	d104      	bne.n	1000e392 <gapc_dev_info_req_ind_handler+0x1a>
1000e388:	4b03      	ldr	r3, [pc, #12]	; (1000e398 <gapc_dev_info_req_ind_handler+0x20>)
1000e38a:	33aa      	adds	r3, #170	; 0xaa
1000e38c:	881b      	ldrh	r3, [r3, #0]
1000e38e:	2b00      	cmp	r3, #0
1000e390:	d001      	beq.n	1000e396 <gapc_dev_info_req_ind_handler+0x1e>
1000e392:	4b02      	ldr	r3, [pc, #8]	; (1000e39c <gapc_dev_info_req_ind_handler+0x24>)
1000e394:	4798      	blx	r3
1000e396:	bd08      	pop	{r3, pc}
1000e398:	10015356 	.word	0x10015356
1000e39c:	1000da49 	.word	0x1000da49

1000e3a0 <gapc_sec_req_ind>:
1000e3a0:	0a00      	lsrs	r0, r0, #8
1000e3a2:	8010      	strh	r0, [r2, #0]
1000e3a4:	7809      	ldrb	r1, [r1, #0]
1000e3a6:	2301      	movs	r3, #1
1000e3a8:	1c08      	adds	r0, r1, #0
1000e3aa:	0889      	lsrs	r1, r1, #2
1000e3ac:	4018      	ands	r0, r3
1000e3ae:	400b      	ands	r3, r1
1000e3b0:	70d0      	strb	r0, [r2, #3]
1000e3b2:	7113      	strb	r3, [r2, #4]
1000e3b4:	4770      	bx	lr

1000e3b6 <gapc_sign_counter_ind_handler>:
1000e3b6:	0a00      	lsrs	r0, r0, #8
1000e3b8:	8010      	strh	r0, [r2, #0]
1000e3ba:	784b      	ldrb	r3, [r1, #1]
1000e3bc:	0218      	lsls	r0, r3, #8
1000e3be:	788b      	ldrb	r3, [r1, #2]
1000e3c0:	041b      	lsls	r3, r3, #16
1000e3c2:	4303      	orrs	r3, r0
1000e3c4:	7808      	ldrb	r0, [r1, #0]
1000e3c6:	4303      	orrs	r3, r0
1000e3c8:	78c8      	ldrb	r0, [r1, #3]
1000e3ca:	0600      	lsls	r0, r0, #24
1000e3cc:	4303      	orrs	r3, r0
1000e3ce:	6053      	str	r3, [r2, #4]
1000e3d0:	794b      	ldrb	r3, [r1, #5]
1000e3d2:	0218      	lsls	r0, r3, #8
1000e3d4:	798b      	ldrb	r3, [r1, #6]
1000e3d6:	041b      	lsls	r3, r3, #16
1000e3d8:	4303      	orrs	r3, r0
1000e3da:	7908      	ldrb	r0, [r1, #4]
1000e3dc:	79c9      	ldrb	r1, [r1, #7]
1000e3de:	4303      	orrs	r3, r0
1000e3e0:	0609      	lsls	r1, r1, #24
1000e3e2:	430b      	orrs	r3, r1
1000e3e4:	2000      	movs	r0, #0
1000e3e6:	6093      	str	r3, [r2, #8]
1000e3e8:	4770      	bx	lr
	...

1000e3ec <gapc_peer_att_info_ind_handler>:
1000e3ec:	b510      	push	{r4, lr}
1000e3ee:	0a00      	lsrs	r0, r0, #8
1000e3f0:	8010      	strh	r0, [r2, #0]
1000e3f2:	7808      	ldrb	r0, [r1, #0]
1000e3f4:	7090      	strb	r0, [r2, #2]
1000e3f6:	788b      	ldrb	r3, [r1, #2]
1000e3f8:	784c      	ldrb	r4, [r1, #1]
1000e3fa:	021b      	lsls	r3, r3, #8
1000e3fc:	4323      	orrs	r3, r4
1000e3fe:	8093      	strh	r3, [r2, #4]
1000e400:	2801      	cmp	r0, #1
1000e402:	d027      	beq.n	1000e454 <gapc_peer_att_info_ind_handler+0x68>
1000e404:	2800      	cmp	r0, #0
1000e406:	d017      	beq.n	1000e438 <gapc_peer_att_info_ind_handler+0x4c>
1000e408:	2802      	cmp	r0, #2
1000e40a:	d12a      	bne.n	1000e462 <gapc_peer_att_info_ind_handler+0x76>
1000e40c:	790b      	ldrb	r3, [r1, #4]
1000e40e:	78c8      	ldrb	r0, [r1, #3]
1000e410:	021b      	lsls	r3, r3, #8
1000e412:	4303      	orrs	r3, r0
1000e414:	8113      	strh	r3, [r2, #8]
1000e416:	798b      	ldrb	r3, [r1, #6]
1000e418:	7948      	ldrb	r0, [r1, #5]
1000e41a:	021b      	lsls	r3, r3, #8
1000e41c:	4303      	orrs	r3, r0
1000e41e:	80d3      	strh	r3, [r2, #6]
1000e420:	7a0b      	ldrb	r3, [r1, #8]
1000e422:	79c8      	ldrb	r0, [r1, #7]
1000e424:	021b      	lsls	r3, r3, #8
1000e426:	4303      	orrs	r3, r0
1000e428:	8193      	strh	r3, [r2, #12]
1000e42a:	7a8b      	ldrb	r3, [r1, #10]
1000e42c:	7a49      	ldrb	r1, [r1, #9]
1000e42e:	021b      	lsls	r3, r3, #8
1000e430:	430b      	orrs	r3, r1
1000e432:	8153      	strh	r3, [r2, #10]
1000e434:	2306      	movs	r3, #6
1000e436:	e013      	b.n	1000e460 <gapc_peer_att_info_ind_handler+0x74>
1000e438:	1c14      	adds	r4, r2, #0
1000e43a:	1c20      	adds	r0, r4, #0
1000e43c:	790a      	ldrb	r2, [r1, #4]
1000e43e:	78cb      	ldrb	r3, [r1, #3]
1000e440:	0212      	lsls	r2, r2, #8
1000e442:	431a      	orrs	r2, r3
1000e444:	80e2      	strh	r2, [r4, #6]
1000e446:	4b07      	ldr	r3, [pc, #28]	; (1000e464 <gapc_peer_att_info_ind_handler+0x78>)
1000e448:	3008      	adds	r0, #8
1000e44a:	3105      	adds	r1, #5
1000e44c:	4798      	blx	r3
1000e44e:	2302      	movs	r3, #2
1000e450:	70a3      	strb	r3, [r4, #2]
1000e452:	e006      	b.n	1000e462 <gapc_peer_att_info_ind_handler+0x76>
1000e454:	790b      	ldrb	r3, [r1, #4]
1000e456:	78c9      	ldrb	r1, [r1, #3]
1000e458:	021b      	lsls	r3, r3, #8
1000e45a:	430b      	orrs	r3, r1
1000e45c:	80d3      	strh	r3, [r2, #6]
1000e45e:	2305      	movs	r3, #5
1000e460:	7093      	strb	r3, [r2, #2]
1000e462:	bd10      	pop	{r4, pc}
1000e464:	10010423 	.word	0x10010423

1000e468 <gapc_con_channel_map_ind_handler>:
1000e468:	b508      	push	{r3, lr}
1000e46a:	2300      	movs	r3, #0
1000e46c:	0a00      	lsrs	r0, r0, #8
1000e46e:	7013      	strb	r3, [r2, #0]
1000e470:	8050      	strh	r0, [r2, #2]
1000e472:	4b02      	ldr	r3, [pc, #8]	; (1000e47c <gapc_con_channel_map_ind_handler+0x14>)
1000e474:	1d10      	adds	r0, r2, #4
1000e476:	2205      	movs	r2, #5
1000e478:	4798      	blx	r3
1000e47a:	bd08      	pop	{r3, pc}
1000e47c:	10010423 	.word	0x10010423

1000e480 <gapc_lecb_connected>:
1000e480:	7843      	ldrb	r3, [r0, #1]
1000e482:	7802      	ldrb	r2, [r0, #0]
1000e484:	021b      	lsls	r3, r3, #8
1000e486:	4313      	orrs	r3, r2
1000e488:	800b      	strh	r3, [r1, #0]
1000e48a:	78c3      	ldrb	r3, [r0, #3]
1000e48c:	7882      	ldrb	r2, [r0, #2]
1000e48e:	021b      	lsls	r3, r3, #8
1000e490:	4313      	orrs	r3, r2
1000e492:	804b      	strh	r3, [r1, #2]
1000e494:	7943      	ldrb	r3, [r0, #5]
1000e496:	7902      	ldrb	r2, [r0, #4]
1000e498:	021b      	lsls	r3, r3, #8
1000e49a:	4313      	orrs	r3, r2
1000e49c:	808b      	strh	r3, [r1, #4]
1000e49e:	79c3      	ldrb	r3, [r0, #7]
1000e4a0:	7982      	ldrb	r2, [r0, #6]
1000e4a2:	021b      	lsls	r3, r3, #8
1000e4a4:	4313      	orrs	r3, r2
1000e4a6:	80cb      	strh	r3, [r1, #6]
1000e4a8:	2300      	movs	r3, #0
1000e4aa:	720b      	strb	r3, [r1, #8]
1000e4ac:	4770      	bx	lr

1000e4ae <gapc_lecb_disconnected>:
1000e4ae:	7843      	ldrb	r3, [r0, #1]
1000e4b0:	7802      	ldrb	r2, [r0, #0]
1000e4b2:	021b      	lsls	r3, r3, #8
1000e4b4:	4313      	orrs	r3, r2
1000e4b6:	800b      	strh	r3, [r1, #0]
1000e4b8:	78c3      	ldrb	r3, [r0, #3]
1000e4ba:	7882      	ldrb	r2, [r0, #2]
1000e4bc:	021b      	lsls	r3, r3, #8
1000e4be:	4313      	orrs	r3, r2
1000e4c0:	804b      	strh	r3, [r1, #2]
1000e4c2:	4770      	bx	lr

1000e4c4 <gapc_lecb_connect_req_ind>:
1000e4c4:	7843      	ldrb	r3, [r0, #1]
1000e4c6:	7802      	ldrb	r2, [r0, #0]
1000e4c8:	021b      	lsls	r3, r3, #8
1000e4ca:	4313      	orrs	r3, r2
1000e4cc:	800b      	strh	r3, [r1, #0]
1000e4ce:	78c3      	ldrb	r3, [r0, #3]
1000e4d0:	7882      	ldrb	r2, [r0, #2]
1000e4d2:	021b      	lsls	r3, r3, #8
1000e4d4:	4313      	orrs	r3, r2
1000e4d6:	804b      	strh	r3, [r1, #2]
1000e4d8:	7943      	ldrb	r3, [r0, #5]
1000e4da:	7902      	ldrb	r2, [r0, #4]
1000e4dc:	021b      	lsls	r3, r3, #8
1000e4de:	4313      	orrs	r3, r2
1000e4e0:	808b      	strh	r3, [r1, #4]
1000e4e2:	79c3      	ldrb	r3, [r0, #7]
1000e4e4:	7982      	ldrb	r2, [r0, #6]
1000e4e6:	021b      	lsls	r3, r3, #8
1000e4e8:	4313      	orrs	r3, r2
1000e4ea:	80cb      	strh	r3, [r1, #6]
1000e4ec:	4770      	bx	lr

1000e4ee <gapc_lecb_add_credit_resp_handler>:
1000e4ee:	7843      	ldrb	r3, [r0, #1]
1000e4f0:	7802      	ldrb	r2, [r0, #0]
1000e4f2:	021b      	lsls	r3, r3, #8
1000e4f4:	4313      	orrs	r3, r2
1000e4f6:	800b      	strh	r3, [r1, #0]
1000e4f8:	78c3      	ldrb	r3, [r0, #3]
1000e4fa:	7882      	ldrb	r2, [r0, #2]
1000e4fc:	021b      	lsls	r3, r3, #8
1000e4fe:	4313      	orrs	r3, r2
1000e500:	804b      	strh	r3, [r1, #2]
1000e502:	7943      	ldrb	r3, [r0, #5]
1000e504:	7902      	ldrb	r2, [r0, #4]
1000e506:	021b      	lsls	r3, r3, #8
1000e508:	4313      	orrs	r3, r2
1000e50a:	808b      	strh	r3, [r1, #4]
1000e50c:	4770      	bx	lr
	...

1000e510 <gapm_reset_req_handler>:
1000e510:	b573      	push	{r0, r1, r4, r5, r6, lr}
1000e512:	466b      	mov	r3, sp
1000e514:	4915      	ldr	r1, [pc, #84]	; (1000e56c <gapm_reset_req_handler+0x5c>)
1000e516:	4816      	ldr	r0, [pc, #88]	; (1000e570 <gapm_reset_req_handler+0x60>)
1000e518:	880c      	ldrh	r4, [r1, #0]
1000e51a:	8809      	ldrh	r1, [r1, #0]
1000e51c:	1ddd      	adds	r5, r3, #7
1000e51e:	0a09      	lsrs	r1, r1, #8
1000e520:	2300      	movs	r3, #0
1000e522:	2202      	movs	r2, #2
1000e524:	7141      	strb	r1, [r0, #5]
1000e526:	26d0      	movs	r6, #208	; 0xd0
1000e528:	2101      	movs	r1, #1
1000e52a:	7104      	strb	r4, [r0, #4]
1000e52c:	4c11      	ldr	r4, [pc, #68]	; (1000e574 <gapm_reset_req_handler+0x64>)
1000e52e:	702b      	strb	r3, [r5, #0]
1000e530:	7002      	strb	r2, [r0, #0]
1000e532:	70c3      	strb	r3, [r0, #3]
1000e534:	320b      	adds	r2, #11
1000e536:	7201      	strb	r1, [r0, #8]
1000e538:	7181      	strb	r1, [r0, #6]
1000e53a:	71c3      	strb	r3, [r0, #7]
1000e53c:	3108      	adds	r1, #8
1000e53e:	4b0e      	ldr	r3, [pc, #56]	; (1000e578 <gapm_reset_req_handler+0x68>)
1000e540:	0136      	lsls	r6, r6, #4
1000e542:	7042      	strb	r2, [r0, #1]
1000e544:	7082      	strb	r2, [r0, #2]
1000e546:	80a2      	strh	r2, [r4, #4]
1000e548:	8026      	strh	r6, [r4, #0]
1000e54a:	4798      	blx	r3
1000e54c:	1c28      	adds	r0, r5, #0
1000e54e:	4b0b      	ldr	r3, [pc, #44]	; (1000e57c <gapm_reset_req_handler+0x6c>)
1000e550:	4798      	blx	r3
1000e552:	782b      	ldrb	r3, [r5, #0]
1000e554:	20e2      	movs	r0, #226	; 0xe2
1000e556:	2b00      	cmp	r3, #0
1000e558:	d106      	bne.n	1000e568 <gapm_reset_req_handler+0x58>
1000e55a:	68a3      	ldr	r3, [r4, #8]
1000e55c:	20e2      	movs	r0, #226	; 0xe2
1000e55e:	781a      	ldrb	r2, [r3, #0]
1000e560:	785b      	ldrb	r3, [r3, #1]
1000e562:	2a01      	cmp	r2, #1
1000e564:	d100      	bne.n	1000e568 <gapm_reset_req_handler+0x58>
1000e566:	1c18      	adds	r0, r3, #0
1000e568:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
1000e56a:	46c0      	nop			; (mov r8, r8)
1000e56c:	100152c4 	.word	0x100152c4
1000e570:	10015634 	.word	0x10015634
1000e574:	100152b8 	.word	0x100152b8
1000e578:	1000d939 	.word	0x1000d939
1000e57c:	1000d99d 	.word	0x1000d99d

1000e580 <gapm_set_dev_config_cmd_handler>:
1000e580:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e582:	b089      	sub	sp, #36	; 0x24
1000e584:	9303      	str	r3, [sp, #12]
1000e586:	ab0e      	add	r3, sp, #56	; 0x38
1000e588:	781b      	ldrb	r3, [r3, #0]
1000e58a:	4c37      	ldr	r4, [pc, #220]	; (1000e668 <gapm_set_dev_config_cmd_handler+0xe8>)
1000e58c:	9304      	str	r3, [sp, #16]
1000e58e:	ab0f      	add	r3, sp, #60	; 0x3c
1000e590:	781b      	ldrb	r3, [r3, #0]
1000e592:	270d      	movs	r7, #13
1000e594:	9305      	str	r3, [sp, #20]
1000e596:	ab10      	add	r3, sp, #64	; 0x40
1000e598:	881b      	ldrh	r3, [r3, #0]
1000e59a:	72a1      	strb	r1, [r4, #10]
1000e59c:	9300      	str	r3, [sp, #0]
1000e59e:	ab11      	add	r3, sp, #68	; 0x44
1000e5a0:	881b      	ldrh	r3, [r3, #0]
1000e5a2:	0a09      	lsrs	r1, r1, #8
1000e5a4:	9301      	str	r3, [sp, #4]
1000e5a6:	ab12      	add	r3, sp, #72	; 0x48
1000e5a8:	881b      	ldrh	r3, [r3, #0]
1000e5aa:	7260      	strb	r0, [r4, #9]
1000e5ac:	9302      	str	r3, [sp, #8]
1000e5ae:	ab06      	add	r3, sp, #24
1000e5b0:	1dde      	adds	r6, r3, #7
1000e5b2:	2300      	movs	r3, #0
1000e5b4:	7033      	strb	r3, [r6, #0]
1000e5b6:	2304      	movs	r3, #4
1000e5b8:	7023      	strb	r3, [r4, #0]
1000e5ba:	2300      	movs	r3, #0
1000e5bc:	70e3      	strb	r3, [r4, #3]
1000e5be:	4b2b      	ldr	r3, [pc, #172]	; (1000e66c <gapm_set_dev_config_cmd_handler+0xec>)
1000e5c0:	72e1      	strb	r1, [r4, #11]
1000e5c2:	881d      	ldrh	r5, [r3, #0]
1000e5c4:	881b      	ldrh	r3, [r3, #0]
1000e5c6:	1c11      	adds	r1, r2, #0
1000e5c8:	0a1b      	lsrs	r3, r3, #8
1000e5ca:	7163      	strb	r3, [r4, #5]
1000e5cc:	2303      	movs	r3, #3
1000e5ce:	7125      	strb	r5, [r4, #4]
1000e5d0:	2206      	movs	r2, #6
1000e5d2:	4d27      	ldr	r5, [pc, #156]	; (1000e670 <gapm_set_dev_config_cmd_handler+0xf0>)
1000e5d4:	4827      	ldr	r0, [pc, #156]	; (1000e674 <gapm_set_dev_config_cmd_handler+0xf4>)
1000e5d6:	7223      	strb	r3, [r4, #8]
1000e5d8:	7067      	strb	r7, [r4, #1]
1000e5da:	70a7      	strb	r7, [r4, #2]
1000e5dc:	47a8      	blx	r5
1000e5de:	9903      	ldr	r1, [sp, #12]
1000e5e0:	2210      	movs	r2, #16
1000e5e2:	4825      	ldr	r0, [pc, #148]	; (1000e678 <gapm_set_dev_config_cmd_handler+0xf8>)
1000e5e4:	47a8      	blx	r5
1000e5e6:	466a      	mov	r2, sp
1000e5e8:	7c12      	ldrb	r2, [r2, #16]
1000e5ea:	1ce3      	adds	r3, r4, #3
1000e5ec:	77da      	strb	r2, [r3, #31]
1000e5ee:	466a      	mov	r2, sp
1000e5f0:	7d12      	ldrb	r2, [r2, #20]
1000e5f2:	1d23      	adds	r3, r4, #4
1000e5f4:	77da      	strb	r2, [r3, #31]
1000e5f6:	466a      	mov	r2, sp
1000e5f8:	7812      	ldrb	r2, [r2, #0]
1000e5fa:	1d63      	adds	r3, r4, #5
1000e5fc:	77da      	strb	r2, [r3, #31]
1000e5fe:	9b00      	ldr	r3, [sp, #0]
1000e600:	1da2      	adds	r2, r4, #6
1000e602:	0a1b      	lsrs	r3, r3, #8
1000e604:	77d3      	strb	r3, [r2, #31]
1000e606:	466a      	mov	r2, sp
1000e608:	7912      	ldrb	r2, [r2, #4]
1000e60a:	1de3      	adds	r3, r4, #7
1000e60c:	77da      	strb	r2, [r3, #31]
1000e60e:	1c22      	adds	r2, r4, #0
1000e610:	9b01      	ldr	r3, [sp, #4]
1000e612:	3208      	adds	r2, #8
1000e614:	0a1b      	lsrs	r3, r3, #8
1000e616:	77d3      	strb	r3, [r2, #31]
1000e618:	466a      	mov	r2, sp
1000e61a:	1c23      	adds	r3, r4, #0
1000e61c:	7a12      	ldrb	r2, [r2, #8]
1000e61e:	3328      	adds	r3, #40	; 0x28
1000e620:	701a      	strb	r2, [r3, #0]
1000e622:	1c22      	adds	r2, r4, #0
1000e624:	9b02      	ldr	r3, [sp, #8]
1000e626:	3229      	adds	r2, #41	; 0x29
1000e628:	0a1b      	lsrs	r3, r3, #8
1000e62a:	7013      	strb	r3, [r2, #0]
1000e62c:	23d0      	movs	r3, #208	; 0xd0
1000e62e:	4d13      	ldr	r5, [pc, #76]	; (1000e67c <gapm_set_dev_config_cmd_handler+0xfc>)
1000e630:	011b      	lsls	r3, r3, #4
1000e632:	802b      	strh	r3, [r5, #0]
1000e634:	2322      	movs	r3, #34	; 0x22
1000e636:	71a3      	strb	r3, [r4, #6]
1000e638:	2300      	movs	r3, #0
1000e63a:	212a      	movs	r1, #42	; 0x2a
1000e63c:	71e3      	strb	r3, [r4, #7]
1000e63e:	1c20      	adds	r0, r4, #0
1000e640:	4b0f      	ldr	r3, [pc, #60]	; (1000e680 <gapm_set_dev_config_cmd_handler+0x100>)
1000e642:	80af      	strh	r7, [r5, #4]
1000e644:	4798      	blx	r3
1000e646:	1c30      	adds	r0, r6, #0
1000e648:	4b0e      	ldr	r3, [pc, #56]	; (1000e684 <gapm_set_dev_config_cmd_handler+0x104>)
1000e64a:	4798      	blx	r3
1000e64c:	7833      	ldrb	r3, [r6, #0]
1000e64e:	20e2      	movs	r0, #226	; 0xe2
1000e650:	2b00      	cmp	r3, #0
1000e652:	d106      	bne.n	1000e662 <gapm_set_dev_config_cmd_handler+0xe2>
1000e654:	68ab      	ldr	r3, [r5, #8]
1000e656:	20e2      	movs	r0, #226	; 0xe2
1000e658:	781a      	ldrb	r2, [r3, #0]
1000e65a:	785b      	ldrb	r3, [r3, #1]
1000e65c:	2a03      	cmp	r2, #3
1000e65e:	d100      	bne.n	1000e662 <gapm_set_dev_config_cmd_handler+0xe2>
1000e660:	1c18      	adds	r0, r3, #0
1000e662:	b009      	add	sp, #36	; 0x24
1000e664:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e666:	46c0      	nop			; (mov r8, r8)
1000e668:	10015634 	.word	0x10015634
1000e66c:	100152c4 	.word	0x100152c4
1000e670:	10010423 	.word	0x10010423
1000e674:	10015640 	.word	0x10015640
1000e678:	10015646 	.word	0x10015646
1000e67c:	100152b8 	.word	0x100152b8
1000e680:	1000d939 	.word	0x1000d939
1000e684:	1000d99d 	.word	0x1000d99d

1000e688 <gapm_get_dev_config_cmd_handler>:
1000e688:	4684      	mov	ip, r0
1000e68a:	4663      	mov	r3, ip
1000e68c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e68e:	b085      	sub	sp, #20
1000e690:	9100      	str	r1, [sp, #0]
1000e692:	20cf      	movs	r0, #207	; 0xcf
1000e694:	2b01      	cmp	r3, #1
1000e696:	d854      	bhi.n	1000e742 <gapm_get_dev_config_cmd_handler+0xba>
1000e698:	2900      	cmp	r1, #0
1000e69a:	d052      	beq.n	1000e742 <gapm_get_dev_config_cmd_handler+0xba>
1000e69c:	2200      	movs	r2, #0
1000e69e:	492a      	ldr	r1, [pc, #168]	; (1000e748 <gapm_get_dev_config_cmd_handler+0xc0>)
1000e6a0:	ab02      	add	r3, sp, #8
1000e6a2:	880c      	ldrh	r4, [r1, #0]
1000e6a4:	8809      	ldrh	r1, [r1, #0]
1000e6a6:	1d9f      	adds	r7, r3, #6
1000e6a8:	719a      	strb	r2, [r3, #6]
1000e6aa:	4b28      	ldr	r3, [pc, #160]	; (1000e74c <gapm_get_dev_config_cmd_handler+0xc4>)
1000e6ac:	0a09      	lsrs	r1, r1, #8
1000e6ae:	250d      	movs	r5, #13
1000e6b0:	2606      	movs	r6, #6
1000e6b2:	7159      	strb	r1, [r3, #5]
1000e6b4:	4661      	mov	r1, ip
1000e6b6:	701e      	strb	r6, [r3, #0]
1000e6b8:	705d      	strb	r5, [r3, #1]
1000e6ba:	709d      	strb	r5, [r3, #2]
1000e6bc:	70da      	strb	r2, [r3, #3]
1000e6be:	711c      	strb	r4, [r3, #4]
1000e6c0:	2901      	cmp	r1, #1
1000e6c2:	d13e      	bne.n	1000e742 <gapm_get_dev_config_cmd_handler+0xba>
1000e6c4:	21d0      	movs	r1, #208	; 0xd0
1000e6c6:	4c22      	ldr	r4, [pc, #136]	; (1000e750 <gapm_get_dev_config_cmd_handler+0xc8>)
1000e6c8:	0109      	lsls	r1, r1, #4
1000e6ca:	8061      	strh	r1, [r4, #2]
1000e6cc:	4921      	ldr	r1, [pc, #132]	; (1000e754 <gapm_get_dev_config_cmd_handler+0xcc>)
1000e6ce:	71da      	strb	r2, [r3, #7]
1000e6d0:	8021      	strh	r1, [r4, #0]
1000e6d2:	4661      	mov	r1, ip
1000e6d4:	721e      	strb	r6, [r3, #8]
1000e6d6:	7199      	strb	r1, [r3, #6]
1000e6d8:	1c18      	adds	r0, r3, #0
1000e6da:	2109      	movs	r1, #9
1000e6dc:	4b1e      	ldr	r3, [pc, #120]	; (1000e758 <gapm_get_dev_config_cmd_handler+0xd0>)
1000e6de:	80a5      	strh	r5, [r4, #4]
1000e6e0:	4798      	blx	r3
1000e6e2:	1c38      	adds	r0, r7, #0
1000e6e4:	4b1d      	ldr	r3, [pc, #116]	; (1000e75c <gapm_get_dev_config_cmd_handler+0xd4>)
1000e6e6:	4798      	blx	r3
1000e6e8:	783b      	ldrb	r3, [r7, #0]
1000e6ea:	20e2      	movs	r0, #226	; 0xe2
1000e6ec:	9301      	str	r3, [sp, #4]
1000e6ee:	2b00      	cmp	r3, #0
1000e6f0:	d127      	bne.n	1000e742 <gapm_get_dev_config_cmd_handler+0xba>
1000e6f2:	8821      	ldrh	r1, [r4, #0]
1000e6f4:	4a1a      	ldr	r2, [pc, #104]	; (1000e760 <gapm_get_dev_config_cmd_handler+0xd8>)
1000e6f6:	68a7      	ldr	r7, [r4, #8]
1000e6f8:	3b01      	subs	r3, #1
1000e6fa:	4291      	cmp	r1, r2
1000e6fc:	d001      	beq.n	1000e702 <gapm_get_dev_config_cmd_handler+0x7a>
1000e6fe:	8023      	strh	r3, [r4, #0]
1000e700:	e01a      	b.n	1000e738 <gapm_get_dev_config_cmd_handler+0xb0>
1000e702:	8063      	strh	r3, [r4, #2]
1000e704:	9b00      	ldr	r3, [sp, #0]
1000e706:	1c39      	adds	r1, r7, #0
1000e708:	1c58      	adds	r0, r3, #1
1000e70a:	1c32      	adds	r2, r6, #0
1000e70c:	4b15      	ldr	r3, [pc, #84]	; (1000e764 <gapm_get_dev_config_cmd_handler+0xdc>)
1000e70e:	4798      	blx	r3
1000e710:	79bb      	ldrb	r3, [r7, #6]
1000e712:	9a00      	ldr	r2, [sp, #0]
1000e714:	7013      	strb	r3, [r2, #0]
1000e716:	23d0      	movs	r3, #208	; 0xd0
1000e718:	011b      	lsls	r3, r3, #4
1000e71a:	8023      	strh	r3, [r4, #0]
1000e71c:	ab02      	add	r3, sp, #8
1000e71e:	80a5      	strh	r5, [r4, #4]
1000e720:	1ddd      	adds	r5, r3, #7
1000e722:	466b      	mov	r3, sp
1000e724:	791b      	ldrb	r3, [r3, #4]
1000e726:	1c28      	adds	r0, r5, #0
1000e728:	702b      	strb	r3, [r5, #0]
1000e72a:	4b0c      	ldr	r3, [pc, #48]	; (1000e75c <gapm_get_dev_config_cmd_handler+0xd4>)
1000e72c:	4798      	blx	r3
1000e72e:	782b      	ldrb	r3, [r5, #0]
1000e730:	20d0      	movs	r0, #208	; 0xd0
1000e732:	2b00      	cmp	r3, #0
1000e734:	d105      	bne.n	1000e742 <gapm_get_dev_config_cmd_handler+0xba>
1000e736:	68a7      	ldr	r7, [r4, #8]
1000e738:	783b      	ldrb	r3, [r7, #0]
1000e73a:	7878      	ldrb	r0, [r7, #1]
1000e73c:	2b06      	cmp	r3, #6
1000e73e:	d000      	beq.n	1000e742 <gapm_get_dev_config_cmd_handler+0xba>
1000e740:	20e2      	movs	r0, #226	; 0xe2
1000e742:	b005      	add	sp, #20
1000e744:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e746:	46c0      	nop			; (mov r8, r8)
1000e748:	100152c4 	.word	0x100152c4
1000e74c:	10015634 	.word	0x10015634
1000e750:	100152b8 	.word	0x100152b8
1000e754:	00000d08 	.word	0x00000d08
1000e758:	1000d939 	.word	0x1000d939
1000e75c:	1000d99d 	.word	0x1000d99d
1000e760:	0000ffff 	.word	0x0000ffff
1000e764:	10010423 	.word	0x10010423

1000e768 <gapm_cancel_cmd_handler>:
1000e768:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000e76a:	4916      	ldr	r1, [pc, #88]	; (1000e7c4 <gapm_cancel_cmd_handler+0x5c>)
1000e76c:	4816      	ldr	r0, [pc, #88]	; (1000e7c8 <gapm_cancel_cmd_handler+0x60>)
1000e76e:	880c      	ldrh	r4, [r1, #0]
1000e770:	8809      	ldrh	r1, [r1, #0]
1000e772:	466b      	mov	r3, sp
1000e774:	0a09      	lsrs	r1, r1, #8
1000e776:	7141      	strb	r1, [r0, #5]
1000e778:	2102      	movs	r1, #2
1000e77a:	2203      	movs	r2, #3
1000e77c:	7201      	strb	r1, [r0, #8]
1000e77e:	21d0      	movs	r1, #208	; 0xd0
1000e780:	1ddd      	adds	r5, r3, #7
1000e782:	2300      	movs	r3, #0
1000e784:	7104      	strb	r4, [r0, #4]
1000e786:	4c11      	ldr	r4, [pc, #68]	; (1000e7cc <gapm_cancel_cmd_handler+0x64>)
1000e788:	7002      	strb	r2, [r0, #0]
1000e78a:	0109      	lsls	r1, r1, #4
1000e78c:	320a      	adds	r2, #10
1000e78e:	702b      	strb	r3, [r5, #0]
1000e790:	7042      	strb	r2, [r0, #1]
1000e792:	7082      	strb	r2, [r0, #2]
1000e794:	70c3      	strb	r3, [r0, #3]
1000e796:	8021      	strh	r1, [r4, #0]
1000e798:	80a2      	strh	r2, [r4, #4]
1000e79a:	71c3      	strb	r3, [r0, #7]
1000e79c:	3a0c      	subs	r2, #12
1000e79e:	2109      	movs	r1, #9
1000e7a0:	4b0b      	ldr	r3, [pc, #44]	; (1000e7d0 <gapm_cancel_cmd_handler+0x68>)
1000e7a2:	7182      	strb	r2, [r0, #6]
1000e7a4:	4798      	blx	r3
1000e7a6:	1c28      	adds	r0, r5, #0
1000e7a8:	4b0a      	ldr	r3, [pc, #40]	; (1000e7d4 <gapm_cancel_cmd_handler+0x6c>)
1000e7aa:	4798      	blx	r3
1000e7ac:	7828      	ldrb	r0, [r5, #0]
1000e7ae:	2800      	cmp	r0, #0
1000e7b0:	d001      	beq.n	1000e7b6 <gapm_cancel_cmd_handler+0x4e>
1000e7b2:	20e2      	movs	r0, #226	; 0xe2
1000e7b4:	e004      	b.n	1000e7c0 <gapm_cancel_cmd_handler+0x58>
1000e7b6:	68a3      	ldr	r3, [r4, #8]
1000e7b8:	785b      	ldrb	r3, [r3, #1]
1000e7ba:	2b44      	cmp	r3, #68	; 0x44
1000e7bc:	d000      	beq.n	1000e7c0 <gapm_cancel_cmd_handler+0x58>
1000e7be:	1c18      	adds	r0, r3, #0
1000e7c0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000e7c2:	46c0      	nop			; (mov r8, r8)
1000e7c4:	100152c4 	.word	0x100152c4
1000e7c8:	10015634 	.word	0x10015634
1000e7cc:	100152b8 	.word	0x100152b8
1000e7d0:	1000d939 	.word	0x1000d939
1000e7d4:	1000d99d 	.word	0x1000d99d

1000e7d8 <gapm_dev_bdaddr_ind_handler>:
1000e7d8:	b538      	push	{r3, r4, r5, lr}
1000e7da:	1c05      	adds	r5, r0, #0
1000e7dc:	1c0c      	adds	r4, r1, #0
1000e7de:	1c48      	adds	r0, r1, #1
1000e7e0:	2206      	movs	r2, #6
1000e7e2:	1c29      	adds	r1, r5, #0
1000e7e4:	4b02      	ldr	r3, [pc, #8]	; (1000e7f0 <gapm_dev_bdaddr_ind_handler+0x18>)
1000e7e6:	4798      	blx	r3
1000e7e8:	79ab      	ldrb	r3, [r5, #6]
1000e7ea:	2000      	movs	r0, #0
1000e7ec:	7023      	strb	r3, [r4, #0]
1000e7ee:	bd38      	pop	{r3, r4, r5, pc}
1000e7f0:	10010423 	.word	0x10010423

1000e7f4 <gapm_cmp_evt>:
1000e7f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000e7f6:	7803      	ldrb	r3, [r0, #0]
1000e7f8:	7845      	ldrb	r5, [r0, #1]
1000e7fa:	3b0c      	subs	r3, #12
1000e7fc:	1e18      	subs	r0, r3, #0
1000e7fe:	280b      	cmp	r0, #11
1000e800:	d900      	bls.n	1000e804 <gapm_cmp_evt+0x10>
1000e802:	e08d      	b.n	1000e920 <gapm_cmp_evt+0x12c>
1000e804:	1c0c      	adds	r4, r1, #0
1000e806:	f000 fd7d 	bl	1000f304 <__gnu_thumb1_case_uqi>
1000e80a:	1952      	.short	0x1952
1000e80c:	068b1919 	.word	0x068b1919
1000e810:	8b595906 	.word	0x8b595906
1000e814:	0d8b      	.short	0x0d8b
1000e816:	2300      	movs	r3, #0
1000e818:	2d45      	cmp	r5, #69	; 0x45
1000e81a:	d000      	beq.n	1000e81e <gapm_cmp_evt+0x2a>
1000e81c:	1c2b      	adds	r3, r5, #0
1000e81e:	7023      	strb	r3, [r4, #0]
1000e820:	2002      	movs	r0, #2
1000e822:	e07e      	b.n	1000e922 <gapm_cmp_evt+0x12e>
1000e824:	203b      	movs	r0, #59	; 0x3b
1000e826:	2d00      	cmp	r5, #0
1000e828:	d100      	bne.n	1000e82c <gapm_cmp_evt+0x38>
1000e82a:	e07a      	b.n	1000e922 <gapm_cmp_evt+0x12e>
1000e82c:	700d      	strb	r5, [r1, #0]
1000e82e:	1c48      	adds	r0, r1, #1
1000e830:	2210      	movs	r2, #16
1000e832:	2100      	movs	r1, #0
1000e834:	4b3b      	ldr	r3, [pc, #236]	; (1000e924 <gapm_cmp_evt+0x130>)
1000e836:	4798      	blx	r3
1000e838:	200f      	movs	r0, #15
1000e83a:	e072      	b.n	1000e922 <gapm_cmp_evt+0x12e>
1000e83c:	2d00      	cmp	r5, #0
1000e83e:	d134      	bne.n	1000e8aa <gapm_cmp_evt+0xb6>
1000e840:	4b39      	ldr	r3, [pc, #228]	; (1000e928 <gapm_cmp_evt+0x134>)
1000e842:	4798      	blx	r3
1000e844:	1e43      	subs	r3, r0, #1
1000e846:	b2db      	uxtb	r3, r3
1000e848:	1c28      	adds	r0, r5, #0
1000e84a:	2b06      	cmp	r3, #6
1000e84c:	d869      	bhi.n	1000e922 <gapm_cmp_evt+0x12e>
1000e84e:	466b      	mov	r3, sp
1000e850:	4e36      	ldr	r6, [pc, #216]	; (1000e92c <gapm_cmp_evt+0x138>)
1000e852:	1dd9      	adds	r1, r3, #7
1000e854:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
1000e856:	4b36      	ldr	r3, [pc, #216]	; (1000e930 <gapm_cmp_evt+0x13c>)
1000e858:	4798      	blx	r3
1000e85a:	2312      	movs	r3, #18
1000e85c:	4358      	muls	r0, r3
1000e85e:	4935      	ldr	r1, [pc, #212]	; (1000e934 <gapm_cmp_evt+0x140>)
1000e860:	1809      	adds	r1, r1, r0
1000e862:	1c0b      	adds	r3, r1, #0
1000e864:	894a      	ldrh	r2, [r1, #10]
1000e866:	3308      	adds	r3, #8
1000e868:	8122      	strh	r2, [r4, #8]
1000e86a:	784f      	ldrb	r7, [r1, #1]
1000e86c:	72a5      	strb	r5, [r4, #10]
1000e86e:	7027      	strb	r7, [r4, #0]
1000e870:	898a      	ldrh	r2, [r1, #12]
1000e872:	1c60      	adds	r0, r4, #1
1000e874:	81a2      	strh	r2, [r4, #12]
1000e876:	88db      	ldrh	r3, [r3, #6]
1000e878:	3102      	adds	r1, #2
1000e87a:	81e3      	strh	r3, [r4, #14]
1000e87c:	89cb      	ldrh	r3, [r1, #14]
1000e87e:	2206      	movs	r2, #6
1000e880:	8223      	strh	r3, [r4, #16]
1000e882:	4b2d      	ldr	r3, [pc, #180]	; (1000e938 <gapm_cmp_evt+0x144>)
1000e884:	4798      	blx	r3
1000e886:	2f00      	cmp	r7, #0
1000e888:	d00a      	beq.n	1000e8a0 <gapm_cmp_evt+0xac>
1000e88a:	79a3      	ldrb	r3, [r4, #6]
1000e88c:	223f      	movs	r2, #63	; 0x3f
1000e88e:	1c19      	adds	r1, r3, #0
1000e890:	3501      	adds	r5, #1
1000e892:	4391      	bics	r1, r2
1000e894:	29c0      	cmp	r1, #192	; 0xc0
1000e896:	d003      	beq.n	1000e8a0 <gapm_cmp_evt+0xac>
1000e898:	065b      	lsls	r3, r3, #25
1000e89a:	0fdb      	lsrs	r3, r3, #31
1000e89c:	3502      	adds	r5, #2
1000e89e:	1aed      	subs	r5, r5, r3
1000e8a0:	2301      	movs	r3, #1
1000e8a2:	425b      	negs	r3, r3
1000e8a4:	7025      	strb	r5, [r4, #0]
1000e8a6:	85b3      	strh	r3, [r6, #44]	; 0x2c
1000e8a8:	e038      	b.n	1000e91c <gapm_cmp_evt+0x128>
1000e8aa:	700d      	strb	r5, [r1, #0]
1000e8ac:	e004      	b.n	1000e8b8 <gapm_cmp_evt+0xc4>
1000e8ae:	2300      	movs	r3, #0
1000e8b0:	2d45      	cmp	r5, #69	; 0x45
1000e8b2:	d000      	beq.n	1000e8b6 <gapm_cmp_evt+0xc2>
1000e8b4:	1c2b      	adds	r3, r5, #0
1000e8b6:	7023      	strb	r3, [r4, #0]
1000e8b8:	2003      	movs	r0, #3
1000e8ba:	e032      	b.n	1000e922 <gapm_cmp_evt+0x12e>
1000e8bc:	4e1b      	ldr	r6, [pc, #108]	; (1000e92c <gapm_cmp_evt+0x138>)
1000e8be:	2100      	movs	r1, #0
1000e8c0:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
1000e8c2:	4b1b      	ldr	r3, [pc, #108]	; (1000e930 <gapm_cmp_evt+0x13c>)
1000e8c4:	4798      	blx	r3
1000e8c6:	2807      	cmp	r0, #7
1000e8c8:	d818      	bhi.n	1000e8fc <gapm_cmp_evt+0x108>
1000e8ca:	2301      	movs	r3, #1
1000e8cc:	425b      	negs	r3, r3
1000e8ce:	85b3      	strh	r3, [r6, #44]	; 0x2c
1000e8d0:	3313      	adds	r3, #19
1000e8d2:	4358      	muls	r0, r3
1000e8d4:	4917      	ldr	r1, [pc, #92]	; (1000e934 <gapm_cmp_evt+0x140>)
1000e8d6:	1809      	adds	r1, r1, r0
1000e8d8:	1c0b      	adds	r3, r1, #0
1000e8da:	894a      	ldrh	r2, [r1, #10]
1000e8dc:	3308      	adds	r3, #8
1000e8de:	8122      	strh	r2, [r4, #8]
1000e8e0:	784a      	ldrb	r2, [r1, #1]
1000e8e2:	72a5      	strb	r5, [r4, #10]
1000e8e4:	7022      	strb	r2, [r4, #0]
1000e8e6:	898a      	ldrh	r2, [r1, #12]
1000e8e8:	1c60      	adds	r0, r4, #1
1000e8ea:	81a2      	strh	r2, [r4, #12]
1000e8ec:	88db      	ldrh	r3, [r3, #6]
1000e8ee:	3102      	adds	r1, #2
1000e8f0:	81e3      	strh	r3, [r4, #14]
1000e8f2:	89cb      	ldrh	r3, [r1, #14]
1000e8f4:	2206      	movs	r2, #6
1000e8f6:	8223      	strh	r3, [r4, #16]
1000e8f8:	4b0f      	ldr	r3, [pc, #60]	; (1000e938 <gapm_cmp_evt+0x144>)
1000e8fa:	4798      	blx	r3
1000e8fc:	2200      	movs	r2, #0
1000e8fe:	7823      	ldrb	r3, [r4, #0]
1000e900:	4293      	cmp	r3, r2
1000e902:	d00a      	beq.n	1000e91a <gapm_cmp_evt+0x126>
1000e904:	79a3      	ldrb	r3, [r4, #6]
1000e906:	323f      	adds	r2, #63	; 0x3f
1000e908:	1c19      	adds	r1, r3, #0
1000e90a:	4391      	bics	r1, r2
1000e90c:	3a3e      	subs	r2, #62	; 0x3e
1000e90e:	29c0      	cmp	r1, #192	; 0xc0
1000e910:	d003      	beq.n	1000e91a <gapm_cmp_evt+0x126>
1000e912:	065b      	lsls	r3, r3, #25
1000e914:	0fdb      	lsrs	r3, r3, #31
1000e916:	3202      	adds	r2, #2
1000e918:	1ad2      	subs	r2, r2, r3
1000e91a:	7022      	strb	r2, [r4, #0]
1000e91c:	2005      	movs	r0, #5
1000e91e:	e000      	b.n	1000e922 <gapm_cmp_evt+0x12e>
1000e920:	2000      	movs	r0, #0
1000e922:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000e924:	10010435 	.word	0x10010435
1000e928:	1000db45 	.word	0x1000db45
1000e92c:	10015356 	.word	0x10015356
1000e930:	1000db09 	.word	0x1000db09
1000e934:	100152c6 	.word	0x100152c6
1000e938:	10010423 	.word	0x10010423

1000e93c <get_gap_local_addr_type>:
1000e93c:	4b04      	ldr	r3, [pc, #16]	; (1000e950 <get_gap_local_addr_type+0x14>)
1000e93e:	2001      	movs	r0, #1
1000e940:	791b      	ldrb	r3, [r3, #4]
1000e942:	2b02      	cmp	r3, #2
1000e944:	d003      	beq.n	1000e94e <get_gap_local_addr_type+0x12>
1000e946:	3b03      	subs	r3, #3
1000e948:	4258      	negs	r0, r3
1000e94a:	4158      	adcs	r0, r3
1000e94c:	0040      	lsls	r0, r0, #1
1000e94e:	4770      	bx	lr
1000e950:	10015356 	.word	0x10015356

1000e954 <gapm_start_scan_cmd_handler>:
1000e954:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e956:	b085      	sub	sp, #20
1000e958:	ab0a      	add	r3, sp, #40	; 0x28
1000e95a:	881e      	ldrh	r6, [r3, #0]
1000e95c:	ab0b      	add	r3, sp, #44	; 0x2c
1000e95e:	881d      	ldrh	r5, [r3, #0]
1000e960:	ab0c      	add	r3, sp, #48	; 0x30
1000e962:	781b      	ldrb	r3, [r3, #0]
1000e964:	4f1e      	ldr	r7, [pc, #120]	; (1000e9e0 <gapm_start_scan_cmd_handler+0x8c>)
1000e966:	9301      	str	r3, [sp, #4]
1000e968:	ab0d      	add	r3, sp, #52	; 0x34
1000e96a:	781b      	ldrb	r3, [r3, #0]
1000e96c:	9100      	str	r1, [sp, #0]
1000e96e:	9302      	str	r3, [sp, #8]
1000e970:	ab0e      	add	r3, sp, #56	; 0x38
1000e972:	781b      	ldrb	r3, [r3, #0]
1000e974:	8839      	ldrh	r1, [r7, #0]
1000e976:	9303      	str	r3, [sp, #12]
1000e978:	ab0f      	add	r3, sp, #60	; 0x3c
1000e97a:	881c      	ldrh	r4, [r3, #0]
1000e97c:	4b19      	ldr	r3, [pc, #100]	; (1000e9e4 <gapm_start_scan_cmd_handler+0x90>)
1000e97e:	220f      	movs	r2, #15
1000e980:	7119      	strb	r1, [r3, #4]
1000e982:	4669      	mov	r1, sp
1000e984:	7809      	ldrb	r1, [r1, #0]
1000e986:	701a      	strb	r2, [r3, #0]
1000e988:	7259      	strb	r1, [r3, #9]
1000e98a:	4669      	mov	r1, sp
1000e98c:	7909      	ldrb	r1, [r1, #4]
1000e98e:	3a02      	subs	r2, #2
1000e990:	7419      	strb	r1, [r3, #16]
1000e992:	4669      	mov	r1, sp
1000e994:	705a      	strb	r2, [r3, #1]
1000e996:	709a      	strb	r2, [r3, #2]
1000e998:	2200      	movs	r2, #0
1000e99a:	883f      	ldrh	r7, [r7, #0]
1000e99c:	7a09      	ldrb	r1, [r1, #8]
1000e99e:	731e      	strb	r6, [r3, #12]
1000e9a0:	739d      	strb	r5, [r3, #14]
1000e9a2:	0a3f      	lsrs	r7, r7, #8
1000e9a4:	0a36      	lsrs	r6, r6, #8
1000e9a6:	0a2d      	lsrs	r5, r5, #8
1000e9a8:	70da      	strb	r2, [r3, #3]
1000e9aa:	729a      	strb	r2, [r3, #10]
1000e9ac:	72da      	strb	r2, [r3, #11]
1000e9ae:	715f      	strb	r7, [r3, #5]
1000e9b0:	7218      	strb	r0, [r3, #8]
1000e9b2:	735e      	strb	r6, [r3, #13]
1000e9b4:	73dd      	strb	r5, [r3, #15]
1000e9b6:	7459      	strb	r1, [r3, #17]
1000e9b8:	4669      	mov	r1, sp
1000e9ba:	7b09      	ldrb	r1, [r1, #12]
1000e9bc:	759c      	strb	r4, [r3, #22]
1000e9be:	7499      	strb	r1, [r3, #18]
1000e9c0:	21a5      	movs	r1, #165	; 0xa5
1000e9c2:	0a24      	lsrs	r4, r4, #8
1000e9c4:	7519      	strb	r1, [r3, #20]
1000e9c6:	7559      	strb	r1, [r3, #21]
1000e9c8:	3995      	subs	r1, #149	; 0x95
1000e9ca:	74da      	strb	r2, [r3, #19]
1000e9cc:	75dc      	strb	r4, [r3, #23]
1000e9ce:	7199      	strb	r1, [r3, #6]
1000e9d0:	71da      	strb	r2, [r3, #7]
1000e9d2:	1c18      	adds	r0, r3, #0
1000e9d4:	3108      	adds	r1, #8
1000e9d6:	4b04      	ldr	r3, [pc, #16]	; (1000e9e8 <gapm_start_scan_cmd_handler+0x94>)
1000e9d8:	4798      	blx	r3
1000e9da:	b005      	add	sp, #20
1000e9dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e9de:	46c0      	nop			; (mov r8, r8)
1000e9e0:	100152c4 	.word	0x100152c4
1000e9e4:	10015634 	.word	0x10015634
1000e9e8:	1000d939 	.word	0x1000d939

1000e9ec <gapm_adv_report_evt_handler>:
1000e9ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000e9ee:	7843      	ldrb	r3, [r0, #1]
1000e9f0:	1c05      	adds	r5, r0, #0
1000e9f2:	9301      	str	r3, [sp, #4]
1000e9f4:	466b      	mov	r3, sp
1000e9f6:	1c0c      	adds	r4, r1, #0
1000e9f8:	791b      	ldrb	r3, [r3, #4]
1000e9fa:	7806      	ldrb	r6, [r0, #0]
1000e9fc:	2206      	movs	r2, #6
1000e9fe:	704b      	strb	r3, [r1, #1]
1000ea00:	1c88      	adds	r0, r1, #2
1000ea02:	4f1b      	ldr	r7, [pc, #108]	; (1000ea70 <gapm_adv_report_evt_handler+0x84>)
1000ea04:	1ca9      	adds	r1, r5, #2
1000ea06:	47b8      	blx	r7
1000ea08:	1c20      	adds	r0, r4, #0
1000ea0a:	1c29      	adds	r1, r5, #0
1000ea0c:	7a2a      	ldrb	r2, [r5, #8]
1000ea0e:	3008      	adds	r0, #8
1000ea10:	77c2      	strb	r2, [r0, #31]
1000ea12:	3109      	adds	r1, #9
1000ea14:	3528      	adds	r5, #40	; 0x28
1000ea16:	47b8      	blx	r7
1000ea18:	782b      	ldrb	r3, [r5, #0]
1000ea1a:	b25a      	sxtb	r2, r3
1000ea1c:	2a00      	cmp	r2, #0
1000ea1e:	da01      	bge.n	1000ea24 <gapm_adv_report_evt_handler+0x38>
1000ea20:	3301      	adds	r3, #1
1000ea22:	b2db      	uxtb	r3, r3
1000ea24:	1c22      	adds	r2, r4, #0
1000ea26:	3228      	adds	r2, #40	; 0x28
1000ea28:	7013      	strb	r3, [r2, #0]
1000ea2a:	2200      	movs	r2, #0
1000ea2c:	9b01      	ldr	r3, [sp, #4]
1000ea2e:	4293      	cmp	r3, r2
1000ea30:	d00a      	beq.n	1000ea48 <gapm_adv_report_evt_handler+0x5c>
1000ea32:	79e3      	ldrb	r3, [r4, #7]
1000ea34:	323f      	adds	r2, #63	; 0x3f
1000ea36:	1c19      	adds	r1, r3, #0
1000ea38:	4391      	bics	r1, r2
1000ea3a:	3a3e      	subs	r2, #62	; 0x3e
1000ea3c:	29c0      	cmp	r1, #192	; 0xc0
1000ea3e:	d003      	beq.n	1000ea48 <gapm_adv_report_evt_handler+0x5c>
1000ea40:	065b      	lsls	r3, r3, #25
1000ea42:	0fdb      	lsrs	r3, r3, #31
1000ea44:	3202      	adds	r2, #2
1000ea46:	1ad2      	subs	r2, r2, r3
1000ea48:	7062      	strb	r2, [r4, #1]
1000ea4a:	2e04      	cmp	r6, #4
1000ea4c:	d80f      	bhi.n	1000ea6e <gapm_adv_report_evt_handler+0x82>
1000ea4e:	1c30      	adds	r0, r6, #0
1000ea50:	f000 fc58 	bl	1000f304 <__gnu_thumb1_case_uqi>
1000ea54:	09070503 	.word	0x09070503
1000ea58:	0b          	.byte	0x0b
1000ea59:	00          	.byte	0x00
1000ea5a:	2300      	movs	r3, #0
1000ea5c:	e006      	b.n	1000ea6c <gapm_adv_report_evt_handler+0x80>
1000ea5e:	2301      	movs	r3, #1
1000ea60:	e004      	b.n	1000ea6c <gapm_adv_report_evt_handler+0x80>
1000ea62:	2302      	movs	r3, #2
1000ea64:	e002      	b.n	1000ea6c <gapm_adv_report_evt_handler+0x80>
1000ea66:	2303      	movs	r3, #3
1000ea68:	e000      	b.n	1000ea6c <gapm_adv_report_evt_handler+0x80>
1000ea6a:	2305      	movs	r3, #5
1000ea6c:	7023      	strb	r3, [r4, #0]
1000ea6e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000ea70:	10010423 	.word	0x10010423

1000ea74 <gapm_start_connection_cmd_handler>:
1000ea74:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ea76:	b089      	sub	sp, #36	; 0x24
1000ea78:	aa0f      	add	r2, sp, #60	; 0x3c
1000ea7a:	8812      	ldrh	r2, [r2, #0]
1000ea7c:	9107      	str	r1, [sp, #28]
1000ea7e:	4694      	mov	ip, r2
1000ea80:	aa10      	add	r2, sp, #64	; 0x40
1000ea82:	8812      	ldrh	r2, [r2, #0]
1000ea84:	a908      	add	r1, sp, #32
1000ea86:	9202      	str	r2, [sp, #8]
1000ea88:	aa11      	add	r2, sp, #68	; 0x44
1000ea8a:	8812      	ldrh	r2, [r2, #0]
1000ea8c:	4e3b      	ldr	r6, [pc, #236]	; (1000eb7c <gapm_start_connection_cmd_handler+0x108>)
1000ea8e:	9203      	str	r2, [sp, #12]
1000ea90:	aa12      	add	r2, sp, #72	; 0x48
1000ea92:	8812      	ldrh	r2, [r2, #0]
1000ea94:	4c3a      	ldr	r4, [pc, #232]	; (1000eb80 <gapm_start_connection_cmd_handler+0x10c>)
1000ea96:	9204      	str	r2, [sp, #16]
1000ea98:	aa13      	add	r2, sp, #76	; 0x4c
1000ea9a:	8812      	ldrh	r2, [r2, #0]
1000ea9c:	ab0e      	add	r3, sp, #56	; 0x38
1000ea9e:	9205      	str	r2, [sp, #20]
1000eaa0:	aa14      	add	r2, sp, #80	; 0x50
1000eaa2:	8812      	ldrh	r2, [r2, #0]
1000eaa4:	881b      	ldrh	r3, [r3, #0]
1000eaa6:	9206      	str	r2, [sp, #24]
1000eaa8:	aa15      	add	r2, sp, #84	; 0x54
1000eaaa:	8817      	ldrh	r7, [r2, #0]
1000eaac:	2219      	movs	r2, #25
1000eaae:	1852      	adds	r2, r2, r1
1000eab0:	7fd2      	ldrb	r2, [r2, #31]
1000eab2:	8831      	ldrh	r1, [r6, #0]
1000eab4:	9201      	str	r2, [sp, #4]
1000eab6:	2211      	movs	r2, #17
1000eab8:	7121      	strb	r1, [r4, #4]
1000eaba:	4669      	mov	r1, sp
1000eabc:	7022      	strb	r2, [r4, #0]
1000eabe:	3a04      	subs	r2, #4
1000eac0:	7062      	strb	r2, [r4, #1]
1000eac2:	70a2      	strb	r2, [r4, #2]
1000eac4:	2200      	movs	r2, #0
1000eac6:	8836      	ldrh	r6, [r6, #0]
1000eac8:	7f09      	ldrb	r1, [r1, #28]
1000eaca:	0a36      	lsrs	r6, r6, #8
1000eacc:	9d17      	ldr	r5, [sp, #92]	; 0x5c
1000eace:	7166      	strb	r6, [r4, #5]
1000ead0:	70e2      	strb	r2, [r4, #3]
1000ead2:	7220      	strb	r0, [r4, #8]
1000ead4:	7261      	strb	r1, [r4, #9]
1000ead6:	72a2      	strb	r2, [r4, #10]
1000ead8:	72e2      	strb	r2, [r4, #11]
1000eada:	7323      	strb	r3, [r4, #12]
1000eadc:	0a1b      	lsrs	r3, r3, #8
1000eade:	7363      	strb	r3, [r4, #13]
1000eae0:	4663      	mov	r3, ip
1000eae2:	73a3      	strb	r3, [r4, #14]
1000eae4:	4663      	mov	r3, ip
1000eae6:	0a1b      	lsrs	r3, r3, #8
1000eae8:	73e3      	strb	r3, [r4, #15]
1000eaea:	466b      	mov	r3, sp
1000eaec:	7a1b      	ldrb	r3, [r3, #8]
1000eaee:	2607      	movs	r6, #7
1000eaf0:	7423      	strb	r3, [r4, #16]
1000eaf2:	9b02      	ldr	r3, [sp, #8]
1000eaf4:	76a7      	strb	r7, [r4, #26]
1000eaf6:	0a1b      	lsrs	r3, r3, #8
1000eaf8:	7463      	strb	r3, [r4, #17]
1000eafa:	466b      	mov	r3, sp
1000eafc:	7b1b      	ldrb	r3, [r3, #12]
1000eafe:	74a3      	strb	r3, [r4, #18]
1000eb00:	9b03      	ldr	r3, [sp, #12]
1000eb02:	0a1b      	lsrs	r3, r3, #8
1000eb04:	74e3      	strb	r3, [r4, #19]
1000eb06:	466b      	mov	r3, sp
1000eb08:	7c1b      	ldrb	r3, [r3, #16]
1000eb0a:	7523      	strb	r3, [r4, #20]
1000eb0c:	9b04      	ldr	r3, [sp, #16]
1000eb0e:	0a1b      	lsrs	r3, r3, #8
1000eb10:	7563      	strb	r3, [r4, #21]
1000eb12:	466b      	mov	r3, sp
1000eb14:	7d1b      	ldrb	r3, [r3, #20]
1000eb16:	75a3      	strb	r3, [r4, #22]
1000eb18:	9b05      	ldr	r3, [sp, #20]
1000eb1a:	0a1b      	lsrs	r3, r3, #8
1000eb1c:	75e3      	strb	r3, [r4, #23]
1000eb1e:	466b      	mov	r3, sp
1000eb20:	7e1b      	ldrb	r3, [r3, #24]
1000eb22:	7623      	strb	r3, [r4, #24]
1000eb24:	9b06      	ldr	r3, [sp, #24]
1000eb26:	0a1b      	lsrs	r3, r3, #8
1000eb28:	7663      	strb	r3, [r4, #25]
1000eb2a:	0a3b      	lsrs	r3, r7, #8
1000eb2c:	76e3      	strb	r3, [r4, #27]
1000eb2e:	466b      	mov	r3, sp
1000eb30:	791b      	ldrb	r3, [r3, #4]
1000eb32:	4f14      	ldr	r7, [pc, #80]	; (1000eb84 <gapm_start_connection_cmd_handler+0x110>)
1000eb34:	7723      	strb	r3, [r4, #28]
1000eb36:	9b01      	ldr	r3, [sp, #4]
1000eb38:	435e      	muls	r6, r3
1000eb3a:	19ae      	adds	r6, r5, r6
1000eb3c:	42b5      	cmp	r5, r6
1000eb3e:	d00f      	beq.n	1000eb60 <gapm_start_connection_cmd_handler+0xec>
1000eb40:	1c69      	adds	r1, r5, #1
1000eb42:	1c38      	adds	r0, r7, #0
1000eb44:	2206      	movs	r2, #6
1000eb46:	4b10      	ldr	r3, [pc, #64]	; (1000eb88 <gapm_start_connection_cmd_handler+0x114>)
1000eb48:	4798      	blx	r3
1000eb4a:	2200      	movs	r2, #0
1000eb4c:	2102      	movs	r1, #2
1000eb4e:	782b      	ldrb	r3, [r5, #0]
1000eb50:	3507      	adds	r5, #7
1000eb52:	3b01      	subs	r3, #1
1000eb54:	b2db      	uxtb	r3, r3
1000eb56:	4299      	cmp	r1, r3
1000eb58:	4152      	adcs	r2, r2
1000eb5a:	71ba      	strb	r2, [r7, #6]
1000eb5c:	3707      	adds	r7, #7
1000eb5e:	e7ed      	b.n	1000eb3c <gapm_start_connection_cmd_handler+0xc8>
1000eb60:	2107      	movs	r1, #7
1000eb62:	9b01      	ldr	r3, [sp, #4]
1000eb64:	1c20      	adds	r0, r4, #0
1000eb66:	4359      	muls	r1, r3
1000eb68:	311d      	adds	r1, #29
1000eb6a:	1c0b      	adds	r3, r1, #0
1000eb6c:	3b08      	subs	r3, #8
1000eb6e:	71a3      	strb	r3, [r4, #6]
1000eb70:	121b      	asrs	r3, r3, #8
1000eb72:	71e3      	strb	r3, [r4, #7]
1000eb74:	4b05      	ldr	r3, [pc, #20]	; (1000eb8c <gapm_start_connection_cmd_handler+0x118>)
1000eb76:	4798      	blx	r3
1000eb78:	b009      	add	sp, #36	; 0x24
1000eb7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000eb7c:	100152c4 	.word	0x100152c4
1000eb80:	10015634 	.word	0x10015634
1000eb84:	10015651 	.word	0x10015651
1000eb88:	10010423 	.word	0x10010423
1000eb8c:	1000d939 	.word	0x1000d939

1000eb90 <gapm_resolv_addr_cmd_handler>:
1000eb90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000eb92:	2314      	movs	r3, #20
1000eb94:	4c12      	ldr	r4, [pc, #72]	; (1000ebe0 <gapm_resolv_addr_cmd_handler+0x50>)
1000eb96:	1c17      	adds	r7, r2, #0
1000eb98:	7023      	strb	r3, [r4, #0]
1000eb9a:	3b07      	subs	r3, #7
1000eb9c:	7063      	strb	r3, [r4, #1]
1000eb9e:	70a3      	strb	r3, [r4, #2]
1000eba0:	2300      	movs	r3, #0
1000eba2:	70e3      	strb	r3, [r4, #3]
1000eba4:	4b0f      	ldr	r3, [pc, #60]	; (1000ebe4 <gapm_resolv_addr_cmd_handler+0x54>)
1000eba6:	1c05      	adds	r5, r0, #0
1000eba8:	881a      	ldrh	r2, [r3, #0]
1000ebaa:	881b      	ldrh	r3, [r3, #0]
1000ebac:	4e0e      	ldr	r6, [pc, #56]	; (1000ebe8 <gapm_resolv_addr_cmd_handler+0x58>)
1000ebae:	0a1b      	lsrs	r3, r3, #8
1000ebb0:	7163      	strb	r3, [r4, #5]
1000ebb2:	2317      	movs	r3, #23
1000ebb4:	012d      	lsls	r5, r5, #4
1000ebb6:	7122      	strb	r2, [r4, #4]
1000ebb8:	7260      	strb	r0, [r4, #9]
1000ebba:	2206      	movs	r2, #6
1000ebbc:	480b      	ldr	r0, [pc, #44]	; (1000ebec <gapm_resolv_addr_cmd_handler+0x5c>)
1000ebbe:	7223      	strb	r3, [r4, #8]
1000ebc0:	47b0      	blx	r6
1000ebc2:	1c39      	adds	r1, r7, #0
1000ebc4:	1c2a      	adds	r2, r5, #0
1000ebc6:	480a      	ldr	r0, [pc, #40]	; (1000ebf0 <gapm_resolv_addr_cmd_handler+0x60>)
1000ebc8:	47b0      	blx	r6
1000ebca:	1c29      	adds	r1, r5, #0
1000ebcc:	3110      	adds	r1, #16
1000ebce:	1c0b      	adds	r3, r1, #0
1000ebd0:	3b08      	subs	r3, #8
1000ebd2:	71a3      	strb	r3, [r4, #6]
1000ebd4:	121b      	asrs	r3, r3, #8
1000ebd6:	71e3      	strb	r3, [r4, #7]
1000ebd8:	1c20      	adds	r0, r4, #0
1000ebda:	4b06      	ldr	r3, [pc, #24]	; (1000ebf4 <gapm_resolv_addr_cmd_handler+0x64>)
1000ebdc:	4798      	blx	r3
1000ebde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000ebe0:	10015634 	.word	0x10015634
1000ebe4:	100152c4 	.word	0x100152c4
1000ebe8:	10010423 	.word	0x10010423
1000ebec:	1001563e 	.word	0x1001563e
1000ebf0:	10015644 	.word	0x10015644
1000ebf4:	1000d939 	.word	0x1000d939

1000ebf8 <gapm_addr_solved_ind_handler>:
1000ebf8:	b570      	push	{r4, r5, r6, lr}
1000ebfa:	1c04      	adds	r4, r0, #0
1000ebfc:	1c08      	adds	r0, r1, #0
1000ebfe:	1c0d      	adds	r5, r1, #0
1000ec00:	4e05      	ldr	r6, [pc, #20]	; (1000ec18 <gapm_addr_solved_ind_handler+0x20>)
1000ec02:	1c21      	adds	r1, r4, #0
1000ec04:	2206      	movs	r2, #6
1000ec06:	3011      	adds	r0, #17
1000ec08:	47b0      	blx	r6
1000ec0a:	1c68      	adds	r0, r5, #1
1000ec0c:	1da1      	adds	r1, r4, #6
1000ec0e:	2210      	movs	r2, #16
1000ec10:	47b0      	blx	r6
1000ec12:	2300      	movs	r3, #0
1000ec14:	702b      	strb	r3, [r5, #0]
1000ec16:	bd70      	pop	{r4, r5, r6, pc}
1000ec18:	10010423 	.word	0x10010423

1000ec1c <gapm_profile_added_ind_handler>:
1000ec1c:	b510      	push	{r4, lr}
1000ec1e:	7843      	ldrb	r3, [r0, #1]
1000ec20:	7902      	ldrb	r2, [r0, #4]
1000ec22:	7944      	ldrb	r4, [r0, #5]
1000ec24:	7800      	ldrb	r0, [r0, #0]
1000ec26:	021b      	lsls	r3, r3, #8
1000ec28:	4303      	orrs	r3, r0
1000ec2a:	2b1b      	cmp	r3, #27
1000ec2c:	d104      	bne.n	1000ec38 <gapm_profile_added_ind_handler+0x1c>
1000ec2e:	2300      	movs	r3, #0
1000ec30:	700b      	strb	r3, [r1, #0]
1000ec32:	0223      	lsls	r3, r4, #8
1000ec34:	4313      	orrs	r3, r2
1000ec36:	804b      	strh	r3, [r1, #2]
1000ec38:	203b      	movs	r0, #59	; 0x3b
1000ec3a:	bd10      	pop	{r4, pc}

1000ec3c <gattc_read_req_ind_parser>:
1000ec3c:	7843      	ldrb	r3, [r0, #1]
1000ec3e:	7802      	ldrb	r2, [r0, #0]
1000ec40:	021b      	lsls	r3, r3, #8
1000ec42:	4313      	orrs	r3, r2
1000ec44:	804b      	strh	r3, [r1, #2]
1000ec46:	4770      	bx	lr

1000ec48 <gattc_write_req_ind_parser>:
1000ec48:	b508      	push	{r3, lr}
1000ec4a:	1c13      	adds	r3, r2, #0
1000ec4c:	0a00      	lsrs	r0, r0, #8
1000ec4e:	8010      	strh	r0, [r2, #0]
1000ec50:	784a      	ldrb	r2, [r1, #1]
1000ec52:	7808      	ldrb	r0, [r1, #0]
1000ec54:	0212      	lsls	r2, r2, #8
1000ec56:	4302      	orrs	r2, r0
1000ec58:	805a      	strh	r2, [r3, #2]
1000ec5a:	78ca      	ldrb	r2, [r1, #3]
1000ec5c:	7888      	ldrb	r0, [r1, #2]
1000ec5e:	0212      	lsls	r2, r2, #8
1000ec60:	4302      	orrs	r2, r0
1000ec62:	809a      	strh	r2, [r3, #4]
1000ec64:	794a      	ldrb	r2, [r1, #5]
1000ec66:	7908      	ldrb	r0, [r1, #4]
1000ec68:	0212      	lsls	r2, r2, #8
1000ec6a:	4302      	orrs	r2, r0
1000ec6c:	80da      	strh	r2, [r3, #6]
1000ec6e:	3308      	adds	r3, #8
1000ec70:	1c18      	adds	r0, r3, #0
1000ec72:	3106      	adds	r1, #6
1000ec74:	4b01      	ldr	r3, [pc, #4]	; (1000ec7c <gattc_write_req_ind_parser+0x34>)
1000ec76:	4798      	blx	r3
1000ec78:	bd08      	pop	{r3, pc}
1000ec7a:	46c0      	nop			; (mov r8, r8)
1000ec7c:	10010423 	.word	0x10010423

1000ec80 <gattc_att_info_req_parser>:
1000ec80:	7843      	ldrb	r3, [r0, #1]
1000ec82:	7802      	ldrb	r2, [r0, #0]
1000ec84:	021b      	lsls	r3, r3, #8
1000ec86:	4313      	orrs	r3, r2
1000ec88:	800b      	strh	r3, [r1, #0]
1000ec8a:	4770      	bx	lr

1000ec8c <gattc_read_cfm>:
1000ec8c:	b538      	push	{r3, r4, r5, lr}
1000ec8e:	2514      	movs	r5, #20
1000ec90:	1c1c      	adds	r4, r3, #0
1000ec92:	4b14      	ldr	r3, [pc, #80]	; (1000ece4 <gattc_read_cfm+0x58>)
1000ec94:	70d9      	strb	r1, [r3, #3]
1000ec96:	4914      	ldr	r1, [pc, #80]	; (1000ece8 <gattc_read_cfm+0x5c>)
1000ec98:	701d      	strb	r5, [r3, #0]
1000ec9a:	3d08      	subs	r5, #8
1000ec9c:	705d      	strb	r5, [r3, #1]
1000ec9e:	709d      	strb	r5, [r3, #2]
1000eca0:	880d      	ldrh	r5, [r1, #0]
1000eca2:	8809      	ldrh	r1, [r1, #0]
1000eca4:	7218      	strb	r0, [r3, #8]
1000eca6:	0a09      	lsrs	r1, r1, #8
1000eca8:	7159      	strb	r1, [r3, #5]
1000ecaa:	0a00      	lsrs	r0, r0, #8
1000ecac:	0a21      	lsrs	r1, r4, #8
1000ecae:	711d      	strb	r5, [r3, #4]
1000ecb0:	7258      	strb	r0, [r3, #9]
1000ecb2:	729c      	strb	r4, [r3, #10]
1000ecb4:	72d9      	strb	r1, [r3, #11]
1000ecb6:	731a      	strb	r2, [r3, #12]
1000ecb8:	1c1d      	adds	r5, r3, #0
1000ecba:	2c00      	cmp	r4, #0
1000ecbc:	d007      	beq.n	1000ecce <gattc_read_cfm+0x42>
1000ecbe:	9904      	ldr	r1, [sp, #16]
1000ecc0:	1c22      	adds	r2, r4, #0
1000ecc2:	480a      	ldr	r0, [pc, #40]	; (1000ecec <gattc_read_cfm+0x60>)
1000ecc4:	4b0a      	ldr	r3, [pc, #40]	; (1000ecf0 <gattc_read_cfm+0x64>)
1000ecc6:	340d      	adds	r4, #13
1000ecc8:	4798      	blx	r3
1000ecca:	b2a1      	uxth	r1, r4
1000eccc:	e001      	b.n	1000ecd2 <gattc_read_cfm+0x46>
1000ecce:	210e      	movs	r1, #14
1000ecd0:	735c      	strb	r4, [r3, #13]
1000ecd2:	1c0b      	adds	r3, r1, #0
1000ecd4:	3b08      	subs	r3, #8
1000ecd6:	71ab      	strb	r3, [r5, #6]
1000ecd8:	121b      	asrs	r3, r3, #8
1000ecda:	71eb      	strb	r3, [r5, #7]
1000ecdc:	1c28      	adds	r0, r5, #0
1000ecde:	4b05      	ldr	r3, [pc, #20]	; (1000ecf4 <gattc_read_cfm+0x68>)
1000ece0:	4798      	blx	r3
1000ece2:	bd38      	pop	{r3, r4, r5, pc}
1000ece4:	10015634 	.word	0x10015634
1000ece8:	100152c4 	.word	0x100152c4
1000ecec:	10015641 	.word	0x10015641
1000ecf0:	10010423 	.word	0x10010423
1000ecf4:	1000d939 	.word	0x1000d939

1000ecf8 <gattc_write_cfm>:
1000ecf8:	4b0d      	ldr	r3, [pc, #52]	; (1000ed30 <gattc_write_cfm+0x38>)
1000ecfa:	b510      	push	{r4, lr}
1000ecfc:	729a      	strb	r2, [r3, #10]
1000ecfe:	2203      	movs	r2, #3
1000ed00:	2416      	movs	r4, #22
1000ed02:	719a      	strb	r2, [r3, #6]
1000ed04:	2200      	movs	r2, #0
1000ed06:	70d9      	strb	r1, [r3, #3]
1000ed08:	490a      	ldr	r1, [pc, #40]	; (1000ed34 <gattc_write_cfm+0x3c>)
1000ed0a:	701c      	strb	r4, [r3, #0]
1000ed0c:	3c0a      	subs	r4, #10
1000ed0e:	705c      	strb	r4, [r3, #1]
1000ed10:	709c      	strb	r4, [r3, #2]
1000ed12:	880c      	ldrh	r4, [r1, #0]
1000ed14:	8809      	ldrh	r1, [r1, #0]
1000ed16:	7218      	strb	r0, [r3, #8]
1000ed18:	0a09      	lsrs	r1, r1, #8
1000ed1a:	0a00      	lsrs	r0, r0, #8
1000ed1c:	711c      	strb	r4, [r3, #4]
1000ed1e:	7159      	strb	r1, [r3, #5]
1000ed20:	7258      	strb	r0, [r3, #9]
1000ed22:	71da      	strb	r2, [r3, #7]
1000ed24:	1c18      	adds	r0, r3, #0
1000ed26:	210b      	movs	r1, #11
1000ed28:	4b03      	ldr	r3, [pc, #12]	; (1000ed38 <gattc_write_cfm+0x40>)
1000ed2a:	4798      	blx	r3
1000ed2c:	bd10      	pop	{r4, pc}
1000ed2e:	46c0      	nop			; (mov r8, r8)
1000ed30:	10015634 	.word	0x10015634
1000ed34:	100152c4 	.word	0x100152c4
1000ed38:	1000d939 	.word	0x1000d939

1000ed3c <gattc_att_info_cfm>:
1000ed3c:	b538      	push	{r3, r4, r5, lr}
1000ed3e:	4c0e      	ldr	r4, [pc, #56]	; (1000ed78 <gattc_att_info_cfm+0x3c>)
1000ed40:	2518      	movs	r5, #24
1000ed42:	7323      	strb	r3, [r4, #12]
1000ed44:	2305      	movs	r3, #5
1000ed46:	71a3      	strb	r3, [r4, #6]
1000ed48:	2300      	movs	r3, #0
1000ed4a:	70e1      	strb	r1, [r4, #3]
1000ed4c:	490b      	ldr	r1, [pc, #44]	; (1000ed7c <gattc_att_info_cfm+0x40>)
1000ed4e:	7025      	strb	r5, [r4, #0]
1000ed50:	3d0c      	subs	r5, #12
1000ed52:	7065      	strb	r5, [r4, #1]
1000ed54:	70a5      	strb	r5, [r4, #2]
1000ed56:	880d      	ldrh	r5, [r1, #0]
1000ed58:	8809      	ldrh	r1, [r1, #0]
1000ed5a:	7220      	strb	r0, [r4, #8]
1000ed5c:	0a09      	lsrs	r1, r1, #8
1000ed5e:	0a00      	lsrs	r0, r0, #8
1000ed60:	7161      	strb	r1, [r4, #5]
1000ed62:	7260      	strb	r0, [r4, #9]
1000ed64:	72a2      	strb	r2, [r4, #10]
1000ed66:	71e3      	strb	r3, [r4, #7]
1000ed68:	0a12      	lsrs	r2, r2, #8
1000ed6a:	1c20      	adds	r0, r4, #0
1000ed6c:	210d      	movs	r1, #13
1000ed6e:	4b04      	ldr	r3, [pc, #16]	; (1000ed80 <gattc_att_info_cfm+0x44>)
1000ed70:	7125      	strb	r5, [r4, #4]
1000ed72:	72e2      	strb	r2, [r4, #11]
1000ed74:	4798      	blx	r3
1000ed76:	bd38      	pop	{r3, r4, r5, pc}
1000ed78:	10015634 	.word	0x10015634
1000ed7c:	100152c4 	.word	0x100152c4
1000ed80:	1000d939 	.word	0x1000d939

1000ed84 <gattc_disc_cmd_handler>:
1000ed84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000ed86:	2603      	movs	r6, #3
1000ed88:	ac06      	add	r4, sp, #24
1000ed8a:	1c0d      	adds	r5, r1, #0
1000ed8c:	cc02      	ldmia	r4!, {r1}
1000ed8e:	8827      	ldrh	r7, [r4, #0]
1000ed90:	4c1a      	ldr	r4, [pc, #104]	; (1000edfc <gattc_disc_cmd_handler+0x78>)
1000ed92:	7026      	strb	r6, [r4, #0]
1000ed94:	3609      	adds	r6, #9
1000ed96:	7066      	strb	r6, [r4, #1]
1000ed98:	70a6      	strb	r6, [r4, #2]
1000ed9a:	4e19      	ldr	r6, [pc, #100]	; (1000ee00 <gattc_disc_cmd_handler+0x7c>)
1000ed9c:	70e7      	strb	r7, [r4, #3]
1000ed9e:	8837      	ldrh	r7, [r6, #0]
1000eda0:	8836      	ldrh	r6, [r6, #0]
1000eda2:	7127      	strb	r7, [r4, #4]
1000eda4:	0a36      	lsrs	r6, r6, #8
1000eda6:	7166      	strb	r6, [r4, #5]
1000eda8:	7220      	strb	r0, [r4, #8]
1000edaa:	2900      	cmp	r1, #0
1000edac:	d102      	bne.n	1000edb4 <gattc_disc_cmd_handler+0x30>
1000edae:	2002      	movs	r0, #2
1000edb0:	7260      	strb	r0, [r4, #9]
1000edb2:	e000      	b.n	1000edb6 <gattc_disc_cmd_handler+0x32>
1000edb4:	7265      	strb	r5, [r4, #9]
1000edb6:	4e13      	ldr	r6, [pc, #76]	; (1000ee04 <gattc_disc_cmd_handler+0x80>)
1000edb8:	7322      	strb	r2, [r4, #12]
1000edba:	8830      	ldrh	r0, [r6, #0]
1000edbc:	0a12      	lsrs	r2, r2, #8
1000edbe:	0a07      	lsrs	r7, r0, #8
1000edc0:	72a0      	strb	r0, [r4, #10]
1000edc2:	73a3      	strb	r3, [r4, #14]
1000edc4:	3001      	adds	r0, #1
1000edc6:	0a1b      	lsrs	r3, r3, #8
1000edc8:	72e7      	strb	r7, [r4, #11]
1000edca:	8030      	strh	r0, [r6, #0]
1000edcc:	7362      	strb	r2, [r4, #13]
1000edce:	73e3      	strb	r3, [r4, #15]
1000edd0:	2900      	cmp	r1, #0
1000edd2:	d103      	bne.n	1000eddc <gattc_disc_cmd_handler+0x58>
1000edd4:	7421      	strb	r1, [r4, #16]
1000edd6:	7461      	strb	r1, [r4, #17]
1000edd8:	3112      	adds	r1, #18
1000edda:	e005      	b.n	1000ede8 <gattc_disc_cmd_handler+0x64>
1000eddc:	480a      	ldr	r0, [pc, #40]	; (1000ee08 <gattc_disc_cmd_handler+0x84>)
1000edde:	1c2a      	adds	r2, r5, #0
1000ede0:	4b0a      	ldr	r3, [pc, #40]	; (1000ee0c <gattc_disc_cmd_handler+0x88>)
1000ede2:	4798      	blx	r3
1000ede4:	1c29      	adds	r1, r5, #0
1000ede6:	3110      	adds	r1, #16
1000ede8:	1c0b      	adds	r3, r1, #0
1000edea:	3b08      	subs	r3, #8
1000edec:	71a3      	strb	r3, [r4, #6]
1000edee:	121b      	asrs	r3, r3, #8
1000edf0:	71e3      	strb	r3, [r4, #7]
1000edf2:	1c20      	adds	r0, r4, #0
1000edf4:	4b06      	ldr	r3, [pc, #24]	; (1000ee10 <gattc_disc_cmd_handler+0x8c>)
1000edf6:	4798      	blx	r3
1000edf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000edfa:	46c0      	nop			; (mov r8, r8)
1000edfc:	10015634 	.word	0x10015634
1000ee00:	100152c4 	.word	0x100152c4
1000ee04:	1001460a 	.word	0x1001460a
1000ee08:	10015644 	.word	0x10015644
1000ee0c:	10010423 	.word	0x10010423
1000ee10:	1000d939 	.word	0x1000d939

1000ee14 <gattc_write_cmd_handler>:
1000ee14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000ee16:	260a      	movs	r6, #10
1000ee18:	ac06      	add	r4, sp, #24
1000ee1a:	8825      	ldrh	r5, [r4, #0]
1000ee1c:	ac08      	add	r4, sp, #32
1000ee1e:	8827      	ldrh	r7, [r4, #0]
1000ee20:	4c18      	ldr	r4, [pc, #96]	; (1000ee84 <gattc_write_cmd_handler+0x70>)
1000ee22:	73a3      	strb	r3, [r4, #14]
1000ee24:	0a1b      	lsrs	r3, r3, #8
1000ee26:	73e3      	strb	r3, [r4, #15]
1000ee28:	0a2b      	lsrs	r3, r5, #8
1000ee2a:	7463      	strb	r3, [r4, #17]
1000ee2c:	2300      	movs	r3, #0
1000ee2e:	7026      	strb	r6, [r4, #0]
1000ee30:	3602      	adds	r6, #2
1000ee32:	7066      	strb	r6, [r4, #1]
1000ee34:	70a6      	strb	r6, [r4, #2]
1000ee36:	4e14      	ldr	r6, [pc, #80]	; (1000ee88 <gattc_write_cmd_handler+0x74>)
1000ee38:	7220      	strb	r0, [r4, #8]
1000ee3a:	4814      	ldr	r0, [pc, #80]	; (1000ee8c <gattc_write_cmd_handler+0x78>)
1000ee3c:	70e7      	strb	r7, [r4, #3]
1000ee3e:	8837      	ldrh	r7, [r6, #0]
1000ee40:	8836      	ldrh	r6, [r6, #0]
1000ee42:	7261      	strb	r1, [r4, #9]
1000ee44:	8801      	ldrh	r1, [r0, #0]
1000ee46:	0a36      	lsrs	r6, r6, #8
1000ee48:	7166      	strb	r6, [r4, #5]
1000ee4a:	72a1      	strb	r1, [r4, #10]
1000ee4c:	0a0e      	lsrs	r6, r1, #8
1000ee4e:	7322      	strb	r2, [r4, #12]
1000ee50:	3101      	adds	r1, #1
1000ee52:	0a12      	lsrs	r2, r2, #8
1000ee54:	8001      	strh	r1, [r0, #0]
1000ee56:	7362      	strb	r2, [r4, #13]
1000ee58:	7425      	strb	r5, [r4, #16]
1000ee5a:	1c2a      	adds	r2, r5, #0
1000ee5c:	74a3      	strb	r3, [r4, #18]
1000ee5e:	74e3      	strb	r3, [r4, #19]
1000ee60:	9907      	ldr	r1, [sp, #28]
1000ee62:	3514      	adds	r5, #20
1000ee64:	4b0a      	ldr	r3, [pc, #40]	; (1000ee90 <gattc_write_cmd_handler+0x7c>)
1000ee66:	480b      	ldr	r0, [pc, #44]	; (1000ee94 <gattc_write_cmd_handler+0x80>)
1000ee68:	7127      	strb	r7, [r4, #4]
1000ee6a:	72e6      	strb	r6, [r4, #11]
1000ee6c:	4798      	blx	r3
1000ee6e:	b2a9      	uxth	r1, r5
1000ee70:	1c0b      	adds	r3, r1, #0
1000ee72:	3b08      	subs	r3, #8
1000ee74:	71a3      	strb	r3, [r4, #6]
1000ee76:	121b      	asrs	r3, r3, #8
1000ee78:	71e3      	strb	r3, [r4, #7]
1000ee7a:	1c20      	adds	r0, r4, #0
1000ee7c:	4b06      	ldr	r3, [pc, #24]	; (1000ee98 <gattc_write_cmd_handler+0x84>)
1000ee7e:	4798      	blx	r3
1000ee80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000ee82:	46c0      	nop			; (mov r8, r8)
1000ee84:	10015634 	.word	0x10015634
1000ee88:	100152c4 	.word	0x100152c4
1000ee8c:	1001460a 	.word	0x1001460a
1000ee90:	10010423 	.word	0x10010423
1000ee94:	10015648 	.word	0x10015648
1000ee98:	1000d939 	.word	0x1000d939

1000ee9c <gattc_event_cfm_handler>:
1000ee9c:	220e      	movs	r2, #14
1000ee9e:	b508      	push	{r3, lr}
1000eea0:	4b0b      	ldr	r3, [pc, #44]	; (1000eed0 <gattc_event_cfm_handler+0x34>)
1000eea2:	701a      	strb	r2, [r3, #0]
1000eea4:	3a02      	subs	r2, #2
1000eea6:	705a      	strb	r2, [r3, #1]
1000eea8:	709a      	strb	r2, [r3, #2]
1000eeaa:	4a0a      	ldr	r2, [pc, #40]	; (1000eed4 <gattc_event_cfm_handler+0x38>)
1000eeac:	70d8      	strb	r0, [r3, #3]
1000eeae:	8810      	ldrh	r0, [r2, #0]
1000eeb0:	8812      	ldrh	r2, [r2, #0]
1000eeb2:	7219      	strb	r1, [r3, #8]
1000eeb4:	0a12      	lsrs	r2, r2, #8
1000eeb6:	715a      	strb	r2, [r3, #5]
1000eeb8:	2202      	movs	r2, #2
1000eeba:	719a      	strb	r2, [r3, #6]
1000eebc:	2200      	movs	r2, #0
1000eebe:	0a09      	lsrs	r1, r1, #8
1000eec0:	7118      	strb	r0, [r3, #4]
1000eec2:	7259      	strb	r1, [r3, #9]
1000eec4:	71da      	strb	r2, [r3, #7]
1000eec6:	1c18      	adds	r0, r3, #0
1000eec8:	210a      	movs	r1, #10
1000eeca:	4b03      	ldr	r3, [pc, #12]	; (1000eed8 <gattc_event_cfm_handler+0x3c>)
1000eecc:	4798      	blx	r3
1000eece:	bd08      	pop	{r3, pc}
1000eed0:	10015634 	.word	0x10015634
1000eed4:	100152c4 	.word	0x100152c4
1000eed8:	1000d939 	.word	0x1000d939

1000eedc <gattc_read_cmd_handler>:
1000eedc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000eede:	2608      	movs	r6, #8
1000eee0:	ac06      	add	r4, sp, #24
1000eee2:	8825      	ldrh	r5, [r4, #0]
1000eee4:	ac08      	add	r4, sp, #32
1000eee6:	8827      	ldrh	r7, [r4, #0]
1000eee8:	4c1d      	ldr	r4, [pc, #116]	; (1000ef60 <gattc_read_cmd_handler+0x84>)
1000eeea:	7026      	strb	r6, [r4, #0]
1000eeec:	3604      	adds	r6, #4
1000eeee:	7066      	strb	r6, [r4, #1]
1000eef0:	70a6      	strb	r6, [r4, #2]
1000eef2:	4e1c      	ldr	r6, [pc, #112]	; (1000ef64 <gattc_read_cmd_handler+0x88>)
1000eef4:	70e7      	strb	r7, [r4, #3]
1000eef6:	8837      	ldrh	r7, [r6, #0]
1000eef8:	8836      	ldrh	r6, [r6, #0]
1000eefa:	72a1      	strb	r1, [r4, #10]
1000eefc:	0a36      	lsrs	r6, r6, #8
1000eefe:	7166      	strb	r6, [r4, #5]
1000ef00:	2600      	movs	r6, #0
1000ef02:	0a09      	lsrs	r1, r1, #8
1000ef04:	7127      	strb	r7, [r4, #4]
1000ef06:	7220      	strb	r0, [r4, #8]
1000ef08:	7266      	strb	r6, [r4, #9]
1000ef0a:	72e1      	strb	r1, [r4, #11]
1000ef0c:	2808      	cmp	r0, #8
1000ef0e:	d31d      	bcc.n	1000ef4c <gattc_read_cmd_handler+0x70>
1000ef10:	2809      	cmp	r0, #9
1000ef12:	d910      	bls.n	1000ef36 <gattc_read_cmd_handler+0x5a>
1000ef14:	280a      	cmp	r0, #10
1000ef16:	d119      	bne.n	1000ef4c <gattc_read_cmd_handler+0x70>
1000ef18:	7322      	strb	r2, [r4, #12]
1000ef1a:	73a3      	strb	r3, [r4, #14]
1000ef1c:	0a12      	lsrs	r2, r2, #8
1000ef1e:	0a1b      	lsrs	r3, r3, #8
1000ef20:	7362      	strb	r2, [r4, #13]
1000ef22:	73e3      	strb	r3, [r4, #15]
1000ef24:	7425      	strb	r5, [r4, #16]
1000ef26:	9907      	ldr	r1, [sp, #28]
1000ef28:	1c2a      	adds	r2, r5, #0
1000ef2a:	480f      	ldr	r0, [pc, #60]	; (1000ef68 <gattc_read_cmd_handler+0x8c>)
1000ef2c:	4b0f      	ldr	r3, [pc, #60]	; (1000ef6c <gattc_read_cmd_handler+0x90>)
1000ef2e:	3511      	adds	r5, #17
1000ef30:	4798      	blx	r3
1000ef32:	b2a9      	uxth	r1, r5
1000ef34:	e00b      	b.n	1000ef4e <gattc_read_cmd_handler+0x72>
1000ef36:	7322      	strb	r2, [r4, #12]
1000ef38:	73a3      	strb	r3, [r4, #14]
1000ef3a:	0a12      	lsrs	r2, r2, #8
1000ef3c:	0a1b      	lsrs	r3, r3, #8
1000ef3e:	7425      	strb	r5, [r4, #16]
1000ef40:	0a2d      	lsrs	r5, r5, #8
1000ef42:	7362      	strb	r2, [r4, #13]
1000ef44:	73e3      	strb	r3, [r4, #15]
1000ef46:	7465      	strb	r5, [r4, #17]
1000ef48:	2112      	movs	r1, #18
1000ef4a:	e000      	b.n	1000ef4e <gattc_read_cmd_handler+0x72>
1000ef4c:	210c      	movs	r1, #12
1000ef4e:	1c0b      	adds	r3, r1, #0
1000ef50:	3b08      	subs	r3, #8
1000ef52:	71a3      	strb	r3, [r4, #6]
1000ef54:	121b      	asrs	r3, r3, #8
1000ef56:	71e3      	strb	r3, [r4, #7]
1000ef58:	1c20      	adds	r0, r4, #0
1000ef5a:	4b05      	ldr	r3, [pc, #20]	; (1000ef70 <gattc_read_cmd_handler+0x94>)
1000ef5c:	4798      	blx	r3
1000ef5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000ef60:	10015634 	.word	0x10015634
1000ef64:	100152c4 	.word	0x100152c4
1000ef68:	10015645 	.word	0x10015645
1000ef6c:	10010423 	.word	0x10010423
1000ef70:	1000d939 	.word	0x1000d939

1000ef74 <gattc_disc_svc_ind_parser>:
1000ef74:	b570      	push	{r4, r5, r6, lr}
1000ef76:	1c15      	adds	r5, r2, #0
1000ef78:	0a00      	lsrs	r0, r0, #8
1000ef7a:	8010      	strh	r0, [r2, #0]
1000ef7c:	784b      	ldrb	r3, [r1, #1]
1000ef7e:	780a      	ldrb	r2, [r1, #0]
1000ef80:	021b      	lsls	r3, r3, #8
1000ef82:	4313      	orrs	r3, r2
1000ef84:	806b      	strh	r3, [r5, #2]
1000ef86:	78cb      	ldrb	r3, [r1, #3]
1000ef88:	788a      	ldrb	r2, [r1, #2]
1000ef8a:	021b      	lsls	r3, r3, #8
1000ef8c:	4313      	orrs	r3, r2
1000ef8e:	80ab      	strh	r3, [r5, #4]
1000ef90:	790e      	ldrb	r6, [r1, #4]
1000ef92:	4b05      	ldr	r3, [pc, #20]	; (1000efa8 <gattc_disc_svc_ind_parser+0x34>)
1000ef94:	1c30      	adds	r0, r6, #0
1000ef96:	1c0c      	adds	r4, r1, #0
1000ef98:	4798      	blx	r3
1000ef9a:	1c32      	adds	r2, r6, #0
1000ef9c:	71a8      	strb	r0, [r5, #6]
1000ef9e:	1d61      	adds	r1, r4, #5
1000efa0:	1de8      	adds	r0, r5, #7
1000efa2:	4b02      	ldr	r3, [pc, #8]	; (1000efac <gattc_disc_svc_ind_parser+0x38>)
1000efa4:	4798      	blx	r3
1000efa6:	bd70      	pop	{r4, r5, r6, pc}
1000efa8:	1000d221 	.word	0x1000d221
1000efac:	10010423 	.word	0x10010423

1000efb0 <gattc_disc_svc_incl_ind_parser>:
1000efb0:	b570      	push	{r4, r5, r6, lr}
1000efb2:	1c15      	adds	r5, r2, #0
1000efb4:	0a00      	lsrs	r0, r0, #8
1000efb6:	8010      	strh	r0, [r2, #0]
1000efb8:	784b      	ldrb	r3, [r1, #1]
1000efba:	780a      	ldrb	r2, [r1, #0]
1000efbc:	021b      	lsls	r3, r3, #8
1000efbe:	4313      	orrs	r3, r2
1000efc0:	806b      	strh	r3, [r5, #2]
1000efc2:	78cb      	ldrb	r3, [r1, #3]
1000efc4:	788a      	ldrb	r2, [r1, #2]
1000efc6:	021b      	lsls	r3, r3, #8
1000efc8:	4313      	orrs	r3, r2
1000efca:	80ab      	strh	r3, [r5, #4]
1000efcc:	794b      	ldrb	r3, [r1, #5]
1000efce:	790a      	ldrb	r2, [r1, #4]
1000efd0:	021b      	lsls	r3, r3, #8
1000efd2:	4313      	orrs	r3, r2
1000efd4:	80eb      	strh	r3, [r5, #6]
1000efd6:	798e      	ldrb	r6, [r1, #6]
1000efd8:	4b05      	ldr	r3, [pc, #20]	; (1000eff0 <gattc_disc_svc_incl_ind_parser+0x40>)
1000efda:	1c30      	adds	r0, r6, #0
1000efdc:	1c0c      	adds	r4, r1, #0
1000efde:	4798      	blx	r3
1000efe0:	7228      	strb	r0, [r5, #8]
1000efe2:	1c28      	adds	r0, r5, #0
1000efe4:	1c32      	adds	r2, r6, #0
1000efe6:	1de1      	adds	r1, r4, #7
1000efe8:	4b02      	ldr	r3, [pc, #8]	; (1000eff4 <gattc_disc_svc_incl_ind_parser+0x44>)
1000efea:	3009      	adds	r0, #9
1000efec:	4798      	blx	r3
1000efee:	bd70      	pop	{r4, r5, r6, pc}
1000eff0:	1000d221 	.word	0x1000d221
1000eff4:	10010423 	.word	0x10010423

1000eff8 <gattc_disc_char_ind_parser>:
1000eff8:	b570      	push	{r4, r5, r6, lr}
1000effa:	1c15      	adds	r5, r2, #0
1000effc:	0a00      	lsrs	r0, r0, #8
1000effe:	8010      	strh	r0, [r2, #0]
1000f000:	784b      	ldrb	r3, [r1, #1]
1000f002:	780a      	ldrb	r2, [r1, #0]
1000f004:	021b      	lsls	r3, r3, #8
1000f006:	4313      	orrs	r3, r2
1000f008:	806b      	strh	r3, [r5, #2]
1000f00a:	78cb      	ldrb	r3, [r1, #3]
1000f00c:	788a      	ldrb	r2, [r1, #2]
1000f00e:	021b      	lsls	r3, r3, #8
1000f010:	4313      	orrs	r3, r2
1000f012:	80ab      	strh	r3, [r5, #4]
1000f014:	790b      	ldrb	r3, [r1, #4]
1000f016:	1c0c      	adds	r4, r1, #0
1000f018:	71ab      	strb	r3, [r5, #6]
1000f01a:	794e      	ldrb	r6, [r1, #5]
1000f01c:	4b05      	ldr	r3, [pc, #20]	; (1000f034 <gattc_disc_char_ind_parser+0x3c>)
1000f01e:	1c30      	adds	r0, r6, #0
1000f020:	4798      	blx	r3
1000f022:	71e8      	strb	r0, [r5, #7]
1000f024:	1c28      	adds	r0, r5, #0
1000f026:	1c32      	adds	r2, r6, #0
1000f028:	1da1      	adds	r1, r4, #6
1000f02a:	4b03      	ldr	r3, [pc, #12]	; (1000f038 <gattc_disc_char_ind_parser+0x40>)
1000f02c:	3008      	adds	r0, #8
1000f02e:	4798      	blx	r3
1000f030:	bd70      	pop	{r4, r5, r6, pc}
1000f032:	46c0      	nop			; (mov r8, r8)
1000f034:	1000d221 	.word	0x1000d221
1000f038:	10010423 	.word	0x10010423

1000f03c <gattc_disc_char_desc_ind_parser>:
1000f03c:	b570      	push	{r4, r5, r6, lr}
1000f03e:	1c15      	adds	r5, r2, #0
1000f040:	0a00      	lsrs	r0, r0, #8
1000f042:	8010      	strh	r0, [r2, #0]
1000f044:	784b      	ldrb	r3, [r1, #1]
1000f046:	780a      	ldrb	r2, [r1, #0]
1000f048:	021b      	lsls	r3, r3, #8
1000f04a:	4313      	orrs	r3, r2
1000f04c:	806b      	strh	r3, [r5, #2]
1000f04e:	788e      	ldrb	r6, [r1, #2]
1000f050:	4b05      	ldr	r3, [pc, #20]	; (1000f068 <gattc_disc_char_desc_ind_parser+0x2c>)
1000f052:	1c30      	adds	r0, r6, #0
1000f054:	1c0c      	adds	r4, r1, #0
1000f056:	4798      	blx	r3
1000f058:	1c32      	adds	r2, r6, #0
1000f05a:	7128      	strb	r0, [r5, #4]
1000f05c:	1ce1      	adds	r1, r4, #3
1000f05e:	1d68      	adds	r0, r5, #5
1000f060:	4b02      	ldr	r3, [pc, #8]	; (1000f06c <gattc_disc_char_desc_ind_parser+0x30>)
1000f062:	4798      	blx	r3
1000f064:	bd70      	pop	{r4, r5, r6, pc}
1000f066:	46c0      	nop			; (mov r8, r8)
1000f068:	1000d221 	.word	0x1000d221
1000f06c:	10010423 	.word	0x10010423

1000f070 <gattc_event_ind_and_notification_parser>:
1000f070:	b510      	push	{r4, lr}
1000f072:	780c      	ldrb	r4, [r1, #0]
1000f074:	1c13      	adds	r3, r2, #0
1000f076:	2c12      	cmp	r4, #18
1000f078:	d10e      	bne.n	1000f098 <gattc_event_ind_and_notification_parser+0x28>
1000f07a:	0a00      	lsrs	r0, r0, #8
1000f07c:	8010      	strh	r0, [r2, #0]
1000f07e:	788a      	ldrb	r2, [r1, #2]
1000f080:	709a      	strb	r2, [r3, #2]
1000f082:	7948      	ldrb	r0, [r1, #5]
1000f084:	790c      	ldrb	r4, [r1, #4]
1000f086:	0200      	lsls	r0, r0, #8
1000f088:	4320      	orrs	r0, r4
1000f08a:	8098      	strh	r0, [r3, #4]
1000f08c:	3106      	adds	r1, #6
1000f08e:	1d98      	adds	r0, r3, #6
1000f090:	4b0b      	ldr	r3, [pc, #44]	; (1000f0c0 <gattc_event_ind_and_notification_parser+0x50>)
1000f092:	4798      	blx	r3
1000f094:	221b      	movs	r2, #27
1000f096:	e010      	b.n	1000f0ba <gattc_event_ind_and_notification_parser+0x4a>
1000f098:	2200      	movs	r2, #0
1000f09a:	2c13      	cmp	r4, #19
1000f09c:	d10d      	bne.n	1000f0ba <gattc_event_ind_and_notification_parser+0x4a>
1000f09e:	0a00      	lsrs	r0, r0, #8
1000f0a0:	8018      	strh	r0, [r3, #0]
1000f0a2:	788a      	ldrb	r2, [r1, #2]
1000f0a4:	709a      	strb	r2, [r3, #2]
1000f0a6:	7908      	ldrb	r0, [r1, #4]
1000f0a8:	78cc      	ldrb	r4, [r1, #3]
1000f0aa:	0200      	lsls	r0, r0, #8
1000f0ac:	4320      	orrs	r0, r4
1000f0ae:	8098      	strh	r0, [r3, #4]
1000f0b0:	3106      	adds	r1, #6
1000f0b2:	1d98      	adds	r0, r3, #6
1000f0b4:	4b02      	ldr	r3, [pc, #8]	; (1000f0c0 <gattc_event_ind_and_notification_parser+0x50>)
1000f0b6:	4798      	blx	r3
1000f0b8:	221c      	movs	r2, #28
1000f0ba:	1c10      	adds	r0, r2, #0
1000f0bc:	bd10      	pop	{r4, pc}
1000f0be:	46c0      	nop			; (mov r8, r8)
1000f0c0:	10010423 	.word	0x10010423

1000f0c4 <gattc_complete_evt_handler>:
1000f0c4:	b500      	push	{lr}
1000f0c6:	0a00      	lsrs	r0, r0, #8
1000f0c8:	8010      	strh	r0, [r2, #0]
1000f0ca:	7808      	ldrb	r0, [r1, #0]
1000f0cc:	7090      	strb	r0, [r2, #2]
1000f0ce:	784b      	ldrb	r3, [r1, #1]
1000f0d0:	3801      	subs	r0, #1
1000f0d2:	70d3      	strb	r3, [r2, #3]
1000f0d4:	2813      	cmp	r0, #19
1000f0d6:	d82c      	bhi.n	1000f132 <gattc_complete_evt_handler+0x6e>
1000f0d8:	f000 f914 	bl	1000f304 <__gnu_thumb1_case_uqi>
1000f0dc:	0a0a0a0c 	.word	0x0a0a0a0c
1000f0e0:	210a0a0a 	.word	0x210a0a0a
1000f0e4:	111f2121 	.word	0x111f2121
1000f0e8:	2b111111 	.word	0x2b111111
1000f0ec:	2919132b 	.word	0x2919132b
1000f0f0:	2017      	movs	r0, #23
1000f0f2:	e01f      	b.n	1000f134 <gattc_complete_evt_handler+0x70>
1000f0f4:	2024      	movs	r0, #36	; 0x24
1000f0f6:	2b00      	cmp	r3, #0
1000f0f8:	d11c      	bne.n	1000f134 <gattc_complete_evt_handler+0x70>
1000f0fa:	3017      	adds	r0, #23
1000f0fc:	e01a      	b.n	1000f134 <gattc_complete_evt_handler+0x70>
1000f0fe:	2025      	movs	r0, #37	; 0x25
1000f100:	e018      	b.n	1000f134 <gattc_complete_evt_handler+0x70>
1000f102:	4a0d      	ldr	r2, [pc, #52]	; (1000f138 <gattc_complete_evt_handler+0x74>)
1000f104:	201d      	movs	r0, #29
1000f106:	6813      	ldr	r3, [r2, #0]
1000f108:	3b01      	subs	r3, #1
1000f10a:	6013      	str	r3, [r2, #0]
1000f10c:	e012      	b.n	1000f134 <gattc_complete_evt_handler+0x70>
1000f10e:	4a0a      	ldr	r2, [pc, #40]	; (1000f138 <gattc_complete_evt_handler+0x74>)
1000f110:	201e      	movs	r0, #30
1000f112:	6813      	ldr	r3, [r2, #0]
1000f114:	3b01      	subs	r3, #1
1000f116:	6013      	str	r3, [r2, #0]
1000f118:	e00c      	b.n	1000f134 <gattc_complete_evt_handler+0x70>
1000f11a:	2019      	movs	r0, #25
1000f11c:	e00a      	b.n	1000f134 <gattc_complete_evt_handler+0x70>
1000f11e:	203b      	movs	r0, #59	; 0x3b
1000f120:	2b00      	cmp	r3, #0
1000f122:	d007      	beq.n	1000f134 <gattc_complete_evt_handler+0x70>
1000f124:	2182      	movs	r1, #130	; 0x82
1000f126:	0089      	lsls	r1, r1, #2
1000f128:	5453      	strb	r3, [r2, r1]
1000f12a:	3823      	subs	r0, #35	; 0x23
1000f12c:	e002      	b.n	1000f134 <gattc_complete_evt_handler+0x70>
1000f12e:	2021      	movs	r0, #33	; 0x21
1000f130:	e000      	b.n	1000f134 <gattc_complete_evt_handler+0x70>
1000f132:	2000      	movs	r0, #0
1000f134:	bd00      	pop	{pc}
1000f136:	46c0      	nop			; (mov r8, r8)
1000f138:	10014610 	.word	0x10014610

1000f13c <gattc_event_mtu_changed_ind_parser>:
1000f13c:	0a00      	lsrs	r0, r0, #8
1000f13e:	8010      	strh	r0, [r2, #0]
1000f140:	784b      	ldrb	r3, [r1, #1]
1000f142:	7809      	ldrb	r1, [r1, #0]
1000f144:	021b      	lsls	r3, r3, #8
1000f146:	430b      	orrs	r3, r1
1000f148:	8053      	strh	r3, [r2, #2]
1000f14a:	4770      	bx	lr

1000f14c <gattc_read_ind_parser>:
1000f14c:	0a00      	lsrs	r0, r0, #8
1000f14e:	b508      	push	{r3, lr}
1000f150:	8010      	strh	r0, [r2, #0]
1000f152:	1c13      	adds	r3, r2, #0
1000f154:	2282      	movs	r2, #130	; 0x82
1000f156:	2000      	movs	r0, #0
1000f158:	0092      	lsls	r2, r2, #2
1000f15a:	5498      	strb	r0, [r3, r2]
1000f15c:	784a      	ldrb	r2, [r1, #1]
1000f15e:	7808      	ldrb	r0, [r1, #0]
1000f160:	0212      	lsls	r2, r2, #8
1000f162:	4302      	orrs	r2, r0
1000f164:	805a      	strh	r2, [r3, #2]
1000f166:	78ca      	ldrb	r2, [r1, #3]
1000f168:	7888      	ldrb	r0, [r1, #2]
1000f16a:	0212      	lsls	r2, r2, #8
1000f16c:	4302      	orrs	r2, r0
1000f16e:	80da      	strh	r2, [r3, #6]
1000f170:	794a      	ldrb	r2, [r1, #5]
1000f172:	7908      	ldrb	r0, [r1, #4]
1000f174:	0212      	lsls	r2, r2, #8
1000f176:	4302      	orrs	r2, r0
1000f178:	809a      	strh	r2, [r3, #4]
1000f17a:	3308      	adds	r3, #8
1000f17c:	1c18      	adds	r0, r3, #0
1000f17e:	3106      	adds	r1, #6
1000f180:	4b01      	ldr	r3, [pc, #4]	; (1000f188 <gattc_read_ind_parser+0x3c>)
1000f182:	4798      	blx	r3
1000f184:	bd08      	pop	{r3, pc}
1000f186:	46c0      	nop			; (mov r8, r8)
1000f188:	10010423 	.word	0x10010423

1000f18c <gattc_svc_changed_cfg_ind_parser>:
1000f18c:	0a00      	lsrs	r0, r0, #8
1000f18e:	8010      	strh	r0, [r2, #0]
1000f190:	784b      	ldrb	r3, [r1, #1]
1000f192:	7809      	ldrb	r1, [r1, #0]
1000f194:	021b      	lsls	r3, r3, #8
1000f196:	430b      	orrs	r3, r1
1000f198:	8053      	strh	r3, [r2, #2]
1000f19a:	4770      	bx	lr

1000f19c <init_gattc_task_module>:
1000f19c:	2300      	movs	r3, #0
1000f19e:	4a02      	ldr	r2, [pc, #8]	; (1000f1a8 <init_gattc_task_module+0xc>)
1000f1a0:	8013      	strh	r3, [r2, #0]
1000f1a2:	4a02      	ldr	r2, [pc, #8]	; (1000f1ac <init_gattc_task_module+0x10>)
1000f1a4:	8013      	strh	r3, [r2, #0]
1000f1a6:	4770      	bx	lr
1000f1a8:	1001460a 	.word	0x1001460a
1000f1ac:	1001460c 	.word	0x1001460c

1000f1b0 <gattm_att_set_value_req_handler>:
1000f1b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f1b2:	466b      	mov	r3, sp
1000f1b4:	1dde      	adds	r6, r3, #7
1000f1b6:	2300      	movs	r3, #0
1000f1b8:	1c0d      	adds	r5, r1, #0
1000f1ba:	210c      	movs	r1, #12
1000f1bc:	270b      	movs	r7, #11
1000f1be:	4c17      	ldr	r4, [pc, #92]	; (1000f21c <gattm_att_set_value_req_handler+0x6c>)
1000f1c0:	7033      	strb	r3, [r6, #0]
1000f1c2:	70e3      	strb	r3, [r4, #3]
1000f1c4:	4b16      	ldr	r3, [pc, #88]	; (1000f220 <gattm_att_set_value_req_handler+0x70>)
1000f1c6:	7021      	strb	r1, [r4, #0]
1000f1c8:	8819      	ldrh	r1, [r3, #0]
1000f1ca:	881b      	ldrh	r3, [r3, #0]
1000f1cc:	7220      	strb	r0, [r4, #8]
1000f1ce:	0a1b      	lsrs	r3, r3, #8
1000f1d0:	7163      	strb	r3, [r4, #5]
1000f1d2:	0a00      	lsrs	r0, r0, #8
1000f1d4:	0a2b      	lsrs	r3, r5, #8
1000f1d6:	7121      	strb	r1, [r4, #4]
1000f1d8:	7260      	strb	r0, [r4, #9]
1000f1da:	1c11      	adds	r1, r2, #0
1000f1dc:	72a5      	strb	r5, [r4, #10]
1000f1de:	1c2a      	adds	r2, r5, #0
1000f1e0:	72e3      	strb	r3, [r4, #11]
1000f1e2:	350c      	adds	r5, #12
1000f1e4:	4b0f      	ldr	r3, [pc, #60]	; (1000f224 <gattm_att_set_value_req_handler+0x74>)
1000f1e6:	4810      	ldr	r0, [pc, #64]	; (1000f228 <gattm_att_set_value_req_handler+0x78>)
1000f1e8:	7067      	strb	r7, [r4, #1]
1000f1ea:	70a7      	strb	r7, [r4, #2]
1000f1ec:	4798      	blx	r3
1000f1ee:	b2a9      	uxth	r1, r5
1000f1f0:	4b0e      	ldr	r3, [pc, #56]	; (1000f22c <gattm_att_set_value_req_handler+0x7c>)
1000f1f2:	4d0f      	ldr	r5, [pc, #60]	; (1000f230 <gattm_att_set_value_req_handler+0x80>)
1000f1f4:	1c20      	adds	r0, r4, #0
1000f1f6:	802b      	strh	r3, [r5, #0]
1000f1f8:	1c0b      	adds	r3, r1, #0
1000f1fa:	3b08      	subs	r3, #8
1000f1fc:	71a3      	strb	r3, [r4, #6]
1000f1fe:	121b      	asrs	r3, r3, #8
1000f200:	71e3      	strb	r3, [r4, #7]
1000f202:	4b0c      	ldr	r3, [pc, #48]	; (1000f234 <gattm_att_set_value_req_handler+0x84>)
1000f204:	80af      	strh	r7, [r5, #4]
1000f206:	4798      	blx	r3
1000f208:	1c30      	adds	r0, r6, #0
1000f20a:	4b0b      	ldr	r3, [pc, #44]	; (1000f238 <gattm_att_set_value_req_handler+0x88>)
1000f20c:	4798      	blx	r3
1000f20e:	7833      	ldrb	r3, [r6, #0]
1000f210:	20e2      	movs	r0, #226	; 0xe2
1000f212:	2b00      	cmp	r3, #0
1000f214:	d101      	bne.n	1000f21a <gattm_att_set_value_req_handler+0x6a>
1000f216:	68ab      	ldr	r3, [r5, #8]
1000f218:	7898      	ldrb	r0, [r3, #2]
1000f21a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000f21c:	10015634 	.word	0x10015634
1000f220:	100152c4 	.word	0x100152c4
1000f224:	10010423 	.word	0x10010423
1000f228:	10015640 	.word	0x10015640
1000f22c:	00000b0d 	.word	0x00000b0d
1000f230:	100152b8 	.word	0x100152b8
1000f234:	1000d939 	.word	0x1000d939
1000f238:	1000d99d 	.word	0x1000d99d

1000f23c <gattm_att_get_value_req_handler>:
1000f23c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f23e:	b085      	sub	sp, #20
1000f240:	9201      	str	r2, [sp, #4]
1000f242:	220a      	movs	r2, #10
1000f244:	1c04      	adds	r4, r0, #0
1000f246:	481d      	ldr	r0, [pc, #116]	; (1000f2bc <gattm_att_get_value_req_handler+0x80>)
1000f248:	ab02      	add	r3, sp, #8
1000f24a:	1dde      	adds	r6, r3, #7
1000f24c:	7002      	strb	r2, [r0, #0]
1000f24e:	2300      	movs	r3, #0
1000f250:	220b      	movs	r2, #11
1000f252:	4d1b      	ldr	r5, [pc, #108]	; (1000f2c0 <gattm_att_get_value_req_handler+0x84>)
1000f254:	1c0f      	adds	r7, r1, #0
1000f256:	8829      	ldrh	r1, [r5, #0]
1000f258:	882d      	ldrh	r5, [r5, #0]
1000f25a:	7101      	strb	r1, [r0, #4]
1000f25c:	0a2d      	lsrs	r5, r5, #8
1000f25e:	7145      	strb	r5, [r0, #5]
1000f260:	0a25      	lsrs	r5, r4, #8
1000f262:	7245      	strb	r5, [r0, #9]
1000f264:	4917      	ldr	r1, [pc, #92]	; (1000f2c4 <gattm_att_get_value_req_handler+0x88>)
1000f266:	4d18      	ldr	r5, [pc, #96]	; (1000f2c8 <gattm_att_get_value_req_handler+0x8c>)
1000f268:	7033      	strb	r3, [r6, #0]
1000f26a:	7042      	strb	r2, [r0, #1]
1000f26c:	7082      	strb	r2, [r0, #2]
1000f26e:	70c3      	strb	r3, [r0, #3]
1000f270:	8029      	strh	r1, [r5, #0]
1000f272:	80aa      	strh	r2, [r5, #4]
1000f274:	71c3      	strb	r3, [r0, #7]
1000f276:	3a09      	subs	r2, #9
1000f278:	210a      	movs	r1, #10
1000f27a:	4b14      	ldr	r3, [pc, #80]	; (1000f2cc <gattm_att_get_value_req_handler+0x90>)
1000f27c:	7182      	strb	r2, [r0, #6]
1000f27e:	7204      	strb	r4, [r0, #8]
1000f280:	4798      	blx	r3
1000f282:	1c30      	adds	r0, r6, #0
1000f284:	4b12      	ldr	r3, [pc, #72]	; (1000f2d0 <gattm_att_get_value_req_handler+0x94>)
1000f286:	4798      	blx	r3
1000f288:	7833      	ldrb	r3, [r6, #0]
1000f28a:	20e2      	movs	r0, #226	; 0xe2
1000f28c:	2b00      	cmp	r3, #0
1000f28e:	d112      	bne.n	1000f2b6 <gattm_att_get_value_req_handler+0x7a>
1000f290:	68a9      	ldr	r1, [r5, #8]
1000f292:	9801      	ldr	r0, [sp, #4]
1000f294:	784d      	ldrb	r5, [r1, #1]
1000f296:	780b      	ldrb	r3, [r1, #0]
1000f298:	78ca      	ldrb	r2, [r1, #3]
1000f29a:	022d      	lsls	r5, r5, #8
1000f29c:	431d      	orrs	r5, r3
1000f29e:	788b      	ldrb	r3, [r1, #2]
1000f2a0:	0212      	lsls	r2, r2, #8
1000f2a2:	431a      	orrs	r2, r3
1000f2a4:	803a      	strh	r2, [r7, #0]
1000f2a6:	790e      	ldrb	r6, [r1, #4]
1000f2a8:	4b0a      	ldr	r3, [pc, #40]	; (1000f2d4 <gattm_att_get_value_req_handler+0x98>)
1000f2aa:	3105      	adds	r1, #5
1000f2ac:	4798      	blx	r3
1000f2ae:	20e2      	movs	r0, #226	; 0xe2
1000f2b0:	42ac      	cmp	r4, r5
1000f2b2:	d100      	bne.n	1000f2b6 <gattm_att_get_value_req_handler+0x7a>
1000f2b4:	1c30      	adds	r0, r6, #0
1000f2b6:	b005      	add	sp, #20
1000f2b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f2ba:	46c0      	nop			; (mov r8, r8)
1000f2bc:	10015634 	.word	0x10015634
1000f2c0:	100152c4 	.word	0x100152c4
1000f2c4:	00000b0b 	.word	0x00000b0b
1000f2c8:	100152b8 	.word	0x100152b8
1000f2cc:	1000d939 	.word	0x1000d939
1000f2d0:	1000d99d 	.word	0x1000d99d
1000f2d4:	10010423 	.word	0x10010423

1000f2d8 <htpt_enable_rsp_handler>:
1000f2d8:	780b      	ldrb	r3, [r1, #0]
1000f2da:	7013      	strb	r3, [r2, #0]
1000f2dc:	784b      	ldrb	r3, [r1, #1]
1000f2de:	7053      	strb	r3, [r2, #1]
1000f2e0:	4770      	bx	lr

1000f2e2 <htpt_temp_send_rsp_handler>:
1000f2e2:	780b      	ldrb	r3, [r1, #0]
1000f2e4:	7013      	strb	r3, [r2, #0]
1000f2e6:	4770      	bx	lr

1000f2e8 <htpt_meas_intv_upd_rsp_handler>:
1000f2e8:	780b      	ldrb	r3, [r1, #0]
1000f2ea:	7013      	strb	r3, [r2, #0]
1000f2ec:	4770      	bx	lr

1000f2ee <htpt_meas_intv_chg_req_ind_handler>:
1000f2ee:	78cb      	ldrb	r3, [r1, #3]
1000f2f0:	7889      	ldrb	r1, [r1, #2]
1000f2f2:	021b      	lsls	r3, r3, #8
1000f2f4:	430b      	orrs	r3, r1
1000f2f6:	8013      	strh	r3, [r2, #0]
1000f2f8:	4770      	bx	lr

1000f2fa <htpt_cfg_indntf_ind_handler>:
1000f2fa:	780b      	ldrb	r3, [r1, #0]
1000f2fc:	7013      	strb	r3, [r2, #0]
1000f2fe:	784b      	ldrb	r3, [r1, #1]
1000f300:	7053      	strb	r3, [r2, #1]
1000f302:	4770      	bx	lr

1000f304 <__gnu_thumb1_case_uqi>:
1000f304:	b402      	push	{r1}
1000f306:	4671      	mov	r1, lr
1000f308:	0849      	lsrs	r1, r1, #1
1000f30a:	0049      	lsls	r1, r1, #1
1000f30c:	5c09      	ldrb	r1, [r1, r0]
1000f30e:	0049      	lsls	r1, r1, #1
1000f310:	448e      	add	lr, r1
1000f312:	bc02      	pop	{r1}
1000f314:	4770      	bx	lr
1000f316:	46c0      	nop			; (mov r8, r8)

1000f318 <__aeabi_uidiv>:
1000f318:	2200      	movs	r2, #0
1000f31a:	0843      	lsrs	r3, r0, #1
1000f31c:	428b      	cmp	r3, r1
1000f31e:	d374      	bcc.n	1000f40a <__aeabi_uidiv+0xf2>
1000f320:	0903      	lsrs	r3, r0, #4
1000f322:	428b      	cmp	r3, r1
1000f324:	d35f      	bcc.n	1000f3e6 <__aeabi_uidiv+0xce>
1000f326:	0a03      	lsrs	r3, r0, #8
1000f328:	428b      	cmp	r3, r1
1000f32a:	d344      	bcc.n	1000f3b6 <__aeabi_uidiv+0x9e>
1000f32c:	0b03      	lsrs	r3, r0, #12
1000f32e:	428b      	cmp	r3, r1
1000f330:	d328      	bcc.n	1000f384 <__aeabi_uidiv+0x6c>
1000f332:	0c03      	lsrs	r3, r0, #16
1000f334:	428b      	cmp	r3, r1
1000f336:	d30d      	bcc.n	1000f354 <__aeabi_uidiv+0x3c>
1000f338:	22ff      	movs	r2, #255	; 0xff
1000f33a:	0209      	lsls	r1, r1, #8
1000f33c:	ba12      	rev	r2, r2
1000f33e:	0c03      	lsrs	r3, r0, #16
1000f340:	428b      	cmp	r3, r1
1000f342:	d302      	bcc.n	1000f34a <__aeabi_uidiv+0x32>
1000f344:	1212      	asrs	r2, r2, #8
1000f346:	0209      	lsls	r1, r1, #8
1000f348:	d065      	beq.n	1000f416 <__aeabi_uidiv+0xfe>
1000f34a:	0b03      	lsrs	r3, r0, #12
1000f34c:	428b      	cmp	r3, r1
1000f34e:	d319      	bcc.n	1000f384 <__aeabi_uidiv+0x6c>
1000f350:	e000      	b.n	1000f354 <__aeabi_uidiv+0x3c>
1000f352:	0a09      	lsrs	r1, r1, #8
1000f354:	0bc3      	lsrs	r3, r0, #15
1000f356:	428b      	cmp	r3, r1
1000f358:	d301      	bcc.n	1000f35e <__aeabi_uidiv+0x46>
1000f35a:	03cb      	lsls	r3, r1, #15
1000f35c:	1ac0      	subs	r0, r0, r3
1000f35e:	4152      	adcs	r2, r2
1000f360:	0b83      	lsrs	r3, r0, #14
1000f362:	428b      	cmp	r3, r1
1000f364:	d301      	bcc.n	1000f36a <__aeabi_uidiv+0x52>
1000f366:	038b      	lsls	r3, r1, #14
1000f368:	1ac0      	subs	r0, r0, r3
1000f36a:	4152      	adcs	r2, r2
1000f36c:	0b43      	lsrs	r3, r0, #13
1000f36e:	428b      	cmp	r3, r1
1000f370:	d301      	bcc.n	1000f376 <__aeabi_uidiv+0x5e>
1000f372:	034b      	lsls	r3, r1, #13
1000f374:	1ac0      	subs	r0, r0, r3
1000f376:	4152      	adcs	r2, r2
1000f378:	0b03      	lsrs	r3, r0, #12
1000f37a:	428b      	cmp	r3, r1
1000f37c:	d301      	bcc.n	1000f382 <__aeabi_uidiv+0x6a>
1000f37e:	030b      	lsls	r3, r1, #12
1000f380:	1ac0      	subs	r0, r0, r3
1000f382:	4152      	adcs	r2, r2
1000f384:	0ac3      	lsrs	r3, r0, #11
1000f386:	428b      	cmp	r3, r1
1000f388:	d301      	bcc.n	1000f38e <__aeabi_uidiv+0x76>
1000f38a:	02cb      	lsls	r3, r1, #11
1000f38c:	1ac0      	subs	r0, r0, r3
1000f38e:	4152      	adcs	r2, r2
1000f390:	0a83      	lsrs	r3, r0, #10
1000f392:	428b      	cmp	r3, r1
1000f394:	d301      	bcc.n	1000f39a <__aeabi_uidiv+0x82>
1000f396:	028b      	lsls	r3, r1, #10
1000f398:	1ac0      	subs	r0, r0, r3
1000f39a:	4152      	adcs	r2, r2
1000f39c:	0a43      	lsrs	r3, r0, #9
1000f39e:	428b      	cmp	r3, r1
1000f3a0:	d301      	bcc.n	1000f3a6 <__aeabi_uidiv+0x8e>
1000f3a2:	024b      	lsls	r3, r1, #9
1000f3a4:	1ac0      	subs	r0, r0, r3
1000f3a6:	4152      	adcs	r2, r2
1000f3a8:	0a03      	lsrs	r3, r0, #8
1000f3aa:	428b      	cmp	r3, r1
1000f3ac:	d301      	bcc.n	1000f3b2 <__aeabi_uidiv+0x9a>
1000f3ae:	020b      	lsls	r3, r1, #8
1000f3b0:	1ac0      	subs	r0, r0, r3
1000f3b2:	4152      	adcs	r2, r2
1000f3b4:	d2cd      	bcs.n	1000f352 <__aeabi_uidiv+0x3a>
1000f3b6:	09c3      	lsrs	r3, r0, #7
1000f3b8:	428b      	cmp	r3, r1
1000f3ba:	d301      	bcc.n	1000f3c0 <__aeabi_uidiv+0xa8>
1000f3bc:	01cb      	lsls	r3, r1, #7
1000f3be:	1ac0      	subs	r0, r0, r3
1000f3c0:	4152      	adcs	r2, r2
1000f3c2:	0983      	lsrs	r3, r0, #6
1000f3c4:	428b      	cmp	r3, r1
1000f3c6:	d301      	bcc.n	1000f3cc <__aeabi_uidiv+0xb4>
1000f3c8:	018b      	lsls	r3, r1, #6
1000f3ca:	1ac0      	subs	r0, r0, r3
1000f3cc:	4152      	adcs	r2, r2
1000f3ce:	0943      	lsrs	r3, r0, #5
1000f3d0:	428b      	cmp	r3, r1
1000f3d2:	d301      	bcc.n	1000f3d8 <__aeabi_uidiv+0xc0>
1000f3d4:	014b      	lsls	r3, r1, #5
1000f3d6:	1ac0      	subs	r0, r0, r3
1000f3d8:	4152      	adcs	r2, r2
1000f3da:	0903      	lsrs	r3, r0, #4
1000f3dc:	428b      	cmp	r3, r1
1000f3de:	d301      	bcc.n	1000f3e4 <__aeabi_uidiv+0xcc>
1000f3e0:	010b      	lsls	r3, r1, #4
1000f3e2:	1ac0      	subs	r0, r0, r3
1000f3e4:	4152      	adcs	r2, r2
1000f3e6:	08c3      	lsrs	r3, r0, #3
1000f3e8:	428b      	cmp	r3, r1
1000f3ea:	d301      	bcc.n	1000f3f0 <__aeabi_uidiv+0xd8>
1000f3ec:	00cb      	lsls	r3, r1, #3
1000f3ee:	1ac0      	subs	r0, r0, r3
1000f3f0:	4152      	adcs	r2, r2
1000f3f2:	0883      	lsrs	r3, r0, #2
1000f3f4:	428b      	cmp	r3, r1
1000f3f6:	d301      	bcc.n	1000f3fc <__aeabi_uidiv+0xe4>
1000f3f8:	008b      	lsls	r3, r1, #2
1000f3fa:	1ac0      	subs	r0, r0, r3
1000f3fc:	4152      	adcs	r2, r2
1000f3fe:	0843      	lsrs	r3, r0, #1
1000f400:	428b      	cmp	r3, r1
1000f402:	d301      	bcc.n	1000f408 <__aeabi_uidiv+0xf0>
1000f404:	004b      	lsls	r3, r1, #1
1000f406:	1ac0      	subs	r0, r0, r3
1000f408:	4152      	adcs	r2, r2
1000f40a:	1a41      	subs	r1, r0, r1
1000f40c:	d200      	bcs.n	1000f410 <__aeabi_uidiv+0xf8>
1000f40e:	4601      	mov	r1, r0
1000f410:	4152      	adcs	r2, r2
1000f412:	4610      	mov	r0, r2
1000f414:	4770      	bx	lr
1000f416:	e7ff      	b.n	1000f418 <__aeabi_uidiv+0x100>
1000f418:	b501      	push	{r0, lr}
1000f41a:	2000      	movs	r0, #0
1000f41c:	f000 f806 	bl	1000f42c <__aeabi_idiv0>
1000f420:	bd02      	pop	{r1, pc}
1000f422:	46c0      	nop			; (mov r8, r8)

1000f424 <__aeabi_uidivmod>:
1000f424:	2900      	cmp	r1, #0
1000f426:	d0f7      	beq.n	1000f418 <__aeabi_uidiv+0x100>
1000f428:	e776      	b.n	1000f318 <__aeabi_uidiv>
1000f42a:	4770      	bx	lr

1000f42c <__aeabi_idiv0>:
1000f42c:	4770      	bx	lr
1000f42e:	46c0      	nop			; (mov r8, r8)

1000f430 <__aeabi_d2uiz>:
1000f430:	b570      	push	{r4, r5, r6, lr}
1000f432:	2200      	movs	r2, #0
1000f434:	4b0c      	ldr	r3, [pc, #48]	; (1000f468 <__aeabi_d2uiz+0x38>)
1000f436:	0004      	movs	r4, r0
1000f438:	000d      	movs	r5, r1
1000f43a:	f000 fe87 	bl	1001014c <__aeabi_dcmpge>
1000f43e:	2800      	cmp	r0, #0
1000f440:	d104      	bne.n	1000f44c <__aeabi_d2uiz+0x1c>
1000f442:	0020      	movs	r0, r4
1000f444:	0029      	movs	r1, r5
1000f446:	f000 fddf 	bl	10010008 <__aeabi_d2iz>
1000f44a:	bd70      	pop	{r4, r5, r6, pc}
1000f44c:	4b06      	ldr	r3, [pc, #24]	; (1000f468 <__aeabi_d2uiz+0x38>)
1000f44e:	2200      	movs	r2, #0
1000f450:	0020      	movs	r0, r4
1000f452:	0029      	movs	r1, r5
1000f454:	f000 fa84 	bl	1000f960 <__aeabi_dsub>
1000f458:	f000 fdd6 	bl	10010008 <__aeabi_d2iz>
1000f45c:	2380      	movs	r3, #128	; 0x80
1000f45e:	061b      	lsls	r3, r3, #24
1000f460:	469c      	mov	ip, r3
1000f462:	4460      	add	r0, ip
1000f464:	e7f1      	b.n	1000f44a <__aeabi_d2uiz+0x1a>
1000f466:	46c0      	nop			; (mov r8, r8)
1000f468:	41e00000 	.word	0x41e00000

1000f46c <__aeabi_dmul>:
1000f46c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f46e:	465f      	mov	r7, fp
1000f470:	4656      	mov	r6, sl
1000f472:	464d      	mov	r5, r9
1000f474:	4644      	mov	r4, r8
1000f476:	b4f0      	push	{r4, r5, r6, r7}
1000f478:	030d      	lsls	r5, r1, #12
1000f47a:	4699      	mov	r9, r3
1000f47c:	004e      	lsls	r6, r1, #1
1000f47e:	0b2b      	lsrs	r3, r5, #12
1000f480:	b087      	sub	sp, #28
1000f482:	0007      	movs	r7, r0
1000f484:	4692      	mov	sl, r2
1000f486:	4680      	mov	r8, r0
1000f488:	469b      	mov	fp, r3
1000f48a:	0d76      	lsrs	r6, r6, #21
1000f48c:	0fcc      	lsrs	r4, r1, #31
1000f48e:	2e00      	cmp	r6, #0
1000f490:	d069      	beq.n	1000f566 <__aeabi_dmul+0xfa>
1000f492:	4b6d      	ldr	r3, [pc, #436]	; (1000f648 <__aeabi_dmul+0x1dc>)
1000f494:	429e      	cmp	r6, r3
1000f496:	d035      	beq.n	1000f504 <__aeabi_dmul+0x98>
1000f498:	465b      	mov	r3, fp
1000f49a:	2280      	movs	r2, #128	; 0x80
1000f49c:	00dd      	lsls	r5, r3, #3
1000f49e:	0412      	lsls	r2, r2, #16
1000f4a0:	0f43      	lsrs	r3, r0, #29
1000f4a2:	4313      	orrs	r3, r2
1000f4a4:	432b      	orrs	r3, r5
1000f4a6:	469b      	mov	fp, r3
1000f4a8:	00c3      	lsls	r3, r0, #3
1000f4aa:	4698      	mov	r8, r3
1000f4ac:	4b67      	ldr	r3, [pc, #412]	; (1000f64c <__aeabi_dmul+0x1e0>)
1000f4ae:	2700      	movs	r7, #0
1000f4b0:	469c      	mov	ip, r3
1000f4b2:	2300      	movs	r3, #0
1000f4b4:	4466      	add	r6, ip
1000f4b6:	9301      	str	r3, [sp, #4]
1000f4b8:	464a      	mov	r2, r9
1000f4ba:	0315      	lsls	r5, r2, #12
1000f4bc:	0050      	lsls	r0, r2, #1
1000f4be:	0fd2      	lsrs	r2, r2, #31
1000f4c0:	4653      	mov	r3, sl
1000f4c2:	0b2d      	lsrs	r5, r5, #12
1000f4c4:	0d40      	lsrs	r0, r0, #21
1000f4c6:	4691      	mov	r9, r2
1000f4c8:	d100      	bne.n	1000f4cc <__aeabi_dmul+0x60>
1000f4ca:	e076      	b.n	1000f5ba <__aeabi_dmul+0x14e>
1000f4cc:	4a5e      	ldr	r2, [pc, #376]	; (1000f648 <__aeabi_dmul+0x1dc>)
1000f4ce:	4290      	cmp	r0, r2
1000f4d0:	d06c      	beq.n	1000f5ac <__aeabi_dmul+0x140>
1000f4d2:	2280      	movs	r2, #128	; 0x80
1000f4d4:	0f5b      	lsrs	r3, r3, #29
1000f4d6:	0412      	lsls	r2, r2, #16
1000f4d8:	4313      	orrs	r3, r2
1000f4da:	4a5c      	ldr	r2, [pc, #368]	; (1000f64c <__aeabi_dmul+0x1e0>)
1000f4dc:	00ed      	lsls	r5, r5, #3
1000f4de:	4694      	mov	ip, r2
1000f4e0:	431d      	orrs	r5, r3
1000f4e2:	4653      	mov	r3, sl
1000f4e4:	2200      	movs	r2, #0
1000f4e6:	00db      	lsls	r3, r3, #3
1000f4e8:	4460      	add	r0, ip
1000f4ea:	4649      	mov	r1, r9
1000f4ec:	1836      	adds	r6, r6, r0
1000f4ee:	1c70      	adds	r0, r6, #1
1000f4f0:	4061      	eors	r1, r4
1000f4f2:	9002      	str	r0, [sp, #8]
1000f4f4:	4317      	orrs	r7, r2
1000f4f6:	2f0f      	cmp	r7, #15
1000f4f8:	d900      	bls.n	1000f4fc <__aeabi_dmul+0x90>
1000f4fa:	e0af      	b.n	1000f65c <__aeabi_dmul+0x1f0>
1000f4fc:	4854      	ldr	r0, [pc, #336]	; (1000f650 <__aeabi_dmul+0x1e4>)
1000f4fe:	00bf      	lsls	r7, r7, #2
1000f500:	59c7      	ldr	r7, [r0, r7]
1000f502:	46bf      	mov	pc, r7
1000f504:	465b      	mov	r3, fp
1000f506:	431f      	orrs	r7, r3
1000f508:	d000      	beq.n	1000f50c <__aeabi_dmul+0xa0>
1000f50a:	e088      	b.n	1000f61e <__aeabi_dmul+0x1b2>
1000f50c:	2300      	movs	r3, #0
1000f50e:	469b      	mov	fp, r3
1000f510:	4698      	mov	r8, r3
1000f512:	3302      	adds	r3, #2
1000f514:	2708      	movs	r7, #8
1000f516:	9301      	str	r3, [sp, #4]
1000f518:	e7ce      	b.n	1000f4b8 <__aeabi_dmul+0x4c>
1000f51a:	4649      	mov	r1, r9
1000f51c:	2a02      	cmp	r2, #2
1000f51e:	d06a      	beq.n	1000f5f6 <__aeabi_dmul+0x18a>
1000f520:	2a03      	cmp	r2, #3
1000f522:	d100      	bne.n	1000f526 <__aeabi_dmul+0xba>
1000f524:	e209      	b.n	1000f93a <__aeabi_dmul+0x4ce>
1000f526:	2a01      	cmp	r2, #1
1000f528:	d000      	beq.n	1000f52c <__aeabi_dmul+0xc0>
1000f52a:	e1bb      	b.n	1000f8a4 <__aeabi_dmul+0x438>
1000f52c:	4011      	ands	r1, r2
1000f52e:	2200      	movs	r2, #0
1000f530:	2300      	movs	r3, #0
1000f532:	2500      	movs	r5, #0
1000f534:	4690      	mov	r8, r2
1000f536:	b2cc      	uxtb	r4, r1
1000f538:	2100      	movs	r1, #0
1000f53a:	032d      	lsls	r5, r5, #12
1000f53c:	0d0a      	lsrs	r2, r1, #20
1000f53e:	0512      	lsls	r2, r2, #20
1000f540:	0b2d      	lsrs	r5, r5, #12
1000f542:	4315      	orrs	r5, r2
1000f544:	4a43      	ldr	r2, [pc, #268]	; (1000f654 <__aeabi_dmul+0x1e8>)
1000f546:	051b      	lsls	r3, r3, #20
1000f548:	4015      	ands	r5, r2
1000f54a:	431d      	orrs	r5, r3
1000f54c:	006d      	lsls	r5, r5, #1
1000f54e:	07e4      	lsls	r4, r4, #31
1000f550:	086d      	lsrs	r5, r5, #1
1000f552:	4325      	orrs	r5, r4
1000f554:	4640      	mov	r0, r8
1000f556:	0029      	movs	r1, r5
1000f558:	b007      	add	sp, #28
1000f55a:	bc3c      	pop	{r2, r3, r4, r5}
1000f55c:	4690      	mov	r8, r2
1000f55e:	4699      	mov	r9, r3
1000f560:	46a2      	mov	sl, r4
1000f562:	46ab      	mov	fp, r5
1000f564:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f566:	4303      	orrs	r3, r0
1000f568:	d052      	beq.n	1000f610 <__aeabi_dmul+0x1a4>
1000f56a:	465b      	mov	r3, fp
1000f56c:	2b00      	cmp	r3, #0
1000f56e:	d100      	bne.n	1000f572 <__aeabi_dmul+0x106>
1000f570:	e18a      	b.n	1000f888 <__aeabi_dmul+0x41c>
1000f572:	4658      	mov	r0, fp
1000f574:	f000 fdf4 	bl	10010160 <__clzsi2>
1000f578:	0003      	movs	r3, r0
1000f57a:	3b0b      	subs	r3, #11
1000f57c:	2b1c      	cmp	r3, #28
1000f57e:	dd00      	ble.n	1000f582 <__aeabi_dmul+0x116>
1000f580:	e17b      	b.n	1000f87a <__aeabi_dmul+0x40e>
1000f582:	221d      	movs	r2, #29
1000f584:	1ad3      	subs	r3, r2, r3
1000f586:	003a      	movs	r2, r7
1000f588:	0001      	movs	r1, r0
1000f58a:	465d      	mov	r5, fp
1000f58c:	40da      	lsrs	r2, r3
1000f58e:	3908      	subs	r1, #8
1000f590:	408d      	lsls	r5, r1
1000f592:	0013      	movs	r3, r2
1000f594:	408f      	lsls	r7, r1
1000f596:	432b      	orrs	r3, r5
1000f598:	469b      	mov	fp, r3
1000f59a:	46b8      	mov	r8, r7
1000f59c:	4b2e      	ldr	r3, [pc, #184]	; (1000f658 <__aeabi_dmul+0x1ec>)
1000f59e:	2700      	movs	r7, #0
1000f5a0:	469c      	mov	ip, r3
1000f5a2:	2300      	movs	r3, #0
1000f5a4:	4460      	add	r0, ip
1000f5a6:	4246      	negs	r6, r0
1000f5a8:	9301      	str	r3, [sp, #4]
1000f5aa:	e785      	b.n	1000f4b8 <__aeabi_dmul+0x4c>
1000f5ac:	4652      	mov	r2, sl
1000f5ae:	432a      	orrs	r2, r5
1000f5b0:	d12c      	bne.n	1000f60c <__aeabi_dmul+0x1a0>
1000f5b2:	2500      	movs	r5, #0
1000f5b4:	2300      	movs	r3, #0
1000f5b6:	2202      	movs	r2, #2
1000f5b8:	e797      	b.n	1000f4ea <__aeabi_dmul+0x7e>
1000f5ba:	4652      	mov	r2, sl
1000f5bc:	432a      	orrs	r2, r5
1000f5be:	d021      	beq.n	1000f604 <__aeabi_dmul+0x198>
1000f5c0:	2d00      	cmp	r5, #0
1000f5c2:	d100      	bne.n	1000f5c6 <__aeabi_dmul+0x15a>
1000f5c4:	e154      	b.n	1000f870 <__aeabi_dmul+0x404>
1000f5c6:	0028      	movs	r0, r5
1000f5c8:	f000 fdca 	bl	10010160 <__clzsi2>
1000f5cc:	0003      	movs	r3, r0
1000f5ce:	3b0b      	subs	r3, #11
1000f5d0:	2b1c      	cmp	r3, #28
1000f5d2:	dd00      	ble.n	1000f5d6 <__aeabi_dmul+0x16a>
1000f5d4:	e146      	b.n	1000f864 <__aeabi_dmul+0x3f8>
1000f5d6:	211d      	movs	r1, #29
1000f5d8:	1acb      	subs	r3, r1, r3
1000f5da:	4651      	mov	r1, sl
1000f5dc:	0002      	movs	r2, r0
1000f5de:	40d9      	lsrs	r1, r3
1000f5e0:	4653      	mov	r3, sl
1000f5e2:	3a08      	subs	r2, #8
1000f5e4:	4095      	lsls	r5, r2
1000f5e6:	4093      	lsls	r3, r2
1000f5e8:	430d      	orrs	r5, r1
1000f5ea:	4a1b      	ldr	r2, [pc, #108]	; (1000f658 <__aeabi_dmul+0x1ec>)
1000f5ec:	4694      	mov	ip, r2
1000f5ee:	4460      	add	r0, ip
1000f5f0:	4240      	negs	r0, r0
1000f5f2:	2200      	movs	r2, #0
1000f5f4:	e779      	b.n	1000f4ea <__aeabi_dmul+0x7e>
1000f5f6:	2401      	movs	r4, #1
1000f5f8:	2200      	movs	r2, #0
1000f5fa:	400c      	ands	r4, r1
1000f5fc:	4b12      	ldr	r3, [pc, #72]	; (1000f648 <__aeabi_dmul+0x1dc>)
1000f5fe:	2500      	movs	r5, #0
1000f600:	4690      	mov	r8, r2
1000f602:	e799      	b.n	1000f538 <__aeabi_dmul+0xcc>
1000f604:	2500      	movs	r5, #0
1000f606:	2300      	movs	r3, #0
1000f608:	2201      	movs	r2, #1
1000f60a:	e76e      	b.n	1000f4ea <__aeabi_dmul+0x7e>
1000f60c:	2203      	movs	r2, #3
1000f60e:	e76c      	b.n	1000f4ea <__aeabi_dmul+0x7e>
1000f610:	2300      	movs	r3, #0
1000f612:	469b      	mov	fp, r3
1000f614:	4698      	mov	r8, r3
1000f616:	3301      	adds	r3, #1
1000f618:	2704      	movs	r7, #4
1000f61a:	9301      	str	r3, [sp, #4]
1000f61c:	e74c      	b.n	1000f4b8 <__aeabi_dmul+0x4c>
1000f61e:	2303      	movs	r3, #3
1000f620:	270c      	movs	r7, #12
1000f622:	9301      	str	r3, [sp, #4]
1000f624:	e748      	b.n	1000f4b8 <__aeabi_dmul+0x4c>
1000f626:	2300      	movs	r3, #0
1000f628:	2580      	movs	r5, #128	; 0x80
1000f62a:	4698      	mov	r8, r3
1000f62c:	2400      	movs	r4, #0
1000f62e:	032d      	lsls	r5, r5, #12
1000f630:	4b05      	ldr	r3, [pc, #20]	; (1000f648 <__aeabi_dmul+0x1dc>)
1000f632:	e781      	b.n	1000f538 <__aeabi_dmul+0xcc>
1000f634:	465d      	mov	r5, fp
1000f636:	4643      	mov	r3, r8
1000f638:	9a01      	ldr	r2, [sp, #4]
1000f63a:	e76f      	b.n	1000f51c <__aeabi_dmul+0xb0>
1000f63c:	465d      	mov	r5, fp
1000f63e:	4643      	mov	r3, r8
1000f640:	0021      	movs	r1, r4
1000f642:	9a01      	ldr	r2, [sp, #4]
1000f644:	e76a      	b.n	1000f51c <__aeabi_dmul+0xb0>
1000f646:	46c0      	nop			; (mov r8, r8)
1000f648:	000007ff 	.word	0x000007ff
1000f64c:	fffffc01 	.word	0xfffffc01
1000f650:	100129b4 	.word	0x100129b4
1000f654:	800fffff 	.word	0x800fffff
1000f658:	000003f3 	.word	0x000003f3
1000f65c:	4642      	mov	r2, r8
1000f65e:	0c12      	lsrs	r2, r2, #16
1000f660:	4691      	mov	r9, r2
1000f662:	0c1a      	lsrs	r2, r3, #16
1000f664:	4694      	mov	ip, r2
1000f666:	4642      	mov	r2, r8
1000f668:	0417      	lsls	r7, r2, #16
1000f66a:	464a      	mov	r2, r9
1000f66c:	041b      	lsls	r3, r3, #16
1000f66e:	0c1b      	lsrs	r3, r3, #16
1000f670:	435a      	muls	r2, r3
1000f672:	4660      	mov	r0, ip
1000f674:	4690      	mov	r8, r2
1000f676:	464a      	mov	r2, r9
1000f678:	4342      	muls	r2, r0
1000f67a:	0010      	movs	r0, r2
1000f67c:	9203      	str	r2, [sp, #12]
1000f67e:	4662      	mov	r2, ip
1000f680:	001c      	movs	r4, r3
1000f682:	0c3f      	lsrs	r7, r7, #16
1000f684:	437a      	muls	r2, r7
1000f686:	437c      	muls	r4, r7
1000f688:	4442      	add	r2, r8
1000f68a:	9201      	str	r2, [sp, #4]
1000f68c:	0c22      	lsrs	r2, r4, #16
1000f68e:	4692      	mov	sl, r2
1000f690:	9a01      	ldr	r2, [sp, #4]
1000f692:	4452      	add	r2, sl
1000f694:	4590      	cmp	r8, r2
1000f696:	d906      	bls.n	1000f6a6 <__aeabi_dmul+0x23a>
1000f698:	4682      	mov	sl, r0
1000f69a:	2080      	movs	r0, #128	; 0x80
1000f69c:	0240      	lsls	r0, r0, #9
1000f69e:	4680      	mov	r8, r0
1000f6a0:	44c2      	add	sl, r8
1000f6a2:	4650      	mov	r0, sl
1000f6a4:	9003      	str	r0, [sp, #12]
1000f6a6:	0c10      	lsrs	r0, r2, #16
1000f6a8:	9004      	str	r0, [sp, #16]
1000f6aa:	4648      	mov	r0, r9
1000f6ac:	0424      	lsls	r4, r4, #16
1000f6ae:	0c24      	lsrs	r4, r4, #16
1000f6b0:	0412      	lsls	r2, r2, #16
1000f6b2:	1912      	adds	r2, r2, r4
1000f6b4:	9205      	str	r2, [sp, #20]
1000f6b6:	0c2a      	lsrs	r2, r5, #16
1000f6b8:	042d      	lsls	r5, r5, #16
1000f6ba:	0c2d      	lsrs	r5, r5, #16
1000f6bc:	4368      	muls	r0, r5
1000f6be:	002c      	movs	r4, r5
1000f6c0:	4682      	mov	sl, r0
1000f6c2:	4648      	mov	r0, r9
1000f6c4:	437c      	muls	r4, r7
1000f6c6:	4350      	muls	r0, r2
1000f6c8:	4681      	mov	r9, r0
1000f6ca:	0c20      	lsrs	r0, r4, #16
1000f6cc:	4680      	mov	r8, r0
1000f6ce:	4357      	muls	r7, r2
1000f6d0:	4457      	add	r7, sl
1000f6d2:	4447      	add	r7, r8
1000f6d4:	45ba      	cmp	sl, r7
1000f6d6:	d903      	bls.n	1000f6e0 <__aeabi_dmul+0x274>
1000f6d8:	2080      	movs	r0, #128	; 0x80
1000f6da:	0240      	lsls	r0, r0, #9
1000f6dc:	4680      	mov	r8, r0
1000f6de:	44c1      	add	r9, r8
1000f6e0:	0c38      	lsrs	r0, r7, #16
1000f6e2:	043f      	lsls	r7, r7, #16
1000f6e4:	46b8      	mov	r8, r7
1000f6e6:	4448      	add	r0, r9
1000f6e8:	0424      	lsls	r4, r4, #16
1000f6ea:	0c24      	lsrs	r4, r4, #16
1000f6ec:	9001      	str	r0, [sp, #4]
1000f6ee:	9804      	ldr	r0, [sp, #16]
1000f6f0:	44a0      	add	r8, r4
1000f6f2:	4440      	add	r0, r8
1000f6f4:	9004      	str	r0, [sp, #16]
1000f6f6:	4658      	mov	r0, fp
1000f6f8:	0c00      	lsrs	r0, r0, #16
1000f6fa:	4681      	mov	r9, r0
1000f6fc:	4658      	mov	r0, fp
1000f6fe:	0404      	lsls	r4, r0, #16
1000f700:	0c20      	lsrs	r0, r4, #16
1000f702:	4682      	mov	sl, r0
1000f704:	0007      	movs	r7, r0
1000f706:	4648      	mov	r0, r9
1000f708:	435f      	muls	r7, r3
1000f70a:	464c      	mov	r4, r9
1000f70c:	4343      	muls	r3, r0
1000f70e:	4660      	mov	r0, ip
1000f710:	4360      	muls	r0, r4
1000f712:	4664      	mov	r4, ip
1000f714:	4683      	mov	fp, r0
1000f716:	4650      	mov	r0, sl
1000f718:	4344      	muls	r4, r0
1000f71a:	0c38      	lsrs	r0, r7, #16
1000f71c:	4684      	mov	ip, r0
1000f71e:	18e4      	adds	r4, r4, r3
1000f720:	4464      	add	r4, ip
1000f722:	42a3      	cmp	r3, r4
1000f724:	d903      	bls.n	1000f72e <__aeabi_dmul+0x2c2>
1000f726:	2380      	movs	r3, #128	; 0x80
1000f728:	025b      	lsls	r3, r3, #9
1000f72a:	469c      	mov	ip, r3
1000f72c:	44e3      	add	fp, ip
1000f72e:	4648      	mov	r0, r9
1000f730:	043f      	lsls	r7, r7, #16
1000f732:	0c23      	lsrs	r3, r4, #16
1000f734:	0c3f      	lsrs	r7, r7, #16
1000f736:	0424      	lsls	r4, r4, #16
1000f738:	19e4      	adds	r4, r4, r7
1000f73a:	4657      	mov	r7, sl
1000f73c:	4368      	muls	r0, r5
1000f73e:	436f      	muls	r7, r5
1000f740:	4684      	mov	ip, r0
1000f742:	464d      	mov	r5, r9
1000f744:	4650      	mov	r0, sl
1000f746:	4355      	muls	r5, r2
1000f748:	4342      	muls	r2, r0
1000f74a:	0c38      	lsrs	r0, r7, #16
1000f74c:	4681      	mov	r9, r0
1000f74e:	4462      	add	r2, ip
1000f750:	444a      	add	r2, r9
1000f752:	445b      	add	r3, fp
1000f754:	4594      	cmp	ip, r2
1000f756:	d903      	bls.n	1000f760 <__aeabi_dmul+0x2f4>
1000f758:	2080      	movs	r0, #128	; 0x80
1000f75a:	0240      	lsls	r0, r0, #9
1000f75c:	4684      	mov	ip, r0
1000f75e:	4465      	add	r5, ip
1000f760:	9803      	ldr	r0, [sp, #12]
1000f762:	043f      	lsls	r7, r7, #16
1000f764:	4683      	mov	fp, r0
1000f766:	9804      	ldr	r0, [sp, #16]
1000f768:	0c3f      	lsrs	r7, r7, #16
1000f76a:	4684      	mov	ip, r0
1000f76c:	44e3      	add	fp, ip
1000f76e:	45c3      	cmp	fp, r8
1000f770:	4180      	sbcs	r0, r0
1000f772:	4240      	negs	r0, r0
1000f774:	4682      	mov	sl, r0
1000f776:	0410      	lsls	r0, r2, #16
1000f778:	4684      	mov	ip, r0
1000f77a:	9801      	ldr	r0, [sp, #4]
1000f77c:	4467      	add	r7, ip
1000f77e:	4684      	mov	ip, r0
1000f780:	4467      	add	r7, ip
1000f782:	44a3      	add	fp, r4
1000f784:	46bc      	mov	ip, r7
1000f786:	45a3      	cmp	fp, r4
1000f788:	41a4      	sbcs	r4, r4
1000f78a:	4699      	mov	r9, r3
1000f78c:	44d4      	add	ip, sl
1000f78e:	4264      	negs	r4, r4
1000f790:	4287      	cmp	r7, r0
1000f792:	41bf      	sbcs	r7, r7
1000f794:	45d4      	cmp	ip, sl
1000f796:	4180      	sbcs	r0, r0
1000f798:	44e1      	add	r9, ip
1000f79a:	46a0      	mov	r8, r4
1000f79c:	4599      	cmp	r9, r3
1000f79e:	419b      	sbcs	r3, r3
1000f7a0:	427f      	negs	r7, r7
1000f7a2:	4240      	negs	r0, r0
1000f7a4:	44c8      	add	r8, r9
1000f7a6:	4307      	orrs	r7, r0
1000f7a8:	0c12      	lsrs	r2, r2, #16
1000f7aa:	18ba      	adds	r2, r7, r2
1000f7ac:	45a0      	cmp	r8, r4
1000f7ae:	41a4      	sbcs	r4, r4
1000f7b0:	425f      	negs	r7, r3
1000f7b2:	003b      	movs	r3, r7
1000f7b4:	4264      	negs	r4, r4
1000f7b6:	4323      	orrs	r3, r4
1000f7b8:	18d7      	adds	r7, r2, r3
1000f7ba:	4643      	mov	r3, r8
1000f7bc:	197d      	adds	r5, r7, r5
1000f7be:	0ddb      	lsrs	r3, r3, #23
1000f7c0:	026d      	lsls	r5, r5, #9
1000f7c2:	431d      	orrs	r5, r3
1000f7c4:	465b      	mov	r3, fp
1000f7c6:	025a      	lsls	r2, r3, #9
1000f7c8:	9b05      	ldr	r3, [sp, #20]
1000f7ca:	431a      	orrs	r2, r3
1000f7cc:	1e53      	subs	r3, r2, #1
1000f7ce:	419a      	sbcs	r2, r3
1000f7d0:	465b      	mov	r3, fp
1000f7d2:	0ddb      	lsrs	r3, r3, #23
1000f7d4:	431a      	orrs	r2, r3
1000f7d6:	4643      	mov	r3, r8
1000f7d8:	025b      	lsls	r3, r3, #9
1000f7da:	4313      	orrs	r3, r2
1000f7dc:	01ea      	lsls	r2, r5, #7
1000f7de:	d507      	bpl.n	1000f7f0 <__aeabi_dmul+0x384>
1000f7e0:	2201      	movs	r2, #1
1000f7e2:	085c      	lsrs	r4, r3, #1
1000f7e4:	4013      	ands	r3, r2
1000f7e6:	4323      	orrs	r3, r4
1000f7e8:	07ea      	lsls	r2, r5, #31
1000f7ea:	9e02      	ldr	r6, [sp, #8]
1000f7ec:	4313      	orrs	r3, r2
1000f7ee:	086d      	lsrs	r5, r5, #1
1000f7f0:	4a57      	ldr	r2, [pc, #348]	; (1000f950 <__aeabi_dmul+0x4e4>)
1000f7f2:	18b2      	adds	r2, r6, r2
1000f7f4:	2a00      	cmp	r2, #0
1000f7f6:	dd4b      	ble.n	1000f890 <__aeabi_dmul+0x424>
1000f7f8:	0758      	lsls	r0, r3, #29
1000f7fa:	d009      	beq.n	1000f810 <__aeabi_dmul+0x3a4>
1000f7fc:	200f      	movs	r0, #15
1000f7fe:	4018      	ands	r0, r3
1000f800:	2804      	cmp	r0, #4
1000f802:	d005      	beq.n	1000f810 <__aeabi_dmul+0x3a4>
1000f804:	1d18      	adds	r0, r3, #4
1000f806:	4298      	cmp	r0, r3
1000f808:	419b      	sbcs	r3, r3
1000f80a:	425b      	negs	r3, r3
1000f80c:	18ed      	adds	r5, r5, r3
1000f80e:	0003      	movs	r3, r0
1000f810:	01e8      	lsls	r0, r5, #7
1000f812:	d504      	bpl.n	1000f81e <__aeabi_dmul+0x3b2>
1000f814:	4a4f      	ldr	r2, [pc, #316]	; (1000f954 <__aeabi_dmul+0x4e8>)
1000f816:	4015      	ands	r5, r2
1000f818:	2280      	movs	r2, #128	; 0x80
1000f81a:	00d2      	lsls	r2, r2, #3
1000f81c:	18b2      	adds	r2, r6, r2
1000f81e:	484e      	ldr	r0, [pc, #312]	; (1000f958 <__aeabi_dmul+0x4ec>)
1000f820:	4282      	cmp	r2, r0
1000f822:	dd00      	ble.n	1000f826 <__aeabi_dmul+0x3ba>
1000f824:	e6e7      	b.n	1000f5f6 <__aeabi_dmul+0x18a>
1000f826:	2401      	movs	r4, #1
1000f828:	08db      	lsrs	r3, r3, #3
1000f82a:	0768      	lsls	r0, r5, #29
1000f82c:	4318      	orrs	r0, r3
1000f82e:	026d      	lsls	r5, r5, #9
1000f830:	0553      	lsls	r3, r2, #21
1000f832:	4680      	mov	r8, r0
1000f834:	0b2d      	lsrs	r5, r5, #12
1000f836:	0d5b      	lsrs	r3, r3, #21
1000f838:	400c      	ands	r4, r1
1000f83a:	e67d      	b.n	1000f538 <__aeabi_dmul+0xcc>
1000f83c:	2280      	movs	r2, #128	; 0x80
1000f83e:	4659      	mov	r1, fp
1000f840:	0312      	lsls	r2, r2, #12
1000f842:	4211      	tst	r1, r2
1000f844:	d008      	beq.n	1000f858 <__aeabi_dmul+0x3ec>
1000f846:	4215      	tst	r5, r2
1000f848:	d106      	bne.n	1000f858 <__aeabi_dmul+0x3ec>
1000f84a:	4315      	orrs	r5, r2
1000f84c:	032d      	lsls	r5, r5, #12
1000f84e:	4698      	mov	r8, r3
1000f850:	0b2d      	lsrs	r5, r5, #12
1000f852:	464c      	mov	r4, r9
1000f854:	4b41      	ldr	r3, [pc, #260]	; (1000f95c <__aeabi_dmul+0x4f0>)
1000f856:	e66f      	b.n	1000f538 <__aeabi_dmul+0xcc>
1000f858:	465d      	mov	r5, fp
1000f85a:	4315      	orrs	r5, r2
1000f85c:	032d      	lsls	r5, r5, #12
1000f85e:	0b2d      	lsrs	r5, r5, #12
1000f860:	4b3e      	ldr	r3, [pc, #248]	; (1000f95c <__aeabi_dmul+0x4f0>)
1000f862:	e669      	b.n	1000f538 <__aeabi_dmul+0xcc>
1000f864:	0003      	movs	r3, r0
1000f866:	4655      	mov	r5, sl
1000f868:	3b28      	subs	r3, #40	; 0x28
1000f86a:	409d      	lsls	r5, r3
1000f86c:	2300      	movs	r3, #0
1000f86e:	e6bc      	b.n	1000f5ea <__aeabi_dmul+0x17e>
1000f870:	4650      	mov	r0, sl
1000f872:	f000 fc75 	bl	10010160 <__clzsi2>
1000f876:	3020      	adds	r0, #32
1000f878:	e6a8      	b.n	1000f5cc <__aeabi_dmul+0x160>
1000f87a:	0003      	movs	r3, r0
1000f87c:	3b28      	subs	r3, #40	; 0x28
1000f87e:	409f      	lsls	r7, r3
1000f880:	2300      	movs	r3, #0
1000f882:	46bb      	mov	fp, r7
1000f884:	4698      	mov	r8, r3
1000f886:	e689      	b.n	1000f59c <__aeabi_dmul+0x130>
1000f888:	f000 fc6a 	bl	10010160 <__clzsi2>
1000f88c:	3020      	adds	r0, #32
1000f88e:	e673      	b.n	1000f578 <__aeabi_dmul+0x10c>
1000f890:	2401      	movs	r4, #1
1000f892:	1aa6      	subs	r6, r4, r2
1000f894:	2e38      	cmp	r6, #56	; 0x38
1000f896:	dd07      	ble.n	1000f8a8 <__aeabi_dmul+0x43c>
1000f898:	2200      	movs	r2, #0
1000f89a:	400c      	ands	r4, r1
1000f89c:	2300      	movs	r3, #0
1000f89e:	2500      	movs	r5, #0
1000f8a0:	4690      	mov	r8, r2
1000f8a2:	e649      	b.n	1000f538 <__aeabi_dmul+0xcc>
1000f8a4:	9e02      	ldr	r6, [sp, #8]
1000f8a6:	e7a3      	b.n	1000f7f0 <__aeabi_dmul+0x384>
1000f8a8:	2e1f      	cmp	r6, #31
1000f8aa:	dc20      	bgt.n	1000f8ee <__aeabi_dmul+0x482>
1000f8ac:	2220      	movs	r2, #32
1000f8ae:	002c      	movs	r4, r5
1000f8b0:	0018      	movs	r0, r3
1000f8b2:	1b92      	subs	r2, r2, r6
1000f8b4:	40f0      	lsrs	r0, r6
1000f8b6:	4094      	lsls	r4, r2
1000f8b8:	4093      	lsls	r3, r2
1000f8ba:	4304      	orrs	r4, r0
1000f8bc:	1e58      	subs	r0, r3, #1
1000f8be:	4183      	sbcs	r3, r0
1000f8c0:	431c      	orrs	r4, r3
1000f8c2:	40f5      	lsrs	r5, r6
1000f8c4:	0763      	lsls	r3, r4, #29
1000f8c6:	d009      	beq.n	1000f8dc <__aeabi_dmul+0x470>
1000f8c8:	230f      	movs	r3, #15
1000f8ca:	4023      	ands	r3, r4
1000f8cc:	2b04      	cmp	r3, #4
1000f8ce:	d005      	beq.n	1000f8dc <__aeabi_dmul+0x470>
1000f8d0:	0023      	movs	r3, r4
1000f8d2:	1d1c      	adds	r4, r3, #4
1000f8d4:	429c      	cmp	r4, r3
1000f8d6:	4192      	sbcs	r2, r2
1000f8d8:	4252      	negs	r2, r2
1000f8da:	18ad      	adds	r5, r5, r2
1000f8dc:	022b      	lsls	r3, r5, #8
1000f8de:	d51f      	bpl.n	1000f920 <__aeabi_dmul+0x4b4>
1000f8e0:	2401      	movs	r4, #1
1000f8e2:	2200      	movs	r2, #0
1000f8e4:	400c      	ands	r4, r1
1000f8e6:	2301      	movs	r3, #1
1000f8e8:	2500      	movs	r5, #0
1000f8ea:	4690      	mov	r8, r2
1000f8ec:	e624      	b.n	1000f538 <__aeabi_dmul+0xcc>
1000f8ee:	201f      	movs	r0, #31
1000f8f0:	002c      	movs	r4, r5
1000f8f2:	4240      	negs	r0, r0
1000f8f4:	1a82      	subs	r2, r0, r2
1000f8f6:	40d4      	lsrs	r4, r2
1000f8f8:	2e20      	cmp	r6, #32
1000f8fa:	d01c      	beq.n	1000f936 <__aeabi_dmul+0x4ca>
1000f8fc:	2240      	movs	r2, #64	; 0x40
1000f8fe:	1b96      	subs	r6, r2, r6
1000f900:	40b5      	lsls	r5, r6
1000f902:	432b      	orrs	r3, r5
1000f904:	1e58      	subs	r0, r3, #1
1000f906:	4183      	sbcs	r3, r0
1000f908:	2007      	movs	r0, #7
1000f90a:	4323      	orrs	r3, r4
1000f90c:	4018      	ands	r0, r3
1000f90e:	2500      	movs	r5, #0
1000f910:	2800      	cmp	r0, #0
1000f912:	d009      	beq.n	1000f928 <__aeabi_dmul+0x4bc>
1000f914:	220f      	movs	r2, #15
1000f916:	2500      	movs	r5, #0
1000f918:	401a      	ands	r2, r3
1000f91a:	001c      	movs	r4, r3
1000f91c:	2a04      	cmp	r2, #4
1000f91e:	d1d8      	bne.n	1000f8d2 <__aeabi_dmul+0x466>
1000f920:	0023      	movs	r3, r4
1000f922:	0768      	lsls	r0, r5, #29
1000f924:	026d      	lsls	r5, r5, #9
1000f926:	0b2d      	lsrs	r5, r5, #12
1000f928:	2401      	movs	r4, #1
1000f92a:	08db      	lsrs	r3, r3, #3
1000f92c:	4303      	orrs	r3, r0
1000f92e:	4698      	mov	r8, r3
1000f930:	400c      	ands	r4, r1
1000f932:	2300      	movs	r3, #0
1000f934:	e600      	b.n	1000f538 <__aeabi_dmul+0xcc>
1000f936:	2500      	movs	r5, #0
1000f938:	e7e3      	b.n	1000f902 <__aeabi_dmul+0x496>
1000f93a:	2280      	movs	r2, #128	; 0x80
1000f93c:	2401      	movs	r4, #1
1000f93e:	0312      	lsls	r2, r2, #12
1000f940:	4315      	orrs	r5, r2
1000f942:	032d      	lsls	r5, r5, #12
1000f944:	4698      	mov	r8, r3
1000f946:	0b2d      	lsrs	r5, r5, #12
1000f948:	400c      	ands	r4, r1
1000f94a:	4b04      	ldr	r3, [pc, #16]	; (1000f95c <__aeabi_dmul+0x4f0>)
1000f94c:	e5f4      	b.n	1000f538 <__aeabi_dmul+0xcc>
1000f94e:	46c0      	nop			; (mov r8, r8)
1000f950:	000003ff 	.word	0x000003ff
1000f954:	feffffff 	.word	0xfeffffff
1000f958:	000007fe 	.word	0x000007fe
1000f95c:	000007ff 	.word	0x000007ff

1000f960 <__aeabi_dsub>:
1000f960:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f962:	4657      	mov	r7, sl
1000f964:	464e      	mov	r6, r9
1000f966:	4645      	mov	r5, r8
1000f968:	b4e0      	push	{r5, r6, r7}
1000f96a:	000e      	movs	r6, r1
1000f96c:	0011      	movs	r1, r2
1000f96e:	0ff2      	lsrs	r2, r6, #31
1000f970:	4692      	mov	sl, r2
1000f972:	00c5      	lsls	r5, r0, #3
1000f974:	0f42      	lsrs	r2, r0, #29
1000f976:	0318      	lsls	r0, r3, #12
1000f978:	0337      	lsls	r7, r6, #12
1000f97a:	0074      	lsls	r4, r6, #1
1000f97c:	0a40      	lsrs	r0, r0, #9
1000f97e:	0f4e      	lsrs	r6, r1, #29
1000f980:	0a7f      	lsrs	r7, r7, #9
1000f982:	4330      	orrs	r0, r6
1000f984:	4ecf      	ldr	r6, [pc, #828]	; (1000fcc4 <__aeabi_dsub+0x364>)
1000f986:	4317      	orrs	r7, r2
1000f988:	005a      	lsls	r2, r3, #1
1000f98a:	0d64      	lsrs	r4, r4, #21
1000f98c:	0d52      	lsrs	r2, r2, #21
1000f98e:	0fdb      	lsrs	r3, r3, #31
1000f990:	00c9      	lsls	r1, r1, #3
1000f992:	42b2      	cmp	r2, r6
1000f994:	d100      	bne.n	1000f998 <__aeabi_dsub+0x38>
1000f996:	e0e5      	b.n	1000fb64 <__aeabi_dsub+0x204>
1000f998:	2601      	movs	r6, #1
1000f99a:	4073      	eors	r3, r6
1000f99c:	1aa6      	subs	r6, r4, r2
1000f99e:	46b4      	mov	ip, r6
1000f9a0:	4553      	cmp	r3, sl
1000f9a2:	d100      	bne.n	1000f9a6 <__aeabi_dsub+0x46>
1000f9a4:	e0af      	b.n	1000fb06 <__aeabi_dsub+0x1a6>
1000f9a6:	2e00      	cmp	r6, #0
1000f9a8:	dc00      	bgt.n	1000f9ac <__aeabi_dsub+0x4c>
1000f9aa:	e10d      	b.n	1000fbc8 <__aeabi_dsub+0x268>
1000f9ac:	2a00      	cmp	r2, #0
1000f9ae:	d13a      	bne.n	1000fa26 <__aeabi_dsub+0xc6>
1000f9b0:	0003      	movs	r3, r0
1000f9b2:	430b      	orrs	r3, r1
1000f9b4:	d000      	beq.n	1000f9b8 <__aeabi_dsub+0x58>
1000f9b6:	e0e4      	b.n	1000fb82 <__aeabi_dsub+0x222>
1000f9b8:	076b      	lsls	r3, r5, #29
1000f9ba:	d009      	beq.n	1000f9d0 <__aeabi_dsub+0x70>
1000f9bc:	230f      	movs	r3, #15
1000f9be:	402b      	ands	r3, r5
1000f9c0:	2b04      	cmp	r3, #4
1000f9c2:	d005      	beq.n	1000f9d0 <__aeabi_dsub+0x70>
1000f9c4:	1d2b      	adds	r3, r5, #4
1000f9c6:	42ab      	cmp	r3, r5
1000f9c8:	41ad      	sbcs	r5, r5
1000f9ca:	426d      	negs	r5, r5
1000f9cc:	197f      	adds	r7, r7, r5
1000f9ce:	001d      	movs	r5, r3
1000f9d0:	023b      	lsls	r3, r7, #8
1000f9d2:	d400      	bmi.n	1000f9d6 <__aeabi_dsub+0x76>
1000f9d4:	e088      	b.n	1000fae8 <__aeabi_dsub+0x188>
1000f9d6:	4bbb      	ldr	r3, [pc, #748]	; (1000fcc4 <__aeabi_dsub+0x364>)
1000f9d8:	3401      	adds	r4, #1
1000f9da:	429c      	cmp	r4, r3
1000f9dc:	d100      	bne.n	1000f9e0 <__aeabi_dsub+0x80>
1000f9de:	e110      	b.n	1000fc02 <__aeabi_dsub+0x2a2>
1000f9e0:	003a      	movs	r2, r7
1000f9e2:	4bb9      	ldr	r3, [pc, #740]	; (1000fcc8 <__aeabi_dsub+0x368>)
1000f9e4:	4651      	mov	r1, sl
1000f9e6:	401a      	ands	r2, r3
1000f9e8:	2301      	movs	r3, #1
1000f9ea:	0750      	lsls	r0, r2, #29
1000f9ec:	08ed      	lsrs	r5, r5, #3
1000f9ee:	0252      	lsls	r2, r2, #9
1000f9f0:	0564      	lsls	r4, r4, #21
1000f9f2:	4305      	orrs	r5, r0
1000f9f4:	0b12      	lsrs	r2, r2, #12
1000f9f6:	0d64      	lsrs	r4, r4, #21
1000f9f8:	400b      	ands	r3, r1
1000f9fa:	2100      	movs	r1, #0
1000f9fc:	0028      	movs	r0, r5
1000f9fe:	0312      	lsls	r2, r2, #12
1000fa00:	0d0d      	lsrs	r5, r1, #20
1000fa02:	0b12      	lsrs	r2, r2, #12
1000fa04:	0564      	lsls	r4, r4, #21
1000fa06:	052d      	lsls	r5, r5, #20
1000fa08:	4315      	orrs	r5, r2
1000fa0a:	0862      	lsrs	r2, r4, #1
1000fa0c:	4caf      	ldr	r4, [pc, #700]	; (1000fccc <__aeabi_dsub+0x36c>)
1000fa0e:	07db      	lsls	r3, r3, #31
1000fa10:	402c      	ands	r4, r5
1000fa12:	4314      	orrs	r4, r2
1000fa14:	0064      	lsls	r4, r4, #1
1000fa16:	0864      	lsrs	r4, r4, #1
1000fa18:	431c      	orrs	r4, r3
1000fa1a:	0021      	movs	r1, r4
1000fa1c:	bc1c      	pop	{r2, r3, r4}
1000fa1e:	4690      	mov	r8, r2
1000fa20:	4699      	mov	r9, r3
1000fa22:	46a2      	mov	sl, r4
1000fa24:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000fa26:	4ba7      	ldr	r3, [pc, #668]	; (1000fcc4 <__aeabi_dsub+0x364>)
1000fa28:	429c      	cmp	r4, r3
1000fa2a:	d0c5      	beq.n	1000f9b8 <__aeabi_dsub+0x58>
1000fa2c:	2380      	movs	r3, #128	; 0x80
1000fa2e:	041b      	lsls	r3, r3, #16
1000fa30:	4318      	orrs	r0, r3
1000fa32:	4663      	mov	r3, ip
1000fa34:	2b38      	cmp	r3, #56	; 0x38
1000fa36:	dd00      	ble.n	1000fa3a <__aeabi_dsub+0xda>
1000fa38:	e0fd      	b.n	1000fc36 <__aeabi_dsub+0x2d6>
1000fa3a:	2b1f      	cmp	r3, #31
1000fa3c:	dd00      	ble.n	1000fa40 <__aeabi_dsub+0xe0>
1000fa3e:	e130      	b.n	1000fca2 <__aeabi_dsub+0x342>
1000fa40:	4662      	mov	r2, ip
1000fa42:	2320      	movs	r3, #32
1000fa44:	1a9b      	subs	r3, r3, r2
1000fa46:	0002      	movs	r2, r0
1000fa48:	409a      	lsls	r2, r3
1000fa4a:	4666      	mov	r6, ip
1000fa4c:	4690      	mov	r8, r2
1000fa4e:	000a      	movs	r2, r1
1000fa50:	4099      	lsls	r1, r3
1000fa52:	40f2      	lsrs	r2, r6
1000fa54:	4646      	mov	r6, r8
1000fa56:	1e4b      	subs	r3, r1, #1
1000fa58:	4199      	sbcs	r1, r3
1000fa5a:	4332      	orrs	r2, r6
1000fa5c:	4311      	orrs	r1, r2
1000fa5e:	4663      	mov	r3, ip
1000fa60:	0002      	movs	r2, r0
1000fa62:	40da      	lsrs	r2, r3
1000fa64:	1a69      	subs	r1, r5, r1
1000fa66:	428d      	cmp	r5, r1
1000fa68:	419b      	sbcs	r3, r3
1000fa6a:	000d      	movs	r5, r1
1000fa6c:	1aba      	subs	r2, r7, r2
1000fa6e:	425b      	negs	r3, r3
1000fa70:	1ad7      	subs	r7, r2, r3
1000fa72:	023b      	lsls	r3, r7, #8
1000fa74:	d535      	bpl.n	1000fae2 <__aeabi_dsub+0x182>
1000fa76:	027a      	lsls	r2, r7, #9
1000fa78:	0a53      	lsrs	r3, r2, #9
1000fa7a:	4698      	mov	r8, r3
1000fa7c:	4643      	mov	r3, r8
1000fa7e:	2b00      	cmp	r3, #0
1000fa80:	d100      	bne.n	1000fa84 <__aeabi_dsub+0x124>
1000fa82:	e0c4      	b.n	1000fc0e <__aeabi_dsub+0x2ae>
1000fa84:	4640      	mov	r0, r8
1000fa86:	f000 fb6b 	bl	10010160 <__clzsi2>
1000fa8a:	0003      	movs	r3, r0
1000fa8c:	3b08      	subs	r3, #8
1000fa8e:	2b1f      	cmp	r3, #31
1000fa90:	dd00      	ble.n	1000fa94 <__aeabi_dsub+0x134>
1000fa92:	e0c5      	b.n	1000fc20 <__aeabi_dsub+0x2c0>
1000fa94:	2220      	movs	r2, #32
1000fa96:	0029      	movs	r1, r5
1000fa98:	1ad2      	subs	r2, r2, r3
1000fa9a:	4647      	mov	r7, r8
1000fa9c:	40d1      	lsrs	r1, r2
1000fa9e:	409f      	lsls	r7, r3
1000faa0:	000a      	movs	r2, r1
1000faa2:	409d      	lsls	r5, r3
1000faa4:	433a      	orrs	r2, r7
1000faa6:	429c      	cmp	r4, r3
1000faa8:	dd00      	ble.n	1000faac <__aeabi_dsub+0x14c>
1000faaa:	e0c0      	b.n	1000fc2e <__aeabi_dsub+0x2ce>
1000faac:	1b1c      	subs	r4, r3, r4
1000faae:	1c63      	adds	r3, r4, #1
1000fab0:	2b1f      	cmp	r3, #31
1000fab2:	dd00      	ble.n	1000fab6 <__aeabi_dsub+0x156>
1000fab4:	e0e4      	b.n	1000fc80 <__aeabi_dsub+0x320>
1000fab6:	2120      	movs	r1, #32
1000fab8:	0014      	movs	r4, r2
1000faba:	0028      	movs	r0, r5
1000fabc:	1ac9      	subs	r1, r1, r3
1000fabe:	40d8      	lsrs	r0, r3
1000fac0:	408c      	lsls	r4, r1
1000fac2:	408d      	lsls	r5, r1
1000fac4:	4304      	orrs	r4, r0
1000fac6:	40da      	lsrs	r2, r3
1000fac8:	1e68      	subs	r0, r5, #1
1000faca:	4185      	sbcs	r5, r0
1000facc:	0017      	movs	r7, r2
1000face:	4325      	orrs	r5, r4
1000fad0:	2400      	movs	r4, #0
1000fad2:	e771      	b.n	1000f9b8 <__aeabi_dsub+0x58>
1000fad4:	4642      	mov	r2, r8
1000fad6:	4663      	mov	r3, ip
1000fad8:	431a      	orrs	r2, r3
1000fada:	d100      	bne.n	1000fade <__aeabi_dsub+0x17e>
1000fadc:	e24c      	b.n	1000ff78 <__aeabi_dsub+0x618>
1000fade:	4667      	mov	r7, ip
1000fae0:	4645      	mov	r5, r8
1000fae2:	076b      	lsls	r3, r5, #29
1000fae4:	d000      	beq.n	1000fae8 <__aeabi_dsub+0x188>
1000fae6:	e769      	b.n	1000f9bc <__aeabi_dsub+0x5c>
1000fae8:	2301      	movs	r3, #1
1000faea:	4651      	mov	r1, sl
1000faec:	0778      	lsls	r0, r7, #29
1000faee:	08ed      	lsrs	r5, r5, #3
1000faf0:	08fa      	lsrs	r2, r7, #3
1000faf2:	400b      	ands	r3, r1
1000faf4:	4305      	orrs	r5, r0
1000faf6:	4973      	ldr	r1, [pc, #460]	; (1000fcc4 <__aeabi_dsub+0x364>)
1000faf8:	428c      	cmp	r4, r1
1000fafa:	d038      	beq.n	1000fb6e <__aeabi_dsub+0x20e>
1000fafc:	0312      	lsls	r2, r2, #12
1000fafe:	0564      	lsls	r4, r4, #21
1000fb00:	0b12      	lsrs	r2, r2, #12
1000fb02:	0d64      	lsrs	r4, r4, #21
1000fb04:	e779      	b.n	1000f9fa <__aeabi_dsub+0x9a>
1000fb06:	2e00      	cmp	r6, #0
1000fb08:	dc00      	bgt.n	1000fb0c <__aeabi_dsub+0x1ac>
1000fb0a:	e09a      	b.n	1000fc42 <__aeabi_dsub+0x2e2>
1000fb0c:	2a00      	cmp	r2, #0
1000fb0e:	d047      	beq.n	1000fba0 <__aeabi_dsub+0x240>
1000fb10:	4a6c      	ldr	r2, [pc, #432]	; (1000fcc4 <__aeabi_dsub+0x364>)
1000fb12:	4294      	cmp	r4, r2
1000fb14:	d100      	bne.n	1000fb18 <__aeabi_dsub+0x1b8>
1000fb16:	e74f      	b.n	1000f9b8 <__aeabi_dsub+0x58>
1000fb18:	2280      	movs	r2, #128	; 0x80
1000fb1a:	0412      	lsls	r2, r2, #16
1000fb1c:	4310      	orrs	r0, r2
1000fb1e:	4662      	mov	r2, ip
1000fb20:	2a38      	cmp	r2, #56	; 0x38
1000fb22:	dc00      	bgt.n	1000fb26 <__aeabi_dsub+0x1c6>
1000fb24:	e108      	b.n	1000fd38 <__aeabi_dsub+0x3d8>
1000fb26:	4301      	orrs	r1, r0
1000fb28:	1e48      	subs	r0, r1, #1
1000fb2a:	4181      	sbcs	r1, r0
1000fb2c:	2200      	movs	r2, #0
1000fb2e:	b2c9      	uxtb	r1, r1
1000fb30:	1949      	adds	r1, r1, r5
1000fb32:	19d2      	adds	r2, r2, r7
1000fb34:	42a9      	cmp	r1, r5
1000fb36:	41bf      	sbcs	r7, r7
1000fb38:	000d      	movs	r5, r1
1000fb3a:	427f      	negs	r7, r7
1000fb3c:	18bf      	adds	r7, r7, r2
1000fb3e:	023a      	lsls	r2, r7, #8
1000fb40:	d400      	bmi.n	1000fb44 <__aeabi_dsub+0x1e4>
1000fb42:	e142      	b.n	1000fdca <__aeabi_dsub+0x46a>
1000fb44:	4a5f      	ldr	r2, [pc, #380]	; (1000fcc4 <__aeabi_dsub+0x364>)
1000fb46:	3401      	adds	r4, #1
1000fb48:	4294      	cmp	r4, r2
1000fb4a:	d100      	bne.n	1000fb4e <__aeabi_dsub+0x1ee>
1000fb4c:	e14e      	b.n	1000fdec <__aeabi_dsub+0x48c>
1000fb4e:	2001      	movs	r0, #1
1000fb50:	4a5d      	ldr	r2, [pc, #372]	; (1000fcc8 <__aeabi_dsub+0x368>)
1000fb52:	0869      	lsrs	r1, r5, #1
1000fb54:	403a      	ands	r2, r7
1000fb56:	4028      	ands	r0, r5
1000fb58:	4308      	orrs	r0, r1
1000fb5a:	07d5      	lsls	r5, r2, #31
1000fb5c:	4305      	orrs	r5, r0
1000fb5e:	0857      	lsrs	r7, r2, #1
1000fb60:	469a      	mov	sl, r3
1000fb62:	e729      	b.n	1000f9b8 <__aeabi_dsub+0x58>
1000fb64:	0006      	movs	r6, r0
1000fb66:	430e      	orrs	r6, r1
1000fb68:	d000      	beq.n	1000fb6c <__aeabi_dsub+0x20c>
1000fb6a:	e717      	b.n	1000f99c <__aeabi_dsub+0x3c>
1000fb6c:	e714      	b.n	1000f998 <__aeabi_dsub+0x38>
1000fb6e:	0029      	movs	r1, r5
1000fb70:	4311      	orrs	r1, r2
1000fb72:	d100      	bne.n	1000fb76 <__aeabi_dsub+0x216>
1000fb74:	e1f9      	b.n	1000ff6a <__aeabi_dsub+0x60a>
1000fb76:	2180      	movs	r1, #128	; 0x80
1000fb78:	0309      	lsls	r1, r1, #12
1000fb7a:	430a      	orrs	r2, r1
1000fb7c:	0312      	lsls	r2, r2, #12
1000fb7e:	0b12      	lsrs	r2, r2, #12
1000fb80:	e73b      	b.n	1000f9fa <__aeabi_dsub+0x9a>
1000fb82:	2301      	movs	r3, #1
1000fb84:	425b      	negs	r3, r3
1000fb86:	4698      	mov	r8, r3
1000fb88:	44c4      	add	ip, r8
1000fb8a:	4663      	mov	r3, ip
1000fb8c:	2b00      	cmp	r3, #0
1000fb8e:	d172      	bne.n	1000fc76 <__aeabi_dsub+0x316>
1000fb90:	1a69      	subs	r1, r5, r1
1000fb92:	428d      	cmp	r5, r1
1000fb94:	419b      	sbcs	r3, r3
1000fb96:	1a3f      	subs	r7, r7, r0
1000fb98:	425b      	negs	r3, r3
1000fb9a:	1aff      	subs	r7, r7, r3
1000fb9c:	000d      	movs	r5, r1
1000fb9e:	e768      	b.n	1000fa72 <__aeabi_dsub+0x112>
1000fba0:	0002      	movs	r2, r0
1000fba2:	430a      	orrs	r2, r1
1000fba4:	d100      	bne.n	1000fba8 <__aeabi_dsub+0x248>
1000fba6:	e707      	b.n	1000f9b8 <__aeabi_dsub+0x58>
1000fba8:	2201      	movs	r2, #1
1000fbaa:	4252      	negs	r2, r2
1000fbac:	4690      	mov	r8, r2
1000fbae:	44c4      	add	ip, r8
1000fbb0:	4662      	mov	r2, ip
1000fbb2:	2a00      	cmp	r2, #0
1000fbb4:	d000      	beq.n	1000fbb8 <__aeabi_dsub+0x258>
1000fbb6:	e0e6      	b.n	1000fd86 <__aeabi_dsub+0x426>
1000fbb8:	1869      	adds	r1, r5, r1
1000fbba:	42a9      	cmp	r1, r5
1000fbbc:	41b6      	sbcs	r6, r6
1000fbbe:	183f      	adds	r7, r7, r0
1000fbc0:	4276      	negs	r6, r6
1000fbc2:	19f7      	adds	r7, r6, r7
1000fbc4:	000d      	movs	r5, r1
1000fbc6:	e7ba      	b.n	1000fb3e <__aeabi_dsub+0x1de>
1000fbc8:	2e00      	cmp	r6, #0
1000fbca:	d000      	beq.n	1000fbce <__aeabi_dsub+0x26e>
1000fbcc:	e080      	b.n	1000fcd0 <__aeabi_dsub+0x370>
1000fbce:	1c62      	adds	r2, r4, #1
1000fbd0:	0552      	lsls	r2, r2, #21
1000fbd2:	0d52      	lsrs	r2, r2, #21
1000fbd4:	2a01      	cmp	r2, #1
1000fbd6:	dc00      	bgt.n	1000fbda <__aeabi_dsub+0x27a>
1000fbd8:	e0f9      	b.n	1000fdce <__aeabi_dsub+0x46e>
1000fbda:	1a6a      	subs	r2, r5, r1
1000fbdc:	4691      	mov	r9, r2
1000fbde:	454d      	cmp	r5, r9
1000fbe0:	41b6      	sbcs	r6, r6
1000fbe2:	1a3a      	subs	r2, r7, r0
1000fbe4:	4276      	negs	r6, r6
1000fbe6:	1b92      	subs	r2, r2, r6
1000fbe8:	4690      	mov	r8, r2
1000fbea:	0212      	lsls	r2, r2, #8
1000fbec:	d400      	bmi.n	1000fbf0 <__aeabi_dsub+0x290>
1000fbee:	e099      	b.n	1000fd24 <__aeabi_dsub+0x3c4>
1000fbf0:	1b4d      	subs	r5, r1, r5
1000fbf2:	42a9      	cmp	r1, r5
1000fbf4:	4189      	sbcs	r1, r1
1000fbf6:	1bc7      	subs	r7, r0, r7
1000fbf8:	4249      	negs	r1, r1
1000fbfa:	1a7a      	subs	r2, r7, r1
1000fbfc:	4690      	mov	r8, r2
1000fbfe:	469a      	mov	sl, r3
1000fc00:	e73c      	b.n	1000fa7c <__aeabi_dsub+0x11c>
1000fc02:	4652      	mov	r2, sl
1000fc04:	2301      	movs	r3, #1
1000fc06:	2500      	movs	r5, #0
1000fc08:	4013      	ands	r3, r2
1000fc0a:	2200      	movs	r2, #0
1000fc0c:	e6f5      	b.n	1000f9fa <__aeabi_dsub+0x9a>
1000fc0e:	0028      	movs	r0, r5
1000fc10:	f000 faa6 	bl	10010160 <__clzsi2>
1000fc14:	3020      	adds	r0, #32
1000fc16:	0003      	movs	r3, r0
1000fc18:	3b08      	subs	r3, #8
1000fc1a:	2b1f      	cmp	r3, #31
1000fc1c:	dc00      	bgt.n	1000fc20 <__aeabi_dsub+0x2c0>
1000fc1e:	e739      	b.n	1000fa94 <__aeabi_dsub+0x134>
1000fc20:	002a      	movs	r2, r5
1000fc22:	3828      	subs	r0, #40	; 0x28
1000fc24:	4082      	lsls	r2, r0
1000fc26:	2500      	movs	r5, #0
1000fc28:	429c      	cmp	r4, r3
1000fc2a:	dc00      	bgt.n	1000fc2e <__aeabi_dsub+0x2ce>
1000fc2c:	e73e      	b.n	1000faac <__aeabi_dsub+0x14c>
1000fc2e:	4f26      	ldr	r7, [pc, #152]	; (1000fcc8 <__aeabi_dsub+0x368>)
1000fc30:	1ae4      	subs	r4, r4, r3
1000fc32:	4017      	ands	r7, r2
1000fc34:	e6c0      	b.n	1000f9b8 <__aeabi_dsub+0x58>
1000fc36:	4301      	orrs	r1, r0
1000fc38:	1e48      	subs	r0, r1, #1
1000fc3a:	4181      	sbcs	r1, r0
1000fc3c:	2200      	movs	r2, #0
1000fc3e:	b2c9      	uxtb	r1, r1
1000fc40:	e710      	b.n	1000fa64 <__aeabi_dsub+0x104>
1000fc42:	2e00      	cmp	r6, #0
1000fc44:	d000      	beq.n	1000fc48 <__aeabi_dsub+0x2e8>
1000fc46:	e0f1      	b.n	1000fe2c <__aeabi_dsub+0x4cc>
1000fc48:	1c62      	adds	r2, r4, #1
1000fc4a:	4694      	mov	ip, r2
1000fc4c:	0552      	lsls	r2, r2, #21
1000fc4e:	0d52      	lsrs	r2, r2, #21
1000fc50:	2a01      	cmp	r2, #1
1000fc52:	dc00      	bgt.n	1000fc56 <__aeabi_dsub+0x2f6>
1000fc54:	e0a0      	b.n	1000fd98 <__aeabi_dsub+0x438>
1000fc56:	4a1b      	ldr	r2, [pc, #108]	; (1000fcc4 <__aeabi_dsub+0x364>)
1000fc58:	4594      	cmp	ip, r2
1000fc5a:	d100      	bne.n	1000fc5e <__aeabi_dsub+0x2fe>
1000fc5c:	e0c5      	b.n	1000fdea <__aeabi_dsub+0x48a>
1000fc5e:	1869      	adds	r1, r5, r1
1000fc60:	42a9      	cmp	r1, r5
1000fc62:	4192      	sbcs	r2, r2
1000fc64:	183f      	adds	r7, r7, r0
1000fc66:	4252      	negs	r2, r2
1000fc68:	19d2      	adds	r2, r2, r7
1000fc6a:	0849      	lsrs	r1, r1, #1
1000fc6c:	07d5      	lsls	r5, r2, #31
1000fc6e:	430d      	orrs	r5, r1
1000fc70:	0857      	lsrs	r7, r2, #1
1000fc72:	4664      	mov	r4, ip
1000fc74:	e6a0      	b.n	1000f9b8 <__aeabi_dsub+0x58>
1000fc76:	4b13      	ldr	r3, [pc, #76]	; (1000fcc4 <__aeabi_dsub+0x364>)
1000fc78:	429c      	cmp	r4, r3
1000fc7a:	d000      	beq.n	1000fc7e <__aeabi_dsub+0x31e>
1000fc7c:	e6d9      	b.n	1000fa32 <__aeabi_dsub+0xd2>
1000fc7e:	e69b      	b.n	1000f9b8 <__aeabi_dsub+0x58>
1000fc80:	0011      	movs	r1, r2
1000fc82:	3c1f      	subs	r4, #31
1000fc84:	40e1      	lsrs	r1, r4
1000fc86:	000c      	movs	r4, r1
1000fc88:	2b20      	cmp	r3, #32
1000fc8a:	d100      	bne.n	1000fc8e <__aeabi_dsub+0x32e>
1000fc8c:	e080      	b.n	1000fd90 <__aeabi_dsub+0x430>
1000fc8e:	2140      	movs	r1, #64	; 0x40
1000fc90:	1acb      	subs	r3, r1, r3
1000fc92:	409a      	lsls	r2, r3
1000fc94:	4315      	orrs	r5, r2
1000fc96:	1e6a      	subs	r2, r5, #1
1000fc98:	4195      	sbcs	r5, r2
1000fc9a:	2700      	movs	r7, #0
1000fc9c:	4325      	orrs	r5, r4
1000fc9e:	2400      	movs	r4, #0
1000fca0:	e71f      	b.n	1000fae2 <__aeabi_dsub+0x182>
1000fca2:	4663      	mov	r3, ip
1000fca4:	0002      	movs	r2, r0
1000fca6:	3b20      	subs	r3, #32
1000fca8:	40da      	lsrs	r2, r3
1000fcaa:	4663      	mov	r3, ip
1000fcac:	2b20      	cmp	r3, #32
1000fcae:	d071      	beq.n	1000fd94 <__aeabi_dsub+0x434>
1000fcb0:	2340      	movs	r3, #64	; 0x40
1000fcb2:	4666      	mov	r6, ip
1000fcb4:	1b9b      	subs	r3, r3, r6
1000fcb6:	4098      	lsls	r0, r3
1000fcb8:	4301      	orrs	r1, r0
1000fcba:	1e48      	subs	r0, r1, #1
1000fcbc:	4181      	sbcs	r1, r0
1000fcbe:	4311      	orrs	r1, r2
1000fcc0:	2200      	movs	r2, #0
1000fcc2:	e6cf      	b.n	1000fa64 <__aeabi_dsub+0x104>
1000fcc4:	000007ff 	.word	0x000007ff
1000fcc8:	ff7fffff 	.word	0xff7fffff
1000fccc:	800fffff 	.word	0x800fffff
1000fcd0:	2c00      	cmp	r4, #0
1000fcd2:	d048      	beq.n	1000fd66 <__aeabi_dsub+0x406>
1000fcd4:	4cca      	ldr	r4, [pc, #808]	; (10010000 <__aeabi_dsub+0x6a0>)
1000fcd6:	42a2      	cmp	r2, r4
1000fcd8:	d100      	bne.n	1000fcdc <__aeabi_dsub+0x37c>
1000fcda:	e0a2      	b.n	1000fe22 <__aeabi_dsub+0x4c2>
1000fcdc:	4274      	negs	r4, r6
1000fcde:	46a1      	mov	r9, r4
1000fce0:	2480      	movs	r4, #128	; 0x80
1000fce2:	0424      	lsls	r4, r4, #16
1000fce4:	4327      	orrs	r7, r4
1000fce6:	464c      	mov	r4, r9
1000fce8:	2c38      	cmp	r4, #56	; 0x38
1000fcea:	dd00      	ble.n	1000fcee <__aeabi_dsub+0x38e>
1000fcec:	e0db      	b.n	1000fea6 <__aeabi_dsub+0x546>
1000fcee:	2c1f      	cmp	r4, #31
1000fcf0:	dd00      	ble.n	1000fcf4 <__aeabi_dsub+0x394>
1000fcf2:	e144      	b.n	1000ff7e <__aeabi_dsub+0x61e>
1000fcf4:	464e      	mov	r6, r9
1000fcf6:	2420      	movs	r4, #32
1000fcf8:	1ba4      	subs	r4, r4, r6
1000fcfa:	003e      	movs	r6, r7
1000fcfc:	40a6      	lsls	r6, r4
1000fcfe:	46a2      	mov	sl, r4
1000fd00:	46b0      	mov	r8, r6
1000fd02:	464c      	mov	r4, r9
1000fd04:	002e      	movs	r6, r5
1000fd06:	40e6      	lsrs	r6, r4
1000fd08:	46b4      	mov	ip, r6
1000fd0a:	4646      	mov	r6, r8
1000fd0c:	4664      	mov	r4, ip
1000fd0e:	4326      	orrs	r6, r4
1000fd10:	4654      	mov	r4, sl
1000fd12:	40a5      	lsls	r5, r4
1000fd14:	1e6c      	subs	r4, r5, #1
1000fd16:	41a5      	sbcs	r5, r4
1000fd18:	0034      	movs	r4, r6
1000fd1a:	432c      	orrs	r4, r5
1000fd1c:	464d      	mov	r5, r9
1000fd1e:	40ef      	lsrs	r7, r5
1000fd20:	1b0d      	subs	r5, r1, r4
1000fd22:	e028      	b.n	1000fd76 <__aeabi_dsub+0x416>
1000fd24:	464a      	mov	r2, r9
1000fd26:	4643      	mov	r3, r8
1000fd28:	464d      	mov	r5, r9
1000fd2a:	431a      	orrs	r2, r3
1000fd2c:	d000      	beq.n	1000fd30 <__aeabi_dsub+0x3d0>
1000fd2e:	e6a5      	b.n	1000fa7c <__aeabi_dsub+0x11c>
1000fd30:	2300      	movs	r3, #0
1000fd32:	2400      	movs	r4, #0
1000fd34:	2500      	movs	r5, #0
1000fd36:	e6de      	b.n	1000faf6 <__aeabi_dsub+0x196>
1000fd38:	2a1f      	cmp	r2, #31
1000fd3a:	dc5a      	bgt.n	1000fdf2 <__aeabi_dsub+0x492>
1000fd3c:	4666      	mov	r6, ip
1000fd3e:	2220      	movs	r2, #32
1000fd40:	1b92      	subs	r2, r2, r6
1000fd42:	0006      	movs	r6, r0
1000fd44:	4096      	lsls	r6, r2
1000fd46:	4691      	mov	r9, r2
1000fd48:	46b0      	mov	r8, r6
1000fd4a:	4662      	mov	r2, ip
1000fd4c:	000e      	movs	r6, r1
1000fd4e:	40d6      	lsrs	r6, r2
1000fd50:	4642      	mov	r2, r8
1000fd52:	4316      	orrs	r6, r2
1000fd54:	464a      	mov	r2, r9
1000fd56:	4091      	lsls	r1, r2
1000fd58:	1e4a      	subs	r2, r1, #1
1000fd5a:	4191      	sbcs	r1, r2
1000fd5c:	0002      	movs	r2, r0
1000fd5e:	4660      	mov	r0, ip
1000fd60:	4331      	orrs	r1, r6
1000fd62:	40c2      	lsrs	r2, r0
1000fd64:	e6e4      	b.n	1000fb30 <__aeabi_dsub+0x1d0>
1000fd66:	003c      	movs	r4, r7
1000fd68:	432c      	orrs	r4, r5
1000fd6a:	d05a      	beq.n	1000fe22 <__aeabi_dsub+0x4c2>
1000fd6c:	43f4      	mvns	r4, r6
1000fd6e:	46a1      	mov	r9, r4
1000fd70:	2c00      	cmp	r4, #0
1000fd72:	d152      	bne.n	1000fe1a <__aeabi_dsub+0x4ba>
1000fd74:	1b4d      	subs	r5, r1, r5
1000fd76:	42a9      	cmp	r1, r5
1000fd78:	4189      	sbcs	r1, r1
1000fd7a:	1bc7      	subs	r7, r0, r7
1000fd7c:	4249      	negs	r1, r1
1000fd7e:	1a7f      	subs	r7, r7, r1
1000fd80:	0014      	movs	r4, r2
1000fd82:	469a      	mov	sl, r3
1000fd84:	e675      	b.n	1000fa72 <__aeabi_dsub+0x112>
1000fd86:	4a9e      	ldr	r2, [pc, #632]	; (10010000 <__aeabi_dsub+0x6a0>)
1000fd88:	4294      	cmp	r4, r2
1000fd8a:	d000      	beq.n	1000fd8e <__aeabi_dsub+0x42e>
1000fd8c:	e6c7      	b.n	1000fb1e <__aeabi_dsub+0x1be>
1000fd8e:	e613      	b.n	1000f9b8 <__aeabi_dsub+0x58>
1000fd90:	2200      	movs	r2, #0
1000fd92:	e77f      	b.n	1000fc94 <__aeabi_dsub+0x334>
1000fd94:	2000      	movs	r0, #0
1000fd96:	e78f      	b.n	1000fcb8 <__aeabi_dsub+0x358>
1000fd98:	2c00      	cmp	r4, #0
1000fd9a:	d000      	beq.n	1000fd9e <__aeabi_dsub+0x43e>
1000fd9c:	e0c8      	b.n	1000ff30 <__aeabi_dsub+0x5d0>
1000fd9e:	003b      	movs	r3, r7
1000fda0:	432b      	orrs	r3, r5
1000fda2:	d100      	bne.n	1000fda6 <__aeabi_dsub+0x446>
1000fda4:	e10f      	b.n	1000ffc6 <__aeabi_dsub+0x666>
1000fda6:	0003      	movs	r3, r0
1000fda8:	430b      	orrs	r3, r1
1000fdaa:	d100      	bne.n	1000fdae <__aeabi_dsub+0x44e>
1000fdac:	e604      	b.n	1000f9b8 <__aeabi_dsub+0x58>
1000fdae:	1869      	adds	r1, r5, r1
1000fdb0:	42a9      	cmp	r1, r5
1000fdb2:	419b      	sbcs	r3, r3
1000fdb4:	183f      	adds	r7, r7, r0
1000fdb6:	425b      	negs	r3, r3
1000fdb8:	19df      	adds	r7, r3, r7
1000fdba:	023b      	lsls	r3, r7, #8
1000fdbc:	d400      	bmi.n	1000fdc0 <__aeabi_dsub+0x460>
1000fdbe:	e11a      	b.n	1000fff6 <__aeabi_dsub+0x696>
1000fdc0:	4b90      	ldr	r3, [pc, #576]	; (10010004 <__aeabi_dsub+0x6a4>)
1000fdc2:	000d      	movs	r5, r1
1000fdc4:	401f      	ands	r7, r3
1000fdc6:	4664      	mov	r4, ip
1000fdc8:	e5f6      	b.n	1000f9b8 <__aeabi_dsub+0x58>
1000fdca:	469a      	mov	sl, r3
1000fdcc:	e689      	b.n	1000fae2 <__aeabi_dsub+0x182>
1000fdce:	003a      	movs	r2, r7
1000fdd0:	432a      	orrs	r2, r5
1000fdd2:	2c00      	cmp	r4, #0
1000fdd4:	d15c      	bne.n	1000fe90 <__aeabi_dsub+0x530>
1000fdd6:	2a00      	cmp	r2, #0
1000fdd8:	d175      	bne.n	1000fec6 <__aeabi_dsub+0x566>
1000fdda:	0002      	movs	r2, r0
1000fddc:	430a      	orrs	r2, r1
1000fdde:	d100      	bne.n	1000fde2 <__aeabi_dsub+0x482>
1000fde0:	e0ca      	b.n	1000ff78 <__aeabi_dsub+0x618>
1000fde2:	0007      	movs	r7, r0
1000fde4:	000d      	movs	r5, r1
1000fde6:	469a      	mov	sl, r3
1000fde8:	e5e6      	b.n	1000f9b8 <__aeabi_dsub+0x58>
1000fdea:	4664      	mov	r4, ip
1000fdec:	2200      	movs	r2, #0
1000fdee:	2500      	movs	r5, #0
1000fdf0:	e681      	b.n	1000faf6 <__aeabi_dsub+0x196>
1000fdf2:	4662      	mov	r2, ip
1000fdf4:	0006      	movs	r6, r0
1000fdf6:	3a20      	subs	r2, #32
1000fdf8:	40d6      	lsrs	r6, r2
1000fdfa:	4662      	mov	r2, ip
1000fdfc:	46b0      	mov	r8, r6
1000fdfe:	2a20      	cmp	r2, #32
1000fe00:	d100      	bne.n	1000fe04 <__aeabi_dsub+0x4a4>
1000fe02:	e0b7      	b.n	1000ff74 <__aeabi_dsub+0x614>
1000fe04:	2240      	movs	r2, #64	; 0x40
1000fe06:	4666      	mov	r6, ip
1000fe08:	1b92      	subs	r2, r2, r6
1000fe0a:	4090      	lsls	r0, r2
1000fe0c:	4301      	orrs	r1, r0
1000fe0e:	4642      	mov	r2, r8
1000fe10:	1e48      	subs	r0, r1, #1
1000fe12:	4181      	sbcs	r1, r0
1000fe14:	4311      	orrs	r1, r2
1000fe16:	2200      	movs	r2, #0
1000fe18:	e68a      	b.n	1000fb30 <__aeabi_dsub+0x1d0>
1000fe1a:	4c79      	ldr	r4, [pc, #484]	; (10010000 <__aeabi_dsub+0x6a0>)
1000fe1c:	42a2      	cmp	r2, r4
1000fe1e:	d000      	beq.n	1000fe22 <__aeabi_dsub+0x4c2>
1000fe20:	e761      	b.n	1000fce6 <__aeabi_dsub+0x386>
1000fe22:	0007      	movs	r7, r0
1000fe24:	000d      	movs	r5, r1
1000fe26:	0014      	movs	r4, r2
1000fe28:	469a      	mov	sl, r3
1000fe2a:	e5c5      	b.n	1000f9b8 <__aeabi_dsub+0x58>
1000fe2c:	2c00      	cmp	r4, #0
1000fe2e:	d141      	bne.n	1000feb4 <__aeabi_dsub+0x554>
1000fe30:	003c      	movs	r4, r7
1000fe32:	432c      	orrs	r4, r5
1000fe34:	d078      	beq.n	1000ff28 <__aeabi_dsub+0x5c8>
1000fe36:	43f4      	mvns	r4, r6
1000fe38:	46a1      	mov	r9, r4
1000fe3a:	2c00      	cmp	r4, #0
1000fe3c:	d020      	beq.n	1000fe80 <__aeabi_dsub+0x520>
1000fe3e:	4c70      	ldr	r4, [pc, #448]	; (10010000 <__aeabi_dsub+0x6a0>)
1000fe40:	42a2      	cmp	r2, r4
1000fe42:	d071      	beq.n	1000ff28 <__aeabi_dsub+0x5c8>
1000fe44:	464c      	mov	r4, r9
1000fe46:	2c38      	cmp	r4, #56	; 0x38
1000fe48:	dd00      	ble.n	1000fe4c <__aeabi_dsub+0x4ec>
1000fe4a:	e0b2      	b.n	1000ffb2 <__aeabi_dsub+0x652>
1000fe4c:	2c1f      	cmp	r4, #31
1000fe4e:	dd00      	ble.n	1000fe52 <__aeabi_dsub+0x4f2>
1000fe50:	e0bc      	b.n	1000ffcc <__aeabi_dsub+0x66c>
1000fe52:	2620      	movs	r6, #32
1000fe54:	1b34      	subs	r4, r6, r4
1000fe56:	46a2      	mov	sl, r4
1000fe58:	003c      	movs	r4, r7
1000fe5a:	4656      	mov	r6, sl
1000fe5c:	40b4      	lsls	r4, r6
1000fe5e:	464e      	mov	r6, r9
1000fe60:	46a0      	mov	r8, r4
1000fe62:	002c      	movs	r4, r5
1000fe64:	40f4      	lsrs	r4, r6
1000fe66:	46a4      	mov	ip, r4
1000fe68:	4644      	mov	r4, r8
1000fe6a:	4666      	mov	r6, ip
1000fe6c:	4334      	orrs	r4, r6
1000fe6e:	46a4      	mov	ip, r4
1000fe70:	4654      	mov	r4, sl
1000fe72:	40a5      	lsls	r5, r4
1000fe74:	4664      	mov	r4, ip
1000fe76:	1e6e      	subs	r6, r5, #1
1000fe78:	41b5      	sbcs	r5, r6
1000fe7a:	4325      	orrs	r5, r4
1000fe7c:	464c      	mov	r4, r9
1000fe7e:	40e7      	lsrs	r7, r4
1000fe80:	186d      	adds	r5, r5, r1
1000fe82:	428d      	cmp	r5, r1
1000fe84:	4189      	sbcs	r1, r1
1000fe86:	183f      	adds	r7, r7, r0
1000fe88:	4249      	negs	r1, r1
1000fe8a:	19cf      	adds	r7, r1, r7
1000fe8c:	0014      	movs	r4, r2
1000fe8e:	e656      	b.n	1000fb3e <__aeabi_dsub+0x1de>
1000fe90:	2a00      	cmp	r2, #0
1000fe92:	d12f      	bne.n	1000fef4 <__aeabi_dsub+0x594>
1000fe94:	0002      	movs	r2, r0
1000fe96:	430a      	orrs	r2, r1
1000fe98:	d100      	bne.n	1000fe9c <__aeabi_dsub+0x53c>
1000fe9a:	e084      	b.n	1000ffa6 <__aeabi_dsub+0x646>
1000fe9c:	0007      	movs	r7, r0
1000fe9e:	000d      	movs	r5, r1
1000fea0:	469a      	mov	sl, r3
1000fea2:	4c57      	ldr	r4, [pc, #348]	; (10010000 <__aeabi_dsub+0x6a0>)
1000fea4:	e588      	b.n	1000f9b8 <__aeabi_dsub+0x58>
1000fea6:	433d      	orrs	r5, r7
1000fea8:	1e6f      	subs	r7, r5, #1
1000feaa:	41bd      	sbcs	r5, r7
1000feac:	b2ec      	uxtb	r4, r5
1000feae:	2700      	movs	r7, #0
1000feb0:	1b0d      	subs	r5, r1, r4
1000feb2:	e760      	b.n	1000fd76 <__aeabi_dsub+0x416>
1000feb4:	4c52      	ldr	r4, [pc, #328]	; (10010000 <__aeabi_dsub+0x6a0>)
1000feb6:	42a2      	cmp	r2, r4
1000feb8:	d036      	beq.n	1000ff28 <__aeabi_dsub+0x5c8>
1000feba:	4274      	negs	r4, r6
1000febc:	2680      	movs	r6, #128	; 0x80
1000febe:	0436      	lsls	r6, r6, #16
1000fec0:	46a1      	mov	r9, r4
1000fec2:	4337      	orrs	r7, r6
1000fec4:	e7be      	b.n	1000fe44 <__aeabi_dsub+0x4e4>
1000fec6:	0002      	movs	r2, r0
1000fec8:	430a      	orrs	r2, r1
1000feca:	d100      	bne.n	1000fece <__aeabi_dsub+0x56e>
1000fecc:	e574      	b.n	1000f9b8 <__aeabi_dsub+0x58>
1000fece:	1a6a      	subs	r2, r5, r1
1000fed0:	4690      	mov	r8, r2
1000fed2:	4545      	cmp	r5, r8
1000fed4:	41b6      	sbcs	r6, r6
1000fed6:	1a3a      	subs	r2, r7, r0
1000fed8:	4276      	negs	r6, r6
1000feda:	1b92      	subs	r2, r2, r6
1000fedc:	4694      	mov	ip, r2
1000fede:	0212      	lsls	r2, r2, #8
1000fee0:	d400      	bmi.n	1000fee4 <__aeabi_dsub+0x584>
1000fee2:	e5f7      	b.n	1000fad4 <__aeabi_dsub+0x174>
1000fee4:	1b4d      	subs	r5, r1, r5
1000fee6:	42a9      	cmp	r1, r5
1000fee8:	4189      	sbcs	r1, r1
1000feea:	1bc7      	subs	r7, r0, r7
1000feec:	4249      	negs	r1, r1
1000feee:	1a7f      	subs	r7, r7, r1
1000fef0:	469a      	mov	sl, r3
1000fef2:	e561      	b.n	1000f9b8 <__aeabi_dsub+0x58>
1000fef4:	0002      	movs	r2, r0
1000fef6:	430a      	orrs	r2, r1
1000fef8:	d03a      	beq.n	1000ff70 <__aeabi_dsub+0x610>
1000fefa:	08ed      	lsrs	r5, r5, #3
1000fefc:	077c      	lsls	r4, r7, #29
1000fefe:	432c      	orrs	r4, r5
1000ff00:	2580      	movs	r5, #128	; 0x80
1000ff02:	08fa      	lsrs	r2, r7, #3
1000ff04:	032d      	lsls	r5, r5, #12
1000ff06:	422a      	tst	r2, r5
1000ff08:	d008      	beq.n	1000ff1c <__aeabi_dsub+0x5bc>
1000ff0a:	08c7      	lsrs	r7, r0, #3
1000ff0c:	422f      	tst	r7, r5
1000ff0e:	d105      	bne.n	1000ff1c <__aeabi_dsub+0x5bc>
1000ff10:	0745      	lsls	r5, r0, #29
1000ff12:	002c      	movs	r4, r5
1000ff14:	003a      	movs	r2, r7
1000ff16:	469a      	mov	sl, r3
1000ff18:	08c9      	lsrs	r1, r1, #3
1000ff1a:	430c      	orrs	r4, r1
1000ff1c:	0f67      	lsrs	r7, r4, #29
1000ff1e:	00d2      	lsls	r2, r2, #3
1000ff20:	00e5      	lsls	r5, r4, #3
1000ff22:	4317      	orrs	r7, r2
1000ff24:	4c36      	ldr	r4, [pc, #216]	; (10010000 <__aeabi_dsub+0x6a0>)
1000ff26:	e547      	b.n	1000f9b8 <__aeabi_dsub+0x58>
1000ff28:	0007      	movs	r7, r0
1000ff2a:	000d      	movs	r5, r1
1000ff2c:	0014      	movs	r4, r2
1000ff2e:	e543      	b.n	1000f9b8 <__aeabi_dsub+0x58>
1000ff30:	003a      	movs	r2, r7
1000ff32:	432a      	orrs	r2, r5
1000ff34:	d043      	beq.n	1000ffbe <__aeabi_dsub+0x65e>
1000ff36:	0002      	movs	r2, r0
1000ff38:	430a      	orrs	r2, r1
1000ff3a:	d019      	beq.n	1000ff70 <__aeabi_dsub+0x610>
1000ff3c:	08ed      	lsrs	r5, r5, #3
1000ff3e:	077c      	lsls	r4, r7, #29
1000ff40:	432c      	orrs	r4, r5
1000ff42:	2580      	movs	r5, #128	; 0x80
1000ff44:	08fa      	lsrs	r2, r7, #3
1000ff46:	032d      	lsls	r5, r5, #12
1000ff48:	422a      	tst	r2, r5
1000ff4a:	d007      	beq.n	1000ff5c <__aeabi_dsub+0x5fc>
1000ff4c:	08c6      	lsrs	r6, r0, #3
1000ff4e:	422e      	tst	r6, r5
1000ff50:	d104      	bne.n	1000ff5c <__aeabi_dsub+0x5fc>
1000ff52:	0747      	lsls	r7, r0, #29
1000ff54:	003c      	movs	r4, r7
1000ff56:	0032      	movs	r2, r6
1000ff58:	08c9      	lsrs	r1, r1, #3
1000ff5a:	430c      	orrs	r4, r1
1000ff5c:	00d7      	lsls	r7, r2, #3
1000ff5e:	0f62      	lsrs	r2, r4, #29
1000ff60:	00e5      	lsls	r5, r4, #3
1000ff62:	4317      	orrs	r7, r2
1000ff64:	469a      	mov	sl, r3
1000ff66:	4c26      	ldr	r4, [pc, #152]	; (10010000 <__aeabi_dsub+0x6a0>)
1000ff68:	e526      	b.n	1000f9b8 <__aeabi_dsub+0x58>
1000ff6a:	2200      	movs	r2, #0
1000ff6c:	2500      	movs	r5, #0
1000ff6e:	e544      	b.n	1000f9fa <__aeabi_dsub+0x9a>
1000ff70:	4c23      	ldr	r4, [pc, #140]	; (10010000 <__aeabi_dsub+0x6a0>)
1000ff72:	e521      	b.n	1000f9b8 <__aeabi_dsub+0x58>
1000ff74:	2000      	movs	r0, #0
1000ff76:	e749      	b.n	1000fe0c <__aeabi_dsub+0x4ac>
1000ff78:	2300      	movs	r3, #0
1000ff7a:	2500      	movs	r5, #0
1000ff7c:	e5bb      	b.n	1000faf6 <__aeabi_dsub+0x196>
1000ff7e:	464c      	mov	r4, r9
1000ff80:	003e      	movs	r6, r7
1000ff82:	3c20      	subs	r4, #32
1000ff84:	40e6      	lsrs	r6, r4
1000ff86:	464c      	mov	r4, r9
1000ff88:	46b4      	mov	ip, r6
1000ff8a:	2c20      	cmp	r4, #32
1000ff8c:	d031      	beq.n	1000fff2 <__aeabi_dsub+0x692>
1000ff8e:	2440      	movs	r4, #64	; 0x40
1000ff90:	464e      	mov	r6, r9
1000ff92:	1ba6      	subs	r6, r4, r6
1000ff94:	40b7      	lsls	r7, r6
1000ff96:	433d      	orrs	r5, r7
1000ff98:	1e6c      	subs	r4, r5, #1
1000ff9a:	41a5      	sbcs	r5, r4
1000ff9c:	4664      	mov	r4, ip
1000ff9e:	432c      	orrs	r4, r5
1000ffa0:	2700      	movs	r7, #0
1000ffa2:	1b0d      	subs	r5, r1, r4
1000ffa4:	e6e7      	b.n	1000fd76 <__aeabi_dsub+0x416>
1000ffa6:	2280      	movs	r2, #128	; 0x80
1000ffa8:	2300      	movs	r3, #0
1000ffaa:	0312      	lsls	r2, r2, #12
1000ffac:	4c14      	ldr	r4, [pc, #80]	; (10010000 <__aeabi_dsub+0x6a0>)
1000ffae:	2500      	movs	r5, #0
1000ffb0:	e5a1      	b.n	1000faf6 <__aeabi_dsub+0x196>
1000ffb2:	433d      	orrs	r5, r7
1000ffb4:	1e6f      	subs	r7, r5, #1
1000ffb6:	41bd      	sbcs	r5, r7
1000ffb8:	2700      	movs	r7, #0
1000ffba:	b2ed      	uxtb	r5, r5
1000ffbc:	e760      	b.n	1000fe80 <__aeabi_dsub+0x520>
1000ffbe:	0007      	movs	r7, r0
1000ffc0:	000d      	movs	r5, r1
1000ffc2:	4c0f      	ldr	r4, [pc, #60]	; (10010000 <__aeabi_dsub+0x6a0>)
1000ffc4:	e4f8      	b.n	1000f9b8 <__aeabi_dsub+0x58>
1000ffc6:	0007      	movs	r7, r0
1000ffc8:	000d      	movs	r5, r1
1000ffca:	e4f5      	b.n	1000f9b8 <__aeabi_dsub+0x58>
1000ffcc:	464e      	mov	r6, r9
1000ffce:	003c      	movs	r4, r7
1000ffd0:	3e20      	subs	r6, #32
1000ffd2:	40f4      	lsrs	r4, r6
1000ffd4:	46a0      	mov	r8, r4
1000ffd6:	464c      	mov	r4, r9
1000ffd8:	2c20      	cmp	r4, #32
1000ffda:	d00e      	beq.n	1000fffa <__aeabi_dsub+0x69a>
1000ffdc:	2440      	movs	r4, #64	; 0x40
1000ffde:	464e      	mov	r6, r9
1000ffe0:	1ba4      	subs	r4, r4, r6
1000ffe2:	40a7      	lsls	r7, r4
1000ffe4:	433d      	orrs	r5, r7
1000ffe6:	1e6f      	subs	r7, r5, #1
1000ffe8:	41bd      	sbcs	r5, r7
1000ffea:	4644      	mov	r4, r8
1000ffec:	2700      	movs	r7, #0
1000ffee:	4325      	orrs	r5, r4
1000fff0:	e746      	b.n	1000fe80 <__aeabi_dsub+0x520>
1000fff2:	2700      	movs	r7, #0
1000fff4:	e7cf      	b.n	1000ff96 <__aeabi_dsub+0x636>
1000fff6:	000d      	movs	r5, r1
1000fff8:	e573      	b.n	1000fae2 <__aeabi_dsub+0x182>
1000fffa:	2700      	movs	r7, #0
1000fffc:	e7f2      	b.n	1000ffe4 <__aeabi_dsub+0x684>
1000fffe:	46c0      	nop			; (mov r8, r8)
10010000:	000007ff 	.word	0x000007ff
10010004:	ff7fffff 	.word	0xff7fffff

10010008 <__aeabi_d2iz>:
10010008:	030b      	lsls	r3, r1, #12
1001000a:	b530      	push	{r4, r5, lr}
1001000c:	4d13      	ldr	r5, [pc, #76]	; (1001005c <__aeabi_d2iz+0x54>)
1001000e:	0b1a      	lsrs	r2, r3, #12
10010010:	004b      	lsls	r3, r1, #1
10010012:	0d5b      	lsrs	r3, r3, #21
10010014:	0fc9      	lsrs	r1, r1, #31
10010016:	2400      	movs	r4, #0
10010018:	42ab      	cmp	r3, r5
1001001a:	dd11      	ble.n	10010040 <__aeabi_d2iz+0x38>
1001001c:	4c10      	ldr	r4, [pc, #64]	; (10010060 <__aeabi_d2iz+0x58>)
1001001e:	42a3      	cmp	r3, r4
10010020:	dc10      	bgt.n	10010044 <__aeabi_d2iz+0x3c>
10010022:	2480      	movs	r4, #128	; 0x80
10010024:	0364      	lsls	r4, r4, #13
10010026:	4322      	orrs	r2, r4
10010028:	4c0e      	ldr	r4, [pc, #56]	; (10010064 <__aeabi_d2iz+0x5c>)
1001002a:	1ae4      	subs	r4, r4, r3
1001002c:	2c1f      	cmp	r4, #31
1001002e:	dd0c      	ble.n	1001004a <__aeabi_d2iz+0x42>
10010030:	480d      	ldr	r0, [pc, #52]	; (10010068 <__aeabi_d2iz+0x60>)
10010032:	1ac3      	subs	r3, r0, r3
10010034:	40da      	lsrs	r2, r3
10010036:	0013      	movs	r3, r2
10010038:	425c      	negs	r4, r3
1001003a:	2900      	cmp	r1, #0
1001003c:	d100      	bne.n	10010040 <__aeabi_d2iz+0x38>
1001003e:	001c      	movs	r4, r3
10010040:	0020      	movs	r0, r4
10010042:	bd30      	pop	{r4, r5, pc}
10010044:	4b09      	ldr	r3, [pc, #36]	; (1001006c <__aeabi_d2iz+0x64>)
10010046:	18cc      	adds	r4, r1, r3
10010048:	e7fa      	b.n	10010040 <__aeabi_d2iz+0x38>
1001004a:	40e0      	lsrs	r0, r4
1001004c:	4c08      	ldr	r4, [pc, #32]	; (10010070 <__aeabi_d2iz+0x68>)
1001004e:	46a4      	mov	ip, r4
10010050:	4463      	add	r3, ip
10010052:	409a      	lsls	r2, r3
10010054:	0013      	movs	r3, r2
10010056:	4303      	orrs	r3, r0
10010058:	e7ee      	b.n	10010038 <__aeabi_d2iz+0x30>
1001005a:	46c0      	nop			; (mov r8, r8)
1001005c:	000003fe 	.word	0x000003fe
10010060:	0000041d 	.word	0x0000041d
10010064:	00000433 	.word	0x00000433
10010068:	00000413 	.word	0x00000413
1001006c:	7fffffff 	.word	0x7fffffff
10010070:	fffffbed 	.word	0xfffffbed

10010074 <__aeabi_ui2d>:
10010074:	b570      	push	{r4, r5, r6, lr}
10010076:	1e05      	subs	r5, r0, #0
10010078:	d028      	beq.n	100100cc <__aeabi_ui2d+0x58>
1001007a:	f000 f871 	bl	10010160 <__clzsi2>
1001007e:	4b15      	ldr	r3, [pc, #84]	; (100100d4 <__aeabi_ui2d+0x60>)
10010080:	4a15      	ldr	r2, [pc, #84]	; (100100d8 <__aeabi_ui2d+0x64>)
10010082:	1a1b      	subs	r3, r3, r0
10010084:	1ad2      	subs	r2, r2, r3
10010086:	2a1f      	cmp	r2, #31
10010088:	dd16      	ble.n	100100b8 <__aeabi_ui2d+0x44>
1001008a:	002c      	movs	r4, r5
1001008c:	4a13      	ldr	r2, [pc, #76]	; (100100dc <__aeabi_ui2d+0x68>)
1001008e:	2500      	movs	r5, #0
10010090:	1ad2      	subs	r2, r2, r3
10010092:	4094      	lsls	r4, r2
10010094:	055a      	lsls	r2, r3, #21
10010096:	0324      	lsls	r4, r4, #12
10010098:	0b24      	lsrs	r4, r4, #12
1001009a:	0d52      	lsrs	r2, r2, #21
1001009c:	2100      	movs	r1, #0
1001009e:	0324      	lsls	r4, r4, #12
100100a0:	0d0b      	lsrs	r3, r1, #20
100100a2:	0b24      	lsrs	r4, r4, #12
100100a4:	051b      	lsls	r3, r3, #20
100100a6:	4323      	orrs	r3, r4
100100a8:	4c0d      	ldr	r4, [pc, #52]	; (100100e0 <__aeabi_ui2d+0x6c>)
100100aa:	0512      	lsls	r2, r2, #20
100100ac:	4023      	ands	r3, r4
100100ae:	4313      	orrs	r3, r2
100100b0:	005b      	lsls	r3, r3, #1
100100b2:	0028      	movs	r0, r5
100100b4:	0859      	lsrs	r1, r3, #1
100100b6:	bd70      	pop	{r4, r5, r6, pc}
100100b8:	210b      	movs	r1, #11
100100ba:	002c      	movs	r4, r5
100100bc:	1a08      	subs	r0, r1, r0
100100be:	40c4      	lsrs	r4, r0
100100c0:	4095      	lsls	r5, r2
100100c2:	0324      	lsls	r4, r4, #12
100100c4:	055a      	lsls	r2, r3, #21
100100c6:	0b24      	lsrs	r4, r4, #12
100100c8:	0d52      	lsrs	r2, r2, #21
100100ca:	e7e7      	b.n	1001009c <__aeabi_ui2d+0x28>
100100cc:	2200      	movs	r2, #0
100100ce:	2400      	movs	r4, #0
100100d0:	e7e4      	b.n	1001009c <__aeabi_ui2d+0x28>
100100d2:	46c0      	nop			; (mov r8, r8)
100100d4:	0000041e 	.word	0x0000041e
100100d8:	00000433 	.word	0x00000433
100100dc:	00000413 	.word	0x00000413
100100e0:	800fffff 	.word	0x800fffff

100100e4 <__aeabi_cdrcmple>:
100100e4:	4684      	mov	ip, r0
100100e6:	1c10      	adds	r0, r2, #0
100100e8:	4662      	mov	r2, ip
100100ea:	468c      	mov	ip, r1
100100ec:	1c19      	adds	r1, r3, #0
100100ee:	4663      	mov	r3, ip
100100f0:	e000      	b.n	100100f4 <__aeabi_cdcmpeq>
100100f2:	46c0      	nop			; (mov r8, r8)

100100f4 <__aeabi_cdcmpeq>:
100100f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
100100f6:	f000 f8f5 	bl	100102e4 <__ledf2>
100100fa:	2800      	cmp	r0, #0
100100fc:	d401      	bmi.n	10010102 <__aeabi_cdcmpeq+0xe>
100100fe:	2100      	movs	r1, #0
10010100:	42c8      	cmn	r0, r1
10010102:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10010104 <__aeabi_dcmpeq>:
10010104:	b510      	push	{r4, lr}
10010106:	f000 f849 	bl	1001019c <__eqdf2>
1001010a:	4240      	negs	r0, r0
1001010c:	3001      	adds	r0, #1
1001010e:	bd10      	pop	{r4, pc}

10010110 <__aeabi_dcmplt>:
10010110:	b510      	push	{r4, lr}
10010112:	f000 f8e7 	bl	100102e4 <__ledf2>
10010116:	2800      	cmp	r0, #0
10010118:	db01      	blt.n	1001011e <__aeabi_dcmplt+0xe>
1001011a:	2000      	movs	r0, #0
1001011c:	bd10      	pop	{r4, pc}
1001011e:	2001      	movs	r0, #1
10010120:	bd10      	pop	{r4, pc}
10010122:	46c0      	nop			; (mov r8, r8)

10010124 <__aeabi_dcmple>:
10010124:	b510      	push	{r4, lr}
10010126:	f000 f8dd 	bl	100102e4 <__ledf2>
1001012a:	2800      	cmp	r0, #0
1001012c:	dd01      	ble.n	10010132 <__aeabi_dcmple+0xe>
1001012e:	2000      	movs	r0, #0
10010130:	bd10      	pop	{r4, pc}
10010132:	2001      	movs	r0, #1
10010134:	bd10      	pop	{r4, pc}
10010136:	46c0      	nop			; (mov r8, r8)

10010138 <__aeabi_dcmpgt>:
10010138:	b510      	push	{r4, lr}
1001013a:	f000 f86f 	bl	1001021c <__gedf2>
1001013e:	2800      	cmp	r0, #0
10010140:	dc01      	bgt.n	10010146 <__aeabi_dcmpgt+0xe>
10010142:	2000      	movs	r0, #0
10010144:	bd10      	pop	{r4, pc}
10010146:	2001      	movs	r0, #1
10010148:	bd10      	pop	{r4, pc}
1001014a:	46c0      	nop			; (mov r8, r8)

1001014c <__aeabi_dcmpge>:
1001014c:	b510      	push	{r4, lr}
1001014e:	f000 f865 	bl	1001021c <__gedf2>
10010152:	2800      	cmp	r0, #0
10010154:	da01      	bge.n	1001015a <__aeabi_dcmpge+0xe>
10010156:	2000      	movs	r0, #0
10010158:	bd10      	pop	{r4, pc}
1001015a:	2001      	movs	r0, #1
1001015c:	bd10      	pop	{r4, pc}
1001015e:	46c0      	nop			; (mov r8, r8)

10010160 <__clzsi2>:
10010160:	211c      	movs	r1, #28
10010162:	2301      	movs	r3, #1
10010164:	041b      	lsls	r3, r3, #16
10010166:	4298      	cmp	r0, r3
10010168:	d301      	bcc.n	1001016e <__clzsi2+0xe>
1001016a:	0c00      	lsrs	r0, r0, #16
1001016c:	3910      	subs	r1, #16
1001016e:	0a1b      	lsrs	r3, r3, #8
10010170:	4298      	cmp	r0, r3
10010172:	d301      	bcc.n	10010178 <__clzsi2+0x18>
10010174:	0a00      	lsrs	r0, r0, #8
10010176:	3908      	subs	r1, #8
10010178:	091b      	lsrs	r3, r3, #4
1001017a:	4298      	cmp	r0, r3
1001017c:	d301      	bcc.n	10010182 <__clzsi2+0x22>
1001017e:	0900      	lsrs	r0, r0, #4
10010180:	3904      	subs	r1, #4
10010182:	a202      	add	r2, pc, #8	; (adr r2, 1001018c <__clzsi2+0x2c>)
10010184:	5c10      	ldrb	r0, [r2, r0]
10010186:	1840      	adds	r0, r0, r1
10010188:	4770      	bx	lr
1001018a:	46c0      	nop			; (mov r8, r8)
1001018c:	02020304 	.word	0x02020304
10010190:	01010101 	.word	0x01010101
	...

1001019c <__eqdf2>:
1001019c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001019e:	465f      	mov	r7, fp
100101a0:	4656      	mov	r6, sl
100101a2:	464d      	mov	r5, r9
100101a4:	4644      	mov	r4, r8
100101a6:	b4f0      	push	{r4, r5, r6, r7}
100101a8:	031f      	lsls	r7, r3, #12
100101aa:	005c      	lsls	r4, r3, #1
100101ac:	0fdb      	lsrs	r3, r3, #31
100101ae:	469a      	mov	sl, r3
100101b0:	4b19      	ldr	r3, [pc, #100]	; (10010218 <__eqdf2+0x7c>)
100101b2:	030e      	lsls	r6, r1, #12
100101b4:	004d      	lsls	r5, r1, #1
100101b6:	0fc9      	lsrs	r1, r1, #31
100101b8:	4680      	mov	r8, r0
100101ba:	0b36      	lsrs	r6, r6, #12
100101bc:	0d6d      	lsrs	r5, r5, #21
100101be:	468b      	mov	fp, r1
100101c0:	4691      	mov	r9, r2
100101c2:	0b3f      	lsrs	r7, r7, #12
100101c4:	0d64      	lsrs	r4, r4, #21
100101c6:	429d      	cmp	r5, r3
100101c8:	d019      	beq.n	100101fe <__eqdf2+0x62>
100101ca:	4b13      	ldr	r3, [pc, #76]	; (10010218 <__eqdf2+0x7c>)
100101cc:	429c      	cmp	r4, r3
100101ce:	d01b      	beq.n	10010208 <__eqdf2+0x6c>
100101d0:	2301      	movs	r3, #1
100101d2:	42a5      	cmp	r5, r4
100101d4:	d006      	beq.n	100101e4 <__eqdf2+0x48>
100101d6:	0018      	movs	r0, r3
100101d8:	bc3c      	pop	{r2, r3, r4, r5}
100101da:	4690      	mov	r8, r2
100101dc:	4699      	mov	r9, r3
100101de:	46a2      	mov	sl, r4
100101e0:	46ab      	mov	fp, r5
100101e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
100101e4:	42be      	cmp	r6, r7
100101e6:	d1f6      	bne.n	100101d6 <__eqdf2+0x3a>
100101e8:	45c8      	cmp	r8, r9
100101ea:	d1f4      	bne.n	100101d6 <__eqdf2+0x3a>
100101ec:	45d3      	cmp	fp, sl
100101ee:	d010      	beq.n	10010212 <__eqdf2+0x76>
100101f0:	2d00      	cmp	r5, #0
100101f2:	d1f0      	bne.n	100101d6 <__eqdf2+0x3a>
100101f4:	4330      	orrs	r0, r6
100101f6:	0003      	movs	r3, r0
100101f8:	1e5a      	subs	r2, r3, #1
100101fa:	4193      	sbcs	r3, r2
100101fc:	e7eb      	b.n	100101d6 <__eqdf2+0x3a>
100101fe:	0031      	movs	r1, r6
10010200:	2301      	movs	r3, #1
10010202:	4301      	orrs	r1, r0
10010204:	d1e7      	bne.n	100101d6 <__eqdf2+0x3a>
10010206:	e7e0      	b.n	100101ca <__eqdf2+0x2e>
10010208:	433a      	orrs	r2, r7
1001020a:	2301      	movs	r3, #1
1001020c:	2a00      	cmp	r2, #0
1001020e:	d1e2      	bne.n	100101d6 <__eqdf2+0x3a>
10010210:	e7de      	b.n	100101d0 <__eqdf2+0x34>
10010212:	2300      	movs	r3, #0
10010214:	e7df      	b.n	100101d6 <__eqdf2+0x3a>
10010216:	46c0      	nop			; (mov r8, r8)
10010218:	000007ff 	.word	0x000007ff

1001021c <__gedf2>:
1001021c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001021e:	465f      	mov	r7, fp
10010220:	4644      	mov	r4, r8
10010222:	4656      	mov	r6, sl
10010224:	464d      	mov	r5, r9
10010226:	b4f0      	push	{r4, r5, r6, r7}
10010228:	031f      	lsls	r7, r3, #12
1001022a:	0b3c      	lsrs	r4, r7, #12
1001022c:	4f2c      	ldr	r7, [pc, #176]	; (100102e0 <__gedf2+0xc4>)
1001022e:	030e      	lsls	r6, r1, #12
10010230:	004d      	lsls	r5, r1, #1
10010232:	46a3      	mov	fp, r4
10010234:	005c      	lsls	r4, r3, #1
10010236:	4684      	mov	ip, r0
10010238:	0b36      	lsrs	r6, r6, #12
1001023a:	0d6d      	lsrs	r5, r5, #21
1001023c:	0fc9      	lsrs	r1, r1, #31
1001023e:	4690      	mov	r8, r2
10010240:	0d64      	lsrs	r4, r4, #21
10010242:	0fdb      	lsrs	r3, r3, #31
10010244:	42bd      	cmp	r5, r7
10010246:	d02b      	beq.n	100102a0 <__gedf2+0x84>
10010248:	4f25      	ldr	r7, [pc, #148]	; (100102e0 <__gedf2+0xc4>)
1001024a:	42bc      	cmp	r4, r7
1001024c:	d02e      	beq.n	100102ac <__gedf2+0x90>
1001024e:	2d00      	cmp	r5, #0
10010250:	d10e      	bne.n	10010270 <__gedf2+0x54>
10010252:	4330      	orrs	r0, r6
10010254:	0007      	movs	r7, r0
10010256:	4681      	mov	r9, r0
10010258:	4278      	negs	r0, r7
1001025a:	4178      	adcs	r0, r7
1001025c:	2c00      	cmp	r4, #0
1001025e:	d117      	bne.n	10010290 <__gedf2+0x74>
10010260:	465f      	mov	r7, fp
10010262:	433a      	orrs	r2, r7
10010264:	d114      	bne.n	10010290 <__gedf2+0x74>
10010266:	464b      	mov	r3, r9
10010268:	2000      	movs	r0, #0
1001026a:	2b00      	cmp	r3, #0
1001026c:	d00a      	beq.n	10010284 <__gedf2+0x68>
1001026e:	e006      	b.n	1001027e <__gedf2+0x62>
10010270:	2c00      	cmp	r4, #0
10010272:	d102      	bne.n	1001027a <__gedf2+0x5e>
10010274:	4658      	mov	r0, fp
10010276:	4302      	orrs	r2, r0
10010278:	d001      	beq.n	1001027e <__gedf2+0x62>
1001027a:	4299      	cmp	r1, r3
1001027c:	d01a      	beq.n	100102b4 <__gedf2+0x98>
1001027e:	2301      	movs	r3, #1
10010280:	4248      	negs	r0, r1
10010282:	4318      	orrs	r0, r3
10010284:	bc3c      	pop	{r2, r3, r4, r5}
10010286:	4690      	mov	r8, r2
10010288:	4699      	mov	r9, r3
1001028a:	46a2      	mov	sl, r4
1001028c:	46ab      	mov	fp, r5
1001028e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010290:	2800      	cmp	r0, #0
10010292:	d0f2      	beq.n	1001027a <__gedf2+0x5e>
10010294:	4258      	negs	r0, r3
10010296:	4158      	adcs	r0, r3
10010298:	2201      	movs	r2, #1
1001029a:	4240      	negs	r0, r0
1001029c:	4310      	orrs	r0, r2
1001029e:	e7f1      	b.n	10010284 <__gedf2+0x68>
100102a0:	0037      	movs	r7, r6
100102a2:	4307      	orrs	r7, r0
100102a4:	d0d0      	beq.n	10010248 <__gedf2+0x2c>
100102a6:	2002      	movs	r0, #2
100102a8:	4240      	negs	r0, r0
100102aa:	e7eb      	b.n	10010284 <__gedf2+0x68>
100102ac:	465f      	mov	r7, fp
100102ae:	4317      	orrs	r7, r2
100102b0:	d0cd      	beq.n	1001024e <__gedf2+0x32>
100102b2:	e7f8      	b.n	100102a6 <__gedf2+0x8a>
100102b4:	42a5      	cmp	r5, r4
100102b6:	dce2      	bgt.n	1001027e <__gedf2+0x62>
100102b8:	db05      	blt.n	100102c6 <__gedf2+0xaa>
100102ba:	455e      	cmp	r6, fp
100102bc:	d8df      	bhi.n	1001027e <__gedf2+0x62>
100102be:	d008      	beq.n	100102d2 <__gedf2+0xb6>
100102c0:	2000      	movs	r0, #0
100102c2:	455e      	cmp	r6, fp
100102c4:	d2de      	bcs.n	10010284 <__gedf2+0x68>
100102c6:	4248      	negs	r0, r1
100102c8:	4148      	adcs	r0, r1
100102ca:	2301      	movs	r3, #1
100102cc:	4240      	negs	r0, r0
100102ce:	4318      	orrs	r0, r3
100102d0:	e7d8      	b.n	10010284 <__gedf2+0x68>
100102d2:	45c4      	cmp	ip, r8
100102d4:	d8d3      	bhi.n	1001027e <__gedf2+0x62>
100102d6:	2000      	movs	r0, #0
100102d8:	45c4      	cmp	ip, r8
100102da:	d3f4      	bcc.n	100102c6 <__gedf2+0xaa>
100102dc:	e7d2      	b.n	10010284 <__gedf2+0x68>
100102de:	46c0      	nop			; (mov r8, r8)
100102e0:	000007ff 	.word	0x000007ff

100102e4 <__ledf2>:
100102e4:	b5f0      	push	{r4, r5, r6, r7, lr}
100102e6:	465f      	mov	r7, fp
100102e8:	464d      	mov	r5, r9
100102ea:	4644      	mov	r4, r8
100102ec:	4656      	mov	r6, sl
100102ee:	b4f0      	push	{r4, r5, r6, r7}
100102f0:	031c      	lsls	r4, r3, #12
100102f2:	0b24      	lsrs	r4, r4, #12
100102f4:	46a4      	mov	ip, r4
100102f6:	4c2f      	ldr	r4, [pc, #188]	; (100103b4 <__ledf2+0xd0>)
100102f8:	030f      	lsls	r7, r1, #12
100102fa:	004d      	lsls	r5, r1, #1
100102fc:	005e      	lsls	r6, r3, #1
100102fe:	0fc9      	lsrs	r1, r1, #31
10010300:	4680      	mov	r8, r0
10010302:	0b3f      	lsrs	r7, r7, #12
10010304:	0d6d      	lsrs	r5, r5, #21
10010306:	468b      	mov	fp, r1
10010308:	4691      	mov	r9, r2
1001030a:	0d76      	lsrs	r6, r6, #21
1001030c:	0fdb      	lsrs	r3, r3, #31
1001030e:	42a5      	cmp	r5, r4
10010310:	d020      	beq.n	10010354 <__ledf2+0x70>
10010312:	4c28      	ldr	r4, [pc, #160]	; (100103b4 <__ledf2+0xd0>)
10010314:	42a6      	cmp	r6, r4
10010316:	d022      	beq.n	1001035e <__ledf2+0x7a>
10010318:	2d00      	cmp	r5, #0
1001031a:	d112      	bne.n	10010342 <__ledf2+0x5e>
1001031c:	4338      	orrs	r0, r7
1001031e:	4244      	negs	r4, r0
10010320:	4144      	adcs	r4, r0
10010322:	2e00      	cmp	r6, #0
10010324:	d020      	beq.n	10010368 <__ledf2+0x84>
10010326:	2c00      	cmp	r4, #0
10010328:	d00d      	beq.n	10010346 <__ledf2+0x62>
1001032a:	425c      	negs	r4, r3
1001032c:	4163      	adcs	r3, r4
1001032e:	2401      	movs	r4, #1
10010330:	425b      	negs	r3, r3
10010332:	431c      	orrs	r4, r3
10010334:	0020      	movs	r0, r4
10010336:	bc3c      	pop	{r2, r3, r4, r5}
10010338:	4690      	mov	r8, r2
1001033a:	4699      	mov	r9, r3
1001033c:	46a2      	mov	sl, r4
1001033e:	46ab      	mov	fp, r5
10010340:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010342:	2e00      	cmp	r6, #0
10010344:	d017      	beq.n	10010376 <__ledf2+0x92>
10010346:	455b      	cmp	r3, fp
10010348:	d019      	beq.n	1001037e <__ledf2+0x9a>
1001034a:	465b      	mov	r3, fp
1001034c:	425c      	negs	r4, r3
1001034e:	2301      	movs	r3, #1
10010350:	431c      	orrs	r4, r3
10010352:	e7ef      	b.n	10010334 <__ledf2+0x50>
10010354:	0039      	movs	r1, r7
10010356:	2402      	movs	r4, #2
10010358:	4301      	orrs	r1, r0
1001035a:	d1eb      	bne.n	10010334 <__ledf2+0x50>
1001035c:	e7d9      	b.n	10010312 <__ledf2+0x2e>
1001035e:	4661      	mov	r1, ip
10010360:	2402      	movs	r4, #2
10010362:	4311      	orrs	r1, r2
10010364:	d1e6      	bne.n	10010334 <__ledf2+0x50>
10010366:	e7d7      	b.n	10010318 <__ledf2+0x34>
10010368:	4661      	mov	r1, ip
1001036a:	430a      	orrs	r2, r1
1001036c:	d1db      	bne.n	10010326 <__ledf2+0x42>
1001036e:	2400      	movs	r4, #0
10010370:	2800      	cmp	r0, #0
10010372:	d0df      	beq.n	10010334 <__ledf2+0x50>
10010374:	e7e9      	b.n	1001034a <__ledf2+0x66>
10010376:	4661      	mov	r1, ip
10010378:	430a      	orrs	r2, r1
1001037a:	d1e4      	bne.n	10010346 <__ledf2+0x62>
1001037c:	e7e5      	b.n	1001034a <__ledf2+0x66>
1001037e:	42b5      	cmp	r5, r6
10010380:	dd03      	ble.n	1001038a <__ledf2+0xa6>
10010382:	2201      	movs	r2, #1
10010384:	425c      	negs	r4, r3
10010386:	4314      	orrs	r4, r2
10010388:	e7d4      	b.n	10010334 <__ledf2+0x50>
1001038a:	42b5      	cmp	r5, r6
1001038c:	dbcd      	blt.n	1001032a <__ledf2+0x46>
1001038e:	4567      	cmp	r7, ip
10010390:	d8db      	bhi.n	1001034a <__ledf2+0x66>
10010392:	d009      	beq.n	100103a8 <__ledf2+0xc4>
10010394:	2400      	movs	r4, #0
10010396:	4567      	cmp	r7, ip
10010398:	d2cc      	bcs.n	10010334 <__ledf2+0x50>
1001039a:	4659      	mov	r1, fp
1001039c:	424c      	negs	r4, r1
1001039e:	4161      	adcs	r1, r4
100103a0:	2401      	movs	r4, #1
100103a2:	4249      	negs	r1, r1
100103a4:	430c      	orrs	r4, r1
100103a6:	e7c5      	b.n	10010334 <__ledf2+0x50>
100103a8:	45c8      	cmp	r8, r9
100103aa:	d8ce      	bhi.n	1001034a <__ledf2+0x66>
100103ac:	2400      	movs	r4, #0
100103ae:	45c8      	cmp	r8, r9
100103b0:	d3f3      	bcc.n	1001039a <__ledf2+0xb6>
100103b2:	e7bf      	b.n	10010334 <__ledf2+0x50>
100103b4:	000007ff 	.word	0x000007ff

100103b8 <__libc_init_array>:
100103b8:	4b0e      	ldr	r3, [pc, #56]	; (100103f4 <__libc_init_array+0x3c>)
100103ba:	b570      	push	{r4, r5, r6, lr}
100103bc:	2500      	movs	r5, #0
100103be:	001e      	movs	r6, r3
100103c0:	4c0d      	ldr	r4, [pc, #52]	; (100103f8 <__libc_init_array+0x40>)
100103c2:	1ae4      	subs	r4, r4, r3
100103c4:	10a4      	asrs	r4, r4, #2
100103c6:	42a5      	cmp	r5, r4
100103c8:	d004      	beq.n	100103d4 <__libc_init_array+0x1c>
100103ca:	00ab      	lsls	r3, r5, #2
100103cc:	58f3      	ldr	r3, [r6, r3]
100103ce:	4798      	blx	r3
100103d0:	3501      	adds	r5, #1
100103d2:	e7f8      	b.n	100103c6 <__libc_init_array+0xe>
100103d4:	f002 fb5c 	bl	10012a90 <_init>
100103d8:	4b08      	ldr	r3, [pc, #32]	; (100103fc <__libc_init_array+0x44>)
100103da:	2500      	movs	r5, #0
100103dc:	001e      	movs	r6, r3
100103de:	4c08      	ldr	r4, [pc, #32]	; (10010400 <__libc_init_array+0x48>)
100103e0:	1ae4      	subs	r4, r4, r3
100103e2:	10a4      	asrs	r4, r4, #2
100103e4:	42a5      	cmp	r5, r4
100103e6:	d004      	beq.n	100103f2 <__libc_init_array+0x3a>
100103e8:	00ab      	lsls	r3, r5, #2
100103ea:	58f3      	ldr	r3, [r6, r3]
100103ec:	4798      	blx	r3
100103ee:	3501      	adds	r5, #1
100103f0:	e7f8      	b.n	100103e4 <__libc_init_array+0x2c>
100103f2:	bd70      	pop	{r4, r5, r6, pc}
100103f4:	10012a9c 	.word	0x10012a9c
100103f8:	10012a9c 	.word	0x10012a9c
100103fc:	10012a9c 	.word	0x10012a9c
10010400:	10012aa0 	.word	0x10012aa0

10010404 <memcmp>:
10010404:	b530      	push	{r4, r5, lr}
10010406:	2400      	movs	r4, #0
10010408:	42a2      	cmp	r2, r4
1001040a:	d008      	beq.n	1001041e <memcmp+0x1a>
1001040c:	5d03      	ldrb	r3, [r0, r4]
1001040e:	1c65      	adds	r5, r4, #1
10010410:	5d0c      	ldrb	r4, [r1, r4]
10010412:	42a3      	cmp	r3, r4
10010414:	d001      	beq.n	1001041a <memcmp+0x16>
10010416:	1b18      	subs	r0, r3, r4
10010418:	e002      	b.n	10010420 <memcmp+0x1c>
1001041a:	002c      	movs	r4, r5
1001041c:	e7f4      	b.n	10010408 <memcmp+0x4>
1001041e:	2000      	movs	r0, #0
10010420:	bd30      	pop	{r4, r5, pc}

10010422 <memcpy>:
10010422:	2300      	movs	r3, #0
10010424:	b510      	push	{r4, lr}
10010426:	429a      	cmp	r2, r3
10010428:	d003      	beq.n	10010432 <memcpy+0x10>
1001042a:	5ccc      	ldrb	r4, [r1, r3]
1001042c:	54c4      	strb	r4, [r0, r3]
1001042e:	3301      	adds	r3, #1
10010430:	e7f9      	b.n	10010426 <memcpy+0x4>
10010432:	bd10      	pop	{r4, pc}

10010434 <memset>:
10010434:	0003      	movs	r3, r0
10010436:	1882      	adds	r2, r0, r2
10010438:	4293      	cmp	r3, r2
1001043a:	d002      	beq.n	10010442 <memset+0xe>
1001043c:	7019      	strb	r1, [r3, #0]
1001043e:	3301      	adds	r3, #1
10010440:	e7fa      	b.n	10010438 <memset+0x4>
10010442:	4770      	bx	lr

10010444 <iprintf>:
10010444:	b40f      	push	{r0, r1, r2, r3}
10010446:	4b0b      	ldr	r3, [pc, #44]	; (10010474 <iprintf+0x30>)
10010448:	b513      	push	{r0, r1, r4, lr}
1001044a:	681c      	ldr	r4, [r3, #0]
1001044c:	2c00      	cmp	r4, #0
1001044e:	d005      	beq.n	1001045c <iprintf+0x18>
10010450:	69a3      	ldr	r3, [r4, #24]
10010452:	2b00      	cmp	r3, #0
10010454:	d102      	bne.n	1001045c <iprintf+0x18>
10010456:	0020      	movs	r0, r4
10010458:	f000 fb46 	bl	10010ae8 <__sinit>
1001045c:	ab05      	add	r3, sp, #20
1001045e:	9a04      	ldr	r2, [sp, #16]
10010460:	68a1      	ldr	r1, [r4, #8]
10010462:	0020      	movs	r0, r4
10010464:	9301      	str	r3, [sp, #4]
10010466:	f000 fd05 	bl	10010e74 <_vfiprintf_r>
1001046a:	bc16      	pop	{r1, r2, r4}
1001046c:	bc08      	pop	{r3}
1001046e:	b004      	add	sp, #16
10010470:	4718      	bx	r3
10010472:	46c0      	nop			; (mov r8, r8)
10010474:	10012b3c 	.word	0x10012b3c

10010478 <putchar>:
10010478:	4b08      	ldr	r3, [pc, #32]	; (1001049c <putchar+0x24>)
1001047a:	b570      	push	{r4, r5, r6, lr}
1001047c:	681c      	ldr	r4, [r3, #0]
1001047e:	0005      	movs	r5, r0
10010480:	2c00      	cmp	r4, #0
10010482:	d005      	beq.n	10010490 <putchar+0x18>
10010484:	69a3      	ldr	r3, [r4, #24]
10010486:	2b00      	cmp	r3, #0
10010488:	d102      	bne.n	10010490 <putchar+0x18>
1001048a:	0020      	movs	r0, r4
1001048c:	f000 fb2c 	bl	10010ae8 <__sinit>
10010490:	0029      	movs	r1, r5
10010492:	68a2      	ldr	r2, [r4, #8]
10010494:	0020      	movs	r0, r4
10010496:	f000 ff99 	bl	100113cc <_putc_r>
1001049a:	bd70      	pop	{r4, r5, r6, pc}
1001049c:	10012b3c 	.word	0x10012b3c

100104a0 <_puts_r>:
100104a0:	b570      	push	{r4, r5, r6, lr}
100104a2:	0005      	movs	r5, r0
100104a4:	000e      	movs	r6, r1
100104a6:	2800      	cmp	r0, #0
100104a8:	d004      	beq.n	100104b4 <_puts_r+0x14>
100104aa:	6983      	ldr	r3, [r0, #24]
100104ac:	2b00      	cmp	r3, #0
100104ae:	d101      	bne.n	100104b4 <_puts_r+0x14>
100104b0:	f000 fb1a 	bl	10010ae8 <__sinit>
100104b4:	69ab      	ldr	r3, [r5, #24]
100104b6:	68ac      	ldr	r4, [r5, #8]
100104b8:	2b00      	cmp	r3, #0
100104ba:	d102      	bne.n	100104c2 <_puts_r+0x22>
100104bc:	0028      	movs	r0, r5
100104be:	f000 fb13 	bl	10010ae8 <__sinit>
100104c2:	4b25      	ldr	r3, [pc, #148]	; (10010558 <_puts_r+0xb8>)
100104c4:	429c      	cmp	r4, r3
100104c6:	d101      	bne.n	100104cc <_puts_r+0x2c>
100104c8:	686c      	ldr	r4, [r5, #4]
100104ca:	e008      	b.n	100104de <_puts_r+0x3e>
100104cc:	4b23      	ldr	r3, [pc, #140]	; (1001055c <_puts_r+0xbc>)
100104ce:	429c      	cmp	r4, r3
100104d0:	d101      	bne.n	100104d6 <_puts_r+0x36>
100104d2:	68ac      	ldr	r4, [r5, #8]
100104d4:	e003      	b.n	100104de <_puts_r+0x3e>
100104d6:	4b22      	ldr	r3, [pc, #136]	; (10010560 <_puts_r+0xc0>)
100104d8:	429c      	cmp	r4, r3
100104da:	d100      	bne.n	100104de <_puts_r+0x3e>
100104dc:	68ec      	ldr	r4, [r5, #12]
100104de:	89a3      	ldrh	r3, [r4, #12]
100104e0:	071b      	lsls	r3, r3, #28
100104e2:	d502      	bpl.n	100104ea <_puts_r+0x4a>
100104e4:	6923      	ldr	r3, [r4, #16]
100104e6:	2b00      	cmp	r3, #0
100104e8:	d111      	bne.n	1001050e <_puts_r+0x6e>
100104ea:	0021      	movs	r1, r4
100104ec:	0028      	movs	r0, r5
100104ee:	f000 f991 	bl	10010814 <__swsetup_r>
100104f2:	2800      	cmp	r0, #0
100104f4:	d00b      	beq.n	1001050e <_puts_r+0x6e>
100104f6:	2001      	movs	r0, #1
100104f8:	4240      	negs	r0, r0
100104fa:	e02b      	b.n	10010554 <_puts_r+0xb4>
100104fc:	3b01      	subs	r3, #1
100104fe:	3601      	adds	r6, #1
10010500:	60a3      	str	r3, [r4, #8]
10010502:	2b00      	cmp	r3, #0
10010504:	db08      	blt.n	10010518 <_puts_r+0x78>
10010506:	6823      	ldr	r3, [r4, #0]
10010508:	1c5a      	adds	r2, r3, #1
1001050a:	6022      	str	r2, [r4, #0]
1001050c:	7019      	strb	r1, [r3, #0]
1001050e:	7831      	ldrb	r1, [r6, #0]
10010510:	68a3      	ldr	r3, [r4, #8]
10010512:	2900      	cmp	r1, #0
10010514:	d1f2      	bne.n	100104fc <_puts_r+0x5c>
10010516:	e00b      	b.n	10010530 <_puts_r+0x90>
10010518:	69a2      	ldr	r2, [r4, #24]
1001051a:	4293      	cmp	r3, r2
1001051c:	db01      	blt.n	10010522 <_puts_r+0x82>
1001051e:	290a      	cmp	r1, #10
10010520:	d1f1      	bne.n	10010506 <_puts_r+0x66>
10010522:	0022      	movs	r2, r4
10010524:	0028      	movs	r0, r5
10010526:	f000 f91d 	bl	10010764 <__swbuf_r>
1001052a:	1c43      	adds	r3, r0, #1
1001052c:	d1ef      	bne.n	1001050e <_puts_r+0x6e>
1001052e:	e7e2      	b.n	100104f6 <_puts_r+0x56>
10010530:	3b01      	subs	r3, #1
10010532:	60a3      	str	r3, [r4, #8]
10010534:	2b00      	cmp	r3, #0
10010536:	da08      	bge.n	1001054a <_puts_r+0xaa>
10010538:	0022      	movs	r2, r4
1001053a:	310a      	adds	r1, #10
1001053c:	0028      	movs	r0, r5
1001053e:	f000 f911 	bl	10010764 <__swbuf_r>
10010542:	1c43      	adds	r3, r0, #1
10010544:	d0d7      	beq.n	100104f6 <_puts_r+0x56>
10010546:	200a      	movs	r0, #10
10010548:	e004      	b.n	10010554 <_puts_r+0xb4>
1001054a:	200a      	movs	r0, #10
1001054c:	6823      	ldr	r3, [r4, #0]
1001054e:	1c5a      	adds	r2, r3, #1
10010550:	6022      	str	r2, [r4, #0]
10010552:	7018      	strb	r0, [r3, #0]
10010554:	bd70      	pop	{r4, r5, r6, pc}
10010556:	46c0      	nop			; (mov r8, r8)
10010558:	100129fc 	.word	0x100129fc
1001055c:	10012a1c 	.word	0x10012a1c
10010560:	10012a3c 	.word	0x10012a3c

10010564 <puts>:
10010564:	b510      	push	{r4, lr}
10010566:	4b03      	ldr	r3, [pc, #12]	; (10010574 <puts+0x10>)
10010568:	0001      	movs	r1, r0
1001056a:	6818      	ldr	r0, [r3, #0]
1001056c:	f7ff ff98 	bl	100104a0 <_puts_r>
10010570:	bd10      	pop	{r4, pc}
10010572:	46c0      	nop			; (mov r8, r8)
10010574:	10012b3c 	.word	0x10012b3c

10010578 <rand>:
10010578:	4b15      	ldr	r3, [pc, #84]	; (100105d0 <rand+0x58>)
1001057a:	b510      	push	{r4, lr}
1001057c:	681c      	ldr	r4, [r3, #0]
1001057e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
10010580:	2b00      	cmp	r3, #0
10010582:	d115      	bne.n	100105b0 <rand+0x38>
10010584:	2018      	movs	r0, #24
10010586:	f000 fba7 	bl	10010cd8 <malloc>
1001058a:	4b12      	ldr	r3, [pc, #72]	; (100105d4 <rand+0x5c>)
1001058c:	63a0      	str	r0, [r4, #56]	; 0x38
1001058e:	8003      	strh	r3, [r0, #0]
10010590:	4b11      	ldr	r3, [pc, #68]	; (100105d8 <rand+0x60>)
10010592:	2201      	movs	r2, #1
10010594:	8043      	strh	r3, [r0, #2]
10010596:	4b11      	ldr	r3, [pc, #68]	; (100105dc <rand+0x64>)
10010598:	8083      	strh	r3, [r0, #4]
1001059a:	4b11      	ldr	r3, [pc, #68]	; (100105e0 <rand+0x68>)
1001059c:	80c3      	strh	r3, [r0, #6]
1001059e:	4b11      	ldr	r3, [pc, #68]	; (100105e4 <rand+0x6c>)
100105a0:	8103      	strh	r3, [r0, #8]
100105a2:	2305      	movs	r3, #5
100105a4:	8143      	strh	r3, [r0, #10]
100105a6:	3306      	adds	r3, #6
100105a8:	8183      	strh	r3, [r0, #12]
100105aa:	2300      	movs	r3, #0
100105ac:	6102      	str	r2, [r0, #16]
100105ae:	6143      	str	r3, [r0, #20]
100105b0:	6ba4      	ldr	r4, [r4, #56]	; 0x38
100105b2:	4a0d      	ldr	r2, [pc, #52]	; (100105e8 <rand+0x70>)
100105b4:	6920      	ldr	r0, [r4, #16]
100105b6:	6961      	ldr	r1, [r4, #20]
100105b8:	4b0c      	ldr	r3, [pc, #48]	; (100105ec <rand+0x74>)
100105ba:	f001 f819 	bl	100115f0 <__aeabi_lmul>
100105be:	2201      	movs	r2, #1
100105c0:	2300      	movs	r3, #0
100105c2:	1880      	adds	r0, r0, r2
100105c4:	4159      	adcs	r1, r3
100105c6:	6120      	str	r0, [r4, #16]
100105c8:	6161      	str	r1, [r4, #20]
100105ca:	0048      	lsls	r0, r1, #1
100105cc:	0840      	lsrs	r0, r0, #1
100105ce:	bd10      	pop	{r4, pc}
100105d0:	10012b3c 	.word	0x10012b3c
100105d4:	0000330e 	.word	0x0000330e
100105d8:	ffffabcd 	.word	0xffffabcd
100105dc:	00001234 	.word	0x00001234
100105e0:	ffffe66d 	.word	0xffffe66d
100105e4:	ffffdeec 	.word	0xffffdeec
100105e8:	4c957f2d 	.word	0x4c957f2d
100105ec:	5851f42d 	.word	0x5851f42d

100105f0 <setbuf>:
100105f0:	424a      	negs	r2, r1
100105f2:	414a      	adcs	r2, r1
100105f4:	2380      	movs	r3, #128	; 0x80
100105f6:	b510      	push	{r4, lr}
100105f8:	0052      	lsls	r2, r2, #1
100105fa:	00db      	lsls	r3, r3, #3
100105fc:	f000 f802 	bl	10010604 <setvbuf>
10010600:	bd10      	pop	{r4, pc}
	...

10010604 <setvbuf>:
10010604:	b5f0      	push	{r4, r5, r6, r7, lr}
10010606:	001d      	movs	r5, r3
10010608:	4b51      	ldr	r3, [pc, #324]	; (10010750 <setvbuf+0x14c>)
1001060a:	b085      	sub	sp, #20
1001060c:	681e      	ldr	r6, [r3, #0]
1001060e:	0004      	movs	r4, r0
10010610:	000f      	movs	r7, r1
10010612:	9200      	str	r2, [sp, #0]
10010614:	2e00      	cmp	r6, #0
10010616:	d005      	beq.n	10010624 <setvbuf+0x20>
10010618:	69b3      	ldr	r3, [r6, #24]
1001061a:	2b00      	cmp	r3, #0
1001061c:	d102      	bne.n	10010624 <setvbuf+0x20>
1001061e:	0030      	movs	r0, r6
10010620:	f000 fa62 	bl	10010ae8 <__sinit>
10010624:	4b4b      	ldr	r3, [pc, #300]	; (10010754 <setvbuf+0x150>)
10010626:	429c      	cmp	r4, r3
10010628:	d101      	bne.n	1001062e <setvbuf+0x2a>
1001062a:	6874      	ldr	r4, [r6, #4]
1001062c:	e008      	b.n	10010640 <setvbuf+0x3c>
1001062e:	4b4a      	ldr	r3, [pc, #296]	; (10010758 <setvbuf+0x154>)
10010630:	429c      	cmp	r4, r3
10010632:	d101      	bne.n	10010638 <setvbuf+0x34>
10010634:	68b4      	ldr	r4, [r6, #8]
10010636:	e003      	b.n	10010640 <setvbuf+0x3c>
10010638:	4b48      	ldr	r3, [pc, #288]	; (1001075c <setvbuf+0x158>)
1001063a:	429c      	cmp	r4, r3
1001063c:	d100      	bne.n	10010640 <setvbuf+0x3c>
1001063e:	68f4      	ldr	r4, [r6, #12]
10010640:	9b00      	ldr	r3, [sp, #0]
10010642:	2b02      	cmp	r3, #2
10010644:	d005      	beq.n	10010652 <setvbuf+0x4e>
10010646:	2b01      	cmp	r3, #1
10010648:	d900      	bls.n	1001064c <setvbuf+0x48>
1001064a:	e07c      	b.n	10010746 <setvbuf+0x142>
1001064c:	2d00      	cmp	r5, #0
1001064e:	da00      	bge.n	10010652 <setvbuf+0x4e>
10010650:	e079      	b.n	10010746 <setvbuf+0x142>
10010652:	0021      	movs	r1, r4
10010654:	0030      	movs	r0, r6
10010656:	f000 f9d9 	bl	10010a0c <_fflush_r>
1001065a:	6b61      	ldr	r1, [r4, #52]	; 0x34
1001065c:	2900      	cmp	r1, #0
1001065e:	d008      	beq.n	10010672 <setvbuf+0x6e>
10010660:	0023      	movs	r3, r4
10010662:	3344      	adds	r3, #68	; 0x44
10010664:	4299      	cmp	r1, r3
10010666:	d002      	beq.n	1001066e <setvbuf+0x6a>
10010668:	0030      	movs	r0, r6
1001066a:	f000 fb3f 	bl	10010cec <_free_r>
1001066e:	2300      	movs	r3, #0
10010670:	6363      	str	r3, [r4, #52]	; 0x34
10010672:	2300      	movs	r3, #0
10010674:	61a3      	str	r3, [r4, #24]
10010676:	6063      	str	r3, [r4, #4]
10010678:	89a3      	ldrh	r3, [r4, #12]
1001067a:	061b      	lsls	r3, r3, #24
1001067c:	d503      	bpl.n	10010686 <setvbuf+0x82>
1001067e:	6921      	ldr	r1, [r4, #16]
10010680:	0030      	movs	r0, r6
10010682:	f000 fb33 	bl	10010cec <_free_r>
10010686:	89a2      	ldrh	r2, [r4, #12]
10010688:	4b35      	ldr	r3, [pc, #212]	; (10010760 <setvbuf+0x15c>)
1001068a:	4013      	ands	r3, r2
1001068c:	81a3      	strh	r3, [r4, #12]
1001068e:	9b00      	ldr	r3, [sp, #0]
10010690:	2b02      	cmp	r3, #2
10010692:	d021      	beq.n	100106d8 <setvbuf+0xd4>
10010694:	ab03      	add	r3, sp, #12
10010696:	aa02      	add	r2, sp, #8
10010698:	0021      	movs	r1, r4
1001069a:	0030      	movs	r0, r6
1001069c:	f000 fab8 	bl	10010c10 <__swhatbuf_r>
100106a0:	89a3      	ldrh	r3, [r4, #12]
100106a2:	4318      	orrs	r0, r3
100106a4:	81a0      	strh	r0, [r4, #12]
100106a6:	2d00      	cmp	r5, #0
100106a8:	d101      	bne.n	100106ae <setvbuf+0xaa>
100106aa:	9d02      	ldr	r5, [sp, #8]
100106ac:	e001      	b.n	100106b2 <setvbuf+0xae>
100106ae:	2f00      	cmp	r7, #0
100106b0:	d125      	bne.n	100106fe <setvbuf+0xfa>
100106b2:	0028      	movs	r0, r5
100106b4:	f000 fb10 	bl	10010cd8 <malloc>
100106b8:	9501      	str	r5, [sp, #4]
100106ba:	1e07      	subs	r7, r0, #0
100106bc:	d11a      	bne.n	100106f4 <setvbuf+0xf0>
100106be:	9b02      	ldr	r3, [sp, #8]
100106c0:	9301      	str	r3, [sp, #4]
100106c2:	42ab      	cmp	r3, r5
100106c4:	d102      	bne.n	100106cc <setvbuf+0xc8>
100106c6:	2001      	movs	r0, #1
100106c8:	4240      	negs	r0, r0
100106ca:	e006      	b.n	100106da <setvbuf+0xd6>
100106cc:	9801      	ldr	r0, [sp, #4]
100106ce:	f000 fb03 	bl	10010cd8 <malloc>
100106d2:	1e07      	subs	r7, r0, #0
100106d4:	d10e      	bne.n	100106f4 <setvbuf+0xf0>
100106d6:	e7f6      	b.n	100106c6 <setvbuf+0xc2>
100106d8:	2000      	movs	r0, #0
100106da:	2202      	movs	r2, #2
100106dc:	89a3      	ldrh	r3, [r4, #12]
100106de:	4313      	orrs	r3, r2
100106e0:	81a3      	strh	r3, [r4, #12]
100106e2:	2300      	movs	r3, #0
100106e4:	60a3      	str	r3, [r4, #8]
100106e6:	0023      	movs	r3, r4
100106e8:	3347      	adds	r3, #71	; 0x47
100106ea:	6023      	str	r3, [r4, #0]
100106ec:	6123      	str	r3, [r4, #16]
100106ee:	2301      	movs	r3, #1
100106f0:	6163      	str	r3, [r4, #20]
100106f2:	e02a      	b.n	1001074a <setvbuf+0x146>
100106f4:	2280      	movs	r2, #128	; 0x80
100106f6:	89a3      	ldrh	r3, [r4, #12]
100106f8:	9d01      	ldr	r5, [sp, #4]
100106fa:	4313      	orrs	r3, r2
100106fc:	81a3      	strh	r3, [r4, #12]
100106fe:	69b3      	ldr	r3, [r6, #24]
10010700:	2b00      	cmp	r3, #0
10010702:	d102      	bne.n	1001070a <setvbuf+0x106>
10010704:	0030      	movs	r0, r6
10010706:	f000 f9ef 	bl	10010ae8 <__sinit>
1001070a:	9b00      	ldr	r3, [sp, #0]
1001070c:	2b01      	cmp	r3, #1
1001070e:	d103      	bne.n	10010718 <setvbuf+0x114>
10010710:	89a3      	ldrh	r3, [r4, #12]
10010712:	9a00      	ldr	r2, [sp, #0]
10010714:	431a      	orrs	r2, r3
10010716:	81a2      	strh	r2, [r4, #12]
10010718:	2308      	movs	r3, #8
1001071a:	89a2      	ldrh	r2, [r4, #12]
1001071c:	6027      	str	r7, [r4, #0]
1001071e:	4013      	ands	r3, r2
10010720:	6127      	str	r7, [r4, #16]
10010722:	6165      	str	r5, [r4, #20]
10010724:	1e18      	subs	r0, r3, #0
10010726:	d00c      	beq.n	10010742 <setvbuf+0x13e>
10010728:	2301      	movs	r3, #1
1001072a:	401a      	ands	r2, r3
1001072c:	2300      	movs	r3, #0
1001072e:	1e10      	subs	r0, r2, #0
10010730:	4298      	cmp	r0, r3
10010732:	d004      	beq.n	1001073e <setvbuf+0x13a>
10010734:	426d      	negs	r5, r5
10010736:	60a3      	str	r3, [r4, #8]
10010738:	61a5      	str	r5, [r4, #24]
1001073a:	0018      	movs	r0, r3
1001073c:	e005      	b.n	1001074a <setvbuf+0x146>
1001073e:	60a5      	str	r5, [r4, #8]
10010740:	e003      	b.n	1001074a <setvbuf+0x146>
10010742:	60a3      	str	r3, [r4, #8]
10010744:	e001      	b.n	1001074a <setvbuf+0x146>
10010746:	2001      	movs	r0, #1
10010748:	4240      	negs	r0, r0
1001074a:	b005      	add	sp, #20
1001074c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001074e:	46c0      	nop			; (mov r8, r8)
10010750:	10012b3c 	.word	0x10012b3c
10010754:	100129fc 	.word	0x100129fc
10010758:	10012a1c 	.word	0x10012a1c
1001075c:	10012a3c 	.word	0x10012a3c
10010760:	fffff35c 	.word	0xfffff35c

10010764 <__swbuf_r>:
10010764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10010766:	0005      	movs	r5, r0
10010768:	000f      	movs	r7, r1
1001076a:	0014      	movs	r4, r2
1001076c:	2800      	cmp	r0, #0
1001076e:	d004      	beq.n	1001077a <__swbuf_r+0x16>
10010770:	6983      	ldr	r3, [r0, #24]
10010772:	2b00      	cmp	r3, #0
10010774:	d101      	bne.n	1001077a <__swbuf_r+0x16>
10010776:	f000 f9b7 	bl	10010ae8 <__sinit>
1001077a:	4b23      	ldr	r3, [pc, #140]	; (10010808 <__swbuf_r+0xa4>)
1001077c:	429c      	cmp	r4, r3
1001077e:	d101      	bne.n	10010784 <__swbuf_r+0x20>
10010780:	686c      	ldr	r4, [r5, #4]
10010782:	e008      	b.n	10010796 <__swbuf_r+0x32>
10010784:	4b21      	ldr	r3, [pc, #132]	; (1001080c <__swbuf_r+0xa8>)
10010786:	429c      	cmp	r4, r3
10010788:	d101      	bne.n	1001078e <__swbuf_r+0x2a>
1001078a:	68ac      	ldr	r4, [r5, #8]
1001078c:	e003      	b.n	10010796 <__swbuf_r+0x32>
1001078e:	4b20      	ldr	r3, [pc, #128]	; (10010810 <__swbuf_r+0xac>)
10010790:	429c      	cmp	r4, r3
10010792:	d100      	bne.n	10010796 <__swbuf_r+0x32>
10010794:	68ec      	ldr	r4, [r5, #12]
10010796:	69a3      	ldr	r3, [r4, #24]
10010798:	60a3      	str	r3, [r4, #8]
1001079a:	89a3      	ldrh	r3, [r4, #12]
1001079c:	071b      	lsls	r3, r3, #28
1001079e:	d50a      	bpl.n	100107b6 <__swbuf_r+0x52>
100107a0:	6923      	ldr	r3, [r4, #16]
100107a2:	2b00      	cmp	r3, #0
100107a4:	d007      	beq.n	100107b6 <__swbuf_r+0x52>
100107a6:	6823      	ldr	r3, [r4, #0]
100107a8:	6922      	ldr	r2, [r4, #16]
100107aa:	b2fe      	uxtb	r6, r7
100107ac:	1a98      	subs	r0, r3, r2
100107ae:	6963      	ldr	r3, [r4, #20]
100107b0:	4298      	cmp	r0, r3
100107b2:	db0f      	blt.n	100107d4 <__swbuf_r+0x70>
100107b4:	e008      	b.n	100107c8 <__swbuf_r+0x64>
100107b6:	0021      	movs	r1, r4
100107b8:	0028      	movs	r0, r5
100107ba:	f000 f82b 	bl	10010814 <__swsetup_r>
100107be:	2800      	cmp	r0, #0
100107c0:	d0f1      	beq.n	100107a6 <__swbuf_r+0x42>
100107c2:	2001      	movs	r0, #1
100107c4:	4240      	negs	r0, r0
100107c6:	e01d      	b.n	10010804 <__swbuf_r+0xa0>
100107c8:	0021      	movs	r1, r4
100107ca:	0028      	movs	r0, r5
100107cc:	f000 f91e 	bl	10010a0c <_fflush_r>
100107d0:	2800      	cmp	r0, #0
100107d2:	d1f6      	bne.n	100107c2 <__swbuf_r+0x5e>
100107d4:	68a3      	ldr	r3, [r4, #8]
100107d6:	3001      	adds	r0, #1
100107d8:	3b01      	subs	r3, #1
100107da:	60a3      	str	r3, [r4, #8]
100107dc:	6823      	ldr	r3, [r4, #0]
100107de:	1c5a      	adds	r2, r3, #1
100107e0:	6022      	str	r2, [r4, #0]
100107e2:	701f      	strb	r7, [r3, #0]
100107e4:	6963      	ldr	r3, [r4, #20]
100107e6:	4298      	cmp	r0, r3
100107e8:	d005      	beq.n	100107f6 <__swbuf_r+0x92>
100107ea:	89a3      	ldrh	r3, [r4, #12]
100107ec:	0030      	movs	r0, r6
100107ee:	07db      	lsls	r3, r3, #31
100107f0:	d508      	bpl.n	10010804 <__swbuf_r+0xa0>
100107f2:	2e0a      	cmp	r6, #10
100107f4:	d106      	bne.n	10010804 <__swbuf_r+0xa0>
100107f6:	0021      	movs	r1, r4
100107f8:	0028      	movs	r0, r5
100107fa:	f000 f907 	bl	10010a0c <_fflush_r>
100107fe:	2800      	cmp	r0, #0
10010800:	d1df      	bne.n	100107c2 <__swbuf_r+0x5e>
10010802:	0030      	movs	r0, r6
10010804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10010806:	46c0      	nop			; (mov r8, r8)
10010808:	100129fc 	.word	0x100129fc
1001080c:	10012a1c 	.word	0x10012a1c
10010810:	10012a3c 	.word	0x10012a3c

10010814 <__swsetup_r>:
10010814:	4b36      	ldr	r3, [pc, #216]	; (100108f0 <__swsetup_r+0xdc>)
10010816:	b570      	push	{r4, r5, r6, lr}
10010818:	681d      	ldr	r5, [r3, #0]
1001081a:	0006      	movs	r6, r0
1001081c:	000c      	movs	r4, r1
1001081e:	2d00      	cmp	r5, #0
10010820:	d005      	beq.n	1001082e <__swsetup_r+0x1a>
10010822:	69ab      	ldr	r3, [r5, #24]
10010824:	2b00      	cmp	r3, #0
10010826:	d102      	bne.n	1001082e <__swsetup_r+0x1a>
10010828:	0028      	movs	r0, r5
1001082a:	f000 f95d 	bl	10010ae8 <__sinit>
1001082e:	4b31      	ldr	r3, [pc, #196]	; (100108f4 <__swsetup_r+0xe0>)
10010830:	429c      	cmp	r4, r3
10010832:	d101      	bne.n	10010838 <__swsetup_r+0x24>
10010834:	686c      	ldr	r4, [r5, #4]
10010836:	e008      	b.n	1001084a <__swsetup_r+0x36>
10010838:	4b2f      	ldr	r3, [pc, #188]	; (100108f8 <__swsetup_r+0xe4>)
1001083a:	429c      	cmp	r4, r3
1001083c:	d101      	bne.n	10010842 <__swsetup_r+0x2e>
1001083e:	68ac      	ldr	r4, [r5, #8]
10010840:	e003      	b.n	1001084a <__swsetup_r+0x36>
10010842:	4b2e      	ldr	r3, [pc, #184]	; (100108fc <__swsetup_r+0xe8>)
10010844:	429c      	cmp	r4, r3
10010846:	d100      	bne.n	1001084a <__swsetup_r+0x36>
10010848:	68ec      	ldr	r4, [r5, #12]
1001084a:	220c      	movs	r2, #12
1001084c:	5ea3      	ldrsh	r3, [r4, r2]
1001084e:	b29a      	uxth	r2, r3
10010850:	0711      	lsls	r1, r2, #28
10010852:	d423      	bmi.n	1001089c <__swsetup_r+0x88>
10010854:	06d1      	lsls	r1, r2, #27
10010856:	d407      	bmi.n	10010868 <__swsetup_r+0x54>
10010858:	2209      	movs	r2, #9
1001085a:	2001      	movs	r0, #1
1001085c:	6032      	str	r2, [r6, #0]
1001085e:	3237      	adds	r2, #55	; 0x37
10010860:	4313      	orrs	r3, r2
10010862:	81a3      	strh	r3, [r4, #12]
10010864:	4240      	negs	r0, r0
10010866:	e042      	b.n	100108ee <__swsetup_r+0xda>
10010868:	0753      	lsls	r3, r2, #29
1001086a:	d513      	bpl.n	10010894 <__swsetup_r+0x80>
1001086c:	6b61      	ldr	r1, [r4, #52]	; 0x34
1001086e:	2900      	cmp	r1, #0
10010870:	d008      	beq.n	10010884 <__swsetup_r+0x70>
10010872:	0023      	movs	r3, r4
10010874:	3344      	adds	r3, #68	; 0x44
10010876:	4299      	cmp	r1, r3
10010878:	d002      	beq.n	10010880 <__swsetup_r+0x6c>
1001087a:	0030      	movs	r0, r6
1001087c:	f000 fa36 	bl	10010cec <_free_r>
10010880:	2300      	movs	r3, #0
10010882:	6363      	str	r3, [r4, #52]	; 0x34
10010884:	2224      	movs	r2, #36	; 0x24
10010886:	89a3      	ldrh	r3, [r4, #12]
10010888:	4393      	bics	r3, r2
1001088a:	81a3      	strh	r3, [r4, #12]
1001088c:	2300      	movs	r3, #0
1001088e:	6063      	str	r3, [r4, #4]
10010890:	6923      	ldr	r3, [r4, #16]
10010892:	6023      	str	r3, [r4, #0]
10010894:	2208      	movs	r2, #8
10010896:	89a3      	ldrh	r3, [r4, #12]
10010898:	4313      	orrs	r3, r2
1001089a:	81a3      	strh	r3, [r4, #12]
1001089c:	6923      	ldr	r3, [r4, #16]
1001089e:	2b00      	cmp	r3, #0
100108a0:	d10b      	bne.n	100108ba <__swsetup_r+0xa6>
100108a2:	23a0      	movs	r3, #160	; 0xa0
100108a4:	89a2      	ldrh	r2, [r4, #12]
100108a6:	009b      	lsls	r3, r3, #2
100108a8:	4013      	ands	r3, r2
100108aa:	2280      	movs	r2, #128	; 0x80
100108ac:	0092      	lsls	r2, r2, #2
100108ae:	4293      	cmp	r3, r2
100108b0:	d003      	beq.n	100108ba <__swsetup_r+0xa6>
100108b2:	0021      	movs	r1, r4
100108b4:	0030      	movs	r0, r6
100108b6:	f000 f9d1 	bl	10010c5c <__smakebuf_r>
100108ba:	2301      	movs	r3, #1
100108bc:	89a2      	ldrh	r2, [r4, #12]
100108be:	4013      	ands	r3, r2
100108c0:	d005      	beq.n	100108ce <__swsetup_r+0xba>
100108c2:	2300      	movs	r3, #0
100108c4:	60a3      	str	r3, [r4, #8]
100108c6:	6963      	ldr	r3, [r4, #20]
100108c8:	425b      	negs	r3, r3
100108ca:	61a3      	str	r3, [r4, #24]
100108cc:	e003      	b.n	100108d6 <__swsetup_r+0xc2>
100108ce:	0792      	lsls	r2, r2, #30
100108d0:	d400      	bmi.n	100108d4 <__swsetup_r+0xc0>
100108d2:	6963      	ldr	r3, [r4, #20]
100108d4:	60a3      	str	r3, [r4, #8]
100108d6:	2000      	movs	r0, #0
100108d8:	6923      	ldr	r3, [r4, #16]
100108da:	4283      	cmp	r3, r0
100108dc:	d107      	bne.n	100108ee <__swsetup_r+0xda>
100108de:	220c      	movs	r2, #12
100108e0:	5ea3      	ldrsh	r3, [r4, r2]
100108e2:	061a      	lsls	r2, r3, #24
100108e4:	d503      	bpl.n	100108ee <__swsetup_r+0xda>
100108e6:	2240      	movs	r2, #64	; 0x40
100108e8:	4313      	orrs	r3, r2
100108ea:	81a3      	strh	r3, [r4, #12]
100108ec:	3801      	subs	r0, #1
100108ee:	bd70      	pop	{r4, r5, r6, pc}
100108f0:	10012b3c 	.word	0x10012b3c
100108f4:	100129fc 	.word	0x100129fc
100108f8:	10012a1c 	.word	0x10012a1c
100108fc:	10012a3c 	.word	0x10012a3c

10010900 <__sflush_r>:
10010900:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010902:	898a      	ldrh	r2, [r1, #12]
10010904:	0005      	movs	r5, r0
10010906:	000c      	movs	r4, r1
10010908:	0713      	lsls	r3, r2, #28
1001090a:	d45a      	bmi.n	100109c2 <__sflush_r+0xc2>
1001090c:	684b      	ldr	r3, [r1, #4]
1001090e:	2b00      	cmp	r3, #0
10010910:	dc02      	bgt.n	10010918 <__sflush_r+0x18>
10010912:	6c0b      	ldr	r3, [r1, #64]	; 0x40
10010914:	2b00      	cmp	r3, #0
10010916:	dd19      	ble.n	1001094c <__sflush_r+0x4c>
10010918:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
1001091a:	2f00      	cmp	r7, #0
1001091c:	d016      	beq.n	1001094c <__sflush_r+0x4c>
1001091e:	2300      	movs	r3, #0
10010920:	682e      	ldr	r6, [r5, #0]
10010922:	602b      	str	r3, [r5, #0]
10010924:	2380      	movs	r3, #128	; 0x80
10010926:	015b      	lsls	r3, r3, #5
10010928:	401a      	ands	r2, r3
1001092a:	d001      	beq.n	10010930 <__sflush_r+0x30>
1001092c:	6d60      	ldr	r0, [r4, #84]	; 0x54
1001092e:	e014      	b.n	1001095a <__sflush_r+0x5a>
10010930:	2301      	movs	r3, #1
10010932:	6a21      	ldr	r1, [r4, #32]
10010934:	0028      	movs	r0, r5
10010936:	47b8      	blx	r7
10010938:	1c43      	adds	r3, r0, #1
1001093a:	d10e      	bne.n	1001095a <__sflush_r+0x5a>
1001093c:	682b      	ldr	r3, [r5, #0]
1001093e:	2b00      	cmp	r3, #0
10010940:	d00b      	beq.n	1001095a <__sflush_r+0x5a>
10010942:	2b1d      	cmp	r3, #29
10010944:	d001      	beq.n	1001094a <__sflush_r+0x4a>
10010946:	2b16      	cmp	r3, #22
10010948:	d102      	bne.n	10010950 <__sflush_r+0x50>
1001094a:	602e      	str	r6, [r5, #0]
1001094c:	2000      	movs	r0, #0
1001094e:	e05a      	b.n	10010a06 <__sflush_r+0x106>
10010950:	2240      	movs	r2, #64	; 0x40
10010952:	89a3      	ldrh	r3, [r4, #12]
10010954:	4313      	orrs	r3, r2
10010956:	81a3      	strh	r3, [r4, #12]
10010958:	e055      	b.n	10010a06 <__sflush_r+0x106>
1001095a:	89a3      	ldrh	r3, [r4, #12]
1001095c:	075b      	lsls	r3, r3, #29
1001095e:	d506      	bpl.n	1001096e <__sflush_r+0x6e>
10010960:	6863      	ldr	r3, [r4, #4]
10010962:	1ac0      	subs	r0, r0, r3
10010964:	6b63      	ldr	r3, [r4, #52]	; 0x34
10010966:	2b00      	cmp	r3, #0
10010968:	d001      	beq.n	1001096e <__sflush_r+0x6e>
1001096a:	6c23      	ldr	r3, [r4, #64]	; 0x40
1001096c:	1ac0      	subs	r0, r0, r3
1001096e:	2300      	movs	r3, #0
10010970:	0002      	movs	r2, r0
10010972:	6a21      	ldr	r1, [r4, #32]
10010974:	0028      	movs	r0, r5
10010976:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
10010978:	47b8      	blx	r7
1001097a:	89a3      	ldrh	r3, [r4, #12]
1001097c:	1c42      	adds	r2, r0, #1
1001097e:	d106      	bne.n	1001098e <__sflush_r+0x8e>
10010980:	6829      	ldr	r1, [r5, #0]
10010982:	291d      	cmp	r1, #29
10010984:	d83a      	bhi.n	100109fc <__sflush_r+0xfc>
10010986:	4a20      	ldr	r2, [pc, #128]	; (10010a08 <__sflush_r+0x108>)
10010988:	40ca      	lsrs	r2, r1
1001098a:	07d2      	lsls	r2, r2, #31
1001098c:	d536      	bpl.n	100109fc <__sflush_r+0xfc>
1001098e:	2200      	movs	r2, #0
10010990:	6062      	str	r2, [r4, #4]
10010992:	6922      	ldr	r2, [r4, #16]
10010994:	6022      	str	r2, [r4, #0]
10010996:	04db      	lsls	r3, r3, #19
10010998:	d505      	bpl.n	100109a6 <__sflush_r+0xa6>
1001099a:	1c43      	adds	r3, r0, #1
1001099c:	d102      	bne.n	100109a4 <__sflush_r+0xa4>
1001099e:	682b      	ldr	r3, [r5, #0]
100109a0:	2b00      	cmp	r3, #0
100109a2:	d100      	bne.n	100109a6 <__sflush_r+0xa6>
100109a4:	6560      	str	r0, [r4, #84]	; 0x54
100109a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
100109a8:	602e      	str	r6, [r5, #0]
100109aa:	2900      	cmp	r1, #0
100109ac:	d0ce      	beq.n	1001094c <__sflush_r+0x4c>
100109ae:	0023      	movs	r3, r4
100109b0:	3344      	adds	r3, #68	; 0x44
100109b2:	4299      	cmp	r1, r3
100109b4:	d002      	beq.n	100109bc <__sflush_r+0xbc>
100109b6:	0028      	movs	r0, r5
100109b8:	f000 f998 	bl	10010cec <_free_r>
100109bc:	2000      	movs	r0, #0
100109be:	6360      	str	r0, [r4, #52]	; 0x34
100109c0:	e021      	b.n	10010a06 <__sflush_r+0x106>
100109c2:	690f      	ldr	r7, [r1, #16]
100109c4:	2f00      	cmp	r7, #0
100109c6:	d0c1      	beq.n	1001094c <__sflush_r+0x4c>
100109c8:	680b      	ldr	r3, [r1, #0]
100109ca:	600f      	str	r7, [r1, #0]
100109cc:	1bdb      	subs	r3, r3, r7
100109ce:	9301      	str	r3, [sp, #4]
100109d0:	2300      	movs	r3, #0
100109d2:	0792      	lsls	r2, r2, #30
100109d4:	d100      	bne.n	100109d8 <__sflush_r+0xd8>
100109d6:	694b      	ldr	r3, [r1, #20]
100109d8:	60a3      	str	r3, [r4, #8]
100109da:	e003      	b.n	100109e4 <__sflush_r+0xe4>
100109dc:	9b01      	ldr	r3, [sp, #4]
100109de:	183f      	adds	r7, r7, r0
100109e0:	1a1b      	subs	r3, r3, r0
100109e2:	9301      	str	r3, [sp, #4]
100109e4:	9b01      	ldr	r3, [sp, #4]
100109e6:	2b00      	cmp	r3, #0
100109e8:	ddb0      	ble.n	1001094c <__sflush_r+0x4c>
100109ea:	9b01      	ldr	r3, [sp, #4]
100109ec:	003a      	movs	r2, r7
100109ee:	6a21      	ldr	r1, [r4, #32]
100109f0:	0028      	movs	r0, r5
100109f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
100109f4:	47b0      	blx	r6
100109f6:	2800      	cmp	r0, #0
100109f8:	dcf0      	bgt.n	100109dc <__sflush_r+0xdc>
100109fa:	89a3      	ldrh	r3, [r4, #12]
100109fc:	2240      	movs	r2, #64	; 0x40
100109fe:	2001      	movs	r0, #1
10010a00:	4313      	orrs	r3, r2
10010a02:	81a3      	strh	r3, [r4, #12]
10010a04:	4240      	negs	r0, r0
10010a06:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10010a08:	20400001 	.word	0x20400001

10010a0c <_fflush_r>:
10010a0c:	690b      	ldr	r3, [r1, #16]
10010a0e:	b570      	push	{r4, r5, r6, lr}
10010a10:	0005      	movs	r5, r0
10010a12:	000c      	movs	r4, r1
10010a14:	2b00      	cmp	r3, #0
10010a16:	d101      	bne.n	10010a1c <_fflush_r+0x10>
10010a18:	2000      	movs	r0, #0
10010a1a:	e01c      	b.n	10010a56 <_fflush_r+0x4a>
10010a1c:	2800      	cmp	r0, #0
10010a1e:	d004      	beq.n	10010a2a <_fflush_r+0x1e>
10010a20:	6983      	ldr	r3, [r0, #24]
10010a22:	2b00      	cmp	r3, #0
10010a24:	d101      	bne.n	10010a2a <_fflush_r+0x1e>
10010a26:	f000 f85f 	bl	10010ae8 <__sinit>
10010a2a:	4b0b      	ldr	r3, [pc, #44]	; (10010a58 <_fflush_r+0x4c>)
10010a2c:	429c      	cmp	r4, r3
10010a2e:	d101      	bne.n	10010a34 <_fflush_r+0x28>
10010a30:	686c      	ldr	r4, [r5, #4]
10010a32:	e008      	b.n	10010a46 <_fflush_r+0x3a>
10010a34:	4b09      	ldr	r3, [pc, #36]	; (10010a5c <_fflush_r+0x50>)
10010a36:	429c      	cmp	r4, r3
10010a38:	d101      	bne.n	10010a3e <_fflush_r+0x32>
10010a3a:	68ac      	ldr	r4, [r5, #8]
10010a3c:	e003      	b.n	10010a46 <_fflush_r+0x3a>
10010a3e:	4b08      	ldr	r3, [pc, #32]	; (10010a60 <_fflush_r+0x54>)
10010a40:	429c      	cmp	r4, r3
10010a42:	d100      	bne.n	10010a46 <_fflush_r+0x3a>
10010a44:	68ec      	ldr	r4, [r5, #12]
10010a46:	220c      	movs	r2, #12
10010a48:	5ea3      	ldrsh	r3, [r4, r2]
10010a4a:	2b00      	cmp	r3, #0
10010a4c:	d0e4      	beq.n	10010a18 <_fflush_r+0xc>
10010a4e:	0021      	movs	r1, r4
10010a50:	0028      	movs	r0, r5
10010a52:	f7ff ff55 	bl	10010900 <__sflush_r>
10010a56:	bd70      	pop	{r4, r5, r6, pc}
10010a58:	100129fc 	.word	0x100129fc
10010a5c:	10012a1c 	.word	0x10012a1c
10010a60:	10012a3c 	.word	0x10012a3c

10010a64 <_cleanup_r>:
10010a64:	b510      	push	{r4, lr}
10010a66:	4902      	ldr	r1, [pc, #8]	; (10010a70 <_cleanup_r+0xc>)
10010a68:	f000 f8b0 	bl	10010bcc <_fwalk_reent>
10010a6c:	bd10      	pop	{r4, pc}
10010a6e:	46c0      	nop			; (mov r8, r8)
10010a70:	10010a0d 	.word	0x10010a0d

10010a74 <std.isra.0>:
10010a74:	2300      	movs	r3, #0
10010a76:	b510      	push	{r4, lr}
10010a78:	0004      	movs	r4, r0
10010a7a:	6003      	str	r3, [r0, #0]
10010a7c:	6043      	str	r3, [r0, #4]
10010a7e:	6083      	str	r3, [r0, #8]
10010a80:	8181      	strh	r1, [r0, #12]
10010a82:	6643      	str	r3, [r0, #100]	; 0x64
10010a84:	81c2      	strh	r2, [r0, #14]
10010a86:	6103      	str	r3, [r0, #16]
10010a88:	6143      	str	r3, [r0, #20]
10010a8a:	6183      	str	r3, [r0, #24]
10010a8c:	0019      	movs	r1, r3
10010a8e:	2208      	movs	r2, #8
10010a90:	305c      	adds	r0, #92	; 0x5c
10010a92:	f7ff fccf 	bl	10010434 <memset>
10010a96:	4b05      	ldr	r3, [pc, #20]	; (10010aac <std.isra.0+0x38>)
10010a98:	6224      	str	r4, [r4, #32]
10010a9a:	6263      	str	r3, [r4, #36]	; 0x24
10010a9c:	4b04      	ldr	r3, [pc, #16]	; (10010ab0 <std.isra.0+0x3c>)
10010a9e:	62a3      	str	r3, [r4, #40]	; 0x28
10010aa0:	4b04      	ldr	r3, [pc, #16]	; (10010ab4 <std.isra.0+0x40>)
10010aa2:	62e3      	str	r3, [r4, #44]	; 0x2c
10010aa4:	4b04      	ldr	r3, [pc, #16]	; (10010ab8 <std.isra.0+0x44>)
10010aa6:	6323      	str	r3, [r4, #48]	; 0x30
10010aa8:	bd10      	pop	{r4, pc}
10010aaa:	46c0      	nop			; (mov r8, r8)
10010aac:	1001145d 	.word	0x1001145d
10010ab0:	10011485 	.word	0x10011485
10010ab4:	100114bd 	.word	0x100114bd
10010ab8:	100114e9 	.word	0x100114e9

10010abc <__sfmoreglue>:
10010abc:	b570      	push	{r4, r5, r6, lr}
10010abe:	2568      	movs	r5, #104	; 0x68
10010ac0:	1e4b      	subs	r3, r1, #1
10010ac2:	435d      	muls	r5, r3
10010ac4:	000e      	movs	r6, r1
10010ac6:	0029      	movs	r1, r5
10010ac8:	3174      	adds	r1, #116	; 0x74
10010aca:	f000 f955 	bl	10010d78 <_malloc_r>
10010ace:	1e04      	subs	r4, r0, #0
10010ad0:	d008      	beq.n	10010ae4 <__sfmoreglue+0x28>
10010ad2:	2100      	movs	r1, #0
10010ad4:	002a      	movs	r2, r5
10010ad6:	6001      	str	r1, [r0, #0]
10010ad8:	6046      	str	r6, [r0, #4]
10010ada:	300c      	adds	r0, #12
10010adc:	60a0      	str	r0, [r4, #8]
10010ade:	3268      	adds	r2, #104	; 0x68
10010ae0:	f7ff fca8 	bl	10010434 <memset>
10010ae4:	0020      	movs	r0, r4
10010ae6:	bd70      	pop	{r4, r5, r6, pc}

10010ae8 <__sinit>:
10010ae8:	6983      	ldr	r3, [r0, #24]
10010aea:	b513      	push	{r0, r1, r4, lr}
10010aec:	0004      	movs	r4, r0
10010aee:	2b00      	cmp	r3, #0
10010af0:	d128      	bne.n	10010b44 <__sinit+0x5c>
10010af2:	6483      	str	r3, [r0, #72]	; 0x48
10010af4:	64c3      	str	r3, [r0, #76]	; 0x4c
10010af6:	6503      	str	r3, [r0, #80]	; 0x50
10010af8:	4b13      	ldr	r3, [pc, #76]	; (10010b48 <__sinit+0x60>)
10010afa:	4a14      	ldr	r2, [pc, #80]	; (10010b4c <__sinit+0x64>)
10010afc:	681b      	ldr	r3, [r3, #0]
10010afe:	6282      	str	r2, [r0, #40]	; 0x28
10010b00:	9301      	str	r3, [sp, #4]
10010b02:	4298      	cmp	r0, r3
10010b04:	d101      	bne.n	10010b0a <__sinit+0x22>
10010b06:	2301      	movs	r3, #1
10010b08:	6183      	str	r3, [r0, #24]
10010b0a:	0020      	movs	r0, r4
10010b0c:	f000 f820 	bl	10010b50 <__sfp>
10010b10:	6060      	str	r0, [r4, #4]
10010b12:	0020      	movs	r0, r4
10010b14:	f000 f81c 	bl	10010b50 <__sfp>
10010b18:	60a0      	str	r0, [r4, #8]
10010b1a:	0020      	movs	r0, r4
10010b1c:	f000 f818 	bl	10010b50 <__sfp>
10010b20:	2200      	movs	r2, #0
10010b22:	60e0      	str	r0, [r4, #12]
10010b24:	2104      	movs	r1, #4
10010b26:	6860      	ldr	r0, [r4, #4]
10010b28:	f7ff ffa4 	bl	10010a74 <std.isra.0>
10010b2c:	2201      	movs	r2, #1
10010b2e:	2109      	movs	r1, #9
10010b30:	68a0      	ldr	r0, [r4, #8]
10010b32:	f7ff ff9f 	bl	10010a74 <std.isra.0>
10010b36:	2202      	movs	r2, #2
10010b38:	2112      	movs	r1, #18
10010b3a:	68e0      	ldr	r0, [r4, #12]
10010b3c:	f7ff ff9a 	bl	10010a74 <std.isra.0>
10010b40:	2301      	movs	r3, #1
10010b42:	61a3      	str	r3, [r4, #24]
10010b44:	bd13      	pop	{r0, r1, r4, pc}
10010b46:	46c0      	nop			; (mov r8, r8)
10010b48:	100129f8 	.word	0x100129f8
10010b4c:	10010a65 	.word	0x10010a65

10010b50 <__sfp>:
10010b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10010b52:	4b1d      	ldr	r3, [pc, #116]	; (10010bc8 <__sfp+0x78>)
10010b54:	0006      	movs	r6, r0
10010b56:	681d      	ldr	r5, [r3, #0]
10010b58:	69ab      	ldr	r3, [r5, #24]
10010b5a:	2b00      	cmp	r3, #0
10010b5c:	d102      	bne.n	10010b64 <__sfp+0x14>
10010b5e:	0028      	movs	r0, r5
10010b60:	f7ff ffc2 	bl	10010ae8 <__sinit>
10010b64:	3548      	adds	r5, #72	; 0x48
10010b66:	68ac      	ldr	r4, [r5, #8]
10010b68:	686b      	ldr	r3, [r5, #4]
10010b6a:	3b01      	subs	r3, #1
10010b6c:	d405      	bmi.n	10010b7a <__sfp+0x2a>
10010b6e:	220c      	movs	r2, #12
10010b70:	5ea7      	ldrsh	r7, [r4, r2]
10010b72:	2f00      	cmp	r7, #0
10010b74:	d010      	beq.n	10010b98 <__sfp+0x48>
10010b76:	3468      	adds	r4, #104	; 0x68
10010b78:	e7f7      	b.n	10010b6a <__sfp+0x1a>
10010b7a:	682b      	ldr	r3, [r5, #0]
10010b7c:	2b00      	cmp	r3, #0
10010b7e:	d001      	beq.n	10010b84 <__sfp+0x34>
10010b80:	682d      	ldr	r5, [r5, #0]
10010b82:	e7f0      	b.n	10010b66 <__sfp+0x16>
10010b84:	2104      	movs	r1, #4
10010b86:	0030      	movs	r0, r6
10010b88:	f7ff ff98 	bl	10010abc <__sfmoreglue>
10010b8c:	6028      	str	r0, [r5, #0]
10010b8e:	2800      	cmp	r0, #0
10010b90:	d1f6      	bne.n	10010b80 <__sfp+0x30>
10010b92:	230c      	movs	r3, #12
10010b94:	6033      	str	r3, [r6, #0]
10010b96:	e016      	b.n	10010bc6 <__sfp+0x76>
10010b98:	2301      	movs	r3, #1
10010b9a:	0020      	movs	r0, r4
10010b9c:	425b      	negs	r3, r3
10010b9e:	81e3      	strh	r3, [r4, #14]
10010ba0:	3302      	adds	r3, #2
10010ba2:	81a3      	strh	r3, [r4, #12]
10010ba4:	6667      	str	r7, [r4, #100]	; 0x64
10010ba6:	6027      	str	r7, [r4, #0]
10010ba8:	60a7      	str	r7, [r4, #8]
10010baa:	6067      	str	r7, [r4, #4]
10010bac:	6127      	str	r7, [r4, #16]
10010bae:	6167      	str	r7, [r4, #20]
10010bb0:	61a7      	str	r7, [r4, #24]
10010bb2:	305c      	adds	r0, #92	; 0x5c
10010bb4:	2208      	movs	r2, #8
10010bb6:	0039      	movs	r1, r7
10010bb8:	f7ff fc3c 	bl	10010434 <memset>
10010bbc:	0020      	movs	r0, r4
10010bbe:	6367      	str	r7, [r4, #52]	; 0x34
10010bc0:	63a7      	str	r7, [r4, #56]	; 0x38
10010bc2:	64a7      	str	r7, [r4, #72]	; 0x48
10010bc4:	64e7      	str	r7, [r4, #76]	; 0x4c
10010bc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10010bc8:	100129f8 	.word	0x100129f8

10010bcc <_fwalk_reent>:
10010bcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010bce:	0004      	movs	r4, r0
10010bd0:	0007      	movs	r7, r0
10010bd2:	2600      	movs	r6, #0
10010bd4:	9101      	str	r1, [sp, #4]
10010bd6:	3448      	adds	r4, #72	; 0x48
10010bd8:	2c00      	cmp	r4, #0
10010bda:	d016      	beq.n	10010c0a <_fwalk_reent+0x3e>
10010bdc:	6863      	ldr	r3, [r4, #4]
10010bde:	68a5      	ldr	r5, [r4, #8]
10010be0:	9300      	str	r3, [sp, #0]
10010be2:	9b00      	ldr	r3, [sp, #0]
10010be4:	3b01      	subs	r3, #1
10010be6:	9300      	str	r3, [sp, #0]
10010be8:	d40d      	bmi.n	10010c06 <_fwalk_reent+0x3a>
10010bea:	89ab      	ldrh	r3, [r5, #12]
10010bec:	2b01      	cmp	r3, #1
10010bee:	d908      	bls.n	10010c02 <_fwalk_reent+0x36>
10010bf0:	220e      	movs	r2, #14
10010bf2:	5eab      	ldrsh	r3, [r5, r2]
10010bf4:	3301      	adds	r3, #1
10010bf6:	d004      	beq.n	10010c02 <_fwalk_reent+0x36>
10010bf8:	0029      	movs	r1, r5
10010bfa:	0038      	movs	r0, r7
10010bfc:	9b01      	ldr	r3, [sp, #4]
10010bfe:	4798      	blx	r3
10010c00:	4306      	orrs	r6, r0
10010c02:	3568      	adds	r5, #104	; 0x68
10010c04:	e7ed      	b.n	10010be2 <_fwalk_reent+0x16>
10010c06:	6824      	ldr	r4, [r4, #0]
10010c08:	e7e6      	b.n	10010bd8 <_fwalk_reent+0xc>
10010c0a:	0030      	movs	r0, r6
10010c0c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

10010c10 <__swhatbuf_r>:
10010c10:	b570      	push	{r4, r5, r6, lr}
10010c12:	000e      	movs	r6, r1
10010c14:	001d      	movs	r5, r3
10010c16:	230e      	movs	r3, #14
10010c18:	5ec9      	ldrsh	r1, [r1, r3]
10010c1a:	b090      	sub	sp, #64	; 0x40
10010c1c:	0014      	movs	r4, r2
10010c1e:	2900      	cmp	r1, #0
10010c20:	da06      	bge.n	10010c30 <__swhatbuf_r+0x20>
10010c22:	2300      	movs	r3, #0
10010c24:	602b      	str	r3, [r5, #0]
10010c26:	89b3      	ldrh	r3, [r6, #12]
10010c28:	061b      	lsls	r3, r3, #24
10010c2a:	d50f      	bpl.n	10010c4c <__swhatbuf_r+0x3c>
10010c2c:	2340      	movs	r3, #64	; 0x40
10010c2e:	e00f      	b.n	10010c50 <__swhatbuf_r+0x40>
10010c30:	aa01      	add	r2, sp, #4
10010c32:	f000 fc85 	bl	10011540 <_fstat_r>
10010c36:	2800      	cmp	r0, #0
10010c38:	dbf3      	blt.n	10010c22 <__swhatbuf_r+0x12>
10010c3a:	23f0      	movs	r3, #240	; 0xf0
10010c3c:	9a02      	ldr	r2, [sp, #8]
10010c3e:	021b      	lsls	r3, r3, #8
10010c40:	4013      	ands	r3, r2
10010c42:	4a05      	ldr	r2, [pc, #20]	; (10010c58 <__swhatbuf_r+0x48>)
10010c44:	189b      	adds	r3, r3, r2
10010c46:	425a      	negs	r2, r3
10010c48:	4153      	adcs	r3, r2
10010c4a:	602b      	str	r3, [r5, #0]
10010c4c:	2380      	movs	r3, #128	; 0x80
10010c4e:	00db      	lsls	r3, r3, #3
10010c50:	2000      	movs	r0, #0
10010c52:	6023      	str	r3, [r4, #0]
10010c54:	b010      	add	sp, #64	; 0x40
10010c56:	bd70      	pop	{r4, r5, r6, pc}
10010c58:	ffffe000 	.word	0xffffe000

10010c5c <__smakebuf_r>:
10010c5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010c5e:	2602      	movs	r6, #2
10010c60:	898b      	ldrh	r3, [r1, #12]
10010c62:	0005      	movs	r5, r0
10010c64:	000c      	movs	r4, r1
10010c66:	4233      	tst	r3, r6
10010c68:	d110      	bne.n	10010c8c <__smakebuf_r+0x30>
10010c6a:	ab01      	add	r3, sp, #4
10010c6c:	466a      	mov	r2, sp
10010c6e:	f7ff ffcf 	bl	10010c10 <__swhatbuf_r>
10010c72:	9900      	ldr	r1, [sp, #0]
10010c74:	0007      	movs	r7, r0
10010c76:	0028      	movs	r0, r5
10010c78:	f000 f87e 	bl	10010d78 <_malloc_r>
10010c7c:	2800      	cmp	r0, #0
10010c7e:	d10c      	bne.n	10010c9a <__smakebuf_r+0x3e>
10010c80:	220c      	movs	r2, #12
10010c82:	5ea3      	ldrsh	r3, [r4, r2]
10010c84:	059a      	lsls	r2, r3, #22
10010c86:	d423      	bmi.n	10010cd0 <__smakebuf_r+0x74>
10010c88:	4333      	orrs	r3, r6
10010c8a:	81a3      	strh	r3, [r4, #12]
10010c8c:	0023      	movs	r3, r4
10010c8e:	3347      	adds	r3, #71	; 0x47
10010c90:	6023      	str	r3, [r4, #0]
10010c92:	6123      	str	r3, [r4, #16]
10010c94:	2301      	movs	r3, #1
10010c96:	6163      	str	r3, [r4, #20]
10010c98:	e01a      	b.n	10010cd0 <__smakebuf_r+0x74>
10010c9a:	2280      	movs	r2, #128	; 0x80
10010c9c:	4b0d      	ldr	r3, [pc, #52]	; (10010cd4 <__smakebuf_r+0x78>)
10010c9e:	62ab      	str	r3, [r5, #40]	; 0x28
10010ca0:	89a3      	ldrh	r3, [r4, #12]
10010ca2:	6020      	str	r0, [r4, #0]
10010ca4:	4313      	orrs	r3, r2
10010ca6:	81a3      	strh	r3, [r4, #12]
10010ca8:	9b00      	ldr	r3, [sp, #0]
10010caa:	6120      	str	r0, [r4, #16]
10010cac:	6163      	str	r3, [r4, #20]
10010cae:	9b01      	ldr	r3, [sp, #4]
10010cb0:	2b00      	cmp	r3, #0
10010cb2:	d00a      	beq.n	10010cca <__smakebuf_r+0x6e>
10010cb4:	230e      	movs	r3, #14
10010cb6:	5ee1      	ldrsh	r1, [r4, r3]
10010cb8:	0028      	movs	r0, r5
10010cba:	f000 fc53 	bl	10011564 <_isatty_r>
10010cbe:	2800      	cmp	r0, #0
10010cc0:	d003      	beq.n	10010cca <__smakebuf_r+0x6e>
10010cc2:	2201      	movs	r2, #1
10010cc4:	89a3      	ldrh	r3, [r4, #12]
10010cc6:	4313      	orrs	r3, r2
10010cc8:	81a3      	strh	r3, [r4, #12]
10010cca:	89a3      	ldrh	r3, [r4, #12]
10010ccc:	431f      	orrs	r7, r3
10010cce:	81a7      	strh	r7, [r4, #12]
10010cd0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10010cd2:	46c0      	nop			; (mov r8, r8)
10010cd4:	10010a65 	.word	0x10010a65

10010cd8 <malloc>:
10010cd8:	b510      	push	{r4, lr}
10010cda:	4b03      	ldr	r3, [pc, #12]	; (10010ce8 <malloc+0x10>)
10010cdc:	0001      	movs	r1, r0
10010cde:	6818      	ldr	r0, [r3, #0]
10010ce0:	f000 f84a 	bl	10010d78 <_malloc_r>
10010ce4:	bd10      	pop	{r4, pc}
10010ce6:	46c0      	nop			; (mov r8, r8)
10010ce8:	10012b3c 	.word	0x10012b3c

10010cec <_free_r>:
10010cec:	b530      	push	{r4, r5, lr}
10010cee:	2900      	cmp	r1, #0
10010cf0:	d03e      	beq.n	10010d70 <_free_r+0x84>
10010cf2:	3904      	subs	r1, #4
10010cf4:	680b      	ldr	r3, [r1, #0]
10010cf6:	2b00      	cmp	r3, #0
10010cf8:	da00      	bge.n	10010cfc <_free_r+0x10>
10010cfa:	18c9      	adds	r1, r1, r3
10010cfc:	4a1d      	ldr	r2, [pc, #116]	; (10010d74 <_free_r+0x88>)
10010cfe:	6813      	ldr	r3, [r2, #0]
10010d00:	0014      	movs	r4, r2
10010d02:	2b00      	cmp	r3, #0
10010d04:	d102      	bne.n	10010d0c <_free_r+0x20>
10010d06:	604b      	str	r3, [r1, #4]
10010d08:	6011      	str	r1, [r2, #0]
10010d0a:	e031      	b.n	10010d70 <_free_r+0x84>
10010d0c:	428b      	cmp	r3, r1
10010d0e:	d90d      	bls.n	10010d2c <_free_r+0x40>
10010d10:	680a      	ldr	r2, [r1, #0]
10010d12:	1888      	adds	r0, r1, r2
10010d14:	4283      	cmp	r3, r0
10010d16:	d103      	bne.n	10010d20 <_free_r+0x34>
10010d18:	6818      	ldr	r0, [r3, #0]
10010d1a:	685b      	ldr	r3, [r3, #4]
10010d1c:	1882      	adds	r2, r0, r2
10010d1e:	600a      	str	r2, [r1, #0]
10010d20:	604b      	str	r3, [r1, #4]
10010d22:	6021      	str	r1, [r4, #0]
10010d24:	e024      	b.n	10010d70 <_free_r+0x84>
10010d26:	428a      	cmp	r2, r1
10010d28:	d803      	bhi.n	10010d32 <_free_r+0x46>
10010d2a:	0013      	movs	r3, r2
10010d2c:	685a      	ldr	r2, [r3, #4]
10010d2e:	2a00      	cmp	r2, #0
10010d30:	d1f9      	bne.n	10010d26 <_free_r+0x3a>
10010d32:	681d      	ldr	r5, [r3, #0]
10010d34:	195c      	adds	r4, r3, r5
10010d36:	428c      	cmp	r4, r1
10010d38:	d10b      	bne.n	10010d52 <_free_r+0x66>
10010d3a:	6809      	ldr	r1, [r1, #0]
10010d3c:	1869      	adds	r1, r5, r1
10010d3e:	1858      	adds	r0, r3, r1
10010d40:	6019      	str	r1, [r3, #0]
10010d42:	4282      	cmp	r2, r0
10010d44:	d114      	bne.n	10010d70 <_free_r+0x84>
10010d46:	6810      	ldr	r0, [r2, #0]
10010d48:	6852      	ldr	r2, [r2, #4]
10010d4a:	1841      	adds	r1, r0, r1
10010d4c:	6019      	str	r1, [r3, #0]
10010d4e:	605a      	str	r2, [r3, #4]
10010d50:	e00e      	b.n	10010d70 <_free_r+0x84>
10010d52:	428c      	cmp	r4, r1
10010d54:	d902      	bls.n	10010d5c <_free_r+0x70>
10010d56:	230c      	movs	r3, #12
10010d58:	6003      	str	r3, [r0, #0]
10010d5a:	e009      	b.n	10010d70 <_free_r+0x84>
10010d5c:	6808      	ldr	r0, [r1, #0]
10010d5e:	180c      	adds	r4, r1, r0
10010d60:	42a2      	cmp	r2, r4
10010d62:	d103      	bne.n	10010d6c <_free_r+0x80>
10010d64:	6814      	ldr	r4, [r2, #0]
10010d66:	6852      	ldr	r2, [r2, #4]
10010d68:	1820      	adds	r0, r4, r0
10010d6a:	6008      	str	r0, [r1, #0]
10010d6c:	604a      	str	r2, [r1, #4]
10010d6e:	6059      	str	r1, [r3, #4]
10010d70:	bd30      	pop	{r4, r5, pc}
10010d72:	46c0      	nop			; (mov r8, r8)
10010d74:	10014618 	.word	0x10014618

10010d78 <_malloc_r>:
10010d78:	2303      	movs	r3, #3
10010d7a:	b570      	push	{r4, r5, r6, lr}
10010d7c:	1ccd      	adds	r5, r1, #3
10010d7e:	439d      	bics	r5, r3
10010d80:	3508      	adds	r5, #8
10010d82:	0006      	movs	r6, r0
10010d84:	2d0c      	cmp	r5, #12
10010d86:	d201      	bcs.n	10010d8c <_malloc_r+0x14>
10010d88:	250c      	movs	r5, #12
10010d8a:	e005      	b.n	10010d98 <_malloc_r+0x20>
10010d8c:	2d00      	cmp	r5, #0
10010d8e:	da03      	bge.n	10010d98 <_malloc_r+0x20>
10010d90:	230c      	movs	r3, #12
10010d92:	2000      	movs	r0, #0
10010d94:	6033      	str	r3, [r6, #0]
10010d96:	e040      	b.n	10010e1a <_malloc_r+0xa2>
10010d98:	42a9      	cmp	r1, r5
10010d9a:	d8f9      	bhi.n	10010d90 <_malloc_r+0x18>
10010d9c:	4b1f      	ldr	r3, [pc, #124]	; (10010e1c <_malloc_r+0xa4>)
10010d9e:	681c      	ldr	r4, [r3, #0]
10010da0:	001a      	movs	r2, r3
10010da2:	0021      	movs	r1, r4
10010da4:	2900      	cmp	r1, #0
10010da6:	d013      	beq.n	10010dd0 <_malloc_r+0x58>
10010da8:	680b      	ldr	r3, [r1, #0]
10010daa:	1b5b      	subs	r3, r3, r5
10010dac:	d40d      	bmi.n	10010dca <_malloc_r+0x52>
10010dae:	2b0b      	cmp	r3, #11
10010db0:	d902      	bls.n	10010db8 <_malloc_r+0x40>
10010db2:	600b      	str	r3, [r1, #0]
10010db4:	18cc      	adds	r4, r1, r3
10010db6:	e01e      	b.n	10010df6 <_malloc_r+0x7e>
10010db8:	428c      	cmp	r4, r1
10010dba:	d102      	bne.n	10010dc2 <_malloc_r+0x4a>
10010dbc:	6863      	ldr	r3, [r4, #4]
10010dbe:	6013      	str	r3, [r2, #0]
10010dc0:	e01a      	b.n	10010df8 <_malloc_r+0x80>
10010dc2:	684b      	ldr	r3, [r1, #4]
10010dc4:	6063      	str	r3, [r4, #4]
10010dc6:	000c      	movs	r4, r1
10010dc8:	e016      	b.n	10010df8 <_malloc_r+0x80>
10010dca:	000c      	movs	r4, r1
10010dcc:	6849      	ldr	r1, [r1, #4]
10010dce:	e7e9      	b.n	10010da4 <_malloc_r+0x2c>
10010dd0:	4c13      	ldr	r4, [pc, #76]	; (10010e20 <_malloc_r+0xa8>)
10010dd2:	6823      	ldr	r3, [r4, #0]
10010dd4:	2b00      	cmp	r3, #0
10010dd6:	d103      	bne.n	10010de0 <_malloc_r+0x68>
10010dd8:	0030      	movs	r0, r6
10010dda:	f000 fb2d 	bl	10011438 <_sbrk_r>
10010dde:	6020      	str	r0, [r4, #0]
10010de0:	0029      	movs	r1, r5
10010de2:	0030      	movs	r0, r6
10010de4:	f000 fb28 	bl	10011438 <_sbrk_r>
10010de8:	1c43      	adds	r3, r0, #1
10010dea:	d0d1      	beq.n	10010d90 <_malloc_r+0x18>
10010dec:	2303      	movs	r3, #3
10010dee:	1cc4      	adds	r4, r0, #3
10010df0:	439c      	bics	r4, r3
10010df2:	42a0      	cmp	r0, r4
10010df4:	d10a      	bne.n	10010e0c <_malloc_r+0x94>
10010df6:	6025      	str	r5, [r4, #0]
10010df8:	0020      	movs	r0, r4
10010dfa:	2207      	movs	r2, #7
10010dfc:	300b      	adds	r0, #11
10010dfe:	1d23      	adds	r3, r4, #4
10010e00:	4390      	bics	r0, r2
10010e02:	1ac3      	subs	r3, r0, r3
10010e04:	d009      	beq.n	10010e1a <_malloc_r+0xa2>
10010e06:	425a      	negs	r2, r3
10010e08:	50e2      	str	r2, [r4, r3]
10010e0a:	e006      	b.n	10010e1a <_malloc_r+0xa2>
10010e0c:	1a21      	subs	r1, r4, r0
10010e0e:	0030      	movs	r0, r6
10010e10:	f000 fb12 	bl	10011438 <_sbrk_r>
10010e14:	1c43      	adds	r3, r0, #1
10010e16:	d1ee      	bne.n	10010df6 <_malloc_r+0x7e>
10010e18:	e7ba      	b.n	10010d90 <_malloc_r+0x18>
10010e1a:	bd70      	pop	{r4, r5, r6, pc}
10010e1c:	10014618 	.word	0x10014618
10010e20:	10014614 	.word	0x10014614

10010e24 <__sfputc_r>:
10010e24:	6893      	ldr	r3, [r2, #8]
10010e26:	b510      	push	{r4, lr}
10010e28:	3b01      	subs	r3, #1
10010e2a:	6093      	str	r3, [r2, #8]
10010e2c:	2b00      	cmp	r3, #0
10010e2e:	da05      	bge.n	10010e3c <__sfputc_r+0x18>
10010e30:	6994      	ldr	r4, [r2, #24]
10010e32:	42a3      	cmp	r3, r4
10010e34:	db08      	blt.n	10010e48 <__sfputc_r+0x24>
10010e36:	b2cb      	uxtb	r3, r1
10010e38:	2b0a      	cmp	r3, #10
10010e3a:	d005      	beq.n	10010e48 <__sfputc_r+0x24>
10010e3c:	6813      	ldr	r3, [r2, #0]
10010e3e:	1c58      	adds	r0, r3, #1
10010e40:	6010      	str	r0, [r2, #0]
10010e42:	7019      	strb	r1, [r3, #0]
10010e44:	b2c8      	uxtb	r0, r1
10010e46:	e001      	b.n	10010e4c <__sfputc_r+0x28>
10010e48:	f7ff fc8c 	bl	10010764 <__swbuf_r>
10010e4c:	bd10      	pop	{r4, pc}

10010e4e <__sfputs_r>:
10010e4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10010e50:	0006      	movs	r6, r0
10010e52:	000f      	movs	r7, r1
10010e54:	0014      	movs	r4, r2
10010e56:	18d5      	adds	r5, r2, r3
10010e58:	42ac      	cmp	r4, r5
10010e5a:	d008      	beq.n	10010e6e <__sfputs_r+0x20>
10010e5c:	7821      	ldrb	r1, [r4, #0]
10010e5e:	003a      	movs	r2, r7
10010e60:	0030      	movs	r0, r6
10010e62:	f7ff ffdf 	bl	10010e24 <__sfputc_r>
10010e66:	3401      	adds	r4, #1
10010e68:	1c43      	adds	r3, r0, #1
10010e6a:	d1f5      	bne.n	10010e58 <__sfputs_r+0xa>
10010e6c:	e000      	b.n	10010e70 <__sfputs_r+0x22>
10010e6e:	2000      	movs	r0, #0
10010e70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

10010e74 <_vfiprintf_r>:
10010e74:	b5f0      	push	{r4, r5, r6, r7, lr}
10010e76:	b09f      	sub	sp, #124	; 0x7c
10010e78:	0006      	movs	r6, r0
10010e7a:	000f      	movs	r7, r1
10010e7c:	9202      	str	r2, [sp, #8]
10010e7e:	9305      	str	r3, [sp, #20]
10010e80:	2800      	cmp	r0, #0
10010e82:	d004      	beq.n	10010e8e <_vfiprintf_r+0x1a>
10010e84:	6983      	ldr	r3, [r0, #24]
10010e86:	2b00      	cmp	r3, #0
10010e88:	d101      	bne.n	10010e8e <_vfiprintf_r+0x1a>
10010e8a:	f7ff fe2d 	bl	10010ae8 <__sinit>
10010e8e:	4b7f      	ldr	r3, [pc, #508]	; (1001108c <_vfiprintf_r+0x218>)
10010e90:	429f      	cmp	r7, r3
10010e92:	d101      	bne.n	10010e98 <_vfiprintf_r+0x24>
10010e94:	6877      	ldr	r7, [r6, #4]
10010e96:	e008      	b.n	10010eaa <_vfiprintf_r+0x36>
10010e98:	4b7d      	ldr	r3, [pc, #500]	; (10011090 <_vfiprintf_r+0x21c>)
10010e9a:	429f      	cmp	r7, r3
10010e9c:	d101      	bne.n	10010ea2 <_vfiprintf_r+0x2e>
10010e9e:	68b7      	ldr	r7, [r6, #8]
10010ea0:	e003      	b.n	10010eaa <_vfiprintf_r+0x36>
10010ea2:	4b7c      	ldr	r3, [pc, #496]	; (10011094 <_vfiprintf_r+0x220>)
10010ea4:	429f      	cmp	r7, r3
10010ea6:	d100      	bne.n	10010eaa <_vfiprintf_r+0x36>
10010ea8:	68f7      	ldr	r7, [r6, #12]
10010eaa:	89bb      	ldrh	r3, [r7, #12]
10010eac:	071b      	lsls	r3, r3, #28
10010eae:	d50a      	bpl.n	10010ec6 <_vfiprintf_r+0x52>
10010eb0:	693b      	ldr	r3, [r7, #16]
10010eb2:	2b00      	cmp	r3, #0
10010eb4:	d007      	beq.n	10010ec6 <_vfiprintf_r+0x52>
10010eb6:	2300      	movs	r3, #0
10010eb8:	ad06      	add	r5, sp, #24
10010eba:	616b      	str	r3, [r5, #20]
10010ebc:	3320      	adds	r3, #32
10010ebe:	766b      	strb	r3, [r5, #25]
10010ec0:	3310      	adds	r3, #16
10010ec2:	76ab      	strb	r3, [r5, #26]
10010ec4:	e03d      	b.n	10010f42 <_vfiprintf_r+0xce>
10010ec6:	0039      	movs	r1, r7
10010ec8:	0030      	movs	r0, r6
10010eca:	f7ff fca3 	bl	10010814 <__swsetup_r>
10010ece:	2800      	cmp	r0, #0
10010ed0:	d0f1      	beq.n	10010eb6 <_vfiprintf_r+0x42>
10010ed2:	2001      	movs	r0, #1
10010ed4:	4240      	negs	r0, r0
10010ed6:	e0d6      	b.n	10011086 <_vfiprintf_r+0x212>
10010ed8:	9a05      	ldr	r2, [sp, #20]
10010eda:	1d11      	adds	r1, r2, #4
10010edc:	6812      	ldr	r2, [r2, #0]
10010ede:	9105      	str	r1, [sp, #20]
10010ee0:	2a00      	cmp	r2, #0
10010ee2:	da00      	bge.n	10010ee6 <_vfiprintf_r+0x72>
10010ee4:	e07f      	b.n	10010fe6 <_vfiprintf_r+0x172>
10010ee6:	9209      	str	r2, [sp, #36]	; 0x24
10010ee8:	3401      	adds	r4, #1
10010eea:	7823      	ldrb	r3, [r4, #0]
10010eec:	2b2e      	cmp	r3, #46	; 0x2e
10010eee:	d100      	bne.n	10010ef2 <_vfiprintf_r+0x7e>
10010ef0:	e08d      	b.n	1001100e <_vfiprintf_r+0x19a>
10010ef2:	7821      	ldrb	r1, [r4, #0]
10010ef4:	2203      	movs	r2, #3
10010ef6:	4868      	ldr	r0, [pc, #416]	; (10011098 <_vfiprintf_r+0x224>)
10010ef8:	f000 fb5a 	bl	100115b0 <memchr>
10010efc:	2800      	cmp	r0, #0
10010efe:	d007      	beq.n	10010f10 <_vfiprintf_r+0x9c>
10010f00:	4b65      	ldr	r3, [pc, #404]	; (10011098 <_vfiprintf_r+0x224>)
10010f02:	682a      	ldr	r2, [r5, #0]
10010f04:	1ac0      	subs	r0, r0, r3
10010f06:	2340      	movs	r3, #64	; 0x40
10010f08:	4083      	lsls	r3, r0
10010f0a:	4313      	orrs	r3, r2
10010f0c:	602b      	str	r3, [r5, #0]
10010f0e:	3401      	adds	r4, #1
10010f10:	7821      	ldrb	r1, [r4, #0]
10010f12:	1c63      	adds	r3, r4, #1
10010f14:	2206      	movs	r2, #6
10010f16:	4861      	ldr	r0, [pc, #388]	; (1001109c <_vfiprintf_r+0x228>)
10010f18:	9302      	str	r3, [sp, #8]
10010f1a:	7629      	strb	r1, [r5, #24]
10010f1c:	f000 fb48 	bl	100115b0 <memchr>
10010f20:	2800      	cmp	r0, #0
10010f22:	d100      	bne.n	10010f26 <_vfiprintf_r+0xb2>
10010f24:	e09d      	b.n	10011062 <_vfiprintf_r+0x1ee>
10010f26:	4b5e      	ldr	r3, [pc, #376]	; (100110a0 <_vfiprintf_r+0x22c>)
10010f28:	2b00      	cmp	r3, #0
10010f2a:	d000      	beq.n	10010f2e <_vfiprintf_r+0xba>
10010f2c:	e090      	b.n	10011050 <_vfiprintf_r+0x1dc>
10010f2e:	2207      	movs	r2, #7
10010f30:	9b05      	ldr	r3, [sp, #20]
10010f32:	3307      	adds	r3, #7
10010f34:	4393      	bics	r3, r2
10010f36:	3308      	adds	r3, #8
10010f38:	9305      	str	r3, [sp, #20]
10010f3a:	696b      	ldr	r3, [r5, #20]
10010f3c:	9a03      	ldr	r2, [sp, #12]
10010f3e:	189b      	adds	r3, r3, r2
10010f40:	616b      	str	r3, [r5, #20]
10010f42:	9c02      	ldr	r4, [sp, #8]
10010f44:	7823      	ldrb	r3, [r4, #0]
10010f46:	2b00      	cmp	r3, #0
10010f48:	d104      	bne.n	10010f54 <_vfiprintf_r+0xe0>
10010f4a:	9b02      	ldr	r3, [sp, #8]
10010f4c:	1ae3      	subs	r3, r4, r3
10010f4e:	9304      	str	r3, [sp, #16]
10010f50:	d012      	beq.n	10010f78 <_vfiprintf_r+0x104>
10010f52:	e003      	b.n	10010f5c <_vfiprintf_r+0xe8>
10010f54:	2b25      	cmp	r3, #37	; 0x25
10010f56:	d0f8      	beq.n	10010f4a <_vfiprintf_r+0xd6>
10010f58:	3401      	adds	r4, #1
10010f5a:	e7f3      	b.n	10010f44 <_vfiprintf_r+0xd0>
10010f5c:	9b04      	ldr	r3, [sp, #16]
10010f5e:	9a02      	ldr	r2, [sp, #8]
10010f60:	0039      	movs	r1, r7
10010f62:	0030      	movs	r0, r6
10010f64:	f7ff ff73 	bl	10010e4e <__sfputs_r>
10010f68:	1c43      	adds	r3, r0, #1
10010f6a:	d100      	bne.n	10010f6e <_vfiprintf_r+0xfa>
10010f6c:	e086      	b.n	1001107c <_vfiprintf_r+0x208>
10010f6e:	696a      	ldr	r2, [r5, #20]
10010f70:	9b04      	ldr	r3, [sp, #16]
10010f72:	4694      	mov	ip, r2
10010f74:	4463      	add	r3, ip
10010f76:	616b      	str	r3, [r5, #20]
10010f78:	7823      	ldrb	r3, [r4, #0]
10010f7a:	2b00      	cmp	r3, #0
10010f7c:	d07e      	beq.n	1001107c <_vfiprintf_r+0x208>
10010f7e:	2201      	movs	r2, #1
10010f80:	2300      	movs	r3, #0
10010f82:	4252      	negs	r2, r2
10010f84:	606a      	str	r2, [r5, #4]
10010f86:	a902      	add	r1, sp, #8
10010f88:	3254      	adds	r2, #84	; 0x54
10010f8a:	1852      	adds	r2, r2, r1
10010f8c:	3401      	adds	r4, #1
10010f8e:	602b      	str	r3, [r5, #0]
10010f90:	60eb      	str	r3, [r5, #12]
10010f92:	60ab      	str	r3, [r5, #8]
10010f94:	7013      	strb	r3, [r2, #0]
10010f96:	65ab      	str	r3, [r5, #88]	; 0x58
10010f98:	7821      	ldrb	r1, [r4, #0]
10010f9a:	2205      	movs	r2, #5
10010f9c:	4841      	ldr	r0, [pc, #260]	; (100110a4 <_vfiprintf_r+0x230>)
10010f9e:	f000 fb07 	bl	100115b0 <memchr>
10010fa2:	2800      	cmp	r0, #0
10010fa4:	d008      	beq.n	10010fb8 <_vfiprintf_r+0x144>
10010fa6:	4b3f      	ldr	r3, [pc, #252]	; (100110a4 <_vfiprintf_r+0x230>)
10010fa8:	682a      	ldr	r2, [r5, #0]
10010faa:	1ac0      	subs	r0, r0, r3
10010fac:	2301      	movs	r3, #1
10010fae:	4083      	lsls	r3, r0
10010fb0:	4313      	orrs	r3, r2
10010fb2:	602b      	str	r3, [r5, #0]
10010fb4:	3401      	adds	r4, #1
10010fb6:	e7ef      	b.n	10010f98 <_vfiprintf_r+0x124>
10010fb8:	682b      	ldr	r3, [r5, #0]
10010fba:	06da      	lsls	r2, r3, #27
10010fbc:	d504      	bpl.n	10010fc8 <_vfiprintf_r+0x154>
10010fbe:	2253      	movs	r2, #83	; 0x53
10010fc0:	2120      	movs	r1, #32
10010fc2:	a802      	add	r0, sp, #8
10010fc4:	1812      	adds	r2, r2, r0
10010fc6:	7011      	strb	r1, [r2, #0]
10010fc8:	071a      	lsls	r2, r3, #28
10010fca:	d504      	bpl.n	10010fd6 <_vfiprintf_r+0x162>
10010fcc:	2253      	movs	r2, #83	; 0x53
10010fce:	212b      	movs	r1, #43	; 0x2b
10010fd0:	a802      	add	r0, sp, #8
10010fd2:	1812      	adds	r2, r2, r0
10010fd4:	7011      	strb	r1, [r2, #0]
10010fd6:	7822      	ldrb	r2, [r4, #0]
10010fd8:	2a2a      	cmp	r2, #42	; 0x2a
10010fda:	d100      	bne.n	10010fde <_vfiprintf_r+0x16a>
10010fdc:	e77c      	b.n	10010ed8 <_vfiprintf_r+0x64>
10010fde:	9b09      	ldr	r3, [sp, #36]	; 0x24
10010fe0:	2000      	movs	r0, #0
10010fe2:	210a      	movs	r1, #10
10010fe4:	e005      	b.n	10010ff2 <_vfiprintf_r+0x17e>
10010fe6:	4252      	negs	r2, r2
10010fe8:	60ea      	str	r2, [r5, #12]
10010fea:	2202      	movs	r2, #2
10010fec:	4313      	orrs	r3, r2
10010fee:	602b      	str	r3, [r5, #0]
10010ff0:	e77a      	b.n	10010ee8 <_vfiprintf_r+0x74>
10010ff2:	7822      	ldrb	r2, [r4, #0]
10010ff4:	3a30      	subs	r2, #48	; 0x30
10010ff6:	2a09      	cmp	r2, #9
10010ff8:	d804      	bhi.n	10011004 <_vfiprintf_r+0x190>
10010ffa:	434b      	muls	r3, r1
10010ffc:	3401      	adds	r4, #1
10010ffe:	189b      	adds	r3, r3, r2
10011000:	2001      	movs	r0, #1
10011002:	e7f6      	b.n	10010ff2 <_vfiprintf_r+0x17e>
10011004:	2800      	cmp	r0, #0
10011006:	d100      	bne.n	1001100a <_vfiprintf_r+0x196>
10011008:	e76f      	b.n	10010eea <_vfiprintf_r+0x76>
1001100a:	9309      	str	r3, [sp, #36]	; 0x24
1001100c:	e76d      	b.n	10010eea <_vfiprintf_r+0x76>
1001100e:	7863      	ldrb	r3, [r4, #1]
10011010:	2b2a      	cmp	r3, #42	; 0x2a
10011012:	d10a      	bne.n	1001102a <_vfiprintf_r+0x1b6>
10011014:	9b05      	ldr	r3, [sp, #20]
10011016:	3402      	adds	r4, #2
10011018:	1d1a      	adds	r2, r3, #4
1001101a:	681b      	ldr	r3, [r3, #0]
1001101c:	9205      	str	r2, [sp, #20]
1001101e:	2b00      	cmp	r3, #0
10011020:	da01      	bge.n	10011026 <_vfiprintf_r+0x1b2>
10011022:	2301      	movs	r3, #1
10011024:	425b      	negs	r3, r3
10011026:	9307      	str	r3, [sp, #28]
10011028:	e763      	b.n	10010ef2 <_vfiprintf_r+0x7e>
1001102a:	2300      	movs	r3, #0
1001102c:	200a      	movs	r0, #10
1001102e:	001a      	movs	r2, r3
10011030:	3401      	adds	r4, #1
10011032:	606b      	str	r3, [r5, #4]
10011034:	7821      	ldrb	r1, [r4, #0]
10011036:	3930      	subs	r1, #48	; 0x30
10011038:	2909      	cmp	r1, #9
1001103a:	d804      	bhi.n	10011046 <_vfiprintf_r+0x1d2>
1001103c:	4342      	muls	r2, r0
1001103e:	3401      	adds	r4, #1
10011040:	1852      	adds	r2, r2, r1
10011042:	2301      	movs	r3, #1
10011044:	e7f6      	b.n	10011034 <_vfiprintf_r+0x1c0>
10011046:	2b00      	cmp	r3, #0
10011048:	d100      	bne.n	1001104c <_vfiprintf_r+0x1d8>
1001104a:	e752      	b.n	10010ef2 <_vfiprintf_r+0x7e>
1001104c:	9207      	str	r2, [sp, #28]
1001104e:	e750      	b.n	10010ef2 <_vfiprintf_r+0x7e>
10011050:	ab05      	add	r3, sp, #20
10011052:	9300      	str	r3, [sp, #0]
10011054:	003a      	movs	r2, r7
10011056:	4b14      	ldr	r3, [pc, #80]	; (100110a8 <_vfiprintf_r+0x234>)
10011058:	0029      	movs	r1, r5
1001105a:	0030      	movs	r0, r6
1001105c:	e000      	b.n	10011060 <_vfiprintf_r+0x1ec>
1001105e:	bf00      	nop
10011060:	e007      	b.n	10011072 <_vfiprintf_r+0x1fe>
10011062:	ab05      	add	r3, sp, #20
10011064:	9300      	str	r3, [sp, #0]
10011066:	003a      	movs	r2, r7
10011068:	4b0f      	ldr	r3, [pc, #60]	; (100110a8 <_vfiprintf_r+0x234>)
1001106a:	0029      	movs	r1, r5
1001106c:	0030      	movs	r0, r6
1001106e:	f000 f88b 	bl	10011188 <_printf_i>
10011072:	9003      	str	r0, [sp, #12]
10011074:	9b03      	ldr	r3, [sp, #12]
10011076:	3301      	adds	r3, #1
10011078:	d000      	beq.n	1001107c <_vfiprintf_r+0x208>
1001107a:	e75e      	b.n	10010f3a <_vfiprintf_r+0xc6>
1001107c:	89bb      	ldrh	r3, [r7, #12]
1001107e:	065b      	lsls	r3, r3, #25
10011080:	d500      	bpl.n	10011084 <_vfiprintf_r+0x210>
10011082:	e726      	b.n	10010ed2 <_vfiprintf_r+0x5e>
10011084:	980b      	ldr	r0, [sp, #44]	; 0x2c
10011086:	b01f      	add	sp, #124	; 0x7c
10011088:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001108a:	46c0      	nop			; (mov r8, r8)
1001108c:	100129fc 	.word	0x100129fc
10011090:	10012a1c 	.word	0x10012a1c
10011094:	10012a3c 	.word	0x10012a3c
10011098:	10012a62 	.word	0x10012a62
1001109c:	10012a66 	.word	0x10012a66
100110a0:	00000000 	.word	0x00000000
100110a4:	10012a5c 	.word	0x10012a5c
100110a8:	10010e4f 	.word	0x10010e4f

100110ac <_printf_common>:
100110ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100110ae:	0017      	movs	r7, r2
100110b0:	9301      	str	r3, [sp, #4]
100110b2:	688a      	ldr	r2, [r1, #8]
100110b4:	690b      	ldr	r3, [r1, #16]
100110b6:	9000      	str	r0, [sp, #0]
100110b8:	000c      	movs	r4, r1
100110ba:	4293      	cmp	r3, r2
100110bc:	da00      	bge.n	100110c0 <_printf_common+0x14>
100110be:	0013      	movs	r3, r2
100110c0:	0022      	movs	r2, r4
100110c2:	603b      	str	r3, [r7, #0]
100110c4:	3243      	adds	r2, #67	; 0x43
100110c6:	7812      	ldrb	r2, [r2, #0]
100110c8:	2a00      	cmp	r2, #0
100110ca:	d001      	beq.n	100110d0 <_printf_common+0x24>
100110cc:	3301      	adds	r3, #1
100110ce:	603b      	str	r3, [r7, #0]
100110d0:	6823      	ldr	r3, [r4, #0]
100110d2:	069b      	lsls	r3, r3, #26
100110d4:	d502      	bpl.n	100110dc <_printf_common+0x30>
100110d6:	683b      	ldr	r3, [r7, #0]
100110d8:	3302      	adds	r3, #2
100110da:	603b      	str	r3, [r7, #0]
100110dc:	2506      	movs	r5, #6
100110de:	6823      	ldr	r3, [r4, #0]
100110e0:	401d      	ands	r5, r3
100110e2:	d01e      	beq.n	10011122 <_printf_common+0x76>
100110e4:	0023      	movs	r3, r4
100110e6:	3343      	adds	r3, #67	; 0x43
100110e8:	781b      	ldrb	r3, [r3, #0]
100110ea:	1e5a      	subs	r2, r3, #1
100110ec:	4193      	sbcs	r3, r2
100110ee:	6822      	ldr	r2, [r4, #0]
100110f0:	0692      	lsls	r2, r2, #26
100110f2:	d51c      	bpl.n	1001112e <_printf_common+0x82>
100110f4:	2030      	movs	r0, #48	; 0x30
100110f6:	18e1      	adds	r1, r4, r3
100110f8:	3143      	adds	r1, #67	; 0x43
100110fa:	7008      	strb	r0, [r1, #0]
100110fc:	0021      	movs	r1, r4
100110fe:	1c5a      	adds	r2, r3, #1
10011100:	3145      	adds	r1, #69	; 0x45
10011102:	7809      	ldrb	r1, [r1, #0]
10011104:	18a2      	adds	r2, r4, r2
10011106:	3243      	adds	r2, #67	; 0x43
10011108:	3302      	adds	r3, #2
1001110a:	7011      	strb	r1, [r2, #0]
1001110c:	e00f      	b.n	1001112e <_printf_common+0x82>
1001110e:	0022      	movs	r2, r4
10011110:	2301      	movs	r3, #1
10011112:	3219      	adds	r2, #25
10011114:	9901      	ldr	r1, [sp, #4]
10011116:	9800      	ldr	r0, [sp, #0]
10011118:	9e08      	ldr	r6, [sp, #32]
1001111a:	47b0      	blx	r6
1001111c:	1c43      	adds	r3, r0, #1
1001111e:	d00e      	beq.n	1001113e <_printf_common+0x92>
10011120:	3501      	adds	r5, #1
10011122:	68e3      	ldr	r3, [r4, #12]
10011124:	683a      	ldr	r2, [r7, #0]
10011126:	1a9b      	subs	r3, r3, r2
10011128:	429d      	cmp	r5, r3
1001112a:	dbf0      	blt.n	1001110e <_printf_common+0x62>
1001112c:	e7da      	b.n	100110e4 <_printf_common+0x38>
1001112e:	0022      	movs	r2, r4
10011130:	9901      	ldr	r1, [sp, #4]
10011132:	3243      	adds	r2, #67	; 0x43
10011134:	9800      	ldr	r0, [sp, #0]
10011136:	9d08      	ldr	r5, [sp, #32]
10011138:	47a8      	blx	r5
1001113a:	1c43      	adds	r3, r0, #1
1001113c:	d102      	bne.n	10011144 <_printf_common+0x98>
1001113e:	2001      	movs	r0, #1
10011140:	4240      	negs	r0, r0
10011142:	e020      	b.n	10011186 <_printf_common+0xda>
10011144:	2306      	movs	r3, #6
10011146:	6820      	ldr	r0, [r4, #0]
10011148:	68e1      	ldr	r1, [r4, #12]
1001114a:	683a      	ldr	r2, [r7, #0]
1001114c:	4003      	ands	r3, r0
1001114e:	2500      	movs	r5, #0
10011150:	2b04      	cmp	r3, #4
10011152:	d103      	bne.n	1001115c <_printf_common+0xb0>
10011154:	1a8d      	subs	r5, r1, r2
10011156:	43eb      	mvns	r3, r5
10011158:	17db      	asrs	r3, r3, #31
1001115a:	401d      	ands	r5, r3
1001115c:	68a3      	ldr	r3, [r4, #8]
1001115e:	6922      	ldr	r2, [r4, #16]
10011160:	4293      	cmp	r3, r2
10011162:	dd01      	ble.n	10011168 <_printf_common+0xbc>
10011164:	1a9b      	subs	r3, r3, r2
10011166:	18ed      	adds	r5, r5, r3
10011168:	2700      	movs	r7, #0
1001116a:	42bd      	cmp	r5, r7
1001116c:	d00a      	beq.n	10011184 <_printf_common+0xd8>
1001116e:	0022      	movs	r2, r4
10011170:	2301      	movs	r3, #1
10011172:	321a      	adds	r2, #26
10011174:	9901      	ldr	r1, [sp, #4]
10011176:	9800      	ldr	r0, [sp, #0]
10011178:	9e08      	ldr	r6, [sp, #32]
1001117a:	47b0      	blx	r6
1001117c:	1c43      	adds	r3, r0, #1
1001117e:	d0de      	beq.n	1001113e <_printf_common+0x92>
10011180:	3701      	adds	r7, #1
10011182:	e7f2      	b.n	1001116a <_printf_common+0xbe>
10011184:	2000      	movs	r0, #0
10011186:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10011188 <_printf_i>:
10011188:	b5f0      	push	{r4, r5, r6, r7, lr}
1001118a:	b08b      	sub	sp, #44	; 0x2c
1001118c:	9206      	str	r2, [sp, #24]
1001118e:	000a      	movs	r2, r1
10011190:	3243      	adds	r2, #67	; 0x43
10011192:	9307      	str	r3, [sp, #28]
10011194:	9005      	str	r0, [sp, #20]
10011196:	9204      	str	r2, [sp, #16]
10011198:	7e0a      	ldrb	r2, [r1, #24]
1001119a:	000c      	movs	r4, r1
1001119c:	9b10      	ldr	r3, [sp, #64]	; 0x40
1001119e:	2a6e      	cmp	r2, #110	; 0x6e
100111a0:	d100      	bne.n	100111a4 <_printf_i+0x1c>
100111a2:	e0ab      	b.n	100112fc <_printf_i+0x174>
100111a4:	d811      	bhi.n	100111ca <_printf_i+0x42>
100111a6:	2a63      	cmp	r2, #99	; 0x63
100111a8:	d022      	beq.n	100111f0 <_printf_i+0x68>
100111aa:	d809      	bhi.n	100111c0 <_printf_i+0x38>
100111ac:	2a00      	cmp	r2, #0
100111ae:	d100      	bne.n	100111b2 <_printf_i+0x2a>
100111b0:	e0b5      	b.n	1001131e <_printf_i+0x196>
100111b2:	2a58      	cmp	r2, #88	; 0x58
100111b4:	d000      	beq.n	100111b8 <_printf_i+0x30>
100111b6:	e0c5      	b.n	10011344 <_printf_i+0x1bc>
100111b8:	3145      	adds	r1, #69	; 0x45
100111ba:	700a      	strb	r2, [r1, #0]
100111bc:	4a81      	ldr	r2, [pc, #516]	; (100113c4 <_printf_i+0x23c>)
100111be:	e04f      	b.n	10011260 <_printf_i+0xd8>
100111c0:	2a64      	cmp	r2, #100	; 0x64
100111c2:	d01d      	beq.n	10011200 <_printf_i+0x78>
100111c4:	2a69      	cmp	r2, #105	; 0x69
100111c6:	d01b      	beq.n	10011200 <_printf_i+0x78>
100111c8:	e0bc      	b.n	10011344 <_printf_i+0x1bc>
100111ca:	2a73      	cmp	r2, #115	; 0x73
100111cc:	d100      	bne.n	100111d0 <_printf_i+0x48>
100111ce:	e0aa      	b.n	10011326 <_printf_i+0x19e>
100111d0:	d809      	bhi.n	100111e6 <_printf_i+0x5e>
100111d2:	2a6f      	cmp	r2, #111	; 0x6f
100111d4:	d029      	beq.n	1001122a <_printf_i+0xa2>
100111d6:	2a70      	cmp	r2, #112	; 0x70
100111d8:	d000      	beq.n	100111dc <_printf_i+0x54>
100111da:	e0b3      	b.n	10011344 <_printf_i+0x1bc>
100111dc:	2220      	movs	r2, #32
100111de:	6809      	ldr	r1, [r1, #0]
100111e0:	430a      	orrs	r2, r1
100111e2:	6022      	str	r2, [r4, #0]
100111e4:	e037      	b.n	10011256 <_printf_i+0xce>
100111e6:	2a75      	cmp	r2, #117	; 0x75
100111e8:	d01f      	beq.n	1001122a <_printf_i+0xa2>
100111ea:	2a78      	cmp	r2, #120	; 0x78
100111ec:	d033      	beq.n	10011256 <_printf_i+0xce>
100111ee:	e0a9      	b.n	10011344 <_printf_i+0x1bc>
100111f0:	000e      	movs	r6, r1
100111f2:	681a      	ldr	r2, [r3, #0]
100111f4:	3642      	adds	r6, #66	; 0x42
100111f6:	1d11      	adds	r1, r2, #4
100111f8:	6019      	str	r1, [r3, #0]
100111fa:	6813      	ldr	r3, [r2, #0]
100111fc:	7033      	strb	r3, [r6, #0]
100111fe:	e0a4      	b.n	1001134a <_printf_i+0x1c2>
10011200:	6821      	ldr	r1, [r4, #0]
10011202:	681a      	ldr	r2, [r3, #0]
10011204:	0608      	lsls	r0, r1, #24
10011206:	d406      	bmi.n	10011216 <_printf_i+0x8e>
10011208:	0649      	lsls	r1, r1, #25
1001120a:	d504      	bpl.n	10011216 <_printf_i+0x8e>
1001120c:	1d11      	adds	r1, r2, #4
1001120e:	6019      	str	r1, [r3, #0]
10011210:	2300      	movs	r3, #0
10011212:	5ed5      	ldrsh	r5, [r2, r3]
10011214:	e002      	b.n	1001121c <_printf_i+0x94>
10011216:	1d11      	adds	r1, r2, #4
10011218:	6019      	str	r1, [r3, #0]
1001121a:	6815      	ldr	r5, [r2, #0]
1001121c:	2d00      	cmp	r5, #0
1001121e:	da3b      	bge.n	10011298 <_printf_i+0x110>
10011220:	232d      	movs	r3, #45	; 0x2d
10011222:	9a04      	ldr	r2, [sp, #16]
10011224:	426d      	negs	r5, r5
10011226:	7013      	strb	r3, [r2, #0]
10011228:	e036      	b.n	10011298 <_printf_i+0x110>
1001122a:	6821      	ldr	r1, [r4, #0]
1001122c:	681a      	ldr	r2, [r3, #0]
1001122e:	0608      	lsls	r0, r1, #24
10011230:	d406      	bmi.n	10011240 <_printf_i+0xb8>
10011232:	0649      	lsls	r1, r1, #25
10011234:	d504      	bpl.n	10011240 <_printf_i+0xb8>
10011236:	6815      	ldr	r5, [r2, #0]
10011238:	1d11      	adds	r1, r2, #4
1001123a:	6019      	str	r1, [r3, #0]
1001123c:	b2ad      	uxth	r5, r5
1001123e:	e002      	b.n	10011246 <_printf_i+0xbe>
10011240:	1d11      	adds	r1, r2, #4
10011242:	6019      	str	r1, [r3, #0]
10011244:	6815      	ldr	r5, [r2, #0]
10011246:	4b5f      	ldr	r3, [pc, #380]	; (100113c4 <_printf_i+0x23c>)
10011248:	7e22      	ldrb	r2, [r4, #24]
1001124a:	9303      	str	r3, [sp, #12]
1001124c:	2708      	movs	r7, #8
1001124e:	2a6f      	cmp	r2, #111	; 0x6f
10011250:	d01d      	beq.n	1001128e <_printf_i+0x106>
10011252:	270a      	movs	r7, #10
10011254:	e01b      	b.n	1001128e <_printf_i+0x106>
10011256:	0022      	movs	r2, r4
10011258:	2178      	movs	r1, #120	; 0x78
1001125a:	3245      	adds	r2, #69	; 0x45
1001125c:	7011      	strb	r1, [r2, #0]
1001125e:	4a5a      	ldr	r2, [pc, #360]	; (100113c8 <_printf_i+0x240>)
10011260:	6819      	ldr	r1, [r3, #0]
10011262:	9203      	str	r2, [sp, #12]
10011264:	1d08      	adds	r0, r1, #4
10011266:	6822      	ldr	r2, [r4, #0]
10011268:	6018      	str	r0, [r3, #0]
1001126a:	680d      	ldr	r5, [r1, #0]
1001126c:	0610      	lsls	r0, r2, #24
1001126e:	d402      	bmi.n	10011276 <_printf_i+0xee>
10011270:	0650      	lsls	r0, r2, #25
10011272:	d500      	bpl.n	10011276 <_printf_i+0xee>
10011274:	b2ad      	uxth	r5, r5
10011276:	07d3      	lsls	r3, r2, #31
10011278:	d502      	bpl.n	10011280 <_printf_i+0xf8>
1001127a:	2320      	movs	r3, #32
1001127c:	431a      	orrs	r2, r3
1001127e:	6022      	str	r2, [r4, #0]
10011280:	2710      	movs	r7, #16
10011282:	2d00      	cmp	r5, #0
10011284:	d103      	bne.n	1001128e <_printf_i+0x106>
10011286:	2320      	movs	r3, #32
10011288:	6822      	ldr	r2, [r4, #0]
1001128a:	439a      	bics	r2, r3
1001128c:	6022      	str	r2, [r4, #0]
1001128e:	0023      	movs	r3, r4
10011290:	2200      	movs	r2, #0
10011292:	3343      	adds	r3, #67	; 0x43
10011294:	701a      	strb	r2, [r3, #0]
10011296:	e002      	b.n	1001129e <_printf_i+0x116>
10011298:	270a      	movs	r7, #10
1001129a:	4b4a      	ldr	r3, [pc, #296]	; (100113c4 <_printf_i+0x23c>)
1001129c:	9303      	str	r3, [sp, #12]
1001129e:	6863      	ldr	r3, [r4, #4]
100112a0:	60a3      	str	r3, [r4, #8]
100112a2:	2b00      	cmp	r3, #0
100112a4:	db09      	blt.n	100112ba <_printf_i+0x132>
100112a6:	2204      	movs	r2, #4
100112a8:	6821      	ldr	r1, [r4, #0]
100112aa:	4391      	bics	r1, r2
100112ac:	6021      	str	r1, [r4, #0]
100112ae:	2d00      	cmp	r5, #0
100112b0:	d105      	bne.n	100112be <_printf_i+0x136>
100112b2:	9e04      	ldr	r6, [sp, #16]
100112b4:	2b00      	cmp	r3, #0
100112b6:	d011      	beq.n	100112dc <_printf_i+0x154>
100112b8:	e07b      	b.n	100113b2 <_printf_i+0x22a>
100112ba:	2d00      	cmp	r5, #0
100112bc:	d079      	beq.n	100113b2 <_printf_i+0x22a>
100112be:	9e04      	ldr	r6, [sp, #16]
100112c0:	0028      	movs	r0, r5
100112c2:	0039      	movs	r1, r7
100112c4:	f7fe f8ae 	bl	1000f424 <__aeabi_uidivmod>
100112c8:	9b03      	ldr	r3, [sp, #12]
100112ca:	3e01      	subs	r6, #1
100112cc:	5c5b      	ldrb	r3, [r3, r1]
100112ce:	0028      	movs	r0, r5
100112d0:	7033      	strb	r3, [r6, #0]
100112d2:	0039      	movs	r1, r7
100112d4:	f7fe f820 	bl	1000f318 <__aeabi_uidiv>
100112d8:	1e05      	subs	r5, r0, #0
100112da:	d1f1      	bne.n	100112c0 <_printf_i+0x138>
100112dc:	2f08      	cmp	r7, #8
100112de:	d109      	bne.n	100112f4 <_printf_i+0x16c>
100112e0:	6823      	ldr	r3, [r4, #0]
100112e2:	07db      	lsls	r3, r3, #31
100112e4:	d506      	bpl.n	100112f4 <_printf_i+0x16c>
100112e6:	6863      	ldr	r3, [r4, #4]
100112e8:	6922      	ldr	r2, [r4, #16]
100112ea:	4293      	cmp	r3, r2
100112ec:	dc02      	bgt.n	100112f4 <_printf_i+0x16c>
100112ee:	2330      	movs	r3, #48	; 0x30
100112f0:	3e01      	subs	r6, #1
100112f2:	7033      	strb	r3, [r6, #0]
100112f4:	9b04      	ldr	r3, [sp, #16]
100112f6:	1b9b      	subs	r3, r3, r6
100112f8:	6123      	str	r3, [r4, #16]
100112fa:	e02b      	b.n	10011354 <_printf_i+0x1cc>
100112fc:	6809      	ldr	r1, [r1, #0]
100112fe:	681a      	ldr	r2, [r3, #0]
10011300:	0608      	lsls	r0, r1, #24
10011302:	d407      	bmi.n	10011314 <_printf_i+0x18c>
10011304:	0649      	lsls	r1, r1, #25
10011306:	d505      	bpl.n	10011314 <_printf_i+0x18c>
10011308:	1d11      	adds	r1, r2, #4
1001130a:	6019      	str	r1, [r3, #0]
1001130c:	6813      	ldr	r3, [r2, #0]
1001130e:	8aa2      	ldrh	r2, [r4, #20]
10011310:	801a      	strh	r2, [r3, #0]
10011312:	e004      	b.n	1001131e <_printf_i+0x196>
10011314:	1d11      	adds	r1, r2, #4
10011316:	6019      	str	r1, [r3, #0]
10011318:	6813      	ldr	r3, [r2, #0]
1001131a:	6962      	ldr	r2, [r4, #20]
1001131c:	601a      	str	r2, [r3, #0]
1001131e:	2300      	movs	r3, #0
10011320:	9e04      	ldr	r6, [sp, #16]
10011322:	6123      	str	r3, [r4, #16]
10011324:	e016      	b.n	10011354 <_printf_i+0x1cc>
10011326:	681a      	ldr	r2, [r3, #0]
10011328:	1d11      	adds	r1, r2, #4
1001132a:	6019      	str	r1, [r3, #0]
1001132c:	6816      	ldr	r6, [r2, #0]
1001132e:	2100      	movs	r1, #0
10011330:	6862      	ldr	r2, [r4, #4]
10011332:	0030      	movs	r0, r6
10011334:	f000 f93c 	bl	100115b0 <memchr>
10011338:	2800      	cmp	r0, #0
1001133a:	d001      	beq.n	10011340 <_printf_i+0x1b8>
1001133c:	1b80      	subs	r0, r0, r6
1001133e:	6060      	str	r0, [r4, #4]
10011340:	6863      	ldr	r3, [r4, #4]
10011342:	e003      	b.n	1001134c <_printf_i+0x1c4>
10011344:	0026      	movs	r6, r4
10011346:	3642      	adds	r6, #66	; 0x42
10011348:	7032      	strb	r2, [r6, #0]
1001134a:	2301      	movs	r3, #1
1001134c:	6123      	str	r3, [r4, #16]
1001134e:	2300      	movs	r3, #0
10011350:	9a04      	ldr	r2, [sp, #16]
10011352:	7013      	strb	r3, [r2, #0]
10011354:	9b07      	ldr	r3, [sp, #28]
10011356:	aa09      	add	r2, sp, #36	; 0x24
10011358:	9300      	str	r3, [sp, #0]
1001135a:	0021      	movs	r1, r4
1001135c:	9b06      	ldr	r3, [sp, #24]
1001135e:	9805      	ldr	r0, [sp, #20]
10011360:	f7ff fea4 	bl	100110ac <_printf_common>
10011364:	1c43      	adds	r3, r0, #1
10011366:	d102      	bne.n	1001136e <_printf_i+0x1e6>
10011368:	2001      	movs	r0, #1
1001136a:	4240      	negs	r0, r0
1001136c:	e027      	b.n	100113be <_printf_i+0x236>
1001136e:	6923      	ldr	r3, [r4, #16]
10011370:	0032      	movs	r2, r6
10011372:	9906      	ldr	r1, [sp, #24]
10011374:	9805      	ldr	r0, [sp, #20]
10011376:	9d07      	ldr	r5, [sp, #28]
10011378:	47a8      	blx	r5
1001137a:	1c43      	adds	r3, r0, #1
1001137c:	d0f4      	beq.n	10011368 <_printf_i+0x1e0>
1001137e:	6823      	ldr	r3, [r4, #0]
10011380:	2500      	movs	r5, #0
10011382:	079b      	lsls	r3, r3, #30
10011384:	d40f      	bmi.n	100113a6 <_printf_i+0x21e>
10011386:	9b09      	ldr	r3, [sp, #36]	; 0x24
10011388:	68e0      	ldr	r0, [r4, #12]
1001138a:	4298      	cmp	r0, r3
1001138c:	da17      	bge.n	100113be <_printf_i+0x236>
1001138e:	0018      	movs	r0, r3
10011390:	e015      	b.n	100113be <_printf_i+0x236>
10011392:	0022      	movs	r2, r4
10011394:	2301      	movs	r3, #1
10011396:	3219      	adds	r2, #25
10011398:	9906      	ldr	r1, [sp, #24]
1001139a:	9805      	ldr	r0, [sp, #20]
1001139c:	9e07      	ldr	r6, [sp, #28]
1001139e:	47b0      	blx	r6
100113a0:	1c43      	adds	r3, r0, #1
100113a2:	d0e1      	beq.n	10011368 <_printf_i+0x1e0>
100113a4:	3501      	adds	r5, #1
100113a6:	68e3      	ldr	r3, [r4, #12]
100113a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
100113aa:	1a9b      	subs	r3, r3, r2
100113ac:	429d      	cmp	r5, r3
100113ae:	dbf0      	blt.n	10011392 <_printf_i+0x20a>
100113b0:	e7e9      	b.n	10011386 <_printf_i+0x1fe>
100113b2:	0026      	movs	r6, r4
100113b4:	9b03      	ldr	r3, [sp, #12]
100113b6:	3642      	adds	r6, #66	; 0x42
100113b8:	781b      	ldrb	r3, [r3, #0]
100113ba:	7033      	strb	r3, [r6, #0]
100113bc:	e78e      	b.n	100112dc <_printf_i+0x154>
100113be:	b00b      	add	sp, #44	; 0x2c
100113c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100113c2:	46c0      	nop			; (mov r8, r8)
100113c4:	10012a6d 	.word	0x10012a6d
100113c8:	10012a7e 	.word	0x10012a7e

100113cc <_putc_r>:
100113cc:	b570      	push	{r4, r5, r6, lr}
100113ce:	0006      	movs	r6, r0
100113d0:	000d      	movs	r5, r1
100113d2:	0014      	movs	r4, r2
100113d4:	2800      	cmp	r0, #0
100113d6:	d004      	beq.n	100113e2 <_putc_r+0x16>
100113d8:	6983      	ldr	r3, [r0, #24]
100113da:	2b00      	cmp	r3, #0
100113dc:	d101      	bne.n	100113e2 <_putc_r+0x16>
100113de:	f7ff fb83 	bl	10010ae8 <__sinit>
100113e2:	4b12      	ldr	r3, [pc, #72]	; (1001142c <_putc_r+0x60>)
100113e4:	429c      	cmp	r4, r3
100113e6:	d101      	bne.n	100113ec <_putc_r+0x20>
100113e8:	6874      	ldr	r4, [r6, #4]
100113ea:	e008      	b.n	100113fe <_putc_r+0x32>
100113ec:	4b10      	ldr	r3, [pc, #64]	; (10011430 <_putc_r+0x64>)
100113ee:	429c      	cmp	r4, r3
100113f0:	d101      	bne.n	100113f6 <_putc_r+0x2a>
100113f2:	68b4      	ldr	r4, [r6, #8]
100113f4:	e003      	b.n	100113fe <_putc_r+0x32>
100113f6:	4b0f      	ldr	r3, [pc, #60]	; (10011434 <_putc_r+0x68>)
100113f8:	429c      	cmp	r4, r3
100113fa:	d100      	bne.n	100113fe <_putc_r+0x32>
100113fc:	68f4      	ldr	r4, [r6, #12]
100113fe:	68a3      	ldr	r3, [r4, #8]
10011400:	3b01      	subs	r3, #1
10011402:	60a3      	str	r3, [r4, #8]
10011404:	2b00      	cmp	r3, #0
10011406:	da05      	bge.n	10011414 <_putc_r+0x48>
10011408:	69a2      	ldr	r2, [r4, #24]
1001140a:	4293      	cmp	r3, r2
1001140c:	db08      	blt.n	10011420 <_putc_r+0x54>
1001140e:	b2eb      	uxtb	r3, r5
10011410:	2b0a      	cmp	r3, #10
10011412:	d005      	beq.n	10011420 <_putc_r+0x54>
10011414:	6823      	ldr	r3, [r4, #0]
10011416:	b2e8      	uxtb	r0, r5
10011418:	1c5a      	adds	r2, r3, #1
1001141a:	6022      	str	r2, [r4, #0]
1001141c:	701d      	strb	r5, [r3, #0]
1001141e:	e004      	b.n	1001142a <_putc_r+0x5e>
10011420:	0022      	movs	r2, r4
10011422:	0029      	movs	r1, r5
10011424:	0030      	movs	r0, r6
10011426:	f7ff f99d 	bl	10010764 <__swbuf_r>
1001142a:	bd70      	pop	{r4, r5, r6, pc}
1001142c:	100129fc 	.word	0x100129fc
10011430:	10012a1c 	.word	0x10012a1c
10011434:	10012a3c 	.word	0x10012a3c

10011438 <_sbrk_r>:
10011438:	2300      	movs	r3, #0
1001143a:	b570      	push	{r4, r5, r6, lr}
1001143c:	4c06      	ldr	r4, [pc, #24]	; (10011458 <_sbrk_r+0x20>)
1001143e:	0005      	movs	r5, r0
10011440:	0008      	movs	r0, r1
10011442:	6023      	str	r3, [r4, #0]
10011444:	f7f8 fe3e 	bl	1000a0c4 <_sbrk>
10011448:	1c43      	adds	r3, r0, #1
1001144a:	d103      	bne.n	10011454 <_sbrk_r+0x1c>
1001144c:	6823      	ldr	r3, [r4, #0]
1001144e:	2b00      	cmp	r3, #0
10011450:	d000      	beq.n	10011454 <_sbrk_r+0x1c>
10011452:	602b      	str	r3, [r5, #0]
10011454:	bd70      	pop	{r4, r5, r6, pc}
10011456:	46c0      	nop			; (mov r8, r8)
10011458:	10015834 	.word	0x10015834

1001145c <__sread>:
1001145c:	b570      	push	{r4, r5, r6, lr}
1001145e:	000c      	movs	r4, r1
10011460:	250e      	movs	r5, #14
10011462:	5f49      	ldrsh	r1, [r1, r5]
10011464:	f000 f8b0 	bl	100115c8 <_read_r>
10011468:	2800      	cmp	r0, #0
1001146a:	db03      	blt.n	10011474 <__sread+0x18>
1001146c:	6d63      	ldr	r3, [r4, #84]	; 0x54
1001146e:	181b      	adds	r3, r3, r0
10011470:	6563      	str	r3, [r4, #84]	; 0x54
10011472:	e003      	b.n	1001147c <__sread+0x20>
10011474:	89a2      	ldrh	r2, [r4, #12]
10011476:	4b02      	ldr	r3, [pc, #8]	; (10011480 <__sread+0x24>)
10011478:	4013      	ands	r3, r2
1001147a:	81a3      	strh	r3, [r4, #12]
1001147c:	bd70      	pop	{r4, r5, r6, pc}
1001147e:	46c0      	nop			; (mov r8, r8)
10011480:	ffffefff 	.word	0xffffefff

10011484 <__swrite>:
10011484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10011486:	001f      	movs	r7, r3
10011488:	898b      	ldrh	r3, [r1, #12]
1001148a:	0005      	movs	r5, r0
1001148c:	000c      	movs	r4, r1
1001148e:	0016      	movs	r6, r2
10011490:	05db      	lsls	r3, r3, #23
10011492:	d505      	bpl.n	100114a0 <__swrite+0x1c>
10011494:	230e      	movs	r3, #14
10011496:	5ec9      	ldrsh	r1, [r1, r3]
10011498:	2200      	movs	r2, #0
1001149a:	2302      	movs	r3, #2
1001149c:	f000 f874 	bl	10011588 <_lseek_r>
100114a0:	89a2      	ldrh	r2, [r4, #12]
100114a2:	4b05      	ldr	r3, [pc, #20]	; (100114b8 <__swrite+0x34>)
100114a4:	0028      	movs	r0, r5
100114a6:	4013      	ands	r3, r2
100114a8:	81a3      	strh	r3, [r4, #12]
100114aa:	0032      	movs	r2, r6
100114ac:	230e      	movs	r3, #14
100114ae:	5ee1      	ldrsh	r1, [r4, r3]
100114b0:	003b      	movs	r3, r7
100114b2:	f000 f81f 	bl	100114f4 <_write_r>
100114b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100114b8:	ffffefff 	.word	0xffffefff

100114bc <__sseek>:
100114bc:	b570      	push	{r4, r5, r6, lr}
100114be:	000c      	movs	r4, r1
100114c0:	250e      	movs	r5, #14
100114c2:	5f49      	ldrsh	r1, [r1, r5]
100114c4:	f000 f860 	bl	10011588 <_lseek_r>
100114c8:	89a3      	ldrh	r3, [r4, #12]
100114ca:	1c42      	adds	r2, r0, #1
100114cc:	d103      	bne.n	100114d6 <__sseek+0x1a>
100114ce:	4a05      	ldr	r2, [pc, #20]	; (100114e4 <__sseek+0x28>)
100114d0:	4013      	ands	r3, r2
100114d2:	81a3      	strh	r3, [r4, #12]
100114d4:	e004      	b.n	100114e0 <__sseek+0x24>
100114d6:	2280      	movs	r2, #128	; 0x80
100114d8:	0152      	lsls	r2, r2, #5
100114da:	4313      	orrs	r3, r2
100114dc:	81a3      	strh	r3, [r4, #12]
100114de:	6560      	str	r0, [r4, #84]	; 0x54
100114e0:	bd70      	pop	{r4, r5, r6, pc}
100114e2:	46c0      	nop			; (mov r8, r8)
100114e4:	ffffefff 	.word	0xffffefff

100114e8 <__sclose>:
100114e8:	b510      	push	{r4, lr}
100114ea:	230e      	movs	r3, #14
100114ec:	5ec9      	ldrsh	r1, [r1, r3]
100114ee:	f000 f815 	bl	1001151c <_close_r>
100114f2:	bd10      	pop	{r4, pc}

100114f4 <_write_r>:
100114f4:	b570      	push	{r4, r5, r6, lr}
100114f6:	0005      	movs	r5, r0
100114f8:	0008      	movs	r0, r1
100114fa:	0011      	movs	r1, r2
100114fc:	2200      	movs	r2, #0
100114fe:	4c06      	ldr	r4, [pc, #24]	; (10011518 <_write_r+0x24>)
10011500:	6022      	str	r2, [r4, #0]
10011502:	001a      	movs	r2, r3
10011504:	f7f8 fdb6 	bl	1000a074 <_write>
10011508:	1c43      	adds	r3, r0, #1
1001150a:	d103      	bne.n	10011514 <_write_r+0x20>
1001150c:	6823      	ldr	r3, [r4, #0]
1001150e:	2b00      	cmp	r3, #0
10011510:	d000      	beq.n	10011514 <_write_r+0x20>
10011512:	602b      	str	r3, [r5, #0]
10011514:	bd70      	pop	{r4, r5, r6, pc}
10011516:	46c0      	nop			; (mov r8, r8)
10011518:	10015834 	.word	0x10015834

1001151c <_close_r>:
1001151c:	2300      	movs	r3, #0
1001151e:	b570      	push	{r4, r5, r6, lr}
10011520:	4c06      	ldr	r4, [pc, #24]	; (1001153c <_close_r+0x20>)
10011522:	0005      	movs	r5, r0
10011524:	0008      	movs	r0, r1
10011526:	6023      	str	r3, [r4, #0]
10011528:	f7f8 fdde 	bl	1000a0e8 <_close>
1001152c:	1c43      	adds	r3, r0, #1
1001152e:	d103      	bne.n	10011538 <_close_r+0x1c>
10011530:	6823      	ldr	r3, [r4, #0]
10011532:	2b00      	cmp	r3, #0
10011534:	d000      	beq.n	10011538 <_close_r+0x1c>
10011536:	602b      	str	r3, [r5, #0]
10011538:	bd70      	pop	{r4, r5, r6, pc}
1001153a:	46c0      	nop			; (mov r8, r8)
1001153c:	10015834 	.word	0x10015834

10011540 <_fstat_r>:
10011540:	2300      	movs	r3, #0
10011542:	b570      	push	{r4, r5, r6, lr}
10011544:	4c06      	ldr	r4, [pc, #24]	; (10011560 <_fstat_r+0x20>)
10011546:	0005      	movs	r5, r0
10011548:	0008      	movs	r0, r1
1001154a:	0011      	movs	r1, r2
1001154c:	6023      	str	r3, [r4, #0]
1001154e:	f7f8 fdcf 	bl	1000a0f0 <_fstat>
10011552:	1c43      	adds	r3, r0, #1
10011554:	d103      	bne.n	1001155e <_fstat_r+0x1e>
10011556:	6823      	ldr	r3, [r4, #0]
10011558:	2b00      	cmp	r3, #0
1001155a:	d000      	beq.n	1001155e <_fstat_r+0x1e>
1001155c:	602b      	str	r3, [r5, #0]
1001155e:	bd70      	pop	{r4, r5, r6, pc}
10011560:	10015834 	.word	0x10015834

10011564 <_isatty_r>:
10011564:	2300      	movs	r3, #0
10011566:	b570      	push	{r4, r5, r6, lr}
10011568:	4c06      	ldr	r4, [pc, #24]	; (10011584 <_isatty_r+0x20>)
1001156a:	0005      	movs	r5, r0
1001156c:	0008      	movs	r0, r1
1001156e:	6023      	str	r3, [r4, #0]
10011570:	f7f8 fdc4 	bl	1000a0fc <_isatty>
10011574:	1c43      	adds	r3, r0, #1
10011576:	d103      	bne.n	10011580 <_isatty_r+0x1c>
10011578:	6823      	ldr	r3, [r4, #0]
1001157a:	2b00      	cmp	r3, #0
1001157c:	d000      	beq.n	10011580 <_isatty_r+0x1c>
1001157e:	602b      	str	r3, [r5, #0]
10011580:	bd70      	pop	{r4, r5, r6, pc}
10011582:	46c0      	nop			; (mov r8, r8)
10011584:	10015834 	.word	0x10015834

10011588 <_lseek_r>:
10011588:	b570      	push	{r4, r5, r6, lr}
1001158a:	0005      	movs	r5, r0
1001158c:	0008      	movs	r0, r1
1001158e:	0011      	movs	r1, r2
10011590:	2200      	movs	r2, #0
10011592:	4c06      	ldr	r4, [pc, #24]	; (100115ac <_lseek_r+0x24>)
10011594:	6022      	str	r2, [r4, #0]
10011596:	001a      	movs	r2, r3
10011598:	f7f8 fdb2 	bl	1000a100 <_lseek>
1001159c:	1c43      	adds	r3, r0, #1
1001159e:	d103      	bne.n	100115a8 <_lseek_r+0x20>
100115a0:	6823      	ldr	r3, [r4, #0]
100115a2:	2b00      	cmp	r3, #0
100115a4:	d000      	beq.n	100115a8 <_lseek_r+0x20>
100115a6:	602b      	str	r3, [r5, #0]
100115a8:	bd70      	pop	{r4, r5, r6, pc}
100115aa:	46c0      	nop			; (mov r8, r8)
100115ac:	10015834 	.word	0x10015834

100115b0 <memchr>:
100115b0:	b2c9      	uxtb	r1, r1
100115b2:	1882      	adds	r2, r0, r2
100115b4:	4290      	cmp	r0, r2
100115b6:	d004      	beq.n	100115c2 <memchr+0x12>
100115b8:	7803      	ldrb	r3, [r0, #0]
100115ba:	428b      	cmp	r3, r1
100115bc:	d002      	beq.n	100115c4 <memchr+0x14>
100115be:	3001      	adds	r0, #1
100115c0:	e7f8      	b.n	100115b4 <memchr+0x4>
100115c2:	2000      	movs	r0, #0
100115c4:	4770      	bx	lr
	...

100115c8 <_read_r>:
100115c8:	b570      	push	{r4, r5, r6, lr}
100115ca:	0005      	movs	r5, r0
100115cc:	0008      	movs	r0, r1
100115ce:	0011      	movs	r1, r2
100115d0:	2200      	movs	r2, #0
100115d2:	4c06      	ldr	r4, [pc, #24]	; (100115ec <_read_r+0x24>)
100115d4:	6022      	str	r2, [r4, #0]
100115d6:	001a      	movs	r2, r3
100115d8:	f7f8 fd2c 	bl	1000a034 <_read>
100115dc:	1c43      	adds	r3, r0, #1
100115de:	d103      	bne.n	100115e8 <_read_r+0x20>
100115e0:	6823      	ldr	r3, [r4, #0]
100115e2:	2b00      	cmp	r3, #0
100115e4:	d000      	beq.n	100115e8 <_read_r+0x20>
100115e6:	602b      	str	r3, [r5, #0]
100115e8:	bd70      	pop	{r4, r5, r6, pc}
100115ea:	46c0      	nop			; (mov r8, r8)
100115ec:	10015834 	.word	0x10015834

100115f0 <__aeabi_lmul>:
100115f0:	b5f0      	push	{r4, r5, r6, r7, lr}
100115f2:	464f      	mov	r7, r9
100115f4:	4646      	mov	r6, r8
100115f6:	b4c0      	push	{r6, r7}
100115f8:	0416      	lsls	r6, r2, #16
100115fa:	0c36      	lsrs	r6, r6, #16
100115fc:	4699      	mov	r9, r3
100115fe:	0033      	movs	r3, r6
10011600:	0405      	lsls	r5, r0, #16
10011602:	0c2c      	lsrs	r4, r5, #16
10011604:	0c07      	lsrs	r7, r0, #16
10011606:	0c15      	lsrs	r5, r2, #16
10011608:	4363      	muls	r3, r4
1001160a:	437e      	muls	r6, r7
1001160c:	436f      	muls	r7, r5
1001160e:	4365      	muls	r5, r4
10011610:	0c1c      	lsrs	r4, r3, #16
10011612:	19ad      	adds	r5, r5, r6
10011614:	1964      	adds	r4, r4, r5
10011616:	469c      	mov	ip, r3
10011618:	42a6      	cmp	r6, r4
1001161a:	d903      	bls.n	10011624 <__aeabi_lmul+0x34>
1001161c:	2380      	movs	r3, #128	; 0x80
1001161e:	025b      	lsls	r3, r3, #9
10011620:	4698      	mov	r8, r3
10011622:	4447      	add	r7, r8
10011624:	4663      	mov	r3, ip
10011626:	0c25      	lsrs	r5, r4, #16
10011628:	19ef      	adds	r7, r5, r7
1001162a:	041d      	lsls	r5, r3, #16
1001162c:	464b      	mov	r3, r9
1001162e:	434a      	muls	r2, r1
10011630:	4343      	muls	r3, r0
10011632:	0c2d      	lsrs	r5, r5, #16
10011634:	0424      	lsls	r4, r4, #16
10011636:	1964      	adds	r4, r4, r5
10011638:	1899      	adds	r1, r3, r2
1001163a:	19c9      	adds	r1, r1, r7
1001163c:	0020      	movs	r0, r4
1001163e:	bc0c      	pop	{r2, r3}
10011640:	4690      	mov	r8, r2
10011642:	4699      	mov	r9, r3
10011644:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011646:	46c0      	nop			; (mov r8, r8)

10011648 <pxp_gatt_client_handle>:
10011648:	810d 1000 0000 0000 81e1 1000 0000 0000     ................
10011658:	8251 1000 8481 1000 0000 0000 0000 0000     Q...............
	...

10011670 <pxp_gap_handle>:
	...
10011678:	85f1 1000 0000 0000 0000 0000 80e9 1000     ................
10011688:	88a5 1000 0000 0000 0000 0000 8985 1000     ................
	...
100116a8:	89b9 1000 0000 0000 0000 0000 0000 0000     ................
100116b8:	0000 0000 000d 0000 696c 6b6e 6c20 736f     ........link los
100116c8:	2073 6573 7672 6369 2065 6964 6373 766f     s service discov
100116d8:	7265 6465 0000 0000 6d49 656d 6964 7461     ered....Immediat
100116e8:	2065 6c41 7265 2074 6573 7672 6369 2065     e Alert service 
100116f8:	6964 6373 766f 7265 6465 0000 7854 7020     discovered..Tx p
10011708:	776f 7265 7320 7265 6976 6563 6420 7369     ower service dis
10011718:	6f63 6576 6572 0064 6964 6373 766f 7265     covered.discover
10011728:	6320 6d6f 6c70 7465 2065 706f 7265 7461      complete operat
10011738:	6f69 206e 6425 6120 646e 2520 0064 0000     ion %d and %d...
10011748:	7854 4320 6168 6172 7463 7265 7369 6974     Tx Characteristi
10011758:	2063 6944 6373 766f 7265 2079 7453 7261     c Discovery Star
10011768:	6574 0064 7854 4320 6168 6172 7463 7265     ted.Tx Character
10011778:	7369 6974 2063 6944 6373 766f 7265 2079     istic Discovery 
10011788:	6146 6c69 6465 0000 7854 5020 776f 7265     Failed..Tx Power
10011798:	5320 7265 6976 6563 6e20 746f 4620 756f      Service not Fou
100117a8:	646e 0000 694c 6b6e 4c20 736f 2073 6843     nd..Link Loss Ch
100117b8:	7261 6361 6574 6972 7473 6369 4420 7369     aracteristic Dis
100117c8:	6f63 6576 7972 5320 6174 7472 6465 0000     covery Started..
100117d8:	694c 6b6e 4c20 736f 2073 6843 7261 6361     Link Loss Charac
100117e8:	6574 6972 7473 6369 4420 7369 6f63 6576     teristic Discove
100117f8:	7972 4620 6961 656c 0064 0000 694c 6b6e     ry Failed...Link
10011808:	4c20 736f 2073 6553 7672 6369 2065 6f6e      Loss Service no
10011818:	2074 7641 6961 616c 6c62 0065 6d49 656d     t Available.Imme
10011828:	6964 7461 2065 6843 7261 6361 6574 6972     diate Characteri
10011838:	7473 6369 4420 7369 6f63 6576 7972 5320     stic Discovery S
10011848:	6174 7472 6465 0000 6d49 656d 6964 7461     tarted..Immediat
10011858:	2065 6843 7261 6361 6574 6972 7473 6369     e Characteristic
10011868:	4420 7369 6f63 6576 7972 4620 6961 656c      Discovery Faile
10011878:	0064 0000 6d49 656d 6964 7461 2065 6c41     d...Immediate Al
10011888:	7265 2074 6553 7672 6369 2065 6f6e 2074     ert Service not 
10011898:	7641 6961 616c 6c62 0065 0000 5250 584f     Available...PROX
100118a8:	4d49 5449 2059 5250 464f 4c49 2045 4f4e     IMITY PROFILE NO
100118b8:	2054 5553 5050 524f 4554 0044 4147 5454     T SUPPORTED.GATT
100118c8:	6320 6168 6172 7463 7265 7369 6974 2063      characteristic 
100118d8:	6964 6373 766f 7265 2079 6f63 706d 656c     discovery comple
100118e8:	6574 0064 694c 6b6e 4c20 736f 2073 7277     ted.Link Loss wr
100118f8:	7469 2065 6863 7261 6361 6574 6972 7473     ite characterist
10011908:	6369 2073 6166 6c69 6465 0000 6843 7261     ics failed..Char
10011918:	6361 6574 6972 7473 6369 5220 6165 2064     acteristic Read 
10011928:	6552 7571 7365 2074 6166 6c69 6465 0000     Request failed..
10011938:	7453 7261 6974 676e 7420 6d69 7265 0000     Starting timer..
10011948:	6948 6867 4120 656c 7472 5220 5353 2049     High Alert RSSI 
10011958:	6172 676e 3a65 2520 6464 6d42 6120 646e     range: %ddBm and
10011968:	6120 6f62 6576 0000 694d 646c 4120 656c      above..Mild Ale
10011978:	7472 5220 5353 2049 6172 676e 3a65 2520     rt RSSI range: %
10011988:	6464 6d42 7420 206f 6425 4264 006d 0000     ddBm to %ddBm...
10011998:	6f4e 4120 656c 7472 5220 5353 2049 6172     No Alert RSSI ra
100119a8:	676e 3a65 2020 2520 6464 6d42 6120 646e     nge:   %ddBm and
100119b8:	6220 6c65 776f 0000 5850 2050 6f43 6e6e      below..PXP Conn
100119c8:	6365 2074 6572 7571 7365 2074 6573 746e     ect request sent
100119d8:	0000 0000 5850 2050 6f43 6e6e 6365 2074     ....PXP Connect 
100119e8:	6572 7571 7365 2074 6573 646e 6620 6961     request send fai
100119f8:	656c 0064 6e49 6f66 203a 6544 6976 6563     led.Info: Device
10011a08:	6620 756f 646e 6120 6464 6572 7373 5b20      found address [
10011a18:	6425 205d 3020 2578 3230 2558 3230 2558     %d]  0x%02X%02X%
10011a28:	3230 2558 3230 2558 3230 2558 3230 2058     02X%02X%02X%02X 
10011a38:	0000 0000 2d2d 502d 5058 0000 6553 656c     ....---PXP..Sele
10011a48:	7463 4920 646e 7865 6e20 6d75 6562 2072     ct Index number 
10011a58:	6f74 4320 6e6f 656e 7463 6f20 2072 735b     to Connect or [s
10011a68:	205d 6f74 7320 6163 006e 0000 6553 656c     ] to scan...Sele
10011a78:	7463 5b20 5d73 7420 206f 6373 6e61 6120     ct [s] to scan a
10011a88:	6167 6e69 0000 0000 7250 786f 6d69 7469     gain....Proximit
10011a98:	2079 7250 666f 6c69 2065 7573 7070 726f     y Profile suppor
10011aa8:	6574 2064 6564 6976 6563 6e20 746f 6620     ted device not f
10011ab8:	756f 646e 0020 0000 6550 6972 6870 7265     ound ...Peripher
10011ac8:	6c61 6920 2073 6c61 6572 6461 2079 6441     al is already Ad
10011ad8:	6576 7472 7369 6e69 2e67 5320 6163 206e     vertising. Scan 
10011ae8:	6f6e 2074 6570 6d72 7469 6574 0064 0000     not permitted...
10011af8:	6553 656c 7463 5b20 5d72 7420 206f 6552     Select [r] to Re
10011b08:	6f63 6e6e 6365 2074 726f 5b20 5d73 5320     connect or [s] S
10011b18:	6163 006e 5850 2050 6552 432d 6e6f 656e     can.PXP Re-Conne
10011b28:	7463 7220 7165 6575 7473 7320 6e65 0074     ct request sent.
10011b38:	5850 2050 6552 432d 6e6f 656e 7463 7220     PXP Re-Connect r
10011b48:	7165 6575 7473 7320 6e65 2064 6166 6c69     equest send fail
10011b58:	6465 0000 6550 6972 6870 7265 6c61 6920     ed..Peripheral i
10011b68:	2073 6c61 6572 6461 2079 6441 6576 7472     s already Advert
10011b78:	7369 6e69 2c67 6353 6e61 6e20 746f 7020     ising,Scan not p
10011b88:	7265 696d 7474 6465 0000 0000 4147 5454     ermitted....GATT
10011b98:	4420 7369 6f63 6576 7972 7220 7165 6575      Discovery reque
10011ba8:	7473 7320 6174 7472 6465 0020 4147 5454     st started .GATT
10011bb8:	4420 7369 6f63 6576 7972 7220 7165 6575      Discovery reque
10011bc8:	7473 6620 6961 656c 0064 0000 694c 6b6e     st failed...Link
10011bd8:	4c20 736f 2073 6c41 7265 2074 656c 6576      Loss Alert leve
10011be8:	206c 6573 2074 6f74 0000 0000 4e20 204f     l set to.... NO 
10011bf8:	4c41 5245 2054 0000 4d20 4c49 2044 4c41     ALERT .. MILD AL
10011c08:	5245 2054 0000 0000 4820 4749 2048 4c41     ERT .... HIGH AL
10011c18:	5245 2054 0000 0000 7854 5020 776f 7265     ERT ....Tx Power
10011c28:	6f20 2066 6564 6976 6563 6920 2073 3025      of device is %0
10011c38:	6432 6420 6d42 0000 93c0 1000 93ce 1000     2d dBm..........
10011c48:	93dc 1000 93ea 1000 93f8 1000 9406 1000     ................
10011c58:	9414 1000 9424 1000 9434 1000 9444 1000     ....$...4...D...
10011c68:	9454 1000 9464 1000 9474 1000 9484 1000     T...d...t.......
10011c78:	9494 1000 94a4 1000 94b4 1000 94c4 1000     ................
10011c88:	94d4 1000 94e4 1000 94f4 1000 9504 1000     ................
10011c98:	9514 1000 9524 1000 9534 1000 9544 1000     ....$...4...D...
10011ca8:	9554 1000 9564 1000 9572 1000 9580 1000     T...d...r.......
10011cb8:	958e 1000 959c 1000 95aa 1000 95b8 1000     ................
10011cc8:	95c6 1000 95d4 1000 95e4 1000 95f4 1000     ................
10011cd8:	9604 1000 9614 1000 9624 1000 9634 1000     ........$...4...
10011ce8:	9644 1000 9654 1000 9664 1000 9674 1000     D...T...d...t...
10011cf8:	9684 1000 9694 1000 96a4 1000 96b4 1000     ................
10011d08:	96c4 1000 96d4 1000 96e2 1000 96f0 1000     ................
10011d18:	9730 1000 9758 1000 9780 1000 97a8 1000     0...X...........
10011d28:	99e8 1000 97d8 1000 97f0 1000 9868 1000     ............h...
10011d38:	9880 1000 9808 1000 9820 1000 9838 1000     ........ ...8...
10011d48:	9850 1000 9898 1000 9b5c 1000 9b5c 1000     P.......\...\...
10011d58:	9b5c 1000 9b5c 1000 9b5c 1000 9b5c 1000     \...\...\...\...
10011d68:	9b5c 1000 9b5c 1000 9940 1000 9958 1000     \...\...@...X...
10011d78:	9970 1000 99fe 1000 98c8 1000 9b5c 1000     p...........\...
10011d88:	9b5c 1000 9b5c 1000 9b5c 1000 9b5c 1000     \...\...\...\...
10011d98:	9b5c 1000 9988 1000 99a0 1000 99b8 1000     \...............
10011da8:	99d0 1000 9b5c 1000 9b14 1000 9b2c 1000     ....\.......,...
10011db8:	9b5c 1000 9b5c 1000 9a2a 1000 9a40 1000     \...\...*...@...
10011dc8:	9a56 1000 9a6c 1000 9b5c 1000 9b5c 1000     V...l...\...\...
10011dd8:	9b5c 1000 9b5c 1000 9b5c 1000 9b5c 1000     \...\...\...\...
10011de8:	9b5c 1000 9b5c 1000 971c 1000 9744 1000     \...\.......D...
10011df8:	976c 1000 9794 1000 97c0 1000 98b0 1000     l...............
10011e08:	98e0 1000 98f8 1000 9910 1000 9928 1000     ............(...
10011e18:	9a14 1000 9a82 1000 9afc 1000 9b44 1000     ............D...
10011e28:	a256 1000 a268 1000 a23e 1000 a23e 1000     V...h...>...>...
10011e38:	a23e 1000 a256 1000 a23e 1000 a23e 1000     >...V...>...>...
10011e48:	ac5a 1000 acce 1000 ac42 1000 acd4 1000     Z.......B.......
10011e58:	ac48 1000 ac4e 1000 ac54 1000 b64c 1000     H...N...T...L...
10011e68:	b64c 1000 b64c 1000 b64c 1000 b64c 1000     L...L...L...L...
10011e78:	b64c 1000 b64c 1000 b64c 1000 b64c 1000     L...L...L...L...
10011e88:	b64c 1000 b64c 1000 b64c 1000 b64c 1000     L...L...L...L...
10011e98:	b64c 1000 b64c 1000 b64c 1000 b64c 1000     L...L...L...L...
10011ea8:	b64c 1000 b64c 1000 b66a 1000 b66a 1000     L...L...j...j...
10011eb8:	b66a 1000 b66a 1000 b66a 1000 b66a 1000     j...j...j...j...
10011ec8:	b66a 1000 b66a 1000 b66a 1000 b66a 1000     j...j...j...j...
10011ed8:	b68c 1000 b68c 1000 b68c 1000 b68c 1000     ................
10011ee8:	b68c 1000 b68c 1000 b68c 1000 b68c 1000     ................
10011ef8:	b68c 1000 b68c 1000 b6bc 1000 b6bc 1000     ................
10011f08:	b6bc 1000 b6bc 1000 b6bc 1000 b6bc 1000     ................
10011f18:	b6d6 1000 b6d6 1000 b6d6 1000 b6d6 1000     ................
10011f28:	b6d6 1000 b6d6 1000 b6d6 1000 b6d6 1000     ................
10011f38:	b6d6 1000 b6f0 1000 b6f0 1000 b712 1000     ................
10011f48:	b712 1000 b72c 1000 b712 1000 3231 3433     ....,.......1234
10011f58:	3635 0000 ab00 efcd cdab 00ef 0600 b2d6     56..............
10011f68:	05f0 f8f0 0000 0000                         ........

10011f70 <ble_mgr_gatt_server_handle>:
	...
10011f88:	a151 1000 a179 1000 a1c1 1000 0000 0000     Q...y...........
10011f98:	6e55 6564 6966 656e 2064 7645 6e65 2074     Undefined Event 
10011fa8:	6552 6563 7669 6465 0000 0000 6353 6e61     Received....Scan
10011fb8:	696e 676e 2020 6166 6c69 6465 0000 0000     ning  failed....
10011fc8:	4c42 2d45 544d 2055 6843 6e61 6567 2c64     BLE-MTU Changed,
10011fd8:	4320 6e6f 656e 7463 6f69 206e 6148 646e      Connection Hand
10011fe8:	656c 203a 6425 202c 654e 2077 6156 756c     le: %d, New Valu
10011ff8:	3a65 2520 0064 0000 544d 2055 6843 6e61     e: %d...MTU Chan
10012008:	6567 2c64 4320 6e6f 656e 7463 6f69 206e     ged, Connection 
10012018:	6148 646e 656c 253a 2c64 4f20 6570 6172     Handle:%d, Opera
10012028:	6974 6e6f 253a 0064 544d 2055 6843 6e61     tion:%d.MTU Chan
10012038:	6567 4620 6961 656c 2c64 4320 6e6f 656e     ge Failed, Conne
10012048:	7463 6f69 206e 6148 646e 656c 253a 2c64     ction Handle:%d,
10012058:	4f20 6570 6172 6974 6e6f 253a 0064 0000      Operation:%d...
10012068:	6843 7261 5720 6972 6574 4320 646d 4320     Char Write Cmd C
10012078:	6d6f 6c70 7465 2c65 4320 6e6f 656e 7463     omplete, Connect
10012088:	6f69 206e 6148 646e 656c 253a 2c64 4f20     ion Handle:%d, O
10012098:	6570 6172 6974 6e6f 253a 0064 6843 7261     peration:%d.Char
100120a8:	5720 6972 6574 4320 646d 4620 6961 656c      Write Cmd Faile
100120b8:	2c64 4320 6e6f 656e 7463 6f69 206e 6148     d, Connection Ha
100120c8:	646e 656c 253a 2c64 4f20 6570 6172 6974     ndle:%d, Operati
100120d8:	6e6f 253a 0064 0000 7453 7461 2065 6f4e     on:%d...State No
100120e8:	2074 6148 646e 656c 2064 6425 0000 0000     t Handled %d....
100120f8:	6544 6976 6563 6420 7369 6f63 6e6e 6365     Device disconnec
10012108:	6574 2064 6552 7361 6e6f 303a 2578 3230     ted Reason:0x%02
10012118:	2078 6148 646e 656c 303d 2578 0078 0000     x Handle=0x%x...
10012128:	5441 425f 454c 435f 4e4f 5f4e 4150 4152     AT_BLE_CONN_PARA
10012138:	5f4d 5055 4144 4554 0020 0000 6e45 7263     M_UPDATE ...Encr
10012148:	7079 6974 6e6f 6620 6961 656c 0064 0000     yption failed...
10012158:	6e45 7263 7079 6974 6e6f 6320 6d6f 6c70     Encryption compl
10012168:	7465 6465 7320 6375 6563 7373 7566 6c6c     eted successfull
10012178:	0079 0000 4c42 2045 6544 6976 6563 6e20     y...BLE Device n
10012188:	746f 6620 756f 646e 6520 636e 7972 7470     ot found encrypt
10012198:	6f69 206e 6e69 6f66 0000 0000 6e49 6f66     ion info....Info
100121a8:	443a 7665 6369 2065 6f66 6e75 2064 6461     :Device found ad
100121b8:	7264 7365 2073 255b 5d64 2020 7830 3025     dress [%d]  0x%0
100121c8:	5832 3025 5832 3025 5832 3025 5832 3025     2X%02X%02X%02X%0
100121d8:	5832 3025 5832 0020 6e49 6f66 6d3a 7861     2X%02X .Info:max
100121e8:	6d69 6d75 6e20 2e6f 666f 7320 6163 206e     imum no.of scan 
100121f8:	6564 6976 6563 7220 6165 6863 6465 2e2e     device reached..
10012208:	532e 6f74 7070 6e69 2067 6353 6e61 0000     .Stopping Scan..
10012218:	6146 6c69 6465 7420 206f 7473 706f 7320     Failed to stop s
10012228:	6163 6e6e 6e69 0067 7830 3025 5832 202c     canning.0x%02X, 
10012238:	0000 0000 5343 4b52 203a 0000 5249 3a4b     ....CSRK: ..IRK:
10012248:	0000 0000 6150 7269 6e69 2067 6166 6c69     ....Pairing fail
10012258:	6465 2e2e 442e 7369 6f63 6e6e 6365 6974     ed...Disconnecti
10012268:	676e 0000 6944 6373 6e6f 656e 7463 5220     ng..Disconnect R
10012278:	7165 6575 7473 4620 6961 656c 0064 0000     equest Failed...
10012288:	6150 7269 6e69 2067 7270 636f 6465 7275     Pairing procedur
10012298:	2065 6f63 706d 656c 6574 2064 7573 6363     e completed succ
100122a8:	7365 6673 6c75 796c 0000 0000 4c42 2045     essfully....BLE 
100122b8:	6544 6976 6563 6e20 746f 6620 756f 646e     Device not found
100122c8:	7420 206f 7473 726f 2065 6874 2065 6170      to store the pa
100122d8:	7269 6e69 2067 6e69 6f66 0000 544c 3a4b     iring info..LTK:
100122e8:	0020 0000 6e45 7263 7079 6974 6e6f 4e20      ...Encryption N
100122f8:	746f 7320 6174 7472 6465 0000 6c53 7661     ot started..Slav
10012308:	2065 6553 7563 6972 7974 5220 7165 2d20     e Security Req -
10012318:	4120 7475 6568 746e 6369 7461 6f69 206e      Authentication 
10012328:	6146 6c69 6465 0000 6547 656e 6172 6574     Failed..Generate
10012338:	2064 544c 3a4b 0020 7830 3025 5832 0020     d LTK: .0x%02X .
10012348:	6553 646e 6e69 2067 6170 7269 6e69 2067     Sending pairing 
10012358:	6572 7073 6e6f 6573 0000 0000 6150 7269     response....Pair
10012368:	5220 7165 6575 7473 2d20 4120 7475 6568      Request - Authe
10012378:	746e 6369 7461 6f69 206e 6146 6c69 6465     ntication Failed
10012388:	0000 0000 6e45 6574 2072 6874 2065 6150     ....Enter the Pa
10012398:	7373 656b 2879 2d36 6944 6967 2974 6920     sskey(6-Digit) i
100123a8:	206e 6554 6d72 6e69 6c61 003a 6950 206e     n Terminal:.Pin 
100123b8:	6954 656d 756f 0074 6944 6373 6e6f 656e     Timeout.Disconne
100123c8:	7463 6e69 2067 2e2e 002e 0000 6c50 6165     cting ......Plea
100123d8:	6573 4520 746e 7265 7420 6568 6620 6c6f     se Enter the fol
100123e8:	6f6c 6977 676e 5020 7361 2d73 6f63 6564     lowing Pass-code
100123f8:	6f28 206e 746f 6568 2072 6544 6976 6563     (on other Device
10012408:	3a29 0000 6150 7269 6b2d 7965 7220 7065     ):..Pair-key rep
10012418:	796c 6620 6961 656c 0064 0000 4f4f 2042     ly failed...OOB 
10012428:	6546 7461 7275 2065 6f4e 2074 7573 7070     Feature Not supp
10012438:	726f 6574 0064 0000 6e45 6574 6572 2064     orted...Entered 
10012448:	6150 7373 632d 646f 3a65 0000 4e45 2d43     Pass-code:..ENC-
10012458:	6552 3a71 4320 6e6f 206e 6148 646e 656c     Req: Conn Handle
10012468:	4420 7665 6369 2065 6f46 6e75 3a64 6468      Device Found:hd
10012478:	3a6c 6425 0000 0000 6f68 7473 6420 7665     l:%d....host dev
10012488:	6369 2065 6465 7669 2520 0078 6570 7265     ice ediv %x.peer
10012498:	6420 7665 6369 2065 6465 7669 2520 0078      device ediv %x.
100124a8:	6e65 5f63 6572 2071 6465 7669 2520 0078     enc_req ediv %x.
100124b8:	6854 2065 6e69 6564 2078 7369 2520 0064     The index is %d.
100124c8:	4e45 2d43 6552 3a71 4b20 7965 4620 756f     ENC-Req: Key Fou
100124d8:	646e 0000 6150 7269 6e69 2067 6e69 6f66     nd..Pairing info
100124e8:	6d72 7461 6f69 206e 666f 7020 6565 2072     rmation of peer 
100124f8:	6564 6976 6563 6920 2073 6f6e 2074 7661     device is not av
10012508:	6961 616c 6c62 2e65 0000 0000 6c50 6165     ailable.....Plea
10012518:	6573 7520 706e 6961 2072 6874 2065 6564     se unpair the de
10012528:	6976 6563 6620 6f72 206d 6570 7265 6420     vice from peer d
10012538:	7665 6369 2865 6f6d 6962 656c 2029 6573     evice(mobile) se
10012548:	7474 6e69 7367 6d20 6e65 2075 6e61 2064     ttings menu and 
10012558:	7473 7261 2074 6170 7269 6e69 2067 6761     start pairing ag
10012568:	6961 006e 6e45 7263 7079 6974 6e6f 5220     ain.Encryption R
10012578:	7165 6575 7473 5220 7065 796c 4620 6961     equest Reply Fai
10012588:	656c 0064 6e45 7263 7079 6974 6e6f 5220     led.Encryption R
10012598:	7165 6575 7473 5220 7065 796c 0000 0000     equest Reply....
100125a8:	6e49 7469 6169 696c 697a 676e 5320 4d41     Initializing SAM
100125b8:	3142 0031 4153 424d 3131 4920 696e 6974     B11.SAMB11 Initi
100125c8:	6c61 7a69 7461 6f69 206e 6166 6c69 6465     alization failed
100125d8:	0000 0000 6c50 6165 6573 6320 6568 6b63     ....Please check
100125e8:	7420 6568 7020 776f 7265 6120 646e 6320      the power and c
100125f8:	6e6f 656e 7463 6f69 206e 202f 6168 6472     onnection / hard
10012608:	6177 6572 6320 6e6f 656e 7463 726f 0000     ware connector..
10012618:	4153 5242 2d45 4d53 0053 0000 6544 6976     SABRE-SMS...Devi
10012628:	6563 6e20 6d61 2065 6573 2074 6166 6c69     ce name set fail
10012638:	6465 0000 4442 6120 6464 6572 7373 6720     ed..BD address g
10012648:	7465 6620 6961 656c 0064 0000 4442 4120     et failed...BD A
10012658:	6464 6572 7373 303a 2578 3230 2558 3230     ddress:0x%02X%02
10012668:	2558 3230 2558 3230 2558 3230 2558 3230     X%02X%02X%02X%02
10012678:	2c58 4120 6464 6572 7373 5420 7079 3a65     X, Address Type:
10012688:	6425 0000 6553 2074 4c42 2045 6544 6976     %d..Set BLE Devi
10012698:	6563 6320 6e6f 6966 7567 6172 6974 6e6f     ce configuration
100126a8:	6620 6961 656c 0064 6553 2074 4c42 2045      failed.Set BLE 
100126b8:	6544 6976 6563 4120 6464 6572 7373 6620     Device Address f
100126c8:	6961 656c 0064 0000 6353 6e61 696e 676e     ailed...Scanning
100126d8:	2e2e 502e 656c 7361 2065 6177 7469 2e2e     ...Please wait..
100126e8:	002e 0000 6c53 7661 2065 6573 7563 6972     ....Slave securi
100126f8:	7974 7220 7165 6575 7473 7320 6375 6563     ty request succe
10012708:	7373 7566 006c 0000 6c53 7661 2065 6573     ssful...Slave se
10012718:	7563 6972 7974 7220 7165 6575 7473 6620     curity request f
10012728:	6961 656c 0064 0000 6f43 6e6e 6365 6574     ailed...Connecte
10012738:	2064 6f74 7020 6565 2072 6564 6976 6563     d to peer device
10012748:	7720 7469 2068 6461 7264 7365 2073 7830      with address 0x
10012758:	3025 7832 3025 7832 3025 7832 3025 7832     %02x%02x%02x%02x
10012768:	3025 7832 3025 7832 0000 0000 6f43 6e6e     %02x%02x....Conn
10012778:	6365 6974 6e6f 4820 6e61 6c64 2065 6425     ection Handle %d
10012788:	0000 0000 6552 6f73 766c 6e69 2067 6152     ....Resolving Ra
10012798:	646e 6d6f 6120 6464 6572 7373 7320 6375     ndom address suc
100127a8:	6563 7373 2a2a 0000 6552 6f73 766c 6e69     cess**..Resolvin
100127b8:	2067 6152 646e 6d6f 6120 6464 6572 7373     g Random address
100127c8:	6620 6961 656c 2a64 002a 0000 614d 2078      failed**...Max 
100127d8:	756e 626d 7265 6f20 2066 6f63 6e6e 6365     number of connec
100127e8:	6974 6e6f 7220 6165 6863 6465 203a 6425     tion reached: %d
100127f8:	3d20 3d3d 443e 7369 6f63 6e6e 6365 6974      ===>Disconnecti
10012808:	676e 2e2e 002e 0000 6544 6976 6563 4320     ng......Device C
10012818:	6e6f 656e 7463 6f69 206e 6146 6c69 6465     onnection Failed
10012828:	2d20 5320 6174 7574 3a73 2520 0064 0000      - Status: %d...
10012838:	2323 2323 2323 2323 2323 6544 6976 6563     ##########Device
10012848:	4620 756f 646e 0000 2323 2323 2323 2323      Found..########
10012858:	2323 6544 6976 6563 4e20 746f 4620 756f     ##Device Not Fou
10012868:	646e 0000 6544 6976 6563 6920 7864 253a     nd..Device idx:%
10012878:	0064 0000 4c42 2d45 7645 6e65 3a74 6425     d...BLE-Event:%d
10012888:	0000 0000 4147 5454 535f 7265 6576 2072     ....GATT_Server 
10012898:	7645 6e65 3a74 6425 0000 0000 4c42 2d45     Event:%d....BLE-
100128a8:	614d 616e 6567 3a72 6e55 6e6b 776f 206e     Manager:Unknown 
100128b8:	7645 6e65 3d74 7830 5825 0000 4c42 2045     Event=0x%X..BLE 
100128c8:	6441 6576 7472 7369 6d65 6e65 2074 6164     Advertisement da
100128d8:	6174 7320 7465 6620 6961 656c 0064 0000     ta set failed...
100128e8:	4c42 2045 6441 6576 7472 7369 6d65 6e65     BLE Advertisemen
100128f8:	2074 6164 6174 7320 7465 7320 6375 6563     t data set succe
10012908:	7373 0000                                   ss..

1001290c <ble_mgr_gap_handle>:
1001290c:	a105 1000 a38d 1000 a129 1000 0000 0000     ........).......
1001291c:	0000 0000 b1a1 1000 a209 1000 a2a5 1000     ................
1001292c:	a5e9 1000 a439 1000 a7e9 1000 a601 1000     ....9...........
1001293c:	a975 1000 aab9 1000 a2c9 1000 b3ed 1000     u...............
	...
10012958:	745b 6d69 7265 635f 6c61 626c 6361 5f6b     [timer_callback_
10012968:	6e66 005d 625b 7475 6f74 5f6e 6263 005d     fn].[button_cb].
10012978:	6e49 7469 6169 696c 697a 676e 4220 454c     Initializing BLE
10012988:	4120 7070 696c 6163 6974 6e6f 0000 0000      Application....
10012998:	7441 656d 206c 6f43 7072 002e                    Atmel Corp.

100129a3 <CSWTCH.47>:
100129a3:	0300 0301 0303 0303 0303 0303 0303 0002     ................
100129b3:	5c00 00f6 1c10 00f5 1c10 00f5 1a10 00f5     .\..............
100129c3:	3410 00f6 3410 00f6 2610 00f6 1a10 00f5     .4...4...&......
100129d3:	3410 00f6 2610 00f6 3410 00f6 1a10 00f5     .4...&...4......
100129e3:	3c10 00f6 3c10 00f6 3c10 00f6 3c10 00f8     .<...<...<...<..
100129f3:	4310 0000 dc00                                   .C...

100129f8 <_global_impure_ptr>:
100129f8:	2adc 1001                                   .*..

100129fc <__sf_fake_stdin>:
	...

10012a1c <__sf_fake_stdout>:
	...

10012a3c <__sf_fake_stderr>:
	...
10012a5c:	2d23 2b30 0020 6c68 004c 6665 4567 4746     #-0+ .hlL.efgEFG
10012a6c:	3000 3231 3433 3635 3837 4139 4342 4544     .0123456789ABCDE
10012a7c:	0046 3130 3332 3534 3736 3938 6261 6463     F.0123456789abcd
10012a8c:	6665 0000                                   ef..

10012a90 <_init>:
10012a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10012a92:	46c0      	nop			; (mov r8, r8)
10012a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
10012a96:	bc08      	pop	{r3}
10012a98:	469e      	mov	lr, r3
10012a9a:	4770      	bx	lr

10012a9c <__init_array_start>:
10012a9c:	100080b1 	.word	0x100080b1

10012aa0 <_fini>:
10012aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10012aa2:	46c0      	nop			; (mov r8, r8)
10012aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
10012aa6:	bc08      	pop	{r3}
10012aa8:	469e      	mov	lr, r3
10012aaa:	4770      	bx	lr

10012aac <__fini_array_start>:
10012aac:	10008089 	.word	0x10008089
