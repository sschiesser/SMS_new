
SMS_Central1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009820  10008000  10008000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000074  10011820  10011820  00011820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00002d4c  10011894  10011894  00011894  2**2
                  ALLOC
  3 .stack        00000800  100145e0  100145e0  00011894  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00011894  2**0
                  CONTENTS, READONLY
  5 .comment      000000b4  00000000  00000000  000118bc  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002d00e  00000000  00000000  00011970  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003772  00000000  00000000  0003e97e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00006498  00000000  00000000  000420f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000870  00000000  00000000  00048588  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000008a0  00000000  00000000  00048df8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00023394  00000000  00000000  00049698  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000f137  00000000  00000000  0006ca2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0013e64e  00000000  00000000  0007bb63  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001ec8  00000000  00000000  001ba1b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

10008000 <app_entry>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void app_entry(void)
{
10008000:	b510      	push	{r4, lr}

    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
10008002:	4b18      	ldr	r3, [pc, #96]	; (10008064 <app_entry+0x64>)
10008004:	4a18      	ldr	r2, [pc, #96]	; (10008068 <app_entry+0x68>)
10008006:	429a      	cmp	r2, r3
10008008:	d003      	beq.n	10008012 <app_entry+0x12>
        for (; pDest < &_erelocate;) {
1000800a:	4b18      	ldr	r3, [pc, #96]	; (1000806c <app_entry+0x6c>)
1000800c:	4a15      	ldr	r2, [pc, #84]	; (10008064 <app_entry+0x64>)
1000800e:	429a      	cmp	r2, r3
10008010:	d304      	bcc.n	1000801c <app_entry+0x1c>
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008012:	4b17      	ldr	r3, [pc, #92]	; (10008070 <app_entry+0x70>)
10008014:	4a17      	ldr	r2, [pc, #92]	; (10008074 <app_entry+0x74>)
10008016:	429a      	cmp	r2, r3
10008018:	d310      	bcc.n	1000803c <app_entry+0x3c>
1000801a:	e01e      	b.n	1000805a <app_entry+0x5a>
1000801c:	4b16      	ldr	r3, [pc, #88]	; (10008078 <app_entry+0x78>)
1000801e:	4a13      	ldr	r2, [pc, #76]	; (1000806c <app_entry+0x6c>)
10008020:	3203      	adds	r2, #3
10008022:	1ad2      	subs	r2, r2, r3
10008024:	0892      	lsrs	r2, r2, #2
10008026:	3201      	adds	r2, #1
10008028:	0092      	lsls	r2, r2, #2
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
1000802a:	2300      	movs	r3, #0
            *pDest++ = *pSrc++;
1000802c:	480d      	ldr	r0, [pc, #52]	; (10008064 <app_entry+0x64>)
1000802e:	490e      	ldr	r1, [pc, #56]	; (10008068 <app_entry+0x68>)
10008030:	58cc      	ldr	r4, [r1, r3]
10008032:	50c4      	str	r4, [r0, r3]
10008034:	3304      	adds	r3, #4
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
10008036:	4293      	cmp	r3, r2
10008038:	d1fa      	bne.n	10008030 <app_entry+0x30>
1000803a:	e7ea      	b.n	10008012 <app_entry+0x12>
1000803c:	4b0f      	ldr	r3, [pc, #60]	; (1000807c <app_entry+0x7c>)
1000803e:	490c      	ldr	r1, [pc, #48]	; (10008070 <app_entry+0x70>)
10008040:	3103      	adds	r1, #3
10008042:	1ac9      	subs	r1, r1, r3
10008044:	0889      	lsrs	r1, r1, #2
10008046:	3101      	adds	r1, #1
10008048:	0089      	lsls	r1, r1, #2
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
1000804a:	2300      	movs	r3, #0
        *pDest++ = 0;
1000804c:	4c09      	ldr	r4, [pc, #36]	; (10008074 <app_entry+0x74>)
1000804e:	2000      	movs	r0, #0
10008050:	191a      	adds	r2, r3, r4
10008052:	6010      	str	r0, [r2, #0]
10008054:	3304      	adds	r3, #4
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008056:	428b      	cmp	r3, r1
10008058:	d1fa      	bne.n	10008050 <app_entry+0x50>
        *pDest++ = 0;
    }

    /* Initialize the C library */
    __libc_init_array();
1000805a:	4b09      	ldr	r3, [pc, #36]	; (10008080 <app_entry+0x80>)
1000805c:	4798      	blx	r3

    /* Branch to main function */
    main();
1000805e:	4b09      	ldr	r3, [pc, #36]	; (10008084 <app_entry+0x84>)
10008060:	4798      	blx	r3

    /* return to BLE OS*/
    return;
}
10008062:	bd10      	pop	{r4, pc}
10008064:	10011820 	.word	0x10011820
10008068:	10011820 	.word	0x10011820
1000806c:	10011894 	.word	0x10011894
10008070:	100145e0 	.word	0x100145e0
10008074:	10011894 	.word	0x10011894
10008078:	10011824 	.word	0x10011824
1000807c:	10011898 	.word	0x10011898
10008080:	1000f659 	.word	0x1000f659
10008084:	1000bc11 	.word	0x1000bc11

10008088 <__do_global_dtors_aux>:
10008088:	b510      	push	{r4, lr}
1000808a:	4c06      	ldr	r4, [pc, #24]	; (100080a4 <__do_global_dtors_aux+0x1c>)
1000808c:	7823      	ldrb	r3, [r4, #0]
1000808e:	2b00      	cmp	r3, #0
10008090:	d107      	bne.n	100080a2 <__do_global_dtors_aux+0x1a>
10008092:	4b05      	ldr	r3, [pc, #20]	; (100080a8 <__do_global_dtors_aux+0x20>)
10008094:	2b00      	cmp	r3, #0
10008096:	d002      	beq.n	1000809e <__do_global_dtors_aux+0x16>
10008098:	4804      	ldr	r0, [pc, #16]	; (100080ac <__do_global_dtors_aux+0x24>)
1000809a:	e000      	b.n	1000809e <__do_global_dtors_aux+0x16>
1000809c:	bf00      	nop
1000809e:	2301      	movs	r3, #1
100080a0:	7023      	strb	r3, [r4, #0]
100080a2:	bd10      	pop	{r4, pc}
100080a4:	10011894 	.word	0x10011894
100080a8:	00000000 	.word	0x00000000
100080ac:	10011820 	.word	0x10011820

100080b0 <frame_dummy>:
100080b0:	4b08      	ldr	r3, [pc, #32]	; (100080d4 <frame_dummy+0x24>)
100080b2:	b510      	push	{r4, lr}
100080b4:	2b00      	cmp	r3, #0
100080b6:	d003      	beq.n	100080c0 <frame_dummy+0x10>
100080b8:	4907      	ldr	r1, [pc, #28]	; (100080d8 <frame_dummy+0x28>)
100080ba:	4808      	ldr	r0, [pc, #32]	; (100080dc <frame_dummy+0x2c>)
100080bc:	e000      	b.n	100080c0 <frame_dummy+0x10>
100080be:	bf00      	nop
100080c0:	4807      	ldr	r0, [pc, #28]	; (100080e0 <frame_dummy+0x30>)
100080c2:	6803      	ldr	r3, [r0, #0]
100080c4:	2b00      	cmp	r3, #0
100080c6:	d100      	bne.n	100080ca <frame_dummy+0x1a>
100080c8:	bd10      	pop	{r4, pc}
100080ca:	4b06      	ldr	r3, [pc, #24]	; (100080e4 <frame_dummy+0x34>)
100080cc:	2b00      	cmp	r3, #0
100080ce:	d0fb      	beq.n	100080c8 <frame_dummy+0x18>
100080d0:	4798      	blx	r3
100080d2:	e7f9      	b.n	100080c8 <frame_dummy+0x18>
100080d4:	00000000 	.word	0x00000000
100080d8:	10011898 	.word	0x10011898
100080dc:	10011820 	.word	0x10011820
100080e0:	10011820 	.word	0x10011820
100080e4:	00000000 	.word	0x00000000

100080e8 <sms_ble_scan_report_fn>:

/* AT_BLE_SCAN_REPORT (#2) */
at_ble_status_t sms_ble_scan_report_fn(void *params)
{
    return AT_BLE_SUCCESS;
}
100080e8:	2000      	movs	r0, #0
100080ea:	4770      	bx	lr

100080ec <sms_ble_connected_fn>:

/* AT_BLE_CONNECTED (#5) */
at_ble_status_t sms_ble_connected_fn(void *params)
{
    return AT_BLE_SUCCESS;
}
100080ec:	2000      	movs	r0, #0
100080ee:	4770      	bx	lr

100080f0 <sms_ble_disconnected_fn>:

/* AT_BLE_DISCONNECTED (#6) */
at_ble_status_t sms_ble_disconnected_fn(void *params)
{
    return AT_BLE_SUCCESS;
}
100080f0:	2000      	movs	r0, #0
100080f2:	4770      	bx	lr

100080f4 <sms_ble_paired_fn>:

/* AT_BLE_PAIR_DONE (#9) */
at_ble_status_t sms_ble_paired_fn(void *params)
{ 
    return AT_BLE_SUCCESS;
}
100080f4:	2000      	movs	r0, #0
100080f6:	4770      	bx	lr

100080f8 <sms_ble_primary_service_found_fn>:

/* AT_BLE_PRIMARY_SERVICE_FOUND (#19) */
at_ble_status_t sms_ble_primary_service_found_fn(void *params)
{
    return AT_BLE_SUCCESS;
}
100080f8:	2000      	movs	r0, #0
100080fa:	4770      	bx	lr

100080fc <sms_ble_characteristic_found_fn>:

/* AT_BLE_CHARACTERISTIC_FOUND (#21) */
at_ble_status_t sms_ble_characteristic_found_fn(void *params)
{
    return AT_BLE_SUCCESS;
}
100080fc:	2000      	movs	r0, #0
100080fe:	4770      	bx	lr

10008100 <sms_ble_discovery_complete_fn>:

/* AT_BLE_DISCOVERY_COMPLETE (#23) */
at_ble_status_t sms_ble_discovery_complete_fn(void *params)
{
    return AT_BLE_SUCCESS;
}
10008100:	2000      	movs	r0, #0
10008102:	4770      	bx	lr

10008104 <sms_ble_characteristic_read_fn>:

/* AT_BLE_CHARACTERISTIC_READ_BY_UUID_RESPONSE (#24) */
at_ble_status_t sms_ble_characteristic_read_fn(void *params)
{
    return AT_BLE_SUCCESS;
}
10008104:	2000      	movs	r0, #0
10008106:	4770      	bx	lr

10008108 <sms_ble_notification_received_fn>:

/* AT_BLE_NOTIFICATION_RECEIVED (#27) */
at_ble_status_t sms_ble_notification_received_fn(void *params)
{
    return AT_BLE_SUCCESS;
}
10008108:	2000      	movs	r0, #0
1000810a:	4770      	bx	lr

1000810c <sms_ble_indication_received_fn>:

/* AT_BLE_INDICATION_RECEIVED (#28) */
at_ble_status_t sms_ble_indication_received_fn(void *params)
{
    return AT_BLE_SUCCESS;
}
1000810c:	2000      	movs	r0, #0
1000810e:	4770      	bx	lr

10008110 <sms_button_configure_gpio>:
/* Callback functions --> doing things                                  */
/************************************************************************/

/* Initialize gpio for button inputs */
void sms_button_configure_gpio(void)
{
10008110:	b510      	push	{r4, lr}
10008112:	b082      	sub	sp, #8
    //if(gpio_pin_set_config(btn1_instance.gpio_pin, &config_gpio_pin) != STATUS_OK) {
        //DBG_LOG("[sms_button_configure]\tProblem while setting up button1");
    //}

    /* Button 0 on SAMB11 XPLAINED */
    gpio_get_config_defaults(&config_gpio_pin);
10008114:	ac01      	add	r4, sp, #4
10008116:	0020      	movs	r0, r4
10008118:	4b09      	ldr	r3, [pc, #36]	; (10008140 <sms_button_configure_gpio+0x30>)
1000811a:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
1000811c:	2300      	movs	r3, #0
1000811e:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_NONE;
10008120:	7063      	strb	r3, [r4, #1]
    if(gpio_pin_set_config(BUTTON_0_PIN, &config_gpio_pin) != STATUS_OK) {
10008122:	0021      	movs	r1, r4
10008124:	2017      	movs	r0, #23
10008126:	4b07      	ldr	r3, [pc, #28]	; (10008144 <sms_button_configure_gpio+0x34>)
10008128:	4798      	blx	r3
1000812a:	2800      	cmp	r0, #0
1000812c:	d005      	beq.n	1000813a <sms_button_configure_gpio+0x2a>
        DBG_LOG("[sms_button_configure]\tProblem while setting up XPLAINED user button");
1000812e:	4806      	ldr	r0, [pc, #24]	; (10008148 <sms_button_configure_gpio+0x38>)
10008130:	4b06      	ldr	r3, [pc, #24]	; (1000814c <sms_button_configure_gpio+0x3c>)
10008132:	4798      	blx	r3
10008134:	4806      	ldr	r0, [pc, #24]	; (10008150 <sms_button_configure_gpio+0x40>)
10008136:	4b07      	ldr	r3, [pc, #28]	; (10008154 <sms_button_configure_gpio+0x44>)
10008138:	4798      	blx	r3
    }
}
1000813a:	b002      	add	sp, #8
1000813c:	bd10      	pop	{r4, pc}
1000813e:	46c0      	nop			; (mov r8, r8)
10008140:	10008985 	.word	0x10008985
10008144:	10008995 	.word	0x10008995
10008148:	1001095c 	.word	0x1001095c
1000814c:	1000f805 	.word	0x1000f805
10008150:	10010960 	.word	0x10010960
10008154:	1000f6e5 	.word	0x1000f6e5

10008158 <sms_button_register_callbacks>:
    ///* Button1 callback */
    //gpio_register_callback(btn1_instance.gpio_pin, sms_button_bt1_callback, GPIO_CALLBACK_RISING);
    ////gpio_enable_callback(SMS_BTN_1_PIN);
    
    /* User button callback */
}
10008158:	4770      	bx	lr
1000815a:	46c0      	nop			; (mov r8, r8)

1000815c <sms_led_switch_off>:
    gpio_pin_set_output_level(led, SMS_LED_ACTIVE);
}


void sms_led_switch_off(enum sms_leds led)
{
1000815c:	b510      	push	{r4, lr}
    gpio_pin_set_output_level(led, SMS_LED_INACTIVE);
1000815e:	2101      	movs	r1, #1
10008160:	4b01      	ldr	r3, [pc, #4]	; (10008168 <sms_led_switch_off+0xc>)
10008162:	4798      	blx	r3
}
10008164:	bd10      	pop	{r4, pc}
10008166:	46c0      	nop			; (mov r8, r8)
10008168:	10008b4d 	.word	0x10008b4d

1000816c <sms_led_gpio_init>:
 */ 

#include "sms_led.h"

void sms_led_gpio_init(void)
{
1000816c:	b510      	push	{r4, lr}
1000816e:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;

    /* LED0 @ GPIO_LP_GPIO_22 */
    gpio_get_config_defaults(&config_gpio_pin);
10008170:	ac01      	add	r4, sp, #4
10008172:	0020      	movs	r0, r4
10008174:	4b0a      	ldr	r3, [pc, #40]	; (100081a0 <sms_led_gpio_init+0x34>)
10008176:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_OUTPUT;
10008178:	2301      	movs	r3, #1
1000817a:	7023      	strb	r3, [r4, #0]
    if(gpio_pin_set_config(SMS_LED_0_PIN, &config_gpio_pin) != STATUS_OK) {
1000817c:	0021      	movs	r1, r4
1000817e:	2016      	movs	r0, #22
10008180:	4b08      	ldr	r3, [pc, #32]	; (100081a4 <sms_led_gpio_init+0x38>)
10008182:	4798      	blx	r3
10008184:	2800      	cmp	r0, #0
10008186:	d005      	beq.n	10008194 <sms_led_gpio_init+0x28>
        DBG_LOG_DEV("[sms_led_gpio_init]\tproblem while setting up led0");
10008188:	4807      	ldr	r0, [pc, #28]	; (100081a8 <sms_led_gpio_init+0x3c>)
1000818a:	4b08      	ldr	r3, [pc, #32]	; (100081ac <sms_led_gpio_init+0x40>)
1000818c:	4798      	blx	r3
1000818e:	4808      	ldr	r0, [pc, #32]	; (100081b0 <sms_led_gpio_init+0x44>)
10008190:	4b08      	ldr	r3, [pc, #32]	; (100081b4 <sms_led_gpio_init+0x48>)
10008192:	4798      	blx	r3
    }
    sms_led_switch_off(SMS_LED_0_PIN);
10008194:	2016      	movs	r0, #22
10008196:	4b08      	ldr	r3, [pc, #32]	; (100081b8 <sms_led_gpio_init+0x4c>)
10008198:	4798      	blx	r3
}
1000819a:	b002      	add	sp, #8
1000819c:	bd10      	pop	{r4, pc}
1000819e:	46c0      	nop			; (mov r8, r8)
100081a0:	10008985 	.word	0x10008985
100081a4:	10008995 	.word	0x10008995
100081a8:	1001095c 	.word	0x1001095c
100081ac:	1000f805 	.word	0x1000f805
100081b0:	100109a8 	.word	0x100109a8
100081b4:	1000f6e5 	.word	0x1000f6e5
100081b8:	1000815d 	.word	0x1000815d

100081bc <sms_spi_master_configure>:
 *   + mode 3 on SPI0 @ 1 MHz for MPU-9250 IMU
 * - assign SS pin for each slave device
 * - enable SPI
 */ 
void sms_spi_master_configure(void)
{
100081bc:	b530      	push	{r4, r5, lr}
100081be:	b08d      	sub	sp, #52	; 0x34
    //DBG_LOG_DEV("[spi_master_configure]\tconfiguring SPI masters and attaching slaves...");

    /* Initialize ms58 spi slave device */
    struct spi_config spi_master_config;
    struct spi_slave_inst_config spi_slave_config;
    spi_slave_inst_get_config_defaults(&spi_slave_config);
100081c0:	ac01      	add	r4, sp, #4
100081c2:	0020      	movs	r0, r4
100081c4:	4b13      	ldr	r3, [pc, #76]	; (10008214 <sms_spi_master_configure+0x58>)
100081c6:	4798      	blx	r3
    spi_slave_config.ss_pin = SPI_SLAVE_SSN_PIN;
100081c8:	230c      	movs	r3, #12
100081ca:	7023      	strb	r3, [r4, #0]
    spi_attach_slave(&spi_slave_instance, &spi_slave_config);
100081cc:	0021      	movs	r1, r4
100081ce:	4812      	ldr	r0, [pc, #72]	; (10008218 <sms_spi_master_configure+0x5c>)
100081d0:	4b12      	ldr	r3, [pc, #72]	; (1000821c <sms_spi_master_configure+0x60>)
100081d2:	4798      	blx	r3
    

    /* Initialize SPI1 master for ms58 */
    spi_get_config_defaults(&spi_master_config);
100081d4:	ac02      	add	r4, sp, #8
100081d6:	0020      	movs	r0, r4
100081d8:	4b11      	ldr	r3, [pc, #68]	; (10008220 <sms_spi_master_configure+0x64>)
100081da:	4798      	blx	r3
    spi_master_config.clock_divider = SPI_MASTER_CLOCK_DIV;
100081dc:	2368      	movs	r3, #104	; 0x68
100081de:	7123      	strb	r3, [r4, #4]
    spi_master_config.transfer_mode = SPI_MASTER_MODE;
100081e0:	2300      	movs	r3, #0
100081e2:	70a3      	strb	r3, [r4, #2]
    spi_master_config.pin_number_pad[0] = SPI_MASTER_PIN_SCK;
100081e4:	3311      	adds	r3, #17
100081e6:	60a3      	str	r3, [r4, #8]
    spi_master_config.pinmux_sel_pad[0] = SPI_MASTER_MUX_SCK;
100081e8:	3b0d      	subs	r3, #13
100081ea:	61a3      	str	r3, [r4, #24]
    spi_master_config.pin_number_pad[1] = SPI_MASTER_PIN_MOSI;
100081ec:	2213      	movs	r2, #19
100081ee:	60e2      	str	r2, [r4, #12]
    spi_master_config.pinmux_sel_pad[1] = SPI_MASTER_MUX_MOSI;
100081f0:	61e3      	str	r3, [r4, #28]
    spi_master_config.pin_number_pad[2] = SPI_MASTER_PIN_SSN;
100081f2:	3a14      	subs	r2, #20
100081f4:	6122      	str	r2, [r4, #16]
    spi_master_config.pinmux_sel_pad[2] = SPI_MASTER_MUX_SSN;
100081f6:	6222      	str	r2, [r4, #32]
    spi_master_config.pin_number_pad[3] = SPI_MASTER_MISO;
100081f8:	3213      	adds	r2, #19
100081fa:	6162      	str	r2, [r4, #20]
    spi_master_config.pinmux_sel_pad[3] = SPI_MASTER_MUX_MISO;
100081fc:	6263      	str	r3, [r4, #36]	; 0x24
    spi_init(&spi_master_instance, SPI_MASTER_PORT, &spi_master_config);
100081fe:	4d09      	ldr	r5, [pc, #36]	; (10008224 <sms_spi_master_configure+0x68>)
10008200:	0022      	movs	r2, r4
10008202:	4909      	ldr	r1, [pc, #36]	; (10008228 <sms_spi_master_configure+0x6c>)
10008204:	0028      	movs	r0, r5
10008206:	4b09      	ldr	r3, [pc, #36]	; (1000822c <sms_spi_master_configure+0x70>)
10008208:	4798      	blx	r3
    spi_enable(&spi_master_instance);
1000820a:	0028      	movs	r0, r5
1000820c:	4b08      	ldr	r3, [pc, #32]	; (10008230 <sms_spi_master_configure+0x74>)
1000820e:	4798      	blx	r3
}
10008210:	b00d      	add	sp, #52	; 0x34
10008212:	bd30      	pop	{r4, r5, pc}
10008214:	10008359 	.word	0x10008359
10008218:	10013354 	.word	0x10013354
1000821c:	10008391 	.word	0x10008391
10008220:	10008365 	.word	0x10008365
10008224:	100133e0 	.word	0x100133e0
10008228:	40007000 	.word	0x40007000
1000822c:	10008461 	.word	0x10008461
10008230:	100083d1 	.word	0x100083d1

10008234 <sms_spi_master_transceive>:
/* SPI transceive function:
 * - enable selected slave
 * - start transceive blocking job
 * - when job returned, disable selected slave
 */
enum status_code sms_spi_master_transceive(struct spi_module *const module, struct spi_slave_inst *const slave, uint8_t *tx_data, uint8_t *rx_data, uint16_t len) {
10008234:	b5f0      	push	{r4, r5, r6, r7, lr}
10008236:	b083      	sub	sp, #12
10008238:	0004      	movs	r4, r0
1000823a:	000d      	movs	r5, r1
1000823c:	9200      	str	r2, [sp, #0]
1000823e:	9301      	str	r3, [sp, #4]
10008240:	ab08      	add	r3, sp, #32
10008242:	881e      	ldrh	r6, [r3, #0]
    enum status_code retVal;
    /* Enable slave */
    //DBG_LOG_CONT_DEV(" selecting slave...");
    spi_select_slave(module, slave, true);
10008244:	2201      	movs	r2, #1
10008246:	4f08      	ldr	r7, [pc, #32]	; (10008268 <sms_spi_master_transceive+0x34>)
10008248:	47b8      	blx	r7
    /* Write SPI data */
    //DBG_LOG_CONT_DEV(" writing data...");
    retVal = spi_transceive_buffer_wait(module, tx_data, rx_data, len);
1000824a:	0033      	movs	r3, r6
1000824c:	9a01      	ldr	r2, [sp, #4]
1000824e:	9900      	ldr	r1, [sp, #0]
10008250:	0020      	movs	r0, r4
10008252:	4e06      	ldr	r6, [pc, #24]	; (1000826c <sms_spi_master_transceive+0x38>)
10008254:	47b0      	blx	r6
10008256:	0006      	movs	r6, r0
    /* Disable slave */
    //DBG_LOG_CONT_DEV(" de-selecting slave...");
    spi_select_slave(module, slave, false);
10008258:	2200      	movs	r2, #0
1000825a:	0029      	movs	r1, r5
1000825c:	0020      	movs	r0, r4
1000825e:	47b8      	blx	r7
    //DBG_LOG_CONT_DEV(" done!");
    return retVal;
}
10008260:	0030      	movs	r0, r6
10008262:	b003      	add	sp, #12
10008264:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008266:	46c0      	nop			; (mov r8, r8)
10008268:	10008649 	.word	0x10008649
1000826c:	100085c5 	.word	0x100085c5

10008270 <sms_dualtimer_init>:

#include "sms_timer.h"

/* DUALTIMER */
void sms_dualtimer_init(void)
{
10008270:	b510      	push	{r4, lr}
10008272:	b088      	sub	sp, #32
    struct dualtimer_config config_dualtimer;
    dualtimer_get_config_defaults(&config_dualtimer);
10008274:	ac01      	add	r4, sp, #4
10008276:	0020      	movs	r0, r4
10008278:	4b08      	ldr	r3, [pc, #32]	; (1000829c <sms_dualtimer_init+0x2c>)
1000827a:	4798      	blx	r3

    config_dualtimer.timer1.load_value = SMS_DUALTIMER_LOAD_S;
1000827c:	4a08      	ldr	r2, [pc, #32]	; (100082a0 <sms_dualtimer_init+0x30>)
1000827e:	60a2      	str	r2, [r4, #8]
    config_dualtimer.timer1.counter_mode = DUALTIMER_ONE_SHOT_MODE;
10008280:	2300      	movs	r3, #0
10008282:	7063      	strb	r3, [r4, #1]
    config_dualtimer.timer2.load_value = SMS_DUALTIMER_LOAD_S;
10008284:	6162      	str	r2, [r4, #20]
    config_dualtimer.timer2.counter_mode = DUALTIMER_ONE_SHOT_MODE;
10008286:	7363      	strb	r3, [r4, #13]

    dualtimer_init(&config_dualtimer);
10008288:	0020      	movs	r0, r4
1000828a:	4b06      	ldr	r3, [pc, #24]	; (100082a4 <sms_dualtimer_init+0x34>)
1000828c:	4798      	blx	r3
    dualtimer_disable(DUALTIMER_TIMER1);
1000828e:	2000      	movs	r0, #0
10008290:	4c05      	ldr	r4, [pc, #20]	; (100082a8 <sms_dualtimer_init+0x38>)
10008292:	47a0      	blx	r4
    dualtimer_disable(DUALTIMER_TIMER2);
10008294:	2001      	movs	r0, #1
10008296:	47a0      	blx	r4
}
10008298:	b008      	add	sp, #32
1000829a:	bd10      	pop	{r4, pc}
1000829c:	100086ad 	.word	0x100086ad
100082a0:	018cba80 	.word	0x018cba80
100082a4:	10008719 	.word	0x10008719
100082a8:	100086f5 	.word	0x100086f5

100082ac <sms_dualtimer_register_callback>:

void sms_dualtimer_register_callback(enum dualtimer_timer tmr, sms_dualtimer_callback_t cb_handler)
{
100082ac:	b510      	push	{r4, lr}
100082ae:	0004      	movs	r4, r0
    dualtimer_register_callback(tmr, cb_handler);
100082b0:	4b02      	ldr	r3, [pc, #8]	; (100082bc <sms_dualtimer_register_callback+0x10>)
100082b2:	4798      	blx	r3
    NVIC_EnableIRQ(DUALTIMER0_IRQn);
}

void sms_dualtimer_stop(enum dualtimer_timer tmr)
{
    dualtimer_disable(tmr);
100082b4:	0020      	movs	r0, r4
100082b6:	4b02      	ldr	r3, [pc, #8]	; (100082c0 <sms_dualtimer_register_callback+0x14>)
100082b8:	4798      	blx	r3

void sms_dualtimer_register_callback(enum dualtimer_timer tmr, sms_dualtimer_callback_t cb_handler)
{
    dualtimer_register_callback(tmr, cb_handler);
    sms_dualtimer_stop(tmr);
}
100082ba:	bd10      	pop	{r4, pc}
100082bc:	1000881d 	.word	0x1000881d
100082c0:	100086f5 	.word	0x100086f5

100082c4 <sms_dualtimer1_cb>:
{
    dualtimer_disable(tmr);
}

void sms_dualtimer1_cb(void)
{
100082c4:	b510      	push	{r4, lr}
    //sms_current_interrupt.source = INT_DUALTIMER1;
    send_plf_int_msg_ind(DUALTIMER_TIMER1_CALLBACK, TIMER_EXPIRED_CALLBACK_TYPE_DETECT, NULL, 0);
100082c6:	2300      	movs	r3, #0
100082c8:	2200      	movs	r2, #0
100082ca:	2101      	movs	r1, #1
100082cc:	2040      	movs	r0, #64	; 0x40
100082ce:	4c01      	ldr	r4, [pc, #4]	; (100082d4 <sms_dualtimer1_cb+0x10>)
100082d0:	47a0      	blx	r4
}
100082d2:	bd10      	pop	{r4, pc}
100082d4:	1000b7b1 	.word	0x1000b7b1

100082d8 <sms_dualtimer2_cb>:

void sms_dualtimer2_cb(void)
{
100082d8:	b510      	push	{r4, lr}
    //sms_current_interrupt.source = INT_DUALTIMER2;
    send_plf_int_msg_ind(DUALTIMER_TIMER2_CALLBACK, TIMER_EXPIRED_CALLBACK_TYPE_DETECT, NULL, 0);
100082da:	2300      	movs	r3, #0
100082dc:	2200      	movs	r2, #0
100082de:	2101      	movs	r1, #1
100082e0:	2041      	movs	r0, #65	; 0x41
100082e2:	4c01      	ldr	r4, [pc, #4]	; (100082e8 <sms_dualtimer2_cb+0x10>)
100082e4:	47a0      	blx	r4
}
100082e6:	bd10      	pop	{r4, pc}
100082e8:	1000b7b1 	.word	0x1000b7b1

100082ec <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
100082ec:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_clock_get_value();
100082ee:	4b09      	ldr	r3, [pc, #36]	; (10008314 <delay_init+0x28>)
100082f0:	4798      	blx	r3
100082f2:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
100082f4:	4c08      	ldr	r4, [pc, #32]	; (10008318 <delay_init+0x2c>)
100082f6:	21fa      	movs	r1, #250	; 0xfa
100082f8:	0089      	lsls	r1, r1, #2
100082fa:	47a0      	blx	r4
100082fc:	4b07      	ldr	r3, [pc, #28]	; (1000831c <delay_init+0x30>)
100082fe:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
10008300:	4907      	ldr	r1, [pc, #28]	; (10008320 <delay_init+0x34>)
10008302:	0028      	movs	r0, r5
10008304:	47a0      	blx	r4
10008306:	4b07      	ldr	r3, [pc, #28]	; (10008324 <delay_init+0x38>)
10008308:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
1000830a:	2205      	movs	r2, #5
1000830c:	4b06      	ldr	r3, [pc, #24]	; (10008328 <delay_init+0x3c>)
1000830e:	601a      	str	r2, [r3, #0]
}
10008310:	bd70      	pop	{r4, r5, r6, pc}
10008312:	46c0      	nop			; (mov r8, r8)
10008314:	10008e15 	.word	0x10008e15
10008318:	1000e5b9 	.word	0x1000e5b9
1000831c:	10011824 	.word	0x10011824
10008320:	000f4240 	.word	0x000f4240
10008324:	10011820 	.word	0x10011820
10008328:	e000e010 	.word	0xe000e010

1000832c <delay_cycles_ms>:
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(uint32_t n)
{
1000832c:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
1000832e:	4b08      	ldr	r3, [pc, #32]	; (10008350 <delay_cycles_ms+0x24>)
10008330:	681c      	ldr	r4, [r3, #0]
 * \param n Number of cycles
 */
static inline void delay_cycles(const uint32_t n)
{
    if(n > 0) {
        SysTick->LOAD = n;
10008332:	4a08      	ldr	r2, [pc, #32]	; (10008354 <delay_cycles_ms+0x28>)
        SysTick->VAL = 0;
10008334:	2500      	movs	r5, #0
        while(!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
10008336:	2180      	movs	r1, #128	; 0x80
10008338:	0249      	lsls	r1, r1, #9
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(uint32_t n)
{
	while (n--) {
1000833a:	e006      	b.n	1000834a <delay_cycles_ms+0x1e>
 *
 * \param n Number of cycles
 */
static inline void delay_cycles(const uint32_t n)
{
    if(n > 0) {
1000833c:	2c00      	cmp	r4, #0
1000833e:	d004      	beq.n	1000834a <delay_cycles_ms+0x1e>
        SysTick->LOAD = n;
10008340:	6054      	str	r4, [r2, #4]
        SysTick->VAL = 0;
10008342:	6095      	str	r5, [r2, #8]
        while(!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
10008344:	6813      	ldr	r3, [r2, #0]
10008346:	420b      	tst	r3, r1
10008348:	d0fc      	beq.n	10008344 <delay_cycles_ms+0x18>
1000834a:	3801      	subs	r0, #1
1000834c:	d2f6      	bcs.n	1000833c <delay_cycles_ms+0x10>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
	}
}
1000834e:	bd30      	pop	{r4, r5, pc}
10008350:	10011824 	.word	0x10011824
10008354:	e000e010 	.word	0xe000e010

10008358 <spi_slave_inst_get_config_defaults>:
void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
	Assert(config);

	config->ss_pin          = PIN_LP_GPIO_12;
10008358:	230c      	movs	r3, #12
1000835a:	7003      	strb	r3, [r0, #0]
	config->address_enabled = false;
1000835c:	2300      	movs	r3, #0
1000835e:	7043      	strb	r3, [r0, #1]
	config->address         = 0;
10008360:	7083      	strb	r3, [r0, #2]
}
10008362:	4770      	bx	lr

10008364 <spi_get_config_defaults>:
void spi_get_config_defaults(
		struct spi_config *const config)
{
	Assert(config);

	config->mode             = SPI_MODE_MASTER;
10008364:	2301      	movs	r3, #1
10008366:	7003      	strb	r3, [r0, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
10008368:	2300      	movs	r3, #0
1000836a:	7043      	strb	r3, [r0, #1]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
1000836c:	7083      	strb	r3, [r0, #2]
	config->clock_source     = SPI_CLK_INPUT_0;
1000836e:	70c3      	strb	r3, [r0, #3]
	config->clock_divider    = 129;
10008370:	3381      	adds	r3, #129	; 0x81
10008372:	7103      	strb	r3, [r0, #4]

	config->pin_number_pad[0] = PIN_LP_GPIO_10;
10008374:	3b77      	subs	r3, #119	; 0x77
10008376:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_11;
10008378:	3301      	adds	r3, #1
1000837a:	60c3      	str	r3, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_12;
1000837c:	3301      	adds	r3, #1
1000837e:	6103      	str	r3, [r0, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_13;
10008380:	3301      	adds	r3, #1
10008382:	6143      	str	r3, [r0, #20]

	config->pinmux_sel_pad[0] = MUX_LP_GPIO_10_SPI0_SCK;
10008384:	3b0b      	subs	r3, #11
10008386:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_11_SPI0_MOSI;
10008388:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_12_SPI0_SSN;
1000838a:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_13_SPI0_MISO;
1000838c:	6243      	str	r3, [r0, #36]	; 0x24
};
1000838e:	4770      	bx	lr

10008390 <spi_attach_slave>:
 *
 */
void spi_attach_slave(
		struct spi_slave_inst *const slave,
		struct spi_slave_inst_config *const config)
{
10008390:	b530      	push	{r4, r5, lr}
10008392:	b083      	sub	sp, #12
10008394:	0004      	movs	r4, r0
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
10008396:	780b      	ldrb	r3, [r1, #0]
10008398:	7003      	strb	r3, [r0, #0]
	slave->address_enabled = config->address_enabled;
1000839a:	784b      	ldrb	r3, [r1, #1]
1000839c:	7043      	strb	r3, [r0, #1]
	slave->address         = config->address;
1000839e:	788b      	ldrb	r3, [r1, #2]
100083a0:	7083      	strb	r3, [r0, #2]

	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);
100083a2:	ad01      	add	r5, sp, #4
100083a4:	0028      	movs	r0, r5
100083a6:	4b07      	ldr	r3, [pc, #28]	; (100083c4 <spi_attach_slave+0x34>)
100083a8:	4798      	blx	r3
	config_gpio.direction = GPIO_PIN_DIR_OUTPUT;
100083aa:	2301      	movs	r3, #1
100083ac:	702b      	strb	r3, [r5, #0]
	gpio_pin_set_config(slave->ss_pin, &config_gpio);
100083ae:	7820      	ldrb	r0, [r4, #0]
100083b0:	0029      	movs	r1, r5
100083b2:	4b05      	ldr	r3, [pc, #20]	; (100083c8 <spi_attach_slave+0x38>)
100083b4:	4798      	blx	r3

	gpio_pin_set_output_level(slave->ss_pin, true);
100083b6:	7820      	ldrb	r0, [r4, #0]
100083b8:	2101      	movs	r1, #1
100083ba:	4b04      	ldr	r3, [pc, #16]	; (100083cc <spi_attach_slave+0x3c>)
100083bc:	4798      	blx	r3
}
100083be:	b003      	add	sp, #12
100083c0:	bd30      	pop	{r4, r5, pc}
100083c2:	46c0      	nop			; (mov r8, r8)
100083c4:	10008985 	.word	0x10008985
100083c8:	10008995 	.word	0x10008995
100083cc:	10008b4d 	.word	0x10008b4d

100083d0 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void spi_enable(struct spi_module *const module)
{
	Spi *const spi_module = (module->hw);
100083d0:	6803      	ldr	r3, [r0, #0]
		NVIC_EnableIRQ(SPI1_TX_IRQn);
	}
#endif

	/* Enable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = SPI_MODULE_ENABLE_ENABLE;
100083d2:	2201      	movs	r2, #1
100083d4:	761a      	strb	r2, [r3, #24]
}
100083d6:	4770      	bx	lr

100083d8 <spi_disable>:
 * This function will disable the SPI module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void spi_disable(struct spi_module *const module)
{
100083d8:	b510      	push	{r4, lr}
		NVIC_DisableIRQ(SPI1_TX_IRQn);
	}
#  endif

	/* Disable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
100083da:	2300      	movs	r3, #0
100083dc:	6802      	ldr	r2, [r0, #0]
100083de:	7613      	strb	r3, [r2, #24]
 */
static void _spi_clock_disable(struct spi_module *const module)
{
	Assert(module);

	Spi *const spi_module = (module->hw);
100083e0:	6803      	ldr	r3, [r0, #0]

	if (spi_module == (void *)SPI0) {
100083e2:	4a0d      	ldr	r2, [pc, #52]	; (10008418 <spi_disable+0x40>)
100083e4:	4293      	cmp	r3, r2
100083e6:	d109      	bne.n	100083fc <spi_disable+0x24>
		system_clock_peripheral_disable(PERIPHERAL_SPI0_SCK_CLK);
100083e8:	2041      	movs	r0, #65	; 0x41
100083ea:	4c0c      	ldr	r4, [pc, #48]	; (1000841c <spi_disable+0x44>)
100083ec:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_SCK_PHASE);
100083ee:	2026      	movs	r0, #38	; 0x26
100083f0:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_IF);
100083f2:	2038      	movs	r0, #56	; 0x38
100083f4:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_CORE);
100083f6:	2001      	movs	r0, #1
100083f8:	47a0      	blx	r4
100083fa:	e00b      	b.n	10008414 <spi_disable+0x3c>
	} else if (spi_module == (void *)SPI1) {
100083fc:	4a08      	ldr	r2, [pc, #32]	; (10008420 <spi_disable+0x48>)
100083fe:	4293      	cmp	r3, r2
10008400:	d108      	bne.n	10008414 <spi_disable+0x3c>
		system_clock_peripheral_disable(PERIPHERAL_SPI1_SCK_CLK);
10008402:	2042      	movs	r0, #66	; 0x42
10008404:	4c05      	ldr	r4, [pc, #20]	; (1000841c <spi_disable+0x44>)
10008406:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_SCK_PHASE);
10008408:	2027      	movs	r0, #39	; 0x27
1000840a:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_IF);
1000840c:	2039      	movs	r0, #57	; 0x39
1000840e:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_CORE);
10008410:	2002      	movs	r0, #2
10008412:	47a0      	blx	r4
#  endif

	/* Disable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
	_spi_clock_disable(module);
}
10008414:	bd10      	pop	{r4, pc}
10008416:	46c0      	nop			; (mov r8, r8)
10008418:	40006000 	.word	0x40006000
1000841c:	1000917d 	.word	0x1000917d
10008420:	40007000 	.word	0x40007000

10008424 <spi_reset>:
 * disable it.
 *
 * \param[in,out] module Pointer to the software instance struct
 */
void spi_reset(struct spi_module *const module)
{
10008424:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Spi *const spi_module = (module->hw);
10008426:	6804      	ldr	r4, [r0, #0]

	/* Disable the module */
	spi_disable(module);
10008428:	4b09      	ldr	r3, [pc, #36]	; (10008450 <spi_reset+0x2c>)
1000842a:	4798      	blx	r3

	/* Software reset the module */
	if(spi_module == (void *)SPI0) {
1000842c:	4b09      	ldr	r3, [pc, #36]	; (10008454 <spi_reset+0x30>)
1000842e:	429c      	cmp	r4, r3
10008430:	d105      	bne.n	1000843e <spi_reset+0x1a>
		system_peripheral_reset(PERIPHERAL_SPI0_CORE);
10008432:	2001      	movs	r0, #1
10008434:	4c08      	ldr	r4, [pc, #32]	; (10008458 <spi_reset+0x34>)
10008436:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_SPI0_IF);
10008438:	2038      	movs	r0, #56	; 0x38
1000843a:	47a0      	blx	r4
1000843c:	e007      	b.n	1000844e <spi_reset+0x2a>
	} else if (spi_module == (void *)SPI1) {
1000843e:	4b07      	ldr	r3, [pc, #28]	; (1000845c <spi_reset+0x38>)
10008440:	429c      	cmp	r4, r3
10008442:	d104      	bne.n	1000844e <spi_reset+0x2a>
		system_peripheral_reset(PERIPHERAL_SPI1_CORE);
10008444:	2002      	movs	r0, #2
10008446:	4c04      	ldr	r4, [pc, #16]	; (10008458 <spi_reset+0x34>)
10008448:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_SPI1_IF);
1000844a:	2039      	movs	r0, #57	; 0x39
1000844c:	47a0      	blx	r4
	}
}
1000844e:	bd10      	pop	{r4, pc}
10008450:	100083d9 	.word	0x100083d9
10008454:	40006000 	.word	0x40006000
10008458:	100094e9 	.word	0x100094e9
1000845c:	40007000 	.word	0x40007000

10008460 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Spi *const hw,
		const struct spi_config *const config)
{
10008460:	b5f0      	push	{r4, r5, r6, r7, lr}
10008462:	465f      	mov	r7, fp
10008464:	4646      	mov	r6, r8
10008466:	b4c0      	push	{r6, r7}
10008468:	b083      	sub	sp, #12
1000846a:	0006      	movs	r6, r0
1000846c:	4688      	mov	r8, r1
1000846e:	0015      	movs	r5, r2
	Assert(config);

	uint8_t idx;

	/* Initialize device instance */
	module->hw = hw;
10008470:	6031      	str	r1, [r6, #0]

	Spi *const spi_module = (module->hw);

	/* Check if module is enabled. */
	if (spi_module->SPI_MODULE_ENABLE.reg & SPI_MODULE_ENABLE_MASK) {
10008472:	7e0b      	ldrb	r3, [r1, #24]
10008474:	07db      	lsls	r3, r3, #31
10008476:	d501      	bpl.n	1000847c <spi_init+0x1c>
		spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
10008478:	2300      	movs	r3, #0
1000847a:	760b      	strb	r3, [r1, #24]
	}

	spi_reset(module);
1000847c:	0030      	movs	r0, r6
1000847e:	4b4a      	ldr	r3, [pc, #296]	; (100085a8 <spi_init+0x148>)
10008480:	4798      	blx	r3
 */
static void _spi_clock_enable(struct spi_module *const module)
{
	Assert(module);

	Spi *const spi_module = (module->hw);
10008482:	6833      	ldr	r3, [r6, #0]

	if (spi_module == (void *)SPI0) {
10008484:	4a49      	ldr	r2, [pc, #292]	; (100085ac <spi_init+0x14c>)
10008486:	4293      	cmp	r3, r2
10008488:	d109      	bne.n	1000849e <spi_init+0x3e>
		system_clock_peripheral_enable(PERIPHERAL_SPI0_SCK_CLK);
1000848a:	2041      	movs	r0, #65	; 0x41
1000848c:	4c48      	ldr	r4, [pc, #288]	; (100085b0 <spi_init+0x150>)
1000848e:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_SCK_PHASE);
10008490:	2026      	movs	r0, #38	; 0x26
10008492:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_IF);
10008494:	2038      	movs	r0, #56	; 0x38
10008496:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_CORE);
10008498:	2001      	movs	r0, #1
1000849a:	47a0      	blx	r4
1000849c:	e00b      	b.n	100084b6 <spi_init+0x56>
	} else if (spi_module == (void *)SPI1) {
1000849e:	4a45      	ldr	r2, [pc, #276]	; (100085b4 <spi_init+0x154>)
100084a0:	4293      	cmp	r3, r2
100084a2:	d108      	bne.n	100084b6 <spi_init+0x56>
		system_clock_peripheral_enable(PERIPHERAL_SPI1_SCK_CLK);
100084a4:	2042      	movs	r0, #66	; 0x42
100084a6:	4c42      	ldr	r4, [pc, #264]	; (100085b0 <spi_init+0x150>)
100084a8:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_SCK_PHASE);
100084aa:	2027      	movs	r0, #39	; 0x27
100084ac:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_IF);
100084ae:	2039      	movs	r0, #57	; 0x39
100084b0:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_CORE);
100084b2:	2002      	movs	r0, #2
100084b4:	47a0      	blx	r4
	}
#endif

	//Program the pinmux.
	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);
100084b6:	a801      	add	r0, sp, #4
100084b8:	4b3f      	ldr	r3, [pc, #252]	; (100085b8 <spi_init+0x158>)
100084ba:	4798      	blx	r3
100084bc:	002c      	movs	r4, r5
100084be:	3408      	adds	r4, #8
100084c0:	2318      	movs	r3, #24
100084c2:	469b      	mov	fp, r3
100084c4:	44ab      	add	fp, r5
100084c6:	0027      	movs	r7, r4

	/* Set the pinmux for this spi module. */
	for(idx = 0; idx < 4; idx++) {
		if (config->pin_number_pad[idx] != PINMUX_UNUSED) {
100084c8:	6820      	ldr	r0, [r4, #0]
100084ca:	1c43      	adds	r3, r0, #1
100084cc:	d011      	beq.n	100084f2 <spi_init+0x92>
			if (config->mode == SPI_MODE_MASTER) {
100084ce:	782b      	ldrb	r3, [r5, #0]
100084d0:	2b01      	cmp	r3, #1
100084d2:	d102      	bne.n	100084da <spi_init+0x7a>
				config_gpio.direction = GPIO_PIN_DIR_OUTPUT;
100084d4:	466a      	mov	r2, sp
100084d6:	7113      	strb	r3, [r2, #4]
100084d8:	e003      	b.n	100084e2 <spi_init+0x82>
			} else if (config->mode == SPI_MODE_SLAVE) {
100084da:	2b00      	cmp	r3, #0
100084dc:	d101      	bne.n	100084e2 <spi_init+0x82>
				config_gpio.direction = GPIO_PIN_DIR_INPUT;
100084de:	466a      	mov	r2, sp
100084e0:	7113      	strb	r3, [r2, #4]
			}
			gpio_pin_set_config(config->pin_number_pad[idx], &config_gpio);
100084e2:	b2c0      	uxtb	r0, r0
100084e4:	a901      	add	r1, sp, #4
100084e6:	4b35      	ldr	r3, [pc, #212]	; (100085bc <spi_init+0x15c>)
100084e8:	4798      	blx	r3
			gpio_pinmux_cofiguration(config->pin_number_pad[idx], \
100084ea:	8a39      	ldrh	r1, [r7, #16]
100084ec:	7838      	ldrb	r0, [r7, #0]
100084ee:	4b34      	ldr	r3, [pc, #208]	; (100085c0 <spi_init+0x160>)
100084f0:	4798      	blx	r3
100084f2:	3404      	adds	r4, #4
	//Program the pinmux.
	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);

	/* Set the pinmux for this spi module. */
	for(idx = 0; idx < 4; idx++) {
100084f4:	455c      	cmp	r4, fp
100084f6:	d1e6      	bne.n	100084c6 <spi_init+0x66>
						(uint16_t)(config->pinmux_sel_pad[idx]));
		}
	}

	/* Set up the input clock for the module */
	spi_module->CLOCK_SOURCE_SELECT.reg = config->clock_source;
100084f8:	78eb      	ldrb	r3, [r5, #3]
100084fa:	4642      	mov	r2, r8
100084fc:	7413      	strb	r3, [r2, #16]

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
100084fe:	782b      	ldrb	r3, [r5, #0]
10008500:	2b01      	cmp	r3, #1
10008502:	d100      	bne.n	10008506 <spi_init+0xa6>
		/* Set the mode in SPI master mode */
		spi_module->SPI_MASTER_MODE.reg = SPI_MODE_MASTER;
10008504:	7713      	strb	r3, [r2, #28]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
10008506:	782b      	ldrb	r3, [r5, #0]
10008508:	2b00      	cmp	r3, #0
1000850a:	d101      	bne.n	10008510 <spi_init+0xb0>
		/* Set the mode in SPI slave mode */
		spi_module->SPI_MASTER_MODE.reg = SPI_MODE_SLAVE;
1000850c:	4642      	mov	r2, r8
1000850e:	7713      	strb	r3, [r2, #28]
		const struct spi_config *const config)
{
	Assert(module);
	Assert(config);

	Spi *const spi_module = (module->hw);
10008510:	6833      	ldr	r3, [r6, #0]

	module->mode  = config->mode;
10008512:	782a      	ldrb	r2, [r5, #0]
10008514:	7172      	strb	r2, [r6, #5]

#if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
10008516:	782a      	ldrb	r2, [r5, #0]
10008518:	2a01      	cmp	r2, #1
1000851a:	d101      	bne.n	10008520 <spi_init+0xc0>
		spi_module->SPI_CLK_DIVIDER.reg = config->clock_divider;
1000851c:	792a      	ldrb	r2, [r5, #4]
1000851e:	829a      	strh	r2, [r3, #20]
	}
#endif

	/* Set data order */
	if (config->data_order == SPI_DATA_ORDER_LSB) {
10008520:	786a      	ldrb	r2, [r5, #1]
10008522:	2a04      	cmp	r2, #4
10008524:	d104      	bne.n	10008530 <spi_init+0xd0>
		spi_module->SPI_CONFIGURATION.bit.LSB_FIRST_ENABLE = 0x1;
10008526:	2124      	movs	r1, #36	; 0x24
10008528:	5c58      	ldrb	r0, [r3, r1]
1000852a:	4302      	orrs	r2, r0
1000852c:	545a      	strb	r2, [r3, r1]
1000852e:	e004      	b.n	1000853a <spi_init+0xda>
	} else {
		spi_module->SPI_CONFIGURATION.bit.LSB_FIRST_ENABLE = 0x0;
10008530:	2124      	movs	r1, #36	; 0x24
10008532:	5c5a      	ldrb	r2, [r3, r1]
10008534:	2004      	movs	r0, #4
10008536:	4382      	bics	r2, r0
10008538:	545a      	strb	r2, [r3, r1]
	}

	/* Set clock polarity and clock phase */
	switch(config->transfer_mode)
1000853a:	78aa      	ldrb	r2, [r5, #2]
1000853c:	2a01      	cmp	r2, #1
1000853e:	d01a      	beq.n	10008576 <spi_init+0x116>
10008540:	2a00      	cmp	r2, #0
10008542:	d004      	beq.n	1000854e <spi_init+0xee>
10008544:	2a02      	cmp	r2, #2
10008546:	d00c      	beq.n	10008562 <spi_init+0x102>
10008548:	2a03      	cmp	r2, #3
1000854a:	d01e      	beq.n	1000858a <spi_init+0x12a>
1000854c:	e026      	b.n	1000859c <spi_init+0x13c>
	{
		case SPI_TRANSFER_MODE_0:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x0;
1000854e:	2224      	movs	r2, #36	; 0x24
10008550:	5c99      	ldrb	r1, [r3, r2]
10008552:	2002      	movs	r0, #2
10008554:	4381      	bics	r1, r0
10008556:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x0;
10008558:	5c99      	ldrb	r1, [r3, r2]
1000855a:	3801      	subs	r0, #1
1000855c:	4381      	bics	r1, r0
1000855e:	5499      	strb	r1, [r3, r2]
10008560:	e01c      	b.n	1000859c <spi_init+0x13c>
			break;
		case SPI_TRANSFER_MODE_1:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x1;
10008562:	2224      	movs	r2, #36	; 0x24
10008564:	5c98      	ldrb	r0, [r3, r2]
10008566:	2102      	movs	r1, #2
10008568:	4301      	orrs	r1, r0
1000856a:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x0;
1000856c:	5c99      	ldrb	r1, [r3, r2]
1000856e:	2001      	movs	r0, #1
10008570:	4381      	bics	r1, r0
10008572:	5499      	strb	r1, [r3, r2]
10008574:	e012      	b.n	1000859c <spi_init+0x13c>
			break;
		case SPI_TRANSFER_MODE_2:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x0;
10008576:	2224      	movs	r2, #36	; 0x24
10008578:	5c99      	ldrb	r1, [r3, r2]
1000857a:	2002      	movs	r0, #2
1000857c:	4381      	bics	r1, r0
1000857e:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x1;
10008580:	5c98      	ldrb	r0, [r3, r2]
10008582:	2101      	movs	r1, #1
10008584:	4301      	orrs	r1, r0
10008586:	5499      	strb	r1, [r3, r2]
10008588:	e008      	b.n	1000859c <spi_init+0x13c>
			break;
		case SPI_TRANSFER_MODE_3:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x1;
1000858a:	2224      	movs	r2, #36	; 0x24
1000858c:	5c98      	ldrb	r0, [r3, r2]
1000858e:	2102      	movs	r1, #2
10008590:	4301      	orrs	r1, r0
10008592:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x1;
10008594:	5c98      	ldrb	r0, [r3, r2]
10008596:	2101      	movs	r1, #1
10008598:	4301      	orrs	r1, r0
1000859a:	5499      	strb	r1, [r3, r2]
	module->locked                     = 0;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
1000859c:	2000      	movs	r0, #0
1000859e:	b003      	add	sp, #12
100085a0:	bc0c      	pop	{r2, r3}
100085a2:	4690      	mov	r8, r2
100085a4:	469b      	mov	fp, r3
100085a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
100085a8:	10008425 	.word	0x10008425
100085ac:	40006000 	.word	0x40006000
100085b0:	10008e21 	.word	0x10008e21
100085b4:	40007000 	.word	0x40007000
100085b8:	10008985 	.word	0x10008985
100085bc:	10008995 	.word	0x10008995
100085c0:	10008bd9 	.word	0x10008bd9

100085c4 <spi_transceive_buffer_wait>:
enum status_code spi_transceive_buffer_wait(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
100085c4:	b5f0      	push	{r4, r5, r6, r7, lr}
100085c6:	b083      	sub	sp, #12
	Spi *spi_module = module->hw;
100085c8:	6804      	ldr	r4, [r0, #0]
	uint8_t dummy = 0;
100085ca:	2600      	movs	r6, #0
100085cc:	466d      	mov	r5, sp
100085ce:	71ee      	strb	r6, [r5, #7]
100085d0:	3507      	adds	r5, #7
	uint8_t skip_mosi = 0;
	uint8_t skip_miso = 0;
	uint8_t status;
	uint16_t transfer_len = 0;

	if(spi_module == 0) {
100085d2:	2c00      	cmp	r4, #0
100085d4:	d034      	beq.n	10008640 <spi_transceive_buffer_wait+0x7c>
		return STATUS_ERR_NOT_INITIALIZED;
	}
	if(!tx_data) {
100085d6:	2900      	cmp	r1, #0
100085d8:	d104      	bne.n	100085e4 <spi_transceive_buffer_wait+0x20>
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
100085da:	0029      	movs	r1, r5
100085dc:	7980      	ldrb	r0, [r0, #6]
100085de:	7028      	strb	r0, [r5, #0]
		skip_mosi = 1;
100085e0:	2701      	movs	r7, #1
100085e2:	e00b      	b.n	100085fc <spi_transceive_buffer_wait+0x38>
	} else if(!rx_data) {
100085e4:	2a00      	cmp	r2, #0
100085e6:	d005      	beq.n	100085f4 <spi_transceive_buffer_wait+0x30>
		rx_data = &dummy;
		skip_miso = 1;
	} else if(length == 0) {
		return STATUS_ERR_INVALID_ARG;
100085e8:	2017      	movs	r0, #23
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
		skip_miso = 1;
	} else if(length == 0) {
100085ea:	2b00      	cmp	r3, #0
100085ec:	d029      	beq.n	10008642 <spi_transceive_buffer_wait+0x7e>
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
	uint8_t skip_miso = 0;
100085ee:	2600      	movs	r6, #0
		uint8_t *rx_data,
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
100085f0:	2700      	movs	r7, #0
100085f2:	e003      	b.n	100085fc <spi_transceive_buffer_wait+0x38>
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
		skip_miso = 1;
100085f4:	2601      	movs	r6, #1
		uint8_t *rx_data,
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
100085f6:	2700      	movs	r7, #0
	if(!tx_data) {
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
100085f8:	466a      	mov	r2, sp
100085fa:	3207      	adds	r2, #7
 */
static bool _spi_is_active(Spi *const spi_module)
{
	Assert(spi_module);

	return spi_module->SPI_BUS_STATUS.bit.SPI_ACTIVE;
100085fc:	2528      	movs	r5, #40	; 0x28
100085fe:	5d60      	ldrb	r0, [r4, r5]
	}

	/* Check for Idle */
	do {
		status = _spi_is_active(spi_module);
	}while(status);
10008600:	07c0      	lsls	r0, r0, #31
10008602:	d4fc      	bmi.n	100085fe <spi_transceive_buffer_wait+0x3a>

	/* Clear all status registers */
	spi_module->RECEIVE_STATUS.reg;
10008604:	7b20      	ldrb	r0, [r4, #12]
	spi_module->TRANSMIT_STATUS.reg;
10008606:	7a20      	ldrb	r0, [r4, #8]

	/* Start transfer */
	while(transfer_len < length) {
10008608:	2b00      	cmp	r3, #0
1000860a:	d014      	beq.n	10008636 <spi_transceive_buffer_wait+0x72>
1000860c:	2500      	movs	r5, #0
		/* Read data shifted from MISO */
		while(!_spi_is_ready_to_read(spi_module));
		*rx_data = spi_module->RECEIVE_DATA.reg;
		transfer_len++;
		if (!skip_mosi) {
			tx_data++;
1000860e:	4278      	negs	r0, r7
10008610:	4147      	adcs	r7, r0
		}
		if (!skip_miso) {
			rx_data++;
10008612:	4270      	negs	r0, r6
10008614:	4146      	adcs	r6, r0
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->TRANSMIT_STATUS.bit.TX_FIFO_NOT_FULL);
10008616:	7a20      	ldrb	r0, [r4, #8]
	spi_module->TRANSMIT_STATUS.reg;

	/* Start transfer */
	while(transfer_len < length) {
		/* Write data to MOSI */
		while(!_spi_is_ready_to_write(spi_module));
10008618:	07c0      	lsls	r0, r0, #31
1000861a:	d5fc      	bpl.n	10008616 <spi_transceive_buffer_wait+0x52>
		spi_module->TRANSMIT_DATA.reg = *tx_data;
1000861c:	7808      	ldrb	r0, [r1, #0]
1000861e:	7020      	strb	r0, [r4, #0]
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->RECEIVE_STATUS.bit.RX_FIFO_NOT_EMPTY);
10008620:	7b20      	ldrb	r0, [r4, #12]
	while(transfer_len < length) {
		/* Write data to MOSI */
		while(!_spi_is_ready_to_write(spi_module));
		spi_module->TRANSMIT_DATA.reg = *tx_data;
		/* Read data shifted from MISO */
		while(!_spi_is_ready_to_read(spi_module));
10008622:	07c0      	lsls	r0, r0, #31
10008624:	d5fc      	bpl.n	10008620 <spi_transceive_buffer_wait+0x5c>
		*rx_data = spi_module->RECEIVE_DATA.reg;
10008626:	7920      	ldrb	r0, [r4, #4]
10008628:	7010      	strb	r0, [r2, #0]
		transfer_len++;
1000862a:	3501      	adds	r5, #1
1000862c:	b2ad      	uxth	r5, r5
		if (!skip_mosi) {
			tx_data++;
1000862e:	19c9      	adds	r1, r1, r7
		}
		if (!skip_miso) {
			rx_data++;
10008630:	1992      	adds	r2, r2, r6
	/* Clear all status registers */
	spi_module->RECEIVE_STATUS.reg;
	spi_module->TRANSMIT_STATUS.reg;

	/* Start transfer */
	while(transfer_len < length) {
10008632:	42ab      	cmp	r3, r5
10008634:	d1ef      	bne.n	10008616 <spi_transceive_buffer_wait+0x52>
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->TRANSMIT_STATUS.bit.TX_FIFO_EMPTY);
10008636:	7a23      	ldrb	r3, [r4, #8]
		}
	}
	/* check TXFIFO is empty */
	do {
		status = _spi_is_write_complete(spi_module);
	}while(!status);
10008638:	06db      	lsls	r3, r3, #27
1000863a:	d5fc      	bpl.n	10008636 <spi_transceive_buffer_wait+0x72>

	return STATUS_OK;
1000863c:	2000      	movs	r0, #0
1000863e:	e000      	b.n	10008642 <spi_transceive_buffer_wait+0x7e>
	uint8_t skip_miso = 0;
	uint8_t status;
	uint16_t transfer_len = 0;

	if(spi_module == 0) {
		return STATUS_ERR_NOT_INITIALIZED;
10008640:	201f      	movs	r0, #31
		status = _spi_is_write_complete(spi_module);
	}while(!status);

	return STATUS_OK;

}
10008642:	b003      	add	sp, #12
10008644:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008646:	46c0      	nop			; (mov r8, r8)

10008648 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		bool select)
{
10008648:	b510      	push	{r4, lr}
	uint8_t gpio_num = slave->ss_pin;
1000864a:	7808      	ldrb	r0, [r1, #0]
	if(select) {
1000864c:	2a00      	cmp	r2, #0
1000864e:	d003      	beq.n	10008658 <spi_select_slave+0x10>
		/* ASSERT Slave select pin */
		gpio_pin_set_output_level(gpio_num, false);
10008650:	2100      	movs	r1, #0
10008652:	4b04      	ldr	r3, [pc, #16]	; (10008664 <spi_select_slave+0x1c>)
10008654:	4798      	blx	r3
10008656:	e002      	b.n	1000865e <spi_select_slave+0x16>
	} else {
		/* DEASSERT Slave select pin */
		gpio_pin_set_output_level(gpio_num, true);
10008658:	2101      	movs	r1, #1
1000865a:	4b02      	ldr	r3, [pc, #8]	; (10008664 <spi_select_slave+0x1c>)
1000865c:	4798      	blx	r3
	}

	return STATUS_OK;
}
1000865e:	2000      	movs	r0, #0
10008660:	bd10      	pop	{r4, pc}
10008662:	46c0      	nop			; (mov r8, r8)
10008664:	10008b4d 	.word	0x10008b4d

10008668 <dualtimer_isr_handler>:
 *
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
10008668:	b510      	push	{r4, lr}
 * \retval The interrupt status of timer1/timer2
 */
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
1000866a:	4b0d      	ldr	r3, [pc, #52]	; (100086a0 <dualtimer_isr_handler+0x38>)
1000866c:	7d1b      	ldrb	r3, [r3, #20]
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
1000866e:	2b00      	cmp	r3, #0
10008670:	d007      	beq.n	10008682 <dualtimer_isr_handler+0x1a>
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
10008672:	2201      	movs	r2, #1
10008674:	4b0a      	ldr	r3, [pc, #40]	; (100086a0 <dualtimer_isr_handler+0x38>)
10008676:	731a      	strb	r2, [r3, #12]
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
10008678:	4b0a      	ldr	r3, [pc, #40]	; (100086a4 <dualtimer_isr_handler+0x3c>)
1000867a:	681b      	ldr	r3, [r3, #0]
1000867c:	2b00      	cmp	r3, #0
1000867e:	d000      	beq.n	10008682 <dualtimer_isr_handler+0x1a>
			dualtimer_callback_timer1();
10008680:	4798      	blx	r3
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
	} else {
		return DUALTIMER0->TIMER2MIS.reg;
10008682:	2334      	movs	r3, #52	; 0x34
10008684:	4a06      	ldr	r2, [pc, #24]	; (100086a0 <dualtimer_isr_handler+0x38>)
10008686:	5cd3      	ldrb	r3, [r2, r3]
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
10008688:	2b00      	cmp	r3, #0
1000868a:	d007      	beq.n	1000869c <dualtimer_isr_handler+0x34>
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
	} else {
		DUALTIMER0->TIMER2INTCLR.reg = 1;
1000868c:	2101      	movs	r1, #1
1000868e:	232c      	movs	r3, #44	; 0x2c
10008690:	54d1      	strb	r1, [r2, r3]
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER2);
		if (dualtimer_callback_timer2)
10008692:	4b05      	ldr	r3, [pc, #20]	; (100086a8 <dualtimer_isr_handler+0x40>)
10008694:	681b      	ldr	r3, [r3, #0]
10008696:	2b00      	cmp	r3, #0
10008698:	d000      	beq.n	1000869c <dualtimer_isr_handler+0x34>
			dualtimer_callback_timer2();
1000869a:	4798      	blx	r3
	}
}
1000869c:	bd10      	pop	{r4, pc}
1000869e:	46c0      	nop			; (mov r8, r8)
100086a0:	40001000 	.word	0x40001000
100086a4:	100118b0 	.word	0x100118b0
100086a8:	100118b4 	.word	0x100118b4

100086ac <dualtimer_get_config_defaults>:
 *
 * \param[out]  config  Pointer to a DUALTIMER module configuration structure to set
 */
void dualtimer_get_config_defaults(struct dualtimer_config *config)
{
	config->timer1.timer_enable = true;
100086ac:	2301      	movs	r3, #1
100086ae:	7003      	strb	r3, [r0, #0]
	config->timer2.timer_enable = true;
100086b0:	7303      	strb	r3, [r0, #12]

	config->timer1.counter_mode = DUALTIMER_PERIODIC_MODE;
100086b2:	2202      	movs	r2, #2
100086b4:	7042      	strb	r2, [r0, #1]
	config->timer2.counter_mode = DUALTIMER_PERIODIC_MODE;
100086b6:	7342      	strb	r2, [r0, #13]

	config->timer1.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
100086b8:	7083      	strb	r3, [r0, #2]
	config->timer2.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
100086ba:	7383      	strb	r3, [r0, #14]

	config->timer1.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
100086bc:	2200      	movs	r2, #0
100086be:	70c2      	strb	r2, [r0, #3]
	config->timer2.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
100086c0:	73c2      	strb	r2, [r0, #15]

	config->timer1.interrup_enable = true;
100086c2:	7103      	strb	r3, [r0, #4]
	config->timer2.interrup_enable = true;
100086c4:	7403      	strb	r3, [r0, #16]

	config->timer1.load_value = 0;
100086c6:	6082      	str	r2, [r0, #8]
	config->timer2.load_value = 0;
100086c8:	6142      	str	r2, [r0, #20]

	config->clock_source = DUALTIMER_CLK_INPUT_0;
100086ca:	7602      	strb	r2, [r0, #24]
}
100086cc:	4770      	bx	lr
100086ce:	46c0      	nop			; (mov r8, r8)

100086d0 <dualtimer_enable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_enable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
100086d0:	2800      	cmp	r0, #0
100086d2:	d105      	bne.n	100086e0 <dualtimer_enable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg |= DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
100086d4:	4a06      	ldr	r2, [pc, #24]	; (100086f0 <dualtimer_enable+0x20>)
100086d6:	7a11      	ldrb	r1, [r2, #8]
100086d8:	2380      	movs	r3, #128	; 0x80
100086da:	430b      	orrs	r3, r1
100086dc:	7213      	strb	r3, [r2, #8]
100086de:	e005      	b.n	100086ec <dualtimer_enable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg |= DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
100086e0:	4903      	ldr	r1, [pc, #12]	; (100086f0 <dualtimer_enable+0x20>)
100086e2:	2228      	movs	r2, #40	; 0x28
100086e4:	5c88      	ldrb	r0, [r1, r2]
100086e6:	2380      	movs	r3, #128	; 0x80
100086e8:	4303      	orrs	r3, r0
100086ea:	548b      	strb	r3, [r1, r2]
	}
}
100086ec:	4770      	bx	lr
100086ee:	46c0      	nop			; (mov r8, r8)
100086f0:	40001000 	.word	0x40001000

100086f4 <dualtimer_disable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_disable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
100086f4:	2800      	cmp	r0, #0
100086f6:	d105      	bne.n	10008704 <dualtimer_disable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg &= ~DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
100086f8:	4a06      	ldr	r2, [pc, #24]	; (10008714 <dualtimer_disable+0x20>)
100086fa:	7a11      	ldrb	r1, [r2, #8]
100086fc:	237f      	movs	r3, #127	; 0x7f
100086fe:	400b      	ands	r3, r1
10008700:	7213      	strb	r3, [r2, #8]
10008702:	e005      	b.n	10008710 <dualtimer_disable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg &= ~DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
10008704:	4903      	ldr	r1, [pc, #12]	; (10008714 <dualtimer_disable+0x20>)
10008706:	2228      	movs	r2, #40	; 0x28
10008708:	5c88      	ldrb	r0, [r1, r2]
1000870a:	237f      	movs	r3, #127	; 0x7f
1000870c:	4003      	ands	r3, r0
1000870e:	548b      	strb	r3, [r1, r2]
	}
}
10008710:	4770      	bx	lr
10008712:	46c0      	nop			; (mov r8, r8)
10008714:	40001000 	.word	0x40001000

10008718 <dualtimer_init>:
 * \param[in]     config       Pointer to the Dualtimer configuration options struct
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
10008718:	b570      	push	{r4, r5, r6, lr}
1000871a:	0004      	movs	r4, r0
	uint8_t regval = 0;

	/* Global reset */
	system_peripheral_reset(PERIPHERAL_DUALT_TIMER);
1000871c:	2004      	movs	r0, #4
1000871e:	4b39      	ldr	r3, [pc, #228]	; (10008804 <dualtimer_init+0xec>)
10008720:	4798      	blx	r3

	/* Common config */
	if (config->timer1.timer_enable || config->timer2.timer_enable) {
10008722:	7823      	ldrb	r3, [r4, #0]
10008724:	2b00      	cmp	r3, #0
10008726:	d102      	bne.n	1000872e <dualtimer_init+0x16>
10008728:	7b23      	ldrb	r3, [r4, #12]
1000872a:	2b00      	cmp	r3, #0
1000872c:	d065      	beq.n	100087fa <dualtimer_init+0xe2>
		LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |=
1000872e:	4936      	ldr	r1, [pc, #216]	; (10008808 <dualtimer_init+0xf0>)
10008730:	68ca      	ldr	r2, [r1, #12]
10008732:	2320      	movs	r3, #32
10008734:	4313      	orrs	r3, r2
10008736:	60cb      	str	r3, [r1, #12]
		LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
10008738:	7e22      	ldrb	r2, [r4, #24]
1000873a:	698b      	ldr	r3, [r1, #24]
1000873c:	2003      	movs	r0, #3
1000873e:	4002      	ands	r2, r0
10008740:	0112      	lsls	r2, r2, #4
10008742:	302d      	adds	r0, #45	; 0x2d
10008744:	4383      	bics	r3, r0
10008746:	4313      	orrs	r3, r2
10008748:	618b      	str	r3, [r1, #24]
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
1000874a:	7823      	ldrb	r3, [r4, #0]
1000874c:	2b00      	cmp	r3, #0
1000874e:	d026      	beq.n	1000879e <dualtimer_init+0x86>
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
10008750:	7863      	ldrb	r3, [r4, #1]
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
10008752:	2101      	movs	r1, #1
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
10008754:	2b00      	cmp	r3, #0
10008756:	d003      	beq.n	10008760 <dualtimer_init+0x48>
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer1.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_0;
		} else if (config->timer1.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_1;
10008758:	3b02      	subs	r3, #2
1000875a:	425d      	negs	r5, r3
1000875c:	415d      	adcs	r5, r3
1000875e:	01a9      	lsls	r1, r5, #6
		}
		regval |= (DUALTIMER_TIMER1CONTROL_TIMER_SIZE &
10008760:	78a2      	ldrb	r2, [r4, #2]
10008762:	0052      	lsls	r2, r2, #1
10008764:	2502      	movs	r5, #2
10008766:	402a      	ands	r2, r5
10008768:	78e3      	ldrb	r3, [r4, #3]
1000876a:	009b      	lsls	r3, r3, #2
1000876c:	350a      	adds	r5, #10
1000876e:	402b      	ands	r3, r5
10008770:	431a      	orrs	r2, r3
10008772:	0015      	movs	r5, r2
10008774:	430d      	orrs	r5, r1
				((config->timer1.counter_size) << DUALTIMER_TIMER1CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER1CONTROL_TIMERPRE(config->timer1.clock_prescaler);
		if (config->timer1.interrup_enable) {
10008776:	7923      	ldrb	r3, [r4, #4]
10008778:	2b00      	cmp	r3, #0
1000877a:	d001      	beq.n	10008780 <dualtimer_init+0x68>
			regval |= DUALTIMER_TIMER1CONTROL_INTERRUPT_ENABLE;
1000877c:	2320      	movs	r3, #32
1000877e:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER1LOAD.reg = config->timer1.load_value;
10008780:	4b22      	ldr	r3, [pc, #136]	; (1000880c <dualtimer_init+0xf4>)
10008782:	68a2      	ldr	r2, [r4, #8]
10008784:	601a      	str	r2, [r3, #0]
		DUALTIMER0->TIMER1CONTROL.reg = regval;
10008786:	721d      	strb	r5, [r3, #8]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
10008788:	491f      	ldr	r1, [pc, #124]	; (10008808 <dualtimer_init+0xf0>)
1000878a:	22c4      	movs	r2, #196	; 0xc4
1000878c:	0052      	lsls	r2, r2, #1
1000878e:	5c88      	ldrb	r0, [r1, r2]
10008790:	2301      	movs	r3, #1
10008792:	4303      	orrs	r3, r0
10008794:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER1);
10008796:	2000      	movs	r0, #0
10008798:	4b1d      	ldr	r3, [pc, #116]	; (10008810 <dualtimer_init+0xf8>)
1000879a:	4798      	blx	r3
1000879c:	e000      	b.n	100087a0 <dualtimer_init+0x88>
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
	uint8_t regval = 0;
1000879e:	2500      	movs	r5, #0
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
		dualtimer_enable(DUALTIMER_TIMER1);
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
100087a0:	7b23      	ldrb	r3, [r4, #12]
100087a2:	2b00      	cmp	r3, #0
100087a4:	d029      	beq.n	100087fa <dualtimer_init+0xe2>
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
100087a6:	7b63      	ldrb	r3, [r4, #13]
100087a8:	2b00      	cmp	r3, #0
100087aa:	d005      	beq.n	100087b8 <dualtimer_init+0xa0>
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
100087ac:	2b01      	cmp	r3, #1
100087ae:	d005      	beq.n	100087bc <dualtimer_init+0xa4>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
100087b0:	2b02      	cmp	r3, #2
100087b2:	d104      	bne.n	100087be <dualtimer_init+0xa6>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
100087b4:	2540      	movs	r5, #64	; 0x40
100087b6:	e002      	b.n	100087be <dualtimer_init+0xa6>
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
100087b8:	2501      	movs	r5, #1
100087ba:	e000      	b.n	100087be <dualtimer_init+0xa6>
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
100087bc:	2500      	movs	r5, #0
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
		}
		regval |= (DUALTIMER_TIMER2CONTROL_TIMER_SIZE &
100087be:	7ba3      	ldrb	r3, [r4, #14]
100087c0:	005b      	lsls	r3, r3, #1
100087c2:	2102      	movs	r1, #2
100087c4:	4019      	ands	r1, r3
100087c6:	7be2      	ldrb	r2, [r4, #15]
100087c8:	0092      	lsls	r2, r2, #2
100087ca:	230c      	movs	r3, #12
100087cc:	4013      	ands	r3, r2
100087ce:	430b      	orrs	r3, r1
100087d0:	431d      	orrs	r5, r3
				((config->timer2.counter_size) << DUALTIMER_TIMER2CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER2CONTROL_TIMERPRE(config->timer2.clock_prescaler);
		if (config->timer2.interrup_enable) {
100087d2:	7c23      	ldrb	r3, [r4, #16]
100087d4:	2b00      	cmp	r3, #0
100087d6:	d001      	beq.n	100087dc <dualtimer_init+0xc4>
			regval |= DUALTIMER_TIMER2CONTROL_INTERRUPT_ENABLE;
100087d8:	2320      	movs	r3, #32
100087da:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER2LOAD.reg = config->timer2.load_value;
100087dc:	6962      	ldr	r2, [r4, #20]
100087de:	4b0b      	ldr	r3, [pc, #44]	; (1000880c <dualtimer_init+0xf4>)
100087e0:	621a      	str	r2, [r3, #32]
		DUALTIMER0->TIMER2CONTROL.reg = regval;
100087e2:	2228      	movs	r2, #40	; 0x28
100087e4:	549d      	strb	r5, [r3, r2]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_2_ENABLE;
100087e6:	4908      	ldr	r1, [pc, #32]	; (10008808 <dualtimer_init+0xf0>)
100087e8:	3261      	adds	r2, #97	; 0x61
100087ea:	32ff      	adds	r2, #255	; 0xff
100087ec:	5c88      	ldrb	r0, [r1, r2]
100087ee:	2302      	movs	r3, #2
100087f0:	4303      	orrs	r3, r0
100087f2:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER2);
100087f4:	2001      	movs	r0, #1
100087f6:	4b06      	ldr	r3, [pc, #24]	; (10008810 <dualtimer_init+0xf8>)
100087f8:	4798      	blx	r3
	}

	system_register_isr(RAM_ISR_TABLE_DUALTIMER_INDEX, (uint32_t)dualtimer_isr_handler);
100087fa:	4906      	ldr	r1, [pc, #24]	; (10008814 <dualtimer_init+0xfc>)
100087fc:	201e      	movs	r0, #30
100087fe:	4b06      	ldr	r3, [pc, #24]	; (10008818 <dualtimer_init+0x100>)
10008800:	4798      	blx	r3
}
10008802:	bd70      	pop	{r4, r5, r6, pc}
10008804:	100094e9 	.word	0x100094e9
10008808:	4000b000 	.word	0x4000b000
1000880c:	40001000 	.word	0x40001000
10008810:	100086d1 	.word	0x100086d1
10008814:	10008669 	.word	0x10008669
10008818:	10009951 	.word	0x10009951

1000881c <dualtimer_register_callback>:
 *
 * \param[in]     callback_func Pointer to callback function
 */
void dualtimer_register_callback(enum dualtimer_timer timer, dualtimer_callback_t fun)
{
	if (timer == DUALTIMER_TIMER1) {
1000881c:	2800      	cmp	r0, #0
1000881e:	d102      	bne.n	10008826 <dualtimer_register_callback+0xa>
		dualtimer_callback_timer1 = fun;
10008820:	4b02      	ldr	r3, [pc, #8]	; (1000882c <dualtimer_register_callback+0x10>)
10008822:	6019      	str	r1, [r3, #0]
10008824:	e001      	b.n	1000882a <dualtimer_register_callback+0xe>
	} else {
		dualtimer_callback_timer2 = fun;
10008826:	4b02      	ldr	r3, [pc, #8]	; (10008830 <dualtimer_register_callback+0x14>)
10008828:	6019      	str	r1, [r3, #0]
	}
}
1000882a:	4770      	bx	lr
1000882c:	100118b0 	.word	0x100118b0
10008830:	100118b4 	.word	0x100118b4

10008834 <gpio_port0_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port0_isr_handler(void)
{
10008834:	b570      	push	{r4, r5, r6, lr}
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;
10008836:	4b16      	ldr	r3, [pc, #88]	; (10008890 <gpio_port0_isr_handler+0x5c>)
10008838:	681d      	ldr	r5, [r3, #0]
1000883a:	8f29      	ldrh	r1, [r5, #56]	; 0x38
1000883c:	b289      	uxth	r1, r1

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
1000883e:	07cb      	lsls	r3, r1, #31
10008840:	d407      	bmi.n	10008852 <gpio_port0_isr_handler+0x1e>
10008842:	2301      	movs	r3, #1
10008844:	2401      	movs	r4, #1
10008846:	0018      	movs	r0, r3
10008848:	0022      	movs	r2, r4
1000884a:	409a      	lsls	r2, r3
1000884c:	4211      	tst	r1, r2
1000884e:	d014      	beq.n	1000887a <gpio_port0_isr_handler+0x46>
10008850:	e001      	b.n	10008856 <gpio_port0_isr_handler+0x22>
10008852:	2201      	movs	r2, #1
10008854:	2000      	movs	r0, #0
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
10008856:	b292      	uxth	r2, r2
10008858:	872a      	strh	r2, [r5, #56]	; 0x38
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
1000885a:	2346      	movs	r3, #70	; 0x46
1000885c:	4a0c      	ldr	r2, [pc, #48]	; (10008890 <gpio_port0_isr_handler+0x5c>)
1000885e:	5ad3      	ldrh	r3, [r2, r3]
10008860:	4103      	asrs	r3, r0
10008862:	07db      	lsls	r3, r3, #31
10008864:	d50c      	bpl.n	10008880 <gpio_port0_isr_handler+0x4c>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
10008866:	2344      	movs	r3, #68	; 0x44

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
10008868:	5ad3      	ldrh	r3, [r2, r3]
1000886a:	4103      	asrs	r3, r0
1000886c:	07db      	lsls	r3, r3, #31
1000886e:	d507      	bpl.n	10008880 <gpio_port0_isr_handler+0x4c>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
                _gpio_instances[0].callback[i]();
10008870:	0080      	lsls	r0, r0, #2
10008872:	1810      	adds	r0, r2, r0
10008874:	6843      	ldr	r3, [r0, #4]
10008876:	4798      	blx	r3
10008878:	e002      	b.n	10008880 <gpio_port0_isr_handler+0x4c>
1000887a:	3301      	adds	r3, #1
 */
static void gpio_port0_isr_handler(void)
{
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
1000887c:	2b10      	cmp	r3, #16
1000887e:	d1e2      	bne.n	10008846 <gpio_port0_isr_handler+0x12>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
10008880:	2180      	movs	r1, #128	; 0x80
10008882:	0409      	lsls	r1, r1, #16
10008884:	23c0      	movs	r3, #192	; 0xc0
10008886:	005b      	lsls	r3, r3, #1
10008888:	4a02      	ldr	r2, [pc, #8]	; (10008894 <gpio_port0_isr_handler+0x60>)
1000888a:	50d1      	str	r1, [r2, r3]
                _gpio_instances[0].callback[i]();
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO0_IRQn);
}
1000888c:	bd70      	pop	{r4, r5, r6, pc}
1000888e:	46c0      	nop			; (mov r8, r8)
10008890:	100133ec 	.word	0x100133ec
10008894:	e000e100 	.word	0xe000e100

10008898 <gpio_port1_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port1_isr_handler(void)
{
10008898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;
1000889a:	4b18      	ldr	r3, [pc, #96]	; (100088fc <gpio_port1_isr_handler+0x64>)
1000889c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
1000889e:	8f1e      	ldrh	r6, [r3, #56]	; 0x38
100088a0:	b2b6      	uxth	r6, r6
100088a2:	0037      	movs	r7, r6
100088a4:	2400      	movs	r4, #0

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
100088a6:	0b76      	lsrs	r6, r6, #13
100088a8:	0376      	lsls	r6, r6, #13
			aon_handle_ext_wakeup_isr();
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
100088aa:	4d14      	ldr	r5, [pc, #80]	; (100088fc <gpio_port1_isr_handler+0x64>)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
100088ac:	2e00      	cmp	r6, #0
100088ae:	d001      	beq.n	100088b4 <gpio_port1_isr_handler+0x1c>
			aon_handle_ext_wakeup_isr();
100088b0:	4b13      	ldr	r3, [pc, #76]	; (10008900 <gpio_port1_isr_handler+0x68>)
100088b2:	4798      	blx	r3
		}

		if (flag & (1 << i)) {
100088b4:	0022      	movs	r2, r4
100088b6:	2301      	movs	r3, #1
100088b8:	40a3      	lsls	r3, r4
100088ba:	421f      	tst	r7, r3
100088bc:	d013      	beq.n	100088e6 <gpio_port1_isr_handler+0x4e>
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
100088be:	b29b      	uxth	r3, r3
100088c0:	6ca9      	ldr	r1, [r5, #72]	; 0x48
100088c2:	870b      	strh	r3, [r1, #56]	; 0x38
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
100088c4:	238e      	movs	r3, #142	; 0x8e
100088c6:	5aeb      	ldrh	r3, [r5, r3]
100088c8:	4123      	asrs	r3, r4
100088ca:	07db      	lsls	r3, r3, #31
100088cc:	d50b      	bpl.n	100088e6 <gpio_port1_isr_handler+0x4e>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
100088ce:	238c      	movs	r3, #140	; 0x8c
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
100088d0:	490a      	ldr	r1, [pc, #40]	; (100088fc <gpio_port1_isr_handler+0x64>)
100088d2:	5acb      	ldrh	r3, [r1, r3]
100088d4:	4123      	asrs	r3, r4
100088d6:	07db      	lsls	r3, r3, #31
100088d8:	d505      	bpl.n	100088e6 <gpio_port1_isr_handler+0x4e>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
				_gpio_instances[1].callback[i]();
100088da:	3212      	adds	r2, #18
100088dc:	0092      	lsls	r2, r2, #2
100088de:	188a      	adds	r2, r1, r2
100088e0:	6853      	ldr	r3, [r2, #4]
100088e2:	4798      	blx	r3
				break;
100088e4:	e002      	b.n	100088ec <gpio_port1_isr_handler+0x54>
100088e6:	3401      	adds	r4, #1
 */
static void gpio_port1_isr_handler(void)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
100088e8:	2c10      	cmp	r4, #16
100088ea:	d1df      	bne.n	100088ac <gpio_port1_isr_handler+0x14>
100088ec:	2180      	movs	r1, #128	; 0x80
100088ee:	0449      	lsls	r1, r1, #17
100088f0:	23c0      	movs	r3, #192	; 0xc0
100088f2:	005b      	lsls	r3, r3, #1
100088f4:	4a03      	ldr	r2, [pc, #12]	; (10008904 <gpio_port1_isr_handler+0x6c>)
100088f6:	50d1      	str	r1, [r2, r3]
				break;
			}
		}
	}
	NVIC_ClearPendingIRQ(GPIO1_IRQn);
}
100088f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100088fa:	46c0      	nop			; (mov r8, r8)
100088fc:	100133ec 	.word	0x100133ec
10008900:	0001bc51 	.word	0x0001bc51
10008904:	e000e100 	.word	0xe000e100

10008908 <gpio_port2_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port2_isr_handler(void)
{
10008908:	b510      	push	{r4, lr}
	uint32_t flag = _gpio_instances[2].hw->INTSTATUSCLEAR.reg;
1000890a:	2390      	movs	r3, #144	; 0x90
1000890c:	4a1b      	ldr	r2, [pc, #108]	; (1000897c <gpio_port2_isr_handler+0x74>)
1000890e:	58d2      	ldr	r2, [r2, r3]
10008910:	8f13      	ldrh	r3, [r2, #56]	; 0x38
10008912:	b29b      	uxth	r3, r3

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
10008914:	04d9      	lsls	r1, r3, #19
10008916:	d414      	bmi.n	10008942 <gpio_port2_isr_handler+0x3a>
10008918:	0499      	lsls	r1, r3, #18
1000891a:	d40a      	bmi.n	10008932 <gpio_port2_isr_handler+0x2a>
1000891c:	0459      	lsls	r1, r3, #17
1000891e:	d40c      	bmi.n	1000893a <gpio_port2_isr_handler+0x32>
10008920:	0bdb      	lsrs	r3, r3, #15
10008922:	03db      	lsls	r3, r3, #15
10008924:	b29b      	uxth	r3, r3
10008926:	2b00      	cmp	r3, #0
10008928:	d020      	beq.n	1000896c <gpio_port2_isr_handler+0x64>
1000892a:	2380      	movs	r3, #128	; 0x80
1000892c:	021b      	lsls	r3, r3, #8
1000892e:	210f      	movs	r1, #15
10008930:	e00a      	b.n	10008948 <gpio_port2_isr_handler+0x40>
10008932:	2380      	movs	r3, #128	; 0x80
10008934:	019b      	lsls	r3, r3, #6
10008936:	210d      	movs	r1, #13
10008938:	e006      	b.n	10008948 <gpio_port2_isr_handler+0x40>
1000893a:	2380      	movs	r3, #128	; 0x80
1000893c:	01db      	lsls	r3, r3, #7
1000893e:	210e      	movs	r1, #14
10008940:	e002      	b.n	10008948 <gpio_port2_isr_handler+0x40>
10008942:	2380      	movs	r3, #128	; 0x80
10008944:	015b      	lsls	r3, r3, #5
10008946:	210c      	movs	r1, #12
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
10008948:	b29b      	uxth	r3, r3
1000894a:	8713      	strh	r3, [r2, #56]	; 0x38
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
1000894c:	23d6      	movs	r3, #214	; 0xd6
1000894e:	4a0b      	ldr	r2, [pc, #44]	; (1000897c <gpio_port2_isr_handler+0x74>)
10008950:	5ad3      	ldrh	r3, [r2, r3]
10008952:	410b      	asrs	r3, r1
10008954:	07db      	lsls	r3, r3, #31
10008956:	d509      	bpl.n	1000896c <gpio_port2_isr_handler+0x64>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
10008958:	23d4      	movs	r3, #212	; 0xd4

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
1000895a:	5ad3      	ldrh	r3, [r2, r3]
1000895c:	410b      	asrs	r3, r1
1000895e:	07db      	lsls	r3, r3, #31
10008960:	d504      	bpl.n	1000896c <gpio_port2_isr_handler+0x64>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
                _gpio_instances[2].callback[i]();
10008962:	3124      	adds	r1, #36	; 0x24
10008964:	0089      	lsls	r1, r1, #2
10008966:	1851      	adds	r1, r2, r1
10008968:	684b      	ldr	r3, [r1, #4]
1000896a:	4798      	blx	r3
1000896c:	2180      	movs	r1, #128	; 0x80
1000896e:	0489      	lsls	r1, r1, #18
10008970:	23c0      	movs	r3, #192	; 0xc0
10008972:	005b      	lsls	r3, r3, #1
10008974:	4a02      	ldr	r2, [pc, #8]	; (10008980 <gpio_port2_isr_handler+0x78>)
10008976:	50d1      	str	r1, [r2, r3]
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO2_IRQn);
}
10008978:	bd10      	pop	{r4, pc}
1000897a:	46c0      	nop			; (mov r8, r8)
1000897c:	100133ec 	.word	0x100133ec
10008980:	e000e100 	.word	0xe000e100

10008984 <gpio_get_config_defaults>:
 *  \param[out] config  Configuration structure to initialize to default values.
 */
void gpio_get_config_defaults(struct gpio_config *const config)
{
	/* Default configuration values */
	config->direction  = GPIO_PIN_DIR_INPUT;
10008984:	2300      	movs	r3, #0
10008986:	7003      	strb	r3, [r0, #0]
	config->input_pull = GPIO_PIN_PULL_UP;
10008988:	2201      	movs	r2, #1
1000898a:	7042      	strb	r2, [r0, #1]
	config->powersave  = false;
1000898c:	7083      	strb	r3, [r0, #2]
	config->aon_wakeup = false;
1000898e:	70c3      	strb	r3, [r0, #3]
}
10008990:	4770      	bx	lr
10008992:	46c0      	nop			; (mov r8, r8)

10008994 <gpio_pin_set_config>:
 *  \retval STATUS_RESOURCE_NOT_AVAILABLE   Requested gpio is already in use.
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
10008994:	b570      	push	{r4, r5, r6, lr}
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
10008996:	2317      	movs	r3, #23
	enum status_code status = STATUS_OK;

	/* Following GPIO's should never be modified by user.
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
10008998:	2801      	cmp	r0, #1
1000899a:	d800      	bhi.n	1000899e <gpio_pin_set_config+0xa>
1000899c:	e0c8      	b.n	10008b30 <gpio_pin_set_config+0x19c>
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
	} else {
		if (gpio_pin <= 7) {
1000899e:	2807      	cmp	r0, #7
100089a0:	d809      	bhi.n	100089b6 <gpio_pin_set_config+0x22>
			LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
100089a2:	4d64      	ldr	r5, [pc, #400]	; (10008b34 <gpio_pin_set_config+0x1a0>)
100089a4:	6c6a      	ldr	r2, [r5, #68]	; 0x44
100089a6:	3b10      	subs	r3, #16
100089a8:	4003      	ands	r3, r0
100089aa:	009b      	lsls	r3, r3, #2
100089ac:	2407      	movs	r4, #7
100089ae:	409c      	lsls	r4, r3
100089b0:	43a2      	bics	r2, r4
100089b2:	646a      	str	r2, [r5, #68]	; 0x44
100089b4:	e029      	b.n	10008a0a <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 15) {
100089b6:	280f      	cmp	r0, #15
100089b8:	d809      	bhi.n	100089ce <gpio_pin_set_config+0x3a>
			LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
100089ba:	4d5e      	ldr	r5, [pc, #376]	; (10008b34 <gpio_pin_set_config+0x1a0>)
100089bc:	6caa      	ldr	r2, [r5, #72]	; 0x48
100089be:	2307      	movs	r3, #7
100089c0:	4003      	ands	r3, r0
100089c2:	009b      	lsls	r3, r3, #2
100089c4:	2407      	movs	r4, #7
100089c6:	409c      	lsls	r4, r3
100089c8:	43a2      	bics	r2, r4
100089ca:	64aa      	str	r2, [r5, #72]	; 0x48
100089cc:	e01d      	b.n	10008a0a <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 23) {
100089ce:	2817      	cmp	r0, #23
100089d0:	d809      	bhi.n	100089e6 <gpio_pin_set_config+0x52>
			LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
100089d2:	4d58      	ldr	r5, [pc, #352]	; (10008b34 <gpio_pin_set_config+0x1a0>)
100089d4:	6cea      	ldr	r2, [r5, #76]	; 0x4c
100089d6:	2307      	movs	r3, #7
100089d8:	4003      	ands	r3, r0
100089da:	009b      	lsls	r3, r3, #2
100089dc:	2407      	movs	r4, #7
100089de:	409c      	lsls	r4, r3
100089e0:	43a2      	bics	r2, r4
100089e2:	64ea      	str	r2, [r5, #76]	; 0x4c
100089e4:	e011      	b.n	10008a0a <gpio_pin_set_config+0x76>
		} else if (44 <= gpio_pin  && gpio_pin < 48) {
100089e6:	0003      	movs	r3, r0
100089e8:	3b2c      	subs	r3, #44	; 0x2c
100089ea:	2b03      	cmp	r3, #3
100089ec:	d80d      	bhi.n	10008a0a <gpio_pin_set_config+0x76>
			/* Set GPIO_MSx as digital mode */
			AON_GP_REGS0->MS_GPIO_MODE.vec.ANALOG_ENABLE_ &= ~(1 << (gpio_pin - PIN_GPIO_MS4));
100089ee:	4d52      	ldr	r5, [pc, #328]	; (10008b38 <gpio_pin_set_config+0x1a4>)
100089f0:	2482      	movs	r4, #130	; 0x82
100089f2:	00e4      	lsls	r4, r4, #3
100089f4:	5d2a      	ldrb	r2, [r5, r4]
100089f6:	0712      	lsls	r2, r2, #28
100089f8:	2601      	movs	r6, #1
100089fa:	409e      	lsls	r6, r3
100089fc:	0f12      	lsrs	r2, r2, #28
100089fe:	5d2b      	ldrb	r3, [r5, r4]
10008a00:	43b2      	bics	r2, r6
10008a02:	260f      	movs	r6, #15
10008a04:	43b3      	bics	r3, r6
10008a06:	4313      	orrs	r3, r2
10008a08:	552b      	strb	r3, [r5, r4]
		}
	
		if ((gpio_pin == PIN_AO_GPIO_0) || (gpio_pin == PIN_AO_GPIO_1) ||
10008a0a:	0003      	movs	r3, r0
10008a0c:	3b1d      	subs	r3, #29
10008a0e:	2b02      	cmp	r3, #2
10008a10:	d829      	bhi.n	10008a66 <gpio_pin_set_config+0xd2>
				(gpio_pin == PIN_AO_GPIO_2)) {
			/* Active Low, Always On Pull Enable Control */
			if (config->input_pull == GPIO_PIN_PULL_UP) {
10008a12:	784b      	ldrb	r3, [r1, #1]
10008a14:	2b01      	cmp	r3, #1
10008a16:	d108      	bne.n	10008a2a <gpio_pin_set_config+0x96>
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
10008a18:	4d47      	ldr	r5, [pc, #284]	; (10008b38 <gpio_pin_set_config+0x1a4>)
10008a1a:	7d2b      	ldrb	r3, [r5, #20]
10008a1c:	241f      	movs	r4, #31
10008a1e:	1a24      	subs	r4, r4, r0
10008a20:	2201      	movs	r2, #1
10008a22:	40a2      	lsls	r2, r4
10008a24:	4393      	bics	r3, r2
10008a26:	752b      	strb	r3, [r5, #20]
10008a28:	e008      	b.n	10008a3c <gpio_pin_set_config+0xa8>
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
10008a2a:	4c43      	ldr	r4, [pc, #268]	; (10008b38 <gpio_pin_set_config+0x1a4>)
10008a2c:	7d25      	ldrb	r5, [r4, #20]
10008a2e:	221f      	movs	r2, #31
10008a30:	1a12      	subs	r2, r2, r0
10008a32:	2301      	movs	r3, #1
10008a34:	4093      	lsls	r3, r2
10008a36:	432b      	orrs	r3, r5
10008a38:	b2db      	uxtb	r3, r3
10008a3a:	7523      	strb	r3, [r4, #20]
			}
			if (config->aon_wakeup) {
10008a3c:	78ca      	ldrb	r2, [r1, #3]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008a3e:	2300      	movs	r3, #0
			if (config->input_pull == GPIO_PIN_PULL_UP) {
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
			}
			if (config->aon_wakeup) {
10008a40:	2a00      	cmp	r2, #0
10008a42:	d075      	beq.n	10008b30 <gpio_pin_set_config+0x19c>
				/* Enable AON_GPIO_x to be a wakeup MCU from sleep mode */
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
10008a44:	493c      	ldr	r1, [pc, #240]	; (10008b38 <gpio_pin_set_config+0x1a4>)
10008a46:	880c      	ldrh	r4, [r1, #0]
10008a48:	221f      	movs	r2, #31
10008a4a:	1a10      	subs	r0, r2, r0
10008a4c:	0080      	lsls	r0, r0, #2
10008a4e:	3301      	adds	r3, #1
10008a50:	4083      	lsls	r3, r0
10008a52:	4323      	orrs	r3, r4
10008a54:	b29b      	uxth	r3, r3
10008a56:	800b      	strh	r3, [r1, #0]
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
10008a58:	4a38      	ldr	r2, [pc, #224]	; (10008b3c <gpio_pin_set_config+0x1a8>)
10008a5a:	7811      	ldrb	r1, [r2, #0]
10008a5c:	2302      	movs	r3, #2
10008a5e:	430b      	orrs	r3, r1
10008a60:	7013      	strb	r3, [r2, #0]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008a62:	2300      	movs	r3, #0
10008a64:	e064      	b.n	10008b30 <gpio_pin_set_config+0x19c>
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
10008a66:	780a      	ldrb	r2, [r1, #0]
10008a68:	2a00      	cmp	r2, #0
10008a6a:	d140      	bne.n	10008aee <gpio_pin_set_config+0x15a>
				if(gpio_pin < 16) {
10008a6c:	280f      	cmp	r0, #15
10008a6e:	d808      	bhi.n	10008a82 <gpio_pin_set_config+0xee>
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
10008a70:	2301      	movs	r3, #1
10008a72:	4083      	lsls	r3, r0
10008a74:	b29b      	uxth	r3, r3
10008a76:	4a32      	ldr	r2, [pc, #200]	; (10008b40 <gpio_pin_set_config+0x1ac>)
10008a78:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008a7a:	2300      	movs	r3, #0
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
10008a7c:	281f      	cmp	r0, #31
10008a7e:	d857      	bhi.n	10008b30 <gpio_pin_set_config+0x19c>
10008a80:	e012      	b.n	10008aa8 <gpio_pin_set_config+0x114>
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
				if(gpio_pin < 16) {
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32){
10008a82:	281f      	cmp	r0, #31
10008a84:	d807      	bhi.n	10008a96 <gpio_pin_set_config+0x102>
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
10008a86:	220f      	movs	r2, #15
10008a88:	4002      	ands	r2, r0
10008a8a:	2301      	movs	r3, #1
10008a8c:	4093      	lsls	r3, r2
10008a8e:	b29b      	uxth	r3, r3
10008a90:	4a2c      	ldr	r2, [pc, #176]	; (10008b44 <gpio_pin_set_config+0x1b0>)
10008a92:	8293      	strh	r3, [r2, #20]
10008a94:	e008      	b.n	10008aa8 <gpio_pin_set_config+0x114>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
10008a96:	230f      	movs	r3, #15
10008a98:	4018      	ands	r0, r3
10008a9a:	3b0e      	subs	r3, #14
10008a9c:	4083      	lsls	r3, r0
10008a9e:	b29b      	uxth	r3, r3
10008aa0:	4a29      	ldr	r2, [pc, #164]	; (10008b48 <gpio_pin_set_config+0x1b4>)
10008aa2:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008aa4:	2300      	movs	r3, #0
10008aa6:	e043      	b.n	10008b30 <gpio_pin_set_config+0x19c>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
10008aa8:	784b      	ldrb	r3, [r1, #1]
10008aaa:	2b01      	cmp	r3, #1
10008aac:	d00c      	beq.n	10008ac8 <gpio_pin_set_config+0x134>
10008aae:	2b00      	cmp	r3, #0
10008ab0:	d002      	beq.n	10008ab8 <gpio_pin_set_config+0x124>
10008ab2:	2b02      	cmp	r3, #2
10008ab4:	d010      	beq.n	10008ad8 <gpio_pin_set_config+0x144>
10008ab6:	e03a      	b.n	10008b2e <gpio_pin_set_config+0x19a>
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
10008ab8:	491e      	ldr	r1, [pc, #120]	; (10008b34 <gpio_pin_set_config+0x1a0>)
10008aba:	6d0a      	ldr	r2, [r1, #80]	; 0x50
10008abc:	2301      	movs	r3, #1
10008abe:	4083      	lsls	r3, r0
10008ac0:	4313      	orrs	r3, r2
10008ac2:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008ac4:	2300      	movs	r3, #0
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
10008ac6:	e033      	b.n	10008b30 <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
10008ac8:	491a      	ldr	r1, [pc, #104]	; (10008b34 <gpio_pin_set_config+0x1a0>)
10008aca:	6d0b      	ldr	r3, [r1, #80]	; 0x50
10008acc:	2201      	movs	r2, #1
10008ace:	4082      	lsls	r2, r0
10008ad0:	4393      	bics	r3, r2
10008ad2:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008ad4:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
10008ad6:	e02b      	b.n	10008b30 <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
10008ad8:	4b16      	ldr	r3, [pc, #88]	; (10008b34 <gpio_pin_set_config+0x1a0>)
10008ada:	6d59      	ldr	r1, [r3, #84]	; 0x54
10008adc:	2201      	movs	r2, #1
10008ade:	4082      	lsls	r2, r0
10008ae0:	4311      	orrs	r1, r2
10008ae2:	6559      	str	r1, [r3, #84]	; 0x54
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
10008ae4:	6d19      	ldr	r1, [r3, #80]	; 0x50
10008ae6:	4391      	bics	r1, r2
10008ae8:	6519      	str	r1, [r3, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008aea:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
10008aec:	e020      	b.n	10008b30 <gpio_pin_set_config+0x19c>
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008aee:	2300      	movs	r3, #0
						default:
							status = STATUS_ERR_INVALID_ARG;
							break;
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
10008af0:	2a01      	cmp	r2, #1
10008af2:	d11d      	bne.n	10008b30 <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
10008af4:	280f      	cmp	r0, #15
10008af6:	d806      	bhi.n	10008b06 <gpio_pin_set_config+0x172>
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
10008af8:	3301      	adds	r3, #1
10008afa:	4083      	lsls	r3, r0
10008afc:	b29b      	uxth	r3, r3
10008afe:	4a10      	ldr	r2, [pc, #64]	; (10008b40 <gpio_pin_set_config+0x1ac>)
10008b00:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008b02:	2300      	movs	r3, #0
10008b04:	e014      	b.n	10008b30 <gpio_pin_set_config+0x19c>
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
10008b06:	281f      	cmp	r0, #31
10008b08:	d808      	bhi.n	10008b1c <gpio_pin_set_config+0x188>
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
10008b0a:	230f      	movs	r3, #15
10008b0c:	4018      	ands	r0, r3
10008b0e:	3b0e      	subs	r3, #14
10008b10:	4083      	lsls	r3, r0
10008b12:	b29b      	uxth	r3, r3
10008b14:	4a0b      	ldr	r2, [pc, #44]	; (10008b44 <gpio_pin_set_config+0x1b0>)
10008b16:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008b18:	2300      	movs	r3, #0
10008b1a:	e009      	b.n	10008b30 <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENSET.reg = (1 << (gpio_pin % 16));
10008b1c:	230f      	movs	r3, #15
10008b1e:	4018      	ands	r0, r3
10008b20:	3b0e      	subs	r3, #14
10008b22:	4083      	lsls	r3, r0
10008b24:	b29b      	uxth	r3, r3
10008b26:	4a08      	ldr	r2, [pc, #32]	; (10008b48 <gpio_pin_set_config+0x1b4>)
10008b28:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008b2a:	2300      	movs	r3, #0
10008b2c:	e000      	b.n	10008b30 <gpio_pin_set_config+0x19c>
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
						default:
							status = STATUS_ERR_INVALID_ARG;
10008b2e:	2317      	movs	r3, #23
				}
			}
		}
	}
	return status;
}
10008b30:	0018      	movs	r0, r3
10008b32:	bd70      	pop	{r4, r5, r6, pc}
10008b34:	4000b000 	.word	0x4000b000
10008b38:	4000f000 	.word	0x4000f000
10008b3c:	4000e000 	.word	0x4000e000
10008b40:	40010000 	.word	0x40010000
10008b44:	40011000 	.word	0x40011000
10008b48:	40013000 	.word	0x40013000

10008b4c <gpio_pin_set_output_level>:
 *
 *  \param[in] gpio_pin  Index of the GPIO pin to write to.
 *  \param[in] level     Logical level to set the given pin to.
 */
void gpio_pin_set_output_level(const uint8_t gpio_pin, const bool level)
{
10008b4c:	b510      	push	{r4, lr}
	if (gpio_pin < 16) {
10008b4e:	280f      	cmp	r0, #15
10008b50:	d810      	bhi.n	10008b74 <gpio_pin_set_output_level+0x28>
		if(level) {
10008b52:	2900      	cmp	r1, #0
10008b54:	d007      	beq.n	10008b66 <gpio_pin_set_output_level+0x1a>
			GPIO0->DATAOUT.reg |= (1 << gpio_pin);
10008b56:	4a1d      	ldr	r2, [pc, #116]	; (10008bcc <gpio_pin_set_output_level+0x80>)
10008b58:	8891      	ldrh	r1, [r2, #4]
10008b5a:	2301      	movs	r3, #1
10008b5c:	4083      	lsls	r3, r0
10008b5e:	430b      	orrs	r3, r1
10008b60:	b29b      	uxth	r3, r3
10008b62:	8093      	strh	r3, [r2, #4]
10008b64:	e031      	b.n	10008bca <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO0->DATAOUT.reg &= ~(1 << gpio_pin);
10008b66:	4919      	ldr	r1, [pc, #100]	; (10008bcc <gpio_pin_set_output_level+0x80>)
10008b68:	888b      	ldrh	r3, [r1, #4]
10008b6a:	2201      	movs	r2, #1
10008b6c:	4082      	lsls	r2, r0
10008b6e:	4393      	bics	r3, r2
10008b70:	808b      	strh	r3, [r1, #4]
10008b72:	e02a      	b.n	10008bca <gpio_pin_set_output_level+0x7e>
		}
	} else if (gpio_pin < 32) {
10008b74:	281f      	cmp	r0, #31
10008b76:	d814      	bhi.n	10008ba2 <gpio_pin_set_output_level+0x56>
		if(level) {
10008b78:	2900      	cmp	r1, #0
10008b7a:	d009      	beq.n	10008b90 <gpio_pin_set_output_level+0x44>
			GPIO1->DATAOUT.reg |= (1 << (gpio_pin % 16));
10008b7c:	4914      	ldr	r1, [pc, #80]	; (10008bd0 <gpio_pin_set_output_level+0x84>)
10008b7e:	888c      	ldrh	r4, [r1, #4]
10008b80:	220f      	movs	r2, #15
10008b82:	4010      	ands	r0, r2
10008b84:	2301      	movs	r3, #1
10008b86:	4083      	lsls	r3, r0
10008b88:	4323      	orrs	r3, r4
10008b8a:	b29b      	uxth	r3, r3
10008b8c:	808b      	strh	r3, [r1, #4]
10008b8e:	e01c      	b.n	10008bca <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO1->DATAOUT.reg &= ~(1 << (gpio_pin % 16));
10008b90:	490f      	ldr	r1, [pc, #60]	; (10008bd0 <gpio_pin_set_output_level+0x84>)
10008b92:	888b      	ldrh	r3, [r1, #4]
10008b94:	220f      	movs	r2, #15
10008b96:	4010      	ands	r0, r2
10008b98:	3a0e      	subs	r2, #14
10008b9a:	4082      	lsls	r2, r0
10008b9c:	4393      	bics	r3, r2
10008b9e:	808b      	strh	r3, [r1, #4]
10008ba0:	e013      	b.n	10008bca <gpio_pin_set_output_level+0x7e>
		}
	} else {
		if(level) {
10008ba2:	2900      	cmp	r1, #0
10008ba4:	d009      	beq.n	10008bba <gpio_pin_set_output_level+0x6e>
			GPIO2->DATAOUT.reg |= (1 << (gpio_pin % 16));
10008ba6:	490b      	ldr	r1, [pc, #44]	; (10008bd4 <gpio_pin_set_output_level+0x88>)
10008ba8:	888c      	ldrh	r4, [r1, #4]
10008baa:	220f      	movs	r2, #15
10008bac:	4010      	ands	r0, r2
10008bae:	2301      	movs	r3, #1
10008bb0:	4083      	lsls	r3, r0
10008bb2:	4323      	orrs	r3, r4
10008bb4:	b29b      	uxth	r3, r3
10008bb6:	808b      	strh	r3, [r1, #4]
10008bb8:	e007      	b.n	10008bca <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO2->DATAOUT.reg &= ~(1 << (gpio_pin % 16));
10008bba:	4906      	ldr	r1, [pc, #24]	; (10008bd4 <gpio_pin_set_output_level+0x88>)
10008bbc:	888b      	ldrh	r3, [r1, #4]
10008bbe:	220f      	movs	r2, #15
10008bc0:	4010      	ands	r0, r2
10008bc2:	3a0e      	subs	r2, #14
10008bc4:	4082      	lsls	r2, r0
10008bc6:	4393      	bics	r3, r2
10008bc8:	808b      	strh	r3, [r1, #4]
		}
	}
}
10008bca:	bd10      	pop	{r4, pc}
10008bcc:	40010000 	.word	0x40010000
10008bd0:	40011000 	.word	0x40011000
10008bd4:	40013000 	.word	0x40013000

10008bd8 <gpio_pinmux_cofiguration>:
 *
 *  \param[in] gpio_pin   Index of the GPIO pin to toggle.
 *  \param[in] pinmux_sel PINMUX selection.
 */
void gpio_pinmux_cofiguration(const uint8_t gpio_pin, uint16_t pinmux_sel)
{
10008bd8:	b570      	push	{r4, r5, r6, lr}
	uint8_t megamux_sel = (pinmux_sel >> 8) & 0xFF;
10008bda:	0a0d      	lsrs	r5, r1, #8

	pinmux_sel &= 0xFF;
10008bdc:	23ff      	movs	r3, #255	; 0xff
10008bde:	4019      	ands	r1, r3

	if (gpio_pin <= 7) {
10008be0:	2807      	cmp	r0, #7
10008be2:	d833      	bhi.n	10008c4c <gpio_pinmux_cofiguration+0x74>
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
10008be4:	4a4e      	ldr	r2, [pc, #312]	; (10008d20 <gpio_pinmux_cofiguration+0x148>)
10008be6:	6c54      	ldr	r4, [r2, #68]	; 0x44
10008be8:	3bf8      	subs	r3, #248	; 0xf8
10008bea:	4003      	ands	r3, r0
10008bec:	009b      	lsls	r3, r3, #2
10008bee:	2607      	movs	r6, #7
10008bf0:	409e      	lsls	r6, r3
10008bf2:	43b4      	bics	r4, r6
10008bf4:	6454      	str	r4, [r2, #68]	; 0x44
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
10008bf6:	6c54      	ldr	r4, [r2, #68]	; 0x44
10008bf8:	000e      	movs	r6, r1
10008bfa:	409e      	lsls	r6, r3
10008bfc:	0033      	movs	r3, r6
10008bfe:	4323      	orrs	r3, r4
10008c00:	6453      	str	r3, [r2, #68]	; 0x44
		if (pinmux_sel == 0x01) {
10008c02:	2901      	cmp	r1, #1
10008c04:	d000      	beq.n	10008c08 <gpio_pinmux_cofiguration+0x30>
10008c06:	e08a      	b.n	10008d1e <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 3) {
10008c08:	2803      	cmp	r0, #3
10008c0a:	d80f      	bhi.n	10008c2c <gpio_pinmux_cofiguration+0x54>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10008c0c:	0011      	movs	r1, r2
10008c0e:	22d0      	movs	r2, #208	; 0xd0
10008c10:	0052      	lsls	r2, r2, #1
10008c12:	588c      	ldr	r4, [r1, r2]
10008c14:	2303      	movs	r3, #3
10008c16:	4018      	ands	r0, r3
10008c18:	00c0      	lsls	r0, r0, #3
10008c1a:	333c      	adds	r3, #60	; 0x3c
10008c1c:	4083      	lsls	r3, r0
10008c1e:	439c      	bics	r4, r3
10008c20:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
10008c22:	588b      	ldr	r3, [r1, r2]
10008c24:	4085      	lsls	r5, r0
10008c26:	431d      	orrs	r5, r3
10008c28:	508d      	str	r5, [r1, r2]
10008c2a:	e078      	b.n	10008d1e <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 7) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10008c2c:	493c      	ldr	r1, [pc, #240]	; (10008d20 <gpio_pinmux_cofiguration+0x148>)
10008c2e:	22d2      	movs	r2, #210	; 0xd2
10008c30:	0052      	lsls	r2, r2, #1
10008c32:	588c      	ldr	r4, [r1, r2]
10008c34:	2303      	movs	r3, #3
10008c36:	4018      	ands	r0, r3
10008c38:	00c0      	lsls	r0, r0, #3
10008c3a:	333c      	adds	r3, #60	; 0x3c
10008c3c:	4083      	lsls	r3, r0
10008c3e:	439c      	bics	r4, r3
10008c40:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
10008c42:	588b      	ldr	r3, [r1, r2]
10008c44:	4085      	lsls	r5, r0
10008c46:	431d      	orrs	r5, r3
10008c48:	508d      	str	r5, [r1, r2]
10008c4a:	e068      	b.n	10008d1e <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 15) {
10008c4c:	280f      	cmp	r0, #15
10008c4e:	d832      	bhi.n	10008cb6 <gpio_pinmux_cofiguration+0xde>
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
10008c50:	4a33      	ldr	r2, [pc, #204]	; (10008d20 <gpio_pinmux_cofiguration+0x148>)
10008c52:	6c94      	ldr	r4, [r2, #72]	; 0x48
10008c54:	2307      	movs	r3, #7
10008c56:	4003      	ands	r3, r0
10008c58:	009b      	lsls	r3, r3, #2
10008c5a:	2607      	movs	r6, #7
10008c5c:	409e      	lsls	r6, r3
10008c5e:	43b4      	bics	r4, r6
10008c60:	6494      	str	r4, [r2, #72]	; 0x48
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
10008c62:	6c94      	ldr	r4, [r2, #72]	; 0x48
10008c64:	000e      	movs	r6, r1
10008c66:	409e      	lsls	r6, r3
10008c68:	0033      	movs	r3, r6
10008c6a:	4323      	orrs	r3, r4
10008c6c:	6493      	str	r3, [r2, #72]	; 0x48
		if (pinmux_sel == 0x01) {
10008c6e:	2901      	cmp	r1, #1
10008c70:	d155      	bne.n	10008d1e <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 11) {
10008c72:	280b      	cmp	r0, #11
10008c74:	d80f      	bhi.n	10008c96 <gpio_pinmux_cofiguration+0xbe>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10008c76:	0011      	movs	r1, r2
10008c78:	22d4      	movs	r2, #212	; 0xd4
10008c7a:	0052      	lsls	r2, r2, #1
10008c7c:	588c      	ldr	r4, [r1, r2]
10008c7e:	2303      	movs	r3, #3
10008c80:	4018      	ands	r0, r3
10008c82:	00c0      	lsls	r0, r0, #3
10008c84:	333c      	adds	r3, #60	; 0x3c
10008c86:	4083      	lsls	r3, r0
10008c88:	439c      	bics	r4, r3
10008c8a:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
10008c8c:	588b      	ldr	r3, [r1, r2]
10008c8e:	4085      	lsls	r5, r0
10008c90:	431d      	orrs	r5, r3
10008c92:	508d      	str	r5, [r1, r2]
10008c94:	e043      	b.n	10008d1e <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 15) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10008c96:	4922      	ldr	r1, [pc, #136]	; (10008d20 <gpio_pinmux_cofiguration+0x148>)
10008c98:	22d6      	movs	r2, #214	; 0xd6
10008c9a:	0052      	lsls	r2, r2, #1
10008c9c:	588c      	ldr	r4, [r1, r2]
10008c9e:	2303      	movs	r3, #3
10008ca0:	4018      	ands	r0, r3
10008ca2:	00c0      	lsls	r0, r0, #3
10008ca4:	333c      	adds	r3, #60	; 0x3c
10008ca6:	4083      	lsls	r3, r0
10008ca8:	439c      	bics	r4, r3
10008caa:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
10008cac:	588b      	ldr	r3, [r1, r2]
10008cae:	4085      	lsls	r5, r0
10008cb0:	431d      	orrs	r5, r3
10008cb2:	508d      	str	r5, [r1, r2]
10008cb4:	e033      	b.n	10008d1e <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 23) {
10008cb6:	2817      	cmp	r0, #23
10008cb8:	d831      	bhi.n	10008d1e <gpio_pinmux_cofiguration+0x146>
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
10008cba:	4a19      	ldr	r2, [pc, #100]	; (10008d20 <gpio_pinmux_cofiguration+0x148>)
10008cbc:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
10008cbe:	2307      	movs	r3, #7
10008cc0:	4003      	ands	r3, r0
10008cc2:	009b      	lsls	r3, r3, #2
10008cc4:	2607      	movs	r6, #7
10008cc6:	409e      	lsls	r6, r3
10008cc8:	43b4      	bics	r4, r6
10008cca:	64d4      	str	r4, [r2, #76]	; 0x4c
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
10008ccc:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
10008cce:	000e      	movs	r6, r1
10008cd0:	409e      	lsls	r6, r3
10008cd2:	0033      	movs	r3, r6
10008cd4:	4323      	orrs	r3, r4
10008cd6:	64d3      	str	r3, [r2, #76]	; 0x4c
		if (pinmux_sel == 0x01) {
10008cd8:	2901      	cmp	r1, #1
10008cda:	d120      	bne.n	10008d1e <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 19) {
10008cdc:	2813      	cmp	r0, #19
10008cde:	d80f      	bhi.n	10008d00 <gpio_pinmux_cofiguration+0x128>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10008ce0:	0011      	movs	r1, r2
10008ce2:	22d8      	movs	r2, #216	; 0xd8
10008ce4:	0052      	lsls	r2, r2, #1
10008ce6:	588c      	ldr	r4, [r1, r2]
10008ce8:	2303      	movs	r3, #3
10008cea:	4018      	ands	r0, r3
10008cec:	00c0      	lsls	r0, r0, #3
10008cee:	333c      	adds	r3, #60	; 0x3c
10008cf0:	4083      	lsls	r3, r0
10008cf2:	439c      	bics	r4, r3
10008cf4:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
10008cf6:	588b      	ldr	r3, [r1, r2]
10008cf8:	4085      	lsls	r5, r0
10008cfa:	431d      	orrs	r5, r3
10008cfc:	508d      	str	r5, [r1, r2]
10008cfe:	e00e      	b.n	10008d1e <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 23) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10008d00:	4a07      	ldr	r2, [pc, #28]	; (10008d20 <gpio_pinmux_cofiguration+0x148>)
10008d02:	23da      	movs	r3, #218	; 0xda
10008d04:	005b      	lsls	r3, r3, #1
10008d06:	58d1      	ldr	r1, [r2, r3]
10008d08:	2403      	movs	r4, #3
10008d0a:	4020      	ands	r0, r4
10008d0c:	00c0      	lsls	r0, r0, #3
10008d0e:	343c      	adds	r4, #60	; 0x3c
10008d10:	4084      	lsls	r4, r0
10008d12:	43a1      	bics	r1, r4
10008d14:	50d1      	str	r1, [r2, r3]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
10008d16:	58d1      	ldr	r1, [r2, r3]
10008d18:	4085      	lsls	r5, r0
10008d1a:	430d      	orrs	r5, r1
10008d1c:	50d5      	str	r5, [r2, r3]
			}
		}
	}
}
10008d1e:	bd70      	pop	{r4, r5, r6, pc}
10008d20:	4000b000 	.word	0x4000b000

10008d24 <gpio_init>:
 *
 * This function will init GPIO callback.
 *
 */
void gpio_init(void)
{
10008d24:	b510      	push	{r4, lr}
10008d26:	4a11      	ldr	r2, [pc, #68]	; (10008d6c <gpio_init+0x48>)
10008d28:	0010      	movs	r0, r2
10008d2a:	30d8      	adds	r0, #216	; 0xd8
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
			_gpio_instances[i].callback[j] = NULL;
10008d2c:	2100      	movs	r1, #0
10008d2e:	e007      	b.n	10008d40 <gpio_init+0x1c>
10008d30:	c302      	stmia	r3!, {r1}
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
10008d32:	4293      	cmp	r3, r2
10008d34:	d1fc      	bne.n	10008d30 <gpio_init+0xc>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
10008d36:	8051      	strh	r1, [r2, #2]
		_gpio_instances[i].callback_reg_mask = 0;
10008d38:	8011      	strh	r1, [r2, #0]
10008d3a:	3248      	adds	r2, #72	; 0x48
 */
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
10008d3c:	4282      	cmp	r2, r0
10008d3e:	d002      	beq.n	10008d46 <gpio_init+0x22>
10008d40:	0013      	movs	r3, r2
10008d42:	3b40      	subs	r3, #64	; 0x40
10008d44:	e7f4      	b.n	10008d30 <gpio_init+0xc>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
		_gpio_instances[i].callback_reg_mask = 0;
	}
	_gpio_instances[0].hw = (void *)GPIO0;
10008d46:	4b0a      	ldr	r3, [pc, #40]	; (10008d70 <gpio_init+0x4c>)
10008d48:	4a0a      	ldr	r2, [pc, #40]	; (10008d74 <gpio_init+0x50>)
10008d4a:	601a      	str	r2, [r3, #0]
	_gpio_instances[1].hw = (void *)GPIO1;
10008d4c:	4a0a      	ldr	r2, [pc, #40]	; (10008d78 <gpio_init+0x54>)
10008d4e:	649a      	str	r2, [r3, #72]	; 0x48
	_gpio_instances[2].hw = (void *)GPIO2;
10008d50:	490a      	ldr	r1, [pc, #40]	; (10008d7c <gpio_init+0x58>)
10008d52:	2290      	movs	r2, #144	; 0x90
10008d54:	5099      	str	r1, [r3, r2]
	system_register_isr(RAM_ISR_TABLE_PORT0_COMB_INDEX, (uint32_t)gpio_port0_isr_handler);
10008d56:	490a      	ldr	r1, [pc, #40]	; (10008d80 <gpio_init+0x5c>)
10008d58:	2027      	movs	r0, #39	; 0x27
10008d5a:	4c0a      	ldr	r4, [pc, #40]	; (10008d84 <gpio_init+0x60>)
10008d5c:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT1_COMB_INDEX, (uint32_t)gpio_port1_isr_handler);
10008d5e:	490a      	ldr	r1, [pc, #40]	; (10008d88 <gpio_init+0x64>)
10008d60:	2028      	movs	r0, #40	; 0x28
10008d62:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT2_COMB_INDEX, (uint32_t)gpio_port2_isr_handler);
10008d64:	4909      	ldr	r1, [pc, #36]	; (10008d8c <gpio_init+0x68>)
10008d66:	2029      	movs	r0, #41	; 0x29
10008d68:	47a0      	blx	r4
}
10008d6a:	bd10      	pop	{r4, pc}
10008d6c:	10013430 	.word	0x10013430
10008d70:	100133ec 	.word	0x100133ec
10008d74:	40010000 	.word	0x40010000
10008d78:	40011000 	.word	0x40011000
10008d7c:	40013000 	.word	0x40013000
10008d80:	10008835 	.word	0x10008835
10008d84:	10009951 	.word	0x10009951
10008d88:	10008899 	.word	0x10008899
10008d8c:	10008909 	.word	0x10008909

10008d90 <system_clock_config>:
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_config(enum system_clock_resource resoure, \
				enum system_clock_freq freq)
{
	switch (resoure) {
10008d90:	2801      	cmp	r0, #1
10008d92:	d00d      	beq.n	10008db0 <system_clock_config+0x20>
10008d94:	2800      	cmp	r0, #0
10008d96:	d002      	beq.n	10008d9e <system_clock_config+0xe>
10008d98:	2802      	cmp	r0, #2
10008d9a:	d01c      	beq.n	10008dd6 <system_clock_config+0x46>
10008d9c:	e02e      	b.n	10008dfc <system_clock_config+0x6c>
		case CLOCK_RESOURCE_XO_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
10008d9e:	4a18      	ldr	r2, [pc, #96]	; (10008e00 <system_clock_config+0x70>)
10008da0:	6990      	ldr	r0, [r2, #24]
10008da2:	230c      	movs	r3, #12
10008da4:	4303      	orrs	r3, r0
10008da6:	6193      	str	r3, [r2, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			system_clock_value = 26000000;
10008da8:	4a16      	ldr	r2, [pc, #88]	; (10008e04 <system_clock_config+0x74>)
10008daa:	4b17      	ldr	r3, [pc, #92]	; (10008e08 <system_clock_config+0x78>)
10008dac:	601a      	str	r2, [r3, #0]
			break;
10008dae:	e01a      	b.n	10008de6 <system_clock_config+0x56>

		case CLOCK_RESOURCE_LP_2_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
10008db0:	4b13      	ldr	r3, [pc, #76]	; (10008e00 <system_clock_config+0x70>)
10008db2:	6998      	ldr	r0, [r3, #24]
10008db4:	2208      	movs	r2, #8
10008db6:	4302      	orrs	r2, r0
10008db8:	619a      	str	r2, [r3, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
10008dba:	699a      	ldr	r2, [r3, #24]
10008dbc:	2004      	movs	r0, #4
10008dbe:	4382      	bics	r2, r0
10008dc0:	619a      	str	r2, [r3, #24]
					~LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK;
			AON_GP_REGS0->AON_PMU_CTRL.reg |= \
10008dc2:	4a12      	ldr	r2, [pc, #72]	; (10008e0c <system_clock_config+0x7c>)
10008dc4:	6853      	ldr	r3, [r2, #4]
10008dc6:	2080      	movs	r0, #128	; 0x80
10008dc8:	0300      	lsls	r0, r0, #12
10008dca:	4303      	orrs	r3, r0
10008dcc:	6053      	str	r3, [r2, #4]
					AON_GP_REGS_AON_PMU_CTRL_PMU_2MHZ_CLK_EN;
			system_clock_value = 2000000;
10008dce:	4a10      	ldr	r2, [pc, #64]	; (10008e10 <system_clock_config+0x80>)
10008dd0:	4b0d      	ldr	r3, [pc, #52]	; (10008e08 <system_clock_config+0x78>)
10008dd2:	601a      	str	r2, [r3, #0]
			break;
10008dd4:	e007      	b.n	10008de6 <system_clock_config+0x56>

		case CLOCK_RESOURCE_RC_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
10008dd6:	4a0a      	ldr	r2, [pc, #40]	; (10008e00 <system_clock_config+0x70>)
10008dd8:	6993      	ldr	r3, [r2, #24]
10008dda:	200c      	movs	r0, #12
10008ddc:	4383      	bics	r3, r0
10008dde:	6193      	str	r3, [r2, #24]
					~(LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
10008de0:	4a08      	ldr	r2, [pc, #32]	; (10008e04 <system_clock_config+0x74>)
10008de2:	4b09      	ldr	r3, [pc, #36]	; (10008e08 <system_clock_config+0x78>)
10008de4:	601a      	str	r2, [r3, #0]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
10008de6:	4b06      	ldr	r3, [pc, #24]	; (10008e00 <system_clock_config+0x70>)
10008de8:	699a      	ldr	r2, [r3, #24]
10008dea:	2003      	movs	r0, #3
10008dec:	4382      	bics	r2, r0
10008dee:	619a      	str	r2, [r3, #24]
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
10008df0:	699a      	ldr	r2, [r3, #24]
10008df2:	4001      	ands	r1, r0
10008df4:	4311      	orrs	r1, r2
10008df6:	6199      	str	r1, [r3, #24]
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
10008df8:	2000      	movs	r0, #0
10008dfa:	e000      	b.n	10008dfe <system_clock_config+0x6e>
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
			break;

		default:
			return STATUS_ERR_INVALID_ARG;
10008dfc:	2017      	movs	r0, #23
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
}
10008dfe:	4770      	bx	lr
10008e00:	4000b000 	.word	0x4000b000
10008e04:	018cba80 	.word	0x018cba80
10008e08:	100134c4 	.word	0x100134c4
10008e0c:	4000f000 	.word	0x4000f000
10008e10:	001e8480 	.word	0x001e8480

10008e14 <system_clock_get_value>:
 *
 * \return system clock value.
 */
uint32_t system_clock_get_value(void)
{
	return system_clock_value;
10008e14:	4b01      	ldr	r3, [pc, #4]	; (10008e1c <system_clock_get_value+0x8>)
10008e16:	6818      	ldr	r0, [r3, #0]
}
10008e18:	4770      	bx	lr
10008e1a:	46c0      	nop			; (mov r8, r8)
10008e1c:	100134c4 	.word	0x100134c4

10008e20 <system_clock_peripheral_enable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_enable(enum system_peripheral peripheral)
{
10008e20:	b500      	push	{lr}
	switch (peripheral) {
10008e22:	2835      	cmp	r0, #53	; 0x35
10008e24:	d900      	bls.n	10008e28 <system_clock_peripheral_enable+0x8>
10008e26:	e1a2      	b.n	1000916e <system_clock_peripheral_enable+0x34e>
10008e28:	0080      	lsls	r0, r0, #2
10008e2a:	4bd2      	ldr	r3, [pc, #840]	; (10009174 <system_clock_peripheral_enable+0x354>)
10008e2c:	581b      	ldr	r3, [r3, r0]
10008e2e:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008e30:	4ad1      	ldr	r2, [pc, #836]	; (10009178 <system_clock_peripheral_enable+0x358>)
10008e32:	68d1      	ldr	r1, [r2, #12]
10008e34:	2302      	movs	r3, #2
10008e36:	430b      	orrs	r3, r1
10008e38:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e3a:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;
10008e3c:	e198      	b.n	10009170 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008e3e:	4ace      	ldr	r2, [pc, #824]	; (10009178 <system_clock_peripheral_enable+0x358>)
10008e40:	68d1      	ldr	r1, [r2, #12]
10008e42:	2304      	movs	r3, #4
10008e44:	430b      	orrs	r3, r1
10008e46:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e48:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;
10008e4a:	e191      	b.n	10009170 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008e4c:	4aca      	ldr	r2, [pc, #808]	; (10009178 <system_clock_peripheral_enable+0x358>)
10008e4e:	68d1      	ldr	r1, [r2, #12]
10008e50:	2308      	movs	r3, #8
10008e52:	430b      	orrs	r3, r1
10008e54:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e56:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;
10008e58:	e18a      	b.n	10009170 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008e5a:	4ac7      	ldr	r2, [pc, #796]	; (10009178 <system_clock_peripheral_enable+0x358>)
10008e5c:	68d1      	ldr	r1, [r2, #12]
10008e5e:	2310      	movs	r3, #16
10008e60:	430b      	orrs	r3, r1
10008e62:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e64:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;
10008e66:	e183      	b.n	10009170 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008e68:	4ac3      	ldr	r2, [pc, #780]	; (10009178 <system_clock_peripheral_enable+0x358>)
10008e6a:	68d1      	ldr	r1, [r2, #12]
10008e6c:	2320      	movs	r3, #32
10008e6e:	430b      	orrs	r3, r1
10008e70:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e72:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;
10008e74:	e17c      	b.n	10009170 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008e76:	4ac0      	ldr	r2, [pc, #768]	; (10009178 <system_clock_peripheral_enable+0x358>)
10008e78:	68d1      	ldr	r1, [r2, #12]
10008e7a:	2380      	movs	r3, #128	; 0x80
10008e7c:	430b      	orrs	r3, r1
10008e7e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e80:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
10008e82:	e175      	b.n	10009170 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008e84:	4abc      	ldr	r2, [pc, #752]	; (10009178 <system_clock_peripheral_enable+0x358>)
10008e86:	68d3      	ldr	r3, [r2, #12]
10008e88:	2180      	movs	r1, #128	; 0x80
10008e8a:	0049      	lsls	r1, r1, #1
10008e8c:	430b      	orrs	r3, r1
10008e8e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e90:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN;
		break;
10008e92:	e16d      	b.n	10009170 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008e94:	4ab8      	ldr	r2, [pc, #736]	; (10009178 <system_clock_peripheral_enable+0x358>)
10008e96:	68d3      	ldr	r3, [r2, #12]
10008e98:	2180      	movs	r1, #128	; 0x80
10008e9a:	0109      	lsls	r1, r1, #4
10008e9c:	430b      	orrs	r3, r1
10008e9e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ea0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN;
		break;
10008ea2:	e165      	b.n	10009170 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008ea4:	4ab4      	ldr	r2, [pc, #720]	; (10009178 <system_clock_peripheral_enable+0x358>)
10008ea6:	68d3      	ldr	r3, [r2, #12]
10008ea8:	2180      	movs	r1, #128	; 0x80
10008eaa:	0149      	lsls	r1, r1, #5
10008eac:	430b      	orrs	r3, r1
10008eae:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008eb0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN;
		break;
10008eb2:	e15d      	b.n	10009170 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008eb4:	4ab0      	ldr	r2, [pc, #704]	; (10009178 <system_clock_peripheral_enable+0x358>)
10008eb6:	68d3      	ldr	r3, [r2, #12]
10008eb8:	2180      	movs	r1, #128	; 0x80
10008eba:	0189      	lsls	r1, r1, #6
10008ebc:	430b      	orrs	r3, r1
10008ebe:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ec0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN;
		break;
10008ec2:	e155      	b.n	10009170 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008ec4:	4aac      	ldr	r2, [pc, #688]	; (10009178 <system_clock_peripheral_enable+0x358>)
10008ec6:	68d3      	ldr	r3, [r2, #12]
10008ec8:	2180      	movs	r1, #128	; 0x80
10008eca:	01c9      	lsls	r1, r1, #7
10008ecc:	430b      	orrs	r3, r1
10008ece:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ed0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN;
		break;
10008ed2:	e14d      	b.n	10009170 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008ed4:	4aa8      	ldr	r2, [pc, #672]	; (10009178 <system_clock_peripheral_enable+0x358>)
10008ed6:	68d3      	ldr	r3, [r2, #12]
10008ed8:	2180      	movs	r1, #128	; 0x80
10008eda:	0209      	lsls	r1, r1, #8
10008edc:	430b      	orrs	r3, r1
10008ede:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ee0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN;
		break;
10008ee2:	e145      	b.n	10009170 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008ee4:	4aa4      	ldr	r2, [pc, #656]	; (10009178 <system_clock_peripheral_enable+0x358>)
10008ee6:	68d3      	ldr	r3, [r2, #12]
10008ee8:	2180      	movs	r1, #128	; 0x80
10008eea:	0249      	lsls	r1, r1, #9
10008eec:	430b      	orrs	r3, r1
10008eee:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ef0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN;
		break;
10008ef2:	e13d      	b.n	10009170 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008ef4:	4aa0      	ldr	r2, [pc, #640]	; (10009178 <system_clock_peripheral_enable+0x358>)
10008ef6:	68d3      	ldr	r3, [r2, #12]
10008ef8:	2180      	movs	r1, #128	; 0x80
10008efa:	0289      	lsls	r1, r1, #10
10008efc:	430b      	orrs	r3, r1
10008efe:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f00:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
10008f02:	e135      	b.n	10009170 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008f04:	4a9c      	ldr	r2, [pc, #624]	; (10009178 <system_clock_peripheral_enable+0x358>)
10008f06:	68d3      	ldr	r3, [r2, #12]
10008f08:	2180      	movs	r1, #128	; 0x80
10008f0a:	02c9      	lsls	r1, r1, #11
10008f0c:	430b      	orrs	r3, r1
10008f0e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f10:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
10008f12:	e12d      	b.n	10009170 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008f14:	4a98      	ldr	r2, [pc, #608]	; (10009178 <system_clock_peripheral_enable+0x358>)
10008f16:	68d3      	ldr	r3, [r2, #12]
10008f18:	2180      	movs	r1, #128	; 0x80
10008f1a:	0309      	lsls	r1, r1, #12
10008f1c:	430b      	orrs	r3, r1
10008f1e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f20:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
10008f22:	e125      	b.n	10009170 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008f24:	4a94      	ldr	r2, [pc, #592]	; (10009178 <system_clock_peripheral_enable+0x358>)
10008f26:	68d3      	ldr	r3, [r2, #12]
10008f28:	2180      	movs	r1, #128	; 0x80
10008f2a:	0349      	lsls	r1, r1, #13
10008f2c:	430b      	orrs	r3, r1
10008f2e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f30:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
10008f32:	e11d      	b.n	10009170 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008f34:	4a90      	ldr	r2, [pc, #576]	; (10009178 <system_clock_peripheral_enable+0x358>)
10008f36:	68d3      	ldr	r3, [r2, #12]
10008f38:	2180      	movs	r1, #128	; 0x80
10008f3a:	0389      	lsls	r1, r1, #14
10008f3c:	430b      	orrs	r3, r1
10008f3e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f40:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
10008f42:	e115      	b.n	10009170 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008f44:	4a8c      	ldr	r2, [pc, #560]	; (10009178 <system_clock_peripheral_enable+0x358>)
10008f46:	68d3      	ldr	r3, [r2, #12]
10008f48:	2180      	movs	r1, #128	; 0x80
10008f4a:	03c9      	lsls	r1, r1, #15
10008f4c:	430b      	orrs	r3, r1
10008f4e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f50:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
10008f52:	e10d      	b.n	10009170 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008f54:	4a88      	ldr	r2, [pc, #544]	; (10009178 <system_clock_peripheral_enable+0x358>)
10008f56:	68d3      	ldr	r3, [r2, #12]
10008f58:	2180      	movs	r1, #128	; 0x80
10008f5a:	0409      	lsls	r1, r1, #16
10008f5c:	430b      	orrs	r3, r1
10008f5e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f60:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
10008f62:	e105      	b.n	10009170 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008f64:	4a84      	ldr	r2, [pc, #528]	; (10009178 <system_clock_peripheral_enable+0x358>)
10008f66:	68d3      	ldr	r3, [r2, #12]
10008f68:	2180      	movs	r1, #128	; 0x80
10008f6a:	0449      	lsls	r1, r1, #17
10008f6c:	430b      	orrs	r3, r1
10008f6e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f70:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
10008f72:	e0fd      	b.n	10009170 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008f74:	4a80      	ldr	r2, [pc, #512]	; (10009178 <system_clock_peripheral_enable+0x358>)
10008f76:	68d3      	ldr	r3, [r2, #12]
10008f78:	2180      	movs	r1, #128	; 0x80
10008f7a:	0489      	lsls	r1, r1, #18
10008f7c:	430b      	orrs	r3, r1
10008f7e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f80:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
10008f82:	e0f5      	b.n	10009170 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008f84:	4a7c      	ldr	r2, [pc, #496]	; (10009178 <system_clock_peripheral_enable+0x358>)
10008f86:	68d3      	ldr	r3, [r2, #12]
10008f88:	2180      	movs	r1, #128	; 0x80
10008f8a:	04c9      	lsls	r1, r1, #19
10008f8c:	430b      	orrs	r3, r1
10008f8e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f90:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN;
		break;
10008f92:	e0ed      	b.n	10009170 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008f94:	4a78      	ldr	r2, [pc, #480]	; (10009178 <system_clock_peripheral_enable+0x358>)
10008f96:	68d3      	ldr	r3, [r2, #12]
10008f98:	2180      	movs	r1, #128	; 0x80
10008f9a:	0509      	lsls	r1, r1, #20
10008f9c:	430b      	orrs	r3, r1
10008f9e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008fa0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN;
		break;
10008fa2:	e0e5      	b.n	10009170 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008fa4:	4a74      	ldr	r2, [pc, #464]	; (10009178 <system_clock_peripheral_enable+0x358>)
10008fa6:	68d3      	ldr	r3, [r2, #12]
10008fa8:	2180      	movs	r1, #128	; 0x80
10008faa:	0549      	lsls	r1, r1, #21
10008fac:	430b      	orrs	r3, r1
10008fae:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008fb0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN;
		break;
10008fb2:	e0dd      	b.n	10009170 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008fb4:	4a70      	ldr	r2, [pc, #448]	; (10009178 <system_clock_peripheral_enable+0x358>)
10008fb6:	68d3      	ldr	r3, [r2, #12]
10008fb8:	2180      	movs	r1, #128	; 0x80
10008fba:	0589      	lsls	r1, r1, #22
10008fbc:	430b      	orrs	r3, r1
10008fbe:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008fc0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN;
		break;
10008fc2:	e0d5      	b.n	10009170 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008fc4:	4a6c      	ldr	r2, [pc, #432]	; (10009178 <system_clock_peripheral_enable+0x358>)
10008fc6:	68d3      	ldr	r3, [r2, #12]
10008fc8:	2180      	movs	r1, #128	; 0x80
10008fca:	05c9      	lsls	r1, r1, #23
10008fcc:	430b      	orrs	r3, r1
10008fce:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008fd0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
10008fd2:	e0cd      	b.n	10009170 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008fd4:	4a68      	ldr	r2, [pc, #416]	; (10009178 <system_clock_peripheral_enable+0x358>)
10008fd6:	6911      	ldr	r1, [r2, #16]
10008fd8:	2301      	movs	r3, #1
10008fda:	430b      	orrs	r3, r1
10008fdc:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008fde:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;
10008fe0:	e0c6      	b.n	10009170 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008fe2:	4a65      	ldr	r2, [pc, #404]	; (10009178 <system_clock_peripheral_enable+0x358>)
10008fe4:	6911      	ldr	r1, [r2, #16]
10008fe6:	2302      	movs	r3, #2
10008fe8:	430b      	orrs	r3, r1
10008fea:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008fec:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;
10008fee:	e0bf      	b.n	10009170 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008ff0:	4a61      	ldr	r2, [pc, #388]	; (10009178 <system_clock_peripheral_enable+0x358>)
10008ff2:	6911      	ldr	r1, [r2, #16]
10008ff4:	2304      	movs	r3, #4
10008ff6:	430b      	orrs	r3, r1
10008ff8:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ffa:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;
10008ffc:	e0b8      	b.n	10009170 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008ffe:	4a5e      	ldr	r2, [pc, #376]	; (10009178 <system_clock_peripheral_enable+0x358>)
10009000:	6911      	ldr	r1, [r2, #16]
10009002:	2308      	movs	r3, #8
10009004:	430b      	orrs	r3, r1
10009006:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009008:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;
1000900a:	e0b1      	b.n	10009170 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000900c:	4a5a      	ldr	r2, [pc, #360]	; (10009178 <system_clock_peripheral_enable+0x358>)
1000900e:	6911      	ldr	r1, [r2, #16]
10009010:	2310      	movs	r3, #16
10009012:	430b      	orrs	r3, r1
10009014:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009016:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;
10009018:	e0aa      	b.n	10009170 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000901a:	4a57      	ldr	r2, [pc, #348]	; (10009178 <system_clock_peripheral_enable+0x358>)
1000901c:	6911      	ldr	r1, [r2, #16]
1000901e:	2320      	movs	r3, #32
10009020:	430b      	orrs	r3, r1
10009022:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009024:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;
10009026:	e0a3      	b.n	10009170 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009028:	4a53      	ldr	r2, [pc, #332]	; (10009178 <system_clock_peripheral_enable+0x358>)
1000902a:	6911      	ldr	r1, [r2, #16]
1000902c:	2340      	movs	r3, #64	; 0x40
1000902e:	430b      	orrs	r3, r1
10009030:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009032:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;
10009034:	e09c      	b.n	10009170 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009036:	4a50      	ldr	r2, [pc, #320]	; (10009178 <system_clock_peripheral_enable+0x358>)
10009038:	6911      	ldr	r1, [r2, #16]
1000903a:	2380      	movs	r3, #128	; 0x80
1000903c:	430b      	orrs	r3, r1
1000903e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009040:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN;
		break;
10009042:	e095      	b.n	10009170 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009044:	4a4c      	ldr	r2, [pc, #304]	; (10009178 <system_clock_peripheral_enable+0x358>)
10009046:	6913      	ldr	r3, [r2, #16]
10009048:	2180      	movs	r1, #128	; 0x80
1000904a:	0049      	lsls	r1, r1, #1
1000904c:	430b      	orrs	r3, r1
1000904e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009050:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN;
		break;
10009052:	e08d      	b.n	10009170 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009054:	4a48      	ldr	r2, [pc, #288]	; (10009178 <system_clock_peripheral_enable+0x358>)
10009056:	6913      	ldr	r3, [r2, #16]
10009058:	2180      	movs	r1, #128	; 0x80
1000905a:	0089      	lsls	r1, r1, #2
1000905c:	430b      	orrs	r3, r1
1000905e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009060:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN;
		break;
10009062:	e085      	b.n	10009170 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009064:	4a44      	ldr	r2, [pc, #272]	; (10009178 <system_clock_peripheral_enable+0x358>)
10009066:	6913      	ldr	r3, [r2, #16]
10009068:	2180      	movs	r1, #128	; 0x80
1000906a:	00c9      	lsls	r1, r1, #3
1000906c:	430b      	orrs	r3, r1
1000906e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009070:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
10009072:	e07d      	b.n	10009170 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009074:	4a40      	ldr	r2, [pc, #256]	; (10009178 <system_clock_peripheral_enable+0x358>)
10009076:	6913      	ldr	r3, [r2, #16]
10009078:	2180      	movs	r1, #128	; 0x80
1000907a:	0109      	lsls	r1, r1, #4
1000907c:	430b      	orrs	r3, r1
1000907e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009080:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
10009082:	e075      	b.n	10009170 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009084:	4a3c      	ldr	r2, [pc, #240]	; (10009178 <system_clock_peripheral_enable+0x358>)
10009086:	6913      	ldr	r3, [r2, #16]
10009088:	2180      	movs	r1, #128	; 0x80
1000908a:	0149      	lsls	r1, r1, #5
1000908c:	430b      	orrs	r3, r1
1000908e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009090:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
10009092:	e06d      	b.n	10009170 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009094:	4a38      	ldr	r2, [pc, #224]	; (10009178 <system_clock_peripheral_enable+0x358>)
10009096:	6913      	ldr	r3, [r2, #16]
10009098:	2180      	movs	r1, #128	; 0x80
1000909a:	0189      	lsls	r1, r1, #6
1000909c:	430b      	orrs	r3, r1
1000909e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100090a0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
100090a2:	e065      	b.n	10009170 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100090a4:	4a34      	ldr	r2, [pc, #208]	; (10009178 <system_clock_peripheral_enable+0x358>)
100090a6:	6913      	ldr	r3, [r2, #16]
100090a8:	2180      	movs	r1, #128	; 0x80
100090aa:	01c9      	lsls	r1, r1, #7
100090ac:	430b      	orrs	r3, r1
100090ae:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100090b0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN;
		break;
100090b2:	e05d      	b.n	10009170 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100090b4:	4a30      	ldr	r2, [pc, #192]	; (10009178 <system_clock_peripheral_enable+0x358>)
100090b6:	6913      	ldr	r3, [r2, #16]
100090b8:	2180      	movs	r1, #128	; 0x80
100090ba:	0209      	lsls	r1, r1, #8
100090bc:	430b      	orrs	r3, r1
100090be:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100090c0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
100090c2:	e055      	b.n	10009170 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100090c4:	4a2c      	ldr	r2, [pc, #176]	; (10009178 <system_clock_peripheral_enable+0x358>)
100090c6:	6913      	ldr	r3, [r2, #16]
100090c8:	2180      	movs	r1, #128	; 0x80
100090ca:	0249      	lsls	r1, r1, #9
100090cc:	430b      	orrs	r3, r1
100090ce:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100090d0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
100090d2:	e04d      	b.n	10009170 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100090d4:	4a28      	ldr	r2, [pc, #160]	; (10009178 <system_clock_peripheral_enable+0x358>)
100090d6:	6913      	ldr	r3, [r2, #16]
100090d8:	2180      	movs	r1, #128	; 0x80
100090da:	0289      	lsls	r1, r1, #10
100090dc:	430b      	orrs	r3, r1
100090de:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100090e0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
100090e2:	e045      	b.n	10009170 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100090e4:	4a24      	ldr	r2, [pc, #144]	; (10009178 <system_clock_peripheral_enable+0x358>)
100090e6:	6913      	ldr	r3, [r2, #16]
100090e8:	2180      	movs	r1, #128	; 0x80
100090ea:	02c9      	lsls	r1, r1, #11
100090ec:	430b      	orrs	r3, r1
100090ee:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100090f0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
100090f2:	e03d      	b.n	10009170 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100090f4:	4a20      	ldr	r2, [pc, #128]	; (10009178 <system_clock_peripheral_enable+0x358>)
100090f6:	6913      	ldr	r3, [r2, #16]
100090f8:	2180      	movs	r1, #128	; 0x80
100090fa:	0309      	lsls	r1, r1, #12
100090fc:	430b      	orrs	r3, r1
100090fe:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009100:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
10009102:	e035      	b.n	10009170 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009104:	4a1c      	ldr	r2, [pc, #112]	; (10009178 <system_clock_peripheral_enable+0x358>)
10009106:	6913      	ldr	r3, [r2, #16]
10009108:	2180      	movs	r1, #128	; 0x80
1000910a:	0349      	lsls	r1, r1, #13
1000910c:	430b      	orrs	r3, r1
1000910e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009110:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
10009112:	e02d      	b.n	10009170 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009114:	4a18      	ldr	r2, [pc, #96]	; (10009178 <system_clock_peripheral_enable+0x358>)
10009116:	6913      	ldr	r3, [r2, #16]
10009118:	2180      	movs	r1, #128	; 0x80
1000911a:	0389      	lsls	r1, r1, #14
1000911c:	430b      	orrs	r3, r1
1000911e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009120:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
10009122:	e025      	b.n	10009170 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009124:	4a14      	ldr	r2, [pc, #80]	; (10009178 <system_clock_peripheral_enable+0x358>)
10009126:	6913      	ldr	r3, [r2, #16]
10009128:	2180      	movs	r1, #128	; 0x80
1000912a:	03c9      	lsls	r1, r1, #15
1000912c:	430b      	orrs	r3, r1
1000912e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009130:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
10009132:	e01d      	b.n	10009170 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009134:	4a10      	ldr	r2, [pc, #64]	; (10009178 <system_clock_peripheral_enable+0x358>)
10009136:	6913      	ldr	r3, [r2, #16]
10009138:	2180      	movs	r1, #128	; 0x80
1000913a:	0409      	lsls	r1, r1, #16
1000913c:	430b      	orrs	r3, r1
1000913e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009140:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
10009142:	e015      	b.n	10009170 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
10009144:	4a0c      	ldr	r2, [pc, #48]	; (10009178 <system_clock_peripheral_enable+0x358>)
10009146:	7d11      	ldrb	r1, [r2, #20]
10009148:	2301      	movs	r3, #1
1000914a:	430b      	orrs	r3, r1
1000914c:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000914e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;
10009150:	e00e      	b.n	10009170 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
10009152:	4a09      	ldr	r2, [pc, #36]	; (10009178 <system_clock_peripheral_enable+0x358>)
10009154:	7d11      	ldrb	r1, [r2, #20]
10009156:	2302      	movs	r3, #2
10009158:	430b      	orrs	r3, r1
1000915a:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000915c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;
1000915e:	e007      	b.n	10009170 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
10009160:	4a05      	ldr	r2, [pc, #20]	; (10009178 <system_clock_peripheral_enable+0x358>)
10009162:	7d11      	ldrb	r1, [r2, #20]
10009164:	2304      	movs	r3, #4
10009166:	430b      	orrs	r3, r1
10009168:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000916a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_PERIPH_REGS_CLK_EN;
		break;
1000916c:	e000      	b.n	10009170 <system_clock_peripheral_enable+0x350>

		default:
			return STATUS_ERR_INVALID_ARG;
1000916e:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
10009170:	bd00      	pop	{pc}
10009172:	46c0      	nop			; (mov r8, r8)
10009174:	100109dc 	.word	0x100109dc
10009178:	4000b000 	.word	0x4000b000

1000917c <system_clock_peripheral_disable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_disable(enum system_peripheral peripheral)
{
1000917c:	b500      	push	{lr}
	switch (peripheral) {
1000917e:	2835      	cmp	r0, #53	; 0x35
10009180:	d900      	bls.n	10009184 <system_clock_peripheral_disable+0x8>
10009182:	e17d      	b.n	10009480 <system_clock_peripheral_disable+0x304>
10009184:	0080      	lsls	r0, r0, #2
10009186:	4bbf      	ldr	r3, [pc, #764]	; (10009484 <system_clock_peripheral_disable+0x308>)
10009188:	581b      	ldr	r3, [r3, r0]
1000918a:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000918c:	4abe      	ldr	r2, [pc, #760]	; (10009488 <system_clock_peripheral_disable+0x30c>)
1000918e:	68d3      	ldr	r3, [r2, #12]
10009190:	2102      	movs	r1, #2
10009192:	438b      	bics	r3, r1
10009194:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009196:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;
10009198:	e173      	b.n	10009482 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000919a:	4abb      	ldr	r2, [pc, #748]	; (10009488 <system_clock_peripheral_disable+0x30c>)
1000919c:	68d3      	ldr	r3, [r2, #12]
1000919e:	2104      	movs	r1, #4
100091a0:	438b      	bics	r3, r1
100091a2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100091a4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;
100091a6:	e16c      	b.n	10009482 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
100091a8:	4ab7      	ldr	r2, [pc, #732]	; (10009488 <system_clock_peripheral_disable+0x30c>)
100091aa:	68d3      	ldr	r3, [r2, #12]
100091ac:	2108      	movs	r1, #8
100091ae:	438b      	bics	r3, r1
100091b0:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100091b2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;
100091b4:	e165      	b.n	10009482 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
100091b6:	4ab4      	ldr	r2, [pc, #720]	; (10009488 <system_clock_peripheral_disable+0x30c>)
100091b8:	68d3      	ldr	r3, [r2, #12]
100091ba:	2110      	movs	r1, #16
100091bc:	438b      	bics	r3, r1
100091be:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100091c0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;
100091c2:	e15e      	b.n	10009482 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
100091c4:	4ab0      	ldr	r2, [pc, #704]	; (10009488 <system_clock_peripheral_disable+0x30c>)
100091c6:	68d3      	ldr	r3, [r2, #12]
100091c8:	2120      	movs	r1, #32
100091ca:	438b      	bics	r3, r1
100091cc:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100091ce:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;
100091d0:	e157      	b.n	10009482 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
100091d2:	4aad      	ldr	r2, [pc, #692]	; (10009488 <system_clock_peripheral_disable+0x30c>)
100091d4:	68d3      	ldr	r3, [r2, #12]
100091d6:	2180      	movs	r1, #128	; 0x80
100091d8:	438b      	bics	r3, r1
100091da:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100091dc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
100091de:	e150      	b.n	10009482 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
100091e0:	4aa9      	ldr	r2, [pc, #676]	; (10009488 <system_clock_peripheral_disable+0x30c>)
100091e2:	68d1      	ldr	r1, [r2, #12]
100091e4:	4ba9      	ldr	r3, [pc, #676]	; (1000948c <system_clock_peripheral_disable+0x310>)
100091e6:	400b      	ands	r3, r1
100091e8:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100091ea:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN;
		break;
100091ec:	e149      	b.n	10009482 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
100091ee:	4aa6      	ldr	r2, [pc, #664]	; (10009488 <system_clock_peripheral_disable+0x30c>)
100091f0:	68d1      	ldr	r1, [r2, #12]
100091f2:	4ba7      	ldr	r3, [pc, #668]	; (10009490 <system_clock_peripheral_disable+0x314>)
100091f4:	400b      	ands	r3, r1
100091f6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100091f8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN;
		break;
100091fa:	e142      	b.n	10009482 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
100091fc:	4aa2      	ldr	r2, [pc, #648]	; (10009488 <system_clock_peripheral_disable+0x30c>)
100091fe:	68d1      	ldr	r1, [r2, #12]
10009200:	4ba4      	ldr	r3, [pc, #656]	; (10009494 <system_clock_peripheral_disable+0x318>)
10009202:	400b      	ands	r3, r1
10009204:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009206:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN;
		break;
10009208:	e13b      	b.n	10009482 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000920a:	4a9f      	ldr	r2, [pc, #636]	; (10009488 <system_clock_peripheral_disable+0x30c>)
1000920c:	68d1      	ldr	r1, [r2, #12]
1000920e:	4ba2      	ldr	r3, [pc, #648]	; (10009498 <system_clock_peripheral_disable+0x31c>)
10009210:	400b      	ands	r3, r1
10009212:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009214:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN;
		break;
10009216:	e134      	b.n	10009482 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10009218:	4a9b      	ldr	r2, [pc, #620]	; (10009488 <system_clock_peripheral_disable+0x30c>)
1000921a:	68d1      	ldr	r1, [r2, #12]
1000921c:	4b9f      	ldr	r3, [pc, #636]	; (1000949c <system_clock_peripheral_disable+0x320>)
1000921e:	400b      	ands	r3, r1
10009220:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009222:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN;
		break;
10009224:	e12d      	b.n	10009482 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10009226:	4a98      	ldr	r2, [pc, #608]	; (10009488 <system_clock_peripheral_disable+0x30c>)
10009228:	68d1      	ldr	r1, [r2, #12]
1000922a:	4b9d      	ldr	r3, [pc, #628]	; (100094a0 <system_clock_peripheral_disable+0x324>)
1000922c:	400b      	ands	r3, r1
1000922e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009230:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN;
		break;
10009232:	e126      	b.n	10009482 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10009234:	4a94      	ldr	r2, [pc, #592]	; (10009488 <system_clock_peripheral_disable+0x30c>)
10009236:	68d1      	ldr	r1, [r2, #12]
10009238:	4b9a      	ldr	r3, [pc, #616]	; (100094a4 <system_clock_peripheral_disable+0x328>)
1000923a:	400b      	ands	r3, r1
1000923c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000923e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN;
		break;
10009240:	e11f      	b.n	10009482 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10009242:	4a91      	ldr	r2, [pc, #580]	; (10009488 <system_clock_peripheral_disable+0x30c>)
10009244:	68d1      	ldr	r1, [r2, #12]
10009246:	4b98      	ldr	r3, [pc, #608]	; (100094a8 <system_clock_peripheral_disable+0x32c>)
10009248:	400b      	ands	r3, r1
1000924a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000924c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
1000924e:	e118      	b.n	10009482 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10009250:	4a8d      	ldr	r2, [pc, #564]	; (10009488 <system_clock_peripheral_disable+0x30c>)
10009252:	68d1      	ldr	r1, [r2, #12]
10009254:	4b95      	ldr	r3, [pc, #596]	; (100094ac <system_clock_peripheral_disable+0x330>)
10009256:	400b      	ands	r3, r1
10009258:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000925a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
1000925c:	e111      	b.n	10009482 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000925e:	4a8a      	ldr	r2, [pc, #552]	; (10009488 <system_clock_peripheral_disable+0x30c>)
10009260:	68d1      	ldr	r1, [r2, #12]
10009262:	4b93      	ldr	r3, [pc, #588]	; (100094b0 <system_clock_peripheral_disable+0x334>)
10009264:	400b      	ands	r3, r1
10009266:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009268:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
1000926a:	e10a      	b.n	10009482 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000926c:	4a86      	ldr	r2, [pc, #536]	; (10009488 <system_clock_peripheral_disable+0x30c>)
1000926e:	68d1      	ldr	r1, [r2, #12]
10009270:	4b90      	ldr	r3, [pc, #576]	; (100094b4 <system_clock_peripheral_disable+0x338>)
10009272:	400b      	ands	r3, r1
10009274:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009276:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
10009278:	e103      	b.n	10009482 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000927a:	4a83      	ldr	r2, [pc, #524]	; (10009488 <system_clock_peripheral_disable+0x30c>)
1000927c:	68d1      	ldr	r1, [r2, #12]
1000927e:	4b8e      	ldr	r3, [pc, #568]	; (100094b8 <system_clock_peripheral_disable+0x33c>)
10009280:	400b      	ands	r3, r1
10009282:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009284:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
10009286:	e0fc      	b.n	10009482 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10009288:	4a7f      	ldr	r2, [pc, #508]	; (10009488 <system_clock_peripheral_disable+0x30c>)
1000928a:	68d1      	ldr	r1, [r2, #12]
1000928c:	4b8b      	ldr	r3, [pc, #556]	; (100094bc <system_clock_peripheral_disable+0x340>)
1000928e:	400b      	ands	r3, r1
10009290:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009292:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
10009294:	e0f5      	b.n	10009482 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
10009296:	4a7c      	ldr	r2, [pc, #496]	; (10009488 <system_clock_peripheral_disable+0x30c>)
10009298:	68d1      	ldr	r1, [r2, #12]
1000929a:	4b89      	ldr	r3, [pc, #548]	; (100094c0 <system_clock_peripheral_disable+0x344>)
1000929c:	400b      	ands	r3, r1
1000929e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100092a0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
100092a2:	e0ee      	b.n	10009482 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
100092a4:	4a78      	ldr	r2, [pc, #480]	; (10009488 <system_clock_peripheral_disable+0x30c>)
100092a6:	68d1      	ldr	r1, [r2, #12]
100092a8:	4b86      	ldr	r3, [pc, #536]	; (100094c4 <system_clock_peripheral_disable+0x348>)
100092aa:	400b      	ands	r3, r1
100092ac:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100092ae:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
100092b0:	e0e7      	b.n	10009482 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
100092b2:	4a75      	ldr	r2, [pc, #468]	; (10009488 <system_clock_peripheral_disable+0x30c>)
100092b4:	68d1      	ldr	r1, [r2, #12]
100092b6:	4b84      	ldr	r3, [pc, #528]	; (100094c8 <system_clock_peripheral_disable+0x34c>)
100092b8:	400b      	ands	r3, r1
100092ba:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100092bc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
100092be:	e0e0      	b.n	10009482 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
100092c0:	4a71      	ldr	r2, [pc, #452]	; (10009488 <system_clock_peripheral_disable+0x30c>)
100092c2:	68d1      	ldr	r1, [r2, #12]
100092c4:	4b81      	ldr	r3, [pc, #516]	; (100094cc <system_clock_peripheral_disable+0x350>)
100092c6:	400b      	ands	r3, r1
100092c8:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100092ca:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN;
		break;
100092cc:	e0d9      	b.n	10009482 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
100092ce:	4a6e      	ldr	r2, [pc, #440]	; (10009488 <system_clock_peripheral_disable+0x30c>)
100092d0:	68d1      	ldr	r1, [r2, #12]
100092d2:	4b7f      	ldr	r3, [pc, #508]	; (100094d0 <system_clock_peripheral_disable+0x354>)
100092d4:	400b      	ands	r3, r1
100092d6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100092d8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN;
		break;
100092da:	e0d2      	b.n	10009482 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
100092dc:	4a6a      	ldr	r2, [pc, #424]	; (10009488 <system_clock_peripheral_disable+0x30c>)
100092de:	68d1      	ldr	r1, [r2, #12]
100092e0:	4b7c      	ldr	r3, [pc, #496]	; (100094d4 <system_clock_peripheral_disable+0x358>)
100092e2:	400b      	ands	r3, r1
100092e4:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100092e6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN;
		break;
100092e8:	e0cb      	b.n	10009482 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
100092ea:	4a67      	ldr	r2, [pc, #412]	; (10009488 <system_clock_peripheral_disable+0x30c>)
100092ec:	68d1      	ldr	r1, [r2, #12]
100092ee:	4b7a      	ldr	r3, [pc, #488]	; (100094d8 <system_clock_peripheral_disable+0x35c>)
100092f0:	400b      	ands	r3, r1
100092f2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100092f4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN;
		break;
100092f6:	e0c4      	b.n	10009482 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
100092f8:	4a63      	ldr	r2, [pc, #396]	; (10009488 <system_clock_peripheral_disable+0x30c>)
100092fa:	68d1      	ldr	r1, [r2, #12]
100092fc:	4b77      	ldr	r3, [pc, #476]	; (100094dc <system_clock_peripheral_disable+0x360>)
100092fe:	400b      	ands	r3, r1
10009300:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009302:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
10009304:	e0bd      	b.n	10009482 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10009306:	4a60      	ldr	r2, [pc, #384]	; (10009488 <system_clock_peripheral_disable+0x30c>)
10009308:	6913      	ldr	r3, [r2, #16]
1000930a:	2101      	movs	r1, #1
1000930c:	438b      	bics	r3, r1
1000930e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009310:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;
10009312:	e0b6      	b.n	10009482 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10009314:	4a5c      	ldr	r2, [pc, #368]	; (10009488 <system_clock_peripheral_disable+0x30c>)
10009316:	6913      	ldr	r3, [r2, #16]
10009318:	2102      	movs	r1, #2
1000931a:	438b      	bics	r3, r1
1000931c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000931e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;
10009320:	e0af      	b.n	10009482 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10009322:	4a59      	ldr	r2, [pc, #356]	; (10009488 <system_clock_peripheral_disable+0x30c>)
10009324:	6913      	ldr	r3, [r2, #16]
10009326:	2104      	movs	r1, #4
10009328:	438b      	bics	r3, r1
1000932a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000932c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;
1000932e:	e0a8      	b.n	10009482 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10009330:	4a55      	ldr	r2, [pc, #340]	; (10009488 <system_clock_peripheral_disable+0x30c>)
10009332:	6913      	ldr	r3, [r2, #16]
10009334:	2108      	movs	r1, #8
10009336:	438b      	bics	r3, r1
10009338:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000933a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;
1000933c:	e0a1      	b.n	10009482 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000933e:	4a52      	ldr	r2, [pc, #328]	; (10009488 <system_clock_peripheral_disable+0x30c>)
10009340:	6913      	ldr	r3, [r2, #16]
10009342:	2110      	movs	r1, #16
10009344:	438b      	bics	r3, r1
10009346:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009348:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;
1000934a:	e09a      	b.n	10009482 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000934c:	4a4e      	ldr	r2, [pc, #312]	; (10009488 <system_clock_peripheral_disable+0x30c>)
1000934e:	6913      	ldr	r3, [r2, #16]
10009350:	2120      	movs	r1, #32
10009352:	438b      	bics	r3, r1
10009354:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009356:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;
10009358:	e093      	b.n	10009482 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000935a:	4a4b      	ldr	r2, [pc, #300]	; (10009488 <system_clock_peripheral_disable+0x30c>)
1000935c:	6913      	ldr	r3, [r2, #16]
1000935e:	2140      	movs	r1, #64	; 0x40
10009360:	438b      	bics	r3, r1
10009362:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009364:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;
10009366:	e08c      	b.n	10009482 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10009368:	4a47      	ldr	r2, [pc, #284]	; (10009488 <system_clock_peripheral_disable+0x30c>)
1000936a:	6913      	ldr	r3, [r2, #16]
1000936c:	2180      	movs	r1, #128	; 0x80
1000936e:	438b      	bics	r3, r1
10009370:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009372:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN;
		break;
10009374:	e085      	b.n	10009482 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10009376:	4a44      	ldr	r2, [pc, #272]	; (10009488 <system_clock_peripheral_disable+0x30c>)
10009378:	6911      	ldr	r1, [r2, #16]
1000937a:	4b44      	ldr	r3, [pc, #272]	; (1000948c <system_clock_peripheral_disable+0x310>)
1000937c:	400b      	ands	r3, r1
1000937e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009380:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN;
		break;
10009382:	e07e      	b.n	10009482 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10009384:	4a40      	ldr	r2, [pc, #256]	; (10009488 <system_clock_peripheral_disable+0x30c>)
10009386:	6911      	ldr	r1, [r2, #16]
10009388:	4b55      	ldr	r3, [pc, #340]	; (100094e0 <system_clock_peripheral_disable+0x364>)
1000938a:	400b      	ands	r3, r1
1000938c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000938e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN;
		break;
10009390:	e077      	b.n	10009482 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10009392:	4a3d      	ldr	r2, [pc, #244]	; (10009488 <system_clock_peripheral_disable+0x30c>)
10009394:	6911      	ldr	r1, [r2, #16]
10009396:	4b53      	ldr	r3, [pc, #332]	; (100094e4 <system_clock_peripheral_disable+0x368>)
10009398:	400b      	ands	r3, r1
1000939a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000939c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
1000939e:	e070      	b.n	10009482 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
100093a0:	4a39      	ldr	r2, [pc, #228]	; (10009488 <system_clock_peripheral_disable+0x30c>)
100093a2:	6911      	ldr	r1, [r2, #16]
100093a4:	4b3a      	ldr	r3, [pc, #232]	; (10009490 <system_clock_peripheral_disable+0x314>)
100093a6:	400b      	ands	r3, r1
100093a8:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100093aa:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
100093ac:	e069      	b.n	10009482 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
100093ae:	4a36      	ldr	r2, [pc, #216]	; (10009488 <system_clock_peripheral_disable+0x30c>)
100093b0:	6911      	ldr	r1, [r2, #16]
100093b2:	4b38      	ldr	r3, [pc, #224]	; (10009494 <system_clock_peripheral_disable+0x318>)
100093b4:	400b      	ands	r3, r1
100093b6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100093b8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
100093ba:	e062      	b.n	10009482 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
100093bc:	4a32      	ldr	r2, [pc, #200]	; (10009488 <system_clock_peripheral_disable+0x30c>)
100093be:	6911      	ldr	r1, [r2, #16]
100093c0:	4b35      	ldr	r3, [pc, #212]	; (10009498 <system_clock_peripheral_disable+0x31c>)
100093c2:	400b      	ands	r3, r1
100093c4:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100093c6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
100093c8:	e05b      	b.n	10009482 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
100093ca:	4a2f      	ldr	r2, [pc, #188]	; (10009488 <system_clock_peripheral_disable+0x30c>)
100093cc:	6911      	ldr	r1, [r2, #16]
100093ce:	4b33      	ldr	r3, [pc, #204]	; (1000949c <system_clock_peripheral_disable+0x320>)
100093d0:	400b      	ands	r3, r1
100093d2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100093d4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN;
		break;
100093d6:	e054      	b.n	10009482 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
100093d8:	4a2b      	ldr	r2, [pc, #172]	; (10009488 <system_clock_peripheral_disable+0x30c>)
100093da:	6911      	ldr	r1, [r2, #16]
100093dc:	4b30      	ldr	r3, [pc, #192]	; (100094a0 <system_clock_peripheral_disable+0x324>)
100093de:	400b      	ands	r3, r1
100093e0:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100093e2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
100093e4:	e04d      	b.n	10009482 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
100093e6:	4a28      	ldr	r2, [pc, #160]	; (10009488 <system_clock_peripheral_disable+0x30c>)
100093e8:	6911      	ldr	r1, [r2, #16]
100093ea:	4b2e      	ldr	r3, [pc, #184]	; (100094a4 <system_clock_peripheral_disable+0x328>)
100093ec:	400b      	ands	r3, r1
100093ee:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100093f0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
100093f2:	e046      	b.n	10009482 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
100093f4:	4a24      	ldr	r2, [pc, #144]	; (10009488 <system_clock_peripheral_disable+0x30c>)
100093f6:	6911      	ldr	r1, [r2, #16]
100093f8:	4b2b      	ldr	r3, [pc, #172]	; (100094a8 <system_clock_peripheral_disable+0x32c>)
100093fa:	400b      	ands	r3, r1
100093fc:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100093fe:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
10009400:	e03f      	b.n	10009482 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10009402:	4a21      	ldr	r2, [pc, #132]	; (10009488 <system_clock_peripheral_disable+0x30c>)
10009404:	6911      	ldr	r1, [r2, #16]
10009406:	4b29      	ldr	r3, [pc, #164]	; (100094ac <system_clock_peripheral_disable+0x330>)
10009408:	400b      	ands	r3, r1
1000940a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000940c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
1000940e:	e038      	b.n	10009482 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10009410:	4a1d      	ldr	r2, [pc, #116]	; (10009488 <system_clock_peripheral_disable+0x30c>)
10009412:	6911      	ldr	r1, [r2, #16]
10009414:	4b26      	ldr	r3, [pc, #152]	; (100094b0 <system_clock_peripheral_disable+0x334>)
10009416:	400b      	ands	r3, r1
10009418:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000941a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
1000941c:	e031      	b.n	10009482 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000941e:	4a1a      	ldr	r2, [pc, #104]	; (10009488 <system_clock_peripheral_disable+0x30c>)
10009420:	6911      	ldr	r1, [r2, #16]
10009422:	4b24      	ldr	r3, [pc, #144]	; (100094b4 <system_clock_peripheral_disable+0x338>)
10009424:	400b      	ands	r3, r1
10009426:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009428:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
1000942a:	e02a      	b.n	10009482 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000942c:	4a16      	ldr	r2, [pc, #88]	; (10009488 <system_clock_peripheral_disable+0x30c>)
1000942e:	6911      	ldr	r1, [r2, #16]
10009430:	4b21      	ldr	r3, [pc, #132]	; (100094b8 <system_clock_peripheral_disable+0x33c>)
10009432:	400b      	ands	r3, r1
10009434:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009436:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
10009438:	e023      	b.n	10009482 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000943a:	4a13      	ldr	r2, [pc, #76]	; (10009488 <system_clock_peripheral_disable+0x30c>)
1000943c:	6911      	ldr	r1, [r2, #16]
1000943e:	4b1f      	ldr	r3, [pc, #124]	; (100094bc <system_clock_peripheral_disable+0x340>)
10009440:	400b      	ands	r3, r1
10009442:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009444:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
10009446:	e01c      	b.n	10009482 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
10009448:	4a0f      	ldr	r2, [pc, #60]	; (10009488 <system_clock_peripheral_disable+0x30c>)
1000944a:	6911      	ldr	r1, [r2, #16]
1000944c:	4b1c      	ldr	r3, [pc, #112]	; (100094c0 <system_clock_peripheral_disable+0x344>)
1000944e:	400b      	ands	r3, r1
10009450:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009452:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
10009454:	e015      	b.n	10009482 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
10009456:	4a0c      	ldr	r2, [pc, #48]	; (10009488 <system_clock_peripheral_disable+0x30c>)
10009458:	7d13      	ldrb	r3, [r2, #20]
1000945a:	2101      	movs	r1, #1
1000945c:	438b      	bics	r3, r1
1000945e:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009460:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;
10009462:	e00e      	b.n	10009482 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
10009464:	4a08      	ldr	r2, [pc, #32]	; (10009488 <system_clock_peripheral_disable+0x30c>)
10009466:	7d13      	ldrb	r3, [r2, #20]
10009468:	2102      	movs	r1, #2
1000946a:	438b      	bics	r3, r1
1000946c:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000946e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;
10009470:	e007      	b.n	10009482 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
10009472:	4a05      	ldr	r2, [pc, #20]	; (10009488 <system_clock_peripheral_disable+0x30c>)
10009474:	7d13      	ldrb	r3, [r2, #20]
10009476:	2104      	movs	r1, #4
10009478:	438b      	bics	r3, r1
1000947a:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000947c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_PERIPH_REGS_CLK_EN;
		break;
1000947e:	e000      	b.n	10009482 <system_clock_peripheral_disable+0x306>

		default:
			return STATUS_ERR_INVALID_ARG;
10009480:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
10009482:	bd00      	pop	{pc}
10009484:	10010ab4 	.word	0x10010ab4
10009488:	4000b000 	.word	0x4000b000
1000948c:	fffffeff 	.word	0xfffffeff
10009490:	fffff7ff 	.word	0xfffff7ff
10009494:	ffffefff 	.word	0xffffefff
10009498:	ffffdfff 	.word	0xffffdfff
1000949c:	ffffbfff 	.word	0xffffbfff
100094a0:	ffff7fff 	.word	0xffff7fff
100094a4:	fffeffff 	.word	0xfffeffff
100094a8:	fffdffff 	.word	0xfffdffff
100094ac:	fffbffff 	.word	0xfffbffff
100094b0:	fff7ffff 	.word	0xfff7ffff
100094b4:	ffefffff 	.word	0xffefffff
100094b8:	ffdfffff 	.word	0xffdfffff
100094bc:	ffbfffff 	.word	0xffbfffff
100094c0:	ff7fffff 	.word	0xff7fffff
100094c4:	feffffff 	.word	0xfeffffff
100094c8:	fdffffff 	.word	0xfdffffff
100094cc:	fbffffff 	.word	0xfbffffff
100094d0:	f7ffffff 	.word	0xf7ffffff
100094d4:	efffffff 	.word	0xefffffff
100094d8:	dfffffff 	.word	0xdfffffff
100094dc:	bfffffff 	.word	0xbfffffff
100094e0:	fffffdff 	.word	0xfffffdff
100094e4:	fffffbff 	.word	0xfffffbff

100094e8 <system_peripheral_reset>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_peripheral_reset(enum system_peripheral peripheral)
{
100094e8:	b500      	push	{lr}
	switch (peripheral) {
100094ea:	2843      	cmp	r0, #67	; 0x43
100094ec:	d900      	bls.n	100094f0 <system_peripheral_reset+0x8>
100094ee:	e223      	b.n	10009938 <system_peripheral_reset+0x450>
100094f0:	0080      	lsls	r0, r0, #2
100094f2:	4be0      	ldr	r3, [pc, #896]	; (10009874 <system_peripheral_reset+0x38c>)
100094f4:	581b      	ldr	r3, [r3, r0]
100094f6:	469f      	mov	pc, r3
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100094f8:	4bdf      	ldr	r3, [pc, #892]	; (10009878 <system_peripheral_reset+0x390>)
100094fa:	6859      	ldr	r1, [r3, #4]
100094fc:	2202      	movs	r2, #2
100094fe:	4391      	bics	r1, r2
10009500:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009502:	6859      	ldr	r1, [r3, #4]
10009504:	430a      	orrs	r2, r1
10009506:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009508:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
		break;
1000950a:	e216      	b.n	1000993a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000950c:	4bda      	ldr	r3, [pc, #872]	; (10009878 <system_peripheral_reset+0x390>)
1000950e:	6859      	ldr	r1, [r3, #4]
10009510:	2204      	movs	r2, #4
10009512:	4391      	bics	r1, r2
10009514:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009516:	6859      	ldr	r1, [r3, #4]
10009518:	430a      	orrs	r2, r1
1000951a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000951c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
		break;
1000951e:	e20c      	b.n	1000993a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009520:	4bd5      	ldr	r3, [pc, #852]	; (10009878 <system_peripheral_reset+0x390>)
10009522:	6859      	ldr	r1, [r3, #4]
10009524:	2208      	movs	r2, #8
10009526:	4391      	bics	r1, r2
10009528:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000952a:	6859      	ldr	r1, [r3, #4]
1000952c:	430a      	orrs	r2, r1
1000952e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009530:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
		break;
10009532:	e202      	b.n	1000993a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009534:	4bd0      	ldr	r3, [pc, #832]	; (10009878 <system_peripheral_reset+0x390>)
10009536:	6859      	ldr	r1, [r3, #4]
10009538:	2210      	movs	r2, #16
1000953a:	4391      	bics	r1, r2
1000953c:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000953e:	6859      	ldr	r1, [r3, #4]
10009540:	430a      	orrs	r2, r1
10009542:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009544:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
		break;
10009546:	e1f8      	b.n	1000993a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009548:	4bcb      	ldr	r3, [pc, #812]	; (10009878 <system_peripheral_reset+0x390>)
1000954a:	6859      	ldr	r1, [r3, #4]
1000954c:	2220      	movs	r2, #32
1000954e:	4391      	bics	r1, r2
10009550:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009552:	6859      	ldr	r1, [r3, #4]
10009554:	430a      	orrs	r2, r1
10009556:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009558:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
		break;
1000955a:	e1ee      	b.n	1000993a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000955c:	4bc6      	ldr	r3, [pc, #792]	; (10009878 <system_peripheral_reset+0x390>)
1000955e:	6859      	ldr	r1, [r3, #4]
10009560:	2240      	movs	r2, #64	; 0x40
10009562:	4391      	bics	r1, r2
10009564:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009566:	6859      	ldr	r1, [r3, #4]
10009568:	430a      	orrs	r2, r1
1000956a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000956c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
		break;
1000956e:	e1e4      	b.n	1000993a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009570:	4bc1      	ldr	r3, [pc, #772]	; (10009878 <system_peripheral_reset+0x390>)
10009572:	6859      	ldr	r1, [r3, #4]
10009574:	2280      	movs	r2, #128	; 0x80
10009576:	4391      	bics	r1, r2
10009578:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000957a:	6859      	ldr	r1, [r3, #4]
1000957c:	430a      	orrs	r2, r1
1000957e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009580:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
		break;
10009582:	e1da      	b.n	1000993a <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009584:	4bbc      	ldr	r3, [pc, #752]	; (10009878 <system_peripheral_reset+0x390>)
10009586:	6859      	ldr	r1, [r3, #4]
10009588:	4abc      	ldr	r2, [pc, #752]	; (1000987c <system_peripheral_reset+0x394>)
1000958a:	400a      	ands	r2, r1
1000958c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000958e:	685a      	ldr	r2, [r3, #4]
10009590:	2180      	movs	r1, #128	; 0x80
10009592:	0049      	lsls	r1, r1, #1
10009594:	430a      	orrs	r2, r1
10009596:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009598:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
		break;
1000959a:	e1ce      	b.n	1000993a <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000959c:	4bb6      	ldr	r3, [pc, #728]	; (10009878 <system_peripheral_reset+0x390>)
1000959e:	6859      	ldr	r1, [r3, #4]
100095a0:	4ab7      	ldr	r2, [pc, #732]	; (10009880 <system_peripheral_reset+0x398>)
100095a2:	400a      	ands	r2, r1
100095a4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100095a6:	685a      	ldr	r2, [r3, #4]
100095a8:	2180      	movs	r1, #128	; 0x80
100095aa:	0089      	lsls	r1, r1, #2
100095ac:	430a      	orrs	r2, r1
100095ae:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100095b0:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
		break;
100095b2:	e1c2      	b.n	1000993a <system_peripheral_reset+0x452>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100095b4:	4bb0      	ldr	r3, [pc, #704]	; (10009878 <system_peripheral_reset+0x390>)
100095b6:	6859      	ldr	r1, [r3, #4]
100095b8:	4ab2      	ldr	r2, [pc, #712]	; (10009884 <system_peripheral_reset+0x39c>)
100095ba:	400a      	ands	r2, r1
100095bc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100095be:	685a      	ldr	r2, [r3, #4]
100095c0:	2180      	movs	r1, #128	; 0x80
100095c2:	00c9      	lsls	r1, r1, #3
100095c4:	430a      	orrs	r2, r1
100095c6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100095c8:	2000      	movs	r0, #0
		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
		break;
100095ca:	e1b6      	b.n	1000993a <system_peripheral_reset+0x452>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100095cc:	4baa      	ldr	r3, [pc, #680]	; (10009878 <system_peripheral_reset+0x390>)
100095ce:	6859      	ldr	r1, [r3, #4]
100095d0:	4aad      	ldr	r2, [pc, #692]	; (10009888 <system_peripheral_reset+0x3a0>)
100095d2:	400a      	ands	r2, r1
100095d4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100095d6:	685a      	ldr	r2, [r3, #4]
100095d8:	2180      	movs	r1, #128	; 0x80
100095da:	0109      	lsls	r1, r1, #4
100095dc:	430a      	orrs	r2, r1
100095de:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100095e0:	2000      	movs	r0, #0
		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
		break;
100095e2:	e1aa      	b.n	1000993a <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100095e4:	4ba4      	ldr	r3, [pc, #656]	; (10009878 <system_peripheral_reset+0x390>)
100095e6:	6859      	ldr	r1, [r3, #4]
100095e8:	4aa8      	ldr	r2, [pc, #672]	; (1000988c <system_peripheral_reset+0x3a4>)
100095ea:	400a      	ands	r2, r1
100095ec:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100095ee:	685a      	ldr	r2, [r3, #4]
100095f0:	2180      	movs	r1, #128	; 0x80
100095f2:	0149      	lsls	r1, r1, #5
100095f4:	430a      	orrs	r2, r1
100095f6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100095f8:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
		break;
100095fa:	e19e      	b.n	1000993a <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100095fc:	4b9e      	ldr	r3, [pc, #632]	; (10009878 <system_peripheral_reset+0x390>)
100095fe:	6859      	ldr	r1, [r3, #4]
10009600:	4aa3      	ldr	r2, [pc, #652]	; (10009890 <system_peripheral_reset+0x3a8>)
10009602:	400a      	ands	r2, r1
10009604:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009606:	685a      	ldr	r2, [r3, #4]
10009608:	2180      	movs	r1, #128	; 0x80
1000960a:	0189      	lsls	r1, r1, #6
1000960c:	430a      	orrs	r2, r1
1000960e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009610:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
		break;
10009612:	e192      	b.n	1000993a <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009614:	4b98      	ldr	r3, [pc, #608]	; (10009878 <system_peripheral_reset+0x390>)
10009616:	6859      	ldr	r1, [r3, #4]
10009618:	4a9e      	ldr	r2, [pc, #632]	; (10009894 <system_peripheral_reset+0x3ac>)
1000961a:	400a      	ands	r2, r1
1000961c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000961e:	685a      	ldr	r2, [r3, #4]
10009620:	2180      	movs	r1, #128	; 0x80
10009622:	01c9      	lsls	r1, r1, #7
10009624:	430a      	orrs	r2, r1
10009626:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009628:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
		break;
1000962a:	e186      	b.n	1000993a <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000962c:	4b92      	ldr	r3, [pc, #584]	; (10009878 <system_peripheral_reset+0x390>)
1000962e:	6859      	ldr	r1, [r3, #4]
10009630:	4a99      	ldr	r2, [pc, #612]	; (10009898 <system_peripheral_reset+0x3b0>)
10009632:	400a      	ands	r2, r1
10009634:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009636:	685a      	ldr	r2, [r3, #4]
10009638:	2180      	movs	r1, #128	; 0x80
1000963a:	0209      	lsls	r1, r1, #8
1000963c:	430a      	orrs	r2, r1
1000963e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009640:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
		break;
10009642:	e17a      	b.n	1000993a <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009644:	4b8c      	ldr	r3, [pc, #560]	; (10009878 <system_peripheral_reset+0x390>)
10009646:	6859      	ldr	r1, [r3, #4]
10009648:	4a94      	ldr	r2, [pc, #592]	; (1000989c <system_peripheral_reset+0x3b4>)
1000964a:	400a      	ands	r2, r1
1000964c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000964e:	685a      	ldr	r2, [r3, #4]
10009650:	2180      	movs	r1, #128	; 0x80
10009652:	0249      	lsls	r1, r1, #9
10009654:	430a      	orrs	r2, r1
10009656:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009658:	2000      	movs	r0, #0
		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
		break;
1000965a:	e16e      	b.n	1000993a <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000965c:	4b86      	ldr	r3, [pc, #536]	; (10009878 <system_peripheral_reset+0x390>)
1000965e:	6859      	ldr	r1, [r3, #4]
10009660:	4a8f      	ldr	r2, [pc, #572]	; (100098a0 <system_peripheral_reset+0x3b8>)
10009662:	400a      	ands	r2, r1
10009664:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009666:	685a      	ldr	r2, [r3, #4]
10009668:	2180      	movs	r1, #128	; 0x80
1000966a:	0289      	lsls	r1, r1, #10
1000966c:	430a      	orrs	r2, r1
1000966e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009670:	2000      	movs	r0, #0
		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
		break;
10009672:	e162      	b.n	1000993a <system_peripheral_reset+0x452>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009674:	4b80      	ldr	r3, [pc, #512]	; (10009878 <system_peripheral_reset+0x390>)
10009676:	6859      	ldr	r1, [r3, #4]
10009678:	4a8a      	ldr	r2, [pc, #552]	; (100098a4 <system_peripheral_reset+0x3bc>)
1000967a:	400a      	ands	r2, r1
1000967c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000967e:	685a      	ldr	r2, [r3, #4]
10009680:	2180      	movs	r1, #128	; 0x80
10009682:	02c9      	lsls	r1, r1, #11
10009684:	430a      	orrs	r2, r1
10009686:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009688:	2000      	movs	r0, #0
		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
		break;
1000968a:	e156      	b.n	1000993a <system_peripheral_reset+0x452>

		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000968c:	4b7a      	ldr	r3, [pc, #488]	; (10009878 <system_peripheral_reset+0x390>)
1000968e:	6859      	ldr	r1, [r3, #4]
10009690:	4a85      	ldr	r2, [pc, #532]	; (100098a8 <system_peripheral_reset+0x3c0>)
10009692:	400a      	ands	r2, r1
10009694:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009696:	685a      	ldr	r2, [r3, #4]
10009698:	2180      	movs	r1, #128	; 0x80
1000969a:	0309      	lsls	r1, r1, #12
1000969c:	430a      	orrs	r2, r1
1000969e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100096a0:	2000      	movs	r0, #0
		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
		break;
100096a2:	e14a      	b.n	1000993a <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100096a4:	4b74      	ldr	r3, [pc, #464]	; (10009878 <system_peripheral_reset+0x390>)
100096a6:	6859      	ldr	r1, [r3, #4]
100096a8:	4a80      	ldr	r2, [pc, #512]	; (100098ac <system_peripheral_reset+0x3c4>)
100096aa:	400a      	ands	r2, r1
100096ac:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100096ae:	685a      	ldr	r2, [r3, #4]
100096b0:	2180      	movs	r1, #128	; 0x80
100096b2:	0349      	lsls	r1, r1, #13
100096b4:	430a      	orrs	r2, r1
100096b6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100096b8:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
		break;
100096ba:	e13e      	b.n	1000993a <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100096bc:	4b6e      	ldr	r3, [pc, #440]	; (10009878 <system_peripheral_reset+0x390>)
100096be:	6859      	ldr	r1, [r3, #4]
100096c0:	4a7b      	ldr	r2, [pc, #492]	; (100098b0 <system_peripheral_reset+0x3c8>)
100096c2:	400a      	ands	r2, r1
100096c4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100096c6:	685a      	ldr	r2, [r3, #4]
100096c8:	2180      	movs	r1, #128	; 0x80
100096ca:	0389      	lsls	r1, r1, #14
100096cc:	430a      	orrs	r2, r1
100096ce:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100096d0:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
		break;
100096d2:	e132      	b.n	1000993a <system_peripheral_reset+0x452>

		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100096d4:	4b68      	ldr	r3, [pc, #416]	; (10009878 <system_peripheral_reset+0x390>)
100096d6:	6859      	ldr	r1, [r3, #4]
100096d8:	4a76      	ldr	r2, [pc, #472]	; (100098b4 <system_peripheral_reset+0x3cc>)
100096da:	400a      	ands	r2, r1
100096dc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100096de:	685a      	ldr	r2, [r3, #4]
100096e0:	2180      	movs	r1, #128	; 0x80
100096e2:	03c9      	lsls	r1, r1, #15
100096e4:	430a      	orrs	r2, r1
100096e6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100096e8:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
		break;
100096ea:	e126      	b.n	1000993a <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100096ec:	4b62      	ldr	r3, [pc, #392]	; (10009878 <system_peripheral_reset+0x390>)
100096ee:	6859      	ldr	r1, [r3, #4]
100096f0:	4a71      	ldr	r2, [pc, #452]	; (100098b8 <system_peripheral_reset+0x3d0>)
100096f2:	400a      	ands	r2, r1
100096f4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100096f6:	685a      	ldr	r2, [r3, #4]
100096f8:	2180      	movs	r1, #128	; 0x80
100096fa:	0409      	lsls	r1, r1, #16
100096fc:	430a      	orrs	r2, r1
100096fe:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009700:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
		break;
10009702:	e11a      	b.n	1000993a <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009704:	4b5c      	ldr	r3, [pc, #368]	; (10009878 <system_peripheral_reset+0x390>)
10009706:	6859      	ldr	r1, [r3, #4]
10009708:	4a6c      	ldr	r2, [pc, #432]	; (100098bc <system_peripheral_reset+0x3d4>)
1000970a:	400a      	ands	r2, r1
1000970c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000970e:	685a      	ldr	r2, [r3, #4]
10009710:	2180      	movs	r1, #128	; 0x80
10009712:	0449      	lsls	r1, r1, #17
10009714:	430a      	orrs	r2, r1
10009716:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009718:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
		break;
1000971a:	e10e      	b.n	1000993a <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000971c:	4b56      	ldr	r3, [pc, #344]	; (10009878 <system_peripheral_reset+0x390>)
1000971e:	6859      	ldr	r1, [r3, #4]
10009720:	4a67      	ldr	r2, [pc, #412]	; (100098c0 <system_peripheral_reset+0x3d8>)
10009722:	400a      	ands	r2, r1
10009724:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009726:	685a      	ldr	r2, [r3, #4]
10009728:	2180      	movs	r1, #128	; 0x80
1000972a:	0489      	lsls	r1, r1, #18
1000972c:	430a      	orrs	r2, r1
1000972e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009730:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
		break;
10009732:	e102      	b.n	1000993a <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009734:	4b50      	ldr	r3, [pc, #320]	; (10009878 <system_peripheral_reset+0x390>)
10009736:	6859      	ldr	r1, [r3, #4]
10009738:	4a62      	ldr	r2, [pc, #392]	; (100098c4 <system_peripheral_reset+0x3dc>)
1000973a:	400a      	ands	r2, r1
1000973c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000973e:	685a      	ldr	r2, [r3, #4]
10009740:	2180      	movs	r1, #128	; 0x80
10009742:	04c9      	lsls	r1, r1, #19
10009744:	430a      	orrs	r2, r1
10009746:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009748:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
		break;
1000974a:	e0f6      	b.n	1000993a <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000974c:	4b4a      	ldr	r3, [pc, #296]	; (10009878 <system_peripheral_reset+0x390>)
1000974e:	6859      	ldr	r1, [r3, #4]
10009750:	4a5d      	ldr	r2, [pc, #372]	; (100098c8 <system_peripheral_reset+0x3e0>)
10009752:	400a      	ands	r2, r1
10009754:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009756:	685a      	ldr	r2, [r3, #4]
10009758:	2180      	movs	r1, #128	; 0x80
1000975a:	0509      	lsls	r1, r1, #20
1000975c:	430a      	orrs	r2, r1
1000975e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009760:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
		break;
10009762:	e0ea      	b.n	1000993a <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009764:	4b44      	ldr	r3, [pc, #272]	; (10009878 <system_peripheral_reset+0x390>)
10009766:	6859      	ldr	r1, [r3, #4]
10009768:	4a58      	ldr	r2, [pc, #352]	; (100098cc <system_peripheral_reset+0x3e4>)
1000976a:	400a      	ands	r2, r1
1000976c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000976e:	685a      	ldr	r2, [r3, #4]
10009770:	2180      	movs	r1, #128	; 0x80
10009772:	0549      	lsls	r1, r1, #21
10009774:	430a      	orrs	r2, r1
10009776:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009778:	2000      	movs	r0, #0
		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
		break;
1000977a:	e0de      	b.n	1000993a <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000977c:	4b3e      	ldr	r3, [pc, #248]	; (10009878 <system_peripheral_reset+0x390>)
1000977e:	6859      	ldr	r1, [r3, #4]
10009780:	4a53      	ldr	r2, [pc, #332]	; (100098d0 <system_peripheral_reset+0x3e8>)
10009782:	400a      	ands	r2, r1
10009784:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009786:	685a      	ldr	r2, [r3, #4]
10009788:	2180      	movs	r1, #128	; 0x80
1000978a:	0589      	lsls	r1, r1, #22
1000978c:	430a      	orrs	r2, r1
1000978e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009790:	2000      	movs	r0, #0
		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
		break;
10009792:	e0d2      	b.n	1000993a <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009794:	4b38      	ldr	r3, [pc, #224]	; (10009878 <system_peripheral_reset+0x390>)
10009796:	6859      	ldr	r1, [r3, #4]
10009798:	4a4e      	ldr	r2, [pc, #312]	; (100098d4 <system_peripheral_reset+0x3ec>)
1000979a:	400a      	ands	r2, r1
1000979c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000979e:	685a      	ldr	r2, [r3, #4]
100097a0:	2180      	movs	r1, #128	; 0x80
100097a2:	05c9      	lsls	r1, r1, #23
100097a4:	430a      	orrs	r2, r1
100097a6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100097a8:	2000      	movs	r0, #0
		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
		break;
100097aa:	e0c6      	b.n	1000993a <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100097ac:	4a32      	ldr	r2, [pc, #200]	; (10009878 <system_peripheral_reset+0x390>)
100097ae:	6853      	ldr	r3, [r2, #4]
100097b0:	005b      	lsls	r3, r3, #1
100097b2:	085b      	lsrs	r3, r3, #1
100097b4:	6053      	str	r3, [r2, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100097b6:	6853      	ldr	r3, [r2, #4]
100097b8:	2180      	movs	r1, #128	; 0x80
100097ba:	0609      	lsls	r1, r1, #24
100097bc:	430b      	orrs	r3, r1
100097be:	6053      	str	r3, [r2, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100097c0:	2000      	movs	r0, #0
		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
		break;
100097c2:	e0ba      	b.n	1000993a <system_peripheral_reset+0x452>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
100097c4:	4b2c      	ldr	r3, [pc, #176]	; (10009878 <system_peripheral_reset+0x390>)
100097c6:	891a      	ldrh	r2, [r3, #8]
100097c8:	2101      	movs	r1, #1
100097ca:	438a      	bics	r2, r1
100097cc:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
100097ce:	8919      	ldrh	r1, [r3, #8]
100097d0:	2201      	movs	r2, #1
100097d2:	430a      	orrs	r2, r1
100097d4:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100097d6:	2000      	movs	r0, #0
		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
		break;
100097d8:	e0af      	b.n	1000993a <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
100097da:	4b27      	ldr	r3, [pc, #156]	; (10009878 <system_peripheral_reset+0x390>)
100097dc:	891a      	ldrh	r2, [r3, #8]
100097de:	2102      	movs	r1, #2
100097e0:	438a      	bics	r2, r1
100097e2:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
100097e4:	8919      	ldrh	r1, [r3, #8]
100097e6:	2202      	movs	r2, #2
100097e8:	430a      	orrs	r2, r1
100097ea:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100097ec:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
		break;
100097ee:	e0a4      	b.n	1000993a <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
100097f0:	4b21      	ldr	r3, [pc, #132]	; (10009878 <system_peripheral_reset+0x390>)
100097f2:	891a      	ldrh	r2, [r3, #8]
100097f4:	2104      	movs	r1, #4
100097f6:	438a      	bics	r2, r1
100097f8:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
100097fa:	8919      	ldrh	r1, [r3, #8]
100097fc:	2204      	movs	r2, #4
100097fe:	430a      	orrs	r2, r1
10009800:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009802:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
		break;
10009804:	e099      	b.n	1000993a <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009806:	4b1c      	ldr	r3, [pc, #112]	; (10009878 <system_peripheral_reset+0x390>)
10009808:	891a      	ldrh	r2, [r3, #8]
1000980a:	2108      	movs	r1, #8
1000980c:	438a      	bics	r2, r1
1000980e:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009810:	8919      	ldrh	r1, [r3, #8]
10009812:	2208      	movs	r2, #8
10009814:	430a      	orrs	r2, r1
10009816:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009818:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
		break;
1000981a:	e08e      	b.n	1000993a <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000981c:	4b16      	ldr	r3, [pc, #88]	; (10009878 <system_peripheral_reset+0x390>)
1000981e:	891a      	ldrh	r2, [r3, #8]
10009820:	2110      	movs	r1, #16
10009822:	438a      	bics	r2, r1
10009824:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009826:	8919      	ldrh	r1, [r3, #8]
10009828:	2210      	movs	r2, #16
1000982a:	430a      	orrs	r2, r1
1000982c:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000982e:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
		break;
10009830:	e083      	b.n	1000993a <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009832:	4b11      	ldr	r3, [pc, #68]	; (10009878 <system_peripheral_reset+0x390>)
10009834:	891a      	ldrh	r2, [r3, #8]
10009836:	2120      	movs	r1, #32
10009838:	438a      	bics	r2, r1
1000983a:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000983c:	8919      	ldrh	r1, [r3, #8]
1000983e:	2220      	movs	r2, #32
10009840:	430a      	orrs	r2, r1
10009842:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009844:	2000      	movs	r0, #0
		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
		break;
10009846:	e078      	b.n	1000993a <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009848:	4b0b      	ldr	r3, [pc, #44]	; (10009878 <system_peripheral_reset+0x390>)
1000984a:	891a      	ldrh	r2, [r3, #8]
1000984c:	2140      	movs	r1, #64	; 0x40
1000984e:	438a      	bics	r2, r1
10009850:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009852:	8919      	ldrh	r1, [r3, #8]
10009854:	2240      	movs	r2, #64	; 0x40
10009856:	430a      	orrs	r2, r1
10009858:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000985a:	2000      	movs	r0, #0
		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
		break;
1000985c:	e06d      	b.n	1000993a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000985e:	4b06      	ldr	r3, [pc, #24]	; (10009878 <system_peripheral_reset+0x390>)
10009860:	891a      	ldrh	r2, [r3, #8]
10009862:	2180      	movs	r1, #128	; 0x80
10009864:	438a      	bics	r2, r1
10009866:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009868:	8919      	ldrh	r1, [r3, #8]
1000986a:	2280      	movs	r2, #128	; 0x80
1000986c:	430a      	orrs	r2, r1
1000986e:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009870:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
		break;
10009872:	e062      	b.n	1000993a <system_peripheral_reset+0x452>
10009874:	10010b8c 	.word	0x10010b8c
10009878:	4000b000 	.word	0x4000b000
1000987c:	fffffeff 	.word	0xfffffeff
10009880:	fffffdff 	.word	0xfffffdff
10009884:	fffffbff 	.word	0xfffffbff
10009888:	fffff7ff 	.word	0xfffff7ff
1000988c:	ffffefff 	.word	0xffffefff
10009890:	ffffdfff 	.word	0xffffdfff
10009894:	ffffbfff 	.word	0xffffbfff
10009898:	ffff7fff 	.word	0xffff7fff
1000989c:	fffeffff 	.word	0xfffeffff
100098a0:	fffdffff 	.word	0xfffdffff
100098a4:	fffbffff 	.word	0xfffbffff
100098a8:	fff7ffff 	.word	0xfff7ffff
100098ac:	ffefffff 	.word	0xffefffff
100098b0:	ffdfffff 	.word	0xffdfffff
100098b4:	ffbfffff 	.word	0xffbfffff
100098b8:	ff7fffff 	.word	0xff7fffff
100098bc:	feffffff 	.word	0xfeffffff
100098c0:	fdffffff 	.word	0xfdffffff
100098c4:	fbffffff 	.word	0xfbffffff
100098c8:	f7ffffff 	.word	0xf7ffffff
100098cc:	efffffff 	.word	0xefffffff
100098d0:	dfffffff 	.word	0xdfffffff
100098d4:	bfffffff 	.word	0xbfffffff

		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
100098d8:	4b18      	ldr	r3, [pc, #96]	; (1000993c <system_peripheral_reset+0x454>)
100098da:	8919      	ldrh	r1, [r3, #8]
100098dc:	4a18      	ldr	r2, [pc, #96]	; (10009940 <system_peripheral_reset+0x458>)
100098de:	400a      	ands	r2, r1
100098e0:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
100098e2:	8919      	ldrh	r1, [r3, #8]
100098e4:	2280      	movs	r2, #128	; 0x80
100098e6:	0052      	lsls	r2, r2, #1
100098e8:	430a      	orrs	r2, r1
100098ea:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100098ec:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
		break;
100098ee:	e024      	b.n	1000993a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
100098f0:	4b12      	ldr	r3, [pc, #72]	; (1000993c <system_peripheral_reset+0x454>)
100098f2:	8919      	ldrh	r1, [r3, #8]
100098f4:	4a13      	ldr	r2, [pc, #76]	; (10009944 <system_peripheral_reset+0x45c>)
100098f6:	400a      	ands	r2, r1
100098f8:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
100098fa:	8919      	ldrh	r1, [r3, #8]
100098fc:	2280      	movs	r2, #128	; 0x80
100098fe:	0092      	lsls	r2, r2, #2
10009900:	430a      	orrs	r2, r1
10009902:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009904:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
		break;
10009906:	e018      	b.n	1000993a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009908:	4b0c      	ldr	r3, [pc, #48]	; (1000993c <system_peripheral_reset+0x454>)
1000990a:	8919      	ldrh	r1, [r3, #8]
1000990c:	4a0e      	ldr	r2, [pc, #56]	; (10009948 <system_peripheral_reset+0x460>)
1000990e:	400a      	ands	r2, r1
10009910:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009912:	8919      	ldrh	r1, [r3, #8]
10009914:	2280      	movs	r2, #128	; 0x80
10009916:	00d2      	lsls	r2, r2, #3
10009918:	430a      	orrs	r2, r1
1000991a:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000991c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
		break;
1000991e:	e00c      	b.n	1000993a <system_peripheral_reset+0x452>

		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009920:	4b06      	ldr	r3, [pc, #24]	; (1000993c <system_peripheral_reset+0x454>)
10009922:	8919      	ldrh	r1, [r3, #8]
10009924:	4a09      	ldr	r2, [pc, #36]	; (1000994c <system_peripheral_reset+0x464>)
10009926:	400a      	ands	r2, r1
10009928:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000992a:	8919      	ldrh	r1, [r3, #8]
1000992c:	2280      	movs	r2, #128	; 0x80
1000992e:	0112      	lsls	r2, r2, #4
10009930:	430a      	orrs	r2, r1
10009932:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009934:	2000      	movs	r0, #0
		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
		break;
10009936:	e000      	b.n	1000993a <system_peripheral_reset+0x452>

		default:
			return STATUS_ERR_INVALID_ARG;
10009938:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000993a:	bd00      	pop	{pc}
1000993c:	4000b000 	.word	0x4000b000
10009940:	fffffeff 	.word	0xfffffeff
10009944:	fffffdff 	.word	0xfffffdff
10009948:	fffffbff 	.word	0xfffffbff
1000994c:	fffff7ff 	.word	0xfffff7ff

10009950 <system_register_isr>:
void system_register_isr(enum ram_isr_table_index isr_index,
		uint32_t isr_address)
{
	uint32_t *temp;
	temp = (uint32_t *)(isr_index * 4 + ISR_RAM_MAP_START_ADDRESS);
	*temp = isr_address;
10009950:	2380      	movs	r3, #128	; 0x80
10009952:	04db      	lsls	r3, r3, #19
10009954:	469c      	mov	ip, r3
10009956:	4460      	add	r0, ip
10009958:	0080      	lsls	r0, r0, #2
1000995a:	6001      	str	r1, [r0, #0]
}
1000995c:	4770      	bx	lr
1000995e:	46c0      	nop			; (mov r8, r8)

10009960 <uart_rx0_isr_handler>:
	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
}

static void uart_rx0_isr_handler(void)
{
10009960:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
10009962:	4b20      	ldr	r3, [pc, #128]	; (100099e4 <uart_rx0_isr_handler+0x84>)
10009964:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
10009966:	6823      	ldr	r3, [r4, #0]
10009968:	7d1d      	ldrb	r5, [r3, #20]
1000996a:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000996c:	066a      	lsls	r2, r5, #25
1000996e:	d513      	bpl.n	10009998 <uart_rx0_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
10009970:	211e      	movs	r1, #30
10009972:	2222      	movs	r2, #34	; 0x22
10009974:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
10009976:	7e1a      	ldrb	r2, [r3, #24]
10009978:	3123      	adds	r1, #35	; 0x23
1000997a:	438a      	bics	r2, r1
1000997c:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000997e:	2321      	movs	r3, #33	; 0x21
10009980:	5ce3      	ldrb	r3, [r4, r3]
10009982:	071b      	lsls	r3, r3, #28
10009984:	d506      	bpl.n	10009994 <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
10009986:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
10009988:	5ce3      	ldrb	r3, [r4, r3]
1000998a:	071b      	lsls	r3, r3, #28
1000998c:	d502      	bpl.n	10009994 <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000998e:	0020      	movs	r0, r4
10009990:	6923      	ldr	r3, [r4, #16]
10009992:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
10009994:	6823      	ldr	r3, [r4, #0]
10009996:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
10009998:	07eb      	lsls	r3, r5, #31
1000999a:	d522      	bpl.n	100099e2 <uart_rx0_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000999c:	6823      	ldr	r3, [r4, #0]
1000999e:	7c1b      	ldrb	r3, [r3, #16]
100099a0:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
100099a2:	6962      	ldr	r2, [r4, #20]
100099a4:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
100099a6:	6963      	ldr	r3, [r4, #20]
100099a8:	3301      	adds	r3, #1
100099aa:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
100099ac:	8ba3      	ldrh	r3, [r4, #28]
100099ae:	3b01      	subs	r3, #1
100099b0:	b29b      	uxth	r3, r3
100099b2:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
100099b4:	8ba3      	ldrh	r3, [r4, #28]
100099b6:	b29b      	uxth	r3, r3
100099b8:	2b00      	cmp	r3, #0
100099ba:	d112      	bne.n	100099e2 <uart_rx0_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
100099bc:	3321      	adds	r3, #33	; 0x21
100099be:	5ce3      	ldrb	r3, [r4, r3]
100099c0:	075b      	lsls	r3, r3, #29
100099c2:	d50e      	bpl.n	100099e2 <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
100099c4:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
100099c6:	5ce3      	ldrb	r3, [r4, r3]
100099c8:	075b      	lsls	r3, r3, #29
100099ca:	d50a      	bpl.n	100099e2 <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
100099cc:	2200      	movs	r2, #0
100099ce:	2322      	movs	r3, #34	; 0x22
100099d0:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
100099d2:	6822      	ldr	r2, [r4, #0]
100099d4:	7e13      	ldrb	r3, [r2, #24]
100099d6:	2101      	movs	r1, #1
100099d8:	438b      	bics	r3, r1
100099da:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
100099dc:	68e3      	ldr	r3, [r4, #12]
100099de:	0020      	movs	r0, r4
100099e0:	4798      	blx	r3
			}
		}
	}
}
100099e2:	bd70      	pop	{r4, r5, r6, pc}
100099e4:	100134c8 	.word	0x100134c8

100099e8 <uart_tx0_isr_handler>:

static void uart_tx0_isr_handler(void)
{
100099e8:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
100099ea:	4b21      	ldr	r3, [pc, #132]	; (10009a70 <uart_tx0_isr_handler+0x88>)
100099ec:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
100099ee:	6823      	ldr	r3, [r4, #0]
100099f0:	791d      	ldrb	r5, [r3, #4]
100099f2:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
100099f4:	07ea      	lsls	r2, r5, #31
100099f6:	d517      	bpl.n	10009a28 <uart_tx0_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
100099f8:	69a2      	ldr	r2, [r4, #24]
100099fa:	7811      	ldrb	r1, [r2, #0]
100099fc:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
100099fe:	3201      	adds	r2, #1
10009a00:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
10009a02:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
10009a04:	8be3      	ldrh	r3, [r4, #30]
10009a06:	3b01      	subs	r3, #1
10009a08:	b29b      	uxth	r3, r3
10009a0a:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[0];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
10009a0c:	8be3      	ldrh	r3, [r4, #30]
10009a0e:	b29b      	uxth	r3, r3
10009a10:	2b00      	cmp	r3, #0
10009a12:	d109      	bne.n	10009a28 <uart_tx0_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
10009a14:	6822      	ldr	r2, [r4, #0]
10009a16:	7a13      	ldrb	r3, [r2, #8]
10009a18:	2101      	movs	r1, #1
10009a1a:	438b      	bics	r3, r1
10009a1c:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
10009a1e:	6822      	ldr	r2, [r4, #0]
10009a20:	7a11      	ldrb	r1, [r2, #8]
10009a22:	2310      	movs	r3, #16
10009a24:	430b      	orrs	r3, r1
10009a26:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
10009a28:	06eb      	lsls	r3, r5, #27
10009a2a:	d512      	bpl.n	10009a52 <uart_tx0_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
10009a2c:	2321      	movs	r3, #33	; 0x21
10009a2e:	5ce3      	ldrb	r3, [r4, r3]
10009a30:	07db      	lsls	r3, r3, #31
10009a32:	d50e      	bpl.n	10009a52 <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
10009a34:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
10009a36:	5ce3      	ldrb	r3, [r4, r3]
10009a38:	07db      	lsls	r3, r3, #31
10009a3a:	d50a      	bpl.n	10009a52 <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
10009a3c:	2200      	movs	r2, #0
10009a3e:	2322      	movs	r3, #34	; 0x22
10009a40:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
10009a42:	6822      	ldr	r2, [r4, #0]
10009a44:	7a13      	ldrb	r3, [r2, #8]
10009a46:	2110      	movs	r1, #16
10009a48:	438b      	bics	r3, r1
10009a4a:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
10009a4c:	0020      	movs	r0, r4
10009a4e:	6863      	ldr	r3, [r4, #4]
10009a50:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
10009a52:	06ab      	lsls	r3, r5, #26
10009a54:	d50a      	bpl.n	10009a6c <uart_tx0_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
10009a56:	2321      	movs	r3, #33	; 0x21
10009a58:	5ce3      	ldrb	r3, [r4, r3]
10009a5a:	079b      	lsls	r3, r3, #30
10009a5c:	d506      	bpl.n	10009a6c <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
10009a5e:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
10009a60:	5ce3      	ldrb	r3, [r4, r3]
10009a62:	079b      	lsls	r3, r3, #30
10009a64:	d502      	bpl.n	10009a6c <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
10009a66:	68a3      	ldr	r3, [r4, #8]
10009a68:	0020      	movs	r0, r4
10009a6a:	4798      	blx	r3
		}

	}
}
10009a6c:	bd70      	pop	{r4, r5, r6, pc}
10009a6e:	46c0      	nop			; (mov r8, r8)
10009a70:	100134c8 	.word	0x100134c8

10009a74 <uart_rx1_isr_handler>:

static void uart_rx1_isr_handler(void)
{
10009a74:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
10009a76:	4b20      	ldr	r3, [pc, #128]	; (10009af8 <uart_rx1_isr_handler+0x84>)
10009a78:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
10009a7a:	6823      	ldr	r3, [r4, #0]
10009a7c:	7d1d      	ldrb	r5, [r3, #20]
10009a7e:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
10009a80:	066a      	lsls	r2, r5, #25
10009a82:	d513      	bpl.n	10009aac <uart_rx1_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
10009a84:	211e      	movs	r1, #30
10009a86:	2222      	movs	r2, #34	; 0x22
10009a88:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
10009a8a:	7e1a      	ldrb	r2, [r3, #24]
10009a8c:	3123      	adds	r1, #35	; 0x23
10009a8e:	438a      	bics	r2, r1
10009a90:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
10009a92:	2321      	movs	r3, #33	; 0x21
10009a94:	5ce3      	ldrb	r3, [r4, r3]
10009a96:	071b      	lsls	r3, r3, #28
10009a98:	d506      	bpl.n	10009aa8 <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
10009a9a:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
10009a9c:	5ce3      	ldrb	r3, [r4, r3]
10009a9e:	071b      	lsls	r3, r3, #28
10009aa0:	d502      	bpl.n	10009aa8 <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
10009aa2:	0020      	movs	r0, r4
10009aa4:	6923      	ldr	r3, [r4, #16]
10009aa6:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
10009aa8:	6823      	ldr	r3, [r4, #0]
10009aaa:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
10009aac:	07eb      	lsls	r3, r5, #31
10009aae:	d522      	bpl.n	10009af6 <uart_rx1_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
10009ab0:	6823      	ldr	r3, [r4, #0]
10009ab2:	7c1b      	ldrb	r3, [r3, #16]
10009ab4:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
10009ab6:	6962      	ldr	r2, [r4, #20]
10009ab8:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
10009aba:	6963      	ldr	r3, [r4, #20]
10009abc:	3301      	adds	r3, #1
10009abe:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
10009ac0:	8ba3      	ldrh	r3, [r4, #28]
10009ac2:	3b01      	subs	r3, #1
10009ac4:	b29b      	uxth	r3, r3
10009ac6:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
10009ac8:	8ba3      	ldrh	r3, [r4, #28]
10009aca:	b29b      	uxth	r3, r3
10009acc:	2b00      	cmp	r3, #0
10009ace:	d112      	bne.n	10009af6 <uart_rx1_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
10009ad0:	3321      	adds	r3, #33	; 0x21
10009ad2:	5ce3      	ldrb	r3, [r4, r3]
10009ad4:	075b      	lsls	r3, r3, #29
10009ad6:	d50e      	bpl.n	10009af6 <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
10009ad8:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
10009ada:	5ce3      	ldrb	r3, [r4, r3]
10009adc:	075b      	lsls	r3, r3, #29
10009ade:	d50a      	bpl.n	10009af6 <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
10009ae0:	2200      	movs	r2, #0
10009ae2:	2322      	movs	r3, #34	; 0x22
10009ae4:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
10009ae6:	6822      	ldr	r2, [r4, #0]
10009ae8:	7e13      	ldrb	r3, [r2, #24]
10009aea:	2101      	movs	r1, #1
10009aec:	438b      	bics	r3, r1
10009aee:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
10009af0:	68e3      	ldr	r3, [r4, #12]
10009af2:	0020      	movs	r0, r4
10009af4:	4798      	blx	r3
			}
		}
	}
}
10009af6:	bd70      	pop	{r4, r5, r6, pc}
10009af8:	100134c8 	.word	0x100134c8

10009afc <uart_tx1_isr_handler>:

static void uart_tx1_isr_handler(void)
{
10009afc:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
10009afe:	4b21      	ldr	r3, [pc, #132]	; (10009b84 <uart_tx1_isr_handler+0x88>)
10009b00:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
10009b02:	6823      	ldr	r3, [r4, #0]
10009b04:	791d      	ldrb	r5, [r3, #4]
10009b06:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
10009b08:	07ea      	lsls	r2, r5, #31
10009b0a:	d517      	bpl.n	10009b3c <uart_tx1_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
10009b0c:	69a2      	ldr	r2, [r4, #24]
10009b0e:	7811      	ldrb	r1, [r2, #0]
10009b10:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
10009b12:	3201      	adds	r2, #1
10009b14:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
10009b16:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
10009b18:	8be3      	ldrh	r3, [r4, #30]
10009b1a:	3b01      	subs	r3, #1
10009b1c:	b29b      	uxth	r3, r3
10009b1e:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[1];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
10009b20:	8be3      	ldrh	r3, [r4, #30]
10009b22:	b29b      	uxth	r3, r3
10009b24:	2b00      	cmp	r3, #0
10009b26:	d109      	bne.n	10009b3c <uart_tx1_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
10009b28:	6822      	ldr	r2, [r4, #0]
10009b2a:	7a13      	ldrb	r3, [r2, #8]
10009b2c:	2101      	movs	r1, #1
10009b2e:	438b      	bics	r3, r1
10009b30:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
10009b32:	6822      	ldr	r2, [r4, #0]
10009b34:	7a11      	ldrb	r1, [r2, #8]
10009b36:	2310      	movs	r3, #16
10009b38:	430b      	orrs	r3, r1
10009b3a:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
10009b3c:	06eb      	lsls	r3, r5, #27
10009b3e:	d512      	bpl.n	10009b66 <uart_tx1_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
10009b40:	2321      	movs	r3, #33	; 0x21
10009b42:	5ce3      	ldrb	r3, [r4, r3]
10009b44:	07db      	lsls	r3, r3, #31
10009b46:	d50e      	bpl.n	10009b66 <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
10009b48:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
10009b4a:	5ce3      	ldrb	r3, [r4, r3]
10009b4c:	07db      	lsls	r3, r3, #31
10009b4e:	d50a      	bpl.n	10009b66 <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
10009b50:	2200      	movs	r2, #0
10009b52:	2322      	movs	r3, #34	; 0x22
10009b54:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
10009b56:	6822      	ldr	r2, [r4, #0]
10009b58:	7a13      	ldrb	r3, [r2, #8]
10009b5a:	2110      	movs	r1, #16
10009b5c:	438b      	bics	r3, r1
10009b5e:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
10009b60:	0020      	movs	r0, r4
10009b62:	6863      	ldr	r3, [r4, #4]
10009b64:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
10009b66:	06ab      	lsls	r3, r5, #26
10009b68:	d50a      	bpl.n	10009b80 <uart_tx1_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
10009b6a:	2321      	movs	r3, #33	; 0x21
10009b6c:	5ce3      	ldrb	r3, [r4, r3]
10009b6e:	079b      	lsls	r3, r3, #30
10009b70:	d506      	bpl.n	10009b80 <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
10009b72:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
10009b74:	5ce3      	ldrb	r3, [r4, r3]
10009b76:	079b      	lsls	r3, r3, #30
10009b78:	d502      	bpl.n	10009b80 <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
10009b7a:	68a3      	ldr	r3, [r4, #8]
10009b7c:	0020      	movs	r0, r4
10009b7e:	4798      	blx	r3
		}

	}
}
10009b80:	bd70      	pop	{r4, r5, r6, pc}
10009b82:	46c0      	nop			; (mov r8, r8)
10009b84:	100134c8 	.word	0x100134c8

10009b88 <uart_get_config_defaults>:
 * \param[out] config  Pointer to configuration structure to be initiated
 */
void uart_get_config_defaults(
		struct uart_config *const config)
{
	config->baud_rate = 115200;
10009b88:	23e1      	movs	r3, #225	; 0xe1
10009b8a:	025b      	lsls	r3, r3, #9
10009b8c:	6003      	str	r3, [r0, #0]
	config->data_bits = UART_8_BITS;
10009b8e:	2300      	movs	r3, #0
10009b90:	7103      	strb	r3, [r0, #4]
	config->stop_bits = UART_1_STOP_BIT;
10009b92:	7143      	strb	r3, [r0, #5]
	config->parity = UART_NO_PARITY;
10009b94:	7183      	strb	r3, [r0, #6]
	config->flow_control = false;
10009b96:	71c3      	strb	r3, [r0, #7]

	config->pin_number_pad[0] = PIN_LP_GPIO_2;
10009b98:	3302      	adds	r3, #2
10009b9a:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_3;
10009b9c:	2203      	movs	r2, #3
10009b9e:	60c2      	str	r2, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_4;
10009ba0:	3201      	adds	r2, #1
10009ba2:	6102      	str	r2, [r0, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_5;
10009ba4:	3201      	adds	r2, #1
10009ba6:	6142      	str	r2, [r0, #20]

	config->pinmux_sel_pad[0] = MUX_LP_GPIO_2_UART0_RXD;
10009ba8:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_3_UART0_TXD;
10009baa:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_4_UART0_CTS;
10009bac:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_5_UART0_RTS;
10009bae:	6243      	str	r3, [r0, #36]	; 0x24
}
10009bb0:	4770      	bx	lr
10009bb2:	46c0      	nop			; (mov r8, r8)

10009bb4 <uart_init>:
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
10009bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10009bb6:	464f      	mov	r7, r9
10009bb8:	4646      	mov	r6, r8
10009bba:	b4c0      	push	{r6, r7}
10009bbc:	0005      	movs	r5, r0
10009bbe:	0017      	movs	r7, r2

	uint8_t config_temp = 0;
	uint8_t i,index;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
10009bc0:	6001      	str	r1, [r0, #0]

	for (i = 0; i < UART_CALLBACK_N; i++) {
		module->callback[i] = NULL;
10009bc2:	2300      	movs	r3, #0
10009bc4:	6043      	str	r3, [r0, #4]
10009bc6:	6083      	str	r3, [r0, #8]
10009bc8:	60c3      	str	r3, [r0, #12]
10009bca:	6103      	str	r3, [r0, #16]
	}
	module->rx_buffer_ptr = NULL;
10009bcc:	6143      	str	r3, [r0, #20]
	module->tx_buffer_ptr = NULL;
10009bce:	6183      	str	r3, [r0, #24]
	module->remaining_rx_buffer_length = 0;
10009bd0:	2200      	movs	r2, #0
10009bd2:	8383      	strh	r3, [r0, #28]
	module->remaining_tx_buffer_length = 0;
10009bd4:	83c3      	strh	r3, [r0, #30]
	module->callback_reg_mask = 0;
10009bd6:	3320      	adds	r3, #32
10009bd8:	54c2      	strb	r2, [r0, r3]
	module->callback_enable_mask = 0;
10009bda:	3301      	adds	r3, #1
10009bdc:	54c2      	strb	r2, [r0, r3]
	module->status = STATUS_OK;
10009bde:	3301      	adds	r3, #1
10009be0:	54c2      	strb	r2, [r0, r3]

	if (hw == UART0) {
10009be2:	4b55      	ldr	r3, [pc, #340]	; (10009d38 <uart_init+0x184>)
10009be4:	4299      	cmp	r1, r3
10009be6:	d118      	bne.n	10009c1a <uart_init+0x66>
		system_peripheral_reset(PERIPHERAL_UART0_CORE);
10009be8:	2009      	movs	r0, #9
10009bea:	4c54      	ldr	r4, [pc, #336]	; (10009d3c <uart_init+0x188>)
10009bec:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART0_IF);
10009bee:	200a      	movs	r0, #10
10009bf0:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_CORE);
10009bf2:	2009      	movs	r0, #9
10009bf4:	4c52      	ldr	r4, [pc, #328]	; (10009d40 <uart_init+0x18c>)
10009bf6:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_IF);
10009bf8:	200a      	movs	r0, #10
10009bfa:	47a0      	blx	r4
		_uart_instances[0] = module;
10009bfc:	4b51      	ldr	r3, [pc, #324]	; (10009d44 <uart_init+0x190>)
10009bfe:	601d      	str	r5, [r3, #0]
		system_register_isr(RAM_ISR_TABLE_UARTRX0_INDEX, (uint32_t)uart_rx0_isr_handler);
10009c00:	4951      	ldr	r1, [pc, #324]	; (10009d48 <uart_init+0x194>)
10009c02:	2010      	movs	r0, #16
10009c04:	4c51      	ldr	r4, [pc, #324]	; (10009d4c <uart_init+0x198>)
10009c06:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX0_INDEX, (uint32_t)uart_tx0_isr_handler);
10009c08:	4951      	ldr	r1, [pc, #324]	; (10009d50 <uart_init+0x19c>)
10009c0a:	2011      	movs	r0, #17
10009c0c:	47a0      	blx	r4

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
10009c0e:	4b51      	ldr	r3, [pc, #324]	; (10009d54 <uart_init+0x1a0>)
10009c10:	2201      	movs	r2, #1
10009c12:	601a      	str	r2, [r3, #0]
10009c14:	3201      	adds	r2, #1
10009c16:	601a      	str	r2, [r3, #0]
10009c18:	e01a      	b.n	10009c50 <uart_init+0x9c>
		NVIC_EnableIRQ(UART0_RX_IRQn);
		NVIC_EnableIRQ(UART0_TX_IRQn);
	} else if (hw == UART1) {
10009c1a:	4b4f      	ldr	r3, [pc, #316]	; (10009d58 <uart_init+0x1a4>)
10009c1c:	4299      	cmp	r1, r3
10009c1e:	d117      	bne.n	10009c50 <uart_init+0x9c>
		system_peripheral_reset(PERIPHERAL_UART1_CORE);
10009c20:	200b      	movs	r0, #11
10009c22:	4c46      	ldr	r4, [pc, #280]	; (10009d3c <uart_init+0x188>)
10009c24:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART1_IF);
10009c26:	200c      	movs	r0, #12
10009c28:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_CORE);
10009c2a:	200b      	movs	r0, #11
10009c2c:	4c44      	ldr	r4, [pc, #272]	; (10009d40 <uart_init+0x18c>)
10009c2e:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_IF);
10009c30:	200c      	movs	r0, #12
10009c32:	47a0      	blx	r4
		_uart_instances[1] = module;
10009c34:	4b43      	ldr	r3, [pc, #268]	; (10009d44 <uart_init+0x190>)
10009c36:	605d      	str	r5, [r3, #4]
		system_register_isr(RAM_ISR_TABLE_UARTRX1_INDEX, (uint32_t)uart_rx1_isr_handler);
10009c38:	4948      	ldr	r1, [pc, #288]	; (10009d5c <uart_init+0x1a8>)
10009c3a:	2012      	movs	r0, #18
10009c3c:	4c43      	ldr	r4, [pc, #268]	; (10009d4c <uart_init+0x198>)
10009c3e:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX1_INDEX, (uint32_t)uart_tx1_isr_handler);
10009c40:	4947      	ldr	r1, [pc, #284]	; (10009d60 <uart_init+0x1ac>)
10009c42:	2013      	movs	r0, #19
10009c44:	47a0      	blx	r4
10009c46:	4b43      	ldr	r3, [pc, #268]	; (10009d54 <uart_init+0x1a0>)
10009c48:	2204      	movs	r2, #4
10009c4a:	601a      	str	r2, [r3, #0]
10009c4c:	3204      	adds	r2, #4
10009c4e:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
10009c50:	79fb      	ldrb	r3, [r7, #7]
		index = 4;
10009c52:	2204      	movs	r2, #4
10009c54:	4690      	mov	r8, r2
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
10009c56:	2b00      	cmp	r3, #0
10009c58:	d152      	bne.n	10009d00 <uart_init+0x14c>
		index = 4;
	} else {
		index = 2;
10009c5a:	3302      	adds	r3, #2
10009c5c:	4698      	mov	r8, r3
10009c5e:	e04f      	b.n	10009d00 <uart_init+0x14c>
#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
10009c60:	8a31      	ldrh	r1, [r6, #16]
10009c62:	ce01      	ldmia	r6!, {r0}
10009c64:	b2c0      	uxtb	r0, r0
10009c66:	47c8      	blx	r9

#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
10009c68:	3401      	adds	r4, #1
10009c6a:	b2e4      	uxtb	r4, r4
10009c6c:	4544      	cmp	r4, r8
10009c6e:	d3f7      	bcc.n	10009c60 <uart_init+0xac>
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
10009c70:	682b      	ldr	r3, [r5, #0]
10009c72:	7d1a      	ldrb	r2, [r3, #20]
10009c74:	07d2      	lsls	r2, r2, #31
10009c76:	d504      	bpl.n	10009c82 <uart_init+0xce>
10009c78:	2101      	movs	r1, #1
		i = module->hw->RECEIVE_DATA.reg;
10009c7a:	7c1a      	ldrb	r2, [r3, #16]
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
10009c7c:	7d1a      	ldrb	r2, [r3, #20]
10009c7e:	420a      	tst	r2, r1
10009c80:	d1fb      	bne.n	10009c7a <uart_init+0xc6>
		i = module->hw->RECEIVE_DATA.reg;
	}
	
	/* reset configuration register */
	module->hw->UART_CONFIGURATION.reg = 0;
10009c82:	2100      	movs	r1, #0
10009c84:	2220      	movs	r2, #32
10009c86:	5499      	strb	r1, [r3, r2]

	/* program the uart configuration. */
	if(config->flow_control) {
10009c88:	79fb      	ldrb	r3, [r7, #7]
		config_temp |= UART_CONFIGURATION_CTS_ENABLE_1;
10009c8a:	1e59      	subs	r1, r3, #1
10009c8c:	418b      	sbcs	r3, r1
10009c8e:	0159      	lsls	r1, r3, #5
	}
	config_temp |= config->data_bits;
	config_temp |= config->stop_bits;
10009c90:	793b      	ldrb	r3, [r7, #4]
10009c92:	797a      	ldrb	r2, [r7, #5]
10009c94:	4313      	orrs	r3, r2
10009c96:	430b      	orrs	r3, r1
	switch(config->parity) {
10009c98:	79ba      	ldrb	r2, [r7, #6]
10009c9a:	2a02      	cmp	r2, #2
10009c9c:	d00d      	beq.n	10009cba <uart_init+0x106>
10009c9e:	b2d1      	uxtb	r1, r2
10009ca0:	2902      	cmp	r1, #2
10009ca2:	d802      	bhi.n	10009caa <uart_init+0xf6>
10009ca4:	2a01      	cmp	r2, #1
10009ca6:	d005      	beq.n	10009cb4 <uart_init+0x100>
10009ca8:	e00f      	b.n	10009cca <uart_init+0x116>
10009caa:	2a03      	cmp	r2, #3
10009cac:	d008      	beq.n	10009cc0 <uart_init+0x10c>
10009cae:	2a04      	cmp	r2, #4
10009cb0:	d009      	beq.n	10009cc6 <uart_init+0x112>
10009cb2:	e00a      	b.n	10009cca <uart_init+0x116>
		case UART_NO_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_0;
			break;

		case UART_EVEN_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
10009cb4:	2202      	movs	r2, #2
10009cb6:	4313      	orrs	r3, r2
			config_temp |= UART_CONFIGURATION_PARITY_MODE_0;
			break;
10009cb8:	e007      	b.n	10009cca <uart_init+0x116>

		case UART_ODD_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_1;
10009cba:	2206      	movs	r2, #6
10009cbc:	4313      	orrs	r3, r2
			break;
10009cbe:	e004      	b.n	10009cca <uart_init+0x116>

		case UART_SPACE_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_2;
10009cc0:	220a      	movs	r2, #10
10009cc2:	4313      	orrs	r3, r2
			break;
10009cc4:	e001      	b.n	10009cca <uart_init+0x116>

		case UART_MARK_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_3;
10009cc6:	220e      	movs	r2, #14
10009cc8:	4313      	orrs	r3, r2
			break;

		default:
			break;
	}	
	module->hw->UART_CONFIGURATION.reg = config_temp;
10009cca:	2220      	movs	r2, #32
10009ccc:	6829      	ldr	r1, [r5, #0]
10009cce:	548b      	strb	r3, [r1, r2]

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);
10009cd0:	683e      	ldr	r6, [r7, #0]
	uint16_t integerpart = 0;
	uint8_t fractionalpart = 0;
	uint32_t diff;
	uint8_t i = 0;

	clock = system_clock_get_value();
10009cd2:	4b24      	ldr	r3, [pc, #144]	; (10009d64 <uart_init+0x1b0>)
10009cd4:	4798      	blx	r3
10009cd6:	0004      	movs	r4, r0
	integerpart = clock / baud_rate;
10009cd8:	0031      	movs	r1, r6
10009cda:	4b23      	ldr	r3, [pc, #140]	; (10009d68 <uart_init+0x1b4>)
10009cdc:	4798      	blx	r3
10009cde:	b282      	uxth	r2, r0
	diff = clock - (baud_rate * integerpart);
10009ce0:	0400      	lsls	r0, r0, #16
10009ce2:	0c00      	lsrs	r0, r0, #16
10009ce4:	4370      	muls	r0, r6
10009ce6:	1a20      	subs	r0, r4, r0
	i = 0;
	while(diff > (baud_rate / 16)) {
10009ce8:	0931      	lsrs	r1, r6, #4
10009cea:	4288      	cmp	r0, r1
10009cec:	d906      	bls.n	10009cfc <uart_init+0x148>
10009cee:	2300      	movs	r3, #0
		i++;
10009cf0:	3301      	adds	r3, #1
10009cf2:	b2db      	uxtb	r3, r3
		diff -= (baud_rate / 16);
10009cf4:	1a40      	subs	r0, r0, r1

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
	while(diff > (baud_rate / 16)) {
10009cf6:	4288      	cmp	r0, r1
10009cf8:	d8fa      	bhi.n	10009cf0 <uart_init+0x13c>
10009cfa:	e007      	b.n	10009d0c <uart_init+0x158>
	uint8_t i = 0;

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
10009cfc:	2300      	movs	r3, #0
10009cfe:	e005      	b.n	10009d0c <uart_init+0x158>
10009d00:	003e      	movs	r6, r7
10009d02:	3608      	adds	r6, #8
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
10009d04:	2400      	movs	r4, #0
#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
10009d06:	4b19      	ldr	r3, [pc, #100]	; (10009d6c <uart_init+0x1b8>)
10009d08:	4699      	mov	r9, r3
10009d0a:	e7a9      	b.n	10009c60 <uart_init+0xac>
		i++;
		diff -= (baud_rate / 16);
	}
	fractionalpart = (i + 1) / 2;

	module->hw->UART_CLOCK_SOURCE.reg = UART_CLOCK_SOURCE_CLOCK_SELECT_0;
10009d0c:	2100      	movs	r1, #0
10009d0e:	2028      	movs	r0, #40	; 0x28
10009d10:	682c      	ldr	r4, [r5, #0]
10009d12:	5421      	strb	r1, [r4, r0]
	module->hw->UART_BAUD_RATE.reg =
10009d14:	3301      	adds	r3, #1
10009d16:	071b      	lsls	r3, r3, #28
10009d18:	0f5b      	lsrs	r3, r3, #29
10009d1a:	00d2      	lsls	r2, r2, #3
10009d1c:	4313      	orrs	r3, r2
10009d1e:	b29b      	uxth	r3, r3
10009d20:	682a      	ldr	r2, [r5, #0]
10009d22:	8493      	strh	r3, [r2, #36]	; 0x24
	module->hw->UART_CONFIGURATION.reg = config_temp;

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);

	module->hw->RX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at read time
10009d24:	682b      	ldr	r3, [r5, #0]
10009d26:	7619      	strb	r1, [r3, #24]
	module->hw->TX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at write time
10009d28:	682b      	ldr	r3, [r5, #0]
10009d2a:	7219      	strb	r1, [r3, #8]
	
	return STATUS_OK;
}
10009d2c:	2000      	movs	r0, #0
10009d2e:	bc0c      	pop	{r2, r3}
10009d30:	4690      	mov	r8, r2
10009d32:	4699      	mov	r9, r3
10009d34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10009d36:	46c0      	nop			; (mov r8, r8)
10009d38:	40004000 	.word	0x40004000
10009d3c:	100094e9 	.word	0x100094e9
10009d40:	10008e21 	.word	0x10008e21
10009d44:	100134c8 	.word	0x100134c8
10009d48:	10009961 	.word	0x10009961
10009d4c:	10009951 	.word	0x10009951
10009d50:	100099e9 	.word	0x100099e9
10009d54:	e000e100 	.word	0xe000e100
10009d58:	40005000 	.word	0x40005000
10009d5c:	10009a75 	.word	0x10009a75
10009d60:	10009afd 	.word	0x10009afd
10009d64:	10008e15 	.word	0x10008e15
10009d68:	1000e5b9 	.word	0x1000e5b9
10009d6c:	10008bd9 	.word	0x10008bd9

10009d70 <uart_write_wait>:
* \retval STATUS_OK         If the operation was completed
*/
enum status_code uart_write_wait(struct uart_module *const module,
		const uint8_t tx_data)
{
	while (!(module->hw->TRANSMIT_STATUS.reg & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL));
10009d70:	6802      	ldr	r2, [r0, #0]
10009d72:	2001      	movs	r0, #1
10009d74:	7913      	ldrb	r3, [r2, #4]
10009d76:	4203      	tst	r3, r0
10009d78:	d0fc      	beq.n	10009d74 <uart_write_wait+0x4>

	module->hw->TRANSMIT_DATA.reg = tx_data;
10009d7a:	7011      	strb	r1, [r2, #0]
	
	return STATUS_OK;
}
10009d7c:	2000      	movs	r0, #0
10009d7e:	4770      	bx	lr

10009d80 <uart_read_wait>:
* \retval STATUS_OK                If the operation was completed
*/
enum status_code uart_read_wait(struct uart_module *const module,
		uint8_t *const rx_data)
{
	while (!(module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY));
10009d80:	6802      	ldr	r2, [r0, #0]
10009d82:	2001      	movs	r0, #1
10009d84:	7d13      	ldrb	r3, [r2, #20]
10009d86:	4203      	tst	r3, r0
10009d88:	d0fc      	beq.n	10009d84 <uart_read_wait+0x4>

	*rx_data = module->hw->RECEIVE_DATA.reg;
10009d8a:	7c13      	ldrb	r3, [r2, #16]
10009d8c:	700b      	strb	r3, [r1, #0]
	
	return STATUS_OK;
}
10009d8e:	2000      	movs	r0, #0
10009d90:	4770      	bx	lr
10009d92:	46c0      	nop			; (mov r8, r8)

10009d94 <uart_read_buffer_job>:
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
10009d94:	2317      	movs	r3, #23
{
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
10009d96:	2a00      	cmp	r2, #0
10009d98:	d00d      	beq.n	10009db6 <uart_read_buffer_job+0x22>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check if the UART is busy transmitting or slave waiting for TXC*/
	if (module->status == STATUS_BUSY) {
10009d9a:	330b      	adds	r3, #11
10009d9c:	5cc3      	ldrb	r3, [r0, r3]
10009d9e:	b2db      	uxtb	r3, r3
10009da0:	2b05      	cmp	r3, #5
10009da2:	d008      	beq.n	10009db6 <uart_read_buffer_job+0x22>
	Assert(module);
	Assert(rx_data);

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
10009da4:	8382      	strh	r2, [r0, #28]
	module->rx_buffer_ptr = rx_data;
10009da6:	6141      	str	r1, [r0, #20]
	module->status = STATUS_BUSY;
10009da8:	2205      	movs	r2, #5
10009daa:	2322      	movs	r3, #34	; 0x22
10009dac:	54c2      	strb	r2, [r0, r3]

	module->hw->RX_INTERRUPT_MASK.reg = UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK;
10009dae:	6803      	ldr	r3, [r0, #0]
10009db0:	3a04      	subs	r2, #4
10009db2:	761a      	strb	r2, [r3, #24]
		return STATUS_BUSY;
	}

	/* Issue internal read */
	_uart_read_buffer(module, rx_data, length);
	return STATUS_OK;
10009db4:	2300      	movs	r3, #0
}
10009db6:	0018      	movs	r0, r3
10009db8:	4770      	bx	lr
10009dba:	46c0      	nop			; (mov r8, r8)

10009dbc <uart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
10009dbc:	0093      	lsls	r3, r2, #2
10009dbe:	18c3      	adds	r3, r0, r3
10009dc0:	6059      	str	r1, [r3, #4]
	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
10009dc2:	2120      	movs	r1, #32
10009dc4:	2301      	movs	r3, #1
10009dc6:	4093      	lsls	r3, r2
10009dc8:	5c42      	ldrb	r2, [r0, r1]
10009dca:	4313      	orrs	r3, r2
10009dcc:	5443      	strb	r3, [r0, r1]
}
10009dce:	4770      	bx	lr

10009dd0 <uart_enable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_enable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
10009dd0:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
10009dd2:	2221      	movs	r2, #33	; 0x21
10009dd4:	2301      	movs	r3, #1
10009dd6:	408b      	lsls	r3, r1
10009dd8:	5c84      	ldrb	r4, [r0, r2]
10009dda:	4323      	orrs	r3, r4
10009ddc:	5483      	strb	r3, [r0, r2]

	if (callback_type == UART_CTS_ACTIVE) {
10009dde:	2901      	cmp	r1, #1
10009de0:	d104      	bne.n	10009dec <uart_enable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg |= UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
10009de2:	6802      	ldr	r2, [r0, #0]
10009de4:	7a11      	ldrb	r1, [r2, #8]
10009de6:	2320      	movs	r3, #32
10009de8:	430b      	orrs	r3, r1
10009dea:	7213      	strb	r3, [r2, #8]
	}
}
10009dec:	bd10      	pop	{r4, pc}
10009dee:	46c0      	nop			; (mov r8, r8)

10009df0 <uart_disable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_disable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
10009df0:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
10009df2:	2201      	movs	r2, #1
10009df4:	408a      	lsls	r2, r1
10009df6:	2421      	movs	r4, #33	; 0x21
10009df8:	5d03      	ldrb	r3, [r0, r4]
10009dfa:	4393      	bics	r3, r2
10009dfc:	5503      	strb	r3, [r0, r4]

	if (callback_type == UART_CTS_ACTIVE) {
10009dfe:	2901      	cmp	r1, #1
10009e00:	d104      	bne.n	10009e0c <uart_disable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg &= ~UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
10009e02:	6802      	ldr	r2, [r0, #0]
10009e04:	7a13      	ldrb	r3, [r2, #8]
10009e06:	311f      	adds	r1, #31
10009e08:	438b      	bics	r3, r1
10009e0a:	7213      	strb	r3, [r2, #8]
	}

}
10009e0c:	bd10      	pop	{r4, pc}
10009e0e:	46c0      	nop			; (mov r8, r8)

10009e10 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
10009e10:	b5f0      	push	{r4, r5, r6, r7, lr}
10009e12:	4647      	mov	r7, r8
10009e14:	b480      	push	{r7}
10009e16:	000c      	movs	r4, r1
10009e18:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
10009e1a:	2800      	cmp	r0, #0
10009e1c:	d10d      	bne.n	10009e3a <_read+0x2a>
		return -1;
	}

	for (; len > 0; --len) {
10009e1e:	2a00      	cmp	r2, #0
10009e20:	dd0e      	ble.n	10009e40 <_read+0x30>
10009e22:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
10009e24:	4e08      	ldr	r6, [pc, #32]	; (10009e48 <_read+0x38>)
10009e26:	4d09      	ldr	r5, [pc, #36]	; (10009e4c <_read+0x3c>)
10009e28:	6830      	ldr	r0, [r6, #0]
10009e2a:	0021      	movs	r1, r4
10009e2c:	682b      	ldr	r3, [r5, #0]
10009e2e:	4798      	blx	r3
		ptr++;
10009e30:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
10009e32:	42a7      	cmp	r7, r4
10009e34:	d1f8      	bne.n	10009e28 <_read+0x18>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
10009e36:	4640      	mov	r0, r8
10009e38:	e003      	b.n	10009e42 <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
10009e3a:	2001      	movs	r0, #1
10009e3c:	4240      	negs	r0, r0
10009e3e:	e000      	b.n	10009e42 <_read+0x32>
	}

	for (; len > 0; --len) {
10009e40:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
10009e42:	bc04      	pop	{r2}
10009e44:	4690      	mov	r8, r2
10009e46:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009e48:	100134d8 	.word	0x100134d8
10009e4c:	100134d0 	.word	0x100134d0

10009e50 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
10009e50:	b5f0      	push	{r4, r5, r6, r7, lr}
10009e52:	4647      	mov	r7, r8
10009e54:	b480      	push	{r7}
10009e56:	000e      	movs	r6, r1
10009e58:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
10009e5a:	3801      	subs	r0, #1
10009e5c:	2802      	cmp	r0, #2
10009e5e:	d811      	bhi.n	10009e84 <_write+0x34>
		return -1;
	}

	for (; len != 0; --len) {
10009e60:	2a00      	cmp	r2, #0
10009e62:	d012      	beq.n	10009e8a <_write+0x3a>
10009e64:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
10009e66:	4b0c      	ldr	r3, [pc, #48]	; (10009e98 <_write+0x48>)
10009e68:	4698      	mov	r8, r3
10009e6a:	4f0c      	ldr	r7, [pc, #48]	; (10009e9c <_write+0x4c>)
10009e6c:	4643      	mov	r3, r8
10009e6e:	6818      	ldr	r0, [r3, #0]
10009e70:	5d31      	ldrb	r1, [r6, r4]
10009e72:	683b      	ldr	r3, [r7, #0]
10009e74:	4798      	blx	r3
10009e76:	2800      	cmp	r0, #0
10009e78:	db09      	blt.n	10009e8e <_write+0x3e>
			return -1;
		}
		++nChars;
10009e7a:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
10009e7c:	42a5      	cmp	r5, r4
10009e7e:	d1f5      	bne.n	10009e6c <_write+0x1c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
10009e80:	0020      	movs	r0, r4
10009e82:	e006      	b.n	10009e92 <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
10009e84:	2001      	movs	r0, #1
10009e86:	4240      	negs	r0, r0
10009e88:	e003      	b.n	10009e92 <_write+0x42>
	}

	for (; len != 0; --len) {
10009e8a:	2000      	movs	r0, #0
10009e8c:	e001      	b.n	10009e92 <_write+0x42>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
10009e8e:	2001      	movs	r0, #1
10009e90:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
10009e92:	bc04      	pop	{r2}
10009e94:	4690      	mov	r8, r2
10009e96:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009e98:	100134d8 	.word	0x100134d8
10009e9c:	100134d4 	.word	0x100134d4

10009ea0 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
10009ea0:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
10009ea2:	4a06      	ldr	r2, [pc, #24]	; (10009ebc <_sbrk+0x1c>)
10009ea4:	6812      	ldr	r2, [r2, #0]
10009ea6:	2a00      	cmp	r2, #0
10009ea8:	d102      	bne.n	10009eb0 <_sbrk+0x10>
		heap = (unsigned char *)&_end;
10009eaa:	4905      	ldr	r1, [pc, #20]	; (10009ec0 <_sbrk+0x20>)
10009eac:	4a03      	ldr	r2, [pc, #12]	; (10009ebc <_sbrk+0x1c>)
10009eae:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
10009eb0:	4a02      	ldr	r2, [pc, #8]	; (10009ebc <_sbrk+0x1c>)
10009eb2:	6810      	ldr	r0, [r2, #0]

	heap += incr;
10009eb4:	18c3      	adds	r3, r0, r3
10009eb6:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
10009eb8:	4770      	bx	lr
10009eba:	46c0      	nop			; (mov r8, r8)
10009ebc:	100118b8 	.word	0x100118b8
10009ec0:	10014de0 	.word	0x10014de0

10009ec4 <_close>:
}

extern int _close(int file)
{
	return -1;
}
10009ec4:	2001      	movs	r0, #1
10009ec6:	4240      	negs	r0, r0
10009ec8:	4770      	bx	lr
10009eca:	46c0      	nop			; (mov r8, r8)

10009ecc <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
10009ecc:	2380      	movs	r3, #128	; 0x80
10009ece:	019b      	lsls	r3, r3, #6
10009ed0:	604b      	str	r3, [r1, #4]

	return 0;
}
10009ed2:	2000      	movs	r0, #0
10009ed4:	4770      	bx	lr
10009ed6:	46c0      	nop			; (mov r8, r8)

10009ed8 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
10009ed8:	2001      	movs	r0, #1
10009eda:	4770      	bx	lr

10009edc <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
10009edc:	2000      	movs	r0, #0
10009ede:	4770      	bx	lr

10009ee0 <ble_undefined_event_handler>:
	}
	return status;
}

at_ble_status_t ble_undefined_event_handler(void *params)
{
10009ee0:	b510      	push	{r4, lr}
	DBG_LOG_DEV("Undefined Event Received");
10009ee2:	4804      	ldr	r0, [pc, #16]	; (10009ef4 <ble_undefined_event_handler+0x14>)
10009ee4:	4b04      	ldr	r3, [pc, #16]	; (10009ef8 <ble_undefined_event_handler+0x18>)
10009ee6:	4798      	blx	r3
10009ee8:	4804      	ldr	r0, [pc, #16]	; (10009efc <ble_undefined_event_handler+0x1c>)
10009eea:	4b05      	ldr	r3, [pc, #20]	; (10009f00 <ble_undefined_event_handler+0x20>)
10009eec:	4798      	blx	r3
    ALL_UNUSED(params);
	return AT_BLE_SUCCESS;
}
10009eee:	2000      	movs	r0, #0
10009ef0:	bd10      	pop	{r4, pc}
10009ef2:	46c0      	nop			; (mov r8, r8)
10009ef4:	1001095c 	.word	0x1001095c
10009ef8:	1000f805 	.word	0x1000f805
10009efc:	10010d1c 	.word	0x10010d1c
10009f00:	1000f6e5 	.word	0x1000f6e5

10009f04 <ble_scan_report_handler>:
	}
}

/** @brief function handles scan report */
at_ble_status_t ble_scan_report_handler(void *params)
{
10009f04:	b510      	push	{r4, lr}
	at_ble_scan_report_t *scan_report;
	scan_report = (at_ble_scan_report_t *)params;
	if (scan_report->status == AT_BLE_SUCCESS)
10009f06:	7800      	ldrb	r0, [r0, #0]
10009f08:	2800      	cmp	r0, #0
10009f0a:	d006      	beq.n	10009f1a <ble_scan_report_handler+0x16>
		/* All scan data should be handled */
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Scanning  failed");
10009f0c:	4803      	ldr	r0, [pc, #12]	; (10009f1c <ble_scan_report_handler+0x18>)
10009f0e:	4b04      	ldr	r3, [pc, #16]	; (10009f20 <ble_scan_report_handler+0x1c>)
10009f10:	4798      	blx	r3
10009f12:	4804      	ldr	r0, [pc, #16]	; (10009f24 <ble_scan_report_handler+0x20>)
10009f14:	4b04      	ldr	r3, [pc, #16]	; (10009f28 <ble_scan_report_handler+0x24>)
10009f16:	4798      	blx	r3
	}
	return AT_BLE_FAILURE;
10009f18:	20e2      	movs	r0, #226	; 0xe2
}
10009f1a:	bd10      	pop	{r4, pc}
10009f1c:	1001095c 	.word	0x1001095c
10009f20:	1000f805 	.word	0x1000f805
10009f24:	10010d38 	.word	0x10010d38
10009f28:	1000f6e5 	.word	0x1000f6e5

10009f2c <ble_mtu_changed_indication_handler>:
	return AT_BLE_SUCCESS;
	
}

at_ble_status_t ble_mtu_changed_indication_handler(void *params)
{
10009f2c:	b510      	push	{r4, lr}
10009f2e:	0004      	movs	r4, r0
	at_ble_mtu_changed_ind_t *mtu_changed_ind;
	mtu_changed_ind = (at_ble_mtu_changed_ind_t *)params;
	DBG_LOG_DEV("BLE-MTU Changed, Connection Handle: %d, New Value: %d", 
10009f30:	4804      	ldr	r0, [pc, #16]	; (10009f44 <ble_mtu_changed_indication_handler+0x18>)
10009f32:	4b05      	ldr	r3, [pc, #20]	; (10009f48 <ble_mtu_changed_indication_handler+0x1c>)
10009f34:	4798      	blx	r3
10009f36:	8862      	ldrh	r2, [r4, #2]
10009f38:	8821      	ldrh	r1, [r4, #0]
10009f3a:	4804      	ldr	r0, [pc, #16]	; (10009f4c <ble_mtu_changed_indication_handler+0x20>)
10009f3c:	4b04      	ldr	r3, [pc, #16]	; (10009f50 <ble_mtu_changed_indication_handler+0x24>)
10009f3e:	4798      	blx	r3
										mtu_changed_ind->conhdl, 
										mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
}
10009f40:	2000      	movs	r0, #0
10009f42:	bd10      	pop	{r4, pc}
10009f44:	1001095c 	.word	0x1001095c
10009f48:	1000f805 	.word	0x1000f805
10009f4c:	10010d4c 	.word	0x10010d4c
10009f50:	1000f6e5 	.word	0x1000f6e5

10009f54 <ble_mtu_changed_cmd_complete_handler>:

at_ble_status_t ble_mtu_changed_cmd_complete_handler(void *params)
{
10009f54:	b570      	push	{r4, r5, r6, lr}
10009f56:	0004      	movs	r4, r0
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
10009f58:	78c5      	ldrb	r5, [r0, #3]
10009f5a:	2d00      	cmp	r5, #0
10009f5c:	d108      	bne.n	10009f70 <ble_mtu_changed_cmd_complete_handler+0x1c>
	{
		DBG_LOG_DEV("MTU Changed, Connection Handle:%d, Operation:%d", 
10009f5e:	480a      	ldr	r0, [pc, #40]	; (10009f88 <ble_mtu_changed_cmd_complete_handler+0x34>)
10009f60:	4b0a      	ldr	r3, [pc, #40]	; (10009f8c <ble_mtu_changed_cmd_complete_handler+0x38>)
10009f62:	4798      	blx	r3
10009f64:	78a2      	ldrb	r2, [r4, #2]
10009f66:	8821      	ldrh	r1, [r4, #0]
10009f68:	4809      	ldr	r0, [pc, #36]	; (10009f90 <ble_mtu_changed_cmd_complete_handler+0x3c>)
10009f6a:	4b0a      	ldr	r3, [pc, #40]	; (10009f94 <ble_mtu_changed_cmd_complete_handler+0x40>)
10009f6c:	4798      	blx	r3
		cmd_complete_event->conn_handle, 
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
10009f6e:	e008      	b.n	10009f82 <ble_mtu_changed_cmd_complete_handler+0x2e>
	}
	else
	{
		DBG_LOG("MTU Change Failed, Connection Handle:%d, Operation:%d",
10009f70:	4805      	ldr	r0, [pc, #20]	; (10009f88 <ble_mtu_changed_cmd_complete_handler+0x34>)
10009f72:	4b06      	ldr	r3, [pc, #24]	; (10009f8c <ble_mtu_changed_cmd_complete_handler+0x38>)
10009f74:	4798      	blx	r3
10009f76:	78a2      	ldrb	r2, [r4, #2]
10009f78:	8821      	ldrh	r1, [r4, #0]
10009f7a:	4807      	ldr	r0, [pc, #28]	; (10009f98 <ble_mtu_changed_cmd_complete_handler+0x44>)
10009f7c:	4b05      	ldr	r3, [pc, #20]	; (10009f94 <ble_mtu_changed_cmd_complete_handler+0x40>)
10009f7e:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
10009f80:	25e2      	movs	r5, #226	; 0xe2
}
10009f82:	0028      	movs	r0, r5
10009f84:	bd70      	pop	{r4, r5, r6, pc}
10009f86:	46c0      	nop			; (mov r8, r8)
10009f88:	1001095c 	.word	0x1001095c
10009f8c:	1000f805 	.word	0x1000f805
10009f90:	10010d84 	.word	0x10010d84
10009f94:	1000f6e5 	.word	0x1000f6e5
10009f98:	10010db4 	.word	0x10010db4

10009f9c <ble_characteristic_write_cmd_complete_handler>:

at_ble_status_t ble_characteristic_write_cmd_complete_handler(void *params)
{
10009f9c:	b570      	push	{r4, r5, r6, lr}
10009f9e:	0004      	movs	r4, r0
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
10009fa0:	78c5      	ldrb	r5, [r0, #3]
10009fa2:	2d00      	cmp	r5, #0
10009fa4:	d108      	bne.n	10009fb8 <ble_characteristic_write_cmd_complete_handler+0x1c>
	{
		DBG_LOG_DEV("Char Write Cmd Complete, Connection Handle:%d, Operation:%d",
10009fa6:	480a      	ldr	r0, [pc, #40]	; (10009fd0 <ble_characteristic_write_cmd_complete_handler+0x34>)
10009fa8:	4b0a      	ldr	r3, [pc, #40]	; (10009fd4 <ble_characteristic_write_cmd_complete_handler+0x38>)
10009faa:	4798      	blx	r3
10009fac:	78a2      	ldrb	r2, [r4, #2]
10009fae:	8821      	ldrh	r1, [r4, #0]
10009fb0:	4809      	ldr	r0, [pc, #36]	; (10009fd8 <ble_characteristic_write_cmd_complete_handler+0x3c>)
10009fb2:	4b0a      	ldr	r3, [pc, #40]	; (10009fdc <ble_characteristic_write_cmd_complete_handler+0x40>)
10009fb4:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
10009fb6:	e008      	b.n	10009fca <ble_characteristic_write_cmd_complete_handler+0x2e>
	}
	else
	{
		DBG_LOG_DEV("Char Write Cmd Failed, Connection Handle:%d, Operation:%d",
10009fb8:	4805      	ldr	r0, [pc, #20]	; (10009fd0 <ble_characteristic_write_cmd_complete_handler+0x34>)
10009fba:	4b06      	ldr	r3, [pc, #24]	; (10009fd4 <ble_characteristic_write_cmd_complete_handler+0x38>)
10009fbc:	4798      	blx	r3
10009fbe:	78a2      	ldrb	r2, [r4, #2]
10009fc0:	8821      	ldrh	r1, [r4, #0]
10009fc2:	4807      	ldr	r0, [pc, #28]	; (10009fe0 <ble_characteristic_write_cmd_complete_handler+0x44>)
10009fc4:	4b05      	ldr	r3, [pc, #20]	; (10009fdc <ble_characteristic_write_cmd_complete_handler+0x40>)
10009fc6:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
10009fc8:	25e2      	movs	r5, #226	; 0xe2
}
10009fca:	0028      	movs	r0, r5
10009fcc:	bd70      	pop	{r4, r5, r6, pc}
10009fce:	46c0      	nop			; (mov r8, r8)
10009fd0:	1001095c 	.word	0x1001095c
10009fd4:	1000f805 	.word	0x1000f805
10009fd8:	10010dec 	.word	0x10010dec
10009fdc:	1000f6e5 	.word	0x1000f6e5
10009fe0:	10010e28 	.word	0x10010e28

10009fe4 <ble_disconnected_state_handler>:

/** @brief function handles disconnection event received from stack */
at_ble_status_t ble_disconnected_state_handler(void *params)
{
10009fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10009fe6:	0006      	movs	r6, r0
10009fe8:	4c1d      	ldr	r4, [pc, #116]	; (1000a060 <ble_disconnected_state_handler+0x7c>)
10009fea:	239b      	movs	r3, #155	; 0x9b
10009fec:	009b      	lsls	r3, r3, #2
10009fee:	18e7      	adds	r7, r4, r3
10009ff0:	0025      	movs	r5, r4
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
10009ff2:	0023      	movs	r3, r4
10009ff4:	3b56      	subs	r3, #86	; 0x56
10009ff6:	881a      	ldrh	r2, [r3, #0]
10009ff8:	8833      	ldrh	r3, [r6, #0]
10009ffa:	429a      	cmp	r2, r3
10009ffc:	d122      	bne.n	1000a044 <ble_disconnected_state_handler+0x60>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
10009ffe:	7823      	ldrb	r3, [r4, #0]
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
1000a000:	2b05      	cmp	r3, #5
1000a002:	d001      	beq.n	1000a008 <ble_disconnected_state_handler+0x24>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
1000a004:	2b08      	cmp	r3, #8
1000a006:	d102      	bne.n	1000a00e <ble_disconnected_state_handler+0x2a>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
1000a008:	2301      	movs	r3, #1
1000a00a:	702b      	strb	r3, [r5, #0]
1000a00c:	e01a      	b.n	1000a044 <ble_disconnected_state_handler+0x60>
		}		
		else if(ble_dev_info[idx].conn_info.handle == disconnect->handle)
		{
			switch (ble_dev_info[idx].conn_state)
1000a00e:	2b07      	cmp	r3, #7
1000a010:	d80f      	bhi.n	1000a032 <ble_disconnected_state_handler+0x4e>
1000a012:	009b      	lsls	r3, r3, #2
1000a014:	4a13      	ldr	r2, [pc, #76]	; (1000a064 <ble_disconnected_state_handler+0x80>)
1000a016:	58d3      	ldr	r3, [r2, r3]
1000a018:	469f      	mov	pc, r3
				case BLE_DEVICE_PAIRING_FAILED:
				case BLE_DEVICE_ENCRYPTION_STATE:
				case BLE_DEVICE_ENCRYPTION_FAILED:
				{
					/* Device is not paired so remove the device information */
					ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000a01a:	2300      	movs	r3, #0
1000a01c:	7023      	strb	r3, [r4, #0]
					if (ble_device_count > 0)
1000a01e:	4b12      	ldr	r3, [pc, #72]	; (1000a068 <ble_disconnected_state_handler+0x84>)
1000a020:	781b      	ldrb	r3, [r3, #0]
1000a022:	2b00      	cmp	r3, #0
1000a024:	d00e      	beq.n	1000a044 <ble_disconnected_state_handler+0x60>
					{
						ble_device_count--;
1000a026:	4a10      	ldr	r2, [pc, #64]	; (1000a068 <ble_disconnected_state_handler+0x84>)
1000a028:	7813      	ldrb	r3, [r2, #0]
1000a02a:	3b01      	subs	r3, #1
1000a02c:	b2db      	uxtb	r3, r3
1000a02e:	7013      	strb	r3, [r2, #0]
1000a030:	e008      	b.n	1000a044 <ble_disconnected_state_handler+0x60>
				
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
1000a032:	480e      	ldr	r0, [pc, #56]	; (1000a06c <ble_disconnected_state_handler+0x88>)
1000a034:	4b0e      	ldr	r3, [pc, #56]	; (1000a070 <ble_disconnected_state_handler+0x8c>)
1000a036:	4798      	blx	r3
1000a038:	7829      	ldrb	r1, [r5, #0]
1000a03a:	480e      	ldr	r0, [pc, #56]	; (1000a074 <ble_disconnected_state_handler+0x90>)
1000a03c:	4b0e      	ldr	r3, [pc, #56]	; (1000a078 <ble_disconnected_state_handler+0x94>)
1000a03e:	4798      	blx	r3
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000a040:	2300      	movs	r3, #0
1000a042:	702b      	strb	r3, [r5, #0]
1000a044:	347c      	adds	r4, #124	; 0x7c
{
	at_ble_disconnected_t *disconnect;
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a046:	42bc      	cmp	r4, r7
1000a048:	d1d2      	bne.n	10009ff0 <ble_disconnected_state_handler+0xc>
				break;				
			}
		} 
	}
	
	DBG_LOG("Device disconnected Reason:0x%02x Handle=0x%x", disconnect->reason, disconnect->handle);
1000a04a:	4808      	ldr	r0, [pc, #32]	; (1000a06c <ble_disconnected_state_handler+0x88>)
1000a04c:	4b08      	ldr	r3, [pc, #32]	; (1000a070 <ble_disconnected_state_handler+0x8c>)
1000a04e:	4798      	blx	r3
1000a050:	8832      	ldrh	r2, [r6, #0]
1000a052:	78b1      	ldrb	r1, [r6, #2]
1000a054:	4809      	ldr	r0, [pc, #36]	; (1000a07c <ble_disconnected_state_handler+0x98>)
1000a056:	4b08      	ldr	r3, [pc, #32]	; (1000a078 <ble_disconnected_state_handler+0x94>)
1000a058:	4798      	blx	r3
	return AT_BLE_SUCCESS;
}
1000a05a:	2000      	movs	r0, #0
1000a05c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000a05e:	46c0      	nop			; (mov r8, r8)
1000a060:	10013552 	.word	0x10013552
1000a064:	10010c9c 	.word	0x10010c9c
1000a068:	10013760 	.word	0x10013760
1000a06c:	1001095c 	.word	0x1001095c
1000a070:	1000f805 	.word	0x1000f805
1000a074:	10010e64 	.word	0x10010e64
1000a078:	1000f6e5 	.word	0x1000f6e5
1000a07c:	10010e7c 	.word	0x10010e7c

1000a080 <ble_conn_param_update>:

/** @brief connection update parameter function */
at_ble_status_t ble_conn_param_update(void *params)
{
1000a080:	b510      	push	{r4, lr}
	at_ble_conn_param_update_done_t * conn_param_update;
	conn_param_update = (at_ble_conn_param_update_done_t *)params;
	DBG_LOG_DEV("AT_BLE_CONN_PARAM_UPDATE ");
1000a082:	4804      	ldr	r0, [pc, #16]	; (1000a094 <ble_conn_param_update+0x14>)
1000a084:	4b04      	ldr	r3, [pc, #16]	; (1000a098 <ble_conn_param_update+0x18>)
1000a086:	4798      	blx	r3
1000a088:	4804      	ldr	r0, [pc, #16]	; (1000a09c <ble_conn_param_update+0x1c>)
1000a08a:	4b05      	ldr	r3, [pc, #20]	; (1000a0a0 <ble_conn_param_update+0x20>)
1000a08c:	4798      	blx	r3
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}
1000a08e:	2000      	movs	r0, #0
1000a090:	bd10      	pop	{r4, pc}
1000a092:	46c0      	nop			; (mov r8, r8)
1000a094:	1001095c 	.word	0x1001095c
1000a098:	1000f805 	.word	0x1000f805
1000a09c:	10010eac 	.word	0x10010eac
1000a0a0:	1000f6e5 	.word	0x1000f6e5

1000a0a4 <ble_encryption_status_change_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption status change */
at_ble_status_t ble_encryption_status_change_handler(void *params)
{
1000a0a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000a0a6:	0006      	movs	r6, r0
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
1000a0a8:	8801      	ldrh	r1, [r0, #0]
1000a0aa:	4b28      	ldr	r3, [pc, #160]	; (1000a14c <ble_encryption_status_change_handler+0xa8>)
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a0ac:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
1000a0ae:	891a      	ldrh	r2, [r3, #8]
1000a0b0:	428a      	cmp	r2, r1
1000a0b2:	d104      	bne.n	1000a0be <ble_encryption_status_change_handler+0x1a>
1000a0b4:	001a      	movs	r2, r3
1000a0b6:	325e      	adds	r2, #94	; 0x5e
1000a0b8:	7812      	ldrb	r2, [r2, #0]
1000a0ba:	2a06      	cmp	r2, #6
1000a0bc:	d02e      	beq.n	1000a11c <ble_encryption_status_change_handler+0x78>
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a0be:	3401      	adds	r4, #1
1000a0c0:	b2e4      	uxtb	r4, r4
1000a0c2:	337c      	adds	r3, #124	; 0x7c
1000a0c4:	2c05      	cmp	r4, #5
1000a0c6:	d1f2      	bne.n	1000a0ae <ble_encryption_status_change_handler+0xa>
1000a0c8:	e039      	b.n	1000a13e <ble_encryption_status_change_handler+0x9a>
			return AT_BLE_FAILURE;
		}
	}
	else
	{
		ble_dev_info[idx].bond_info.status = enc_status->status;
1000a0ca:	4920      	ldr	r1, [pc, #128]	; (1000a14c <ble_encryption_status_change_handler+0xa8>)
1000a0cc:	0163      	lsls	r3, r4, #5
1000a0ce:	1b1a      	subs	r2, r3, r4
1000a0d0:	0092      	lsls	r2, r2, #2
1000a0d2:	188a      	adds	r2, r1, r2
1000a0d4:	7615      	strb	r5, [r2, #24]
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
1000a0d6:	0014      	movs	r4, r2
1000a0d8:	345e      	adds	r4, #94	; 0x5e
1000a0da:	2307      	movs	r3, #7
1000a0dc:	7023      	strb	r3, [r4, #0]
		DBG_LOG("Encryption failed");
1000a0de:	481c      	ldr	r0, [pc, #112]	; (1000a150 <ble_encryption_status_change_handler+0xac>)
1000a0e0:	4b1c      	ldr	r3, [pc, #112]	; (1000a154 <ble_encryption_status_change_handler+0xb0>)
1000a0e2:	4798      	blx	r3
1000a0e4:	481c      	ldr	r0, [pc, #112]	; (1000a158 <ble_encryption_status_change_handler+0xb4>)
1000a0e6:	4b1d      	ldr	r3, [pc, #116]	; (1000a15c <ble_encryption_status_change_handler+0xb8>)
1000a0e8:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000a0ea:	25e2      	movs	r5, #226	; 0xe2
1000a0ec:	e02b      	b.n	1000a146 <ble_encryption_status_change_handler+0xa2>
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Encryption completed successfully");
1000a0ee:	4818      	ldr	r0, [pc, #96]	; (1000a150 <ble_encryption_status_change_handler+0xac>)
1000a0f0:	4b18      	ldr	r3, [pc, #96]	; (1000a154 <ble_encryption_status_change_handler+0xb0>)
1000a0f2:	4798      	blx	r3
1000a0f4:	481a      	ldr	r0, [pc, #104]	; (1000a160 <ble_encryption_status_change_handler+0xbc>)
1000a0f6:	4b19      	ldr	r3, [pc, #100]	; (1000a15c <ble_encryption_status_change_handler+0xb8>)
1000a0f8:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_COMPLETED;
1000a0fa:	4914      	ldr	r1, [pc, #80]	; (1000a14c <ble_encryption_status_change_handler+0xa8>)
1000a0fc:	0163      	lsls	r3, r4, #5
1000a0fe:	1b1a      	subs	r2, r3, r4
1000a100:	0092      	lsls	r2, r2, #2
1000a102:	188a      	adds	r2, r1, r2
1000a104:	0010      	movs	r0, r2
1000a106:	305e      	adds	r0, #94	; 0x5e
1000a108:	2708      	movs	r7, #8
1000a10a:	7007      	strb	r7, [r0, #0]
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
1000a10c:	78f0      	ldrb	r0, [r6, #3]
1000a10e:	7510      	strb	r0, [r2, #20]
			ble_dev_info[idx].bond_info.status = enc_status->status;
1000a110:	78b2      	ldrb	r2, [r6, #2]
1000a112:	1b1c      	subs	r4, r3, r4
1000a114:	00a4      	lsls	r4, r4, #2
1000a116:	190c      	adds	r4, r1, r4
1000a118:	7622      	strb	r2, [r4, #24]
		ble_dev_info[idx].bond_info.status = enc_status->status;
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
1000a11a:	e014      	b.n	1000a146 <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
1000a11c:	78b5      	ldrb	r5, [r6, #2]
1000a11e:	2d00      	cmp	r5, #0
1000a120:	d0e5      	beq.n	1000a0ee <ble_encryption_status_change_handler+0x4a>
1000a122:	e7d2      	b.n	1000a0ca <ble_encryption_status_change_handler+0x26>
	{
		DBG_LOG("Encryption completed successfully");
1000a124:	4e0a      	ldr	r6, [pc, #40]	; (1000a150 <ble_encryption_status_change_handler+0xac>)
1000a126:	0030      	movs	r0, r6
1000a128:	4d0a      	ldr	r5, [pc, #40]	; (1000a154 <ble_encryption_status_change_handler+0xb0>)
1000a12a:	47a8      	blx	r5
1000a12c:	480c      	ldr	r0, [pc, #48]	; (1000a160 <ble_encryption_status_change_handler+0xbc>)
1000a12e:	4c0b      	ldr	r4, [pc, #44]	; (1000a15c <ble_encryption_status_change_handler+0xb8>)
1000a130:	47a0      	blx	r4
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
			ble_dev_info[idx].bond_info.status = enc_status->status;
		}
		else
		{
			DBG_LOG("BLE Device not found encryption info");
1000a132:	0030      	movs	r0, r6
1000a134:	47a8      	blx	r5
1000a136:	480b      	ldr	r0, [pc, #44]	; (1000a164 <ble_encryption_status_change_handler+0xc0>)
1000a138:	47a0      	blx	r4
			return AT_BLE_FAILURE;
1000a13a:	25e2      	movs	r5, #226	; 0xe2
1000a13c:	e003      	b.n	1000a146 <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
1000a13e:	78b5      	ldrb	r5, [r6, #2]
1000a140:	2d00      	cmp	r5, #0
1000a142:	d1c2      	bne.n	1000a0ca <ble_encryption_status_change_handler+0x26>
1000a144:	e7ee      	b.n	1000a124 <ble_encryption_status_change_handler+0x80>
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
}
1000a146:	0028      	movs	r0, r5
1000a148:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000a14a:	46c0      	nop			; (mov r8, r8)
1000a14c:	100134f4 	.word	0x100134f4
1000a150:	1001095c 	.word	0x1001095c
1000a154:	1000f805 	.word	0x1000f805
1000a158:	10010ec8 	.word	0x10010ec8
1000a15c:	1000f6e5 	.word	0x1000f6e5
1000a160:	10010edc 	.word	0x10010edc
1000a164:	10010f00 	.word	0x10010f00

1000a168 <ble_scan_info_handler>:
	return found;
}
#endif
/** @brief function handling scaned information */
at_ble_status_t ble_scan_info_handler(void *params)
{
1000a168:	b530      	push	{r4, r5, lr}
1000a16a:	b085      	sub	sp, #20
1000a16c:	0004      	movs	r4, r0
	at_ble_scan_info_t *scan_param;
	scan_param = (at_ble_scan_info_t *)params;
	if(scan_response_count < MAX_SCAN_DEVICE)
1000a16e:	4b1f      	ldr	r3, [pc, #124]	; (1000a1ec <ble_scan_info_handler+0x84>)
1000a170:	781b      	ldrb	r3, [r3, #0]
1000a172:	b2db      	uxtb	r3, r3
1000a174:	2b13      	cmp	r3, #19
1000a176:	d824      	bhi.n	1000a1c2 <ble_scan_info_handler+0x5a>
	{
		memcpy((uint8_t *)&scan_info[scan_response_count], scan_param, sizeof(at_ble_scan_info_t));
1000a178:	4d1c      	ldr	r5, [pc, #112]	; (1000a1ec <ble_scan_info_handler+0x84>)
1000a17a:	782b      	ldrb	r3, [r5, #0]
1000a17c:	b2db      	uxtb	r3, r3
1000a17e:	0098      	lsls	r0, r3, #2
1000a180:	18c0      	adds	r0, r0, r3
1000a182:	00c0      	lsls	r0, r0, #3
1000a184:	18c3      	adds	r3, r0, r3
1000a186:	481a      	ldr	r0, [pc, #104]	; (1000a1f0 <ble_scan_info_handler+0x88>)
1000a188:	1818      	adds	r0, r3, r0
1000a18a:	2229      	movs	r2, #41	; 0x29
1000a18c:	0021      	movs	r1, r4
1000a18e:	4b19      	ldr	r3, [pc, #100]	; (1000a1f4 <ble_scan_info_handler+0x8c>)
1000a190:	4798      	blx	r3
		DBG_LOG_DEV("Info:Device found address [%d]  0x%02X%02X%02X%02X%02X%02X ",
1000a192:	4819      	ldr	r0, [pc, #100]	; (1000a1f8 <ble_scan_info_handler+0x90>)
1000a194:	4b19      	ldr	r3, [pc, #100]	; (1000a1fc <ble_scan_info_handler+0x94>)
1000a196:	4798      	blx	r3
1000a198:	7829      	ldrb	r1, [r5, #0]
1000a19a:	b2c9      	uxtb	r1, r1
1000a19c:	79a3      	ldrb	r3, [r4, #6]
1000a19e:	79e2      	ldrb	r2, [r4, #7]
1000a1a0:	78a0      	ldrb	r0, [r4, #2]
1000a1a2:	9003      	str	r0, [sp, #12]
1000a1a4:	78e0      	ldrb	r0, [r4, #3]
1000a1a6:	9002      	str	r0, [sp, #8]
1000a1a8:	7920      	ldrb	r0, [r4, #4]
1000a1aa:	9001      	str	r0, [sp, #4]
1000a1ac:	7960      	ldrb	r0, [r4, #5]
1000a1ae:	9000      	str	r0, [sp, #0]
1000a1b0:	4813      	ldr	r0, [pc, #76]	; (1000a200 <ble_scan_info_handler+0x98>)
1000a1b2:	4c14      	ldr	r4, [pc, #80]	; (1000a204 <ble_scan_info_handler+0x9c>)
1000a1b4:	47a0      	blx	r4
		scan_param->dev_addr.addr[4],
		scan_param->dev_addr.addr[3],
		scan_param->dev_addr.addr[2],
		scan_param->dev_addr.addr[1],
		scan_param->dev_addr.addr[0]);
		scan_response_count++;
1000a1b6:	782b      	ldrb	r3, [r5, #0]
1000a1b8:	3301      	adds	r3, #1
1000a1ba:	b2db      	uxtb	r3, r3
1000a1bc:	702b      	strb	r3, [r5, #0]
		return AT_BLE_SUCCESS;
1000a1be:	2300      	movs	r3, #0
1000a1c0:	e011      	b.n	1000a1e6 <ble_scan_info_handler+0x7e>
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
1000a1c2:	480d      	ldr	r0, [pc, #52]	; (1000a1f8 <ble_scan_info_handler+0x90>)
1000a1c4:	4b0d      	ldr	r3, [pc, #52]	; (1000a1fc <ble_scan_info_handler+0x94>)
1000a1c6:	4798      	blx	r3
1000a1c8:	480f      	ldr	r0, [pc, #60]	; (1000a208 <ble_scan_info_handler+0xa0>)
1000a1ca:	4b0e      	ldr	r3, [pc, #56]	; (1000a204 <ble_scan_info_handler+0x9c>)
1000a1cc:	4798      	blx	r3
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
1000a1ce:	4b0f      	ldr	r3, [pc, #60]	; (1000a20c <ble_scan_info_handler+0xa4>)
1000a1d0:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
1000a1d2:	23e2      	movs	r3, #226	; 0xe2
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
1000a1d4:	2800      	cmp	r0, #0
1000a1d6:	d006      	beq.n	1000a1e6 <ble_scan_info_handler+0x7e>
		{
			DBG_LOG("Failed to stop scanning");
1000a1d8:	4807      	ldr	r0, [pc, #28]	; (1000a1f8 <ble_scan_info_handler+0x90>)
1000a1da:	4b08      	ldr	r3, [pc, #32]	; (1000a1fc <ble_scan_info_handler+0x94>)
1000a1dc:	4798      	blx	r3
1000a1de:	480c      	ldr	r0, [pc, #48]	; (1000a210 <ble_scan_info_handler+0xa8>)
1000a1e0:	4b08      	ldr	r3, [pc, #32]	; (1000a204 <ble_scan_info_handler+0x9c>)
1000a1e2:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
1000a1e4:	23e2      	movs	r3, #226	; 0xe2
	}
}
1000a1e6:	0018      	movs	r0, r3
1000a1e8:	b005      	add	sp, #20
1000a1ea:	bd30      	pop	{r4, r5, pc}
1000a1ec:	100121a0 	.word	0x100121a0
1000a1f0:	100137d8 	.word	0x100137d8
1000a1f4:	1000f6c3 	.word	0x1000f6c3
1000a1f8:	1001095c 	.word	0x1001095c
1000a1fc:	1000f805 	.word	0x1000f805
1000a200:	10010f28 	.word	0x10010f28
1000a204:	1000f6e5 	.word	0x1000f6e5
1000a208:	10010f64 	.word	0x10010f64
1000a20c:	1000c899 	.word	0x1000c899
1000a210:	10010f9c 	.word	0x10010f9c

1000a214 <ble_pair_done_handler>:
	return AT_BLE_SUCCESS;	
}

/** @brief function handles pair done event */
at_ble_status_t ble_pair_done_handler(void *params)
{
1000a214:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a216:	465f      	mov	r7, fp
1000a218:	4656      	mov	r6, sl
1000a21a:	464d      	mov	r5, r9
1000a21c:	4644      	mov	r4, r8
1000a21e:	b4f0      	push	{r4, r5, r6, r7}
1000a220:	b083      	sub	sp, #12
1000a222:	0005      	movs	r5, r0
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1000a224:	8841      	ldrh	r1, [r0, #2]
1000a226:	4b59      	ldr	r3, [pc, #356]	; (1000a38c <ble_pair_done_handler+0x178>)
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a228:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1000a22a:	891a      	ldrh	r2, [r3, #8]
1000a22c:	428a      	cmp	r2, r1
1000a22e:	d105      	bne.n	1000a23c <ble_pair_done_handler+0x28>
1000a230:	001a      	movs	r2, r3
1000a232:	325e      	adds	r2, #94	; 0x5e
1000a234:	7812      	ldrb	r2, [r2, #0]
1000a236:	2a03      	cmp	r2, #3
1000a238:	d100      	bne.n	1000a23c <ble_pair_done_handler+0x28>
1000a23a:	e09a      	b.n	1000a372 <ble_pair_done_handler+0x15e>
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a23c:	3401      	adds	r4, #1
1000a23e:	b2e4      	uxtb	r4, r4
1000a240:	337c      	adds	r3, #124	; 0x7c
1000a242:	2c05      	cmp	r4, #5
1000a244:	d1f1      	bne.n	1000a22a <ble_pair_done_handler+0x16>
1000a246:	e057      	b.n	1000a2f8 <ble_pair_done_handler+0xe4>
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
			
			DBG_LOG_DEV("LTK: ");
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
1000a248:	7821      	ldrb	r1, [r4, #0]
1000a24a:	0030      	movs	r0, r6
1000a24c:	47b8      	blx	r7
1000a24e:	3401      	adds	r4, #1
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
			
			DBG_LOG_DEV("LTK: ");
			for (idx = 0; idx < 16; idx++)
1000a250:	454c      	cmp	r4, r9
1000a252:	d1f9      	bne.n	1000a248 <ble_pair_done_handler+0x34>
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
				
			}
			DBG_LOG_DEV("CSRK: ");
1000a254:	484e      	ldr	r0, [pc, #312]	; (1000a390 <ble_pair_done_handler+0x17c>)
1000a256:	4b4f      	ldr	r3, [pc, #316]	; (1000a394 <ble_pair_done_handler+0x180>)
1000a258:	4798      	blx	r3
1000a25a:	484f      	ldr	r0, [pc, #316]	; (1000a398 <ble_pair_done_handler+0x184>)
1000a25c:	4b4f      	ldr	r3, [pc, #316]	; (1000a39c <ble_pair_done_handler+0x188>)
1000a25e:	4798      	blx	r3
1000a260:	002e      	movs	r6, r5
1000a262:	3622      	adds	r6, #34	; 0x22
1000a264:	002c      	movs	r4, r5
1000a266:	3432      	adds	r4, #50	; 0x32
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_csrk.key[idx]);
1000a268:	4f4c      	ldr	r7, [pc, #304]	; (1000a39c <ble_pair_done_handler+0x188>)
1000a26a:	7831      	ldrb	r1, [r6, #0]
1000a26c:	484c      	ldr	r0, [pc, #304]	; (1000a3a0 <ble_pair_done_handler+0x18c>)
1000a26e:	47b8      	blx	r7
1000a270:	3601      	adds	r6, #1
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
				
			}
			DBG_LOG_DEV("CSRK: ");
			for (idx = 0; idx < 16; idx++)
1000a272:	42a6      	cmp	r6, r4
1000a274:	d1f9      	bne.n	1000a26a <ble_pair_done_handler+0x56>
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_csrk.key[idx]);
				
			}
			DBG_LOG_DEV("IRK:");
1000a276:	4846      	ldr	r0, [pc, #280]	; (1000a390 <ble_pair_done_handler+0x17c>)
1000a278:	4b46      	ldr	r3, [pc, #280]	; (1000a394 <ble_pair_done_handler+0x180>)
1000a27a:	4798      	blx	r3
1000a27c:	4849      	ldr	r0, [pc, #292]	; (1000a3a4 <ble_pair_done_handler+0x190>)
1000a27e:	4b47      	ldr	r3, [pc, #284]	; (1000a39c <ble_pair_done_handler+0x188>)
1000a280:	4798      	blx	r3
1000a282:	3542      	adds	r5, #66	; 0x42
1000a284:	002f      	movs	r7, r5
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_irk.key[idx]);
1000a286:	4e46      	ldr	r6, [pc, #280]	; (1000a3a0 <ble_pair_done_handler+0x18c>)
1000a288:	4d44      	ldr	r5, [pc, #272]	; (1000a39c <ble_pair_done_handler+0x188>)
1000a28a:	7821      	ldrb	r1, [r4, #0]
1000a28c:	0030      	movs	r0, r6
1000a28e:	47a8      	blx	r5
1000a290:	3401      	adds	r4, #1
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_csrk.key[idx]);
				
			}
			DBG_LOG_DEV("IRK:");
			for (idx = 0; idx < 16; idx++)
1000a292:	42bc      	cmp	r4, r7
1000a294:	d1f9      	bne.n	1000a28a <ble_pair_done_handler+0x76>
1000a296:	e071      	b.n	1000a37c <ble_pair_done_handler+0x168>
			return AT_BLE_FAILURE;
		}		
	}
	else
	{
		if(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE && ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) {
1000a298:	0163      	lsls	r3, r4, #5
1000a29a:	1b1c      	subs	r4, r3, r4
1000a29c:	00a4      	lsls	r4, r4, #2
1000a29e:	4b3b      	ldr	r3, [pc, #236]	; (1000a38c <ble_pair_done_handler+0x178>)
1000a2a0:	191c      	adds	r4, r3, r4
1000a2a2:	345e      	adds	r4, #94	; 0x5e
1000a2a4:	7823      	ldrb	r3, [r4, #0]
1000a2a6:	2b01      	cmp	r3, #1
1000a2a8:	d915      	bls.n	1000a2d6 <ble_pair_done_handler+0xc2>
			DBG_LOG("Pairing failed...Disconnecting");
1000a2aa:	4839      	ldr	r0, [pc, #228]	; (1000a390 <ble_pair_done_handler+0x17c>)
1000a2ac:	4b39      	ldr	r3, [pc, #228]	; (1000a394 <ble_pair_done_handler+0x180>)
1000a2ae:	4798      	blx	r3
1000a2b0:	483d      	ldr	r0, [pc, #244]	; (1000a3a8 <ble_pair_done_handler+0x194>)
1000a2b2:	4b3a      	ldr	r3, [pc, #232]	; (1000a39c <ble_pair_done_handler+0x188>)
1000a2b4:	4798      	blx	r3
			if(!(at_ble_disconnect(pairing_params->handle, AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS))
1000a2b6:	8868      	ldrh	r0, [r5, #2]
1000a2b8:	2113      	movs	r1, #19
1000a2ba:	4b3c      	ldr	r3, [pc, #240]	; (1000a3ac <ble_pair_done_handler+0x198>)
1000a2bc:	4798      	blx	r3
1000a2be:	9001      	str	r0, [sp, #4]
1000a2c0:	2800      	cmp	r0, #0
1000a2c2:	d05b      	beq.n	1000a37c <ble_pair_done_handler+0x168>
			{
				DBG_LOG("Disconnect Request Failed");
1000a2c4:	4832      	ldr	r0, [pc, #200]	; (1000a390 <ble_pair_done_handler+0x17c>)
1000a2c6:	4b33      	ldr	r3, [pc, #204]	; (1000a394 <ble_pair_done_handler+0x180>)
1000a2c8:	4798      	blx	r3
1000a2ca:	4839      	ldr	r0, [pc, #228]	; (1000a3b0 <ble_pair_done_handler+0x19c>)
1000a2cc:	4b33      	ldr	r3, [pc, #204]	; (1000a39c <ble_pair_done_handler+0x188>)
1000a2ce:	4798      	blx	r3
				return AT_BLE_FAILURE;
1000a2d0:	23e2      	movs	r3, #226	; 0xe2
1000a2d2:	9301      	str	r3, [sp, #4]
1000a2d4:	e052      	b.n	1000a37c <ble_pair_done_handler+0x168>
			}
		}
	}
	return AT_BLE_SUCCESS;
1000a2d6:	2300      	movs	r3, #0
1000a2d8:	9301      	str	r3, [sp, #4]
1000a2da:	e04f      	b.n	1000a37c <ble_pair_done_handler+0x168>
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Pairing procedure completed successfully");
1000a2dc:	4e2c      	ldr	r6, [pc, #176]	; (1000a390 <ble_pair_done_handler+0x17c>)
1000a2de:	0030      	movs	r0, r6
1000a2e0:	4d2c      	ldr	r5, [pc, #176]	; (1000a394 <ble_pair_done_handler+0x180>)
1000a2e2:	47a8      	blx	r5
1000a2e4:	4833      	ldr	r0, [pc, #204]	; (1000a3b4 <ble_pair_done_handler+0x1a0>)
1000a2e6:	4c2d      	ldr	r4, [pc, #180]	; (1000a39c <ble_pair_done_handler+0x188>)
1000a2e8:	47a0      	blx	r4
				
			}
		}
		else
		{
			DBG_LOG("BLE Device not found to store the pairing info");
1000a2ea:	0030      	movs	r0, r6
1000a2ec:	47a8      	blx	r5
1000a2ee:	4832      	ldr	r0, [pc, #200]	; (1000a3b8 <ble_pair_done_handler+0x1a4>)
1000a2f0:	47a0      	blx	r4
			return AT_BLE_FAILURE;
1000a2f2:	23e2      	movs	r3, #226	; 0xe2
1000a2f4:	9301      	str	r3, [sp, #4]
1000a2f6:	e041      	b.n	1000a37c <ble_pair_done_handler+0x168>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
1000a2f8:	792b      	ldrb	r3, [r5, #4]
1000a2fa:	2b00      	cmp	r3, #0
1000a2fc:	d1cc      	bne.n	1000a298 <ble_pair_done_handler+0x84>
1000a2fe:	e7ed      	b.n	1000a2dc <ble_pair_done_handler+0xc8>
	{
		DBG_LOG("Pairing procedure completed successfully");
1000a300:	4823      	ldr	r0, [pc, #140]	; (1000a390 <ble_pair_done_handler+0x17c>)
1000a302:	4b24      	ldr	r3, [pc, #144]	; (1000a394 <ble_pair_done_handler+0x180>)
1000a304:	469b      	mov	fp, r3
1000a306:	4798      	blx	r3
1000a308:	482a      	ldr	r0, [pc, #168]	; (1000a3b4 <ble_pair_done_handler+0x1a0>)
1000a30a:	4b24      	ldr	r3, [pc, #144]	; (1000a39c <ble_pair_done_handler+0x188>)
1000a30c:	469a      	mov	sl, r3
1000a30e:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].bond_info.auth = pairing_params->auth;
1000a310:	782a      	ldrb	r2, [r5, #0]
1000a312:	4b1e      	ldr	r3, [pc, #120]	; (1000a38c <ble_pair_done_handler+0x178>)
1000a314:	4698      	mov	r8, r3
1000a316:	0167      	lsls	r7, r4, #5
1000a318:	1b3b      	subs	r3, r7, r4
1000a31a:	009b      	lsls	r3, r3, #2
1000a31c:	4443      	add	r3, r8
1000a31e:	751a      	strb	r2, [r3, #20]
			ble_dev_info[idx].bond_info.status = pairing_params->status;
1000a320:	792a      	ldrb	r2, [r5, #4]
1000a322:	761a      	strb	r2, [r3, #24]
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRED;
1000a324:	335e      	adds	r3, #94	; 0x5e
1000a326:	2205      	movs	r2, #5
1000a328:	701a      	strb	r2, [r3, #0]
			
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
1000a32a:	1b38      	subs	r0, r7, r4
1000a32c:	0080      	lsls	r0, r0, #2
1000a32e:	4440      	add	r0, r8
1000a330:	3036      	adds	r0, #54	; 0x36
1000a332:	320b      	adds	r2, #11
1000a334:	0029      	movs	r1, r5
1000a336:	3122      	adds	r1, #34	; 0x22
1000a338:	4b20      	ldr	r3, [pc, #128]	; (1000a3bc <ble_pair_done_handler+0x1a8>)
1000a33a:	4699      	mov	r9, r3
1000a33c:	4798      	blx	r3
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
1000a33e:	1b38      	subs	r0, r7, r4
1000a340:	0080      	lsls	r0, r0, #2
1000a342:	4440      	add	r0, r8
1000a344:	3046      	adds	r0, #70	; 0x46
1000a346:	2217      	movs	r2, #23
1000a348:	0029      	movs	r1, r5
1000a34a:	3132      	adds	r1, #50	; 0x32
1000a34c:	47c8      	blx	r9
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
1000a34e:	1b38      	subs	r0, r7, r4
1000a350:	0080      	lsls	r0, r0, #2
1000a352:	4440      	add	r0, r8
1000a354:	301a      	adds	r0, #26
1000a356:	1dac      	adds	r4, r5, #6
1000a358:	221c      	movs	r2, #28
1000a35a:	0021      	movs	r1, r4
1000a35c:	47c8      	blx	r9
			
			DBG_LOG_DEV("LTK: ");
1000a35e:	480c      	ldr	r0, [pc, #48]	; (1000a390 <ble_pair_done_handler+0x17c>)
1000a360:	47d8      	blx	fp
1000a362:	4817      	ldr	r0, [pc, #92]	; (1000a3c0 <ble_pair_done_handler+0x1ac>)
1000a364:	47d0      	blx	sl
1000a366:	2316      	movs	r3, #22
1000a368:	4699      	mov	r9, r3
1000a36a:	44a9      	add	r9, r5
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
1000a36c:	4e0c      	ldr	r6, [pc, #48]	; (1000a3a0 <ble_pair_done_handler+0x18c>)
1000a36e:	4f0b      	ldr	r7, [pc, #44]	; (1000a39c <ble_pair_done_handler+0x188>)
1000a370:	e76a      	b.n	1000a248 <ble_pair_done_handler+0x34>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
1000a372:	792b      	ldrb	r3, [r5, #4]
1000a374:	9301      	str	r3, [sp, #4]
1000a376:	2b00      	cmp	r3, #0
1000a378:	d0c2      	beq.n	1000a300 <ble_pair_done_handler+0xec>
1000a37a:	e78d      	b.n	1000a298 <ble_pair_done_handler+0x84>
				return AT_BLE_FAILURE;
			}
		}
	}
	return AT_BLE_SUCCESS;
}
1000a37c:	9801      	ldr	r0, [sp, #4]
1000a37e:	b003      	add	sp, #12
1000a380:	bc3c      	pop	{r2, r3, r4, r5}
1000a382:	4690      	mov	r8, r2
1000a384:	4699      	mov	r9, r3
1000a386:	46a2      	mov	sl, r4
1000a388:	46ab      	mov	fp, r5
1000a38a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a38c:	100134f4 	.word	0x100134f4
1000a390:	1001095c 	.word	0x1001095c
1000a394:	1000f805 	.word	0x1000f805
1000a398:	10010fc0 	.word	0x10010fc0
1000a39c:	1000f6e5 	.word	0x1000f6e5
1000a3a0:	10010fb4 	.word	0x10010fb4
1000a3a4:	10010fc8 	.word	0x10010fc8
1000a3a8:	10010fd0 	.word	0x10010fd0
1000a3ac:	1000c8b9 	.word	0x1000c8b9
1000a3b0:	10010ff0 	.word	0x10010ff0
1000a3b4:	1001100c 	.word	0x1001100c
1000a3b8:	10011038 	.word	0x10011038
1000a3bc:	1000f6c3 	.word	0x1000f6c3
1000a3c0:	10011068 	.word	0x10011068

1000a3c4 <ble_conn_param_update_req>:
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_conn_param_update_req(void *params)
{
1000a3c4:	b510      	push	{r4, lr}
	at_ble_conn_param_update_request_t * conn_param_req;
	conn_param_req = (at_ble_conn_param_update_request_t *)params;
	at_ble_conn_update_reply(conn_param_req->handle, true, 1, 120);
1000a3c6:	8800      	ldrh	r0, [r0, #0]
1000a3c8:	2378      	movs	r3, #120	; 0x78
1000a3ca:	2201      	movs	r2, #1
1000a3cc:	2101      	movs	r1, #1
1000a3ce:	4c02      	ldr	r4, [pc, #8]	; (1000a3d8 <ble_conn_param_update_req+0x14>)
1000a3d0:	47a0      	blx	r4
	return AT_BLE_SUCCESS;
}
1000a3d2:	2000      	movs	r0, #0
1000a3d4:	bd10      	pop	{r4, pc}
1000a3d6:	46c0      	nop			; (mov r8, r8)
1000a3d8:	1000c8d9 	.word	0x1000c8d9

1000a3dc <ble_slave_security_request_handler>:

at_ble_status_t ble_slave_security_request_handler(void* params)
{
1000a3dc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a3de:	4657      	mov	r7, sl
1000a3e0:	464e      	mov	r6, r9
1000a3e2:	4645      	mov	r5, r8
1000a3e4:	b4e0      	push	{r5, r6, r7}
1000a3e6:	b084      	sub	sp, #16
1000a3e8:	0004      	movs	r4, r0
	uint8_t i = 0, idx;
	at_ble_slave_sec_request_t* slave_sec_req;
	bool device_found = false;
	
	slave_sec_req = (at_ble_slave_sec_request_t*)params;	
	memset(&features, 0x00, sizeof(at_ble_pair_features_t));
1000a3ea:	2209      	movs	r2, #9
1000a3ec:	2100      	movs	r1, #0
1000a3ee:	a801      	add	r0, sp, #4
1000a3f0:	4b6a      	ldr	r3, [pc, #424]	; (1000a59c <ble_slave_security_request_handler+0x1c0>)
1000a3f2:	4798      	blx	r3
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000a3f4:	8825      	ldrh	r5, [r4, #0]
1000a3f6:	496a      	ldr	r1, [pc, #424]	; (1000a5a0 <ble_slave_security_request_handler+0x1c4>)
1000a3f8:	000a      	movs	r2, r1
1000a3fa:	2300      	movs	r3, #0
1000a3fc:	8910      	ldrh	r0, [r2, #8]
1000a3fe:	42a8      	cmp	r0, r5
1000a400:	d116      	bne.n	1000a430 <ble_slave_security_request_handler+0x54>
1000a402:	0010      	movs	r0, r2
1000a404:	305e      	adds	r0, #94	; 0x5e
1000a406:	7800      	ldrb	r0, [r0, #0]
1000a408:	2802      	cmp	r0, #2
1000a40a:	d111      	bne.n	1000a430 <ble_slave_security_request_handler+0x54>
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000a40c:	4864      	ldr	r0, [pc, #400]	; (1000a5a0 <ble_slave_security_request_handler+0x1c4>)
1000a40e:	015a      	lsls	r2, r3, #5
1000a410:	1ad6      	subs	r6, r2, r3
1000a412:	00b6      	lsls	r6, r6, #2
1000a414:	1986      	adds	r6, r0, r6
1000a416:	365e      	adds	r6, #94	; 0x5e
1000a418:	2206      	movs	r2, #6
1000a41a:	7032      	strb	r2, [r6, #0]
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
1000a41c:	32f9      	adds	r2, #249	; 0xf9
1000a41e:	4013      	ands	r3, r2
1000a420:	015a      	lsls	r2, r3, #5
1000a422:	1ad2      	subs	r2, r2, r3
1000a424:	0092      	lsls	r2, r2, #2
1000a426:	1882      	adds	r2, r0, r2
1000a428:	7d12      	ldrb	r2, [r2, #20]
1000a42a:	07d0      	lsls	r0, r2, #31
1000a42c:	d405      	bmi.n	1000a43a <ble_slave_security_request_handler+0x5e>
1000a42e:	e01b      	b.n	1000a468 <ble_slave_security_request_handler+0x8c>
1000a430:	3301      	adds	r3, #1
1000a432:	327c      	adds	r2, #124	; 0x7c
		//at_ble_disconnect(slave_sec_req->handle, AT_BLE_AUTH_FAILURE);		
		//return AT_BLE_FAILURE;
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a434:	2b05      	cmp	r3, #5
1000a436:	d1e1      	bne.n	1000a3fc <ble_slave_security_request_handler+0x20>
1000a438:	e01e      	b.n	1000a478 <ble_slave_security_request_handler+0x9c>
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
1000a43a:	78e0      	ldrb	r0, [r4, #3]
1000a43c:	2800      	cmp	r0, #0
1000a43e:	d013      	beq.n	1000a468 <ble_slave_security_request_handler+0x8c>
		{
			if(at_ble_encryption_start(slave_sec_req->handle, &ble_dev_info[idx].bond_info.peer_ltk, ble_dev_info[idx].bond_info.auth) == AT_BLE_SUCCESS)
1000a440:	0159      	lsls	r1, r3, #5
1000a442:	1ac9      	subs	r1, r1, r3
1000a444:	008b      	lsls	r3, r1, #2
1000a446:	4956      	ldr	r1, [pc, #344]	; (1000a5a0 <ble_slave_security_request_handler+0x1c4>)
1000a448:	18c9      	adds	r1, r1, r3
1000a44a:	311a      	adds	r1, #26
1000a44c:	8820      	ldrh	r0, [r4, #0]
1000a44e:	4b55      	ldr	r3, [pc, #340]	; (1000a5a4 <ble_slave_security_request_handler+0x1c8>)
1000a450:	4798      	blx	r3
1000a452:	2800      	cmp	r0, #0
1000a454:	d100      	bne.n	1000a458 <ble_slave_security_request_handler+0x7c>
1000a456:	e09b      	b.n	1000a590 <ble_slave_security_request_handler+0x1b4>
			{
				return  AT_BLE_SUCCESS;
			}
			else
			{
				DBG_LOG("Encryption Not started");
1000a458:	4853      	ldr	r0, [pc, #332]	; (1000a5a8 <ble_slave_security_request_handler+0x1cc>)
1000a45a:	4b54      	ldr	r3, [pc, #336]	; (1000a5ac <ble_slave_security_request_handler+0x1d0>)
1000a45c:	4798      	blx	r3
1000a45e:	4854      	ldr	r0, [pc, #336]	; (1000a5b0 <ble_slave_security_request_handler+0x1d4>)
1000a460:	4b54      	ldr	r3, [pc, #336]	; (1000a5b4 <ble_slave_security_request_handler+0x1d8>)
1000a462:	4798      	blx	r3
				return AT_BLE_FAILURE;
1000a464:	20e2      	movs	r0, #226	; 0xe2
1000a466:	e093      	b.n	1000a590 <ble_slave_security_request_handler+0x1b4>
			}			
		}
		else
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000a468:	015a      	lsls	r2, r3, #5
1000a46a:	1ad3      	subs	r3, r2, r3
1000a46c:	009b      	lsls	r3, r3, #2
1000a46e:	4a4c      	ldr	r2, [pc, #304]	; (1000a5a0 <ble_slave_security_request_handler+0x1c4>)
1000a470:	18d3      	adds	r3, r2, r3
1000a472:	335e      	adds	r3, #94	; 0x5e
1000a474:	2202      	movs	r2, #2
1000a476:	701a      	strb	r2, [r3, #0]
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000a478:	8825      	ldrh	r5, [r4, #0]
1000a47a:	2200      	movs	r2, #0
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a47c:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000a47e:	0016      	movs	r6, r2
1000a480:	8908      	ldrh	r0, [r1, #8]
1000a482:	42a8      	cmp	r0, r5
1000a484:	d10d      	bne.n	1000a4a2 <ble_slave_security_request_handler+0xc6>
1000a486:	0008      	movs	r0, r1
1000a488:	305e      	adds	r0, #94	; 0x5e
1000a48a:	7800      	ldrb	r0, [r0, #0]
1000a48c:	2802      	cmp	r0, #2
1000a48e:	d108      	bne.n	1000a4a2 <ble_slave_security_request_handler+0xc6>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000a490:	0152      	lsls	r2, r2, #5
1000a492:	1b92      	subs	r2, r2, r6
1000a494:	0096      	lsls	r6, r2, #2
1000a496:	4a42      	ldr	r2, [pc, #264]	; (1000a5a0 <ble_slave_security_request_handler+0x1c4>)
1000a498:	1992      	adds	r2, r2, r6
1000a49a:	325e      	adds	r2, #94	; 0x5e
1000a49c:	2103      	movs	r1, #3
1000a49e:	7011      	strb	r1, [r2, #0]
			break;
1000a4a0:	e005      	b.n	1000a4ae <ble_slave_security_request_handler+0xd2>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a4a2:	3301      	adds	r3, #1
1000a4a4:	b2db      	uxtb	r3, r3
1000a4a6:	3201      	adds	r2, #1
1000a4a8:	317c      	adds	r1, #124	; 0x7c
1000a4aa:	2b05      	cmp	r3, #5
1000a4ac:	d1e7      	bne.n	1000a47e <ble_slave_security_request_handler+0xa2>
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
	features.bond = slave_sec_req->bond;
1000a4ae:	aa01      	add	r2, sp, #4
1000a4b0:	78e1      	ldrb	r1, [r4, #3]
1000a4b2:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = true;
1000a4b4:	2101      	movs	r1, #1
1000a4b6:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = AT_BLE_IO_CAP_KB_DISPLAY;
1000a4b8:	3103      	adds	r1, #3
1000a4ba:	7011      	strb	r1, [r2, #0]

	features.oob_avaiable = false;
			
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000a4bc:	001f      	movs	r7, r3
1000a4be:	015a      	lsls	r2, r3, #5
1000a4c0:	1ad2      	subs	r2, r2, r3
1000a4c2:	0092      	lsls	r2, r2, #2
1000a4c4:	4936      	ldr	r1, [pc, #216]	; (1000a5a0 <ble_slave_security_request_handler+0x1c4>)
1000a4c6:	5c52      	ldrb	r2, [r2, r1]
1000a4c8:	2a02      	cmp	r2, #2
1000a4ca:	d104      	bne.n	1000a4d6 <ble_slave_security_request_handler+0xfa>
	{
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000a4cc:	aa01      	add	r2, sp, #4
1000a4ce:	2103      	movs	r1, #3
1000a4d0:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000a4d2:	71d1      	strb	r1, [r2, #7]
1000a4d4:	e003      	b.n	1000a4de <ble_slave_security_request_handler+0x102>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000a4d6:	aa01      	add	r2, sp, #4
1000a4d8:	2101      	movs	r1, #1
1000a4da:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000a4dc:	71d1      	strb	r1, [r2, #7]
	}
	features.max_key_size = 16;
1000a4de:	aa01      	add	r2, sp, #4
1000a4e0:	2110      	movs	r1, #16
1000a4e2:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
1000a4e4:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000a4e6:	017a      	lsls	r2, r7, #5
1000a4e8:	1bd2      	subs	r2, r2, r7
1000a4ea:	0092      	lsls	r2, r2, #2
1000a4ec:	492c      	ldr	r1, [pc, #176]	; (1000a5a0 <ble_slave_security_request_handler+0x1c4>)
1000a4ee:	188a      	adds	r2, r1, r2
1000a4f0:	7e12      	ldrb	r2, [r2, #24]
1000a4f2:	2a40      	cmp	r2, #64	; 0x40
1000a4f4:	d134      	bne.n	1000a560 <ble_slave_security_request_handler+0x184>
1000a4f6:	015a      	lsls	r2, r3, #5
1000a4f8:	1ad3      	subs	r3, r2, r3
1000a4fa:	009b      	lsls	r3, r3, #2
1000a4fc:	469a      	mov	sl, r3
1000a4fe:	001e      	movs	r6, r3
1000a500:	3660      	adds	r6, #96	; 0x60
1000a502:	1876      	adds	r6, r6, r1
1000a504:	4655      	mov	r5, sl
1000a506:	3568      	adds	r5, #104	; 0x68
1000a508:	186d      	adds	r5, r5, r1
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000a50a:	4b2b      	ldr	r3, [pc, #172]	; (1000a5b8 <ble_slave_security_request_handler+0x1dc>)
1000a50c:	4699      	mov	r9, r3
1000a50e:	230f      	movs	r3, #15
1000a510:	4698      	mov	r8, r3
1000a512:	47c8      	blx	r9
1000a514:	4643      	mov	r3, r8
1000a516:	4018      	ands	r0, r3
1000a518:	7030      	strb	r0, [r6, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000a51a:	47c8      	blx	r9
1000a51c:	4643      	mov	r3, r8
1000a51e:	4018      	ands	r0, r3
1000a520:	74b0      	strb	r0, [r6, #18]
1000a522:	3601      	adds	r6, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000a524:	42ae      	cmp	r6, r5
1000a526:	d1f4      	bne.n	1000a512 <ble_slave_security_request_handler+0x136>
1000a528:	4656      	mov	r6, sl
1000a52a:	3670      	adds	r6, #112	; 0x70
1000a52c:	4a1c      	ldr	r2, [pc, #112]	; (1000a5a0 <ble_slave_security_request_handler+0x1c4>)
1000a52e:	18b6      	adds	r6, r6, r2
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000a530:	4b21      	ldr	r3, [pc, #132]	; (1000a5b8 <ble_slave_security_request_handler+0x1dc>)
1000a532:	4699      	mov	r9, r3
1000a534:	230f      	movs	r3, #15
1000a536:	4698      	mov	r8, r3
1000a538:	47c8      	blx	r9
1000a53a:	4643      	mov	r3, r8
1000a53c:	4018      	ands	r0, r3
1000a53e:	7028      	strb	r0, [r5, #0]
1000a540:	3501      	adds	r5, #1
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000a542:	42b5      	cmp	r5, r6
1000a544:	d1f8      	bne.n	1000a538 <ble_slave_security_request_handler+0x15c>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000a546:	4b1c      	ldr	r3, [pc, #112]	; (1000a5b8 <ble_slave_security_request_handler+0x1dc>)
1000a548:	4798      	blx	r3
1000a54a:	017b      	lsls	r3, r7, #5
1000a54c:	1bdb      	subs	r3, r3, r7
1000a54e:	009b      	lsls	r3, r3, #2
1000a550:	4a13      	ldr	r2, [pc, #76]	; (1000a5a0 <ble_slave_security_request_handler+0x1c4>)
1000a552:	18d3      	adds	r3, r2, r3
1000a554:	001a      	movs	r2, r3
1000a556:	3270      	adds	r2, #112	; 0x70
1000a558:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000a55a:	337a      	adds	r3, #122	; 0x7a
1000a55c:	2210      	movs	r2, #16
1000a55e:	701a      	strb	r2, [r3, #0]
	{
		/* Bonding information already exists */
		
	}

	if(at_ble_authenticate(slave_sec_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000a560:	017a      	lsls	r2, r7, #5
1000a562:	1bd7      	subs	r7, r2, r7
1000a564:	00bf      	lsls	r7, r7, #2
1000a566:	3760      	adds	r7, #96	; 0x60
1000a568:	4a0d      	ldr	r2, [pc, #52]	; (1000a5a0 <ble_slave_security_request_handler+0x1c4>)
1000a56a:	18ba      	adds	r2, r7, r2
1000a56c:	8820      	ldrh	r0, [r4, #0]
1000a56e:	2300      	movs	r3, #0
1000a570:	a901      	add	r1, sp, #4
1000a572:	4c12      	ldr	r4, [pc, #72]	; (1000a5bc <ble_slave_security_request_handler+0x1e0>)
1000a574:	47a0      	blx	r4
1000a576:	2800      	cmp	r0, #0
1000a578:	d00a      	beq.n	1000a590 <ble_slave_security_request_handler+0x1b4>
	{
		features.bond = false;
1000a57a:	ab01      	add	r3, sp, #4
1000a57c:	2200      	movs	r2, #0
1000a57e:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000a580:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Slave Security Req - Authentication Failed");
1000a582:	4809      	ldr	r0, [pc, #36]	; (1000a5a8 <ble_slave_security_request_handler+0x1cc>)
1000a584:	4b09      	ldr	r3, [pc, #36]	; (1000a5ac <ble_slave_security_request_handler+0x1d0>)
1000a586:	4798      	blx	r3
1000a588:	480d      	ldr	r0, [pc, #52]	; (1000a5c0 <ble_slave_security_request_handler+0x1e4>)
1000a58a:	4b0a      	ldr	r3, [pc, #40]	; (1000a5b4 <ble_slave_security_request_handler+0x1d8>)
1000a58c:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000a58e:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000a590:	b004      	add	sp, #16
1000a592:	bc1c      	pop	{r2, r3, r4}
1000a594:	4690      	mov	r8, r2
1000a596:	4699      	mov	r9, r3
1000a598:	46a2      	mov	sl, r4
1000a59a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a59c:	1000f6d5 	.word	0x1000f6d5
1000a5a0:	100134f4 	.word	0x100134f4
1000a5a4:	1000ce11 	.word	0x1000ce11
1000a5a8:	1001095c 	.word	0x1001095c
1000a5ac:	1000f805 	.word	0x1000f805
1000a5b0:	10011070 	.word	0x10011070
1000a5b4:	1000f6e5 	.word	0x1000f6e5
1000a5b8:	1000f819 	.word	0x1000f819
1000a5bc:	1000cc25 	.word	0x1000cc25
1000a5c0:	10011088 	.word	0x10011088

1000a5c4 <ble_pair_request_handler>:

/** @brief function handles pair request */
at_ble_status_t ble_pair_request_handler(void *params)
{
1000a5c4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a5c6:	465f      	mov	r7, fp
1000a5c8:	4656      	mov	r6, sl
1000a5ca:	464d      	mov	r5, r9
1000a5cc:	4644      	mov	r4, r8
1000a5ce:	b4f0      	push	{r4, r5, r6, r7}
1000a5d0:	b085      	sub	sp, #20
1000a5d2:	4680      	mov	r8, r0
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000a5d4:	8804      	ldrh	r4, [r0, #0]
1000a5d6:	4a54      	ldr	r2, [pc, #336]	; (1000a728 <ble_pair_request_handler+0x164>)
1000a5d8:	2100      	movs	r1, #0
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a5da:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000a5dc:	8910      	ldrh	r0, [r2, #8]
1000a5de:	42a0      	cmp	r0, r4
1000a5e0:	d10d      	bne.n	1000a5fe <ble_pair_request_handler+0x3a>
1000a5e2:	0010      	movs	r0, r2
1000a5e4:	305e      	adds	r0, #94	; 0x5e
1000a5e6:	7800      	ldrb	r0, [r0, #0]
1000a5e8:	2802      	cmp	r0, #2
1000a5ea:	d108      	bne.n	1000a5fe <ble_pair_request_handler+0x3a>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000a5ec:	014a      	lsls	r2, r1, #5
1000a5ee:	1a52      	subs	r2, r2, r1
1000a5f0:	0095      	lsls	r5, r2, #2
1000a5f2:	4a4d      	ldr	r2, [pc, #308]	; (1000a728 <ble_pair_request_handler+0x164>)
1000a5f4:	1952      	adds	r2, r2, r5
1000a5f6:	325e      	adds	r2, #94	; 0x5e
1000a5f8:	2103      	movs	r1, #3
1000a5fa:	7011      	strb	r1, [r2, #0]
			break;
1000a5fc:	e005      	b.n	1000a60a <ble_pair_request_handler+0x46>
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a5fe:	3301      	adds	r3, #1
1000a600:	b2db      	uxtb	r3, r3
1000a602:	3101      	adds	r1, #1
1000a604:	327c      	adds	r2, #124	; 0x7c
1000a606:	2b05      	cmp	r3, #5
1000a608:	d1e8      	bne.n	1000a5dc <ble_pair_request_handler+0x18>
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
1000a60a:	aa01      	add	r2, sp, #4
1000a60c:	2100      	movs	r1, #0
1000a60e:	7211      	strb	r1, [r2, #8]
	features.bond = BLE_BOND_REQ;
1000a610:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = BLE_MITM_REQ;
1000a612:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = BLE_IO_CAPABALITIES;
1000a614:	2003      	movs	r0, #3
1000a616:	7010      	strb	r0, [r2, #0]
	features.oob_avaiable = BLE_OOB_REQ;
1000a618:	70d1      	strb	r1, [r2, #3]
	
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000a61a:	001e      	movs	r6, r3
1000a61c:	015a      	lsls	r2, r3, #5
1000a61e:	1ad2      	subs	r2, r2, r3
1000a620:	0092      	lsls	r2, r2, #2
1000a622:	4941      	ldr	r1, [pc, #260]	; (1000a728 <ble_pair_request_handler+0x164>)
1000a624:	5c52      	ldrb	r2, [r2, r1]
1000a626:	2a02      	cmp	r2, #2
1000a628:	d104      	bne.n	1000a634 <ble_pair_request_handler+0x70>
	{
		/* Distribution of IRK is required */
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000a62a:	aa01      	add	r2, sp, #4
1000a62c:	2103      	movs	r1, #3
1000a62e:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000a630:	71d1      	strb	r1, [r2, #7]
1000a632:	e003      	b.n	1000a63c <ble_pair_request_handler+0x78>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000a634:	aa01      	add	r2, sp, #4
1000a636:	2101      	movs	r1, #1
1000a638:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000a63a:	71d1      	strb	r1, [r2, #7]
	}
			
	features.max_key_size = 16;
1000a63c:	aa01      	add	r2, sp, #4
1000a63e:	2110      	movs	r1, #16
1000a640:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
1000a642:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000a644:	0172      	lsls	r2, r6, #5
1000a646:	1b92      	subs	r2, r2, r6
1000a648:	0092      	lsls	r2, r2, #2
1000a64a:	4937      	ldr	r1, [pc, #220]	; (1000a728 <ble_pair_request_handler+0x164>)
1000a64c:	188a      	adds	r2, r1, r2
1000a64e:	7e12      	ldrb	r2, [r2, #24]
1000a650:	2a40      	cmp	r2, #64	; 0x40
1000a652:	d142      	bne.n	1000a6da <ble_pair_request_handler+0x116>
1000a654:	015f      	lsls	r7, r3, #5
1000a656:	1afb      	subs	r3, r7, r3
1000a658:	009b      	lsls	r3, r3, #2
1000a65a:	469b      	mov	fp, r3
1000a65c:	001c      	movs	r4, r3
1000a65e:	3460      	adds	r4, #96	; 0x60
1000a660:	1864      	adds	r4, r4, r1
1000a662:	465d      	mov	r5, fp
1000a664:	3568      	adds	r5, #104	; 0x68
1000a666:	186d      	adds	r5, r5, r1
1000a668:	0027      	movs	r7, r4
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000a66a:	4b30      	ldr	r3, [pc, #192]	; (1000a72c <ble_pair_request_handler+0x168>)
1000a66c:	469a      	mov	sl, r3
1000a66e:	230f      	movs	r3, #15
1000a670:	4699      	mov	r9, r3
1000a672:	47d0      	blx	sl
1000a674:	464b      	mov	r3, r9
1000a676:	4018      	ands	r0, r3
1000a678:	7038      	strb	r0, [r7, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000a67a:	47d0      	blx	sl
1000a67c:	464b      	mov	r3, r9
1000a67e:	4018      	ands	r0, r3
1000a680:	74b8      	strb	r0, [r7, #18]
1000a682:	3701      	adds	r7, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000a684:	42af      	cmp	r7, r5
1000a686:	d1f4      	bne.n	1000a672 <ble_pair_request_handler+0xae>
1000a688:	465b      	mov	r3, fp
1000a68a:	3370      	adds	r3, #112	; 0x70
1000a68c:	4f26      	ldr	r7, [pc, #152]	; (1000a728 <ble_pair_request_handler+0x164>)
1000a68e:	19df      	adds	r7, r3, r7
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000a690:	4b26      	ldr	r3, [pc, #152]	; (1000a72c <ble_pair_request_handler+0x168>)
1000a692:	469a      	mov	sl, r3
1000a694:	230f      	movs	r3, #15
1000a696:	4699      	mov	r9, r3
1000a698:	47d0      	blx	sl
1000a69a:	464b      	mov	r3, r9
1000a69c:	4018      	ands	r0, r3
1000a69e:	7028      	strb	r0, [r5, #0]
1000a6a0:	3501      	adds	r5, #1
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000a6a2:	42bd      	cmp	r5, r7
1000a6a4:	d1f8      	bne.n	1000a698 <ble_pair_request_handler+0xd4>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		DBG_LOG_DEV("Generated LTK: ");
1000a6a6:	4822      	ldr	r0, [pc, #136]	; (1000a730 <ble_pair_request_handler+0x16c>)
1000a6a8:	4b22      	ldr	r3, [pc, #136]	; (1000a734 <ble_pair_request_handler+0x170>)
1000a6aa:	4798      	blx	r3
1000a6ac:	4822      	ldr	r0, [pc, #136]	; (1000a738 <ble_pair_request_handler+0x174>)
1000a6ae:	4b23      	ldr	r3, [pc, #140]	; (1000a73c <ble_pair_request_handler+0x178>)
1000a6b0:	4798      	blx	r3
		for (i = 0; i < 16; i++)
		{
			DBG_LOG_CONT_DEV("0x%02X ", ble_dev_info[idx].host_ltk.key[i]);
1000a6b2:	4d22      	ldr	r5, [pc, #136]	; (1000a73c <ble_pair_request_handler+0x178>)
1000a6b4:	7821      	ldrb	r1, [r4, #0]
1000a6b6:	4822      	ldr	r0, [pc, #136]	; (1000a740 <ble_pair_request_handler+0x17c>)
1000a6b8:	47a8      	blx	r5
1000a6ba:	3401      	adds	r4, #1
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		DBG_LOG_DEV("Generated LTK: ");
		for (i = 0; i < 16; i++)
1000a6bc:	42bc      	cmp	r4, r7
1000a6be:	d1f9      	bne.n	1000a6b4 <ble_pair_request_handler+0xf0>
		{
			DBG_LOG_CONT_DEV("0x%02X ", ble_dev_info[idx].host_ltk.key[i]);
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000a6c0:	4b1a      	ldr	r3, [pc, #104]	; (1000a72c <ble_pair_request_handler+0x168>)
1000a6c2:	4798      	blx	r3
1000a6c4:	0173      	lsls	r3, r6, #5
1000a6c6:	1b9b      	subs	r3, r3, r6
1000a6c8:	009b      	lsls	r3, r3, #2
1000a6ca:	4a17      	ldr	r2, [pc, #92]	; (1000a728 <ble_pair_request_handler+0x164>)
1000a6cc:	18d3      	adds	r3, r2, r3
1000a6ce:	001a      	movs	r2, r3
1000a6d0:	3270      	adds	r2, #112	; 0x70
1000a6d2:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000a6d4:	337a      	adds	r3, #122	; 0x7a
1000a6d6:	2210      	movs	r2, #16
1000a6d8:	701a      	strb	r2, [r3, #0]
		/* Bonding information already exists */
		
	}

	/* Send pairing response */
	DBG_LOG_DEV("Sending pairing response");
1000a6da:	4815      	ldr	r0, [pc, #84]	; (1000a730 <ble_pair_request_handler+0x16c>)
1000a6dc:	4b15      	ldr	r3, [pc, #84]	; (1000a734 <ble_pair_request_handler+0x170>)
1000a6de:	4798      	blx	r3
1000a6e0:	4818      	ldr	r0, [pc, #96]	; (1000a744 <ble_pair_request_handler+0x180>)
1000a6e2:	4b16      	ldr	r3, [pc, #88]	; (1000a73c <ble_pair_request_handler+0x178>)
1000a6e4:	4798      	blx	r3

	if(at_ble_authenticate(pair_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000a6e6:	0173      	lsls	r3, r6, #5
1000a6e8:	1b9b      	subs	r3, r3, r6
1000a6ea:	009b      	lsls	r3, r3, #2
1000a6ec:	3360      	adds	r3, #96	; 0x60
1000a6ee:	4a0e      	ldr	r2, [pc, #56]	; (1000a728 <ble_pair_request_handler+0x164>)
1000a6f0:	189a      	adds	r2, r3, r2
1000a6f2:	4643      	mov	r3, r8
1000a6f4:	8818      	ldrh	r0, [r3, #0]
1000a6f6:	2300      	movs	r3, #0
1000a6f8:	a901      	add	r1, sp, #4
1000a6fa:	4c13      	ldr	r4, [pc, #76]	; (1000a748 <ble_pair_request_handler+0x184>)
1000a6fc:	47a0      	blx	r4
1000a6fe:	2800      	cmp	r0, #0
1000a700:	d00a      	beq.n	1000a718 <ble_pair_request_handler+0x154>
	{
		features.bond = false;
1000a702:	ab01      	add	r3, sp, #4
1000a704:	2200      	movs	r2, #0
1000a706:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000a708:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Pair Request - Authentication Failed");
1000a70a:	4809      	ldr	r0, [pc, #36]	; (1000a730 <ble_pair_request_handler+0x16c>)
1000a70c:	4b09      	ldr	r3, [pc, #36]	; (1000a734 <ble_pair_request_handler+0x170>)
1000a70e:	4798      	blx	r3
1000a710:	480e      	ldr	r0, [pc, #56]	; (1000a74c <ble_pair_request_handler+0x188>)
1000a712:	4b0a      	ldr	r3, [pc, #40]	; (1000a73c <ble_pair_request_handler+0x178>)
1000a714:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000a716:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000a718:	b005      	add	sp, #20
1000a71a:	bc3c      	pop	{r2, r3, r4, r5}
1000a71c:	4690      	mov	r8, r2
1000a71e:	4699      	mov	r9, r3
1000a720:	46a2      	mov	sl, r4
1000a722:	46ab      	mov	fp, r5
1000a724:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a726:	46c0      	nop			; (mov r8, r8)
1000a728:	100134f4 	.word	0x100134f4
1000a72c:	1000f819 	.word	0x1000f819
1000a730:	1001095c 	.word	0x1001095c
1000a734:	1000f805 	.word	0x1000f805
1000a738:	100110b4 	.word	0x100110b4
1000a73c:	1000f6e5 	.word	0x1000f6e5
1000a740:	100110c4 	.word	0x100110c4
1000a744:	100110cc 	.word	0x100110cc
1000a748:	1000cc25 	.word	0x1000cc25
1000a74c:	100110e8 	.word	0x100110e8

1000a750 <ble_pair_key_request_handler>:

/** @brief function handles pair key request */
at_ble_status_t ble_pair_key_request_handler (void *params)
{
1000a750:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a752:	b085      	sub	sp, #20
1000a754:	0005      	movs	r5, r0
	at_ble_pair_key_request_t *pair_key;
	pair_key = (at_ble_pair_key_request_t *)params;
	/* Passkey has fixed value in this example MSB */
	uint8_t passkey[6]={'1','2','3','4','5','6'};
1000a756:	2206      	movs	r2, #6
1000a758:	493d      	ldr	r1, [pc, #244]	; (1000a850 <ble_pair_key_request_handler+0x100>)
1000a75a:	a802      	add	r0, sp, #8
1000a75c:	4e3d      	ldr	r6, [pc, #244]	; (1000a854 <ble_pair_key_request_handler+0x104>)
1000a75e:	47b0      	blx	r6
	uint8_t idx = 0;
        uint8_t pin;
        
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
1000a760:	ac01      	add	r4, sp, #4
1000a762:	2204      	movs	r2, #4
1000a764:	0029      	movs	r1, r5
1000a766:	0020      	movs	r0, r4
1000a768:	47b0      	blx	r6
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
1000a76a:	78e3      	ldrb	r3, [r4, #3]
1000a76c:	2b00      	cmp	r3, #0
1000a76e:	d162      	bne.n	1000a836 <ble_pair_key_request_handler+0xe6>
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000a770:	4839      	ldr	r0, [pc, #228]	; (1000a858 <ble_pair_key_request_handler+0x108>)
1000a772:	4b3a      	ldr	r3, [pc, #232]	; (1000a85c <ble_pair_key_request_handler+0x10c>)
1000a774:	4798      	blx	r3
1000a776:	483a      	ldr	r0, [pc, #232]	; (1000a860 <ble_pair_key_request_handler+0x110>)
1000a778:	4b3a      	ldr	r3, [pc, #232]	; (1000a864 <ble_pair_key_request_handler+0x114>)
1000a77a:	4798      	blx	r3
1000a77c:	2600      	movs	r6, #0
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000a77e:	4c3a      	ldr	r4, [pc, #232]	; (1000a868 <ble_pair_key_request_handler+0x118>)
				return AT_BLE_FAILURE;
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
			  passkey[idx++] = pin;
			  DBG_LOG_CONT("%c", pin);
1000a780:	27ff      	movs	r7, #255	; 0xff
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000a782:	201e      	movs	r0, #30
1000a784:	47a0      	blx	r4
1000a786:	b2c3      	uxtb	r3, r0

			if (!pin) {
1000a788:	2b00      	cmp	r3, #0
1000a78a:	d11a      	bne.n	1000a7c2 <ble_pair_key_request_handler+0x72>
			DBG_LOG("Pin Timeout");
1000a78c:	4f32      	ldr	r7, [pc, #200]	; (1000a858 <ble_pair_key_request_handler+0x108>)
1000a78e:	0038      	movs	r0, r7
1000a790:	4e32      	ldr	r6, [pc, #200]	; (1000a85c <ble_pair_key_request_handler+0x10c>)
1000a792:	47b0      	blx	r6
1000a794:	4835      	ldr	r0, [pc, #212]	; (1000a86c <ble_pair_key_request_handler+0x11c>)
1000a796:	4c33      	ldr	r4, [pc, #204]	; (1000a864 <ble_pair_key_request_handler+0x114>)
1000a798:	47a0      	blx	r4
				DBG_LOG("Disconnecting ...");
1000a79a:	0038      	movs	r0, r7
1000a79c:	47b0      	blx	r6
1000a79e:	4834      	ldr	r0, [pc, #208]	; (1000a870 <ble_pair_key_request_handler+0x120>)
1000a7a0:	47a0      	blx	r4
				if (!(at_ble_disconnect(pair_key->handle,
1000a7a2:	8828      	ldrh	r0, [r5, #0]
1000a7a4:	2113      	movs	r1, #19
1000a7a6:	4b33      	ldr	r3, [pc, #204]	; (1000a874 <ble_pair_key_request_handler+0x124>)
1000a7a8:	4798      	blx	r3
1000a7aa:	0003      	movs	r3, r0
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
				}
				return AT_BLE_FAILURE;
1000a7ac:	20e2      	movs	r0, #226	; 0xe2
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);

			if (!pin) {
			DBG_LOG("Pin Timeout");
				DBG_LOG("Disconnecting ...");
				if (!(at_ble_disconnect(pair_key->handle,
1000a7ae:	2b00      	cmp	r3, #0
1000a7b0:	d04c      	beq.n	1000a84c <ble_pair_key_request_handler+0xfc>
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
1000a7b2:	4829      	ldr	r0, [pc, #164]	; (1000a858 <ble_pair_key_request_handler+0x108>)
1000a7b4:	4b29      	ldr	r3, [pc, #164]	; (1000a85c <ble_pair_key_request_handler+0x10c>)
1000a7b6:	4798      	blx	r3
1000a7b8:	482f      	ldr	r0, [pc, #188]	; (1000a878 <ble_pair_key_request_handler+0x128>)
1000a7ba:	4b2a      	ldr	r3, [pc, #168]	; (1000a864 <ble_pair_key_request_handler+0x114>)
1000a7bc:	4798      	blx	r3
				}
				return AT_BLE_FAILURE;
1000a7be:	20e2      	movs	r0, #226	; 0xe2
1000a7c0:	e044      	b.n	1000a84c <ble_pair_key_request_handler+0xfc>
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
1000a7c2:	001a      	movs	r2, r3
1000a7c4:	3a30      	subs	r2, #48	; 0x30
1000a7c6:	2a09      	cmp	r2, #9
1000a7c8:	d8db      	bhi.n	1000a782 <ble_pair_key_request_handler+0x32>
			  passkey[idx++] = pin;
1000a7ca:	aa02      	add	r2, sp, #8
1000a7cc:	54b3      	strb	r3, [r6, r2]
			  DBG_LOG_CONT("%c", pin);
1000a7ce:	4038      	ands	r0, r7
1000a7d0:	4b2a      	ldr	r3, [pc, #168]	; (1000a87c <ble_pair_key_request_handler+0x12c>)
1000a7d2:	4798      	blx	r3
1000a7d4:	3601      	adds	r6, #1
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
1000a7d6:	2e06      	cmp	r6, #6
1000a7d8:	d026      	beq.n	1000a828 <ble_pair_key_request_handler+0xd8>
1000a7da:	e7d2      	b.n	1000a782 <ble_pair_key_request_handler+0x32>
          {
            DBG_LOG("Entered Pass-code:");
          }
          else
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
1000a7dc:	481e      	ldr	r0, [pc, #120]	; (1000a858 <ble_pair_key_request_handler+0x108>)
1000a7de:	4b1f      	ldr	r3, [pc, #124]	; (1000a85c <ble_pair_key_request_handler+0x10c>)
1000a7e0:	4798      	blx	r3
1000a7e2:	4827      	ldr	r0, [pc, #156]	; (1000a880 <ble_pair_key_request_handler+0x130>)
1000a7e4:	4b1f      	ldr	r3, [pc, #124]	; (1000a864 <ble_pair_key_request_handler+0x114>)
1000a7e6:	4798      	blx	r3
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000a7e8:	2400      	movs	r4, #0
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
1000a7ea:	4e24      	ldr	r6, [pc, #144]	; (1000a87c <ble_pair_key_request_handler+0x12c>)
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
1000a7ec:	ab02      	add	r3, sp, #8
                  DBG_LOG_CONT("%c",passkey[idx]);
1000a7ee:	5ce0      	ldrb	r0, [r4, r3]
1000a7f0:	47b0      	blx	r6
1000a7f2:	3401      	adds	r4, #1
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
1000a7f4:	2c06      	cmp	r4, #6
1000a7f6:	d1f9      	bne.n	1000a7ec <ble_pair_key_request_handler+0x9c>
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
          }		
          
          if(!((at_ble_pair_key_reply(pair_key->handle, pair_key_request.type, passkey)) == AT_BLE_SUCCESS))
1000a7f8:	ab01      	add	r3, sp, #4
1000a7fa:	7899      	ldrb	r1, [r3, #2]
1000a7fc:	8828      	ldrh	r0, [r5, #0]
1000a7fe:	aa02      	add	r2, sp, #8
1000a800:	4b20      	ldr	r3, [pc, #128]	; (1000a884 <ble_pair_key_request_handler+0x134>)
1000a802:	4798      	blx	r3
1000a804:	2800      	cmp	r0, #0
1000a806:	d021      	beq.n	1000a84c <ble_pair_key_request_handler+0xfc>
          {
                  DBG_LOG("Pair-key reply failed");
1000a808:	4813      	ldr	r0, [pc, #76]	; (1000a858 <ble_pair_key_request_handler+0x108>)
1000a80a:	4b14      	ldr	r3, [pc, #80]	; (1000a85c <ble_pair_key_request_handler+0x10c>)
1000a80c:	4798      	blx	r3
1000a80e:	481e      	ldr	r0, [pc, #120]	; (1000a888 <ble_pair_key_request_handler+0x138>)
1000a810:	4b14      	ldr	r3, [pc, #80]	; (1000a864 <ble_pair_key_request_handler+0x114>)
1000a812:	4798      	blx	r3
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000a814:	2000      	movs	r0, #0
1000a816:	e019      	b.n	1000a84c <ble_pair_key_request_handler+0xfc>
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
1000a818:	480f      	ldr	r0, [pc, #60]	; (1000a858 <ble_pair_key_request_handler+0x108>)
1000a81a:	4b10      	ldr	r3, [pc, #64]	; (1000a85c <ble_pair_key_request_handler+0x10c>)
1000a81c:	4798      	blx	r3
1000a81e:	481b      	ldr	r0, [pc, #108]	; (1000a88c <ble_pair_key_request_handler+0x13c>)
1000a820:	4b10      	ldr	r3, [pc, #64]	; (1000a864 <ble_pair_key_request_handler+0x114>)
1000a822:	4798      	blx	r3
		}
	}
	return AT_BLE_SUCCESS;	
1000a824:	2000      	movs	r0, #0
1000a826:	e011      	b.n	1000a84c <ble_pair_key_request_handler+0xfc>
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
	   (pair_key_request.type == AT_BLE_PAIR_PASSKEY)) || (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY))
	{
          if(pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY)
          {
            DBG_LOG("Entered Pass-code:");
1000a828:	480b      	ldr	r0, [pc, #44]	; (1000a858 <ble_pair_key_request_handler+0x108>)
1000a82a:	4b0c      	ldr	r3, [pc, #48]	; (1000a85c <ble_pair_key_request_handler+0x10c>)
1000a82c:	4798      	blx	r3
1000a82e:	4818      	ldr	r0, [pc, #96]	; (1000a890 <ble_pair_key_request_handler+0x140>)
1000a830:	4b0c      	ldr	r3, [pc, #48]	; (1000a864 <ble_pair_key_request_handler+0x114>)
1000a832:	4798      	blx	r3
1000a834:	e7d8      	b.n	1000a7e8 <ble_pair_key_request_handler+0x98>
			} 
	  }
	}	
	
	/* Display passkey */
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
1000a836:	ab01      	add	r3, sp, #4
1000a838:	885a      	ldrh	r2, [r3, #2]
1000a83a:	2380      	movs	r3, #128	; 0x80
1000a83c:	005b      	lsls	r3, r3, #1
1000a83e:	429a      	cmp	r2, r3
1000a840:	d0cc      	beq.n	1000a7dc <ble_pair_key_request_handler+0x8c>
                  DBG_LOG("Pair-key reply failed");
          }
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
1000a842:	ab01      	add	r3, sp, #4
1000a844:	789b      	ldrb	r3, [r3, #2]
1000a846:	2b01      	cmp	r3, #1
1000a848:	d0e6      	beq.n	1000a818 <ble_pair_key_request_handler+0xc8>
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000a84a:	2000      	movs	r0, #0
}
1000a84c:	b005      	add	sp, #20
1000a84e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a850:	10010cd8 	.word	0x10010cd8
1000a854:	1000f6c3 	.word	0x1000f6c3
1000a858:	1001095c 	.word	0x1001095c
1000a85c:	1000f805 	.word	0x1000f805
1000a860:	10011110 	.word	0x10011110
1000a864:	1000f6e5 	.word	0x1000f6e5
1000a868:	1000b305 	.word	0x1000b305
1000a86c:	10011138 	.word	0x10011138
1000a870:	10011144 	.word	0x10011144
1000a874:	1000c8b9 	.word	0x1000c8b9
1000a878:	10010ff0 	.word	0x10010ff0
1000a87c:	1000f719 	.word	0x1000f719
1000a880:	10011158 	.word	0x10011158
1000a884:	1000cd55 	.word	0x1000cd55
1000a888:	10011190 	.word	0x10011190
1000a88c:	100111a8 	.word	0x100111a8
1000a890:	100111c4 	.word	0x100111c4

1000a894 <ble_encryption_request_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption requests */
at_ble_status_t ble_encryption_request_handler(void *params)
{
1000a894:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a896:	465f      	mov	r7, fp
1000a898:	4656      	mov	r6, sl
1000a89a:	464d      	mov	r5, r9
1000a89c:	b4e0      	push	{r5, r6, r7}
1000a89e:	0006      	movs	r6, r0
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000a8a0:	8800      	ldrh	r0, [r0, #0]
1000a8a2:	4b49      	ldr	r3, [pc, #292]	; (1000a9c8 <ble_encryption_request_handler+0x134>)
1000a8a4:	2200      	movs	r2, #0
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a8a6:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000a8a8:	8919      	ldrh	r1, [r3, #8]
1000a8aa:	4281      	cmp	r1, r0
1000a8ac:	d137      	bne.n	1000a91e <ble_encryption_request_handler+0x8a>
1000a8ae:	0019      	movs	r1, r3
1000a8b0:	315e      	adds	r1, #94	; 0x5e
1000a8b2:	7809      	ldrb	r1, [r1, #0]
1000a8b4:	2901      	cmp	r1, #1
1000a8b6:	d932      	bls.n	1000a91e <ble_encryption_request_handler+0x8a>
		(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE))
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000a8b8:	4f43      	ldr	r7, [pc, #268]	; (1000a9c8 <ble_encryption_request_handler+0x134>)
1000a8ba:	0153      	lsls	r3, r2, #5
1000a8bc:	1a9d      	subs	r5, r3, r2
1000a8be:	00ad      	lsls	r5, r5, #2
1000a8c0:	197d      	adds	r5, r7, r5
1000a8c2:	355e      	adds	r5, #94	; 0x5e
1000a8c4:	2306      	movs	r3, #6
1000a8c6:	702b      	strb	r3, [r5, #0]
			DBG_LOG_DEV("ENC-Req: Conn Handle Device Found:hdl:%d", enc_req->handle);
1000a8c8:	4840      	ldr	r0, [pc, #256]	; (1000a9cc <ble_encryption_request_handler+0x138>)
1000a8ca:	4b41      	ldr	r3, [pc, #260]	; (1000a9d0 <ble_encryption_request_handler+0x13c>)
1000a8cc:	469a      	mov	sl, r3
1000a8ce:	4798      	blx	r3
1000a8d0:	8831      	ldrh	r1, [r6, #0]
1000a8d2:	4840      	ldr	r0, [pc, #256]	; (1000a9d4 <ble_encryption_request_handler+0x140>)
1000a8d4:	4b40      	ldr	r3, [pc, #256]	; (1000a9d8 <ble_encryption_request_handler+0x144>)
1000a8d6:	4699      	mov	r9, r3
1000a8d8:	4798      	blx	r3
		}
	}
	
	if (device_found)
	{
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
1000a8da:	483c      	ldr	r0, [pc, #240]	; (1000a9cc <ble_encryption_request_handler+0x138>)
1000a8dc:	47d0      	blx	sl
1000a8de:	0163      	lsls	r3, r4, #5
1000a8e0:	1b1b      	subs	r3, r3, r4
1000a8e2:	009b      	lsls	r3, r3, #2
1000a8e4:	18ff      	adds	r7, r7, r3
1000a8e6:	2370      	movs	r3, #112	; 0x70
1000a8e8:	469b      	mov	fp, r3
1000a8ea:	44bb      	add	fp, r7
1000a8ec:	465b      	mov	r3, fp
1000a8ee:	8819      	ldrh	r1, [r3, #0]
1000a8f0:	483a      	ldr	r0, [pc, #232]	; (1000a9dc <ble_encryption_request_handler+0x148>)
1000a8f2:	47c8      	blx	r9
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
1000a8f4:	4835      	ldr	r0, [pc, #212]	; (1000a9cc <ble_encryption_request_handler+0x138>)
1000a8f6:	47d0      	blx	sl
1000a8f8:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
1000a8fa:	4839      	ldr	r0, [pc, #228]	; (1000a9e0 <ble_encryption_request_handler+0x14c>)
1000a8fc:	47c8      	blx	r9
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
1000a8fe:	4833      	ldr	r0, [pc, #204]	; (1000a9cc <ble_encryption_request_handler+0x138>)
1000a900:	47d0      	blx	sl
1000a902:	8871      	ldrh	r1, [r6, #2]
1000a904:	4837      	ldr	r0, [pc, #220]	; (1000a9e4 <ble_encryption_request_handler+0x150>)
1000a906:	47c8      	blx	r9
		DBG_LOG_DEV("The index is %d",idx);
1000a908:	4830      	ldr	r0, [pc, #192]	; (1000a9cc <ble_encryption_request_handler+0x138>)
1000a90a:	47d0      	blx	sl
1000a90c:	0021      	movs	r1, r4
1000a90e:	4836      	ldr	r0, [pc, #216]	; (1000a9e8 <ble_encryption_request_handler+0x154>)
1000a910:	47c8      	blx	r9
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
1000a912:	465b      	mov	r3, fp
1000a914:	881a      	ldrh	r2, [r3, #0]
1000a916:	8873      	ldrh	r3, [r6, #2]
1000a918:	429a      	cmp	r2, r3
1000a91a:	d12a      	bne.n	1000a972 <ble_encryption_request_handler+0xde>
1000a91c:	e006      	b.n	1000a92c <ble_encryption_request_handler+0x98>
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a91e:	3401      	adds	r4, #1
1000a920:	b2e4      	uxtb	r4, r4
1000a922:	3201      	adds	r2, #1
1000a924:	337c      	adds	r3, #124	; 0x7c
1000a926:	2c05      	cmp	r4, #5
1000a928:	d1be      	bne.n	1000a8a8 <ble_encryption_request_handler+0x14>
1000a92a:	e022      	b.n	1000a972 <ble_encryption_request_handler+0xde>
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
		DBG_LOG_DEV("The index is %d",idx);
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
		&& !memcmp(&enc_req->nb[0],&ble_dev_info[idx].host_ltk.nb[0],8))
1000a92c:	0161      	lsls	r1, r4, #5
1000a92e:	1b09      	subs	r1, r1, r4
1000a930:	0089      	lsls	r1, r1, #2
1000a932:	4b25      	ldr	r3, [pc, #148]	; (1000a9c8 <ble_encryption_request_handler+0x134>)
1000a934:	1859      	adds	r1, r3, r1
1000a936:	3172      	adds	r1, #114	; 0x72
1000a938:	1d30      	adds	r0, r6, #4
1000a93a:	2208      	movs	r2, #8
1000a93c:	4b2b      	ldr	r3, [pc, #172]	; (1000a9ec <ble_encryption_request_handler+0x158>)
1000a93e:	4798      	blx	r3
1000a940:	2800      	cmp	r0, #0
1000a942:	d116      	bne.n	1000a972 <ble_encryption_request_handler+0xde>
		{
			key_found = true;
			DBG_LOG_DEV("ENC-Req: Key Found");
1000a944:	4821      	ldr	r0, [pc, #132]	; (1000a9cc <ble_encryption_request_handler+0x138>)
1000a946:	4b22      	ldr	r3, [pc, #136]	; (1000a9d0 <ble_encryption_request_handler+0x13c>)
1000a948:	4798      	blx	r3
1000a94a:	4829      	ldr	r0, [pc, #164]	; (1000a9f0 <ble_encryption_request_handler+0x15c>)
1000a94c:	4b22      	ldr	r3, [pc, #136]	; (1000a9d8 <ble_encryption_request_handler+0x144>)
1000a94e:	4798      	blx	r3
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
		return AT_BLE_FAILURE;
    }

	if(!(at_ble_encryption_request_reply(enc_req->handle, ble_dev_info[idx].bond_info.auth, key_found, &ble_dev_info[idx].host_ltk) == AT_BLE_SUCCESS))
1000a950:	0162      	lsls	r2, r4, #5
1000a952:	1b13      	subs	r3, r2, r4
1000a954:	009b      	lsls	r3, r3, #2
1000a956:	3360      	adds	r3, #96	; 0x60
1000a958:	491b      	ldr	r1, [pc, #108]	; (1000a9c8 <ble_encryption_request_handler+0x134>)
1000a95a:	185b      	adds	r3, r3, r1
1000a95c:	1b12      	subs	r2, r2, r4
1000a95e:	0092      	lsls	r2, r2, #2
1000a960:	188a      	adds	r2, r1, r2
1000a962:	7d11      	ldrb	r1, [r2, #20]
1000a964:	8830      	ldrh	r0, [r6, #0]
1000a966:	2201      	movs	r2, #1
1000a968:	4c22      	ldr	r4, [pc, #136]	; (1000a9f4 <ble_encryption_request_handler+0x160>)
1000a96a:	47a0      	blx	r4
1000a96c:	1e04      	subs	r4, r0, #0
1000a96e:	d01e      	beq.n	1000a9ae <ble_encryption_request_handler+0x11a>
1000a970:	e015      	b.n	1000a99e <ble_encryption_request_handler+0x10a>
	}
	
	
    if(key_found == false)
    {
	    DBG_LOG("Pairing information of peer device is not available.");
1000a972:	4f16      	ldr	r7, [pc, #88]	; (1000a9cc <ble_encryption_request_handler+0x138>)
1000a974:	0038      	movs	r0, r7
1000a976:	4e16      	ldr	r6, [pc, #88]	; (1000a9d0 <ble_encryption_request_handler+0x13c>)
1000a978:	47b0      	blx	r6
1000a97a:	481f      	ldr	r0, [pc, #124]	; (1000a9f8 <ble_encryption_request_handler+0x164>)
1000a97c:	4d16      	ldr	r5, [pc, #88]	; (1000a9d8 <ble_encryption_request_handler+0x144>)
1000a97e:	47a8      	blx	r5
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
1000a980:	0038      	movs	r0, r7
1000a982:	47b0      	blx	r6
1000a984:	481d      	ldr	r0, [pc, #116]	; (1000a9fc <ble_encryption_request_handler+0x168>)
1000a986:	47a8      	blx	r5
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
1000a988:	0163      	lsls	r3, r4, #5
1000a98a:	1b1c      	subs	r4, r3, r4
1000a98c:	00a4      	lsls	r4, r4, #2
1000a98e:	4b0e      	ldr	r3, [pc, #56]	; (1000a9c8 <ble_encryption_request_handler+0x134>)
1000a990:	191c      	adds	r4, r3, r4
1000a992:	8920      	ldrh	r0, [r4, #8]
1000a994:	2105      	movs	r1, #5
1000a996:	4b1a      	ldr	r3, [pc, #104]	; (1000aa00 <ble_encryption_request_handler+0x16c>)
1000a998:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000a99a:	24e2      	movs	r4, #226	; 0xe2
1000a99c:	e00d      	b.n	1000a9ba <ble_encryption_request_handler+0x126>
    }

	if(!(at_ble_encryption_request_reply(enc_req->handle, ble_dev_info[idx].bond_info.auth, key_found, &ble_dev_info[idx].host_ltk) == AT_BLE_SUCCESS))
	{
		DBG_LOG("Encryption Request Reply Failed");
1000a99e:	480b      	ldr	r0, [pc, #44]	; (1000a9cc <ble_encryption_request_handler+0x138>)
1000a9a0:	4b0b      	ldr	r3, [pc, #44]	; (1000a9d0 <ble_encryption_request_handler+0x13c>)
1000a9a2:	4798      	blx	r3
1000a9a4:	4817      	ldr	r0, [pc, #92]	; (1000aa04 <ble_encryption_request_handler+0x170>)
1000a9a6:	4b0c      	ldr	r3, [pc, #48]	; (1000a9d8 <ble_encryption_request_handler+0x144>)
1000a9a8:	4798      	blx	r3
	}
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
	}
	return AT_BLE_SUCCESS;
1000a9aa:	2400      	movs	r4, #0
1000a9ac:	e005      	b.n	1000a9ba <ble_encryption_request_handler+0x126>
	{
		DBG_LOG("Encryption Request Reply Failed");
	}
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
1000a9ae:	4807      	ldr	r0, [pc, #28]	; (1000a9cc <ble_encryption_request_handler+0x138>)
1000a9b0:	4b07      	ldr	r3, [pc, #28]	; (1000a9d0 <ble_encryption_request_handler+0x13c>)
1000a9b2:	4798      	blx	r3
1000a9b4:	4814      	ldr	r0, [pc, #80]	; (1000aa08 <ble_encryption_request_handler+0x174>)
1000a9b6:	4b08      	ldr	r3, [pc, #32]	; (1000a9d8 <ble_encryption_request_handler+0x144>)
1000a9b8:	4798      	blx	r3
	}
	return AT_BLE_SUCCESS;
}
1000a9ba:	0020      	movs	r0, r4
1000a9bc:	bc1c      	pop	{r2, r3, r4}
1000a9be:	4691      	mov	r9, r2
1000a9c0:	469a      	mov	sl, r3
1000a9c2:	46a3      	mov	fp, r4
1000a9c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a9c6:	46c0      	nop			; (mov r8, r8)
1000a9c8:	100134f4 	.word	0x100134f4
1000a9cc:	1001095c 	.word	0x1001095c
1000a9d0:	1000f805 	.word	0x1000f805
1000a9d4:	100111d8 	.word	0x100111d8
1000a9d8:	1000f6e5 	.word	0x1000f6e5
1000a9dc:	10011204 	.word	0x10011204
1000a9e0:	10011218 	.word	0x10011218
1000a9e4:	1001122c 	.word	0x1001122c
1000a9e8:	1001123c 	.word	0x1001123c
1000a9ec:	1000f6a5 	.word	0x1000f6a5
1000a9f0:	1001124c 	.word	0x1001124c
1000a9f4:	1000ce89 	.word	0x1000ce89
1000a9f8:	10011260 	.word	0x10011260
1000a9fc:	10011298 	.word	0x10011298
1000aa00:	1000c8b9 	.word	0x1000c8b9
1000aa04:	100112f0 	.word	0x100112f0
1000aa08:	10011310 	.word	0x10011310

1000aa0c <ble_mgr_events_callback_handler>:
}

bool ble_mgr_events_callback_handler(ble_mgr_event_cb_t event_cb_type, 
									ble_mgr_event_t event_type,
									const ble_event_callback_t *ble_event_handler)
{
1000aa0c:	b530      	push	{r4, r5, lr}
	uint8_t idx;
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
1000aa0e:	2a00      	cmp	r2, #0
1000aa10:	d047      	beq.n	1000aaa2 <ble_mgr_events_callback_handler+0x96>
	{
		switch(event_type)
1000aa12:	2906      	cmp	r1, #6
1000aa14:	d847      	bhi.n	1000aaa6 <ble_mgr_events_callback_handler+0x9a>
1000aa16:	0089      	lsls	r1, r1, #2
1000aa18:	4b28      	ldr	r3, [pc, #160]	; (1000aabc <ble_mgr_events_callback_handler+0xb0>)
1000aa1a:	585b      	ldr	r3, [r3, r1]
1000aa1c:	469f      	mov	pc, r3
			}
			break;
			
			case BLE_GATT_SERVER_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_server_event_cb;
1000aa1e:	4b28      	ldr	r3, [pc, #160]	; (1000aac0 <ble_mgr_events_callback_handler+0xb4>)
				max_event_handler = MAX_GATT_SERVER_SUBSCRIBERS;
1000aa20:	2405      	movs	r4, #5
1000aa22:	e00a      	b.n	1000aa3a <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_GATT_HTPT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_htpt_event_cb;
1000aa24:	4b27      	ldr	r3, [pc, #156]	; (1000aac4 <ble_mgr_events_callback_handler+0xb8>)
				max_event_handler = MAX_HTPT_EVENT_SUBSCRIBERS;
1000aa26:	2401      	movs	r4, #1
			}
			break;
1000aa28:	e007      	b.n	1000aa3a <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_DTM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_dtm_event_cb;
1000aa2a:	4b27      	ldr	r3, [pc, #156]	; (1000aac8 <ble_mgr_events_callback_handler+0xbc>)
				max_event_handler = MAX_DTM_EVENT_SUBSCRIBERS;
1000aa2c:	2405      	movs	r4, #5
			}
			break;
1000aa2e:	e004      	b.n	1000aa3a <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_CUSTOM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_custom_event_cb;
1000aa30:	4b26      	ldr	r3, [pc, #152]	; (1000aacc <ble_mgr_events_callback_handler+0xc0>)
				max_event_handler = MAX_CUSTOM_EVENT_SUBSCRIBERS;
1000aa32:	2401      	movs	r4, #1
			}
			break;
1000aa34:	e001      	b.n	1000aa3a <ble_mgr_events_callback_handler+0x2e>
	{
		switch(event_type)
		{
			case BLE_GAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gap_event_cb;
1000aa36:	4b26      	ldr	r3, [pc, #152]	; (1000aad0 <ble_mgr_events_callback_handler+0xc4>)
				max_event_handler = MAX_GAP_EVENT_SUBSCRIBERS;
1000aa38:	2405      	movs	r4, #5
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
1000aa3a:	2800      	cmp	r0, #0
1000aa3c:	d116      	bne.n	1000aa6c <ble_mgr_events_callback_handler+0x60>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000aa3e:	6819      	ldr	r1, [r3, #0]
1000aa40:	2900      	cmp	r1, #0
1000aa42:	d10b      	bne.n	1000aa5c <ble_mgr_events_callback_handler+0x50>
1000aa44:	e006      	b.n	1000aa54 <ble_mgr_events_callback_handler+0x48>
1000aa46:	001d      	movs	r5, r3
1000aa48:	3304      	adds	r3, #4
1000aa4a:	1f18      	subs	r0, r3, #4
1000aa4c:	6800      	ldr	r0, [r0, #0]
1000aa4e:	2800      	cmp	r0, #0
1000aa50:	d106      	bne.n	1000aa60 <ble_mgr_events_callback_handler+0x54>
1000aa52:	e000      	b.n	1000aa56 <ble_mgr_events_callback_handler+0x4a>
1000aa54:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = ble_event_handler;
1000aa56:	602a      	str	r2, [r5, #0]
						status = true; //Successfully registered to table
1000aa58:	2101      	movs	r1, #1
						break;
1000aa5a:	e02c      	b.n	1000aab6 <ble_mgr_events_callback_handler+0xaa>
1000aa5c:	3304      	adds	r3, #4
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000aa5e:	2100      	movs	r1, #0
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000aa60:	3101      	adds	r1, #1
1000aa62:	b2c9      	uxtb	r1, r1
1000aa64:	42a1      	cmp	r1, r4
1000aa66:	d3ee      	bcc.n	1000aa46 <ble_mgr_events_callback_handler+0x3a>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000aa68:	2100      	movs	r1, #0
1000aa6a:	e024      	b.n	1000aab6 <ble_mgr_events_callback_handler+0xaa>
1000aa6c:	2100      	movs	r1, #0
						status = true; //Successfully registered to table
						break;
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
1000aa6e:	2801      	cmp	r0, #1
1000aa70:	d121      	bne.n	1000aab6 <ble_mgr_events_callback_handler+0xaa>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000aa72:	6819      	ldr	r1, [r3, #0]
1000aa74:	428a      	cmp	r2, r1
1000aa76:	d10c      	bne.n	1000aa92 <ble_mgr_events_callback_handler+0x86>
1000aa78:	e006      	b.n	1000aa88 <ble_mgr_events_callback_handler+0x7c>
1000aa7a:	001d      	movs	r5, r3
1000aa7c:	3304      	adds	r3, #4
1000aa7e:	1f18      	subs	r0, r3, #4
1000aa80:	6800      	ldr	r0, [r0, #0]
1000aa82:	4282      	cmp	r2, r0
1000aa84:	d107      	bne.n	1000aa96 <ble_mgr_events_callback_handler+0x8a>
1000aa86:	e000      	b.n	1000aa8a <ble_mgr_events_callback_handler+0x7e>
1000aa88:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = NULL;
1000aa8a:	2300      	movs	r3, #0
1000aa8c:	602b      	str	r3, [r5, #0]
						status = true;//Successfully unregistered from table
1000aa8e:	2101      	movs	r1, #1
						break;
1000aa90:	e011      	b.n	1000aab6 <ble_mgr_events_callback_handler+0xaa>
1000aa92:	3304      	adds	r3, #4
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000aa94:	2100      	movs	r1, #0
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000aa96:	3101      	adds	r1, #1
1000aa98:	b2c9      	uxtb	r1, r1
1000aa9a:	42a1      	cmp	r1, r4
1000aa9c:	d3ed      	bcc.n	1000aa7a <ble_mgr_events_callback_handler+0x6e>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000aa9e:	2100      	movs	r1, #0
1000aaa0:	e009      	b.n	1000aab6 <ble_mgr_events_callback_handler+0xaa>
			}			
		}
	}
	else
	{
		status = false; //Invalid parameter
1000aaa2:	2100      	movs	r1, #0
1000aaa4:	e007      	b.n	1000aab6 <ble_mgr_events_callback_handler+0xaa>
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
	{
		switch(event_type)
1000aaa6:	2100      	movs	r1, #0
1000aaa8:	e005      	b.n	1000aab6 <ble_mgr_events_callback_handler+0xaa>
			}
			break;
			
			case BLE_GATT_CLIENT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_client_event_cb;
1000aaaa:	4b0a      	ldr	r3, [pc, #40]	; (1000aad4 <ble_mgr_events_callback_handler+0xc8>)
				max_event_handler = MAX_GATT_CLIENT_SUBSCRIBERS;
1000aaac:	2405      	movs	r4, #5
1000aaae:	e7c4      	b.n	1000aa3a <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_L2CAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_l2cap_event_cb;
1000aab0:	4b09      	ldr	r3, [pc, #36]	; (1000aad8 <ble_mgr_events_callback_handler+0xcc>)
				max_event_handler = MAX_L2CAP_EVENT_SUBSCRIBERS;
1000aab2:	2401      	movs	r4, #1
1000aab4:	e7c1      	b.n	1000aa3a <ble_mgr_events_callback_handler+0x2e>
	else
	{
		status = false; //Invalid parameter
	}
	return status;
}
1000aab6:	0008      	movs	r0, r1
1000aab8:	bd30      	pop	{r4, r5, pc}
1000aaba:	46c0      	nop			; (mov r8, r8)
1000aabc:	10010cbc 	.word	0x10010cbc
1000aac0:	100134e0 	.word	0x100134e0
1000aac4:	100134dc 	.word	0x100134dc
1000aac8:	10013764 	.word	0x10013764
1000aacc:	10013d18 	.word	0x10013d18
1000aad0:	10013778 	.word	0x10013778
1000aad4:	1001378c 	.word	0x1001378c
1000aad8:	100137d4 	.word	0x100137d4

1000aadc <ble_device_init>:
volatile uint32_t 	event_params_memory[1024] 	= {0};


/** @brief BLE device initialization */
void ble_device_init(at_ble_addr_t *addr)
{
1000aadc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000aade:	465f      	mov	r7, fp
1000aae0:	4656      	mov	r6, sl
1000aae2:	464d      	mov	r5, r9
1000aae4:	4644      	mov	r4, r8
1000aae6:	b4f0      	push	{r4, r5, r6, r7}
1000aae8:	b091      	sub	sp, #68	; 0x44
1000aaea:	0005      	movs	r5, r0
static bool ble_scan_duplication_check(at_ble_scan_info_t * info);
#endif

static void init_global_var(void)
{
	ble_user_event_cb = 0;
1000aaec:	2400      	movs	r4, #0
1000aaee:	4b7e      	ldr	r3, [pc, #504]	; (1000ace8 <ble_device_init+0x20c>)
1000aaf0:	601c      	str	r4, [r3, #0]
	
	memset(&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000aaf2:	2207      	movs	r2, #7
1000aaf4:	2100      	movs	r1, #0
1000aaf6:	487d      	ldr	r0, [pc, #500]	; (1000acec <ble_device_init+0x210>)
1000aaf8:	4e7d      	ldr	r6, [pc, #500]	; (1000acf0 <ble_device_init+0x214>)
1000aafa:	47b0      	blx	r6
	memset(&connected_state_info, 0, sizeof(at_ble_connected_t));
1000aafc:	2212      	movs	r2, #18
1000aafe:	2100      	movs	r1, #0
1000ab00:	487c      	ldr	r0, [pc, #496]	; (1000acf4 <ble_device_init+0x218>)
1000ab02:	47b0      	blx	r6
		
#if defined ATT_DB_MEMORY
	memset(att_db_data, 0, sizeof(uint32_t) * BLE_ATT_DB_MEMORY_SIZE/4);
1000ab04:	4a7c      	ldr	r2, [pc, #496]	; (1000acf8 <ble_device_init+0x21c>)
1000ab06:	2100      	movs	r1, #0
1000ab08:	487c      	ldr	r0, [pc, #496]	; (1000acfc <ble_device_init+0x220>)
1000ab0a:	47b0      	blx	r6
#endif

	scan_response_count = 0;
1000ab0c:	4b7c      	ldr	r3, [pc, #496]	; (1000ad00 <ble_device_init+0x224>)
1000ab0e:	701c      	strb	r4, [r3, #0]
	memset(scan_info, 0, sizeof(scan_info));
1000ab10:	22cd      	movs	r2, #205	; 0xcd
1000ab12:	0092      	lsls	r2, r2, #2
1000ab14:	2100      	movs	r1, #0
1000ab16:	487b      	ldr	r0, [pc, #492]	; (1000ad04 <ble_device_init+0x228>)
1000ab18:	47b0      	blx	r6

	event = AT_BLE_UNDEFINED_EVENT;
1000ab1a:	4b7b      	ldr	r3, [pc, #492]	; (1000ad08 <ble_device_init+0x22c>)
1000ab1c:	701c      	strb	r4, [r3, #0]
	memset(ble_event_params, 0, BLE_EVENT_PARAM_MAX_SIZE);
1000ab1e:	2283      	movs	r2, #131	; 0x83
1000ab20:	0092      	lsls	r2, r2, #2
1000ab22:	2100      	movs	r1, #0
1000ab24:	4879      	ldr	r0, [pc, #484]	; (1000ad0c <ble_device_init+0x230>)
1000ab26:	47b0      	blx	r6
{
	uint8_t idx;	
	char *dev_name = NULL;
	init_global_var();

	memset((uint8_t *)event_pool_memory, 0, sizeof(event_pool_memory));
1000ab28:	4b79      	ldr	r3, [pc, #484]	; (1000ad10 <ble_device_init+0x234>)
1000ab2a:	469b      	mov	fp, r3
1000ab2c:	2380      	movs	r3, #128	; 0x80
1000ab2e:	00db      	lsls	r3, r3, #3
1000ab30:	469a      	mov	sl, r3
1000ab32:	001a      	movs	r2, r3
1000ab34:	2100      	movs	r1, #0
1000ab36:	4658      	mov	r0, fp
1000ab38:	47b0      	blx	r6
	memset((uint8_t *)event_params_memory, 0, sizeof(event_params_memory));
1000ab3a:	4b76      	ldr	r3, [pc, #472]	; (1000ad14 <ble_device_init+0x238>)
1000ab3c:	4699      	mov	r9, r3
1000ab3e:	2380      	movs	r3, #128	; 0x80
1000ab40:	015b      	lsls	r3, r3, #5
1000ab42:	4698      	mov	r8, r3
1000ab44:	001a      	movs	r2, r3
1000ab46:	2100      	movs	r1, #0
1000ab48:	4648      	mov	r0, r9
1000ab4a:	47b0      	blx	r6

	memset(&pf_cfg, 0, sizeof(pf_cfg));
1000ab4c:	4f72      	ldr	r7, [pc, #456]	; (1000ad18 <ble_device_init+0x23c>)
1000ab4e:	221c      	movs	r2, #28
1000ab50:	2100      	movs	r1, #0
1000ab52:	0038      	movs	r0, r7
1000ab54:	47b0      	blx	r6

	pf_cfg.event_mem_pool.memStartAdd        = (uint8_t *)event_pool_memory;
1000ab56:	465b      	mov	r3, fp
1000ab58:	60bb      	str	r3, [r7, #8]
	pf_cfg.event_mem_pool.memSize            = sizeof(event_pool_memory);
1000ab5a:	4653      	mov	r3, sl
1000ab5c:	60fb      	str	r3, [r7, #12]
	pf_cfg.event_params_mem_pool.memStartAdd = (uint8_t *)event_params_memory;
1000ab5e:	464b      	mov	r3, r9
1000ab60:	613b      	str	r3, [r7, #16]
	pf_cfg.event_params_mem_pool.memSize     = sizeof(event_params_memory);
1000ab62:	4643      	mov	r3, r8
1000ab64:	617b      	str	r3, [r7, #20]

	/* Initialize the BLE Event callbacks */
	for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gap_event_cb[idx] = NULL;
1000ab66:	4b6d      	ldr	r3, [pc, #436]	; (1000ad1c <ble_device_init+0x240>)
1000ab68:	601c      	str	r4, [r3, #0]
1000ab6a:	605c      	str	r4, [r3, #4]
1000ab6c:	609c      	str	r4, [r3, #8]
1000ab6e:	60dc      	str	r4, [r3, #12]
1000ab70:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_client_event_cb[idx] = NULL;
1000ab72:	4b6b      	ldr	r3, [pc, #428]	; (1000ad20 <ble_device_init+0x244>)
1000ab74:	601c      	str	r4, [r3, #0]
1000ab76:	605c      	str	r4, [r3, #4]
1000ab78:	609c      	str	r4, [r3, #8]
1000ab7a:	60dc      	str	r4, [r3, #12]
1000ab7c:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_server_event_cb[idx] = NULL;
1000ab7e:	4b69      	ldr	r3, [pc, #420]	; (1000ad24 <ble_device_init+0x248>)
1000ab80:	601c      	str	r4, [r3, #0]
1000ab82:	605c      	str	r4, [r3, #4]
1000ab84:	609c      	str	r4, [r3, #8]
1000ab86:	60dc      	str	r4, [r3, #12]
1000ab88:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_l2cap_event_cb[idx] = NULL;
1000ab8a:	4b67      	ldr	r3, [pc, #412]	; (1000ad28 <ble_device_init+0x24c>)
1000ab8c:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_htpt_event_cb[idx] = NULL;
1000ab8e:	4b67      	ldr	r3, [pc, #412]	; (1000ad2c <ble_device_init+0x250>)
1000ab90:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_dtm_event_cb[idx] = NULL;
1000ab92:	4b67      	ldr	r3, [pc, #412]	; (1000ad30 <ble_device_init+0x254>)
1000ab94:	601c      	str	r4, [r3, #0]
1000ab96:	605c      	str	r4, [r3, #4]
1000ab98:	609c      	str	r4, [r3, #8]
1000ab9a:	60dc      	str	r4, [r3, #12]
1000ab9c:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_custom_event_cb[idx] = NULL;
1000ab9e:	4b65      	ldr	r3, [pc, #404]	; (1000ad34 <ble_device_init+0x258>)
1000aba0:	601c      	str	r4, [r3, #0]
1000aba2:	4c65      	ldr	r4, [pc, #404]	; (1000ad38 <ble_device_init+0x25c>)
1000aba4:	239b      	movs	r3, #155	; 0x9b
1000aba6:	009b      	lsls	r3, r3, #2
1000aba8:	4698      	mov	r8, r3
1000abaa:	44a0      	add	r8, r4
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000abac:	4f50      	ldr	r7, [pc, #320]	; (1000acf0 <ble_device_init+0x214>)
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000abae:	2640      	movs	r6, #64	; 0x40
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000abb0:	227c      	movs	r2, #124	; 0x7c
1000abb2:	2100      	movs	r1, #0
1000abb4:	0020      	movs	r0, r4
1000abb6:	47b8      	blx	r7
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000abb8:	0023      	movs	r3, r4
1000abba:	335e      	adds	r3, #94	; 0x5e
1000abbc:	2200      	movs	r2, #0
1000abbe:	701a      	strb	r2, [r3, #0]
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000abc0:	7626      	strb	r6, [r4, #24]
1000abc2:	347c      	adds	r4, #124	; 0x7c
	{
		ble_mgr_custom_event_cb[idx] = NULL;
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000abc4:	45a0      	cmp	r8, r4
1000abc6:	d1f3      	bne.n	1000abb0 <ble_device_init+0xd4>
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
    }
	/* Need to reset the count to 0 for storing it only in SRAM */
	ble_device_count = 0; 
1000abc8:	4b5c      	ldr	r3, [pc, #368]	; (1000ad3c <ble_device_init+0x260>)
1000abca:	701a      	strb	r2, [r3, #0]
	
	
#if defined ATT_DB_MEMORY
	pf_cfg.memPool.memSize = BLE_ATT_DB_MEMORY_SIZE;
1000abcc:	4c52      	ldr	r4, [pc, #328]	; (1000ad18 <ble_device_init+0x23c>)
1000abce:	4b4a      	ldr	r3, [pc, #296]	; (1000acf8 <ble_device_init+0x21c>)
1000abd0:	6063      	str	r3, [r4, #4]
	pf_cfg.memPool.memStartAdd = (uint8_t *)att_db_data;
1000abd2:	4b4a      	ldr	r3, [pc, #296]	; (1000acfc <ble_device_init+0x220>)
1000abd4:	6023      	str	r3, [r4, #0]

/* Initialize the BLE */
static void ble_init(at_ble_init_config_t * args)
{
	/* Initialize the platform */
	DBG_LOG("Initializing SAMB11");
1000abd6:	485a      	ldr	r0, [pc, #360]	; (1000ad40 <ble_device_init+0x264>)
1000abd8:	4b5a      	ldr	r3, [pc, #360]	; (1000ad44 <ble_device_init+0x268>)
1000abda:	4798      	blx	r3
1000abdc:	485a      	ldr	r0, [pc, #360]	; (1000ad48 <ble_device_init+0x26c>)
1000abde:	4b5b      	ldr	r3, [pc, #364]	; (1000ad4c <ble_device_init+0x270>)
1000abe0:	4798      	blx	r3
	
	/* Init BLE device */
	if(at_ble_init(args) != AT_BLE_SUCCESS)
1000abe2:	0020      	movs	r0, r4
1000abe4:	4b5a      	ldr	r3, [pc, #360]	; (1000ad50 <ble_device_init+0x274>)
1000abe6:	4798      	blx	r3
1000abe8:	2800      	cmp	r0, #0
1000abea:	d00b      	beq.n	1000ac04 <ble_device_init+0x128>
	{
		DBG_LOG("SAMB11 Initialization failed");
1000abec:	4e54      	ldr	r6, [pc, #336]	; (1000ad40 <ble_device_init+0x264>)
1000abee:	0030      	movs	r0, r6
1000abf0:	4d54      	ldr	r5, [pc, #336]	; (1000ad44 <ble_device_init+0x268>)
1000abf2:	47a8      	blx	r5
1000abf4:	4857      	ldr	r0, [pc, #348]	; (1000ad54 <ble_device_init+0x278>)
1000abf6:	4c55      	ldr	r4, [pc, #340]	; (1000ad4c <ble_device_init+0x270>)
1000abf8:	47a0      	blx	r4
		DBG_LOG("Please check the power and connection / hardware connector");	
1000abfa:	0030      	movs	r0, r6
1000abfc:	47a8      	blx	r5
1000abfe:	4856      	ldr	r0, [pc, #344]	; (1000ad58 <ble_device_init+0x27c>)
1000ac00:	47a0      	blx	r4
1000ac02:	e7fe      	b.n	1000ac02 <ble_device_init+0x126>
#endif
	
	ble_init(&pf_cfg);

	/* Register it in first index of callback handler */
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, 
1000ac04:	4a55      	ldr	r2, [pc, #340]	; (1000ad5c <ble_device_init+0x280>)
1000ac06:	2100      	movs	r1, #0
1000ac08:	2000      	movs	r0, #0
1000ac0a:	4c55      	ldr	r4, [pc, #340]	; (1000ad60 <ble_device_init+0x284>)
1000ac0c:	47a0      	blx	r4
									BLE_GAP_EVENT_TYPE, 
									ble_mgr_gap_handle);
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
1000ac0e:	4a55      	ldr	r2, [pc, #340]	; (1000ad64 <ble_device_init+0x288>)
1000ac10:	2102      	movs	r1, #2
1000ac12:	2000      	movs	r0, #0
1000ac14:	47a0      	blx	r4
{
	if ((name == NULL) || (name_len < 1))
	{
		return AT_BLE_INVALID_PARAM;
	}
	return at_ble_device_name_set(name, name_len);
1000ac16:	2109      	movs	r1, #9
1000ac18:	4853      	ldr	r0, [pc, #332]	; (1000ad68 <ble_device_init+0x28c>)
1000ac1a:	4b54      	ldr	r3, [pc, #336]	; (1000ad6c <ble_device_init+0x290>)
1000ac1c:	4798      	blx	r3
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
									BLE_GATT_SERVER_EVENT_TYPE,
									ble_mgr_gatt_server_handle);
									
	dev_name = (char *)BLE_DEVICE_NAME;
	if (ble_set_device_name((uint8_t *)dev_name, strlen(dev_name)) != AT_BLE_SUCCESS)
1000ac1e:	2800      	cmp	r0, #0
1000ac20:	d005      	beq.n	1000ac2e <ble_device_init+0x152>
	{
		DBG_LOG("Device name set failed");
1000ac22:	4847      	ldr	r0, [pc, #284]	; (1000ad40 <ble_device_init+0x264>)
1000ac24:	4b47      	ldr	r3, [pc, #284]	; (1000ad44 <ble_device_init+0x268>)
1000ac26:	4798      	blx	r3
1000ac28:	4851      	ldr	r0, [pc, #324]	; (1000ad70 <ble_device_init+0x294>)
1000ac2a:	4b48      	ldr	r3, [pc, #288]	; (1000ad4c <ble_device_init+0x270>)
1000ac2c:	4798      	blx	r3

/* Set BLE Address and device configuration, If address is NULL then it will use BD public address */
static void ble_set_dev_config(at_ble_addr_t *addr)
{
	at_ble_dev_config_t stDevConfig;
	at_ble_addr_t address = {AT_BLE_ADDRESS_PUBLIC, {0xAB, 0xCD, 0xEF, 0xAB, 0xCD, 0xEF}};
1000ac2e:	2207      	movs	r2, #7
1000ac30:	4950      	ldr	r1, [pc, #320]	; (1000ad74 <ble_device_init+0x298>)
1000ac32:	3108      	adds	r1, #8
1000ac34:	a804      	add	r0, sp, #16
1000ac36:	4b50      	ldr	r3, [pc, #320]	; (1000ad78 <ble_device_init+0x29c>)
1000ac38:	4798      	blx	r3
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
1000ac3a:	2226      	movs	r2, #38	; 0x26
1000ac3c:	2100      	movs	r1, #0
1000ac3e:	a806      	add	r0, sp, #24
1000ac40:	4b2b      	ldr	r3, [pc, #172]	; (1000acf0 <ble_device_init+0x214>)
1000ac42:	4798      	blx	r3
	
	if (addr == NULL)
1000ac44:	2d00      	cmp	r5, #0
1000ac46:	d10c      	bne.n	1000ac62 <ble_device_init+0x186>
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000ac48:	a804      	add	r0, sp, #16
1000ac4a:	4b4c      	ldr	r3, [pc, #304]	; (1000ad7c <ble_device_init+0x2a0>)
1000ac4c:	4798      	blx	r3
		{
			DBG_LOG("BD address get failed");
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000ac4e:	ad04      	add	r5, sp, #16
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
	
	if (addr == NULL)
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000ac50:	2800      	cmp	r0, #0
1000ac52:	d006      	beq.n	1000ac62 <ble_device_init+0x186>
		{
			DBG_LOG("BD address get failed");
1000ac54:	483a      	ldr	r0, [pc, #232]	; (1000ad40 <ble_device_init+0x264>)
1000ac56:	4b3b      	ldr	r3, [pc, #236]	; (1000ad44 <ble_device_init+0x268>)
1000ac58:	4798      	blx	r3
1000ac5a:	4849      	ldr	r0, [pc, #292]	; (1000ad80 <ble_device_init+0x2a4>)
1000ac5c:	4b3b      	ldr	r3, [pc, #236]	; (1000ad4c <ble_device_init+0x270>)
1000ac5e:	4798      	blx	r3
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000ac60:	ad04      	add	r5, sp, #16
	}
	
	DBG_LOG("BD Address:0x%02X%02X%02X%02X%02X%02X, Address Type:%d",
1000ac62:	4837      	ldr	r0, [pc, #220]	; (1000ad40 <ble_device_init+0x264>)
1000ac64:	4b37      	ldr	r3, [pc, #220]	; (1000ad44 <ble_device_init+0x268>)
1000ac66:	4798      	blx	r3
1000ac68:	792b      	ldrb	r3, [r5, #4]
1000ac6a:	796a      	ldrb	r2, [r5, #5]
1000ac6c:	79a9      	ldrb	r1, [r5, #6]
1000ac6e:	7828      	ldrb	r0, [r5, #0]
1000ac70:	9003      	str	r0, [sp, #12]
1000ac72:	7868      	ldrb	r0, [r5, #1]
1000ac74:	9002      	str	r0, [sp, #8]
1000ac76:	78a8      	ldrb	r0, [r5, #2]
1000ac78:	9001      	str	r0, [sp, #4]
1000ac7a:	78e8      	ldrb	r0, [r5, #3]
1000ac7c:	9000      	str	r0, [sp, #0]
1000ac7e:	4841      	ldr	r0, [pc, #260]	; (1000ad84 <ble_device_init+0x2a8>)
1000ac80:	4c32      	ldr	r4, [pc, #200]	; (1000ad4c <ble_device_init+0x270>)
1000ac82:	47a0      	blx	r4
	addr->addr[1],
	addr->addr[0], addr->type);
	
	/* Set device configuration */
	/* Device role */
	stDevConfig.role = (at_ble_dev_role_t)BLE_DEVICE_ROLE;
1000ac84:	ac06      	add	r4, sp, #24
1000ac86:	230f      	movs	r3, #15
1000ac88:	7023      	strb	r3, [r4, #0]
	/* device renew duration */
	stDevConfig.renew_dur = AT_RENEW_DUR_VAL_MIN;
1000ac8a:	4b3f      	ldr	r3, [pc, #252]	; (1000ad88 <ble_device_init+0x2ac>)
1000ac8c:	8063      	strh	r3, [r4, #2]
	/* device address type */
	memcpy((uint8_t *)&stDevConfig.address, (uint8_t *)addr, sizeof(at_ble_addr_t));
1000ac8e:	2207      	movs	r2, #7
1000ac90:	0029      	movs	r1, r5
1000ac92:	a807      	add	r0, sp, #28
1000ac94:	4b38      	ldr	r3, [pc, #224]	; (1000ad78 <ble_device_init+0x29c>)
1000ac96:	4798      	blx	r3
	/* Attributes */
	stDevConfig.att_cfg.b2NamePerm = AT_BLE_WRITE_DISABLE;
1000ac98:	2300      	movs	r3, #0
1000ac9a:	76e3      	strb	r3, [r4, #27]
	stDevConfig.att_cfg.b2AppearancePerm = AT_BLE_WRITE_DISABLE;
1000ac9c:	7723      	strb	r3, [r4, #28]
	stDevConfig.att_cfg.b1EnableSpcs = 0;
1000ac9e:	7763      	strb	r3, [r4, #29]
	stDevConfig.att_cfg.b1EnableServiceChanged = 0;
1000aca0:	77a3      	strb	r3, [r4, #30]
	stDevConfig.att_cfg.b2Rfu = AT_BLE_WRITE_DISABLE;
1000aca2:	77e3      	strb	r3, [r4, #31]
	/* Handles */
	stDevConfig.gap_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000aca4:	8423      	strh	r3, [r4, #32]
	stDevConfig.gatt_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000aca6:	8463      	strh	r3, [r4, #34]	; 0x22
	/* MTU */
	stDevConfig.max_mtu = AT_MTU_VAL_RECOMMENDED;
1000aca8:	2380      	movs	r3, #128	; 0x80
1000acaa:	009b      	lsls	r3, r3, #2
1000acac:	84a3      	strh	r3, [r4, #36]	; 0x24
	
	if(at_ble_set_dev_config(&stDevConfig) != AT_BLE_SUCCESS)
1000acae:	0020      	movs	r0, r4
1000acb0:	4b36      	ldr	r3, [pc, #216]	; (1000ad8c <ble_device_init+0x2b0>)
1000acb2:	4798      	blx	r3
1000acb4:	2800      	cmp	r0, #0
1000acb6:	d005      	beq.n	1000acc4 <ble_device_init+0x1e8>
	{
		DBG_LOG("Set BLE Device configuration failed");
1000acb8:	4821      	ldr	r0, [pc, #132]	; (1000ad40 <ble_device_init+0x264>)
1000acba:	4b22      	ldr	r3, [pc, #136]	; (1000ad44 <ble_device_init+0x268>)
1000acbc:	4798      	blx	r3
1000acbe:	4834      	ldr	r0, [pc, #208]	; (1000ad90 <ble_device_init+0x2b4>)
1000acc0:	4b22      	ldr	r3, [pc, #136]	; (1000ad4c <ble_device_init+0x270>)
1000acc2:	4798      	blx	r3
	}
	
	if (at_ble_addr_set(addr) != AT_BLE_SUCCESS)
1000acc4:	0028      	movs	r0, r5
1000acc6:	4b33      	ldr	r3, [pc, #204]	; (1000ad94 <ble_device_init+0x2b8>)
1000acc8:	4798      	blx	r3
1000acca:	2800      	cmp	r0, #0
1000accc:	d005      	beq.n	1000acda <ble_device_init+0x1fe>
	{
		DBG_LOG("Set BLE Device Address failed");
1000acce:	481c      	ldr	r0, [pc, #112]	; (1000ad40 <ble_device_init+0x264>)
1000acd0:	4b1c      	ldr	r3, [pc, #112]	; (1000ad44 <ble_device_init+0x268>)
1000acd2:	4798      	blx	r3
1000acd4:	4830      	ldr	r0, [pc, #192]	; (1000ad98 <ble_device_init+0x2bc>)
1000acd6:	4b1d      	ldr	r3, [pc, #116]	; (1000ad4c <ble_device_init+0x270>)
1000acd8:	4798      	blx	r3
	{
		DBG_LOG("Device name set failed");
	}
	
	ble_set_dev_config(addr);	
}
1000acda:	b011      	add	sp, #68	; 0x44
1000acdc:	bc3c      	pop	{r2, r3, r4, r5}
1000acde:	4690      	mov	r8, r2
1000ace0:	4699      	mov	r9, r3
1000ace2:	46a2      	mov	sl, r4
1000ace4:	46ab      	mov	fp, r5
1000ace6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ace8:	1001219c 	.word	0x1001219c
1000acec:	100121a4 	.word	0x100121a4
1000acf0:	1000f6d5 	.word	0x1000f6d5
1000acf4:	100137a0 	.word	0x100137a0
1000acf8:	000004e2 	.word	0x000004e2
1000acfc:	10011cbc 	.word	0x10011cbc
1000ad00:	100121a0 	.word	0x100121a0
1000ad04:	100137d8 	.word	0x100137d8
1000ad08:	100137d0 	.word	0x100137d0
1000ad0c:	10013b0c 	.word	0x10013b0c
1000ad10:	100118bc 	.word	0x100118bc
1000ad14:	100121ac 	.word	0x100121ac
1000ad18:	100137b4 	.word	0x100137b4
1000ad1c:	10013778 	.word	0x10013778
1000ad20:	1001378c 	.word	0x1001378c
1000ad24:	100134e0 	.word	0x100134e0
1000ad28:	100137d4 	.word	0x100137d4
1000ad2c:	100134dc 	.word	0x100134dc
1000ad30:	10013764 	.word	0x10013764
1000ad34:	10013d18 	.word	0x10013d18
1000ad38:	100134f4 	.word	0x100134f4
1000ad3c:	10013760 	.word	0x10013760
1000ad40:	1001095c 	.word	0x1001095c
1000ad44:	1000f805 	.word	0x1000f805
1000ad48:	1001132c 	.word	0x1001132c
1000ad4c:	1000f6e5 	.word	0x1000f6e5
1000ad50:	1000c691 	.word	0x1000c691
1000ad54:	10011340 	.word	0x10011340
1000ad58:	10011360 	.word	0x10011360
1000ad5c:	10011690 	.word	0x10011690
1000ad60:	1000aa0d 	.word	0x1000aa0d
1000ad64:	10010cf4 	.word	0x10010cf4
1000ad68:	1001139c 	.word	0x1001139c
1000ad6c:	1000c5a9 	.word	0x1000c5a9
1000ad70:	100113a8 	.word	0x100113a8
1000ad74:	10010cd8 	.word	0x10010cd8
1000ad78:	1000f6c3 	.word	0x1000f6c3
1000ad7c:	1000c5dd 	.word	0x1000c5dd
1000ad80:	100113c0 	.word	0x100113c0
1000ad84:	100113d8 	.word	0x100113d8
1000ad88:	00003a98 	.word	0x00003a98
1000ad8c:	1000c601 	.word	0x1000c601
1000ad90:	10011410 	.word	0x10011410
1000ad94:	1000c845 	.word	0x1000c845
1000ad98:	10011434 	.word	0x10011434

1000ad9c <ble_send_slave_sec_request>:
	return AT_BLE_FAILURE;
}

/** @brief function to send slave security request */
at_ble_status_t ble_send_slave_sec_request(at_ble_handle_t conn_handle)
{
1000ad9c:	b510      	push	{r4, lr}
	#if BLE_PAIR_ENABLE
		if (at_ble_send_slave_sec_request(conn_handle, BLE_MITM_REQ, BLE_BOND_REQ) == AT_BLE_SUCCESS)
1000ad9e:	2200      	movs	r2, #0
1000ada0:	2100      	movs	r1, #0
1000ada2:	4b0a      	ldr	r3, [pc, #40]	; (1000adcc <ble_send_slave_sec_request+0x30>)
1000ada4:	4798      	blx	r3
1000ada6:	1e04      	subs	r4, r0, #0
1000ada8:	d106      	bne.n	1000adb8 <ble_send_slave_sec_request+0x1c>
		{
			DBG_LOG_DEV("Slave security request successful");
1000adaa:	4809      	ldr	r0, [pc, #36]	; (1000add0 <ble_send_slave_sec_request+0x34>)
1000adac:	4b09      	ldr	r3, [pc, #36]	; (1000add4 <ble_send_slave_sec_request+0x38>)
1000adae:	4798      	blx	r3
1000adb0:	4809      	ldr	r0, [pc, #36]	; (1000add8 <ble_send_slave_sec_request+0x3c>)
1000adb2:	4b0a      	ldr	r3, [pc, #40]	; (1000addc <ble_send_slave_sec_request+0x40>)
1000adb4:	4798      	blx	r3
			return AT_BLE_SUCCESS;
1000adb6:	e006      	b.n	1000adc6 <ble_send_slave_sec_request+0x2a>
		}
		else
		{
			DBG_LOG("Slave security request failed");
1000adb8:	4805      	ldr	r0, [pc, #20]	; (1000add0 <ble_send_slave_sec_request+0x34>)
1000adba:	4b06      	ldr	r3, [pc, #24]	; (1000add4 <ble_send_slave_sec_request+0x38>)
1000adbc:	4798      	blx	r3
1000adbe:	4808      	ldr	r0, [pc, #32]	; (1000ade0 <ble_send_slave_sec_request+0x44>)
1000adc0:	4b06      	ldr	r3, [pc, #24]	; (1000addc <ble_send_slave_sec_request+0x40>)
1000adc2:	4798      	blx	r3
		}
	#endif
	return AT_BLE_FAILURE;
1000adc4:	24e2      	movs	r4, #226	; 0xe2
}
1000adc6:	0020      	movs	r0, r4
1000adc8:	bd10      	pop	{r4, pc}
1000adca:	46c0      	nop			; (mov r8, r8)
1000adcc:	1000cdd1 	.word	0x1000cdd1
1000add0:	1001095c 	.word	0x1001095c
1000add4:	1000f805 	.word	0x1000f805
1000add8:	10011470 	.word	0x10011470
1000addc:	1000f6e5 	.word	0x1000f6e5
1000ade0:	10011494 	.word	0x10011494

1000ade4 <ble_connected_state_handler>:
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000ade4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ade6:	465f      	mov	r7, fp
1000ade8:	464e      	mov	r6, r9
1000adea:	4645      	mov	r5, r8
1000adec:	b4e0      	push	{r5, r6, r7}
1000adee:	b09a      	sub	sp, #104	; 0x68
1000adf0:	0005      	movs	r5, r0
	at_ble_connected_t *conn_params;
	uint8_t idx = 0;
	conn_params = (at_ble_connected_t *)params;
	bool peripheral_device_added = false;
	
	if (conn_params->conn_status == AT_BLE_SUCCESS)
1000adf2:	7a86      	ldrb	r6, [r0, #10]
1000adf4:	2e00      	cmp	r6, #0
1000adf6:	d000      	beq.n	1000adfa <ble_connected_state_handler+0x16>
1000adf8:	e0cc      	b.n	1000af94 <ble_connected_state_handler+0x1b0>
	{
		DBG_LOG("Connected to peer device with address 0x%02x%02x%02x%02x%02x%02x",
1000adfa:	4878      	ldr	r0, [pc, #480]	; (1000afdc <ble_connected_state_handler+0x1f8>)
1000adfc:	4f78      	ldr	r7, [pc, #480]	; (1000afe0 <ble_connected_state_handler+0x1fc>)
1000adfe:	47b8      	blx	r7
1000ae00:	792b      	ldrb	r3, [r5, #4]
1000ae02:	796a      	ldrb	r2, [r5, #5]
1000ae04:	79a9      	ldrb	r1, [r5, #6]
1000ae06:	7868      	ldrb	r0, [r5, #1]
1000ae08:	9002      	str	r0, [sp, #8]
1000ae0a:	78a8      	ldrb	r0, [r5, #2]
1000ae0c:	9001      	str	r0, [sp, #4]
1000ae0e:	78e8      	ldrb	r0, [r5, #3]
1000ae10:	9000      	str	r0, [sp, #0]
1000ae12:	4874      	ldr	r0, [pc, #464]	; (1000afe4 <ble_connected_state_handler+0x200>)
1000ae14:	4c74      	ldr	r4, [pc, #464]	; (1000afe8 <ble_connected_state_handler+0x204>)
1000ae16:	47a0      	blx	r4
		conn_params->peer_addr.addr[3],
		conn_params->peer_addr.addr[2],
		conn_params->peer_addr.addr[1],
		conn_params->peer_addr.addr[0]);
		
		DBG_LOG("Connection Handle %d", conn_params->handle);
1000ae18:	4870      	ldr	r0, [pc, #448]	; (1000afdc <ble_connected_state_handler+0x1f8>)
1000ae1a:	47b8      	blx	r7
1000ae1c:	8929      	ldrh	r1, [r5, #8]
1000ae1e:	4873      	ldr	r0, [pc, #460]	; (1000afec <ble_connected_state_handler+0x208>)
1000ae20:	47a0      	blx	r4
		
		memcpy((uint8_t *)&connected_state_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));	
1000ae22:	2212      	movs	r2, #18
1000ae24:	0029      	movs	r1, r5
1000ae26:	4872      	ldr	r0, [pc, #456]	; (1000aff0 <ble_connected_state_handler+0x20c>)
1000ae28:	4b72      	ldr	r3, [pc, #456]	; (1000aff4 <ble_connected_state_handler+0x210>)
1000ae2a:	4798      	blx	r3
		if(memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000ae2c:	9504      	str	r5, [sp, #16]
1000ae2e:	2207      	movs	r2, #7
1000ae30:	0029      	movs	r1, r5
1000ae32:	4871      	ldr	r0, [pc, #452]	; (1000aff8 <ble_connected_state_handler+0x214>)
1000ae34:	4b71      	ldr	r3, [pc, #452]	; (1000affc <ble_connected_state_handler+0x218>)
1000ae36:	4798      	blx	r3
1000ae38:	2800      	cmp	r0, #0
1000ae3a:	d100      	bne.n	1000ae3e <ble_connected_state_handler+0x5a>
1000ae3c:	e0b3      	b.n	1000afa6 <ble_connected_state_handler+0x1c2>
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
1000ae3e:	782b      	ldrb	r3, [r5, #0]
1000ae40:	2b02      	cmp	r3, #2
1000ae42:	d000      	beq.n	1000ae46 <ble_connected_state_handler+0x62>
1000ae44:	e0af      	b.n	1000afa6 <ble_connected_state_handler+0x1c2>
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
1000ae46:	2250      	movs	r2, #80	; 0x50
1000ae48:	2100      	movs	r1, #0
1000ae4a:	a806      	add	r0, sp, #24
1000ae4c:	4b6c      	ldr	r3, [pc, #432]	; (1000b000 <ble_connected_state_handler+0x21c>)
1000ae4e:	4798      	blx	r3
1000ae50:	4f6c      	ldr	r7, [pc, #432]	; (1000b004 <ble_connected_state_handler+0x220>)
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
1000ae52:	2300      	movs	r3, #0
1000ae54:	e00b      	b.n	1000ae6e <ble_connected_state_handler+0x8a>
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000ae56:	1c59      	adds	r1, r3, #1
1000ae58:	7814      	ldrb	r4, [r2, #0]
1000ae5a:	a806      	add	r0, sp, #24
1000ae5c:	54c4      	strb	r4, [r0, r3]
1000ae5e:	3201      	adds	r2, #1
1000ae60:	b28b      	uxth	r3, r1
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
1000ae62:	42b3      	cmp	r3, r6
1000ae64:	d1f7      	bne.n	1000ae56 <ble_connected_state_handler+0x72>
1000ae66:	377c      	adds	r7, #124	; 0x7c
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000ae68:	1e33      	subs	r3, r6, #0
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
1000ae6a:	2b50      	cmp	r3, #80	; 0x50
1000ae6c:	d004      	beq.n	1000ae78 <ble_connected_state_handler+0x94>
1000ae6e:	001e      	movs	r6, r3
1000ae70:	3610      	adds	r6, #16
1000ae72:	b2b6      	uxth	r6, r6
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000ae74:	003a      	movs	r2, r7
1000ae76:	e7ee      	b.n	1000ae56 <ble_connected_state_handler+0x72>
					}
					
				}
				if (nb_keys)
				{
					if(at_ble_random_address_resolve(BLE_MAX_DEVICE_CONNECTED, &conn_params->peer_addr, irk_key) == AT_BLE_SUCCESS)
1000ae78:	aa06      	add	r2, sp, #24
1000ae7a:	0029      	movs	r1, r5
1000ae7c:	2005      	movs	r0, #5
1000ae7e:	4b62      	ldr	r3, [pc, #392]	; (1000b008 <ble_connected_state_handler+0x224>)
1000ae80:	4798      	blx	r3
1000ae82:	1e06      	subs	r6, r0, #0
1000ae84:	d106      	bne.n	1000ae94 <ble_connected_state_handler+0xb0>
					{
						DBG_LOG_DEV("Resolving Random address success**");
1000ae86:	4855      	ldr	r0, [pc, #340]	; (1000afdc <ble_connected_state_handler+0x1f8>)
1000ae88:	4b55      	ldr	r3, [pc, #340]	; (1000afe0 <ble_connected_state_handler+0x1fc>)
1000ae8a:	4798      	blx	r3
1000ae8c:	485f      	ldr	r0, [pc, #380]	; (1000b00c <ble_connected_state_handler+0x228>)
1000ae8e:	4b56      	ldr	r3, [pc, #344]	; (1000afe8 <ble_connected_state_handler+0x204>)
1000ae90:	4798      	blx	r3
						return AT_BLE_SUCCESS;
1000ae92:	e09c      	b.n	1000afce <ble_connected_state_handler+0x1ea>
					}
					else
					{
						DBG_LOG("Resolving Random address failed**");
1000ae94:	4851      	ldr	r0, [pc, #324]	; (1000afdc <ble_connected_state_handler+0x1f8>)
1000ae96:	4b52      	ldr	r3, [pc, #328]	; (1000afe0 <ble_connected_state_handler+0x1fc>)
1000ae98:	4798      	blx	r3
1000ae9a:	485d      	ldr	r0, [pc, #372]	; (1000b010 <ble_connected_state_handler+0x22c>)
1000ae9c:	4b52      	ldr	r3, [pc, #328]	; (1000afe8 <ble_connected_state_handler+0x204>)
1000ae9e:	4798      	blx	r3
						return AT_BLE_FAILURE;
1000aea0:	26e2      	movs	r6, #226	; 0xe2
1000aea2:	e094      	b.n	1000afce <ble_connected_state_handler+0x1ea>
1000aea4:	b2e7      	uxtb	r7, r4
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000aea6:	9405      	str	r4, [sp, #20]
1000aea8:	2207      	movs	r2, #7
1000aeaa:	9904      	ldr	r1, [sp, #16]
1000aeac:	4648      	mov	r0, r9
1000aeae:	47d8      	blx	fp
1000aeb0:	2800      	cmp	r0, #0
1000aeb2:	d109      	bne.n	1000aec8 <ble_connected_state_handler+0xe4>
				{
					ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000aeb4:	9a05      	ldr	r2, [sp, #20]
1000aeb6:	0153      	lsls	r3, r2, #5
1000aeb8:	1a9b      	subs	r3, r3, r2
1000aeba:	009a      	lsls	r2, r3, #2
1000aebc:	4b55      	ldr	r3, [pc, #340]	; (1000b014 <ble_connected_state_handler+0x230>)
1000aebe:	189b      	adds	r3, r3, r2
1000aec0:	335e      	adds	r3, #94	; 0x5e
1000aec2:	2202      	movs	r2, #2
1000aec4:	701a      	strb	r2, [r3, #0]
1000aec6:	e02b      	b.n	1000af20 <ble_connected_state_handler+0x13c>
1000aec8:	3401      	adds	r4, #1
1000aeca:	237c      	movs	r3, #124	; 0x7c
1000aecc:	469c      	mov	ip, r3
1000aece:	44e1      	add	r9, ip
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000aed0:	2c05      	cmp	r4, #5
1000aed2:	d1e7      	bne.n	1000aea4 <ble_connected_state_handler+0xc0>
1000aed4:	e072      	b.n	1000afbc <ble_connected_state_handler+0x1d8>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000aed6:	001c      	movs	r4, r3
1000aed8:	7811      	ldrb	r1, [r2, #0]
1000aeda:	2900      	cmp	r1, #0
1000aedc:	d11a      	bne.n	1000af14 <ble_connected_state_handler+0x130>
1000aede:	e001      	b.n	1000aee4 <ble_connected_state_handler+0x100>
1000aee0:	2400      	movs	r4, #0
1000aee2:	2700      	movs	r7, #0
					{
						/* @Todo Need to Handle Random Address */
						memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));
1000aee4:	0163      	lsls	r3, r4, #5
1000aee6:	4699      	mov	r9, r3
1000aee8:	1b18      	subs	r0, r3, r4
1000aeea:	0080      	lsls	r0, r0, #2
1000aeec:	4b49      	ldr	r3, [pc, #292]	; (1000b014 <ble_connected_state_handler+0x230>)
1000aeee:	4698      	mov	r8, r3
1000aef0:	4440      	add	r0, r8
1000aef2:	2212      	movs	r2, #18
1000aef4:	0029      	movs	r1, r5
1000aef6:	4b3f      	ldr	r3, [pc, #252]	; (1000aff4 <ble_connected_state_handler+0x210>)
1000aef8:	4798      	blx	r3
						ble_device_count++;
1000aefa:	4a47      	ldr	r2, [pc, #284]	; (1000b018 <ble_connected_state_handler+0x234>)
1000aefc:	7813      	ldrb	r3, [r2, #0]
1000aefe:	3301      	adds	r3, #1
1000af00:	b2db      	uxtb	r3, r3
1000af02:	7013      	strb	r3, [r2, #0]
						ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000af04:	464b      	mov	r3, r9
1000af06:	1b1b      	subs	r3, r3, r4
1000af08:	009b      	lsls	r3, r3, #2
1000af0a:	4443      	add	r3, r8
1000af0c:	335e      	adds	r3, #94	; 0x5e
1000af0e:	2202      	movs	r2, #2
1000af10:	701a      	strb	r2, [r3, #0]
						break;
1000af12:	e005      	b.n	1000af20 <ble_connected_state_handler+0x13c>
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000af14:	1c79      	adds	r1, r7, #1
1000af16:	b2cf      	uxtb	r7, r1
1000af18:	3301      	adds	r3, #1
1000af1a:	327c      	adds	r2, #124	; 0x7c
1000af1c:	2f05      	cmp	r7, #5
1000af1e:	d1da      	bne.n	1000aed6 <ble_connected_state_handler+0xf2>
						break;
					}
				}
			}
			
			if(!memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000af20:	2207      	movs	r2, #7
1000af22:	0029      	movs	r1, r5
1000af24:	4834      	ldr	r0, [pc, #208]	; (1000aff8 <ble_connected_state_handler+0x214>)
1000af26:	4b35      	ldr	r3, [pc, #212]	; (1000affc <ble_connected_state_handler+0x218>)
1000af28:	4798      	blx	r3
1000af2a:	2800      	cmp	r0, #0
1000af2c:	d10c      	bne.n	1000af48 <ble_connected_state_handler+0x164>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
1000af2e:	017b      	lsls	r3, r7, #5
1000af30:	1bdb      	subs	r3, r3, r7
1000af32:	009b      	lsls	r3, r3, #2
1000af34:	4a37      	ldr	r2, [pc, #220]	; (1000b014 <ble_connected_state_handler+0x230>)
1000af36:	18d3      	adds	r3, r2, r3
1000af38:	2205      	movs	r2, #5
1000af3a:	749a      	strb	r2, [r3, #18]
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000af3c:	3202      	adds	r2, #2
1000af3e:	2100      	movs	r1, #0
1000af40:	482d      	ldr	r0, [pc, #180]	; (1000aff8 <ble_connected_state_handler+0x214>)
1000af42:	4b2f      	ldr	r3, [pc, #188]	; (1000b000 <ble_connected_state_handler+0x21c>)
1000af44:	4798      	blx	r3
1000af46:	e042      	b.n	1000afce <ble_connected_state_handler+0x1ea>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
			}
			else
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000af48:	4b32      	ldr	r3, [pc, #200]	; (1000b014 <ble_connected_state_handler+0x230>)
1000af4a:	4698      	mov	r8, r3
1000af4c:	017c      	lsls	r4, r7, #5
1000af4e:	1be3      	subs	r3, r4, r7
1000af50:	009b      	lsls	r3, r3, #2
1000af52:	4443      	add	r3, r8
1000af54:	220a      	movs	r2, #10
1000af56:	749a      	strb	r2, [r3, #18]
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000af58:	3a03      	subs	r2, #3
1000af5a:	2100      	movs	r1, #0
1000af5c:	4826      	ldr	r0, [pc, #152]	; (1000aff8 <ble_connected_state_handler+0x214>)
1000af5e:	4b28      	ldr	r3, [pc, #160]	; (1000b000 <ble_connected_state_handler+0x21c>)
1000af60:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
		}		
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000af62:	1be4      	subs	r4, r4, r7
1000af64:	00a4      	lsls	r4, r4, #2
1000af66:	4444      	add	r4, r8
1000af68:	7ca3      	ldrb	r3, [r4, #18]
1000af6a:	2b0a      	cmp	r3, #10
1000af6c:	d12f      	bne.n	1000afce <ble_connected_state_handler+0x1ea>
1000af6e:	e00d      	b.n	1000af8c <ble_connected_state_handler+0x1a8>
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
					
		}
		else
		{
			DBG_LOG("Max number of connection reached: %d ===>Disconnecting...", ble_device_count);
1000af70:	481a      	ldr	r0, [pc, #104]	; (1000afdc <ble_connected_state_handler+0x1f8>)
1000af72:	4b1b      	ldr	r3, [pc, #108]	; (1000afe0 <ble_connected_state_handler+0x1fc>)
1000af74:	4798      	blx	r3
1000af76:	4b28      	ldr	r3, [pc, #160]	; (1000b018 <ble_connected_state_handler+0x234>)
1000af78:	7819      	ldrb	r1, [r3, #0]
1000af7a:	b2c9      	uxtb	r1, r1
1000af7c:	4827      	ldr	r0, [pc, #156]	; (1000b01c <ble_connected_state_handler+0x238>)
1000af7e:	4b1a      	ldr	r3, [pc, #104]	; (1000afe8 <ble_connected_state_handler+0x204>)
1000af80:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
1000af82:	8928      	ldrh	r0, [r5, #8]
1000af84:	2113      	movs	r1, #19
1000af86:	4b26      	ldr	r3, [pc, #152]	; (1000b020 <ble_connected_state_handler+0x23c>)
1000af88:	4798      	blx	r3
1000af8a:	e020      	b.n	1000afce <ble_connected_state_handler+0x1ea>
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
        {
	 		ble_send_slave_sec_request(conn_params->handle);
1000af8c:	8928      	ldrh	r0, [r5, #8]
1000af8e:	4b25      	ldr	r3, [pc, #148]	; (1000b024 <ble_connected_state_handler+0x240>)
1000af90:	4798      	blx	r3
1000af92:	e01c      	b.n	1000afce <ble_connected_state_handler+0x1ea>
        }
#endif
	} 
	else
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
1000af94:	4811      	ldr	r0, [pc, #68]	; (1000afdc <ble_connected_state_handler+0x1f8>)
1000af96:	4b12      	ldr	r3, [pc, #72]	; (1000afe0 <ble_connected_state_handler+0x1fc>)
1000af98:	4798      	blx	r3
1000af9a:	7aa9      	ldrb	r1, [r5, #10]
1000af9c:	4822      	ldr	r0, [pc, #136]	; (1000b028 <ble_connected_state_handler+0x244>)
1000af9e:	4b12      	ldr	r3, [pc, #72]	; (1000afe8 <ble_connected_state_handler+0x204>)
1000afa0:	4798      	blx	r3
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
1000afa2:	2600      	movs	r6, #0
1000afa4:	e013      	b.n	1000afce <ble_connected_state_handler+0x1ea>
					DBG_LOG_DEV("New Connection");
				}				
			}
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
1000afa6:	4b1c      	ldr	r3, [pc, #112]	; (1000b018 <ble_connected_state_handler+0x234>)
1000afa8:	781b      	ldrb	r3, [r3, #0]
1000afaa:	b2db      	uxtb	r3, r3
1000afac:	2b04      	cmp	r3, #4
1000afae:	d8df      	bhi.n	1000af70 <ble_connected_state_handler+0x18c>
1000afb0:	4b18      	ldr	r3, [pc, #96]	; (1000b014 <ble_connected_state_handler+0x230>)
1000afb2:	4699      	mov	r9, r3
1000afb4:	2400      	movs	r4, #0
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000afb6:	4b11      	ldr	r3, [pc, #68]	; (1000affc <ble_connected_state_handler+0x218>)
1000afb8:	469b      	mov	fp, r3
1000afba:	e773      	b.n	1000aea4 <ble_connected_state_handler+0xc0>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000afbc:	235e      	movs	r3, #94	; 0x5e
1000afbe:	4a15      	ldr	r2, [pc, #84]	; (1000b014 <ble_connected_state_handler+0x230>)
1000afc0:	5cd3      	ldrb	r3, [r2, r3]
1000afc2:	2b00      	cmp	r3, #0
1000afc4:	d08c      	beq.n	1000aee0 <ble_connected_state_handler+0xfc>
1000afc6:	4a19      	ldr	r2, [pc, #100]	; (1000b02c <ble_connected_state_handler+0x248>)
1000afc8:	2301      	movs	r3, #1
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000afca:	2701      	movs	r7, #1
1000afcc:	e783      	b.n	1000aed6 <ble_connected_state_handler+0xf2>
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
}
1000afce:	0030      	movs	r0, r6
1000afd0:	b01a      	add	sp, #104	; 0x68
1000afd2:	bc1c      	pop	{r2, r3, r4}
1000afd4:	4690      	mov	r8, r2
1000afd6:	4699      	mov	r9, r3
1000afd8:	46a3      	mov	fp, r4
1000afda:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000afdc:	1001095c 	.word	0x1001095c
1000afe0:	1000f805 	.word	0x1000f805
1000afe4:	100114b4 	.word	0x100114b4
1000afe8:	1000f6e5 	.word	0x1000f6e5
1000afec:	100114f8 	.word	0x100114f8
1000aff0:	100137a0 	.word	0x100137a0
1000aff4:	1000f6c3 	.word	0x1000f6c3
1000aff8:	100121a4 	.word	0x100121a4
1000affc:	1000f6a5 	.word	0x1000f6a5
1000b000:	1000f6d5 	.word	0x1000f6d5
1000b004:	1001353a 	.word	0x1001353a
1000b008:	1000c8e5 	.word	0x1000c8e5
1000b00c:	10011510 	.word	0x10011510
1000b010:	10011534 	.word	0x10011534
1000b014:	100134f4 	.word	0x100134f4
1000b018:	10013760 	.word	0x10013760
1000b01c:	10011558 	.word	0x10011558
1000b020:	1000c8b9 	.word	0x1000c8b9
1000b024:	1000ad9d 	.word	0x1000ad9d
1000b028:	10011594 	.word	0x10011594
1000b02c:	100135ce 	.word	0x100135ce

1000b030 <ble_resolv_rand_addr_handler>:

at_ble_status_t ble_resolv_rand_addr_handler(void *params)
{
1000b030:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b032:	4647      	mov	r7, r8
1000b034:	b480      	push	{r7}
	uint8_t idx;	
	bool device_found = false;
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
1000b036:	7803      	ldrb	r3, [r0, #0]
1000b038:	2b00      	cmp	r3, #0
1000b03a:	d152      	bne.n	1000b0e2 <ble_resolv_rand_addr_handler+0xb2>
1000b03c:	4d3e      	ldr	r5, [pc, #248]	; (1000b138 <ble_resolv_rand_addr_handler+0x108>)
1000b03e:	2400      	movs	r4, #0
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			/* Check the Resolved Address */
			if (!memcmp((uint8_t *)ble_resolv_rand_addr_status->irk, (uint8_t *)ble_dev_info[idx].bond_info.peer_irk.key, AT_BLE_MAX_KEY_LEN))
1000b040:	1c46      	adds	r6, r0, #1
1000b042:	4f3e      	ldr	r7, [pc, #248]	; (1000b13c <ble_resolv_rand_addr_handler+0x10c>)
1000b044:	2210      	movs	r2, #16
1000b046:	0029      	movs	r1, r5
1000b048:	0030      	movs	r0, r6
1000b04a:	47b8      	blx	r7
1000b04c:	2800      	cmp	r0, #0
1000b04e:	d031      	beq.n	1000b0b4 <ble_resolv_rand_addr_handler+0x84>
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000b050:	3401      	adds	r4, #1
1000b052:	b2e4      	uxtb	r4, r4
1000b054:	357c      	adds	r5, #124	; 0x7c
1000b056:	2c05      	cmp	r4, #5
1000b058:	d1f4      	bne.n	1000b044 <ble_resolv_rand_addr_handler+0x14>
1000b05a:	e042      	b.n	1000b0e2 <ble_resolv_rand_addr_handler+0xb2>
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000b05c:	001d      	movs	r5, r3
1000b05e:	7811      	ldrb	r1, [r2, #0]
1000b060:	2900      	cmp	r1, #0
1000b062:	d11b      	bne.n	1000b09c <ble_resolv_rand_addr_handler+0x6c>
1000b064:	e001      	b.n	1000b06a <ble_resolv_rand_addr_handler+0x3a>
1000b066:	2500      	movs	r5, #0
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000b068:	2400      	movs	r4, #0
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
			{
				memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000b06a:	4b35      	ldr	r3, [pc, #212]	; (1000b140 <ble_resolv_rand_addr_handler+0x110>)
1000b06c:	4698      	mov	r8, r3
1000b06e:	016e      	lsls	r6, r5, #5
1000b070:	1b77      	subs	r7, r6, r5
1000b072:	00bf      	lsls	r7, r7, #2
1000b074:	4447      	add	r7, r8
1000b076:	2212      	movs	r2, #18
1000b078:	4932      	ldr	r1, [pc, #200]	; (1000b144 <ble_resolv_rand_addr_handler+0x114>)
1000b07a:	0038      	movs	r0, r7
1000b07c:	4b32      	ldr	r3, [pc, #200]	; (1000b148 <ble_resolv_rand_addr_handler+0x118>)
1000b07e:	4798      	blx	r3
				ble_device_count++;
1000b080:	4a32      	ldr	r2, [pc, #200]	; (1000b14c <ble_resolv_rand_addr_handler+0x11c>)
1000b082:	7813      	ldrb	r3, [r2, #0]
1000b084:	3301      	adds	r3, #1
1000b086:	b2db      	uxtb	r3, r3
1000b088:	7013      	strb	r3, [r2, #0]
				ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000b08a:	375e      	adds	r7, #94	; 0x5e
1000b08c:	2302      	movs	r3, #2
1000b08e:	703b      	strb	r3, [r7, #0]
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000b090:	1b75      	subs	r5, r6, r5
1000b092:	00ad      	lsls	r5, r5, #2
1000b094:	4445      	add	r5, r8
1000b096:	3308      	adds	r3, #8
1000b098:	74ab      	strb	r3, [r5, #18]
				peripheral_device_added = true;
				break;
1000b09a:	e031      	b.n	1000b100 <ble_resolv_rand_addr_handler+0xd0>
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000b09c:	3401      	adds	r4, #1
1000b09e:	b2e4      	uxtb	r4, r4
1000b0a0:	3301      	adds	r3, #1
1000b0a2:	327c      	adds	r2, #124	; 0x7c
1000b0a4:	2c05      	cmp	r4, #5
1000b0a6:	d1d9      	bne.n	1000b05c <ble_resolv_rand_addr_handler+0x2c>
1000b0a8:	e03a      	b.n	1000b120 <ble_resolv_rand_addr_handler+0xf0>
	}
	DBG_LOG_DEV("Device idx:%d",idx);
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
	{
		ble_send_slave_sec_request(connected_state_info.handle);
1000b0aa:	4b26      	ldr	r3, [pc, #152]	; (1000b144 <ble_resolv_rand_addr_handler+0x114>)
1000b0ac:	8918      	ldrh	r0, [r3, #8]
1000b0ae:	4b28      	ldr	r3, [pc, #160]	; (1000b150 <ble_resolv_rand_addr_handler+0x120>)
1000b0b0:	4798      	blx	r3
1000b0b2:	e03c      	b.n	1000b12e <ble_resolv_rand_addr_handler+0xfe>
		
	}
	
	if (device_found)
	{
		DBG_LOG_DEV("##########Device Found");
1000b0b4:	4827      	ldr	r0, [pc, #156]	; (1000b154 <ble_resolv_rand_addr_handler+0x124>)
1000b0b6:	4b28      	ldr	r3, [pc, #160]	; (1000b158 <ble_resolv_rand_addr_handler+0x128>)
1000b0b8:	4798      	blx	r3
1000b0ba:	4828      	ldr	r0, [pc, #160]	; (1000b15c <ble_resolv_rand_addr_handler+0x12c>)
1000b0bc:	4b28      	ldr	r3, [pc, #160]	; (1000b160 <ble_resolv_rand_addr_handler+0x130>)
1000b0be:	4798      	blx	r3
		ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000b0c0:	481f      	ldr	r0, [pc, #124]	; (1000b140 <ble_resolv_rand_addr_handler+0x110>)
1000b0c2:	0163      	lsls	r3, r4, #5
1000b0c4:	1b1a      	subs	r2, r3, r4
1000b0c6:	0092      	lsls	r2, r2, #2
1000b0c8:	1882      	adds	r2, r0, r2
1000b0ca:	0011      	movs	r1, r2
1000b0cc:	315e      	adds	r1, #94	; 0x5e
1000b0ce:	2502      	movs	r5, #2
1000b0d0:	700d      	strb	r5, [r1, #0]
		ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000b0d2:	210a      	movs	r1, #10
1000b0d4:	7491      	strb	r1, [r2, #18]
		memcpy((uint8_t *)&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000b0d6:	0010      	movs	r0, r2
1000b0d8:	2212      	movs	r2, #18
1000b0da:	491a      	ldr	r1, [pc, #104]	; (1000b144 <ble_resolv_rand_addr_handler+0x114>)
1000b0dc:	4b1a      	ldr	r3, [pc, #104]	; (1000b148 <ble_resolv_rand_addr_handler+0x118>)
1000b0de:	4798      	blx	r3
1000b0e0:	e00e      	b.n	1000b100 <ble_resolv_rand_addr_handler+0xd0>
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
1000b0e2:	481c      	ldr	r0, [pc, #112]	; (1000b154 <ble_resolv_rand_addr_handler+0x124>)
1000b0e4:	4b1c      	ldr	r3, [pc, #112]	; (1000b158 <ble_resolv_rand_addr_handler+0x128>)
1000b0e6:	4798      	blx	r3
1000b0e8:	481e      	ldr	r0, [pc, #120]	; (1000b164 <ble_resolv_rand_addr_handler+0x134>)
1000b0ea:	4b1d      	ldr	r3, [pc, #116]	; (1000b160 <ble_resolv_rand_addr_handler+0x130>)
1000b0ec:	4798      	blx	r3
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000b0ee:	235e      	movs	r3, #94	; 0x5e
1000b0f0:	4a13      	ldr	r2, [pc, #76]	; (1000b140 <ble_resolv_rand_addr_handler+0x110>)
1000b0f2:	5cd3      	ldrb	r3, [r2, r3]
1000b0f4:	2b00      	cmp	r3, #0
1000b0f6:	d0b6      	beq.n	1000b066 <ble_resolv_rand_addr_handler+0x36>
1000b0f8:	4a1b      	ldr	r2, [pc, #108]	; (1000b168 <ble_resolv_rand_addr_handler+0x138>)
1000b0fa:	2301      	movs	r3, #1
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000b0fc:	2401      	movs	r4, #1
1000b0fe:	e7ad      	b.n	1000b05c <ble_resolv_rand_addr_handler+0x2c>
				peripheral_device_added = true;
				break;
			}
		}
	}
	DBG_LOG_DEV("Device idx:%d",idx);
1000b100:	4814      	ldr	r0, [pc, #80]	; (1000b154 <ble_resolv_rand_addr_handler+0x124>)
1000b102:	4b15      	ldr	r3, [pc, #84]	; (1000b158 <ble_resolv_rand_addr_handler+0x128>)
1000b104:	4798      	blx	r3
1000b106:	0021      	movs	r1, r4
1000b108:	4818      	ldr	r0, [pc, #96]	; (1000b16c <ble_resolv_rand_addr_handler+0x13c>)
1000b10a:	4b15      	ldr	r3, [pc, #84]	; (1000b160 <ble_resolv_rand_addr_handler+0x130>)
1000b10c:	4798      	blx	r3
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000b10e:	0163      	lsls	r3, r4, #5
1000b110:	1b1c      	subs	r4, r3, r4
1000b112:	00a4      	lsls	r4, r4, #2
1000b114:	4b0a      	ldr	r3, [pc, #40]	; (1000b140 <ble_resolv_rand_addr_handler+0x110>)
1000b116:	191c      	adds	r4, r3, r4
1000b118:	7ca3      	ldrb	r3, [r4, #18]
1000b11a:	2b0a      	cmp	r3, #10
1000b11c:	d107      	bne.n	1000b12e <ble_resolv_rand_addr_handler+0xfe>
1000b11e:	e7c4      	b.n	1000b0aa <ble_resolv_rand_addr_handler+0x7a>
				peripheral_device_added = true;
				break;
			}
		}
	}
	DBG_LOG_DEV("Device idx:%d",idx);
1000b120:	480c      	ldr	r0, [pc, #48]	; (1000b154 <ble_resolv_rand_addr_handler+0x124>)
1000b122:	4b0d      	ldr	r3, [pc, #52]	; (1000b158 <ble_resolv_rand_addr_handler+0x128>)
1000b124:	4798      	blx	r3
1000b126:	2105      	movs	r1, #5
1000b128:	4810      	ldr	r0, [pc, #64]	; (1000b16c <ble_resolv_rand_addr_handler+0x13c>)
1000b12a:	4b0d      	ldr	r3, [pc, #52]	; (1000b160 <ble_resolv_rand_addr_handler+0x130>)
1000b12c:	4798      	blx	r3
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
	
}
1000b12e:	2000      	movs	r0, #0
1000b130:	bc04      	pop	{r2}
1000b132:	4690      	mov	r8, r2
1000b134:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b136:	46c0      	nop			; (mov r8, r8)
1000b138:	1001353a 	.word	0x1001353a
1000b13c:	1000f6a5 	.word	0x1000f6a5
1000b140:	100134f4 	.word	0x100134f4
1000b144:	100137a0 	.word	0x100137a0
1000b148:	1000f6c3 	.word	0x1000f6c3
1000b14c:	10013760 	.word	0x10013760
1000b150:	1000ad9d 	.word	0x1000ad9d
1000b154:	1001095c 	.word	0x1001095c
1000b158:	1000f805 	.word	0x1000f805
1000b15c:	100115bc 	.word	0x100115bc
1000b160:	1000f6e5 	.word	0x1000f6e5
1000b164:	100115d4 	.word	0x100115d4
1000b168:	100135ce 	.word	0x100135ce
1000b16c:	100115f0 	.word	0x100115f0

1000b170 <uart_read_complete_callback>:

void _time_start(unsigned int sec);
unsigned int _time_done(void);

static void uart_read_complete_callback(struct uart_module *const module)
{
1000b170:	b510      	push	{r4, lr}
	if(read_status == UART_READ_WAITING) {
1000b172:	4b0e      	ldr	r3, [pc, #56]	; (1000b1ac <uart_read_complete_callback+0x3c>)
1000b174:	781b      	ldrb	r3, [r3, #0]
1000b176:	2b01      	cmp	r3, #1
1000b178:	d10b      	bne.n	1000b192 <uart_read_complete_callback+0x22>
		read_status = UART_READ_DONE;
1000b17a:	2202      	movs	r2, #2
1000b17c:	4b0b      	ldr	r3, [pc, #44]	; (1000b1ac <uart_read_complete_callback+0x3c>)
1000b17e:	701a      	strb	r2, [r3, #0]
		
		if(user_callback_func == NULL)
1000b180:	4b0b      	ldr	r3, [pc, #44]	; (1000b1b0 <uart_read_complete_callback+0x40>)
1000b182:	681b      	ldr	r3, [r3, #0]
1000b184:	2b00      	cmp	r3, #0
1000b186:	d110      	bne.n	1000b1aa <uart_read_complete_callback+0x3a>
			uart_disable_callback(&uart_instance, UART_RX_COMPLETE);
1000b188:	2102      	movs	r1, #2
1000b18a:	480a      	ldr	r0, [pc, #40]	; (1000b1b4 <uart_read_complete_callback+0x44>)
1000b18c:	4b0a      	ldr	r3, [pc, #40]	; (1000b1b8 <uart_read_complete_callback+0x48>)
1000b18e:	4798      	blx	r3
1000b190:	e00b      	b.n	1000b1aa <uart_read_complete_callback+0x3a>
	}
	else if(user_callback_func != NULL) {
1000b192:	4b07      	ldr	r3, [pc, #28]	; (1000b1b0 <uart_read_complete_callback+0x40>)
1000b194:	681b      	ldr	r3, [r3, #0]
1000b196:	2b00      	cmp	r3, #0
1000b198:	d007      	beq.n	1000b1aa <uart_read_complete_callback+0x3a>
		user_callback_func(string_input[0]);
1000b19a:	4c08      	ldr	r4, [pc, #32]	; (1000b1bc <uart_read_complete_callback+0x4c>)
1000b19c:	7820      	ldrb	r0, [r4, #0]
1000b19e:	4798      	blx	r3
		uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000b1a0:	2201      	movs	r2, #1
1000b1a2:	0021      	movs	r1, r4
1000b1a4:	4803      	ldr	r0, [pc, #12]	; (1000b1b4 <uart_read_complete_callback+0x44>)
1000b1a6:	4b06      	ldr	r3, [pc, #24]	; (1000b1c0 <uart_read_complete_callback+0x50>)
1000b1a8:	4798      	blx	r3
	}
	else {
		//Nothing to do.
	}
}
1000b1aa:	bd10      	pop	{r4, pc}
1000b1ac:	100131b0 	.word	0x100131b0
1000b1b0:	100131b8 	.word	0x100131b8
1000b1b4:	10013d1c 	.word	0x10013d1c
1000b1b8:	10009df1 	.word	0x10009df1
1000b1bc:	100131b4 	.word	0x100131b4
1000b1c0:	10009d95 	.word	0x10009d95

1000b1c4 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct uart_module *const module,
		uint8_t *c)
{
1000b1c4:	b570      	push	{r4, r5, r6, lr}
1000b1c6:	0006      	movs	r6, r0
1000b1c8:	000d      	movs	r5, r1
	while(STATUS_OK != uart_read_wait(module, c));
1000b1ca:	4c03      	ldr	r4, [pc, #12]	; (1000b1d8 <usart_serial_getchar+0x14>)
1000b1cc:	0029      	movs	r1, r5
1000b1ce:	0030      	movs	r0, r6
1000b1d0:	47a0      	blx	r4
1000b1d2:	2800      	cmp	r0, #0
1000b1d4:	d1fa      	bne.n	1000b1cc <usart_serial_getchar+0x8>
}
1000b1d6:	bd70      	pop	{r4, r5, r6, pc}
1000b1d8:	10009d81 	.word	0x10009d81

1000b1dc <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct uart_module *const module,
		uint8_t c)
{
1000b1dc:	b570      	push	{r4, r5, r6, lr}
1000b1de:	0006      	movs	r6, r0
1000b1e0:	000d      	movs	r5, r1
	while(STATUS_OK !=uart_write_wait(module, c));
1000b1e2:	4c03      	ldr	r4, [pc, #12]	; (1000b1f0 <usart_serial_putchar+0x14>)
1000b1e4:	0029      	movs	r1, r5
1000b1e6:	0030      	movs	r0, r6
1000b1e8:	47a0      	blx	r4
1000b1ea:	2800      	cmp	r0, #0
1000b1ec:	d1fa      	bne.n	1000b1e4 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
1000b1ee:	bd70      	pop	{r4, r5, r6, pc}
1000b1f0:	10009d71 	.word	0x10009d71

1000b1f4 <serial_console_init>:

void serial_console_init(void)
{
1000b1f4:	b570      	push	{r4, r5, r6, lr}
	system_clock_config(CLOCK_RESOURCE_XO_26_MHZ, CLOCK_FREQ_26_MHZ);
1000b1f6:	2100      	movs	r1, #0
1000b1f8:	2000      	movs	r0, #0
1000b1fa:	4b19      	ldr	r3, [pc, #100]	; (1000b260 <serial_console_init+0x6c>)
1000b1fc:	4798      	blx	r3

	uart_get_config_defaults(&config_uart);
1000b1fe:	4c19      	ldr	r4, [pc, #100]	; (1000b264 <serial_console_init+0x70>)
1000b200:	0020      	movs	r0, r4
1000b202:	4b19      	ldr	r3, [pc, #100]	; (1000b268 <serial_console_init+0x74>)
1000b204:	4798      	blx	r3

	config_uart.baud_rate = CONF_STDIO_BAUDRATE;
1000b206:	23e1      	movs	r3, #225	; 0xe1
1000b208:	025b      	lsls	r3, r3, #9
1000b20a:	6023      	str	r3, [r4, #0]
	config_uart.pin_number_pad[0] = EDBG_CDC_PIN_PAD0;
1000b20c:	2302      	movs	r3, #2
1000b20e:	60a3      	str	r3, [r4, #8]
	config_uart.pin_number_pad[1] = EDBG_CDC_PIN_PAD1;
1000b210:	2203      	movs	r2, #3
1000b212:	60e2      	str	r2, [r4, #12]
	config_uart.pin_number_pad[2] = EDBG_CDC_PIN_PAD2;
1000b214:	3201      	adds	r2, #1
1000b216:	6122      	str	r2, [r4, #16]
	config_uart.pin_number_pad[3] = EDBG_CDC_PIN_PAD3;
1000b218:	3201      	adds	r2, #1
1000b21a:	6162      	str	r2, [r4, #20]
	
	config_uart.pinmux_sel_pad[0] = EDBG_CDC_MUX_PAD0;
1000b21c:	61a3      	str	r3, [r4, #24]
	config_uart.pinmux_sel_pad[1] = EDBG_CDC_MUX_PAD1;
1000b21e:	61e3      	str	r3, [r4, #28]
	config_uart.pinmux_sel_pad[2] = EDBG_CDC_MUX_PAD2;
1000b220:	6223      	str	r3, [r4, #32]
	config_uart.pinmux_sel_pad[3] = EDBG_CDC_MUX_PAD3;
1000b222:	6263      	str	r3, [r4, #36]	; 0x24
static inline void stdio_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	stdio_base = (void *)module;
1000b224:	4d11      	ldr	r5, [pc, #68]	; (1000b26c <serial_console_init+0x78>)
1000b226:	4b12      	ldr	r3, [pc, #72]	; (1000b270 <serial_console_init+0x7c>)
1000b228:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
1000b22a:	4a12      	ldr	r2, [pc, #72]	; (1000b274 <serial_console_init+0x80>)
1000b22c:	4b12      	ldr	r3, [pc, #72]	; (1000b278 <serial_console_init+0x84>)
1000b22e:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
1000b230:	4a12      	ldr	r2, [pc, #72]	; (1000b27c <serial_console_init+0x88>)
1000b232:	4b13      	ldr	r3, [pc, #76]	; (1000b280 <serial_console_init+0x8c>)
1000b234:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	if (uart_init(module, hw, config) == STATUS_OK) {
1000b236:	0022      	movs	r2, r4
1000b238:	4912      	ldr	r1, [pc, #72]	; (1000b284 <serial_console_init+0x90>)
1000b23a:	0028      	movs	r0, r5
1000b23c:	4b12      	ldr	r3, [pc, #72]	; (1000b288 <serial_console_init+0x94>)
1000b23e:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
1000b240:	4e12      	ldr	r6, [pc, #72]	; (1000b28c <serial_console_init+0x98>)
1000b242:	6833      	ldr	r3, [r6, #0]
1000b244:	6898      	ldr	r0, [r3, #8]
1000b246:	2100      	movs	r1, #0
1000b248:	4c11      	ldr	r4, [pc, #68]	; (1000b290 <serial_console_init+0x9c>)
1000b24a:	47a0      	blx	r4
	setbuf(stdin, NULL);
1000b24c:	6833      	ldr	r3, [r6, #0]
1000b24e:	6858      	ldr	r0, [r3, #4]
1000b250:	2100      	movs	r1, #0
1000b252:	47a0      	blx	r4

	stdio_serial_init(&uart_instance, CONF_STDIO_USART_MODULE, &config_uart);
	
	uart_register_callback(&uart_instance, uart_read_complete_callback, UART_RX_COMPLETE);
1000b254:	2202      	movs	r2, #2
1000b256:	490f      	ldr	r1, [pc, #60]	; (1000b294 <serial_console_init+0xa0>)
1000b258:	0028      	movs	r0, r5
1000b25a:	4b0f      	ldr	r3, [pc, #60]	; (1000b298 <serial_console_init+0xa4>)
1000b25c:	4798      	blx	r3
}
1000b25e:	bd70      	pop	{r4, r5, r6, pc}
1000b260:	10008d91 	.word	0x10008d91
1000b264:	10013d40 	.word	0x10013d40
1000b268:	10009b89 	.word	0x10009b89
1000b26c:	10013d1c 	.word	0x10013d1c
1000b270:	100134d8 	.word	0x100134d8
1000b274:	1000b1dd 	.word	0x1000b1dd
1000b278:	100134d4 	.word	0x100134d4
1000b27c:	1000b1c5 	.word	0x1000b1c5
1000b280:	100134d0 	.word	0x100134d0
1000b284:	40004000 	.word	0x40004000
1000b288:	10009bb5 	.word	0x10009bb5
1000b28c:	10011890 	.word	0x10011890
1000b290:	1000f891 	.word	0x1000f891
1000b294:	1000b171 	.word	0x1000b171
1000b298:	10009dbd 	.word	0x10009dbd

1000b29c <_time_start>:

void _time_start(unsigned int sec)
{
1000b29c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b29e:	b083      	sub	sp, #12
1000b2a0:	0005      	movs	r5, r0
	system_clock_get_value();
1000b2a2:	4c0d      	ldr	r4, [pc, #52]	; (1000b2d8 <_time_start+0x3c>)
1000b2a4:	47a0      	blx	r4
	unsigned int main_clk = system_clock_get_value();
1000b2a6:	47a0      	blx	r4

	tick = (((double)(main_clk)) * ((double)0.0000493)) * (sec * 1000);
1000b2a8:	4f0c      	ldr	r7, [pc, #48]	; (1000b2dc <_time_start+0x40>)
1000b2aa:	47b8      	blx	r7
1000b2ac:	4e0c      	ldr	r6, [pc, #48]	; (1000b2e0 <_time_start+0x44>)
1000b2ae:	4a0d      	ldr	r2, [pc, #52]	; (1000b2e4 <_time_start+0x48>)
1000b2b0:	4b0d      	ldr	r3, [pc, #52]	; (1000b2e8 <_time_start+0x4c>)
1000b2b2:	47b0      	blx	r6
1000b2b4:	9000      	str	r0, [sp, #0]
1000b2b6:	9101      	str	r1, [sp, #4]
1000b2b8:	20fa      	movs	r0, #250	; 0xfa
1000b2ba:	0080      	lsls	r0, r0, #2
1000b2bc:	4368      	muls	r0, r5
1000b2be:	47b8      	blx	r7
1000b2c0:	0002      	movs	r2, r0
1000b2c2:	000b      	movs	r3, r1
1000b2c4:	9800      	ldr	r0, [sp, #0]
1000b2c6:	9901      	ldr	r1, [sp, #4]
1000b2c8:	47b0      	blx	r6
1000b2ca:	4b08      	ldr	r3, [pc, #32]	; (1000b2ec <_time_start+0x50>)
1000b2cc:	4798      	blx	r3
1000b2ce:	4b08      	ldr	r3, [pc, #32]	; (1000b2f0 <_time_start+0x54>)
1000b2d0:	6018      	str	r0, [r3, #0]
}
1000b2d2:	b003      	add	sp, #12
1000b2d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b2d6:	46c0      	nop			; (mov r8, r8)
1000b2d8:	10008e15 	.word	0x10008e15
1000b2dc:	1000f315 	.word	0x1000f315
1000b2e0:	1000e70d 	.word	0x1000e70d
1000b2e4:	19feaec7 	.word	0x19feaec7
1000b2e8:	3f09d8ef 	.word	0x3f09d8ef
1000b2ec:	1000e6d1 	.word	0x1000e6d1
1000b2f0:	100131ac 	.word	0x100131ac

1000b2f4 <_time_done>:

unsigned int _time_done()
{
	return --tick;
1000b2f4:	4b02      	ldr	r3, [pc, #8]	; (1000b300 <_time_done+0xc>)
1000b2f6:	681a      	ldr	r2, [r3, #0]
1000b2f8:	1e50      	subs	r0, r2, #1
1000b2fa:	6018      	str	r0, [r3, #0]
}
1000b2fc:	4770      	bx	lr
1000b2fe:	46c0      	nop			; (mov r8, r8)
1000b300:	100131ac 	.word	0x100131ac

1000b304 <getchar_b11_timeout>:

int getchar_b11_timeout(unsigned int sec)
{
1000b304:	b570      	push	{r4, r5, r6, lr}
1000b306:	0004      	movs	r4, r0
	read_status = UART_READ_WAITING;
1000b308:	2201      	movs	r2, #1
1000b30a:	4b11      	ldr	r3, [pc, #68]	; (1000b350 <getchar_b11_timeout+0x4c>)
1000b30c:	701a      	strb	r2, [r3, #0]
	
	if(user_callback_func == NULL)
1000b30e:	4b11      	ldr	r3, [pc, #68]	; (1000b354 <getchar_b11_timeout+0x50>)
1000b310:	681b      	ldr	r3, [r3, #0]
1000b312:	2b00      	cmp	r3, #0
1000b314:	d103      	bne.n	1000b31e <getchar_b11_timeout+0x1a>
		uart_enable_callback(&uart_instance, UART_RX_COMPLETE);
1000b316:	2102      	movs	r1, #2
1000b318:	480f      	ldr	r0, [pc, #60]	; (1000b358 <getchar_b11_timeout+0x54>)
1000b31a:	4b10      	ldr	r3, [pc, #64]	; (1000b35c <getchar_b11_timeout+0x58>)
1000b31c:	4798      	blx	r3

	_time_start(sec);
1000b31e:	0020      	movs	r0, r4
1000b320:	4b0f      	ldr	r3, [pc, #60]	; (1000b360 <getchar_b11_timeout+0x5c>)
1000b322:	4798      	blx	r3
	
	string_input[0] = 0;
1000b324:	490f      	ldr	r1, [pc, #60]	; (1000b364 <getchar_b11_timeout+0x60>)
1000b326:	2300      	movs	r3, #0
1000b328:	700b      	strb	r3, [r1, #0]
	uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000b32a:	2201      	movs	r2, #1
1000b32c:	480a      	ldr	r0, [pc, #40]	; (1000b358 <getchar_b11_timeout+0x54>)
1000b32e:	4b0e      	ldr	r3, [pc, #56]	; (1000b368 <getchar_b11_timeout+0x64>)
1000b330:	4798      	blx	r3
	
	while (read_status != UART_READ_DONE && _time_done() > 0 );
1000b332:	4c07      	ldr	r4, [pc, #28]	; (1000b350 <getchar_b11_timeout+0x4c>)
1000b334:	4d0d      	ldr	r5, [pc, #52]	; (1000b36c <getchar_b11_timeout+0x68>)
1000b336:	7823      	ldrb	r3, [r4, #0]
1000b338:	2b02      	cmp	r3, #2
1000b33a:	d002      	beq.n	1000b342 <getchar_b11_timeout+0x3e>
1000b33c:	47a8      	blx	r5
1000b33e:	2800      	cmp	r0, #0
1000b340:	d1f9      	bne.n	1000b336 <getchar_b11_timeout+0x32>
	
	read_status = UART_READ_NONE;
1000b342:	2200      	movs	r2, #0
1000b344:	4b02      	ldr	r3, [pc, #8]	; (1000b350 <getchar_b11_timeout+0x4c>)
1000b346:	701a      	strb	r2, [r3, #0]

	return string_input[0];
1000b348:	4b06      	ldr	r3, [pc, #24]	; (1000b364 <getchar_b11_timeout+0x60>)
1000b34a:	7818      	ldrb	r0, [r3, #0]
}
1000b34c:	bd70      	pop	{r4, r5, r6, pc}
1000b34e:	46c0      	nop			; (mov r8, r8)
1000b350:	100131b0 	.word	0x100131b0
1000b354:	100131b8 	.word	0x100131b8
1000b358:	10013d1c 	.word	0x10013d1c
1000b35c:	10009dd1 	.word	0x10009dd1
1000b360:	1000b29d 	.word	0x1000b29d
1000b364:	100131b4 	.word	0x100131b4
1000b368:	10009d95 	.word	0x10009d95
1000b36c:	1000b2f5 	.word	0x1000b2f5

1000b370 <platform_event_free>:
void platform_event_free(struct platform_event* event);
//struct str_watched_event watched_event;

void platform_event_free(struct platform_event* event)
{
	event->next = platform_event_free_list;
1000b370:	4b02      	ldr	r3, [pc, #8]	; (1000b37c <platform_event_free+0xc>)
1000b372:	681a      	ldr	r2, [r3, #0]
1000b374:	6002      	str	r2, [r0, #0]
	platform_event_free_list = event;
1000b376:	6018      	str	r0, [r3, #0]
}
1000b378:	4770      	bx	lr
1000b37a:	46c0      	nop			; (mov r8, r8)
1000b37c:	100131c0 	.word	0x100131c0

1000b380 <platform_event_post>:

void platform_event_post(uint16_t event_type, void * data, uint16_t data_len)
{
1000b380:	b530      	push	{r4, r5, lr}
	// get a free event object
	struct platform_event* evt = platform_event_free_list;
1000b382:	4b0b      	ldr	r3, [pc, #44]	; (1000b3b0 <platform_event_post+0x30>)
1000b384:	681c      	ldr	r4, [r3, #0]
	if(evt != NULL)
1000b386:	2c00      	cmp	r4, #0
1000b388:	d011      	beq.n	1000b3ae <platform_event_post+0x2e>
	{
		platform_event_free_list = evt->next;
1000b38a:	6825      	ldr	r5, [r4, #0]
1000b38c:	601d      	str	r5, [r3, #0]
		
		evt->next = NULL;
1000b38e:	2300      	movs	r3, #0
1000b390:	6023      	str	r3, [r4, #0]
		evt->data = data;
1000b392:	60a1      	str	r1, [r4, #8]
		evt->data_len = data_len;
1000b394:	80e2      	strh	r2, [r4, #6]
		evt->event_type = event_type;
1000b396:	80a0      	strh	r0, [r4, #4]

		if(platform_event_pending_list == NULL)
1000b398:	4b06      	ldr	r3, [pc, #24]	; (1000b3b4 <platform_event_post+0x34>)
1000b39a:	681a      	ldr	r2, [r3, #0]
1000b39c:	2a00      	cmp	r2, #0
1000b39e:	d102      	bne.n	1000b3a6 <platform_event_post+0x26>
		{
			platform_event_pending_list = evt;
1000b3a0:	601c      	str	r4, [r3, #0]
1000b3a2:	e004      	b.n	1000b3ae <platform_event_post+0x2e>
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
			{
				cur = cur->next;
1000b3a4:	001a      	movs	r2, r3
			platform_event_pending_list = evt;
		}
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
1000b3a6:	6813      	ldr	r3, [r2, #0]
1000b3a8:	2b00      	cmp	r3, #0
1000b3aa:	d1fb      	bne.n	1000b3a4 <platform_event_post+0x24>
			{
				cur = cur->next;
			}
			cur->next = evt;
1000b3ac:	6014      	str	r4, [r2, #0]
		}
		
		//platform_event_signal();
	}
	
}
1000b3ae:	bd30      	pop	{r4, r5, pc}
1000b3b0:	100131c0 	.word	0x100131c0
1000b3b4:	100131bc 	.word	0x100131bc

1000b3b8 <platform_event_init>:
	return status;
	
}

void platform_event_init()
{
1000b3b8:	b570      	push	{r4, r5, r6, lr}
	uint32_t i;
	platform_event_free_list = NULL;
1000b3ba:	2300      	movs	r3, #0
1000b3bc:	4a06      	ldr	r2, [pc, #24]	; (1000b3d8 <platform_event_init+0x20>)
1000b3be:	6013      	str	r3, [r2, #0]
	platform_event_pending_list = NULL;
1000b3c0:	4a06      	ldr	r2, [pc, #24]	; (1000b3dc <platform_event_init+0x24>)
1000b3c2:	6013      	str	r3, [r2, #0]
1000b3c4:	4c06      	ldr	r4, [pc, #24]	; (1000b3e0 <platform_event_init+0x28>)
1000b3c6:	0026      	movs	r6, r4
1000b3c8:	3678      	adds	r6, #120	; 0x78
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
	{
		platform_event_free(&platform_event_pool[i]);
1000b3ca:	4d06      	ldr	r5, [pc, #24]	; (1000b3e4 <platform_event_init+0x2c>)
1000b3cc:	0020      	movs	r0, r4
1000b3ce:	47a8      	blx	r5
1000b3d0:	340c      	adds	r4, #12
{
	uint32_t i;
	platform_event_free_list = NULL;
	platform_event_pending_list = NULL;
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
1000b3d2:	42b4      	cmp	r4, r6
1000b3d4:	d1fa      	bne.n	1000b3cc <platform_event_init+0x14>
	{
		platform_event_free(&platform_event_pool[i]);
	}
}
1000b3d6:	bd70      	pop	{r4, r5, r6, pc}
1000b3d8:	100131c0 	.word	0x100131c0
1000b3dc:	100131bc 	.word	0x100131bc
1000b3e0:	100131c4 	.word	0x100131c4
1000b3e4:	1000b371 	.word	0x1000b371

1000b3e8 <at_ke_msg_send>:
	}
	return status;
}

static void at_ke_msg_send(void const * param_ptr)
{
1000b3e8:	b570      	push	{r4, r5, r6, lr}
1000b3ea:	0004      	movs	r4, r0
	struct ke_msg *kemsg;
	uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
1000b3ec:	4b13      	ldr	r3, [pc, #76]	; (1000b43c <at_ke_msg_send+0x54>)
1000b3ee:	681d      	ldr	r5, [r3, #0]
	ke_msg_send(param_ptr);
1000b3f0:	4b13      	ldr	r3, [pc, #76]	; (1000b440 <at_ke_msg_send+0x58>)
1000b3f2:	681b      	ldr	r3, [r3, #0]
1000b3f4:	4798      	blx	r3
	kemsg = ke_param2msg(param_ptr);

	if((kemsg != NULL) && (kemsg->dest_id != TASK_INTERNAL_APP)) {
1000b3f6:	2c0c      	cmp	r4, #12
1000b3f8:	d01f      	beq.n	1000b43a <at_ke_msg_send+0x52>
1000b3fa:	3c0c      	subs	r4, #12
1000b3fc:	88e3      	ldrh	r3, [r4, #6]
1000b3fe:	2b05      	cmp	r3, #5
1000b400:	d01b      	beq.n	1000b43a <at_ke_msg_send+0x52>
		if(osc_en == 0)
1000b402:	07eb      	lsls	r3, r5, #31
1000b404:	d414      	bmi.n	1000b430 <at_ke_msg_send+0x48>
		{
			/* BLE Core is off, issue a wakeup request*/
			/* First, make sure PD4 is powered up and out of reset */
			pwr_enable_arm_wakeup(1<<1);
1000b406:	4b0f      	ldr	r3, [pc, #60]	; (1000b444 <at_ke_msg_send+0x5c>)
1000b408:	681b      	ldr	r3, [r3, #0]
1000b40a:	2002      	movs	r0, #2
1000b40c:	4798      	blx	r3
			pwr_arm_wakeup_req();
1000b40e:	4b0e      	ldr	r3, [pc, #56]	; (1000b448 <at_ke_msg_send+0x60>)
1000b410:	681b      	ldr	r3, [r3, #0]
1000b412:	4798      	blx	r3
			while (pwr_wait_BLE_out_of_reset(3));
1000b414:	4c0d      	ldr	r4, [pc, #52]	; (1000b44c <at_ke_msg_send+0x64>)
1000b416:	2003      	movs	r0, #3
1000b418:	6823      	ldr	r3, [r4, #0]
1000b41a:	4798      	blx	r3
1000b41c:	2800      	cmp	r0, #0
1000b41e:	d1fa      	bne.n	1000b416 <at_ke_msg_send+0x2e>
			pwr_disable_arm_wakeup(1<<1);
1000b420:	4b0b      	ldr	r3, [pc, #44]	; (1000b450 <at_ke_msg_send+0x68>)
1000b422:	681b      	ldr	r3, [r3, #0]
1000b424:	3002      	adds	r0, #2
1000b426:	4798      	blx	r3
			REG_PL_WR(0x4000B020, 1);
1000b428:	2201      	movs	r2, #1
1000b42a:	4b0a      	ldr	r3, [pc, #40]	; (1000b454 <at_ke_msg_send+0x6c>)
1000b42c:	601a      	str	r2, [r3, #0]
1000b42e:	e004      	b.n	1000b43a <at_ke_msg_send+0x52>
#endif	//CHIPVERSION_B0
		}
		else
		{
			/*  */
			os_sem_up(gstrFwSem);
1000b430:	4b09      	ldr	r3, [pc, #36]	; (1000b458 <at_ke_msg_send+0x70>)
1000b432:	6818      	ldr	r0, [r3, #0]
1000b434:	4b09      	ldr	r3, [pc, #36]	; (1000b45c <at_ke_msg_send+0x74>)
1000b436:	681b      	ldr	r3, [r3, #0]
1000b438:	4798      	blx	r3
		}
	}
}
1000b43a:	bd70      	pop	{r4, r5, r6, pc}
1000b43c:	4000b1ec 	.word	0x4000b1ec
1000b440:	1001326c 	.word	0x1001326c
1000b444:	10013264 	.word	0x10013264
1000b448:	10013274 	.word	0x10013274
1000b44c:	10013250 	.word	0x10013250
1000b450:	10013258 	.word	0x10013258
1000b454:	4000b020 	.word	0x4000b020
1000b458:	1001325c 	.word	0x1001325c
1000b45c:	1001324c 	.word	0x1001324c

1000b460 <samb11_plf_resume_callback>:
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
	return status;
}

void samb11_plf_resume_callback(void)
{
1000b460:	b510      	push	{r4, lr}
	//spi_flash_turn_off();
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,default_samb11_clock_init[0]);
1000b462:	4b06      	ldr	r3, [pc, #24]	; (1000b47c <samb11_plf_resume_callback+0x1c>)
1000b464:	4a06      	ldr	r2, [pc, #24]	; (1000b480 <samb11_plf_resume_callback+0x20>)
1000b466:	6819      	ldr	r1, [r3, #0]
1000b468:	6011      	str	r1, [r2, #0]
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,default_samb11_clock_init[1]);
1000b46a:	685a      	ldr	r2, [r3, #4]
1000b46c:	4b05      	ldr	r3, [pc, #20]	; (1000b484 <samb11_plf_resume_callback+0x24>)
1000b46e:	601a      	str	r2, [r3, #0]
	if(samb11_app_resume_cb != NULL)
1000b470:	4b05      	ldr	r3, [pc, #20]	; (1000b488 <samb11_plf_resume_callback+0x28>)
1000b472:	681b      	ldr	r3, [r3, #0]
1000b474:	2b00      	cmp	r3, #0
1000b476:	d000      	beq.n	1000b47a <samb11_plf_resume_callback+0x1a>
	{
		samb11_app_resume_cb();
1000b478:	4798      	blx	r3
	}
}
1000b47a:	bd10      	pop	{r4, pc}
1000b47c:	10013d68 	.word	0x10013d68
1000b480:	4000b00c 	.word	0x4000b00c
1000b484:	4000b010 	.word	0x4000b010
1000b488:	10014044 	.word	0x10014044

1000b48c <init_port_list>:
port port_list[LPGPIO_MAX];
uint32_t default_samb11_clock_init[2];
void samb11_plf_resume_callback(void);

void init_port_list(void)
{
1000b48c:	b570      	push	{r4, r5, r6, lr}
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
1000b48e:	2232      	movs	r2, #50	; 0x32
1000b490:	2100      	movs	r1, #0
1000b492:	480d      	ldr	r0, [pc, #52]	; (1000b4c8 <init_port_list+0x3c>)
1000b494:	4b0d      	ldr	r3, [pc, #52]	; (1000b4cc <init_port_list+0x40>)
1000b496:	4798      	blx	r3
1000b498:	2100      	movs	r1, #0
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000b49a:	480b      	ldr	r0, [pc, #44]	; (1000b4c8 <init_port_list+0x3c>)
		port_list[i].bit.available = 1;
1000b49c:	2501      	movs	r5, #1
		port_list[i].bit.configured = 0;
1000b49e:	2402      	movs	r4, #2
void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000b4a0:	004a      	lsls	r2, r1, #1
1000b4a2:	5411      	strb	r1, [r2, r0]
		port_list[i].bit.available = 1;
1000b4a4:	1882      	adds	r2, r0, r2
1000b4a6:	7853      	ldrb	r3, [r2, #1]
1000b4a8:	432b      	orrs	r3, r5
		port_list[i].bit.configured = 0;
1000b4aa:	b2db      	uxtb	r3, r3
1000b4ac:	43a3      	bics	r3, r4
1000b4ae:	7053      	strb	r3, [r2, #1]
1000b4b0:	3101      	adds	r1, #1

void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
1000b4b2:	2919      	cmp	r1, #25
1000b4b4:	d1f4      	bne.n	1000b4a0 <init_port_list+0x14>
		port_list[i].bit.gpio_num = i;
		port_list[i].bit.available = 1;
		port_list[i].bit.configured = 0;
	}
	//Set the GPIO for SWD is not available
	port_list[0].bit.available = 0;
1000b4b6:	4b04      	ldr	r3, [pc, #16]	; (1000b4c8 <init_port_list+0x3c>)
1000b4b8:	785a      	ldrb	r2, [r3, #1]
1000b4ba:	3918      	subs	r1, #24
1000b4bc:	438a      	bics	r2, r1
1000b4be:	705a      	strb	r2, [r3, #1]
	port_list[1].bit.available = 0;
1000b4c0:	78da      	ldrb	r2, [r3, #3]
1000b4c2:	438a      	bics	r2, r1
1000b4c4:	70da      	strb	r2, [r3, #3]
	//GPIO 14 is used for Coex and controlled by Firmware
	//port_list[14].bit.available = 0;
}
1000b4c6:	bd70      	pop	{r4, r5, r6, pc}
1000b4c8:	10013d84 	.word	0x10013d84
1000b4cc:	1000f6d5 	.word	0x1000f6d5

1000b4d0 <init_clock>:

void init_clock(void)
{
	uint32_t regval;
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0);
1000b4d0:	4a06      	ldr	r2, [pc, #24]	; (1000b4ec <init_clock+0x1c>)
1000b4d2:	6811      	ldr	r1, [r2, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_1_CLK_EN);
	//disable UART core & interface clocks
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_IF_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN);
1000b4d4:	4b06      	ldr	r3, [pc, #24]	; (1000b4f0 <init_clock+0x20>)
1000b4d6:	400b      	ands	r3, r1
	//disable I2C core 1 clocks
	//regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C1_CORE_CLK_EN);		//do not disable I2C because I2C driver in ASF will not enable.
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,regval);
1000b4d8:	6013      	str	r3, [r2, #0]
	default_samb11_clock_init[0] = regval;
1000b4da:	4a06      	ldr	r2, [pc, #24]	; (1000b4f4 <init_clock+0x24>)
1000b4dc:	6013      	str	r3, [r2, #0]
	
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1);
1000b4de:	4906      	ldr	r1, [pc, #24]	; (1000b4f8 <init_clock+0x28>)
1000b4e0:	6808      	ldr	r0, [r1, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_4_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_5_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_6_CLK_EN);
	//disable SPI SCK Phase int clock 
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN);
1000b4e2:	4b06      	ldr	r3, [pc, #24]	; (1000b4fc <init_clock+0x2c>)
1000b4e4:	4003      	ands	r3, r0
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,regval);
1000b4e6:	600b      	str	r3, [r1, #0]
	default_samb11_clock_init[1] = regval;
1000b4e8:	6053      	str	r3, [r2, #4]
	//ARM debugger
	
	//store default values
}
1000b4ea:	4770      	bx	lr
1000b4ec:	4000b00c 	.word	0x4000b00c
1000b4f0:	fffe0fd3 	.word	0xfffe0fd3
1000b4f4:	10013d68 	.word	0x10013d68
1000b4f8:	4000b010 	.word	0x4000b010
1000b4fc:	ffffe7c0 	.word	0xffffe7c0

1000b500 <platform_driver_init>:

plf_drv_status platform_driver_init()
{
1000b500:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b502:	4657      	mov	r7, sl
1000b504:	464e      	mov	r6, r9
1000b506:	4645      	mov	r5, r8
1000b508:	b4e0      	push	{r5, r6, r7}
	plf_drv_status status = STATUS_NOT_INITIALIZED;
	if((platform_initialized == 0) || (platform_initialized != 1)) {
1000b50a:	4b4f      	ldr	r3, [pc, #316]	; (1000b648 <platform_driver_init+0x148>)
1000b50c:	781b      	ldrb	r3, [r3, #0]
1000b50e:	2b00      	cmp	r3, #0
1000b510:	d004      	beq.n	1000b51c <platform_driver_init+0x1c>
1000b512:	4b4d      	ldr	r3, [pc, #308]	; (1000b648 <platform_driver_init+0x148>)
1000b514:	781b      	ldrb	r3, [r3, #0]
1000b516:	2b01      	cmp	r3, #1
1000b518:	d100      	bne.n	1000b51c <platform_driver_init+0x1c>
1000b51a:	e08c      	b.n	1000b636 <platform_driver_init+0x136>
		init_port_list();
1000b51c:	4b4b      	ldr	r3, [pc, #300]	; (1000b64c <platform_driver_init+0x14c>)
1000b51e:	4798      	blx	r3
		init_clock();
1000b520:	4b4b      	ldr	r3, [pc, #300]	; (1000b650 <platform_driver_init+0x150>)
1000b522:	4798      	blx	r3
		// Initialize the ble stack message handler to NULL
		ble_stack_message_handler = NULL;
1000b524:	2300      	movs	r3, #0
1000b526:	4698      	mov	r8, r3
1000b528:	4b4a      	ldr	r3, [pc, #296]	; (1000b654 <platform_driver_init+0x154>)
1000b52a:	4642      	mov	r2, r8
1000b52c:	601a      	str	r2, [r3, #0]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000b52e:	4c4a      	ldr	r4, [pc, #296]	; (1000b658 <platform_driver_init+0x158>)
1000b530:	2380      	movs	r3, #128	; 0x80
1000b532:	2280      	movs	r2, #128	; 0x80
1000b534:	0412      	lsls	r2, r2, #16
1000b536:	4692      	mov	sl, r2
1000b538:	50e2      	str	r2, [r4, r3]
1000b53a:	2280      	movs	r2, #128	; 0x80
1000b53c:	0452      	lsls	r2, r2, #17
1000b53e:	4691      	mov	r9, r2
1000b540:	50e2      	str	r2, [r4, r3]
#ifdef CHIPVERSION_B0
		NVIC_DisableIRQ(GPIO0_IRQn);
		NVIC_DisableIRQ(GPIO1_IRQn);
		/* NVIC_DisableIRQ(PORT0_COMB_IRQn); */
		/* NVIC_DisableIRQ(PORT1_COMB_IRQn); */
		platform_register_isr = (uint8_t (*)(uint8_t ,void *))0x000007d7;
1000b542:	4d46      	ldr	r5, [pc, #280]	; (1000b65c <platform_driver_init+0x15c>)
1000b544:	4b46      	ldr	r3, [pc, #280]	; (1000b660 <platform_driver_init+0x160>)
1000b546:	602b      	str	r3, [r5, #0]
		platform_unregister_isr = (uint8_t (*)(uint8_t ))0x000007bd;
1000b548:	4b46      	ldr	r3, [pc, #280]	; (1000b664 <platform_driver_init+0x164>)
1000b54a:	4a47      	ldr	r2, [pc, #284]	; (1000b668 <platform_driver_init+0x168>)
1000b54c:	6013      	str	r3, [r2, #0]
		handle_ext_wakeup_isr = (void (*)(void))0x1bc51;
1000b54e:	4947      	ldr	r1, [pc, #284]	; (1000b66c <platform_driver_init+0x16c>)
1000b550:	4a47      	ldr	r2, [pc, #284]	; (1000b670 <platform_driver_init+0x170>)
1000b552:	6011      	str	r1, [r2, #0]
		gapm_get_task_from_id = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400bc));
1000b554:	4a47      	ldr	r2, [pc, #284]	; (1000b674 <platform_driver_init+0x174>)
1000b556:	6811      	ldr	r1, [r2, #0]
1000b558:	4a47      	ldr	r2, [pc, #284]	; (1000b678 <platform_driver_init+0x178>)
1000b55a:	6011      	str	r1, [r2, #0]
		gapm_get_id_from_task = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400b8));
1000b55c:	4a47      	ldr	r2, [pc, #284]	; (1000b67c <platform_driver_init+0x17c>)
1000b55e:	6811      	ldr	r1, [r2, #0]
1000b560:	4a47      	ldr	r2, [pc, #284]	; (1000b680 <platform_driver_init+0x180>)
1000b562:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_set = (void (*)(uint16_t))0x0001b99f;
1000b564:	4947      	ldr	r1, [pc, #284]	; (1000b684 <platform_driver_init+0x184>)
1000b566:	4a48      	ldr	r2, [pc, #288]	; (1000b688 <platform_driver_init+0x188>)
1000b568:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_clear = (void (*)(uint16_t))0x0001b9db;
1000b56a:	4948      	ldr	r1, [pc, #288]	; (1000b68c <platform_driver_init+0x18c>)
1000b56c:	4a48      	ldr	r2, [pc, #288]	; (1000b690 <platform_driver_init+0x190>)
1000b56e:	6011      	str	r1, [r2, #0]
		apps_resume_cb = (uint32_t *)0x1004003c;
1000b570:	4f48      	ldr	r7, [pc, #288]	; (1000b694 <platform_driver_init+0x194>)
1000b572:	4a49      	ldr	r2, [pc, #292]	; (1000b698 <platform_driver_init+0x198>)
1000b574:	603a      	str	r2, [r7, #0]
		actualfreq = (uint32_t *)0x10041FC0; /* set to NULL for now as clock calibration is disabled for the time being */  /*(uint32_t *)0x10006bd8;*/
1000b576:	4949      	ldr	r1, [pc, #292]	; (1000b69c <platform_driver_init+0x19c>)
1000b578:	4a49      	ldr	r2, [pc, #292]	; (1000b6a0 <platform_driver_init+0x1a0>)
1000b57a:	6011      	str	r1, [r2, #0]
		updateuartbr_fp = (void (*)())0x10041FC4;
1000b57c:	4949      	ldr	r1, [pc, #292]	; (1000b6a4 <platform_driver_init+0x1a4>)
1000b57e:	4a4a      	ldr	r2, [pc, #296]	; (1000b6a8 <platform_driver_init+0x1a8>)
1000b580:	6011      	str	r1, [r2, #0]
		wakeup_source_active_cb = (uint32_t *)0x10041FD4;
1000b582:	4e4a      	ldr	r6, [pc, #296]	; (1000b6ac <platform_driver_init+0x1ac>)
1000b584:	4a4a      	ldr	r2, [pc, #296]	; (1000b6b0 <platform_driver_init+0x1b0>)
1000b586:	6032      	str	r2, [r6, #0]
		wakeup_event_pending = (uint32_t *)0x10041FD8;
1000b588:	494a      	ldr	r1, [pc, #296]	; (1000b6b4 <platform_driver_init+0x1b4>)
1000b58a:	4a4b      	ldr	r2, [pc, #300]	; (1000b6b8 <platform_driver_init+0x1b8>)
1000b58c:	6011      	str	r1, [r2, #0]
		/* power APIs */
		pwr_enable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cbe9;
1000b58e:	494b      	ldr	r1, [pc, #300]	; (1000b6bc <platform_driver_init+0x1bc>)
1000b590:	4a4b      	ldr	r2, [pc, #300]	; (1000b6c0 <platform_driver_init+0x1c0>)
1000b592:	6011      	str	r1, [r2, #0]
		pwr_disable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cd8f;
1000b594:	494b      	ldr	r1, [pc, #300]	; (1000b6c4 <platform_driver_init+0x1c4>)
1000b596:	4a4c      	ldr	r2, [pc, #304]	; (1000b6c8 <platform_driver_init+0x1c8>)
1000b598:	6011      	str	r1, [r2, #0]
		pwr_arm_wakeup_req = (int (*)(void))0x0001cea3;
1000b59a:	494c      	ldr	r1, [pc, #304]	; (1000b6cc <platform_driver_init+0x1cc>)
1000b59c:	4a4c      	ldr	r2, [pc, #304]	; (1000b6d0 <platform_driver_init+0x1d0>)
1000b59e:	6011      	str	r1, [r2, #0]
		pwr_wait_BLE_out_of_reset = (int (*)(uint32_t threshold))0x0001cbcf;
1000b5a0:	494c      	ldr	r1, [pc, #304]	; (1000b6d4 <platform_driver_init+0x1d4>)
1000b5a2:	4a4d      	ldr	r2, [pc, #308]	; (1000b6d8 <platform_driver_init+0x1d8>)
1000b5a4:	6011      	str	r1, [r2, #0]
		NVIC_DisableIRQ(PORT1_ALL_IRQn);
		platform_register_isr = register_isr;
		platform_unregister_isr = unregister_isr;
		handle_ext_wakeup_isr = (void (*)(void))0x14085;
#endif
		platform_unregister_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX);
1000b5a6:	2028      	movs	r0, #40	; 0x28
1000b5a8:	4798      	blx	r3
		platform_register_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX,(void*)PORT1_COMB_Handler);
1000b5aa:	494c      	ldr	r1, [pc, #304]	; (1000b6dc <platform_driver_init+0x1dc>)
1000b5ac:	2028      	movs	r0, #40	; 0x28
1000b5ae:	682b      	ldr	r3, [r5, #0]
1000b5b0:	4798      	blx	r3
		platform_register_isr(GPIO0_COMBINED_VECTOR_TABLE_INDEX,(void*)gpio0_combined_isr_handler);
1000b5b2:	682b      	ldr	r3, [r5, #0]
1000b5b4:	494a      	ldr	r1, [pc, #296]	; (1000b6e0 <platform_driver_init+0x1e0>)
1000b5b6:	2027      	movs	r0, #39	; 0x27
1000b5b8:	4798      	blx	r3
		//gstrFwSem               = (void *)0x100004e4;
		//NMI_MsgQueueRecv = (int (*)(void *, void ** )) 0x00017f67;
		//InternalAppMsgQHandle = (void *)0x10001158;
		//ke_free = (void (*)(void *)) 0x00015e3d;
#elif CHIPVERSION_B0
		ke_msg_send 	= (void (*)(void const *))(*((unsigned int *)0x100400e4));
1000b5ba:	4b4a      	ldr	r3, [pc, #296]	; (1000b6e4 <platform_driver_init+0x1e4>)
1000b5bc:	681a      	ldr	r2, [r3, #0]
1000b5be:	4b4a      	ldr	r3, [pc, #296]	; (1000b6e8 <platform_driver_init+0x1e8>)
1000b5c0:	601a      	str	r2, [r3, #0]
		ke_msg_alloc 	= (void* (*)(ke_msg_id_t const id, ke_task_id_t const dest_id,
1000b5c2:	4a4a      	ldr	r2, [pc, #296]	; (1000b6ec <platform_driver_init+0x1ec>)
1000b5c4:	4b4a      	ldr	r3, [pc, #296]	; (1000b6f0 <platform_driver_init+0x1f0>)
1000b5c6:	601a      	str	r2, [r3, #0]
										ke_task_id_t const src_id, uint16_t const param_len) )0x00019fe9;
		os_sem_up 		= (int (*)(void*))0x0001dbdd;
1000b5c8:	4a4a      	ldr	r2, [pc, #296]	; (1000b6f4 <platform_driver_init+0x1f4>)
1000b5ca:	4b4b      	ldr	r3, [pc, #300]	; (1000b6f8 <platform_driver_init+0x1f8>)
1000b5cc:	601a      	str	r2, [r3, #0]
		os_sem_down		= (int (*)(void*))0x0001dc5b;
1000b5ce:	4a4b      	ldr	r2, [pc, #300]	; (1000b6fc <platform_driver_init+0x1fc>)
1000b5d0:	4b4b      	ldr	r3, [pc, #300]	; (1000b700 <platform_driver_init+0x200>)
1000b5d2:	601a      	str	r2, [r3, #0]
		gstrFwSem 		= (void*)0x100405ec;
1000b5d4:	4a4b      	ldr	r2, [pc, #300]	; (1000b704 <platform_driver_init+0x204>)
1000b5d6:	4b4c      	ldr	r3, [pc, #304]	; (1000b708 <platform_driver_init+0x208>)
1000b5d8:	601a      	str	r2, [r3, #0]
		NMI_MsgQueueRecv = (int(*)(void*, void ** ))0x0001d5e3;
1000b5da:	4a4c      	ldr	r2, [pc, #304]	; (1000b70c <platform_driver_init+0x20c>)
1000b5dc:	4b4c      	ldr	r3, [pc, #304]	; (1000b710 <platform_driver_init+0x210>)
1000b5de:	601a      	str	r2, [r3, #0]
		InternalAppMsgQHandle = (void*)0x10040c20;
1000b5e0:	4a4c      	ldr	r2, [pc, #304]	; (1000b714 <platform_driver_init+0x214>)
1000b5e2:	4b4d      	ldr	r3, [pc, #308]	; (1000b718 <platform_driver_init+0x218>)
1000b5e4:	601a      	str	r2, [r3, #0]
		ke_free = (void(*)(void*))0x00019f09;
1000b5e6:	4a4d      	ldr	r2, [pc, #308]	; (1000b71c <platform_driver_init+0x21c>)
1000b5e8:	4b4d      	ldr	r3, [pc, #308]	; (1000b720 <platform_driver_init+0x220>)
1000b5ea:	601a      	str	r2, [r3, #0]
#endif
		memset(rx_buffer,0,sizeof(rx_buffer));
1000b5ec:	22a0      	movs	r2, #160	; 0xa0
1000b5ee:	0092      	lsls	r2, r2, #2
1000b5f0:	2100      	movs	r1, #0
1000b5f2:	484c      	ldr	r0, [pc, #304]	; (1000b724 <platform_driver_init+0x224>)
1000b5f4:	4b4c      	ldr	r3, [pc, #304]	; (1000b728 <platform_driver_init+0x228>)
1000b5f6:	4798      	blx	r3
		plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000b5f8:	2280      	movs	r2, #128	; 0x80
1000b5fa:	0092      	lsls	r2, r2, #2
1000b5fc:	4b4b      	ldr	r3, [pc, #300]	; (1000b72c <platform_driver_init+0x22c>)
1000b5fe:	801a      	strh	r2, [r3, #0]
		platform_event_init();
1000b600:	4b4b      	ldr	r3, [pc, #300]	; (1000b730 <platform_driver_init+0x230>)
1000b602:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000b604:	4653      	mov	r3, sl
1000b606:	6023      	str	r3, [r4, #0]
1000b608:	464b      	mov	r3, r9
1000b60a:	6023      	str	r3, [r4, #0]
		
#ifndef CHIPVERSION_B0		
		// spi_flash clock fix.
		spi_flash_clock_init();
#endif
		samb11_app_resume_cb = NULL;
1000b60c:	4b49      	ldr	r3, [pc, #292]	; (1000b734 <platform_driver_init+0x234>)
1000b60e:	4642      	mov	r2, r8
1000b610:	601a      	str	r2, [r3, #0]
		*apps_resume_cb = (uint32_t)((resume_callback)samb11_plf_resume_callback);
1000b612:	683b      	ldr	r3, [r7, #0]
1000b614:	4a48      	ldr	r2, [pc, #288]	; (1000b738 <platform_driver_init+0x238>)
1000b616:	601a      	str	r2, [r3, #0]
		*wakeup_source_active_cb = (uint32_t)((wakeup_source_active_callback)wakeup_active_event_callback);
1000b618:	6833      	ldr	r3, [r6, #0]
1000b61a:	4a48      	ldr	r2, [pc, #288]	; (1000b73c <platform_driver_init+0x23c>)
1000b61c:	601a      	str	r2, [r3, #0]
		wakeup_int_unregister_callback(0);
1000b61e:	2000      	movs	r0, #0
1000b620:	4c47      	ldr	r4, [pc, #284]	; (1000b740 <platform_driver_init+0x240>)
1000b622:	47a0      	blx	r4
		wakeup_int_unregister_callback(1);
1000b624:	2001      	movs	r0, #1
1000b626:	47a0      	blx	r4
		wakeup_int_unregister_callback(2);
1000b628:	2002      	movs	r0, #2
1000b62a:	47a0      	blx	r4
		platform_initialized = 1;
1000b62c:	2201      	movs	r2, #1
1000b62e:	4b06      	ldr	r3, [pc, #24]	; (1000b648 <platform_driver_init+0x148>)
1000b630:	701a      	strb	r2, [r3, #0]
		status = STATUS_SUCCESS;
1000b632:	2000      	movs	r0, #0
1000b634:	e003      	b.n	1000b63e <platform_driver_init+0x13e>
	}
	else {
		platform_initialized = 1;
1000b636:	2201      	movs	r2, #1
1000b638:	4b03      	ldr	r3, [pc, #12]	; (1000b648 <platform_driver_init+0x148>)
1000b63a:	701a      	strb	r2, [r3, #0]
		status = STATUS_ALREADY_INITIALIZED;
1000b63c:	2001      	movs	r0, #1
	}
	return status;
}
1000b63e:	bc1c      	pop	{r2, r3, r4}
1000b640:	4690      	mov	r8, r2
1000b642:	4699      	mov	r9, r3
1000b644:	46a2      	mov	sl, r4
1000b646:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b648:	10013254 	.word	0x10013254
1000b64c:	1000b48d 	.word	0x1000b48d
1000b650:	1000b4d1 	.word	0x1000b4d1
1000b654:	10013270 	.word	0x10013270
1000b658:	e000e100 	.word	0xe000e100
1000b65c:	10014038 	.word	0x10014038
1000b660:	000007d7 	.word	0x000007d7
1000b664:	000007bd 	.word	0x000007bd
1000b668:	10013d74 	.word	0x10013d74
1000b66c:	0001bc51 	.word	0x0001bc51
1000b670:	1001403c 	.word	0x1001403c
1000b674:	100400bc 	.word	0x100400bc
1000b678:	10013248 	.word	0x10013248
1000b67c:	100400b8 	.word	0x100400b8
1000b680:	10013244 	.word	0x10013244
1000b684:	0001b99f 	.word	0x0001b99f
1000b688:	10013d70 	.word	0x10013d70
1000b68c:	0001b9db 	.word	0x0001b9db
1000b690:	10013d7c 	.word	0x10013d7c
1000b694:	1001404c 	.word	0x1001404c
1000b698:	1004003c 	.word	0x1004003c
1000b69c:	10041fc0 	.word	0x10041fc0
1000b6a0:	10013d80 	.word	0x10013d80
1000b6a4:	10041fc4 	.word	0x10041fc4
1000b6a8:	10014048 	.word	0x10014048
1000b6ac:	10014040 	.word	0x10014040
1000b6b0:	10041fd4 	.word	0x10041fd4
1000b6b4:	10041fd8 	.word	0x10041fd8
1000b6b8:	10013d78 	.word	0x10013d78
1000b6bc:	0001cbe9 	.word	0x0001cbe9
1000b6c0:	10013264 	.word	0x10013264
1000b6c4:	0001cd8f 	.word	0x0001cd8f
1000b6c8:	10013258 	.word	0x10013258
1000b6cc:	0001cea3 	.word	0x0001cea3
1000b6d0:	10013274 	.word	0x10013274
1000b6d4:	0001cbcf 	.word	0x0001cbcf
1000b6d8:	10013250 	.word	0x10013250
1000b6dc:	1000bb59 	.word	0x1000bb59
1000b6e0:	1000baed 	.word	0x1000baed
1000b6e4:	100400e4 	.word	0x100400e4
1000b6e8:	1001326c 	.word	0x1001326c
1000b6ec:	00019fe9 	.word	0x00019fe9
1000b6f0:	1001327c 	.word	0x1001327c
1000b6f4:	0001dbdd 	.word	0x0001dbdd
1000b6f8:	1001324c 	.word	0x1001324c
1000b6fc:	0001dc5b 	.word	0x0001dc5b
1000b700:	10013260 	.word	0x10013260
1000b704:	100405ec 	.word	0x100405ec
1000b708:	1001325c 	.word	0x1001325c
1000b70c:	0001d5e3 	.word	0x0001d5e3
1000b710:	10013268 	.word	0x10013268
1000b714:	10040c20 	.word	0x10040c20
1000b718:	10013280 	.word	0x10013280
1000b71c:	00019f09 	.word	0x00019f09
1000b720:	10013240 	.word	0x10013240
1000b724:	10013db8 	.word	0x10013db8
1000b728:	1000f6d5 	.word	0x1000f6d5
1000b72c:	10014050 	.word	0x10014050
1000b730:	1000b3b9 	.word	0x1000b3b9
1000b734:	10014044 	.word	0x10014044
1000b738:	1000b461 	.word	0x1000b461
1000b73c:	1000bbb5 	.word	0x1000bbb5
1000b740:	1000bb9d 	.word	0x1000bb9d

1000b744 <platform_register_ble_msg_handler>:


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000b744:	4b04      	ldr	r3, [pc, #16]	; (1000b758 <platform_register_ble_msg_handler+0x14>)
1000b746:	781a      	ldrb	r2, [r3, #0]
		ble_stack_message_handler = fp;
		status = STATUS_SUCCESS;
	}
	else {
		status = STATUS_NOT_INITIALIZED;
1000b748:	2305      	movs	r3, #5


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000b74a:	2a01      	cmp	r2, #1
1000b74c:	d102      	bne.n	1000b754 <platform_register_ble_msg_handler+0x10>
		ble_stack_message_handler = fp;
1000b74e:	4b03      	ldr	r3, [pc, #12]	; (1000b75c <platform_register_ble_msg_handler+0x18>)
1000b750:	6018      	str	r0, [r3, #0]
		status = STATUS_SUCCESS;
1000b752:	2300      	movs	r3, #0
	}
	else {
		status = STATUS_NOT_INITIALIZED;
	}
	return status;
}
1000b754:	0018      	movs	r0, r3
1000b756:	4770      	bx	lr
1000b758:	10013254 	.word	0x10013254
1000b75c:	10013270 	.word	0x10013270

1000b760 <platform_interface_send>:


//Sends a message through RW kernel messaging API
//struct ke_msg * p_msg;
void platform_interface_send(uint8_t* data, uint32_t len)
{
1000b760:	b570      	push	{r4, r5, r6, lr}
1000b762:	0004      	movs	r4, r0
	void* params;
	
	#if (CHIPVERSION_B0)
	ke_task_id_t dest_id;
	dest_id = p_msg_hdr->dest_id;
	if(gapm_get_task_from_id != NULL)
1000b764:	4b0e      	ldr	r3, [pc, #56]	; (1000b7a0 <platform_interface_send+0x40>)
1000b766:	681b      	ldr	r3, [r3, #0]
1000b768:	2b00      	cmp	r3, #0
1000b76a:	d002      	beq.n	1000b772 <platform_interface_send+0x12>
		p_msg_hdr->dest_id = gapm_get_task_from_id(dest_id);
1000b76c:	8840      	ldrh	r0, [r0, #2]
1000b76e:	4798      	blx	r3
1000b770:	8060      	strh	r0, [r4, #2]
	#endif	//CHIPVERSION_B0
	// Allocate the kernel message
	params = ke_msg_alloc(p_msg_hdr->id, p_msg_hdr->dest_id, p_msg_hdr->src_id, p_msg_hdr->param_len);
1000b772:	88e3      	ldrh	r3, [r4, #6]
1000b774:	88a2      	ldrh	r2, [r4, #4]
1000b776:	8861      	ldrh	r1, [r4, #2]
1000b778:	8820      	ldrh	r0, [r4, #0]
1000b77a:	4d0a      	ldr	r5, [pc, #40]	; (1000b7a4 <platform_interface_send+0x44>)
1000b77c:	682d      	ldr	r5, [r5, #0]
1000b77e:	47a8      	blx	r5
1000b780:	0005      	movs	r5, r0
											
	//no params
	if (p_msg_hdr->param_len == 0)
1000b782:	88e2      	ldrh	r2, [r4, #6]
1000b784:	2a00      	cmp	r2, #0
1000b786:	d102      	bne.n	1000b78e <platform_interface_send+0x2e>
	{
		// Send message directly
		at_ke_msg_send(params);
1000b788:	4b07      	ldr	r3, [pc, #28]	; (1000b7a8 <platform_interface_send+0x48>)
1000b78a:	4798      	blx	r3
1000b78c:	e006      	b.n	1000b79c <platform_interface_send+0x3c>
	}
	else
	{
		//copy params
		memcpy(params,&(data[KE_MSG_HDR_LENGTH]),p_msg_hdr->param_len);
1000b78e:	0021      	movs	r1, r4
1000b790:	3108      	adds	r1, #8
1000b792:	4b06      	ldr	r3, [pc, #24]	; (1000b7ac <platform_interface_send+0x4c>)
1000b794:	4798      	blx	r3
		// Send the kernel message
		at_ke_msg_send(params);
1000b796:	0028      	movs	r0, r5
1000b798:	4b03      	ldr	r3, [pc, #12]	; (1000b7a8 <platform_interface_send+0x48>)
1000b79a:	4798      	blx	r3
	}
}
1000b79c:	bd70      	pop	{r4, r5, r6, pc}
1000b79e:	46c0      	nop			; (mov r8, r8)
1000b7a0:	10013248 	.word	0x10013248
1000b7a4:	1001327c 	.word	0x1001327c
1000b7a8:	1000b3e9 	.word	0x1000b3e9
1000b7ac:	1000f6c3 	.word	0x1000f6c3

1000b7b0 <send_plf_int_msg_ind>:

void send_plf_int_msg_ind(uint8_t intr_index, uint8_t callback_id, void *data, uint16_t data_len)
{
1000b7b0:	b570      	push	{r4, r5, r6, lr}
1000b7b2:	0015      	movs	r5, r2
1000b7b4:	001c      	movs	r4, r3
	void* params;
//#if (CHIPVERSION_A4)	
	//os_sem_up(gstrFwSem);
//#endif
	// Allocate the kernel message
	params = ke_msg_alloc(PERIPHERAL_INTERRUPT_EVENT, TASK_INTERNAL_APP, BUILD_INTR_SRCID(callback_id,intr_index), data_len);
1000b7b6:	020a      	lsls	r2, r1, #8
1000b7b8:	4302      	orrs	r2, r0
1000b7ba:	4b0a      	ldr	r3, [pc, #40]	; (1000b7e4 <send_plf_int_msg_ind+0x34>)
1000b7bc:	681e      	ldr	r6, [r3, #0]
1000b7be:	0023      	movs	r3, r4
1000b7c0:	2105      	movs	r1, #5
1000b7c2:	20a0      	movs	r0, #160	; 0xa0
1000b7c4:	00c0      	lsls	r0, r0, #3
1000b7c6:	47b0      	blx	r6
1000b7c8:	1e06      	subs	r6, r0, #0
											
	//no params
	if(params != NULL) {
1000b7ca:	d00a      	beq.n	1000b7e2 <send_plf_int_msg_ind+0x32>
		if((data_len != 0) && (NULL != data))
1000b7cc:	2c00      	cmp	r4, #0
1000b7ce:	d005      	beq.n	1000b7dc <send_plf_int_msg_ind+0x2c>
1000b7d0:	2d00      	cmp	r5, #0
1000b7d2:	d003      	beq.n	1000b7dc <send_plf_int_msg_ind+0x2c>
		{
			//copy params
			memcpy(params, data, data_len);
1000b7d4:	0022      	movs	r2, r4
1000b7d6:	0029      	movs	r1, r5
1000b7d8:	4b03      	ldr	r3, [pc, #12]	; (1000b7e8 <send_plf_int_msg_ind+0x38>)
1000b7da:	4798      	blx	r3
		}
		// Send the kernel message
		at_ke_msg_send(params);
1000b7dc:	0030      	movs	r0, r6
1000b7de:	4b03      	ldr	r3, [pc, #12]	; (1000b7ec <send_plf_int_msg_ind+0x3c>)
1000b7e0:	4798      	blx	r3
	}
}
1000b7e2:	bd70      	pop	{r4, r5, r6, pc}
1000b7e4:	1001327c 	.word	0x1001327c
1000b7e8:	1000f6c3 	.word	0x1000f6c3
1000b7ec:	1000b3e9 	.word	0x1000b3e9

1000b7f0 <platform_event_wait>:
//Waits on InternalAppMsgQHandle Queue
// This function won't busy wait if nothing on queue but will down the semaphore and go to a blocking state
// The OS then will move control to other higher priority tasks and will only return if these tasks finish processing AND the queue has received 
//a msg
plf_drv_status platform_event_wait(uint32_t timeout)
{
1000b7f0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b7f2:	465f      	mov	r7, fp
1000b7f4:	4656      	mov	r6, sl
1000b7f6:	464d      	mov	r5, r9
1000b7f8:	4644      	mov	r4, r8
1000b7fa:	b4f0      	push	{r4, r5, r6, r7}
1000b7fc:	b087      	sub	sp, #28
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000b7fe:	1e44      	subs	r4, r0, #1
plf_drv_status platform_event_wait(uint32_t timeout)
{
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
1000b800:	2300      	movs	r3, #0
1000b802:	4699      	mov	r9, r3
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000b804:	1ce3      	adds	r3, r4, #3
1000b806:	d81c      	bhi.n	1000b842 <platform_event_wait+0x52>
	return num_of_freed;
}

static void platform_start_event_timeout(uint32_t timeout)
{
	uint8_t msg[8+5] = {0};
1000b808:	220d      	movs	r2, #13
1000b80a:	2100      	movs	r1, #0
1000b80c:	a802      	add	r0, sp, #8
1000b80e:	4b82      	ldr	r3, [pc, #520]	; (1000ba18 <platform_event_wait+0x228>)
1000b810:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000b812:	2333      	movs	r3, #51	; 0x33
1000b814:	aa02      	add	r2, sp, #8
1000b816:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000b818:	3b30      	subs	r3, #48	; 0x30
1000b81a:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000b81c:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000b81e:	3302      	adds	r3, #2
1000b820:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000b822:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (((5)>>8) & 0x00FF );
	
	msg[u16TxLen++] = (uint8_t)((timeout) & 0x00FF );
1000b824:	7214      	strb	r4, [r2, #8]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 8) & 0x00FF) ;
1000b826:	0a23      	lsrs	r3, r4, #8
1000b828:	7253      	strb	r3, [r2, #9]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 16) & 0x00FF);
1000b82a:	0c23      	lsrs	r3, r4, #16
1000b82c:	7293      	strb	r3, [r2, #10]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 24) & 0x00FF);
1000b82e:	0e24      	lsrs	r4, r4, #24
1000b830:	72d4      	strb	r4, [r2, #11]
	
	msg[u16TxLen++] = ((1) & 0x00FF );
1000b832:	2301      	movs	r3, #1
1000b834:	7313      	strb	r3, [r2, #12]
	
	platform_interface_send(msg, u16TxLen);
1000b836:	210d      	movs	r1, #13
1000b838:	0010      	movs	r0, r2
1000b83a:	4b78      	ldr	r3, [pc, #480]	; (1000ba1c <platform_event_wait+0x22c>)
1000b83c:	4798      	blx	r3
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
	{			
		platform_start_event_timeout(timeout-1);
		bEventTimeoutFlag = 1;
1000b83e:	2301      	movs	r3, #1
1000b840:	4699      	mov	r9, r3
1000b842:	2400      	movs	r4, #0
1000b844:	2500      	movs	r5, #0
	}

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
1000b846:	4f76      	ldr	r7, [pc, #472]	; (1000ba20 <platform_event_wait+0x230>)
1000b848:	4e76      	ldr	r6, [pc, #472]	; (1000ba24 <platform_event_wait+0x234>)
1000b84a:	4977      	ldr	r1, [pc, #476]	; (1000ba28 <platform_event_wait+0x238>)
1000b84c:	6838      	ldr	r0, [r7, #0]
1000b84e:	6833      	ldr	r3, [r6, #0]
1000b850:	4798      	blx	r3
1000b852:	2800      	cmp	r0, #0
1000b854:	d000      	beq.n	1000b858 <platform_event_wait+0x68>
1000b856:	e088      	b.n	1000b96a <platform_event_wait+0x17a>
		{
			uint16_t msg_id = rcv_msg->id;
1000b858:	4b73      	ldr	r3, [pc, #460]	; (1000ba28 <platform_event_wait+0x238>)
1000b85a:	681c      	ldr	r4, [r3, #0]
1000b85c:	88a3      	ldrh	r3, [r4, #4]
1000b85e:	469a      	mov	sl, r3
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000b860:	23cd      	movs	r3, #205	; 0xcd
1000b862:	009b      	lsls	r3, r3, #2
1000b864:	459a      	cmp	sl, r3
1000b866:	d100      	bne.n	1000b86a <platform_event_wait+0x7a>
1000b868:	e0c7      	b.n	1000b9fa <platform_event_wait+0x20a>

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
1000b86a:	8923      	ldrh	r3, [r4, #8]
1000b86c:	469b      	mov	fp, r3
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
1000b86e:	8963      	ldrh	r3, [r4, #10]
1000b870:	4698      	mov	r8, r3
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000b872:	464b      	mov	r3, r9
1000b874:	2b00      	cmp	r3, #0
1000b876:	d011      	beq.n	1000b89c <platform_event_wait+0xac>
	platform_interface_send(msg, u16TxLen);
}

static void platform_stop_event_timeout(void)
{
	uint8_t msg[8+5] = {0};
1000b878:	220d      	movs	r2, #13
1000b87a:	2100      	movs	r1, #0
1000b87c:	a802      	add	r0, sp, #8
1000b87e:	4b66      	ldr	r3, [pc, #408]	; (1000ba18 <platform_event_wait+0x228>)
1000b880:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000b882:	2333      	movs	r3, #51	; 0x33
1000b884:	aa02      	add	r2, sp, #8
1000b886:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000b888:	3b30      	subs	r3, #48	; 0x30
1000b88a:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000b88c:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000b88e:	3302      	adds	r3, #2
1000b890:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000b892:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (uint8_t)(( (0) >> 16) & 0x00FF);
	msg[u16TxLen++] = (uint8_t)(( (0) >> 24) & 0x00FF);
	
	msg[u16TxLen++] = ((0) & 0x00FF );
	
	platform_interface_send(msg, u16TxLen);
1000b894:	210d      	movs	r1, #13
1000b896:	0010      	movs	r0, r2
1000b898:	4b60      	ldr	r3, [pc, #384]	; (1000ba1c <platform_event_wait+0x22c>)
1000b89a:	4798      	blx	r3
			{
				//Stop timer if it is still running
				platform_stop_event_timeout();
			}
				
			if(msg_id == PERIPHERAL_INTERRUPT_EVENT)
1000b89c:	23a0      	movs	r3, #160	; 0xa0
1000b89e:	00db      	lsls	r3, r3, #3
1000b8a0:	459a      	cmp	sl, r3
1000b8a2:	d121      	bne.n	1000b8e8 <platform_event_wait+0xf8>
			{
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
1000b8a4:	4b61      	ldr	r3, [pc, #388]	; (1000ba2c <platform_event_wait+0x23c>)
1000b8a6:	881b      	ldrh	r3, [r3, #0]
1000b8a8:	4443      	add	r3, r8
1000b8aa:	22a0      	movs	r2, #160	; 0xa0
1000b8ac:	0092      	lsls	r2, r2, #2
1000b8ae:	4293      	cmp	r3, r2
1000b8b0:	dd02      	ble.n	1000b8b8 <platform_event_wait+0xc8>
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000b8b2:	3a80      	subs	r2, #128	; 0x80
1000b8b4:	4b5d      	ldr	r3, [pc, #372]	; (1000ba2c <platform_event_wait+0x23c>)
1000b8b6:	801a      	strh	r2, [r3, #0]
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
1000b8b8:	4b5c      	ldr	r3, [pc, #368]	; (1000ba2c <platform_event_wait+0x23c>)
1000b8ba:	469a      	mov	sl, r3
1000b8bc:	881d      	ldrh	r5, [r3, #0]
1000b8be:	4b5c      	ldr	r3, [pc, #368]	; (1000ba30 <platform_event_wait+0x240>)
1000b8c0:	18ed      	adds	r5, r5, r3
1000b8c2:	0021      	movs	r1, r4
1000b8c4:	310c      	adds	r1, #12
1000b8c6:	4642      	mov	r2, r8
1000b8c8:	0028      	movs	r0, r5
1000b8ca:	4b5a      	ldr	r3, [pc, #360]	; (1000ba34 <platform_event_wait+0x244>)
1000b8cc:	4798      	blx	r3
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
1000b8ce:	4642      	mov	r2, r8
1000b8d0:	0029      	movs	r1, r5
1000b8d2:	4658      	mov	r0, fp
1000b8d4:	4b58      	ldr	r3, [pc, #352]	; (1000ba38 <platform_event_wait+0x248>)
1000b8d6:	4798      	blx	r3
				plf_event_buff_index += len;
1000b8d8:	4653      	mov	r3, sl
1000b8da:	881b      	ldrh	r3, [r3, #0]
1000b8dc:	4443      	add	r3, r8
1000b8de:	4652      	mov	r2, sl
1000b8e0:	8013      	strh	r3, [r2, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000b8e2:	2400      	movs	r4, #0
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
				plf_event_buff_index += len;
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
1000b8e4:	2502      	movs	r5, #2
1000b8e6:	e03a      	b.n	1000b95e <platform_event_wait+0x16e>
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000b8e8:	4b54      	ldr	r3, [pc, #336]	; (1000ba3c <platform_event_wait+0x24c>)
1000b8ea:	681b      	ldr	r3, [r3, #0]
1000b8ec:	2b00      	cmp	r3, #0
1000b8ee:	d032      	beq.n	1000b956 <platform_event_wait+0x166>
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
1000b8f0:	4b4d      	ldr	r3, [pc, #308]	; (1000ba28 <platform_event_wait+0x238>)
1000b8f2:	681a      	ldr	r2, [r3, #0]
1000b8f4:	8893      	ldrh	r3, [r2, #4]
1000b8f6:	21cd      	movs	r1, #205	; 0xcd
1000b8f8:	0089      	lsls	r1, r1, #2
1000b8fa:	428b      	cmp	r3, r1
1000b8fc:	d104      	bne.n	1000b908 <platform_event_wait+0x118>
					{
						if(bEventTimeoutFlag)
1000b8fe:	464b      	mov	r3, r9
						{
							status = STATUS_TIMEOUT;	
						}
						else
						{
							bLoopAgain = 1;
1000b900:	2401      	movs	r4, #1
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
1000b902:	2b00      	cmp	r3, #0
1000b904:	d02b      	beq.n	1000b95e <platform_event_wait+0x16e>
1000b906:	e028      	b.n	1000b95a <platform_event_wait+0x16a>
							bLoopAgain = 1;
						}
					}
					else
					{
						ke_msg_hdr = (struct ke_msghdr *)((void *)(rx_buffer+BLE_EVENT_BUFFER_START_INDEX));
1000b908:	4c4d      	ldr	r4, [pc, #308]	; (1000ba40 <platform_event_wait+0x250>)
1000b90a:	4d49      	ldr	r5, [pc, #292]	; (1000ba30 <platform_event_wait+0x240>)
1000b90c:	6025      	str	r5, [r4, #0]
						ke_msg_hdr->id = rcv_msg->id;
1000b90e:	702b      	strb	r3, [r5, #0]
1000b910:	0a1b      	lsrs	r3, r3, #8
1000b912:	706b      	strb	r3, [r5, #1]
//#if (CHIPVERSION_A3 || CHIPVERSION_A4)
					//ke_msg_hdr->src_id = rcv_msg->src_id;
//#else
					ke_msg_hdr->src_id = gapm_get_id_from_task(rcv_msg->src_id);
1000b914:	8910      	ldrh	r0, [r2, #8]
1000b916:	4b4b      	ldr	r3, [pc, #300]	; (1000ba44 <platform_event_wait+0x254>)
1000b918:	681b      	ldr	r3, [r3, #0]
1000b91a:	4798      	blx	r3
1000b91c:	7128      	strb	r0, [r5, #4]
1000b91e:	0a00      	lsrs	r0, r0, #8
1000b920:	7168      	strb	r0, [r5, #5]
//#endif  /* (CHIPVERSION_A3 || CHIPVERSION_A4) */
						ke_msg_hdr->dest_id = rcv_msg->dest_id;
1000b922:	6820      	ldr	r0, [r4, #0]
1000b924:	4b40      	ldr	r3, [pc, #256]	; (1000ba28 <platform_event_wait+0x238>)
1000b926:	681a      	ldr	r2, [r3, #0]
1000b928:	88d2      	ldrh	r2, [r2, #6]
1000b92a:	8042      	strh	r2, [r0, #2]
						ke_msg_hdr->param_len = rcv_msg->param_len;
1000b92c:	681d      	ldr	r5, [r3, #0]
1000b92e:	896b      	ldrh	r3, [r5, #10]
1000b930:	80c3      	strh	r3, [r0, #6]
						ke_msg_hdr++;
1000b932:	3008      	adds	r0, #8
1000b934:	6020      	str	r0, [r4, #0]
						if(rcv_msg->param_len > 0) {
1000b936:	896a      	ldrh	r2, [r5, #10]
1000b938:	2a00      	cmp	r2, #0
1000b93a:	d003      	beq.n	1000b944 <platform_event_wait+0x154>
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
1000b93c:	0029      	movs	r1, r5
1000b93e:	310c      	adds	r1, #12
1000b940:	4b3c      	ldr	r3, [pc, #240]	; (1000ba34 <platform_event_wait+0x244>)
1000b942:	4798      	blx	r3
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
1000b944:	8969      	ldrh	r1, [r5, #10]
1000b946:	3108      	adds	r1, #8
1000b948:	4b3c      	ldr	r3, [pc, #240]	; (1000ba3c <platform_event_wait+0x24c>)
1000b94a:	681b      	ldr	r3, [r3, #0]
1000b94c:	4838      	ldr	r0, [pc, #224]	; (1000ba30 <platform_event_wait+0x240>)
1000b94e:	4798      	blx	r3
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000b950:	2400      	movs	r4, #0
						ke_msg_hdr++;
						if(rcv_msg->param_len > 0) {
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
1000b952:	2503      	movs	r5, #3
1000b954:	e003      	b.n	1000b95e <platform_event_wait+0x16e>
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000b956:	2400      	movs	r4, #0
1000b958:	e001      	b.n	1000b95e <platform_event_wait+0x16e>
1000b95a:	2400      	movs	r4, #0
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
						{
							status = STATUS_TIMEOUT;	
1000b95c:	25d0      	movs	r5, #208	; 0xd0
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
					}
				}
			}
			ke_free(rcv_msg);
1000b95e:	4b32      	ldr	r3, [pc, #200]	; (1000ba28 <platform_event_wait+0x238>)
1000b960:	6818      	ldr	r0, [r3, #0]
1000b962:	4b39      	ldr	r3, [pc, #228]	; (1000ba48 <platform_event_wait+0x258>)
1000b964:	681b      	ldr	r3, [r3, #0]
1000b966:	4798      	blx	r3
1000b968:	e000      	b.n	1000b96c <platform_event_wait+0x17c>
		}
		else
		{
			status = STATUS_FAILURE;
1000b96a:	2507      	movs	r5, #7
		}
	}while(bLoopAgain);
1000b96c:	2c00      	cmp	r4, #0
1000b96e:	d000      	beq.n	1000b972 <platform_event_wait+0x182>
1000b970:	e76b      	b.n	1000b84a <platform_event_wait+0x5a>
	
	if(bEventTimeoutFlag)
1000b972:	464b      	mov	r3, r9
1000b974:	2b00      	cmp	r3, #0
1000b976:	d046      	beq.n	1000ba06 <platform_event_wait+0x216>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
1000b978:	4b29      	ldr	r3, [pc, #164]	; (1000ba20 <platform_event_wait+0x230>)
1000b97a:	681e      	ldr	r6, [r3, #0]
#endif 
static int NMI_MsgQueueDestroyOnKeID(NMI_MsgQueueHandle* pHandle, ke_msg_id_t u16KeMsgId)
{
	int num_of_freed=0;
	Message * current , *prev = NULL;
	if((NULL == pHandle) && (NULL == pHandle->pstrMessageList))
1000b97c:	2e00      	cmp	r6, #0
1000b97e:	d104      	bne.n	1000b98a <platform_event_wait+0x19a>
1000b980:	2300      	movs	r3, #0
1000b982:	6a1c      	ldr	r4, [r3, #32]
1000b984:	2c00      	cmp	r4, #0
1000b986:	d131      	bne.n	1000b9ec <platform_event_wait+0x1fc>
1000b988:	e03d      	b.n	1000ba06 <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
1000b98a:	6a34      	ldr	r4, [r6, #32]
	os_sem_down(&pHandle->strCriticalSection);
1000b98c:	2314      	movs	r3, #20
1000b98e:	469c      	mov	ip, r3
1000b990:	44b4      	add	ip, r6
1000b992:	4663      	mov	r3, ip
1000b994:	4660      	mov	r0, ip
1000b996:	9300      	str	r3, [sp, #0]
1000b998:	4b2c      	ldr	r3, [pc, #176]	; (1000ba4c <platform_event_wait+0x25c>)
1000b99a:	681b      	ldr	r3, [r3, #0]
1000b99c:	4798      	blx	r3
	while(NULL != current)
1000b99e:	2c00      	cmp	r4, #0
1000b9a0:	d01f      	beq.n	1000b9e2 <platform_event_wait+0x1f2>
			}
			ke_free(rcv_msg);
		}
		else
		{
			status = STATUS_FAILURE;
1000b9a2:	2700      	movs	r7, #0

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000b9a4:	23cd      	movs	r3, #205	; 0xcd
1000b9a6:	009b      	lsls	r3, r3, #2
1000b9a8:	4698      	mov	r8, r3
		{
			num_of_freed++;
			if(NULL != prev)
			{
				prev->pstrNext = current->pstrNext;
				ke_free(current);
1000b9aa:	4b27      	ldr	r3, [pc, #156]	; (1000ba48 <platform_event_wait+0x258>)
1000b9ac:	469a      	mov	sl, r3
1000b9ae:	0020      	movs	r0, r4

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000b9b0:	6803      	ldr	r3, [r0, #0]
1000b9b2:	889b      	ldrh	r3, [r3, #4]
1000b9b4:	4543      	cmp	r3, r8
1000b9b6:	d110      	bne.n	1000b9da <platform_event_wait+0x1ea>
		{
			num_of_freed++;
			if(NULL != prev)
1000b9b8:	2f00      	cmp	r7, #0
1000b9ba:	d006      	beq.n	1000b9ca <platform_event_wait+0x1da>
			{
				prev->pstrNext = current->pstrNext;
1000b9bc:	6883      	ldr	r3, [r0, #8]
1000b9be:	60bb      	str	r3, [r7, #8]
				ke_free(current);
1000b9c0:	4653      	mov	r3, sl
1000b9c2:	681b      	ldr	r3, [r3, #0]
1000b9c4:	4798      	blx	r3
				current = prev->pstrNext;
1000b9c6:	68b8      	ldr	r0, [r7, #8]
1000b9c8:	e009      	b.n	1000b9de <platform_event_wait+0x1ee>
			}
			else
			{
				pHandle->pstrMessageList = current->pstrNext;
1000b9ca:	6883      	ldr	r3, [r0, #8]
1000b9cc:	6233      	str	r3, [r6, #32]
				ke_free(current);
1000b9ce:	4b1e      	ldr	r3, [pc, #120]	; (1000ba48 <platform_event_wait+0x258>)
1000b9d0:	681b      	ldr	r3, [r3, #0]
1000b9d2:	9301      	str	r3, [sp, #4]
1000b9d4:	4798      	blx	r3
				current = pHandle->pstrMessageList;
1000b9d6:	6a30      	ldr	r0, [r6, #32]
1000b9d8:	e001      	b.n	1000b9de <platform_event_wait+0x1ee>
			}
		}
		else
		{
			prev = current;
			current = current ->pstrNext;
1000b9da:	0007      	movs	r7, r0
1000b9dc:	6880      	ldr	r0, [r0, #8]
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
1000b9de:	2800      	cmp	r0, #0
1000b9e0:	d1e6      	bne.n	1000b9b0 <platform_event_wait+0x1c0>
		{
			prev = current;
			current = current ->pstrNext;
		}
	}
	os_sem_up(&pHandle->strCriticalSection);
1000b9e2:	4b1b      	ldr	r3, [pc, #108]	; (1000ba50 <platform_event_wait+0x260>)
1000b9e4:	681b      	ldr	r3, [r3, #0]
1000b9e6:	9800      	ldr	r0, [sp, #0]
1000b9e8:	4798      	blx	r3
	if(bEventTimeoutFlag)
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
1000b9ea:	e00c      	b.n	1000ba06 <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
1000b9ec:	2314      	movs	r3, #20
1000b9ee:	9300      	str	r3, [sp, #0]
1000b9f0:	4b16      	ldr	r3, [pc, #88]	; (1000ba4c <platform_event_wait+0x25c>)
1000b9f2:	681b      	ldr	r3, [r3, #0]
1000b9f4:	2014      	movs	r0, #20
1000b9f6:	4798      	blx	r3
1000b9f8:	e7d3      	b.n	1000b9a2 <platform_event_wait+0x1b2>
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000b9fa:	4b10      	ldr	r3, [pc, #64]	; (1000ba3c <platform_event_wait+0x24c>)
1000b9fc:	681b      	ldr	r3, [r3, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000b9fe:	2400      	movs	r4, #0
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000ba00:	2b00      	cmp	r3, #0
1000ba02:	d0ac      	beq.n	1000b95e <platform_event_wait+0x16e>
1000ba04:	e77b      	b.n	1000b8fe <platform_event_wait+0x10e>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
}
1000ba06:	0028      	movs	r0, r5
1000ba08:	b007      	add	sp, #28
1000ba0a:	bc3c      	pop	{r2, r3, r4, r5}
1000ba0c:	4690      	mov	r8, r2
1000ba0e:	4699      	mov	r9, r3
1000ba10:	46a2      	mov	sl, r4
1000ba12:	46ab      	mov	fp, r5
1000ba14:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ba16:	46c0      	nop			; (mov r8, r8)
1000ba18:	1000f6d5 	.word	0x1000f6d5
1000ba1c:	1000b761 	.word	0x1000b761
1000ba20:	10013280 	.word	0x10013280
1000ba24:	10013268 	.word	0x10013268
1000ba28:	1001323c 	.word	0x1001323c
1000ba2c:	10014050 	.word	0x10014050
1000ba30:	10013db8 	.word	0x10013db8
1000ba34:	1000f6c3 	.word	0x1000f6c3
1000ba38:	1000b381 	.word	0x1000b381
1000ba3c:	10013270 	.word	0x10013270
1000ba40:	10013278 	.word	0x10013278
1000ba44:	10013244 	.word	0x10013244
1000ba48:	10013240 	.word	0x10013240
1000ba4c:	10013260 	.word	0x10013260
1000ba50:	1001324c 	.word	0x1001324c

1000ba54 <acquire_sleep_lock>:

plf_drv_status acquire_sleep_lock()
{
1000ba54:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_RESOURCE_BUSY;
	//uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
	
	rwip_prevent_sleep_set(APP_PREVENT_SLEEP);
1000ba56:	4b03      	ldr	r3, [pc, #12]	; (1000ba64 <acquire_sleep_lock+0x10>)
1000ba58:	681b      	ldr	r3, [r3, #0]
1000ba5a:	2080      	movs	r0, #128	; 0x80
1000ba5c:	0200      	lsls	r0, r0, #8
1000ba5e:	4798      	blx	r3
		/*  */
		os_sem_up(gstrFwSem);
	}
#endif	//0
	return status;
}
1000ba60:	2008      	movs	r0, #8
1000ba62:	bd10      	pop	{r4, pc}
1000ba64:	10013d70 	.word	0x10013d70

1000ba68 <release_message_lock>:

plf_drv_status release_message_lock()
{
1000ba68:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000ba6a:	4b03      	ldr	r3, [pc, #12]	; (1000ba78 <release_message_lock+0x10>)
1000ba6c:	681b      	ldr	r3, [r3, #0]
1000ba6e:	2080      	movs	r0, #128	; 0x80
1000ba70:	01c0      	lsls	r0, r0, #7
1000ba72:	4798      	blx	r3
	return status;
}
1000ba74:	2000      	movs	r0, #0
1000ba76:	bd10      	pop	{r4, pc}
1000ba78:	10013d7c 	.word	0x10013d7c

1000ba7c <gpio1_combined_isr_handler>:

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source);
void wakeup_active_event_callback(uint32_t wakeup_source);

void gpio1_combined_isr_handler(void)
{
1000ba7c:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio1 = LPGPIO_16;
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
1000ba7e:	4a18      	ldr	r2, [pc, #96]	; (1000bae0 <gpio1_combined_isr_handler+0x64>)
1000ba80:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000ba82:	b29b      	uxth	r3, r3
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000ba84:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000ba86:	2180      	movs	r1, #128	; 0x80
1000ba88:	0209      	lsls	r1, r1, #8
1000ba8a:	4301      	orrs	r1, r0
1000ba8c:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000ba8e:	0010      	movs	r0, r2
1000ba90:	4d14      	ldr	r5, [pc, #80]	; (1000bae4 <gpio1_combined_isr_handler+0x68>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000ba92:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000ba94:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000ba96:	05db      	lsls	r3, r3, #23
1000ba98:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000ba9a:	d011      	beq.n	1000bac0 <gpio1_combined_isr_handler+0x44>
			port_gpio1 = (intstatus & ~(intstatus - 1));
1000ba9c:	b2db      	uxtb	r3, r3
1000ba9e:	4259      	negs	r1, r3
1000baa0:	400b      	ands	r3, r1
			while (!(port_gpio1 == 1)) {
1000baa2:	2b01      	cmp	r3, #1
1000baa4:	d006      	beq.n	1000bab4 <gpio1_combined_isr_handler+0x38>
1000baa6:	0011      	movs	r1, r2
				port_gpio1 = port_gpio1 >> 1;
1000baa8:	085b      	lsrs	r3, r3, #1
				index++;
1000baaa:	3101      	adds	r1, #1
1000baac:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio1 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio1 == 1)) {
1000baae:	2b01      	cmp	r3, #1
1000bab0:	d1fa      	bne.n	1000baa8 <gpio1_combined_isr_handler+0x2c>
1000bab2:	e000      	b.n	1000bab6 <gpio1_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000bab4:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000bab6:	0023      	movs	r3, r4
1000bab8:	408b      	lsls	r3, r1
1000baba:	b29b      	uxth	r3, r3
1000babc:	8703      	strh	r3, [r0, #56]	; 0x38
1000babe:	e003      	b.n	1000bac8 <gpio1_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000bac0:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000bac2:	432b      	orrs	r3, r5
1000bac4:	b29b      	uxth	r3, r3
1000bac6:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO1->INTSTATUSCLEAR.reg;
1000bac8:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000baca:	05db      	lsls	r3, r3, #23
1000bacc:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000bace:	d1e2      	bne.n	1000ba96 <gpio1_combined_isr_handler+0x1a>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000bad0:	2180      	movs	r1, #128	; 0x80
1000bad2:	0049      	lsls	r1, r1, #1
1000bad4:	3381      	adds	r3, #129	; 0x81
1000bad6:	33ff      	adds	r3, #255	; 0xff
1000bad8:	4a03      	ldr	r2, [pc, #12]	; (1000bae8 <gpio1_combined_isr_handler+0x6c>)
1000bada:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(8);
}
1000badc:	bd30      	pop	{r4, r5, pc}
1000bade:	46c0      	nop			; (mov r8, r8)
1000bae0:	40011000 	.word	0x40011000
1000bae4:	ffff8000 	.word	0xffff8000
1000bae8:	e000e100 	.word	0xe000e100

1000baec <gpio0_combined_isr_handler>:

void gpio0_combined_isr_handler(void)
{
1000baec:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio0 = LPGPIO_0;
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
1000baee:	4a17      	ldr	r2, [pc, #92]	; (1000bb4c <gpio0_combined_isr_handler+0x60>)
1000baf0:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000baf2:	b29b      	uxth	r3, r3
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000baf4:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000baf6:	2180      	movs	r1, #128	; 0x80
1000baf8:	0209      	lsls	r1, r1, #8
1000bafa:	4301      	orrs	r1, r0
1000bafc:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000bafe:	0010      	movs	r0, r2
1000bb00:	4d13      	ldr	r5, [pc, #76]	; (1000bb50 <gpio0_combined_isr_handler+0x64>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000bb02:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000bb04:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000bb06:	05db      	lsls	r3, r3, #23
1000bb08:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000bb0a:	d011      	beq.n	1000bb30 <gpio0_combined_isr_handler+0x44>
			port_gpio0 = (intstatus & ~(intstatus - 1));
1000bb0c:	b2db      	uxtb	r3, r3
1000bb0e:	4259      	negs	r1, r3
1000bb10:	400b      	ands	r3, r1
			while (!(port_gpio0 == 1)) {
1000bb12:	2b01      	cmp	r3, #1
1000bb14:	d006      	beq.n	1000bb24 <gpio0_combined_isr_handler+0x38>
1000bb16:	0011      	movs	r1, r2
				port_gpio0 = port_gpio0 >> 1;
1000bb18:	085b      	lsrs	r3, r3, #1
				index++;
1000bb1a:	3101      	adds	r1, #1
1000bb1c:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio0 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio0 == 1)) {
1000bb1e:	2b01      	cmp	r3, #1
1000bb20:	d1fa      	bne.n	1000bb18 <gpio0_combined_isr_handler+0x2c>
1000bb22:	e000      	b.n	1000bb26 <gpio0_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000bb24:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000bb26:	0023      	movs	r3, r4
1000bb28:	408b      	lsls	r3, r1
1000bb2a:	b29b      	uxth	r3, r3
1000bb2c:	8703      	strh	r3, [r0, #56]	; 0x38
1000bb2e:	e003      	b.n	1000bb38 <gpio0_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000bb30:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000bb32:	432b      	orrs	r3, r5
1000bb34:	b29b      	uxth	r3, r3
1000bb36:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO0->INTSTATUSCLEAR.reg;
1000bb38:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000bb3a:	05db      	lsls	r3, r3, #23
1000bb3c:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000bb3e:	d1e2      	bne.n	1000bb06 <gpio0_combined_isr_handler+0x1a>
1000bb40:	2180      	movs	r1, #128	; 0x80
1000bb42:	3381      	adds	r3, #129	; 0x81
1000bb44:	33ff      	adds	r3, #255	; 0xff
1000bb46:	4a03      	ldr	r2, [pc, #12]	; (1000bb54 <gpio0_combined_isr_handler+0x68>)
1000bb48:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(7);
}
1000bb4a:	bd30      	pop	{r4, r5, pc}
1000bb4c:	40010000 	.word	0x40010000
1000bb50:	ffff8000 	.word	0xffff8000
1000bb54:	e000e100 	.word	0xe000e100

1000bb58 <PORT1_COMB_Handler>:

#ifdef CHIPVERSION_B0
void PORT1_COMB_Handler(void)
{
1000bb58:	b510      	push	{r4, lr}
	/* if(CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13))) { */
	if (GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13))) {
1000bb5a:	4b0c      	ldr	r3, [pc, #48]	; (1000bb8c <PORT1_COMB_Handler+0x34>)
1000bb5c:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
1000bb5e:	0b5b      	lsrs	r3, r3, #13
1000bb60:	d010      	beq.n	1000bb84 <PORT1_COMB_Handler+0x2c>
		handle_ext_wakeup_isr();
1000bb62:	4b0b      	ldr	r3, [pc, #44]	; (1000bb90 <PORT1_COMB_Handler+0x38>)
1000bb64:	681b      	ldr	r3, [r3, #0]
1000bb66:	4798      	blx	r3

		/* clear specific int pin status that caused the Interrupt */
		/* CMSDK_GPIO1->INTCLEAR |= CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13)); */
		GPIO1->INTSTATUSCLEAR.reg |= GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13));
1000bb68:	4a08      	ldr	r2, [pc, #32]	; (1000bb8c <PORT1_COMB_Handler+0x34>)
1000bb6a:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000bb6c:	8f11      	ldrh	r1, [r2, #56]	; 0x38
1000bb6e:	0b5b      	lsrs	r3, r3, #13
1000bb70:	035b      	lsls	r3, r3, #13
1000bb72:	430b      	orrs	r3, r1
1000bb74:	8713      	strh	r3, [r2, #56]	; 0x38
1000bb76:	2180      	movs	r1, #128	; 0x80
1000bb78:	0049      	lsls	r1, r1, #1
1000bb7a:	23c0      	movs	r3, #192	; 0xc0
1000bb7c:	005b      	lsls	r3, r3, #1
1000bb7e:	4a05      	ldr	r2, [pc, #20]	; (1000bb94 <PORT1_COMB_Handler+0x3c>)
1000bb80:	50d1      	str	r1, [r2, r3]
1000bb82:	e001      	b.n	1000bb88 <PORT1_COMB_Handler+0x30>
		/* NVIC_ClearPendingIRQ(PORT1_COMB_IRQn); */
		NVIC_ClearPendingIRQ(8);
	} else {
		gpio1_combined_isr_handler();
1000bb84:	4b04      	ldr	r3, [pc, #16]	; (1000bb98 <PORT1_COMB_Handler+0x40>)
1000bb86:	4798      	blx	r3
	}
}
1000bb88:	bd10      	pop	{r4, pc}
1000bb8a:	46c0      	nop			; (mov r8, r8)
1000bb8c:	40011000 	.word	0x40011000
1000bb90:	1001403c 	.word	0x1001403c
1000bb94:	e000e100 	.word	0xe000e100
1000bb98:	1000ba7d 	.word	0x1000ba7d

1000bb9c <wakeup_int_unregister_callback>:
	{
		wakeup_source_callback[wakeup_source] = 0;
	}
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
1000bb9c:	2303      	movs	r3, #3
#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
	if(	(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_0) || 
1000bb9e:	2802      	cmp	r0, #2
1000bba0:	d804      	bhi.n	1000bbac <wakeup_int_unregister_callback+0x10>
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_1) || 
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_2) ) 
	{
		wakeup_source_callback[wakeup_source] = 0;
1000bba2:	0080      	lsls	r0, r0, #2
1000bba4:	2200      	movs	r2, #0
1000bba6:	4b02      	ldr	r3, [pc, #8]	; (1000bbb0 <wakeup_int_unregister_callback+0x14>)
1000bba8:	50c2      	str	r2, [r0, r3]

#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
1000bbaa:	2300      	movs	r3, #0
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
	}
	return status;
}
1000bbac:	0018      	movs	r0, r3
1000bbae:	4770      	bx	lr
1000bbb0:	10014054 	.word	0x10014054

1000bbb4 <wakeup_active_event_callback>:

void wakeup_active_event_callback(uint32_t wakeup_source)
{
1000bbb4:	b510      	push	{r4, lr}
1000bbb6:	0004      	movs	r4, r0
	portint_callback_t callback;
	uint32_t *pu32WakeSource = (uint32_t *)wakeup_source;
	if((*pu32WakeSource & 0xFF) == 1)
1000bbb8:	7803      	ldrb	r3, [r0, #0]
1000bbba:	2b01      	cmp	r3, #1
1000bbbc:	d108      	bne.n	1000bbd0 <wakeup_active_event_callback+0x1c>
	{
		if(wakeup_source_callback[0] != NULL) {
1000bbbe:	4b11      	ldr	r3, [pc, #68]	; (1000bc04 <wakeup_active_event_callback+0x50>)
1000bbc0:	681b      	ldr	r3, [r3, #0]
1000bbc2:	2b00      	cmp	r3, #0
1000bbc4:	d000      	beq.n	1000bbc8 <wakeup_active_event_callback+0x14>
			callback = wakeup_source_callback[0];
			callback();
1000bbc6:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF);
1000bbc8:	23ff      	movs	r3, #255	; 0xff
1000bbca:	6822      	ldr	r2, [r4, #0]
1000bbcc:	439a      	bics	r2, r3
1000bbce:	6022      	str	r2, [r4, #0]
	}
	if(((*pu32WakeSource >> 8) & 0xFF) == 1)
1000bbd0:	7863      	ldrb	r3, [r4, #1]
1000bbd2:	2b01      	cmp	r3, #1
1000bbd4:	d108      	bne.n	1000bbe8 <wakeup_active_event_callback+0x34>
	{
		if(wakeup_source_callback[1] != NULL) {
1000bbd6:	4b0b      	ldr	r3, [pc, #44]	; (1000bc04 <wakeup_active_event_callback+0x50>)
1000bbd8:	685b      	ldr	r3, [r3, #4]
1000bbda:	2b00      	cmp	r3, #0
1000bbdc:	d000      	beq.n	1000bbe0 <wakeup_active_event_callback+0x2c>
			callback = wakeup_source_callback[1];
			callback();
1000bbde:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 8);
1000bbe0:	4b09      	ldr	r3, [pc, #36]	; (1000bc08 <wakeup_active_event_callback+0x54>)
1000bbe2:	6822      	ldr	r2, [r4, #0]
1000bbe4:	4013      	ands	r3, r2
1000bbe6:	6023      	str	r3, [r4, #0]
	}
	if(((*pu32WakeSource >> 16) & 0xFF) == 1)
1000bbe8:	78a3      	ldrb	r3, [r4, #2]
1000bbea:	2b01      	cmp	r3, #1
1000bbec:	d108      	bne.n	1000bc00 <wakeup_active_event_callback+0x4c>
	{
		if(wakeup_source_callback[2] != NULL) {
1000bbee:	4b05      	ldr	r3, [pc, #20]	; (1000bc04 <wakeup_active_event_callback+0x50>)
1000bbf0:	689b      	ldr	r3, [r3, #8]
1000bbf2:	2b00      	cmp	r3, #0
1000bbf4:	d000      	beq.n	1000bbf8 <wakeup_active_event_callback+0x44>
			callback = wakeup_source_callback[2];
			callback();
1000bbf6:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 16);
1000bbf8:	4b04      	ldr	r3, [pc, #16]	; (1000bc0c <wakeup_active_event_callback+0x58>)
1000bbfa:	6822      	ldr	r2, [r4, #0]
1000bbfc:	4013      	ands	r3, r2
1000bbfe:	6023      	str	r3, [r4, #0]
	}
}
1000bc00:	bd10      	pop	{r4, pc}
1000bc02:	46c0      	nop			; (mov r8, r8)
1000bc04:	10014054 	.word	0x10014054
1000bc08:	ffff00ff 	.word	0xffff00ff
1000bc0c:	ff00ffff 	.word	0xff00ffff

1000bc10 <main>:
 */
/*- Includes ---------------------------------------------------------------*/
#include "sms_central1.h"

int main(void)
{
1000bc10:	b5f0      	push	{r4, r5, r6, r7, lr}
1000bc12:	b083      	sub	sp, #12
    /* Initialize platform
     * ------------------- */
	platform_driver_init();
1000bc14:	4b25      	ldr	r3, [pc, #148]	; (1000bcac <main+0x9c>)
1000bc16:	4798      	blx	r3
	gpio_init();
1000bc18:	4b25      	ldr	r3, [pc, #148]	; (1000bcb0 <main+0xa0>)
1000bc1a:	4798      	blx	r3
	serial_console_init();
1000bc1c:	4b25      	ldr	r3, [pc, #148]	; (1000bcb4 <main+0xa4>)
1000bc1e:	4798      	blx	r3

    /* Disable ULP
     * ----------- */
	acquire_sleep_lock();
1000bc20:	4b25      	ldr	r3, [pc, #148]	; (1000bcb8 <main+0xa8>)
1000bc22:	4798      	blx	r3

    /* Initialize hardware components
     * ------------------------------ */
    // Dualtimer
    sms_dualtimer_init();
1000bc24:	4b25      	ldr	r3, [pc, #148]	; (1000bcbc <main+0xac>)
1000bc26:	4798      	blx	r3
	
    // Blocking delay (hacked from other SAM platforms)
    delay_init();
1000bc28:	4b25      	ldr	r3, [pc, #148]	; (1000bcc0 <main+0xb0>)
1000bc2a:	4798      	blx	r3

	// Buttons
    sms_button_configure_gpio();
1000bc2c:	4b25      	ldr	r3, [pc, #148]	; (1000bcc4 <main+0xb4>)
1000bc2e:	4798      	blx	r3

    // LED
    sms_led_gpio_init();
1000bc30:	4b25      	ldr	r3, [pc, #148]	; (1000bcc8 <main+0xb8>)
1000bc32:	4798      	blx	r3

    // SPI
    sms_spi_master_configure();
1000bc34:	4b25      	ldr	r3, [pc, #148]	; (1000bccc <main+0xbc>)
1000bc36:	4798      	blx	r3

    /* Initialize the BLE module
     * ------------------------- */
	DBG_LOG_DEV("Initializing BLE Application");	
1000bc38:	4825      	ldr	r0, [pc, #148]	; (1000bcd0 <main+0xc0>)
1000bc3a:	4b26      	ldr	r3, [pc, #152]	; (1000bcd4 <main+0xc4>)
1000bc3c:	4798      	blx	r3
1000bc3e:	4826      	ldr	r0, [pc, #152]	; (1000bcd8 <main+0xc8>)
1000bc40:	4b26      	ldr	r3, [pc, #152]	; (1000bcdc <main+0xcc>)
1000bc42:	4798      	blx	r3
	ble_device_init(NULL);
1000bc44:	2000      	movs	r0, #0
1000bc46:	4b26      	ldr	r3, [pc, #152]	; (1000bce0 <main+0xd0>)
1000bc48:	4798      	blx	r3
	
    /* Register callbacks
     * ------------------ */
    // Dualtimer
    sms_dualtimer_register_callback(DUALTIMER_TIMER1, sms_dualtimer1_cb);
1000bc4a:	4926      	ldr	r1, [pc, #152]	; (1000bce4 <main+0xd4>)
1000bc4c:	2000      	movs	r0, #0
1000bc4e:	4c26      	ldr	r4, [pc, #152]	; (1000bce8 <main+0xd8>)
1000bc50:	47a0      	blx	r4
    sms_dualtimer_register_callback(DUALTIMER_TIMER2, sms_dualtimer2_cb);
1000bc52:	4926      	ldr	r1, [pc, #152]	; (1000bcec <main+0xdc>)
1000bc54:	2001      	movs	r0, #1
1000bc56:	47a0      	blx	r4

    // Buttons
    sms_button_register_callbacks();
1000bc58:	4b25      	ldr	r3, [pc, #148]	; (1000bcf0 <main+0xe0>)
1000bc5a:	4798      	blx	r3
    
    // BLE
    ble_mgr_events_callback_handler(REGISTER_CALL_BACK, BLE_GAP_EVENT_TYPE, sms_ble_gap_cb);
1000bc5c:	4a25      	ldr	r2, [pc, #148]	; (1000bcf4 <main+0xe4>)
1000bc5e:	2100      	movs	r1, #0
1000bc60:	2000      	movs	r0, #0
1000bc62:	4c25      	ldr	r4, [pc, #148]	; (1000bcf8 <main+0xe8>)
1000bc64:	47a0      	blx	r4
    ble_mgr_events_callback_handler(REGISTER_CALL_BACK, BLE_GATT_CLIENT_EVENT_TYPE, sms_ble_gatt_client_cb);
1000bc66:	4a25      	ldr	r2, [pc, #148]	; (1000bcfc <main+0xec>)
1000bc68:	2101      	movs	r1, #1
1000bc6a:	2000      	movs	r0, #0
1000bc6c:	47a0      	blx	r4
		/* BLE Event task */
		//ble_event_task(BLE_EVENT_TIMEOUT);
		
		/* Write application task */
        for(uint8_t i = 0; i < SPI_DATA_LENGTH; i++) {
            spi_wdata[i] = (uint8_t)rand();
1000bc6e:	4e24      	ldr	r6, [pc, #144]	; (1000bd00 <main+0xf0>)
1000bc70:	4f24      	ldr	r7, [pc, #144]	; (1000bd04 <main+0xf4>)
 */
/*- Includes ---------------------------------------------------------------*/
#include "sms_central1.h"

int main(void)
{
1000bc72:	2400      	movs	r4, #0
		/* BLE Event task */
		//ble_event_task(BLE_EVENT_TIMEOUT);
		
		/* Write application task */
        for(uint8_t i = 0; i < SPI_DATA_LENGTH; i++) {
            spi_wdata[i] = (uint8_t)rand();
1000bc74:	47b0      	blx	r6
1000bc76:	19e5      	adds	r5, r4, r7
1000bc78:	7028      	strb	r0, [r5, #0]
            DBG_LOG_DEV("rand? %d %d", spi_wdata[i], spi_rdata[i]);
1000bc7a:	4815      	ldr	r0, [pc, #84]	; (1000bcd0 <main+0xc0>)
1000bc7c:	4b15      	ldr	r3, [pc, #84]	; (1000bcd4 <main+0xc4>)
1000bc7e:	4798      	blx	r3
1000bc80:	4b21      	ldr	r3, [pc, #132]	; (1000bd08 <main+0xf8>)
1000bc82:	5d1a      	ldrb	r2, [r3, r4]
1000bc84:	7829      	ldrb	r1, [r5, #0]
1000bc86:	4821      	ldr	r0, [pc, #132]	; (1000bd0c <main+0xfc>)
1000bc88:	4b14      	ldr	r3, [pc, #80]	; (1000bcdc <main+0xcc>)
1000bc8a:	4798      	blx	r3
1000bc8c:	3401      	adds	r4, #1
	{
		/* BLE Event task */
		//ble_event_task(BLE_EVENT_TIMEOUT);
		
		/* Write application task */
        for(uint8_t i = 0; i < SPI_DATA_LENGTH; i++) {
1000bc8e:	2c10      	cmp	r4, #16
1000bc90:	d1f0      	bne.n	1000bc74 <main+0x64>
            spi_wdata[i] = (uint8_t)rand();
            DBG_LOG_DEV("rand? %d %d", spi_wdata[i], spi_rdata[i]);
        }
        sms_spi_master_transceive(&spi_master_instance, &spi_slave_instance, spi_wdata, spi_rdata, SPI_DATA_LENGTH);
1000bc92:	2310      	movs	r3, #16
1000bc94:	9300      	str	r3, [sp, #0]
1000bc96:	4b1c      	ldr	r3, [pc, #112]	; (1000bd08 <main+0xf8>)
1000bc98:	4a1a      	ldr	r2, [pc, #104]	; (1000bd04 <main+0xf4>)
1000bc9a:	491d      	ldr	r1, [pc, #116]	; (1000bd10 <main+0x100>)
1000bc9c:	481d      	ldr	r0, [pc, #116]	; (1000bd14 <main+0x104>)
1000bc9e:	4c1e      	ldr	r4, [pc, #120]	; (1000bd18 <main+0x108>)
1000bca0:	47a0      	blx	r4
        
        delay_ms(1000);         
1000bca2:	20fa      	movs	r0, #250	; 0xfa
1000bca4:	0080      	lsls	r0, r0, #2
1000bca6:	4b1d      	ldr	r3, [pc, #116]	; (1000bd1c <main+0x10c>)
1000bca8:	4798      	blx	r3
	}
1000bcaa:	e7e2      	b.n	1000bc72 <main+0x62>
1000bcac:	1000b501 	.word	0x1000b501
1000bcb0:	10008d25 	.word	0x10008d25
1000bcb4:	1000b1f5 	.word	0x1000b1f5
1000bcb8:	1000ba55 	.word	0x1000ba55
1000bcbc:	10008271 	.word	0x10008271
1000bcc0:	100082ed 	.word	0x100082ed
1000bcc4:	10008111 	.word	0x10008111
1000bcc8:	1000816d 	.word	0x1000816d
1000bccc:	100081bd 	.word	0x100081bd
1000bcd0:	1001095c 	.word	0x1001095c
1000bcd4:	1000f805 	.word	0x1000f805
1000bcd8:	100116dc 	.word	0x100116dc
1000bcdc:	1000f6e5 	.word	0x1000f6e5
1000bce0:	1000aadd 	.word	0x1000aadd
1000bce4:	100082c5 	.word	0x100082c5
1000bce8:	100082ad 	.word	0x100082ad
1000bcec:	100082d9 	.word	0x100082d9
1000bcf0:	10008159 	.word	0x10008159
1000bcf4:	100108e8 	.word	0x100108e8
1000bcf8:	1000aa0d 	.word	0x1000aa0d
1000bcfc:	10010934 	.word	0x10010934
1000bd00:	1000f819 	.word	0x1000f819
1000bd04:	100133c8 	.word	0x100133c8
1000bd08:	100133b8 	.word	0x100133b8
1000bd0c:	100116fc 	.word	0x100116fc
1000bd10:	10013354 	.word	0x10013354
1000bd14:	100133e0 	.word	0x100133e0
1000bd18:	10008235 	.word	0x10008235
1000bd1c:	1000832d 	.word	0x1000832d

1000bd20 <internal_event_post>:
1000bd20:	b570      	push	{r4, r5, r6, lr}
1000bd22:	4d12      	ldr	r5, [pc, #72]	; (1000bd6c <internal_event_post+0x4c>)
1000bd24:	682c      	ldr	r4, [r5, #0]
1000bd26:	2c00      	cmp	r4, #0
1000bd28:	d014      	beq.n	1000bd54 <internal_event_post+0x34>
1000bd2a:	6826      	ldr	r6, [r4, #0]
1000bd2c:	60e2      	str	r2, [r4, #12]
1000bd2e:	602e      	str	r6, [r5, #0]
1000bd30:	2500      	movs	r5, #0
1000bd32:	4a0f      	ldr	r2, [pc, #60]	; (1000bd70 <internal_event_post+0x50>)
1000bd34:	8123      	strh	r3, [r4, #8]
1000bd36:	6813      	ldr	r3, [r2, #0]
1000bd38:	6025      	str	r5, [r4, #0]
1000bd3a:	80a0      	strh	r0, [r4, #4]
1000bd3c:	80e1      	strh	r1, [r4, #6]
1000bd3e:	42ab      	cmp	r3, r5
1000bd40:	d101      	bne.n	1000bd46 <internal_event_post+0x26>
1000bd42:	6014      	str	r4, [r2, #0]
1000bd44:	e011      	b.n	1000bd6a <internal_event_post+0x4a>
1000bd46:	681a      	ldr	r2, [r3, #0]
1000bd48:	2a00      	cmp	r2, #0
1000bd4a:	d001      	beq.n	1000bd50 <internal_event_post+0x30>
1000bd4c:	1c13      	adds	r3, r2, #0
1000bd4e:	e7fa      	b.n	1000bd46 <internal_event_post+0x26>
1000bd50:	601c      	str	r4, [r3, #0]
1000bd52:	e00a      	b.n	1000bd6a <internal_event_post+0x4a>
1000bd54:	b2c4      	uxtb	r4, r0
1000bd56:	2c00      	cmp	r4, #0
1000bd58:	d107      	bne.n	1000bd6a <internal_event_post+0x4a>
1000bd5a:	4c06      	ldr	r4, [pc, #24]	; (1000bd74 <internal_event_post+0x54>)
1000bd5c:	60e2      	str	r2, [r4, #12]
1000bd5e:	2201      	movs	r2, #1
1000bd60:	8123      	strh	r3, [r4, #8]
1000bd62:	4b05      	ldr	r3, [pc, #20]	; (1000bd78 <internal_event_post+0x58>)
1000bd64:	80a0      	strh	r0, [r4, #4]
1000bd66:	80e1      	strh	r1, [r4, #6]
1000bd68:	701a      	strb	r2, [r3, #0]
1000bd6a:	bd70      	pop	{r4, r5, r6, pc}
1000bd6c:	1001329c 	.word	0x1001329c
1000bd70:	10013298 	.word	0x10013298
1000bd74:	10013284 	.word	0x10013284
1000bd78:	10013294 	.word	0x10013294

1000bd7c <internal_event_init>:
1000bd7c:	b510      	push	{r4, lr}
1000bd7e:	4b08      	ldr	r3, [pc, #32]	; (1000bda0 <internal_event_init+0x24>)
1000bd80:	0900      	lsrs	r0, r0, #4
1000bd82:	0100      	lsls	r0, r0, #4
1000bd84:	681a      	ldr	r2, [r3, #0]
1000bd86:	1808      	adds	r0, r1, r0
1000bd88:	4281      	cmp	r1, r0
1000bd8a:	d003      	beq.n	1000bd94 <internal_event_init+0x18>
1000bd8c:	600a      	str	r2, [r1, #0]
1000bd8e:	1c0a      	adds	r2, r1, #0
1000bd90:	3110      	adds	r1, #16
1000bd92:	e7f9      	b.n	1000bd88 <internal_event_init+0xc>
1000bd94:	601a      	str	r2, [r3, #0]
1000bd96:	2200      	movs	r2, #0
1000bd98:	4b02      	ldr	r3, [pc, #8]	; (1000bda4 <internal_event_init+0x28>)
1000bd9a:	601a      	str	r2, [r3, #0]
1000bd9c:	bd10      	pop	{r4, pc}
1000bd9e:	46c0      	nop			; (mov r8, r8)
1000bda0:	1001329c 	.word	0x1001329c
1000bda4:	10013298 	.word	0x10013298

1000bda8 <special_events_handler>:
1000bda8:	b538      	push	{r3, r4, r5, lr}
1000bdaa:	4c1b      	ldr	r4, [pc, #108]	; (1000be18 <special_events_handler+0x70>)
1000bdac:	1c03      	adds	r3, r0, #0
1000bdae:	8825      	ldrh	r5, [r4, #0]
1000bdb0:	1c08      	adds	r0, r1, #0
1000bdb2:	1c21      	adds	r1, r4, #0
1000bdb4:	429d      	cmp	r5, r3
1000bdb6:	d107      	bne.n	1000bdc8 <special_events_handler+0x20>
1000bdb8:	88a5      	ldrh	r5, [r4, #4]
1000bdba:	4285      	cmp	r5, r0
1000bdbc:	d104      	bne.n	1000bdc8 <special_events_handler+0x20>
1000bdbe:	2301      	movs	r3, #1
1000bdc0:	425b      	negs	r3, r3
1000bdc2:	8023      	strh	r3, [r4, #0]
1000bdc4:	60a2      	str	r2, [r4, #8]
1000bdc6:	e009      	b.n	1000bddc <special_events_handler+0x34>
1000bdc8:	884c      	ldrh	r4, [r1, #2]
1000bdca:	429c      	cmp	r4, r3
1000bdcc:	d10a      	bne.n	1000bde4 <special_events_handler+0x3c>
1000bdce:	888c      	ldrh	r4, [r1, #4]
1000bdd0:	4284      	cmp	r4, r0
1000bdd2:	d107      	bne.n	1000bde4 <special_events_handler+0x3c>
1000bdd4:	2301      	movs	r3, #1
1000bdd6:	425b      	negs	r3, r3
1000bdd8:	804b      	strh	r3, [r1, #2]
1000bdda:	608a      	str	r2, [r1, #8]
1000bddc:	4b0f      	ldr	r3, [pc, #60]	; (1000be1c <special_events_handler+0x74>)
1000bdde:	4798      	blx	r3
1000bde0:	2001      	movs	r0, #1
1000bde2:	e017      	b.n	1000be14 <special_events_handler+0x6c>
1000bde4:	490e      	ldr	r1, [pc, #56]	; (1000be20 <special_events_handler+0x78>)
1000bde6:	428b      	cmp	r3, r1
1000bde8:	d00e      	beq.n	1000be08 <special_events_handler+0x60>
1000bdea:	490e      	ldr	r1, [pc, #56]	; (1000be24 <special_events_handler+0x7c>)
1000bdec:	428b      	cmp	r3, r1
1000bdee:	d007      	beq.n	1000be00 <special_events_handler+0x58>
1000bdf0:	490d      	ldr	r1, [pc, #52]	; (1000be28 <special_events_handler+0x80>)
1000bdf2:	2000      	movs	r0, #0
1000bdf4:	428b      	cmp	r3, r1
1000bdf6:	d10d      	bne.n	1000be14 <special_events_handler+0x6c>
1000bdf8:	1c10      	adds	r0, r2, #0
1000bdfa:	4b0c      	ldr	r3, [pc, #48]	; (1000be2c <special_events_handler+0x84>)
1000bdfc:	4798      	blx	r3
1000bdfe:	e7ef      	b.n	1000bde0 <special_events_handler+0x38>
1000be00:	1c11      	adds	r1, r2, #0
1000be02:	4b0b      	ldr	r3, [pc, #44]	; (1000be30 <special_events_handler+0x88>)
1000be04:	2200      	movs	r2, #0
1000be06:	e002      	b.n	1000be0e <special_events_handler+0x66>
1000be08:	1c11      	adds	r1, r2, #0
1000be0a:	2200      	movs	r2, #0
1000be0c:	4b09      	ldr	r3, [pc, #36]	; (1000be34 <special_events_handler+0x8c>)
1000be0e:	4798      	blx	r3
1000be10:	4243      	negs	r3, r0
1000be12:	4158      	adcs	r0, r3
1000be14:	bd38      	pop	{r3, r4, r5, pc}
1000be16:	46c0      	nop			; (mov r8, r8)
1000be18:	10014060 	.word	0x10014060
1000be1c:	1000cfad 	.word	0x1000cfad
1000be20:	00000e13 	.word	0x00000e13
1000be24:	00000e15 	.word	0x00000e15
1000be28:	00000e01 	.word	0x00000e01
1000be2c:	1000d31d 	.word	0x1000d31d
1000be30:	1000d4dd 	.word	0x1000d4dd
1000be34:	1000d5b5 	.word	0x1000d5b5

1000be38 <at_ble_event_get>:
1000be38:	2300      	movs	r3, #0
1000be3a:	b5f0      	push	{r4, r5, r6, r7, lr}
1000be3c:	b087      	sub	sp, #28
1000be3e:	9204      	str	r2, [sp, #16]
1000be40:	7003      	strb	r3, [r0, #0]
1000be42:	9b04      	ldr	r3, [sp, #16]
1000be44:	9003      	str	r0, [sp, #12]
1000be46:	3b01      	subs	r3, #1
1000be48:	1c0d      	adds	r5, r1, #0
1000be4a:	9305      	str	r3, [sp, #20]
1000be4c:	3303      	adds	r3, #3
1000be4e:	d802      	bhi.n	1000be56 <at_ble_event_get+0x1e>
1000be50:	9804      	ldr	r0, [sp, #16]
1000be52:	4bae      	ldr	r3, [pc, #696]	; (1000c10c <at_ble_event_get+0x2d4>)
1000be54:	4798      	blx	r3
1000be56:	9b05      	ldr	r3, [sp, #20]
1000be58:	4cad      	ldr	r4, [pc, #692]	; (1000c110 <at_ble_event_get+0x2d8>)
1000be5a:	3303      	adds	r3, #3
1000be5c:	d902      	bls.n	1000be64 <at_ble_event_get+0x2c>
1000be5e:	2300      	movs	r3, #0
1000be60:	9302      	str	r3, [sp, #8]
1000be62:	e015      	b.n	1000be90 <at_ble_event_get+0x58>
1000be64:	2300      	movs	r3, #0
1000be66:	9302      	str	r3, [sp, #8]
1000be68:	6823      	ldr	r3, [r4, #0]
1000be6a:	2b00      	cmp	r3, #0
1000be6c:	d113      	bne.n	1000be96 <at_ble_event_get+0x5e>
1000be6e:	9b02      	ldr	r3, [sp, #8]
1000be70:	2bd0      	cmp	r3, #208	; 0xd0
1000be72:	d100      	bne.n	1000be76 <at_ble_event_get+0x3e>
1000be74:	e2da      	b.n	1000c42c <at_ble_event_get+0x5f4>
1000be76:	9804      	ldr	r0, [sp, #16]
1000be78:	4ba6      	ldr	r3, [pc, #664]	; (1000c114 <at_ble_event_get+0x2dc>)
1000be7a:	4798      	blx	r3
1000be7c:	9002      	str	r0, [sp, #8]
1000be7e:	2802      	cmp	r0, #2
1000be80:	d1f2      	bne.n	1000be68 <at_ble_event_get+0x30>
1000be82:	e03f      	b.n	1000bf04 <at_ble_event_get+0xcc>
1000be84:	9804      	ldr	r0, [sp, #16]
1000be86:	4ba3      	ldr	r3, [pc, #652]	; (1000c114 <at_ble_event_get+0x2dc>)
1000be88:	4798      	blx	r3
1000be8a:	9002      	str	r0, [sp, #8]
1000be8c:	2802      	cmp	r0, #2
1000be8e:	d039      	beq.n	1000bf04 <at_ble_event_get+0xcc>
1000be90:	6823      	ldr	r3, [r4, #0]
1000be92:	2b00      	cmp	r3, #0
1000be94:	d0f6      	beq.n	1000be84 <at_ble_event_get+0x4c>
1000be96:	9b02      	ldr	r3, [sp, #8]
1000be98:	2bd0      	cmp	r3, #208	; 0xd0
1000be9a:	d100      	bne.n	1000be9e <at_ble_event_get+0x66>
1000be9c:	e2c6      	b.n	1000c42c <at_ble_event_get+0x5f4>
1000be9e:	9b02      	ldr	r3, [sp, #8]
1000bea0:	3b03      	subs	r3, #3
1000bea2:	1e5a      	subs	r2, r3, #1
1000bea4:	4193      	sbcs	r3, r2
1000bea6:	9a02      	ldr	r2, [sp, #8]
1000bea8:	425b      	negs	r3, r3
1000beaa:	401a      	ands	r2, r3
1000beac:	6823      	ldr	r3, [r4, #0]
1000beae:	9202      	str	r2, [sp, #8]
1000beb0:	2b00      	cmp	r3, #0
1000beb2:	d100      	bne.n	1000beb6 <at_ble_event_get+0x7e>
1000beb4:	e2c2      	b.n	1000c43c <at_ble_event_get+0x604>
1000beb6:	681a      	ldr	r2, [r3, #0]
1000beb8:	68de      	ldr	r6, [r3, #12]
1000beba:	6022      	str	r2, [r4, #0]
1000bebc:	88da      	ldrh	r2, [r3, #6]
1000bebe:	9201      	str	r2, [sp, #4]
1000bec0:	4a95      	ldr	r2, [pc, #596]	; (1000c118 <at_ble_event_get+0x2e0>)
1000bec2:	889c      	ldrh	r4, [r3, #4]
1000bec4:	6811      	ldr	r1, [r2, #0]
1000bec6:	6013      	str	r3, [r2, #0]
1000bec8:	6019      	str	r1, [r3, #0]
1000beca:	4b94      	ldr	r3, [pc, #592]	; (1000c11c <at_ble_event_get+0x2e4>)
1000becc:	781b      	ldrb	r3, [r3, #0]
1000bece:	2b01      	cmp	r3, #1
1000bed0:	d10f      	bne.n	1000bef2 <at_ble_event_get+0xba>
1000bed2:	4b93      	ldr	r3, [pc, #588]	; (1000c120 <at_ble_event_get+0x2e8>)
1000bed4:	4a92      	ldr	r2, [pc, #584]	; (1000c120 <at_ble_event_get+0x2e8>)
1000bed6:	8898      	ldrh	r0, [r3, #4]
1000bed8:	88d9      	ldrh	r1, [r3, #6]
1000beda:	68d2      	ldr	r2, [r2, #12]
1000bedc:	891b      	ldrh	r3, [r3, #8]
1000bede:	4f91      	ldr	r7, [pc, #580]	; (1000c124 <at_ble_event_get+0x2ec>)
1000bee0:	47b8      	blx	r7
1000bee2:	2210      	movs	r2, #16
1000bee4:	4b90      	ldr	r3, [pc, #576]	; (1000c128 <at_ble_event_get+0x2f0>)
1000bee6:	488e      	ldr	r0, [pc, #568]	; (1000c120 <at_ble_event_get+0x2e8>)
1000bee8:	2100      	movs	r1, #0
1000beea:	4798      	blx	r3
1000beec:	2300      	movs	r3, #0
1000beee:	4a8b      	ldr	r2, [pc, #556]	; (1000c11c <at_ble_event_get+0x2e4>)
1000bef0:	7013      	strb	r3, [r2, #0]
1000bef2:	9b02      	ldr	r3, [sp, #8]
1000bef4:	2b00      	cmp	r3, #0
1000bef6:	d114      	bne.n	1000bf22 <at_ble_event_get+0xea>
1000bef8:	4b8c      	ldr	r3, [pc, #560]	; (1000c12c <at_ble_event_get+0x2f4>)
1000befa:	429c      	cmp	r4, r3
1000befc:	d009      	beq.n	1000bf12 <at_ble_event_get+0xda>
1000befe:	4b8c      	ldr	r3, [pc, #560]	; (1000c130 <at_ble_event_get+0x2f8>)
1000bf00:	429c      	cmp	r4, r3
1000bf02:	d127      	bne.n	1000bf54 <at_ble_event_get+0x11c>
1000bf04:	233a      	movs	r3, #58	; 0x3a
1000bf06:	9a03      	ldr	r2, [sp, #12]
1000bf08:	7013      	strb	r3, [r2, #0]
1000bf0a:	2300      	movs	r3, #0
1000bf0c:	9302      	str	r3, [sp, #8]
1000bf0e:	1c1d      	adds	r5, r3, #0
1000bf10:	e007      	b.n	1000bf22 <at_ble_event_get+0xea>
1000bf12:	9b01      	ldr	r3, [sp, #4]
1000bf14:	42a3      	cmp	r3, r4
1000bf16:	d000      	beq.n	1000bf1a <at_ble_event_get+0xe2>
1000bf18:	e28a      	b.n	1000c430 <at_ble_event_get+0x5f8>
1000bf1a:	2338      	movs	r3, #56	; 0x38
1000bf1c:	9a03      	ldr	r2, [sp, #12]
1000bf1e:	7013      	strb	r3, [r2, #0]
1000bf20:	602e      	str	r6, [r5, #0]
1000bf22:	9b03      	ldr	r3, [sp, #12]
1000bf24:	781b      	ldrb	r3, [r3, #0]
1000bf26:	2b3b      	cmp	r3, #59	; 0x3b
1000bf28:	d101      	bne.n	1000bf2e <at_ble_event_get+0xf6>
1000bf2a:	4b82      	ldr	r3, [pc, #520]	; (1000c134 <at_ble_event_get+0x2fc>)
1000bf2c:	4798      	blx	r3
1000bf2e:	9b03      	ldr	r3, [sp, #12]
1000bf30:	781b      	ldrb	r3, [r3, #0]
1000bf32:	2b3b      	cmp	r3, #59	; 0x3b
1000bf34:	d003      	beq.n	1000bf3e <at_ble_event_get+0x106>
1000bf36:	9b05      	ldr	r3, [sp, #20]
1000bf38:	3303      	adds	r3, #3
1000bf3a:	d904      	bls.n	1000bf46 <at_ble_event_get+0x10e>
1000bf3c:	e283      	b.n	1000c446 <at_ble_event_get+0x60e>
1000bf3e:	9b02      	ldr	r3, [sp, #8]
1000bf40:	2b00      	cmp	r3, #0
1000bf42:	d088      	beq.n	1000be56 <at_ble_event_get+0x1e>
1000bf44:	e7f7      	b.n	1000bf36 <at_ble_event_get+0xfe>
1000bf46:	9b02      	ldr	r3, [sp, #8]
1000bf48:	2bd0      	cmp	r3, #208	; 0xd0
1000bf4a:	d100      	bne.n	1000bf4e <at_ble_event_get+0x116>
1000bf4c:	e27b      	b.n	1000c446 <at_ble_event_get+0x60e>
1000bf4e:	4b7a      	ldr	r3, [pc, #488]	; (1000c138 <at_ble_event_get+0x300>)
1000bf50:	4798      	blx	r3
1000bf52:	e278      	b.n	1000c446 <at_ble_event_get+0x60e>
1000bf54:	9b01      	ldr	r3, [sp, #4]
1000bf56:	2bbb      	cmp	r3, #187	; 0xbb
1000bf58:	d125      	bne.n	1000bfa6 <at_ble_event_get+0x16e>
1000bf5a:	2cbb      	cmp	r4, #187	; 0xbb
1000bf5c:	d123      	bne.n	1000bfa6 <at_ble_event_get+0x16e>
1000bf5e:	466b      	mov	r3, sp
1000bf60:	891b      	ldrh	r3, [r3, #8]
1000bf62:	80ab      	strh	r3, [r5, #4]
1000bf64:	78b3      	ldrb	r3, [r6, #2]
1000bf66:	7872      	ldrb	r2, [r6, #1]
1000bf68:	78f0      	ldrb	r0, [r6, #3]
1000bf6a:	021b      	lsls	r3, r3, #8
1000bf6c:	4313      	orrs	r3, r2
1000bf6e:	7971      	ldrb	r1, [r6, #5]
1000bf70:	7932      	ldrb	r2, [r6, #4]
1000bf72:	70a8      	strb	r0, [r5, #2]
1000bf74:	4871      	ldr	r0, [pc, #452]	; (1000c13c <at_ble_event_get+0x304>)
1000bf76:	802b      	strh	r3, [r5, #0]
1000bf78:	4283      	cmp	r3, r0
1000bf7a:	d806      	bhi.n	1000bf8a <at_ble_event_get+0x152>
1000bf7c:	4a70      	ldr	r2, [pc, #448]	; (1000c140 <at_ble_event_get+0x308>)
1000bf7e:	4293      	cmp	r3, r2
1000bf80:	d20b      	bcs.n	1000bf9a <at_ble_event_get+0x162>
1000bf82:	4a70      	ldr	r2, [pc, #448]	; (1000c144 <at_ble_event_get+0x30c>)
1000bf84:	4293      	cmp	r3, r2
1000bf86:	d008      	beq.n	1000bf9a <at_ble_event_get+0x162>
1000bf88:	e009      	b.n	1000bf9e <at_ble_event_get+0x166>
1000bf8a:	486f      	ldr	r0, [pc, #444]	; (1000c148 <at_ble_event_get+0x310>)
1000bf8c:	4283      	cmp	r3, r0
1000bf8e:	d106      	bne.n	1000bf9e <at_ble_event_get+0x166>
1000bf90:	020b      	lsls	r3, r1, #8
1000bf92:	4313      	orrs	r3, r2
1000bf94:	80ab      	strh	r3, [r5, #4]
1000bf96:	2337      	movs	r3, #55	; 0x37
1000bf98:	e002      	b.n	1000bfa0 <at_ble_event_get+0x168>
1000bf9a:	2336      	movs	r3, #54	; 0x36
1000bf9c:	e000      	b.n	1000bfa0 <at_ble_event_get+0x168>
1000bf9e:	2300      	movs	r3, #0
1000bfa0:	9a03      	ldr	r2, [sp, #12]
1000bfa2:	7013      	strb	r3, [r2, #0]
1000bfa4:	e7bd      	b.n	1000bf22 <at_ble_event_get+0xea>
1000bfa6:	4b69      	ldr	r3, [pc, #420]	; (1000c14c <at_ble_event_get+0x314>)
1000bfa8:	429c      	cmp	r4, r3
1000bfaa:	d100      	bne.n	1000bfae <at_ble_event_get+0x176>
1000bfac:	e144      	b.n	1000c238 <at_ble_event_get+0x400>
1000bfae:	d865      	bhi.n	1000c07c <at_ble_event_get+0x244>
1000bfb0:	4b67      	ldr	r3, [pc, #412]	; (1000c150 <at_ble_event_get+0x318>)
1000bfb2:	429c      	cmp	r4, r3
1000bfb4:	d100      	bne.n	1000bfb8 <at_ble_event_get+0x180>
1000bfb6:	e1d5      	b.n	1000c364 <at_ble_event_get+0x52c>
1000bfb8:	d82f      	bhi.n	1000c01a <at_ble_event_get+0x1e2>
1000bfba:	4b66      	ldr	r3, [pc, #408]	; (1000c154 <at_ble_event_get+0x31c>)
1000bfbc:	429c      	cmp	r4, r3
1000bfbe:	d100      	bne.n	1000bfc2 <at_ble_event_get+0x18a>
1000bfc0:	e1e0      	b.n	1000c384 <at_ble_event_get+0x54c>
1000bfc2:	d813      	bhi.n	1000bfec <at_ble_event_get+0x1b4>
1000bfc4:	4b64      	ldr	r3, [pc, #400]	; (1000c158 <at_ble_event_get+0x320>)
1000bfc6:	429c      	cmp	r4, r3
1000bfc8:	d100      	bne.n	1000bfcc <at_ble_event_get+0x194>
1000bfca:	e1a3      	b.n	1000c314 <at_ble_event_get+0x4dc>
1000bfcc:	d804      	bhi.n	1000bfd8 <at_ble_event_get+0x1a0>
1000bfce:	2638      	movs	r6, #56	; 0x38
1000bfd0:	42b4      	cmp	r4, r6
1000bfd2:	d100      	bne.n	1000bfd6 <at_ble_event_get+0x19e>
1000bfd4:	e225      	b.n	1000c422 <at_ble_event_get+0x5ea>
1000bfd6:	e117      	b.n	1000c208 <at_ble_event_get+0x3d0>
1000bfd8:	4b60      	ldr	r3, [pc, #384]	; (1000c15c <at_ble_event_get+0x324>)
1000bfda:	429c      	cmp	r4, r3
1000bfdc:	d100      	bne.n	1000bfe0 <at_ble_event_get+0x1a8>
1000bfde:	e19f      	b.n	1000c320 <at_ble_event_get+0x4e8>
1000bfe0:	33fe      	adds	r3, #254	; 0xfe
1000bfe2:	33ff      	adds	r3, #255	; 0xff
1000bfe4:	429c      	cmp	r4, r3
1000bfe6:	d100      	bne.n	1000bfea <at_ble_event_get+0x1b2>
1000bfe8:	e1d3      	b.n	1000c392 <at_ble_event_get+0x55a>
1000bfea:	e10d      	b.n	1000c208 <at_ble_event_get+0x3d0>
1000bfec:	4b5c      	ldr	r3, [pc, #368]	; (1000c160 <at_ble_event_get+0x328>)
1000bfee:	429c      	cmp	r4, r3
1000bff0:	d100      	bne.n	1000bff4 <at_ble_event_get+0x1bc>
1000bff2:	e1a9      	b.n	1000c348 <at_ble_event_get+0x510>
1000bff4:	d808      	bhi.n	1000c008 <at_ble_event_get+0x1d0>
1000bff6:	4b5b      	ldr	r3, [pc, #364]	; (1000c164 <at_ble_event_get+0x32c>)
1000bff8:	429c      	cmp	r4, r3
1000bffa:	d100      	bne.n	1000bffe <at_ble_event_get+0x1c6>
1000bffc:	e196      	b.n	1000c32c <at_ble_event_get+0x4f4>
1000bffe:	4b5a      	ldr	r3, [pc, #360]	; (1000c168 <at_ble_event_get+0x330>)
1000c000:	429c      	cmp	r4, r3
1000c002:	d100      	bne.n	1000c006 <at_ble_event_get+0x1ce>
1000c004:	e199      	b.n	1000c33a <at_ble_event_get+0x502>
1000c006:	e0ff      	b.n	1000c208 <at_ble_event_get+0x3d0>
1000c008:	4b58      	ldr	r3, [pc, #352]	; (1000c16c <at_ble_event_get+0x334>)
1000c00a:	429c      	cmp	r4, r3
1000c00c:	d100      	bne.n	1000c010 <at_ble_event_get+0x1d8>
1000c00e:	e1a2      	b.n	1000c356 <at_ble_event_get+0x51e>
1000c010:	4b57      	ldr	r3, [pc, #348]	; (1000c170 <at_ble_event_get+0x338>)
1000c012:	429c      	cmp	r4, r3
1000c014:	d100      	bne.n	1000c018 <at_ble_event_get+0x1e0>
1000c016:	e1d4      	b.n	1000c3c2 <at_ble_event_get+0x58a>
1000c018:	e0f6      	b.n	1000c208 <at_ble_event_get+0x3d0>
1000c01a:	4b56      	ldr	r3, [pc, #344]	; (1000c174 <at_ble_event_get+0x33c>)
1000c01c:	429c      	cmp	r4, r3
1000c01e:	d100      	bne.n	1000c022 <at_ble_event_get+0x1ea>
1000c020:	e1c8      	b.n	1000c3b4 <at_ble_event_get+0x57c>
1000c022:	d812      	bhi.n	1000c04a <at_ble_event_get+0x212>
1000c024:	4b54      	ldr	r3, [pc, #336]	; (1000c178 <at_ble_event_get+0x340>)
1000c026:	429c      	cmp	r4, r3
1000c028:	d100      	bne.n	1000c02c <at_ble_event_get+0x1f4>
1000c02a:	e1d1      	b.n	1000c3d0 <at_ble_event_get+0x598>
1000c02c:	d804      	bhi.n	1000c038 <at_ble_event_get+0x200>
1000c02e:	4b53      	ldr	r3, [pc, #332]	; (1000c17c <at_ble_event_get+0x344>)
1000c030:	429c      	cmp	r4, r3
1000c032:	d100      	bne.n	1000c036 <at_ble_event_get+0x1fe>
1000c034:	e19b      	b.n	1000c36e <at_ble_event_get+0x536>
1000c036:	e0e7      	b.n	1000c208 <at_ble_event_get+0x3d0>
1000c038:	4b51      	ldr	r3, [pc, #324]	; (1000c180 <at_ble_event_get+0x348>)
1000c03a:	429c      	cmp	r4, r3
1000c03c:	d100      	bne.n	1000c040 <at_ble_event_get+0x208>
1000c03e:	e1ad      	b.n	1000c39c <at_ble_event_get+0x564>
1000c040:	4b50      	ldr	r3, [pc, #320]	; (1000c184 <at_ble_event_get+0x34c>)
1000c042:	429c      	cmp	r4, r3
1000c044:	d100      	bne.n	1000c048 <at_ble_event_get+0x210>
1000c046:	e1b0      	b.n	1000c3aa <at_ble_event_get+0x572>
1000c048:	e0de      	b.n	1000c208 <at_ble_event_get+0x3d0>
1000c04a:	4b4f      	ldr	r3, [pc, #316]	; (1000c188 <at_ble_event_get+0x350>)
1000c04c:	429c      	cmp	r4, r3
1000c04e:	d100      	bne.n	1000c052 <at_ble_event_get+0x21a>
1000c050:	e0e0      	b.n	1000c214 <at_ble_event_get+0x3dc>
1000c052:	d809      	bhi.n	1000c068 <at_ble_event_get+0x230>
1000c054:	3b08      	subs	r3, #8
1000c056:	429c      	cmp	r4, r3
1000c058:	d100      	bne.n	1000c05c <at_ble_event_get+0x224>
1000c05a:	e0d7      	b.n	1000c20c <at_ble_event_get+0x3d4>
1000c05c:	4b4b      	ldr	r3, [pc, #300]	; (1000c18c <at_ble_event_get+0x354>)
1000c05e:	2639      	movs	r6, #57	; 0x39
1000c060:	429c      	cmp	r4, r3
1000c062:	d100      	bne.n	1000c066 <at_ble_event_get+0x22e>
1000c064:	e1dd      	b.n	1000c422 <at_ble_event_get+0x5ea>
1000c066:	e0cf      	b.n	1000c208 <at_ble_event_get+0x3d0>
1000c068:	23d1      	movs	r3, #209	; 0xd1
1000c06a:	011b      	lsls	r3, r3, #4
1000c06c:	429c      	cmp	r4, r3
1000c06e:	d100      	bne.n	1000c072 <at_ble_event_get+0x23a>
1000c070:	e0d6      	b.n	1000c220 <at_ble_event_get+0x3e8>
1000c072:	4b47      	ldr	r3, [pc, #284]	; (1000c190 <at_ble_event_get+0x358>)
1000c074:	429c      	cmp	r4, r3
1000c076:	d100      	bne.n	1000c07a <at_ble_event_get+0x242>
1000c078:	e0d8      	b.n	1000c22c <at_ble_event_get+0x3f4>
1000c07a:	e0c5      	b.n	1000c208 <at_ble_event_get+0x3d0>
1000c07c:	4b45      	ldr	r3, [pc, #276]	; (1000c194 <at_ble_event_get+0x35c>)
1000c07e:	429c      	cmp	r4, r3
1000c080:	d100      	bne.n	1000c084 <at_ble_event_get+0x24c>
1000c082:	e117      	b.n	1000c2b4 <at_ble_event_get+0x47c>
1000c084:	d82e      	bhi.n	1000c0e4 <at_ble_event_get+0x2ac>
1000c086:	4b44      	ldr	r3, [pc, #272]	; (1000c198 <at_ble_event_get+0x360>)
1000c088:	429c      	cmp	r4, r3
1000c08a:	d100      	bne.n	1000c08e <at_ble_event_get+0x256>
1000c08c:	e13d      	b.n	1000c30a <at_ble_event_get+0x4d2>
1000c08e:	d812      	bhi.n	1000c0b6 <at_ble_event_get+0x27e>
1000c090:	4b42      	ldr	r3, [pc, #264]	; (1000c19c <at_ble_event_get+0x364>)
1000c092:	429c      	cmp	r4, r3
1000c094:	d100      	bne.n	1000c098 <at_ble_event_get+0x260>
1000c096:	e0e8      	b.n	1000c26a <at_ble_event_get+0x432>
1000c098:	d804      	bhi.n	1000c0a4 <at_ble_event_get+0x26c>
1000c09a:	3b03      	subs	r3, #3
1000c09c:	429c      	cmp	r4, r3
1000c09e:	d100      	bne.n	1000c0a2 <at_ble_event_get+0x26a>
1000c0a0:	e0d0      	b.n	1000c244 <at_ble_event_get+0x40c>
1000c0a2:	e0b1      	b.n	1000c208 <at_ble_event_get+0x3d0>
1000c0a4:	4b3e      	ldr	r3, [pc, #248]	; (1000c1a0 <at_ble_event_get+0x368>)
1000c0a6:	429c      	cmp	r4, r3
1000c0a8:	d100      	bne.n	1000c0ac <at_ble_event_get+0x274>
1000c0aa:	e0d0      	b.n	1000c24e <at_ble_event_get+0x416>
1000c0ac:	4b3d      	ldr	r3, [pc, #244]	; (1000c1a4 <at_ble_event_get+0x36c>)
1000c0ae:	429c      	cmp	r4, r3
1000c0b0:	d100      	bne.n	1000c0b4 <at_ble_event_get+0x27c>
1000c0b2:	e0f9      	b.n	1000c2a8 <at_ble_event_get+0x470>
1000c0b4:	e0a8      	b.n	1000c208 <at_ble_event_get+0x3d0>
1000c0b6:	4b3c      	ldr	r3, [pc, #240]	; (1000c1a8 <at_ble_event_get+0x370>)
1000c0b8:	429c      	cmp	r4, r3
1000c0ba:	d100      	bne.n	1000c0be <at_ble_event_get+0x286>
1000c0bc:	e0db      	b.n	1000c276 <at_ble_event_get+0x43e>
1000c0be:	d808      	bhi.n	1000c0d2 <at_ble_event_get+0x29a>
1000c0c0:	4b3a      	ldr	r3, [pc, #232]	; (1000c1ac <at_ble_event_get+0x374>)
1000c0c2:	429c      	cmp	r4, r3
1000c0c4:	d100      	bne.n	1000c0c8 <at_ble_event_get+0x290>
1000c0c6:	e11b      	b.n	1000c300 <at_ble_event_get+0x4c8>
1000c0c8:	4b39      	ldr	r3, [pc, #228]	; (1000c1b0 <at_ble_event_get+0x378>)
1000c0ca:	429c      	cmp	r4, r3
1000c0cc:	d100      	bne.n	1000c0d0 <at_ble_event_get+0x298>
1000c0ce:	e0d8      	b.n	1000c282 <at_ble_event_get+0x44a>
1000c0d0:	e09a      	b.n	1000c208 <at_ble_event_get+0x3d0>
1000c0d2:	4b38      	ldr	r3, [pc, #224]	; (1000c1b4 <at_ble_event_get+0x37c>)
1000c0d4:	429c      	cmp	r4, r3
1000c0d6:	d100      	bne.n	1000c0da <at_ble_event_get+0x2a2>
1000c0d8:	e0d8      	b.n	1000c28c <at_ble_event_get+0x454>
1000c0da:	4b37      	ldr	r3, [pc, #220]	; (1000c1b8 <at_ble_event_get+0x380>)
1000c0dc:	429c      	cmp	r4, r3
1000c0de:	d100      	bne.n	1000c0e2 <at_ble_event_get+0x2aa>
1000c0e0:	e0db      	b.n	1000c29a <at_ble_event_get+0x462>
1000c0e2:	e091      	b.n	1000c208 <at_ble_event_get+0x3d0>
1000c0e4:	4b35      	ldr	r3, [pc, #212]	; (1000c1bc <at_ble_event_get+0x384>)
1000c0e6:	429c      	cmp	r4, r3
1000c0e8:	d100      	bne.n	1000c0ec <at_ble_event_get+0x2b4>
1000c0ea:	e0f7      	b.n	1000c2dc <at_ble_event_get+0x4a4>
1000c0ec:	d876      	bhi.n	1000c1dc <at_ble_event_get+0x3a4>
1000c0ee:	4b34      	ldr	r3, [pc, #208]	; (1000c1c0 <at_ble_event_get+0x388>)
1000c0f0:	429c      	cmp	r4, r3
1000c0f2:	d100      	bne.n	1000c0f6 <at_ble_event_get+0x2be>
1000c0f4:	e0f8      	b.n	1000c2e8 <at_ble_event_get+0x4b0>
1000c0f6:	d869      	bhi.n	1000c1cc <at_ble_event_get+0x394>
1000c0f8:	4b32      	ldr	r3, [pc, #200]	; (1000c1c4 <at_ble_event_get+0x38c>)
1000c0fa:	429c      	cmp	r4, r3
1000c0fc:	d100      	bne.n	1000c100 <at_ble_event_get+0x2c8>
1000c0fe:	e0e0      	b.n	1000c2c2 <at_ble_event_get+0x48a>
1000c100:	4b31      	ldr	r3, [pc, #196]	; (1000c1c8 <at_ble_event_get+0x390>)
1000c102:	429c      	cmp	r4, r3
1000c104:	d100      	bne.n	1000c108 <at_ble_event_get+0x2d0>
1000c106:	e0a9      	b.n	1000c25c <at_ble_event_get+0x424>
1000c108:	e07e      	b.n	1000c208 <at_ble_event_get+0x3d0>
1000c10a:	46c0      	nop			; (mov r8, r8)
1000c10c:	1000cfe5 	.word	0x1000cfe5
1000c110:	10013298 	.word	0x10013298
1000c114:	1000b7f1 	.word	0x1000b7f1
1000c118:	1001329c 	.word	0x1001329c
1000c11c:	10013294 	.word	0x10013294
1000c120:	10013284 	.word	0x10013284
1000c124:	1000bd21 	.word	0x1000bd21
1000c128:	1000f6d5 	.word	0x1000f6d5
1000c12c:	0000ffff 	.word	0x0000ffff
1000c130:	0000fffe 	.word	0x0000fffe
1000c134:	1000ba69 	.word	0x1000ba69
1000c138:	1000cfe7 	.word	0x1000cfe7
1000c13c:	0000201e 	.word	0x0000201e
1000c140:	0000201d 	.word	0x0000201d
1000c144:	00000c03 	.word	0x00000c03
1000c148:	0000201f 	.word	0x0000201f
1000c14c:	00000d1c 	.word	0x00000d1c
1000c150:	00000c0c 	.word	0x00000c0c
1000c154:	00000c02 	.word	0x00000c02
1000c158:	00000a02 	.word	0x00000a02
1000c15c:	00000a03 	.word	0x00000a03
1000c160:	00000c06 	.word	0x00000c06
1000c164:	00000c04 	.word	0x00000c04
1000c168:	00000c05 	.word	0x00000c05
1000c16c:	00000c07 	.word	0x00000c07
1000c170:	00000c09 	.word	0x00000c09
1000c174:	00000c17 	.word	0x00000c17
1000c178:	00000c12 	.word	0x00000c12
1000c17c:	00000c0d 	.word	0x00000c0d
1000c180:	00000c13 	.word	0x00000c13
1000c184:	00000c15 	.word	0x00000c15
1000c188:	00000d08 	.word	0x00000d08
1000c18c:	00000d01 	.word	0x00000d01
1000c190:	00000d15 	.word	0x00000d15
1000c194:	00000e1b 	.word	0x00000e1b
1000c198:	00000e0f 	.word	0x00000e0f
1000c19c:	00000e03 	.word	0x00000e03
1000c1a0:	00000e06 	.word	0x00000e06
1000c1a4:	00000e0a 	.word	0x00000e0a
1000c1a8:	00000e15 	.word	0x00000e15
1000c1ac:	00000e11 	.word	0x00000e11
1000c1b0:	00000e13 	.word	0x00000e13
1000c1b4:	00000e17 	.word	0x00000e17
1000c1b8:	00000e19 	.word	0x00000e19
1000c1bc:	00000e27 	.word	0x00000e27
1000c1c0:	00000e21 	.word	0x00000e21
1000c1c4:	00000e1c 	.word	0x00000e1c
1000c1c8:	00000e1d 	.word	0x00000e1d
1000c1cc:	4b9f      	ldr	r3, [pc, #636]	; (1000c44c <at_ble_event_get+0x614>)
1000c1ce:	429c      	cmp	r4, r3
1000c1d0:	d07e      	beq.n	1000c2d0 <at_ble_event_get+0x498>
1000c1d2:	4b9f      	ldr	r3, [pc, #636]	; (1000c450 <at_ble_event_get+0x618>)
1000c1d4:	429c      	cmp	r4, r3
1000c1d6:	d100      	bne.n	1000c1da <at_ble_event_get+0x3a2>
1000c1d8:	e08c      	b.n	1000c2f4 <at_ble_event_get+0x4bc>
1000c1da:	e015      	b.n	1000c208 <at_ble_event_get+0x3d0>
1000c1dc:	4b9d      	ldr	r3, [pc, #628]	; (1000c454 <at_ble_event_get+0x61c>)
1000c1de:	429c      	cmp	r4, r3
1000c1e0:	d100      	bne.n	1000c1e4 <at_ble_event_get+0x3ac>
1000c1e2:	e10a      	b.n	1000c3fa <at_ble_event_get+0x5c2>
1000c1e4:	d808      	bhi.n	1000c1f8 <at_ble_event_get+0x3c0>
1000c1e6:	4b9c      	ldr	r3, [pc, #624]	; (1000c458 <at_ble_event_get+0x620>)
1000c1e8:	429c      	cmp	r4, r3
1000c1ea:	d100      	bne.n	1000c1ee <at_ble_event_get+0x3b6>
1000c1ec:	e0f7      	b.n	1000c3de <at_ble_event_get+0x5a6>
1000c1ee:	4b9b      	ldr	r3, [pc, #620]	; (1000c45c <at_ble_event_get+0x624>)
1000c1f0:	429c      	cmp	r4, r3
1000c1f2:	d100      	bne.n	1000c1f6 <at_ble_event_get+0x3be>
1000c1f4:	e0fa      	b.n	1000c3ec <at_ble_event_get+0x5b4>
1000c1f6:	e007      	b.n	1000c208 <at_ble_event_get+0x3d0>
1000c1f8:	4b99      	ldr	r3, [pc, #612]	; (1000c460 <at_ble_event_get+0x628>)
1000c1fa:	429c      	cmp	r4, r3
1000c1fc:	d100      	bne.n	1000c200 <at_ble_event_get+0x3c8>
1000c1fe:	e103      	b.n	1000c408 <at_ble_event_get+0x5d0>
1000c200:	4b98      	ldr	r3, [pc, #608]	; (1000c464 <at_ble_event_get+0x62c>)
1000c202:	429c      	cmp	r4, r3
1000c204:	d100      	bne.n	1000c208 <at_ble_event_get+0x3d0>
1000c206:	e106      	b.n	1000c416 <at_ble_event_get+0x5de>
1000c208:	2600      	movs	r6, #0
1000c20a:	e10a      	b.n	1000c422 <at_ble_event_get+0x5ea>
1000c20c:	1c30      	adds	r0, r6, #0
1000c20e:	1c29      	adds	r1, r5, #0
1000c210:	4b95      	ldr	r3, [pc, #596]	; (1000c468 <at_ble_event_get+0x630>)
1000c212:	e014      	b.n	1000c23e <at_ble_event_get+0x406>
1000c214:	1c30      	adds	r0, r6, #0
1000c216:	1c29      	adds	r1, r5, #0
1000c218:	4b94      	ldr	r3, [pc, #592]	; (1000c46c <at_ble_event_get+0x634>)
1000c21a:	4798      	blx	r3
1000c21c:	2604      	movs	r6, #4
1000c21e:	e100      	b.n	1000c422 <at_ble_event_get+0x5ea>
1000c220:	1c30      	adds	r0, r6, #0
1000c222:	1c29      	adds	r1, r5, #0
1000c224:	4b92      	ldr	r3, [pc, #584]	; (1000c470 <at_ble_event_get+0x638>)
1000c226:	4798      	blx	r3
1000c228:	2601      	movs	r6, #1
1000c22a:	e0fa      	b.n	1000c422 <at_ble_event_get+0x5ea>
1000c22c:	1c30      	adds	r0, r6, #0
1000c22e:	1c29      	adds	r1, r5, #0
1000c230:	4b90      	ldr	r3, [pc, #576]	; (1000c474 <at_ble_event_get+0x63c>)
1000c232:	4798      	blx	r3
1000c234:	260f      	movs	r6, #15
1000c236:	e0f4      	b.n	1000c422 <at_ble_event_get+0x5ea>
1000c238:	1c30      	adds	r0, r6, #0
1000c23a:	1c29      	adds	r1, r5, #0
1000c23c:	4b8e      	ldr	r3, [pc, #568]	; (1000c478 <at_ble_event_get+0x640>)
1000c23e:	4798      	blx	r3
1000c240:	1c06      	adds	r6, r0, #0
1000c242:	e0ee      	b.n	1000c422 <at_ble_event_get+0x5ea>
1000c244:	9801      	ldr	r0, [sp, #4]
1000c246:	1c31      	adds	r1, r6, #0
1000c248:	1c2a      	adds	r2, r5, #0
1000c24a:	4b8c      	ldr	r3, [pc, #560]	; (1000c47c <at_ble_event_get+0x644>)
1000c24c:	e017      	b.n	1000c27e <at_ble_event_get+0x446>
1000c24e:	1c31      	adds	r1, r6, #0
1000c250:	9801      	ldr	r0, [sp, #4]
1000c252:	1c2a      	adds	r2, r5, #0
1000c254:	4b8a      	ldr	r3, [pc, #552]	; (1000c480 <at_ble_event_get+0x648>)
1000c256:	4798      	blx	r3
1000c258:	2611      	movs	r6, #17
1000c25a:	e0e2      	b.n	1000c422 <at_ble_event_get+0x5ea>
1000c25c:	1c31      	adds	r1, r6, #0
1000c25e:	9801      	ldr	r0, [sp, #4]
1000c260:	1c2a      	adds	r2, r5, #0
1000c262:	4b88      	ldr	r3, [pc, #544]	; (1000c484 <at_ble_event_get+0x64c>)
1000c264:	4798      	blx	r3
1000c266:	2612      	movs	r6, #18
1000c268:	e0db      	b.n	1000c422 <at_ble_event_get+0x5ea>
1000c26a:	1c30      	adds	r0, r6, #0
1000c26c:	1c29      	adds	r1, r5, #0
1000c26e:	4b86      	ldr	r3, [pc, #536]	; (1000c488 <at_ble_event_get+0x650>)
1000c270:	4798      	blx	r3
1000c272:	2606      	movs	r6, #6
1000c274:	e0d5      	b.n	1000c422 <at_ble_event_get+0x5ea>
1000c276:	1c31      	adds	r1, r6, #0
1000c278:	1c2a      	adds	r2, r5, #0
1000c27a:	9801      	ldr	r0, [sp, #4]
1000c27c:	4b83      	ldr	r3, [pc, #524]	; (1000c48c <at_ble_event_get+0x654>)
1000c27e:	4798      	blx	r3
1000c280:	e7de      	b.n	1000c240 <at_ble_event_get+0x408>
1000c282:	9801      	ldr	r0, [sp, #4]
1000c284:	1c31      	adds	r1, r6, #0
1000c286:	1c2a      	adds	r2, r5, #0
1000c288:	4b81      	ldr	r3, [pc, #516]	; (1000c490 <at_ble_event_get+0x658>)
1000c28a:	e7f8      	b.n	1000c27e <at_ble_event_get+0x446>
1000c28c:	1c31      	adds	r1, r6, #0
1000c28e:	9801      	ldr	r0, [sp, #4]
1000c290:	1c2a      	adds	r2, r5, #0
1000c292:	4b80      	ldr	r3, [pc, #512]	; (1000c494 <at_ble_event_get+0x65c>)
1000c294:	4798      	blx	r3
1000c296:	260d      	movs	r6, #13
1000c298:	e0c3      	b.n	1000c422 <at_ble_event_get+0x5ea>
1000c29a:	1c31      	adds	r1, r6, #0
1000c29c:	9801      	ldr	r0, [sp, #4]
1000c29e:	1c2a      	adds	r2, r5, #0
1000c2a0:	4b7d      	ldr	r3, [pc, #500]	; (1000c498 <at_ble_event_get+0x660>)
1000c2a2:	4798      	blx	r3
1000c2a4:	260e      	movs	r6, #14
1000c2a6:	e0bc      	b.n	1000c422 <at_ble_event_get+0x5ea>
1000c2a8:	9801      	ldr	r0, [sp, #4]
1000c2aa:	1c31      	adds	r1, r6, #0
1000c2ac:	1c2a      	adds	r2, r5, #0
1000c2ae:	4b7b      	ldr	r3, [pc, #492]	; (1000c49c <at_ble_event_get+0x664>)
1000c2b0:	4798      	blx	r3
1000c2b2:	e084      	b.n	1000c3be <at_ble_event_get+0x586>
1000c2b4:	1c31      	adds	r1, r6, #0
1000c2b6:	9801      	ldr	r0, [sp, #4]
1000c2b8:	1c2a      	adds	r2, r5, #0
1000c2ba:	4b79      	ldr	r3, [pc, #484]	; (1000c4a0 <at_ble_event_get+0x668>)
1000c2bc:	4798      	blx	r3
1000c2be:	260b      	movs	r6, #11
1000c2c0:	e0af      	b.n	1000c422 <at_ble_event_get+0x5ea>
1000c2c2:	1c31      	adds	r1, r6, #0
1000c2c4:	9801      	ldr	r0, [sp, #4]
1000c2c6:	1c2a      	adds	r2, r5, #0
1000c2c8:	4b76      	ldr	r3, [pc, #472]	; (1000c4a4 <at_ble_event_get+0x66c>)
1000c2ca:	4798      	blx	r3
1000c2cc:	2610      	movs	r6, #16
1000c2ce:	e0a8      	b.n	1000c422 <at_ble_event_get+0x5ea>
1000c2d0:	1c30      	adds	r0, r6, #0
1000c2d2:	1c29      	adds	r1, r5, #0
1000c2d4:	4b74      	ldr	r3, [pc, #464]	; (1000c4a8 <at_ble_event_get+0x670>)
1000c2d6:	4798      	blx	r3
1000c2d8:	2628      	movs	r6, #40	; 0x28
1000c2da:	e0a2      	b.n	1000c422 <at_ble_event_get+0x5ea>
1000c2dc:	1c30      	adds	r0, r6, #0
1000c2de:	1c29      	adds	r1, r5, #0
1000c2e0:	4b72      	ldr	r3, [pc, #456]	; (1000c4ac <at_ble_event_get+0x674>)
1000c2e2:	4798      	blx	r3
1000c2e4:	2629      	movs	r6, #41	; 0x29
1000c2e6:	e09c      	b.n	1000c422 <at_ble_event_get+0x5ea>
1000c2e8:	1c30      	adds	r0, r6, #0
1000c2ea:	1c29      	adds	r1, r5, #0
1000c2ec:	4b70      	ldr	r3, [pc, #448]	; (1000c4b0 <at_ble_event_get+0x678>)
1000c2ee:	4798      	blx	r3
1000c2f0:	2627      	movs	r6, #39	; 0x27
1000c2f2:	e096      	b.n	1000c422 <at_ble_event_get+0x5ea>
1000c2f4:	1c30      	adds	r0, r6, #0
1000c2f6:	1c29      	adds	r1, r5, #0
1000c2f8:	4b6e      	ldr	r3, [pc, #440]	; (1000c4b4 <at_ble_event_get+0x67c>)
1000c2fa:	4798      	blx	r3
1000c2fc:	262a      	movs	r6, #42	; 0x2a
1000c2fe:	e090      	b.n	1000c422 <at_ble_event_get+0x5ea>
1000c300:	9801      	ldr	r0, [sp, #4]
1000c302:	1c31      	adds	r1, r6, #0
1000c304:	1c2a      	adds	r2, r5, #0
1000c306:	4b6c      	ldr	r3, [pc, #432]	; (1000c4b8 <at_ble_event_get+0x680>)
1000c308:	e7b9      	b.n	1000c27e <at_ble_event_get+0x446>
1000c30a:	9801      	ldr	r0, [sp, #4]
1000c30c:	1c31      	adds	r1, r6, #0
1000c30e:	1c2a      	adds	r2, r5, #0
1000c310:	4b6a      	ldr	r3, [pc, #424]	; (1000c4bc <at_ble_event_get+0x684>)
1000c312:	e7b4      	b.n	1000c27e <at_ble_event_get+0x446>
1000c314:	1c30      	adds	r0, r6, #0
1000c316:	1c29      	adds	r1, r5, #0
1000c318:	4b69      	ldr	r3, [pc, #420]	; (1000c4c0 <at_ble_event_get+0x688>)
1000c31a:	4798      	blx	r3
1000c31c:	262b      	movs	r6, #43	; 0x2b
1000c31e:	e080      	b.n	1000c422 <at_ble_event_get+0x5ea>
1000c320:	1c30      	adds	r0, r6, #0
1000c322:	1c29      	adds	r1, r5, #0
1000c324:	4b67      	ldr	r3, [pc, #412]	; (1000c4c4 <at_ble_event_get+0x68c>)
1000c326:	4798      	blx	r3
1000c328:	262c      	movs	r6, #44	; 0x2c
1000c32a:	e07a      	b.n	1000c422 <at_ble_event_get+0x5ea>
1000c32c:	1c31      	adds	r1, r6, #0
1000c32e:	9801      	ldr	r0, [sp, #4]
1000c330:	1c2a      	adds	r2, r5, #0
1000c332:	4b65      	ldr	r3, [pc, #404]	; (1000c4c8 <at_ble_event_get+0x690>)
1000c334:	4798      	blx	r3
1000c336:	2613      	movs	r6, #19
1000c338:	e073      	b.n	1000c422 <at_ble_event_get+0x5ea>
1000c33a:	1c31      	adds	r1, r6, #0
1000c33c:	9801      	ldr	r0, [sp, #4]
1000c33e:	1c2a      	adds	r2, r5, #0
1000c340:	4b62      	ldr	r3, [pc, #392]	; (1000c4cc <at_ble_event_get+0x694>)
1000c342:	4798      	blx	r3
1000c344:	2614      	movs	r6, #20
1000c346:	e06c      	b.n	1000c422 <at_ble_event_get+0x5ea>
1000c348:	1c31      	adds	r1, r6, #0
1000c34a:	9801      	ldr	r0, [sp, #4]
1000c34c:	1c2a      	adds	r2, r5, #0
1000c34e:	4b60      	ldr	r3, [pc, #384]	; (1000c4d0 <at_ble_event_get+0x698>)
1000c350:	4798      	blx	r3
1000c352:	2615      	movs	r6, #21
1000c354:	e065      	b.n	1000c422 <at_ble_event_get+0x5ea>
1000c356:	1c31      	adds	r1, r6, #0
1000c358:	9801      	ldr	r0, [sp, #4]
1000c35a:	1c2a      	adds	r2, r5, #0
1000c35c:	4b5d      	ldr	r3, [pc, #372]	; (1000c4d4 <at_ble_event_get+0x69c>)
1000c35e:	4798      	blx	r3
1000c360:	2616      	movs	r6, #22
1000c362:	e05e      	b.n	1000c422 <at_ble_event_get+0x5ea>
1000c364:	9801      	ldr	r0, [sp, #4]
1000c366:	1c31      	adds	r1, r6, #0
1000c368:	1c2a      	adds	r2, r5, #0
1000c36a:	4b5b      	ldr	r3, [pc, #364]	; (1000c4d8 <at_ble_event_get+0x6a0>)
1000c36c:	e787      	b.n	1000c27e <at_ble_event_get+0x446>
1000c36e:	1c31      	adds	r1, r6, #0
1000c370:	9801      	ldr	r0, [sp, #4]
1000c372:	1c2a      	adds	r2, r5, #0
1000c374:	4b58      	ldr	r3, [pc, #352]	; (1000c4d8 <at_ble_event_get+0x6a0>)
1000c376:	4798      	blx	r3
1000c378:	88a9      	ldrh	r1, [r5, #4]
1000c37a:	1c06      	adds	r6, r0, #0
1000c37c:	4b57      	ldr	r3, [pc, #348]	; (1000c4dc <at_ble_event_get+0x6a4>)
1000c37e:	8828      	ldrh	r0, [r5, #0]
1000c380:	4798      	blx	r3
1000c382:	e04e      	b.n	1000c422 <at_ble_event_get+0x5ea>
1000c384:	1c31      	adds	r1, r6, #0
1000c386:	9801      	ldr	r0, [sp, #4]
1000c388:	1c2a      	adds	r2, r5, #0
1000c38a:	4b55      	ldr	r3, [pc, #340]	; (1000c4e0 <at_ble_event_get+0x6a8>)
1000c38c:	4798      	blx	r3
1000c38e:	2623      	movs	r6, #35	; 0x23
1000c390:	e047      	b.n	1000c422 <at_ble_event_get+0x5ea>
1000c392:	9801      	ldr	r0, [sp, #4]
1000c394:	1c31      	adds	r1, r6, #0
1000c396:	1c2a      	adds	r2, r5, #0
1000c398:	4b52      	ldr	r3, [pc, #328]	; (1000c4e4 <at_ble_event_get+0x6ac>)
1000c39a:	e770      	b.n	1000c27e <at_ble_event_get+0x446>
1000c39c:	9b01      	ldr	r3, [sp, #4]
1000c39e:	1c30      	adds	r0, r6, #0
1000c3a0:	0a1f      	lsrs	r7, r3, #8
1000c3a2:	802f      	strh	r7, [r5, #0]
1000c3a4:	1c29      	adds	r1, r5, #0
1000c3a6:	4b50      	ldr	r3, [pc, #320]	; (1000c4e8 <at_ble_event_get+0x6b0>)
1000c3a8:	e749      	b.n	1000c23e <at_ble_event_get+0x406>
1000c3aa:	9801      	ldr	r0, [sp, #4]
1000c3ac:	1c31      	adds	r1, r6, #0
1000c3ae:	1c2a      	adds	r2, r5, #0
1000c3b0:	4b4e      	ldr	r3, [pc, #312]	; (1000c4ec <at_ble_event_get+0x6b4>)
1000c3b2:	e764      	b.n	1000c27e <at_ble_event_get+0x446>
1000c3b4:	1c30      	adds	r0, r6, #0
1000c3b6:	1c29      	adds	r1, r5, #0
1000c3b8:	9a01      	ldr	r2, [sp, #4]
1000c3ba:	4b4d      	ldr	r3, [pc, #308]	; (1000c4f0 <at_ble_event_get+0x6b8>)
1000c3bc:	4798      	blx	r3
1000c3be:	263b      	movs	r6, #59	; 0x3b
1000c3c0:	e02f      	b.n	1000c422 <at_ble_event_get+0x5ea>
1000c3c2:	1c31      	adds	r1, r6, #0
1000c3c4:	9801      	ldr	r0, [sp, #4]
1000c3c6:	1c2a      	adds	r2, r5, #0
1000c3c8:	4b4a      	ldr	r3, [pc, #296]	; (1000c4f4 <at_ble_event_get+0x6bc>)
1000c3ca:	4798      	blx	r3
1000c3cc:	2618      	movs	r6, #24
1000c3ce:	e028      	b.n	1000c422 <at_ble_event_get+0x5ea>
1000c3d0:	1c31      	adds	r1, r6, #0
1000c3d2:	9801      	ldr	r0, [sp, #4]
1000c3d4:	1c2a      	adds	r2, r5, #0
1000c3d6:	4b48      	ldr	r3, [pc, #288]	; (1000c4f8 <at_ble_event_get+0x6c0>)
1000c3d8:	4798      	blx	r3
1000c3da:	2620      	movs	r6, #32
1000c3dc:	e021      	b.n	1000c422 <at_ble_event_get+0x5ea>
1000c3de:	1c31      	adds	r1, r6, #0
1000c3e0:	9801      	ldr	r0, [sp, #4]
1000c3e2:	1c2a      	adds	r2, r5, #0
1000c3e4:	4b45      	ldr	r3, [pc, #276]	; (1000c4fc <at_ble_event_get+0x6c4>)
1000c3e6:	4798      	blx	r3
1000c3e8:	2633      	movs	r6, #51	; 0x33
1000c3ea:	e01a      	b.n	1000c422 <at_ble_event_get+0x5ea>
1000c3ec:	1c31      	adds	r1, r6, #0
1000c3ee:	9801      	ldr	r0, [sp, #4]
1000c3f0:	1c2a      	adds	r2, r5, #0
1000c3f2:	4b43      	ldr	r3, [pc, #268]	; (1000c500 <at_ble_event_get+0x6c8>)
1000c3f4:	4798      	blx	r3
1000c3f6:	2630      	movs	r6, #48	; 0x30
1000c3f8:	e013      	b.n	1000c422 <at_ble_event_get+0x5ea>
1000c3fa:	1c31      	adds	r1, r6, #0
1000c3fc:	9801      	ldr	r0, [sp, #4]
1000c3fe:	1c2a      	adds	r2, r5, #0
1000c400:	4b40      	ldr	r3, [pc, #256]	; (1000c504 <at_ble_event_get+0x6cc>)
1000c402:	4798      	blx	r3
1000c404:	2634      	movs	r6, #52	; 0x34
1000c406:	e00c      	b.n	1000c422 <at_ble_event_get+0x5ea>
1000c408:	1c31      	adds	r1, r6, #0
1000c40a:	9801      	ldr	r0, [sp, #4]
1000c40c:	1c2a      	adds	r2, r5, #0
1000c40e:	4b3e      	ldr	r3, [pc, #248]	; (1000c508 <at_ble_event_get+0x6d0>)
1000c410:	4798      	blx	r3
1000c412:	2635      	movs	r6, #53	; 0x35
1000c414:	e005      	b.n	1000c422 <at_ble_event_get+0x5ea>
1000c416:	1c31      	adds	r1, r6, #0
1000c418:	9801      	ldr	r0, [sp, #4]
1000c41a:	1c2a      	adds	r2, r5, #0
1000c41c:	4b3b      	ldr	r3, [pc, #236]	; (1000c50c <at_ble_event_get+0x6d4>)
1000c41e:	4798      	blx	r3
1000c420:	2632      	movs	r6, #50	; 0x32
1000c422:	9b03      	ldr	r3, [sp, #12]
1000c424:	701e      	strb	r6, [r3, #0]
1000c426:	2300      	movs	r3, #0
1000c428:	9302      	str	r3, [sp, #8]
1000c42a:	e57a      	b.n	1000bf22 <at_ble_event_get+0xea>
1000c42c:	23d0      	movs	r3, #208	; 0xd0
1000c42e:	e7fb      	b.n	1000c428 <at_ble_event_get+0x5f0>
1000c430:	9b01      	ldr	r3, [sp, #4]
1000c432:	9e02      	ldr	r6, [sp, #8]
1000c434:	2bbb      	cmp	r3, #187	; 0xbb
1000c436:	d000      	beq.n	1000c43a <at_ble_event_get+0x602>
1000c438:	e6e6      	b.n	1000c208 <at_ble_event_get+0x3d0>
1000c43a:	e7f2      	b.n	1000c422 <at_ble_event_get+0x5ea>
1000c43c:	9b02      	ldr	r3, [sp, #8]
1000c43e:	2b00      	cmp	r3, #0
1000c440:	d000      	beq.n	1000c444 <at_ble_event_get+0x60c>
1000c442:	e56e      	b.n	1000bf22 <at_ble_event_get+0xea>
1000c444:	e6e0      	b.n	1000c208 <at_ble_event_get+0x3d0>
1000c446:	9802      	ldr	r0, [sp, #8]
1000c448:	b007      	add	sp, #28
1000c44a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c44c:	00000e22 	.word	0x00000e22
1000c450:	00000e25 	.word	0x00000e25
1000c454:	00001b05 	.word	0x00001b05
1000c458:	00001b01 	.word	0x00001b01
1000c45c:	00001b03 	.word	0x00001b03
1000c460:	00001b06 	.word	0x00001b06
1000c464:	00001b08 	.word	0x00001b08
1000c468:	1000de11 	.word	0x1000de11
1000c46c:	1000ddf5 	.word	0x1000ddf5
1000c470:	1000df59 	.word	0x1000df59
1000c474:	1000e049 	.word	0x1000e049
1000c478:	1000e06d 	.word	0x1000e06d
1000c47c:	1000d189 	.word	0x1000d189
1000c480:	1000da09 	.word	0x1000da09
1000c484:	1000da85 	.word	0x1000da85
1000c488:	1000d441 	.word	0x1000d441
1000c48c:	1000d4dd 	.word	0x1000d4dd
1000c490:	1000d5b5 	.word	0x1000d5b5
1000c494:	1000d83d 	.word	0x1000d83d
1000c498:	1000d8dd 	.word	0x1000d8dd
1000c49c:	1000d995 	.word	0x1000d995
1000c4a0:	1000d9bd 	.word	0x1000d9bd
1000c4a4:	1000d9d3 	.word	0x1000d9d3
1000c4a8:	1000da9d 	.word	0x1000da9d
1000c4ac:	1000dacb 	.word	0x1000dacb
1000c4b0:	1000dae1 	.word	0x1000dae1
1000c4b4:	1000db0b 	.word	0x1000db0b
1000c4b8:	1000d939 	.word	0x1000d939
1000c4bc:	1000d963 	.word	0x1000d963
1000c4c0:	1000cbc9 	.word	0x1000cbc9
1000c4c4:	1000cbf5 	.word	0x1000cbf5
1000c4c8:	1000e215 	.word	0x1000e215
1000c4cc:	1000e251 	.word	0x1000e251
1000c4d0:	1000e299 	.word	0x1000e299
1000c4d4:	1000e2dd 	.word	0x1000e2dd
1000c4d8:	1000e311 	.word	0x1000e311
1000c4dc:	1000e1d5 	.word	0x1000e1d5
1000c4e0:	1000e3dd 	.word	0x1000e3dd
1000c4e4:	1000e365 	.word	0x1000e365
1000c4e8:	1000cb21 	.word	0x1000cb21
1000c4ec:	1000cb8d 	.word	0x1000cb8d
1000c4f0:	1000cb51 	.word	0x1000cb51
1000c4f4:	1000e3ed 	.word	0x1000e3ed
1000c4f8:	1000e42d 	.word	0x1000e42d
1000c4fc:	1000e579 	.word	0x1000e579
1000c500:	1000e583 	.word	0x1000e583
1000c504:	1000e589 	.word	0x1000e589
1000c508:	1000e58f 	.word	0x1000e58f
1000c50c:	1000e59b 	.word	0x1000e59b

1000c510 <internal_event_flush>:
1000c510:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000c512:	490e      	ldr	r1, [pc, #56]	; (1000c54c <internal_event_flush+0x3c>)
1000c514:	2400      	movs	r4, #0
1000c516:	680b      	ldr	r3, [r1, #0]
1000c518:	1c0f      	adds	r7, r1, #0
1000c51a:	1c1e      	adds	r6, r3, #0
1000c51c:	4a0c      	ldr	r2, [pc, #48]	; (1000c550 <internal_event_flush+0x40>)
1000c51e:	6815      	ldr	r5, [r2, #0]
1000c520:	9201      	str	r2, [sp, #4]
1000c522:	2b00      	cmp	r3, #0
1000c524:	d00e      	beq.n	1000c544 <internal_event_flush+0x34>
1000c526:	889a      	ldrh	r2, [r3, #4]
1000c528:	6819      	ldr	r1, [r3, #0]
1000c52a:	4282      	cmp	r2, r0
1000c52c:	d107      	bne.n	1000c53e <internal_event_flush+0x2e>
1000c52e:	2c00      	cmp	r4, #0
1000c530:	d001      	beq.n	1000c536 <internal_event_flush+0x26>
1000c532:	6021      	str	r1, [r4, #0]
1000c534:	e000      	b.n	1000c538 <internal_event_flush+0x28>
1000c536:	1c0e      	adds	r6, r1, #0
1000c538:	601d      	str	r5, [r3, #0]
1000c53a:	1c1d      	adds	r5, r3, #0
1000c53c:	1c23      	adds	r3, r4, #0
1000c53e:	1c1c      	adds	r4, r3, #0
1000c540:	1c0b      	adds	r3, r1, #0
1000c542:	e7ee      	b.n	1000c522 <internal_event_flush+0x12>
1000c544:	9b01      	ldr	r3, [sp, #4]
1000c546:	603e      	str	r6, [r7, #0]
1000c548:	601d      	str	r5, [r3, #0]
1000c54a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000c54c:	10013298 	.word	0x10013298
1000c550:	1001329c 	.word	0x1001329c

1000c554 <internal_conn_flush>:
1000c554:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000c556:	4a12      	ldr	r2, [pc, #72]	; (1000c5a0 <internal_conn_flush+0x4c>)
1000c558:	9000      	str	r0, [sp, #0]
1000c55a:	6813      	ldr	r3, [r2, #0]
1000c55c:	4811      	ldr	r0, [pc, #68]	; (1000c5a4 <internal_conn_flush+0x50>)
1000c55e:	1c1f      	adds	r7, r3, #0
1000c560:	2100      	movs	r1, #0
1000c562:	4684      	mov	ip, r0
1000c564:	6804      	ldr	r4, [r0, #0]
1000c566:	9201      	str	r2, [sp, #4]
1000c568:	2b00      	cmp	r3, #0
1000c56a:	d014      	beq.n	1000c596 <internal_conn_flush+0x42>
1000c56c:	88d8      	ldrh	r0, [r3, #6]
1000c56e:	9a00      	ldr	r2, [sp, #0]
1000c570:	681d      	ldr	r5, [r3, #0]
1000c572:	0a06      	lsrs	r6, r0, #8
1000c574:	4296      	cmp	r6, r2
1000c576:	d10b      	bne.n	1000c590 <internal_conn_flush+0x3c>
1000c578:	26fd      	movs	r6, #253	; 0xfd
1000c57a:	4006      	ands	r6, r0
1000c57c:	2e0c      	cmp	r6, #12
1000c57e:	d107      	bne.n	1000c590 <internal_conn_flush+0x3c>
1000c580:	2900      	cmp	r1, #0
1000c582:	d001      	beq.n	1000c588 <internal_conn_flush+0x34>
1000c584:	600d      	str	r5, [r1, #0]
1000c586:	e000      	b.n	1000c58a <internal_conn_flush+0x36>
1000c588:	1c2f      	adds	r7, r5, #0
1000c58a:	601c      	str	r4, [r3, #0]
1000c58c:	1c1c      	adds	r4, r3, #0
1000c58e:	1c0b      	adds	r3, r1, #0
1000c590:	1c19      	adds	r1, r3, #0
1000c592:	1c2b      	adds	r3, r5, #0
1000c594:	e7e8      	b.n	1000c568 <internal_conn_flush+0x14>
1000c596:	9b01      	ldr	r3, [sp, #4]
1000c598:	601f      	str	r7, [r3, #0]
1000c59a:	4663      	mov	r3, ip
1000c59c:	601c      	str	r4, [r3, #0]
1000c59e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000c5a0:	10013298 	.word	0x10013298
1000c5a4:	1001329c 	.word	0x1001329c

1000c5a8 <at_ble_device_name_set>:
1000c5a8:	b530      	push	{r4, r5, lr}
1000c5aa:	23cf      	movs	r3, #207	; 0xcf
1000c5ac:	2800      	cmp	r0, #0
1000c5ae:	d010      	beq.n	1000c5d2 <at_ble_device_name_set+0x2a>
1000c5b0:	1e4a      	subs	r2, r1, #1
1000c5b2:	2a1f      	cmp	r2, #31
1000c5b4:	d80d      	bhi.n	1000c5d2 <at_ble_device_name_set+0x2a>
1000c5b6:	4a08      	ldr	r2, [pc, #32]	; (1000c5d8 <at_ble_device_name_set+0x30>)
1000c5b8:	1c13      	adds	r3, r2, #0
1000c5ba:	33aa      	adds	r3, #170	; 0xaa
1000c5bc:	8019      	strh	r1, [r3, #0]
1000c5be:	2300      	movs	r3, #0
1000c5c0:	1c1c      	adds	r4, r3, #0
1000c5c2:	5cc5      	ldrb	r5, [r0, r3]
1000c5c4:	34ac      	adds	r4, #172	; 0xac
1000c5c6:	3301      	adds	r3, #1
1000c5c8:	5515      	strb	r5, [r2, r4]
1000c5ca:	b2dc      	uxtb	r4, r3
1000c5cc:	428c      	cmp	r4, r1
1000c5ce:	d3f7      	bcc.n	1000c5c0 <at_ble_device_name_set+0x18>
1000c5d0:	2300      	movs	r3, #0
1000c5d2:	1c18      	adds	r0, r3, #0
1000c5d4:	bd30      	pop	{r4, r5, pc}
1000c5d6:	46c0      	nop			; (mov r8, r8)
1000c5d8:	100140fe 	.word	0x100140fe

1000c5dc <at_ble_addr_get>:
1000c5dc:	b510      	push	{r4, lr}
1000c5de:	1c04      	adds	r4, r0, #0
1000c5e0:	20cf      	movs	r0, #207	; 0xcf
1000c5e2:	2c00      	cmp	r4, #0
1000c5e4:	d006      	beq.n	1000c5f4 <at_ble_addr_get+0x18>
1000c5e6:	4b04      	ldr	r3, [pc, #16]	; (1000c5f8 <at_ble_addr_get+0x1c>)
1000c5e8:	38ce      	subs	r0, #206	; 0xce
1000c5ea:	1c21      	adds	r1, r4, #0
1000c5ec:	4798      	blx	r3
1000c5ee:	4b03      	ldr	r3, [pc, #12]	; (1000c5fc <at_ble_addr_get+0x20>)
1000c5f0:	791b      	ldrb	r3, [r3, #4]
1000c5f2:	7023      	strb	r3, [r4, #0]
1000c5f4:	bd10      	pop	{r4, pc}
1000c5f6:	46c0      	nop			; (mov r8, r8)
1000c5f8:	1000dca5 	.word	0x1000dca5
1000c5fc:	100140fe 	.word	0x100140fe

1000c600 <at_ble_set_dev_config>:
1000c600:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c602:	7906      	ldrb	r6, [r0, #4]
1000c604:	b089      	sub	sp, #36	; 0x24
1000c606:	25cf      	movs	r5, #207	; 0xcf
1000c608:	2e03      	cmp	r6, #3
1000c60a:	d838      	bhi.n	1000c67e <at_ble_set_dev_config+0x7e>
1000c60c:	7803      	ldrb	r3, [r0, #0]
1000c60e:	3511      	adds	r5, #17
1000c610:	2b0f      	cmp	r3, #15
1000c612:	d834      	bhi.n	1000c67e <at_ble_set_dev_config+0x7e>
1000c614:	2380      	movs	r3, #128	; 0x80
1000c616:	8c87      	ldrh	r7, [r0, #36]	; 0x24
1000c618:	3d11      	subs	r5, #17
1000c61a:	009b      	lsls	r3, r3, #2
1000c61c:	429f      	cmp	r7, r3
1000c61e:	d82e      	bhi.n	1000c67e <at_ble_set_dev_config+0x7e>
1000c620:	7fc5      	ldrb	r5, [r0, #31]
1000c622:	7f83      	ldrb	r3, [r0, #30]
1000c624:	01ad      	lsls	r5, r5, #6
1000c626:	015b      	lsls	r3, r3, #5
1000c628:	431d      	orrs	r5, r3
1000c62a:	7ec3      	ldrb	r3, [r0, #27]
1000c62c:	431d      	orrs	r5, r3
1000c62e:	7f43      	ldrb	r3, [r0, #29]
1000c630:	011b      	lsls	r3, r3, #4
1000c632:	431d      	orrs	r5, r3
1000c634:	7f03      	ldrb	r3, [r0, #28]
1000c636:	009b      	lsls	r3, r3, #2
1000c638:	431d      	orrs	r5, r3
1000c63a:	4b12      	ldr	r3, [pc, #72]	; (1000c684 <at_ble_set_dev_config+0x84>)
1000c63c:	b2ed      	uxtb	r5, r5
1000c63e:	711e      	strb	r6, [r3, #4]
1000c640:	7903      	ldrb	r3, [r0, #4]
1000c642:	3b02      	subs	r3, #2
1000c644:	2b01      	cmp	r3, #1
1000c646:	d801      	bhi.n	1000c64c <at_ble_set_dev_config+0x4c>
1000c648:	2302      	movs	r3, #2
1000c64a:	7103      	strb	r3, [r0, #4]
1000c64c:	1c04      	adds	r4, r0, #0
1000c64e:	1c23      	adds	r3, r4, #0
1000c650:	330b      	adds	r3, #11
1000c652:	8861      	ldrh	r1, [r4, #2]
1000c654:	9307      	str	r3, [sp, #28]
1000c656:	7923      	ldrb	r3, [r4, #4]
1000c658:	7800      	ldrb	r0, [r0, #0]
1000c65a:	9300      	str	r3, [sp, #0]
1000c65c:	9501      	str	r5, [sp, #4]
1000c65e:	8c25      	ldrh	r5, [r4, #32]
1000c660:	1d62      	adds	r2, r4, #5
1000c662:	9502      	str	r5, [sp, #8]
1000c664:	8c65      	ldrh	r5, [r4, #34]	; 0x22
1000c666:	9b07      	ldr	r3, [sp, #28]
1000c668:	9503      	str	r5, [sp, #12]
1000c66a:	9704      	str	r7, [sp, #16]
1000c66c:	4d06      	ldr	r5, [pc, #24]	; (1000c688 <at_ble_set_dev_config+0x88>)
1000c66e:	47a8      	blx	r5
1000c670:	7126      	strb	r6, [r4, #4]
1000c672:	1c05      	adds	r5, r0, #0
1000c674:	1c21      	adds	r1, r4, #0
1000c676:	4803      	ldr	r0, [pc, #12]	; (1000c684 <at_ble_set_dev_config+0x84>)
1000c678:	2226      	movs	r2, #38	; 0x26
1000c67a:	4b04      	ldr	r3, [pc, #16]	; (1000c68c <at_ble_set_dev_config+0x8c>)
1000c67c:	4798      	blx	r3
1000c67e:	1c28      	adds	r0, r5, #0
1000c680:	b009      	add	sp, #36	; 0x24
1000c682:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c684:	100140fe 	.word	0x100140fe
1000c688:	1000db9d 	.word	0x1000db9d
1000c68c:	1000f6c3 	.word	0x1000f6c3

1000c690 <at_ble_init>:
1000c690:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c692:	b087      	sub	sp, #28
1000c694:	af03      	add	r7, sp, #12
1000c696:	4954      	ldr	r1, [pc, #336]	; (1000c7e8 <at_ble_init+0x158>)
1000c698:	220b      	movs	r2, #11
1000c69a:	4b54      	ldr	r3, [pc, #336]	; (1000c7ec <at_ble_init+0x15c>)
1000c69c:	1c04      	adds	r4, r0, #0
1000c69e:	1c38      	adds	r0, r7, #0
1000c6a0:	4798      	blx	r3
1000c6a2:	2205      	movs	r2, #5
1000c6a4:	4b52      	ldr	r3, [pc, #328]	; (1000c7f0 <at_ble_init+0x160>)
1000c6a6:	2640      	movs	r6, #64	; 0x40
1000c6a8:	801a      	strh	r2, [r3, #0]
1000c6aa:	2300      	movs	r3, #0
1000c6ac:	4a51      	ldr	r2, [pc, #324]	; (1000c7f4 <at_ble_init+0x164>)
1000c6ae:	6013      	str	r3, [r2, #0]
1000c6b0:	4a51      	ldr	r2, [pc, #324]	; (1000c7f8 <at_ble_init+0x168>)
1000c6b2:	7013      	strb	r3, [r2, #0]
1000c6b4:	4a51      	ldr	r2, [pc, #324]	; (1000c7fc <at_ble_init+0x16c>)
1000c6b6:	7013      	strb	r3, [r2, #0]
1000c6b8:	4b51      	ldr	r3, [pc, #324]	; (1000c800 <at_ble_init+0x170>)
1000c6ba:	4798      	blx	r3
1000c6bc:	4b51      	ldr	r3, [pc, #324]	; (1000c804 <at_ble_init+0x174>)
1000c6be:	4798      	blx	r3
1000c6c0:	4b51      	ldr	r3, [pc, #324]	; (1000c808 <at_ble_init+0x178>)
1000c6c2:	4798      	blx	r3
1000c6c4:	4b51      	ldr	r3, [pc, #324]	; (1000c80c <at_ble_init+0x17c>)
1000c6c6:	4798      	blx	r3
1000c6c8:	2c00      	cmp	r4, #0
1000c6ca:	d100      	bne.n	1000c6ce <at_ble_init+0x3e>
1000c6cc:	e089      	b.n	1000c7e2 <at_ble_init+0x152>
1000c6ce:	68a3      	ldr	r3, [r4, #8]
1000c6d0:	2b00      	cmp	r3, #0
1000c6d2:	d100      	bne.n	1000c6d6 <at_ble_init+0x46>
1000c6d4:	e085      	b.n	1000c7e2 <at_ble_init+0x152>
1000c6d6:	6923      	ldr	r3, [r4, #16]
1000c6d8:	2b00      	cmp	r3, #0
1000c6da:	d100      	bne.n	1000c6de <at_ble_init+0x4e>
1000c6dc:	e081      	b.n	1000c7e2 <at_ble_init+0x152>
1000c6de:	6820      	ldr	r0, [r4, #0]
1000c6e0:	2800      	cmp	r0, #0
1000c6e2:	d102      	bne.n	1000c6ea <at_ble_init+0x5a>
1000c6e4:	6863      	ldr	r3, [r4, #4]
1000c6e6:	2b00      	cmp	r3, #0
1000c6e8:	d17b      	bne.n	1000c7e2 <at_ble_init+0x152>
1000c6ea:	4b49      	ldr	r3, [pc, #292]	; (1000c810 <at_ble_init+0x180>)
1000c6ec:	6861      	ldr	r1, [r4, #4]
1000c6ee:	4798      	blx	r3
1000c6f0:	4b48      	ldr	r3, [pc, #288]	; (1000c814 <at_ble_init+0x184>)
1000c6f2:	4798      	blx	r3
1000c6f4:	2801      	cmp	r0, #1
1000c6f6:	d901      	bls.n	1000c6fc <at_ble_init+0x6c>
1000c6f8:	26e2      	movs	r6, #226	; 0xe2
1000c6fa:	e072      	b.n	1000c7e2 <at_ble_init+0x152>
1000c6fc:	4846      	ldr	r0, [pc, #280]	; (1000c818 <at_ble_init+0x188>)
1000c6fe:	4b47      	ldr	r3, [pc, #284]	; (1000c81c <at_ble_init+0x18c>)
1000c700:	4798      	blx	r3
1000c702:	2800      	cmp	r0, #0
1000c704:	d1f8      	bne.n	1000c6f8 <at_ble_init+0x68>
1000c706:	1c20      	adds	r0, r4, #0
1000c708:	4b45      	ldr	r3, [pc, #276]	; (1000c820 <at_ble_init+0x190>)
1000c70a:	4798      	blx	r3
1000c70c:	68e0      	ldr	r0, [r4, #12]
1000c70e:	68a1      	ldr	r1, [r4, #8]
1000c710:	4b44      	ldr	r3, [pc, #272]	; (1000c824 <at_ble_init+0x194>)
1000c712:	4798      	blx	r3
1000c714:	466b      	mov	r3, sp
1000c716:	2201      	movs	r2, #1
1000c718:	1cdc      	adds	r4, r3, #3
1000c71a:	1c20      	adds	r0, r4, #0
1000c71c:	a901      	add	r1, sp, #4
1000c71e:	4252      	negs	r2, r2
1000c720:	4b41      	ldr	r3, [pc, #260]	; (1000c828 <at_ble_init+0x198>)
1000c722:	4798      	blx	r3
1000c724:	2800      	cmp	r0, #0
1000c726:	d102      	bne.n	1000c72e <at_ble_init+0x9e>
1000c728:	7823      	ldrb	r3, [r4, #0]
1000c72a:	2b39      	cmp	r3, #57	; 0x39
1000c72c:	d1f2      	bne.n	1000c714 <at_ble_init+0x84>
1000c72e:	4b3f      	ldr	r3, [pc, #252]	; (1000c82c <at_ble_init+0x19c>)
1000c730:	4798      	blx	r3
1000c732:	1e06      	subs	r6, r0, #0
1000c734:	d155      	bne.n	1000c7e2 <at_ble_init+0x152>
1000c736:	1c03      	adds	r3, r0, #0
1000c738:	2101      	movs	r1, #1
1000c73a:	4a3d      	ldr	r2, [pc, #244]	; (1000c830 <at_ble_init+0x1a0>)
1000c73c:	4249      	negs	r1, r1
1000c73e:	189a      	adds	r2, r3, r2
1000c740:	3312      	adds	r3, #18
1000c742:	8151      	strh	r1, [r2, #10]
1000c744:	2b90      	cmp	r3, #144	; 0x90
1000c746:	d1f7      	bne.n	1000c738 <at_ble_init+0xa8>
1000c748:	4c3a      	ldr	r4, [pc, #232]	; (1000c834 <at_ble_init+0x1a4>)
1000c74a:	3b81      	subs	r3, #129	; 0x81
1000c74c:	7023      	strb	r3, [r4, #0]
1000c74e:	4b3a      	ldr	r3, [pc, #232]	; (1000c838 <at_ble_init+0x1a8>)
1000c750:	4a3a      	ldr	r2, [pc, #232]	; (1000c83c <at_ble_init+0x1ac>)
1000c752:	8063      	strh	r3, [r4, #2]
1000c754:	2300      	movs	r3, #0
1000c756:	7123      	strb	r3, [r4, #4]
1000c758:	3301      	adds	r3, #1
1000c75a:	1e58      	subs	r0, r3, #1
1000c75c:	0119      	lsls	r1, r3, #4
1000c75e:	4301      	orrs	r1, r0
1000c760:	3302      	adds	r3, #2
1000c762:	7011      	strb	r1, [r2, #0]
1000c764:	3201      	adds	r2, #1
1000c766:	2b21      	cmp	r3, #33	; 0x21
1000c768:	d1f7      	bne.n	1000c75a <at_ble_init+0xca>
1000c76a:	33e0      	adds	r3, #224	; 0xe0
1000c76c:	33ff      	adds	r3, #255	; 0xff
1000c76e:	84a3      	strh	r3, [r4, #36]	; 0x24
1000c770:	1c23      	adds	r3, r4, #0
1000c772:	2500      	movs	r5, #0
1000c774:	3373      	adds	r3, #115	; 0x73
1000c776:	701d      	strb	r5, [r3, #0]
1000c778:	1c23      	adds	r3, r4, #0
1000c77a:	3372      	adds	r3, #114	; 0x72
1000c77c:	701d      	strb	r5, [r3, #0]
1000c77e:	1c23      	adds	r3, r4, #0
1000c780:	3376      	adds	r3, #118	; 0x76
1000c782:	701d      	strb	r5, [r3, #0]
1000c784:	1c23      	adds	r3, r4, #0
1000c786:	33cc      	adds	r3, #204	; 0xcc
1000c788:	801d      	strh	r5, [r3, #0]
1000c78a:	1c22      	adds	r2, r4, #0
1000c78c:	23a0      	movs	r3, #160	; 0xa0
1000c78e:	32d0      	adds	r2, #208	; 0xd0
1000c790:	005b      	lsls	r3, r3, #1
1000c792:	8013      	strh	r3, [r2, #0]
1000c794:	1c22      	adds	r2, r4, #0
1000c796:	32ce      	adds	r2, #206	; 0xce
1000c798:	8013      	strh	r3, [r2, #0]
1000c79a:	1c23      	adds	r3, r4, #0
1000c79c:	33d2      	adds	r3, #210	; 0xd2
1000c79e:	801d      	strh	r5, [r3, #0]
1000c7a0:	22fa      	movs	r2, #250	; 0xfa
1000c7a2:	1c23      	adds	r3, r4, #0
1000c7a4:	0052      	lsls	r2, r2, #1
1000c7a6:	33d4      	adds	r3, #212	; 0xd4
1000c7a8:	801a      	strh	r2, [r3, #0]
1000c7aa:	1c23      	adds	r3, r4, #0
1000c7ac:	33d6      	adds	r3, #214	; 0xd6
1000c7ae:	701d      	strb	r5, [r3, #0]
1000c7b0:	1c20      	adds	r0, r4, #0
1000c7b2:	4b23      	ldr	r3, [pc, #140]	; (1000c840 <at_ble_init+0x1b0>)
1000c7b4:	76e5      	strb	r5, [r4, #27]
1000c7b6:	7725      	strb	r5, [r4, #28]
1000c7b8:	7765      	strb	r5, [r4, #29]
1000c7ba:	77a5      	strb	r5, [r4, #30]
1000c7bc:	77e5      	strb	r5, [r4, #31]
1000c7be:	8425      	strh	r5, [r4, #32]
1000c7c0:	8465      	strh	r5, [r4, #34]	; 0x22
1000c7c2:	4798      	blx	r3
1000c7c4:	1c23      	adds	r3, r4, #0
1000c7c6:	2207      	movs	r2, #7
1000c7c8:	3374      	adds	r3, #116	; 0x74
1000c7ca:	701a      	strb	r2, [r3, #0]
1000c7cc:	1c23      	adds	r3, r4, #0
1000c7ce:	3204      	adds	r2, #4
1000c7d0:	33aa      	adds	r3, #170	; 0xaa
1000c7d2:	801a      	strh	r2, [r3, #0]
1000c7d4:	1c2b      	adds	r3, r5, #0
1000c7d6:	5d7a      	ldrb	r2, [r7, r5]
1000c7d8:	33ac      	adds	r3, #172	; 0xac
1000c7da:	3501      	adds	r5, #1
1000c7dc:	54e2      	strb	r2, [r4, r3]
1000c7de:	2d0b      	cmp	r5, #11
1000c7e0:	d1f8      	bne.n	1000c7d4 <at_ble_init+0x144>
1000c7e2:	1c30      	adds	r0, r6, #0
1000c7e4:	b007      	add	sp, #28
1000c7e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c7e8:	10011708 	.word	0x10011708
1000c7ec:	1000f6c3 	.word	0x1000f6c3
1000c7f0:	1001406c 	.word	0x1001406c
1000c7f4:	10013348 	.word	0x10013348
1000c7f8:	100132a8 	.word	0x100132a8
1000c7fc:	10011828 	.word	0x10011828
1000c800:	1000e43d 	.word	0x1000e43d
1000c804:	1000c921 	.word	0x1000c921
1000c808:	1000c99d 	.word	0x1000c99d
1000c80c:	1000cbbd 	.word	0x1000cbbd
1000c810:	1000c9d9 	.word	0x1000c9d9
1000c814:	1000b501 	.word	0x1000b501
1000c818:	1000cebd 	.word	0x1000cebd
1000c81c:	1000b745 	.word	0x1000b745
1000c820:	1000cf65 	.word	0x1000cf65
1000c824:	1000bd7d 	.word	0x1000bd7d
1000c828:	1000be39 	.word	0x1000be39
1000c82c:	1000db2d 	.word	0x1000db2d
1000c830:	1001406e 	.word	0x1001406e
1000c834:	100140fe 	.word	0x100140fe
1000c838:	00003a98 	.word	0x00003a98
1000c83c:	10014109 	.word	0x10014109
1000c840:	1000c601 	.word	0x1000c601

1000c844 <at_ble_addr_set>:
1000c844:	b538      	push	{r3, r4, r5, lr}
1000c846:	1c45      	adds	r5, r0, #1
1000c848:	1c03      	adds	r3, r0, #0
1000c84a:	20cf      	movs	r0, #207	; 0xcf
1000c84c:	2d00      	cmp	r5, #0
1000c84e:	d018      	beq.n	1000c882 <at_ble_addr_set+0x3e>
1000c850:	781a      	ldrb	r2, [r3, #0]
1000c852:	2a03      	cmp	r2, #3
1000c854:	d815      	bhi.n	1000c882 <at_ble_addr_set+0x3e>
1000c856:	2a01      	cmp	r2, #1
1000c858:	d102      	bne.n	1000c860 <at_ble_addr_set+0x1c>
1000c85a:	785a      	ldrb	r2, [r3, #1]
1000c85c:	2a00      	cmp	r2, #0
1000c85e:	d010      	beq.n	1000c882 <at_ble_addr_set+0x3e>
1000c860:	1c1c      	adds	r4, r3, #0
1000c862:	1c29      	adds	r1, r5, #0
1000c864:	2206      	movs	r2, #6
1000c866:	4b07      	ldr	r3, [pc, #28]	; (1000c884 <at_ble_addr_set+0x40>)
1000c868:	4807      	ldr	r0, [pc, #28]	; (1000c888 <at_ble_addr_set+0x44>)
1000c86a:	4798      	blx	r3
1000c86c:	7823      	ldrb	r3, [r4, #0]
1000c86e:	4807      	ldr	r0, [pc, #28]	; (1000c88c <at_ble_addr_set+0x48>)
1000c870:	7103      	strb	r3, [r0, #4]
1000c872:	4b07      	ldr	r3, [pc, #28]	; (1000c890 <at_ble_addr_set+0x4c>)
1000c874:	4798      	blx	r3
1000c876:	7823      	ldrb	r3, [r4, #0]
1000c878:	2b00      	cmp	r3, #0
1000c87a:	d102      	bne.n	1000c882 <at_ble_addr_set+0x3e>
1000c87c:	1c28      	adds	r0, r5, #0
1000c87e:	4b05      	ldr	r3, [pc, #20]	; (1000c894 <at_ble_addr_set+0x50>)
1000c880:	4798      	blx	r3
1000c882:	bd38      	pop	{r3, r4, r5, pc}
1000c884:	1000f6c3 	.word	0x1000f6c3
1000c888:	10014103 	.word	0x10014103
1000c88c:	100140fe 	.word	0x100140fe
1000c890:	1000c601 	.word	0x1000c601
1000c894:	1000cfe9 	.word	0x1000cfe9

1000c898 <at_ble_scan_stop>:
1000c898:	b510      	push	{r4, lr}
1000c89a:	4b05      	ldr	r3, [pc, #20]	; (1000c8b0 <at_ble_scan_stop+0x18>)
1000c89c:	4798      	blx	r3
1000c89e:	1e04      	subs	r4, r0, #0
1000c8a0:	d103      	bne.n	1000c8aa <at_ble_scan_stop+0x12>
1000c8a2:	20d1      	movs	r0, #209	; 0xd1
1000c8a4:	4b03      	ldr	r3, [pc, #12]	; (1000c8b4 <at_ble_scan_stop+0x1c>)
1000c8a6:	0100      	lsls	r0, r0, #4
1000c8a8:	4798      	blx	r3
1000c8aa:	1c20      	adds	r0, r4, #0
1000c8ac:	bd10      	pop	{r4, pc}
1000c8ae:	46c0      	nop			; (mov r8, r8)
1000c8b0:	1000dd85 	.word	0x1000dd85
1000c8b4:	1000c511 	.word	0x1000c511

1000c8b8 <at_ble_disconnect>:
1000c8b8:	b538      	push	{r3, r4, r5, lr}
1000c8ba:	1c04      	adds	r4, r0, #0
1000c8bc:	4b04      	ldr	r3, [pc, #16]	; (1000c8d0 <at_ble_disconnect+0x18>)
1000c8be:	1c08      	adds	r0, r1, #0
1000c8c0:	1c21      	adds	r1, r4, #0
1000c8c2:	4798      	blx	r3
1000c8c4:	1c05      	adds	r5, r0, #0
1000c8c6:	4b03      	ldr	r3, [pc, #12]	; (1000c8d4 <at_ble_disconnect+0x1c>)
1000c8c8:	1c20      	adds	r0, r4, #0
1000c8ca:	4798      	blx	r3
1000c8cc:	1c28      	adds	r0, r5, #0
1000c8ce:	bd38      	pop	{r3, r4, r5, pc}
1000c8d0:	1000d3fd 	.word	0x1000d3fd
1000c8d4:	1000c555 	.word	0x1000c555

1000c8d8 <at_ble_conn_update_reply>:
1000c8d8:	b510      	push	{r4, lr}
1000c8da:	4c01      	ldr	r4, [pc, #4]	; (1000c8e0 <at_ble_conn_update_reply+0x8>)
1000c8dc:	47a0      	blx	r4
1000c8de:	bd10      	pop	{r4, pc}
1000c8e0:	1000d8ed 	.word	0x1000d8ed

1000c8e4 <at_ble_random_address_resolve>:
1000c8e4:	b510      	push	{r4, lr}
1000c8e6:	23cf      	movs	r3, #207	; 0xcf
1000c8e8:	2800      	cmp	r0, #0
1000c8ea:	d00a      	beq.n	1000c902 <at_ble_random_address_resolve+0x1e>
1000c8ec:	2900      	cmp	r1, #0
1000c8ee:	d008      	beq.n	1000c902 <at_ble_random_address_resolve+0x1e>
1000c8f0:	2a00      	cmp	r2, #0
1000c8f2:	d006      	beq.n	1000c902 <at_ble_random_address_resolve+0x1e>
1000c8f4:	780c      	ldrb	r4, [r1, #0]
1000c8f6:	2c02      	cmp	r4, #2
1000c8f8:	d103      	bne.n	1000c902 <at_ble_random_address_resolve+0x1e>
1000c8fa:	4b03      	ldr	r3, [pc, #12]	; (1000c908 <at_ble_random_address_resolve+0x24>)
1000c8fc:	3101      	adds	r1, #1
1000c8fe:	4798      	blx	r3
1000c900:	2300      	movs	r3, #0
1000c902:	1c18      	adds	r0, r3, #0
1000c904:	bd10      	pop	{r4, pc}
1000c906:	46c0      	nop			; (mov r8, r8)
1000c908:	1000dfe1 	.word	0x1000dfe1

1000c90c <at_ble_uuid_len2type>:
1000c90c:	1e83      	subs	r3, r0, #2
1000c90e:	b2db      	uxtb	r3, r3
1000c910:	2003      	movs	r0, #3
1000c912:	2b0e      	cmp	r3, #14
1000c914:	d801      	bhi.n	1000c91a <at_ble_uuid_len2type+0xe>
1000c916:	4a01      	ldr	r2, [pc, #4]	; (1000c91c <at_ble_uuid_len2type+0x10>)
1000c918:	5cd0      	ldrb	r0, [r2, r3]
1000c91a:	4770      	bx	lr
1000c91c:	10011713 	.word	0x10011713

1000c920 <init_gatt_client_module>:
1000c920:	2200      	movs	r2, #0
1000c922:	4b01      	ldr	r3, [pc, #4]	; (1000c928 <init_gatt_client_module+0x8>)
1000c924:	801a      	strh	r2, [r3, #0]
1000c926:	4770      	bx	lr
1000c928:	100132a0 	.word	0x100132a0

1000c92c <db_searchATT>:
1000c92c:	b570      	push	{r4, r5, r6, lr}
1000c92e:	1c05      	adds	r5, r0, #0
1000c930:	2400      	movs	r4, #0
1000c932:	4b0c      	ldr	r3, [pc, #48]	; (1000c964 <db_searchATT+0x38>)
1000c934:	6819      	ldr	r1, [r3, #0]
1000c936:	4b0c      	ldr	r3, [pc, #48]	; (1000c968 <db_searchATT+0x3c>)
1000c938:	681e      	ldr	r6, [r3, #0]
1000c93a:	428c      	cmp	r4, r1
1000c93c:	dc10      	bgt.n	1000c960 <db_searchATT+0x34>
1000c93e:	200c      	movs	r0, #12
1000c940:	1863      	adds	r3, r4, r1
1000c942:	0fda      	lsrs	r2, r3, #31
1000c944:	18d3      	adds	r3, r2, r3
1000c946:	1c02      	adds	r2, r0, #0
1000c948:	105b      	asrs	r3, r3, #1
1000c94a:	435a      	muls	r2, r3
1000c94c:	18b0      	adds	r0, r6, r2
1000c94e:	8802      	ldrh	r2, [r0, #0]
1000c950:	42aa      	cmp	r2, r5
1000c952:	d201      	bcs.n	1000c958 <db_searchATT+0x2c>
1000c954:	1e59      	subs	r1, r3, #1
1000c956:	e7f0      	b.n	1000c93a <db_searchATT+0xe>
1000c958:	42aa      	cmp	r2, r5
1000c95a:	d902      	bls.n	1000c962 <db_searchATT+0x36>
1000c95c:	1c5c      	adds	r4, r3, #1
1000c95e:	e7ec      	b.n	1000c93a <db_searchATT+0xe>
1000c960:	2000      	movs	r0, #0
1000c962:	bd70      	pop	{r4, r5, r6, pc}
1000c964:	100132b4 	.word	0x100132b4
1000c968:	100132ac 	.word	0x100132ac

1000c96c <at_ble_read_authorize_reply.part.1>:
1000c96c:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000c96e:	4b09      	ldr	r3, [pc, #36]	; (1000c994 <at_ble_read_authorize_reply.part.1+0x28>)
1000c970:	1c05      	adds	r5, r0, #0
1000c972:	1c08      	adds	r0, r1, #0
1000c974:	1c0c      	adds	r4, r1, #0
1000c976:	4798      	blx	r3
1000c978:	2800      	cmp	r0, #0
1000c97a:	d009      	beq.n	1000c990 <at_ble_read_authorize_reply.part.1+0x24>
1000c97c:	6882      	ldr	r2, [r0, #8]
1000c97e:	2a00      	cmp	r2, #0
1000c980:	d006      	beq.n	1000c990 <at_ble_read_authorize_reply.part.1+0x24>
1000c982:	8883      	ldrh	r3, [r0, #4]
1000c984:	1c29      	adds	r1, r5, #0
1000c986:	9200      	str	r2, [sp, #0]
1000c988:	1c20      	adds	r0, r4, #0
1000c98a:	2200      	movs	r2, #0
1000c98c:	4c02      	ldr	r4, [pc, #8]	; (1000c998 <at_ble_read_authorize_reply.part.1+0x2c>)
1000c98e:	47a0      	blx	r4
1000c990:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000c992:	46c0      	nop			; (mov r8, r8)
1000c994:	1000c92d 	.word	0x1000c92d
1000c998:	1000e0dd 	.word	0x1000e0dd

1000c99c <initi_gatt_server_module>:
1000c99c:	2300      	movs	r3, #0
1000c99e:	4a07      	ldr	r2, [pc, #28]	; (1000c9bc <initi_gatt_server_module+0x20>)
1000c9a0:	7013      	strb	r3, [r2, #0]
1000c9a2:	4a07      	ldr	r2, [pc, #28]	; (1000c9c0 <initi_gatt_server_module+0x24>)
1000c9a4:	6013      	str	r3, [r2, #0]
1000c9a6:	4a07      	ldr	r2, [pc, #28]	; (1000c9c4 <initi_gatt_server_module+0x28>)
1000c9a8:	6013      	str	r3, [r2, #0]
1000c9aa:	4a07      	ldr	r2, [pc, #28]	; (1000c9c8 <initi_gatt_server_module+0x2c>)
1000c9ac:	6013      	str	r3, [r2, #0]
1000c9ae:	4a07      	ldr	r2, [pc, #28]	; (1000c9cc <initi_gatt_server_module+0x30>)
1000c9b0:	6013      	str	r3, [r2, #0]
1000c9b2:	4a07      	ldr	r2, [pc, #28]	; (1000c9d0 <initi_gatt_server_module+0x34>)
1000c9b4:	6013      	str	r3, [r2, #0]
1000c9b6:	4a07      	ldr	r2, [pc, #28]	; (1000c9d4 <initi_gatt_server_module+0x38>)
1000c9b8:	6013      	str	r3, [r2, #0]
1000c9ba:	4770      	bx	lr
1000c9bc:	100132a8 	.word	0x100132a8
1000c9c0:	100132b8 	.word	0x100132b8
1000c9c4:	100132b4 	.word	0x100132b4
1000c9c8:	100132a4 	.word	0x100132a4
1000c9cc:	100132b0 	.word	0x100132b0
1000c9d0:	100132ac 	.word	0x100132ac
1000c9d4:	100132bc 	.word	0x100132bc

1000c9d8 <db_init>:
1000c9d8:	4b0a      	ldr	r3, [pc, #40]	; (1000ca04 <db_init+0x2c>)
1000c9da:	4a0b      	ldr	r2, [pc, #44]	; (1000ca08 <db_init+0x30>)
1000c9dc:	6018      	str	r0, [r3, #0]
1000c9de:	084b      	lsrs	r3, r1, #1
1000c9e0:	6013      	str	r3, [r2, #0]
1000c9e2:	4a0a      	ldr	r2, [pc, #40]	; (1000ca0c <db_init+0x34>)
1000c9e4:	18c3      	adds	r3, r0, r3
1000c9e6:	6013      	str	r3, [r2, #0]
1000c9e8:	4a09      	ldr	r2, [pc, #36]	; (1000ca10 <db_init+0x38>)
1000c9ea:	1841      	adds	r1, r0, r1
1000c9ec:	6013      	str	r3, [r2, #0]
1000c9ee:	2303      	movs	r3, #3
1000c9f0:	2200      	movs	r2, #0
1000c9f2:	3103      	adds	r1, #3
1000c9f4:	4399      	bics	r1, r3
1000c9f6:	4b07      	ldr	r3, [pc, #28]	; (1000ca14 <db_init+0x3c>)
1000c9f8:	3904      	subs	r1, #4
1000c9fa:	6019      	str	r1, [r3, #0]
1000c9fc:	4b06      	ldr	r3, [pc, #24]	; (1000ca18 <db_init+0x40>)
1000c9fe:	601a      	str	r2, [r3, #0]
1000ca00:	4770      	bx	lr
1000ca02:	46c0      	nop			; (mov r8, r8)
1000ca04:	100132bc 	.word	0x100132bc
1000ca08:	100132b8 	.word	0x100132b8
1000ca0c:	100132a4 	.word	0x100132a4
1000ca10:	100132b0 	.word	0x100132b0
1000ca14:	100132ac 	.word	0x100132ac
1000ca18:	100132b4 	.word	0x100132b4

1000ca1c <at_ble_characteristic_value_set>:
1000ca1c:	b570      	push	{r4, r5, r6, lr}
1000ca1e:	4b0b      	ldr	r3, [pc, #44]	; (1000ca4c <at_ble_characteristic_value_set+0x30>)
1000ca20:	1c06      	adds	r6, r0, #0
1000ca22:	1c0c      	adds	r4, r1, #0
1000ca24:	1c15      	adds	r5, r2, #0
1000ca26:	4798      	blx	r3
1000ca28:	2800      	cmp	r0, #0
1000ca2a:	d008      	beq.n	1000ca3e <at_ble_characteristic_value_set+0x22>
1000ca2c:	6880      	ldr	r0, [r0, #8]
1000ca2e:	2800      	cmp	r0, #0
1000ca30:	d005      	beq.n	1000ca3e <at_ble_characteristic_value_set+0x22>
1000ca32:	1c21      	adds	r1, r4, #0
1000ca34:	1c2a      	adds	r2, r5, #0
1000ca36:	4b06      	ldr	r3, [pc, #24]	; (1000ca50 <at_ble_characteristic_value_set+0x34>)
1000ca38:	4798      	blx	r3
1000ca3a:	2000      	movs	r0, #0
1000ca3c:	e004      	b.n	1000ca48 <at_ble_characteristic_value_set+0x2c>
1000ca3e:	1c30      	adds	r0, r6, #0
1000ca40:	1c29      	adds	r1, r5, #0
1000ca42:	1c22      	adds	r2, r4, #0
1000ca44:	4b03      	ldr	r3, [pc, #12]	; (1000ca54 <at_ble_characteristic_value_set+0x38>)
1000ca46:	4798      	blx	r3
1000ca48:	bd70      	pop	{r4, r5, r6, pc}
1000ca4a:	46c0      	nop			; (mov r8, r8)
1000ca4c:	1000c92d 	.word	0x1000c92d
1000ca50:	1000f6c3 	.word	0x1000f6c3
1000ca54:	1000e451 	.word	0x1000e451

1000ca58 <at_ble_characteristic_value_get>:
1000ca58:	b570      	push	{r4, r5, r6, lr}
1000ca5a:	4b0c      	ldr	r3, [pc, #48]	; (1000ca8c <at_ble_characteristic_value_get+0x34>)
1000ca5c:	1c06      	adds	r6, r0, #0
1000ca5e:	1c0c      	adds	r4, r1, #0
1000ca60:	1c15      	adds	r5, r2, #0
1000ca62:	4798      	blx	r3
1000ca64:	2800      	cmp	r0, #0
1000ca66:	d00b      	beq.n	1000ca80 <at_ble_characteristic_value_get+0x28>
1000ca68:	6883      	ldr	r3, [r0, #8]
1000ca6a:	2b00      	cmp	r3, #0
1000ca6c:	d008      	beq.n	1000ca80 <at_ble_characteristic_value_get+0x28>
1000ca6e:	8883      	ldrh	r3, [r0, #4]
1000ca70:	802b      	strh	r3, [r5, #0]
1000ca72:	8882      	ldrh	r2, [r0, #4]
1000ca74:	6881      	ldr	r1, [r0, #8]
1000ca76:	4b06      	ldr	r3, [pc, #24]	; (1000ca90 <at_ble_characteristic_value_get+0x38>)
1000ca78:	1c20      	adds	r0, r4, #0
1000ca7a:	4798      	blx	r3
1000ca7c:	2000      	movs	r0, #0
1000ca7e:	e004      	b.n	1000ca8a <at_ble_characteristic_value_get+0x32>
1000ca80:	1c30      	adds	r0, r6, #0
1000ca82:	1c29      	adds	r1, r5, #0
1000ca84:	1c22      	adds	r2, r4, #0
1000ca86:	4b03      	ldr	r3, [pc, #12]	; (1000ca94 <at_ble_characteristic_value_get+0x3c>)
1000ca88:	4798      	blx	r3
1000ca8a:	bd70      	pop	{r4, r5, r6, pc}
1000ca8c:	1000c92d 	.word	0x1000c92d
1000ca90:	1000f6c3 	.word	0x1000f6c3
1000ca94:	1000e4dd 	.word	0x1000e4dd

1000ca98 <at_ble_write_authorize_reply>:
1000ca98:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ca9a:	b085      	sub	sp, #20
1000ca9c:	1c04      	adds	r4, r0, #0
1000ca9e:	9101      	str	r1, [sp, #4]
1000caa0:	2900      	cmp	r1, #0
1000caa2:	d128      	bne.n	1000caf6 <at_ble_write_authorize_reply+0x5e>
1000caa4:	8843      	ldrh	r3, [r0, #2]
1000caa6:	1c27      	adds	r7, r4, #0
1000caa8:	9300      	str	r3, [sp, #0]
1000caaa:	1c18      	adds	r0, r3, #0
1000caac:	4b16      	ldr	r3, [pc, #88]	; (1000cb08 <at_ble_write_authorize_reply+0x70>)
1000caae:	4798      	blx	r3
1000cab0:	3708      	adds	r7, #8
1000cab2:	2800      	cmp	r0, #0
1000cab4:	d009      	beq.n	1000caca <at_ble_write_authorize_reply+0x32>
1000cab6:	6880      	ldr	r0, [r0, #8]
1000cab8:	2800      	cmp	r0, #0
1000caba:	d006      	beq.n	1000caca <at_ble_write_authorize_reply+0x32>
1000cabc:	88a3      	ldrh	r3, [r4, #4]
1000cabe:	88e2      	ldrh	r2, [r4, #6]
1000cac0:	18c0      	adds	r0, r0, r3
1000cac2:	1c39      	adds	r1, r7, #0
1000cac4:	4b11      	ldr	r3, [pc, #68]	; (1000cb0c <at_ble_write_authorize_reply+0x74>)
1000cac6:	4798      	blx	r3
1000cac8:	e015      	b.n	1000caf6 <at_ble_write_authorize_reply+0x5e>
1000caca:	ab02      	add	r3, sp, #8
1000cacc:	1d9e      	adds	r6, r3, #6
1000cace:	2300      	movs	r3, #0
1000cad0:	4d0f      	ldr	r5, [pc, #60]	; (1000cb10 <at_ble_write_authorize_reply+0x78>)
1000cad2:	8033      	strh	r3, [r6, #0]
1000cad4:	6829      	ldr	r1, [r5, #0]
1000cad6:	1c32      	adds	r2, r6, #0
1000cad8:	4b0e      	ldr	r3, [pc, #56]	; (1000cb14 <at_ble_write_authorize_reply+0x7c>)
1000cada:	9800      	ldr	r0, [sp, #0]
1000cadc:	4798      	blx	r3
1000cade:	682b      	ldr	r3, [r5, #0]
1000cae0:	88a0      	ldrh	r0, [r4, #4]
1000cae2:	88e2      	ldrh	r2, [r4, #6]
1000cae4:	1818      	adds	r0, r3, r0
1000cae6:	1c39      	adds	r1, r7, #0
1000cae8:	4b08      	ldr	r3, [pc, #32]	; (1000cb0c <at_ble_write_authorize_reply+0x74>)
1000caea:	4798      	blx	r3
1000caec:	8860      	ldrh	r0, [r4, #2]
1000caee:	8832      	ldrh	r2, [r6, #0]
1000caf0:	6829      	ldr	r1, [r5, #0]
1000caf2:	4b09      	ldr	r3, [pc, #36]	; (1000cb18 <at_ble_write_authorize_reply+0x80>)
1000caf4:	4798      	blx	r3
1000caf6:	8860      	ldrh	r0, [r4, #2]
1000caf8:	8821      	ldrh	r1, [r4, #0]
1000cafa:	9a01      	ldr	r2, [sp, #4]
1000cafc:	4b07      	ldr	r3, [pc, #28]	; (1000cb1c <at_ble_write_authorize_reply+0x84>)
1000cafe:	4798      	blx	r3
1000cb00:	2000      	movs	r0, #0
1000cb02:	b005      	add	sp, #20
1000cb04:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000cb06:	46c0      	nop			; (mov r8, r8)
1000cb08:	1000c92d 	.word	0x1000c92d
1000cb0c:	1000f6c3 	.word	0x1000f6c3
1000cb10:	1001182c 	.word	0x1001182c
1000cb14:	1000ca59 	.word	0x1000ca59
1000cb18:	1000ca1d 	.word	0x1000ca1d
1000cb1c:	1000e149 	.word	0x1000e149

1000cb20 <gatts_handle_read_req>:
1000cb20:	b538      	push	{r3, r4, r5, lr}
1000cb22:	1c0c      	adds	r4, r1, #0
1000cb24:	4b07      	ldr	r3, [pc, #28]	; (1000cb44 <gatts_handle_read_req+0x24>)
1000cb26:	4798      	blx	r3
1000cb28:	8865      	ldrh	r5, [r4, #2]
1000cb2a:	4b07      	ldr	r3, [pc, #28]	; (1000cb48 <gatts_handle_read_req+0x28>)
1000cb2c:	1c28      	adds	r0, r5, #0
1000cb2e:	4798      	blx	r3
1000cb30:	7883      	ldrb	r3, [r0, #2]
1000cb32:	2026      	movs	r0, #38	; 0x26
1000cb34:	07db      	lsls	r3, r3, #31
1000cb36:	d404      	bmi.n	1000cb42 <gatts_handle_read_req+0x22>
1000cb38:	8820      	ldrh	r0, [r4, #0]
1000cb3a:	1c29      	adds	r1, r5, #0
1000cb3c:	4b03      	ldr	r3, [pc, #12]	; (1000cb4c <gatts_handle_read_req+0x2c>)
1000cb3e:	4798      	blx	r3
1000cb40:	203b      	movs	r0, #59	; 0x3b
1000cb42:	bd38      	pop	{r3, r4, r5, pc}
1000cb44:	1000e08d 	.word	0x1000e08d
1000cb48:	1000c92d 	.word	0x1000c92d
1000cb4c:	1000c96d 	.word	0x1000c96d

1000cb50 <gatts_handle_att_info_req>:
1000cb50:	b538      	push	{r3, r4, r5, lr}
1000cb52:	1c0d      	adds	r5, r1, #0
1000cb54:	4b0a      	ldr	r3, [pc, #40]	; (1000cb80 <gatts_handle_att_info_req+0x30>)
1000cb56:	1c14      	adds	r4, r2, #0
1000cb58:	4798      	blx	r3
1000cb5a:	882d      	ldrh	r5, [r5, #0]
1000cb5c:	4b09      	ldr	r3, [pc, #36]	; (1000cb84 <gatts_handle_att_info_req+0x34>)
1000cb5e:	1c28      	adds	r0, r5, #0
1000cb60:	4798      	blx	r3
1000cb62:	0a22      	lsrs	r2, r4, #8
1000cb64:	1c03      	adds	r3, r0, #0
1000cb66:	4c08      	ldr	r4, [pc, #32]	; (1000cb88 <gatts_handle_att_info_req+0x38>)
1000cb68:	b291      	uxth	r1, r2
1000cb6a:	2800      	cmp	r0, #0
1000cb6c:	d003      	beq.n	1000cb76 <gatts_handle_att_info_req+0x26>
1000cb6e:	8882      	ldrh	r2, [r0, #4]
1000cb70:	2300      	movs	r3, #0
1000cb72:	1c28      	adds	r0, r5, #0
1000cb74:	e001      	b.n	1000cb7a <gatts_handle_att_info_req+0x2a>
1000cb76:	1c28      	adds	r0, r5, #0
1000cb78:	2201      	movs	r2, #1
1000cb7a:	47a0      	blx	r4
1000cb7c:	203b      	movs	r0, #59	; 0x3b
1000cb7e:	bd38      	pop	{r3, r4, r5, pc}
1000cb80:	1000e0d1 	.word	0x1000e0d1
1000cb84:	1000c92d 	.word	0x1000c92d
1000cb88:	1000e18d 	.word	0x1000e18d

1000cb8c <gatts_handle_write_req>:
1000cb8c:	b510      	push	{r4, lr}
1000cb8e:	1c14      	adds	r4, r2, #0
1000cb90:	4b07      	ldr	r3, [pc, #28]	; (1000cbb0 <gatts_handle_write_req+0x24>)
1000cb92:	4798      	blx	r3
1000cb94:	4b07      	ldr	r3, [pc, #28]	; (1000cbb4 <gatts_handle_write_req+0x28>)
1000cb96:	8860      	ldrh	r0, [r4, #2]
1000cb98:	4798      	blx	r3
1000cb9a:	2302      	movs	r3, #2
1000cb9c:	7881      	ldrb	r1, [r0, #2]
1000cb9e:	2022      	movs	r0, #34	; 0x22
1000cba0:	4019      	ands	r1, r3
1000cba2:	d103      	bne.n	1000cbac <gatts_handle_write_req+0x20>
1000cba4:	1c20      	adds	r0, r4, #0
1000cba6:	4b04      	ldr	r3, [pc, #16]	; (1000cbb8 <gatts_handle_write_req+0x2c>)
1000cba8:	4798      	blx	r3
1000cbaa:	201f      	movs	r0, #31
1000cbac:	bd10      	pop	{r4, pc}
1000cbae:	46c0      	nop			; (mov r8, r8)
1000cbb0:	1000e099 	.word	0x1000e099
1000cbb4:	1000c92d 	.word	0x1000c92d
1000cbb8:	1000ca99 	.word	0x1000ca99

1000cbbc <init_l2cc_task_module>:
1000cbbc:	220a      	movs	r2, #10
1000cbbe:	4b01      	ldr	r3, [pc, #4]	; (1000cbc4 <init_l2cc_task_module+0x8>)
1000cbc0:	701a      	strb	r2, [r3, #0]
1000cbc2:	4770      	bx	lr
1000cbc4:	10011828 	.word	0x10011828

1000cbc8 <l2cc_data_send_rsp_handler>:
1000cbc8:	b510      	push	{r4, lr}
1000cbca:	7802      	ldrb	r2, [r0, #0]
1000cbcc:	700a      	strb	r2, [r1, #0]
1000cbce:	7883      	ldrb	r3, [r0, #2]
1000cbd0:	7844      	ldrb	r4, [r0, #1]
1000cbd2:	021b      	lsls	r3, r3, #8
1000cbd4:	4323      	orrs	r3, r4
1000cbd6:	804b      	strh	r3, [r1, #2]
1000cbd8:	7903      	ldrb	r3, [r0, #4]
1000cbda:	78c0      	ldrb	r0, [r0, #3]
1000cbdc:	021b      	lsls	r3, r3, #8
1000cbde:	4303      	orrs	r3, r0
1000cbe0:	808b      	strh	r3, [r1, #4]
1000cbe2:	2a00      	cmp	r2, #0
1000cbe4:	d103      	bne.n	1000cbee <l2cc_data_send_rsp_handler+0x26>
1000cbe6:	4a02      	ldr	r2, [pc, #8]	; (1000cbf0 <l2cc_data_send_rsp_handler+0x28>)
1000cbe8:	7813      	ldrb	r3, [r2, #0]
1000cbea:	3301      	adds	r3, #1
1000cbec:	7013      	strb	r3, [r2, #0]
1000cbee:	bd10      	pop	{r4, pc}
1000cbf0:	10011828 	.word	0x10011828

1000cbf4 <l2cc_data_received_handler>:
1000cbf4:	b508      	push	{r3, lr}
1000cbf6:	1c03      	adds	r3, r0, #0
1000cbf8:	7842      	ldrb	r2, [r0, #1]
1000cbfa:	7800      	ldrb	r0, [r0, #0]
1000cbfc:	0212      	lsls	r2, r2, #8
1000cbfe:	4302      	orrs	r2, r0
1000cc00:	800a      	strh	r2, [r1, #0]
1000cc02:	78da      	ldrb	r2, [r3, #3]
1000cc04:	7898      	ldrb	r0, [r3, #2]
1000cc06:	0212      	lsls	r2, r2, #8
1000cc08:	4302      	orrs	r2, r0
1000cc0a:	804a      	strh	r2, [r1, #2]
1000cc0c:	795a      	ldrb	r2, [r3, #5]
1000cc0e:	7918      	ldrb	r0, [r3, #4]
1000cc10:	0212      	lsls	r2, r2, #8
1000cc12:	4302      	orrs	r2, r0
1000cc14:	808a      	strh	r2, [r1, #4]
1000cc16:	1d88      	adds	r0, r1, #6
1000cc18:	1d99      	adds	r1, r3, #6
1000cc1a:	4b01      	ldr	r3, [pc, #4]	; (1000cc20 <l2cc_data_received_handler+0x2c>)
1000cc1c:	4798      	blx	r3
1000cc1e:	bd08      	pop	{r3, pc}
1000cc20:	1000f6c3 	.word	0x1000f6c3

1000cc24 <at_ble_authenticate>:
1000cc24:	b5f0      	push	{r4, r5, r6, r7, lr}
1000cc26:	1c0c      	adds	r4, r1, #0
1000cc28:	211f      	movs	r1, #31
1000cc2a:	b08b      	sub	sp, #44	; 0x2c
1000cc2c:	9307      	str	r3, [sp, #28]
1000cc2e:	ab02      	add	r3, sp, #8
1000cc30:	18c9      	adds	r1, r1, r3
1000cc32:	230f      	movs	r3, #15
1000cc34:	700b      	strb	r3, [r1, #0]
1000cc36:	4b40      	ldr	r3, [pc, #256]	; (1000cd38 <at_ble_authenticate+0x114>)
1000cc38:	1c05      	adds	r5, r0, #0
1000cc3a:	1c16      	adds	r6, r2, #0
1000cc3c:	4798      	blx	r3
1000cc3e:	1c07      	adds	r7, r0, #0
1000cc40:	2001      	movs	r0, #1
1000cc42:	2f07      	cmp	r7, #7
1000cc44:	d875      	bhi.n	1000cd32 <at_ble_authenticate+0x10e>
1000cc46:	2c00      	cmp	r4, #0
1000cc48:	d113      	bne.n	1000cc72 <at_ble_authenticate+0x4e>
1000cc4a:	2312      	movs	r3, #18
1000cc4c:	435f      	muls	r7, r3
1000cc4e:	4b3b      	ldr	r3, [pc, #236]	; (1000cd3c <at_ble_authenticate+0x118>)
1000cc50:	5cfb      	ldrb	r3, [r7, r3]
1000cc52:	4283      	cmp	r3, r0
1000cc54:	d001      	beq.n	1000cc5a <at_ble_authenticate+0x36>
1000cc56:	20cf      	movs	r0, #207	; 0xcf
1000cc58:	e06b      	b.n	1000cd32 <at_ble_authenticate+0x10e>
1000cc5a:	9504      	str	r5, [sp, #16]
1000cc5c:	9400      	str	r4, [sp, #0]
1000cc5e:	9401      	str	r4, [sp, #4]
1000cc60:	9402      	str	r4, [sp, #8]
1000cc62:	9403      	str	r4, [sp, #12]
1000cc64:	1c20      	adds	r0, r4, #0
1000cc66:	1c21      	adds	r1, r4, #0
1000cc68:	1c22      	adds	r2, r4, #0
1000cc6a:	1c23      	adds	r3, r4, #0
1000cc6c:	4d34      	ldr	r5, [pc, #208]	; (1000cd40 <at_ble_authenticate+0x11c>)
1000cc6e:	47a8      	blx	r5
1000cc70:	e05e      	b.n	1000cd30 <at_ble_authenticate+0x10c>
1000cc72:	7922      	ldrb	r2, [r4, #4]
1000cc74:	2a06      	cmp	r2, #6
1000cc76:	d9ee      	bls.n	1000cc56 <at_ble_authenticate+0x32>
1000cc78:	7963      	ldrb	r3, [r4, #5]
1000cc7a:	2b10      	cmp	r3, #16
1000cc7c:	d8eb      	bhi.n	1000cc56 <at_ble_authenticate+0x32>
1000cc7e:	429a      	cmp	r2, r3
1000cc80:	d8e9      	bhi.n	1000cc56 <at_ble_authenticate+0x32>
1000cc82:	7a23      	ldrb	r3, [r4, #8]
1000cc84:	2b04      	cmp	r3, #4
1000cc86:	d8e6      	bhi.n	1000cc56 <at_ble_authenticate+0x32>
1000cc88:	79a3      	ldrb	r3, [r4, #6]
1000cc8a:	2b07      	cmp	r3, #7
1000cc8c:	d8e3      	bhi.n	1000cc56 <at_ble_authenticate+0x32>
1000cc8e:	79e3      	ldrb	r3, [r4, #7]
1000cc90:	2b07      	cmp	r3, #7
1000cc92:	d8e0      	bhi.n	1000cc56 <at_ble_authenticate+0x32>
1000cc94:	78a3      	ldrb	r3, [r4, #2]
1000cc96:	2b00      	cmp	r3, #0
1000cc98:	d006      	beq.n	1000cca8 <at_ble_authenticate+0x84>
1000cc9a:	2e00      	cmp	r6, #0
1000cc9c:	d0db      	beq.n	1000cc56 <at_ble_authenticate+0x32>
1000cc9e:	4829      	ldr	r0, [pc, #164]	; (1000cd44 <at_ble_authenticate+0x120>)
1000cca0:	1c31      	adds	r1, r6, #0
1000cca2:	221c      	movs	r2, #28
1000cca4:	4b28      	ldr	r3, [pc, #160]	; (1000cd48 <at_ble_authenticate+0x124>)
1000cca6:	4798      	blx	r3
1000cca8:	9b07      	ldr	r3, [sp, #28]
1000ccaa:	2b00      	cmp	r3, #0
1000ccac:	d005      	beq.n	1000ccba <at_ble_authenticate+0x96>
1000ccae:	4827      	ldr	r0, [pc, #156]	; (1000cd4c <at_ble_authenticate+0x128>)
1000ccb0:	1c19      	adds	r1, r3, #0
1000ccb2:	309a      	adds	r0, #154	; 0x9a
1000ccb4:	2210      	movs	r2, #16
1000ccb6:	4b24      	ldr	r3, [pc, #144]	; (1000cd48 <at_ble_authenticate+0x124>)
1000ccb8:	4798      	blx	r3
1000ccba:	7863      	ldrb	r3, [r4, #1]
1000ccbc:	78a2      	ldrb	r2, [r4, #2]
1000ccbe:	009b      	lsls	r3, r3, #2
1000ccc0:	4313      	orrs	r3, r2
1000ccc2:	2212      	movs	r2, #18
1000ccc4:	4357      	muls	r7, r2
1000ccc6:	4a1d      	ldr	r2, [pc, #116]	; (1000cd3c <at_ble_authenticate+0x118>)
1000ccc8:	b2db      	uxtb	r3, r3
1000ccca:	5cba      	ldrb	r2, [r7, r2]
1000cccc:	2a00      	cmp	r2, #0
1000ccce:	d116      	bne.n	1000ccfe <at_ble_authenticate+0xda>
1000ccd0:	79a0      	ldrb	r0, [r4, #6]
1000ccd2:	0742      	lsls	r2, r0, #29
1000ccd4:	d502      	bpl.n	1000ccdc <at_ble_authenticate+0xb8>
1000ccd6:	9a07      	ldr	r2, [sp, #28]
1000ccd8:	2a00      	cmp	r2, #0
1000ccda:	d0bc      	beq.n	1000cc56 <at_ble_authenticate+0x32>
1000ccdc:	07c2      	lsls	r2, r0, #31
1000ccde:	d501      	bpl.n	1000cce4 <at_ble_authenticate+0xc0>
1000cce0:	2e00      	cmp	r6, #0
1000cce2:	d0b8      	beq.n	1000cc56 <at_ble_authenticate+0x32>
1000cce4:	7966      	ldrb	r6, [r4, #5]
1000cce6:	7821      	ldrb	r1, [r4, #0]
1000cce8:	78e2      	ldrb	r2, [r4, #3]
1000ccea:	9600      	str	r6, [sp, #0]
1000ccec:	9001      	str	r0, [sp, #4]
1000ccee:	79e0      	ldrb	r0, [r4, #7]
1000ccf0:	9002      	str	r0, [sp, #8]
1000ccf2:	7a20      	ldrb	r0, [r4, #8]
1000ccf4:	4c16      	ldr	r4, [pc, #88]	; (1000cd50 <at_ble_authenticate+0x12c>)
1000ccf6:	9003      	str	r0, [sp, #12]
1000ccf8:	1c28      	adds	r0, r5, #0
1000ccfa:	47a0      	blx	r4
1000ccfc:	e018      	b.n	1000cd30 <at_ble_authenticate+0x10c>
1000ccfe:	2a01      	cmp	r2, #1
1000cd00:	d1a9      	bne.n	1000cc56 <at_ble_authenticate+0x32>
1000cd02:	79e0      	ldrb	r0, [r4, #7]
1000cd04:	0742      	lsls	r2, r0, #29
1000cd06:	d502      	bpl.n	1000cd0e <at_ble_authenticate+0xea>
1000cd08:	9a07      	ldr	r2, [sp, #28]
1000cd0a:	2a00      	cmp	r2, #0
1000cd0c:	d0a3      	beq.n	1000cc56 <at_ble_authenticate+0x32>
1000cd0e:	07c2      	lsls	r2, r0, #31
1000cd10:	d501      	bpl.n	1000cd16 <at_ble_authenticate+0xf2>
1000cd12:	2e00      	cmp	r6, #0
1000cd14:	d09f      	beq.n	1000cc56 <at_ble_authenticate+0x32>
1000cd16:	7966      	ldrb	r6, [r4, #5]
1000cd18:	7821      	ldrb	r1, [r4, #0]
1000cd1a:	78e2      	ldrb	r2, [r4, #3]
1000cd1c:	9600      	str	r6, [sp, #0]
1000cd1e:	79a6      	ldrb	r6, [r4, #6]
1000cd20:	9002      	str	r0, [sp, #8]
1000cd22:	9601      	str	r6, [sp, #4]
1000cd24:	7a20      	ldrb	r0, [r4, #8]
1000cd26:	9504      	str	r5, [sp, #16]
1000cd28:	9003      	str	r0, [sp, #12]
1000cd2a:	4c05      	ldr	r4, [pc, #20]	; (1000cd40 <at_ble_authenticate+0x11c>)
1000cd2c:	2001      	movs	r0, #1
1000cd2e:	47a0      	blx	r4
1000cd30:	2000      	movs	r0, #0
1000cd32:	b00b      	add	sp, #44	; 0x2c
1000cd34:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000cd36:	46c0      	nop			; (mov r8, r8)
1000cd38:	1000d125 	.word	0x1000d125
1000cd3c:	1001406e 	.word	0x1001406e
1000cd40:	1000d695 	.word	0x1000d695
1000cd44:	1001417c 	.word	0x1001417c
1000cd48:	1000f6c3 	.word	0x1000f6c3
1000cd4c:	100140fe 	.word	0x100140fe
1000cd50:	1000d475 	.word	0x1000d475

1000cd54 <at_ble_pair_key_reply>:
1000cd54:	b5f0      	push	{r4, r5, r6, r7, lr}
1000cd56:	b085      	sub	sp, #20
1000cd58:	1c05      	adds	r5, r0, #0
1000cd5a:	1c0c      	adds	r4, r1, #0
1000cd5c:	1c16      	adds	r6, r2, #0
1000cd5e:	2100      	movs	r1, #0
1000cd60:	4668      	mov	r0, sp
1000cd62:	2210      	movs	r2, #16
1000cd64:	4b18      	ldr	r3, [pc, #96]	; (1000cdc8 <at_ble_pair_key_reply+0x74>)
1000cd66:	4798      	blx	r3
1000cd68:	2101      	movs	r1, #1
1000cd6a:	2e00      	cmp	r6, #0
1000cd6c:	d101      	bne.n	1000cd72 <at_ble_pair_key_reply+0x1e>
1000cd6e:	1c31      	adds	r1, r6, #0
1000cd70:	466e      	mov	r6, sp
1000cd72:	2c00      	cmp	r4, #0
1000cd74:	d116      	bne.n	1000cda4 <at_ble_pair_key_reply+0x50>
1000cd76:	2701      	movs	r7, #1
1000cd78:	1c23      	adds	r3, r4, #0
1000cd7a:	1d70      	adds	r0, r6, #5
1000cd7c:	3e01      	subs	r6, #1
1000cd7e:	7802      	ldrb	r2, [r0, #0]
1000cd80:	3801      	subs	r0, #1
1000cd82:	3a30      	subs	r2, #48	; 0x30
1000cd84:	437a      	muls	r2, r7
1000cd86:	189b      	adds	r3, r3, r2
1000cd88:	220a      	movs	r2, #10
1000cd8a:	4357      	muls	r7, r2
1000cd8c:	42b0      	cmp	r0, r6
1000cd8e:	d1f6      	bne.n	1000cd7e <at_ble_pair_key_reply+0x2a>
1000cd90:	466a      	mov	r2, sp
1000cd92:	4668      	mov	r0, sp
1000cd94:	7013      	strb	r3, [r2, #0]
1000cd96:	0a1a      	lsrs	r2, r3, #8
1000cd98:	7042      	strb	r2, [r0, #1]
1000cd9a:	0c1a      	lsrs	r2, r3, #16
1000cd9c:	0e1b      	lsrs	r3, r3, #24
1000cd9e:	7082      	strb	r2, [r0, #2]
1000cda0:	70c3      	strb	r3, [r0, #3]
1000cda2:	e009      	b.n	1000cdb8 <at_ble_pair_key_reply+0x64>
1000cda4:	20cf      	movs	r0, #207	; 0xcf
1000cda6:	2c01      	cmp	r4, #1
1000cda8:	d10c      	bne.n	1000cdc4 <at_ble_pair_key_reply+0x70>
1000cdaa:	2300      	movs	r3, #0
1000cdac:	4668      	mov	r0, sp
1000cdae:	5cf2      	ldrb	r2, [r6, r3]
1000cdb0:	54c2      	strb	r2, [r0, r3]
1000cdb2:	3301      	adds	r3, #1
1000cdb4:	2b10      	cmp	r3, #16
1000cdb6:	d1f9      	bne.n	1000cdac <at_ble_pair_key_reply+0x58>
1000cdb8:	2004      	movs	r0, #4
1000cdba:	466a      	mov	r2, sp
1000cdbc:	1c2b      	adds	r3, r5, #0
1000cdbe:	4c03      	ldr	r4, [pc, #12]	; (1000cdcc <at_ble_pair_key_reply+0x78>)
1000cdc0:	47a0      	blx	r4
1000cdc2:	2000      	movs	r0, #0
1000cdc4:	b005      	add	sp, #20
1000cdc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000cdc8:	1000f6d5 	.word	0x1000f6d5
1000cdcc:	1000d711 	.word	0x1000d711

1000cdd0 <at_ble_send_slave_sec_request>:
1000cdd0:	b570      	push	{r4, r5, r6, lr}
1000cdd2:	4b0c      	ldr	r3, [pc, #48]	; (1000ce04 <at_ble_send_slave_sec_request+0x34>)
1000cdd4:	1c0e      	adds	r6, r1, #0
1000cdd6:	2100      	movs	r1, #0
1000cdd8:	1c05      	adds	r5, r0, #0
1000cdda:	1c14      	adds	r4, r2, #0
1000cddc:	4798      	blx	r3
1000cdde:	2301      	movs	r3, #1
1000cde0:	2807      	cmp	r0, #7
1000cde2:	d80d      	bhi.n	1000ce00 <at_ble_send_slave_sec_request+0x30>
1000cde4:	3311      	adds	r3, #17
1000cde6:	4358      	muls	r0, r3
1000cde8:	4b07      	ldr	r3, [pc, #28]	; (1000ce08 <at_ble_send_slave_sec_request+0x38>)
1000cdea:	5cc2      	ldrb	r2, [r0, r3]
1000cdec:	23e0      	movs	r3, #224	; 0xe0
1000cdee:	2a01      	cmp	r2, #1
1000cdf0:	d106      	bne.n	1000ce00 <at_ble_send_slave_sec_request+0x30>
1000cdf2:	00b1      	lsls	r1, r6, #2
1000cdf4:	430c      	orrs	r4, r1
1000cdf6:	4b05      	ldr	r3, [pc, #20]	; (1000ce0c <at_ble_send_slave_sec_request+0x3c>)
1000cdf8:	b2e1      	uxtb	r1, r4
1000cdfa:	1c28      	adds	r0, r5, #0
1000cdfc:	4798      	blx	r3
1000cdfe:	2300      	movs	r3, #0
1000ce00:	1c18      	adds	r0, r3, #0
1000ce02:	bd70      	pop	{r4, r5, r6, pc}
1000ce04:	1000d125 	.word	0x1000d125
1000ce08:	1001406e 	.word	0x1001406e
1000ce0c:	1000d761 	.word	0x1000d761

1000ce10 <at_ble_encryption_start>:
1000ce10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000ce12:	23cf      	movs	r3, #207	; 0xcf
1000ce14:	2900      	cmp	r1, #0
1000ce16:	d02b      	beq.n	1000ce70 <at_ble_encryption_start+0x60>
1000ce18:	2a05      	cmp	r2, #5
1000ce1a:	d829      	bhi.n	1000ce70 <at_ble_encryption_start+0x60>
1000ce1c:	2701      	movs	r7, #1
1000ce1e:	1c3d      	adds	r5, r7, #0
1000ce20:	2433      	movs	r4, #51	; 0x33
1000ce22:	4095      	lsls	r5, r2
1000ce24:	4225      	tst	r5, r4
1000ce26:	d023      	beq.n	1000ce70 <at_ble_encryption_start+0x60>
1000ce28:	7e8c      	ldrb	r4, [r1, #26]
1000ce2a:	3c07      	subs	r4, #7
1000ce2c:	2c09      	cmp	r4, #9
1000ce2e:	d81f      	bhi.n	1000ce70 <at_ble_encryption_start+0x60>
1000ce30:	4b10      	ldr	r3, [pc, #64]	; (1000ce74 <at_ble_encryption_start+0x64>)
1000ce32:	1c0c      	adds	r4, r1, #0
1000ce34:	2100      	movs	r1, #0
1000ce36:	1c15      	adds	r5, r2, #0
1000ce38:	1c06      	adds	r6, r0, #0
1000ce3a:	4798      	blx	r3
1000ce3c:	1c3b      	adds	r3, r7, #0
1000ce3e:	2807      	cmp	r0, #7
1000ce40:	d816      	bhi.n	1000ce70 <at_ble_encryption_start+0x60>
1000ce42:	2312      	movs	r3, #18
1000ce44:	4358      	muls	r0, r3
1000ce46:	4b0c      	ldr	r3, [pc, #48]	; (1000ce78 <at_ble_encryption_start+0x68>)
1000ce48:	5cc7      	ldrb	r7, [r0, r3]
1000ce4a:	23e0      	movs	r3, #224	; 0xe0
1000ce4c:	2f00      	cmp	r7, #0
1000ce4e:	d10f      	bne.n	1000ce70 <at_ble_encryption_start+0x60>
1000ce50:	1c21      	adds	r1, r4, #0
1000ce52:	221c      	movs	r2, #28
1000ce54:	4b09      	ldr	r3, [pc, #36]	; (1000ce7c <at_ble_encryption_start+0x6c>)
1000ce56:	480a      	ldr	r0, [pc, #40]	; (1000ce80 <at_ble_encryption_start+0x70>)
1000ce58:	4798      	blx	r3
1000ce5a:	1c23      	adds	r3, r4, #0
1000ce5c:	7ea1      	ldrb	r1, [r4, #26]
1000ce5e:	8a22      	ldrh	r2, [r4, #16]
1000ce60:	3312      	adds	r3, #18
1000ce62:	9100      	str	r1, [sp, #0]
1000ce64:	9501      	str	r5, [sp, #4]
1000ce66:	1c21      	adds	r1, r4, #0
1000ce68:	1c30      	adds	r0, r6, #0
1000ce6a:	4c06      	ldr	r4, [pc, #24]	; (1000ce84 <at_ble_encryption_start+0x74>)
1000ce6c:	47a0      	blx	r4
1000ce6e:	1c3b      	adds	r3, r7, #0
1000ce70:	1c18      	adds	r0, r3, #0
1000ce72:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000ce74:	1000d125 	.word	0x1000d125
1000ce78:	1001406e 	.word	0x1001406e
1000ce7c:	1000f6c3 	.word	0x1000f6c3
1000ce80:	1001417c 	.word	0x1001417c
1000ce84:	1000d7a1 	.word	0x1000d7a1

1000ce88 <at_ble_encryption_request_reply>:
1000ce88:	b573      	push	{r0, r1, r4, r5, r6, lr}
1000ce8a:	24cf      	movs	r4, #207	; 0xcf
1000ce8c:	2b00      	cmp	r3, #0
1000ce8e:	d011      	beq.n	1000ceb4 <at_ble_encryption_request_reply+0x2c>
1000ce90:	2a00      	cmp	r2, #0
1000ce92:	d00a      	beq.n	1000ceaa <at_ble_encryption_request_reply+0x22>
1000ce94:	2905      	cmp	r1, #5
1000ce96:	d80d      	bhi.n	1000ceb4 <at_ble_encryption_request_reply+0x2c>
1000ce98:	2501      	movs	r5, #1
1000ce9a:	2633      	movs	r6, #51	; 0x33
1000ce9c:	408d      	lsls	r5, r1
1000ce9e:	4235      	tst	r5, r6
1000cea0:	d008      	beq.n	1000ceb4 <at_ble_encryption_request_reply+0x2c>
1000cea2:	7e9d      	ldrb	r5, [r3, #26]
1000cea4:	3d07      	subs	r5, #7
1000cea6:	2d09      	cmp	r5, #9
1000cea8:	d804      	bhi.n	1000ceb4 <at_ble_encryption_request_reply+0x2c>
1000ceaa:	7e9c      	ldrb	r4, [r3, #26]
1000ceac:	9400      	str	r4, [sp, #0]
1000ceae:	4c02      	ldr	r4, [pc, #8]	; (1000ceb8 <at_ble_encryption_request_reply+0x30>)
1000ceb0:	47a0      	blx	r4
1000ceb2:	2400      	movs	r4, #0
1000ceb4:	1c20      	adds	r0, r4, #0
1000ceb6:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
1000ceb8:	1000d85d 	.word	0x1000d85d

1000cebc <rx_callback>:
1000cebc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000cebe:	8883      	ldrh	r3, [r0, #4]
1000cec0:	1c01      	adds	r1, r0, #0
1000cec2:	9301      	str	r3, [sp, #4]
1000cec4:	88c5      	ldrh	r5, [r0, #6]
1000cec6:	8806      	ldrh	r6, [r0, #0]
1000cec8:	2d00      	cmp	r5, #0
1000ceca:	d10f      	bne.n	1000ceec <rx_callback+0x30>
1000cecc:	1c19      	adds	r1, r3, #0
1000cece:	1c30      	adds	r0, r6, #0
1000ced0:	4b19      	ldr	r3, [pc, #100]	; (1000cf38 <rx_callback+0x7c>)
1000ced2:	1c2a      	adds	r2, r5, #0
1000ced4:	4798      	blx	r3
1000ced6:	1e03      	subs	r3, r0, #0
1000ced8:	d105      	bne.n	1000cee6 <rx_callback+0x2a>
1000ceda:	1c30      	adds	r0, r6, #0
1000cedc:	9901      	ldr	r1, [sp, #4]
1000cede:	1c1a      	adds	r2, r3, #0
1000cee0:	4c16      	ldr	r4, [pc, #88]	; (1000cf3c <rx_callback+0x80>)
1000cee2:	47a0      	blx	r4
1000cee4:	e027      	b.n	1000cf36 <rx_callback+0x7a>
1000cee6:	4b16      	ldr	r3, [pc, #88]	; (1000cf40 <rx_callback+0x84>)
1000cee8:	4798      	blx	r3
1000ceea:	e024      	b.n	1000cf36 <rx_callback+0x7a>
1000ceec:	4c15      	ldr	r4, [pc, #84]	; (1000cf44 <rx_callback+0x88>)
1000ceee:	4a16      	ldr	r2, [pc, #88]	; (1000cf48 <rx_callback+0x8c>)
1000cef0:	6823      	ldr	r3, [r4, #0]
1000cef2:	6812      	ldr	r2, [r2, #0]
1000cef4:	18eb      	adds	r3, r5, r3
1000cef6:	4293      	cmp	r3, r2
1000cef8:	d901      	bls.n	1000cefe <rx_callback+0x42>
1000cefa:	2300      	movs	r3, #0
1000cefc:	6023      	str	r3, [r4, #0]
1000cefe:	4f13      	ldr	r7, [pc, #76]	; (1000cf4c <rx_callback+0x90>)
1000cf00:	6822      	ldr	r2, [r4, #0]
1000cf02:	683b      	ldr	r3, [r7, #0]
1000cf04:	3108      	adds	r1, #8
1000cf06:	1898      	adds	r0, r3, r2
1000cf08:	1c2a      	adds	r2, r5, #0
1000cf0a:	4b11      	ldr	r3, [pc, #68]	; (1000cf50 <rx_callback+0x94>)
1000cf0c:	4798      	blx	r3
1000cf0e:	683b      	ldr	r3, [r7, #0]
1000cf10:	6822      	ldr	r2, [r4, #0]
1000cf12:	1c30      	adds	r0, r6, #0
1000cf14:	189a      	adds	r2, r3, r2
1000cf16:	9901      	ldr	r1, [sp, #4]
1000cf18:	4b07      	ldr	r3, [pc, #28]	; (1000cf38 <rx_callback+0x7c>)
1000cf1a:	4798      	blx	r3
1000cf1c:	2800      	cmp	r0, #0
1000cf1e:	d1e2      	bne.n	1000cee6 <rx_callback+0x2a>
1000cf20:	6823      	ldr	r3, [r4, #0]
1000cf22:	683a      	ldr	r2, [r7, #0]
1000cf24:	1c30      	adds	r0, r6, #0
1000cf26:	18d2      	adds	r2, r2, r3
1000cf28:	9901      	ldr	r1, [sp, #4]
1000cf2a:	1c2b      	adds	r3, r5, #0
1000cf2c:	4e03      	ldr	r6, [pc, #12]	; (1000cf3c <rx_callback+0x80>)
1000cf2e:	47b0      	blx	r6
1000cf30:	6823      	ldr	r3, [r4, #0]
1000cf32:	18ed      	adds	r5, r5, r3
1000cf34:	6025      	str	r5, [r4, #0]
1000cf36:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000cf38:	1000bda9 	.word	0x1000bda9
1000cf3c:	1000bd21 	.word	0x1000bd21
1000cf40:	1000ba69 	.word	0x1000ba69
1000cf44:	100141d8 	.word	0x100141d8
1000cf48:	100132c4 	.word	0x100132c4
1000cf4c:	100132c0 	.word	0x100132c0
1000cf50:	1000f6c3 	.word	0x1000f6c3

1000cf54 <interface_send>:
1000cf54:	b508      	push	{r3, lr}
1000cf56:	4b02      	ldr	r3, [pc, #8]	; (1000cf60 <interface_send+0xc>)
1000cf58:	4798      	blx	r3
1000cf5a:	2000      	movs	r0, #0
1000cf5c:	bd08      	pop	{r3, pc}
1000cf5e:	46c0      	nop			; (mov r8, r8)
1000cf60:	1000b761 	.word	0x1000b761

1000cf64 <interface_init>:
1000cf64:	2280      	movs	r2, #128	; 0x80
1000cf66:	b510      	push	{r4, lr}
1000cf68:	2100      	movs	r1, #0
1000cf6a:	1c04      	adds	r4, r0, #0
1000cf6c:	0092      	lsls	r2, r2, #2
1000cf6e:	4b08      	ldr	r3, [pc, #32]	; (1000cf90 <interface_init+0x2c>)
1000cf70:	4808      	ldr	r0, [pc, #32]	; (1000cf94 <interface_init+0x30>)
1000cf72:	4798      	blx	r3
1000cf74:	2200      	movs	r2, #0
1000cf76:	4b08      	ldr	r3, [pc, #32]	; (1000cf98 <interface_init+0x34>)
1000cf78:	601a      	str	r2, [r3, #0]
1000cf7a:	4a08      	ldr	r2, [pc, #32]	; (1000cf9c <interface_init+0x38>)
1000cf7c:	4b08      	ldr	r3, [pc, #32]	; (1000cfa0 <interface_init+0x3c>)
1000cf7e:	601a      	str	r2, [r3, #0]
1000cf80:	4b08      	ldr	r3, [pc, #32]	; (1000cfa4 <interface_init+0x40>)
1000cf82:	6922      	ldr	r2, [r4, #16]
1000cf84:	601a      	str	r2, [r3, #0]
1000cf86:	6962      	ldr	r2, [r4, #20]
1000cf88:	4b07      	ldr	r3, [pc, #28]	; (1000cfa8 <interface_init+0x44>)
1000cf8a:	601a      	str	r2, [r3, #0]
1000cf8c:	bd10      	pop	{r4, pc}
1000cf8e:	46c0      	nop			; (mov r8, r8)
1000cf90:	1000f6d5 	.word	0x1000f6d5
1000cf94:	100143dc 	.word	0x100143dc
1000cf98:	100141d8 	.word	0x100141d8
1000cf9c:	100141dc 	.word	0x100141dc
1000cfa0:	1001182c 	.word	0x1001182c
1000cfa4:	100132c0 	.word	0x100132c0
1000cfa8:	100132c4 	.word	0x100132c4

1000cfac <platform_cmd_cmpl_signal>:
1000cfac:	2201      	movs	r2, #1
1000cfae:	4b01      	ldr	r3, [pc, #4]	; (1000cfb4 <platform_cmd_cmpl_signal+0x8>)
1000cfb0:	601a      	str	r2, [r3, #0]
1000cfb2:	4770      	bx	lr
1000cfb4:	100132c8 	.word	0x100132c8

1000cfb8 <platform_cmd_cmpl_wait>:
1000cfb8:	b510      	push	{r4, lr}
1000cfba:	1c04      	adds	r4, r0, #0
1000cfbc:	4b07      	ldr	r3, [pc, #28]	; (1000cfdc <platform_cmd_cmpl_wait+0x24>)
1000cfbe:	681a      	ldr	r2, [r3, #0]
1000cfc0:	2a01      	cmp	r2, #1
1000cfc2:	d003      	beq.n	1000cfcc <platform_cmd_cmpl_wait+0x14>
1000cfc4:	4b06      	ldr	r3, [pc, #24]	; (1000cfe0 <platform_cmd_cmpl_wait+0x28>)
1000cfc6:	2000      	movs	r0, #0
1000cfc8:	4798      	blx	r3
1000cfca:	e7f7      	b.n	1000cfbc <platform_cmd_cmpl_wait+0x4>
1000cfcc:	6819      	ldr	r1, [r3, #0]
1000cfce:	2901      	cmp	r1, #1
1000cfd0:	d102      	bne.n	1000cfd8 <platform_cmd_cmpl_wait+0x20>
1000cfd2:	2200      	movs	r2, #0
1000cfd4:	601a      	str	r2, [r3, #0]
1000cfd6:	e000      	b.n	1000cfda <platform_cmd_cmpl_wait+0x22>
1000cfd8:	7022      	strb	r2, [r4, #0]
1000cfda:	bd10      	pop	{r4, pc}
1000cfdc:	100132c8 	.word	0x100132c8
1000cfe0:	1000b7f1 	.word	0x1000b7f1

1000cfe4 <start_timer>:
1000cfe4:	4770      	bx	lr

1000cfe6 <stop_timer>:
1000cfe6:	4770      	bx	lr

1000cfe8 <dbg_le_set_bd_addr_req_handler>:
1000cfe8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000cfea:	466b      	mov	r3, sp
1000cfec:	1dde      	adds	r6, r3, #7
1000cfee:	2300      	movs	r3, #0
1000cff0:	7033      	strb	r3, [r6, #0]
1000cff2:	230f      	movs	r3, #15
1000cff4:	4c13      	ldr	r4, [pc, #76]	; (1000d044 <dbg_le_set_bd_addr_req_handler+0x5c>)
1000cff6:	2703      	movs	r7, #3
1000cff8:	7023      	strb	r3, [r4, #0]
1000cffa:	2300      	movs	r3, #0
1000cffc:	70e3      	strb	r3, [r4, #3]
1000cffe:	4b12      	ldr	r3, [pc, #72]	; (1000d048 <dbg_le_set_bd_addr_req_handler+0x60>)
1000d000:	1c01      	adds	r1, r0, #0
1000d002:	881a      	ldrh	r2, [r3, #0]
1000d004:	881b      	ldrh	r3, [r3, #0]
1000d006:	7122      	strb	r2, [r4, #4]
1000d008:	0a1b      	lsrs	r3, r3, #8
1000d00a:	2206      	movs	r2, #6
1000d00c:	7163      	strb	r3, [r4, #5]
1000d00e:	480f      	ldr	r0, [pc, #60]	; (1000d04c <dbg_le_set_bd_addr_req_handler+0x64>)
1000d010:	4b0f      	ldr	r3, [pc, #60]	; (1000d050 <dbg_le_set_bd_addr_req_handler+0x68>)
1000d012:	7067      	strb	r7, [r4, #1]
1000d014:	70a7      	strb	r7, [r4, #2]
1000d016:	4798      	blx	r3
1000d018:	4d0e      	ldr	r5, [pc, #56]	; (1000d054 <dbg_le_set_bd_addr_req_handler+0x6c>)
1000d01a:	4b0f      	ldr	r3, [pc, #60]	; (1000d058 <dbg_le_set_bd_addr_req_handler+0x70>)
1000d01c:	210e      	movs	r1, #14
1000d01e:	802b      	strh	r3, [r5, #0]
1000d020:	2306      	movs	r3, #6
1000d022:	71a3      	strb	r3, [r4, #6]
1000d024:	2300      	movs	r3, #0
1000d026:	1c20      	adds	r0, r4, #0
1000d028:	71e3      	strb	r3, [r4, #7]
1000d02a:	4b0c      	ldr	r3, [pc, #48]	; (1000d05c <dbg_le_set_bd_addr_req_handler+0x74>)
1000d02c:	80af      	strh	r7, [r5, #4]
1000d02e:	4798      	blx	r3
1000d030:	1c30      	adds	r0, r6, #0
1000d032:	4b0b      	ldr	r3, [pc, #44]	; (1000d060 <dbg_le_set_bd_addr_req_handler+0x78>)
1000d034:	4798      	blx	r3
1000d036:	7833      	ldrb	r3, [r6, #0]
1000d038:	20e2      	movs	r0, #226	; 0xe2
1000d03a:	2b00      	cmp	r3, #0
1000d03c:	d101      	bne.n	1000d042 <dbg_le_set_bd_addr_req_handler+0x5a>
1000d03e:	68ab      	ldr	r3, [r5, #8]
1000d040:	7818      	ldrb	r0, [r3, #0]
1000d042:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000d044:	100143dc 	.word	0x100143dc
1000d048:	1001406c 	.word	0x1001406c
1000d04c:	100143e4 	.word	0x100143e4
1000d050:	1000f6c3 	.word	0x1000f6c3
1000d054:	10014060 	.word	0x10014060
1000d058:	00000329 	.word	0x00000329
1000d05c:	1000cf55 	.word	0x1000cf55
1000d060:	1000cfb9 	.word	0x1000cfb9

1000d064 <gapc_get_dev_info_cfm.constprop.1>:
1000d064:	b538      	push	{r3, r4, r5, lr}
1000d066:	230b      	movs	r3, #11
1000d068:	4c27      	ldr	r4, [pc, #156]	; (1000d108 <gapc_get_dev_info_cfm.constprop.1+0xa4>)
1000d06a:	7023      	strb	r3, [r4, #0]
1000d06c:	3303      	adds	r3, #3
1000d06e:	7063      	strb	r3, [r4, #1]
1000d070:	3329      	adds	r3, #41	; 0x29
1000d072:	70a3      	strb	r3, [r4, #2]
1000d074:	4b25      	ldr	r3, [pc, #148]	; (1000d10c <gapc_get_dev_info_cfm.constprop.1+0xa8>)
1000d076:	70e1      	strb	r1, [r4, #3]
1000d078:	881a      	ldrh	r2, [r3, #0]
1000d07a:	881b      	ldrh	r3, [r3, #0]
1000d07c:	7122      	strb	r2, [r4, #4]
1000d07e:	0a1b      	lsrs	r3, r3, #8
1000d080:	7163      	strb	r3, [r4, #5]
1000d082:	2300      	movs	r3, #0
1000d084:	7220      	strb	r0, [r4, #8]
1000d086:	7263      	strb	r3, [r4, #9]
1000d088:	2801      	cmp	r0, #1
1000d08a:	d02b      	beq.n	1000d0e4 <gapc_get_dev_info_cfm.constprop.1+0x80>
1000d08c:	4298      	cmp	r0, r3
1000d08e:	d01b      	beq.n	1000d0c8 <gapc_get_dev_info_cfm.constprop.1+0x64>
1000d090:	2802      	cmp	r0, #2
1000d092:	d12f      	bne.n	1000d0f4 <gapc_get_dev_info_cfm.constprop.1+0x90>
1000d094:	4b1e      	ldr	r3, [pc, #120]	; (1000d110 <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000d096:	2112      	movs	r1, #18
1000d098:	1c1a      	adds	r2, r3, #0
1000d09a:	32ce      	adds	r2, #206	; 0xce
1000d09c:	8812      	ldrh	r2, [r2, #0]
1000d09e:	72a2      	strb	r2, [r4, #10]
1000d0a0:	0a12      	lsrs	r2, r2, #8
1000d0a2:	72e2      	strb	r2, [r4, #11]
1000d0a4:	1c1a      	adds	r2, r3, #0
1000d0a6:	32d0      	adds	r2, #208	; 0xd0
1000d0a8:	8812      	ldrh	r2, [r2, #0]
1000d0aa:	7322      	strb	r2, [r4, #12]
1000d0ac:	0a12      	lsrs	r2, r2, #8
1000d0ae:	7362      	strb	r2, [r4, #13]
1000d0b0:	1c1a      	adds	r2, r3, #0
1000d0b2:	32d2      	adds	r2, #210	; 0xd2
1000d0b4:	8812      	ldrh	r2, [r2, #0]
1000d0b6:	33d4      	adds	r3, #212	; 0xd4
1000d0b8:	73a2      	strb	r2, [r4, #14]
1000d0ba:	0a12      	lsrs	r2, r2, #8
1000d0bc:	73e2      	strb	r2, [r4, #15]
1000d0be:	881b      	ldrh	r3, [r3, #0]
1000d0c0:	7423      	strb	r3, [r4, #16]
1000d0c2:	0a1b      	lsrs	r3, r3, #8
1000d0c4:	7463      	strb	r3, [r4, #17]
1000d0c6:	e016      	b.n	1000d0f6 <gapc_get_dev_info_cfm.constprop.1+0x92>
1000d0c8:	4b11      	ldr	r3, [pc, #68]	; (1000d110 <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000d0ca:	4912      	ldr	r1, [pc, #72]	; (1000d114 <gapc_get_dev_info_cfm.constprop.1+0xb0>)
1000d0cc:	33aa      	adds	r3, #170	; 0xaa
1000d0ce:	881d      	ldrh	r5, [r3, #0]
1000d0d0:	4811      	ldr	r0, [pc, #68]	; (1000d118 <gapc_get_dev_info_cfm.constprop.1+0xb4>)
1000d0d2:	0a2b      	lsrs	r3, r5, #8
1000d0d4:	72a5      	strb	r5, [r4, #10]
1000d0d6:	72e3      	strb	r3, [r4, #11]
1000d0d8:	1c2a      	adds	r2, r5, #0
1000d0da:	4b10      	ldr	r3, [pc, #64]	; (1000d11c <gapc_get_dev_info_cfm.constprop.1+0xb8>)
1000d0dc:	350c      	adds	r5, #12
1000d0de:	4798      	blx	r3
1000d0e0:	b2a9      	uxth	r1, r5
1000d0e2:	e008      	b.n	1000d0f6 <gapc_get_dev_info_cfm.constprop.1+0x92>
1000d0e4:	4b0a      	ldr	r3, [pc, #40]	; (1000d110 <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000d0e6:	210c      	movs	r1, #12
1000d0e8:	33cc      	adds	r3, #204	; 0xcc
1000d0ea:	881b      	ldrh	r3, [r3, #0]
1000d0ec:	72a3      	strb	r3, [r4, #10]
1000d0ee:	0a1b      	lsrs	r3, r3, #8
1000d0f0:	72e3      	strb	r3, [r4, #11]
1000d0f2:	e000      	b.n	1000d0f6 <gapc_get_dev_info_cfm.constprop.1+0x92>
1000d0f4:	210a      	movs	r1, #10
1000d0f6:	1c0b      	adds	r3, r1, #0
1000d0f8:	3b08      	subs	r3, #8
1000d0fa:	71a3      	strb	r3, [r4, #6]
1000d0fc:	121b      	asrs	r3, r3, #8
1000d0fe:	71e3      	strb	r3, [r4, #7]
1000d100:	1c20      	adds	r0, r4, #0
1000d102:	4b07      	ldr	r3, [pc, #28]	; (1000d120 <gapc_get_dev_info_cfm.constprop.1+0xbc>)
1000d104:	4798      	blx	r3
1000d106:	bd38      	pop	{r3, r4, r5, pc}
1000d108:	100143dc 	.word	0x100143dc
1000d10c:	1001406c 	.word	0x1001406c
1000d110:	100140fe 	.word	0x100140fe
1000d114:	100141aa 	.word	0x100141aa
1000d118:	100143e8 	.word	0x100143e8
1000d11c:	1000f6c3 	.word	0x1000f6c3
1000d120:	1000cf55 	.word	0x1000cf55

1000d124 <check_ConnData_idx_role>:
1000d124:	4b0c      	ldr	r3, [pc, #48]	; (1000d158 <check_ConnData_idx_role+0x34>)
1000d126:	b570      	push	{r4, r5, r6, lr}
1000d128:	1c04      	adds	r4, r0, #0
1000d12a:	2008      	movs	r0, #8
1000d12c:	429c      	cmp	r4, r3
1000d12e:	d011      	beq.n	1000d154 <check_ConnData_idx_role+0x30>
1000d130:	2300      	movs	r3, #0
1000d132:	2212      	movs	r2, #18
1000d134:	435a      	muls	r2, r3
1000d136:	4d09      	ldr	r5, [pc, #36]	; (1000d15c <check_ConnData_idx_role+0x38>)
1000d138:	b2d8      	uxtb	r0, r3
1000d13a:	1956      	adds	r6, r2, r5
1000d13c:	8976      	ldrh	r6, [r6, #10]
1000d13e:	42a6      	cmp	r6, r4
1000d140:	d104      	bne.n	1000d14c <check_ConnData_idx_role+0x28>
1000d142:	2900      	cmp	r1, #0
1000d144:	d006      	beq.n	1000d154 <check_ConnData_idx_role+0x30>
1000d146:	5d53      	ldrb	r3, [r2, r5]
1000d148:	700b      	strb	r3, [r1, #0]
1000d14a:	e003      	b.n	1000d154 <check_ConnData_idx_role+0x30>
1000d14c:	3301      	adds	r3, #1
1000d14e:	2b08      	cmp	r3, #8
1000d150:	d1ef      	bne.n	1000d132 <check_ConnData_idx_role+0xe>
1000d152:	1c18      	adds	r0, r3, #0
1000d154:	bd70      	pop	{r4, r5, r6, pc}
1000d156:	46c0      	nop			; (mov r8, r8)
1000d158:	0000ffff 	.word	0x0000ffff
1000d15c:	1001406e 	.word	0x1001406e

1000d160 <check_ConnData_emptyEntry>:
1000d160:	2300      	movs	r3, #0
1000d162:	2212      	movs	r2, #18
1000d164:	435a      	muls	r2, r3
1000d166:	4906      	ldr	r1, [pc, #24]	; (1000d180 <check_ConnData_emptyEntry+0x20>)
1000d168:	b2d8      	uxtb	r0, r3
1000d16a:	1852      	adds	r2, r2, r1
1000d16c:	8951      	ldrh	r1, [r2, #10]
1000d16e:	4a05      	ldr	r2, [pc, #20]	; (1000d184 <check_ConnData_emptyEntry+0x24>)
1000d170:	4291      	cmp	r1, r2
1000d172:	d003      	beq.n	1000d17c <check_ConnData_emptyEntry+0x1c>
1000d174:	3301      	adds	r3, #1
1000d176:	2b08      	cmp	r3, #8
1000d178:	d1f3      	bne.n	1000d162 <check_ConnData_emptyEntry+0x2>
1000d17a:	1c18      	adds	r0, r3, #0
1000d17c:	4770      	bx	lr
1000d17e:	46c0      	nop			; (mov r8, r8)
1000d180:	1001406e 	.word	0x1001406e
1000d184:	0000ffff 	.word	0x0000ffff

1000d188 <gapc_cmp_evt>:
1000d188:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000d18a:	780b      	ldrb	r3, [r1, #0]
1000d18c:	1c05      	adds	r5, r0, #0
1000d18e:	1e58      	subs	r0, r3, #1
1000d190:	784e      	ldrb	r6, [r1, #1]
1000d192:	280f      	cmp	r0, #15
1000d194:	d85a      	bhi.n	1000d24c <gapc_cmp_evt+0xc4>
1000d196:	1c14      	adds	r4, r2, #0
1000d198:	f001 fa04 	bl	1000e5a4 <__gnu_thumb1_case_uqi>
1000d19c:	5858440a 	.word	0x5858440a
1000d1a0:	4b584444 	.word	0x4b584444
1000d1a4:	0825122d 	.word	0x0825122d
1000d1a8:	3e395858 	.word	0x3e395858
1000d1ac:	203b      	movs	r0, #59	; 0x3b
1000d1ae:	e04e      	b.n	1000d24e <gapc_cmp_evt+0xc6>
1000d1b0:	203b      	movs	r0, #59	; 0x3b
1000d1b2:	2e00      	cmp	r6, #0
1000d1b4:	d04b      	beq.n	1000d24e <gapc_cmp_evt+0xc6>
1000d1b6:	0a2d      	lsrs	r5, r5, #8
1000d1b8:	8015      	strh	r5, [r2, #0]
1000d1ba:	7096      	strb	r6, [r2, #2]
1000d1bc:	3835      	subs	r0, #53	; 0x35
1000d1be:	e046      	b.n	1000d24e <gapc_cmp_evt+0xc6>
1000d1c0:	466b      	mov	r3, sp
1000d1c2:	1ddf      	adds	r7, r3, #7
1000d1c4:	2301      	movs	r3, #1
1000d1c6:	0a2d      	lsrs	r5, r5, #8
1000d1c8:	703b      	strb	r3, [r7, #0]
1000d1ca:	1c28      	adds	r0, r5, #0
1000d1cc:	1c39      	adds	r1, r7, #0
1000d1ce:	4b20      	ldr	r3, [pc, #128]	; (1000d250 <gapc_cmp_evt+0xc8>)
1000d1d0:	4798      	blx	r3
1000d1d2:	2807      	cmp	r0, #7
1000d1d4:	d803      	bhi.n	1000d1de <gapc_cmp_evt+0x56>
1000d1d6:	783b      	ldrb	r3, [r7, #0]
1000d1d8:	203b      	movs	r0, #59	; 0x3b
1000d1da:	2b00      	cmp	r3, #0
1000d1dc:	d037      	beq.n	1000d24e <gapc_cmp_evt+0xc6>
1000d1de:	8065      	strh	r5, [r4, #2]
1000d1e0:	7126      	strb	r6, [r4, #4]
1000d1e2:	2009      	movs	r0, #9
1000d1e4:	e033      	b.n	1000d24e <gapc_cmp_evt+0xc6>
1000d1e6:	203b      	movs	r0, #59	; 0x3b
1000d1e8:	2e00      	cmp	r6, #0
1000d1ea:	d030      	beq.n	1000d24e <gapc_cmp_evt+0xc6>
1000d1ec:	0a2d      	lsrs	r5, r5, #8
1000d1ee:	8015      	strh	r5, [r2, #0]
1000d1f0:	7096      	strb	r6, [r2, #2]
1000d1f2:	382d      	subs	r0, #45	; 0x2d
1000d1f4:	e02b      	b.n	1000d24e <gapc_cmp_evt+0xc6>
1000d1f6:	203b      	movs	r0, #59	; 0x3b
1000d1f8:	2e00      	cmp	r6, #0
1000d1fa:	d028      	beq.n	1000d24e <gapc_cmp_evt+0xc6>
1000d1fc:	2300      	movs	r3, #0
1000d1fe:	0a2d      	lsrs	r5, r5, #8
1000d200:	8015      	strh	r5, [r2, #0]
1000d202:	7096      	strb	r6, [r2, #2]
1000d204:	8093      	strh	r3, [r2, #4]
1000d206:	80d3      	strh	r3, [r2, #6]
1000d208:	8113      	strh	r3, [r2, #8]
1000d20a:	3834      	subs	r0, #52	; 0x34
1000d20c:	e01f      	b.n	1000d24e <gapc_cmp_evt+0xc6>
1000d20e:	203b      	movs	r0, #59	; 0x3b
1000d210:	2e00      	cmp	r6, #0
1000d212:	d01c      	beq.n	1000d24e <gapc_cmp_evt+0xc6>
1000d214:	7216      	strb	r6, [r2, #8]
1000d216:	e003      	b.n	1000d220 <gapc_cmp_evt+0x98>
1000d218:	203b      	movs	r0, #59	; 0x3b
1000d21a:	2e00      	cmp	r6, #0
1000d21c:	d017      	beq.n	1000d24e <gapc_cmp_evt+0xc6>
1000d21e:	7116      	strb	r6, [r2, #4]
1000d220:	3812      	subs	r0, #18
1000d222:	e014      	b.n	1000d24e <gapc_cmp_evt+0xc6>
1000d224:	203b      	movs	r0, #59	; 0x3b
1000d226:	2e00      	cmp	r6, #0
1000d228:	d011      	beq.n	1000d24e <gapc_cmp_evt+0xc6>
1000d22a:	7093      	strb	r3, [r2, #2]
1000d22c:	70d6      	strb	r6, [r2, #3]
1000d22e:	382a      	subs	r0, #42	; 0x2a
1000d230:	e00d      	b.n	1000d24e <gapc_cmp_evt+0xc6>
1000d232:	203b      	movs	r0, #59	; 0x3b
1000d234:	2e00      	cmp	r6, #0
1000d236:	d00a      	beq.n	1000d24e <gapc_cmp_evt+0xc6>
1000d238:	0a2d      	lsrs	r5, r5, #8
1000d23a:	7016      	strb	r6, [r2, #0]
1000d23c:	8055      	strh	r5, [r2, #2]
1000d23e:	1d10      	adds	r0, r2, #4
1000d240:	2100      	movs	r1, #0
1000d242:	2205      	movs	r2, #5
1000d244:	4b03      	ldr	r3, [pc, #12]	; (1000d254 <gapc_cmp_evt+0xcc>)
1000d246:	4798      	blx	r3
1000d248:	2012      	movs	r0, #18
1000d24a:	e000      	b.n	1000d24e <gapc_cmp_evt+0xc6>
1000d24c:	2000      	movs	r0, #0
1000d24e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000d250:	1000d125 	.word	0x1000d125
1000d254:	1000f6d5 	.word	0x1000f6d5

1000d258 <gapc_connection_cfm_handler>:
1000d258:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d25a:	b085      	sub	sp, #20
1000d25c:	1c1d      	adds	r5, r3, #0
1000d25e:	ab0a      	add	r3, sp, #40	; 0x28
1000d260:	781b      	ldrb	r3, [r3, #0]
1000d262:	9201      	str	r2, [sp, #4]
1000d264:	9302      	str	r3, [sp, #8]
1000d266:	ab0b      	add	r3, sp, #44	; 0x2c
1000d268:	781b      	ldrb	r3, [r3, #0]
1000d26a:	1c07      	adds	r7, r0, #0
1000d26c:	9303      	str	r3, [sp, #12]
1000d26e:	ab0c      	add	r3, sp, #48	; 0x30
1000d270:	881a      	ldrh	r2, [r3, #0]
1000d272:	2302      	movs	r3, #2
1000d274:	1c0e      	adds	r6, r1, #0
1000d276:	4c23      	ldr	r4, [pc, #140]	; (1000d304 <gapc_connection_cfm_handler+0xac>)
1000d278:	1c39      	adds	r1, r7, #0
1000d27a:	7023      	strb	r3, [r4, #0]
1000d27c:	330c      	adds	r3, #12
1000d27e:	7063      	strb	r3, [r4, #1]
1000d280:	70a3      	strb	r3, [r4, #2]
1000d282:	4b21      	ldr	r3, [pc, #132]	; (1000d308 <gapc_connection_cfm_handler+0xb0>)
1000d284:	70e2      	strb	r2, [r4, #3]
1000d286:	881a      	ldrh	r2, [r3, #0]
1000d288:	881b      	ldrh	r3, [r3, #0]
1000d28a:	7122      	strb	r2, [r4, #4]
1000d28c:	0a1b      	lsrs	r3, r3, #8
1000d28e:	4f1f      	ldr	r7, [pc, #124]	; (1000d30c <gapc_connection_cfm_handler+0xb4>)
1000d290:	2210      	movs	r2, #16
1000d292:	481f      	ldr	r0, [pc, #124]	; (1000d310 <gapc_connection_cfm_handler+0xb8>)
1000d294:	7163      	strb	r3, [r4, #5]
1000d296:	47b8      	blx	r7
1000d298:	0a33      	lsrs	r3, r6, #8
1000d29a:	7626      	strb	r6, [r4, #24]
1000d29c:	7663      	strb	r3, [r4, #25]
1000d29e:	9901      	ldr	r1, [sp, #4]
1000d2a0:	0c33      	lsrs	r3, r6, #16
1000d2a2:	2210      	movs	r2, #16
1000d2a4:	0e36      	lsrs	r6, r6, #24
1000d2a6:	481b      	ldr	r0, [pc, #108]	; (1000d314 <gapc_connection_cfm_handler+0xbc>)
1000d2a8:	76a3      	strb	r3, [r4, #26]
1000d2aa:	76e6      	strb	r6, [r4, #27]
1000d2ac:	47b8      	blx	r7
1000d2ae:	1c23      	adds	r3, r4, #0
1000d2b0:	332c      	adds	r3, #44	; 0x2c
1000d2b2:	701d      	strb	r5, [r3, #0]
1000d2b4:	1c23      	adds	r3, r4, #0
1000d2b6:	0a2a      	lsrs	r2, r5, #8
1000d2b8:	332d      	adds	r3, #45	; 0x2d
1000d2ba:	701a      	strb	r2, [r3, #0]
1000d2bc:	1c23      	adds	r3, r4, #0
1000d2be:	0c2a      	lsrs	r2, r5, #16
1000d2c0:	332e      	adds	r3, #46	; 0x2e
1000d2c2:	701a      	strb	r2, [r3, #0]
1000d2c4:	1c23      	adds	r3, r4, #0
1000d2c6:	0e2d      	lsrs	r5, r5, #24
1000d2c8:	332f      	adds	r3, #47	; 0x2f
1000d2ca:	466a      	mov	r2, sp
1000d2cc:	701d      	strb	r5, [r3, #0]
1000d2ce:	1c23      	adds	r3, r4, #0
1000d2d0:	7a12      	ldrb	r2, [r2, #8]
1000d2d2:	3330      	adds	r3, #48	; 0x30
1000d2d4:	701a      	strb	r2, [r3, #0]
1000d2d6:	1c23      	adds	r3, r4, #0
1000d2d8:	2500      	movs	r5, #0
1000d2da:	3331      	adds	r3, #49	; 0x31
1000d2dc:	466a      	mov	r2, sp
1000d2de:	701d      	strb	r5, [r3, #0]
1000d2e0:	1c23      	adds	r3, r4, #0
1000d2e2:	7b12      	ldrb	r2, [r2, #12]
1000d2e4:	3332      	adds	r3, #50	; 0x32
1000d2e6:	701a      	strb	r2, [r3, #0]
1000d2e8:	1c23      	adds	r3, r4, #0
1000d2ea:	3333      	adds	r3, #51	; 0x33
1000d2ec:	701d      	strb	r5, [r3, #0]
1000d2ee:	232c      	movs	r3, #44	; 0x2c
1000d2f0:	1c20      	adds	r0, r4, #0
1000d2f2:	71a3      	strb	r3, [r4, #6]
1000d2f4:	2134      	movs	r1, #52	; 0x34
1000d2f6:	4b08      	ldr	r3, [pc, #32]	; (1000d318 <gapc_connection_cfm_handler+0xc0>)
1000d2f8:	71e5      	strb	r5, [r4, #7]
1000d2fa:	4798      	blx	r3
1000d2fc:	1c28      	adds	r0, r5, #0
1000d2fe:	b005      	add	sp, #20
1000d300:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d302:	46c0      	nop			; (mov r8, r8)
1000d304:	100143dc 	.word	0x100143dc
1000d308:	1001406c 	.word	0x1001406c
1000d30c:	1000f6c3 	.word	0x1000f6c3
1000d310:	100143e4 	.word	0x100143e4
1000d314:	100143f8 	.word	0x100143f8
1000d318:	1000cf55 	.word	0x1000cf55

1000d31c <gapc_con_req_ind>:
1000d31c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d31e:	7845      	ldrb	r5, [r0, #1]
1000d320:	7803      	ldrb	r3, [r0, #0]
1000d322:	4c30      	ldr	r4, [pc, #192]	; (1000d3e4 <gapc_con_req_ind+0xc8>)
1000d324:	022d      	lsls	r5, r5, #8
1000d326:	431d      	orrs	r5, r3
1000d328:	85a5      	strh	r5, [r4, #44]	; 0x2c
1000d32a:	78c3      	ldrb	r3, [r0, #3]
1000d32c:	7882      	ldrb	r2, [r0, #2]
1000d32e:	b08b      	sub	sp, #44	; 0x2c
1000d330:	021b      	lsls	r3, r3, #8
1000d332:	431a      	orrs	r2, r3
1000d334:	466b      	mov	r3, sp
1000d336:	9205      	str	r2, [sp, #20]
1000d338:	8a9b      	ldrh	r3, [r3, #20]
1000d33a:	2120      	movs	r1, #32
1000d33c:	85e3      	strh	r3, [r4, #46]	; 0x2e
1000d33e:	7943      	ldrb	r3, [r0, #5]
1000d340:	7902      	ldrb	r2, [r0, #4]
1000d342:	021b      	lsls	r3, r3, #8
1000d344:	431a      	orrs	r2, r3
1000d346:	466b      	mov	r3, sp
1000d348:	9206      	str	r2, [sp, #24]
1000d34a:	8b1b      	ldrh	r3, [r3, #24]
1000d34c:	1c06      	adds	r6, r0, #0
1000d34e:	8623      	strh	r3, [r4, #48]	; 0x30
1000d350:	79c3      	ldrb	r3, [r0, #7]
1000d352:	7982      	ldrb	r2, [r0, #6]
1000d354:	021b      	lsls	r3, r3, #8
1000d356:	431a      	orrs	r2, r3
1000d358:	466b      	mov	r3, sp
1000d35a:	9207      	str	r2, [sp, #28]
1000d35c:	466a      	mov	r2, sp
1000d35e:	8b9b      	ldrh	r3, [r3, #28]
1000d360:	1852      	adds	r2, r2, r1
1000d362:	8663      	strh	r3, [r4, #50]	; 0x32
1000d364:	7a43      	ldrb	r3, [r0, #9]
1000d366:	1c01      	adds	r1, r0, #0
1000d368:	9308      	str	r3, [sp, #32]
1000d36a:	1c23      	adds	r3, r4, #0
1000d36c:	7812      	ldrb	r2, [r2, #0]
1000d36e:	3377      	adds	r3, #119	; 0x77
1000d370:	3478      	adds	r4, #120	; 0x78
1000d372:	701a      	strb	r2, [r3, #0]
1000d374:	310a      	adds	r1, #10
1000d376:	2206      	movs	r2, #6
1000d378:	4b1b      	ldr	r3, [pc, #108]	; (1000d3e8 <gapc_con_req_ind+0xcc>)
1000d37a:	1c20      	adds	r0, r4, #0
1000d37c:	4798      	blx	r3
1000d37e:	7c33      	ldrb	r3, [r6, #16]
1000d380:	9309      	str	r3, [sp, #36]	; 0x24
1000d382:	4b1a      	ldr	r3, [pc, #104]	; (1000d3ec <gapc_con_req_ind+0xd0>)
1000d384:	4798      	blx	r3
1000d386:	4e1a      	ldr	r6, [pc, #104]	; (1000d3f0 <gapc_con_req_ind+0xd4>)
1000d388:	1e07      	subs	r7, r0, #0
1000d38a:	2f07      	cmp	r7, #7
1000d38c:	d81b      	bhi.n	1000d3c6 <gapc_con_req_ind+0xaa>
1000d38e:	2312      	movs	r3, #18
1000d390:	4343      	muls	r3, r0
1000d392:	18f0      	adds	r0, r6, r3
1000d394:	8145      	strh	r5, [r0, #10]
1000d396:	4669      	mov	r1, sp
1000d398:	2524      	movs	r5, #36	; 0x24
1000d39a:	1949      	adds	r1, r1, r5
1000d39c:	7809      	ldrb	r1, [r1, #0]
1000d39e:	2206      	movs	r2, #6
1000d3a0:	54f1      	strb	r1, [r6, r3]
1000d3a2:	2120      	movs	r1, #32
1000d3a4:	466b      	mov	r3, sp
1000d3a6:	185b      	adds	r3, r3, r1
1000d3a8:	781b      	ldrb	r3, [r3, #0]
1000d3aa:	1c21      	adds	r1, r4, #0
1000d3ac:	7043      	strb	r3, [r0, #1]
1000d3ae:	466b      	mov	r3, sp
1000d3b0:	8a9b      	ldrh	r3, [r3, #20]
1000d3b2:	3002      	adds	r0, #2
1000d3b4:	8143      	strh	r3, [r0, #10]
1000d3b6:	466b      	mov	r3, sp
1000d3b8:	8b1b      	ldrh	r3, [r3, #24]
1000d3ba:	8183      	strh	r3, [r0, #12]
1000d3bc:	466b      	mov	r3, sp
1000d3be:	8b9b      	ldrh	r3, [r3, #28]
1000d3c0:	81c3      	strh	r3, [r0, #14]
1000d3c2:	4b09      	ldr	r3, [pc, #36]	; (1000d3e8 <gapc_con_req_ind+0xcc>)
1000d3c4:	4798      	blx	r3
1000d3c6:	2112      	movs	r1, #18
1000d3c8:	2300      	movs	r3, #0
1000d3ca:	434f      	muls	r7, r1
1000d3cc:	9300      	str	r3, [sp, #0]
1000d3ce:	9301      	str	r3, [sp, #4]
1000d3d0:	19f6      	adds	r6, r6, r7
1000d3d2:	8971      	ldrh	r1, [r6, #10]
1000d3d4:	4a07      	ldr	r2, [pc, #28]	; (1000d3f4 <gapc_con_req_ind+0xd8>)
1000d3d6:	9102      	str	r1, [sp, #8]
1000d3d8:	1c10      	adds	r0, r2, #0
1000d3da:	1c19      	adds	r1, r3, #0
1000d3dc:	4c06      	ldr	r4, [pc, #24]	; (1000d3f8 <gapc_con_req_ind+0xdc>)
1000d3de:	47a0      	blx	r4
1000d3e0:	b00b      	add	sp, #44	; 0x2c
1000d3e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d3e4:	100140fe 	.word	0x100140fe
1000d3e8:	1000f6c3 	.word	0x1000f6c3
1000d3ec:	1000d161 	.word	0x1000d161
1000d3f0:	1001406e 	.word	0x1001406e
1000d3f4:	100132cc 	.word	0x100132cc
1000d3f8:	1000d259 	.word	0x1000d259

1000d3fc <gapc_disconnect_cmd_handler>:
1000d3fc:	2204      	movs	r2, #4
1000d3fe:	b510      	push	{r4, lr}
1000d400:	4b0c      	ldr	r3, [pc, #48]	; (1000d434 <gapc_disconnect_cmd_handler+0x38>)
1000d402:	2400      	movs	r4, #0
1000d404:	701a      	strb	r2, [r3, #0]
1000d406:	320a      	adds	r2, #10
1000d408:	705a      	strb	r2, [r3, #1]
1000d40a:	709a      	strb	r2, [r3, #2]
1000d40c:	4a0a      	ldr	r2, [pc, #40]	; (1000d438 <gapc_disconnect_cmd_handler+0x3c>)
1000d40e:	70d9      	strb	r1, [r3, #3]
1000d410:	8811      	ldrh	r1, [r2, #0]
1000d412:	8812      	ldrh	r2, [r2, #0]
1000d414:	7119      	strb	r1, [r3, #4]
1000d416:	0a12      	lsrs	r2, r2, #8
1000d418:	715a      	strb	r2, [r3, #5]
1000d41a:	2201      	movs	r2, #1
1000d41c:	721a      	strb	r2, [r3, #8]
1000d41e:	1892      	adds	r2, r2, r2
1000d420:	7258      	strb	r0, [r3, #9]
1000d422:	719a      	strb	r2, [r3, #6]
1000d424:	71dc      	strb	r4, [r3, #7]
1000d426:	1c18      	adds	r0, r3, #0
1000d428:	210a      	movs	r1, #10
1000d42a:	4b04      	ldr	r3, [pc, #16]	; (1000d43c <gapc_disconnect_cmd_handler+0x40>)
1000d42c:	4798      	blx	r3
1000d42e:	1c20      	adds	r0, r4, #0
1000d430:	bd10      	pop	{r4, pc}
1000d432:	46c0      	nop			; (mov r8, r8)
1000d434:	100143dc 	.word	0x100143dc
1000d438:	1001406c 	.word	0x1001406c
1000d43c:	1000cf55 	.word	0x1000cf55

1000d440 <gapc_disconnect_ind>:
1000d440:	1c02      	adds	r2, r0, #0
1000d442:	b508      	push	{r3, lr}
1000d444:	7843      	ldrb	r3, [r0, #1]
1000d446:	7800      	ldrb	r0, [r0, #0]
1000d448:	021b      	lsls	r3, r3, #8
1000d44a:	4318      	orrs	r0, r3
1000d44c:	8008      	strh	r0, [r1, #0]
1000d44e:	7893      	ldrb	r3, [r2, #2]
1000d450:	708b      	strb	r3, [r1, #2]
1000d452:	2100      	movs	r1, #0
1000d454:	4b05      	ldr	r3, [pc, #20]	; (1000d46c <gapc_disconnect_ind+0x2c>)
1000d456:	4798      	blx	r3
1000d458:	2807      	cmp	r0, #7
1000d45a:	d806      	bhi.n	1000d46a <gapc_disconnect_ind+0x2a>
1000d45c:	2312      	movs	r3, #18
1000d45e:	4358      	muls	r0, r3
1000d460:	4b03      	ldr	r3, [pc, #12]	; (1000d470 <gapc_disconnect_ind+0x30>)
1000d462:	1818      	adds	r0, r3, r0
1000d464:	2301      	movs	r3, #1
1000d466:	425b      	negs	r3, r3
1000d468:	8143      	strh	r3, [r0, #10]
1000d46a:	bd08      	pop	{r3, pc}
1000d46c:	1000d125 	.word	0x1000d125
1000d470:	1001406e 	.word	0x1001406e

1000d474 <gapc_bond_cmd_handler>:
1000d474:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000d476:	9300      	str	r3, [sp, #0]
1000d478:	2312      	movs	r3, #18
1000d47a:	1c04      	adds	r4, r0, #0
1000d47c:	a808      	add	r0, sp, #32
1000d47e:	7807      	ldrb	r7, [r0, #0]
1000d480:	a809      	add	r0, sp, #36	; 0x24
1000d482:	7806      	ldrb	r6, [r0, #0]
1000d484:	a80a      	add	r0, sp, #40	; 0x28
1000d486:	7805      	ldrb	r5, [r0, #0]
1000d488:	a80b      	add	r0, sp, #44	; 0x2c
1000d48a:	7800      	ldrb	r0, [r0, #0]
1000d48c:	9001      	str	r0, [sp, #4]
1000d48e:	4810      	ldr	r0, [pc, #64]	; (1000d4d0 <gapc_bond_cmd_handler+0x5c>)
1000d490:	7003      	strb	r3, [r0, #0]
1000d492:	230e      	movs	r3, #14
1000d494:	70c4      	strb	r4, [r0, #3]
1000d496:	4c0f      	ldr	r4, [pc, #60]	; (1000d4d4 <gapc_bond_cmd_handler+0x60>)
1000d498:	7043      	strb	r3, [r0, #1]
1000d49a:	7083      	strb	r3, [r0, #2]
1000d49c:	8823      	ldrh	r3, [r4, #0]
1000d49e:	8824      	ldrh	r4, [r4, #0]
1000d4a0:	7103      	strb	r3, [r0, #4]
1000d4a2:	466b      	mov	r3, sp
1000d4a4:	781b      	ldrb	r3, [r3, #0]
1000d4a6:	0a24      	lsrs	r4, r4, #8
1000d4a8:	72c3      	strb	r3, [r0, #11]
1000d4aa:	466b      	mov	r3, sp
1000d4ac:	791b      	ldrb	r3, [r3, #4]
1000d4ae:	7144      	strb	r4, [r0, #5]
1000d4b0:	73c3      	strb	r3, [r0, #15]
1000d4b2:	2308      	movs	r3, #8
1000d4b4:	7183      	strb	r3, [r0, #6]
1000d4b6:	2300      	movs	r3, #0
1000d4b8:	240a      	movs	r4, #10
1000d4ba:	7241      	strb	r1, [r0, #9]
1000d4bc:	71c3      	strb	r3, [r0, #7]
1000d4be:	2110      	movs	r1, #16
1000d4c0:	4b05      	ldr	r3, [pc, #20]	; (1000d4d8 <gapc_bond_cmd_handler+0x64>)
1000d4c2:	7307      	strb	r7, [r0, #12]
1000d4c4:	7346      	strb	r6, [r0, #13]
1000d4c6:	7385      	strb	r5, [r0, #14]
1000d4c8:	7204      	strb	r4, [r0, #8]
1000d4ca:	7282      	strb	r2, [r0, #10]
1000d4cc:	4798      	blx	r3
1000d4ce:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000d4d0:	100143dc 	.word	0x100143dc
1000d4d4:	1001406c 	.word	0x1001406c
1000d4d8:	1000cf55 	.word	0x1000cf55

1000d4dc <gapc_bond_ind>:
1000d4dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000d4de:	780e      	ldrb	r6, [r1, #0]
1000d4e0:	1c03      	adds	r3, r0, #0
1000d4e2:	1eb0      	subs	r0, r6, #2
1000d4e4:	2805      	cmp	r0, #5
1000d4e6:	d85d      	bhi.n	1000d5a4 <gapc_bond_ind+0xc8>
1000d4e8:	1c15      	adds	r5, r2, #0
1000d4ea:	1c0c      	adds	r4, r1, #0
1000d4ec:	f001 f85a 	bl	1000e5a4 <__gnu_thumb1_case_uqi>
1000d4f0:	2f5a030d 	.word	0x2f5a030d
1000d4f4:	4740      	.short	0x4740
1000d4f6:	2009      	movs	r0, #9
1000d4f8:	2a00      	cmp	r2, #0
1000d4fa:	d054      	beq.n	1000d5a6 <gapc_bond_ind+0xca>
1000d4fc:	0a1b      	lsrs	r3, r3, #8
1000d4fe:	8053      	strh	r3, [r2, #2]
1000d500:	788b      	ldrb	r3, [r1, #2]
1000d502:	4829      	ldr	r0, [pc, #164]	; (1000d5a8 <gapc_bond_ind+0xcc>)
1000d504:	7113      	strb	r3, [r2, #4]
1000d506:	2100      	movs	r1, #0
1000d508:	e01c      	b.n	1000d544 <gapc_bond_ind+0x68>
1000d50a:	2009      	movs	r0, #9
1000d50c:	2a00      	cmp	r2, #0
1000d50e:	d04a      	beq.n	1000d5a6 <gapc_bond_ind+0xca>
1000d510:	4c25      	ldr	r4, [pc, #148]	; (1000d5a8 <gapc_bond_ind+0xcc>)
1000d512:	0a1b      	lsrs	r3, r3, #8
1000d514:	8053      	strh	r3, [r2, #2]
1000d516:	788b      	ldrb	r3, [r1, #2]
1000d518:	2700      	movs	r7, #0
1000d51a:	1c10      	adds	r0, r2, #0
1000d51c:	1c21      	adds	r1, r4, #0
1000d51e:	7013      	strb	r3, [r2, #0]
1000d520:	4e22      	ldr	r6, [pc, #136]	; (1000d5ac <gapc_bond_ind+0xd0>)
1000d522:	7117      	strb	r7, [r2, #4]
1000d524:	312e      	adds	r1, #46	; 0x2e
1000d526:	2217      	movs	r2, #23
1000d528:	3032      	adds	r0, #50	; 0x32
1000d52a:	47b0      	blx	r6
1000d52c:	1c28      	adds	r0, r5, #0
1000d52e:	1c21      	adds	r1, r4, #0
1000d530:	2210      	movs	r2, #16
1000d532:	311e      	adds	r1, #30
1000d534:	3022      	adds	r0, #34	; 0x22
1000d536:	47b0      	blx	r6
1000d538:	1ca1      	adds	r1, r4, #2
1000d53a:	1da8      	adds	r0, r5, #6
1000d53c:	221c      	movs	r2, #28
1000d53e:	47b0      	blx	r6
1000d540:	1c20      	adds	r0, r4, #0
1000d542:	1c39      	adds	r1, r7, #0
1000d544:	2246      	movs	r2, #70	; 0x46
1000d546:	4b1a      	ldr	r3, [pc, #104]	; (1000d5b0 <gapc_bond_ind+0xd4>)
1000d548:	4798      	blx	r3
1000d54a:	2009      	movs	r0, #9
1000d54c:	e02b      	b.n	1000d5a6 <gapc_bond_ind+0xca>
1000d54e:	4d16      	ldr	r5, [pc, #88]	; (1000d5a8 <gapc_bond_ind+0xcc>)
1000d550:	3102      	adds	r1, #2
1000d552:	1c28      	adds	r0, r5, #0
1000d554:	2210      	movs	r2, #16
1000d556:	4e15      	ldr	r6, [pc, #84]	; (1000d5ac <gapc_bond_ind+0xd0>)
1000d558:	302e      	adds	r0, #46	; 0x2e
1000d55a:	47b0      	blx	r6
1000d55c:	1c28      	adds	r0, r5, #0
1000d55e:	1c21      	adds	r1, r4, #0
1000d560:	303f      	adds	r0, #63	; 0x3f
1000d562:	3112      	adds	r1, #18
1000d564:	2206      	movs	r2, #6
1000d566:	47b0      	blx	r6
1000d568:	7e23      	ldrb	r3, [r4, #24]
1000d56a:	353e      	adds	r5, #62	; 0x3e
1000d56c:	702b      	strb	r3, [r5, #0]
1000d56e:	e019      	b.n	1000d5a4 <gapc_bond_ind+0xc8>
1000d570:	480d      	ldr	r0, [pc, #52]	; (1000d5a8 <gapc_bond_ind+0xcc>)
1000d572:	3102      	adds	r1, #2
1000d574:	2210      	movs	r2, #16
1000d576:	4b0d      	ldr	r3, [pc, #52]	; (1000d5ac <gapc_bond_ind+0xd0>)
1000d578:	301e      	adds	r0, #30
1000d57a:	4798      	blx	r3
1000d57c:	e012      	b.n	1000d5a4 <gapc_bond_ind+0xc8>
1000d57e:	4d0a      	ldr	r5, [pc, #40]	; (1000d5a8 <gapc_bond_ind+0xcc>)
1000d580:	3102      	adds	r1, #2
1000d582:	2210      	movs	r2, #16
1000d584:	4e09      	ldr	r6, [pc, #36]	; (1000d5ac <gapc_bond_ind+0xd0>)
1000d586:	1ca8      	adds	r0, r5, #2
1000d588:	47b0      	blx	r6
1000d58a:	1c28      	adds	r0, r5, #0
1000d58c:	1c21      	adds	r1, r4, #0
1000d58e:	7ce3      	ldrb	r3, [r4, #19]
1000d590:	7ca2      	ldrb	r2, [r4, #18]
1000d592:	021b      	lsls	r3, r3, #8
1000d594:	4313      	orrs	r3, r2
1000d596:	3014      	adds	r0, #20
1000d598:	3114      	adds	r1, #20
1000d59a:	2208      	movs	r2, #8
1000d59c:	826b      	strh	r3, [r5, #18]
1000d59e:	47b0      	blx	r6
1000d5a0:	7f23      	ldrb	r3, [r4, #28]
1000d5a2:	772b      	strb	r3, [r5, #28]
1000d5a4:	2000      	movs	r0, #0
1000d5a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000d5a8:	100132fc 	.word	0x100132fc
1000d5ac:	1000f6c3 	.word	0x1000f6c3
1000d5b0:	1000f6d5 	.word	0x1000f6d5

1000d5b4 <gapc_bond_req_ind>:
1000d5b4:	b570      	push	{r4, r5, r6, lr}
1000d5b6:	780c      	ldrb	r4, [r1, #0]
1000d5b8:	1c03      	adds	r3, r0, #0
1000d5ba:	7849      	ldrb	r1, [r1, #1]
1000d5bc:	2c07      	cmp	r4, #7
1000d5be:	d85c      	bhi.n	1000d67a <gapc_bond_req_ind+0xc6>
1000d5c0:	1c20      	adds	r0, r4, #0
1000d5c2:	f000 ffef 	bl	1000e5a4 <__gnu_thumb1_case_uqi>
1000d5c6:	5a04      	.short	0x5a04
1000d5c8:	5a0b5a5a 	.word	0x5a0b5a5a
1000d5cc:	1f1f      	.short	0x1f1f
1000d5ce:	200a      	movs	r0, #10
1000d5d0:	2a00      	cmp	r2, #0
1000d5d2:	d053      	beq.n	1000d67c <gapc_bond_req_ind+0xc8>
1000d5d4:	0a1b      	lsrs	r3, r3, #8
1000d5d6:	8013      	strh	r3, [r2, #0]
1000d5d8:	7091      	strb	r1, [r2, #2]
1000d5da:	e04f      	b.n	1000d67c <gapc_bond_req_ind+0xc8>
1000d5dc:	2a00      	cmp	r2, #0
1000d5de:	d00b      	beq.n	1000d5f8 <gapc_bond_req_ind+0x44>
1000d5e0:	0a1b      	lsrs	r3, r3, #8
1000d5e2:	8013      	strh	r3, [r2, #0]
1000d5e4:	2900      	cmp	r1, #0
1000d5e6:	d102      	bne.n	1000d5ee <gapc_bond_req_ind+0x3a>
1000d5e8:	2301      	movs	r3, #1
1000d5ea:	7093      	strb	r3, [r2, #2]
1000d5ec:	e004      	b.n	1000d5f8 <gapc_bond_req_ind+0x44>
1000d5ee:	2300      	movs	r3, #0
1000d5f0:	7093      	strb	r3, [r2, #2]
1000d5f2:	2902      	cmp	r1, #2
1000d5f4:	d102      	bne.n	1000d5fc <gapc_bond_req_ind+0x48>
1000d5f6:	70d3      	strb	r3, [r2, #3]
1000d5f8:	200c      	movs	r0, #12
1000d5fa:	e03f      	b.n	1000d67c <gapc_bond_req_ind+0xc8>
1000d5fc:	2901      	cmp	r1, #1
1000d5fe:	d1fb      	bne.n	1000d5f8 <gapc_bond_req_ind+0x44>
1000d600:	70d1      	strb	r1, [r2, #3]
1000d602:	e7f9      	b.n	1000d5f8 <gapc_bond_req_ind+0x44>
1000d604:	2214      	movs	r2, #20
1000d606:	481e      	ldr	r0, [pc, #120]	; (1000d680 <gapc_bond_req_ind+0xcc>)
1000d608:	0a1b      	lsrs	r3, r3, #8
1000d60a:	70c3      	strb	r3, [r0, #3]
1000d60c:	4b1d      	ldr	r3, [pc, #116]	; (1000d684 <gapc_bond_req_ind+0xd0>)
1000d60e:	7002      	strb	r2, [r0, #0]
1000d610:	3a06      	subs	r2, #6
1000d612:	7042      	strb	r2, [r0, #1]
1000d614:	7082      	strb	r2, [r0, #2]
1000d616:	881a      	ldrh	r2, [r3, #0]
1000d618:	881b      	ldrh	r3, [r3, #0]
1000d61a:	4e1b      	ldr	r6, [pc, #108]	; (1000d688 <gapc_bond_req_ind+0xd4>)
1000d61c:	0a1b      	lsrs	r3, r3, #8
1000d61e:	7143      	strb	r3, [r0, #5]
1000d620:	2301      	movs	r3, #1
1000d622:	7102      	strb	r2, [r0, #4]
1000d624:	7204      	strb	r4, [r0, #8]
1000d626:	7243      	strb	r3, [r0, #9]
1000d628:	1c05      	adds	r5, r0, #0
1000d62a:	1c31      	adds	r1, r6, #0
1000d62c:	300a      	adds	r0, #10
1000d62e:	2c07      	cmp	r4, #7
1000d630:	d116      	bne.n	1000d660 <gapc_bond_req_ind+0xac>
1000d632:	317e      	adds	r1, #126	; 0x7e
1000d634:	2210      	movs	r2, #16
1000d636:	4c15      	ldr	r4, [pc, #84]	; (1000d68c <gapc_bond_req_ind+0xd8>)
1000d638:	47a0      	blx	r4
1000d63a:	1c33      	adds	r3, r6, #0
1000d63c:	1c31      	adds	r1, r6, #0
1000d63e:	1c28      	adds	r0, r5, #0
1000d640:	338e      	adds	r3, #142	; 0x8e
1000d642:	881b      	ldrh	r3, [r3, #0]
1000d644:	3190      	adds	r1, #144	; 0x90
1000d646:	76ab      	strb	r3, [r5, #26]
1000d648:	2208      	movs	r2, #8
1000d64a:	0a1b      	lsrs	r3, r3, #8
1000d64c:	301c      	adds	r0, #28
1000d64e:	76eb      	strb	r3, [r5, #27]
1000d650:	47a0      	blx	r4
1000d652:	1c31      	adds	r1, r6, #0
1000d654:	3198      	adds	r1, #152	; 0x98
1000d656:	780a      	ldrb	r2, [r1, #0]
1000d658:	1d6b      	adds	r3, r5, #5
1000d65a:	77da      	strb	r2, [r3, #31]
1000d65c:	2125      	movs	r1, #37	; 0x25
1000d65e:	e004      	b.n	1000d66a <gapc_bond_req_ind+0xb6>
1000d660:	319a      	adds	r1, #154	; 0x9a
1000d662:	2210      	movs	r2, #16
1000d664:	4b09      	ldr	r3, [pc, #36]	; (1000d68c <gapc_bond_req_ind+0xd8>)
1000d666:	4798      	blx	r3
1000d668:	211a      	movs	r1, #26
1000d66a:	1c0b      	adds	r3, r1, #0
1000d66c:	2400      	movs	r4, #0
1000d66e:	3b08      	subs	r3, #8
1000d670:	71ab      	strb	r3, [r5, #6]
1000d672:	1c28      	adds	r0, r5, #0
1000d674:	4b06      	ldr	r3, [pc, #24]	; (1000d690 <gapc_bond_req_ind+0xdc>)
1000d676:	71ec      	strb	r4, [r5, #7]
1000d678:	4798      	blx	r3
1000d67a:	2000      	movs	r0, #0
1000d67c:	bd70      	pop	{r4, r5, r6, pc}
1000d67e:	46c0      	nop			; (mov r8, r8)
1000d680:	100143dc 	.word	0x100143dc
1000d684:	1001406c 	.word	0x1001406c
1000d688:	100140fe 	.word	0x100140fe
1000d68c:	1000f6c3 	.word	0x1000f6c3
1000d690:	1000cf55 	.word	0x1000cf55

1000d694 <gapc_bond_cfm_handler_pair_resp>:
1000d694:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d696:	b085      	sub	sp, #20
1000d698:	1c07      	adds	r7, r0, #0
1000d69a:	a80a      	add	r0, sp, #40	; 0x28
1000d69c:	7806      	ldrb	r6, [r0, #0]
1000d69e:	a80b      	add	r0, sp, #44	; 0x2c
1000d6a0:	7805      	ldrb	r5, [r0, #0]
1000d6a2:	a80c      	add	r0, sp, #48	; 0x30
1000d6a4:	7800      	ldrb	r0, [r0, #0]
1000d6a6:	2414      	movs	r4, #20
1000d6a8:	9002      	str	r0, [sp, #8]
1000d6aa:	a80d      	add	r0, sp, #52	; 0x34
1000d6ac:	7800      	ldrb	r0, [r0, #0]
1000d6ae:	9301      	str	r3, [sp, #4]
1000d6b0:	9003      	str	r0, [sp, #12]
1000d6b2:	a80e      	add	r0, sp, #56	; 0x38
1000d6b4:	8800      	ldrh	r0, [r0, #0]
1000d6b6:	4684      	mov	ip, r0
1000d6b8:	4812      	ldr	r0, [pc, #72]	; (1000d704 <gapc_bond_cfm_handler_pair_resp+0x70>)
1000d6ba:	7004      	strb	r4, [r0, #0]
1000d6bc:	3c06      	subs	r4, #6
1000d6be:	7044      	strb	r4, [r0, #1]
1000d6c0:	7084      	strb	r4, [r0, #2]
1000d6c2:	4664      	mov	r4, ip
1000d6c4:	70c4      	strb	r4, [r0, #3]
1000d6c6:	4c10      	ldr	r4, [pc, #64]	; (1000d708 <gapc_bond_cfm_handler_pair_resp+0x74>)
1000d6c8:	7247      	strb	r7, [r0, #9]
1000d6ca:	8823      	ldrh	r3, [r4, #0]
1000d6cc:	8824      	ldrh	r4, [r4, #0]
1000d6ce:	7103      	strb	r3, [r0, #4]
1000d6d0:	466b      	mov	r3, sp
1000d6d2:	791b      	ldrb	r3, [r3, #4]
1000d6d4:	0a24      	lsrs	r4, r4, #8
1000d6d6:	7303      	strb	r3, [r0, #12]
1000d6d8:	466b      	mov	r3, sp
1000d6da:	7a1b      	ldrb	r3, [r3, #8]
1000d6dc:	7144      	strb	r4, [r0, #5]
1000d6de:	73c3      	strb	r3, [r0, #15]
1000d6e0:	466b      	mov	r3, sp
1000d6e2:	7b1b      	ldrb	r3, [r3, #12]
1000d6e4:	2401      	movs	r4, #1
1000d6e6:	7403      	strb	r3, [r0, #16]
1000d6e8:	2309      	movs	r3, #9
1000d6ea:	7183      	strb	r3, [r0, #6]
1000d6ec:	2300      	movs	r3, #0
1000d6ee:	7204      	strb	r4, [r0, #8]
1000d6f0:	7281      	strb	r1, [r0, #10]
1000d6f2:	72c2      	strb	r2, [r0, #11]
1000d6f4:	7346      	strb	r6, [r0, #13]
1000d6f6:	7385      	strb	r5, [r0, #14]
1000d6f8:	71c3      	strb	r3, [r0, #7]
1000d6fa:	2111      	movs	r1, #17
1000d6fc:	4b03      	ldr	r3, [pc, #12]	; (1000d70c <gapc_bond_cfm_handler_pair_resp+0x78>)
1000d6fe:	4798      	blx	r3
1000d700:	b005      	add	sp, #20
1000d702:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d704:	100143dc 	.word	0x100143dc
1000d708:	1001406c 	.word	0x1001406c
1000d70c:	1000cf55 	.word	0x1000cf55

1000d710 <gapc_bond_cfm_handler_key_exch>:
1000d710:	b538      	push	{r3, r4, r5, lr}
1000d712:	2514      	movs	r5, #20
1000d714:	4c0d      	ldr	r4, [pc, #52]	; (1000d74c <gapc_bond_cfm_handler_key_exch+0x3c>)
1000d716:	70e3      	strb	r3, [r4, #3]
1000d718:	4b0d      	ldr	r3, [pc, #52]	; (1000d750 <gapc_bond_cfm_handler_key_exch+0x40>)
1000d71a:	7025      	strb	r5, [r4, #0]
1000d71c:	3d06      	subs	r5, #6
1000d71e:	7065      	strb	r5, [r4, #1]
1000d720:	70a5      	strb	r5, [r4, #2]
1000d722:	881d      	ldrh	r5, [r3, #0]
1000d724:	881b      	ldrh	r3, [r3, #0]
1000d726:	7220      	strb	r0, [r4, #8]
1000d728:	0a1b      	lsrs	r3, r3, #8
1000d72a:	7163      	strb	r3, [r4, #5]
1000d72c:	7261      	strb	r1, [r4, #9]
1000d72e:	4b09      	ldr	r3, [pc, #36]	; (1000d754 <gapc_bond_cfm_handler_key_exch+0x44>)
1000d730:	1c11      	adds	r1, r2, #0
1000d732:	4809      	ldr	r0, [pc, #36]	; (1000d758 <gapc_bond_cfm_handler_key_exch+0x48>)
1000d734:	2210      	movs	r2, #16
1000d736:	7125      	strb	r5, [r4, #4]
1000d738:	4798      	blx	r3
1000d73a:	2312      	movs	r3, #18
1000d73c:	71a3      	strb	r3, [r4, #6]
1000d73e:	2300      	movs	r3, #0
1000d740:	1c20      	adds	r0, r4, #0
1000d742:	71e3      	strb	r3, [r4, #7]
1000d744:	211a      	movs	r1, #26
1000d746:	4b05      	ldr	r3, [pc, #20]	; (1000d75c <gapc_bond_cfm_handler_key_exch+0x4c>)
1000d748:	4798      	blx	r3
1000d74a:	bd38      	pop	{r3, r4, r5, pc}
1000d74c:	100143dc 	.word	0x100143dc
1000d750:	1001406c 	.word	0x1001406c
1000d754:	1000f6c3 	.word	0x1000f6c3
1000d758:	100143e6 	.word	0x100143e6
1000d75c:	1000cf55 	.word	0x1000cf55

1000d760 <gapc_security_cmd_handler>:
1000d760:	221a      	movs	r2, #26
1000d762:	b508      	push	{r3, lr}
1000d764:	4b0b      	ldr	r3, [pc, #44]	; (1000d794 <gapc_security_cmd_handler+0x34>)
1000d766:	701a      	strb	r2, [r3, #0]
1000d768:	3a0c      	subs	r2, #12
1000d76a:	705a      	strb	r2, [r3, #1]
1000d76c:	709a      	strb	r2, [r3, #2]
1000d76e:	4a0a      	ldr	r2, [pc, #40]	; (1000d798 <gapc_security_cmd_handler+0x38>)
1000d770:	70d8      	strb	r0, [r3, #3]
1000d772:	8810      	ldrh	r0, [r2, #0]
1000d774:	8812      	ldrh	r2, [r2, #0]
1000d776:	7118      	strb	r0, [r3, #4]
1000d778:	0a12      	lsrs	r2, r2, #8
1000d77a:	715a      	strb	r2, [r3, #5]
1000d77c:	220c      	movs	r2, #12
1000d77e:	721a      	strb	r2, [r3, #8]
1000d780:	3a0a      	subs	r2, #10
1000d782:	719a      	strb	r2, [r3, #6]
1000d784:	2200      	movs	r2, #0
1000d786:	7259      	strb	r1, [r3, #9]
1000d788:	71da      	strb	r2, [r3, #7]
1000d78a:	1c18      	adds	r0, r3, #0
1000d78c:	210a      	movs	r1, #10
1000d78e:	4b03      	ldr	r3, [pc, #12]	; (1000d79c <gapc_security_cmd_handler+0x3c>)
1000d790:	4798      	blx	r3
1000d792:	bd08      	pop	{r3, pc}
1000d794:	100143dc 	.word	0x100143dc
1000d798:	1001406c 	.word	0x1001406c
1000d79c:	1000cf55 	.word	0x1000cf55

1000d7a0 <gapc_encrypt_cmd_handler>:
1000d7a0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d7a2:	2500      	movs	r5, #0
1000d7a4:	b089      	sub	sp, #36	; 0x24
1000d7a6:	9306      	str	r3, [sp, #24]
1000d7a8:	ab0e      	add	r3, sp, #56	; 0x38
1000d7aa:	781b      	ldrb	r3, [r3, #0]
1000d7ac:	1c17      	adds	r7, r2, #0
1000d7ae:	9307      	str	r3, [sp, #28]
1000d7b0:	ab0f      	add	r3, sp, #60	; 0x3c
1000d7b2:	781b      	ldrb	r3, [r3, #0]
1000d7b4:	4a19      	ldr	r2, [pc, #100]	; (1000d81c <gapc_encrypt_cmd_handler+0x7c>)
1000d7b6:	1c06      	adds	r6, r0, #0
1000d7b8:	9105      	str	r1, [sp, #20]
1000d7ba:	9300      	str	r3, [sp, #0]
1000d7bc:	9002      	str	r0, [sp, #8]
1000d7be:	1c29      	adds	r1, r5, #0
1000d7c0:	1c2b      	adds	r3, r5, #0
1000d7c2:	9501      	str	r5, [sp, #4]
1000d7c4:	1c10      	adds	r0, r2, #0
1000d7c6:	4c16      	ldr	r4, [pc, #88]	; (1000d820 <gapc_encrypt_cmd_handler+0x80>)
1000d7c8:	47a0      	blx	r4
1000d7ca:	2316      	movs	r3, #22
1000d7cc:	4c15      	ldr	r4, [pc, #84]	; (1000d824 <gapc_encrypt_cmd_handler+0x84>)
1000d7ce:	9905      	ldr	r1, [sp, #20]
1000d7d0:	7023      	strb	r3, [r4, #0]
1000d7d2:	3b08      	subs	r3, #8
1000d7d4:	7063      	strb	r3, [r4, #1]
1000d7d6:	70a3      	strb	r3, [r4, #2]
1000d7d8:	4b13      	ldr	r3, [pc, #76]	; (1000d828 <gapc_encrypt_cmd_handler+0x88>)
1000d7da:	70e6      	strb	r6, [r4, #3]
1000d7dc:	881a      	ldrh	r2, [r3, #0]
1000d7de:	881b      	ldrh	r3, [r3, #0]
1000d7e0:	7122      	strb	r2, [r4, #4]
1000d7e2:	0a1b      	lsrs	r3, r3, #8
1000d7e4:	7163      	strb	r3, [r4, #5]
1000d7e6:	230b      	movs	r3, #11
1000d7e8:	4e10      	ldr	r6, [pc, #64]	; (1000d82c <gapc_encrypt_cmd_handler+0x8c>)
1000d7ea:	2210      	movs	r2, #16
1000d7ec:	4810      	ldr	r0, [pc, #64]	; (1000d830 <gapc_encrypt_cmd_handler+0x90>)
1000d7ee:	7223      	strb	r3, [r4, #8]
1000d7f0:	7265      	strb	r5, [r4, #9]
1000d7f2:	47b0      	blx	r6
1000d7f4:	0a3b      	lsrs	r3, r7, #8
1000d7f6:	9906      	ldr	r1, [sp, #24]
1000d7f8:	2208      	movs	r2, #8
1000d7fa:	480e      	ldr	r0, [pc, #56]	; (1000d834 <gapc_encrypt_cmd_handler+0x94>)
1000d7fc:	76e3      	strb	r3, [r4, #27]
1000d7fe:	76a7      	strb	r7, [r4, #26]
1000d800:	47b0      	blx	r6
1000d802:	466a      	mov	r2, sp
1000d804:	7f12      	ldrb	r2, [r2, #28]
1000d806:	1d63      	adds	r3, r4, #5
1000d808:	77da      	strb	r2, [r3, #31]
1000d80a:	231d      	movs	r3, #29
1000d80c:	1c20      	adds	r0, r4, #0
1000d80e:	71a3      	strb	r3, [r4, #6]
1000d810:	2125      	movs	r1, #37	; 0x25
1000d812:	4b09      	ldr	r3, [pc, #36]	; (1000d838 <gapc_encrypt_cmd_handler+0x98>)
1000d814:	71e5      	strb	r5, [r4, #7]
1000d816:	4798      	blx	r3
1000d818:	b009      	add	sp, #36	; 0x24
1000d81a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d81c:	100132dc 	.word	0x100132dc
1000d820:	1000d259 	.word	0x1000d259
1000d824:	100143dc 	.word	0x100143dc
1000d828:	1001406c 	.word	0x1001406c
1000d82c:	1000f6c3 	.word	0x1000f6c3
1000d830:	100143e6 	.word	0x100143e6
1000d834:	100143f8 	.word	0x100143f8
1000d838:	1000cf55 	.word	0x1000cf55

1000d83c <gapc_encrypt_req_ind>:
1000d83c:	b508      	push	{r3, lr}
1000d83e:	0a00      	lsrs	r0, r0, #8
1000d840:	8010      	strh	r0, [r2, #0]
1000d842:	784b      	ldrb	r3, [r1, #1]
1000d844:	7808      	ldrb	r0, [r1, #0]
1000d846:	021b      	lsls	r3, r3, #8
1000d848:	4303      	orrs	r3, r0
1000d84a:	8053      	strh	r3, [r2, #2]
1000d84c:	1d10      	adds	r0, r2, #4
1000d84e:	3102      	adds	r1, #2
1000d850:	2208      	movs	r2, #8
1000d852:	4b01      	ldr	r3, [pc, #4]	; (1000d858 <gapc_encrypt_req_ind+0x1c>)
1000d854:	4798      	blx	r3
1000d856:	bd08      	pop	{r3, pc}
1000d858:	1000f6c3 	.word	0x1000f6c3

1000d85c <gapc_encrypt_cfm_handler>:
1000d85c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d85e:	2500      	movs	r5, #0
1000d860:	b087      	sub	sp, #28
1000d862:	9304      	str	r3, [sp, #16]
1000d864:	ab0c      	add	r3, sp, #48	; 0x30
1000d866:	781b      	ldrb	r3, [r3, #0]
1000d868:	1c17      	adds	r7, r2, #0
1000d86a:	4a15      	ldr	r2, [pc, #84]	; (1000d8c0 <gapc_encrypt_cfm_handler+0x64>)
1000d86c:	1c06      	adds	r6, r0, #0
1000d86e:	9305      	str	r3, [sp, #20]
1000d870:	9100      	str	r1, [sp, #0]
1000d872:	9002      	str	r0, [sp, #8]
1000d874:	1c29      	adds	r1, r5, #0
1000d876:	1c2b      	adds	r3, r5, #0
1000d878:	9501      	str	r5, [sp, #4]
1000d87a:	1c10      	adds	r0, r2, #0
1000d87c:	4c11      	ldr	r4, [pc, #68]	; (1000d8c4 <gapc_encrypt_cfm_handler+0x68>)
1000d87e:	47a0      	blx	r4
1000d880:	2318      	movs	r3, #24
1000d882:	4c11      	ldr	r4, [pc, #68]	; (1000d8c8 <gapc_encrypt_cfm_handler+0x6c>)
1000d884:	9904      	ldr	r1, [sp, #16]
1000d886:	7023      	strb	r3, [r4, #0]
1000d888:	3b0a      	subs	r3, #10
1000d88a:	7063      	strb	r3, [r4, #1]
1000d88c:	70a3      	strb	r3, [r4, #2]
1000d88e:	4b0f      	ldr	r3, [pc, #60]	; (1000d8cc <gapc_encrypt_cfm_handler+0x70>)
1000d890:	480f      	ldr	r0, [pc, #60]	; (1000d8d0 <gapc_encrypt_cfm_handler+0x74>)
1000d892:	881a      	ldrh	r2, [r3, #0]
1000d894:	881b      	ldrh	r3, [r3, #0]
1000d896:	7122      	strb	r2, [r4, #4]
1000d898:	0a1b      	lsrs	r3, r3, #8
1000d89a:	7163      	strb	r3, [r4, #5]
1000d89c:	2210      	movs	r2, #16
1000d89e:	4b0d      	ldr	r3, [pc, #52]	; (1000d8d4 <gapc_encrypt_cfm_handler+0x78>)
1000d8a0:	70e6      	strb	r6, [r4, #3]
1000d8a2:	7227      	strb	r7, [r4, #8]
1000d8a4:	4798      	blx	r3
1000d8a6:	466b      	mov	r3, sp
1000d8a8:	7d1b      	ldrb	r3, [r3, #20]
1000d8aa:	1c20      	adds	r0, r4, #0
1000d8ac:	7663      	strb	r3, [r4, #25]
1000d8ae:	2312      	movs	r3, #18
1000d8b0:	211a      	movs	r1, #26
1000d8b2:	71a3      	strb	r3, [r4, #6]
1000d8b4:	4b08      	ldr	r3, [pc, #32]	; (1000d8d8 <gapc_encrypt_cfm_handler+0x7c>)
1000d8b6:	71e5      	strb	r5, [r4, #7]
1000d8b8:	4798      	blx	r3
1000d8ba:	b007      	add	sp, #28
1000d8bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d8be:	46c0      	nop			; (mov r8, r8)
1000d8c0:	100132ec 	.word	0x100132ec
1000d8c4:	1000d259 	.word	0x1000d259
1000d8c8:	100143dc 	.word	0x100143dc
1000d8cc:	1001406c 	.word	0x1001406c
1000d8d0:	100143e5 	.word	0x100143e5
1000d8d4:	1000f6c3 	.word	0x1000f6c3
1000d8d8:	1000cf55 	.word	0x1000cf55

1000d8dc <gapc_encrypt_ind>:
1000d8dc:	780b      	ldrb	r3, [r1, #0]
1000d8de:	0a00      	lsrs	r0, r0, #8
1000d8e0:	70d3      	strb	r3, [r2, #3]
1000d8e2:	2300      	movs	r3, #0
1000d8e4:	8010      	strh	r0, [r2, #0]
1000d8e6:	7093      	strb	r3, [r2, #2]
1000d8e8:	4770      	bx	lr
	...

1000d8ec <gapc_param_update_cfm_handler>:
1000d8ec:	b538      	push	{r3, r4, r5, lr}
1000d8ee:	2410      	movs	r4, #16
1000d8f0:	1c05      	adds	r5, r0, #0
1000d8f2:	480e      	ldr	r0, [pc, #56]	; (1000d92c <gapc_param_update_cfm_handler+0x40>)
1000d8f4:	7004      	strb	r4, [r0, #0]
1000d8f6:	3c02      	subs	r4, #2
1000d8f8:	7044      	strb	r4, [r0, #1]
1000d8fa:	7084      	strb	r4, [r0, #2]
1000d8fc:	4c0c      	ldr	r4, [pc, #48]	; (1000d930 <gapc_param_update_cfm_handler+0x44>)
1000d8fe:	70c5      	strb	r5, [r0, #3]
1000d900:	8825      	ldrh	r5, [r4, #0]
1000d902:	8824      	ldrh	r4, [r4, #0]
1000d904:	72c3      	strb	r3, [r0, #11]
1000d906:	0a1b      	lsrs	r3, r3, #8
1000d908:	0a24      	lsrs	r4, r4, #8
1000d90a:	7303      	strb	r3, [r0, #12]
1000d90c:	2305      	movs	r3, #5
1000d90e:	7144      	strb	r4, [r0, #5]
1000d910:	2400      	movs	r4, #0
1000d912:	7201      	strb	r1, [r0, #8]
1000d914:	7242      	strb	r2, [r0, #9]
1000d916:	7183      	strb	r3, [r0, #6]
1000d918:	0a12      	lsrs	r2, r2, #8
1000d91a:	210d      	movs	r1, #13
1000d91c:	4b05      	ldr	r3, [pc, #20]	; (1000d934 <gapc_param_update_cfm_handler+0x48>)
1000d91e:	7105      	strb	r5, [r0, #4]
1000d920:	7282      	strb	r2, [r0, #10]
1000d922:	71c4      	strb	r4, [r0, #7]
1000d924:	4798      	blx	r3
1000d926:	1c20      	adds	r0, r4, #0
1000d928:	bd38      	pop	{r3, r4, r5, pc}
1000d92a:	46c0      	nop			; (mov r8, r8)
1000d92c:	100143dc 	.word	0x100143dc
1000d930:	1001406c 	.word	0x1001406c
1000d934:	1000cf55 	.word	0x1000cf55

1000d938 <gapc_param_updated_ind>:
1000d938:	2300      	movs	r3, #0
1000d93a:	0a00      	lsrs	r0, r0, #8
1000d93c:	8010      	strh	r0, [r2, #0]
1000d93e:	7093      	strb	r3, [r2, #2]
1000d940:	784b      	ldrb	r3, [r1, #1]
1000d942:	7808      	ldrb	r0, [r1, #0]
1000d944:	021b      	lsls	r3, r3, #8
1000d946:	4303      	orrs	r3, r0
1000d948:	8093      	strh	r3, [r2, #4]
1000d94a:	78cb      	ldrb	r3, [r1, #3]
1000d94c:	7888      	ldrb	r0, [r1, #2]
1000d94e:	021b      	lsls	r3, r3, #8
1000d950:	4303      	orrs	r3, r0
1000d952:	80d3      	strh	r3, [r2, #6]
1000d954:	794b      	ldrb	r3, [r1, #5]
1000d956:	7909      	ldrb	r1, [r1, #4]
1000d958:	021b      	lsls	r3, r3, #8
1000d95a:	430b      	orrs	r3, r1
1000d95c:	2007      	movs	r0, #7
1000d95e:	8113      	strh	r3, [r2, #8]
1000d960:	4770      	bx	lr

1000d962 <gapc_param_updated_req_ind>:
1000d962:	0a00      	lsrs	r0, r0, #8
1000d964:	8010      	strh	r0, [r2, #0]
1000d966:	784b      	ldrb	r3, [r1, #1]
1000d968:	7808      	ldrb	r0, [r1, #0]
1000d96a:	021b      	lsls	r3, r3, #8
1000d96c:	4303      	orrs	r3, r0
1000d96e:	8053      	strh	r3, [r2, #2]
1000d970:	78cb      	ldrb	r3, [r1, #3]
1000d972:	7888      	ldrb	r0, [r1, #2]
1000d974:	021b      	lsls	r3, r3, #8
1000d976:	4303      	orrs	r3, r0
1000d978:	8093      	strh	r3, [r2, #4]
1000d97a:	794b      	ldrb	r3, [r1, #5]
1000d97c:	7908      	ldrb	r0, [r1, #4]
1000d97e:	021b      	lsls	r3, r3, #8
1000d980:	4303      	orrs	r3, r0
1000d982:	80d3      	strh	r3, [r2, #6]
1000d984:	79cb      	ldrb	r3, [r1, #7]
1000d986:	7989      	ldrb	r1, [r1, #6]
1000d988:	021b      	lsls	r3, r3, #8
1000d98a:	430b      	orrs	r3, r1
1000d98c:	2008      	movs	r0, #8
1000d98e:	8113      	strh	r3, [r2, #8]
1000d990:	4770      	bx	lr
	...

1000d994 <gapc_dev_info_req_ind_handler>:
1000d994:	b508      	push	{r3, lr}
1000d996:	1c0b      	adds	r3, r1, #0
1000d998:	0a01      	lsrs	r1, r0, #8
1000d99a:	8011      	strh	r1, [r2, #0]
1000d99c:	7818      	ldrb	r0, [r3, #0]
1000d99e:	7090      	strb	r0, [r2, #2]
1000d9a0:	2800      	cmp	r0, #0
1000d9a2:	d104      	bne.n	1000d9ae <gapc_dev_info_req_ind_handler+0x1a>
1000d9a4:	4b03      	ldr	r3, [pc, #12]	; (1000d9b4 <gapc_dev_info_req_ind_handler+0x20>)
1000d9a6:	33aa      	adds	r3, #170	; 0xaa
1000d9a8:	881b      	ldrh	r3, [r3, #0]
1000d9aa:	2b00      	cmp	r3, #0
1000d9ac:	d001      	beq.n	1000d9b2 <gapc_dev_info_req_ind_handler+0x1e>
1000d9ae:	4b02      	ldr	r3, [pc, #8]	; (1000d9b8 <gapc_dev_info_req_ind_handler+0x24>)
1000d9b0:	4798      	blx	r3
1000d9b2:	bd08      	pop	{r3, pc}
1000d9b4:	100140fe 	.word	0x100140fe
1000d9b8:	1000d065 	.word	0x1000d065

1000d9bc <gapc_sec_req_ind>:
1000d9bc:	0a00      	lsrs	r0, r0, #8
1000d9be:	8010      	strh	r0, [r2, #0]
1000d9c0:	7809      	ldrb	r1, [r1, #0]
1000d9c2:	2301      	movs	r3, #1
1000d9c4:	1c08      	adds	r0, r1, #0
1000d9c6:	0889      	lsrs	r1, r1, #2
1000d9c8:	4018      	ands	r0, r3
1000d9ca:	400b      	ands	r3, r1
1000d9cc:	70d0      	strb	r0, [r2, #3]
1000d9ce:	7113      	strb	r3, [r2, #4]
1000d9d0:	4770      	bx	lr

1000d9d2 <gapc_sign_counter_ind_handler>:
1000d9d2:	0a00      	lsrs	r0, r0, #8
1000d9d4:	8010      	strh	r0, [r2, #0]
1000d9d6:	784b      	ldrb	r3, [r1, #1]
1000d9d8:	0218      	lsls	r0, r3, #8
1000d9da:	788b      	ldrb	r3, [r1, #2]
1000d9dc:	041b      	lsls	r3, r3, #16
1000d9de:	4303      	orrs	r3, r0
1000d9e0:	7808      	ldrb	r0, [r1, #0]
1000d9e2:	4303      	orrs	r3, r0
1000d9e4:	78c8      	ldrb	r0, [r1, #3]
1000d9e6:	0600      	lsls	r0, r0, #24
1000d9e8:	4303      	orrs	r3, r0
1000d9ea:	6053      	str	r3, [r2, #4]
1000d9ec:	794b      	ldrb	r3, [r1, #5]
1000d9ee:	0218      	lsls	r0, r3, #8
1000d9f0:	798b      	ldrb	r3, [r1, #6]
1000d9f2:	041b      	lsls	r3, r3, #16
1000d9f4:	4303      	orrs	r3, r0
1000d9f6:	7908      	ldrb	r0, [r1, #4]
1000d9f8:	79c9      	ldrb	r1, [r1, #7]
1000d9fa:	4303      	orrs	r3, r0
1000d9fc:	0609      	lsls	r1, r1, #24
1000d9fe:	430b      	orrs	r3, r1
1000da00:	2000      	movs	r0, #0
1000da02:	6093      	str	r3, [r2, #8]
1000da04:	4770      	bx	lr
	...

1000da08 <gapc_peer_att_info_ind_handler>:
1000da08:	b510      	push	{r4, lr}
1000da0a:	0a00      	lsrs	r0, r0, #8
1000da0c:	8010      	strh	r0, [r2, #0]
1000da0e:	7808      	ldrb	r0, [r1, #0]
1000da10:	7090      	strb	r0, [r2, #2]
1000da12:	788b      	ldrb	r3, [r1, #2]
1000da14:	784c      	ldrb	r4, [r1, #1]
1000da16:	021b      	lsls	r3, r3, #8
1000da18:	4323      	orrs	r3, r4
1000da1a:	8093      	strh	r3, [r2, #4]
1000da1c:	2801      	cmp	r0, #1
1000da1e:	d027      	beq.n	1000da70 <gapc_peer_att_info_ind_handler+0x68>
1000da20:	2800      	cmp	r0, #0
1000da22:	d017      	beq.n	1000da54 <gapc_peer_att_info_ind_handler+0x4c>
1000da24:	2802      	cmp	r0, #2
1000da26:	d12a      	bne.n	1000da7e <gapc_peer_att_info_ind_handler+0x76>
1000da28:	790b      	ldrb	r3, [r1, #4]
1000da2a:	78c8      	ldrb	r0, [r1, #3]
1000da2c:	021b      	lsls	r3, r3, #8
1000da2e:	4303      	orrs	r3, r0
1000da30:	8113      	strh	r3, [r2, #8]
1000da32:	798b      	ldrb	r3, [r1, #6]
1000da34:	7948      	ldrb	r0, [r1, #5]
1000da36:	021b      	lsls	r3, r3, #8
1000da38:	4303      	orrs	r3, r0
1000da3a:	80d3      	strh	r3, [r2, #6]
1000da3c:	7a0b      	ldrb	r3, [r1, #8]
1000da3e:	79c8      	ldrb	r0, [r1, #7]
1000da40:	021b      	lsls	r3, r3, #8
1000da42:	4303      	orrs	r3, r0
1000da44:	8193      	strh	r3, [r2, #12]
1000da46:	7a8b      	ldrb	r3, [r1, #10]
1000da48:	7a49      	ldrb	r1, [r1, #9]
1000da4a:	021b      	lsls	r3, r3, #8
1000da4c:	430b      	orrs	r3, r1
1000da4e:	8153      	strh	r3, [r2, #10]
1000da50:	2306      	movs	r3, #6
1000da52:	e013      	b.n	1000da7c <gapc_peer_att_info_ind_handler+0x74>
1000da54:	1c14      	adds	r4, r2, #0
1000da56:	1c20      	adds	r0, r4, #0
1000da58:	790a      	ldrb	r2, [r1, #4]
1000da5a:	78cb      	ldrb	r3, [r1, #3]
1000da5c:	0212      	lsls	r2, r2, #8
1000da5e:	431a      	orrs	r2, r3
1000da60:	80e2      	strh	r2, [r4, #6]
1000da62:	4b07      	ldr	r3, [pc, #28]	; (1000da80 <gapc_peer_att_info_ind_handler+0x78>)
1000da64:	3008      	adds	r0, #8
1000da66:	3105      	adds	r1, #5
1000da68:	4798      	blx	r3
1000da6a:	2302      	movs	r3, #2
1000da6c:	70a3      	strb	r3, [r4, #2]
1000da6e:	e006      	b.n	1000da7e <gapc_peer_att_info_ind_handler+0x76>
1000da70:	790b      	ldrb	r3, [r1, #4]
1000da72:	78c9      	ldrb	r1, [r1, #3]
1000da74:	021b      	lsls	r3, r3, #8
1000da76:	430b      	orrs	r3, r1
1000da78:	80d3      	strh	r3, [r2, #6]
1000da7a:	2305      	movs	r3, #5
1000da7c:	7093      	strb	r3, [r2, #2]
1000da7e:	bd10      	pop	{r4, pc}
1000da80:	1000f6c3 	.word	0x1000f6c3

1000da84 <gapc_con_channel_map_ind_handler>:
1000da84:	b508      	push	{r3, lr}
1000da86:	2300      	movs	r3, #0
1000da88:	0a00      	lsrs	r0, r0, #8
1000da8a:	7013      	strb	r3, [r2, #0]
1000da8c:	8050      	strh	r0, [r2, #2]
1000da8e:	4b02      	ldr	r3, [pc, #8]	; (1000da98 <gapc_con_channel_map_ind_handler+0x14>)
1000da90:	1d10      	adds	r0, r2, #4
1000da92:	2205      	movs	r2, #5
1000da94:	4798      	blx	r3
1000da96:	bd08      	pop	{r3, pc}
1000da98:	1000f6c3 	.word	0x1000f6c3

1000da9c <gapc_lecb_connected>:
1000da9c:	7843      	ldrb	r3, [r0, #1]
1000da9e:	7802      	ldrb	r2, [r0, #0]
1000daa0:	021b      	lsls	r3, r3, #8
1000daa2:	4313      	orrs	r3, r2
1000daa4:	800b      	strh	r3, [r1, #0]
1000daa6:	78c3      	ldrb	r3, [r0, #3]
1000daa8:	7882      	ldrb	r2, [r0, #2]
1000daaa:	021b      	lsls	r3, r3, #8
1000daac:	4313      	orrs	r3, r2
1000daae:	804b      	strh	r3, [r1, #2]
1000dab0:	7943      	ldrb	r3, [r0, #5]
1000dab2:	7902      	ldrb	r2, [r0, #4]
1000dab4:	021b      	lsls	r3, r3, #8
1000dab6:	4313      	orrs	r3, r2
1000dab8:	808b      	strh	r3, [r1, #4]
1000daba:	79c3      	ldrb	r3, [r0, #7]
1000dabc:	7982      	ldrb	r2, [r0, #6]
1000dabe:	021b      	lsls	r3, r3, #8
1000dac0:	4313      	orrs	r3, r2
1000dac2:	80cb      	strh	r3, [r1, #6]
1000dac4:	2300      	movs	r3, #0
1000dac6:	720b      	strb	r3, [r1, #8]
1000dac8:	4770      	bx	lr

1000daca <gapc_lecb_disconnected>:
1000daca:	7843      	ldrb	r3, [r0, #1]
1000dacc:	7802      	ldrb	r2, [r0, #0]
1000dace:	021b      	lsls	r3, r3, #8
1000dad0:	4313      	orrs	r3, r2
1000dad2:	800b      	strh	r3, [r1, #0]
1000dad4:	78c3      	ldrb	r3, [r0, #3]
1000dad6:	7882      	ldrb	r2, [r0, #2]
1000dad8:	021b      	lsls	r3, r3, #8
1000dada:	4313      	orrs	r3, r2
1000dadc:	804b      	strh	r3, [r1, #2]
1000dade:	4770      	bx	lr

1000dae0 <gapc_lecb_connect_req_ind>:
1000dae0:	7843      	ldrb	r3, [r0, #1]
1000dae2:	7802      	ldrb	r2, [r0, #0]
1000dae4:	021b      	lsls	r3, r3, #8
1000dae6:	4313      	orrs	r3, r2
1000dae8:	800b      	strh	r3, [r1, #0]
1000daea:	78c3      	ldrb	r3, [r0, #3]
1000daec:	7882      	ldrb	r2, [r0, #2]
1000daee:	021b      	lsls	r3, r3, #8
1000daf0:	4313      	orrs	r3, r2
1000daf2:	804b      	strh	r3, [r1, #2]
1000daf4:	7943      	ldrb	r3, [r0, #5]
1000daf6:	7902      	ldrb	r2, [r0, #4]
1000daf8:	021b      	lsls	r3, r3, #8
1000dafa:	4313      	orrs	r3, r2
1000dafc:	808b      	strh	r3, [r1, #4]
1000dafe:	79c3      	ldrb	r3, [r0, #7]
1000db00:	7982      	ldrb	r2, [r0, #6]
1000db02:	021b      	lsls	r3, r3, #8
1000db04:	4313      	orrs	r3, r2
1000db06:	80cb      	strh	r3, [r1, #6]
1000db08:	4770      	bx	lr

1000db0a <gapc_lecb_add_credit_resp_handler>:
1000db0a:	7843      	ldrb	r3, [r0, #1]
1000db0c:	7802      	ldrb	r2, [r0, #0]
1000db0e:	021b      	lsls	r3, r3, #8
1000db10:	4313      	orrs	r3, r2
1000db12:	800b      	strh	r3, [r1, #0]
1000db14:	78c3      	ldrb	r3, [r0, #3]
1000db16:	7882      	ldrb	r2, [r0, #2]
1000db18:	021b      	lsls	r3, r3, #8
1000db1a:	4313      	orrs	r3, r2
1000db1c:	804b      	strh	r3, [r1, #2]
1000db1e:	7943      	ldrb	r3, [r0, #5]
1000db20:	7902      	ldrb	r2, [r0, #4]
1000db22:	021b      	lsls	r3, r3, #8
1000db24:	4313      	orrs	r3, r2
1000db26:	808b      	strh	r3, [r1, #4]
1000db28:	4770      	bx	lr
	...

1000db2c <gapm_reset_req_handler>:
1000db2c:	b573      	push	{r0, r1, r4, r5, r6, lr}
1000db2e:	466b      	mov	r3, sp
1000db30:	4915      	ldr	r1, [pc, #84]	; (1000db88 <gapm_reset_req_handler+0x5c>)
1000db32:	4816      	ldr	r0, [pc, #88]	; (1000db8c <gapm_reset_req_handler+0x60>)
1000db34:	880c      	ldrh	r4, [r1, #0]
1000db36:	8809      	ldrh	r1, [r1, #0]
1000db38:	1ddd      	adds	r5, r3, #7
1000db3a:	0a09      	lsrs	r1, r1, #8
1000db3c:	2300      	movs	r3, #0
1000db3e:	2202      	movs	r2, #2
1000db40:	7141      	strb	r1, [r0, #5]
1000db42:	26d0      	movs	r6, #208	; 0xd0
1000db44:	2101      	movs	r1, #1
1000db46:	7104      	strb	r4, [r0, #4]
1000db48:	4c11      	ldr	r4, [pc, #68]	; (1000db90 <gapm_reset_req_handler+0x64>)
1000db4a:	702b      	strb	r3, [r5, #0]
1000db4c:	7002      	strb	r2, [r0, #0]
1000db4e:	70c3      	strb	r3, [r0, #3]
1000db50:	320b      	adds	r2, #11
1000db52:	7201      	strb	r1, [r0, #8]
1000db54:	7181      	strb	r1, [r0, #6]
1000db56:	71c3      	strb	r3, [r0, #7]
1000db58:	3108      	adds	r1, #8
1000db5a:	4b0e      	ldr	r3, [pc, #56]	; (1000db94 <gapm_reset_req_handler+0x68>)
1000db5c:	0136      	lsls	r6, r6, #4
1000db5e:	7042      	strb	r2, [r0, #1]
1000db60:	7082      	strb	r2, [r0, #2]
1000db62:	80a2      	strh	r2, [r4, #4]
1000db64:	8026      	strh	r6, [r4, #0]
1000db66:	4798      	blx	r3
1000db68:	1c28      	adds	r0, r5, #0
1000db6a:	4b0b      	ldr	r3, [pc, #44]	; (1000db98 <gapm_reset_req_handler+0x6c>)
1000db6c:	4798      	blx	r3
1000db6e:	782b      	ldrb	r3, [r5, #0]
1000db70:	20e2      	movs	r0, #226	; 0xe2
1000db72:	2b00      	cmp	r3, #0
1000db74:	d106      	bne.n	1000db84 <gapm_reset_req_handler+0x58>
1000db76:	68a3      	ldr	r3, [r4, #8]
1000db78:	20e2      	movs	r0, #226	; 0xe2
1000db7a:	781a      	ldrb	r2, [r3, #0]
1000db7c:	785b      	ldrb	r3, [r3, #1]
1000db7e:	2a01      	cmp	r2, #1
1000db80:	d100      	bne.n	1000db84 <gapm_reset_req_handler+0x58>
1000db82:	1c18      	adds	r0, r3, #0
1000db84:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
1000db86:	46c0      	nop			; (mov r8, r8)
1000db88:	1001406c 	.word	0x1001406c
1000db8c:	100143dc 	.word	0x100143dc
1000db90:	10014060 	.word	0x10014060
1000db94:	1000cf55 	.word	0x1000cf55
1000db98:	1000cfb9 	.word	0x1000cfb9

1000db9c <gapm_set_dev_config_cmd_handler>:
1000db9c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000db9e:	b089      	sub	sp, #36	; 0x24
1000dba0:	9303      	str	r3, [sp, #12]
1000dba2:	ab0e      	add	r3, sp, #56	; 0x38
1000dba4:	781b      	ldrb	r3, [r3, #0]
1000dba6:	4c37      	ldr	r4, [pc, #220]	; (1000dc84 <gapm_set_dev_config_cmd_handler+0xe8>)
1000dba8:	9304      	str	r3, [sp, #16]
1000dbaa:	ab0f      	add	r3, sp, #60	; 0x3c
1000dbac:	781b      	ldrb	r3, [r3, #0]
1000dbae:	270d      	movs	r7, #13
1000dbb0:	9305      	str	r3, [sp, #20]
1000dbb2:	ab10      	add	r3, sp, #64	; 0x40
1000dbb4:	881b      	ldrh	r3, [r3, #0]
1000dbb6:	72a1      	strb	r1, [r4, #10]
1000dbb8:	9300      	str	r3, [sp, #0]
1000dbba:	ab11      	add	r3, sp, #68	; 0x44
1000dbbc:	881b      	ldrh	r3, [r3, #0]
1000dbbe:	0a09      	lsrs	r1, r1, #8
1000dbc0:	9301      	str	r3, [sp, #4]
1000dbc2:	ab12      	add	r3, sp, #72	; 0x48
1000dbc4:	881b      	ldrh	r3, [r3, #0]
1000dbc6:	7260      	strb	r0, [r4, #9]
1000dbc8:	9302      	str	r3, [sp, #8]
1000dbca:	ab06      	add	r3, sp, #24
1000dbcc:	1dde      	adds	r6, r3, #7
1000dbce:	2300      	movs	r3, #0
1000dbd0:	7033      	strb	r3, [r6, #0]
1000dbd2:	2304      	movs	r3, #4
1000dbd4:	7023      	strb	r3, [r4, #0]
1000dbd6:	2300      	movs	r3, #0
1000dbd8:	70e3      	strb	r3, [r4, #3]
1000dbda:	4b2b      	ldr	r3, [pc, #172]	; (1000dc88 <gapm_set_dev_config_cmd_handler+0xec>)
1000dbdc:	72e1      	strb	r1, [r4, #11]
1000dbde:	881d      	ldrh	r5, [r3, #0]
1000dbe0:	881b      	ldrh	r3, [r3, #0]
1000dbe2:	1c11      	adds	r1, r2, #0
1000dbe4:	0a1b      	lsrs	r3, r3, #8
1000dbe6:	7163      	strb	r3, [r4, #5]
1000dbe8:	2303      	movs	r3, #3
1000dbea:	7125      	strb	r5, [r4, #4]
1000dbec:	2206      	movs	r2, #6
1000dbee:	4d27      	ldr	r5, [pc, #156]	; (1000dc8c <gapm_set_dev_config_cmd_handler+0xf0>)
1000dbf0:	4827      	ldr	r0, [pc, #156]	; (1000dc90 <gapm_set_dev_config_cmd_handler+0xf4>)
1000dbf2:	7223      	strb	r3, [r4, #8]
1000dbf4:	7067      	strb	r7, [r4, #1]
1000dbf6:	70a7      	strb	r7, [r4, #2]
1000dbf8:	47a8      	blx	r5
1000dbfa:	9903      	ldr	r1, [sp, #12]
1000dbfc:	2210      	movs	r2, #16
1000dbfe:	4825      	ldr	r0, [pc, #148]	; (1000dc94 <gapm_set_dev_config_cmd_handler+0xf8>)
1000dc00:	47a8      	blx	r5
1000dc02:	466a      	mov	r2, sp
1000dc04:	7c12      	ldrb	r2, [r2, #16]
1000dc06:	1ce3      	adds	r3, r4, #3
1000dc08:	77da      	strb	r2, [r3, #31]
1000dc0a:	466a      	mov	r2, sp
1000dc0c:	7d12      	ldrb	r2, [r2, #20]
1000dc0e:	1d23      	adds	r3, r4, #4
1000dc10:	77da      	strb	r2, [r3, #31]
1000dc12:	466a      	mov	r2, sp
1000dc14:	7812      	ldrb	r2, [r2, #0]
1000dc16:	1d63      	adds	r3, r4, #5
1000dc18:	77da      	strb	r2, [r3, #31]
1000dc1a:	9b00      	ldr	r3, [sp, #0]
1000dc1c:	1da2      	adds	r2, r4, #6
1000dc1e:	0a1b      	lsrs	r3, r3, #8
1000dc20:	77d3      	strb	r3, [r2, #31]
1000dc22:	466a      	mov	r2, sp
1000dc24:	7912      	ldrb	r2, [r2, #4]
1000dc26:	1de3      	adds	r3, r4, #7
1000dc28:	77da      	strb	r2, [r3, #31]
1000dc2a:	1c22      	adds	r2, r4, #0
1000dc2c:	9b01      	ldr	r3, [sp, #4]
1000dc2e:	3208      	adds	r2, #8
1000dc30:	0a1b      	lsrs	r3, r3, #8
1000dc32:	77d3      	strb	r3, [r2, #31]
1000dc34:	466a      	mov	r2, sp
1000dc36:	1c23      	adds	r3, r4, #0
1000dc38:	7a12      	ldrb	r2, [r2, #8]
1000dc3a:	3328      	adds	r3, #40	; 0x28
1000dc3c:	701a      	strb	r2, [r3, #0]
1000dc3e:	1c22      	adds	r2, r4, #0
1000dc40:	9b02      	ldr	r3, [sp, #8]
1000dc42:	3229      	adds	r2, #41	; 0x29
1000dc44:	0a1b      	lsrs	r3, r3, #8
1000dc46:	7013      	strb	r3, [r2, #0]
1000dc48:	23d0      	movs	r3, #208	; 0xd0
1000dc4a:	4d13      	ldr	r5, [pc, #76]	; (1000dc98 <gapm_set_dev_config_cmd_handler+0xfc>)
1000dc4c:	011b      	lsls	r3, r3, #4
1000dc4e:	802b      	strh	r3, [r5, #0]
1000dc50:	2322      	movs	r3, #34	; 0x22
1000dc52:	71a3      	strb	r3, [r4, #6]
1000dc54:	2300      	movs	r3, #0
1000dc56:	212a      	movs	r1, #42	; 0x2a
1000dc58:	71e3      	strb	r3, [r4, #7]
1000dc5a:	1c20      	adds	r0, r4, #0
1000dc5c:	4b0f      	ldr	r3, [pc, #60]	; (1000dc9c <gapm_set_dev_config_cmd_handler+0x100>)
1000dc5e:	80af      	strh	r7, [r5, #4]
1000dc60:	4798      	blx	r3
1000dc62:	1c30      	adds	r0, r6, #0
1000dc64:	4b0e      	ldr	r3, [pc, #56]	; (1000dca0 <gapm_set_dev_config_cmd_handler+0x104>)
1000dc66:	4798      	blx	r3
1000dc68:	7833      	ldrb	r3, [r6, #0]
1000dc6a:	20e2      	movs	r0, #226	; 0xe2
1000dc6c:	2b00      	cmp	r3, #0
1000dc6e:	d106      	bne.n	1000dc7e <gapm_set_dev_config_cmd_handler+0xe2>
1000dc70:	68ab      	ldr	r3, [r5, #8]
1000dc72:	20e2      	movs	r0, #226	; 0xe2
1000dc74:	781a      	ldrb	r2, [r3, #0]
1000dc76:	785b      	ldrb	r3, [r3, #1]
1000dc78:	2a03      	cmp	r2, #3
1000dc7a:	d100      	bne.n	1000dc7e <gapm_set_dev_config_cmd_handler+0xe2>
1000dc7c:	1c18      	adds	r0, r3, #0
1000dc7e:	b009      	add	sp, #36	; 0x24
1000dc80:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000dc82:	46c0      	nop			; (mov r8, r8)
1000dc84:	100143dc 	.word	0x100143dc
1000dc88:	1001406c 	.word	0x1001406c
1000dc8c:	1000f6c3 	.word	0x1000f6c3
1000dc90:	100143e8 	.word	0x100143e8
1000dc94:	100143ee 	.word	0x100143ee
1000dc98:	10014060 	.word	0x10014060
1000dc9c:	1000cf55 	.word	0x1000cf55
1000dca0:	1000cfb9 	.word	0x1000cfb9

1000dca4 <gapm_get_dev_config_cmd_handler>:
1000dca4:	4684      	mov	ip, r0
1000dca6:	4663      	mov	r3, ip
1000dca8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000dcaa:	b085      	sub	sp, #20
1000dcac:	9100      	str	r1, [sp, #0]
1000dcae:	20cf      	movs	r0, #207	; 0xcf
1000dcb0:	2b01      	cmp	r3, #1
1000dcb2:	d854      	bhi.n	1000dd5e <gapm_get_dev_config_cmd_handler+0xba>
1000dcb4:	2900      	cmp	r1, #0
1000dcb6:	d052      	beq.n	1000dd5e <gapm_get_dev_config_cmd_handler+0xba>
1000dcb8:	2200      	movs	r2, #0
1000dcba:	492a      	ldr	r1, [pc, #168]	; (1000dd64 <gapm_get_dev_config_cmd_handler+0xc0>)
1000dcbc:	ab02      	add	r3, sp, #8
1000dcbe:	880c      	ldrh	r4, [r1, #0]
1000dcc0:	8809      	ldrh	r1, [r1, #0]
1000dcc2:	1d9f      	adds	r7, r3, #6
1000dcc4:	719a      	strb	r2, [r3, #6]
1000dcc6:	4b28      	ldr	r3, [pc, #160]	; (1000dd68 <gapm_get_dev_config_cmd_handler+0xc4>)
1000dcc8:	0a09      	lsrs	r1, r1, #8
1000dcca:	250d      	movs	r5, #13
1000dccc:	2606      	movs	r6, #6
1000dcce:	7159      	strb	r1, [r3, #5]
1000dcd0:	4661      	mov	r1, ip
1000dcd2:	701e      	strb	r6, [r3, #0]
1000dcd4:	705d      	strb	r5, [r3, #1]
1000dcd6:	709d      	strb	r5, [r3, #2]
1000dcd8:	70da      	strb	r2, [r3, #3]
1000dcda:	711c      	strb	r4, [r3, #4]
1000dcdc:	2901      	cmp	r1, #1
1000dcde:	d13e      	bne.n	1000dd5e <gapm_get_dev_config_cmd_handler+0xba>
1000dce0:	21d0      	movs	r1, #208	; 0xd0
1000dce2:	4c22      	ldr	r4, [pc, #136]	; (1000dd6c <gapm_get_dev_config_cmd_handler+0xc8>)
1000dce4:	0109      	lsls	r1, r1, #4
1000dce6:	8061      	strh	r1, [r4, #2]
1000dce8:	4921      	ldr	r1, [pc, #132]	; (1000dd70 <gapm_get_dev_config_cmd_handler+0xcc>)
1000dcea:	71da      	strb	r2, [r3, #7]
1000dcec:	8021      	strh	r1, [r4, #0]
1000dcee:	4661      	mov	r1, ip
1000dcf0:	721e      	strb	r6, [r3, #8]
1000dcf2:	7199      	strb	r1, [r3, #6]
1000dcf4:	1c18      	adds	r0, r3, #0
1000dcf6:	2109      	movs	r1, #9
1000dcf8:	4b1e      	ldr	r3, [pc, #120]	; (1000dd74 <gapm_get_dev_config_cmd_handler+0xd0>)
1000dcfa:	80a5      	strh	r5, [r4, #4]
1000dcfc:	4798      	blx	r3
1000dcfe:	1c38      	adds	r0, r7, #0
1000dd00:	4b1d      	ldr	r3, [pc, #116]	; (1000dd78 <gapm_get_dev_config_cmd_handler+0xd4>)
1000dd02:	4798      	blx	r3
1000dd04:	783b      	ldrb	r3, [r7, #0]
1000dd06:	20e2      	movs	r0, #226	; 0xe2
1000dd08:	9301      	str	r3, [sp, #4]
1000dd0a:	2b00      	cmp	r3, #0
1000dd0c:	d127      	bne.n	1000dd5e <gapm_get_dev_config_cmd_handler+0xba>
1000dd0e:	8821      	ldrh	r1, [r4, #0]
1000dd10:	4a1a      	ldr	r2, [pc, #104]	; (1000dd7c <gapm_get_dev_config_cmd_handler+0xd8>)
1000dd12:	68a7      	ldr	r7, [r4, #8]
1000dd14:	3b01      	subs	r3, #1
1000dd16:	4291      	cmp	r1, r2
1000dd18:	d001      	beq.n	1000dd1e <gapm_get_dev_config_cmd_handler+0x7a>
1000dd1a:	8023      	strh	r3, [r4, #0]
1000dd1c:	e01a      	b.n	1000dd54 <gapm_get_dev_config_cmd_handler+0xb0>
1000dd1e:	8063      	strh	r3, [r4, #2]
1000dd20:	9b00      	ldr	r3, [sp, #0]
1000dd22:	1c39      	adds	r1, r7, #0
1000dd24:	1c58      	adds	r0, r3, #1
1000dd26:	1c32      	adds	r2, r6, #0
1000dd28:	4b15      	ldr	r3, [pc, #84]	; (1000dd80 <gapm_get_dev_config_cmd_handler+0xdc>)
1000dd2a:	4798      	blx	r3
1000dd2c:	79bb      	ldrb	r3, [r7, #6]
1000dd2e:	9a00      	ldr	r2, [sp, #0]
1000dd30:	7013      	strb	r3, [r2, #0]
1000dd32:	23d0      	movs	r3, #208	; 0xd0
1000dd34:	011b      	lsls	r3, r3, #4
1000dd36:	8023      	strh	r3, [r4, #0]
1000dd38:	ab02      	add	r3, sp, #8
1000dd3a:	80a5      	strh	r5, [r4, #4]
1000dd3c:	1ddd      	adds	r5, r3, #7
1000dd3e:	466b      	mov	r3, sp
1000dd40:	791b      	ldrb	r3, [r3, #4]
1000dd42:	1c28      	adds	r0, r5, #0
1000dd44:	702b      	strb	r3, [r5, #0]
1000dd46:	4b0c      	ldr	r3, [pc, #48]	; (1000dd78 <gapm_get_dev_config_cmd_handler+0xd4>)
1000dd48:	4798      	blx	r3
1000dd4a:	782b      	ldrb	r3, [r5, #0]
1000dd4c:	20d0      	movs	r0, #208	; 0xd0
1000dd4e:	2b00      	cmp	r3, #0
1000dd50:	d105      	bne.n	1000dd5e <gapm_get_dev_config_cmd_handler+0xba>
1000dd52:	68a7      	ldr	r7, [r4, #8]
1000dd54:	783b      	ldrb	r3, [r7, #0]
1000dd56:	7878      	ldrb	r0, [r7, #1]
1000dd58:	2b06      	cmp	r3, #6
1000dd5a:	d000      	beq.n	1000dd5e <gapm_get_dev_config_cmd_handler+0xba>
1000dd5c:	20e2      	movs	r0, #226	; 0xe2
1000dd5e:	b005      	add	sp, #20
1000dd60:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000dd62:	46c0      	nop			; (mov r8, r8)
1000dd64:	1001406c 	.word	0x1001406c
1000dd68:	100143dc 	.word	0x100143dc
1000dd6c:	10014060 	.word	0x10014060
1000dd70:	00000d08 	.word	0x00000d08
1000dd74:	1000cf55 	.word	0x1000cf55
1000dd78:	1000cfb9 	.word	0x1000cfb9
1000dd7c:	0000ffff 	.word	0x0000ffff
1000dd80:	1000f6c3 	.word	0x1000f6c3

1000dd84 <gapm_cancel_cmd_handler>:
1000dd84:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000dd86:	4916      	ldr	r1, [pc, #88]	; (1000dde0 <gapm_cancel_cmd_handler+0x5c>)
1000dd88:	4816      	ldr	r0, [pc, #88]	; (1000dde4 <gapm_cancel_cmd_handler+0x60>)
1000dd8a:	880c      	ldrh	r4, [r1, #0]
1000dd8c:	8809      	ldrh	r1, [r1, #0]
1000dd8e:	466b      	mov	r3, sp
1000dd90:	0a09      	lsrs	r1, r1, #8
1000dd92:	7141      	strb	r1, [r0, #5]
1000dd94:	2102      	movs	r1, #2
1000dd96:	2203      	movs	r2, #3
1000dd98:	7201      	strb	r1, [r0, #8]
1000dd9a:	21d0      	movs	r1, #208	; 0xd0
1000dd9c:	1ddd      	adds	r5, r3, #7
1000dd9e:	2300      	movs	r3, #0
1000dda0:	7104      	strb	r4, [r0, #4]
1000dda2:	4c11      	ldr	r4, [pc, #68]	; (1000dde8 <gapm_cancel_cmd_handler+0x64>)
1000dda4:	7002      	strb	r2, [r0, #0]
1000dda6:	0109      	lsls	r1, r1, #4
1000dda8:	320a      	adds	r2, #10
1000ddaa:	702b      	strb	r3, [r5, #0]
1000ddac:	7042      	strb	r2, [r0, #1]
1000ddae:	7082      	strb	r2, [r0, #2]
1000ddb0:	70c3      	strb	r3, [r0, #3]
1000ddb2:	8021      	strh	r1, [r4, #0]
1000ddb4:	80a2      	strh	r2, [r4, #4]
1000ddb6:	71c3      	strb	r3, [r0, #7]
1000ddb8:	3a0c      	subs	r2, #12
1000ddba:	2109      	movs	r1, #9
1000ddbc:	4b0b      	ldr	r3, [pc, #44]	; (1000ddec <gapm_cancel_cmd_handler+0x68>)
1000ddbe:	7182      	strb	r2, [r0, #6]
1000ddc0:	4798      	blx	r3
1000ddc2:	1c28      	adds	r0, r5, #0
1000ddc4:	4b0a      	ldr	r3, [pc, #40]	; (1000ddf0 <gapm_cancel_cmd_handler+0x6c>)
1000ddc6:	4798      	blx	r3
1000ddc8:	7828      	ldrb	r0, [r5, #0]
1000ddca:	2800      	cmp	r0, #0
1000ddcc:	d001      	beq.n	1000ddd2 <gapm_cancel_cmd_handler+0x4e>
1000ddce:	20e2      	movs	r0, #226	; 0xe2
1000ddd0:	e004      	b.n	1000dddc <gapm_cancel_cmd_handler+0x58>
1000ddd2:	68a3      	ldr	r3, [r4, #8]
1000ddd4:	785b      	ldrb	r3, [r3, #1]
1000ddd6:	2b44      	cmp	r3, #68	; 0x44
1000ddd8:	d000      	beq.n	1000dddc <gapm_cancel_cmd_handler+0x58>
1000ddda:	1c18      	adds	r0, r3, #0
1000dddc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000ddde:	46c0      	nop			; (mov r8, r8)
1000dde0:	1001406c 	.word	0x1001406c
1000dde4:	100143dc 	.word	0x100143dc
1000dde8:	10014060 	.word	0x10014060
1000ddec:	1000cf55 	.word	0x1000cf55
1000ddf0:	1000cfb9 	.word	0x1000cfb9

1000ddf4 <gapm_dev_bdaddr_ind_handler>:
1000ddf4:	b538      	push	{r3, r4, r5, lr}
1000ddf6:	1c05      	adds	r5, r0, #0
1000ddf8:	1c0c      	adds	r4, r1, #0
1000ddfa:	1c48      	adds	r0, r1, #1
1000ddfc:	2206      	movs	r2, #6
1000ddfe:	1c29      	adds	r1, r5, #0
1000de00:	4b02      	ldr	r3, [pc, #8]	; (1000de0c <gapm_dev_bdaddr_ind_handler+0x18>)
1000de02:	4798      	blx	r3
1000de04:	79ab      	ldrb	r3, [r5, #6]
1000de06:	2000      	movs	r0, #0
1000de08:	7023      	strb	r3, [r4, #0]
1000de0a:	bd38      	pop	{r3, r4, r5, pc}
1000de0c:	1000f6c3 	.word	0x1000f6c3

1000de10 <gapm_cmp_evt>:
1000de10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000de12:	7803      	ldrb	r3, [r0, #0]
1000de14:	7845      	ldrb	r5, [r0, #1]
1000de16:	3b0c      	subs	r3, #12
1000de18:	1e18      	subs	r0, r3, #0
1000de1a:	280b      	cmp	r0, #11
1000de1c:	d900      	bls.n	1000de20 <gapm_cmp_evt+0x10>
1000de1e:	e08d      	b.n	1000df3c <gapm_cmp_evt+0x12c>
1000de20:	1c0c      	adds	r4, r1, #0
1000de22:	f000 fbbf 	bl	1000e5a4 <__gnu_thumb1_case_uqi>
1000de26:	1952      	.short	0x1952
1000de28:	068b1919 	.word	0x068b1919
1000de2c:	8b595906 	.word	0x8b595906
1000de30:	0d8b      	.short	0x0d8b
1000de32:	2300      	movs	r3, #0
1000de34:	2d45      	cmp	r5, #69	; 0x45
1000de36:	d000      	beq.n	1000de3a <gapm_cmp_evt+0x2a>
1000de38:	1c2b      	adds	r3, r5, #0
1000de3a:	7023      	strb	r3, [r4, #0]
1000de3c:	2002      	movs	r0, #2
1000de3e:	e07e      	b.n	1000df3e <gapm_cmp_evt+0x12e>
1000de40:	203b      	movs	r0, #59	; 0x3b
1000de42:	2d00      	cmp	r5, #0
1000de44:	d100      	bne.n	1000de48 <gapm_cmp_evt+0x38>
1000de46:	e07a      	b.n	1000df3e <gapm_cmp_evt+0x12e>
1000de48:	700d      	strb	r5, [r1, #0]
1000de4a:	1c48      	adds	r0, r1, #1
1000de4c:	2210      	movs	r2, #16
1000de4e:	2100      	movs	r1, #0
1000de50:	4b3b      	ldr	r3, [pc, #236]	; (1000df40 <gapm_cmp_evt+0x130>)
1000de52:	4798      	blx	r3
1000de54:	200f      	movs	r0, #15
1000de56:	e072      	b.n	1000df3e <gapm_cmp_evt+0x12e>
1000de58:	2d00      	cmp	r5, #0
1000de5a:	d134      	bne.n	1000dec6 <gapm_cmp_evt+0xb6>
1000de5c:	4b39      	ldr	r3, [pc, #228]	; (1000df44 <gapm_cmp_evt+0x134>)
1000de5e:	4798      	blx	r3
1000de60:	1e43      	subs	r3, r0, #1
1000de62:	b2db      	uxtb	r3, r3
1000de64:	1c28      	adds	r0, r5, #0
1000de66:	2b06      	cmp	r3, #6
1000de68:	d869      	bhi.n	1000df3e <gapm_cmp_evt+0x12e>
1000de6a:	466b      	mov	r3, sp
1000de6c:	4e36      	ldr	r6, [pc, #216]	; (1000df48 <gapm_cmp_evt+0x138>)
1000de6e:	1dd9      	adds	r1, r3, #7
1000de70:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
1000de72:	4b36      	ldr	r3, [pc, #216]	; (1000df4c <gapm_cmp_evt+0x13c>)
1000de74:	4798      	blx	r3
1000de76:	2312      	movs	r3, #18
1000de78:	4358      	muls	r0, r3
1000de7a:	4935      	ldr	r1, [pc, #212]	; (1000df50 <gapm_cmp_evt+0x140>)
1000de7c:	1809      	adds	r1, r1, r0
1000de7e:	1c0b      	adds	r3, r1, #0
1000de80:	894a      	ldrh	r2, [r1, #10]
1000de82:	3308      	adds	r3, #8
1000de84:	8122      	strh	r2, [r4, #8]
1000de86:	784f      	ldrb	r7, [r1, #1]
1000de88:	72a5      	strb	r5, [r4, #10]
1000de8a:	7027      	strb	r7, [r4, #0]
1000de8c:	898a      	ldrh	r2, [r1, #12]
1000de8e:	1c60      	adds	r0, r4, #1
1000de90:	81a2      	strh	r2, [r4, #12]
1000de92:	88db      	ldrh	r3, [r3, #6]
1000de94:	3102      	adds	r1, #2
1000de96:	81e3      	strh	r3, [r4, #14]
1000de98:	89cb      	ldrh	r3, [r1, #14]
1000de9a:	2206      	movs	r2, #6
1000de9c:	8223      	strh	r3, [r4, #16]
1000de9e:	4b2d      	ldr	r3, [pc, #180]	; (1000df54 <gapm_cmp_evt+0x144>)
1000dea0:	4798      	blx	r3
1000dea2:	2f00      	cmp	r7, #0
1000dea4:	d00a      	beq.n	1000debc <gapm_cmp_evt+0xac>
1000dea6:	79a3      	ldrb	r3, [r4, #6]
1000dea8:	223f      	movs	r2, #63	; 0x3f
1000deaa:	1c19      	adds	r1, r3, #0
1000deac:	3501      	adds	r5, #1
1000deae:	4391      	bics	r1, r2
1000deb0:	29c0      	cmp	r1, #192	; 0xc0
1000deb2:	d003      	beq.n	1000debc <gapm_cmp_evt+0xac>
1000deb4:	065b      	lsls	r3, r3, #25
1000deb6:	0fdb      	lsrs	r3, r3, #31
1000deb8:	3502      	adds	r5, #2
1000deba:	1aed      	subs	r5, r5, r3
1000debc:	2301      	movs	r3, #1
1000debe:	425b      	negs	r3, r3
1000dec0:	7025      	strb	r5, [r4, #0]
1000dec2:	85b3      	strh	r3, [r6, #44]	; 0x2c
1000dec4:	e038      	b.n	1000df38 <gapm_cmp_evt+0x128>
1000dec6:	700d      	strb	r5, [r1, #0]
1000dec8:	e004      	b.n	1000ded4 <gapm_cmp_evt+0xc4>
1000deca:	2300      	movs	r3, #0
1000decc:	2d45      	cmp	r5, #69	; 0x45
1000dece:	d000      	beq.n	1000ded2 <gapm_cmp_evt+0xc2>
1000ded0:	1c2b      	adds	r3, r5, #0
1000ded2:	7023      	strb	r3, [r4, #0]
1000ded4:	2003      	movs	r0, #3
1000ded6:	e032      	b.n	1000df3e <gapm_cmp_evt+0x12e>
1000ded8:	4e1b      	ldr	r6, [pc, #108]	; (1000df48 <gapm_cmp_evt+0x138>)
1000deda:	2100      	movs	r1, #0
1000dedc:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
1000dede:	4b1b      	ldr	r3, [pc, #108]	; (1000df4c <gapm_cmp_evt+0x13c>)
1000dee0:	4798      	blx	r3
1000dee2:	2807      	cmp	r0, #7
1000dee4:	d818      	bhi.n	1000df18 <gapm_cmp_evt+0x108>
1000dee6:	2301      	movs	r3, #1
1000dee8:	425b      	negs	r3, r3
1000deea:	85b3      	strh	r3, [r6, #44]	; 0x2c
1000deec:	3313      	adds	r3, #19
1000deee:	4358      	muls	r0, r3
1000def0:	4917      	ldr	r1, [pc, #92]	; (1000df50 <gapm_cmp_evt+0x140>)
1000def2:	1809      	adds	r1, r1, r0
1000def4:	1c0b      	adds	r3, r1, #0
1000def6:	894a      	ldrh	r2, [r1, #10]
1000def8:	3308      	adds	r3, #8
1000defa:	8122      	strh	r2, [r4, #8]
1000defc:	784a      	ldrb	r2, [r1, #1]
1000defe:	72a5      	strb	r5, [r4, #10]
1000df00:	7022      	strb	r2, [r4, #0]
1000df02:	898a      	ldrh	r2, [r1, #12]
1000df04:	1c60      	adds	r0, r4, #1
1000df06:	81a2      	strh	r2, [r4, #12]
1000df08:	88db      	ldrh	r3, [r3, #6]
1000df0a:	3102      	adds	r1, #2
1000df0c:	81e3      	strh	r3, [r4, #14]
1000df0e:	89cb      	ldrh	r3, [r1, #14]
1000df10:	2206      	movs	r2, #6
1000df12:	8223      	strh	r3, [r4, #16]
1000df14:	4b0f      	ldr	r3, [pc, #60]	; (1000df54 <gapm_cmp_evt+0x144>)
1000df16:	4798      	blx	r3
1000df18:	2200      	movs	r2, #0
1000df1a:	7823      	ldrb	r3, [r4, #0]
1000df1c:	4293      	cmp	r3, r2
1000df1e:	d00a      	beq.n	1000df36 <gapm_cmp_evt+0x126>
1000df20:	79a3      	ldrb	r3, [r4, #6]
1000df22:	323f      	adds	r2, #63	; 0x3f
1000df24:	1c19      	adds	r1, r3, #0
1000df26:	4391      	bics	r1, r2
1000df28:	3a3e      	subs	r2, #62	; 0x3e
1000df2a:	29c0      	cmp	r1, #192	; 0xc0
1000df2c:	d003      	beq.n	1000df36 <gapm_cmp_evt+0x126>
1000df2e:	065b      	lsls	r3, r3, #25
1000df30:	0fdb      	lsrs	r3, r3, #31
1000df32:	3202      	adds	r2, #2
1000df34:	1ad2      	subs	r2, r2, r3
1000df36:	7022      	strb	r2, [r4, #0]
1000df38:	2005      	movs	r0, #5
1000df3a:	e000      	b.n	1000df3e <gapm_cmp_evt+0x12e>
1000df3c:	2000      	movs	r0, #0
1000df3e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000df40:	1000f6d5 	.word	0x1000f6d5
1000df44:	1000d161 	.word	0x1000d161
1000df48:	100140fe 	.word	0x100140fe
1000df4c:	1000d125 	.word	0x1000d125
1000df50:	1001406e 	.word	0x1001406e
1000df54:	1000f6c3 	.word	0x1000f6c3

1000df58 <gapm_adv_report_evt_handler>:
1000df58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000df5a:	7843      	ldrb	r3, [r0, #1]
1000df5c:	1c05      	adds	r5, r0, #0
1000df5e:	9301      	str	r3, [sp, #4]
1000df60:	466b      	mov	r3, sp
1000df62:	1c0c      	adds	r4, r1, #0
1000df64:	791b      	ldrb	r3, [r3, #4]
1000df66:	7806      	ldrb	r6, [r0, #0]
1000df68:	2206      	movs	r2, #6
1000df6a:	704b      	strb	r3, [r1, #1]
1000df6c:	1c88      	adds	r0, r1, #2
1000df6e:	4f1b      	ldr	r7, [pc, #108]	; (1000dfdc <gapm_adv_report_evt_handler+0x84>)
1000df70:	1ca9      	adds	r1, r5, #2
1000df72:	47b8      	blx	r7
1000df74:	1c20      	adds	r0, r4, #0
1000df76:	1c29      	adds	r1, r5, #0
1000df78:	7a2a      	ldrb	r2, [r5, #8]
1000df7a:	3008      	adds	r0, #8
1000df7c:	77c2      	strb	r2, [r0, #31]
1000df7e:	3109      	adds	r1, #9
1000df80:	3528      	adds	r5, #40	; 0x28
1000df82:	47b8      	blx	r7
1000df84:	782b      	ldrb	r3, [r5, #0]
1000df86:	b25a      	sxtb	r2, r3
1000df88:	2a00      	cmp	r2, #0
1000df8a:	da01      	bge.n	1000df90 <gapm_adv_report_evt_handler+0x38>
1000df8c:	3301      	adds	r3, #1
1000df8e:	b2db      	uxtb	r3, r3
1000df90:	1c22      	adds	r2, r4, #0
1000df92:	3228      	adds	r2, #40	; 0x28
1000df94:	7013      	strb	r3, [r2, #0]
1000df96:	2200      	movs	r2, #0
1000df98:	9b01      	ldr	r3, [sp, #4]
1000df9a:	4293      	cmp	r3, r2
1000df9c:	d00a      	beq.n	1000dfb4 <gapm_adv_report_evt_handler+0x5c>
1000df9e:	79e3      	ldrb	r3, [r4, #7]
1000dfa0:	323f      	adds	r2, #63	; 0x3f
1000dfa2:	1c19      	adds	r1, r3, #0
1000dfa4:	4391      	bics	r1, r2
1000dfa6:	3a3e      	subs	r2, #62	; 0x3e
1000dfa8:	29c0      	cmp	r1, #192	; 0xc0
1000dfaa:	d003      	beq.n	1000dfb4 <gapm_adv_report_evt_handler+0x5c>
1000dfac:	065b      	lsls	r3, r3, #25
1000dfae:	0fdb      	lsrs	r3, r3, #31
1000dfb0:	3202      	adds	r2, #2
1000dfb2:	1ad2      	subs	r2, r2, r3
1000dfb4:	7062      	strb	r2, [r4, #1]
1000dfb6:	2e04      	cmp	r6, #4
1000dfb8:	d80f      	bhi.n	1000dfda <gapm_adv_report_evt_handler+0x82>
1000dfba:	1c30      	adds	r0, r6, #0
1000dfbc:	f000 faf2 	bl	1000e5a4 <__gnu_thumb1_case_uqi>
1000dfc0:	09070503 	.word	0x09070503
1000dfc4:	0b          	.byte	0x0b
1000dfc5:	00          	.byte	0x00
1000dfc6:	2300      	movs	r3, #0
1000dfc8:	e006      	b.n	1000dfd8 <gapm_adv_report_evt_handler+0x80>
1000dfca:	2301      	movs	r3, #1
1000dfcc:	e004      	b.n	1000dfd8 <gapm_adv_report_evt_handler+0x80>
1000dfce:	2302      	movs	r3, #2
1000dfd0:	e002      	b.n	1000dfd8 <gapm_adv_report_evt_handler+0x80>
1000dfd2:	2303      	movs	r3, #3
1000dfd4:	e000      	b.n	1000dfd8 <gapm_adv_report_evt_handler+0x80>
1000dfd6:	2305      	movs	r3, #5
1000dfd8:	7023      	strb	r3, [r4, #0]
1000dfda:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000dfdc:	1000f6c3 	.word	0x1000f6c3

1000dfe0 <gapm_resolv_addr_cmd_handler>:
1000dfe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000dfe2:	2314      	movs	r3, #20
1000dfe4:	4c12      	ldr	r4, [pc, #72]	; (1000e030 <gapm_resolv_addr_cmd_handler+0x50>)
1000dfe6:	1c17      	adds	r7, r2, #0
1000dfe8:	7023      	strb	r3, [r4, #0]
1000dfea:	3b07      	subs	r3, #7
1000dfec:	7063      	strb	r3, [r4, #1]
1000dfee:	70a3      	strb	r3, [r4, #2]
1000dff0:	2300      	movs	r3, #0
1000dff2:	70e3      	strb	r3, [r4, #3]
1000dff4:	4b0f      	ldr	r3, [pc, #60]	; (1000e034 <gapm_resolv_addr_cmd_handler+0x54>)
1000dff6:	1c05      	adds	r5, r0, #0
1000dff8:	881a      	ldrh	r2, [r3, #0]
1000dffa:	881b      	ldrh	r3, [r3, #0]
1000dffc:	4e0e      	ldr	r6, [pc, #56]	; (1000e038 <gapm_resolv_addr_cmd_handler+0x58>)
1000dffe:	0a1b      	lsrs	r3, r3, #8
1000e000:	7163      	strb	r3, [r4, #5]
1000e002:	2317      	movs	r3, #23
1000e004:	012d      	lsls	r5, r5, #4
1000e006:	7122      	strb	r2, [r4, #4]
1000e008:	7260      	strb	r0, [r4, #9]
1000e00a:	2206      	movs	r2, #6
1000e00c:	480b      	ldr	r0, [pc, #44]	; (1000e03c <gapm_resolv_addr_cmd_handler+0x5c>)
1000e00e:	7223      	strb	r3, [r4, #8]
1000e010:	47b0      	blx	r6
1000e012:	1c39      	adds	r1, r7, #0
1000e014:	1c2a      	adds	r2, r5, #0
1000e016:	480a      	ldr	r0, [pc, #40]	; (1000e040 <gapm_resolv_addr_cmd_handler+0x60>)
1000e018:	47b0      	blx	r6
1000e01a:	1c29      	adds	r1, r5, #0
1000e01c:	3110      	adds	r1, #16
1000e01e:	1c0b      	adds	r3, r1, #0
1000e020:	3b08      	subs	r3, #8
1000e022:	71a3      	strb	r3, [r4, #6]
1000e024:	121b      	asrs	r3, r3, #8
1000e026:	71e3      	strb	r3, [r4, #7]
1000e028:	1c20      	adds	r0, r4, #0
1000e02a:	4b06      	ldr	r3, [pc, #24]	; (1000e044 <gapm_resolv_addr_cmd_handler+0x64>)
1000e02c:	4798      	blx	r3
1000e02e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000e030:	100143dc 	.word	0x100143dc
1000e034:	1001406c 	.word	0x1001406c
1000e038:	1000f6c3 	.word	0x1000f6c3
1000e03c:	100143e6 	.word	0x100143e6
1000e040:	100143ec 	.word	0x100143ec
1000e044:	1000cf55 	.word	0x1000cf55

1000e048 <gapm_addr_solved_ind_handler>:
1000e048:	b570      	push	{r4, r5, r6, lr}
1000e04a:	1c04      	adds	r4, r0, #0
1000e04c:	1c08      	adds	r0, r1, #0
1000e04e:	1c0d      	adds	r5, r1, #0
1000e050:	4e05      	ldr	r6, [pc, #20]	; (1000e068 <gapm_addr_solved_ind_handler+0x20>)
1000e052:	1c21      	adds	r1, r4, #0
1000e054:	2206      	movs	r2, #6
1000e056:	3011      	adds	r0, #17
1000e058:	47b0      	blx	r6
1000e05a:	1c68      	adds	r0, r5, #1
1000e05c:	1da1      	adds	r1, r4, #6
1000e05e:	2210      	movs	r2, #16
1000e060:	47b0      	blx	r6
1000e062:	2300      	movs	r3, #0
1000e064:	702b      	strb	r3, [r5, #0]
1000e066:	bd70      	pop	{r4, r5, r6, pc}
1000e068:	1000f6c3 	.word	0x1000f6c3

1000e06c <gapm_profile_added_ind_handler>:
1000e06c:	b510      	push	{r4, lr}
1000e06e:	7843      	ldrb	r3, [r0, #1]
1000e070:	7902      	ldrb	r2, [r0, #4]
1000e072:	7944      	ldrb	r4, [r0, #5]
1000e074:	7800      	ldrb	r0, [r0, #0]
1000e076:	021b      	lsls	r3, r3, #8
1000e078:	4303      	orrs	r3, r0
1000e07a:	2b1b      	cmp	r3, #27
1000e07c:	d104      	bne.n	1000e088 <gapm_profile_added_ind_handler+0x1c>
1000e07e:	2300      	movs	r3, #0
1000e080:	700b      	strb	r3, [r1, #0]
1000e082:	0223      	lsls	r3, r4, #8
1000e084:	4313      	orrs	r3, r2
1000e086:	804b      	strh	r3, [r1, #2]
1000e088:	203b      	movs	r0, #59	; 0x3b
1000e08a:	bd10      	pop	{r4, pc}

1000e08c <gattc_read_req_ind_parser>:
1000e08c:	7843      	ldrb	r3, [r0, #1]
1000e08e:	7802      	ldrb	r2, [r0, #0]
1000e090:	021b      	lsls	r3, r3, #8
1000e092:	4313      	orrs	r3, r2
1000e094:	804b      	strh	r3, [r1, #2]
1000e096:	4770      	bx	lr

1000e098 <gattc_write_req_ind_parser>:
1000e098:	b508      	push	{r3, lr}
1000e09a:	1c13      	adds	r3, r2, #0
1000e09c:	0a00      	lsrs	r0, r0, #8
1000e09e:	8010      	strh	r0, [r2, #0]
1000e0a0:	784a      	ldrb	r2, [r1, #1]
1000e0a2:	7808      	ldrb	r0, [r1, #0]
1000e0a4:	0212      	lsls	r2, r2, #8
1000e0a6:	4302      	orrs	r2, r0
1000e0a8:	805a      	strh	r2, [r3, #2]
1000e0aa:	78ca      	ldrb	r2, [r1, #3]
1000e0ac:	7888      	ldrb	r0, [r1, #2]
1000e0ae:	0212      	lsls	r2, r2, #8
1000e0b0:	4302      	orrs	r2, r0
1000e0b2:	809a      	strh	r2, [r3, #4]
1000e0b4:	794a      	ldrb	r2, [r1, #5]
1000e0b6:	7908      	ldrb	r0, [r1, #4]
1000e0b8:	0212      	lsls	r2, r2, #8
1000e0ba:	4302      	orrs	r2, r0
1000e0bc:	80da      	strh	r2, [r3, #6]
1000e0be:	3308      	adds	r3, #8
1000e0c0:	1c18      	adds	r0, r3, #0
1000e0c2:	3106      	adds	r1, #6
1000e0c4:	4b01      	ldr	r3, [pc, #4]	; (1000e0cc <gattc_write_req_ind_parser+0x34>)
1000e0c6:	4798      	blx	r3
1000e0c8:	bd08      	pop	{r3, pc}
1000e0ca:	46c0      	nop			; (mov r8, r8)
1000e0cc:	1000f6c3 	.word	0x1000f6c3

1000e0d0 <gattc_att_info_req_parser>:
1000e0d0:	7843      	ldrb	r3, [r0, #1]
1000e0d2:	7802      	ldrb	r2, [r0, #0]
1000e0d4:	021b      	lsls	r3, r3, #8
1000e0d6:	4313      	orrs	r3, r2
1000e0d8:	800b      	strh	r3, [r1, #0]
1000e0da:	4770      	bx	lr

1000e0dc <gattc_read_cfm>:
1000e0dc:	b538      	push	{r3, r4, r5, lr}
1000e0de:	2514      	movs	r5, #20
1000e0e0:	1c1c      	adds	r4, r3, #0
1000e0e2:	4b14      	ldr	r3, [pc, #80]	; (1000e134 <gattc_read_cfm+0x58>)
1000e0e4:	70d9      	strb	r1, [r3, #3]
1000e0e6:	4914      	ldr	r1, [pc, #80]	; (1000e138 <gattc_read_cfm+0x5c>)
1000e0e8:	701d      	strb	r5, [r3, #0]
1000e0ea:	3d08      	subs	r5, #8
1000e0ec:	705d      	strb	r5, [r3, #1]
1000e0ee:	709d      	strb	r5, [r3, #2]
1000e0f0:	880d      	ldrh	r5, [r1, #0]
1000e0f2:	8809      	ldrh	r1, [r1, #0]
1000e0f4:	7218      	strb	r0, [r3, #8]
1000e0f6:	0a09      	lsrs	r1, r1, #8
1000e0f8:	7159      	strb	r1, [r3, #5]
1000e0fa:	0a00      	lsrs	r0, r0, #8
1000e0fc:	0a21      	lsrs	r1, r4, #8
1000e0fe:	711d      	strb	r5, [r3, #4]
1000e100:	7258      	strb	r0, [r3, #9]
1000e102:	729c      	strb	r4, [r3, #10]
1000e104:	72d9      	strb	r1, [r3, #11]
1000e106:	731a      	strb	r2, [r3, #12]
1000e108:	1c1d      	adds	r5, r3, #0
1000e10a:	2c00      	cmp	r4, #0
1000e10c:	d007      	beq.n	1000e11e <gattc_read_cfm+0x42>
1000e10e:	9904      	ldr	r1, [sp, #16]
1000e110:	1c22      	adds	r2, r4, #0
1000e112:	480a      	ldr	r0, [pc, #40]	; (1000e13c <gattc_read_cfm+0x60>)
1000e114:	4b0a      	ldr	r3, [pc, #40]	; (1000e140 <gattc_read_cfm+0x64>)
1000e116:	340d      	adds	r4, #13
1000e118:	4798      	blx	r3
1000e11a:	b2a1      	uxth	r1, r4
1000e11c:	e001      	b.n	1000e122 <gattc_read_cfm+0x46>
1000e11e:	210e      	movs	r1, #14
1000e120:	735c      	strb	r4, [r3, #13]
1000e122:	1c0b      	adds	r3, r1, #0
1000e124:	3b08      	subs	r3, #8
1000e126:	71ab      	strb	r3, [r5, #6]
1000e128:	121b      	asrs	r3, r3, #8
1000e12a:	71eb      	strb	r3, [r5, #7]
1000e12c:	1c28      	adds	r0, r5, #0
1000e12e:	4b05      	ldr	r3, [pc, #20]	; (1000e144 <gattc_read_cfm+0x68>)
1000e130:	4798      	blx	r3
1000e132:	bd38      	pop	{r3, r4, r5, pc}
1000e134:	100143dc 	.word	0x100143dc
1000e138:	1001406c 	.word	0x1001406c
1000e13c:	100143e9 	.word	0x100143e9
1000e140:	1000f6c3 	.word	0x1000f6c3
1000e144:	1000cf55 	.word	0x1000cf55

1000e148 <gattc_write_cfm>:
1000e148:	4b0d      	ldr	r3, [pc, #52]	; (1000e180 <gattc_write_cfm+0x38>)
1000e14a:	b510      	push	{r4, lr}
1000e14c:	729a      	strb	r2, [r3, #10]
1000e14e:	2203      	movs	r2, #3
1000e150:	2416      	movs	r4, #22
1000e152:	719a      	strb	r2, [r3, #6]
1000e154:	2200      	movs	r2, #0
1000e156:	70d9      	strb	r1, [r3, #3]
1000e158:	490a      	ldr	r1, [pc, #40]	; (1000e184 <gattc_write_cfm+0x3c>)
1000e15a:	701c      	strb	r4, [r3, #0]
1000e15c:	3c0a      	subs	r4, #10
1000e15e:	705c      	strb	r4, [r3, #1]
1000e160:	709c      	strb	r4, [r3, #2]
1000e162:	880c      	ldrh	r4, [r1, #0]
1000e164:	8809      	ldrh	r1, [r1, #0]
1000e166:	7218      	strb	r0, [r3, #8]
1000e168:	0a09      	lsrs	r1, r1, #8
1000e16a:	0a00      	lsrs	r0, r0, #8
1000e16c:	711c      	strb	r4, [r3, #4]
1000e16e:	7159      	strb	r1, [r3, #5]
1000e170:	7258      	strb	r0, [r3, #9]
1000e172:	71da      	strb	r2, [r3, #7]
1000e174:	1c18      	adds	r0, r3, #0
1000e176:	210b      	movs	r1, #11
1000e178:	4b03      	ldr	r3, [pc, #12]	; (1000e188 <gattc_write_cfm+0x40>)
1000e17a:	4798      	blx	r3
1000e17c:	bd10      	pop	{r4, pc}
1000e17e:	46c0      	nop			; (mov r8, r8)
1000e180:	100143dc 	.word	0x100143dc
1000e184:	1001406c 	.word	0x1001406c
1000e188:	1000cf55 	.word	0x1000cf55

1000e18c <gattc_att_info_cfm>:
1000e18c:	b538      	push	{r3, r4, r5, lr}
1000e18e:	4c0e      	ldr	r4, [pc, #56]	; (1000e1c8 <gattc_att_info_cfm+0x3c>)
1000e190:	2518      	movs	r5, #24
1000e192:	7323      	strb	r3, [r4, #12]
1000e194:	2305      	movs	r3, #5
1000e196:	71a3      	strb	r3, [r4, #6]
1000e198:	2300      	movs	r3, #0
1000e19a:	70e1      	strb	r1, [r4, #3]
1000e19c:	490b      	ldr	r1, [pc, #44]	; (1000e1cc <gattc_att_info_cfm+0x40>)
1000e19e:	7025      	strb	r5, [r4, #0]
1000e1a0:	3d0c      	subs	r5, #12
1000e1a2:	7065      	strb	r5, [r4, #1]
1000e1a4:	70a5      	strb	r5, [r4, #2]
1000e1a6:	880d      	ldrh	r5, [r1, #0]
1000e1a8:	8809      	ldrh	r1, [r1, #0]
1000e1aa:	7220      	strb	r0, [r4, #8]
1000e1ac:	0a09      	lsrs	r1, r1, #8
1000e1ae:	0a00      	lsrs	r0, r0, #8
1000e1b0:	7161      	strb	r1, [r4, #5]
1000e1b2:	7260      	strb	r0, [r4, #9]
1000e1b4:	72a2      	strb	r2, [r4, #10]
1000e1b6:	71e3      	strb	r3, [r4, #7]
1000e1b8:	0a12      	lsrs	r2, r2, #8
1000e1ba:	1c20      	adds	r0, r4, #0
1000e1bc:	210d      	movs	r1, #13
1000e1be:	4b04      	ldr	r3, [pc, #16]	; (1000e1d0 <gattc_att_info_cfm+0x44>)
1000e1c0:	7125      	strb	r5, [r4, #4]
1000e1c2:	72e2      	strb	r2, [r4, #11]
1000e1c4:	4798      	blx	r3
1000e1c6:	bd38      	pop	{r3, r4, r5, pc}
1000e1c8:	100143dc 	.word	0x100143dc
1000e1cc:	1001406c 	.word	0x1001406c
1000e1d0:	1000cf55 	.word	0x1000cf55

1000e1d4 <gattc_event_cfm_handler>:
1000e1d4:	220e      	movs	r2, #14
1000e1d6:	b508      	push	{r3, lr}
1000e1d8:	4b0b      	ldr	r3, [pc, #44]	; (1000e208 <gattc_event_cfm_handler+0x34>)
1000e1da:	701a      	strb	r2, [r3, #0]
1000e1dc:	3a02      	subs	r2, #2
1000e1de:	705a      	strb	r2, [r3, #1]
1000e1e0:	709a      	strb	r2, [r3, #2]
1000e1e2:	4a0a      	ldr	r2, [pc, #40]	; (1000e20c <gattc_event_cfm_handler+0x38>)
1000e1e4:	70d8      	strb	r0, [r3, #3]
1000e1e6:	8810      	ldrh	r0, [r2, #0]
1000e1e8:	8812      	ldrh	r2, [r2, #0]
1000e1ea:	7219      	strb	r1, [r3, #8]
1000e1ec:	0a12      	lsrs	r2, r2, #8
1000e1ee:	715a      	strb	r2, [r3, #5]
1000e1f0:	2202      	movs	r2, #2
1000e1f2:	719a      	strb	r2, [r3, #6]
1000e1f4:	2200      	movs	r2, #0
1000e1f6:	0a09      	lsrs	r1, r1, #8
1000e1f8:	7118      	strb	r0, [r3, #4]
1000e1fa:	7259      	strb	r1, [r3, #9]
1000e1fc:	71da      	strb	r2, [r3, #7]
1000e1fe:	1c18      	adds	r0, r3, #0
1000e200:	210a      	movs	r1, #10
1000e202:	4b03      	ldr	r3, [pc, #12]	; (1000e210 <gattc_event_cfm_handler+0x3c>)
1000e204:	4798      	blx	r3
1000e206:	bd08      	pop	{r3, pc}
1000e208:	100143dc 	.word	0x100143dc
1000e20c:	1001406c 	.word	0x1001406c
1000e210:	1000cf55 	.word	0x1000cf55

1000e214 <gattc_disc_svc_ind_parser>:
1000e214:	b570      	push	{r4, r5, r6, lr}
1000e216:	1c15      	adds	r5, r2, #0
1000e218:	0a00      	lsrs	r0, r0, #8
1000e21a:	8010      	strh	r0, [r2, #0]
1000e21c:	784b      	ldrb	r3, [r1, #1]
1000e21e:	780a      	ldrb	r2, [r1, #0]
1000e220:	021b      	lsls	r3, r3, #8
1000e222:	4313      	orrs	r3, r2
1000e224:	806b      	strh	r3, [r5, #2]
1000e226:	78cb      	ldrb	r3, [r1, #3]
1000e228:	788a      	ldrb	r2, [r1, #2]
1000e22a:	021b      	lsls	r3, r3, #8
1000e22c:	4313      	orrs	r3, r2
1000e22e:	80ab      	strh	r3, [r5, #4]
1000e230:	790e      	ldrb	r6, [r1, #4]
1000e232:	4b05      	ldr	r3, [pc, #20]	; (1000e248 <gattc_disc_svc_ind_parser+0x34>)
1000e234:	1c30      	adds	r0, r6, #0
1000e236:	1c0c      	adds	r4, r1, #0
1000e238:	4798      	blx	r3
1000e23a:	1c32      	adds	r2, r6, #0
1000e23c:	71a8      	strb	r0, [r5, #6]
1000e23e:	1d61      	adds	r1, r4, #5
1000e240:	1de8      	adds	r0, r5, #7
1000e242:	4b02      	ldr	r3, [pc, #8]	; (1000e24c <gattc_disc_svc_ind_parser+0x38>)
1000e244:	4798      	blx	r3
1000e246:	bd70      	pop	{r4, r5, r6, pc}
1000e248:	1000c90d 	.word	0x1000c90d
1000e24c:	1000f6c3 	.word	0x1000f6c3

1000e250 <gattc_disc_svc_incl_ind_parser>:
1000e250:	b570      	push	{r4, r5, r6, lr}
1000e252:	1c15      	adds	r5, r2, #0
1000e254:	0a00      	lsrs	r0, r0, #8
1000e256:	8010      	strh	r0, [r2, #0]
1000e258:	784b      	ldrb	r3, [r1, #1]
1000e25a:	780a      	ldrb	r2, [r1, #0]
1000e25c:	021b      	lsls	r3, r3, #8
1000e25e:	4313      	orrs	r3, r2
1000e260:	806b      	strh	r3, [r5, #2]
1000e262:	78cb      	ldrb	r3, [r1, #3]
1000e264:	788a      	ldrb	r2, [r1, #2]
1000e266:	021b      	lsls	r3, r3, #8
1000e268:	4313      	orrs	r3, r2
1000e26a:	80ab      	strh	r3, [r5, #4]
1000e26c:	794b      	ldrb	r3, [r1, #5]
1000e26e:	790a      	ldrb	r2, [r1, #4]
1000e270:	021b      	lsls	r3, r3, #8
1000e272:	4313      	orrs	r3, r2
1000e274:	80eb      	strh	r3, [r5, #6]
1000e276:	798e      	ldrb	r6, [r1, #6]
1000e278:	4b05      	ldr	r3, [pc, #20]	; (1000e290 <gattc_disc_svc_incl_ind_parser+0x40>)
1000e27a:	1c30      	adds	r0, r6, #0
1000e27c:	1c0c      	adds	r4, r1, #0
1000e27e:	4798      	blx	r3
1000e280:	7228      	strb	r0, [r5, #8]
1000e282:	1c28      	adds	r0, r5, #0
1000e284:	1c32      	adds	r2, r6, #0
1000e286:	1de1      	adds	r1, r4, #7
1000e288:	4b02      	ldr	r3, [pc, #8]	; (1000e294 <gattc_disc_svc_incl_ind_parser+0x44>)
1000e28a:	3009      	adds	r0, #9
1000e28c:	4798      	blx	r3
1000e28e:	bd70      	pop	{r4, r5, r6, pc}
1000e290:	1000c90d 	.word	0x1000c90d
1000e294:	1000f6c3 	.word	0x1000f6c3

1000e298 <gattc_disc_char_ind_parser>:
1000e298:	b570      	push	{r4, r5, r6, lr}
1000e29a:	1c15      	adds	r5, r2, #0
1000e29c:	0a00      	lsrs	r0, r0, #8
1000e29e:	8010      	strh	r0, [r2, #0]
1000e2a0:	784b      	ldrb	r3, [r1, #1]
1000e2a2:	780a      	ldrb	r2, [r1, #0]
1000e2a4:	021b      	lsls	r3, r3, #8
1000e2a6:	4313      	orrs	r3, r2
1000e2a8:	806b      	strh	r3, [r5, #2]
1000e2aa:	78cb      	ldrb	r3, [r1, #3]
1000e2ac:	788a      	ldrb	r2, [r1, #2]
1000e2ae:	021b      	lsls	r3, r3, #8
1000e2b0:	4313      	orrs	r3, r2
1000e2b2:	80ab      	strh	r3, [r5, #4]
1000e2b4:	790b      	ldrb	r3, [r1, #4]
1000e2b6:	1c0c      	adds	r4, r1, #0
1000e2b8:	71ab      	strb	r3, [r5, #6]
1000e2ba:	794e      	ldrb	r6, [r1, #5]
1000e2bc:	4b05      	ldr	r3, [pc, #20]	; (1000e2d4 <gattc_disc_char_ind_parser+0x3c>)
1000e2be:	1c30      	adds	r0, r6, #0
1000e2c0:	4798      	blx	r3
1000e2c2:	71e8      	strb	r0, [r5, #7]
1000e2c4:	1c28      	adds	r0, r5, #0
1000e2c6:	1c32      	adds	r2, r6, #0
1000e2c8:	1da1      	adds	r1, r4, #6
1000e2ca:	4b03      	ldr	r3, [pc, #12]	; (1000e2d8 <gattc_disc_char_ind_parser+0x40>)
1000e2cc:	3008      	adds	r0, #8
1000e2ce:	4798      	blx	r3
1000e2d0:	bd70      	pop	{r4, r5, r6, pc}
1000e2d2:	46c0      	nop			; (mov r8, r8)
1000e2d4:	1000c90d 	.word	0x1000c90d
1000e2d8:	1000f6c3 	.word	0x1000f6c3

1000e2dc <gattc_disc_char_desc_ind_parser>:
1000e2dc:	b570      	push	{r4, r5, r6, lr}
1000e2de:	1c15      	adds	r5, r2, #0
1000e2e0:	0a00      	lsrs	r0, r0, #8
1000e2e2:	8010      	strh	r0, [r2, #0]
1000e2e4:	784b      	ldrb	r3, [r1, #1]
1000e2e6:	780a      	ldrb	r2, [r1, #0]
1000e2e8:	021b      	lsls	r3, r3, #8
1000e2ea:	4313      	orrs	r3, r2
1000e2ec:	806b      	strh	r3, [r5, #2]
1000e2ee:	788e      	ldrb	r6, [r1, #2]
1000e2f0:	4b05      	ldr	r3, [pc, #20]	; (1000e308 <gattc_disc_char_desc_ind_parser+0x2c>)
1000e2f2:	1c30      	adds	r0, r6, #0
1000e2f4:	1c0c      	adds	r4, r1, #0
1000e2f6:	4798      	blx	r3
1000e2f8:	1c32      	adds	r2, r6, #0
1000e2fa:	7128      	strb	r0, [r5, #4]
1000e2fc:	1ce1      	adds	r1, r4, #3
1000e2fe:	1d68      	adds	r0, r5, #5
1000e300:	4b02      	ldr	r3, [pc, #8]	; (1000e30c <gattc_disc_char_desc_ind_parser+0x30>)
1000e302:	4798      	blx	r3
1000e304:	bd70      	pop	{r4, r5, r6, pc}
1000e306:	46c0      	nop			; (mov r8, r8)
1000e308:	1000c90d 	.word	0x1000c90d
1000e30c:	1000f6c3 	.word	0x1000f6c3

1000e310 <gattc_event_ind_and_notification_parser>:
1000e310:	b510      	push	{r4, lr}
1000e312:	780c      	ldrb	r4, [r1, #0]
1000e314:	1c13      	adds	r3, r2, #0
1000e316:	2c12      	cmp	r4, #18
1000e318:	d10e      	bne.n	1000e338 <gattc_event_ind_and_notification_parser+0x28>
1000e31a:	0a00      	lsrs	r0, r0, #8
1000e31c:	8010      	strh	r0, [r2, #0]
1000e31e:	788a      	ldrb	r2, [r1, #2]
1000e320:	709a      	strb	r2, [r3, #2]
1000e322:	7948      	ldrb	r0, [r1, #5]
1000e324:	790c      	ldrb	r4, [r1, #4]
1000e326:	0200      	lsls	r0, r0, #8
1000e328:	4320      	orrs	r0, r4
1000e32a:	8098      	strh	r0, [r3, #4]
1000e32c:	3106      	adds	r1, #6
1000e32e:	1d98      	adds	r0, r3, #6
1000e330:	4b0b      	ldr	r3, [pc, #44]	; (1000e360 <gattc_event_ind_and_notification_parser+0x50>)
1000e332:	4798      	blx	r3
1000e334:	221b      	movs	r2, #27
1000e336:	e010      	b.n	1000e35a <gattc_event_ind_and_notification_parser+0x4a>
1000e338:	2200      	movs	r2, #0
1000e33a:	2c13      	cmp	r4, #19
1000e33c:	d10d      	bne.n	1000e35a <gattc_event_ind_and_notification_parser+0x4a>
1000e33e:	0a00      	lsrs	r0, r0, #8
1000e340:	8018      	strh	r0, [r3, #0]
1000e342:	788a      	ldrb	r2, [r1, #2]
1000e344:	709a      	strb	r2, [r3, #2]
1000e346:	7908      	ldrb	r0, [r1, #4]
1000e348:	78cc      	ldrb	r4, [r1, #3]
1000e34a:	0200      	lsls	r0, r0, #8
1000e34c:	4320      	orrs	r0, r4
1000e34e:	8098      	strh	r0, [r3, #4]
1000e350:	3106      	adds	r1, #6
1000e352:	1d98      	adds	r0, r3, #6
1000e354:	4b02      	ldr	r3, [pc, #8]	; (1000e360 <gattc_event_ind_and_notification_parser+0x50>)
1000e356:	4798      	blx	r3
1000e358:	221c      	movs	r2, #28
1000e35a:	1c10      	adds	r0, r2, #0
1000e35c:	bd10      	pop	{r4, pc}
1000e35e:	46c0      	nop			; (mov r8, r8)
1000e360:	1000f6c3 	.word	0x1000f6c3

1000e364 <gattc_complete_evt_handler>:
1000e364:	b500      	push	{lr}
1000e366:	0a00      	lsrs	r0, r0, #8
1000e368:	8010      	strh	r0, [r2, #0]
1000e36a:	7808      	ldrb	r0, [r1, #0]
1000e36c:	7090      	strb	r0, [r2, #2]
1000e36e:	784b      	ldrb	r3, [r1, #1]
1000e370:	3801      	subs	r0, #1
1000e372:	70d3      	strb	r3, [r2, #3]
1000e374:	2813      	cmp	r0, #19
1000e376:	d82c      	bhi.n	1000e3d2 <gattc_complete_evt_handler+0x6e>
1000e378:	f000 f914 	bl	1000e5a4 <__gnu_thumb1_case_uqi>
1000e37c:	0a0a0a0c 	.word	0x0a0a0a0c
1000e380:	210a0a0a 	.word	0x210a0a0a
1000e384:	111f2121 	.word	0x111f2121
1000e388:	2b111111 	.word	0x2b111111
1000e38c:	2919132b 	.word	0x2919132b
1000e390:	2017      	movs	r0, #23
1000e392:	e01f      	b.n	1000e3d4 <gattc_complete_evt_handler+0x70>
1000e394:	2024      	movs	r0, #36	; 0x24
1000e396:	2b00      	cmp	r3, #0
1000e398:	d11c      	bne.n	1000e3d4 <gattc_complete_evt_handler+0x70>
1000e39a:	3017      	adds	r0, #23
1000e39c:	e01a      	b.n	1000e3d4 <gattc_complete_evt_handler+0x70>
1000e39e:	2025      	movs	r0, #37	; 0x25
1000e3a0:	e018      	b.n	1000e3d4 <gattc_complete_evt_handler+0x70>
1000e3a2:	4a0d      	ldr	r2, [pc, #52]	; (1000e3d8 <gattc_complete_evt_handler+0x74>)
1000e3a4:	201d      	movs	r0, #29
1000e3a6:	6813      	ldr	r3, [r2, #0]
1000e3a8:	3b01      	subs	r3, #1
1000e3aa:	6013      	str	r3, [r2, #0]
1000e3ac:	e012      	b.n	1000e3d4 <gattc_complete_evt_handler+0x70>
1000e3ae:	4a0a      	ldr	r2, [pc, #40]	; (1000e3d8 <gattc_complete_evt_handler+0x74>)
1000e3b0:	201e      	movs	r0, #30
1000e3b2:	6813      	ldr	r3, [r2, #0]
1000e3b4:	3b01      	subs	r3, #1
1000e3b6:	6013      	str	r3, [r2, #0]
1000e3b8:	e00c      	b.n	1000e3d4 <gattc_complete_evt_handler+0x70>
1000e3ba:	2019      	movs	r0, #25
1000e3bc:	e00a      	b.n	1000e3d4 <gattc_complete_evt_handler+0x70>
1000e3be:	203b      	movs	r0, #59	; 0x3b
1000e3c0:	2b00      	cmp	r3, #0
1000e3c2:	d007      	beq.n	1000e3d4 <gattc_complete_evt_handler+0x70>
1000e3c4:	2182      	movs	r1, #130	; 0x82
1000e3c6:	0089      	lsls	r1, r1, #2
1000e3c8:	5453      	strb	r3, [r2, r1]
1000e3ca:	3823      	subs	r0, #35	; 0x23
1000e3cc:	e002      	b.n	1000e3d4 <gattc_complete_evt_handler+0x70>
1000e3ce:	2021      	movs	r0, #33	; 0x21
1000e3d0:	e000      	b.n	1000e3d4 <gattc_complete_evt_handler+0x70>
1000e3d2:	2000      	movs	r0, #0
1000e3d4:	bd00      	pop	{pc}
1000e3d6:	46c0      	nop			; (mov r8, r8)
1000e3d8:	10013348 	.word	0x10013348

1000e3dc <gattc_event_mtu_changed_ind_parser>:
1000e3dc:	0a00      	lsrs	r0, r0, #8
1000e3de:	8010      	strh	r0, [r2, #0]
1000e3e0:	784b      	ldrb	r3, [r1, #1]
1000e3e2:	7809      	ldrb	r1, [r1, #0]
1000e3e4:	021b      	lsls	r3, r3, #8
1000e3e6:	430b      	orrs	r3, r1
1000e3e8:	8053      	strh	r3, [r2, #2]
1000e3ea:	4770      	bx	lr

1000e3ec <gattc_read_ind_parser>:
1000e3ec:	0a00      	lsrs	r0, r0, #8
1000e3ee:	b508      	push	{r3, lr}
1000e3f0:	8010      	strh	r0, [r2, #0]
1000e3f2:	1c13      	adds	r3, r2, #0
1000e3f4:	2282      	movs	r2, #130	; 0x82
1000e3f6:	2000      	movs	r0, #0
1000e3f8:	0092      	lsls	r2, r2, #2
1000e3fa:	5498      	strb	r0, [r3, r2]
1000e3fc:	784a      	ldrb	r2, [r1, #1]
1000e3fe:	7808      	ldrb	r0, [r1, #0]
1000e400:	0212      	lsls	r2, r2, #8
1000e402:	4302      	orrs	r2, r0
1000e404:	805a      	strh	r2, [r3, #2]
1000e406:	78ca      	ldrb	r2, [r1, #3]
1000e408:	7888      	ldrb	r0, [r1, #2]
1000e40a:	0212      	lsls	r2, r2, #8
1000e40c:	4302      	orrs	r2, r0
1000e40e:	80da      	strh	r2, [r3, #6]
1000e410:	794a      	ldrb	r2, [r1, #5]
1000e412:	7908      	ldrb	r0, [r1, #4]
1000e414:	0212      	lsls	r2, r2, #8
1000e416:	4302      	orrs	r2, r0
1000e418:	809a      	strh	r2, [r3, #4]
1000e41a:	3308      	adds	r3, #8
1000e41c:	1c18      	adds	r0, r3, #0
1000e41e:	3106      	adds	r1, #6
1000e420:	4b01      	ldr	r3, [pc, #4]	; (1000e428 <gattc_read_ind_parser+0x3c>)
1000e422:	4798      	blx	r3
1000e424:	bd08      	pop	{r3, pc}
1000e426:	46c0      	nop			; (mov r8, r8)
1000e428:	1000f6c3 	.word	0x1000f6c3

1000e42c <gattc_svc_changed_cfg_ind_parser>:
1000e42c:	0a00      	lsrs	r0, r0, #8
1000e42e:	8010      	strh	r0, [r2, #0]
1000e430:	784b      	ldrb	r3, [r1, #1]
1000e432:	7809      	ldrb	r1, [r1, #0]
1000e434:	021b      	lsls	r3, r3, #8
1000e436:	430b      	orrs	r3, r1
1000e438:	8053      	strh	r3, [r2, #2]
1000e43a:	4770      	bx	lr

1000e43c <init_gattc_task_module>:
1000e43c:	2300      	movs	r3, #0
1000e43e:	4a02      	ldr	r2, [pc, #8]	; (1000e448 <init_gattc_task_module+0xc>)
1000e440:	8013      	strh	r3, [r2, #0]
1000e442:	4a02      	ldr	r2, [pc, #8]	; (1000e44c <init_gattc_task_module+0x10>)
1000e444:	8013      	strh	r3, [r2, #0]
1000e446:	4770      	bx	lr
1000e448:	10013342 	.word	0x10013342
1000e44c:	10013344 	.word	0x10013344

1000e450 <gattm_att_set_value_req_handler>:
1000e450:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000e452:	466b      	mov	r3, sp
1000e454:	1dde      	adds	r6, r3, #7
1000e456:	2300      	movs	r3, #0
1000e458:	1c0d      	adds	r5, r1, #0
1000e45a:	210c      	movs	r1, #12
1000e45c:	270b      	movs	r7, #11
1000e45e:	4c17      	ldr	r4, [pc, #92]	; (1000e4bc <gattm_att_set_value_req_handler+0x6c>)
1000e460:	7033      	strb	r3, [r6, #0]
1000e462:	70e3      	strb	r3, [r4, #3]
1000e464:	4b16      	ldr	r3, [pc, #88]	; (1000e4c0 <gattm_att_set_value_req_handler+0x70>)
1000e466:	7021      	strb	r1, [r4, #0]
1000e468:	8819      	ldrh	r1, [r3, #0]
1000e46a:	881b      	ldrh	r3, [r3, #0]
1000e46c:	7220      	strb	r0, [r4, #8]
1000e46e:	0a1b      	lsrs	r3, r3, #8
1000e470:	7163      	strb	r3, [r4, #5]
1000e472:	0a00      	lsrs	r0, r0, #8
1000e474:	0a2b      	lsrs	r3, r5, #8
1000e476:	7121      	strb	r1, [r4, #4]
1000e478:	7260      	strb	r0, [r4, #9]
1000e47a:	1c11      	adds	r1, r2, #0
1000e47c:	72a5      	strb	r5, [r4, #10]
1000e47e:	1c2a      	adds	r2, r5, #0
1000e480:	72e3      	strb	r3, [r4, #11]
1000e482:	350c      	adds	r5, #12
1000e484:	4b0f      	ldr	r3, [pc, #60]	; (1000e4c4 <gattm_att_set_value_req_handler+0x74>)
1000e486:	4810      	ldr	r0, [pc, #64]	; (1000e4c8 <gattm_att_set_value_req_handler+0x78>)
1000e488:	7067      	strb	r7, [r4, #1]
1000e48a:	70a7      	strb	r7, [r4, #2]
1000e48c:	4798      	blx	r3
1000e48e:	b2a9      	uxth	r1, r5
1000e490:	4b0e      	ldr	r3, [pc, #56]	; (1000e4cc <gattm_att_set_value_req_handler+0x7c>)
1000e492:	4d0f      	ldr	r5, [pc, #60]	; (1000e4d0 <gattm_att_set_value_req_handler+0x80>)
1000e494:	1c20      	adds	r0, r4, #0
1000e496:	802b      	strh	r3, [r5, #0]
1000e498:	1c0b      	adds	r3, r1, #0
1000e49a:	3b08      	subs	r3, #8
1000e49c:	71a3      	strb	r3, [r4, #6]
1000e49e:	121b      	asrs	r3, r3, #8
1000e4a0:	71e3      	strb	r3, [r4, #7]
1000e4a2:	4b0c      	ldr	r3, [pc, #48]	; (1000e4d4 <gattm_att_set_value_req_handler+0x84>)
1000e4a4:	80af      	strh	r7, [r5, #4]
1000e4a6:	4798      	blx	r3
1000e4a8:	1c30      	adds	r0, r6, #0
1000e4aa:	4b0b      	ldr	r3, [pc, #44]	; (1000e4d8 <gattm_att_set_value_req_handler+0x88>)
1000e4ac:	4798      	blx	r3
1000e4ae:	7833      	ldrb	r3, [r6, #0]
1000e4b0:	20e2      	movs	r0, #226	; 0xe2
1000e4b2:	2b00      	cmp	r3, #0
1000e4b4:	d101      	bne.n	1000e4ba <gattm_att_set_value_req_handler+0x6a>
1000e4b6:	68ab      	ldr	r3, [r5, #8]
1000e4b8:	7898      	ldrb	r0, [r3, #2]
1000e4ba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000e4bc:	100143dc 	.word	0x100143dc
1000e4c0:	1001406c 	.word	0x1001406c
1000e4c4:	1000f6c3 	.word	0x1000f6c3
1000e4c8:	100143e8 	.word	0x100143e8
1000e4cc:	00000b0d 	.word	0x00000b0d
1000e4d0:	10014060 	.word	0x10014060
1000e4d4:	1000cf55 	.word	0x1000cf55
1000e4d8:	1000cfb9 	.word	0x1000cfb9

1000e4dc <gattm_att_get_value_req_handler>:
1000e4dc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e4de:	b085      	sub	sp, #20
1000e4e0:	9201      	str	r2, [sp, #4]
1000e4e2:	220a      	movs	r2, #10
1000e4e4:	1c04      	adds	r4, r0, #0
1000e4e6:	481d      	ldr	r0, [pc, #116]	; (1000e55c <gattm_att_get_value_req_handler+0x80>)
1000e4e8:	ab02      	add	r3, sp, #8
1000e4ea:	1dde      	adds	r6, r3, #7
1000e4ec:	7002      	strb	r2, [r0, #0]
1000e4ee:	2300      	movs	r3, #0
1000e4f0:	220b      	movs	r2, #11
1000e4f2:	4d1b      	ldr	r5, [pc, #108]	; (1000e560 <gattm_att_get_value_req_handler+0x84>)
1000e4f4:	1c0f      	adds	r7, r1, #0
1000e4f6:	8829      	ldrh	r1, [r5, #0]
1000e4f8:	882d      	ldrh	r5, [r5, #0]
1000e4fa:	7101      	strb	r1, [r0, #4]
1000e4fc:	0a2d      	lsrs	r5, r5, #8
1000e4fe:	7145      	strb	r5, [r0, #5]
1000e500:	0a25      	lsrs	r5, r4, #8
1000e502:	7245      	strb	r5, [r0, #9]
1000e504:	4917      	ldr	r1, [pc, #92]	; (1000e564 <gattm_att_get_value_req_handler+0x88>)
1000e506:	4d18      	ldr	r5, [pc, #96]	; (1000e568 <gattm_att_get_value_req_handler+0x8c>)
1000e508:	7033      	strb	r3, [r6, #0]
1000e50a:	7042      	strb	r2, [r0, #1]
1000e50c:	7082      	strb	r2, [r0, #2]
1000e50e:	70c3      	strb	r3, [r0, #3]
1000e510:	8029      	strh	r1, [r5, #0]
1000e512:	80aa      	strh	r2, [r5, #4]
1000e514:	71c3      	strb	r3, [r0, #7]
1000e516:	3a09      	subs	r2, #9
1000e518:	210a      	movs	r1, #10
1000e51a:	4b14      	ldr	r3, [pc, #80]	; (1000e56c <gattm_att_get_value_req_handler+0x90>)
1000e51c:	7182      	strb	r2, [r0, #6]
1000e51e:	7204      	strb	r4, [r0, #8]
1000e520:	4798      	blx	r3
1000e522:	1c30      	adds	r0, r6, #0
1000e524:	4b12      	ldr	r3, [pc, #72]	; (1000e570 <gattm_att_get_value_req_handler+0x94>)
1000e526:	4798      	blx	r3
1000e528:	7833      	ldrb	r3, [r6, #0]
1000e52a:	20e2      	movs	r0, #226	; 0xe2
1000e52c:	2b00      	cmp	r3, #0
1000e52e:	d112      	bne.n	1000e556 <gattm_att_get_value_req_handler+0x7a>
1000e530:	68a9      	ldr	r1, [r5, #8]
1000e532:	9801      	ldr	r0, [sp, #4]
1000e534:	784d      	ldrb	r5, [r1, #1]
1000e536:	780b      	ldrb	r3, [r1, #0]
1000e538:	78ca      	ldrb	r2, [r1, #3]
1000e53a:	022d      	lsls	r5, r5, #8
1000e53c:	431d      	orrs	r5, r3
1000e53e:	788b      	ldrb	r3, [r1, #2]
1000e540:	0212      	lsls	r2, r2, #8
1000e542:	431a      	orrs	r2, r3
1000e544:	803a      	strh	r2, [r7, #0]
1000e546:	790e      	ldrb	r6, [r1, #4]
1000e548:	4b0a      	ldr	r3, [pc, #40]	; (1000e574 <gattm_att_get_value_req_handler+0x98>)
1000e54a:	3105      	adds	r1, #5
1000e54c:	4798      	blx	r3
1000e54e:	20e2      	movs	r0, #226	; 0xe2
1000e550:	42ac      	cmp	r4, r5
1000e552:	d100      	bne.n	1000e556 <gattm_att_get_value_req_handler+0x7a>
1000e554:	1c30      	adds	r0, r6, #0
1000e556:	b005      	add	sp, #20
1000e558:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e55a:	46c0      	nop			; (mov r8, r8)
1000e55c:	100143dc 	.word	0x100143dc
1000e560:	1001406c 	.word	0x1001406c
1000e564:	00000b0b 	.word	0x00000b0b
1000e568:	10014060 	.word	0x10014060
1000e56c:	1000cf55 	.word	0x1000cf55
1000e570:	1000cfb9 	.word	0x1000cfb9
1000e574:	1000f6c3 	.word	0x1000f6c3

1000e578 <htpt_enable_rsp_handler>:
1000e578:	780b      	ldrb	r3, [r1, #0]
1000e57a:	7013      	strb	r3, [r2, #0]
1000e57c:	784b      	ldrb	r3, [r1, #1]
1000e57e:	7053      	strb	r3, [r2, #1]
1000e580:	4770      	bx	lr

1000e582 <htpt_temp_send_rsp_handler>:
1000e582:	780b      	ldrb	r3, [r1, #0]
1000e584:	7013      	strb	r3, [r2, #0]
1000e586:	4770      	bx	lr

1000e588 <htpt_meas_intv_upd_rsp_handler>:
1000e588:	780b      	ldrb	r3, [r1, #0]
1000e58a:	7013      	strb	r3, [r2, #0]
1000e58c:	4770      	bx	lr

1000e58e <htpt_meas_intv_chg_req_ind_handler>:
1000e58e:	78cb      	ldrb	r3, [r1, #3]
1000e590:	7889      	ldrb	r1, [r1, #2]
1000e592:	021b      	lsls	r3, r3, #8
1000e594:	430b      	orrs	r3, r1
1000e596:	8013      	strh	r3, [r2, #0]
1000e598:	4770      	bx	lr

1000e59a <htpt_cfg_indntf_ind_handler>:
1000e59a:	780b      	ldrb	r3, [r1, #0]
1000e59c:	7013      	strb	r3, [r2, #0]
1000e59e:	784b      	ldrb	r3, [r1, #1]
1000e5a0:	7053      	strb	r3, [r2, #1]
1000e5a2:	4770      	bx	lr

1000e5a4 <__gnu_thumb1_case_uqi>:
1000e5a4:	b402      	push	{r1}
1000e5a6:	4671      	mov	r1, lr
1000e5a8:	0849      	lsrs	r1, r1, #1
1000e5aa:	0049      	lsls	r1, r1, #1
1000e5ac:	5c09      	ldrb	r1, [r1, r0]
1000e5ae:	0049      	lsls	r1, r1, #1
1000e5b0:	448e      	add	lr, r1
1000e5b2:	bc02      	pop	{r1}
1000e5b4:	4770      	bx	lr
1000e5b6:	46c0      	nop			; (mov r8, r8)

1000e5b8 <__aeabi_uidiv>:
1000e5b8:	2200      	movs	r2, #0
1000e5ba:	0843      	lsrs	r3, r0, #1
1000e5bc:	428b      	cmp	r3, r1
1000e5be:	d374      	bcc.n	1000e6aa <__aeabi_uidiv+0xf2>
1000e5c0:	0903      	lsrs	r3, r0, #4
1000e5c2:	428b      	cmp	r3, r1
1000e5c4:	d35f      	bcc.n	1000e686 <__aeabi_uidiv+0xce>
1000e5c6:	0a03      	lsrs	r3, r0, #8
1000e5c8:	428b      	cmp	r3, r1
1000e5ca:	d344      	bcc.n	1000e656 <__aeabi_uidiv+0x9e>
1000e5cc:	0b03      	lsrs	r3, r0, #12
1000e5ce:	428b      	cmp	r3, r1
1000e5d0:	d328      	bcc.n	1000e624 <__aeabi_uidiv+0x6c>
1000e5d2:	0c03      	lsrs	r3, r0, #16
1000e5d4:	428b      	cmp	r3, r1
1000e5d6:	d30d      	bcc.n	1000e5f4 <__aeabi_uidiv+0x3c>
1000e5d8:	22ff      	movs	r2, #255	; 0xff
1000e5da:	0209      	lsls	r1, r1, #8
1000e5dc:	ba12      	rev	r2, r2
1000e5de:	0c03      	lsrs	r3, r0, #16
1000e5e0:	428b      	cmp	r3, r1
1000e5e2:	d302      	bcc.n	1000e5ea <__aeabi_uidiv+0x32>
1000e5e4:	1212      	asrs	r2, r2, #8
1000e5e6:	0209      	lsls	r1, r1, #8
1000e5e8:	d065      	beq.n	1000e6b6 <__aeabi_uidiv+0xfe>
1000e5ea:	0b03      	lsrs	r3, r0, #12
1000e5ec:	428b      	cmp	r3, r1
1000e5ee:	d319      	bcc.n	1000e624 <__aeabi_uidiv+0x6c>
1000e5f0:	e000      	b.n	1000e5f4 <__aeabi_uidiv+0x3c>
1000e5f2:	0a09      	lsrs	r1, r1, #8
1000e5f4:	0bc3      	lsrs	r3, r0, #15
1000e5f6:	428b      	cmp	r3, r1
1000e5f8:	d301      	bcc.n	1000e5fe <__aeabi_uidiv+0x46>
1000e5fa:	03cb      	lsls	r3, r1, #15
1000e5fc:	1ac0      	subs	r0, r0, r3
1000e5fe:	4152      	adcs	r2, r2
1000e600:	0b83      	lsrs	r3, r0, #14
1000e602:	428b      	cmp	r3, r1
1000e604:	d301      	bcc.n	1000e60a <__aeabi_uidiv+0x52>
1000e606:	038b      	lsls	r3, r1, #14
1000e608:	1ac0      	subs	r0, r0, r3
1000e60a:	4152      	adcs	r2, r2
1000e60c:	0b43      	lsrs	r3, r0, #13
1000e60e:	428b      	cmp	r3, r1
1000e610:	d301      	bcc.n	1000e616 <__aeabi_uidiv+0x5e>
1000e612:	034b      	lsls	r3, r1, #13
1000e614:	1ac0      	subs	r0, r0, r3
1000e616:	4152      	adcs	r2, r2
1000e618:	0b03      	lsrs	r3, r0, #12
1000e61a:	428b      	cmp	r3, r1
1000e61c:	d301      	bcc.n	1000e622 <__aeabi_uidiv+0x6a>
1000e61e:	030b      	lsls	r3, r1, #12
1000e620:	1ac0      	subs	r0, r0, r3
1000e622:	4152      	adcs	r2, r2
1000e624:	0ac3      	lsrs	r3, r0, #11
1000e626:	428b      	cmp	r3, r1
1000e628:	d301      	bcc.n	1000e62e <__aeabi_uidiv+0x76>
1000e62a:	02cb      	lsls	r3, r1, #11
1000e62c:	1ac0      	subs	r0, r0, r3
1000e62e:	4152      	adcs	r2, r2
1000e630:	0a83      	lsrs	r3, r0, #10
1000e632:	428b      	cmp	r3, r1
1000e634:	d301      	bcc.n	1000e63a <__aeabi_uidiv+0x82>
1000e636:	028b      	lsls	r3, r1, #10
1000e638:	1ac0      	subs	r0, r0, r3
1000e63a:	4152      	adcs	r2, r2
1000e63c:	0a43      	lsrs	r3, r0, #9
1000e63e:	428b      	cmp	r3, r1
1000e640:	d301      	bcc.n	1000e646 <__aeabi_uidiv+0x8e>
1000e642:	024b      	lsls	r3, r1, #9
1000e644:	1ac0      	subs	r0, r0, r3
1000e646:	4152      	adcs	r2, r2
1000e648:	0a03      	lsrs	r3, r0, #8
1000e64a:	428b      	cmp	r3, r1
1000e64c:	d301      	bcc.n	1000e652 <__aeabi_uidiv+0x9a>
1000e64e:	020b      	lsls	r3, r1, #8
1000e650:	1ac0      	subs	r0, r0, r3
1000e652:	4152      	adcs	r2, r2
1000e654:	d2cd      	bcs.n	1000e5f2 <__aeabi_uidiv+0x3a>
1000e656:	09c3      	lsrs	r3, r0, #7
1000e658:	428b      	cmp	r3, r1
1000e65a:	d301      	bcc.n	1000e660 <__aeabi_uidiv+0xa8>
1000e65c:	01cb      	lsls	r3, r1, #7
1000e65e:	1ac0      	subs	r0, r0, r3
1000e660:	4152      	adcs	r2, r2
1000e662:	0983      	lsrs	r3, r0, #6
1000e664:	428b      	cmp	r3, r1
1000e666:	d301      	bcc.n	1000e66c <__aeabi_uidiv+0xb4>
1000e668:	018b      	lsls	r3, r1, #6
1000e66a:	1ac0      	subs	r0, r0, r3
1000e66c:	4152      	adcs	r2, r2
1000e66e:	0943      	lsrs	r3, r0, #5
1000e670:	428b      	cmp	r3, r1
1000e672:	d301      	bcc.n	1000e678 <__aeabi_uidiv+0xc0>
1000e674:	014b      	lsls	r3, r1, #5
1000e676:	1ac0      	subs	r0, r0, r3
1000e678:	4152      	adcs	r2, r2
1000e67a:	0903      	lsrs	r3, r0, #4
1000e67c:	428b      	cmp	r3, r1
1000e67e:	d301      	bcc.n	1000e684 <__aeabi_uidiv+0xcc>
1000e680:	010b      	lsls	r3, r1, #4
1000e682:	1ac0      	subs	r0, r0, r3
1000e684:	4152      	adcs	r2, r2
1000e686:	08c3      	lsrs	r3, r0, #3
1000e688:	428b      	cmp	r3, r1
1000e68a:	d301      	bcc.n	1000e690 <__aeabi_uidiv+0xd8>
1000e68c:	00cb      	lsls	r3, r1, #3
1000e68e:	1ac0      	subs	r0, r0, r3
1000e690:	4152      	adcs	r2, r2
1000e692:	0883      	lsrs	r3, r0, #2
1000e694:	428b      	cmp	r3, r1
1000e696:	d301      	bcc.n	1000e69c <__aeabi_uidiv+0xe4>
1000e698:	008b      	lsls	r3, r1, #2
1000e69a:	1ac0      	subs	r0, r0, r3
1000e69c:	4152      	adcs	r2, r2
1000e69e:	0843      	lsrs	r3, r0, #1
1000e6a0:	428b      	cmp	r3, r1
1000e6a2:	d301      	bcc.n	1000e6a8 <__aeabi_uidiv+0xf0>
1000e6a4:	004b      	lsls	r3, r1, #1
1000e6a6:	1ac0      	subs	r0, r0, r3
1000e6a8:	4152      	adcs	r2, r2
1000e6aa:	1a41      	subs	r1, r0, r1
1000e6ac:	d200      	bcs.n	1000e6b0 <__aeabi_uidiv+0xf8>
1000e6ae:	4601      	mov	r1, r0
1000e6b0:	4152      	adcs	r2, r2
1000e6b2:	4610      	mov	r0, r2
1000e6b4:	4770      	bx	lr
1000e6b6:	e7ff      	b.n	1000e6b8 <__aeabi_uidiv+0x100>
1000e6b8:	b501      	push	{r0, lr}
1000e6ba:	2000      	movs	r0, #0
1000e6bc:	f000 f806 	bl	1000e6cc <__aeabi_idiv0>
1000e6c0:	bd02      	pop	{r1, pc}
1000e6c2:	46c0      	nop			; (mov r8, r8)

1000e6c4 <__aeabi_uidivmod>:
1000e6c4:	2900      	cmp	r1, #0
1000e6c6:	d0f7      	beq.n	1000e6b8 <__aeabi_uidiv+0x100>
1000e6c8:	e776      	b.n	1000e5b8 <__aeabi_uidiv>
1000e6ca:	4770      	bx	lr

1000e6cc <__aeabi_idiv0>:
1000e6cc:	4770      	bx	lr
1000e6ce:	46c0      	nop			; (mov r8, r8)

1000e6d0 <__aeabi_d2uiz>:
1000e6d0:	b570      	push	{r4, r5, r6, lr}
1000e6d2:	2200      	movs	r2, #0
1000e6d4:	4b0c      	ldr	r3, [pc, #48]	; (1000e708 <__aeabi_d2uiz+0x38>)
1000e6d6:	0004      	movs	r4, r0
1000e6d8:	000d      	movs	r5, r1
1000e6da:	f000 fe87 	bl	1000f3ec <__aeabi_dcmpge>
1000e6de:	2800      	cmp	r0, #0
1000e6e0:	d104      	bne.n	1000e6ec <__aeabi_d2uiz+0x1c>
1000e6e2:	0020      	movs	r0, r4
1000e6e4:	0029      	movs	r1, r5
1000e6e6:	f000 fddf 	bl	1000f2a8 <__aeabi_d2iz>
1000e6ea:	bd70      	pop	{r4, r5, r6, pc}
1000e6ec:	4b06      	ldr	r3, [pc, #24]	; (1000e708 <__aeabi_d2uiz+0x38>)
1000e6ee:	2200      	movs	r2, #0
1000e6f0:	0020      	movs	r0, r4
1000e6f2:	0029      	movs	r1, r5
1000e6f4:	f000 fa84 	bl	1000ec00 <__aeabi_dsub>
1000e6f8:	f000 fdd6 	bl	1000f2a8 <__aeabi_d2iz>
1000e6fc:	2380      	movs	r3, #128	; 0x80
1000e6fe:	061b      	lsls	r3, r3, #24
1000e700:	469c      	mov	ip, r3
1000e702:	4460      	add	r0, ip
1000e704:	e7f1      	b.n	1000e6ea <__aeabi_d2uiz+0x1a>
1000e706:	46c0      	nop			; (mov r8, r8)
1000e708:	41e00000 	.word	0x41e00000

1000e70c <__aeabi_dmul>:
1000e70c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e70e:	465f      	mov	r7, fp
1000e710:	4656      	mov	r6, sl
1000e712:	464d      	mov	r5, r9
1000e714:	4644      	mov	r4, r8
1000e716:	b4f0      	push	{r4, r5, r6, r7}
1000e718:	030d      	lsls	r5, r1, #12
1000e71a:	4699      	mov	r9, r3
1000e71c:	004e      	lsls	r6, r1, #1
1000e71e:	0b2b      	lsrs	r3, r5, #12
1000e720:	b087      	sub	sp, #28
1000e722:	0007      	movs	r7, r0
1000e724:	4692      	mov	sl, r2
1000e726:	4680      	mov	r8, r0
1000e728:	469b      	mov	fp, r3
1000e72a:	0d76      	lsrs	r6, r6, #21
1000e72c:	0fcc      	lsrs	r4, r1, #31
1000e72e:	2e00      	cmp	r6, #0
1000e730:	d069      	beq.n	1000e806 <__aeabi_dmul+0xfa>
1000e732:	4b6d      	ldr	r3, [pc, #436]	; (1000e8e8 <__aeabi_dmul+0x1dc>)
1000e734:	429e      	cmp	r6, r3
1000e736:	d035      	beq.n	1000e7a4 <__aeabi_dmul+0x98>
1000e738:	465b      	mov	r3, fp
1000e73a:	2280      	movs	r2, #128	; 0x80
1000e73c:	00dd      	lsls	r5, r3, #3
1000e73e:	0412      	lsls	r2, r2, #16
1000e740:	0f43      	lsrs	r3, r0, #29
1000e742:	4313      	orrs	r3, r2
1000e744:	432b      	orrs	r3, r5
1000e746:	469b      	mov	fp, r3
1000e748:	00c3      	lsls	r3, r0, #3
1000e74a:	4698      	mov	r8, r3
1000e74c:	4b67      	ldr	r3, [pc, #412]	; (1000e8ec <__aeabi_dmul+0x1e0>)
1000e74e:	2700      	movs	r7, #0
1000e750:	469c      	mov	ip, r3
1000e752:	2300      	movs	r3, #0
1000e754:	4466      	add	r6, ip
1000e756:	9301      	str	r3, [sp, #4]
1000e758:	464a      	mov	r2, r9
1000e75a:	0315      	lsls	r5, r2, #12
1000e75c:	0050      	lsls	r0, r2, #1
1000e75e:	0fd2      	lsrs	r2, r2, #31
1000e760:	4653      	mov	r3, sl
1000e762:	0b2d      	lsrs	r5, r5, #12
1000e764:	0d40      	lsrs	r0, r0, #21
1000e766:	4691      	mov	r9, r2
1000e768:	d100      	bne.n	1000e76c <__aeabi_dmul+0x60>
1000e76a:	e076      	b.n	1000e85a <__aeabi_dmul+0x14e>
1000e76c:	4a5e      	ldr	r2, [pc, #376]	; (1000e8e8 <__aeabi_dmul+0x1dc>)
1000e76e:	4290      	cmp	r0, r2
1000e770:	d06c      	beq.n	1000e84c <__aeabi_dmul+0x140>
1000e772:	2280      	movs	r2, #128	; 0x80
1000e774:	0f5b      	lsrs	r3, r3, #29
1000e776:	0412      	lsls	r2, r2, #16
1000e778:	4313      	orrs	r3, r2
1000e77a:	4a5c      	ldr	r2, [pc, #368]	; (1000e8ec <__aeabi_dmul+0x1e0>)
1000e77c:	00ed      	lsls	r5, r5, #3
1000e77e:	4694      	mov	ip, r2
1000e780:	431d      	orrs	r5, r3
1000e782:	4653      	mov	r3, sl
1000e784:	2200      	movs	r2, #0
1000e786:	00db      	lsls	r3, r3, #3
1000e788:	4460      	add	r0, ip
1000e78a:	4649      	mov	r1, r9
1000e78c:	1836      	adds	r6, r6, r0
1000e78e:	1c70      	adds	r0, r6, #1
1000e790:	4061      	eors	r1, r4
1000e792:	9002      	str	r0, [sp, #8]
1000e794:	4317      	orrs	r7, r2
1000e796:	2f0f      	cmp	r7, #15
1000e798:	d900      	bls.n	1000e79c <__aeabi_dmul+0x90>
1000e79a:	e0af      	b.n	1000e8fc <__aeabi_dmul+0x1f0>
1000e79c:	4854      	ldr	r0, [pc, #336]	; (1000e8f0 <__aeabi_dmul+0x1e4>)
1000e79e:	00bf      	lsls	r7, r7, #2
1000e7a0:	59c7      	ldr	r7, [r0, r7]
1000e7a2:	46bf      	mov	pc, r7
1000e7a4:	465b      	mov	r3, fp
1000e7a6:	431f      	orrs	r7, r3
1000e7a8:	d000      	beq.n	1000e7ac <__aeabi_dmul+0xa0>
1000e7aa:	e088      	b.n	1000e8be <__aeabi_dmul+0x1b2>
1000e7ac:	2300      	movs	r3, #0
1000e7ae:	469b      	mov	fp, r3
1000e7b0:	4698      	mov	r8, r3
1000e7b2:	3302      	adds	r3, #2
1000e7b4:	2708      	movs	r7, #8
1000e7b6:	9301      	str	r3, [sp, #4]
1000e7b8:	e7ce      	b.n	1000e758 <__aeabi_dmul+0x4c>
1000e7ba:	4649      	mov	r1, r9
1000e7bc:	2a02      	cmp	r2, #2
1000e7be:	d06a      	beq.n	1000e896 <__aeabi_dmul+0x18a>
1000e7c0:	2a03      	cmp	r2, #3
1000e7c2:	d100      	bne.n	1000e7c6 <__aeabi_dmul+0xba>
1000e7c4:	e209      	b.n	1000ebda <__aeabi_dmul+0x4ce>
1000e7c6:	2a01      	cmp	r2, #1
1000e7c8:	d000      	beq.n	1000e7cc <__aeabi_dmul+0xc0>
1000e7ca:	e1bb      	b.n	1000eb44 <__aeabi_dmul+0x438>
1000e7cc:	4011      	ands	r1, r2
1000e7ce:	2200      	movs	r2, #0
1000e7d0:	2300      	movs	r3, #0
1000e7d2:	2500      	movs	r5, #0
1000e7d4:	4690      	mov	r8, r2
1000e7d6:	b2cc      	uxtb	r4, r1
1000e7d8:	2100      	movs	r1, #0
1000e7da:	032d      	lsls	r5, r5, #12
1000e7dc:	0d0a      	lsrs	r2, r1, #20
1000e7de:	0512      	lsls	r2, r2, #20
1000e7e0:	0b2d      	lsrs	r5, r5, #12
1000e7e2:	4315      	orrs	r5, r2
1000e7e4:	4a43      	ldr	r2, [pc, #268]	; (1000e8f4 <__aeabi_dmul+0x1e8>)
1000e7e6:	051b      	lsls	r3, r3, #20
1000e7e8:	4015      	ands	r5, r2
1000e7ea:	431d      	orrs	r5, r3
1000e7ec:	006d      	lsls	r5, r5, #1
1000e7ee:	07e4      	lsls	r4, r4, #31
1000e7f0:	086d      	lsrs	r5, r5, #1
1000e7f2:	4325      	orrs	r5, r4
1000e7f4:	4640      	mov	r0, r8
1000e7f6:	0029      	movs	r1, r5
1000e7f8:	b007      	add	sp, #28
1000e7fa:	bc3c      	pop	{r2, r3, r4, r5}
1000e7fc:	4690      	mov	r8, r2
1000e7fe:	4699      	mov	r9, r3
1000e800:	46a2      	mov	sl, r4
1000e802:	46ab      	mov	fp, r5
1000e804:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e806:	4303      	orrs	r3, r0
1000e808:	d052      	beq.n	1000e8b0 <__aeabi_dmul+0x1a4>
1000e80a:	465b      	mov	r3, fp
1000e80c:	2b00      	cmp	r3, #0
1000e80e:	d100      	bne.n	1000e812 <__aeabi_dmul+0x106>
1000e810:	e18a      	b.n	1000eb28 <__aeabi_dmul+0x41c>
1000e812:	4658      	mov	r0, fp
1000e814:	f000 fdf4 	bl	1000f400 <__clzsi2>
1000e818:	0003      	movs	r3, r0
1000e81a:	3b0b      	subs	r3, #11
1000e81c:	2b1c      	cmp	r3, #28
1000e81e:	dd00      	ble.n	1000e822 <__aeabi_dmul+0x116>
1000e820:	e17b      	b.n	1000eb1a <__aeabi_dmul+0x40e>
1000e822:	221d      	movs	r2, #29
1000e824:	1ad3      	subs	r3, r2, r3
1000e826:	003a      	movs	r2, r7
1000e828:	0001      	movs	r1, r0
1000e82a:	465d      	mov	r5, fp
1000e82c:	40da      	lsrs	r2, r3
1000e82e:	3908      	subs	r1, #8
1000e830:	408d      	lsls	r5, r1
1000e832:	0013      	movs	r3, r2
1000e834:	408f      	lsls	r7, r1
1000e836:	432b      	orrs	r3, r5
1000e838:	469b      	mov	fp, r3
1000e83a:	46b8      	mov	r8, r7
1000e83c:	4b2e      	ldr	r3, [pc, #184]	; (1000e8f8 <__aeabi_dmul+0x1ec>)
1000e83e:	2700      	movs	r7, #0
1000e840:	469c      	mov	ip, r3
1000e842:	2300      	movs	r3, #0
1000e844:	4460      	add	r0, ip
1000e846:	4246      	negs	r6, r0
1000e848:	9301      	str	r3, [sp, #4]
1000e84a:	e785      	b.n	1000e758 <__aeabi_dmul+0x4c>
1000e84c:	4652      	mov	r2, sl
1000e84e:	432a      	orrs	r2, r5
1000e850:	d12c      	bne.n	1000e8ac <__aeabi_dmul+0x1a0>
1000e852:	2500      	movs	r5, #0
1000e854:	2300      	movs	r3, #0
1000e856:	2202      	movs	r2, #2
1000e858:	e797      	b.n	1000e78a <__aeabi_dmul+0x7e>
1000e85a:	4652      	mov	r2, sl
1000e85c:	432a      	orrs	r2, r5
1000e85e:	d021      	beq.n	1000e8a4 <__aeabi_dmul+0x198>
1000e860:	2d00      	cmp	r5, #0
1000e862:	d100      	bne.n	1000e866 <__aeabi_dmul+0x15a>
1000e864:	e154      	b.n	1000eb10 <__aeabi_dmul+0x404>
1000e866:	0028      	movs	r0, r5
1000e868:	f000 fdca 	bl	1000f400 <__clzsi2>
1000e86c:	0003      	movs	r3, r0
1000e86e:	3b0b      	subs	r3, #11
1000e870:	2b1c      	cmp	r3, #28
1000e872:	dd00      	ble.n	1000e876 <__aeabi_dmul+0x16a>
1000e874:	e146      	b.n	1000eb04 <__aeabi_dmul+0x3f8>
1000e876:	211d      	movs	r1, #29
1000e878:	1acb      	subs	r3, r1, r3
1000e87a:	4651      	mov	r1, sl
1000e87c:	0002      	movs	r2, r0
1000e87e:	40d9      	lsrs	r1, r3
1000e880:	4653      	mov	r3, sl
1000e882:	3a08      	subs	r2, #8
1000e884:	4095      	lsls	r5, r2
1000e886:	4093      	lsls	r3, r2
1000e888:	430d      	orrs	r5, r1
1000e88a:	4a1b      	ldr	r2, [pc, #108]	; (1000e8f8 <__aeabi_dmul+0x1ec>)
1000e88c:	4694      	mov	ip, r2
1000e88e:	4460      	add	r0, ip
1000e890:	4240      	negs	r0, r0
1000e892:	2200      	movs	r2, #0
1000e894:	e779      	b.n	1000e78a <__aeabi_dmul+0x7e>
1000e896:	2401      	movs	r4, #1
1000e898:	2200      	movs	r2, #0
1000e89a:	400c      	ands	r4, r1
1000e89c:	4b12      	ldr	r3, [pc, #72]	; (1000e8e8 <__aeabi_dmul+0x1dc>)
1000e89e:	2500      	movs	r5, #0
1000e8a0:	4690      	mov	r8, r2
1000e8a2:	e799      	b.n	1000e7d8 <__aeabi_dmul+0xcc>
1000e8a4:	2500      	movs	r5, #0
1000e8a6:	2300      	movs	r3, #0
1000e8a8:	2201      	movs	r2, #1
1000e8aa:	e76e      	b.n	1000e78a <__aeabi_dmul+0x7e>
1000e8ac:	2203      	movs	r2, #3
1000e8ae:	e76c      	b.n	1000e78a <__aeabi_dmul+0x7e>
1000e8b0:	2300      	movs	r3, #0
1000e8b2:	469b      	mov	fp, r3
1000e8b4:	4698      	mov	r8, r3
1000e8b6:	3301      	adds	r3, #1
1000e8b8:	2704      	movs	r7, #4
1000e8ba:	9301      	str	r3, [sp, #4]
1000e8bc:	e74c      	b.n	1000e758 <__aeabi_dmul+0x4c>
1000e8be:	2303      	movs	r3, #3
1000e8c0:	270c      	movs	r7, #12
1000e8c2:	9301      	str	r3, [sp, #4]
1000e8c4:	e748      	b.n	1000e758 <__aeabi_dmul+0x4c>
1000e8c6:	2300      	movs	r3, #0
1000e8c8:	2580      	movs	r5, #128	; 0x80
1000e8ca:	4698      	mov	r8, r3
1000e8cc:	2400      	movs	r4, #0
1000e8ce:	032d      	lsls	r5, r5, #12
1000e8d0:	4b05      	ldr	r3, [pc, #20]	; (1000e8e8 <__aeabi_dmul+0x1dc>)
1000e8d2:	e781      	b.n	1000e7d8 <__aeabi_dmul+0xcc>
1000e8d4:	465d      	mov	r5, fp
1000e8d6:	4643      	mov	r3, r8
1000e8d8:	9a01      	ldr	r2, [sp, #4]
1000e8da:	e76f      	b.n	1000e7bc <__aeabi_dmul+0xb0>
1000e8dc:	465d      	mov	r5, fp
1000e8de:	4643      	mov	r3, r8
1000e8e0:	0021      	movs	r1, r4
1000e8e2:	9a01      	ldr	r2, [sp, #4]
1000e8e4:	e76a      	b.n	1000e7bc <__aeabi_dmul+0xb0>
1000e8e6:	46c0      	nop			; (mov r8, r8)
1000e8e8:	000007ff 	.word	0x000007ff
1000e8ec:	fffffc01 	.word	0xfffffc01
1000e8f0:	10011724 	.word	0x10011724
1000e8f4:	800fffff 	.word	0x800fffff
1000e8f8:	000003f3 	.word	0x000003f3
1000e8fc:	4642      	mov	r2, r8
1000e8fe:	0c12      	lsrs	r2, r2, #16
1000e900:	4691      	mov	r9, r2
1000e902:	0c1a      	lsrs	r2, r3, #16
1000e904:	4694      	mov	ip, r2
1000e906:	4642      	mov	r2, r8
1000e908:	0417      	lsls	r7, r2, #16
1000e90a:	464a      	mov	r2, r9
1000e90c:	041b      	lsls	r3, r3, #16
1000e90e:	0c1b      	lsrs	r3, r3, #16
1000e910:	435a      	muls	r2, r3
1000e912:	4660      	mov	r0, ip
1000e914:	4690      	mov	r8, r2
1000e916:	464a      	mov	r2, r9
1000e918:	4342      	muls	r2, r0
1000e91a:	0010      	movs	r0, r2
1000e91c:	9203      	str	r2, [sp, #12]
1000e91e:	4662      	mov	r2, ip
1000e920:	001c      	movs	r4, r3
1000e922:	0c3f      	lsrs	r7, r7, #16
1000e924:	437a      	muls	r2, r7
1000e926:	437c      	muls	r4, r7
1000e928:	4442      	add	r2, r8
1000e92a:	9201      	str	r2, [sp, #4]
1000e92c:	0c22      	lsrs	r2, r4, #16
1000e92e:	4692      	mov	sl, r2
1000e930:	9a01      	ldr	r2, [sp, #4]
1000e932:	4452      	add	r2, sl
1000e934:	4590      	cmp	r8, r2
1000e936:	d906      	bls.n	1000e946 <__aeabi_dmul+0x23a>
1000e938:	4682      	mov	sl, r0
1000e93a:	2080      	movs	r0, #128	; 0x80
1000e93c:	0240      	lsls	r0, r0, #9
1000e93e:	4680      	mov	r8, r0
1000e940:	44c2      	add	sl, r8
1000e942:	4650      	mov	r0, sl
1000e944:	9003      	str	r0, [sp, #12]
1000e946:	0c10      	lsrs	r0, r2, #16
1000e948:	9004      	str	r0, [sp, #16]
1000e94a:	4648      	mov	r0, r9
1000e94c:	0424      	lsls	r4, r4, #16
1000e94e:	0c24      	lsrs	r4, r4, #16
1000e950:	0412      	lsls	r2, r2, #16
1000e952:	1912      	adds	r2, r2, r4
1000e954:	9205      	str	r2, [sp, #20]
1000e956:	0c2a      	lsrs	r2, r5, #16
1000e958:	042d      	lsls	r5, r5, #16
1000e95a:	0c2d      	lsrs	r5, r5, #16
1000e95c:	4368      	muls	r0, r5
1000e95e:	002c      	movs	r4, r5
1000e960:	4682      	mov	sl, r0
1000e962:	4648      	mov	r0, r9
1000e964:	437c      	muls	r4, r7
1000e966:	4350      	muls	r0, r2
1000e968:	4681      	mov	r9, r0
1000e96a:	0c20      	lsrs	r0, r4, #16
1000e96c:	4680      	mov	r8, r0
1000e96e:	4357      	muls	r7, r2
1000e970:	4457      	add	r7, sl
1000e972:	4447      	add	r7, r8
1000e974:	45ba      	cmp	sl, r7
1000e976:	d903      	bls.n	1000e980 <__aeabi_dmul+0x274>
1000e978:	2080      	movs	r0, #128	; 0x80
1000e97a:	0240      	lsls	r0, r0, #9
1000e97c:	4680      	mov	r8, r0
1000e97e:	44c1      	add	r9, r8
1000e980:	0c38      	lsrs	r0, r7, #16
1000e982:	043f      	lsls	r7, r7, #16
1000e984:	46b8      	mov	r8, r7
1000e986:	4448      	add	r0, r9
1000e988:	0424      	lsls	r4, r4, #16
1000e98a:	0c24      	lsrs	r4, r4, #16
1000e98c:	9001      	str	r0, [sp, #4]
1000e98e:	9804      	ldr	r0, [sp, #16]
1000e990:	44a0      	add	r8, r4
1000e992:	4440      	add	r0, r8
1000e994:	9004      	str	r0, [sp, #16]
1000e996:	4658      	mov	r0, fp
1000e998:	0c00      	lsrs	r0, r0, #16
1000e99a:	4681      	mov	r9, r0
1000e99c:	4658      	mov	r0, fp
1000e99e:	0404      	lsls	r4, r0, #16
1000e9a0:	0c20      	lsrs	r0, r4, #16
1000e9a2:	4682      	mov	sl, r0
1000e9a4:	0007      	movs	r7, r0
1000e9a6:	4648      	mov	r0, r9
1000e9a8:	435f      	muls	r7, r3
1000e9aa:	464c      	mov	r4, r9
1000e9ac:	4343      	muls	r3, r0
1000e9ae:	4660      	mov	r0, ip
1000e9b0:	4360      	muls	r0, r4
1000e9b2:	4664      	mov	r4, ip
1000e9b4:	4683      	mov	fp, r0
1000e9b6:	4650      	mov	r0, sl
1000e9b8:	4344      	muls	r4, r0
1000e9ba:	0c38      	lsrs	r0, r7, #16
1000e9bc:	4684      	mov	ip, r0
1000e9be:	18e4      	adds	r4, r4, r3
1000e9c0:	4464      	add	r4, ip
1000e9c2:	42a3      	cmp	r3, r4
1000e9c4:	d903      	bls.n	1000e9ce <__aeabi_dmul+0x2c2>
1000e9c6:	2380      	movs	r3, #128	; 0x80
1000e9c8:	025b      	lsls	r3, r3, #9
1000e9ca:	469c      	mov	ip, r3
1000e9cc:	44e3      	add	fp, ip
1000e9ce:	4648      	mov	r0, r9
1000e9d0:	043f      	lsls	r7, r7, #16
1000e9d2:	0c23      	lsrs	r3, r4, #16
1000e9d4:	0c3f      	lsrs	r7, r7, #16
1000e9d6:	0424      	lsls	r4, r4, #16
1000e9d8:	19e4      	adds	r4, r4, r7
1000e9da:	4657      	mov	r7, sl
1000e9dc:	4368      	muls	r0, r5
1000e9de:	436f      	muls	r7, r5
1000e9e0:	4684      	mov	ip, r0
1000e9e2:	464d      	mov	r5, r9
1000e9e4:	4650      	mov	r0, sl
1000e9e6:	4355      	muls	r5, r2
1000e9e8:	4342      	muls	r2, r0
1000e9ea:	0c38      	lsrs	r0, r7, #16
1000e9ec:	4681      	mov	r9, r0
1000e9ee:	4462      	add	r2, ip
1000e9f0:	444a      	add	r2, r9
1000e9f2:	445b      	add	r3, fp
1000e9f4:	4594      	cmp	ip, r2
1000e9f6:	d903      	bls.n	1000ea00 <__aeabi_dmul+0x2f4>
1000e9f8:	2080      	movs	r0, #128	; 0x80
1000e9fa:	0240      	lsls	r0, r0, #9
1000e9fc:	4684      	mov	ip, r0
1000e9fe:	4465      	add	r5, ip
1000ea00:	9803      	ldr	r0, [sp, #12]
1000ea02:	043f      	lsls	r7, r7, #16
1000ea04:	4683      	mov	fp, r0
1000ea06:	9804      	ldr	r0, [sp, #16]
1000ea08:	0c3f      	lsrs	r7, r7, #16
1000ea0a:	4684      	mov	ip, r0
1000ea0c:	44e3      	add	fp, ip
1000ea0e:	45c3      	cmp	fp, r8
1000ea10:	4180      	sbcs	r0, r0
1000ea12:	4240      	negs	r0, r0
1000ea14:	4682      	mov	sl, r0
1000ea16:	0410      	lsls	r0, r2, #16
1000ea18:	4684      	mov	ip, r0
1000ea1a:	9801      	ldr	r0, [sp, #4]
1000ea1c:	4467      	add	r7, ip
1000ea1e:	4684      	mov	ip, r0
1000ea20:	4467      	add	r7, ip
1000ea22:	44a3      	add	fp, r4
1000ea24:	46bc      	mov	ip, r7
1000ea26:	45a3      	cmp	fp, r4
1000ea28:	41a4      	sbcs	r4, r4
1000ea2a:	4699      	mov	r9, r3
1000ea2c:	44d4      	add	ip, sl
1000ea2e:	4264      	negs	r4, r4
1000ea30:	4287      	cmp	r7, r0
1000ea32:	41bf      	sbcs	r7, r7
1000ea34:	45d4      	cmp	ip, sl
1000ea36:	4180      	sbcs	r0, r0
1000ea38:	44e1      	add	r9, ip
1000ea3a:	46a0      	mov	r8, r4
1000ea3c:	4599      	cmp	r9, r3
1000ea3e:	419b      	sbcs	r3, r3
1000ea40:	427f      	negs	r7, r7
1000ea42:	4240      	negs	r0, r0
1000ea44:	44c8      	add	r8, r9
1000ea46:	4307      	orrs	r7, r0
1000ea48:	0c12      	lsrs	r2, r2, #16
1000ea4a:	18ba      	adds	r2, r7, r2
1000ea4c:	45a0      	cmp	r8, r4
1000ea4e:	41a4      	sbcs	r4, r4
1000ea50:	425f      	negs	r7, r3
1000ea52:	003b      	movs	r3, r7
1000ea54:	4264      	negs	r4, r4
1000ea56:	4323      	orrs	r3, r4
1000ea58:	18d7      	adds	r7, r2, r3
1000ea5a:	4643      	mov	r3, r8
1000ea5c:	197d      	adds	r5, r7, r5
1000ea5e:	0ddb      	lsrs	r3, r3, #23
1000ea60:	026d      	lsls	r5, r5, #9
1000ea62:	431d      	orrs	r5, r3
1000ea64:	465b      	mov	r3, fp
1000ea66:	025a      	lsls	r2, r3, #9
1000ea68:	9b05      	ldr	r3, [sp, #20]
1000ea6a:	431a      	orrs	r2, r3
1000ea6c:	1e53      	subs	r3, r2, #1
1000ea6e:	419a      	sbcs	r2, r3
1000ea70:	465b      	mov	r3, fp
1000ea72:	0ddb      	lsrs	r3, r3, #23
1000ea74:	431a      	orrs	r2, r3
1000ea76:	4643      	mov	r3, r8
1000ea78:	025b      	lsls	r3, r3, #9
1000ea7a:	4313      	orrs	r3, r2
1000ea7c:	01ea      	lsls	r2, r5, #7
1000ea7e:	d507      	bpl.n	1000ea90 <__aeabi_dmul+0x384>
1000ea80:	2201      	movs	r2, #1
1000ea82:	085c      	lsrs	r4, r3, #1
1000ea84:	4013      	ands	r3, r2
1000ea86:	4323      	orrs	r3, r4
1000ea88:	07ea      	lsls	r2, r5, #31
1000ea8a:	9e02      	ldr	r6, [sp, #8]
1000ea8c:	4313      	orrs	r3, r2
1000ea8e:	086d      	lsrs	r5, r5, #1
1000ea90:	4a57      	ldr	r2, [pc, #348]	; (1000ebf0 <__aeabi_dmul+0x4e4>)
1000ea92:	18b2      	adds	r2, r6, r2
1000ea94:	2a00      	cmp	r2, #0
1000ea96:	dd4b      	ble.n	1000eb30 <__aeabi_dmul+0x424>
1000ea98:	0758      	lsls	r0, r3, #29
1000ea9a:	d009      	beq.n	1000eab0 <__aeabi_dmul+0x3a4>
1000ea9c:	200f      	movs	r0, #15
1000ea9e:	4018      	ands	r0, r3
1000eaa0:	2804      	cmp	r0, #4
1000eaa2:	d005      	beq.n	1000eab0 <__aeabi_dmul+0x3a4>
1000eaa4:	1d18      	adds	r0, r3, #4
1000eaa6:	4298      	cmp	r0, r3
1000eaa8:	419b      	sbcs	r3, r3
1000eaaa:	425b      	negs	r3, r3
1000eaac:	18ed      	adds	r5, r5, r3
1000eaae:	0003      	movs	r3, r0
1000eab0:	01e8      	lsls	r0, r5, #7
1000eab2:	d504      	bpl.n	1000eabe <__aeabi_dmul+0x3b2>
1000eab4:	4a4f      	ldr	r2, [pc, #316]	; (1000ebf4 <__aeabi_dmul+0x4e8>)
1000eab6:	4015      	ands	r5, r2
1000eab8:	2280      	movs	r2, #128	; 0x80
1000eaba:	00d2      	lsls	r2, r2, #3
1000eabc:	18b2      	adds	r2, r6, r2
1000eabe:	484e      	ldr	r0, [pc, #312]	; (1000ebf8 <__aeabi_dmul+0x4ec>)
1000eac0:	4282      	cmp	r2, r0
1000eac2:	dd00      	ble.n	1000eac6 <__aeabi_dmul+0x3ba>
1000eac4:	e6e7      	b.n	1000e896 <__aeabi_dmul+0x18a>
1000eac6:	2401      	movs	r4, #1
1000eac8:	08db      	lsrs	r3, r3, #3
1000eaca:	0768      	lsls	r0, r5, #29
1000eacc:	4318      	orrs	r0, r3
1000eace:	026d      	lsls	r5, r5, #9
1000ead0:	0553      	lsls	r3, r2, #21
1000ead2:	4680      	mov	r8, r0
1000ead4:	0b2d      	lsrs	r5, r5, #12
1000ead6:	0d5b      	lsrs	r3, r3, #21
1000ead8:	400c      	ands	r4, r1
1000eada:	e67d      	b.n	1000e7d8 <__aeabi_dmul+0xcc>
1000eadc:	2280      	movs	r2, #128	; 0x80
1000eade:	4659      	mov	r1, fp
1000eae0:	0312      	lsls	r2, r2, #12
1000eae2:	4211      	tst	r1, r2
1000eae4:	d008      	beq.n	1000eaf8 <__aeabi_dmul+0x3ec>
1000eae6:	4215      	tst	r5, r2
1000eae8:	d106      	bne.n	1000eaf8 <__aeabi_dmul+0x3ec>
1000eaea:	4315      	orrs	r5, r2
1000eaec:	032d      	lsls	r5, r5, #12
1000eaee:	4698      	mov	r8, r3
1000eaf0:	0b2d      	lsrs	r5, r5, #12
1000eaf2:	464c      	mov	r4, r9
1000eaf4:	4b41      	ldr	r3, [pc, #260]	; (1000ebfc <__aeabi_dmul+0x4f0>)
1000eaf6:	e66f      	b.n	1000e7d8 <__aeabi_dmul+0xcc>
1000eaf8:	465d      	mov	r5, fp
1000eafa:	4315      	orrs	r5, r2
1000eafc:	032d      	lsls	r5, r5, #12
1000eafe:	0b2d      	lsrs	r5, r5, #12
1000eb00:	4b3e      	ldr	r3, [pc, #248]	; (1000ebfc <__aeabi_dmul+0x4f0>)
1000eb02:	e669      	b.n	1000e7d8 <__aeabi_dmul+0xcc>
1000eb04:	0003      	movs	r3, r0
1000eb06:	4655      	mov	r5, sl
1000eb08:	3b28      	subs	r3, #40	; 0x28
1000eb0a:	409d      	lsls	r5, r3
1000eb0c:	2300      	movs	r3, #0
1000eb0e:	e6bc      	b.n	1000e88a <__aeabi_dmul+0x17e>
1000eb10:	4650      	mov	r0, sl
1000eb12:	f000 fc75 	bl	1000f400 <__clzsi2>
1000eb16:	3020      	adds	r0, #32
1000eb18:	e6a8      	b.n	1000e86c <__aeabi_dmul+0x160>
1000eb1a:	0003      	movs	r3, r0
1000eb1c:	3b28      	subs	r3, #40	; 0x28
1000eb1e:	409f      	lsls	r7, r3
1000eb20:	2300      	movs	r3, #0
1000eb22:	46bb      	mov	fp, r7
1000eb24:	4698      	mov	r8, r3
1000eb26:	e689      	b.n	1000e83c <__aeabi_dmul+0x130>
1000eb28:	f000 fc6a 	bl	1000f400 <__clzsi2>
1000eb2c:	3020      	adds	r0, #32
1000eb2e:	e673      	b.n	1000e818 <__aeabi_dmul+0x10c>
1000eb30:	2401      	movs	r4, #1
1000eb32:	1aa6      	subs	r6, r4, r2
1000eb34:	2e38      	cmp	r6, #56	; 0x38
1000eb36:	dd07      	ble.n	1000eb48 <__aeabi_dmul+0x43c>
1000eb38:	2200      	movs	r2, #0
1000eb3a:	400c      	ands	r4, r1
1000eb3c:	2300      	movs	r3, #0
1000eb3e:	2500      	movs	r5, #0
1000eb40:	4690      	mov	r8, r2
1000eb42:	e649      	b.n	1000e7d8 <__aeabi_dmul+0xcc>
1000eb44:	9e02      	ldr	r6, [sp, #8]
1000eb46:	e7a3      	b.n	1000ea90 <__aeabi_dmul+0x384>
1000eb48:	2e1f      	cmp	r6, #31
1000eb4a:	dc20      	bgt.n	1000eb8e <__aeabi_dmul+0x482>
1000eb4c:	2220      	movs	r2, #32
1000eb4e:	002c      	movs	r4, r5
1000eb50:	0018      	movs	r0, r3
1000eb52:	1b92      	subs	r2, r2, r6
1000eb54:	40f0      	lsrs	r0, r6
1000eb56:	4094      	lsls	r4, r2
1000eb58:	4093      	lsls	r3, r2
1000eb5a:	4304      	orrs	r4, r0
1000eb5c:	1e58      	subs	r0, r3, #1
1000eb5e:	4183      	sbcs	r3, r0
1000eb60:	431c      	orrs	r4, r3
1000eb62:	40f5      	lsrs	r5, r6
1000eb64:	0763      	lsls	r3, r4, #29
1000eb66:	d009      	beq.n	1000eb7c <__aeabi_dmul+0x470>
1000eb68:	230f      	movs	r3, #15
1000eb6a:	4023      	ands	r3, r4
1000eb6c:	2b04      	cmp	r3, #4
1000eb6e:	d005      	beq.n	1000eb7c <__aeabi_dmul+0x470>
1000eb70:	0023      	movs	r3, r4
1000eb72:	1d1c      	adds	r4, r3, #4
1000eb74:	429c      	cmp	r4, r3
1000eb76:	4192      	sbcs	r2, r2
1000eb78:	4252      	negs	r2, r2
1000eb7a:	18ad      	adds	r5, r5, r2
1000eb7c:	022b      	lsls	r3, r5, #8
1000eb7e:	d51f      	bpl.n	1000ebc0 <__aeabi_dmul+0x4b4>
1000eb80:	2401      	movs	r4, #1
1000eb82:	2200      	movs	r2, #0
1000eb84:	400c      	ands	r4, r1
1000eb86:	2301      	movs	r3, #1
1000eb88:	2500      	movs	r5, #0
1000eb8a:	4690      	mov	r8, r2
1000eb8c:	e624      	b.n	1000e7d8 <__aeabi_dmul+0xcc>
1000eb8e:	201f      	movs	r0, #31
1000eb90:	002c      	movs	r4, r5
1000eb92:	4240      	negs	r0, r0
1000eb94:	1a82      	subs	r2, r0, r2
1000eb96:	40d4      	lsrs	r4, r2
1000eb98:	2e20      	cmp	r6, #32
1000eb9a:	d01c      	beq.n	1000ebd6 <__aeabi_dmul+0x4ca>
1000eb9c:	2240      	movs	r2, #64	; 0x40
1000eb9e:	1b96      	subs	r6, r2, r6
1000eba0:	40b5      	lsls	r5, r6
1000eba2:	432b      	orrs	r3, r5
1000eba4:	1e58      	subs	r0, r3, #1
1000eba6:	4183      	sbcs	r3, r0
1000eba8:	2007      	movs	r0, #7
1000ebaa:	4323      	orrs	r3, r4
1000ebac:	4018      	ands	r0, r3
1000ebae:	2500      	movs	r5, #0
1000ebb0:	2800      	cmp	r0, #0
1000ebb2:	d009      	beq.n	1000ebc8 <__aeabi_dmul+0x4bc>
1000ebb4:	220f      	movs	r2, #15
1000ebb6:	2500      	movs	r5, #0
1000ebb8:	401a      	ands	r2, r3
1000ebba:	001c      	movs	r4, r3
1000ebbc:	2a04      	cmp	r2, #4
1000ebbe:	d1d8      	bne.n	1000eb72 <__aeabi_dmul+0x466>
1000ebc0:	0023      	movs	r3, r4
1000ebc2:	0768      	lsls	r0, r5, #29
1000ebc4:	026d      	lsls	r5, r5, #9
1000ebc6:	0b2d      	lsrs	r5, r5, #12
1000ebc8:	2401      	movs	r4, #1
1000ebca:	08db      	lsrs	r3, r3, #3
1000ebcc:	4303      	orrs	r3, r0
1000ebce:	4698      	mov	r8, r3
1000ebd0:	400c      	ands	r4, r1
1000ebd2:	2300      	movs	r3, #0
1000ebd4:	e600      	b.n	1000e7d8 <__aeabi_dmul+0xcc>
1000ebd6:	2500      	movs	r5, #0
1000ebd8:	e7e3      	b.n	1000eba2 <__aeabi_dmul+0x496>
1000ebda:	2280      	movs	r2, #128	; 0x80
1000ebdc:	2401      	movs	r4, #1
1000ebde:	0312      	lsls	r2, r2, #12
1000ebe0:	4315      	orrs	r5, r2
1000ebe2:	032d      	lsls	r5, r5, #12
1000ebe4:	4698      	mov	r8, r3
1000ebe6:	0b2d      	lsrs	r5, r5, #12
1000ebe8:	400c      	ands	r4, r1
1000ebea:	4b04      	ldr	r3, [pc, #16]	; (1000ebfc <__aeabi_dmul+0x4f0>)
1000ebec:	e5f4      	b.n	1000e7d8 <__aeabi_dmul+0xcc>
1000ebee:	46c0      	nop			; (mov r8, r8)
1000ebf0:	000003ff 	.word	0x000003ff
1000ebf4:	feffffff 	.word	0xfeffffff
1000ebf8:	000007fe 	.word	0x000007fe
1000ebfc:	000007ff 	.word	0x000007ff

1000ec00 <__aeabi_dsub>:
1000ec00:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ec02:	4657      	mov	r7, sl
1000ec04:	464e      	mov	r6, r9
1000ec06:	4645      	mov	r5, r8
1000ec08:	b4e0      	push	{r5, r6, r7}
1000ec0a:	000e      	movs	r6, r1
1000ec0c:	0011      	movs	r1, r2
1000ec0e:	0ff2      	lsrs	r2, r6, #31
1000ec10:	4692      	mov	sl, r2
1000ec12:	00c5      	lsls	r5, r0, #3
1000ec14:	0f42      	lsrs	r2, r0, #29
1000ec16:	0318      	lsls	r0, r3, #12
1000ec18:	0337      	lsls	r7, r6, #12
1000ec1a:	0074      	lsls	r4, r6, #1
1000ec1c:	0a40      	lsrs	r0, r0, #9
1000ec1e:	0f4e      	lsrs	r6, r1, #29
1000ec20:	0a7f      	lsrs	r7, r7, #9
1000ec22:	4330      	orrs	r0, r6
1000ec24:	4ecf      	ldr	r6, [pc, #828]	; (1000ef64 <__aeabi_dsub+0x364>)
1000ec26:	4317      	orrs	r7, r2
1000ec28:	005a      	lsls	r2, r3, #1
1000ec2a:	0d64      	lsrs	r4, r4, #21
1000ec2c:	0d52      	lsrs	r2, r2, #21
1000ec2e:	0fdb      	lsrs	r3, r3, #31
1000ec30:	00c9      	lsls	r1, r1, #3
1000ec32:	42b2      	cmp	r2, r6
1000ec34:	d100      	bne.n	1000ec38 <__aeabi_dsub+0x38>
1000ec36:	e0e5      	b.n	1000ee04 <__aeabi_dsub+0x204>
1000ec38:	2601      	movs	r6, #1
1000ec3a:	4073      	eors	r3, r6
1000ec3c:	1aa6      	subs	r6, r4, r2
1000ec3e:	46b4      	mov	ip, r6
1000ec40:	4553      	cmp	r3, sl
1000ec42:	d100      	bne.n	1000ec46 <__aeabi_dsub+0x46>
1000ec44:	e0af      	b.n	1000eda6 <__aeabi_dsub+0x1a6>
1000ec46:	2e00      	cmp	r6, #0
1000ec48:	dc00      	bgt.n	1000ec4c <__aeabi_dsub+0x4c>
1000ec4a:	e10d      	b.n	1000ee68 <__aeabi_dsub+0x268>
1000ec4c:	2a00      	cmp	r2, #0
1000ec4e:	d13a      	bne.n	1000ecc6 <__aeabi_dsub+0xc6>
1000ec50:	0003      	movs	r3, r0
1000ec52:	430b      	orrs	r3, r1
1000ec54:	d000      	beq.n	1000ec58 <__aeabi_dsub+0x58>
1000ec56:	e0e4      	b.n	1000ee22 <__aeabi_dsub+0x222>
1000ec58:	076b      	lsls	r3, r5, #29
1000ec5a:	d009      	beq.n	1000ec70 <__aeabi_dsub+0x70>
1000ec5c:	230f      	movs	r3, #15
1000ec5e:	402b      	ands	r3, r5
1000ec60:	2b04      	cmp	r3, #4
1000ec62:	d005      	beq.n	1000ec70 <__aeabi_dsub+0x70>
1000ec64:	1d2b      	adds	r3, r5, #4
1000ec66:	42ab      	cmp	r3, r5
1000ec68:	41ad      	sbcs	r5, r5
1000ec6a:	426d      	negs	r5, r5
1000ec6c:	197f      	adds	r7, r7, r5
1000ec6e:	001d      	movs	r5, r3
1000ec70:	023b      	lsls	r3, r7, #8
1000ec72:	d400      	bmi.n	1000ec76 <__aeabi_dsub+0x76>
1000ec74:	e088      	b.n	1000ed88 <__aeabi_dsub+0x188>
1000ec76:	4bbb      	ldr	r3, [pc, #748]	; (1000ef64 <__aeabi_dsub+0x364>)
1000ec78:	3401      	adds	r4, #1
1000ec7a:	429c      	cmp	r4, r3
1000ec7c:	d100      	bne.n	1000ec80 <__aeabi_dsub+0x80>
1000ec7e:	e110      	b.n	1000eea2 <__aeabi_dsub+0x2a2>
1000ec80:	003a      	movs	r2, r7
1000ec82:	4bb9      	ldr	r3, [pc, #740]	; (1000ef68 <__aeabi_dsub+0x368>)
1000ec84:	4651      	mov	r1, sl
1000ec86:	401a      	ands	r2, r3
1000ec88:	2301      	movs	r3, #1
1000ec8a:	0750      	lsls	r0, r2, #29
1000ec8c:	08ed      	lsrs	r5, r5, #3
1000ec8e:	0252      	lsls	r2, r2, #9
1000ec90:	0564      	lsls	r4, r4, #21
1000ec92:	4305      	orrs	r5, r0
1000ec94:	0b12      	lsrs	r2, r2, #12
1000ec96:	0d64      	lsrs	r4, r4, #21
1000ec98:	400b      	ands	r3, r1
1000ec9a:	2100      	movs	r1, #0
1000ec9c:	0028      	movs	r0, r5
1000ec9e:	0312      	lsls	r2, r2, #12
1000eca0:	0d0d      	lsrs	r5, r1, #20
1000eca2:	0b12      	lsrs	r2, r2, #12
1000eca4:	0564      	lsls	r4, r4, #21
1000eca6:	052d      	lsls	r5, r5, #20
1000eca8:	4315      	orrs	r5, r2
1000ecaa:	0862      	lsrs	r2, r4, #1
1000ecac:	4caf      	ldr	r4, [pc, #700]	; (1000ef6c <__aeabi_dsub+0x36c>)
1000ecae:	07db      	lsls	r3, r3, #31
1000ecb0:	402c      	ands	r4, r5
1000ecb2:	4314      	orrs	r4, r2
1000ecb4:	0064      	lsls	r4, r4, #1
1000ecb6:	0864      	lsrs	r4, r4, #1
1000ecb8:	431c      	orrs	r4, r3
1000ecba:	0021      	movs	r1, r4
1000ecbc:	bc1c      	pop	{r2, r3, r4}
1000ecbe:	4690      	mov	r8, r2
1000ecc0:	4699      	mov	r9, r3
1000ecc2:	46a2      	mov	sl, r4
1000ecc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ecc6:	4ba7      	ldr	r3, [pc, #668]	; (1000ef64 <__aeabi_dsub+0x364>)
1000ecc8:	429c      	cmp	r4, r3
1000ecca:	d0c5      	beq.n	1000ec58 <__aeabi_dsub+0x58>
1000eccc:	2380      	movs	r3, #128	; 0x80
1000ecce:	041b      	lsls	r3, r3, #16
1000ecd0:	4318      	orrs	r0, r3
1000ecd2:	4663      	mov	r3, ip
1000ecd4:	2b38      	cmp	r3, #56	; 0x38
1000ecd6:	dd00      	ble.n	1000ecda <__aeabi_dsub+0xda>
1000ecd8:	e0fd      	b.n	1000eed6 <__aeabi_dsub+0x2d6>
1000ecda:	2b1f      	cmp	r3, #31
1000ecdc:	dd00      	ble.n	1000ece0 <__aeabi_dsub+0xe0>
1000ecde:	e130      	b.n	1000ef42 <__aeabi_dsub+0x342>
1000ece0:	4662      	mov	r2, ip
1000ece2:	2320      	movs	r3, #32
1000ece4:	1a9b      	subs	r3, r3, r2
1000ece6:	0002      	movs	r2, r0
1000ece8:	409a      	lsls	r2, r3
1000ecea:	4666      	mov	r6, ip
1000ecec:	4690      	mov	r8, r2
1000ecee:	000a      	movs	r2, r1
1000ecf0:	4099      	lsls	r1, r3
1000ecf2:	40f2      	lsrs	r2, r6
1000ecf4:	4646      	mov	r6, r8
1000ecf6:	1e4b      	subs	r3, r1, #1
1000ecf8:	4199      	sbcs	r1, r3
1000ecfa:	4332      	orrs	r2, r6
1000ecfc:	4311      	orrs	r1, r2
1000ecfe:	4663      	mov	r3, ip
1000ed00:	0002      	movs	r2, r0
1000ed02:	40da      	lsrs	r2, r3
1000ed04:	1a69      	subs	r1, r5, r1
1000ed06:	428d      	cmp	r5, r1
1000ed08:	419b      	sbcs	r3, r3
1000ed0a:	000d      	movs	r5, r1
1000ed0c:	1aba      	subs	r2, r7, r2
1000ed0e:	425b      	negs	r3, r3
1000ed10:	1ad7      	subs	r7, r2, r3
1000ed12:	023b      	lsls	r3, r7, #8
1000ed14:	d535      	bpl.n	1000ed82 <__aeabi_dsub+0x182>
1000ed16:	027a      	lsls	r2, r7, #9
1000ed18:	0a53      	lsrs	r3, r2, #9
1000ed1a:	4698      	mov	r8, r3
1000ed1c:	4643      	mov	r3, r8
1000ed1e:	2b00      	cmp	r3, #0
1000ed20:	d100      	bne.n	1000ed24 <__aeabi_dsub+0x124>
1000ed22:	e0c4      	b.n	1000eeae <__aeabi_dsub+0x2ae>
1000ed24:	4640      	mov	r0, r8
1000ed26:	f000 fb6b 	bl	1000f400 <__clzsi2>
1000ed2a:	0003      	movs	r3, r0
1000ed2c:	3b08      	subs	r3, #8
1000ed2e:	2b1f      	cmp	r3, #31
1000ed30:	dd00      	ble.n	1000ed34 <__aeabi_dsub+0x134>
1000ed32:	e0c5      	b.n	1000eec0 <__aeabi_dsub+0x2c0>
1000ed34:	2220      	movs	r2, #32
1000ed36:	0029      	movs	r1, r5
1000ed38:	1ad2      	subs	r2, r2, r3
1000ed3a:	4647      	mov	r7, r8
1000ed3c:	40d1      	lsrs	r1, r2
1000ed3e:	409f      	lsls	r7, r3
1000ed40:	000a      	movs	r2, r1
1000ed42:	409d      	lsls	r5, r3
1000ed44:	433a      	orrs	r2, r7
1000ed46:	429c      	cmp	r4, r3
1000ed48:	dd00      	ble.n	1000ed4c <__aeabi_dsub+0x14c>
1000ed4a:	e0c0      	b.n	1000eece <__aeabi_dsub+0x2ce>
1000ed4c:	1b1c      	subs	r4, r3, r4
1000ed4e:	1c63      	adds	r3, r4, #1
1000ed50:	2b1f      	cmp	r3, #31
1000ed52:	dd00      	ble.n	1000ed56 <__aeabi_dsub+0x156>
1000ed54:	e0e4      	b.n	1000ef20 <__aeabi_dsub+0x320>
1000ed56:	2120      	movs	r1, #32
1000ed58:	0014      	movs	r4, r2
1000ed5a:	0028      	movs	r0, r5
1000ed5c:	1ac9      	subs	r1, r1, r3
1000ed5e:	40d8      	lsrs	r0, r3
1000ed60:	408c      	lsls	r4, r1
1000ed62:	408d      	lsls	r5, r1
1000ed64:	4304      	orrs	r4, r0
1000ed66:	40da      	lsrs	r2, r3
1000ed68:	1e68      	subs	r0, r5, #1
1000ed6a:	4185      	sbcs	r5, r0
1000ed6c:	0017      	movs	r7, r2
1000ed6e:	4325      	orrs	r5, r4
1000ed70:	2400      	movs	r4, #0
1000ed72:	e771      	b.n	1000ec58 <__aeabi_dsub+0x58>
1000ed74:	4642      	mov	r2, r8
1000ed76:	4663      	mov	r3, ip
1000ed78:	431a      	orrs	r2, r3
1000ed7a:	d100      	bne.n	1000ed7e <__aeabi_dsub+0x17e>
1000ed7c:	e24c      	b.n	1000f218 <__aeabi_dsub+0x618>
1000ed7e:	4667      	mov	r7, ip
1000ed80:	4645      	mov	r5, r8
1000ed82:	076b      	lsls	r3, r5, #29
1000ed84:	d000      	beq.n	1000ed88 <__aeabi_dsub+0x188>
1000ed86:	e769      	b.n	1000ec5c <__aeabi_dsub+0x5c>
1000ed88:	2301      	movs	r3, #1
1000ed8a:	4651      	mov	r1, sl
1000ed8c:	0778      	lsls	r0, r7, #29
1000ed8e:	08ed      	lsrs	r5, r5, #3
1000ed90:	08fa      	lsrs	r2, r7, #3
1000ed92:	400b      	ands	r3, r1
1000ed94:	4305      	orrs	r5, r0
1000ed96:	4973      	ldr	r1, [pc, #460]	; (1000ef64 <__aeabi_dsub+0x364>)
1000ed98:	428c      	cmp	r4, r1
1000ed9a:	d038      	beq.n	1000ee0e <__aeabi_dsub+0x20e>
1000ed9c:	0312      	lsls	r2, r2, #12
1000ed9e:	0564      	lsls	r4, r4, #21
1000eda0:	0b12      	lsrs	r2, r2, #12
1000eda2:	0d64      	lsrs	r4, r4, #21
1000eda4:	e779      	b.n	1000ec9a <__aeabi_dsub+0x9a>
1000eda6:	2e00      	cmp	r6, #0
1000eda8:	dc00      	bgt.n	1000edac <__aeabi_dsub+0x1ac>
1000edaa:	e09a      	b.n	1000eee2 <__aeabi_dsub+0x2e2>
1000edac:	2a00      	cmp	r2, #0
1000edae:	d047      	beq.n	1000ee40 <__aeabi_dsub+0x240>
1000edb0:	4a6c      	ldr	r2, [pc, #432]	; (1000ef64 <__aeabi_dsub+0x364>)
1000edb2:	4294      	cmp	r4, r2
1000edb4:	d100      	bne.n	1000edb8 <__aeabi_dsub+0x1b8>
1000edb6:	e74f      	b.n	1000ec58 <__aeabi_dsub+0x58>
1000edb8:	2280      	movs	r2, #128	; 0x80
1000edba:	0412      	lsls	r2, r2, #16
1000edbc:	4310      	orrs	r0, r2
1000edbe:	4662      	mov	r2, ip
1000edc0:	2a38      	cmp	r2, #56	; 0x38
1000edc2:	dc00      	bgt.n	1000edc6 <__aeabi_dsub+0x1c6>
1000edc4:	e108      	b.n	1000efd8 <__aeabi_dsub+0x3d8>
1000edc6:	4301      	orrs	r1, r0
1000edc8:	1e48      	subs	r0, r1, #1
1000edca:	4181      	sbcs	r1, r0
1000edcc:	2200      	movs	r2, #0
1000edce:	b2c9      	uxtb	r1, r1
1000edd0:	1949      	adds	r1, r1, r5
1000edd2:	19d2      	adds	r2, r2, r7
1000edd4:	42a9      	cmp	r1, r5
1000edd6:	41bf      	sbcs	r7, r7
1000edd8:	000d      	movs	r5, r1
1000edda:	427f      	negs	r7, r7
1000eddc:	18bf      	adds	r7, r7, r2
1000edde:	023a      	lsls	r2, r7, #8
1000ede0:	d400      	bmi.n	1000ede4 <__aeabi_dsub+0x1e4>
1000ede2:	e142      	b.n	1000f06a <__aeabi_dsub+0x46a>
1000ede4:	4a5f      	ldr	r2, [pc, #380]	; (1000ef64 <__aeabi_dsub+0x364>)
1000ede6:	3401      	adds	r4, #1
1000ede8:	4294      	cmp	r4, r2
1000edea:	d100      	bne.n	1000edee <__aeabi_dsub+0x1ee>
1000edec:	e14e      	b.n	1000f08c <__aeabi_dsub+0x48c>
1000edee:	2001      	movs	r0, #1
1000edf0:	4a5d      	ldr	r2, [pc, #372]	; (1000ef68 <__aeabi_dsub+0x368>)
1000edf2:	0869      	lsrs	r1, r5, #1
1000edf4:	403a      	ands	r2, r7
1000edf6:	4028      	ands	r0, r5
1000edf8:	4308      	orrs	r0, r1
1000edfa:	07d5      	lsls	r5, r2, #31
1000edfc:	4305      	orrs	r5, r0
1000edfe:	0857      	lsrs	r7, r2, #1
1000ee00:	469a      	mov	sl, r3
1000ee02:	e729      	b.n	1000ec58 <__aeabi_dsub+0x58>
1000ee04:	0006      	movs	r6, r0
1000ee06:	430e      	orrs	r6, r1
1000ee08:	d000      	beq.n	1000ee0c <__aeabi_dsub+0x20c>
1000ee0a:	e717      	b.n	1000ec3c <__aeabi_dsub+0x3c>
1000ee0c:	e714      	b.n	1000ec38 <__aeabi_dsub+0x38>
1000ee0e:	0029      	movs	r1, r5
1000ee10:	4311      	orrs	r1, r2
1000ee12:	d100      	bne.n	1000ee16 <__aeabi_dsub+0x216>
1000ee14:	e1f9      	b.n	1000f20a <__aeabi_dsub+0x60a>
1000ee16:	2180      	movs	r1, #128	; 0x80
1000ee18:	0309      	lsls	r1, r1, #12
1000ee1a:	430a      	orrs	r2, r1
1000ee1c:	0312      	lsls	r2, r2, #12
1000ee1e:	0b12      	lsrs	r2, r2, #12
1000ee20:	e73b      	b.n	1000ec9a <__aeabi_dsub+0x9a>
1000ee22:	2301      	movs	r3, #1
1000ee24:	425b      	negs	r3, r3
1000ee26:	4698      	mov	r8, r3
1000ee28:	44c4      	add	ip, r8
1000ee2a:	4663      	mov	r3, ip
1000ee2c:	2b00      	cmp	r3, #0
1000ee2e:	d172      	bne.n	1000ef16 <__aeabi_dsub+0x316>
1000ee30:	1a69      	subs	r1, r5, r1
1000ee32:	428d      	cmp	r5, r1
1000ee34:	419b      	sbcs	r3, r3
1000ee36:	1a3f      	subs	r7, r7, r0
1000ee38:	425b      	negs	r3, r3
1000ee3a:	1aff      	subs	r7, r7, r3
1000ee3c:	000d      	movs	r5, r1
1000ee3e:	e768      	b.n	1000ed12 <__aeabi_dsub+0x112>
1000ee40:	0002      	movs	r2, r0
1000ee42:	430a      	orrs	r2, r1
1000ee44:	d100      	bne.n	1000ee48 <__aeabi_dsub+0x248>
1000ee46:	e707      	b.n	1000ec58 <__aeabi_dsub+0x58>
1000ee48:	2201      	movs	r2, #1
1000ee4a:	4252      	negs	r2, r2
1000ee4c:	4690      	mov	r8, r2
1000ee4e:	44c4      	add	ip, r8
1000ee50:	4662      	mov	r2, ip
1000ee52:	2a00      	cmp	r2, #0
1000ee54:	d000      	beq.n	1000ee58 <__aeabi_dsub+0x258>
1000ee56:	e0e6      	b.n	1000f026 <__aeabi_dsub+0x426>
1000ee58:	1869      	adds	r1, r5, r1
1000ee5a:	42a9      	cmp	r1, r5
1000ee5c:	41b6      	sbcs	r6, r6
1000ee5e:	183f      	adds	r7, r7, r0
1000ee60:	4276      	negs	r6, r6
1000ee62:	19f7      	adds	r7, r6, r7
1000ee64:	000d      	movs	r5, r1
1000ee66:	e7ba      	b.n	1000edde <__aeabi_dsub+0x1de>
1000ee68:	2e00      	cmp	r6, #0
1000ee6a:	d000      	beq.n	1000ee6e <__aeabi_dsub+0x26e>
1000ee6c:	e080      	b.n	1000ef70 <__aeabi_dsub+0x370>
1000ee6e:	1c62      	adds	r2, r4, #1
1000ee70:	0552      	lsls	r2, r2, #21
1000ee72:	0d52      	lsrs	r2, r2, #21
1000ee74:	2a01      	cmp	r2, #1
1000ee76:	dc00      	bgt.n	1000ee7a <__aeabi_dsub+0x27a>
1000ee78:	e0f9      	b.n	1000f06e <__aeabi_dsub+0x46e>
1000ee7a:	1a6a      	subs	r2, r5, r1
1000ee7c:	4691      	mov	r9, r2
1000ee7e:	454d      	cmp	r5, r9
1000ee80:	41b6      	sbcs	r6, r6
1000ee82:	1a3a      	subs	r2, r7, r0
1000ee84:	4276      	negs	r6, r6
1000ee86:	1b92      	subs	r2, r2, r6
1000ee88:	4690      	mov	r8, r2
1000ee8a:	0212      	lsls	r2, r2, #8
1000ee8c:	d400      	bmi.n	1000ee90 <__aeabi_dsub+0x290>
1000ee8e:	e099      	b.n	1000efc4 <__aeabi_dsub+0x3c4>
1000ee90:	1b4d      	subs	r5, r1, r5
1000ee92:	42a9      	cmp	r1, r5
1000ee94:	4189      	sbcs	r1, r1
1000ee96:	1bc7      	subs	r7, r0, r7
1000ee98:	4249      	negs	r1, r1
1000ee9a:	1a7a      	subs	r2, r7, r1
1000ee9c:	4690      	mov	r8, r2
1000ee9e:	469a      	mov	sl, r3
1000eea0:	e73c      	b.n	1000ed1c <__aeabi_dsub+0x11c>
1000eea2:	4652      	mov	r2, sl
1000eea4:	2301      	movs	r3, #1
1000eea6:	2500      	movs	r5, #0
1000eea8:	4013      	ands	r3, r2
1000eeaa:	2200      	movs	r2, #0
1000eeac:	e6f5      	b.n	1000ec9a <__aeabi_dsub+0x9a>
1000eeae:	0028      	movs	r0, r5
1000eeb0:	f000 faa6 	bl	1000f400 <__clzsi2>
1000eeb4:	3020      	adds	r0, #32
1000eeb6:	0003      	movs	r3, r0
1000eeb8:	3b08      	subs	r3, #8
1000eeba:	2b1f      	cmp	r3, #31
1000eebc:	dc00      	bgt.n	1000eec0 <__aeabi_dsub+0x2c0>
1000eebe:	e739      	b.n	1000ed34 <__aeabi_dsub+0x134>
1000eec0:	002a      	movs	r2, r5
1000eec2:	3828      	subs	r0, #40	; 0x28
1000eec4:	4082      	lsls	r2, r0
1000eec6:	2500      	movs	r5, #0
1000eec8:	429c      	cmp	r4, r3
1000eeca:	dc00      	bgt.n	1000eece <__aeabi_dsub+0x2ce>
1000eecc:	e73e      	b.n	1000ed4c <__aeabi_dsub+0x14c>
1000eece:	4f26      	ldr	r7, [pc, #152]	; (1000ef68 <__aeabi_dsub+0x368>)
1000eed0:	1ae4      	subs	r4, r4, r3
1000eed2:	4017      	ands	r7, r2
1000eed4:	e6c0      	b.n	1000ec58 <__aeabi_dsub+0x58>
1000eed6:	4301      	orrs	r1, r0
1000eed8:	1e48      	subs	r0, r1, #1
1000eeda:	4181      	sbcs	r1, r0
1000eedc:	2200      	movs	r2, #0
1000eede:	b2c9      	uxtb	r1, r1
1000eee0:	e710      	b.n	1000ed04 <__aeabi_dsub+0x104>
1000eee2:	2e00      	cmp	r6, #0
1000eee4:	d000      	beq.n	1000eee8 <__aeabi_dsub+0x2e8>
1000eee6:	e0f1      	b.n	1000f0cc <__aeabi_dsub+0x4cc>
1000eee8:	1c62      	adds	r2, r4, #1
1000eeea:	4694      	mov	ip, r2
1000eeec:	0552      	lsls	r2, r2, #21
1000eeee:	0d52      	lsrs	r2, r2, #21
1000eef0:	2a01      	cmp	r2, #1
1000eef2:	dc00      	bgt.n	1000eef6 <__aeabi_dsub+0x2f6>
1000eef4:	e0a0      	b.n	1000f038 <__aeabi_dsub+0x438>
1000eef6:	4a1b      	ldr	r2, [pc, #108]	; (1000ef64 <__aeabi_dsub+0x364>)
1000eef8:	4594      	cmp	ip, r2
1000eefa:	d100      	bne.n	1000eefe <__aeabi_dsub+0x2fe>
1000eefc:	e0c5      	b.n	1000f08a <__aeabi_dsub+0x48a>
1000eefe:	1869      	adds	r1, r5, r1
1000ef00:	42a9      	cmp	r1, r5
1000ef02:	4192      	sbcs	r2, r2
1000ef04:	183f      	adds	r7, r7, r0
1000ef06:	4252      	negs	r2, r2
1000ef08:	19d2      	adds	r2, r2, r7
1000ef0a:	0849      	lsrs	r1, r1, #1
1000ef0c:	07d5      	lsls	r5, r2, #31
1000ef0e:	430d      	orrs	r5, r1
1000ef10:	0857      	lsrs	r7, r2, #1
1000ef12:	4664      	mov	r4, ip
1000ef14:	e6a0      	b.n	1000ec58 <__aeabi_dsub+0x58>
1000ef16:	4b13      	ldr	r3, [pc, #76]	; (1000ef64 <__aeabi_dsub+0x364>)
1000ef18:	429c      	cmp	r4, r3
1000ef1a:	d000      	beq.n	1000ef1e <__aeabi_dsub+0x31e>
1000ef1c:	e6d9      	b.n	1000ecd2 <__aeabi_dsub+0xd2>
1000ef1e:	e69b      	b.n	1000ec58 <__aeabi_dsub+0x58>
1000ef20:	0011      	movs	r1, r2
1000ef22:	3c1f      	subs	r4, #31
1000ef24:	40e1      	lsrs	r1, r4
1000ef26:	000c      	movs	r4, r1
1000ef28:	2b20      	cmp	r3, #32
1000ef2a:	d100      	bne.n	1000ef2e <__aeabi_dsub+0x32e>
1000ef2c:	e080      	b.n	1000f030 <__aeabi_dsub+0x430>
1000ef2e:	2140      	movs	r1, #64	; 0x40
1000ef30:	1acb      	subs	r3, r1, r3
1000ef32:	409a      	lsls	r2, r3
1000ef34:	4315      	orrs	r5, r2
1000ef36:	1e6a      	subs	r2, r5, #1
1000ef38:	4195      	sbcs	r5, r2
1000ef3a:	2700      	movs	r7, #0
1000ef3c:	4325      	orrs	r5, r4
1000ef3e:	2400      	movs	r4, #0
1000ef40:	e71f      	b.n	1000ed82 <__aeabi_dsub+0x182>
1000ef42:	4663      	mov	r3, ip
1000ef44:	0002      	movs	r2, r0
1000ef46:	3b20      	subs	r3, #32
1000ef48:	40da      	lsrs	r2, r3
1000ef4a:	4663      	mov	r3, ip
1000ef4c:	2b20      	cmp	r3, #32
1000ef4e:	d071      	beq.n	1000f034 <__aeabi_dsub+0x434>
1000ef50:	2340      	movs	r3, #64	; 0x40
1000ef52:	4666      	mov	r6, ip
1000ef54:	1b9b      	subs	r3, r3, r6
1000ef56:	4098      	lsls	r0, r3
1000ef58:	4301      	orrs	r1, r0
1000ef5a:	1e48      	subs	r0, r1, #1
1000ef5c:	4181      	sbcs	r1, r0
1000ef5e:	4311      	orrs	r1, r2
1000ef60:	2200      	movs	r2, #0
1000ef62:	e6cf      	b.n	1000ed04 <__aeabi_dsub+0x104>
1000ef64:	000007ff 	.word	0x000007ff
1000ef68:	ff7fffff 	.word	0xff7fffff
1000ef6c:	800fffff 	.word	0x800fffff
1000ef70:	2c00      	cmp	r4, #0
1000ef72:	d048      	beq.n	1000f006 <__aeabi_dsub+0x406>
1000ef74:	4cca      	ldr	r4, [pc, #808]	; (1000f2a0 <__aeabi_dsub+0x6a0>)
1000ef76:	42a2      	cmp	r2, r4
1000ef78:	d100      	bne.n	1000ef7c <__aeabi_dsub+0x37c>
1000ef7a:	e0a2      	b.n	1000f0c2 <__aeabi_dsub+0x4c2>
1000ef7c:	4274      	negs	r4, r6
1000ef7e:	46a1      	mov	r9, r4
1000ef80:	2480      	movs	r4, #128	; 0x80
1000ef82:	0424      	lsls	r4, r4, #16
1000ef84:	4327      	orrs	r7, r4
1000ef86:	464c      	mov	r4, r9
1000ef88:	2c38      	cmp	r4, #56	; 0x38
1000ef8a:	dd00      	ble.n	1000ef8e <__aeabi_dsub+0x38e>
1000ef8c:	e0db      	b.n	1000f146 <__aeabi_dsub+0x546>
1000ef8e:	2c1f      	cmp	r4, #31
1000ef90:	dd00      	ble.n	1000ef94 <__aeabi_dsub+0x394>
1000ef92:	e144      	b.n	1000f21e <__aeabi_dsub+0x61e>
1000ef94:	464e      	mov	r6, r9
1000ef96:	2420      	movs	r4, #32
1000ef98:	1ba4      	subs	r4, r4, r6
1000ef9a:	003e      	movs	r6, r7
1000ef9c:	40a6      	lsls	r6, r4
1000ef9e:	46a2      	mov	sl, r4
1000efa0:	46b0      	mov	r8, r6
1000efa2:	464c      	mov	r4, r9
1000efa4:	002e      	movs	r6, r5
1000efa6:	40e6      	lsrs	r6, r4
1000efa8:	46b4      	mov	ip, r6
1000efaa:	4646      	mov	r6, r8
1000efac:	4664      	mov	r4, ip
1000efae:	4326      	orrs	r6, r4
1000efb0:	4654      	mov	r4, sl
1000efb2:	40a5      	lsls	r5, r4
1000efb4:	1e6c      	subs	r4, r5, #1
1000efb6:	41a5      	sbcs	r5, r4
1000efb8:	0034      	movs	r4, r6
1000efba:	432c      	orrs	r4, r5
1000efbc:	464d      	mov	r5, r9
1000efbe:	40ef      	lsrs	r7, r5
1000efc0:	1b0d      	subs	r5, r1, r4
1000efc2:	e028      	b.n	1000f016 <__aeabi_dsub+0x416>
1000efc4:	464a      	mov	r2, r9
1000efc6:	4643      	mov	r3, r8
1000efc8:	464d      	mov	r5, r9
1000efca:	431a      	orrs	r2, r3
1000efcc:	d000      	beq.n	1000efd0 <__aeabi_dsub+0x3d0>
1000efce:	e6a5      	b.n	1000ed1c <__aeabi_dsub+0x11c>
1000efd0:	2300      	movs	r3, #0
1000efd2:	2400      	movs	r4, #0
1000efd4:	2500      	movs	r5, #0
1000efd6:	e6de      	b.n	1000ed96 <__aeabi_dsub+0x196>
1000efd8:	2a1f      	cmp	r2, #31
1000efda:	dc5a      	bgt.n	1000f092 <__aeabi_dsub+0x492>
1000efdc:	4666      	mov	r6, ip
1000efde:	2220      	movs	r2, #32
1000efe0:	1b92      	subs	r2, r2, r6
1000efe2:	0006      	movs	r6, r0
1000efe4:	4096      	lsls	r6, r2
1000efe6:	4691      	mov	r9, r2
1000efe8:	46b0      	mov	r8, r6
1000efea:	4662      	mov	r2, ip
1000efec:	000e      	movs	r6, r1
1000efee:	40d6      	lsrs	r6, r2
1000eff0:	4642      	mov	r2, r8
1000eff2:	4316      	orrs	r6, r2
1000eff4:	464a      	mov	r2, r9
1000eff6:	4091      	lsls	r1, r2
1000eff8:	1e4a      	subs	r2, r1, #1
1000effa:	4191      	sbcs	r1, r2
1000effc:	0002      	movs	r2, r0
1000effe:	4660      	mov	r0, ip
1000f000:	4331      	orrs	r1, r6
1000f002:	40c2      	lsrs	r2, r0
1000f004:	e6e4      	b.n	1000edd0 <__aeabi_dsub+0x1d0>
1000f006:	003c      	movs	r4, r7
1000f008:	432c      	orrs	r4, r5
1000f00a:	d05a      	beq.n	1000f0c2 <__aeabi_dsub+0x4c2>
1000f00c:	43f4      	mvns	r4, r6
1000f00e:	46a1      	mov	r9, r4
1000f010:	2c00      	cmp	r4, #0
1000f012:	d152      	bne.n	1000f0ba <__aeabi_dsub+0x4ba>
1000f014:	1b4d      	subs	r5, r1, r5
1000f016:	42a9      	cmp	r1, r5
1000f018:	4189      	sbcs	r1, r1
1000f01a:	1bc7      	subs	r7, r0, r7
1000f01c:	4249      	negs	r1, r1
1000f01e:	1a7f      	subs	r7, r7, r1
1000f020:	0014      	movs	r4, r2
1000f022:	469a      	mov	sl, r3
1000f024:	e675      	b.n	1000ed12 <__aeabi_dsub+0x112>
1000f026:	4a9e      	ldr	r2, [pc, #632]	; (1000f2a0 <__aeabi_dsub+0x6a0>)
1000f028:	4294      	cmp	r4, r2
1000f02a:	d000      	beq.n	1000f02e <__aeabi_dsub+0x42e>
1000f02c:	e6c7      	b.n	1000edbe <__aeabi_dsub+0x1be>
1000f02e:	e613      	b.n	1000ec58 <__aeabi_dsub+0x58>
1000f030:	2200      	movs	r2, #0
1000f032:	e77f      	b.n	1000ef34 <__aeabi_dsub+0x334>
1000f034:	2000      	movs	r0, #0
1000f036:	e78f      	b.n	1000ef58 <__aeabi_dsub+0x358>
1000f038:	2c00      	cmp	r4, #0
1000f03a:	d000      	beq.n	1000f03e <__aeabi_dsub+0x43e>
1000f03c:	e0c8      	b.n	1000f1d0 <__aeabi_dsub+0x5d0>
1000f03e:	003b      	movs	r3, r7
1000f040:	432b      	orrs	r3, r5
1000f042:	d100      	bne.n	1000f046 <__aeabi_dsub+0x446>
1000f044:	e10f      	b.n	1000f266 <__aeabi_dsub+0x666>
1000f046:	0003      	movs	r3, r0
1000f048:	430b      	orrs	r3, r1
1000f04a:	d100      	bne.n	1000f04e <__aeabi_dsub+0x44e>
1000f04c:	e604      	b.n	1000ec58 <__aeabi_dsub+0x58>
1000f04e:	1869      	adds	r1, r5, r1
1000f050:	42a9      	cmp	r1, r5
1000f052:	419b      	sbcs	r3, r3
1000f054:	183f      	adds	r7, r7, r0
1000f056:	425b      	negs	r3, r3
1000f058:	19df      	adds	r7, r3, r7
1000f05a:	023b      	lsls	r3, r7, #8
1000f05c:	d400      	bmi.n	1000f060 <__aeabi_dsub+0x460>
1000f05e:	e11a      	b.n	1000f296 <__aeabi_dsub+0x696>
1000f060:	4b90      	ldr	r3, [pc, #576]	; (1000f2a4 <__aeabi_dsub+0x6a4>)
1000f062:	000d      	movs	r5, r1
1000f064:	401f      	ands	r7, r3
1000f066:	4664      	mov	r4, ip
1000f068:	e5f6      	b.n	1000ec58 <__aeabi_dsub+0x58>
1000f06a:	469a      	mov	sl, r3
1000f06c:	e689      	b.n	1000ed82 <__aeabi_dsub+0x182>
1000f06e:	003a      	movs	r2, r7
1000f070:	432a      	orrs	r2, r5
1000f072:	2c00      	cmp	r4, #0
1000f074:	d15c      	bne.n	1000f130 <__aeabi_dsub+0x530>
1000f076:	2a00      	cmp	r2, #0
1000f078:	d175      	bne.n	1000f166 <__aeabi_dsub+0x566>
1000f07a:	0002      	movs	r2, r0
1000f07c:	430a      	orrs	r2, r1
1000f07e:	d100      	bne.n	1000f082 <__aeabi_dsub+0x482>
1000f080:	e0ca      	b.n	1000f218 <__aeabi_dsub+0x618>
1000f082:	0007      	movs	r7, r0
1000f084:	000d      	movs	r5, r1
1000f086:	469a      	mov	sl, r3
1000f088:	e5e6      	b.n	1000ec58 <__aeabi_dsub+0x58>
1000f08a:	4664      	mov	r4, ip
1000f08c:	2200      	movs	r2, #0
1000f08e:	2500      	movs	r5, #0
1000f090:	e681      	b.n	1000ed96 <__aeabi_dsub+0x196>
1000f092:	4662      	mov	r2, ip
1000f094:	0006      	movs	r6, r0
1000f096:	3a20      	subs	r2, #32
1000f098:	40d6      	lsrs	r6, r2
1000f09a:	4662      	mov	r2, ip
1000f09c:	46b0      	mov	r8, r6
1000f09e:	2a20      	cmp	r2, #32
1000f0a0:	d100      	bne.n	1000f0a4 <__aeabi_dsub+0x4a4>
1000f0a2:	e0b7      	b.n	1000f214 <__aeabi_dsub+0x614>
1000f0a4:	2240      	movs	r2, #64	; 0x40
1000f0a6:	4666      	mov	r6, ip
1000f0a8:	1b92      	subs	r2, r2, r6
1000f0aa:	4090      	lsls	r0, r2
1000f0ac:	4301      	orrs	r1, r0
1000f0ae:	4642      	mov	r2, r8
1000f0b0:	1e48      	subs	r0, r1, #1
1000f0b2:	4181      	sbcs	r1, r0
1000f0b4:	4311      	orrs	r1, r2
1000f0b6:	2200      	movs	r2, #0
1000f0b8:	e68a      	b.n	1000edd0 <__aeabi_dsub+0x1d0>
1000f0ba:	4c79      	ldr	r4, [pc, #484]	; (1000f2a0 <__aeabi_dsub+0x6a0>)
1000f0bc:	42a2      	cmp	r2, r4
1000f0be:	d000      	beq.n	1000f0c2 <__aeabi_dsub+0x4c2>
1000f0c0:	e761      	b.n	1000ef86 <__aeabi_dsub+0x386>
1000f0c2:	0007      	movs	r7, r0
1000f0c4:	000d      	movs	r5, r1
1000f0c6:	0014      	movs	r4, r2
1000f0c8:	469a      	mov	sl, r3
1000f0ca:	e5c5      	b.n	1000ec58 <__aeabi_dsub+0x58>
1000f0cc:	2c00      	cmp	r4, #0
1000f0ce:	d141      	bne.n	1000f154 <__aeabi_dsub+0x554>
1000f0d0:	003c      	movs	r4, r7
1000f0d2:	432c      	orrs	r4, r5
1000f0d4:	d078      	beq.n	1000f1c8 <__aeabi_dsub+0x5c8>
1000f0d6:	43f4      	mvns	r4, r6
1000f0d8:	46a1      	mov	r9, r4
1000f0da:	2c00      	cmp	r4, #0
1000f0dc:	d020      	beq.n	1000f120 <__aeabi_dsub+0x520>
1000f0de:	4c70      	ldr	r4, [pc, #448]	; (1000f2a0 <__aeabi_dsub+0x6a0>)
1000f0e0:	42a2      	cmp	r2, r4
1000f0e2:	d071      	beq.n	1000f1c8 <__aeabi_dsub+0x5c8>
1000f0e4:	464c      	mov	r4, r9
1000f0e6:	2c38      	cmp	r4, #56	; 0x38
1000f0e8:	dd00      	ble.n	1000f0ec <__aeabi_dsub+0x4ec>
1000f0ea:	e0b2      	b.n	1000f252 <__aeabi_dsub+0x652>
1000f0ec:	2c1f      	cmp	r4, #31
1000f0ee:	dd00      	ble.n	1000f0f2 <__aeabi_dsub+0x4f2>
1000f0f0:	e0bc      	b.n	1000f26c <__aeabi_dsub+0x66c>
1000f0f2:	2620      	movs	r6, #32
1000f0f4:	1b34      	subs	r4, r6, r4
1000f0f6:	46a2      	mov	sl, r4
1000f0f8:	003c      	movs	r4, r7
1000f0fa:	4656      	mov	r6, sl
1000f0fc:	40b4      	lsls	r4, r6
1000f0fe:	464e      	mov	r6, r9
1000f100:	46a0      	mov	r8, r4
1000f102:	002c      	movs	r4, r5
1000f104:	40f4      	lsrs	r4, r6
1000f106:	46a4      	mov	ip, r4
1000f108:	4644      	mov	r4, r8
1000f10a:	4666      	mov	r6, ip
1000f10c:	4334      	orrs	r4, r6
1000f10e:	46a4      	mov	ip, r4
1000f110:	4654      	mov	r4, sl
1000f112:	40a5      	lsls	r5, r4
1000f114:	4664      	mov	r4, ip
1000f116:	1e6e      	subs	r6, r5, #1
1000f118:	41b5      	sbcs	r5, r6
1000f11a:	4325      	orrs	r5, r4
1000f11c:	464c      	mov	r4, r9
1000f11e:	40e7      	lsrs	r7, r4
1000f120:	186d      	adds	r5, r5, r1
1000f122:	428d      	cmp	r5, r1
1000f124:	4189      	sbcs	r1, r1
1000f126:	183f      	adds	r7, r7, r0
1000f128:	4249      	negs	r1, r1
1000f12a:	19cf      	adds	r7, r1, r7
1000f12c:	0014      	movs	r4, r2
1000f12e:	e656      	b.n	1000edde <__aeabi_dsub+0x1de>
1000f130:	2a00      	cmp	r2, #0
1000f132:	d12f      	bne.n	1000f194 <__aeabi_dsub+0x594>
1000f134:	0002      	movs	r2, r0
1000f136:	430a      	orrs	r2, r1
1000f138:	d100      	bne.n	1000f13c <__aeabi_dsub+0x53c>
1000f13a:	e084      	b.n	1000f246 <__aeabi_dsub+0x646>
1000f13c:	0007      	movs	r7, r0
1000f13e:	000d      	movs	r5, r1
1000f140:	469a      	mov	sl, r3
1000f142:	4c57      	ldr	r4, [pc, #348]	; (1000f2a0 <__aeabi_dsub+0x6a0>)
1000f144:	e588      	b.n	1000ec58 <__aeabi_dsub+0x58>
1000f146:	433d      	orrs	r5, r7
1000f148:	1e6f      	subs	r7, r5, #1
1000f14a:	41bd      	sbcs	r5, r7
1000f14c:	b2ec      	uxtb	r4, r5
1000f14e:	2700      	movs	r7, #0
1000f150:	1b0d      	subs	r5, r1, r4
1000f152:	e760      	b.n	1000f016 <__aeabi_dsub+0x416>
1000f154:	4c52      	ldr	r4, [pc, #328]	; (1000f2a0 <__aeabi_dsub+0x6a0>)
1000f156:	42a2      	cmp	r2, r4
1000f158:	d036      	beq.n	1000f1c8 <__aeabi_dsub+0x5c8>
1000f15a:	4274      	negs	r4, r6
1000f15c:	2680      	movs	r6, #128	; 0x80
1000f15e:	0436      	lsls	r6, r6, #16
1000f160:	46a1      	mov	r9, r4
1000f162:	4337      	orrs	r7, r6
1000f164:	e7be      	b.n	1000f0e4 <__aeabi_dsub+0x4e4>
1000f166:	0002      	movs	r2, r0
1000f168:	430a      	orrs	r2, r1
1000f16a:	d100      	bne.n	1000f16e <__aeabi_dsub+0x56e>
1000f16c:	e574      	b.n	1000ec58 <__aeabi_dsub+0x58>
1000f16e:	1a6a      	subs	r2, r5, r1
1000f170:	4690      	mov	r8, r2
1000f172:	4545      	cmp	r5, r8
1000f174:	41b6      	sbcs	r6, r6
1000f176:	1a3a      	subs	r2, r7, r0
1000f178:	4276      	negs	r6, r6
1000f17a:	1b92      	subs	r2, r2, r6
1000f17c:	4694      	mov	ip, r2
1000f17e:	0212      	lsls	r2, r2, #8
1000f180:	d400      	bmi.n	1000f184 <__aeabi_dsub+0x584>
1000f182:	e5f7      	b.n	1000ed74 <__aeabi_dsub+0x174>
1000f184:	1b4d      	subs	r5, r1, r5
1000f186:	42a9      	cmp	r1, r5
1000f188:	4189      	sbcs	r1, r1
1000f18a:	1bc7      	subs	r7, r0, r7
1000f18c:	4249      	negs	r1, r1
1000f18e:	1a7f      	subs	r7, r7, r1
1000f190:	469a      	mov	sl, r3
1000f192:	e561      	b.n	1000ec58 <__aeabi_dsub+0x58>
1000f194:	0002      	movs	r2, r0
1000f196:	430a      	orrs	r2, r1
1000f198:	d03a      	beq.n	1000f210 <__aeabi_dsub+0x610>
1000f19a:	08ed      	lsrs	r5, r5, #3
1000f19c:	077c      	lsls	r4, r7, #29
1000f19e:	432c      	orrs	r4, r5
1000f1a0:	2580      	movs	r5, #128	; 0x80
1000f1a2:	08fa      	lsrs	r2, r7, #3
1000f1a4:	032d      	lsls	r5, r5, #12
1000f1a6:	422a      	tst	r2, r5
1000f1a8:	d008      	beq.n	1000f1bc <__aeabi_dsub+0x5bc>
1000f1aa:	08c7      	lsrs	r7, r0, #3
1000f1ac:	422f      	tst	r7, r5
1000f1ae:	d105      	bne.n	1000f1bc <__aeabi_dsub+0x5bc>
1000f1b0:	0745      	lsls	r5, r0, #29
1000f1b2:	002c      	movs	r4, r5
1000f1b4:	003a      	movs	r2, r7
1000f1b6:	469a      	mov	sl, r3
1000f1b8:	08c9      	lsrs	r1, r1, #3
1000f1ba:	430c      	orrs	r4, r1
1000f1bc:	0f67      	lsrs	r7, r4, #29
1000f1be:	00d2      	lsls	r2, r2, #3
1000f1c0:	00e5      	lsls	r5, r4, #3
1000f1c2:	4317      	orrs	r7, r2
1000f1c4:	4c36      	ldr	r4, [pc, #216]	; (1000f2a0 <__aeabi_dsub+0x6a0>)
1000f1c6:	e547      	b.n	1000ec58 <__aeabi_dsub+0x58>
1000f1c8:	0007      	movs	r7, r0
1000f1ca:	000d      	movs	r5, r1
1000f1cc:	0014      	movs	r4, r2
1000f1ce:	e543      	b.n	1000ec58 <__aeabi_dsub+0x58>
1000f1d0:	003a      	movs	r2, r7
1000f1d2:	432a      	orrs	r2, r5
1000f1d4:	d043      	beq.n	1000f25e <__aeabi_dsub+0x65e>
1000f1d6:	0002      	movs	r2, r0
1000f1d8:	430a      	orrs	r2, r1
1000f1da:	d019      	beq.n	1000f210 <__aeabi_dsub+0x610>
1000f1dc:	08ed      	lsrs	r5, r5, #3
1000f1de:	077c      	lsls	r4, r7, #29
1000f1e0:	432c      	orrs	r4, r5
1000f1e2:	2580      	movs	r5, #128	; 0x80
1000f1e4:	08fa      	lsrs	r2, r7, #3
1000f1e6:	032d      	lsls	r5, r5, #12
1000f1e8:	422a      	tst	r2, r5
1000f1ea:	d007      	beq.n	1000f1fc <__aeabi_dsub+0x5fc>
1000f1ec:	08c6      	lsrs	r6, r0, #3
1000f1ee:	422e      	tst	r6, r5
1000f1f0:	d104      	bne.n	1000f1fc <__aeabi_dsub+0x5fc>
1000f1f2:	0747      	lsls	r7, r0, #29
1000f1f4:	003c      	movs	r4, r7
1000f1f6:	0032      	movs	r2, r6
1000f1f8:	08c9      	lsrs	r1, r1, #3
1000f1fa:	430c      	orrs	r4, r1
1000f1fc:	00d7      	lsls	r7, r2, #3
1000f1fe:	0f62      	lsrs	r2, r4, #29
1000f200:	00e5      	lsls	r5, r4, #3
1000f202:	4317      	orrs	r7, r2
1000f204:	469a      	mov	sl, r3
1000f206:	4c26      	ldr	r4, [pc, #152]	; (1000f2a0 <__aeabi_dsub+0x6a0>)
1000f208:	e526      	b.n	1000ec58 <__aeabi_dsub+0x58>
1000f20a:	2200      	movs	r2, #0
1000f20c:	2500      	movs	r5, #0
1000f20e:	e544      	b.n	1000ec9a <__aeabi_dsub+0x9a>
1000f210:	4c23      	ldr	r4, [pc, #140]	; (1000f2a0 <__aeabi_dsub+0x6a0>)
1000f212:	e521      	b.n	1000ec58 <__aeabi_dsub+0x58>
1000f214:	2000      	movs	r0, #0
1000f216:	e749      	b.n	1000f0ac <__aeabi_dsub+0x4ac>
1000f218:	2300      	movs	r3, #0
1000f21a:	2500      	movs	r5, #0
1000f21c:	e5bb      	b.n	1000ed96 <__aeabi_dsub+0x196>
1000f21e:	464c      	mov	r4, r9
1000f220:	003e      	movs	r6, r7
1000f222:	3c20      	subs	r4, #32
1000f224:	40e6      	lsrs	r6, r4
1000f226:	464c      	mov	r4, r9
1000f228:	46b4      	mov	ip, r6
1000f22a:	2c20      	cmp	r4, #32
1000f22c:	d031      	beq.n	1000f292 <__aeabi_dsub+0x692>
1000f22e:	2440      	movs	r4, #64	; 0x40
1000f230:	464e      	mov	r6, r9
1000f232:	1ba6      	subs	r6, r4, r6
1000f234:	40b7      	lsls	r7, r6
1000f236:	433d      	orrs	r5, r7
1000f238:	1e6c      	subs	r4, r5, #1
1000f23a:	41a5      	sbcs	r5, r4
1000f23c:	4664      	mov	r4, ip
1000f23e:	432c      	orrs	r4, r5
1000f240:	2700      	movs	r7, #0
1000f242:	1b0d      	subs	r5, r1, r4
1000f244:	e6e7      	b.n	1000f016 <__aeabi_dsub+0x416>
1000f246:	2280      	movs	r2, #128	; 0x80
1000f248:	2300      	movs	r3, #0
1000f24a:	0312      	lsls	r2, r2, #12
1000f24c:	4c14      	ldr	r4, [pc, #80]	; (1000f2a0 <__aeabi_dsub+0x6a0>)
1000f24e:	2500      	movs	r5, #0
1000f250:	e5a1      	b.n	1000ed96 <__aeabi_dsub+0x196>
1000f252:	433d      	orrs	r5, r7
1000f254:	1e6f      	subs	r7, r5, #1
1000f256:	41bd      	sbcs	r5, r7
1000f258:	2700      	movs	r7, #0
1000f25a:	b2ed      	uxtb	r5, r5
1000f25c:	e760      	b.n	1000f120 <__aeabi_dsub+0x520>
1000f25e:	0007      	movs	r7, r0
1000f260:	000d      	movs	r5, r1
1000f262:	4c0f      	ldr	r4, [pc, #60]	; (1000f2a0 <__aeabi_dsub+0x6a0>)
1000f264:	e4f8      	b.n	1000ec58 <__aeabi_dsub+0x58>
1000f266:	0007      	movs	r7, r0
1000f268:	000d      	movs	r5, r1
1000f26a:	e4f5      	b.n	1000ec58 <__aeabi_dsub+0x58>
1000f26c:	464e      	mov	r6, r9
1000f26e:	003c      	movs	r4, r7
1000f270:	3e20      	subs	r6, #32
1000f272:	40f4      	lsrs	r4, r6
1000f274:	46a0      	mov	r8, r4
1000f276:	464c      	mov	r4, r9
1000f278:	2c20      	cmp	r4, #32
1000f27a:	d00e      	beq.n	1000f29a <__aeabi_dsub+0x69a>
1000f27c:	2440      	movs	r4, #64	; 0x40
1000f27e:	464e      	mov	r6, r9
1000f280:	1ba4      	subs	r4, r4, r6
1000f282:	40a7      	lsls	r7, r4
1000f284:	433d      	orrs	r5, r7
1000f286:	1e6f      	subs	r7, r5, #1
1000f288:	41bd      	sbcs	r5, r7
1000f28a:	4644      	mov	r4, r8
1000f28c:	2700      	movs	r7, #0
1000f28e:	4325      	orrs	r5, r4
1000f290:	e746      	b.n	1000f120 <__aeabi_dsub+0x520>
1000f292:	2700      	movs	r7, #0
1000f294:	e7cf      	b.n	1000f236 <__aeabi_dsub+0x636>
1000f296:	000d      	movs	r5, r1
1000f298:	e573      	b.n	1000ed82 <__aeabi_dsub+0x182>
1000f29a:	2700      	movs	r7, #0
1000f29c:	e7f2      	b.n	1000f284 <__aeabi_dsub+0x684>
1000f29e:	46c0      	nop			; (mov r8, r8)
1000f2a0:	000007ff 	.word	0x000007ff
1000f2a4:	ff7fffff 	.word	0xff7fffff

1000f2a8 <__aeabi_d2iz>:
1000f2a8:	030b      	lsls	r3, r1, #12
1000f2aa:	b530      	push	{r4, r5, lr}
1000f2ac:	4d13      	ldr	r5, [pc, #76]	; (1000f2fc <__aeabi_d2iz+0x54>)
1000f2ae:	0b1a      	lsrs	r2, r3, #12
1000f2b0:	004b      	lsls	r3, r1, #1
1000f2b2:	0d5b      	lsrs	r3, r3, #21
1000f2b4:	0fc9      	lsrs	r1, r1, #31
1000f2b6:	2400      	movs	r4, #0
1000f2b8:	42ab      	cmp	r3, r5
1000f2ba:	dd11      	ble.n	1000f2e0 <__aeabi_d2iz+0x38>
1000f2bc:	4c10      	ldr	r4, [pc, #64]	; (1000f300 <__aeabi_d2iz+0x58>)
1000f2be:	42a3      	cmp	r3, r4
1000f2c0:	dc10      	bgt.n	1000f2e4 <__aeabi_d2iz+0x3c>
1000f2c2:	2480      	movs	r4, #128	; 0x80
1000f2c4:	0364      	lsls	r4, r4, #13
1000f2c6:	4322      	orrs	r2, r4
1000f2c8:	4c0e      	ldr	r4, [pc, #56]	; (1000f304 <__aeabi_d2iz+0x5c>)
1000f2ca:	1ae4      	subs	r4, r4, r3
1000f2cc:	2c1f      	cmp	r4, #31
1000f2ce:	dd0c      	ble.n	1000f2ea <__aeabi_d2iz+0x42>
1000f2d0:	480d      	ldr	r0, [pc, #52]	; (1000f308 <__aeabi_d2iz+0x60>)
1000f2d2:	1ac3      	subs	r3, r0, r3
1000f2d4:	40da      	lsrs	r2, r3
1000f2d6:	0013      	movs	r3, r2
1000f2d8:	425c      	negs	r4, r3
1000f2da:	2900      	cmp	r1, #0
1000f2dc:	d100      	bne.n	1000f2e0 <__aeabi_d2iz+0x38>
1000f2de:	001c      	movs	r4, r3
1000f2e0:	0020      	movs	r0, r4
1000f2e2:	bd30      	pop	{r4, r5, pc}
1000f2e4:	4b09      	ldr	r3, [pc, #36]	; (1000f30c <__aeabi_d2iz+0x64>)
1000f2e6:	18cc      	adds	r4, r1, r3
1000f2e8:	e7fa      	b.n	1000f2e0 <__aeabi_d2iz+0x38>
1000f2ea:	40e0      	lsrs	r0, r4
1000f2ec:	4c08      	ldr	r4, [pc, #32]	; (1000f310 <__aeabi_d2iz+0x68>)
1000f2ee:	46a4      	mov	ip, r4
1000f2f0:	4463      	add	r3, ip
1000f2f2:	409a      	lsls	r2, r3
1000f2f4:	0013      	movs	r3, r2
1000f2f6:	4303      	orrs	r3, r0
1000f2f8:	e7ee      	b.n	1000f2d8 <__aeabi_d2iz+0x30>
1000f2fa:	46c0      	nop			; (mov r8, r8)
1000f2fc:	000003fe 	.word	0x000003fe
1000f300:	0000041d 	.word	0x0000041d
1000f304:	00000433 	.word	0x00000433
1000f308:	00000413 	.word	0x00000413
1000f30c:	7fffffff 	.word	0x7fffffff
1000f310:	fffffbed 	.word	0xfffffbed

1000f314 <__aeabi_ui2d>:
1000f314:	b570      	push	{r4, r5, r6, lr}
1000f316:	1e05      	subs	r5, r0, #0
1000f318:	d028      	beq.n	1000f36c <__aeabi_ui2d+0x58>
1000f31a:	f000 f871 	bl	1000f400 <__clzsi2>
1000f31e:	4b15      	ldr	r3, [pc, #84]	; (1000f374 <__aeabi_ui2d+0x60>)
1000f320:	4a15      	ldr	r2, [pc, #84]	; (1000f378 <__aeabi_ui2d+0x64>)
1000f322:	1a1b      	subs	r3, r3, r0
1000f324:	1ad2      	subs	r2, r2, r3
1000f326:	2a1f      	cmp	r2, #31
1000f328:	dd16      	ble.n	1000f358 <__aeabi_ui2d+0x44>
1000f32a:	002c      	movs	r4, r5
1000f32c:	4a13      	ldr	r2, [pc, #76]	; (1000f37c <__aeabi_ui2d+0x68>)
1000f32e:	2500      	movs	r5, #0
1000f330:	1ad2      	subs	r2, r2, r3
1000f332:	4094      	lsls	r4, r2
1000f334:	055a      	lsls	r2, r3, #21
1000f336:	0324      	lsls	r4, r4, #12
1000f338:	0b24      	lsrs	r4, r4, #12
1000f33a:	0d52      	lsrs	r2, r2, #21
1000f33c:	2100      	movs	r1, #0
1000f33e:	0324      	lsls	r4, r4, #12
1000f340:	0d0b      	lsrs	r3, r1, #20
1000f342:	0b24      	lsrs	r4, r4, #12
1000f344:	051b      	lsls	r3, r3, #20
1000f346:	4323      	orrs	r3, r4
1000f348:	4c0d      	ldr	r4, [pc, #52]	; (1000f380 <__aeabi_ui2d+0x6c>)
1000f34a:	0512      	lsls	r2, r2, #20
1000f34c:	4023      	ands	r3, r4
1000f34e:	4313      	orrs	r3, r2
1000f350:	005b      	lsls	r3, r3, #1
1000f352:	0028      	movs	r0, r5
1000f354:	0859      	lsrs	r1, r3, #1
1000f356:	bd70      	pop	{r4, r5, r6, pc}
1000f358:	210b      	movs	r1, #11
1000f35a:	002c      	movs	r4, r5
1000f35c:	1a08      	subs	r0, r1, r0
1000f35e:	40c4      	lsrs	r4, r0
1000f360:	4095      	lsls	r5, r2
1000f362:	0324      	lsls	r4, r4, #12
1000f364:	055a      	lsls	r2, r3, #21
1000f366:	0b24      	lsrs	r4, r4, #12
1000f368:	0d52      	lsrs	r2, r2, #21
1000f36a:	e7e7      	b.n	1000f33c <__aeabi_ui2d+0x28>
1000f36c:	2200      	movs	r2, #0
1000f36e:	2400      	movs	r4, #0
1000f370:	e7e4      	b.n	1000f33c <__aeabi_ui2d+0x28>
1000f372:	46c0      	nop			; (mov r8, r8)
1000f374:	0000041e 	.word	0x0000041e
1000f378:	00000433 	.word	0x00000433
1000f37c:	00000413 	.word	0x00000413
1000f380:	800fffff 	.word	0x800fffff

1000f384 <__aeabi_cdrcmple>:
1000f384:	4684      	mov	ip, r0
1000f386:	1c10      	adds	r0, r2, #0
1000f388:	4662      	mov	r2, ip
1000f38a:	468c      	mov	ip, r1
1000f38c:	1c19      	adds	r1, r3, #0
1000f38e:	4663      	mov	r3, ip
1000f390:	e000      	b.n	1000f394 <__aeabi_cdcmpeq>
1000f392:	46c0      	nop			; (mov r8, r8)

1000f394 <__aeabi_cdcmpeq>:
1000f394:	b51f      	push	{r0, r1, r2, r3, r4, lr}
1000f396:	f000 f8f5 	bl	1000f584 <__ledf2>
1000f39a:	2800      	cmp	r0, #0
1000f39c:	d401      	bmi.n	1000f3a2 <__aeabi_cdcmpeq+0xe>
1000f39e:	2100      	movs	r1, #0
1000f3a0:	42c8      	cmn	r0, r1
1000f3a2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

1000f3a4 <__aeabi_dcmpeq>:
1000f3a4:	b510      	push	{r4, lr}
1000f3a6:	f000 f849 	bl	1000f43c <__eqdf2>
1000f3aa:	4240      	negs	r0, r0
1000f3ac:	3001      	adds	r0, #1
1000f3ae:	bd10      	pop	{r4, pc}

1000f3b0 <__aeabi_dcmplt>:
1000f3b0:	b510      	push	{r4, lr}
1000f3b2:	f000 f8e7 	bl	1000f584 <__ledf2>
1000f3b6:	2800      	cmp	r0, #0
1000f3b8:	db01      	blt.n	1000f3be <__aeabi_dcmplt+0xe>
1000f3ba:	2000      	movs	r0, #0
1000f3bc:	bd10      	pop	{r4, pc}
1000f3be:	2001      	movs	r0, #1
1000f3c0:	bd10      	pop	{r4, pc}
1000f3c2:	46c0      	nop			; (mov r8, r8)

1000f3c4 <__aeabi_dcmple>:
1000f3c4:	b510      	push	{r4, lr}
1000f3c6:	f000 f8dd 	bl	1000f584 <__ledf2>
1000f3ca:	2800      	cmp	r0, #0
1000f3cc:	dd01      	ble.n	1000f3d2 <__aeabi_dcmple+0xe>
1000f3ce:	2000      	movs	r0, #0
1000f3d0:	bd10      	pop	{r4, pc}
1000f3d2:	2001      	movs	r0, #1
1000f3d4:	bd10      	pop	{r4, pc}
1000f3d6:	46c0      	nop			; (mov r8, r8)

1000f3d8 <__aeabi_dcmpgt>:
1000f3d8:	b510      	push	{r4, lr}
1000f3da:	f000 f86f 	bl	1000f4bc <__gedf2>
1000f3de:	2800      	cmp	r0, #0
1000f3e0:	dc01      	bgt.n	1000f3e6 <__aeabi_dcmpgt+0xe>
1000f3e2:	2000      	movs	r0, #0
1000f3e4:	bd10      	pop	{r4, pc}
1000f3e6:	2001      	movs	r0, #1
1000f3e8:	bd10      	pop	{r4, pc}
1000f3ea:	46c0      	nop			; (mov r8, r8)

1000f3ec <__aeabi_dcmpge>:
1000f3ec:	b510      	push	{r4, lr}
1000f3ee:	f000 f865 	bl	1000f4bc <__gedf2>
1000f3f2:	2800      	cmp	r0, #0
1000f3f4:	da01      	bge.n	1000f3fa <__aeabi_dcmpge+0xe>
1000f3f6:	2000      	movs	r0, #0
1000f3f8:	bd10      	pop	{r4, pc}
1000f3fa:	2001      	movs	r0, #1
1000f3fc:	bd10      	pop	{r4, pc}
1000f3fe:	46c0      	nop			; (mov r8, r8)

1000f400 <__clzsi2>:
1000f400:	211c      	movs	r1, #28
1000f402:	2301      	movs	r3, #1
1000f404:	041b      	lsls	r3, r3, #16
1000f406:	4298      	cmp	r0, r3
1000f408:	d301      	bcc.n	1000f40e <__clzsi2+0xe>
1000f40a:	0c00      	lsrs	r0, r0, #16
1000f40c:	3910      	subs	r1, #16
1000f40e:	0a1b      	lsrs	r3, r3, #8
1000f410:	4298      	cmp	r0, r3
1000f412:	d301      	bcc.n	1000f418 <__clzsi2+0x18>
1000f414:	0a00      	lsrs	r0, r0, #8
1000f416:	3908      	subs	r1, #8
1000f418:	091b      	lsrs	r3, r3, #4
1000f41a:	4298      	cmp	r0, r3
1000f41c:	d301      	bcc.n	1000f422 <__clzsi2+0x22>
1000f41e:	0900      	lsrs	r0, r0, #4
1000f420:	3904      	subs	r1, #4
1000f422:	a202      	add	r2, pc, #8	; (adr r2, 1000f42c <__clzsi2+0x2c>)
1000f424:	5c10      	ldrb	r0, [r2, r0]
1000f426:	1840      	adds	r0, r0, r1
1000f428:	4770      	bx	lr
1000f42a:	46c0      	nop			; (mov r8, r8)
1000f42c:	02020304 	.word	0x02020304
1000f430:	01010101 	.word	0x01010101
	...

1000f43c <__eqdf2>:
1000f43c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f43e:	465f      	mov	r7, fp
1000f440:	4656      	mov	r6, sl
1000f442:	464d      	mov	r5, r9
1000f444:	4644      	mov	r4, r8
1000f446:	b4f0      	push	{r4, r5, r6, r7}
1000f448:	031f      	lsls	r7, r3, #12
1000f44a:	005c      	lsls	r4, r3, #1
1000f44c:	0fdb      	lsrs	r3, r3, #31
1000f44e:	469a      	mov	sl, r3
1000f450:	4b19      	ldr	r3, [pc, #100]	; (1000f4b8 <__eqdf2+0x7c>)
1000f452:	030e      	lsls	r6, r1, #12
1000f454:	004d      	lsls	r5, r1, #1
1000f456:	0fc9      	lsrs	r1, r1, #31
1000f458:	4680      	mov	r8, r0
1000f45a:	0b36      	lsrs	r6, r6, #12
1000f45c:	0d6d      	lsrs	r5, r5, #21
1000f45e:	468b      	mov	fp, r1
1000f460:	4691      	mov	r9, r2
1000f462:	0b3f      	lsrs	r7, r7, #12
1000f464:	0d64      	lsrs	r4, r4, #21
1000f466:	429d      	cmp	r5, r3
1000f468:	d019      	beq.n	1000f49e <__eqdf2+0x62>
1000f46a:	4b13      	ldr	r3, [pc, #76]	; (1000f4b8 <__eqdf2+0x7c>)
1000f46c:	429c      	cmp	r4, r3
1000f46e:	d01b      	beq.n	1000f4a8 <__eqdf2+0x6c>
1000f470:	2301      	movs	r3, #1
1000f472:	42a5      	cmp	r5, r4
1000f474:	d006      	beq.n	1000f484 <__eqdf2+0x48>
1000f476:	0018      	movs	r0, r3
1000f478:	bc3c      	pop	{r2, r3, r4, r5}
1000f47a:	4690      	mov	r8, r2
1000f47c:	4699      	mov	r9, r3
1000f47e:	46a2      	mov	sl, r4
1000f480:	46ab      	mov	fp, r5
1000f482:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f484:	42be      	cmp	r6, r7
1000f486:	d1f6      	bne.n	1000f476 <__eqdf2+0x3a>
1000f488:	45c8      	cmp	r8, r9
1000f48a:	d1f4      	bne.n	1000f476 <__eqdf2+0x3a>
1000f48c:	45d3      	cmp	fp, sl
1000f48e:	d010      	beq.n	1000f4b2 <__eqdf2+0x76>
1000f490:	2d00      	cmp	r5, #0
1000f492:	d1f0      	bne.n	1000f476 <__eqdf2+0x3a>
1000f494:	4330      	orrs	r0, r6
1000f496:	0003      	movs	r3, r0
1000f498:	1e5a      	subs	r2, r3, #1
1000f49a:	4193      	sbcs	r3, r2
1000f49c:	e7eb      	b.n	1000f476 <__eqdf2+0x3a>
1000f49e:	0031      	movs	r1, r6
1000f4a0:	2301      	movs	r3, #1
1000f4a2:	4301      	orrs	r1, r0
1000f4a4:	d1e7      	bne.n	1000f476 <__eqdf2+0x3a>
1000f4a6:	e7e0      	b.n	1000f46a <__eqdf2+0x2e>
1000f4a8:	433a      	orrs	r2, r7
1000f4aa:	2301      	movs	r3, #1
1000f4ac:	2a00      	cmp	r2, #0
1000f4ae:	d1e2      	bne.n	1000f476 <__eqdf2+0x3a>
1000f4b0:	e7de      	b.n	1000f470 <__eqdf2+0x34>
1000f4b2:	2300      	movs	r3, #0
1000f4b4:	e7df      	b.n	1000f476 <__eqdf2+0x3a>
1000f4b6:	46c0      	nop			; (mov r8, r8)
1000f4b8:	000007ff 	.word	0x000007ff

1000f4bc <__gedf2>:
1000f4bc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f4be:	465f      	mov	r7, fp
1000f4c0:	4644      	mov	r4, r8
1000f4c2:	4656      	mov	r6, sl
1000f4c4:	464d      	mov	r5, r9
1000f4c6:	b4f0      	push	{r4, r5, r6, r7}
1000f4c8:	031f      	lsls	r7, r3, #12
1000f4ca:	0b3c      	lsrs	r4, r7, #12
1000f4cc:	4f2c      	ldr	r7, [pc, #176]	; (1000f580 <__gedf2+0xc4>)
1000f4ce:	030e      	lsls	r6, r1, #12
1000f4d0:	004d      	lsls	r5, r1, #1
1000f4d2:	46a3      	mov	fp, r4
1000f4d4:	005c      	lsls	r4, r3, #1
1000f4d6:	4684      	mov	ip, r0
1000f4d8:	0b36      	lsrs	r6, r6, #12
1000f4da:	0d6d      	lsrs	r5, r5, #21
1000f4dc:	0fc9      	lsrs	r1, r1, #31
1000f4de:	4690      	mov	r8, r2
1000f4e0:	0d64      	lsrs	r4, r4, #21
1000f4e2:	0fdb      	lsrs	r3, r3, #31
1000f4e4:	42bd      	cmp	r5, r7
1000f4e6:	d02b      	beq.n	1000f540 <__gedf2+0x84>
1000f4e8:	4f25      	ldr	r7, [pc, #148]	; (1000f580 <__gedf2+0xc4>)
1000f4ea:	42bc      	cmp	r4, r7
1000f4ec:	d02e      	beq.n	1000f54c <__gedf2+0x90>
1000f4ee:	2d00      	cmp	r5, #0
1000f4f0:	d10e      	bne.n	1000f510 <__gedf2+0x54>
1000f4f2:	4330      	orrs	r0, r6
1000f4f4:	0007      	movs	r7, r0
1000f4f6:	4681      	mov	r9, r0
1000f4f8:	4278      	negs	r0, r7
1000f4fa:	4178      	adcs	r0, r7
1000f4fc:	2c00      	cmp	r4, #0
1000f4fe:	d117      	bne.n	1000f530 <__gedf2+0x74>
1000f500:	465f      	mov	r7, fp
1000f502:	433a      	orrs	r2, r7
1000f504:	d114      	bne.n	1000f530 <__gedf2+0x74>
1000f506:	464b      	mov	r3, r9
1000f508:	2000      	movs	r0, #0
1000f50a:	2b00      	cmp	r3, #0
1000f50c:	d00a      	beq.n	1000f524 <__gedf2+0x68>
1000f50e:	e006      	b.n	1000f51e <__gedf2+0x62>
1000f510:	2c00      	cmp	r4, #0
1000f512:	d102      	bne.n	1000f51a <__gedf2+0x5e>
1000f514:	4658      	mov	r0, fp
1000f516:	4302      	orrs	r2, r0
1000f518:	d001      	beq.n	1000f51e <__gedf2+0x62>
1000f51a:	4299      	cmp	r1, r3
1000f51c:	d01a      	beq.n	1000f554 <__gedf2+0x98>
1000f51e:	2301      	movs	r3, #1
1000f520:	4248      	negs	r0, r1
1000f522:	4318      	orrs	r0, r3
1000f524:	bc3c      	pop	{r2, r3, r4, r5}
1000f526:	4690      	mov	r8, r2
1000f528:	4699      	mov	r9, r3
1000f52a:	46a2      	mov	sl, r4
1000f52c:	46ab      	mov	fp, r5
1000f52e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f530:	2800      	cmp	r0, #0
1000f532:	d0f2      	beq.n	1000f51a <__gedf2+0x5e>
1000f534:	4258      	negs	r0, r3
1000f536:	4158      	adcs	r0, r3
1000f538:	2201      	movs	r2, #1
1000f53a:	4240      	negs	r0, r0
1000f53c:	4310      	orrs	r0, r2
1000f53e:	e7f1      	b.n	1000f524 <__gedf2+0x68>
1000f540:	0037      	movs	r7, r6
1000f542:	4307      	orrs	r7, r0
1000f544:	d0d0      	beq.n	1000f4e8 <__gedf2+0x2c>
1000f546:	2002      	movs	r0, #2
1000f548:	4240      	negs	r0, r0
1000f54a:	e7eb      	b.n	1000f524 <__gedf2+0x68>
1000f54c:	465f      	mov	r7, fp
1000f54e:	4317      	orrs	r7, r2
1000f550:	d0cd      	beq.n	1000f4ee <__gedf2+0x32>
1000f552:	e7f8      	b.n	1000f546 <__gedf2+0x8a>
1000f554:	42a5      	cmp	r5, r4
1000f556:	dce2      	bgt.n	1000f51e <__gedf2+0x62>
1000f558:	db05      	blt.n	1000f566 <__gedf2+0xaa>
1000f55a:	455e      	cmp	r6, fp
1000f55c:	d8df      	bhi.n	1000f51e <__gedf2+0x62>
1000f55e:	d008      	beq.n	1000f572 <__gedf2+0xb6>
1000f560:	2000      	movs	r0, #0
1000f562:	455e      	cmp	r6, fp
1000f564:	d2de      	bcs.n	1000f524 <__gedf2+0x68>
1000f566:	4248      	negs	r0, r1
1000f568:	4148      	adcs	r0, r1
1000f56a:	2301      	movs	r3, #1
1000f56c:	4240      	negs	r0, r0
1000f56e:	4318      	orrs	r0, r3
1000f570:	e7d8      	b.n	1000f524 <__gedf2+0x68>
1000f572:	45c4      	cmp	ip, r8
1000f574:	d8d3      	bhi.n	1000f51e <__gedf2+0x62>
1000f576:	2000      	movs	r0, #0
1000f578:	45c4      	cmp	ip, r8
1000f57a:	d3f4      	bcc.n	1000f566 <__gedf2+0xaa>
1000f57c:	e7d2      	b.n	1000f524 <__gedf2+0x68>
1000f57e:	46c0      	nop			; (mov r8, r8)
1000f580:	000007ff 	.word	0x000007ff

1000f584 <__ledf2>:
1000f584:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f586:	465f      	mov	r7, fp
1000f588:	464d      	mov	r5, r9
1000f58a:	4644      	mov	r4, r8
1000f58c:	4656      	mov	r6, sl
1000f58e:	b4f0      	push	{r4, r5, r6, r7}
1000f590:	031c      	lsls	r4, r3, #12
1000f592:	0b24      	lsrs	r4, r4, #12
1000f594:	46a4      	mov	ip, r4
1000f596:	4c2f      	ldr	r4, [pc, #188]	; (1000f654 <__ledf2+0xd0>)
1000f598:	030f      	lsls	r7, r1, #12
1000f59a:	004d      	lsls	r5, r1, #1
1000f59c:	005e      	lsls	r6, r3, #1
1000f59e:	0fc9      	lsrs	r1, r1, #31
1000f5a0:	4680      	mov	r8, r0
1000f5a2:	0b3f      	lsrs	r7, r7, #12
1000f5a4:	0d6d      	lsrs	r5, r5, #21
1000f5a6:	468b      	mov	fp, r1
1000f5a8:	4691      	mov	r9, r2
1000f5aa:	0d76      	lsrs	r6, r6, #21
1000f5ac:	0fdb      	lsrs	r3, r3, #31
1000f5ae:	42a5      	cmp	r5, r4
1000f5b0:	d020      	beq.n	1000f5f4 <__ledf2+0x70>
1000f5b2:	4c28      	ldr	r4, [pc, #160]	; (1000f654 <__ledf2+0xd0>)
1000f5b4:	42a6      	cmp	r6, r4
1000f5b6:	d022      	beq.n	1000f5fe <__ledf2+0x7a>
1000f5b8:	2d00      	cmp	r5, #0
1000f5ba:	d112      	bne.n	1000f5e2 <__ledf2+0x5e>
1000f5bc:	4338      	orrs	r0, r7
1000f5be:	4244      	negs	r4, r0
1000f5c0:	4144      	adcs	r4, r0
1000f5c2:	2e00      	cmp	r6, #0
1000f5c4:	d020      	beq.n	1000f608 <__ledf2+0x84>
1000f5c6:	2c00      	cmp	r4, #0
1000f5c8:	d00d      	beq.n	1000f5e6 <__ledf2+0x62>
1000f5ca:	425c      	negs	r4, r3
1000f5cc:	4163      	adcs	r3, r4
1000f5ce:	2401      	movs	r4, #1
1000f5d0:	425b      	negs	r3, r3
1000f5d2:	431c      	orrs	r4, r3
1000f5d4:	0020      	movs	r0, r4
1000f5d6:	bc3c      	pop	{r2, r3, r4, r5}
1000f5d8:	4690      	mov	r8, r2
1000f5da:	4699      	mov	r9, r3
1000f5dc:	46a2      	mov	sl, r4
1000f5de:	46ab      	mov	fp, r5
1000f5e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f5e2:	2e00      	cmp	r6, #0
1000f5e4:	d017      	beq.n	1000f616 <__ledf2+0x92>
1000f5e6:	455b      	cmp	r3, fp
1000f5e8:	d019      	beq.n	1000f61e <__ledf2+0x9a>
1000f5ea:	465b      	mov	r3, fp
1000f5ec:	425c      	negs	r4, r3
1000f5ee:	2301      	movs	r3, #1
1000f5f0:	431c      	orrs	r4, r3
1000f5f2:	e7ef      	b.n	1000f5d4 <__ledf2+0x50>
1000f5f4:	0039      	movs	r1, r7
1000f5f6:	2402      	movs	r4, #2
1000f5f8:	4301      	orrs	r1, r0
1000f5fa:	d1eb      	bne.n	1000f5d4 <__ledf2+0x50>
1000f5fc:	e7d9      	b.n	1000f5b2 <__ledf2+0x2e>
1000f5fe:	4661      	mov	r1, ip
1000f600:	2402      	movs	r4, #2
1000f602:	4311      	orrs	r1, r2
1000f604:	d1e6      	bne.n	1000f5d4 <__ledf2+0x50>
1000f606:	e7d7      	b.n	1000f5b8 <__ledf2+0x34>
1000f608:	4661      	mov	r1, ip
1000f60a:	430a      	orrs	r2, r1
1000f60c:	d1db      	bne.n	1000f5c6 <__ledf2+0x42>
1000f60e:	2400      	movs	r4, #0
1000f610:	2800      	cmp	r0, #0
1000f612:	d0df      	beq.n	1000f5d4 <__ledf2+0x50>
1000f614:	e7e9      	b.n	1000f5ea <__ledf2+0x66>
1000f616:	4661      	mov	r1, ip
1000f618:	430a      	orrs	r2, r1
1000f61a:	d1e4      	bne.n	1000f5e6 <__ledf2+0x62>
1000f61c:	e7e5      	b.n	1000f5ea <__ledf2+0x66>
1000f61e:	42b5      	cmp	r5, r6
1000f620:	dd03      	ble.n	1000f62a <__ledf2+0xa6>
1000f622:	2201      	movs	r2, #1
1000f624:	425c      	negs	r4, r3
1000f626:	4314      	orrs	r4, r2
1000f628:	e7d4      	b.n	1000f5d4 <__ledf2+0x50>
1000f62a:	42b5      	cmp	r5, r6
1000f62c:	dbcd      	blt.n	1000f5ca <__ledf2+0x46>
1000f62e:	4567      	cmp	r7, ip
1000f630:	d8db      	bhi.n	1000f5ea <__ledf2+0x66>
1000f632:	d009      	beq.n	1000f648 <__ledf2+0xc4>
1000f634:	2400      	movs	r4, #0
1000f636:	4567      	cmp	r7, ip
1000f638:	d2cc      	bcs.n	1000f5d4 <__ledf2+0x50>
1000f63a:	4659      	mov	r1, fp
1000f63c:	424c      	negs	r4, r1
1000f63e:	4161      	adcs	r1, r4
1000f640:	2401      	movs	r4, #1
1000f642:	4249      	negs	r1, r1
1000f644:	430c      	orrs	r4, r1
1000f646:	e7c5      	b.n	1000f5d4 <__ledf2+0x50>
1000f648:	45c8      	cmp	r8, r9
1000f64a:	d8ce      	bhi.n	1000f5ea <__ledf2+0x66>
1000f64c:	2400      	movs	r4, #0
1000f64e:	45c8      	cmp	r8, r9
1000f650:	d3f3      	bcc.n	1000f63a <__ledf2+0xb6>
1000f652:	e7bf      	b.n	1000f5d4 <__ledf2+0x50>
1000f654:	000007ff 	.word	0x000007ff

1000f658 <__libc_init_array>:
1000f658:	4b0e      	ldr	r3, [pc, #56]	; (1000f694 <__libc_init_array+0x3c>)
1000f65a:	b570      	push	{r4, r5, r6, lr}
1000f65c:	2500      	movs	r5, #0
1000f65e:	001e      	movs	r6, r3
1000f660:	4c0d      	ldr	r4, [pc, #52]	; (1000f698 <__libc_init_array+0x40>)
1000f662:	1ae4      	subs	r4, r4, r3
1000f664:	10a4      	asrs	r4, r4, #2
1000f666:	42a5      	cmp	r5, r4
1000f668:	d004      	beq.n	1000f674 <__libc_init_array+0x1c>
1000f66a:	00ab      	lsls	r3, r5, #2
1000f66c:	58f3      	ldr	r3, [r6, r3]
1000f66e:	4798      	blx	r3
1000f670:	3501      	adds	r5, #1
1000f672:	e7f8      	b.n	1000f666 <__libc_init_array+0xe>
1000f674:	f002 f8c4 	bl	10011800 <_init>
1000f678:	4b08      	ldr	r3, [pc, #32]	; (1000f69c <__libc_init_array+0x44>)
1000f67a:	2500      	movs	r5, #0
1000f67c:	001e      	movs	r6, r3
1000f67e:	4c08      	ldr	r4, [pc, #32]	; (1000f6a0 <__libc_init_array+0x48>)
1000f680:	1ae4      	subs	r4, r4, r3
1000f682:	10a4      	asrs	r4, r4, #2
1000f684:	42a5      	cmp	r5, r4
1000f686:	d004      	beq.n	1000f692 <__libc_init_array+0x3a>
1000f688:	00ab      	lsls	r3, r5, #2
1000f68a:	58f3      	ldr	r3, [r6, r3]
1000f68c:	4798      	blx	r3
1000f68e:	3501      	adds	r5, #1
1000f690:	e7f8      	b.n	1000f684 <__libc_init_array+0x2c>
1000f692:	bd70      	pop	{r4, r5, r6, pc}
1000f694:	1001180c 	.word	0x1001180c
1000f698:	1001180c 	.word	0x1001180c
1000f69c:	1001180c 	.word	0x1001180c
1000f6a0:	10011810 	.word	0x10011810

1000f6a4 <memcmp>:
1000f6a4:	b530      	push	{r4, r5, lr}
1000f6a6:	2400      	movs	r4, #0
1000f6a8:	42a2      	cmp	r2, r4
1000f6aa:	d008      	beq.n	1000f6be <memcmp+0x1a>
1000f6ac:	5d03      	ldrb	r3, [r0, r4]
1000f6ae:	1c65      	adds	r5, r4, #1
1000f6b0:	5d0c      	ldrb	r4, [r1, r4]
1000f6b2:	42a3      	cmp	r3, r4
1000f6b4:	d001      	beq.n	1000f6ba <memcmp+0x16>
1000f6b6:	1b18      	subs	r0, r3, r4
1000f6b8:	e002      	b.n	1000f6c0 <memcmp+0x1c>
1000f6ba:	002c      	movs	r4, r5
1000f6bc:	e7f4      	b.n	1000f6a8 <memcmp+0x4>
1000f6be:	2000      	movs	r0, #0
1000f6c0:	bd30      	pop	{r4, r5, pc}

1000f6c2 <memcpy>:
1000f6c2:	2300      	movs	r3, #0
1000f6c4:	b510      	push	{r4, lr}
1000f6c6:	429a      	cmp	r2, r3
1000f6c8:	d003      	beq.n	1000f6d2 <memcpy+0x10>
1000f6ca:	5ccc      	ldrb	r4, [r1, r3]
1000f6cc:	54c4      	strb	r4, [r0, r3]
1000f6ce:	3301      	adds	r3, #1
1000f6d0:	e7f9      	b.n	1000f6c6 <memcpy+0x4>
1000f6d2:	bd10      	pop	{r4, pc}

1000f6d4 <memset>:
1000f6d4:	0003      	movs	r3, r0
1000f6d6:	1882      	adds	r2, r0, r2
1000f6d8:	4293      	cmp	r3, r2
1000f6da:	d002      	beq.n	1000f6e2 <memset+0xe>
1000f6dc:	7019      	strb	r1, [r3, #0]
1000f6de:	3301      	adds	r3, #1
1000f6e0:	e7fa      	b.n	1000f6d8 <memset+0x4>
1000f6e2:	4770      	bx	lr

1000f6e4 <iprintf>:
1000f6e4:	b40f      	push	{r0, r1, r2, r3}
1000f6e6:	4b0b      	ldr	r3, [pc, #44]	; (1000f714 <iprintf+0x30>)
1000f6e8:	b513      	push	{r0, r1, r4, lr}
1000f6ea:	681c      	ldr	r4, [r3, #0]
1000f6ec:	2c00      	cmp	r4, #0
1000f6ee:	d005      	beq.n	1000f6fc <iprintf+0x18>
1000f6f0:	69a3      	ldr	r3, [r4, #24]
1000f6f2:	2b00      	cmp	r3, #0
1000f6f4:	d102      	bne.n	1000f6fc <iprintf+0x18>
1000f6f6:	0020      	movs	r0, r4
1000f6f8:	f000 fb46 	bl	1000fd88 <__sinit>
1000f6fc:	ab05      	add	r3, sp, #20
1000f6fe:	9a04      	ldr	r2, [sp, #16]
1000f700:	68a1      	ldr	r1, [r4, #8]
1000f702:	0020      	movs	r0, r4
1000f704:	9301      	str	r3, [sp, #4]
1000f706:	f000 fd05 	bl	10010114 <_vfiprintf_r>
1000f70a:	bc16      	pop	{r1, r2, r4}
1000f70c:	bc08      	pop	{r3}
1000f70e:	b004      	add	sp, #16
1000f710:	4718      	bx	r3
1000f712:	46c0      	nop			; (mov r8, r8)
1000f714:	10011890 	.word	0x10011890

1000f718 <putchar>:
1000f718:	4b08      	ldr	r3, [pc, #32]	; (1000f73c <putchar+0x24>)
1000f71a:	b570      	push	{r4, r5, r6, lr}
1000f71c:	681c      	ldr	r4, [r3, #0]
1000f71e:	0005      	movs	r5, r0
1000f720:	2c00      	cmp	r4, #0
1000f722:	d005      	beq.n	1000f730 <putchar+0x18>
1000f724:	69a3      	ldr	r3, [r4, #24]
1000f726:	2b00      	cmp	r3, #0
1000f728:	d102      	bne.n	1000f730 <putchar+0x18>
1000f72a:	0020      	movs	r0, r4
1000f72c:	f000 fb2c 	bl	1000fd88 <__sinit>
1000f730:	0029      	movs	r1, r5
1000f732:	68a2      	ldr	r2, [r4, #8]
1000f734:	0020      	movs	r0, r4
1000f736:	f000 ff99 	bl	1001066c <_putc_r>
1000f73a:	bd70      	pop	{r4, r5, r6, pc}
1000f73c:	10011890 	.word	0x10011890

1000f740 <_puts_r>:
1000f740:	b570      	push	{r4, r5, r6, lr}
1000f742:	0005      	movs	r5, r0
1000f744:	000e      	movs	r6, r1
1000f746:	2800      	cmp	r0, #0
1000f748:	d004      	beq.n	1000f754 <_puts_r+0x14>
1000f74a:	6983      	ldr	r3, [r0, #24]
1000f74c:	2b00      	cmp	r3, #0
1000f74e:	d101      	bne.n	1000f754 <_puts_r+0x14>
1000f750:	f000 fb1a 	bl	1000fd88 <__sinit>
1000f754:	69ab      	ldr	r3, [r5, #24]
1000f756:	68ac      	ldr	r4, [r5, #8]
1000f758:	2b00      	cmp	r3, #0
1000f75a:	d102      	bne.n	1000f762 <_puts_r+0x22>
1000f75c:	0028      	movs	r0, r5
1000f75e:	f000 fb13 	bl	1000fd88 <__sinit>
1000f762:	4b25      	ldr	r3, [pc, #148]	; (1000f7f8 <_puts_r+0xb8>)
1000f764:	429c      	cmp	r4, r3
1000f766:	d101      	bne.n	1000f76c <_puts_r+0x2c>
1000f768:	686c      	ldr	r4, [r5, #4]
1000f76a:	e008      	b.n	1000f77e <_puts_r+0x3e>
1000f76c:	4b23      	ldr	r3, [pc, #140]	; (1000f7fc <_puts_r+0xbc>)
1000f76e:	429c      	cmp	r4, r3
1000f770:	d101      	bne.n	1000f776 <_puts_r+0x36>
1000f772:	68ac      	ldr	r4, [r5, #8]
1000f774:	e003      	b.n	1000f77e <_puts_r+0x3e>
1000f776:	4b22      	ldr	r3, [pc, #136]	; (1000f800 <_puts_r+0xc0>)
1000f778:	429c      	cmp	r4, r3
1000f77a:	d100      	bne.n	1000f77e <_puts_r+0x3e>
1000f77c:	68ec      	ldr	r4, [r5, #12]
1000f77e:	89a3      	ldrh	r3, [r4, #12]
1000f780:	071b      	lsls	r3, r3, #28
1000f782:	d502      	bpl.n	1000f78a <_puts_r+0x4a>
1000f784:	6923      	ldr	r3, [r4, #16]
1000f786:	2b00      	cmp	r3, #0
1000f788:	d111      	bne.n	1000f7ae <_puts_r+0x6e>
1000f78a:	0021      	movs	r1, r4
1000f78c:	0028      	movs	r0, r5
1000f78e:	f000 f991 	bl	1000fab4 <__swsetup_r>
1000f792:	2800      	cmp	r0, #0
1000f794:	d00b      	beq.n	1000f7ae <_puts_r+0x6e>
1000f796:	2001      	movs	r0, #1
1000f798:	4240      	negs	r0, r0
1000f79a:	e02b      	b.n	1000f7f4 <_puts_r+0xb4>
1000f79c:	3b01      	subs	r3, #1
1000f79e:	3601      	adds	r6, #1
1000f7a0:	60a3      	str	r3, [r4, #8]
1000f7a2:	2b00      	cmp	r3, #0
1000f7a4:	db08      	blt.n	1000f7b8 <_puts_r+0x78>
1000f7a6:	6823      	ldr	r3, [r4, #0]
1000f7a8:	1c5a      	adds	r2, r3, #1
1000f7aa:	6022      	str	r2, [r4, #0]
1000f7ac:	7019      	strb	r1, [r3, #0]
1000f7ae:	7831      	ldrb	r1, [r6, #0]
1000f7b0:	68a3      	ldr	r3, [r4, #8]
1000f7b2:	2900      	cmp	r1, #0
1000f7b4:	d1f2      	bne.n	1000f79c <_puts_r+0x5c>
1000f7b6:	e00b      	b.n	1000f7d0 <_puts_r+0x90>
1000f7b8:	69a2      	ldr	r2, [r4, #24]
1000f7ba:	4293      	cmp	r3, r2
1000f7bc:	db01      	blt.n	1000f7c2 <_puts_r+0x82>
1000f7be:	290a      	cmp	r1, #10
1000f7c0:	d1f1      	bne.n	1000f7a6 <_puts_r+0x66>
1000f7c2:	0022      	movs	r2, r4
1000f7c4:	0028      	movs	r0, r5
1000f7c6:	f000 f91d 	bl	1000fa04 <__swbuf_r>
1000f7ca:	1c43      	adds	r3, r0, #1
1000f7cc:	d1ef      	bne.n	1000f7ae <_puts_r+0x6e>
1000f7ce:	e7e2      	b.n	1000f796 <_puts_r+0x56>
1000f7d0:	3b01      	subs	r3, #1
1000f7d2:	60a3      	str	r3, [r4, #8]
1000f7d4:	2b00      	cmp	r3, #0
1000f7d6:	da08      	bge.n	1000f7ea <_puts_r+0xaa>
1000f7d8:	0022      	movs	r2, r4
1000f7da:	310a      	adds	r1, #10
1000f7dc:	0028      	movs	r0, r5
1000f7de:	f000 f911 	bl	1000fa04 <__swbuf_r>
1000f7e2:	1c43      	adds	r3, r0, #1
1000f7e4:	d0d7      	beq.n	1000f796 <_puts_r+0x56>
1000f7e6:	200a      	movs	r0, #10
1000f7e8:	e004      	b.n	1000f7f4 <_puts_r+0xb4>
1000f7ea:	200a      	movs	r0, #10
1000f7ec:	6823      	ldr	r3, [r4, #0]
1000f7ee:	1c5a      	adds	r2, r3, #1
1000f7f0:	6022      	str	r2, [r4, #0]
1000f7f2:	7018      	strb	r0, [r3, #0]
1000f7f4:	bd70      	pop	{r4, r5, r6, pc}
1000f7f6:	46c0      	nop			; (mov r8, r8)
1000f7f8:	1001176c 	.word	0x1001176c
1000f7fc:	1001178c 	.word	0x1001178c
1000f800:	100117ac 	.word	0x100117ac

1000f804 <puts>:
1000f804:	b510      	push	{r4, lr}
1000f806:	4b03      	ldr	r3, [pc, #12]	; (1000f814 <puts+0x10>)
1000f808:	0001      	movs	r1, r0
1000f80a:	6818      	ldr	r0, [r3, #0]
1000f80c:	f7ff ff98 	bl	1000f740 <_puts_r>
1000f810:	bd10      	pop	{r4, pc}
1000f812:	46c0      	nop			; (mov r8, r8)
1000f814:	10011890 	.word	0x10011890

1000f818 <rand>:
1000f818:	4b15      	ldr	r3, [pc, #84]	; (1000f870 <rand+0x58>)
1000f81a:	b510      	push	{r4, lr}
1000f81c:	681c      	ldr	r4, [r3, #0]
1000f81e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1000f820:	2b00      	cmp	r3, #0
1000f822:	d115      	bne.n	1000f850 <rand+0x38>
1000f824:	2018      	movs	r0, #24
1000f826:	f000 fba7 	bl	1000ff78 <malloc>
1000f82a:	4b12      	ldr	r3, [pc, #72]	; (1000f874 <rand+0x5c>)
1000f82c:	63a0      	str	r0, [r4, #56]	; 0x38
1000f82e:	8003      	strh	r3, [r0, #0]
1000f830:	4b11      	ldr	r3, [pc, #68]	; (1000f878 <rand+0x60>)
1000f832:	2201      	movs	r2, #1
1000f834:	8043      	strh	r3, [r0, #2]
1000f836:	4b11      	ldr	r3, [pc, #68]	; (1000f87c <rand+0x64>)
1000f838:	8083      	strh	r3, [r0, #4]
1000f83a:	4b11      	ldr	r3, [pc, #68]	; (1000f880 <rand+0x68>)
1000f83c:	80c3      	strh	r3, [r0, #6]
1000f83e:	4b11      	ldr	r3, [pc, #68]	; (1000f884 <rand+0x6c>)
1000f840:	8103      	strh	r3, [r0, #8]
1000f842:	2305      	movs	r3, #5
1000f844:	8143      	strh	r3, [r0, #10]
1000f846:	3306      	adds	r3, #6
1000f848:	8183      	strh	r3, [r0, #12]
1000f84a:	2300      	movs	r3, #0
1000f84c:	6102      	str	r2, [r0, #16]
1000f84e:	6143      	str	r3, [r0, #20]
1000f850:	6ba4      	ldr	r4, [r4, #56]	; 0x38
1000f852:	4a0d      	ldr	r2, [pc, #52]	; (1000f888 <rand+0x70>)
1000f854:	6920      	ldr	r0, [r4, #16]
1000f856:	6961      	ldr	r1, [r4, #20]
1000f858:	4b0c      	ldr	r3, [pc, #48]	; (1000f88c <rand+0x74>)
1000f85a:	f001 f819 	bl	10010890 <__aeabi_lmul>
1000f85e:	2201      	movs	r2, #1
1000f860:	2300      	movs	r3, #0
1000f862:	1880      	adds	r0, r0, r2
1000f864:	4159      	adcs	r1, r3
1000f866:	6120      	str	r0, [r4, #16]
1000f868:	6161      	str	r1, [r4, #20]
1000f86a:	0048      	lsls	r0, r1, #1
1000f86c:	0840      	lsrs	r0, r0, #1
1000f86e:	bd10      	pop	{r4, pc}
1000f870:	10011890 	.word	0x10011890
1000f874:	0000330e 	.word	0x0000330e
1000f878:	ffffabcd 	.word	0xffffabcd
1000f87c:	00001234 	.word	0x00001234
1000f880:	ffffe66d 	.word	0xffffe66d
1000f884:	ffffdeec 	.word	0xffffdeec
1000f888:	4c957f2d 	.word	0x4c957f2d
1000f88c:	5851f42d 	.word	0x5851f42d

1000f890 <setbuf>:
1000f890:	424a      	negs	r2, r1
1000f892:	414a      	adcs	r2, r1
1000f894:	2380      	movs	r3, #128	; 0x80
1000f896:	b510      	push	{r4, lr}
1000f898:	0052      	lsls	r2, r2, #1
1000f89a:	00db      	lsls	r3, r3, #3
1000f89c:	f000 f802 	bl	1000f8a4 <setvbuf>
1000f8a0:	bd10      	pop	{r4, pc}
	...

1000f8a4 <setvbuf>:
1000f8a4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f8a6:	001d      	movs	r5, r3
1000f8a8:	4b51      	ldr	r3, [pc, #324]	; (1000f9f0 <setvbuf+0x14c>)
1000f8aa:	b085      	sub	sp, #20
1000f8ac:	681e      	ldr	r6, [r3, #0]
1000f8ae:	0004      	movs	r4, r0
1000f8b0:	000f      	movs	r7, r1
1000f8b2:	9200      	str	r2, [sp, #0]
1000f8b4:	2e00      	cmp	r6, #0
1000f8b6:	d005      	beq.n	1000f8c4 <setvbuf+0x20>
1000f8b8:	69b3      	ldr	r3, [r6, #24]
1000f8ba:	2b00      	cmp	r3, #0
1000f8bc:	d102      	bne.n	1000f8c4 <setvbuf+0x20>
1000f8be:	0030      	movs	r0, r6
1000f8c0:	f000 fa62 	bl	1000fd88 <__sinit>
1000f8c4:	4b4b      	ldr	r3, [pc, #300]	; (1000f9f4 <setvbuf+0x150>)
1000f8c6:	429c      	cmp	r4, r3
1000f8c8:	d101      	bne.n	1000f8ce <setvbuf+0x2a>
1000f8ca:	6874      	ldr	r4, [r6, #4]
1000f8cc:	e008      	b.n	1000f8e0 <setvbuf+0x3c>
1000f8ce:	4b4a      	ldr	r3, [pc, #296]	; (1000f9f8 <setvbuf+0x154>)
1000f8d0:	429c      	cmp	r4, r3
1000f8d2:	d101      	bne.n	1000f8d8 <setvbuf+0x34>
1000f8d4:	68b4      	ldr	r4, [r6, #8]
1000f8d6:	e003      	b.n	1000f8e0 <setvbuf+0x3c>
1000f8d8:	4b48      	ldr	r3, [pc, #288]	; (1000f9fc <setvbuf+0x158>)
1000f8da:	429c      	cmp	r4, r3
1000f8dc:	d100      	bne.n	1000f8e0 <setvbuf+0x3c>
1000f8de:	68f4      	ldr	r4, [r6, #12]
1000f8e0:	9b00      	ldr	r3, [sp, #0]
1000f8e2:	2b02      	cmp	r3, #2
1000f8e4:	d005      	beq.n	1000f8f2 <setvbuf+0x4e>
1000f8e6:	2b01      	cmp	r3, #1
1000f8e8:	d900      	bls.n	1000f8ec <setvbuf+0x48>
1000f8ea:	e07c      	b.n	1000f9e6 <setvbuf+0x142>
1000f8ec:	2d00      	cmp	r5, #0
1000f8ee:	da00      	bge.n	1000f8f2 <setvbuf+0x4e>
1000f8f0:	e079      	b.n	1000f9e6 <setvbuf+0x142>
1000f8f2:	0021      	movs	r1, r4
1000f8f4:	0030      	movs	r0, r6
1000f8f6:	f000 f9d9 	bl	1000fcac <_fflush_r>
1000f8fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
1000f8fc:	2900      	cmp	r1, #0
1000f8fe:	d008      	beq.n	1000f912 <setvbuf+0x6e>
1000f900:	0023      	movs	r3, r4
1000f902:	3344      	adds	r3, #68	; 0x44
1000f904:	4299      	cmp	r1, r3
1000f906:	d002      	beq.n	1000f90e <setvbuf+0x6a>
1000f908:	0030      	movs	r0, r6
1000f90a:	f000 fb3f 	bl	1000ff8c <_free_r>
1000f90e:	2300      	movs	r3, #0
1000f910:	6363      	str	r3, [r4, #52]	; 0x34
1000f912:	2300      	movs	r3, #0
1000f914:	61a3      	str	r3, [r4, #24]
1000f916:	6063      	str	r3, [r4, #4]
1000f918:	89a3      	ldrh	r3, [r4, #12]
1000f91a:	061b      	lsls	r3, r3, #24
1000f91c:	d503      	bpl.n	1000f926 <setvbuf+0x82>
1000f91e:	6921      	ldr	r1, [r4, #16]
1000f920:	0030      	movs	r0, r6
1000f922:	f000 fb33 	bl	1000ff8c <_free_r>
1000f926:	89a2      	ldrh	r2, [r4, #12]
1000f928:	4b35      	ldr	r3, [pc, #212]	; (1000fa00 <setvbuf+0x15c>)
1000f92a:	4013      	ands	r3, r2
1000f92c:	81a3      	strh	r3, [r4, #12]
1000f92e:	9b00      	ldr	r3, [sp, #0]
1000f930:	2b02      	cmp	r3, #2
1000f932:	d021      	beq.n	1000f978 <setvbuf+0xd4>
1000f934:	ab03      	add	r3, sp, #12
1000f936:	aa02      	add	r2, sp, #8
1000f938:	0021      	movs	r1, r4
1000f93a:	0030      	movs	r0, r6
1000f93c:	f000 fab8 	bl	1000feb0 <__swhatbuf_r>
1000f940:	89a3      	ldrh	r3, [r4, #12]
1000f942:	4318      	orrs	r0, r3
1000f944:	81a0      	strh	r0, [r4, #12]
1000f946:	2d00      	cmp	r5, #0
1000f948:	d101      	bne.n	1000f94e <setvbuf+0xaa>
1000f94a:	9d02      	ldr	r5, [sp, #8]
1000f94c:	e001      	b.n	1000f952 <setvbuf+0xae>
1000f94e:	2f00      	cmp	r7, #0
1000f950:	d125      	bne.n	1000f99e <setvbuf+0xfa>
1000f952:	0028      	movs	r0, r5
1000f954:	f000 fb10 	bl	1000ff78 <malloc>
1000f958:	9501      	str	r5, [sp, #4]
1000f95a:	1e07      	subs	r7, r0, #0
1000f95c:	d11a      	bne.n	1000f994 <setvbuf+0xf0>
1000f95e:	9b02      	ldr	r3, [sp, #8]
1000f960:	9301      	str	r3, [sp, #4]
1000f962:	42ab      	cmp	r3, r5
1000f964:	d102      	bne.n	1000f96c <setvbuf+0xc8>
1000f966:	2001      	movs	r0, #1
1000f968:	4240      	negs	r0, r0
1000f96a:	e006      	b.n	1000f97a <setvbuf+0xd6>
1000f96c:	9801      	ldr	r0, [sp, #4]
1000f96e:	f000 fb03 	bl	1000ff78 <malloc>
1000f972:	1e07      	subs	r7, r0, #0
1000f974:	d10e      	bne.n	1000f994 <setvbuf+0xf0>
1000f976:	e7f6      	b.n	1000f966 <setvbuf+0xc2>
1000f978:	2000      	movs	r0, #0
1000f97a:	2202      	movs	r2, #2
1000f97c:	89a3      	ldrh	r3, [r4, #12]
1000f97e:	4313      	orrs	r3, r2
1000f980:	81a3      	strh	r3, [r4, #12]
1000f982:	2300      	movs	r3, #0
1000f984:	60a3      	str	r3, [r4, #8]
1000f986:	0023      	movs	r3, r4
1000f988:	3347      	adds	r3, #71	; 0x47
1000f98a:	6023      	str	r3, [r4, #0]
1000f98c:	6123      	str	r3, [r4, #16]
1000f98e:	2301      	movs	r3, #1
1000f990:	6163      	str	r3, [r4, #20]
1000f992:	e02a      	b.n	1000f9ea <setvbuf+0x146>
1000f994:	2280      	movs	r2, #128	; 0x80
1000f996:	89a3      	ldrh	r3, [r4, #12]
1000f998:	9d01      	ldr	r5, [sp, #4]
1000f99a:	4313      	orrs	r3, r2
1000f99c:	81a3      	strh	r3, [r4, #12]
1000f99e:	69b3      	ldr	r3, [r6, #24]
1000f9a0:	2b00      	cmp	r3, #0
1000f9a2:	d102      	bne.n	1000f9aa <setvbuf+0x106>
1000f9a4:	0030      	movs	r0, r6
1000f9a6:	f000 f9ef 	bl	1000fd88 <__sinit>
1000f9aa:	9b00      	ldr	r3, [sp, #0]
1000f9ac:	2b01      	cmp	r3, #1
1000f9ae:	d103      	bne.n	1000f9b8 <setvbuf+0x114>
1000f9b0:	89a3      	ldrh	r3, [r4, #12]
1000f9b2:	9a00      	ldr	r2, [sp, #0]
1000f9b4:	431a      	orrs	r2, r3
1000f9b6:	81a2      	strh	r2, [r4, #12]
1000f9b8:	2308      	movs	r3, #8
1000f9ba:	89a2      	ldrh	r2, [r4, #12]
1000f9bc:	6027      	str	r7, [r4, #0]
1000f9be:	4013      	ands	r3, r2
1000f9c0:	6127      	str	r7, [r4, #16]
1000f9c2:	6165      	str	r5, [r4, #20]
1000f9c4:	1e18      	subs	r0, r3, #0
1000f9c6:	d00c      	beq.n	1000f9e2 <setvbuf+0x13e>
1000f9c8:	2301      	movs	r3, #1
1000f9ca:	401a      	ands	r2, r3
1000f9cc:	2300      	movs	r3, #0
1000f9ce:	1e10      	subs	r0, r2, #0
1000f9d0:	4298      	cmp	r0, r3
1000f9d2:	d004      	beq.n	1000f9de <setvbuf+0x13a>
1000f9d4:	426d      	negs	r5, r5
1000f9d6:	60a3      	str	r3, [r4, #8]
1000f9d8:	61a5      	str	r5, [r4, #24]
1000f9da:	0018      	movs	r0, r3
1000f9dc:	e005      	b.n	1000f9ea <setvbuf+0x146>
1000f9de:	60a5      	str	r5, [r4, #8]
1000f9e0:	e003      	b.n	1000f9ea <setvbuf+0x146>
1000f9e2:	60a3      	str	r3, [r4, #8]
1000f9e4:	e001      	b.n	1000f9ea <setvbuf+0x146>
1000f9e6:	2001      	movs	r0, #1
1000f9e8:	4240      	negs	r0, r0
1000f9ea:	b005      	add	sp, #20
1000f9ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f9ee:	46c0      	nop			; (mov r8, r8)
1000f9f0:	10011890 	.word	0x10011890
1000f9f4:	1001176c 	.word	0x1001176c
1000f9f8:	1001178c 	.word	0x1001178c
1000f9fc:	100117ac 	.word	0x100117ac
1000fa00:	fffff35c 	.word	0xfffff35c

1000fa04 <__swbuf_r>:
1000fa04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000fa06:	0005      	movs	r5, r0
1000fa08:	000f      	movs	r7, r1
1000fa0a:	0014      	movs	r4, r2
1000fa0c:	2800      	cmp	r0, #0
1000fa0e:	d004      	beq.n	1000fa1a <__swbuf_r+0x16>
1000fa10:	6983      	ldr	r3, [r0, #24]
1000fa12:	2b00      	cmp	r3, #0
1000fa14:	d101      	bne.n	1000fa1a <__swbuf_r+0x16>
1000fa16:	f000 f9b7 	bl	1000fd88 <__sinit>
1000fa1a:	4b23      	ldr	r3, [pc, #140]	; (1000faa8 <__swbuf_r+0xa4>)
1000fa1c:	429c      	cmp	r4, r3
1000fa1e:	d101      	bne.n	1000fa24 <__swbuf_r+0x20>
1000fa20:	686c      	ldr	r4, [r5, #4]
1000fa22:	e008      	b.n	1000fa36 <__swbuf_r+0x32>
1000fa24:	4b21      	ldr	r3, [pc, #132]	; (1000faac <__swbuf_r+0xa8>)
1000fa26:	429c      	cmp	r4, r3
1000fa28:	d101      	bne.n	1000fa2e <__swbuf_r+0x2a>
1000fa2a:	68ac      	ldr	r4, [r5, #8]
1000fa2c:	e003      	b.n	1000fa36 <__swbuf_r+0x32>
1000fa2e:	4b20      	ldr	r3, [pc, #128]	; (1000fab0 <__swbuf_r+0xac>)
1000fa30:	429c      	cmp	r4, r3
1000fa32:	d100      	bne.n	1000fa36 <__swbuf_r+0x32>
1000fa34:	68ec      	ldr	r4, [r5, #12]
1000fa36:	69a3      	ldr	r3, [r4, #24]
1000fa38:	60a3      	str	r3, [r4, #8]
1000fa3a:	89a3      	ldrh	r3, [r4, #12]
1000fa3c:	071b      	lsls	r3, r3, #28
1000fa3e:	d50a      	bpl.n	1000fa56 <__swbuf_r+0x52>
1000fa40:	6923      	ldr	r3, [r4, #16]
1000fa42:	2b00      	cmp	r3, #0
1000fa44:	d007      	beq.n	1000fa56 <__swbuf_r+0x52>
1000fa46:	6823      	ldr	r3, [r4, #0]
1000fa48:	6922      	ldr	r2, [r4, #16]
1000fa4a:	b2fe      	uxtb	r6, r7
1000fa4c:	1a98      	subs	r0, r3, r2
1000fa4e:	6963      	ldr	r3, [r4, #20]
1000fa50:	4298      	cmp	r0, r3
1000fa52:	db0f      	blt.n	1000fa74 <__swbuf_r+0x70>
1000fa54:	e008      	b.n	1000fa68 <__swbuf_r+0x64>
1000fa56:	0021      	movs	r1, r4
1000fa58:	0028      	movs	r0, r5
1000fa5a:	f000 f82b 	bl	1000fab4 <__swsetup_r>
1000fa5e:	2800      	cmp	r0, #0
1000fa60:	d0f1      	beq.n	1000fa46 <__swbuf_r+0x42>
1000fa62:	2001      	movs	r0, #1
1000fa64:	4240      	negs	r0, r0
1000fa66:	e01d      	b.n	1000faa4 <__swbuf_r+0xa0>
1000fa68:	0021      	movs	r1, r4
1000fa6a:	0028      	movs	r0, r5
1000fa6c:	f000 f91e 	bl	1000fcac <_fflush_r>
1000fa70:	2800      	cmp	r0, #0
1000fa72:	d1f6      	bne.n	1000fa62 <__swbuf_r+0x5e>
1000fa74:	68a3      	ldr	r3, [r4, #8]
1000fa76:	3001      	adds	r0, #1
1000fa78:	3b01      	subs	r3, #1
1000fa7a:	60a3      	str	r3, [r4, #8]
1000fa7c:	6823      	ldr	r3, [r4, #0]
1000fa7e:	1c5a      	adds	r2, r3, #1
1000fa80:	6022      	str	r2, [r4, #0]
1000fa82:	701f      	strb	r7, [r3, #0]
1000fa84:	6963      	ldr	r3, [r4, #20]
1000fa86:	4298      	cmp	r0, r3
1000fa88:	d005      	beq.n	1000fa96 <__swbuf_r+0x92>
1000fa8a:	89a3      	ldrh	r3, [r4, #12]
1000fa8c:	0030      	movs	r0, r6
1000fa8e:	07db      	lsls	r3, r3, #31
1000fa90:	d508      	bpl.n	1000faa4 <__swbuf_r+0xa0>
1000fa92:	2e0a      	cmp	r6, #10
1000fa94:	d106      	bne.n	1000faa4 <__swbuf_r+0xa0>
1000fa96:	0021      	movs	r1, r4
1000fa98:	0028      	movs	r0, r5
1000fa9a:	f000 f907 	bl	1000fcac <_fflush_r>
1000fa9e:	2800      	cmp	r0, #0
1000faa0:	d1df      	bne.n	1000fa62 <__swbuf_r+0x5e>
1000faa2:	0030      	movs	r0, r6
1000faa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000faa6:	46c0      	nop			; (mov r8, r8)
1000faa8:	1001176c 	.word	0x1001176c
1000faac:	1001178c 	.word	0x1001178c
1000fab0:	100117ac 	.word	0x100117ac

1000fab4 <__swsetup_r>:
1000fab4:	4b36      	ldr	r3, [pc, #216]	; (1000fb90 <__swsetup_r+0xdc>)
1000fab6:	b570      	push	{r4, r5, r6, lr}
1000fab8:	681d      	ldr	r5, [r3, #0]
1000faba:	0006      	movs	r6, r0
1000fabc:	000c      	movs	r4, r1
1000fabe:	2d00      	cmp	r5, #0
1000fac0:	d005      	beq.n	1000face <__swsetup_r+0x1a>
1000fac2:	69ab      	ldr	r3, [r5, #24]
1000fac4:	2b00      	cmp	r3, #0
1000fac6:	d102      	bne.n	1000face <__swsetup_r+0x1a>
1000fac8:	0028      	movs	r0, r5
1000faca:	f000 f95d 	bl	1000fd88 <__sinit>
1000face:	4b31      	ldr	r3, [pc, #196]	; (1000fb94 <__swsetup_r+0xe0>)
1000fad0:	429c      	cmp	r4, r3
1000fad2:	d101      	bne.n	1000fad8 <__swsetup_r+0x24>
1000fad4:	686c      	ldr	r4, [r5, #4]
1000fad6:	e008      	b.n	1000faea <__swsetup_r+0x36>
1000fad8:	4b2f      	ldr	r3, [pc, #188]	; (1000fb98 <__swsetup_r+0xe4>)
1000fada:	429c      	cmp	r4, r3
1000fadc:	d101      	bne.n	1000fae2 <__swsetup_r+0x2e>
1000fade:	68ac      	ldr	r4, [r5, #8]
1000fae0:	e003      	b.n	1000faea <__swsetup_r+0x36>
1000fae2:	4b2e      	ldr	r3, [pc, #184]	; (1000fb9c <__swsetup_r+0xe8>)
1000fae4:	429c      	cmp	r4, r3
1000fae6:	d100      	bne.n	1000faea <__swsetup_r+0x36>
1000fae8:	68ec      	ldr	r4, [r5, #12]
1000faea:	220c      	movs	r2, #12
1000faec:	5ea3      	ldrsh	r3, [r4, r2]
1000faee:	b29a      	uxth	r2, r3
1000faf0:	0711      	lsls	r1, r2, #28
1000faf2:	d423      	bmi.n	1000fb3c <__swsetup_r+0x88>
1000faf4:	06d1      	lsls	r1, r2, #27
1000faf6:	d407      	bmi.n	1000fb08 <__swsetup_r+0x54>
1000faf8:	2209      	movs	r2, #9
1000fafa:	2001      	movs	r0, #1
1000fafc:	6032      	str	r2, [r6, #0]
1000fafe:	3237      	adds	r2, #55	; 0x37
1000fb00:	4313      	orrs	r3, r2
1000fb02:	81a3      	strh	r3, [r4, #12]
1000fb04:	4240      	negs	r0, r0
1000fb06:	e042      	b.n	1000fb8e <__swsetup_r+0xda>
1000fb08:	0753      	lsls	r3, r2, #29
1000fb0a:	d513      	bpl.n	1000fb34 <__swsetup_r+0x80>
1000fb0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
1000fb0e:	2900      	cmp	r1, #0
1000fb10:	d008      	beq.n	1000fb24 <__swsetup_r+0x70>
1000fb12:	0023      	movs	r3, r4
1000fb14:	3344      	adds	r3, #68	; 0x44
1000fb16:	4299      	cmp	r1, r3
1000fb18:	d002      	beq.n	1000fb20 <__swsetup_r+0x6c>
1000fb1a:	0030      	movs	r0, r6
1000fb1c:	f000 fa36 	bl	1000ff8c <_free_r>
1000fb20:	2300      	movs	r3, #0
1000fb22:	6363      	str	r3, [r4, #52]	; 0x34
1000fb24:	2224      	movs	r2, #36	; 0x24
1000fb26:	89a3      	ldrh	r3, [r4, #12]
1000fb28:	4393      	bics	r3, r2
1000fb2a:	81a3      	strh	r3, [r4, #12]
1000fb2c:	2300      	movs	r3, #0
1000fb2e:	6063      	str	r3, [r4, #4]
1000fb30:	6923      	ldr	r3, [r4, #16]
1000fb32:	6023      	str	r3, [r4, #0]
1000fb34:	2208      	movs	r2, #8
1000fb36:	89a3      	ldrh	r3, [r4, #12]
1000fb38:	4313      	orrs	r3, r2
1000fb3a:	81a3      	strh	r3, [r4, #12]
1000fb3c:	6923      	ldr	r3, [r4, #16]
1000fb3e:	2b00      	cmp	r3, #0
1000fb40:	d10b      	bne.n	1000fb5a <__swsetup_r+0xa6>
1000fb42:	23a0      	movs	r3, #160	; 0xa0
1000fb44:	89a2      	ldrh	r2, [r4, #12]
1000fb46:	009b      	lsls	r3, r3, #2
1000fb48:	4013      	ands	r3, r2
1000fb4a:	2280      	movs	r2, #128	; 0x80
1000fb4c:	0092      	lsls	r2, r2, #2
1000fb4e:	4293      	cmp	r3, r2
1000fb50:	d003      	beq.n	1000fb5a <__swsetup_r+0xa6>
1000fb52:	0021      	movs	r1, r4
1000fb54:	0030      	movs	r0, r6
1000fb56:	f000 f9d1 	bl	1000fefc <__smakebuf_r>
1000fb5a:	2301      	movs	r3, #1
1000fb5c:	89a2      	ldrh	r2, [r4, #12]
1000fb5e:	4013      	ands	r3, r2
1000fb60:	d005      	beq.n	1000fb6e <__swsetup_r+0xba>
1000fb62:	2300      	movs	r3, #0
1000fb64:	60a3      	str	r3, [r4, #8]
1000fb66:	6963      	ldr	r3, [r4, #20]
1000fb68:	425b      	negs	r3, r3
1000fb6a:	61a3      	str	r3, [r4, #24]
1000fb6c:	e003      	b.n	1000fb76 <__swsetup_r+0xc2>
1000fb6e:	0792      	lsls	r2, r2, #30
1000fb70:	d400      	bmi.n	1000fb74 <__swsetup_r+0xc0>
1000fb72:	6963      	ldr	r3, [r4, #20]
1000fb74:	60a3      	str	r3, [r4, #8]
1000fb76:	2000      	movs	r0, #0
1000fb78:	6923      	ldr	r3, [r4, #16]
1000fb7a:	4283      	cmp	r3, r0
1000fb7c:	d107      	bne.n	1000fb8e <__swsetup_r+0xda>
1000fb7e:	220c      	movs	r2, #12
1000fb80:	5ea3      	ldrsh	r3, [r4, r2]
1000fb82:	061a      	lsls	r2, r3, #24
1000fb84:	d503      	bpl.n	1000fb8e <__swsetup_r+0xda>
1000fb86:	2240      	movs	r2, #64	; 0x40
1000fb88:	4313      	orrs	r3, r2
1000fb8a:	81a3      	strh	r3, [r4, #12]
1000fb8c:	3801      	subs	r0, #1
1000fb8e:	bd70      	pop	{r4, r5, r6, pc}
1000fb90:	10011890 	.word	0x10011890
1000fb94:	1001176c 	.word	0x1001176c
1000fb98:	1001178c 	.word	0x1001178c
1000fb9c:	100117ac 	.word	0x100117ac

1000fba0 <__sflush_r>:
1000fba0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000fba2:	898a      	ldrh	r2, [r1, #12]
1000fba4:	0005      	movs	r5, r0
1000fba6:	000c      	movs	r4, r1
1000fba8:	0713      	lsls	r3, r2, #28
1000fbaa:	d45a      	bmi.n	1000fc62 <__sflush_r+0xc2>
1000fbac:	684b      	ldr	r3, [r1, #4]
1000fbae:	2b00      	cmp	r3, #0
1000fbb0:	dc02      	bgt.n	1000fbb8 <__sflush_r+0x18>
1000fbb2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
1000fbb4:	2b00      	cmp	r3, #0
1000fbb6:	dd19      	ble.n	1000fbec <__sflush_r+0x4c>
1000fbb8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
1000fbba:	2f00      	cmp	r7, #0
1000fbbc:	d016      	beq.n	1000fbec <__sflush_r+0x4c>
1000fbbe:	2300      	movs	r3, #0
1000fbc0:	682e      	ldr	r6, [r5, #0]
1000fbc2:	602b      	str	r3, [r5, #0]
1000fbc4:	2380      	movs	r3, #128	; 0x80
1000fbc6:	015b      	lsls	r3, r3, #5
1000fbc8:	401a      	ands	r2, r3
1000fbca:	d001      	beq.n	1000fbd0 <__sflush_r+0x30>
1000fbcc:	6d60      	ldr	r0, [r4, #84]	; 0x54
1000fbce:	e014      	b.n	1000fbfa <__sflush_r+0x5a>
1000fbd0:	2301      	movs	r3, #1
1000fbd2:	6a21      	ldr	r1, [r4, #32]
1000fbd4:	0028      	movs	r0, r5
1000fbd6:	47b8      	blx	r7
1000fbd8:	1c43      	adds	r3, r0, #1
1000fbda:	d10e      	bne.n	1000fbfa <__sflush_r+0x5a>
1000fbdc:	682b      	ldr	r3, [r5, #0]
1000fbde:	2b00      	cmp	r3, #0
1000fbe0:	d00b      	beq.n	1000fbfa <__sflush_r+0x5a>
1000fbe2:	2b1d      	cmp	r3, #29
1000fbe4:	d001      	beq.n	1000fbea <__sflush_r+0x4a>
1000fbe6:	2b16      	cmp	r3, #22
1000fbe8:	d102      	bne.n	1000fbf0 <__sflush_r+0x50>
1000fbea:	602e      	str	r6, [r5, #0]
1000fbec:	2000      	movs	r0, #0
1000fbee:	e05a      	b.n	1000fca6 <__sflush_r+0x106>
1000fbf0:	2240      	movs	r2, #64	; 0x40
1000fbf2:	89a3      	ldrh	r3, [r4, #12]
1000fbf4:	4313      	orrs	r3, r2
1000fbf6:	81a3      	strh	r3, [r4, #12]
1000fbf8:	e055      	b.n	1000fca6 <__sflush_r+0x106>
1000fbfa:	89a3      	ldrh	r3, [r4, #12]
1000fbfc:	075b      	lsls	r3, r3, #29
1000fbfe:	d506      	bpl.n	1000fc0e <__sflush_r+0x6e>
1000fc00:	6863      	ldr	r3, [r4, #4]
1000fc02:	1ac0      	subs	r0, r0, r3
1000fc04:	6b63      	ldr	r3, [r4, #52]	; 0x34
1000fc06:	2b00      	cmp	r3, #0
1000fc08:	d001      	beq.n	1000fc0e <__sflush_r+0x6e>
1000fc0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
1000fc0c:	1ac0      	subs	r0, r0, r3
1000fc0e:	2300      	movs	r3, #0
1000fc10:	0002      	movs	r2, r0
1000fc12:	6a21      	ldr	r1, [r4, #32]
1000fc14:	0028      	movs	r0, r5
1000fc16:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
1000fc18:	47b8      	blx	r7
1000fc1a:	89a3      	ldrh	r3, [r4, #12]
1000fc1c:	1c42      	adds	r2, r0, #1
1000fc1e:	d106      	bne.n	1000fc2e <__sflush_r+0x8e>
1000fc20:	6829      	ldr	r1, [r5, #0]
1000fc22:	291d      	cmp	r1, #29
1000fc24:	d83a      	bhi.n	1000fc9c <__sflush_r+0xfc>
1000fc26:	4a20      	ldr	r2, [pc, #128]	; (1000fca8 <__sflush_r+0x108>)
1000fc28:	40ca      	lsrs	r2, r1
1000fc2a:	07d2      	lsls	r2, r2, #31
1000fc2c:	d536      	bpl.n	1000fc9c <__sflush_r+0xfc>
1000fc2e:	2200      	movs	r2, #0
1000fc30:	6062      	str	r2, [r4, #4]
1000fc32:	6922      	ldr	r2, [r4, #16]
1000fc34:	6022      	str	r2, [r4, #0]
1000fc36:	04db      	lsls	r3, r3, #19
1000fc38:	d505      	bpl.n	1000fc46 <__sflush_r+0xa6>
1000fc3a:	1c43      	adds	r3, r0, #1
1000fc3c:	d102      	bne.n	1000fc44 <__sflush_r+0xa4>
1000fc3e:	682b      	ldr	r3, [r5, #0]
1000fc40:	2b00      	cmp	r3, #0
1000fc42:	d100      	bne.n	1000fc46 <__sflush_r+0xa6>
1000fc44:	6560      	str	r0, [r4, #84]	; 0x54
1000fc46:	6b61      	ldr	r1, [r4, #52]	; 0x34
1000fc48:	602e      	str	r6, [r5, #0]
1000fc4a:	2900      	cmp	r1, #0
1000fc4c:	d0ce      	beq.n	1000fbec <__sflush_r+0x4c>
1000fc4e:	0023      	movs	r3, r4
1000fc50:	3344      	adds	r3, #68	; 0x44
1000fc52:	4299      	cmp	r1, r3
1000fc54:	d002      	beq.n	1000fc5c <__sflush_r+0xbc>
1000fc56:	0028      	movs	r0, r5
1000fc58:	f000 f998 	bl	1000ff8c <_free_r>
1000fc5c:	2000      	movs	r0, #0
1000fc5e:	6360      	str	r0, [r4, #52]	; 0x34
1000fc60:	e021      	b.n	1000fca6 <__sflush_r+0x106>
1000fc62:	690f      	ldr	r7, [r1, #16]
1000fc64:	2f00      	cmp	r7, #0
1000fc66:	d0c1      	beq.n	1000fbec <__sflush_r+0x4c>
1000fc68:	680b      	ldr	r3, [r1, #0]
1000fc6a:	600f      	str	r7, [r1, #0]
1000fc6c:	1bdb      	subs	r3, r3, r7
1000fc6e:	9301      	str	r3, [sp, #4]
1000fc70:	2300      	movs	r3, #0
1000fc72:	0792      	lsls	r2, r2, #30
1000fc74:	d100      	bne.n	1000fc78 <__sflush_r+0xd8>
1000fc76:	694b      	ldr	r3, [r1, #20]
1000fc78:	60a3      	str	r3, [r4, #8]
1000fc7a:	e003      	b.n	1000fc84 <__sflush_r+0xe4>
1000fc7c:	9b01      	ldr	r3, [sp, #4]
1000fc7e:	183f      	adds	r7, r7, r0
1000fc80:	1a1b      	subs	r3, r3, r0
1000fc82:	9301      	str	r3, [sp, #4]
1000fc84:	9b01      	ldr	r3, [sp, #4]
1000fc86:	2b00      	cmp	r3, #0
1000fc88:	ddb0      	ble.n	1000fbec <__sflush_r+0x4c>
1000fc8a:	9b01      	ldr	r3, [sp, #4]
1000fc8c:	003a      	movs	r2, r7
1000fc8e:	6a21      	ldr	r1, [r4, #32]
1000fc90:	0028      	movs	r0, r5
1000fc92:	6aa6      	ldr	r6, [r4, #40]	; 0x28
1000fc94:	47b0      	blx	r6
1000fc96:	2800      	cmp	r0, #0
1000fc98:	dcf0      	bgt.n	1000fc7c <__sflush_r+0xdc>
1000fc9a:	89a3      	ldrh	r3, [r4, #12]
1000fc9c:	2240      	movs	r2, #64	; 0x40
1000fc9e:	2001      	movs	r0, #1
1000fca0:	4313      	orrs	r3, r2
1000fca2:	81a3      	strh	r3, [r4, #12]
1000fca4:	4240      	negs	r0, r0
1000fca6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000fca8:	20400001 	.word	0x20400001

1000fcac <_fflush_r>:
1000fcac:	690b      	ldr	r3, [r1, #16]
1000fcae:	b570      	push	{r4, r5, r6, lr}
1000fcb0:	0005      	movs	r5, r0
1000fcb2:	000c      	movs	r4, r1
1000fcb4:	2b00      	cmp	r3, #0
1000fcb6:	d101      	bne.n	1000fcbc <_fflush_r+0x10>
1000fcb8:	2000      	movs	r0, #0
1000fcba:	e01c      	b.n	1000fcf6 <_fflush_r+0x4a>
1000fcbc:	2800      	cmp	r0, #0
1000fcbe:	d004      	beq.n	1000fcca <_fflush_r+0x1e>
1000fcc0:	6983      	ldr	r3, [r0, #24]
1000fcc2:	2b00      	cmp	r3, #0
1000fcc4:	d101      	bne.n	1000fcca <_fflush_r+0x1e>
1000fcc6:	f000 f85f 	bl	1000fd88 <__sinit>
1000fcca:	4b0b      	ldr	r3, [pc, #44]	; (1000fcf8 <_fflush_r+0x4c>)
1000fccc:	429c      	cmp	r4, r3
1000fcce:	d101      	bne.n	1000fcd4 <_fflush_r+0x28>
1000fcd0:	686c      	ldr	r4, [r5, #4]
1000fcd2:	e008      	b.n	1000fce6 <_fflush_r+0x3a>
1000fcd4:	4b09      	ldr	r3, [pc, #36]	; (1000fcfc <_fflush_r+0x50>)
1000fcd6:	429c      	cmp	r4, r3
1000fcd8:	d101      	bne.n	1000fcde <_fflush_r+0x32>
1000fcda:	68ac      	ldr	r4, [r5, #8]
1000fcdc:	e003      	b.n	1000fce6 <_fflush_r+0x3a>
1000fcde:	4b08      	ldr	r3, [pc, #32]	; (1000fd00 <_fflush_r+0x54>)
1000fce0:	429c      	cmp	r4, r3
1000fce2:	d100      	bne.n	1000fce6 <_fflush_r+0x3a>
1000fce4:	68ec      	ldr	r4, [r5, #12]
1000fce6:	220c      	movs	r2, #12
1000fce8:	5ea3      	ldrsh	r3, [r4, r2]
1000fcea:	2b00      	cmp	r3, #0
1000fcec:	d0e4      	beq.n	1000fcb8 <_fflush_r+0xc>
1000fcee:	0021      	movs	r1, r4
1000fcf0:	0028      	movs	r0, r5
1000fcf2:	f7ff ff55 	bl	1000fba0 <__sflush_r>
1000fcf6:	bd70      	pop	{r4, r5, r6, pc}
1000fcf8:	1001176c 	.word	0x1001176c
1000fcfc:	1001178c 	.word	0x1001178c
1000fd00:	100117ac 	.word	0x100117ac

1000fd04 <_cleanup_r>:
1000fd04:	b510      	push	{r4, lr}
1000fd06:	4902      	ldr	r1, [pc, #8]	; (1000fd10 <_cleanup_r+0xc>)
1000fd08:	f000 f8b0 	bl	1000fe6c <_fwalk_reent>
1000fd0c:	bd10      	pop	{r4, pc}
1000fd0e:	46c0      	nop			; (mov r8, r8)
1000fd10:	1000fcad 	.word	0x1000fcad

1000fd14 <std.isra.0>:
1000fd14:	2300      	movs	r3, #0
1000fd16:	b510      	push	{r4, lr}
1000fd18:	0004      	movs	r4, r0
1000fd1a:	6003      	str	r3, [r0, #0]
1000fd1c:	6043      	str	r3, [r0, #4]
1000fd1e:	6083      	str	r3, [r0, #8]
1000fd20:	8181      	strh	r1, [r0, #12]
1000fd22:	6643      	str	r3, [r0, #100]	; 0x64
1000fd24:	81c2      	strh	r2, [r0, #14]
1000fd26:	6103      	str	r3, [r0, #16]
1000fd28:	6143      	str	r3, [r0, #20]
1000fd2a:	6183      	str	r3, [r0, #24]
1000fd2c:	0019      	movs	r1, r3
1000fd2e:	2208      	movs	r2, #8
1000fd30:	305c      	adds	r0, #92	; 0x5c
1000fd32:	f7ff fccf 	bl	1000f6d4 <memset>
1000fd36:	4b05      	ldr	r3, [pc, #20]	; (1000fd4c <std.isra.0+0x38>)
1000fd38:	6224      	str	r4, [r4, #32]
1000fd3a:	6263      	str	r3, [r4, #36]	; 0x24
1000fd3c:	4b04      	ldr	r3, [pc, #16]	; (1000fd50 <std.isra.0+0x3c>)
1000fd3e:	62a3      	str	r3, [r4, #40]	; 0x28
1000fd40:	4b04      	ldr	r3, [pc, #16]	; (1000fd54 <std.isra.0+0x40>)
1000fd42:	62e3      	str	r3, [r4, #44]	; 0x2c
1000fd44:	4b04      	ldr	r3, [pc, #16]	; (1000fd58 <std.isra.0+0x44>)
1000fd46:	6323      	str	r3, [r4, #48]	; 0x30
1000fd48:	bd10      	pop	{r4, pc}
1000fd4a:	46c0      	nop			; (mov r8, r8)
1000fd4c:	100106fd 	.word	0x100106fd
1000fd50:	10010725 	.word	0x10010725
1000fd54:	1001075d 	.word	0x1001075d
1000fd58:	10010789 	.word	0x10010789

1000fd5c <__sfmoreglue>:
1000fd5c:	b570      	push	{r4, r5, r6, lr}
1000fd5e:	2568      	movs	r5, #104	; 0x68
1000fd60:	1e4b      	subs	r3, r1, #1
1000fd62:	435d      	muls	r5, r3
1000fd64:	000e      	movs	r6, r1
1000fd66:	0029      	movs	r1, r5
1000fd68:	3174      	adds	r1, #116	; 0x74
1000fd6a:	f000 f955 	bl	10010018 <_malloc_r>
1000fd6e:	1e04      	subs	r4, r0, #0
1000fd70:	d008      	beq.n	1000fd84 <__sfmoreglue+0x28>
1000fd72:	2100      	movs	r1, #0
1000fd74:	002a      	movs	r2, r5
1000fd76:	6001      	str	r1, [r0, #0]
1000fd78:	6046      	str	r6, [r0, #4]
1000fd7a:	300c      	adds	r0, #12
1000fd7c:	60a0      	str	r0, [r4, #8]
1000fd7e:	3268      	adds	r2, #104	; 0x68
1000fd80:	f7ff fca8 	bl	1000f6d4 <memset>
1000fd84:	0020      	movs	r0, r4
1000fd86:	bd70      	pop	{r4, r5, r6, pc}

1000fd88 <__sinit>:
1000fd88:	6983      	ldr	r3, [r0, #24]
1000fd8a:	b513      	push	{r0, r1, r4, lr}
1000fd8c:	0004      	movs	r4, r0
1000fd8e:	2b00      	cmp	r3, #0
1000fd90:	d128      	bne.n	1000fde4 <__sinit+0x5c>
1000fd92:	6483      	str	r3, [r0, #72]	; 0x48
1000fd94:	64c3      	str	r3, [r0, #76]	; 0x4c
1000fd96:	6503      	str	r3, [r0, #80]	; 0x50
1000fd98:	4b13      	ldr	r3, [pc, #76]	; (1000fde8 <__sinit+0x60>)
1000fd9a:	4a14      	ldr	r2, [pc, #80]	; (1000fdec <__sinit+0x64>)
1000fd9c:	681b      	ldr	r3, [r3, #0]
1000fd9e:	6282      	str	r2, [r0, #40]	; 0x28
1000fda0:	9301      	str	r3, [sp, #4]
1000fda2:	4298      	cmp	r0, r3
1000fda4:	d101      	bne.n	1000fdaa <__sinit+0x22>
1000fda6:	2301      	movs	r3, #1
1000fda8:	6183      	str	r3, [r0, #24]
1000fdaa:	0020      	movs	r0, r4
1000fdac:	f000 f820 	bl	1000fdf0 <__sfp>
1000fdb0:	6060      	str	r0, [r4, #4]
1000fdb2:	0020      	movs	r0, r4
1000fdb4:	f000 f81c 	bl	1000fdf0 <__sfp>
1000fdb8:	60a0      	str	r0, [r4, #8]
1000fdba:	0020      	movs	r0, r4
1000fdbc:	f000 f818 	bl	1000fdf0 <__sfp>
1000fdc0:	2200      	movs	r2, #0
1000fdc2:	60e0      	str	r0, [r4, #12]
1000fdc4:	2104      	movs	r1, #4
1000fdc6:	6860      	ldr	r0, [r4, #4]
1000fdc8:	f7ff ffa4 	bl	1000fd14 <std.isra.0>
1000fdcc:	2201      	movs	r2, #1
1000fdce:	2109      	movs	r1, #9
1000fdd0:	68a0      	ldr	r0, [r4, #8]
1000fdd2:	f7ff ff9f 	bl	1000fd14 <std.isra.0>
1000fdd6:	2202      	movs	r2, #2
1000fdd8:	2112      	movs	r1, #18
1000fdda:	68e0      	ldr	r0, [r4, #12]
1000fddc:	f7ff ff9a 	bl	1000fd14 <std.isra.0>
1000fde0:	2301      	movs	r3, #1
1000fde2:	61a3      	str	r3, [r4, #24]
1000fde4:	bd13      	pop	{r0, r1, r4, pc}
1000fde6:	46c0      	nop			; (mov r8, r8)
1000fde8:	10011768 	.word	0x10011768
1000fdec:	1000fd05 	.word	0x1000fd05

1000fdf0 <__sfp>:
1000fdf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000fdf2:	4b1d      	ldr	r3, [pc, #116]	; (1000fe68 <__sfp+0x78>)
1000fdf4:	0006      	movs	r6, r0
1000fdf6:	681d      	ldr	r5, [r3, #0]
1000fdf8:	69ab      	ldr	r3, [r5, #24]
1000fdfa:	2b00      	cmp	r3, #0
1000fdfc:	d102      	bne.n	1000fe04 <__sfp+0x14>
1000fdfe:	0028      	movs	r0, r5
1000fe00:	f7ff ffc2 	bl	1000fd88 <__sinit>
1000fe04:	3548      	adds	r5, #72	; 0x48
1000fe06:	68ac      	ldr	r4, [r5, #8]
1000fe08:	686b      	ldr	r3, [r5, #4]
1000fe0a:	3b01      	subs	r3, #1
1000fe0c:	d405      	bmi.n	1000fe1a <__sfp+0x2a>
1000fe0e:	220c      	movs	r2, #12
1000fe10:	5ea7      	ldrsh	r7, [r4, r2]
1000fe12:	2f00      	cmp	r7, #0
1000fe14:	d010      	beq.n	1000fe38 <__sfp+0x48>
1000fe16:	3468      	adds	r4, #104	; 0x68
1000fe18:	e7f7      	b.n	1000fe0a <__sfp+0x1a>
1000fe1a:	682b      	ldr	r3, [r5, #0]
1000fe1c:	2b00      	cmp	r3, #0
1000fe1e:	d001      	beq.n	1000fe24 <__sfp+0x34>
1000fe20:	682d      	ldr	r5, [r5, #0]
1000fe22:	e7f0      	b.n	1000fe06 <__sfp+0x16>
1000fe24:	2104      	movs	r1, #4
1000fe26:	0030      	movs	r0, r6
1000fe28:	f7ff ff98 	bl	1000fd5c <__sfmoreglue>
1000fe2c:	6028      	str	r0, [r5, #0]
1000fe2e:	2800      	cmp	r0, #0
1000fe30:	d1f6      	bne.n	1000fe20 <__sfp+0x30>
1000fe32:	230c      	movs	r3, #12
1000fe34:	6033      	str	r3, [r6, #0]
1000fe36:	e016      	b.n	1000fe66 <__sfp+0x76>
1000fe38:	2301      	movs	r3, #1
1000fe3a:	0020      	movs	r0, r4
1000fe3c:	425b      	negs	r3, r3
1000fe3e:	81e3      	strh	r3, [r4, #14]
1000fe40:	3302      	adds	r3, #2
1000fe42:	81a3      	strh	r3, [r4, #12]
1000fe44:	6667      	str	r7, [r4, #100]	; 0x64
1000fe46:	6027      	str	r7, [r4, #0]
1000fe48:	60a7      	str	r7, [r4, #8]
1000fe4a:	6067      	str	r7, [r4, #4]
1000fe4c:	6127      	str	r7, [r4, #16]
1000fe4e:	6167      	str	r7, [r4, #20]
1000fe50:	61a7      	str	r7, [r4, #24]
1000fe52:	305c      	adds	r0, #92	; 0x5c
1000fe54:	2208      	movs	r2, #8
1000fe56:	0039      	movs	r1, r7
1000fe58:	f7ff fc3c 	bl	1000f6d4 <memset>
1000fe5c:	0020      	movs	r0, r4
1000fe5e:	6367      	str	r7, [r4, #52]	; 0x34
1000fe60:	63a7      	str	r7, [r4, #56]	; 0x38
1000fe62:	64a7      	str	r7, [r4, #72]	; 0x48
1000fe64:	64e7      	str	r7, [r4, #76]	; 0x4c
1000fe66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000fe68:	10011768 	.word	0x10011768

1000fe6c <_fwalk_reent>:
1000fe6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000fe6e:	0004      	movs	r4, r0
1000fe70:	0007      	movs	r7, r0
1000fe72:	2600      	movs	r6, #0
1000fe74:	9101      	str	r1, [sp, #4]
1000fe76:	3448      	adds	r4, #72	; 0x48
1000fe78:	2c00      	cmp	r4, #0
1000fe7a:	d016      	beq.n	1000feaa <_fwalk_reent+0x3e>
1000fe7c:	6863      	ldr	r3, [r4, #4]
1000fe7e:	68a5      	ldr	r5, [r4, #8]
1000fe80:	9300      	str	r3, [sp, #0]
1000fe82:	9b00      	ldr	r3, [sp, #0]
1000fe84:	3b01      	subs	r3, #1
1000fe86:	9300      	str	r3, [sp, #0]
1000fe88:	d40d      	bmi.n	1000fea6 <_fwalk_reent+0x3a>
1000fe8a:	89ab      	ldrh	r3, [r5, #12]
1000fe8c:	2b01      	cmp	r3, #1
1000fe8e:	d908      	bls.n	1000fea2 <_fwalk_reent+0x36>
1000fe90:	220e      	movs	r2, #14
1000fe92:	5eab      	ldrsh	r3, [r5, r2]
1000fe94:	3301      	adds	r3, #1
1000fe96:	d004      	beq.n	1000fea2 <_fwalk_reent+0x36>
1000fe98:	0029      	movs	r1, r5
1000fe9a:	0038      	movs	r0, r7
1000fe9c:	9b01      	ldr	r3, [sp, #4]
1000fe9e:	4798      	blx	r3
1000fea0:	4306      	orrs	r6, r0
1000fea2:	3568      	adds	r5, #104	; 0x68
1000fea4:	e7ed      	b.n	1000fe82 <_fwalk_reent+0x16>
1000fea6:	6824      	ldr	r4, [r4, #0]
1000fea8:	e7e6      	b.n	1000fe78 <_fwalk_reent+0xc>
1000feaa:	0030      	movs	r0, r6
1000feac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

1000feb0 <__swhatbuf_r>:
1000feb0:	b570      	push	{r4, r5, r6, lr}
1000feb2:	000e      	movs	r6, r1
1000feb4:	001d      	movs	r5, r3
1000feb6:	230e      	movs	r3, #14
1000feb8:	5ec9      	ldrsh	r1, [r1, r3]
1000feba:	b090      	sub	sp, #64	; 0x40
1000febc:	0014      	movs	r4, r2
1000febe:	2900      	cmp	r1, #0
1000fec0:	da06      	bge.n	1000fed0 <__swhatbuf_r+0x20>
1000fec2:	2300      	movs	r3, #0
1000fec4:	602b      	str	r3, [r5, #0]
1000fec6:	89b3      	ldrh	r3, [r6, #12]
1000fec8:	061b      	lsls	r3, r3, #24
1000feca:	d50f      	bpl.n	1000feec <__swhatbuf_r+0x3c>
1000fecc:	2340      	movs	r3, #64	; 0x40
1000fece:	e00f      	b.n	1000fef0 <__swhatbuf_r+0x40>
1000fed0:	aa01      	add	r2, sp, #4
1000fed2:	f000 fc85 	bl	100107e0 <_fstat_r>
1000fed6:	2800      	cmp	r0, #0
1000fed8:	dbf3      	blt.n	1000fec2 <__swhatbuf_r+0x12>
1000feda:	23f0      	movs	r3, #240	; 0xf0
1000fedc:	9a02      	ldr	r2, [sp, #8]
1000fede:	021b      	lsls	r3, r3, #8
1000fee0:	4013      	ands	r3, r2
1000fee2:	4a05      	ldr	r2, [pc, #20]	; (1000fef8 <__swhatbuf_r+0x48>)
1000fee4:	189b      	adds	r3, r3, r2
1000fee6:	425a      	negs	r2, r3
1000fee8:	4153      	adcs	r3, r2
1000feea:	602b      	str	r3, [r5, #0]
1000feec:	2380      	movs	r3, #128	; 0x80
1000feee:	00db      	lsls	r3, r3, #3
1000fef0:	2000      	movs	r0, #0
1000fef2:	6023      	str	r3, [r4, #0]
1000fef4:	b010      	add	sp, #64	; 0x40
1000fef6:	bd70      	pop	{r4, r5, r6, pc}
1000fef8:	ffffe000 	.word	0xffffe000

1000fefc <__smakebuf_r>:
1000fefc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000fefe:	2602      	movs	r6, #2
1000ff00:	898b      	ldrh	r3, [r1, #12]
1000ff02:	0005      	movs	r5, r0
1000ff04:	000c      	movs	r4, r1
1000ff06:	4233      	tst	r3, r6
1000ff08:	d110      	bne.n	1000ff2c <__smakebuf_r+0x30>
1000ff0a:	ab01      	add	r3, sp, #4
1000ff0c:	466a      	mov	r2, sp
1000ff0e:	f7ff ffcf 	bl	1000feb0 <__swhatbuf_r>
1000ff12:	9900      	ldr	r1, [sp, #0]
1000ff14:	0007      	movs	r7, r0
1000ff16:	0028      	movs	r0, r5
1000ff18:	f000 f87e 	bl	10010018 <_malloc_r>
1000ff1c:	2800      	cmp	r0, #0
1000ff1e:	d10c      	bne.n	1000ff3a <__smakebuf_r+0x3e>
1000ff20:	220c      	movs	r2, #12
1000ff22:	5ea3      	ldrsh	r3, [r4, r2]
1000ff24:	059a      	lsls	r2, r3, #22
1000ff26:	d423      	bmi.n	1000ff70 <__smakebuf_r+0x74>
1000ff28:	4333      	orrs	r3, r6
1000ff2a:	81a3      	strh	r3, [r4, #12]
1000ff2c:	0023      	movs	r3, r4
1000ff2e:	3347      	adds	r3, #71	; 0x47
1000ff30:	6023      	str	r3, [r4, #0]
1000ff32:	6123      	str	r3, [r4, #16]
1000ff34:	2301      	movs	r3, #1
1000ff36:	6163      	str	r3, [r4, #20]
1000ff38:	e01a      	b.n	1000ff70 <__smakebuf_r+0x74>
1000ff3a:	2280      	movs	r2, #128	; 0x80
1000ff3c:	4b0d      	ldr	r3, [pc, #52]	; (1000ff74 <__smakebuf_r+0x78>)
1000ff3e:	62ab      	str	r3, [r5, #40]	; 0x28
1000ff40:	89a3      	ldrh	r3, [r4, #12]
1000ff42:	6020      	str	r0, [r4, #0]
1000ff44:	4313      	orrs	r3, r2
1000ff46:	81a3      	strh	r3, [r4, #12]
1000ff48:	9b00      	ldr	r3, [sp, #0]
1000ff4a:	6120      	str	r0, [r4, #16]
1000ff4c:	6163      	str	r3, [r4, #20]
1000ff4e:	9b01      	ldr	r3, [sp, #4]
1000ff50:	2b00      	cmp	r3, #0
1000ff52:	d00a      	beq.n	1000ff6a <__smakebuf_r+0x6e>
1000ff54:	230e      	movs	r3, #14
1000ff56:	5ee1      	ldrsh	r1, [r4, r3]
1000ff58:	0028      	movs	r0, r5
1000ff5a:	f000 fc53 	bl	10010804 <_isatty_r>
1000ff5e:	2800      	cmp	r0, #0
1000ff60:	d003      	beq.n	1000ff6a <__smakebuf_r+0x6e>
1000ff62:	2201      	movs	r2, #1
1000ff64:	89a3      	ldrh	r3, [r4, #12]
1000ff66:	4313      	orrs	r3, r2
1000ff68:	81a3      	strh	r3, [r4, #12]
1000ff6a:	89a3      	ldrh	r3, [r4, #12]
1000ff6c:	431f      	orrs	r7, r3
1000ff6e:	81a7      	strh	r7, [r4, #12]
1000ff70:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000ff72:	46c0      	nop			; (mov r8, r8)
1000ff74:	1000fd05 	.word	0x1000fd05

1000ff78 <malloc>:
1000ff78:	b510      	push	{r4, lr}
1000ff7a:	4b03      	ldr	r3, [pc, #12]	; (1000ff88 <malloc+0x10>)
1000ff7c:	0001      	movs	r1, r0
1000ff7e:	6818      	ldr	r0, [r3, #0]
1000ff80:	f000 f84a 	bl	10010018 <_malloc_r>
1000ff84:	bd10      	pop	{r4, pc}
1000ff86:	46c0      	nop			; (mov r8, r8)
1000ff88:	10011890 	.word	0x10011890

1000ff8c <_free_r>:
1000ff8c:	b530      	push	{r4, r5, lr}
1000ff8e:	2900      	cmp	r1, #0
1000ff90:	d03e      	beq.n	10010010 <_free_r+0x84>
1000ff92:	3904      	subs	r1, #4
1000ff94:	680b      	ldr	r3, [r1, #0]
1000ff96:	2b00      	cmp	r3, #0
1000ff98:	da00      	bge.n	1000ff9c <_free_r+0x10>
1000ff9a:	18c9      	adds	r1, r1, r3
1000ff9c:	4a1d      	ldr	r2, [pc, #116]	; (10010014 <_free_r+0x88>)
1000ff9e:	6813      	ldr	r3, [r2, #0]
1000ffa0:	0014      	movs	r4, r2
1000ffa2:	2b00      	cmp	r3, #0
1000ffa4:	d102      	bne.n	1000ffac <_free_r+0x20>
1000ffa6:	604b      	str	r3, [r1, #4]
1000ffa8:	6011      	str	r1, [r2, #0]
1000ffaa:	e031      	b.n	10010010 <_free_r+0x84>
1000ffac:	428b      	cmp	r3, r1
1000ffae:	d90d      	bls.n	1000ffcc <_free_r+0x40>
1000ffb0:	680a      	ldr	r2, [r1, #0]
1000ffb2:	1888      	adds	r0, r1, r2
1000ffb4:	4283      	cmp	r3, r0
1000ffb6:	d103      	bne.n	1000ffc0 <_free_r+0x34>
1000ffb8:	6818      	ldr	r0, [r3, #0]
1000ffba:	685b      	ldr	r3, [r3, #4]
1000ffbc:	1882      	adds	r2, r0, r2
1000ffbe:	600a      	str	r2, [r1, #0]
1000ffc0:	604b      	str	r3, [r1, #4]
1000ffc2:	6021      	str	r1, [r4, #0]
1000ffc4:	e024      	b.n	10010010 <_free_r+0x84>
1000ffc6:	428a      	cmp	r2, r1
1000ffc8:	d803      	bhi.n	1000ffd2 <_free_r+0x46>
1000ffca:	0013      	movs	r3, r2
1000ffcc:	685a      	ldr	r2, [r3, #4]
1000ffce:	2a00      	cmp	r2, #0
1000ffd0:	d1f9      	bne.n	1000ffc6 <_free_r+0x3a>
1000ffd2:	681d      	ldr	r5, [r3, #0]
1000ffd4:	195c      	adds	r4, r3, r5
1000ffd6:	428c      	cmp	r4, r1
1000ffd8:	d10b      	bne.n	1000fff2 <_free_r+0x66>
1000ffda:	6809      	ldr	r1, [r1, #0]
1000ffdc:	1869      	adds	r1, r5, r1
1000ffde:	1858      	adds	r0, r3, r1
1000ffe0:	6019      	str	r1, [r3, #0]
1000ffe2:	4282      	cmp	r2, r0
1000ffe4:	d114      	bne.n	10010010 <_free_r+0x84>
1000ffe6:	6810      	ldr	r0, [r2, #0]
1000ffe8:	6852      	ldr	r2, [r2, #4]
1000ffea:	1841      	adds	r1, r0, r1
1000ffec:	6019      	str	r1, [r3, #0]
1000ffee:	605a      	str	r2, [r3, #4]
1000fff0:	e00e      	b.n	10010010 <_free_r+0x84>
1000fff2:	428c      	cmp	r4, r1
1000fff4:	d902      	bls.n	1000fffc <_free_r+0x70>
1000fff6:	230c      	movs	r3, #12
1000fff8:	6003      	str	r3, [r0, #0]
1000fffa:	e009      	b.n	10010010 <_free_r+0x84>
1000fffc:	6808      	ldr	r0, [r1, #0]
1000fffe:	180c      	adds	r4, r1, r0
10010000:	42a2      	cmp	r2, r4
10010002:	d103      	bne.n	1001000c <_free_r+0x80>
10010004:	6814      	ldr	r4, [r2, #0]
10010006:	6852      	ldr	r2, [r2, #4]
10010008:	1820      	adds	r0, r4, r0
1001000a:	6008      	str	r0, [r1, #0]
1001000c:	604a      	str	r2, [r1, #4]
1001000e:	6059      	str	r1, [r3, #4]
10010010:	bd30      	pop	{r4, r5, pc}
10010012:	46c0      	nop			; (mov r8, r8)
10010014:	10013350 	.word	0x10013350

10010018 <_malloc_r>:
10010018:	2303      	movs	r3, #3
1001001a:	b570      	push	{r4, r5, r6, lr}
1001001c:	1ccd      	adds	r5, r1, #3
1001001e:	439d      	bics	r5, r3
10010020:	3508      	adds	r5, #8
10010022:	0006      	movs	r6, r0
10010024:	2d0c      	cmp	r5, #12
10010026:	d201      	bcs.n	1001002c <_malloc_r+0x14>
10010028:	250c      	movs	r5, #12
1001002a:	e005      	b.n	10010038 <_malloc_r+0x20>
1001002c:	2d00      	cmp	r5, #0
1001002e:	da03      	bge.n	10010038 <_malloc_r+0x20>
10010030:	230c      	movs	r3, #12
10010032:	2000      	movs	r0, #0
10010034:	6033      	str	r3, [r6, #0]
10010036:	e040      	b.n	100100ba <_malloc_r+0xa2>
10010038:	42a9      	cmp	r1, r5
1001003a:	d8f9      	bhi.n	10010030 <_malloc_r+0x18>
1001003c:	4b1f      	ldr	r3, [pc, #124]	; (100100bc <_malloc_r+0xa4>)
1001003e:	681c      	ldr	r4, [r3, #0]
10010040:	001a      	movs	r2, r3
10010042:	0021      	movs	r1, r4
10010044:	2900      	cmp	r1, #0
10010046:	d013      	beq.n	10010070 <_malloc_r+0x58>
10010048:	680b      	ldr	r3, [r1, #0]
1001004a:	1b5b      	subs	r3, r3, r5
1001004c:	d40d      	bmi.n	1001006a <_malloc_r+0x52>
1001004e:	2b0b      	cmp	r3, #11
10010050:	d902      	bls.n	10010058 <_malloc_r+0x40>
10010052:	600b      	str	r3, [r1, #0]
10010054:	18cc      	adds	r4, r1, r3
10010056:	e01e      	b.n	10010096 <_malloc_r+0x7e>
10010058:	428c      	cmp	r4, r1
1001005a:	d102      	bne.n	10010062 <_malloc_r+0x4a>
1001005c:	6863      	ldr	r3, [r4, #4]
1001005e:	6013      	str	r3, [r2, #0]
10010060:	e01a      	b.n	10010098 <_malloc_r+0x80>
10010062:	684b      	ldr	r3, [r1, #4]
10010064:	6063      	str	r3, [r4, #4]
10010066:	000c      	movs	r4, r1
10010068:	e016      	b.n	10010098 <_malloc_r+0x80>
1001006a:	000c      	movs	r4, r1
1001006c:	6849      	ldr	r1, [r1, #4]
1001006e:	e7e9      	b.n	10010044 <_malloc_r+0x2c>
10010070:	4c13      	ldr	r4, [pc, #76]	; (100100c0 <_malloc_r+0xa8>)
10010072:	6823      	ldr	r3, [r4, #0]
10010074:	2b00      	cmp	r3, #0
10010076:	d103      	bne.n	10010080 <_malloc_r+0x68>
10010078:	0030      	movs	r0, r6
1001007a:	f000 fb2d 	bl	100106d8 <_sbrk_r>
1001007e:	6020      	str	r0, [r4, #0]
10010080:	0029      	movs	r1, r5
10010082:	0030      	movs	r0, r6
10010084:	f000 fb28 	bl	100106d8 <_sbrk_r>
10010088:	1c43      	adds	r3, r0, #1
1001008a:	d0d1      	beq.n	10010030 <_malloc_r+0x18>
1001008c:	2303      	movs	r3, #3
1001008e:	1cc4      	adds	r4, r0, #3
10010090:	439c      	bics	r4, r3
10010092:	42a0      	cmp	r0, r4
10010094:	d10a      	bne.n	100100ac <_malloc_r+0x94>
10010096:	6025      	str	r5, [r4, #0]
10010098:	0020      	movs	r0, r4
1001009a:	2207      	movs	r2, #7
1001009c:	300b      	adds	r0, #11
1001009e:	1d23      	adds	r3, r4, #4
100100a0:	4390      	bics	r0, r2
100100a2:	1ac3      	subs	r3, r0, r3
100100a4:	d009      	beq.n	100100ba <_malloc_r+0xa2>
100100a6:	425a      	negs	r2, r3
100100a8:	50e2      	str	r2, [r4, r3]
100100aa:	e006      	b.n	100100ba <_malloc_r+0xa2>
100100ac:	1a21      	subs	r1, r4, r0
100100ae:	0030      	movs	r0, r6
100100b0:	f000 fb12 	bl	100106d8 <_sbrk_r>
100100b4:	1c43      	adds	r3, r0, #1
100100b6:	d1ee      	bne.n	10010096 <_malloc_r+0x7e>
100100b8:	e7ba      	b.n	10010030 <_malloc_r+0x18>
100100ba:	bd70      	pop	{r4, r5, r6, pc}
100100bc:	10013350 	.word	0x10013350
100100c0:	1001334c 	.word	0x1001334c

100100c4 <__sfputc_r>:
100100c4:	6893      	ldr	r3, [r2, #8]
100100c6:	b510      	push	{r4, lr}
100100c8:	3b01      	subs	r3, #1
100100ca:	6093      	str	r3, [r2, #8]
100100cc:	2b00      	cmp	r3, #0
100100ce:	da05      	bge.n	100100dc <__sfputc_r+0x18>
100100d0:	6994      	ldr	r4, [r2, #24]
100100d2:	42a3      	cmp	r3, r4
100100d4:	db08      	blt.n	100100e8 <__sfputc_r+0x24>
100100d6:	b2cb      	uxtb	r3, r1
100100d8:	2b0a      	cmp	r3, #10
100100da:	d005      	beq.n	100100e8 <__sfputc_r+0x24>
100100dc:	6813      	ldr	r3, [r2, #0]
100100de:	1c58      	adds	r0, r3, #1
100100e0:	6010      	str	r0, [r2, #0]
100100e2:	7019      	strb	r1, [r3, #0]
100100e4:	b2c8      	uxtb	r0, r1
100100e6:	e001      	b.n	100100ec <__sfputc_r+0x28>
100100e8:	f7ff fc8c 	bl	1000fa04 <__swbuf_r>
100100ec:	bd10      	pop	{r4, pc}

100100ee <__sfputs_r>:
100100ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100100f0:	0006      	movs	r6, r0
100100f2:	000f      	movs	r7, r1
100100f4:	0014      	movs	r4, r2
100100f6:	18d5      	adds	r5, r2, r3
100100f8:	42ac      	cmp	r4, r5
100100fa:	d008      	beq.n	1001010e <__sfputs_r+0x20>
100100fc:	7821      	ldrb	r1, [r4, #0]
100100fe:	003a      	movs	r2, r7
10010100:	0030      	movs	r0, r6
10010102:	f7ff ffdf 	bl	100100c4 <__sfputc_r>
10010106:	3401      	adds	r4, #1
10010108:	1c43      	adds	r3, r0, #1
1001010a:	d1f5      	bne.n	100100f8 <__sfputs_r+0xa>
1001010c:	e000      	b.n	10010110 <__sfputs_r+0x22>
1001010e:	2000      	movs	r0, #0
10010110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

10010114 <_vfiprintf_r>:
10010114:	b5f0      	push	{r4, r5, r6, r7, lr}
10010116:	b09f      	sub	sp, #124	; 0x7c
10010118:	0006      	movs	r6, r0
1001011a:	000f      	movs	r7, r1
1001011c:	9202      	str	r2, [sp, #8]
1001011e:	9305      	str	r3, [sp, #20]
10010120:	2800      	cmp	r0, #0
10010122:	d004      	beq.n	1001012e <_vfiprintf_r+0x1a>
10010124:	6983      	ldr	r3, [r0, #24]
10010126:	2b00      	cmp	r3, #0
10010128:	d101      	bne.n	1001012e <_vfiprintf_r+0x1a>
1001012a:	f7ff fe2d 	bl	1000fd88 <__sinit>
1001012e:	4b7f      	ldr	r3, [pc, #508]	; (1001032c <_vfiprintf_r+0x218>)
10010130:	429f      	cmp	r7, r3
10010132:	d101      	bne.n	10010138 <_vfiprintf_r+0x24>
10010134:	6877      	ldr	r7, [r6, #4]
10010136:	e008      	b.n	1001014a <_vfiprintf_r+0x36>
10010138:	4b7d      	ldr	r3, [pc, #500]	; (10010330 <_vfiprintf_r+0x21c>)
1001013a:	429f      	cmp	r7, r3
1001013c:	d101      	bne.n	10010142 <_vfiprintf_r+0x2e>
1001013e:	68b7      	ldr	r7, [r6, #8]
10010140:	e003      	b.n	1001014a <_vfiprintf_r+0x36>
10010142:	4b7c      	ldr	r3, [pc, #496]	; (10010334 <_vfiprintf_r+0x220>)
10010144:	429f      	cmp	r7, r3
10010146:	d100      	bne.n	1001014a <_vfiprintf_r+0x36>
10010148:	68f7      	ldr	r7, [r6, #12]
1001014a:	89bb      	ldrh	r3, [r7, #12]
1001014c:	071b      	lsls	r3, r3, #28
1001014e:	d50a      	bpl.n	10010166 <_vfiprintf_r+0x52>
10010150:	693b      	ldr	r3, [r7, #16]
10010152:	2b00      	cmp	r3, #0
10010154:	d007      	beq.n	10010166 <_vfiprintf_r+0x52>
10010156:	2300      	movs	r3, #0
10010158:	ad06      	add	r5, sp, #24
1001015a:	616b      	str	r3, [r5, #20]
1001015c:	3320      	adds	r3, #32
1001015e:	766b      	strb	r3, [r5, #25]
10010160:	3310      	adds	r3, #16
10010162:	76ab      	strb	r3, [r5, #26]
10010164:	e03d      	b.n	100101e2 <_vfiprintf_r+0xce>
10010166:	0039      	movs	r1, r7
10010168:	0030      	movs	r0, r6
1001016a:	f7ff fca3 	bl	1000fab4 <__swsetup_r>
1001016e:	2800      	cmp	r0, #0
10010170:	d0f1      	beq.n	10010156 <_vfiprintf_r+0x42>
10010172:	2001      	movs	r0, #1
10010174:	4240      	negs	r0, r0
10010176:	e0d6      	b.n	10010326 <_vfiprintf_r+0x212>
10010178:	9a05      	ldr	r2, [sp, #20]
1001017a:	1d11      	adds	r1, r2, #4
1001017c:	6812      	ldr	r2, [r2, #0]
1001017e:	9105      	str	r1, [sp, #20]
10010180:	2a00      	cmp	r2, #0
10010182:	da00      	bge.n	10010186 <_vfiprintf_r+0x72>
10010184:	e07f      	b.n	10010286 <_vfiprintf_r+0x172>
10010186:	9209      	str	r2, [sp, #36]	; 0x24
10010188:	3401      	adds	r4, #1
1001018a:	7823      	ldrb	r3, [r4, #0]
1001018c:	2b2e      	cmp	r3, #46	; 0x2e
1001018e:	d100      	bne.n	10010192 <_vfiprintf_r+0x7e>
10010190:	e08d      	b.n	100102ae <_vfiprintf_r+0x19a>
10010192:	7821      	ldrb	r1, [r4, #0]
10010194:	2203      	movs	r2, #3
10010196:	4868      	ldr	r0, [pc, #416]	; (10010338 <_vfiprintf_r+0x224>)
10010198:	f000 fb5a 	bl	10010850 <memchr>
1001019c:	2800      	cmp	r0, #0
1001019e:	d007      	beq.n	100101b0 <_vfiprintf_r+0x9c>
100101a0:	4b65      	ldr	r3, [pc, #404]	; (10010338 <_vfiprintf_r+0x224>)
100101a2:	682a      	ldr	r2, [r5, #0]
100101a4:	1ac0      	subs	r0, r0, r3
100101a6:	2340      	movs	r3, #64	; 0x40
100101a8:	4083      	lsls	r3, r0
100101aa:	4313      	orrs	r3, r2
100101ac:	602b      	str	r3, [r5, #0]
100101ae:	3401      	adds	r4, #1
100101b0:	7821      	ldrb	r1, [r4, #0]
100101b2:	1c63      	adds	r3, r4, #1
100101b4:	2206      	movs	r2, #6
100101b6:	4861      	ldr	r0, [pc, #388]	; (1001033c <_vfiprintf_r+0x228>)
100101b8:	9302      	str	r3, [sp, #8]
100101ba:	7629      	strb	r1, [r5, #24]
100101bc:	f000 fb48 	bl	10010850 <memchr>
100101c0:	2800      	cmp	r0, #0
100101c2:	d100      	bne.n	100101c6 <_vfiprintf_r+0xb2>
100101c4:	e09d      	b.n	10010302 <_vfiprintf_r+0x1ee>
100101c6:	4b5e      	ldr	r3, [pc, #376]	; (10010340 <_vfiprintf_r+0x22c>)
100101c8:	2b00      	cmp	r3, #0
100101ca:	d000      	beq.n	100101ce <_vfiprintf_r+0xba>
100101cc:	e090      	b.n	100102f0 <_vfiprintf_r+0x1dc>
100101ce:	2207      	movs	r2, #7
100101d0:	9b05      	ldr	r3, [sp, #20]
100101d2:	3307      	adds	r3, #7
100101d4:	4393      	bics	r3, r2
100101d6:	3308      	adds	r3, #8
100101d8:	9305      	str	r3, [sp, #20]
100101da:	696b      	ldr	r3, [r5, #20]
100101dc:	9a03      	ldr	r2, [sp, #12]
100101de:	189b      	adds	r3, r3, r2
100101e0:	616b      	str	r3, [r5, #20]
100101e2:	9c02      	ldr	r4, [sp, #8]
100101e4:	7823      	ldrb	r3, [r4, #0]
100101e6:	2b00      	cmp	r3, #0
100101e8:	d104      	bne.n	100101f4 <_vfiprintf_r+0xe0>
100101ea:	9b02      	ldr	r3, [sp, #8]
100101ec:	1ae3      	subs	r3, r4, r3
100101ee:	9304      	str	r3, [sp, #16]
100101f0:	d012      	beq.n	10010218 <_vfiprintf_r+0x104>
100101f2:	e003      	b.n	100101fc <_vfiprintf_r+0xe8>
100101f4:	2b25      	cmp	r3, #37	; 0x25
100101f6:	d0f8      	beq.n	100101ea <_vfiprintf_r+0xd6>
100101f8:	3401      	adds	r4, #1
100101fa:	e7f3      	b.n	100101e4 <_vfiprintf_r+0xd0>
100101fc:	9b04      	ldr	r3, [sp, #16]
100101fe:	9a02      	ldr	r2, [sp, #8]
10010200:	0039      	movs	r1, r7
10010202:	0030      	movs	r0, r6
10010204:	f7ff ff73 	bl	100100ee <__sfputs_r>
10010208:	1c43      	adds	r3, r0, #1
1001020a:	d100      	bne.n	1001020e <_vfiprintf_r+0xfa>
1001020c:	e086      	b.n	1001031c <_vfiprintf_r+0x208>
1001020e:	696a      	ldr	r2, [r5, #20]
10010210:	9b04      	ldr	r3, [sp, #16]
10010212:	4694      	mov	ip, r2
10010214:	4463      	add	r3, ip
10010216:	616b      	str	r3, [r5, #20]
10010218:	7823      	ldrb	r3, [r4, #0]
1001021a:	2b00      	cmp	r3, #0
1001021c:	d07e      	beq.n	1001031c <_vfiprintf_r+0x208>
1001021e:	2201      	movs	r2, #1
10010220:	2300      	movs	r3, #0
10010222:	4252      	negs	r2, r2
10010224:	606a      	str	r2, [r5, #4]
10010226:	a902      	add	r1, sp, #8
10010228:	3254      	adds	r2, #84	; 0x54
1001022a:	1852      	adds	r2, r2, r1
1001022c:	3401      	adds	r4, #1
1001022e:	602b      	str	r3, [r5, #0]
10010230:	60eb      	str	r3, [r5, #12]
10010232:	60ab      	str	r3, [r5, #8]
10010234:	7013      	strb	r3, [r2, #0]
10010236:	65ab      	str	r3, [r5, #88]	; 0x58
10010238:	7821      	ldrb	r1, [r4, #0]
1001023a:	2205      	movs	r2, #5
1001023c:	4841      	ldr	r0, [pc, #260]	; (10010344 <_vfiprintf_r+0x230>)
1001023e:	f000 fb07 	bl	10010850 <memchr>
10010242:	2800      	cmp	r0, #0
10010244:	d008      	beq.n	10010258 <_vfiprintf_r+0x144>
10010246:	4b3f      	ldr	r3, [pc, #252]	; (10010344 <_vfiprintf_r+0x230>)
10010248:	682a      	ldr	r2, [r5, #0]
1001024a:	1ac0      	subs	r0, r0, r3
1001024c:	2301      	movs	r3, #1
1001024e:	4083      	lsls	r3, r0
10010250:	4313      	orrs	r3, r2
10010252:	602b      	str	r3, [r5, #0]
10010254:	3401      	adds	r4, #1
10010256:	e7ef      	b.n	10010238 <_vfiprintf_r+0x124>
10010258:	682b      	ldr	r3, [r5, #0]
1001025a:	06da      	lsls	r2, r3, #27
1001025c:	d504      	bpl.n	10010268 <_vfiprintf_r+0x154>
1001025e:	2253      	movs	r2, #83	; 0x53
10010260:	2120      	movs	r1, #32
10010262:	a802      	add	r0, sp, #8
10010264:	1812      	adds	r2, r2, r0
10010266:	7011      	strb	r1, [r2, #0]
10010268:	071a      	lsls	r2, r3, #28
1001026a:	d504      	bpl.n	10010276 <_vfiprintf_r+0x162>
1001026c:	2253      	movs	r2, #83	; 0x53
1001026e:	212b      	movs	r1, #43	; 0x2b
10010270:	a802      	add	r0, sp, #8
10010272:	1812      	adds	r2, r2, r0
10010274:	7011      	strb	r1, [r2, #0]
10010276:	7822      	ldrb	r2, [r4, #0]
10010278:	2a2a      	cmp	r2, #42	; 0x2a
1001027a:	d100      	bne.n	1001027e <_vfiprintf_r+0x16a>
1001027c:	e77c      	b.n	10010178 <_vfiprintf_r+0x64>
1001027e:	9b09      	ldr	r3, [sp, #36]	; 0x24
10010280:	2000      	movs	r0, #0
10010282:	210a      	movs	r1, #10
10010284:	e005      	b.n	10010292 <_vfiprintf_r+0x17e>
10010286:	4252      	negs	r2, r2
10010288:	60ea      	str	r2, [r5, #12]
1001028a:	2202      	movs	r2, #2
1001028c:	4313      	orrs	r3, r2
1001028e:	602b      	str	r3, [r5, #0]
10010290:	e77a      	b.n	10010188 <_vfiprintf_r+0x74>
10010292:	7822      	ldrb	r2, [r4, #0]
10010294:	3a30      	subs	r2, #48	; 0x30
10010296:	2a09      	cmp	r2, #9
10010298:	d804      	bhi.n	100102a4 <_vfiprintf_r+0x190>
1001029a:	434b      	muls	r3, r1
1001029c:	3401      	adds	r4, #1
1001029e:	189b      	adds	r3, r3, r2
100102a0:	2001      	movs	r0, #1
100102a2:	e7f6      	b.n	10010292 <_vfiprintf_r+0x17e>
100102a4:	2800      	cmp	r0, #0
100102a6:	d100      	bne.n	100102aa <_vfiprintf_r+0x196>
100102a8:	e76f      	b.n	1001018a <_vfiprintf_r+0x76>
100102aa:	9309      	str	r3, [sp, #36]	; 0x24
100102ac:	e76d      	b.n	1001018a <_vfiprintf_r+0x76>
100102ae:	7863      	ldrb	r3, [r4, #1]
100102b0:	2b2a      	cmp	r3, #42	; 0x2a
100102b2:	d10a      	bne.n	100102ca <_vfiprintf_r+0x1b6>
100102b4:	9b05      	ldr	r3, [sp, #20]
100102b6:	3402      	adds	r4, #2
100102b8:	1d1a      	adds	r2, r3, #4
100102ba:	681b      	ldr	r3, [r3, #0]
100102bc:	9205      	str	r2, [sp, #20]
100102be:	2b00      	cmp	r3, #0
100102c0:	da01      	bge.n	100102c6 <_vfiprintf_r+0x1b2>
100102c2:	2301      	movs	r3, #1
100102c4:	425b      	negs	r3, r3
100102c6:	9307      	str	r3, [sp, #28]
100102c8:	e763      	b.n	10010192 <_vfiprintf_r+0x7e>
100102ca:	2300      	movs	r3, #0
100102cc:	200a      	movs	r0, #10
100102ce:	001a      	movs	r2, r3
100102d0:	3401      	adds	r4, #1
100102d2:	606b      	str	r3, [r5, #4]
100102d4:	7821      	ldrb	r1, [r4, #0]
100102d6:	3930      	subs	r1, #48	; 0x30
100102d8:	2909      	cmp	r1, #9
100102da:	d804      	bhi.n	100102e6 <_vfiprintf_r+0x1d2>
100102dc:	4342      	muls	r2, r0
100102de:	3401      	adds	r4, #1
100102e0:	1852      	adds	r2, r2, r1
100102e2:	2301      	movs	r3, #1
100102e4:	e7f6      	b.n	100102d4 <_vfiprintf_r+0x1c0>
100102e6:	2b00      	cmp	r3, #0
100102e8:	d100      	bne.n	100102ec <_vfiprintf_r+0x1d8>
100102ea:	e752      	b.n	10010192 <_vfiprintf_r+0x7e>
100102ec:	9207      	str	r2, [sp, #28]
100102ee:	e750      	b.n	10010192 <_vfiprintf_r+0x7e>
100102f0:	ab05      	add	r3, sp, #20
100102f2:	9300      	str	r3, [sp, #0]
100102f4:	003a      	movs	r2, r7
100102f6:	4b14      	ldr	r3, [pc, #80]	; (10010348 <_vfiprintf_r+0x234>)
100102f8:	0029      	movs	r1, r5
100102fa:	0030      	movs	r0, r6
100102fc:	e000      	b.n	10010300 <_vfiprintf_r+0x1ec>
100102fe:	bf00      	nop
10010300:	e007      	b.n	10010312 <_vfiprintf_r+0x1fe>
10010302:	ab05      	add	r3, sp, #20
10010304:	9300      	str	r3, [sp, #0]
10010306:	003a      	movs	r2, r7
10010308:	4b0f      	ldr	r3, [pc, #60]	; (10010348 <_vfiprintf_r+0x234>)
1001030a:	0029      	movs	r1, r5
1001030c:	0030      	movs	r0, r6
1001030e:	f000 f88b 	bl	10010428 <_printf_i>
10010312:	9003      	str	r0, [sp, #12]
10010314:	9b03      	ldr	r3, [sp, #12]
10010316:	3301      	adds	r3, #1
10010318:	d000      	beq.n	1001031c <_vfiprintf_r+0x208>
1001031a:	e75e      	b.n	100101da <_vfiprintf_r+0xc6>
1001031c:	89bb      	ldrh	r3, [r7, #12]
1001031e:	065b      	lsls	r3, r3, #25
10010320:	d500      	bpl.n	10010324 <_vfiprintf_r+0x210>
10010322:	e726      	b.n	10010172 <_vfiprintf_r+0x5e>
10010324:	980b      	ldr	r0, [sp, #44]	; 0x2c
10010326:	b01f      	add	sp, #124	; 0x7c
10010328:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001032a:	46c0      	nop			; (mov r8, r8)
1001032c:	1001176c 	.word	0x1001176c
10010330:	1001178c 	.word	0x1001178c
10010334:	100117ac 	.word	0x100117ac
10010338:	100117d2 	.word	0x100117d2
1001033c:	100117d6 	.word	0x100117d6
10010340:	00000000 	.word	0x00000000
10010344:	100117cc 	.word	0x100117cc
10010348:	100100ef 	.word	0x100100ef

1001034c <_printf_common>:
1001034c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001034e:	0017      	movs	r7, r2
10010350:	9301      	str	r3, [sp, #4]
10010352:	688a      	ldr	r2, [r1, #8]
10010354:	690b      	ldr	r3, [r1, #16]
10010356:	9000      	str	r0, [sp, #0]
10010358:	000c      	movs	r4, r1
1001035a:	4293      	cmp	r3, r2
1001035c:	da00      	bge.n	10010360 <_printf_common+0x14>
1001035e:	0013      	movs	r3, r2
10010360:	0022      	movs	r2, r4
10010362:	603b      	str	r3, [r7, #0]
10010364:	3243      	adds	r2, #67	; 0x43
10010366:	7812      	ldrb	r2, [r2, #0]
10010368:	2a00      	cmp	r2, #0
1001036a:	d001      	beq.n	10010370 <_printf_common+0x24>
1001036c:	3301      	adds	r3, #1
1001036e:	603b      	str	r3, [r7, #0]
10010370:	6823      	ldr	r3, [r4, #0]
10010372:	069b      	lsls	r3, r3, #26
10010374:	d502      	bpl.n	1001037c <_printf_common+0x30>
10010376:	683b      	ldr	r3, [r7, #0]
10010378:	3302      	adds	r3, #2
1001037a:	603b      	str	r3, [r7, #0]
1001037c:	2506      	movs	r5, #6
1001037e:	6823      	ldr	r3, [r4, #0]
10010380:	401d      	ands	r5, r3
10010382:	d01e      	beq.n	100103c2 <_printf_common+0x76>
10010384:	0023      	movs	r3, r4
10010386:	3343      	adds	r3, #67	; 0x43
10010388:	781b      	ldrb	r3, [r3, #0]
1001038a:	1e5a      	subs	r2, r3, #1
1001038c:	4193      	sbcs	r3, r2
1001038e:	6822      	ldr	r2, [r4, #0]
10010390:	0692      	lsls	r2, r2, #26
10010392:	d51c      	bpl.n	100103ce <_printf_common+0x82>
10010394:	2030      	movs	r0, #48	; 0x30
10010396:	18e1      	adds	r1, r4, r3
10010398:	3143      	adds	r1, #67	; 0x43
1001039a:	7008      	strb	r0, [r1, #0]
1001039c:	0021      	movs	r1, r4
1001039e:	1c5a      	adds	r2, r3, #1
100103a0:	3145      	adds	r1, #69	; 0x45
100103a2:	7809      	ldrb	r1, [r1, #0]
100103a4:	18a2      	adds	r2, r4, r2
100103a6:	3243      	adds	r2, #67	; 0x43
100103a8:	3302      	adds	r3, #2
100103aa:	7011      	strb	r1, [r2, #0]
100103ac:	e00f      	b.n	100103ce <_printf_common+0x82>
100103ae:	0022      	movs	r2, r4
100103b0:	2301      	movs	r3, #1
100103b2:	3219      	adds	r2, #25
100103b4:	9901      	ldr	r1, [sp, #4]
100103b6:	9800      	ldr	r0, [sp, #0]
100103b8:	9e08      	ldr	r6, [sp, #32]
100103ba:	47b0      	blx	r6
100103bc:	1c43      	adds	r3, r0, #1
100103be:	d00e      	beq.n	100103de <_printf_common+0x92>
100103c0:	3501      	adds	r5, #1
100103c2:	68e3      	ldr	r3, [r4, #12]
100103c4:	683a      	ldr	r2, [r7, #0]
100103c6:	1a9b      	subs	r3, r3, r2
100103c8:	429d      	cmp	r5, r3
100103ca:	dbf0      	blt.n	100103ae <_printf_common+0x62>
100103cc:	e7da      	b.n	10010384 <_printf_common+0x38>
100103ce:	0022      	movs	r2, r4
100103d0:	9901      	ldr	r1, [sp, #4]
100103d2:	3243      	adds	r2, #67	; 0x43
100103d4:	9800      	ldr	r0, [sp, #0]
100103d6:	9d08      	ldr	r5, [sp, #32]
100103d8:	47a8      	blx	r5
100103da:	1c43      	adds	r3, r0, #1
100103dc:	d102      	bne.n	100103e4 <_printf_common+0x98>
100103de:	2001      	movs	r0, #1
100103e0:	4240      	negs	r0, r0
100103e2:	e020      	b.n	10010426 <_printf_common+0xda>
100103e4:	2306      	movs	r3, #6
100103e6:	6820      	ldr	r0, [r4, #0]
100103e8:	68e1      	ldr	r1, [r4, #12]
100103ea:	683a      	ldr	r2, [r7, #0]
100103ec:	4003      	ands	r3, r0
100103ee:	2500      	movs	r5, #0
100103f0:	2b04      	cmp	r3, #4
100103f2:	d103      	bne.n	100103fc <_printf_common+0xb0>
100103f4:	1a8d      	subs	r5, r1, r2
100103f6:	43eb      	mvns	r3, r5
100103f8:	17db      	asrs	r3, r3, #31
100103fa:	401d      	ands	r5, r3
100103fc:	68a3      	ldr	r3, [r4, #8]
100103fe:	6922      	ldr	r2, [r4, #16]
10010400:	4293      	cmp	r3, r2
10010402:	dd01      	ble.n	10010408 <_printf_common+0xbc>
10010404:	1a9b      	subs	r3, r3, r2
10010406:	18ed      	adds	r5, r5, r3
10010408:	2700      	movs	r7, #0
1001040a:	42bd      	cmp	r5, r7
1001040c:	d00a      	beq.n	10010424 <_printf_common+0xd8>
1001040e:	0022      	movs	r2, r4
10010410:	2301      	movs	r3, #1
10010412:	321a      	adds	r2, #26
10010414:	9901      	ldr	r1, [sp, #4]
10010416:	9800      	ldr	r0, [sp, #0]
10010418:	9e08      	ldr	r6, [sp, #32]
1001041a:	47b0      	blx	r6
1001041c:	1c43      	adds	r3, r0, #1
1001041e:	d0de      	beq.n	100103de <_printf_common+0x92>
10010420:	3701      	adds	r7, #1
10010422:	e7f2      	b.n	1001040a <_printf_common+0xbe>
10010424:	2000      	movs	r0, #0
10010426:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10010428 <_printf_i>:
10010428:	b5f0      	push	{r4, r5, r6, r7, lr}
1001042a:	b08b      	sub	sp, #44	; 0x2c
1001042c:	9206      	str	r2, [sp, #24]
1001042e:	000a      	movs	r2, r1
10010430:	3243      	adds	r2, #67	; 0x43
10010432:	9307      	str	r3, [sp, #28]
10010434:	9005      	str	r0, [sp, #20]
10010436:	9204      	str	r2, [sp, #16]
10010438:	7e0a      	ldrb	r2, [r1, #24]
1001043a:	000c      	movs	r4, r1
1001043c:	9b10      	ldr	r3, [sp, #64]	; 0x40
1001043e:	2a6e      	cmp	r2, #110	; 0x6e
10010440:	d100      	bne.n	10010444 <_printf_i+0x1c>
10010442:	e0ab      	b.n	1001059c <_printf_i+0x174>
10010444:	d811      	bhi.n	1001046a <_printf_i+0x42>
10010446:	2a63      	cmp	r2, #99	; 0x63
10010448:	d022      	beq.n	10010490 <_printf_i+0x68>
1001044a:	d809      	bhi.n	10010460 <_printf_i+0x38>
1001044c:	2a00      	cmp	r2, #0
1001044e:	d100      	bne.n	10010452 <_printf_i+0x2a>
10010450:	e0b5      	b.n	100105be <_printf_i+0x196>
10010452:	2a58      	cmp	r2, #88	; 0x58
10010454:	d000      	beq.n	10010458 <_printf_i+0x30>
10010456:	e0c5      	b.n	100105e4 <_printf_i+0x1bc>
10010458:	3145      	adds	r1, #69	; 0x45
1001045a:	700a      	strb	r2, [r1, #0]
1001045c:	4a81      	ldr	r2, [pc, #516]	; (10010664 <_printf_i+0x23c>)
1001045e:	e04f      	b.n	10010500 <_printf_i+0xd8>
10010460:	2a64      	cmp	r2, #100	; 0x64
10010462:	d01d      	beq.n	100104a0 <_printf_i+0x78>
10010464:	2a69      	cmp	r2, #105	; 0x69
10010466:	d01b      	beq.n	100104a0 <_printf_i+0x78>
10010468:	e0bc      	b.n	100105e4 <_printf_i+0x1bc>
1001046a:	2a73      	cmp	r2, #115	; 0x73
1001046c:	d100      	bne.n	10010470 <_printf_i+0x48>
1001046e:	e0aa      	b.n	100105c6 <_printf_i+0x19e>
10010470:	d809      	bhi.n	10010486 <_printf_i+0x5e>
10010472:	2a6f      	cmp	r2, #111	; 0x6f
10010474:	d029      	beq.n	100104ca <_printf_i+0xa2>
10010476:	2a70      	cmp	r2, #112	; 0x70
10010478:	d000      	beq.n	1001047c <_printf_i+0x54>
1001047a:	e0b3      	b.n	100105e4 <_printf_i+0x1bc>
1001047c:	2220      	movs	r2, #32
1001047e:	6809      	ldr	r1, [r1, #0]
10010480:	430a      	orrs	r2, r1
10010482:	6022      	str	r2, [r4, #0]
10010484:	e037      	b.n	100104f6 <_printf_i+0xce>
10010486:	2a75      	cmp	r2, #117	; 0x75
10010488:	d01f      	beq.n	100104ca <_printf_i+0xa2>
1001048a:	2a78      	cmp	r2, #120	; 0x78
1001048c:	d033      	beq.n	100104f6 <_printf_i+0xce>
1001048e:	e0a9      	b.n	100105e4 <_printf_i+0x1bc>
10010490:	000e      	movs	r6, r1
10010492:	681a      	ldr	r2, [r3, #0]
10010494:	3642      	adds	r6, #66	; 0x42
10010496:	1d11      	adds	r1, r2, #4
10010498:	6019      	str	r1, [r3, #0]
1001049a:	6813      	ldr	r3, [r2, #0]
1001049c:	7033      	strb	r3, [r6, #0]
1001049e:	e0a4      	b.n	100105ea <_printf_i+0x1c2>
100104a0:	6821      	ldr	r1, [r4, #0]
100104a2:	681a      	ldr	r2, [r3, #0]
100104a4:	0608      	lsls	r0, r1, #24
100104a6:	d406      	bmi.n	100104b6 <_printf_i+0x8e>
100104a8:	0649      	lsls	r1, r1, #25
100104aa:	d504      	bpl.n	100104b6 <_printf_i+0x8e>
100104ac:	1d11      	adds	r1, r2, #4
100104ae:	6019      	str	r1, [r3, #0]
100104b0:	2300      	movs	r3, #0
100104b2:	5ed5      	ldrsh	r5, [r2, r3]
100104b4:	e002      	b.n	100104bc <_printf_i+0x94>
100104b6:	1d11      	adds	r1, r2, #4
100104b8:	6019      	str	r1, [r3, #0]
100104ba:	6815      	ldr	r5, [r2, #0]
100104bc:	2d00      	cmp	r5, #0
100104be:	da3b      	bge.n	10010538 <_printf_i+0x110>
100104c0:	232d      	movs	r3, #45	; 0x2d
100104c2:	9a04      	ldr	r2, [sp, #16]
100104c4:	426d      	negs	r5, r5
100104c6:	7013      	strb	r3, [r2, #0]
100104c8:	e036      	b.n	10010538 <_printf_i+0x110>
100104ca:	6821      	ldr	r1, [r4, #0]
100104cc:	681a      	ldr	r2, [r3, #0]
100104ce:	0608      	lsls	r0, r1, #24
100104d0:	d406      	bmi.n	100104e0 <_printf_i+0xb8>
100104d2:	0649      	lsls	r1, r1, #25
100104d4:	d504      	bpl.n	100104e0 <_printf_i+0xb8>
100104d6:	6815      	ldr	r5, [r2, #0]
100104d8:	1d11      	adds	r1, r2, #4
100104da:	6019      	str	r1, [r3, #0]
100104dc:	b2ad      	uxth	r5, r5
100104de:	e002      	b.n	100104e6 <_printf_i+0xbe>
100104e0:	1d11      	adds	r1, r2, #4
100104e2:	6019      	str	r1, [r3, #0]
100104e4:	6815      	ldr	r5, [r2, #0]
100104e6:	4b5f      	ldr	r3, [pc, #380]	; (10010664 <_printf_i+0x23c>)
100104e8:	7e22      	ldrb	r2, [r4, #24]
100104ea:	9303      	str	r3, [sp, #12]
100104ec:	2708      	movs	r7, #8
100104ee:	2a6f      	cmp	r2, #111	; 0x6f
100104f0:	d01d      	beq.n	1001052e <_printf_i+0x106>
100104f2:	270a      	movs	r7, #10
100104f4:	e01b      	b.n	1001052e <_printf_i+0x106>
100104f6:	0022      	movs	r2, r4
100104f8:	2178      	movs	r1, #120	; 0x78
100104fa:	3245      	adds	r2, #69	; 0x45
100104fc:	7011      	strb	r1, [r2, #0]
100104fe:	4a5a      	ldr	r2, [pc, #360]	; (10010668 <_printf_i+0x240>)
10010500:	6819      	ldr	r1, [r3, #0]
10010502:	9203      	str	r2, [sp, #12]
10010504:	1d08      	adds	r0, r1, #4
10010506:	6822      	ldr	r2, [r4, #0]
10010508:	6018      	str	r0, [r3, #0]
1001050a:	680d      	ldr	r5, [r1, #0]
1001050c:	0610      	lsls	r0, r2, #24
1001050e:	d402      	bmi.n	10010516 <_printf_i+0xee>
10010510:	0650      	lsls	r0, r2, #25
10010512:	d500      	bpl.n	10010516 <_printf_i+0xee>
10010514:	b2ad      	uxth	r5, r5
10010516:	07d3      	lsls	r3, r2, #31
10010518:	d502      	bpl.n	10010520 <_printf_i+0xf8>
1001051a:	2320      	movs	r3, #32
1001051c:	431a      	orrs	r2, r3
1001051e:	6022      	str	r2, [r4, #0]
10010520:	2710      	movs	r7, #16
10010522:	2d00      	cmp	r5, #0
10010524:	d103      	bne.n	1001052e <_printf_i+0x106>
10010526:	2320      	movs	r3, #32
10010528:	6822      	ldr	r2, [r4, #0]
1001052a:	439a      	bics	r2, r3
1001052c:	6022      	str	r2, [r4, #0]
1001052e:	0023      	movs	r3, r4
10010530:	2200      	movs	r2, #0
10010532:	3343      	adds	r3, #67	; 0x43
10010534:	701a      	strb	r2, [r3, #0]
10010536:	e002      	b.n	1001053e <_printf_i+0x116>
10010538:	270a      	movs	r7, #10
1001053a:	4b4a      	ldr	r3, [pc, #296]	; (10010664 <_printf_i+0x23c>)
1001053c:	9303      	str	r3, [sp, #12]
1001053e:	6863      	ldr	r3, [r4, #4]
10010540:	60a3      	str	r3, [r4, #8]
10010542:	2b00      	cmp	r3, #0
10010544:	db09      	blt.n	1001055a <_printf_i+0x132>
10010546:	2204      	movs	r2, #4
10010548:	6821      	ldr	r1, [r4, #0]
1001054a:	4391      	bics	r1, r2
1001054c:	6021      	str	r1, [r4, #0]
1001054e:	2d00      	cmp	r5, #0
10010550:	d105      	bne.n	1001055e <_printf_i+0x136>
10010552:	9e04      	ldr	r6, [sp, #16]
10010554:	2b00      	cmp	r3, #0
10010556:	d011      	beq.n	1001057c <_printf_i+0x154>
10010558:	e07b      	b.n	10010652 <_printf_i+0x22a>
1001055a:	2d00      	cmp	r5, #0
1001055c:	d079      	beq.n	10010652 <_printf_i+0x22a>
1001055e:	9e04      	ldr	r6, [sp, #16]
10010560:	0028      	movs	r0, r5
10010562:	0039      	movs	r1, r7
10010564:	f7fe f8ae 	bl	1000e6c4 <__aeabi_uidivmod>
10010568:	9b03      	ldr	r3, [sp, #12]
1001056a:	3e01      	subs	r6, #1
1001056c:	5c5b      	ldrb	r3, [r3, r1]
1001056e:	0028      	movs	r0, r5
10010570:	7033      	strb	r3, [r6, #0]
10010572:	0039      	movs	r1, r7
10010574:	f7fe f820 	bl	1000e5b8 <__aeabi_uidiv>
10010578:	1e05      	subs	r5, r0, #0
1001057a:	d1f1      	bne.n	10010560 <_printf_i+0x138>
1001057c:	2f08      	cmp	r7, #8
1001057e:	d109      	bne.n	10010594 <_printf_i+0x16c>
10010580:	6823      	ldr	r3, [r4, #0]
10010582:	07db      	lsls	r3, r3, #31
10010584:	d506      	bpl.n	10010594 <_printf_i+0x16c>
10010586:	6863      	ldr	r3, [r4, #4]
10010588:	6922      	ldr	r2, [r4, #16]
1001058a:	4293      	cmp	r3, r2
1001058c:	dc02      	bgt.n	10010594 <_printf_i+0x16c>
1001058e:	2330      	movs	r3, #48	; 0x30
10010590:	3e01      	subs	r6, #1
10010592:	7033      	strb	r3, [r6, #0]
10010594:	9b04      	ldr	r3, [sp, #16]
10010596:	1b9b      	subs	r3, r3, r6
10010598:	6123      	str	r3, [r4, #16]
1001059a:	e02b      	b.n	100105f4 <_printf_i+0x1cc>
1001059c:	6809      	ldr	r1, [r1, #0]
1001059e:	681a      	ldr	r2, [r3, #0]
100105a0:	0608      	lsls	r0, r1, #24
100105a2:	d407      	bmi.n	100105b4 <_printf_i+0x18c>
100105a4:	0649      	lsls	r1, r1, #25
100105a6:	d505      	bpl.n	100105b4 <_printf_i+0x18c>
100105a8:	1d11      	adds	r1, r2, #4
100105aa:	6019      	str	r1, [r3, #0]
100105ac:	6813      	ldr	r3, [r2, #0]
100105ae:	8aa2      	ldrh	r2, [r4, #20]
100105b0:	801a      	strh	r2, [r3, #0]
100105b2:	e004      	b.n	100105be <_printf_i+0x196>
100105b4:	1d11      	adds	r1, r2, #4
100105b6:	6019      	str	r1, [r3, #0]
100105b8:	6813      	ldr	r3, [r2, #0]
100105ba:	6962      	ldr	r2, [r4, #20]
100105bc:	601a      	str	r2, [r3, #0]
100105be:	2300      	movs	r3, #0
100105c0:	9e04      	ldr	r6, [sp, #16]
100105c2:	6123      	str	r3, [r4, #16]
100105c4:	e016      	b.n	100105f4 <_printf_i+0x1cc>
100105c6:	681a      	ldr	r2, [r3, #0]
100105c8:	1d11      	adds	r1, r2, #4
100105ca:	6019      	str	r1, [r3, #0]
100105cc:	6816      	ldr	r6, [r2, #0]
100105ce:	2100      	movs	r1, #0
100105d0:	6862      	ldr	r2, [r4, #4]
100105d2:	0030      	movs	r0, r6
100105d4:	f000 f93c 	bl	10010850 <memchr>
100105d8:	2800      	cmp	r0, #0
100105da:	d001      	beq.n	100105e0 <_printf_i+0x1b8>
100105dc:	1b80      	subs	r0, r0, r6
100105de:	6060      	str	r0, [r4, #4]
100105e0:	6863      	ldr	r3, [r4, #4]
100105e2:	e003      	b.n	100105ec <_printf_i+0x1c4>
100105e4:	0026      	movs	r6, r4
100105e6:	3642      	adds	r6, #66	; 0x42
100105e8:	7032      	strb	r2, [r6, #0]
100105ea:	2301      	movs	r3, #1
100105ec:	6123      	str	r3, [r4, #16]
100105ee:	2300      	movs	r3, #0
100105f0:	9a04      	ldr	r2, [sp, #16]
100105f2:	7013      	strb	r3, [r2, #0]
100105f4:	9b07      	ldr	r3, [sp, #28]
100105f6:	aa09      	add	r2, sp, #36	; 0x24
100105f8:	9300      	str	r3, [sp, #0]
100105fa:	0021      	movs	r1, r4
100105fc:	9b06      	ldr	r3, [sp, #24]
100105fe:	9805      	ldr	r0, [sp, #20]
10010600:	f7ff fea4 	bl	1001034c <_printf_common>
10010604:	1c43      	adds	r3, r0, #1
10010606:	d102      	bne.n	1001060e <_printf_i+0x1e6>
10010608:	2001      	movs	r0, #1
1001060a:	4240      	negs	r0, r0
1001060c:	e027      	b.n	1001065e <_printf_i+0x236>
1001060e:	6923      	ldr	r3, [r4, #16]
10010610:	0032      	movs	r2, r6
10010612:	9906      	ldr	r1, [sp, #24]
10010614:	9805      	ldr	r0, [sp, #20]
10010616:	9d07      	ldr	r5, [sp, #28]
10010618:	47a8      	blx	r5
1001061a:	1c43      	adds	r3, r0, #1
1001061c:	d0f4      	beq.n	10010608 <_printf_i+0x1e0>
1001061e:	6823      	ldr	r3, [r4, #0]
10010620:	2500      	movs	r5, #0
10010622:	079b      	lsls	r3, r3, #30
10010624:	d40f      	bmi.n	10010646 <_printf_i+0x21e>
10010626:	9b09      	ldr	r3, [sp, #36]	; 0x24
10010628:	68e0      	ldr	r0, [r4, #12]
1001062a:	4298      	cmp	r0, r3
1001062c:	da17      	bge.n	1001065e <_printf_i+0x236>
1001062e:	0018      	movs	r0, r3
10010630:	e015      	b.n	1001065e <_printf_i+0x236>
10010632:	0022      	movs	r2, r4
10010634:	2301      	movs	r3, #1
10010636:	3219      	adds	r2, #25
10010638:	9906      	ldr	r1, [sp, #24]
1001063a:	9805      	ldr	r0, [sp, #20]
1001063c:	9e07      	ldr	r6, [sp, #28]
1001063e:	47b0      	blx	r6
10010640:	1c43      	adds	r3, r0, #1
10010642:	d0e1      	beq.n	10010608 <_printf_i+0x1e0>
10010644:	3501      	adds	r5, #1
10010646:	68e3      	ldr	r3, [r4, #12]
10010648:	9a09      	ldr	r2, [sp, #36]	; 0x24
1001064a:	1a9b      	subs	r3, r3, r2
1001064c:	429d      	cmp	r5, r3
1001064e:	dbf0      	blt.n	10010632 <_printf_i+0x20a>
10010650:	e7e9      	b.n	10010626 <_printf_i+0x1fe>
10010652:	0026      	movs	r6, r4
10010654:	9b03      	ldr	r3, [sp, #12]
10010656:	3642      	adds	r6, #66	; 0x42
10010658:	781b      	ldrb	r3, [r3, #0]
1001065a:	7033      	strb	r3, [r6, #0]
1001065c:	e78e      	b.n	1001057c <_printf_i+0x154>
1001065e:	b00b      	add	sp, #44	; 0x2c
10010660:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010662:	46c0      	nop			; (mov r8, r8)
10010664:	100117dd 	.word	0x100117dd
10010668:	100117ee 	.word	0x100117ee

1001066c <_putc_r>:
1001066c:	b570      	push	{r4, r5, r6, lr}
1001066e:	0006      	movs	r6, r0
10010670:	000d      	movs	r5, r1
10010672:	0014      	movs	r4, r2
10010674:	2800      	cmp	r0, #0
10010676:	d004      	beq.n	10010682 <_putc_r+0x16>
10010678:	6983      	ldr	r3, [r0, #24]
1001067a:	2b00      	cmp	r3, #0
1001067c:	d101      	bne.n	10010682 <_putc_r+0x16>
1001067e:	f7ff fb83 	bl	1000fd88 <__sinit>
10010682:	4b12      	ldr	r3, [pc, #72]	; (100106cc <_putc_r+0x60>)
10010684:	429c      	cmp	r4, r3
10010686:	d101      	bne.n	1001068c <_putc_r+0x20>
10010688:	6874      	ldr	r4, [r6, #4]
1001068a:	e008      	b.n	1001069e <_putc_r+0x32>
1001068c:	4b10      	ldr	r3, [pc, #64]	; (100106d0 <_putc_r+0x64>)
1001068e:	429c      	cmp	r4, r3
10010690:	d101      	bne.n	10010696 <_putc_r+0x2a>
10010692:	68b4      	ldr	r4, [r6, #8]
10010694:	e003      	b.n	1001069e <_putc_r+0x32>
10010696:	4b0f      	ldr	r3, [pc, #60]	; (100106d4 <_putc_r+0x68>)
10010698:	429c      	cmp	r4, r3
1001069a:	d100      	bne.n	1001069e <_putc_r+0x32>
1001069c:	68f4      	ldr	r4, [r6, #12]
1001069e:	68a3      	ldr	r3, [r4, #8]
100106a0:	3b01      	subs	r3, #1
100106a2:	60a3      	str	r3, [r4, #8]
100106a4:	2b00      	cmp	r3, #0
100106a6:	da05      	bge.n	100106b4 <_putc_r+0x48>
100106a8:	69a2      	ldr	r2, [r4, #24]
100106aa:	4293      	cmp	r3, r2
100106ac:	db08      	blt.n	100106c0 <_putc_r+0x54>
100106ae:	b2eb      	uxtb	r3, r5
100106b0:	2b0a      	cmp	r3, #10
100106b2:	d005      	beq.n	100106c0 <_putc_r+0x54>
100106b4:	6823      	ldr	r3, [r4, #0]
100106b6:	b2e8      	uxtb	r0, r5
100106b8:	1c5a      	adds	r2, r3, #1
100106ba:	6022      	str	r2, [r4, #0]
100106bc:	701d      	strb	r5, [r3, #0]
100106be:	e004      	b.n	100106ca <_putc_r+0x5e>
100106c0:	0022      	movs	r2, r4
100106c2:	0029      	movs	r1, r5
100106c4:	0030      	movs	r0, r6
100106c6:	f7ff f99d 	bl	1000fa04 <__swbuf_r>
100106ca:	bd70      	pop	{r4, r5, r6, pc}
100106cc:	1001176c 	.word	0x1001176c
100106d0:	1001178c 	.word	0x1001178c
100106d4:	100117ac 	.word	0x100117ac

100106d8 <_sbrk_r>:
100106d8:	2300      	movs	r3, #0
100106da:	b570      	push	{r4, r5, r6, lr}
100106dc:	4c06      	ldr	r4, [pc, #24]	; (100106f8 <_sbrk_r+0x20>)
100106de:	0005      	movs	r5, r0
100106e0:	0008      	movs	r0, r1
100106e2:	6023      	str	r3, [r4, #0]
100106e4:	f7f9 fbdc 	bl	10009ea0 <_sbrk>
100106e8:	1c43      	adds	r3, r0, #1
100106ea:	d103      	bne.n	100106f4 <_sbrk_r+0x1c>
100106ec:	6823      	ldr	r3, [r4, #0]
100106ee:	2b00      	cmp	r3, #0
100106f0:	d000      	beq.n	100106f4 <_sbrk_r+0x1c>
100106f2:	602b      	str	r3, [r5, #0]
100106f4:	bd70      	pop	{r4, r5, r6, pc}
100106f6:	46c0      	nop			; (mov r8, r8)
100106f8:	100145dc 	.word	0x100145dc

100106fc <__sread>:
100106fc:	b570      	push	{r4, r5, r6, lr}
100106fe:	000c      	movs	r4, r1
10010700:	250e      	movs	r5, #14
10010702:	5f49      	ldrsh	r1, [r1, r5]
10010704:	f000 f8b0 	bl	10010868 <_read_r>
10010708:	2800      	cmp	r0, #0
1001070a:	db03      	blt.n	10010714 <__sread+0x18>
1001070c:	6d63      	ldr	r3, [r4, #84]	; 0x54
1001070e:	181b      	adds	r3, r3, r0
10010710:	6563      	str	r3, [r4, #84]	; 0x54
10010712:	e003      	b.n	1001071c <__sread+0x20>
10010714:	89a2      	ldrh	r2, [r4, #12]
10010716:	4b02      	ldr	r3, [pc, #8]	; (10010720 <__sread+0x24>)
10010718:	4013      	ands	r3, r2
1001071a:	81a3      	strh	r3, [r4, #12]
1001071c:	bd70      	pop	{r4, r5, r6, pc}
1001071e:	46c0      	nop			; (mov r8, r8)
10010720:	ffffefff 	.word	0xffffefff

10010724 <__swrite>:
10010724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10010726:	001f      	movs	r7, r3
10010728:	898b      	ldrh	r3, [r1, #12]
1001072a:	0005      	movs	r5, r0
1001072c:	000c      	movs	r4, r1
1001072e:	0016      	movs	r6, r2
10010730:	05db      	lsls	r3, r3, #23
10010732:	d505      	bpl.n	10010740 <__swrite+0x1c>
10010734:	230e      	movs	r3, #14
10010736:	5ec9      	ldrsh	r1, [r1, r3]
10010738:	2200      	movs	r2, #0
1001073a:	2302      	movs	r3, #2
1001073c:	f000 f874 	bl	10010828 <_lseek_r>
10010740:	89a2      	ldrh	r2, [r4, #12]
10010742:	4b05      	ldr	r3, [pc, #20]	; (10010758 <__swrite+0x34>)
10010744:	0028      	movs	r0, r5
10010746:	4013      	ands	r3, r2
10010748:	81a3      	strh	r3, [r4, #12]
1001074a:	0032      	movs	r2, r6
1001074c:	230e      	movs	r3, #14
1001074e:	5ee1      	ldrsh	r1, [r4, r3]
10010750:	003b      	movs	r3, r7
10010752:	f000 f81f 	bl	10010794 <_write_r>
10010756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10010758:	ffffefff 	.word	0xffffefff

1001075c <__sseek>:
1001075c:	b570      	push	{r4, r5, r6, lr}
1001075e:	000c      	movs	r4, r1
10010760:	250e      	movs	r5, #14
10010762:	5f49      	ldrsh	r1, [r1, r5]
10010764:	f000 f860 	bl	10010828 <_lseek_r>
10010768:	89a3      	ldrh	r3, [r4, #12]
1001076a:	1c42      	adds	r2, r0, #1
1001076c:	d103      	bne.n	10010776 <__sseek+0x1a>
1001076e:	4a05      	ldr	r2, [pc, #20]	; (10010784 <__sseek+0x28>)
10010770:	4013      	ands	r3, r2
10010772:	81a3      	strh	r3, [r4, #12]
10010774:	e004      	b.n	10010780 <__sseek+0x24>
10010776:	2280      	movs	r2, #128	; 0x80
10010778:	0152      	lsls	r2, r2, #5
1001077a:	4313      	orrs	r3, r2
1001077c:	81a3      	strh	r3, [r4, #12]
1001077e:	6560      	str	r0, [r4, #84]	; 0x54
10010780:	bd70      	pop	{r4, r5, r6, pc}
10010782:	46c0      	nop			; (mov r8, r8)
10010784:	ffffefff 	.word	0xffffefff

10010788 <__sclose>:
10010788:	b510      	push	{r4, lr}
1001078a:	230e      	movs	r3, #14
1001078c:	5ec9      	ldrsh	r1, [r1, r3]
1001078e:	f000 f815 	bl	100107bc <_close_r>
10010792:	bd10      	pop	{r4, pc}

10010794 <_write_r>:
10010794:	b570      	push	{r4, r5, r6, lr}
10010796:	0005      	movs	r5, r0
10010798:	0008      	movs	r0, r1
1001079a:	0011      	movs	r1, r2
1001079c:	2200      	movs	r2, #0
1001079e:	4c06      	ldr	r4, [pc, #24]	; (100107b8 <_write_r+0x24>)
100107a0:	6022      	str	r2, [r4, #0]
100107a2:	001a      	movs	r2, r3
100107a4:	f7f9 fb54 	bl	10009e50 <_write>
100107a8:	1c43      	adds	r3, r0, #1
100107aa:	d103      	bne.n	100107b4 <_write_r+0x20>
100107ac:	6823      	ldr	r3, [r4, #0]
100107ae:	2b00      	cmp	r3, #0
100107b0:	d000      	beq.n	100107b4 <_write_r+0x20>
100107b2:	602b      	str	r3, [r5, #0]
100107b4:	bd70      	pop	{r4, r5, r6, pc}
100107b6:	46c0      	nop			; (mov r8, r8)
100107b8:	100145dc 	.word	0x100145dc

100107bc <_close_r>:
100107bc:	2300      	movs	r3, #0
100107be:	b570      	push	{r4, r5, r6, lr}
100107c0:	4c06      	ldr	r4, [pc, #24]	; (100107dc <_close_r+0x20>)
100107c2:	0005      	movs	r5, r0
100107c4:	0008      	movs	r0, r1
100107c6:	6023      	str	r3, [r4, #0]
100107c8:	f7f9 fb7c 	bl	10009ec4 <_close>
100107cc:	1c43      	adds	r3, r0, #1
100107ce:	d103      	bne.n	100107d8 <_close_r+0x1c>
100107d0:	6823      	ldr	r3, [r4, #0]
100107d2:	2b00      	cmp	r3, #0
100107d4:	d000      	beq.n	100107d8 <_close_r+0x1c>
100107d6:	602b      	str	r3, [r5, #0]
100107d8:	bd70      	pop	{r4, r5, r6, pc}
100107da:	46c0      	nop			; (mov r8, r8)
100107dc:	100145dc 	.word	0x100145dc

100107e0 <_fstat_r>:
100107e0:	2300      	movs	r3, #0
100107e2:	b570      	push	{r4, r5, r6, lr}
100107e4:	4c06      	ldr	r4, [pc, #24]	; (10010800 <_fstat_r+0x20>)
100107e6:	0005      	movs	r5, r0
100107e8:	0008      	movs	r0, r1
100107ea:	0011      	movs	r1, r2
100107ec:	6023      	str	r3, [r4, #0]
100107ee:	f7f9 fb6d 	bl	10009ecc <_fstat>
100107f2:	1c43      	adds	r3, r0, #1
100107f4:	d103      	bne.n	100107fe <_fstat_r+0x1e>
100107f6:	6823      	ldr	r3, [r4, #0]
100107f8:	2b00      	cmp	r3, #0
100107fa:	d000      	beq.n	100107fe <_fstat_r+0x1e>
100107fc:	602b      	str	r3, [r5, #0]
100107fe:	bd70      	pop	{r4, r5, r6, pc}
10010800:	100145dc 	.word	0x100145dc

10010804 <_isatty_r>:
10010804:	2300      	movs	r3, #0
10010806:	b570      	push	{r4, r5, r6, lr}
10010808:	4c06      	ldr	r4, [pc, #24]	; (10010824 <_isatty_r+0x20>)
1001080a:	0005      	movs	r5, r0
1001080c:	0008      	movs	r0, r1
1001080e:	6023      	str	r3, [r4, #0]
10010810:	f7f9 fb62 	bl	10009ed8 <_isatty>
10010814:	1c43      	adds	r3, r0, #1
10010816:	d103      	bne.n	10010820 <_isatty_r+0x1c>
10010818:	6823      	ldr	r3, [r4, #0]
1001081a:	2b00      	cmp	r3, #0
1001081c:	d000      	beq.n	10010820 <_isatty_r+0x1c>
1001081e:	602b      	str	r3, [r5, #0]
10010820:	bd70      	pop	{r4, r5, r6, pc}
10010822:	46c0      	nop			; (mov r8, r8)
10010824:	100145dc 	.word	0x100145dc

10010828 <_lseek_r>:
10010828:	b570      	push	{r4, r5, r6, lr}
1001082a:	0005      	movs	r5, r0
1001082c:	0008      	movs	r0, r1
1001082e:	0011      	movs	r1, r2
10010830:	2200      	movs	r2, #0
10010832:	4c06      	ldr	r4, [pc, #24]	; (1001084c <_lseek_r+0x24>)
10010834:	6022      	str	r2, [r4, #0]
10010836:	001a      	movs	r2, r3
10010838:	f7f9 fb50 	bl	10009edc <_lseek>
1001083c:	1c43      	adds	r3, r0, #1
1001083e:	d103      	bne.n	10010848 <_lseek_r+0x20>
10010840:	6823      	ldr	r3, [r4, #0]
10010842:	2b00      	cmp	r3, #0
10010844:	d000      	beq.n	10010848 <_lseek_r+0x20>
10010846:	602b      	str	r3, [r5, #0]
10010848:	bd70      	pop	{r4, r5, r6, pc}
1001084a:	46c0      	nop			; (mov r8, r8)
1001084c:	100145dc 	.word	0x100145dc

10010850 <memchr>:
10010850:	b2c9      	uxtb	r1, r1
10010852:	1882      	adds	r2, r0, r2
10010854:	4290      	cmp	r0, r2
10010856:	d004      	beq.n	10010862 <memchr+0x12>
10010858:	7803      	ldrb	r3, [r0, #0]
1001085a:	428b      	cmp	r3, r1
1001085c:	d002      	beq.n	10010864 <memchr+0x14>
1001085e:	3001      	adds	r0, #1
10010860:	e7f8      	b.n	10010854 <memchr+0x4>
10010862:	2000      	movs	r0, #0
10010864:	4770      	bx	lr
	...

10010868 <_read_r>:
10010868:	b570      	push	{r4, r5, r6, lr}
1001086a:	0005      	movs	r5, r0
1001086c:	0008      	movs	r0, r1
1001086e:	0011      	movs	r1, r2
10010870:	2200      	movs	r2, #0
10010872:	4c06      	ldr	r4, [pc, #24]	; (1001088c <_read_r+0x24>)
10010874:	6022      	str	r2, [r4, #0]
10010876:	001a      	movs	r2, r3
10010878:	f7f9 faca 	bl	10009e10 <_read>
1001087c:	1c43      	adds	r3, r0, #1
1001087e:	d103      	bne.n	10010888 <_read_r+0x20>
10010880:	6823      	ldr	r3, [r4, #0]
10010882:	2b00      	cmp	r3, #0
10010884:	d000      	beq.n	10010888 <_read_r+0x20>
10010886:	602b      	str	r3, [r5, #0]
10010888:	bd70      	pop	{r4, r5, r6, pc}
1001088a:	46c0      	nop			; (mov r8, r8)
1001088c:	100145dc 	.word	0x100145dc

10010890 <__aeabi_lmul>:
10010890:	b5f0      	push	{r4, r5, r6, r7, lr}
10010892:	464f      	mov	r7, r9
10010894:	4646      	mov	r6, r8
10010896:	b4c0      	push	{r6, r7}
10010898:	0416      	lsls	r6, r2, #16
1001089a:	0c36      	lsrs	r6, r6, #16
1001089c:	4699      	mov	r9, r3
1001089e:	0033      	movs	r3, r6
100108a0:	0405      	lsls	r5, r0, #16
100108a2:	0c2c      	lsrs	r4, r5, #16
100108a4:	0c07      	lsrs	r7, r0, #16
100108a6:	0c15      	lsrs	r5, r2, #16
100108a8:	4363      	muls	r3, r4
100108aa:	437e      	muls	r6, r7
100108ac:	436f      	muls	r7, r5
100108ae:	4365      	muls	r5, r4
100108b0:	0c1c      	lsrs	r4, r3, #16
100108b2:	19ad      	adds	r5, r5, r6
100108b4:	1964      	adds	r4, r4, r5
100108b6:	469c      	mov	ip, r3
100108b8:	42a6      	cmp	r6, r4
100108ba:	d903      	bls.n	100108c4 <__aeabi_lmul+0x34>
100108bc:	2380      	movs	r3, #128	; 0x80
100108be:	025b      	lsls	r3, r3, #9
100108c0:	4698      	mov	r8, r3
100108c2:	4447      	add	r7, r8
100108c4:	4663      	mov	r3, ip
100108c6:	0c25      	lsrs	r5, r4, #16
100108c8:	19ef      	adds	r7, r5, r7
100108ca:	041d      	lsls	r5, r3, #16
100108cc:	464b      	mov	r3, r9
100108ce:	434a      	muls	r2, r1
100108d0:	4343      	muls	r3, r0
100108d2:	0c2d      	lsrs	r5, r5, #16
100108d4:	0424      	lsls	r4, r4, #16
100108d6:	1964      	adds	r4, r4, r5
100108d8:	1899      	adds	r1, r3, r2
100108da:	19c9      	adds	r1, r1, r7
100108dc:	0020      	movs	r0, r4
100108de:	bc0c      	pop	{r2, r3}
100108e0:	4690      	mov	r8, r2
100108e2:	4699      	mov	r9, r3
100108e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100108e6:	46c0      	nop			; (mov r8, r8)

100108e8 <sms_ble_gap_cb>:
	...
100108f0:	80e9 1000 0000 0000 0000 0000 80ed 1000     ................
10010900:	80f1 1000 0000 0000 0000 0000 80f5 1000     ................
	...

10010934 <sms_ble_gatt_client_cb>:
10010934:	80f9 1000 0000 0000 80fd 1000 0000 0000     ................
10010944:	8101 1000 8105 1000 0000 0000 0000 0000     ................
10010954:	8109 1000 810d 1000 000d 0000 735b 736d     ............[sms
10010964:	625f 7475 6f74 5f6e 6f63 666e 6769 7275     _button_configur
10010974:	5d65 5009 6f72 6c62 6d65 7720 6968 656c     e].Problem while
10010984:	7320 7465 6974 676e 7520 2070 5058 414c      setting up XPLA
10010994:	4e49 4445 7520 6573 2072 7562 7474 6e6f     INED user button
100109a4:	0000 0000 735b 736d 6c5f 6465 675f 6970     ....[sms_led_gpi
100109b4:	5f6f 6e69 7469 095d 7270 626f 656c 206d     o_init].problem 
100109c4:	6877 6c69 2065 6573 7474 6e69 2067 7075     while setting up
100109d4:	6c20 6465 0030 0000 8e30 1000 8e3e 1000      led0...0...>...
100109e4:	8e4c 1000 8e5a 1000 8e68 1000 8e76 1000     L...Z...h...v...
100109f4:	8e84 1000 8e94 1000 8ea4 1000 8eb4 1000     ................
10010a04:	8ec4 1000 8ed4 1000 8ee4 1000 8ef4 1000     ................
10010a14:	8f04 1000 8f14 1000 8f24 1000 8f34 1000     ........$...4...
10010a24:	8f44 1000 8f54 1000 8f64 1000 8f74 1000     D...T...d...t...
10010a34:	8f84 1000 8f94 1000 8fa4 1000 8fb4 1000     ................
10010a44:	8fc4 1000 8fd4 1000 8fe2 1000 8ff0 1000     ................
10010a54:	8ffe 1000 900c 1000 901a 1000 9028 1000     ............(...
10010a64:	9036 1000 9044 1000 9054 1000 9064 1000     6...D...T...d...
10010a74:	9074 1000 9084 1000 9094 1000 90a4 1000     t...............
10010a84:	90b4 1000 90c4 1000 90d4 1000 90e4 1000     ................
10010a94:	90f4 1000 9104 1000 9114 1000 9124 1000     ............$...
10010aa4:	9134 1000 9144 1000 9152 1000 9160 1000     4...D...R...`...
10010ab4:	918c 1000 919a 1000 91a8 1000 91b6 1000     ................
10010ac4:	91c4 1000 91d2 1000 91e0 1000 91ee 1000     ................
10010ad4:	91fc 1000 920a 1000 9218 1000 9226 1000     ............&...
10010ae4:	9234 1000 9242 1000 9250 1000 925e 1000     4...B...P...^...
10010af4:	926c 1000 927a 1000 9288 1000 9296 1000     l...z...........
10010b04:	92a4 1000 92b2 1000 92c0 1000 92ce 1000     ................
10010b14:	92dc 1000 92ea 1000 92f8 1000 9306 1000     ................
10010b24:	9314 1000 9322 1000 9330 1000 933e 1000     ...."...0...>...
10010b34:	934c 1000 935a 1000 9368 1000 9376 1000     L...Z...h...v...
10010b44:	9384 1000 9392 1000 93a0 1000 93ae 1000     ................
10010b54:	93bc 1000 93ca 1000 93d8 1000 93e6 1000     ................
10010b64:	93f4 1000 9402 1000 9410 1000 941e 1000     ................
10010b74:	942c 1000 943a 1000 9448 1000 9456 1000     ,...:...H...V...
10010b84:	9464 1000 9472 1000 950c 1000 9534 1000     d...r.......4...
10010b94:	955c 1000 9584 1000 97c4 1000 95b4 1000     \...............
10010ba4:	95cc 1000 9644 1000 965c 1000 95e4 1000     ....D...\.......
10010bb4:	95fc 1000 9614 1000 962c 1000 9674 1000     ........,...t...
10010bc4:	9938 1000 9938 1000 9938 1000 9938 1000     8...8...8...8...
10010bd4:	9938 1000 9938 1000 9938 1000 9938 1000     8...8...8...8...
10010be4:	971c 1000 9734 1000 974c 1000 97da 1000     ....4...L.......
10010bf4:	96a4 1000 9938 1000 9938 1000 9938 1000     ....8...8...8...
10010c04:	9938 1000 9938 1000 9938 1000 9764 1000     8...8...8...d...
10010c14:	977c 1000 9794 1000 97ac 1000 9938 1000     |...........8...
10010c24:	98f0 1000 9908 1000 9938 1000 9938 1000     ........8...8...
10010c34:	9806 1000 981c 1000 9832 1000 9848 1000     ........2...H...
10010c44:	9938 1000 9938 1000 9938 1000 9938 1000     8...8...8...8...
10010c54:	9938 1000 9938 1000 9938 1000 9938 1000     8...8...8...8...
10010c64:	94f8 1000 9520 1000 9548 1000 9570 1000     .... ...H...p...
10010c74:	959c 1000 968c 1000 96bc 1000 96d4 1000     ................
10010c84:	96ec 1000 9704 1000 97f0 1000 985e 1000     ............^...
10010c94:	98d8 1000 9920 1000 a032 1000 a044 1000     .... ...2...D...
10010ca4:	a01a 1000 a01a 1000 a01a 1000 a032 1000     ............2...
10010cb4:	a01a 1000 a01a 1000 aa36 1000 aaaa 1000     ........6.......
10010cc4:	aa1e 1000 aab0 1000 aa24 1000 aa2a 1000     ........$...*...
10010cd4:	aa30 1000 3231 3433 3635 0000 ab00 efcd     0...123456......
10010ce4:	cdab 00ef 0600 b2d6 05f0 f8f0 0000 0000     ................

10010cf4 <ble_mgr_gatt_server_handle>:
	...
10010d0c:	9f2d 1000 9f55 1000 9f9d 1000 0000 0000     -...U...........
10010d1c:	6e55 6564 6966 656e 2064 7645 6e65 2074     Undefined Event 
10010d2c:	6552 6563 7669 6465 0000 0000 6353 6e61     Received....Scan
10010d3c:	696e 676e 2020 6166 6c69 6465 0000 0000     ning  failed....
10010d4c:	4c42 2d45 544d 2055 6843 6e61 6567 2c64     BLE-MTU Changed,
10010d5c:	4320 6e6f 656e 7463 6f69 206e 6148 646e      Connection Hand
10010d6c:	656c 203a 6425 202c 654e 2077 6156 756c     le: %d, New Valu
10010d7c:	3a65 2520 0064 0000 544d 2055 6843 6e61     e: %d...MTU Chan
10010d8c:	6567 2c64 4320 6e6f 656e 7463 6f69 206e     ged, Connection 
10010d9c:	6148 646e 656c 253a 2c64 4f20 6570 6172     Handle:%d, Opera
10010dac:	6974 6e6f 253a 0064 544d 2055 6843 6e61     tion:%d.MTU Chan
10010dbc:	6567 4620 6961 656c 2c64 4320 6e6f 656e     ge Failed, Conne
10010dcc:	7463 6f69 206e 6148 646e 656c 253a 2c64     ction Handle:%d,
10010ddc:	4f20 6570 6172 6974 6e6f 253a 0064 0000      Operation:%d...
10010dec:	6843 7261 5720 6972 6574 4320 646d 4320     Char Write Cmd C
10010dfc:	6d6f 6c70 7465 2c65 4320 6e6f 656e 7463     omplete, Connect
10010e0c:	6f69 206e 6148 646e 656c 253a 2c64 4f20     ion Handle:%d, O
10010e1c:	6570 6172 6974 6e6f 253a 0064 6843 7261     peration:%d.Char
10010e2c:	5720 6972 6574 4320 646d 4620 6961 656c      Write Cmd Faile
10010e3c:	2c64 4320 6e6f 656e 7463 6f69 206e 6148     d, Connection Ha
10010e4c:	646e 656c 253a 2c64 4f20 6570 6172 6974     ndle:%d, Operati
10010e5c:	6e6f 253a 0064 0000 7453 7461 2065 6f4e     on:%d...State No
10010e6c:	2074 6148 646e 656c 2064 6425 0000 0000     t Handled %d....
10010e7c:	6544 6976 6563 6420 7369 6f63 6e6e 6365     Device disconnec
10010e8c:	6574 2064 6552 7361 6e6f 303a 2578 3230     ted Reason:0x%02
10010e9c:	2078 6148 646e 656c 303d 2578 0078 0000     x Handle=0x%x...
10010eac:	5441 425f 454c 435f 4e4f 5f4e 4150 4152     AT_BLE_CONN_PARA
10010ebc:	5f4d 5055 4144 4554 0020 0000 6e45 7263     M_UPDATE ...Encr
10010ecc:	7079 6974 6e6f 6620 6961 656c 0064 0000     yption failed...
10010edc:	6e45 7263 7079 6974 6e6f 6320 6d6f 6c70     Encryption compl
10010eec:	7465 6465 7320 6375 6563 7373 7566 6c6c     eted successfull
10010efc:	0079 0000 4c42 2045 6544 6976 6563 6e20     y...BLE Device n
10010f0c:	746f 6620 756f 646e 6520 636e 7972 7470     ot found encrypt
10010f1c:	6f69 206e 6e69 6f66 0000 0000 6e49 6f66     ion info....Info
10010f2c:	443a 7665 6369 2065 6f66 6e75 2064 6461     :Device found ad
10010f3c:	7264 7365 2073 255b 5d64 2020 7830 3025     dress [%d]  0x%0
10010f4c:	5832 3025 5832 3025 5832 3025 5832 3025     2X%02X%02X%02X%0
10010f5c:	5832 3025 5832 0020 6e49 6f66 6d3a 7861     2X%02X .Info:max
10010f6c:	6d69 6d75 6e20 2e6f 666f 7320 6163 206e     imum no.of scan 
10010f7c:	6564 6976 6563 7220 6165 6863 6465 2e2e     device reached..
10010f8c:	532e 6f74 7070 6e69 2067 6353 6e61 0000     .Stopping Scan..
10010f9c:	6146 6c69 6465 7420 206f 7473 706f 7320     Failed to stop s
10010fac:	6163 6e6e 6e69 0067 7830 3025 5832 202c     canning.0x%02X, 
10010fbc:	0000 0000 5343 4b52 203a 0000 5249 3a4b     ....CSRK: ..IRK:
10010fcc:	0000 0000 6150 7269 6e69 2067 6166 6c69     ....Pairing fail
10010fdc:	6465 2e2e 442e 7369 6f63 6e6e 6365 6974     ed...Disconnecti
10010fec:	676e 0000 6944 6373 6e6f 656e 7463 5220     ng..Disconnect R
10010ffc:	7165 6575 7473 4620 6961 656c 0064 0000     equest Failed...
1001100c:	6150 7269 6e69 2067 7270 636f 6465 7275     Pairing procedur
1001101c:	2065 6f63 706d 656c 6574 2064 7573 6363     e completed succ
1001102c:	7365 6673 6c75 796c 0000 0000 4c42 2045     essfully....BLE 
1001103c:	6544 6976 6563 6e20 746f 6620 756f 646e     Device not found
1001104c:	7420 206f 7473 726f 2065 6874 2065 6170      to store the pa
1001105c:	7269 6e69 2067 6e69 6f66 0000 544c 3a4b     iring info..LTK:
1001106c:	0020 0000 6e45 7263 7079 6974 6e6f 4e20      ...Encryption N
1001107c:	746f 7320 6174 7472 6465 0000 6c53 7661     ot started..Slav
1001108c:	2065 6553 7563 6972 7974 5220 7165 2d20     e Security Req -
1001109c:	4120 7475 6568 746e 6369 7461 6f69 206e      Authentication 
100110ac:	6146 6c69 6465 0000 6547 656e 6172 6574     Failed..Generate
100110bc:	2064 544c 3a4b 0020 7830 3025 5832 0020     d LTK: .0x%02X .
100110cc:	6553 646e 6e69 2067 6170 7269 6e69 2067     Sending pairing 
100110dc:	6572 7073 6e6f 6573 0000 0000 6150 7269     response....Pair
100110ec:	5220 7165 6575 7473 2d20 4120 7475 6568      Request - Authe
100110fc:	746e 6369 7461 6f69 206e 6146 6c69 6465     ntication Failed
1001110c:	0000 0000 6e45 6574 2072 6874 2065 6150     ....Enter the Pa
1001111c:	7373 656b 2879 2d36 6944 6967 2974 6920     sskey(6-Digit) i
1001112c:	206e 6554 6d72 6e69 6c61 003a 6950 206e     n Terminal:.Pin 
1001113c:	6954 656d 756f 0074 6944 6373 6e6f 656e     Timeout.Disconne
1001114c:	7463 6e69 2067 2e2e 002e 0000 6c50 6165     cting ......Plea
1001115c:	6573 4520 746e 7265 7420 6568 6620 6c6f     se Enter the fol
1001116c:	6f6c 6977 676e 5020 7361 2d73 6f63 6564     lowing Pass-code
1001117c:	6f28 206e 746f 6568 2072 6544 6976 6563     (on other Device
1001118c:	3a29 0000 6150 7269 6b2d 7965 7220 7065     ):..Pair-key rep
1001119c:	796c 6620 6961 656c 0064 0000 4f4f 2042     ly failed...OOB 
100111ac:	6546 7461 7275 2065 6f4e 2074 7573 7070     Feature Not supp
100111bc:	726f 6574 0064 0000 6e45 6574 6572 2064     orted...Entered 
100111cc:	6150 7373 632d 646f 3a65 0000 4e45 2d43     Pass-code:..ENC-
100111dc:	6552 3a71 4320 6e6f 206e 6148 646e 656c     Req: Conn Handle
100111ec:	4420 7665 6369 2065 6f46 6e75 3a64 6468      Device Found:hd
100111fc:	3a6c 6425 0000 0000 6f68 7473 6420 7665     l:%d....host dev
1001120c:	6369 2065 6465 7669 2520 0078 6570 7265     ice ediv %x.peer
1001121c:	6420 7665 6369 2065 6465 7669 2520 0078      device ediv %x.
1001122c:	6e65 5f63 6572 2071 6465 7669 2520 0078     enc_req ediv %x.
1001123c:	6854 2065 6e69 6564 2078 7369 2520 0064     The index is %d.
1001124c:	4e45 2d43 6552 3a71 4b20 7965 4620 756f     ENC-Req: Key Fou
1001125c:	646e 0000 6150 7269 6e69 2067 6e69 6f66     nd..Pairing info
1001126c:	6d72 7461 6f69 206e 666f 7020 6565 2072     rmation of peer 
1001127c:	6564 6976 6563 6920 2073 6f6e 2074 7661     device is not av
1001128c:	6961 616c 6c62 2e65 0000 0000 6c50 6165     ailable.....Plea
1001129c:	6573 7520 706e 6961 2072 6874 2065 6564     se unpair the de
100112ac:	6976 6563 6620 6f72 206d 6570 7265 6420     vice from peer d
100112bc:	7665 6369 2865 6f6d 6962 656c 2029 6573     evice(mobile) se
100112cc:	7474 6e69 7367 6d20 6e65 2075 6e61 2064     ttings menu and 
100112dc:	7473 7261 2074 6170 7269 6e69 2067 6761     start pairing ag
100112ec:	6961 006e 6e45 7263 7079 6974 6e6f 5220     ain.Encryption R
100112fc:	7165 6575 7473 5220 7065 796c 4620 6961     equest Reply Fai
1001130c:	656c 0064 6e45 7263 7079 6974 6e6f 5220     led.Encryption R
1001131c:	7165 6575 7473 5220 7065 796c 0000 0000     equest Reply....
1001132c:	6e49 7469 6169 696c 697a 676e 5320 4d41     Initializing SAM
1001133c:	3142 0031 4153 424d 3131 4920 696e 6974     B11.SAMB11 Initi
1001134c:	6c61 7a69 7461 6f69 206e 6166 6c69 6465     alization failed
1001135c:	0000 0000 6c50 6165 6573 6320 6568 6b63     ....Please check
1001136c:	7420 6568 7020 776f 7265 6120 646e 6320      the power and c
1001137c:	6e6f 656e 7463 6f69 206e 202f 6168 6472     onnection / hard
1001138c:	6177 6572 6320 6e6f 656e 7463 726f 0000     ware connector..
1001139c:	4153 5242 2d45 4d53 0053 0000 6544 6976     SABRE-SMS...Devi
100113ac:	6563 6e20 6d61 2065 6573 2074 6166 6c69     ce name set fail
100113bc:	6465 0000 4442 6120 6464 6572 7373 6720     ed..BD address g
100113cc:	7465 6620 6961 656c 0064 0000 4442 4120     et failed...BD A
100113dc:	6464 6572 7373 303a 2578 3230 2558 3230     ddress:0x%02X%02
100113ec:	2558 3230 2558 3230 2558 3230 2558 3230     X%02X%02X%02X%02
100113fc:	2c58 4120 6464 6572 7373 5420 7079 3a65     X, Address Type:
1001140c:	6425 0000 6553 2074 4c42 2045 6544 6976     %d..Set BLE Devi
1001141c:	6563 6320 6e6f 6966 7567 6172 6974 6e6f     ce configuration
1001142c:	6620 6961 656c 0064 6553 2074 4c42 2045      failed.Set BLE 
1001143c:	6544 6976 6563 4120 6464 6572 7373 6620     Device Address f
1001144c:	6961 656c 0064 0000 6353 6e61 696e 676e     ailed...Scanning
1001145c:	2e2e 502e 656c 7361 2065 6177 7469 2e2e     ...Please wait..
1001146c:	002e 0000 6c53 7661 2065 6573 7563 6972     ....Slave securi
1001147c:	7974 7220 7165 6575 7473 7320 6375 6563     ty request succe
1001148c:	7373 7566 006c 0000 6c53 7661 2065 6573     ssful...Slave se
1001149c:	7563 6972 7974 7220 7165 6575 7473 6620     curity request f
100114ac:	6961 656c 0064 0000 6f43 6e6e 6365 6574     ailed...Connecte
100114bc:	2064 6f74 7020 6565 2072 6564 6976 6563     d to peer device
100114cc:	7720 7469 2068 6461 7264 7365 2073 7830      with address 0x
100114dc:	3025 7832 3025 7832 3025 7832 3025 7832     %02x%02x%02x%02x
100114ec:	3025 7832 3025 7832 0000 0000 6f43 6e6e     %02x%02x....Conn
100114fc:	6365 6974 6e6f 4820 6e61 6c64 2065 6425     ection Handle %d
1001150c:	0000 0000 6552 6f73 766c 6e69 2067 6152     ....Resolving Ra
1001151c:	646e 6d6f 6120 6464 6572 7373 7320 6375     ndom address suc
1001152c:	6563 7373 2a2a 0000 6552 6f73 766c 6e69     cess**..Resolvin
1001153c:	2067 6152 646e 6d6f 6120 6464 6572 7373     g Random address
1001154c:	6620 6961 656c 2a64 002a 0000 614d 2078      failed**...Max 
1001155c:	756e 626d 7265 6f20 2066 6f63 6e6e 6365     number of connec
1001156c:	6974 6e6f 7220 6165 6863 6465 203a 6425     tion reached: %d
1001157c:	3d20 3d3d 443e 7369 6f63 6e6e 6365 6974      ===>Disconnecti
1001158c:	676e 2e2e 002e 0000 6544 6976 6563 4320     ng......Device C
1001159c:	6e6f 656e 7463 6f69 206e 6146 6c69 6465     onnection Failed
100115ac:	2d20 5320 6174 7574 3a73 2520 0064 0000      - Status: %d...
100115bc:	2323 2323 2323 2323 2323 6544 6976 6563     ##########Device
100115cc:	4620 756f 646e 0000 2323 2323 2323 2323      Found..########
100115dc:	2323 6544 6976 6563 4e20 746f 4620 756f     ##Device Not Fou
100115ec:	646e 0000 6544 6976 6563 6920 7864 253a     nd..Device idx:%
100115fc:	0064 0000 4c42 2d45 7645 6e65 3a74 6425     d...BLE-Event:%d
1001160c:	0000 0000 4147 5454 535f 7265 6576 2072     ....GATT_Server 
1001161c:	7645 6e65 3a74 6425 0000 0000 4c42 2d45     Event:%d....BLE-
1001162c:	614d 616e 6567 3a72 6e55 6e6b 776f 206e     Manager:Unknown 
1001163c:	7645 6e65 3d74 7830 5825 0000 4c42 2045     Event=0x%X..BLE 
1001164c:	6441 6576 7472 7369 6d65 6e65 2074 6164     Advertisement da
1001165c:	6174 7320 7465 6620 6961 656c 0064 0000     ta set failed...
1001166c:	4c42 2045 6441 6576 7472 7369 6d65 6e65     BLE Advertisemen
1001167c:	2074 6164 6174 7320 7465 7320 6375 6563     t data set succe
1001168c:	7373 0000                                   ss..

10011690 <ble_mgr_gap_handle>:
10011690:	9ee1 1000 a169 1000 9f05 1000 0000 0000     ....i...........
100116a0:	0000 0000 ade5 1000 9fe5 1000 a081 1000     ................
100116b0:	a3c5 1000 a215 1000 a5c5 1000 a3dd 1000     ................
100116c0:	a751 1000 a895 1000 a0a5 1000 b031 1000     Q...........1...
	...
100116dc:	6e49 7469 6169 696c 697a 676e 4220 454c     Initializing BLE
100116ec:	4120 7070 696c 6163 6974 6e6f 0000 0000      Application....
100116fc:	6172 646e 203f 6425 2520 0064 7441 656d     rand? %d %d.Atme
1001170c:	206c 6f43 7072 002e                              l Corp.

10011713 <CSWTCH.47>:
10011713:	0300 0301 0303 0303 0303 0303 0303 0002     ................
10011723:	fc00 00e8 bc10 00e7 bc10 00e7 ba10 00e7     ................
10011733:	d410 00e8 d410 00e8 c610 00e8 ba10 00e7     ................
10011743:	d410 00e8 c610 00e8 d410 00e8 ba10 00e7     ................
10011753:	dc10 00e8 dc10 00e8 dc10 00e8 dc10 00ea     ................
10011763:	4310 0000 3000                                   .C...

10011768 <_global_impure_ptr>:
10011768:	1830 1001                                   0...

1001176c <__sf_fake_stdin>:
	...

1001178c <__sf_fake_stdout>:
	...

100117ac <__sf_fake_stderr>:
	...
100117cc:	2d23 2b30 0020 6c68 004c 6665 4567 4746     #-0+ .hlL.efgEFG
100117dc:	3000 3231 3433 3635 3837 4139 4342 4544     .0123456789ABCDE
100117ec:	0046 3130 3332 3534 3736 3938 6261 6463     F.0123456789abcd
100117fc:	6665 0000                                   ef..

10011800 <_init>:
10011800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10011802:	46c0      	nop			; (mov r8, r8)
10011804:	bcf8      	pop	{r3, r4, r5, r6, r7}
10011806:	bc08      	pop	{r3}
10011808:	469e      	mov	lr, r3
1001180a:	4770      	bx	lr

1001180c <__init_array_start>:
1001180c:	100080b1 	.word	0x100080b1

10011810 <_fini>:
10011810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10011812:	46c0      	nop			; (mov r8, r8)
10011814:	bcf8      	pop	{r3, r4, r5, r6, r7}
10011816:	bc08      	pop	{r3}
10011818:	469e      	mov	lr, r3
1001181a:	4770      	bx	lr

1001181c <__fini_array_start>:
1001181c:	10008089 	.word	0x10008089
